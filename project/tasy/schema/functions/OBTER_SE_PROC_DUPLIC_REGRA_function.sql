-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_proc_duplic_regra ( cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_prescricao_p timestamp, ie_tipo_atendimento_p bigint, cd_pessoa_fisica_p text, nr_prescricao_p bigint, ie_lado_p text, ie_consiste_mesma_prescr_p text, nr_sequencia_p bigint) RETURNS varchar AS $body$
DECLARE


ie_duplicado_w			varchar(1) := 'N';
ie_consiste_lado_w		varchar(1);
cd_grupo_proc_w			bigint;
cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
cont_w				bigint;
qr_horas_consistir_w		bigint;

nr_seq_forma_org_sus_w		bigint := 0;
nr_seq_grupo_sus_w		bigint := 0;
nr_seq_subgrupo_sus_w		bigint := 0;

c01 CURSOR FOR
SELECT	qr_horas_consistir,
		coalesce(ie_consiste_lado,'S')
from	regra_procedimento_duplic a
where	coalesce(ie_tipo_atendimento, ie_tipo_atendimento_p)	= ie_tipo_atendimento_p
and	coalesce(cd_procedimento, cd_procedimento_p)		= cd_procedimento_p
and	((coalesce(cd_procedimento::text, '') = '') or (ie_origem_proced	= ie_origem_proced_p))
and	coalesce(cd_grupo_proc, cd_grupo_proc_w)			= cd_grupo_proc_w
and	coalesce(cd_area_procedimento, cd_area_procedimento_w) = cd_area_procedimento_w
and	coalesce(cd_especialidade,cd_especialidade_w)	= cd_especialidade_w
and	coalesce(a.nr_seq_forma_org,nr_seq_forma_org_sus_w)		= nr_seq_forma_org_sus_w
and	coalesce(a.nr_seq_grupo,nr_seq_grupo_sus_w)				= nr_seq_grupo_sus_w
and	coalesce(a.nr_seq_subgrupo,nr_seq_subgrupo_sus_w)		= nr_seq_subgrupo_sus_w
order by coalesce(cd_procedimento,0),
	coalesce(cd_grupo_proc,0),
	coalesce(cd_especialidade,0),
	coalesce(cd_area_procedimento,0);


BEGIN

select	cd_grupo_proc,
	cd_area_procedimento,
	cd_especialidade
into STRICT	cd_grupo_proc_w,
	cd_area_procedimento_w,
	cd_especialidade_w
from	estrutura_procedimento_v
where	cd_procedimento		= cd_procedimento_p
and	ie_origem_proced	= ie_origem_proced_p;

begin
select	c.nr_seq_grupo,
	b.nr_seq_subgrupo,
	a.nr_seq_forma_org
into STRICT	nr_seq_grupo_sus_w,
	nr_seq_subgrupo_sus_w,
	nr_seq_forma_org_sus_w
from	sus_procedimento a,
	sus_forma_organizacao b,
	sus_subgrupo c
where	b.nr_seq_subgrupo	= c.nr_sequencia
and	a.nr_seq_forma_org	= b.nr_sequencia
and	a.cd_procedimento	= cd_procedimento_p
and	a.ie_origem_proced	= ie_origem_proced_p  LIMIT 1;
exception
when others then
	nr_seq_grupo_sus_w	:= 0;
	nr_seq_subgrupo_sus_w	:= 0;
	nr_seq_forma_org_sus_w	:= 0;
end;

open C01;
loop
fetch C01 into
	qr_horas_consistir_w,
	ie_consiste_lado_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	qr_horas_consistir_w	:= qr_horas_consistir_w;
end loop;
close C01;

if (qr_horas_consistir_w > 0) then

	if (coalesce(ie_consiste_mesma_prescr_p,'N') = 'N') then
		select	count(*)
		into STRICT	cont_w
		from	prescr_medica a
		where	a.dt_prescricao		> clock_timestamp() - qr_horas_consistir_w/24
		and	a.cd_pessoa_fisica	= cd_pessoa_fisica_p
		and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
		and	a.nr_prescricao		<> nr_prescricao_p
		and	exists (SELECT	1
				from	prescr_procedimento b
				where	a.nr_prescricao		= b.nr_prescricao
				and	b.cd_procedimento	= cd_procedimento_p
				and	b.ie_origem_proced	= ie_origem_proced_p
				and	((ie_consiste_lado_w = 'S') or (coalesce(b.ie_lado,'X') = coalesce(ie_lado_p,'X')))
				and	coalesce(b.dt_suspensao::text, '') = '');
	else
		select	count(*)
		into STRICT	cont_w
		from	prescr_medica a
		where	a.dt_prescricao		> clock_timestamp() - qr_horas_consistir_w/24
		and	a.cd_pessoa_fisica	= cd_pessoa_fisica_p
		--and	a.dt_liberacao		is not null
		and	a.nr_prescricao		= nr_prescricao_p
		and	exists (SELECT	1
				from	prescr_procedimento b
				where	a.nr_prescricao		= b.nr_prescricao
				and	b.cd_procedimento	= cd_procedimento_p
				and	b.ie_origem_proced	= ie_origem_proced_p
				and	b.nr_sequencia		<> nr_sequencia_p
				and	((ie_consiste_lado_w = 'S') or (coalesce(b.ie_lado,'X') = coalesce(ie_lado_p,'X')))
				and	coalesce(b.dt_suspensao::text, '') = '');
	end if;

	if (cont_w > 0) then
		ie_duplicado_w	:= 'S';
	end if;
end if;

return	ie_duplicado_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_proc_duplic_regra ( cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_prescricao_p timestamp, ie_tipo_atendimento_p bigint, cd_pessoa_fisica_p text, nr_prescricao_p bigint, ie_lado_p text, ie_consiste_mesma_prescr_p text, nr_sequencia_p bigint) FROM PUBLIC;

