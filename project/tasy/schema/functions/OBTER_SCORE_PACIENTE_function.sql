-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_score_paciente ( nr_sequencia_p bigint, ie_opcao_p text) RETURNS varchar AS $body$
DECLARE


/*
Retorna dados do score do paciente de acordo com a regra Prioridade análise regulação.
'T' - total do score do paciente
'R' - descrição das regras do score do paciente
'N' - descrição dos níveis do score do paciente
'P' - pontuação de cada regra proporcional ao score total
*/
nr_atendimento_w 	bigint;
ie_gravida_w 		varchar(255);
cd_procedimento_w	agenda_lista_espera.cd_procedimento%type;
qt_idade_w			smallint;
cd_pessoa_fisica_w	agenda_lista_espera.cd_pessoa_fisica%type;
cd_doenca_w			diagnostico_doenca.cd_doenca%type := null;
qt_nivel_w			bigint := 1;
nr_nivel_w			bigint;
nr_seq_w			regra_pontuacao_prior.nr_sequencia%type;
ie_cid_w			varchar(1);
ds_regras_w			varchar(16000);
ds_lista_regra_w	varchar(16000);
ds_niveis_w			varchar(16000);
ds_lista_nv_w		varchar(16000);
nr_niveis_w			varchar(16000);
ds_lista_nr_w		varchar(16000);
ds_retorno_w		varchar(16000);
nr_base_w			bigint;
nr_niv_w			bigint;
ds_nr_niveis_w		varchar(16000);
nr_nivel_def_w		varchar(10);
nr_nivel_tempo_w	varchar(10);
ds_nivel_def_w		varchar(255);
ds_prior_def_w		varchar(255);
qt_nivel_tempo_w	bigint;
ds_prior_tempo_w	varchar(255);
cd_especialidade_w	especialidade_medica.cd_especialidade%type;
cd_area_proced_w	area_procedimento.cd_area_procedimento%type;
cd_espec_proced_w	especialidade_proc.cd_especialidade%type;
cd_grupo_proced_w	grupo_proc.cd_grupo_proc%type;
ie_origem_proced_w	procedimento.ie_origem_proced%type;
sql_errm_w			varchar(16000)	;

exp_1_w				varchar(255)	;
exp_2_w				varchar(255)	;

c01 CURSOR FOR
	SELECT  distinct(b.nr_sequencia),
			g.ie_prioridade,
			a.ds_prioridade||',', --- regras
			g.ds_prioridade||',', --- níveis
			g.ie_prioridade||',' --- numero nível
	FROM prioridade_regulacao g, prioridade_analise_reg a
LEFT OUTER JOIN regra_pontuacao_prior b ON (a.nr_sequencia = b.nr_seq_prioridade)
LEFT OUTER JOIN regra_prioridade_regulacao c ON (b.nr_sequencia = c.nr_seq_regra_pont)
LEFT OUTER JOIN regra_regulacao_idade d ON (b.nr_sequencia = d.nr_seq_regra_pont)
LEFT OUTER JOIN regra_regulacao_cid e ON (b.nr_sequencia = e.nr_seq_regra_pont)
LEFT OUTER JOIN regra_regulacao_condicao f ON (b.nr_sequencia = f.nr_seq_regra_pont)
WHERE coalesce(qt_idade_w,1) between coalesce(d.nr_idade_min,0) and coalesce(d.nr_idade_max,999) and coalesce(f.ie_tipo_condicao, 'X') = coalesce(ie_gravida_w, 'X') and coalesce(c.cd_procedimento,0) = coalesce(cd_procedimento_w,0) and coalesce(c.ie_origem_proced,0) = coalesce(ie_origem_proced_w,0) and coalesce(c.cd_area_procedimento,0) = coalesce(cd_area_proced_w,0) and coalesce(c.cd_especialidade,0) = coalesce(cd_espec_proced_w,0) and coalesce(c.cd_grupo_proc,0) = coalesce(cd_grupo_proced_w,0) and coalesce(c.cd_especialidade_medica,0) = coalesce(cd_especialidade_w,0) and coalesce(e.cd_doenca_cid,0) = coalesce(cd_doenca_w,0) and b.nr_seq_nivel = g.nr_sequencia;

c02 CURSOR FOR
	SELECT cd_doenca
	from diagnostico_doenca
	where nr_atendimento = nr_atendimento_w;WITH RECURSIVE cte AS (


c03 CURSOR FOR
	SELECT regexp_substr(ds_lista_nr_w, '[^,]+', 1, level) sequencias  
	 
	(regexp_substr(ds_lista_nr_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_nr_w, '[^,]+', 1, level))::text <> '')  UNION ALL


c03 CURSOR FOR 
	SELECT regexp_substr(ds_lista_nr_w, '[^,]+', 1, level) sequencias  
	 
	(regexp_substr(ds_lista_nr_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_nr_w, '[^,]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
;


BEGIN

begin

if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

	select  substr(obter_desc_expressao(296328),1,255),
			substr(obter_desc_expressao(308084),1,255)
	into STRICT	exp_1_w,
			exp_2_w
	;

	select 	max(substr(obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'A'),1,255)),
			max(a.cd_procedimento),
			max(a.ie_origem_proced),
			max(CASE WHEN obter_se_pac_gravida(cd_pessoa_fisica)=substr(obter_desc_expressao(719927),1,255) THEN 'GR'  ELSE null END ),
			max(coalesce(a.nr_atendimento, obter_atendimento_paciente(a.cd_pessoa_fisica, obter_estabelecimento_ativo))),
			max(a.cd_pessoa_fisica),
			max(substr(obter_desc_prioridade_reg(nr_seq_prioridade, 'N'),1,255)),
			max(substr(obter_desc_expressao(296328),1,255)||': '||SUBSTR(obter_desc_prioridade_reg(NR_SEQ_PRIORIDADE, 'D'),1,80)||','),
			max(SUBSTR(obter_desc_prioridade_reg(NR_SEQ_PRIORIDADE),1,80)||','),
			max(obter_dias_entre_datas(coalesce(dt_entrada_lista, dt_atualizacao_nrec),clock_timestamp())),
			max(substr(obter_desc_expressao(308084),1,255)||','),
			max(cd_especialidade)
	into STRICT 	qt_idade_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			ie_gravida_w,
			nr_atendimento_w,
			cd_pessoa_fisica_w,
			nr_nivel_def_w,
			ds_prior_def_w,
			ds_nivel_def_w,
			qt_nivel_tempo_w,
			ds_prior_tempo_w,
			cd_especialidade_w
	from   agenda_lista_espera a
	where a.nr_sequencia = nr_sequencia_p;
	
	if (cd_procedimento_w > 0 and ie_origem_proced_w > 0) then
		begin
			SELECT 	coalesce(MAX(cd_area_procedimento), 0),
					coalesce(MAX(cd_especialidade), 0),
					coalesce(MAX(cd_grupo_proc), 0)
			INTO STRICT 	cd_area_proced_w,
					cd_espec_proced_w,
					cd_grupo_proced_w
			FROM 	estrutura_procedimento_v
			WHERE 	cd_procedimento = cd_procedimento_w
			AND 	ie_origem_proced = ie_origem_proced_w;
		exception
		when others then
			cd_area_proced_w	:= null;
			cd_espec_proced_w	:= null;
			cd_grupo_proced_w	:= null;
		end;
	end if;
	
	select CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT 	ie_cid_w
	from 	diagnostico_doenca
	where	nr_atendimento = nr_atendimento_w;
	
	if (ie_cid_w  = 'S') then
		open c02;
		loop
		fetch c02 into	
			cd_doenca_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			open c01;
			loop
			fetch c01 into
				nr_seq_w,
				nr_nivel_w,
				ds_regras_w,
				ds_niveis_w,
				nr_niveis_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin
				
				qt_nivel_w := qt_nivel_w * nr_nivel_w;	
				ds_lista_regra_w := ds_lista_regra_w||ds_regras_w;
				ds_lista_nv_w := ds_lista_nv_w ||ds_niveis_w;
				ds_lista_nr_w := ds_lista_nr_w||nr_niveis_w;
				
				end;
			end loop;
			close c01;
			
			end;
		end loop;
		close c02;
	else
		open c01;
		loop
		fetch c01 into
			nr_seq_w,
			nr_nivel_w,
			ds_regras_w,
			ds_niveis_w,
			nr_niveis_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			
			qt_nivel_w := qt_nivel_w * nr_nivel_w;	
			ds_lista_regra_w := ds_lista_regra_w||ds_regras_w;
			ds_lista_nv_w := ds_lista_nv_w ||ds_niveis_w;
			ds_lista_nr_w := ds_lista_nr_w||nr_niveis_w;
			
			end;
		end loop;
		close c01;
	end if;
		
	if (ie_opcao_p = 'P') then
	
	if (nr_nivel_def_w > 0) then
		qt_nivel_w := qt_nivel_w * nr_nivel_def_w;
		ds_lista_nr_w := ds_lista_nr_w||nr_nivel_def_w;
	end if;WITH RECURSIVE cte AS (

	
	select 	sum(regexp_substr(ds_lista_nr_w, '[^,]+', 1, level)) sequencias
	into STRICT 	nr_base_w
	
	(regexp_substr(ds_lista_nr_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_nr_w, '[^,]+', 1, level))::text <> '')  UNION ALL

	
	select 	sum(regexp_substr(ds_lista_nr_w, '[^,]+', 1, level)) sequencias
	into STRICT 	nr_base_w
	 
	(regexp_substr(ds_lista_nr_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_nr_w, '[^,]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
;
				
	open c03;
		loop
		fetch c03 into
			nr_niv_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			
			ds_nr_niveis_w := ds_nr_niveis_w||round((nr_niv_w * qt_nivel_w)/nr_base_w)||',';	
			
			end;
		end loop;
	close c03;
	
	if (qt_nivel_tempo_w <> 0) then
		ds_nr_niveis_w := ds_nr_niveis_w||qt_nivel_tempo_w;
	end if;

	end if;


end if;



if (ie_opcao_p = 'T') then

	
	if (nr_nivel_def_w > 0) then
		ds_retorno_w:= (qt_nivel_w * nr_nivel_def_w);
	else
		ds_retorno_w:= qt_nivel_w;
	end if;
	
	if (qt_nivel_tempo_w <> 0) then
		ds_retorno_w := ds_retorno_w + qt_nivel_tempo_w;
	end if;

	if 	((nr_nivel_w = 0) or (coalesce(nr_nivel_w::text, '') = '')) and (nr_nivel_def_w = 0) and (qt_nivel_tempo_w = 0)then
		ds_retorno_w := 0;
	end if;

elsif (ie_opcao_p = 'R') then

	if (ds_prior_def_w IS NOT NULL AND ds_prior_def_w::text <> '') and (nr_nivel_def_w > 0) then
		ds_retorno_w := ds_lista_regra_w||ds_prior_def_w||',';
	else
		ds_retorno_w := ds_lista_regra_w;
	end if;
	
	if (qt_nivel_tempo_w <> 0) then
		ds_retorno_w := ds_retorno_w||ds_prior_tempo_w;
	end if;
	
elsif (ie_opcao_p = 'N') then

	if (ds_nivel_def_w IS NOT NULL AND ds_nivel_def_w::text <> '') and (nr_nivel_def_w > 0) then
		ds_retorno_w := ds_lista_nv_w||ds_nivel_def_w||',';
	else
		ds_retorno_w := ds_lista_nv_w;
	end if;
	
	if (qt_nivel_tempo_w <> 0) then
		ds_retorno_w := ds_retorno_w||' ';
	end if;

elsif (ie_opcao_p = 'P') then
	ds_retorno_w := ds_nr_niveis_w;
end if;

exception
when others then
		ds_retorno_w := 1;		
end;


	
return	substr(ds_retorno_w,1,255);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_score_paciente ( nr_sequencia_p bigint, ie_opcao_p text) FROM PUBLIC;

