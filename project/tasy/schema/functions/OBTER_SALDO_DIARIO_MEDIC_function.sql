-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_saldo_diario_medic ( dt_saldo_p timestamp, cd_estabelecimento_p bigint, cd_local_estoque_p text, cd_material_p bigint, dt_inicio_mes_p timestamp default null) RETURNS bigint AS $body$
DECLARE


dt_fim_w			timestamp;
dt_inicio_mes_w		timestamp;
dt_mes_anterior_w		timestamp;
qt_saldo_w		double precision;
qt_saldo_dia_w		double precision;
dt_movimento_w		timestamp;
qt_estoque_w		double precision := 0;
qt_entrada_w		double precision := 0;
qt_saida_w		double precision := 0;
qt_perda_w		double precision := 0;
qt_transf_w		double precision := 0;
qt_existe_w		smallint := 0;
cd_local_estoque_w	smallint;
cd_sqlw_local_est_p_w		varchar(4000);
ie_local_est_contido_w 		varchar(1) := 'S';



BEGIN

cd_sqlw_local_est_p_w		:= replace(cd_local_estoque_p,' ','');

if (substr(cd_sqlw_local_est_p_w,1,1) = '-') then
	begin
	ie_local_est_contido_w := 'N';
	end;
end if;

cd_sqlw_local_est_p_w := replace(cd_sqlw_local_est_p_w,'-','');
cd_sqlw_local_est_p_w := replace(cd_sqlw_local_est_p_w,'(','');
cd_sqlw_local_est_p_w := replace(cd_sqlw_local_est_p_w,')','');
cd_sqlw_local_est_p_w := coalesce(cd_sqlw_local_est_p_w,'X');

if (coalesce(dt_inicio_mes_p::text, '') = '') then
	dt_inicio_mes_w		:= pkg_date_utils.start_of(dt_saldo_p, 'MONTH', 0);
else
	dt_inicio_mes_w		:= pkg_date_utils.start_of(dt_inicio_mes_p, 'MONTH', 0);
end if;

dt_fim_w		:= pkg_date_utils.end_of(coalesce(dt_saldo_p,clock_timestamp()),'DAY', 0);
dt_mes_anterior_w	:= PKG_DATE_UTILS.ADD_MONTH(dt_inicio_mes_w,-1, 0);


if (cd_local_estoque_p IS NOT NULL AND cd_local_estoque_p::text <> '') then
	begin
	select	count(*),
		coalesce(max(cd_local_estoque),0)
	into STRICT	qt_existe_w,
		cd_local_estoque_w
	from	local_estoque
	where	obter_se_contido(cd_local_estoque, cd_sqlw_local_est_p_w) = ie_local_est_contido_w;

	if (qt_existe_w = 1) then
		begin
		select	coalesce(sum(qt_estoque),0)
		into STRICT	qt_saldo_w
		from	saldo_Estoque
		where	cd_estabelecimento	= cd_estabelecimento_p
		and	cd_material 		= cd_material_p
		and	dt_mesano_referencia 	= dt_mes_anterior_w
		and	cd_local_estoque	= cd_local_estoque_w;

		select	coalesce(sum(obter_qt_coluna_controlado(1, b.ie_entrada_saida, b.ie_tipo_requisicao,
				b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_entrada,
			coalesce(sum(obter_qt_coluna_controlado(2, b.ie_entrada_saida, b.ie_tipo_requisicao,
				b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_saida,
			coalesce(sum(obter_qt_coluna_controlado(3, b.ie_entrada_saida, b.ie_tipo_requisicao,
				b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_perda,
			coalesce(sum(obter_qt_coluna_controlado(4, b.ie_entrada_saida, b.ie_tipo_requisicao,
				b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_transf
		into STRICT	qt_entrada_w,
			qt_saida_w,
			qt_perda_w,
			qt_transf_w
		from	operacao_estoque b,
			movimento_estoque a
		where	a.cd_operacao_estoque	= b.cd_operacao_estoque
		and	a.cd_local_estoque	= cd_local_estoque_w
		and	a.cd_material_estoque	= cd_material_p
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	a.dt_mesano_referencia 	>= dt_inicio_mes_w
		and	a.dt_movimento_estoque   <= dt_fim_w;
		end;
	else
		begin
		select	coalesce(sum(qt_estoque),0)
		into STRICT	qt_saldo_w
		from	saldo_Estoque
		where	cd_estabelecimento		= cd_estabelecimento_p
		and	cd_material 		= cd_material_p
		and	dt_mesano_referencia 	= dt_mes_anterior_w
		and	obter_se_contido(cd_local_estoque, cd_sqlw_local_est_p_w) = ie_local_est_contido_w;

		select	coalesce(sum(obter_qt_coluna_controlado(1, b.ie_entrada_saida, b.ie_tipo_requisicao,
				b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_entrada,
			coalesce(sum(obter_qt_coluna_controlado(2, b.ie_entrada_saida, b.ie_tipo_requisicao,
				b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_saida,
			coalesce(sum(obter_qt_coluna_controlado(3, b.ie_entrada_saida, b.ie_tipo_requisicao,
				b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_perda,
			coalesce(sum(obter_qt_coluna_controlado(4, b.ie_entrada_saida, b.ie_tipo_requisicao,
				b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_transf
		into STRICT	qt_entrada_w,
			qt_saida_w,
			qt_perda_w,
			qt_transf_w
		from	operacao_estoque b,
			movimento_estoque a
		where	a.cd_operacao_estoque	= b.cd_operacao_estoque
		and     obter_se_contido(a.cd_local_estoque, cd_sqlw_local_est_p_w) = ie_local_est_contido_w
		and	a.cd_material_estoque	= cd_material_p
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	a.dt_mesano_referencia 	>= dt_inicio_mes_w
		and	a.dt_movimento_estoque   <= dt_fim_w;
		end;
	end if;
	end;
else
	begin
	select	coalesce(sum(qt_estoque),0)
	into STRICT	qt_saldo_w
	from	saldo_Estoque
	where	cd_estabelecimento		= cd_estabelecimento_p
	and	cd_material 		= cd_material_p
	and	dt_mesano_referencia 	= dt_mes_anterior_w;

	select	coalesce(sum(obter_qt_coluna_controlado(1, b.ie_entrada_saida, b.ie_tipo_requisicao,
			b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_entrada,
		coalesce(sum(obter_qt_coluna_controlado(2, b.ie_entrada_saida, b.ie_tipo_requisicao,
			b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_saida,
		coalesce(sum(obter_qt_coluna_controlado(3, b.ie_entrada_saida, b.ie_tipo_requisicao,
			b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_perda,
		coalesce(sum(obter_qt_coluna_controlado(4, b.ie_entrada_saida, b.ie_tipo_requisicao,
			b.ie_coluna_controlado, a.cd_acao, a.qt_estoque)),0) qt_transf
	into STRICT	qt_entrada_w,
		qt_saida_w,
		qt_perda_w,
		qt_transf_w
	from	operacao_estoque b,
		movimento_estoque a
	where	a.cd_operacao_estoque	= b.cd_operacao_estoque
	and	a.cd_material_estoque	= cd_material_p
	and	a.cd_estabelecimento	= cd_estabelecimento_p
	and	a.dt_mesano_referencia 	>= dt_inicio_mes_w
	and	a.dt_movimento_estoque   <= dt_fim_w;
	end;
end if;

qt_saldo_w := coalesce(qt_saldo_w,0) + qt_entrada_w - qt_saida_w - qt_perda_w - qt_transf_w;

qt_saldo_dia_w	:= coalesce(qt_saldo_w,0);

return qt_saldo_dia_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_saldo_diario_medic ( dt_saldo_p timestamp, cd_estabelecimento_p bigint, cd_local_estoque_p text, cd_material_p bigint, dt_inicio_mes_p timestamp default null) FROM PUBLIC;

