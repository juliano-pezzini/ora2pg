-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_restr_val_45 (dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_val_partic_p pls_tipos_ocor_pck.dados_val_partic, cursor_p integer, ie_opcao_p text) RETURNS varchar AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Salvar informações na indicação da medicina preventiva feitas pelo acesso do
prestador e do beneficiário.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [ } Tasy (Delphi/Java) [  x] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
IE_FORMA_APLICACAO
(R,GD,PD)(Regra de participantes,Grau duplicado,Participante duplicado)

IE_INCIDENCIA
(GPDH,GPD,GP)(Mesma: guia;procedimento;data;hora,Mesma: guia;procedimento;data,Mesma: guia;procedimento)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_restricao_w	varchar(4000)	:= null;
indice_w	integer;

C01 CURSOR(nr_seq_regra_partic_pc	dados_val_partic_p.nr_seq_regra_partic%type) FOR
	SELECT	a.nr_sequencia
	from	pls_oc_regra_grupo_partic a
	where	a.nr_seq_regra_partic = nr_seq_regra_partic_pc;
BEGIN
if (dados_val_partic_p.ie_forma_aplicacao IS NOT NULL AND dados_val_partic_p.ie_forma_aplicacao::text <> '') then
	/* Se tiver que validar regra de participantes, montar restrição correspondente */

	if (dados_val_partic_p.ie_forma_aplicacao = 'R') then
		if (ie_opcao_p = 'RESTRICAO') then
			/* Para montar essa restrição é necessário incluir um AND para cada combinação de participantes (Regra E) */

			indice_w	:= 0;
			for	r_C01_w in C01(dados_val_partic_p.nr_seq_regra_partic) loop
				indice_w	:= indice_w + 1;
				ds_restricao_w	:= ds_restricao_w || pls_util_pck.enter_w ||
						'and	(select	max(1) ' || pls_util_pck.enter_w ||
						'		from	pls_conta_partic_ocor_v	partic2 ' || pls_tipos_ocor_pck.enter_w ||
						'		where	partic.cd_guia_referencia = partic2.cd_guia_referencia ' || pls_tipos_ocor_pck.enter_w ||
						'		and	partic.nr_seq_segurado = partic2.nr_seq_segurado ' || pls_tipos_ocor_pck.enter_w ||
						'		and	partic.cd_procedimento = partic2.cd_procedimento ' || pls_tipos_ocor_pck.enter_w ||
						'		and	partic.ie_origem_proced = partic2.ie_origem_proced ' || pls_tipos_ocor_pck.enter_w ||
						'		and	(select	count(1) ' || pls_util_pck.enter_w ||
						'			from	table(pls_regra_partic_pck.obter_partic_grupo(null,:nr_seq_grupo_partic_' || indice_w || ',null)) x ' || pls_util_pck.enter_w ||
						'			where	(x.nr_seq_prestador = partic2.nr_seq_prestador or x.nr_seq_prestador is null) ' || pls_util_pck.enter_w ||
						'			and	(x.nr_seq_grau_partic = partic2.nr_seq_grau_partic or x.nr_seq_grau_partic is null) ) > 0 ' || pls_util_pck.enter_w;
				/* Restringir incidência,  Guia e procedimento já estão como default */

				if (dados_val_partic_p.ie_incidencia = 'GPD') then
					ds_restricao_w	:= ds_restricao_w || pls_tipos_ocor_pck.enter_w || '		and	partic2.dt_procedimento_trunc = partic.dt_procedimento_trunc ';
				elsif (dados_val_partic_p.ie_incidencia = 'GPDH') then
					ds_restricao_w	:= ds_restricao_w || pls_tipos_ocor_pck.enter_w || '		and	partic2.dt_procedimento = partic.dt_procedimento ';
				end if;

				/* Fechar exists/count */

				ds_restricao_w	:= ds_restricao_w || pls_tipos_ocor_pck.enter_w ||'		) is not null';
			end loop;
		else
			indice_w	:= 0;
			for	r_C01_w in C01(dados_val_partic_p.nr_seq_regra_partic) loop
				indice_w	:= indice_w + 1;
				dbms_sql.bind_variable(cursor_p, ':nr_seq_grupo_partic_' || indice_w, r_C01_w.nr_sequencia);
			end loop;
		end if;
	/* Se tiver que validar grau duplicado, montar restrição correspondente */

	elsif (dados_val_partic_p.ie_forma_aplicacao = 'GD') then
		if (ie_opcao_p = 'RESTRICAO') then
			ds_restricao_w	:= 	'and	exists	(select	1 ' || pls_util_pck.enter_w ||
						'		from	pls_conta_partic_ocor_v	partic2 ' || pls_tipos_ocor_pck.enter_w ||
						'		where	partic.cd_guia_referencia = partic2.cd_guia_referencia ' || pls_tipos_ocor_pck.enter_w ||
						'		and	partic.nr_seq_segurado = partic2.nr_seq_segurado ' || pls_tipos_ocor_pck.enter_w ||
						'		and	partic.cd_procedimento = partic2.cd_procedimento ' || pls_tipos_ocor_pck.enter_w ||
						'		and	partic.ie_origem_proced = partic2.ie_origem_proced ' || pls_tipos_ocor_pck.enter_w ||
						'		and	((partic2.nr_seq_conta_proc <> partic.nr_seq_conta_proc) or ' || pls_tipos_ocor_pck.enter_w ||
						'			(partic2.nr_seq_proc_partic <> partic.nr_seq_proc_partic)) '|| pls_tipos_ocor_pck.enter_w ||
						'		and	partic2.nr_seq_grau_partic = partic.nr_seq_grau_partic ';

			/* Restringir incidência,  Guia e procedimento já estão como default */

			if (dados_val_partic_p.ie_incidencia = 'GPD') then
				ds_restricao_w	:= ds_restricao_w || pls_tipos_ocor_pck.enter_w || '		and	partic2.dt_procedimento_trunc = partic.dt_procedimento_trunc ';
			elsif (dados_val_partic_p.ie_incidencia = 'GPDH') then
				ds_restricao_w	:= ds_restricao_w || pls_tipos_ocor_pck.enter_w || '		and	partic2.dt_procedimento = partic.dt_procedimento ';
			end if;

			/* Fechar exists/count */

			ds_restricao_w	:= ds_restricao_w || pls_tipos_ocor_pck.enter_w ||' 		)';
		else
			null;
		end if;
	/* Se tiver que validar porticipação duplicada, montar restrição correspondente */

	elsif (dados_val_partic_p.ie_forma_aplicacao = 'PD') then
		if (ie_opcao_p = 'RESTRICAO') then
			ds_restricao_w	:= 	'and	exists	(select	1 ' || pls_util_pck.enter_w ||
						'		from	pls_conta_partic_ocor_v	partic2 ' || pls_tipos_ocor_pck.enter_w ||
						'		where	partic.cd_guia_referencia = partic2.cd_guia_referencia ' || pls_tipos_ocor_pck.enter_w ||
						'		and	partic.nr_seq_segurado = partic2.nr_seq_segurado ' || pls_tipos_ocor_pck.enter_w ||
						'		and	partic.cd_procedimento = partic2.cd_procedimento ' || pls_tipos_ocor_pck.enter_w ||
						'		and	partic.ie_origem_proced = partic2.ie_origem_proced ' || pls_tipos_ocor_pck.enter_w ||
						'		and	((partic2.nr_seq_conta_proc <> partic.nr_seq_conta_proc) or ' || pls_tipos_ocor_pck.enter_w ||
						'			(partic2.nr_seq_proc_partic <> partic.nr_seq_proc_partic)) '|| pls_tipos_ocor_pck.enter_w ||
						'		and	((partic2.cd_medico = partic.cd_medico) or ' || pls_tipos_ocor_pck.enter_w ||
						'			(partic2.nr_seq_prestador = partic.nr_seq_prestador))';
			/* Restringir incidência,  Guia e procedimento já estão como default */

			if (dados_val_partic_p.ie_incidencia = 'GPD') then
				ds_restricao_w	:= ds_restricao_w || pls_tipos_ocor_pck.enter_w || '		and	partic2.dt_procedimento_trunc = partic.dt_procedimento_trunc ';
			elsif (dados_val_partic_p.ie_incidencia = 'GPDH') then
				ds_restricao_w	:= ds_restricao_w || pls_tipos_ocor_pck.enter_w || '		and	partic2.dt_procedimento = partic.dt_procedimento ';
			end if;

			/* Fechar exists/count */

			ds_restricao_w	:= ds_restricao_w || pls_tipos_ocor_pck.enter_w ||' 		)';
		else
			null;
		end if;
	end if;
end if;

return	ds_restricao_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_restr_val_45 (dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_val_partic_p pls_tipos_ocor_pck.dados_val_partic, cursor_p integer, ie_opcao_p text) FROM PUBLIC;

