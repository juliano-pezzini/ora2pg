-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function mprev_obter_dados_captacao as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION mprev_obter_dados_captacao (nr_seq_captacao_p bigint, dt_referencia_p timestamp, ie_opcao_p text) RETURNS varchar AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	varchar;
BEGIN
	v_query := 'SELECT * FROM mprev_obter_dados_captacao_atx ( ' || quote_nullable(nr_seq_captacao_p) || ',' || quote_nullable(dt_referencia_p) || ',' || quote_nullable(ie_opcao_p) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret varchar);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION mprev_obter_dados_captacao_atx (nr_seq_captacao_p bigint, dt_referencia_p timestamp, ie_opcao_p text) RETURNS varchar AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Retornar diferentes informacoes com relacao a captacao da medicina preventiva.
Usada em campos function do dicionario de dados.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: MedPrev - Programas de Promocao a Saude
[  ]  Objetos do dicionario [X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */

/*
IE_OPCAO_P
PF	- Pessoa fisica 
BN	- Beneficiario
PR	- Programa
CP	- Campanha
PA	- Patologia
FR	- Fator de risco
DD	- DDD de contato
TF	- Telefone
OB 	- Observacao
NI	- Nome do indicante
DDDC	- DDD Celular
TCEL	- Telefone celular
TRC	- Telefone residencial completo no formato (DDD) XXXX-XXXX
TCC	- Telefone celular completo no formato (DDD) XXXX-XXXX
QT	- Quantidade de tentativas de captar uma pessoa da captacao. Ligacoes realizadas sem sucesso para a pessoa da captacao.
QCF              - Quantidade de cancelamentos e faltas.
CIB	- Carteirinha de identificacao de beneficiario
*/
ds_retorno_w			varchar(2500);
ds_auxiliar_w			varchar(255);
nr_seq_demanda_espont_w		mprev_demanda_espont.nr_sequencia%type;
nr_seq_indicacao_w		mprev_indicacao_paciente.nr_sequencia%type;
nr_seq_pop_alvo_pessoa_w	mprev_pop_alvo_pessoa.nr_sequencia%type;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_busca_emp_w		mprev_busca_empresarial.nr_sequencia%type;
ds_obs_captacao_w		mprev_captacao.ds_obs_captacao%type;
ie_origem_dados_w		varchar(1);
cd_convenio_w			convenio.cd_convenio%type;

C01 CURSOR FOR
	SELECT	a.nm_programa
	from	mprev_programa a,
			mprev_captacao_destino b
	where	a.nr_sequencia = b.nr_seq_programa
	and		b.nr_seq_captacao = nr_seq_captacao_p;
	
C02 CURSOR FOR
	SELECT	a.nm_campanha
	from	mprev_campanha a,
			mprev_captacao_destino b
	where	a.nr_sequencia = b.nr_seq_campanha
	and		b.nr_seq_captacao = nr_seq_captacao_p;
	
C03 CURSOR FOR
	SELECT	substr(mprev_obter_desc_diagnostico(x.nr_seq_diagnostico_int, 'DI'),1,255)
	from	mprev_captacao_diagnostico x
	where	x.nr_seq_captacao = nr_seq_captacao_p;

C04 CURSOR FOR
	SELECT	substr(mprev_obter_desc_diagnostico(x.nr_seq_diagnostico_int, 'FR'),1,255)
	from	mprev_captacao_diagnostico x
	where	x.nr_seq_captacao = nr_seq_captacao_p;
BEGIN

if (upper(ie_opcao_p) = 'PR') then
	open C01;
	loop
	fetch C01 into
		ds_auxiliar_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
			if (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') then
				ds_retorno_w := substr(ds_retorno_w || ', ' || ds_auxiliar_w,1,255);
				exit when length(ds_retorno_w) >= 254;
			elsif (coalesce(ds_retorno_w::text, '') = '') then
				ds_retorno_w := ds_auxiliar_w;
			end if;
		end;
	end loop;
	close C01;

elsif (upper(ie_opcao_p) = 'CP') then
	open C02;
	loop
	fetch C02 into
		ds_auxiliar_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
			if (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') then
				ds_retorno_w := substr(ds_retorno_w || ', ' || ds_auxiliar_w,1,255);
				exit when length(ds_retorno_w) >= 254;
			elsif (coalesce(ds_retorno_w::text, '') = '') then
				ds_retorno_w := ds_auxiliar_w;
			end if;
		end;
	end loop;
	close C02;

elsif (upper(ie_opcao_p) = 'PA') then
	open C03;
	loop
	fetch C03 into
		ds_auxiliar_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
			if (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') and (ds_auxiliar_w IS NOT NULL AND ds_auxiliar_w::text <> '') then	
				ds_retorno_w := substr(ds_retorno_w || ', ' || ds_auxiliar_w,1,255);
				exit when length(ds_retorno_w) >= 254;
			elsif (coalesce(ds_retorno_w::text, '') = '') then
				ds_retorno_w := ds_auxiliar_w;
			end if;
		end;
	end loop;
	close C03;
	
elsif (upper(ie_opcao_p) = 'FR') then
	open C04;
	loop
	fetch C04 into
		ds_auxiliar_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
			if (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') and (ds_auxiliar_w IS NOT NULL AND ds_auxiliar_w::text <> '') then	
				ds_retorno_w := substr(ds_retorno_w || ', ' || ds_auxiliar_w,1,255);
				exit when length(ds_retorno_w) >= 254;
			elsif (coalesce(ds_retorno_w::text, '') = '') then
				ds_retorno_w := ds_auxiliar_w;
			end if;
		end;
	end loop;
	close C04;
elsif (upper(ie_opcao_p) = 'QT') then
	select	count(1)
	into STRICT 	ds_retorno_w
	from	pls_atendimento a
	where	a.nr_seq_captacao = nr_seq_captacao_p
	and 	(a.dt_conclusao IS NOT NULL AND a.dt_conclusao::text <> '')
	and	not exists (SELECT	1
				 from	pls_evento_ocorrencia y,
					pls_atendimento_evento x
				 where	x.nr_seq_evento = y.nr_sequencia
				 and	x.nr_seq_atendimento = a.nr_sequencia
                                 and    x.nr_seq_captacao = nr_seq_captacao_p
				 and	y.ie_acao_evento in ('1','3','30')); /*Acoes de evento (Agenda Integrada, Agenda de consulta, Agendamento HDM */
elsif (upper(ie_opcao_p) = 'QCF') then
	select  count(nr_sequencia)
        into STRICT	ds_retorno_w
	from    agenda_consulta
	where   nr_sequencia = nr_seq_captacao_p and IE_STATUS_AGENDA in ('F', 'I', 'C');

elsif (upper(ie_opcao_p) = 'PF') then
	select	substr(obter_nome_pf(x.cd_pessoa_fisica),1,255)
	into STRICT	ds_retorno_w
	from	pessoa_fisica x,
			mprev_captacao y
	where	y.nr_sequencia = nr_seq_captacao_p
	and		y.cd_pessoa_fisica = x.cd_pessoa_fisica;
	
else

	select	max(nr_seq_demanda_espont),
		max(nr_seq_indicacao),
		max(nr_seq_pop_alvo_pessoa),
		max(nr_seq_busca_emp),
		max(ds_obs_captacao)
	into STRICT	nr_seq_demanda_espont_w,
		nr_seq_indicacao_w,
		nr_seq_pop_alvo_pessoa_w,
		nr_seq_busca_emp_w,
		ds_obs_captacao_w
	from	mprev_captacao
	where	nr_sequencia = nr_seq_captacao_p;

	ie_origem_dados_w := mprev_obter_origem_dados;
	
	if (nr_seq_pop_alvo_pessoa_w IS NOT NULL AND nr_seq_pop_alvo_pessoa_w::text <> '') then
	
		select	a.cd_pessoa_fisica
		into STRICT	cd_pessoa_fisica_w
		from	mprev_pop_alvo_pessoa a
		where	a.nr_sequencia	= nr_seq_pop_alvo_pessoa_w;
		
		nr_seq_segurado_w	:= mprev_obter_benef_partic(null,cd_pessoa_fisica_w);
	
		if (upper(ie_opcao_p) = 'BN') and (ie_origem_dados_w = 'O') then
			ds_retorno_w := nr_seq_segurado_w;
		elsif (upper(ie_opcao_p) = 'CIB') then
			if (ie_origem_dados_w = 'O') and (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
				ds_retorno_w := pls_obter_dados_segurado(nr_seq_segurado_w,'C');
			elsif (ie_origem_dados_w = 'P') then
				cd_convenio_w := obter_convenio_estab(wheb_usuario_pck.get_cd_estabelecimento);
				ds_retorno_w := obter_dados_titular_convenio(cd_pessoa_fisica_w,cd_convenio_w,'CUV');
			end if;
		elsif (upper(ie_opcao_p) = 'DD') then
			ds_retorno_w	:= obter_compl_pf(cd_pessoa_fisica_w,1,'DDT');
		elsif (upper(ie_opcao_p) = 'TF') then
			ds_retorno_w	:= obter_compl_pf(cd_pessoa_fisica_w,1,'T');
		elsif (upper(ie_opcao_p) = 'DDDC') then
			ds_retorno_w	:= obter_compl_pf(cd_pessoa_fisica_w,1,'DDDC');
		elsif (upper(ie_opcao_p) = 'TCEL') then
			ds_retorno_w	:= obter_compl_pf(cd_pessoa_fisica_w,1,'TCEL');
		elsif (upper(ie_opcao_p) = 'OB') then
			ds_retorno_w	:= null;
		elsif (upper(ie_opcao_p) = 'TCC') then
			ds_retorno_w	:= obter_telefone_pf(cd_pessoa_fisica_w,12);
		elsif (upper(ie_opcao_p) = 'TRC') then
			ds_retorno_w	:= obter_telefone_pf(cd_pessoa_fisica_w,4);
		end if;
		
	elsif (nr_seq_demanda_espont_w IS NOT NULL AND nr_seq_demanda_espont_w::text <> '') then
	
		select	max(cd_pessoa_fisica),
			max(nr_seq_segurado)
		into STRICT	cd_pessoa_fisica_w,
			nr_seq_segurado_w
		from	mprev_demanda_espont
		where	nr_sequencia = nr_seq_demanda_espont_w;
		
		if (coalesce(nr_seq_segurado_w::text, '') = '') then
			nr_seq_segurado_w	:= mprev_obter_benef_partic(null,cd_pessoa_fisica_w);				
		end if;
			
		if (upper(ie_opcao_p) = 'BN') and (ie_origem_dados_w = 'O') then
			ds_retorno_w := nr_seq_segurado_w;
		elsif (upper(ie_opcao_p) = 'CIB') then
			if (ie_origem_dados_w = 'O') and (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
				ds_retorno_w := pls_obter_dados_segurado(nr_seq_segurado_w,'C');
			elsif (ie_origem_dados_w = 'P') then
				cd_convenio_w := obter_convenio_estab(wheb_usuario_pck.get_cd_estabelecimento);
				ds_retorno_w := obter_dados_titular_convenio(cd_pessoa_fisica_w,cd_convenio_w,'CUV');
			end if;		
		elsif (upper(ie_opcao_p) = 'DD') then
			select	x.nr_ddd_contato
			into STRICT	ds_retorno_w
			from	mprev_demanda_espont x
			where	x.nr_sequencia = nr_seq_demanda_espont_w;
		elsif (upper(ie_opcao_p) = 'TF') then
			select	x.nr_telefone_contato
			into STRICT	ds_retorno_w
			from	mprev_demanda_espont x
			where	x.nr_sequencia = nr_seq_demanda_espont_w;
		elsif (upper(ie_opcao_p) = 'DDDC') then
			select	x.nr_ddd_celular
			into STRICT	ds_retorno_w
			from	mprev_demanda_espont x
			where	x.nr_sequencia = nr_seq_demanda_espont_w;
		elsif (upper(ie_opcao_p) = 'TCEL') then
			select	x.nr_telefone_celular
			into STRICT	ds_retorno_w
			from	mprev_demanda_espont x
			where	x.nr_sequencia = nr_seq_demanda_espont_w;	
		elsif (upper(ie_opcao_p) = 'OB') then
			select	substr(x.ds_observacao, 1, 255)
			into STRICT	ds_retorno_w
			from	mprev_demanda_espont x
			where	x.nr_sequencia = nr_seq_demanda_espont_w;
		elsif (upper(ie_opcao_p) = 'TRC') then
			select	CASE WHEN coalesce(x.nr_ddd_contato::text, '') = '' THEN ''  ELSE '('|| x.nr_ddd_contato ||') ' END  || x.nr_telefone_contato
			into STRICT	ds_retorno_w
			from	mprev_demanda_espont x
			where	x.nr_sequencia = nr_seq_demanda_espont_w;
		elsif (upper(ie_opcao_p) = 'TCC') then
			select	CASE WHEN coalesce(x.nr_ddd_celular::text, '') = '' THEN ''  ELSE '('|| x.nr_ddd_celular ||') ' END  || x.nr_telefone_celular
			into STRICT	ds_retorno_w
			from	mprev_demanda_espont x
			where	x.nr_sequencia = nr_seq_demanda_espont_w;
		end if;

	elsif (nr_seq_indicacao_w IS NOT NULL AND nr_seq_indicacao_w::text <> '') then

		select	max(cd_pessoa_fisica),
				max(nr_seq_segurado)
		into STRICT	cd_pessoa_fisica_w,
				nr_seq_segurado_w
		from	mprev_indicacao_paciente
		where	nr_sequencia = nr_seq_indicacao_w;
	
		if (coalesce(nr_seq_segurado_w::text, '') = '') then
			nr_seq_segurado_w	:= mprev_obter_benef_partic(null,cd_pessoa_fisica_w);				
		end if;
	
		if (upper(ie_opcao_p) = 'BN') and (ie_origem_dados_w = 'O') then
			ds_retorno_w := nr_seq_segurado_w;
		elsif (upper(ie_opcao_p) = 'CIB') then	
			if (ie_origem_dados_w = 'O') and (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
				ds_retorno_w := pls_obter_dados_segurado(nr_seq_segurado_w,'C');
			elsif (ie_origem_dados_w = 'P') then
				cd_convenio_w := obter_convenio_estab(wheb_usuario_pck.get_cd_estabelecimento);
				ds_retorno_w := obter_dados_titular_convenio(cd_pessoa_fisica_w,cd_convenio_w,'CUV');
			end if;
		elsif (upper(ie_opcao_p) = 'DD') then
			select	x.nr_ddd_contato
			into STRICT	ds_retorno_w
			from	mprev_indicacao_paciente x
			where	x.nr_sequencia = nr_seq_indicacao_w;
		elsif (upper(ie_opcao_p) = 'TF') then
			select	x.nr_telefone_contato
			into STRICT	ds_retorno_w
			from	mprev_indicacao_paciente x
			where	x.nr_sequencia = nr_seq_indicacao_w;
		elsif (upper(ie_opcao_p) = 'DDDC') then
			select	x.nr_ddd_celular
			into STRICT	ds_retorno_w
			from	mprev_indicacao_paciente x
			where	x.nr_sequencia = nr_seq_indicacao_w;
		elsif (upper(ie_opcao_p) = 'TCEL') then
			select	x.nr_telefone_celular
			into STRICT	ds_retorno_w
			from	mprev_indicacao_paciente x
			where	x.nr_sequencia = nr_seq_indicacao_w;	
		elsif (upper(ie_opcao_p) = 'OB') then
			select	substr(x.ds_observacao, 1, 255)
			into STRICT	ds_retorno_w
			from	mprev_indicacao_paciente x
			where	x.nr_sequencia = nr_seq_indicacao_w;
		elsif (ie_opcao_p = 'NI') then
			select	pls_obter_dados_prestador(x.nr_seq_prest_indic,'N')
			into STRICT	ds_retorno_w
			from	mprev_indicacao_paciente x
			where	x.nr_sequencia = nr_seq_indicacao_w;
			
			if (coalesce(ds_retorno_w::text, '') = '') then
				select	obter_nome_pf(x.cd_pessoa_indicante)
				into STRICT	ds_retorno_w
				from	mprev_indicacao_paciente x
				where	x.nr_sequencia = nr_seq_indicacao_w;
			end if;
		elsif (upper(ie_opcao_p) = 'TRC') then
			select	CASE WHEN coalesce(x.nr_ddd_contato::text, '') = '' THEN ''  ELSE '('|| x.nr_ddd_contato ||') ' END  || x.nr_telefone_contato
			into STRICT	ds_retorno_w
			from	mprev_indicacao_paciente x
			where	x.nr_sequencia = nr_seq_indicacao_w;
		elsif (upper(ie_opcao_p) = 'TCC') then
			select	CASE WHEN coalesce(x.nr_ddd_celular::text, '') = '' THEN ''  ELSE '('|| x.nr_ddd_celular ||') ' END  || x.nr_telefone_celular
			into STRICT	ds_retorno_w
			from	mprev_indicacao_paciente x
			where	x.nr_sequencia = nr_seq_indicacao_w;
		end if;
	
	elsif (nr_seq_busca_emp_w IS NOT NULL AND nr_seq_busca_emp_w::text <> '') then
		
		select	max(cd_pessoa_fisica),
				max(nr_seq_segurado)
		into STRICT	cd_pessoa_fisica_w,
				nr_seq_segurado_w
		from	mprev_busca_empresarial
		where	nr_sequencia = nr_seq_busca_emp_w;
	
		if (coalesce(nr_seq_segurado_w::text, '') = '') then
			nr_seq_segurado_w	:= mprev_obter_benef_partic(null,cd_pessoa_fisica_w);				
		end if;
	
		if (upper(ie_opcao_p) = 'BN') and (ie_origem_dados_w = 'O') then
			ds_retorno_w := nr_seq_segurado_w;
		elsif (upper(ie_opcao_p) = 'CIB') then
			if (ie_origem_dados_w = 'O') and (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
				ds_retorno_w := pls_obter_dados_segurado(nr_seq_segurado_w,'C');
			elsif (ie_origem_dados_w = 'P') then
				cd_convenio_w := obter_convenio_estab(wheb_usuario_pck.get_cd_estabelecimento);
				ds_retorno_w := obter_dados_titular_convenio(cd_pessoa_fisica_w,cd_convenio_w,'CUV');
			end if;
		elsif (upper(ie_opcao_p) = 'DD') then
			select	x.nr_ddd_contato
			into STRICT	ds_retorno_w
			from	mprev_busca_empresarial x
			where	x.nr_sequencia = nr_seq_busca_emp_w;
		elsif (upper(ie_opcao_p) = 'TF') then
			select	x.nr_telefone_contato
			into STRICT	ds_retorno_w
			from	mprev_busca_empresarial x
			where	x.nr_sequencia = nr_seq_busca_emp_w;
		elsif (upper(ie_opcao_p) = 'DDDC') then
			select	x.nr_ddd_celular
			into STRICT	ds_retorno_w
			from	mprev_busca_empresarial x
			where	x.nr_sequencia = nr_seq_busca_emp_w;
		elsif (upper(ie_opcao_p) = 'TCEL') then
			select	x.nr_telefone_celular
			into STRICT	ds_retorno_w
			from	mprev_busca_empresarial x
			where	x.nr_sequencia = nr_seq_busca_emp_w;	
		elsif (upper(ie_opcao_p) = 'OB') then
			select	substr(x.ds_observacao, 1, 255)
			into STRICT	ds_retorno_w
			from	mprev_busca_empresarial x
			where	x.nr_sequencia = nr_seq_busca_emp_w;
		elsif (upper(ie_opcao_p) = 'TRC') then
			select	CASE WHEN coalesce(x.nr_ddd_contato::text, '') = '' THEN ''  ELSE '('|| x.nr_ddd_contato ||') ' END  || x.nr_telefone_contato
			into STRICT	ds_retorno_w
			from	mprev_busca_empresarial x
			where	x.nr_sequencia = nr_seq_busca_emp_w;
		elsif (upper(ie_opcao_p) = 'TCC') then
			select	CASE WHEN coalesce(x.nr_ddd_celular::text, '') = '' THEN ''  ELSE '('|| x.nr_ddd_celular ||') ' END  || x.nr_telefone_celular
			into STRICT	ds_retorno_w
			from	mprev_busca_empresarial x
			where	x.nr_sequencia = nr_seq_busca_emp_w;
		end if;
	
	else
	
		select	a.cd_pessoa_fisica
		into STRICT	cd_pessoa_fisica_w
		from	mprev_captacao a
		where	a.nr_sequencia	= nr_seq_captacao_p;
	
		nr_seq_segurado_w	:= mprev_obter_benef_partic(null,cd_pessoa_fisica_w);
	
		if (upper(ie_opcao_p) = 'BN') and (ie_origem_dados_w = 'O') then
			ds_retorno_w := nr_seq_segurado_w;
		elsif (upper(ie_opcao_p) = 'CIB') then
			if (ie_origem_dados_w = 'O') and (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
				ds_retorno_w := pls_obter_dados_segurado(nr_seq_segurado_w,'C');
			elsif (ie_origem_dados_w = 'P') then
				cd_convenio_w := obter_convenio_estab(wheb_usuario_pck.get_cd_estabelecimento);
				ds_retorno_w := obter_dados_titular_convenio(cd_pessoa_fisica_w,cd_convenio_w,'CUV');
			end if;
		elsif (upper(ie_opcao_p) = 'DD') then
			ds_retorno_w	:= obter_compl_pf(cd_pessoa_fisica_w,1,'DDT');
		elsif (upper(ie_opcao_p) = 'TF') then
			ds_retorno_w	:= obter_compl_pf(cd_pessoa_fisica_w,1,'T');	
		elsif (upper(ie_opcao_p) = 'DDDC') then
			ds_retorno_w	:= obter_compl_pf(cd_pessoa_fisica_w,1,'DDDC');
		elsif (upper(ie_opcao_p) = 'TCEL') then
			ds_retorno_w	:= obter_compl_pf(cd_pessoa_fisica_w,1,'TCEL');
		elsif (upper(ie_opcao_p) = 'OB') then
			ds_retorno_w	:= null;
		elsif (upper(ie_opcao_p) = 'TCC') then
			ds_retorno_w	:= obter_telefone_pf(cd_pessoa_fisica_w,12);
		elsif (upper(ie_opcao_p) = 'TRC') then
			ds_retorno_w	:= obter_telefone_pf(cd_pessoa_fisica_w,4);
		end if;
		
	end if;
	
	if (upper(ie_opcao_p) = 'OB') then
		if (coalesce(ds_retorno_w::text, '') = '') then
			ds_retorno_w	:= ds_obs_captacao_w;
		else
			ds_retorno_w	:= ds_retorno_w||' / '||ds_obs_captacao_w;
		end if;
	end if;
	
end if;


return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION mprev_obter_dados_captacao (nr_seq_captacao_p bigint, dt_referencia_p timestamp, ie_opcao_p text) FROM PUBLIC; -- REVOKE ALL ON FUNCTION mprev_obter_dados_captacao_atx (nr_seq_captacao_p bigint, dt_referencia_p timestamp, ie_opcao_p text) FROM PUBLIC;

