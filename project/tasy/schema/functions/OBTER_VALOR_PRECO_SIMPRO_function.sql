-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_valor_preco_simpro (cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_material_p bigint, cd_simpro_p bigint, tx_pfb_p bigint, tx_pmc_p bigint, dt_base_p timestamp, ie_tipo_preco_conv_p text, tx_pmc_neg_p bigint, tx_pmc_pos_p bigint, tx_pfb_neg_p bigint, tx_pfb_pos_p bigint, ie_dividir_indice_pmc_p text, ie_dividir_indice_pfb_p text, nr_seq_marca_p bigint) RETURNS bigint AS $body$
DECLARE


ie_div_indice_pmc_w	varchar(1);
ie_div_indice_pfb_w	varchar(1);
ie_fora_linha_w		varchar(1);
ie_tipo_convenio_w	smallint;
cd_simpro_w		bigint;
qt_conversao_w		double precision;
dt_fora_linha_w		timestamp;
vl_preco_w		double precision := 0;
nr_seq_mat_simpro_w	bigint;
dt_vigencia_w		timestamp;
ie_tipo_preco_w		varchar(01);
vl_pfb_w		double precision;
vl_pmc_w		double precision;
ie_tipo_lista_w		varchar(1);
nr_seq_simpro_preco_w	bigint;
cd_estab_simpro_w	estabelecimento.cd_estabelecimento%type;

c01 CURSOR FOR
	SELECT	coalesce(a.qt_conversao,1),
		coalesce(a.cd_simpro,0),
		b.dt_fora_linha,
		a.nr_sequencia
	from	simpro_cadastro b,
		material_simpro a
	where	a.cd_simpro						= b.cd_simpro
	and	a.cd_material						= cd_material_p
	and 	a.cd_simpro						= cd_simpro_p
	and	coalesce(a.nr_seq_marca, coalesce(nr_seq_marca_p, 0))	= coalesce(nr_seq_marca_p, 0)
	and	coalesce(a.cd_estabelecimento, coalesce(cd_estabelecimento_p, 0))	= coalesce(cd_estabelecimento_p, 0)
	and	coalesce(a.cd_convenio, coalesce(cd_convenio_p,0)) 		= coalesce(cd_convenio_p,0)
	and	coalesce(a.ie_tipo_convenio, coalesce(ie_tipo_convenio_w,0))	= coalesce(ie_tipo_convenio_w,0)
	and 	dt_base_p between coalesce(a.dt_vigencia, dt_base_p) and coalesce(a.dt_final_vigencia, dt_base_p)
	and	coalesce(a.ie_situacao,'A')					= 'A'
	order by
		coalesce(nr_seq_marca_p, 0),
		coalesce(a.cd_estabelecimento, 0),
		coalesce(a.cd_convenio,0),
		coalesce(a.ie_tipo_convenio,0),
		coalesce(a.dt_vigencia, dt_base_p - 5000);


BEGIN


ie_div_indice_pmc_w	:= coalesce(ie_dividir_indice_pmc_p,'N');
ie_div_indice_pfb_w	:= coalesce(ie_dividir_indice_pfb_p,'N');
cd_estab_simpro_w 	:= wheb_usuario_pck.get_cd_estabelecimento;

select	coalesce(max(ie_fora_linha_simpro),'S')
into STRICT	ie_fora_linha_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_p;

if (coalesce(cd_convenio_p,0) > 0) then
	select	coalesce(max(ie_tipo_convenio),0)
	into STRICT	ie_tipo_convenio_w
	from	convenio
	where	cd_convenio = cd_convenio_p;
end if;

qt_conversao_w	:= 1;
cd_simpro_w	:= 0;
dt_fora_linha_w	:= clock_timestamp() + interval '1000 days';


open C01;
loop
fetch C01 into
	qt_conversao_w,
	cd_simpro_w,
	dt_fora_linha_w,
	nr_seq_mat_simpro_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	qt_conversao_w		:= qt_conversao_w;
	cd_simpro_w		:= cd_simpro_w;
	dt_fora_linha_w		:= dt_fora_linha_w;
	nr_seq_mat_simpro_w	:= nr_seq_mat_simpro_w;
	end;
end loop;
close C01;

if (cd_simpro_w > 0) then

	dt_vigencia_w	:= clock_timestamp() - interval '2000 days';

	select 	max(dt_vigencia)
	into STRICT	dt_vigencia_w
	from 	simpro_preco
	where 	cd_simpro = cd_simpro_w
	and 	dt_vigencia <= coalesce(dt_base_p,clock_timestamp())
	and     coalesce(cd_estabelecimento, coalesce(cd_estab_simpro_w, 0)) = coalesce(cd_estab_simpro_w, 0);

	if 	((ie_fora_linha_w = 'S') or
		 ((coalesce(dt_fora_linha_w::text, '') = '') or (coalesce(dt_base_p,clock_timestamp()) <= dt_fora_linha_w))) then

		select 	coalesce(max(vl_preco_fabrica),0),
			coalesce(max(vl_preco_venda),0),
			coalesce(max(ie_tipo_preco),'X'),
			coalesce(max(ie_tipo_lista),'T'),
			max(nr_sequencia)
		into STRICT 	vl_pfb_w,
			vl_pmc_w,
			ie_tipo_preco_w,
			ie_tipo_lista_w,
			nr_seq_simpro_preco_w
		from 	simpro_preco
		where 	cd_simpro	= cd_simpro_w
		and 	dt_vigencia	= dt_vigencia_w
		and     coalesce(cd_estabelecimento, coalesce(cd_estab_simpro_w, 0)) = coalesce(cd_estab_simpro_w, 0);

		if (coalesce(ie_tipo_preco_conv_p, 'C') = 'C') then

			if (ie_tipo_preco_w = 'F') then
				if (ie_div_indice_pfb_w = 'S') then
					if (ie_tipo_lista_w in ('T','Q')) then
						vl_preco_w	:= dividir(vl_pfb_w,tx_pfb_p);
					elsif (ie_tipo_lista_w = 'S') then
						vl_preco_w	:= dividir(vl_pfb_w,tx_pfb_pos_p);
					elsif (ie_tipo_lista_w = 'N') then
						vl_preco_w	:= dividir(vl_pfb_w,tx_pfb_neg_p);
					else
						vl_preco_w	:= vl_pfb_w;
					end if;
				else
					if (ie_tipo_lista_w in ('T','Q')) then
						vl_preco_w	:= vl_pfb_w * tx_pfb_p;
					elsif (ie_tipo_lista_w = 'S') then
						vl_preco_w	:= vl_pfb_w * tx_pfb_pos_p;
					elsif (ie_tipo_lista_w = 'N') then
						vl_preco_w	:= vl_pfb_w * tx_pfb_neg_p;
					else
						vl_preco_w	:= vl_pfb_w;
					end if;
				end if;
			else
				if (ie_div_indice_pmc_w = 'S') then
					if (ie_tipo_lista_w in ('T','Q')) then
						vl_preco_w	:= dividir(vl_pmc_w,tx_pmc_p);
					elsif (ie_tipo_lista_w = 'S') then
						vl_preco_w	:= dividir(vl_pmc_w,tx_pmc_pos_p);
					elsif (ie_tipo_lista_w = 'N') then
						vl_preco_w	:= dividir(vl_pmc_w,tx_pmc_neg_p);
					else
						vl_preco_w	:= vl_pmc_w;
					end if;
				else
					if (ie_tipo_lista_w in ('T','Q')) then
						vl_preco_w	:= vl_pmc_w * tx_pmc_p;
					elsif (ie_tipo_lista_w = 'S') then
						vl_preco_w	:= vl_pmc_w * tx_pmc_pos_p;
					elsif (ie_tipo_lista_w = 'N') then
						vl_preco_w	:= vl_pmc_w * tx_pmc_neg_p;
					else
						vl_preco_w	:= vl_pmc_w;
					end if;
				end if;
			end if;
		else
			begin

			if (coalesce(ie_tipo_preco_conv_p, ie_tipo_preco_w) = 'F') then
				if (ie_div_indice_pfb_w = 'S') then
					if (ie_tipo_lista_w in ('T','Q')) then
						vl_preco_w	:= dividir(vl_pfb_w,tx_pfb_p);
					elsif (ie_tipo_lista_w = 'S') then
						vl_preco_w	:= dividir(vl_pfb_w,tx_pfb_pos_p);
					elsif (ie_tipo_lista_w = 'N') then
						vl_preco_w	:= dividir(vl_pfb_w,tx_pfb_neg_p);
					else
						vl_preco_w	:= vl_pfb_w;
					end if;

				else
					if (ie_tipo_lista_w in ('T','Q')) then
						vl_preco_w	:= vl_pfb_w * tx_pfb_p;
					elsif (ie_tipo_lista_w = 'S') then
						vl_preco_w	:= vl_pfb_w * tx_pfb_pos_p;
					elsif (ie_tipo_lista_w = 'N') then
						vl_preco_w	:= vl_pfb_w * tx_pfb_neg_p;
					else
						vl_preco_w	:= vl_pfb_w;
					end if;
				end if;
			else
				if (ie_div_indice_pmc_w = 'S') then
					if (ie_tipo_lista_w in ('T','Q')) then
						vl_preco_w	:= dividir(vl_pmc_w,tx_pmc_p);
					elsif (ie_tipo_lista_w = 'S') then
						vl_preco_w	:= dividir(vl_pmc_w,tx_pmc_pos_p);
					elsif (ie_tipo_lista_w = 'N') then
						vl_preco_w	:= dividir(vl_pmc_w,tx_pmc_neg_p);
					else
						vl_preco_w	:= vl_pmc_w;
					end if;
				else
					if (ie_tipo_lista_w in ('T','Q')) then
						vl_preco_w	:= vl_pmc_w * tx_pmc_p;
					elsif (ie_tipo_lista_w = 'S') then
						vl_preco_w	:= vl_pmc_w * tx_pmc_pos_p;
					elsif (ie_tipo_lista_w = 'N') then
						vl_preco_w	:= vl_pmc_w * tx_pmc_neg_p;
					else
						vl_preco_w	:= vl_pmc_w;
					end if;
				end if;
			end if;


			end;
		end if;
		vl_preco_w		:= dividir(vl_preco_w, qt_conversao_w);
	end if;
end if;

return	vl_preco_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_valor_preco_simpro (cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_material_p bigint, cd_simpro_p bigint, tx_pfb_p bigint, tx_pmc_p bigint, dt_base_p timestamp, ie_tipo_preco_conv_p text, tx_pmc_neg_p bigint, tx_pmc_pos_p bigint, tx_pfb_neg_p bigint, tx_pfb_pos_p bigint, ie_dividir_indice_pmc_p text, ie_dividir_indice_pfb_p text, nr_seq_marca_p bigint) FROM PUBLIC;

