-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_regra_antecencia_agenda ( cd_pessoa_fisica_p text, hr_inicio_p timestamp) RETURNS varchar AS $body$
DECLARE

						 
ie_possui_regra_w	varchar(1)	:= 'N';
nr_atendimento_w	bigint	:= 0;
ie_tipo_atendimento_w	smallint	:= -1;
ie_consistiu_w		varchar(1)	:= 'N';
ds_retorno_w		varchar(255) 	:= null;
ds_consistencia_w	varchar(255);
qt_horas_minima_w	bigint;
dt_antecencia_w		timestamp;
cd_perfil_w		integer;
nm_usuario_regra_w	varchar(15);
regulacao_agendamento_w varchar(1);
cd_estabelecimento_w		smallint;

c01 CURSOR FOR 
	SELECT	ds_consistencia 
	from	regra_antecedencia_agenda 
	where	coalesce(qt_horas_minima,0) > 0 
	and	coalesce(ie_situacao,'A') = 'A' 
	and	(hr_inicio_p < (clock_timestamp() + (qt_horas_minima/24))) 
	and	((coalesce(ie_consistir_internado,'S') = 'S') or (nr_atendimento_w = 0)) 
	and	coalesce(cd_perfil,cd_perfil_w) 		 = cd_perfil_w 
	and	coalesce(nm_usuario_regra,nm_usuario_regra_w) = nm_usuario_regra_w 
	and	coalesce(ie_exclusiva,'N')			 = 'N' 
 and coalesce(IE_AGENDA_CIRURGIA,'S') = 'S' 
	and	not exists (	SELECT	1 
				from	regra_antecedencia_agenda 
				where	coalesce(qt_horas_minima,0) > 0 
				and	coalesce(ie_situacao,'A') = 'A' 
				and	(hr_inicio_p < (clock_timestamp() + (qt_horas_minima/24))) 
				and	((coalesce(ie_consistir_internado,'S') = 'S') or (nr_atendimento_w = 0)) 
				and	coalesce(cd_perfil,cd_perfil_w) 		 = cd_perfil_w 
				and	coalesce(nm_usuario_regra,nm_usuario_regra_w) = nm_usuario_regra_w 
				and	coalesce(ie_exclusiva,'N')			 = 'S' 
    and coalesce(IE_AGENDA_CIRURGIA,'S') = 'S') 
	order by qt_horas_minima;

c02 CURSOR FOR 
	SELECT	ds_consistencia 
	from	regra_antecedencia_agenda 
	where	coalesce(qt_horas_minima,0) > 0 
	and	coalesce(ie_situacao,'A') = 'A' 
	and	(hr_inicio_p < (clock_timestamp() + (qt_horas_minima/24))) 
	and	((coalesce(ie_consistir_internado,'S') = 'S') or (nr_atendimento_w = 0)) 
	and	coalesce(cd_perfil,cd_perfil_w) 		 = cd_perfil_w 
	and	coalesce(nm_usuario_regra,nm_usuario_regra_w) = nm_usuario_regra_w 
	and	coalesce(ie_exclusiva,'N')			 = 'N' 
 and coalesce(IE_AGENDA_INTEGRADA,'N') = 'S' 
	and	not exists (	SELECT	1 
				from	regra_antecedencia_agenda 
				where	coalesce(qt_horas_minima,0) > 0 
				and	coalesce(ie_situacao,'A') = 'A' 
				and	(hr_inicio_p < (clock_timestamp() + (qt_horas_minima/24))) 
				and	((coalesce(ie_consistir_internado,'S') = 'S') or (nr_atendimento_w = 0)) 
				and	coalesce(cd_perfil,cd_perfil_w) 		 = cd_perfil_w 
				and	coalesce(nm_usuario_regra,nm_usuario_regra_w) = nm_usuario_regra_w 
				and	coalesce(ie_exclusiva,'N')			 = 'S' 
    and coalesce(IE_AGENDA_INTEGRADA,'N') = 'S') 
	order by qt_horas_minima;


BEGIN 
 cd_perfil_w	:= wheb_usuario_pck.get_cd_perfil;
 nm_usuario_regra_w := wheb_usuario_pck.get_nm_usuario;
 cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
  
 regulacao_agendamento_w := obter_param_usuario(869, 411, cd_perfil_w, nm_usuario_regra_w, coalesce(cd_estabelecimento_w,1), regulacao_agendamento_w);
 
 if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then 
  if (wheb_usuario_pck.get_cd_funcao = 871) then 
   
   select coalesce(max('S'),'N') 
    into STRICT ie_possui_regra_w 
    from regra_antecedencia_agenda 
    where coalesce(ie_situacao,'A') = 'A' 
     and coalesce(IE_AGENDA_CIRURGIA,'S') = 'S';
 
   if (ie_possui_regra_w = 'S') then 
    nr_atendimento_w := obter_atend_internado_sem_alta(cd_pessoa_fisica_p);
		 
    open c01;
     loop 
      fetch c01 into 
       ds_consistencia_w;
      EXIT WHEN NOT FOUND; /* apply on c01 */
      begin 
       ds_retorno_w 	:= ds_consistencia_w;
      end;
     end loop;
    close c01;
   end if;	
   
  elsif (wheb_usuario_pck.get_cd_funcao = 869 AND regulacao_agendamento_w = 'S') then 
   
   select coalesce(max('S'),'N') 
    into STRICT ie_possui_regra_w 
    from regra_antecedencia_agenda 
    where coalesce(ie_situacao,'A') = 'A' 
     and coalesce(IE_AGENDA_INTEGRADA,'N') = 'S';
 
   if (ie_possui_regra_w = 'S') then 
    nr_atendimento_w := obter_atend_internado_sem_alta(cd_pessoa_fisica_p);
		 
    open c02;
     loop 
      fetch c02 into 
       ds_consistencia_w;
      EXIT WHEN NOT FOUND; /* apply on c02 */
      begin 
       ds_retorno_w 	:= ds_consistencia_w;
      end;
     end loop;
    close c02;
   end if;	
   
  end if;
 end if;	
	 
 return	ds_retorno_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_regra_antecencia_agenda ( cd_pessoa_fisica_p text, hr_inicio_p timestamp) FROM PUBLIC;

