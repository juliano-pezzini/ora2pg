-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_agendamento_senha ( nr_seq_senha_p bigint, ie_opcao_p text) RETURNS varchar AS $body$
DECLARE


nr_seq_agenda_exame_w		agenda_paciente.nr_sequencia%type;
nr_seq_agenda_consulta_w	agenda_consulta.nr_sequencia%type;
nr_seq_agenda_quimio_w	    bigint;
cd_agenda_w			bigint;
cd_tipo_agenda_w		smallint;
nr_seq_agenda_w			agenda_paciente.nr_sequencia%type;
dt_agenda_w				timestamp;
nr_seq_proc_interno_w	agenda_paciente.NR_SEQ_PROC_INTERNO%type;
ie_tipo_atendimento_w	agenda_paciente.IE_TIPO_ATENDIMENTO%type;
cd_convenio_w	agenda_paciente.CD_CONVENIO%type;
cd_categoria_w	agenda_paciente.CD_CATEGORIA%type;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
cd_setor_w 				setor_atendimento.cd_setor_atendimento%type := 0;
nr_Seq_exame_lab_w		proc_interno.nr_Seq_exame_lab%type;
nr_seq_ageint_exame_lab_w	ageint_exame_lab.nr_sequencia%type;
qt_min_preparo_W		proc_interno.qt_min_preparo%type;
/*
IE_OPCAO_P

S	-	Sequencia da agenda
T	-	Tipo da agenda
D	-	Data do agendamento
SE	-	Setor do Exame
QM	-	Chegada min exame

*/
BEGIN

-- Verificar se ha agenda_paciente vinculada com a senha
begin
	select	nr_sequencia,
				cd_agenda,
				hr_inicio,
				nr_seq_proc_interno,
				ie_tipo_atendimento,
				cd_convenio,
				cd_categoria
	into STRICT	nr_seq_agenda_exame_w,
			cd_agenda_w,
			dt_agenda_w,
			nr_seq_proc_interno_w,
			ie_tipo_atendimento_w,
			cd_convenio_w,
			cd_categoria_w
	from (
			SELECT	nr_sequencia,
					cd_agenda,
					hr_inicio,
					nr_seq_proc_interno,
					ie_tipo_atendimento,
					cd_convenio,
					cd_categoria
			from 	agenda_paciente
			where	nr_seq_pac_senha_fila = nr_seq_senha_p
			order by hr_inicio
			) alias0 LIMIT 1;
exception
	when	no_data_found then
		nr_seq_agenda_exame_w := null;
		cd_agenda_w := null;
end;

nr_seq_agenda_consulta_w := null;

if (coalesce(nr_seq_agenda_exame_w::text, '') = '') then
	-- Verificar se ha agenda_consulta vinculada com a senha
	begin
		select	nr_sequencia,
			cd_agenda,
			dt_agenda
		into STRICT	nr_seq_agenda_consulta_w,
			cd_agenda_w,
			dt_agenda_w
		from	agenda_consulta
		where	nr_seq_pac_senha_fila = nr_seq_senha_p  LIMIT 1;
	exception
		when	no_data_found then
			nr_seq_agenda_consulta_w := null;
			cd_agenda_w := null;
	end;
end if;

nr_seq_agenda_quimio_w := null;
if (coalesce(nr_seq_agenda_consulta_w::text, '') = '') and (coalesce(nr_seq_agenda_exame_w::text, '') = '') then
	-- Verificar se ha agenda quimio vinculada com a senha
	begin
		select	nr_sequencia,
			dt_agenda
		into STRICT	nr_seq_agenda_quimio_w,
			dt_agenda_w
		from	agenda_quimio
		where	nr_seq_pac_senha_fila = nr_seq_senha_p  LIMIT 1;
	exception
		when	no_data_found then
			nr_seq_agenda_quimio_w := null;
	end;
end if;

if (coalesce(nr_seq_agenda_consulta_w::text, '') = '') and (coalesce(nr_seq_agenda_exame_w::text, '') = '') and (coalesce(nr_seq_agenda_quimio_w::text, '') = '') then
	-- Verificar se ha agenda integrada vinculada com a senha
	begin
		select 	min(b.nr_sequencia)
		into STRICT	nr_seq_ageint_exame_lab_w
		from 	agenda_integrada a,
			ageint_exame_lab b
		where	a.nr_seq_pac_senha_fila = nr_seq_senha_p
		and	a.nr_sequencia = b.nr_seq_ageint		
		and	not exists (	SELECT 	1
					from   	agenda_integrada_item x
					where  	x.nr_seq_agenda_int = a.nr_sequencia);
	end;
end if;

nr_seq_agenda_w := greatest(coalesce(nr_seq_agenda_exame_w, 0), coalesce(nr_seq_agenda_consulta_w, 0), coalesce(nr_seq_agenda_quimio_w, 0));

-- Obter tipo da agenda
begin
	select	cd_tipo_agenda
	into STRICT	cd_tipo_agenda_w
	from	agenda
	where	cd_agenda = coalesce(cd_agenda_w, 0)  LIMIT 1;
exception
	when	no_data_found then
		cd_tipo_agenda_w := 0;
end;

if (ie_opcao_p = 'S') then
	return	nr_seq_agenda_w;
elsif (ie_opcao_p = 'T') then
	return	cd_tipo_agenda_w;
elsif (ie_opcao_p = 'D') then
	return	to_char(dt_agenda_w, 'hh24:mi');
elsif (ie_opcao_p = 'SE') then
	if (nr_seq_agenda_exame_w IS NOT NULL AND nr_seq_agenda_exame_w::text <> '') then
		cd_setor_w := coalesce( ageint_obter_setor_proc_int(nr_seq_proc_interno_w, null, ie_tipo_atendimento_w, cd_convenio_w, cd_categoria_w, 'S', wheb_usuario_pck.get_cd_estabelecimento) ,0);
		if (cd_setor_w = 0) then
			select	max(nr_Seq_exame_lab)
			into STRICT	nr_Seq_exame_lab_w
			from	PROC_INTERNO
			where 	nr_sequencia = nr_seq_proc_interno_w;
			if (nr_Seq_exame_lab_w IS NOT NULL AND nr_Seq_exame_lab_w::text <> '') then
				cd_setor_w := coalesce(Obter_Setor_exec_lab(nr_Seq_exame_lab_w, null, obter_estabelecimento_ativo), 0);
			end if;
		end if;
		
	elsif (coalesce(nr_seq_agenda_exame_w::text, '') = '') and (nr_seq_ageint_exame_lab_w IS NOT NULL AND nr_seq_ageint_exame_lab_w::text <> '') then
	
		select	max(nr_seq_proc_interno),
			max(nr_seq_exame)
		into STRICT	nr_seq_proc_interno_w,
			nr_Seq_exame_lab_w
		from	ageint_exame_lab
		where	nr_sequencia = nr_seq_ageint_exame_lab_w;
		
		if (coalesce(nr_Seq_exame_lab_w::text, '') = '') and (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
	
			select	max(nr_Seq_exame_lab)
			into STRICT	nr_Seq_exame_lab_w
			from	PROC_INTERNO
			where 	nr_sequencia = nr_seq_proc_interno_w;
		
		end if;
		
		if (nr_Seq_exame_lab_w IS NOT NULL AND nr_Seq_exame_lab_w::text <> '') then
			cd_setor_w := coalesce(Obter_Setor_exec_lab(nr_Seq_exame_lab_w, null, obter_estabelecimento_ativo), 0);
		end if;
			
	end if;
	return cd_setor_w;
elsif (ie_opcao_p = 'QM') then	
	begin
		select 	qt_min_preparo
		into STRICT	qt_min_preparo_w
		from	proc_interno
		where	nr_sequencia = nr_seq_proc_interno_w;	
		
		return qt_min_preparo_w;
	exception
	when others then
		return null;
	end;	
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_agendamento_senha ( nr_seq_senha_p bigint, ie_opcao_p text) FROM PUBLIC;

