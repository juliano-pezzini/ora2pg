-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_medico_atendimento (cd_estabelecimento_p bigint, ie_clinica_p bigint, ie_tipo_convenio_p bigint) RETURNS varchar AS $body$
DECLARE


cd_medico_retorno_w 	varchar(15);
dt_ult_entrada_w	timestamp;
nr_seq_plantao_w	bigint;
qt_atendimento_w	integer := 99999;
qt_atend_particular_w	smallint;
qt_max_novo_atend_w	bigint := 0;

C01 CURSOR FOR
	SELECT 	a.nr_sequencia nr_sequencia,
			a.qt_atendimento qt_atendimento
	FROM	eup_cad_plantao_medico a,
			TURNO_ATENDIMENTO c
	WHERE 	1 = 1
	AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
	AND 	a.ie_clinica 			= ie_clinica_p
	AND 	a.ie_intervalo 			= 'N'
	AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
	AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
	AND     c.nr_sequencia 			= a.nr_seq_turno
	AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
	and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
	ORDER BY coalesce(a.qt_atendimento, 0), a.dt_entrada DESC;

C02 CURSOR FOR
	SELECT 	a.nr_sequencia nr_sequencia,
			a.QT_PARTICULAR_CONTROLE QT_PARTICULAR_CONTROLE
	FROM	eup_cad_plantao_medico a,
			TURNO_ATENDIMENTO c
	WHERE 	1 = 1
	AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
	AND 	a.ie_clinica 			= ie_clinica_p
	AND 	a.ie_intervalo 			= 'N'
	AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
	AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
	AND     c.nr_sequencia 			= a.nr_seq_turno
	AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
	and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
	ORDER BY coalesce(a.QT_PARTICULAR_CONTROLE, 0), a.dt_entrada DESC;

c01_w			c01%ROWTYPE;
c02_w			c02%ROWTYPE;


BEGIN
	BEGIN

	IF (ie_tipo_convenio_p <> 1) THEN
		--Prioriza quem não possui atendimento e acabou de ser cadastrado
		SELECT 	coalesce(MIN(a.nr_sequencia), 0)
		INTO STRICT	nr_seq_plantao_w
		FROM	eup_cad_plantao_medico a,
				TURNO_ATENDIMENTO c
		WHERE 	1 = 1
		AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
		AND 	a.ie_clinica 			= ie_clinica_p
		AND 	a.ie_intervalo 			= 'N'
		AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
		AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
		AND     c.nr_sequencia 			= a.nr_seq_turno
		AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
		and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
		AND 	coalesce(a.qt_atendimento, 0) = 0
		and	coalesce(ie_novo_medico, 'S') = 'S';

		IF (nr_seq_plantao_w = 0) THEN
			--Prioriza quem não tem atendimento mas ja estava cadastrado
			SELECT 	coalesce(MIN(a.nr_sequencia), 0)
			INTO STRICT	nr_seq_plantao_w
			FROM	eup_cad_plantao_medico a,
					TURNO_ATENDIMENTO c
			WHERE 	1 = 1
			AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
			AND 	a.ie_clinica 			= ie_clinica_p
			AND 	a.ie_intervalo 			= 'N'
			AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
			AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
			AND     c.nr_sequencia 			= a.nr_seq_turno
			AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
			and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
			AND 	coalesce(a.qt_atendimento, 0) = 0
			and	coalesce(ie_novo_medico, 'S') = 'N';

			IF (nr_seq_plantao_w = 0) THEN
				--Pega a maior quantidade de atendimentos na fila
				SELECT 	coalesce(MAX(a.qt_atendimento), 0)
				INTO STRICT	qt_max_novo_atend_w
				FROM	eup_cad_plantao_medico a,
						TURNO_ATENDIMENTO c
				WHERE 	1 = 1
				AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
				AND 	a.ie_clinica 			= ie_clinica_p
				AND 	a.ie_intervalo 			= 'N'
				AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
				AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
				AND     c.nr_sequencia 			= a.nr_seq_turno
				AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
				and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
				AND	a.IE_NOVO_MEDICO = 'N';

				IF (qt_max_novo_atend_w > 0) THEN
					--Pega o médico que possui quantidade menor que o médico que mais possui, que não seja um que acabou de ser cadastrado
					SELECT coalesce(MIN(a.nr_sequencia),0)
					INTO STRICT	nr_seq_plantao_w
					FROM	eup_cad_plantao_medico a,
							TURNO_ATENDIMENTO c
					WHERE 	1 = 1
					AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
					AND 	a.ie_clinica 			= ie_clinica_p
					AND 	a.ie_intervalo 			= 'N'
					AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
					AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
					AND     c.nr_sequencia 			= a.nr_seq_turno
					AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
					and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
					AND	a.IE_NOVO_MEDICO = 'N'
					AND	coalesce(a.qt_atendimento, 0) < qt_max_novo_atend_w;
				ELSE
					-- SQL para buscar a última data de médico que entrou como plantonista.
					OPEN C01;
					LOOP
					FETCH C01 INTO
						c01_w;
					EXIT WHEN NOT FOUND; /* apply on C01 */
						BEGIN
							IF (coalesce(c01_w.nr_sequencia,0) > 0) AND (coalesce(c01_w.qt_atendimento,0) <= qt_atendimento_w) THEN

								qt_atendimento_w := coalesce(c01_w.qt_atendimento,0);
								nr_seq_plantao_w := coalesce(c01_w.nr_sequencia,0);

							END IF;
						END;
					END LOOP;
					CLOSE C01;
				END IF;
			END IF;
		end if;

		SELECT  MAX(a.cd_medico)
		INTO STRICT 	cd_medico_retorno_w
		FROM	eup_cad_plantao_medico a
		WHERE	a.nr_sequencia = nr_seq_plantao_w;

	ELSE

		SELECT coalesce(MIN(a.nr_sequencia), 0)
		INTO STRICT 	nr_seq_plantao_w
		FROM	eup_cad_plantao_medico a,
			TURNO_ATENDIMENTO c
		WHERE 	1 = 1
		AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
		AND 	a.ie_clinica 			= ie_clinica_p
		AND 	a.ie_intervalo 			= 'N'
		AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
		AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
		AND     c.nr_sequencia 			= a.nr_seq_turno
		AND 	coalesce(a.QT_PARTICULAR_CONTROLE, 0) = 0
		AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
		and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
		and	coalesce(ie_prioriza_particular, 'S') = 'S';

		IF (nr_seq_plantao_w = 0) THEN
			SELECT coalesce(MIN(a.nr_sequencia), 0)
			INTO STRICT 	nr_seq_plantao_w
			FROM	eup_cad_plantao_medico a,
				TURNO_ATENDIMENTO c
			WHERE 	1 = 1
			AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
			AND 	a.ie_clinica 			= ie_clinica_p
			AND 	a.ie_intervalo 			= 'N'
			AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
			AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
			AND     c.nr_sequencia 			= a.nr_seq_turno
			AND 	coalesce(a.QT_PARTICULAR_CONTROLE, 0)	= 0
			AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
			and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
			and	coalesce(ie_prioriza_particular, 'S') = 'N';

			IF (nr_seq_plantao_w = 0) THEN
				select 	max(QT_PARTICULAR_CONTROLE)
				into STRICT 	qt_max_novo_atend_w
				FROM	eup_cad_plantao_medico a,
					TURNO_ATENDIMENTO c
				WHERE 	1 = 1
				AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
				AND 	a.ie_clinica 			= ie_clinica_p
				AND 	a.ie_intervalo 			= 'N'
				AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
				AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
				AND     c.nr_sequencia 			= a.nr_seq_turno
				AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
				and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
				and	coalesce(ie_prioriza_particular, 'S') = 'N';

				IF (qt_max_novo_atend_w > 0) THEN
					select 	coalesce(MIN(a.nr_sequencia),0)
					into STRICT 	nr_seq_plantao_w
					FROM	eup_cad_plantao_medico a,
						TURNO_ATENDIMENTO c
					WHERE 	1 = 1
					AND 	a.cd_estabelecimento 	= cd_estabelecimento_p
					AND 	a.ie_clinica 			= ie_clinica_p
					AND 	a.ie_intervalo 			= 'N'
					AND 	TRUNC(a.dt_entrada) 	= TRUNC(clock_timestamp())
					AND (coalesce(a.dt_saida::text, '') = ''    OR a.dt_saida > clock_timestamp())
					AND     c.nr_sequencia 			= a.nr_seq_turno
					AND 	to_date(to_char(a.dt_entrada, 'hh24:mi:ss'), 'hh24:mi:ss') <= to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
					and	to_date(to_char(clock_timestamp(), 'hh24:mi:ss'), 'hh24:mi:ss') between to_date(to_char(c.dt_inicial, 'hh24:mi:ss'), 'hh24:mi:ss') and to_date(to_char(c.dt_final, 'hh24:mi:ss'), 'hh24:mi:ss')
					and	coalesce(ie_prioriza_particular, 'S') = 'N';
				else
					OPEN C02;
					LOOP
					FETCH C02 INTO
						c02_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */
						BEGIN
							IF (coalesce(c02_w.nr_sequencia,0) > 0) AND (coalesce(c02_w.QT_PARTICULAR_CONTROLE,0) <= qt_atendimento_w) THEN
								qt_atendimento_w := coalesce(c02_w.QT_PARTICULAR_CONTROLE,0);
								nr_seq_plantao_w := coalesce(c02_w.nr_sequencia,0);
							END IF;
						END;
					END LOOP;
					CLOSE C02;
				end if;
			end if;
		END IF;

		SELECT  MAX(a.cd_medico)
		INTO STRICT 	cd_medico_retorno_w
		FROM	eup_cad_plantao_medico a
		WHERE	a.nr_sequencia = nr_seq_plantao_w;
	END IF;

	EXCEPTION
	WHEN OTHERS THEN
		cd_medico_retorno_w := '';
	END;
	RETURN cd_medico_retorno_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_medico_atendimento (cd_estabelecimento_p bigint, ie_clinica_p bigint, ie_tipo_convenio_p bigint) FROM PUBLIC;

