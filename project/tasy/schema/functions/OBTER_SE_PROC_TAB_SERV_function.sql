-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_proc_tab_serv (cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, dt_conta_p timestamp, cd_procedimento_p bigint, ie_origem_proced_p bigint, ie_tipo_atendimento_p bigint, nr_atendimento_p bigint) RETURNS varchar AS $body$
DECLARE


dt_vigencia_w			timestamp;
dt_final_vigencia_w			timestamp;
cd_tabela_servico_w		integer;
ie_origem_proced_w		bigint	:= 1;
ie_origem_proced_edicao_w		bigint;
qt_preco_w			bigint	:= 0;
TX_AJUSTE_GERAL_w		double precision;
ie_liberado_edicao_w		varchar(01)	:= 'N';
ie_tipo_convenio_w			smallint;
nr_aux_w				double precision;
ds_aux_w			varchar(200);
ie_glosa_w			varchar(2);
vl_servico_w			double precision;
nr_seq_ajuste_proc_w		bigint;
cd_tabela_servico_ajuste_w		bigint;
cd_pessoa_fisica_w		varchar(10);
ie_clinica_w			integer;
cd_procedencia_w			integer;
nr_seq_tipo_acidente_w		bigint;
cd_tipo_acomodacao_w		smallint;
cd_plano_w			varchar(10);
cd_empresa_ref_w			bigint;
ie_sexo_w			varchar(1);
nr_seq_cobertura_w		bigint;
nr_seq_classif_atend_w		bigint;
cd_medico_resp_w		varchar(10);
ie_carater_inter_sus_w		varchar(2);
nr_seq_origem_w			bigint;
nr_seq_classif_medico_w		atendimento_paciente.nr_seq_classif_medico%type;

c01 CURSOR FOR
	SELECT	b.cd_tabela_servico
	from	convenio_servico b
	where	b.cd_convenio		= cd_convenio_p
	and	b.cd_estabelecimento 	= cd_estabelecimento_p
	and (b.cd_categoria		= cd_categoria_p or coalesce(cd_categoria_p::text, '') = '')
	--and	b.dt_liberacao_tabela	<= dt_conta_p
	and	trunc(dt_conta_p,'dd')	between b.dt_liberacao_tabela and coalesce(b.dt_termino, dt_conta_p)
	and 	coalesce(b.ie_situacao,'A')	= 'A'
	order by coalesce(b.nr_prioridade,1) desc;


BEGIN

select	max(ie_tipo_convenio)
into STRICT	ie_tipo_convenio_w
from	convenio
where	cd_convenio	= cd_convenio_p;

if (ie_tipo_convenio_w	= 3) then
	ie_liberado_edicao_w	:= 'S';
else
	open	c01;
	loop
	fetch	c01 into
		cd_tabela_servico_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		if (qt_preco_w = 0) then
			begin

			select	count(*)
			into STRICT	qt_preco_w
			from	preco_servico
			where	CD_TABELA_SERVICO	= cd_tabela_servico_w
			and	cd_procedimento		= cd_procedimento_p
			and	cd_estabelecimento	= cd_estabelecimento_p
			and	trunc(dt_conta_p,'dd') between dt_inicio_vigencia and coalesce(dt_vigencia_final, dt_conta_p);

			if (qt_preco_w > 0) then
				ie_liberado_edicao_w	:= 'S';
			end if;

			end;
		end if;

		end;
	end loop;
	close c01;
end if;

if (coalesce(nr_atendimento_p,0) <> 0) then

	select	max(cd_pessoa_fisica),
		max(ie_clinica),
		max(cd_procedencia),
		max(nr_seq_tipo_acidente),
		max(nr_seq_classificacao),
		max(cd_medico_resp),
		max(ie_carater_inter_sus),
		coalesce((max(obter_dados_categ_conv(nr_atendimento,'OC')))::numeric ,0),
		coalesce(max(nr_seq_classif_medico),0)
	into STRICT	cd_pessoa_fisica_w,
		ie_clinica_w,
		cd_procedencia_w,
		nr_seq_tipo_acidente_w,
		nr_seq_classif_atend_w,
		cd_medico_resp_w,
		ie_carater_inter_sus_w,
		nr_seq_origem_w,
		nr_seq_classif_medico_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_p;

	select	obter_dado_atend_cat_conv(nr_atendimento_p, dt_conta_p, cd_convenio_p, cd_categoria_p, 'P'),
		obter_dado_atend_cat_conv(nr_atendimento_p, dt_conta_p, cd_convenio_p, cd_categoria_p, 'E'),
		obter_dado_atend_cat_conv(nr_atendimento_p, dt_conta_p, cd_convenio_p, cd_categoria_p, 'A'),
		(obter_dados_categ_conv(nr_atendimento_p, 'COB'))::numeric
	into STRICT	cd_plano_w,
		cd_empresa_ref_w,
		cd_tipo_acomodacao_w,
		nr_seq_cobertura_w
	;

	select	max(ie_sexo)
	into STRICT	ie_sexo_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_w;

end if;

SELECT * FROM OBTER_REGRA_AJUSTE_PROC(	cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, cd_procedimento_p, ie_origem_proced_p, 'N', dt_conta_p, coalesce(cd_tipo_acomodacao_w,0), coalesce(ie_tipo_atendimento_p,0), 0, null, 0, 0, null, null, null, cd_plano_w, coalesce(ie_clinica_w,0), coalesce(cd_empresa_ref_w,0), ie_sexo_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, ds_aux_w, ie_glosa_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, null, null, ds_aux_w, nr_aux_w, ds_aux_w, nr_seq_ajuste_proc_w, null, cd_procedencia_w, null, null, null, null, nr_seq_tipo_acidente_w, null, nr_aux_w, nr_seq_cobertura_w, null, nr_seq_classif_atend_w, cd_medico_resp_w, ie_carater_inter_sus_w, null, null, nr_seq_origem_w, null, nr_seq_classif_medico_w) INTO STRICT nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, ds_aux_w, ie_glosa_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, nr_aux_w, ds_aux_w, nr_aux_w, ds_aux_w, nr_seq_ajuste_proc_w, nr_aux_w;

if (coalesce(nr_seq_ajuste_proc_w,0) > 0) and (ie_liberado_edicao_w = 'N') then


	select	coalesce(max(cd_tabela_servico), 0)
	into STRICT	cd_tabela_servico_ajuste_w
	from	regra_ajuste_proc
	where 	nr_sequencia		= nr_seq_ajuste_proc_w;


	if (cd_tabela_servico_ajuste_w > 0) then

		select	count(*)
		into STRICT	qt_preco_w
		from	preco_servico a
		where	a.cd_tabela_servico	= cd_tabela_servico_ajuste_w
		and	a.cd_estabelecimento	= cd_estabelecimento_p
		and	a.cd_procedimento	= cd_procedimento_p
		and	a.dt_inicio_vigencia	=
				(SELECT	max(x.dt_inicio_vigencia)
				from	preco_servico x
				where	x.cd_tabela_servico	= a.cd_tabela_servico
				and	x.cd_procedimento	= a.cd_procedimento
				and	x.cd_estabelecimento	= a.cd_estabelecimento
				and	trunc(dt_conta_p,'dd') between x.dt_inicio_vigencia and coalesce(x.dt_vigencia_final, dt_conta_p))
		and (coalesce(a.dt_inativacao::text, '') = '' or a.dt_inativacao > dt_conta_p);

		if (qt_preco_w > 0) then
			ie_liberado_edicao_w:= 'S';
		end if;

	end if;

end if;


if (ie_glosa_w = 'L') then
	ie_liberado_edicao_w	:= 'S';
end if;

return	ie_liberado_edicao_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_proc_tab_serv (cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, dt_conta_p timestamp, cd_procedimento_p bigint, ie_origem_proced_p bigint, ie_tipo_atendimento_p bigint, nr_atendimento_p bigint) FROM PUBLIC;

