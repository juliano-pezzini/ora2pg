-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_cabine_vigente ( nr_seq_horario_p prescr_mat_hor.nr_sequencia%type, nr_prescricao_p prescr_mat_hor.nr_prescricao%type, dt_horario_p prescr_mat_hor.dt_horario%type, nr_seq_area_prep_p adep_area_horario_atend.nr_seq_area%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, qt_min_inicio_p adep_regra_area_prep.qt_min_inicio%type default null) RETURNS varchar AS $body$
DECLARE


dt_horario_w        prescr_mat_hor.dt_horario%type;
dt_inicial_w        adep_area_horario_atend.hr_inicial%type;
dt_final_w          adep_area_horario_atend.hr_final%type;
ie_dia_semana_w     adep_area_horario_atend.ie_dia_semana%type;
ie_dia_semana_ww    bigint;
cd_formato_w        locale_formats.id_mask%type;
ie_regra_cabine_w   varchar(1);
ie_prescr_copia_w   varchar(1);
nr_seq_mat_cpoe_w   prescr_material.nr_seq_mat_cpoe%type;
dt_lib_medico_w     prescr_medica.dt_liberacao_medico%type;

c01 CURSOR FOR
SELECT  hr_inicial,
        hr_final,
        ie_dia_semana
from    adep_area_horario_atend
where   nr_seq_area = nr_seq_area_prep_p
and     ((ie_dia_semana_ww = ie_dia_semana) or (ie_dia_semana = 9 and ie_dia_semana_ww not in (1, 7)))
order by ie_dia_semana desc;

BEGIN

select  coalesce(max('S'),'N') ie_regra_cabine
into STRICT    ie_regra_cabine_w
from    adep_area_horario_atend a
where   a.nr_seq_area = nr_seq_area_prep_p;

if ( ie_regra_cabine_w = 'S' ) then

    select  max(a.dt_liberacao_medico)
    into STRICT    dt_lib_medico_w
    from    prescr_medica a
    where   a.nr_prescricao = nr_prescricao_p;

    if (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') then

        select  max(a.nr_seq_mat_cpoe)
        into STRICT    nr_seq_mat_cpoe_w
        from    prescr_material a
        where   a.nr_prescricao = nr_prescricao_p;

        if (nr_seq_mat_cpoe_w IS NOT NULL AND nr_seq_mat_cpoe_w::text <> '') then

            select CASE WHEN count(a.nr_prescricao)=1 THEN  'N'  ELSE 'S' END  ie_prescr_copia
            into STRICT   ie_prescr_copia_w
            from ( SELECT z.nr_prescricao
                   from   prescr_material z
                   where  z.nr_seq_mat_cpoe   = nr_seq_mat_cpoe_w
                   group by z.nr_prescricao ) a;
        else
            ie_prescr_copia_w := 'N';
        end if;
    end if;

    if ( (nr_seq_horario_p IS NOT NULL AND nr_seq_horario_p::text <> '')
         and (dt_horario_p IS NOT NULL AND dt_horario_p::text <> '')
         and (nr_seq_area_prep_p IS NOT NULL AND nr_seq_area_prep_p::text <> '')
         and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '')
         and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '')
         and (dt_lib_medico_w IS NOT NULL AND dt_lib_medico_w::text <> '')) then

        ie_dia_semana_ww := pkg_date_utils.get_weekday(dt_lib_medico_w);

        for c01_w in c01
        loop
            dt_inicial_w    := c01_w.hr_inicial;
            dt_final_w      := c01_w.hr_final;
            ie_dia_semana_w := c01_w.ie_dia_semana;
        end loop;

        if (ie_dia_semana_w IS NOT NULL AND ie_dia_semana_w::text <> '') then
            if ( coalesce(dt_inicial_w::text, '') = '' ) then
                dt_inicial_w := pkg_date_utils.start_of(clock_timestamp(), 'DAY');
            end if;

            cd_formato_w    := 'shortTime';
            dt_inicial_w    := obter_data_formato(dt_inicial_w, cd_estabelecimento_p, nm_usuario_p, cd_formato_w);
            dt_final_w      := obter_data_formato(dt_final_w, cd_estabelecimento_p, nm_usuario_p, cd_formato_w);
            cd_formato_w    := 'timestamp';
            dt_inicial_w    := obter_data_formato(dt_lib_medico_w, cd_estabelecimento_p, nm_usuario_p, 'shortDate') +
                extract(hour from cast(obter_data_formato(dt_inicial_w, cd_estabelecimento_p, nm_usuario_p, cd_formato_w) as timestamp)) / 24 +
                extract(minute from cast(obter_data_formato(dt_inicial_w, cd_estabelecimento_p, nm_usuario_p, cd_formato_w) as timestamp)) / 1440;
            dt_lib_medico_w := obter_data_formato(dt_lib_medico_w, cd_estabelecimento_p, nm_usuario_p, cd_formato_w);
            dt_horario_w    := obter_data_formato(dt_horario_p, cd_estabelecimento_p, nm_usuario_p, cd_formato_w);

            if ( coalesce(dt_final_w::text, '') = '' ) then
                dt_final_w := obter_data_formato(dt_inicial_w, cd_estabelecimento_p, nm_usuario_p, 'shortDate') + '1' +
                    extract(hour from cast(obter_data_formato(dt_inicial_w, cd_estabelecimento_p, nm_usuario_p, cd_formato_w) as timestamp)) / 24 +
                    extract(minute from cast(obter_data_formato(dt_inicial_w, cd_estabelecimento_p, nm_usuario_p, cd_formato_w) as timestamp)) / 1440;
            else
                dt_final_w := obter_data_formato(dt_lib_medico_w, cd_estabelecimento_p, nm_usuario_p, 'shortDate') +
                    extract(hour from cast(obter_data_formato(dt_final_w, cd_estabelecimento_p, nm_usuario_p, cd_formato_w) as timestamp)) / 24 +
                    extract(minute from cast(obter_data_formato(dt_final_w, cd_estabelecimento_p, nm_usuario_p, cd_formato_w) as timestamp)) / 1440;
            end if;

            if ( (dt_horario_w not between dt_inicial_w and dt_final_w AND dt_horario_w < dt_inicial_w)
                 or (dt_lib_medico_w >= dt_inicial_w
                    and ie_prescr_copia_w = 'N') ) then
                return 'N';
            end if;

            if ( (dt_horario_w between dt_inicial_w and dt_final_w AND dt_horario_w >= dt_inicial_w)
                 or (dt_lib_medico_w < dt_inicial_w
                    and ie_prescr_copia_w = 'S') ) then
                return 'S';
            end if;
        end if;
    end if;
else
    return 'S';
end if;

return 'N';

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_cabine_vigente ( nr_seq_horario_p prescr_mat_hor.nr_sequencia%type, nr_prescricao_p prescr_mat_hor.nr_prescricao%type, dt_horario_p prescr_mat_hor.dt_horario%type, nr_seq_area_prep_p adep_area_horario_atend.nr_seq_area%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, qt_min_inicio_p adep_regra_area_prep.qt_min_inicio%type default null) FROM PUBLIC;

