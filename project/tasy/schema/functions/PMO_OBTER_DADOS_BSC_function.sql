-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pmo_obter_dados_bsc ( nr_sequencia_p bigint, ie_informacao_p text, ie_opcao_p text) RETURNS bigint AS $body$
DECLARE


qt_retorno_w		double precision;			


BEGIN



if (upper(ie_opcao_p)	= 'PORT') then

	
	if (ie_informacao_p	= 'SPI') then
	
		SELECT dividir(sum(s.qt_earned_value), sum(s.qt_planned_value)) spi
		into STRICT	qt_retorno_w
		FROM (
		SELECT  t.hrs_real,
				t.pr_etapa,
				CASE
				WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
				  THEN 100
				ELSE dividir(t.dias_uteis_data_atual , t.dias_uteis) * 100
				END qt_pr_previstos_por_ativ,
			t.hrs_previstas hrs_effort,
				CASE 
				WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
				  THEN t.hrs_previstas
				ELSE ( dividir(t.dias_uteis_data_atual , t.dias_uteis)) * t.hrs_previstas
				END qt_planned_value,
			dividir(t.pr_etapa * t.hrs_previstas , 100) qt_earned_value
		FROM (
		SELECT  e.qt_hora_prev hrs_previstas,
				OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, e.dt_fim_prev, 1) dias_uteis,
				OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, TRUNC(clock_timestamp()), 1) dias_uteis_data_atual,
				e.PR_ETAPA pr_etapa,
			e.QT_HORA_REAL hrs_real
		FROM        proj_projeto p
		INNER JOIN	proj_cronograma c ON  p.nr_sequencia = c.nr_seq_proj
		INNER JOIN  proj_cron_etapa e ON  c.nr_sequencia = e.nr_seq_cronograma
		INNER JOIN  proj_programa proj ON  p.nr_seq_programa = proj.nr_sequencia
		WHERE   c.ie_situacao  = 'A'
		AND     coalesce(c.ie_tipo_cronograma, '0') <> 'I'
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '')
		AND 	proj.nr_seq_portifolio = nr_sequencia_p
		AND     c.ie_situacao  = 'A' -- only active schedules
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '') -- only approved schedules
		--AND     e.NR_SEQ_SUB_PROJ is null -- only activities that do not represent subprojects
		AND     p.NR_SEQ_ESTAGIO <> 44 -- remove canceled projects
		AND     c.IE_CLASSIFICACAO <> 'N' -- remove PRP/NPI schedules
		AND  	NOT EXISTS (SELECT 1 FROM proj_cron_etapa xx WHERE xx.nr_seq_superior =  e.nr_sequencia)
		ORDER BY c.ie_tipo_cronograma, e.DT_INICIO_PREV
		) t 
		) s;
		
	elsif (ie_informacao_p	= 'HPI') then
	
		SELECT  dividir(sum(s.qt_earned_value) , sum(s.hrs_real)) hpi
		into STRICT	qt_retorno_w
		FROM (
		SELECT  t.hrs_real,
				t.pr_etapa,
				CASE 
				WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
				  THEN 100
				ELSE dividir(t.dias_uteis_data_atual , t.dias_uteis) * 100
				END qt_pr_previstos_por_ativ,
			t.hrs_previstas hrs_effort,
				CASE 
				WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
				  THEN t.hrs_previstas
				ELSE (dividir(t.dias_uteis_data_atual , t.dias_uteis)) * t.hrs_previstas
				END qt_planned_value,
			dividir(t.pr_etapa * t.hrs_previstas , 100) qt_earned_value
		FROM (
		SELECT  e.qt_hora_prev hrs_previstas,
				OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, e.dt_fim_prev, 1) dias_uteis,
				OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, TRUNC(clock_timestamp()), 1) dias_uteis_data_atual,
				e.PR_ETAPA pr_etapa,
			e.QT_HORA_REAL hrs_real
		FROM        proj_projeto p
		INNER JOIN	proj_cronograma c ON  p.nr_sequencia = c.nr_seq_proj
		INNER JOIN  proj_cron_etapa e ON  c.nr_sequencia = e.nr_seq_cronograma
		INNER JOIN  proj_programa proj ON  p.nr_seq_programa = proj.nr_sequencia
		WHERE   c.ie_situacao  = 'A' -- only active schedules
		AND     coalesce(c.ie_tipo_cronograma, '0') <> 'I'
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '') -- only approved schedules
		--AND     e.NR_SEQ_SUB_PROJ is null -- only activities that do not represent subprojects
		AND     p.NR_SEQ_ESTAGIO <> 44 -- remove canceled projects
		AND     c.IE_CLASSIFICACAO <> 'N' -- remove PRP/NPI schedules
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '')
		AND 	proj.nr_seq_portifolio = nr_sequencia_p
		AND  	NOT EXISTS (SELECT 1 FROM proj_cron_etapa xx WHERE xx.nr_seq_superior =  e.nr_sequencia)
		ORDER BY c.ie_tipo_cronograma, e.DT_INICIO_PREV
		) t 
		) s;
	end if;
	
	
elsif (upper(ie_opcao_p)	= 'PROJ') then


	if (ie_informacao_p	= 'SPI') then
		SELECT dividir(sum(s.qt_earned_value) , sum(s.qt_planned_value)) spi
		into STRICT	qt_retorno_w
		FROM (
		SELECT 	
				CASE
				WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
				  THEN t.hrs_previstas
				ELSE (dividir(t.dias_uteis_data_atual , t.dias_uteis)) * t.hrs_previstas
				END qt_planned_value,
			
			(t.pr_etapa * t.hrs_previstas / 100) qt_earned_value
		FROM (
		SELECT  
				e.qt_hora_prev hrs_previstas,
				e.DT_INICIO_PREV dt_inicio_prev,
				e.DT_FIM_PREV dt_fim_prev,
				OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, e.dt_fim_prev, 1) dias_uteis,
			OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, TRUNC(clock_timestamp()), 1) dias_uteis_data_atual,
				e.PR_ETAPA pr_etapa
		FROM    proj_projeto p,
				proj_cronograma c, 
				proj_cron_etapa e
		WHERE	p.nr_sequencia = c.nr_seq_proj
		AND     c.nr_sequencia = e.nr_seq_cronograma
		AND     c.ie_situacao  = 'A'
		AND     coalesce(c.ie_tipo_cronograma, '0') <> 'I'
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '')
		AND 	p.nr_sequencia = nr_sequencia_p
		AND     c.ie_situacao  = 'A' -- only active schedules
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '') -- only approved schedules
		--AND     e.NR_SEQ_SUB_PROJ is null -- only activities that do not represent subprojects
		AND     p.NR_SEQ_ESTAGIO <> 44 -- remove canceled projects
		AND     c.IE_CLASSIFICACAO <> 'N' -- remove PRP/NPI schedules
		AND  	NOT EXISTS (SELECT 1 FROM proj_cron_etapa xx WHERE xx.nr_seq_superior =  e.nr_sequencia)
		) t 
		) s;
	elsif (ie_informacao_p	= 'HPI') then
		SELECT dividir(sum(s.qt_earned_value) , sum(s.hrs_real)) hpi
		into STRICT	qt_retorno_w
		FROM (
		SELECT  
			t.hrs_real,
			(t.pr_etapa * t.hrs_previstas / 100) qt_earned_value
		FROM (
		SELECT 	e.qt_hora_prev hrs_previstas,
				e.PR_ETAPA pr_etapa,    
			e.QT_HORA_REAL hrs_real 
		FROM    proj_projeto p,
				proj_cronograma c, 
				proj_cron_etapa e
		WHERE	p.nr_sequencia = c.nr_seq_proj
		AND     c.nr_sequencia = e.nr_seq_cronograma
		AND     c.ie_situacao  = 'A'
		AND     coalesce(c.ie_tipo_cronograma, '0') <> 'I'
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '')
		AND 	p.nr_sequencia = nr_sequencia_p
		AND     c.ie_situacao  = 'A' -- only active schedules
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '') -- only approved schedules
		--AND     e.NR_SEQ_SUB_PROJ is null -- only activities that do not represent subprojects
		AND     p.NR_SEQ_ESTAGIO <> 44 -- remove canceled projects
		AND     c.IE_CLASSIFICACAO <> 'N' -- remove PRP/NPI schedules
		AND  	NOT EXISTS (SELECT 1 FROM proj_cron_etapa xx WHERE xx.nr_seq_superior =  e.nr_sequencia)
		) t 
		) s;
	end if;
	
elsif (upper(ie_opcao_p)	= 'PROG') then
	if (ie_informacao_p	= 'SPI') then
		SELECT dividir(sum(s.qt_earned_value), sum(s.qt_planned_value)) spi
		into STRICT	qt_retorno_w
		FROM (
		SELECT  t.hrs_real,
				t.pr_etapa,
				CASE
				WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
				  THEN 100
				ELSE dividir(t.dias_uteis_data_atual , t.dias_uteis) * 100
				END qt_pr_previstos_por_ativ,
			t.hrs_previstas hrs_effort,
				CASE 
				WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
				  THEN t.hrs_previstas
				ELSE (dividir(t.dias_uteis_data_atual , t.dias_uteis)) * t.hrs_previstas
				END qt_planned_value,
			(t.pr_etapa * t.hrs_previstas / 100) qt_earned_value
		FROM (
		SELECT  e.qt_hora_prev hrs_previstas,
				OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, e.dt_fim_prev, 1) dias_uteis,
				OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, TRUNC(clock_timestamp()), 1) dias_uteis_data_atual,
				e.PR_ETAPA pr_etapa,
			e.QT_HORA_REAL hrs_real
		FROM        proj_projeto p
		INNER JOIN	proj_cronograma c ON  p.nr_sequencia = c.nr_seq_proj
		INNER JOIN  proj_cron_etapa e ON  c.nr_sequencia = e.nr_seq_cronograma
		WHERE   c.ie_situacao  = 'A'
		AND     coalesce(c.ie_tipo_cronograma, '0') <> 'I'
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '')
		AND     (p.nr_seq_programa IS NOT NULL AND p.nr_seq_programa::text <> '')
		AND     p.nr_seq_programa <> 80 -- retira programa do pmo servicos
		AND     p.nr_seq_programa <> 83 -- retira programa do pmo servicos
		AND     p.nr_seq_programa = nr_sequencia_p
		--AND     e.NR_SEQ_SUB_PROJ is null -- somente atividades que nao possuem subprojeto
		AND     c.ie_situacao  = 'A' -- only active schedules
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '') -- only approved schedules
		--AND     e.NR_SEQ_SUB_PROJ is null -- only activities that do not represent subprojects
		AND     p.NR_SEQ_ESTAGIO <> 44 -- remove canceled projects
		AND     c.IE_CLASSIFICACAO <> 'N' -- remove PRP/NPI schedules
		AND  	NOT EXISTS (SELECT 1 FROM proj_cron_etapa xx WHERE xx.nr_seq_superior =  e.nr_sequencia) -- somente subatividades
		) t 
		) s;
	elsif (ie_informacao_p	= 'HPI') then
	
	
		SELECT dividir(sum(s.qt_earned_value), sum(s.hrs_real)) hpi
		into STRICT	qt_retorno_w
		FROM (
		SELECT  t.hrs_real,
				t.pr_etapa,
				CASE 
				WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
				  THEN 100
				ELSE dividir(t.dias_uteis_data_atual , t.dias_uteis) * 100
				END qt_pr_previstos_por_ativ,
			t.hrs_previstas hrs_effort,
				CASE 
				WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
				  THEN t.hrs_previstas
				ELSE (dividir(t.dias_uteis_data_atual , t.dias_uteis)) * t.hrs_previstas
				END qt_planned_value,
			(t.pr_etapa * t.hrs_previstas / 100) qt_earned_value
		FROM (
		SELECT  e.qt_hora_prev hrs_previstas,
				OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, e.dt_fim_prev, 1) dias_uteis,
				OBTER_DIAS_UTEIS_PERIODO(e.dt_inicio_prev, TRUNC(clock_timestamp()), 1) dias_uteis_data_atual,
				e.PR_ETAPA pr_etapa,
			e.QT_HORA_REAL hrs_real
		FROM        proj_projeto p
		INNER JOIN	proj_cronograma c ON  p.nr_sequencia = c.nr_seq_proj
		INNER JOIN  proj_cron_etapa e ON  c.nr_sequencia = e.nr_seq_cronograma
		WHERE   c.ie_situacao  = 'A'
		AND     coalesce(c.ie_tipo_cronograma, '0') <> 'I'
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '')
		AND     (p.nr_seq_programa IS NOT NULL AND p.nr_seq_programa::text <> '')
		AND     p.nr_seq_programa <> 80 -- retira programa do pmo servicos
		AND     p.nr_seq_programa <> 83 -- retira programa do pmo servicos
		AND     p.nr_seq_programa = nr_sequencia_p
		AND     c.ie_situacao  = 'A' -- only active schedules
		AND     (c.DT_APROVACAO IS NOT NULL AND c.DT_APROVACAO::text <> '') -- only approved schedules
		--AND     e.NR_SEQ_SUB_PROJ is null -- only activities that do not represent subprojects
		AND     p.NR_SEQ_ESTAGIO <> 44 -- remove canceled projects
		AND     c.IE_CLASSIFICACAO <> 'N' -- remove PRP/NPI schedules
		AND     coalesce(e.NR_SEQ_SUB_PROJ::text, '') = '' -- somente atividades que nao possuem subprojeto
		AND  	NOT EXISTS (SELECT 1 FROM proj_cron_etapa xx WHERE xx.nr_seq_superior =  e.nr_sequencia) -- somente subatividades
		) t 
		) s;
	
	end if;
	
	
end if;

return	qt_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pmo_obter_dados_bsc ( nr_sequencia_p bigint, ie_informacao_p text, ie_opcao_p text) FROM PUBLIC;

