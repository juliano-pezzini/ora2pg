-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE tre AS (	dt_inicial	timestamp,
			dt_final	timestamp,
			qt_carga_dia	bigint);


CREATE OR REPLACE FUNCTION tre_consistir_hora_treinamento (nr_seq_evento_p bigint, nr_seq_modulo_p bigint, dt_treinamento_p timestamp, cd_estabelecimento_p bigint, ie_opcao_p text) RETURNS varchar AS $body$
DECLARE


/* ie_opcao_p:
		HI - Hora inicial;
		HF - Hora final;
		CH - Carga horária diária;
*/
type vetor is table of tre index by integer;
treinamento_w			Vetor;
i				integer := 0;

dt_inicio_treinamento_w		timestamp;
dt_termino_treinamento_w	timestamp;
qt_carga_horaria_treinamento_w	double precision;
nr_seq_curso_w			bigint;
qt_data_treinamento_w		bigint := 0;
dt_treinamento_w		timestamp;
ie_data_treinamento_w		varchar(30);
hr_inicial_w			timestamp;
hr_final_w			timestamp;
qt_carga_total_w		bigint := 0;
qt_carga_diaria_w		bigint := 0;
qt_carga_diaria_ww		bigint := 0;
x				bigint := 0;
y				bigint := 0;
z				bigint := -1;

C01 CURSOR FOR
SELECT	dt_dia,
	   pkg_date_utils.get_WeekDay(dt_dia)
from   dia_v
where  trunc(dt_dia) between trunc(dt_inicio_treinamento_w) and trunc((dt_inicio_treinamento_w-1) + Round(qt_carga_horaria_treinamento_w/qt_carga_diaria_ww))
and	   obter_se_feriado(cd_estabelecimento_p,dt_dia) = 0
and	   pkg_date_utils.get_WeekDay(dt_dia) <> 1;


BEGIN

/* Busca a data inicial e final do treinamento */

if	((coalesce(nr_seq_modulo_p::text, '') = '') or (nr_seq_modulo_p = 0)) then
	Select	coalesce(a.dt_inicio_real,a.dt_inicio),
		coalesce(a.dt_fim_real,a.dt_fim) dt_termino,
		a.nr_seq_curso
	into STRICT	dt_inicio_treinamento_w,
		dt_termino_treinamento_w,
		nr_seq_curso_w
	from	tre_evento a
	where	a.nr_sequencia = nr_seq_evento_p;
else
	Select	b.dt_inicio,
		b.dt_termino,
		a.nr_seq_curso
	into STRICT	dt_inicio_treinamento_w,
		dt_termino_treinamento_w,
		nr_seq_curso_w
	from	tre_evento a,
		tre_evento_modulo b
	where	a.nr_sequencia = b.nr_seq_evento
	and	b.nr_seq_evento = nr_seq_evento_p
	and	b.nr_sequencia = nr_seq_modulo_p;
end if;

/*Busca a carga horária total do treinamento*/

if	((coalesce(nr_seq_modulo_p::text, '') = '') or (nr_seq_modulo_p = 0)) then
	select	sum(coalesce(qt_carga_horaria,0))
	into STRICT	qt_carga_horaria_treinamento_w
	from	tre_curso_modulo
	where	nr_seq_curso = nr_seq_curso_w;
else
	select	coalesce(qt_carga_horaria,0)
	into STRICT	qt_carga_horaria_treinamento_w
	from	tre_evento_modulo
	where	nr_sequencia = nr_seq_modulo_p;
end if;

/*Busca a carga horária diária*/

Select	((to_date(to_char(dt_termino_treinamento_w,'hh24:mi'),'hh24:mi')-to_date(to_char(dt_inicio_treinamento_w,'hh24:mi'),'hh24:mi'))*24)
into STRICT	qt_carga_diaria_w
;

if (qt_carga_diaria_w >= 8) then
	qt_carga_diaria_ww	:= qt_carga_diaria_w-2;
else
	qt_carga_diaria_ww	:= qt_carga_diaria_w;
end if;

Open C01;
Loop
	fetch C01 into	dt_treinamento_w,
			ie_data_treinamento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */

	if (to_char(dt_inicio_treinamento_w,'mi') = '00') then
		dt_treinamento_w	:= trunc(dt_treinamento_w)+(to_char(dt_inicio_treinamento_w,'hh24'))::numeric /24;
	elsif (to_char(dt_inicio_treinamento_w,'mi') = '30') then
		dt_treinamento_w	:= trunc(dt_treinamento_w)+((to_char(dt_inicio_treinamento_w,'hh24'))::numeric /24)+0.5/24;
	end if;

	treinamento_w[i].dt_inicial	:= dt_treinamento_w;
	if (ie_data_treinamento_w <> '7') then
		if	((qt_carga_horaria_treinamento_w - qt_carga_total_w) >= qt_carga_diaria_ww) then
			qt_carga_total_w		:= qt_carga_total_w + qt_carga_diaria_ww;
			treinamento_w[i].dt_final	:= dt_treinamento_w+(qt_carga_diaria_w)/24;
			treinamento_w[i].qt_carga_dia	:= qt_carga_diaria_ww;
		else
			if	((qt_carga_horaria_treinamento_w - qt_carga_total_w) > (qt_carga_diaria_ww/2)) then
				qt_carga_total_w		:= qt_carga_total_w + (qt_carga_horaria_treinamento_w - qt_carga_total_w);
				treinamento_w[i].dt_final	:= dt_treinamento_w+((qt_carga_horaria_treinamento_w - qt_carga_total_w)+2)/24;
				treinamento_w[i].qt_carga_dia	:= (qt_carga_horaria_treinamento_w - qt_carga_total_w)+2;
			else
				qt_carga_total_w		:= qt_carga_total_w + (qt_carga_horaria_treinamento_w - qt_carga_total_w);
				treinamento_w[i].dt_final	:= dt_treinamento_w+(qt_carga_horaria_treinamento_w - qt_carga_total_w)/24;
				treinamento_w[i].qt_carga_dia	:= (qt_carga_horaria_treinamento_w - qt_carga_total_w);
			end if;
		end if;
	else
		if	((qt_carga_horaria_treinamento_w - qt_carga_total_w) <= Round(qt_carga_diaria_ww/2)) then
			qt_carga_total_w		:= qt_carga_total_w + (qt_carga_horaria_treinamento_w - qt_carga_total_w);
			treinamento_w[i].dt_final	:= dt_treinamento_w+((qt_carga_horaria_treinamento_w - qt_carga_total_w)/24);
			treinamento_w[i].qt_carga_dia	:= (qt_carga_horaria_treinamento_w - qt_carga_total_w);
		else
			qt_carga_total_w		:= qt_carga_total_w + Round(qt_carga_diaria_ww/2);
			treinamento_w[i].dt_final	:= dt_treinamento_w+Round(qt_carga_diaria_ww/2)/24;
			treinamento_w[i].qt_carga_dia	:= Round(qt_carga_diaria_ww/2);
		end if;
	end if;
	if (trunc(dt_treinamento_w) = trunc(dt_treinamento_p)) then
		z	:= i;
	end if;
	i	:= i+1;
end loop;
Close C01;

/*Verifica se faltou horas na carga horária e adiciona o(s) dia(s) no registro*/

if (qt_carga_total_w < qt_carga_horaria_treinamento_w) then
	for	x in y..(Round((qt_carga_horaria_treinamento_w - qt_carga_total_w)/qt_carga_diaria_w)) loop
		begin
		dt_treinamento_w		:= dt_treinamento_w + 1;
		if	((obter_se_feriado(cd_estabelecimento_p,dt_treinamento_w) > 0) or (pkg_date_utils.get_WeekDay(dt_treinamento_w) = 1)) then
			y := y-1;
			exit;
		end if;
		i	:= i+1;
		if (to_char(dt_inicio_treinamento_w,'mi') = '00') then
			dt_treinamento_w	:= trunc(dt_treinamento_w)+(to_char(dt_inicio_treinamento_w,'hh24'))::numeric /24;
		elsif (to_char(dt_inicio_treinamento_w,'mi') = '30') then
			dt_treinamento_w	:= trunc(dt_treinamento_w)+((to_char(dt_inicio_treinamento_w,'hh24'))::numeric /24)+0.5/24;
		end if;

		/* Data final */

		if (ie_data_treinamento_w <> '7') then
		if	((qt_carga_horaria_treinamento_w - qt_carga_total_w) >= qt_carga_diaria_ww) then
			qt_carga_total_w		:= qt_carga_total_w + qt_carga_diaria_ww;
			treinamento_w[i].dt_final	:= dt_treinamento_w+(qt_carga_diaria_w)/24;
			treinamento_w[i].qt_carga_dia	:= qt_carga_diaria_ww;
		else
			if	((qt_carga_horaria_treinamento_w - qt_carga_total_w) > (qt_carga_diaria_ww/2)) then
				qt_carga_total_w		:= qt_carga_total_w + (qt_carga_horaria_treinamento_w - qt_carga_total_w);
				treinamento_w[i].dt_final	:= dt_treinamento_w+((qt_carga_horaria_treinamento_w - qt_carga_total_w)+2)/24;
				treinamento_w[i].qt_carga_dia	:= (qt_carga_horaria_treinamento_w - qt_carga_total_w)+2;
			else
				qt_carga_total_w		:= qt_carga_total_w + (qt_carga_horaria_treinamento_w - qt_carga_total_w);
				treinamento_w[i].dt_final	:= dt_treinamento_w+(qt_carga_horaria_treinamento_w - qt_carga_total_w)/24;
				treinamento_w[i].qt_carga_dia	:= (qt_carga_horaria_treinamento_w - qt_carga_total_w);
			end if;
		end if;
	else
		if	((qt_carga_horaria_treinamento_w - qt_carga_total_w) <= Round(qt_carga_diaria_ww/2)) then
			qt_carga_total_w		:= qt_carga_total_w + (qt_carga_horaria_treinamento_w - qt_carga_total_w);
			treinamento_w[i].dt_final	:= dt_treinamento_w+((qt_carga_horaria_treinamento_w - qt_carga_total_w)/24);
			treinamento_w[i].qt_carga_dia	:= (qt_carga_horaria_treinamento_w - qt_carga_total_w);
		else
			qt_carga_total_w		:= qt_carga_total_w + Round(qt_carga_diaria_ww/2);
			treinamento_w[i].dt_final	:= dt_treinamento_w+Round(qt_carga_diaria_ww/2)/24;
			treinamento_w[i].qt_carga_dia	:= Round(qt_carga_diaria_ww/2);
		end if;
	end if;

		if (trunc(dt_treinamento_w) = trunc(dt_treinamento_p)) then
			z	:= i;
		end if;
		end;
	end loop;
end if;

if (z = -1) then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(279330);
end if;

if (ie_opcao_p = 'HI') then
	Return to_char(treinamento_w[z].dt_inicial,'dd/mm/yyyy hh24:mi:ss');
elsif (ie_opcao_p = 'HF') then
	Return to_char(treinamento_w[z].dt_final,'dd/mm/yyyy hh24:mi:ss');
elsif (ie_opcao_p = 'CH') then
	Return to_char(treinamento_w[z].qt_carga_dia);
end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION tre_consistir_hora_treinamento (nr_seq_evento_p bigint, nr_seq_modulo_p bigint, dt_treinamento_p timestamp, cd_estabelecimento_p bigint, ie_opcao_p text) FROM PUBLIC;

