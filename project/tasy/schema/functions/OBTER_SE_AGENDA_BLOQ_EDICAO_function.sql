-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function obter_se_agenda_bloq_edicao as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION obter_se_agenda_bloq_edicao (nr_seq_agenda_p bigint, nm_usuario_p text) RETURNS varchar AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	varchar;
BEGIN
	v_query := 'SELECT * FROM obter_se_agenda_bloq_edicao_atx ( ' || quote_nullable(nr_seq_agenda_p) || ',' || quote_nullable(nm_usuario_p) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret varchar);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION obter_se_agenda_bloq_edicao_atx (nr_seq_agenda_p bigint, nm_usuario_p text) RETURNS varchar AS $body$
DECLARE


ie_bloqueado_w					varchar(2) := 'N';
ie_ativo_w						varchar(2) := 'S';
nr_serial_session_w				agenda_paciente_edicao.nr_serial_session%type;
nr_sid_session_w				agenda_paciente_edicao.nr_sid_session%type;
ie_bloq_simult_agenda_cir_w		parametro_agenda.ie_bloq_simult_agenda_cir%type;
BEGIN
begin
ie_bloq_simult_agenda_cir_w := obter_parametro_agenda(wheb_usuario_pck.get_cd_estabelecimento, 'IE_BLOQ_SIMULT_AGENDA_CIR', 'N');

if (coalesce(ie_bloq_simult_agenda_cir_w,'N') = 'S') then

select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
into STRICT	ie_bloqueado_w
from	agenda_paciente_edicao
where	upper(nm_usuario_nrec) <> upper(nm_usuario_p)
and		nr_seq_agenda = nr_seq_agenda_p;

	if (coalesce(ie_bloqueado_w, 'N') = 'S') then

		select	max(nr_serial_session),
				max(nr_sid_session)
		into STRICT	nr_serial_session_w,
				nr_sid_session_w
		from	agenda_paciente_edicao
		where	upper(nm_usuario_nrec) <> upper(nm_usuario_p)
		and		nr_seq_agenda = nr_seq_agenda_p;

		select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
		into STRICT	ie_ativo_w
		from	v$session
		where	serial# = nr_serial_session_w
		and		sid = nr_sid_session_w;

		if (coalesce(ie_ativo_w, 'S') = 'N') then
			delete	FROM agenda_paciente_edicao
			where	nr_serial_session = nr_serial_session_w
			and		nr_sid_session = nr_sid_session_w
			and		nr_seq_agenda = nr_seq_agenda_p;

			commit;

			ie_bloqueado_w := 'N';
		end if;
	else
		ie_bloqueado_w := 'N';
	end if;
else
	ie_bloqueado_w := 'N';
end if;

exception
when others then
ie_bloqueado_w := 'N';
end;

return ie_bloqueado_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION obter_se_agenda_bloq_edicao (nr_seq_agenda_p bigint, nm_usuario_p text) FROM PUBLIC; -- REVOKE ALL ON FUNCTION obter_se_agenda_bloq_edicao_atx (nr_seq_agenda_p bigint, nm_usuario_p text) FROM PUBLIC;

