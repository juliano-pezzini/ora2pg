-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function obter_horas_validade_sae as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION obter_horas_validade_sae ( dt_prim_horario_prescr_p timestamp, nr_atendimento_p bigint, ie_estender_prim_prescr_p text, ie_regra_prim_prescr_p text, dt_prescricao_p timestamp, NR_SEQUENCIA_P bigint) RETURNS bigint AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	bigint;
BEGIN
	v_query := 'SELECT * FROM obter_horas_validade_sae_atx ( ' || quote_nullable(dt_prim_horario_prescr_p) || ',' || quote_nullable(nr_atendimento_p) || ',' || quote_nullable(ie_estender_prim_prescr_p) || ',' || quote_nullable(ie_regra_prim_prescr_p) || ',' || quote_nullable(dt_prescricao_p) || ',' || quote_nullable(NR_SEQUENCIA_P) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret bigint);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION obter_horas_validade_sae_atx ( dt_prim_horario_prescr_p timestamp, nr_atendimento_p bigint, ie_estender_prim_prescr_p text, ie_regra_prim_prescr_p text, dt_prescricao_p timestamp, NR_SEQUENCIA_P bigint) RETURNS bigint AS $body$
DECLARE


hr_inicio_setor_w		varchar(10);
hr_inicio_prescr_w		varchar(10);
dt_prim_horario_setor_w		timestamp;
cd_setor_paciente_w		varchar(10);
nr_horas_validade_w		double precision := 24;
ie_primeira_prescricao_w	varchar(1);
qt_prescr_w			integer;
hr_estender_validade_w		timestamp;
BEGIN
if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then

	select	max(cd_setor_atendimento)
	into STRICT	cd_setor_paciente_w
	from	pe_prescricao
	where	NR_SEQUENCIA	= NR_SEQUENCIA_P;

	if (coalesce(cd_setor_paciente_w::text, '') = '') then
		select	coalesce(obter_unidade_atendimento(coalesce(nr_atendimento_p,0),'IA','CS'),0)
		into STRICT	cd_setor_paciente_w
		;

		if (coalesce(cd_setor_paciente_w,0)	= 0) then
			cd_setor_paciente_w	:= obter_setor_atendimento(nr_atendimento_p);
		end if;

	end if;

	select 	max(hr_inicio_prescricao_sae),
		max(hr_estender_validade_SAE)
	into STRICT	dt_prim_horario_setor_w,
		hr_estender_validade_w
	from 	setor_atendimento
	where 	cd_setor_atendimento = cd_setor_paciente_w;


	if (dt_prim_horario_setor_w IS NOT NULL AND dt_prim_horario_setor_w::text <> '') and (to_char(dt_prim_horario_setor_w, 'hh24:mi:ss') <> '00:00:00')then

		hr_inicio_prescr_w	:= coalesce(to_char(dt_prim_horario_prescr_p,'hh24:mi:ss'),'00:00:00');
		hr_inicio_setor_w	:= to_char(dt_prim_horario_setor_w,'hh24:mi:ss');



		if (hr_inicio_prescr_w > hr_inicio_setor_w) then
			nr_horas_validade_w	:= ((to_date('02/01/2000'||hr_inicio_setor_w,'dd/mm/yyyy hh24:mi:ss') -
						to_date('01/01/2000'||hr_inicio_prescr_w,'dd/mm/yyyy hh24:mi:ss')) * 24);


		elsif (hr_inicio_setor_w > hr_inicio_prescr_w) then
			nr_horas_validade_w	:= ((to_date('01/01/2000'||hr_inicio_setor_w,'dd/mm/yyyy hh24:mi:ss') -
						to_date('01/01/2000'||hr_inicio_prescr_w,'dd/mm/yyyy hh24:mi:ss')) * 24);




			if (ie_estender_prim_prescr_p <> 'N') and (hr_inicio_prescr_w >= coalesce(to_char(hr_estender_validade_w,'HH24:MI:SS'),hr_inicio_prescr_w)) then
				begin
				if (ie_estender_prim_prescr_p = 'S') then
					begin
					ie_primeira_prescricao_w	:= obter_se_primeira_sae(null, nr_atendimento_p, cd_setor_paciente_w, ie_regra_prim_prescr_p);
					if (ie_primeira_prescricao_w  = 'S') then
						nr_horas_validade_w	:= nr_horas_validade_w + 24;
					end if;
					end;
				elsif (ie_estender_prim_prescr_p = 'V') then
					begin
					select	count(*)
					into STRICT	qt_prescr_w
					from	pe_prescricao
					where	nr_atendimento	= nr_atendimento_p
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and	dt_prescricao_p between dt_inicio_prescr and dt_validade_prescr;
					if (coalesce(qt_prescr_w,0)	   = 0) then
						nr_horas_validade_w	:= nr_horas_validade_w + 24;
					end if;
					end;
				elsif (ie_estender_prim_prescr_p = 'VS') then
					begin
					select	count(*)
					into STRICT	qt_prescr_w
					from	pe_prescricao
					where	nr_atendimento	= nr_atendimento_p
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and	cd_setor_atendimento	= cd_setor_paciente_w
					and	dt_prescricao_p between dt_inicio_prescr and dt_validade_prescr;
					if (coalesce(qt_prescr_w,0)	   = 0) then
						nr_horas_validade_w	:= nr_horas_validade_w + 24;
					end if;
					end;
				elsif (ie_estender_prim_prescr_p = 'SE') then
					nr_horas_validade_w	:= nr_horas_validade_w + 24;
				end if;
				end;
			end if;

		end if;
	end if;
end if;

return ceil(nr_horas_validade_w);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_horas_validade_sae ( dt_prim_horario_prescr_p timestamp, nr_atendimento_p bigint, ie_estender_prim_prescr_p text, ie_regra_prim_prescr_p text, dt_prescricao_p timestamp, NR_SEQUENCIA_P bigint) FROM PUBLIC; -- REVOKE ALL ON FUNCTION obter_horas_validade_sae_atx ( dt_prim_horario_prescr_p timestamp, nr_atendimento_p bigint, ie_estender_prim_prescr_p text, ie_regra_prim_prescr_p text, dt_prescricao_p timestamp, NR_SEQUENCIA_P bigint) FROM PUBLIC;

