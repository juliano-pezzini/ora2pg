-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION gratuidade_obter_se_exporta ( nr_sequencia_p bigint, ie_tipo_atendimento_p bigint) RETURNS varchar AS $body$
DECLARE

			
ds_retorno_w			varchar(50) := 'N';			
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w		bigint;	
ie_classificacao_w		varchar(1);
ie_tipo_util_w			varchar(15);
ie_proc_princ_atend_w		procedimento_paciente.ie_proc_princ_atend%type := 'N';
vl_procedimento_w		procedimento_paciente.vl_procedimento%type;
vl_proced_w			procedimento_paciente.vl_procedimento%type;
nr_interno_conta_w		procedimento_paciente.nr_interno_conta%type;
qt_proc_princ_w			bigint := 0;
cd_convenio_parametro_w		conta_paciente.cd_convenio_parametro%type;
ie_tipo_convenio_w		convenio.ie_tipo_convenio%type;
cd_proc_princ_aih_w		sus_aih_unif.cd_procedimento_real%type;
cd_proc_princ_apac_w		sus_apac_unif.cd_procedimento%type;
nr_sequencia_w			procedimento_paciente.nr_sequencia%type;
dt_procedimento_w		procedimento_paciente.dt_procedimento%type;


BEGIN

begin
select	cd_procedimento,
	ie_origem_proced,
	coalesce(nr_seq_proc_interno,0),
	coalesce(ie_proc_princ_atend,'N'),
	coalesce(vl_procedimento,0),
	nr_interno_conta,
	dt_procedimento
into STRICT	cd_procedimento_w,
	ie_origem_proced_w,
	nr_seq_proc_interno_w,
	ie_proc_princ_atend_w,
	vl_procedimento_w,
	nr_interno_conta_w,
	dt_procedimento_w
from	procedimento_paciente
where	nr_sequencia = nr_sequencia_p;
exception
when others then
	cd_procedimento_w	:= 0;
	ie_origem_proced_w	:= 0;
	nr_seq_proc_interno_w	:= 0;
	ie_proc_princ_atend_w	:= 0;
	vl_procedimento_w	:= 0;
	nr_interno_conta_w	:= 0;
end;

begin
select	ie_classificacao
into STRICT	ie_classificacao_w
from	procedimento
where	cd_procedimento = cd_procedimento_w
and	ie_origem_proced = ie_origem_proced_w;
exception
when others then
	ie_classificacao_w := 0;
end;

if (ie_classificacao_w = 3) then
	ds_retorno_w := 'S';
else
	begin
	
	select	coalesce(max(ie_tipo_util),'X')
	into STRICT	ie_tipo_util_w
	from	proc_interno
	where	nr_sequencia = nr_seq_proc_interno_w;
	
	if (ie_tipo_util_w = 'C') and (coalesce(ie_proc_princ_atend_w,'N') = 'S') then
		ds_retorno_w	:= 'S';
	elsif (ie_tipo_util_w = 'C') and (coalesce(ie_proc_princ_atend_w,'N') = 'N') then
		
		select	count(1)
		into STRICT	qt_proc_princ_w
		from	procedimento_paciente a
		where	coalesce(a.ie_proc_princ_atend,'N') = 'S'
		and	a.nr_interno_conta = nr_interno_conta_w
		and	coalesce(a.cd_motivo_exc_conta::text, '') = ''  LIMIT 1;
		
		if (qt_proc_princ_w = 0) then
			begin
			
			select	cd_convenio_parametro
			into STRICT	cd_convenio_parametro_w
			from	conta_paciente
			where	nr_interno_conta = nr_interno_conta_w;
			
			ie_tipo_convenio_w := coalesce(Obter_Tipo_Convenio(cd_convenio_parametro_w),1);
			
			if (ie_tipo_convenio_w <> 3) then
				begin
				
				begin
				select	max(vl_procedimento)
				into STRICT	vl_proced_w
				from	procedimento_paciente a,
					proc_interno b
				where	a.ie_via_acesso = 'U'
				and	a.tx_procedimento = 100
				and	coalesce(b.ie_tipo_util,'X') = 'C'
				and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
				and	b.nr_sequencia = a.nr_seq_proc_interno
				and	a.nr_interno_conta = nr_interno_conta_w;			
				exception
				when others then
					vl_proced_w := -1;
				end;
				
				begin
				select	max(a.nr_sequencia)
				into STRICT	nr_sequencia_w
				from	procedimento_paciente a,
					proc_interno b
				where	a.ie_via_acesso = 'U'
				and	a.tx_procedimento = 100
				and	coalesce(b.ie_tipo_util,'X') = 'C'
				and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
				and	b.nr_sequencia = a.nr_seq_proc_interno
				and	a.nr_interno_conta = nr_interno_conta_w
				and	vl_procedimento = vl_proced_w;
				exception
				when others then
					nr_sequencia_w := 0;
				end;
			
				if (nr_sequencia_p = nr_sequencia_w) then
					ds_retorno_w	:= 'S';
				end if;
			
				end;
			else
				begin				
				if (ie_tipo_atendimento_p = 1) then
					begin
					
					cd_proc_princ_aih_w := coalesce(sus_obter_proced_aih_unif(nr_interno_conta_w,2,'C'),0);
					
					if (coalesce(sus_validar_regra(11,cd_proc_princ_aih_w,ie_origem_proced_w,dt_procedimento_w),0) = 0) and (cd_procedimento_w = cd_proc_princ_aih_w) then
						ds_retorno_w	:= 'S';
					elsif (coalesce(sus_validar_regra(11,cd_proc_princ_aih_w,ie_origem_proced_w,dt_procedimento_w),0) > 0) then
						begin
						
						begin
						select	max(vl_procedimento)
						into STRICT	vl_proced_w
						from	procedimento_paciente
						where	nr_interno_conta = nr_interno_conta_w
						and	sus_obter_tiporeg_proc(cd_procedimento,ie_origem_proced,'C',2) = 3;						
						exception
						when others then
							vl_proced_w := -1;
						end;
						
						begin
						select	max(nr_sequencia)
						into STRICT	nr_sequencia_w
						from	procedimento_paciente
						where	nr_interno_conta = nr_interno_conta_w
						and	sus_obter_tiporeg_proc(cd_procedimento,ie_origem_proced,'C',2) = 3
						and	vl_procedimento = vl_proced_w;
						exception
						when others then
							vl_proced_w := -1;
						end;
						
						if (nr_sequencia_p = nr_sequencia_w) then
							ds_retorno_w	:= 'S';
						end if;
						
						end;
					end if;
					end;
				else
					begin						
					if (coalesce(sus_obter_tiporeg_proc(cd_procedimento_w,ie_origem_proced_w,'C',16),0) = 6) then
					
						cd_proc_princ_apac_w := coalesce(sus_obter_proced_apac_unif(nr_interno_conta_w,'C'),0);
						
						if (cd_procedimento_w = cd_proc_princ_apac_w) then
							ds_retorno_w	:= 'S';
						end if;
					end if;					
					end;
				end if;				
				end;
			end if;
			
			end;
		end if;
		
	elsif (ie_tipo_util_w = 'E') and (ie_tipo_atendimento_p <> 1) then
		ds_retorno_w	:= 'S';
	end if;
	
	end;
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION gratuidade_obter_se_exporta ( nr_sequencia_p bigint, ie_tipo_atendimento_p bigint) FROM PUBLIC;

