-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_proxima_exec_item ( dt_execucao_p timestamp, nr_seq_segurado_p bigint, nr_seq_proc_p bigint, ie_tipo_inf_p text) RETURNS varchar AS $body$
DECLARE


cd_area_procedimento_w		bigint	:= 0;
cd_especialidade_w		bigint 	:= 0;
cd_grupo_proc_w			bigint 	:= 0;
cd_procedimento_w		bigint	:= 0;
ie_origem_proced_w		bigint	:= 0;
nr_seq_grupo_w			bigint	:= 0;
nr_seq_regra_w			bigint	:= 0;
ie_tipo_quantidade_w		varchar(3)	:= 'X';
qt_permitida_w			double precision;
qt_tipo_quantidade_w		bigint;
dt_liberacao_w			timestamp		:= clock_timestamp();
qt_reg_w			bigint;
ie_tipo_guia_w			varchar(2);
nr_seq_prestador_w		bigint;
cd_estabelecimento_w		bigint;
ds_retorno_w			varchar(50);
qt_procedimento_w		integer;
ie_item_liberado_w		varchar(1)	:= 'N';

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_tipo_quantidade,
		a.qt_permitida,
		a.qt_tipo_quantidade
	from	pls_regra_qtde_proc	a
	where	a.ie_situacao		= 'A'
	--and	a.cd_estabelecimento	= cd_estabelecimento_w
	and	trunc(dt_execucao_p) between trunc(a.dt_inicio_vigencia) and fim_dia(coalesce(a.dt_fim_vigencia, dt_execucao_p))
	and	coalesce(a.cd_procedimento, coalesce(cd_procedimento_w,0))		= coalesce(cd_procedimento_w,0)
	and	coalesce(a.ie_origem_proced, coalesce(ie_origem_proced_w,0))		= coalesce(ie_origem_proced_w,0)
	and	coalesce(a.cd_grupo_proc, coalesce(cd_grupo_proc_w,0))			= coalesce(cd_grupo_proc_w,0)
	and	coalesce(a.cd_especialidade, coalesce(cd_especialidade_w,0))		= coalesce(cd_especialidade_w,0)
	and	coalesce(a.cd_area_procedimento, coalesce(cd_area_procedimento_w,0)) 	= coalesce(cd_area_procedimento_w,0)
	and	coalesce(a.nr_seq_grupo_servico, coalesce(nr_seq_grupo_w,0)) = coalesce(nr_seq_grupo_w,0)
	order by a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		a.cd_procedimento;

C02 CURSOR FOR
	SELECT	a.dt_liberacao
	into STRICT	dt_liberacao_w
	from	pls_guia_plano		b,
		pls_guia_plano_proc	a
	where	a.nr_seq_guia		= b.nr_sequencia
	and	b.nr_seq_segurado	= nr_seq_segurado_p
	and	a.cd_procedimento	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.dt_liberacao >= (dt_execucao_p - qt_tipo_quantidade_w)
	order by 1;


BEGIN

select	cd_procedimento,
	ie_origem_proced,
	ie_tipo_guia,
	nr_seq_prestador,
	cd_estabelecimento
into STRICT	cd_procedimento_w,
	ie_origem_proced_w,
	ie_tipo_guia_w,
	nr_seq_prestador_w,
	cd_estabelecimento_w
from	pls_guia_plano_proc 	b,
	pls_guia_plano		a
where	b.nr_sequencia	= nr_seq_proc_p
and	b.nr_seq_guia	= a.nr_sequencia;

nr_seq_grupo_w	:= pls_obter_grupo_servico(cd_procedimento_w, ie_origem_proced_w);

SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_proced_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w;

open C01;
loop
fetch C01 into
	nr_seq_regra_w,
	ie_tipo_quantidade_w,
	qt_permitida_w,
	qt_tipo_quantidade_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
end loop;
close C01;

if (nr_seq_regra_w	> 0) then
	if (ie_tipo_quantidade_w	= 'D') then
		select 	coalesce(sum(a.qt_autorizada),0)
		into STRICT	qt_procedimento_w
		from	pls_guia_plano		b,
			pls_guia_plano_proc	a
		where	a.nr_seq_guia		= b.nr_sequencia
		and	b.nr_seq_segurado	= nr_seq_segurado_p
		and	a.cd_procedimento	= cd_procedimento_w
		and	a.ie_origem_proced	= ie_origem_proced_w
		and	trunc(coalesce(a.dt_liberacao,a.dt_atualizacao)) between(trunc(dt_execucao_p) - qt_tipo_quantidade_w) and trunc(dt_execucao_p);
	elsif (ie_tipo_quantidade_w	= 'M') then
		select 	coalesce(sum(a.qt_autorizada),0)
		into STRICT	qt_procedimento_w
		from	pls_guia_plano		b,
			pls_guia_plano_proc	a
		where	a.nr_seq_guia		= b.nr_sequencia
		and	b.nr_seq_segurado	= nr_seq_segurado_p
		and	a.cd_procedimento	= cd_procedimento_w
		and	a.ie_origem_proced	= ie_origem_proced_w
		and	trunc(coalesce(a.dt_liberacao,a.dt_atualizacao), 'month') between(trunc(add_months(dt_execucao_p, - qt_tipo_quantidade_w ), 'month')) and trunc(dt_execucao_p, 'month');
	elsif (ie_tipo_quantidade_w	= 'A') then
		select 	coalesce(sum(a.qt_autorizada),0)
		into STRICT	qt_procedimento_w
		from	pls_guia_plano		b,
			pls_guia_plano_proc	a
		where	a.nr_seq_guia		= b.nr_sequencia
		and	b.nr_seq_segurado	= nr_seq_segurado_p
		and	a.cd_procedimento	= cd_procedimento_w
		and	a.ie_origem_proced	= ie_origem_proced_w
		and	trunc(coalesce(a.dt_liberacao,a.dt_atualizacao), 'yyyy') between
			(trunc(add_months(dt_execucao_p, - ( 12 * qt_tipo_quantidade_w )), 'yyyy')) and trunc(dt_execucao_p, 'yyyy');
	end if;

	if (qt_procedimento_w >= qt_permitida_w) then
		open C02;
		loop
		fetch C02 into
			dt_liberacao_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			qt_reg_w := qt_reg_w + 1;
			if (qt_reg_w = qt_permitida_w) then
				goto final;
			end if;
			end;
		end loop;
		close C02;
		<<final>>
		qt_reg_w := 0;
	end if;
end if;


if (nr_seq_regra_w	> 0) then
	if (ie_tipo_quantidade_w	= 'D') then
		dt_liberacao_w := dt_liberacao_w + qt_tipo_quantidade_w;
	elsif (ie_tipo_quantidade_w	= 'M') then
		dt_liberacao_w := add_months(dt_liberacao_w, qt_tipo_quantidade_w );
	elsif (ie_tipo_quantidade_w	= 'A') then
		dt_liberacao_w := add_months(dt_liberacao_w, ( 12 * qt_tipo_quantidade_w ));
	end if;
end if;

if (ie_tipo_inf_p = 'D') then
	ds_retorno_w := to_char(dt_liberacao_w,'DD/MM/YYYY');
elsif (ie_tipo_inf_p = 'L') then
	if (dt_liberacao_w <= clock_timestamp()) then
		ie_item_liberado_w := 'S';
	end if;
	ds_retorno_w := ie_item_liberado_w;
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_proxima_exec_item ( dt_execucao_p timestamp, nr_seq_segurado_p bigint, nr_seq_proc_p bigint, ie_tipo_inf_p text) FROM PUBLIC;

