-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION gpi_obter_perc_cron ( nr_sequencia_p bigint, nm_usuario_p text) RETURNS bigint AS $body$
DECLARE


dt_cancelamento_w	timestamp;
dt_inicio_prev_w	timestamp;
dt_fim_prev_w		timestamp;
qt_etapa_w		bigint;
pr_etapa_w		double precision;
pr_calculo_w		double precision	:= 0;
pr_cronograma_w		double precision	:= 0;
qt_hora_prev_w		double precision;
ie_forma_calculo_w	varchar(15);
cd_estabelecimento_w	bigint;

C01 CURSOR FOR
SELECT	nr_sequencia,
	pr_etapa,
	abs(coalesce(CASE WHEN qt_hora_prev=0 THEN  obter_hora_entre_datas(dt_inicio_prev, dt_fim_prev)  ELSE qt_hora_prev END ,0)) qt_hora_prev
from	gpi_cron_etapa
where	coalesce(nr_seq_superior::text, '') = ''
and	nr_seq_cronograma	= nr_sequencia_p;

vet01	C01%RowType;


BEGIN

cd_estabelecimento_w	:= coalesce(wheb_usuario_pck.get_cd_estabelecimento,1);

ie_forma_calculo_w	:= substr(coalesce((obter_valor_param_usuario(7027, 93, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)),'Q'),1,3);

select	min(a.dt_inicio_prev),
	max(a.dt_fim_prev)
into STRICT	dt_inicio_prev_w,
	dt_fim_prev_w
from	gpi_cron_etapa a
where	nr_seq_cronograma		= nr_sequencia_p;

select	sum(a.qt_hora_prev)
into STRICT	qt_hora_prev_w
from	gpi_cron_etapa a
where	nr_seq_cronograma		= nr_sequencia_p
and	coalesce(nr_seq_superior::text, '') = '';


select	max(dt_cancelamento)
into STRICT	dt_cancelamento_w
from	gpi_cronograma
where	nr_sequencia	= nr_sequencia_p;

if (coalesce(dt_cancelamento_w::text, '') = '') then
	begin

if (ie_forma_calculo_w = 'P') then
	begin

	if (qt_hora_prev_w = 0) then
		begin
		qt_hora_prev_w	:= abs(obter_hora_entre_datas(dt_inicio_prev_w, dt_fim_prev_w));
		end;
	end if;

	open c01;
	loop
	fetch c01 into
		vet01;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		pr_calculo_w	:= dividir(vet01.qt_hora_prev, qt_hora_prev_w) * 100;
		pr_calculo_w	:= dividir(pr_calculo_w * vet01.pr_etapa, 100);
		pr_cronograma_w	:= coalesce(pr_cronograma_w,0) + pr_calculo_w;
		end;
	end loop;

	end;
elsif (ie_forma_calculo_w = 'Q') then
	begin
	select	count(*),
		coalesce(sum(pr_etapa),0)
	into STRICT	qt_etapa_w,
		pr_etapa_w
	from	gpi_cron_etapa
	where	nr_seq_cronograma	= nr_sequencia_p
	and	coalesce(nr_seq_superior::text, '') = '';

	pr_cronograma_w		:= pr_etapa_w;

	if (pr_etapa_w <> 0) then
		pr_cronograma_w	:= (dividir(pr_etapa_w,(qt_etapa_w * 100)) * 100);
	end if;
	end;
end if;



	end;
end if;

if (pr_cronograma_w > 100) or (pr_cronograma_w = 99.99) then
	begin
	pr_cronograma_w	:= 100;
	end;
elsif (pr_cronograma_w < 0) then
	pr_cronograma_w	:= 0;
end if;

return pr_cronograma_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION gpi_obter_perc_cron ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

