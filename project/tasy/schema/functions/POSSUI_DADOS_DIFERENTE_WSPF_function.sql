-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE TP_CAMPOS_VERIFICAR AS (
    NM_PESSOA_FISICA PESSOA_FISICA.NM_PESSOA_FISICA%TYPE,
    DT_NASCIMENTO    PESSOA_FISICA.DT_NASCIMENTO%TYPE,
    NR_CPF           PESSOA_FISICA.NR_CPF%TYPE
  );


CREATE OR REPLACE FUNCTION possui_dados_diferente_wspf (CD_PESSOA_FISICA_P text, NR_SEQUENCIA_P bigint, IE_TIPO_VERIFICACAO_P text DEFAULT 'B') RETURNS varchar AS $body$
DECLARE

/*
  - IE_TIPO_VERIFICACAO_P
  * B (Base) - Valida CPF, nome e data de nascimento
    Retorno se possui diferenca: 'S' ou 'N'
  * D (Detalhada) - Valida CPF, nome e data de nascimento
    Retorno:
      'N' (Nao possui diferenca)
      'C' (CPF diferente)
      'E' (Somente nome diferente)
      'D' (Somente data nascimento diferente)
      'S' (Nome e data nascimento diferente)
*/
  TB_CAMPOS_PF     TP_CAMPOS_VERIFICAR;
  TB_CAMPOS_PF_JST TP_CAMPOS_VERIFICAR;

  QTD_W            bigint;
  RETORNO_W        varchar(2) := 'S';
  X RECORD;

BEGIN
  IF (coalesce(IE_TIPO_VERIFICACAO_P, 'B') = 'B') THEN
    FOR X IN (WITH RECURSIVE cte AS (
SELECT trim(both REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL)) CD_PESSOA_FISICA

               WHERE trim(both REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL)) IS NOT NULL
             (REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL) IS NOT NULL AND (REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL))::text <> '')  UNION ALL
SELECT trim(both REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL)) CD_PESSOA_FISICA
                
               WHERE trim(both REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL)) IS NOT NULL
             (REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL) IS NOT NULL AND (REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
) LOOP
      SELECT COUNT(*)
        INTO STRICT QTD_W
        FROM (SELECT UPPER(PF.NM_PESSOA_FISICA) NM_PESSOA_FISICA,
                     PF.DT_NASCIMENTO,
                     PF.NR_CPF
                FROM PESSOA_FISICA PF
               WHERE PF.CD_PESSOA_FISICA = X.CD_PESSOA_FISICA
              EXCEPT
              SELECT UPPER(PFJ.NM_PESSOA_FISICA) NM_PESSOA_FISICA,
                     TO_DATE(PFJ.DT_NASCIMENTO, 'DD/MM/YYYY') DT_NASCIMENTO,
                     PFJ.NR_CPF
                FROM PESSOA_FISICA_JST_V PFJ
               WHERE PFJ.NR_SEQUENCIA_T = NR_SEQUENCIA_P) alias15;

      IF (QTD_W = 0) THEN
         RETORNO_W := 'N';

         EXIT;
      END IF;
    END LOOP;
  ELSIF (coalesce(IE_TIPO_VERIFICACAO_P, 'B') = 'D') THEN
    RETORNO_W := 'XZ';

    SELECT UPPER(PFJ.NM_PESSOA_FISICA) NM_PESSOA_FISICA,
           TO_DATE(PFJ.DT_NASCIMENTO, 'DD/MM/YYYY') DT_NASCIMENTO,
           PFJ.NR_CPF
      INTO STRICT TB_CAMPOS_PF_JST
      FROM PESSOA_FISICA_JST_V PFJ
     WHERE PFJ.NR_SEQUENCIA_T = NR_SEQUENCIA_P;

    FOR X IN (WITH RECURSIVE cte AS (
SELECT trim(both REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL)) CD_PESSOA_FISICA

               WHERE trim(both REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL)) IS NOT NULL
             (REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL) IS NOT NULL AND (REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL))::text <> '')  UNION ALL
SELECT trim(both REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL)) CD_PESSOA_FISICA
                
               WHERE trim(both REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL)) IS NOT NULL
             (REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL) IS NOT NULL AND (REGEXP_SUBSTR(CD_PESSOA_FISICA_P, '[^;|,]+', 1, LEVEL))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
) LOOP
      SELECT UPPER(PF.NM_PESSOA_FISICA) NM_PESSOA_FISICA,
             PF.DT_NASCIMENTO,
             PF.NR_CPF
        INTO STRICT TB_CAMPOS_PF
        FROM PESSOA_FISICA PF
       WHERE PF.CD_PESSOA_FISICA = X.CD_PESSOA_FISICA;

      IF (TB_CAMPOS_PF.NR_CPF = TB_CAMPOS_PF_JST.NR_CPF
      AND trim(both TB_CAMPOS_PF.NM_PESSOA_FISICA) = trim(both TB_CAMPOS_PF_JST.NM_PESSOA_FISICA)
      AND TO_CHAR(TB_CAMPOS_PF.DT_NASCIMENTO, 'DD/MM/YYYY') = TO_CHAR(TB_CAMPOS_PF_JST.DT_NASCIMENTO, 'DD/MM/YYYY')) THEN
        RETORNO_W := 'N';/*Nao possui diferenca*/
      ELSIF (RETORNO_W NOT IN ('N'/*Nao possui diferenca*/, 'E'/*Somente nome diferente*/, 'D'/*Somente data nascimento diferente*/, 'S'/*Nome e data nascimento diferente*/
)
      AND TB_CAMPOS_PF.NR_CPF <> TB_CAMPOS_PF_JST.NR_CPF) THEN
        RETORNO_W := 'C';/*CPF diferente*/
      ELSIF (RETORNO_W NOT IN ('N'/*Nao possui diferenca*/, 'E'/*Somente nome diferente*/
)
         AND TB_CAMPOS_PF.NR_CPF = TB_CAMPOS_PF_JST.NR_CPF
         AND trim(both TB_CAMPOS_PF.NM_PESSOA_FISICA) <> trim(both TB_CAMPOS_PF_JST.NM_PESSOA_FISICA)
         AND TO_CHAR(TB_CAMPOS_PF.DT_NASCIMENTO, 'DD/MM/YYYY') <> TO_CHAR(TB_CAMPOS_PF_JST.DT_NASCIMENTO, 'DD/MM/YYYY')) THEN
        RETORNO_W := 'S';/*Nome e data nascimento diferente*/
      ELSIF (RETORNO_W NOT IN ('N'/*Nao possui diferenca*/
)
         AND TB_CAMPOS_PF.NR_CPF = TB_CAMPOS_PF_JST.NR_CPF
         AND trim(both TB_CAMPOS_PF.NM_PESSOA_FISICA) <> trim(both TB_CAMPOS_PF_JST.NM_PESSOA_FISICA)) THEN
        RETORNO_W := 'E';/*Somente nome diferente*/
      ELSIF (RETORNO_W NOT IN ('N'/*Nao possui diferenca*/, 'E'/*Somente nome diferente*/
)
         AND TB_CAMPOS_PF.NR_CPF = TB_CAMPOS_PF_JST.NR_CPF
         AND TO_CHAR(TB_CAMPOS_PF.DT_NASCIMENTO, 'DD/MM/YYYY') <> TO_CHAR(TB_CAMPOS_PF_JST.DT_NASCIMENTO, 'DD/MM/YYYY')) THEN
        RETORNO_W := 'D';/*Somente data nascimento diferente*/
      END IF;

      IF (RETORNO_W = 'N') THEN
         EXIT;
      END IF;
    END LOOP;

    IF (RETORNO_W = 'XZ') THEN
      RETORNO_W := 'N';
    END IF;
  END IF;

  RETURN RETORNO_W;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION possui_dados_diferente_wspf (CD_PESSOA_FISICA_P text, NR_SEQUENCIA_P bigint, IE_TIPO_VERIFICACAO_P text DEFAULT 'B') FROM PUBLIC;

