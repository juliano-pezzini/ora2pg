-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pfcs_get_indicator_rule ( nr_seq_indicator_p bigint, vl_indicator_p bigint, cd_establishment_p bigint, ie_type_p text, ds_column_p text default null) RETURNS varchar AS $body$
DECLARE


/*
    nr_seq_indicator_p: indicator to be analyzed by any rule type (ie_type_p)
    vl_indicator_p: value to be analyzed to apply the color rule
    ie_type_p:
        -- COLOR: will return the color based on the color rule for the specified indicator
        -- VISIBLE: will return the indicator visibility for the left card (WChart) items (except on module/function main screen left card)
        -- VISIBLE_MOD: will return the indicator visibility for the module/function left card items
        -- ORDER: will return the order of the items being showed on left card (WChart)
        -- SPACE: will return the spacing rule for some specific screens (if there is a space or not between two indicators)
        -- SHOW_POPOVER: will return if the TRS popover must be displayed or not
    ds_column_p: used to inform which columm the color will be applied to (used on WTableChart. Example: thirdcell)
*/
nr_seq_rule_w       pfcs_indicator_rule.nr_sequencia%type;
nr_seq_apresent_w   pfcs_indicator_rule.nr_seq_apresent%type;
ie_visible_w        pfcs_indicator_rule.ie_visible%type;
ie_blank_space_w    pfcs_indicator_rule.ie_blank_space%type;
qt_initial_target_w pfcs_indicator_target.qt_initial_target%type;
qt_final_target_w   pfcs_indicator_target.qt_final_target%type;
ie_time_w           pfcs_indicator.ie_time%type;
ie_situacao_w       pfcs_indicator.ie_situacao%type;
cd_profile_w        pfcs_indicator_rule.cd_perfil%type;

ds_cor_html_w       PFCS_PCK_SUBTYPES.VARCHAR_50_T;
ds_return_w       	PFCS_PCK_SUBTYPES.VARCHAR_255_T;
qt_rule_w           PFCS_PCK_SUBTYPES.NUMBER_5_T;



BEGIN
    select max(nr_sequencia),
        coalesce(max(nr_seq_apresent),0),
        coalesce(max(ie_visible),PFCS_PCK_CONSTANTS.IE_YES_BR),
        coalesce(max(ie_blank_space),PFCS_PCK_CONSTANTS.IE_NO),
        coalesce(max(ie_time),PFCS_PCK_CONSTANTS.IE_NO),
        max(cd_profile),
        coalesce(max(ie_situacao),PFCS_PCK_CONSTANTS.IE_ACTIVE)
    into STRICT nr_seq_rule_w,
        nr_seq_apresent_w,
        ie_visible_w,
        ie_blank_space_w,
        ie_time_w,
        cd_profile_w,
        ie_situacao_w
    from (
        SELECT
            a.nr_sequencia,
            a.nr_seq_apresent nr_seq_apresent,
            a.ie_visible ie_visible,
            a.ie_blank_space ie_blank_space,
            b.ie_time,
            a.cd_perfil cd_profile,
            b.ie_situacao
    from pfcs_indicator_rule a,
        pfcs_indicator b
    where a.nr_seq_indicator = nr_seq_indicator_p
        and a.nr_seq_indicator = b.nr_sequencia
        and (cd_perfil = obter_perfil_ativo or coalesce(cd_perfil::text, '') = '')
        and ( ((cd_establishment_p IS NOT NULL AND cd_establishment_p::text <> '') and (coalesce(a.cd_estabelecimento, cd_establishment_p) = coalesce(cd_establishment_p, a.cd_estabelecimento)))
                or ((coalesce(cd_establishment_p::text, '') = '') and (coalesce(a.cd_estabelecimento::text, '') = '')) )
		and (ie_type_p <> PFCS_PCK_CONSTANTS.CD_COLOR or coalesce(b.ie_target, PFCS_PCK_CONSTANTS.IE_YES_BR) <> PFCS_PCK_CONSTANTS.IE_NO or b.ie_situacao = PFCS_PCK_CONSTANTS.IE_DEVELOPMENT)
     	order by a.cd_perfil, a.cd_estabelecimento asc) tab LIMIT 1;

    if (ie_type_p = PFCS_PCK_CONSTANTS.CD_COLOR) then
        if (ie_time_w = PFCS_PCK_CONSTANTS.IE_NO) then
            select  max(b.ds_cor_html)
            into STRICT    ds_cor_html_w
            from    pfcs_indicator_target b
            where   b.nr_seq_rule = nr_seq_rule_w
            and     vl_indicator_p between coalesce(b.qt_initial_target,vl_indicator_p) and coalesce(b.qt_final_target,vl_indicator_p);
        else
            select  max(b.ds_cor_html)
            into STRICT    ds_cor_html_w
            from    pfcs_indicator_target b
            where   b.nr_seq_rule = nr_seq_rule_w
            and     vl_indicator_p between coalesce(to_char(b.hr_initial_target, 'hh24Mi'),to_char(vl_indicator_p)) and coalesce(to_char(b.hr_final_target, 'hh24Mi'),to_char(vl_indicator_p));
        end if;

        if (coalesce(ds_cor_html_w::text, '') = '') then
            select  count(1)
            into STRICT    qt_rule_w
            from    pfcs_indicator_target b
            where   b.nr_seq_rule = nr_seq_rule_w;

            if (qt_rule_w = 0) then
                select  max(qt_initial_target),
                        max(qt_final_target)
                into STRICT    qt_initial_target_w,
                        qt_final_target_w
                from    pfcs_indicator_target_def
                where   nr_seq_indicator    = nr_seq_indicator_p;

                if (qt_initial_target_w < qt_final_target_w) then
                    if (vl_indicator_p between qt_initial_target_w and qt_final_target_w) then
                        ds_cor_html_w := PFCS_PCK_CONSTANTS.CD_COLOR_YELLOW;
                    elsif (vl_indicator_p > qt_final_target_w) then
                        ds_cor_html_w := PFCS_PCK_CONSTANTS.CD_COLOR_RED;
                    end if;
                else -- REVERSE
                    if (vl_indicator_p < qt_final_target_w) then
                        ds_cor_html_w := PFCS_PCK_CONSTANTS.CD_COLOR_RED;
                    elsif (vl_indicator_p between qt_final_target_w and qt_initial_target_w) then
                        ds_cor_html_w := PFCS_PCK_CONSTANTS.CD_COLOR_YELLOW;
                    end if;
                end if;
            end if;

            select  max(ie_situacao)
            into STRICT    ie_situacao_w
            from    pfcs_indicator
            where   nr_sequencia = nr_seq_indicator_p;

            if (ie_situacao_w = PFCS_PCK_CONSTANTS.IE_DEVELOPMENT) then
                ds_cor_html_w := PFCS_PCK_CONSTANTS.CD_COLOR_IN_DEVELOPMENT;
            end if;
        end if;

        if (ds_cor_html_w IS NOT NULL AND ds_cor_html_w::text <> '' AND ds_column_p IS NOT NULL AND ds_column_p::text <> '') then
            ds_cor_html_w := trim(both ds_column_p || ':' || ds_cor_html_w);
        end if;

		ds_return_w:= ds_cor_html_w;

    elsif (ie_type_p = PFCS_PCK_CONSTANTS.CD_VISIBLE) then
        if (ie_situacao_w = PFCS_PCK_CONSTANTS.IE_ACTIVE) then
            ds_return_w:= ie_visible_w;
        else
            ds_return_w := PFCS_PCK_CONSTANTS.IE_NO;
        end if;

    elsif (ie_type_p = PFCS_PCK_CONSTANTS.CD_VISIBLE_MOD) then
        select coalesce(max(ie_left_card_main), PFCS_PCK_CONSTANTS.IE_NO)
        into STRICT ie_visible_w
        from pfcs_indicator
            where nr_sequencia = nr_seq_indicator_p;

		ds_return_w:= ie_visible_w;

    elsif (ie_type_p = PFCS_PCK_CONSTANTS.CD_ORDER) then
		ds_return_w:= coalesce(nr_seq_apresent_w,0);

    elsif (ie_type_p = PFCS_PCK_CONSTANTS.CD_SPACE) then
		ds_return_w:= ie_blank_space_w;

    elsif (ie_type_p = PFCS_PCK_CONSTANTS.CD_SHOW_POPOVER) then
		select  max(QT_INITIAL_TARGET)
		into STRICT    qt_initial_target_w
		from    pfcs_indicator_target
		where   nr_seq_rule = nr_seq_rule_w;

		if (coalesce(qt_initial_target_w::text, '') = '') then
			select  max(QT_INITIAL_TARGET)
			into STRICT    qt_initial_target_w
			from    pfcs_indicator_target_def
			where   nr_seq_indicator = nr_seq_indicator_p;
		end if;

		ds_return_w:= PFCS_PCK_CONSTANTS.IE_NO;
        if (vl_indicator_p >= coalesce(qt_initial_target_w, vl_indicator_p)) then
            ds_return_w:= PFCS_PCK_CONSTANTS.IE_YES_BR;
        end if;

    elsif (ie_type_p = PFCS_PCK_CONSTANTS.CD_INITIAL) then
        select  max(QT_INITIAL_TARGET)
        into STRICT    qt_initial_target_w
        from    pfcs_indicator_target
        where   nr_seq_rule = nr_seq_rule_w;

        if (coalesce(qt_initial_target_w::text, '') = '') then
            select  max(QT_INITIAL_TARGET)
            into STRICT    qt_initial_target_w
            from    pfcs_indicator_target_def
            where   nr_seq_indicator = nr_seq_indicator_p;
        end if;
        ds_return_w:= qt_initial_target_w;

    elsif (ie_type_p = PFCS_PCK_CONSTANTS.CD_FINAL) then
        select  max(qt_final_target)
        into STRICT    qt_final_target_w
        from    pfcs_indicator_target
        where   nr_seq_rule = nr_seq_rule_w;

        if (coalesce(qt_final_target_w::text, '') = '') then
            select  max(qt_final_target)
            into STRICT    qt_final_target_w
            from    pfcs_indicator_target_def
            where   nr_seq_indicator = nr_seq_indicator_p;
        end if;
        ds_return_w:= qt_final_target_w;

    end if;

    return ds_return_w;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pfcs_get_indicator_rule ( nr_seq_indicator_p bigint, vl_indicator_p bigint, cd_establishment_p bigint, ie_type_p text, ds_column_p text default null) FROM PUBLIC;

