-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION consiste_lanc_part_cir_sus (nr_cirurgia_p bigint) RETURNS varchar AS $body$
DECLARE



ie_consiste_w			varchar(1) 	:= 'S';
ds_consistencia_w		varchar(2000)	:= null;
cd_convenio_w			bigint;
nr_atendimento_w		bigint;
ie_tipo_convenio_w		smallint;
ie_ignora_participou_sus_w	varchar(1);
nr_sequencia_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_tipo_atendimento_w		smallint;
qt_partic_w			bigint;
cd_estabelecimento_w		smallint;
dt_procedimento_w		procedimento_paciente.dt_procedimento%type;	
 					
c01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		dt_procedimento
	from	procedimento_paciente
	where	nr_cirurgia 	= nr_cirurgia_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	ie_origem_proced = 7;
					

BEGIN
select	max(cd_convenio),
	max(nr_atendimento)
into STRICT	cd_convenio_w,
	nr_atendimento_w
from 	cirurgia
where	nr_cirurgia = nr_cirurgia_p;

if (coalesce(cd_convenio_w::text, '') = '') and (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
	select	max(cd_convenio)
	into STRICT	cd_convenio_w
	from 	atend_categoria_convenio
	where	nr_atendimento = nr_atendimento_w;
end if;	

select	max(ie_tipo_convenio)
into STRICT	ie_tipo_convenio_w
from	convenio
where	cd_convenio = cd_convenio_w;

ie_ignora_participou_sus_w	:= coalesce(sus_obter_parametro_aih('IE_IGNORA_PARTICIPOU_SUS', cd_estabelecimento_w),'N');

if (ie_tipo_convenio_w = 3) then
	open c01;
	loop
	fetch c01 into
		nr_sequencia_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		dt_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		ie_tipo_atendimento_w	:= obter_tipo_atendimento(nr_atendimento_w);
		
		begin
		select	count(*)
		into STRICT	qt_partic_w
		from	procedimento_participante
		where	nr_sequencia 	= nr_sequencia_w
		and	sus_obter_indicador_equipe(ie_funcao)	= 6
		and	(((coalesce(ie_participou_sus,'S')	= 'S') and (ie_ignora_participou_sus_w = 'N')) or (ie_ignora_participou_sus_w = 'S'));
		exception
			when others then
				qt_partic_w	:= 0;
		end;

		if (ie_tipo_atendimento_w	= 1) and (sus_validar_regra(3, cd_procedimento_w, ie_origem_proced_w,dt_procedimento_w) > 0) and (sus_obter_se_detalhe_proc(cd_procedimento_w,ie_origem_proced_w,'001',dt_procedimento_w) > 0) and (qt_partic_w		= 0) then
			ds_consistencia_w	:= 	substr(wheb_mensagem_pck.get_texto(304194,'CD_PROCEDIMENTO_P='|| cd_procedimento_w ||
											';DS_PROCEDIMENTO_P='|| Obter_Desc_Procedimento(cd_procedimento_w,ie_origem_proced_w) ),1,2000);	
							/*Não há participante anestesista lançado para o procedimento do SUS.
							Procedimento: #@CD_PROCEDIMENTO_P#@ - #@DS_PROCEDIMENTO_P#@
							Parâmetro [428].*/
		else
			ie_consiste_w 		:= 	'N'; -- Há algum participante anestesista lançado em um procedimento SUS. Neste caso, não irá consistir.
		end if;
		end;
	end loop;
	close c01;
end if;	

if (ie_consiste_w = 'S') and (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
	return	substr(ds_consistencia_w,1,2000);
else
	return	null;
end if;	

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION consiste_lanc_part_cir_sus (nr_cirurgia_p bigint) FROM PUBLIC;

