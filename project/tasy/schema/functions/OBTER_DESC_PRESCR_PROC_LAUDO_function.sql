-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_desc_prescr_proc_laudo ( cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, ie_lado_p text, nr_sequencia_p bigint) RETURNS varchar AS $body$
DECLARE


  ds_procedimento_w         varchar(255);
  cd_setor_w                integer;
  cd_convenio_w             integer;
  qt_reg_w                  integer;
  cd_grupo_proc_w           bigint;
  cd_especialidade_w        integer;
  cd_area_procedimento_w    integer;
  ie_regra_w                varchar(1);
  cd_estabelecimento_w      smallint;
  nr_seq_conversao_w        bigint;
  cd_grupo_w                varchar(10) := '';
  cd_item_convenio_w        varchar(20) := '';
  ie_tipo_atendimento_w     smallint;
  nr_seq_atepacu_w          bigint;
  cd_tipo_acomodacao_w      bigint;
  nr_seq_proc_interno_w     bigint;
  dt_procedimento_w         timestamp;
  cd_plano_w                varchar(10);
  varexibelado_w            varchar(1);
  varexibetopografia_w      varchar(1);
  nr_seq_topografia_w       smallint;
  ie_lado_w                 varchar(5);
  nr_seq_conversao_valido_w varchar(1);

  c01 CURSOR FOR
    SELECT ie_regra
    FROM   regra_titulo_laudo
    WHERE  coalesce(cd_grupo_proc, coalesce(cd_grupo_proc_w, 0)) = coalesce(cd_grupo_proc_w, 0)
    AND coalesce(cd_especialidade, coalesce(cd_especialidade_w, 0)) = coalesce(cd_especialidade_w, 0)
    AND coalesce(cd_area_procedimento, coalesce(cd_area_procedimento_w, 0)) = coalesce(cd_area_procedimento_w, 0)
    AND coalesce(cd_estabelecimento, coalesce(cd_estabelecimento_w, 0)) = coalesce(cd_estabelecimento_w, 0)
    AND coalesce(cd_setor_atendimento, coalesce(cd_setor_w, 0)) = coalesce(cd_setor_w, 0)
    AND coalesce(cd_convenio, coalesce(cd_convenio_w, 0)) = coalesce(cd_convenio_w, 0)
    AND coalesce(nr_seq_proc_interno, coalesce(nr_seq_proc_interno_p, 0)) = coalesce(nr_seq_proc_interno_p, 0)
    AND coalesce(cd_procedimento, coalesce(cd_procedimento_p, 0)) = coalesce(cd_procedimento_p, 0)
    ORDER  BY coalesce(cd_procedimento, 0),
              coalesce(cd_grupo_proc, 0),
              coalesce(cd_especialidade, 0),
              coalesce(cd_area_procedimento, 0),
              coalesce(cd_setor_atendimento, 0),
              coalesce(cd_convenio, 0);

BEGIN
    SELECT Count(*)
    INTO STRICT   qt_reg_w
    FROM   regra_titulo_laudo;

    IF ( qt_reg_w > 0 ) THEN
      BEGIN
          SELECT cd_setor_atendimento,
                 Obter_convenio_atendimento(nr_atendimento),
                 Obter_estab_atend(nr_atendimento),
                 Obter_tipo_atendimento(nr_atendimento),
                 nr_seq_proc_interno,
                 dt_procedimento,
                 Obter_dados_categ_conv(nr_atendimento, 'P')
          INTO STRICT	cd_setor_w,
				cd_convenio_w,
				cd_estabelecimento_w,
                ie_tipo_atendimento_w,
				nr_seq_proc_interno_w,
				dt_procedimento_w,
				cd_plano_w
          FROM	procedimento_paciente
          WHERE nr_sequencia = nr_sequencia_p;

          SELECT cd_grupo_proc,
                 cd_especialidade,
                 cd_area_procedimento
          INTO STRICT	cd_grupo_proc_w,
				cd_especialidade_w,
				cd_area_procedimento_w
          FROM	estrutura_procedimento_v
          WHERE cd_procedimento = cd_procedimento_p
          AND ie_origem_proced = ie_origem_proced_p;

          OPEN c01;

          LOOP
              FETCH c01 INTO ie_regra_w;

              EXIT WHEN NOT FOUND; /* apply on c01 */
          END LOOP;

          CLOSE c01;

          IF ( ie_regra_w = 'T' ) THEN
            SELECT Obter_descricao_procedimento(cd_procedimento_p, ie_origem_proced_p)
            INTO STRICT   ds_procedimento_w
;
          ELSIF ( ie_regra_w = 'I' ) THEN
            IF ( coalesce(nr_seq_proc_interno_p, 0) > 0 ) THEN
              SELECT coalesce(ds_laudo, ds_proc_exame)
              INTO STRICT   ds_procedimento_w
              FROM   proc_interno
              WHERE  nr_sequencia = nr_seq_proc_interno_p;
            ELSE
              SELECT Obter_descricao_procedimento(cd_procedimento_p, ie_origem_proced_p)
              INTO STRICT   ds_procedimento_w
;
            END IF;
          ELSIF ( ie_regra_w = 'C' ) THEN
            SELECT * FROM Converte_proc_convenio(cd_estabelecimento_w, cd_convenio_w, NULL, cd_procedimento_p, ie_origem_proced_p, NULL, NULL, ie_tipo_atendimento_w, dt_procedimento_w, cd_item_convenio_w, cd_grupo_w, nr_seq_conversao_w, cd_setor_w, NULL, nr_seq_proc_interno_w, 'A', cd_plano_w, NULL, 0, NULL, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL) INTO STRICT cd_item_convenio_w, cd_grupo_w, nr_seq_conversao_w;

            SELECT CASE WHEN coalesce(nr_seq_conversao_w, 0)=0 THEN  'N'  ELSE 'S' END
            INTO STRICT   nr_seq_conversao_valido_w
;

            IF ( nr_seq_conversao_valido_w = 'S' ) THEN
              SELECT coalesce(ds_proc_convenio, Obter_descricao_procedimento(cd_procedimento_p, ie_origem_proced_p))
              INTO STRICT   ds_procedimento_w
              FROM   conversao_proc_convenio
              WHERE  nr_sequencia = nr_seq_conversao_w;
            ELSE
              SELECT Obter_descricao_procedimento(cd_procedimento_p, ie_origem_proced_p)
              INTO STRICT   ds_procedimento_w
;
            END IF;
          ELSE
            SELECT Obter_descricao_procedimento(cd_procedimento_p, ie_origem_proced_p)
            INTO STRICT   ds_procedimento_w
;
          END IF;
      END;
    ELSE
      BEGIN
          SELECT Obter_descricao_procedimento(cd_procedimento_p, ie_origem_proced_p)
          INTO STRICT   ds_procedimento_w
;

          IF ( coalesce(nr_seq_proc_interno_p, 0) > 0 ) THEN
            SELECT coalesce(ds_laudo, ds_proc_exame)
            INTO STRICT   ds_procedimento_w
            FROM   proc_interno
            WHERE  nr_sequencia = nr_seq_proc_interno_p;
          END IF;
      END;
    END IF;

    varexibelado_w := Obter_param_usuario(28, 170, wheb_usuario_pck.get_cd_perfil, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, varexibelado_w);
    varexibetopografia_w := Obter_param_usuario(28, 308, wheb_usuario_pck.get_cd_perfil, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, varexibetopografia_w);

    SELECT nr_seq_topografia
    INTO STRICT   nr_seq_topografia_w
    FROM   procedimento_paciente proc_pac
    JOIN prescr_procedimento prescr_proc ON proc_pac.nr_prescricao = prescr_proc.nr_prescricao AND proc_pac.nr_sequencia_prescricao = prescr_proc.nr_sequencia
    WHERE  proc_pac.nr_sequencia = nr_sequencia_p;

    IF (nr_seq_topografia_w IS NOT NULL AND nr_seq_topografia_w::text <> '')
      AND ( varexibetopografia_w = 'S' ) THEN
    ds_procedimento_w := Substr(ds_procedimento_w || ' ' || Obter_desc_topografia_dor(nr_seq_topografia_w), 1, 255);
    END IF;

    IF (ie_lado_p IS NOT NULL AND ie_lado_p::text <> '')
       AND ( varexibelado_w = 'S' ) THEN
      SELECT CASE WHEN ie_lado_p='N' THEN  '' WHEN ie_lado_p='A' THEN  ' D/E'  ELSE ' ' || ie_lado_p END
      INTO STRICT   ie_lado_w
;

      ds_procedimento_w := Substr(ds_procedimento_w || ie_lado_w, 1, 255);
    END IF;

    RETURN ds_procedimento_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_desc_prescr_proc_laudo ( cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, ie_lado_p text, nr_sequencia_p bigint) FROM PUBLIC;

