-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_regra_result_sv (nr_seq_regra_p bigint, nr_seq_prescr_p bigint) RETURNS varchar AS $body$
DECLARE


ie_exibe_w		varchar(1):= 'N';
qt_temperatura_w	double precision;
qt_freq_cardiaca_w 	double precision;
qt_freq_resp_w 		double precision;
cd_pessoa_fisica_w	varchar(10);
qt_regra_w		bigint;
qt_min_considera_sv_w	bigint;
qt_pa_diastolica_w	double precision;
qt_pa_sistolica_w	double precision;
qt_pam_w		double precision;
qt_escala_dor_w		double precision;
qt_idade_dias_w		bigint;
qt_idade_anos_w		bigint;
qt_saturacao_02_w		smallint;
qt_glicemia_capilar_w		double precision;
ie_nivel_consciencia_w	varchar(15);
cd_escala_dor_w		varchar(5);


BEGIN

qt_min_considera_sv_w := Obter_Param_Usuario(9037, 3, wheb_usuario_pck.get_cd_perfil, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, qt_min_considera_sv_w);

select	max(cd_pessoa_fisica)
into STRICT	cd_pessoa_fisica_w
from	pe_prescricao
where	nr_sequencia = nr_seq_prescr_p;

if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (coalesce(qt_min_considera_sv_w,0) > 0) then
	select	count(*)
	into STRICT	qt_regra_w
	from	pe_regra_resultado
	where	nr_seq_result = nr_seq_regra_p;

	if (qt_regra_w > 0) then
		qt_temperatura_w 	:= coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'Temp',null),0);
		qt_freq_cardiaca_w 	:= coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'FC',null),0);
		qt_freq_resp_w 		:= coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'FR',null),0);
		qt_pa_diastolica_w	:= coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'PAMIN',null),0);
		qt_pa_sistolica_w	:= coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'PAMAX',null),0);
		qt_pam_w 		:= coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'PAM',null),0);
		SELECT * FROM obter_escala_sv_tempo(cd_pessoa_fisica_w, qt_min_considera_sv_w, cd_escala_dor_w, qt_escala_dor_w) INTO STRICT cd_escala_dor_w, qt_escala_dor_w;
		qt_saturacao_02_w	:= coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'SAT',null),0);
		qt_glicemia_capilar_w	:= coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'GLIC',null),0);
		ie_nivel_consciencia_w	:= coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'NIVCON',null),'');

		if (qt_temperatura_w <> 0) or (qt_freq_cardiaca_w <> 0) or (qt_freq_resp_w	<> 0) or (qt_pa_diastolica_w <> 0) or (qt_pa_sistolica_w <> 0) or (qt_pam_w <> 0) or (coalesce(qt_escala_dor_w,0) <> 0) or (qt_saturacao_02_w <> 0) or (qt_glicemia_capilar_w <> 0) or (ie_nivel_consciencia_w <> '') then

			qt_idade_dias_w := coalesce(trunc(Obter_Idade_PF(cd_pessoa_fisica_w,clock_timestamp(),'DIA')),0);
			qt_idade_anos_w	:= coalesce(trunc(Obter_Idade_PF(cd_pessoa_fisica_w,clock_timestamp(),'A')),0);

			select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_exibe_w
			from	pe_regra_resultado
			where	nr_seq_result 		= nr_seq_regra_p
			and (qt_idade_dias_w	between coalesce(qt_idade_min_dias,0)	and coalesce(qt_idade_max_dias,999999999))
			and (qt_idade_anos_w	between coalesce(qt_idade_min,0)		and coalesce(qt_idade_max,999))
			and (qt_temperatura_w 	between coalesce(qt_temp_min,0) 		and coalesce(qt_temp_max,999))
			and (qt_freq_cardiaca_w 	between coalesce(qt_freq_cardiaca_min,0) 	and coalesce(qt_freq_cardiaca_max,999))
			and (qt_freq_resp_w 	between coalesce(qt_freq_resp_min,0) 	and coalesce(qt_freq_resp_max,999))
			and (qt_pa_diastolica_w 	between coalesce(qt_pa_diastolica_min,0) 	and coalesce(qt_pa_diastolica_max,999))
			and (qt_pa_sistolica_w 	between coalesce(qt_pa_sistolica_min,0) 	and coalesce(qt_pa_sistolica_max,999))
			and (qt_pam_w 		between coalesce(qt_pam_min,0) 		and coalesce(qt_pam_max,999))
			and (qt_saturacao_02_w	between coalesce(QT_SATURACAO_O2_MIN,0) and coalesce(QT_SATURACAO_O2_MAX,9999999999))
			and (qt_glicemia_capilar_w	between coalesce(QT_GLICEMIA_CAPILAR_MIN,0) and coalesce(QT_GLICEMIA_CAPILAR_MAX,999))
			and	((ie_nivel_consciencia_w = ie_nivel_consciencia) or (coalesce(ie_nivel_consciencia_w::text, '') = ''))
			and	((coalesce(cd_escala_dor::text, '') = '') or (cd_escala_dor = cd_escala_dor_w and coalesce(obter_sinal_vital_tempo(cd_pessoa_fisica_w,qt_min_considera_sv_w,'ESCDOR',cd_escala_dor),0) between coalesce(qt_escala_dor_min,0) and coalesce(qt_escala_dor_max,999)));
		end if;
	end if;
end if;

return	ie_exibe_w;

end	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_regra_result_sv (nr_seq_regra_p bigint, nr_seq_prescr_p bigint) FROM PUBLIC;

