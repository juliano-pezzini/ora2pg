-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_dt_fim_enteral_md ( dt_inicio_p timestamp, nr_ocorrencia_p bigint, ie_continuo_p text, qt_tempo_aplicacao_p text, qt_tempo_apli_w_p bigint, hr_inicio_pausa_p text, dt_fim_p timestamp, ie_param_CPOE_24_p text ) RETURNS timestamp AS $body$
DECLARE


  nr_ocorrencia_w      double precision := coalesce(nr_ocorrencia_p, 0);
  qt_tempo_etapa_w     double precision := 0;
  dt_hora_pausa_w      timestamp;
  qt_tempo_aplicacao_w double precision := coalesce(qt_tempo_apli_w_p, 0);
  dt_horario_fim_w     timestamp;
  dt_fim_ret_w         timestamp;
  qt_duracao_aux_w     double precision;
  qt_tempo_pausa_w     double precision;
  qt_tempo_pausa_ww    double precision;
  dt_fim_w             timestamp := dt_fim_p;
  dt_horario_w         timestamp := dt_inicio_p;
  qt_tempo_etapa_ger_w double precision := 0;
  ie_possivel_calc_w   boolean;


BEGIN
  if (dt_inicio_p IS NOT NULL AND dt_inicio_p::text <> '') then

    if (ie_continuo_p = 'S') then
      qt_tempo_etapa_w := 0;
    else
      /*** Medical Device ***/

      qt_tempo_etapa_w := obter_tempo_duracao_md(qt_tempo_aplicacao_p, 0);
    end if;	

    if (qt_tempo_etapa_w = 0) then
      qt_tempo_etapa_w := qt_tempo_aplicacao_w;
    end if;

    if (hr_inicio_pausa_p IS NOT NULL AND hr_inicio_pausa_p::text <> '') then
      dt_hora_pausa_w := to_date(to_char(dt_inicio_p, 'dd/mm/yyyy') || hr_inicio_pausa_p || ':00', 'dd/mm/yyyy hh24:mi:ss');
      qt_tempo_pausa_ww := 24 - qt_tempo_etapa_w;
      if (dt_hora_pausa_w < clock_timestamp()) then
        dt_hora_pausa_w := dt_hora_pausa_w + 1;
      end if;
    end if;

    if (ie_continuo_p = 'N') then
      qt_tempo_aplicacao_w := 24;
      qt_tempo_pausa_w := dividir_sem_round_md(qt_tempo_aplicacao_w - (qt_tempo_etapa_w * nr_ocorrencia_w), nr_ocorrencia_w);
      if (qt_tempo_pausa_w < 0) then
        qt_tempo_pausa_w := 1;
      end if;
    else
      qt_tempo_pausa_w := 0;
    end if;

    if (coalesce(qt_tempo_etapa_w, 0) <= 0) then
      nr_ocorrencia_w := 0;
      ie_possivel_calc_w := false;
    else
      ie_possivel_calc_w := true;
    end if;

    if (not ie_possivel_calc_w) then
      return dt_fim_ret_w;
    end if;

    if (coalesce(dt_fim_w::text, '') = '') then
      if ((ie_param_CPOE_24_p = 'S') and (ie_continuo_p = 'S') and (qt_tempo_aplicacao_w < 24)) then
        if (hr_inicio_pausa_p IS NOT NULL AND hr_inicio_pausa_p::text <> '') then
          dt_fim_w := dt_inicio_p + 1;
        else
          qt_duracao_aux_w := ceil(dividir_md(24, qt_tempo_aplicacao_w)) * qt_tempo_aplicacao_w;
          dt_fim_w := dt_inicio_p + abs(dividir_sem_round_md(qt_duracao_aux_w, 24));
        end if;
      else
        dt_fim_w := dt_inicio_p + abs(dividir_sem_round_md(qt_tempo_aplicacao_w, 24));
      end if;
    end if;

    if ((dt_fim_w - dt_inicio_p) > 1) and (ie_continuo_p = 'N') then
      dt_fim_w := dt_inicio_p + 1;
    end if;

    if (to_char(dt_fim_w + 1/24/60, 'hh24:mi') = to_char(dt_inicio_p, 'hh24:mi')) then
      dt_fim_w := dt_fim_w + 1/24/60;
    end if;

    nr_ocorrencia_w	:= 0;
    if (dt_hora_pausa_w IS NOT NULL AND dt_hora_pausa_w::text <> '') and (dt_hora_pausa_w > dt_horario_w) and (ie_continuo_p = 'S') then
      while(dt_horario_w < dt_fim_w) loop
        dt_horario_fim_w := dt_horario_w + dividir_sem_round_md(qt_tempo_etapa_w, 24);
        nr_ocorrencia_w := nr_ocorrencia_w + 1;

        if (dt_horario_fim_w > dt_hora_pausa_w) and (dt_hora_pausa_w > dt_horario_w) then
          dt_horario_fim_w := dt_hora_pausa_w;
          dt_fim_w := dt_fim_w + abs(dividir_sem_round_md(qt_tempo_pausa_ww, 24));
    
          /*** Medical Device ***/

          qt_tempo_etapa_ger_w := obter_hora_entre_datas_md(dt_horario_w, dt_hora_pausa_w);

          qt_tempo_etapa_w := qt_tempo_etapa_w - qt_tempo_etapa_ger_w;
          qt_tempo_pausa_w := qt_tempo_pausa_ww;
        end if;

        if (dt_horario_fim_w > dt_fim_w) then
          dt_horario_fim_w := trunc(dt_fim_w, 'mi');
          dt_fim_w := dt_horario_fim_w;
        end if;

        dt_horario_w := dt_horario_fim_w + dividir_sem_round_md(qt_tempo_pausa_w, 24);
        dt_fim_ret_w := dt_horario_fim_w;

        if (nr_ocorrencia_w > 48) then
          return dt_fim_ret_w;
        end if;
      end loop;
    else
      while(dt_horario_w < dt_fim_w) loop
        dt_horario_fim_w := dt_horario_w + dividir_sem_round_md(qt_tempo_etapa_w, 24);
        nr_ocorrencia_w := nr_ocorrencia_w + 1;
      
        if (dt_horario_fim_w > dt_fim_w) then
          dt_horario_fim_w := trunc(dt_fim_w, 'mi');
          dt_fim_w := dt_horario_fim_w;
        end if;

        dt_horario_w := dt_horario_fim_w + dividir_sem_round_md(qt_tempo_pausa_w, 24);
        dt_fim_ret_w := dt_horario_w;

        if (nr_ocorrencia_w > 48) then                  
          return dt_fim_ret_w;
        end if;
      end loop;
    end if;
  end if;
  return dt_fim_ret_w;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_dt_fim_enteral_md ( dt_inicio_p timestamp, nr_ocorrencia_p bigint, ie_continuo_p text, qt_tempo_aplicacao_p text, qt_tempo_apli_w_p bigint, hr_inicio_pausa_p text, dt_fim_p timestamp, ie_param_CPOE_24_p text ) FROM PUBLIC;

