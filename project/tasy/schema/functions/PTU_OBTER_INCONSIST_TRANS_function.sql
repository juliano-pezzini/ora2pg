-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION ptu_obter_inconsist_trans ( nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_consulta_p bigint, cd_transacao_p text, nr_qt_reg_p bigint, nr_seq_pedido_p bigint, cd_servico_p bigint) RETURNS bigint AS $body$
DECLARE


cd_inconsistencia_w		smallint	:= 0;
qt_registro_w			smallint;
nr_seq_inconsist_w		bigint;
count_registro_w		bigint := 1;
ie_tipo_w			varchar(2);
nr_seq_servico_w		bigint := 0;

C01 CURSOR FOR
	SELECT	'P',
		a.nr_sequencia
	from	pls_guia_plano_proc a
	where	a.nr_seq_guia	= nr_seq_guia_p
	and	a.cd_procedimento	= cd_servico_p
	and	exists (	SELECT	1
				from	ptu_intercambio_consist x
				where	x.nr_seq_procedimento	= a.nr_sequencia
				and	x.nr_seq_guia		= nr_seq_guia_p)
	
union

	select	'M',
		a.nr_sequencia
	from	pls_guia_plano_mat a
	where	a.nr_seq_guia	= nr_seq_guia_p
	and	substr(pls_obter_seq_codigo_material(a.nr_seq_material,''),1,255)	= cd_servico_p
	and	exists (	select	1
				from	ptu_intercambio_consist x
				where	x.nr_seq_material	= a.nr_sequencia
				and	x.nr_seq_guia		= nr_seq_guia_p);

C02 CURSOR FOR
	SELECT	distinct(nr_seq_inconsistencia)
	from	ptu_intercambio_consist
	where (nr_seq_guia		= nr_seq_guia_p 	or coalesce(nr_seq_guia_p::text, '') = '')
	and (nr_seq_requisicao	= nr_seq_requisicao_p	or coalesce(nr_seq_requisicao_p::text, '') = '')
	and (nr_seq_procedimento	= nr_seq_servico_w 	or coalesce(nr_seq_servico_w::text, '') = '')
	and (ie_tipo_w		= 'P'			or coalesce(ie_tipo_w::text, '') = '')
	and	cd_transacao		= cd_transacao_p;

C03 CURSOR FOR
	SELECT	distinct(nr_seq_inconsistencia)
	from	ptu_intercambio_consist
	where (nr_seq_guia		= nr_seq_guia_p 	or coalesce(nr_seq_guia_p::text, '') = '')
	and (nr_seq_requisicao	= nr_seq_requisicao_p	or coalesce(nr_seq_requisicao_p::text, '') = '')
	and (nr_seq_material	= nr_seq_servico_w 	or coalesce(nr_seq_servico_w::text, '') = '')
	and (ie_tipo_w		= 'M'			or coalesce(ie_tipo_w::text, '') = '')
	and	cd_transacao		= cd_transacao_p;

C04 CURSOR FOR
	SELECT	distinct(nr_seq_inconsistencia)
	from	ptu_intercambio_consist
	where	((nr_seq_consulta_benef	= nr_seq_consulta_p)
	or (nr_seq_consulta_prest	= nr_seq_consulta_p))
	and	cd_transacao		= cd_transacao_p;

C05 CURSOR FOR
	SELECT	'P',
		a.nr_sequencia
	from	pls_requisicao		b,
		pls_requisicao_proc 	a
	where	a.nr_seq_requisicao	= nr_seq_requisicao_p
	and	a.nr_seq_requisicao	= b.nr_sequencia
	and	((a.cd_procedimento	= cd_servico_p)
	or (exists (	SELECT	1
				from	ptu_pedido_autorizacao	x,
					ptu_pedido_aut_servico	y
				where	x.nr_sequencia		= y.nr_seq_pedido
				and	x.nr_seq_requisicao	= b.nr_sequencia
				and	y.cd_servico_consersao	= a.cd_procedimento
				and	y.cd_servico		= cd_servico_p))
	or (a.cd_procedimento_ptu	= cd_servico_p))
	and	exists (	select	1
				from	ptu_intercambio_consist x
				where	x.nr_seq_procedimento	= a.nr_sequencia
				and	x.nr_seq_requisicao	= nr_seq_requisicao_p)
	and	a.ie_status	in ('N','G')
	and	b.ie_estagio	in (6,7)
	
union

	select	'M',
		a.nr_sequencia
	from	pls_requisicao		b,
		pls_requisicao_mat 	a
	where	a.nr_seq_requisicao	= nr_seq_requisicao_p
	and	a.nr_seq_requisicao	= b.nr_sequencia
	and	((substr(pls_obter_seq_codigo_material(a.nr_seq_material,''),1,255)	= cd_servico_p)
	or (exists (	select	1
				from	ptu_pedido_autorizacao	x,
					ptu_pedido_aut_servico	y
				where	x.nr_sequencia		= y.nr_seq_pedido
				and	x.nr_seq_requisicao	= b.nr_sequencia
				and	y.cd_servico_consersao	= substr(pls_obter_seq_codigo_material(a.nr_seq_material,''),1,255)
				and	y.cd_servico		= cd_servico_p))
	or (a.cd_material_ptu	= cd_servico_p))
	and	exists (	select	1
				from	ptu_intercambio_consist x
				where	x.nr_seq_material	= a.nr_sequencia
				and	x.nr_seq_requisicao	= nr_seq_requisicao_p)
	and	a.ie_status	in ('N','G')
	and	b.ie_estagio	in (6,7);


BEGIN

open C01;
loop
fetch C01 into
	ie_tipo_w,
	nr_seq_servico_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	open C02;
	loop
	fetch C02 into
		nr_seq_inconsist_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		select	count(distinct(nr_seq_inconsistencia))
		into STRICT	qt_registro_w
		from	ptu_intercambio_consist
		where (nr_seq_guia		= nr_seq_guia_p 	or coalesce(nr_seq_guia_p::text, '') = '')
		and (nr_seq_procedimento	= nr_seq_servico_w 	or coalesce(nr_seq_servico_w::text, '') = '')
		and	cd_transacao		= cd_transacao_p
		and	ie_tipo_w		= 'P';

		select	max(cd_inconsistencia)
		into STRICT	cd_inconsistencia_w
		from	ptu_inconsistencia
		where	nr_sequencia	= nr_seq_inconsist_w;

		if (nr_qt_reg_p	<= qt_registro_w) then
			if (count_registro_w  =  nr_qt_reg_p) then
				return	cd_inconsistencia_w;
			else
				count_registro_w := count_registro_w  + 1;
			end if;
		else
			cd_inconsistencia_w	:= 0;
		end if;

		end;
	end loop;
	close C02;

	open C03;
	loop
	fetch C03 into
		nr_seq_inconsist_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		select	count(distinct(nr_seq_inconsistencia))
		into STRICT	qt_registro_w
		from	ptu_intercambio_consist
		where (nr_seq_guia		= nr_seq_guia_p 	or coalesce(nr_seq_guia_p::text, '') = '')
		and (nr_seq_material	= nr_seq_servico_w 	or coalesce(nr_seq_servico_w::text, '') = '')
		and	cd_transacao		= cd_transacao_p
		and	ie_tipo_w		= 'M';

		select	max(cd_inconsistencia)
		into STRICT	cd_inconsistencia_w
		from	ptu_inconsistencia
		where	nr_sequencia	= nr_seq_inconsist_w;

		if (nr_qt_reg_p	<= qt_registro_w) then
			if (count_registro_w  =  nr_qt_reg_p) then
				return	cd_inconsistencia_w;
			else
				count_registro_w := count_registro_w  + 1;
			end if;
		else
			cd_inconsistencia_w	:= 0;
		end if;

		end;
	end loop;
	close C03;

	end;
end loop;
close C01;

open C05;
loop
fetch C05 into
	ie_tipo_w,
	nr_seq_servico_w;
EXIT WHEN NOT FOUND; /* apply on C05 */
	begin

	open C02;
	loop
	fetch C02 into
		nr_seq_inconsist_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		select	count(distinct(nr_seq_inconsistencia))
		into STRICT	qt_registro_w
		from	ptu_intercambio_consist
		where (nr_seq_requisicao	= nr_seq_requisicao_p	or coalesce(nr_seq_requisicao_p::text, '') = '')
		and (nr_seq_procedimento	= nr_seq_servico_w 	or coalesce(nr_seq_servico_w::text, '') = '')
		and	cd_transacao		= cd_transacao_p
		and	ie_tipo_w		= 'P';

		select	max(cd_inconsistencia)
		into STRICT	cd_inconsistencia_w
		from	ptu_inconsistencia
		where	nr_sequencia	= nr_seq_inconsist_w;

		if (nr_qt_reg_p	<= qt_registro_w) then
			if (count_registro_w  =  nr_qt_reg_p) then
				return	cd_inconsistencia_w;
			else
				count_registro_w := count_registro_w  + 1;
			end if;
		else
			cd_inconsistencia_w	:= 0;
		end if;

		end;
	end loop;
	close C02;

	open C03;
	loop
	fetch C03 into
		nr_seq_inconsist_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		select	count(distinct(nr_seq_inconsistencia))
		into STRICT	qt_registro_w
		from	ptu_intercambio_consist
		where (nr_seq_requisicao	= nr_seq_requisicao_p	or coalesce(nr_seq_requisicao_p::text, '') = '')
		and (nr_seq_material	= nr_seq_servico_w 	or coalesce(nr_seq_servico_w::text, '') = '')
		and	cd_transacao		= cd_transacao_p
		and	ie_tipo_w		= 'M';

		select	max(cd_inconsistencia)
		into STRICT	cd_inconsistencia_w
		from	ptu_inconsistencia
		where	nr_sequencia	= nr_seq_inconsist_w;

		if (nr_qt_reg_p	<= qt_registro_w) then
			if (count_registro_w  =  nr_qt_reg_p) then
				return	cd_inconsistencia_w;
			else
				count_registro_w := count_registro_w  + 1;
			end if;
		else
			cd_inconsistencia_w	:= 0;
		end if;

		end;
	end loop;
	close C03;

	end;
end loop;
close C05;

if	(((coalesce(nr_seq_guia_p::text, '') = '') or (coalesce(nr_seq_requisicao_p::text, '') = '')) and (nr_seq_pedido_p IS NOT NULL AND nr_seq_pedido_p::text <> '')) then
	nr_seq_servico_w	:= nr_seq_pedido_p;
	open C02;
	loop
	fetch C02 into
		nr_seq_inconsist_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		select	count(distinct(nr_seq_inconsistencia))
		into STRICT	qt_registro_w
		from	ptu_intercambio_consist
		where (nr_seq_guia		= nr_seq_guia_p 	or coalesce(nr_seq_guia_p::text, '') = '')
		and (nr_seq_requisicao	= nr_seq_requisicao_p	or coalesce(nr_seq_requisicao_p::text, '') = '')
		and (nr_seq_procedimento	= nr_seq_servico_w 	or coalesce(nr_seq_servico_w::text, '') = '')
		and	cd_transacao		= cd_transacao_p;

		select	max(cd_inconsistencia)
		into STRICT	cd_inconsistencia_w
		from	ptu_inconsistencia
		where	nr_sequencia	= nr_seq_inconsist_w;

		if (nr_qt_reg_p	<= qt_registro_w) then
			if (count_registro_w  =  nr_qt_reg_p) then
				return	cd_inconsistencia_w;
			else
				count_registro_w := count_registro_w  + 1;
			end if;
		else
			cd_inconsistencia_w	:= 0;
		end if;

		end;
	end loop;
	close C02;

	open C03;
	loop
	fetch C03 into
		nr_seq_inconsist_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		select	count(distinct(nr_seq_inconsistencia))
		into STRICT	qt_registro_w
		from	ptu_intercambio_consist
		where (nr_seq_guia		= nr_seq_guia_p 	or coalesce(nr_seq_guia_p::text, '') = '')
		and (nr_seq_requisicao	= nr_seq_requisicao_p	or coalesce(nr_seq_requisicao_p::text, '') = '')
		and (nr_seq_material	= nr_seq_servico_w 	or coalesce(nr_seq_servico_w::text, '') = '')
		and	cd_transacao		= cd_transacao_p;

		select	max(cd_inconsistencia)
		into STRICT	cd_inconsistencia_w
		from	ptu_inconsistencia
		where	nr_sequencia	= nr_seq_inconsist_w;

		if (nr_qt_reg_p	<= qt_registro_w) then
			if (count_registro_w  =  nr_qt_reg_p) then
				return	cd_inconsistencia_w;
			else
				count_registro_w := count_registro_w  + 1;
			end if;
		else
			cd_inconsistencia_w	:= 0;
		end if;

		end;
	end loop;
	close C03;

end if;

open C04;
loop
fetch C04 into
	nr_seq_inconsist_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin

	select	count(distinct(nr_seq_inconsistencia))
	into STRICT	qt_registro_w
	from	ptu_intercambio_consist
	where	((nr_seq_consulta_benef	= nr_seq_consulta_p)
	or (nr_seq_consulta_prest	= nr_seq_consulta_p))
	and	cd_transacao		= cd_transacao_p;

	select	max(cd_inconsistencia)
	into STRICT	cd_inconsistencia_w
	from	ptu_inconsistencia
	where	nr_sequencia	= nr_seq_inconsist_w;

	if (nr_qt_reg_p	<= qt_registro_w) then
		if (count_registro_w  =  nr_qt_reg_p) then
			return	cd_inconsistencia_w;
		else
			count_registro_w := count_registro_w  + 1;
		end if;
	else
		cd_inconsistencia_w	:= 0;
	end if;

	end;
end loop;
close C04;

return	cd_inconsistencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION ptu_obter_inconsist_trans ( nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_consulta_p bigint, cd_transacao_p text, nr_qt_reg_p bigint, nr_seq_pedido_p bigint, cd_servico_p bigint) FROM PUBLIC;

