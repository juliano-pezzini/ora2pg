-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_regra_lib_protocolo ( cd_tipo_protocolo_p bigint, cd_protocolo_p bigint, nr_seq_medicacao_p bigint, nm_usuario_p text, ie_opcao_p text, cd_perfil_p bigint default null) RETURNS varchar AS $body$
DECLARE

 
/* 
ie_opcao_p : 
VC = Visualização Cadastro - retorna 'S' se o registro deverá ser visualizado no cadastro de protocolos 
AC = Alteração Cadastro - retorna 'S' se o registro pode ser alterado no cadastro de protocolo 
APC= Aprovação Cadastro - retorna 'S' se o usuário pode aprovar o sub-tipo de protocolo 
UP = Uso Protocolo - retorna 'S' se o registro pode ser utilizado pelo usuário 
 
*/
 
 
ie_regra_cursor_w	varchar(10);
cd_pessoa_fisica_w	varchar(10);
cd_perfil_w		bigint;
qt_reg_w		bigint;
ie_retorno_w		varchar(50);
ie_regra_retorno_w	varchar(50);
ie_regra_w		varchar(10);
cd_tipo_protocolo_w	bigint;
cd_protocolo_w		bigint;
nr_seq_medicacao_w	bigint;
ie_status_subtipo_w	varchar(10);
ie_aprovacao_w		varchar(1);

C01 CURSOR FOR 
	SELECT	ie_regra 
	from	tipo_protocolo_lib 
	where	cd_tipo_protocolo = cd_tipo_protocolo_w 
	and		coalesce(cd_pessoa_fisica, cd_pessoa_fisica_w) = cd_pessoa_fisica_w 
	and		obter_se_especialidade_medico(cd_pessoa_fisica_w,cd_especialidade) = 'S' 
	and		coalesce(cd_perfil, cd_perfil_w) = cd_perfil_w 
	and		obter_se_valor_contido(ie_regra,ie_regra_w)	= 'S' 
	order by	cd_perfil desc, 
				cd_especialidade desc, 
				cd_pessoa_fisica desc;
	
C02 CURSOR FOR 
	SELECT	ie_regra 
	from	protocolo_lib 
	where	cd_protocolo = cd_protocolo_w 
	and		coalesce(cd_pessoa_fisica, cd_pessoa_fisica_w) = cd_pessoa_fisica_w 
	and		obter_se_especialidade_medico(cd_pessoa_fisica_w,cd_especialidade) = 'S' 
	and		coalesce(cd_perfil, cd_perfil_w) = cd_perfil_w 
	and		obter_se_valor_contido(ie_regra,ie_regra_w)	= 'S' 
	order by	cd_perfil desc, 
				cd_especialidade desc, 
				cd_pessoa_fisica desc;
	
C03 CURSOR FOR 
	SELECT	ie_regra 
	from	protocolo_medic_lib 
	where	cd_protocolo = cd_protocolo_w 
	and		nr_seq_medicacao = nr_seq_medicacao_w 
	and		coalesce(cd_pessoa_fisica, cd_pessoa_fisica_w) = cd_pessoa_fisica_w 
	and		obter_se_especialidade_medico(cd_pessoa_fisica_w,cd_especialidade) = 'S' 
	and		coalesce(cd_perfil, cd_perfil_w) = cd_perfil_w 
	and		obter_se_valor_contido(ie_regra,ie_regra_w)	= 'S' 
	order by	cd_perfil desc, 
				cd_especialidade desc, 
				cd_pessoa_fisica desc;
	

BEGIN 
 
cd_pessoa_fisica_w	:= obter_pf_usuario(nm_usuario_p,'C');
cd_perfil_w		:= coalesce(cd_perfil_p,obter_perfil_ativo);
 
if (ie_opcao_p = 'VC') then 
	ie_regra_w := 'V,A';
elsif (ie_opcao_p = 'AC') then 
	ie_regra_w := 'A';
elsif (ie_opcao_p = 'APC') then 
	ie_regra_w := 'AP';
elsif (ie_opcao_p = 'UP') or (ie_opcao_p = 'LIB') then 
	ie_regra_w := 'U';
end if;
 
select	coalesce(max(ie_cons_aprov_prot),'S') 
into STRICT	ie_aprovacao_w 
from	parametro_medico 
where	cd_estabelecimento = obter_estabelecimento_ativo;
 
if (nr_seq_medicacao_p IS NOT NULL AND nr_seq_medicacao_p::text <> '') and (cd_protocolo_p IS NOT NULL AND cd_protocolo_p::text <> '') then 
	cd_protocolo_w 		:= cd_protocolo_p;
	nr_seq_medicacao_w 	:= nr_seq_medicacao_p;
	if (coalesce(ie_aprovacao_w,'S') = 'S') then 
		select	coalesce(max(ie_status),'AP') 
		into STRICT	ie_status_subtipo_w	 
		from	protocolo_medicacao where		nr_sequencia = nr_seq_medicacao_p 
		and		cd_protocolo = cd_protocolo_p LIMIT 1;
	else 
		ie_status_subtipo_w := 'AP';
	end if;
 
	if (ie_opcao_p = 'UP') and (ie_status_subtipo_w <> 'AP') then 
		return 'N';
	else 
		select	count(*) 
		into STRICT	qt_reg_w 
		from	protocolo_medic_lib where		cd_protocolo = cd_protocolo_w 
		and		nr_seq_medicacao = nr_seq_medicacao_w 
		and		((ie_opcao_p not in ('APC','UP')) or (obter_se_valor_contido(ie_regra,ie_regra_w) = 'S')) LIMIT 1;
		 
		if (qt_reg_w > 0) then 
			open C03;
			loop 
			fetch C03 into	 
				ie_regra_retorno_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				Exit;
			end loop;
			close C03;
			 
		end if;
		 
		if (qt_reg_w = 0) then 
		-- se não houver regra para o sub-tipo de protocolo em questão, utiliza a regra do protocolo 
			select	count(*) 
			into STRICT	qt_reg_w 
			from	protocolo_lib where		cd_protocolo = cd_protocolo_w 
			and		((ie_opcao_p not in ('APC','UP','LIB')) or (obter_se_valor_contido(ie_regra,ie_regra_w) = 'S')) LIMIT 1;
			 
			if (qt_reg_w > 0) then 
				open C02;
				loop 
				fetch C02 into	 
					ie_regra_retorno_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					Exit;
				end loop;
				close C02;
			end if;
			 
			if (qt_reg_w = 0) then 
			-- se não houver regra para o protocolo em questão, utiliza a regra do tipo de protocolo 
				select	cd_tipo_protocolo 
				into STRICT	cd_tipo_protocolo_w 
				from	protocolo 
				where	cd_protocolo = cd_protocolo_w;
				 
				select	count(*) 
				into STRICT	qt_reg_w 
				from	tipo_protocolo_lib where		cd_tipo_protocolo = cd_tipo_protocolo_w 
				and		((ie_opcao_p not in ('APC','UP','LIB')) or (obter_se_valor_contido(ie_regra,ie_regra_w) = 'S')) LIMIT 1;
				 
				if (qt_reg_w > 0) then 
					open C01;
					loop 
					fetch C01 into	 
						ie_regra_retorno_w;
					EXIT WHEN NOT FOUND; /* apply on C01 */
						Exit;
					end loop;
					close C01;
				end if;
				 
				if	(qt_reg_w = 0 AND ie_opcao_p <> 'APC') or (ie_regra_retorno_w IS NOT NULL AND ie_regra_retorno_w::text <> '') then 
					ie_retorno_w	:= 'S';
				else 
					ie_retorno_w	:= 'N';
				end if;
			elsif (ie_regra_retorno_w IS NOT NULL AND ie_regra_retorno_w::text <> '') then 
				ie_retorno_w	:= 'S';
			else 
				ie_retorno_w	:= 'N';
			end if;
		elsif (ie_regra_retorno_w IS NOT NULL AND ie_regra_retorno_w::text <> '') then 
			return 'S';
		else 
			return 'N';
		end if;
	end if;
elsif (cd_protocolo_p IS NOT NULL AND cd_protocolo_p::text <> '') then 
	cd_protocolo_w := cd_protocolo_p;
	select	count(*) 
	into STRICT	qt_reg_w 
	from	protocolo_lib where		cd_protocolo = cd_protocolo_w 
	and		((ie_opcao_p not in ('APC','UP','LIB')) or (obter_se_valor_contido(ie_regra,ie_regra_w) = 'S')) LIMIT 1;
	 
	if (qt_reg_w > 0) then 
		open C02;
		loop 
		fetch C02 into	 
			ie_regra_retorno_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			Exit;
		end loop;
		close C02;
	end if;
	 
	if (qt_reg_w = 0) then 
	-- se não houver regra para o protocolo em questão, utiliza a regra do tipo de protocolo 
		select	max(cd_tipo_protocolo) 
		into STRICT	cd_tipo_protocolo_w 
		from	protocolo where		cd_protocolo = cd_protocolo_w LIMIT 1;
		 
		select	count(*) 
		into STRICT	qt_reg_w 
		from	tipo_protocolo_lib where		cd_tipo_protocolo = cd_tipo_protocolo_w 
		and		((ie_opcao_p not in ('APC','UP','LIB')) or (obter_se_valor_contido(ie_regra,ie_regra_w) = 'S')) LIMIT 1;
		 
		if (qt_reg_w > 0) then 
			open C01;
			loop 
			fetch C01 into	 
				ie_regra_retorno_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				Exit;
			end loop;
			close C01;
		end if;
		 
		if	(qt_reg_w = 0 AND ie_opcao_p <> 'APC') or (ie_regra_retorno_w IS NOT NULL AND ie_regra_retorno_w::text <> '') then 
			ie_retorno_w	:= 'S';
		else 
			ie_retorno_w	:= 'N';
		end if;
	elsif (ie_regra_retorno_w IS NOT NULL AND ie_regra_retorno_w::text <> '') then 
		ie_retorno_w	:= 'S';
	else 
		ie_retorno_w	:= 'N';
	end if;
	 
elsif (cd_tipo_protocolo_p IS NOT NULL AND cd_tipo_protocolo_p::text <> '') then 
	cd_tipo_protocolo_w := cd_tipo_protocolo_p;
	select	count(*) 
	into STRICT	qt_reg_w 
	from	tipo_protocolo_lib where		cd_tipo_protocolo = cd_tipo_protocolo_w 
	and		((ie_opcao_p not in ('APC','UP','LIB')) or (obter_se_valor_contido(ie_regra,ie_regra_w) = 'S')) LIMIT 1;
	 
	if (qt_reg_w > 0) then 
		open C01;
		loop 
		fetch C01 into	 
			ie_regra_retorno_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			Exit;
		end loop;
		close C01;
	end if;
	 
	if	(qt_reg_w = 0 AND ie_opcao_p <> 'APC') or (ie_regra_retorno_w IS NOT NULL AND ie_regra_retorno_w::text <> '') then 
		ie_retorno_w	:= 'S';
	else 
		ie_retorno_w	:= 'N';
	end if;
 
end if;
 
return	ie_retorno_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_regra_lib_protocolo ( cd_tipo_protocolo_p bigint, cd_protocolo_p bigint, nr_seq_medicacao_p bigint, nm_usuario_p text, ie_opcao_p text, cd_perfil_p bigint default null) FROM PUBLIC;

