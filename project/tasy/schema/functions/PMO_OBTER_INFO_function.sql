-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pmo_obter_info ( nr_seq_proj_p bigint, nr_seq_program_p bigint, ie_tipo_inf_p text, ie_group_inf_p text, dt_ini_p timestamp, dt_fim_p timestamp) RETURNS bigint AS $body$
DECLARE


/* ie_tipo_inf_p:

*-Actual Hours (AH)
*-Earned Value (EV):
*-Planned Value (PV)
*-SChedule Performance Index (SPI)
*-Hours Performance Index (HPI) */
/*ie_group_inf_p:

*-PROJ
*-PROG
*-PER*/
temp_w					double precision;
qt_horas_prev_w					double precision;
qt_checkpoints_w				bigint;
qt_checkpoints_previstos_w		bigint;
qt_checkpoints_concluidos_w		bigint;
qt_milestones_w					bigint;
qt_milestones_previstos_w		bigint;
qt_milestones_concluidos_w		bigint;
dt_fim_real_w					timestamp;
nr_seq_proj_w					bigint;
ah_w							double precision := 0;
ev_w							double precision := 0;
pv_w							double precision := 0;
dt_ini_ref						timestamp;
dt_fim_ref						timestamp;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	proj_projeto
	where (ie_group_inf_p <> 'PROJ' or (ie_group_inf_p = 'PROJ' and nr_sequencia = nr_seq_proj_p))
	and (ie_group_inf_p <> 'PROG' or (ie_group_inf_p = 'PROG' and nr_seq_programa = nr_seq_program_p))
	and (ie_group_inf_p <> 'PER' or (ie_group_inf_p = 'PER' and nr_sequencia in (
																						SELECT	distinct(a.nr_seq_proj)
																						from	proj_cronograma a,
																								proj_cron_etapa b
																						where	a.nr_sequencia = b.nr_seq_cronograma
																						and		a.ie_situacao = 'A'
																						and		b.dt_fim_real between dt_ini_ref and dt_fim_ref))
	);


BEGIN

	dt_ini_ref := trunc(dt_ini_p);
	dt_fim_ref := PKG_DATE_UTILS.END_OF(dt_fim_p, 'DAY');

	open C01;
	loop
	fetch C01 into
		nr_seq_proj_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

			--Quantidade de horas realizadas
			select	coalesce(sum(qt_hora_real), 0)
			into STRICT	temp_w
			from	proj_cron_etapa a,
					proj_cronograma b
			where	a.nr_seq_cronograma = b.nr_sequencia
			and		b.nr_seq_proj = nr_seq_proj_w
			and		(a.dt_fim_real IS NOT NULL AND a.dt_fim_real::text <> '')
			and		b.ie_situacao = 'A'
			and (ie_group_inf_p <> 'PER' or	b.dt_fim_real between dt_ini_ref and dt_fim_ref);

			ah_w := ah_w + temp_w;

			--Quantidade  horas previstas
			select	coalesce(sum(qt_hora_prev), 0)
			into STRICT	qt_horas_prev_w
			from	proj_cron_etapa a,
					proj_cronograma b
			where	a.nr_seq_cronograma = b.nr_sequencia
			and		b.nr_seq_proj = nr_seq_proj_w
			and		b.ie_situacao = 'A'
			and (ie_group_inf_p <> 'PER' or	b.dt_fim_real between dt_ini_ref and dt_fim_ref);

			--total de checkpoints
			select	count(a.nr_sequencia)
			into STRICT	qt_checkpoints_w
			from	proj_cron_etapa a,
					proj_cronograma b
			where	a.nr_seq_cronograma = b.nr_sequencia
			and		b.nr_seq_proj = nr_seq_proj_w
			and		a.ie_checkpoint = 'S'
			and (ie_group_inf_p <> 'PER' or	a.dt_fim_real between dt_ini_ref and dt_fim_ref);

			--total de milestones
			select	count(a.nr_sequencia)
			into STRICT	qt_milestones_w
			from	proj_cron_etapa a,
					proj_cronograma b
			where	a.nr_seq_cronograma = b.nr_sequencia
			and		b.nr_seq_proj = nr_seq_proj_w
			and		a.ie_milestone = 'S'
			and (ie_group_inf_p <> 'PER' or	a.dt_fim_real between dt_ini_ref and dt_fim_ref);

			-- Data fim projeto
			select	max(dt_fim_real)
			into STRICT	dt_fim_real_w
			from 	proj_projeto
			where	nr_sequencia = nr_seq_proj_w
			and		dt_fim_real	< clock_timestamp()
			and (ie_group_inf_p <> 'PER' or	dt_fim_real between dt_ini_ref and dt_fim_ref);

			--checkpoints concluidos
			select	count(nr_seq_proj)
			into STRICT	qt_checkpoints_concluidos_w
			from	proj_cron_etapa a,
					proj_cronograma b
			where	a.nr_seq_cronograma = b.nr_sequencia
			and		b.nr_seq_proj = nr_seq_proj_w
			and		(a.dt_fim_real IS NOT NULL AND a.dt_fim_real::text <> '')
			and		a.ie_checkpoint = 'S'
			and (ie_group_inf_p <> 'PER' or	a.dt_fim_real between dt_ini_ref and dt_fim_ref);

			--Milestones concluidos
			select	count(a.nr_sequencia)
			into STRICT	qt_milestones_concluidos_w
			from	proj_cron_etapa a,
					proj_cronograma b
			where	a.nr_seq_cronograma = b.nr_sequencia
			and		b.nr_seq_proj = nr_seq_proj_w
			and		(a.dt_fim_real IS NOT NULL AND a.dt_fim_real::text <> '')
			and		a.ie_milestone = 'S'
			and (ie_group_inf_p <> 'PER' or	a.dt_fim_real between dt_ini_ref and dt_fim_ref);

			-- EV
			ev_w := ev_w + (case qt_checkpoints_w when 0 then 0 else qt_checkpoints_concluidos_w / qt_checkpoints_w * qt_horas_prev_w * 0.10 end)
							+ (case qt_milestones_w when 0 then 0 else qt_milestones_concluidos_w / qt_milestones_w * qt_horas_prev_w * 0.75 end);

			if (dt_fim_real_w IS NOT NULL AND dt_fim_real_w::text <> '') then
				ev_w := ev_w + (qt_horas_prev_w * 0.15);
			end if;

			--Checkpoints previstos
			select	count(a.nr_sequencia)
			into STRICT	qt_checkpoints_previstos_w
			from	proj_cron_etapa a,
					proj_cronograma b
			where	a.nr_seq_cronograma = b.nr_sequencia
			and		b.nr_seq_proj = nr_seq_proj_w
			and		a.dt_fim_prev < clock_timestamp()
			and		a.ie_checkpoint = 'S'
			and (ie_group_inf_p <> 'PER' or	a.dt_fim_real between dt_ini_ref and dt_fim_ref);

			--Milestones previstos
			select	count(nr_seq_proj)
			into STRICT	qt_milestones_previstos_w
			from	proj_cron_etapa a,
					proj_cronograma b
			where	a.nr_seq_cronograma = b.nr_sequencia
			and		b.nr_seq_proj = nr_seq_proj_w
			and		a.dt_fim_prev < clock_timestamp()
			and		a.ie_milestone = 'S'
			and (ie_group_inf_p <> 'PER' or	a.dt_fim_real between dt_ini_ref and dt_fim_ref);

			--PV
			pv_w := pv_w + (case qt_checkpoints_w when 0 then 0 else qt_checkpoints_previstos_w / qt_checkpoints_w * qt_horas_prev_w * 0.10 end)
							+ (case qt_milestones_w when 0 then 0 else qt_milestones_previstos_w / qt_milestones_w * qt_horas_prev_w * 0.75 end);

			if (coalesce(dt_fim_real_w, clock_timestamp()) < clock_timestamp()) then
				pv_w := pv_w + (qt_horas_prev_w * 0.15);
			end if;

		end;
	end loop;
	close C01;

	if (ie_tipo_inf_p = 'AH') then
		return ah_w;
	end if;

	if (ie_tipo_inf_p = 'EV') then
		return ev_w;
	end if;

	if (ie_tipo_inf_p = 'PV') then
		return pv_w;
	end if;

	if (ie_tipo_inf_p = 'SPI') then
		return case pv_w when 0 then 0 else ev_w / pv_w end;
	end if;

	if (ie_tipo_inf_p = 'HPI') then
		return case ah_w when 0 then 0 else ev_w / ah_w end;
	end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pmo_obter_info ( nr_seq_proj_p bigint, nr_seq_program_p bigint, ie_tipo_inf_p text, ie_group_inf_p text, dt_ini_p timestamp, dt_fim_p timestamp) FROM PUBLIC;

