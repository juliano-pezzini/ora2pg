-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION eup_obter_valor_proc_part ( nr_atendimento_p bigint, nr_prescricao_p bigint, nr_seq_proced_p bigint, cd_medico_prescr_p text) RETURNS bigint AS $body$
DECLARE


cd_pessoa_fisica_w	atendimento_paciente.cd_pessoa_fisica%type;
ie_tipo_Atendimento_w	atendimento_paciente.ie_tipo_Atendimento%type;
cd_estabelecimento_w	atendimento_paciente.cd_estabelecimento%type;
cd_convenio_ww		atend_categoria_convenio.cd_convenio%type;
cd_plano_ww		atend_categoria_convenio.cd_plano_convenio%type;
cd_categoria_ww		atend_categoria_convenio.cd_categoria%type;
nr_seq_cobertura_w	atend_categoria_convenio.nr_seq_cobertura%type;
cd_empresa_w		atend_categoria_convenio.cd_empresa%type;
ie_Sexo_w		pessoa_fisica.ie_Sexo%type;
ie_tipo_convenio_w	convenio.ie_tipo_convenio%type;
cd_especialidade_w	especialidade_medica.cd_especialidade%type;
nr_seq_proc_interno_w	procedimento_paciente.nr_seq_proc_interno%type;
cd_procedimento_w	procedimento_paciente.cd_procedimento%type;
cd_procedimento_obter_w procedimento_paciente.cd_procedimento%type;
ie_origem_proced_w	procedimento_paciente.ie_origem_proced%type;
qt_pontos_w		preco_amb.qt_pontuacao%type;
CD_EDICAO_AMB_w         integer;
ds_aux_w		varchar(10);
dt_prev_execucao_w	timestamp;
ds_erro_w		varchar(255);
ie_regra_w		integer;
nr_seq_regra_w		bigint;
ie_glosa_w		varchar(1);
cd_edicao_ajuste_w      bigint;
cd_convenio_part_w	integer;
cd_categoria_part_w	varchar(10);
vl_procedimento_part_w	double precision;
ie_vl_particular_w	varchar(1);
nr_seq_ajuste_proc_w	bigint;
ie_edicao_w             varchar(1);
vl_custo_operacional_w	double precision;
vl_anestesista_w	double precision;
vl_medico_w		double precision;
vl_auxiliares_w		double precision;
vl_materiais_w		double precision;
vl_aux_w		double precision;
cd_convenio_glosa_w	bigint;
cd_categoria_glosa_w	varchar(10);
ie_conv_cat_regra_w	varchar(1);
pr_glosa_w		double precision;
vl_glosa_w		double precision;
vl_proced_partic_w	double precision := 0;

C01 CURSOR FOR
	SELECT	x.nr_seq_proc_interno,
		x.cd_procedimento,
		x.ie_origem_proced,
		x.dt_prev_execucao
	from	prescr_procedimento x
	where	x.nr_prescricao = nr_prescricao_p
	and (x.nr_sequencia = coalesce(nr_seq_proced_p,0) or coalesce(nr_seq_proced_p,0) = 0)
	order by nr_sequencia;

BEGIN
if (coalesce(nr_atendimento_p,0) > 0) and (coalesce(nr_prescricao_p,0) > 0) then

	select 	max(a.cd_pessoa_fisica),
		max(a.ie_tipo_Atendimento),
		max(a.cd_estabelecimento),
		max(b.cd_convenio),
		max(b.cd_plano_convenio),
		max(b.cd_categoria),
		max(b.nr_seq_cobertura),
		max(b.cd_empresa)
	into STRICT	cd_pessoa_fisica_w,
		ie_tipo_Atendimento_w,
		cd_estabelecimento_w,
		cd_convenio_ww,
		cd_plano_ww,
		cd_categoria_ww,
		nr_seq_cobertura_w,
		cd_empresa_w
	from	atendimento_paciente a,
		atend_categoria_convenio b
	where	a.nr_atendimento = b.nr_atendimento
	and	a.nr_atendimento = nr_atendimento_p
	and	b.nr_seq_interno = OBTER_ATECACO_ATENDIMENTO(a.nr_atendimento);

	if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
		select	max(ie_Sexo)
		into STRICT	ie_Sexo_w
		from	pessoa_fisica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
	end if;

	if (cd_convenio_ww IS NOT NULL AND cd_convenio_ww::text <> '') then
		select	max(ie_tipo_convenio)
		into STRICT	ie_tipo_convenio_w
		from	convenio
		where	cd_convenio	= cd_convenio_ww;
	end if;

	if (cd_medico_prescr_p IS NOT NULL AND cd_medico_prescr_p::text <> '') then
		cd_especialidade_w := OBTER_ESPECIALIDADE_MEDICO(cd_medico_prescr_p,'C');
	end if;

	if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (ie_Sexo_w IS NOT NULL AND ie_Sexo_w::text <> '') then
		open C01;
		loop
		fetch C01 into
			nr_seq_proc_interno_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			dt_prev_execucao_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
				SELECT * FROM ageint_consiste_plano_conv(
					null, cd_convenio_ww, cd_procedimento_w, ie_origem_proced_w, clock_timestamp(), 1, ie_tipo_Atendimento_w, cd_plano_ww, null, ds_erro_w, 0, null, ie_regra_w, null, nr_seq_regra_w, nr_seq_proc_interno_w, cd_categoria_ww, cd_estabelecimento_w, null, ie_Sexo_w, ie_glosa_w, cd_edicao_ajuste_w, nr_seq_cobertura_w, cd_convenio_glosa_w, cd_categoria_glosa_w, cd_pessoa_fisica_w, cd_empresa_w, pr_glosa_w, vl_glosa_w) INTO STRICT ds_erro_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, cd_edicao_ajuste_w, cd_convenio_glosa_w, cd_categoria_glosa_w, pr_glosa_w, vl_glosa_w
				;

				ie_edicao_w	:= ageint_obter_se_proc_conv(cd_estabelecimento_w, cd_convenio_ww, cd_categoria_ww, clock_timestamp(),
								cd_procedimento_W,ie_origem_proced_w, nr_seq_proc_interno_w, ie_tipo_atendimento_w);
								
				if ((ie_regra_w = 8) or (ie_tipo_convenio_w = 1)) then

					SELECT * FROM obter_convenio_particular(cd_estabelecimento_w, cd_convenio_part_w, cd_categoria_part_w) INTO STRICT cd_convenio_part_w, cd_categoria_part_w;

          select CASE WHEN                  coalesce(nr_seq_proc_interno_w::text, '') = '' THEN                   cd_procedimento_W  ELSE obter_cd_proc_tab_interno(nr_seq_proc_interno_w, cd_estabelecimento_w, cd_convenio_part_w, cd_categoria_part_w,'CD') END  into STRICT cd_procedimento_obter_w;
          
					SELECT * FROM Define_Preco_Procedimento(
						CD_ESTABELECIMENTO_w, cd_convenio_part_w, cd_categoria_part_w, coalesce(dt_prev_execucao_w,clock_timestamp()), cd_procedimento_obter_w, 0, coalesce(ie_tipo_Atendimento_w,0), 0, cd_medico_prescr_p, --medico
						0, 0, 0, nr_seq_proc_interno_w, null, --usuario convenio
						null, 0, 0, null, VL_PROCEDIMENTO_part_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, qt_pontos_w, CD_EDICAO_AMB_w, ds_aux_w, nr_seq_ajuste_proc_w, 0, null, 0, 'N', null, null, null, null, null, cd_especialidade_w, null, null, null, null, null, null, null, null, null, null) INTO STRICT VL_PROCEDIMENTO_part_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, qt_pontos_w, CD_EDICAO_AMB_w, ds_aux_w, nr_seq_ajuste_proc_w;

						vl_proced_partic_w	:= VL_PROCEDIMENTO_part_w;
				end if;
			end;	
		end loop;
		close C01;
	end if;
end if;

return	vl_proced_partic_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION eup_obter_valor_proc_part ( nr_atendimento_p bigint, nr_prescricao_p bigint, nr_seq_proced_p bigint, cd_medico_prescr_p text) FROM PUBLIC;

