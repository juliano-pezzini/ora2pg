-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE contas AS (		cd_conta_contabil	varchar(20),
				vl_conta		double precision,
				cd_estab		bigint,
				cd_centro_custo		varchar(40));


CREATE OR REPLACE FUNCTION bsc_obter_valor_conta ( cd_estabelecimento_p bigint, nr_seq_mes_ref_p bigint, nr_seq_regra_calc_p bigint) RETURNS bigint AS $body$
DECLARE


type vetor_contas is table of contas index by integer;

contas_w				vetor_contas;
contas_ajustadas_w			vetor_contas;
i				integer		:= 0;
j				integer		:= 0;
ds_origem_w			varchar(2000);
vl_retorno_w			double precision;
ds_conta_w			varchar(2000);
ds_valores_w			varchar(2000);
ie_pos_mais_w			integer;
ie_pos_menos_w			integer;
ie_pos_mult_w			integer;
ie_pos_div_w			integer;
ie_pos_w				integer;
ie_pos_cc_w			integer;
ie_pos_estab_w			integer;
cd_conta_w			varchar(40);
cd_conta_ww			varchar(40);
cd_centro_w			varchar(40);
cd_estab_w			varchar(5);
ds_erro_w			varchar(500);
dt_referencia_w			timestamp;
nr_seq_mes_ref_w			bigint;
cd_empresa_w			bigint;
ds_par_esq_w			varchar(1);
ds_par_dir_w			varchar(1);
ie_caracter_w			varchar(10) := '';
ie_char_repos_w			varchar(10) := '';
x				bigint;
ie_fim_valores_w		varchar(1);

C01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.nr_seq_mes_ref,
	a.ie_origem_ctb,
	a.ds_origem,
	coalesce(a.qt_mes,0)  qt_mes,
	coalesce(a.ie_estab_inf,'N') ie_estab_inf
from	bsc_regra_ctb_esp a
where	a.nr_sequencia	= nr_seq_regra_calc_p
order by	a.nr_sequencia;

Vet01	C01%RowType;


BEGIN

begin
if (coalesce(cd_estabelecimento_p,0) <> 0) then
	cd_empresa_w	:= obter_empresa_estab(cd_estabelecimento_p);
else
	select	max(cd_empresa)
	into STRICT	cd_empresa_w
	from	ctb_mes_ref
	where	nr_sequencia	= nr_seq_mes_ref_p;
end if;
exception when others then
	cd_empresa_w	:= 1;
end;
ie_fim_valores_w	:= 'Z';
open C01;
loop
fetch C01 into
	Vet01;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	i		:= i + 1;
	ds_conta_w	:= replace(Vet01.ds_origem,' ','');
	ds_valores_w	:= replace(Vet01.ds_origem,' ','');
	cd_centro_w	:= null;
	contas_w.delete;


	nr_seq_mes_ref_w	:= coalesce(vet01.nr_seq_mes_ref, nr_seq_mes_ref_p);

	select	max(dt_referencia)
	into STRICT	dt_referencia_w
	from	ctb_mes_ref
	where	nr_sequencia	= nr_seq_mes_ref_w
	and	cd_empresa	= cd_empresa_w;

	dt_referencia_w	:= PKG_DATE_UTILS.ADD_MONTH(dt_referencia_w,Vet01.qt_mes,0);

	select	coalesce(max(nr_sequencia), nr_seq_mes_ref_w)
	into STRICT	nr_seq_mes_ref_w
	from	ctb_mes_ref
	where	dt_referencia	= dt_referencia_w
	and	cd_empresa	= cd_empresa_w;

	/*tratamento para colocar o caracter 'C' para identificar a conta contábil
	   e evitar problemas ao fazer o replace da conta pelo seu respectivo valor*/
	ds_valores_w	:= ds_valores_w || ie_fim_valores_w;
	x 		:= 1;
	while(substr(ds_valores_w,x,1) <> 'Z') loop
		begin
		if (substr(ds_valores_w,x,1) in ('*','/','+','-')) then
			begin
			ie_caracter_w	:= substr(ds_valores_w,x,1);
			ie_char_repos_w	:= 'C'|| ie_caracter_w;
			ds_valores_w 	:= substr(ds_valores_w,1,x-1) || ie_char_repos_w || substr(ds_valores_w,x+1,length(ds_valores_w));
			x := x+1;
			end;
		end if;
		x := x+1;
		end;
	end loop;
	if (substr(ds_valores_w,length(ds_valores_w),1) = ')') then
		ds_valores_w	:= substr(ds_valores_w,1,length(ds_valores_w)-1)||'C)';
	else
		ds_valores_w	:= ds_valores_w||'C';
	end if;
	ds_valores_w	:= replace(ds_valores_w, ie_fim_valores_w, '');
	j := 0;
	while(length(ds_conta_w) > 0)  loop

		j			:= j + 1;
		cd_conta_w		:= null;
		ie_pos_mais_w 		:= position('+' in ds_conta_w);
		ie_pos_menos_w 		:= position('-' in ds_conta_w);
		ie_pos_mult_w 		:= position('*' in ds_conta_w);
		ie_pos_div_w 		:= position('/' in ds_conta_w);
		/* Define posição do sinal */

		if (ie_pos_mais_w = 0) and (ie_pos_menos_w = 0) then
			ie_pos_w	:= 0;
		elsif (ie_pos_menos_w > 0) and ((ie_pos_menos_w < ie_pos_mais_w) or (ie_pos_mais_w = 0)) then
			ie_pos_w	:= ie_pos_menos_w;
		elsif (ie_pos_mais_w > 0) and ((ie_pos_mais_w < ie_pos_mult_w) or (ie_pos_mult_w = 0)) then
			ie_pos_w	:= ie_pos_mais_w;
		elsif (ie_pos_mult_w > 0) and ((ie_pos_mult_w < ie_pos_div_w) or (ie_pos_div_w = 0)) then
			ie_pos_w	:= ie_pos_mult_w;
		else
			ie_pos_w	:= ie_pos_div_w;
		end if;
		/*Obtem a conta contabil */

		if (ie_pos_w > 0) then
			cd_conta_w	:= substr(ds_conta_w,1, ie_pos_w - 1);
			ds_conta_w	:= substr(ds_conta_w, ie_pos_w, 2000);
			if (ie_pos_w = 1) then
				cd_conta_w	:= 0;
				ds_conta_w	:= substr('0 ' || ds_conta_w,1,2000);
			end if;
		else
			cd_conta_w	:= ds_conta_w;
			ds_conta_w	:= null;
		end if;
		/* Verifica se a restrição é por estabelecimento */

		ie_pos_estab_w 	:= position('@' in cd_conta_w);
		cd_estab_w	:= null;

		if (ie_pos_estab_w > 0) then
			cd_estab_w	:= substr(cd_conta_w, 1, ie_pos_estab_w - 1);
			cd_conta_w	:= substr(cd_conta_w, ie_pos_estab_w + 1, 20);
		end if;

		/* Verifica restrição por centro de custo */

		cd_centro_w		:= null;
		ie_pos_cc_w 		:= position('#' in cd_conta_w);

		if (ie_pos_cc_w > 0) then
			cd_centro_w	:= substr(cd_conta_w, ie_pos_cc_w + 1, 20);
			cd_conta_w	:= substr(cd_conta_w, 1, ie_pos_cc_w - 1);
		end if;

		/* Se for codigo valido de conta contabil - obtem o valor de acordo com a origem */

		if (cd_conta_w IS NOT NULL AND cd_conta_w::text <> '') then
			cd_conta_w	:= replace(cd_conta_w,' ','');
			select	coalesce(ctb_obter_valor_contab(vet01.nr_sequencia,
							cd_conta_w,
							Vet01.ie_origem_ctb,
							nr_seq_mes_ref_w,
							cd_centro_w,
							CASE WHEN vet01.ie_estab_inf='N' THEN  cd_estab_w WHEN vet01.ie_estab_inf='S' THEN  cd_estabelecimento_p END ),0)
			into STRICT	vl_retorno_w
			;

			contas_w[j].cd_conta_contabil	:= cd_conta_w;
			contas_w[j].vl_conta		:= vl_retorno_w;
			contas_w[j].cd_estab		:= coalesce(cd_estab_w,0);
			contas_w[j].cd_centro_custo	:= cd_centro_w;
		end if;

		if (ds_conta_w IS NOT NULL AND ds_conta_w::text <> '') and (substr(ds_conta_w,1,1) in ('+','-','*','/')) then
			ds_conta_w			:= substr(ds_conta_w,2,2000);
		end if;

	end loop;
	/* Decodifica a formula pelos valores obtidos das contas */

	for j in 1..contas_w.Count loop
		begin

		cd_conta_ww			:= contas_w[j].cd_conta_contabil;
		if (coalesce(contas_w[j].cd_centro_custo,'X') <> 'X') then
			contas_w[j].cd_centro_custo	:= contas_w[j].cd_centro_custo||'C';
		else
			cd_conta_ww			:= contas_w[j].cd_conta_contabil||'C';
		end if;

		ie_pos_w	:= coalesce(position(contas_w[j].cd_conta_contabil in ds_valores_w),0);
		ds_par_esq_w	:= '';
		ds_par_dir_w	:= '';
		if (ie_pos_w <> 0) then
			begin

			if (coalesce(contas_w[j].vl_conta,0) < 0) then
				ds_par_esq_w	:= '(';
				ds_par_dir_w	:= ')';

			end if;

			if (contas_w[j].cd_estab = 0) then
				begin
				if (coalesce(contas_w[j].cd_centro_custo,'X') = 'X') then
					ds_valores_w	:= replace(ds_valores_w,cd_conta_ww, ds_par_esq_w || contas_w[j].vl_conta || ds_par_dir_w);
				else
					ds_valores_w	:= replace(ds_valores_w,cd_conta_ww || '#' || contas_w[j].cd_centro_custo, ds_par_esq_w || contas_w[j].vl_conta || ds_par_dir_w);

				end if;
				end;
			else
				begin
				if (coalesce(contas_w[j].cd_centro_custo,'X') = 'X') then
					ds_valores_w	:= replace(ds_valores_w,contas_w[j].cd_estab || '@' || cd_conta_ww, ds_par_esq_w || contas_w[j].vl_conta || ds_par_dir_w);
				else
					ds_valores_w	:= replace(ds_valores_w,contas_w[j].cd_estab || '@' || cd_conta_ww ||'#'||contas_w[j].cd_centro_custo, ds_par_esq_w || contas_w[j].vl_conta || ds_par_dir_w);

				end if;
				end;
			end if;
			end;
		end if;
		end;
	end loop;
	/* calcula o valor da formula */

	ds_valores_w	:= replace(ds_valores_w,'C','');

	if (ds_valores_w IS NOT NULL AND ds_valores_w::text <> '') then
		vl_retorno_w := obter_valor_dinamico('select nvl(' || replace(ds_valores_w,',','.') || ',0) from dual', vl_retorno_w);
	end if;
	end;
end loop;
close C01;
return	vl_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION bsc_obter_valor_conta ( cd_estabelecimento_p bigint, nr_seq_mes_ref_p bigint, nr_seq_regra_calc_p bigint) FROM PUBLIC;

