-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_existe_item_rec ( nr_seq_conta_p bigint, nr_seq_prestador_p bigint, ie_opcao_p text default 'P') RETURNS varchar AS $body$
DECLARE

			 
qt_registros_rec_w	integer;
qt_registros_glos_w	integer;


BEGIN 
 
if (ie_opcao_p = 'T') then 
	--Verifica quantos registros podem ser recursados 
	select	count(1) 
	into STRICT	qt_registros_glos_w 
	from	pls_conta_mat a 
	where	a.nr_seq_conta = nr_seq_conta_p 
	and	pls_obter_recursa_item_regra(a.nr_sequencia,a.nr_seq_conta,nr_seq_prestador_p,'M') = 'S' 
	and	a.vl_glosa > 0 
	and	pls_obter_saldo_rec_glosa_mat(a.nr_sequencia, null) > 0 
	and	(((SELECT count(1) from pls_conta_glosa xz where xz.nr_seq_conta_mat = a.nr_sequencia) > 0) or 
		((select count(1) from pls_conta_glosa xz where xz.nr_seq_conta = a.nr_seq_conta and coalesce(xz.nr_seq_conta_proc::text, '') = '' and coalesce(xz.nr_seq_conta_mat::text, '') = '') > 0)) 
	and	not exists (	select 1 
				from	pls_rec_glosa_mat y, 
					pls_rec_glosa_conta x, 
					pls_rec_glosa_protocolo w 
				where 	y.nr_seq_conta_mat = a.nr_sequencia 
				and	x.nr_sequencia = y.nr_seq_conta_rec 
				and	w.nr_sequencia = x.nr_seq_protocolo 
				and	x.ie_status	!= '3' 
				and	w.ie_status not in (3,4,6,10));
else 
	--Verifica quantos registros podem ser recursados 
	select	count(1) 
	into STRICT	qt_registros_glos_w 
	from	pls_conta_mat a 
	where	a.nr_seq_conta = nr_seq_conta_p 
	and	not exists (	SELECT	1 
				from	w_pls_recurso_glosa x 
				where	x.nr_seq_conta_mat = a.nr_sequencia 
				and		x.ie_tipo_inclusao = 'M') 
	and	pls_obter_recursa_item_regra(a.nr_sequencia,a.nr_seq_conta,nr_seq_prestador_p,'M') = 'S' 
	and	a.vl_glosa > 0 
	and	pls_obter_saldo_rec_glosa_mat(a.nr_sequencia, null) > 0 
	and	(((select count(1) from pls_conta_glosa xz where xz.nr_seq_conta_mat = a.nr_sequencia) > 0) or 
		((select count(1) from pls_conta_glosa xz where xz.nr_seq_conta = a.nr_seq_conta and coalesce(xz.nr_seq_conta_proc::text, '') = '' and coalesce(xz.nr_seq_conta_mat::text, '') = '') > 0)) 
	and	not exists (	select 1 
				from	pls_rec_glosa_mat y, 
					pls_rec_glosa_conta x, 
					pls_rec_glosa_protocolo w 
				where 	y.nr_seq_conta_mat = a.nr_sequencia 
				and	x.nr_sequencia = y.nr_seq_conta_rec 
				and	w.nr_sequencia = x.nr_seq_protocolo 
				and	x.ie_status	!= '3' 
				and	w.ie_status not in (3,4,6,10));
end if;
 
--Caso a quantidade seja igual, então realizar o mesmo teste para o procedimento 
if (qt_registros_glos_w = 0) then 
	if (ie_opcao_p = 'T') then 
	 
		select	count(1) 
		into STRICT	qt_registros_glos_w 
		from	pls_conta b, 
			pls_conta_proc a 
		where	b.nr_sequencia = nr_seq_conta_p 
		and	a.nr_seq_conta = b.nr_sequencia 
		and	a.vl_glosa > 0 
		and	pls_obter_saldo_rec_glosa_proc(a.nr_sequencia, null) > 0 
		and	pls_obter_recursa_item_regra(a.nr_sequencia,a.nr_seq_conta,nr_seq_prestador_p,'P') = 'S' 
		and	(((SELECT count(1) from pls_conta_glosa xz where xz.nr_seq_conta_proc = a.nr_sequencia) > 0) or 
			((select count(1) from pls_conta_glosa xz where xz.nr_seq_conta = a.nr_seq_conta and coalesce(xz.nr_seq_conta_proc::text, '') = '' and coalesce(xz.nr_seq_conta_mat::text, '') = '') > 0)) 
		and	not exists (	select 	1 
					from	pls_rec_glosa_proc y, 
						pls_rec_glosa_conta x, 
						pls_rec_glosa_protocolo w 
					where 	y.nr_seq_conta_proc = a.nr_sequencia 
					and	x.nr_sequencia = y.nr_seq_conta_rec 
					and	w.nr_sequencia = x.nr_seq_protocolo 
					and	x.ie_status	!= '3' 
					and	w.ie_status not in (3,4,6,10));
	else 
		select	count(1) 
		into STRICT	qt_registros_glos_w 
		from	pls_conta b, 
			pls_conta_proc a 
		where	b.nr_sequencia = nr_seq_conta_p 
		and	a.nr_seq_conta = b.nr_sequencia 
		and	not exists (	SELECT	1 
					from	w_pls_recurso_glosa x 
					where	x.nr_seq_conta_proc = a.nr_sequencia 
					and	x.ie_tipo_inclusao = 'P') 
		and	a.vl_glosa > 0 
		and	pls_obter_saldo_rec_glosa_proc(a.nr_sequencia, null) > 0 
		and	pls_obter_recursa_item_regra(a.nr_sequencia,a.nr_seq_conta,nr_seq_prestador_p,'P') = 'S' 
		and	(((select count(1) from pls_conta_glosa xz where xz.nr_seq_conta_proc = a.nr_sequencia) > 0) or 
			((select count(1) from pls_conta_glosa xz where xz.nr_seq_conta = a.nr_seq_conta and coalesce(xz.nr_seq_conta_proc::text, '') = '' and coalesce(xz.nr_seq_conta_mat::text, '') = '') > 0)) 
		and	not exists (	select 	1 
					from	pls_rec_glosa_proc y, 
						pls_rec_glosa_conta x, 
						pls_rec_glosa_protocolo w 
					where 	y.nr_seq_conta_proc = a.nr_sequencia 
					and	x.nr_sequencia = y.nr_seq_conta_rec 
					and	w.nr_sequencia = x.nr_seq_protocolo 
					and	x.ie_status	!= '3' 
					and	w.ie_status not in (3,4,6,10));
	end if;
	 
	if (qt_registros_glos_w = 0) then 
		return 'N';
	else 
		return 'S';
	end if;
	 
else 
--Caso não for, então pode ser recursado a conta 
	return 'S';
end if;
 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_existe_item_rec ( nr_seq_conta_p bigint, nr_seq_prestador_p bigint, ie_opcao_p text default 'P') FROM PUBLIC;

