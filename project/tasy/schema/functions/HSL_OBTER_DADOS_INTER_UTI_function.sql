-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function hsl_obter_dados_inter_uti as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION hsl_obter_dados_inter_uti (nr_atendimento_p bigint, cd_setor_atendimento_p bigint, ie_opcao_p text) RETURNS bigint AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	bigint;
BEGIN
	v_query := 'SELECT * FROM hsl_obter_dados_inter_uti_atx ( ' || quote_nullable(nr_atendimento_p) || ',' || quote_nullable(cd_setor_atendimento_p) || ',' || quote_nullable(ie_opcao_p) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret bigint);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION hsl_obter_dados_inter_uti_atx (nr_atendimento_p bigint, cd_setor_atendimento_p bigint, ie_opcao_p text) RETURNS bigint AS $body$
DECLARE


qt_passagens_uti_w	bigint;
qt_internacao_w		bigint;
qt_mov_mesmo_setor_w	bigint;
qt_mov_setor_w		bigint;
cd_classif_setor_w	varchar(2);
qt_reinternacao_w	bigint;
qt_retorno		bigint;
nr_seq_interno_w	bigint;
qt_horas_reint_w	bigint;
nr_seq_interno_ww	bigint;
ie_tipo_internacao_w	bigint;
cd_classif_setor_atual_w	bigint;
ie_saida_setor_uti_w	bigint;
qt_saida_uti_w		bigint;
qt_pas_uti_w		bigint;
qt_reint_w		bigint;
cd_motivo_alta_w	smallint;

/* ie_opcao_p
	I internação
	M transf para mesmo setor
	D transf para setor diferente
	R reinternação na UTI
	TP tipo de reinternacao
	SU saída UTI
	P passagens UTI
	RI reinternações UTI
*/
BEGIN

ie_tipo_internacao_w := 0;

nr_seq_interno_w := obter_atepacu_paciente(nr_atendimento_p, 'A');

select	count(*)
into STRICT	qt_passagens_uti_w
from	atend_paciente_unidade a,
	setor_atendimento b
where	a.nr_atendimento = nr_atendimento_p
and	b.cd_setor_atendimento = a.cd_setor_atendimento
and (b.cd_classif_setor = 4 or coalesce(ie_epimed,'N') = 'S');

-- Verifica se é a primeira entrada do paciente no setor de UTI
select	count(*)
into STRICT	qt_internacao_w
from	atend_paciente_unidade a,
	setor_atendimento b
where	nr_atendimento = nr_atendimento_p
and	a.cd_setor_atendimento = b.cd_setor_atendimento
and (b.cd_classif_setor = 4  or coalesce(ie_epimed,'N') = 'S');

-- Verifica se a entrada atual foi para o mesmo setor
select 	count(*)
into STRICT	qt_mov_mesmo_setor_w
from	atend_paciente_unidade
where	nr_seq_interno       = nr_seq_interno_w
and	nr_atendimento       = nr_atendimento_p
and	cd_setor_atendimento = cd_setor_atendimento_p;

-- Verifica se a entrada atual foi para outro setor de UTI
select  max(cd_classif_setor)
into STRICT	cd_classif_setor_w
from    atend_paciente_unidade a,
        setor_atendimento b
where   a.cd_setor_atendimento = b.cd_setor_atendimento
and     a.nr_seq_interno =  nr_seq_interno_w;


select 	count(*)
into STRICT	qt_mov_setor_w
from	atend_paciente_unidade a,
	setor_atendimento b
where	a.nr_seq_interno = nr_seq_interno_w
and	a.cd_setor_atendimento = b.cd_setor_atendimento
and  	nr_atendimento = nr_atendimento_p
and	a.cd_setor_atendimento <> cd_setor_atendimento_p
and (b.cd_classif_setor = 4 or coalesce(ie_epimed,'N') = 'S');

-- Reinternação na UTI
qt_reinternacao_w := 0;

if (cd_classif_setor_w <> 4) then

	select	count(*)
	into STRICT	qt_reinternacao_w
	from	atend_paciente_unidade a,
		setor_atendimento b
	where	a.cd_setor_atendimento = b.cd_setor_atendimento
	and   	a.nr_atendimento = nr_atendimento_p
	and (b.cd_classif_setor = 4 or coalesce(ie_epimed,'N') = 'S');

	if (qt_reinternacao_w > 0) then

		select	max(nr_seq_interno)
		into STRICT	nr_seq_interno_ww
		from	atend_paciente_unidade a,
			setor_atendimento b
		where 	a.nr_atendimento = nr_atendimento_p
		and	b.cd_setor_atendimento = a.cd_setor_atendimento
		and (b.cd_classif_setor = 4 or coalesce(ie_epimed,'N') = 'S');

		select (clock_timestamp() - dt_entrada_unidade)
		into STRICT	qt_horas_reint_w
		from	atend_paciente_unidade
		where	nr_atendimento = nr_atendimento_p
		and	nr_seq_interno = nr_seq_interno_ww;

		if (qt_horas_reint_w > 24) then
			ie_tipo_internacao_w := 1;
		else
			ie_tipo_internacao_w := 2;
		end if;
	end if;
end if;

-- saída do setor de UTI
select	cd_classif_setor
into STRICT	cd_classif_setor_atual_w
from 	setor_atendimento
where	cd_setor_atendimento = cd_setor_atendimento_p;


if (cd_classif_setor_atual_w <> 4) then

	select  count(*)
	into STRICT	qt_saida_uti_w
	from    atend_paciente_unidade a,
		setor_atendimento b
	where   a.cd_setor_atendimento = b.cd_setor_atendimento
	and     a.nr_seq_interno =  nr_seq_interno_w
	and (b.cd_classif_setor = 4 or coalesce(ie_epimed,'N') = 'S');

end if;

-- qt passagens UTI
select	count(nr_internacao) + 1
into STRICT	qt_pas_uti_w
from 	hsl_epimed_internacao_uti
where	nr_atendimento = nr_atendimento_p;

-- qt reinternações UTI
select	count(qt_passagem) + 1
into STRICT	qt_reint_w
from	hsl_epimed_internacao_uti
where	nr_atendimento = nr_atendimento_p;

if (ie_opcao_p = 'I') then
	qt_retorno := qt_internacao_w;
elsif (ie_opcao_p = 'M') then
	qt_retorno := qt_mov_mesmo_setor_w;
elsif (ie_opcao_p = 'D') then
	qt_retorno := qt_mov_setor_w;
elsif (ie_opcao_p = 'R') then
	qt_retorno := qt_reinternacao_w;
elsif (ie_opcao_p = 'TR') then
	qt_retorno := ie_tipo_internacao_w;
elsif (ie_opcao_p = 'SU') then
	qt_retorno := qt_saida_uti_w;
elsif (ie_opcao_p = 'P') then
	qt_retorno := qt_pas_uti_w;
elsif (ie_opcao_p = 'RI') then
	qt_retorno := qt_reint_w;
end if;

return	qt_retorno;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION hsl_obter_dados_inter_uti (nr_atendimento_p bigint, cd_setor_atendimento_p bigint, ie_opcao_p text) FROM PUBLIC; -- REVOKE ALL ON FUNCTION hsl_obter_dados_inter_uti_atx (nr_atendimento_p bigint, cd_setor_atendimento_p bigint, ie_opcao_p text) FROM PUBLIC;

