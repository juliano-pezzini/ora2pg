-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_qt_material_fat_orc ( cd_estabelecimento_p bigint, cd_material_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_setor_p bigint, qt_material_p bigint, cd_kit_material_p bigint, dt_entrada_p timestamp, dt_atendimento_p timestamp, qt_dose_p bigint, cd_unid_med_prescr_p text) RETURNS bigint AS $body$
DECLARE


qt_faturar_w			double precision	:= 0;
qt_regra_w			bigint;
ie_regra_disp_w			varchar(1);
qt_minimo_solic_w		double precision	:= 1;
nr_multiplo_w			double precision	:= 0;
qt_limite_min_w			double precision	:= 0;
qt_limite_max_w			double precision	:= 0;
nr_multiplo_qtde_w		double precision	:= 0;
qt_conv_estoque_consumo_w	double precision	:= 0;
cd_classe_material_w		integer;
cd_grupo_material_w		smallint;
cd_subgrupo_material_w		smallint;
qt_conv_estoque_consumo_ww	double precision;
qt_minimo_solic_ww		double precision;

dt_atendimento_w		timestamp;
dt_entrada_w			timestamp;

qt_fat_w			double precision	:= 0;
cd_unidade_medida_w		varchar(30);
qt_conversao_w			double precision;
cd_funcao_w                     integer;

c01 CURSOR FOR
	SELECT	a.ie_regra_disp,
		coalesce(qt_conv_estoque_consumo_ww,1),
		coalesce(a.qt_limite,0),
		coalesce(a.qt_limite_max, qt_material_p),
		nr_multiplo,
		qt_minimo_solic_ww
	from	material_regra_qt_fat a
	where	a.cd_estabelecimento			= cd_estabelecimento_p
	and	((coalesce(a.cd_material,cd_material_p)	= cd_material_p) or (coalesce(cd_material_p::text, '') = ''))
	and	((coalesce(a.cd_classe_material,coalesce(cd_classe_material_w,0))	= coalesce(cd_classe_material_w,0)) or (coalesce(cd_classe_material_w::text, '') = ''))
	and	((coalesce(a.cd_grupo_material,coalesce(cd_grupo_material_w,0))		= coalesce(cd_grupo_material_w,0)) or (coalesce(cd_grupo_material_w::text, '') = ''))
	and	((coalesce(a.cd_subgrupo_material,coalesce(cd_subgrupo_material_w,0))	= coalesce(cd_subgrupo_material_w,0)) or (coalesce(cd_subgrupo_material_w::text, '') = ''))
	and	((coalesce(a.cd_convenio,cd_convenio_p)	= cd_convenio_p) or (coalesce(cd_convenio_p::text, '') = ''))
	and 	((coalesce(a.cd_categoria, coalesce(cd_categoria_p,'0')) = coalesce(cd_categoria_p,'0')) or (coalesce(cd_categoria_p::text, '') = ''))
	and	((coalesce(a.cd_setor_atendimento,cd_setor_p)	= cd_setor_p) or (coalesce(cd_setor_p::text, '') = ''))
	and	coalesce(a.cd_perfil, coalesce(obter_perfil_ativo,0)) = coalesce(obter_perfil_ativo,0)
	and (coalesce(a.cd_kit_material, coalesce(cd_kit_material_p,0)) = coalesce(cd_kit_material_p,0))
	and	(((dt_atendimento_w between coalesce(dt_inicio_vigencia,dt_atendimento_w) and coalesce(dt_final_vigencia,dt_atendimento_w + 360)) and (coalesce(ie_tipo_data,'A') = 'A')) or
		 ((dt_entrada_w between coalesce(dt_inicio_vigencia,dt_entrada_w) and coalesce(dt_final_vigencia,dt_entrada_w + 360)) and (coalesce(ie_tipo_data,'A') = 'E')))
	and (coalesce(a.cd_funcao, cd_funcao_w) = cd_funcao_w)
        order by
		coalesce(a.cd_material,0),
		coalesce(a.cd_grupo_material,0),
		coalesce(a.cd_subgrupo_material,0),
		coalesce(a.cd_classe_material,0),
		coalesce(a.cd_kit_material,0),
		coalesce(a.cd_setor_atendimento,0),
		coalesce(a.cd_perfil,0),
		coalesce(a.cd_convenio,0),
		coalesce(a.cd_categoria,'0'),
                coalesce(a.cd_funcao,0);


BEGIN

cd_funcao_w     := coalesce(obter_funcao_ativa, 0);

select	coalesce(b.qt_minimo_multiplo_solic,1),
	b.qt_conv_estoque_consumo
into STRICT	qt_conv_estoque_consumo_ww,
	qt_minimo_solic_ww
from	material b
where	b.cd_material = cd_material_p;

select	cd_classe_material,
	cd_grupo_material,
	cd_subgrupo_material
into STRICT	cd_classe_material_w,
	cd_grupo_material_w,
	cd_subgrupo_material_w
from	estrutura_material_v
where	cd_material = cd_material_p;

qt_faturar_w		:= qt_material_p;

dt_entrada_w		:= coalesce(dt_entrada_p, clock_timestamp());
dt_atendimento_w	:= coalesce(dt_atendimento_p, clock_timestamp());

select	count(*)
into STRICT	qt_regra_w
from	material_regra_qt_fat
where	cd_estabelecimento = cd_estabelecimento_p;

if (qt_regra_w > 0) then
	OPEN C01;
	LOOP
	FETCH C01 into
		ie_regra_disp_w,
		qt_minimo_solic_w,
		qt_limite_min_w,
		qt_limite_max_w,
		nr_multiplo_qtde_w,
		qt_conv_estoque_consumo_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		BEGIN
		if (ie_regra_disp_w = 'C') then
			begin
			if	((trunc(qt_material_p / qt_minimo_solic_w) * qt_minimo_solic_w) = qt_material_p) then
				nr_multiplo_w	:= (qt_material_p / qt_minimo_solic_w);
			else
				nr_multiplo_w   := trunc(qt_material_p / qt_minimo_solic_w) + 1;
				end if;
			qt_faturar_w	:= qt_minimo_solic_w * nr_multiplo_w;
			end;
		elsif (ie_regra_disp_w = 'M') then
			qt_faturar_w		:= qt_material_p;
		elsif (ie_regra_disp_w = 'S') then
			begin
			if (trunc(qt_material_p,0) = qt_material_p) then
				qt_faturar_w	:= qt_material_p;
			else
				qt_faturar_w	:= trunc(qt_material_p,0) + 1;
			end if;
			end;
		elsif (ie_regra_disp_w = 'L') then  /* Fabricio em 01/09/2008 OS 97666  conforme definido em reuniao  Edilson/Ricardo/Alejandra/Fabricio  */
			begin

			if (qt_material_p < qt_limite_min_w) then
				qt_faturar_w	:= qt_limite_min_w;
			elsif (qt_material_p > qt_limite_max_w) then
				qt_faturar_w	:= qt_limite_max_w;
			else
				qt_faturar_w	:= qt_material_p;
			end if;

			end;
		elsif (ie_regra_disp_w = 'P') then  /* Fabricio em 28/09/2009 OS 161770   */
			begin
			qt_faturar_w := qt_material_p; -- Incluido essa linha devido a OS 1728524, onde quando havia 2 regras o sistena estava aplicando o multiplo sobre o resultado da primeira regra.
			qt_faturar_w := qt_faturar_w * coalesce(nr_multiplo_qtde_w,1);

			end;
		elsif (ie_regra_disp_w = 'D') then  /* Fabricio OS 480663  */
			begin

			qt_faturar_w:= dividir(qt_faturar_w , coalesce(nr_multiplo_qtde_w,1));

			end;
		elsif (ie_regra_disp_w = 'B') then  /* Fabricio OS 507022  */
			begin

			qt_faturar_w:= dividir(qt_faturar_w , coalesce(nr_multiplo_qtde_w,1));

			if (trunc(qt_faturar_w) = qt_faturar_w) then
				qt_faturar_w:= trunc(qt_faturar_w);
			else
				if (qt_faturar_w < 0) then
					qt_faturar_w:= trunc(qt_faturar_w) - 1;
				else
					qt_faturar_w:= trunc(qt_faturar_w) + 1;
				end if;
			end if;

			end;
		elsif (ie_regra_disp_w = 'A') then
			begin
			-- ex: 233 ml  (1Fr tem 100 ml), deve se cobrar 300ml porem baixar de estoque apenas 233ml
			if (mod(qt_material_p, qt_conv_estoque_consumo_w) <> 0) then --Se a divisao nao e exata (Lancamento de qtde completa)
				qt_faturar_w:= trunc(dividir(qt_material_p , qt_conv_estoque_consumo_w)); -- ex: 233/100 = 2,33     Trunc(2,33) = 2
				if (qt_faturar_w >= 0) then -- Se e positivo
					qt_faturar_w:= qt_faturar_w + 1; --ex: 2 + 1 = 3
					qt_faturar_w:= qt_faturar_w * qt_conv_estoque_consumo_w; --ex: 3 x 100ml (que corresponde e um frasco)
				else				-- Se ? negativo (No caso de devolu??o)
					qt_faturar_w:= qt_faturar_w - 1; --ex:  -2 - 1 = -3
					qt_faturar_w:= qt_faturar_w * qt_conv_estoque_consumo_w; --ex: -3 x 100ml (que corresponde e um frasco)
				end if;
			end if;
			end;
		elsif (ie_regra_disp_w = 'T') then
			begin
			-- ex: 6 gts  (1Fr tem 400 gts (Estoque x Consumo)), deve se cobrar 20gts que equivale a 1 ml, pois o convenio paga em ml, porem o medico prescreve em ml, por?m baixar de estoque apenas 6 gts
			if (mod(qt_material_p, qt_limite_min_w) <> 0) then --Se a divisao nao e exata (Lancamento de qtde completa)
				qt_faturar_w:= trunc(dividir(qt_material_p , qt_limite_min_w)); -- ex: 6/20 = 0,3     Trunc(0,3) = 0
				qt_faturar_w:= qt_faturar_w + 1; --ex: 0 + 1 = 1
				qt_faturar_w:= qt_faturar_w * qt_limite_min_w; --ex: 1 x 20gts (que corresponde a um ml)
			end if;
			end;
		elsif (ie_regra_disp_w = 'X') then
			begin
			/*Heckmann OS 226628  Pega a quantidade de lancamento do item e verifica se encaixa em alguma regra de faixa de dosagem
			Ex.: tem regra para um item com faixa de 1 a 147, o usuario lanca qtd 50 na conta, o sistema cobra quantidade igual a 147*/
			qt_fat_w	:= 0;
			begin
			select	qt_limite_max_w
			into STRICT	qt_fat_w
			
			where	qt_material_p between qt_limite_min_w and qt_limite_max_w;
			exception
				when others  then
				qt_fat_w:= 0;
			end;

			if (coalesce(qt_fat_w,0) > 0) then
				qt_faturar_w	:= qt_fat_w;
			end if;
			end;
		elsif (ie_regra_disp_w = 'Q') then
			begin
			-- Quantidade Prescrita  OS 207305
			qt_faturar_w	:= qt_material_p;
			
			end;
		elsif (ie_regra_disp_w = 'Y') then

			/*Heckmann OS 300142  Pega a quantidade  prescrita do item e verifica se encaixa em alguma regra de faixa de dosagem
			Ex.: tem regra para um item com faixa de 1 a 110, o prescreve qtd 10 mg , o sistema arredonda para 110 e divide
				pela regra de conversao unidade de medida (Cadastro de Materiais / Farmacia / Conv unid),
				entao, teriamos:
					110/440 = 0,25
				esta seria a quantidade a ser cobrada do paciente
				porem, a quantidade a ser baixada do estoque permanece:
					10/440 = 0,02*/
			if (coalesce(qt_dose_p,0) > 0) then
								
				qt_faturar_w		:= qt_dose_p;
				cd_unidade_medida_w	:= coalesce(cd_unid_med_prescr_p,'UMS');
				
				if (qt_material_p < 0) and (qt_faturar_w > 0) then
					qt_faturar_w := qt_faturar_w * -1;
				end if;			

				qt_fat_w	:= 0;
				begin
				select	qt_limite_max_w
				into STRICT	qt_fat_w
				
				where	qt_faturar_w between qt_limite_min_w and qt_limite_max_w;
				exception
					when others then
					qt_fat_w:= 0;
				end;

				if (coalesce(qt_fat_w,0) > 0) then

					begin
					select	coalesce(obter_conversao_unid_med(cd_material_p,cd_unidade_medida_w),1)
					into STRICT	qt_conversao_w
					;
					exception
						when others then
						qt_conversao_w	:= 0;
					end;

					if (qt_conversao_w > 0) then
						qt_faturar_w	:= qt_fat_w / qt_conversao_w;
					else
						qt_faturar_w	:= qt_fat_w;

					end if;

				end if;
			end if;
                elsif (ie_regra_disp_w = 'E') then
			begin
				/*ex: Informado 117, retornar 150 (117 / 50 = 2,34 > 3 * 50 = 150)*/

				qt_faturar_w:= (ceil(dividir(qt_material_p , coalesce(nr_multiplo_qtde_w,1))) * coalesce(nr_multiplo_qtde_w,1));
			end;
                elsif (ie_regra_disp_w = 'F') then
			begin
				qt_faturar_w:= (ceil(qt_material_p) * coalesce(nr_multiplo_qtde_w,1));
			end;
		end if;


		END;
	END LOOP;
	CLOSE C01;
end if;

return	round((qt_faturar_w)::numeric,3);

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_qt_material_fat_orc ( cd_estabelecimento_p bigint, cd_material_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_setor_p bigint, qt_material_p bigint, cd_kit_material_p bigint, dt_entrada_p timestamp, dt_atendimento_p timestamp, qt_dose_p bigint, cd_unid_med_prescr_p text) FROM PUBLIC;

