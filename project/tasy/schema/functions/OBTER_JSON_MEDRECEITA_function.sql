-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_json_medreceita ( nr_atendimento_p med_receita.nr_atendimento%type, cd_pessoa_fisica_p pessoa_fisica.cd_pessoa_fisica%type) RETURNS text AS $body$
DECLARE


med_Especialidades_w	 	varchar(4000);
alergias_w          		varchar(4000);
med_diagnostico_w    		varchar(4000);
cd_doenca_w       		varchar(4000);

receita_numero_w               	med_receita.nr_sequencia%type;
dt_receita_w                   	varchar(10);
registroprontuarioeletronico_w 	med_receita.nr_atendimento_hosp%type;
med_referenciaexterna_w        	pessoa_fisica.cd_pessoa_fisica%type;
med_reg_conselho_w             	CONSELHO_PROFISSIONAL.sg_conselho%type;
med_reg_numero_w               	varchar(30);
med_reg_uf_w                   	medico.uf_crm%type;
med_nome_w                     	pessoa_fisica.nm_pessoa_fisica%type;
med_documento_w                	pessoa_fisica.nr_cpf%type;
med_end_cep_w                  	compl_pessoa_fisica.cd_cep%type;
med_end_endereco1_w            	varchar(4000);
pac_ReferenciaExterna_w        	pessoa_fisica.cd_pessoa_fisica%type;
pac_nome_w                     	pessoa_fisica.nm_pessoa_fisica%type;
pac_sexo_w                     	pessoa_fisica.ie_sexo%type;
pac_cpf_w                      	pessoa_fisica.NR_CPF%type;
pac_end_cep_w                  	compl_pessoa_fisica.cd_cep%type;
pac_end_endereco1_w            	varchar(4000);
pac_end_endereco2_w            	compl_pessoa_fisica.ds_complemento%type;
pac_end_bairro_w               	compl_pessoa_fisica.ds_BAIRRO%type;
pac_end_municipio_w            	compl_pessoa_fisica.DS_MUNICIPIO%type;
pac_end_estado_w               	compl_pessoa_fisica.SG_ESTADO%type;
pac_celular_w                  	pessoa_fisica.NR_TELEFONE_CELULAR%type;
pac_dt_nascimento_w            	varchar(10);
estab_cep_w                    	pessoa_juridica.cd_cep%type;
estab_endereco_w               	varchar(4000);
estab_complemento_w            	pessoa_juridica.ds_complemento%type;
estab_municipio_w              	pessoa_juridica.DS_MUNICIPIO%type;
estab_estado_w                 	pessoa_juridica.SG_ESTADO%type;
estab_razao_social_w           	pessoa_juridica.ds_razao_social%type;
estab_cns_w                    	estabelecimento.CD_CNS%type;
estab_bairro_w                 	pessoa_juridica.ds_BAIRRO%type;
fone_w                         	pessoa_juridica.nr_telefone%type;
empresa_w                       empresa.nm_razao_social%type;
json_cid_list_w		              philips_json_list;
json_alergia_list_w	            philips_json_list;
json_especial_list_w	          philips_json_list;
pac_email_w                     compl_pessoa_fisica.ds_email%type;
pac_qt_peso_w                   pessoa_fisica.qt_peso%type;
pac_qt_altura_cm_w              pessoa_fisica.qt_altura_cm%type;
pac_cd_pessoa_mae_w             compl_pessoa_fisica.nm_contato%type;
conversao_meio_externo_w        conversao_meio_externo.ds_conv_longa%type;
pac_nr_seq_cor_pele_w           pessoa_fisica.nr_seq_cor_pele%type;
pac_etnia_w                     cor_pele.ds_cor_pele%type;
med_cns_w                       pessoa_fisica.nr_cartao_nac_sus%type;
pac_cart_convenio_w             atend_categoria_convenio.cd_usuario_convenio%type;
pac_cart_produto_w              categoria_convenio.ds_categoria%type;
pac_cart_empresa_w              convenio.ds_convenio%type;

C01 CURSOR FOR
  SELECT  distinct(a.cd_doenca)
  from  diagnostico_doenca a
  where  nr_atendimento  = nr_atendimento_p;

C02 CURSOR FOR
 SELECT   
   COALESCE(COALESCE(substr(obter_estrut_princ_ativo(a.nr_seq_ficha_tecnica,'P'),1,2000),substr(obter_desc_dcb(a.nr_seq_dcb),1,80)), 
   CASE WHEN a.ie_nega_alergias='N' THEN substr(obter_desc_alergeno(a.nr_seq_tipo),1,80)  ELSE obter_desc_expressao(346740) END )
   FROM paciente_alergia a
LEFT OUTER JOIN nivel_seguranca_alerta b ON (a.nr_seq_nivel_seg = b.nr_sequencia)
WHERE a.cd_pessoa_fisica = pac_ReferenciaExterna_w and (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '') and coalesce(a.dt_inativacao::text, '') = '' and consiste_se_exibe_alergia(nr_seq_tipo)	= 'S' and coalesce(a.ie_alerta,'S')			= 'S' and (coalesce(dt_fim::text, '') = '' or dt_fim > clock_timestamp()) and coalesce(a.ie_nega_alergias, 'N') = 'N' and cd_pessoa_fisica = pac_ReferenciaExterna_w;


 
 c03 CURSOR FOR
	SELECT 	b.ds_especialidade
	from 	especialidade_medica b,
		medico_especialidade a
	where 	a.cd_pessoa_fisica	= cd_pessoa_fisica_p
	and	a.cd_especialidade	= b.cd_especialidade;
	
	c04 CURSOR FOR
	SELECT
		coalesce(actc.cd_usuario_convenio, null) as cd_usuario_convenio,
		coalesce(ctca.ds_categoria, null) as ds_produto,
		coalesce(conv.ds_convenio, null) as ds_empresa
	from atendimento_paciente ap
	left join atend_categoria_convenio actc on actc.nr_atendimento = ap.nr_atendimento
	left join CATEGORIA_CONVENIO ctca on actc.cd_convenio = ctca.cd_convenio and actc.cd_categoria = ctca.cd_categoria
	left join CONVENIO conv  on conv.cd_convenio = ctca.cd_convenio
	where ap.nr_atendimento =  nr_atendimento_p
	and actc.dt_inicio_vigencia = 
	(SELECT max(acco.dt_inicio_vigencia) 
	from atend_categoria_convenio acco  
	where acco.nr_atendimento = ap.nr_atendimento);


BEGIN

declare
  json_aux_w       philips_json;
  json_it_aux_w    philips_json;
  ret_json_aux_w   philips_json;
  ds_message_w text;
begin
  json_aux_w     := philips_json();
  json_it_aux_w  := philips_json();
  ret_json_aux_w := philips_json();
  begin
    select distinct	
      ap.nr_atendimento as registroprontuarioeletronico,
      TO_CHAR(clock_timestamp(), 'YYYY-MM-DD'),
      pf.cd_pessoa_fisica as pac_ReferenciaExterna,
      pf.nm_pessoa_fisica as pac_nome,
      pf.ie_sexo as pac_sexo,
      pf.NR_CPF as pac_cpf,
      pacf.cd_cep as pac__end_cep,
      pacf.ds_endereco || ',' || pacf.NR_ENDERECO as pac__end_endereco1,
      pacf.ds_complemento as pac_end_endereco2,
      pacf.ds_BAIRRO as  pac__end_bairro,
      pacf.DS_MUNICIPIO as pac_end_municipio,
      pacf.SG_ESTADO as pac__end_estado,
      pf.NR_DDD_CELULAR || pf.NR_TELEFONE_CELULAR as pac_celular,
      TO_CHAR(pf.dt_nascimento, 'YYYY-MM-DD'),
      pj.cd_cep as estab_cep,
      pj.ds_endereco as estab_endereco,
      pj.ds_complemento || '-' || pj.NR_ENDERECO as estab_complemento,
      pj.ds_BAIRRO as  estab_bairro,
      PJ.DS_MUNICIPIO as estab_municipio,
      PJ.SG_ESTADO as estab_estado,
      pj.ds_razao_social,
      COALESCE(es.CD_CNS, pj.cd_cnes),
      pj.nr_telefone as contato,
      COALESCE(emp.nm_razao_social, obter_desc_expressao(309956)) as empresa,
      coalesce(pacf.ds_email, null) as ds_email,
      coalesce(pf.qt_peso, 0) as pac_qt_peso,
      coalesce(pf.qt_altura_cm,0 ) as pac_qt_altura_cm,
      coalesce(pf.cd_pessoa_mae, coalesce(pacf.nm_contato, null)) as pac_cd_pessoa_mae_w,
      coalesce(cp.ds_cor_pele,null) as ds_cor_pele,
      coalesce((select DS_CONV_LONGA from CONVERSAO_MEIO_EXTERNO where NM_TABELA =  'NEXODATA'), null) as ds_url_logo
    into STRICT
      registroprontuarioeletronico_w,
      dt_receita_w,
      pac_ReferenciaExterna_w,
      pac_nome_w,
      pac_sexo_w,
      pac_cpf_w,
      pac_end_cep_w,
      pac_end_endereco1_w,
      pac_end_endereco2_w,
      pac_end_bairro_w,
      pac_end_municipio_w,
      pac_end_estado_w,
      pac_celular_w,
      pac_dt_nascimento_w,
      estab_cep_w,
      estab_endereco_w,
      estab_complemento_w,
      estab_bairro_w,
      estab_municipio_w,
      estab_estado_w,
      estab_razao_social_w,
      estab_cns_w,
      fone_w,
      empresa_w,
      pac_email_w,
      pac_qt_peso_w,
      pac_qt_altura_cm_w,
      pac_cd_pessoa_mae_w,
      pac_etnia_w,
      conversao_meio_externo_w
    from 	atendimento_paciente ap
      left join 	pessoa_fisica pf on pf.cd_pessoa_fisica = ap.cd_pessoa_fisica
      left join   compl_pessoa_fisica pacf on  pacf.cd_pessoa_fisica  = pf.cd_pessoa_fisica
        and pacf.ie_tipo_complemento = 1  and coalesce(pacf.nr_seq_tipo_compl_adic::text, '') = ''
      left join 	estabelecimento es on es.cd_estabelecimento = ap.cd_estabelecimento
      left join 	pessoa_juridica pj on pj.cd_cgc = es.cd_cgc
      left join   empresa emp on emp.cd_empresa = es.cd_empresa	
      left join cor_pele cp on cp.nr_sequencia = pf.nr_seq_cor_pele
    where   	ap.nr_atendimento =  nr_atendimento_p;

    select	md.cd_pessoa_fisica as med_referenciaexterna,
		cp.sg_conselho as med_reg_conselho,
		COALESCE(mdc.nr_crm,md.DS_CODIGO_PROF)  as med_reg_numero,
		COALESCE(mdc.uf_crm,md.uf_conselho)  as med_reg_uf,
		md.nm_pessoa_fisica as med_nome,
		md.nr_cpf as med_documento,
		cpf.cd_cep as med_end_cep,
		cpf.ds_endereco || ',' || cpf.nr_endereco as med_end_endereco1,
    md.nr_cartao_nac_sus
    into STRICT 	med_referenciaexterna_w,
		med_reg_conselho_w,
		med_reg_numero_w,
		med_reg_uf_w,
		med_nome_w,
		med_documento_w,
		med_end_cep_w,
		med_end_endereco1_w,
    med_cns_w
    from 	pessoa_fisica md
    left join 	CONSELHO_PROFISSIONAL cp on cp.nr_sequencia = md.nr_seq_conselho
    left join 	medico mdc on mdc.cd_pessoa_fisica = md.cd_pessoa_fisica
    left join 	compl_pessoa_fisica cpf on  cpf.cd_pessoa_fisica  = md.cd_pessoa_fisica and cpf.nr_sequencia = 1
    where       md.cd_pessoa_fisica = cd_pessoa_fisica_p;

  
  json_cid_list_w	:= philips_json_list();
 OPEN C01;
  LOOP
  FETCH C01 into
    cd_doenca_w;
  EXIT WHEN NOT FOUND; /* apply on c01 */
    BEGIN
    json_cid_list_w.append(cd_doenca_w);
    END;
  END LOOP;
  CLOSE C01;

  json_alergia_list_w	:= philips_json_list();
  OPEN C02;
  LOOP
  FETCH C02 into
    alergias_w;
  EXIT WHEN NOT FOUND; /* apply on c02 */
    BEGIN
      json_alergia_list_w.append(alergias_w);
    END;
  END LOOP;
  CLOSE C02;

  json_especial_list_w	:= philips_json_list();
  OPEN C03;
  LOOP
  FETCH C03 into
    med_especialidades_w;
  EXIT WHEN NOT FOUND; /* apply on C03 */
    BEGIN
    json_especial_list_w.append(med_especialidades_w);
    END;
  END LOOP;
  CLOSE C03;

  OPEN C04;
  LOOP
  FETCH C04 into
    pac_cart_convenio_w,
    pac_cart_produto_w,
    pac_cart_empresa_w;
  EXIT WHEN NOT FOUND; /* apply on c04 */
    BEGIN
      json_cid_list_w.append(pac_cart_convenio_w);
	  json_cid_list_w.append(pac_cart_produto_w);
	  json_cid_list_w.append(pac_cart_empresa_w);
    END;
  END LOOP;
  CLOSE C04;
   json_cid_list_w	:= philips_json_list();


  
  ret_json_aux_w.put('DataPrescricao', dt_receita_w);
  ret_json_aux_w.put('SubParceiro', empresa_w);
  json_aux_w.put('TipoDocumento', '"CPF"');
 -- json_aux_w.put('Especialidades','[' || med_especialidades_w || ']');
  json_aux_w.put('Especialidades',json_especial_list_w);
  json_it_aux_w.put('Numero',med_reg_numero_w);
  json_it_aux_w.put('Conselho',med_reg_conselho_w);
  json_it_aux_w.put('UF',med_reg_uf_w);
  json_aux_w.path_put('RegistroProfissional', json_it_aux_w);
  json_aux_w.put('Nome', med_nome_w);
  json_aux_w.put('Documento', med_documento_w);
  json_aux_w.put('ReferenciaExterna', med_referenciaexterna_w);
  json_aux_w.put('CNS', med_cns_w);
  ret_json_aux_w.path_put('Medico',json_aux_w);

  json_it_aux_w := philips_json();
  json_aux_w := philips_json();

  if (pac_cart_convenio_w IS NOT NULL AND pac_cart_convenio_w::text <> '') then
    json_aux_w.put('Numero', pac_cart_convenio_w);
    json_aux_w.put('Produto', pac_cart_produto_w);
    json_aux_w.put('Empresa', pac_cart_empresa_w);
    ret_json_aux_w.path_put('Convenio',json_aux_w);
  end if;

  json_it_aux_w := philips_json();
  json_aux_w := philips_json();

  
  json_aux_w.put('Alergias',json_alergia_list_w);
  json_aux_w.put('Nome',pac_nome_w );
  json_aux_w.put('Etnia',pac_etnia_w );
  json_aux_w.put('Documento',pac_cpf_w );
  json_aux_w.put('Nascimento',pac_dt_nascimento_w );
  json_aux_w.put('NomeMae',pac_cd_pessoa_mae_w );
  json_aux_w.put('Email',pac_email_w );
  json_aux_w.put('Peso',pac_qt_peso_w );
  json_aux_w.put('Altura',pac_qt_altura_cm_w );
  json_aux_w.put('Sexo',pac_sexo_w );
  json_it_aux_w.put('Endereco1',pac_end_endereco1_w);
  json_it_aux_w.put('Endereco2',pac_end_endereco2_w);
  json_it_aux_w.put('Bairro',pac_end_bairro_w);
  json_it_aux_w.put('Cidade',pac_end_municipio_w);
  json_it_aux_w.put('Estado',pac_end_estado_w);
  json_it_aux_w.put('CodigoPostal',pac_end_cep_w);
  json_aux_w.path_put('Endereco',json_it_aux_w);
  json_aux_w.put('ReferenciaExterna',pac_ReferenciaExterna_w);
  json_aux_w.put('TelefoneCelular',pac_celular_w);

  ret_json_aux_w.path_put('Paciente',json_aux_w);

  json_it_aux_w := philips_json();
  json_aux_w := philips_json();

  json_it_aux_w.put('ReferenciaExterna',registroprontuarioeletronico_w);
  ret_json_aux_w.path_put('RegistroProntuarioEletronico',json_it_aux_w);

  json_it_aux_w := philips_json();

  json_aux_w.put('Nome',estab_razao_social_w);
  json_aux_w.put('CNES',estab_cns_w);
  json_aux_w.put('Logo',conversao_meio_externo_w);
  json_it_aux_w.put('Endereco1',estab_endereco_w);
  json_it_aux_w.put('Endereco2',estab_complemento_w);
  json_it_aux_w.put('Bairro',estab_bairro_w);
  json_it_aux_w.put('Cidade',estab_municipio_w);
  json_it_aux_w.put('Estado',estab_estado_w);
  json_it_aux_w.put('CodigoPostal',estab_cep_w);
  json_aux_w.path_put('Endereco',json_it_aux_w);
  json_it_aux_w := philips_json();
  json_it_aux_w.put('TelefoneComercial',fone_w);
  json_aux_w.path_put('Contato',json_it_aux_w);
  ret_json_aux_w.path_put('Estabelecimento',json_aux_w);
  ret_json_aux_w.put('CID10',json_cid_list_w);

  dbms_lob.createtemporary(ds_message_w, TRUE);
  ret_json_aux_w.(ds_message_w);

  exception
    when no_data_found OR too_many_rows then
      ds_message_w := '';
  end;

  return ds_message_w;
  end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_json_medreceita ( nr_atendimento_p med_receita.nr_atendimento%type, cd_pessoa_fisica_p pessoa_fisica.cd_pessoa_fisica%type) FROM PUBLIC;

