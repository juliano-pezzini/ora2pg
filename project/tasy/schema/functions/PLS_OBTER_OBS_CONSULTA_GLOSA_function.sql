-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_obs_consulta_glosa ( nr_seq_protocolo_p bigint, nr_seq_conta_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_motivo_glosa_p bigint) RETURNS varchar AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Retornar a observação das ocorrências/glosas na consulta de glosas do portal web.
Teve de ser criada devido a poder ter observações diferentes para cada conta conforme a ocorrência.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [ X ] Portal [  ]  Relatórios [ X] Outros: Dic Objeto
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: Cuidar com performance, esta function é chamada em cada ocorrência quando o prestador
acessa a consulta de glosas no portal.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_observacao_w		varchar(4000);
qt_registro_w		bigint;

c01 CURSOR FOR
	SELECT	b.ds_observacao
	from	pls_ocorrencia_benef b,
		pls_conta a
	where	a.nr_sequencia		= b.nr_seq_conta
	and	a.nr_seq_protocolo	= nr_seq_protocolo_p
	and	b.nr_seq_ocorrencia	= nr_seq_ocorrencia_p
	and	(nr_seq_ocorrencia_p IS NOT NULL AND nr_seq_ocorrencia_p::text <> '')
	and	(b.ds_observacao IS NOT NULL AND b.ds_observacao::text <> '')
	group by
		b.ds_observacao;

c02 CURSOR FOR
	SELECT	b.ds_observacao
	from	pls_conta_glosa b,
		pls_conta a
	where	a.nr_sequencia	= b.nr_seq_conta
	and	coalesce(b.nr_seq_conta_proc::text, '') = ''
	and	coalesce(b.nr_seq_conta_mat::text, '') = ''
	and	coalesce(b.nr_seq_proc_partic::text, '') = ''
	and	a.nr_seq_protocolo	= nr_seq_protocolo_p
	and	b.nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p
	--and	nr_seq_ocorrencia_p is null
	and	(nr_seq_motivo_glosa_p IS NOT NULL AND nr_seq_motivo_glosa_p::text <> '')
	and	(b.ds_observacao IS NOT NULL AND b.ds_observacao::text <> '')
	group by
		b.ds_observacao;

c03 CURSOR FOR
	SELECT	b.ds_observacao
	from	pls_conta_glosa b,
		pls_conta_proc p,
		pls_conta a
	where	a.nr_sequencia	= p.nr_seq_conta
	and	p.nr_sequencia	= b.nr_seq_conta_proc
	and	a.nr_seq_protocolo	= nr_seq_protocolo_p
	and	b.nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p
	--and	nr_seq_ocorrencia_p is null
	and	(nr_seq_motivo_glosa_p IS NOT NULL AND nr_seq_motivo_glosa_p::text <> '')
	and	(b.ds_observacao IS NOT NULL AND b.ds_observacao::text <> '')
	group by
		b.ds_observacao;

c04 CURSOR FOR
	SELECT	b.ds_observacao
	from	pls_conta_glosa b,
		pls_conta_mat p,
		pls_conta a
	where	a.nr_sequencia	= p.nr_seq_conta
	and	p.nr_sequencia	= b.nr_seq_conta_mat
	and	a.nr_seq_protocolo	= nr_seq_protocolo_p
	and	b.nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p
	--and	nr_seq_ocorrencia_p is null
	and	(nr_seq_motivo_glosa_p IS NOT NULL AND nr_seq_motivo_glosa_p::text <> '')
	and	(b.ds_observacao IS NOT NULL AND b.ds_observacao::text <> '')
	group by
		b.ds_observacao;



BEGIN
ds_observacao_w	:= null;
if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	if (nr_seq_ocorrencia_p IS NOT NULL AND nr_seq_ocorrencia_p::text <> '') then
		select	max(b.ds_observacao)
		into STRICT	ds_observacao_w
		from	pls_ocorrencia_benef b,
			pls_conta a
		where	a.nr_sequencia		= b.nr_seq_conta
		and	a.nr_sequencia		= nr_seq_conta_p
		and	b.nr_seq_ocorrencia	= nr_seq_ocorrencia_p;
	elsif (nr_seq_motivo_glosa_p IS NOT NULL AND nr_seq_motivo_glosa_p::text <> '') then
		select	max(b.ds_observacao)
		into STRICT	ds_observacao_w
		from	pls_conta_glosa b,
			pls_conta a
		where	a.nr_sequencia	= b.nr_seq_conta
		and	coalesce(b.nr_seq_conta_proc::text, '') = ''
		and	coalesce(b.nr_seq_conta_mat::text, '') = ''
		and	coalesce(b.nr_seq_proc_partic::text, '') = ''
		and	a.nr_sequencia	= nr_seq_conta_p
		and	b.nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p;

		if (coalesce(ds_observacao_w::text, '') = '') then
			select	max(b.ds_observacao)
			into STRICT	ds_observacao_w
			from	pls_conta_glosa b,
				pls_conta_proc p,
				pls_conta a
			where	a.nr_sequencia	= p.nr_seq_conta
			and	p.nr_sequencia	= b.nr_seq_conta_proc
			and	a.nr_sequencia	= nr_seq_conta_p
			and	b.nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p;

			if (coalesce(ds_observacao_w::text, '') = '') then
				select	max(b.ds_observacao)
				into STRICT	ds_observacao_w
				from	pls_conta_glosa b,
					pls_conta_mat p,
					pls_conta a
				where	a.nr_sequencia	= p.nr_seq_conta
				and	p.nr_sequencia	= b.nr_seq_conta_mat
				and	a.nr_sequencia	= nr_seq_conta_p
				and	b.nr_seq_motivo_glosa	= nr_seq_motivo_glosa_p;
			end if;
		end if;
	end if;
elsif (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then
	qt_registro_w	:= 0;
	open c01;
	loop
	fetch c01 into
		ds_observacao_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		qt_registro_w	:= qt_registro_w + 1;
		end;
	end loop;
	close c01;

	if (coalesce(ds_observacao_w::text, '') = '') then
		qt_registro_w	:= 0;
		open c02;
		loop
		fetch c02 into
			ds_observacao_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			qt_registro_w	:= qt_registro_w + 1;
			end;
		end loop;
		close c02;

		if (coalesce(ds_observacao_w::text, '') = '') then
			qt_registro_w	:= 0;
			open c03;
			loop
			fetch c03 into
				ds_observacao_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				begin
				qt_registro_w	:= qt_registro_w + 1;
				end;
			end loop;
			close c03;

			if (coalesce(ds_observacao_w::text, '') = '') then
				qt_registro_w	:= 0;
				open c04;
				loop
				fetch c04 into
					ds_observacao_w;
				EXIT WHEN NOT FOUND; /* apply on c04 */
					begin
					qt_registro_w	:= qt_registro_w + 1;
					end;
				end loop;
				close c04;
			end if;
		end if;
	end if;

	/* Se tiver observações diferentes no protocolo para a mesma ocorrência, deve listar no nível da conta */

	if (qt_registro_w > 1) then
		ds_observacao_w	:= null;
	end if;
end if;

return	ds_observacao_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_obs_consulta_glosa ( nr_seq_protocolo_p bigint, nr_seq_conta_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_motivo_glosa_p bigint) FROM PUBLIC;

