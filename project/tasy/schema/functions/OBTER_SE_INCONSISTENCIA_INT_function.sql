-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_inconsistencia_int ( nr_sequencia_p bigint ) RETURNS varchar AS $body$
DECLARE


is_multiple_wsi_w			varchar(1);
nr_seq_inf_integracao_w		INFORMACAO_INTEGRACAO.nr_sequencia%type;
ie_asynchronous_message_w   INFORMACAO_INTEGRACAO.IE_TIPO_UTILIZACAO%type;

/*
HL7
XML
*/
ie_message_type_w   varchar(3);
ds_retorno_w        varchar(2000);
qt_integracao_w     bigint;
qt_controle_w       bigint;
is_complete_w       boolean := false;

nr_ip_p             servidor_integracao.IP_CONEXAO%type;
nr_porta_p          servidor_integracao.NR_PORTA%type;
ie_servidor_p       servidor_integracao.IE_SERVIDOR%type;
NR_PORTA_LISTENER_w servidor_integracao.NR_PORTA_LISTENER%type;



BEGIN
ds_retorno_w    := Wheb_mensagem_pck.get_texto(1209950);
select	max(a.nr_seq_inf_integracao)		
into STRICT	nr_seq_inf_integracao_w
from	CLIENTE_INTEGRACAO a
where	a.nr_sequencia = nr_sequencia_p;

--Check if the message is a hl7 or xml structure
select	coalesce(max(CASE WHEN coalesce(to_char(a.NR_SEQ_TIPO_HL7), to_char(a.NR_SEQ_MENS_HL7), '0')='0' THEN  CASE WHEN coalesce(to_char(a.NR_SEQ_PROJ_XML), a.DS_CLASSE_JAVA, '0')='0' THEN  null  ELSE 'XML' END   ELSE 'HL7' END ),'0'),
        max(a.IE_TIPO_UTILIZACAO)
into STRICT	ie_message_type_w,
        ie_asynchronous_message_w
from	INFORMACAO_INTEGRACAO a
where	a.nr_sequencia = nr_seq_inf_integracao_w;

if (ie_message_type_w <> '0') then

    select  count(1)
    into STRICT    qt_controle_w
    from    CLIENTE_INTEGRACAO a
    where   a.nr_seq_inf_integracao = nr_seq_inf_integracao_w
    and     a.IE_SITUACAO = 'A'
    and     coalesce(a.NR_SEQ_SERV_ORIGEM::text, '') = '';

    if (qt_controle_w > 0) then

        ds_retorno_w    := Wheb_mensagem_pck.get_texto(1209951, 'DS_MENSAGEM='||nr_seq_inf_integracao_w);

        is_complete_w   := true;

    end if;


    if (not is_complete_w) then

        select  max(a.IP_CONEXAO),
                max(a.NR_PORTA),
                max(a.IE_SERVIDOR),
                max(a.nr_sequencia)
        into STRICT
                nr_ip_p,
                nr_porta_p,
                ie_servidor_p,
                qt_controle_w
        from (
            SELECT  a.nr_sequencia,
                    a.IP_CONEXAO,
                    a.NR_PORTA,
                    a.IE_SERVIDOR    
            from (SELECT  b.nr_sequencia,
                            b.IP_CONEXAO,
                            b.NR_PORTA,
                            b.IE_SERVIDOR    
                    from    CLIENTE_INTEGRACAO a,
                            servidor_integracao b
                    where   a.NR_SEQ_SERV_ORIGEM = b.nr_sequencia
                    and     a.nr_seq_inf_integracao = nr_seq_inf_integracao_w
                    and     a.IE_SITUACAO = 'A'
                    and (coalesce(b.IP_CONEXAO::text, '') = '' or coalesce(b.NR_PORTA::text, '') = '' or b.IE_SERVIDOR <> 'O')) a LIMIT 1) a;

        if (qt_controle_w > 0) then

            if (coalesce(nr_ip_p::text, '') = '') then  
                ds_retorno_w    := Wheb_mensagem_pck.get_texto(1209952, 'DS_MENSAGEM='||qt_controle_w);
                is_complete_w   := true;
            elsif (coalesce(nr_porta_p::text, '') = '') then
                ds_retorno_w    := Wheb_mensagem_pck.get_texto(1209953, 'DS_MENSAGEM='||qt_controle_w);
                is_complete_w   := true;
            elsif (ie_servidor_p <> 'O') then
                ds_retorno_w    := Wheb_mensagem_pck.get_texto(1209954, 'DS_MENSAGEM='||qt_controle_w);
                is_complete_w   := true;
            end if;

        end if;
    end if;

    if (not is_complete_w and ie_message_type_w = 'HL7') then

        select  max(a.IP_CONEXAO),
                max(a.NR_PORTA),
                max(a.IE_SERVIDOR),
                max(a.nr_sequencia),
                max(a.NR_PORTA_LISTENER)
        into STRICT
                nr_ip_p,
                nr_porta_p,
                ie_servidor_p,
                qt_controle_w,
                NR_PORTA_LISTENER_w
        from (
            SELECT  a.nr_sequencia,
                    a.IP_CONEXAO,
                    a.NR_PORTA,
                    a.IE_SERVIDOR,
                    a.NR_PORTA_LISTENER
            from (SELECT  b.nr_sequencia,
                            b.IP_CONEXAO,
                            b.NR_PORTA,
                            b.IE_SERVIDOR,
                            b.NR_PORTA_LISTENER
                    from    CLIENTE_INTEGRACAO a,
                            servidor_integracao b
                    where   a.NR_SEQ_SERV_ORIGEM = b.nr_sequencia
                    and     a.nr_seq_inf_integracao = nr_seq_inf_integracao_w
                    and     a.IE_SITUACAO = 'A'
                   and (b.IE_SERVIDOR <> 'D' or (coalesce(b.IP_CONEXAO::text, '') = '' or coalesce(b.NR_PORTA::text, '') = '') or coalesce(b.NR_PORTA_LISTENER::text, '') = '')) a LIMIT 1) a;

        if (qt_controle_w > 0) then

            if (coalesce(nr_ip_p::text, '') = '') then  
                ds_retorno_w    := Wheb_mensagem_pck.get_texto(1209955, 'DS_MENSAGEM='||qt_controle_w);
                is_complete_w   := true;
            elsif (coalesce(nr_porta_p::text, '') = '') then
                ds_retorno_w    := Wheb_mensagem_pck.get_texto(1209956, 'DS_MENSAGEM='||qt_controle_w);
                is_complete_w   := true;
            elsif (NR_PORTA_LISTENER_w IS NOT NULL AND NR_PORTA_LISTENER_w::text <> '') then
                ds_retorno_w    := Wheb_mensagem_pck.get_texto(1209957, 'DS_MENSAGEM='||qt_controle_w);
                is_complete_w   := true;
            elsif (ie_servidor_p <> 'D') then
                ds_retorno_w    := Wheb_mensagem_pck.get_texto(1209958, 'DS_MENSAGEM='||qt_controle_w);
                is_complete_w   := true;
            end if;
        end if;
    end if;

end if;


return ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_inconsistencia_int ( nr_sequencia_p bigint ) FROM PUBLIC;

