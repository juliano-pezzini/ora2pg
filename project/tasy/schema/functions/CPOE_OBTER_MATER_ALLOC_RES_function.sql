-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function cpoe_obter_mater_alloc_res as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION cpoe_obter_mater_alloc_res (CD_CODE_P text, QT_DOSE_P bigint) RETURNS varchar AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	varchar;
BEGIN
	v_query := 'SELECT * FROM cpoe_obter_mater_alloc_res_atx ( ' || quote_nullable(CD_CODE_P) || ',' || quote_nullable(QT_DOSE_P) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret varchar);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION cpoe_obter_mater_alloc_res_atx (CD_CODE_P text, QT_DOSE_P bigint) RETURNS varchar AS $body$
DECLARE

l_index_w varchar(12);
l_rule_w MATERIAL.IE_MATERIAL_ALLOC_RULE%type;
type ty_material_alloc_result is table of MATERIAL_ALLOC_RESULT%rowtype index by integer;
dose_rec CURSOR FOR
    SELECT a.cd_material, a.ds_material, a.QT_SPEC_GROUP_DOSE, 0 qt_dose_quantity from material a where a.CD_MATERIAL_SPEC_GRP = CD_CODE_P and a.IE_SITUACAO='A'
    order by a.QT_SPEC_GROUP_DOSE asc;
l_dose_available get_dose_lwastage.ty_list_array;
l_dose_final get_dose_lwastage.dosage_array;
qt_final_dispensed_dose bigint :=0;
qt_spec_least bigint;
qt_spec_least_idx bigint;

procedure pr_delete_old
is;
BEGIN
  delete from MATERIAL_ALLOC_RESULT where dt_ins_date < trunc(clock_timestamp()) - 1;
  commit;
Exception
when others then
rollback;
End;
procedure pr_insert(material_alloc_result_p in ty_material_alloc_result)
is
pragma autonomous_transaction;
l_ind Integer;
Begin
  FORALL ind in indices of material_alloc_result_p save exceptions
    insert into MATERIAL_ALLOC_RESULT
    values material_alloc_result_p(ind);
    commit;
Exception
when others then
rollback;
End;
Begin
	pr_delete_old;
	select to_char(clock_timestamp(),'YYYYMMDD')||lpad(mod(nextval('mate_alloc_res_seq2'),10000),4,'0') into STRICT l_index_w;
	select IE_MATERIAL_ALLOC_RULE into STRICT l_rule_w from MATERIAL where cd_material = CD_CODE_P;
	IF l_rule_w = '0' Then
		IF dose_rec%isopen Then
           close dose_rec;
         End If;
         open dose_rec;
         Fetch dose_rec bulk collect into l_dose_available;
         close dose_rec;
         IF l_dose_available.count > 0 Then
           Declare
            lb_dosage calculated_dose_PCK.dosage_array;
            lb_final_result ty_material_alloc_result;
            lb_index integer;
            lb_i integer;
            Begin
                lb_i := 1;
                l_dose_final := get_dose_lwastage.get_medicine_quantity(l_dose_final, qt_dose_p, cd_code_p, l_dose_available );
                lb_index := l_dose_final.first;
                While (lb_index IS NOT NULL AND lb_index::text <> '') Loop
                    If l_dose_final[lb_index].qt_dose_quantity > 0 Then
                      lb_final_result[lb_i].cd_material := l_dose_final[lb_index].cd_material;
                      lb_final_result[lb_i].NR_INDEX := lb_i;
                      lb_final_result[lb_i].CD_RESULT_ID := l_index_w;
                      lb_final_result[lb_i].DS_MATERIAL := l_dose_final[lb_index].ds_material;
                      lb_final_result[lb_i].QT_DOSE := l_dose_final[lb_index].qt_dose_quantity * l_dose_final[lb_index].qt_spec_group_dose;
                      lb_final_result[lb_i].DT_INS_DATE := trunc(clock_timestamp());
                      --Logic to find the quantity of dose used by the least dispensed dose.
                      qt_final_dispensed_dose := qt_final_dispensed_dose + lb_final_result[lb_i].QT_DOSE; -- dispensed dosage
                      if (lb_i = 1) then
                        qt_spec_least := l_dose_final[lb_index].qt_spec_group_dose;
                        qt_spec_least_idx := lb_i;
                      end if;
                      if (l_dose_final[lb_index].qt_spec_group_dose <= qt_spec_least) then
                        qt_spec_least := l_dose_final[lb_index].qt_spec_group_dose;
                        qt_spec_least_idx := lb_i;
                      end if;
                      lb_i := lb_i + 1;
                    End If;
                    lb_index := l_dose_final.next(lb_index);
                End Loop;
                -- Update the minimum quantity of dose used from the least dispensed dose
                lb_final_result[qt_spec_least_idx].QT_DOSE := lb_final_result[qt_spec_least_idx].QT_DOSE -(qt_final_dispensed_dose - qt_dose_p);

                IF lb_final_result.count > 0 Then
                  pr_insert(lb_final_result);
                End If;
            End;
         End If;
	ELSIF l_rule_w = '1' Then
		Declare
        lb_dosage calculated_dose_PCK.dosage_array;
        lb_final_result ty_material_alloc_result;
        Begin
            lb_dosage := calculated_dose_pck.set_record(cd_code_p, qt_dose_p, lb_dosage);
            FOR i IN lb_dosage.first..lb_dosage.last LOOP
              IF lb_dosage[i].dose > 0 Then
                  lb_final_result[i].cd_material := lb_dosage[i].material;
                  lb_final_result[i].NR_INDEX := i;
                  lb_final_result[i].CD_RESULT_ID := l_index_w;
                  lb_final_result[i].DS_MATERIAL := lb_dosage[i].ds_material;
                  lb_final_result[i].QT_DOSE := lb_dosage[i].dose * lb_dosage[i].qty;
                  lb_final_result[i].DT_INS_DATE := trunc(clock_timestamp());
              end If;
             end loop;
              IF lb_final_result.count > 0 Then
                pr_insert(lb_final_result);
              End If;
        End;

	End If;
	return l_index_w;
Exception
 When Others Then
	return '';
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION cpoe_obter_mater_alloc_res (CD_CODE_P text, QT_DOSE_P bigint) FROM PUBLIC; -- REVOKE ALL ON FUNCTION cpoe_obter_mater_alloc_res_atx (CD_CODE_P text, QT_DOSE_P bigint) FROM PUBLIC;

