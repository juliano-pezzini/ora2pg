-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION san_obter_proc_derivado ( ie_derivado_exame_p bigint, nr_sequencia_p bigint, nr_seq_exame_lote_p bigint, nr_atendimento_p bigint, ie_opcao_p text) RETURNS bigint AS $body$
DECLARE

 
/* 
ie_opcao_p 
P = CÃ³digo do procedimento 
O = Origem do procedimento 
Q = Quantidade do procedimento 
I = Procedimento interno 
*/
 
				 
cd_setor_atend_w		integer;
cd_proced_w			bigint := null;
ie_origem_proced_w		smallint := null;
nr_seq_proc_interno_regra_w	bigint;
qt_exames_conta_w		integer;
cd_estabelecimento_w		smallint;
ie_tipo_atendimento_w		smallint;
nr_seq_derivado_w		bigint;
nr_seq_proc_interno_w		bigint;
ie_irradiado_derivado_w		varchar(1);
ie_lavado_derivado_w		varchar(1);
ie_filtrado_derivado_w		varchar(1);
ie_aliquotado_derivado_w	varchar(1);
ie_aferese_derivado_w		varchar(1);
ie_pool_w			varchar(1);
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
ie_tipo_convenio_w		smallint;
ie_tipo_data_vigencia_w		varchar(1);
dt_vigencia_w			timestamp;
dt_entrada_w			timestamp;
nr_seq_transfusao_w		bigint;
dt_transfusao_w			timestamp;
nr_seq_prod_w			bigint;
qt_proced_w			bigint;
qt_proced_exame_w		bigint;
			

BEGIN 
 
select	max(cd_estabelecimento), 
	max(ie_tipo_atendimento), 
	max(cd_convenio), 
	max(cd_categoria), 
	max(ie_tipo_convenio), 
	coalesce(max(dt_entrada),clock_timestamp()) 
into STRICT	cd_estabelecimento_w, 
	ie_tipo_atendimento_w, 
	cd_convenio_w, 
	cd_categoria_w, 
	ie_tipo_convenio_w, 
	dt_entrada_w 
from	atendimento_paciente_v 
where	nr_atendimento = nr_atendimento_p;
 
cd_setor_atend_w := obter_setor_atendimento(nr_atendimento_p);
 
Select	coalesce(max(IE_TIPO_DATA_VIGENCIA),'A') 
into STRICT	ie_tipo_data_vigencia_w 
from 	san_parametro 
where 	cd_estabelecimento = cd_estabelecimento_w;
 
if (ie_tipo_data_vigencia_w = 'A') then 
	dt_vigencia_w := clock_timestamp();
elsif (ie_tipo_data_vigencia_w = 'P') then 
	dt_vigencia_w := dt_entrada_w;
end if;
 
if (ie_derivado_exame_p = 0) then 
	 
	select	b.cd_procedimento, 
		b.ie_origem_proced, 
		b.nr_sequencia, 
		b.nr_seq_proc_interno, 
		a.ie_irradiado, 
		a.ie_lavado, 
		a.ie_filtrado, 
		a.ie_aliquotado, 
		a.ie_aferese, 
		a.ie_pool, 
		a.nr_seq_transfusao 
	into STRICT	cd_proced_w, 
		ie_origem_proced_w, 
		nr_seq_derivado_w, 
		nr_seq_proc_interno_w, 
		ie_irradiado_derivado_w, 
		ie_lavado_derivado_w, 
		ie_filtrado_derivado_w, 
		ie_aliquotado_derivado_w, 
		ie_aferese_derivado_w, 
		ie_pool_w, 
		nr_seq_transfusao_w 
	from	san_derivado b, 
		san_producao a 
	where	a.nr_seq_derivado = b.nr_sequencia 
	and	a.nr_sequencia = nr_sequencia_p;
	 
	select	coalesce(max(dt_transfusao),clock_timestamp()) 
	into STRICT	dt_transfusao_w 
	from	san_transfusao 
	where	nr_sequencia = nr_seq_transfusao_w;
	 
	if (ie_tipo_data_vigencia_w = 'T') then 
		dt_vigencia_w := dt_transfusao_w;
	end if;
 
	if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then 
		SELECT * FROM Obter_Proc_Tab_Interno(nr_seq_proc_interno_w, null, nr_atendimento_p, null, cd_proced_w, ie_origem_proced_w, null, null) INTO STRICT cd_proced_w, ie_origem_proced_w;
	else	 
		SELECT * FROM obter_san_proced_convenio(0, nr_seq_derivado_w, cd_estabelecimento_w, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, cd_categoria_w, cd_setor_atend_w, cd_proced_w, ie_origem_proced_w, 0, nr_seq_proc_interno_w, dt_vigencia_w, nr_seq_proc_interno_regra_w, qt_exames_conta_w, ie_irradiado_derivado_w, ie_lavado_derivado_w, ie_filtrado_derivado_w, ie_aliquotado_derivado_w, ie_aferese_derivado_w, ie_pool_w) INTO STRICT cd_setor_atend_w, cd_proced_w, ie_origem_proced_w, nr_seq_proc_interno_regra_w, qt_exames_conta_w;
				 
		if (nr_seq_proc_interno_regra_w IS NOT NULL AND nr_seq_proc_interno_regra_w::text <> '') then 
			nr_seq_proc_interno_w	:= nr_seq_proc_interno_regra_w;
		end if;
	end if;
	 
	qt_proced_w := coalesce(qt_exames_conta_w,1);
 
else 
 
	select	d.cd_procedimento, 
		d.ie_origem_proced, 
		d.nr_seq_proc_interno, 
		coalesce(c.qt_execucao,coalesce(d.qt_procedimento,1)) qt_procedimento, 
		b.nr_seq_producao 
	into STRICT	cd_proced_w, 
		ie_origem_proced_w, 
		nr_seq_proc_interno_w, 
		qt_proced_exame_w, 
		nr_seq_prod_w 
	from	san_exame d, 
		san_exame_realizado c, 
		san_exame_lote b 
	where	d.nr_sequencia 		= c.nr_seq_exame 
	and	c.nr_seq_exame_lote 	= b.nr_sequencia 
	and	c.nr_seq_exame 		= nr_sequencia_p 
	and	c.nr_seq_exame_lote 	= nr_seq_exame_lote_p;
 
	select	max(nr_seq_derivado) 
	into STRICT	nr_seq_derivado_w 
	from	san_producao 
	where	nr_sequencia = nr_seq_prod_w;
	 
	if (ie_tipo_data_vigencia_w = 'T') then 
		select	coalesce(max(b.dt_transfusao),clock_timestamp()) 
		into STRICT	dt_transfusao_w 
		from	san_producao a, 
			san_transfusao b 
		where	a.nr_seq_transfusao = b.nr_sequencia 
		and	a.nr_sequencia = nr_seq_prod_w;
		 
		dt_vigencia_w := dt_transfusao_w;
	end if;
	 
	if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then 
		SELECT * FROM Obter_Proc_Tab_Interno(nr_seq_proc_interno_w, null, nr_atendimento_p, null, cd_proced_w, ie_origem_proced_w, null, null) INTO STRICT cd_proced_w, ie_origem_proced_w;
	else 
		SELECT * FROM obter_san_proced_convenio(1, nr_sequencia_p, cd_estabelecimento_w, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, cd_categoria_w, cd_setor_atend_w, cd_proced_w, ie_origem_proced_w, nr_seq_derivado_w, nr_seq_proc_interno_w, dt_vigencia_w, nr_seq_proc_interno_regra_w, qt_exames_conta_w, 'N', 'N', 'N', 'N', 'N', 'N') INTO STRICT cd_setor_atend_w, cd_proced_w, ie_origem_proced_w, nr_seq_proc_interno_regra_w, qt_exames_conta_w;
				 
		if (nr_seq_proc_interno_regra_w IS NOT NULL AND nr_seq_proc_interno_regra_w::text <> '') then 
			nr_seq_proc_interno_w	:= nr_seq_proc_interno_regra_w;
		end if;
	end if;
	 
	qt_proced_w := coalesce(qt_exames_conta_w,qt_proced_exame_w);
	 
end if;	
 
if (ie_opcao_p = 'O') then 
	return	ie_origem_proced_w;
elsif (ie_opcao_p = 'Q') then 
	return	qt_proced_w;
elsif (ie_opcao_p = 'I') then 
	return	nr_seq_proc_interno_w;
else 
	return	cd_proced_w;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION san_obter_proc_derivado ( ie_derivado_exame_p bigint, nr_sequencia_p bigint, nr_seq_exame_lote_p bigint, nr_atendimento_p bigint, ie_opcao_p text) FROM PUBLIC;

