-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_grupo_fim_analise (nr_seq_analise_p pls_conta.nr_seq_analise%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_proc_partic_p pls_proc_participante.nr_sequencia%type, nr_seq_grupo_atual_p pls_analise_glo_ocor_grupo.nr_seq_grupo%type) RETURNS varchar AS $body$
DECLARE


ie_retorno_w			varchar(1);
qt_fluxo_grupo_w		integer;
qt_fluxo_nao_finalizar_w	integer;
nr_seq_conta_w			bigint;
qt_fluxo_grupo_conta_w		integer;
qt_fluxo_nao_finalizar_conta_w	integer;

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
c01 CURSOR(	nr_seq_analise_pc	pls_conta.nr_seq_analise%type) FOR
	SELECT	a.nr_sequencia
	from	pls_conta a
	where	a.nr_seq_analise = nr_seq_analise_pc;

BEGIN
ie_retorno_w := null;

/* Se for para verificar a análise inteira */

if (nr_seq_analise_p IS NOT NULL AND nr_seq_analise_p::text <> '') and (coalesce(nr_seq_conta_p::text, '') = '') and (coalesce(nr_seq_conta_proc_p::text, '') = '') and (coalesce(nr_seq_conta_mat_p::text, '') = '') and (coalesce(nr_seq_proc_partic_p::text, '') = '') then

	for r_c01_w in c01(nr_seq_analise_p) loop

		select	count(1) qt_fluxo,
			sum(CASE WHEN a.ie_finalizar_analise='N' THEN 1  ELSE 0 END ) qt_nao_finalizar
		into STRICT	qt_fluxo_grupo_conta_w,
			qt_fluxo_nao_finalizar_conta_w
		from	pls_ocorrencia_benef		a,
			pls_analise_glo_ocor_grupo	b
		where	a.nr_seq_conta		= r_c01_w.nr_sequencia
		and	a.ie_situacao		= 'A'
		and	b.nr_seq_ocor_benef	= a.nr_sequencia
		and	b.nr_seq_analise	= nr_seq_analise_p
		and	((b.nr_seq_grupo	= nr_seq_grupo_atual_p) or
			((a.ie_finalizar_analise = 'N') and not exists (SELECT	1
									from	pls_analise_glo_ocor_grupo	ag
									where	ag.ie_status		= 'P'
									and	ag.nr_seq_ocor_benef	= a.nr_sequencia)))
		and (a.ie_lib_manual 	= 'N' 	or coalesce(a.ie_lib_manual::text, '') = '');

		/*Incluí a tratativa do ie finalizar analise devido a nao poder liberar a analise com ocorrência impeditiva DGKORZ*/

		qt_fluxo_grupo_w		:= qt_fluxo_grupo_w + qt_fluxo_grupo_conta_w;
		qt_fluxo_nao_finalizar_w	:= qt_fluxo_nao_finalizar_w + coalesce(qt_fluxo_nao_finalizar_conta_w,0);
	end loop;
else
	if (nr_seq_proc_partic_p IS NOT NULL AND nr_seq_proc_partic_p::text <> '') then

		select	count(1) qt_fluxo,
			sum(CASE WHEN a.ie_finalizar_analise='N' THEN 1  ELSE 0 END ) qt_nao_finalizar
		into STRICT	qt_fluxo_grupo_w,
			qt_fluxo_nao_finalizar_w
		from	pls_ocorrencia_benef a
		where	a.nr_seq_proc_partic = nr_seq_proc_partic_p
		and	a.ie_situacao = 'A'
		and (a.ie_lib_manual = 'N' or coalesce(a.ie_lib_manual::text, '') = '');

	elsif (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then

		select	count(1) qt_fluxo,
			sum(CASE WHEN a.ie_finalizar_analise='N' THEN 1  ELSE 0 END ) qt_nao_finalizar
		into STRICT	qt_fluxo_grupo_w,
			qt_fluxo_nao_finalizar_w
		from	pls_ocorrencia_benef		a
		where	a.ie_situacao		= 'A'
		and	a.nr_seq_conta_proc	= nr_seq_conta_proc_p
		and (a.ie_lib_manual 	= 'N' 	or coalesce(a.ie_lib_manual::text, '') = '');

	elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then

		select	count(1) qt_fluxo,
			sum(CASE WHEN a.ie_finalizar_analise='N' THEN 1  ELSE 0 END ) qt_nao_finalizar
		into STRICT	qt_fluxo_grupo_w,
			qt_fluxo_nao_finalizar_w
		from	pls_ocorrencia_benef		a
		where	a.ie_situacao		= 'A'
		and	a.nr_seq_conta_mat	= nr_seq_conta_mat_p
		and (a.ie_lib_manual 	= 'N' 	or coalesce(a.ie_lib_manual::text, '') = '');

	elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then

		select	count(1) qt_fluxo,
			sum(CASE WHEN a.ie_finalizar_analise='N' THEN 1  ELSE 0 END ) qt_nao_finalizar
		into STRICT	qt_fluxo_grupo_w,
			qt_fluxo_nao_finalizar_w
		from	pls_ocorrencia_benef a
		where	a.ie_situacao = 'A'
		and	a.nr_seq_conta = nr_seq_conta_p
		and	coalesce(a.nr_seq_conta_proc::text, '') = ''
		and	coalesce(a.nr_seq_conta_mat::text, '') = ''
		and	coalesce(a.nr_seq_proc_partic::text, '') = ''
		and (a.ie_lib_manual 	= 'N' 	or coalesce(a.ie_lib_manual::text, '') = '');
	end if;
end if;

if (qt_fluxo_grupo_w > 0) and (qt_fluxo_nao_finalizar_w > 0) then
	ie_retorno_w	:= 'S';
end if;

return	ie_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_grupo_fim_analise (nr_seq_analise_p pls_conta.nr_seq_analise%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_proc_partic_p pls_proc_participante.nr_sequencia%type, nr_seq_grupo_atual_p pls_analise_glo_ocor_grupo.nr_seq_grupo%type) FROM PUBLIC;

