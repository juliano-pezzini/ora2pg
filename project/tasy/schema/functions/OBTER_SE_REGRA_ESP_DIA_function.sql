-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_regra_esp_dia (ie_dia_semana_p bigint, nr_seq_regra_esp_p bigint, dt_inicial_p timestamp, dt_final_p timestamp) RETURNS varchar AS $body$
DECLARE


ie_dia_semana_w		bigint;
qt_regra_w		bigint;
ds_retorno_w		varchar(1)	:= 'N';
dt_ini_referencia_w	timestamp;
dt_fin_referencia_w	timestamp;
dt_inicial_w		timestamp;
dt_final_w		timestamp;
cd_estabelecimento_w	smallint;
ie_plantao_regra_w	varchar(1);
qt_dia_plantao_w	bigint;
qt_dia_atual_w		bigint;
hr_inicial_w		varchar(8);
hr_final_w		varchar(8);

c01 CURSOR FOR
SELECT	to_char(a.dt_inicial,'hh24:mi:ss') hr_inicial,
	to_char(a.dt_final,'hh24:mi:ss') hr_final
from	regra_esp_repasse_dia a
where	((coalesce(a.ie_dia_semana::text, '') = '') or (a.ie_dia_semana = ie_dia_semana_w) or (a.ie_dia_semana = 9 and ie_dia_semana_w in (2,3,4,5,6)))
and	a.ie_situacao		= 'A'
and	a.nr_seq_regra_esp	= nr_seq_regra_esp_p;

c02 CURSOR FOR
SELECT	PKG_DATE_UTILS.get_DateTime(PKG_DATE_UTILS.start_of(dt_inicial_p, 'year', 0), coalesce(dt_inicial, PKG_DATE_UTILS.GET_TIME('00:00:00'))) dt_inicial,
	PKG_DATE_UTILS.get_DateTime(PKG_DATE_UTILS.start_of(dt_inicial_p, 'year', 0), coalesce(dt_final, PKG_DATE_UTILS.GET_TIME('00:00:00'))) dt_final,
	ie_dia_semana
into STRICT	dt_inicial_w,
	dt_final_w,
	ie_dia_semana_w
from	regra_esp_repasse_dia
where	ie_situacao		= 'A'
and	nr_seq_regra_esp	= nr_seq_regra_esp_p
and	((coalesce(ie_dia_semana::text, '') = '') or (ie_dia_semana = ie_dia_semana_p) or (ie_dia_semana = 9 and ie_dia_semana_p in (2,3,4,5,6)));


BEGIN

select	count(*)
into STRICT	qt_regra_w
from	regra_esp_repasse_dia
where	ie_situacao		= 'A'
and	nr_seq_regra_esp	= nr_seq_regra_esp_p;

if (coalesce(qt_regra_w,0)	= 0) then	/* se não tem regra, não precisa continuar */
	ds_retorno_w	:= 'S';
else

	select	max(a.cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	regra_esp_repasse a
	where	a.nr_sequencia		= nr_seq_regra_esp_p;

	select	max(a.ie_plantao_regra)
	into STRICT	ie_plantao_regra_w
	from	parametro_repasse a
	where	a.cd_estabelecimento	= cd_estabelecimento_w;

	if (coalesce(ie_plantao_regra_w,'N') = 'N') then

		if (dt_inicial_p IS NOT NULL AND dt_inicial_p::text <> '') then
			select	PKG_DATE_UTILS.get_DateTime(PKG_DATE_UTILS.start_of(dt_inicial_p, 'year', 0), coalesce(dt_inicial_p, PKG_DATE_UTILS.GET_TIME('00:00:00'))) dt_ini_referencia,
				PKG_DATE_UTILS.get_DateTime(PKG_DATE_UTILS.start_of(dt_inicial_p, 'year', 0), coalesce(dt_final_p, PKG_DATE_UTILS.GET_TIME('00:00:00'))) dt_ini_referencia
			into STRICT	dt_ini_referencia_w,
				dt_fin_referencia_w
			;
		end if;

		ie_dia_semana_w	:= -1;

		open	c02;
		loop
		fetch	c02 into
			dt_inicial_w,
			dt_final_w,
			ie_dia_semana_w;
		exit when(c02%notfound or ds_retorno_w = 'S');

			select	max(coalesce(ie_dia_semana,-1))
			into STRICT	ie_dia_semana_w
			from	regra_esp_repasse_dia
			where	ie_situacao		= 'A'
			and	nr_seq_regra_esp	= nr_seq_regra_esp_p
			and	((coalesce(ie_dia_semana::text, '') = '') or (ie_dia_semana = ie_dia_semana_p) or (ie_dia_semana = 9 and ie_dia_semana_p in (2,3,4,5,6)))
			and	((coalesce(dt_inicial::text, '') = '') or (dt_inicial_w <= dt_ini_referencia_w))
			and	((coalesce(dt_final::text, '') = '') or (dt_final_w >= dt_ini_referencia_w));

			if	((ie_dia_semana_w = ie_dia_semana_p) or (ie_dia_semana_w = 9 and ie_dia_semana_p in (2,3,4,5,6))) then
				ds_retorno_w	:= 'S';
			else
				ds_retorno_w	:= 'N';
			end if;

		end loop;
		close c02;

	else

		/* obter a quantidade de dias do plantão */

		select	(PKG_DATE_UTILS.start_of(dt_final_p,'dd',0) - PKG_DATE_UTILS.start_of(dt_inicial_p,'dd',0))::numeric
		into STRICT	qt_dia_plantao_w
		;

		qt_dia_atual_w		:= qt_dia_plantao_w;

		while(qt_dia_atual_w > -1) loop
			begin

			dt_ini_referencia_w	:= dt_inicial_p + coalesce(qt_dia_atual_w,0);

			/* se for algum dia posterior ao início do plantão, começa no horário 00:00:00 */

			if (qt_dia_atual_w > 0) then
				dt_ini_referencia_w	:= PKG_DATE_UTILS.start_of(dt_ini_referencia_w,'dd',0);
			end if;

			dt_fin_referencia_w	:= PKG_DATE_UTILS.get_DateTime(dt_ini_referencia_w, coalesce(dt_final_p, PKG_DATE_UTILS.GET_TIME('00:00:00')));

			/* se não for o último dia do plantão, termina no horário 23:59:59 */

			if (qt_dia_atual_w < qt_dia_plantao_w) then
				dt_fin_referencia_w	:= PKG_DATE_UTILS.END_OF(dt_fin_referencia_w, 'DAY', 0);
			end if;

			select	CASE WHEN obter_se_feriado(cd_estabelecimento_w,dt_ini_referencia_w)=0 THEN PKG_DATE_UTILS.get_WeekDay(dt_ini_referencia_w)  ELSE 0 END  ie_dia_semana
			into STRICT	ie_dia_semana_w
			;

			/* obter as regras que passam pela data do plantão */

			open	c01;
			loop
			fetch	c01 into
				hr_inicial_w,
				hr_final_w;
			exit	when(c01%notfound or ds_retorno_w = 'S');

				if (coalesce(hr_inicial_w::text, '') = '') then
					dt_inicial_w	:= PKG_DATE_UTILS.start_of(dt_ini_referencia_w,'dd',0);
				else
					dt_inicial_w	:= PKG_DATE_UTILS.get_Time(dt_ini_referencia_w, hr_inicial_w);
				end if;

				if (coalesce(hr_final_w::text, '') = '') then
					dt_final_w	:= PKG_DATE_UTILS.END_OF(dt_fin_referencia_w, 'DAY', 0);
				else
					dt_final_w	:= PKG_DATE_UTILS.get_Time(dt_fin_referencia_w, hr_final_w);
				end if;
					/* se o plantão inteiro cair na regra */

				if	(dt_fin_referencia_w	<= dt_final_w AND dt_ini_referencia_w	>= dt_inicial_w) or
					/* se o plantão começar fora e terminar dentro da regra */

					((dt_fin_referencia_w	<= dt_final_w) and (dt_ini_referencia_w	< dt_inicial_w) and (dt_fin_referencia_w	>= dt_inicial_w)) or
					/* se o plantão começar dentro e terminar fora da regra */

					((dt_fin_referencia_w	> dt_final_w) and (dt_ini_referencia_w	>= dt_inicial_w) and (dt_ini_referencia_w	<= dt_final_w)) or
					/* se o plantão começar antes e terminar depois da regra */

					(dt_fin_referencia_w	> dt_final_w AND dt_ini_referencia_w	< dt_inicial_w) then

					ds_retorno_w	:= 'S';
					qt_dia_atual_w	:= -1;

				end if;

			end	loop;
			close	c01;

			qt_dia_atual_w	:= coalesce(qt_dia_atual_w,0) -1;

			end;
		end loop;

	end if;

end if;

return ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_regra_esp_dia (ie_dia_semana_p bigint, nr_seq_regra_esp_p bigint, dt_inicial_p timestamp, dt_final_p timestamp) FROM PUBLIC;

