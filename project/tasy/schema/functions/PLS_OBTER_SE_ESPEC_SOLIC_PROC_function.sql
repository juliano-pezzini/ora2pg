-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_espec_solic_proc ( nr_seq_proc_p bigint, nr_seq_proc_espec_p bigint, ie_medico_solic_exec_p text) RETURNS varchar AS $body$
DECLARE


ds_retorno_w			varchar(1) := 'N';
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_area_w			bigint;
cd_especialidade_w		bigint;
cd_grupo_w			bigint;
ie_origem_w			bigint;
cd_especialidade_med_w		bigint;
cd_especialidade_proc_w		bigint;
cd_medico_solic_w		bigint;
cd_especs_med_solc_w		bigint;
ie_med_cooperado_w		varchar(1);
nr_seq_regra_proc_espec_w	bigint := 0;
qt_regras_espec_w		bigint := 0;
cd_medico_exec_w		bigint;
ie_existe_regra_w		varchar(1) := 'N';
cd_medico_w			bigint;
ie_liberado_w			varchar(1);
dt_referencia_w			timestamp;

C01 CURSOR FOR
	SELECT	cd_medico_solic_w
	
	where	((ie_medico_solic_exec_p = 'S') or (ie_medico_solic_exec_p = 'A'))
	
union

	SELECT	cd_medico_exec_w
	
	where	((ie_medico_solic_exec_p = 'E') or (ie_medico_solic_exec_p = 'A'));

c02 CURSOR FOR
	SELECT	a.cd_especialidade,
		CASE WHEN pls_obter_se_cooperado_ativo(a.cd_pessoa_fisica,dt_referencia_w,null)='S' THEN 'C'  ELSE 'N' END
	from	medico_especialidade a
	where (a.cd_pessoa_fisica = cd_medico_w);

c03 CURSOR FOR
	SELECT	a.nr_sequencia,
		coalesce(a.ie_liberado,'S')
	from	pls_oc_proc_espec_regra	a
	where	a.nr_seq_regra		 = nr_seq_proc_espec_p
	and	((coalesce(cd_procedimento::text, '') = '') or (cd_procedimento = coalesce(cd_procedimento_w,0)))
	and	((coalesce(ie_origem_proced::text, '') = '') or (ie_origem_proced = coalesce(ie_origem_w,0)))
	and	coalesce(cd_grupo_proc,cd_grupo_w)			= cd_grupo_w
	and	coalesce(cd_especialidade, cd_especialidade_w)	= cd_especialidade_w
	and	coalesce(cd_area_procedimento, cd_area_w) 		= cd_area_w
	and	a.ie_situacao		 = 'A'
	and	a.cd_espec_medica	 = cd_especialidade_med_w
	order by
		coalesce(a.cd_procedimento,0),
		coalesce(a.cd_grupo_proc,0),
		coalesce(a.cd_especialidade,0),
		coalesce(a.cd_area_procedimento,0);


BEGIN

/*Obter procedimento da conta*/

select	coalesce(a.cd_procedimento,0),
	coalesce(a.ie_origem_proced,0),
	coalesce(b.cd_medico_solicitante,0),
	coalesce(b.cd_medico_executor,0),
	coalesce(a.dt_procedimento,b.dt_emissao)
into STRICT	cd_procedimento_w,
	ie_origem_proced_w,
	cd_medico_solic_w,
	cd_medico_exec_w,
	dt_referencia_w
from	pls_conta_proc	a,
	pls_conta	b
where	a.nr_seq_conta	= b.nr_sequencia
and	a.nr_sequencia = nr_seq_proc_p;

if (cd_procedimento_w > 0) and
	((cd_medico_solic_w > 0) or (cd_medico_exec_w > 0)) then

	/*Obter area, grupo, especialidade do procedimentos  */

	SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_proced_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w;


	open C01;
	loop
	fetch C01 into
		cd_medico_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		/*Limpar a variável */

		nr_seq_regra_proc_espec_w := null;

		open c02;
		loop
		fetch c02 into
			cd_especialidade_med_w,
			ie_med_cooperado_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin

			/*verificar entre as especialidade do médico solic/exec se existe alguma com regra que se encaixa*/

			open c03;
			loop
			fetch c03 into
				nr_seq_regra_proc_espec_w,
				ie_liberado_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
			end loop;
			close c03;

			end;
		end loop;
		close c02;

		if (coalesce(nr_seq_regra_proc_espec_w,0) > 0) and (ie_liberado_w = 'S') then
			/*Exsite regra e ela se adequa ao esperado*/

			ds_retorno_w := 'S';
		else

			/*Não existe regra verifica se existe alguma regra para aquele especilaista se existir é gerado a ocorrencia*/

			open c02;
			loop
			fetch c02 into
				cd_especialidade_med_w,
				ie_med_cooperado_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin

				select	count(*)
				into STRICT	qt_regras_espec_w
				from	pls_oc_proc_espec_regra
				where	nr_seq_regra	 = nr_seq_proc_espec_p
				and	cd_espec_medica	 = cd_especialidade_med_w
				and	((ie_tipo_medico = ie_med_cooperado_w) or (ie_tipo_medico = 'A'))
				and	ie_situacao	 = 'A';

				if (qt_regras_espec_w > 0) then
					ie_existe_regra_w := 'S';
				end if;

				end;
			end loop;
			close c02;

			/*Não existe regra então não gera ocorrência */

			if (ie_existe_regra_w = 'N') then
				ds_retorno_w	:= 'S';
			else
				ds_retorno_w	:= 'N';
				goto Final;
			end if;

		end if;
	end;
	end loop;
	close C01;
else
	ds_retorno_w	:= 'S';

end if;

<<Final>>

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_espec_solic_proc ( nr_seq_proc_p bigint, nr_seq_proc_espec_p bigint, ie_medico_solic_exec_p text) FROM PUBLIC;

