-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION sus_obter_permanencia_aih (nr_aih_p bigint, nr_sequencia_p bigint) RETURNS varchar AS $body$
DECLARE

 
nr_atendimento_w			bigint;
nr_interno_conta_w			bigint;
dt_entrada_w			timestamp;
dt_alta_w				timestamp;
qt_diarias_w			bigint		:= 0;
qt_longa_perm_total_w		bigint		:= 0;
qt_diarias_uti_w			bigint		:= 0;
qt_diarias_uti_ww			bigint		:= 0;
qt_longa_perm_liq_w		bigint		:= 0;
cd_procedimento_realiz_w		bigint		:= 0;
cd_procedimento_solic_w		bigint		:= 0;
cd_procedimento_Princ_w		bigint		:= 0;
qt_permanencia_w			bigint		:= 0;
qt_permanencia_ww		bigint		:= 0;
ie_origem_proced_w		bigint;
ie_tipo_laudo_sus_w		integer;
nr_aih_w				bigint		:= 0;
ie_altera_tipo_serv_w		varchar(1);
dt_inicial_w			timestamp;
dt_final_w			timestamp;
qt_dias_w			smallint			:= 0;
qt_dias_normal_ini_w		smallint			:= 0;
qt_dias_longa_ini_w		smallint			:= 0;
ds_retorno_w			varchar(2000);
qt_retorno_w			smallint;
ds_dia_w				varchar(2);

C01 CURSOR FOR 
SELECT	a.cd_procedimento_solic, 
	a.ie_origem_proced, 
	a.ie_tipo_laudo_sus, 
	coalesce(a.nr_aih,0)		 
from 	sus_laudo_paciente a 
where 	a.nr_atendimento	= nr_atendimento_w 
and	a.nr_interno_conta	= nr_interno_conta_w 
and	ie_tipo_laudo_sus	in (0,1,9) 
	order by ie_tipo_laudo_sus,dt_emissao;

C02 CURSOR FOR 
SELECT to_char(trunc(dt_inicial_w + rownum),'DD') 
from	pessoa_fisica LIMIT ((trunc(dt_final_w) - trunc(dt_inicial_w + 1)));

 

BEGIN 
/*	Selecao do atendimento e datas de entrada e alta do Paciente */
 
select	a.nr_atendimento, 
	a.nr_interno_conta, 
	coalesce(a.dt_inicial,b.dt_entrada), 
	coalesce(a.dt_final,coalesce(b.dt_alta,clock_timestamp())), 
	(coalesce(a.qt_dia_uti_mes_ini,0) + coalesce(a.qt_dia_uti_mes_ant,0) + coalesce(a.qt_dia_uti_mes_alta,0)) 
into STRICT	nr_atendimento_w, 
	nr_interno_conta_w, 
	dt_entrada_w, 
	dt_alta_w, 
	qt_diarias_uti_ww 
from	atendimento_paciente b, 
	sus_aih a 
where	a.nr_atendimento	= b.nr_atendimento 
and	a.nr_aih		= nr_aih_p 
and	a.nr_sequencia	= nr_sequencia_p;
 
/*	Define o procedimento sobre o qual é gerado a longa permanencia */
 
cd_procedimento_realiz_w := 0;
OPEN C01;
LOOP 
FETCH C01 	into 
		cd_procedimento_solic_w, 
		ie_origem_proced_w, 
		ie_tipo_laudo_sus_w, 
		nr_aih_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin 
		if (ie_tipo_laudo_sus_w in (0,1))	then 
			begin 
			cd_procedimento_realiz_w	:= cd_procedimento_solic_w;
			cd_procedimento_Princ_w	:= cd_procedimento_solic_w;
			end;
		end if;
 		if (cd_procedimento_princ_w in (31000002,39000001,70000000)) and (ie_tipo_laudo_sus_w	 = 9) then 
			BEGIN 
			begin 
			select 	coalesce(a.qt_permanencia,0) 
			into STRICT	qt_permanencia_w 
			from 	sus_preco_procaih a 
			where 	a.cd_procedimento		= cd_procedimento_solic_w 
			and 	a.ie_origem_proced 	= 2 
			and 	a.dt_competencia 		= 
				(SELECT max(x.dt_competencia) 
         	 	from 	sus_preco_procaih x 
				where	x.cd_procedimento 	= a.cd_procedimento 
				and	x.ie_origem_proced	= a.ie_origem_proced);
			exception 
				when others then 
				/*r.aise_application_error(-20011,'Proc nao existe ult. versao tabela preco AIH: ' || chr(13) || 
						'Proc: ' || to_char(cd_procedimento_solic_w) || chr(13) || 
						'AIH: ' || to_char(nr_aih_w));*/
 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(263558,	'cd_procedimento_solic_w='||cd_procedimento_solic_w||';'|| 
										'nr_aih_w='||nr_aih_w);
			end;
			if (qt_permanencia_w	> qt_permanencia_ww) then 
				begin 
				cd_procedimento_realiz_w 	:= cd_procedimento_solic_w;
				qt_permanencia_ww	:= qt_permanencia_w;
				end;	
			end if;
	 
			END;
		end if;
		end;
END LOOP;
CLOSE C01;
 
/* Identificar se tem permanencia para o procedimento realizado */
 
qt_diarias_w	:= (trunc(dt_alta_w) - trunc(dt_entrada_w));
begin 
if (qt_diarias_w > 0) 				and (AIH_Validar_Regra(1, cd_procedimento_solic_w) = 0) and (cd_procedimento_realiz_w IS NOT NULL AND cd_procedimento_realiz_w::text <> '') 	then 
	begin 
	select 	coalesce(a.qt_permanencia,0) 
	into STRICT	qt_permanencia_w 
	from 	sus_preco_procaih a 
	where 	a.cd_procedimento		= cd_procedimento_realiz_w 
	and 	a.ie_origem_proced 	= 2 
	and 	a.dt_competencia 		= 
		(SELECT max(x.dt_competencia) 
          	from 	sus_preco_procaih x 
			where	x.cd_procedimento 	= a.cd_procedimento 
			and	x.ie_origem_proced	= a.ie_origem_proced);
	exception 
		when others then 
			qt_permanencia_w := 0;
	end;
end if;
end;
 
/* Procedimentos de diaria de Uti */
 
begin 
select 	coalesce(sum(qt_procedimento),0) 
into STRICT	qt_diarias_uti_w 
from 	procedimento_paciente 
where 	nr_atendimento	= nr_atendimento_w 
and	nr_interno_conta	= nr_interno_conta_w 
and	ie_origem_Proced	= 2 
and	coalesce(cd_motivo_exc_conta::text, '') = '' 
and	cd_procedimento in (96001020,96001038,96002026,96002034,96003014,96003022, 
			96003030,96004029,96004037,96005025,96005033,96006013, 
			96006030,96800038,96001011,96002018,96004010,96005017, 
			96006021,96800011);
exception 
	when others then 
	qt_diarias_uti_w := 0;
end;
 
/* Incluido por solicitação do HSJB, que não digita as diárias de UTI, somente qtd de dias */
 
if (qt_diarias_uti_w = 0) 	and (qt_diarias_uti_ww	> 0)	then 
	qt_diarias_uti_w	:= qt_diarias_uti_ww;
end if;
 
 
/* Total de dias de permanencia normal */
 
qt_dias_normal_ini_w	:= trunc(qt_permanencia_w / 2 + 1);
qt_permanencia_w		:= (qt_permanencia_w * 2) + qt_diarias_uti_w;
 
/* Eliminar Longa Permanencia de códigos e psiquiátricos e crônicos p/hosp. público */
 
select 	coalesce(max(IE_ALTERA_TIPO_SERV),'N') 
into STRICT	ie_altera_tipo_serv_w 
from	sus_parametros;
if (ie_altera_tipo_serv_w = 'S') and (cd_procedimento_solic_w in (85500739,85500747,85500755,85500763,85500771,85500780,85500798, 
				85300713,85300721,85300730,85300748,85300756,85300764,85300772, 
				89500083,99080010,89500091,89300106,89300092)) and (cd_procedimento_realiz_w IS NOT NULL AND cd_procedimento_realiz_w::text <> '') then 
	qt_permanencia_w := 999;
end if;
 
 
dt_inicial_w		:= trunc(dt_entrada_w - 1);
dt_final_w			:= trunc(dt_alta_w);
qt_dias_w			:= 0;
ds_retorno_w		:= to_char(dt_inicial_w,'dd/mm/yyyy'||';');
qt_dias_longa_ini_w	:= qt_permanencia_w;
 
OPEN C02;
LOOP 
FETCH C02 	into 
		ds_dia_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin 
		qt_dias_w := qt_dias_w + 1;
		if (qt_dias_w < 285) then 
			begin 
			if (qt_dias_w < qt_dias_normal_ini_w) then 
				ds_retorno_w := ds_retorno_w||ds_dia_w||','||'193;';
			elsif (qt_dias_w <= qt_dias_longa_ini_w) then 
				ds_retorno_w := ds_retorno_w||ds_dia_w||','||'194;';
			else 
				ds_retorno_w := ds_retorno_w||ds_dia_w||','||'195;';
			end if;
			end;
		end if;
		end;
END LOOP;
CLOSE C02;
 
return ds_retorno_w;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION sus_obter_permanencia_aih (nr_aih_p bigint, nr_sequencia_p bigint) FROM PUBLIC;

