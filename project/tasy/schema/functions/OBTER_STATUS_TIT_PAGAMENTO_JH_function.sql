-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_status_tit_pagamento_jh ( nr_titulo_p bigint, nr_documento_p bigint, ie_tipo_documento_p text, nm_usuario_p text) RETURNS varchar AS $body$
DECLARE


nr_sequencia_w	bigint;
dt_liberacao_w	timestamp;
dt_reprovacao_w	timestamp;
ie_nivel_w              conta_pagar_lib.ie_nivel%type;
ie_nivel_ww             conta_pagar_lib.ie_nivel%type;
ie_nivel_lib_w          regra_lib_tit_pagar.ie_nivel_lib%type;
qt_min_usuario_lib_w    titulo_pagar.qt_min_usuario_lib%type;
nr_seq_regra_tit_pagar_w conta_pagar_lib.nr_seq_regra_tit_pagar%type;
nr_seq_regra_lib_w  conta_pagar_lib.nr_seq_regra_lib%type;
count_w bigint;
ds_status varchar(100);
aprovado_w constant integer := 297727; -- Aprovado
aprovado_sem_lib_w constant integer := 301576; -- Aprovado - Sem necessidade de liberacao
reprovado_w constant integer := 297728; -- Reprovado
pendente_w constant integer := 297726; -- Pendente
nr_text_w integer;

/*
ie_tipo_documento_p
B - Bordero a pagar
P - Pagamento escritural
T - Titulo a pagar
*/
BEGIN

if (ie_tipo_documento_p = 'B') then
	select	max(nr_sequencia),
		max(dt_liberacao),
		max(dt_reprovacao)
	into STRICT	nr_sequencia_w,
		dt_liberacao_w,
		dt_reprovacao_w
	from	conta_pagar_lib a
	where	a.nr_bordero		= nr_documento_p
	and	a.nr_titulo		= nr_titulo_p
	and	a.nm_usuario_lib		= nm_usuario_p;

	if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then
		if (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then nr_text_w := aprovado_w;
		elsif (dt_reprovacao_w IS NOT NULL AND dt_reprovacao_w::text <> '') then nr_text_w := reprovado_w;
        else nr_text_w := pendente_w;
		end if;
    else nr_text_w := aprovado_sem_lib_w;
	end if;

elsif (ie_tipo_documento_p = 'P') then

	select	max(nr_sequencia),
		max(dt_liberacao),
		max(dt_reprovacao)
	into STRICT	nr_sequencia_w,
		dt_liberacao_w,
		dt_reprovacao_w
	from	conta_pagar_lib a
	where	a.nr_seq_banco_escrit	= nr_documento_p
	and	a.nr_titulo		= nr_titulo_p
	and	a.nm_usuario_lib		= nm_usuario_p;

	if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then
		if (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then nr_text_w := aprovado_w;
		elsif (dt_reprovacao_w IS NOT NULL AND dt_reprovacao_w::text <> '') then nr_text_w := reprovado_w;
        else nr_text_w := pendente_w;
		end if;
    else nr_text_w := aprovado_sem_lib_w;
	end if;
	
elsif (ie_tipo_documento_p = 'T') then

	select	max(nr_sequencia),
		max(dt_liberacao),
		max(dt_reprovacao),
        max(ie_nivel)
	into STRICT	nr_sequencia_w,
		dt_liberacao_w,
		dt_reprovacao_w,
        ie_nivel_w
	from	conta_pagar_lib a
	where	coalesce(a.nr_seq_banco_escrit::text, '') = ''
	and	coalesce(a.nr_bordero::text, '') = ''
	and	a.nr_titulo		= nr_titulo_p
	and	a.nm_usuario_lib		= nm_usuario_p;

	if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then
		if (coalesce(dt_liberacao_w::text, '') = '' and coalesce(dt_reprovacao_w::text, '') = '') then
            select max(nr_seq_regra_tit_pagar), 
            max(nr_seq_regra_lib)
            into STRICT
            nr_seq_regra_tit_pagar_w,
            nr_seq_regra_lib_w
            from conta_pagar_lib
            where nr_titulo in (nr_titulo_p);

            if (nr_seq_regra_tit_pagar_w IS NOT NULL AND nr_seq_regra_tit_pagar_w::text <> '') then
                select max(ie_nivel_lib) 
                into STRICT ie_nivel_lib_w
                from regra_lib_tit_pagar a
                where exists(
                    SELECT * from regra_lib_tit_usuario b
                    where a.nr_sequencia = b.nr_seq_regra
                    and b.nr_seq_regra = (SELECT max(c.nr_seq_regra_tit_pagar) from conta_pagar_lib c where c.nr_titulo =  nr_titulo_p));

                if (ie_nivel_lib_w = 'N') then
                    select  max(nr_sequencia),
                            max(dt_liberacao),
                            max(dt_reprovacao),
                            max(ie_nivel)
                    into STRICT	nr_sequencia_w,
                            dt_liberacao_w,
                            dt_reprovacao_w,
                            ie_nivel_ww
                    from conta_pagar_lib a
                    where coalesce(a.nr_seq_banco_escrit::text, '') = ''
                        and coalesce(a.nr_bordero::text, '') = ''
                        and a.nr_titulo = nr_titulo_p
                        and a.nm_usuario_lib <> nm_usuario_p
                        and ie_nivel = ie_nivel_w;
                end if;

            elsif (nr_seq_regra_lib_w IS NOT NULL AND nr_seq_regra_lib_w::text <> '') then
				select max( coalesce(a.qt_min_usuario_lib,0) )
				into STRICT qt_min_usuario_lib_w
				from titulo_pagar a
				where a.nr_titulo = nr_titulo_p;

    /*
    G-8110: Never use SELECT COUNT(*) if you are only interested in the existence of a row.
        desabilitando sonar, na linha abaixo, porque realmente preciso fazer uma contagem.
    */
				select count(*) -- NOSONAR
				into STRICT count_w
				from conta_pagar_lib a
				where coalesce(a.nr_seq_banco_escrit::text, '') = ''
				and coalesce(a.nr_bordero::text, '') = ''
				and a.nr_titulo = nr_titulo_p
				and (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
				and ie_nivel = ie_nivel_w;

				if (count_w >= qt_min_usuario_lib_w and count_w > 0) then
					dt_liberacao_w := clock_timestamp();
				end if;
			end if;
		end if;

		if (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then nr_text_w := aprovado_w;
		elsif (dt_reprovacao_w IS NOT NULL AND dt_reprovacao_w::text <> '') then nr_text_w := reprovado_w;
        else nr_text_w := pendente_w;
		end if;

    else nr_text_w := aprovado_sem_lib_w;
	end if;
end if;	

return wheb_mensagem_pck.get_texto(nr_text_w);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_status_tit_pagamento_jh ( nr_titulo_p bigint, nr_documento_p bigint, ie_tipo_documento_p text, nm_usuario_p text) FROM PUBLIC;

