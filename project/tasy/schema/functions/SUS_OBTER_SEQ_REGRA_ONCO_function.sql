-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION sus_obter_seq_regra_onco ( cd_procedimento_p procedimento_paciente.cd_procedimento%type, nr_interno_conta_p conta_paciente.nr_interno_conta%type) RETURNS SUS_REGRA_SEQ_ONCO_PROC.NR_SEQ_APRESENTACAO%TYPE AS $body$
DECLARE


nr_seq_apresent_w	sus_regra_seq_onco_proc.nr_seq_apresentacao%type := 0;
qt_proc_regra_w		bigint := 0;
qt_proc_conta_w		bigint := 0;
nr_seq_regra_onco_w	sus_regra_seq_onco_proc.nr_seq_regra_onco%type;
qt_reg_incomp_w		bigint := 0;

C01 CURSOR FOR
	SELECT	a.nr_seq_regra_onco
	from	sus_regra_seq_onco_proc a,
		sus_regra_seq_oncologia b
	where	a.nr_seq_regra_onco = b.nr_sequencia
	and	b.ie_situacao = 'A'
	and	a.cd_procedimento = cd_procedimento_p;

type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w			vetor;

BEGIN

begin
select	count(1)
into STRICT	qt_proc_conta_w
from	procedimento_paciente a,
	sus_procedimento_registro b
where	a.nr_interno_conta = nr_interno_conta_p
and	a.cd_procedimento = b.cd_procedimento
and	a.ie_origem_proced = b.ie_origem_proced
and	b.cd_registro = 3;
exception
when others then
	qt_proc_conta_w := 0;
end;

if (qt_proc_conta_w > 0) then
	begin

	open c01;
	loop
	fetch c01 bulk collect into s_array limit 1000;
		vetor_c01_w(i) := s_array;
		i := i + 1;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	end loop;
	close c01;


	for i in 1..vetor_c01_w.count loop
		begin
		s_array := vetor_c01_w(i);
		for z in 1..s_array.count loop
			begin

			nr_seq_regra_onco_w := s_array[z].nr_seq_regra_onco;

			select	count(1)
			into STRICT	qt_proc_regra_w
			from	sus_regra_seq_onco_proc
			where	nr_seq_regra_onco = nr_seq_regra_onco_w;

			if (qt_proc_conta_w = qt_proc_regra_w) then
				begin

				select	count(1)
				into STRICT	qt_reg_incomp_w
				from	sus_regra_seq_onco_proc x
				where	x.nr_seq_regra_onco = nr_seq_regra_onco_w
				and	x.cd_procedimento not in (SELECT	a.cd_procedimento
								from	procedimento_paciente a,
									sus_procedimento_registro b
								where	a.nr_interno_conta = nr_interno_conta_p
								and	a.cd_procedimento = b.cd_procedimento
								and	a.ie_origem_proced = b.ie_origem_proced
								and	b.cd_registro = 3);

				if (qt_reg_incomp_w = 0) then
					begin

					begin
					select	nr_seq_apresentacao
					into STRICT	nr_seq_apresent_w
					from	sus_regra_seq_onco_proc
					where	nr_seq_regra_onco = nr_seq_regra_onco_w
					and	cd_procedimento = cd_procedimento_p;
					exception
					when others then
						nr_seq_apresent_w := 0;
					end;

					exit;

					end;
				end if;

				end;
			end if;

			end;
		end loop;
		end;
	end loop;

	end;
end if;

return	nr_seq_apresent_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION sus_obter_seq_regra_onco ( cd_procedimento_p procedimento_paciente.cd_procedimento%type, nr_interno_conta_p conta_paciente.nr_interno_conta%type) FROM PUBLIC;

