-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_horario_serv_livre (nr_seq_servico_p bigint, nr_prescricao_p bigint, ie_zona_cinza_p text) RETURNS varchar AS $body$
DECLARE

 
/* 
ie_zona_cinza_p 
Referente às primeiras horas da prescrição, antes do horário de corte do setor, para quando a prescrição possuir mais do que 24 horas de validade 
*/
					 
					 
ie_livre_w			varchar(1) := 'N';
cd_setor_atendimento_w		integer;
ds_horario_w			varchar(5);
dt_horario_w			timestamp;
dt_horario_ww			timestamp;
dt_inicio_prescr_w		timestamp;
dt_validade_prescr_w		timestamp;
nr_atendimento_w		bigint;
cd_pessoa_fisica_w		varchar(10);
nr_horas_validade_w		integer;
dt_fim_zona_cinza_w		timestamp;
dt_inicio_prescr_dia_w		timestamp;

c01 CURSOR FOR 
SELECT	distinct substr(ds_horarios,1,5) 
from	nut_servico_horario 
where	nr_seq_servico = nr_seq_servico_p 
and	(ds_horarios IS NOT NULL AND ds_horarios::text <> '') 
and	((cd_setor_atendimento = cd_setor_atendimento_w) or (coalesce(cd_setor_atendimento::text, '') = ''));
					

BEGIN 
 
select	coalesce(max(cd_setor_atendimento),max(obter_setor_atendimento(nr_atendimento))), 
	max(nr_horas_validade), 
	max(dt_inicio_prescr), 
	max(dt_validade_prescr), 
	max(nr_atendimento), 
	max(cd_pessoa_fisica) 
into STRICT	cd_setor_atendimento_w, 
	nr_horas_validade_w, 
	dt_inicio_prescr_w, 
	dt_validade_prescr_w, 
	nr_atendimento_w, 
	cd_pessoa_fisica_w 
from	prescr_medica 
where	nr_prescricao = nr_prescricao_p;
 
if (nr_horas_validade_w	> 24) then 
	dt_fim_zona_cinza_w	:= (dt_validade_prescr_w - 1);
	dt_inicio_prescr_dia_w	:= dt_fim_zona_cinza_w + 1/1440;
else 
	dt_inicio_prescr_dia_w	:= dt_inicio_prescr_w;
end if;
 
if (ie_zona_cinza_p	= 'N') or (nr_horas_validade_w	> 24) then 
 
	open C01;
	loop 
	fetch C01 into	 
		ds_horario_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		--Horário que será gerado na dieta 
		dt_horario_w	:= to_date(to_char(dt_inicio_prescr_w,'dd/mm/yyyy')||' '||ds_horario_w||':00','dd/mm/yyyy hh24:mi:ss');
		 
		if (dt_inicio_prescr_w	> dt_horario_w) then 
			dt_horario_w := dt_horario_w + 1;
		end if;
		 
		--Horário que será gerado na dieta, caso a prescrição possuir mais do que 24 horas de validade 
		dt_horario_ww	:= dt_horario_w + 1;
		 
		--Verificar se já existe alguma refeição para o horário que o serviço será prescrito, dentro ou fora da zona cinza, conforme o parâmetro 
		if	((ie_zona_cinza_p	= 'S' AND dt_horario_w		between dt_inicio_prescr_w and dt_fim_zona_cinza_w) or 
			 (ie_zona_cinza_p	= 'N' AND dt_horario_w		between dt_inicio_prescr_dia_w and dt_validade_prescr_w)) then 
 
			select	coalesce(max('N'),'S') 
			into STRICT	ie_livre_w 
			from	prescr_medica a, 
				prescr_dieta_hor b 
			where	a.nr_prescricao		= b.nr_prescricao 
			and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w 
			and	coalesce(nr_atendimento_w,a.nr_atendimento) = a.nr_atendimento 
			and	b.dt_horario		= dt_horario_w 
			and	coalesce(b.dt_suspensao::text, '') = '';
			 
		end if;
 
		--Para os casos em que o horário do serviço se encaixa duas vezes no período de vigência da prescrição (Ex. 27/10 18:00 e 28/10 18:00 - prescr válida 27/10 15:00 - 28/10 19:00) 
		if (ie_livre_w		= 'N') and (ie_zona_cinza_p	= 'N') and (dt_horario_ww		between dt_inicio_prescr_dia_w and dt_validade_prescr_w) and (nr_horas_validade_w	> 24) then 
			 
			select	coalesce(max('N'),'S') 
			into STRICT	ie_livre_w 
			from	prescr_medica a, 
				prescr_dieta_hor b 
			where	a.nr_prescricao		= b.nr_prescricao 
			and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w 
			and	coalesce(nr_atendimento_w,a.nr_atendimento) = a.nr_atendimento 
			and	b.dt_horario		= dt_horario_ww 
			and	coalesce(b.dt_suspensao::text, '') = '';				
			 
		end if;	
		 
		--Caso um horário estiver livre, então não precisa mais consistir, pode sair do cursor, e considerar o serviço como prescritível 
		if (ie_livre_w	= 'S') then 
			exit;
		end if;
		 
		end;
	end loop;
	close C01;
	 
end if;
 
return	ie_livre_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_horario_serv_livre (nr_seq_servico_p bigint, nr_prescricao_p bigint, ie_zona_cinza_p text) FROM PUBLIC;

