-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION ageint_verifica_rodizio (nr_seq_ageint_item_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, cd_medico_p text, cd_agenda_p bigint, cd_tipo_agenda_p bigint, dt_agenda_p timestamp, cd_especialidade_p bigint, nr_seq_medico_regra_p bigint, qt_dias_rodizio_p bigint, nr_sequencia_rod_p bigint) RETURNS varchar AS $body$
DECLARE


  ie_turno_medico_w varchar(1);
  ie_permite_w      varchar(1) := 'S';
  ds_erro_w         varchar(2000);

  -------------------------------------------------------------------------------
  PROCEDURE consistir_rozidio_exame(nr_seq_item_p        bigint,
                                    cd_medico_p          text,
                                    dt_agenda_p          timestamp,
                                    cd_agenda_p          bigint,
                                    cd_tipo_agenda_p     bigint,
                                    cd_estabelecimento_p bigint,
                                    cd_especialidade_p   bigint,
                                    nm_usuario_p         text,
                                    ds_erro_p            OUT text) IS

qt_prof_item_w  bigint;
qt_medico_w     bigint := 0;
qt_medico_lib_w bigint := 0;
qt_prof_rod_w	bigint;

cd_medico_lib_w     pessoa_fisica.cd_pessoa_fisica%type;
v_exist             bigint;
cd_medico_w			pessoa_fisica.cd_pessoa_fisica%type;
ie_rodizio_especialidade_w	agenda_integrada_item.ie_rodizio_especialidade%type;
ie_classif_agenda_w	ageint_rodizio.ie_classif_agenda%type;

cd_estab_agenda_p  agenda.cd_estabelecimento%type;


BEGIN
SELECT COUNT(*)
  INTO STRICT qt_prof_item_w
  FROM agenda_integrada_prof_item
 WHERE nr_seq_agenda_item = nr_seq_item_p;

SELECT cd_medico,
	coalesce(ie_rodizio_especialidade, 'N')
  INTO STRICT cd_medico_w,
		ie_rodizio_especialidade_w
  FROM agenda_integrada_item
 WHERE nr_sequencia = nr_seq_item_p;

 select	max(ie_classif_agenda)
 into STRICT	ie_classif_agenda_w
 from	ageint_rodizio
 where	nr_Sequencia	= nr_sequencia_rod_p;

select max(cd_estabelecimento)
  into STRICT cd_estab_agenda_p
  from agenda a
 where a.cd_agenda = cd_agenda_p;

IF (qt_prof_item_w = 0) and
	((coalesce(cd_medico_w::text, '') = '') or (ie_rodizio_especialidade_w = 'S' and cd_medico_w <> cd_medico_p)) THEN

	SELECT COUNT(1)
	INTO STRICT v_exist
	FROM ageint_prof_rodizio apr
	WHERE apr.nr_seq_rodizio = nr_sequencia_rod_p
	 AND cd_pessoa_fisica = cd_medico_p
	 and (dt_agenda_p >= dt_inicio_vigencia or coalesce(dt_inicio_vigencia::text, '') = '')
	 and (dt_agenda_p <= dt_fim_vigencia or coalesce(dt_fim_vigencia::text, '') = '')
	 AND ie_situacao = 'A';
	IF	v_exist = 0 THEN
		ds_erro_p := '';
	END IF;

	IF (coalesce(cd_tipo_agenda_p, 2) = 3) AND v_exist > 0 THEN
	
   --busca a quantidade de agendamento para todas as agendas da especialidade da regra dos profissionais que fazem parte da regra	   
	WITH c_agendas AS
	 (select count(agc.cd_agenda) - max(( select count(aii.cd_medico)
           from agenda_integrada_item aii, agenda_consulta aci            
           where aii.nr_seq_agenda_cons = aci.nr_sequencia
            and (aci.cd_agenda IS NOT NULL AND aci.cd_agenda::text <> '')
            and aci.dt_agenda >= trunc(dt_agenda_p)
            and aci.dt_agenda <= trunc(dt_agenda_p) + 86339 / 86400
            and (aii.cd_medico IS NOT NULL AND aii.cd_medico::text <> '')
            and aii.cd_medico = ag.cd_pessoa_fisica
            and aci.cd_agenda = ag.cd_agenda
            AND (aci.nm_usuario_acesso <> nm_usuario_p  OR coalesce(aci.nm_usuario_acesso::text, '') = '')
            and aci.ie_status_agenda NOT IN ('C', 'F', 'B', 'L') )) qtd_agendamento, ag.cd_pessoa_fisica cd_medico
		  FROM ageint_prof_rodizio apr, agenda ag
LEFT OUTER JOIN (select cd_agenda from agenda_consulta ac
				 where ac.ie_classif_agenda = coalesce(ie_classif_agenda_w,ie_classif_Agenda)
				   and ac.dt_agenda between trunc(dt_agenda_p) and trunc(dt_agenda_p) + 86339 / 86400
				   AND (ac.nm_usuario_acesso <> nm_usuario_p  OR coalesce(ac.nm_usuario_acesso::text, '') = '')
				   AND (ac.ie_status_agenda NOT IN ('C', 'F', 'B', 'L'))) agc ON (ag.cd_agenda = agc.cd_agenda)
WHERE ag.cd_pessoa_fisica = apr.cd_pessoa_fisica  and ag.cd_especialidade = cd_especialidade_p and apr.nr_seq_rodizio = nr_sequencia_rod_p and ag.cd_estabelecimento = cd_estab_agenda_p and (dt_agenda_p >= dt_inicio_vigencia or coalesce(dt_inicio_vigencia::text, '') = '') and (dt_agenda_p <= dt_fim_vigencia or coalesce(dt_fim_vigencia::text, '') = '') AND coalesce(apr.ie_situacao,'A') = 'A' and coalesce(ag.ie_situacao,'A') = 'A' and exists ( select 1 from agenda_consulta agc where ag.cd_agenda = agc.cd_Agenda and agc.ie_classif_agenda = coalesce(ie_classif_agenda_w,agc.ie_classif_Agenda) and agc.ie_status_agenda in ('L','LF') and agc.dt_Agenda between trunc(dt_agenda_p) and trunc(dt_agenda_p) + 86339 / 86400) group by ag.cd_pessoa_fisica),      
	--pega a quantidade de agendamentos do profissional que esta sendo validado
	c_agenda_med AS (SELECT qtd_agendamento FROM c_agendas WHERE cd_medico = cd_medico_p),
	--pega a quantidade de agendamentos do profissional com a menor quantidade de agendamentos 
	c_agenda_out AS (SELECT MIN(qtd_agendamento) qtd_agendamento
		FROM c_agendas
	   WHERE cd_medico <> cd_medico_p),
	c_agendas_tot as (SELECT count(*) qtd_agendamento FROM c_agendas)
		
	SELECT Max(coalesce(a.qtd_agendamento,0)) AS qtd_agenda_med,
		   Max(coalesce(b.qtd_agendamento,0)) AS qtd_agenda_out,
		   max(c.qtd_agendamento)
	  INTO STRICT qt_medico_w,
		   qt_medico_lib_w,
		   qt_prof_rod_w
	  FROM c_agenda_med a,
		   c_agenda_out b,
		   c_agendas_tot c;

	--select 	count(*) into qt_prof_rod_w	from	c_agendas

  
	-------------------------      
	END IF;
	IF	((qt_medico_w - qt_medico_lib_w) >= qt_dias_rodizio_p) and (qt_prof_rod_w > 1) THEN
		ds_erro_p := 'N';
	END IF;

END IF;

END;

BEGIN

consistir_rozidio_exame(nr_seq_item_p        => nr_seq_ageint_item_p,
						cd_medico_p          => cd_medico_p,
						dt_agenda_p          => dt_agenda_p,
						cd_agenda_p          => cd_agenda_p,
						cd_tipo_agenda_p     => cd_tipo_agenda_p,
						cd_estabelecimento_p => cd_estabelecimento_p,
						cd_especialidade_p   => cd_especialidade_p,
						nm_usuario_p         => nm_usuario_p,
						ds_erro_p            => ds_erro_w);

IF (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') THEN
	ie_permite_w := 'N';
END IF;

RETURN ie_permite_w;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION ageint_verifica_rodizio (nr_seq_ageint_item_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, cd_medico_p text, cd_agenda_p bigint, cd_tipo_agenda_p bigint, dt_agenda_p timestamp, cd_especialidade_p bigint, nr_seq_medico_regra_p bigint, qt_dias_rodizio_p bigint, nr_sequencia_rod_p bigint) FROM PUBLIC;

