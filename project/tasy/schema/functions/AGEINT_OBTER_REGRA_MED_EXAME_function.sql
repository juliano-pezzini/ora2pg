-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION ageint_obter_regra_med_exame ( cd_medico_p text, cd_agenda_p bigint, nr_seq_proc_interno_p bigint, nr_seq_ageint_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint) RETURNS varchar AS $body$
DECLARE


cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_estabelecimento_w	smallint;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
qt_regra_w		integer;
ds_retorno_w		varchar(1)	:= 'S';
cd_plano_w		varchar(10);


BEGIN

if (coalesce(nr_seq_proc_interno_p,0)	> 0) then
	select	max(cd_convenio),
		max(cd_categoria),
		max(cd_estabelecimento),
		max(cd_plano)
	into STRICT	cd_convenio_w,
		cd_categoria_w,
		cd_estabelecimento_w,
		cd_plano_w
	from	agenda_integrada
	where	nr_sequencia	= nr_seq_Ageint_p;

	if (coalesce(cd_procedimento_p,0) 	= 0) or (coalesce(ie_origem_proced_p,0)	= 0) then
		SELECT * FROM obter_proc_tab_interno_conv(
							nr_seq_proc_interno_p, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, cd_procedimento_w, ie_origem_proced_w, null, clock_timestamp(), null, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
	else
		cd_procedimento_w	:= cd_procedimento_p;
		ie_origem_proced_w	:= ie_origem_proced_p;
	end if;

	select	count(*)
	into STRICT	qt_regra_w
	from	agenda_medico_proced
	where	coalesce(cd_agenda,cd_agenda_p) 	= cd_agenda_p
	and	((cd_procedimento = cd_procedimento_w) or (coalesce(cd_procedimento::text, '') = ''))
	and	((coalesce(cd_procedimento::text, '') = '') or ((ie_origem_proced = ie_origem_proced_w) or (coalesce(ie_origem_proced::text, '') = '')))
	and	((nr_seq_proc_interno = nr_seq_proc_interno_p) or (coalesce(nr_seq_proc_interno::text, '') = ''))
	AND	((cd_area_procedimento = obter_area_procedimento( cd_procedimento_w, ie_origem_proced_w)) or (coalesce(cd_area_procedimento::text, '') = '') ) and
	        ((cd_especialidade = obter_especialidade_proced( cd_procedimento_W, ie_origem_proced_w)) or (coalesce(cd_especialidade::text, '') = '') ) and
	        ((cd_grupo_proc = obter_grupo_procedimento( cd_procedimento_w, ie_origem_proced_w,'C')) or (coalesce(cd_grupo_proc::text, '') = ''));

	if (qt_regra_w	> 0) then
		if (cd_medico_p IS NOT NULL AND cd_medico_p::text <> '') then
			select	count(*)
			into STRICT	qt_regra_w
			from	agenda_medico_proced
			where	coalesce(cd_agenda,cd_agenda_p) 	= cd_agenda_p
			and	cd_medico	= cd_medico_p
			and	((cd_procedimento = cd_procedimento_w) or (coalesce(cd_procedimento::text, '') = ''))
			and	((coalesce(cd_procedimento::text, '') = '') or ((ie_origem_proced = ie_origem_proced_w) or (coalesce(ie_origem_proced::text, '') = '')))
			and	((nr_seq_proc_interno = nr_seq_proc_interno_p) or (coalesce(nr_seq_proc_interno::text, '') = '')) and
				((cd_area_procedimento = obter_area_procedimento( cd_procedimento_w, ie_origem_proced_w)) or (coalesce(cd_area_procedimento::text, '') = '') ) and
				((cd_especialidade = obter_especialidade_proced( cd_procedimento_W, ie_origem_proced_w)) or (coalesce(cd_especialidade::text, '') = '') ) and
				((cd_grupo_proc = obter_grupo_procedimento( cd_procedimento_w, ie_origem_proced_w,'C')) or (coalesce(cd_grupo_proc::text, '') = ''));

			if (qt_regra_w	= 0) then
				ds_retorno_w	:= 'N';
			end if;
		else
			ds_retorno_w	:= 'N';
		end if;

	end if;
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION ageint_obter_regra_med_exame ( cd_medico_p text, cd_agenda_p bigint, nr_seq_proc_interno_p bigint, nr_seq_ageint_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint) FROM PUBLIC;

