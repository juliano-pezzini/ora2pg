-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE agenda_item_row AS (
	nr_seq_regra_mesma_agenda_w	bigint,
	nr_seq_ordenacao 		bigint,
	nr_seq_proc_interno		agenda_integrada_item.nr_seq_proc_interno%type,
	cd_procedimento			agenda_integrada_item.cd_procedimento%type,
	ie_origem_proced		agenda_integrada_item.ie_origem_proced%type,
	cd_area_procedimento		estrutura_procedimento_v. cd_area_procedimento %type,
	cd_especialidade		estrutura_procedimento_v. cd_especialidade %type,
	cd_grupo_proc			estrutura_procedimento_v. cd_grupo_proc %type,
	nr_seq_regra_prior_w		bigint
);
CREATE TYPE prioridade_minima_regra_row AS (
	nr_seq_prioridade bigint
);


CREATE OR REPLACE FUNCTION ageint_obter_prioridade ( nr_seq_ageint_p bigint, nr_seq_proc_interno_p bigint, cd_estabelecimento_p bigint, nr_seq_grupo_p bigint default null, nr_seq_ageint_item_p bigint default null) RETURNS bigint AS $body$
DECLARE

TYPE agenda_item_table IS TABLE OF agenda_item_row INDEX BY integer;
TYPE agenda_item_pai_table IS TABLE OF agenda_item_table INDEX BY integer;
TYPE prioridade_minima_regra_table IS TABLE OF prioridade_minima_regra_row INDEX BY integer;

nr_seq_prioridade_w	smallint;
cd_estabelecimento_w	smallint;
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
cd_area_procedimento_w	bigint;
cd_especialidade_w	bigint;
cd_grupo_proc_w		bigint;
vl_retorno_w		bigint	:= 999;
cd_plano_w		varchar(10);
nr_seq_regra_prior_w	bigint;
nr_seq_regra_prior_item_w bigint  := 0;
nr_seq_proc_interno_atual_w	bigint;
nr_seq_proc_interno_w	bigint;
cd_especialidade_medica_w	bigint;
agenda_item_w		agenda_item_table;
agenda_item_pai_w	agenda_item_pai_table;
ie_sobrepoe_w		varchar(1);
prioridade_minima_regra_w	prioridade_minima_regra_table;
qt_tentativas_w		bigint := 0;

C01 CURSOR FOR
	SELECT	nr_seq_apres
	from	ageint_regra_prioridade
	where	coalesce(cd_area_procedimento, cd_area_procedimento_w)	= cd_area_procedimento_w
	and	coalesce(cd_Especialidade, cd_especialidade_w)		= cd_especialidade_w
	and (coalesce(cd_especialidade_medica, coalesce(cd_especialidade_medica_w,0))	= coalesce(cd_especialidade_medica_w,0))
	and	coalesce(cd_grupo_proc, cd_grupo_proc_w)			= cd_grupo_proc_w
	and (coalesce(nr_seq_proc_interno, coalesce(nr_seq_proc_interno_p,0))	= coalesce(nr_seq_proc_interno_p,0))
	and	coalesce(nr_seq_grupo, coalesce(nr_seq_grupo_p,0))		= coalesce(nr_seq_grupo_p, 0)
	and	ie_situacao = 'A'
	and	coalesce(cd_estabelecimento, cd_estabelecimento_p)		= cd_estabelecimento_p
	order by coalesce(nr_seq_grupo, 0),
		coalesce(nr_seq_proc_interno, 0),
		coalesce(cd_grupo_proc, 0),
		coalesce(cd_Especialidade, 0),
		coalesce(cd_Especialidade_medica, 0),
		coalesce(cd_area_procedimento, 0);

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	ageint_regra_exame_prior
	where	((cd_area_procedimento = cd_area_procedimento_w) or (coalesce(cd_area_procedimento::text, '') = ''))
	and	((cd_especialidade = cd_especialidade_w) or (coalesce(cd_especialidade::text, '') = ''))
	and	((cd_grupo_proc = cd_grupo_proc_w) or (coalesce(cd_grupo_proc::text, '') = ''))
	and	((cd_procedimento = cd_procedimento_w) or (coalesce(cd_procedimento::text, '') = ''))
	and	((coalesce(cd_procedimento::text, '') = '') or ((ie_origem_proced = ie_origem_proced_w) or (coalesce(ie_origem_proced::text, '') = '')))
	and	((nr_seq_proc_interno = nr_seq_proc_interno_atual_w) or (coalesce(nr_seq_proc_interno::text, '') = ''))
	order by coalesce(cd_procedimento,0),
		coalesce(nr_seq_proc_interno,0),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_procedimento,0);

C03 CURSOR FOR
	SELECT	nr_seq_proc_interno,
		max(nr_sequencia) nr_sequencia,
		max(cd_procedimento) cd_procedimento,
		max(ie_origem_proced) ie_origem_proced
	from	agenda_integrada_item
	where	nr_seq_agenda_int	= nr_seq_Ageint_p
	group by nr_seq_proc_interno;

C04 CURSOR FOR
	SELECT	nr_sequencia
	from	ageint_item_regra_prior
	where	((cd_area_procedimento = cd_area_procedimento_w) or (coalesce(cd_area_procedimento::text, '') = ''))
	and	((cd_especialidade = cd_especialidade_w) or (coalesce(cd_especialidade::text, '') = ''))
	and	((cd_grupo_proc = cd_grupo_proc_w) or (coalesce(cd_grupo_proc::text, '') = ''))
	and	((cd_procedimento = cd_procedimento_w) or (coalesce(cd_procedimento::text, '') = ''))
	and	((coalesce(cd_procedimento::text, '') = '') or ((ie_origem_proced = ie_origem_proced_w) or (coalesce(ie_origem_proced::text, '') = '')))
	and	((nr_seq_proc_interno = nr_seq_proc_interno_w) or (coalesce(nr_seq_proc_interno::text, '') = ''))
	and	nr_seq_regra_exame = nr_seq_regra_prior_w
	order by coalesce(cd_procedimento,0),
		coalesce(nr_seq_proc_interno,0),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_procedimento,0);
		
procedure reprocessar_ordem(proc_pai bigint) is
	;
BEGIN
	if (qt_tentativas_w >= 10000) then
		return;
	end if;
	qt_tentativas_w := qt_tentativas_w+1;
	if (agenda_item_pai_w.exists(proc_pai)) then
		for proc_filho in agenda_item_pai_w[proc_pai].first..agenda_item_pai_w[proc_pai].last loop
			if (agenda_item_pai_w[proc_pai].exists (proc_filho)) then
				if (agenda_item_w[proc_filho].nr_seq_ordenacao <= agenda_item_w[proc_pai].nr_seq_ordenacao) then
					agenda_item_w[proc_filho].nr_seq_ordenacao := agenda_item_w[proc_pai].nr_seq_ordenacao+1;
					if (prioridade_minima_regra_w.exists(agenda_item_w[proc_filho].nr_seq_regra_mesma_agenda_w)) then
						if (agenda_item_w[proc_filho].nr_seq_ordenacao > prioridade_minima_regra_w(agenda_item_w[proc_filho].nr_seq_regra_mesma_agenda_w).nr_seq_prioridade) then
							prioridade_minima_regra_w(agenda_item_w[proc_filho].nr_seq_regra_mesma_agenda_w).nr_seq_prioridade := agenda_item_w[proc_filho].nr_seq_ordenacao;
						end if;
					elsif (agenda_item_w[proc_filho].nr_seq_regra_mesma_agenda_w > 0) then
						prioridade_minima_regra_w(agenda_item_w[proc_filho].nr_seq_regra_mesma_agenda_w).nr_seq_prioridade := agenda_item_w[proc_filho].nr_seq_ordenacao;
					end if;
					CALL reprocessar_ordem(proc_filho);
				end if;
			end if;
		end loop;
	end if;
	end;

begin

select	max(cd_convenio),
	max(cd_categoria),
	max(cd_estabelecimento),
	max(cd_plano)
into STRICT	cd_convenio_w,
	cd_categoria_w,
	cd_estabelecimento_w,
	cd_plano_w
from	agenda_integrada
where	nr_sequencia	= nr_seq_ageint_p;


if (nr_seq_ageint_item_p IS NOT NULL AND nr_seq_ageint_item_p::text <> '') then
  select	max(cd_procedimento),
          max(ie_origem_proced),
          max(cd_especialidade)
  into STRICT	cd_procedimento_W,
        ie_origem_proced_W,
        cd_especialidade_medica_w
  from	agenda_integrada_item
  where	nr_sequencia	= nr_seq_ageint_item_p
  and	coalesce(ie_regra,0) not in (1,2,5)
  and	coalesce(ie_glosa,'X') not in ('T','E','R','B','H','Z');
else
   select	max(cd_procedimento),
          max(ie_origem_proced),
          max(cd_especialidade)
  into STRICT	cd_procedimento_W,
        ie_origem_proced_W,
        cd_especialidade_medica_w
  from	agenda_integrada_item
  where	nr_seq_agenda_int	= nr_seq_Ageint_p
  and (nr_seq_proc_interno	= nr_seq_proc_interno_p)
  and	coalesce(ie_regra,0) not in (1,2,5)
  and	coalesce(ie_glosa,'X') not in ('T','E','R','B','H','Z');
end if;

if (coalesce(cd_procedimento_W,0) 	= 0) or (coalesce(ie_origem_proced_w,0)	= 0) then
	SELECT * FROM obter_proc_tab_interno_conv(
					nr_seq_proc_interno_p, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, cd_procedimento_w, ie_origem_proced_w, null, clock_timestamp(), null, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
end if;

select	coalesce(max(cd_area_procedimento),0),
	coalesce(max(cd_especialidade),0),
	coalesce(max(cd_grupo_proc),0)
into STRICT	cd_area_procedimento_w,
	cd_especialidade_w,
	cd_grupo_proc_w
from	estrutura_procedimento_v
where	cd_procedimento = cd_procedimento_w
and	ie_origem_proced = ie_origem_proced_w;

open C01;
loop
fetch C01 into
	nr_seq_prioridade_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	vl_retorno_w	:= nr_seq_prioridade_w;
	end;
end loop;
close C01;

for item in C03 loop
	if (item.nr_seq_proc_interno IS NOT NULL AND item.nr_seq_proc_interno::text <> '') then
		agenda_item_w[item.nr_seq_proc_interno].nr_seq_proc_interno := item.nr_seq_proc_interno;
		agenda_item_w[item.nr_seq_proc_interno].cd_procedimento := item.cd_procedimento;
		agenda_item_w[item.nr_seq_proc_interno].ie_origem_proced := item.ie_origem_proced;
		agenda_item_w[item.nr_seq_proc_interno].nr_seq_ordenacao := 1;

		if (coalesce(agenda_item_w[item.nr_seq_proc_interno].cd_procedimento,0) 	= 0) or (coalesce(agenda_item_w[item.nr_seq_proc_interno].ie_origem_proced,0)	= 0) then
			SELECT * FROM obter_proc_tab_interno_conv(
					agenda_item_w[item.nr_seq_proc_interno].nr_seq_proc_interno, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, agenda_item_w[item.nr_seq_proc_interno].cd_procedimento, agenda_item_w[item.nr_seq_proc_interno].ie_origem_proced, null, clock_timestamp(), null, null, null, null, null, null, null, null) INTO STRICT agenda_item_w[item.nr_seq_proc_interno].cd_procedimento, agenda_item_w[item.nr_seq_proc_interno].ie_origem_proced;
		end if;
		agenda_item_w[item.nr_seq_proc_interno].nr_seq_regra_mesma_agenda_w := Ageinte_Obter_Seq_Ex_Agenda(item.nr_sequencia,cd_estabelecimento_p,'S');
		select	coalesce(max(cd_area_procedimento),0),
			coalesce(max(cd_especialidade),0),
			coalesce(max(cd_grupo_proc),0)
		into STRICT	agenda_item_w[item.nr_seq_proc_interno].cd_area_procedimento,
			agenda_item_w[item.nr_seq_proc_interno].cd_especialidade,
			agenda_item_w[item.nr_seq_proc_interno].cd_grupo_proc
		from	estrutura_procedimento_v
		where	cd_procedimento = cd_procedimento_w
		and	ie_origem_proced = ie_origem_proced_w;
	end if;
end loop;

if (agenda_item_w.count > 0) then
	for linha in agenda_item_w.first..agenda_item_w.last loop
		if (agenda_item_w.exists(linha)) then
			nr_seq_regra_prior_item_w := 0;
			cd_area_procedimento_w := agenda_item_w[linha].cd_area_procedimento;
			cd_especialidade_w := agenda_item_w[linha].cd_especialidade;
			cd_grupo_proc_w := agenda_item_w[linha].cd_grupo_proc;
			cd_procedimento_w := agenda_item_w[linha].cd_procedimento;
			ie_origem_proced_w := agenda_item_w[linha].ie_origem_proced;
			nr_seq_proc_interno_atual_w := agenda_item_w[linha].nr_seq_proc_interno;
			nr_seq_regra_prior_w := 0;
			open C02;
			loop
			fetch C02 into
				nr_seq_regra_prior_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				nr_seq_regra_prior_w := nr_seq_regra_prior_w;
				end;
			end loop;
			close C02;
			if (nr_seq_regra_prior_w <> 0) then
				agenda_item_w[linha].nr_seq_regra_prior_w := nr_seq_regra_prior_w;
				for linha2 in agenda_item_w.first..agenda_item_w.last loop
					if (agenda_item_w.exists(linha2)) and (nr_seq_proc_interno_atual_w <> agenda_item_w[linha2].nr_seq_proc_interno) then
						nr_seq_proc_interno_w := agenda_item_w[linha2].nr_seq_proc_interno;
						cd_procedimento_W := agenda_item_w[linha2].cd_procedimento;
						ie_origem_proced_W := agenda_item_w[linha2].ie_origem_proced;
						open C04;
						loop
						fetch C04 into
							nr_seq_regra_prior_item_w;
						EXIT WHEN NOT FOUND; /* apply on C04 */
							if (nr_seq_proc_interno_p = nr_seq_proc_interno_atual_w) then
								ie_sobrepoe_w := 'S';
							end if;
							agenda_item_pai_w(linha)(linha2).nr_seq_proc_interno := agenda_item_w[linha].nr_seq_proc_interno;
						end loop;
						close C04;
					end if;
				end loop;
			end if;
		end if;
	end loop;
end if;

if (agenda_item_w.exists(nr_seq_proc_interno_p)) and ((ie_sobrepoe_w = 'S') or (agenda_item_w[nr_seq_proc_interno_p].nr_seq_regra_mesma_agenda_w > 0)) then
	for proc_pai in agenda_item_w.first..agenda_item_w.last loop
		CALL reprocessar_ordem(proc_pai);
	end loop;

	for proc_int in agenda_item_w.first..agenda_item_w.last loop
		if (agenda_item_w.exists(proc_int)) and (prioridade_minima_regra_w.exists(agenda_item_w[proc_int].nr_seq_regra_mesma_agenda_w)) and (agenda_item_w[proc_int].nr_seq_ordenacao < prioridade_minima_regra_w(agenda_item_w[proc_int].nr_seq_regra_mesma_agenda_w).nr_seq_prioridade) then
			agenda_item_w[proc_int].nr_seq_ordenacao := prioridade_minima_regra_w(agenda_item_w[proc_int].nr_seq_regra_mesma_agenda_w).nr_seq_prioridade;
		end if;
	end loop;

	for proc_pai in agenda_item_w.first..agenda_item_w.last loop
		CALL reprocessar_ordem(proc_pai);
	end loop;
	vl_Retorno_w := agenda_item_w[nr_seq_proc_interno_p].nr_seq_ordenacao;
end if;

return	vl_Retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION ageint_obter_prioridade ( nr_seq_ageint_p bigint, nr_seq_proc_interno_p bigint, cd_estabelecimento_p bigint, nr_seq_grupo_p bigint default null, nr_seq_ageint_item_p bigint default null) FROM PUBLIC;

