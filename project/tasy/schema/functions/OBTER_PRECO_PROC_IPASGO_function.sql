-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_preco_proc_ipasgo ( cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, dt_conta_p timestamp, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, cd_tipo_acomodacao_p bigint, ie_tipo_atendimento_p bigint, cd_setor_atendimento_p bigint, cd_medico_p text, cd_funcao_medico_p text, cd_usuario_convenio_p text, cd_plano_p text, ie_clinica_p bigint, cd_empresa_ref_p bigint, ie_resp_credito_p text, ie_opcao_p text, nr_sequencia_p bigint default null) RETURNS bigint AS $body$
DECLARE


/* ie_opcao_p:
P	- Procedimento	
M	- Medico	
C	- Custo Op.	
F	- Filme   
PM	- Ponto Medico
H	- Honorario
IPDT	- IPASGO Dados taratmento: Resp. credito = 'M' vl_medico, <> 'M' vl_procedimento
IPDE	- IPASGO Dados exames: Resp. credito = 'M' (vl_medico + vl_material), <> 'M' vl_procedimento
IPAC	- IPASGO Alto custo: Resp. credito = 'M' (vl_medico + vl_material), <> 'M' entao se vl_material = 0 vl_procedimento, <> 0 vl_material
*/
qt_pontos_w			preco_amb.qt_pontuacao%type;
vl_procedimento_w			double precision;
vl_custo_operacional_w		double precision;
vl_anestesista_w			double precision;
vl_medico_w				double precision;
vl_auxiliares_w			double precision;
vl_materiais_w			double precision;
vl_pto_procedimento_w		double precision;
vl_pto_custo_operac_w		double precision;
vl_pto_anestesista_w			double precision;
vl_pto_medico_w			double precision;
vl_pto_auxiliares_w			double precision;
vl_pto_materiais_w			double precision;
qt_porte_anestesico_w		double precision;
cd_edicao_amb_w			integer;
vl_resultado_w			double precision;
cd_area_procedimento_w		double precision;
ie_preco_informado_w		varchar(01);
ie_classificacao_w		varchar(01);
nr_seq_ajuste_proc_w		bigint;
qt_participante_w			bigint := 0;
vl_auxiliares_ww			double precision := 0;


BEGIN

select	max(ie_classificacao)
into STRICT	ie_classificacao_w
from	procedimento
where	cd_procedimento	= cd_procedimento_p
and	ie_origem_proced	= ie_origem_proced_p;

if (ie_classificacao_w = '1') then
	begin	
	SELECT * FROM define_preco_procedimento(
		cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, dt_conta_p, cd_procedimento_p, cd_tipo_acomodacao_p, ie_tipo_atendimento_p, cd_setor_atendimento_p, cd_medico_p, cd_funcao_medico_p, null, null, nr_seq_proc_interno_p, cd_usuario_convenio_p, cd_plano_p, ie_clinica_p, cd_empresa_ref_p, null, vl_procedimento_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w, 0, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_procedimento_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w;

	if (vl_auxiliares_w > 0) and (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then
		begin
		
		select sum(coalesce(vl_conta,0))
		into STRICT vl_auxiliares_ww
		from procedimento_participante
		where nr_sequencia = nr_sequencia_p
		and	coalesce(vl_conta,0) > 0;
		
		if (vl_auxiliares_ww > 0) then
			vl_procedimento_w := (vl_custo_operacional_w +  vl_anestesista_w +  vl_medico_w + vl_auxiliares_ww + vl_materiais_w);
		else
			vl_procedimento_w := vl_procedimento_w - vl_auxiliares_w;
		end if;
		
		end;
	end if;
	end;
else	begin
	SELECT * FROM define_preco_servico(
		cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, dt_conta_p, cd_procedimento_p, cd_setor_atendimento_p, ie_tipo_atendimento_p, cd_tipo_acomodacao_p, cd_usuario_convenio_p, cd_plano_p, ie_clinica_p, cd_empresa_ref_p, null, vl_procedimento_w, nr_seq_ajuste_proc_w, null, 0, null, nr_seq_proc_interno_p, null, null, null, null, null, null, null, null, null, cd_medico_p) INTO STRICT vl_procedimento_w, nr_seq_ajuste_proc_w;
	end;

end if;

if (ie_opcao_p IS NOT NULL AND ie_opcao_p::text <> '') then
	begin
	if (ie_opcao_p	= 'P') then
		vl_resultado_w	:= vl_procedimento_w;
	elsif (ie_opcao_p	= 'C') then
		vl_resultado_w	:= vl_custo_operacional_w;
	elsif (ie_opcao_p	= 'M') then
		vl_resultado_w	:= vl_medico_w;
	elsif (ie_opcao_p	= 'F') then
		vl_resultado_w	:= vl_materiais_w;
	elsif (ie_opcao_p	= 'PP') then
		vl_resultado_w	:= vl_pto_procedimento_w;
	elsif (ie_opcao_p	= 'PM') then
		vl_resultado_w	:= vl_pto_medico_w;
	elsif (ie_opcao_p	= 'H') then
		vl_resultado_w	:= vl_auxiliares_w + vl_medico_w + vl_anestesista_w;
	elsif (ie_opcao_p	= 'PA') then
		vl_resultado_w	:= qt_porte_anestesico_w;
	elsif (ie_opcao_p	= 'A') then
		vl_resultado_w	:= coalesce(vl_anestesista_w,0);
	elsif (ie_opcao_p	= 'IPDT') then
		if (coalesce(ipasgo_obter_se_respcred_soma(coalesce(ie_resp_credito_p,'0')),'N') = 'S') then
			if (ie_classificacao_w = 1) then
				vl_resultado_w	:= coalesce(vl_medico_w,0) + coalesce(vl_custo_operacional_w,0);	
			else
				vl_resultado_w	:= vl_procedimento_w;
			end if;
		else
			vl_resultado_w	:= vl_procedimento_w;
		end if;
	elsif (ie_opcao_p	= 'IPDE') then
		if (coalesce(ipasgo_obter_se_respcred_soma(coalesce(ie_resp_credito_p,'0')),'N') = 'S') then
			vl_resultado_w	:= coalesce(vl_medico_w,0) + coalesce(vl_materiais_w,0);	
		else
			vl_resultado_w	:= vl_procedimento_w;
		end if;
	elsif (ie_opcao_p	= 'IPAC') then
		if (coalesce(ipasgo_obter_se_respcred_soma(coalesce(ie_resp_credito_p,'0')),'N') = 'S') then
			vl_resultado_w	:= coalesce(vl_medico_w,0) + coalesce(vl_materiais_w,0);	
		elsif (coalesce(vl_materiais_w,0) = 0) then
			vl_resultado_w	:= vl_procedimento_w;
		else	
			vl_resultado_w	:= coalesce(vl_materiais_w,0);
		end if;
	end if;	
	end;
end if;

return vl_resultado_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_preco_proc_ipasgo ( cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, dt_conta_p timestamp, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, cd_tipo_acomodacao_p bigint, ie_tipo_atendimento_p bigint, cd_setor_atendimento_p bigint, cd_medico_p text, cd_funcao_medico_p text, cd_usuario_convenio_p text, cd_plano_p text, ie_clinica_p bigint, cd_empresa_ref_p bigint, ie_resp_credito_p text, ie_opcao_p text, nr_sequencia_p bigint default null) FROM PUBLIC;

