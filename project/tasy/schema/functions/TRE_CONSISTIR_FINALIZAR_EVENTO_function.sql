-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION tre_consistir_finalizar_evento ( nr_seq_evento_p bigint, nr_seq_agenda_p bigint) RETURNS varchar AS $body$
DECLARE

 
ie_consiste_w		boolean		:= FALSE;
ds_retorno_w		varchar(4000)	:= 'N';
ds_msg_w		varchar(4000)	:= '';
nr_seq_curso_w		bigint;
ds_modulo_w		varchar(255);
qt_inscrito_w		bigint;
qt_os_w			bigint;
qt_modulos_sem_cert_w	bigint;
nr_consistencia_w		smallint := 0;
nr_seq_mod_w		bigint;
dt_inicio_w		timestamp;
dt_termino_w		timestamp;
nr_seq_modulo_w		bigint;
ie_status_modulo_w	varchar(3);
qt_hist_realizado_w		bigint;

-- Não foi informado percentual real do módulo 
C01 CURSOR FOR 
SELECT	b.nr_sequencia, 
	b.ds_modulo 
FROM	tre_evento_modulo a, 
	tre_curso_modulo b 
WHERE	a.nr_seq_evento 	= nr_seq_evento_p 
AND	b.nr_sequencia 	= a.nr_seq_modulo 
AND	coalesce(a.pr_real::text, '') = '';

-- modulos do evento, status dos módulos 
C02 CURSOR FOR 
SELECT	c.nr_sequencia, 
	c.nr_seq_modulo, 
	c.dt_inicio, 
	c.dt_termino, 
	c.ie_status_modulo 
FROM	tre_evento_modulo c, 
	tre_evento b 
WHERE	b.nr_sequencia = c.nr_seq_evento 
AND	b.nr_sequencia = nr_seq_evento_p;

C03 CURSOR FOR 
SELECT COUNT(nr_seq_mod_evento) 
FROM tre_inscrito a 
	,tre_inscrito_presenca b 
WHERE b.nr_seq_inscrito = a.nr_sequencia 
	AND a.nr_seq_evento = nr_seq_evento_p 
	AND (nr_seq_mod_evento IS NOT NULL AND nr_seq_mod_evento::text <> '') 
	AND b.ie_presente = 'S' 
	AND NOT EXISTS ( 
		SELECT 1 
		FROM tre_evento_envio c 
		WHERE c.nr_seq_evento = a.nr_seq_evento 
			AND IE_TIPO_ENVIO IN ( 
				'C' 
				,'CT' 
				) 
			AND (ds_destino IS NOT NULL AND ds_destino::text <> '') 
		);


BEGIN 
 
OPEN C01;
LOOP 
FETCH C01 INTO 
	nr_seq_curso_w, 
	ds_modulo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	BEGIN 
	nr_consistencia_w 	:= nr_consistencia_w + 1;
	ie_consiste_w 	:= TRUE;
	ds_msg_w	:= ds_msg_w ||TO_CHAR(nr_consistencia_w)||' - O módulo ' || TO_CHAR(nr_seq_curso_w) || ' - ' || ds_modulo_w || ' não possui percentual real informado.' || CHR(13);
	END;
END LOOP;
CLOSE C01;
 
OPEN C02;
LOOP 
FETCH C02 INTO 
	nr_seq_mod_w, 
	nr_seq_modulo_w, 
	dt_inicio_w, 
	dt_termino_w, 
	ie_status_modulo_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	BEGIN 
	SELECT	COUNT(*) 
	INTO STRICT	qt_inscrito_w 
	FROM	tre_inscrito a, 
		tre_inscrito_presenca b, 
		tre_evento_modulo c 
	WHERE	a.nr_sequencia = b.nr_seq_inscrito 
	AND	a.nr_seq_mod_evento = c.nr_sequencia 
	AND	a.nr_seq_mod_evento = nr_seq_mod_w 
	AND	b.dt_presenca BETWEEN dt_inicio_w AND fim_dia(dt_termino_w);
 
	SELECT	SUBSTR(obter_descricao_modulo(nr_seq_modulo_w),1,200) 
	INTO STRICT	ds_modulo_w 
	;
 
	IF (qt_inscrito_w = 0) THEN 
		BEGIN 
		nr_consistencia_w 	:= nr_consistencia_w + 1;
		ie_consiste_w	:= TRUE;
		ds_msg_w	:= ds_msg_w ||TO_CHAR(nr_consistencia_w) ||' - O módulo '||TO_CHAR(nr_seq_modulo_w)||' - '||ds_modulo_w||', deve ter pelo menos um inscrito presente.' || CHR(13);
		END;
	END IF;
	 
	-- Verifica os módulos que não estão fechados 
	IF (coalesce(ie_status_modulo_w::text, '') = '' or ie_status_modulo_w <> 'F') THEN 
		BEGIN 
		nr_consistencia_w 	:= nr_consistencia_w + 1;
		ie_consiste_w	:= TRUE;
		ds_msg_w	:= ds_msg_w ||TO_CHAR(nr_consistencia_w) ||' - O módulo '||TO_CHAR(nr_seq_modulo_w)||' - '||ds_modulo_w||', está em aberto.' || CHR(13);
		END;
	END IF;
	END;
END LOOP;
CLOSE C02;
 
OPEN C03;
LOOP 
FETCH C03 INTO	 
	qt_modulos_sem_cert_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	BEGIN 
	IF (qt_modulos_sem_cert_w > 0) THEN 
		BEGIN 
		nr_consistencia_w 	:= nr_consistencia_w + 1;
		ie_consiste_w 	:= TRUE;
		ds_msg_w	:= ds_msg_w ||TO_CHAR(nr_consistencia_w)|| wheb_mensagem_pck.get_texto(346306) || CHR(13);
		END;
	END IF;	
	END;
END LOOP;
CLOSE C03;
 
SELECT	COUNT(*) 
INTO STRICT	qt_hist_realizado_w 
FROM	tre_historico_realizado 
WHERE	nr_seq_evento = nr_seq_evento_p;
IF (qt_hist_realizado_w = 0) THEN 
	BEGIN 
	nr_consistencia_w 	:= nr_consistencia_w + 1;
	ie_consiste_w 	:= TRUE;
	ds_msg_w	:= ds_msg_w ||TO_CHAR(nr_consistencia_w)|| ' - O evento deve ter pelo menos um registro na pasta "histórico realização".' || CHR(13);
	END;
END IF;
 
SELECT	COUNT(*) 
INTO STRICT	qt_os_w 
FROM	man_ordem_servico_v v, 
	tre_agenda_ordem a 
WHERE	v.nr_sequencia = a.nr_seq_ordem 
AND	a.nr_seq_agenda = nr_seq_agenda_p;
 
IF (qt_os_w = 0) THEN 
	BEGIN 
	nr_consistencia_w	:= nr_consistencia_w + 1;
	ie_consiste_w 	:= TRUE;
	ds_msg_w	:= ds_msg_w ||TO_CHAR(nr_consistencia_w)||' - O evento deve ter pelo menos uma OS vinculada.' || CHR(13);
	END;
END IF;
 
IF (ie_consiste_w) THEN 
	ds_retorno_w := ' Consistência(s): ' || CHR(13)||CHR(13) || ds_msg_w;
END IF;
 
RETURN	ds_retorno_w;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION tre_consistir_finalizar_evento ( nr_seq_evento_p bigint, nr_seq_agenda_p bigint) FROM PUBLIC;

