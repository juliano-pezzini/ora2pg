-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_grupo_serv_sip ( nr_seq_conta_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_grupo_servico_p bigint) RETURNS varchar AS $body$
DECLARE

/*dados do grupo de serviço*/

ie_item_servico_w		varchar(1)	:= 'N';

/*dados do procedimento vindo como parâmetro*/

ie_origem_proced_w		bigint;
cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
cd_grupo_proc_w			bigint;
qt_proced_regra_w		bigint;
cd_area_w			bigint;
cd_grupo_w			bigint;


/*dados da conta*/

cd_guia_referencia_w		varchar(20);
cd_proced_conta_w		bigint;
ie_origem_proced_conta_w	bigint;
cd_area_conta_w			bigint;
cd_especialidade_con_w		bigint;
cd_grupo_conta_w		bigint;
ie_origem_proced_conta_ww	bigint;
nr_seq_conta_w			bigint;
qt_existe_proc_w		bigint;

qt_proc_valido_w		bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from 	pls_conta
	where coalesce(cd_guia_referencia,cd_guia) = cd_guia_referencia_w
	order by 1;


c02 CURSOR FOR
	SELECT	distinct(cd_procedimento),
		ie_origem_proced
	from 	pls_conta_proc
	where	nr_seq_conta	= nr_seq_conta_w;


BEGIN

qt_proc_valido_w	:= 0;

select	coalesce(cd_guia_referencia,cd_guia)
into STRICT	cd_guia_referencia_w
from 	pls_conta
where 	nr_sequencia = nr_seq_conta_p;

SELECT * FROM pls_obter_estrut_proc(	cd_procedimento_p, ie_origem_proced_p, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w;

select	count(*)
into STRICT	qt_proced_regra_w
from 	pls_preco_servico
where	nr_seq_grupo	 = nr_seq_grupo_servico_p;

if (qt_proced_regra_w > 0)	then
	open C01;
	loop
	fetch C01 into
		nr_seq_conta_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		open C02;
		loop
		fetch C02 into
			cd_proced_conta_w,
			ie_origem_proced_conta_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		SELECT * FROM pls_obter_estrut_proc(	cd_proced_conta_w, ie_origem_proced_conta_w, cd_area_conta_w, cd_especialidade_con_w, cd_grupo_conta_w, ie_origem_proced_conta_ww) INTO STRICT cd_area_conta_w, cd_especialidade_con_w, cd_grupo_conta_w, ie_origem_proced_conta_ww;

		/*Conta se os outro procedimento daquele atendimento existe na regra do grupo de serviço*/

		select	count(1)
		into STRICT	qt_existe_proc_w
		from 	pls_preco_servico
		where	nr_seq_grupo	 	= nr_seq_grupo_servico_p
		and	((cd_procedimento 	= cd_proced_conta_w AND ie_origem_proced = ie_origem_proced_conta_w)
		or	cd_area_procedimento 	= cd_area_conta_w
		or	cd_especialidade  	= cd_especialidade_con_w
		or	cd_grupo_proc 	  	= cd_grupo_conta_w);

		if (coalesce(qt_existe_proc_w,0) > 0)	then
			qt_proc_valido_w	:= qt_proc_valido_w + 1;
		end if;

		end;
		end loop;
		close C02;

		end;
	end loop;
	close C01;
end if;

if (qt_proc_valido_w = qt_proced_regra_w)	then
	ie_item_servico_w := 'S';
end if;

return	ie_item_servico_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_grupo_serv_sip ( nr_seq_conta_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_grupo_servico_p bigint) FROM PUBLIC;

