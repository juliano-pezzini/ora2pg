-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_oc_cta_val_23_proc ( dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_validacao_p pls_tipos_ocor_pck.dados_regra_val_util_item, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, dados_conta_proc_p pls_tipos_ocor_pck.dados_conta_proc) RETURNS PLS_TIPOS_OCOR_PCK.DADOS_RET_VAL_23 AS $body$
DECLARE


ds_observacao_w		varchar(32000);
ds_sql_w		varchar(4000);
ds_campo_sql_w		varchar(500);
dados_outro_proc_w	pls_tipos_ocor_pck.dados_conta_proc;
dados_restricao_w	pls_tipos_ocor_pck.dados_restricao_select;
ie_insere_outro_proc_w	varchar(1);
qt_proc_lib_total_w	double precision;
bind_sql_valor_w	sql_pck.t_dado_bind;
cursor_w		sql_pck.t_cursor;
ie_valido_extra_w	varchar(1);
dados_ret_val_23_w	pls_tipos_ocor_pck.dados_ret_val_23;
qt_excedido_w		pls_conta_proc.qt_procedimento%type;
qt_saldo_w		pls_conta_proc.qt_procedimento%type;

BEGIN

if (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '') then
	
	-- Inicializa as variaveis
	ds_observacao_w := null;
	ds_campo_sql_w := null;
	dados_restricao_w.ds_restricao_proc := '';
	dados_restricao_w.ds_restricao_mat := '';
	qt_proc_lib_total_w := 0;
	
	-- Obtem as restricoes conforme cadastrado na regra para que sejam buscados os itens que estao de acordo com a estrutura montada para contabilizar e verificar a quantidade total utilizada deste procedimento em outros itens							
	bind_sql_valor_w := pls_oc_cta_obter_rest_val_23(	dados_validacao_p, dados_regra_p, dados_conta_proc_p, null, 'P', null, bind_sql_valor_w);

	-- se for intercambio filtra os campos

	-- isso diminui um acesso as tabelas de fatura e melhora a performance
	if (dados_conta_proc_p.ie_tipo_conta = 'I') then
		ds_campo_sql_w := ds_campo_sql_w || 'outro_proc.nr_nota_cobranca, ' || pls_util_pck.enter_w ||
						    'outro_proc.nr_fatura, ' || pls_util_pck.enter_w ||
						    'outro_proc.cd_congenere, ' || pls_util_pck.enter_w;
	else
		ds_campo_sql_w := ds_campo_sql_w || 'null nr_nota_cobranca, ' || pls_util_pck.enter_w ||
						    'null nr_fatura, ' || pls_util_pck.enter_w ||
						    'null cd_congenere, ' || pls_util_pck.enter_w;
	end if;

	-- Recupera os procedimentos que foram executados e se encaixam na regra montada
	if (dados_validacao_p.ie_campo_dt_validar = 'E') then
		ds_sql_w :=	'select	outro_proc.nr_seq_conta, 		' || pls_util_pck.enter_w ||
				'	outro_proc.nr_sequencia, 		' || pls_util_pck.enter_w ||
				'	outro_proc.cd_guia_referencia, 		' || pls_util_pck.enter_w ||
				'	outro_proc.qt_ok qt_procedimento, 	' || pls_util_pck.enter_w ||
				ds_campo_sql_w ||
				'	outro_proc.ie_tipo_conta, 		' || pls_util_pck.enter_w ||
				'	outro_proc.nr_seq_proc_ref, 		' || pls_util_pck.enter_w ||
				'	outro_proc.nr_seq_participante_hi, 	' || pls_util_pck.enter_w ||
				'	outro_proc.dt_procedimento_real,	' || pls_util_pck.enter_w ||
				'	outro_proc.nr_seq_prestador_exec,	' || pls_util_pck.enter_w ||
				'	outro_proc.cd_medico_executor, 		' || pls_util_pck.enter_w ||
				'	outro_proc.ie_origem_proced,	 	' || pls_util_pck.enter_w ||
				'	outro_proc.cd_procedimento,	 	' || pls_util_pck.enter_w ||
				'	outro_proc.cd_cid_principal_conta, 	' || pls_util_pck.enter_w ||
				'	outro_proc.cd_cat_cid_principal_conta, 	' || pls_util_pck.enter_w ||
				'	outro_proc.nr_seq_cbo_saude,	 	' || pls_util_pck.enter_w ||
				'	outro_proc.ie_origem_conta,	 	' || pls_util_pck.enter_w ||
				'	outro_proc.nr_seq_nota_cobranca, 	' || pls_util_pck.enter_w ||
				'	outro_proc.sg_cons_prof_prest_nota_serv,' || pls_util_pck.enter_w ||
				'	outro_proc.nr_cons_prof_prest_nota_serv,' || pls_util_pck.enter_w ||
				'	outro_proc.sg_uf_cons_prest_nota_serv,	' || pls_util_pck.enter_w ||
				'	outro_proc.nr_seq_prestador_exec_imp,	' || pls_util_pck.enter_w ||
				'	nvl(outro_proc.nr_seq_grau_partic_conta, outro_proc.nr_seq_grau_part_participantes) nr_seq_grau_partic_conta, ' || pls_util_pck.enter_w ||
				'	outro_proc.nr_seq_grau_partic_imp,	' || pls_util_pck.enter_w ||
				'	outro_proc.ie_tipo_guia,			' || pls_util_pck.enter_w ||
				'   outro_proc.ie_via_acesso            ' || pls_util_pck.enter_w ||
				'from	pls_conta_proc_ocor_v outro_proc 	' || pls_util_pck.enter_w ||
				'where	1 = 1 					' || pls_util_pck.enter_w ||
				dados_restricao_w.ds_restricao_proc		  || pls_util_pck.enter_w ||
				'order by outro_proc.dt_procedimento_real, outro_proc.qt_ok desc';
				
	else
		ds_sql_w :=	'select	outro_proc.nr_seq_conta, 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_sequencia, 		' || pls_util_pck.enter_w ||
			'	outro_proc.cd_guia_referencia, 		' || pls_util_pck.enter_w ||
			'	outro_proc.qt_ok qt_procedimento, 	' || pls_util_pck.enter_w ||
			ds_campo_sql_w ||
			'	outro_proc.ie_tipo_conta, 		' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_proc_ref, 		' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_participante_hi, 	' || pls_util_pck.enter_w ||
			'	outro_proc.dt_procedimento,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_prestador_exec,	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_medico_executor, 		' || pls_util_pck.enter_w ||
			'	outro_proc.ie_origem_proced,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_procedimento,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_cid_principal_conta, 	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_cat_cid_principal_conta, 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_cbo_saude,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.ie_origem_conta,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_nota_cobranca, 	' || pls_util_pck.enter_w ||
			'	outro_proc.sg_cons_prof_prest_nota_serv,' || pls_util_pck.enter_w ||
			'	outro_proc.nr_cons_prof_prest_nota_serv,' || pls_util_pck.enter_w ||
			'	outro_proc.sg_uf_cons_prest_nota_serv,	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_prestador_exec_imp,	' || pls_util_pck.enter_w ||
			'	nvl(outro_proc.nr_seq_grau_partic_conta, outro_proc.nr_seq_grau_part_participantes) nr_seq_grau_partic_conta,	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_grau_partic_imp,	' || pls_util_pck.enter_w ||
			'	outro_proc.ie_tipo_guia,			' || pls_util_pck.enter_w ||
			'   outro_proc.ie_via_acesso            ' || pls_util_pck.enter_w ||
			'from	pls_conta_proc_ocor_v outro_proc 	' || pls_util_pck.enter_w ||
			'where	1 = 1 					' || pls_util_pck.enter_w ||
			dados_restricao_w.ds_restricao_proc		  || pls_util_pck.enter_w ||
			'order by outro_proc.dt_procedimento, outro_proc.qt_ok desc';
	end if;
	
	-- Executa o comando e devolve o cursor	
	bind_sql_valor_w := sql_pck.executa_sql_cursor(ds_sql_w, bind_sql_valor_w);
	
	loop
		fetch 	cursor_w 
		into	dados_outro_proc_w.nr_seq_conta, 	dados_outro_proc_w.nr_seq_conta_proc, 
			dados_outro_proc_w.cd_guia_referencia, 	dados_outro_proc_w.qt_procedimento,
			dados_outro_proc_w.nr_nota_cobranca, 	dados_outro_proc_w.nr_fatura,
			dados_outro_proc_w.cd_congenere, 	dados_outro_proc_w.ie_tipo_conta, 
			dados_outro_proc_w.nr_seq_proc_ref, dados_outro_proc_w.nr_seq_participante_hi,
			dados_outro_proc_w.dt_procedimento, dados_outro_proc_w.nr_seq_prestador_exec,
			dados_outro_proc_w.cd_medico_executor, dados_outro_proc_w.ie_origem_proced,
			dados_outro_proc_w.cd_procedimento, dados_outro_proc_w.cd_cid,
			dados_outro_proc_w.cd_cat_cid, dados_outro_proc_w.nr_seq_cbo_saude,
			dados_outro_proc_w.ie_origem_conta, dados_outro_proc_w.nr_seq_nota_cobranca,
			dados_outro_proc_w.sg_cons_prof_prest_nota_serv, dados_outro_proc_w.nr_cons_prof_prest_nota_serv,
			dados_outro_proc_w.sg_uf_cons_prest_nota_serv, dados_outro_proc_w.nr_seq_prestador_exec_imp,
			dados_outro_proc_w.nr_seq_grau_partic_conta, dados_outro_proc_w.nr_seq_grau_partic_imp,
			dados_outro_proc_w.ie_tipo_guia, dados_outro_proc_w.ie_via_acesso;
		EXIT WHEN NOT FOUND; /* apply on cursor_w */
		
		-- verificacoes extras que foram retiradas da clausula where do select acima por motivos de performance
		ie_valido_extra_w := pls_oc_cta_val_23_if_extra(	dados_validacao_p, dados_regra_p,
									dados_conta_proc_p, null,
									dados_outro_proc_w, null,
									'P');
		-- se retornar S, significa que as condicoes foram atendidas
		if (ie_valido_extra_w = 'S') then
					
			-- Verifica se o procedimento deve ser considerado para a  regra de utilizacao. 

			-- Obs: esta function valida os procedimentos de referencia, seus status e tambem os participantes do item.
			if (dados_outro_proc_w.cd_procedimento = dados_conta_proc_p.cd_procedimento) then
					ie_insere_outro_proc_w := pls_oc_cta_val_23_consid(	dados_regra_p,
												dados_validacao_p,
												dados_conta_proc_p.nr_seq_conta_proc,
												dados_conta_proc_p.nr_seq_proc_ref,
												dados_conta_proc_p.nr_seq_participante_hi,
												dados_outro_proc_w.ie_tipo_conta,
												dados_outro_proc_w.nr_seq_conta_proc,
												dados_outro_proc_w.nr_seq_proc_ref,
												dados_outro_proc_w.nr_seq_participante_hi);
			else
				ie_insere_outro_proc_w	:= 'S';
			end if;
			-- Se o procedimento se encaixa nas caracteristicas do procedimento  sendo consistido conforme a regra montada para a validacao entao o mesmo e inserido na tabela auxiliar
			if (ie_insere_outro_proc_w = 'S') then
				
				-- Incrementar a quantidade total com a quantidade utilizada para a contabilizacao
				qt_proc_lib_total_w := qt_proc_lib_total_w + dados_outro_proc_w.qt_procedimento;
				
				ds_observacao_w := 	substr(ds_observacao_w || pls_util_pck.enter_w ||
							'Conta: ' || dados_outro_proc_w.nr_seq_conta ||
							' | Guia: ' || dados_outro_proc_w.cd_guia_referencia ||
							' | Seq Proc: ' || dados_outro_proc_w.nr_seq_conta_proc || 
							' | Cod Proc: ' || dados_outro_proc_w.cd_procedimento || 
							' | Quant: ' || dados_outro_proc_w.qt_procedimento||
							' | Data: '||dados_outro_proc_w.dt_procedimento,1,2000);
						
				-- se for intercambio
				if (dados_outro_proc_w.ie_tipo_conta = 'I') then
					ds_observacao_w :=	substr(ds_observacao_w ||
								' | Nota Cobr: ' || dados_outro_proc_w.nr_nota_cobranca || 
								' | Fatura: ' || dados_outro_proc_w.nr_fatura || 
								' | Operadora: ' || dados_outro_proc_w.cd_congenere,1,2000);
				end if;
			end if;
		end if;
		-- ja sai direto (performance)

		-- se precisar colocar todas as observacoes vai ser preciso rever essa situacao
		if (qt_proc_lib_total_w > dados_validacao_p.qt_liberada) then
			exit;
		end if;
	end loop;
	
	close cursor_w;
	
	-- Se nao ultrapassou a quantidade definida pela regra entao limpa a observacao pois nao precisa gerar nada
	if (qt_proc_lib_total_w <= dados_validacao_p.qt_liberada) then
		ds_observacao_w := null;
	else
		-- Complementa a observacao
		ds_observacao_w := 	'Este item ultrapassa a quantidade permitida!' || pls_util_pck.enter_w ||
					'Quantidade permitida pela regra: ' || dados_validacao_p.qt_liberada || pls_util_pck.enter_w ||
					'Quantidade de itens executados: ' || qt_proc_lib_total_w || pls_util_pck.enter_w ||
					'Itens utilizados no periodo verificado: ' || pls_util_pck.enter_w ||
					ds_observacao_w;
		
		
		qt_excedido_w := coalesce(dados_validacao_p.qt_liberada,0);
		
	end if;	
end if;

dados_ret_val_23_w.ds_observacao:= substr(ds_observacao_w, 1, 4000);
dados_ret_val_23_w.qt_excedido	:= qt_excedido_w;

return dados_ret_val_23_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_oc_cta_val_23_proc ( dados_regra_p pls_tipos_ocor_pck.dados_regra, dados_validacao_p pls_tipos_ocor_pck.dados_regra_val_util_item, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, dados_conta_proc_p pls_tipos_ocor_pck.dados_conta_proc) FROM PUBLIC;

