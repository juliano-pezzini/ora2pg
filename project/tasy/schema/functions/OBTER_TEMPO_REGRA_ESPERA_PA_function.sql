-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_tempo_regra_espera_pa ( ie_clinica_p bigint, nr_seq_classif_p bigint, dt_entrada_p timestamp, ie_opcao_p text, dt_final_p timestamp default null, ie_tipo_calc_p text default null) RETURNS varchar AS $body$
DECLARE

/* 
ie_opcao_p:
'T' = Tempo da Regra;
'C' = Cor
'R' = Restante do tempo em relacao ao parametro dt_entrada_p;
'N' = Sequencia da regra

ie_tipo_calc_p
TDE = Tempo de espera (min)
ETT = Tempo medio de espera para triagem (min)
TMT = Tempo medio de triagem (min)
TTC = Tempo medio entre triagem e consulta (min)
TMC = Tempo medio de consulta (min)
TIC = Tempo medio para inicio de consulta (min)
*/
qt_tempo_regra_w	bigint;
qt_tempo_w		double precision;
ds_cor_w                varchar(15);
ds_cor_tela_w		varchar(15);
ie_clinica_w		integer;
nr_seq_classif_w	bigint;
qt_tempo_esp_w		bigint;
qt_tempo_esp_triagem_w	bigint;
qt_tempo_triagem_w	bigint;
qt_tempo_tria_cons_w	bigint;
qt_tempo_consulta_w	bigint;
qt_tempo_esp_cons_w	bigint;
nr_sequencia_w		bigint;
nr_seq_regra_w		bigint;

C01 CURSOR FOR
	SELECT	coalesce(qt_tempo,0),
		ds_cor,
		qt_tempo_esp_triagem,
		qt_tempo_triagem,
		qt_tempo_tria_cons,
		qt_tempo_consulta,
		qt_tempo_esp_cons,
		ie_clinica,
		nr_seq_classif,
		nr_sequencia
	from	regra_tempo_espera_pa
	order  by qt_tempo;


BEGIN
ds_cor_tela_w := '';
qt_tempo_regra_w := 0;
qt_tempo_w := 0;
open C01;
loop
fetch C01 into	
	qt_tempo_esp_w,
	ds_cor_w,
	qt_tempo_esp_triagem_w,
	qt_tempo_triagem_w,
	qt_tempo_tria_cons_w,
	qt_tempo_consulta_w,
	qt_tempo_esp_cons_w,
	ie_clinica_w,
	nr_seq_classif_w,
	nr_sequencia_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if	((coalesce(ie_clinica_w,0) = 0) 		and (coalesce(nr_seq_classif_w,0) = 0)) or
		((coalesce(ie_clinica_w,0) = ie_clinica_p) 	and (coalesce(nr_seq_classif_w,0) = 0)) or
		((coalesce(ie_clinica_w,0) = 0)		and (coalesce(nr_seq_classif_w,0) = nr_seq_classif_p)) or
		((coalesce(ie_clinica_w,0) = ie_clinica_p) 	and (coalesce(nr_seq_classif_w,0) = nr_seq_classif_p)) then
		if (ie_tipo_calc_p = 'TDE') then
			select	trunc((coalesce(dt_final_p,clock_timestamp()) - dt_entrada_p)*24*60)
			into STRICT	qt_tempo_w
			;
			
			qt_tempo_regra_w := qt_tempo_esp_w;
			
			if (coalesce(qt_tempo_esp_w,0) > 0) and (qt_tempo_w >= qt_tempo_esp_w) then
				ds_cor_tela_w := ds_cor_w;
				nr_seq_regra_w := nr_Sequencia_w;
			end if;
		
		elsif (ie_tipo_calc_p = 'ETT') then
			select	trunc((coalesce(dt_final_p,clock_timestamp()) - dt_entrada_p)*24*60)
			into STRICT	qt_tempo_w
			;
			
			qt_tempo_regra_w := qt_tempo_esp_triagem_w;
			
			if (coalesce(qt_tempo_esp_triagem_w,0) > 0) and (qt_tempo_w >= qt_tempo_esp_triagem_w) then
				ds_cor_tela_w := ds_cor_w;
				nr_seq_regra_w := nr_Sequencia_w;
			end if;
			
		elsif (ie_tipo_calc_p = 'TMT') then
			select	trunc((coalesce(dt_final_p,clock_timestamp()) - dt_entrada_p)*24*60)
			into STRICT	qt_tempo_w
			;
			
			qt_tempo_regra_w := qt_tempo_triagem_w;
			
			if (coalesce(qt_tempo_triagem_w,0) > 0) and (qt_tempo_w >= qt_tempo_triagem_w) then
				ds_cor_tela_w := ds_cor_w;
				nr_seq_regra_w := nr_Sequencia_w;
			end if;
			
		elsif (ie_tipo_calc_p = 'TTC') then
			select	trunc((coalesce(dt_final_p,clock_timestamp()) - dt_entrada_p)*24*60)
			into STRICT	qt_tempo_w
			;
			
			qt_tempo_regra_w := qt_tempo_tria_cons_w;
			
			if (coalesce(qt_tempo_tria_cons_w,0) > 0) and (qt_tempo_w >= qt_tempo_tria_cons_w) then
				ds_cor_tela_w := ds_cor_w;
				nr_seq_regra_w := nr_Sequencia_w;
			end if;
			
		elsif (ie_tipo_calc_p = 'TMC') then
			select	trunc((coalesce(dt_final_p,clock_timestamp()) - dt_entrada_p)*24*60)
			into STRICT	qt_tempo_w
			;
			
			qt_tempo_regra_w := qt_tempo_consulta_w;
			
			if (coalesce(qt_tempo_consulta_w,0) > 0) and (qt_tempo_w >= qt_tempo_consulta_w) then
				ds_cor_tela_w := ds_cor_w;
				nr_seq_regra_w := nr_Sequencia_w;
			end if;
			
		elsif (ie_tipo_calc_p = 'TIC') then
			select	trunc((coalesce(dt_final_p,clock_timestamp()) - dt_entrada_p)*24*60)
			into STRICT	qt_tempo_w
			;
			
			qt_tempo_regra_w := qt_tempo_esp_cons_w;
			
			if (coalesce(qt_tempo_esp_cons_w,0) > 0) and (qt_tempo_w >= qt_tempo_esp_cons_w) then
				ds_cor_tela_w := ds_cor_w;
				nr_seq_regra_w := nr_Sequencia_w;
			end if;
		end if;
	end if;
	end;
end loop;
close C01;

if (ie_opcao_p = 'T') then
	if (qt_tempo_regra_w > 0) then
		return	obter_horas_minutos(qt_tempo_regra_w);
	end if;
elsif (ie_opcao_p = 'R') then
	
	if (qt_tempo_w > 0) then
		if (qt_tempo_w <= qt_tempo_regra_w) then
			return obter_horas_minutos(qt_tempo_regra_w - qt_tempo_w);
		else
			return '-'||obter_horas_minutos(qt_tempo_w - qt_tempo_regra_w);
		end if;
	end if;
elsif (ie_opcao_p = 'C') then
	return ds_cor_tela_w;

elsif (ie_opcao_p = 'N') then
	return nr_seq_regra_w;

end if;

return ' ';

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_tempo_regra_espera_pa ( ie_clinica_p bigint, nr_seq_classif_p bigint, dt_entrada_p timestamp, ie_opcao_p text, dt_final_p timestamp default null, ie_tipo_calc_p text default null) FROM PUBLIC;

