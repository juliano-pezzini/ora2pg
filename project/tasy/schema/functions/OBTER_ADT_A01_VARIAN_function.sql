-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_adt_a01_varian (nr_seq_rxt_tumor_p bigint, nr_seq_tratamento_p bigint) RETURNS text AS $body$
DECLARE


cd_pessoa_fisica_w				varchar(64);
family_name_patient_w			varchar(64);
given_name_patient_w			varchar(64);
middleinitialorname_patient_w	varchar(64);
family_name_mother_w			varchar(64);
given_name_mother_w				varchar(64);
middleinitialorname_mother_w	varchar(64);
date_of_birth_w		 			varchar(30);
sex_w		 					varchar(64);
race_w		 					varchar(64);
street_address_w				varchar(64);
zip_code_w		 				varchar(20);
state_adress_w		 			varchar(64);
city_w		 					varchar(64);
country_w            			varchar(64);
telephone_number_w				varchar(64);
telecommunication_usecode_w 	varchar(10);
email_address_w		 			varchar(64);
ie_estado_civil_w				varchar(15);
point_of_care_w 				varchar(120);
room_w 							varchar(255);
bed_w 							varchar(255);
facility_w 						varchar(120);
id_doctor_w 					varchar(10);
family_name_doctor_pep_w 		varchar(100);
given_name_doctor_pep_w 		varchar(100);
middlename_doctor_pep_w 		varchar(100);
visit_number_w 					bigint;
date_time_message_w            	varchar(14);
date_message_w					varchar(10);
hl7_itens_varian_seq_w			numeric(38);
nr_prontuario_w 				bigint;
trigger_event_w					varchar(15);
qt_pacientes_cadastrados_w 		bigint;
action_triggered_w 				varchar(20);
diagnosis_code_w				can_loco_regional.cd_doenca_cid%type;
nr_cpf_w                  pessoa_fisica.nr_cpf%type;
ds_bairro_w               compl_pessoa_fisica.ds_bairro%type;


BEGIN
	declare
	json_aux_w   philips_json;
	ds_message_w text;

	begin
	json_aux_w := philips_json();

    select count(nr_sequencia)
        into STRICT qt_pacientes_cadastrados_w
        from pf_codigo_externo
        where cd_pessoa_fisica = cd_pessoa_fisica_w
        and coalesce(cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento
        and ie_tipo_codigo_externo = 'ARIA';

    if (qt_pacientes_cadastrados_w > 0) then
    trigger_event_w := 'ADT-A08';
    else
    trigger_event_w := 'ADT-A01';
    end if;

    select CASE WHEN trigger_event_w='ADT-A01' THEN  'newPatient'  ELSE 'alreadyIncludedPatient' END
    into STRICT action_triggered_w
;

	select
		a.cd_pessoa_fisica,
		substr(elimina_acentuacao(obter_parte_nome_pf(a.nome_pf,'sobrenome')), 1, 64) family_name_patient,
		substr(elimina_acentuacao(obter_parte_nome_pf(a.nome_pf,'nome')), 1, 64) given_name_patient,
		substr(elimina_acentuacao(obter_parte_nome_pf(a.nome_pf,'restonome')), 1, 64) middleinitialorname_patient,
		substr(elimina_acentuacao(obter_parte_nome_pf(a.nome_mae_pf,'sobrenome')), 1, 64) family_name_mother,
		substr(elimina_acentuacao(obter_parte_nome_pf(a.nome_mae_pf,'nome')), 1, 64) given_name_mother,
		substr(elimina_acentuacao(obter_parte_nome_pf(a.nome_mae_pf,'restonome')), 1, 64) middleinitialorname_mother,
		a.data_nascto_pf Date_Of_Birth,
		sex,
		race,
		substr(elimina_acentuacao(street_address), 1, 64) street_address,
		substr(zip_code, 1, 16) zip_code,
		substr(elimina_acentuacao(state_adress), 1, 64) state_adress,
		substr(elimina_acentuacao(city), 1, 64) city,
		substr(elimina_acentuacao(country), 1, 64) country,
		substr(telephone_number, 1, 64) telephone_number,
		telecommunication_usecode,
		email_address,
		CASE WHEN a.ie_estado_civil=1 THEN 'S' WHEN a.ie_estado_civil=2 THEN 'M' WHEN a.ie_estado_civil=3 THEN 'D' WHEN a.ie_estado_civil=4 THEN  'W'  ELSE 'U' END ,
		nr_prontuario,
		diagnosis_code,
    	nr_cpf,
		ds_bairro
	into STRICT
		cd_pessoa_fisica_w,
		family_name_patient_w,
		given_name_patient_w,
		middleinitialorname_patient_w,
		family_name_mother_w,
		given_name_mother_w,
		middleinitialorname_mother_w,
		date_of_birth_w,
		sex_w,
		race_w,
		street_address_w,
		zip_code_w,
		state_adress_w,
		city_w,
		country_w,
		telephone_number_w,
		telecommunication_usecode_w,
		email_address_w,
		ie_estado_civil_w,
		nr_prontuario_w,
		diagnosis_code_w,
    	nr_cpf_w,
		ds_bairro_w
	from	(SELECT
				rt.nr_sequencia,
				rt.cd_pessoa_fisica,
				pf.nm_pessoa_fisica nome_pf,
				obter_nome_mae_pf(pf.cd_pessoa_fisica) nome_mae_pf,
				pf.cd_religiao,
				rt.nr_atendimento,
				pf.nr_cep_cidade_nasc,
				TO_CHAR(obter_data_nascto_pf(pf.cd_pessoa_fisica), 'YYYYMMDDHH24MISS') data_nascto_pf,
				coalesce(pf.ie_sexo, 'I') sex,
				cp.cd_raca_hl7 race,
				(cpf.ds_endereco || ',' || cpf.nr_endereco || CASE WHEN coalesce(ds_complemento::text, '') = '' THEN  NULL  ELSE ',' || cpf.ds_complemento END  ) street_address,
				cpf.cd_cep Zip_Code,
				substr(obter_compl_pf(pf.cd_pessoa_fisica, cpf.ie_tipo_complemento, 'DS_UF'), 1, 50) state_adress,
				cpf.ds_municipio city,
				substr(obter_nome_pais(cpf.nr_seq_pais), 1, 20) country,
				coalesce(obter_telefone_pf(pf.cd_pessoa_fisica, 12), obter_telefone_pf(pf.cd_pessoa_fisica, 13)) telephone_number,
				'HP' telecommunication_usecode,
				obter_email_pf(pf.cd_pessoa_fisica) email_address,
				pf.ie_estado_civil,
				pf.nr_prontuario,
				clr.cd_doenca_cid diagnosis_code,
				pf.nr_cpf,
				cpf.ds_bairro
			from 		rxt_tumor rt
			inner join 	pessoa_fisica pf 		on pf.cd_pessoa_fisica = rt.cd_pessoa_fisica
			left  join 	cor_pele cp 			on pf.nr_seq_cor_pele = cp.nr_sequencia
			left  join 	compl_pessoa_fisica cpf on (pf.cd_pessoa_fisica = cpf.cd_pessoa_fisica and cpf.ie_tipo_complemento = 1)
			left  join 	can_loco_regional clr 	on clr.nr_sequencia = rt.nr_seq_loco_regional
			where rt.nr_sequencia = nr_seq_rxt_tumor_p)	a;

	select
		substr(elimina_acentuacao(a.point_of_care),1,255) point_of_care,
		substr(elimina_acentuacao(a.room),1,255),
		substr(elimina_acentuacao(a.bed),1,255),
		substr(elimina_acentuacao(a.facility),1,255),
    cd_medico,
    substr(elimina_acentuacao(obter_parte_nome_pf(a.nome_medico_pf_pep,'sobrenome')), 1, 64),
    substr(elimina_acentuacao(obter_parte_nome_pf(a.nome_medico_pf_pep,'nome')), 1, 64),
    substr(elimina_acentuacao(obter_parte_nome_pf(a.nome_medico_pf_pep,'restonome')), 1, 64),
    a.nr_atendimento
  into STRICT
    point_of_care_w,
    room_w,
    bed_w,
    facility_w,
    id_doctor_w,
    family_name_doctor_pep_w,
    given_name_doctor_pep_w,
    middlename_doctor_pep_w,
    visit_number_w
  from (SELECT	b.nr_sequencia,
			obter_desc_setor_atend(obter_setor_atendimento(b.nr_atendimento)) point_of_care,
			obter_unidade_atendimento(b.nr_atendimento, 'A', 'U') room,
			obter_unidade_atendimento(b.nr_atendimento, 'A', 'UC') bed,
			b.cd_estabelecimento facility,
			obter_nome_pf(b.cd_medico) nome_medico_pf_pep,
			obter_nome_pf(c.cd_medico_resp) nome_medico_pf_eup,
			b.nr_atendimento,
			b.cd_medico,
			c.dt_entrada
		FROM rxt_tumor b
LEFT OUTER JOIN atendimento_paciente c ON (b.nr_atendimento = c.nr_atendimento) ) a
		where 	a.nr_sequencia = nr_seq_rxt_tumor_p;

	select	to_char(clock_timestamp(), 'YYYYMMDDHH24MISS'),
			to_char(clock_timestamp(), 'YYYYMMDD')
	into STRICT	date_time_message_w,
			date_message_w
	;

	select	nextval('hl7_itens_varian_seq')
	into STRICT	hl7_itens_varian_seq_w
	;

  json_aux_w.put('IDNumber',cd_pessoa_fisica_w);
  json_aux_w.put('Surname',family_name_patient_w);
  json_aux_w.put('GivenName',given_name_patient_w);
  json_aux_w.put('SecondandFurtherGivenName',middleinitialorname_patient_w);
  json_aux_w.put('MotherSurname',family_name_mother_w);
  json_aux_w.put('MotherGivenName',given_name_mother_w);
  json_aux_w.put('MotherSecondandFurtherGivenName',middleinitialorname_mother_w);
  json_aux_w.put('DateTimeofBirth',date_of_birth_w);
  json_aux_w.put('AdministrativeSex',sex_w);
  json_aux_w.put('Race',race_w);
  json_aux_w.put('StreetName',street_address_w);
  json_aux_w.put('ZiporPostalCode',zip_code_w);
  json_aux_w.put('StateorProvince',state_adress_w);
  json_aux_w.put('City',city_w);
  json_aux_w.put('Country',country_w);
  json_aux_w.put('TelephoneNumber',telephone_number_w);
  json_aux_w.put('TelecommunicationUseCode',telecommunication_usecode_w);
  json_aux_w.put('EmailAddress',email_address_w);
  json_aux_w.put('MaritalStatus',ie_estado_civil_w);
  json_aux_w.put('PointofCare',coalesce(point_of_care_w,' '));
  json_aux_w.put('Room',coalesce(room_w,' '));
  json_aux_w.put('Bed',coalesce(bed_w,' '));
  json_aux_w.put('Facility',coalesce(facility_w,' '));
  json_aux_w.put('AttendingDoctorIDNumber',coalesce(id_doctor_w,' '));
  json_aux_w.put('AttendingDoctorSurname',coalesce(family_name_doctor_pep_w,' '));
  json_aux_w.put('AttendingDoctorGivenName',coalesce(given_name_doctor_pep_w,' '));
  json_aux_w.put('AttendingDoctorSecondandFurtherGivenName',coalesce(middlename_doctor_pep_w,' '));
  json_aux_w.put('VisitNumberID', nr_seq_tratamento_p);
  json_aux_w.put('DateTimeOfMessage', coalesce(date_time_message_w,' '));
  json_aux_w.put('DateOfMessage', coalesce(date_message_w,' '));
  json_aux_w.put('MessageControlID', coalesce(to_char(hl7_itens_varian_seq_w),' '));
  json_aux_w.put('PatientID', coalesce(to_char(nr_prontuario_w),' '));
  json_aux_w.put('triggerEvent', trigger_event_w);
  json_aux_w.put('actionTriggered', action_triggered_w);
  json_aux_w.put('DiagnosisCode', diagnosis_code_w);
  json_aux_w.put('CPF', nr_cpf_w);
  json_aux_w.put('District', ds_bairro_w);

  dbms_lob.createtemporary(ds_message_w, TRUE);
  json_aux_w.(ds_message_w);

  return ds_message_w;
  end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_adt_a01_varian (nr_seq_rxt_tumor_p bigint, nr_seq_tratamento_p bigint) FROM PUBLIC;

