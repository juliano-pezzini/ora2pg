-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_pr_prev_programa (nr_seq_portifolio_p bigint, nr_seq_programa_p bigint, ie_tipo_p bigint, dt_previsto_p timestamp) RETURNS bigint AS $body$
DECLARE


pr_retorno_w	double precision;
pr_previsto_w	double precision;
pr_real_w	double precision;


BEGIN

if (nr_seq_programa_p <> 0) then

	SELECT  dividir(sum(s.hrs_executadas_prev) , sum(s.hrs_previstas)) pr_previsto,
        	dividir(sum(s.hrs_executadas) , sum(s.hrs_previstas)) pr_real
	into STRICT	pr_previsto_w,
		pr_real_w
	FROM(
	SELECT  nr_seq_programa,
		t.ds_atividade,
		t.hrs_previstas,
		t.dt_inicio_prev,
		t.dt_fim_prev,
		t.dias_uteis,
		t.data_atual,
        	t.dias_uteis_data_atual,
		t.pr_etapa,
 		CASE
		WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
		  THEN 100
		ELSE (t.dias_uteis_data_atual / t.dias_uteis) * 100
		END qt_pr_previstos_por_ativ,
		CASE
		WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
		  THEN t.hrs_previstas
		ELSE (t.dias_uteis_data_atual / t.dias_uteis) * t.hrs_previstas
		END hrs_executadas_prev,
	        (t.pr_etapa * t.hrs_previstas / 100) hrs_executadas
	FROM (
	SELECT  nr_seq_programa,
		e.DS_ATIVIDADE ds_atividade,
		e.qt_hora_prev hrs_previstas,
		e.DT_INICIO_PREV dt_inicio_prev,
		e.DT_FIM_PREV dt_fim_prev,
		obter_dias_semana_periodo(trunc(e.dt_inicio_prev), trunc(e.dt_fim_prev)) dias_uteis,
		TRUNC(clock_timestamp()) data_atual,
        	obter_dias_semana_periodo(trunc(e.dt_inicio_prev), TRUNC(clock_timestamp())) dias_uteis_data_atual,
		e.PR_ETAPA pr_etapa
	FROM    proj_programa pp,
		proj_projeto p,
		proj_cronograma c,
		proj_cron_etapa e
	WHERE	p.nr_sequencia = c.nr_seq_proj
	AND     c.nr_sequencia = e.nr_seq_cronograma
	AND     c.ie_situacao  = 'A'
	AND      p.nr_seq_programa = nr_seq_programa_p
	and	pp.nr_sequencia = p.nr_seq_programa
	and	(c.dt_aprovacao IS NOT NULL AND c.dt_aprovacao::text <> '')
	AND  	NOT EXISTS (SELECT 1 FROM proj_cron_etapa xx WHERE xx.nr_seq_superior =  e.nr_sequencia)
	ORDER BY c.ie_tipo_cronograma, e.DT_INICIO_PREV
	) t
	) s;

else

	SELECT  dividir(sum(s.hrs_executadas_prev) , sum(s.hrs_previstas)) pr_previsto,
        	dividir(sum(s.hrs_executadas) , sum(s.hrs_previstas)) pr_real
	into STRICT	pr_previsto_w,
		pr_real_w
	FROM(
	SELECT  nr_seq_programa,
		t.ds_atividade,
		t.hrs_previstas,
		t.dt_inicio_prev,
		t.dt_fim_prev,
		t.dias_uteis,
		t.data_atual,
        t.dias_uteis_data_atual,
		t.pr_etapa,
 		CASE
		WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
		  THEN 100
		ELSE (t.dias_uteis_data_atual / t.dias_uteis) * 100
		END qt_pr_previstos_por_ativ,
		CASE
		WHEN(t.dias_uteis_data_atual >= t.dias_uteis)
		  THEN t.hrs_previstas
		ELSE (t.dias_uteis_data_atual / t.dias_uteis) * t.hrs_previstas
		END hrs_executadas_prev,
	        (t.pr_etapa * t.hrs_previstas / 100) hrs_executadas
	FROM (
	SELECT  nr_seq_programa,
		e.DS_ATIVIDADE ds_atividade,
		e.qt_hora_prev hrs_previstas,
		e.DT_INICIO_PREV dt_inicio_prev,
		e.DT_FIM_PREV dt_fim_prev,
		obter_dias_semana_periodo(trunc(e.dt_inicio_prev), trunc(e.dt_fim_prev)) dias_uteis,
		TRUNC(clock_timestamp()) data_atual,
        	obter_dias_semana_periodo(trunc(e.dt_inicio_prev), TRUNC(clock_timestamp())) dias_uteis_data_atual,
		e.PR_ETAPA pr_etapa
	FROM    proj_programa pp,
		proj_projeto p,
		proj_cronograma c,
		proj_cron_etapa e
	WHERE	p.nr_sequencia = c.nr_seq_proj
	AND     c.nr_sequencia = e.nr_seq_cronograma
	AND     c.ie_situacao  = 'A'
	AND     pp.nr_seq_portifolio = nr_seq_portifolio_p
	and	pp.nr_sequencia = p.nr_seq_programa
	and	(c.dt_aprovacao IS NOT NULL AND c.dt_aprovacao::text <> '')
	AND  	NOT EXISTS (SELECT 1 FROM proj_cron_etapa xx WHERE xx.nr_seq_superior =  e.nr_sequencia)
	ORDER BY c.ie_tipo_cronograma, e.DT_INICIO_PREV
	) t
	) s;

end if;



if (ie_tipo_p = 0) then
	pr_retorno_w	:= pr_previsto_w *100;
else
	pr_retorno_w	:= pr_real_w *100;
end if;

return	pr_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_pr_prev_programa (nr_seq_portifolio_p bigint, nr_seq_programa_p bigint, ie_tipo_p bigint, dt_previsto_p timestamp) FROM PUBLIC;

