-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE ARRAY_MACRO AS (ARRAY_MACRO varchar(150)[150]);


CREATE OR REPLACE FUNCTION obter_valor_macros_barras ( CD_BARRAS_P text, BARCODE_RULE_FUNCAO_P bigint, BARCODE_RULE_LABEL_TYPE_P bigint ) RETURNS varchar AS $body$
DECLARE

	
	ERROR_CODE_W	varchar(200);
	CD_BARRAS_W	varchar(100);
	CD_BARRAS_LENGHT_W	varchar(100);
	
	-- BARCODE RULE FIELDS
	BARCODE_RULE_SEQ_W	bigint;
	BARCODE_RULE_FUNCAO_W	smallint;
	BARCODE_RULE_LABEL_TYPE_W	smallint;
	BARCODE_DIGITOS_W	smallint;
	DS_BARCODE_ID_W	varchar(2);
	BARCODE_DEL_PRE_W	smallint;
	BARCODE_DEL_POS_W	smallint;
	DS_BARCODE_FORMAT_W	varchar(50);
	QT_REGRA_BARCODE_RULE_W	smallint;
	-- END BARCODE RULE FIELDS
	
	BARCODE_LENGHT	smallint;
	BARCODE_MACRO_LENGHT	smallint;
	array ARRAY_MACRO := ARRAY_MACRO('M', 'D', 'Y', 'X', 'N', 'P', 'O', 'A', 'B', 'U', 'L', 'G', 'S', 'I', 'R');
	
	MACRO_SEARCH	varchar(1);
	INICIAL_STR_SEARCH_W	smallint;
	FINAL_STR_SEARCH_W	smallint;
	SEARCH_SOMA_W	smallint;
	
	MACRO_M_IS_NUMERIC_W	varchar(15);
	MACRO_D_IS_NUMERIC_W	varchar(15);
	MACRO_Y_IS_NUMERIC_W	varchar(15);
	MACRO_X_IS_NUMERIC_W	varchar(15);
	MACRO_N_IS_NUMERIC_W	varchar(15);
	MACRO_P_IS_NUMERIC_W	varchar(15);
	MACRO_O_IS_NUMERIC_W	varchar(15);
	MACRO_A_IS_NUMERIC_W	varchar(15);
	MACRO_B_IS_NUMERIC_W	varchar(15);
	MACRO_U_IS_NUMERIC_W	varchar(15);
	MACRO_L_IS_NUMERIC_W	varchar(15);
	MACRO_G_IS_NUMERIC_W	varchar(15);
	MACRO_S_IS_NUMERIC_W	varchar(15);
	MACRO_R_IS_NUMERIC_W	varchar(15);
	
	RESULT_MACRO_M	varchar(50);
	RESULT_MACRO_D	varchar(50);
	RESULT_MACRO_Y	varchar(50);
	RESULT_MACRO_X	varchar(50);
	RESULT_MACRO_N	varchar(50);
	RESULT_MACRO_P	varchar(50);
	RESULT_MACRO_O	varchar(50);
	RESULT_MACRO_A	varchar(50);
	RESULT_MACRO_B	varchar(50);
	RESULT_MACRO_U	varchar(50);
	RESULT_MACRO_L	varchar(50);
	RESULT_MACRO_G	varchar(50);
	RESULT_MACRO_S	varchar(50);
	RESULT_MACRO_I	varchar(50);
	RESULT_MACRO_R	varchar(50);
	
	QTD_PATIENT_W	smallint;
	
	
BEGIN
	
		CD_BARRAS_W := CD_BARRAS_P;
		BARCODE_RULE_FUNCAO_W := BARCODE_RULE_FUNCAO_P;
		BARCODE_RULE_LABEL_TYPE_W := BARCODE_RULE_LABEL_TYPE_P;
	
		SELECT count(*)
		INTO STRICT QT_REGRA_BARCODE_RULE_W
		FROM BARCODE_SPEC_RULES b
		WHERE b.nr_sequencia IN (
		    SELECT i.NR_SEQ_BARCODE_RULE
		    FROM BARCODE_SPEC_RULES_ITENS i
		    WHERE i.nr_funcao = BARCODE_RULE_FUNCAO_W
		    )
		AND b.NR_LABEL_TYPE = BARCODE_RULE_LABEL_TYPE_W;
		
		IF (QT_REGRA_BARCODE_RULE_W = 0) THEN
		
			-- ERROR 01 - Expression 1050754
			 CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163888);
			
		ELSE
			
			SELECT b.NR_SEQUENCIA, b.NR_DIGITOS, b.DS_BARCODE_ID, b.NR_PRE_ID_DEL_COUNT, b.NR_POST_ID_DEL_COUNT, b.DS_BARCODE_FORMAT 
			INTO STRICT BARCODE_RULE_SEQ_W, BARCODE_DIGITOS_W, DS_BARCODE_ID_W, BARCODE_DEL_PRE_W, BARCODE_DEL_POS_W, DS_BARCODE_FORMAT_W
			FROM BARCODE_SPEC_RULES b
			WHERE b.nr_sequencia IN (
			    SELECT i.NR_SEQ_BARCODE_RULE
			    FROM BARCODE_SPEC_RULES_ITENS i
			    WHERE i.nr_funcao = BARCODE_RULE_FUNCAO_W
			    )
			AND b.NR_LABEL_TYPE = BARCODE_RULE_LABEL_TYPE_W;
			
			
			
			BARCODE_LENGHT := LENGTH(CD_BARRAS_W);
			CD_BARRAS_W := SUBSTR(CD_BARRAS_W,(BARCODE_DEL_PRE_W + 1),BARCODE_LENGHT);
			
			BARCODE_LENGHT := LENGTH(CD_BARRAS_W) - (BARCODE_DEL_POS_W);
			CD_BARRAS_W := SUBSTR(CD_BARRAS_W,1,BARCODE_LENGHT);
		
			
			CD_BARRAS_LENGHT_W := LENGTH(CD_BARRAS_W);
			
			IF (CD_BARRAS_LENGHT_W != BARCODE_DIGITOS_W) THEN
			
				-- ERROR 2 Expression 1052380
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163889);
			END IF;
			
			
			
			BARCODE_MACRO_LENGHT := LENGTH(DS_BARCODE_FORMAT_W);
			
			FOR i IN 1..15 LOOP
			
		    	MACRO_SEARCH := array(i);
				INICIAL_STR_SEARCH_W := position(MACRO_SEARCH in DS_BARCODE_FORMAT_W);
				
				IF (INICIAL_STR_SEARCH_W != 0) THEN
				
					FINAL_STR_SEARCH_W := INSTR(DS_BARCODE_FORMAT_W,MACRO_SEARCH, -1);
					SEARCH_SOMA_W := (FINAL_STR_SEARCH_W - INICIAL_STR_SEARCH_W) + 1;
					
					IF (MACRO_SEARCH = 'M') THEN
					
						RESULT_MACRO_M := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_M, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_M_IS_NUMERIC
						INTO STRICT MACRO_M_IS_NUMERIC_W;
						
						
						IF (MACRO_M_IS_NUMERIC_W = 'numeric') THEN
						
							IF (RESULT_MACRO_M > 12) THEN
							
								-- ERROR 3 Expression 1052382
								CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163890);
								
							ELSIF (RESULT_MACRO_M < 01) THEN
							
								-- ERROR 4 Expression 1052384
								CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163891);
							END IF;
						
						ELSE
						
						-- ERROR 5 Expression 1052386
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163892);
							
						END IF;
						
						
						
					ELSIF (MACRO_SEARCH = 'D') THEN
					
						RESULT_MACRO_D := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
					
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_D, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_D_IS_NUMERIC 
						INTO STRICT MACRO_D_IS_NUMERIC_W;
						
						
						IF (MACRO_D_IS_NUMERIC_W = 'numeric') THEN
						
							IF (RESULT_MACRO_D > 31) THEN
							
								-- ERROR 6 Expression 1052388
								CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163894);
								
							ELSIF (RESULT_MACRO_D < 01) THEN
							
								-- ERROR 7 Expression 1052390
								CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163895);
							
							END IF;
						
						ELSE
						
						-- ERROR 8 Expression 1052392
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163896);
							
						END IF;
						
						
					
					ELSIF (MACRO_SEARCH = 'Y') THEN
					
						RESULT_MACRO_Y := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_Y, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_Y_IS_NUMERIC
						INTO STRICT MACRO_Y_IS_NUMERIC_W;
						
						
						IF (MACRO_Y_IS_NUMERIC_W = 'numeric') THEN
						
							IF (LENGTH(RESULT_MACRO_Y) > 4) THEN 
							
								-- ERROR 9 Expression 1052394
								CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163897);
								
							ELSIF (LENGTH(RESULT_MACRO_Y) < 2) THEN
							
								-- ERROR 10 Expression 1052396
								CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163899);
								
							ELSIF (RESULT_MACRO_Y < 1000) THEN
							
								-- ERROR 11 Expression 1052398
								CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163900);
							
							END IF;
						
						ELSE
						
							-- ERROR 12 Expression 1052400
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163901);
							
						END IF;
						
					
					
					ELSIF (MACRO_SEARCH = 'X') THEN
					
						RESULT_MACRO_X := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_X, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_X_IS_NUMERIC
						INTO STRICT MACRO_X_IS_NUMERIC_W;
						
						
						IF (MACRO_X_IS_NUMERIC_W = 'alpha') THEN
						
							-- ERROR 13 Expression 1052402
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163902);
							
						END IF;
						
						
						
					ELSIF (MACRO_SEARCH = 'N') THEN
					
						RESULT_MACRO_N := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_N, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_N_IS_NUMERIC
						INTO STRICT MACRO_N_IS_NUMERIC_W;
						
						
						IF (MACRO_N_IS_NUMERIC_W = 'alpha') THEN
						
							-- ERROR 14 Expression 1052404
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163903);
							
						END IF;
						
						
						
					ELSIF (MACRO_SEARCH = 'P') THEN
					
						RESULT_MACRO_P := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_P, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_P_IS_NUMERIC
						INTO STRICT MACRO_P_IS_NUMERIC_W;
						
						
						IF (MACRO_P_IS_NUMERIC_W = 'alpha') THEN
						
							-- ERROR 15 Expression 1052406
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163904);
							
						END IF;
						
						
						
					ELSIF (MACRO_SEARCH = 'O') THEN
					
						RESULT_MACRO_O := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
					ELSIF (MACRO_SEARCH = 'A') THEN
					
						RESULT_MACRO_A := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_A, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_A_IS_NUMERIC
						INTO STRICT MACRO_A_IS_NUMERIC_W;
						
						
						IF (MACRO_A_IS_NUMERIC_W = 'alpha') THEN
						
							-- ERROR 16 Expression 1052408
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163905);
							
						END IF;
						
						
						
					ELSIF (MACRO_SEARCH = 'B') THEN
					
						RESULT_MACRO_B := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
					ELSIF (MACRO_SEARCH = 'U') THEN
					
						RESULT_MACRO_U := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
					ELSIF (MACRO_SEARCH = 'L') THEN
					
						RESULT_MACRO_L := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_L, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_L_IS_NUMERIC
						INTO STRICT MACRO_L_IS_NUMERIC_W;
						
						
						IF (MACRO_L_IS_NUMERIC_W = 'alpha') THEN
						
							-- ERROR 17 Expression 1052410
						CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163906);
							
						END IF;
						
						
						
					ELSIF (MACRO_SEARCH = 'G') THEN
					
						RESULT_MACRO_G := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_G, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_G_IS_NUMERIC
						INTO STRICT MACRO_G_IS_NUMERIC_W;
						
						
						IF (MACRO_G_IS_NUMERIC_W = 'alpha') THEN
						
							-- ERROR 18 Expression 1052412
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163907);
							
						END IF;
						
						
						
					ELSIF (MACRO_SEARCH = 'S') THEN
					
						RESULT_MACRO_S := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_S, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_S_IS_NUMERIC
						INTO STRICT MACRO_S_IS_NUMERIC_W;
						
						
						IF (MACRO_S_IS_NUMERIC_W = 'alpha') THEN
						
							-- ERROR 19 Expression 1052414
						CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163908);
							
						END IF;
						
						
						
					ELSIF (MACRO_SEARCH = 'I') THEN
					
						RESULT_MACRO_I := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
						
						IF (coalesce(DS_BARCODE_ID_W::text, '') = '') THEN
						
							-- ERROR 20 Expression 1052416
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163909);
						
						ELSIF (RESULT_MACRO_I != DS_BARCODE_ID_W) THEN
						
							-- ERROR 21 Expression 1052418
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1163910);
							
						END IF;
						
					
						
					ELSIF (MACRO_SEARCH = 'R') THEN
					
						RESULT_MACRO_R := SUBSTR(CD_BARRAS_W, INICIAL_STR_SEARCH_W, SEARCH_SOMA_W);
						
					
						
						SELECT (case when trim(both TRANSLATE(RESULT_MACRO_R, '0123456789-,.', ' ')) is NULL then 'numeric' else 'alpha' END) AS MACRO_R_IS_NUMERIC 
						INTO STRICT MACRO_R_IS_NUMERIC_W;
						
						
						IF (MACRO_R_IS_NUMERIC_W = 'alpha') THEN
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(1165227);
						END IF;
						
					END IF;
				
				ELSE
				
					IF (MACRO_SEARCH = 'M') THEN 
					
						RESULT_MACRO_M := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'D') THEN
					
						RESULT_MACRO_D := 'N/A';
					
					ELSIF (MACRO_SEARCH = 'Y') THEN
					
						RESULT_MACRO_Y := 'N/A';
					
					ELSIF (MACRO_SEARCH = 'X') THEN
					
						RESULT_MACRO_X := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'N') THEN
					
						RESULT_MACRO_N := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'P') THEN
					
						RESULT_MACRO_P := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'O') THEN
					
						RESULT_MACRO_O := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'A') THEN
					
						RESULT_MACRO_A := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'B') THEN
					
						RESULT_MACRO_B := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'U') THEN
					
						RESULT_MACRO_U := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'L') THEN
					
						RESULT_MACRO_L := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'G') THEN
					
						RESULT_MACRO_G := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'S') THEN
					
						RESULT_MACRO_S := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'I') THEN
					
						RESULT_MACRO_I := 'N/A';
						
					ELSIF (MACRO_SEARCH = 'R') THEN
					
						RESULT_MACRO_R := 'N/A';
						
					END IF;
				
				END IF;
				
			END LOOP;
			
			-- Return
			RETURN 'M:' || RESULT_MACRO_M || ',D:' || RESULT_MACRO_D || ',Y:' || RESULT_MACRO_Y || ',X:' || ltrim(RESULT_MACRO_X, '0') || ',N:' || ltrim(RESULT_MACRO_N, '0')
			|| ',P:' || ltrim(RESULT_MACRO_P, '0') || ',O:' || ltrim(RESULT_MACRO_O, '0') || ',A:' || ltrim(RESULT_MACRO_A, '0') || ',B:' || ltrim(RESULT_MACRO_B, '0') || ',U:' 
			|| ltrim(RESULT_MACRO_U, '0') || ',L:' || ltrim(RESULT_MACRO_L, '0') || ',G:' || ltrim(RESULT_MACRO_G, '0') || ',S:' || ltrim(RESULT_MACRO_S, '0') || ',I:' || RESULT_MACRO_I 
			|| ',R:' || ltrim(RESULT_MACRO_R, '0');
			
			
			
		END IF;
return 'N/A';
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_valor_macros_barras ( CD_BARRAS_P text, BARCODE_RULE_FUNCAO_P bigint, BARCODE_RULE_LABEL_TYPE_P bigint ) FROM PUBLIC;

