-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function obter_se_residente_estrangeiro as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION obter_se_residente_estrangeiro ( cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, dt_referencia_p timestamp) RETURNS varchar AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	varchar;
BEGIN
	v_query := 'SELECT * FROM obter_se_residente_estrangeiro_atx ( ' || quote_nullable(cd_pessoa_fisica_p) || ',' || quote_nullable(cd_estabelecimento_p) || ',' || quote_nullable(dt_referencia_p) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret varchar);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION obter_se_residente_estrangeiro_atx ( cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, dt_referencia_p timestamp) RETURNS varchar AS $body$
DECLARE


qt_meses_residente_w 			bigint;
dt_chegada_brasil_w   			timestamp;
ie_retorno_w					varchar(1);
cd_nacionalidade_w				pessoa_fisica.cd_nacionalidade%type;
ie_nacional_w					nacionalidade.ie_brasileiro%type;
ie_internacional_w				tipo_pessoa_juridica.ie_internacional%type;

/*
	DOCUMENTAÇÃO
	A  nacionalidade da pessoa deve estar marcado como estrangeiro.
	Para verificar se pessoa é residente, deve estar com a nacionalidade estrangeira e tambem
	verifica a qtde de meses de permanencia da pessoa no pais. Parametros do faturamento

	Cadastros Gerais / Aplicação principal / Cadastros gerais / Nacionalidade: campo Nacional.
	Função parâmetros faturamento

	parametros:
	cd_pessoa_fisica_p 		= pessoa a ser verificada;
	cd_estabelecimento_p 	= estabelecimento a ser verificado
	dt_referencia_p			= data de referencia para a consulta se paciente é residente nesta data

	retorna :
	"R", se residente;
	"E", se estrangeiro;
	"N", se nacional; (padrao);

*/
c01 CURSOR FOR
	SELECT 	dt_chegada_brasil,
			cd_nacionalidade
	from   	pessoa_fisica
	where   cd_pessoa_fisica = cd_pessoa_fisica_p;
BEGIN

ie_retorno_w := 'N'; --nacional
OPEN C01;
LOOP
FETCH C01 into
	dt_chegada_brasil_w,
	cd_nacionalidade_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

	begin
		dt_chegada_brasil_w := dt_chegada_brasil_w;
		cd_nacionalidade_w 	:= cd_nacionalidade_w;
		exit;
	exception
	when others then
		dt_chegada_brasil_w := null;
		cd_nacionalidade_w 	:= null;
	end;

END LOOP;
CLOSE C01;

if (cd_nacionalidade_w IS NOT NULL AND cd_nacionalidade_w::text <> '') then

	begin
		select  coalesce(max(ie_brasileiro),'N')
		into STRICT 	ie_nacional_w
		from 	nacionalidade
		where	cd_nacionalidade = cd_nacionalidade_w;
	exception
	when others then
		ie_nacional_w := 'N';
	end;
	end if;

	if (ie_nacional_w = 'N') then
		ie_retorno_w := 'E'; --estrangeiro
	    if (dt_chegada_brasil_w IS NOT NULL AND dt_chegada_brasil_w::text <> '') then

			begin
				select	max(qt_meses_residente)
				into STRICT	qt_meses_residente_w
				from 	parametro_faturamento
				where	cd_estabelecimento = cd_estabelecimento_p;
			exception
			when others then
				qt_meses_residente_w := 0;
			end;

			if ( qt_meses_residente_w > 0) then
				if (pkg_date_utils.start_of(dt_referencia_p,'DD',0) > pkg_date_utils.start_of(PKG_DATE_UTILS.ADD_MONTH(dt_chegada_brasil_w, qt_meses_residente_w,0), 'DD', 0)) then
					ie_retorno_w := 'R'; --residente
				end if;
			end if;

		end if;
	end if;

return ie_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_residente_estrangeiro ( cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, dt_referencia_p timestamp) FROM PUBLIC; -- REVOKE ALL ON FUNCTION obter_se_residente_estrangeiro_atx ( cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, dt_referencia_p timestamp) FROM PUBLIC;

