-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_dados_medic_exec_imp ( nr_seq_item_p pls_conta_proc_imp.nr_sequencia%type, ie_mat_proc_p text) RETURNS PLS_UTIL_PCK.DADOS_MEDICO_EXECUTOR_CTA AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Obtem informações sobre o médico executor da conta.
	Tenta inicialmente a nivel de item, caso não consiga, tenta a nivel de conta


	Essa rotina foi baseada na pls_obter_medico_executor, caso alterar uma das duas,
	verificar a necessidade de alterar ambas.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_retorno_w	pls_util_pck.dados_medico_executor_cta;
nr_seq_conta_w	pls_conta_imp.nr_sequencia%type;
qt_registro_w	integer;


BEGIN
ds_retorno_w.cd_medico_executor		:= null;
ds_retorno_w.nr_seq_cbo_saude		:= null;
ds_retorno_w.ie_tipo_medico_exec	:= null;
ds_retorno_w.cd_grau_partic		:= null;
ds_retorno_w.nr_seq_grau_partic		:= null;
ds_retorno_w.nr_seq_proc_participante	:= null;

-- Só executa se tem os dois parametros principais informado
if	(nr_seq_item_p IS NOT NULL AND nr_seq_item_p::text <> '' AND ie_mat_proc_p IS NOT NULL AND ie_mat_proc_p::text <> '') then

	--Procedimento
	if (ie_mat_proc_p = 'P') then

		-- Primeiramente será feito um teste, para verificar se existe participantes no procedimento.
		-- Assim evitamos algumas trocas de contexto, buscando um prestadr que não existe.
		-- Se esta rotina ficar pesada, para quem for otimizar, considerar a possibilidade de trocar as querys
		-- por uma só, ordenada com um decode pelo cd_tiss, e fazer um bulk collect. Não fiz isto no momento
		-- pois agora me pareceu vantajoso fazer os if's, ao invés de usar o order by. Tem que levar em consideração
		-- o padrão TISS, e as diversas formas que um prestador pode montar a conta.
		select	count(1)
		into STRICT	qt_registro_w
		from	pls_conta_item_equipe_imp	a
		where	a.nr_seq_conta_proc	= nr_seq_item_p;

		-- Se tiver algum participante, vai tentar buscar as inf dele
		if (qt_registro_w > 0) then

			--Irá verificar primeiramente por participantes do tipo cirurgião
			begin
				select	a.cd_profissional_conv,
					a.nr_seq_cbo_profissional_conv,
					'PAR',
					b.cd_tiss,
					a.nr_seq_grau_partic_conv,
					a.nr_sequencia
				into STRICT	ds_retorno_w.cd_medico_executor,
					ds_retorno_w.nr_seq_cbo_saude,
					ds_retorno_w.ie_tipo_medico_exec,
					ds_retorno_w.cd_grau_partic,
					ds_retorno_w.nr_seq_grau_partic,
					ds_retorno_w.nr_seq_proc_participante
				from	pls_conta_item_equipe_imp a,
					pls_grau_participacao	b
				where	b.nr_sequencia		= a.nr_seq_grau_partic_conv
				and	b.cd_tiss		= '00'
				and	a.nr_seq_conta_proc	= nr_seq_item_p  LIMIT 1;
			exception
			when others then
				ds_retorno_w.cd_medico_executor := null;
			end;

			--Caso não possua cirurgião, irá procurar por anestesista
			if (coalesce(ds_retorno_w.cd_medico_executor::text, '') = '') then
				begin
					select	a.cd_profissional_conv,
						a.nr_seq_cbo_profissional_conv,
						'PAR',
						b.cd_tiss,
						a.nr_seq_grau_partic_conv,
						a.nr_sequencia
					into STRICT	ds_retorno_w.cd_medico_executor,
						ds_retorno_w.nr_seq_cbo_saude,
						ds_retorno_w.ie_tipo_medico_exec,
						ds_retorno_w.cd_grau_partic,
						ds_retorno_w.nr_seq_grau_partic,
						ds_retorno_w.nr_seq_proc_participante
					from	pls_conta_item_equipe_imp	a,
						pls_grau_participacao	b
					where	b.nr_sequencia		= a.nr_seq_grau_partic_conv
					and	b.cd_tiss		= '06'
					and	a.nr_seq_conta_proc	= nr_seq_item_p  LIMIT 1;
				exception
				when others then
					ds_retorno_w.cd_medico_executor := null;
				end;
			end if;
			--Caso não encontre anestesista, irá procurar por primeiro auxiliar
			if (coalesce(ds_retorno_w.cd_medico_executor::text, '') = '') then
				begin
					select	a.cd_profissional_conv,
						a.nr_seq_cbo_profissional_conv,
						'PAR',
						b.cd_tiss,
						a.nr_seq_grau_partic_conv,
						a.nr_sequencia
					into STRICT	ds_retorno_w.cd_medico_executor,
						ds_retorno_w.nr_seq_cbo_saude,
						ds_retorno_w.ie_tipo_medico_exec,
						ds_retorno_w.cd_grau_partic,
						ds_retorno_w.nr_seq_grau_partic,
						ds_retorno_w.nr_seq_proc_participante
					from	pls_conta_item_equipe_imp	a,
						pls_grau_participacao		b
					where	b.nr_sequencia		= a.nr_seq_grau_partic_conv
					and	b.cd_tiss		= '01'
					and	a.nr_seq_conta_proc	= nr_seq_item_p  LIMIT 1;
				exception
				when others then
					ds_retorno_w.cd_medico_executor := null;
				end;
			end if;
			--Caso não encontre primeiro auxiliar, irá pegar a maior sequencia
			if (coalesce(ds_retorno_w.cd_medico_executor::text, '') = '') then
				begin
					select	a.cd_profissional_conv,
						a.nr_seq_cbo_profissional_conv,
						'PAR',
						b.cd_tiss,
						a.nr_seq_grau_partic_conv,
						a.nr_sequencia
					into STRICT	ds_retorno_w.cd_medico_executor,
						ds_retorno_w.nr_seq_cbo_saude,
						ds_retorno_w.ie_tipo_medico_exec,
						ds_retorno_w.cd_grau_partic,
						ds_retorno_w.nr_seq_grau_partic,
						ds_retorno_w.nr_seq_proc_participante
					from	pls_conta_item_equipe_imp	a,
						pls_grau_participacao		b
					where	b.nr_sequencia		= a.nr_seq_grau_partic_conv
					and	a.nr_seq_conta_proc	= nr_seq_item_p
					and	a.nr_sequencia		= (	SELECT	max(x.nr_sequencia)
										from	pls_conta_item_equipe_imp x
										where	x.nr_seq_conta_proc	= nr_seq_item_p );
				exception
				when others then
					ds_retorno_w.cd_medico_executor := null;
				end;
			end if;

		-- Fim se tiver participantes
		else -- Se NÂO tiver participantes, vai pegar o medico executor da conta
			begin
				select	max(a.cd_profissional_exec_conv),
					max(a.nr_seq_cbo_prof_exec_conv),
					'CTA',
					null,
					null,
					null
				into STRICT	ds_retorno_w.cd_medico_executor,
					ds_retorno_w.nr_seq_cbo_saude,
					ds_retorno_w.ie_tipo_medico_exec,
					ds_retorno_w.cd_grau_partic,
					ds_retorno_w.nr_seq_grau_partic,
					ds_retorno_w.nr_seq_proc_participante
				from	pls_conta_imp	a
				where	nr_sequencia	= (	SELECT	max(nr_seq_conta)
								from (
									SELECT	nr_seq_conta
									from	pls_conta_proc_imp
									where	nr_sequencia = nr_seq_item_p
									and	ie_mat_proc_p = 'P'
									
union all

									select	nr_seq_conta
									from	pls_conta_mat_imp
									where	nr_sequencia = nr_seq_item_p
									and	ie_mat_proc_p = 'M') alias3);
			exception
			when others then
				ds_retorno_w.cd_medico_executor := null;
			end;
		end if;
	end if;

end if; -- fim se foi imformado os parametros basicos.
return ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_dados_medic_exec_imp ( nr_seq_item_p pls_conta_proc_imp.nr_sequencia%type, ie_mat_proc_p text) FROM PUBLIC;

