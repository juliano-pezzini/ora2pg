-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_proc_concorrente ( nr_seq_regra_concorrente_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, nr_seq_prestador_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, ie_concorrente_anterior_p text, ie_valida_prestador_p text, cd_prestador_p text, ie_valida_execuao_p text, nr_seq_param3_p bigint, qt_dias_considerar_p bigint, ie_valida_medico_solic_p text, cd_medico_solic_p text, ie_valida_proc_princ_p text, ie_tipo_qtde_p text) RETURNS varchar AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Obter se o procedimento pertence a regra de concorrente, e se na guia/requisição/execução
	o procedimento entrar na regra de concorrente caso exisitir outro procedimento também
	pertencente a regra na guia/requisição/execução.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: Somente ser utilizado pelas ocorrências combinadas
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qt_procedimentos_principal_w	bigint;
qt_procedimentos_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_gera_ocorrencia_w		varchar(1) := 'N';
nr_seq_segurado_w		bigint;
dt_referencia_w			timestamp;
nr_seq_req_proc_w		bigint;
nr_seq_guia_proc_w		bigint;
nr_seq_exec_proc_w		bigint;
qt_reg_w			bigint;
ds_retorno_w			varchar(1) := 'N';
nr_seq_requisicao_w		bigint;
nr_seq_guia_w			bigint;
nr_seq_proc_w			bigint;
nr_seq_proc_min_w		bigint;
dt_referencia_inicial_w		timestamp;
dt_referencia_final_w		timestamp;
ie_principal_w			varchar(1) := 'N';
ie_situacao_w			pls_regra_concorrente.ie_situacao%type;

C01 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		ie_principal
	from	pls_proc_concorrente
	where	nr_seq_regra 		= nr_seq_regra_concorrente_p
	and	ie_ocorrencia		= 'S'
	and	ie_situacao		= 'A';

/* Utilizado para verificar concorrentes anteriores quando não considerar a quantidade de dias*/

C02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_requisicao_proc a,
		pls_requisicao b
	where	a.nr_seq_requisicao	= b.nr_sequencia
	and	a.nr_seq_requisicao	<> nr_seq_requisicao_p
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_status		in ('P','S')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and b.cd_medico_solicitante = cd_medico_solic_p)
	and	trunc(b.dt_requisicao)	= dt_referencia_w;

C03 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_guia_plano_proc a,
		pls_guia_plano b
	where	a.nr_seq_guia		= b.nr_sequencia
	and	a.nr_seq_guia		<> nr_seq_guia_p
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_status		in ('L','P','S')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and b.cd_medico_solicitante = cd_medico_solic_p)
	and	trunc(b.dt_solicitacao)	= dt_referencia_w;

C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_guia
	from	pls_execucao_req_item	a,
		pls_execucao_requisicao	b
	where	a.nr_seq_execucao	= b.nr_sequencia
	and	a.nr_seq_execucao	<> nr_seq_execucao_p
	and	a.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_situacao		in ('S','P')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and a.cd_medico_requisitante = cd_medico_solic_p)
	and	trunc(b.dt_execucao)	= dt_referencia_w;

/* Utilizado na consistência da requisição, olhando a execução, conforme parametro da rotina "ie_valida_execucao_p" */

C05 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_guia
	from	pls_execucao_req_item	a,
		pls_execucao_requisicao	b
	where	a.nr_seq_execucao	= b.nr_sequencia
	and	a.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_situacao		in ('S','P')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and a.cd_medico_requisitante = cd_medico_solic_p)
	and	trunc(b.dt_execucao)	= dt_referencia_w;

/* Utilizado para verificar concorrentes quando considerar a quantidade de dias */

C06 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_requisicao_proc a,
		pls_requisicao b
	where	a.nr_seq_requisicao	= b.nr_sequencia
	and	a.nr_seq_requisicao	<> nr_seq_requisicao_p
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_status		in ('P','S')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and b.cd_medico_solicitante = cd_medico_solic_p)
	and	trunc(b.dt_requisicao)	between dt_referencia_inicial_w and dt_referencia_final_w;

C07 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_guia_plano_proc a,
		pls_guia_plano b
	where	a.nr_seq_guia		= b.nr_sequencia
	and	a.nr_seq_guia		<> nr_seq_guia_p
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_status		in ('L','P','S')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and b.cd_medico_solicitante = cd_medico_solic_p)
	and	trunc(b.dt_autorizacao)	between dt_referencia_inicial_w and dt_referencia_final_w;

C08 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_guia
	from	pls_execucao_req_item	a,
		pls_execucao_requisicao	b
	where	a.nr_seq_execucao	= b.nr_sequencia
	and	a.nr_seq_execucao	<> nr_seq_execucao_p
	and	b.nr_seq_requisicao	<> nr_seq_requisicao_w
	and	a.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_situacao		in ('S','P')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and a.cd_medico_requisitante = cd_medico_solic_p)
	and	trunc(b.dt_execucao)	between dt_referencia_inicial_w and dt_referencia_final_w;

/* Utilizado na consistência da requisição, olhando a execução, conforme parametro da rotina "ie_valida_execucao_p" */

C09 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_guia
	from	pls_execucao_req_item	a,
		pls_execucao_requisicao	b
	where	a.nr_seq_execucao	= b.nr_sequencia
	and	a.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_situacao		in ('S','P')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and a.cd_medico_requisitante = cd_medico_solic_p)
	and	trunc(b.dt_execucao)	between dt_referencia_inicial_w and dt_referencia_final_w;

/* Utilizado para verificar concorrentes quando considerar a quantidade em Horas */

C10 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_requisicao_proc a,
		pls_requisicao b
	where	a.nr_seq_requisicao	= b.nr_sequencia
	and	a.nr_seq_requisicao	<> nr_seq_requisicao_p
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_status		in ('P','S')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and b.cd_medico_solicitante = cd_medico_solic_p)
	and	b.dt_requisicao	between dt_referencia_inicial_w and dt_referencia_final_w;

C11 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_guia_plano_proc a,
		pls_guia_plano b
	where	a.nr_seq_guia		= b.nr_sequencia
	and	a.nr_seq_guia		<> nr_seq_guia_p
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_status		in ('L','P','S')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and b.cd_medico_solicitante = cd_medico_solic_p)
	and	b.dt_autorizacao	between dt_referencia_inicial_w and dt_referencia_final_w;

C12 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_guia
	from	pls_execucao_req_item	a,
		pls_execucao_requisicao	b
	where	a.nr_seq_execucao	= b.nr_sequencia
	and	a.nr_seq_execucao	<> nr_seq_execucao_p
	and	b.nr_seq_requisicao	<> nr_seq_requisicao_w
	and	a.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_situacao		in ('S','P')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and a.cd_medico_requisitante = cd_medico_solic_p)
	and	b.dt_execucao	between dt_referencia_inicial_w and dt_referencia_final_w;

/* Utilizado na consistência da requisição, olhando a execução, conforme parametro da rotina "ie_valida_execucao_p"  - validação por horas*/

C13 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_guia
	from	pls_execucao_req_item	a,
		pls_execucao_requisicao	b
	where	a.nr_seq_execucao	= b.nr_sequencia
	and	a.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_situacao		in ('S','P')
	and	((ie_valida_prestador_p = 'N')
	or (ie_valida_prestador_p	= 'S' and pls_obter_cod_prestador(b.nr_seq_prestador,null)	= cd_prestador_p))
	and	((ie_valida_medico_solic_p	= 'N')
	or (ie_valida_medico_solic_p	= 'S') and a.cd_medico_requisitante = cd_medico_solic_p)
	and	b.dt_execucao	between dt_referencia_inicial_w and dt_referencia_final_w;


BEGIN

begin
	select	ie_situacao
	into STRICT	ie_situacao_w
	from	pls_regra_concorrente
	where	nr_sequencia	= nr_seq_regra_concorrente_p;
exception
when others then
	ie_situacao_w := 'I';
end;

if (ie_situacao_w = 'A') then

	if (ie_valida_proc_princ_p in ('S','G')) then
		if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
			ie_gera_ocorrencia_w := pls_gerar_oc_comb_concor_guia(	nr_seq_regra_concorrente_p, cd_procedimento_p, ie_origem_proced_p, nr_seq_guia_p, ie_gera_ocorrencia_w, ie_valida_proc_princ_p);
		elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
			ie_gera_ocorrencia_w := pls_gerar_oc_comb_concor_req(	nr_seq_regra_concorrente_p, cd_procedimento_p, ie_origem_proced_p, nr_seq_requisicao_p, ie_gera_ocorrencia_w, ie_valida_proc_princ_p);
		elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
			ie_gera_ocorrencia_w := pls_gerar_oc_comb_concor_exec(	nr_seq_regra_concorrente_p, cd_procedimento_p, ie_origem_proced_p, nr_seq_execucao_p, ie_gera_ocorrencia_w, ie_valida_proc_princ_p);
		end if;
	elsif (ie_valida_proc_princ_p = 'N') then
		select	count(1)
		into STRICT	qt_reg_w
		from	pls_proc_concorrente a
		where	a.nr_seq_regra  = nr_seq_regra_concorrente_p
		and	a.ie_ocorrencia = 'S'
		and	a.ie_situacao	= 'A'
		and	a.cd_procedimento	= cd_procedimento_p
		and	a.ie_origem_proced	= ie_origem_proced_p;

		if (qt_reg_w > 0) then
			if (coalesce(ie_concorrente_anterior_p,'N') 	= 'N') and (coalesce(ie_valida_prestador_p, 'N')	= 'N') and (coalesce(ie_valida_medico_solic_p, 'N')	= 'N') and (coalesce(qt_dias_considerar_p, 0) 		= 0) then

				if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then

					select	count(a.nr_sequencia)
					into STRICT	qt_procedimentos_w
					from	pls_proc_concorrente a
					where	a.nr_seq_regra 	= nr_seq_regra_concorrente_p
					and	a.ie_ocorrencia	= 'S'
					and	a.ie_situacao	= 'A'
					and	exists (SELECT		1
							 from		pls_requisicao_proc x
							 where		x.nr_seq_requisicao	= nr_seq_requisicao_p
							 and		x.cd_procedimento 	= a.cd_procedimento
							 and		x.ie_origem_proced	= a.ie_origem_proced);

					nr_seq_proc_min_w	:= pls_obter_seq_proc_min_concorr(nr_seq_regra_concorrente_p, null, nr_seq_requisicao_p, null);

					select 	nr_sequencia
					into STRICT	nr_seq_proc_w
					from	pls_requisicao_proc
					where	cd_procedimento		= cd_procedimento_p
					and	ie_origem_proced	= ie_origem_proced_p
					and	nr_seq_requisicao	= nr_seq_requisicao_p;

				elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
					select	count(a.nr_sequencia)
					into STRICT	qt_procedimentos_w
					from	pls_proc_concorrente a
					where	a.nr_seq_regra 	= nr_seq_regra_concorrente_p
					and	a.ie_ocorrencia	= 'S'
					and	a.ie_situacao	= 'A'
					and	exists (SELECT		1
							 from		pls_guia_plano_proc x
							 where		x.nr_seq_guia		= nr_seq_guia_p
							 and		x.cd_procedimento 	= a.cd_procedimento
							 and		x.ie_origem_proced	= a.ie_origem_proced);

					nr_seq_proc_min_w	:= pls_obter_seq_proc_min_concorr(nr_seq_regra_concorrente_p, nr_seq_guia_p, null, null);

					select 	nr_sequencia
					into STRICT	nr_seq_proc_w
					from	pls_guia_plano_proc
					where	cd_procedimento		= cd_procedimento_p
					and	ie_origem_proced	= ie_origem_proced_p
					and	nr_seq_guia		= nr_seq_guia_p;

				elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
					select	count(a.nr_sequencia)
					into STRICT	qt_procedimentos_w
					from	pls_proc_concorrente a
					where	a.nr_seq_regra 	= nr_seq_regra_concorrente_p
					and	a.ie_ocorrencia	= 'S'
					and	a.ie_situacao	= 'A'
					and	exists (SELECT		1
							 from		pls_execucao_req_item x
							 where		x.nr_seq_execucao	= nr_seq_execucao_p
							 and		x.cd_procedimento 	= a.cd_procedimento
							 and		x.ie_origem_proced	= a.ie_origem_proced);

					nr_seq_proc_min_w	:= pls_obter_seq_proc_min_concorr(nr_seq_regra_concorrente_p, null, null, nr_seq_execucao_p);

					select 	nr_sequencia
					into STRICT	nr_seq_proc_w
					from	pls_execucao_req_item
					where	cd_procedimento		= cd_procedimento_p
					and	ie_origem_proced	= ie_origem_proced_p
					and	nr_seq_execucao		= nr_seq_execucao_p;
				end if;

				if (qt_procedimentos_w > 1) then
					ie_gera_ocorrencia_w := 'S';
				end if;

				if ( nr_seq_proc_min_w = nr_seq_proc_w ) then
					ie_gera_ocorrencia_w := 'N';
				end if;

			elsif (coalesce(qt_dias_considerar_p,0) 	> 0) and (ie_concorrente_anterior_p 	= 'N') then

				if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
					begin
					select	nr_seq_segurado,
						dt_requisicao
					into STRICT	nr_seq_segurado_w,
						dt_referencia_final_w
					from	pls_requisicao
					where	nr_sequencia	= nr_seq_requisicao_p;
					exception
					when others then
						nr_seq_segurado_w	:= 0;
					end;
				elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
					begin

					select	nr_seq_segurado,
						dt_solicitacao
					into STRICT	nr_seq_segurado_w,
						dt_referencia_final_w
					from	pls_guia_plano
					where	nr_sequencia	= nr_seq_guia_p;
					exception
					when others then
						nr_seq_segurado_w	:= 0;
					end;
				elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
					begin
					select	nr_seq_requisicao,
						clock_timestamp()
					into STRICT	nr_seq_requisicao_w,
						dt_referencia_final_w
					from	pls_execucao_requisicao
					where	nr_sequencia	= nr_seq_execucao_p;

					select	nr_seq_segurado
					into STRICT	nr_seq_segurado_w
					from	pls_requisicao
					where	nr_sequencia = nr_seq_requisicao_w;

					exception
					when others then
						nr_seq_segurado_w	:= 0;
					end;
				end if;

				if (coalesce(ie_tipo_qtde_p,'D') = 'D') then
					dt_referencia_final_w	:= trunc(dt_referencia_final_w);
					dt_referencia_inicial_w	:= trunc(dt_referencia_final_w - qt_dias_considerar_p);

				elsif (ie_tipo_qtde_p = 'H') then
					dt_referencia_inicial_w	:= (dt_referencia_final_w - (qt_dias_considerar_p / 24));
				end if;

				qt_procedimentos_w	:= 0;

				open C01;
				loop
				fetch C01 into
					cd_procedimento_w,
					ie_origem_proced_w,
					ie_principal_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin

					if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then

						if (coalesce(ie_valida_execuao_p,'N') = 'N') then
							if (coalesce(ie_tipo_qtde_p,'D') = 'D') then
								open C06;
								loop
								fetch C06 into
									nr_seq_req_proc_w;
								EXIT WHEN NOT FOUND; /* apply on C06 */
									begin

									select	count(1)
									into STRICT	qt_procedimentos_w
									from	pls_requisicao_proc
									where	nr_sequencia		= nr_seq_req_proc_w
									and	cd_procedimento 	= cd_procedimento_p
									and	ie_origem_proced	= ie_origem_proced_p;

									if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
										((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
										ie_gera_ocorrencia_w := 'S';
									end if;
									end;
								end loop;
								close C06;
							elsif (ie_tipo_qtde_p = 'H') then
								open C10;
								loop
								fetch C10 into
									nr_seq_req_proc_w;
								EXIT WHEN NOT FOUND; /* apply on C10 */
									begin

									select	count(1)
									into STRICT	qt_procedimentos_w
									from	pls_requisicao_proc
									where	nr_sequencia		= nr_seq_req_proc_w
									and	cd_procedimento 	= cd_procedimento_p
									and	ie_origem_proced	= ie_origem_proced_p;

									if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
										((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
										ie_gera_ocorrencia_w := 'S';
									end if;
									end;
								end loop;
								close C10;
							end if;
						elsif (coalesce(ie_valida_execuao_p,'N') = 'S') then
							if (coalesce(ie_tipo_qtde_p,'D') = 'D') then
								open C09;
								loop
								fetch C09 into
									nr_seq_exec_proc_w,
									nr_seq_guia_w;
								EXIT WHEN NOT FOUND; /* apply on C09 */
									begin

									select	count(1)
									into STRICT	qt_reg_w
									from	pls_guia_plano
									where	nr_sequencia = nr_seq_guia_w
									and	ie_status = '3';

									if (qt_reg_w = 0) then
										select	count(1)
										into STRICT	qt_procedimentos_w
										from	pls_execucao_req_item
										where	nr_sequencia		= nr_seq_exec_proc_w
										and	cd_procedimento 	= cd_procedimento_p
										and	ie_origem_proced	= ie_origem_proced_p;

										if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
											((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
											ie_gera_ocorrencia_w := 'S';
										end if;
									end if;
									end;
								end loop;
								close C09;
							elsif (ie_tipo_qtde_p = 'H') then
								open C13;
								loop
								fetch C13 into
									nr_seq_exec_proc_w,
									nr_seq_guia_w;
								EXIT WHEN NOT FOUND; /* apply on C13 */
									begin

									select	count(1)
									into STRICT	qt_reg_w
									from	pls_guia_plano
									where	nr_sequencia = nr_seq_guia_w
									and	ie_status = '3';

									if (qt_reg_w = 0) then
										select	count(1)
										into STRICT	qt_procedimentos_w
										from	pls_execucao_req_item
										where	nr_sequencia		= nr_seq_exec_proc_w
										and	cd_procedimento 	= cd_procedimento_p
										and	ie_origem_proced	= ie_origem_proced_p;

										if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
											((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
											ie_gera_ocorrencia_w := 'S';
										end if;
									end if;
									end;
								end loop;
								close C13;
							end if;
						end if;

					elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
						if (coalesce(ie_tipo_qtde_p,'D') = 'D') then
							open C07;
							loop
							fetch C07 into
								nr_seq_guia_proc_w;
							EXIT WHEN NOT FOUND; /* apply on C07 */
								begin

								select	count(1)
								into STRICT	qt_procedimentos_w
								from	pls_guia_plano_proc
								where	nr_sequencia		= nr_seq_guia_proc_w
								and	cd_procedimento 	= cd_procedimento_p
								and	ie_origem_proced	= ie_origem_proced_p;

								if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
									((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
									ie_gera_ocorrencia_w := 'S';
								end if;
								end;
							end loop;
							close C07;
						elsif (ie_tipo_qtde_p = 'H') then
							open C11;
							loop
							fetch C11 into
								nr_seq_guia_proc_w;
							EXIT WHEN NOT FOUND; /* apply on C11 */
								begin
								select	count(1)
								into STRICT	qt_procedimentos_w
								from	pls_guia_plano_proc
								where	nr_sequencia		= nr_seq_guia_proc_w
								and	cd_procedimento 	= cd_procedimento_p
								and	ie_origem_proced	= ie_origem_proced_p;

								if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
									((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
									ie_gera_ocorrencia_w := 'S';
								end if;
								end;
							end loop;
							close C11;
						end if;
					elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
						if (coalesce(ie_tipo_qtde_p,'D') = 'D') then
							open C08;
							loop
							fetch C08 into
								nr_seq_exec_proc_w,
								nr_seq_guia_w;
							EXIT WHEN NOT FOUND; /* apply on C08 */
								begin
								/*Verifica de a guia esta Negada*/

								select	count(1)
								into STRICT	qt_reg_w
								from	pls_guia_plano
								where	nr_sequencia = nr_seq_guia_w
								and	ie_status = '3';
								/*Se a guia não estiver Negada verifica se é a mesma que esta sendo executada com o mesmo procedimento */

								if (qt_reg_w = 0) then
									select	count(1)
									into STRICT	qt_procedimentos_w
									from	pls_execucao_req_item
									where	nr_sequencia		= nr_seq_exec_proc_w
									and	cd_procedimento 	= cd_procedimento_p
									and	ie_origem_proced	= ie_origem_proced_p;
									/*Se não for a mesma guia que esta sendo executada e tiver procedimentos concorrentes no periodo de dias estipulado na regra vai gerar ocorrencia */

									if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
										((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
										ie_gera_ocorrencia_w := 'S';
									end if;
								end if;
								end;
							end loop;
							close C08;
						elsif (ie_tipo_qtde_p = 'H') then
							open C12;
							loop
							fetch C12 into
								nr_seq_exec_proc_w,
								nr_seq_guia_w;
							EXIT WHEN NOT FOUND; /* apply on C12 */
								begin
								/*Verifica de a guia esta Negada*/

								select	count(1)
								into STRICT	qt_reg_w
								from	pls_guia_plano
								where	nr_sequencia = nr_seq_guia_w
								and	ie_status = '3';
								/*Se a guia não estiver Negada verifica se é a mesma que esta sendo executada com o mesmo procedimento */

								if (qt_reg_w = 0) then
									select	count(1)
									into STRICT	qt_procedimentos_w
									from	pls_execucao_req_item
									where	nr_sequencia		= nr_seq_exec_proc_w
									and	cd_procedimento 	= cd_procedimento_p
									and	ie_origem_proced	= ie_origem_proced_p;
									/*Se não for a mesma guia que esta sendo executada e tiver procedimentos concorrentes no periodo de dias estipulado na regra vai gerar ocorrencia */

									if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
										((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
										ie_gera_ocorrencia_w := 'S';
									end if;
								end if;
								end;
							end loop;
							close C12;
						end if;
					end if;
					end;
				end loop;
				close C01;
			elsif (coalesce(ie_concorrente_anterior_p, 'N')	= 'S') then

				if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
					begin
					select	nr_seq_segurado,
						trunc(dt_requisicao)
					into STRICT	nr_seq_segurado_w,
						dt_referencia_w
					from	pls_requisicao
					where	nr_sequencia	= nr_seq_requisicao_p;
					exception
					when others then
						nr_seq_segurado_w	:= 0;
					end;
				elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
					begin
					select	nr_seq_segurado,
						trunc(dt_solicitacao)
					into STRICT	nr_seq_segurado_w,
						dt_referencia_w
					from	pls_guia_plano
					where	nr_sequencia	= nr_seq_guia_p;
					exception
					when others then
						nr_seq_segurado_w	:= 0;
					end;
				elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
					begin
					select	nr_seq_requisicao,
						trunc(clock_timestamp())
					into STRICT	nr_seq_requisicao_w,
						dt_referencia_w
					from	pls_execucao_requisicao
					where	nr_sequencia	= nr_seq_execucao_p;

					select	nr_seq_segurado
					into STRICT	nr_seq_segurado_w
					from	pls_requisicao
					where	nr_sequencia = nr_seq_requisicao_w;

					exception
					when others then
						nr_seq_segurado_w	:= 0;
					end;
				end if;

				qt_procedimentos_w	:= 0;

				open C01;
				loop
				fetch C01 into
					cd_procedimento_w,
					ie_origem_proced_w,
					ie_principal_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin

					if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then

						if (ie_valida_execuao_p = 'N') then
							open C02;
							loop
							fetch C02 into
								nr_seq_req_proc_w;
							EXIT WHEN NOT FOUND; /* apply on C02 */
								begin
								select	count(1)
								into STRICT	qt_procedimentos_w
								from	pls_requisicao_proc
								where	nr_sequencia		= nr_seq_req_proc_w
								and	cd_procedimento 	= cd_procedimento_p
								and	ie_origem_proced	= ie_origem_proced_p;

								if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
									((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
									ie_gera_ocorrencia_w := 'S';
								end if;
								end;
							end loop;
							close C02;
						elsif (ie_valida_execuao_p = 'S') then
							open C05;
							loop
							fetch C05 into
								nr_seq_exec_proc_w,
								nr_seq_guia_w;
							EXIT WHEN NOT FOUND; /* apply on C05 */
								begin

								select	count(1)
								into STRICT	qt_reg_w
								from	pls_guia_plano
								where	nr_sequencia = nr_seq_guia_w
								and	ie_status = '3';

								if (qt_reg_w = 0) then
									select	count(1)
									into STRICT	qt_procedimentos_w
									from	pls_execucao_req_item
									where	nr_sequencia		= nr_seq_exec_proc_w
									and	cd_procedimento 	= cd_procedimento_p
									and	ie_origem_proced	= ie_origem_proced_p;

									if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
										((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
										ie_gera_ocorrencia_w := 'S';
									end if;
								end if;
								end;
							end loop;
							close C05;
						end if;

					elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
						open C03;
						loop
						fetch C03 into
							nr_seq_guia_proc_w;
						EXIT WHEN NOT FOUND; /* apply on C03 */
							begin
							select	count(1)
							into STRICT	qt_procedimentos_w
							from	pls_guia_plano_proc
							where	nr_sequencia		= nr_seq_guia_proc_w
							and	cd_procedimento 	= cd_procedimento_p
							and	ie_origem_proced	= ie_origem_proced_p;

							if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
								((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
								ie_gera_ocorrencia_w := 'S';
							end if;
							end;
						end loop;
						close C03;
					elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then

						open C04;
						loop
						fetch C04 into
							nr_seq_exec_proc_w,
							nr_seq_guia_w;
						EXIT WHEN NOT FOUND; /* apply on C04 */
							begin

							select	count(1)
							into STRICT	qt_reg_w
							from	pls_guia_plano
							where	nr_sequencia = nr_seq_guia_w
							and	ie_status = '3';

							if (qt_reg_w = 0) then
								select	count(1)
								into STRICT	qt_procedimentos_w
								from	pls_execucao_req_item
								where	nr_sequencia		= nr_seq_exec_proc_w
								and	cd_procedimento 	= cd_procedimento_p
								and	ie_origem_proced	= ie_origem_proced_p;

								if	((qt_procedimentos_w = 0 AND ie_valida_medico_solic_p = 'N') or
									((qt_procedimentos_w = 0) and (ie_valida_medico_solic_p = 'S') and (ie_principal_w = 'S'))) then
									ie_gera_ocorrencia_w := 'S';
								end if;
							end if;
							end;
						end loop;
						close C04;
					end if;

					end;
				end loop;
				close C01;
			end if;
		end if;
	end if;

	ds_retorno_w := ie_gera_ocorrencia_w;
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_proc_concorrente ( nr_seq_regra_concorrente_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, nr_seq_prestador_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, ie_concorrente_anterior_p text, ie_valida_prestador_p text, cd_prestador_p text, ie_valida_execuao_p text, nr_seq_param3_p bigint, qt_dias_considerar_p bigint, ie_valida_medico_solic_p text, cd_medico_solic_p text, ie_valida_proc_princ_p text, ie_tipo_qtde_p text) FROM PUBLIC;

