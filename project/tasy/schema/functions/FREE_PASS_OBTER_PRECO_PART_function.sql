-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION free_pass_obter_preco_part (nr_seq_agenda_p bigint, cd_tipo_agenda_p bigint, cd_estabelecimento_p bigint) RETURNS bigint AS $body$
DECLARE


cd_procedimento_w     agenda_paciente.cd_procedimento%type;
nr_seq_proc_interno_w agenda_paciente.nr_seq_proc_interno%type;
ie_tipo_atendimento_w agenda_paciente.ie_tipo_atendimento%type;
cd_convenio_w         agenda_paciente.cd_convenio%type;
cd_categoria_w        agenda_paciente.cd_categoria%type;
cd_medico_req_w       agenda_consulta.cd_medico_req%type;
cd_especialidade_w    agenda_consulta.cd_especialidade%type;
nr_seq_agenda_w       agenda_paciente_proc.nr_sequencia%type;

vl_proced_partic_w	    double precision := 0;
vl_procedimento_part_w	double precision;
vl_aux_w		double precision;
ds_aux_w		varchar(10);


c01 CURSOR FOR
  SELECT  cd_procedimento,
          nr_seq_proc_interno
  from    agenda_paciente_proc
  where   nr_sequencia = nr_seq_agenda_w;

c02 CURSOR FOR
  SELECT  cd_procedimento,
          nr_seq_proc_interno
  from    agenda_consulta_proc
  where   nr_seq_agenda = nr_seq_agenda_w;
BEGIN

 if (cd_tipo_agenda_p = 2) then

    select  cd_procedimento,
            nr_seq_proc_interno,
            ie_tipo_atendimento,
            cd_convenio,
            cd_categoria,
            cd_medico_req,
            null cd_especialidade,
            nr_sequencia
    into STRICT    cd_procedimento_w,
            nr_seq_proc_interno_w,
            ie_tipo_atendimento_w,
            cd_convenio_w,
            cd_categoria_w,
            cd_medico_req_w,
            cd_especialidade_w,
            nr_seq_agenda_w
    from    agenda_paciente
    where   nr_sequencia = nr_seq_agenda_p;

  else
  
    select  cd_procedimento,
            nr_seq_proc_interno,
            ie_tipo_atendimento,
            cd_convenio,
            cd_categoria,
            cd_medico_req,
            cd_especialidade,
            nr_sequencia
    into STRICT    cd_procedimento_w,
            nr_seq_proc_interno_w,
            ie_tipo_atendimento_w,
            cd_convenio_w,
            cd_categoria_w,
            cd_medico_req_w,
            cd_especialidade_w,
            nr_seq_agenda_w
    from    agenda_consulta
    where   nr_sequencia = nr_seq_agenda_p;

  end if;

  SELECT * FROM Define_Preco_Procedimento(
						cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, clock_timestamp(), cd_procedimento_w, 0, coalesce(ie_tipo_atendimento_w,0), 0, cd_medico_req_w, --medico
						0, 0, 0, nr_seq_proc_interno_w, null, null, 0, 0, null, vl_procedimento_part_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, vl_aux_w, 0, null, 0, 'N', null, null, null, null, null, cd_especialidade_w, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_procedimento_part_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, vl_aux_w;

  vl_proced_partic_w	:= coalesce(vl_procedimento_part_w, 0);

  if cd_tipo_agenda_p = 2 then
  
    for c01_r in c01 loop
    
      SELECT * FROM Define_Preco_Procedimento(
						cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, clock_timestamp(), c01_r.cd_procedimento, 0, coalesce(ie_tipo_atendimento_w,0), 0, cd_medico_req_w, --medico
						0, 0, 0, c01_r.nr_seq_proc_interno, null, null, 0, 0, null, vl_procedimento_part_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, vl_aux_w, 0, null, 0, 'N', null, null, null, null, null, cd_especialidade_w, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_procedimento_part_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, vl_aux_w;

      vl_proced_partic_w	:= vl_proced_partic_w + coalesce(vl_procedimento_part_w, 0);

    end loop;

  else
  
    for c02_r in c02 loop
    
      SELECT * FROM Define_Preco_Procedimento(
						cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, clock_timestamp(), c02_r.cd_procedimento, 0, coalesce(ie_tipo_atendimento_w,0), 0, cd_medico_req_w, --medico
						0, 0, 0, c02_r.nr_seq_proc_interno, null, null, 0, 0, null, vl_procedimento_part_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, vl_aux_w, 0, null, 0, 'N', null, null, null, null, null, cd_especialidade_w, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_procedimento_part_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, vl_aux_w;

      vl_proced_partic_w	:= vl_proced_partic_w + coalesce(vl_procedimento_part_w, 0);

    end loop;

  end if;

  return	vl_proced_partic_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION free_pass_obter_preco_part (nr_seq_agenda_p bigint, cd_tipo_agenda_p bigint, cd_estabelecimento_p bigint) FROM PUBLIC;

