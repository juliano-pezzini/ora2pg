-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION hd_obter_prox_exec_protocolo (ie_forma_solic_p text, nr_dia_p bigint, nr_mes_p bigint, ie_opcao_p text) RETURNS timestamp AS $body$
DECLARE


-- ATENÇÂO: Ao alterar esta function tem que verificar se não é necessário alterar também a OBTER_PROX_DATA_REF, que é chamada na procedure HD_GERAR_EXAME_ROTINA
dt_base_w		timestamp;
vl_mes_w		smallint;
nr_mes_w		smallint;
nr_dia_w		smallint;
nr_dia_referencia_w	smallint;
vl_ultimo_dia_mes_w	smallint;
vl_ano_w		smallint;
dt_param_w		timestamp;


BEGIN
if (ie_forma_solic_p IS NOT NULL AND ie_forma_solic_p::text <> '') and (nr_dia_p IS NOT NULL AND nr_dia_p::text <> '') and (nr_mes_p IS NOT NULL AND nr_mes_p::text <> '') then

	nr_dia_referencia_w	:= nr_dia_p;
	vl_mes_w		:= nr_mes_p;
	vl_ano_w		:= PKG_DATE_UTILS.extract_field('YEAR',clock_timestamp());

	nr_mes_w		:= 0;
	nr_dia_w		:= 0;

	if (ie_forma_solic_p = 'SE') then
		nr_dia_w	:= 7;
		vl_mes_w	:= PKG_DATE_UTILS.extract_field('MONTH',clock_timestamp());

		if (nr_dia_w > 24) and (vl_mes_w = 12) then
			vl_ano_w	:= PKG_DATE_UTILS.extract_field('YEAR',clock_timestamp()) - 1;
		end if;

	elsif (ie_forma_solic_p = 'Z') then

		nr_dia_w	:= 14;
		vl_mes_w	:= PKG_DATE_UTILS.extract_field('MONTH',clock_timestamp());

		if (vl_mes_w = 12) then
			vl_ano_w	:= PKG_DATE_UTILS.extract_field('YEAR',clock_timestamp()) - 1;
		end if;

	elsif (ie_forma_solic_p = 'M') then

		nr_mes_w	:= 1;
		vl_mes_w	:= PKG_DATE_UTILS.extract_field('MONTH',clock_timestamp());

		if (vl_mes_w = 12) then
			vl_ano_w	:= PKG_DATE_UTILS.extract_field('YEAR',clock_timestamp()) - 1;
		end if;

	elsif (ie_forma_solic_p = 'B') then

		nr_mes_w	:= 2;

		if (vl_mes_w > 10) then
			vl_ano_w	:= PKG_DATE_UTILS.extract_field('YEAR',clock_timestamp()) - 1;
		end if;

	elsif (ie_forma_solic_p = 'T') then

		nr_mes_w	:= 3;
		vl_ano_w	:= PKG_DATE_UTILS.extract_field('YEAR',clock_timestamp()) - 1;

	elsif (ie_forma_solic_p = 'Q') then

		nr_mes_w	:= 4;

		if (vl_mes_w > 8) then
			vl_ano_w	:= PKG_DATE_UTILS.extract_field('YEAR',clock_timestamp()) - 1;
		end if;

	elsif (ie_forma_solic_p = 'S') then

		nr_mes_w 	:= 6;

		if (vl_mes_w > 6) then
			vl_ano_w	:= PKG_DATE_UTILS.extract_field('YEAR',clock_timestamp()) - 1;
		end if;

	else

		nr_mes_w 	:= 12;

	end if;

	select 	PKG_DATE_UTILS.extract_field('DAY', PKG_DATE_UTILS.END_OF(PKG_DATE_UTILS.get_Date(vl_ano_w, vl_mes_w, 1), 'MONTH', 0))
	into STRICT	vl_ultimo_dia_mes_w
	;

	if (nr_dia_referencia_w > vl_ultimo_dia_mes_w) then
		nr_dia_referencia_w := vl_ultimo_dia_mes_w;
	end if;

	dt_param_w	:= PKG_DATE_UTILS.get_Date(vl_ano_w, vl_mes_w, nr_dia_referencia_w);

	if (nr_dia_w > 0) then
		while(dt_param_w < clock_timestamp()) loop
		 begin
		 dt_param_w 	:= dt_param_w + nr_dia_w;
		 end;
		end loop;
	end if;

	if (nr_mes_w > 0) then
		while(dt_param_w < clock_timestamp()) loop
		begin

		begin
		dt_param_w 	:= to_date(nr_dia_referencia_w || to_char(pkg_date_utils.add_month(dt_param_w,nr_mes_w,0),'/mm/yyyy'),'dd/mm/yyyy');
		exception when others then
			dt_param_w 	:= PKG_DATE_UTILS.ADD_MONTH(dt_param_w,nr_mes_w,0);
		end;

		end;
		end loop;
	end if;

	dt_base_w	:= dt_param_w;

end if;

return dt_base_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION hd_obter_prox_exec_protocolo (ie_forma_solic_p text, nr_dia_p bigint, nr_mes_p bigint, ie_opcao_p text) FROM PUBLIC;

