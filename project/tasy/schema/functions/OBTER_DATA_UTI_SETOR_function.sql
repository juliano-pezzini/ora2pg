-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_data_uti_setor ( nr_atendimento_p bigint, dt_periodo_inicio_p timestamp, dt_periodo_final_p timestamp, qt_dias_p bigint, ie_opcao_p text) RETURNS timestamp AS $body$
DECLARE


dt_retorno_w		timestamp;
dt_entrada_unidade_w	timestamp;
dt_saida_unidade_w	timestamp;
qt_dias_acumulado_w	bigint;
qt_dias_passagem_w	bigint;
qt_dif_restante_w	bigint;
dt_entrada_w		timestamp;
dt_saida_w		timestamp;

C01 CURSOR FOR
	SELECT	pkg_date_utils.start_of(a.dt_entrada_unidade, 'dd'),
		pkg_date_utils.start_of(coalesce(a.dt_saida_unidade,clock_timestamp()), 'dd'),
		dt_entrada_unidade,
		coalesce(dt_saida_unidade,clock_timestamp())
	from	atend_paciente_unidade  a,
		setor_atendimento 	b
	where	a.nr_atendimento = nr_atendimento_p
	and 	a.cd_setor_atendimento = b.cd_setor_atendimento
	and 	((ie_opcao_p = 'UTI' AND b.cd_classif_setor = 4) or
		 ((ie_opcao_p = 'SETOR') and (b.cd_classif_setor in (1,3,8))))
	and 	coalesce(a.dt_saida_unidade, clock_timestamp()) > dt_periodo_inicio_p
	and 	a.dt_entrada_unidade <= dt_periodo_final_p
	order by a.dt_entrada_unidade;


BEGIN

/*
OS 569475

Pacote de 01/07/2013 10:00:00 à 15/07/2013 15:00:00
Sendo 6 Dias de UTI e 2 dias de Setores.

01/07/2013 10:00:00    05/07/2013 17:00:00   UTI
05/07/2013 17:00:00	08/07/2013 17:10:00   Unidade A
08/07/2013 17:10:00	  		UTI


A function retorna a data limite para que os gastos entrem no pacote.
No caso do exemplo acima deve retornar 10/07/2013 17:10:00 que completa 6 dias de UTI
Todos os lanlçamentos até 10/07/2013

*/
qt_dias_acumulado_w	:= 0;
qt_dif_restante_w	:= qt_dias_p;
qt_dias_passagem_w	:= 0;

open C01;
loop
fetch C01 into
	dt_entrada_unidade_w,
	dt_saida_unidade_w,
	dt_entrada_w,
	dt_saida_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	if (dt_saida_unidade_w > dt_periodo_final_p) then
		dt_saida_unidade_w:= dt_periodo_final_p;
	elsif (dt_entrada_unidade_w < dt_periodo_inicio_p) then
		dt_entrada_unidade_w:= pkg_date_utils.start_of(dt_periodo_inicio_p,'dd');
	end if;

	qt_dias_passagem_w	:= (dt_saida_unidade_w - dt_entrada_unidade_w);


	if	((qt_dias_passagem_w + qt_dias_acumulado_w) > qt_dias_p) then
		dt_retorno_w		:= dt_entrada_w + qt_dif_restante_w;
	else
		dt_retorno_w		:= dt_saida_w;
		qt_dif_restante_w	:= qt_dif_restante_w - qt_dias_passagem_w;
	end if;

	qt_dias_acumulado_w	:= qt_dias_acumulado_w + qt_dias_passagem_w;

	end;
end loop;
close C01;

return	dt_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_data_uti_setor ( nr_atendimento_p bigint, dt_periodo_inicio_p timestamp, dt_periodo_final_p timestamp, qt_dias_p bigint, ie_opcao_p text) FROM PUBLIC;

