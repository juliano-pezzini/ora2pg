-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_val_tab_amb ( cd_edicao_amb_p preco_amb.cd_edicao_amb%type, dt_guia_p timestamp, cd_procedimento_p preco_amb.cd_procedimento%type, vl_filme_p pls_regra_preco_proc.vl_filme%type) RETURNS TIPO_VAL_TAB_AMB AS $body$
DECLARE


val_tab_amb_w		tipo_val_tab_amb := tipo_val_tab_amb(null, null, null, null, null, null, null, null, null);
dt_inicio_vigencia_w	timestamp;
ie_situacao_w		edicao_amb.ie_situacao%type;
dt_guia_w		timestamp;

c01 CURSOR(	cd_edicao_amb_pc	preco_amb.cd_edicao_amb%type,
		cd_procedimento_pc	preco_amb.cd_procedimento%type) FOR
	SELECT	b.dt_inicio_vigencia,
		b.dt_final_vigencia
	from	preco_amb b
	where	b.cd_edicao_amb = cd_edicao_amb_pc
	and	b.cd_procedimento = cd_procedimento_pc
	and	(b.dt_inicio_vigencia IS NOT NULL AND b.dt_inicio_vigencia::text <> '')
	order by b.dt_inicio_vigencia desc;

c02 CURSOR(	cd_edicao_amb_pc	preco_amb.cd_edicao_amb%type,
		cd_procedimento_pc	preco_amb.cd_procedimento%type,
		dt_inicio_vig_pc	preco_amb.dt_inicio_vigencia%type) FOR
	SELECT	b.dt_inicio_vigencia
	from	preco_amb b
	where	b.cd_edicao_amb = cd_edicao_amb_pc
	and	b.cd_procedimento = cd_procedimento_pc
	and	dt_inicio_vig_pc between b.dt_inicio_vigencia_ref and b.dt_fim_vigencia_ref
	order by b.dt_inicio_vigencia_ref desc;
BEGIN

-- tratamento criado para caso a tabela de preço tenha sido inativada
select	max(ie_situacao)
into STRICT	ie_situacao_w
from	edicao_amb
where	cd_edicao_amb = cd_edicao_amb_p;

if (ie_situacao_w	= 'A') then

	dt_guia_w := trunc(dt_guia_p, 'dd');

	-- obtém a data maxima de inico de vigência para a tabela amb
	-- a maior prioridade é para situações que tenham data de fim de vigência informada
	for r_c02_w in c02(cd_edicao_amb_p, cd_procedimento_p, dt_guia_w) loop

		-- retorna o primeiro que encontrar, foi invertido o order by para trazer primeiro o registro correto
		dt_inicio_vigencia_w := r_c02_w.dt_inicio_vigencia;

		-- sai do for e fecha o cursor
		exit;
	end loop;

	if (coalesce(dt_inicio_vigencia_w::text, '') = '') then

		for r_c01_w in c01(cd_edicao_amb_p, cd_procedimento_p) loop

			if (r_c01_w.dt_inicio_vigencia <= dt_guia_w and coalesce(r_c01_w.dt_final_vigencia::text, '') = '') then
				-- retorna o primeiro que encontrar, foi invertido o order by para trazer primeiro o registro correto
				dt_inicio_vigencia_w := r_c01_w.dt_inicio_vigencia;

				-- sai do for e fecha o cursor
				exit;
			end if;
		end loop;

		if (coalesce(dt_inicio_vigencia_w::text, '') = '') then

			select 	max(b.dt_inicio_vigencia)
			into STRICT	dt_inicio_vigencia_w
			from 	preco_amb b
			where	b.cd_edicao_amb = cd_edicao_amb_p
			and	coalesce(b.dt_inicio_vigencia::text, '') = ''
			and	coalesce(b.dt_final_vigencia::text, '') = ''
			and	b.cd_procedimento = cd_procedimento_p;
		end if;
	end if;

	-- obter os valores da tabela AMB
	begin
		if (coalesce(dt_inicio_vigencia_w::text, '') = '') then

			select	coalesce(vl_procedimento,0),
				coalesce(a.vl_custo_operacional,0),
				coalesce(a.vl_medico,0),
				coalesce((a.qt_filme * coalesce(vl_filme_p,0)),0),
				a.qt_porte_anestesico,
				coalesce(a.vl_anestesista,0),
				coalesce(a.nr_auxiliares,0),
				coalesce(a.vl_auxiliares,0),
				coalesce(a.qt_filme,0)
			into STRICT	val_tab_amb_w.vl_procedimento,
				val_tab_amb_w.vl_custo_operacional,
				val_tab_amb_w.vl_medico,
				val_tab_amb_w.vl_filme,
				val_tab_amb_w.nr_porte_anestesico,
				val_tab_amb_w.vl_anestesista,
				val_tab_amb_w.nr_auxiliares,
				val_tab_amb_w.vl_auxiliares_amb,
				val_tab_amb_w.qt_filme
			from	preco_amb a
			where	a.cd_edicao_amb = cd_edicao_amb_p
			and	a.cd_procedimento = cd_procedimento_p
			and	coalesce(a.dt_inicio_vigencia::text, '') = '';

		else
			select	coalesce(vl_procedimento,0),
				coalesce(a.vl_custo_operacional,0),
				coalesce(a.vl_medico,0),
				coalesce((a.qt_filme * coalesce(vl_filme_p,0)),0),
				a.qt_porte_anestesico,
				coalesce(a.vl_anestesista,0),
				coalesce(a.nr_auxiliares,0),
				coalesce(a.vl_auxiliares,0),
				coalesce(a.qt_filme,0)
			into STRICT	val_tab_amb_w.vl_procedimento,
				val_tab_amb_w.vl_custo_operacional,
				val_tab_amb_w.vl_medico,
				val_tab_amb_w.vl_filme,
				val_tab_amb_w.nr_porte_anestesico,
				val_tab_amb_w.vl_anestesista,
				val_tab_amb_w.nr_auxiliares,
				val_tab_amb_w.vl_auxiliares_amb,
				val_tab_amb_w.qt_filme
			from	preco_amb a
			where	a.cd_edicao_amb = cd_edicao_amb_p
			and	a.dt_inicio_vigencia = dt_inicio_vigencia_w
			and	a.cd_procedimento = cd_procedimento_p;
		end if;
	exception
		when others then
			begin
			val_tab_amb_w.vl_procedimento 		:= 0;
			val_tab_amb_w.vl_custo_operacional	:= 0;
			val_tab_amb_w.vl_medico			:= 0;
			val_tab_amb_w.vl_filme			:= 0;
			val_tab_amb_w.nr_porte_anestesico	:= null;
			val_tab_amb_w.vl_anestesista		:= 0;
			val_tab_amb_w.nr_auxiliares		:= 0;
			val_tab_amb_w.vl_auxiliares_amb		:= 0;
			end;
	end;
else
	val_tab_amb_w.vl_procedimento 		:= 0;
	val_tab_amb_w.vl_custo_operacional	:= 0;
	val_tab_amb_w.vl_medico			:= 0;
	val_tab_amb_w.vl_filme			:= 0;
	val_tab_amb_w.nr_porte_anestesico	:= null;
	val_tab_amb_w.vl_anestesista		:= 0;
	val_tab_amb_w.nr_auxiliares		:= 0;
	val_tab_amb_w.vl_auxiliares_amb		:= 0;

end if;

return	val_tab_amb_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 IMMUTABLE;
-- REVOKE ALL ON FUNCTION pls_obter_val_tab_amb ( cd_edicao_amb_p preco_amb.cd_edicao_amb%type, dt_guia_p timestamp, cd_procedimento_p preco_amb.cd_procedimento%type, vl_filme_p pls_regra_preco_proc.vl_filme%type) FROM PUBLIC;

