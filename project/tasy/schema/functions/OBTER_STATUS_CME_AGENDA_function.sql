-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_status_cme_agenda ( nr_seq_agenda_p bigint, nr_seq_conjunto_p bigint, ie_codigo_p text) RETURNS varchar AS $body$
DECLARE


qt_agenda_per_w			bigint;
qt_tempo_esterilizacao_w	bigint	:= 0;
dt_inicial_w			timestamp;
dt_final_w			timestamp;
qt_conj_agenda_w		bigint;
qt_conj_agenda_exec_w		bigint;
ie_codigo_w			varchar(15)	:='D';
qt_tempo_w 			bigint	:= null;
nr_seq_conjunto_w		bigint;
qt_consiste_agenda_w		bigint;
cd_estab_agenda_w		smallint;
cd_estabelecimento_w		smallint;
cd_estabelecimento_cme_w	smallint;
nr_seq_agenda_w			agenda_paciente.nr_sequencia%type;
qt_tempo_transporte_w		bigint;
nr_seq_agenda_C_E_w			agenda_paciente.nr_sequencia%type;
nr_seq_agenda_I_w			agenda_paciente.nr_sequencia%type;
expressao1_w                varchar(255);
expressao2_w                varchar(255);
expressao3_w                varchar(255);


BEGIN

expressao1_w := obter_desc_expressao_idioma(303785, null, wheb_usuario_pck.get_nr_seq_idioma);--Disponivel
expressao2_w := obter_desc_expressao_idioma(495852, null, wheb_usuario_pck.get_nr_seq_idioma);--Emprestado
expressao3_w := obter_desc_expressao_idioma(495853, null, wheb_usuario_pck.get_nr_seq_idioma);--Indisponivel
qt_tempo_transporte_w := Obter_Param_Usuario(871, 484, wheb_usuario_pck.get_cd_perfil, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, qt_tempo_transporte_w);

nr_seq_conjunto_w := nr_seq_conjunto_p;

if (coalesce(nr_seq_agenda_p,0) > 0) then
	select	coalesce(max(b.cd_estabelecimento),0)
	into STRICT	cd_estab_agenda_w
	from	agenda_paciente a,
		agenda b
	where	a.cd_agenda 	= b.cd_agenda
	and	a.nr_sequencia 	= nr_seq_agenda_p;

	select	coalesce(max(qt_consiste_agenda), 0),
		max(cd_estabelecimento),
		coalesce(max(qt_tempo_esterelizacao),0)
	into STRICT	qt_consiste_agenda_w,
		cd_estabelecimento_cme_w,
		qt_tempo_esterilizacao_w
	from	cm_conjunto
	where	nr_sequencia		= nr_seq_conjunto_w;

	if (cd_estabelecimento_cme_w = cd_estab_agenda_w) then
		qt_tempo_transporte_w := 0;
	end if;	

	select	a.hr_inicio - (qt_tempo_transporte_w/24),
		CASE WHEN a.ie_status_agenda='E' THEN  (a.hr_inicio + (qt_tempo_esterilizacao_w / 1440) - (1/86400))  ELSE (a.hr_inicio + ((coalesce(qt_tempo_w,a.nr_minuto_duracao) + coalesce(qt_tempo_esterilizacao_w,0)) / 1440) - (1/86400)) END  + (qt_tempo_transporte_w/24)
	into STRICT	dt_inicial_w,
		dt_final_w
	from	agenda_paciente a,
		agenda b
	where	a.cd_agenda 	= b.cd_agenda
	and	a.nr_sequencia	= nr_seq_agenda_p;

	--Obter qtde de agendamentos que foram executadas no periodo - neste so e contado o tempo de esterilizacao e nao considera mais o tempo de duracao pois o mesmo ja foi realizado 
	select 	coalesce(max(b.nr_sequencia),0) nr_seq_agenda,
			count(*) 
	into STRICT	nr_seq_agenda_I_w, 
			qt_conj_agenda_exec_w
	from	agenda_pac_cme a,
		agenda_paciente b 
	where	b.nr_sequencia = a.nr_seq_agenda 
	and	((hr_inicio between dt_inicial_w and dt_final_w) or  
		(hr_inicio + (qt_tempo_esterilizacao_w / 1440) - (1/86400) between dt_inicial_w and dt_final_w) or
		((hr_inicio < dt_inicial_w) and (hr_inicio + (qt_tempo_esterilizacao_w / 1440) - (1/86400) > dt_final_w)))
	and	a.nr_seq_conjunto = nr_seq_conjunto_w
	and	b.ie_status_agenda = 'E'
	and	a.ie_origem_inf = 'I';
		
	--Obter qtde de agendamentos que nao foram executados e/ou cancelados no periodo 	
	select 	coalesce(max(b.nr_sequencia),0) nr_seq_agenda,
			count(*) 
	into STRICT	nr_seq_agenda_C_E_w, 
			qt_conj_agenda_w
	from	agenda_pac_cme a,
		agenda_paciente b 
	where	b.nr_sequencia = a.nr_seq_agenda 
	and	((hr_inicio between dt_inicial_w and dt_final_w) or  
		(hr_inicio + ((nr_minuto_duracao + coalesce(qt_tempo_esterilizacao_w,0)) / 1440) - (1/86400) between dt_inicial_w and dt_final_w) or
		((hr_inicio < dt_inicial_w) and (hr_inicio + ((nr_minuto_duracao + coalesce(qt_tempo_esterilizacao_w,0)) / 1440) - (1/86400) > dt_final_w)))
	and	a.nr_seq_conjunto = nr_seq_conjunto_w
	and	b.ie_status_agenda not in ('C','E')
	and	a.ie_origem_inf = 'I';

	--Somado todos os agendamentos 
	qt_conj_agenda_w	:= qt_conj_agenda_exec_w + qt_conj_agenda_w;

	if (qt_conj_agenda_w > 0) then
		-- Obter o ultimo agendamento executado - Obter o ultimo agendamento desconsiderando os executados e os cancelados 			
		qt_agenda_per_w := GREATEST(coalesce(qt_conj_agenda_exec_w,0), coalesce(qt_conj_agenda_w,0));
		nr_seq_agenda_w := GREATEST(coalesce(nr_seq_agenda_C_E_w,0), coalesce(nr_seq_agenda_I_w,0));

		if (qt_agenda_per_w >= qt_consiste_agenda_w) then
			select	coalesce(max(b.cd_estabelecimento),0)
			into STRICT	cd_estabelecimento_w
			from	agenda_paciente a,
				agenda b
			where	a.cd_agenda 	= b.cd_agenda
			and	a.nr_sequencia 	= nr_seq_agenda_w;
			if (cd_estabelecimento_w > 0) and (cd_estabelecimento_w <> cd_estab_agenda_w) then
				ie_codigo_w	:= 'E';	
			else
				ie_codigo_w	:= 'I';
			end if;	
		end if;	
	end if;
end if;

if (ie_codigo_p = 'S') then
	return	ie_codigo_w;
elsif (ie_codigo_w = 'D') then
	return 	expressao1_w;
elsif (ie_codigo_w = 'E') then	
	return 	expressao2_w;
elsif (ie_codigo_w = 'I') then	
	return 	expressao3_w;
end if;	

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_status_cme_agenda ( nr_seq_agenda_p bigint, nr_seq_conjunto_p bigint, ie_codigo_p text) FROM PUBLIC;

