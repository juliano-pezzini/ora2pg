-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_prest_princ_ate_cta ( nr_seq_conta_p pls_conta.nr_sequencia%type, ie_opcao_p text ) RETURNS varchar AS $body$
DECLARE

					 
-- ESTA ROTINA DEVE RETORNAR O PRESTADOR PRINCIPAL DO ATENDIMENTO DA CONTA MÉDICA 
-- Variavel de retorno 
ds_retorno_w				varchar(4000) := null;

-- Dados do prestador 
cd_pessoa_fisica_w			pls_prestador.cd_pessoa_fisica%type;
cd_prestador_w				pls_prestador.cd_prestador%type;

 
-- Dados da conta 
nr_seq_prestador_exec_w			pls_conta.nr_seq_prestador_exec%type;
nr_seq_guia_w				pls_guia_plano.nr_sequencia%type;
nr_seq_conta_princ_w			pls_conta.nr_seq_conta_princ%type;
cd_medico_executor_w			pls_conta.cd_medico_executor%type;
nr_seq_prestador_inter_w		pls_conta.nr_seq_prest_inter%type;
nr_cpf_inter_w				pls_prestador_intercambio.nr_cpf%type;
cd_cgc_w				pls_conta.cd_cgc%type;

-- Dados da guia 
nr_seq_prestador_guia_w			pls_guia_plano.nr_seq_prestador%type;

-- Dados do protocolo 
ie_tipo_protocolo_w			pls_protocolo_conta.ie_tipo_protocolo%type;


BEGIN 
if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then 
	-- Obter dados da conta 
	select	max(c.nr_seq_prestador_exec), 
		max(c.nr_seq_guia), 
		max(c.nr_seq_conta_princ), 
		max(t.cd_pessoa_fisica), 
		max(t.cd_prestador), 
		max(coalesce(p.ie_tipo_protocolo,'C')), 
		max(c.nr_seq_prest_inter) 
	into STRICT	nr_seq_prestador_exec_w, 
		nr_seq_guia_w, 
		nr_seq_conta_princ_w, 
		cd_pessoa_fisica_w, 
		cd_prestador_w, 
		ie_tipo_protocolo_w, 
		nr_seq_prestador_inter_w 
	FROM pls_conta c
LEFT OUTER JOIN pls_prestador t ON (c.nr_seq_prestador_exec = t.nr_sequencia)
LEFT OUTER JOIN pls_protocolo_conta p ON (c.nr_seq_protocolo = p.nr_sequencia)
WHERE c.nr_sequencia		= nr_seq_conta_p;
 
	--Em casos de reembolso, a verificação do prestador principal acontecerá de forma diferente 
	-- Se não for reembolso 
	if (ie_tipo_protocolo_w != 'R') then 
 
		-- Se for prestador de intercambio, tem um tratamento especial 
		if (nr_seq_prestador_inter_w IS NOT NULL AND nr_seq_prestador_inter_w::text <> '') then 
 
			if (ie_opcao_p = 'DS') then 
 
				nr_cpf_inter_w := pls_obter_dados_prest_inter(nr_seq_prestador_inter_w, 'CPF');
 
				if (nr_cpf_inter_w IS NOT NULL AND nr_cpf_inter_w::text <> '') then 
 
					ds_retorno_w := pls_obter_dados_prest_inter(nr_seq_prestador_inter_w, 'N') || ' - CPF: ' || nr_cpf_inter_w;
				else 
 
					ds_retorno_w := pls_obter_dados_prest_inter(nr_seq_prestador_inter_w, 'N');
				end if;
 
 
			elsif (ie_opcao_p = 'NM') then 
 
				ds_retorno_w := pls_obter_dados_prest_inter(nr_seq_prestador_inter_w, 'N');
				 
			elsif (ie_opcao_p = 'END') then 
			 
				ds_retorno_w := pls_obter_dados_prest_inter(nr_seq_prestador_inter_w, 'MC');
			end if;
 
		end if; -- Fim prestador de intercambio 
 
		-- se não for prestadro de intercambio 
		if (coalesce(nr_seq_prestador_inter_w::text, '') = '') then
			-- Obter prestador da guia 
			if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then 
				select	max(g.nr_seq_prestador), 
					max(t.cd_pessoa_fisica), 
					max(t.cd_prestador) 
				into STRICT	nr_seq_prestador_guia_w, 
					cd_pessoa_fisica_w, 
					cd_prestador_w 
				from	pls_guia_plano	g, 
					pls_prestador	t 
				where	t.nr_sequencia	= g.nr_seq_prestador 
				and	g.nr_sequencia	= nr_seq_guia_w;
			end if;
 
			-- Prioridade para o prestador da guia 
			if (nr_seq_prestador_guia_w IS NOT NULL AND nr_seq_prestador_guia_w::text <> '') then 
				nr_seq_prestador_exec_w := nr_seq_prestador_guia_w;
			end if;
 
			-- Caso não tenha prestador na guia e na conta médica, e tenha conta principal 
			if (coalesce(nr_seq_prestador_exec_w::text, '') = '') and (nr_seq_conta_princ_w != nr_seq_conta_p) then 
				-- Obter dados da conta principal 
				select	max(c.nr_seq_prestador_exec), 
					max(t.cd_pessoa_fisica), 
					max(t.cd_prestador) 
				into STRICT	nr_seq_prestador_exec_w, 
					cd_pessoa_fisica_w, 
					cd_prestador_w 
				from	pls_conta	c, 
					pls_prestador	t 
				where	t.nr_sequencia	= c.nr_seq_prestador_exec 
				and	c.nr_sequencia	= nr_seq_conta_princ_w;
			end if;
 
			if (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then 
				if (ie_opcao_p = 'DS') then -- Caso PF, irá retornar "Nome prestador - CPF: 0000", se PJ, irá retornar "Descrição - Nome fantasia" 
					if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then 
						ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'N') ||' - CPF: '||pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'CPF');
					else 
						ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'DS') ||' - '||pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'NF');
					end if;
 
				elsif (ie_opcao_p = 'NM') then -- Caso PF, "Nome prestador", se PJ, "Descriação prestador" 
					if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then 
						ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'N');
					else 
						ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'DS');
					end if;
 
				elsif (ie_opcao_p = 'NR') then -- Sequencia do prestador 
					ds_retorno_w	:= nr_seq_prestador_exec_w;
 
				elsif (ie_opcao_p = 'CD') then -- Código do prestador 
					ds_retorno_w	:= cd_prestador_w;
					 
				elsif (ie_opcao_p = 'END') then -- Endereço 
				 
					ds_retorno_w := substr(pls_obter_end_prestador(nr_seq_prestador_exec_w,null, null),1,255);
				end if;
			end if;
		end if; -- Fim se não for prestador de intercambio 
	else
		-- Quando é reembolso, só é necessário olhar o prestador exec, e se não tiver, usar o medico exec 
		select	max(a.nr_seq_prestador_exec), 
			max(a.cd_medico_executor), 
			max(a.cd_cgc) 
		into STRICT	nr_seq_prestador_exec_w, 
			cd_medico_executor_w, 
			cd_cgc_w 
		from	pls_conta	a 
		where	a.nr_sequencia	= nr_seq_conta_p;
 
		-- se tiver o prestador executor informado 
		if (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then 
 
			select	max(a.cd_pessoa_fisica), 
				max(a.cd_prestador) 
			into STRICT	cd_pessoa_fisica_w, 
				cd_prestador_w 
			from	pls_prestador	a 
			where	a.nr_sequencia	= nr_seq_prestador_exec_w;
 
		else 
			-- Usa o medico executor; 
			cd_pessoa_fisica_w	:= cd_medico_executor_w;
			cd_prestador_w		:= cd_medico_executor_w;
		end if; -- pegando dados da pessoa fisica 
 
		if (ie_opcao_p = 'DS') then -- Caso PF, irá retornar "Nome prestador - CPF: 0000", se PJ, irá retornar "Descrição - Nome fantasia" 
 
			-- se tiver prestador executor 
			if (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then 
 
				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then 
					ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'N') ||' - CPF: '||pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'CPF');
				else 
					ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'DS') ||' - '||pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'NF');
				end if;
 
			elsif (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then 
			 
				ds_retorno_w	:= pls_obter_dados_medico(cd_pessoa_fisica_w, 'NM') || ' - CPF: ' || pls_obter_dados_medico(cd_pessoa_fisica_w, 'CPF');
			 
			-- se foi informado apenas o PJ na conta 
			elsif (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then 
			 
				select	max(a.ds_razao_social) || ' - ' || max(a.nm_fantasia) 
				into STRICT	ds_retorno_w 
				from	pessoa_juridica	a 
				where	cd_cgc		= cd_cgc_w;
				 
			end if; -- Prestador executor 
		elsif (ie_opcao_p = 'NM') then -- Caso PF, "Nome prestador", se PJ, "Descriação prestador" 
 
			if (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then 
 
				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then 
					ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'N');
				else 
					ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'DS');
				end if;
			elsif (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then 
			 
				ds_retorno_w	:= pls_obter_dados_medico(cd_pessoa_fisica_w, 'NM');
			 
			elsif (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then 
			 
				select	max(a.ds_razao_social) || ' - ' || max(a.nm_fantasia) 
				into STRICT	ds_retorno_w 
				from	pessoa_juridica	a 
				where	cd_cgc		= cd_cgc_w;
			end if;
 
		elsif (ie_opcao_p = 'NR') then -- Sequencia do prestador 
 
			if (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then 
 
				ds_retorno_w	:= nr_seq_prestador_exec_w;
			else 
 
				ds_retorno_w	:= cd_pessoa_fisica_w;
			end if;
 
		elsif (ie_opcao_p = 'CD') then -- Código do prestador 
 
			if (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then 
 
				ds_retorno_w	:= cd_prestador_w;
			else 
 
				ds_retorno_w	:= cd_pessoa_fisica_w;
			end if;
			 
		elsif (ie_opcao_p = 'END') then -- endereço 
		 
			if (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then 
			 
				ds_retorno_w := substr(pls_obter_end_prestador(nr_seq_prestador_exec_w,null, null),1,255);
				 
			elsif (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then 
				 
				ds_retorno_w := substr(obter_dados_pf_pj(cd_pessoa_fisica_w, null, 'EC'), 1, 255);
				 
			elsif (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then 
			 
				select	max(b.ds_municipio) || ' - ' || max(b.ds_unidade_federacao) 
				into STRICT	ds_retorno_w 
				from	pessoa_juridica		a, 
					sus_municipio		b 
				where	b.cd_municipio_ibge	= a.cd_municipio_ibge 
				and	a.cd_cgc		= cd_cgc_w;
			end if;
			 
		end if; -- Opções 
 
	end if; -- Separação se for reembolso ou não. 
end if;
 
return	ds_retorno_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_prest_princ_ate_cta ( nr_seq_conta_p pls_conta.nr_sequencia%type, ie_opcao_p text ) FROM PUBLIC;

