-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION verify_has_item_pepa_released (nr_seq_atend_cons_pepa_p bigint) RETURNS varchar AS $body$
DECLARE

    array_tabelas_w STRARRAY := STRARRAY();
    count_register_w bigint := 0;
    ds_tipo_item_w varchar(20);
    nr_sequencia_item_w ehr_registro.nr_sequencia%type;
    nr_node_schematic_pepa_w prontuario_item.nr_node_schematic_pepa%type;

c01 CURSOR FOR SELECT
        a.nr_seq_template AS NR_SEQUENCIA,
        'TEMPLATE' AS DS_TIPO
    FROM 
        EHR_TIPO_REG_ITEM a,
        ATEND_CONSULTA_PEPA b
    WHERE 1=1
        AND a.nr_seq_tipo_reg = b.NR_SEQ_TIPO_CONSULTA
        AND b.nr_sequencia = nr_seq_atend_cons_pepa_p
        AND (a.nr_seq_template IS NOT NULL AND a.nr_seq_template::text <> '')
    
UNION

    SELECT
        a.NR_SEQ_ITEM_PEP AS NR_SEQUENCIA, 
        'ITEM_PEPA' AS DS_TIPO
    FROM 
        EHR_TIPO_REG_ITEM a,
        ATEND_CONSULTA_PEPA b
    WHERE 1=1
        AND a.nr_seq_tipo_reg = b.NR_SEQ_TIPO_CONSULTA
        AND b.nr_sequencia = nr_seq_atend_cons_pepa_p
        AND (a.NR_SEQ_ITEM_PEP IS NOT NULL AND a.NR_SEQ_ITEM_PEP::text <> '');


c02 CURSOR(nr_sequencia_item_p bigint) FOR(SELECT
        nr_sequencia
    FROM 
        ehr_registro
    WHERE 1=1 
        AND nr_seq_atend_cons_pepa = nr_seq_atend_cons_pepa_p
        AND nr_seq_templ = nr_sequencia_item_p
        AND (dt_liberacao IS NOT NULL AND dt_liberacao::text <> ''));

c03 CURSOR(nr_sequencia_item_p bigint) FOR(SELECT
        nr_node_schematic_pepa
    FROM 
        prontuario_item 
    WHERE 1=1
        AND nr_sequencia = nr_sequencia_item_p);


FUNCTION TO_STRING(str text) RETURN text IS;
BEGIN
    return chr(39) || str || chr(39);
END;

FUNCTION VERIFY_HAS_ATTR(nm_tabela_p varchar2, nm_atributo_p varchar2) RETURN varchar2 IS
  sql_stmt varchar2( 1000 ) := null;
  count_table number := 0;
BEGIN
  sql_stmt := 'SELECT COUNT(1) FROM tabela_atributo attr1 INNER JOIN  tabela_atributo attr2 ON attr1.nm_tabela = attr2.nm_tabela AND attr2.nm_atributo = '|| TO_STRING(nm_atributo_p) ||' WHERE 1=1 AND attr1.nm_tabela = '|| TO_STRING(nm_tabela_p);
  EXECUTE sql_stmt into STRICT count_table;
  if (count_table > 0) then
      return 'S';
  end if;

  return 'N';
END;


FUNCTION COUNT_REGISTER(nm_tabela_p varchar2) RETURN number IS
    sql_stmt varchar2( 1000 ) := null;
    count_table number := 0;
BEGIN
    if (VERIFY_HAS_ATTR(nm_tabela_p, 'DT_LIBERACAO') = 'S') then
        sql_stmt := 'SELECT COUNT(1) FROM '|| nm_tabela_p ||' WHERE 1=1 AND DT_LIBERACAO IS NOT NULL AND NR_SEQ_ATEND_CONS_PEPA = '|| nr_seq_atend_cons_pepa_p;
        EXECUTE sql_stmt into STRICT count_table;
    end if;
    return count_table;
END;

PROCEDURE EXECUTE_ACTION_PER_ITEM(array_tabelas_p STRARRAY) IS
count_reg_table number := 0;
BEGIN
  for i in 1..array_tabelas_p.count loop
    begin
      if (VERIFY_HAS_ATTR(array_tabelas_p(i), 'NR_SEQ_ATEND_CONS_PEPA') = 'S') then
        count_reg_table := COUNT_REGISTER(array_tabelas_p(i));
        if (count_reg_table > 0) then
          count_register_w := count_register_w + count_reg_table;
        end if;
      end if;
    end;
  end loop;
END;

begin
open c01;
	loop
	fetch c01 into nr_sequencia_item_w, ds_tipo_item_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
      if (ds_tipo_item_w = 'ITEM_PEPA') then
          open c03(nr_sequencia_item_w);
              loop
                  fetch c03 into nr_node_schematic_pepa_w;
                  EXIT WHEN NOT FOUND; /* apply on c03 */
                      begin
                        EXECUTE_ACTION_PER_ITEM(GET_TABLE_NAMES_BY_NODE_PEPA(nr_node_schematic_pepa_w));
                      end;
              end loop;
          close c03;

      elsif ( ds_tipo_item_w = 'TEMPLATE') then
          open c02(nr_sequencia_item_w);
              loop
              fetch c02 into nr_sequencia_item_w;
              EXIT WHEN NOT FOUND; /* apply on c02 */
                  begin
                      count_register_w := count_register_w + 1;
                  end;
              end loop;
          close c02;

      end if;
    end;
	end loop;
	close c01;

    if (count_register_w > 0) then
        return 'S';
    end if;

    return 'N';

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION verify_has_item_pepa_released (nr_seq_atend_cons_pepa_p bigint) FROM PUBLIC;

