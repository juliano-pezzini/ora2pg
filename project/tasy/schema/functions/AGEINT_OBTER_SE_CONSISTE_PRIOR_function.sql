-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION ageint_obter_se_consiste_prior ( nr_seq_item_p bigint, nr_seq_ageint_p bigint, dt_agenda_p timestamp, ie_transferencia_p text, cd_estabelecimento_p bigint) RETURNS varchar AS $body$
DECLARE


ds_retorno_w		varchar(1)	:= 'N';
qt_marcacao_post_w	bigint;
qt_marcacao_ant_w	bigint;
nr_seq_prioridade_w	bigint;
nr_prioridade_ant_w	bigint;
nr_prioridade_post_w	bigint;
ds_erro_w		varchar(255)	:= '';
nr_seq_proc_interno_w	bigint;
nr_seq_grupo_selec_w	bigint;
ds_proc_interno_marc_w	varchar(100);
nr_seq_proc_interno_cursor_w   bigint;
ds_proc_interno_w	varchar(100);
qt_dias_consistencia_w	bigint;
cd_especialidade_w		agenda_integrada_item.cd_especialidade%type;
ie_tipo_agendamento_w	agenda_integrada_item.ie_tipo_agendamento%type;
cd_item_w				bigint;

C01 CURSOR FOR
	SELECT	Ageint_Obter_Prioridade(a.nr_seq_Ageint, b.nr_seq_proc_interno, cd_estabelecimento_p, b.nr_seq_grupo_selec, b.nr_sequencia),
			coalesce(b.nr_seq_proc_interno,b.cd_especialidade),
			b.ie_tipo_agendamento
	from	ageint_marcacao_usuario a,
			agenda_integrada_item b
	where	a.nr_seq_ageint		= nr_seq_ageint_p
	and	a.nr_seq_ageint_item	= b.nr_sequencia
	and	((b.nr_seq_proc_interno	<> nr_seq_proc_interno_w)
	or (b.CD_ESPECIALIDADE <> CD_ESPECIALIDADE_w))
	--and	b.nr_seq_proc_interno is not null 
	and	a.hr_Agenda		< dt_agenda_p - qt_dias_consistencia_w
	--and     a.hr_Agenda             between trunc(dt_agenda_p - qt_dias_consistencia_w) and trunc(dt_agenda_p) + 86399/86400
	and	ds_retorno_w		= 'N'
	and	((coalesce(a.ie_gerado,'N')	= 'N'
	and	ie_transferencia_p	= 'S')
	or	ie_transferencia_p	= 'N');
	
C02 CURSOR FOR
	SELECT	Ageint_Obter_Prioridade(a.nr_seq_Ageint, b.nr_seq_proc_interno, cd_estabelecimento_p, b.nr_seq_grupo_selec, b.nr_sequencia),
			coalesce(b.nr_seq_proc_interno,b.cd_especialidade),
			b.ie_tipo_agendamento
	from	ageint_marcacao_usuario a,
			agenda_integrada_item b
	where	a.nr_seq_ageint		= nr_seq_ageint_p
	and	a.nr_seq_ageint_item	= b.nr_sequencia
	and	((b.nr_seq_proc_interno	<> nr_seq_proc_interno_w)
	or (b.CD_ESPECIALIDADE <> CD_ESPECIALIDADE_w))
	--and	b.nr_seq_proc_interno is not null
	--and     a.hr_Agenda             between trunc(dt_agenda_p) and trunc(dt_agenda_p + qt_dias_consistencia_w) + 86399/86400
	and	a.hr_Agenda		> dt_agenda_p + qt_dias_consistencia_w
	and	ds_retorno_w		= 'N'
	and	((coalesce(a.ie_gerado,'N')	= 'N'
	and	ie_transferencia_p	= 'S')
	or	ie_transferencia_p	= 'N');
	
	function obter_desc_item(ie_tipo_agendamento_p	text,
							 cod_item_p bigint)
						return text is
	ds_proc_especialidade_w 	varchar(100);
	
BEGIN
		if (ie_tipo_agendamento_p) = 'C' then
			select 	max(ds_especialidade)
			into STRICT	ds_proc_especialidade_w
			from	especialidade_medica
			where	cd_especialidade = cod_item_p;
		else
			select	max(ds_proc_exame)
			into STRICT	ds_proc_especialidade_w
			from	proc_interno
			where	nr_sequencia  = cod_item_p;
		end if;
		
		return ds_proc_especialidade_w;
	end;
							
			
begin

qt_dias_consistencia_w := obter_param_usuario(869, 305, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, cd_estabelecimento_p, qt_dias_consistencia_w);

select	coalesce(nr_seq_proc_interno,0),
		nr_seq_grupo_selec,
		coalesce(cd_especialidade,0),
		coalesce(coalesce(nr_seq_proc_interno,cd_especialidade),0),
		ie_tipo_agendamento
into STRICT	nr_seq_proc_interno_w,
		nr_seq_grupo_selec_w,
		cd_especialidade_w,
		cd_item_w,
		ie_tipo_agendamento_w
from	agenda_integrada_item
where	nr_sequencia	= nr_seq_item_p;


if (nr_seq_proc_interno_w	> 0) or (cd_especialidade_w > 0) then
	nr_seq_prioridade_w	:= Ageint_Obter_Prioridade(nr_seq_Ageint_p, nr_seq_proc_interno_w, cd_estabelecimento_p, nr_seq_grupo_selec_w,nr_seq_item_p);
	
	ds_proc_interno_marc_w := obter_desc_item(ie_tipo_agendamento_w,cd_item_w);

	
	if (nr_seq_prioridade_w	<> 999) then
		open C01;
		loop
		fetch C01 into	
			nr_prioridade_ant_w,
			nr_seq_proc_interno_cursor_w,
			ie_tipo_agendamento_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			if (nr_prioridade_ant_w	<> 999) and (nr_prioridade_ant_w	> nr_seq_prioridade_w) then
				
				ds_proc_interno_w := obter_desc_item(ie_tipo_agendamento_w,nr_seq_proc_interno_cursor_w);
				
				ds_retorno_w	:= 'S';
				--ds_erro_w	:= 'O exame selecionado tem que ser agendado apos a selecao do exame com prioridade maxima.';
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(797030,
										'DS_PROC_INTERNO_MARC='||ds_proc_interno_marc_w||
										';DS_PROC_INTERNO='||ds_proc_interno_w),1,255);
			end if;
			end;
		end loop;
		close C01;

		open C02;
		loop
		fetch C02 into	
			nr_prioridade_post_w,
			nr_seq_proc_interno_cursor_w,
			ie_tipo_agendamento_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			if (nr_prioridade_post_w	<> 999) and (nr_prioridade_post_w	< nr_seq_prioridade_w) then
				
				ds_proc_interno_w := obter_desc_item(ie_tipo_agendamento_w,nr_seq_proc_interno_cursor_w);
				
				ds_retorno_w	:= 'S';
				--ds_erro_w	:= 'O exame selecionado tem que ser agendado apos a selecao do exame com prioridade maxima.';
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(797031,
										'DS_PROC_INTERNO_MARC='||ds_proc_interno_marc_w||
										';DS_PROC_INTERNO='||ds_proc_interno_w),1,255);
			end if;
			end;
		end loop;
		close C02;
	end if;
end if;

return	ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION ageint_obter_se_consiste_prior ( nr_seq_item_p bigint, nr_seq_ageint_p bigint, dt_agenda_p timestamp, ie_transferencia_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

