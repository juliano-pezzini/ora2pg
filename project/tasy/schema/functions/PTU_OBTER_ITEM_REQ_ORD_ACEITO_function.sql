-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION ptu_obter_item_req_ord_aceito ( cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, nr_seq_material_p pls_material.nr_sequencia%type, cd_operadora_benef_p pls_congenere.cd_cooperativa%type) RETURNS varchar AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Verificar se a operadora está apta a executar os procedimentos solicitados através de uma ordem de serviço 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: Performance. 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
ie_retorno_w		varchar(1)	:= 'N';
qt_registro_w		integer;
cd_area_w		area_procedimento.cd_area_procedimento%type;
cd_especialidade_w	especialidade_proc.cd_especialidade%type;
cd_grupo_w		grupo_proc.cd_grupo_proc%type;
ie_origem_w		procedimento.ie_origem_proced%type;
nr_seq_estrut_mat_w	pls_estrutura_material.nr_sequencia%type;


BEGIN 
select	count(1) 
into STRICT	qt_registro_w 
from	pls_congenere 
where	(cd_cooperativa)::numeric 	= (cd_operadora_benef_p)::numeric  
and	ie_situacao_atend		= 'A' 
and	coalesce(dt_exclusao::text, '') = '';
 
if (qt_registro_w	> 0) then 
	if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '')	and (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '')then 
		SELECT * FROM pls_obter_estrut_proc(cd_procedimento_p, ie_origem_proced_p, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w;	
 
		select	count(1) 
		into STRICT	qt_registro_w 
		from	pls_prestador_proc 
		where	((coalesce(cd_area_procedimento::text, '') = '') or (cd_area_procedimento	= cd_area_w)) 
		and	((coalesce(cd_especialidade_proc::text, '') = '') or (cd_especialidade_proc 	= cd_especialidade_w)) 
		and	((coalesce(cd_grupo_proc::text, '') = '') or (cd_grupo_proc 		= cd_grupo_w)) 
		and	((cd_procedimento 	= cd_procedimento_p and ie_origem_proced = ie_origem_w) or (coalesce(cd_procedimento::text, '') = '' and coalesce(ie_origem_proced::text, '') = '')) 
		and (clock_timestamp()			>= dt_inicio_vigencia 	or coalesce(dt_inicio_vigencia::text, '') = '') 
		and	((clock_timestamp()		<= dt_fim_vigencia)	or (coalesce(dt_fim_vigencia::text, '') = '')) 
		and	((coalesce(nr_seq_grupo_serv::text, '') = '') or ('S' = pls_se_grupo_preco_servico(nr_seq_grupo_serv, cd_procedimento_p, ie_origem_w))) 
		and	ie_liberar		= 'S' 
		order by	 
			coalesce(cd_procedimento,-1), 
			coalesce(cd_grupo_proc,-1), 
			coalesce(cd_especialidade_proc,-1), 
			coalesce(cd_area_procedimento,-1);
 
		if (qt_registro_w	> 0) then 
			ie_retorno_w	:= 'S';
		end if;
	elsif (nr_seq_material_p IS NOT NULL AND nr_seq_material_p::text <> '') then 
		begin 
			select	a.nr_seq_estrut_mat 
			into STRICT	nr_seq_estrut_mat_w 
			from	pls_material	a 
			where	a.nr_sequencia	= nr_seq_material_p;
		exception 
		when others then 
			nr_seq_estrut_mat_w	:= 0;
		end;
 
		select	count(1) 
		into STRICT	qt_registro_w 
		from	pls_prestador_mat	a 
		where	((a.nr_seq_material	= nr_seq_material_p or coalesce(a.nr_seq_material::text, '') = '') 
		and (a.nr_seq_estrutura_mat	= nr_seq_estrut_mat_w	or coalesce(a.nr_seq_estrutura_mat::text, '') = '') 
		and	((exists (SELECT	1 
					from	pls_preco_grupo_material	x, 
						pls_preco_material		y 
					where	x.nr_sequencia		= y.nr_seq_grupo 
					and	x.ie_situacao		= 'A' 
					and	x.nr_sequencia		= a.nr_seq_grupo_material 
					and	y.nr_seq_material	= nr_seq_material_p)) 
		or (coalesce(a.nr_seq_grupo_material::text, '') = ''))) 
		and	((clock_timestamp()			>= a.dt_inicio_vigencia) 	or (coalesce(a.dt_inicio_vigencia::text, '') = '')) 
		and	((clock_timestamp()		<= a.dt_fim_vigencia)	or (coalesce(a.dt_fim_vigencia::text, '') = '')) 
		and	a.ie_liberar		= 'S' 
		order by 
			coalesce(a.nr_seq_material, -1), 
			coalesce(a.nr_seq_estrutura_mat, -1), 
			coalesce(a.nr_seq_grupo_material, 0);
			 
		if (qt_registro_w	> 0) then 
			ie_retorno_w	:= 'S';
		end if;
	end if;
end if;
 
return	ie_retorno_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION ptu_obter_item_req_ord_aceito ( cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, nr_seq_material_p pls_material.nr_sequencia%type, cd_operadora_benef_p pls_congenere.cd_cooperativa%type) FROM PUBLIC;

