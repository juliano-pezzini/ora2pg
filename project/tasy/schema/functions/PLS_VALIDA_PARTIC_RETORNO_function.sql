-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE dados_conta_p AS ( cd_medico	pls_proc_participante.cd_medico%type);
CREATE TYPE dados_conta_w AS (  cd_medico	pls_proc_participante.cd_medico%type);


CREATE OR REPLACE FUNCTION pls_valida_partic_retorno ( nr_seq_conta_p pls_conta.nr_sequencia%type,  --a conta que esta sendo digita por exemplo
 nr_seq_conta_w pls_conta.nr_sequencia%type,  --a conta que a regra de retonro encontrou
 nr_seq_segurado_p pls_conta.nr_seq_segurado%type, --da conta que a regra de retonro encontrou
 cd_procedimento_p pls_conta_proc.cd_procedimento%type, --da conta que a regra de retonro encontrou
 ie_origem_proced_p pls_conta_proc.ie_origem_proced%type, ---da conta que a regra de retonro encontrou
 nr_seq_prestador_p pls_conta.nr_seq_prestador_exec%type ) RETURNS varchar AS $body$
 --da conta que a regra de retonro encontrou
DECLARE

type	table_conta_p	is table of dados_conta_p index by integer;
type	table_conta_w	is table of dados_conta_w index by integer;

ds_retorno_w		varchar(1);
qt_partic_w		integer;
i			integer;
j			integer;
cd_medico_w		medico.cd_pessoa_fisica%type;
nr_seq_prest_exec_w	pls_conta.nr_seq_prestador_exec%type;
v_conta_p		table_conta_p;
v_conta_w		table_conta_w;
total_contap_w		integer;
total_contaw_w		integer;

C01 CURSOR(nr_seq_conta_ww	pls_conta.nr_sequencia%type	) FOR
	SELECT	c.cd_medico
	from	pls_conta a,
		pls_conta_proc b,
		pls_proc_participante c
	where	a.nr_sequencia 		= b.nr_seq_conta
	and	b.nr_sequencia 		= c.nr_seq_conta_proc
	and	a.nr_seq_segurado	= nr_seq_segurado_p
	and	b.cd_procedimento	= cd_procedimento_p
	and	b.ie_origem_proced	= ie_origem_proced_p
	and	a.nr_sequencia 		= nr_seq_conta_ww;
BEGIN
--inicializo as variaiveis;
ds_retorno_w	:= 'N';
qt_partic_w	:= 0;
total_contap_w	:= 0;
total_contaw_w	:= 0;
--alimenta os types
i := 1;
for r_c01_w in C01(nr_seq_conta_p) loop
begin
	v_conta_p[i].cd_medico := r_c01_w.cd_medico;
	i := i + 1;
end;
end loop;
--alimenta o array com os participantes da conta digitada
i := 1;
for r_c01_w in C01(nr_seq_conta_w) loop
begin
	v_conta_w[i].cd_medico := r_c01_w.cd_medico;
	i := i + 1;
end;
end loop;
total_contap_w := v_conta_p.count;
total_contaw_w := v_conta_w.count;

--se tiver participantes nas duas contas precisa vares os dois arrays
if (total_contap_w > 0) and (total_contaw_w > 0) then
	for i in 1.. total_contap_w loop
		begin
		  for j in 1.. total_contaw_w loop
		  	begin
		  	  if (v_conta_p[i].cd_medico = v_conta_w[j].cd_medico) then
				ds_retorno_w := 'S';
			  end if;
		  	end;
		  end loop;
		end;
	end loop;
--se a conta nova tiver participante, e a da regra não tiver, precisa comparar o executor da conta da regra com o participante da conta nova.
elsif ( total_contap_w > 0) and ( total_contaw_w = 0) then
	--pega o prestador executor da conta da regra
	begin
		select	c.cd_pessoa_fisica cd_medico
		into STRICT	cd_medico_w
		from	pessoa_fisica a,
			pls_prestador b,
			medico c
		where	a.cd_pessoa_fisica = b.cd_pessoa_fisica
		and	a.cd_pessoa_fisica = c.cd_pessoa_fisica
		and	b.nr_sequencia = nr_seq_prestador_p;
	exception
	when others then
		cd_medico_w := null;
	end;
	if (cd_medico_w IS NOT NULL AND cd_medico_w::text <> '') then
		for i in 1.. total_contap_w loop
			begin
				if ( cd_medico_w = v_conta_p[i].cd_medico) then
					ds_retorno_w := 'S';
				end if;
			end;
		end loop;
	end if;
--se a conta nova não tiver participante, e a da regra tiver, precisa comparar o executor da conta nova com o participante da conta  da regra
elsif ( total_contap_w = 0) and ( total_contaw_w > 0) then
	--pega o executor da conta nova
	begin
		select	nr_seq_prestador_exec
		into STRICT	nr_seq_prest_exec_w
		from	pls_conta
		where	nr_sequencia = nr_seq_conta_p;

	exception
	when others then
		nr_seq_prest_exec_w := null;
	end;

	if (nr_seq_prest_exec_w IS NOT NULL AND nr_seq_prest_exec_w::text <> '') then

		select	max(c.cd_pessoa_fisica) cd_medico
		into STRICT	cd_medico_w
		from	pessoa_fisica a,
			pls_prestador b,
			medico c
		where	a.cd_pessoa_fisica = b.cd_pessoa_fisica
		and	a.cd_pessoa_fisica = c.cd_pessoa_fisica
		and	b.nr_sequencia 	   = nr_seq_prest_exec_w;
	end if;

	if (cd_medico_w IS NOT NULL AND cd_medico_w::text <> '') then
		for i in 1.. total_contaw_w loop
			begin
				if (cd_medico_w = v_conta_w[i].cd_medico) then
					ds_retorno_w := 'S';
				end if;
			end;
		end loop;
	end if;
else
	--se ambos não tiverem participantes e entrou aqui é porque os executores são os mesmo e deve gerar
	ds_retorno_w := 'S';
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_valida_partic_retorno ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_w pls_conta.nr_sequencia%type, nr_seq_segurado_p pls_conta.nr_seq_segurado%type, cd_procedimento_p pls_conta_proc.cd_procedimento%type, ie_origem_proced_p pls_conta_proc.ie_origem_proced%type, nr_seq_prestador_p pls_conta.nr_seq_prestador_exec%type ) FROM PUBLIC;

