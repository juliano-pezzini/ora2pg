-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION consiste_regra_lanc_aut_pac ( nr_atendimento_p bigint, nr_interno_conta_p bigint, cd_item_p bigint, ie_origem_proced_p bigint, ie_consiste_item_p text, ie_consiste_proc_int_p text, nr_seq_proc_interno_p text, dt_item_p timestamp, nr_seq_regra_p bigint, nr_seq_acao_regra_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, cd_medico_executor_p text, nr_cirurgia_p bigint, cd_setor_atendimento_p bigint) RETURNS varchar AS $body$
DECLARE


ds_retorno_w		varchar(1)	:= 'S';
qt_registros_w		bigint	:= 0;
qt_permitido_w		bigint	:= 0;
dt_hora_inicial_w		timestamp;
dt_hora_final_w		timestamp;
cd_pessoa_fisica_w	varchar(10);

hr_inicial_w		varchar(15);
hr_final_w		varchar(15);
dt_item_w		varchar(15);
dt_item_ww		timestamp;
cd_especialidade_w  medico_especialidade.cd_especialidade%TYPE;

c01 CURSOR FOR
	SELECT	qt_permitido,
		to_char(hr_inicial,'hh24:mi'),
		to_char(hr_final,'hh24:mi')
	from	regra_turno_lanc_aut
	where	nr_seq_lanc	= nr_seq_regra_p
	and	nr_seq_regra	= nr_seq_acao_regra_p;

c02 CURSOR FOR
	SELECT cd_especialidade
	from   medico_especialidade
	where  cd_pessoa_fisica	= cd_medico_executor_p
	and    nr_seq_prioridade in (SELECT min(x.nr_seq_prioridade) 
								 from medico_especialidade x 
								 where x.cd_pessoa_fisica = cd_medico_executor_p);


BEGIN

dt_item_w:= to_char( dt_item_p,'dd/mm/yyyy');

if (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '') then
	if (ie_consiste_item_p	= 'A') then

		if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and 
		coalesce(nr_seq_proc_interno_p, 0) > 0 then
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento	= nr_atendimento_p
			and		nr_seq_proc_interno	= nr_seq_proc_interno_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '');
		else
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento	= nr_atendimento_p
			and		cd_procedimento	= cd_item_p
			and		ie_origem_proced	= ie_origem_proced_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '');
		end if;

	elsif (ie_consiste_item_p	= 'U') then
		/* Esta opcao ira verificar se o procedimento ja existe para o Case.
		   Esta verificacao e utilizada para a Alemanha, onde e utilizada a estrutura de Case. */
		if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
		coalesce(nr_seq_proc_interno_p, 0) > 0 then
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento in (SELECT	x.nr_atendimento
					from	atendimento_paciente x
					where	x.nr_seq_episodio = obter_episodio_atendimento(nr_atendimento_p))
			and		nr_seq_proc_interno	= nr_seq_proc_interno_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '');
		else
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento in (SELECT	x.nr_atendimento
					from	atendimento_paciente x
					where	x.nr_seq_episodio = obter_episodio_atendimento(nr_atendimento_p))
			and		cd_procedimento	= cd_item_p
			and		ie_origem_proced	= ie_origem_proced_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '');
		end if;
	elsif (ie_consiste_item_p	= 'D') then
		if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
		coalesce(nr_seq_proc_interno_p, 0) > 0 then
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento		= nr_atendimento_p
			and		nr_seq_proc_interno	= nr_seq_proc_interno_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
			and		pkg_date_utils.get_time(dt_procedimento,0,0,0)	= pkg_date_utils.get_time(dt_item_p,0,0,0);
		else
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento		= nr_atendimento_p
			and		cd_procedimento		= cd_item_p
			and		ie_origem_proced	= ie_origem_proced_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
			and		pkg_date_utils.get_time(dt_procedimento,0,0,0)	= pkg_date_utils.get_time(dt_item_p,0,0,0);
		end if;

	elsif (ie_consiste_item_p	= 'T') then  			
		open c01;
		loop
		fetch c01 into	
			qt_permitido_w,
			hr_inicial_w,
			hr_final_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
			dt_hora_inicial_w :=ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_item_p, hr_inicial_w);
			dt_hora_final_w	  :=ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_item_p, hr_final_w);

			if (dt_hora_final_w < dt_hora_inicial_w) then /* virada de dia */
				
				if (dt_item_p >= dt_hora_inicial_w) and (dt_item_p <= fim_dia(dt_hora_inicial_w)) then
					dt_hora_final_w	:= dt_hora_final_w + 1;
				else
					dt_hora_inicial_w := dt_hora_inicial_w - 1;				
				end if;
			end if;
			
			if (dt_item_p >=  dt_hora_inicial_w) and (dt_item_p <=  dt_hora_final_w) then

			if (qt_permitido_w		> 0) then
				if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
				coalesce(nr_seq_proc_interno_p, 0) > 0 then
					select	count(*)
					into STRICT	qt_registros_w
					from	procedimento_paciente
					where	nr_atendimento		= nr_atendimento_p
					and		nr_seq_proc_interno	= nr_seq_proc_interno_p
					and		coalesce(cd_motivo_exc_conta::text, '') = ''
					and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
					and		dt_procedimento between	dt_hora_inicial_w and dt_hora_final_w;
				else
					select	count(*)
					into STRICT	qt_registros_w
					from	procedimento_paciente
					where	nr_atendimento		= nr_atendimento_p
					and		cd_procedimento		= cd_item_p
					and		ie_origem_proced	= ie_origem_proced_p
					and		coalesce(cd_motivo_exc_conta::text, '') = ''
					and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
					and		dt_procedimento between	dt_hora_inicial_w and dt_hora_final_w;
				end if;
		
					if (qt_registros_w	>= qt_permitido_w) then
						ds_retorno_w	:= 'N';
					end if;
				end if;			
			end if;
			
			end;
		end loop;
		close c01;		
	elsif (ie_consiste_item_p	= 'C') then
        if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
		coalesce(nr_seq_proc_interno_p, 0) > 0 then
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento	= nr_atendimento_p
			and		nr_interno_conta	= nr_interno_conta_p
			and		nr_seq_proc_interno	= nr_seq_proc_interno_p
			and		coalesce(cd_motivo_exc_conta::text, '') = '';
		else
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento	= nr_atendimento_p
			and		nr_interno_conta	= nr_interno_conta_p
			and		cd_procedimento	= cd_item_p
			and		ie_origem_proced	= ie_origem_proced_p
			and		coalesce(cd_motivo_exc_conta::text, '') = '';
		end if;
		
	elsif (ie_consiste_item_p	= 'P') then
		select	cd_pessoa_fisica
		into STRICT	cd_pessoa_fisica_w
		from	atendimento_paciente
		where	nr_atendimento 		= nr_atendimento_p;

		if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
		coalesce(nr_seq_proc_interno_p, 0) > 0 then
			select 	count(*)
			into STRICT	qt_registros_w		
			from 	procedimento_paciente 	a,
					conta_paciente		b,
					atendimento_paciente	c
			where	a.nr_atendimento	= c.nr_atendimento
			and		b.nr_interno_conta	= a.nr_interno_conta
			and		c.cd_pessoa_fisica	= cd_pessoa_fisica_w
			and		nr_seq_proc_interno	= nr_seq_proc_interno_p
			and		coalesce(cd_motivo_exc_conta::text, '') = '';
		else
			select 	count(*)
			into STRICT	qt_registros_w		
			from 	procedimento_paciente 	a,
					conta_paciente		b,
					atendimento_paciente	c
			where	a.nr_atendimento	= c.nr_atendimento
			and		b.nr_interno_conta	= a.nr_interno_conta
			and		c.cd_pessoa_fisica	= cd_pessoa_fisica_w
			and		a.cd_procedimento	= cd_item_p
			and		a.ie_origem_proced	= ie_origem_proced_p
			and		coalesce(cd_motivo_exc_conta::text, '') = '';
		end if;
		
	elsif (ie_consiste_item_p	= 'M') then

        if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
		coalesce(nr_seq_proc_interno_p, 0) > 0 then
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento	= nr_atendimento_p
			and		nr_seq_proc_interno	= nr_seq_proc_interno_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
			and		dt_procedimento	= dt_item_p;
		else
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento	= nr_atendimento_p
			and		cd_procedimento	= cd_item_p
			and		ie_origem_proced	= ie_origem_proced_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
			and		dt_procedimento	= dt_item_p;
		end if;
		
	elsif (ie_consiste_item_p	= 'I') then

		if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
		coalesce(nr_seq_proc_interno_p, 0) > 0 then
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento		= nr_atendimento_p
			and		nr_seq_proc_interno	= nr_seq_proc_interno_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
			and		cd_medico_executor	= cd_medico_executor_p
			and		pkg_date_utils.get_time(dt_procedimento,0,0,0)	= pkg_date_utils.get_time(dt_item_p,0,0,0);
		else
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento		= nr_atendimento_p
			and		cd_procedimento		= cd_item_p
			and		ie_origem_proced		= ie_origem_proced_p
			and		coalesce(cd_motivo_exc_conta::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
			and		cd_medico_executor	= cd_medico_executor_p
			and		pkg_date_utils.get_time(dt_procedimento,0,0,0)	= pkg_date_utils.get_time(dt_item_p,0,0,0);
		end if;
		
	elsif (ie_consiste_item_p	= 'B') then
		if (coalesce(nr_cirurgia_p,0) > 0) then
			if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
			coalesce(nr_seq_proc_interno_p, 0) > 0 then
				select	count(*)
				into STRICT	qt_registros_w
				from	procedimento_paciente
				where	nr_atendimento	= nr_atendimento_p
				and		nr_seq_proc_interno	= nr_seq_proc_interno_p
				and		coalesce(cd_motivo_exc_conta::text, '') = ''
				and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
				and		nr_cirurgia 	= nr_cirurgia_p;
			else
				select	count(*)
				into STRICT	qt_registros_w
				from	procedimento_paciente
				where	nr_atendimento	= nr_atendimento_p
				and		cd_procedimento	= cd_item_p
				and		ie_origem_proced	= ie_origem_proced_p
				and		coalesce(cd_motivo_exc_conta::text, '') = ''
				and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
				and		nr_cirurgia 	= nr_cirurgia_p;
			end if;
		end if;
	elsif (ie_consiste_item_p	= 'S') then
        if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
		coalesce(nr_seq_proc_interno_p, 0) > 0 then
        	select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente a,
					atendimento_paciente b
			where	a.nr_atendimento		= b.nr_atendimento
			and		b.cd_pessoa_fisica 		= obter_pessoa_atendimento( nr_atendimento_p,'C')
			and		nr_seq_proc_interno	= nr_seq_proc_interno_p
			and		coalesce(a.cd_motivo_exc_conta::text, '') = ''
			and		(a.nr_interno_conta IS NOT NULL AND a.nr_interno_conta::text <> '')
			and		PKG_DATE_UTILS.start_of(a.dt_procedimento,'month',0) =  PKG_DATE_UTILS.start_of(dt_item_p,'month',0);
		else
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente a,
					atendimento_paciente b
			where	a.nr_atendimento		= b.nr_atendimento
			and		b.cd_pessoa_fisica 		= obter_pessoa_atendimento( nr_atendimento_p,'C')
			and		a.cd_procedimento		= cd_item_p
			and		a.ie_origem_proced		= ie_origem_proced_p
			and		coalesce(a.cd_motivo_exc_conta::text, '') = ''
			and		(a.nr_interno_conta IS NOT NULL AND a.nr_interno_conta::text <> '')
			and		PKG_DATE_UTILS.start_of(a.dt_procedimento,'month',0) =  PKG_DATE_UTILS.start_of(dt_item_p,'month',0);
		end if;
	elsif (ie_consiste_item_p	= 'R') then
		if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
		coalesce(nr_seq_proc_interno_p, 0) > 0 then
        	select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento	= nr_atendimento_p
			and		nr_interno_conta	= nr_interno_conta_p
			and		nr_seq_proc_interno	= nr_seq_proc_interno_p
			and		cd_setor_atendimento	= cd_setor_atendimento_p
			and		coalesce(cd_motivo_exc_conta::text, '') = '';	
		else
			select	count(*)
			into STRICT	qt_registros_w
			from	procedimento_paciente
			where	nr_atendimento	= nr_atendimento_p
			and		nr_interno_conta	= nr_interno_conta_p
			and		cd_procedimento	= cd_item_p
			and		ie_origem_proced	= ie_origem_proced_p
			and		cd_setor_atendimento	= cd_setor_atendimento_p
			and		coalesce(cd_motivo_exc_conta::text, '') = '';	
		end if;
	elsif (ie_consiste_item_p	= 'V') then
		open c02;
		loop
		fetch c02 into	
			cd_especialidade_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
				if (coalesce(ie_consiste_proc_int_p,'N') = 'S') and
				coalesce(nr_seq_proc_interno_p, 0) > 0 then
					select	count(*)
					into STRICT	qt_registros_w
					from	procedimento_paciente a
					where	a.nr_atendimento = nr_atendimento_p
					and		nr_seq_proc_interno	= nr_seq_proc_interno_p
					and	    pkg_date_utils.get_time(a.dt_procedimento,0,0,0) = pkg_date_utils.get_time(dt_item_p,0,0,0)
					and 	cd_especialidade_w in (SELECT cd_especialidade
													from   medico_especialidade y
													where  y.cd_pessoa_fisica = a.cd_medico_executor
													and    y.nr_seq_prioridade = (select min(x.nr_seq_prioridade) 
																					from medico_especialidade x 
																					where x.cd_pessoa_fisica = a.cd_medico_executor))
					and		coalesce(a.cd_motivo_exc_conta::text, '') = ''
					and		(a.nr_interno_conta IS NOT NULL AND a.nr_interno_conta::text <> '');		
				else
					select	count(*)
					into STRICT	qt_registros_w
					from	procedimento_paciente a
					where	a.nr_atendimento = nr_atendimento_p
					and		a.cd_procedimento = cd_item_p
					and	    a.ie_origem_proced = ie_origem_proced_p
					and	    pkg_date_utils.get_time(a.dt_procedimento,0,0,0) = pkg_date_utils.get_time(dt_item_p,0,0,0)
					and 	cd_especialidade_w in (SELECT cd_especialidade
													from   medico_especialidade y
													where  y.cd_pessoa_fisica = a.cd_medico_executor
													and    y.nr_seq_prioridade = (select min(x.nr_seq_prioridade)
																					from medico_especialidade x 
																					where x.cd_pessoa_fisica = a.cd_medico_executor))
					and		coalesce(a.cd_motivo_exc_conta::text, '') = ''
					and		(a.nr_interno_conta IS NOT NULL AND a.nr_interno_conta::text <> '');		
				end if;			
					
				if (qt_registros_w > 0) then
					exit;
				end if;				
			end;
		end loop;
		close c02;			
	end if;
else
	if (ie_consiste_item_p	= 'A') then
		select	count(*)
		into STRICT	qt_registros_w
		from	material_atend_paciente
		where	nr_atendimento		= nr_atendimento_p
		and	cd_material		= cd_item_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '');

	elsif (ie_consiste_item_p	= 'U') then
		/* Esta opcao ira verificar se o procedimento ja existe para o Case.
		   Esta verificacao e utilizada para a Alemanha, onde e utilizada a estrutura de Case. */
		select	count(*)
		into STRICT	qt_registros_w
		from	material_atend_paciente
		where	nr_atendimento in (SELECT	x.nr_atendimento
						from	atendimento_paciente x
						where	x.nr_seq_episodio = obter_episodio_atendimento(nr_atendimento_p))
		and	cd_material		= cd_item_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '');

	elsif (ie_consiste_item_p	= 'D') then
		select	count(*)
		into STRICT	qt_registros_w
		from	material_atend_paciente
		where	nr_atendimento		= nr_atendimento_p
		and	cd_material		= cd_item_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
		and	pkg_date_utils.get_time(dt_atendimento,0,0,0)	= pkg_date_utils.get_time(dt_item_p,0,0,0);

	elsif (ie_consiste_item_p	= 'T') then
		open c01;
		loop
		fetch c01 into	
			qt_permitido_w,
			hr_inicial_w,
			hr_final_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			
			dt_hora_inicial_w :=ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_item_p, hr_inicial_w);
			dt_hora_final_w	  :=ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_item_p, hr_final_w);
			
			if (dt_hora_final_w < dt_hora_inicial_w) then /* virada de dia */
				
				if (dt_item_p >= dt_hora_inicial_w) and (dt_item_p <= fim_dia(dt_hora_inicial_w)) then
				dt_hora_final_w	:= dt_hora_final_w + 1;
				else
				dt_hora_inicial_w := dt_hora_inicial_w - 1;				
				end if;
			end if;
			
			if (dt_item_p >=  dt_hora_inicial_w) and (dt_item_p <=  dt_hora_final_w) then	
				if (qt_permitido_w		> 0) then
					select	count(*)
					into STRICT	qt_registros_w
					from	material_atend_paciente
					where	nr_atendimento		= nr_atendimento_p
					and	cd_material		= cd_item_p
					and	coalesce(cd_motivo_exc_conta::text, '') = ''
					and	(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
					and	dt_atendimento between	dt_hora_inicial_w and dt_hora_final_w;
		
					if (qt_registros_w	>= qt_permitido_w) then
						ds_retorno_w	:= 'N';
					end if;
				end if;						
			end if;										
			end;
		end loop;
		close c01;
	elsif (ie_consiste_item_p	= 'C') then
		select	count(*)
		into STRICT	qt_registros_w
		from	material_atend_paciente
		where	nr_atendimento	= nr_atendimento_p
		and	nr_interno_conta	= nr_interno_conta_p
		and	cd_material	= cd_item_p
		and	coalesce(cd_motivo_exc_conta::text, '') = '';

	elsif (ie_consiste_item_p	= 'P') then
		select	cd_pessoa_fisica
		into STRICT	cd_pessoa_fisica_w
		from	atendimento_paciente
		where	nr_atendimento 		= nr_atendimento_p;
				
		select 	count(*)
		into STRICT	qt_registros_w		
		from 	material_atend_paciente	a,
			conta_paciente		b,
			atendimento_paciente	c
		where	b.nr_atendimento	= c.nr_atendimento
		and	b.nr_interno_conta	= a.nr_interno_conta
		and	c.cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	a.cd_material	= cd_item_p
		and	coalesce(cd_motivo_exc_conta::text, '') = '';
		
	elsif (ie_consiste_item_p	= 'M') then
		select	count(*)
		into STRICT	qt_registros_w
		from	material_atend_paciente
		where	nr_atendimento	= nr_atendimento_p
		and	cd_material	= cd_item_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '')
		and	dt_atendimento	= dt_item_p;
		
	elsif (ie_consiste_item_p	= 'S') then
		select	count(*)
		into STRICT	qt_registros_w
		from	material_atend_paciente a,
			atendimento_paciente b
		where	a.nr_atendimento		= b.nr_atendimento
		and	b.cd_pessoa_fisica 		= obter_pessoa_atendimento( nr_atendimento_p,'C')
		and	a.cd_material		= cd_item_p
		and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
		and	(a.nr_interno_conta IS NOT NULL AND a.nr_interno_conta::text <> '')
		and	PKG_DATE_UTILS.start_of(a.dt_atendimento,'month',0) =  PKG_DATE_UTILS.start_of(dt_item_p,'month',0);
	elsif (ie_consiste_item_p	= 'R') then
		select	count(*)
		into STRICT	qt_registros_w
		from	material_atend_paciente
		where	nr_atendimento	= nr_atendimento_p
		and	nr_interno_conta	= nr_interno_conta_p
		and	cd_material	= cd_item_p
		and	cd_setor_atendimento	= cd_setor_atendimento_p
		and	coalesce(cd_motivo_exc_conta::text, '') = '';
	end if;
end if;

if (ie_consiste_item_p in ('A','D','C','P','M','I','S','B','R','U','V')) and (qt_registros_w	> 0) then
	ds_retorno_w	:= 'N';
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION consiste_regra_lanc_aut_pac ( nr_atendimento_p bigint, nr_interno_conta_p bigint, cd_item_p bigint, ie_origem_proced_p bigint, ie_consiste_item_p text, ie_consiste_proc_int_p text, nr_seq_proc_interno_p text, dt_item_p timestamp, nr_seq_regra_p bigint, nr_seq_acao_regra_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, cd_medico_executor_p text, nr_cirurgia_p bigint, cd_setor_atendimento_p bigint) FROM PUBLIC;

