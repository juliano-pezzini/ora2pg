-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_processo_jud_notif ( nr_seq_lote_p bigint, nr_seq_pagador_p bigint, nr_seq_mensalidade_p bigint, ie_opcao_p text) RETURNS varchar AS $body$
DECLARE


/*	ie_opcao_p
	PN	Permite gerar notificação de atraso
	PR	Permite rescindir contrato
	PSA	Permite suspender atendimento
	PSM	Permite suspender cobrança de mensalidade
	NRP	Retorna o Número do processo

*/
ds_retorno_w			varchar(255)	:= '';
nr_seq_processo_w		processo_judicial_liminar.nr_sequencia%type;
nr_seq_regra_notif_w		pls_notificacao_regra.nr_sequencia%type;
ie_permite_notificacao_w	pls_processo_jud_notif.ie_permite_notificacao%type;
ie_permite_rescisao_w		pls_processo_jud_notif.ie_permite_rescisao%type;
ie_permite_susp_atend_w		pls_processo_jud_notif.ie_permite_susp_atend%type;
ie_permite_susp_mens_w		pls_processo_jud_notif.ie_permite_susp_mens%type;
ie_processo_judicial_w		pls_notificacao_regra.ie_processo_judicial%type;
nr_seq_regra_w			pls_processo_jud_notif.nr_sequencia%type;
qt_notificacao_w		integer := 0;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		ie_permite_notificacao,
		ie_permite_rescisao,
		ie_permite_susp_atend,
		ie_permite_susp_mens
	from	pls_processo_jud_notif a
	where	a.nr_seq_processo	= nr_seq_processo_w
	and	((a.nr_seq_regra_notif = nr_seq_regra_notif_w ) or (coalesce(a.nr_seq_regra_notif::text, '') = ''))
	order by coalesce(a.nr_seq_regra_notif,0);


BEGIN

if (ie_opcao_p = 'NRP') then
	if (nr_seq_mensalidade_p IS NOT NULL AND nr_seq_mensalidade_p::text <> '') then
		-- Buscar processo judicial para o contrato do pagador que está na mensalidade que gerou a notificação
		select	max(z.nr_sequencia)
		into STRICT	nr_seq_processo_w
		from	pls_mensalidade			x,
			pls_contrato_pagador		y,
			processo_judicial_liminar 	z
		where	y.nr_sequencia		= x.nr_seq_pagador
		and	z.nr_seq_contrato	= y.nr_seq_contrato
		and	x.nr_sequencia		= nr_seq_mensalidade_p
		and	z.ie_estagio 		= 2
		and	z.ie_impacto_notificacao = 'S';

		-- Buscar processo judicial para algum beneficiário que está na mensalidade que gerou a notificação
		if (coalesce(nr_seq_processo_w::text, '') = '') then
			select	max(z.nr_sequencia)
			into STRICT	nr_seq_processo_w
			from	pls_mensalidade_segurado	x,
				pls_segurado			y,
				processo_judicial_liminar 	z
			where	y.nr_sequencia		= x.nr_seq_segurado
			and	y.nr_sequencia		= z.nr_seq_segurado
			and	x.nr_seq_mensalidade	= nr_seq_mensalidade_p
			and	z.ie_estagio 		= 2
			and	z.ie_impacto_notificacao = 'S';
		end if;
	end if;

	if	((nr_seq_pagador_p IS NOT NULL AND nr_seq_pagador_p::text <> '') or ((nr_seq_mensalidade_p IS NOT NULL AND nr_seq_mensalidade_p::text <> '') and (coalesce(nr_seq_processo_w::text, '') = '')) ) then

		select	max(z.nr_sequencia)
		into STRICT	nr_seq_processo_w
		from	processo_judicial_liminar 	z,
			pls_segurado			y,
			pls_contrato_pagador		x
		where	y.nr_seq_pagador	= x.nr_sequencia
		and (y.nr_sequencia		= z.nr_seq_segurado or
			z.nr_seq_contrato	= y.nr_seq_contrato)
		and	x.nr_sequencia		= nr_seq_pagador_p
		and	z.ie_estagio 		= 2
		and	z.ie_impacto_notificacao = 'S';
	end if;

	if (nr_seq_processo_w IS NOT NULL AND nr_seq_processo_w::text <> '') then
		ds_retorno_w := to_char(nr_seq_processo_w);
	end if;

elsif (ie_opcao_p in ('PN','PR','PSA','PSM')) then

	begin
	select	a.nr_seq_regra,
		b.ie_processo_judicial
	into STRICT	nr_seq_regra_notif_w,
		ie_processo_judicial_w
	from	pls_notificacao_lote a,
		pls_notificacao_regra b
	where	a.nr_seq_regra	= b.nr_sequencia
	and	a.nr_sequencia	= nr_seq_lote_p;
	exception
	when others then
		nr_seq_regra_notif_w	:= null;
		ie_processo_judicial_w	:= null;
	end;

	if (nr_seq_mensalidade_p IS NOT NULL AND nr_seq_mensalidade_p::text <> '') then
		-- Buscar processo judicial para o contrato do pagador que está na mensalidade que gerou a notificação
		select	count(1)
		into STRICT	qt_notificacao_w
		from	pls_mensalidade			x,
			pls_contrato_pagador		y,
			processo_judicial_liminar 	z
		where	y.nr_sequencia		= x.nr_seq_pagador
		and	z.nr_seq_contrato	= y.nr_seq_contrato
		and	x.nr_sequencia		= nr_seq_mensalidade_p
		and	z.ie_estagio 		= 2
		and	z.ie_impacto_notificacao = 'N';

		if (qt_notificacao_w = 0) then
			-- Buscar processo judicial para o contrato do pagador que está na mensalidade que gerou a notificação
			select	max(z.nr_sequencia)
			into STRICT	nr_seq_processo_w
			from	pls_mensalidade			x,
				pls_contrato_pagador		y,
				processo_judicial_liminar 	z
			where	y.nr_sequencia		= x.nr_seq_pagador
			and	z.nr_seq_contrato	= y.nr_seq_contrato
			and	x.nr_sequencia		= nr_seq_mensalidade_p
			and	z.ie_estagio 		= 2
			and (z.ie_impacto_notificacao = 'S' or ie_processo_judicial_w = 'N');
		end if;

		-- Buscar processo judicial para algum beneficiário que está na mensalidade que gerou a notificação
		if (coalesce(nr_seq_processo_w::text, '') = '') and (qt_notificacao_w = 0) then
			select	count(1)
			into STRICT	qt_notificacao_w
			from	pls_mensalidade_segurado	x,
				pls_segurado			y,
				processo_judicial_liminar 	z
			where	y.nr_sequencia		= x.nr_seq_segurado
			and	y.nr_sequencia		= z.nr_seq_segurado
			and	x.nr_seq_mensalidade	= nr_seq_mensalidade_p
			and	z.ie_estagio 		= 2
			and	z.ie_impacto_notificacao = 'N';

			if (qt_notificacao_w = 0) then
				select	max(z.nr_sequencia)
				into STRICT	nr_seq_processo_w
				from	pls_mensalidade_segurado	x,
					pls_segurado			y,
					processo_judicial_liminar 	z
				where	y.nr_sequencia		= x.nr_seq_segurado
				and	y.nr_sequencia		= z.nr_seq_segurado
				and	x.nr_seq_mensalidade	= nr_seq_mensalidade_p
				and	z.ie_estagio 		= 2
				and (z.ie_impacto_notificacao = 'S' or ie_processo_judicial_w = 'N');
			end if;
		end if;

	end if;

	if	((nr_seq_pagador_p IS NOT NULL AND nr_seq_pagador_p::text <> '') or ((nr_seq_mensalidade_p IS NOT NULL AND nr_seq_mensalidade_p::text <> '') and (coalesce(nr_seq_processo_w::text, '') = '')) ) then
		-- Buscas o último processo do cliente
		select	count(1)
		into STRICT	qt_notificacao_w
		from	processo_judicial_liminar 	z,
			pls_segurado			y,
			pls_contrato_pagador		x
		where	y.nr_seq_pagador	= x.nr_sequencia
		and (y.nr_sequencia		= z.nr_seq_segurado or
			z.nr_seq_contrato	= y.nr_seq_contrato)
		and	x.nr_sequencia		= nr_seq_pagador_p
		and	z.ie_estagio 		= 2
		and	z.ie_impacto_notificacao = 'N';

		if (qt_notificacao_w = 0) then
			select	max(z.nr_sequencia)
			into STRICT	nr_seq_processo_w
			from	processo_judicial_liminar 	z,
				pls_segurado			y,
				pls_contrato_pagador		x
			where	y.nr_seq_pagador	= x.nr_sequencia
			and (y.nr_sequencia		= z.nr_seq_segurado or
				z.nr_seq_contrato	= y.nr_seq_contrato)
			and	x.nr_sequencia		= nr_seq_pagador_p
			and	z.ie_estagio 		= 2
			and (z.ie_impacto_notificacao = 'S' or ie_processo_judicial_w = 'N');
		end if;

	end if;


	if (nr_seq_processo_w IS NOT NULL AND nr_seq_processo_w::text <> '') then
		nr_seq_regra_w := null;
		open C01;
		loop
		fetch C01 into
			nr_seq_regra_w,
			ie_permite_notificacao_w,
			ie_permite_rescisao_w,
			ie_permite_susp_atend_w,
			ie_permite_susp_mens_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
		end loop;
		close C01;

		-- PN	Permite gerar notificação de atraso
		if (ie_opcao_p = 'PN') then

			-- Incluir todos com processo judicial
			if (ie_processo_judicial_w = 'S') then
				ds_retorno_w	:= 'S';

			-- Não incluir se tiver processo judicial
			elsif (ie_processo_judicial_w = 'N') then
				ds_retorno_w	:= 'N';

			-- Incluir todos com processo judicial que permita a notificação (SE TIVER REGRA)
			else
				ds_retorno_w	:= ie_permite_notificacao_w;
			end if;

		-- PR	Permite rescindir contrato
		elsif (ie_opcao_p = 'PR') then
			ds_retorno_w	:= ie_permite_rescisao_w;

		-- PSA	Permite suspender atendimento
		elsif (ie_opcao_p = 'PSA') then
			ds_retorno_w	:= ie_permite_susp_atend_w;

		-- PSM	Permite suspender cobrança de mensalidade
		elsif (ie_opcao_p = 'PSM') then
			ds_retorno_w	:= ie_permite_susp_mens_w;

		end if;

		-- (SE NÃO TIVER REGRA)
		-- Incluir todos com processo judicial que permita a notificação
		-- PR	Permite rescindir contrato
		-- PSA	Permite suspender atendimento
		-- PSM	Permite suspender cobrança de mensalidade
		if	((ie_processo_judicial_w not in ('S','N')) or (coalesce(ie_processo_judicial_w::text, '') = '')) and (coalesce(nr_seq_regra_w::text, '') = '') then
			ds_retorno_w	:= 'S';
		end if;

	elsif (qt_notificacao_w > 0) and (ie_processo_judicial_w in ('N','P')) then
		ds_retorno_w := 'N';
	end if;
end if;

if (ie_opcao_p = 'NRP') then
	return	ds_retorno_w;
else
	return	coalesce(ds_retorno_w,'S');
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_processo_jud_notif ( nr_seq_lote_p bigint, nr_seq_pagador_p bigint, nr_seq_mensalidade_p bigint, ie_opcao_p text) FROM PUBLIC;

