-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_permite_protocolo ( cd_protocolo_p bigint, cd_pessoa_fisica_p text, nr_seq_medicacao_p bigint default null, ie_modalidade_trat_p text default null, nr_seq_referencia_p bigint default null, nr_seq_loco_regional_p bigint default null, ie_finalidade_p text default null) RETURNS varchar AS $body$
DECLARE


ie_permite_w	varchar(10);
ie_param_992_w	varchar(10);
ie_param_1424_w	varchar(10);
ie_tipo_convenio_w	varchar(10);
ultimo_convenio_pac_w bigint;
qt_registro_w bigint;

C01 CURSOR FOR
SELECT    b.ie_tipo_laudo_apac
from	    sus_laudo_proced_adic a,
          sus_laudo_paciente b, 
          protocolo_procedimento c
where	    a.nr_seq_laudo		= b.nr_seq_interno
and		    c.cd_procedimento	= a.cd_procedimento
and		    c.cd_protocolo		= cd_protocolo_p
and		    c.ie_origem_proced	= a.ie_origem_proced
and		    b.cd_pessoa_fisica	= cd_pessoa_fisica_p
group by  ie_tipo_laudo_apac;

C02 CURSOR FOR
SELECT    b.ie_tipo_laudo_apac
from	    sus_laudo_paciente b, 
          protocolo_procedimento c
where	    c.cd_procedimento	= b.cd_procedimento_solic
and		    c.ie_origem_proced	= b.ie_origem_proced
and		    c.cd_protocolo		= cd_protocolo_p
and		    b.cd_pessoa_fisica	= cd_pessoa_fisica_p
group by  ie_tipo_laudo_apac;

BEGIN

ie_permite_w	:= 'S';
ie_param_1424_w	:= Obter_Valor_Param_Usuario(281, 1424, Obter_perfil_Ativo, Wheb_Usuario_Pck.Get_nm_Usuario, 0);

if (coalesce(ie_param_1424_w,'N') = 'S') then
	begin

  ultimo_convenio_pac_w := obter_ultimo_convenio_pac(cd_pessoa_fisica_p);

	select	ie_tipo_convenio
	into STRICT	ie_tipo_convenio_w
	from	convenio
	where	cd_convenio = ultimo_convenio_pac_w;
	
	if (ie_tipo_convenio_w IS NOT NULL AND ie_tipo_convenio_w::text <> '') and (ie_tipo_convenio_w = 3) then --3 convenio SUS
		begin

      ie_permite_w	:= 'N';

      -- localizar laudo dos procedimentos adicionais
      for laudo in c01 loop
        if (ie_permite_w = 'N') then
          if (coalesce(obter_se_laudo_vigente(cd_pessoa_fisica_p, trunc(clock_timestamp()), laudo.ie_tipo_laudo_apac), 'N') = 'S') then
            ie_permite_w := 'S';
          end if;
        end if;
      end loop;

      -- localizar laudo dos procedimentos diretos
      if (ie_permite_w = 'N') then
        for laudo_adicional in c02 loop
          if (ie_permite_w = 'N') then
            if (coalesce(obter_se_laudo_vigente(cd_pessoa_fisica_p, trunc(clock_timestamp()), laudo_adicional.ie_tipo_laudo_apac), 'N') = 'S') then
              ie_permite_w := 'S';
            end if;
          end if;
        end loop;
      end if;

		end;
	end if;				
	end;		
end if;

if (ie_permite_w = 'S' and (nr_seq_medicacao_p IS NOT NULL AND nr_seq_medicacao_p::text <> '')) then
	begin
	select	count(*)
	into STRICT	qt_registro_w
	from	PROT_MEDIC_CAT_TOPOGRAFICA
	where	cd_protocolo		= cd_protocolo_p
	and		coalesce(ie_situacao,'A')	= 'A'
	and		((nr_seq_medicacao_p	= nr_sequencia) or (coalesce(nr_seq_medicacao_p::text, '') = ''));

	if (qt_registro_w	> 0) then

		ie_param_992_w	:= Obter_Valor_Param_Usuario(281, 992, Obter_perfil_Ativo, Wheb_Usuario_Pck.Get_nm_Usuario, 0);
		
		if (coalesce(ie_param_992_w,'S') = 'S') then
		
			ie_permite_w	:= 'N';
			
			if (coalesce(nr_seq_loco_regional_p::text, '') = '') then
			
				select	count(*)
				into STRICT	qt_registro_w
				from	can_loco_regional a,
						cido_topografia b,
						PROT_MEDIC_CAT_TOPOGRAFICA c
				where	a.cd_pessoa_fisica	= cd_pessoa_fisica_p
				and		b.cd_topografia		= a.CD_TOPOGRAFIA
				and		c.cd_categoria		= b.cd_categoria
				and		c.cd_protocolo		= cd_protocolo_p
				and		coalesce(c.ie_situacao,'A')	= 'A'
				and		coalesce(a.ie_situacao,'A')	= 'A'
				and		coalesce(nr_seq_referencia,coalesce(nr_seq_referencia_p,0))	= coalesce(nr_seq_referencia_p,0)
				and		((nr_seq_medicacao_p	= c.nr_sequencia) or (coalesce(nr_seq_medicacao_p::text, '') = ''))
				and		coalesce(ie_modalidade_trat,coalesce(ie_modalidade_trat_p,'XPTO'))	= coalesce(ie_modalidade_trat_p,'XPTO')
				and		coalesce(ie_finalidade,coalesce(ie_finalidade_p,'XPTO'))	= coalesce(ie_finalidade_p,'XPTO');
				
			else
				
				select	count(*)
				into STRICT	qt_registro_w
				from	can_loco_regional a,
						cido_topografia b,
						PROT_MEDIC_CAT_TOPOGRAFICA c
				where	a.nr_sequencia		= nr_seq_loco_regional_p
				and		b.cd_topografia		= a.CD_TOPOGRAFIA
				and		c.cd_categoria		= b.cd_categoria
				and		c.cd_protocolo		= cd_protocolo_p
				and		coalesce(c.ie_situacao,'A')	= 'A'
				and		coalesce(a.ie_situacao,'A')	= 'A'
				and		coalesce(ie_modalidade_trat,coalesce(ie_modalidade_trat_p,'XPTO'))	= coalesce(ie_modalidade_trat_p,'XPTO')
				and		coalesce(ie_finalidade,coalesce(ie_finalidade_p,'XPTO'))	= coalesce(ie_finalidade_p,'XPTO')
				and		((nr_seq_medicacao_p	= c.nr_sequencia) or (coalesce(nr_seq_medicacao_p::text, '') = ''))
				and		coalesce(nr_seq_referencia,coalesce(coalesce(nr_seq_referencia_p,nr_seq_referencia),0))	= coalesce(coalesce(nr_seq_referencia_p,nr_seq_referencia),0);
				
			end if;
			if (qt_registro_w	> 0) then
				ie_permite_w	:= 'S';
			end if;
		end if;
		
	end if;
	end;
end if;

return	ie_permite_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_permite_protocolo ( cd_protocolo_p bigint, cd_pessoa_fisica_p text, nr_seq_medicacao_p bigint default null, ie_modalidade_trat_p text default null, nr_seq_referencia_p bigint default null, nr_seq_loco_regional_p bigint default null, ie_finalidade_p text default null) FROM PUBLIC;

