-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_regra_funcao_partic ( cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_conta_p timestamp, nr_seq_proc_p bigint, cd_funcao_p text) RETURNS varchar AS $body$
DECLARE

	

ie_auxiliar_w			varchar(01);
ie_anestesista_w		varchar(01);
nr_auxiliares_w			smallint;
nr_aux_partic_w			smallint;
qt_porte_anestesico_w		smallint;
ie_regra_w			varchar(01);
cd_edicao_amb_w			integer;
ie_prioridade_edicao_w		varchar(01);
VL_CH_HONORARIOS_W		double precision := 1;
VL_CH_CUSTO_OPER_W		double precision := 1;
VL_M2_FILME_W			double precision := 0;
dt_inicio_vigencia_w		timestamp;
tx_ajuste_geral_w		double precision;
ie_instrumentador_w		varchar(01);
ie_gerar_instrumentador_w	varchar(01);

ie_aux_cbhpm_porte_cir_w	varchar(01);
ie_aux_amb_porte_cir_w		varchar(01);
nr_cirurgia_w			bigint;
nr_interno_conta_w		bigint;
cd_edicao_ajuste_w		integer;
ie_edicao_ajuste_partic_cir_w	varchar(1);
ie_ind_equipe_sus_w		smallint;
nr_seq_cbhpm_edicao_w		bigint;
ie_origem_proced_edicao_w	bigint;
dt_procedimento_w		procedimento_paciente.dt_procedimento%type;

ie_glosa_w			varchar(10);
vl_retorno_w			double precision;
vl_retorno_ww			varchar(05);
ie_autor_particular_w		varchar(1);
cd_convenio_glosa_ww		integer;
cd_categoria_glosa_ww		varchar(10);
nr_seq_ajuste_proc_ww		bigint;
nr_porte_anest_cobranca_w	smallint;
ie_tipo_atendimento_w		atendimento_paciente.ie_tipo_atendimento%type;
nr_atendimento_w		atendimento_paciente.nr_atendimento%type;
nr_seq_proc_interno_w		procedimento_paciente.nr_seq_proc_interno%type;
cd_area_procedimento_w		area_procedimento.cd_area_procedimento%type;
cd_especialidade_w		especialidade_proc.cd_especialidade%type;
cd_grupo_proc_w			grupo_proc.cd_grupo_proc%type;

C06 CURSOR FOR
	SELECT	nr_porte_anest_cobranca
	from	regra_porte_anest_cbhpm
	where	nr_porte_anest = qt_porte_anestesico_w
	and	coalesce(cd_procedimento, coalesce(cd_procedimento_p,0))	= coalesce(cd_procedimento_p,0)
	and	((coalesce(cd_procedimento::text, '') = '') or (coalesce(ie_origem_proced, coalesce(ie_origem_proced_p,0)) = coalesce(ie_origem_proced_p,0)))
	and	coalesce(cd_area_procedimento, cd_area_procedimento_w) = cd_area_procedimento_w
	and	coalesce(cd_especialidade, cd_especialidade_w) = cd_especialidade_w
	and	coalesce(cd_grupo_proc, cd_grupo_proc_w) = cd_grupo_proc_w
	order by nr_porte_anest;



BEGIN

select	max(nr_cirurgia),
	max(nr_interno_conta),
	max(dt_procedimento),
	max(nr_atendimento),
	max(nr_seq_proc_interno)
into STRICT	nr_cirurgia_w,
	nr_interno_conta_w,
	dt_procedimento_w,
	nr_atendimento_w,
	nr_seq_proc_interno_w
from	procedimento_paciente
where	nr_sequencia 	= nr_seq_proc_p;

select	max(ie_tipo_atendimento)
into STRICT	ie_tipo_atendimento_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_w;

select coalesce(max(ie_auxiliar),'N'),
	coalesce(max(ie_anestesista),'N'),
	coalesce(max(ie_instrumentador),'N'),
	coalesce(max(ie_ind_equipe_sus),0)
into STRICT	ie_auxiliar_w,
	ie_anestesista_w,
	ie_instrumentador_w,
	ie_ind_equipe_sus_w
from 	funcao_medico	
where cd_funcao	= cd_funcao_p;

select	coalesce(max(ie_prioridade_edicao_amb), 'N'),
	coalesce(max(ie_gerar_instrumentador),'S'),
	coalesce(max(ie_aux_cbhpm_porte_cir),'N'),
	coalesce(max(ie_aux_amb_porte_cir),'N'),
	coalesce(max(ie_edicao_ajuste_partic_cir),'N')
into STRICT	ie_prioridade_edicao_w,
	ie_gerar_instrumentador_w,
	ie_aux_cbhpm_porte_cir_w,
	ie_aux_amb_porte_cir_w,
	ie_edicao_ajuste_partic_cir_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_p;

/*      obter a edicao do convenio  */

if (ie_prioridade_edicao_w	= 'N') then
	begin
	select 	coalesce(max(cd_edicao_amb),0)
	into STRICT   	cd_edicao_amb_w
	from 	convenio_amb
	where (cd_estabelecimento     = cd_estabelecimento_p)
	and (cd_convenio            = cd_convenio_p)
	and (cd_categoria           = cd_categoria_p)
	and (coalesce(ie_situacao,'A')	= 'A')
	and 	(dt_inicio_vigencia     =
      		(SELECT max(dt_inicio_vigencia)
       		from 	convenio_amb a
       		where (a.cd_estabelecimento  = cd_estabelecimento_p)
         	and (a.cd_convenio         = cd_convenio_p)
         	and (a.cd_categoria        = cd_categoria_p)
	 	and (coalesce(a.ie_situacao,'A')= 'A')
         	and (a.dt_inicio_vigencia <=  dt_conta_p)));
	end;
else
	SELECT * FROM Obter_Edicao_Proc_Conv(cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, dt_conta_p, cd_procedimento_p, cd_edicao_amb_w, vl_ch_honorarios_W, vl_ch_custo_oper_w, vl_m2_filme_w, dt_inicio_vigencia_w, tx_ajuste_geral_w, nr_seq_cbhpm_edicao_w) INTO STRICT cd_edicao_amb_w, vl_ch_honorarios_W, vl_ch_custo_oper_w, vl_m2_filme_w, dt_inicio_vigencia_w, tx_ajuste_geral_w, nr_seq_cbhpm_edicao_w;
end if;

/*
cd_edicao_ajuste_w	:= Obter_Dados_Ajuste_proc(	cd_estabelecimento_p,
							cd_convenio_p,
							cd_categoria_p,
							cd_procedimento_p,
							ie_origem_proced_p,
							0,
							dt_conta_p,
							1);
*/
SELECT * FROM obter_regra_ajuste_proc(cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, cd_procedimento_p, ie_origem_proced_p, null, dt_conta_p, 0, ie_tipo_atendimento_w, 0, null, 0, 0, NULL, nr_seq_proc_interno_w, null, null, null, null, null, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_ww, ie_glosa_w, vl_retorno_w, vl_retorno_w, cd_edicao_ajuste_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, null, 0, ie_autor_particular_w, cd_convenio_glosa_ww, cd_categoria_glosa_ww, nr_seq_ajuste_proc_ww, null, null, null, null, null, null, null, null, vl_retorno_w, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_ww, ie_glosa_w, vl_retorno_w, vl_retorno_w, cd_edicao_ajuste_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, ie_autor_particular_w, cd_convenio_glosa_ww, cd_categoria_glosa_ww, nr_seq_ajuste_proc_ww, vl_retorno_w;
		
if (coalesce(cd_edicao_ajuste_w,0)	> 0) and (ie_edicao_ajuste_partic_cir_w	= 'S') then
	cd_edicao_amb_w	:= cd_edicao_ajuste_w;
end if;

select	coalesce(max(ie_origem_proced),ie_origem_proced_p)
into STRICT	ie_origem_proced_edicao_w
from	edicao_amb
where	cd_edicao_amb	= cd_edicao_amb_w;

if	((ie_origem_proced_p	= 5) and (cd_edicao_amb_w 	in (2004,2005))) or (ie_origem_proced_edicao_w = 5) then
	begin
	select coalesce(max(a.nr_auxiliar),0),
	 	 coalesce(max(a.nr_porte_anest), 0)
	into STRICT	 nr_auxiliares_w,
	 	 qt_porte_anestesico_w
	from	 cbhpm_preco a
	where	 a.cd_procedimento	= cd_procedimento_p
	and	 a.ie_origem_proced	= ie_origem_proced_p
	and	 coalesce(a.dt_vigencia,clock_timestamp() - interval '3650 days') =
			(SELECT max(coalesce(b.dt_vigencia,clock_timestamp() - interval '3650 days'))
				from cbhpm_preco b
				where	b.cd_procedimento		= cd_procedimento_p
				and	b.ie_origem_proced	= ie_origem_proced_p
				and	coalesce(b.dt_vigencia,clock_timestamp() - interval '3650 days')	<= dt_conta_p);
				
	select	max(cd_area_procedimento),
		max(cd_especialidade),
		max(cd_grupo_proc)
	into STRICT	cd_area_procedimento_w,
		cd_especialidade_w,
		cd_grupo_proc_w
	from	estrutura_procedimento_v
	where	cd_procedimento = cd_procedimento_p
	and	ie_origem_proced = ie_origem_proced_p;
				
	nr_porte_anest_cobranca_w:= null;
	open C06;
	loop
	fetch C06 into	
		nr_porte_anest_cobranca_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin
		nr_porte_anest_cobranca_w:= nr_porte_anest_cobranca_w;
		end;
	end loop;
	close C06;

	if (nr_porte_anest_cobranca_w IS NOT NULL AND nr_porte_anest_cobranca_w::text <> '') then
		qt_porte_anestesico_w:= nr_porte_anest_cobranca_w;
	end if;

	if (ie_aux_cbhpm_porte_cir_w	= 'S') then

		select	coalesce(max(Obter_Aux_Maior_Porte_Cir(nr_cirurgia_w, nr_interno_conta_w, dt_conta_p,
				ie_origem_proced_p, null, null)), nr_auxiliares_w)
		into STRICT	nr_auxiliares_w
		;
	end if;

	end;
else
	begin
	select coalesce(max(a.nr_auxiliares),0),
	 	 coalesce(max(a.qt_porte_anestesico), 0)
	into STRICT	 nr_auxiliares_w,
	 	 qt_porte_anestesico_w
	from 	 preco_amb a
	where	 a.cd_edicao_amb		= cd_edicao_amb_w
  	and	 a.cd_procedimento	= cd_procedimento_p
  	and	 a.ie_origem_proced	= ie_origem_proced_p
  	and    coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')	=
	 	(SELECT max(coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days'))
			from preco_amb b
			where b.cd_edicao_amb		= cd_edicao_amb_w
			and	b.cd_procedimento		= cd_procedimento_p
			and	b.ie_origem_proced	= ie_origem_proced_p
			and	coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')	<= dt_conta_p);

	

	if (ie_aux_amb_porte_cir_w	= 'S') then

		select	coalesce(max(Obter_Aux_Maior_Porte_Cir(nr_cirurgia_w, nr_interno_conta_w, dt_conta_p, ie_origem_proced_p, 	

			cd_edicao_amb_w, null)), nr_auxiliares_w)
		into STRICT	nr_auxiliares_w
		;
	end if;

	end;
end if;


if (nr_auxiliares_w = 0) and (nr_seq_ajuste_proc_ww > 0) then

	select	coalesce(max(nr_auxiliares),0)
	into STRICT	nr_auxiliares_w
	from	regra_ajuste_proc
	where	nr_sequencia = nr_seq_ajuste_proc_ww;

end if;

ie_regra_w	:= 'N';
if (ie_anestesista_w	= 'S') and
	((qt_porte_anestesico_w	<> 0) and (ie_origem_proced_p not in (2,3,7))) then
	select 	count(*)
	into STRICT 	nr_aux_partic_w
	from 	funcao_medico b,
		Procedimento_Participante a
	where	a.nr_sequencia	= nr_seq_proc_p
          and   a.ie_funcao	= b.cd_funcao
	  and   ie_anestesista	= 'S';
	if (nr_aux_partic_w <= 2) then
		ie_regra_w	:= 'S';	
	end if;
/*	Pode ter um auxiliar de anestesista
	if	(nr_aux_partic_w <= 0) then
		ie_regra_w	:= 'S';	
	end if;
*/
end if;
if (ie_auxiliar_w	= 'S') and
	((nr_auxiliares_w > 0) and (ie_origem_proced_p not in (2,3,7))) then
	begin
	select 	count(*)
	into STRICT 	nr_aux_partic_w
	from 	funcao_medico b,
		Procedimento_Participante a
	where	a.nr_sequencia	= nr_seq_proc_p
          and   a.ie_funcao	= b.cd_funcao
	  and   ie_auxiliar	= 'S';
	if (nr_aux_partic_w < nr_auxiliares_w) then
		ie_regra_w	:= 'S';	
	end if;
	end;
end if;

/* Quando for SUS */

if	(((ie_anestesista_w = 'S') or (ie_auxiliar_w = 'S')) and (ie_origem_proced_p in (2,3,7))) then
	select	coalesce(max(ie_gerar_partic_cirurg), 'N')
	into STRICT	ie_regra_w
	from	sus_parametros_aih
	where	cd_estabelecimento = cd_estabelecimento_p;
	
	if (Sus_validar_regra(3, cd_procedimento_p, ie_origem_proced_p,dt_procedimento_w) = 0) or
		((ie_ind_equipe_sus_w = 6) and (Sus_Obter_Se_Detalhe_Proc(cd_procedimento_p,ie_origem_proced_p,'001',dt_procedimento_w)	= 0)) then
		ie_regra_w	:= 'N';
	end if;
end if;

if (ie_regra_w = 'N') and (ie_instrumentador_w = 'S') and (ie_gerar_instrumentador_w = 'S') then	
	ie_regra_w:= 'S';
end if;

RETURN ie_regra_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_regra_funcao_partic ( cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_conta_p timestamp, nr_seq_proc_p bigint, cd_funcao_p text) FROM PUBLIC;

