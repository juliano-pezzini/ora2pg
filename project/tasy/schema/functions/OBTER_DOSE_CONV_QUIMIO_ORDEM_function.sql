-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_dose_conv_quimio_ordem ( cd_material_p bigint, qt_dose_origem_p bigint, cd_unid_medida_ori_p text, cd_unid_medida_dest_p text, nr_seq_ordem_p bigint) RETURNS bigint AS $body$
DECLARE


-- ------------------------------------------------------------------------------------------

-- ao realizar alteracao aqui e necessario verificar tambem a OBTER_DOSE_CONV_QUIMIO_ORDEM_2

-- ------------------------------------------------------------------------------------------
cd_unid_medida_ori_w	varchar(30);
cd_unid_medida_dest_w	varchar(30);
qt_dose_convertida_w	double precision;
cd_unid_med_cons_w		varchar(30);
qt_conversao_w			double precision;
cd_estabelecimento_w	smallint := wheb_usuario_pck.get_cd_estabelecimento;
ie_conv_ml_w			varchar(15);
qt_diluicao_w			double precision;
qt_dose_medic_w			double precision;
cd_um_medic_w			varchar(30);
cd_unidade_medida_consumo_w	varchar(30);
qt_dose_convert_w		double precision;
ie_casas_ilimitadas		varchar(1);
qt_retorno_w 			bigint;


BEGIN
ie_conv_ml_w := obter_param_usuario(3130, 404, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_conv_ml_w);
ie_casas_ilimitadas := obter_param_usuario(3130, 503, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_casas_ilimitadas);

cd_unid_medida_ori_w	:= upper(cd_unid_medida_ori_p);
cd_unid_medida_dest_w	:= upper(cd_unid_medida_dest_p);

if (ie_casas_ilimitadas = 'S') then
	-- utilizar a conversao com casas ilimitadas
	qt_retorno_w := obter_dose_conv_quimio_ordem_2(cd_material_p, qt_dose_origem_p, cd_unid_medida_ori_p, cd_unid_medida_dest_p, nr_seq_ordem_p);
else
	begin
		-- utilizar os calculos com number(18,6)
		if (cd_unid_medida_ori_w = cd_unid_medida_dest_w) then
			qt_dose_convertida_w := qt_dose_origem_p;
		else
			select	upper(substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UMS'),1,30))
			into STRICT	cd_unid_med_cons_w
			from	material
			where	cd_material = cd_material_p;
			
			if (cd_unid_med_cons_w = cd_unid_medida_dest_w) then
				begin
				
				select	coalesce(max(qt_conversao),0)
				into STRICT	qt_conversao_w
				from	material_conversao_unidade
				where	cd_material = cd_material_p
				and	upper(cd_unidade_medida) = upper(cd_unid_medida_ori_w);
				
				qt_dose_convertida_w := Dividir_sem_round(qt_dose_origem_p, qt_conversao_w);
				end;
			elsif (cd_unid_med_cons_w = cd_unid_medida_ori_w) then
				begin
				
				select	coalesce(max(qt_conversao),0)
				into STRICT	qt_conversao_w
				from	material_conversao_unidade
				where	cd_material = cd_material_p
				and	upper(cd_unidade_medida) = upper(cd_unid_medida_dest_w);
				
				qt_dose_convertida_w := qt_dose_origem_p * qt_conversao_w;
				end;
			else
				begin
				select	coalesce(max(qt_conversao),0)
				into STRICT	qt_conversao_w
				from	material_conversao_unidade
				where	cd_material = cd_material_p
				and	upper(cd_unidade_medida) = upper(cd_unid_medida_ori_w);
				
				qt_dose_convertida_w := Dividir_sem_round(qt_dose_origem_p, qt_conversao_w);
				
				select	coalesce(max(qt_conversao),0)
				into STRICT	qt_conversao_w
				from	material_conversao_unidade
				where	cd_material = cd_material_p
				and	upper(cd_unidade_medida) = upper(cd_unid_medida_dest_w);
				
				qt_dose_convertida_w := qt_dose_convertida_w * qt_conversao_w;
				end;
			end if;
			
		end if;

		if (ie_conv_ml_w = 'S') and (coalesce(qt_dose_convertida_w,0) = 0) and (nr_seq_ordem_p IS NOT NULL AND nr_seq_ordem_p::text <> '') then
			
			if (upper(cd_unid_medida_dest_w) <> upper(obter_unid_med_usua('ML'))) then
				select	max(cd_unidade_medida_consumo)
				into STRICT	cd_unidade_medida_consumo_w
				from	material
				where	cd_material = cd_material_p;
				
				qt_dose_medic_w	:= Obter_material_ordem_prod(nr_seq_ordem_p,'D');
				cd_um_medic_w	:= Obter_material_ordem_prod(nr_seq_ordem_p,'U');
				
				qt_dose_convert_w	:= Obter_dose_convertida_quimio(cd_material_p,1,cd_unidade_medida_consumo_w, cd_um_medic_w);
				
				select 	max(Obter_dose_convertida_quimio(a.cd_material,a.qt_dose,a.cd_unidade_medida,obter_unid_med_usua('ml')))
				into STRICT	qt_diluicao_w
				from   	can_ordem_prod b,
						can_ordem_item_prescr a
				where  	b.nr_sequencia = a.nr_seq_ordem
				and		nr_seq_ordem = nr_seq_ordem_p
				and		ie_agrupador = 9;
				
				qt_dose_convertida_w	:= dividir((qt_dose_origem_p * qt_dose_convert_w),qt_diluicao_w);
			else
				select 	max(Obter_dose_convertida_quimio(a.cd_material,a.qt_dose,a.cd_unidade_medida,obter_unid_med_usua('ml')))
				into STRICT	qt_diluicao_w
				from   	can_ordem_prod b,
						can_ordem_item_prescr a
				where  	b.nr_sequencia = a.nr_seq_ordem
				and		nr_seq_ordem = nr_seq_ordem_p
				and		ie_agrupador = 9;
				
				qt_dose_convertida_w := obter_conversao_unid_med_cons(cd_material_p, cd_unid_medida_ori_p, qt_dose_origem_p) * qt_diluicao_w;
			end if;
		end if;

		qt_retorno_w := qt_dose_convertida_w;
	end;
end if;

return	qt_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_dose_conv_quimio_ordem ( cd_material_p bigint, qt_dose_origem_p bigint, cd_unid_medida_ori_p text, cd_unid_medida_dest_p text, nr_seq_ordem_p bigint) FROM PUBLIC;

