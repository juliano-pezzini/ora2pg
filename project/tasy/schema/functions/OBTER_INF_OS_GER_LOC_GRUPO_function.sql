-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_inf_os_ger_loc_grupo (dt_parametro_p timestamp, nr_seq_gerencia_p bigint, nr_seq_grupo_des_p bigint, ie_tipo_inf_p text, ie_tipo_valor_p text, nr_seq_localizacao_p bigint, cd_funcao_p bigint default -1) RETURNS bigint AS $body$
DECLARE


/*
ie_tipo_inf_p
QT - Quantidade total de OS no mês
ER - Quantidade total de Erros no mês
ERI- Quantidade de erros identificados internamente na wheb
ERE-Quantidade de erros identificados externamente pelo cliente
QTI - Quantidade total de Insatisfação no mês
PRI - Percentual de insatisfação
EN - Quantidade total de OS encerrada
ENS - Quantidade total de OS encerrada com satisfação
PR - Percentual de erro no mês
PRIN- Percentual de erro no mês identificados internamente na Wheb
PREX- Percentual de erro no mês identificados externamente pelos clientes
*/
qt_total_os_w			double precision;
qt_total_tec_w			double precision := 0;
qt_erro_w			double precision;
qt_retorno_w			double precision;
qt_os_encerrada_w		double precision;
qt_os_encerrada_classif_w	double precision;
qt_os_insatisf_w		double precision;
dt_ref_mes_w	timestamp;
dt_fim_mes_w	timestamp;


BEGIN

dt_ref_mes_w			:= PKG_DATE_UTILS.start_of(dt_parametro_p,'month', 0);
dt_fim_mes_w			:= pkg_date_utils.end_of(dt_ref_mes_w, 'MONTH', 0);

if (ie_tipo_valor_p	= 'A') then
	dt_ref_mes_w			:= PKG_DATE_UTILS.ADD_MONTH(PKG_DATE_UTILS.start_of(dt_parametro_p,'month', 0), -11, 0);
	dt_fim_mes_w			:= PKG_DATE_UTILS.start_of(dt_parametro_p,'month', 0);
end if;

if (ie_tipo_inf_p in ('QT','PR','PRIN','PREX'))   then

	/*Quantidade de OS recebidas independetente se passou para o Desenvolvimento/Tecnologia*/

	select 	count(distinct nr_sequencia)
	into STRICT	qt_total_os_w
	from	os_recebida_gerencia_v a
	where	dt_ordem_servico between dt_ref_mes_w and dt_fim_mes_w
	and	((a.nr_seq_localizacao = nr_seq_localizacao_p) or (nr_seq_localizacao_p = 0))
	and      ((nr_seq_gerencia_p = 0) or (NR_SEQ_GERENCIA = nr_seq_gerencia_p))
	and	nr_seq_grupo_des	= nr_seq_grupo_des_p
	and	((a.cd_funcao = cd_funcao_p) or (cd_funcao_p = -1));

end if;

/*Retorna a quantidade de erros considerando o DOC ERRO*/

if (ie_tipo_inf_p in ('ER','PR')) then

		select	count(distinct nr_sequencia)
		into STRICT	qt_erro_w
		from	os_erro_gerencia_v a
		where	dt_ordem_servico between dt_ref_mes_w and dt_fim_mes_w
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and	((a.nr_seq_localizacao = nr_seq_localizacao_p) or (nr_seq_localizacao_p = 0))
		and (nr_seq_gerencia = nr_seq_gerencia_p or nr_seq_gerencia_p = 0)
		and	nr_seq_grupo	= nr_seq_grupo_des_p
		and	((a.cd_funcao = cd_funcao_p) or (cd_funcao_p = -1));
end if;

/*Retorna a quantidade de erros considerando o DOC ERRO identificados na base da Wheb*/

if (ie_tipo_inf_p in ('PRIN')) then

		select	count(distinct nr_sequencia)
		into STRICT	qt_erro_w
		from	os_erro_gerencia_v a
		where	dt_ordem_servico between dt_ref_mes_w and dt_fim_mes_w
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and	ie_ident_erro	= 'W'
		and	((a.nr_seq_localizacao = nr_seq_localizacao_p) or (nr_seq_localizacao_p = 0))
		and (nr_seq_gerencia = nr_seq_gerencia_p or nr_seq_gerencia_p = 0)
		and	nr_seq_grupo	= nr_seq_grupo_des_p
		and	((a.cd_funcao = cd_funcao_p) or (cd_funcao_p = -1));
end if;

/*Retorna a quantidade de erros considerando o DOC ERRO externamente pelos clientes */

if (ie_tipo_inf_p in ('PREX')) then

		select	count(distinct nr_sequencia)
		into STRICT	qt_erro_w
		from	os_erro_gerencia_v a
		where	dt_ordem_servico between dt_ref_mes_w and dt_fim_mes_w
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and	ie_ident_erro	<> 'W'
		and	((a.nr_seq_localizacao = nr_seq_localizacao_p) or (nr_seq_localizacao_p = 0))
		and (nr_seq_gerencia = nr_seq_gerencia_p or nr_seq_gerencia_p = 0)
		and	nr_seq_grupo	= nr_seq_grupo_des_p
		and	((a.cd_funcao = cd_funcao_p) or (cd_funcao_p = -1));
end if;

/*Retorna a quantidade de erros considerando o DOC ERRO que foram identificados internamente na Wheb*/

if (ie_tipo_inf_p in ('ERI')) then

		select	count(distinct nr_sequencia)
		into STRICT	qt_erro_w
		from	os_erro_gerencia_v a
		where	dt_ordem_servico between dt_ref_mes_w and dt_fim_mes_w
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and	ie_ident_erro	= 'W'
		and	((a.nr_seq_localizacao = nr_seq_localizacao_p) or (nr_seq_localizacao_p = 0))
		and (nr_seq_gerencia = nr_seq_gerencia_p or nr_seq_gerencia_p = 0)
		and	nr_seq_grupo	= nr_seq_grupo_des_p
		and	((a.cd_funcao = cd_funcao_p) or (cd_funcao_p = -1));
end if;

/*Retorna a quantidade de erros considerando o DOC ERRO que foram identificados externamente pelos clientes*/

if (ie_tipo_inf_p in ('ERE')) then

		select	count(distinct nr_sequencia)
		into STRICT	qt_erro_w
		from	os_erro_gerencia_v a
		where	dt_ordem_servico between dt_ref_mes_w and dt_fim_mes_w
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and	ie_ident_erro	<> 'W'
		and	((a.nr_seq_localizacao = nr_seq_localizacao_p) or (nr_seq_localizacao_p = 0))
		and (nr_seq_gerencia = nr_seq_gerencia_p or nr_seq_gerencia_p = 0)
		and	nr_seq_grupo	= nr_seq_grupo_des_p
		and	((a.cd_funcao = cd_funcao_p) or (cd_funcao_p = -1));
end if;

/*Retorna a quantidade de OS encerrada que passou pelo Desenvolvimento/Tecnologia*/

if (ie_tipo_inf_p = 'EN') then

	select   count(*)
	into STRICT	 qt_os_encerrada_w
	from     os_encerrada_gerencia_v a
	where	((nr_seq_gerencia_p = 0) or (NR_SEQ_GERENCIA = nr_seq_gerencia_p))
	and	((a.nr_seq_localizacao = nr_seq_localizacao_p) or (nr_seq_localizacao_p = 0))
	and	dt_fim_real between dt_ref_mes_w and dt_fim_mes_w
	and	nr_seq_grupo_des	= nr_seq_grupo_des_p
	and	((a.cd_funcao = cd_funcao_p) or (cd_funcao_p = -1));

end if;
/*Retorna a quantidade de OS encerrada com Grau de Satisfação*/

if ( ie_tipo_inf_p in ('PRI','ENS')) then
	select   count(*)
	into STRICT	 qt_os_encerrada_classif_w
	from     os_encerrada_satisf_gerencia_v a
	where   ((nr_seq_gerencia_p = 0) or (NR_SEQ_GERENCIA = nr_seq_gerencia_p))
	and	((a.nr_seq_localizacao = nr_seq_localizacao_p) or (nr_seq_localizacao_p = 0))
	and	dt_fim_real between dt_ref_mes_w and dt_fim_mes_w
	and	nr_seq_grupo_des	= nr_seq_grupo_des_p
	and	((a.cd_funcao = cd_funcao_p) or (cd_funcao_p = -1));

end if;
/*Retorna a quantidade de OS encerrada com Grau de Satisfação Irregular*/

if (ie_tipo_inf_p in ('QTI','PRI')) then

	select	count(*)
	into STRICT	qt_os_insatisf_w
	from	os_insatisfacao_gerencia_v a
	where   ((nr_seq_gerencia_p = 0) or (NR_SEQ_GERENCIA = nr_seq_gerencia_p))
	and	((a.nr_seq_localizacao = nr_seq_localizacao_p) or (nr_seq_localizacao_p = 0))
	and	dt_fim_real between dt_ref_mes_w and dt_fim_mes_w
	and	nr_seq_grupo	= nr_seq_grupo_des_p
	and	((a.cd_funcao = cd_funcao_p) or (cd_funcao_p = -1));
end if;

if (ie_tipo_inf_p = 'QT') then
	return qt_total_os_w;
elsif (ie_tipo_inf_p = 'ER') then
	return qt_erro_w;
elsif (ie_tipo_inf_p = 'EN') then
	return qt_os_encerrada_w;
elsif (ie_tipo_inf_p = 'PR') then
	return dividir(qt_erro_w, qt_total_os_w)*100;
elsif (ie_tipo_inf_p = 'PRIN') then
	return dividir(qt_erro_w, qt_total_os_w)*100;
elsif (ie_tipo_inf_p = 'PREX') then
	return dividir(qt_erro_w, qt_total_os_w)*100;
elsif (ie_tipo_inf_p = 'QTI') then
	return	qt_os_insatisf_w;
elsif (ie_tipo_inf_p = 'PRI') then
	return dividir(qt_os_insatisf_w, qt_os_encerrada_classif_w)*100;
elsif (ie_tipo_inf_p = 'ENS') then
	return	qt_os_encerrada_classif_w;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_inf_os_ger_loc_grupo (dt_parametro_p timestamp, nr_seq_gerencia_p bigint, nr_seq_grupo_des_p bigint, ie_tipo_inf_p text, ie_tipo_valor_p text, nr_seq_localizacao_p bigint, cd_funcao_p bigint default -1) FROM PUBLIC;

