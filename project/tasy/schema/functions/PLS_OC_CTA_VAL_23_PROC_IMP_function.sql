-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_oc_cta_val_23_proc_imp ( dados_validacao_p pls_ocor_imp_pck.dados_regra_val_util_item, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, dados_conta_proc_p pls_ocor_imp_pck.dados_conta_proc) RETURNS PLS_OCOR_IMP_PCK.DADOS_RET_VAL_23 AS $body$
DECLARE


ds_observacao_w		varchar(32000);
ds_sql_w			varchar(4000);
ds_campo_sql_w		varchar(500);
dados_outro_proc_w	pls_ocor_imp_pck.dados_conta_proc;
dados_restricao_w	pls_ocor_imp_pck.dados_restricao_select;
ie_insere_outro_proc_w	varchar(1);
qt_proc_lib_total_w	double precision;
bind_sql_valor_w	sql_pck.t_dado_bind;
cursor_w			sql_pck.t_cursor;
ie_valido_extra_w	varchar(1);
dados_ret_val_23_w	pls_ocor_imp_pck.dados_ret_val_23;
qt_excedido_w		pls_conta_proc.qt_procedimento%type;
ie_estagio_w		varchar(20);

BEGIN

if (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '') then
	
	-- Inicializa as variaveis
	ds_observacao_w := null;
	ds_campo_sql_w := null;
	dados_restricao_w.ds_restricao_proc := '';
	dados_restricao_w.ds_restricao_mat := '';
	qt_proc_lib_total_w := 0;
	
	-- Obtem as restricoes conforme cadastrado na regra para que sejam buscados os itens que estao de acordo com a estrutura montada para contabilizar e verificar a quantidade total utilizada deste procedimento em outros itens							
	bind_sql_valor_w := pls_oc_cta_rest_val_23_imp(	dados_validacao_p, dados_conta_proc_p, null, bind_sql_valor_w);
								
	-- Recupera os procedimentos que foram executados e se encaixam na regra montada
	ds_sql_w :=	' select	outro_proc.nr_seq_conta, 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_sequencia, 		' || pls_util_pck.enter_w ||
			'	outro_proc.cd_guia_referencia, 		' || pls_util_pck.enter_w ||
			'	outro_proc.dt_procedimento,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_prestador_exec,	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_medico_executor, 		' || pls_util_pck.enter_w ||
			'	outro_proc.ie_origem_proced,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_procedimento,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_cid_principal_conta, 	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_cat_cid_principal_conta, 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_cbo_saude,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.sg_cons_prof_prest_nota_serv,' || pls_util_pck.enter_w ||
			'	outro_proc.nr_cons_prof_prest_nota_serv,' || pls_util_pck.enter_w ||
			'	outro_proc.sg_uf_cons_prest_nota_serv,	' || pls_util_pck.enter_w ||
			'	outro_proc.ie_tipo_guia,			' || pls_util_pck.enter_w ||
			'	nvl(outro_proc.qt_executado,0) qt_procedimento,	' || pls_util_pck.enter_w ||
			'	''Importando'' ie_estagio	' || pls_util_pck.enter_w ||
			' from	pls_conta_proc_ocor_imp_v outro_proc, 	' || pls_util_pck.enter_w ||
			'	pls_protocolo_conta_imp prot, 		' || pls_util_pck.enter_w ||
			'	pls_conta_imp conta			' || pls_util_pck.enter_w ||
			' where	1 = 1 					' || pls_util_pck.enter_w ||
			' and	prot.nr_sequencia = conta.nr_seq_protocolo ' || pls_util_pck.enter_w ||
			' and	prot.ie_situacao not in (''T'', ''RE'')	'|| pls_util_pck.enter_w ||
			' and	outro_proc.nr_seq_conta = conta.nr_sequencia	'|| pls_util_pck.enter_w ||
			dados_restricao_w.ds_restricao_proc		  || pls_util_pck.enter_w ||
			' union all 					' || pls_util_pck.enter_w ||
			' select	outro_proc.nr_seq_conta, 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_sequencia, 		' || pls_util_pck.enter_w ||
			'	outro_proc.cd_guia_referencia, 		' || pls_util_pck.enter_w ||
			'	outro_proc.dt_procedimento,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_prestador_exec,	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_medico_executor, 		' || pls_util_pck.enter_w ||
			'	outro_proc.ie_origem_proced,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_procedimento,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_cid_principal_conta, 	' || pls_util_pck.enter_w ||
			'	outro_proc.cd_cat_cid_principal_conta, 	' || pls_util_pck.enter_w ||
			'	outro_proc.nr_seq_cbo_saude,	 	' || pls_util_pck.enter_w ||
			'	outro_proc.sg_cons_prof_prest_nota_serv,' || pls_util_pck.enter_w ||
			'	outro_proc.nr_cons_prof_prest_nota_serv,' || pls_util_pck.enter_w ||
			'	outro_proc.sg_uf_cons_prest_nota_serv,	' || pls_util_pck.enter_w ||
			'	outro_proc.ie_tipo_guia,			' || pls_util_pck.enter_w ||
			'	nvl(outro_proc.qt_ok,0) qt_procedimento,	' || pls_util_pck.enter_w ||
			'	''Integrado'' ie_estagio,	' || pls_util_pck.enter_w ||
			'   outro_proc.ie_via_acesso            ' || pls_util_pck.enter_w ||
			' from	pls_conta_proc_ocor_v outro_proc	' || pls_util_pck.enter_w ||
			' where	1 = 1 					' || pls_util_pck.enter_w ||
			dados_restricao_w.ds_restricao_proc		|| pls_util_pck.enter_w ||
			' order by dt_procedimento';
													
	-- Executa o comando e devolve o cursor	
	
	bind_sql_valor_w := sql_pck.executa_sql_cursor(ds_sql_w, bind_sql_valor_w);
	
	loop
		fetch 	cursor_w 
		into	dados_outro_proc_w.nr_seq_conta, 	
			dados_outro_proc_w.nr_seq_conta_proc, 
			dados_outro_proc_w.cd_guia_referencia,	
			dados_outro_proc_w.dt_procedimento, 
			dados_outro_proc_w.nr_seq_prestador_exec,
			dados_outro_proc_w.cd_medico_executor, 
			dados_outro_proc_w.ie_origem_proced,
			dados_outro_proc_w.cd_procedimento, 
			dados_outro_proc_w.cd_cid,
			dados_outro_proc_w.cd_cat_cid, 
			dados_outro_proc_w.nr_seq_cbo_saude,
			dados_outro_proc_w.sg_cons_prof_prest_nota_serv, 
			dados_outro_proc_w.nr_cons_prof_prest_nota_serv,
			dados_outro_proc_w.sg_uf_cons_prest_nota_serv,
			dados_outro_proc_w.ie_tipo_guia,
			dados_outro_proc_w.qt_procedimento,
			ie_estagio_w,
      dados_outro_proc_w.ie_via_acesso;
		EXIT WHEN NOT FOUND; /* apply on cursor_w */
		
		-- verificacoes extras que foram retiradas da clausula where do select acima por motivos de performance
		ie_valido_extra_w := pls_oc_cta_val_23_if_extra_imp(	dados_validacao_p,
									dados_conta_proc_p, 
									null,
									dados_outro_proc_w, 
									null,
									'P');
		-- se retornar S, significa que as condicoes foram atendidas	
		if (ie_valido_extra_w = 'S') then
					
			-- Verifica se o procedimento deve ser considerado para a  regra de utilizacao. 

			-- Obs: esta function valida os procedimentos de referencia, seus status e tambem os participantes do item.
			ie_insere_outro_proc_w := pls_oc_cta_val_23_consid_imp(	dados_validacao_p,
										dados_conta_proc_p.nr_seq_conta_proc,
										dados_outro_proc_w.nr_seq_conta_proc);
			
							
			-- Se o procedimento se encaixa nas caracteristicas do procedimento  sendo consistido conforme a regra montada para a validacao entao o mesmo e inserido na tabela auxiliar
			if (ie_insere_outro_proc_w = 'S') then
				
				-- Incrementar a quantidade total com a quantidade utilizada para a contabilizacao
				qt_proc_lib_total_w := qt_proc_lib_total_w + dados_outro_proc_w.qt_procedimento;
				
				ds_observacao_w := 	substr(ds_observacao_w || pls_util_pck.enter_w ||
							'Conta: ' || dados_outro_proc_w.nr_seq_conta ||
							' | Guia: ' || dados_outro_proc_w.cd_guia_referencia ||
							' | Proc: ' || dados_outro_proc_w.nr_seq_conta_proc || 
							' | Quant: ' || dados_outro_proc_w.qt_procedimento||
							' | Data: '||dados_outro_proc_w.dt_procedimento ||
							' | estagio: '||ie_estagio_w,1,2000);
						
			end if;
		end if;
		-- ja sai direto (performance)

		-- se precisar colocar todas as observacoes vai ser preciso rever essa situacao
		if (qt_proc_lib_total_w > dados_validacao_p.qt_liberada) then
			exit;
		end if;
	end loop;
	
	close cursor_w;
	
	-- Se nao ultrapassou a quantidade definida pela regra entao limpa a observacao pois nao precisa gerar nada
			
	if (qt_proc_lib_total_w <= dados_validacao_p.qt_liberada) then
		ds_observacao_w := null;
	else
		-- Complementa a observacao
		ds_observacao_w := 	'Este item ultrapassa a quantidade permitida!' || pls_util_pck.enter_w ||
					'Quantidade permitida pela regra: ' || dados_validacao_p.qt_liberada || pls_util_pck.enter_w ||
					'Quantidade de itens executados: ' || qt_proc_lib_total_w || pls_util_pck.enter_w ||
					'Itens utilizados no periodo verificado: ' || pls_util_pck.enter_w ||
					ds_observacao_w;
		qt_excedido_w	:= coalesce(qt_proc_lib_total_w,0)	- coalesce(dados_validacao_p.qt_liberada,0);
		
	end if;	
end if;

dados_ret_val_23_w.ds_observacao:= substr(ds_observacao_w, 1, 4000);
dados_ret_val_23_w.qt_excedido	:= qt_excedido_w;

return dados_ret_val_23_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_oc_cta_val_23_proc_imp ( dados_validacao_p pls_ocor_imp_pck.dados_regra_val_util_item, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, dados_conta_proc_p pls_ocor_imp_pck.dados_conta_proc) FROM PUBLIC;

