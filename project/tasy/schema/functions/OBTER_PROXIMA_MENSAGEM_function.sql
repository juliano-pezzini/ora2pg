-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function obter_proxima_mensagem as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION obter_proxima_mensagem ( ds_agrupador_p text, ie_tipo_mensagem_p text) RETURNS bigint AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	bigint;
BEGIN
	v_query := 'SELECT * FROM obter_proxima_mensagem_atx ( ' || quote_nullable(ds_agrupador_p) || ',' || quote_nullable(ie_tipo_mensagem_p) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret bigint);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION obter_proxima_mensagem_atx ( ds_agrupador_p text, ie_tipo_mensagem_p text) RETURNS bigint AS $body$
DECLARE
nr_hash_parametro_w	varchar(255);
nr_hash_agrupador_w	varchar(255);
nr_seq_mensagem_w	bigint;
ie_status_w		varchar(1);
nr_seq_primeiro_w		bigint;


/* Este cursor traz as mensagens pendentes para envio com estatus T(Transmissao)*/

c01 CURSOR FOR
SELECT 	a.nr_sequencia,
	ora_hash(a.ds_agrupador) nr_hash_agrupador
from	agendamento_integracao a,
	cliente_integracao c,
	log_integracao l
where	a.nr_seq_log		= l.nr_sequencia
and	l.nr_seq_informacao		= c.nr_seq_inf_integracao
and	ora_hash(a.ds_agrupador) 	= nr_hash_parametro_w
and	a.ie_status		= 'T'
and	coalesce(c.cd_estabelecimento_destino, a.cd_estabelecimento)	= a.cd_estabelecimento
and	coalesce(c.cd_setor_atendimento, 99999)			= coalesce(a.cd_setor_atendimento,99999)
order by a.nr_sequencia, nr_hash_agrupador;



BEGIN

select	ora_hash(ds_agrupador_p)
into STRICT	nr_hash_parametro_w
;

if (ie_tipo_mensagem_p = 'T') then
	--Para pegar o primeiro da lista
	open c01;
	fetch c01 into nr_seq_mensagem_w, nr_hash_agrupador_w;
	close c01;


	select	min(a.nr_sequencia)
	into STRICT	nr_seq_primeiro_w
	from	agendamento_integracao a,
		cliente_integracao c,
		log_integracao l
	where	a.nr_seq_log		= l.nr_sequencia
	and	l.nr_seq_informacao		= c.nr_seq_inf_integracao
	and	ora_hash(a.ds_agrupador) 	= nr_hash_agrupador_w
	and	coalesce(c.cd_estabelecimento_destino, a.cd_estabelecimento) = a.cd_estabelecimento;

	--Caso ainda tiver uma mensagem com o mesmo hash processando, entao cancela
	if (nr_seq_primeiro_w IS NOT NULL AND nr_seq_primeiro_w::text <> '') then


		select	max(a.ie_status)
		into STRICT	ie_status_w
		from	agendamento_integracao a,
			cliente_integracao c,
			log_integracao l
		where	a.nr_seq_log		= l.nr_sequencia
		and	l.nr_seq_informacao		= c.nr_seq_inf_integracao
		and	a.nr_sequencia = nr_seq_primeiro_w
		and	coalesce(c.cd_estabelecimento_destino, a.cd_estabelecimento) = a.cd_estabelecimento;

		if (ie_status_w in ('C', 'F', 'O')) then
			begin

				/*Caso uma das mensagens do grupo ficar em contingencia, todas tambem devem para que ao subir o servidor destino nao
				sejam encaminhadas fora de ordem*/
				if (ie_status_w = 'C') then

					begin
					update	agendamento_integracao a
					set	a.ie_status = 'C'
					where	ora_hash(a.ds_agrupador) 	= nr_hash_agrupador_w
					and	a.ie_status <> 'O'
					and	a.nr_sequencia <> nr_seq_primeiro_w;


					update	agendamento_integracao a
					set	a.ie_status = 'T'
					where	a.nr_sequencia = nr_seq_primeiro_w;

					commit;

					exception when others then
						rollback;
					end;
				elsif (ie_status_w = 'O') then

					/*Caso o status for O, tambem define as DEPENDENTES como Contingencia(C)*/

					update	agendamento_integracao a
					set	a.ie_status = 'C'
					where	ora_hash(a.ds_agrupador) 	= nr_hash_agrupador_w
					and	a.ie_status <> 'O';

					commit;
				end if;


			-- Tanto F como C nao devem permitir que a proxima mensagem seja encaminhada
			nr_seq_mensagem_w	:= '';
		end;
		end if;

	end if;
end if;

return nr_seq_mensagem_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION obter_proxima_mensagem ( ds_agrupador_p text, ie_tipo_mensagem_p text) FROM PUBLIC; -- REVOKE ALL ON FUNCTION obter_proxima_mensagem_atx ( ds_agrupador_p text, ie_tipo_mensagem_p text) FROM PUBLIC;

