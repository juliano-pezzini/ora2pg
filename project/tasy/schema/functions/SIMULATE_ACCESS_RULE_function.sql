-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION simulate_access_rule ( nm_usuario_p text, cd_pf_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint, cd_setor_usuario_p bigint, nr_atendimento_p bigint, cd_pf_paciente_p text) RETURNS varchar AS $body$
DECLARE

 
nr_seq_privacy_rule_w		bigint;
nr_seq_rec_access_encounter_w 	bigint;
nr_seq_rec_access_med_record_w 	bigint;
ie_access_w 			varchar(2);
ie_type_release_access_w 	varchar(2);
ds_msg_permission_w 		varchar(1000);
ie_require_reason_w 		varchar(2);
ie_permission_w 		varchar(2);
ie_release_access_med_record_w 	varchar(2);
ds_retorno_w 			varchar(4000);
ds_regra_exige_w 		varchar(4000);
ds_regra_permite_w 		varchar(4000);
nm_usuario_autor_acesso_w	varchar(255);

ds_rule_w 						privacy_rule.ds_rule%type;
dt_vality_start_w      	privacy_rule.dt_vality_start%type;
dt_vality_end_w       	privacy_rule.dt_vality_end%type;
nr_adt_time_discharge_w			privacy_rule.nr_adt_time_discharge%type;
nr_adt_time_transfer_w			privacy_rule.nr_adt_time_transfer%type;
ie_encounter_discharge_w 		privacy_rule.ie_encounter_discharge%type;
ie_encounter_closed_account_w	privacy_rule.ie_encounter_closed_account%type;
ie_encounter_previous_w			privacy_rule.ie_encounter_previous%type;
ie_encounter_deceased_w			privacy_rule.ie_encounter_deceased%type;
ie_require_justify_w 			privacy_rule.ie_require_justify%type;
ie_require_second_user_w 		privacy_rule.ie_require_second_user%type;
ie_release_access_encounter_w 	privacy_rule.ie_release_access_encounter%type;
ie_add_log_message_w			privacy_rule.ie_add_log_message%type;

cd_pf_usuario_w					pessoa_fisica.cd_pessoa_fisica%type;	
cd_exp_valor_dominio_w 			valor_dominio.cd_exp_valor_dominio%type;


BEGIN 
 
--Busca as informações do usuário 
if ((coalesce(cd_pf_usuario_p::text, '') = '' or cd_pf_usuario_p = 0) and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '')) then	 
	select 	max(cd_pessoa_fisica) 
	into STRICT 	cd_pf_usuario_w 
	from 	usuario 
	where 	nm_usuario = nm_usuario_p;
end if;	
 
--Executa a procedure de validação das regras de acesso 
SELECT * FROM validate_access_rules( 
	nm_usuario_p, coalesce(cd_pf_usuario_p, cd_pf_usuario_w), cd_perfil_p, cd_estabelecimento_p, cd_setor_usuario_p, nr_atendimento_p, cd_pf_paciente_p, clock_timestamp(), nr_seq_privacy_rule_w, nr_seq_rec_access_encounter_w, nr_seq_rec_access_med_record_w, ie_access_w, ie_type_release_access_w, ds_msg_permission_w, ie_require_justify_w, ie_require_reason_w, ie_require_second_user_w, ie_permission_w, ie_release_access_encounter_w, ie_release_access_med_record_w, ds_rule_w, ie_add_log_message_w) INTO STRICT nr_seq_privacy_rule_w, nr_seq_rec_access_encounter_w, nr_seq_rec_access_med_record_w, ie_access_w, ie_type_release_access_w, ds_msg_permission_w, ie_require_justify_w, ie_require_reason_w, ie_require_second_user_w, ie_permission_w, ie_release_access_encounter_w, ie_release_access_med_record_w, ds_rule_w, ie_add_log_message_w;
 
--Busca as informações da regra de acesso 
if (nr_seq_privacy_rule_w IS NOT NULL AND nr_seq_privacy_rule_w::text <> '') then 
	select 	max(ds_rule), 
		max(dt_vality_start), 
		max(dt_vality_end), 
		max(ie_encounter_discharge), 
		max(ie_encounter_closed_account), 
		max(ie_encounter_previous), 
		max(ie_encounter_deceased), 
		max(nr_adt_time_discharge), 
		max(nr_adt_time_transfer) 
	into STRICT	ds_rule_w, 
		dt_vality_start_w,  
		dt_vality_end_w, 
		ie_encounter_discharge_w, 
		ie_encounter_closed_account_w, 
		ie_encounter_previous_w, 
		ie_encounter_deceased_w, 
		nr_adt_time_discharge_w, 
		nr_adt_time_transfer_w 
	from 	privacy_rule 
	where 	nr_sequencia = 	nr_seq_privacy_rule_w;
 
end if;
 
select 	max(b.nr_sequencia) 
into STRICT 	cd_exp_valor_dominio_w 
from 	valor_dominio a, dic_objeto b 
where 	a.vl_dominio = ie_type_release_access_w 
and 	a.cd_dominio = 8420 
and 	b.cd_funcao = 329 
and 	b.cd_exp_informacao = a.cd_exp_valor_dominio;
 
--Acesso de usuário liberado 
if (ie_access_w = 'Y') then --Yes 
 
	if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then					 
		ds_retorno_w := obter_texto_tasy(831430, null);
		--Com os filtros utilizados será permitido o acesso às informações relacionadas ao atendimento do paciente. 
	else			 
		ds_retorno_w := obter_texto_tasy(831438, null);
		--Com os filtros utilizados será permitido o acesso às informações relacionadas ao prontuário do paciente. 
	end if;
						 
	ds_retorno_w := ds_retorno_w || chr(10) || chr(10) || replace(obter_texto_tasy(831439, null),'#@DS_TYPE#@',obter_texto_tasy(cd_exp_valor_dominio_w, null));
	--A regra é do tipo: #@DS_TYPE#@. 
	 
	if (ie_type_release_access_w = 'RE') then --Liberação de acesso ao atendimento 
 
		select 	max(nm_usuario) 
		into STRICT	nm_usuario_autor_acesso_w 
		from 	pep_autor_acesso_atend 
		where 	nr_sequencia = nr_seq_rec_access_encounter_w;
		 
		ds_retorno_w := ds_retorno_w || chr(10) || chr(10) || replace(replace(obter_texto_tasy(831488, null), '#@NM_USUARIO#@', nm_usuario_autor_acesso_w), '#@NR_SEQUENCE#@', nr_seq_rec_access_encounter_w);
		--O registro responsável pela liberação do acesso ao atendimento, foi realizado pelo usuário #@NM_USUARIO#@ na função Prontuário Eletrônico do Paciente - PEP, sequência do registro: #@NR_SEQUENCE#@. 
 
	elsif (ie_type_release_access_w = 'RM') then --Liberação de acesso ao prontuário 
		 
		select 	max(nm_usuario) 
		into STRICT	nm_usuario_autor_acesso_w 
		from 	pep_autor_acesso 
		where 	nr_sequencia = nr_seq_rec_access_med_record_w;
		 
		ds_retorno_w := ds_retorno_w || chr(10) || chr(10) || replace(replace(obter_texto_tasy(831489, null), '#@NM_USUARIO#@', nm_usuario_autor_acesso_w), '#@NR_SEQUENCE#@', nr_seq_rec_access_med_record_w);--O registro responsável pela liberação do acesso ao prontuário, foi realizado pelo usuário #@NM_USUARIO#@ na função Prontuário Eletrônico do Paciente - PEP, sequência do registro: #@NR_SEQUENCE#@. 
	else
 
		if (nr_seq_privacy_rule_w IS NOT NULL AND nr_seq_privacy_rule_w::text <> '') then																					 
 
			ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838437, null) || ': ' || nr_seq_privacy_rule_w;
			--Código 
 
			ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838438, null) || ': ' || ds_rule_w;
			--Descrição 
 
			ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838439, null) || ': ' || pkg_date_formaters.to_varchar(dt_vality_start_w, 'shortDate', cd_estabelecimento_p, nm_usuario_p);
			--Data de início de validade da regra 
 
			if (dt_vality_end_w IS NOT NULL AND dt_vality_end_w::text <> '') then	 
				ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(831440, null) || ': ' || pkg_date_formaters.to_varchar(dt_vality_end_w, 'shortDate', cd_estabelecimento_p, nm_usuario_p);
				--Data de fim de validade da regra 
			else 
				ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(831441, null);
				--Data de fim de validade da regra: Não definida. 
			end if;
 
			ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838385, null) || ': ' || nr_adt_time_discharge_w;
			--Tempo adicional após a alta (em horas) 
 
			ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838386, null) || ': ' || nr_adt_time_transfer_w;
			--Tempo adicional após a transferência (em horas) 
 
			if (ie_require_justify_w = 'Y') then --Yes 
				ds_regra_exige_w := '-' || obter_texto_tasy(831447, null) || '.' || chr(10);
				--Requer que o usuário escreva uma justificativa do acesso 
			end if;
			 
			if (ie_require_second_user_w = 'Y') then --Yes 
				ds_regra_exige_w := ds_regra_exige_w || '-' || obter_texto_tasy(831450, null) || chr(10);
				--Requer um segundo usuário para liberar o acesso 
			end if;
 
			if (ie_require_reason_w IS NOT NULL AND ie_require_reason_w::text <> '') then 
				ds_regra_exige_w := ds_regra_exige_w || '-' || obter_texto_tasy(831449, null) || ': ' || obter_valor_dominio(8415, ie_require_reason_w) || '.' || chr(10);
				--Forma de requerer que o usuário escolha o motivo do acesso 
			end if;	
 
			if (ds_msg_permission_w IS NOT NULL AND ds_msg_permission_w::text <> '') then 
				ds_regra_exige_w := ds_regra_exige_w || '-' || replace(obter_texto_tasy(831446, null),'#@DS_MESSAGE#@',ds_msg_permission_w) || chr(10);
				--Mensagem de acesso: #@DS_MESSAGE#@ 
			end if;	
			 
			if (ds_regra_exige_w IS NOT NULL AND ds_regra_exige_w::text <> '') then 
				ds_retorno_w := ds_retorno_w || chr(10) || chr(10) || replace(obter_texto_tasy(831451, null),'#@DS_RULE_REQUIRES#@',ds_regra_exige_w);
				--As consistências necessárias para a liberação do acesso são: #@DS_RULE_REQUIRES#@ 
			end if;
			 
			if (ie_encounter_discharge_w = 'Y') then --Yes 
				ds_regra_permite_w := '-' || obter_texto_tasy(838367, null) || chr(10);
				--Usuário pode acessar atendimentos com alta 
			end if;
 
			if (ie_encounter_closed_account_w = 'Y') then --Yes 
				ds_regra_permite_w := ds_regra_permite_w || '-' || obter_texto_tasy(838368, null) || chr(10);
				--Usuário pode acessar atendimentos com conta fechada 
			end if;
 
			if (ie_encounter_previous_w = 'Y') then --Yes 
				ds_regra_permite_w := ds_regra_permite_w || '-' || obter_texto_tasy(838369, null) || chr(10);
				--Usuário pode acessar atendimentos anteriores 
			end if;
 
			if (ie_encounter_deceased_w = 'Y') then --Yes 
				ds_regra_permite_w := ds_regra_permite_w || '-' || obter_texto_tasy(838370, null) || chr(10);
				--Usuário pode acessar atendimentos de pacientes com óbito 
			end if;
			 
			if (ie_release_access_encounter_w = 'Y') then --Yes 
				ds_regra_permite_w := ds_regra_permite_w || '-' || obter_texto_tasy(831454, null) || chr(10);
				--Usuário tem permissão para liberar acesso a atendimentos 
			end if;
 
			if (ie_release_access_med_record_w = 'Y') then --Yes 
				ds_regra_permite_w := ds_regra_permite_w || '-' || obter_texto_tasy(831455, null) || chr(10);
				--Usuário tem permissão para liberar acesso a prontuário de pacientes 
			end if;
			 
			if (ie_permission_w = 'RW') then --Read and write 
				ds_regra_permite_w := ds_regra_permite_w || '-' || obter_texto_tasy(831458, null) || chr(10);
				--Usuário tem permissão de leitura e escrita. 
			else 
				ds_regra_permite_w := ds_regra_permite_w || '-' || obter_texto_tasy(831460, null) || chr(10);
				--Usuário tem permissão apenas para leitura. 
			end if;
 
			if (ds_regra_permite_w IS NOT NULL AND ds_regra_permite_w::text <> '') then 
				ds_retorno_w := ds_retorno_w || chr(10) || replace(obter_texto_tasy(831456, null),'#@DS_RULE_ALLOWS#@',ds_regra_permite_w);--As permissões liberadas pela regra de acesso são: #@DS_RULE_ALLOWS#@ 
			end if;
			 
		end if;		
	end if;
 
else --Acesso do usuário foi negado 
 
		if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then 
			ds_retorno_w := obter_texto_tasy(831463, null);
			--Com os filtros utilizados será negado o acesso às informações relacionadas ao atendimento do paciente. 
		else 
			ds_retorno_w := obter_texto_tasy(831464, null);
			--Com os filtros utilizados será negado o acesso às informações relacionadas ao prontuário do paciente. 
		end if;
		 
		--DR: Regra de privacidade por setor 
		--GR: Regra de acesso por grupo de usuários 
		--PR: Regra de privacidade por perfil 
		--TR: Regra de privacidade por equipe 
		if (ie_type_release_access_w in ('DR', 'GR', 'PR', 'TR')) then 
 
			ds_retorno_w := ds_retorno_w || chr(10) || chr(10) || replace(obter_texto_tasy(831439, null),'#@DS_TYPE#@',obter_texto_tasy(cd_exp_valor_dominio_w, null));
			--A regra é do tipo: #@DS_TYPE#@. 
 
			--Regra de acesso 
			if (nr_seq_privacy_rule_w IS NOT NULL AND nr_seq_privacy_rule_w::text <> '') then 
 
				ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838437, null) || ': ' || nr_seq_privacy_rule_w;
				--Código 
 
				ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838438, null) || ': ' || ds_rule_w;
				--Descrição 
 
				ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838439, null) || ': ' || pkg_date_formaters.to_varchar(dt_vality_start_w, 'shortDate', cd_estabelecimento_p, nm_usuario_p);
				--Data de início de validade da regra 
 
				if (dt_vality_end_w IS NOT NULL AND dt_vality_end_w::text <> '') then	 
					ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(831440, null) || ': ' || pkg_date_formaters.to_varchar(dt_vality_end_w, 'shortDate', cd_estabelecimento_p, nm_usuario_p);
					--Data de fim de validade da regra 
				else 
					ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(831441, null);
					--Data de fim de validade da regra: Não definida. 
				end if;
 
				ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838385, null) || ': ' || nr_adt_time_discharge_w;
				--Tempo adicional após a alta (em horas) 
 
				ds_retorno_w := ds_retorno_w || chr(10) || obter_texto_tasy(838386, null) || ': ' || nr_adt_time_transfer_w;
				--Tempo adicional após a transferência (em horas) 
 
			end if;
 
		elsif (ie_type_release_access_w = 'E') then --Regra padrão do estabelecimento 
 
			--Regra padrão do estabelecimento 
			if (ds_msg_permission_w IS NOT NULL AND ds_msg_permission_w::text <> '') then 
				ds_retorno_w := ds_retorno_w || chr(10) || chr(10) || ds_msg_permission_w;
			else 
				ds_retorno_w := ds_retorno_w || chr(10) || chr(10) || obter_texto_tasy(831467, null);
				--O acesso será negado, conforme a regra padrão configurada para o estabelecimento informado. 
			end if;
 
		end if;
end if;	
 
return ds_retorno_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION simulate_access_rule ( nm_usuario_p text, cd_pf_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint, cd_setor_usuario_p bigint, nr_atendimento_p bigint, cd_pf_paciente_p text) FROM PUBLIC;

