-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function get_case_encounter_type as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION get_case_encounter_type ( nr_seq_episodio_p bigint, nr_seq_tipo_episodio_p bigint, nr_atendimento_p bigint, ie_tipo_atendimento_p text) RETURNS varchar AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	varchar;
BEGIN
	v_query := 'SELECT * FROM get_case_encounter_type_atx ( ' || quote_nullable(nr_seq_episodio_p) || ',' || quote_nullable(nr_seq_tipo_episodio_p) || ',' || quote_nullable(nr_atendimento_p) || ',' || quote_nullable(ie_tipo_atendimento_p) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret varchar);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE FUNCTION get_case_encounter_type_atx ( nr_seq_episodio_p bigint, nr_seq_tipo_episodio_p bigint, nr_atendimento_p bigint, ie_tipo_atendimento_p text) RETURNS varchar AS $body$
DECLARE


ie_tipo_atend_case_w		atendimento_paciente.ie_tipo_atendimento%type;
ie_tipo_atendimento_w		atendimento_paciente.ie_tipo_atendimento%type;
nr_seq_episodio_w			episodio_paciente.nr_sequencia%type;
nr_seq_tipo_episodio_w		episodio_paciente.nr_seq_tipo_episodio%type;
ie_tipo_atend_retorno_w		atendimento_paciente.ie_tipo_atendimento%type;

    function get_tipo_atendimento(nr_atendimento_p bigint) return text is
        ie_tipo_atendimento_w atendimento_paciente.ie_tipo_atendimento%type := null;
BEGIN
        begin
            select	ie_tipo_atendimento
            into STRICT	ie_tipo_atendimento_w
            from	atendimento_paciente
            where	nr_atendimento = nr_atendimento_p;
        exception
            when others then
                ie_tipo_atendimento_w := null;
        end;

        return ie_tipo_atendimento_w;

    end;

    function get_nr_episodio(nr_atendimento_p number) return number is
        nr_seq_episodio_w	atendimento_paciente.nr_seq_episodio%type;
        pragma autonomous_transaction;
    begin
        begin
            select	nr_seq_episodio
            into STRICT	nr_seq_episodio_w
            from	atendimento_paciente
            where	nr_atendimento = nr_atendimento_p;
        exception
            when others then
                nr_seq_episodio_w := null;
        end;

        return nr_seq_episodio_w;

    end;

begin
if (coalesce(ie_tipo_atendimento_p,'X') = 'X') then
    ie_tipo_atendimento_w := get_tipo_atendimento(nr_atendimento_p);
else
	ie_tipo_atendimento_w	:=	ie_tipo_atendimento_p;
end if;

if (coalesce(nr_seq_episodio_p::text, '') = '') then
    nr_seq_episodio_w := get_nr_episodio(nr_atendimento_p);
else
	nr_seq_episodio_w		:=	nr_seq_episodio_p;
end if;

if (coalesce(nr_seq_tipo_episodio_p::text, '') = '') then	
	begin
	select	nr_seq_tipo_episodio
	into STRICT	nr_seq_tipo_episodio_w
	from	episodio_paciente
	where	nr_sequencia = nr_seq_episodio_w;
	exception
	when others then
		nr_seq_tipo_episodio_w	:=	null;
	end;
else	
	nr_seq_tipo_episodio_w	:=	nr_seq_tipo_episodio_p;
end if;

begin
select	ie_tipo
into STRICT	ie_tipo_atend_case_w
from	tipo_episodio
where	nr_sequencia = nr_seq_tipo_episodio_w;
exception
when others then
	ie_tipo_atend_case_w	:=	null;
end;

if (ie_tipo_atendimento_w in ('1','8')) then
	ie_tipo_atend_retorno_w	:=	ie_tipo_atendimento_w;
else
	ie_tipo_atend_retorno_w	:=	coalesce(ie_tipo_atend_case_w, ie_tipo_atendimento_w);
end if;

return	ie_tipo_atend_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION get_case_encounter_type ( nr_seq_episodio_p bigint, nr_seq_tipo_episodio_p bigint, nr_atendimento_p bigint, ie_tipo_atendimento_p text) FROM PUBLIC; -- REVOKE ALL ON FUNCTION get_case_encounter_type_atx ( nr_seq_episodio_p bigint, nr_seq_tipo_episodio_p bigint, nr_atendimento_p bigint, ie_tipo_atendimento_p text) FROM PUBLIC;

