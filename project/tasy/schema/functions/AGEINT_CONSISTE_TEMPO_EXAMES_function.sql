-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION ageint_consiste_tempo_exames ( cd_agenda_p bigint, hr_Agenda_p timestamp, nr_minuto_duracao_p bigint, nr_Seq_ageint_p bigint, nr_seq_ageint_item_p bigint, nm_usuario_p text) RETURNS varchar AS $body$
DECLARE


ds_retorno_w		varchar(1)	:= 'S';
nr_Seq_marcacao_w	bigint;
hr_Agenda_w		timestamp;
nr_minuto_duracao_w	bigint;
cd_Agenda_w		bigint;
qt_tempo_sala_w		bigint;
qt_sobra_w		bigint;
hr_max_agenda_w		timestamp;
hr_min_agenda_w		timestamp;
ds_retorno_max_w	varchar(1)	:= 'S';
ds_Retorno_min_w	varchar(1)	:= 'S';
nr_Seq_ageint_item_w	bigint;
nr_Seq_proc_interno_w	bigint;
nr_Seq_proc_marc_w	bigint;
qt_Tempo_Exame_w	bigint;
nr_Seq_regra_w		bigint;
cd_exame_w		bigint;
qt_Tempo_w		bigint;
nr_seq_proc_adic_w	bigint;
qt_proc_adic_w		bigint;
ie_regra_exclusiva_w	ageint_tempo_entre_exames.ie_regra_exclusiva%type;
ie_tempo_exclusivo_w	ageint_tempo_entre_exames.ie_tempo_exclusivo%type;
cd_exame_pri_w		ageint_tempo_entre_exames.cd_exame_pri%type;
cd_exame_seg_w		ageint_tempo_entre_exames.cd_exame_seg%type;

C01 CURSOR FOR
	SELECT	nr_Sequencia,
		coalesce(ie_regra_exclusiva,'N'),
		coalesce(ie_tempo_exclusivo,'N'),
		cd_exame_pri,
		cd_exame_seg
	from	ageint_tempo_entre_exames
	where	((cd_exame_pri	= nr_Seq_proc_interno_w)
		or (cd_exame_seg	= nr_seq_proc_interno_w))
	and		ie_situacao	= 'A'
	and		coalesce(cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento;

C02 CURSOR FOR
	SELECT	a.hr_Agenda,
			a.nr_minuto_duracao,
			b.nr_sequencia
	from	agenda_integrada_item b,
			ageint_marcacao_usuario a
	where	a.nr_seq_Ageint		= b.nr_seq_agenda_int
	and		a.nr_Seq_Ageint_item	= b.nr_sequencia
	and		a.nm_usuario		= nm_usuario_p
	and		a.nr_Seq_ageint		= nr_seq_ageint_p
	and		b.nr_seq_proc_interno = cd_exame_w
	and		b.nr_sequencia <> nr_seq_ageint_item_p;

C05 CURSOR FOR
	SELECT	a.hr_Agenda,
		a.nr_minuto_duracao,
		c.nr_sequencia
	from	ageint_exame_adic_item c,
		agenda_integrada_item b,
		ageint_marcacao_usuario a
	where	a.nr_seq_Ageint		= b.nr_seq_agenda_int
	and	a.nr_Seq_Ageint_item	= b.nr_sequencia
	and	a.nm_usuario		= nm_usuario_p
	and	c.nr_seq_item		= b.nr_sequencia
	and	c.nr_seq_proc_interno	= cd_exame_w
	and	a.nr_Seq_ageint		= nr_seq_ageint_p
	and	b.nr_sequencia		<> nr_seq_ageint_item_p;

C03 CURSOR FOR
	SELECT	nr_seq_proc_interno
	from	ageint_exame_adic_item
	where	nr_seq_item	= nr_seq_ageint_item_p
	order by nr_seq_proc_interno;

C04 CURSOR FOR
	SELECT	nr_seq_proc_interno
	from	ageint_exame_adic_item
	where	nr_seq_item		<> nr_seq_ageint_item_p
	and	nr_seq_proc_interno	= cd_exame_w
	order by nr_seq_proc_interno;


BEGIN



select	nr_Seq_proc_interno
into STRICT	nr_seq_proc_interno_w
from	agenda_integrada_item
where	nr_sequencia	= nr_Seq_Ageint_item_p;

/*
cursor das regras a qual o exame do item se aplica
*/
open C01;
loop
fetch C01 into
	nr_seq_regra_w,
	ie_regra_exclusiva_w,
	ie_tempo_exclusivo_w,
	cd_exame_pri_w,
	cd_exame_seg_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	CASE WHEN cd_Exame_pri=nr_Seq_proc_interno_w THEN  cd_exame_Seg  ELSE cd_exame_pri END ,
			qt_tempo
	into STRICT	cd_exame_w,
			qt_tempo_w
	from	ageint_tempo_entre_exames
	where	nr_sequencia	= nr_seq_regra_w;
	/*
	cursor das marcacoes com os exames ao qual a regra se aplica
	*/
	open C02;
	loop
	fetch C02 into
		hr_Agenda_w,
		nr_minuto_duracao_w,
		nr_seq_ageint_item_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		if (ie_regra_exclusiva_w = 'N') or (cd_exame_pri_w = nr_seq_proc_interno_w and hr_agenda_w >= hr_agenda_p) or (cd_exame_seg_w = nr_seq_proc_interno_w and hr_agenda_w <= hr_agenda_p) then
			if (ds_retorno_w	<> 'N') then
				if (hr_Agenda_w	< hr_Agenda_p) then
					select	Obter_Min_Entre_Datas((hr_Agenda_w + nr_minuto_duracao_w / 1440), hr_Agenda_p, 1)
					into STRICT	qt_sobra_w
					;
				else
					select	Obter_Min_Entre_Datas((hr_Agenda_p + nr_minuto_duracao_p / 1440), hr_Agenda_w, 1)
					into STRICT	qt_sobra_w
					;
				end if;

				if (qt_sobra_w	< qt_tempo_w) or (((qt_sobra_w - qt_tempo_w) <> 0) and (ie_tempo_exclusivo_w = 'S')) then
					ds_retorno_w	:= 'N';
				else
					ds_Retorno_w	:= 'S';
				end if;

				if (ds_retorno_w	<> 'N') then
					select	count(*)
					into STRICT	qt_proc_adic_w
					from	ageint_exame_adic_item
					where	nr_seq_item	= nr_seq_ageint_item_w;

					if (qt_proc_adic_w	> 0) then
						/*
						cursor dos exames adicionais dos itens que a regra se aplica
						*/
						open C04;
						loop
						fetch C04 into
							nr_seq_proc_adic_w;
						EXIT WHEN NOT FOUND; /* apply on C04 */
							begin
							if (ds_retorno_w	<> 'N') then
								if (hr_Agenda_w	< hr_Agenda_p) then
									select	Obter_Min_Entre_Datas((hr_Agenda_w + nr_minuto_duracao_w / 1440), hr_Agenda_p - 1/1440, 1)
									into STRICT	qt_sobra_w
									;
								else
									select	Obter_Min_Entre_Datas((hr_Agenda_p + nr_minuto_duracao_p / 1440), hr_Agenda_w - 1/1440, 1)
									into STRICT	qt_sobra_w
									;
								end if;

								if (qt_sobra_w	< qt_tempo_w) or (((qt_sobra_w - qt_tempo_w) <> 0) and (ie_tempo_exclusivo_w = 'S')) then
									ds_retorno_w	:= 'N';
								else
									ds_Retorno_w	:= 'S';
								end if;
							end if;
							end;
						end loop;
						close C04;
					end if;
				end if;

			end if;
		end if;
		end;
	end loop;
	close C02;

	open C05;
	loop
	fetch C05 into
		hr_Agenda_w,
		nr_minuto_duracao_w,
		nr_seq_ageint_item_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
		if (ie_regra_exclusiva_w = 'N') or (cd_exame_pri_w = nr_seq_proc_interno_w and hr_agenda_w >= hr_agenda_p) or (cd_exame_seg_w = nr_seq_proc_interno_w and hr_agenda_w <= hr_agenda_p) then
			if (ds_retorno_w	<> 'N') then
				if (hr_Agenda_w	< hr_Agenda_p) then
					select	Obter_Min_Entre_Datas((hr_Agenda_w + nr_minuto_duracao_w / 1440), hr_Agenda_p, 1)
					into STRICT	qt_sobra_w
					;
				else
					select	Obter_Min_Entre_Datas((hr_Agenda_p + nr_minuto_duracao_p / 1440), hr_Agenda_w, 1)
					into STRICT	qt_sobra_w
					;
				end if;

				if (qt_sobra_w	< qt_tempo_w) or (((qt_sobra_w - qt_tempo_w) <> 0) and (ie_tempo_exclusivo_w = 'S')) then
					ds_retorno_w	:= 'N';
				else
					ds_Retorno_w	:= 'S';
				end if;

			end if;
		end if;
		end;
	end loop;
	close C05;

	end;
end loop;
close C01;

if (ds_retorno_w	<> 'N') then
	select	count(*)
	into STRICT	qt_proc_adic_w
	from	ageint_exame_adic_item
	where	nr_seq_item	= nr_seq_ageint_item_p;

	if (qt_proc_adic_w	> 0) then
		/*
		cursor dos exames adicionais do item
		*/
		open C03;
		loop
		fetch C03 into
			nr_seq_proc_interno_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			if (ds_retorno_w	<> 'N') then
				/*
				cursor das regras ao qual o exame adicional se aplica
				*/
				open C01;
				loop
				fetch C01 into
					nr_seq_regra_w,
					ie_regra_exclusiva_w,
					ie_tempo_exclusivo_w,
					cd_exame_pri_w,
					cd_exame_seg_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin
					select	CASE WHEN cd_Exame_pri=nr_Seq_proc_interno_w THEN  cd_exame_Seg  ELSE cd_exame_pri END ,
						qt_tempo
					into STRICT	cd_exame_w,
						qt_tempo_w
					from	ageint_tempo_entre_exames
					where	nr_sequencia	= nr_seq_regra_w;

					/*
					cursor das marcacoes com os exames ao qual a regra se aplica
					*/
					open C02;
					loop
					fetch C02 into
						hr_Agenda_w,
						nr_minuto_duracao_w,
						nr_seq_ageint_item_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */
						begin
						if (ie_regra_exclusiva_w = 'N') or (cd_exame_pri_w = nr_seq_proc_interno_w and hr_agenda_w >= hr_agenda_p) or (cd_exame_seg_w = nr_seq_proc_interno_w and hr_agenda_w <= hr_agenda_p) then
							if (ds_retorno_w	<> 'N') then
								if (hr_Agenda_w	< hr_Agenda_p) then
									select	Obter_Min_Entre_Datas((hr_Agenda_w + nr_minuto_duracao_w / 1440), hr_Agenda_p, 1)
									into STRICT	qt_sobra_w
									;
								else
									select	Obter_Min_Entre_Datas((hr_Agenda_p + nr_minuto_duracao_p / 1440), hr_Agenda_w, 1)
									into STRICT	qt_sobra_w
									;
								end if;

								if (qt_sobra_w	< qt_tempo_w) or (((qt_sobra_w - qt_tempo_w) <> 0) and (ie_tempo_exclusivo_w = 'S')) then
									ds_retorno_w	:= 'N';
								else
									ds_Retorno_w	:= 'S';
								end if;
								if (ds_retorno_w	<> 'N') then
									select	count(*)
									into STRICT	qt_proc_adic_w
									from	ageint_exame_adic_item
									where	nr_seq_item	= nr_seq_ageint_item_w;

									if (qt_proc_adic_w	> 0) then
										/*
										cursor dos exames adicionais dos itens que a regra se aplica
										*/
										open C04;
										loop
										fetch C04 into
											nr_seq_proc_adic_w;
										EXIT WHEN NOT FOUND; /* apply on C04 */
											begin
											if (ds_retorno_w	<> 'N') then
												if (hr_Agenda_w	< hr_Agenda_p) then
													select	Obter_Min_Entre_Datas((hr_Agenda_w + nr_minuto_duracao_w / 1440), hr_Agenda_p, 1)
													into STRICT	qt_sobra_w
													;
												else
													select	Obter_Min_Entre_Datas((hr_Agenda_p + nr_minuto_duracao_p / 1440), hr_Agenda_w, 1)
													into STRICT	qt_sobra_w
													;
												end if;

												if (qt_sobra_w	< qt_tempo_w) or (((qt_sobra_w - qt_tempo_w) <> 0) and (ie_tempo_exclusivo_w = 'S')) then
													ds_retorno_w	:= 'N';
												else
													ds_Retorno_w	:= 'S';
												end if;
											end if;
											end;
										end loop;
										close C04;
									end if;
								end if;
							end if;
						end if;
						end;
					end loop;
					close C02;
					end;
				end loop;
				close C01;
			end if;
			end;
		end loop;
		close C03;
	end if;
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION ageint_consiste_tempo_exames ( cd_agenda_p bigint, hr_Agenda_p timestamp, nr_minuto_duracao_p bigint, nr_Seq_ageint_p bigint, nr_seq_ageint_item_p bigint, nm_usuario_p text) FROM PUBLIC;

