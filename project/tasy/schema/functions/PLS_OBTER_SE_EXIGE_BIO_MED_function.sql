-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_exige_bio_med ( nr_seq_usuario_web_p pls_usuario_web.nr_sequencia%type, cd_medico_p pessoa_fisica.cd_pessoa_fisica%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) RETURNS varchar AS $body$
DECLARE


ds_retorno_w			varchar(1)	:= 'N';
ie_regra_liberacao_w		varchar(1)	:= 'N';
nr_seq_regra_bio_prest_w	pls_regra_biometria_prest.nr_sequencia%type;
ie_controle_estab_w		varchar(1);
nr_seq_perfil_web_w		pls_perfil_web.nr_sequencia%type;
ie_exige_biometria_w		varchar(1)	:= 'N';
ie_libera_biometria_w		varchar(1)	:= 'N';

c01 CURSOR FOR
	SELECT	a.nr_sequencia   nr_seq_prestador
	from    pls_prestador a,
		pls_prestador_usuario_web b
	where   a.ie_situacao     = 'A'
	and     b.ie_situacao     = 'A'
	and     a.nr_sequencia     = b.nr_seq_prestador
	and     b.nr_seq_usuario   = nr_seq_usuario_web_p;

c02 CURSOR(nr_seq_prestador_pc	pls_prestador.nr_sequencia%type) FOR
	SELECT	max(a.nr_sequencia) nr_seq_regra_bio_prest
	from	pls_regra_biometria_prest a,
		pls_prest_exige_biometria b
	where	nr_seq_regra_biometria = a.nr_sequencia
	and	a.ie_situacao = 'A'
	and	b.ie_situacao = 'A'
	and	establishment_timezone_utils.startOfDay(clock_timestamp()) between establishment_timezone_utils.startOfDay(a.dt_inicio_vigencia) and establishment_timezone_utils.startOfDay(coalesce(a.dt_fim_vigencia,clock_timestamp()))
	and	coalesce(b.nr_seq_prestador, nr_seq_prestador_pc)	= nr_seq_prestador_pc
	and	((coalesce(b.nr_seq_perfil_web::text, '') = '') or (nr_seq_perfil_web 	= nr_seq_perfil_web_w))
	and	(ie_controle_estab_w = 'S' AND a.cd_estabelecimento	= cd_estabelecimento_p)
	and	a.ie_aplicacao_regra	= 2
	
union all

	SELECT	max(a.nr_sequencia) nr_seq_regra_bio_prest
	from	pls_regra_biometria_prest a,
		pls_prest_exige_biometria b
	where	nr_seq_regra_biometria = a.nr_sequencia
	and	a.ie_situacao = 'A'
	and	b.ie_situacao = 'A'
	and	establishment_timezone_utils.startOfDay(clock_timestamp()) between establishment_timezone_utils.startOfDay(a.dt_inicio_vigencia) and establishment_timezone_utils.startOfDay(coalesce(a.dt_fim_vigencia,clock_timestamp()))
	and	coalesce(b.nr_seq_prestador, nr_seq_prestador_pc)	= nr_seq_prestador_pc
	and	((coalesce(b.nr_seq_perfil_web::text, '') = '') or (nr_seq_perfil_web 	= nr_seq_perfil_web_w))
	and (ie_controle_estab_w = 'N')
	and	a.ie_aplicacao_regra	= 2;
BEGIN

ie_controle_estab_w	:= coalesce(pls_obter_se_controle_estab('RE'), 'N');

begin
	select	nr_seq_perfil_web
	into STRICT	nr_seq_perfil_web_w	
	from	pls_usuario_web
	where	nr_sequencia	= nr_seq_usuario_web_p;
exception
when others then
	nr_seq_perfil_web_w	:= null;
end;

ie_regra_liberacao_w	:= pls_obter_lib_bio_med(nr_seq_usuario_web_p, cd_medico_p, cd_estabelecimento_p);

if (ie_regra_liberacao_w	= 'N') then
	for c01_w in c01 loop
		begin
		for c02_w in c02(c01_w.nr_seq_prestador) loop
			begin
				nr_seq_regra_bio_prest_w	:= c02_w.nr_seq_regra_bio_prest;
				
				if (nr_seq_regra_bio_prest_w IS NOT NULL AND nr_seq_regra_bio_prest_w::text <> '') then						
					ie_exige_biometria_w	:= 'S';
					exit;
				end if;
			end;
		end loop;
		end;
	end loop;
end if;

if (ie_libera_biometria_w = 'S') then
	ds_retorno_w	:= 'N';	
elsif (ie_libera_biometria_w = 'N') and (ie_exige_biometria_w = 'S') then
	ds_retorno_w	:= 'S';
end if;

return  ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_exige_bio_med ( nr_seq_usuario_web_p pls_usuario_web.nr_sequencia%type, cd_medico_p pessoa_fisica.cd_pessoa_fisica%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

