-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION ageint_obter_se_turno_ex_marc ( nr_seq_item_p bigint, cd_agenda_p bigint, cd_medico_p text, dt_agenda_p timestamp, cd_estabelecimento_p bigint) RETURNS varchar AS $body$
DECLARE


ds_retorno_w	varchar(1)	:= 'S';
dt_dia_semana_w	bigint;
qt_Regra_w	bigint;
nr_seq_regra_w	bigint;
nr_seq_proc_interno_w	bigint;	
ie_tipo_agendamento_w	varchar(15);
nr_seq_grupo_selec_w	bigint;
cd_paciente_w		varchar(10);
ie_sexo_w		varchar(1)	:= 'A';
qt_idade_pac_w		integer;
nr_seq_topografia_w	agenda_integrada_item.nr_seq_topografia%type;

C01 CURSOR FOR
	SELECT	count(*)
	from	ageint_turno_exame
	where	(((nr_seq_proc_interno	= nr_seq_proc_interno_w) and (coalesce(nr_seq_grupo_ageint::text, '') = '')) or
		(nr_seq_grupo_ageint 	= nr_seq_grupo_selec_w AND nr_seq_grupo_selec_w IS NOT NULL AND nr_seq_grupo_selec_w::text <> ''))
	and	coalesce(cd_agenda, cd_agenda_p)		= cd_agenda_p
	and (coalesce(cd_pessoa_fisica, cd_medico_p)	= cd_medico_p or (coalesce(cd_medico_p::text, '') = '' and coalesce(cd_pessoa_fisica::text, '') = ''))
	and	((dt_inicial_vigencia	<= trunc(dt_agenda_p)) or (coalesce(dt_inicial_vigencia::text, '') = ''))
	and	((dt_final_vigencia	>= trunc(dt_agenda_p)) or (coalesce(dt_final_vigencia::text, '') = ''))
	and	dt_agenda_p between to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
				and to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') - 1 / 1440
	and	((dt_dia_semana	= dt_dia_semana_w) or (dt_dia_semana	= 9 and dt_dia_semana_w	not in (1,7)))
	and	coalesce(cd_estabelecimento, cd_estabelecimento_p)	= cd_estabelecimento_p
	and	((coalesce(ie_sexo, 'A') = ie_sexo_w) or (coalesce(ie_sexo,'A') = 'A'))
	and	(((qt_idade_pac_w >= coalesce(qt_idade_min, qt_idade_pac_w)) and (qt_idade_pac_w <= coalesce(qt_idade_max, qt_idade_pac_w))) or (coalesce(qt_idade_pac_w::text, '') = ''))
	and	coalesce(ie_consiste_marcacao,'N') = 'S'
	and	((nr_seq_topografia = nr_seq_topografia_w) or (coalesce(nr_seq_topografia::text, '') = ''))
	order by coalesce(cd_pessoa_fisica,'0'),
			dt_dia_semana;

BEGIN

select	max(nr_seq_proc_interno),
	max(ie_tipo_agendamento),
	max(nr_seq_grupo_selec),
	max(cd_pessoa_fisica),
	max(nr_seq_topografia)
into STRICT	nr_seq_proc_interno_w,
	ie_tipo_agendamento_w,
	nr_seq_grupo_selec_w,
	cd_paciente_w,
	nr_seq_topografia_w
from	agenda_integrada_item a,
	agenda_integrada b
where	a.nr_seq_agenda_int = b.nr_sequencia
and	a.nr_sequencia = nr_seq_item_p;

if	(((ie_tipo_agendamento_w = 'E') or (ie_tipo_agendamento_w = 'S')) and
	((coalesce(nr_seq_proc_interno_w,0)	> 0) or (coalesce(nr_seq_grupo_selec_w,0)	> 0))) then
	select	count(*)
	into STRICT	qt_regra_w
	from	ageint_turno_exame
	where	(((nr_seq_proc_interno	= nr_seq_proc_interno_w) and (coalesce(nr_seq_grupo_ageint::text, '') = '')) or
			(nr_seq_grupo_ageint 	= nr_seq_grupo_selec_w AND nr_seq_grupo_selec_w IS NOT NULL AND nr_seq_grupo_selec_w::text <> ''))
	and	coalesce(cd_agenda, cd_agenda_p)		= cd_agenda_p
	and	((dt_inicial_vigencia	<= trunc(dt_agenda_p)) or (coalesce(dt_inicial_vigencia::text, '') = ''))
	and	((dt_final_vigencia	>= trunc(dt_agenda_p)) or (coalesce(dt_final_vigencia::text, '') = ''))
	and	coalesce(cd_estabelecimento, cd_estabelecimento_p)	= cd_estabelecimento_p
	and	coalesce(ie_consiste_marcacao,'N') = 'S'
	and	((nr_seq_topografia = nr_seq_topografia_w) or (coalesce(nr_seq_topografia::text, '') = ''));
	
	if (qt_regra_w	> 0) then
		dt_dia_semana_w	:= obter_cod_dia_semana(dt_agenda_p);
		
		if (cd_paciente_w IS NOT NULL AND cd_paciente_w::text <> '') then
			select	coalesce(max(ie_sexo), 'A'),
					coalesce(max(trunc(trunc(months_between(clock_timestamp(), dt_nascimento)) / 12)),0)
					--max(obter_idade(dt_nascimento, sysdate, 'A'))
			into STRICT	ie_sexo_w,
					qt_idade_pac_w
			from	pessoa_fisica
			where	cd_pessoa_fisica = cd_paciente_w;
			
			
				--max(obter_idade(c.dt_nascimento, sysdate, 'A'))
			
			
		end if;
		
		open C01;
		loop
		fetch C01 into	
			nr_seq_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			nr_seq_regra_w	:= nr_seq_regra_w;
			end;
		end loop;
		close C01;

		if (nr_seq_regra_w	> 0) then
			ds_retorno_w	:= 'S';
		else
			ds_retorno_w	:= 'N';
		end if;
	end if;
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION ageint_obter_se_turno_ex_marc ( nr_seq_item_p bigint, cd_agenda_p bigint, cd_medico_p text, dt_agenda_p timestamp, cd_estabelecimento_p bigint) FROM PUBLIC;

