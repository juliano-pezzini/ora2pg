-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION get_qtd_grupos_permissao (nr_seq_prot_p bigint default null, nr_seq_time_p bigint default null) RETURNS varchar AS $body$
DECLARE

																	
ds_permissoes_w			protocolo_integrado_time.ds_equipe%type := 'N';
tp_time_param_common_w	protocolo_integrado_time.ie_permissao_comum%type;


BEGIN

if (nr_seq_time_p IS NOT NULL AND nr_seq_time_p::text <> '') then
 select coalesce(max(ie_permissao_comum),'N')
   into STRICT tp_time_param_common_w
   from protocolo_integrado_time
  where nr_sequencia = nr_seq_time_p;
end if;
select perms
into STRICT ds_permissoes_w
from(
    SELECT  cd_pessoa_fisica,
            case when coalesce(cd_pessoa_fisica::text, '') = '' then cd_especialidade else null end cd_especialidade,
            case when coalesce(cd_pessoa_fisica::text, '') = '' and coalesce(cd_especialidade::text, '') = '' then cd_perfil else null end cd_perfil,            
            case when coalesce(cd_pessoa_fisica::text, '') = '' and coalesce(cd_especialidade::text, '') = '' and coalesce(cd_perfil::text, '') = '' then cd_estabelecimento else null end cd_estabelecimento,
            ie_permissao_comum,
            rtrim(xmlagg(XMLELEMENT(name e,permissions,',')).extract['//text()'].getclobval(),',') perms
    from (
            SELECT    CASE WHEN (a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '') and a.cd_pessoa_fisica = obter_pessoa_fisica_usuario(wheb_usuario_pck.get_nm_usuario, 'C') THEN A.cd_pessoa_fisica ELSE NULL END cd_pessoa_fisica,
                      CASE WHEN (a.cd_especialidade IS NOT NULL AND a.cd_especialidade::text <> '') and a.cd_especialidade in (select cd_especialidade from medico_especialidade m where m.cd_pessoa_fisica = obter_pessoa_fisica_usuario(wheb_usuario_pck.get_nm_usuario, 'C')) THEN a.cd_especialidade ELSE NULL END cd_especialidade,
                      CASE WHEN (a.cd_perfil IS NOT NULL AND a.cd_perfil::text <> '') and a.cd_perfil = wheb_usuario_pck.get_cd_perfil THEN a.cd_perfil ELSE NULL END cd_perfil,
                      CASE WHEN (a.cd_estabelecimento IS NOT NULL AND a.cd_estabelecimento::text <> '') and a.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento THEN a.cd_estabelecimento ELSE NULL END cd_estabelecimento,
                      b.ie_permissao_comum,
                      RTRIM((CASE WHEN a.ie_adicionar='S' THEN 'A,'  ELSE null END ) || 
                      (CASE WHEN a.ie_editar='S' THEN 'E,'  ELSE null END ) ||
                      (CASE WHEN a.ie_deletar='S' THEN 'D,'  ELSE null END ) ||
                      (CASE WHEN a.ie_duplicar='S' THEN 'DU,'  ELSE null END ) ||
                      (CASE WHEN a.ie_solicitar_aprovacao='S' THEN 'SA,'  ELSE null END ) ||
                      (CASE WHEN a.ie_revisar='S' THEN 'R,'  ELSE null END ) ||
                      (CASE WHEN a.ie_consultar='S' THEN 'C,'  ELSE null END ) ||
                      (CASE WHEN a.ie_editar_prot_aplicado='S' THEN 'X,'  ELSE null END ) ||
                      (CASE WHEN a.ie_consultar_pep='S' THEN 'CO,'  ELSE null END ) ||
                      (CASE WHEN a.ie_suspender='S' THEN 'SU,'  ELSE null END ),',') permissions
              from    protocolo_integrado_partic a,
                      protocolo_integrado_time b
              where   b.nr_sequencia = a.nr_seq_equipe

              and (coalesce(nr_seq_prot_p::text, '') = '' or (b.nr_sequencia in (select pil.cd_time from protocolo_integrado_lib pil where (pil.nr_seq_protocolo_integrado = coalesce(nr_seq_prot_p,0 ))) or b.ie_permissao_comum = 'S'))
              and (coalesce(nr_seq_time_p::text, '') = '' or (b.nr_sequencia = nr_seq_time_p or (ie_permissao_comum = 'S' and tp_time_param_common_w = 'N')))
              and     ((coalesce(a.dt_validade::text, '') = '') or (a.dt_validade >= clock_timestamp()))
              and (a.dt_liberacao <= clock_timestamp())
              and     ((coalesce(b.dt_validade::text, '') = '') or (b.dt_validade >= clock_timestamp()))
              and (b.dt_liberacao <= clock_timestamp())) alias52
    WHERE ((cd_pessoa_fisica IS NOT NULL AND cd_pessoa_fisica::text <> '')
    or (cd_especialidade IS NOT NULL AND cd_especialidade::text <> '')
    or (cd_perfil IS NOT NULL AND cd_perfil::text <> '')
    or (cd_estabelecimento IS NOT NULL AND cd_estabelecimento::text <> ''))
    group by  cd_pessoa_fisica,             
              case when coalesce(cd_pessoa_fisica::text, '') = '' then cd_especialidade else null end,
              case when coalesce(cd_pessoa_fisica::text, '') = '' and coalesce(cd_especialidade::text, '') = '' then cd_perfil else null end,
              case when coalesce(cd_pessoa_fisica::text, '') = '' and coalesce(cd_especialidade::text, '') = '' and coalesce(cd_perfil::text, '') = '' then cd_estabelecimento else null end,
              ie_permissao_comum
    order by  cd_pessoa_fisica, cd_especialidade, cd_perfil, cd_estabelecimento, ie_permissao_comum) LIMIT 1;

if (octet_length(ds_permissoes_w) = 0 OR coalesce(ds_permissoes_w::text, '') = '')  then
    ds_permissoes_w := 'N';
end if;

return ds_permissoes_w;

exception when no_data_found then
    return 'N';
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION get_qtd_grupos_permissao (nr_seq_prot_p bigint default null, nr_seq_time_p bigint default null) FROM PUBLIC;

