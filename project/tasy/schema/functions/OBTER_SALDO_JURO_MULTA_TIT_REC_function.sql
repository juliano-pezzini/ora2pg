-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_saldo_juro_multa_tit_rec ( nr_titulo_p bigint, ie_opcao_p text) RETURNS bigint AS $body$
DECLARE


vl_saldo_juros_w		double precision := 0;
vl_saldo_multa_w		double precision := 0;
tx_juros_w			double precision := 0;
tx_multa_w			double precision := 0;
cd_tipo_taxa_juro_w		bigint;
cd_tipo_taxa_multa_w		bigint;
dt_vencimento_atual_w		timestamp;
vl_saldo_titulo_w		double precision := 0;
qt_dia_venc_w			bigint;

pr_juros_w			double precision := 0;
ie_tipo_taxa_w			varchar(255);
vl_juros_w			double precision;
vl_multa_w			double precision;
vl_saldo_calc_w			double precision;
dt_recebimento_w		timestamp;
vl_saldo_total_juros_w		double precision	:= 0;
vl_saldo_total_multa_w		double precision	:= 0;
vl_titulo_w			double precision;
vl_baixa_w			double precision;
dt_referencia_w			timestamp;
dt_receb_anterior_w		timestamp	:= null;
vl_apropriado_juros_w		double precision;
vl_apropriado_multa_w		double precision;
nr_seq_pagador_w		bigint;
vl_tributo_w			double precision;
ie_juros_multa_liquido_w	varchar(10);
cd_estabelecimento_w		smallint;
qt_pag_w			bigint := 0;
vl_multa_ano_w			double precision := 0;
qt_alt_w			bigint;

c01 CURSOR FOR
SELECT	a.dt_recebimento,
	sum(a.vl_recebido + coalesce(a.vl_descontos,0) + coalesce(a.vl_perdas,0) + coalesce(a.vl_glosa,0)),
	a.vl_juros,
	a.vl_multa
from	titulo_receber_liq a
where	a.nr_titulo	= nr_titulo_p
and	coalesce(a.ie_lib_caixa,'S')	= 'S'
group by
	a.dt_recebimento,
	a.vl_juros,
	a.vl_multa
having	sum(a.vl_recebido + coalesce(a.vl_descontos,0) + coalesce(a.vl_perdas,0) + coalesce(a.vl_glosa,0)) > 0
order by
	a.dt_recebimento;


BEGIN

if (nr_titulo_p IS NOT NULL AND nr_titulo_p::text <> '') then
	select	tx_juros,
		tx_multa,
		cd_tipo_taxa_juro,
		cd_tipo_taxa_multa,
		dt_pagamento_previsto,
		vl_saldo_titulo,
		obter_dados_titulo_receber(nr_titulo,'V')
	into STRICT	tx_juros_w,
		tx_multa_w,
		cd_tipo_taxa_juro_w,
		cd_tipo_taxa_multa_w,
		dt_vencimento_atual_w,
		vl_saldo_titulo_w,
		vl_titulo_w
	from	titulo_receber
	where	nr_titulo		= nr_titulo_p;

	vl_saldo_calc_w	:= vl_titulo_w;
	
	cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
	
	select	coalesce(max(ie_juros_multa_liquido),'N')
	into STRICT	ie_juros_multa_liquido_w
	from	parametro_contas_receber
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	if (coalesce(ie_juros_multa_liquido_w,'N') = 'S') then
		begin
		select	sum(CASE WHEN b.ie_soma_diminui='S' THEN  a.vl_tributo WHEN b.ie_soma_diminui='D' THEN  a.vl_tributo * -1  ELSE 0 END )
		into STRICT	vl_tributo_w
		from	tributo b,
			titulo_receber_trib a
		where	a.nr_titulo    = nr_titulo_p
		and	a.cd_tributo   = b.cd_tributo
		and	coalesce(a.nr_seq_nota_fiscal::text, '') = ''
		and (a.ie_origem_tributo = 'D' or coalesce(b.ie_incide_conta,'N') = 'N');
		exception
		when others then
			vl_tributo_w := 0;
		end;
		
		vl_saldo_calc_w	:= coalesce(vl_titulo_w,0) + coalesce(vl_tributo_w,0);
	end if;

	open c01;
	loop
	fetch c01 into
		dt_recebimento_w,
		vl_baixa_w,
		vl_juros_w,
		vl_multa_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		vl_saldo_juros_w	:= 0;
		vl_saldo_multa_w	:= 0;
		
		/* Se for a primeira baixa tem que comparar com a data de vencimento, senao com a data de baixa anterior */

		if (coalesce(dt_receb_anterior_w::text, '') = '') then
			dt_referencia_w	:= dt_vencimento_atual_w;
		else
			dt_referencia_w	:= dt_receb_anterior_w;
		end if;
		
		qt_dia_venc_w			:= trunc(dt_recebimento_w, 'dd') - trunc(dt_referencia_w, 'dd');

		if (tx_juros_w > 0) then

			select	ie_tipo_taxa
			into STRICT	ie_tipo_taxa_w
			from	tipo_taxa
			where	cd_tipo_taxa	= cd_tipo_taxa_juro_w;

			if (ie_tipo_taxa_w = 'A') then
				pr_juros_w	:= dividir_sem_round((tx_juros_w)::numeric, 365) * qt_dia_venc_w;
			elsif (ie_tipo_taxa_w = 'M') then
				pr_juros_w	:= dividir_sem_round((tx_juros_w)::numeric, 30) * qt_dia_venc_w;
			elsif (ie_tipo_taxa_w = 'D') then
				pr_juros_w	:= tx_juros_w * qt_dia_venc_w;
			end if;

			/* Francisco - OS 49496 - Tratamento para valores fixos diarios */

			if (ie_tipo_taxa_w = 'V') then
				vl_saldo_juros_w	:= (tx_juros_w * sign(vl_baixa_w)) * qt_dia_venc_w;
			else
				vl_saldo_juros_w	:= (vl_saldo_calc_w * sign(vl_baixa_w)) * (dividir_sem_round((pr_juros_w)::numeric, 100));
			end if;

		end if;

		if (tx_multa_w > 0) and (qt_dia_venc_w > 0) then
			vl_saldo_multa_w	:= (vl_saldo_calc_w * sign(vl_baixa_w)) * (dividir_sem_round((tx_multa_w)::numeric, 100));
			
			select	max(ie_tipo_taxa)
			into STRICT	ie_tipo_taxa_w
			from	tipo_taxa
			where	cd_tipo_taxa	= cd_tipo_taxa_multa_w;
			
			if (ie_tipo_taxa_w = 'F') then
				vl_saldo_multa_w := tx_multa_w;
			elsif (ie_tipo_taxa_w = 'P') then /*Valor cobrado um vez  apas um ano*/

				/* 
				** A: 	Para considerar a adicao de multa, deve estar vencido a um ano ou mais 
				** B: 	Calculo de vencimento e definida no parametro ie_venc_original_p, e usada como base pra calculo dos dias vencidos
				**	e e definida diretamente no parametro do contas a receber.
				** C: 	Verificar alteracao anterior:
				**		* Caso ja tenha alguma alteracao anterior com calculo de multa e juros, ignorar calculo atual
				**		* Caso tenha alguma alteracao anterior sem calculo de multa e juros , sera usada a regra ie_venc_original_p 
				** D	Parametro Valor de multa fixo deve ser null
				** E	Nao ter alteracao de vencimento com calculo de juros anterior
				*/
				
				vl_saldo_multa_w := 0;
								
				--Buscar lancamentos anterior
				select	count(*)
				into STRICT	qt_alt_w
				from	w_alteracao_vencimento
				where	nr_titulo = nr_titulo_p
				and	ie_calc_juros_multa = 'S';
				
				--if qt_dia_venc_w >= 365 and qt_alt_w < 1 then
					vl_saldo_multa_w := (vl_saldo_calc_w * sign(vl_baixa_w)) * (dividir_sem_round((tx_multa_w)::numeric, 100));
				--end if;
			elsif (ie_tipo_taxa_w = 'A') then /*Valor calculaod por ano*/
		
				vl_multa_ano_w := qt_dia_venc_w /365;
				vl_multa_ano_w := trunc(vl_multa_ano_w) + 1;
				vl_saldo_multa_w := vl_saldo_multa_w * vl_multa_ano_w;
				
				--vl_saldo_total_multa_w	:= vl_saldo_multa_w; OS 2185323, tava duplicando o saldo da multa.
				
			end if;
				
			vl_saldo_total_multa_w	:= vl_saldo_total_multa_w + vl_saldo_multa_w - vl_multa_w;		
		
		end if;		
	
		vl_saldo_total_juros_w	:= vl_saldo_total_juros_w + vl_saldo_juros_w - vl_juros_w;
		vl_saldo_calc_w	:= vl_saldo_calc_w - vl_baixa_w;
		dt_receb_anterior_w	:= dt_recebimento_w;
		end;
	end loop;
	close c01;
	
	select	max(b.nr_seq_pagador)
	into STRICT	nr_seq_pagador_w
	from	pls_mensalidade b,
		titulo_receber a
	where	a.nr_seq_mensalidade	= b.nr_sequencia
	and	a.nr_titulo		= nr_titulo_p;
	
	if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
		select	count(1)
		into STRICT	qt_pag_w
		from	pls_segurado_mensalidade a
		where	a.ie_tipo_item in (23,24)
		and	a.nr_seq_pagador	= nr_seq_pagador_w;
	
		if (qt_pag_w > 0) then
			select	coalesce(sum(coalesce(a.vl_item,0)),0)
			into STRICT	vl_apropriado_juros_w
			from	pls_segurado_mensalidade a
			where	a.nr_seq_pagador	= nr_seq_pagador_w
			and	a.ie_tipo_item		= 23;
			
			select	coalesce(sum(coalesce(a.vl_item,0)),0)
			into STRICT	vl_apropriado_multa_w
			from	pls_segurado_mensalidade a
			where	a.nr_seq_pagador	= nr_seq_pagador_w
			and	a.ie_tipo_item		= 24;
		end if;
		
		if (qt_pag_w =0) then
			select	coalesce(sum(coalesce(a.vl_item,0)),0)
			into STRICT	vl_apropriado_juros_w
			from	pls_segurado_mensalidade a
			where	a.nr_titulo		= nr_titulo_p
			and	a.ie_tipo_item		= 23;
			
			select	coalesce(sum(coalesce(a.vl_item,0)),0)
			into STRICT	vl_apropriado_multa_w
			from	pls_segurado_mensalidade a
			where	a.nr_titulo		= nr_titulo_p
			and	a.ie_tipo_item		= 24;
		end if;
		
		vl_saldo_total_juros_w	:= vl_saldo_total_juros_w - vl_apropriado_juros_w;
		vl_saldo_total_multa_w	:= vl_saldo_total_multa_w - vl_apropriado_multa_w;
	end if;
end if;

if (ie_opcao_p = 'J') then
	return round((vl_saldo_total_juros_w)::numeric,2);
elsif (ie_opcao_p = 'M') then
	return round((vl_saldo_total_multa_w)::numeric,2);
else
	return 0;
end if;	

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_saldo_juro_multa_tit_rec ( nr_titulo_p bigint, ie_opcao_p text) FROM PUBLIC;

