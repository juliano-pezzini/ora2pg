-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_cta_val_obter_rest_pres_pa (dados_filtro_prest_p pls_tipos_cta_val_pck.dados_filtro_prest) RETURNS varchar AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: 	Obter o acesso a tabela pls_prestador que será utilizado  para verificar o select
	dos filtros de prestador.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:

Realizar tratamento para os campos IMP quando hourver necessidade
------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_filtro_prest_w	varchar(4000);

BEGIN

--Inicializar as variáveis.
ds_filtro_prest_w	:= null;

-- É obrigatório que o campo IE_TIPO_PRESTADOR esteja informado para que a regra seja verificada.
if (dados_filtro_prest_p.ie_tipo_prestador IS NOT NULL AND dados_filtro_prest_p.ie_tipo_prestador::text <> '') then
	-- Aqui verifca qual prestador da conta será utilizado, se atendimento, executor, solicitante ou de pagamento.
	if (dados_filtro_prest_p.ie_tipo_prestador = 'P') then
		-- Verificar a incidencia da regra para poder identificar de onde deve ser buscada a informação do prestador de pagamento.

		
	-- Se for para gerar a ocorrência para procedimento então deve ser olhado se o prestador é o prestador de pagamento do procedimento 

	-- ou de algum participante do mesmo.
	ds_filtro_prest_w := ds_filtro_prest_w || '			and	exists ( ' || pls_util_pck.enter_w ||
						'					select	1 '|| pls_util_pck.enter_w ||
						'					from	pls_conta_proc a '|| pls_util_pck.enter_w ||
						'					where	a.nr_sequencia = proc.nr_sequencia ' || pls_util_pck.enter_w ||
						'					and	a.nr_seq_prestador_pgto = prest.nr_sequencia ' || pls_util_pck.enter_w ||
						'					union all ' || pls_util_pck.enter_w ||
						'					select	1 ' || pls_util_pck.enter_w ||
						'					from	pls_conta_proc_v a ' || pls_util_pck.enter_w ||
						'					where	a.nr_sequencia = proc.nr_sequencia ' || pls_util_pck.enter_w ||
						'					and	a.nr_seq_prestador_pgto is null ' || pls_util_pck.enter_w ||
						'					and	prest.nr_sequencia = a.nr_seq_prestador_exec ' || pls_util_pck.enter_w ||
						'					union all ' || pls_util_pck.enter_w ||
						'					select	1 ' || pls_util_pck.enter_w ||
						'					from	pls_conta_proc a '|| pls_util_pck.enter_w ||
						'					where	a.nr_sequencia = proc.nr_sequencia ' || pls_util_pck.enter_w ||
						'					and	a.nr_seq_prest_pgto_medico = prest.nr_sequencia ' || pls_util_pck.enter_w ||
						'					union all ' || pls_util_pck.enter_w ||
						'					select	1 '|| pls_util_pck.enter_w ||
						'					from	pls_conta_proc a, '|| pls_util_pck.enter_w ||
						'						pls_proc_participante b '|| pls_util_pck.enter_w ||
						'					where	a.nr_sequencia = proc.nr_sequencia ' || pls_util_pck.enter_w ||
						'					and	b.nr_seq_conta_proc = a.nr_sequencia ' || pls_util_pck.enter_w ||
						'					and	b.nr_seq_prestador_pgto = prest.nr_sequencia ' || pls_util_pck.enter_w ||
						'					and	b.ie_status <> '|| pls_util_pck.aspas_w || 'C' || pls_util_pck.aspas_w || pls_util_pck.enter_w ||
						'					) ';
	end if;
end if;

return	ds_filtro_prest_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_cta_val_obter_rest_pres_pa (dados_filtro_prest_p pls_tipos_cta_val_pck.dados_filtro_prest) FROM PUBLIC;

