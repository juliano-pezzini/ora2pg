-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_regra_duplic ( nr_seq_regra_oc_p bigint, nm_usuario_p text, nr_seq_conta_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint) RETURNS varchar AS $body$
DECLARE

/*
	TEM  COMO FINALIDADE  VERIFICAR SE  EXISTE ALGUMA  CONTA QUE ATENDE A REGRA DE DUPLICIDADE , SE EXISTIR GERA OCORRENCIA.
*/
/* RETORNA    'S'    SE EXISTIR DUPLICIDADE       */

ds_retorno_w			varchar(2) := 'N';
ds_sql_w			varchar(4000);
vl_atributo_w			varchar(10);

qt_dias_w			smallint;
ie_regra_tipo_guia_w		varchar(1);
ie_regra_prest_exec_w		varchar(1);
ie_regra_profissional_w		varchar(1);
ie_regra_benef_w		varchar(1);
ie_regra_dt_proc_w		varchar(1);
ie_regra_guia_ref_w		varchar(1);
ie_regra_grau_partic_w		varchar(1);
ie_regra_protocolo_w		varchar(1);

ie_existe_w			varchar(1);
ie_existe_ww			bigint := 0;

nr_seq_conta_duplic_w		bigint;
ie_tipo_guia_w 			varchar(3);
nr_seq_prestador_exec_w		bigint;
cd_medico_executor_w		varchar(20);
nr_Seq_segurado_w		bigint;
dt_procedimento_w		timestamp;
dt_emissao_calculo_w		timestamp;
dt_atendimento_referencia_w	timestamp;
cd_procedimento_w		varchar(20);
ie_origem_proced_w		varchar(2);
nr_seq_grau_partic_w		bigint;
nr_seq_protocolo_w		bigint;
cd_guia_referencia_w		varchar(20);
nr_seq_regra_duplic_w		bigint;
nr_seq_estrutura_w		bigint;
qt_proc_estrut_w		bigint;

cd_proc_estrut_w		bigint;
ie_origem_proc_estrut_w		bigint;
cd_area_proc_estrut_w		bigint;
cd_espec_estrut_w		bigint;
cd_grupo_proc_estrut_w		bigint;

C01 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		cd_area_procedimento,
		cd_especialidade,
		cd_grupo_proc
	from	pls_ocorrencia_estrut_item
	where	nr_sequencia	= nr_seq_estrutura_w
	order by coalesce(cd_procedimento,0),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_procedimento,0);



BEGIN

/* */

begin
select	nr_seq_regra_duplic,
	nr_seq_estrutura
into STRICT	nr_seq_regra_duplic_w,
	nr_seq_estrutura_w
from	pls_ocorrencia_regra_item
where	nr_sequencia	= nr_seq_regra_oc_p;
exception
when others then
	nr_seq_regra_duplic_w	:= 0;
end;

-------------------------------------------------------------------------------------------------------------------DADOS DA REGRA--------------------------------------------------------------------------------------------------------
if (coalesce(nr_seq_regra_duplic_w,0) > 0) then
	if (coalesce(nr_seq_estrutura_w,0) > 0) then
		open C01;
		loop
		fetch C01 into
			cd_proc_estrut_w,
			ie_origem_proc_estrut_w,
			cd_area_proc_estrut_w,
			cd_espec_estrut_w,
			cd_grupo_proc_estrut_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			select	count(*)
			into STRICT	qt_proc_estrut_w
			from	pls_conta_proc a
			where	a.cd_procedimento in (
				SELECT	x.cd_procedimento
				from	estrutura_procedimento_v x
				where	coalesce(x.cd_procedimento, coalesce(cd_proc_estrut_w,0)) 		= coalesce(cd_proc_estrut_w,0)
				or	coalesce(x.ie_origem_proced, coalesce(ie_origem_proc_estrut_w,0))		= coalesce(ie_origem_proc_estrut_w,0)
				or	coalesce(x.cd_grupo_proc, coalesce(cd_grupo_proc_estrut_w,0))		= coalesce(cd_grupo_proc_estrut_w,0)
				or	coalesce(x.cd_especialidade, coalesce(cd_espec_estrut_w,0)) 		= coalesce(null,0)
				or	coalesce(x.cd_area_procedimento, coalesce(cd_area_proc_estrut_w,0))	= coalesce(cd_area_proc_estrut_w,0));

			if (qt_proc_estrut_w > 0) then
				goto fim_estrutura;
			end if;
			end;
		end loop;
		close C01;
	end if;
	<<fim_estrutura>>

	if (coalesce(nr_seq_estrutura_w,0) = 0) or (qt_proc_estrut_w > 1) then
		/*obter dados da regra de duplicidade*/

		begin
		select	b.qt_dias,		 -- qtde de dias a ser subtraido
			b.ie_regra_tipo_guia,	 -- mesma guia
			b.ie_regra_prest_exec,	 -- prestador exec
			b.ie_regra_profissional, -- profissional exec
			b.ie_regra_benef,	 -- beneficiario
			b.ie_regra_dt_proc,	 -- mesma data de procedimeno
			b.ie_regra_guia_ref,	 -- mesma guia referência
			b.ie_regra_grau_partic,	 -- mesmo grau de participação
			b.ie_regra_protocolo	 --mesmo protocolo
		into STRICT	qt_dias_w,
			ie_regra_tipo_guia_w,
			ie_regra_prest_exec_w,
			ie_regra_profissional_w,
			ie_regra_benef_w,
			ie_regra_dt_proc_w,
			ie_regra_guia_ref_w,
			ie_regra_grau_partic_w,
			ie_regra_protocolo_w
		from 	pls_oc_regra_duplic 	a,
			pls_regra_item_duplic 	b
		where	b.nr_seq_regra = a.nr_sequencia
		and	a.ie_situacao = 'A'
		and	b.ie_situacao = 'A'
		and	a.nr_sequencia = nr_seq_regra_duplic_w;
		exception
		when others then
			goto final;
		end;

		if (coalesce(ie_regra_tipo_guia_w,'N') = 'S') then
			ds_sql_w	:= ds_sql_w ||' and a.ie_tipo_guia = '||ie_tipo_guia_w;
		end if;
		if (coalesce(ie_regra_prest_exec_w,'N') = 'S') then
			ds_sql_w	:= ds_sql_w ||' and  a.nr_seq_prestador_exec = '||nr_seq_prestador_exec_w;
		end if;
		if (coalesce(ie_regra_profissional_w,'N') = 'S') then
			ds_sql_w	:= ds_sql_w ||' and a.cd_medico_executor = '||cd_medico_executor_w;
		end if;
		if (coalesce(ie_regra_benef_w,'N') = 'S') then
			ds_sql_w	:= ds_sql_w ||' and a.nr_Seq_segurado = '||nr_seq_segurado_w;
		end if;
		if (coalesce(ie_regra_guia_ref_w,'N') = 'S') then
			ds_sql_w	:= ds_sql_w ||' and a.cd_guia_referencia	= '||cd_guia_referencia_w;
		end if;
		if (coalesce(ie_regra_grau_partic_w,'N') = 'S') then
			ds_sql_w	:= ds_sql_w ||' and a.nr_seq_grau_partic	= '||nr_seq_grau_partic_w;
		end if;
		if (coalesce(ie_regra_protocolo_w,'N') = 'S') then
			ds_sql_w	:= ds_sql_w ||' and a.nr_seq_protocolo	= '||nr_seq_protocolo_w;
		end if;

		vl_atributo_w := Obter_valor_Dinamico_char_bv('	select	max(a.nr_sequencia) 	' ||
					'	from 	pls_conta where 	' ||
					'	where	a.nr_sequencia <> :nr_seq_conta ' ||
					'	and	trunc(a.dt_emissao) between trunc(' || dt_emissao_calculo_w || ') and  trunc(' || dt_atendimento_referencia_w || ')' || ds_sql_w, 'nr_seq_conta='||nr_seq_conta_p||';', vl_atributo_w);



-------------------------------------------------------------------------------------------------------------------DADOS DA CONTA--------------------------------------------------------------------------------------------------------
		if ( coalesce(nr_seq_conta_p,0) > 0 ) then

			/*obtem os dados da conta*/

			begin
			select	a.ie_tipo_guia,
				a.nr_seq_prestador_exec,
				a.cd_medico_executor,
				a.nr_Seq_segurado,
				a.dt_atendimento_referencia,
				cd_guia_referencia,
				nr_seq_grau_partic,
				nr_seq_protocolo
			into STRICT	ie_tipo_guia_w,
				nr_seq_prestador_exec_w,
				cd_medico_executor_w,
				nr_Seq_segurado_w,
				dt_atendimento_referencia_w,
				cd_guia_referencia_w,
				nr_seq_grau_partic_w,
				nr_seq_protocolo_w
			from 	pls_conta a
			where	a.nr_sequencia = nr_seq_conta_p;

			exception
			when others then
				ie_tipo_guia_w			:= null;
				nr_seq_prestador_exec_w 	:= null;
				cd_medico_executor_w		:= '';
				nr_Seq_segurado_w		:= null;
				dt_atendimento_referencia_w	:= null;
			end;
			/*
				Calcula a data de referencia : DATA DE EMISSAO  DA CONTA A SER CONSISTIDA MENOS  A   QTDE DE DIAS DA REGRA
			*/
			dt_emissao_calculo_w	:= (dt_atendimento_referencia_w - coalesce(qt_dias_w,0));
		end if;


-------------------------------------------------------------------------------------------------------------------DADOS DO PROCEDIMENTO--------------------------------------------------------------------------------------------------------
		/* Obtem dados do procedimento da conta*/

		if ( coalesce(nr_seq_proc_p,0) > 0 ) and (coalesce(ie_regra_dt_proc_w,'N') = 'S') then

			/*Obtem dados do procedimento*/

			begin
			select	dt_procedimento,
				cd_procedimento,
				ie_origem_proced
			into STRICT	dt_procedimento_w,
				cd_procedimento_w,
				ie_origem_proced_w
			from  	pls_conta_proc
			where	nr_sequencia = nr_seq_proc_p;
			exception
			when others then
				dt_procedimento_w 	:= null;
				cd_procedimento_w	:= '';
				ie_origem_proced_w	:= '';
			end;

		end if;

		/* VERIFICA SE EXISTE  UMA CONTA COM AS MESMAS  CARACTERISTICAS */

-------------------------------------------------------------------------------------------------------------------VERFICA  CONTA DUPLICADA--------------------------------------------------------------------------------------------------------
		/*
		select	max(a.nr_sequencia)
		into	nr_seq_conta_duplic_w
		from 	pls_conta a
		where	a.nr_sequencia <> nr_seq_conta_p
		and	(( nvl(ie_regra_tipo_guia_w,'N') = 'N') or ( a.ie_tipo_guia = ie_tipo_guia_w))
		and	(( nvl(ie_regra_prest_exec_w,'N') = 'N') or ( a.nr_seq_prestador_exec = nr_seq_prestador_exec_w ))
		and	(( nvl(ie_regra_profissional_w,'N') = 'N') or ( a.cd_medico_executor = cd_medico_executor_w ))
		and	(( nvl(ie_regra_benef_w,'N') = 'N') or ( a.nr_Seq_segurado = nr_seq_segurado_w))
		and	(( nvl(ie_regra_guia_ref_w,'N') = 'N') or (a.cd_guia_referencia	= cd_guia_referencia_w))
		and	(( nvl(ie_regra_protocolo_w,'N') = 'N') or (a.nr_seq_protocolo = nr_seq_protocolo_w))
		and	(( nvl(ie_regra_grau_partic_w,'N') = 'N') or (nvl(a.nr_seq_grau_partic,9999) = nvl(nr_seq_grau_partic_w,9999)))

		and	((nvl(ie_regra_dt_proc_w,'N') = 'N')
			or	exists ( select 	1
					from 	pls_conta_proc b
					where	b.nr_sequencia <> nr_seq_proc_p	--procedimento da conta
					and	b.nr_seq_conta = a.nr_sequencia
					and	b.dt_procedimento  = dt_procedimento_w
					and	b.cd_procedimento  = cd_procedimento_w
					and	b.ie_origem_proced = ie_origem_proced_w	)
					) -- dt_procedimento

		and	trunc(a.dt_emissao) between    trunc(dt_emissao_calculo_w) and  trunc(dt_emissao_w);
		*/
		/* Caso seja necessario verificar os participantes do procedimento, incluir este or.
		or	(exists	(	select	1
					from	pls_conta_proc		x,
						pls_proc_participante	y
					where	y.nr_seq_conta_proc	= x.nr_sequencia
					and	x.nr_seq_conta		= a.nr_sequencia
					and	x.cd_procedimento	= cd_procedimento_w
					and	x.ie_origem_proced	= ie_origem_proced_w	) ))*/
		 --contas iguais a conta a ser consistida, com exceção da própria conta.
---------------------------------------------------------------------------------------------------TESTE DADOS QUEBRADOS----------------------------------------------------------------------------------------------------------
		/*solucao 1*/

		select max(1)
		into STRICT 	ie_existe_ww
		
		where exists(
				--select	max(a.nr_sequencia)
				SELECT 1
				--into	nr_seq_conta_duplic_w
				from 	pls_conta a
				where	a.nr_sequencia <> nr_seq_conta_p
				and	(( coalesce(ie_regra_tipo_guia_w,'N') = 'N') or ( a.ie_tipo_guia = ie_tipo_guia_w))
				and	(( coalesce(ie_regra_prest_exec_w,'N') = 'N') or ( a.nr_seq_prestador_exec = nr_seq_prestador_exec_w ))
				and	(( coalesce(ie_regra_profissional_w,'N') = 'N') or ( a.cd_medico_executor = cd_medico_executor_w ))
				and	(( coalesce(ie_regra_benef_w,'N') = 'N') or ( a.nr_Seq_segurado = nr_seq_segurado_w))
				and	(( coalesce(ie_regra_guia_ref_w,'N') = 'N') or (a.cd_guia_referencia	= cd_guia_referencia_w))
				and	(( coalesce(ie_regra_protocolo_w,'N') = 'N') or (a.nr_seq_protocolo = nr_seq_protocolo_w))
				and	(( coalesce(ie_regra_grau_partic_w,'N') = 'N') or (coalesce(a.nr_seq_grau_partic,9999) = coalesce(nr_seq_grau_partic_w,9999)))
				/*procedimento*/

				and	((coalesce(ie_regra_dt_proc_w,'N') = 'N')
					or	exists ( SELECT 	1
							from 	pls_conta_proc b
							where	b.nr_sequencia <> nr_seq_proc_p	--procedimento da conta
							and	b.nr_seq_conta = a.nr_sequencia
							and	b.dt_procedimento  = dt_procedimento_w
							and	b.cd_procedimento  = cd_procedimento_w
							and	b.ie_origem_proced = ie_origem_proced_w	)
							) -- dt_procedimento
				/*partic ipante do procedimento */

				and	((coalesce(ie_regra_grau_partic_w,'N') = 'N')
				or (exists (	select		1
							from	pls_conta_proc			x,
								pls_proc_participante		y
							where	y.nr_seq_conta_proc	= x.nr_sequencia
							and	x.nr_seq_conta		= a.nr_sequencia
							and	x.cd_procedimento	= cd_procedimento_w
							and	x.ie_origem_proced	= ie_origem_proced_w
							and	x.nr_sequencia 		<> nr_seq_proc_p )))

				and	trunc(a.dt_emissao) between    trunc(dt_emissao_calculo_w) and  trunc(dt_atendimento_referencia_w)
		);


		/*
		if	( nr_seq_conta_duplic_w > 0) then
			ds_retorno_w	:= 'S';
		end if;
		*/
	end if; /* qt_proc_estrut_w > 1*/
	if ( ie_existe_ww = 1) then
		ds_retorno_w	:= 'S';
	end if;

end if;
<<final>>
ds_retorno_w	:= ds_retorno_w;
return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_regra_duplic ( nr_seq_regra_oc_p bigint, nm_usuario_p text, nr_seq_conta_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint) FROM PUBLIC;

