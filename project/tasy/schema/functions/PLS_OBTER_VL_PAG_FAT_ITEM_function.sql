-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_vl_pag_fat_item (nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, ie_opcao_p text) RETURNS bigint AS $body$
DECLARE

/*	Function utilizada para contabilização da diferença entre os registros de pagamento e os registros de faturamento 
		'F' - Valor faturado do item (sum da PLS_CONTA_POS_ESTABELECIDO) 
		'S' - Valor faturado do item excluindo-se a taxa de administraçao 
		'P' - Valor pago do item (sum da PLS_CONTA_MEDICA_RESUMO) 
		'D' - Diferença entre os dois acima (Faturado menos pago)	 
		'T''- Diferença entre os dois casos mencionados excluindo-se a taxa de intercâmbio do valor faturado 
*/
	 
vl_faturado_w		pls_conta_pos_estabelecido.vl_beneficiario%type;
vl_liberado_w		pls_conta_medica_resumo.vl_liberado%type;
vl_retorno_w		pls_conta_proc.vl_liberado%type;
ie_tipo_conta_w		pls_conta.ie_tipo_conta%type;

BEGIN
 
if (ie_opcao_p	 = 'F') then 
	select	sum(vl_beneficiario) 
	into STRICT	vl_retorno_w 
	from	pls_conta_pos_estabelecido 
	where	nr_seq_conta		= nr_seq_conta_p 
	and	((nr_seq_conta_proc	= nr_seq_conta_proc_p) or (nr_seq_conta_mat	= nr_seq_conta_mat_p)) 
	and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = '')) 
	and	vl_beneficiario		> 0;
elsif (ie_opcao_p	= 'S') then 
	select	sum(coalesce(vl_medico,0) + coalesce(vl_custo_operacional,0) + coalesce(vl_materiais,0)) 
	into STRICT	vl_retorno_w 
	from	pls_conta_pos_estabelecido 
	where	nr_seq_conta		= nr_seq_conta_p 
	and	((nr_seq_conta_proc	= nr_seq_conta_proc_p) or (nr_seq_conta_mat	= nr_seq_conta_mat_p)) 
	and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = '')) 
	and	vl_beneficiario		> 0;
elsif (ie_opcao_p	= 'P') then 
	select 	max(ie_tipo_conta) 
	into STRICT	ie_tipo_conta_w 
	from	pls_conta 
	where	nr_sequencia	= nr_seq_conta_p;
	 
	if (ie_tipo_conta_w	= 'I') then 
		if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then 
			select	sum(vl_liberado) 
			into STRICT	vl_retorno_w 
			from	pls_conta_proc 
			where	nr_sequencia	= nr_seq_conta_proc_p;
		elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then 
			select 	sum(vl_liberado) 
			into STRICT	vl_retorno_w 
			from	pls_conta_mat 
			where	nr_sequencia	= nr_seq_conta_mat_p;
		end if;
	else 
		if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then 
			select	sum(vl_liberado) 
			into STRICT	vl_retorno_w 
			from	pls_conta_medica_resumo 
			where	nr_seq_conta_proc	= nr_seq_conta_proc_p 
			and	nr_seq_conta		= nr_seq_conta_p 
			and	ie_situacao		= 'A' 
			and	ie_tipo_item		!= 'I';
		elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then 
			select	sum(vl_liberado) 
			into STRICT	vl_retorno_w 
			from	pls_conta_medica_resumo 
			where	nr_seq_conta_mat	= nr_seq_conta_mat_p 
			and	nr_seq_conta		= nr_seq_conta_p 
			and	ie_situacao		= 'A' 
			and	ie_tipo_item		!= 'I';
		end if;
	end if;
 
elsif (ie_opcao_p	in ('D','T')) then 
	if (ie_opcao_p	= 'D') then 
		vl_faturado_w	:= coalesce(pls_obter_vl_pag_fat_item(nr_seq_conta_p,nr_seq_conta_proc_p, nr_seq_conta_mat_p ,'F'),0);
	elsif (ie_opcao_p	= 'T') then 
		vl_faturado_w	:= coalesce(pls_obter_vl_pag_fat_item(nr_seq_conta_p,nr_seq_conta_proc_p, nr_seq_conta_mat_p ,'S'),0);
	end if;
	 
	vl_liberado_w	:= coalesce(pls_obter_vl_pag_fat_item(nr_seq_conta_p,nr_seq_conta_proc_p, nr_seq_conta_mat_p ,'P'),0);
	 
	vl_retorno_w	:= vl_faturado_w - vl_liberado_w;
end if;
 
return	vl_retorno_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_vl_pag_fat_item (nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, ie_opcao_p text) FROM PUBLIC;

