-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_informacoes_pendencia (nr_sequencia_p bigint, ie_acao_p text default 'E', nr_sequencia_dest_p bigint default null) RETURNS varchar AS $body$
DECLARE


nr_seq_proc_w       bigint;
nr_seq_proc_saps_w  bigint;
nr_seq_protocolo_w  bigint;
qt_reg_w            bigint;
dt_registro_w       timestamp;
ds_retorno_w        varchar(255);
nm_usuario_w        varchar(255);
nr_prescricao_w     bigint;
ds_justificativa_w      varchar(255);
ds_subtipo_protocolo_w  varchar(255);
ds_protocolo_w          varchar(255);
cd_pessoa_fisica_w      varchar(10);
ieTemMaisDeUmExecutor_w varchar(1) := 'N';
ie_justificado_auto_w   varchar(1);

-- Constantes
const_executado             constant varchar(8) := 'E';
const_dt_execucao           constant varchar(8) := 'D';
const_usuario_execucao      constant varchar(8) := 'P';
const_usuario_exec          constant varchar(8) := 'PNM';
const_protocolo             constant varchar(8) := 'PROT';
const_sub_tipo_protocolo    constant varchar(8) := 'SPROT';
const_prescricao            constant varchar(8) := 'PRES';
const_executor_previsto     constant varchar(8) := 'PE';
const_pessoa_fisica         constant varchar(8) := 'PF';
const_Mais_de_um_executor   constant varchar(8) := 'QTDDEST';
const_Justificativa         constant varchar(8) := 'JUST';
const_dt_Justificativa      constant varchar(8) := 'DTJUST';
const_ie_Just_automatica    constant varchar(8) := 'JUSTAUTO';

BEGIN
  if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

    if coalesce(nr_sequencia_dest_p::text, '') = '' then

      select coalesce(max('S'), 'N')
      into STRICT   ieTemMaisDeUmExecutor_w
      from   gqa_pend_pac_acao_dest a
      where  a.nr_seq_pend_pac_acao = nr_sequencia_p
      and    exists ( SELECT 1
              from   gqa_pend_pac_acao_dest x
              where  x.nr_seq_pend_pac_acao = a.nr_seq_pend_pac_acao
              and    x.nr_sequencia <> a.nr_sequencia
           );

    end if;

    select max(nr_seq_protocolo),
           max(nr_seq_proc),
           max(nr_seq_proc_saps)
    into STRICT   nr_seq_protocolo_w,
           nr_seq_proc_w,
           nr_seq_proc_saps_w
    from   gqa_pend_pac_acao
    where  nr_sequencia = nr_sequencia_p;

     if ((nr_seq_proc_w IS NOT NULL AND nr_seq_proc_w::text <> '') or (nr_seq_proc_saps_w IS NOT NULL AND nr_seq_proc_saps_w::text <> '')) then -- SAE / SAPS
        select count(*),
               max(dt_atualizacao_nrec),
               max(nm_usuario_nrec),
               max(nr_sequencia)
        into STRICT   qt_reg_w,
               dt_registro_w,
               nm_usuario_w,
               nr_prescricao_w
        from   pe_prescricao
        where  nr_seq_pend_pac_acao = nr_sequencia_p;

        if (ie_acao_p = const_executor_previsto) then

           select max(a.cd_pessoa_fisica)
           into STRICT   cd_pessoa_fisica_w
           from   gqa_pend_pac_acao      x,
                  gqa_pend_pac_acao_dest a
           where  a.nr_seq_pend_pac_acao = x.nr_sequencia
           and (coalesce(nr_seq_superior, nr_seq_superior_saps) = nr_sequencia_p)
           and    coalesce(nr_sequencia_dest_p, a.nr_sequencia) = a.nr_sequencia;

        end if;

     elsif (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') then -- Protocolo
        select   count(*),
                 max(dt_atualizacao),
                 max(nm_usuario),
                 max(nr_prescricao)
        into STRICT     qt_reg_w,
                 dt_registro_w,
                 nm_usuario_w,
                 nr_prescricao_w
        from     prescr_medica
        where    nr_seq_pend_pac_acao = nr_sequencia_p;

        if (ie_acao_p = const_protocolo or ie_acao_p = const_sub_tipo_protocolo) then

          select a.nm_medicacao,
                 b.nm_protocolo
          into STRICT   ds_subtipo_protocolo_w,
                 ds_protocolo_w
          from   protocolo_medicacao a,
                 protocolo b
          where  b.cd_protocolo = a.cd_protocolo
          and    a.nr_seq_interna = nr_seq_protocolo_w;

        elsif (ie_acao_p = const_executor_previsto) then

           select max(cd_pessoa_fisica)
           into STRICT   cd_pessoa_fisica_w
           from   gqa_pend_pac_acao_dest
           where  nr_seq_pend_pac_acao = nr_sequencia_p
           and    coalesce(nr_sequencia_dest_p, nr_sequencia) = nr_sequencia;

        elsif (ie_acao_p = const_Justificativa) then

           select max(ds_justificativa)
           into STRICT   ds_justificativa_w
           from   gqa_pend_pac_acao_dest
           where  nr_seq_pend_pac_acao = nr_sequencia_p
           and    coalesce(nr_sequencia_dest_p, nr_sequencia) = nr_sequencia;

        elsif (ie_acao_p = const_dt_Justificativa) then

           select max(dt_justificativa)
           into STRICT   dt_registro_w
           from   gqa_pend_pac_acao_dest
           where  nr_seq_pend_pac_acao = nr_sequencia_p
           and    coalesce(nr_sequencia_dest_p, nr_sequencia) = nr_sequencia;

        elsif (ie_acao_p = const_ie_Just_automatica) then

           select max(ie_justificado_auto)
           into STRICT   ie_justificado_auto_w
           from   gqa_pend_pac_acao_dest
           where  nr_seq_pend_pac_acao = nr_sequencia_p
           and    coalesce(nr_sequencia_dest_p, nr_sequencia) = nr_sequencia;

        end if;

     end if;

   end if;

   if (qt_reg_w > 0) then
      ds_retorno_w := 'S';
   else
      ds_retorno_w := 'N';
   end if;

   case ie_acao_p

     when const_dt_execucao then
       if (ds_retorno_w = 'S') then
         ds_retorno_w := to_char(dt_registro_w, 'dd/MM/yyyy hh24:mi:ss');
       elsif (ds_retorno_w = 'N') then
         ds_retorno_w := null;
       end if;

     when const_usuario_execucao then
       if (ds_retorno_w = 'S') then
         ds_retorno_w := Obter_Nome_Usuario(nm_usuario_w);
       elsif (ds_retorno_w = 'N') then
         ds_retorno_w := null;
       end if;

	 when const_usuario_exec then
		if (ds_retorno_w = 'S') then
		 ds_retorno_w := nm_usuario_w;
		elsif (ds_retorno_w = 'N') then
		 ds_retorno_w := null;
       end if;

     when const_prescricao then
       ds_retorno_w := nr_prescricao_w;

     when const_protocolo then
       ds_retorno_w := ds_protocolo_w;

     when const_sub_tipo_protocolo then
       ds_retorno_w := ds_subtipo_protocolo_w;

     when const_executor_previsto then
       ds_retorno_w := obter_nome_pessoa_fisica(cd_pessoa_fisica_w, null);

     when const_pessoa_fisica then
       ds_retorno_w := nm_usuario_w;

     when const_Mais_de_um_executor then
       ds_retorno_w := ieTemMaisDeUmExecutor_w;

     when const_Justificativa then
       ds_retorno_w := ds_justificativa_w;

     when const_dt_Justificativa then
       ds_retorno_w := to_char(dt_registro_w, 'dd/MM/yyyy hh24:mi:ss');

     when const_ie_Just_automatica then
       ds_retorno_w := coalesce(ie_justificado_auto_w, 'N');

     else
       ds_retorno_w := null;

   end case;


   if (ie_acao_p <> const_protocolo) and (ie_acao_p <> const_sub_tipo_protocolo) and (ie_acao_p <> const_Mais_de_um_executor) then

      if (ieTemMaisDeUmExecutor_w = 'S') then
        ds_retorno_w := null;
      end if;

   end if;

   return ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_informacoes_pendencia (nr_sequencia_p bigint, ie_acao_p text default 'E', nr_sequencia_dest_p bigint default null) FROM PUBLIC;

