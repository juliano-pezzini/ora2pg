-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_req_liminar_judic ( nr_seq_requisicao_p bigint) RETURNS varchar AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: 
Verificar se a autorização possui liminar judicial 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ x ] Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ds_retorno_w			varchar(1)	:= 'N';
nr_seq_requisicao_w		pls_requisicao.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_contrato_w		pls_contrato.nr_sequencia%type;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
ie_estagio_w			pls_requisicao.ie_estagio%type;	
nr_seq_processo_w		processo_judicial_liminar.nr_sequencia%type;
qt_reg_prest_w			bigint 	:= 0;
qt_reg_proc_w			bigint	:= 0;
qt_reg_mat_w			bigint	:= 0;
cd_procedimento_w		pls_requisicao_proc.cd_procedimento%type;
ie_origem_proced_w		pls_requisicao_proc.ie_origem_proced%type;
cd_area_w				bigint;
cd_especialidade_w		bigint;
cd_grupo_w				bigint;
ie_origem_proc_w		bigint;
nr_seq_material_w		pls_material.nr_sequencia%type;

C01 CURSOR FOR 
	SELECT	nr_sequencia 
	from	processo_judicial_liminar 
	where (nr_seq_segurado	= nr_seq_segurado_w 
	or		nr_seq_contrato		= nr_seq_contrato_w) 
	and		ie_estagio		<> '1' 
	and		ie_impacto_autorizacao	= 'S';	
	 
C02 CURSOR FOR 
	SELECT	cd_procedimento, 
			ie_origem_proced 
	from	pls_requisicao_proc 
	where	nr_seq_requisicao	= nr_seq_requisicao_w 
	and		ie_status		<> 'C';

C03 CURSOR FOR 
	SELECT	nr_seq_material 
	from	pls_requisicao_mat 
	where	nr_seq_requisicao	= nr_seq_requisicao_w 
	and		ie_status		<> 'C';
	

BEGIN 
 
if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then 
	begin 
		select	nr_sequencia, 
				nr_seq_segurado, 
				pls_obter_dados_segurado(nr_seq_segurado,'NC') nr_seq_contrato, 
				coalesce(nr_seq_prestador,0) nr_seq_prestador, 
				ie_estagio 
		into STRICT	nr_seq_requisicao_w, 
				nr_seq_segurado_w, 
				nr_seq_contrato_w, 
				nr_seq_prestador_w, 
				ie_estagio_w 
		from	pls_requisicao 
		where	nr_sequencia = nr_seq_requisicao_p;
	exception 
	when others then 
		nr_seq_segurado_w	:= null;
	end;
		 
	if ((nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') and ie_estagio_w <> '3') then 
		open C01;
			loop 
			fetch C01 into	 
				nr_seq_processo_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
				if (nr_seq_prestador_w > 0) then 
					select	count(*) 
					into STRICT	qt_reg_prest_w 
					from	processo_judicial_prest 
					where	nr_seq_processo		= nr_seq_processo_w 
					and		nr_seq_prestador 	= nr_seq_prestador_w;	
					 
					if (qt_reg_prest_w > 0) then 
						ds_retorno_w := 'S';
						exit;
					end if;
				end if;
			 
				if (qt_reg_prest_w = 0) then 
					open C02;
						loop 
						fetch C02 into	 
							cd_procedimento_w, 
							ie_origem_proced_w;
						EXIT WHEN NOT FOUND; /* apply on C02 */
						begin 
							SELECT * FROM pls_obter_estrut_proc(	cd_procedimento_w, ie_origem_proced_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proc_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proc_w;
											 
							select	count(*) 
							into STRICT	qt_reg_proc_w 
							from	processo_judicial_proc 
							where	nr_seq_processo		= nr_seq_processo_w 
							and		coalesce(cd_procedimento,cd_procedimento_w)		= cd_procedimento_w 
							and		coalesce(ie_origem_proced,ie_origem_proc_w) 		= ie_origem_proc_w 
							and		coalesce(cd_grupo_proc,cd_grupo_w)				= cd_grupo_w 
							and		coalesce(cd_especialidade, cd_especialidade_w)	= cd_especialidade_w 
							and		coalesce(cd_area_procedimento, cd_area_w) 		= cd_area_w;			
								 
							if (qt_reg_proc_w > 0) then 
								ds_retorno_w := 'S';
								exit;
							end if;
						end;
						end loop;
					close C02;				
				end if;
				 
				if (qt_reg_prest_w = 0 and qt_reg_proc_w = 0) then 
					open C03;
						loop 
						fetch C03 into	 
							nr_seq_material_w;
						EXIT WHEN NOT FOUND; /* apply on C03 */
						begin 
							select	count(1) 
							into STRICT	qt_reg_mat_w 
							from	processo_judicial_mat 
							where	nr_seq_processo	= nr_seq_processo_w						 
							and (coalesce(nr_seq_material::text, '') = '' 
							or 		nr_seq_material = nr_seq_material_w) 
							and (coalesce(nr_seq_estrut_mat::text, '') = '' 
							or 		pls_obter_se_estruturas_mat(nr_seq_estrut_mat, nr_seq_material_w) = 'S');
							 
							if (qt_reg_mat_w > 0) then 
								ds_retorno_w := 'S';
								exit;
							end if;
						end;
						end loop;
					close C03;	
				end if;			
			end;
			end loop;
		close C01;		
	end if;
end if;
 
return	ds_retorno_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_req_liminar_judic ( nr_seq_requisicao_p bigint) FROM PUBLIC;

