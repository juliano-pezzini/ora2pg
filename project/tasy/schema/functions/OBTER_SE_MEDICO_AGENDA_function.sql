-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_medico_agenda (cd_estabelecimento_p bigint, cd_agenda_p bigint, cd_convenio_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, cd_medico_p text) RETURNS varchar AS $body$
DECLARE


cd_area_proced_w	integer;
cd_espec_proced_w	integer;
cd_grupo_proced_w	bigint;
qt_exclusivo_w		bigint;
nr_seq_regra_w		bigint;
ie_retorno_w		varchar(1)	:= 'S';
qt_regra_w		bigint;
qt_agenda_w		bigint;
dt_referencia_w		timestamp;
nr_seq_forma_org_w	bigint;
nr_seq_grupo_w		bigint;
nr_seq_subgrupo_w	bigint;
ie_agenda_w		varchar(1);

C01 CURSOR FOR
	SELECT	coalesce(nr_sequencia,0)
	from	agenda_regra
	where	cd_estabelecimento = cd_estabelecimento_p
	and	cd_agenda = cd_agenda_p
	and	((cd_convenio = cd_convenio_p) or (coalesce(cd_convenio::text, '') = ''))
	and	((cd_area_proc = cd_area_proced_w) or (coalesce(cd_area_proc::text, '') = ''))
	and	((cd_especialidade = cd_espec_proced_w) or (coalesce(cd_especialidade::text, '') = ''))
	and	((cd_grupo_proc = cd_grupo_proced_w) or (coalesce(cd_grupo_proc::text, '') = ''))
	and	coalesce(nr_seq_forma_org, nr_seq_forma_org_w)	= nr_seq_forma_org_w
	and	coalesce(nr_seq_grupo, nr_seq_grupo_w)		= nr_seq_grupo_w
	and	coalesce(nr_seq_subgrupo, nr_seq_subgrupo_w)		= nr_seq_subgrupo_w
	and	((cd_procedimento = cd_procedimento_p) or (coalesce(cd_procedimento::text, '') = ''))
	and	((coalesce(cd_procedimento::text, '') = '') or ((ie_origem_proced = ie_origem_proced_p) or (coalesce(ie_origem_proced::text, '') = '')))
	and	((nr_seq_proc_interno = nr_seq_proc_interno_p) or (coalesce(nr_seq_proc_interno::text, '') = ''))
	and	((cd_medico = cd_medico_p) or (coalesce(cd_medico::text, '') = ''))
	and	coalesce(cd_municipio_ibge::text, '') = ''
	order by coalesce(cd_procedimento,0),
		coalesce(nr_seq_proc_interno,0),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_proc,0),
		coalesce(nr_seq_forma_org,0),
		coalesce(nr_seq_subgrupo,0),
		coalesce(nr_seq_grupo,0),
		coalesce(cd_medico,'0');


BEGIN

ie_retorno_w	:= 'S';



if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then

	select	coalesce(max(cd_area_procedimento),0),
		coalesce(max(cd_especialidade),0),
		coalesce(max(cd_grupo_proc),0),
		coalesce(max(substr(sus_obter_seq_estrut_proc(sus_obter_estrut_proc(cd_procedimento, ie_origem_proced, 'C', 'F'),'F'),1,10)),0),
		coalesce(max(substr(sus_obter_seq_estrut_proc(sus_obter_estrut_proc(cd_procedimento, ie_origem_proced, 'C', 'G'),'G'),1,10)),0),
		coalesce(max(substr(sus_obter_seq_estrut_proc(sus_obter_estrut_proc(cd_procedimento, ie_origem_proced, 'C', 'S'),'S'),1,10)),0)
	into STRICT	cd_area_proced_w,
		cd_espec_proced_w,
		cd_grupo_proced_w,
		nr_seq_forma_org_w,
		nr_seq_grupo_w,
		nr_seq_subgrupo_w
	from	estrutura_procedimento_v
	where	cd_procedimento = cd_procedimento_p
	and	ie_origem_proced = ie_origem_proced_p;

	--_application_error(-20011,nr_seq_regra_w || '#@#@');
	open C01;
	loop
	fetch C01 into
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		nr_seq_regra_w := nr_seq_regra_w;
		end;
	end loop;
	close C01;



	if (nr_seq_regra_w > 0) then

		select	coalesce(max(ie_permite),'S')
		into STRICT	ie_agenda_w
		from	agenda_regra
		where	nr_sequencia = nr_seq_regra_w;

		if (ie_agenda_w = 'S') then
			select	coalesce(max(qt_regra),0)
			into STRICT	qt_regra_w
			from	agenda_regra
			where	nr_sequencia = nr_seq_regra_w;

			if (qt_regra_w	> 0) then
				select	count(*)
				into STRICT	qt_agenda_w
				from	agenda_paciente
				where	cd_agenda			= cd_agenda_p
				and	trunc(dt_agenda, 'month')	= dt_referencia_w
				and	ie_status_agenda		<> 'C'
				and	cd_procedimento			= cd_procedimento_p
				and	ie_origem_proced		= ie_origem_proced_p;

				if (qt_agenda_w >= qt_regra_w) then
					ie_agenda_w	:= 'Q';
				end if;
			end if;
		end if;
	end if;
end if;

if (ie_agenda_w in ('Q','N')) then
	ie_retorno_w := 'N';
end if;


return	ie_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_medico_agenda (cd_estabelecimento_p bigint, cd_agenda_p bigint, cd_convenio_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, cd_medico_p text) FROM PUBLIC;

