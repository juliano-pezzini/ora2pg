-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_exige_rec_facial ( nr_seq_segurado_p bigint, nr_seq_usuario_web_p bigint, ie_tipo_guia_p text, ie_funcao_p bigint, ie_carater_atend_p text, ds_token_p text, nr_seq_prestador_p bigint) RETURNS varchar AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Validar as regras de exigencia de reconhecimento facial e regra de liberacao.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[  ]  Objetos do dicionario [ x ] Tasy (Delphi/Java) [ x ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_retorno_w		varchar(1) := 'N';
ie_regra_liberacao_w	varchar(1) := 'N';
qt_idade_benef_w	integer;

C01 CURSOR FOR	
	SELECT  nr_sequencia
	from 	pls_regra_atend_req_web
	where 	ie_situacao 			= 'A'
	and	ie_exige_rec_facial		= 'S'
	and	((coalesce(ie_funcao::text, '') = '')	or (ie_funcao 	= ie_funcao_p))
	and	((coalesce(qt_idade_max::text, '') = '' 	and	qt_idade_min 		<= qt_idade_benef_w)
	or (coalesce(qt_idade_min::text, '') = '' 	and	qt_idade_max 		>= qt_idade_benef_w)
	or (qt_idade_min 			<= qt_idade_benef_w  and	qt_idade_max 	>= qt_idade_benef_w))
	and	((coalesce(ie_tipo_guia::text, '') = '')	or (ie_tipo_guia 	= ie_tipo_guia_p))
	and	((coalesce(ie_carater_atendimento::text, '') = '')	or (ie_carater_atendimento 	= coalesce(ie_carater_atend_p, 'X')))
	and 	((coalesce(ds_token_p::text, '') = '') 		or ((ds_token_p IS NOT NULL AND ds_token_p::text <> '') 	and ie_exige_biometria_token = 'S'))	
	and (cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento and (pls_obter_se_controle_estab('RE') = 'S'))
	
union all

	SELECT  nr_sequencia
	from 	pls_regra_atend_req_web
	where 	ie_situacao 			= 'A'
	and	ie_exige_rec_facial		= 'S'
	and	((coalesce(ie_funcao::text, '') = '')	or (ie_funcao 	= ie_funcao_p))
	and	((coalesce(qt_idade_max::text, '') = '' 	and	qt_idade_min 		<= qt_idade_benef_w)
	or (coalesce(qt_idade_min::text, '') = '' 	and	qt_idade_max 		>= qt_idade_benef_w)
	or (qt_idade_min 			<= qt_idade_benef_w  and	qt_idade_max 	>= qt_idade_benef_w))
	and	((coalesce(ie_tipo_guia::text, '') = '')	or (ie_tipo_guia 	= ie_tipo_guia_p))
	and	((coalesce(ie_carater_atendimento::text, '') = '')	or (ie_carater_atendimento 	= coalesce(ie_carater_atend_p, 'X')))
	and 	((coalesce(ds_token_p::text, '') = '') 		or ((ds_token_p IS NOT NULL AND ds_token_p::text <> '') 	and ie_exige_biometria_token = 'S'))	
	and (pls_obter_se_controle_estab('RE') = 'N');


BEGIN

qt_idade_benef_w	:= pls_obter_idade_segurado(nr_seq_segurado_p, clock_timestamp(), 'A');

ie_regra_liberacao_w	:= pls_obter_lib_rec_facial(	nr_seq_segurado_p, nr_seq_usuario_web_p, 'F',
						ie_tipo_guia_p, ie_funcao_p, nr_seq_prestador_p);

if (ie_regra_liberacao_w	= 'N') then 
	for C01_w in C01 loop
		begin							    
		ds_retorno_w	:= 'S';
		exit;
		end;
	end loop;	
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_exige_rec_facial ( nr_seq_segurado_p bigint, nr_seq_usuario_web_p bigint, ie_tipo_guia_p text, ie_funcao_p bigint, ie_carater_atend_p text, ds_token_p text, nr_seq_prestador_p bigint) FROM PUBLIC;

