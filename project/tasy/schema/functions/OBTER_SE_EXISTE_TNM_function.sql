-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_se_existe_tnm ( cd_topografia_p text, cd_morfologia_p text, cd_cid10_p text, ie_opcao_p text, ie_clinica_patolo_p text, ie_utiliza_loc_tnm_p text) RETURNS bigint AS $body$
DECLARE

/* ie_opcao_p = TO Topografia - MO Morfologia -  T - N - M - pT - pN - pM - E Estadiamento C10*/


/* ie_clinica_patolo_p = C Cl√≠nica - P Patologica */

ie_retorno_w	bigint := 0;

BEGIN
if (cd_morfologia_p IS NOT NULL AND cd_morfologia_p::text <> '') and (ie_opcao_p = 'TO') then
	begin
	select	count(b.cd_topografia)
	into STRICT	ie_retorno_w
	from	cido_topografia_morfologia c,
		cido_topografia b,
		cido_categoria a
	where	a.cd_categoria	= b.cd_categoria
	and	a.cd_categoria	= c.cd_categoria_topografica
	and	c.cd_morfologia	= cd_morfologia_p;
	end;
elsif (cd_topografia_p IS NOT NULL AND cd_topografia_p::text <> '') and (ie_opcao_p in ('MO')) then
	begin
	select	count(a.cd_morfologia)
	into STRICT	ie_retorno_w
	from	cido_topografia_morfologia c,
		cido_topografia b,
		cido_morfologia a
	where	c.cd_categoria_topografica	= b.cd_categoria
	and	b.cd_topografia			= cd_topografia_p
	and	c.cd_morfologia			= a.cd_morfologia;
	end;
elsif (cd_cid10_p IS NOT NULL AND cd_cid10_p::text <> '') and (ie_opcao_p = 'C10') then
	begin
	select count(cd_topografia)
	into STRICT   ie_retorno_w
	from   cido_topografia b
	where  b.cd_cid10			= cd_cid10_p
	and    coalesce(ie_situacao,'A') = 'A';
	end;
elsif (cd_topografia_p IS NOT NULL AND cd_topografia_p::text <> '') and (ie_opcao_p in ('T','N','M','pT','pN','pM','L','V','R','Pn','pL','pV','pR','pPn')) then
	begin
	if (ie_utiliza_loc_tnm_p = 'N') then
		begin
		select	count(a.cd_tnm)
		into STRICT	ie_retorno_w
		from	can_tnm_localizacao c,
			cido_topografia b,
			can_tnm_regra a
		where	c.nr_sequencia		= b.nr_seq_loc_tnm
		and	a.nr_seq_loc_tnm 	= c.nr_sequencia
		and	a.ie_componente_tnm 	= ie_opcao_p
		and	a.ie_classificacao_tnm	= ie_clinica_patolo_p
		and	b.cd_topografia 	= cd_topografia_p;
		end;
	elsif (ie_utiliza_loc_tnm_p = 'S') then
		begin
		select	count(a.cd_tnm)
		into STRICT	ie_retorno_w
		from	can_tnm_loc_topografia d,
			can_tnm_localizacao c,
			cido_topografia b,
			can_tnm_regra a
		where	a.nr_seq_loc_tnm  	   	 	= c.nr_sequencia
		and    	a.ie_classificacao_tnm 	 		= ie_clinica_patolo_p
		and	a.ie_componente_tnm 			= ie_opcao_p
		and	b.cd_topografia 	   	 	= cd_topografia_p
		and	d.cd_topografia	   	 		= b.cd_topografia
		and	obter_loc_anat_tnm(d.nr_sequencia,'T','C')	= c.nr_sequencia
		and	obter_se_loc_tnm_regra(a.nr_sequencia,obter_loc_tnm(d.nr_sequencia,'T','C')) = 'S';
		if (ie_retorno_w = 0) then
			begin
			select	count(a.cd_tnm)
			into STRICT	ie_retorno_w
			from	can_tnm_loc_categoria d,
				can_tnm_localizacao c,
				cido_topografia b,
				can_tnm_regra a
			where	a.nr_seq_loc_tnm  	   	= c.nr_sequencia
			and    	a.ie_classificacao_tnm 	 	= ie_clinica_patolo_p
			and	a.ie_componente_tnm    	 	= ie_opcao_p
			and	b.cd_topografia 	   	= cd_topografia_p
			and	d.cd_categoria		   	= b.cd_categoria
			and	obter_loc_anat_tnm(d.nr_sequencia,'C','C')	= c.nr_sequencia
			and	obter_se_loc_tnm_regra(a.nr_sequencia,obter_loc_tnm(d.nr_sequencia,'C','C')) = 'S'
			and     ie_utiliza_loc_tnm_p = 'S';	
			end;
		end if;
		end;
	end if;
	end;
elsif (cd_topografia_p IS NOT NULL AND cd_topografia_p::text <> '') and (ie_opcao_p = 'E') then
	begin
	if (ie_utiliza_loc_tnm_p = 'N') then
		begin
		select	count(a.cd_estadio)
		into STRICT	ie_retorno_w
		from	can_tnm_localizacao c,
			cido_topografia b,
			can_estadio a
		where	c.nr_sequencia = b.nr_seq_loc_tnm
		and	a.nr_seq_loc_tnm = c.nr_sequencia
		and	b.cd_topografia = cd_topografia_p;
		end;
	elsif (ie_utiliza_loc_tnm_p = 'S') then
		begin
		select	count(cd_estadio)
		into STRICT	ie_retorno_w
		from	estadios_tnm_v
		where	cd_topografia = cd_topografia_p
		and	ie_classificacao_tnm = ie_clinica_patolo_p;
		end;
	end if;
	end;
end if;	
return ie_retorno_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_se_existe_tnm ( cd_topografia_p text, cd_morfologia_p text, cd_cid10_p text, ie_opcao_p text, ie_clinica_patolo_p text, ie_utiliza_loc_tnm_p text) FROM PUBLIC;

