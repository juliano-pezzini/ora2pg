-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_oc_cta_obter_restr_prof ( ie_opcao_p text, dados_regra_p pls_tipos_ocor_pck.dados_regra, cursor_p integer, dados_filtro_prof_p pls_tipos_ocor_pck.dados_filtro_prof, ie_incidencia_regra_p text) RETURNS varchar AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Obter a restição que será utilizada no filtro da ocorrência conforme filtro cadastrado
	para a regra;
	Atualizar os dados das binds da restrição conforme os dados do filtro cadastrado;
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
Criar tratamento para os campos IMP quando for necessário.

Alterações:
------------------------------------------------------------------------------------------------------------------
jjung OS 601441 -	Criação da function.
------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_restricao_w		varchar(4000);
ds_filtro_prof_w	varchar(4000);
ds_select_prof_w	varchar(4000);

BEGIN

--Inicializar as variáveis.
ds_filtro_prof_w	:= null;
ds_restricao_w		:= null;

-- É obrigatório saber qual será o médico a ser verificado, caso não for informado não será aplicada a restricao.
if (dados_filtro_prof_p.ie_medico IS NOT NULL AND dados_filtro_prof_p.ie_medico::text <> '') then

	-- Aqui é verificado qual o profissional da conta que será usado para verificação dos dados do filtro.
	-- Solicitante
	if (dados_filtro_prof_p.ie_medico = 'S') then
		-- Código do médico
		if (dados_filtro_prof_p.cd_medico IS NOT NULL AND dados_filtro_prof_p.cd_medico::text <> '') then

			if (ie_opcao_p = 'RESTRICAO') then

				-- Se for durante a importacao
				if (dados_regra_p.ie_evento = 'IMP') then

					ds_filtro_prof_w := 	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'and	conta.cd_medico_solicitante_imp = :cd_medico';
				else
					ds_filtro_prof_w := 	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'and	conta.cd_medico_solicitante = :cd_medico';
				end if;
			else
				dbms_sql.bind_variable(cursor_p, ':cd_medico', dados_filtro_prof_p.cd_medico);
			end if;
		end if;

		-- Grau de participacao
		-- Removido o filtro de grau de participacao para profissional solicitante pois não se aplica. 710301
		-- Conselho do profissional
		if (dados_filtro_prof_p.nr_seq_conselho IS NOT NULL AND dados_filtro_prof_p.nr_seq_conselho::text <> '') then

			if (ie_opcao_p = 'RESTRICAO') then

				ds_filtro_prof_w := 	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
							'and	conta.nr_seq_conselho_solic = :nr_seq_conselho ';
			else
				dbms_sql.bind_variable(cursor_p, ':nr_seq_conselho', dados_filtro_prof_p.cd_medico);
			end if;
		end if;

		-- Tipo de médico ( Cooperado ou Não cooperado) se for nulo ou for A(Ambos)  não adiciona a restrição
		if (dados_filtro_prof_p.ie_medico_cooperado <> 'A') then

			if (ie_opcao_p = 'RESTRICAO') then

				-- Se for durante a importacao
				if (dados_regra_p.ie_evento = 'IMP') then

					ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'and	pls_obter_se_cooperado_ativo(conta.cd_medico_solicitante_imp, conta.dt_atendimento, null ) = :ie_medico_cooperado ';
				else
					ds_filtro_prof_w := 	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'and	pls_obter_se_cooperado_ativo(conta.cd_medico_solicitante, conta.dt_atendimento, null ) = :ie_medico_cooperado ';
				end if;
			else
				if (dados_filtro_prof_p.ie_medico_cooperado = 'C') then

					dbms_sql.bind_variable(cursor_p, ':ie_medico_cooperado', 'S',1);
				elsif (dados_filtro_prof_p.ie_medico_cooperado = 'N') then

					dbms_sql.bind_variable(cursor_p, ':ie_medico_cooperado', 'N',1);
				end if;
			end if;
		end if;
	-- Executor
	elsif (dados_filtro_prof_p.ie_medico = 'E') then

		-- Código do médico
		if (dados_filtro_prof_p.cd_medico IS NOT NULL AND dados_filtro_prof_p.cd_medico::text <> '') then

			if (ie_opcao_p = 'RESTRICAO') then

				-- Se for durante a importacao
				if (dados_regra_p.ie_evento = 'IMP') then

					ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'and	conta.cd_medico_executor_imp = :cd_medico';
				else
					ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'and	conta.cd_medico_executor = :cd_medico';
				end if;
			else
				dbms_sql.bind_variable(cursor_p, ':cd_medico', dados_filtro_prof_p.cd_medico);
			end if;
		end if;

		-- Grau de participacao
		if (dados_filtro_prof_p.nr_seq_grau_partic IS NOT NULL AND dados_filtro_prof_p.nr_seq_grau_partic::text <> '') then

			if (ie_opcao_p = 'RESTRICAO') then

				ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
							'and	conta.nr_seq_grau_partic = :nr_seq_grau_partic';
			else
				dbms_sql.bind_variable(cursor_p, ':nr_seq_grau_partic', dados_filtro_prof_p.nr_seq_grau_partic);
			end if;
		end if;

		-- Conselho do profissional
		if (dados_filtro_prof_p.nr_seq_conselho IS NOT NULL AND dados_filtro_prof_p.nr_seq_conselho::text <> '') then

			if (ie_opcao_p = 'RESTRICAO') then

				ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
							'and	conta.nr_seq_conselho_exec = :nr_seq_conselho ';
			else
				dbms_sql.bind_variable(cursor_p, ':nr_seq_conselho', dados_filtro_prof_p.nr_seq_conselho);
			end if;
		end if;

		-- Tipo de médico ( Cooperado ou Não cooperado) se for nulo ou for A(Ambos)  não adiciona a restrição
		if (dados_filtro_prof_p.ie_medico_cooperado <> 'A') then

			if (ie_opcao_p = 'RESTRICAO') then

				-- Se for durante a importacao
				if (dados_regra_p.ie_evento = 'IMP') then

					ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'and	pls_obter_se_cooperado_ativo(conta.cd_medico_executor_imp, conta.dt_atendimento, null ) = :ie_medico_cooperado ';
				else
					ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'and	pls_obter_se_cooperado_ativo(conta.cd_medico_executor, conta.dt_atendimento, null ) = :ie_medico_cooperado ';
				end if;
			else
				if (dados_filtro_prof_p.ie_medico_cooperado = 'C') then

					dbms_sql.bind_variable(cursor_p, ':ie_medico_cooperado', 'S',1);

				elsif (dados_filtro_prof_p.ie_medico_cooperado = 'N') then

					dbms_sql.bind_variable(cursor_p, ':ie_medico_cooperado', 'N',1);
				end if;
			end if;
		end if;
	-- Participante
	elsif (dados_filtro_prof_p.ie_medico = 'P') then

		-- Se for a incidência da regra pela conta será verificado todos os procedimentos da conta, se for por procedimento será olhado para os participantes dos procedimentos em específico apenas. Se for por material não faz nada.
		if (ie_incidencia_regra_p = 'C') then

			-- Montar o subselect que verificará os dados dos participantes dos procedimentos da conta. Após é adicionado as restrições dos participantes conforme cadastro do filtro
			ds_select_prof_w :=	ds_select_prof_w || pls_tipos_ocor_pck.enter_w ||
						'and	exists ( '|| pls_tipos_ocor_pck.enter_w ||
						'		select	1 '|| pls_tipos_ocor_pck.enter_w ||
						'		from	pls_proc_participante x '|| pls_tipos_ocor_pck.enter_w ||
						'		where	x.nr_seq_conta_proc in ( '|| pls_tipos_ocor_pck.enter_w ||
						'						select	y.nr_sequencia '|| pls_tipos_ocor_pck.enter_w ||
						'						from	pls_conta_proc y '|| pls_tipos_ocor_pck.enter_w ||
						'						where	y.nr_seq_conta = conta.nr_sequencia) ';

			-- Código do médico
			if (dados_filtro_prof_p.cd_medico IS NOT NULL AND dados_filtro_prof_p.cd_medico::text <> '') then

				if (ie_opcao_p = 'RESTRICAO') then

					-- Se for durante a importacao
					if (dados_regra_p.ie_evento = 'IMP') then

						ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
									'		and	x.cd_medico_imp = :cd_medico';
					else
						ds_filtro_prof_w := 	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
									'		and	x.cd_medico = :cd_medico';
					end if;
				else
					dbms_sql.bind_variable(cursor_p, ':cd_medico', dados_filtro_prof_p.cd_medico);
				end if;
			end if;

			-- Grau de participacao
			if (dados_filtro_prof_p.nr_seq_grau_partic IS NOT NULL AND dados_filtro_prof_p.nr_seq_grau_partic::text <> '') then

				if (ie_opcao_p = 'RESTRICAO') then

					ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'		and	x.nr_seq_grau_partic = :nr_seq_grau_partic';
				else
					dbms_sql.bind_variable(cursor_p, ':nr_seq_grau_partic', dados_filtro_prof_p.nr_seq_grau_partic);
				end if;
			end if;

			-- Conselho do profissional
			if (dados_filtro_prof_p.nr_seq_conselho IS NOT NULL AND dados_filtro_prof_p.nr_seq_conselho::text <> '') then

				if (ie_opcao_p = 'RESTRICAO') then

					ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'		and	x.nr_seq_conselho = :nr_seq_conselho ';
				else
					dbms_sql.bind_variable(cursor_p, ':nr_seq_conselho', dados_filtro_prof_p.cd_medico);
				end if;
			end if;

			-- Tipo de médico ( Cooperado ou Não cooperado) se for nulo ou for A(Ambos)  não adiciona a restrição
			if (dados_filtro_prof_p.ie_medico_cooperado <> 'A') then

				if (ie_opcao_p = 'RESTRICAO') then

					-- Se for durante a importacao
					if (dados_regra_p.ie_evento = 'IMP') then

						ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
									'		and	pls_obter_se_cooperado_ativo(x.cd_medico_imp, conta.dt_atendimento, null ) = :ie_medico_cooperado ';
					else
						ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
									'		and	pls_obter_se_cooperado_ativo(x.cd_medico, conta.dt_atendimento, null ) = :ie_medico_cooperado ';
					end if;
				else
					if (dados_filtro_prof_p.ie_medico_cooperado = 'C') then

						dbms_sql.bind_variable(cursor_p, ':ie_medico_cooperado', 'S',1);

					elsif (dados_filtro_prof_p.ie_medico_cooperado = 'N') then

						dbms_sql.bind_variable(cursor_p, ':ie_medico_cooperado', 'N',1);
					end if;
				end if;
			end if;

		-- Procedimento
		elsif (ie_incidencia_regra_p = 'P') then

			-- Montar o subselect que verificará os dados dos participantes do procedimento. Após é adicionado as restrições dos participantes conforme cadastro do filtro
			ds_select_prof_w :=	ds_select_prof_w || pls_tipos_ocor_pck.enter_w ||
						'and	exists ( '|| pls_tipos_ocor_pck.enter_w ||
						'		select	1 '|| pls_tipos_ocor_pck.enter_w ||
						'		from	pls_proc_participante x '|| pls_tipos_ocor_pck.enter_w ||
						'		where	x.nr_seq_conta_proc = proc.nr_sequencia ';

			-- Código do médico
			if (dados_filtro_prof_p.cd_medico IS NOT NULL AND dados_filtro_prof_p.cd_medico::text <> '') then

				if (ie_opcao_p = 'RESTRICAO') then

					-- Se for durante a importacao
					if (dados_regra_p.ie_evento = 'IMP') then

						ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
									'		and	x.cd_medico_imp = :cd_medico';
					else
						ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
									'		and	x.cd_medico = :cd_medico';
					end if;
				else
					dbms_sql.bind_variable(cursor_p, ':cd_medico', dados_filtro_prof_p.cd_medico);
				end if;
			end if;

			-- Grau de participacao
			if (dados_filtro_prof_p.nr_seq_grau_partic IS NOT NULL AND dados_filtro_prof_p.nr_seq_grau_partic::text <> '') then

				if (ie_opcao_p = 'RESTRICAO') then

					ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'		and	x.nr_seq_grau_partic = :nr_seq_grau_partic';
				else
					dbms_sql.bind_variable(cursor_p, ':nr_seq_grau_partic', dados_filtro_prof_p.nr_seq_grau_partic);
				end if;
			end if;

			-- Conselho do profissional
			if (dados_filtro_prof_p.nr_seq_conselho IS NOT NULL AND dados_filtro_prof_p.nr_seq_conselho::text <> '') then

				if (ie_opcao_p = 'RESTRICAO') then

					ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
								'		and	x.nr_seq_conselho = :nr_seq_conselho ';
				else
					dbms_sql.bind_variable(cursor_p, ':nr_seq_conselho', dados_filtro_prof_p.nr_seq_conselho);
				end if;
			end if;

			-- Tipo de médico ( Cooperado ou Não cooperado) se for nulo ou for A(Ambos)  não adiciona a restrição
			if (dados_filtro_prof_p.ie_medico_cooperado <> 'A') then

				if (ie_opcao_p = 'RESTRICAO') then

					-- Se for durante a importacao
					if (dados_regra_p.ie_evento = 'IMP') then

						ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
									'		and	pls_obter_se_cooperado_ativo(x.cd_medico_imp, conta.dt_atendimento, null ) = :ie_medico_cooperado ';
					else
						ds_filtro_prof_w :=	ds_filtro_prof_w || pls_tipos_ocor_pck.enter_w ||
									'		and	pls_obter_se_cooperado_ativo(x.cd_medico, conta.dt_atendimento, null ) = :ie_medico_cooperado ';
					end if;
				else
					if (dados_filtro_prof_p.ie_medico_cooperado = 'C') then

						dbms_sql.bind_variable(cursor_p, ':ie_medico_cooperado', 'S',1);

					elsif (dados_filtro_prof_p.ie_medico_cooperado = 'N') then

						dbms_sql.bind_variable(cursor_p, ':ie_medico_cooperado', 'N',1);
					end if;
				end if;
			end if;
		end if;
	end if;

	-- só monta a retrição quando tem campos informados
	if (ds_filtro_prof_w IS NOT NULL AND ds_filtro_prof_w::text <> '') then

		if (ds_select_prof_w IS NOT NULL AND ds_select_prof_w::text <> '') then

			ds_restricao_w := 	ds_select_prof_w ||
						ds_filtro_prof_w || ')';
		else
			ds_restricao_w := 	ds_filtro_prof_w;
		end if;
	end if;
end if;

return	ds_restricao_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_oc_cta_obter_restr_prof ( ie_opcao_p text, dados_regra_p pls_tipos_ocor_pck.dados_regra, cursor_p integer, dados_filtro_prof_p pls_tipos_ocor_pck.dados_filtro_prof, ie_incidencia_regra_p text) FROM PUBLIC;

