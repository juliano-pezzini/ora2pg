-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION mdc_itervalo_vm_valido ( nm_usuario_p usuario.nm_usuario%type, nr_seq_episodio_p mdc_episodio_pac_resp_mec.nr_seq_episodio%type, dt_inicio_ventilacao_p mdc_episodio_pac_resp_mec.dt_inicio_ventilacao%type, dt_fim_ventilacao_p mdc_episodio_pac_resp_mec.dt_fim_ventilacao%type, nr_sequencia_p mdc_episodio_pac_resp_mec.nr_sequencia%type default 0) RETURNS varchar AS $body$
DECLARE


nr_sequencia_w              mdc_episodio_pac_resp_mec.nr_sequencia%type;
dt_inicio_ventilacao_w      mdc_episodio_pac_resp_mec.dt_inicio_ventilacao%type;
dt_fim_ventilacao_w         mdc_episodio_pac_resp_mec.dt_fim_ventilacao%type;
cd_estabelecimento_w        usuario.cd_estabelecimento%type;
ds_lang_w                   varchar(255);
ds_mask_w                   varchar(255);
ds_retorno_w                varchar(4000);

-- ## Inicio da function
BEGIN
cd_estabelecimento_w    := obter_estab_usuario(nm_usuario_p);
ds_lang_w               := pkg_date_formaters.getUserLanguageTag(cd_estabelecimento_w, nm_usuario_p);
ds_mask_w               := pkg_date_formaters.localize_mask('short',ds_lang_w);
ds_retorno_w            := 'S';
--------------------------------------------------------------------------------

--937192

--Já existe um registro no mesmo período da data inicial informada.

--Data informada: #@DT_INFORMADA#@

--Registro existente: #@DT_INICIAL#@ - #@DT_FINAL#@ Sequência: #@NR_SEQUENCIA#@
select  max(a.nr_sequencia),
        max(a.dt_inicio_ventilacao),
        max(a.dt_fim_ventilacao)
into STRICT    nr_sequencia_w,
        dt_inicio_ventilacao_w,
        dt_fim_ventilacao_w
from    mdc_episodio_pac_resp_mec a
where   a.nr_seq_episodio = nr_seq_episodio_p
and     (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
and     coalesce(a.dt_inativacao::text, '') = ''
and	a.nr_sequencia	<> nr_sequencia_p
and     dt_inicio_ventilacao_p between a.dt_inicio_ventilacao and a.dt_fim_ventilacao  LIMIT 1;

if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '')then
    ds_retorno_w    := obter_desc_expressao(937192);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INFORMADA#@', to_char(dt_inicio_ventilacao_p, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INICIAL#@', to_char(dt_inicio_ventilacao_w, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_FINAL#@', to_char(dt_fim_ventilacao_w, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@NR_SEQUENCIA#@', nr_sequencia_w),1,4000);
    return ds_retorno_w;
end if;
--------------------------------------------------------------------------------

--937194

--Já existe um registro no mesmo período da data final informada.

--Data informada: #@DT_INFORMADA#@

--Registro existente: #@DT_INICIAL#@ - #@DT_FINAL#@ Sequência: #@NR_SEQUENCIA#@
select  max(a.nr_sequencia),
        max(a.dt_inicio_ventilacao),
        max(a.dt_fim_ventilacao)
into STRICT    nr_sequencia_w,
        dt_inicio_ventilacao_w,
        dt_fim_ventilacao_w
from    mdc_episodio_pac_resp_mec a
where   a.nr_seq_episodio = nr_seq_episodio_p
and     (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
and     coalesce(a.dt_inativacao::text, '') = ''
and	a.nr_sequencia	<> nr_sequencia_p
and     dt_fim_ventilacao_p between a.dt_inicio_ventilacao and a.dt_fim_ventilacao  LIMIT 1;

if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '')then
    ds_retorno_w    := obter_desc_expressao(937194);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INFORMADA#@', to_char(dt_fim_ventilacao_p, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INICIAL#@', to_char(dt_inicio_ventilacao_w, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_FINAL#@', to_char(dt_fim_ventilacao_w, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@NR_SEQUENCIA#@', nr_sequencia_w),1,4000);
end if;
--------------------------------------------------------------------------------

--937196

--Já existe um registro em que a data inicial está entre o período informado

--Período informado: #@DT_INFORMADA_INICIAL#@ - #@DT_INFORMADA_FINAL#@

--Registro existente: #@DT_INICIAL#@ - #@DT_FINAL#@ Sequência: #@NR_SEQUENCIA#@
select  max(a.nr_sequencia),
        max(a.dt_inicio_ventilacao),
        max(a.dt_fim_ventilacao)
into STRICT    nr_sequencia_w,
        dt_inicio_ventilacao_w,
        dt_fim_ventilacao_w
from    mdc_episodio_pac_resp_mec a
where   a.nr_seq_episodio = nr_seq_episodio_p
and     (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
and     coalesce(a.dt_inativacao::text, '') = ''
and	a.nr_sequencia	<> nr_sequencia_p
and     a.dt_inicio_ventilacao between dt_inicio_ventilacao_p and dt_fim_ventilacao_p  LIMIT 1;

if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '')then
    ds_retorno_w    := obter_desc_expressao(937196);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INFORMADA_INICIAL#@', to_char(dt_inicio_ventilacao_p, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INFORMADA_FINAL#@', to_char(dt_fim_ventilacao_p, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INICIAL#@', to_char(dt_inicio_ventilacao_w, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_FINAL#@', to_char(dt_fim_ventilacao_w, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@NR_SEQUENCIA#@', nr_sequencia_w),1,4000);
    return ds_retorno_w;
end if;
--------------------------------------------------------------------------------

--937198

--Já existe um registro em que a data final está entre o período informado

--Período informado: #@DT_INFORMADA_INICIAL#@ - #@DT_INFORMADA_FINAL#@

--Registro existente: #@DT_INICIAL#@ - #@DT_FINAL#@ Sequência: #@NR_SEQUENCIA#@
select  max(a.nr_sequencia),
        max(a.dt_inicio_ventilacao),
        max(a.dt_fim_ventilacao)
into STRICT    nr_sequencia_w,
        dt_inicio_ventilacao_w,
        dt_fim_ventilacao_w
from    mdc_episodio_pac_resp_mec a
where   a.nr_seq_episodio = nr_seq_episodio_p
and     (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
and     coalesce(a.dt_inativacao::text, '') = ''
and	a.nr_sequencia	<> nr_sequencia_p
and     a.dt_fim_ventilacao between dt_inicio_ventilacao_p and dt_fim_ventilacao_p  LIMIT 1;

if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '')then
    ds_retorno_w    := obter_desc_expressao(937196);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INFORMADA_INICIAL#@', to_char(dt_inicio_ventilacao_p, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INFORMADA_FINAL#@', to_char(dt_fim_ventilacao_p, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_INICIAL#@', to_char(dt_inicio_ventilacao_w, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@DT_FINAL#@', to_char(dt_fim_ventilacao_w, ds_mask_w)),1,4000);
    ds_retorno_w	:= substr(replace(ds_retorno_w, '#@NR_SEQUENCIA#@', nr_sequencia_w),1,4000);
    return ds_retorno_w;
end if;
--------------------------------------------------------------------------------

--871441

--Data informada superior à data atual
if (dt_fim_ventilacao_p > clock_timestamp() or dt_inicio_ventilacao_p > clock_timestamp()) then
	ds_retorno_w    := obter_desc_expressao(871441);
	return ds_retorno_w;
end if;
--------------------------------------------------------------------------------
return ds_retorno_w;

exception
when others then
    return obter_desc_expressao(685420);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION mdc_itervalo_vm_valido ( nm_usuario_p usuario.nm_usuario%type, nr_seq_episodio_p mdc_episodio_pac_resp_mec.nr_seq_episodio%type, dt_inicio_ventilacao_p mdc_episodio_pac_resp_mec.dt_inicio_ventilacao%type, dt_fim_ventilacao_p mdc_episodio_pac_resp_mec.dt_fim_ventilacao%type, nr_sequencia_p mdc_episodio_pac_resp_mec.nr_sequencia%type default 0) FROM PUBLIC;

