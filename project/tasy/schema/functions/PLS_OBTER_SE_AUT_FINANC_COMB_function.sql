-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_aut_financ_comb ( nr_seq_ocor_combinada_p bigint, nr_seq_segurado_p bigint, qt_dias_mensal_vencido_p bigint, ie_cheque_devolvido_p text, ie_tipo_pagador_p text, ie_venc_titulo_p text, ie_pagador_complementar_p pls_validacao_aut_fin.ie_pagador_complementar%type) RETURNS varchar AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Verificar se deve utilizar "Valida característica financeira"
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: Consistencia de ocorrência
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/ie_retorno_w			varchar(1) := 'N';
qt_dias_vencido_w		bigint := 0;
qt_dias_ret_pag_w		bigint := 0;
qt_dias_ret_mens_w		bigint := 0;
cd_pessoa_fisica_w		varchar(10);
cd_cgc_w			varchar(14);
ie_tipo_pagador_w		varchar(5);
ie_cheque_w			varchar(1) := 'N';
ie_pagador_isento_w		varchar(1) := 'N';
nr_titulo_w			titulo_receber.nr_titulo%type;
nr_titulo_mens_w		titulo_receber.nr_titulo%type;

C01 CURSOR FOR
	SELECT	nr_seq_pagador
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_p
	and	(nr_seq_pagador IS NOT NULL AND nr_seq_pagador::text <> '')
	
union all

	SELECT	c.nr_seq_pagador_item nr_seq_pagador
	from	pls_segurado a,
		pls_contrato_pagador b,
		pls_pagador_item_mens c
	where	b.nr_sequencia	= a.nr_seq_pagador
	and	b.nr_sequencia	= c.nr_seq_pagador
	and	a.nr_sequencia	= nr_seq_segurado_p
	and	ie_pagador_complementar_p = 'S';

BEGIN

for r_c01_w in C01 loop
	begin

	-- OBTER O TIPO DO PAGADOR
	if (coalesce(ie_tipo_pagador_p,'A') <> 'A') then
		select	cd_cgc,
			cd_pessoa_fisica
		into STRICT	cd_cgc_w,
			cd_pessoa_fisica_w
		from	pls_contrato_pagador
		where	nr_sequencia	= r_c01_w.nr_seq_pagador;

		if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
			ie_tipo_pagador_w := 'PJ';
		else
			ie_tipo_pagador_w := 'PF';
		end if;

		ie_pagador_isento_w	:= pls_obter_se_pagador_isento(r_c01_w.nr_seq_pagador,cd_cgc_w,clock_timestamp());
	end if;

	-- OBTER A QUANTIDADE DE DIAS DE VENCIMENTO
	if (coalesce(ie_venc_titulo_p,'V') = 'V') then
		select	max(clock_timestamp() - a.dt_pagamento_previsto),
			max(a.nr_titulo)
		into STRICT	qt_dias_ret_pag_w,
			nr_titulo_w
		from	titulo_receber	a
		where	a.ie_pls		= 'S'
		and	coalesce(a.dt_liquidacao::text, '') = ''
		and	a.dt_pagamento_previsto	< clock_timestamp()
		and	a.nr_seq_pagador	= r_c01_w.nr_seq_pagador
		and	a.ie_origem_titulo	= '3'
		and	a.ie_situacao		= '1'
		and	a.dt_pagamento_previsto	= (	SELECT	min(c.dt_pagamento_previsto)
							from	titulo_receber c
							where	c.ie_pls		= 'S'
							and	coalesce(c.dt_liquidacao::text, '') = ''
							and	c.dt_pagamento_previsto	< clock_timestamp()
							and	c.nr_seq_pagador	= r_c01_w.nr_seq_pagador
							and	c.ie_origem_titulo	= '3'
							and	c.ie_situacao		= '1');

		-- Select adicional para buscar apenas os casos onde ainda não gravava o NR_SEQ_PAGADOR no título
		select	max(clock_timestamp() - a.dt_pagamento_previsto),
			max(a.nr_titulo)
		into STRICT	qt_dias_ret_mens_w,
			nr_titulo_mens_w
		from	pls_mensalidade b,
			titulo_receber	a
		where	a.nr_seq_mensalidade	= b.nr_sequencia
		and	a.ie_pls		= 'S'
		and	coalesce(a.dt_liquidacao::text, '') = ''
		and	a.dt_pagamento_previsto < clock_timestamp()
		and	b.nr_seq_pagador	= r_c01_w.nr_seq_pagador
		and	a.ie_origem_titulo = '3'
		and	coalesce(a.nr_seq_pagador::text, '') = ''
		and	a.ie_situacao = '1'
		and	a.dt_pagamento_previsto	= (	SELECT	min(c.dt_pagamento_previsto)
							from	titulo_receber c,
								pls_mensalidade d
							where	c.nr_seq_mensalidade	= d.nr_sequencia
							and	c.ie_pls		= 'S'
							and	coalesce(c.dt_liquidacao::text, '') = ''
							and	c.dt_pagamento_previsto	< clock_timestamp()
							and	d.nr_seq_pagador	= r_c01_w.nr_seq_pagador
							and	c.ie_origem_titulo	= '3'
							and	coalesce(c.nr_seq_pagador::text, '') = ''
							and	c.ie_situacao		= '1');
	else
		select	max(clock_timestamp() - a.dt_vencimento),
			max(a.nr_titulo)
		into STRICT	qt_dias_ret_pag_w,
			nr_titulo_w
		from	titulo_receber	a
		where	a.ie_pls		= 'S'
		and	coalesce(a.dt_liquidacao::text, '') = ''
		and	a.dt_vencimento	< clock_timestamp()
		and	a.nr_seq_pagador	= r_c01_w.nr_seq_pagador
		and	a.ie_origem_titulo	= '3'
		and	a.ie_situacao		= '1'
		and	a.dt_vencimento	= (		SELECT	min(c.dt_vencimento)
							from	titulo_receber c
							where	c.ie_pls		= 'S'
							and	coalesce(c.dt_liquidacao::text, '') = ''
							and	c.dt_vencimento	< clock_timestamp()
							and	c.nr_seq_pagador	= r_c01_w.nr_seq_pagador
							and	c.ie_origem_titulo	= '3'
							and	c.ie_situacao		= '1');

		-- Select adicional para buscar apenas os casos onde ainda não gravava o NR_SEQ_PAGADOR no título
		select	max(clock_timestamp() - a.dt_vencimento),
			max(a.nr_titulo)
		into STRICT	qt_dias_ret_mens_w,
			nr_titulo_mens_w
		from	pls_mensalidade b,
			titulo_receber	a
		where	a.nr_seq_mensalidade	= b.nr_sequencia
		and	a.ie_pls		= 'S'
		and	coalesce(a.dt_liquidacao::text, '') = ''
		and	a.dt_vencimento < clock_timestamp()
		and	b.nr_seq_pagador	= r_c01_w.nr_seq_pagador
		and	a.ie_origem_titulo = '3'
		and	coalesce(a.nr_seq_pagador::text, '') = ''
		and	a.ie_situacao = '1'
		and	a.dt_vencimento	= (		SELECT	min(c.dt_vencimento)
							from	titulo_receber c,
								pls_mensalidade d
							where	c.nr_seq_mensalidade	= d.nr_sequencia
							and	c.ie_pls		= 'S'
							and	coalesce(c.dt_liquidacao::text, '') = ''
							and	c.dt_vencimento	< clock_timestamp()
							and	d.nr_seq_pagador	= r_c01_w.nr_seq_pagador
							and	c.ie_origem_titulo	= '3'
							and	coalesce(c.nr_seq_pagador::text, '') = ''
							and	c.ie_situacao		= '1');
	end if;

	if (qt_dias_ret_pag_w > 0) then
		qt_dias_vencido_w	:= qt_dias_ret_pag_w;

		-- Tratamento para se achar por mensalidade com quantidade de dias maior, usar este
		if (qt_dias_ret_mens_w > qt_dias_ret_pag_w) then
			nr_titulo_w		:= nr_titulo_mens_w;
			qt_dias_vencido_w	:= qt_dias_ret_mens_w;
		end if;
	end if;

	-- OBTER CHEQUE DEVOLVIDO
	if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
		select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_cheque_w
		from	cheque_cr		a
		where	a.cd_pessoa_fisica 	= cd_pessoa_fisica_w
		and	obter_status_cheque(a.nr_seq_cheque) in (3,5,6,7,10)  LIMIT 1;
	end if;

	if	((coalesce(qt_dias_mensal_vencido_p,0) = 0) or ((coalesce(qt_dias_vencido_w,0) >= coalesce(qt_dias_mensal_vencido_p,0)) and (coalesce(ie_pagador_isento_w,'N') = 'N'))) and
		((coalesce(ie_cheque_devolvido_p,'N') = 'N') or ((ie_cheque_devolvido_p = ie_cheque_w) or (coalesce(ie_cheque_devolvido_p::text, '') = '')))  and
		((coalesce(ie_tipo_pagador_p,'A') = 'A') or (ie_tipo_pagador_p = ie_tipo_pagador_w)) then
		return 'S' || to_char(nr_titulo_w);
	end if;
	end;
end loop; --C01
return	'N';

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_aut_financ_comb ( nr_seq_ocor_combinada_p bigint, nr_seq_segurado_p bigint, qt_dias_mensal_vencido_p bigint, ie_cheque_devolvido_p text, ie_tipo_pagador_p text, ie_venc_titulo_p text, ie_pagador_complementar_p pls_validacao_aut_fin.ie_pagador_complementar%type) FROM PUBLIC;

