-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_status_diagnostico (ie_tipo_cronica_p text, nr_atendimento_p bigint) RETURNS varchar AS $body$
DECLARE

				
qt_glicemia_capilar_w	double precision;				
vl_resultado_w		smallint;
qt_pa_diastolica_w		smallint;
qt_pa_sistolica_w		smallint;
qt_peso_w		double precision;
qt_peso_basal_w		double precision;
qt_percentual_inicial_w 	bigint;
qt_percentual_perdido_w 	bigint;
vl_total_colesterol_w 	integer;
vl_tipo_hdl_w		integer;
vl_tipo_ldl_w		integer;
vl_tipo_triglic_w 		integer;
sexo_pac_exame_w 	char(1);
qt_diabetes_w 		smallint;
vl_sexo_exame 		char(1);
vl_tipo_exame 		smallint;
vl_result_exame 		integer;

C01 CURSOR FOR
SELECT	p.ie_sexo,d.ie_tipo_exame, (lab_obter_resultado_exame(f.nr_seq_resultado, f.nr_sequencia))
from   	atendimento_paciente a,
	prescr_medica b,
	exame_laboratorio d,
	exame_lab_resultado e,
    	exame_lab_result_item f,
	pessoa_fisica p
where	b.nr_atendimento          	= a.nr_atendimento
and    	d.nr_seq_exame            	= f.nr_seq_exame
and    	e.nr_prescricao           	= b.nr_prescricao
and    	e.nr_atendimento          	= a.nr_atendimento
and    	f.nr_seq_resultado        	= e.nr_seq_resultado
and	p.cd_pessoa_fisica 		= a.cd_pessoa_fisica
and   	(qt_resultado IS NOT NULL AND qt_resultado::text <> '') and qt_resultado > 0
and 	b.nr_atendimento = nr_atendimento_p 
order by e.dt_resultado;


BEGIN

-- Essa function rotorna o valor dominio, baseada no dominio 9182
if (ie_tipo_cronica_p	 = 'DIABT' or ie_tipo_cronica_p	= 'MTABO') then
	select 	coalesce(max(qt_glicemia_capilar),0)
	into STRICT	qt_glicemia_capilar_w
	from 	atendimento_sinal_vital
	where	nr_atendimento = nr_atendimento_p
	and 	ie_situacao <> 'I'
	and 	ie_tipo_medicao = '1'
	and 	dt_atualizacao =  (SELECT 	max(x.DT_ATUALIZACAO)
				from  	atendimento_sinal_vital x
				where 	x.nr_atendimento = nr_atendimento_p
				and 	x.ie_tipo_medicao = 1	
				and x.ie_situacao <> 'I');
								
	
	if ( qt_glicemia_capilar_w >= 70 and qt_glicemia_capilar_w <= 130) then
			vl_resultado_w := 1;
	elsif ( qt_glicemia_capilar_w = 0) then
			vl_resultado_w := 3;
	else
			vl_resultado_w := 2;	
	end if;

/*Paciente que se encuentra en tratamiento
farmacológico y/o no farmacológico que su
presión arterial se encuentra en cifras
menores a 140 / 90 mmHg. Cuando el
paciente tenga comorbilidad con Diabetes
Mellitus se considera bajo control cuando
su presión arterial se encuentre en cifras
menores de 130/80 mmHg.*/
	
elsif (ie_tipo_cronica_p = 'HIPAS' or ie_tipo_cronica_p	= 'MTABO') then --Hipertensão
	
	select 	coalesce(max(qt_pa_sistolica),0),
			coalesce(max(qt_pa_diastolica),0)
	into STRICT	qt_pa_sistolica_w,
			qt_pa_diastolica_w
	from 	atendimento_sinal_vital
	where	nr_atendimento = nr_atendimento_p
	and 	ie_situacao <> 'I'
	and 	dt_atualizacao = (SELECT 	max(x.DT_ATUALIZACAO)
				from  	atendimento_sinal_vital x
				where 	x.nr_atendimento = nr_atendimento_p
				and x.ie_situacao <> 'I');
							
	select count(*)
	into STRICT	qt_diabetes_w
	from 	lista_problema_pac
	where 	cd_pessoa_fisica = obter_pessoa_atendimento(nr_atendimento_p,'C')
	and 	obter_tipo_cronico_cid(cd_doenca) = 'DIABT';
	
	if (qt_diabetes_w > 0 and qt_pa_sistolica_w <= 130 and qt_pa_diastolica_w <= 80) then
			vl_resultado_w := 1;
	elsif (qt_diabetes_w = 0 and qt_pa_sistolica_w <= 140 and qt_pa_diastolica_w <= 90) then
			vl_resultado_w := 1;
	elsif (qt_pa_diastolica_w = 0) and (qt_pa_sistolica_w = 0)  then
			vl_resultado_w := 3;
	else
			vl_resultado_w := 2;	
	end if;

/* Paciente que haya disminuido al menos el
5% de su peso corporal con relación a la
medición de peso de ingreso a tratamiento.*/
elsif (ie_tipo_cronica_p	 = 'OBSDA') then --Obesidade
	select 	coalesce(max(qt_peso),0)
	into STRICT	qt_peso_w
	from 	atendimento_sinal_vital
	where	nr_atendimento = nr_atendimento_p
	and 	ie_situacao <> 'I'
	and 	dt_atualizacao = (SELECT 	max(x.DT_ATUALIZACAO)
				from  	atendimento_sinal_vital x
				where 	x.nr_atendimento = nr_atendimento_p
				and x.ie_situacao <> 'I');
	
	select 	coalesce(max(QT_PESO),0)
	into STRICT	qt_peso_basal_w
	from 	dado_basal
	where 	cd_pessoa_fisica = obter_pessoa_atendimento(nr_atendimento_p,'C')
	and		ie_doenca_cronica_mx = 'OBSDA';
	
	qt_percentual_inicial_w	:= dividir_sem_round((qt_peso_w * 100),qt_peso_basal_w);

	qt_percentual_perdido_w := 100 - qt_percentual_inicial_w;
	
		if (qt_peso_basal_w = 0) then
			vl_resultado_w := 3;
		elsif (qt_percentual_perdido_w >= 5) then
			vl_resultado_w := 1;
		elsif (qt_peso_w = 0) then
			vl_resultado_w := 3;		
		else
			vl_resultado_w := 2;	
		end if;
	
/*Paciente que presenta cifras de colesterol
total menores a 200 mg / dL, LDL menor a
100 mg/dL, Triglicéridos menores a 150
mg/dL en muestra tomada en ayuno de al
menos 12 hrs. además de HDL mayores
de 40 mg/dL para hombres y mayores de
50 mg/dL en mujeres.*/
elsif (ie_tipo_cronica_p	 = 'LIPDM' or ie_tipo_cronica_p	= 'MTABO') then --dislipidemia
open C01;
loop
fetch C01 into
	vl_sexo_exame,
	vl_tipo_exame,
	vl_result_exame;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (vl_tipo_exame = '1') then
		vl_total_colesterol_w := vl_result_exame;
	elsif (vl_tipo_exame = '3') then
			vl_tipo_hdl_w := vl_result_exame;
			sexo_pac_exame_w := vl_sexo_exame;
	elsif (vl_tipo_exame = '4') then
			vl_tipo_ldl_w :=	vl_result_exame;
	elsif (vl_tipo_exame = '5') then
 			vl_tipo_triglic_w := vl_result_exame;
	end if;
	end;
end loop;
		
	if (coalesce(vl_total_colesterol_w::text, '') = '' or coalesce(vl_tipo_ldl_w::text, '') = '' or coalesce(vl_tipo_triglic_w::text, '') = '') then
		vl_resultado_w := 3;
	elsif (vl_total_colesterol_w < 200 and vl_tipo_ldl_w < 100 and vl_tipo_triglic_w < 150) then
		vl_resultado_w := 1;
	else
		vl_resultado_w := 2;
	end if;
	
	
	if (vl_resultado_w <> 2 and vl_resultado_w <> 3) then
		
		if (coalesce(vl_total_colesterol_w::text, '') = '' or coalesce(vl_tipo_ldl_w::text, '') = '' or coalesce(vl_tipo_triglic_w::text, '') = '') then
			vl_resultado_w := 3;
		elsif (vl_total_colesterol_w < 200 and vl_tipo_hdl_w > 40 and vl_tipo_triglic_w < 150 and sexo_pac_exame_w = 'M' ) then
			vl_resultado_w := 1;
		elsif (vl_total_colesterol_w < 200 and vl_tipo_hdl_w > 50 and vl_tipo_triglic_w < 150 and sexo_pac_exame_w = 'F' ) then
			vl_resultado_w := 1;
		else
			vl_resultado_w := 2;
	end if;
		end if;
close C01;

end if;
return	vl_resultado_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_status_diagnostico (ie_tipo_cronica_p text, nr_atendimento_p bigint) FROM PUBLIC;

