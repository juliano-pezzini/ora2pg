-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION ageint_obter_se_perm_ult_hor ( cd_agenda_p bigint, dt_agenda_p timestamp, nr_minuto_duracao_p bigint, nr_seq_ageint_p bigint, nr_seq_ageint_item_p bigint, cd_medico_p bigint, nm_usuario_p text) RETURNS varchar AS $body$
DECLARE


ds_retorno_w		varchar(1)	:= 'S';
qt_perm_agenda_w	bigint;
nr_minuto_duracao_w	bigint;
ie_consistir_agexame_w	varchar(1);
ie_nao_consiste_fim_turno_w	varchar(1);


nr_seq_proc_interno_w	bigint;
nr_seq_proc_interno_ww  bigint;
nr_duracao_item_w	bigint;

ie_cons_dur_exames_adic_w	varchar(1);
cd_pessoa_fisica_w	varchar(10);
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_plano_w		varchar(10);
ie_lado_w		varchar(1);
qt_minuto_w		bigint;
qt_minuto_aux_adic_w	bigint;
qt_minuto_aux_princ_w	bigint;

nr_seq_exame_adic_w	bigint;
ie_lado_adic_w		varchar(1);
qt_minuto_tot_adic_w	bigint := 0;

ie_dia_semana_w		smallint;
dt_agenda_duracao_w timestamp;

C01 CURSOR FOR
	SELECT	nr_seq_proc_interno,
		ie_lado
	from	ageint_exame_adic_item
	where	nr_seq_item	= nr_seq_ageint_item_p;
			

BEGIN
-- Objeto adaptado na ageint_sugerir_horarios_pck.get_perm_ult_hor. Caso altere aqui verificar necessidade de implementar na ageint_sugerir_horarios_pck tambem.
select	coalesce(max(a.ie_nao_consiste_fim_turno),'N')
into STRICT	ie_nao_consiste_fim_turno_w
from	proc_interno a,
	agenda_integrada_item b
where	a.nr_sequencia = b.nr_seq_proc_interno
and	b.nr_sequencia = nr_seq_ageint_item_p;



select	coalesce(max(obter_valor_param_usuario(869, 303, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento)), 'N')
into STRICT	ie_cons_dur_exames_adic_w
;

select	max(ie_lado)
into STRICT	ie_lado_w
from	agenda_integrada_item
where	nr_sequencia	= nr_seq_ageint_item_p;

select  max(nr_seq_proc_interno),
	max(nr_minuto_duracao)
into STRICT    nr_seq_proc_interno_w,
	nr_duracao_item_w
from    agenda_integrada_item
where   nr_sequencia    = nr_seq_ageint_item_p;

select  max(cd_pessoa_fisica),
	max(cd_convenio),
	max(cd_Categoria),
	max(cd_plano)
into STRICT    cd_pessoa_fisica_w,
	cd_convenio_w,
	cd_categoria_w,
	cd_plano_w
from    agenda_integrada
where   nr_sequencia    = nr_seq_ageint_p;

ie_dia_semana_w := obter_cod_dia_semana(dt_agenda_p);

if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') and (coalesce(nr_duracao_item_w::text, '') = '')then
	qt_minuto_w := Obter_Tempo_Padrao_Ageint(	nr_seq_proc_interno_w, null, null, cd_medico_p, cd_agenda_p, cd_pessoa_fisica_w, qt_minuto_w, ie_lado_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, ie_dia_semana_w);
end if;

/*INICIO - Tratamento para atualizacao correta das duracoes dos exames, com base nas regras de "Tempo Proced", para os exames normais e adicionais dos itens*/

if (ie_cons_dur_exames_adic_w = 'S') then				
	--Exame adicional
	open C01;
	loop
	fetch C01 into	
		nr_seq_exame_adic_w,
		ie_lado_adic_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		if (nr_seq_exame_adic_w IS NOT NULL AND nr_seq_exame_adic_w::text <> '')then
		
			qt_minuto_aux_adic_w := Obter_Tempo_Padrao_Ageint(	nr_seq_exame_adic_w, null, null, cd_medico_p, cd_agenda_p, cd_pessoa_fisica_w, qt_minuto_aux_adic_w, ie_lado_adic_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, ie_dia_semana_w);
										
			if (qt_minuto_aux_adic_w IS NOT NULL AND qt_minuto_aux_adic_w::text <> '')then
				qt_minuto_tot_adic_w := qt_minuto_aux_adic_w + qt_minuto_tot_adic_w;
			end if;
	
		end if;
		
		end;
	end loop;
	close C01;
	
	--Exame normal
	select	b.nr_seq_proc_interno
	into STRICT	nr_seq_proc_interno_ww										
	from	agenda_integrada_item b				
	where	b.nr_sequencia	= nr_seq_ageint_item_p;
	
	qt_minuto_aux_princ_w := Obter_Tempo_Padrao_Ageint(	nr_seq_proc_interno_ww, null, null, cd_medico_p, cd_agenda_p, cd_pessoa_fisica_w, qt_minuto_aux_princ_w, ie_lado_adic_w, cd_convenio_w, cd_Categoria_w, cd_plano_w, null, ie_dia_semana_w);
										
			if (qt_minuto_aux_princ_w IS NOT NULL AND qt_minuto_aux_princ_w::text <> '') then
				qt_minuto_tot_adic_w := qt_minuto_tot_adic_w + qt_minuto_aux_princ_w;
			end if;

end if;
/*FIM - Tratamento para atualizacao correta das duracoes dos exames, com base nas regras de "Tempo Proced", para os exames normais e adicionais dos itens*/

if (coalesce(qt_minuto_tot_adic_w, 0) = 0) or (coalesce(qt_minuto_tot_adic_w::text, '') = '')then
		
	if (coalesce(qt_minuto_w, 0) > 0)then
		qt_minuto_tot_adic_w	:= qt_minuto_w;
	elsif (coalesce(nr_minuto_duracao_p, 0) > 0) then
		qt_minuto_tot_adic_w	:= nr_minuto_duracao_p;						
	elsif (coalesce(nr_duracao_item_w, 0) > 0)then
		qt_minuto_tot_adic_w	:= nr_duracao_item_w;						
	end if;					
	
end if;	

if (ie_nao_consiste_fim_turno_w = 'N') and (coalesce(qt_minuto_tot_adic_w, coalesce(nr_duracao_item_w, nr_minuto_duracao_p)) > 0) then

	ie_consistir_agexame_w := Obter_Param_Usuario(869, 181, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_consistir_agexame_w);

        dt_agenda_duracao_w := dt_agenda_p + coalesce(qt_minuto_tot_adic_w, nr_duracao_item_w, nr_minuto_duracao_p) / 1440;

	select	coalesce(max(1),0)
	into STRICT	qt_perm_agenda_w
	from	ageint_lib_usuario a,
		ageint_horarios_usuario b
	where	b.cd_agenda	= cd_agenda_p
	and	a.nr_sequencia	= b.nr_seq_ageint_lib
	and	b.nm_usuario	= nm_usuario_p
	and	a.nr_seq_ageint	= nr_seq_ageint_p
  and b.hr_agenda between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_agenda_p) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(dt_agenda_p)
	and	b.hr_agenda + b.nr_minuto_duracao / 1440 >= dt_agenda_duracao_w  LIMIT 1;

	if (qt_perm_agenda_w	= 0) then
		ds_retorno_w	:= 'N';
	end if;

	if (ds_retorno_w = 'S') and (ie_consistir_agexame_w = 'S') then
		select	sum(nr_minuto_duracao)
		into STRICT	nr_minuto_duracao_w
		from	agenda_paciente
		where	cd_agenda = cd_agenda_p
		and	hr_inicio between dt_agenda_p and dt_agenda_p + coalesce(qt_minuto_tot_adic_w, coalesce(nr_duracao_item_w, nr_minuto_duracao_p)) / 1440
		and	ie_status_agenda  = 'L';
		
		if (nr_minuto_duracao_w < coalesce(qt_minuto_tot_adic_w, coalesce(nr_duracao_item_w, nr_minuto_duracao_p))) then
			ds_retorno_w := 'N';
		end if;
	end if;
end if;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION ageint_obter_se_perm_ult_hor ( cd_agenda_p bigint, dt_agenda_p timestamp, nr_minuto_duracao_p bigint, nr_seq_ageint_p bigint, nr_seq_ageint_item_p bigint, cd_medico_p bigint, nm_usuario_p text) FROM PUBLIC;

