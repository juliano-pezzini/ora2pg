-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_origem_proced ( cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, ie_origem_p text, dt_procedimento_p timestamp, ds_parametro_tres_p text) RETURNS PROCEDIMENTO.IE_ORIGEM_PROCED%TYPE AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:   Obter a origem do procedimento
----------------------------------------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [X] Tasy (Delphi/Java) [X] Portal [  ] Relatórios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	IE_ORIGEM_P

	L - Localizador
	R - Regra
*/ds_sql_w		varchar(2000);
var_cur_w		integer;
var_exec_w		integer;
var_retorno_w		integer;

ie_origem_proced_w	procedimento.ie_origem_proced%type;


BEGIN

ie_origem_proced_w := 5;

-- Montar o select que será executado para buscar a regra válida,
ds_sql_w :=	'select	ie_origem_proced ' ||
		'from	pls_regra_origem_proced ' ||
		'where	(dt_inicio_vigencia is null or dt_inicio_vigencia <= :dt_referencia) ' ||
		'and	(dt_fim_vigencia is null or dt_fim_vigencia >= :dt_referencia) ';

-- Se vier informado o estabelecimento então busca apenas as regras deste estabelecimento.
if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then

	ds_sql_w :=	ds_sql_w ||
			'and	(cd_estabelecimento is null or cd_estabelecimento = :cd_estabelecimento) ';
end if;

-- Se vier informado o prestador então busca por regras que tenham o prestador informado.
if (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '') then

	ds_sql_w :=	ds_sql_w ||
			'and	(nr_seq_prestador is null or nr_seq_prestador = :nr_seq_prestador) ';
end if;

-- Se vier informado a origem de onde a regra deve ser obtida buscar por estas regras.
if (ie_origem_p IS NOT NULL AND ie_origem_p::text <> '') then

	ds_sql_w :=	ds_sql_w ||
			'and	(ie_acao_regra is null or ie_acao_regra = :ie_origem or ie_acao_regra = ''A'' ) ';
end if;

-- Por padrão os registros serão ordenados por suas datas de início e fim de vigência.
ds_sql_w :=	ds_sql_w ||
		'order by	nvl(dt_inicio_vigencia, sysdate), ' ||
		'		nvl(dt_fim_vigencia, sysdate) ';

-- Se vier informado o estabelecimento então ordena por este para  que regras com este campo informado sejam verificadas por último.
if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then

	ds_sql_w :=	ds_sql_w ||
			', nvl(cd_estabelecimento, 0) ';
end if;

-- Se vier informado a origem então ordena por este para que regras com este campo informado sejam verificadas por último.
if (ie_origem_p IS NOT NULL AND ie_origem_p::text <> '') then

	ds_sql_w :=	ds_sql_w || ', nvl(ie_acao_regra, ''A'') ';
end if;

-- Se vier informado o prestador então ordena por este para  que regras com este campo informado sejam verificadas por último.
if (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '') then

	ds_sql_w :=	ds_sql_w || ', nvl(nr_seq_prestador, 0) ';
end if;

-- Abrir um novo cursor
var_cur_w := dbms_sql.open_cursor;

-- Executar o parse do comando montado
dbms_sql.parse(var_cur_w, ds_sql_w, dbms_sql.native);

-- Se não vier informada a data usa a data atual como data de referência, caso contrário usa a data passada por parâmetro
if (coalesce(dt_procedimento_p::text, '') = '') then

	dbms_sql.bind_variable(var_cur_w, ':dt_referencia', clock_timestamp());
else
	dbms_sql.bind_variable(var_cur_w, ':dt_referencia', dt_procedimento_p);
end if;

-- Se veio o estabelecimento informado então irá filtrar por estabelecimentos com o mesmo código
if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') then

	dbms_sql.bind_variable(var_cur_w, ':cd_estabelecimento', cd_estabelecimento_p);
end if;

-- Da mesma forma para o prestador
if (nr_seq_prestador_p IS NOT NULL AND nr_seq_prestador_p::text <> '') then

	dbms_sql.bind_variable(var_cur_w, ':nr_seq_prestador', nr_seq_prestador_p);
end if;

-- E a origem.
if (ie_origem_p IS NOT NULL AND ie_origem_p::text <> '') then

	dbms_sql.bind_variable(var_cur_w, ':ie_origem', ie_origem_p);
end if;

-- Definir o tipo de dado que será esperado no retorno do select.
dbms_sql.define_column(var_cur_w, 1, ie_origem_proced_w);

-- Executar o comando.
var_exec_w := dbms_sql.execute(var_cur_w);
-- Varrer o retorno
loop
-- executar o fetch do retorno nos buffers do Oracle
var_retorno_w := dbms_sql.fetch_rows(var_cur_w);
-- se nenhuma linha for retornada então aborta o loop.
exit when var_retorno_w = 0;

	-- Obter o valor do retorno
	dbms_sql.column_value(var_cur_w, 1, ie_origem_proced_w);
end loop;
-- fechar o cursor.
dbms_sql.close_cursor(var_cur_w);-- Regras.
return	ie_origem_proced_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_origem_proced ( cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, ie_origem_p text, dt_procedimento_p timestamp, ds_parametro_tres_p text) FROM PUBLIC;

