-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_se_regra_negativa ( nr_seq_guia_p bigint, nr_seq_requisicao_p bigint) RETURNS varchar AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Verificar se as glosas geradas na guia são as mesmas glosas definidas na função
OPS - Cadastro de Regras > OPS ¿ Atendimento > Liberação de guia de intercâmbio > Recebimento.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_retorno_w			varchar(1);
nr_seq_regra_neg_aut_orig_w	bigint;
nr_seq_motivo_glosa_w		bigint;
nr_seq_proc_w			bigint;
nr_seq_mat_w			bigint;
qt_glosa_cabecalho_w		bigint;


C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_neg_aut_origem
	where	clock_timestamp()         >= dt_inicio_vigencia
	and (coalesce(dt_fim_vigencia::text, '') = '' or clock_timestamp() <= dt_fim_vigencia)
	and	ie_situacao	= 'A'
	and	ie_ignora_regra_aud_ptu = 'S'
	and (coalesce(cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento and pls_obter_se_controle_estab('RE') = 'S')
	
union all

	SELECT	nr_sequencia
	from	pls_regra_neg_aut_origem
	where	clock_timestamp()         >= dt_inicio_vigencia
	and (coalesce(dt_fim_vigencia::text, '') = '' or clock_timestamp() <= dt_fim_vigencia)
	and	ie_situacao	= 'A'
	and	ie_ignora_regra_aud_ptu = 'S'
	and pls_obter_se_controle_estab('RE') = 'N';

C02 CURSOR FOR
	SELECT	nr_seq_motivo_glosa
	from	pls_glosa_reg_neg_aut_orig
	where	nr_seq_regra_neg_aut_orig	= nr_seq_regra_neg_aut_orig_w;

C05 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_guia_plano_proc a,
		pls_guia_glosa b,
		tiss_motivo_glosa c
	where	a.nr_seq_guia		= nr_seq_guia_p
	and	b.nr_seq_guia_proc	= a.nr_sequencia
	and	c.nr_sequencia		= b.nr_seq_motivo_glosa
	and	c.nr_sequencia		= nr_seq_motivo_glosa_w;

C06 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_guia_plano_mat a,
		pls_guia_glosa b,
		tiss_motivo_glosa c
	where	a.nr_seq_guia		= nr_seq_guia_p
	and	b.nr_seq_guia_mat	= a.nr_sequencia
	and	c.nr_sequencia		= b.nr_seq_motivo_glosa
	and	c.nr_sequencia		= nr_seq_motivo_glosa_w;

C10 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_requisicao_proc a,
		pls_requisicao_glosa b,
		tiss_motivo_glosa c
	where	a.nr_seq_requisicao	= nr_seq_requisicao_p
	and	b.nr_seq_req_proc	= a.nr_sequencia
	and	c.nr_sequencia		= b.nr_seq_motivo_glosa
	and	c.nr_sequencia		= nr_seq_motivo_glosa_w;

C11 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_requisicao_mat a,
		pls_requisicao_glosa b,
		tiss_motivo_glosa c
	where	a.nr_seq_requisicao	= nr_seq_requisicao_p
	and	b.nr_seq_req_mat	= a.nr_sequencia
	and	c.nr_sequencia		= b.nr_seq_motivo_glosa
	and	c.nr_sequencia		= nr_seq_motivo_glosa_w;


BEGIN
ds_retorno_w	:= 'N';

open C01;
loop
fetch C01 into
	nr_seq_regra_neg_aut_orig_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	open C02;
	loop
	fetch C02 into
		nr_seq_motivo_glosa_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
			select	count(1)
			into STRICT	qt_glosa_cabecalho_w
			from	pls_guia_glosa a,
				tiss_motivo_glosa b
			where	a.nr_seq_guia		= nr_seq_guia_p
			and	a.nr_seq_motivo_glosa	= b.nr_sequencia
			and	b.nr_sequencia		= nr_seq_motivo_glosa_w;

			if (qt_glosa_cabecalho_w > 0) then
				ds_retorno_w := 'S';
			end if;

			open C05;
			loop
			fetch C05 into
				nr_seq_proc_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin
					ds_retorno_w := 'S';
				end;
			end loop;
			close C05;

			open C06;
			loop
			fetch C06 into
				nr_seq_mat_w;
			EXIT WHEN NOT FOUND; /* apply on C06 */
				begin
					ds_retorno_w := 'S';
				end;
			end loop;
			close C06;

		elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
			select	count(1)
			into STRICT	qt_glosa_cabecalho_w
			from	pls_requisicao_glosa a,
				tiss_motivo_glosa b
			where	a.nr_seq_requisicao	= nr_seq_requisicao_p
			and	a.nr_seq_motivo_glosa	= b.nr_sequencia
			and	b.nr_sequencia		= nr_seq_motivo_glosa_w;

			if (qt_glosa_cabecalho_w > 0) then
				ds_retorno_w := 'S';
			end if;

			open C10;
			loop
			fetch C10 into
				nr_seq_proc_w;
			EXIT WHEN NOT FOUND; /* apply on C10 */
				begin
					ds_retorno_w := 'S';
				end;
			end loop;
			close C10;

			open C11;
			loop
			fetch C11 into
				nr_seq_mat_w;
			EXIT WHEN NOT FOUND; /* apply on C11 */
				begin
					ds_retorno_w := 'S';
				end;
			end loop;
			close C11;
		end if;
		end;
	end loop;
	close C02;
	end;
end loop;
close C01;

return	ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_se_regra_negativa ( nr_seq_guia_p bigint, nr_seq_requisicao_p bigint) FROM PUBLIC;

