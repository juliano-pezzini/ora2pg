-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_ordem_protocolo_lib ( cd_tipo_protocolo_p bigint, cd_protocolo_p bigint, nr_seq_medicacao_p bigint, nm_usuario_p text, ie_opcao_p text, cd_perfil_p bigint default null) RETURNS bigint AS $body$
DECLARE


cd_pessoa_fisica_w	varchar(20);
cd_perfil_w		bigint;
qt_reg_w		bigint;
nr_seq_apres_w		bigint := 999;

C01 CURSOR FOR
	SELECT	nr_seq_apres
	from	tipo_protocolo_lib
	where	cd_tipo_protocolo = cd_tipo_protocolo_p
	and		coalesce(cd_pessoa_fisica, cd_pessoa_fisica_w) = cd_pessoa_fisica_w
	and		obter_se_especialidade_medico(cd_pessoa_fisica_w,cd_especialidade) = 'S'
	and		coalesce(cd_perfil, cd_perfil_w) = cd_perfil_w
	and		ie_regra = 'U'
	order by	cd_perfil desc,
				cd_especialidade desc,
				cd_pessoa_fisica desc;

C02 CURSOR FOR
	SELECT	nr_seq_apres
	from	protocolo_lib
	where	cd_protocolo = cd_protocolo_p
	and		coalesce(cd_pessoa_fisica, cd_pessoa_fisica_w) = cd_pessoa_fisica_w
	and		obter_se_especialidade_medico(cd_pessoa_fisica_w,cd_especialidade) = 'S'
	and		coalesce(cd_perfil, cd_perfil_w) = cd_perfil_w
	and		ie_regra = 'U'
	order by	cd_perfil desc,
				cd_especialidade desc,
				cd_pessoa_fisica desc;

C03 CURSOR FOR
	SELECT	nr_seq_apres
	from	protocolo_medic_lib
	where	cd_protocolo = cd_protocolo_p
	and		nr_seq_medicacao = nr_seq_medicacao_p
	and		coalesce(cd_pessoa_fisica, cd_pessoa_fisica_w) = cd_pessoa_fisica_w
	and		obter_se_especialidade_medico(cd_pessoa_fisica_w,cd_especialidade) = 'S'
	and		coalesce(cd_perfil, cd_perfil_w) = cd_perfil_w
	and		ie_regra = 'U'
	order by	cd_perfil desc,
				cd_especialidade desc,
				cd_pessoa_fisica desc;

BEGIN

cd_pessoa_fisica_w	:= obter_pf_usuario(nm_usuario_p,'C');
cd_perfil_w		:= coalesce(cd_perfil_p,obter_perfil_ativo);

if (ie_opcao_p = 'T' and (cd_tipo_protocolo_p IS NOT NULL AND cd_tipo_protocolo_p::text <> '')) then

	select	count(*)
	into STRICT	qt_reg_w
	from	tipo_protocolo_lib where	cd_tipo_protocolo = cd_tipo_protocolo_p
	and	ie_regra <> 'AP' LIMIT 1;

	if (qt_reg_w > 0) then
		open C01;
		loop
		fetch C01 into
			nr_seq_apres_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			Exit;
		end loop;
		close C01;
	end if;

end if;

if (ie_opcao_p = 'P' and (cd_protocolo_p IS NOT NULL AND cd_protocolo_p::text <> '')) then

	select	count(*)
	into STRICT	qt_reg_w
	from	protocolo_lib where	cd_protocolo = cd_protocolo_p
	and	ie_regra <> 'AP' LIMIT 1;

	if (qt_reg_w > 0) then
		open C02;
		loop
		fetch C02 into
			nr_seq_apres_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			Exit;
		end loop;
		close C02;
	end if;

end if;

if (ie_opcao_p = 'M' and (cd_protocolo_p IS NOT NULL AND cd_protocolo_p::text <> '')) then

	select	count(*)
	into STRICT	qt_reg_w
	from	protocolo_medic_lib where	cd_protocolo = cd_protocolo_p
	and	ie_regra <> 'AP' LIMIT 1;

	if (qt_reg_w > 0) then
		open C03;
		loop
		fetch C03 into
			nr_seq_apres_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			Exit;
		end loop;
		close C03;
	end if;

end if;

return nr_seq_apres_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_ordem_protocolo_lib ( cd_tipo_protocolo_p bigint, cd_protocolo_p bigint, nr_seq_medicacao_p bigint, nm_usuario_p text, ie_opcao_p text, cd_perfil_p bigint default null) FROM PUBLIC;

