-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION pls_obter_dados_conta ( nr_seq_conta_p bigint, ie_opcao_p text) RETURNS varchar AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:   Obter dados da conta
----------------------------------------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ x ] Tasy (Delphi/Java) [ x ] Portal [  ] Relatorios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Pontos de atencao:  
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	IE_OPCAO_P
	G - cod guia
	DA - Data da autorizacao
	VC - Valor da coparticipacao
	DP - Descricao do prestador
	CP - Cobranca prevista
	CPO - Calcula preco pela tabela de preco da OPS
	GP - Grau de participacao
	VLC - Valor das consultas
	VLE - Valor dos exames
	S - Status da conta
	NB - Nome beneficiario
	P - Protocolo
	IPA - Se esta em pre analise
	IPAL - Pre analise finalizada
	TG - Tipo de guia
	DT - Data da conta
	PE - Nome do prestador executor
	VT - Valor total
	TC - Tipo conta
	CA - Carater de atendimento
	SPE - Sequencia prestador executor
	O - Observacao
	QL - Quantidade materiais/procedimentos liberadas
	QA - Quantidade materiais/procedimentos apresentados
	CBO - Codigo CBO Saude
	CBOEX - Codigo CBO Saude, se nao possuir na conta, busca o mais velho do prestador executor
	CBODS - Codigo CBO Saude e descricao, se nao possuir na conta, busca o mais velho do prestador executor
	C - Carteirinha do beneficiario
	CR - Carteirinha do beneficiario
	GR - Guia de referencia
	SEG - Seq segurado
	AN - Seq analise
	GE - Guia do prestador
	SE - Senha
	TGO - Tipo de Guia Odontologico
	DTA - Data atendimento da conta
	NBP - Nome do beneficiario (Se nao tem na conta, busca do PTU)
	DTR - Data Atendimento Referencia
	MSI - Motivo Saida Internacao
	DCME - Descricao Completa medico Executor
	EPE - Endereco do prestador executor
	DC - Data competencia
	DTP - Data competencia pagamento
	TPC - Tipo protocolo conta
	TPDC -  Descricao do tipo protocolo conta
	TI1 - Tipo de intercambio da conta.
	NBS - Nome beneficiario Ressarcimento ao SUS
	DTS - Data atendimento SUS
*/ds_retorno_w			varchar(255) := null;
cd_guia_w			varchar(20);
dt_autorizacao_w		timestamp;
dt_atendimento_referencia_w	timestamp;
nr_seq_protocolo_w		bigint;
ie_cobranca_prevista_w		varchar(1);
nr_seq_plano_w			bigint;
nr_seq_segurado_w		bigint;
ie_preco_plano_w		varchar(1);
nr_seq_contrato_w		bigint;
ie_preco_co_operadora_w		varchar(1);
ie_cobranca_prevista_conta_w	varchar(1);
nr_seq_intercambio_w		bigint;
ie_cobranca_prevista_inter_w	varchar(1);
ie_tipo_guia_w			varchar(2);
nr_seq_prestador_exec_w		bigint;
nr_seq_nota_cobranca_w		pls_conta.nr_seq_nota_cobranca%type;
cd_guia_pos_estab_w		pls_conta.cd_guia_pos_estab%type;
nr_seq_especialidade_w		pls_prestador_med_espec.nr_sequencia%type;
ds_cbo_w			cbo_saude.ds_cbo%type;
cd_medico_executor_w		pls_conta.cd_medico_executor%type := null;
cd_pessoa_fisica_w		pls_prestador.cd_pessoa_fisica%type;
nr_cpf_w			pessoa_fisica.nr_cpf%type;
ie_origem_conta_w		pls_conta.ie_origem_conta%type;
nr_seq_prest_inter_w		pls_conta.nr_seq_prest_inter%type;
nr_seq_lote_pgto_w		pls_conta_medica_resumo.nr_seq_lote_pgto%type;
nr_seq_pp_lote_w		pls_conta_medica_resumo.nr_seq_pp_lote%type;
nr_seq_congenere_w		pls_protocolo_conta.nr_seq_congenere%type;
sg_estado_conta_w		pessoa_juridica.sg_estado%type;
sg_estado_outorgante_w		pessoa_juridica.sg_estado%type;
ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;
nr_seq_cong_seg_w		pls_segurado.nr_seq_congenere%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;


BEGIN
if (upper(ie_opcao_p) = 'G') then

	select	cd_guia,
		cd_guia_pos_estab
	into STRICT	ds_retorno_w,
		cd_guia_pos_estab_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
	--Para tratar os casos de vinculo de guias de forma manual OS868320.
	if (cd_guia_pos_estab_w IS NOT NULL AND cd_guia_pos_estab_w::text <> '') then
		ds_retorno_w := cd_guia_pos_estab_w;
	end if;
	
elsif (upper(ie_opcao_p) = 'DA') then
	select	dt_autorizacao
	into STRICT	dt_autorizacao_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;

	ds_retorno_w	:= to_char(dt_autorizacao_w,'dd/mm/yyyy');
	
elsif (upper(ie_opcao_p) = 'VC') then
	select	to_char(coalesce(sum(coalesce(vl_coparticipacao,0)),0))
	into STRICT	ds_retorno_w
	from	pls_conta_coparticipacao
	where	nr_seq_conta	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p) = 'DP') then
	select	max(nr_seq_protocolo)
	into STRICT	nr_seq_protocolo_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
	begin
	select	substr(obter_nome_pf_pj(b.cd_pessoa_fisica, b.cd_cgc),1,255)
	into STRICT	ds_retorno_w
	from	pls_protocolo_conta	a,
		pls_prestador 		b
	where	a.nr_seq_prestador	= b.nr_sequencia
	and	a.nr_sequencia		= nr_seq_protocolo_w;
	exception
	when others then
		ds_retorno_w		:= '';
	end;
elsif (upper(ie_opcao_p) = 'DTP') then
	select	max(nr_seq_lote_pgto),
		max(nr_seq_pp_lote)
	into STRICT	nr_seq_lote_pgto_w,
		nr_seq_pp_lote_w
	from	pls_conta_medica_resumo
	where	nr_seq_conta	= nr_seq_conta_p
	and	ie_situacao 	= 'A';
	
	if (nr_seq_lote_pgto_w IS NOT NULL AND nr_seq_lote_pgto_w::text <> '') then
		select	max(to_char(dt_mes_competencia,'dd/mm/yyyy'))
		into STRICT	ds_retorno_w
		from	pls_lote_pagamento a
		where	a.nr_sequencia	= nr_seq_lote_pgto_w;
		
	elsif (nr_seq_pp_lote_w IS NOT NULL AND nr_seq_pp_lote_w::text <> '') then
		select	max(to_char(dt_mes_competencia,'dd/mm/yyyy'))
		into STRICT	ds_retorno_w
		from	pls_pp_lote a
		where	a.nr_sequencia	= nr_seq_pp_lote_w;
	end if;

elsif (upper(ie_opcao_p) = 'DC') then
	select	max(nr_seq_protocolo)
	into STRICT	nr_seq_protocolo_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
	select	max(to_char(dt_mes_competencia,'dd/mm/yyyy'))
	into STRICT	ds_retorno_w
	from	pls_protocolo_conta	a
	where	a.nr_sequencia		= nr_seq_protocolo_w;
		
elsif (upper(ie_opcao_p) = 'CP') then
	select	cd_guia,
		coalesce(ie_cobranca_prevista,'N')
	into STRICT	cd_guia_w,
		ie_cobranca_prevista_conta_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;

	-- Obter dados da autorizacao
	begin
	select	coalesce(max(ie_cobranca_prevista),'N')
	into STRICT	ie_cobranca_prevista_w
	from	pls_guia_plano
	where	cd_guia	= cd_guia_w;
	exception
	when others then
		ie_cobranca_prevista_w	:= 'N';
	end;

	if (ie_cobranca_prevista_conta_w	= 'S') then
		ie_cobranca_prevista_w	:= ie_cobranca_prevista_conta_w;
	end if;

	ds_retorno_w	:= ie_cobranca_prevista_w;
	
elsif (upper(ie_opcao_p) = 'CPO') then
	select	cd_guia,
		nr_seq_segurado,
		coalesce(ie_cobranca_prevista,'N'),
		dt_atendimento_referencia
	into STRICT	cd_guia_w,
		nr_seq_segurado_w,
		ie_cobranca_prevista_conta_w,
		dt_atendimento_referencia_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;

	-- Obter dados da autorizacao
	begin
	select	coalesce(max(ie_cobranca_prevista),'N')
	into STRICT	ie_cobranca_prevista_w
	from	pls_guia_plano
	where	cd_guia	= cd_guia_w;
	exception
	when others then
		ie_cobranca_prevista_w	:= 'N';
	end;

	if (ie_cobranca_prevista_conta_w	= 'S') then
		ie_cobranca_prevista_w	:= ie_cobranca_prevista_conta_w;
	end if;

	-- Obter dados do segurado
	begin
--	select	nvl(nr_seq_plano,0),
	select	coalesce(pls_obter_produto_benef(nr_sequencia,dt_atendimento_referencia_w),0),
		nr_seq_contrato,
		nr_seq_intercambio
	into STRICT	nr_seq_plano_w,
		nr_seq_contrato_w,
		nr_seq_intercambio_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
	exception
	when others then
		nr_seq_plano_w	:= null;
	end;
	
	if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
	-- Obter dados do contrato
		select	max(ie_preco_co_operadora)
		into STRICT	ie_preco_co_operadora_w
		from	pls_contrato
		where	nr_sequencia	= nr_seq_contrato_w;
		
	elsif (nr_seq_intercambio_w IS NOT NULL AND nr_seq_intercambio_w::text <> '') then
	--Obter dados do intercambio *OS 365032
		select  max(ie_preco_co_operadora)
		into STRICT	ie_cobranca_prevista_inter_w
		from 	pls_intercambio
		where	nr_sequencia 	= nr_seq_intercambio_w;
	end if;

	-- Obter dados do plano
	begin
	select	ie_preco
	into STRICT	ie_preco_plano_w
	from	pls_plano
	where	nr_sequencia	= nr_seq_plano_w;
	exception
	when others then
		ie_preco_plano_w	:= '0';
	end;

	if	((ie_cobranca_prevista_w = 'S') or (ie_preco_co_operadora_w = 'S') or (ie_cobranca_prevista_inter_w = 'S'))	and (ie_preco_plano_w in ('2','3')) then
		ds_retorno_w	:= 'S';
	else
		ds_retorno_w	:= 'N';
	end if;
	
elsif (upper(ie_opcao_p)  	= 'GP') then
	select	substr(pls_obter_ds_grau_participacao(nr_seq_grau_partic),1,255)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'VLC') then
	select	to_char(coalesce(sum(coalesce(vl_total_beneficiario,0)),0))
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p
	and	nr_seq_tipo_atendimento	= 4;
	
elsif (upper(ie_opcao_p)	= 'VLE') then
	select	to_char(coalesce(sum(coalesce(vl_total_beneficiario,0)),0))
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p
	and	nr_seq_tipo_atendimento	= 8;
	
elsif (upper(ie_opcao_p)	= 'VLO') then
	select	to_char(coalesce(sum(coalesce(vl_total_beneficiario,0)),0))
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p
	and	nr_seq_tipo_atendimento	not in (4,8);
	
elsif (upper(ie_opcao_p)	= 'S') then
	select	ie_status
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'C') then	
	begin
	select	substr(pls_obter_dados_segurado(nr_seq_segurado,'C'),1,255)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	exception
	when others then
		ds_retorno_w := null;
	end;
	
elsif (upper(ie_opcao_p)	= 'CR') then	
	begin
	select	substr(pls_obter_dados_segurado(nr_seq_segurado,'CR'),1,255)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	exception
	when others then
		ds_retorno_w := null;
	end;

elsif (upper(ie_opcao_p)	= 'NB') then
	begin
	select	substr(pls_obter_dados_segurado(nr_seq_segurado,'N'),1,255)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	exception
	when others then
		ds_retorno_w := null;
	end;
	
elsif (upper(ie_opcao_p)	= 'VLCG') then
	select	to_char(sum(coalesce(b.vl_liberado_usuario,0) + coalesce(b.vl_liberado_sistema,0)))
	into STRICT	ds_retorno_w
	from	pls_conta		a,
		pls_resumo_conta	b
	where	b.nr_seq_conta	= a.nr_sequencia
	and	a.nr_sequencia	= nr_seq_conta_p
	and	b.ie_tipo_despesa = 'TOT'
	and	a.ie_tipo_guia	= '3';
	
elsif (upper(ie_opcao_p)	= 'VLEG') then
	select	to_char(sum(coalesce(b.vl_liberado_usuario,0) + coalesce(b.vl_liberado_sistema,0)))
	into STRICT	ds_retorno_w
	from	pls_conta		a,
		pls_resumo_conta	b
	where	b.nr_seq_conta	= a.nr_sequencia
	and	a.nr_sequencia	= nr_seq_conta_p
	and	b.ie_tipo_despesa = 'TOT'
	and	a.ie_tipo_guia	= '4';
	
elsif (upper(ie_opcao_p)	= 'VLOG') then
	select	to_char(sum(coalesce(b.vl_liberado_usuario,0) + coalesce(b.vl_liberado_sistema,0)))
	into STRICT	ds_retorno_w
	from	pls_conta		a,
		pls_resumo_conta	b
	where	b.nr_seq_conta	= a.nr_sequencia
	and	a.nr_sequencia	= nr_seq_conta_p
	and	b.ie_tipo_despesa = 'TOT'
	and	a.ie_tipo_guia	not in ('3','4');
	
elsif (upper(ie_opcao_p)	= 'P') then
	select	nr_seq_protocolo
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'IPA') then
	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ds_retorno_w
	from	pls_analise_conta_item x
	where	x.nr_seq_conta		= nr_seq_conta_p
	and	x.ie_pre_analise	= 'S';
	
elsif (upper(ie_opcao_p)	= 'IPAL') then
	select	max(y.ie_status_pre_analise)
	into STRICT	ds_retorno_w
	from	pls_analise_conta		y,		
		pls_conta			x
	where	x.nr_seq_analise	= y.nr_sequencia
	and	x.nr_sequencia		= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'TG') then
	select	max(a.ie_tipo_guia)
	into STRICT	ie_tipo_guia_w
	from	pls_conta a
	where	a.nr_sequencia = nr_seq_conta_p;
	
	select 	ds_valor_dominio
	into STRICT	ds_retorno_w
	from	valor_dominio_v 
	where 	cd_dominio = 1746 
	and 	vl_dominio = ie_tipo_guia_w;
	
elsif (upper(ie_opcao_p) 	= 'DT') then
	select	max(dt_emissao)
	into STRICT	ds_retorno_w
	from	pls_conta a
	where	a.nr_sequencia = nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'VT') then
	select	max(vl_total)
	into STRICT	ds_retorno_w
	from	pls_conta a
	where	a.nr_sequencia = nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'PE') then
	select	nr_seq_prestador_exec
	into STRICT	nr_seq_prestador_exec_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;

	select	substr(obter_nome_pf_pj(a.cd_pessoa_fisica, a.cd_cgc),1,255)
	into STRICT	ds_retorno_w
	from	pls_prestador a
	where	a.nr_sequencia = nr_seq_prestador_exec_w;
	
elsif (upper(ie_opcao_p)	= 'TC') then	
	begin
	select	b.ds_tipo_conta
	into STRICT	ds_retorno_w
	from	pls_tipo_conta	b,
		pls_conta	a
	where	b.nr_sequencia = a.nr_seq_tipo_conta
	and	a.nr_sequencia = nr_seq_conta_p;
	exception
	when others then
		ds_retorno_w := null;
	end;
	
elsif (upper(ie_opcao_p)	= 'CA') then
	select	ie_carater_internacao
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'SPE') then
	select	nr_seq_prestador_exec
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'O') then
	select	substr(ds_observacao,1,255)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'QL') then
	select	sum(qt_mat_proc)
	into STRICT	ds_retorno_w
	from (SELECT	sum(qt_procedimento) qt_mat_proc
		from	pls_conta_proc
		where	nr_seq_conta = nr_seq_conta_p
		
union

		SELECT	sum(qt_material) qt_mat_proc
		from	pls_conta_mat
		where	nr_seq_conta = nr_seq_conta_p) alias5;
		
elsif (upper(ie_opcao_p)	= 'QA') then
	select	sum(qt_mat_proc_imp)
	into STRICT	ds_retorno_w
	from (SELECT	sum(qt_procedimento_imp) qt_mat_proc_imp
		from	pls_conta_proc
		where	nr_seq_conta = nr_seq_conta_p
		
union

		SELECT	sum(qt_material_imp) qt_mat_proc_imp
		from	pls_conta_mat
		where	nr_seq_conta = nr_seq_conta_p) alias5;
		
elsif (upper(ie_opcao_p)	= 'CBO') then
	select	substr(obter_codigo_cbo_saude(nr_seq_cbo_saude),1,15)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'CBOEX') then

	-- Tenta primeiro na conta
	select	substr(obter_codigo_cbo_saude(nr_seq_cbo_saude),1,15)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
	-- se nao localizou na conta, tenta do prestador executor, pegando a especialidade mais antiga dele.
	if (coalesce(ds_retorno_w::text, '') = '') then
	
		select	min(a.nr_sequencia)
		into STRICT	nr_seq_especialidade_w
		from	pls_prestador_med_espec	a,
			pls_conta		b
		where	a.nr_seq_prestador	= b.nr_seq_prestador_exec
		and	b.nr_sequencia		= nr_seq_conta_p
		and	clock_timestamp() between trunc(coalesce(a.dt_inicio_vigencia, clock_timestamp())) and fim_dia(coalesce(a.dt_fim_vigencia, clock_timestamp()));
		
		select	substr(obter_codigo_cbo_saude(max(a.nr_seq_cbo_saude)),1,15)
		into STRICT	ds_retorno_w
		from	especialidade_medica	a,
			pls_prestador_med_espec	b
		where	a.cd_especialidade	= b.cd_especialidade
		and	b.nr_sequencia		= nr_seq_especialidade_w;
	end if;

elsif (upper(ie_opcao_p)	= 'CBODS') then

	-- Tenta primeiro na conta
	select	substr(obter_codigo_cbo_saude(nr_seq_cbo_saude),1,15)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
	-- se nao localizou na conta, tenta do prestador executor, pegando a especialidade mais antiga dele.
	if (coalesce(ds_retorno_w::text, '') = '') then
	
		select	min(a.nr_sequencia)
		into STRICT	nr_seq_especialidade_w
		from	pls_prestador_med_espec	a,
			pls_conta		b
		where	a.nr_seq_prestador	= b.nr_seq_prestador_exec
		and	b.nr_sequencia		= nr_seq_conta_p
		and	clock_timestamp() between trunc(coalesce(a.dt_inicio_vigencia, clock_timestamp())) and fim_dia(coalesce(a.dt_fim_vigencia, clock_timestamp()));
		
		select	coalesce(max(c.cd_cbo),'') || ' - ' || max(c.ds_cbo)
		into STRICT	ds_retorno_w
		from	especialidade_medica	a,
			pls_prestador_med_espec	b,
			cbo_saude		c
		where	a.cd_especialidade	= b.cd_especialidade
		and	c.nr_sequencia		= a.nr_seq_cbo_saude
		and	b.nr_sequencia		= nr_seq_especialidade_w;
	else
		-- Se encontrou busca a descricao
		select	max(b.ds_cbo)
		into STRICT	ds_cbo_w
		from	pls_conta	a,
			cbo_saude	b
		where	b.nr_sequencia	= a.nr_seq_cbo_saude
		and	a.nr_sequencia	= nr_seq_conta_p;
		
		ds_retorno_w := ds_retorno_w ||' - '|| ds_cbo_w;
		
	end if;
	
	-- Caso nao eencontre nenhum, traz o CBO 'padrao'
	if	((coalesce(ds_retorno_w::text, '') = '') or (length(ds_retorno_w) <= 3)) then
	
		ds_retorno_w := '999999 - CBO Desconhecido ou nao Informado pelo Solicitante';
	end if;

elsif (upper(ie_opcao_p)	= 'GR') then
	select	cd_guia_referencia
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;

elsif (upper(ie_opcao_p)	= 'SEG') then
	select	max(nr_seq_segurado)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'AN') then
	select	max(nr_seq_analise)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'GE') then
	select	cd_guia_prestador
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'SE') then
	select	cd_senha
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'TGO') then
	select	CASE WHEN ie_tipo_guia='11' THEN 'S'  ELSE 'N' END
	into STRICT	ds_retorno_w
	from 	pls_conta
	where 	nr_sequencia = nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'DTA') then
	select	max(dt_atendimento)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'NBP') then
	begin
	select	substr(pls_obter_dados_segurado(nr_seq_segurado,'N'),1,255)
	into STRICT	ds_retorno_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	exception
	when others then
		ds_retorno_w := null;
	end;
	
	if (coalesce(ds_retorno_w::text, '') = '') then
		select	max(nr_seq_nota_cobranca)
		into STRICT	nr_seq_nota_cobranca_w
		from	pls_conta
		where	nr_sequencia	= nr_seq_conta_p;
		
		if (nr_seq_nota_cobranca_w IS NOT NULL AND nr_seq_nota_cobranca_w::text <> '') then
			select	max(nm_beneficiario)
			into STRICT	ds_retorno_w
			from	ptu_nota_cobranca
			where	nr_sequencia	= nr_seq_nota_cobranca_w;
		end if;
	end if;
	
elsif (upper(ie_opcao_p)	= 'DTR') then
	select	max(dt_atendimento_referencia)
	into STRICT	dt_atendimento_referencia_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
	ds_retorno_w	:= to_char(dt_atendimento_referencia_w,'dd/mm/yyyy');
	
elsif (upper(ie_opcao_p)	= 'MSI') then

	select	max(b.ds_motivo_saida)
	into STRICT	ds_retorno_w
	from	pls_conta		a,
		pls_motivo_saida	b
	where	b.nr_sequencia	= a.nr_seq_saida_int
	and	a.nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p)	= 'DCME') then

	select	max(a.cd_medico_executor),
		max(a.nr_seq_prestador_exec),
		max(b.cd_pessoa_fisica)
	into STRICT	cd_medico_executor_w,
		nr_seq_prestador_exec_w,
		cd_pessoa_fisica_w
	from	pls_conta	a,
		pls_prestador	b
	where	b.nr_sequencia	= a.nr_seq_prestador_exec
	and	a.nr_sequencia	= nr_seq_conta_p;
	
	-- Primeiro verifica se tem medico executor da conta
	if (cd_medico_executor_w IS NOT NULL AND cd_medico_executor_w::text <> '') then
	
		select	max(c.nr_cpf)
		into STRICT	nr_cpf_w
		from	pls_conta a,
			medico b,
			pessoa_fisica c
		where	a.cd_medico_executor = b.cd_pessoa_fisica
		and	b.cd_pessoa_fisica = c.cd_pessoa_fisica
		and	a.nr_sequencia	= nr_seq_conta_p;
			
		ds_retorno_w := obter_nome_pf_pj(cd_medico_executor_w, null) || ' - CPF: ' || nr_cpf_w;
		
	-- Senao usa o prestador
	elsif (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then
		
		if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'N') ||' - CPF: '||pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'CPF');
		else
			ds_retorno_w	:= pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'DS') ||' - '||pls_obter_dados_prestador( nr_seq_prestador_exec_w, 'NF');
		end if;		
	end if;

elsif (upper(ie_opcao_p)	= 'EPE') then

	--  Verifica a origem da conta, se for intercambio, e um prestador diferente
	select	max(a.ie_origem_conta),
		max(a.nr_seq_prest_inter),
		max(a.nr_seq_prestador_exec)
	into STRICT	ie_origem_conta_w,
		nr_seq_prest_inter_w,
		nr_seq_prestador_exec_w
	from	pls_conta	a
	where	a.nr_sequencia	= nr_seq_conta_p;
	
	if (ie_origem_conta_w = 'A') then
	
		if (nr_seq_prest_inter_w IS NOT NULL AND nr_seq_prest_inter_w::text <> '') then
			
			ds_retorno_w := pls_obter_dados_prest_inter(nr_seq_prest_inter_w, 'MC');
		end if;
	else
	
		ds_retorno_w := pls_obter_end_prestador(nr_seq_prestador_exec_w, null, null);	
	end if;
	
elsif (upper(ie_opcao_p) = 'TPC') then
	select	max(b.ie_tipo_protocolo)
	into STRICT	ds_retorno_w
	from	pls_conta		a,
		pls_protocolo_conta	b
	where	b.nr_sequencia	= a.nr_seq_protocolo
	and	a.nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p) = 'TPDC') then
	select	substr(Obter_Descricao_Dominio(3648,max(b.ie_tipo_protocolo)),1,255)
	into STRICT	ds_retorno_w
	from	pls_conta		a,
		pls_protocolo_conta	b
	where	b.nr_sequencia	= a.nr_seq_protocolo
	and	a.nr_sequencia	= nr_seq_conta_p;
	
elsif (upper(ie_opcao_p) = 'TI1') then

	select	max(a.nr_seq_protocolo),
		max(b.nr_seq_congenere),
		max(a.nr_seq_segurado),
		max(c.ie_tipo_segurado),
		max(c.nr_seq_congenere),
		max(a.cd_estabelecimento)
	into STRICT	nr_seq_protocolo_w,
		nr_seq_congenere_w,
		nr_seq_segurado_w,
		ie_tipo_segurado_w,
		nr_seq_cong_seg_w,
		cd_estabelecimento_w
	from	pls_conta		a,
		pls_protocolo_conta	b,
		pls_segurado		c
	where	b.nr_sequencia		= a.nr_seq_protocolo
	and	c.nr_sequencia		= a.nr_seq_segurado
	and	a.nr_sequencia		= nr_seq_conta_p;
	
	sg_estado_conta_w	:= 'X';
	sg_estado_outorgante_w	:= 'X';
	
	-- se o protocolo tiver congenere, sera usado sua UF na comparacao
	if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
	
		select	max(pls_obter_dados_cooperativa(nr_seq_congenere_w, 'UF'))
		into STRICT	sg_estado_conta_w
		;
	else -- como nao tem congenere no protocolo, tem que buscar o congenere do beneficiario, e pegar a uf deste congenere, isso se o beneficiario for de intercambio
		if	((ie_tipo_segurado_w in ('I', 'H')) and (nr_seq_cong_seg_w IS NOT NULL AND nr_seq_cong_seg_w::text <> '')) then
		
			select	max(pls_obter_dados_cooperativa(nr_seq_cong_seg_w, 'UF'))
			into STRICT	sg_estado_conta_w
			;
		end if;
	end if;
	
	-- se a conta nao possuir um intercambio, entao nem precisa buscar o do outorgante, apenas retornar 'X'
	if (coalesce(sg_estado_conta_w,'X') = 'X') then
	
		ds_retorno_w := 'X';
	else -- se a conta possui intercambio, entao compara com o do outorgante
	
		select	max(pls_obter_dados_outorgante(cd_estabelecimento_w, 'UF'))
		into STRICT	sg_estado_outorgante_w
		;
		
		-- se o estado da conta for o mesmo do outorgante, entao e estadual
		if (sg_estado_conta_w = sg_estado_outorgante_w) then
		
			ds_retorno_w := 'E';
		else	-- senao e estadual
		
			ds_retorno_w := 'N';
		end if;
	end if;
elsif (upper(ie_opcao_p) = 'NBS') then	-- Ressarcimento ao SUS
	begin
	select	substr(pls_obter_dados_segurado(nr_seq_segurado,'N'),1,255)
	into STRICT	ds_retorno_w
	from	pls_processo_conta
	where	nr_sequencia	= nr_seq_conta_p;
	exception
	when others then
	ds_retorno_w := null;
	end;

elsif (upper(ie_opcao_p) = 'DTS') then	-- Ressarcimento ao SUS
	select	max(dt_internacao)
	into STRICT	ds_retorno_w
	from	pls_processo_conta
	where	nr_sequencia	= nr_seq_conta_p;
end if;

return ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION pls_obter_dados_conta ( nr_seq_conta_p bigint, ie_opcao_p text) FROM PUBLIC;

