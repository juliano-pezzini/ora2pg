-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE FUNCTION obter_301_pagamento_copart (cd_pessoa_fisica_p pessoa_fisica_taxa.cd_pessoa_fisica%type, dt_pagamento_p pessoa_fisica_taxa.dt_pagamento%type, vl_coparticipacao bigint, ie_status_acerto_p conta_paciente.ie_status_acerto%type, qt_max_taxas_p regra_lanc_automatico.qt_max_taxas%type) RETURNS bigint AS $body$
DECLARE




  ie_1_nen_obr_copagamento       constant bigint := 1; --nenhuma obrigação de co-pagamento
  ie_2_pag_adic_cob_pag          constant bigint := 2; --pagamento adicional cobrado e pago integralmente pelo segurado
  ie_4_nen_obr_pag_bas_cert_inv  constant bigint := 4; --nenhuma obrigação de pagar com base em certificado inválido
  ie_5_nen_obr_pag_bas_reci_inv  constant bigint := 5; --nenhuma obrigação de pagar com base em um recibo inválido
  ie_6_men_pgto_adi_rec_val_cob  constant bigint := 6; --menor pagamento adicional devido ao recebimento válido de acordo com o § 61 sgb v cobrado e pago integralmente pelo segurado
  ie_7_men_pgto_adi_rec_val_parc constant bigint := 7; --menor pagamento adicional com base em recibo válido de acordo com o § 61 sgb v glasschnet e não ou parcialmente pago pelo segurado
  ie_8_men_pgto_adi_nao_par_pago constant bigint := 8; --pagamento adicional e não ou parcialmente pago pelo segurado
  ie_status_acerto_pago          constant bigint := 2;



  c01 CURSOR FOR

    SELECT qt_dias_pagamento,

           nr_seq_justificativa

    from pessoa_fisica_taxa pft

    where pft.cd_pessoa_fisica            = cd_pessoa_fisica_p

      and trunc(pft.dt_pagamento,'yyyy')  = trunc(dt_pagamento_p,'yyyy')

     order by pft.dt_pagamento desc;



   c01_w c01%rowtype;




BEGIN



  if vl_coparticipacao = 0 then

    return ie_1_nen_obr_copagamento;

  else



    open c01;

    fetch c01 into c01_w;

    close c01;



    if (c01_w.nr_seq_justificativa IS NOT NULL AND c01_w.nr_seq_justificativa::text <> '') then

      return ie_4_nen_obr_pag_bas_cert_inv;

    elsif c01_w.qt_dias_pagamento = 0 and ie_status_acerto_p = ie_status_acerto_pago then

      return ie_2_pag_adic_cob_pag;

    elsif c01_w.qt_dias_pagamento = 0 and ie_status_acerto_p != ie_status_acerto_pago then

      return ie_8_men_pgto_adi_nao_par_pago;

    elsif c01_w.qt_dias_pagamento = qt_max_taxas_p then

      return ie_5_nen_obr_pag_bas_reci_inv;

    elsif c01_w.qt_dias_pagamento < qt_max_taxas_p and ie_status_acerto_p != ie_status_acerto_pago then

      return ie_7_men_pgto_adi_rec_val_parc;

    elsif c01_w.qt_dias_pagamento < qt_max_taxas_p and ie_status_acerto_p = ie_status_acerto_pago then

      return ie_6_men_pgto_adi_rec_val_cob;

    end if;



  end if;



  return 0; --Otherwise
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION obter_301_pagamento_copart (cd_pessoa_fisica_p pessoa_fisica_taxa.cd_pessoa_fisica%type, dt_pagamento_p pessoa_fisica_taxa.dt_pagamento%type, vl_coparticipacao bigint, ie_status_acerto_p conta_paciente.ie_status_acerto%type, qt_max_taxas_p regra_lanc_automatico.qt_max_taxas%type) FROM PUBLIC;

