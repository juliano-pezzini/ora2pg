-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mmed_fechar_conta_paciente ( Nr_Prescricao_p Prescr_Medica.Nr_Prescricao%Type, Nm_Usuario_p Usuario.Nm_Usuario%Type, Cd_Erro_p INOUT bigint, Ds_Erro_p INOUT text, Ds_titulo_Conta_p INOUT text) AS $body$
DECLARE





Ds_Erro_Sql_w			varchar(4000);
Ds_Inconsistencia_w		varchar(255) := 0;
Ie_Fecha_Atendimento_w	varchar(1)	:= 'S';
Ie_Fecha_Conta_w		varchar(1)	:= 'S';
Ie_Titulo_Receber_w		varchar(1);
Ie_Fechar_Cta_Atend_w	varchar(2);
Ie_Conta_Aberta_w		varchar(2)	:='N';
Qt_Conta_w				bigint	:= 0;
Qt_Processo_Pendente_w	bigint 	:= 0;
Tx_Multa_w				double precision;
Tx_Juros_w				double precision;

Cd_Condicao_Pagamento_w	Convenio.Cd_Condicao_Pagamento%Type;
Cd_Convenio_w			Convenio.Cd_Convenio%Type;

Cd_Cgc_w 				Atendimento_Pagador.Cd_Cgc%Type;
Cd_Estabelecimento_w	Estabelecimento.Cd_Estabelecimento%Type;

Cd_Pessoa_Fisica_w		Pessoa_Fisica.Cd_Pessoa_Fisica%Type;
Cd_Pessoa_Pagador_w		Pessoa_Fisica.Cd_Pessoa_Fisica%Type;
Cd_Pessoa_Responsavel_w Pessoa_Fisica.Cd_Pessoa_Fisica%Type;
Cd_Pessoa_Titulo_w		Pessoa_Fisica.Cd_Pessoa_Fisica%Type;

Cd_Tipo_Taxa_Juro_w		Parametro_Contas_Receber.Cd_Tipo_Taxa_Juro%Type;
Cd_Tipo_Taxa_Multa_w	Parametro_Contas_Receber.Cd_Tipo_Taxa_Multa%Type;

Ie_Status_Acerto_w		Conta_Paciente.Ie_Status_Acerto%Type;
Vl_Total_Conta_w		Conta_Paciente.Vl_Conta%Type;

eErro	Exception;

cConta CURSOR FOR
		SELECT 	b.Nr_interno_conta,
				b.Cd_Estabelecimento,
				b.Cd_Convenio_Parametro,
				b.Nr_Atendimento
		From	Procedimento_Paciente a,
				Conta_paciente b
		Where	a.Nr_interno_Conta = b.Nr_Interno_Conta
		And		a.Nr_Prescricao = Nr_Prescricao_p
		And		b.Ie_Status_Acerto = 1
		Group By
				b.Nr_interno_conta,
				b.Cd_Estabelecimento,
				b.Cd_Convenio_Parametro,
				b.Nr_Atendimento;

BEGIN

	Cd_Erro_p	:= 0;
	Begin
		-- 1 Obter Dados Prescr
		If (coalesce(Nr_Prescricao_p::text, '') = '') Then
			Cd_Erro_p	:= 1.1;
			Ds_Erro_p	:= Substr(Wheb_Mensagem_Pck.Get_Texto(321204,Null),1,4000); --'Prescrição não informada';
			Raise eErro;
		End If;

		For rConta In cConta Loop

			--Flag indicando que encotrou contas abertas
			Ie_Conta_Aberta_w:='S';

			/*
			dbms_output.put_line('1 - rConta.Nr_Interno_Conta:'||rConta.Nr_Interno_Conta);
			dbms_output.put_line('1 - rConta.Nr_Atendimento:'||rConta.Nr_Atendimento);
			dbms_output.put_line('1 - rConta.Cd_Estabelecimento:'||rConta.Cd_Estabelecimento);
			dbms_output.put_line('1 - rConta.Cd_Convenio_Parametro:'||rConta.Cd_Convenio_Parametro);
			*/
			--2 Consistir conta
			Begin
				SELECT * FROM Consiste_Conta_Paciente(	rConta.Nr_Interno_Conta, rConta.Nr_Atendimento, Ie_Fecha_Atendimento_w, Ie_Fecha_Conta_w, Qt_Processo_Pendente_w, Ds_Inconsistencia_w
										) INTO STRICT Ie_Fecha_Atendimento_w, Ie_Fecha_Conta_w, Qt_Processo_Pendente_w, Ds_Inconsistencia_w
										;

				Ds_inconsistencia_w		:= Retirar_inconsistencia_lista(ds_inconsistencia_w,'5');

				Update	Conta_paciente
				Set		Ds_Inconsistencia	= Ds_inconsistencia_w
				Where	Nr_Interno_Conta	= rConta.Nr_Interno_Conta;

				Ie_Fechar_Cta_Atend_w	:= Obter_Fechar_Cta_Atend(rConta.Nr_Interno_Conta);
			Exception
				When Others Then
				Cd_Erro_p		:= 2.1;
				Ds_Erro_p		:= Substr(Wheb_Mensagem_Pck.Get_Texto(321206,Null),1,4000); --'Erro ao consistir conta paciente. ';
				Ds_Erro_Sql_w	:= SubStr(Sqlerrm,1,4000);
				Raise eErro;
			End;


			If (Ie_fecha_conta_w != 'S') Or (Substr(Ie_Fechar_Cta_Atend_w,1,1) != 'S') Then

				Cd_Erro_p			:= 2.2;
				Ds_Erro_p 			:= Substr(Wheb_Mensagem_Pck.Get_Texto(321208,Null),1,4000); -- 'Erro ao fechar conta paciente, localizadas inconsistências que impedem o fechamento.';
				Raise eErro;

			Else
			--3 Fechar Conta
				Begin
					Ds_Inconsistencia_w := Fechar_Conta_Paciente(	rConta.Nr_Interno_Conta, rConta.Nr_Atendimento, 2, Nm_Usuario_p, Ds_Inconsistencia_w);
				Exception
					When Others Then
					Cd_Erro_p			:= 3.1;
					Ds_Erro_p			:= Substr(Wheb_Mensagem_Pck.Get_Texto(321209,Null),1,4000); --'Erro ao fechar conta paciente. ';
					Ds_Erro_Sql_w		:= SubStr(Sqlerrm,1,4000);
					Raise eErro;
				End;

				Select	coalesce(max(Ie_Titulo_Receber),'P')
				Into STRICT	Ie_Titulo_Receber_w
				From 	Convenio_Estabelecimento
				Where 	Cd_convenio 		= rConta.Cd_Convenio_Parametro
				And 	Cd_estabelecimento 	= rConta.Cd_Estabelecimento;

				Begin
					Vl_Total_Conta_w:= coalesce(obter_valor_conta(rConta.Nr_interno_Conta,0),0);
				Exception
					When Others Then
					Cd_Erro_p		:= 3.2;
					Ds_Erro_p		:= Substr(Wheb_Mensagem_Pck.Get_Texto(321210,Null),1,4000); --'Erro ao obter valor conta paciente. '; --321210
					Ds_Erro_Sql_w	:= SubStr(Sqlerrm,1,4000);
					Raise eErro;
				End;

				--Obter Status atual
				Begin
					Select	Ie_Status_Acerto
					Into STRICT	Ie_Status_Acerto_w
					From	Conta_Paciente
					Where	Nr_Interno_Conta = rConta.Nr_Interno_Conta;
				Exception
					When Others Then
						Cd_Erro_p		:= 3.3;
						Ds_Erro_p		:= Substr(Wheb_Mensagem_Pck.Get_Texto(321211,Null),1,4000); --'Erro ao obter status conta paciente. '; -- 321211
						Ds_Erro_Sql_w	:= SubStr(Sqlerrm,1,4000);
						Raise eErro;
				End;

				--4 Gerar  Titulo
				/*
				dbms_output.put_line('4 - Ie_Status_Acerto_w:'||Ie_Status_Acerto_w);
				dbms_output.put_line('4 - Ie_Titulo_Receber_w:'||Ie_Titulo_Receber_w);
				*/
				If (Ie_Status_Acerto_w = 2) And (Ie_Titulo_Receber_w = 'C') Then

					Select	Max(a.cd_condicao_pagamento)
					Into STRICT	Cd_Condicao_Pagamento_w
					From	Convenio a
					where	a.Cd_convenio = rConta.Cd_Convenio_Parametro;

					If (coalesce(Cd_Condicao_Pagamento_w::text, '') = '') Then
						Cd_Erro_p	:= 4.1;
						Ds_Erro_p	:= SubStr(Wheb_Mensagem_Pck.Get_Texto(281747,Null),1,4000);
						Raise eErro;
					End If;

					Select	Max(Cd_Tipo_Taxa_Juro),
							Max(Cd_Tipo_Taxa_Multa)
					Into STRICT	Cd_Tipo_Taxa_Juro_w,
							Cd_Tipo_Taxa_Multa_w
					From	Parametro_Contas_Receber
					Where	Cd_Estabelecimento	= rConta.Cd_Estabelecimento;

					If (coalesce(Cd_tipo_Taxa_Juro_w::text, '') = '') Or (coalesce(Cd_tipo_Taxa_Multa_w::text, '') = '') Then
						Cd_Erro_p	:= 4.2;
						Ds_Erro_p	:= Substr(Wheb_Mensagem_Pck.Get_Texto(281748,Null),1,4000);
						Raise eErro;
					End If;


					Select	Max(a.cd_pessoa_fisica),
							Max(b.cd_pessoa_fisica),
							Max(a.cd_pessoa_responsavel),
							Max(b.cd_cgc)
					Into STRICT	Cd_Pessoa_Fisica_w,
							Cd_Pessoa_Pagador_w,
							Cd_Pessoa_Responsavel_w,
							Cd_Cgc_w
					FROM atendimento_paciente a
LEFT OUTER JOIN atendimento_pagador b ON (a.nr_atendimento = b.nr_atendimento)
WHERE a.nr_atendimento	= rConta.Nr_Atendimento;

					If (Cd_Pessoa_Pagador_w IS NOT NULL AND Cd_Pessoa_Pagador_w::text <> '') Then	-- Se possuir pagador, gera em nome do pagador
						Cd_Pessoa_Titulo_w	:= Cd_Pessoa_Pagador_w;
						Cd_Cgc_w			:= Null;
					Elsif ((obter_idade_pf(Cd_Pessoa_Fisica_w,clock_timestamp(),'A'))::numeric  < 18) then --Se menor de idade gera em nome do responsável
						If (coalesce(Cd_Pessoa_Responsavel_w::text, '') = '') Then
							Cd_Erro_p	:= 4.3;
							Ds_Erro_p	:= SubStr(Wheb_Mensagem_Pck.Get_Texto(281749, Null),1,4000);
							Raise eErro;
						Else
							Cd_Pessoa_Titulo_w	:= Cd_pessoa_Responsavel_w;
							Cd_Cgc_w			:= null;
						End If;
					Else
						Cd_pessoa_titulo_w	:= Cd_pessoa_fisica_w;
					End If;

					If (Cd_Cgc_w IS NOT NULL AND Cd_Cgc_w::text <> '') Then
						Cd_Pessoa_Titulo_w	:= Null;
					End If;

					Begin
						Tx_Multa_w	:=	coalesce(Obter_Juros_multa_Pf_Pj(rConta.Cd_Estabelecimento,Cd_Pessoa_Titulo_w,Cd_Cgc_w,'M'),0);
						Tx_Juros_w	:=	coalesce(Obter_Juros_multa_Pf_Pj(rConta.Cd_Estabelecimento,Cd_Pessoa_Titulo_w,Cd_Cgc_w,'J'),0);
					Exception
						When Others Then
						Cd_erro_p	:= 4.4;
						Ds_erro_p	:= Substr(Wheb_Mensagem_Pck.Get_Texto(321212,Null),1,4000); --'Erro ao obter valor Juros/Multa'; -- 321212
						Raise eErro;
					End;

					Begin
						CALL Gerar_titulo(	rConta.Cd_Estabelecimento,
										Cd_Pessoa_Titulo_w,
										Cd_Cgc_w,
										rConta.Nr_Atendimento,
										rConta.Nr_Interno_Conta,
										0,
										Cd_Condicao_Pagamento_w,
										clock_timestamp(),
										clock_timestamp(),
										Vl_Total_Conta_w,
										Vl_Total_Conta_w,
										Tx_Juros_w,
										Cd_Tipo_Taxa_Juro_w,
										Tx_Multa_w,
										Cd_Tipo_Taxa_Multa_w,
										0,
										Null,
										Null,
										Null,
										Null,
										Nm_usuario_p,
										'S');
					Exception
						When Others Then
						Ds_Erro_Sql_w	:= SubStr(Sqlerrm,1,4000);
						Cd_Erro_p	:= 4.5;
						Ds_erro_p	:= Substr(Wheb_Mensagem_Pck.Get_Texto(281750,Null)|| rConta.Nr_Interno_Conta,1,2000);
						Raise eErro;
					End;

					Ds_titulo_Conta_p:=substr(Obter_Titulo_Conta_Protocolo(0, rConta.Nr_Interno_Conta),1,100);


				End If;

			End If;

		End Loop;
	Exception
		When eErro Then
			If (Ds_Erro_Sql_w IS NOT NULL AND Ds_Erro_Sql_w::text <> '') Then
				Ds_Erro_p:=Ds_erro_p||Ds_Erro_Sql_w;
			End If;
		When Others Then
			Ds_erro_p:= Substr(Wheb_Mensagem_Pck.Get_Texto(321209,Null),1,4000) || Ds_Erro_Sql_w;
			Cd_Erro_p:= 5.1;
	End;

	If 	Ie_Conta_Aberta_w = 'N' And
		Cd_Erro_p	!= 1.1 Then
		Cd_Erro_p	:= 1.2;
		Ds_erro_p	:= Substr(Wheb_Mensagem_Pck.Get_Texto(321213,Null),1,4000); --'Não foram encontradas contas em aberto.';
	End If;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mmed_fechar_conta_paciente ( Nr_Prescricao_p Prescr_Medica.Nr_Prescricao%Type, Nm_Usuario_p Usuario.Nm_Usuario%Type, Cd_Erro_p INOUT bigint, Ds_Erro_p INOUT text, Ds_titulo_Conta_p INOUT text) FROM PUBLIC;

