-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE qt_gerar_encaixe_agecons (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p timestamp, qt_duracao_p bigint, cd_pessoa_fisica_p text, nm_pessoa_fisica_p text, cd_convenio_p bigint, ds_observacao_p text, ie_classif_agenda_p text, nm_usuario_p text, nr_seq_encaixe_p INOUT bigint, cd_categoria_p text, cd_plano_p text) AS $body$
DECLARE

				
dt_encaixe_w					timestamp;	
nr_seq_encaixe_w 				bigint := null;
ie_regra_horario_turno_w 		varchar(1);	
ie_feriado_w					varchar(1);
cd_setor_agenda_w				bigint;
ie_perm_encaixe_turno_w			varchar(1);
dt_intervalo_inicial_w			timestamp;
dt_intervalo_final_w			timestamp;
nr_seq_turno_esp_w				bigint;
ie_perm_encaixe_turno_esp_w		varchar(1);
ie_gerar_dentro_per_w			varchar(1);
ds_consistencia_w				varchar(255);
ie_atualizar_sala_w				varchar(1);
nr_seq_sala_w					bigint;
nr_seq_agenda_w					agenda_consulta.nr_sequencia%type;
ie_feriado_agenda_w				agenda.ie_feriado%type;
nr_seq_turno_w					bigint;
cd_turno_w						varchar(1);
dt_nascimento_w					timestamp;
nr_seq_hora_w					bigint;


BEGIN

if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') and (hr_encaixe_p IS NOT NULL AND hr_encaixe_p::text <> '') and (qt_duracao_p IS NOT NULL AND qt_duracao_p::text <> '') and
	((cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') or (nm_pessoa_fisica_p IS NOT NULL AND nm_pessoa_fisica_p::text <> '')) and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then

	ie_gerar_dentro_per_w := obter_param_usuario(821, 436, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_dentro_per_w);
	ie_atualizar_sala_w := obter_param_usuario(821, 427, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_atualizar_sala_w);
	
	/* obter horario agenda x encaixe */
	
	dt_encaixe_w := pkg_date_utils.get_DateTime(dt_agenda_p, hr_encaixe_p);
	
	select	coalesce(max(obter_valor_param_usuario(821,219, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'S')
	  into STRICT	ie_regra_horario_turno_w
	;

	select coalesce(max(ie_feriado),'N'),
	 	   max(cd_setor_agenda)
	  into STRICT ie_feriado_agenda_w,
		   cd_setor_agenda_w
	from   agenda
	where  cd_agenda = cd_agenda_p;
	
	if (ie_regra_horario_turno_w = 'T') then
		select	obter_turno_encaixe_d_agecons(cd_agenda_p,dt_encaixe_w,'N')
		into STRICT	nr_seq_turno_w
		;	
	else
		select	obter_turno_encaixe_agecons(cd_agenda_p,dt_encaixe_w)
		into STRICT	nr_seq_turno_w
		;	
	end if;
	
	select	coalesce(max(ie_encaixe),'S'),
			coalesce(max(ie_feriado),ie_feriado_agenda_w)
	into STRICT	ie_perm_encaixe_turno_w,
			ie_feriado_w
	from	agenda_turno
	where	nr_sequencia = nr_seq_turno_w;
	
	if (ie_perm_encaixe_turno_w = 'N') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(224365);
	end if;
	
	if (Obter_Se_Feriado(cd_estabelecimento_p, dt_agenda_p) > 0) then
		if (ie_feriado_w = 'N') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(669868);
		end if;
	end if;
	
	select	max(hr_inicial_intervalo),
		max(hr_final_intervalo)
	into STRICT	dt_intervalo_inicial_w,
		dt_intervalo_final_w
	from 	AGENDA_TURNO
	where	nr_sequencia = nr_seq_turno_w;
	
	select	max(hr_inicial_intervalo),
		max(hr_final_intervalo)
	into STRICT	dt_intervalo_inicial_w,
		dt_intervalo_final_w
	from 	AGENDA_TURNO
	where	nr_sequencia = nr_seq_turno_w;
	
	if (to_char(dt_intervalo_inicial_w,'hh24:mi:ss') <= to_char(dt_encaixe_w,'hh24:mi:ss')) and (to_char(dt_intervalo_final_w,'hh24:mi:ss') >= to_char(dt_encaixe_w,'hh24:mi:ss')) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(291078);
	end if;
	
	if (ie_regra_horario_turno_w = 'T') then
		select	coalesce(obter_turno_encaixe_d_agecons(cd_agenda_p,dt_encaixe_w,'S'), 0)
		into STRICT	nr_seq_turno_esp_w
		;
	else
		select	coalesce(obter_turno_esp_encaixe(cd_agenda_p,dt_encaixe_w), 0)
		into STRICT	nr_seq_turno_esp_w
		;
	end if;
		
	if (nr_seq_turno_esp_w > 0) then
		begin
		select	coalesce(max(ie_encaixe),'S')
		into STRICT	ie_perm_encaixe_turno_esp_w
		from	agenda_turno_esp
		where	nr_sequencia = nr_seq_turno_esp_w;

		if (ie_perm_encaixe_turno_esp_w = 'N') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(271560);
		end if;
		end;
	end if;
	
	if (ie_gerar_dentro_per_w = 'N') and (nr_seq_turno_w IS NOT NULL AND nr_seq_turno_w::text <> '') then
		CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(216792);
	end if;	
	
	/* consistir horario */

	ds_consistencia_w := consistir_horario_agecons(cd_agenda_p, dt_encaixe_w, qt_duracao_p, 'E', ds_consistencia_w);
	if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262328 , 'DS_MENSAGEM='||ds_consistencia_w);
	end if;
	
	if (ie_atualizar_sala_w = 'S') then
		select	max(nr_seq_sala)
		into STRICT	nr_seq_sala_w
		from	agenda_turno
		where	nr_sequencia = nr_seq_turno_w;
	end if;	
	
	/* obter turno */

	select	obter_turno_horario_agenda(cd_agenda_p, dt_encaixe_w)
	into STRICT	cd_turno_w
	;


	/* obter classificacao */

	/*
	obter_classif_encaixe_agenda(nr_seq_classif_w);
	*/
	/* obter sequencia */

	select	nextval('agenda_consulta_seq')
	into STRICT	nr_seq_agenda_w
	;
	
	
	begin
	select	OBTER_DATA_NASCTO_PF(cd_pessoa_fisica_p)
	into STRICT	dt_nascimento_w
	;
	exception
	when others then
		dt_nascimento_w	:= null;
	end;
	
	select	coalesce(max(nr_seq_hora),0)+1
	into STRICT	nr_seq_hora_w
	from	agenda_consulta
	where	cd_agenda = cd_agenda_p
	and	dt_agenda = dt_encaixe_w;
	
	/* gerar encaixe */

	insert into agenda_consulta(
					nr_sequencia,
					cd_agenda,
					dt_agenda,
					nr_minuto_duracao,
					ie_status_agenda,
					cd_pessoa_fisica,
					nm_paciente,
					nr_telefone,
         			ds_email,
					ds_observacao,
					cd_turno,
					dt_agendamento,
					nm_usuario_origem,
					nm_usuario,
					dt_atualizacao,
					ie_encaixe,
					ie_classif_agenda,
					dt_nascimento_pac,
					qt_idade_pac,
					cd_setor_atendimento,
					nr_seq_turno,
					nr_seq_hora,
					nr_seq_sala
					)
				values (
					nr_seq_agenda_w,
					cd_agenda_p,
					dt_encaixe_w,
					qt_duracao_p,
					'N',
					cd_pessoa_fisica_p,
					substr(coalesce(obter_nome_pf(cd_pessoa_fisica_p), nm_pessoa_fisica_p),1,60),
					substr(obter_fone_pac_agenda(cd_pessoa_fisica_p),1,255),
         			substr(obter_compl_pf(cd_pessoa_fisica_p,1,'M' ),1,255),
					ds_observacao_p,
					cd_turno_w,
					clock_timestamp(),
					nm_usuario_p,
					nm_usuario_p,
					clock_timestamp(),
					'S',
					ie_classif_agenda_p,
					dt_nascimento_w,
					substr(obter_dados_pf(cd_pessoa_fisica_p,'I'),1,255),
					cd_setor_agenda_w,
					nr_seq_turno_w,
					nr_seq_hora_w,
					nr_seq_sala_w
					);
	
	/* obter dados convenio, caso usuario nao informar (Esta rotina devera permanecer aqui, antes do insert gera erro) */

	if (cd_convenio_p IS NOT NULL AND cd_convenio_p::text <> '') and
		((cd_categoria_p IS NOT NULL AND cd_categoria_p::text <> '') or (cd_plano_p IS NOT NULL AND cd_plano_p::text <> ''))then
		update	agenda_consulta
		set	cd_convenio		= cd_convenio_p,
			cd_categoria		= cd_categoria_p,
			cd_plano		= cd_plano_p
		where	nr_sequencia		= nr_seq_agenda_w;	
	end if;
else
	if (coalesce(cd_agenda_p::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(76137);
	elsif (coalesce(cd_pessoa_fisica_p::text, '') = '' and coalesce(nm_pessoa_fisica_p::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(91297);
	elsif (coalesce(dt_agenda_p::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(166911);
	elsif (coalesce(hr_encaixe_p::text, '') = '') then	
		CALL wheb_mensagem_pck.exibir_mensagem_abort(201339);	
	elsif (coalesce(qt_duracao_p::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1089281);	
	end if;
end if;	
	
nr_seq_encaixe_p := nr_seq_agenda_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE qt_gerar_encaixe_agecons (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p timestamp, qt_duracao_p bigint, cd_pessoa_fisica_p text, nm_pessoa_fisica_p text, cd_convenio_p bigint, ds_observacao_p text, ie_classif_agenda_p text, nm_usuario_p text, nr_seq_encaixe_p INOUT bigint, cd_categoria_p text, cd_plano_p text) FROM PUBLIC;

