-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_pls_contab_rec_desc ( nr_lote_contabil_p bigint, nm_usuario_p text, ie_exclusao_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------

Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
dt_referencia_w			timestamp;
dt_referencia_titulo_w		timestamp;
dt_referencia_fm_w		timestamp;
cd_estabelecimento_w		smallint;
nr_seq_lote_comissao_w		bigint;
nr_seq_regra_cc_w		bigint;
cd_centro_custo_w		integer;
nr_lote_contabil_w		bigint;
nr_titulo_w			titulo_receber.nr_titulo%type;
nr_seq_w_movto_cont_w		bigint;
ie_centro_custo_w		varchar(1);
ie_debito_credito_w		varchar(2);
vl_retorno_w			varchar(2000);
ds_conteudo_w			varchar(4000);
vl_diferenca_w			double precision;
cd_conta_contabil_w		varchar(20);
cd_historico_w			bigint;
nr_seq_info_ctb_w		informacao_contabil.nr_sequencia%type;
nm_tabela_w			w_movimento_contabil.nm_tabela%type;
nm_atributo_w			w_movimento_contabil.nm_atributo%type;
nr_seq_item_w			w_movimento_contabil.nr_seq_tab_orig%type;
nm_agrupador_w			varchar(255);	
nr_seq_agrupamento_w		bigint;
cd_tipo_lote_contabil_w         bigint;

c_lote_disc CURSOR FOR
	SELECT	nr_sequencia
	from	pls_desc_lote_comissao
	where	nr_lote_contabil = nr_lote_contabil_p
	and	(nr_seq_empresa IS NOT NULL AND nr_seq_empresa::text <> '');

c_cobranca CURSOR FOR
	SELECT	'C',
		coalesce(b.vl_cobranca,0) - coalesce(a.vl_cobranca,0),
		cd_conta_cred,
		cd_historico_cred,
		'TITULO_RECEBER_COBR' nm_tabela,
		'VL_COBRANCA' nm_atributo,
		b.nr_sequencia,
		43 nr_seq_info_ctb,
		b.nr_titulo
	from	pls_desc_comissao	a,
		titulo_receber_cobr	b
	where	a.nr_seq_titulo_cobr	= b.nr_sequencia
	and	nr_seq_lote = nr_seq_lote_comissao_w
	
union all

	SELECT	'D',
		coalesce(b.vl_cobranca,0) - coalesce(a.vl_cobranca,0),
		cd_conta_deb,
		cd_historico_deb,
		'TITULO_RECEBER_COBR' nm_tabela,
		'VL_COBRANCA' nm_atributo,
		b.nr_sequencia,
		43 nr_seq_info_ctb,
		b.nr_titulo
	from	pls_desc_comissao	a,
		titulo_receber_cobr	b
	where	a.nr_seq_titulo_cobr	= b.nr_sequencia
	and	nr_seq_lote = nr_seq_lote_comissao_w;

c_movimento CURSOR FOR
	SELECT	oid
	from	w_movimento_contabil
	where	nr_lote_contabil = nr_lote_contabil_p;
	
c_movimento_ctb CURSOR FOR
	SELECT	oid
	from	movimento_contabil
	where	nr_lote_contabil = nr_lote_contabil_p;
	
BEGIN
/*Validacao para impedir a geracao em lotes incorretos */

if (ie_exclusao_p <> 'S') then
        select b.cd_tipo_lote_contabil
        into STRICT cd_tipo_lote_contabil_w
        from lote_contabil b
        where b.nr_lote_contabil = nr_lote_contabil_p;
        if (cd_tipo_lote_contabil_w <> 28) then
                CALL wheb_mensagem_pck.exibir_mensagem_abort(261346);
        end if;
end if;
select	dt_referencia,
	cd_estabelecimento,
	nr_lote_contabil
into STRICT 	dt_referencia_w,
	cd_estabelecimento_w,
	nr_lote_contabil_w
from 	lote_contabil
where 	nr_lote_contabil = nr_lote_contabil_p;

dt_referencia_w := trunc(dt_referencia_w,'month');
dt_referencia_fm_w := fim_dia(fim_mes(dt_referencia_w));

if (ie_exclusao_p = 'S') then
	begin
	CALL wheb_usuario_pck.set_ie_lote_contabil('S');
	
	for reg in c_movimento
		loop
		delete	from w_movimento_contabil
		where   rowid	= reg.rowid;
		end loop;

	for reg_ctb in c_movimento_ctb
		loop
		delete	from movimento_contabil
		where   rowid	= reg_ctb.rowid;
		end loop;
		
	update	lote_contabil
	set	vl_credito = 0,
		vl_debito  = 0
	where	nr_lote_contabil = nr_lote_contabil_p;
	
	commit;
	
	update	pls_desc_lote_comissao
	set	nr_lote_contabil = 0
	where	nr_lote_contabil = nr_lote_contabil_p;
	
	commit;
	
	CALL wheb_usuario_pck.set_ie_lote_contabil('N');
	end;
else
	begin
	CALL wheb_usuario_pck.set_ie_lote_contabil('S');
	
	for reg in c_movimento
		loop
		delete	from w_movimento_contabil
		where   rowid		= reg.rowid;
		end loop;
	
	update	pls_desc_lote_comissao
	set		nr_lote_contabil = nr_lote_contabil_p
	where	coalesce(nr_lote_contabil,0)	= 0
  	and		cd_estabelecimento = cd_estabelecimento_w
	and		(nr_seq_empresa IS NOT NULL AND nr_seq_empresa::text <> '')
	and		dt_referencia between dt_referencia_w and dt_referencia_fm_w;
	
	commit;
	
	CALL wheb_usuario_pck.set_ie_lote_contabil('N');
	
	nr_seq_w_movto_cont_w := 0;
	
	nm_agrupador_w := coalesce(trim(both obter_agrupador_contabil(28)),'NR_SEQ_COBRANCA');
	
	open c_lote_disc;
	loop
	fetch c_lote_disc into
		nr_seq_lote_comissao_w;
	EXIT WHEN NOT FOUND; /* apply on c_lote_disc */
		begin
		open c_cobranca;
		loop
		fetch c_cobranca into
			ie_debito_credito_w,
			vl_diferenca_w,
			cd_conta_contabil_w,
			cd_historico_w,
			nm_tabela_w,
			nm_atributo_w,
			nr_seq_item_w,
			nr_seq_info_ctb_w,
			nr_titulo_w;
		EXIT WHEN NOT FOUND; /* apply on c_cobranca */
			begin
			cd_centro_custo_w := null;
			
			if (nm_agrupador_w = 'NR_SEQ_COBRANCA') then
				nr_seq_agrupamento_w	:=	nr_seq_item_w;
			elsif (nm_agrupador_w = 'NR_TITULO_RECEBER')then
				nr_seq_agrupamento_w	:=	nr_titulo_w;
			end if;
			
			if (coalesce(nr_seq_agrupamento_w,0) = 0)then
				nr_seq_agrupamento_w	:=	nr_seq_item_w;
			end if;
			
			if (coalesce(cd_conta_contabil_w,'X') <> 'X') then
				select	ie_centro_custo
				into STRICT	ie_centro_custo_w
				from	conta_contabil
				where	cd_conta_contabil = cd_conta_contabil_w;
			end if;
			
			if (ie_centro_custo_w = 'S') then
				SELECT * FROM pls_obter_centro_custo(	'R', null, cd_estabelecimento_w, '', '', '', '', '', cd_centro_custo_w, nr_seq_regra_cc_w) INTO STRICT cd_centro_custo_w, nr_seq_regra_cc_w;
			end if;
			
			nr_seq_w_movto_cont_w := nr_seq_w_movto_cont_w + 1;
			
			insert into w_movimento_contabil(nr_lote_contabil,
				nr_sequencia,
				cd_conta_contabil,
				ie_debito_credito,
				cd_historico,
				dt_movimento,
				vl_movimento,
				cd_estabelecimento,
				cd_centro_custo,
				ds_compl_historico,
				nr_seq_agrupamento,
				nr_seq_tab_orig,
				nr_seq_info,
				nm_tabela,
				nm_atributo)
			values (nr_lote_contabil_p,
				nr_seq_w_movto_cont_w,
				cd_conta_contabil_w,
				ie_debito_credito_w,
				cd_historico_w,
				dt_referencia_w,
				vl_diferenca_w,
				cd_estabelecimento_w,
				cd_centro_custo_w,
				null,
				nr_seq_agrupamento_w,
				nr_seq_item_w,
				nr_seq_info_ctb_w,
				nm_tabela_w,
				nm_atributo_w);
			end;
		end loop;
		close c_cobranca;
		end;
	end loop;
	close c_lote_disc;
	
	CALL agrupa_movimento_contabil(	nr_lote_contabil_p,
					nm_usuario_p);
	end;
end if;

if (coalesce(ds_retorno_p::text, '') = '') then
	begin
	update	lote_contabil
	set	ie_situacao		= 'A',
		dt_geracao_lote		= CASE WHEN ie_exclusao_p='N' THEN clock_timestamp() WHEN ie_exclusao_p='S' THEN null END
	where	nr_lote_contabil 		= nr_lote_contabil_p;

	if (ie_exclusao_p = 'S') then
		ds_retorno_p	:= wheb_mensagem_pck.get_texto(298780,null);  /*'Exclusao do Lote Ok';*/
	else
		ds_retorno_p	:= wheb_mensagem_pck.get_texto(298781,null);  /*'Geracao do Lote Ok';*/
	end if;

	commit;
	end;
else
	rollback;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_pls_contab_rec_desc ( nr_lote_contabil_p bigint, nm_usuario_p text, ie_exclusao_p text, ds_retorno_p INOUT text) FROM PUBLIC;

