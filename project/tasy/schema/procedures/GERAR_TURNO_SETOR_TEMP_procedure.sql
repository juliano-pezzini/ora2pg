-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_turno_setor_temp ( cd_setor_atendimento_p bigint, nr_seq_turno_p bigint, ie_gerar_itens_p text, nm_usuario_p text, nr_seq_nova_p INOUT bigint, ds_mensagem_p INOUT text, dt_manual_p timestamp default null) AS $body$
DECLARE


nr_seq_setor_w		bigint;
qt_setor_item_w		bigint;
hr_inicial_w		timestamp;
hr_final_w		timestamp;
dt_hora_inicial_w	timestamp;
dt_hora_final_w		timestamp;
dt_hora_inicial_ant_w	timestamp;
dt_hora_final_ant_w	timestamp;
ie_gera_temp_minima_w	varchar(01);
ie_gera_temp_maxima_w	varchar(01);
ie_permite_item_igual_w	varchar(01);
qt_temp_max_w		turno_temp_setor.qt_temp_max%type;
qt_temp_min_w		turno_temp_setor.qt_temp_min%type;
qt_umidade_max_w	turno_temp_setor.qt_umidade_max%type;
qt_umidade_min_w	turno_temp_setor.qt_umidade_min%type;
ie_gera_umid_minima_w	varchar(1);
ie_gera_umid_maxima_w	varchar(1);
qt_min_apos_turno_w	bigint;
cd_estabelecimento_w	smallint := wheb_usuario_pck.get_cd_estabelecimento;
ie_consiste_turno_ant_w	varchar(15);
nr_seq_turno_ant_w	bigint;
ie_existe_w		varchar(01);
ds_mensagem_w		varchar(255) := '';
dt_manual_w		timestamp := clock_timestamp();
ie_dt_registro_manual_w	varchar(01);


BEGIN
ie_gera_temp_minima_w := obter_param_usuario(1300, 7, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, ie_gera_temp_minima_w);
ie_gera_temp_maxima_w := obter_param_usuario(1300, 8, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, ie_gera_temp_maxima_w);
ie_gera_umid_minima_w := obter_param_usuario(1300, 16, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, ie_gera_umid_minima_w);
ie_gera_umid_maxima_w := obter_param_usuario(1300, 17, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, ie_gera_umid_maxima_w);
qt_min_apos_turno_w := obter_param_usuario(1300, 18, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, qt_min_apos_turno_w);
ie_consiste_turno_ant_w := obter_param_usuario(1300, 19, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, ie_consiste_turno_ant_w);
ie_dt_registro_manual_w := obter_param_usuario(1300, 22, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, ie_dt_registro_manual_w);
ie_permite_item_igual_w := obter_param_usuario(1300, 26, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_permite_item_igual_w);

if (dt_manual_p IS NOT NULL AND dt_manual_p::text <> '') then
	dt_manual_w	:= dt_manual_p;
end if;

select	max(hr_inicial),
	max(hr_final)
into STRICT	hr_inicial_w,
	hr_final_w
from	turno_temperatura
where	nr_sequencia	= nr_seq_turno_p;

select	max(qt_temp_max),
	max(qt_temp_min),
	max(qt_umidade_max),
	max(qt_umidade_min)
into STRICT	qt_temp_max_w,
	qt_temp_min_w,
	qt_umidade_max_w,
	qt_umidade_min_w
from	turno_temp_setor
where	cd_setor_atendimento 	= cd_setor_atendimento_p
and	nr_seq_turno		= nr_seq_turno_p;

if qt_umidade_min_w > 99.99 then
  qt_umidade_min_w := 99.99;
end if;
if qt_umidade_max_w > 99.99 then
  qt_umidade_max_w := 99.99;
end if;

select	to_date(substr(to_char(clock_timestamp(), 'dd/mm/yyyy'), 1, 12) || substr(to_char(hr_inicial_w, 'dd/mm/yyyy hh24:mi:ss'), 12, 8), 'dd/mm/yyyy hh24:mi:ss'),
	to_date(substr(to_char(clock_timestamp(), 'dd/mm/yyyy'), 1, 12) || substr(to_char(hr_final_w, 'dd/mm/yyyy hh24:mi:ss'), 12, 8), 'dd/mm/yyyy hh24:mi:ss')
into STRICT	dt_hora_inicial_w,
	dt_hora_final_w
;

if (coalesce(ie_consiste_turno_ant_w,'N') = 'S') then
	select	max(a.nr_sequencia)
	into STRICT	nr_seq_turno_ant_w
	from	turno_temp_setor b,
		turno_temperatura a
	where	hr_inicial < hr_inicial_w
	and	a.nr_sequencia 		= b.nr_seq_turno
	and	b.cd_setor_atendimento 	= cd_setor_atendimento_p;

	if (coalesce(nr_seq_turno_ant_w,0) > 0) then
		begin
		
		select	'S'
		into STRICT	ie_existe_w
		from    setor_temperatura
		where   nr_seq_turno = nr_seq_turno_ant_w
		and     cd_setor_atendimento = cd_setor_atendimento_p
		AND	trunc(dt_atualizacao_nrec) = trunc(clock_timestamp());
		exception
		when others then
			ie_existe_w := 'N';
		end;

		if (nr_seq_turno_ant_w > 0) and (nr_seq_turno_ant_w <> nr_seq_turno_p) and (ie_existe_w = 'N') then
			select	nextval('setor_temperatura_seq')
			into STRICT	nr_seq_setor_w
			;
			
			select	to_date(substr(to_char(clock_timestamp(), 'dd/mm/yyyy'), 1, 12) || substr(to_char(hr_inicial, 'dd/mm/yyyy hh24:mi:ss'), 12, 8), 'dd/mm/yyyy hh24:mi:ss'),
				to_date(substr(to_char(clock_timestamp(), 'dd/mm/yyyy'), 1, 12) || substr(to_char(hr_final, 'dd/mm/yyyy hh24:mi:ss'), 12, 8), 'dd/mm/yyyy hh24:mi:ss')
			into STRICT	dt_hora_inicial_ant_w,
				dt_hora_final_ant_w
			from	turno_temperatura
			where	nr_sequencia = nr_seq_turno_ant_w;			
			
			insert into setor_temperatura(	nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_setor_atendimento,
					dt_hora_inicio,
					dt_hora_fim,
					qt_temp_inicial,
					qt_temp_min,
					qt_temp_max,
					nm_usuario_fechamento,
					qt_umidade_final,
					nr_seq_turno,
					ds_observacao,
					dt_medicao,
					qt_umidade_max,
					qt_umidade_min)
			values (	nr_seq_setor_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_setor_atendimento_p,
					dt_hora_inicial_ant_w,
					dt_hora_final_ant_w,
					null,
					null,
					null,
					nm_usuario_p,
					null,
					nr_seq_turno_ant_w,
					--'Turno gerado automaticamente sem informacoes por ter ultrapassado limite de tempo.',
					wheb_mensagem_pck.get_texto(305892),
					clock_timestamp(),
					null,
					null);
			commit;
			
			--ds_mensagem_w := substr(ds_mensagem_w || 'Turno anterior registrado automaticamente conforme parametro [19].' || chr(13) || chr(10),1,255);
			ds_mensagem_w := substr(ds_mensagem_w || wheb_mensagem_pck.get_texto(305893) || chr(13) || chr(10),1,255);
			
		end if;
	end if;
end if;

if (coalesce(qt_min_apos_turno_w,0) > 0) and
	(dt_hora_final_w + (qt_min_apos_turno_w /1440) < clock_timestamp()) then
	select	nextval('setor_temperatura_seq')
	into STRICT	nr_seq_setor_w
	;
	
	insert into setor_temperatura(	nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_setor_atendimento,
			dt_hora_inicio,
			dt_hora_fim,
			qt_temp_inicial,
			qt_temp_min,
			qt_temp_max,
			nm_usuario_fechamento,
			qt_umidade_final,
			nr_seq_turno,
			ds_observacao,
			dt_medicao,
			qt_umidade_max,
			qt_umidade_min)
	values (	nr_seq_setor_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			cd_setor_atendimento_p,
			dt_hora_inicial_w,
			dt_hora_final_w,
			null,
			null,
			null,
			nm_usuario_p,
			null,
			nr_seq_turno_p,
			--'Turno gerado automaticamente sem informacoes por ter ultrapassado limite de tempo.',
			wheb_mensagem_pck.get_texto(305892),
			clock_timestamp(),
			null,
			null);
	commit;

	/*ds_mensagem_w := substr(ds_mensagem_w || 'A hora de fim do turno (' || to_char(dt_hora_final_w,'dd/mm/yyyy hh24:mi:ss') ||
						') ultrapassou o limite do parametro [18].',1,255);*/
						
	ds_mensagem_w := substr(wheb_mensagem_pck.get_texto(305894,'DT_HORA_FINAL=' || to_char(dt_hora_final_w,'dd/mm/yyyy hh24:mi:ss')),1,255);

	goto final; /*Colocado dentro do IF pois so o par [18] deve bloquear o processo, o 19 pode continuar*/
end if;

select	nextval('setor_temperatura_seq')
into STRICT	nr_seq_setor_w
;

if (coalesce(ie_dt_registro_manual_w,'N') = 'S') then
	select	to_date(substr(to_char(dt_manual_w, 'dd/mm/yyyy'), 1, 12) || substr(to_char(hr_inicial_w, 'dd/mm/yyyy hh24:mi:ss'), 12, 8), 'dd/mm/yyyy hh24:mi:ss'),
		to_date(substr(to_char(dt_manual_w, 'dd/mm/yyyy'), 1, 12) || substr(to_char(hr_final_w, 'dd/mm/yyyy hh24:mi:ss'), 12, 8), 'dd/mm/yyyy hh24:mi:ss')
	into STRICT	dt_hora_inicial_w,
		dt_hora_final_w
	;
end if;	

insert into SETOR_TEMPERATURA(nr_sequencia,
	dt_atualizacao,
	nm_usuario,
	cd_setor_atendimento,
	dt_hora_inicio,
	dt_hora_fim,
	nr_seq_turno,
	dt_atualizacao_nrec,
	dt_medicao,
	nm_usuario_nrec,
	qt_temp_max,
	qt_temp_min,
	qt_umidade_max,
	qt_umidade_min)
values (nr_seq_setor_w,
	clock_timestamp(),
	nm_usuario_p,
	cd_setor_atendimento_p,
	dt_hora_inicial_w,
	dt_hora_final_w,
	nr_seq_turno_p,
	clock_timestamp(),
	clock_timestamp(),
	nm_usuario_p,
	CASE WHEN ie_gera_temp_maxima_w='A' THEN qt_temp_max_w WHEN ie_gera_temp_maxima_w='L' THEN qt_temp_max_w  ELSE null END ,
	CASE WHEN ie_gera_temp_minima_w='A' THEN qt_temp_min_w WHEN ie_gera_temp_minima_w='L' THEN qt_temp_min_w  ELSE null END ,
	CASE WHEN ie_gera_umid_minima_w='A' THEN qt_umidade_max_w WHEN ie_gera_umid_minima_w='L' THEN qt_umidade_max_w  ELSE null END ,
	CASE WHEN ie_gera_umid_maxima_w='A' THEN qt_umidade_min_w WHEN ie_gera_umid_maxima_w='L' THEN qt_umidade_max_w  ELSE null END );

select	count(*)
into STRICT	qt_setor_item_w
from	setor_temperatura
where	cd_setor_atendimento = cd_setor_atendimento_p
and	nr_seq_turno = nr_seq_turno_p
and	to_date(to_char(dt_atualizacao_nrec,'dd/mm/yyyy'),'dd/mm/yyyy') = to_date(to_char(clock_timestamp(),'dd/mm/yyyy'),'dd/mm/yyyy');

if	((ie_permite_item_igual_w = 'S') or (ie_permite_item_igual_w = 'N') and (qt_setor_item_w <= 1)) and (ie_gerar_itens_p = 'S') then
	begin	
	insert into setor_temperatura_item(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_setor_temp,
		nr_seq_item,
		qt_temp_inicial,
		qt_temp_min,
		qt_temp_max,
		qt_umidade_final,
		ds_observacao,
		dt_medicao,
		qt_umidade_min,
		qt_umidade_max)
	SELECT	nextval('setor_temperatura_item_seq'),
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_setor_w,
		nr_sequencia,
		0,
		CASE WHEN ie_gera_temp_minima_w='A' THEN qt_temp_min WHEN ie_gera_temp_minima_w='S' THEN qt_temp_min  ELSE null END ,
		CASE WHEN ie_gera_temp_maxima_w='A' THEN qt_temp_max WHEN ie_gera_temp_maxima_w='S' THEN qt_temp_max  ELSE null END ,
		null,
		null,
		clock_timestamp(),
		CASE WHEN ie_gera_umid_minima_w='A' THEN qt_umidade_min WHEN ie_gera_umid_minima_w='S' THEN qt_umidade_min  ELSE null END ,
		CASE WHEN ie_gera_umid_maxima_w='A' THEN qt_umidade_max WHEN ie_gera_umid_maxima_w='S' THEN qt_umidade_max  ELSE null END
	from	item_temperatura
	where	cd_setor_atendimento	= cd_setor_atendimento_p
	and	ie_situacao = 'A';
	end;
end if;

<<final>>
ds_mensagem_p := ds_mensagem_w;
nr_seq_nova_p := nr_seq_setor_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_turno_setor_temp ( cd_setor_atendimento_p bigint, nr_seq_turno_p bigint, ie_gerar_itens_p text, nm_usuario_p text, nr_seq_nova_p INOUT bigint, ds_mensagem_p INOUT text, dt_manual_p timestamp default null) FROM PUBLIC;

