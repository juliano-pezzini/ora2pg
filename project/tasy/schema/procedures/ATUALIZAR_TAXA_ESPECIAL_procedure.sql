-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_taxa_especial (nr_interno_conta_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* atualiza taxa de percentual sobre matmed e/ou procedimentos */
 
/* Deve existir um servico vinculado a uma regra de taxa especial no ajuste de procedimento */
 
 
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
cd_estabelecimento_w		smallint;
ie_tipo_atendimento_w		smallint;
qt_reg_regra_w			bigint;
cd_procedimento_w			bigint;
ie_origem_proced_w		bigint;
nr_seq_regra_preco_w		bigint;
nr_sequencia_w			bigint;

c01 CURSOR FOR 
SELECT cd_procedimento, 
	 ie_origem_proced, 
	 nr_seq_regra_preco 
from	 regra_ajuste_proc 
where	 cd_estabelecimento			= cd_estabelecimento_w 
and	 cd_convenio 				= cd_convenio_w 
and	 coalesce(cd_categoria,cd_categoria_w)	= cd_categoria_w 
and	 coalesce(ie_tipo_atendimento,ie_tipo_atendimento_w) 
							= ie_tipo_atendimento_w 
and	 (nr_seq_regra_preco IS NOT NULL AND nr_seq_regra_preco::text <> '') 
and	 ie_situacao				= 'A';

 
 

BEGIN 
 
/* Verifica se existe alguma regra de preço especial composta para o Hospital */
 
 
select	count(*) 
into STRICT	qt_reg_regra_w 
from	regra_preco_proc;
 
if (qt_reg_regra_w	> 0)	then 
	BEGIN 
	/* Busca dados da conta */
 
	select coalesce(a.cd_convenio_calculo,a.cd_convenio_parametro), 
		 coalesce(a.cd_categoria_calculo,a.cd_categoria_parametro), 
		 a.cd_estabelecimento, 
		 b.ie_tipo_atendimento 
	into STRICT	 cd_convenio_w, 
		 cd_categoria_w, 
		 cd_estabelecimento_w, 
		 ie_tipo_atendimento_w 
	from	 atendimento_paciente b, 
		 conta_paciente a 
	where	 a.nr_interno_conta	= nr_interno_conta_p 
	and	 a.nr_atendimento		= b.nr_atendimento;
 
	/* Verifica se existe alguma regra de preço especial composta para o Convenio */
 
	OPEN C01;
	LOOP 
	FETCH C01 into 
		cd_procedimento_w, 
		ie_origem_proced_w, 
		nr_seq_regra_preco_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin 
		/* Seleciona servico gerado pela regra de lancamento automatico */
 
		/* Se quiser taxa atualizada durante atendimento usar regra atendimento senão regra de alta */
 
		select coalesce(max(a.nr_sequencia),0) 
		into STRICT	 nr_sequencia_w 
		from	 procedimento_paciente a 
		where	 a.nr_interno_conta	= nr_interno_conta_p 
		and	 a.cd_procedimento	= cd_procedimento_w 
		and	 a.ie_origem_proced	= ie_origem_proced_w 
		and	 coalesce(a.cd_motivo_exc_conta::text, '') = '';
 
		/* Zera valor atual para não entrar no calculo */
 
		update procedimento_paciente 
		set	 vl_procedimento 	= 0 
		where	 nr_sequencia 	= nr_sequencia_w;
 
		if (nr_sequencia_w	> 0) then 
			CALL atualiza_preco_servico(nr_sequencia_w,nm_usuario_p);
			commit;
		end if;
		end;
	END LOOP;
	CLOSE C01;
	END;	
END IF;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_taxa_especial (nr_interno_conta_p bigint, nm_usuario_p text) FROM PUBLIC;

