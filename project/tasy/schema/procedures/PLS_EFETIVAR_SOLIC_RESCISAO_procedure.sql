-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_efetivar_solic_rescisao ( nr_seq_solicitacao_p bigint, dt_rescisao_p timestamp, ie_rescindir_contrato_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_commit_p text, dt_fim_repasse_p timestamp default null) AS $body$
DECLARE


nr_seq_contrato_w		pls_solicitacao_rescisao.nr_seq_contrato%type;
nr_seq_intercambio_w		pls_solicitacao_rescisao.nr_seq_intercambio%type;
nr_seq_motivo_rescisao_w	pls_motivo_cancelamento.nr_sequencia%type;
qt_benef_pagador_w		bigint;
qt_seg_rescindido_w		bigint;
ie_consistir_sib_w		varchar(1);
qt_registros_w			bigint;
nr_seq_causa_rescisao_w		bigint;
dt_rescisao_w			pls_segurado.dt_rescisao%type;
ie_existe_resc_iniciat_benef_w	varchar(1);
dt_rescisa_ww			pls_segurado.dt_rescisao%type;
ie_devolucao_automatica_w	pls_resc_fin_mens.ie_devolucao_automatica%type;
qt_benef_devolucao_auto_w	bigint;
ie_gerar_devolucao_w		varchar(1);
nr_seq_regra_obito_w		pls_sca_regra_obito.nr_sequencia%type;
ie_gerar_novo_pagador_w		varchar(1);
nr_seq_motivo_alt_pag_w		pls_regra_solic_rescisao.nr_seq_motivo_alt_pag%type;
ie_remido_ativo_w		varchar(1);
dt_resc_prog_remido_w		timestamp;
ds_observacao_w			pls_solicitacao_rescisao.ds_observacao%type;
nr_seq_protocolo_atend_w	pls_solicitacao_rescisao.nr_seq_protocolo_atend%type;

C01 CURSOR FOR
	SELECT	a.nr_seq_segurado,
		a.nr_seq_motivo_rescisao,
		a.nr_seq_causa_rescisao,
		a.nr_seq_novo_titular,
		a.dt_obito,
		a.nr_certidao_obito,
		b.cd_pessoa_fisica,
		b.nr_seq_titular,
		coalesce(c.ie_obito,'N') ie_obito,
		coalesce(c.ie_gerar_lead_rescisao,'S') ie_gerar_lead_rescisao,
		coalesce(c.ie_iniciativa_beneficiario,'N') ie_iniciativa_beneficiario
	FROM pls_segurado b, pls_solic_rescisao_benef a
LEFT OUTER JOIN pls_motivo_cancelamento c ON (a.nr_seq_motivo_rescisao = c.nr_sequencia)
WHERE b.nr_sequencia			= a.nr_seq_segurado  and a.nr_seq_solicitacao		= nr_seq_solicitacao_p;

C02 CURSOR FOR
	SELECT	b.nr_seq_pagador,
		a.nr_seq_motivo_rescisao
	from	pls_solic_rescisao_benef a,
		pls_segurado b
	where	b.nr_sequencia		= a.nr_seq_segurado
	and	a.nr_seq_solicitacao	= nr_seq_solicitacao_p
	group by
		b.nr_seq_pagador,
		a.nr_seq_motivo_rescisao;

C03 CURSOR FOR
	SELECT	nr_sequencia nr_seq_solicitacao_resc_fin,
		pls_obter_regra_resc_fin(nr_sequencia, cd_estabelecimento_p) nr_seq_regra_resc_fin
	from	pls_solic_rescisao_fin
	where	nr_seq_solicitacao = nr_seq_solicitacao_p;

BEGIN

ie_existe_resc_iniciat_benef_w	:= 'S';

select	count(*)
into STRICT	qt_seg_rescindido_w
from	pls_solic_rescisao_benef a,
	pls_segurado b
where	b.nr_sequencia = a.nr_seq_segurado
and	b.dt_rescisao <= fim_dia(dt_rescisao_p)
and	a.nr_seq_solicitacao = nr_seq_solicitacao_p;

if (qt_seg_rescindido_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(946004); --Nao foi possivel efetivar a rescisao devido no lote ter beneficiario(s) ja rescindido(s)
end if;

ie_consistir_sib_w	:= coalesce(obter_valor_param_usuario(1202, 44, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'S');

select	nr_seq_contrato,
	nr_seq_intercambio,
	ds_observacao,
	nr_seq_protocolo_atend
into STRICT	nr_seq_contrato_w,
	nr_seq_intercambio_w,
	ds_observacao_w,
	nr_seq_protocolo_atend_w
from	pls_solicitacao_rescisao
where	nr_sequencia	= nr_seq_solicitacao_p;

select	max(nr_seq_motivo_alt_pag)
into STRICT	nr_seq_motivo_alt_pag_w
from	pls_regra_solic_rescisao
where	cd_estabelecimento	= cd_estabelecimento_p;

if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') and (pls_obter_restr_resc_contrato(nr_seq_contrato_w, obter_perfil_ativo, nm_usuario_p, 'B') = 'S') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(450507); --Nao foi possivel rescindir o beneficiario devido a regra de restricao de rescisao cadastrada para o contrato
end if;

for r_c01_w in C01 loop
	begin
	
	select	CASE WHEN r_c01_w.ie_iniciativa_beneficiario='S' THEN  dt_rescisao_p  ELSE fim_dia(dt_rescisao_p) END
	into STRICT	dt_rescisao_w
	;
	
	if (ie_consistir_sib_w = 'S') and (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
		select	count(1)
		into STRICT	qt_registros_w
		from	table(pls_sib_validacao_pck.validar_sib_contrato(null,r_c01_w.nr_seq_segurado,null,null));

		if (qt_registros_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(281112);
		end if;
	end if;
		
	if (r_c01_w.ie_obito = 'S') and (r_c01_w.dt_obito IS NOT NULL AND r_c01_w.dt_obito::text <> '') then
		CALL pls_inserir_obito_pf(	r_c01_w.cd_pessoa_fisica,
					r_c01_w.dt_obito,
					r_c01_w.nr_certidao_obito,
					nm_usuario_p,
					'N');
	end if;
	
	if (nr_seq_intercambio_w IS NOT NULL AND nr_seq_intercambio_w::text <> '') then
		if (r_c01_w.nr_seq_novo_titular IS NOT NULL AND r_c01_w.nr_seq_novo_titular::text <> '') then
			CALL pls_transferir_tit_intercambio(r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_novo_titular, 'D', 'S', dt_rescisao_w, dt_rescisao_w, r_c01_w.nr_seq_motivo_rescisao, ds_observacao_w, cd_estabelecimento_p, nm_usuario_p);
		else
			CALL pls_rescindir_segurado(r_c01_w.nr_seq_segurado, dt_rescisao_w, dt_rescisao_w, r_c01_w.nr_seq_motivo_rescisao, ds_observacao_w, cd_estabelecimento_p, nm_usuario_p, 'RB', r_c01_w.ie_obito, r_c01_w.nr_seq_causa_rescisao, dt_fim_repasse_p, nr_seq_solicitacao_p);
		end if;
	else
		if (r_c01_w.nr_seq_novo_titular IS NOT NULL AND r_c01_w.nr_seq_novo_titular::text <> '') then
			if (r_c01_w.ie_obito	= 'S') then
				nr_seq_regra_obito_w	:= pls_obter_se_titular_obito(r_c01_w.nr_seq_segurado, 'M', 'S');
				
				if (nr_seq_motivo_alt_pag_w IS NOT NULL AND nr_seq_motivo_alt_pag_w::text <> '') then
					ie_gerar_novo_pagador_w	:= 'S';
				else
					ie_gerar_novo_pagador_w	:= 'N';
				end if;
			else
				nr_seq_regra_obito_w	:= null;
				ie_gerar_novo_pagador_w	:= 'N';
			end if;
			
			CALL pls_transferir_titular(r_c01_w.nr_seq_segurado, r_c01_w.nr_seq_novo_titular, 'D', clock_timestamp(), 'S', dt_rescisao_w, dt_rescisao_w, r_c01_w.nr_seq_motivo_rescisao,
						null, --nr_cert_obito_titular_p
						null, --dt_obito_titular_p
						'', cd_estabelecimento_p,
						nr_seq_regra_obito_w, --nr_seq_regra_obito_p
						ie_gerar_novo_pagador_w, --ie_gerar_novo_pagador_p
						null, --qt_anos_validade_p - Passando null sera considerado o valor padrao da regra
						nr_seq_motivo_alt_pag_w, --nr_seq_motivo_alt_pag_p
						'SB', -- ie_tipo_rescisao_p
						nm_usuario_p,
						'N');
		else
			CALL pls_rescindir_segurado(r_c01_w.nr_seq_segurado, dt_rescisao_w, dt_rescisao_w, r_c01_w.nr_seq_motivo_rescisao, ds_observacao_w, cd_estabelecimento_p, nm_usuario_p, 'RB', r_c01_w.ie_obito, r_c01_w.nr_seq_causa_rescisao, dt_fim_repasse_p, nr_seq_solicitacao_p);
		end if;
	end if;

	if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') and (r_c01_w.ie_gerar_lead_rescisao = 'S') then
		CALL pls_gerar_solicitacao_lead(	null,
						null,
						'T',
						'R',
						nm_usuario_p,
						cd_estabelecimento_p,
						r_c01_w.nr_seq_segurado);
	end if;

	if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
		CALL pls_preco_beneficiario_pck.atualizar_preco_beneficiarios(r_c01_w.nr_seq_segurado, null, null, null, clock_timestamp(), null, 'N', nm_usuario_p, cd_estabelecimento_p);
	end if;
	
	nr_seq_motivo_rescisao_w	:= r_c01_w.nr_seq_motivo_rescisao;
	nr_seq_causa_rescisao_w		:= r_c01_w.nr_seq_causa_rescisao;
	
	if	(ie_existe_resc_iniciat_benef_w = 'S' AND r_c01_w.ie_iniciativa_beneficiario = 'N') then
		ie_existe_resc_iniciat_benef_w	:= 'N'; -- Caso exista algum beneficiario na rescisao com o motivo de rescisao que nao seja rompimento do contrato por iniciativa do beneficiario, deve usar a data de rescisao para o ultimo segundo do dia da rescisao
	end if;
	end;
end loop; --C01
select	CASE WHEN ie_existe_resc_iniciat_benef_w='N' THEN  fim_dia(dt_rescisao_p)  ELSE dt_rescisao_p END
into STRICT	dt_rescisa_ww
;

for r_c02_w in c02 loop
	begin
	
	select	count(1)
	into STRICT	qt_benef_pagador_w
	from	pls_segurado
	where	nr_seq_pagador = r_c02_w.nr_seq_pagador
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	((dt_rescisao > dt_rescisa_ww) or (coalesce(dt_rescisao::text, '') = ''));

	if (qt_benef_pagador_w = 0) then
		update	pls_contrato_pagador
		set	dt_rescisao			= dt_rescisa_ww,
			nm_usuario			= nm_usuario_p,
			dt_atualizacao			= clock_timestamp(),
			nr_seq_motivo_cancelamento	= r_c02_w.nr_seq_motivo_rescisao
		where	nr_sequencia			= r_c02_w.nr_seq_pagador;

		CALL pls_liquidar_titulos_rescisao(r_c02_w.nr_seq_pagador, dt_rescisa_ww, cd_estabelecimento_p, nm_usuario_p);
	end if;
	end;
end loop;

if (ie_rescindir_contrato_p = 'S') and
	((nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') or (nr_seq_intercambio_w IS NOT NULL AND nr_seq_intercambio_w::text <> '')) then
	if (pls_obter_restr_resc_contrato(nr_seq_contrato_w,obter_perfil_ativo,nm_usuario_p, 'C') = 'S') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(450518, null); --Nao foi possivel rescindir o contrato devido a regra de restricao de rescisao cadastrada
	end if;

	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_remido_ativo_w
	from (SELECT	nr_sequencia nr_seq_segurado,
			dt_rescisao
		from	pls_segurado
		where	nr_seq_contrato	= nr_seq_contrato_w
		
union

		SELECT	nr_sequencia nr_seq_segurado,
			dt_rescisao
		from	pls_segurado
		where	nr_seq_intercambio = nr_seq_intercambio_w) alias1
	where (coalesce(dt_rescisao::text, '') = '' or dt_rescisao > fim_dia(dt_rescisao_p))
	and	pls_obter_se_benef_remido(nr_seq_segurado, dt_rescisao_p) = 'S';
	
	if (ie_remido_ativo_w = 'S') then
		select	max(coalesce(dt_rescisao, dt_rescisao_prog)) --Busca a maior data de rescisao de remido, para gerar a rescisao programada do contrato
		into STRICT	dt_resc_prog_remido_w
		from (SELECT	a.dt_rescisao,
				b.dt_rescisao dt_rescisao_prog,
				coalesce(b.ie_situacao, 'A') ie_situacao,
				a.nr_sequencia nr_seq_segurado
			FROM pls_segurado a
LEFT OUTER JOIN pls_rescisao_contrato b ON (a.nr_sequencia = b.nr_seq_segurado)
WHERE a.nr_seq_contrato	= nr_seq_contrato_w
			
union

			SELECT	a.dt_rescisao,
				b.dt_rescisao dt_rescisao_prog,
				coalesce(b.ie_situacao, 'A') ie_situacao,
				a.nr_sequencia nr_seq_segurado
			FROM pls_segurado a
LEFT OUTER JOIN pls_rescisao_contrato b ON (a.nr_sequencia = b.nr_seq_segurado)
WHERE a.nr_seq_intercambio 	= nr_seq_intercambio_w ) alias5
		where	ie_situacao = 'A'
		and	pls_obter_se_benef_remido(nr_seq_segurado, dt_rescisao_p) = 'S';
		
		if (coalesce(dt_resc_prog_remido_w::text, '') = '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1105648); --Existe(m) beneficiario(s) remido(s) sem data de rescisao ou rescisao programada. Favor verifique!
		end if;
		
		if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
			update	pls_contrato
			set	ie_exclusivo_benef_remido	= 'S',
				nm_usuario			= nm_usuario_p,
				dt_atualizacao			= clock_timestamp()
			where	nr_sequencia			= nr_seq_contrato_w;
		end if;
		
		insert	into	pls_rescisao_contrato(	nr_sequencia, nr_seq_contrato, ie_situacao,
				dt_solicitacao, nm_usuario_solicitacao, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				dt_rescisao, nr_seq_motivo_rescisao, nr_seq_causa_rescisao,
				dt_limite_utilizacao, ie_processo, ie_tipo_solicitante,
				ds_observacao, nr_seq_intercambio)
			values (nextval('pls_rescisao_contrato_seq'), nr_seq_contrato_w, 'A',
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				dt_resc_prog_remido_w, nr_seq_motivo_rescisao_w, nr_seq_causa_rescisao_w,
				dt_resc_prog_remido_w, 'M', 'T',
				wheb_mensagem_pck.get_texto(1105406,'DT_RESC_PROGRAMADA='||to_char(dt_resc_prog_remido_w,'dd/mm/rrrr')),nr_seq_intercambio_w); --Rescisao de contrato programada para #@DT_RESC_PROGRAMADA#@, devido a existencia de beneficiario remido ativo
		
		insert into pls_contrato_historico(nr_sequencia,
			cd_estabelecimento,
			nr_seq_contrato,
			nm_usuario,
			nm_usuario_nrec,
			dt_atualizacao,
			dt_historico,
			dt_atualizacao_nrec,
			ie_tipo_historico,
			ds_historico,
			ds_observacao,
			nr_seq_intercambio)
		values (nextval('pls_contrato_historico_seq'),
			cd_estabelecimento_p,
			nr_seq_contrato_w,
			nm_usuario_p,
			nm_usuario_p,
			clock_timestamp(),
			clock_timestamp(),
			clock_timestamp(),
			'1',
			wheb_mensagem_pck.get_texto(1105406,'DT_RESC_PROGRAMADA='||to_char(dt_resc_prog_remido_w,'dd/mm/rrrr')), --Rescisao de contrato programada para #@DT_RESC_PROGRAMADA#@, devido a existencia de beneficiario remido ativo
			ds_observacao_w,
			nr_seq_intercambio_w);
	else
		if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
			update	pls_contrato
			set	dt_rescisao_contrato	= dt_rescisa_ww,
				dt_limite_utilizacao	= dt_rescisa_ww,
				nr_seq_motivo_rescisao	= nr_seq_motivo_rescisao_w,
				ie_situacao		= '3',
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				nr_seq_causa_rescisao	= nr_seq_causa_rescisao_w
			where	nr_sequencia		= nr_seq_contrato_w;
			
			update	pls_contrato_pagador
			set	dt_rescisao			= dt_rescisa_ww,
				nr_seq_motivo_cancelamento	= nr_seq_motivo_rescisao_w,
				nm_usuario			= nm_usuario_p,
				dt_atualizacao			= clock_timestamp()
			where	nr_seq_contrato			= nr_seq_contrato_w
			and	coalesce(dt_rescisao::text, '') = '';
		else
			update	pls_intercambio
			set	dt_exclusao	= dt_rescisao_p,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia 	= nr_seq_intercambio_w;
			
			update	pls_contrato_pagador
			set	dt_rescisao			= dt_rescisa_ww,
				nr_seq_motivo_cancelamento	= nr_seq_motivo_rescisao_w,
				nm_usuario			= nm_usuario_p,
				dt_atualizacao			= clock_timestamp()
			where	nr_seq_pagador_intercambio 	= nr_seq_intercambio_w;
		end if;
		
		insert	into	pls_contrato_historico(	nr_sequencia, cd_estabelecimento, nr_seq_contrato,
				nm_usuario, nm_usuario_nrec, dt_atualizacao, dt_atualizacao_nrec,
				dt_historico, ie_tipo_historico, ds_historico,
				ds_observacao, nr_seq_intercambio)
			values (nextval('pls_contrato_historico_seq'), cd_estabelecimento_p, nr_seq_contrato_w,
				nm_usuario_p, nm_usuario_p, clock_timestamp(), clock_timestamp(),
				clock_timestamp(), '1', wheb_mensagem_pck.get_texto(1105006,'NR_SEQ_SOLICITACAO='||nr_seq_solicitacao_p),
				ds_observacao_w, nr_seq_intercambio_w);
	end if;

	if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
		CALL pls_gerar_multa_contratual(nr_seq_contrato_w, null, dt_rescisa_ww, nr_seq_solicitacao_p, cd_estabelecimento_p, nm_usuario_p);
	end if;
end if;

update	pls_solicitacao_rescisao
set	dt_rescisao		= dt_rescisa_ww,
	ie_status		= 3,
	ie_rescindir_contrato	= CASE WHEN ie_rescindir_contrato='P' THEN ie_rescindir_contrato_p  ELSE ie_rescindir_contrato END ,
	dt_atualizacao		= clock_timestamp(),
	nm_usuario		= nm_usuario_p,
	nm_usuario_efetivacao 	= nm_usuario_p,
	dt_efetivacao 		= clock_timestamp()
where	nr_sequencia		= nr_seq_solicitacao_p;

--A devolucao deve ser feita depois do update do campo PLS_SOLICITACAO_RESCISAO.DT_RESCISAO
for r_c03_w in c03 loop
	begin
	ie_gerar_devolucao_w	:= 'N';
	
	if (r_c03_w.nr_seq_regra_resc_fin IS NOT NULL AND r_c03_w.nr_seq_regra_resc_fin::text <> '') then
		select	coalesce(ie_devolucao_automatica, 'N')
		into STRICT	ie_devolucao_automatica_w
		from	pls_resc_fin_mens
		where	nr_sequencia = r_c03_w.nr_seq_regra_resc_fin;
		
		if (ie_devolucao_automatica_w = 'S') then
			select	count(1)
			into STRICT	qt_benef_devolucao_auto_w
			from	pls_solic_rescisao_benef a
			where	a.nr_seq_solicitacao = nr_seq_solicitacao_p
			and	exists (SELECT	1
					from	pls_motivo_cancelamento x
					where	x.nr_sequencia = a.nr_seq_motivo_rescisao
					and	coalesce(x.ie_permite_devolucao_autom, 'N') = 'N');
			
			if (qt_benef_devolucao_auto_w = 0) then
				ie_gerar_devolucao_w	:= 'S';
			end if;
		end if;
	end if;
	
	if (ie_gerar_devolucao_w = 'S') then
		CALL pls_solic_rescisao_fin_pck.iniciar_analise(r_c03_w.nr_seq_solicitacao_resc_fin, nm_usuario_p, cd_estabelecimento_p);
		CALL pls_solic_rescisao_fin_pck.gerar_devolucao(r_c03_w.nr_seq_solicitacao_resc_fin, nm_usuario_p, cd_estabelecimento_p);
		CALL pls_solic_rescisao_fin_pck.finalizar_analise(r_c03_w.nr_seq_solicitacao_resc_fin, nm_usuario_p, cd_estabelecimento_p);
	end if;
	end;
end loop;

CALL pls_envio_email_solic_resc(nr_seq_solicitacao_p, 2, cd_estabelecimento_p, nm_usuario_p);

if (nr_seq_protocolo_atend_w IS NOT NULL AND nr_seq_protocolo_atend_w::text <> '') then
	update	pls_protocolo_atendimento
	set	ie_status	= 3,
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_protocolo_atend_w;
	
	--Solicitacao de rescisao n #@NR_SEQ_SOLICITACAO#@ efetivada.
	CALL pls_gravar_log_prot_atend_hist(nr_seq_protocolo_atend_w, wheb_mensagem_pck.get_texto(1120677,'NR_SEQ_SOLICITACAO='||nr_seq_solicitacao_p), nm_usuario_p, 'N');
end if;

if (coalesce(ie_commit_p, 'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_efetivar_solic_rescisao ( nr_seq_solicitacao_p bigint, dt_rescisao_p timestamp, ie_rescindir_contrato_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_commit_p text, dt_fim_repasse_p timestamp default null) FROM PUBLIC;

