-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE desfazer_cot_compra ( nr_cot_compra_p bigint, nm_usuario_p text, ie_situacao_p text) AS $body$
DECLARE


dt_geracao_ordem_compra_w		timestamp;
nr_ordem_compra_w			bigint;
dt_aprovacao_w				timestamp;
dt_liberacao_w				timestamp;
nr_item_cot_compra_w			integer;
dt_limite_entrega_w				timestamp;
qt_material_w				double precision;
ds_lista_ordem_w			varchar(2000);
ds_hist_solic_compra_w			solic_compra_hist.ds_historico%type;
ds_titulo_w				solic_compra_hist.ds_titulo%type;
nr_solic_compra_w			bigint;
nr_item_solic_compra_w			bigint;

c01 CURSOR FOR
	SELECT	nr_ordem_compra
	from	cot_compra_forn_item
	where	nr_cot_compra = nr_cot_compra_p
	and	(nr_ordem_compra IS NOT NULL AND nr_ordem_compra::text <> '');

c02 CURSOR FOR
SELECT	distinct
	a.dt_limite_entrega,
	a.qt_material,
	a.nr_item_cot_compra
from	cot_compra b,
	cot_compra_item a
where	b.nr_cot_compra = a.nr_cot_compra
and	b.nr_cot_compra = nr_cot_compra_p
and	not exists (select	1
		from	cot_compra_item_entrega x
		where	x.nr_cot_compra = a.nr_cot_compra
		and	x.nr_item_cot_compra = a.nr_item_cot_compra);

c03 CURSOR FOR
SELECT	distinct nr_ordem_compra
from	ordem_compra a
where exists (	select	b.nr_ordem_compra
		from	ordem_compra_item b
		where	a.nr_ordem_compra = b.nr_ordem_compra
		and	b.nr_cot_compra = nr_cot_compra_p);

c04 CURSOR FOR
SELECT	distinct nr_solic_compra
from	solic_compra_item_agrup_v
where	nr_cot_compra = nr_cot_compra_p;

c05 CURSOR FOR
SELECT	nr_item_solic_compra
from	solic_compra_item_agrup_v
where	nr_solic_compra = nr_solic_compra_w
and	nr_cot_compra	= nr_cot_compra_p;


BEGIN

if (ie_situacao_p  ('L','A')) then

	open 	c01;
	loop
	fetch c01 into
		nr_ordem_compra_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		select	obter_data_ordem_compra(nr_ordem_compra_w,'L'),
			obter_data_ordem_compra(nr_ordem_compra_w,'A')
		into STRICT	dt_liberacao_w,
			dt_aprovacao_w
		;

		if	(ie_situacao_p = 'L' AND dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then
			/*(-20011,'Sem permissão para desfazer a cotação. A ordem de compra número ' || NR_ORDEM_COMPRA_W || ' já está liberada.' || CHR(13) || 'Verifique o parâmetro [21].');*/

			CALL wheb_mensagem_pck.exibir_mensagem_abort(185687,'NR_ORDEM_COMPRA_W='||NR_ORDEM_COMPRA_W);

		elsif	(ie_situacao_p = 'A' AND dt_aprovacao_w IS NOT NULL AND dt_aprovacao_w::text <> '') then
			/*(-20011,'Sem permissão para desfazer a cotação. A ordem de compra número ' || nr_ordem_compra_w || ' já está aprovada.' || CHR(13) || 'Verifique o parâmetro [21].');*/

			CALL wheb_mensagem_pck.exibir_mensagem_abort(185688,'NR_ORDEM_COMPRA_W='||NR_ORDEM_COMPRA_W);
		end if;
	end loop;
	close c01;
end if;

open C03;
loop
fetch C03 into
	nr_ordem_compra_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin

	ds_lista_ordem_w := substr(ds_lista_ordem_w || nr_ordem_compra_w || ', ',1,2000);

	end;
end loop;
close C03;

ds_lista_ordem_w := substr(ds_lista_ordem_w,1,length(ds_lista_ordem_w)-2);

select	dt_geracao_ordem_compra
into STRICT 	dt_geracao_ordem_compra_w
from	cot_compra
where	nr_cot_compra	 = nr_cot_compra_p;

if (dt_geracao_ordem_compra_w IS NOT NULL AND dt_geracao_ordem_compra_w::text <> '') then
	begin
	update	cot_compra
	set	dt_geracao_ordem_compra  = NULL,
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_cot_compra	= nr_cot_compra_p;

	update	cot_compra_forn_item
	set	nr_ordem_compra	 = NULL,
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where 	nr_cot_compra	= nr_cot_compra_p;

	update	cot_compra_solic_agrup
	set	nr_ordem_compra	 = NULL
	where	nr_cot_compra	= nr_cot_compra_p;

	update	processo_aprov_compra
	set	ie_aprov_reprov = 'B',
		ds_observacao = substr(ds_observacao || WHEB_MENSAGEM_PCK.get_texto(299460),1,2000)
	where	nr_sequencia in (
		SELECT	distinct(nr_seq_aprovacao)
		from	ordem_compra_item
		where	nr_ordem_compra in (
			SELECT	nr_ordem_compra
			from	ordem_compra_item
			where	nr_cot_compra = nr_cot_compra_p));

	delete from registro_integr_compras a
	where a.nr_ordem_compra in (	SELECT	b.nr_ordem_compra
					from	ordem_compra_item b
					where	a.nr_ordem_compra = b.nr_ordem_compra
					and	b.nr_cot_compra = nr_cot_compra_p);

	CALL compras_pck.set_is_oci_delete('N');
	begin
	delete FROM ordem_compra a
	where exists (
		SELECT	b.nr_ordem_compra
		from	ordem_compra_item b
		where	a.nr_ordem_compra = b.nr_ordem_compra
		and	b.nr_cot_compra = nr_cot_compra_p);
	end;
	exception
		when others then
		CALL compras_pck.set_is_oci_delete('S');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(266185, 'DS_ERRO=' || substr(sqlerrm,1,3000));
	end;
	CALL compras_pck.set_is_oci_delete('S');

	CALL gerar_historico_cotacao(nr_cot_compra_p,
				WHEB_MENSAGEM_PCK.get_texto(299463),
				substr(WHEB_MENSAGEM_PCK.get_texto(299470,'NM_USUARIO='||nm_usuario_p||
							';DS_DATA='||clock_timestamp()||
							';DS_LISTA='||ds_lista_ordem_w),1,2000),
				'S',
				nm_usuario_p);


end if;

update	cot_compra_item
set	nr_seq_cot_item_forn	 = NULL,
	nr_cot_venc_sis		 = NULL,
	nr_item_cot_venc_sis	 = NULL,
	cd_cgc_fornecedor_venc_sis	 = NULL,
	cd_cgc_fornecedor_venc_alt	 = NULL,
	dt_atualizacao		= clock_timestamp(),
	nm_usuario		= nm_usuario_p
where	nr_cot_compra		= nr_cot_compra_p;

update	cot_compra_forn_item
set 	vl_preco_liquido		 = NULL,
	vl_total_liquido_item		 = NULL,
	vl_presente		 = NULL,
	nr_ordem_compra		 = NULL,
	dt_atualizacao		= clock_timestamp(),
	nm_usuario		= nm_usuario_p
where	nr_cot_compra		= nr_cot_compra_p;

OPEN C02;
LOOP
FETCH C02 INTO
	dt_limite_entrega_w,
	qt_material_w,
	nr_item_cot_compra_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
	begin
	insert into cot_compra_item_entrega(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_cot_compra,
			nr_item_cot_compra,
			dt_entrega,
			qt_entrega,
			ds_observacao)
		values (nextval('cot_compra_item_entrega_seq'),
			clock_timestamp(),
			'Tasy',
			clock_timestamp(),
			'Tasy',
			nr_cot_compra_p,
			nr_item_cot_compra_w,
			dt_limite_entrega_w,
			qt_material_w,
			null);
	end;

END LOOP;
CLOSE C02;

open c04;
loop
fetch c04 into
	nr_solic_compra_w;
EXIT WHEN NOT FOUND; /* apply on c04 */
	begin

	update	solic_compra
	set	cd_motivo_baixa	 = NULL,
		dt_baixa	 = NULL
	where	nr_solic_compra	= nr_solic_compra_w;

	ds_titulo_w		:= substr(wheb_mensagem_pck.get_texto(336232),1,80);
	ds_hist_solic_compra_w	:= substr(wheb_mensagem_pck.get_texto(336313, 'NR_COT_COMPRA='||to_char(nr_cot_compra_p)),1,2000);

	insert into solic_compra_hist(
			nr_sequencia,
			nr_solic_compra,
			ds_historico,
			ds_titulo,
			dt_atualizacao,
			dt_historico,
			nm_usuario)
		values (nextval('solic_compra_hist_seq'),
			nr_solic_compra_w,
			ds_hist_solic_compra_w,
			ds_titulo_w,
			clock_timestamp(),
			clock_timestamp(),
			nm_usuario_p);


	open c05;
	loop
	fetch c05 into
		nr_item_solic_compra_w;
	EXIT WHEN NOT FOUND; /* apply on c05 */
		begin

		update	solic_compra_item
		set	cd_motivo_baixa		 = NULL,
			dt_baixa		 = NULL
		where	nr_solic_compra		= nr_solic_compra_w
		and	nr_item_solic_compra	= nr_item_solic_compra_w;

		end;
	end loop;
	close c05;
	end;
end loop;
close c04;

commit;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE desfazer_cot_compra ( nr_cot_compra_p bigint, nm_usuario_p text, ie_situacao_p text) FROM PUBLIC;

