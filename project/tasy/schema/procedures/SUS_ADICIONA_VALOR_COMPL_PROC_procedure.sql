-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_adiciona_valor_compl_proc ( nr_interno_conta_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

	 
nr_sequencia_w		bigint;
vl_adicional_w		double precision;
pr_anestesista_w 		bigint;
pr_medico_w		bigint;
vl_medico_adic_w		double precision;
vl_aneste_adic_w		double precision;
qt_aih_faixa_w		bigint;
ds_aih_faixa_w		varchar(5);
cd_pessoa_fisica_w	pessoa_fisica.cd_pessoa_fisica%type;

C01 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		CASE WHEN b.ie_complexidade_regra='P' THEN 300 WHEN b.ie_complexidade_regra='M' THEN 400 WHEN b.ie_complexidade_regra='G' THEN 500  ELSE 0 END , 
		coalesce(b.pr_anestesista,0), 
		coalesce(b.pr_medico,100) 
	from	procedimento_paciente a, 
		sus_regra_proc_adic_comp b 
	where	b.ie_situacao	= 'A' 
	and	b.ie_complexidade_regra = (	SELECT 	min(x.ie_complexidade_regra) 
					from	sus_regra_proc_adic_comp x 
					where	x.ie_situacao	= 'A' 
					and	x.cd_procedimento = b.cd_procedimento 
					and	x.ie_origem_proced = b.ie_origem_proced 
					and	x.cd_estabelecimento = b.cd_estabelecimento) 
	and	b.cd_estabelecimento = cd_estabelecimento_p 
	and	a.cd_procedimento = b.cd_procedimento 
	and	a.ie_origem_proced = b.ie_origem_proced 
	and	coalesce(a.cd_motivo_exc_conta::text, '') = '' 
	and	a.nr_interno_conta = nr_interno_conta_p 
	order by 1;
		
 

BEGIN 
 
ds_aih_faixa_w	:= substr(substr(SUS_obter_codigo_UF(obter_dados_pf_pj(null,obter_cgc_estabelecimento(cd_estabelecimento_p),'UF')),1,2) || substr(to_char(clock_timestamp(),'yy'),1,2) || '5',1,5);
 
select	count(*) 
into STRICT	qt_aih_faixa_w 
from	sus_aih_unif 
where	nr_interno_conta = nr_interno_conta_p 
and	substr(nr_aih,1,5) = ds_aih_faixa_w;
 
if (qt_aih_faixa_w > 0) then 
	begin 
	 
	open C01;
	loop 
	fetch C01 into	 
		nr_sequencia_w, 
		vl_adicional_w, 
		pr_anestesista_w, 
		pr_medico_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		 
		if (pr_anestesista_w > 0) then 
			begin		 
			vl_aneste_adic_w := (vl_adicional_w * (pr_anestesista_w/100));
			vl_medico_adic_w := (vl_adicional_w - vl_aneste_adic_w);
			end;
		else 
			vl_medico_adic_w := vl_adicional_w;		
		end if;
		 
		if (vl_medico_adic_w > 0) then 
			begin 
			 
			update 	procedimento_paciente 
			set 	vl_medico = (vl_medico + vl_medico_adic_w), 
				vl_procedimento = (vl_procedimento + vl_adicional_w), 
				nm_usuario = nm_usuario_p, 
				dt_atualizacao = clock_timestamp() 
			where 	nr_sequencia = nr_sequencia_w;
			 
			update	sus_valor_proc_paciente 
			set 	vl_ato_medico = (vl_ato_medico + vl_medico_adic_w), 
				vl_medico = (vl_medico + vl_adicional_w), 
				nm_usuario = nm_usuario_p, 
				dt_atualizacao = clock_timestamp() 
			where 	nr_sequencia = nr_sequencia_w;
			 
			if (vl_aneste_adic_w > 0) then 
				begin 
				 
				update 	procedimento_participante 
				set 	vl_conta = (vl_conta + vl_aneste_adic_w), 
					vl_participante = (vl_participante + vl_aneste_adic_w), 
					nm_usuario = nm_usuario_p, 
					dt_atualizacao = clock_timestamp() 
				where 	nr_sequencia = nr_sequencia_w 
				and	sus_obter_indicador_equipe(ie_funcao) = '6';
				 
				update	sus_valor_proc_paciente 
				set 	vl_ato_anestesista = (vl_ato_anestesista + vl_aneste_adic_w) 
				where 	nr_sequencia = nr_sequencia_w;
				 
				end;
			end if;
			 
			if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
			 
			end;
		end if;	
			 
		end;
	end loop;
	close C01;
 
	end;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_adiciona_valor_compl_proc ( nr_interno_conta_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

