-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_fluxo_caixa_prot_conv (nr_documento_p bigint, ie_origem_info_p text, ds_erro_p INOUT text) AS $body$
DECLARE


/* -------- Origem da Informação -------- */


/* -- Identifica de onde vem a informação que será gerada no fluxo de caixa -- 
Para protocolo convênio serão utilizadas as seguintes origens: 
PC - Protocolo convênio
*/
ie_fim_semana_w			parametro_fluxo_caixa.ie_tratar_fim_semana%type;
ie_protocolo_conv_w		parametro_fluxo_caixa.ie_protocolo_conv%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
cd_conta_financ_w		conta_financeira.cd_conta_financ%type;
cd_cgc_w			pessoa_juridica.cd_cgc%type;
cd_moeda_empresa_w		moeda.cd_moeda%type;
dt_referencia_w			timestamp;
ds_erro_w			varchar(4000);

c01 CURSOR FOR
	SELECT	'PC' ie_integracao,
		a.dt_vencimento,
		0 cd_conta_financ,
		coalesce(b.vl_conta,0) vl_conta,
		a.cd_convenio,
		a.nr_seq_protocolo,
		a.cd_estabelecimento,
		coalesce(k.cd_estab_financeiro,a.cd_estabelecimento) cd_estab_financeiro,
		k.cd_empresa,
		a.ds_observacao
	from	conta_paciente b,
		protocolo_convenio a,
		estabelecimento k
	where	a.nr_seq_protocolo	= b.nr_seq_protocolo
	and	a.cd_estabelecimento	= k.cd_estabelecimento
	and	a.nr_seq_protocolo	= nr_documento_p
	and	((a.ie_status_protocolo = 1 AND ie_protocolo_conv_w = 'S') or
		 ((a.ie_status_protocolo in (1,3)) and (ie_protocolo_conv_w = 'A')))
	and	coalesce(b.ie_cancelamento::text, '') = ''
	and	not exists (SELECT 1 from titulo_receber x where x.nr_seq_protocolo = a.nr_seq_protocolo or x.nr_interno_conta = b.nr_interno_conta);

	
vet01		c01%rowtype;


BEGIN
	/* Busca o estabelecimento do cartão para buscar os parâmetros do fluxo. */

	begin
		select	cd_estabelecimento,
			obter_moeda_padrao_empresa(cd_estabelecimento,'E')
		into STRICT	cd_estabelecimento_w,
			cd_moeda_empresa_w
		from	protocolo_convenio
		where	nr_seq_protocolo = nr_documento_p;
	exception when no_data_found then
		/* Movimento financeiro não encontrado ou sem estabelecimento informado. */

		CALL wheb_mensagem_pck.exibir_mensagem_abort(857488);
	end;
	
	/* Busca os parâmetros do fluxo de caixa necessários para esta informação. */

	begin
		select	coalesce(max(IE_TRATAR_FIM_SEMANA),'N'),
			coalesce(max(ie_protocolo_conv),'N')
		into STRICT 	ie_fim_semana_w,
			ie_protocolo_conv_w
		from	parametro_fluxo_caixa
		where	cd_estabelecimento	= cd_estabelecimento_w;
	exception when no_data_found then
		/* Parâmetros do fluxo de caixa não cadastrados! */

		CALL wheb_mensagem_pck.exibir_mensagem_abort(197611);
	end;
	
	/* Inicia a geração das informações do cheques a receber para o fluxo realizado. */

	if (ie_origem_info_p = 'PC' and (nr_documento_p IS NOT NULL AND nr_documento_p::text <> '')) then
		begin
			/* Remove os registros da baixa que está sendo processada para incluir novamente */

			CALL remove_docto_fluxo_caixa(nr_documento_p,null,ie_origem_info_p,null,'S');
			
			open c01;
			loop
			fetch c01 into
				vet01;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin
					
					dt_referencia_w := vet01.dt_vencimento;
					
					if (ie_fim_semana_w = 'S') then
						if (pkg_date_utils.start_of(vet01.dt_vencimento,'MONTH',0) <>
							pkg_date_utils.start_of(obter_proximo_dia_util(vet01.cd_estabelecimento, vet01.dt_vencimento),'MONTH',0)) then
							dt_referencia_w := obter_dia_anterior_util(vet01.cd_estabelecimento, vet01.dt_vencimento);
						else
							dt_referencia_w	:= obter_proximo_dia_util(vet01.cd_estabelecimento, vet01.dt_vencimento);
						end if;
					end if;
					
					cd_conta_financ_w := vet01.cd_conta_financ;
					
					if (vet01.cd_conta_financ = 0) and (vet01.vl_conta <> 0) then

						select	max(cd_cgc) /*aamfirmo 17/01/2013 os  536096 -  nao passava o cd_cgc para obter_conta_financeira e nunca buscava o tipo de pessoa desta pj.*/
						into STRICT 	cd_cgc_w
						from 	convenio
						where	cd_convenio	= vet01.cd_convenio;
						
						cd_conta_financ_w := obter_conta_financeira(	'E', vet01.cd_estabelecimento, 0, 0, 0, 0, vet01.cd_convenio, cd_cgc_w, null, cd_conta_financ_w, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, cd_moeda_empresa_w);
					end if;
					
					if (cd_conta_financ_w <> 0) then
						
						CALL gravar_fluxo_caixa_docto(dt_referencia_w,
									cd_conta_financ_w,
									vet01.cd_empresa,
									vet01.cd_estabelecimento,
									vet01.cd_estab_financeiro,
									cd_moeda_empresa_w,
									vet01.ds_observacao,
									'R',
									vet01.ie_integracao,
									'Tasy',
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									vet01.nr_seq_protocolo,
									null,
									null,
									null,
									null,
									null,
									vet01.vl_conta);
					end if;
				exception when others then
					ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
				end;
			end loop;
			close c01;
		exception when others then
			ds_erro_w := substr(ds_erro_w || ' ' || sqlerrm, 0, 4000);
		end;
	end if;
	commit;
	ds_erro_p := ds_erro_w;
	

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_fluxo_caixa_prot_conv (nr_documento_p bigint, ie_origem_info_p text, ds_erro_p INOUT text) FROM PUBLIC;

