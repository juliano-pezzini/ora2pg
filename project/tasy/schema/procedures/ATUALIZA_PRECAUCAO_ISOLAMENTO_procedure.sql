-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualiza_precaucao_isolamento ( cd_pessoa_fisica_p text, nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_atendimento_w	bigint;
nr_precaucao_w		bigint;
nr_seq_precaucao_w	bigint;
cd_microorganismo_w	bigint;
cd_topografia_w		bigint;
qt_valida_isolamento_w	bigint;
dt_entrada_w		timestamp;

ie_copia_data_fim_w	varchar(1);

C01 CURSOR FOR
	SELECT 	b.*
	from  	atendimento_paciente a,
		atendimento_precaucao b
	where	a.nr_atendimento = b.nr_atendimento
	and	exists (SELECT 	1
			from    atend_precaucao_micro c,
				cih_microorganismo d
			where 	c.cd_microorganismo 	= d.cd_microorganismo
			and	b.nr_sequencia 		= c.nr_seq_atend_precaucao
			and	coalesce(d.ie_isolamento_permanente,'N') = 'S')
	and 	a.nr_atendimento = (	select	max(nr_atendimento)
			        	from	atendimento_paciente
					where	cd_pessoa_fisica = cd_pessoa_fisica_p
					and	nr_atendimento 	<> nr_atendimento_p)
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_p
	and coalesce(b.nr_atend_copia::text, '') = '';
c01_w c01%rowtype;

C02 CURSOR FOR
	SELECT 	c.cd_microorganismo,
		c.cd_topografia
	from    atend_precaucao_micro c,
		cih_microorganismo d
	where 	c.cd_microorganismo 	= d.cd_microorganismo
	and	nr_seq_precaucao_w 	= c.nr_seq_atend_precaucao
	and	coalesce(d.ie_isolamento_permanente,'N') = 'S';


BEGIN

ie_copia_data_fim_w := Obter_param_Usuario(916, 962, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_copia_data_fim_w);
If (ie_copia_data_fim_w = 'S') and (obter_funcao_ativa <> 916) then
	ie_copia_data_fim_w := 'N';
end if;

select	max(dt_entrada)
into STRICT	dt_entrada_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_p;

if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then

	select	count(*)
	into STRICT	qt_valida_isolamento_w
	from  	atendimento_paciente a,
		atendimento_precaucao b,
		atend_precaucao_micro c,
		cih_microorganismo d
	where	a.nr_atendimento = b.nr_atendimento
	and	b.nr_sequencia = c.nr_seq_atend_precaucao
	and	c.cd_microorganismo = d.cd_microorganismo
	and	coalesce(d.ie_isolamento_permanente,'N') = 'S'
	and 	a.nr_atendimento = (	SELECT	max(nr_atendimento)
			        	from	atendimento_paciente
					where	cd_pessoa_fisica = cd_pessoa_fisica_p
					and	nr_atendimento <> nr_atendimento_p)
	and	a.cd_pessoa_fisica = cd_pessoa_fisica_p;

	if (qt_valida_isolamento_w > 0) then
		update	atendimento_paciente
		set	ie_paciente_isolado 	= 'S',
			nm_usuario 		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_atendimento 		= nr_atendimento_p;
	end if;
open C01;
loop
fetch C01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	nr_seq_precaucao_w := c01_w.nr_sequencia;

	select	nextval('atendimento_precaucao_seq')
	into STRICT	nr_precaucao_w
	;

	insert into atendimento_precaucao(NR_SEQUENCIA,
					DT_ATUALIZACAO,
					NM_USUARIO,
					DT_ATUALIZACAO_NREC,
					NM_USUARIO_NREC,
					NR_SEQ_PRECAUCAO,
					DT_INICIO,
					DT_TERMINO,
					NR_ATENDIMENTO,
					DT_REGISTRO,
					NR_SEQ_MOTIVO_ISOL,
					IE_SITUACAO,
					DT_LIBERACAO,
					DT_INATIVACAO,
					NM_USUARIO_INATIVACAO,
					DS_JUSTIFICATIVA,
					CD_MICROORGANISMO,
					CD_TOPOGRAFIA,
					DT_FINAL_PRECAUCAO,
					CD_MEDICO_SOLIC,
					NR_SEQ_MOVTO_TERMINO,
					NM_USUARIO_FIM,
					NM_USUARIO_LIB_ISO,
					DS_JUST_FIM_PREC,
					DS_OBSERVACAO)
			values (nr_precaucao_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					c01_w.NR_SEQ_PRECAUCAO,
					coalesce(dt_entrada_w, c01_w.DT_INICIO),
					CASE WHEN ie_copia_data_fim_w='S' THEN  c01_w.DT_TERMINO  ELSE null END ,
					nr_atendimento_p,
					c01_w.DT_REGISTRO,
					c01_w.NR_SEQ_MOTIVO_ISOL,
					c01_w.IE_SITUACAO,
					c01_w.DT_LIBERACAO,
					c01_w.DT_INATIVACAO,
					c01_w.NM_USUARIO_INATIVACAO,
					c01_w.DS_JUSTIFICATIVA,
					c01_w.CD_MICROORGANISMO,
					c01_w.CD_TOPOGRAFIA,
					CASE WHEN ie_copia_data_fim_w='S' THEN  c01_w.DT_FINAL_PRECAUCAO  ELSE null END ,
					c01_w.CD_MEDICO_SOLIC,
					c01_w.NR_SEQ_MOVTO_TERMINO,
					CASE WHEN ie_copia_data_fim_w='S' THEN  c01_w.NM_USUARIO_FIM  ELSE null END ,
					c01_w.NM_USUARIO_LIB_ISO,
					CASE WHEN ie_copia_data_fim_w='S' THEN  c01_w.DS_JUST_FIM_PREC  ELSE null END ,
					c01_w.DS_OBSERVACAO);

	update	atendimento_precaucao
	set	nr_atend_copia = nr_atendimento_p
	where	nr_sequencia = nr_seq_precaucao_w;

	open C02;
	loop
	fetch C02 into
		cd_microorganismo_w,
		cd_topografia_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		insert into atend_precaucao_micro(NR_SEQUENCIA,
							DT_ATUALIZACAO,
							NM_USUARIO,
							DT_ATUALIZACAO_NREC,
							NM_USUARIO_NREC,
							NR_SEQ_ATEND_PRECAUCAO,
							CD_MICROORGANISMO,
							CD_TOPOGRAFIA)
					values (nextval('atend_precaucao_micro_seq'),
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_precaucao_w,
							cd_microorganismo_w,
							cd_topografia_w);
		end;
	end loop;
	close C02;

	end;
end loop;
close C01;

end if;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualiza_precaucao_isolamento ( cd_pessoa_fisica_p text, nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;

