-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_analise_glosar_atend ( nr_seq_analise_p bigint, nr_seq_mot_liberacao_p bigint, ds_parecer_p text, nr_seq_grupo_atual_p bigint, ie_obriga_parecer_p text, ie_obriga_ocorrencia_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_retorno_w			varchar(4000);
nr_seq_conta_w			bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_proc_partic_w		bigint;
qt_glosa_w			bigint;
qt_glosa_ativa_w		bigint;
nr_seq_conta_glosa_w		bigint;
qt_proc_w			bigint;
qt_proc_glosa_w			bigint;
qt_mat_w			bigint;
qt_mat_glosa_w			bigint;
nr_seq_grupo_w			pls_auditoria_conta_grupo.nr_seq_grupo%type;
nr_seq_ordem_w			pls_auditoria_conta_grupo.nr_seq_ordem%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_conta	a
	where	a.nr_seq_analise	= nr_seq_analise_p
	and	a.ie_status		<> 'C';
	
c02 CURSOR FOR
	SELECT	b.nr_sequencia
	from	pls_conta_glosa b,
		pls_conta_proc a,
		tiss_motivo_glosa c
	where	a.nr_sequencia	= b.nr_seq_conta_proc
	and	c.nr_sequencia = b.nr_seq_motivo_glosa
	and	a.nr_seq_conta	= nr_seq_conta_w
	and	c.cd_motivo_tiss not in ('1705','1706')
	
union all

	SELECT	b.nr_sequencia
	from	pls_conta_glosa b,
		pls_conta_mat a,
		tiss_motivo_glosa c
	where	a.nr_sequencia = b.nr_seq_conta_mat
	and	c.nr_sequencia = b.nr_seq_motivo_glosa
	and	a.nr_seq_conta	= nr_seq_conta_w
	and	c.cd_motivo_tiss not in ('1705','1706');

C03 CURSOR FOR
	SELECT	nr_seq_grupo,
		nr_seq_ordem
	from	pls_auditoria_conta_grupo
	where	nr_seq_analise = nr_seq_analise_p
	order by nr_seq_ordem;
	

BEGIN
select	count(1)
into STRICT	qt_glosa_w
from	w_pls_analise_glosa_ocor	a
where	a.nr_seq_analise	= nr_seq_analise_p
and	a.nm_usuario		= nm_usuario_p;

select	count(1)
into STRICT	qt_glosa_ativa_w
from	w_pls_analise_glosa_ocor	a
where	a.nr_seq_analise	= nr_seq_analise_p
and	a.nm_usuario		= nm_usuario_p
and	a.ie_situacao		= 'A';

if (coalesce(qt_glosa_ativa_w,0) = 0)	then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(253759);
end if;

open C01;
loop
fetch C01 into	
	nr_seq_conta_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	update 	pls_conta_proc
	set 	ie_status = 'P'
	where	nr_seq_conta = nr_seq_conta_w;
	
	update 	pls_conta_mat
	set	ie_status = 'P'
	where	nr_seq_conta = nr_seq_conta_w;
	
	if (qt_glosa_w > 0) then
		update	pls_ocorrencia_benef	o
		set	ie_situacao		= 'I',
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			ie_forma_inativacao	= CASE WHEN ie_forma_inativacao='S' THEN 'US' WHEN ie_forma_inativacao='US' THEN 'US'  ELSE 'U' END
		where	nr_seq_conta		= nr_seq_conta_w
		and	not exists (SELECT 1
					from	pls_conta_glosa 	g,
						tiss_motivo_glosa	t
					where	g.nr_sequencia	= o.nr_seq_glosa
					and	g.nr_seq_motivo_glosa = t.nr_sequencia
					and	cd_motivo_tiss in ('1705','1706'));

		open c02;
		loop
		fetch c02 into	
			nr_seq_conta_glosa_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			update	pls_conta_glosa
			set	ie_situacao		= 'I',
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				ie_forma_inativacao	= CASE WHEN ie_forma_inativacao='S' THEN 'US' WHEN ie_forma_inativacao='US' THEN 'US'  ELSE 'U' END
			where	nr_sequencia		= nr_seq_conta_glosa_w;
			end;
		end loop;
		close c02;
		
		update	pls_conta_glosa
		set	ie_situacao		= 'I',
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			ie_forma_inativacao	= CASE WHEN ie_forma_inativacao='S' THEN 'US' WHEN ie_forma_inativacao='US' THEN 'US'  ELSE 'U' END
		where	nr_seq_conta		= nr_seq_conta_w
		and	nr_seq_motivo_glosa not in (	SELECT	nr_sequencia
							from	tiss_motivo_glosa
							where	cd_motivo_tiss in ('1705','1706'));
	end if;
	
	CALL pls_analise_glosar_item(nr_seq_analise_p,
				nr_seq_conta_w,
				null,--nr_seq_conta_proc_w,
				null,--nr_seq_conta_mat_w,
				null,--nr_seq_proc_partic_w,
				null,
				nr_seq_mot_liberacao_p,
				ds_parecer_p,
				cd_estabelecimento_p,
				nr_seq_grupo_atual_p,
				ie_obriga_parecer_p,
				ie_obriga_ocorrencia_p,
				'N',
				'N',
				nm_usuario_p,
				null,
				'S',
				'S');
				
	--pls_glosar_item_conta(nr_seq_conta_w, 0, 0, nm_usuario_p, cd_estabelecimento_p);
	end;
end loop;
close C01;
/*Necessário abrir duas vezes o cursor a  primeira irá ativar a glosa inserida pelo grupo auditor e o segundo irá encerrar o fluxo de análise*/

open C01;
loop
fetch C01 into	
	nr_seq_conta_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	open C03;
	loop
	fetch C03 into	
		nr_seq_grupo_w,
		nr_seq_ordem_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		ds_retorno_w := pls_finalizar_analise_grupo(	nr_seq_analise_p, nm_usuario_p, nr_seq_grupo_w, 'S', 'S', cd_estabelecimento_p, 'N', 'S', 'S', 'G', ds_retorno_w);
		end;
	end loop;
	close C03;
	
	select	count(1),
		sum(CASE WHEN a.ie_glosa='S' THEN  1  ELSE 0 END )
	into STRICT	qt_proc_w,
		qt_proc_glosa_w
	from	pls_conta_proc	a
	where	a.nr_seq_conta	= nr_seq_conta_w;

	select	count(1),
		sum(CASE WHEN a.ie_glosa='S' THEN  1  ELSE 0 END )
	into STRICT	qt_mat_w,
		qt_mat_glosa_w
	from	pls_conta_mat	a
	where	a.nr_seq_conta	= nr_seq_conta_w;

	if (qt_proc_w = coalesce(qt_proc_glosa_w, 0)) and (qt_mat_w = coalesce(qt_mat_glosa_w, 0)) then
		update	pls_conta
		set	ie_glosa	= 'S'
		where	nr_sequencia	= nr_seq_conta_w;

	end if;
	end;
end loop;
close C01;

CALL pls_inserir_hist_analise(null, nr_seq_analise_p, 28, null, 'A', null, null, 'Todas as contas da análise foram liberadas sem pagamento.', nr_seq_grupo_atual_p, nm_usuario_p, cd_estabelecimento_p);

CALL pls_alterar_status_analise_cta(nr_seq_analise_p, 'L', 'PLS_ANALISE_GLOSAR_ATEND', nm_usuario_p, cd_estabelecimento_p);

ds_retorno_w := pls_fechar_conta_sem_aud(nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p, 'N', ds_retorno_w);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_analise_glosar_atend ( nr_seq_analise_p bigint, nr_seq_mot_liberacao_p bigint, ds_parecer_p text, nr_seq_grupo_atual_p bigint, ie_obriga_parecer_p text, ie_obriga_ocorrencia_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

