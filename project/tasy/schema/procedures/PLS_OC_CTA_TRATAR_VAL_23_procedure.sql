-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_23 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


ds_observacao_w		varchar(32000);
ie_valida_w		varchar(1);

tb_selecao_w		dbms_sql.number_table;
qt_excedido_w		dbms_sql.number_table;
tb_observacao_w		dbms_sql.varchar2_table;
tb_valido_w		dbms_sql.varchar2_table;
dados_validacao_w	pls_tipos_ocor_pck.dados_regra_val_util_item;

dados_conta_proc_w	pls_tipos_ocor_pck.dados_conta_proc;
dados_conta_mat_w	pls_tipos_ocor_pck.dados_conta_mat;
i			integer;
dados_ret_val_23_w	pls_tipos_ocor_pck.dados_ret_val_23;
dados_ret_val_mat_23_w	pls_tipos_ocor_pck.dados_ret_val_23;

-- Informacoes da validacao de situacao inativa do prestador
C01 CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_validacao,
		a.qt_liberada,
		a.qt_tipo_quantidade,
		a.ie_tipo_qtde,
		a.ie_somar_estrutura,
		a.ie_qt_lib_posterior,
		a.nr_seq_estrutura,
		a.ie_regra_qtde,
		a.ie_tipo_pessoa_qtde,
		a.nr_seq_grau_partic,
		a.ie_mesmo_medico,
		a.ie_mesma_especialidade,
		a.ie_mesmo_cid,
		a.ie_mesma_categoria_cid,
		a.ie_busca_medico_nota_servico,
		a.ie_medico_prestador,
		coalesce(a.ie_grau_participacao, 'N') ie_grau_participacao,
		coalesce(a.ie_campo_dt_validar, 'E') ie_campo_dt_validar,
		coalesce(a.ie_medico_consistencia, 'C') ie_medico_consistencia,
		coalesce(a.ie_guia_diferente, 'N') ie_guia_diferente,
		coalesce(a.ie_mesma_via_acesso,'N') ie_mesma_via_acesso
	from	pls_oc_cta_val_util_item a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

-- lista todos os procedimentos que precisam ser validados
c_proc CURSOR(	nr_id_transacao_pc	 pls_oc_cta_selecao_ocor_v.nr_id_transacao%type) FOR
	SELECT	a.nr_sequencia nr_seq_selecao,
		a.nr_seq_conta,
		a.nr_seq_conta_proc,
		c.cd_guia_imp,
		c.cd_guia_referencia,
		c.cd_medico_executor_imp,
		c.cd_medico_executor,
		c.nr_seq_segurado,
		c.nr_seq_prestador_exec_imp,
		c.nr_seq_prestador_exec,
		c.cd_procedimento,
		c.cd_procedimento_imp,
		c.ie_origem_proced,
		c.dt_procedimento,
		c.dt_procedimento_imp,
		c.qt_ok,
		c.nr_seq_proc_ref,
		c.nr_seq_participante_hi,
		c.ie_tipo_conta,
		c.cd_cid_principal_conta,
		c.cd_cid_principal_conta_imp,
		c.cd_cat_cid_principal_conta,
		c.cd_cat_cid_principal_conta_imp,
		c.nr_seq_cbo_saude,
		c.nr_seq_cbo_saude_imp,
		c.nr_seq_nota_cobranca,
		c.nr_sequencia,
		c.sg_cons_prof_prest_nota_serv,
		c.nr_cons_prof_prest_nota_serv,
		c.sg_uf_cons_prest_nota_serv,
		c.ie_origem_conta,
		c.dt_procedimento_real,
		coalesce(c.nr_seq_grau_partic_conta, c.nr_seq_grau_part_participantes) nr_seq_grau_partic_conta ,
		c.nr_seq_grau_partic_imp,
		c.ie_tipo_guia,
		c.qt_procedimento_imp,
		c.ie_via_acesso
	from	pls_oc_cta_selecao_ocor_v	a,
		pls_conta_proc_ocor_v		c
	where	a.nr_id_transacao	= nr_id_transacao_pc
	and	a.ie_valido		= 'S'
	and	c.nr_sequencia		= a.nr_seq_conta_proc
	order by c.dt_procedimento, c.cd_procedimento, c.ie_origem_proced;
	
-- Materiais que foram filtrados na ocorrencia
c_mat CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type) FOR
	SELECT	a.nr_sequencia nr_seq_selecao,
		a.nr_seq_conta,
		a.nr_seq_conta_mat,
		c.cd_guia_imp,
		c.cd_guia_referencia,
		c.cd_medico_executor_imp,
		c.cd_medico_executor,
		c.nr_seq_segurado,
		c.nr_seq_prestador_exec_imp,
		c.nr_seq_prestador_exec,
		c.nr_seq_material,
		c.dt_atendimento,
		c.dt_atendimento_imp,
		c.qt_ok,
		c.cd_cid_principal_conta,
		c.cd_cat_cid_principal_conta,
		c.nr_seq_cbo_saude,
		c.ie_tipo_guia,
		c.ie_tipo_conta,
		c.qt_material_imp
	from	pls_oc_cta_selecao_ocor_v	a,
		pls_conta_mat_ocor_v		c
	where	a.nr_id_transacao	= nr_id_transacao_pc
	and	a.ie_valido		= 'S'
	and	c.nr_sequencia		= a.nr_seq_conta_mat
	order by c.dt_atendimento, c.nr_seq_material;	

BEGIN

	-- Deve ter a informacao da regra para que a validacao seja aplicada
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then
	
	CALL pls_gerencia_upd_obj_pck.atualizar_objetos('tasy', 'PLS_OC_CTA_TRATAR_VAL_23', 'PLS_ESTRUTURA_OCOR_TM');
	
	-- Busca os dados da regra de validacao conforme montado pelo usuario
	for	r_C01_w in C01(dados_regra_p.nr_sequencia) loop
	
		-- Alimenta os dados da regra
		dados_validacao_w.nr_sequencia				:= r_C01_w.nr_seq_validacao;
		dados_validacao_w.qt_liberada				:= r_C01_w.qt_liberada;
		dados_validacao_w.qt_tipo_quantidade		:= r_C01_w.qt_tipo_quantidade;
		dados_validacao_w.ie_qt_lib_posterior		:= r_C01_w.ie_qt_lib_posterior;
		dados_validacao_w.ie_somar_estrutura		:= r_C01_w.ie_somar_estrutura;
		dados_validacao_w.nr_seq_estrutura			:= r_C01_w.nr_seq_estrutura;
		dados_validacao_w.nr_seq_grau_partic		:= r_C01_w.nr_seq_grau_partic;
		dados_validacao_w.ie_tipo_qtde				:= r_C01_w.ie_tipo_qtde;
		dados_validacao_w.ie_tipo_pessoa_qtde		:= r_C01_w.ie_tipo_pessoa_qtde;
		dados_validacao_w.ie_regra_qtde				:= r_C01_w.ie_regra_qtde;
		dados_validacao_w.ie_mesmo_medico			:= r_C01_w.ie_mesmo_medico;
		dados_validacao_w.ie_mesma_especialidade	:= r_C01_w.ie_mesma_especialidade;
		dados_validacao_w.ie_mesmo_cid				:= r_C01_w.ie_mesmo_cid;
		dados_validacao_w.ie_mesma_categoria_cid	:= r_C01_w.ie_mesma_categoria_cid;
		dados_validacao_w.ie_busca_medico_nota_servico	:= r_C01_w.ie_busca_medico_nota_servico;
		dados_validacao_w.ie_medico_prestador		:= r_C01_w.ie_medico_prestador;
		dados_validacao_w.ie_grau_participacao		:= r_c01_w.ie_grau_participacao;
		dados_validacao_w.ie_campo_dt_validar		:= r_c01_w.ie_campo_dt_validar;
		dados_validacao_w.ie_medico_consistencia	:= r_c01_w.ie_medico_consistencia;
		dados_validacao_w.ie_guia_diferente			:= r_c01_w.ie_guia_diferente;
		dados_validacao_w.ie_mesma_via_acesso		:= r_c01_w.ie_mesma_via_acesso;
		
		-- Deve ter informacao de quantidade liberada para aplicar a regra
		if (dados_validacao_w.qt_liberada IS NOT NULL AND dados_validacao_w.qt_liberada::text <> '') then
		
			-- Tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
			CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);
			
			-- inicio tratamentos para procedimento
			i := 0;
			tb_selecao_w.delete;
			tb_observacao_w.delete;
			tb_valido_w.delete;
			qt_excedido_w.delete;
			-- busca todos os procedimentos que precisam ser validados
			for r_c_proc_w in c_proc(nr_id_transacao_p) loop
				
				-- inicializa os dados
				ie_valida_w					:= 'S';
				dados_conta_proc_w.nr_sequencia			:= r_c_proc_w.nr_sequencia;
				dados_conta_proc_w.nr_seq_conta			:= r_c_proc_w.nr_seq_conta;
				dados_conta_proc_w.nr_seq_conta_proc		:= r_c_proc_w.nr_seq_conta_proc;
				dados_conta_proc_w.cd_guia_imp			:= r_c_proc_w.cd_guia_imp;
				dados_conta_proc_w.cd_guia_referencia		:= r_c_proc_w.cd_guia_referencia;
				dados_conta_proc_w.nr_seq_prestador_exec_imp	:= r_c_proc_w.nr_seq_prestador_exec_imp;
				dados_conta_proc_w.nr_seq_prestador_exec	:= r_c_proc_w.nr_seq_prestador_exec;
				dados_conta_proc_w.nr_seq_segurado		:= r_c_proc_w.nr_seq_segurado;
				dados_conta_proc_w.cd_medico_executor_imp	:= r_c_proc_w.cd_medico_executor_imp;
				dados_conta_proc_w.cd_medico_executor		:= r_c_proc_w.cd_medico_executor;
				dados_conta_proc_w.dt_procedimento		:= r_c_proc_w.dt_procedimento;	
				dados_conta_proc_w.dt_procedimento_imp		:= r_c_proc_w.dt_procedimento_imp;
				dados_conta_proc_w.cd_procedimento		:= r_c_proc_w.cd_procedimento;		
				dados_conta_proc_w.cd_procedimento_imp		:= r_c_proc_w.cd_procedimento_imp;		
				dados_conta_proc_w.ie_origem_proced		:= r_c_proc_w.ie_origem_proced;
				dados_conta_proc_w.ie_tipo_conta		:= r_c_proc_w.ie_tipo_conta;
				dados_conta_proc_w.nr_seq_proc_ref		:= r_c_proc_w.nr_seq_proc_ref;
				dados_conta_proc_w.nr_seq_participante_hi	:= r_c_proc_w.nr_seq_participante_hi;
				dados_conta_proc_w.cd_cid			:= r_c_proc_w.cd_cid_principal_conta;
				dados_conta_proc_w.cd_cat_cid			:= r_c_proc_w.cd_cat_cid_principal_conta;
				dados_conta_proc_w.nr_seq_cbo_saude		:= r_c_proc_w.nr_seq_cbo_saude;
				dados_conta_proc_w.nr_seq_nota_cobranca		:= r_c_proc_w.nr_seq_nota_cobranca;
				dados_conta_proc_w.sg_cons_prof_prest_nota_serv	:= r_c_proc_w.sg_cons_prof_prest_nota_serv;
				dados_conta_proc_w.nr_cons_prof_prest_nota_serv	:= r_c_proc_w.nr_cons_prof_prest_nota_serv;
				dados_conta_proc_w.sg_uf_cons_prest_nota_serv	:= r_c_proc_w.sg_uf_cons_prest_nota_serv;
				dados_conta_proc_w.ie_origem_conta		:= r_c_proc_w.ie_origem_conta;
				dados_conta_proc_w.nr_seq_grau_partic_conta	:= r_c_proc_w.nr_seq_grau_partic_conta;
				dados_conta_proc_w.nr_seq_grau_partic_imp	:= r_c_proc_w.nr_seq_grau_partic_imp;
				dados_conta_proc_w.ie_tipo_guia			:= r_c_proc_w.ie_tipo_guia;
				dados_conta_proc_w.qt_procedimento_imp 		:= r_c_proc_w.qt_procedimento_imp;
				dados_conta_proc_w.ie_via_acesso            := r_c_proc_w.ie_via_acesso;
				
				-- Se a conta for de intercambio, nao tiver beneficiario informado e o 

				-- o campo "Restringe mesmo beneficiario" da regra estiver marcodo, 

				-- a conta nao e valida para a regra
				if (dados_conta_proc_w.ie_tipo_conta = 'I') and (coalesce(dados_conta_proc_w.nr_seq_segurado::text, '') = '') and (dados_validacao_w.ie_tipo_pessoa_qtde = 'S') then
					ie_valida_w := 'N';
				end if;
				
				-- So valida os campos caso a regra seja valida para a conta
				if (ie_valida_w = 'S') then
					--Caso estiver definido na regra que utiliza o campo dt_procedimento_real
					if (r_c01_w.ie_campo_dt_validar = 'E') then
						dados_conta_proc_w.dt_procedimento := r_c_proc_w.dt_procedimento_real;
					end if;
						
					-- verifica se deve ser gerada ocorrencia para o item
					dados_ret_val_23_w := pls_oc_cta_val_23_proc(	dados_regra_p, dados_validacao_w,
											nr_id_transacao_p, dados_conta_proc_w);
					
					-- se precisar gerar ocorrencia para o item vira a observacao pronta

					-- caso ela seja nula, significa que o item nao tera ocorrencia
					if (dados_ret_val_23_w.ds_observacao IS NOT NULL AND dados_ret_val_23_w.ds_observacao::text <> '') then
						
						-- Alimenta as listas com as informacoes para gravar no banco todas de uma vez
						tb_selecao_w(i)		:= r_c_proc_w.nr_seq_selecao;
						tb_observacao_w(i)	:= substr(dados_ret_val_23_w.ds_observacao, 1, 2000);
						tb_valido_w(i)		:= 'S';
						qt_excedido_w(i)	:= dados_ret_val_23_w.qt_excedido;
						
						-- Quando a quantidade de itens da lista tiver chegado ao maximo definido na PLS_CTA_CONSISTIR_PCK, entao os registros sao levados para o BD 
						if (i = pls_util_cta_pck.qt_registro_transacao_w) then
							
							-- Grava no banco as listas passadas por parametro
							CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,'SEQ',
													tb_observacao_w, tb_valido_w, nm_usuario_p,
													null, qt_excedido_w);
							
							-- Zera o indice para recomecar a contagem
							i := 0;
							
							-- Reinicia as listas para que o mesmo registro nao seja mandado ao banco novamente
							tb_selecao_w.delete;
							tb_observacao_w.delete;
							tb_valido_w.delete;
							qt_excedido_w.delete;
						else
							i := i + 1;
						end if;
					end if;
				end if;
			end loop;
			
			-- Se no fim do loop ainda tiver sobrado algo nas variaveis table, deve ser enviado ao banco, isto para os casos onde nao atingiu a quantidade de itens para envio definida
			if (tb_selecao_w.count > 0) then
				-- Grava no banco as listas passadas por parametro
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
										'SEQ', tb_observacao_w, tb_valido_w, nm_usuario_p, null,
										qt_excedido_w);
			end if;
			
			-- inicio tratamentos para material
			i := 0;
			tb_selecao_w.delete;
			tb_observacao_w.delete;
			tb_valido_w.delete;
			qt_excedido_w.delete;
			-- busca todos os materiais que precisam ser validados
			for r_c_mat_w in c_mat(nr_id_transacao_p) loop
				
				-- inicializa os dados
				ie_valida_w					:= 'S';
				dados_conta_mat_w.nr_seq_conta			:= r_c_mat_w.nr_seq_conta;
				dados_conta_mat_w.cd_guia_imp			:= r_c_mat_w.cd_guia_imp;
				dados_conta_mat_w.cd_guia_referencia		:= r_c_mat_w.cd_guia_referencia;
				dados_conta_mat_w.nr_seq_prestador_exec_imp	:= r_c_mat_w.nr_seq_prestador_exec_imp;
				dados_conta_mat_w.nr_seq_prestador_exec		:= r_c_mat_w.nr_seq_prestador_exec;
				dados_conta_mat_w.nr_seq_segurado		:= r_c_mat_w.nr_seq_segurado;
				dados_conta_mat_w.cd_medico_executor_imp	:= r_c_mat_w.cd_medico_executor_imp;
				dados_conta_mat_w.cd_medico_executor		:= r_c_mat_w.cd_medico_executor;
				dados_conta_mat_w.nr_seq_conta_mat		:= r_c_mat_w.nr_seq_conta_mat;
				dados_conta_mat_w.dt_atendimento		:= r_c_mat_w.dt_atendimento;
				dados_conta_mat_w.dt_atendimento_imp		:= r_c_mat_w.dt_atendimento_imp;
				dados_conta_mat_w.nr_seq_material		:= r_c_mat_w.nr_seq_material;
				dados_conta_mat_w.cd_cid			:= r_c_mat_w.cd_cid_principal_conta;
				dados_conta_mat_w.cd_cat_cid			:= r_c_mat_w.cd_cat_cid_principal_conta;
				dados_conta_mat_w.nr_seq_cbo_saude		:= r_c_mat_w.nr_seq_cbo_saude;
				dados_conta_mat_w.ie_tipo_guia			:= r_c_mat_w.ie_tipo_guia;
				dados_conta_mat_w.ie_tipo_conta			:= r_c_mat_w.ie_tipo_conta;
				dados_conta_mat_w.qt_material_imp		:= r_c_mat_w.qt_material_imp;
				
				-- Se a conta for de intercambio, nao tiver beneficiario informado e o 

				-- o campo "Restringe mesmo beneficiario" da regra estiver marcado, 

				-- a conta nao e valida para a regra
				if (dados_conta_mat_w.ie_tipo_conta = 'I') and (coalesce(dados_conta_mat_w.nr_seq_segurado::text, '') = '') and (dados_validacao_w.ie_tipo_pessoa_qtde = 'S') then
					ie_valida_w := 'N';
				end if;				
				
				-- So valida os campos caso a regra seja valida para a conta
				if (ie_valida_w = 'S') then
					-- verifica se deve ser gerada ocorrencia para o item
					dados_ret_val_mat_23_w := pls_oc_cta_val_23_mat(	dados_regra_p, dados_validacao_w,
											nr_id_transacao_p, dados_conta_mat_w);
					
					-- se precisar gerar ocorrencia para o item vira a observacao pronta

					-- caso ela seja nula, significa que o item nao tera ocorrencia
					if (dados_ret_val_mat_23_w.ds_observacao IS NOT NULL AND dados_ret_val_mat_23_w.ds_observacao::text <> '') then
						
						-- Alimenta as listas com as informacoes para gravar no banco todas de uma vez
						tb_selecao_w(i)		:= r_c_mat_w.nr_seq_selecao;
						tb_observacao_w(i)	:= substr(dados_ret_val_mat_23_w.ds_observacao, 1, 2000);
						tb_valido_w(i)		:= 'S';
						qt_excedido_w(i)	:= dados_ret_val_mat_23_w.qt_excedido;
						
						-- Quando a quantidade de itens da lista tiver chegado ao maximo definido na PLS_CTA_CONSISTIR_PCK, entao os registros sao levados para o BD 
						if (i = pls_util_cta_pck.qt_registro_transacao_w) then
							
							-- Grava no banco as listas passadas por parametro
							CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
													'SEQ', tb_observacao_w, tb_valido_w, nm_usuario_p,
													null, qt_excedido_w);
							
							-- Zera o indice para recomecar a contagem
							i := 0;
							
							-- Reinicia as listas para que o mesmo registro nao seja mandado ao banco novamente
							tb_selecao_w.delete;
							tb_observacao_w.delete;
							tb_valido_w.delete;
							qt_excedido_w.delete;
						else
							i := i + 1;
						end if;					
					end if;
				end if;
			end loop;
			
			-- Se no fim do loop ainda tiver sobrado algo nas variaveis table, deve ser enviado ao banco, isto para os casos onde nao atingiu a quantidade de itens para envio definida
			if (tb_selecao_w.count > 0) then
				-- Grava no banco as listas passadas por parametro
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
										'SEQ', tb_observacao_w, tb_valido_w, nm_usuario_p,
										null, qt_excedido_w);
			end if;
			
			-- Seta os registros que serao validos ou invalidos apos o processamento 
			CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);			
		end if;
	end loop;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_23 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

