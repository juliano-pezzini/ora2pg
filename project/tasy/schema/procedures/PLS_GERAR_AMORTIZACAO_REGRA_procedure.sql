-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_amortizacao_regra ( nr_titulo_p bigint, nr_seq_baixa_p bigint, nm_usuario_p text, ie_commit_p text) AS $body$
DECLARE

 
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Verificar se há valor de diferença entre o saldo do título e o valor a ser baixado, se 
for encontrada uma regra em que este valor de diferença seja compatível e esteja vigente é gerada 
uma nova baixa com este valor e gerado um registro de amortização para o pagador 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: Se gerar amortização não deve gerar a nota de crédito (NOTA_CREDITO) 
IE_COMMIT_p 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ie_amortizar_w			varchar(1);
vl_saldo_titulo_w		double precision;
vl_baixado_w			double precision;
vl_diferenca_w			double precision;
nr_seq_mensalidade_w	bigint;
nr_sequencia_w			bigint;
nr_seq_contrato_w		bigint;
nr_seq_pagador_w		bigint;
nr_seq_amortizacao_w		bigint;
nr_seq_amortizacao_baixa_w	bigint;
nr_seq_trans_fin_w			bigint;
cd_estabelecimento_w		smallint;
cd_tipo_recebimento_w		integer;
cd_moeda_w					integer;
dt_recebimento_w			timestamp;
nr_titulo_contab_w			bigint;
ie_situacao_pagador_w		pls_regra_amortizacao.ie_situacao_pagador%type;
dt_rescisao_w				pls_contrato_pagador.dt_rescisao%type;
ie_forma_encontro_contas_w	lote_encontro_contas.ie_forma_encontro_contas%type;

C01 CURSOR FOR 
	SELECT	a.ie_amortizar, 
		a.cd_tipo_recebimento, 
		a.nr_seq_trans_financ 
	from	pls_regra_amortizacao	a 
	where	dt_recebimento_w between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia,to_date('31/12/2100','dd/mm/yyyy')) 
	and	vl_diferenca_w between coalesce(a.vl_minimo,0) and coalesce(a.vl_maximo, 99999999999999) 
	and (coalesce(ie_situacao_pagador,'T') = 'T' or ie_situacao_pagador = ie_situacao_pagador_w);


BEGIN 
 
select	coalesce(max(a.ie_forma_encontro_contas),'G') 
into STRICT	ie_forma_encontro_contas_w 
from	lote_encontro_contas a, 	 
	pessoa_encontro_contas b, 
	encontro_contas_item c 
where	a.nr_sequencia = b.nr_seq_lote 
and	b.nr_sequencia = c.nr_seq_pessoa 
and c.nr_titulo_receber = nr_titulo_p;	
 
/* Não gerar apropriação se o titulo estiver em encontro contas e o saldo permanecer no título. */
 
if (nr_titulo_p IS NOT NULL AND nr_titulo_p::text <> '') and (nr_seq_baixa_p IS NOT NULL AND nr_seq_baixa_p::text <> '') and (ie_forma_encontro_contas_w = 'G') then 
	 
	select	a.nr_seq_mensalidade, 
		a.vl_saldo_titulo, 
		a.cd_estabelecimento 
	into STRICT	nr_seq_mensalidade_w, 
		vl_saldo_titulo_w, 
		cd_estabelecimento_w 
	from	titulo_receber a 
	where	a.nr_titulo	= nr_titulo_p;
 
	/* Somente se for título de mensalidade prosseguir */
 
	if (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') then 
		select	a.dt_recebimento, 
			a.nr_seq_amortizacao, 
			a.vl_recebido + a.vl_glosa + a.vl_descontos + coalesce(a.vl_perdas, 0) + coalesce(a.vl_nota_credito, 0) 
		into STRICT	dt_recebimento_w, 
			nr_seq_amortizacao_baixa_w, 
			vl_baixado_w 
		from	titulo_receber_liq a 
		where	a.nr_titulo	= nr_titulo_p 
		and	a.nr_sequencia	= nr_seq_baixa_p;
			 
		ie_amortizar_w	:= 'N';
		vl_diferenca_w	:= (vl_saldo_titulo_w - vl_baixado_w);
		 
		 
		select	max(b.dt_rescisao) 
		into STRICT	dt_rescisao_w 
		from	pls_mensalidade		a, 
			pls_contrato_pagador 	b 
		where	a.nr_seq_pagador = b.nr_sequencia 
		and	a.nr_sequencia	= nr_seq_mensalidade_w;
		 
		/*Verificar a situação do pagador*/
 
		if (coalesce(dt_rescisao_w::text, '') = '') or (dt_rescisao_w > clock_timestamp()) then 
			ie_situacao_pagador_w := 'A';
		else 
			ie_situacao_pagador_w := 'I';
		end if;
		 
		open C01;
		loop 
		fetch C01 into 
			ie_amortizar_w, 
			cd_tipo_recebimento_w, 
			nr_seq_trans_fin_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			null;	
		end loop;
		close C01;
 
		if (ie_amortizar_w = 'S') and (vl_diferenca_w > 0) then 
 
			select	max(cd_moeda_padrao) 
			into STRICT	cd_moeda_w 
			from	parametro_contas_receber 
			where	cd_estabelecimento	= cd_estabelecimento_w;
 
			if (coalesce(cd_tipo_recebimento_w::text, '') = '') then 
				select	max(cd_tipo_recebimento) 
				into STRICT	cd_tipo_recebimento_w 
				from	tipo_recebimento 
				where	ie_situacao		= 'A' 
				and	ie_tipo_consistencia	= 0 
				and   ((cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento::text, '') = ''));
			end if;
 
			if (cd_tipo_recebimento_w IS NOT NULL AND cd_tipo_recebimento_w::text <> '') and (cd_moeda_w IS NOT NULL AND cd_moeda_w::text <> '') then 
				select	a.nr_seq_contrato, 
					a.nr_seq_pagador 
				into STRICT	nr_seq_contrato_w, 
					nr_seq_pagador_w 
				from	pls_mensalidade	a 
				where	a.nr_sequencia	= nr_seq_mensalidade_w;	
 
				/* Gerar amortização */
 
				select	nextval('pls_pagador_amortizacao_seq') 
				into STRICT	nr_seq_amortizacao_w 
				;
	 
				insert into pls_pagador_amortizacao(nr_sequencia, 
					nm_usuario, 
					dt_atualizacao, 
					nm_usuario_nrec, 
					dt_atualizacao_nrec, 
					nr_seq_contrato, 
					nr_seq_pagador, 
					nr_titulo_origem, 
					dt_amortizacao, 
					vl_amortizado) 
				values (nr_seq_amortizacao_w, 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nr_seq_contrato_w, 
					nr_seq_pagador_w, 
					nr_titulo_p, 
					dt_recebimento_w, 
					vl_diferenca_w);
 
				/* Gerar baixa */
 
				select	coalesce(max(nr_sequencia), 0) + 1 
				into STRICT	nr_sequencia_w 
				from	titulo_receber_liq 
				where	nr_titulo	= nr_titulo_p;
 
				insert into titulo_receber_liq(nr_titulo, 
					nr_sequencia, 
					nm_usuario, 
					dt_atualizacao, 
					dt_recebimento, 
					vl_recebido, 
					vl_descontos, 
					vl_juros, 
					vl_multa, 
					cd_moeda, 
					cd_tipo_recebimento, 
					vl_rec_maior, 
					vl_glosa, 
					ie_lib_caixa, 
					ds_observacao, 
					nr_seq_amortizacao, 
					ie_acao, 
					nr_seq_trans_fin, 
					nr_lote_contab_antecip, 
					nr_lote_contab_pro_rata, 
					nr_lote_contabil) 
				values (nr_titulo_p, 
					nr_sequencia_w, 
					nm_usuario_p, 
					clock_timestamp(), 
					dt_recebimento_w, 
					vl_diferenca_w, 
					0, 
					0, 
					0, 
					cd_moeda_w, 
					cd_tipo_recebimento_w, 
					0, 
					0, 
					'S', 
					wheb_mensagem_pck.get_texto(298444),--Baixa gerada devido a regra de amortização de valores para cobrança em mensalidade futura. 
					nr_seq_amortizacao_w, 
					'I', 
					nr_seq_trans_fin_w, 
					0, 
					0, 
					0);
					 
				update	titulo_receber_liq 
				set	nr_seq_liq_amortizacao	= nr_sequencia_w 
				where	nr_titulo		= nr_titulo_p 
				and	nr_sequencia		= nr_seq_baixa_p;
 
				CALL gerar_titulo_rec_liq_cc(cd_estabelecimento_w, 
							null, 
							nm_usuario_p, 
							nr_titulo_p, 
							nr_sequencia_w);
				 
				nr_titulo_contab_w := pls_gerar_tit_rec_liq_mens(	nr_titulo_p, nr_sequencia_w, nm_usuario_p, nr_titulo_contab_w);
								 
				if (nr_titulo_contab_w IS NOT NULL AND nr_titulo_contab_w::text <> '') then 
					CALL wheb_mensagem_pck.exibir_mensagem_abort(236517, 'NR_TITULO=' || nr_titulo_contab_w);
				end if;	
				 
			end if;
		end if;
	end if;	
end if;
 
if (ie_commit_p = 'S') then 
	commit;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_amortizacao_regra ( nr_titulo_p bigint, nr_seq_baixa_p bigint, nm_usuario_p text, ie_commit_p text) FROM PUBLIC;

