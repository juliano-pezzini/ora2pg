-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dar_criar_app_data_model (nr_sequencia_p INOUT dar_app.nr_sequencia%type) AS $body$
DECLARE


   c_principal CURSOR FOR
      SELECT * from dar_app_datamodels where nr_seq_app = nr_sequencia_p;
   r_principal c_principal%rowtype;

   c_tab_control CURSOR(nr_sequencia_p  dar_tables_control.nr_sequencia%type) FOR
      SELECT a.nm_query, b.ds_sql, b.nr_sequencia
        from dar_tables_control b, filter_query_dar a
       where b.nr_seq_sql = a.nr_sequencia
         and b.nr_sequencia = nr_sequencia_p;
   r_tab_control c_tab_control%rowtype;

   c_tab_ctrl_fields CURSOR(nr_sequencia_p  dar_tables_control.nr_sequencia%type) FOR
      SELECT *
        from dar_tab_control_fields c
       where c.nr_seq_table_control = nr_sequencia_p;
   r_tab_ctrl_fields c_tab_ctrl_fields%rowtype;

   c_tab_ctrl_fields_2 CURSOR FOR
      SELECT b.nr_identificador identificador_a,
             c.nr_identificador identificador_b,
             a.ie_selecao ie_selecao,
             a.nr_sequencia
        from dar_app_control_fields a,
             dar_tab_control_fields b,
             dar_tab_control_fields c
       where a.nr_sequencia_a = b.nr_sequencia
         and a.nr_sequencia_b = c.nr_sequencia
         and a.ie_selecao = 1
         and a.nr_seq_app = nr_sequencia_p;
   r_tab_ctrl_fields_2 c_tab_ctrl_fields_2%rowtype;

   type registro is table of dar_tab_control_fields%rowtype index by integer;
   dar_registros_w registro;

   type ds_sql_t is table of dar_tables_control.ds_sql%type index by integer;
   ds_sql_w ds_sql_t;

   dar_tables_control_w dar_tables_control%rowtype;

   sql_clob_w  text;
   aux_virgula varchar(10) := ', ';
   aux_texto   varchar(10);

   qt_cursor_w      bigint := 0;
   qt_sql_w         bigint := 0;
   nr_seq_ligacao_w dar_app_datamodels.nr_seq_ligacao%type;
BEGIN

   select max(nr_seq_ligacao)
     into STRICT nr_seq_ligacao_w
     from dar_app_datamodels
    where nr_seq_app = nr_sequencia_p;

   if (coalesce(nr_seq_ligacao_w, 0) > 0) then
      update dar_app_datamodels
         set nr_seq_ligacao  = NULL
       where nr_seq_app = nr_sequencia_p;

      delete FROM dar_tab_control_fields
       where nr_seq_table_control = nr_seq_ligacao_w;

      delete FROM dar_tables_control where nr_sequencia = nr_seq_ligacao_w;

   End if;

   open c_principal;
   loop
      fetch c_principal
         into r_principal;
      EXIT WHEN NOT FOUND; /* apply on c_principal */

      --
   
      open c_tab_control(nr_sequencia_p => r_principal.nr_seq_table_control);
      loop
         fetch c_tab_control
            into r_tab_control;
         EXIT WHEN NOT FOUND; /* apply on c_tab_control */

         qt_sql_w := qt_sql_w + 1;

         ds_sql_w(qt_sql_w) := r_tab_control.ds_sql;

         dar_tables_control_w.ds_datamodel := dar_tables_control_w.ds_datamodel || aux_texto || coalesce(r_tab_control.nm_query, 'Datamodel ' || r_tab_control.nr_sequencia);

         aux_texto := ' + ';

         -- incluir selesct
         open c_tab_ctrl_fields(nr_sequencia_p => r_tab_control.nr_sequencia);
         loop
            fetch c_tab_ctrl_fields
               into r_tab_ctrl_fields;
            EXIT WHEN NOT FOUND; /* apply on c_tab_ctrl_fields */

            qt_cursor_w := qt_cursor_w + 1;

            -- incluir filds em table temporaria
            dar_registros_w[qt_cursor_w].ds_tabela := r_tab_ctrl_fields.ds_tabela;
            dar_registros_w[qt_cursor_w].ds_campo := r_tab_ctrl_fields.ds_campo;
            dar_registros_w[qt_cursor_w].ds_expressao_campo := r_tab_ctrl_fields.ds_expressao_campo;
            dar_registros_w[qt_cursor_w].ds_expressao_tabela := r_tab_ctrl_fields.ds_expressao_tabela;
            dar_registros_w[qt_cursor_w].nr_identificador := r_tab_ctrl_fields.nr_identificador;

         end loop;
         close c_tab_ctrl_fields;

      end loop;
      close c_tab_control;

   end loop;
   close c_principal;

   sql_clob_w := ('Select ');

   for i in 1 .. qt_cursor_w loop
      -- Se for ultimo campo
      if (i = qt_cursor_w) then
         aux_virgula := ' from ';
      end if;
      -- Criando setor de colunas do select
      sql_clob_w := sql_clob_w || (dar_registros_w[i].nr_identificador || aux_virgula);

   end loop;

   aux_virgula := ', ';

   for i in 1 .. qt_sql_w loop
      -- Se for ultimo campo
      if (i = qt_sql_w) then
         aux_virgula := '';
      end if;
      -- Criando setor de from do select
      sql_clob_w := sql_clob_w || ('( ' || ds_sql_w(i) || ' ) ' || aux_virgula);

   end loop;

   sql_clob_w := sql_clob_w || (' where 1 = 1 ');

   open c_tab_ctrl_fields_2;
   loop
      fetch c_tab_ctrl_fields_2
         into r_tab_ctrl_fields_2;
      EXIT WHEN NOT FOUND; /* apply on c_tab_ctrl_fields_2 */
      -- Criando setor Where
      sql_clob_w := sql_clob_w || (' and ' || r_tab_ctrl_fields_2.identificador_a || ' = ' || r_tab_ctrl_fields_2.identificador_b);

   end loop;
   close c_tab_ctrl_fields_2;

   --Inserir registro dar_tables_control
   insert into dar_tables_control(nr_sequencia,
       ds_sql,
       ds_datamodel,
       dt_atualizacao,
       nm_usuario,
       dt_atualizacao_nrec,
       nm_usuario_nrec)
   values (nextval('dar_tables_control_seq'),
       sql_clob_w,
       dar_tables_control_w.ds_datamodel,
       clock_timestamp(),
       wheb_usuario_pck.get_nm_usuario,
       clock_timestamp(),
       wheb_usuario_pck.get_nm_usuario)
   returning nr_sequencia INTO dar_tables_control_w.nr_sequencia;

   --Inserir Registros dar_tab_control_fields
   for i in 1 .. qt_cursor_w loop
      insert into dar_tab_control_fields(nr_sequencia,
          ds_tabela,
          ds_campo,
          ds_expressao_campo,
          ds_expressao_tabela,
          nr_seq_table_control,
          nr_identificador,
          dt_atualizacao,
          nm_usuario,
          dt_atualizacao_nrec,
          nm_usuario_nrec)
      values (nextval('dar_tab_control_fields_seq'),
          dar_registros_w[i].ds_tabela,
          dar_registros_w[i].ds_campo,
          dar_registros_w[i].ds_expressao_campo,
          dar_registros_w[i].ds_expressao_tabela,
          dar_tables_control_w.nr_sequencia,
          dar_registros_w[i].nr_identificador,
          clock_timestamp(),
          wheb_usuario_pck.get_nm_usuario,
          clock_timestamp(),
          wheb_usuario_pck.get_nm_usuario);

   end loop;
   -- Atualizar dar_app_datamodels
   update dar_app_datamodels
      set nr_seq_ligacao = dar_tables_control_w.nr_sequencia
    where nr_seq_app = nr_sequencia_p;

   -- Chama a criacao da tabela W
   CALL dar_gerar_tab_data_model(nr_sequencia_p => dar_tables_control_w.nr_sequencia,
                            nm_usuario_p   => wheb_usuario_pck.get_nm_usuario);

   commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dar_criar_app_data_model (nr_sequencia_p INOUT dar_app.nr_sequencia%type) FROM PUBLIC;

