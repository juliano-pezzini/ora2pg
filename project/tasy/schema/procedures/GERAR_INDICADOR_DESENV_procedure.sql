-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_indicador_desenv (dt_referencia_p timestamp) AS $body$
DECLARE


/*	ie_indicador :
DEF = Defeito
OSA = OS Antiga
SAT = Satisfacao
ASS = Assertividade
PRO = Produtividade

	IE_ABRANGENCIA:
IND = Individual
GRU = Grupo de desenvolvimento
GER = Gerencia

	IE_INFORMACAO:
QTDEF = Quantidade de OS's de defeito
PRDEF = % de defeito
QTOSRG = Quantidade de OS recebida geral
QTOSD = Quantidade de OS recebida no desenvolvimento
QTOSA = Quantidade de OS antiga no dia
QTDOS = Quantidade de OS no dia
PROSA = % de OS antiga
PRSAT = % de satisfacao
QTINS = Quantidade de OS com insatisfacao
QTSAI = Quantidade de OS com satisfacao informada
PRASA = % de assertividade do analista
PRASG = % de assertividade da gerencia
PRASP = % de assertividade do programador
QTPRE = Quantidade de previsoes
QTPRC = Quantidade de previsoes certas
QTPRER = Quantidade de previsoes erradas
QTOSR = Quantidade de OS's recebidas
QTOSE = Quantidade de OS's encerradas
QTDRA	= Defect Rate
*/
qt_os_insatisfacao_w	bigint;
pr_satisf_w		double precision;

qt_erro_w		bigint;
pr_erro_w		double precision;
pr_acerto_previsao_w	double precision;
qt_total_w		bigint;

C01 CURSOR FOR
SELECT	a.nr_seq_gerencia,
	c.DT_POSICAO,
	sum(QT_OS_ANTIGA) QT_OS_ANTIGA,
	round((dividir(sum(QT_OS_ANTIGA)  * 100, sum(QT_TOTAL)))::numeric,1) pr_antiga,
	sum(a.qt_total) qt_total
from	man_posicao_diaria_resumo a,
	gerencia_wheb b,
	man_posicao_diaria c
where	a.nr_seq_gerencia	= b.nr_sequencia
and	c.nr_sequencia		= a.nr_seq_posicao
and	b.cd_setor_atendimento in (2,7,16,21,33)
and	c.DT_POSICAO between trunc(dt_referencia_p) and dt_referencia_p + 86399/86400
and 	coalesce(c.ie_tipo::text, '') = ''
and	c.ie_tipo_registro = 1
group by  a.nr_seq_gerencia,
	c.DT_POSICAO;

c02 CURSOR FOR
SELECT	qt_os_antiga,
        round((pr_os_antiga)::numeric,1) pr_antiga,
		c.DT_POSICAO,
        b.nr_sequencia,
		b.nr_seq_gerencia,
		a.qt_total
from	man_posicao_diaria_resumo a,
	grupo_desenvolvimento b,
	man_posicao_diaria c
where	a.nr_seq_grupo_des	= b.nr_sequencia
and	c.nr_sequencia		= a.nr_seq_posicao
and	c.DT_POSICAO between trunc(dt_referencia_p) and dt_referencia_p + 86399/86400
and 	coalesce(c.ie_tipo::text, '') = ''
and	c.ie_tipo_registro = 1;

c03 CURSOR FOR
SELECT	nr_sequencia
from	gerencia_wheb b
where	b.cd_setor_atendimento in (2,7,16,21,33)
and	coalesce(ie_situacao,'A') = 'A';

c04 CURSOR FOR
SELECT	b.nr_sequencia,
	b.nr_seq_gerencia,
	c.nm_usuario_grupo
from	grupo_desenvolvimento b,
	usuario_grupo_des c
where	b.nr_sequencia = c.nr_seq_grupo
and	c.ie_funcao_usuario = 'S'
and	coalesce(ie_situacao,'A') = 'A'
and	(nr_seq_gerencia IS NOT NULL AND nr_seq_gerencia::text <> '');

c05 CURSOR FOR
SELECT	x.nm_usuario_grupo,
	c.cd_pessoa_fisica,
	b.nr_seq_gerencia,
	b.nr_sequencia
from	usuario c,
	grupo_desenvolvimento b,
	usuario_grupo_des x
where	x.nr_seq_grupo		= b.nr_sequencia
and	x.nm_usuario_grupo	= c.nm_usuario
and	coalesce(b.ie_situacao,'A')	= 'A'
and	(b.nr_seq_gerencia IS NOT NULL AND b.nr_seq_gerencia::text <> '');

c01_w c01%rowtype;
c02_w c02%rowtype;
c03_w c03%rowtype;
c04_w c04%rowtype;
c05_w c05%rowtype;


BEGIN

delete from	w_indicador_desenv
where		dt_referencia = trunc(dt_referencia_p);
commit;

--man_gerar_resumo_diario_os;


/* Indicador de OS antiga por gerencia */

open C01;
loop
fetch C01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */

/*Validado*/
	/*Quantidade de OS antiga no dia*/

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'OSA',
		'GER',
		'QTOSA',
		c01_w.dt_posicao,
		c01_w.qt_os_antiga,
		c01_w.nr_seq_gerencia);

/*Validado*/
	/* % de OS antiga por gerencia */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'OSA',
		'GER',
		'PROSA',
		c01_w.dt_posicao,
		c01_w.pr_antiga,
		c01_w.nr_seq_gerencia);

/*Validado*/
	/* Quantidade OS por gerencia */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'OSA',
		'GER',
		'QTDOS',
		c01_w.dt_posicao,
		c01_w.qt_total,
		c01_w.nr_seq_gerencia);
end loop;
close C01;

/* Indicador de OS antiga por grupo */

open C02;
loop
fetch C02 into
	C02_w;
EXIT WHEN NOT FOUND; /* apply on C02 */

/*Validado*/
	/* Quantidade OS por grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'OSA',
		'GRU',
		'QTDOS',
		C02_w.dt_posicao,
		C02_w.qt_total,
		C02_w.nr_seq_gerencia,
		c02_w.nr_sequencia);

/*Validado*/
	/*Quantidade de OS antiga no dia por grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'OSA',
		'GRU',
		'QTOSA',
		c02_w.dt_posicao,
		c02_w.QT_OS_ANTIGA,
		c02_w.nr_seq_gerencia,
		c02_w.nr_sequencia);

/*Validado*/
	/* % de OS antiga por grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'OSA',
		'GRU',
		'PROSA',
		c02_w.dt_posicao,
		c02_w.pr_antiga,
		c02_w.nr_seq_gerencia,
		c02_w.nr_sequencia);

end loop;
close C02;

commit;

CALL des_gerar_estim_analista(trunc(dt_referencia_p,'month'), 20, 'Tasy');

open C03;
loop
fetch C03 into
	C03_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
/*Validado*/
	/* Indicador de Satisfacao por gerencia  */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'SAT',
		'GER',
		'PRSAT',
		trunc(dt_referencia_p),
		100 - obter_informacao_os_gerencia(dt_referencia_p,C03_w.nr_sequencia,'PRI',null),
		c03_w.nr_sequencia);

/*Validado*/
	/* Quantidade de OS com insatisfacao por gerencia  */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'SAT',
		'GER',
		'QTINS',
		trunc(dt_referencia_p),
		obter_informacao_os_gerencia(dt_referencia_p,C03_w.nr_sequencia,'QTI',null),
		c03_w.nr_sequencia);


/*Validado*/
	/*Quantidade de OS com satisfacao informada por gerencia*/

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'SAT',
		'GER',
		'QTSAI',
		trunc(dt_referencia_p),
		obter_informacao_os_gerencia(dt_referencia_p,C03_w.nr_sequencia,'ENS',null),
		c03_w.nr_sequencia);

	/* Indicador de Defeito por gerencia */



/*Validado*/
	/* QTDEF = Quantidade de OS's de defeito por gerencia*/

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'DEF',
		'GER',
		'QTDEF',
		trunc(dt_referencia_p),
		obter_informacao_os_gerencia(dt_referencia_p,C03_w.nr_sequencia,'ER',null),
		c03_w.nr_sequencia);

/*Validado*/
	/* PRDEF = % de defeito  por gerencia*/

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'DEF',
		'GER',
		'PRDEF',
		trunc(dt_referencia_p),
		obter_informacao_os_gerencia(dt_referencia_p,C03_w.nr_sequencia,'PR',null),
		c03_w.nr_sequencia);

/*Validado*/
	/* QTOSRG = Quantidade de OS recebida geral */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'PRO',
		'GER',
		'QTOSRG',
		trunc(dt_referencia_p),
		obter_informacao_os_gerencia(dt_referencia_p,C03_w.nr_sequencia,'QTD',null),
		c03_w.nr_sequencia);

	select	coalesce(round(avg(a.pr_acerto_os)),0) pr_acerto_previsao
	into STRICT	pr_acerto_previsao_w
	from	des_ind_estim_analista a,
		gerencia_wheb b,
		usuario c
	where	a.nm_usuario		= 'Tasy'
	and	a.dt_referencia		= trunc(dt_referencia_p,'month')
	and	b.nr_sequencia		= c03_w.nr_sequencia
	and	a.nr_seq_gerencia	= b.nr_sequencia
	and	a.nm_usuario_exec	!= c.nm_usuario
	and	b.cd_responsavel	= c.cd_pessoa_fisica
	and	a.qt_os_total 		> 0;

/*Validado*/
	/*PRASG - % assertividade da gerencia */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'ASS',
		'GER',
		'PRASG',
		trunc(dt_referencia_p),
		pr_acerto_previsao_w,
		c03_w.nr_sequencia);

	/* QTDRA = Defect Rate por gerencia*/

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'DEF',
		'GER',
		'QTDRA',
		trunc(dt_referencia_p),
		phi_defect_measures_pck.get_defect_rate(dt_referencia_p, null, c03_w.nr_sequencia),
		c03_w.nr_sequencia);

end loop;
close C03;

commit;

open C04;
loop
fetch C04 into
	C04_w;
EXIT WHEN NOT FOUND; /* apply on C04 */

/*Validado*/
	/* Indicador de Satisfacao por grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'SAT',
		'GRU',
		'PRSAT',
		trunc(dt_referencia_p),
		100 - Obter_informacao_os_grupo(dt_referencia_p,C04_w.nr_sequencia,'PRY',null),
		c04_w.nr_seq_gerencia,
		c04_w.nr_sequencia);

/*Validado*/
	/*Quantidade de OS com insatisfacao por grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'SAT',
		'GRU',
		'QTINS',
		trunc(dt_referencia_p),
		Obter_informacao_os_grupo(dt_referencia_p, C04_w.nr_sequencia,'QTY',null),
		c04_w.nr_seq_gerencia,
		c04_w.nr_sequencia);

/*Validado*/
	/*Quantidade de OS com satisfacao informada por grupo*/

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'SAT',
		'GRU',
		'QTSAI',
		trunc(dt_referencia_p),
		Obter_informacao_os_grupo(dt_referencia_p,C04_w.nr_sequencia,'ENY',null),
		c04_w.nr_seq_gerencia,
		c04_w.nr_sequencia);

/*Validado*/
	/* QTDEF = Quantidade de OS's de defeito por grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'DEF',
		'GRU',
		'QTDEF',
		trunc(dt_referencia_p),
		Obter_informacao_os_grupo(dt_referencia_p,C04_w.nr_sequencia,'ER',null),
		c04_w.nr_seq_gerencia,
		c04_w.nr_sequencia);

/*Validado*/
	/* PRDEF = % de defeito por grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'DEF',
		'GRU',
		'PRDEF',
		trunc(dt_referencia_p),
		Obter_informacao_os_grupo(dt_referencia_p,C04_w.nr_sequencia,'PR',null),
		c04_w.nr_seq_gerencia,
		c04_w.nr_sequencia);

/*Validado*/
	/* QTOSRG = Quantidade de OS recebida por grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'PRO',
		'GRU',
		'QTOSRG',
		trunc(dt_referencia_p),
		Obter_informacao_os_grupo(dt_referencia_p,C04_w.nr_sequencia,'QTD',null),
		c04_w.nr_seq_gerencia,
		c04_w.nr_sequencia);

	select	coalesce(max(a.pr_acerto_os),0)
	into STRICT	pr_acerto_previsao_w
	from	des_ind_estim_analista a
	where	a.nm_usuario		= 'Tasy'
	and	a.dt_referencia		= trunc(dt_referencia_p,'month')
	and	a.nr_seq_gerencia	= c04_w.nr_seq_gerencia
	and	a.nm_usuario_exec	= c04_w.nm_usuario_grupo
	and	a.qt_os_total 		> 0;

/*Validado*/
	/*PRASA - % assertividade do grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_grupo,
		nr_seq_gerencia)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'ASS',
		'GRU',
		'PRASA',
		trunc(dt_referencia_p),
		pr_acerto_previsao_w,
		c04_w.nr_sequencia,
		c04_w.nr_seq_gerencia);

	/* QTDRA = Defect Rate por grupo */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'DEF',
		'GRU',
		'QTDRA',
		trunc(dt_referencia_p),
		phi_defect_measures_pck.get_defect_rate(dt_referencia_p, null, null, C04_w.nr_sequencia),
		c04_w.nr_seq_gerencia,
		c04_w.nr_sequencia);

end loop;
close C04;

commit;

open C05;
loop
fetch C05 into
	c05_w;
EXIT WHEN NOT FOUND; /* apply on C05 */

/*Validado*/
	/* Indicador de Satisfacao por USUARIO */

	select	coalesce(max(a.qt_excelente + a.qt_regular + a.qt_ruim + a.qt_otimo + a.qt_bom),0),
		coalesce(max(a.qt_regular + a.qt_ruim),0) qt_os_insatisfacao,
		coalesce(max(a.pr_satisf),100)
	into STRICT	qt_total_w,
		qt_os_insatisfacao_w,
		pr_satisf_w
	from	(
		SELECT	x.nm_pessoa_fisica nm_usuario,
			x.nm_usuario_exec,
		        sum(CASE WHEN x.ie_grau_satisfacao='R' THEN 1  ELSE 0 END ) qt_regular,
			sum(CASE WHEN x.ie_grau_satisfacao='P' THEN 1  ELSE 0 END ) qt_ruim,
			sum(CASE WHEN x.ie_grau_satisfacao='E' THEN 1  ELSE 0 END ) qt_excelente,
			sum(CASE WHEN x.ie_grau_satisfacao='O' THEN 1  ELSE 0 END ) qt_otimo,
			sum(CASE WHEN x.ie_grau_satisfacao='B' THEN 1  ELSE 0 END ) qt_bom,
		        sum(1) qt_total,
		        (dividir(sum(CASE WHEN x.ie_grau_satisfacao='O' THEN 1 WHEN x.ie_grau_satisfacao='B' THEN 1  ELSE 0 END ),
			      sum(CASE WHEN x.ie_grau_satisfacao='O' THEN 1 WHEN x.ie_grau_satisfacao='B' THEN 1 WHEN x.ie_grau_satisfacao='R' THEN 1 WHEN x.ie_grau_satisfacao='P' THEN 1  ELSE 0 END )) * 100) pr_satisf
		from  (  SELECT	a.nr_sequencia,
		                c.nm_usuario_exec,
		                a.ie_grau_satisfacao,
		                e.nm_pessoa_fisica
		         from   man_ordem_servico a,
		                grupo_desenvolvimento b,
		                man_ordem_servico_exec c,
		                usuario d,
		                pessoa_fisica e
		         where  a.nr_seq_grupo_des   = b.nr_sequencia
		         and    a.nr_sequencia       =  c.nr_seq_ordem
		         and    c.nm_usuario_exec    = d.nm_usuario
		         and    d.cd_pessoa_fisica	= e.cd_pessoa_fisica
		         and    trunc(a.dt_fim_real,'month') = trunc(dt_referencia_p,'month')
		         and    c.nm_usuario_exec	=  c05_w.nm_usuario_grupo
		         and    b.nr_sequencia		= c05_w.nr_sequencia
				 and	coalesce(c.dt_fim_execucao::text, '') = ''
			 and      coalesce(a.nr_seq_gerencia_insatisf,b.nr_seq_gerencia)   = c05_w.nr_seq_gerencia
			 and      c.nm_usuario_exec    =  (  	select   max(k.nm_usuario_exec) nm_usuario_exec
								from     man_ordem_servico_exec k
								where    k.nr_seq_ordem	= a.nr_sequencia
								and exists (	select   1
										from     usuario_grupo_des l
										where    k.nm_usuario_exec = l.nm_usuario_grupo))
			 and	(a.ie_grau_satisfacao IS NOT NULL AND a.ie_grau_satisfacao::text <> '')
		         and    exists ( select   1
		                           from     man_estagio_processo c,
		                                    man_ordem_serv_estagio b
		                           where    b.nr_seq_estagio        = c.nr_sequencia
		                           and      c.ie_desenv             = 'S'
		                           and      a.nr_sequencia          = b.nr_seq_ordem)) x
		group by x.nm_pessoa_fisica,
		         x.nm_usuario_exec) a;

/*Validado*/
	/* QTSAI = Quantidade de OS com satisfacao informada por usuario */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo,
		cd_pessoa_fisica)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'SAT',
		'IND',
		'QTSAI',
		trunc(dt_referencia_p),
		qt_total_w,
		c05_w.nr_seq_gerencia,
		c05_w.nr_sequencia,
		c05_w.cd_pessoa_fisica);

/*Validado*/
	/* QTINS = Quantidade de OS com insatisfacao por usuario*/

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo,
		cd_pessoa_fisica)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'SAT',
		'IND',
		'QTINS',
		trunc(dt_referencia_p),
		qt_os_insatisfacao_w,
		c05_w.nr_seq_gerencia,
		c05_w.nr_sequencia,
		c05_w.cd_pessoa_fisica);

/*Validado*/
	/* PRSAT = % de satisfacao  por usuario */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo,
		cd_pessoa_fisica)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'SAT',
		'IND',
		'PRSAT',
		trunc(dt_referencia_p),
		pr_satisf_w,
		c05_w.nr_seq_gerencia,
		c05_w.nr_sequencia,
		c05_w.cd_pessoa_fisica);
		
	/* Indicador de erros por pessoa */

	select	coalesce(sum(qt_erro),0) qt_erro,
		(dividir(sum(qt_erro),sum(qt_os)) * 100) pr_erro,
		coalesce(sum(qt_os),0) qt_total
	into STRICT	qt_erro_w,
		pr_erro_w,
		qt_total_w
	from (SELECT	count(*) qt_erro,
			0 qt_os,
			a.cd_pessoa_fisica
		from	os_erro_gerencia_v a
		where	a.dt_liberacao between trunc(to_date(dt_referencia_p),'month') and last_day(trunc(dt_referencia_p,'month')) + 86399/86400
		and	a.ie_origem_erro <> 'C'
		and	a.cd_pessoa_fisica	= c05_w.cd_pessoa_fisica
		and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
		group by a.cd_pessoa_fisica
		
union all

		SELECT	0 qt_erro,
			count(*) qt_os,
			e.cd_pessoa_fisica
		from	usuario e,
			grupo_desenvolvimento d,
			usuario_grupo_des c,
			man_ordem_servico_exec b,
			man_ordem_servico a
		where	b.nr_seq_ordem		= a.nr_sequencia
		and	b.nm_usuario_exec	= e.nm_usuario
		and    exists ( select   1
					   from     man_estagio_processo c,
								man_ordem_serv_estagio x
					   where    x.nr_seq_estagio        = c.nr_sequencia
					   and      c.ie_desenv             = 'S'
					   and      a.nr_sequencia          = x.nr_seq_ordem)
		and	a.nr_seq_grupo_des	= d.nr_sequencia
		and	b.nm_usuario_exec	= c.nm_usuario_grupo
		and	c.nr_seq_grupo		= d.nr_sequencia
		and	coalesce(b.dt_recebimento, a.dt_ordem_servico) between trunc(to_date(dt_referencia_p),'month') and last_day(trunc(dt_referencia_p,'month')) + 86399/86400
		and	e.cd_pessoa_fisica	= c05_w.cd_pessoa_fisica
		group by e.cd_pessoa_fisica) alias21;
		
/*Validado*/
	/* QTDEF = Quantidade de OS's de defeito por pessoa */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo,
		cd_pessoa_fisica)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'DEF',
		'IND',
		'QTDEF',
		trunc(dt_referencia_p),
		qt_erro_w,
		c05_w.nr_seq_gerencia,
		c05_w.nr_sequencia,
		c05_w.cd_pessoa_fisica);
		
/*Validado*/
	/* PRDEF = % de defeito por pessoa */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo,
		cd_pessoa_fisica)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'DEF',
		'IND',
		'PRDEF',
		trunc(dt_referencia_p),
		pr_erro_w,
		c05_w.nr_seq_gerencia,
		c05_w.nr_sequencia,
		c05_w.cd_pessoa_fisica);
		
/*Validado*/
	/* QTOSRG = Quantidade de OS recebida por pessoa */

	insert into w_indicador_desenv(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_indicador,
		ie_abrangencia,
		ie_informacao,
		dt_referencia,
		qt_informacao,
		nr_seq_gerencia,
		nr_seq_grupo,
		cd_pessoa_fisica)
	values (	nextval('w_indicador_desenv_seq'),
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		'Tasy',
		'PRO',
		'IND',
		'QTOSRG',
		trunc(dt_referencia_p),
		qt_total_w,
		c05_w.nr_seq_gerencia,
		c05_w.nr_sequencia,
		c05_w.cd_pessoa_fisica);

end loop;
close C05;

/*  GRAVAR INDICADORES EM FORMA DE LINHA PARA APRESENTAR EM TELA*/

CALL gerar_w_indicador_desenv_apres(trunc(dt_referencia_p));

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_indicador_desenv (dt_referencia_p timestamp) FROM PUBLIC;

