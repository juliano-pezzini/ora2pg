-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_obter_se_cobra_co_filme ( nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, dt_procedimento_ref_p pls_conta_proc.dt_procedimento_referencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_cobrar_custo_op_p INOUT pls_regra_cobr_val_pos.ie_cobrar_custo_op%type, ie_cobrar_filme_p INOUT pls_regra_cobr_val_pos.ie_cobrar_filme%type, nr_seq_regra_p INOUT pls_regra_cobr_val_pos.nr_sequencia%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: 	Verificar se deve ser cobrado os valores de CO e Filme do pós-estabelecido
	conforme regra de cobrança de custo operacional cadastrada na pasta
	"OPS - Contas Médicas / Cobrança custo operacional" da "OPS - Cadastro de Regras"
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Criada com base em um cursor pois futuramente pode ser necessário acrescentar verificações.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_cobrar_custo_op_w	pls_regra_cobr_val_pos.ie_cobrar_custo_op%type := 'S';
ie_cobrar_filme_w	pls_regra_cobr_val_pos.ie_cobrar_filme%type := 'S';
nr_seq_grau_partic_w	pls_grau_participacao.nr_sequencia%type;
nr_seq_regra_w		pls_regra_cobr_val_pos.nr_sequencia%type;
qt_regra_w		integer;

C01 CURSOR(	nr_seq_grau_partic_pc	pls_grau_participacao.nr_sequencia%type,
		cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type,
		dt_procedimento_ref_pc	pls_conta_proc.dt_procedimento_referencia%type) FOR
	SELECT	ie_cobrar_custo_op,
		ie_cobrar_filme,
		nr_sequencia
	from	pls_regra_cobr_val_pos
	where	dt_procedimento_ref_pc between dt_inicio_vigencia_ref and dt_fim_vigencia_ref
	and	cd_estabelecimento = cd_estabelecimento_pc
	and	((coalesce(nr_seq_grau_partic::text, '') = '') or (nr_seq_grau_partic = nr_seq_grau_partic_pc))
	order by nr_seq_grau_partic;

BEGIN
select	max(nr_seq_grau_partic)
into STRICT	nr_seq_grau_partic_w
from	pls_proc_participante
where	nr_seq_conta_proc = nr_seq_conta_proc_p;

if (coalesce(nr_seq_grau_partic_w::text, '') = '') then
	select	max(a.nr_seq_grau_partic)
	into STRICT	nr_seq_grau_partic_w
	from	pls_conta a,
		pls_conta_proc b
	where	a.nr_sequencia = b.nr_seq_conta
	and	b.nr_sequencia = nr_seq_conta_proc_p;
end if;

for r_C01_w in C01(nr_seq_grau_partic_w, cd_estabelecimento_p, dt_procedimento_ref_p) loop

	ie_cobrar_custo_op_w := r_C01_w.ie_cobrar_custo_op;
	ie_cobrar_filme_w := r_C01_w.ie_cobrar_filme;
	nr_seq_regra_w := r_C01_w.nr_sequencia;
	-- Se achou uma regra sai do cursor
	exit;
end loop;

ie_cobrar_custo_op_p 	:= ie_cobrar_custo_op_w;
ie_cobrar_filme_p 	:= ie_cobrar_filme_w;
nr_seq_regra_p		:= nr_seq_regra_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obter_se_cobra_co_filme ( nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, dt_procedimento_ref_p pls_conta_proc.dt_procedimento_referencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_cobrar_custo_op_p INOUT pls_regra_cobr_val_pos.ie_cobrar_custo_op%type, ie_cobrar_filme_p INOUT pls_regra_cobr_val_pos.ie_cobrar_filme%type, nr_seq_regra_p INOUT pls_regra_cobr_val_pos.nr_sequencia%type) FROM PUBLIC;

