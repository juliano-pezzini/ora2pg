-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE define_preco_proc_sus_fixo ( DT_PROCEDIMENTO_P timestamp, CD_PROCEDIMENTO_P bigint, IE_ORIGEM_PROCED_P bigint, CD_CONVENIO_P bigint, QT_ATO_MEDICO_P INOUT bigint, QT_ATO_ANESTESISTA_P INOUT bigint, VL_MATMED_P INOUT bigint, VL_DIARIA_P INOUT bigint, VL_TAXAS_P INOUT bigint, VL_MEDICO_P INOUT bigint, VL_SADT_P INOUT bigint, VL_CONTRASTE_P INOUT bigint, VL_GESSO_P INOUT bigint, VL_QUIMIOTERAPIA_P INOUT bigint, VL_DIALISE_P INOUT bigint, VL_TPH_P INOUT bigint, VL_FILME_RX_P INOUT bigint, VL_FILME_RESSONANCIA_P INOUT bigint, VL_ANESTESIA_P INOUT bigint, VL_SADT_RX_P INOUT bigint, VL_SADT_PC_P INOUT bigint, VL_OUTROS_P INOUT bigint, VL_ATO_MEDICO_P INOUT bigint, VL_ATO_ANESTESISTA_P INOUT bigint, VL_PROCEDIMENTO_P INOUT bigint, CD_PORTE_P INOUT bigint, DT_COMPETENCIA_P INOUT timestamp, IE_VERSAO_P INOUT text, VL_ADIC_PLANT_P INOUT bigint) AS $body$
DECLARE



DT_COMPETENCIA_W        timestamp		:= clock_timestamp();
VL_MATMED_W             double precision	:= 0;
VL_DIARIA_W             double precision	:= 0;
VL_TAXAS_W              double precision	:= 0;
VL_MEDICO_W             double precision	:= 0;
VL_SADT_W		double precision	:= 0;
VL_CONTRASTE_W		double precision	:= 0;
VL_GESSO_W		double precision	:= 0;
VL_QUIMIOTERAPIA_W	double precision	:= 0;
VL_DIALISE_W		double precision	:= 0;
VL_TPH_W		double precision	:= 0;
VL_FILME_RX_W		double precision	:= 0;
VL_FILME_RESSONANCIA_W	double precision	:= 0;
VL_ANESTESIA_W		double precision	:= 0;
VL_SADT_RX_W		double precision	:= 0;
VL_SADT_PC_W		double precision	:= 0;
VL_OUTROS_W		double precision	:= 0;
VL_ATO_MEDICO_W		double precision	:= 0;
VL_ATO_ANESTESISTA_W	double precision	:= 0;
VL_PROCEDIMENTO_W	double precision	:= 0;
vl_adic_plant_w		double precision	:= 0;
QT_ATO_MEDICO_W         smallint	:= 0;
QT_ATO_ANESTESISTA_W    smallint	:= 0;
cd_porte_W    		smallint	:= 0;
IE_VERSAO_W		varchar(20)	:= '';
CD_VERSAO_W		varchar(20)	:= 'N';
CD_GRUPO_SUS_W		varchar(15);



BEGIN
vl_adic_plant_w	:= 0;

/* Obter valores do sus_preco_procaih */

if (ie_origem_proced_p = 2) then
	select	ie_versao_aih
	into STRICT	ie_versao_w
	from	convenio_sus_fixo
	where	cd_convenio	= cd_convenio_p
	and	dt_competencia	= (	SELECT	max(dt_competencia)
       					from 	convenio_sus_fixo
       					where 	dt_competencia  	<= dt_procedimento_p);

	begin
	select	coalesce(qt_ato_medico,0),
      		coalesce(qt_ato_anestesista,0),
       		coalesce(vl_matmed,0),
       		coalesce(vl_diaria,0),
       		coalesce(vl_taxas,0),
       		coalesce(vl_medico,0),
       		coalesce(vl_sadt,0),
       		dt_competencia
	into STRICT	qt_ato_medico_w,
       		qt_ato_anestesista_w,
       		vl_matmed_w,
       		vl_diaria_w,
       		vl_taxas_w,
       		vl_medico_w,
       		vl_sadt_w,
       		dt_competencia_w
	from	sus_preco_procaih
 	where	cd_procedimento  	= cd_procedimento_p
   	and	ie_origem_proced	= ie_origem_proced_p
	and	ie_versao	 	= ie_versao_w;
	exception
    		when others then
        		vl_medico_w	:= 0;
	end;

	begin
	select	cd_grupo_sus
	into STRICT	cd_grupo_sus_w
	from	procedimento
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p;
	exception
    		when others then
         		cd_grupo_sus_w	:= '0';
	end;

	if (cd_grupo_sus_w	= '10') or (cd_grupo_sus_w	= '13') then
		vl_medico_w	:= vl_matmed_w;
		vl_matmed_w	:= 0;
	end if;
end if;

if (ie_origem_proced_p = 2) then
	vl_procedimento_w := (vl_matmed_w);
end if;

/* Obter valores do sus_preco_procbpa */

if (ie_origem_proced_p = 3) then
	begin
	select	ie_versao_bpa
	into STRICT	ie_versao_w
	from	convenio_sus_fixo
	where	cd_convenio	= cd_convenio_p
	and	dt_competencia	= (	SELECT	max(dt_competencia)
       					from 	convenio_sus_fixo
       					where 	dt_competencia  	<= dt_procedimento_p);

	select	coalesce(vl_tph,0),
		coalesce(vl_taxa_sala,0),
      		coalesce(vl_honorario_medico,0),
       		coalesce(vl_anestesia,0),
       		coalesce(vl_matmed,0),
       		coalesce(vl_contraste,0),
       		coalesce(vl_filme_rx,0),
		coalesce(vl_gesso,0),
		coalesce(vl_quimioterapia,0),
		coalesce(vl_dialise,0),
		coalesce(vl_sadt_rx,0),
		coalesce(vl_sadt_pc,0),
		coalesce(vl_sadt_outros,0),
		coalesce(vl_filme_ressonancia,0),
		coalesce(vl_outros,0),
		coalesce(vl_procedimento,0),
		coalesce(vl_plantonista,0),
       		dt_competencia
	into STRICT	vl_tph_w,
       		vl_taxas_w,
       		vl_medico_w,
       		vl_anestesia_w,
       		vl_matmed_w,
       		vl_contraste_w,
       		vl_filme_rx_w,
		vl_gesso_w,
		vl_quimioterapia_w,
		vl_dialise_W,
		vl_sadt_rx_w,
		vl_sadt_pc_w,
		vl_sadt_w,
		vl_filme_ressonancia_w,
		vl_outros_w,
		vl_procedimento_w,
		vl_adic_plant_w,
       		dt_competencia_w
  	from	sus_preco_procbpa
 	where	cd_procedimento  	= cd_procedimento_p
   	and	ie_origem_proced	= ie_origem_proced_p
	and	ie_versao		= ie_versao_w;
	exception
    		when others then
        		vl_medico_w	:= 0;
	end;
end if;

if (cd_procedimento_p <> 45000050) then
	cd_porte_w		:= 999;
	qt_ato_anestesista_w	:= 0;
end if;

qt_ato_medico_p		:= qt_ato_medico_w;
qt_ato_anestesista_p	:= qt_ato_anestesista_w;
vl_matmed_p		:= vl_matmed_w;
vl_diaria_p		:= vl_diaria_w;
vl_taxas_p		:= vl_taxas_w;
vl_medico_p		:= vl_medico_w;
vl_sadt_p		:= vl_sadt_w;
dt_competencia_p	:= dt_competencia_w;
vl_tph_p		:= vl_tph_w;
vl_anestesia_p		:= vl_anestesia_w;
vl_contraste_p		:= vl_contraste_w;
vl_filme_rx_p		:= vl_filme_rx_w;
vl_gesso_p		:= vl_gesso_w;
vl_quimioterapia_p	:= vl_quimioterapia_w;
vl_dialise_p		:= vl_dialise_w;
vl_sadt_rx_p		:= vl_sadt_rx_w;
vl_sadt_pc_p		:= vl_sadt_pc_w;
vl_filme_ressonancia_p	:= vl_filme_ressonancia_w;
vl_outros_p		:= vl_outros_w;
vl_procedimento_p	:= vl_procedimento_w;
ie_versao_p		:= ie_versao_w;
vl_adic_plant_p		:= vl_adic_plant_w;
cd_porte_p		:= cd_porte_w;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE define_preco_proc_sus_fixo ( DT_PROCEDIMENTO_P timestamp, CD_PROCEDIMENTO_P bigint, IE_ORIGEM_PROCED_P bigint, CD_CONVENIO_P bigint, QT_ATO_MEDICO_P INOUT bigint, QT_ATO_ANESTESISTA_P INOUT bigint, VL_MATMED_P INOUT bigint, VL_DIARIA_P INOUT bigint, VL_TAXAS_P INOUT bigint, VL_MEDICO_P INOUT bigint, VL_SADT_P INOUT bigint, VL_CONTRASTE_P INOUT bigint, VL_GESSO_P INOUT bigint, VL_QUIMIOTERAPIA_P INOUT bigint, VL_DIALISE_P INOUT bigint, VL_TPH_P INOUT bigint, VL_FILME_RX_P INOUT bigint, VL_FILME_RESSONANCIA_P INOUT bigint, VL_ANESTESIA_P INOUT bigint, VL_SADT_RX_P INOUT bigint, VL_SADT_PC_P INOUT bigint, VL_OUTROS_P INOUT bigint, VL_ATO_MEDICO_P INOUT bigint, VL_ATO_ANESTESISTA_P INOUT bigint, VL_PROCEDIMENTO_P INOUT bigint, CD_PORTE_P INOUT bigint, DT_COMPETENCIA_P INOUT timestamp, IE_VERSAO_P INOUT text, VL_ADIC_PLANT_P INOUT bigint) FROM PUBLIC;

