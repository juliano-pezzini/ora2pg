-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_sugerir_horarios (( nr_seq_agenda_int_p bigint, cd_pessoa_fisica_p text, dt_agenda_p timestamp, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, dt_gerado_p out timestamp, ie_transferencia_p text default 'N', cd_turno_p text, nr_seq_regiao_p bigint, cd_profissional_p text, cd_empresa_p bigint, cd_estab_agenda_p bigint, ie_pendente_p out text, ie_remarcar_p text default null) is nr_seq_item_w bigint) AS $body$
DECLARE


	nr_retorno_w	bigint;
			
	
BEGIN
	if (ie_multimed_w = 'S') then /* MULTIMED */
		select 	max(nr_sequencia)
		into STRICT	nr_retorno_w
		from(
			SELECT	a.nr_Sequencia
			from	ageint_horarios_usuario a
			where	a.ie_Status_agenda	in ('L','B')                                            
			and	trunc(a.hr_Agenda)	= trunc(dt_controle_w)
			and	a.hr_agenda		>= dt_inicial_w
			and	a.hr_agenda		<= dt_final_p
			and	a.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w), a.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440) 
			and	a.nm_usuario		= nm_usuario_p  
			and	a.nr_sequencia		> nr_seq_hor_ant_w
			and (a.cd_agenda	= cd_agenda_marc_w or cd_agenda_marc_w = 0)
			and	((a.cd_pessoa_fisica = cd_profissional_p) or (coalesce(cd_profissional_p::text, '') = ''))
			and	exists (	SELECT 	1                                                                                
						from 	ageint_lib_usuario b                                                                      
						where 	a.nr_seq_ageint_lib 	= b.nr_sequencia                                                    
						and 	b.nr_seq_ageint_item 	= nr_seq_item_w)                                                     
			and	not exists (	select 	1                                                                                
						from 	ageint_sugestao_horarios x                                                                
						where 	x.nr_seq_hor 	= a.nr_sequencia)
			and	a.hr_Agenda	= (	select	min(c.hr_Agenda) 
							from	ageint_horarios_usuario c          
							where	c.ie_Status_agenda	in ('L','B')
							and	trunc(c.hr_Agenda)	= trunc(dt_controle_w)
							and	c.hr_agenda		>= dt_inicial_w
							and	c.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w) + coalesce(nr_min_dur_ant_aux_w - 1,1)/1440 , c.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440)
							and	c.hr_agenda		<= dt_final_p
							and	c.nm_usuario		= nm_usuario_p  
							and	((c.cd_turno		= cd_turno_p)
							or (cd_turno_p 		= '2')
							or (cd_turno_p			= '3' 
							and 	ie_tipo_Agendamento_w <> 'E'))
							and (c.cd_agenda		= cd_agenda_marc_w or cd_agenda_marc_w = 0)
							and (c.cd_agenda = a.cd_agenda)
							and	not exists (	select 	1                                      
										from 	ageint_sugestao_horarios y                      
										where 	y.nr_seq_hor = c.nr_sequencia)                 
							and	exists (	select 	1                                      
										from 	ageint_lib_usuario d                            
										where 	c.nr_seq_ageint_lib = d.nr_sequencia           
										and 	d.nr_seq_ageint_item = nr_seq_item_w)
							and	((exists	(	select	1
										from	agenda w
										where	w.cd_agenda = a.cd_agenda
										and	((w.qt_peso_max >= qt_peso_w) or (coalesce(w.qt_peso_max::text, '') = ''))
										and	ie_bloq_peso_w = 'N')) or (ie_bloq_peso_w <> 'N'))
							and	exists	(	select	1
										from	agenda xa,
											estabelecimento xb,
											empresa xc
										where	xa.cd_agenda = a.cd_agenda
										and	xa.cd_estabelecimento = xb.cd_estabelecimento
										and	xb.cd_empresa = xc.cd_empresa
										and	((xc.cd_empresa = cd_empresa_p) or (coalesce(cd_empresa_p::text, '') = ''))
										and	((xb.cd_estabelecimento = cd_estab_agenda_p) or (coalesce(cd_estab_agenda_p::text, '') = '')))
							and (	exists (	select	1 
										from	agenda_regiao r
										where	r.cd_agenda = a.cd_agenda
										and (r.nr_seq_regiao = nr_seq_regiao_p)) or (coalesce(nr_seq_regiao_p::text, '') = ''))
							and	c.hr_agenda	> clock_timestamp())
			order by dbms_random.value()) LIMIT 1;
	elsif (ie_sug_hor_bloq_w = 'S') then
		select 	max(nr_sequencia)
		into STRICT	nr_retorno_w
		from(
			SELECT	a.nr_Sequencia
			from	ageint_horarios_usuario a
			where	a.ie_Status_agenda	in ('L','B')                                            
			and	trunc(a.hr_Agenda)	= trunc(dt_controle_w)
			and	a.hr_agenda		>= dt_inicial_w
			and	a.hr_agenda		<= dt_final_p
			and	a.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w), a.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440) 
			and	a.nm_usuario		= nm_usuario_p  
			and	a.nr_sequencia		> nr_seq_hor_ant_w
			and (a.cd_agenda	= cd_agenda_marc_w or cd_agenda_marc_w = 0)
			and	exists (	SELECT 	1                                                                                
						from 	ageint_lib_usuario b                                                                      
						where 	a.nr_seq_ageint_lib 	= b.nr_sequencia                                                    
						and 	b.nr_seq_ageint_item 	= nr_seq_item_w)                                                     
			and	not exists (	select 	1                                                                                
						from 	ageint_sugestao_horarios x                                                                
						where 	x.nr_seq_hor 	= a.nr_sequencia)
			and	a.hr_Agenda	= (	select	min(c.hr_Agenda) 
							from	ageint_horarios_usuario c          
							where	c.ie_Status_agenda	in ('L','B')
							and	trunc(c.hr_Agenda)	= trunc(dt_controle_w)
							and	c.hr_agenda		>= dt_inicial_w
							and	c.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w) + coalesce(nr_min_dur_ant_aux_w - 1,1)/1440 , c.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440)
							and	c.hr_agenda		<= dt_final_p
							and	c.nm_usuario		= nm_usuario_p  
							and	((c.cd_turno		= cd_turno_p)
							or (cd_turno_p 		= '2')
							or (cd_turno_p			= '3' 
							and ie_tipo_Agendamento_w <> 'E'))
							and (c.cd_agenda		= cd_agenda_marc_w or cd_agenda_marc_w = 0)
							and (c.cd_agenda = a.cd_agenda)
							and	not exists (	select 	1                                      
										from 	ageint_sugestao_horarios y                      
										where 	y.nr_seq_hor = c.nr_sequencia)                 
							and	exists (	select 	1                                      
										from 	ageint_lib_usuario d                            
										where 	c.nr_seq_ageint_lib = d.nr_sequencia           
										and 	d.nr_seq_ageint_item = nr_seq_item_w)
							and	((exists	(	select	1
										from	agenda w
										where	w.cd_agenda = a.cd_agenda
										and	((w.qt_peso_max >= qt_peso_w) or (coalesce(w.qt_peso_max::text, '') = ''))
										and	ie_bloq_peso_w = 'N')) or (ie_bloq_peso_w <> 'N'))
							and	exists (		select	1
										from	agenda z
										where	z.cd_agenda = a.cd_agenda
										and	coalesce(z.ie_sugestao_hor_integrada,'S') = 'S')
							and	c.hr_agenda	> clock_timestamp())
			order by dbms_random.value()) LIMIT 1;
	else
		select 	max(nr_sequencia)
		into STRICT	nr_retorno_w
		from(
			SELECT	a.nr_Sequencia
			from	ageint_horarios_usuario a
			where	a.ie_Status_agenda	= 'L'                                         
			and	trunc(a.hr_Agenda)	= trunc(dt_controle_w)
			and	a.hr_agenda		>= dt_inicial_w
			and	a.hr_agenda		<= dt_final_p
			and	a.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w), a.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440) 
			and	a.nm_usuario		= nm_usuario_p  
			and	a.nr_sequencia		> nr_seq_hor_ant_w
			and (a.cd_agenda	= cd_agenda_marc_w or cd_agenda_marc_w = 0)
			and	exists (	SELECT 	1                                                                                
						from 	ageint_lib_usuario b                                                                      
						where 	a.nr_seq_ageint_lib 	= b.nr_sequencia                                                    
						and 	b.nr_seq_ageint_item 	= nr_seq_item_w)                                                     
			and	not exists (	select 	1                                                                                
						from 	ageint_sugestao_horarios x                                                                
						where 	x.nr_seq_hor 	= a.nr_sequencia)
			and	a.hr_Agenda	= (	select	min(c.hr_Agenda)                                                         
							from	ageint_horarios_usuario c                                                                 
							where	c.ie_Status_agenda	= 'L'                                                        
							and	trunc(c.hr_Agenda)	= trunc(dt_controle_w)
							and	c.hr_agenda		>= dt_inicial_w
							and	c.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w) + coalesce(nr_min_dur_ant_aux_w - 1,1)/1440 , c.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440)
							and	c.hr_agenda		<= dt_final_p
							and	c.nm_usuario		= nm_usuario_p  
							and	((c.cd_turno		= cd_turno_p)
							or (cd_turno_p 		= '2')
							or (cd_turno_p			= '3' 
							and ie_tipo_Agendamento_w <> 'E'))
							and (c.cd_agenda		= cd_agenda_marc_w or cd_agenda_marc_w = 0)
							and (c.cd_agenda = a.cd_agenda)
							and	not exists (	select 	1                                      
										from 	ageint_sugestao_horarios y                      
										where 	y.nr_seq_hor = c.nr_sequencia)                 
							and	exists (	select 	1                                      
										from 	ageint_lib_usuario d                            
										where 	c.nr_seq_ageint_lib = d.nr_sequencia           
										and 	d.nr_seq_ageint_item = nr_seq_item_w)
							and	((exists	(	select	1
										from	agenda w
										where	w.cd_agenda = a.cd_agenda
										and	((w.qt_peso_max >= qt_peso_w) or (coalesce(w.qt_peso_max::text, '') = ''))
										and	ie_bloq_peso_w = 'N')) or (ie_bloq_peso_w <> 'N'))
							and	exists (		select	1
										from	agenda z
										where	z.cd_agenda = a.cd_agenda
										and	coalesce(z.ie_sugestao_hor_integrada,'S') = 'S')														
							and	c.hr_agenda	> clock_timestamp())
			order by dbms_random.value()) LIMIT 1;
	end if;

	return;

	end;
	
function obter_primeiro_horario
		return;
		
	begin
	if (ie_multimed_w = 'S') then /* MULTIMED */
		select 	max(nr_sequencia)
		into STRICT	nr_retorno_w
		from(
			SELECT	a.nr_Sequencia
			from	ageint_horarios_usuario a
			where	a.ie_Status_agenda	in ('L','B')                                            
			and	trunc(a.hr_Agenda)	= trunc(dt_controle_w)
			and	a.hr_agenda		>= dt_inicial_w
			and	a.hr_agenda		<= dt_final_p
			and	a.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w), a.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440) 
			and	a.nm_usuario		= nm_usuario_p  
			and	a.nr_sequencia		> nr_seq_hor_ant_w
			and (a.cd_agenda	= cd_agenda_marc_w or cd_agenda_marc_w = 0)
			and	((a.cd_pessoa_fisica = cd_profissional_p) or (coalesce(cd_profissional_p::text, '') = ''))
			and	exists (	SELECT 	1                                                                                
						from 	ageint_lib_usuario b                                                                      
						where 	a.nr_seq_ageint_lib 	= b.nr_sequencia                                                    
						and 	b.nr_seq_ageint_item 	= nr_seq_item_w)                                                     
			and	not exists (	select 	1                                                                                
						from 	ageint_sugestao_horarios x                                                                
						where 	x.nr_seq_hor 	= a.nr_sequencia)
			and	a.hr_Agenda	= (	select	min(c.hr_Agenda) 
							from	ageint_horarios_usuario c          
							where	c.ie_Status_agenda	in ('L','B')
							and	trunc(c.hr_Agenda)	= trunc(dt_controle_w)
							and	c.hr_agenda		>= dt_inicial_w
							and	c.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w) + coalesce(nr_min_dur_ant_aux_w - 1,1)/1440 , c.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440)
							and	c.hr_agenda		<= dt_final_p
							and	c.nm_usuario		= nm_usuario_p  
							and	((c.cd_turno		= cd_turno_p)
							or (cd_turno_p 		= '2')
							or (cd_turno_p			= '3' 
							and 	ie_tipo_Agendamento_w <> 'E'))
							and (c.cd_agenda		= cd_agenda_marc_w or cd_agenda_marc_w = 0)
							and (c.cd_agenda = a.cd_agenda)
							and	not exists (	select 	1                                      
										from 	ageint_sugestao_horarios y                      
										where 	y.nr_seq_hor = c.nr_sequencia)                 
							and	exists (	select 	1                                      
										from 	ageint_lib_usuario d                            
										where 	c.nr_seq_ageint_lib = d.nr_sequencia           
										and 	d.nr_seq_ageint_item = nr_seq_item_w)
							and	((exists	(	select	1
										from	agenda w
										where	w.cd_agenda = a.cd_agenda
										and	((w.qt_peso_max >= qt_peso_w) or (coalesce(w.qt_peso_max::text, '') = ''))
										and	ie_bloq_peso_w = 'N')) or (ie_bloq_peso_w <> 'N'))
							and	exists	(	select	1
										from	agenda xa,
											estabelecimento xb,
											empresa xc
										where	xa.cd_agenda = a.cd_agenda
										and	xa.cd_estabelecimento = xb.cd_estabelecimento
										and	xb.cd_empresa = xc.cd_empresa
										and	((xc.cd_empresa = cd_empresa_p) or (coalesce(cd_empresa_p::text, '') = ''))
										and	((xb.cd_estabelecimento = cd_estab_agenda_p) or (coalesce(cd_estab_agenda_p::text, '') = '')))
							and (	exists (	select	1 
										from	agenda_regiao r
										where	r.cd_agenda = a.cd_agenda
										and (r.nr_seq_regiao = nr_seq_regiao_p)) or (coalesce(nr_seq_regiao_p::text, '') = ''))
							and	c.hr_agenda	> clock_timestamp())
			order by a.hr_agenda) LIMIT 1;
	elsif (ie_sug_hor_bloq_w = 'S') then
		select 	max(nr_sequencia)
		into STRICT	nr_retorno_w
		from(
			SELECT	a.nr_Sequencia
			from	ageint_horarios_usuario a
			where	a.ie_Status_agenda	in ('L','B')                                            
			and	trunc(a.hr_Agenda)	= trunc(dt_controle_w)
			and	a.hr_agenda		>= dt_inicial_w
			and	a.hr_agenda		<= dt_final_p
			and	a.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w), a.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440) 
			and	a.nm_usuario		= nm_usuario_p  
			and	a.nr_sequencia		> nr_seq_hor_ant_w
			and (a.cd_agenda	= cd_agenda_marc_w or cd_agenda_marc_w = 0)
			and	exists (	SELECT 	1                                                                                
						from 	ageint_lib_usuario b                                                                      
						where 	a.nr_seq_ageint_lib 	= b.nr_sequencia                                                    
						and 	b.nr_seq_ageint_item 	= nr_seq_item_w)                                                     
			and	not exists (	select 	1                                                                                
						from 	ageint_sugestao_horarios x                                                                
						where 	x.nr_seq_hor 	= a.nr_sequencia)
			and	a.hr_Agenda	= (	select	min(c.hr_Agenda) 
							from	ageint_horarios_usuario c          
							where	c.ie_Status_agenda	in ('L','B')
							and	trunc(c.hr_Agenda)	= trunc(dt_controle_w)
							and	c.hr_agenda		>= dt_inicial_w
							and	c.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w) + coalesce(nr_min_dur_ant_aux_w - 1,1)/1440 , c.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440)
							and	c.hr_agenda		<= dt_final_p
							and	c.nm_usuario		= nm_usuario_p  
							and	((c.cd_turno		= cd_turno_p)
							or (cd_turno_p 		= '2')
							or (cd_turno_p			= '3' 
							and ie_tipo_Agendamento_w <> 'E'))
							and (c.cd_agenda		= cd_agenda_marc_w or cd_agenda_marc_w = 0)
							and (c.cd_agenda = a.cd_agenda)
							and	not exists (	select 	1                                      
										from 	ageint_sugestao_horarios y                      
										where 	y.nr_seq_hor = c.nr_sequencia)                 
							and	exists (	select 	1                                      
										from 	ageint_lib_usuario d                            
										where 	c.nr_seq_ageint_lib = d.nr_sequencia           
										and 	d.nr_seq_ageint_item = nr_seq_item_w)
							and	((exists	(	select	1
										from	agenda w
										where	w.cd_agenda = a.cd_agenda
										and	((w.qt_peso_max >= qt_peso_w) or (coalesce(w.qt_peso_max::text, '') = ''))
										and	ie_bloq_peso_w = 'N')) or (ie_bloq_peso_w <> 'N'))
							and	exists (		select	1
										from	agenda z
										where	z.cd_agenda = a.cd_agenda
										and	coalesce(z.ie_sugestao_hor_integrada,'S') = 'S')
							and	c.hr_agenda	> clock_timestamp())
			order by a.hr_agenda) LIMIT 1;
	else
		select 	max(nr_sequencia)
		into STRICT	nr_retorno_w
		from(
			SELECT	a.nr_Sequencia
			from	ageint_horarios_usuario a
			where	a.ie_Status_agenda	= 'L'                                         
			and	trunc(a.hr_Agenda)	= trunc(dt_controle_w)
			and	a.hr_agenda		>= dt_inicial_w
			and	a.hr_agenda		<= dt_final_p
			and	a.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w), a.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440) 
			and	a.nm_usuario		= nm_usuario_p  
			and	a.nr_sequencia		> nr_seq_hor_ant_w
			and (a.cd_agenda	= cd_agenda_marc_w or cd_agenda_marc_w = 0)
			and	exists (	SELECT 	1                                                                                
						from 	ageint_lib_usuario b                                                                      
						where 	a.nr_seq_ageint_lib 	= b.nr_sequencia                                                    
						and 	b.nr_seq_ageint_item 	= nr_seq_item_w)                                                     
			and	not exists (	select 	1                                                                                
						from 	ageint_sugestao_horarios x                                                                
						where 	x.nr_seq_hor 	= a.nr_sequencia)
			and	a.hr_Agenda	= (	select	min(c.hr_Agenda)                                                         
							from	ageint_horarios_usuario c                                                                 
							where	c.ie_Status_agenda	= 'L'                                                        
							and	trunc(c.hr_Agenda)	= trunc(dt_controle_w)
							and	c.hr_agenda		>= dt_inicial_w
							and	c.hr_Agenda 		> coalesce(coalesce(hr_agenda_ant_Erro_w, hr_agenda_ant_w) + coalesce(nr_min_dur_ant_aux_w - 1,1)/1440 , c.hr_agenda - 2/1440) --+ (nvl(nr_min_dur_ant_w,1) / 1440)
							and	c.hr_agenda		<= dt_final_p
							and	c.nm_usuario		= nm_usuario_p  
							and	((c.cd_turno		= cd_turno_p)
							or (cd_turno_p 		= '2')
							or (cd_turno_p			= '3' 
							and ie_tipo_Agendamento_w <> 'E'))
							and (c.cd_agenda		= cd_agenda_marc_w or cd_agenda_marc_w = 0)
							and (c.cd_agenda = a.cd_agenda)
							and	not exists (	select 	1                                      
										from 	ageint_sugestao_horarios y                      
										where 	y.nr_seq_hor = c.nr_sequencia)                 
							and	exists (	select 	1                                      
										from 	ageint_lib_usuario d                            
										where 	c.nr_seq_ageint_lib = d.nr_sequencia           
										and 	d.nr_seq_ageint_item = nr_seq_item_w)
							and	((exists	(	select	1
										from	agenda w
										where	w.cd_agenda = a.cd_agenda
										and	((w.qt_peso_max >= qt_peso_w) or (coalesce(w.qt_peso_max::text, '') = ''))
										and	ie_bloq_peso_w = 'N')) or (ie_bloq_peso_w <> 'N'))
							and	exists (		select	1
										from	agenda z
										where	z.cd_agenda = a.cd_agenda
										and	coalesce(z.ie_sugestao_hor_integrada,'S') = 'S')														
							and	c.hr_agenda	> clock_timestamp())
			order by a.hr_agenda) LIMIT 1;
	end if;

	return;

	end;
	
begin
cd_agenda_marc_w	:= 0;

ie_dia_semana_w := obter_cod_dia_semana(dt_agenda_p);
dt_parametro_w := null;

if (coalesce(nr_seq_agenda_int_p,0) > 0) then
	select	max(cd_categoria), 
		max(cd_convenio),
		max(cd_plano),
		coalesce(max(qt_peso),0),
		max(ie_tipo_atendimento),
		max(obter_idade_pf(cd_pessoa_fisica, clock_timestamp(), 'A')),
		max(cd_pessoa_fisica)
	into STRICT	cd_categoria_w,
		cd_convenio_w,
		cd_plano_w,
		qt_peso_w,
		ie_tipo_atendimento_w,
		qt_idade_w,
		cd_pessoa_fisica_w
	from	agenda_integrada
	where   nr_sequencia = nr_seq_agenda_int_p;
end if;

nr_glosa_part_w	:= 99;

nr_min_entre_hor_w	:= coalesce(Obter_Valor_Param_Usuario(869, 105, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 15);

nr_tentativas_w		:= coalesce(Obter_Valor_Param_Usuario(869, 159, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 250);

ie_dias_distintos_w	:= Obter_Valor_Param_Usuario(869, 166, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p);

qt_min_w := Obter_Param_Usuario(869, 239, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_min_w);

ie_consist_Regra_Exame_w := Obter_Param_Usuario(869, 268, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consist_Regra_Exame_w);

ie_bloq_glosa_part_w := obter_param_usuario(869, 187, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_bloq_glosa_part_w);

ie_bloq_peso_w := Obter_Param_Usuario(820, 37, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_bloq_peso_w);

ie_sug_hor_bloq_w := Obter_Param_Usuario(869, 307, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_sug_hor_bloq_w);

ie_consiste_anest_w := obter_param_usuario(869, 264, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_anest_w);

ie_rodizio_proc_w := obter_param_usuario(869, 357, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_rodizio_proc_w);

qt_dias_rodizio_w := obter_param_usuario(869, 198, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_dias_rodizio_w);

ie_multimed_w := obter_param_usuario(0, 198, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_multimed_w);

ie_regra_idade_agecons_w := Obter_Param_Usuario(869, 155, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_regra_idade_agecons_w);

ie_gerar_hor_marc_w := Obter_Param_Usuario(869, 378, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_hor_marc_w);

ie_cons_dur_exames_adic_w := Obter_Param_Usuario(869, 303, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_cons_dur_exames_adic_w);

ie_tempo_ag_coletivo := Obter_Param_Usuario(869, 410, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_tempo_ag_coletivo);

select 	max(ie_sugerir_prim_horario),
		coalesce(max(ie_utiliza_dur_classif),'N')
into STRICT	ie_prim_hor_w,
		ie_utiliza_dur_classif_w
from 	parametro_agenda_integrada
where	coalesce(cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;

if (ie_bloq_glosa_part_w = 'N') then
	nr_glosa_part_w := 8;
end if;

if (ie_Gerado_w	= 'N') then
	open C02;
	loop                                                                                   
	fetch C02 into                                                                         
		cd_agenda_imp_w,                                                                      
		hr_agenda_imp_w,                                                                      
		nr_Seq_agenda_imp_w,                                                                  
		nr_minuto_duracao_imp_w,                                                              
		nr_seq_item_imp_w,                                                                    
		nr_seq_ageint_lib_imp_w,
		cd_medico_imp_w,
		ie_anestesia_ww;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin          
		SELECT * FROM Atualiza_Dados_Marcacao(cd_agenda_imp_w, hr_agenda_imp_w, nr_Seq_agenda_imp_w, 'D', nr_minuto_duracao_imp_w, nm_usuario_p, nr_seq_item_imp_w, nr_seq_ageint_lib_imp_w, 'N', cd_medico_imp_w, ie_Reservado_w, null, ie_principal_w) INTO STRICT ie_Reservado_w, ie_principal_w;
		if (ie_principal_w = 'S') then 
			ie_pendente_w := Ageint_gerar_marcacoes_regra(nr_seq_agenda_int_p, nr_seq_item_imp_w, 'D', nm_usuario_p, cd_estabelecimento_p, ie_transferencia_p, ie_pendente_w);
		end if;
		end;
	end loop;
	close C02;
end if;

if (coalesce(ie_remarcar_p, 'N') = 'S') then
	open C06;
	loop
	fetch C06 into
		cd_agenda_imp_w,
		hr_agenda_imp_w,
		nr_Seq_agenda_imp_w,
		nr_minuto_duracao_imp_w,
		nr_seq_item_imp_w,
		nr_seq_ageint_lib_imp_w,
		cd_medico_imp_w,
		ie_anestesia_ww;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin		
		SELECT * FROM Atualiza_Dados_Marcacao(cd_agenda_imp_w, hr_agenda_imp_w, nr_seq_agenda_int_p, 'D', nr_minuto_duracao_imp_w, nm_usuario_p, nr_seq_item_imp_w, nr_seq_ageint_lib_imp_w, 'N', cd_medico_imp_w, ie_Reservado_w, null, ie_principal_w) INTO STRICT ie_Reservado_w, ie_principal_w;
		if (ie_principal_w = 'S') then
			ie_pendente_w := Ageint_gerar_marcacoes_regra(nr_seq_agenda_int_p, nr_seq_item_imp_w, 'D', nm_usuario_p, cd_estabelecimento_p, ie_transferencia_p, ie_pendente_w);
		end if;
		end;
	end loop;
	close C06;
end if;
                                                                                   
/*delete 	ageint_marcacao_usuario                                                    
where	nm_usuario		= nm_usuario_p                                                   
and	nvl(ie_Gerado,'N')	<> 'S';                                 */
                    
                                                                                   
delete 	FROM ageint_sugestao_horarios                                                   
where	nm_usuario		= nm_usuario_p                                                    
and		nr_seq_agenda	= nr_seq_agenda_int_p;

commit;

dt_controle_w	:= trunc(dt_inicial_p);

if (qt_min_w IS NOT NULL AND qt_min_w::text <> '') and (dt_inicial_p <= clock_timestamp() + coalesce(qt_min_w,0)/1440) then
	dt_inicial_w	:= clock_timestamp() + coalesce(qt_min_w,0)/1440;
else
	dt_inicial_w	:= dt_inicial_p;
end if;

while(dt_controle_w	>= trunc(dt_inicial_p))  and (dt_controle_w	<= trunc(dt_final_p)) and (ie_gerado_w	= 'N') loop
	begin
	
	SELECT * FROM Gerar_Horarios_AgeInt(dt_controle_w, nm_usuario_p, nr_seq_agenda_int_p, cd_estabelecimento_p, ds_agendas_montadas_w, ds_aux_w, ds_aux_w, ds_aux_w, ds_aux_w) INTO STRICT ds_aux_w, ds_aux_w, ds_aux_w, ds_aux_w;

	qt_tentativa_w		:= 0;
	while(ie_gerado_w = 'N') and (qt_tentativa_w	<= 100) and
		(coalesce(dt_parametro_w::text, '') = '' or ((trunc(dt_parametro_w) >= trunc(dt_inicial_p)) and (trunc(dt_parametro_w) <= trunc(dt_final_p)))) loop
		begin                                                                             
		ie_primeiro_w	:= 'S';
		hr_agenda_ant_w := null;
		nr_min_dur_ant_w := null;		
		open C01;
		loop                                                                              
		fetch C01 into                                                                    
			nr_seq_item_w,                                                                   
			nr_seq_proc_interno_w,     
			nr_prior_apresent_w,			
			nr_prioridade_w,
			nr_min_dur_item_w,
			ie_item_principal_w,
			ie_lado_w,
			ie_tipo_Agendamento_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			ie_anestesia_ww,
			ie_classif_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			ie_hor_w 		:= 'S';
			if (ie_item_principal_w <> 'N') then
				qt_tentativa_hor_w	:= 0;
				ie_item_gerado_w	:= 'N';
				while(ie_item_gerado_w	= 'N') and (qt_tentativa_hor_w	<= nr_tentativas_w) loop
					begin
					/* verifica os horarios*/
					nr_seq_hor_ant_w	:= 0;
					qt_tentativa_hor_dia_w	:= 0;
					nr_seq_horario_w	:= 0;
					while(nr_seq_horario_w	= 0) and (qt_tentativa_hor_dia_w	<= 100) loop
						begin
						
						
						/* INICIO VALIDACAO EXAME ADICIONAL REGRA TEMPO ENTRE EXAMES */

						nr_seq_proc_adic_w := nr_seq_proc_interno_w;
					
						open C05;
						loop
						fetch C05 into	
							nr_seq_regra_temp_adic_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin
							select	CASE WHEN cd_Exame_pri=nr_Seq_proc_interno_w THEN  cd_exame_Seg  ELSE cd_exame_pri END
							into STRICT	cd_exame_w
							from	ageint_tempo_entre_exames
							where	nr_sequencia	= nr_seq_regra_temp_adic_w;
							
							select	count(*)
							into STRICT	qt_regra_tempo_exame_adic_w
							from	ageint_exame_adic_item
							where	nr_seq_item = nr_seq_item_w
							and	nr_seq_proc_interno = cd_exame_w;
							
							if (qt_regra_tempo_exame_adic_w > 0) then
								CALL wheb_mensagem_pck.exibir_mensagem_abort(229800);
							end if;
							end;
						end loop;
						close C05;
					
						open C04;
						loop
						fetch C04 into	
							nr_seq_proc_adic_w;
						EXIT WHEN NOT FOUND; /* apply on C04 */
							begin
							open C05;
							loop
							fetch C05 into	
								nr_seq_regra_temp_adic_w;
							EXIT WHEN NOT FOUND; /* apply on C05 */
								begin
								select	CASE WHEN cd_Exame_pri=nr_seq_proc_adic_w THEN  cd_exame_Seg  ELSE cd_exame_pri END
								into STRICT	cd_exame_w
								from	ageint_tempo_entre_exames
								where	nr_sequencia	= nr_seq_regra_temp_adic_w;
								
								select	count(*)
								into STRICT	qt_regra_tempo_exame_adic_w
								from	ageint_exame_adic_item
								where	nr_seq_item = nr_seq_item_w
								and	nr_seq_proc_interno = cd_exame_w;
								
								if (qt_regra_tempo_exame_adic_w > 0) then
									CALL wheb_mensagem_pck.exibir_mensagem_abort(229800);
								end if;
								end;
							end loop;
							close C05;
							end;
						end loop;
						close C04;
						
						/*FIM VALIDACAO EXAME ADICIONAL REGRA TEMPO ENTRE EXAMES */

						
						if (ie_tipo_Agendamento_w = 'E') then
							SELECT * FROM Ageint_Consistir_Ex_Agenda(nr_seq_item_w, cd_estabelecimento_p, nm_usuario_p, nr_seq_agenda_int_p, cd_Agenda_w, 'S', ds_consistencia_w, hr_agenda_w, cd_agenda_marc_w) INTO STRICT ds_consistencia_w, cd_agenda_marc_w;
						end if;

						--ie_multimed_w := 'S';
						
						if (ie_prim_hor_w = 'S') then
							nr_seq_horario_w := obter_primeiro_horario;
						else
							nr_seq_horario_w := obter_horario_random;
						end if;
						
						if (coalesce(nr_seq_horario_w,0) > 0) then
							select	max(hr_agenda),
								max(nr_minuto_duracao),                                                                     
								max(nr_Seq_ageint_lib),                                                                     
								max(cd_agenda),
								max(cd_pessoa_fisica)
							into STRICT	hr_agenda_w,                                                                           
								nr_minuto_duracao_w,                                                                   
								nr_Seq_ageint_lib_w,                                                                   
								cd_agenda_w,
								cd_medico_w
							from	ageint_horarios_usuario                                                                
							where	nr_sequencia	= nr_seq_horario_w;
						end if;
						cd_agenda_marc_w	:= 0;					
						SELECT * FROM Ageint_Consistir_Ex_Agenda(nr_seq_item_w, cd_estabelecimento_p, nm_usuario_p, nr_seq_agenda_int_p, cd_Agenda_w, 'S', ds_consistencia_w, hr_agenda_w, cd_agenda_marc_w) INTO STRICT ds_consistencia_w, cd_agenda_marc_w;
						if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '')  then
							nr_seq_hor_ant_w	:= nr_seq_horario_w;
							nr_seq_horario_w	:= 0;
						else
							cd_agenda_marc_w	:= 0;
						end if;
						ds_consistencia_w	:= '';
						qt_tentativa_hor_dia_w	:= qt_tentativa_hor_dia_w + 1;
						end;
					end loop;

					if (coalesce(nr_seq_horario_w::text, '') = '') then                                                                
						ie_erro_w	:= 'S';
						qt_tentativa_hor_w	:= nr_tentativas_w + 1;
					else
						if (coalesce(nr_seq_horario_w,0) > 0) then
							select	hr_agenda,                                                                             
								nr_minuto_duracao,                                                                     
								nr_Seq_ageint_lib,                                                                     
								cd_agenda,
								cd_pessoa_fisica
							into STRICT	hr_agenda_w,                                                                           
								nr_minuto_duracao_w,                                                                   
								nr_Seq_ageint_lib_w,                                                                   
								cd_agenda_w,
								cd_medico_w
							from	ageint_horarios_usuario                                                                
							where	nr_sequencia	= nr_seq_horario_w;
						end if;

						nr_duracao_item_coletivo_w := nr_min_dur_item_w;
						if (ie_tempo_ag_coletivo = 'S') then
							nr_duracao_item_coletivo_w := ageint_tempo_ag_coletivo(nr_seq_agenda_int_p, nr_min_dur_item_w);
						end if;
						
						if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') and (coalesce(nr_duracao_item_coletivo_w::text, '') = '') then
							qt_minuto_w := Obter_Tempo_Padrao_Ageint(nr_seq_proc_interno_w, null, null, cd_medico_w, cd_agenda_w, cd_pessoa_fisica_w, qt_minuto_w, ie_lado_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, ie_dia_semana_w);
						end if;
						
						nr_duracao_classif_w := 0;
						if (coalesce(ie_classif_agenda_w,'XPTO') <> 'XPTO') then
							select max(cd_estabelecimento)
							into STRICT   cd_estabelecimento_w
							from   agenda
							where  cd_agenda = cd_agenda_w;

							nr_duracao_classif_w := ageint_obter_dur_classif(ie_classif_agenda_w, coalesce(cd_estabelecimento_w,wheb_usuario_pck.get_cd_estabelecimento), cd_medico_w, hr_agenda_w);
						end if;
						
						qt_minuto_tot_adic_w := 0;
						if (ie_cons_dur_exames_adic_w = 'S') then
							--Exame adicional
							open C07;
							loop
							fetch C07 into
								nr_seq_exame_adic_w,
								ie_lado_adic_w;
							EXIT WHEN NOT FOUND; /* apply on C07 */
							begin
								if (nr_seq_exame_adic_w IS NOT NULL AND nr_seq_exame_adic_w::text <> '') then
									qt_minuto_aux_adic_w := Obter_Tempo_Padrao_Ageint(nr_seq_exame_adic_w, null, null, cd_medico_w, cd_agenda_w, cd_pessoa_fisica_w, qt_minuto_aux_adic_w, ie_lado_adic_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, ie_dia_semana_w);

									if (qt_minuto_aux_adic_w IS NOT NULL AND qt_minuto_aux_adic_w::text <> '')then
										qt_minuto_tot_adic_w := qt_minuto_aux_adic_w + qt_minuto_tot_adic_w;
									end if;
								end if;
							end;
							end loop;
							close C07;

							--Exame normal
							qt_minuto_aux_princ_w := Obter_Tempo_Padrao_Ageint(nr_seq_proc_interno_w, null, null, cd_medico_w, cd_agenda_w, cd_pessoa_fisica_w, qt_minuto_aux_princ_w, ie_lado_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, ie_dia_semana_w);

							if (qt_minuto_aux_princ_w IS NOT NULL AND qt_minuto_aux_princ_w::text <> '') then
								qt_minuto_tot_adic_w := qt_minuto_tot_adic_w + qt_minuto_aux_princ_w;
							end if;

							select cd_tipo_agenda
							into STRICT   cd_tipo_agenda_w
							from   agenda
							where  cd_agenda = cd_agenda_w;
							
							if (nr_duracao_classif_w > 0 AND cd_tipo_agenda_w = 3 AND ie_utiliza_dur_classif_w = 'S') then
								qt_minuto_tot_adic_w := qt_minuto_tot_adic_w + nr_duracao_classif_w;
							end if;

							if (coalesce(qt_minuto_tot_adic_w, 0) = 0) or (coalesce(qt_minuto_tot_adic_w::text, '') = '') then

								if (coalesce(qt_minuto_w, 0) > 0) then
									qt_minuto_tot_adic_w  := qt_minuto_w;
								elsif (coalesce(nr_duracao_item_coletivo_w, 0) > 0) then
									qt_minuto_tot_adic_w  := nr_duracao_item_coletivo_w;
								end if;
							end if;					
						end if;
												
						select CASE WHEN coalesce(qt_minuto_tot_adic_w, 0)=0 THEN  CASE WHEN coalesce(qt_minuto_w, 0)=0 THEN  CASE WHEN coalesce(nr_duracao_classif_w, 0)=0 THEN  CASE WHEN coalesce(nr_duracao_item_coletivo_w, 0)=0 THEN  nr_minuto_duracao_w  ELSE nr_duracao_item_coletivo_w END   ELSE nr_duracao_classif_w END   ELSE qt_minuto_w END   ELSE qt_minuto_tot_adic_w END
						into STRICT   nr_min_dur_final_w
						;

						--INICIO - Tratamento para consistir a atualizacao correta da duracao do item, caso o param. [264] esteja habilitado, com base na duracao de acordo com a necessidade de anestesia do exame
						if (ie_consiste_anest_w = 'Q') or (ie_consiste_anest_w = 'S')then				
							
							select	coalesce(max(a.ie_anestesia), 'N'),
									max(a.nr_seq_proc_interno)
							into STRICT	ie_anestesia_w,
									nr_seq_proc_interno_ww
							from	agenda_integrada_item a,
									agenda_integrada b
							where	a.nr_seq_agenda_int = b.nr_sequencia
							and		b.nr_sequencia		= nr_seq_agenda_int_p;
							
							if (ie_anestesia_w = 'S')then
								select	coalesce(max(nr_minuto_duracao),0)
								into STRICT	nr_minuto_duracao_ww
								from	ageint_tempo_exame_anest
								where	nr_seq_proc_interno	= nr_seq_proc_interno_w
								and 	coalesce(cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento;		
							end if;				
							
						end if;
						--FIM - Tratamento para consistir a atualizacao correta da duracao do item, caso o param. [264] esteja habilitado, com base na duracao de acordo com a necessidade de anestesia do exame
						
						if (nr_minuto_duracao_ww > 0)then
							select	coalesce(max(nr_minuto_duracao), 0)
							into STRICT	nr_min_dur_atual_item_w
							from	agenda_integrada_item
							where	nr_sequencia = nr_seq_item_w;
							
							if (nr_minuto_duracao_ww = nr_min_dur_atual_item_w)then
								nr_min_dur_final_w := nr_minuto_duracao_ww;
							else
								nr_min_dur_final_w := nr_min_dur_atual_item_w;
							end if;							
						end if;					
						
						if (ie_primeiro_w	= 'S') then
							hr_agenda_pri_w		:= hr_agenda_w;
							nr_min_dur_pri_w	:= nr_minuto_duracao_w;
						end if;

						begin
						select 	max(CD_SETOR_AGENDA), 
							max(CD_SETOR_EXCLUSIVO)
						into STRICT	cd_setor_agenda_w,
							cd_setor_exclusivo_w
						from 	agenda
						where	cd_agenda = cd_agenda_w;
						exception
						when	no_data_found then
							cd_setor_agenda_w 	 	:= '';
							cd_setor_exclusivo_w 	:= '';
						end;

						select	coalesce(max(1), 0)
						into STRICT	qt_regra_tempo_exame_w
						from	ageint_tempo_entre_exames
						where	((cd_exame_pri	= nr_seq_proc_interno_w)
						or (cd_exame_seg	= nr_seq_proc_interno_w))
						and 	ie_situacao	= 'A';
						
						select	coalesce(max(1), 0)
						into STRICT	qt_regra_tempo_setores_w
						from	ageint_tempo_entre_setores
						where	((cd_setor_pri	= cd_setor_exclusivo_w)
						or (cd_setor_seg	= cd_setor_exclusivo_w))
						and 	ie_situacao	= 'A';
						
						select	coalesce(max(1), 0)
						into STRICT	qt_regra_tempo_sala_w
						from	ageint_tempo_entre_salas
						where	(((cd_agenda_pri	= cd_Agenda_w) or (coalesce(cd_agenda_pri::text, '') = ''))
						or	((cd_agenda_seg	= cd_Agenda_w) or (coalesce(cd_agenda_seg::text, '') = '')))
						and 	ie_situacao	= 'A'
						and	coalesce(cd_estabelecimento, cd_Estabelecimento_p)	= cd_Estabelecimento_p;
						
						SELECT * FROM Ageint_consiste_sugest_setor(cd_agenda_w, hr_agenda_w, nr_min_dur_final_w, nr_seq_Agenda_int_p, cd_setor_exclusivo_w, nm_usuario_p, ds_consiste_setor_w, nr_min_setor_w) INTO STRICT ds_consiste_setor_w, nr_min_setor_w;
						
						if (coalesce(nr_min_setor_w,0) = 0) then
							qt_regra_tempo_setores_w := 0;
						end if;						
						
						SELECT * FROM Ageint_Consiste_Sugest_ExProc(cd_agenda_w, hr_agenda_w, nr_min_dur_final_w, nr_seq_Agenda_int_p, nr_seq_item_w, nm_usuario_p, ds_consiste_exame_w, nr_min_exames_w) INTO STRICT ds_consiste_exame_w, nr_min_exames_w;

						if (coalesce(nr_min_exames_w::text, '') = '') then
							qt_regra_tempo_exame_w := 0;
						end if;
						
						if (qt_regra_tempo_exame_w > 0) and (ds_consiste_exame_w = 'N') and (coalesce(nr_min_exames_w,0) >= 1440) then
							CALL wheb_mensagem_pck.exibir_mensagem_abort(230300);
						end if;
						
						ds_regra_marc_w := ageint_consiste_marc_regra(nr_seq_Agenda_int_p, nr_seq_item_w, 'I', hr_agenda_w, nm_usuario_p, cd_estabelecimento_p, ds_regra_marc_w);
						
						SELECT * FROM consistir_proc_conv_agenda(	cd_estabelecimento_p, cd_pessoa_Fisica_p, hr_agenda_w, cd_agenda_w, cd_convenio_w, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, cd_medico_w, 'E', cd_plano_w, null, null, null, cd_empresa_p, ie_anestesia_ww, null, nr_seq_item_w) INTO STRICT ie_consistencia_w, ie_permite_agendar_w, nr_seq_regra_w, ie_consist_js_w;
						
						
						ds_consist_regr_conv_w := ageint_consiste_regra_conv(	cd_convenio_w, cd_categoria_w, cd_agenda_w, coalesce(cd_setor_exclusivo_w,cd_setor_agenda_w), cd_plano_w, cd_pessoa_Fisica_p, hr_agenda_w, cd_medico_w, ds_consist_regr_conv_w);
						if (coalesce(ds_consist_regr_conv_w::text, '') = '') then
							ie_regra_conv_w		:= 'S';
						else
							ie_regra_conv_w		:= 'N';
						end if;					
						
						--INICIO - Consistir sobreposicao de horarios
						ds_consistencia_sobrep_w
														 := Ageint_consistir_dur_marcacao(	hr_agenda_w, cd_agenda_w, cd_medico_w, nm_usuario_p, nr_min_dur_final_w, nr_seq_item_w, ds_consistencia_sobrep_w
														);
														
						if (coalesce(ds_consistencia_sobrep_w::text, '') = '')then
							ie_regra_conv_w	:= 'S';						
						else
							ie_regra_conv_w	:= 'N';
						end if;						
						--FIM - Consistir sobreposicao de horarios
						ie_regra_qtd_conv_w := 'S';
						
						SELECT * FROM consistir_qtd_conv_regra(0, cd_convenio_w, hr_agenda_w, cd_agenda_w, cd_pessoa_fisica_p, cd_categoria_w, cd_plano_w, cd_estabelecimento_p, nm_usuario_p, cd_medico_w, nr_seq_proc_interno_w, ie_tipo_atendimento_w, qt_agendamento_w, qt_perm_regra_w, ds_mensagem_w) INTO STRICT qt_agendamento_w, qt_perm_regra_w, ds_mensagem_w;
											
						if (qt_agendamento_w > qt_perm_regra_w) then
							ie_regra_qtd_conv_w := 'N';
						end if;
						
						ie_erro_rodizio_w := 'S';
						
						if (ie_rodizio_proc_w = 'S') and (Ageint_cons_hor_rodizio_exame(nr_seq_item_w,cd_medico_w,hr_agenda_w,cd_agenda_w,qt_dias_rodizio_w,cd_estabelecimento_p,nm_usuario_p) = 'N') then
							ie_erro_rodizio_w := 'N';
						end if;
						
						SELECT	coalesce(max(a.nr_seq_turno_esp),0)
						into STRICT	nr_seq_turno_esp_w
						FROM	agenda_consulta a,
								agenda b
						WHERE	a.cd_agenda	= b.cd_agenda
						and		a.cd_agenda	= cd_agenda_w
						AND		TRUNC(a.dt_agenda)	= hr_agenda_w
						and		(((ie_gerar_hor_marc_w = 'N') and (not exists (SELECT 1 from ageint_marcacao_usuario x where x.hr_agenda = a.dt_agenda and coalesce(x.ie_gerado,'N') = 'N' and x.nr_seq_ageint = nr_seq_agenda_int_p and x.nr_seq_agenda <> a.nr_sequencia))) or (ie_gerar_hor_marc_w = 'S'))
						ORDER BY 1;
						
						if (ie_regra_idade_agecons_w = 'B') then
							SELECT * FROM Consiste_Idade_Agenda_Pac(cd_agenda_w, hr_agenda_w, qt_idade_w, nr_seq_agenda_int_p, ds_erro_idade_w, ds_erro_idade_turno_esp_w, nm_usuario_p) INTO STRICT ds_erro_idade_w, ds_erro_idade_turno_esp_w;				
							if (ds_erro_idade_w IS NOT NULL AND ds_erro_idade_w::text <> '') and ((coalesce(nr_seq_turno_esp_w::text, '') = '') or (nr_seq_turno_esp_w = 0)) then
								ie_hor_w := 'N';
							end if;
							if (ds_erro_idade_turno_esp_w IS NOT NULL AND ds_erro_idade_turno_esp_w::text <> '') and ((nr_seq_turno_esp_w IS NOT NULL AND nr_seq_turno_esp_w::text <> '') or (nr_seq_turno_esp_w <> 0)) then
								ie_hor_w := 'N';
							end if;
						end if;
						if (qt_regra_tempo_sala_w > 0) then
							ie_temp_entre_sala_w := Ageint_Consiste_Sugest_Salas(cd_agenda_w, hr_agenda_w, nr_min_dur_final_w, nr_seq_Agenda_int_p, nm_usuario_p, cd_estabelecimento_p, 'S');
							if (ie_temp_entre_sala_w = 'C')	then
								qt_regra_tempo_sala_w := 0;
							end if;
						end if;						
													
						if (ie_erro_rodizio_w = 'S') and
							((qt_regra_tempo_setores_w > 0 AND ds_consiste_setor_w = 'S') or (qt_regra_tempo_setores_w = 0)) and (ie_regra_conv_w = 'S') and (ie_regra_qtd_conv_w = 'S') and
							(((((((qt_regra_tempo_sala_w	> 0 AND ie_temp_entre_sala_w = 'S') or (qt_Regra_tempo_sala_w	= 0)) and
							((qt_regra_tempo_exame_w > 0 AND ds_consiste_exame_w = 'S') or (qt_regra_tempo_Exame_w	= 0)))) or (ie_primeiro_w	= 'S'))) and
							(((ds_regra_marc_w = 'S' and (ie_item_principal_w	= 'S')) or (ie_item_principal_w	= 'X'))) and (Ageint_Obter_Se_Perm_Ult_Hor(cd_agenda_w,hr_agenda_w,nr_min_dur_final_w,nr_seq_agenda_int_p,nr_seq_item_w,cd_medico_w,nm_usuario_p) = 'S') and
							((qt_regra_tempo_Exame_w	= 0 and qt_Regra_tempo_sala_w	= 0 and qt_regra_tempo_setores_w = 0 and
							((Obter_Min_Entre_Datas(coalesce(hr_agenda_ant_w, hr_agenda_w - 2/1440) + (coalesce(nr_min_dur_ant_w,1) / 1440), hr_Agenda_w, '1')) <= nr_min_entre_hor_w)) or (qt_regra_tempo_Exame_w	> 0 or qt_Regra_tempo_sala_w	> 0 or qt_regra_tempo_setores_w > 0))) and
							(((coalesce(ie_consist_Regra_Exame_w,'N') = 'S') and (coalesce(ie_permite_agendar_w,'N') = 'S')) or (coalesce(ie_consist_Regra_Exame_w,'N') = 'N')) and (coalesce(ie_consistencia_w::text, '') = '') and (ie_hor_w = 'S') then 
							dt_gerado_w	:= dt_controle_w;
							
							insert into ageint_sugestao_horarios(nr_Sequencia,
								dt_atualizacao,                                                                    
								nm_usuario,                                                                        
								cd_agenda,                                                                         
								hr_agenda,                                                                           
								nr_seq_agenda,                                                                     
								nr_minuto_duracao,                                                                 
								nr_seq_item,                                                                       
								nr_seq_Ageint_lib,                                                                 
								nr_seq_hor,
								cd_pessoa_fisica)                                                                        
							values (nextval('ageint_sugestao_horarios_seq'),                                             
								clock_timestamp(),                                                                           
								nm_usuario_p,                                                                      
								cd_agenda_w,                                                                       
								hr_agenda_w,                                                                       
								nr_seq_agenda_int_p,                                                               
								nr_min_dur_final_w,---nr_minuto_duracao_hor_w,                                                           
								nr_seq_item_w,                                                                     
								nr_Seq_ageint_lib_w,                                                               
								nr_seq_horario_w,
								cd_medico_w);
							
							commit;
							
							ie_Erro_w		:= 'N';
							ie_Gerado_w		:= 'S';
							ie_item_gerado_w	:= 'S';
							
							hr_agenda_ant_w		:= hr_agenda_w;
							if (coalesce(nr_min_dur_final_w,0) > 0) then
								nr_min_dur_ant_w	:= nr_min_dur_final_w;
							elsif (coalesce(nr_minuto_duracao_w,0) > 0) then
								nr_min_dur_ant_w	:= nr_minuto_duracao_w;
							else
								nr_min_dur_ant_w	:= 5;
							end if;
							hr_agenda_ant_erro_w		:= null;
							nr_min_dur_ant_aux_w		:= nr_min_dur_ant_w;
						else
							ie_Erro_w	:= 'S';
							hr_agenda_ant_erro_w		:= hr_agenda_w;
							nr_min_dur_ant_aux_w		:= null;
						end if;
						dt_parametro_w		:= hr_agenda_w;
					end if;                                                                               		
					qt_tentativa_hor_w	:= qt_tentativa_hor_w + 1;
					end;
				ie_primeiro_w	:= 'N';
				end loop;
			end if;
			end;
		if (ie_Erro_w	= 'S') then  			
			dt_gerado_w				:= dt_Agenda_p;
			ie_Gerado_w				:= 'N';
			ie_item_gerado_w		:= 'N';					
			hr_agenda_ant_w			:= hr_agenda_pri_w;
			nr_min_dur_ant_w		:= nr_min_dur_pri_w;
			hr_agenda_ant_erro_w	:= hr_agenda_pri_w;
			
			--Consistir para agendamentos de servico, quando os horarios das agendas forem iguais
			if (ie_tipo_agendamento_w = 'S') and (hr_agenda_ant_w = hr_agenda_ant_erro_w)then
				select	min(hr_agenda)
				into STRICT	hr_agenda_ant_erro_w
				from	ageint_horarios_usuario
				where	nm_usuario 	= nm_usuario_p
				and		hr_agenda 	> hr_agenda_ant_w;
				
				if (nr_min_dur_ant_aux_w = 0)then
					nr_min_dur_ant_aux_w := 2;
				end if;			
			end if;
			
			if (ie_dias_distintos_w = 'N') then
				delete FROM ageint_sugestao_horarios where nm_usuario = nm_usuario_p;
			end if;			
			exit;
		end if;
		end loop;
		close C01;
		qt_tentativa_w	:= qt_tentativa_w + 1;
		end;
	end loop;
	dt_controle_w		:= dt_controle_w + 1;
	end;
end loop;	

/* cursor tabela temp*/
if (ie_Gerado_w	= 'S') then         
	open C03;
	loop
	fetch C03 into                                                                         
		cd_agenda_imp_w,                                                                      
		hr_agenda_imp_w,                                                                      
		nr_Seq_agenda_imp_w,                                                                  
		nr_minuto_duracao_imp_w,                                                              
		nr_seq_item_imp_w,                                                                    
		nr_seq_ageint_lib_imp_w,
		cd_medico_imp_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin                                                                                 
		SELECT * FROM Atualiza_Dados_Marcacao(cd_agenda_imp_w, hr_agenda_imp_w, nr_Seq_agenda_imp_w, 'I', nr_minuto_duracao_imp_w, nm_usuario_p, nr_seq_item_imp_w, nr_seq_ageint_lib_imp_w, 'N', cd_medico_imp_w, ie_Reservado_w, null, ie_principal_w) INTO STRICT ie_Reservado_w, ie_principal_w;
		if (ie_principal_w = 'S') then
			ie_pendente_w := Ageint_gerar_marcacoes_regra(nr_seq_agenda_int_p, nr_seq_item_imp_w, 'I', nm_usuario_p, cd_estabelecimento_p, ie_transferencia_p, ie_pendente_w);
			ie_pendente_p := ie_pendente_w;
		end if;
		end;
	end loop;
	close C03;
                
end if;

dt_gerado_p	:= dt_gerado_w;

commit;
                            
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_sugerir_horarios (( nr_seq_agenda_int_p bigint, cd_pessoa_fisica_p text, dt_agenda_p timestamp, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, dt_gerado_p out timestamp, ie_transferencia_p text default 'N', cd_turno_p text, nr_seq_regiao_p bigint, cd_profissional_p text, cd_empresa_p bigint, cd_estab_agenda_p bigint, ie_pendente_p out text, ie_remarcar_p text default null) is nr_seq_item_w bigint) FROM PUBLIC;

