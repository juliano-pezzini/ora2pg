-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_inserir_lancamentos ( nr_lote_contabil_p bigint, nr_seq_mes_ref_p bigint, nm_usuario_p text, nr_seq_dados_lcmt_p bigint) AS $body$
DECLARE

 
 
 
vl_movto_partida_w		ctb_movimento.vl_movimento%type;
vl_movto_ctr_partida_w	ctb_movimento.vl_movimento%type;
nr_seq_agrupamento_w	ctb_movimento.nr_seq_agrupamento%type;
nr_seq_movto_w			ctb_movimento.nr_sequencia%type;
qt_agrup_dif_w			bigint;
qt_sem_agrup_w			bigint;
qt_movimentos_w			bigint;
ie_encerramento_w		varchar(01);
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
ie_consiste_revisao_w	tipo_lote_contabil.ie_consiste_revisao%type;
qt_error_w				bigint;
cd_empresa_w			empresa.cd_empresa%type;
dt_referencia_w			timestamp;
ie_status_origem_w		ctb_movimento.ie_status_origem%type;

C01 CURSOR FOR 
	SELECT  nr_lote_contabil, 
			 nr_seq_mes_ref, 
			 dt_movimento, 
			 vl_movimento, 
			 dt_atualizacao, 
			 nm_usuario, 
			 cd_historico, 
			 cd_conta_debito, 
			 cd_conta_credito, 
			 ds_compl_historico, 
			 nr_seq_agrupamento, 
			 ie_revisado, 
			 cd_classif_debito, 
			 cd_classif_credito, 
			 ie_status_origem, 
			 nr_sequencia, 
			 nr_agrup_sequencial, 
			 nr_seq_movto_corresp, 
			 ds_observacao 
	from	 w_ctb_lancamento 
	where	 nr_lote_contabil = nr_lote_contabil_p 
	and		 nr_seq_mes_ref  = nr_seq_mes_ref_p 
	and		 ie_status_origem  <> 'EX' 
	and		 nr_seq_lancamento = nr_seq_dados_lcmt_p 
	order by nr_seq_movto_partida;

Vet01	C01%RowType;

C02 CURSOR FOR 
	SELECT	cd_centro_custo, 
			vl_movimento, 
			pr_rateio, 
			nr_seq_movto_corresp 
	from	w_ctb_movto_centro_lcmt 
	where	nr_seq_movimento = 	Vet01.nr_sequencia 
	and		ie_status_origem <> 'EX';
	
Vet02  C02%RowType;

C03 CURSOR FOR 
	SELECT	nr_seq_movto_corresp 
	from	w_ctb_lancamento 
	where	nr_seq_lancamento = nr_seq_dados_lcmt_p 
	and		nr_lote_contabil = nr_lote_contabil_p 
	and		ie_status_origem = 'EX' 
	order by nr_seq_movto_partida;
	
vet03 c03%RowType;

C04 CURSOR FOR 
	SELECT	nr_seq_movto_corresp 
	from	w_ctb_movto_centro_lcmt 
	where	nr_seq_movimento = vet01.nr_sequencia 
	and		ie_status_origem = 'EX';
	
vet04 c04%RowType;	
 

BEGIN 
 
select	coalesce(b.ie_encerramento,'N'), 
		b.cd_estabelecimento, 
		coalesce(a.ie_consiste_revisao,'S') 
into STRICT	ie_encerramento_w, 
		cd_estabelecimento_w, 
		ie_consiste_revisao_w 
from 	tipo_lote_contabil a, 
		lote_contabil b 
where	b.cd_tipo_lote_contabil = a.cd_tipo_lote_contabil 
and		b.nr_lote_contabil	  = nr_lote_contabil_p;
 
select	b.cd_empresa, 
		b.dt_referencia 
into STRICT	cd_empresa_w, 
		dt_referencia_w 
from	ctb_mes_ref b, 
		lote_contabil a 
where	a.nr_lote_contabil	= nr_lote_contabil_p 
and		a.nr_seq_mes_ref	= b.nr_sequencia;
 
select max(nr_seq_agrupamento) 
into STRICT	nr_seq_agrupamento_w 
from	w_ctb_lancamento 
where	nr_lote_contabil = nr_lote_contabil_p 
and		nr_seq_mes_ref  = nr_seq_mes_ref_p 
and		nr_seq_lancamento = nr_seq_dados_lcmt_p;
 
select coalesce(sum(vl_movimento),0) 
into STRICT	vl_movto_partida_w 
from	w_ctb_lancamento 
where	(cd_conta_debito IS NOT NULL AND cd_conta_debito::text <> '') 
and		nr_lote_contabil = nr_lote_contabil_p 
and		nr_seq_mes_ref  = nr_seq_mes_ref_p 
and		ie_status_origem <> 'EX' 
and		nr_seq_lancamento = nr_seq_dados_lcmt_p;
 
select coalesce(sum(vl_movimento),0) 
into STRICT	vl_movto_ctr_partida_w 
from	w_ctb_lancamento 
where	(cd_conta_credito IS NOT NULL AND cd_conta_credito::text <> '') 
and		nr_lote_contabil = nr_lote_contabil_p 
and		nr_seq_mes_ref 	 = nr_seq_mes_ref_p 
and		ie_status_origem <> 'EX' 
and		nr_seq_lancamento = nr_seq_dados_lcmt_p;
 
if (vl_movto_ctr_partida_w <> vl_movto_partida_w)then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(320923); /*Valor de partida e contra partida não conferem. Favor verificar */
end if;
 
select count(*) 
into STRICT  qt_agrup_dif_w 
from	w_ctb_lancamento 
where  nr_lote_contabil = nr_lote_contabil_p 
and		nr_seq_mes_ref  = nr_seq_mes_ref_p 
and		nr_seq_agrupamento <> nr_seq_agrupamento_w 
and		ie_status_origem <> 'EX' 
and		nr_seq_lancamento = nr_seq_dados_lcmt_p;
 
if (qt_agrup_dif_w > 0)then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(320927); /*Agrupadores diferentes. Favor inserir o mesmo agrupador para os movimentos.*/
end if;
 
select count(*) 
into STRICT  qt_sem_agrup_w 
from	w_ctb_lancamento 
where  nr_lote_contabil = nr_lote_contabil_p 
and		nr_seq_mes_ref  = nr_seq_mes_ref_p 
and		nr_seq_lancamento = nr_seq_dados_lcmt_p 
and		coalesce(nr_seq_agrupamento,0) = 0;
 
if (qt_sem_agrup_w > 0)then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(320965); /*Existem movimentos sem agrupador. Favor verificar.*/
end if;
 
 
select count(*) 
into STRICT	qt_error_w 
from	w_ctb_lancamento a 
where	nr_seq_mes_ref   = nr_seq_mes_ref_p 
and		nr_seq_lancamento = nr_seq_dados_lcmt_p 
and		a.nr_lote_contabil = nr_lote_contabil_p 
and		(a.ds_consistencia IS NOT NULL AND a.ds_consistencia::text <> '');
 
 
if (qt_error_w > 0)	then 
	/*-20011,'Existem inconsistências nos lançamentos. Favor verificar.'*/
 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(322298);
else 
	open C01;
	loop 
	fetch C01 into 
		Vet01;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
	 
	if (vet01.ie_status_origem = '')	then 
		ie_status_origem_w := 'U';
	end if;
 
	if (coalesce(vet01.nr_seq_movto_corresp,0) = 0)then 
		insert into ctb_movimento( 
			 nr_sequencia, 
			 nr_lote_contabil, 
			 nr_seq_mes_ref, 
			 dt_movimento, 
			 vl_movimento, 
			 dt_atualizacao, 
			 nm_usuario, 
			 cd_historico, 
			 cd_conta_debito, 
			 cd_conta_credito, 
			 ds_compl_historico, 
			 nr_seq_agrupamento, 
			 ie_revisado, 
			 cd_classif_debito, 
			 cd_classif_credito, 
			 ie_status_origem, 
			 nr_agrup_sequencial) 
		 values (nextval('ctb_movimento_seq'), 
			 Vet01.nr_lote_contabil, 
			 Vet01.nr_seq_mes_ref, 
			 Vet01.dt_movimento, 
			 Vet01.vl_movimento, 
			 Vet01.dt_atualizacao, 
			 Vet01.nm_usuario, 
			 Vet01.cd_historico, 
			 Vet01.cd_conta_debito, 
			 Vet01.cd_conta_credito, 
			 Vet01.ds_compl_historico, 
			 Vet01.nr_seq_agrupamento, 
			 Vet01.ie_revisado, 
			 Vet01.cd_classif_debito, 
			 Vet01.cd_classif_credito, 
			 Vet01.ie_status_origem, 
			 Vet01.nr_agrup_sequencial);
			commit;
 
			 
			open C02;
			loop 
			fetch C02 into 
				Vet02;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin 
				 
					if (coalesce(vet02.nr_seq_movto_corresp,0) = 0)then 
						select max(nr_sequencia) 
						into STRICT	nr_seq_movto_w 
						from	ctb_movimento 
						where  nr_lote_contabil = nr_lote_contabil_p 
						and		nr_seq_mes_ref  = nr_seq_mes_ref_p;
							 
						insert into ctb_movto_centro_custo( 
							nr_sequencia, 
							nr_seq_movimento, 
							cd_centro_custo, 
							dt_atualizacao, 
							nm_usuario, 
							vl_movimento, 
							pr_rateio) 
						values (nextval('ctb_movto_centro_custo_seq'), 
							nr_seq_movto_w, 
							Vet02.cd_centro_custo, 
							clock_timestamp(), 
							nm_usuario_p, 
							Vet02.vl_movimento, 
							Vet02.pr_rateio);
	 
					end if;
				end;	
			end loop;
			close C02;
				 
		else 
			 
			update	ctb_movimento 
			set	cd_conta_debito  		= vet01.cd_conta_debito, 
				cd_conta_credito  		= vet01.cd_conta_credito, 
				vl_movimento	  		= vet01.vl_movimento, 
				ds_compl_historico 		= vet01.ds_compl_historico, 
				ds_observacao   		= vet01.ds_observacao, 
				dt_movimento	  		= vet01.dt_movimento, 
				cd_classif_credito	  	= vet01.cd_classif_credito, 
				cd_classif_debito	  	= vet01.cd_classif_debito 
			where	nr_sequencia 			= vet01.nr_seq_movto_corresp 
			and	nr_lote_contabil 		= nr_lote_contabil_p;
			 
			open C02;
			loop 
			fetch C02 into 
				Vet02;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin 
				if (coalesce(vet02.nr_seq_movto_corresp,0) = 0)then 
				 
					insert into ctb_movto_centro_custo( 
							nr_sequencia, 
							nr_seq_movimento, 
							cd_centro_custo, 
							dt_atualizacao, 
							nm_usuario, 
							vl_movimento, 
							pr_rateio) 
					values (nextval('ctb_movto_centro_custo_seq'), 
							vet01.nr_seq_movto_corresp, 
							Vet02.cd_centro_custo, 
							clock_timestamp(), 
							nm_usuario_p, 
							Vet02.vl_movimento, 
							Vet02.pr_rateio);
															 
				else 
				 
					update	ctb_movto_centro_custo 
					set	cd_centro_custo 	 = vet02.cd_centro_custo, 
						vl_movimento		 = vet02.vl_movimento						 
					where	nr_sequencia 		 = vet02.nr_seq_movto_corresp;		
					 
				end if;
				end;
			end loop;
			close C02;
			 
			 
	open C04;
	loop 
	fetch C04 into	 
		vet04;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin 
		 
		delete FROM ctb_movto_centro_custo 
		where	nr_sequencia = vet04.nr_seq_movto_corresp;
		 
		end;
	end loop;
	close C04;
 
	end if;
	end;
end loop;
close C01;
 
open C03;
loop 
fetch C03 into	 
	vet03;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin 
	 
	update	ctb_movimento 
	set		nr_seq_movto_partida = '' 
	where	nr_seq_movto_partida = vet03.nr_seq_movto_corresp;
	 
	delete FROM ctb_movto_centro_custo 
	where	nr_seq_movimento = vet03.nr_seq_movto_corresp;
	 
	delete FROM ctb_movimento 
	where	nr_sequencia = vet03.nr_seq_movto_corresp;
	 
	end;
end loop;
close C03;
 
 
update	 ctb_movimento x 
set	 x.nr_seq_movto_partida	= (SELECT max(nr_sequencia) 
				  from  ctb_movimento 
				  where nr_lote_contabil 		= nr_lote_contabil_p 
				  and	 nr_seq_mes_ref 		= nr_seq_mes_ref_p) 
where	 x.nr_lote_contabil	= nr_lote_contabil_p 
and	 x.nr_seq_mes_ref	= nr_seq_mes_ref_p 
and	 x.nr_sequencia	<> (	select	max(nr_sequencia) 
				from	ctb_movimento 
				where	nr_lote_contabil 		= nr_lote_contabil_p 
				and	nr_seq_mes_ref 		= nr_seq_mes_ref_p) 
and	exists (select	1 
		from	w_ctb_lancamento y 
		where	y.nr_seq_agrupamento = x.nr_seq_agrupamento);
 
 
delete FROM w_ctb_lancamento 
where	nr_lote_contabil	= nr_lote_contabil_p 
and	nr_seq_mes_ref		= nr_seq_mes_ref_p 
and	nr_seq_lancamento	= nr_seq_dados_lcmt_p;
 
delete FROM w_ctb_dados_lancamento 
where	nr_sequencia = nr_seq_dados_lcmt_p;
 
commit;
 
end if;
 
 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_inserir_lancamentos ( nr_lote_contabil_p bigint, nr_seq_mes_ref_p bigint, nm_usuario_p text, nr_seq_dados_lcmt_p bigint) FROM PUBLIC;

