-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_canc_agecons ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
agenda_consulta_w		agenda_consulta%rowtype;

ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w	intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w		intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w	varchar(15);
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
ds_erro_w					varchar(4000);
i								integer;
ie_atualizou_w				varchar(1) := 'N';
qt_cancelado_w			bigint;

cd_estabelecimento_w		agenda.cd_estabelecimento%type;
cd_Agenda_w					agenda.cd_Agenda%type;
ie_feriado_w				agenda.ie_feriado%type;
ie_gerar_sobra_horario_w	agenda.ie_gerar_sobra_horario%type;
ds_retorno_w				varchar(255);
dt_agenda_w					timestamp;

/*Efetua a consulta transformando o elemento XML num tipo de tabela*/

c01 CURSOR FOR
	SELECT	*
	from	xmltable('/STRUCTURE/SCHEDULING' passing xml_p columns
		
		nr_sequencia					bigint path 'NR_SEQUENCE',
		nm_usuario						varchar(15) path	'NM_USER',
		ds_motivo_status				varchar(255) path 'DS_REASON_STATUS',
		cd_motivo_cancelamento	varchar(15) path 'CD_REASON_CANCELLATION');
	
c01_w	c01%rowtype;
	

BEGIN

/*Atualiza o status da fila para Em processamento*/

update	intpd_fila_transmissao
set		ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

/*Realiza o commit para nao permite o status de processamento em casa de rollback por existir consistencia. Existe tratamento de excecao abaixo para colocar o status de erro em caso de falha*/

commit;

/*Inicio de controle de falha*/

begin
	COMMIT;
	/*Busca os dados da regra do registro da fila que esta em processamento*/

	select	coalesce(b.ie_conversao,'I'),
				nr_seq_sistema,
				nr_seq_projeto_xml,
				nr_seq_regra_conv
	into STRICT		ie_conversao_w,
				nr_seq_sistema_w,
				nr_seq_projeto_xml_w,
				nr_seq_regra_w
	from		intpd_fila_transmissao a,
				intpd_eventos_sistema b
	where	a.nr_seq_evento_sistema = b.nr_sequencia
	and		a.nr_sequencia = nr_sequencia_p;

	ie_sistema_externo_w	:=	nr_seq_sistema_w;

	/*Alimenta as informacoes iniciais de controle e consistencia de cada atributo do XML*/

	reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
	reg_integracao_w.ie_envio_recebe				:=	'R';
	reg_integracao_w.ie_sistema_externo			:=	ie_sistema_externo_w;
	reg_integracao_w.ie_conversao					:=	ie_conversao_w;
	reg_integracao_w.nr_seq_projeto_xml			:=	nr_seq_projeto_xml_w;
	reg_integracao_w.nr_seq_regra_conversao	:=	nr_seq_regra_w;
	reg_integracao_w.intpd_log_receb.delete;
	reg_integracao_w.qt_reg_log						:=	0;

	COMMIT;
	open c01;
	loop
	fetch c01 into	
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
			
			/*Limpa as variaveis de controle*/

			ie_atualizou_w := 'N';
			/*Alimenta as informacoes de controle e consistencia referente ao Elemento a ser processado no momento. E importante manter dentro do cursor e nao fora.*/

			reg_integracao_w.nm_tabela		:=	'AGENDA_CONSULTA';
			reg_integracao_w.nm_elemento	:=	'SCHEDULING';
			reg_integracao_w.nr_seq_visao	:=	'';

			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQUENCIA', c01_w.nr_sequencia, 'N', agenda_consulta_w.nr_sequencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.nr_sequencia := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.nm_usuario, 'N', agenda_consulta_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;		
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_MOTIVO_CANCELAMENTO', c01_w.cd_motivo_cancelamento, 'N', agenda_consulta_w.cd_motivo_cancelamento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.cd_motivo_cancelamento := _ora2pg_r.ds_valor_retorno_p;		
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_MOTIVO_STATUS', c01_w.ds_motivo_status, 'N', agenda_consulta_w.ds_motivo_status) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; agenda_consulta_w.ds_motivo_status := _ora2pg_r.ds_valor_retorno_p;					

			if (reg_integracao_w.qt_reg_log = 0) then
				begin					
					select	count(*)
					into STRICT	qt_cancelado_w
					from	agenda_consulta
					where	nr_sequencia = c01_w.nr_sequencia
					and		ie_status_agenda = 'C';

					if (qt_cancelado_w = 0) then

						select	max(cd_agenda),
								max(dt_agenda)
						into STRICT	cd_agenda_w,
								dt_agenda_w
						from	agenda_consulta
						where	nr_sequencia = c01_w.nr_sequencia
						and		ie_status_agenda <> 'C';

						select	cd_estabelecimento,
								ie_feriado,
								ie_gerar_sobra_horario
						into STRICT	cd_estabelecimento_w,
								ie_feriado_w,
								ie_gerar_sobra_horario_w
						from	agenda
						where	cd_agenda = cd_agenda_w;

						CALL alterar_status_agecons(	cd_agenda_w,
												c01_w.nr_sequencia,
												'C',
												c01_w.cd_motivo_cancelamento,
												c01_w.ds_motivo_status,
												'N',
												c01_w.nm_usuario,
												null);
														
						ds_retorno_w := Horario_Livre_Consulta(cd_estabelecimento_w, cd_Agenda_w, ie_feriado_w, dt_agenda_w, c01_w.nm_usuario, 'S', 'N', ie_gerar_sobra_horario_w, 0, ds_retorno_w);								

						ds_erro_w		:= 'OK';
						ie_atualizou_w := 'S';
					else
						ds_erro_w 		:=  upper(Wheb_mensagem_pck.get_texto(307630)); --'CANCELADO';
					end if;
					commit;
				end;
			end if;

			if (ie_atualizou_w = 'S')	then
				update	intpd_fila_transmissao
				set		ie_status = 'S',
							nr_seq_documento = c01_w.nr_sequencia
				where	nr_sequencia = nr_sequencia_p;
			end if;
		
		end;
		
	end loop;
	close c01;
exception
when others then
	begin
		/*Em caso de qualquer falha o sistema captura a mensagem de erro, efetua o rollback, atualiza o status para Erro e registra a falha ocorrida*/

		ds_erro_w	:=	substr(sqlerrm,1,4000);
		
		rollback;
		
		update	intpd_fila_transmissao
		set		ie_status = 'E',
					ds_log = ds_erro_w
		where	nr_sequencia = nr_sequencia_p;
	end;
end;

if (reg_integracao_w.qt_reg_log > 0) then
	begin
	/*Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia*/

		rollback;
		
		update	intpd_fila_transmissao
		set		ie_status = 'E',
					ds_log = ds_erro_w
		where	nr_sequencia = nr_sequencia_p;
		
		for i in 0..reg_integracao_w.qt_reg_log-1 loop
			intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
		end loop;
	end;
end if;
		
commit;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_canc_agecons ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

