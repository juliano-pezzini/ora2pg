-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_regra_qtde_proc (nr_interno_conta_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* 
 
1 - Procedimentos com quantidade abaixo da regra 
2 - Procedimentos com quantidade acima da regra 
 
*/
 
 
 
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_atendimento_w		bigint;
nr_seq_regra_w			bigint;
cd_convenio_w			integer;
ie_tipo_atendimento_w		smallint;
qt_permitida_w			double precision;
ie_acao_excesso_w		varchar(1);
qt_horas_intervalo_w		integer;
ie_tipo_qtde_w			varchar(1);
dt_final_periodo_w		timestamp;
qt_executada_dia_w		double precision;
qt_executada_periodo_w		double precision;
qt_executada_atend_w		double precision;
dt_procedimento_w		timestamp;
cd_setor_atendimento_w		integer;
ds_erro_w			varchar(255);

c01 CURSOR FOR 
SELECT	distinct cd_procedimento, 
	ie_origem_proced 
from	procedimento_paciente 
where	nr_interno_conta	= nr_interno_conta_p;

c02 CURSOR FOR 
SELECT 	a.nr_sequencia, 
	a.qt_permitida, 
	a.ie_acao_excesso, 
	a.qt_horas_intervalo, 
	a.ie_tipo_qtde 
from 	convenio_regra_qtde_proc a 
where	a.cd_procedimento				= cd_procedimento_w 
and	a.ie_origem_proced				= ie_origem_proced_w 
and	a.cd_convenio					= cd_convenio_w 
and 	coalesce(a.ie_tipo_atendimento, ie_tipo_atendimento_w) = ie_tipo_atendimento_w;

 
c03 CURSOR FOR 
SELECT	distinct trunc(dt_procedimento, 'dd') 
from	procedimento_paciente 
where	cd_procedimento		= cd_procedimento_w 
and	ie_origem_proced	= ie_origem_proced_w 
and	nr_interno_conta	= nr_interno_conta_p;

c04 CURSOR FOR 
SELECT	dt_procedimento 
from	procedimento_paciente 
where	cd_procedimento		= cd_procedimento_w 
and	ie_origem_proced	= ie_origem_proced_w 
and	nr_interno_conta	= nr_interno_conta_p 
order	by dt_procedimento;


BEGIN 
 
delete	from W_REGRA_QTDE_PROC 
where (nr_interno_conta	= nr_interno_conta_p 
	or dt_atualizacao	< clock_timestamp() - interval '1 days');
 
select	a.nr_atendimento, 
	a.cd_convenio_parametro, 
	b.ie_tipo_atendimento 
into STRICT	nr_atendimento_w, 
	cd_convenio_w, 
	ie_tipo_atendimento_w 
from	atendimento_paciente b, 
	conta_paciente a 
where	a.nr_interno_conta	= nr_interno_conta_p 
and	a.nr_atendimento	= b.nr_atendimento;
 
open c01;
loop 
fetch c01 into 
	cd_procedimento_w, 
	ie_origem_proced_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	open c02;
	loop 
	fetch c02 into 
		nr_seq_regra_w, 
		qt_permitida_w, 
		ie_acao_excesso_w, 
		qt_horas_intervalo_w, 
		ie_tipo_qtde_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		if (ie_tipo_qtde_w = 'D') then 
			open c03;
			loop 
			fetch c03 into 
				dt_procedimento_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
 
				select 	sum(qt_procedimento), 
					max(cd_setor_atendimento) 
				into STRICT	qt_executada_dia_w, 
					cd_setor_atendimento_w 
				from	procedimento_paciente 
				where	nr_atendimento			= nr_atendimento_w 
				and	cd_procedimento			= cd_procedimento_w 
				and	ie_origem_proced		= ie_origem_proced_w 
				and	trunc(dt_procedimento, 'dd')	= dt_procedimento_w 
				and	coalesce(cd_motivo_exc_conta::text, '') = '' 
				and	(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '');
 
				if (qt_executada_dia_w > qt_permitida_w) then 
					 
					ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(277817),1,255); --Ultrapassou quatidade máxima do dia 
					
					insert	into W_REGRA_QTDE_PROC(NR_INTERNO_CONTA, 
						CD_PROCEDIMENTO, 
						IE_ORIGEM_PROCED, 
						QT_REGRA, 
						IE_ACAO_EXCESSO, 
						DS_ERRO, 
						NR_SEQ_REGRA, 
						DT_ATUALIZACAO, 
						NM_USUARIO, 
						qt_conta, 
						cd_setor_atendimento) 
					values (nr_interno_conta_p, 
						cd_procedimento_w, 
						ie_origem_proced_w, 
						qt_permitida_w, 
						ie_acao_excesso_w, 
						ds_erro_w|| ' ' || PKG_DATE_FORMATERS.to_varchar(dt_procedimento_w, 'shortDate', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p), 
						nr_seq_regra_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						qt_executada_dia_w, 
						cd_setor_atendimento_w);
				elsif (qt_executada_dia_w < qt_permitida_w) then 
				 
					ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(298662),1,255); --Não atingiu a quantidade máxima do dia 
					
					insert	into W_REGRA_QTDE_PROC(NR_INTERNO_CONTA, 
						CD_PROCEDIMENTO, 
						IE_ORIGEM_PROCED, 
						QT_REGRA, 
						IE_ACAO_EXCESSO, 
						DS_ERRO, 
						NR_SEQ_REGRA, 
						DT_ATUALIZACAO, 
						NM_USUARIO, 
						qt_conta, 
						cd_setor_atendimento) 
					values (nr_interno_conta_p, 
						cd_procedimento_w, 
						ie_origem_proced_w, 
						qt_permitida_w, 
						null, 
						ds_erro_w|| ' ' || PKG_DATE_FORMATERS.to_varchar(dt_procedimento_w, 'shortDate', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p), 
						nr_seq_regra_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						qt_executada_dia_w, 
						cd_setor_atendimento_w);
				end if;
 
			end loop;
			close c03;
		end if;
 
		if (ie_tipo_qtde_w = 'H') then 
			open c04;
			loop 
			fetch c04 into 
				dt_procedimento_w;
			EXIT WHEN NOT FOUND; /* apply on c04 */
 
				select	sum(qt_procedimento), 
					max(dt_procedimento), 
					max(cd_setor_atendimento) 
				into STRICT	qt_executada_periodo_w, 
					dt_final_periodo_w, 
					cd_setor_atendimento_w 
				from	procedimento_paciente 
				where	cd_procedimento		= cd_procedimento_w 
				and	ie_origem_proced	= ie_origem_proced_w 
				and	nr_interno_conta	= nr_interno_conta_p 
				and	coalesce(cd_motivo_exc_conta::text, '') = '' 
				and	dt_procedimento_w		between	dt_procedimento_w and 
									dt_procedimento_w + ((1 / 24) * qt_horas_intervalo_w);
 
				if (qt_executada_periodo_w > qt_permitida_w) then 
				 
					ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(277826),1,255); --Ultrapassou quantidade máxima no período 
					
					insert	into W_REGRA_QTDE_PROC(NR_INTERNO_CONTA, 
						CD_PROCEDIMENTO, 
						IE_ORIGEM_PROCED, 
						QT_REGRA, 
						IE_ACAO_EXCESSO, 
						DS_ERRO, 
						NR_SEQ_REGRA, 
						DT_ATUALIZACAO, 
						NM_USUARIO, 
						qt_conta, 
						cd_setor_atendimento) 
					values (nr_interno_conta_p, 
						cd_procedimento_w, 
						ie_origem_proced_w, 
						qt_permitida_w, 
						ie_acao_excesso_w, 
						ds_erro_w|| ' ' || 
						PKG_DATE_FORMATERS.to_varchar(dt_procedimento_w, 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p) || ' '||OBTER_DESC_EXPRESSAO(347642)||' ' || 
						PKG_DATE_FORMATERS.to_varchar(dt_final_periodo_w, 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p), 
						nr_seq_regra_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						qt_executada_periodo_w, 
						cd_setor_atendimento_w);
				elsif (qt_executada_periodo_w < qt_permitida_w) then 
				 
					ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(298664),1,255);--Não atingiu a quantidade máxima no período de 
					
					insert	into W_REGRA_QTDE_PROC(NR_INTERNO_CONTA, 
						CD_PROCEDIMENTO, 
						IE_ORIGEM_PROCED, 
						QT_REGRA, 
						IE_ACAO_EXCESSO, 
						DS_ERRO, 
						NR_SEQ_REGRA, 
						DT_ATUALIZACAO, 
						NM_USUARIO, 
						qt_conta, 
						cd_setor_atendimento) 
					values (nr_interno_conta_p, 
						cd_procedimento_w, 
						ie_origem_proced_w, 
						qt_permitida_w, 
						null, 
						ds_erro_w|| ' ' || 
						PKG_DATE_FORMATERS.to_varchar(dt_procedimento_w, 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p) || ' '||OBTER_DESC_EXPRESSAO(347642)||' ' || 
						PKG_DATE_FORMATERS.to_varchar(dt_final_periodo_w, 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p), 
						nr_seq_regra_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						qt_executada_periodo_w, 
						cd_setor_atendimento_w);
				end if;
 
			end loop;
			close c04;
		end if;
 
		if (ie_tipo_qtde_w = 'A') then 
 
			select 	sum(qt_procedimento), 
				max(cd_setor_atendimento) 
			into STRICT	qt_executada_atend_w, 
				cd_setor_atendimento_w 
			from	procedimento_paciente 
			where	nr_atendimento		= nr_atendimento_w 
			and	cd_procedimento		= cd_procedimento_w 
			and	ie_origem_proced	= ie_origem_proced_w 
			and	(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '') 
			and	coalesce(cd_motivo_exc_conta::text, '') = '';
 
			if (qt_executada_atend_w > qt_permitida_w) then 
				 
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(277823),1,255);-- Ultrapassou quantidade máxima do atendimento 
				
				insert	into W_REGRA_QTDE_PROC(NR_INTERNO_CONTA, 
					CD_PROCEDIMENTO, 
					IE_ORIGEM_PROCED, 
					QT_REGRA, 
					IE_ACAO_EXCESSO, 
					DS_ERRO, 
					NR_SEQ_REGRA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					qt_conta, 
					cd_setor_atendimento) 
				values (nr_interno_conta_p, 
					cd_procedimento_w, 
					ie_origem_proced_w, 
					qt_permitida_w, 
					ie_acao_excesso_w, 
					ds_erro_w, 
					nr_seq_regra_w, 
					clock_timestamp(), 
					nm_usuario_p, 
					qt_executada_atend_w, 
					cd_setor_atendimento_w);
			elsif (qt_executada_atend_w < qt_permitida_w) then 
			 
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(298666),1,255);-- Não atingiu a quantidade máxima do atendimento 
				
				insert	into W_REGRA_QTDE_PROC(NR_INTERNO_CONTA, 
					CD_PROCEDIMENTO, 
					IE_ORIGEM_PROCED, 
					QT_REGRA, 
					IE_ACAO_EXCESSO, 
					DS_ERRO, 
					NR_SEQ_REGRA, 
					DT_ATUALIZACAO, 
					NM_USUARIO, 
					qt_conta, 
					cd_setor_atendimento) 
				values (nr_interno_conta_p, 
					cd_procedimento_w, 
					ie_origem_proced_w, 
					qt_permitida_w, 
					null, 
					ds_erro_w, 
					nr_seq_regra_w, 
					clock_timestamp(), 
					nm_usuario_p, 
					qt_executada_atend_w, 
					cd_setor_atendimento_w);
			end if;
 
		end if;
 
	end loop;
	close c02;
end loop;
close c01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_regra_qtde_proc (nr_interno_conta_p bigint, nm_usuario_p text) FROM PUBLIC;

