-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_titulo_escritural ( nr_titulo_p bigint, nr_seq_escrit_p bigint, nm_usuario_p text, ie_origem_remessa_p text Default NULL) AS $body$
DECLARE


/* os tratamentos de banco/agencia/conta devem ser feitos na procedure DEFINIR_BANCO_TIT_ESCRITURAL */

cont_w				bigint;
ie_remessa_retorno_w		varchar(255);
vl_saldo_titulo_w 			double precision;
dt_remessa_retorno_w		timestamp;
vl_desconto_w			double precision;
ie_calcula_desconto_w		varchar(2);
ie_vl_associado_w			varchar(2);
cd_estabelecimento_w		smallint;

qt_regra_barras_w			bigint;
ie_forma_importacao_w		varchar(1);
ie_vincula_barras_w			varchar(1);
ie_outras_desp_no_saldo_w	varchar(1);
cd_banco_w			banco_estabelecimento.cd_banco%type;
nr_documento_w			banco_escrit_barras.nr_documento%type;
cd_cgc_w			banco_escrit_barras.cd_cgc%type;
cd_barras_w			banco_escrit_barras.cd_barras%type;
nr_seq_barras_w			banco_escrit_barras.nr_sequencia%type;
nr_titulo_w			titulo_pagar.nr_titulo%type;
nr_seq_conta_banco_w banco_escritural.nr_seq_conta_banco%type;
nr_seq_conta_bco_w		titulo_pagar.nr_seq_conta_bco%type;
dt_liberacao_w       banco_escritural.dt_liberacao%type;
qt_registros_w			smallint;

nr_bloqueto_tit_w	titulo_pagar.nr_bloqueto%type;

c01 CURSOR FOR
SELECT	a.nr_documento,
	a.cd_cgc,
	a.cd_barras,
	a.nr_sequencia
from	banco_escrit_barras a
where (coalesce(ie_forma_importacao_w,'1') = '2' or a.nr_seq_banco_escrit = nr_seq_escrit_p)
and	coalesce(a.nr_titulo::text, '') = '';


BEGIN

if (coalesce(nr_titulo_p,0) > 0) then

	select	count(*)
	into STRICT	cont_w
	from	titulo_pagar_escrit a
	where	a.nr_titulo	= nr_titulo_p
	and	a.nr_seq_escrit	= nr_seq_escrit_p;

	if (coalesce(cont_w,0)	= 0) then

		/* define o valor do titulo escritural */

		select	coalesce(max(a.dt_remessa_retorno),clock_timestamp()),
			max(a.cd_estabelecimento),
			max(a.ie_remessa_retorno),
			max(b.cd_banco),
			coalesce(max(a.nr_seq_conta_banco),0),
			max(a.dt_liberacao)
		into STRICT	dt_remessa_retorno_w,
			cd_estabelecimento_w,
			ie_remessa_retorno_w,
			cd_banco_w,
			nr_seq_conta_banco_w,
			dt_liberacao_w
		FROM banco_escritural a
LEFT OUTER JOIN banco_estabelecimento b ON (a.nr_seq_conta_banco = b.nr_sequencia)
WHERE a.nr_sequencia		= nr_seq_escrit_p;

		if (ie_remessa_retorno_w = 'R') and (vl_saldo_titulo_w = 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(190479,'NR_TITULO_P='||nr_titulo_p);
		end if;
		
		if (ie_remessa_retorno_w = 'R' and (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '')) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1151750,'NR_SEQUENCIA='||nr_seq_escrit_p);
		end if;
		
		begin
		
		select	coalesce(obter_valor_param_usuario(857,17, Obter_Perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N'), /* calcular o valor do desconto */
			coalesce(obter_valor_param_usuario(857,33, Obter_Perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N'),  /* Gerar valor bloqueto asssociado */
			
			coalesce(obter_valor_param_usuario(851,256, Obter_Perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N')
		into STRICT	ie_calcula_desconto_w,
			ie_vl_associado_w,
			ie_outras_desp_no_saldo_w
		;
		
		exception when others then
			ie_calcula_desconto_w	:= 'N';
			ie_vl_associado_w	:= 'N';
			ie_outras_desp_no_saldo_w := 'N';
		end;

		if (ie_calcula_desconto_w = 'S') then
			begin
			select	coalesce(obter_desc_antec_tit_pagar(nr_titulo_p, coalesce(vl_saldo_titulo,0), dt_remessa_retorno_w),0)
			into STRICT	vl_desconto_w
			from	titulo_pagar
			where	nr_titulo = nr_titulo_p;
			exception when others then
				vl_desconto_w	:= 0;
			end;

		elsif (ie_calcula_desconto_w = 'E') then
			begin
			select	coalesce(max(a.vl_dia_antecipacao),0)
			into STRICT	vl_desconto_w
			from	titulo_pagar a
			where	a.nr_titulo	= nr_titulo_p;
			end;
		end if;
		
		select	coalesce(max(a.nr_seq_conta_bco),0),
				count(*)
		into STRICT	nr_seq_conta_bco_w,
				qt_registros_w
		from	titulo_pagar a
		where	a.nr_titulo	= nr_titulo_p
		and     (a.nr_seq_proj_rec IS NOT NULL AND a.nr_seq_proj_rec::text <> '');
		
		if (nr_seq_conta_banco_w <> nr_seq_conta_bco_w) and (coalesce(obter_valor_param_usuario(857,73, Obter_Perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N') = 'N') and (qt_registros_w > 0) then		
			CALL wheb_mensagem_pck.exibir_mensagem_abort(549704,'NR_TITULO_P='||nr_titulo_p);		
		end if;		

		begin
		insert	into Titulo_Pagar_escrit(
			nr_seq_escrit,
			nr_titulo,
			dt_atualizacao,
			nm_usuario,
			cd_ocorrencia,
			vl_escritural,
			vl_desconto,
			vl_acrescimo,
			ie_tipo_documento,
			ie_tipo_servico,
			ie_moeda,
			vl_juros,
			vl_multa,
			vl_despesa)
		SELECT	nr_seq_escrit_p,
			nr_titulo_p,
			clock_timestamp(),
			nm_usuario_p,
			'01',
			CASE WHEN ie_vl_associado_w='S' THEN CASE WHEN coalesce(vl_bloq_associado,0)=0 THEN vl_saldo_titulo  ELSE vl_bloq_associado END   ELSE vl_saldo_titulo END ,
			coalesce(vl_desconto_w,0),
			CASE WHEN ie_outras_desp_no_saldo_w='S' THEN 0  ELSE coalesce(vl_outros_acrescimos,0) END ,
			'NF',
			'00020',
			cd_moeda,
			coalesce(vl_saldo_juros,0),
			coalesce(vl_saldo_multa,0),			
			CASE WHEN ie_outras_desp_no_saldo_w='S' THEN 0  ELSE coalesce(vl_outras_despesas,0) END
		from 	Titulo_pagar
		where	nr_titulo	= nr_titulo_p;
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(190484,'SQLERRM=' || sqlerrm);
		end;

		select	count(*)
		into STRICT	qt_regra_barras_w
		from	banco_regra_barras a
		where	exists (SELECT	1
			from	banco_regra_barras_atrib x
			where	x.nr_seq_regra_barras	= a.nr_sequencia)
		and	coalesce(a.ie_vincular_titulo,'S') = 'S'
		and	trunc(clock_timestamp(),'dd')	between trunc(a.dt_inicio_vigencia,'dd') and trunc(coalesce(a.dt_fim_vigencia,clock_timestamp()),'dd')
		and	a.cd_banco	= cd_banco_w;
		
		ie_vincula_barras_w := obter_param_usuario(857, 77, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_vincula_barras_w);

		if (coalesce(qt_regra_barras_w,0)	> 0) and (coalesce(ie_origem_remessa_p::text, '') = '' or ie_origem_remessa_p <> 'S' or ie_vincula_barras_w = 'S') then

			ie_forma_importacao_w := obter_param_usuario(857, 32, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_forma_importacao_w);

			open	c01;
			loop
			fetch	c01 into
				nr_documento_w,
				cd_cgc_w,
				cd_barras_w,
				nr_seq_barras_w;
			exit	when(c01%notfound or ((nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') and nr_titulo_w = nr_titulo_p));

				nr_titulo_w := obter_titulo_regra_barras(cd_banco_w, nr_documento_w, cd_cgc_w, cd_barras_w, nr_titulo_w, 'S', nr_seq_barras_w);
				
				/*OS 1251778 - Esse update ficava fora do cursor, coloquei aqui dentro pois antes atualizava o titulo certo no nr_seq_barras_w errado.
				Como o titulo vem da proc acima, o nr_seq_barras_w buscava o proximo registro, e atualizava no barras errado.*/
				if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') and (nr_titulo_w = nr_titulo_p) then
			
					update	banco_escrit_barras
					set		nr_titulo	= nr_titulo_p
					where	nr_sequencia	= nr_seq_barras_w;
					
					/*Inicio OS 1252731 - Se o titulo n tiver bloqueto, entao atualizar o bloqueto vinculado ao barras acima no titulo, para quando la em baixo chamar a definir_banco_tit_escritural, achar os dados do banco dentro do bloqueto*/

					select	max(a.nr_bloqueto)
					into STRICT	nr_bloqueto_tit_w
					from	titulo_pagar a
					where	a.nr_titulo = nr_titulo_p;
					
					if (coalesce(nr_bloqueto_tit_w::text, '') = '') then
					
						update	titulo_pagar
						set		nr_bloqueto	= cd_barras_w
						where	nr_titulo   = nr_titulo_p;
					
					end if;
					/*Fim OS 1252731*/

				end if;

			end	loop;
			close	c01;

		end if;

		
		/* ahoffelder - OS 268736 - 07/02/2011 - removi todos os tratamentos de banco/agencia/conta desta procedure e coloquei na procedure abaixo */

		CALL definir_banco_tit_escritural(	'CP',
					nr_titulo_p,
					nr_seq_escrit_p,
					nm_usuario_p,
					'N');

	end if;
end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_titulo_escritural ( nr_titulo_p bigint, nr_seq_escrit_p bigint, nm_usuario_p text, ie_origem_remessa_p text Default NULL) FROM PUBLIC;

