-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS (nr_sequencia	bigint);


CREATE OR REPLACE PROCEDURE gerar_taxa_sala_cir_esp_porte ( nr_sequencia_p bigint, nm_usuario_p text, ie_regra_p INOUT text) AS $body$
DECLARE


nr_atendimento_w		bigint;
cd_estabelecimento_w		bigint;
cd_convenio_w			integer;

nr_sequencia_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_taxa_w			bigint;

qt_proc_porte_w			bigint;
qt_porte_w			bigint;
nr_seq_gerada_w			bigint;
dt_entrada_unidade_w		timestamp;
ie_regra_w			varchar(01) := 'N';
nr_cirurgia_w			bigint;
qt_porte_proc_w			smallint;

nr_seq_proc_interno_w		bigint;
cd_categoria_w			varchar(10);
dt_procedimento_w		timestamp;
cd_setor_atend_w		setor_atendimento.cd_setor_atendimento%type;
nr_seq_proc_int_w		bigint;
qt_lanc_taxa_w			bigint;
type Vetor is table of campos index by integer;

proc_princ_w			Vetor;
i				integer	:= 0;

C01 CURSOR FOR 
	SELECT	a.nr_sequencia,
		b.cd_procedimento,
		b.ie_origem_proced,
		b.nr_sequencia nr_seq_taxa,
		b.qt_porte,
		b.nr_seq_proc_interno,
		b.qt_procedimento
	from	Tipo_taxa_cirurgica 	b,
		procedimento_paciente	a
	where	a.nr_atendimento	= nr_atendimento_w
	and	(((a.nr_cirurgia = nr_cirurgia_w) and ((b.qt_porte = qt_porte_proc_w) or (coalesce(qt_porte_proc_w::text, '') = ''))) or (nr_cirurgia_w = 0))
	and	b.nr_sequencia	= obter_porte_especial(
					cd_estabelecimento_w,
					a.cd_convenio,
					a.cd_procedimento,
					a.ie_origem_proced,
					a.cd_setor_atendimento,
					a.dt_procedimento)
	order by	a.nr_sequencia;


BEGIN

select	b.nr_atendimento,
	b.cd_estabelecimento,
	a.cd_convenio,
	coalesce(a.nr_cirurgia,0),
	a.cd_categoria,
	a.dt_procedimento,
	a.cd_setor_atendimento
into STRICT	nr_atendimento_w,
	cd_estabelecimento_w,
	cd_convenio_w,
	nr_cirurgia_w,
	cd_categoria_w,
	dt_procedimento_w,
	cd_setor_atend_w
from	atendimento_paciente b,
	procedimento_paciente a
where	a.nr_sequencia	= nr_sequencia_p
  and	a.nr_atendimento	= b.nr_atendimento;

  
select	max(b.qt_porte)
into STRICT	qt_porte_proc_w
from	Tipo_taxa_cirurgica 	b,
	procedimento_paciente	a
where	a.nr_sequencia = nr_sequencia_p
and	b.nr_sequencia	= obter_porte_especial(cd_estabelecimento_w, a.cd_convenio, a.cd_procedimento, a.ie_origem_proced, a.cd_setor_atendimento, a.dt_procedimento);

OPEN C01;
LOOP
FETCH C01 into	nr_sequencia_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_taxa_w,
		qt_porte_w,
		nr_seq_proc_interno_w,
		qt_lanc_taxa_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	nr_sequencia_w	:= nr_sequencia_w;

	if (nr_cirurgia_w <> 0) then
	
		select	count(*)
		into STRICT	qt_proc_porte_w
		from procedimento_paciente
		where nr_seq_proc_princ = nr_sequencia_w
		  and ds_observacao like '%' || obter_desc_expressao(729219) || '%';

		if (qt_proc_porte_w > 0) then
			i := i + 1;
			proc_princ_w[i].nr_sequencia := nr_sequencia_w;
		end if;
		
	end if;
END LOOP;
CLOSE C01;
		
if (nr_sequencia_p = nr_sequencia_w) then

	if (nr_cirurgia_w <> 0) then

		FOR i in 1..proc_princ_w.count LOOP
			update procedimento_paciente
			set nr_seq_proc_princ  = NULL
			where nr_seq_proc_princ in (	SELECT nr_sequencia
							from procedimento_paciente
							where nr_seq_proc_princ = proc_princ_w[i].nr_sequencia
							  and ds_observacao like '%' || obter_desc_expressao(729219) || '%');

			delete FROM procedimento_paciente
			where nr_seq_proc_princ = proc_princ_w[i].nr_sequencia;
		END LOOP;
		
	end if;

	select	count(*)
	into STRICT	qt_proc_porte_w
	from procedimento_paciente
	where nr_seq_proc_princ = nr_sequencia_w
	  and ds_observacao like '%' || obter_desc_expressao(729219) || '%';
	
	if (qt_proc_porte_w = 0) then
		nr_seq_gerada_w := duplicar_proc_paciente(nr_sequencia_w, nm_usuario_p, nr_seq_gerada_w);
		
		nr_seq_proc_int_w:= null;
		if (coalesce(cd_procedimento_w,0) = 0) and (coalesce(nr_seq_proc_interno_w,0) > 0) then
			SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proc_interno_w, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, null, null, cd_procedimento_w, ie_origem_proced_w, cd_setor_atend_w, dt_procedimento_w, 0, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
			nr_seq_proc_int_w:=  nr_seq_proc_interno_w;
		end if;

		update procedimento_paciente
		set	cd_procedimento		= cd_procedimento_w,
			ie_origem_proced	= ie_origem_proced_w,
			nr_seq_proc_interno 	= nr_seq_proc_int_w,
			qt_porte_anestesico	= qt_porte_w,
			ie_valor_informado	= 'N',
			tx_procedimento		= 100,
			nr_seq_proc_princ	= nr_sequencia_w,
			cd_pessoa_fisica	 = NULL,
			cd_medico_executor	 = NULL,
			ie_funcao_medico	 = NULL,
			ie_emite_conta	 = NULL,
			ie_emite_conta_honor	 = NULL,
			ds_observacao 		= substr(CASE WHEN ds_observacao = NULL THEN  ''  ELSE ds_observacao || chr(10) END  ||
						  obter_desc_expressao(729219) || nr_seq_taxa_w,1,255),
			qt_procedimento		= coalesce(qt_lanc_taxa_w,qt_procedimento)
						
		where nr_sequencia = nr_seq_gerada_w;

		CALL Atualiza_Preco_Procedimento(nr_seq_gerada_w, cd_convenio_w, nm_usuario_p);

		CALL Gerar_lancamento_automatico(nr_atendimento_w, null, 34, 'Tasy',	nr_seq_gerada_w,null,null,null,null,null);

		ie_regra_w	:= 'S';
	end if;
end if;

ie_regra_p	:= ie_regra_w;
		
if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_taxa_sala_cir_esp_porte ( nr_sequencia_p bigint, nm_usuario_p text, ie_regra_p INOUT text) FROM PUBLIC;

