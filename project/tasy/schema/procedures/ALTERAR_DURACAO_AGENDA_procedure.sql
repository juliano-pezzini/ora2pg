-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE alterar_duracao_agenda (cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text) AS $body$
DECLARE


cd_medico_exec_w		varchar(10);
cd_medico_exec_ant_w		varchar(10);
dt_agenda_w			timestamp;
hr_inicial_w			timestamp		:= null;
hr_final_w			timestamp		:= null;
hr_final_ant_w			timestamp		:= null;
nr_minuto_duracao_w		bigint;
nr_minuto_dur_ant_w		bigint	:= 0;
nr_seq_horario_w		bigint;
nr_seq_agenda_w			agenda_paciente.nr_sequencia%type;
nr_seq_medico_exec_w		bigint;
dt_ultimo_horario_w		timestamp;
dt_inicio_intervalo_w		timestamp;
dt_final_intervalo_w		timestamp;
ie_status_agenda_w		varchar(10);
nr_minuto_dur_ant_ww		bigint;
qt_minutos_w			bigint;
nr_seq_horario_dia_w		bigint;
ds_observacao_w			varchar(255);

hr_inicial_esp_w		timestamp;
hr_final_esp_w			timestamp;
nr_min_int_esp_w		bigint;
hr_final_ant_esp_w		timestamp;
hr_final_ant_aux_w		timestamp;
nr_min_int_ant_esp_w		bigint;
cont				bigint;


c01 CURSOR FOR
	SELECT	nr_sequencia,
		hr_inicio,
		cd_medico_exec,
		nr_minuto_duracao,
		ie_status_agenda,
		CASE WHEN ie_status_agenda='L' THEN  nm_paciente  ELSE '' END
	from	agenda_paciente
	where	cd_agenda	= cd_agenda_p
	and	dt_agenda	= dt_agenda_p
	and	not ie_status_agenda in ('F', 'I', 'LF')
	order by hr_inicio;

c02 CURSOR FOR
	SELECT	hr_inicial,
		hr_final,
		nr_minuto_intervalo,
		NR_SEQ_MEDICO_EXEC
	from	agenda_horario_esp
	where	cd_agenda	= cd_agenda_p
	and	dt_agenda	= dt_agenda_p
	order	by 1;


BEGIN

select	max(to_date(to_char(dt_agenda_p, 'dd/mm/yyyy') || ' ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')),
	max(to_date(to_char(dt_agenda_p, 'dd/mm/yyyy') || ' ' || to_char(HR_INICIAL_INTERVALO, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')),
	max(to_date(to_char(dt_agenda_p, 'dd/mm/yyyy') || ' ' || to_char(HR_final_INTERVALO, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss'))
into STRICT	dt_ultimo_horario_w,
	dt_inicio_intervalo_w,
	dt_final_intervalo_w
from	agenda_horario
where	cd_agenda	= cd_agenda_p
and	dt_dia_semana	= pkg_date_utils.get_WeekDay(dt_agenda_p);


nr_minuto_dur_ant_w	:= 0;
cd_medico_exec_ant_w	:= '0';
qt_minutos_w		:= 0;

delete	from agenda_paciente
where	cd_agenda		= cd_agenda_p
and	dt_agenda		= dt_agenda_p
and	ie_status_agenda	= 'N'
and	nr_minuto_duracao	= 0
and	coalesce(cd_pessoa_fisica::text, '') = '';

delete 	from agenda_horario_esp
where	cd_agenda	= cd_agenda_p
and	dt_agenda	= dt_agenda_p;


open	c01;
loop
fetch	c01 into
	nr_seq_agenda_w,
	dt_agenda_w,
	cd_medico_exec_w,
	nr_minuto_duracao_w,
	ie_status_agenda_w,
	ds_observacao_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin	

	hr_inicial_w	:= dt_agenda_w;	

	select	max(nr_sequencia)
	into STRICT	nr_seq_medico_exec_w
	from	agenda_medico
	where	cd_agenda	= cd_agenda_p
	and	cd_medico	= cd_medico_exec_w;


	select	nextval('agenda_horario_esp_seq')
	into STRICT	nr_seq_horario_w
	;		


	insert	into agenda_horario_esp(nr_sequencia,
		cd_agenda,
		dt_agenda,
		dt_atualizacao,
		nm_usuario,
		hr_inicial,
		hr_final,
		nr_minuto_intervalo,
		nr_seq_medico_exec,
		HR_INICIAL_INTERVALO  ,
		HR_FINAL_INTERVALO,
		ds_observacao,
		IE_HORARIO_ADICIONAL)
	values (nr_seq_horario_w,
		cd_agenda_p,
		dt_agenda_p,
		clock_timestamp(),
		nm_usuario_p,
		trunc(hr_inicial_w, 'mi'),
		trunc(hr_inicial_w + nr_minuto_duracao_w / 1440, 'mi'),
		nr_minuto_duracao_w,
		nr_seq_medico_exec_w,
		dt_inicio_intervalo_w,
		dt_final_intervalo_w,
		ds_observacao_w, 'N');


	end;
end loop;
close c01;

hr_final_ant_esp_w		:= null;
nr_min_int_ant_esp_w		:= 0;



open	c02;
loop
fetch	c02 into
	hr_inicial_esp_w,
	hr_final_esp_w,
	nr_min_int_esp_w,
	nr_seq_medico_exec_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
	begin

	cont	:= 0;


	if (hr_final_ant_esp_w IS NOT NULL AND hr_final_ant_esp_w::text <> '') then	
		begin

		hr_final_ant_aux_w	:= hr_final_ant_esp_w;

		while(hr_final_ant_aux_w < hr_inicial_esp_w) and
			(trunc(hr_final_ant_esp_w, 'mi') < trunc(hr_final_ant_aux_w + (nr_min_int_ant_esp_w / 1440), 'mi')) and (cont < 10) loop
			begin		

			cont	:= cont + 1;
	
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_horario_dia_w
			from	agenda_horario
			where	cd_agenda	= cd_agenda_p
			and	dt_dia_semana	= pkg_date_utils.get_WeekDay(hr_final_ant_esp_w)
			and	trunc(hr_final_ant_esp_w, 'mi') >=
				to_date(to_char(trunc(hr_final_ant_esp_w, 'mi'), 'dd/mm/yyyy') || ' ' || to_char(HR_INICIAL, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
			and	trunc(hr_final_ant_esp_w, 'mi') <=
				to_date(to_char(trunc(hr_final_ant_esp_w, 'mi'), 'dd/mm/yyyy') || ' ' || to_char(HR_FINAL, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
			and	trunc(hr_final_ant_aux_w + (nr_min_int_ant_esp_w / 1440), 'mi') >=
				to_date(to_char(trunc(hr_final_ant_aux_w + (nr_min_int_ant_esp_w / 1440), 'mi'), 'dd/mm/yyyy') || ' ' || to_char(HR_INICIAL, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
			and	trunc(hr_final_ant_aux_w + (nr_min_int_ant_esp_w / 1440), 'mi') <=
				to_date(to_char(trunc(hr_final_ant_aux_w + (nr_min_int_ant_esp_w / 1440), 'mi'), 'dd/mm/yyyy') || ' ' || to_char(HR_FINAL, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');

			if (nr_seq_horario_dia_w > 0) then
				begin

				select	max(ds_observacao)
				into STRICT	ds_observacao_w
				from	agenda_horario
				where	nr_sequencia	= nr_seq_horario_dia_w;


				select	nextval('agenda_horario_esp_seq')
				into STRICT	nr_seq_horario_w
				;		


				insert	into agenda_horario_esp(nr_sequencia,
					cd_agenda,
					dt_agenda,
					dt_atualizacao,
					nm_usuario,
					hr_inicial,
					hr_final,
					nr_minuto_intervalo,
					nr_seq_medico_exec,
					HR_INICIAL_INTERVALO  ,
					HR_FINAL_INTERVALO,
					ds_observacao,
					IE_HORARIO_ADICIONAL     )
				values	(nr_seq_horario_w,
					cd_agenda_p,
					dt_agenda_p,
					clock_timestamp(),
					nm_usuario_p,
					trunc(hr_final_ant_esp_w, 'mi'),
					trunc(hr_final_ant_aux_w + (nr_min_int_ant_esp_w / 1440), 'mi'),
					nr_min_int_ant_esp_w,
					nr_seq_medico_exec_w,
					dt_inicio_intervalo_w,
					dt_final_intervalo_w,
					ds_observacao_w, 'N');
				end;
			end if;

			hr_final_ant_aux_w	:= hr_final_ant_aux_w + (nr_min_int_ant_esp_w / 1440);

			end;
		end loop;

		
		end;
	end if;

	hr_final_ant_esp_w	:= hr_final_esp_w;
	nr_min_int_ant_esp_w	:= nr_min_int_esp_w;

	end;
end loop;
close c02;




commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE alterar_duracao_agenda (cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text) FROM PUBLIC;

