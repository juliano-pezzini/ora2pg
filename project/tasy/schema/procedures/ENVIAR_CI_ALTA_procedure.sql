-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE enviar_ci_alta (cd_motivo_alta_p bigint, nm_usuario_p text, nr_atendimento_p bigint, dt_alta_p timestamp) AS $body$
DECLARE


cd_perfil_w		integer;
ds_lista_perfil_w	varchar(4000);
ds_titulo_w		varchar(255);
ds_comunicado_w		varchar(4000);
count_w			bigint;
comunic_interna_seq_w	bigint;
dt_entrada_w		timestamp;
cd_pessoa_fisica_w  varchar(255);
cd_convenio_w	integer;
nm_paciente_w varchar(255);
ds_motivo_alta_w	varchar(80);
ds_convenio_w varchar(255);
nr_prontuario_w  bigint;


c01 CURSOR FOR
SELECT	a.cd_perfil
from	regra_envio_ci_alta_perfil a,
	regra_envio_ci_alta b
where	a.nr_seq_regra  	= b.nr_sequencia
and	b.cd_motivo_alta	= cd_motivo_alta_p;
		

BEGIN

select	count(*)
into STRICT	count_w
from	regra_envio_ci_alta
where	cd_motivo_alta = cd_motivo_alta_p;

if (count_w > 0) then

	select	ds_titulo,
		substr(ds_comunicado,1,4000)
	into STRICT	ds_titulo_w,
		ds_comunicado_w
	from	regra_envio_ci_alta
	where	cd_motivo_alta = cd_motivo_alta_p;

	open c01;
	loop
	fetch c01 into
		cd_perfil_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		if (ds_lista_perfil_w IS NOT NULL AND ds_lista_perfil_w::text <> '') then	
			ds_lista_perfil_w := substr(ds_lista_perfil_w || ', ',1,4000);
		end if;	
			ds_lista_perfil_w	:= substr(ds_lista_perfil_w || cd_perfil_w,1,4000);	
		end;
	end loop;
	close c01;

	if (ds_lista_perfil_w IS NOT NULL AND ds_lista_perfil_w::text <> '') then
	
		select MAX(dt_entrada),
			   max(cd_pessoa_fisica)
		into STRICT dt_entrada_w,
			 cd_pessoa_fisica_w
		from atendimento_paciente
		where nr_atendimento = nr_atendimento_p;
		
		begin
			select 	substr(obter_nome_paciente(nr_atendimento_p),1,255),
					substr(Obter_Desc_Motivo_Alta(cd_motivo_alta_p),1,255),
					substr(Obter_desc_convenio(Obter_Convenio_Atendimento(nr_atendimento_p)),1,255),
					substr(obter_prontuario_pf(wheb_usuario_pck.get_cd_estabelecimento,cd_pessoa_fisica_w),1,255)
			into STRICT 	nm_paciente_w,
					ds_motivo_alta_w,
					ds_convenio_w,
					nr_prontuario_w
			;
		exception
		when	others then
				nm_paciente_w		:= ' ';
				ds_motivo_alta_w	:= ' ';
				ds_convenio_w		:= ' ';	
				nr_prontuario_w		:= null;
		end;
		

		ds_comunicado_w	:= substr(replace_macro(ds_comunicado_w,'@nm_paciente',nm_paciente_w),1,4000);
		ds_comunicado_w	:= substr(replace_macro(ds_comunicado_w,'@nr_atendimento',nr_atendimento_p),1,4000);
		if (dt_alta_p IS NOT NULL AND dt_alta_p::text <> '') then
			ds_comunicado_w	:= substr(replace_macro(ds_comunicado_w,'@dt_alta',PKG_DATE_FORMATERS.TO_VARCHAR(dt_alta_p, 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p)),1,4000);
		else
			ds_comunicado_w	:= substr(replace_macro(ds_comunicado_w,'@dt_alta',' '),1,4000);
		end if;
		if (dt_entrada_w IS NOT NULL AND dt_entrada_w::text <> '') then
			ds_comunicado_w	:= substr(replace_macro(ds_comunicado_w,'@dt_entrada',PKG_DATE_FORMATERS_TZ.TO_VARCHAR(dt_entrada_w, 'timestamp', ESTABLISHMENT_TIMEZONE_UTILS.getTimeZone)),1,4000);
		else
			ds_comunicado_w	:= substr(replace_macro(ds_comunicado_w,'@dt_entrada',' '),1,4000);
		end if;
		ds_comunicado_w	:= substr(replace_macro(ds_comunicado_w,'@ds_motivo_alta',ds_motivo_alta_w),1,4000);
		ds_comunicado_w	:= substr(replace_macro(ds_comunicado_w,'@nr_prontuario',nr_prontuario_w),1,4000);
		ds_comunicado_w	:= substr(replace_macro(ds_comunicado_w,'@ds_convenio',ds_convenio_w),1,4000);
		
		select	nextval('comunic_interna_seq')
		into STRICT	comunic_interna_seq_w
		;
		
		insert  into comunic_interna(
			dt_comunicado,
			ds_titulo,
			ds_comunicado,
			nm_usuario,
			dt_atualizacao,
			nr_sequencia,
			ie_gerencial,
			dt_liberacao,
			ds_perfil_adicional)
		values (clock_timestamp(),
			ds_titulo_w,
			ds_comunicado_w,
			' ',
			clock_timestamp(),
			comunic_interna_seq_w,
			'N',
			clock_timestamp(),
			ds_lista_perfil_w);

		if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;


	end if;

	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enviar_ci_alta (cd_motivo_alta_p bigint, nm_usuario_p text, nr_atendimento_p bigint, dt_alta_p timestamp) FROM PUBLIC;

