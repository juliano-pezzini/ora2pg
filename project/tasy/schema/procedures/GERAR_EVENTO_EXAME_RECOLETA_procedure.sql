-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_evento_exame_recoleta ( nr_seq_evento_p bigint, nr_prescricao_p bigint, nr_seq_prescr_p bigint, nm_usuario_p text ) AS $body$
DECLARE

 
ie_forma_ev_w			varchar(15);
ie_pessoa_destino_w		varchar(15);
cd_pf_destino_w			varchar(10);
ds_mensagem_w			varchar(4000);
ds_titulo_w			varchar(100);
cd_pessoa_destino_w		varchar(10);
nr_sequencia_w			bigint;
nm_paciente_w			varchar(60);
ds_unidade_w			varchar(60);
ds_setor_atendimento_w		varchar(60);
ie_usuario_aceite_w		varchar(1);
qt_corresp_w			integer;
cd_setor_atendimento_w		integer;
cd_perfil_w			integer;
cd_pessoa_regra_w	 	varchar(10);
nr_ramal_w		   	varchar(10);
nr_telefone_w		 	varchar(10);
cd_convenio_w		 	bigint;
cd_pessoa_fisica_w	 	varchar(10);
nr_atendimento_w	 	bigint;
nm_exame_w			varchar(80);
nm_usuario_destino_w 		varchar(15);
cd_setor_atend_pac_w		integer;
ds_material_exame_w		varchar(50);
ie_tipo_atend_regra_w	atendimento_paciente.ie_tipo_atendimento%type;
ie_tipo_atend_w			atendimento_paciente.ie_tipo_atendimento%type;

 
C01 CURSOR FOR 
	SELECT	ie_forma_ev, 
		ie_pessoa_destino, 
		cd_pf_destino, 
		coalesce(ie_usuario_aceite,'N'), 
		cd_setor_atendimento, 
		cd_perfil, 
		ie_tipo_atend 
	from	ev_evento_regra_dest 
	where	nr_seq_evento	= nr_seq_evento_p 
	and	coalesce(cd_convenio, coalesce(cd_convenio_w,0))	= coalesce(cd_convenio_w,0) 
	and	coalesce(cd_setor_atend_pac, coalesce(cd_setor_atend_pac_w,0))	= coalesce(cd_setor_atend_pac_w,0) 
	order by ie_forma_ev;

C02 CURSOR FOR 
	SELECT	obter_dados_usuario_opcao(nm_usuario,'C') 
	from	usuario_setor_v 
	where	cd_setor_atendimento = cd_setor_atendimento_w 
	and	ie_forma_ev_w in (2,3) 
	and	(obter_dados_usuario_opcao(nm_usuario,'C') IS NOT NULL AND (obter_dados_usuario_opcao(nm_usuario,'C'))::text <> '');

C03 CURSOR FOR 
	SELECT	obter_dados_usuario_opcao(nm_usuario,'C'), 
		nm_usuario 
	from	usuario_perfil 
	where	cd_perfil = cd_perfil_w 
	and	ie_forma_ev_w in (2,3) 
	and	(obter_dados_usuario_opcao(nm_usuario,'C') IS NOT NULL AND (obter_dados_usuario_opcao(nm_usuario,'C'))::text <> '');

 

BEGIN 
 
select	ds_titulo, 
	ds_mensagem 
into STRICT	ds_titulo_w, 
	ds_mensagem_w 
from	ev_evento 
where	nr_sequencia = nr_seq_evento_p;
 
select substr(obter_nome_pf(p.cd_pessoa_fisica), 1, 60), 
	e.nm_exame, 
	b.nr_atendimento, 
	d.ds_material_exame, 
	substr(obter_nome_setor(obter_setor_atendimento(b.nr_atendimento)),1,60) ds_setor_atendimento 
into STRICT	nm_paciente_w, 
	nm_exame_w, 
	nr_atendimento_w, 
	ds_material_exame_w, 
	ds_setor_atendimento_w 
from	material_exame_lab d, 
	exame_laboratorio e, 
	pessoa_fisica p, 
	prescr_medica b, 
	prescr_procedimento c		 
where	c.nr_prescricao = b.nr_prescricao 
and	e.nr_seq_exame	= c.nr_seq_exame 
and	d.cd_material_exame = c.cd_material_exame 
and	p.cd_pessoa_fisica = b.cd_pessoa_fisica 
and	c.nr_sequencia = nr_seq_prescr_p 
and	c.nr_prescricao = nr_prescricao_p;
 
 
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@atendimento',nr_atendimento_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@prescricao',nr_prescricao_p),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@paciente',nm_paciente_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@exame',nm_exame_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@ds_material',ds_material_exame_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@setor',ds_setor_atendimento_w),1,4000);
 
select	nextval('ev_evento_paciente_seq') 
into STRICT	nr_sequencia_w
;
 
insert into ev_evento_paciente( 
	nr_sequencia, 
	nr_seq_evento, 
	dt_atualizacao, 
	nm_usuario, 
	dt_atualizacao_nrec, 
	nm_usuario_nrec, 
	cd_pessoa_fisica, 
	nr_atendimento, 
	ds_titulo, 
	ds_mensagem, 
	ie_status, 
	dt_evento, 
	dt_liberacao, 
	ie_situacao) 
values (	nr_sequencia_w, 
	nr_seq_evento_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	cd_pessoa_fisica_w, 
	nr_atendimento_w, 
	ds_titulo_w, 
	ds_mensagem_w, 
	'G', 
	clock_timestamp(), 
	clock_timestamp(), 
	'A');
	 
open C01;
loop 
fetch C01 into 
	ie_forma_ev_w, 
	ie_pessoa_destino_w, 
	cd_pf_destino_w, 
	ie_usuario_aceite_w, 
	cd_setor_atendimento_w, 
	cd_perfil_w, 
	ie_tipo_atend_regra_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	qt_corresp_w	:= 1;
	cd_pessoa_destino_w	:= null;
	if (ie_pessoa_destino_w = '1') then /* Médico do atendimento */
 
		begin 
		select	max(cd_medico_atendimento) 
		into STRICT	cd_pessoa_destino_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_w;
		end;
	elsif (ie_pessoa_destino_w = '2') then /*Médico responsável pelo paciente*/
 
		begin 
		select	max(cd_medico_resp) 
		into STRICT	cd_pessoa_destino_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_w;
		end;
	elsif (ie_pessoa_destino_w = '4') then /*Médico referido*/
 
		begin 
		select	max(cd_medico_referido) 
		into STRICT	cd_pessoa_destino_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_w;
		end;
	elsif (ie_pessoa_destino_w = '5') or (ie_pessoa_destino_w = '12') then /*Pessoa fixa ou Usuário fixo*/
 
		cd_pessoa_destino_w	:= cd_pf_destino_w;
	end if;
 
	if (ie_usuario_aceite_w = 'S') and (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '1') then 
		begin 
		select	count(*) 
		into STRICT	qt_corresp_w 
		from	pessoa_fisica_corresp 
		where	cd_pessoa_fisica	= cd_pessoa_destino_w 
		and	ie_tipo_corresp		= 'MCel' 
		and	ie_tipo_doc		= 'AE';
		end;
	elsif (ie_usuario_aceite_w = 'S') and (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '3') then 
		begin 
		select	count(*) 
		into STRICT	qt_corresp_w 
		from	pessoa_fisica_corresp 
		where	cd_pessoa_fisica	= cd_pessoa_destino_w 
		and	ie_tipo_corresp		= 'CI' 
		and	ie_tipo_doc		= 'AE';
		end;
	elsif (ie_usuario_aceite_w = 'S') and (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '4') then 
		begin 
		select	count(*) 
		into STRICT	qt_corresp_w 
		from	pessoa_fisica_corresp 
		where	cd_pessoa_fisica	= cd_pessoa_destino_w 
		and	ie_tipo_corresp		= 'Email' 
		and	ie_tipo_doc		= 'AE';
		end;
	end if;
	 
	if (ie_tipo_atend_regra_w IS NOT NULL AND ie_tipo_atend_regra_w::text <> '') then 
		 
		select MAX(a.ie_tipo_atendimento) 
		into STRICT	ie_tipo_atend_w 
		from	atendimento_paciente a 
		where 	a.nr_atendimento = nr_atendimento_w;
		 
		if (ie_tipo_atend_w IS NOT NULL AND ie_tipo_atend_w::text <> '') and (ie_tipo_atend_regra_w <> ie_tipo_atend_w) then 
			cd_pessoa_destino_w := null;			-- Tratado para que não envie o alerta se o paciente não tiver o mesmo tipo de atendimento da regra 
		end if;
	 
	end if;
	 
 
	if (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (qt_corresp_w > 0) then 
		begin 
 
		insert into ev_evento_pac_destino( 
			nr_sequencia, 
			nr_seq_ev_pac, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			cd_pessoa_fisica, 
			ie_forma_ev, 
			ie_status, 
			dt_ciencia, 
			ie_pessoa_destino, 
			dt_evento) 
		values (	nextval('ev_evento_pac_destino_seq'), 
			nr_sequencia_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_pessoa_destino_w, 
			ie_forma_ev_w, 
			'G', 
			null, 
			ie_pessoa_destino_w, 
			clock_timestamp());
		end;
	end if;
 
	open C02;
	loop 
	fetch C02 into 
		cd_pessoa_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		if (cd_pessoa_regra_w IS NOT NULL AND cd_pessoa_regra_w::text <> '') then 
			insert into ev_evento_pac_destino( 
				nr_sequencia, 
				nr_seq_ev_pac, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				cd_pessoa_fisica, 
				ie_forma_ev, 
				ie_status, 
				dt_ciencia, 
				ie_pessoa_destino, 
				dt_evento) 
			values (	nextval('ev_evento_pac_destino_seq'), 
				nr_sequencia_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				cd_pessoa_regra_w, 
				ie_forma_ev_w, 
				'G', 
				null, 
				ie_pessoa_destino_w, 
				clock_timestamp());
		end if;
		end;
	end loop;
	close C02;
 
	open C03;
	loop 
	fetch C03 into 
		cd_pessoa_regra_w, 
		nm_usuario_destino_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
 
		if (cd_pessoa_regra_w IS NOT NULL AND cd_pessoa_regra_w::text <> '') then 
 
			insert into ev_evento_pac_destino( 
				nr_sequencia, 
				nr_seq_ev_pac, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				cd_pessoa_fisica, 
				ie_forma_ev, 
				ie_status, 
				dt_ciencia, 
				nm_usuario_DEst, 
				ie_pessoa_destino, 
				dt_evento) 
			values (	nextval('ev_evento_pac_destino_seq'), 
				nr_sequencia_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(),	 
				nm_usuario_p, 
				cd_pessoa_regra_w, 
				ie_forma_ev_w, 
				'G', 
				null, 
				nm_usuario_Destino_w, 
				ie_pessoa_destino_w, 
				clock_timestamp());	
		end if;
		end;
	end loop;
	close C03;
 
	end;
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_evento_exame_recoleta ( nr_seq_evento_p bigint, nr_prescricao_p bigint, nr_seq_prescr_p bigint, nm_usuario_p text ) FROM PUBLIC;

