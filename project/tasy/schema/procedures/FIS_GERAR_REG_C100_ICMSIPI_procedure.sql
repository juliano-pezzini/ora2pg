-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_c100_icmsipi ( nr_seq_controle_p bigint) AS $body$
DECLARE


-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1) := 'N';
nr_vetor_w				bigint	:= 0;
qt_cursor_w				bigint	:= 0;

nr_seq_icmsipi_C100_w	    fis_efd_icmsipi_C100.nr_sequencia%type;
cd_sit_w				          fis_efd_icmsipi_C100.cd_sit%type			          := null;
vl_doc_w				          fis_efd_icmsipi_C100.vl_doc%type			          := null;
vl_bc_icms_w			        fis_efd_icmsipi_C100.vl_bc_icms%type			      := null;
vl_icms_w				          fis_efd_icmsipi_C100.vl_icms%type			          := null;
vl_bc_icms_st_w			      fis_efd_icmsipi_C100.vl_bc_icms_st%type			    := null;
vl_icms_st_w			        fis_efd_icmsipi_C100.vl_icms_st%type			      := null;
vl_ipi_w				          fis_efd_icmsipi_C100.vl_ipi%type			          := null;
vl_desc_w				          fis_efd_icmsipi_C100.vl_desc%type			          := null;
vl_merc_w				          fis_efd_icmsipi_C100.vl_merc%type			          := null;
dt_inicio_apuracao_w	    fis_efd_icmsipi_controle.dt_inicio_apuracao%type;
dt_fim_apuracao_w		      fis_efd_icmsipi_controle.dt_fim_apuracao%type;
nr_seq_modelo_nf_w		    fis_efd_icmsipi_regra_c100.nr_seq_modelo_nf%type;
ie_tipo_data_w			      fis_efd_icmsipi_regra_c100.ie_tipo_data%type;
cd_estabelecimento_w	    fis_efd_icmsipi_controle.cd_estabelecimento%type;
nr_inscricao_estadual_w   pessoa_juridica.nr_inscricao_estadual%type;
movement_date_w           nota_fiscal.dt_entrada_saida%type;
			
-- USUARIO
nm_usuario_w			usuario.nm_usuario%type;

c_regras CURSOR FOR
	SELECT	a.dt_inicio_apuracao,
			fim_dia(a.dt_fim_apuracao),
			c.nr_seq_modelo_nf,
			c.ie_tipo_data,
			a.cd_estabelecimento
	from	fis_efd_icmsipi_controle 	a,
			fis_efd_icmsipi_lote		b,
			fis_efd_icmsipi_regra_c100	c
	where	a.nr_seq_lote	= b.nr_sequencia
	and 	b.nr_sequencia	= c.nr_seq_lote
	and 	a.nr_sequencia 	= nr_seq_controle_p;

/*Cursor que retorna as informaes para o registro c100*/

c_nota_fiscal CURSOR FOR
	SELECT	CASE WHEN obter_dados_operacao_nota(a.cd_operacao_nf, '6')='S' THEN  1  ELSE 0 END  cd_ind_oper,
			CASE WHEN obter_dados_operacao_nota(a.cd_operacao_nf, '6')='S' THEN  0 WHEN obter_dados_operacao_nota(a.cd_operacao_nf, '6')='E' THEN  CASE WHEN ie_tipo_nota='EP' THEN  0  ELSE 1 END  END  cd_ind_emit,
			CASE WHEN obter_dados_operacao_nota(a.cd_operacao_nf, '6')='E' THEN  coalesce(a.cd_cgc_emitente, a.cd_pessoa_fisica)  ELSE coalesce(cd_cgc,a.cd_pessoa_fisica) END  cd_part,
			lpad(b.cd_modelo_nf, 2, 0) cd_mod,
			a.cd_serie_nf cd_ser,
			a.nr_nota_fiscal nr_doc,
			a.nr_danfe ds_chv_nfe,
			a.dt_emissao dt_doc,
			a.dt_entrada_saida dt_e_s,
			substr(CASE WHEN coalesce(a.cd_condicao_pagamento,0)=0 THEN  2  ELSE CASE WHEN obter_dados_nota_fiscal(a.nr_sequencia, '28')=1 THEN  0  ELSE 1 END  END , 1, 1) cd_ind_pgto,
			null vl_abat_nt, 	---Vazio
			coalesce(CASE WHEN nfe_obter_dados_transportadora(a.nr_sequencia, 'TF')='T' THEN  '2' WHEN nfe_obter_dados_transportadora(a.nr_sequencia, 'TF')='N' THEN  '9' WHEN nfe_obter_dados_transportadora(a.nr_sequencia, 'TF')='D' THEN  '4' WHEN nfe_obter_dados_transportadora(a.nr_sequencia, 'TF')='R' THEN  '3' WHEN nfe_obter_dados_transportadora(a.nr_sequencia, 'TF')='C' THEN  '0' WHEN nfe_obter_dados_transportadora(a.nr_sequencia, 'TF')='F' THEN  '1' END , '9') cd_ind_frt,
			a.vl_frete vl_frt,
			a.vl_seguro vl_seg,
			a.vl_despesa_acessoria vl_out_da,
			null vl_pis, 		--Vazio
			null vl_cofins, 	--Vazio
			null vl_pis_st, 	--Vazio
			null vl_cofins_st, 	--Vazio
			substr(Elimina_Caracter(obter_dados_natureza_operacao(a.cd_natureza_operacao, 'CF'), '.'), 1, 4) cd_cfop,  --Utilizado na verificao do C101
			a.ie_status_envio, 	-- utilizado para a busca do codigo da situao
			a.nr_sequencia nr_seq_nota,
      coalesce(a.nr_sequencia_ref, nr_seq_nf_ref) nr_sequencia_ref,    
      a.ie_tipo_nota ie_tipo_nota,
      a.ie_compl_tributo ie_compl_tributo
	FROM nota_fiscal a, operacao_nota_modelo d
LEFT OUTER JOIN modelo_nota_fiscal b ON (d.nr_seq_modelo = b.nr_sequencia)
WHERE a.cd_operacao_nf	= d.cd_operacao_nf  and (a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '') and ((ie_tipo_data_w = 1 AND a.dt_emissao between dt_inicio_apuracao_w and dt_fim_apuracao_w) 
		or (ie_tipo_data_w = 2 AND a.dt_entrada_saida between dt_inicio_apuracao_w and dt_fim_apuracao_w)) and (((obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'E') and 		-- Notas de Entrada
			(a.ie_status_envio IS NOT NULL AND a.ie_status_envio::text <> '') and  				-- Sem envio ao fisco
			(a.ie_situacao in (2, 9)))                                   	-- Sitauao  2- Estorno  9-Cancelada
		or ((obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'E') and   	-- Notas de Entrada
			(a.ie_situacao not in (2, 3, 9)))                               	-- Sitauao 2- Estorno  3-Estornada  9-Cancelada
		or (obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'S' and  		-- Nostas de saida
			(a.ie_status_envio IS NOT NULL AND a.ie_status_envio::text <> ''))
		or (obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'S' and 
			coalesce(a.ie_status_envio::text, '') = '' and (exists (SELECT  1
					from	nfe_transmissao a,
						nfe_transmissao_nf b
					where	a.nr_sequencia = b.nr_seq_transmissao
					and	a.ie_tipo_nota = 'NFE'
					and 	a.ie_status_transmissao = 'T'
					and	b.nr_seq_nota_fiscal = a.nr_sequencia)))) and b.nr_sequencia		= nr_seq_modelo_nf_w and a.cd_estabelecimento	= cd_estabelecimento_w;	
	
/*Criao do array com o tipo sendo do cursor especificado - C_NOTA_FISCAL */
	
type reg_c_nota_fiscal is table of c_nota_fiscal%RowType;
vet_c_nota_fiscal_w 			reg_c_nota_fiscal;

/*Criao do array com o tipo sendo da tabela especificada - FIS_EFD_ICMSIPI_C170 */

type registro is table of fis_efd_icmsipi_C100%rowtype index by integer;
fis_registros_w			registro;

BEGIN

/*Obteo do usurio ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_regras;
loop
fetch c_regras into	
	dt_inicio_apuracao_w,
	dt_fim_apuracao_w,
	nr_seq_modelo_nf_w,
	ie_tipo_data_w,
	cd_estabelecimento_w;
EXIT WHEN NOT FOUND; /* apply on c_regras */
	begin

	open c_nota_fiscal;
	loop
	fetch c_nota_fiscal bulk collect into vet_c_nota_fiscal_w limit 1000;
		for i in 1..vet_c_nota_fiscal_w.Count loop
			begin
			if (coalesce(vet_c_nota_fiscal_w[i].ie_status_envio, 'XX') not in ('X','C','D')) then  --  Quando o campo 'ie_status_envio' for 'X','C' ou 'D' No gerar os registros filhos(C101, C110, C113, C114, C140, C141, C170, C190,
				fis_gerar_reg_C110_icmsipi(	nr_seq_controle_p,
								vet_c_nota_fiscal_w[i].nr_seq_nota);
				
				CALL fis_gerar_reg_C113_icmsipi(	nr_seq_controle_p,
								vet_c_nota_fiscal_w[i].nr_seq_nota);
				
				CALL fis_gerar_reg_C114_icmsipi(	nr_seq_controle_p,
								vet_c_nota_fiscal_w[i].nr_seq_nota);
				
				CALL fis_gerar_reg_C170_icmsipi(	nr_seq_controle_p,
								vet_c_nota_fiscal_w[i].nr_seq_nota);
				
				CALL fis_gerar_reg_C190_icmsipi(	nr_seq_controle_p,
								vet_c_nota_fiscal_w[i].nr_seq_nota);
				
				CALL fis_gerar_reg_C195_icmsipi(	nr_seq_controle_p,
								vet_c_nota_fiscal_w[i].nr_seq_nota);
								
				if	(vet_c_nota_fiscal_w[i].cd_mod = '01' AND vet_c_nota_fiscal_w[i].cd_ind_pgto = 1) then
					CALL fis_gerar_reg_C141_icmsipi(  nr_seq_controle_p,
						vet_c_nota_fiscal_w[i].nr_seq_nota);

					CALL fis_gerar_reg_C140_icmsipi(  nr_seq_controle_p,
						vet_c_nota_fiscal_w[i].nr_seq_nota);
				end if;
			end if;
			/*Limpeza de variavel*/

			cd_sit_w	:= null;
			vl_doc_w	:= null;
			vl_bc_icms_w	:= null;
			vl_icms_w	:= null;
			vl_bc_icms_st_w	:= null;
			vl_icms_st_w	:= null;
			vl_ipi_w	:= null;
			vl_desc_w	:= null;
			vl_merc_w	:= null;
			
			/*Incrementa a variavel para o array*/

			qt_cursor_w:=	qt_cursor_w + 1;
			
			if (ie_gerou_dados_bloco_w = 'N') then
				ie_gerou_dados_bloco_w:=	'S';
			end if;
			
			begin
      movement_date_w := vet_c_nota_fiscal_w[i].dt_e_s;
			
			/*Verificao para encontrar  a situao da nota*/

			if (coalesce(vet_c_nota_fiscal_w[i].ie_status_envio, 'XX') <> 'XX') then
        if (vet_c_nota_fiscal_w[i](.nr_sequencia_ref IS NOT NULL AND .nr_sequencia_ref::text <> '') and ((vet_c_nota_fiscal_w[i].ie_tipo_nota = 'NC') or (vet_c_nota_fiscal_w[i].ie_compl_tributo = 'S'))) then
          cd_sit_w := '06';
        else
          case vet_c_nota_fiscal_w[i].ie_status_envio
            when 'E' then
              cd_sit_w := '00';
            when 'C' then
              cd_sit_w := '02';
            when 'X' then
              cd_sit_w := '05';
            when 'D' then
              cd_sit_w := '04';
            else
              cd_sit_w := null;
          end case;
        end if;
			else
				if (vet_c_nota_fiscal_w[i].cd_ind_oper = 0) then
					if (((vet_c_nota_fiscal_w[i].cd_ser)::numeric  >= 890) and ((vet_c_nota_fiscal_w[i].cd_ser)::numeric  <= 899)) then
						cd_sit_w :=	'08';
					else
            if (vet_c_nota_fiscal_w[i](.nr_sequencia_ref IS NOT NULL AND .nr_sequencia_ref::text <> '')) then
              cd_sit_w := '06';
            else
              cd_sit_w :=	'00';
            end if;
            SELECT * FROM tax_extemporaneous_icmsipi(vet_c_nota_fiscal_w[i].dt_doc, vet_c_nota_fiscal_w[i].nr_sequencia_ref, vet_c_nota_fiscal_w[i].ie_tipo_nota, movement_date_w, cd_sit_w) INTO STRICT movement_date_w, cd_sit_w;
					end if;
				end if;
			end if;
			exception
			when others then
				cd_sit_w :=	'00';
			end;

			begin
			/*Select para buscar os totalizadores do regintro c190*/

			select  CASE WHEN a.vl_tot_opr=0 THEN  null  ELSE a.vl_tot_opr END  vl_tot_opr,
					CASE WHEN a.vl_tot_bc_icms=0 THEN  null  ELSE a.vl_tot_bc_icms END  vl_tot_bc_icms,
					CASE WHEN a.vl_tot_icms=0 THEN  null  ELSE a.vl_tot_icms END  vl_tot_icms,
					CASE WHEN a.vl_tot_bc_icms_st=0 THEN  null  ELSE a.vl_tot_bc_icms_st END  vl_tot_bc_icms_st,
					CASE WHEN a.vl_tot_icms_st=0 THEN  null  ELSE a.vl_tot_icms_st END  vl_tot_icms_st,
					CASE WHEN a.vl_tot_ipi=0 THEN  null  ELSE a.vl_tot_ipi END  vl_tot_ipi
			into STRICT	vl_doc_w,
					vl_bc_icms_w,
					vl_icms_w,
					vl_bc_icms_st_w,
					vl_icms_st_w,
					vl_ipi_w
			from (
					SELECT	coalesce(sum(vl_opr),0) vl_tot_opr,
							coalesce(sum(vl_bc_icms),0) vl_tot_bc_icms,
							coalesce(sum(vl_icms),0) vl_tot_icms,
							coalesce(sum(vl_bc_icms_st),0) vl_tot_bc_icms_st,
							coalesce(sum(vl_icms_st),0) vl_tot_icms_st,
							coalesce(sum(vl_ipi),0) vl_tot_ipi
					from	fis_efd_icmsipi_C190 a
					where	a.nr_seq_nota = vet_c_nota_fiscal_w[i].nr_seq_nota
					and		a.nr_seq_controle = nr_seq_controle_p
				) a;

			exception
			when others then
				vl_doc_w	:= null;
				vl_bc_icms_w	:= null;
				vl_icms_w	:= null;
				vl_bc_icms_st_w	:= null;
				vl_icms_st_w	:= null;
				vl_ipi_w	:= null;
			end;
			
			begin
			/*Select para buscar os totalizadores do regintro c170*/

			select  CASE WHEN a.vl_tot_desc=0 THEN  null  ELSE a.vl_tot_desc END  vl_tot_desc,
					CASE WHEN a.vl_tot_item=0 THEN  null  ELSE a.vl_tot_item END  vl_tot_item
			into STRICT	vl_desc_w,
					vl_merc_w
			from (
					SELECT	coalesce(sum(vl_desc),0) vl_tot_desc,
							coalesce(sum(vl_item),0) vl_tot_item
					from	fis_efd_icmsipi_C170 a
					where	a.nr_seq_nota = vet_c_nota_fiscal_w[i].nr_seq_nota
					and		a.nr_seq_controle = nr_seq_controle_p
				) a;
			
			exception
			when others then
				vl_desc_w	:= null;
				vl_merc_w	:= null;
			end;
			
			/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_C100 */

			select	nextval('fis_efd_icmsipi_c100_seq')
			into STRICT	nr_seq_icmsipi_C100_w
			;
			
			/*Inserindo valores no array para realizao do forall posteriormente*/

			fis_registros_w[qt_cursor_w].nr_sequencia			    := nr_seq_icmsipi_C100_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao			  := clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario				    := nm_usuario_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao_nrec	:= clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario_nrec		  := nm_usuario_w;
			fis_registros_w[qt_cursor_w].cd_reg             	:= 'C100';
			fis_registros_w[qt_cursor_w].cd_ind_oper			    := vet_c_nota_fiscal_w[i].cd_ind_oper;
			fis_registros_w[qt_cursor_w].cd_ind_emit			    := vet_c_nota_fiscal_w[i].cd_ind_emit;
			fis_registros_w[qt_cursor_w].cd_mod					      := vet_c_nota_fiscal_w[i].cd_mod;
			fis_registros_w[qt_cursor_w].cd_sit					      := cd_sit_w;
			fis_registros_w[qt_cursor_w].cd_ser					      := substr(vet_c_nota_fiscal_w[i].cd_ser,1,3); /*RETIRAR O SUBSTR E FALAR COM RICARDO PARA VERIFICAR O CAMPO, 3 - 5*/
			fis_registros_w[qt_cursor_w].nr_doc             	:= substr(vet_c_nota_fiscal_w[i].nr_doc,1,9); /*RETIRAR O SUBSTR E FALAR COM RICARDO PARA VERIFICAR O CAMPO. 9 - 255*/
			
			if coalesce(vet_c_nota_fiscal_w[i].ie_status_envio,'XX') <> 'X' then  --  Quando o campo 'ie_status_envio' for 'X', preencher somente os campos 'REG', 'IND_OPER', 'IND_EMIT', 'COD_MOD', 'COD_SIT',' SER', e 'NUM_DOC'.
				fis_registros_w[qt_cursor_w].ds_chv_nfe         := substr(vet_c_nota_fiscal_w[i].ds_chv_nfe,1,44); /*Verificar o tamanho da chave da NF-e */
			end if;
			
			if (coalesce(vet_c_nota_fiscal_w[i].ie_status_envio, 'XX') not in ('X','C','D')) then  --  Quando o campo 'ie_status_envio' for 'X','C' ou 'D' No gerar os registros filhos(C101, C110, C113, C114, C140, C141, C170, C190,
				fis_registros_w[qt_cursor_w].cd_part			      := vet_c_nota_fiscal_w[i].cd_part;
				fis_registros_w[qt_cursor_w].dt_doc             := vet_c_nota_fiscal_w[i].dt_doc;
				fis_registros_w[qt_cursor_w].dt_e_s             := movement_date_w;
				fis_registros_w[qt_cursor_w].vl_doc				      := vl_doc_w;
				fis_registros_w[qt_cursor_w].cd_ind_pgto        := vet_c_nota_fiscal_w[i].cd_ind_pgto;
				fis_registros_w[qt_cursor_w].vl_desc            := vl_desc_w;
				fis_registros_w[qt_cursor_w].vl_abat_nt			    := vet_c_nota_fiscal_w[i].vl_abat_nt;
				fis_registros_w[qt_cursor_w].vl_merc			      := vl_merc_w;
				fis_registros_w[qt_cursor_w].cd_ind_frt			    := vet_c_nota_fiscal_w[i].cd_ind_frt;
				fis_registros_w[qt_cursor_w].vl_frt				      := vet_c_nota_fiscal_w[i].vl_frt;
				fis_registros_w[qt_cursor_w].vl_seg				      := vet_c_nota_fiscal_w[i].vl_seg;
				fis_registros_w[qt_cursor_w].vl_out_da			    := vet_c_nota_fiscal_w[i].vl_out_da;
				fis_registros_w[qt_cursor_w].vl_bc_icms			    := vl_bc_icms_w;
				fis_registros_w[qt_cursor_w].vl_icms			      := vl_icms_w;
				fis_registros_w[qt_cursor_w].vl_bc_icms_st		  := vl_bc_icms_st_w;
				fis_registros_w[qt_cursor_w].vl_icms_st			    := vl_icms_st_w;
				fis_registros_w[qt_cursor_w].vl_ipi				      := vl_ipi_w;
				fis_registros_w[qt_cursor_w].vl_pis				      := vet_c_nota_fiscal_w[i].vl_pis;
				fis_registros_w[qt_cursor_w].vl_cofins			    := vet_c_nota_fiscal_w[i].vl_cofins;
				fis_registros_w[qt_cursor_w].vl_pis_st			    := vet_c_nota_fiscal_w[i].vl_pis_st;
				fis_registros_w[qt_cursor_w].vl_cofins_st		    := vet_c_nota_fiscal_w[i].vl_cofins_st;
			end if;
			
			fis_registros_w[qt_cursor_w].ie_status_envio  		:= vet_c_nota_fiscal_w[i].ie_status_envio;
			fis_registros_w[qt_cursor_w].nr_seq_nota			    := vet_c_nota_fiscal_w[i].nr_seq_nota;
			fis_registros_w[qt_cursor_w].nr_seq_controle    	:= nr_seq_controle_p;
			
			/*Popula C101, caso necessario*/
			
			if ( substr(vet_c_nota_fiscal_w[i].cd_cfop,1,1) = '6') then
				nr_inscricao_estadual_w := null;
				if (length(vet_c_nota_fiscal_w[i].cd_part) < 11 ) then
					nr_inscricao_estadual_w := obter_dados_pf_pj(	vet_c_nota_fiscal_w[i].cd_part,null,'IE');
				else
					nr_inscricao_estadual_w := obter_dados_pf_pj(null,vet_c_nota_fiscal_w[i].cd_part,'IE');
				end if;
				
				if coalesce(nr_inscricao_estadual_w::text, '') = '' then
					CALL fis_gerar_reg_C101_icmsipi(	nr_seq_controle_p,
									vet_c_nota_fiscal_w[i].nr_seq_nota);
				end if;
			end if;
			

			if (nr_vetor_w >= 1000) then
				/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_C100 */

				forall j in fis_registros_w.first..fis_registros_w.last
					insert into fis_efd_icmsipi_C100 values fis_registros_w(j);

				nr_vetor_w	:= 0;
				fis_registros_w.delete;

				commit;
			end if;
			
			if (vet_c_nota_fiscal_w[i].cd_ind_emit = '0') then
				delete	FROM fis_efd_icmsipi_C170
				where 	nr_seq_nota = vet_c_nota_fiscal_w[i].nr_seq_nota;
			end if;
			
			/*incrementa variavel para realizar o forall quando chegar no valor limite*/

			nr_vetor_w	:= nr_vetor_w 	+ 1;
			
			end;
		end loop;
	EXIT WHEN NOT FOUND; /* apply on c_nota_fiscal */
	end loop;
	close c_nota_fiscal;

	end;
end loop;
close c_regras;

if (fis_registros_w.count > 0) then
	/*Inserindo registro que no entraram outro for all devido a quantidade de registros no vetor*/

	forall l in fis_registros_w.first..fis_registros_w.last
		insert into fis_efd_icmsipi_C100 values fis_registros_w(l);
		
	fis_registros_w.delete;

	commit;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualizao informao no controle de gerao de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update 	fis_efd_icmsipi_controle
	set		ie_mov_C = 'S'
	where 	nr_sequencia = nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_c100_icmsipi ( nr_seq_controle_p bigint) FROM PUBLIC;

