-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_score_producao_rd ( dt_referencia_p timestamp, nm_usuario_p text) AS $body$
DECLARE

 
qt_os_encerrada_alta_w		bigint;
qt_os_encerrada_baixa_w		bigint;
dt_inicial_w			timestamp;
dt_final_w			timestamp;
dt_final_mes_w			timestamp;
dt_inicial_tempo_w		timestamp;
dt_final_tempo_w		timestamp;
qt_fator_complex_w		double precision;
qt_complex_w			double precision;
qt_tempo_alta_w			double precision;
qt_tempo_baixa_w		double precision;
qt_producao_w			double precision;
qt_fator_complexidade_w		double precision;
qt_alta_complex_fator_w		double precision;
qt_score_w			double precision;
qt_hora_prod_mes_w		double precision;
qt_hora_prod_pf_w		double precision;
qt_score_final_w		double precision := 0;
qt_meta_w			double precision;
qt_fator_complex_6m_w		double precision;
qt_tempo_alta_6m_w		double precision;
qt_tempo_baixa_6m_w		double precision;
nr_seq_gerencia_w		bigint;
cd_cargo_w			bigint;
ie_funcao_usuario_w		varchar(15);
qt_defeito_w			double precision;
qt_os_encerrada_w		double precision;
qt_alta_complexidade_w		double precision;
CD_PESSOA_W			varchar(15);
qt_score_meta_w			double precision;
qt_score_media_funcao_acum_w	double precision;

c01 CURSOR FOR 
SELECT	nr_sequencia 
from	gerencia_wheb 
where	ie_situacao = 'A' 
and	ie_area_gerencia in ('DES','TEC','PDES') 
order by ds_gerencia;

c02 CURSOR FOR 
SELECT distinct 
	d.nr_seq_gerencia, 
	d.nr_sequencia nr_seq_grupo, 
	f.cd_cargo, 
	f.cd_pessoa_fisica, 
	b.ie_funcao_usuario, 
	b.nm_usuario_grupo 
from	usuario x, 
	pessoa_fisica f, 
	gerencia_wheb g, 
	grupo_desenvolvimento d, 
	usuario_grupo_des b 
where 	d.nr_sequencia		= b.nr_seq_grupo 
and	x.nm_usuario		= b.nm_usuario_grupo 
and	d.nr_seq_gerencia	= g.nr_sequencia 
and	x.cd_pessoa_fisica	= f.cd_pessoa_fisica 
and	PKG_DATE_UTILS.start_of(f.DT_ADMISSAO_HOSP,'month',0) <= PKG_DATE_UTILS.start_of(dt_referencia_p,'month',0) 
and	d.ie_situacao		= 'A' 
and	coalesce(d.ie_gerencia,'N')	<> 'S' 
and 	g.ie_area_gerencia in ('DES','TEC','PDES') 
and	coalesce(b.ie_funcao_usuario,'F') <> 'F' 
and	(obter_pf_usuario(nm_usuario_grupo,'C') IS NOT NULL AND (obter_pf_usuario(nm_usuario_grupo,'C'))::text <> '');

c03 CURSOR FOR 
SELECT	qt_meta 
from	score_meta 
where	coalesce(nr_seq_gerencia,nr_seq_gerencia_w)		= nr_seq_gerencia_w 
and	coalesce(cd_cargo,cd_cargo_w)		= cd_cargo_w 
and	coalesce(ie_funcao_usuario, ie_funcao_usuario_w)	= ie_funcao_usuario_w 
order by coalesce(nr_seq_gerencia,0), 
	 coalesce(cd_cargo,0), 
	 coalesce(ie_funcao_usuario,'X');

 
C04 CURSOR FOR 
SELECT	CD_PESSOA_FISICA, 
	DIVIDIR(DIVIDIR((SUM(QT_SCORE) * SUM(QT_HORA_PROD_MES)), SUM(QT_HORA_PROD_PF)),COUNT(*)) QT_ACUMULADO 
FROM	score_producao_desenv 
where	dt_referencia between PKG_DATE_UTILS.start_of(dt_final_w,'year',0) and dt_final_w 
and		(CD_PESSOA_FISICA IS NOT NULL AND CD_PESSOA_FISICA::text <> '') 
GROUP BY CD_PESSOA_FISICA;

C05 CURSOR FOR 
SELECT	ie_funcao_usuario, 
	qt_score_meta 
from	score_producao_desenv 
where	dt_referencia	= dt_inicial_w 
and		(CD_PESSOA_FISICA IS NOT NULL AND CD_PESSOA_FISICA::text <> '') 
group by ie_funcao_usuario, 
	qt_score_meta;

c06 CURSOR FOR 
SELECT distinct 
		g.nr_sequencia nr_seq_gerencia, 
		d.nr_sequencia nr_seq_grupo 
from	gerencia_wheb g, 
		grupo_desenvolvimento d 
where 	d.nr_seq_gerencia	= g.nr_sequencia 
and		d.ie_situacao		= 'A' 
--and		nvl(d.ie_gerencia,'N')	<> 'S' 
and 	g.ie_area_gerencia in ('DES','TEC','PDES');

c07 CURSOR FOR 
SELECT	vl_dominio 
from	valor_dominio 
where	cd_dominio = 5551 
and		ie_situacao = 'A' 
and		vl_dominio in ('DES','TEC','PDES');

/*Calcular o acumulado dos grupos */
 
C08 CURSOR FOR 
SELECT	nr_seq_grupo_des, 
		dividir(dividir((sum(qt_score) * sum(qt_hora_prod_mes)), sum(qt_hora_prod_pf)),count(*)) qt_acumulado 
FROM	score_producao_desenv 
where	dt_referencia between PKG_DATE_UTILS.start_of(dt_final_w,'year',0) and dt_final_w 
and		ie_abrangencia = 'GRU' 
group by nr_seq_grupo_des;

/*Calcular o acumulado das gerências */
 
C09 CURSOR FOR 
SELECT	nr_seq_gerencia, 
	dividir(dividir((sum(qt_score) * sum(qt_hora_prod_mes)), sum(qt_hora_prod_pf)),count(*)) qt_acumulado 
FROM	score_producao_desenv 
where	dt_referencia between PKG_DATE_UTILS.start_of(dt_final_w,'year',0) and dt_final_w 
and	ie_abrangencia = 'GER' 
group by nr_seq_gerencia;

/*Calcular o acumulado das áreas */
 
C10 CURSOR FOR 
SELECT	ie_area_gerencia, 
	dividir(dividir((sum(qt_score) * sum(qt_hora_prod_mes)), sum(qt_hora_prod_pf)),count(*)) qt_acumulado 
FROM	score_producao_desenv 
where	dt_referencia between PKG_DATE_UTILS.start_of(dt_final_w,'year',0) and dt_final_w 
and	ie_abrangencia = 'AREA' 
group by ie_area_gerencia;

c01_w c01%rowtype;	
c02_w c02%rowtype;
c04_w c04%rowtype;
c05_w c05%rowtype;
c06_w c06%rowtype;
c07_w c07%rowtype;
c08_w c08%rowtype;
c09_w c09%rowtype;
c10_w c10%rowtype;


BEGIN 
 
dt_inicial_w	:= PKG_DATE_UTILS.start_of(dt_referencia_p,'month',0);
dt_final_w	:= PKG_DATE_UTILS.END_OF(dt_referencia_p, 'MONTH',0);
 
if (dt_inicial_w < PKG_DATE_UTILS.start_of(clock_timestamp(),'month',0)) then 
	if (PKG_DATE_UTILS.start_of(dt_referencia_p,'dd',0) = PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.END_OF(dt_referencia_p, 'MONTH', 0),'dd',0)) then 
		/*Cursor para calcular o fator de complexidade por gerência, que será utilizado para calcular o score por usuário. */
 
		delete from score_fator_complexidade 
		where dt_referencia = dt_inicial_w;
		commit;
 
		open C01;
		loop 
		fetch C01 into 
			c01_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
 
			/* Total de OS encerrada de alta complexidade pela gerência */
 
			select	count(distinct a.nr_sequencia) 
			into STRICT	qt_os_encerrada_alta_w 
			from	usuario x, 
				grupo_desenvolvimento c, 
				man_ordem_servico a, 
				man_ordem_serv_ativ b 
			where	a.nr_sequencia	= b.nr_seq_ordem_serv 
			and	c.nr_sequencia	= a.nr_seq_grupo_des 
			and	x.nm_usuario	= b.nm_usuario_exec 
			and	x.cd_setor_atendimento in (2,7,16) 
			and	a.ie_status_ordem = 3 
			and	a.nr_seq_complex in (4,5,6) 
			and	a.dt_fim_real between dt_inicial_w and dt_final_w 
			and	c.nr_seq_gerencia = c01_w.nr_sequencia 
			and	exists ( SELECT 1 
					from	os_recebida_gerencia_desenv_v y 
					where	a.nr_sequencia = y.nr_sequencia);
					 
			 
			select	count(distinct a.nr_sequencia) 
			into STRICT	qt_os_encerrada_baixa_w 
			from	usuario x, 
				grupo_desenvolvimento c, 
				man_ordem_servico a, 
				man_ordem_serv_ativ b 
			where	a.nr_sequencia	= b.nr_seq_ordem_serv 
			and	c.nr_sequencia		= a.nr_seq_grupo_des 
			and	x.nm_usuario		= b.nm_usuario_exec 
			and	x.cd_setor_atendimento in (2,7,16) 
			and	a.ie_status_ordem 	= 3 
			and	a.nr_seq_complex not in (4,5,6) 
			and	a.dt_fim_real between dt_inicial_w and dt_final_w 
			and	c.nr_seq_gerencia = c01_w.nr_sequencia 
			and	exists (SELECT 1 
					from	os_recebida_gerencia_desenv_v y 
					where	a.nr_sequencia = y.nr_sequencia);
					 
			dt_inicial_tempo_w	:= PKG_DATE_UTILS.ADD_MONTH(dt_inicial_w,-6, 0);
			dt_final_tempo_w	:= PKG_DATE_UTILS.ADD_MONTH(dt_final_w,-1, 0);
			 
			select	dividir(sum(b.qt_minuto), count(distinct a.nr_sequencia)) qt_min_os_alta_complex 
			into STRICT	qt_tempo_alta_6m_w 
			from	usuario x, 
				grupo_desenvolvimento c, 
				man_ordem_servico a, 
				man_ordem_serv_ativ b 
			where	a.nr_sequencia	= b.nr_seq_ordem_serv 
			and	c.nr_sequencia	= a.nr_seq_grupo_des 
			and	x.nm_usuario	= b.nm_usuario_exec 
			and	x.cd_setor_atendimento in (2,7,16) 
			and	a.ie_status_ordem = 3 
			and	a.nr_seq_complex in (4,5,6) 
			and	a.dt_fim_real between dt_inicial_tempo_w and dt_final_tempo_w 
			and	c.nr_seq_gerencia = c01_w.nr_sequencia 
			and	exists ( SELECT 1 
					from	os_recebida_gerencia_desenv_v y 
					where	a.nr_sequencia = y.nr_sequencia);
					 
			/*Tempo médio gasto pelos usuários de desenvolvimento em ordens de baixa complexidade */
 
			select	dividir(sum(b.qt_minuto), count(distinct a.nr_sequencia)) qt_min_os_alta_complex 
			into STRICT	qt_tempo_baixa_6m_w 
			from	usuario x, 
				grupo_desenvolvimento c, 
				man_ordem_servico a, 
				man_ordem_serv_ativ b 
			where	a.nr_sequencia	= b.nr_seq_ordem_serv 
			and	c.nr_sequencia	= a.nr_seq_grupo_des 
			and	x.nm_usuario	= b.nm_usuario_exec 
			and	x.cd_setor_atendimento in (2,7,16) 
			and	a.ie_status_ordem = 3 
			and	a.nr_seq_complex not in (4,5,6) 
			and	a.dt_fim_real between dt_inicial_tempo_w and dt_final_tempo_w 
			and	c.nr_seq_gerencia = c01_w.nr_sequencia 
			and	exists ( SELECT 1 
					from	os_recebida_gerencia_desenv_v y 
					where	a.nr_sequencia = y.nr_sequencia);
			 
			qt_fator_complex_6m_w	:= dividir((dividir(qt_tempo_alta_6m_w,60) * 100) , dividir(qt_tempo_baixa_6m_w,60)) - 100;
				 
			/*Tempo médio gasto pelos usuários de desenvolvimento em ordens de alta complexidade */
 
			qt_tempo_alta_w		:= Obter_informacao_os_gerencia(dt_referencia_p,c01_w.nr_sequencia, 'TMAC', '');
			/*Tempo médio gasto pelos usuários de desenvolvimento em ordens de baixa complexidade */
 
			qt_tempo_baixa_w	:= Obter_informacao_os_gerencia(dt_referencia_p,c01_w.nr_sequencia, 'TMBC', '');
			 
			qt_fator_complex_w	:= dividir((dividir(qt_tempo_alta_w,60) * 100) , dividir(qt_tempo_baixa_w,60)) - 100;
			 
			insert into score_fator_complexidade(nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_gerencia, 
				qt_fator_complex, 
				qt_alta_complexidade, 
				qt_baixa_complexidade, 
				qt_tempo_alta, 
				qt_tempo_baixa, 
				dt_referencia, 
				qt_fator_complex_6m) 
			values (nextval('score_fator_complexidade_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				c01_w.nr_sequencia, 
				qt_fator_complex_w,	 
				qt_os_encerrada_alta_w, 
				qt_os_encerrada_baixa_w, 
				qt_tempo_alta_w, 
				qt_tempo_baixa_w, 
				dt_inicial_w, 
				qt_fator_complex_6m_w);
				 
				commit;
				 
		end loop;
		close C01;
	end if;
 
	delete from score_producao_desenv 
	where	dt_referencia = dt_inicial_w;
	commit;
 
	/*8.73 é a quantidade de horas que cada um deve produzir diariamente, retirando almoço. */
 
	dt_final_mes_w	:= dt_final_w;
	if (dt_final_w > clock_timestamp()) then 
		dt_final_mes_w	:= clock_timestamp();
	end if;
	qt_hora_prod_mes_w	:= obter_dias_uteis_Periodo(dt_inicial_w, dt_final_mes_w, coalesce(wheb_usuario_pck.get_cd_estabelecimento,1)) * 8.73;
 
	open C02;
	loop 
	fetch C02 into	 
		c02_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		 
		qt_defeito_w		:= obter_informacao_os_pessoa(c02_w.nm_usuario_grupo,'DEF', dt_referencia_p, dt_referencia_p);
		qt_os_encerrada_w	:= obter_informacao_os_pessoa(c02_w.nm_usuario_grupo,'ENC', dt_referencia_p, dt_referencia_p);
		qt_alta_complexidade_w	:= obter_informacao_os_pessoa(c02_w.nm_usuario_grupo,'CAE', dt_referencia_p, dt_referencia_p);
			 
		qt_producao_w	:= qt_os_encerrada_w - (qt_defeito_w * 3);
		 
		select	max(qt_fator_complex_6m) 
		into STRICT	qt_fator_complexidade_w 
		from	score_fator_complexidade 
		where	nr_seq_gerencia	= c02_w.nr_seq_gerencia 
		and	dt_referencia	= dt_inicial_w;
		 
		qt_complex_w	:= qt_fator_complexidade_w;
		if (qt_fator_complexidade_w < 0) then 
			qt_complex_w	:= 0;
		end if;
 
		qt_alta_complex_fator_w	:= (dividir((qt_alta_complexidade_w * qt_complex_w), 100));
		qt_score_w		:= qt_producao_w + qt_alta_complex_fator_w;
		 
		select	sum(qt_min_trab) 
		into STRICT	qt_hora_prod_pf_w 
		from	pf_hora_trabalhada 
		where	cd_pessoa_fisica	= c02_w.cd_pessoa_fisica 
		and	dt_referencia		= dt_inicial_w;
		 
		if (qt_hora_prod_pf_w > 0) then 
			qt_hora_prod_pf_w	:= dividir(qt_hora_prod_pf_w,60);
		end if;
		 
		nr_seq_gerencia_w	:= c02_w.nr_seq_gerencia;
		cd_cargo_w		:= c02_w.cd_cargo;
		ie_funcao_usuario_w	:= c02_w.ie_funcao_usuario;
		 
		qt_meta_w:= 0;
		open C03;
		loop 
		fetch C03 into	 
			qt_meta_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			qt_meta_w	:= qt_meta_w;
		end loop;
		close C03;
		 
		qt_score_final_w	:= dividir(qt_score_w,qt_hora_prod_pf_w) * qt_hora_prod_mes_w;
 
		insert into score_producao_desenv(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_gerencia, 
			nr_seq_grupo_des, 
			cd_cargo, 
			dt_referencia, 
			cd_pessoa_fisica, 
			qt_os_encerrada, 
			qt_defeito, 
			qt_alta_complexidade, 
			qt_producao, 
			qt_fator_complexidade, 
			qt_alta_complex_fator, 
			qt_score, 
			qt_hora_prod_mes, 
			qt_hora_prod_pf, 
			qt_score_final, 
			qt_score_meta, 
			ie_funcao_usuario, 
			IE_ABRANGENCIA) 
		values (nextval('score_producao_desenv_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			c02_w.nr_seq_gerencia, 
			c02_w.nr_seq_grupo, 
			c02_w.cd_cargo, 
			dt_inicial_w, 
			c02_w.cd_pessoa_fisica, 
			qt_os_encerrada_w, 
			qt_defeito_w, 
			qt_alta_complexidade_w, 
			qt_producao_w, 
			qt_fator_complexidade_w, 
			qt_alta_complex_fator_w, 
			qt_score_w, 
			qt_hora_prod_mes_w, 
			coalesce(qt_hora_prod_pf_w,0), 
			coalesce(qt_score_final_w,0), 
			qt_meta_w, 
			ie_funcao_usuario_w, 
			'USU');
 
	end loop;
	close C02;
 
 
 
	open C04;
	loop 
	fetch C04 into	 
		c04_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin 
 
		UPDATE	score_producao_desenv 
		set	QT_SCORE_ACUMULADO	= c04_w.QT_ACUMULADO 
		where	cd_pessoa_fisica	= c04_w.CD_PESSOA_FISICA 
		and	dt_referencia		= dt_inicial_w;
 
		end;
	end loop;
	close C04;
 
	open C05;
	loop 
	fetch C05 into	 
		c05_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin 
 
		select	DIVIDIR(DIVIDIR((SUM(QT_SCORE) * SUM(QT_HORA_PROD_MES)), SUM(QT_HORA_PROD_PF)),COUNT(*)) QT_MEDIA 
		into STRICT	qt_score_meta_w 
		FROM	score_producao_desenv 
		where	dt_referencia between PKG_DATE_UTILS.start_of(dt_final_w,'year',0) and dt_final_w 
		AND 	IE_FUNCAO_USUARIO	= c05_w.ie_funcao_usuario 
		AND	QT_SCORE_META		= c05_w.qt_score_meta;
 
 
		UPDATE	score_producao_desenv 
		set	QT_SCORE_MEDIA_FUNCAO_ACUM	= qt_score_meta_w 
		where	IE_FUNCAO_USUARIO		= c05_w.ie_funcao_usuario 
		AND	QT_SCORE_META			= c05_w.qt_score_meta 
		and	dt_referencia			= dt_inicial_w;
 
 
		select	DIVIDIR(DIVIDIR((SUM(QT_SCORE) * SUM(QT_HORA_PROD_MES)), SUM(QT_HORA_PROD_PF)),COUNT(*)) QT_MEDIA 
		into STRICT	qt_score_meta_w 
		FROM	score_producao_desenv 
		where	dt_referencia		= dt_inicial_w 
		AND 	IE_FUNCAO_USUARIO	= c05_w.ie_funcao_usuario 
		AND	QT_SCORE_META		= c05_w.qt_score_meta;
		 
		UPDATE	score_producao_desenv 
		set	QT_SCORE_MEDIA_FUNCAO	= qt_score_meta_w 
		where	IE_FUNCAO_USUARIO	= c05_w.ie_funcao_usuario 
		AND	QT_SCORE_META		= c05_w.qt_score_meta 
		and	dt_referencia		= dt_inicial_w;
 
 
		select	max(qt_score_media_funcao_acum) 
		into STRICT	qt_score_media_funcao_acum_w 
		from	score_producao_desenv 
		where	IE_FUNCAO_USUARIO	= c05_w.ie_funcao_usuario 
		AND	QT_SCORE_META		= c05_w.qt_score_meta 
		and	dt_referencia		= dt_inicial_w;
 
 
		select	DIVIDIR(DIVIDIR((SUM(QT_SCORE) * SUM(QT_HORA_PROD_MES)), SUM(QT_HORA_PROD_PF)),COUNT(*)) QT_MEDIA 
		into STRICT	qt_score_meta_w 
		FROM	score_producao_desenv 
		where	dt_referencia between PKG_DATE_UTILS.start_of(dt_final_w,'year',0) and dt_final_w 
		AND 	IE_FUNCAO_USUARIO	= c05_w.ie_funcao_usuario 
		AND	qt_score_acumulado	>= qt_score_media_funcao_acum_w;
 
 
		UPDATE	score_producao_desenv 
		set	QT_SCORE_MEDIA_HP_ACUM		= qt_score_meta_w 
		where	IE_FUNCAO_USUARIO		= c05_w.ie_funcao_usuario 
		AND	QT_SCORE_META			= c05_w.qt_score_meta 
		and	dt_referencia			= dt_inicial_w;
 
 
		end;
	end loop;
	close C05;
 
	/*Inserir indicadores do grupo*/
 
	open C06;
	loop 
	fetch C06 into	 
		c06_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
 
		qt_defeito_w			:= obter_informacao_os_grupo(dt_referencia_p, c06_w.nr_seq_grupo, 'ER', '');
		qt_os_encerrada_w		:= obter_informacao_os_grupo(dt_referencia_p, c06_w.nr_seq_grupo, 'EN', '');
		qt_alta_complexidade_w		:= obter_informacao_os_grupo(dt_referencia_p, c06_w.nr_seq_grupo, 'CAEU', '');
		qt_producao_w			:= qt_os_encerrada_w - (qt_defeito_w * 3);
		 
		select	max(qt_fator_complex_6m) 
		into STRICT	qt_fator_complexidade_w 
		from	score_fator_complexidade 
		where	nr_seq_gerencia	= c06_w.nr_seq_gerencia 
		and	dt_referencia	= dt_inicial_w;
		 
		qt_complex_w	:= qt_fator_complexidade_w;
		if (qt_fator_complexidade_w < 0) then 
			qt_complex_w	:= 0;
		end if;
 
		qt_alta_complex_fator_w	:= (dividir((qt_alta_complexidade_w * qt_complex_w), 100));
		qt_score_w				:= qt_producao_w + qt_alta_complex_fator_w;
			 
		select	sum(a.qt_min_trab) 
		into STRICT	qt_hora_prod_pf_w 
		from	pf_hora_trabalhada a, 
			usuario_grupo_des b, 
			usuario c 
		where	a.cd_pessoa_fisica	= c.cd_pessoa_fisica 
		and	c.nm_usuario		= b.nm_usuario_grupo 
		and	b.NR_SEQ_GRUPO		= c06_w.nr_seq_grupo 
		and	dt_referencia		= dt_inicial_w;
		 
		if (qt_hora_prod_pf_w > 0) then 
			qt_hora_prod_pf_w	:= dividir(qt_hora_prod_pf_w,60);
		end if;
		 
		nr_seq_gerencia_w	:= c06_w.nr_seq_gerencia;
		qt_score_final_w	:= dividir(qt_score_w,qt_hora_prod_pf_w) * qt_hora_prod_mes_w;
 
		insert into score_producao_desenv(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_gerencia, 
			nr_seq_grupo_des, 
			cd_cargo, 
			dt_referencia, 
			cd_pessoa_fisica, 
			qt_os_encerrada, 
			qt_defeito, 
			qt_alta_complexidade, 
			qt_producao, 
			qt_fator_complexidade, 
			qt_alta_complex_fator, 
			qt_score, 
			qt_hora_prod_mes, 
			qt_hora_prod_pf, 
			qt_score_final, 
			qt_score_meta, 
			ie_funcao_usuario, 
			ie_abrangencia) 
		values (nextval('score_producao_desenv_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			c06_w.nr_seq_gerencia, 
			c06_w.nr_seq_grupo, 
			null, 
			dt_inicial_w, 
			null, 
			qt_os_encerrada_w, 
			qt_defeito_w, 
			qt_alta_complexidade_w, 
			qt_producao_w, 
			qt_fator_complexidade_w, 
			qt_alta_complex_fator_w, 
			qt_score_w, 
			qt_hora_prod_mes_w, 
			coalesce(qt_hora_prod_pf_w,0), 
			coalesce(qt_score_final_w,0), 
			0, --qt_meta_w, 
			null, 
			'GRU');
 
		update	w_indicador_desenv_apres 
		set	qt_escore_mes	= coalesce(qt_score_final_w,0) 
		where	nr_seq_grupo	= c06_w.nr_seq_grupo 
		and	ie_abrangencia	= 'GRU' 
		and	dt_referencia	= trunc(dt_final_w);
 
	end loop;
	close C06;
 
	open C08;
	loop 
	fetch C08 into	 
		c08_w;
	EXIT WHEN NOT FOUND; /* apply on C08 */
		begin 
 
		UPDATE	score_producao_desenv 
		set	QT_SCORE_ACUMULADO	= c08_w.QT_ACUMULADO 
		where	nr_seq_grupo_des	= c08_w.nr_seq_grupo_des 
		and	dt_referencia		= dt_inicial_w 
		and	ie_abrangencia		= 'GRU';
 
		update	w_indicador_desenv_apres 
		set	qt_escore_ano	= c08_w.QT_ACUMULADO 
		where	nr_seq_grupo	= c08_w.nr_seq_grupo_des 
		and	ie_abrangencia	= 'GRU' 
		and	dt_referencia	= trunc(dt_final_w);
 
		end;
	end loop;
	close C08;
 
	commit;
 
	/*Inserir indicadores da gerência*/
 
	open C01;
	loop 
	fetch C01 into	 
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
 
		select	coalesce(sum(qt_os_encerrada),0), 
			coalesce(sum(qt_defeito),0), 
			coalesce(sum(qt_alta_complexidade),0), 
			coalesce(sum(qt_producao),0), 
			coalesce(max(qt_fator_complexidade),0), 
			coalesce(sum(qt_alta_complex_fator),0), 
			coalesce(sum(qt_hora_prod_pf),0) 
		into STRICT	qt_os_encerrada_w, 
			qt_defeito_w, 
			qt_alta_complexidade_w, 
			qt_producao_w, 
			qt_fator_complexidade_w, 
			qt_alta_complex_fator_w, 
			qt_hora_prod_pf_w 
		from	score_producao_desenv 
		where	nr_seq_gerencia = c01_w.nr_sequencia 
		and	ie_abrangencia	= 'GRU' --Grupo de RD 
		and	dt_referencia	= dt_inicial_w;
 
		qt_producao_w			:= qt_os_encerrada_w - (qt_defeito_w * 3);
		 
		qt_complex_w	:= qt_fator_complexidade_w;
		if (qt_fator_complexidade_w < 0) then 
			qt_complex_w	:= 0;
		end if;
 
		qt_alta_complex_fator_w	:= (dividir((qt_alta_complexidade_w * qt_complex_w), 100));
		qt_score_w		:= qt_producao_w + qt_alta_complex_fator_w;
 
		qt_score_final_w	:= dividir(qt_score_w,qt_hora_prod_pf_w) * qt_hora_prod_mes_w;
 
		insert into score_producao_desenv(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_gerencia, 
			nr_seq_grupo_des, 
			cd_cargo, 
			dt_referencia, 
			cd_pessoa_fisica, 
			qt_os_encerrada, 
			qt_defeito, 
			qt_alta_complexidade, 
			qt_producao, 
			qt_fator_complexidade, 
			qt_alta_complex_fator, 
			qt_score, 
			qt_hora_prod_mes, 
			qt_hora_prod_pf, 
			qt_score_final, 
			qt_score_meta, 
			ie_funcao_usuario, 
			ie_abrangencia) 
		values (nextval('score_producao_desenv_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			c01_w.nr_sequencia, 
			null, 
			null, 
			dt_inicial_w, 
			null, 
			qt_os_encerrada_w, 
			qt_defeito_w, 
			qt_alta_complexidade_w, 
			qt_producao_w, 
			qt_fator_complexidade_w, 
			qt_alta_complex_fator_w, 
			qt_score_w, 
			qt_hora_prod_mes_w, 
			coalesce(qt_hora_prod_pf_w,0), 
			coalesce(qt_score_final_w,0), 
			0, --qt_meta_w, 
			null, 
			'GER');
 
		update	w_indicador_desenv_apres 
		set	qt_escore_mes	= coalesce(qt_score_final_w,0) 
		where	nr_seq_gerencia	= c01_w.nr_sequencia 
		and	ie_abrangencia	= 'GER' 
		and	dt_referencia	= trunc(dt_final_w);
 
	end loop;
	close C01;
 
	open C09;
	loop 
	fetch C09 into	 
		c09_w;
	EXIT WHEN NOT FOUND; /* apply on C09 */
 
		UPDATE	score_producao_desenv 
		set	QT_SCORE_ACUMULADO	= c09_w.QT_ACUMULADO 
		where	nr_seq_gerencia		= c09_w.nr_seq_gerencia 
		and	dt_referencia		= dt_inicial_w 
		and	ie_abrangencia		= 'GER';
 
		update	w_indicador_desenv_apres 
		set	qt_escore_ano	= c09_w.QT_ACUMULADO 
		where	nr_seq_gerencia	= c09_w.nr_seq_gerencia 
		and	ie_abrangencia	= 'GER' 
		and	dt_referencia	= trunc(dt_final_w);
 
	end loop;
	close C09;
 
 
	/*Inserir indicadores da Área*/
 
	open C07;
	loop 
	fetch C07 into	 
		c07_w;
	EXIT WHEN NOT FOUND; /* apply on C07 */
 
		select	coalesce(sum(qt_os_encerrada),0), 
			coalesce(sum(qt_defeito),0), 
			coalesce(sum(qt_alta_complexidade),0), 
			coalesce(sum(qt_hora_prod_pf),0) 
		into STRICT	qt_os_encerrada_w, 
			qt_defeito_w, 
			qt_alta_complexidade_w, 
			qt_hora_prod_pf_w 
		from	score_producao_desenv a, 
			gerencia_wheb b 
		where	a.nr_seq_gerencia	= b.nr_sequencia 
		and	b.ie_area_gerencia	= C07_w.vl_dominio 
		and	b.ie_situacao		= 'A' 
		and	a.ie_abrangencia	= 'GER' --Gerência 
		and	a.dt_referencia		= dt_inicial_w;
 
		qt_tempo_alta_w		:= Obter_info_os_gerencia_area(dt_referencia_p, C07_w.vl_dominio, 'TMAC', '');
		qt_tempo_baixa_w	:= Obter_info_os_gerencia_area(dt_referencia_p, C07_w.vl_dominio, 'TMBC', '');
		qt_fator_complexidade_w	:= dividir((dividir(qt_tempo_alta_w,60) * 100) , dividir(qt_tempo_baixa_w,60)) - 100;
 
		qt_producao_w		:= qt_os_encerrada_w - (qt_defeito_w * 3);
		 
		qt_complex_w		:= qt_fator_complexidade_w;
 
		if (qt_fator_complexidade_w < 0) then 
			qt_complex_w	:= 0;
		end if;
 
		qt_alta_complex_fator_w	:= (dividir((qt_alta_complexidade_w * qt_complex_w), 100));
		qt_score_w		:= qt_producao_w + qt_alta_complex_fator_w;
 
		qt_score_final_w	:= dividir(qt_score_w,qt_hora_prod_pf_w) * qt_hora_prod_mes_w;
 
		 
		insert into score_producao_desenv(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_gerencia, 
			nr_seq_grupo_des, 
			cd_cargo, 
			dt_referencia, 
			cd_pessoa_fisica, 
			qt_os_encerrada, 
			qt_defeito, 
			qt_alta_complexidade, 
			qt_producao, 
			qt_fator_complexidade, 
			qt_alta_complex_fator, 
			qt_score, 
			qt_hora_prod_mes, 
			qt_hora_prod_pf, 
			qt_score_final, 
			qt_score_meta, 
			ie_funcao_usuario, 
			ie_abrangencia, 
			ie_area_gerencia) 
		values (nextval('score_producao_desenv_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			null, 
			null, 
			null, 
			dt_inicial_w, 
			null, 
			qt_os_encerrada_w, 
			qt_defeito_w, 
			qt_alta_complexidade_w, 
			qt_producao_w, 
			qt_fator_complexidade_w, 
			qt_alta_complex_fator_w, 
			qt_score_w, 
			qt_hora_prod_mes_w, 
			coalesce(qt_hora_prod_pf_w,0), 
			coalesce(qt_score_final_w,0), 
			0, --qt_meta_w, 
			null, 
			'AREA', 
			C07_w.vl_dominio);
 
 
		update	w_indicador_desenv_apres 
		set	qt_escore_mes	= coalesce(qt_score_final_w,0) 
		where	ie_area_gerencia= C07_w.vl_dominio 
		and	ie_abrangencia	= 'AREA' 
		and	dt_referencia	= trunc(dt_final_w);
	end loop;
	close C07;
 
	open C10;
	loop 
	fetch C10 into	 
		c10_w;
	EXIT WHEN NOT FOUND; /* apply on C10 */
 
		UPDATE	score_producao_desenv 
		set	QT_SCORE_ACUMULADO	= c10_w.QT_ACUMULADO 
		where	ie_area_gerencia	= c10_w.ie_area_gerencia 
		and	dt_referencia		= dt_inicial_w 
		and	ie_abrangencia		= 'AREA';
 
		update	w_indicador_desenv_apres 
		set	qt_escore_ano	= c10_w.QT_ACUMULADO 
		where	ie_area_gerencia= c10_w.ie_area_gerencia 
		and	ie_abrangencia	= 'AREA' 
		and	dt_referencia	= trunc(dt_final_w);
 
	end loop;
	close C10;
 
commit;
 
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_score_producao_rd ( dt_referencia_p timestamp, nm_usuario_p text) FROM PUBLIC;

