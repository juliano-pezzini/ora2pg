-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_transf_entre_leitos ((cd_perfil_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_interno_de_p bigint, nr_seq_interno_para_p bigint, ie_transf_acomp_de_p text, ie_transf_acomp_para_p text, ds_inconsistencia_p out text, ie_inconsistencia_p out text, nr_seq_interno_de_acomp_p bigint default null, nr_seq_interno_para_acomp_p bigint default null) is /* Leito de origem.*/
 nr_seq_interno_acomp_de_w unidade_atendimento.nr_seq_interno%type) AS $body$
DECLARE




ie_sexo_compativel_w	varchar(1);
ie_sexo_unid_w		varchar(1);
ie_sexo_fixo_w		varchar(1);
ie_sexo_pf_w		varchar(1);
ie_existe_paciente_w	varchar(1);
ie_livre_sexo_w		varchar(1);
BEGIN

ie_sexo_compativel_w := 'S';

if (coalesce(nr_atendimento_de_p,0) > 0) then

	select	max(a.ie_sexo)
	into STRICT	ie_sexo_pf_w
	from	pessoa_fisica a,
		atendimento_acompanhante b
	where	a.cd_pessoa_fisica  = b.cd_pessoa_fisica
	and	b.nr_atendimento    = nr_atendimento_de_p;
	
	select	coalesce(ie_sexo_paciente,'L'),
		coalesce(ie_sexo_fixo,'N')
	into STRICT	ie_sexo_unid_w,
		ie_sexo_fixo_w
	from 	unidade_atendimento
	where	cd_setor_atendimento = cd_setor_atendimento_p
	and	cd_unidade_basica = cd_unidade_basica_p
	and	cd_unidade_compl  = cd_unidade_compl_p;	
	
	select	coalesce(max('S'),'N')
	into STRICT	ie_existe_paciente_w
	from	unidade_atendimento
	where	cd_setor_atendimento = cd_setor_atendimento_p
	and	cd_unidade_basica    = cd_unidade_basica_p
	and	nr_atendimento	    <> nr_atendimento_para_p
	and 	ie_status_unidade    = 'P';
	
	if (ie_existe_paciente_w  = 'S') then
		select	coalesce(max('S'),'N')
		into STRICT	ie_livre_sexo_w
		from	unidade_atendimento
		where	cd_setor_atendimento = cd_setor_atendimento_p
		and	cd_unidade_basica    = cd_unidade_basica_p
		and	ie_sexo_fixo 	     = 'N'
		and 	upper(ie_sexo_paciente)     = upper(ie_sexo_pf_w);
	else
		ie_livre_sexo_w := 'N';
	end if;
	
	if (ie_existe_paciente_w  = 'N') then
		ie_sexo_compativel_w := 'S';
	elsif (ie_sexo_pf_w = ie_sexo_unid_w) then
		 ie_sexo_compativel_w := 'S';
	elsif	((ie_sexo_fixo_w = 'S') and (upper(ie_sexo_unid_w) = upper(ie_sexo_pf_w))) then
		 ie_sexo_compativel_w := 'S';
	elsif   ((ie_sexo_fixo_w = 'N') or (ie_sexo_unid_w in ('L','A'))) then
		ie_sexo_compativel_w := 'S';
	elsif 	(ie_existe_paciente_w = 'S' AND ie_livre_sexo_w = 'S') then
		ie_sexo_compativel_w := 'S';
	else
		 ie_sexo_compativel_w := 'N';
	end if;

end if;

return;

end;

begin

ie_inconsistencia_p := 'N';
ds_inconsistencia_p := null;

-- Parametro definido para 'S', ate verificarmos o porque ele foi desabilitado para o HTML.
--obter_Param_Usuario(44, 122, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_transf_acomp_w);
ie_transf_acomp_w := 'S';

ie_consist_sexo_pac_w := obter_Param_Usuario(44, 220, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_consist_sexo_pac_w);
ie_aguardando_hig_transf_w := obter_Param_Usuario(44, 202, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_aguardando_hig_transf_w);
ie_considerar_leito_rn_w := obter_Param_Usuario(44, 229, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_considerar_leito_rn_w);
ie_transf_entre_setor_hc_w := obter_param_usuario(3111, 265, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_transf_entre_setor_hc_w);
ie_tipo_atend_movimenta_w := obter_param_usuario(3111, 99, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_tipo_atend_movimenta_w);
ie_consistir_disp_w := obter_param_usuario(3111, 57, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_consistir_disp_w);
ie_define_gastos_rn_w := obter_param_usuario(3111, 189, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_define_gastos_rn_w);
ie_bloqueio_sem_orient_pep_w := obter_param_usuario(3111, 200, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_bloqueio_sem_orient_pep_w);
ie_transf_estab_setor_w := obter_param_usuario(3111, 322, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_transf_estab_setor_w);
qt_perm_transf_cc_w := obter_param_usuario(3111, 206, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, qt_perm_transf_cc_w);
qt_perm_mov_param_238_w := obter_param_usuario(3111, 238, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, qt_perm_mov_param_238_w);
ie_permite_intern_desfecho_w := obter_param_usuario(3111, 303, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_permite_intern_desfecho_w);
ie_PermiteInativos_w := obter_param_usuario(3111, 54, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_PermiteInativos_w);
ie_new_clinical_panorama_w := obter_Param_Usuario(338, 12, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_new_clinical_panorama_w);


/* Limpar tabela temporaria*/
delete 
from  w_unid_atend_temp
where nm_usuario = nm_usuario_p;
commit;

/* Leito de origem.*/

if (nr_seq_interno_de_p IS NOT NULL AND nr_seq_interno_de_p::text <> '') then
	select	max(nr_atendimento),
		max(cd_tipo_acomodacao),
		max(cd_setor_atendimento),
		max(cd_unidade_basica),
		max(cd_unidade_compl)
	into STRICT	nr_atendimento_de_w,
		cd_tipo_acomodacao_de_w,
		cd_setor_atendimento_de_w,
		cd_unidade_basica_de_w,
		cd_unidade_compl_de_w
	from	unidade_atendimento
	where	nr_seq_interno = nr_seq_interno_de_p;
	
	select	coalesce(max(nr_acompanhante), 0)
	into STRICT 	nr_acompanhante_de_w
	from	atend_categoria_convenio b
	where	b.nr_atendimento = nr_atendimento_de_w;
	
	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_alojamento_de_w	
	from	atendimento_acompanhante
	where	ie_alojamento = 'S'
	and     nr_atendimento = nr_atendimento_de_w;
	
	select	coalesce(max(b.nr_seq_interno),0)
	into STRICT 	nr_seq_interno_acomp_de_w
	from	unidade_atendimento b
	where	b.nr_atendimento_acomp = nr_atendimento_de_w
	and	b.ie_status_unidade    = 'M';

end if;

if (nr_seq_interno_para_p IS NOT NULL AND nr_seq_interno_para_p::text <> '') then
	select	max(nr_atendimento),
		max(cd_tipo_acomodacao),
		max(cd_setor_atendimento),
		max(cd_unidade_basica),
		max(cd_unidade_compl)
	into STRICT	nr_atendimento_para_w,
		cd_tipo_acomodacao_para_w,
		cd_setor_atendimento_para_w,
		cd_unidade_basica_para_w,
		cd_unidade_compl_para_w
	from	unidade_atendimento
	where	nr_seq_interno = nr_seq_interno_para_p;
	
	select	coalesce(max(nr_acompanhante), 0)
	into STRICT 	nr_acompanhante_para_w
	from	atend_categoria_convenio b
	where	b.nr_atendimento = nr_atendimento_para_w;
		
	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_alojamento_para_w	
	from	atendimento_acompanhante
	where	ie_alojamento = 'S'
	and     nr_atendimento = nr_atendimento_para_w;
	
	select	coalesce(max(b.nr_seq_interno),0)
	into STRICT 	nr_seq_interno_acomp_para_w
	from	unidade_atendimento b
	where	b.nr_atendimento_acomp = nr_atendimento_para_w
	and	b.ie_status_unidade    = 'M';
end if;

/* Consiste leito livre */

if (ie_transf_acomp_w = 'S') then
    if (ie_transf_acomp_de_p = 'S') then
        if ((ie_alojamento_para_w = 'S') and (get_if_free_bed_comp(nr_atendimento_de_w, nr_atendimento_para_w, cd_unidade_basica_para_w, cd_unidade_compl_para_w, cd_setor_atendimento_para_w) = 'N')) then
	    ds_inconsistencia_p := wheb_mensagem_pck.get_texto(1043245);
	    ie_inconsistencia_p := 'P';
	    return;
        end if;
    end if;

    if (ie_transf_acomp_para_p = 'S') then
	 if ((ie_alojamento_de_w = 'S') and (get_if_free_bed_comp(nr_atendimento_para_w, nr_atendimento_de_w, cd_unidade_basica_de_w, cd_unidade_compl_de_w, cd_setor_atendimento_de_w) = 'N')) then
	     ds_inconsistencia_p := wheb_mensagem_pck.get_texto(1043245);
	     ie_inconsistencia_p := 'D';
	     return;
	 end if;
    end if;
end if;


/* Consiste sexo paciente.*/

if (ie_consist_sexo_pac_w = 'S') then
	if (consiste_sexo_pac_trans_pan(cd_setor_atendimento_para_w, cd_unidade_basica_para_w, cd_unidade_compl_para_w, nr_atendimento_de_w, nr_atendimento_para_w) = 'N') then
	    ds_inconsistencia_p := wheb_mensagem_pck.get_texto(1052116);
	    ie_inconsistencia_p := 'P';
	    return;
	end if;
	
	if (consiste_sexo_pac_trans_pan(cd_setor_atendimento_de_w, cd_unidade_basica_de_w, cd_unidade_compl_de_w, nr_atendimento_para_w, nr_atendimento_de_w) = 'N') then
	    ds_inconsistencia_p := wheb_mensagem_pck.get_texto(1052116);
	    ie_inconsistencia_p := 'D';
	    return;
	end if;
end if;

/* Consiste sexo acompanhante */

if (ie_transf_acomp_w = 'S') then
    if (ie_transf_acomp_de_p = 'S') then
	    if (coalesce(nr_atendimento_de_w,0) > 0) then
		begin
			ie_consistir_sexo_acomp_w := substr(consistir_sexo_acomp_leito(nr_atendimento_de_w, nr_seq_interno_para_p, null, 'S'),1,1);
		exception  when others then
			ie_consistir_sexo_acomp_w := 'N';
		end;	
		
		if (coalesce(ie_consistir_sexo_acomp_w,'N') = 'S') then
		    if (obter_se_sexo_acomp(cd_setor_atendimento_para_w, cd_unidade_basica_para_w, cd_unidade_compl_para_w, nr_atendimento_de_w, nr_atendimento_para_w) = 'N') then
			ds_inconsistencia_p := obter_desc_expressao(880002);
			ie_inconsistencia_p := 'D';
		    end if;
		end if;
	    end if;
    end if;

    if (ie_transf_acomp_para_p = 'S') then
	if (coalesce(nr_atendimento_para_w,0) > 0) then
	    begin
		ie_consistir_sexo_acomp_w := substr(consistir_sexo_acomp_leito(nr_atendimento_para_w, nr_seq_interno_de_p, null, 'S'),1,1);
	    exception  when others then
		ie_consistir_sexo_acomp_w := 'N';
	    end;	
	
	    if (coalesce(ie_consistir_sexo_acomp_w,'N') = 'S') then
		if (obter_se_sexo_acomp(cd_setor_atendimento_de_w, cd_unidade_basica_de_w, cd_unidade_compl_de_w, nr_atendimento_para_w, nr_atendimento_de_w) = 'N') then
		    ds_inconsistencia_p := obter_desc_expressao(880002);
	            ie_inconsistencia_p := 'P';
		end if;
	    end if;
	end if;
    end if;
end if;


/* Consistencia parametro  99 Movimentacao de pacientes*/

if (ie_tipo_atend_movimenta_w IS NOT NULL AND ie_tipo_atend_movimenta_w::text <> '') then
	if ((cd_setor_atendimento_de_w IS NOT NULL AND cd_setor_atendimento_de_w::text <> '') and (substr(obter_classif_setor(cd_setor_atendimento_de_w),1,1) in (3,4,8))) then
	     select	substr(obter_se_contido_char(ie_tipo_atendimento, ie_tipo_atend_movimenta_w),1,1)
	     into STRICT	ie_nao_permite_w
	     from	atendimento_paciente
	     where	nr_atendimento = nr_atendimento_de_w;
	
	     if (coalesce(ie_nao_permite_w,'N') = 'S') then
		ds_inconsistencia_p := wheb_mensagem_pck.get_texto(315397);
		ie_inconsistencia_p := 'D';
	     end if;
	end if;
	
	if ((cd_setor_atendimento_para_w IS NOT NULL AND cd_setor_atendimento_para_w::text <> '') and (substr(obter_classif_setor(cd_setor_atendimento_para_w),1,1) in (3,4,8))) then
	     select	substr(obter_se_contido_char(ie_tipo_atendimento, ie_tipo_atend_movimenta_w),1,1)
	     into STRICT	ie_nao_permite_w
	     from	atendimento_paciente
	     where	nr_atendimento = nr_atendimento_para_w;
	
	     if (coalesce(ie_nao_permite_w,'N') = 'S') then
		ds_inconsistencia_p := wheb_mensagem_pck.get_texto(315397);
		ie_inconsistencia_p := 'P';
	     end if;
	end if;
end if;

/* Consistencia parametro  57 Movimentacao de pacientes*/

if (ie_consistir_disp_w in ('A','T')) then
	 if ((coalesce(nr_atendimento_de_w,0) > 0) and (obter_se_atendimento_disp(nr_atendimento_de_w) = 'S')) then
	     --Nao e possivel gerar a alta com dispositivos em uso. Parametro [57].	
	     ds_inconsistencia_p := wheb_mensagem_pck.get_texto(291821);
	     ie_inconsistencia_p := 'D';
	 end if;
	
	 if ((coalesce(nr_atendimento_para_w,0) > 0) and (obter_se_atendimento_disp(nr_atendimento_para_w) = 'S')) then
	     --Nao e possivel gerar a alta com dispositivos em uso. Parametro [57].	
	     ds_inconsistencia_p := wheb_mensagem_pck.get_texto(291821);
	     ie_inconsistencia_p := 'P';
	 end if;
end if;

/* Consistencia parametro  189 Movimentacao de pacientes*/

if (coalesce(ie_define_gastos_rn_w,'N') = 'S') then
	if (coalesce(nr_atendimento_de_w,0) > 0) then
	        select 	max(ie_trat_conta_rn),
			max(nr_atendimento_mae)
	        into STRICT	ie_trat_conta_rn_w,
			nr_atendimento_mae_w
	        from 	atendimento_paciente
	        where	nr_atendimento = nr_atendimento_de_w;
	
	        if (obter_se_atend_rn(nr_atendimento_de_w) = 'S') and 
		   ((ie_trat_conta_rn_w = wheb_mensagem_pck.get_texto(1110241)) or (coalesce(ie_trat_conta_rn_w::text, '') = '')) and (obter_classif_setor(cd_setor_atendimento_de_w) = 4) and (nr_atendimento_mae_w IS NOT NULL AND nr_atendimento_mae_w::text <> '') then
		    --A transferencia nao pode ser realizada pois o destino dos gastos nao foi definido para o RN na Entrada Unica de Pacientes. Parametro [189].');
		    ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197122);
		    ie_inconsistencia_p := 'D';
	        end if;
	end if;
	
	if (coalesce(nr_atendimento_para_w,0) > 0) then
	        select 	max(ie_trat_conta_rn),
			max(nr_atendimento_mae)
	        into STRICT	ie_trat_conta_rn_w,
			nr_atendimento_mae_w
	        from 	atendimento_paciente
	        where	nr_atendimento = nr_atendimento_para_w;
	
	        if (obter_se_atend_rn(nr_atendimento_para_w) = 'S') and 
		   ((ie_trat_conta_rn_w = wheb_mensagem_pck.get_texto(1110241)) or (coalesce(ie_trat_conta_rn_w::text, '') = '')) and (obter_classif_setor(cd_setor_atendimento_para_w) = 4) and (nr_atendimento_mae_w IS NOT NULL AND nr_atendimento_mae_w::text <> '') then
		    --A transferencia nao pode ser realizada pois o destino dos gastos nao foi definido para o RN na Entrada Unica de Pacientes. Parametro [189].');
		    ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197122);
		    ie_inconsistencia_p := 'P';
	        end if;
	end if;
end if;	

/* Consistencia parametro  265 Movimentacao de pacientes*/

if (ie_transf_entre_setor_hc_w = 'N') then
	if (coalesce(nr_atendimento_de_w,0) > 0) then
		select	count(*)
		into STRICT	qt_homecare_w
		from	setor_atendimento b,
			atend_paciente_unidade a
		where	b.cd_classif_setor	= 8
		and	a.cd_setor_atendimento	= b.cd_setor_atendimento
		and	a.nr_atendimento	= nr_atendimento_de_w;

		if (qt_homecare_w	> 0)  then
			--Nao podem ser feitas transferencias de atendimentos com o setor Home Care!');
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197118);
			ie_inconsistencia_p := 'D';
			return;
		end if;
	end if;
	
	if (coalesce(nr_atendimento_para_w,0) > 0) then
		select	count(*)
		into STRICT	qt_homecare_w
		from	setor_atendimento b,
			atend_paciente_unidade a
		where	b.cd_classif_setor	= 8
		and	a.cd_setor_atendimento	= b.cd_setor_atendimento
		and	a.nr_atendimento	= nr_atendimento_para_w;

		if (qt_homecare_w	> 0)  then
			--Nao podem ser feitas transferencias de atendimentos com o setor Home Care!');
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197118);
			ie_inconsistencia_p := 'P';
			return;
		end if;
	end if;
end if;

/* Consistencia parametro  303 Movimentacao de pacientes*/

if (ie_permite_intern_desfecho_w = 'N') then	
	
	if (coalesce(nr_atendimento_de_w,0) > 0) and (obter_tipo_atendimento(nr_atendimento_de_w) = 3) and (obter_classif_setor(cd_setor_atendimento_de_w) in (3,4)) then
		
		begin
			select	coalesce(max(1),0)
			into STRICT	ie_existe_desfecho_w
			from	atendimento_alta z,
				parametro_medico p
			where	z.nr_atendimento = nr_atendimento_de_w
			and	z.ie_desfecho = 'I'
			and     p.cd_estabelecimento = cd_estabelecimento_p
			and 	((z.ie_tipo_orientacao <> 'P')
			or (coalesce(p.ie_liberar_desfecho,'N')  = 'N') 
			or  	((z.dt_liberacao IS NOT NULL AND z.dt_liberacao::text <> '') and (coalesce(z.dt_inativacao::text, '') = '')))  LIMIT 1;
		exception
			when	no_data_found then
				ie_existe_desfecho_w := 0;
		end;	
		
		if (ie_existe_desfecho_w = 0) then
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(276597);
			ie_inconsistencia_p := 'D';
		end if;	
	end if;
	
	if (coalesce(nr_atendimento_para_w,0) > 0) and (obter_tipo_atendimento(nr_atendimento_para_w) = 3) and (obter_classif_setor(cd_setor_atendimento_para_w) in (3,4)) then
		
		begin
			select	coalesce(max(1),0)
			into STRICT	ie_existe_desfecho_w
			from	atendimento_alta z,
				parametro_medico p
			where	z.nr_atendimento = nr_atendimento_para_w
			and	z.ie_desfecho = 'I'
			and     p.cd_estabelecimento = cd_estabelecimento_p
			and 	((z.ie_tipo_orientacao <> 'P')
			or (coalesce(p.ie_liberar_desfecho,'N')  = 'N') 
			or  	((z.dt_liberacao IS NOT NULL AND z.dt_liberacao::text <> '') and (coalesce(z.dt_inativacao::text, '') = '')))  LIMIT 1;
		exception
			when	no_data_found then
				ie_existe_desfecho_w := 0;
		end;	
		
		if (ie_existe_desfecho_w = 0) then
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(276597);
			ie_inconsistencia_p := 'P';
		end if;	
	end if;
end if;

/* Controlar faixa etaria */

if (cd_setor_atendimento_de_w IS NOT NULL AND cd_setor_atendimento_de_w::text <> '')	then
	select	max(ie_controle_faixa_etaria)
	into STRICT	ie_controle_faixa_etaria_w
	from	unidade_atendimento
	where	cd_setor_atendimento = cd_setor_atendimento_de_w
	and	cd_unidade_basica = cd_unidade_basica_de_w
	and	cd_unidade_compl = cd_unidade_compl_de_w;

	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	atendimento_paciente
	where	nr_atendimento 	= nr_atendimento_de_w;
	
	if (ie_controle_faixa_etaria_w = 'S') then	
		ie_faixa_etaria_w :=	coalesce(obter_se_faixa_etaria_pac(cd_pessoa_fisica_w, cd_setor_atendimento_de_w),'S');
		if (ie_faixa_etaria_w  = 'N') then	
		    ds_inconsistencia_p := wheb_mensagem_pck.get_texto(230794);
		    ie_inconsistencia_p := 'D';
		end if;
	end if;
end if;

/* Controlar faixa etaria */

if (cd_setor_atendimento_para_w IS NOT NULL AND cd_setor_atendimento_para_w::text <> '')	then
	select	max(ie_controle_faixa_etaria)
	into STRICT	ie_controle_faixa_etaria_w
	from	unidade_atendimento
	where	cd_setor_atendimento = cd_setor_atendimento_para_w
	and	cd_unidade_basica = cd_unidade_basica_para_w
	and	cd_unidade_compl = cd_unidade_compl_para_w;

	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	atendimento_paciente
	where	nr_atendimento 	= nr_atendimento_para_w;
	
	if (ie_controle_faixa_etaria_w = 'S') then	
		ie_faixa_etaria_w :=	coalesce(obter_se_faixa_etaria_pac(cd_pessoa_fisica_w, cd_setor_atendimento_para_w),'S');
		if (ie_faixa_etaria_w  = 'N') then	
		    ds_inconsistencia_p := wheb_mensagem_pck.get_texto(230794);
		    ie_inconsistencia_p := 'P';
		end if;
	end if;
end if;

/* Consistencia parametro  206 Movimentacao de pacientes*/

if (coalesce(qt_perm_transf_cc_w,0) > 0) then
	if (coalesce(nr_atendimento_de_w,0) > 0) then
		select	max(ie_tipo_convenio)
		into STRICT	ie_tipo_convenio_atend_w
		from	atendimento_paciente
		where 	nr_atendimento = nr_atendimento_de_w;
		
		select	count(*)
		into STRICT	qt_existe_setor_cc_w
		from	atend_paciente_unidade
		where	nr_atendimento = nr_atendimento_de_w
		and	obter_classif_setor(cd_setor_atendimento) = 2;
		

		if (obter_classif_setor(cd_setor_atendimento_de_w) = '2') and (ie_tipo_convenio_atend_w = 3) and (qt_existe_setor_cc_w >= qt_perm_transf_cc_w) then
			--Esse paciente ja teve a quantidade de passagens permitidas para um setor de centro cirurgico. Parametro[206].');
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197120);
			ie_inconsistencia_p := 'D';
			return;
		end if;
	end if;
	
	if (coalesce(nr_atendimento_para_w,0) > 0) then
		select	max(ie_tipo_convenio)
		into STRICT	ie_tipo_convenio_atend_w
		from	atendimento_paciente
		where 	nr_atendimento = nr_atendimento_para_w;
		
		select	count(*)
		into STRICT	qt_existe_setor_cc_w
		from	atend_paciente_unidade
		where	nr_atendimento = nr_atendimento_para_w
		and	obter_classif_setor(cd_setor_atendimento) = 2;
		

		if (obter_classif_setor(cd_setor_atendimento_para_w) = '2') and (ie_tipo_convenio_atend_w = 3) and (qt_existe_setor_cc_w >= qt_perm_transf_cc_w) then
			--Esse paciente ja teve a quantidade de passagens permitidas para um setor de centro cirurgico. Parametro[206].');
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197120);
			ie_inconsistencia_p := 'P';
			return;
		end if;
	end if;
end if;


/* Consistencia parametro  238 Movimentacao de pacientes*/

if (qt_perm_mov_param_238_w = 'N') then
	if (coalesce(nr_atendimento_de_w,0)> 0) then
		select 	max(dt_alta),
			max(dt_alta_medico)
		into STRICT	dt_alta_238_w,
			dt_alta_medico_238_w
		from	atendimento_paciente	
		where	nr_atendimento = nr_atendimento_de_w;
		
		if (dt_alta_medico_238_w IS NOT NULL AND dt_alta_medico_238_w::text <> '') and (coalesce(dt_alta_238_w::text, '') = '') then
			-- Voce nao possui permissao para realizar a transferencia do paciente!
			-- Pois o mesmo possui alta medica e nao possui a data de alta informada. Parametro[238].
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(217414);
			ie_inconsistencia_p := 'D';
			return;
		end  if;
	end if;
	
	if (coalesce(nr_atendimento_para_w,0)> 0) then
		select 	max(dt_alta),
			max(dt_alta_medico)
		into STRICT	dt_alta_238_w,
			dt_alta_medico_238_w
		from	atendimento_paciente	
		where	nr_atendimento = nr_atendimento_para_w;
		
		if (dt_alta_medico_238_w IS NOT NULL AND dt_alta_medico_238_w::text <> '') and (coalesce(dt_alta_238_w::text, '') = '') then
			-- Voce nao possui permissao para realizar a transferencia do paciente!
			-- Pois o mesmo possui alta medica e nao possui a data de alta informada. Parametro[238].
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(217414);
			ie_inconsistencia_p := 'P';
			return;
		end  if;
	end if;
end if;	

/* Consistencia parametro  200 Movimentacao de pacientes*/

If (ie_bloqueio_sem_orient_pep_w = 'N') then	
	if (cd_setor_atendimento_de_w IS NOT NULL AND cd_setor_atendimento_de_w::text <> '') then
		if (ie_transf_estab_setor_w = 'S') then
			select	obter_atepacu_paciente(nr_atendimento_de_w, 'A')
			into STRICT	nr_seq_atepacu_atual_w
			;
		else
			select	obter_atepacu_paciente(nr_atendimento_de_w, 'IAA')
			into STRICT	nr_seq_atepacu_atual_w
			;
		end if;
		
		select	coalesce(max(cd_setor_atendimento),0)
		into STRICT	cd_setor_atual_w
		from	atend_paciente_unidade
		where	nr_seq_interno = nr_seq_atepacu_atual_w;
		
		if (cd_setor_atual_w <> cd_setor_atendimento_de_w) then
			begin	
				select	nr_sequencia
				into STRICT	qt_pep_orientacao_geral_w
				from	pep_orientacao_geral
				where	nr_atendimento = nr_atendimento_de_w;	
			exception
			when 	no_data_found then
				select 	coalesce(max(ds_item_instituicao),wheb_mensagem_pck.get_texto(297923)) --'orientacoes de alta'
				into STRICT	ds_item_w
				from 	perfil_item_pront
				where 	coalesce(cd_perfil,cd_perfil_p) = cd_perfil_p
				and	nr_seq_item_pront = 153;			
			
				--E obrigatorio o preenchimento do item ' || ds_item_w || ' no PEP! Parametro [200]');
				if (ds_item_w IS NOT NULL AND ds_item_w::text <> '') then
					ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197123,'ITEM='||ds_item_w);
				else
					ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197123,'ITEM='||wheb_mensagem_pck.get_texto(297923)); --'Orientacoes de alta'
				end if;
				
				ie_inconsistencia_p := 'D';
				return;
			end;
		end if;
	end if;
	
	if (cd_setor_atendimento_para_w IS NOT NULL AND cd_setor_atendimento_para_w::text <> '') then
		if (ie_transf_estab_setor_w = 'S') then
			select	obter_atepacu_paciente(nr_atendimento_para_w, 'A')
			into STRICT	nr_seq_atepacu_atual_w
			;
		else
			select	obter_atepacu_paciente(nr_atendimento_para_w, 'IAA')
			into STRICT	nr_seq_atepacu_atual_w
			;
		end if;
		
		select	coalesce(max(cd_setor_atendimento),0)
		into STRICT	cd_setor_atual_w
		from	atend_paciente_unidade
		where	nr_seq_interno = nr_seq_atepacu_atual_w;
		
		if (cd_setor_atual_w <> cd_setor_atendimento_para_w) then
			begin	
				select	nr_sequencia
				into STRICT	qt_pep_orientacao_geral_w
				from	pep_orientacao_geral
				where	nr_atendimento = nr_atendimento_para_w;	
			exception
			when 	no_data_found then
				select 	coalesce(max(ds_item_instituicao),wheb_mensagem_pck.get_texto(297923)) --'orientacoes de alta'
				into STRICT	ds_item_w
				from 	perfil_item_pront
				where 	coalesce(cd_perfil,cd_perfil_p) = cd_perfil_p
				and	nr_seq_item_pront = 153;			
			
				--e obrigatorio o preenchimento do item ' || ds_item_w || ' no PEP! Parametro [200]');
				if (ds_item_w IS NOT NULL AND ds_item_w::text <> '') then
					ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197123,'ITEM='||ds_item_w);
				else
					ds_inconsistencia_p := wheb_mensagem_pck.get_texto(197123,'ITEM='||wheb_mensagem_pck.get_texto(297923)); --'Orientacoes de alta'
				end if;
				
				ie_inconsistencia_p := 'P';
				return;
			end;
		end if;
	end if;
end if;


if (cd_setor_atendimento_de_w IS NOT NULL AND cd_setor_atendimento_de_w::text <> '') then
	select	max(ie_tipo_evolucao_saida)
	into STRICT	ie_tipo_evolucao_saida_w
	from	setor_atendimento
	where	cd_setor_atendimento	= cd_setor_atendimento_de_w;

	if (ie_tipo_evolucao_saida_w IS NOT NULL AND ie_tipo_evolucao_saida_w::text <> '') then
	
		if (ie_transf_estab_setor_w = 'S') then
			select	obter_atepacu_paciente(nr_atendimento_de_w, 'A')
			into STRICT	nr_seq_atepacu_atual_w
			;
		else
			select	obter_atepacu_paciente(nr_atendimento_de_w, 'IAA')
			into STRICT	nr_seq_atepacu_atual_w
			;
		end if;
		
		select	max(dt_entrada_unidade)
		into STRICT	dt_entrada_unidade_w
		from	atend_paciente_unidade
		where	nr_seq_interno = nr_seq_atepacu_atual_w;

		select  coalesce(max('S'),'N')
		into STRICT	ie_possui_evolucao_pac_w
		from    evolucao_paciente
		where   nr_atendimento = nr_atendimento_de_w
		and	ie_evolucao_clinica = ie_tipo_evolucao_saida_w
		and	dt_liberacao >= coalesce(dt_entrada_unidade_w, dt_liberacao);
		
		if (coalesce(ie_possui_evolucao_pac_w, 'N') = 'N') then			
			---Nao e possivel gerar a transferencia pois o setor #@CD_SETOR_ATEND_P#@ precisa de uma evolucao do tipo #@DS_TIPO_EVOLUCAO#@ liberada apos a data de entrada do setor atual
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(267888,'CD_SETOR_ATEND_P='||  obter_desc_Setor_atend( cd_setor_atendimento_de_w) || ';'
												     || 'DS_TIPO_EVOLUCAO='||  obter_desc_tipo_evolucao(ie_tipo_evolucao_saida_w));
			
			ie_inconsistencia_p := 'D';
			return;
		end if;	
	end if;
end if;

if (cd_setor_atendimento_para_w IS NOT NULL AND cd_setor_atendimento_para_w::text <> '') then
	select	max(ie_tipo_evolucao_saida)
	into STRICT	ie_tipo_evolucao_saida_w
	from	setor_atendimento
	where	cd_setor_atendimento	= cd_setor_atendimento_para_w;

	if (ie_tipo_evolucao_saida_w IS NOT NULL AND ie_tipo_evolucao_saida_w::text <> '') then
	
		if (ie_transf_estab_setor_w = 'S') then
			select	obter_atepacu_paciente(nr_atendimento_para_w, 'A')
			into STRICT	nr_seq_atepacu_atual_w
			;
		else
			select	obter_atepacu_paciente(nr_atendimento_para_w, 'IAA')
			into STRICT	nr_seq_atepacu_atual_w
			;
		end if;
		
		select	max(dt_entrada_unidade)
		into STRICT	dt_entrada_unidade_w
		from	atend_paciente_unidade
		where	nr_seq_interno = nr_seq_atepacu_atual_w;

		select  coalesce(max('S'),'N')
		into STRICT	ie_possui_evolucao_pac_w
		from    evolucao_paciente
		where   nr_atendimento = nr_atendimento_para_w
		and	ie_evolucao_clinica = ie_tipo_evolucao_saida_w
		and	dt_liberacao >= coalesce(dt_entrada_unidade_w, dt_liberacao);
		
		if (coalesce(ie_possui_evolucao_pac_w, 'N') = 'N') then			
			---Nao e possivel gerar a transferencia pois o setor #@CD_SETOR_ATEND_P#@ precisa de uma evolucao do tipo #@DS_TIPO_EVOLUCAO#@ liberada apos a data de entrada do setor atual
			ds_inconsistencia_p := wheb_mensagem_pck.get_texto(267888,'CD_SETOR_ATEND_P='||  obter_desc_Setor_atend( cd_setor_atendimento_para_w) || ';'
												     || 'DS_TIPO_EVOLUCAO='||  obter_desc_tipo_evolucao(ie_tipo_evolucao_saida_w));
			
			ie_inconsistencia_p := 'P';
			return;
		end if;	
	end if;
end if;

/*  Limpar leito acompanhante quando necessario source*/

if (ie_transf_acomp_de_p <> 'S') then
   ie_existe_acomp_w := 'N';

   select coalesce(max('S'), 'N')
   into STRICT	  ie_existe_acomp_w
   from	  unidade_atendimento
   where  nr_atendimento_acomp = nr_atendimento_de_w
   and	  cd_unidade_basica = cd_unidade_basica_de_w
   and	  ie_status_unidade = 'M';

   if (ie_existe_acomp_w = 'S') then
       CALL limpar_acomp_leito(nr_atendimento_de_w, cd_unidade_basica_de_w,  cd_unidade_compl_de_w, cd_setor_atendimento_de_w);
   end if;
end if;


/*  Limpar leito acompanhante quando necessario  destiny*/

if (ie_transf_acomp_para_p <> 'S') then
   ie_existe_acomp_w := 'N';

   select coalesce(max('S'), 'N')
   into STRICT	  ie_existe_acomp_w
   from	  unidade_atendimento
   where  nr_atendimento_acomp = nr_atendimento_para_w
   and	  cd_unidade_basica = cd_unidade_basica_para_w
   and	  ie_status_unidade = 'M';

   if (ie_existe_acomp_w = 'S') then
       CALL limpar_acomp_leito(nr_atendimento_para_w, cd_unidade_basica_para_w,  cd_unidade_compl_para_w, cd_setor_atendimento_para_w);
   end if;
end if;

/* Gravar infromacoes e gerar a transferencia*/

ie_ctrl_loop_w := 0;
for C03_W in C03(nr_atendimento_de_w, cd_setor_atendimento_de_w, cd_unidade_basica_de_w, nr_atendimento_para_w, cd_setor_atendimento_para_w, cd_unidade_basica_para_w ) loop
    array_beds_w[ie_ctrl_loop_w].nr_seq_interno    	:= C03_W.nr_seq_interno;
    array_beds_w[ie_ctrl_loop_w].nr_atendimento    	:= C03_W.nr_atendimento;
    array_beds_w[ie_ctrl_loop_w].ie_status_unidade 	:= C03_W.ie_status_unidade;
    array_beds_w[ie_ctrl_loop_w].nm_usuario	   	:= C03_W.nm_usuario;
    array_beds_w[ie_ctrl_loop_w].dt_atualizacao 	:= C03_W.dt_atualizacao;
    array_beds_w[ie_ctrl_loop_w].dt_entrada_unidade 	:= C03_W.dt_entrada_unidade;
    array_beds_w[ie_ctrl_loop_w].nr_atendimento_acomp 	:= C03_W.nr_atendimento_acomp;
    array_beds_w[ie_ctrl_loop_w].cd_paciente_reserva 	:= C03_W.cd_paciente_reserva;
    array_beds_w[ie_ctrl_loop_w].nm_pac_reserva 	:= C03_W.nm_pac_reserva;
    array_beds_w[ie_ctrl_loop_w].nr_agrupamento 	:= C03_W.nr_agrupamento;

    insert into w_unid_atend_temp( nr_seq_interno,
				   nr_atendimento,
				   nr_atendimento_acomp,
				   nr_agrupamento,	
				   ie_status_unidade, 
		   		   cd_setor_atendimento,
				   cd_unidade_basica,
				   cd_unidade_compl,
				   cd_paciente_reserva,
				   nm_paciente_reserva,
				   dt_entrada_unidade
				) values (
					C03_W.nr_seq_interno,
					C03_W.nr_atendimento,
					C03_W.nr_atendimento_acomp,
					C03_W.nr_agrupamento,
					C03_W.ie_status_unidade,
					C03_W.cd_setor_atendimento,
					C03_W.cd_unidade_basica,
					C03_W.cd_unidade_compl,
					C03_W.cd_paciente_reserva,
					C03_W.nm_pac_reserva,
					C03_W.dt_entrada_unidade
				);
				commit;
    ie_ctrl_loop_w := ie_ctrl_loop_w + 1;
end loop C03_W;	

begin
	CALL wheb_usuario_pck.set_ie_executar_trigger('N');
	
	update	unidade_atendimento
	set	nr_atendimento 		 = NULL,
		ie_status_unidade 	= 'L',
		dt_atualizacao	  	= clock_timestamp(),
		dt_entrada_unidade 	 = NULL,
		nr_atendimento_acomp 	 = NULL,
		cd_paciente_reserva 	 = NULL,
		nm_pac_reserva 		 = NULL,
		nr_agrupamento 		 = NULL,
		nm_usuario	     	= nm_usuario_p
	where	cd_setor_atendimento in (cd_setor_atendimento_de_w, cd_setor_atendimento_para_w)
	and	cd_unidade_basica    in (cd_unidade_basica_de_w, cd_unidade_basica_para_w)
	and	nr_atendimento in (nr_atendimento_de_w, nr_atendimento_para_w);
		
	if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
		CALL wheb_usuario_pck.set_ie_executar_trigger('S');
	end if;
		
	if (coalesce(nr_atendimento_de_w,0) > 0) then
		CALL gerar_transf_pac_leitos(nr_atendimento_de_w, cd_setor_atendimento_para_w, cd_unidade_basica_para_w, cd_unidade_compl_para_w, 
					 cd_tipo_acomodacao_para_w, nr_acompanhante_de_w, null, null, nm_usuario_p, clock_timestamp());
	    	
		CALL gerar_ajustes_ap_lote('M', nr_atendimento_de_w, nm_usuario_p);		
					 	
		if (ie_considerar_leito_rn_w = 'S') then
			if (coalesce(obter_consistir_se_mae_rn(nr_atendimento_de_w), 0) > 0) then
				CALL gerar_transferencia_rn(	nr_atendimento_de_w,
							cd_setor_atendimento_para_w,
							cd_unidade_basica_para_w,
							cd_unidade_compl_para_w,
							null,
							null,
							nm_usuario_p,
							clock_timestamp());
			end if;
		end if;
	end if;
		
	if (coalesce(nr_atendimento_para_w,0) > 0) then
		CALL gerar_transf_pac_leitos(nr_atendimento_para_w, cd_setor_atendimento_de_w, cd_unidade_basica_de_w, cd_unidade_compl_de_w,
					 cd_tipo_acomodacao_de_w, nr_acompanhante_para_w, null, null, nm_usuario_p, clock_timestamp());
		
		CALL gerar_ajustes_ap_lote('M', nr_atendimento_para_w, nm_usuario_p);	
		
		if (ie_considerar_leito_rn_w = 'S') then
			if (coalesce(obter_consistir_se_mae_rn(nr_atendimento_para_w), 0) > 0) then
				CALL gerar_transferencia_rn(	nr_atendimento_para_w,
							cd_setor_atendimento_de_w,
							cd_unidade_basica_de_w,
							cd_unidade_compl_de_w,
							null,
							null,
							nm_usuario_p,
							clock_timestamp());
			end if;
		end if;
	end if;

	/* Limpando os leitos dos acompanhantes....*/

	ie_status_transf_w := 'L';
	if (ie_PermiteInativos_w = 'S') then
		ie_status_transf_w := 'A';
	end if;
	
	for c04_W in C04(nr_atendimento_de_w, nr_atendimento_para_w) loop
		update   unidade_atendimento
		set      ie_status_unidade	= ie_status_transf_w ,
			 nr_atendimento_Acomp	 = NULL,
			 cd_paciente_reserva	 = NULL,
			 nm_pac_reserva		 = NULL,
			 nm_usuario		= nm_usuario_p,
			 dt_atualizacao		= clock_timestamp()
		where    cd_unidade_basica	= c04_w.cd_unidade_basica
		and      cd_unidade_compl	= c04_w.cd_unidade_compl
		and	 cd_setor_atendimento	= c04_w.cd_setor_atendimento;
		
		commit;
	end loop;
	
	/* Transferir acompanhantes */

	if (ie_transf_acomp_w = 'S') then	
		if (ie_transf_acomp_para_p = 'S') then
			CALL transf_acomp_paciente_leitos(nr_atendimento_para_w,
							 cd_setor_atendimento_de_w,
							 cd_unidade_basica_de_w,
							 cd_unidade_compl_de_w,
							 nm_usuario_p,
							 'N',
							 'S',
							 nr_seq_interno_para_acomp_p);	
		end if;
		
		if (ie_transf_acomp_de_p = 'S') then
			 CALL transf_acomp_paciente_leitos(nr_atendimento_de_w,
							 cd_setor_atendimento_para_w,
							 cd_unidade_basica_para_w,
							 cd_unidade_compl_para_w,
							 nm_usuario_p,
							 'N',
							 'S',
							 nr_seq_interno_de_acomp_p);							
		end if;
	end if;	
	
	for C02_W in C02(cd_setor_atendimento_de_w,
			 cd_unidade_basica_de_w,
			 nr_atendimento_de_w,
			 cd_setor_atendimento_para_w, 
			 cd_unidade_basica_para_w,
			 nr_atendimento_para_w) loop
		update	unidade_atendimento
		set	ie_status_unidade	= 'L',
			ds_observacao		 = NULL,
			dt_atualizacao		= clock_timestamp(),
			dt_interdicao		 = NULL,
			nm_usuario		= nm_usuario_p,
			cd_motivo_interdicao	 = NULL,
			qt_dias_prev_interd	 = NULL,
			ie_bloqueio_transf	= 'N'
		where	cd_setor_atendimento	= C02_W.cd_setor_atendimento
		and	cd_unidade_basica	= C02_W.cd_unidade_basica
		and	cd_unidade_compl	= C02_W.cd_unidade_compl;
		
	end loop c02_w;
	
	if (ie_new_clinical_panorama_w <> 'S') then
		for C01_W in C01(cd_setor_atendimento_de_w, cd_setor_atendimento_para_w, cd_unidade_basica_de_w, cd_unidade_basica_para_w) loop
			CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p, C01_W.nr_seq_interno, nm_usuario_p);
		end loop C01_W;
	end if;
	
	
exception
	when others then
		CALL wheb_usuario_pck.set_ie_executar_trigger('N');
	
		for i in 1..array_beds_w.count loop
		    update unidade_atendimento
		    set	nr_atendimento       = array_beds_w[i].nr_atendimento,
			ie_status_unidade    = array_beds_w[i].ie_status_unidade,
			nm_usuario	     = array_beds_w[i].nm_usuario,
			dt_atualizacao	     = array_beds_w[i].dt_atualizacao,
			dt_entrada_unidade   = array_beds_w[i].dt_entrada_unidade,
			nr_atendimento_acomp = array_beds_w[i].nr_atendimento_acomp,
			cd_paciente_reserva  = array_beds_w[i].cd_paciente_reserva,
			nm_pac_reserva 	     = array_beds_w[i].nm_pac_reserva,
			nr_agrupamento 	     = array_beds_w[i].nr_agrupamento
		    where nr_seq_interno     = array_beds_w[ie_ctrl_loop_w].nr_seq_interno;
		commit;
		end loop;
	
		if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
			CALL wheb_usuario_pck.set_ie_executar_trigger('S');
		end if;
		if (ie_new_clinical_panorama_w <> 'S') then
			for C01_W in C01(cd_setor_atendimento_de_w, cd_setor_atendimento_para_w, cd_unidade_basica_de_w, cd_unidade_basica_para_w) loop
				CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p, C01_W.nr_seq_interno, nm_usuario_p);
			end loop C01_W;
		end if;
		
		ds_inconsistencia_p	:= substr(sqlerrm,1,2000);
		ie_inconsistencia_p	:= 'X';
		return;
	end;

commit;

/* Limpar tabela temporaria*/
delete 
from  w_unid_atend_temp
where ((nr_atendimento in (nr_atendimento_de_w, nr_atendimento_para_w)) or (nr_atendimento_acomp in (nr_atendimento_de_w, nr_atendimento_para_w)) or (nm_usuario = nm_usuario_p));
commit;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_transf_entre_leitos ((cd_perfil_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_interno_de_p bigint, nr_seq_interno_para_p bigint, ie_transf_acomp_de_p text, ie_transf_acomp_para_p text, ds_inconsistencia_p out text, ie_inconsistencia_p out text, nr_seq_interno_de_acomp_p bigint default null, nr_seq_interno_para_acomp_p bigint default null) is  nr_seq_interno_acomp_de_w unidade_atendimento.nr_seq_interno%type) FROM PUBLIC;

