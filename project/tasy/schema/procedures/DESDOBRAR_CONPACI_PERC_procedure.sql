-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE desdobrar_conpaci_perc (nr_interno_conta_p bigint, dt_desdobramento_p timestamp, cd_convenio_p bigint, cd_categoria_p text, nr_seq_procedimento_p text, nr_seq_material_p text, nr_seq_material_aux_p text, pr_desdobramento_p bigint, vl_desdobramento_p bigint, ie_opcao_p bigint, nm_usuario_p text) AS $body$
DECLARE


/*USADO EM:
- FONTE DA CONTA PACIENTE 
	-> OPCAO DESDOBRAR CONTA PERCENTUAL
	-> OPCAO DESFAZER DESDOBRAR CONTA PERCENTUAL
*/


/*
ie_opcao_p		0 - desfazer o desbramento
			1 - calcular percentual sobre o valor original
			2 - calcular valor sobre valor calculado pelo convenio
*/
ie_status_acerto_w		smallint;
dt_acerto_conta_w		timestamp;
nr_interno_conta_w		bigint;
ie_tipo_item_w			varchar(1);
nr_sequencia_w			bigint;
nr_seq_origem_w			bigint;
nr_seq_nova_w			bigint;
CD_CONVENIO_PARAMETRO_w		bigint;
ie_tipo_valor_w			bigint;
vl_material_w			double precision;
nr_atendimento_w		bigint;
dt_entrada_w				timestamp;
ie_dt_inicial_conta_w			varchar(10);
cd_estabelecimento_w		smallint;
ie_zerar_proc_novo_w		varchar(1);
ie_copiar_etapa_desdob_w varchar(1);
ie_copiar_etapas_w		varchar(15) := 'N';
ds_nls_territory_w		varchar(64);

c01 CURSOR FOR  -- itens que nao foram gerados por desdobramento, mas que geraram itens desdobrados (que estao excluidos da conta)
SELECT	'M',
	a.nr_sequencia
from	material_atend_paciente a,
	w_lista_itens_desdobrar b
where	a.nr_sequencia = b.nr_seq_item
and	b.ie_tipo_item = 'M'
and	b.nm_usuario = nm_usuario_p
and	coalesce(a.nr_seq_origem::text, '') = ''
and	not exists (select	1
		from	material_atend_paciente x
		where	x.nr_seq_origem		= a.nr_sequencia
		and	(x.cd_motivo_exc_conta IS NOT NULL AND x.cd_motivo_exc_conta::text <> ''))

union all

SELECT	'P',
	a.nr_sequencia
from	procedimento_paciente a,
	w_lista_itens_desdobrar b
where	a.nr_sequencia = b.nr_seq_item
and	b.ie_tipo_item = 'P'
and	b.nm_usuario = nm_usuario_p
and	coalesce(a.nr_seq_origem::text, '') = ''
and	not exists (select	1
		from	procedimento_paciente x
		where	x.nr_seq_origem		= a.nr_sequencia
		and	(x.cd_motivo_exc_conta IS NOT NULL AND x.cd_motivo_exc_conta::text <> ''));

c02 CURSOR FOR  -- itens gerados a partir de desdobramento
SELECT	'M',
	a.nr_sequencia,
	a.nr_seq_origem
from	material_atend_paciente a,
	w_lista_itens_desdobrar b
where	a.nr_sequencia = b.nr_seq_item
and	b.ie_tipo_item = 'M'
and	b.nm_usuario = nm_usuario_p
and	(a.nr_seq_origem IS NOT NULL AND a.nr_seq_origem::text <> '')

union all

SELECT	'P',
	a.nr_sequencia,
	a.nr_seq_origem
from	procedimento_paciente a,
	w_lista_itens_desdobrar b
where	a.nr_sequencia = b.nr_seq_item
and	b.ie_tipo_item = 'P'
and	b.nm_usuario = nm_usuario_p
and	(a.nr_seq_origem IS NOT NULL AND a.nr_seq_origem::text <> '');


BEGIN

select	ie_status_acerto,
	clock_timestamp(),
	nr_atendimento,
	cd_estabelecimento
into STRICT	ie_status_acerto_w,
	dt_acerto_conta_w,
	nr_atendimento_w,
	cd_estabelecimento_w
from	conta_paciente
where	nr_interno_conta	= nr_interno_conta_p;

select	max(dt_entrada)
into STRICT	dt_entrada_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_w;
if (ie_status_acerto_w = 2) then	
	-- A conta deve estar com status provisorio
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(192406);
end if;

ie_zerar_proc_novo_w	:= coalesce(obter_valor_param_usuario(67, 541, obter_perfil_ativo, nm_usuario_p,cd_estabelecimento_w),'N');
ie_copiar_etapas_w	:= coalesce(obter_valor_param_usuario(67,673,obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N');

if (ie_opcao_p <> 0) then

	begin
	select	substr(value,1,64)
	into STRICT	ds_nls_territory_w
	from	v$nls_parameters
	where	parameter = 'NLS_TERRITORY';
	exception
	when others then
		ds_nls_territory_w:=null;	
	end;
			
	if (dt_desdobramento_p	< dt_entrada_w )then
		--O periodo inicial deve ser maior ou igual a data de entrada do paciente
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192407);
	end if;
	
	ie_dt_inicial_conta_w	:= obter_valor_param_usuario(67, 288, Obter_Perfil_Ativo, nm_usuario_p, 0);

	if (ie_dt_inicial_conta_w	= 'N') and (dt_desdobramento_p	> clock_timestamp()) then
		--O periodo inicial deve ser maior ou igual a data atual. Parametro 288 
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(192408);
	end if;	
	
	select	nextval('conta_paciente_seq')
	into STRICT	nr_interno_conta_w
	;	
	
	insert into conta_paciente(nr_atendimento,
		dt_acerto_conta,
		ie_status_acerto,
		dt_periodo_inicial,
		dt_periodo_final,
		dt_atualizacao,
		nm_usuario,
		cd_convenio_parametro,
		cd_categoria_parametro,
		dt_mesano_referencia,
		dt_mesano_contabil,
		cd_convenio_calculo,
		cd_categoria_calculo,
		nr_interno_conta,
		cd_estabelecimento,
		nr_protocolo,
		vl_desconto,
		vl_conta,
		IE_TIPO_ATEND_TISS,
		NR_SEQ_SAIDA_CONSULTA,
		NR_SEQ_SAIDA_SPSADT,
		NR_SEQ_SAIDA_INT,
		NR_CONTA_ORIG_DESDOB)
	SELECT	nr_atendimento,
		dt_acerto_conta_w,
		1,
		dt_desdobramento_p,
		dt_desdobramento_p + 365,
		clock_timestamp(),
		nm_usuario_p,
		cd_convenio_p,
		cd_categoria_p,
		dt_mesano_referencia,
		dt_mesano_contabil,
		cd_convenio_p,
		cd_categoria_p,
		nr_interno_conta_w,
		cd_estabelecimento,
		'0',
		0,
		0,
		IE_TIPO_ATEND_TISS,
		NR_SEQ_SAIDA_CONSULTA,
		NR_SEQ_SAIDA_SPSADT,
		NR_SEQ_SAIDA_INT,
		nr_interno_conta_p
	from	conta_paciente
	where	nr_interno_conta	= nr_interno_conta_p;

	select 	coalesce(max(nr_atendimento),0)
	into STRICT	nr_atendimento_w
	from 	conta_paciente
	where 	nr_interno_conta = nr_interno_conta_p;
	
	CALL GERAR_LANC_APOS_CONTA(nr_atendimento_w, null, 211, nm_usuario_p, null,null,null,null,null,nr_interno_conta_w);

	if (coalesce(ie_copiar_etapas_w,'N') = 'R') then
		select 	coalesce(max(ie_copiar_etapa_desdob),'N')
		into STRICT	ie_copiar_etapa_desdob_w
		from 	convenio_estabelecimento
		where 	cd_convenio = cd_convenio_p
		and 	cd_estabelecimento = cd_estabelecimento_w;
	end if;
	
	if (coalesce(ie_copiar_etapas_w,'N') = 'S') or
      ((coalesce(ie_copiar_etapas_w,'N') = 'R') and (coalesce(ie_copiar_etapa_desdob_w, 'N') = 'S')) then
		begin
		
		insert	into conta_paciente_etapa(nr_sequencia,
			nr_interno_conta,
			dt_atualizacao,
			nm_usuario,
			dt_etapa,
			nr_seq_etapa,
			cd_setor_atendimento,
			cd_pessoa_fisica,
			nr_seq_motivo_dev,
			ds_observacao,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_fim_etapa)
		SELECT	nextval('conta_paciente_etapa_seq'),
			nr_interno_conta_w,
			clock_timestamp(),
			nm_usuario_p,
			dt_etapa,
			nr_seq_etapa,
			cd_setor_atendimento,
			cd_pessoa_fisica,
			nr_seq_motivo_dev,
			ds_observacao,
			clock_timestamp(),
			nm_usuario_p,
			dt_fim_etapa
		from	conta_paciente_etapa
		where	nr_interno_conta = nr_interno_conta_p;
		
		end;
	end if;
	
	open c01;
	loop 
	fetch c01 into
		ie_tipo_item_w,
		nr_sequencia_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	
		/*--------- MATERIAIS-------------*/

		if (ie_tipo_item_w = 'M') then

			select nextval('material_atend_paciente_seq')
			into STRICT nr_seq_nova_w
			;

			insert	into material_atend_paciente(
				NR_SEQUENCIA,NR_ATENDIMENTO,DT_ENTRADA_UNIDADE,CD_MATERIAL,DT_ATENDIMENTO,
				CD_UNIDADE_MEDIDA,QT_MATERIAL,DT_ATUALIZACAO,NM_USUARIO,CD_CONVENIO,CD_CATEGORIA,
				DT_PRESCRICAO,CD_MATERIAL_PRESCRICAO,IE_VIA_APLICACAO,DS_OBSERVACAO,VL_MATERIAL,
				CD_TAB_PRECO_MATERIAL,DT_VIGENCIA_TABELA,DT_ACERTO_CONTA,DT_ACERTO_CONVENIO,
				NR_PRESCRICAO,NR_SEQUENCIA_PRESCRICAO,CD_MOTIVO_EXC_CONTA,DS_COMPL_MOTIVO_EXCON,
				CD_LOCAL_ESTOQUE,DT_ATUALIZACAO_ESTOQUE,CD_ACAO,CD_SETOR_ATENDIMENTO,QT_DEVOLVIDA,
				CD_MOTIVO_DEVOLUCAO,NR_CIRURGIA,NR_DOC_CONVENIO,QT_EXECUTADA,DT_CONTA,VL_UNITARIO,
				CD_PROCED_REFERENCIA,CD_CONTA_CONTABIL,QT_AJUSTE_CONTA,NR_AIH,IE_VALOR_INFORMADO,
				CD_ESTABELECIMENTO_CUSTO,CD_TABELA_CUSTO,CD_SITUACAO_GLOSA,NR_LOTE_CONTABIL,
				CD_MATERIAL_CONVENIO,NR_SEQ_AUTORIZACAO,NR_INTERNO_CONTA,NR_SEQ_PROC_PRINC,
				IE_GUIA_INFORMADA,CD_ESPECIALIDADE,NM_USUARIO_ORIGINAL,NR_SEQ_PROC_PACOTE,
				VL_TABELA_ORIGINAL,IE_EMITE_CONTA,CD_SETOR_RECEITA,CD_CGC_FORNECEDOR,
				NR_SEQ_LOTE_FORNEC,CD_MATERIAL_EXEC,NR_SEQ_ATEPACU,IE_TIPO_GUIA,NR_DOC_INTERNO,
				IE_AUDITORIA,NR_SEQ_GRUPO_REC,CD_MOTIVO_AJUSTE, NR_SEQ_ORIGEM)
			SELECT
				NR_SEQ_NOVA_W,NR_ATENDIMENTO,DT_ENTRADA_UNIDADE,CD_MATERIAL,DT_ATENDIMENTO + 3/86400,
				CD_UNIDADE_MEDIDA,QT_MATERIAL,clock_timestamp(),NM_USUARIO_P,cd_convenio_p,cd_categoria_p,
				DT_PRESCRICAO,CD_MATERIAL_PRESCRICAO,IE_VIA_APLICACAO,DS_OBSERVACAO,VL_MATERIAL,
				CD_TAB_PRECO_MATERIAL,DT_VIGENCIA_TABELA,dt_acerto_conta_w,DT_ACERTO_CONVENIO,
				NR_PRESCRICAO,NR_SEQUENCIA_PRESCRICAO,CD_MOTIVO_EXC_CONTA,DS_COMPL_MOTIVO_EXCON,
				null,DT_ATUALIZACAO_ESTOQUE,CD_ACAO,CD_SETOR_ATENDIMENTO,QT_DEVOLVIDA,
				CD_MOTIVO_DEVOLUCAO,NR_CIRURGIA,NR_DOC_CONVENIO,QT_EXECUTADA,DT_CONTA,VL_UNITARIO,
				CD_PROCED_REFERENCIA,CD_CONTA_CONTABIL,QT_AJUSTE_CONTA,NR_AIH,IE_VALOR_INFORMADO,
				CD_ESTABELECIMENTO_CUSTO,CD_TABELA_CUSTO,CD_SITUACAO_GLOSA,NR_LOTE_CONTABIL,
				CD_MATERIAL_CONVENIO,NR_SEQ_AUTORIZACAO,nr_interno_conta_w,NR_SEQ_PROC_PRINC,
				IE_GUIA_INFORMADA,CD_ESPECIALIDADE,NM_USUARIO_ORIGINAL,NR_SEQ_PROC_PACOTE,
				VL_TABELA_ORIGINAL,IE_EMITE_CONTA,CD_SETOR_RECEITA,CD_CGC_FORNECEDOR,
				NR_SEQ_LOTE_FORNEC,CD_MATERIAL_EXEC,NR_SEQ_ATEPACU,IE_TIPO_GUIA,NR_DOC_INTERNO,
				IE_AUDITORIA,NR_SEQ_GRUPO_REC,CD_MOTIVO_AJUSTE, nr_sequencia_w
			from 	material_atend_paciente
			where 	nr_sequencia = nr_sequencia_w;

			update	material_atend_paciente
			set	dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				ie_valor_informado	= 'S',
				vl_material		= vl_material - ((pr_desdobramento_p / 100) * vl_material),
				dt_desdobramento	= clock_timestamp()
			where	nr_sequencia		= nr_sequencia_w;

			if (ie_opcao_p = 2) then -- calcular valor sobre valor calculado pelo convenio
				CALL atualiza_preco_material(nr_seq_nova_w, nm_usuario_p);
			end if;
			
			update	material_atend_paciente
			set	ie_valor_informado	= 'S',
				dt_desdobramento	= clock_timestamp(),
				vl_material		= ((pr_desdobramento_p / 100) * vl_material),
				qt_material		= CASE WHEN ie_zerar_proc_novo_w='A' THEN  0  ELSE qt_material END
			where	nr_sequencia		= nr_seq_nova_w;
						

			if (philips_param_pck.get_cd_pais = 2) or (upper(ds_nls_territory_w) = 'MEXICO') then
				if (ie_opcao_p = 1)  then  ---- aplicar percentual sobre a quantia original
					CALL gerar_tributo_conta_pac(nr_interno_conta_p, nr_sequencia_w, 'M', nm_usuario_p);
					CALL gerar_tributo_conta_pac(nr_interno_conta_w, nr_seq_nova_w, 'M', nm_usuario_p);
				end if;
			end if;
			
		else
			/*---- PROCEDIMENTOS-----*/

			nr_seq_nova_w := Duplicar_Proc_Paciente(nr_sequencia_w, nm_usuario_p, nr_seq_nova_w);

			update	procedimento_paciente
			set	dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				ie_valor_informado	= 'S',
				vl_procedimento		= vl_procedimento - ((pr_desdobramento_p / 100) * vl_procedimento),
				vl_medico		= vl_medico - ((pr_desdobramento_p / 100) * vl_medico),
				vl_anestesista		= vl_anestesista - ((pr_desdobramento_p / 100) * vl_anestesista),
				vl_auxiliares		= vl_auxiliares - ((pr_desdobramento_p / 100) * vl_auxiliares),
				vl_custo_operacional	= vl_custo_operacional - ((pr_desdobramento_p / 100) * vl_custo_operacional),
				vl_materiais		= vl_materiais - ((pr_desdobramento_p / 100) * vl_materiais)
			where	nr_sequencia		= nr_sequencia_w; -- ORIGEM
			update	procedimento_paciente
			set	nr_interno_conta	= nr_interno_conta_w,
				cd_convenio		= cd_convenio_p,
				cd_categoria		= cd_categoria_p,
				dt_acerto_conta		= dt_acerto_conta_w,
				nr_seq_origem		= nr_sequencia_w
			where	nr_sequencia		= nr_seq_nova_w; -- GERADO
			if (ie_opcao_p = 2) then  --calcular valor sobre valor calculado pelo convenio
				CALL atualiza_preco_procedimento(nr_seq_nova_w, cd_convenio_p, nm_usuario_p);
			end if;

			update	procedimento_paciente
			set	ie_valor_informado	= 'S',
				vl_procedimento		= ((pr_desdobramento_p / 100) * vl_procedimento),
				vl_medico		= ((pr_desdobramento_p / 100) * vl_medico),
				VL_ANESTESISTA		= ((pr_desdobramento_p / 100) * VL_ANESTESISTA),
				VL_AUXILIARES		= ((pr_desdobramento_p / 100) * VL_AUXILIARES),
				VL_CUSTO_OPERACIONAL	= ((pr_desdobramento_p / 100) * VL_CUSTO_OPERACIONAL),
				VL_MATERIAIS		= ((pr_desdobramento_p / 100) * VL_MATERIAIS),
				qt_procedimento		= CASE WHEN ie_zerar_proc_novo_w='S' THEN  0 WHEN ie_zerar_proc_novo_w='A' THEN  0  ELSE qt_procedimento END
			where	nr_sequencia		= nr_seq_nova_w;
			
			if (philips_param_pck.get_cd_pais = 2) or (upper(ds_nls_territory_w) = 'MEXICO') then
				if (ie_opcao_p = 1)  then  ---- aplicar percentual sobre a quantia original						
					CALL gerar_tributo_conta_pac(nr_interno_conta_p, nr_sequencia_w, 'P', nm_usuario_p);
					CALL gerar_tributo_conta_pac(nr_interno_conta_w, nr_seq_nova_w, 'P', nm_usuario_p);
				end if;
			end if;

		end if;

	end loop;
	close c01;
	
	if (coalesce(vl_desdobramento_p,0) <> 0) and (obter_valor_conta(nr_interno_conta_p,0) <> vl_desdobramento_p) then
		CALL ajustar_vl_desdob_conpaci_perc(nr_interno_conta_p, nr_interno_conta_w, vl_desdobramento_p, nm_usuario_p);
	end if;
	
else
	/*--------DESFAZER O DESDOBRAMENTO--------*/

	open c02; -- itens gerados a partir de desdobramento
	loop
	fetch c02 into
		ie_tipo_item_w,
		nr_sequencia_w,
		nr_seq_origem_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		if (ie_tipo_item_w	= 'M') then

			delete	from material_atend_paciente
			where	nr_sequencia	= nr_sequencia_w;			
			
			update	material_atend_paciente
			set	ie_valor_informado	= 'N',
				dt_desdobramento	 = NULL
			where	nr_sequencia		= nr_seq_origem_w;
	
			select 	coalesce(max(ie_tipo_valor),0),
				coalesce(max(vl_material),0)
			into STRICT	ie_tipo_valor_w,
				vl_material_w				
			from 	mat_atend_paciente_valor
			where 	nr_seq_material = nr_seq_origem_w;		
		
			if (ie_tipo_valor_w = 96) then
				update	material_atend_paciente
				set 	ie_valor_informado = 'S',
					vl_material = vl_material_w
				where 	nr_sequencia = nr_seq_origem_w;
			else
				CALL atualiza_preco_material(nr_seq_origem_w, nm_usuario_p);
			end if;

		else

			delete	from procedimento_paciente
			where	nr_sequencia	= nr_sequencia_w;

			select	coalesce(max(b.CD_CONVENIO_PARAMETRO),0)
			into STRICT	CD_CONVENIO_PARAMETRO_w
			from	conta_paciente b,
				procedimento_paciente a
			where	a.nr_interno_conta	= b.nr_interno_conta
			and	a.nr_sequencia		= nr_seq_origem_w;
			
			if (CD_CONVENIO_PARAMETRO_W = 0) then
				select 	coalesce(max(cd_convenio),0)
				into STRICT	CD_CONVENIO_PARAMETRO_W
				from 	procedimento_paciente
				where 	nr_sequencia = nr_seq_origem_w;
			end if;
						
			if (CD_CONVENIO_PARAMETRO_W > 0) then
				update	procedimento_paciente
				set	ie_valor_informado	= 'N'
				where	nr_sequencia		= nr_seq_origem_w;

				CALL atualiza_preco_procedimento(nr_seq_origem_w, CD_CONVENIO_PARAMETRO_w, nm_usuario_p);		
			end if;			

		end if;
	end loop;
	close c02;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE desdobrar_conpaci_perc (nr_interno_conta_p bigint, dt_desdobramento_p timestamp, cd_convenio_p bigint, cd_categoria_p text, nr_seq_procedimento_p text, nr_seq_material_p text, nr_seq_material_aux_p text, pr_desdobramento_p bigint, vl_desdobramento_p bigint, ie_opcao_p bigint, nm_usuario_p text) FROM PUBLIC;

