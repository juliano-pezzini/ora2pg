-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_baixar_glosas_contestacao (nr_seq_lote_contest_p bigint, nr_seq_acao_interc_p bigint, nr_titulo_p bigint, nr_seq_fatura_p bigint, ie_estorno_p text, ie_perm_desf_fat_baixa_p text, nm_usuario_p text, cd_estabelecimento_p text) AS $body$
DECLARE


vl_glosa_proc_w			double precision := 0;
vl_glosa_mat_w			double precision := 0;
vl_total_glosa_w		double precision := 0;
vl_glosa_proc_hi_w		double precision := 0;
vl_glosa_proc_co_w		double precision := 0;
vl_glosa_proc_mat_w		double precision := 0;
vl_glosa_tx_proc_hi_w		double precision := 0;
vl_glosa_tx_proc_co_w		double precision := 0;
vl_glosa_tx_proc_mat_w		double precision := 0;
vl_glosa_material_hi_w		double precision := 0;
vl_glosa_material_co_w		double precision := 0;
vl_glosa_material_mat_w		double precision := 0;
vl_glosa_tx_material_hi_w	double precision := 0;
vl_glosa_tx_material_co_w	double precision := 0;
vl_glosa_tx_material_mat_w	double precision := 0;
vl_glosa_w			double precision := 0;
nr_titulo_w			bigint;
nr_titulo_ndc_w			bigint;
nr_seq_baixa_w			integer;
nr_seq_max_baixa_w		integer;
dt_baixa_w			timestamp;
cd_tipo_baixa_w			bigint;
nr_seq_trans_financ_w		bigint;
cd_moeda_padrao_w		integer;	
ie_ato_cooperado_w		varchar(1);
ie_classif_cobranca_w		varchar(1);
ie_tit_fat_ndc_w		varchar(1);
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
ie_utilizar_vl_glosa_fat_w	varchar(1) := 'N';
qt_itens_contest_w		integer;
nr_seq_baixa_origem_w		titulo_pagar_baixa.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	sum(coalesce(b.vl_contestado,0)),
		c.ie_ato_cooperado
	from	pls_conta_proc 		c,
		pls_contestacao_proc 	b,
		pls_contestacao 	a
	where	a.nr_sequencia	= b.nr_seq_contestacao
	and	c.nr_sequencia	= b.nr_seq_conta_proc
	and	a.nr_seq_lote	= nr_seq_lote_contest_p
	group by c.ie_ato_cooperado
	
union all

	SELECT	sum(coalesce(b.vl_contestado,0)),
		c.ie_ato_cooperado	
	from	pls_conta_mat		c,
		pls_contestacao_mat 	b,
		pls_contestacao 	a
	where	a.nr_sequencia	= b.nr_seq_contestacao
	and	c.nr_sequencia	= b.nr_seq_conta_mat
	and	a.nr_seq_lote	= nr_seq_lote_contest_p
	group by c.ie_ato_cooperado;
	
C02 CURSOR FOR
	SELECT	b.nr_seq_conta_proc,
		null
	from	pls_contestacao_proc 	b,
		pls_contestacao 	a
	where	a.nr_sequencia	= b.nr_seq_contestacao
	and	a.nr_seq_lote	= nr_seq_lote_contest_p
	
union all

	SELECT	null,
		b.nr_seq_conta_mat	
	from	pls_contestacao_mat 	b,
		pls_contestacao 	a
	where	a.nr_sequencia	= b.nr_seq_contestacao
	and	a.nr_seq_lote	= nr_seq_lote_contest_p;


BEGIN

if (nr_seq_lote_contest_p IS NOT NULL AND nr_seq_lote_contest_p::text <> '') and (nr_seq_fatura_p IS NOT NULL AND nr_seq_fatura_p::text <> '') and (nr_titulo_p IS NOT NULL AND nr_titulo_p::text <> '') then
	
	select	max(ie_classif_cobranca)
	into STRICT	ie_classif_cobranca_w
	from	ptu_fatura
	where	nr_sequencia = nr_seq_fatura_p;
	
	select	max(ie_tit_fat_ndc),
		max(nr_titulo)
	into STRICT	ie_tit_fat_ndc_w,
		nr_titulo_w
	from	ptu_fatura
	where	nr_titulo = nr_titulo_p;
	
	if (coalesce(ie_tit_fat_ndc_w::text, '') = '') then
		select	max(ie_tit_fat_ndc),
			max(nr_titulo_ndc)
		into STRICT	ie_tit_fat_ndc_w,
			nr_titulo_ndc_w
		from	ptu_fatura
		where	nr_titulo_ndc = nr_titulo_p;
	end if;
	
	ie_tit_fat_ndc_w := coalesce(ie_tit_fat_ndc_w,'N');
	
	-- Somar todo o valor glosado para lancar a baixa
	if (ie_tit_fat_ndc_w = 'N') or (ie_classif_cobranca_w <> '3') then
		select	coalesce(sum(b.vl_contestado),0)
		into STRICT	vl_glosa_proc_w
		from	pls_contestacao_proc b,
			pls_contestacao a
		where	a.nr_sequencia	= b.nr_seq_contestacao
		and	a.nr_seq_lote	= nr_seq_lote_contest_p;
		
		select	coalesce(sum(b.vl_contestado),0)
		into STRICT	vl_glosa_mat_w
		from	pls_contestacao_mat b,
			pls_contestacao a
		where	a.nr_sequencia	= b.nr_seq_contestacao
		and	a.nr_seq_lote	= nr_seq_lote_contest_p;
		
	elsif (ie_tit_fat_ndc_w = 'S') and (ie_classif_cobranca_w = '3') then
		open C02;
		loop
		fetch C02 into	
			nr_seq_conta_proc_w,
			nr_seq_conta_mat_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
				select	coalesce(vl_glosa_hi,0),
					coalesce(vl_glosa_co,0),
					coalesce(vl_glosa_material,0),
					coalesce(vl_glosa_taxa_servico,0),
					coalesce(vl_glosa_taxa_co,0),
					coalesce(vl_glosa_taxa_material,0)
				into STRICT	vl_glosa_proc_hi_w,
					vl_glosa_proc_co_w,
					vl_glosa_proc_mat_w,
					vl_glosa_tx_proc_hi_w,
					vl_glosa_tx_proc_co_w,
					vl_glosa_tx_proc_mat_w
				from	pls_conta_proc
				where	nr_sequencia = nr_seq_conta_proc_w;
				
				if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
					vl_glosa_proc_w := vl_glosa_proc_w + vl_glosa_tx_proc_hi_w + vl_glosa_tx_proc_co_w + vl_glosa_tx_proc_mat_w;
				
				elsif (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
					vl_glosa_proc_w := vl_glosa_proc_w + vl_glosa_proc_hi_w + vl_glosa_proc_co_w + vl_glosa_proc_mat_w;
				end if;
			
			elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
				select	coalesce(vl_glosa,0) - coalesce(vl_glosa_taxa_material,0),
					0,
					0,
					coalesce(vl_glosa_taxa_material,0),
					0,
					0
				into STRICT	vl_glosa_material_hi_w,
					vl_glosa_material_co_w,
					vl_glosa_material_mat_w,
					vl_glosa_tx_material_hi_w,
					vl_glosa_tx_material_co_w,
					vl_glosa_tx_material_mat_w
				from	pls_conta_mat
				where	nr_sequencia = nr_seq_conta_mat_w;
				
				if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
					vl_glosa_mat_w := vl_glosa_mat_w + vl_glosa_tx_material_hi_w + vl_glosa_tx_material_co_w + vl_glosa_tx_material_mat_w;
				
				elsif (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
					vl_glosa_mat_w := vl_glosa_mat_w + vl_glosa_material_hi_w + vl_glosa_material_co_w + vl_glosa_material_mat_w;
				end if;
			end if;			
			end;
		end loop;
		close C02;
	end if;
	
	-- Em alguns cenarios, o usuario apaga os dados da contestacao, e entao tenta desfazer o encerramento gerando um estorno.

	--  Quando isso acontece, os cursores que fazem a validacao dos itens de contestacao e somam o valor acabam nao sendo executados

	--  pois os dados ja nao existem mais, para estes casos especificos, sera verificado se existem itens da contestacao, se nao existirem

	--   e for um estorno, sera utilizado o valor da glosa da fatura como valor de estorno
	if (coalesce(ie_estorno_p,'N') = 'S') then
		
		select	sum(t.contador)
		into STRICT	qt_itens_contest_w
		from (	SELECT	count(1) contador
				from	pls_contestacao_proc 	b,
					pls_contestacao 	a
				where	a.nr_sequencia	= b.nr_seq_contestacao
				and	a.nr_seq_lote	= nr_seq_lote_contest_p
				
union all

				SELECT	count(1)
				from	pls_contestacao_mat 	b,
					pls_contestacao 	a
				where	a.nr_sequencia	= b.nr_seq_contestacao
				and	a.nr_seq_lote	= nr_seq_lote_contest_p) t;
		
		-- nao possui itens e e um estorno, deve entao usar o valor da glosa da fatura
		if (qt_itens_contest_w = 0) then
		
			ie_utilizar_vl_glosa_fat_w	 := 'S';
		end if;
		
	end if;
	
	
	
	
	if (vl_glosa_proc_w + vl_glosa_mat_w > 0) or (ie_utilizar_vl_glosa_fat_w = 'S') then
	
		if (ie_utilizar_vl_glosa_fat_w = 'S') then
		
			select	vl_glosa
			into STRICT	vl_total_glosa_w
			from	ptu_fatura
			where	nr_sequencia	= nr_seq_fatura_p;		
		else
			vl_total_glosa_w	:= vl_glosa_proc_w + vl_glosa_mat_w;
		end if;
		
		-- Gerar baixa de glosa
		select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_seq_baixa_w
		from	titulo_pagar_baixa a
		where	a.nr_titulo	= nr_titulo_p;
		
		dt_baixa_w := trunc(clock_timestamp(),'dd');
		
		if (nr_seq_acao_interc_p IS NOT NULL AND nr_seq_acao_interc_p::text <> '') then
			select	max(cd_tipo_baixa_cpa),
				max(nr_seq_trans_bx_glosa_pag)
			into STRICT	cd_tipo_baixa_w,
				nr_seq_trans_financ_w
			from	pls_processo_interc_acao
			where	nr_sequencia = nr_seq_acao_interc_p;
			
		elsif (ie_perm_desf_fat_baixa_p = 'P') then
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_max_baixa_w
			from	titulo_pagar_baixa
			where	nr_titulo = nr_titulo_p
			and	vl_baixa > 0;
			
			if (nr_seq_max_baixa_w > 0) then
				select	max(cd_tipo_baixa),
					max(nr_seq_trans_fin)
				into STRICT	cd_tipo_baixa_w,
					nr_seq_trans_financ_w
				from	titulo_pagar_baixa
				where	nr_titulo = nr_titulo_p
				and	nr_sequencia = nr_seq_max_baixa_w;
			end if;
		end if;
		
		if (coalesce(cd_tipo_baixa_w::text, '') = '') then
			cd_tipo_baixa_w := 8;
		end if;
		
		select	max(cd_moeda_padrao)
		into STRICT	cd_moeda_padrao_w
		from	parametros_contas_pagar
		where	cd_estabelecimento = cd_estabelecimento_p;
		
		-- Estorno
		if (coalesce(ie_estorno_p,'N') = 'S') then
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_baixa_origem_w
			from	titulo_pagar_baixa
			where	nr_titulo = nr_titulo_p
			and	vl_baixa > 0;
			
			select	coalesce(max(nr_sequencia), nr_seq_baixa_origem_w)
			into STRICT	nr_seq_baixa_origem_w
			from	titulo_pagar_baixa
			where	nr_titulo = nr_titulo_p
			and	vl_baixa = vl_total_glosa_w;
			
			vl_total_glosa_w := (vl_total_glosa_w * -1);
		end if;
		
		insert	into titulo_pagar_baixa(nr_titulo,			nr_sequencia,			dt_baixa,
			cd_moeda,			dt_atualizacao,			nm_usuario,
			cd_tipo_baixa,			ie_acao,			vl_baixa,
			vl_glosa,			vl_descontos,			vl_outras_deducoes,
			vl_juros,			vl_multa,			vl_outros_acrescimos,
			vl_pago,			cd_banco,			nr_lote_contabil,
			vl_devolucao,			nr_seq_devolucao,		nr_bordero,
			nr_seq_trans_fin,		vl_ir,				nr_seq_conta_banco,
			nr_seq_escrit,			cd_centro_custo,		cd_conta_contabil,
			vl_cotacao_moeda,		vl_glosa_ato_coop_princ,	vl_glosa_ato_coop_aux,
			vl_glosa_ato_nao_coop,		nr_seq_pls_lote_contest,	nr_seq_baixa_origem,
			ds_observacao)
		values (nr_titulo_p,			nr_seq_baixa_w,			dt_baixa_w,
			cd_moeda_padrao_w,		clock_timestamp(),			nm_usuario_p,
			cd_tipo_baixa_w,		'I',				vl_total_glosa_w,
			vl_total_glosa_w,		0, 				0,
			0, 				0, 				0, 
			0,				null,				0,
			0,				null, 				null, 
			nr_seq_trans_financ_w,		null, 				null,
			null,				null,				null,
			null,				0,				0,
			0,				nr_seq_lote_contest_p,		nr_seq_baixa_origem_w,
			CASE WHEN ie_estorno_p='S' THEN  'Estorno da baixa gerada pelo sistema no fechamento da contestacao.'  ELSE 'Baixa gerada pelo sistema no fechamento da contestacao.' END );
			
		open C01;
		loop
		fetch C01 into	
			vl_glosa_w,
			ie_ato_cooperado_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			if (ie_ato_cooperado_w = '1') then
				update	titulo_pagar_baixa
				set	vl_glosa_ato_coop_princ	= coalesce(vl_glosa_ato_coop_princ,0) + vl_glosa_w
				where	nr_titulo 		= nr_titulo_p
				and	nr_sequencia 		= nr_seq_baixa_w;
			elsif (ie_ato_cooperado_w = '2') then
				update	titulo_pagar_baixa
				set	vl_glosa_ato_coop_aux	= coalesce(vl_glosa_ato_coop_aux,0) + vl_glosa_w
				where	nr_titulo 		= nr_titulo_p
				and	nr_sequencia 		= nr_seq_baixa_w;
			else
				update	titulo_pagar_baixa
				set	vl_glosa_ato_nao_coop	= coalesce(vl_glosa_ato_nao_coop,0) + vl_glosa_w
				where	nr_titulo 		= nr_titulo_p
				and	nr_sequencia 		= nr_seq_baixa_w;
			end if;
			end;
		end loop;
		close C01;
		
		CALL atualizar_saldo_tit_pagar(nr_titulo_p,nm_usuario_p);
		CALL Gerar_W_Tit_Pag_imposto(nr_titulo_p, nm_usuario_p);
	end if;
end if;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_baixar_glosas_contestacao (nr_seq_lote_contest_p bigint, nr_seq_acao_interc_p bigint, nr_titulo_p bigint, nr_seq_fatura_p bigint, ie_estorno_p text, ie_perm_desf_fat_baixa_p text, nm_usuario_p text, cd_estabelecimento_p text) FROM PUBLIC;

