-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_inserir_reinf_2020 (nr_sequencia_p bigint, nr_seq_superior_p bigint, nm_usuario_p text, nota_inserida_p INOUT text) AS $body$
DECLARE


cd_tributo_w		fis_reinf_r2020.cd_tributo%TYPE;
cd_estabelecimento_ww	fis_reinf_r2020.cd_estabelecimento%TYPE;
cd_estabelecimento_w    nota_fiscal.cd_estabelecimento%type;
cd_serie_nf_w		nota_fiscal.cd_serie_nf%type;
nr_nota_fiscal_w	nota_fiscal.nr_nota_fiscal%type;
cd_cnpj_w		nota_fiscal.cd_cgc_emitente%type;
vl_bruto_nf_w		nota_fiscal.vl_mercadoria%type;
vl_base_trib_inss_w	nota_fiscal_trib.vl_base_calculo%type;
vl_retencao_inss_w	nota_fiscal_trib.vl_tributo%type;
ds_erro_w			varchar(1000);
vl_n_retencao_inss_w    nota_fiscal_trib.vl_tributo%TYPE;

BEGIN
nota_inserida_p := 'N';

select 	max(a.cd_tributo) cd_tributo,
	cd_estabelecimento
into STRICT	cd_tributo_w,
	cd_estabelecimento_ww
from	fis_reinf_r2020 a
where 	a.nr_sequencia = nr_seq_superior_p;

begin
        SELECT  MAX(a.cd_estabelecimento) cd_estab,
		MAX(obter_dados_nota_fiscal(a.nr_sequencia,'1')) cd_serie_nota,
		MAX(SUBSTR(a.nr_nota_fiscal,1,80)) nr_nota_fiscal,
		MAX(a.cd_cgc_emitente) cd_cnpj,
		MAX(a.vl_mercadoria) vl_bruto_nf,
		SUM(b.vl_base_calculo) vl_base_trib_inss,
		SUM(CASE WHEN obter_se_possui_processo(a.nr_sequencia,nr_sequencia_p,'2020')='S' THEN b.vl_tributo  ELSE 0 END ) vl_n_retencao_inss,
		sum(b.vl_base_calculo * 0.11) vl_retencao_inss
        into STRICT	cd_estabelecimento_w,
		cd_serie_nf_w,
		nr_nota_fiscal_w,
		cd_cnpj_w,
		vl_bruto_nf_w,
		vl_base_trib_inss_w,
		vl_n_retencao_inss_w,
		vl_retencao_inss_w
	FROM 	nota_fiscal a,
		nota_fiscal_trib b,
		tributo c
	WHERE 	a.nr_sequencia = b.nr_sequencia
	AND     b.cd_tributo = c.cd_tributo
	AND	a.ie_tipo_nota IN ('SD', 'SE', 'SF', 'ST') /*Domínio 1661*/
	AND     (a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '') /*notas calculadas*/
	AND     a.ie_situacao IN (1)
	and	b.vl_tributo <> 0
	AND     (a.cd_cgc IS NOT NULL AND a.cd_cgc::text <> '')
	AND  	c.cd_tributo = cd_tributo_w
	and	a.cd_estabelecimento = cd_estabelecimento_ww
	AND     a.nr_sequencia = nr_sequencia_p
	GROUP BY a.nr_sequencia,
		 obter_dados_nota_fiscal(a.nr_sequencia,'1')
	
UNION

	SELECT  MAX(a.cd_estabelecimento) cd_estab,
		MAX(obter_dados_nota_fiscal(a.nr_sequencia,'1')) cd_serie_nota,
		MAX(SUBSTR(a.nr_nota_fiscal,1,80)) nr_nota_fiscal,
		MAX(a.cd_cgc_emitente) cd_cnpj,
		MAX(a.vl_mercadoria) vl_bruto_nf,
		SUM(b.vl_base_calculo) vl_base_trib_inss,
		SUM(CASE WHEN obter_se_possui_processo(a.nr_sequencia,nr_sequencia_p,'2020')='S' THEN b.vl_tributo  ELSE 0 END ) vl_n_retencao_inss,
		sum(b.vl_base_calculo * 0.11) vl_retencao_inss
	FROM 	nota_fiscal a,
		nota_fiscal_item_trib b,
		tributo c
	WHERE 	a.nr_sequencia = b.nr_sequencia
	AND	b.cd_tributo = c.cd_tributo
	AND	a.ie_tipo_nota IN ('SD', 'SE', 'SF', 'ST') /*Domínio 1661*/
	AND     (a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '') /*notas calculadas*/
	AND     a.ie_situacao IN (1)
	and	b.vl_tributo <> 0
	AND     (a.cd_cgc IS NOT NULL AND a.cd_cgc::text <> '')
	AND	c.cd_tributo = cd_tributo_w
	and	a.cd_estabelecimento = cd_estabelecimento_ww
	AND     a.nr_sequencia = nr_sequencia_p
	GROUP BY a.nr_sequencia,
		 obter_dados_nota_fiscal(a.nr_sequencia,'1');
exception
		when others then
			ds_erro_w	:= sqlerrm(SQLSTATE);
			/*Ocorreu algum erro ao inserir as informações;*/

			CALL wheb_mensagem_pck.exibir_mensagem_abort(957236,'DS_ERRO_W='||ds_erro_w);
	end;

if (cd_serie_nf_w IS NOT NULL AND cd_serie_nf_w::text <> '')	then
    nota_inserida_p := 'S';
        insert into fis_reinf_notas_r2020(
		nr_sequencia,
		cd_estabelecimento,
		dt_atualizacao,
		nm_usuario,
		vl_bruto_nf,
		vl_base_trib_inss,
		vl_retencao_inss,
		nr_documento,
		nr_seq_superior,
		cd_cnpj,
		nr_seq_nota,
		vl_n_retencao_inss)
	values (	nextval('fis_reinf_notas_r2020_seq'),
		cd_estabelecimento_w,
		clock_timestamp(),
		nm_usuario_p,
		vl_bruto_nf_w,
		vl_base_trib_inss_w,
		vl_retencao_inss_w,
		nr_nota_fiscal_w,
		nr_seq_superior_p,
		cd_cnpj_w,
		nr_sequencia_p,
		vl_n_retencao_inss_w);
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_inserir_reinf_2020 (nr_sequencia_p bigint, nr_seq_superior_p bigint, nm_usuario_p text, nota_inserida_p INOUT text) FROM PUBLIC;

