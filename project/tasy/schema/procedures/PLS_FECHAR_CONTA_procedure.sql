-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_fechar_conta ( nr_seq_conta_p bigint, ie_fechar_conta_p text, ie_liberar_conta_p text, ie_commit_p text, cd_estabelecimento_p bigint, nm_usuario_p text, ie_protocolo_inteiro_p text, ie_xml_p text) AS $body$
DECLARE


qt_proc_inconsistente_w		bigint	:= 0;
qt_mat_inconsistente_w		bigint	:= 0;
nr_seq_protocolo_w		bigint;
nr_seq_segurado_w		bigint;
dt_autorizacao_w			timestamp;
nr_seq_conta_proc_w		bigint;
ie_status_conta_w			varchar(5);
ie_tipo_contratacao_w		varchar(2);
ie_participacao_w			varchar(1);
ie_tipo_plano_w			varchar(3);
nr_seq_plano_w			bigint;
ie_tipo_beneficiario_w		varchar(3);
ie_benef_internado_w		varchar(1)	:= 'N';
nr_seq_contrato_w			bigint;
ie_tipo_segurado_w			varchar(3);
ie_preco_plano_w			varchar(2);
qt_glosa_fechar_conta_w		integer	:= 0;
nr_seq_conta_mat_w		bigint;
nr_seq_intercambio_w		bigint;
cd_cooperativa_w			varchar(10);
ie_origem_conta_w			varchar(5);
ie_tipo_guia_w			varchar(5);
qt_ocorrencias_w			bigint;
nr_seq_congenere_w		bigint;
qt_proc_analise_w			bigint;
qt_mat_analise_w			bigint;
ds_glosas_oc_w			varchar(255);
nr_seq_analise_w			bigint;
qt_conta_analise_lib_w		bigint;
qt_conta_analise_fec_w		bigint;
nr_seq_protocolo_ww		bigint;
nr_seq_fatura_w			bigint;
nr_seq_regra_lib_w			bigint;
nr_seq_acao_w			bigint;
nr_titulo_w			bigint;
ie_provisao_producao_w		varchar(1);
ie_status_w			varchar(10);
qt_pos_estab_w			bigint;
ie_atende_glosado_w		varchar(1);
nr_seq_proc_glosa_inv_w		bigint;
nr_seq_mat_glosa_inv_w		bigint;
ie_geracao_pos_estab_w		varchar(1);
ie_fechar_conta_glosa_w		varchar(1);
ie_status_faturamento_w		varchar(4000);
ie_status_analise_w			varchar(255);
vl_lib_original_w			double precision;
vl_total_w			double precision;
ie_proc_mat_w			varchar(1);
vl_liberado_w			double precision;
vl_pagamento_w			double precision;
nr_seq_item_w			bigint;
cd_pessoa_fisica_seg_w		bigint;
ds_estabelecimento_w		pessoa_juridica.ds_razao_social%type;
ie_apropriacao_copartic_w		pls_parametros.ie_apropriacao_copartic%type;
ie_permite_multi_copart_w		pls_parametros.ie_permite_multi_copart%type;
dt_mes_competencia_w		pls_protocolo_conta.dt_mes_competencia%type;
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
vl_provisao_w			double precision;
qt_registro_copartic_w		integer;
nr_regras_copart_w			varchar(256) :='';
ie_aborta_w			varchar(1);
dt_referencia_w			timestamp;
qt_movimento_w			bigint := 0;
nr_seq_atualizacao_w		pls_atualizacao_contabil.nr_sequencia%type := 0;
nr_seq_conta_faturamento_w	bigint;
dt_referencia_month_w		timestamp;
dt_ref_inicial_w		timestamp;
dt_ref_final_w			timestamp;

ie_novo_pos_w			pls_visible_false.ie_novo_pos_estab%type;
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;
ie_status_fat_w			pls_conta.ie_status_fat%type;
qt_pos_faturar_w		integer := 0;

/*Ordenar pela sequencia para que calcular o valor da coparticipacao corretamente, motivo: procedure pls_minimo_coparticipacao situacao do segundo select
or (a.nr_seq_conta = nr_seq_conta_w and a.nr_sequencia < nr_seq_conta_proc_p))*/
c01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_conta_proc
	where	nr_seq_conta	= nr_seq_conta_p
	and	ie_status	in ('L','S','A')
	order by nr_sequencia, ie_tipo_despesa desc;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_conta_mat
	where	nr_seq_conta	= nr_seq_conta_p
	and	ie_status	in ('L','S','A');

C03 CURSOR FOR
	SELECT	'P',
		vl_liberado,
		nr_sequencia
	from	pls_conta_proc
	where	nr_seq_conta 	= nr_seq_conta_p
	and (ie_status not('M','D'))
	
union all

	SELECT	'M',
		vl_liberado,
		nr_sequencia
	from	pls_conta_mat
	where	nr_seq_conta = nr_seq_conta_p
	and (ie_status not in ('M','D'));
		
--Select dos procedimentos,  faz select da quantidades de glosas para conta separadamente da quantidade

--de glosas para itens. Com isso nao utiliza or na clusula where do subselect.
C04 CURSOR(nr_seq_conta_pw	pls_conta.nr_sequencia%type)FOR
	SELECT	a.nr_sequencia,
		a.cd_procedimento,
		coalesce(a.vl_liberado,0) vl_liberado,
		coalesce(a.vl_glosa,0) vl_glosa,
		coalesce(a.vl_procedimento_imp, 0) vl_apresentado,
		(SELECT count(1)
		 from 	pls_conta_glosa b
		 where (b.nr_seq_conta = a.nr_seq_conta)
		 and	ie_situacao = 'A') qt_glosa_conta_ativa,
		 (select count(1) 
		 from 	pls_conta_glosa b
		 where (b.nr_seq_conta_proc = a.nr_sequencia)
		 and	ie_situacao = 'A')qt_glosa_item_ativa
	from	pls_conta_proc a
	where	a.nr_seq_conta = nr_seq_conta_pw
	and	a.ie_status		not in ('M', 'D');
	
--Select dos materiais,  faz select da quantidades de glosas para conta separadamente da quantidade

--de glosas para itens. Com isso nao utiliza or na clausula where do subselect.
C05 CURSOR(nr_seq_conta_pw	pls_conta.nr_sequencia%type)FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_material,
		coalesce(a.vl_liberado,0) vl_liberado,
		coalesce(a.vl_glosa,0) vl_glosa,
		coalesce(a.vl_material_imp,0) vl_apresentado,
		(SELECT count(1)
		 from 	pls_conta_glosa b
		 where (b.nr_seq_conta = a.nr_seq_conta)
		 and	ie_situacao = 'A') qt_glosa_conta_ativa,
		 (select count(1) 
		 from 	pls_conta_glosa b
		 where (b.nr_seq_conta_mat = a.nr_sequencia)
		 and	ie_situacao = 'A')qt_glosa_item_ativa
	from	pls_conta_mat a
	where	a.nr_seq_conta = nr_seq_conta_pw
	and	a.ie_status		not in ('M', 'D');
	
--retornar as diferentes regras coparticipacao para o procedimento	
C06 CURSOR(	nr_seq_conta_proc_pw pls_conta_proc.nr_sequencia%type) FOR
	SELECT	distinct nr_seq_regra
	from	pls_conta_coparticipacao
	where	nr_seq_conta_proc	= nr_seq_conta_proc_pw
	and	vl_coparticipacao 	> 0
	and	(nr_seq_regra IS NOT NULL AND nr_seq_regra::text <> '');
	
--retornar as diferentes regras coparticipacao para o procedimento	
C07 CURSOR(	nr_seq_conta_mat_pw pls_conta_mat.nr_sequencia%type) FOR
	SELECT	distinct nr_seq_regra
	from	pls_conta_coparticipacao
	where	nr_seq_conta_mat	= nr_seq_conta_mat_pw
	and	vl_coparticipacao 	> 0
	and	(nr_seq_regra IS NOT NULL AND nr_seq_regra::text <> '');

C08 CURSOR(	nr_seq_conta_p	pls_conta.nr_sequencia%type) FOR
	SELECT	vl_liberado,
		vl_procedimento_imp vl_apresentado,
		vl_glosa
	from	pls_conta_proc
	where	nr_seq_conta = nr_seq_conta_p
	and	ie_status	in ('L','S')
	
union all

	SELECT 	vl_liberado,
		vl_material_imp vl_apresentado,
		vl_glosa
	from	pls_conta_mat
	where	nr_seq_conta = nr_seq_conta_p
	and	ie_status	in ('L','S');
	
	
	

	
BEGIN

select	coalesce(max(ie_novo_pos_estab),'N'),
	coalesce(max(ie_concil_contab), 'N')
into STRICT	ie_novo_pos_w,
	ie_concil_contab_w
from	pls_visible_false;

select 	max(a.dt_mes_competencia)
into STRICT	dt_referencia_w
from	pls_protocolo_conta	a,
	pls_conta		b
where 	a.nr_sequencia = b.nr_seq_protocolo
and	b.nr_sequencia = nr_seq_conta_p;

dt_referencia_month_w	:= trunc(dt_referencia_w,'month');

dt_ref_inicial_w	:= dt_referencia_month_w;
dt_ref_final_w		:= fim_dia(fim_mes(dt_referencia_month_w));


select	count(1)
into STRICT	qt_proc_inconsistente_w
from	pls_conta_proc
where	ie_status not in ('L','S','A','D','M')
and	nr_seq_conta	= nr_seq_conta_p;

select	count(1)
into STRICT	qt_mat_inconsistente_w
from	pls_conta_mat
where	ie_status not in ('L','S','A','D','M')
and	nr_seq_conta	= nr_seq_conta_p;

select	coalesce(max(ie_geracao_pos_estabelecido),'F'),
	coalesce(max(ie_fechar_conta_glosa),'N'),
	coalesce(max(ie_permite_multi_copart),'N')
into STRICT	ie_geracao_pos_estab_w,
	ie_fechar_conta_glosa_w,
	ie_permite_multi_copart_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

/* Obter dados da conta */

select	a.nr_seq_segurado,
	a.nr_seq_analise,
	coalesce(dt_atendimento_referencia, coalesce(dt_autorizacao, clock_timestamp())),
	a.ie_status,
	b.dt_mes_competencia,
	b.ie_tipo_protocolo,
	a.ie_tipo_segurado
into STRICT	nr_seq_segurado_w,
	nr_seq_analise_w,
	dt_autorizacao_w,
	ie_status_w,
	dt_mes_competencia_w,
	ie_tipo_protocolo_w,
	ie_tipo_segurado_w
from	pls_conta		a,
	pls_protocolo_conta	b
where	b.nr_sequencia	= a.nr_seq_protocolo
and	a.nr_sequencia	= nr_seq_conta_p;

if (coalesce(ie_fechar_conta_p,'N') = 'S') then
	select	max(ie_atende_glosado)
	into STRICT	ie_atende_glosado_w
	from	pls_analise_conta
	where	nr_sequencia = nr_seq_analise_w;
	
	/* Obter a quantidade de glosas que NAO permitem fechar a conta */

	if (ie_fechar_conta_glosa_w = 'S') then
		select	count(1)
		into STRICT	qt_glosa_fechar_conta_w
		from	pls_glosa_conta_medica_v
		where	ie_fechar_conta	= 'N'
		and	nr_seq_conta	= nr_seq_conta_p;
	else
		select	count(1)
		into STRICT	qt_glosa_fechar_conta_w
		from	pls_glosa_conta_medica_v	a
		where	a.nr_seq_conta		= nr_seq_conta_p
		and	a.ie_fechar_conta	= 'N'
		and	coalesce(a.ie_situacao,'A')	= 'A'
		and (coalesce(a.ie_status_item::text, '') = '' or a.ie_status_item <> 'D');
	end if;
	
	if (ie_status_w	= 'A') then
		select	count(1)
		into STRICT	qt_glosa_fechar_conta_w
		from	pls_analise_conta_item
		where	ie_status	= 'P'
		and	ie_fechar_conta	= 'N'
		and	ie_tipo		= 'G'
		and	nr_seq_conta	= nr_seq_conta_p;
		
		if (coalesce(ie_atende_glosado_w,'N') = 'S') then
			/*Diego OS 394458 - Caso o atendimento(analise) esteja glosado nao e consistido se existe glosas e ocorrencias que nao permitem o fechamento.*/

			qt_glosa_fechar_conta_w := 0;
		end if;
	end if;
	
	select	max(nr_seq_regra_lib)
	into STRICT	nr_seq_regra_lib_w
	from	pls_analise_conta
	where	nr_sequencia = nr_seq_analise_w;
	
	if (qt_glosa_fechar_conta_w > 0) and (coalesce(nr_seq_regra_lib_w,0) = 0) then
		
		ds_glosas_oc_w := pls_obter_glosas_oc_fechar(nr_seq_conta_p, 'G');
		
		-- A(s) glosa(s) (#@DS_GLOSAS#@) da conta (#@NR_SEQ_CONTA#@) nao permitem o fechamento da mesma!
		CALL wheb_mensagem_pck.exibir_mensagem_abort(174329,	';DS_GLOSAS=' || ds_glosas_oc_w || '(' || ie_fechar_conta_glosa_w || ')' ||
								';' || 'NR_SEQ_CONTA=' ||nr_seq_conta_p);
	end if;
	
	if (qt_proc_inconsistente_w > 0) or (qt_mat_inconsistente_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(174331,'NR_SEQ_CONTA=' ||nr_seq_conta_p);
	end if;
	

	/*Diego OPS - 01/11/2010 - Obter se existe ocorrencias na conta que nao permite fechar a conta.*/
	
	select	count(a.nr_sequencia)
	into STRICT	qt_ocorrencias_w
	from	pls_ocorrencia_benef	a
	where	a.nr_seq_conta			= nr_seq_conta_p
	and	coalesce(a.ie_fechar_conta,'S')	= 'N'
	and	a.ie_situacao = 'A'
	/* Francisco - 31/01/2013 - OS 542443 - Se o item ja foi glosado com outra glosa, pode deixar fechar */

	and	not exists (SELECT	1
				from	pls_conta_proc x
				where	x.nr_sequencia = a.nr_seq_conta_proc
				and	x.ie_glosa = 'S'
				
union all

				SELECT	1
				from	pls_conta_mat x
				where	x.nr_sequencia = a.nr_seq_conta_mat
				and	x.ie_glosa = 'S');
	
	if (ie_status_w	= 'A') then
		select	count(1)
		into STRICT	qt_ocorrencias_w
		from	pls_analise_conta_item
		where	ie_status		= 'P'
		and	ie_fechar_conta		= 'N'
		and	ie_tipo			= 'O'
		and	nr_seq_conta		= nr_seq_conta_p;
		
		if (coalesce(ie_atende_glosado_w,'N') = 'S') then
			/*Diego OS 394458 - Caso o atendimento(analise) esteja glosado nao e consistido se existe glosas e ocorrencias que nao permitem o fechamento.*/

			qt_ocorrencias_w := 0;
		end if;
	end if;
	
	if (qt_ocorrencias_w > 0) and (coalesce(nr_seq_regra_lib_w,0) = 0) then
		ds_glosas_oc_w := pls_obter_glosas_oc_fechar(nr_seq_conta_p, 'O');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(174333,'DS_GLOSAS=' ||ds_glosas_oc_w|| ';' || 'NR_SEQ_CONTA=' ||nr_seq_conta_p);
	end if;
	
	
	-- Valida as regras de fechamento
	pls_val_regra_fechamento_cta(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p);
	
	--Cursor de procedimentos
	for r_C04_w in C04(nr_seq_conta_p) loop
	
		--Se tiver valor de glosa e nao tiver glosa ativa para o item e/ou conta entao ja aborta
		if (r_C04_w.vl_glosa > 0 and (r_C04_w.qt_glosa_item_ativa = 0 and r_C04_w.qt_glosa_conta_ativa = 0)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(194109,'NR_SEQ_CONTA=' ||nr_seq_conta_p|| ';' || 'NR_SEQ_ITEM=' ||r_C04_w.nr_sequencia);
		end if;

		--Verifica se a soma do valor liberado com o valor glosado do item for diferente do valor apresentado e este ultimo for maior que zero
		if (r_C04_w.vl_liberado + r_C04_w.vl_glosa <> r_C04_w.vl_apresentado and r_C04_w.vl_apresentado <> 0 and r_C04_w.vl_liberado < r_C04_w.vl_apresentado) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(194109,'NR_SEQ_CONTA=' ||nr_seq_conta_p|| ';' || 'NR_SEQ_ITEM=' ||r_C04_w.nr_sequencia);				
		end if;
		
		--Valor liberado menor que o valor apresentado sem que tenha valor de glosa
		if (r_C04_w.vl_liberado < r_C04_w.vl_apresentado and r_C04_w.vl_glosa = 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(194109,'NR_SEQ_CONTA=' ||nr_seq_conta_p|| ';' || 'NR_SEQ_ITEM=' ||r_C04_w.nr_sequencia);
		end if;
		
	end loop;
	
	--Cursor de materiais
	for r_C05_w in C05(nr_seq_conta_p) loop
		
		--Se tiver valor de glosa e nao tiver glosa ativa para o item e/ou conta entao ja aborta
		if (r_C05_w.vl_glosa > 0 and (r_C05_w.qt_glosa_item_ativa = 0 and r_C05_w.qt_glosa_conta_ativa = 0)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(328759,'NR_SEQ_CONTA=' ||nr_seq_conta_p|| ';' || 'NR_SEQ_ITEM=' ||r_C05_w.nr_sequencia);
		end if;

		--Verifica se a soma do valor liberado com o valor glosado do item for diferente do valor apresentado e este ultimo for maior que zero
		if (r_C05_w.vl_liberado + r_C05_w.vl_glosa <> r_C05_w.vl_apresentado and r_C05_w.vl_apresentado <> 0 and r_C05_w.vl_liberado < r_C05_w.vl_apresentado ) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(328759,'NR_SEQ_CONTA=' ||nr_seq_conta_p|| ';' || 'NR_SEQ_ITEM=' ||r_C05_w.nr_sequencia);				
		end if;
		
		--Valor liberado menor que o valor apresentado sem que tenha valor de glosa
		if (r_C05_w.vl_liberado < r_C05_w.vl_apresentado and r_C05_w.vl_glosa = 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(328759,'NR_SEQ_CONTA=' ||nr_seq_conta_p|| ';' || 'NR_SEQ_ITEM=' ||r_C05_w.nr_sequencia);
		end if;		
	end loop;
	
end if;

if (coalesce(nr_seq_conta_p,0) > 0) and (coalesce(nr_seq_segurado_w,0) > 0) then
	
	/* Obter dados do beneficiario */

	select	a.nr_seq_contrato,
		a.nr_seq_intercambio,
		a.nr_seq_congenere,
		pls_obter_produto_benef(a.nr_sequencia, dt_autorizacao_w) as nr_seq_plano,
		--a.nr_seq_plano,
		a.cd_pessoa_fisica
	into STRICT	nr_seq_contrato_w,
		nr_seq_intercambio_w,
		nr_seq_congenere_w,
		nr_seq_plano_w,
		cd_pessoa_fisica_seg_w
	from	pls_segurado	a
	where	a.nr_sequencia	= nr_seq_segurado_w;
	
	/* Obter dados do produto */

	if (coalesce(nr_seq_plano_w,0) > 0) then
		select	a.ie_tipo_contratacao,
			a.ie_participacao,
			a.ie_preco
		into STRICT	ie_tipo_contratacao_w,
			ie_participacao_w,
			ie_preco_plano_w
		from	pls_plano	a
		where	a.nr_sequencia	= nr_seq_plano_w;
	end if;
	
	if (coalesce(ie_fechar_conta_p,'N') = 'S') then
		if (ie_tipo_segurado_w	= 'B') then
			begin
			select	ie_tipo_beneficiario,
				coalesce(ie_participacao,ie_participacao_w)
			into STRICT	ie_tipo_beneficiario_w,
				ie_participacao_w
			from	pls_contrato
			where	nr_sequencia	= nr_seq_contrato_w;
			exception
				when others then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(174340,'NR_CONTRATO='||nr_seq_contrato_w);
			end;
		end if;
	end if;
	/* Obter o tipo do plano do beneficiario - Dominio 2213 */

	if (ie_tipo_contratacao_w	= 'I') then
		ie_tipo_plano_w	:= 'IF';
	elsif (ie_participacao_w	= 'S') then
		ie_tipo_plano_w	:= 'CSP';
	elsif (ie_participacao_w	= 'C') then
		ie_tipo_plano_w	:= 'CCP';
	end if;
end if;

if (coalesce(ie_liberar_conta_p,'N') = 'S') then

	-- se nao estiver cancelada, fechada ou A700 finalizado, verifica o que pode fazer, senao deixa a conta com o mesmo status
	if (ie_status_w not in ('C', 'F', 'S')) then
		ie_status_conta_w	:= 'P';
		
		if (qt_proc_inconsistente_w = 0) and (qt_mat_inconsistente_w	= 0) then
			ie_status_conta_w	:= 'L';
		end if;
	else
		ie_status_conta_w := ie_status_w;
	end if;
	
	update	pls_conta
	set	ie_status		= ie_status_conta_w,
		nm_usuario		= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_conta_p;
	
	/*Diego OS 310267 - E realizado um count para ver se ainda existem contas da analise nao liberadas*/

	select	count(nr_sequencia)
	into STRICT	qt_conta_analise_lib_w
	from	pls_conta
	where	nr_seq_analise = nr_seq_analise_w
	and	ie_status <> 'L';
	
	/*Se nao existir contas da analise ainda sem serem liberadas  a ANALISE SEM AUDITORIA e setada para "Liberada para fechamento"
	ANALISES DE AUDITORIA nao sao afetadas pois o status Liberado para fechamento nao sera pertinente pois todo o fechamento e realizado pelo auditor.*/
	if (qt_conta_analise_lib_w = 0) then
		select	max(a.ie_status)
		into STRICT	ie_status_analise_w
		from	pls_analise_conta	a
		where	nr_sequencia	= nr_seq_analise_w;
		
		if (ie_status_analise_w = 'S') then
			CALL pls_alterar_status_analise_cta(nr_seq_analise_w, 'L', 'PLS_FECHAR_CONTA', nm_usuario_p, cd_estabelecimento_p);
		end if;
	end if;
end if;

select	nr_seq_protocolo,
	ie_origem_conta,
	ie_tipo_guia
into STRICT	nr_seq_protocolo_w,
	ie_origem_conta_w,
	ie_tipo_guia_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_p;

if (coalesce(ie_fechar_conta_p,'N') = 'S') then
	/* Felipe - 09/07/2011 - OS 330705 - Coloquei na PLS_CONSISTIR_CONTA atraves da rotina PLS_GERAR_COPARTICIPACAO_CONTA
	Pois sera necessario calcular o faturamento ja na consistencia da conta, devido a glosas e ocorrencias */

	/*Se houver procedimentos em analise estes sao ajustados para liberado pelo usuario*/

	select	count(1)
	into STRICT	qt_proc_analise_w
	from	pls_conta_proc
	where	nr_seq_conta	= nr_seq_conta_p
	and	ie_status	= 'A';
	
	if (qt_proc_analise_w > 0) then
		update	pls_conta_proc
		set	ie_status 	= 'L'
		where	nr_seq_conta 	= nr_seq_conta_p
		and (ie_status <> 'D' or coalesce(ie_status::text, '') = '');
	end if;
	
	/*Se houver materiais em analise estes sao ajustados para liberado pelo usuario*/

	select	count(1)
	into STRICT	qt_mat_analise_w
	from	pls_conta_mat
	where	nr_seq_conta	= nr_seq_conta_p
	and	ie_status	= 'A';
	
	if (qt_mat_analise_w > 0) then
		update	pls_conta_mat
		set	ie_status 	= 'L'
		where	nr_seq_conta 	= nr_seq_conta_p
		and (ie_status <> 'D' or coalesce(ie_status::text, '') = '');
	end if;
	
	begin
	--Select para verificar se deve ser utilizada a regra de apropriacoes, valor padrao deve ser "N".
	select	coalesce(ie_apropriacao_copartic, 'N')
	into STRICT	ie_apropriacao_copartic_w
	from	pls_parametros
	where	cd_estabelecimento = cd_estabelecimento_p;
	exception
	when no_data_found then
		select	ds_razao_social
		into STRICT	ds_estabelecimento_w
		from	pessoa_juridica
		where	cd_cgc = (	SELECT	cd_cgc
					from	estabelecimento
					where	cd_estabelecimento = cd_estabelecimento_p);
		CALL wheb_mensagem_pck.exibir_mensagem_abort(306179,'ESTABELECIMENTO=' || cd_estabelecimento_p || ' - ' ||  ds_estabelecimento_w);
	end;
	
	CALL pls_atualizar_conta_resumo(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p);
	
	if (ie_geracao_pos_estab_w = 'F') and (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
		
		if (ie_origem_conta_w != 'G') then
		
			if ( coalesce(nr_seq_analise_w::text, '') = '') then
				if (ie_novo_pos_w = 'N') then
					CALL pls_lancar_item_proc_pos(nr_seq_conta_p, nm_usuario_p);
				else
					CALL pls_conversao_itens_pck.conversao_itens_pos(	null,  null, null,
											null, null, nr_seq_conta_p,
											nm_usuario_p, cd_estabelecimento_p);
						
					CALL pls_conversao_itens_pck.abrir_proc_pacote_cta(	null,  null, null,
											null, null, nr_seq_conta_p,
											nm_usuario_p, cd_estabelecimento_p);
						
				end if;
			end if;
			
		end if;
		
		if (ie_novo_pos_w = 'N') then
			CALL pls_gerar_valor_pos_estab(nr_seq_conta_p, nm_usuario_p, ie_geracao_pos_estab_w,null,null,'A');
			
		else
			CALL pls_pos_estabelecido_pck.gerencia_pos_estabelecido(  	null,  null, null,
										null, nr_seq_conta_p, null,
										null, null, null,
										nm_usuario_p, cd_estabelecimento_p, 'C');
		end if;					
	end if;
	
	if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') and (ie_apropriacao_copartic_w = 'S') then
		CALL pls_apropriacao_pck.pls_gerar_apropriacao_conta(nr_seq_conta_p,null,null, nm_usuario_p);
	end if;
	
	if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '')then
		CALL pls_gerar_coparticipacao_conta(nr_seq_conta_p,null,nm_usuario_p);
		CALL pls_gerar_taxa_atend_conta(nr_seq_conta_p,nm_usuario_p);
	end if;
	
	update	pls_conta_proc
	set	vl_lib_original	= vl_liberado
	where	nr_seq_conta	= nr_seq_conta_p;
	
	update	pls_conta_mat
	set	vl_lib_original	= vl_liberado
	where	nr_seq_conta	= nr_seq_conta_p;
	/*se houver valor de pos estabelcido ele verifica o status dos itens e altera o status dos item liberados para faturamento*/

	
	if (ie_novo_pos_w = 'N') then
		select	count(1)
		into STRICT	qt_pos_estab_w
		from	pls_conta_pos_estabelecido
		where	nr_seq_conta 	= nr_seq_conta_p
		and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = ''))  LIMIT 1;
	else
		select	sum(qt_pos)
		into STRICT	qt_pos_estab_w
		from (
			SELECT	count(1) qt_pos
			from	pls_conta_pos_proc
			where	nr_Seq_conta = nr_seq_conta_p
			
union all

			SELECT	count(1) qt_pos
			from	pls_conta_pos_mat
			where	nr_Seq_conta = nr_seq_conta_p) alias3;
	end if;
	
	if (coalesce(qt_pos_estab_w,0) > 0) then
		update	pls_conta_pos_estabelecido
		set	ie_status_faturamento 	= 'L',
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_conta 		= nr_seq_conta_p
		and	ie_status_faturamento 	= 'P'
		and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = ''));
		
		/* Altera o status de faturamento para "Permite faturamento" */

		update	pls_conta
		set	ie_status_fat	= 'P'
		where	nr_sequencia	= nr_seq_conta_p;
	end if;
	
	--Passado para antes do update no status da conta pois ao fechar analise e ocorresse duplicidade, a conta era 

	--fechada e a analise ficava pendente, assim poderia ser fechada varias vezes e gerar varios registros de coparticipacao indevidamente
	if (ie_permite_multi_copart_w = 'N') then
		for r_c04_w in C04(nr_seq_conta_p) loop
			begin
			select	count(1)
			into STRICT	qt_registro_copartic_w
			from	pls_conta_coparticipacao
			where	nr_seq_conta_proc	= r_c04_w.nr_sequencia
			and	vl_coparticipacao 	> 0
      and	coalesce(dt_estorno::text, '') = '';
			
			if (qt_registro_copartic_w	> 1) then
				nr_regras_copart_w := '';
				for r_C06_w in C06(r_c04_w.nr_sequencia) loop
					if (nr_regras_copart_w IS NOT NULL AND nr_regras_copart_w::text <> '') then
						nr_regras_copart_w := nr_regras_copart_w ||', ';	
					end if;
					nr_regras_copart_w := substr(nr_regras_copart_w ||r_C06_w.nr_seq_regra,1,255);
				end loop;
				
				-- Acrescentado esse rollback pois quando fechado a conta pela Gestao de Analise

				-- o Delphi faz um commit e acaba mantendo os registros duplciados de coparticipacao,

				-- sendo assim, quando fosse ajustado as regras, o sistema continuava gerando a mensagem

				-- pois os registros gerados indevidamente atrapalhavam a verificacao.

				-- NAO TIRAR O ROLLBACK
				rollback;
				
				if (nr_regras_copart_w = '') then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(413072,'IE_TIPO_ITEM='||'Proc :' ||r_C04_w.nr_sequencia);
				else
					CALL wheb_mensagem_pck.exibir_mensagem_abort(449239,'IE_TIPO_ITEM='||'Proc :' ||r_C04_w.nr_sequencia||', ' || obter_desc_expressao(327262) || r_C04_w.cd_procedimento ||';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_SEGURADO='||nr_seq_segurado_w||';NR_REGRAS='||nr_regras_copart_w);
				end if;
			end if;
			end;
		end loop;
		
		for r_c05_w in C05(nr_seq_conta_p) loop
			begin
			select	count(1)
			into STRICT	qt_registro_copartic_w
			from	pls_conta_coparticipacao
			where	nr_seq_conta_mat	= r_c05_w.nr_sequencia
			and	vl_coparticipacao 	> 0
      and	coalesce(dt_estorno::text, '') = '';
			
			if (qt_registro_copartic_w > 1) then
				
				nr_regras_copart_w := '';
				for r_C07_w in C07(r_c05_w.nr_sequencia) loop
					if (nr_regras_copart_w IS NOT NULL AND nr_regras_copart_w::text <> '') then
						nr_regras_copart_w := nr_regras_copart_w ||', ';	
					end if;
					nr_regras_copart_w := substr(nr_regras_copart_w ||r_C07_w.nr_seq_regra,1,255);
				end loop;
						
				if (nr_regras_copart_w = '') then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(413072,'IE_TIPO_ITEM='||'Mat :' ||r_C05_w.nr_sequencia);
				else
					CALL wheb_mensagem_pck.exibir_mensagem_abort(449239,'IE_TIPO_ITEM='||'Mat :' ||r_C05_w.nr_sequencia||', Seq mat: '||r_C05_w.nr_seq_material||';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_SEGURADO='||nr_seq_segurado_w||';NR_REGRAS='||nr_regras_copart_w);
				end if;
			end if;
			
			end;
		end loop;
	end if;
	
	/*Consistencia para verificacao dos valores liberados para pagamento de producao medica o valor liberado sempre devera ser igual ao liberado para pagamento*/

	update	pls_conta
	set	ie_status		= 'F',
		nm_usuario		= nm_usuario_p,
		dt_atualizacao		= clock_timestamp(),
		dt_fechamento_conta	= clock_timestamp()
	where	nr_sequencia		= nr_seq_conta_p
	and	ie_status		<> 'C';
	
	--necessario setar o status da conta medica resumo
	
	update	pls_conta_medica_resumo
	set	ie_status	= 'F'
	where	nr_seq_conta	= nr_seq_conta_p
	and	ie_situacao	= 'A';
	
	--OS819193 Deslocado para ca, pois o status da conta era setado para Fechada, e ocorria um commit antes dessa verificacao

	--aqui. Com isso, mesmo com o abort ocorrendo devido a divergencia de valores, a conta ficava fechada, quando nesse caso nao poderia.
	if (coalesce(ie_fechar_conta_p,'N') = 'S') and (coalesce(ie_origem_conta_w,'T') not in ('Z','A')) then
		open C03;
		loop
		fetch C03 into
			ie_proc_mat_w,
			vl_liberado_w,
			nr_seq_item_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			
			if (ie_proc_mat_w = 'M') then
				select	coalesce(sum(vl_lib_original),0)
				into STRICT	vl_pagamento_w
				from	pls_conta_medica_resumo
				where	nr_seq_conta_mat	= nr_seq_item_w
				and	ie_tipo_item 		<> 'I'
				and	vl_lib_original 	> 0
				and	nr_seq_conta		= nr_seq_conta_p
				and	((ie_situacao 		!= 'I') or (coalesce(ie_situacao::text, '') = ''));
			elsif (ie_proc_mat_w	= 'P') then
				select	coalesce(sum(vl_lib_original),0)
				into STRICT	vl_pagamento_w
				from	pls_conta_medica_resumo
				where	nr_seq_conta_proc	= nr_seq_item_w
				and	ie_tipo_item 		<> 'I'
				and	vl_lib_original 	> 0
				and	nr_seq_conta		= nr_seq_conta_p
				and	((ie_situacao 		!= 'I') or (coalesce(ie_situacao::text, '') = ''));
			end if;
		
			if (vl_liberado_w <> vl_pagamento_w) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(223398, 'NR_SEQ_CONTA=' || nr_seq_conta_p || ';' || 'NR_SEQ_ITEM=' ||nr_seq_item_w);
			end if;
			
			end;
		end loop;
		close C03;
	end if;
	
	/*Diego OS 310267 - E realizado um count para ver se ainda existem contas da analise nao fechadas*/

	select	count(nr_sequencia)
	into STRICT	qt_conta_analise_fec_w
	from	pls_conta
	where	nr_seq_analise = nr_seq_analise_w
	and	ie_status <> 'F';
	
	if (qt_conta_analise_fec_w = 0) then
		select	max(a.ie_status)
		into STRICT	ie_status_analise_w
		from	pls_analise_conta	a
		where	nr_sequencia	= nr_seq_analise_w;
		
		if (ie_status_analise_w in ('L', 'S')) then
			CALL pls_alterar_status_analise_cta(nr_seq_analise_w, 'T', 'PLS_FECHAR_CONTA', nm_usuario_p, cd_estabelecimento_p);
		end if;
	end if;
	
	CALL pls_atualiza_status_copartic(nr_seq_conta_p, 'FC', null, nm_usuario_p, cd_estabelecimento_p);
	
	--Gerar os valores de custo operacional para contrato pra(Deslocado para esse local na fechar conta para que so venha a gerar os registros uma unica vez)
	CALL pls_gerar_valor_co(nr_seq_conta_p,null,null,nm_usuario_p,cd_estabelecimento_p);
	
	--o if abaixo, irpa veriricar se existe divergencia entre os valores dos itens para nao gerar impacto na contestacao
	if (ie_origem_conta_w = 'A') then
	
		for r_C08_w in C08(nr_seq_conta_p) loop
			begin
				ie_aborta_w := 'N';
				
				if (coalesce(r_C08_w.vl_glosa, 0) > 0) and
					((coalesce(r_C08_w.vl_glosa, 0) + coalesce(r_C08_w.vl_liberado, 0)) > coalesce(r_C08_w.vl_apresentado, 0)) then
				
					ie_aborta_w := 'S';
							
				elsif (coalesce(r_C08_w.vl_glosa, 0) = 0) and (coalesce(r_C08_w.vl_liberado, 0) > coalesce(r_C08_w.vl_apresentado, 0)) then
					
					ie_aborta_w := 'S';
					
				end if;	
				
				if (ie_aborta_w = 'S') then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(495673, 'NR_SEQ_CONTA_P='||nr_seq_conta_p);
				end if;	
				
			end;
		end loop;	
	end if;	
	
end if;
CALL pls_atualiza_valor_conta(nr_seq_conta_p, nm_usuario_p);
if (coalesce(ie_protocolo_inteiro_p,'N') = 'N') then
	CALL pls_altera_status_protocolo(nr_seq_protocolo_w, 'C','N',cd_estabelecimento_p, nm_usuario_p);
	CALL pls_gerar_valores_protocolo(nr_seq_protocolo_w, nm_usuario_p); /* Felipe - OS 274084 - Atualizar os valores do protocolo */
end if;

select	max(nr_sequencia)
into STRICT	nr_seq_protocolo_ww
from	pls_protocolo_conta
where	nr_sequencia	= nr_seq_protocolo_w
and	ie_status	in (4,5,6);

if (coalesce(nr_seq_protocolo_w,0)	<> 0) then
	select	max(nr_sequencia)
	into STRICT	nr_seq_fatura_w
	from	ptu_fatura
	where	nr_seq_protocolo	= nr_seq_protocolo_ww;
	
	CALL ptu_atualizar_hist_fatura(nr_seq_fatura_w,3,'N',nm_usuario_p);
end if;

/* Verifica se a regra para baixar valor glosado no titulo ao fechar a conta */

if (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') then
	if (coalesce(nr_seq_protocolo_w,0)	<> 0) then
		select	max(nr_sequencia)
		into STRICT	nr_seq_fatura_w
		from	ptu_fatura
		where	nr_seq_protocolo	= nr_seq_protocolo_w;
		
		nr_seq_acao_w := pls_obter_acao_intercambio(	'3', /* Fechamento da conta */
						'7', /* Baixar valor glosado no titulo */
						nr_seq_fatura_w, null, null, null, clock_timestamp(), 'A500', 'N', nr_seq_acao_w);
		
		/* Efetua a baixa do valor glosado no titulo  */

		if (nr_seq_acao_w IS NOT NULL AND nr_seq_acao_w::text <> '') then
			CALL pls_baixar_glosas_conta_pag(nr_seq_conta_p,nr_seq_acao_w,nr_seq_fatura_w,nm_usuario_p,cd_estabelecimento_p);
		end if;
	end if;
end if;

/* Johnny - Gerar situacao dentaria apenas se o tipo de guia for Odontologia */

if (ie_tipo_guia_w = '11') and (cd_pessoa_fisica_seg_w IS NOT NULL AND cd_pessoa_fisica_seg_w::text <> '') then
	CALL gravar_sit_dentaria_pf(nr_seq_conta_p, cd_pessoa_fisica_seg_w, ie_tipo_guia_w, nm_usuario_p);
end if;

CALL pls_pp_cta_evento_combinada(	null, nr_seq_conta_p, null,
				cd_estabelecimento_p, nm_usuario_p);

/* Lepinski - OS 381715 - Atualizar as contas de producao medica */


/*if	(nvl(ie_provisao_producao_w,'N') = 'S') then
	ctb_pls_atualizar_prod_med_in(nr_seq_conta_p, nm_usuario_p, cd_estabelecimento_p);
end if;*/


/* Lepinski - OS 389180 - Atualizar as contas provisao de coparticipacao */


--ctb_pls_atualizar_prov_copart(nr_seq_conta_p, null, null, nm_usuario_p, cd_estabelecimento_p);


/*Diego OS 435733 - Sera atualizado o faturamento de pos para liberado para que seja possivel gerar o lote de faturamento em contas criadas na gestao de contas medicas.
Este processo nao influencia a analise, caso exista a analise, pois no inicio da pls_gerar_auditoria_pos o status do fat sera atualizado para 'P'*/
update	pls_conta
set	ie_status_fat 	= 'L'
where	nr_sequencia 	= nr_seq_conta_p
and	ie_status_fat 	<> 'N';

if (coalesce(ie_fechar_conta_p,'N') = 'S') then

	nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 42, 'G', qt_movimento_w, nr_seq_atualizacao_w);

	qt_movimento_w := ctb_pls_atualizar_prov_copart(	nr_seq_conta_p, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);			
	
	nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 42, 'A', qt_movimento_w, nr_seq_atualizacao_w);
					
	nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 43, 'G', qt_movimento_w, nr_seq_atualizacao_w);
					
	qt_movimento_w := ctb_pls_atualizar_prov_fat(	nr_seq_conta_p, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
		

	nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 43, 'A', qt_movimento_w, nr_seq_atualizacao_w);
			
	if (ie_concil_contab_w = 'S') then
		CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_fechar_conta(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p);
	end if;

end if;

select  a.ie_status_fat,
		(	select 	count(1)
			from 	pls_conta_pos_estabelecido 
			where 	ie_status_faturamento in ('P', 'L')
			and 	nr_seq_conta = a.nr_sequencia
		) qt_pos_faturar
into STRICT	ie_status_fat_w,
	qt_pos_faturar_w
from	pls_conta a
where 	a.nr_sequencia = nr_seq_conta_p;


if ( ie_status_fat_w = 'N' and qt_pos_faturar_w > 0) then

	insert into plsprco_cta( 	nr_sequencia, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, nm_tabela,
						ds_log, ds_log_call, ds_funcao_ativa, 
						ie_aplicacao_tasy, nm_maquina, nr_seq_conta, ie_opcao )
			values ( 	nextval('plsprco_cta_seq'), clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, 'PLS_CONTA', 
						'Conta com ie_status_fat = N e com registros de pos-estab com status faturamento pendentes ou liberados', 
						'PLS_FECHAR_CONTA', obter_funcao_ativa, 
						'S', '' , nr_seq_conta_p, '0');
end if;

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_fechar_conta ( nr_seq_conta_p bigint, ie_fechar_conta_p text, ie_liberar_conta_p text, ie_commit_p text, cd_estabelecimento_p bigint, nm_usuario_p text, ie_protocolo_inteiro_p text, ie_xml_p text) FROM PUBLIC;

