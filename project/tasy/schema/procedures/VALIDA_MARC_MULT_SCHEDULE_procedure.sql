-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE valida_marc_mult_schedule ( nr_seq_ageint_p bigint, nr_seq_ageint_item_p bigint, nr_seq_ageint_lib_p bigint, nr_seq_agenda_p bigint, dt_agenda_p timestamp, cd_agenda_p bigint, nr_minuto_duracao_p bigint, cd_pessoa_fisica_p text, cd_convenio_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, cd_medico_p text, cd_procedimento_p bigint default null, nr_seq_proc_interno_p bigint default null, ie_origem_proced_p text DEFAULT NULL, ds_erro_p INOUT text DEFAULT NULL, ie_erro_p INOUT text DEFAULT NULL, ie_agendado_p INOUT text DEFAULT NULL, ie_pergunta_p INOUT text DEFAULT NULL, ds_pergunta_p INOUT text DEFAULT NULL, ds_aviso_p INOUT text DEFAULT NULL, nr_seq_lista_p bigint default null, ie_encaixe_p text default 'N', nr_minuto_duracao_age_p bigint default null) AS $body$
DECLARE

				
				      

qt_marcado_w			double precision;
nr_minuto_duracao_w		agenda_integrada_item.nr_minuto_duracao%type;
dt_reserva_w			timestamp;
ie_permit_agend_duplo_w		varchar(1);
ie_consistir_turno_w		varchar(1);
ie_permite_temp_exam_w		varchar(1);
ds_erro_w			varchar(2500);
ds_erro_turno_w			varchar(2500);
ds_macro_w			varchar(2500);
ds_consistencia_w		varchar(2500);
cd_perfil_w			perfil.cd_perfil%type;
cd_agenda_marc_w		agenda.cd_agenda%type;
ie_consis_idade_w		varchar(1);
qt_idade_w			double precision;
ie_consistir_agencon_w		varchar(1);
ie_classif_agenda_w		agenda_integrada_item.ie_classif_agenda%type;
ie_consist_agencons_w		varchar(2500);
ie_agecons_w			varchar(1);
ie_permite_fut_w		varchar(1);
ie_permite_retorno_w		varchar(1);
ie_reservado_w			varchar(1);
ie_principal_w			varchar(1);
ie_pendente_w			varchar(1);
param_60_w			varchar(1);
param_1_w			varchar(1);
ie_mesmo_estab_w		varchar(10);
ie_obrig_pf_w			varchar(1);
ie_forma_apresent_w		varchar(1);
ie_check_list_w			varchar(1);

ds_hor_min_w			bigint;	
ds_hor_max_w			bigint;
ds_hor_min_livre_w		bigint;
ds_hor_max_livre_w		bigint;
qt_anexo_lista_espera_w		bigint;
qt_horarios_usuario_w		integer;


BEGIN

cd_perfil_w := obter_perfil_ativo;

ie_permit_agend_duplo_w := obter_param_usuario(869, 154, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_permit_agend_duplo_w);
ie_consis_idade_w := obter_param_usuario(869, 155, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_consis_idade_w);
param_60_w := obter_param_usuario(869, 60, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, param_60_w);
param_1_w := obter_param_usuario(869, 1, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, param_1_w);
ie_consistir_turno_w := obter_param_usuario(869, 188, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_consistir_turno_w);
ie_permite_temp_exam_w := obter_param_usuario(869, 17, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_permite_temp_exam_w);
ie_consistir_agencon_w := obter_param_usuario(869, 289, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_consistir_agencon_w);
ie_permite_fut_w := obter_param_usuario(869, 379, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_permite_fut_w);
ie_obrig_pf_w := obter_param_usuario(869, 12, cd_perfil_w, nm_usuario_p, cd_estabelecimento_p, ie_obrig_pf_w);


SELECT * FROM ageint_valores_hor_check_dt(nr_seq_ageint_item_p, nr_minuto_duracao_w, dt_reserva_w, qt_marcado_w) INTO STRICT nr_minuto_duracao_w, dt_reserva_w, qt_marcado_w;

/* Verifica se ja nao tem um horario reservado.*/

if (dt_reserva_w IS NOT NULL AND dt_reserva_w::text <> '') then
    ds_erro_p := wheb_mensagem_pck.get_texto(85436);
    ie_erro_p := 'S';
    goto final;
end if;

/*Verifica se permite agendar de um estabelecimento diferente do logado.*/

if (param_60_w = 'N') and (param_1_w <> 'N') and (param_1_w <> 'T') and (cd_estabelecimento_p <> wheb_usuario_pck.get_cd_estabelecimento) then
    ds_erro_p := wheb_mensagem_pck.get_texto(85437);
    ie_erro_p := 'S';
    goto final;
end if;

/*  Verifica se ja existe um agendamento para este paciente nesta agenda.*/

if (coalesce(ie_permit_agend_duplo_w,'S') = 'N') then
    if (ageint_obter_se_cons_agendado(cd_agenda_p, dt_agenda_p, cd_pessoa_fisica_p, nr_seq_ageint_item_p) = 'N') then
	ds_erro_p := wheb_mensagem_pck.get_texto(85444);
	ie_erro_p := 'S';
	goto final;
    end if;
end if;

/*Verifica as regras de turno para realizacao do agendamento.*/

if (coalesce(ie_consistir_turno_w,'N') = 'S') then
    if (ageint_obter_se_turno_ex_marc(nr_seq_ageint_item_p, cd_agenda_p, cd_medico_p, dt_agenda_p, cd_estabelecimento_p) = 'N') then
       ds_erro_p := wheb_mensagem_pck.get_texto(109659);
       ie_erro_p := 'S';
       goto final;
    end if;
end if;


if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
    ds_erro_p := ds_erro_w;
    ie_erro_p := 'S';
    goto final;
end if;

/* Verifica se existem conflitos de horarios;*/

if (coalesce(obter_se_hor_livre_ageint(dt_agenda_p, nr_minuto_duracao_p, nm_usuario_p, nr_seq_ageint_p, nr_seq_ageint_item_p),'S') = 'N') then
    ds_erro_p := wheb_mensagem_pck.get_texto(85469);
    ie_erro_p := 'S';
    goto final;
end if;

/* Verifica se existe agendamento para esse paciente em outra agenda.*/
 
/* This rule is not needed in Japan as we have created a separate rule for Japan.*/

if (coalesce(obter_se_pac_ageint_concor(nr_seq_ageint_p, dt_agenda_p, nr_seq_ageint_item_p, nr_minuto_duracao_p),'N') = 'S' and pkg_i18n.get_user_locale <> 'ja_JP') then
    ds_erro_p := wheb_mensagem_pck.get_texto(85474);
    ie_erro_p := 'S';
    goto final;
end if;

/* Verifica o cadastro de regras de tempos entre salas !*/

if (coalesce(ageint_consiste_tempo_salas(cd_agenda_p, dt_agenda_p, nr_minuto_duracao_p, nr_seq_ageint_p, nm_usuario_p, cd_estabelecimento_p),'S') = 'N') then
	ds_erro_p := wheb_mensagem_pck.get_texto(85475);
	ie_erro_p := 'S';
	goto final;
end if;


/* Verifica se o procedimento pode ser excutado dentro de um periodo. */
if (coalesce(ageint_consiste_tempo_exames(cd_agenda_p, dt_agenda_p, nr_minuto_duracao_p, nr_seq_ageint_p, nr_seq_ageint_item_p, nm_usuario_p),'S') = 'N') then
	ds_macro_w := ageint_mensagem_tempo_exames(cd_agenda_p, dt_agenda_p, nr_minuto_duracao_p, nr_seq_ageint_p, nr_seq_ageint_item_p, nm_usuario_p);
	if (coalesce(ie_permite_temp_exam_w,'S') = 'N') then
	    ds_erro_p  := wheb_mensagem_pck.get_texto(85537, 'MACRO=' || ds_macro_w);
	    ie_erro_p  := 'S';
	    goto final;
	elsif (coalesce(ie_permite_temp_exam_w,'S') = 'S') then
	   ds_pergunta_p := wheb_mensagem_pck.get_texto(85534, 'MENSAGEM=' || ds_macro_w);
	   ie_pergunta_p := 'S';
	end if;
end if;

/* Verifica o cadastro de regras de tempos entre estabelecimentos! */

if (coalesce(ageint_consiste_tempo_estab(cd_agenda_p, dt_agenda_p, nr_minuto_duracao_p, nr_seq_ageint_p, nr_seq_ageint_item_p, nm_usuario_p),'S') = 'N') then
	ds_erro_p := wheb_mensagem_pck.get_texto(245591);
	ie_erro_p := 'S';
	goto final;
end if;

/* Verifica o cadastro de regras de tempos entre setores! */

if (coalesce(ageint_consiste_tempo_setores(cd_agenda_p, dt_agenda_p, nr_minuto_duracao_p, nr_seq_ageint_p, nr_seq_ageint_item_p, nm_usuario_p),'S') = 'N') then
	ds_erro_p := wheb_mensagem_pck.get_texto(453988);
	ie_erro_p := 'S';
	goto final;
end if;


/* Verifica em qual agenda deve ser marcada o exame de acordo com as regras */

SELECT * FROM ageint_consistir_ex_agenda(nr_seq_ageint_item_p, cd_estabelecimento_p, nm_usuario_p, nr_seq_ageint_p, cd_agenda_p, 'N', ds_erro_w, dt_agenda_p, cd_agenda_marc_w) INTO STRICT ds_erro_w, cd_agenda_marc_w;

if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') and (ds_erro_w <> '') then
   ds_erro_p := ds_erro_w;
   ie_erro_p := 'S';
   goto final;
end if;

/* Verifica se a marcacao e permitida! de acordo com a regra 'Quantidade medico x especialidade.'  */

ds_erro_w := ageint_regra_qtd_med_espec(nr_seq_ageint_item_p, cd_medico_p, cd_agenda_p, dt_agenda_p, nm_usuario_p, cd_estabelecimento_p, ds_erro_w);

if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') and (ds_erro_w <> '') then
   ds_erro_p := wheb_mensagem_pck.get_texto(85594, 'ERRO='||ds_erro_w);
   ie_erro_p := 'S';
   goto final;
end if;


/* Realiza a consistencia com o equipamento. */

ds_erro_w := ageint_obter_se_consiste_equip(nr_seq_agenda_p, cd_estabelecimento_p, nr_seq_ageint_item_p, nm_usuario_p, dt_agenda_p, nr_minuto_duracao_p, ds_erro_w);

if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
   ds_erro_p := ds_erro_w;
   ie_erro_p := 'S';
  goto final;
end if;


/* Faz a consistencia para verificar se o equipamento esta parado  */
ds_erro_w := Ageint_consistir_equip_parado(cd_agenda_p, dt_agenda_p, nm_usuario_p, cd_estabelecimento_p, ds_erro_w);

if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
   ds_erro_p := ds_erro_w;
   ie_erro_p := 'S';
   goto final;
end if;

/* Consiste a idade do paciente */

if (coalesce(ie_consis_idade_w,'N') <> 'N') then

    if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '' AND cd_pessoa_fisica_p > 0 ) then
        qt_idade_w := obter_idade_pf(cd_pessoa_fisica_p, clock_timestamp(), 'A');
    else
	qt_idade_w := obter_idade_pac_ageint(nr_seq_ageint_p);
    end if;

    SELECT * FROM consiste_idade_agenda_pac(cd_agenda_p, dt_agenda_p, qt_idade_w, nr_seq_ageint_p, ds_erro_w, ds_erro_turno_w, nm_usuario_p) INTO STRICT ds_erro_w, ds_erro_turno_w;

    if (coalesce(ie_consis_idade_w,'N') = 'B') then
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
	    ds_erro_p := ds_erro_w;
	    ie_erro_p := 'S';
            goto final;
	elsif (ds_erro_turno_w IS NOT NULL AND ds_erro_turno_w::text <> '') then
	    ds_erro_p := ds_erro_turno_w;
	    ie_erro_p := 'S';
            goto final;
	end if;
    elsif (coalesce(ie_consis_idade_w,'N') = 'S') then
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
	    ds_pergunta_p := wheb_mensagem_pck.get_texto(85623, 'MACRO='|| ds_erro_w);
	    ie_pergunta_p := 'S';
            goto final;
	elsif (ds_erro_turno_w IS NOT NULL AND ds_erro_turno_w::text <> '') then
	    ds_pergunta_p := wheb_mensagem_pck.get_texto(85623, 'MACRO='|| ds_erro_turno_w);
	    ie_pergunta_p := 'S';
            goto final;
	end if;
    end if;
end if;


/* Consiste as regras de classificacao da agenda */

if ((coalesce(nr_seq_proc_interno_p::text, '') = '') and (ie_consistir_agencon_w = 'A' or ie_consistir_agencon_w = 'S')) then
    select	max(ie_classif_agenda)
    into STRICT	ie_classif_agenda_w
    from	agenda_integrada_item
    where	nr_sequencia = nr_seq_ageint_p;

    SELECT * FROM consistir_classif_agecon(cd_estabelecimento_p, cd_pessoa_fisica_p, dt_agenda_p, cd_agenda_p, cd_convenio_p, cd_procedimento_p, ie_origem_proced_p, nr_seq_proc_interno_p, ie_classif_agenda_w, nr_seq_agenda_p, ie_consist_agencons_w, ie_agecons_w) INTO STRICT ie_consist_agencons_w, ie_agecons_w;
			
    
    if (ie_agecons_w in ('N','Q')) then
	ds_erro_p := ie_consist_agencons_w;
	ie_erro_p := 'S';
        goto final;
    end if;
end if;

/*  Verifica se e permitido agendar o paciente mesmo com outro agendamento futuro */

if (coalesce(ie_permite_fut_w,'S') <> 'S') then
   ie_permite_retorno_w := verifica_horario_agend_futuro(dt_agenda_p, nr_seq_ageint_item_p, cd_pessoa_fisica_p, nm_usuario_p, cd_estabelecimento_p, ie_permite_retorno_w);

   if (coalesce(ie_permite_retorno_w,'S') = 'N') then
       	ds_erro_p := wheb_mensagem_pck.get_texto(325375);
	ie_erro_p := 'S';
        goto final;
   elsif (coalesce(ie_permite_retorno_w,'S') = 'Q') then
        ds_pergunta_p := wheb_mensagem_pck.get_texto(325374);
	ie_pergunta_p := 'S';
	goto final;
   end if;
end if;

if (coalesce(ie_encaixe_p, 'N') = 'N') then
	/* Realiza a consistencia de marcacao do usuario.*/
	ds_erro_w := ageint_consiste_usuario_marc(cd_agenda_p, dt_agenda_p, nr_minuto_duracao_p, nm_usuario_p, ds_erro_w);
	
	/* Gerar horarios agenda integrada item.*/
	SELECT * FROM gerar_horarios_ageint(trunc(dt_agenda_p,'DD'), nm_usuario_p, nr_seq_ageint_p, cd_estabelecimento_p, null, ds_hor_min_w, ds_hor_max_w, ds_hor_min_livre_w, ds_hor_max_livre_w) INTO STRICT ds_hor_min_w, ds_hor_max_w, ds_hor_min_livre_w, ds_hor_max_livre_w;

	ie_agendado_p:= coalesce(ageint_obter_se_agendado(cd_pessoa_fisica_p, nr_seq_ageint_p, nr_seq_ageint_item_p, dt_agenda_p),'S');

	if (nr_minuto_duracao_age_p IS NOT NULL AND nr_minuto_duracao_age_p::text <> '') then
		if (coalesce(nr_seq_proc_interno_p::text, '') = '') and (coalesce(cd_procedimento_p::text, '') = '') then
		    update agenda_consulta
		    set    nr_minuto_duracao  = nr_minuto_duracao_age_p
		    where  nr_sequencia       = nr_seq_agenda_p;
		else
		    update agenda_paciente
		    set    nr_minuto_duracao  = nr_minuto_duracao_age_p
		    where  nr_sequencia       = nr_seq_agenda_p;
		end if;
		
		commit;
	end if;

	SELECT * FROM atualiza_dados_marcacao(cd_agenda_p, dt_agenda_p, nr_seq_ageint_p, 'I', nr_minuto_duracao_p, nm_usuario_p, nr_seq_ageint_item_p, nr_seq_ageint_lib_p, 'N', cd_medico_p, ie_reservado_w, null, ie_principal_w) INTO STRICT ie_reservado_w, ie_principal_w;

	if (coalesce(ie_reservado_w,'S') = 'N') then
		ds_erro_p := wheb_mensagem_pck.get_texto(85639);
		ie_erro_p := 'S';
		goto final;
	end if;

	/* Consiste a duracao da marcacao */

	ds_consistencia_w := ageint_consistir_dur_marcacao(dt_agenda_p, cd_agenda_p, cd_medico_p, nm_usuario_p, nr_minuto_duracao_p, nr_seq_ageint_item_p, ds_consistencia_w);

	if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') and (ds_consistencia_w <> '') then
	
		ds_erro_p := ds_consistencia_w;
		ie_erro_p := 'S';
		goto final;
	end if;

	if (coalesce(ie_principal_w,'N') = 'S') then
	   ie_pendente_w := ageint_gerar_marcacoes_regra(nr_seq_ageint_p, nr_seq_ageint_item_p, 'I', nm_usuario_p, cd_estabelecimento_p, 'N', ie_pendente_w);
	end if;

	if (coalesce(ie_pendente_w,'N') = 'S') then
	   ds_aviso_p := wheb_mensagem_pck.get_texto(85642);
	end if;
end if;

ie_mesmo_estab_w := coalesce(verifica_estab_pac_age(nr_seq_ageint_p),'OK');

if (ie_mesmo_estab_w <> 'OK') and (ie_mesmo_estab_w <> 'N') then
    if (ie_mesmo_estab_w = 'B') then
	ds_erro_p := wheb_mensagem_pck.get_texto(854365);
	ie_erro_p := 'S';
        goto final;
    else
	ds_pergunta_p := wheb_mensagem_pck.get_texto(854364);
	ie_pergunta_p := 'S';	
    end if;

end if;

if (ie_obrig_pf_w = 'S' AND (pkg_i18n.get_user_locale <> 'de_AT')) then
    if (coalesce(cd_pessoa_fisica_p::text, '') = '') then
	ds_aviso_p := wheb_mensagem_pck.get_texto(77440);
        goto final;
    end if;
end if;

SELECT * FROM ai_confirmar_horarios_ageint(nr_seq_ageint_p, 'N', ie_forma_apresent_w, ie_check_list_w, ds_erro_w, cd_estabelecimento_p, nm_usuario_p) INTO STRICT ie_check_list_w, ds_erro_w;

if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
    ds_erro_p := ds_erro_w;
    ie_erro_p := 'S';
    goto final;
end if;

/* Verifica se a  soma do horario selecionado e a duracao do item supera o final do turno! */

if ((coalesce(ie_encaixe_p,'N') = 'N') and coalesce(ageint_obter_se_perm_ult_hor(cd_agenda_p, dt_agenda_p, nr_minuto_duracao_p, nr_seq_ageint_p, nr_seq_ageint_item_p, cd_medico_p, nm_usuario_p),'S') = 'N') then
	ds_erro_p := wheb_mensagem_pck.get_texto(85566);
	ie_erro_p := 'S';
	goto final;
end if;

if (nr_seq_lista_p IS NOT NULL AND nr_seq_lista_p::text <> '') then
    if (coalesce(nr_seq_proc_interno_p::text, '') = '') and (coalesce(cd_procedimento_p::text, '') = '') then
	update agenda_consulta
	set    nr_seq_lista_espera = nr_seq_lista_p
	where  nr_sequencia = nr_seq_agenda_p;
    else
	update agenda_paciente
	set    nr_seq_lista = nr_seq_lista_p
	where  nr_sequencia = nr_seq_agenda_p;
    end if;

    begin
		
    select count(*)
    into STRICT   qt_anexo_lista_espera_w
    from   anexo_agenda
    where  nr_seq_lista_espera = nr_seq_lista_p;

    if (qt_anexo_lista_espera_w > 0) then
        update anexo_agenda
        set    nr_seq_agenda 	= nr_seq_agenda_p
        where  nr_seq_lista_espera  = nr_seq_lista_p;		
    end if;

    exception
	when others then
	null;
    end;
			
    CALL cpoe_vincular_agenda(nr_seq_lista_p, nr_seq_agenda_p);

end if;

if (coalesce(ie_encaixe_p,'N') = 'N') then
	select count(nr_sequencia)
	into STRICT   qt_horarios_usuario_w
	from   ageint_horarios_usuario
	where  nr_seq_agenda = nr_seq_agenda_p;

	if (qt_horarios_usuario_w < 1) then
	    ds_erro_p := wheb_mensagem_pck.get_texto(84344);
	    ie_erro_p := 'S';
	    goto final;
	end if;
end if;

<<final>>

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE valida_marc_mult_schedule ( nr_seq_ageint_p bigint, nr_seq_ageint_item_p bigint, nr_seq_ageint_lib_p bigint, nr_seq_agenda_p bigint, dt_agenda_p timestamp, cd_agenda_p bigint, nr_minuto_duracao_p bigint, cd_pessoa_fisica_p text, cd_convenio_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, cd_medico_p text, cd_procedimento_p bigint default null, nr_seq_proc_interno_p bigint default null, ie_origem_proced_p text DEFAULT NULL, ds_erro_p INOUT text DEFAULT NULL, ie_erro_p INOUT text DEFAULT NULL, ie_agendado_p INOUT text DEFAULT NULL, ie_pergunta_p INOUT text DEFAULT NULL, ds_pergunta_p INOUT text DEFAULT NULL, ds_aviso_p INOUT text DEFAULT NULL, nr_seq_lista_p bigint default null, ie_encaixe_p text default 'N', nr_minuto_duracao_age_p bigint default null) FROM PUBLIC;

