-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ehr_registrar_sv ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE


			

nm_tabela_w		varchar(50);
nm_atributo_w		varchar(50);
dt_sinal_vital_w	timestamp;
dt_liberacao_w		timestamp;
nr_seq_sinal_vital_w	bigint;
nr_atendimento_w	bigint;
cd_pessoa_fisica_w	varchar(10);
cd_profissional_w	varchar(10);
vl_resultado_w		double precision;
dt_resultado_w   	timestamp;
ds_resultado_w		varchar(4000);	
ie_tipo_atributo_w	varchar(50);	
cd_paciente_w		varchar(10);
nr_sequencia_w		bigint;
ie_sepse_lib_sv_w	varchar(1);
nr_regras_atendidas_w	varchar(2000);
nr_seq_temp_cluster_w	bigint;
nr_seq_reg_template_w	bigint;
nr_seq_temp_conteudo_w	bigint;
vl_atributo_update_w	varchar(4000);
nr_seq_monit_w		bigint;
nm_coluna_w		varchar(20);
ie_todos_registros_cluster_w	varchar(1);

C03_w			integer;
ds_comando_C03_w		varchar(255);
nr_registro_cluster_w	bigint;
retorno_C03_w		integer;

C05_w			integer;
ds_comando_C05_w		varchar(255);
ds_C05_w			varchar(4000);
dt_C05_w			timestamp;
vl_C05_w			double precision;
retorno_C05_w		integer;
			
c01 CURSOR FOR
	SELECT	d.nm_tabela,
		d.nm_atributo,
		c.vl_resultado,
		c.dt_resultado,
		c.ds_resultado,
		c.nr_sequencia
	from	ehr_registro a,
		ehr_reg_template b,
		ehr_reg_elemento c,
		ehr_template_cont_atrib d
	where	a.nr_sequencia	= b.nr_seq_reg
	and	a.nr_sequencia	= nr_sequencia_p
	and	b.nr_sequencia	= c.nr_seq_reg_template
	and	c.nr_seq_temp_conteudo	= d.nr_seq_temp_conteudo
	and ((c.ds_resultado IS NOT NULL AND c.ds_resultado::text <> '') or
			(c.dt_resultado IS NOT NULL AND c.dt_resultado::text <> '') or
			(c.vl_resultado IS NOT NULL AND c.vl_resultado::text <> ''))
	and	((coalesce(ie_todos_registros_cluster_w,'N') = 'S' and coalesce(c.nr_registro_cluster::text, '') = '') or (coalesce(ie_todos_registros_cluster_w,'N') <> 'S'));

C02 CURSOR FOR
	SELECT	a.nr_seq_template_cluster,
		b.nr_sequencia nr_seq_reg_template
	from	ehr_template_conteudo_v a,
		ehr_reg_template b
	where	a.nr_seq_template = b.nr_seq_template
	and	b.nr_seq_reg = nr_sequencia_p
	and	a.nr_seq_elemento = 308
	and	coalesce(a.ie_situacao,'A') = 'A'
	order by	a.nr_seq_apres;

C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		b.nm_tabela,
		b.nm_atributo
	from	ehr_template_conteudo a,
		ehr_template_cont_atrib b
	where	a.nr_sequencia = b.nr_seq_temp_conteudo
	and	a.nr_seq_template = nr_seq_temp_cluster_w
	and	coalesce(a.ie_situacao,'A') = 'A';

procedure popular_registro(
	nm_tabela_p		text,
	nr_atendimento_p		bigint,
	dt_sinal_vital_p		timestamp,
	cd_profissional_p		text,
	dt_liberacao_p		timestamp,
	cd_paciente_p		text,
	nr_seq_reg_elemento_p	bigint,
	dt_resultado_p		timestamp,
	vl_resultado_p		bigint,
	ds_resultado_p		text,
	nm_atributo_p		text) is

ds_comando_w		varchar(2000);


BEGIN
if (nm_tabela_p = 'ATENDIMENTO_SINAL_VITAL') then
	begin
	if (coalesce(nr_seq_sinal_vital_w::text, '') = '') then
		begin
		select	nextval('atendimento_sinal_vital_seq')
		into STRICT	nr_seq_sinal_vital_w
		;

		insert into atendimento_sinal_vital(
			nr_sequencia,
			nr_atendimento,
			dt_sinal_vital,
			dt_atualizacao,
			nm_usuario,
			ie_pressao,
			cd_pessoa_fisica,
			dt_liberacao,
			ie_situacao,
			cd_paciente,
			nr_seq_reg_elemento,
			nr_seq_reg_registro)
		values (
			nr_seq_sinal_vital_w,
			nr_atendimento_p,
			dt_sinal_vital_p,
			clock_timestamp(),
			nm_usuario_p,
			'D',
			cd_profissional_p,
			dt_liberacao_p,
			'A',
			cd_paciente_p,
			nr_seq_reg_elemento_p,
			nr_sequencia_p);
		end;
	end if;

	if (nr_seq_sinal_vital_w IS NOT NULL AND nr_seq_sinal_vital_w::text <> '') then
		begin
		vl_atributo_update_w := null;

		if (dt_resultado_p IS NOT NULL AND dt_resultado_p::text <> '') then
			vl_atributo_update_w	:= to_char(dt_resultado_p,'dd/mm/yyyy hh24:mi:ss');
		elsif (vl_resultado_p IS NOT NULL AND vl_resultado_p::text <> '') then
			vl_atributo_update_w	:= vl_resultado_p;
		elsif (ds_resultado_p IS NOT NULL AND ds_resultado_p::text <> '') then
			vl_atributo_update_w	:= ds_resultado_p;
		end if;

		if (vl_atributo_update_w IS NOT NULL AND vl_atributo_update_w::text <> '')  then
			begin
			ds_comando_w :=	'update atendimento_sinal_vital set ' || nm_atributo_p || ' = :'||nm_atributo_p||' ' ||
					' where nr_sequencia = :nr_sequencia ';
			CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_w)||';'||nm_atributo_p||'=' ||vl_atributo_update_w);
			end;
		end if;
		end;
	end if;
	end;
elsif (nm_tabela_p	= 'ATENDIMENTO_MONIT_RESP') then
	begin
	if (coalesce(nr_seq_monit_w::text, '') = '') then
		begin
		select	nextval('atendimento_monit_resp_seq')
		into STRICT	nr_seq_monit_w
		;

		insert into ATENDIMENTO_MONIT_RESP(
			nr_sequencia,
			nr_atendimento,
			DT_MONITORIZACAO,
			dt_atualizacao,
			nm_usuario,
			cd_pessoa_fisica,
			dt_liberacao,
			ie_situacao,
			nr_seq_reg_elemento,
			nr_seq_reg_registro)
		values (
			nr_seq_monit_w,
			nr_atendimento_p,
			dt_sinal_vital_p,
			clock_timestamp(),
			nm_usuario_p,
			cd_profissional_p,
			dt_liberacao_p,
			'A',
			nr_seq_reg_elemento_p,
			nr_sequencia_p);
		end;
	end if;

	if (nr_seq_monit_w IS NOT NULL AND nr_seq_monit_w::text <> '') then
		begin
		vl_atributo_update_w := null;

		if (dt_resultado_p IS NOT NULL AND dt_resultado_p::text <> '') then
			vl_atributo_update_w	:= to_char(dt_resultado_p,'dd/mm/yyyy hh24:mi:ss');
		elsif (vl_resultado_p IS NOT NULL AND vl_resultado_p::text <> '') then
			vl_atributo_update_w	:= vl_resultado_p;
		elsif (ds_resultado_p IS NOT NULL AND ds_resultado_p::text <> '') then
			vl_atributo_update_w	:= ds_resultado_p;
		end if;
		
		if (vl_atributo_update_w IS NOT NULL AND vl_atributo_update_w::text <> '') then
			begin
			ds_comando_w :=	'update ATENDIMENTO_MONIT_RESP set ' || nm_atributo_p || ' = :'||nm_atributo_p||' ' ||
					' where nr_sequencia = :nr_sequencia ';
			CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_monit_w)||';'||nm_atributo_p||'=' ||vl_atributo_update_w);

			RAISE NOTICE '%', ds_comando_w;
			RAISE NOTICE '%', vl_atributo_update_w;
			RAISE NOTICE '%', nr_seq_monit_w;
			end;
		end if;
		end;
	end if;
	end;
end if;
end;

begin

begin
select	max(coalesce(ie_sepse_lib_sv,'N')),
	max(coalesce(ie_todos_sv_temp,'N'))
into STRICT	ie_sepse_lib_sv_w,
	ie_todos_registros_cluster_w
from	parametro_medico
where	cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

select	nr_atendimento,
	DT_REGISTRO,
	dt_liberacao,
	CD_PROFISSIONAL,
	cd_paciente
into STRICT	nr_atendimento_w,
	dt_sinal_vital_w,
	dt_liberacao_w,
	CD_PROFISSIONAL_w,
	cd_paciente_w
from	ehr_registro
where	nr_sequencia = nr_sequencia_p;

open C01;
loop
fetch C01 into
	nm_tabela_w,
	nm_atributo_w,
	vl_resultado_w,
	dt_resultado_w,
	ds_resultado_w,
	nr_sequencia_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	popular_registro(nm_tabela_w,nr_atendimento_w,dt_sinal_vital_w,cd_profissional_w,dt_liberacao_w,cd_paciente_w,nr_sequencia_w,dt_resultado_w,vl_resultado_w,ds_resultado_w,nm_atributo_w);
	end;
end loop;
close C01;

if (ie_sepse_lib_sv_w = 'S') and (coalesce(nr_seq_sinal_vital_w,0)  > 0) and (coalesce(nr_atendimento_w,0) > 0) then
	CALL gerar_escala_sepse(nr_atendimento_w, cd_profissional_w, nr_seq_sinal_vital_w, nm_usuario_p);
end if;

if (coalesce(nr_seq_sinal_vital_w,0)  > 0) then
	nr_regras_atendidas_w := GQA_Liberacao_Sinal_Vital(nr_seq_sinal_vital_w, nm_usuario_p);
end if;
CALL gera_protocolo_assistencial(nr_atendimento_w, nm_usuario_p);

if (ie_todos_registros_cluster_w = 'S') then
	begin
	nr_seq_sinal_vital_w := null;
	nr_seq_monit_w := null;

	open C02;
	loop
	fetch C02 into
		nr_seq_temp_cluster_w,
		nr_seq_reg_template_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		ds_comando_C03_w := 'select nr_registro_cluster from EHR_CLUSTER_' || nr_seq_temp_cluster_w || ' where nr_seq_reg_template = ' || nr_seq_reg_template_w || ' order by nr_registro_cluster ';

		C03_w := DBMS_SQL.OPEN_CURSOR;
		DBMS_SQL.PARSE(C03_w, ds_comando_C03_w, DBMS_SQL.NATIVE);
		DBMS_SQL.DEFINE_COLUMN(C03_w,1,nr_registro_cluster_w);
		retorno_C03_w := DBMS_SQL.execute(C03_w);

		while(DBMS_SQL.FETCH_ROWS(C03_w) > 0) loop
			begin
			DBMS_SQL.COLUMN_VALUE(C03_w,1,nr_registro_cluster_w);

			nr_seq_sinal_vital_w := null;
			nr_seq_monit_w := null;

			open C04;
			loop
			fetch C04 into
				nr_seq_temp_conteudo_w,
				nm_tabela_w,
				nm_atributo_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin

				ds_C05_w := null;
				dt_C05_w := null;
				vl_C05_w := null;

				select	a.column_name
				into STRICT	nm_coluna_w
				from	user_tab_columns a
				where	a.table_name = 'EHR_CLUSTER_' || nr_seq_temp_cluster_w
				and	a.column_name like '%' || nr_seq_temp_conteudo_w;

				ds_comando_C05_w :=
					' select	' || nm_coluna_w ||
					' from	EHR_CLUSTER_' || nr_seq_temp_cluster_w ||
					' where	nr_seq_reg_template = ' || nr_seq_reg_template_w ||
					' and	nr_registro_cluster = ' || nr_registro_cluster_w;

				C05_w := DBMS_SQL.OPEN_CURSOR;
				DBMS_SQL.PARSE(C05_w, ds_comando_C05_w, DBMS_SQL.NATIVE);

				if (substr(nm_coluna_w,1,3) = 'DS_') then
					begin
					DBMS_SQL.DEFINE_COLUMN(C05_w,1,ds_C05_w,4000);
					retorno_C05_w := DBMS_SQL.execute(C05_w);

					while(DBMS_SQL.FETCH_ROWS(C05_w) > 0) loop
						begin
						DBMS_SQL.COLUMN_VALUE(C05_w,1,ds_C05_w);
						end;
					end loop;
					end;
				elsif (substr(nm_coluna_w,1,3) = 'DT_') then
					begin
					DBMS_SQL.DEFINE_COLUMN(C05_w,1,dt_C05_w);
					retorno_C05_w := DBMS_SQL.execute(C05_w);

					while(DBMS_SQL.FETCH_ROWS(C05_w) > 0) loop
						begin
						DBMS_SQL.COLUMN_VALUE(C05_w,1,dt_C05_w);
						end;
					end loop;
					end;
				elsif (substr(nm_coluna_w,1,3) = 'VL_') then
					begin
					DBMS_SQL.DEFINE_COLUMN(C05_w,1,vl_C05_w);
					retorno_C05_w := DBMS_SQL.execute(C05_w);

					while(DBMS_SQL.FETCH_ROWS(C05_w) > 0) loop
						begin
						DBMS_SQL.COLUMN_VALUE(C05_w,1,vl_C05_w);
						end;
					end loop;
					end;
				end if;

				DBMS_SQL.CLOSE_CURSOR(C05_w);

				popular_registro(nm_tabela_w,nr_atendimento_w,dt_sinal_vital_w,cd_profissional_w,dt_liberacao_w,cd_paciente_w,null,dt_C05_w,vl_C05_w,ds_C05_w,nm_atributo_w);
				end;
			end loop;
			close C04;
			end;

			if (ie_sepse_lib_sv_w = 'S') and (coalesce(nr_seq_sinal_vital_w,0)  > 0) and (coalesce(nr_atendimento_w,0) > 0) then
				CALL gerar_escala_sepse(nr_atendimento_w, cd_profissional_w, nr_seq_sinal_vital_w, nm_usuario_p);
			end if;

			nr_regras_atendidas_w := GQA_Liberacao_Sinal_Vital(nr_seq_sinal_vital_w, nm_usuario_p);
			CALL gera_protocolo_assistencial(nr_atendimento_w, nm_usuario_p);
		end loop;
		DBMS_SQL.CLOSE_CURSOR(C03_w);
		end;
	end loop;
	close C02;
	end;
end if;

exception
	when others then
		null;
end;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ehr_registrar_sv ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

