-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_tit_pagar_contrato ( dt_vencimento_p timestamp, qt_titulo_p bigint, nr_seq_regra_p bigint, nr_seq_contrato_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, dt_contabil_p timestamp, ie_gerar_tributo_p text, vl_ir_p bigint, vl_inss_p bigint, vl_iss_p bigint) AS $body$
DECLARE



ie_forma_pagto_w			varchar(255);
cd_pessoa_contratado_w		varchar(255);
cd_cgc_contratado_w		varchar(255);
vl_total_w			double precision;
tx_desc_antecipacao_w		double precision;
vl_titulo_w			double precision;
nr_seq_trans_fin_baixa_w		bigint;
qt_titulo_w			bigint;
nr_total_parcelas_w	bigint;
nr_parcelas_w 		bigint;
qt_meses_w			bigint := 0;
qt_dias_w			bigint := 0;
nr_titulo_w			bigint;
cd_conta_financ_w			bigint;
nr_seq_classif_w			bigint;
cd_estab_financeiro_w		bigint;
ie_origem_w			varchar(255);
nr_seq_trans_financ_w		bigint;
dt_emissao_w			timestamp;
dt_inicio_vigencia_w		timestamp;
dt_venc_atual_w			timestamp;
dt_final_vigencia_w			timestamp;
dt_contabil_w			timestamp;
ie_centro_contrato_w		varchar(255);
cd_centro_custo_w			bigint;
pr_alocacao_w			double precision;
vl_total_rateio_w			double precision;
vl_rateio_w			double precision;
cd_conta_contabil_w		varchar(255);
ds_erro_w			varchar(4000);
nr_seq_crit_rateio_w		bigint;
cd_centro_rateio_w			bigint;
cd_conta_contabil_rateio_w		varchar(20);
cd_conta_financ_rateio_w		bigint;
ie_data_contabil_w			varchar(20);
dt_contabil_venc_w		timestamp;
dt_contabil_venc_ww		timestamp;
ie_tipo_titulo_w			varchar(2);
nr_seq_classe_w			bigint;
cd_tipo_juros_w			bigint;
tx_juros_w			bigint;
cd_tipo_multa_w			bigint;
tx_multa_w			bigint;
ie_periodo_variavel_w		varchar(1);
qt_periodo_variavel_w		integer;
ie_gerar_adiantamento_w		varchar(1);
cd_moeda_padrao_w		parametros_contas_pagar.cd_moeda_padrao%type;
nr_adiantamento_pago_w		adiantamento_pago.nr_adiantamento%type;
nr_seq_trans_adiant_w		parametros_contas_pagar.nr_seq_trans_adiant%type;
dt_ultimo_dia_mes_ant_w		timestamp;
vl_ir_w			contrato_regra_pagto.vl_ir%type;
vl_inss_w		contrato_regra_pagto.vl_inss%type;
vl_iss_w		contrato_regra_pagto.vl_iss%type;

c01 CURSOR FOR
SELECT	a.cd_centro_custo,
	a.pr_alocacao
from	contrato_centro_custo a
where	a.nr_seq_contrato	= nr_seq_contrato_p
and	((coalesce(a.dt_inicio_vigencia::text, '') = '') or (coalesce(a.dt_fim_vigencia::text, '') = '') or (PKG_DATE_UTILS.start_of(clock_timestamp(),'dd',0) between PKG_DATE_UTILS.start_of(a.dt_inicio_vigencia,'dd',0) and PKG_DATE_UTILS.start_of(a.dt_fim_vigencia,'dd',0)));


c02 CURSOR FOR
SELECT	a.cd_centro_custo,
	a.cd_conta_contabil,
	a.cd_conta_financ,
	a.pr_rateio
from	ctb_criterio_rateio_item a,
	ctb_criterio_rateio b
where	b.nr_sequencia	= a.nr_seq_criterio
and	b.nr_sequencia	= nr_seq_crit_rateio_w;



BEGIN

dt_venc_atual_w := dt_vencimento_p;
qt_titulo_w	:= coalesce(qt_titulo_p,0);
nr_total_parcelas_w := qt_titulo_w;

ie_data_contabil_w := obter_param_usuario(1200, 57, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_data_contabil_w);
ie_gerar_adiantamento_w := obter_param_usuario(1200, 144, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_adiantamento_w);

dt_contabil_w			:= coalesce(dt_contabil_p,PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.END_OF(dt_venc_atual_w, 'MONTH', 0),'dd',0));
dt_contabil_venc_w		:= coalesce(dt_contabil_p,PKG_DATE_UTILS.start_of(dt_venc_atual_w,'dd',0));
dt_ultimo_dia_mes_ant_w		:= PKG_DATE_UTILS.start_of(PKG_DATE_UTILS.END_OF(PKG_DATE_UTILS.ADD_MONTH(dt_venc_atual_w,-1, 0), 'MONTH', 0),'dd',0);
vl_total_rateio_w		:= 0;
vl_rateio_w			:= 0;

dt_contabil_venc_ww := dt_contabil_venc_w;

select 	ie_forma,
	coalesce(vl_pagto,0),
	cd_conta_financ,
	dt_inicio_vigencia,
	dt_final_vigencia,
	nr_seq_trans_financ,
	coalesce(ie_centro_contrato,'N'),
	coalesce(tx_desc_antecipacao, 0),
	nr_seq_trans_fin_baixa,
	cd_conta_contabil,
	nr_seq_crit_rateio,
	coalesce(ie_tipo_titulo,1),
	nr_seq_classe,
	coalesce(CD_TIPO_TAXA_JURO,2),
	coalesce(TX_JUROS,0),
	coalesce(CD_TIPO_TAXA_MULTA,2),
	coalesce(TX_MULTA,0),
	coalesce(ie_periodo_variavel,'D'),
	coalesce(qt_periodo_variavel,0)
into STRICT 	ie_forma_pagto_w,
	vl_total_w,
	cd_conta_financ_w,
	dt_inicio_vigencia_w,
	dt_final_vigencia_w,
	nr_seq_trans_financ_w,
	ie_centro_contrato_w,
	tx_desc_antecipacao_w,
	nr_seq_trans_fin_baixa_w,
	cd_conta_contabil_w,
	nr_seq_crit_rateio_w,
	ie_tipo_titulo_w,
	nr_seq_classe_w,
	cd_tipo_juros_w,
	tx_juros_w,
	cd_tipo_multa_w,
	tx_multa_w,
	ie_periodo_variavel_w,
	qt_periodo_variavel_w
from 	contrato_regra_pagto
where	nr_sequencia	= nr_seq_regra_p;

if (vl_total_w = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(351780);	
	/*Para a geraçao do título, o valor da regra deve ser maior que zero.*/

end if;

if (dt_inicio_vigencia_w IS NOT NULL AND dt_inicio_vigencia_w::text <> '') and (dt_final_vigencia_w IS NOT NULL AND dt_final_vigencia_w::text <> '') and
	((trunc(dividir(Obter_Dias_Entre_Datas(dt_inicio_vigencia_w, dt_final_vigencia_w),30)) + 1) < qt_titulo_p) then
	/*(-20011,'A quantidade de parcelas supera a quantidade de meses da vigência da regra.');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(177833);
end if;

CALL gerenciamento_contrato_pck.consistir_tit_pagar_contrato(nr_seq_contrato_p, 0, qt_titulo_p * vl_total_w, nm_usuario_p, 'N');

select	cd_pessoa_contratada,
	cd_cgc_contratado
into STRICT	cd_pessoa_contratado_w,
	cd_cgc_contratado_w
from	contrato
where	nr_sequencia	= nr_seq_contrato_p;

if (cd_pessoa_contratado_w IS NOT NULL AND cd_pessoa_contratado_w::text <> '') and (cd_cgc_contratado_w IS NOT NULL AND cd_cgc_contratado_w::text <> '') then
	cd_pessoa_contratado_w := null;
end if;

if (ie_forma_pagto_w = 'A') then
	qt_meses_w	:= 12;
elsif (ie_forma_pagto_w = 'B') then
	qt_meses_w	:= 2;
elsif (ie_forma_pagto_w = 'M') then
	qt_meses_w	:= 1;
elsif (ie_forma_pagto_w = 'T') then
	qt_meses_w	:= 3;
elsif (ie_forma_pagto_w = 'F') then
	qt_meses_w	:= 0;
elsif (ie_forma_pagto_w = 'R') then /* Semestral */
	qt_meses_w	:= 6;
elsif (ie_forma_pagto_w = 'Q') then
	qt_dias_w	:= 15;
elsif (ie_forma_pagto_w = 'S') then
	qt_dias_w	:= 7;
elsif (ie_forma_pagto_w = 'V') then
	begin

	if (ie_periodo_variavel_w = 'M') then
		qt_meses_w	:= qt_periodo_variavel_w;
	else
		qt_dias_w	:= qt_periodo_variavel_w;
	end if;

	end;
end if;

select	coalesce(cd_estab_financeiro, cd_estabelecimento)
into STRICT	cd_estab_financeiro_w
from	estabelecimento
where	cd_estabelecimento	= cd_estabelecimento_p;

select	coalesce(max(ie_origem_tit_contrato),'9'),
	max(cd_moeda_padrao),
	max(nr_seq_trans_adiant)
into STRICT	ie_origem_w,
	cd_moeda_padrao_w,
	nr_seq_trans_adiant_w
from	PARAMETROS_CONTAS_PAGAR
where	cd_estabelecimento	= cd_estabelecimento_p;

if (coalesce(cd_moeda_padrao_w::text, '') = '') then
        -- Nao foi encontranda a moeda padrao para o estabelecimento. Por favor verifique nos Parâmetros do contas a pagar.
	CALL wheb_mensagem_pck.exibir_mensagem_abort(270758);
end if;

while(qt_titulo_w > 0) loop
	begin
	
	nr_parcelas_w := coalesce(nr_parcelas_w,0) + 1;
	
	select	nextval('titulo_pagar_seq')
	into STRICT	nr_titulo_w
	;
	
	begin
	insert into titulo_pagar(nr_titulo,
			cd_estabelecimento,
			dt_atualizacao,
			nm_usuario,
			dt_contabil,
			dt_emissao,
			dt_vencimento_original,
			dt_vencimento_atual,
			vl_titulo,
			vl_saldo_titulo,
			vl_saldo_juros,
			vl_saldo_multa,
			cd_moeda,
			tx_juros,
			tx_multa,
			cd_tipo_taxa_juro,
			cd_tipo_taxa_multa,
			tx_desc_antecipacao,
			ie_situacao,
			ie_origem_titulo,
			ie_tipo_titulo,
			cd_pessoa_fisica,
			cd_cgc,
			nr_seq_contrato,
			cd_estab_financeiro,
			nr_seq_trans_fin_contab,
			nm_usuario_orig,
			dt_inclusao,
			nr_seq_trans_fin_baixa,
			ds_observacao_titulo,
			nr_seq_classe,
			nr_parcelas,
			nr_total_parcelas)
		values (	nr_titulo_w,
			cd_estabelecimento_p,
			clock_timestamp(),
			nm_usuario_p,
			CASE WHEN ie_data_contabil_w='S' THEN dt_contabil_venc_w WHEN ie_data_contabil_w='A' THEN dt_ultimo_dia_mes_ant_w  ELSE dt_contabil_w END ,
			clock_timestamp(),
			dt_venc_atual_w,
			dt_venc_atual_w,
			vl_total_w,
			vl_total_w,
			0,
			0,
			cd_moeda_padrao_w,
			tx_juros_w,
			tx_multa_w,
			cd_tipo_juros_w,
			cd_tipo_multa_w,
			tx_desc_antecipacao_w,
			'A',
			ie_origem_w,
			ie_tipo_titulo_w,
			cd_pessoa_contratado_w,
			cd_cgc_contratado_w,
			nr_seq_contrato_p,
			cd_estab_financeiro_w,
			nr_seq_trans_financ_w,
			nm_usuario_p,
			clock_timestamp(),
			nr_seq_trans_fin_baixa_w,
			substr(wheb_mensagem_pck.get_texto(312555,'NR_SEQ_CONTRATO=' || nr_seq_contrato_p),1,255),
			nr_seq_classe_w,
			nr_parcelas_w,
			nr_total_parcelas_w);
			
		CALL ATUALIZAR_INCLUSAO_TIT_PAGAR(nr_titulo_w, nm_usuario_p);
		
	exception when others then
		
		select	CASE WHEN ie_data_contabil_w='S' THEN dt_contabil_venc_w WHEN ie_data_contabil_w='A' THEN dt_ultimo_dia_mes_ant_w  ELSE dt_contabil_w END
		into STRICT	dt_emissao_w
		;
		ds_erro_w	:= sqlerrm(SQLSTATE);
		
		/*(-20011,'Erro ao gerar o título a pagar com vencimento em: ' || dt_venc_atual_w || chr(13) || chr(10) || 'Emissao: ' || dt_emissao_w || chr(13) || chr(10) || ds_erro_w);*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(177844,
							'DT_VENC_ATUAL_W='||dt_venc_atual_w||';'||
							'DT_EMISSAO_W='||dt_emissao_w||';'||
							'DS_ERRO_VALOR_W='||ds_erro_w);
	end;

	if (cd_conta_financ_w IS NOT NULL AND cd_conta_financ_w::text <> '') and (coalesce(nr_seq_crit_rateio_w::text, '') = '') and (ie_centro_contrato_w = 'N') then
				
		select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_seq_classif_w
		from	titulo_pagar_classif
		where	nr_titulo = nr_titulo_w;	
	
		insert into titulo_pagar_classif(
			cd_centro_custo,
			nr_seq_conta_financ,
			nr_contrato,
			dt_atualizacao,
			nm_usuario,
			nr_sequencia,
			nr_titulo,
			vl_titulo,
			vl_desconto,
			vl_original,
			cd_conta_contabil)
		values (	null,
			cd_conta_financ_w,
			nr_seq_contrato_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_classif_w,
			nr_titulo_w,
			vl_total_w,
			0,
			0,
			cd_conta_contabil_w);
	end if;

	if (ie_centro_contrato_w = 'S') and (coalesce(nr_seq_crit_rateio_w::text, '') = '') then
		
		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_classif_w
		from	titulo_pagar_classif
		where	nr_titulo = nr_titulo_w;

		vl_total_rateio_w			:= 0;
		open C01;
		loop
		fetch C01 into	
			cd_centro_custo_w,
			pr_alocacao_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin


			vl_rateio_w	:= round(vl_total_w * (pr_alocacao_w / 100),2);
			vl_total_rateio_w	:= vl_total_rateio_w + vl_rateio_w;
			nr_seq_classif_w	:= nr_seq_classif_w + 1;

			
			insert into titulo_pagar_classif(
				nr_titulo,
				nr_sequencia,
				cd_centro_custo,
				nr_seq_conta_financ,
				nr_contrato,
				dt_atualizacao,
				nm_usuario,
				vl_titulo,
				vl_desconto,
				vl_original,
				cd_conta_contabil)
			values (	nr_titulo_w,
				nr_seq_classif_w,
				cd_centro_custo_w,
				cd_conta_financ_w,
				nr_seq_contrato_p,
				clock_timestamp(),
				nm_usuario_p,
				vl_rateio_w,
				0,
				0,
				cd_conta_contabil_w);
			end;
		end loop;
		close C01;


		if (vl_total_rateio_w <> 0) then
			begin
			select	vl_titulo
			into STRICT	vl_titulo_w
			from	titulo_pagar
			where	nr_titulo	= nr_titulo_w;


			update	titulo_pagar_classif
			set	vl_titulo		= vl_titulo + vl_titulo_w - vl_total_rateio_w
			where	nr_titulo		= nr_titulo_w
			and	nr_sequencia	= nr_seq_classif_w;
			
			end;
		end if;
	end if;
	
	if (nr_seq_crit_rateio_w IS NOT NULL AND nr_seq_crit_rateio_w::text <> '') then
		begin
		
		vl_total_rateio_w	:= 0;
		
		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_classif_w
		from	titulo_pagar_classif
		where	nr_titulo = nr_titulo_w;
				
		open C02;
		loop
		fetch C02 into	
			cd_centro_rateio_w,
			cd_conta_contabil_rateio_w,
			cd_conta_financ_rateio_w,
			pr_alocacao_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			
			vl_rateio_w	:= round(vl_total_w * (pr_alocacao_w / 100),2);
			vl_total_rateio_w	:= vl_total_rateio_w + vl_rateio_w;
			nr_seq_classif_w	:= nr_seq_classif_w + 1;

			
			insert into titulo_pagar_classif(
				nr_titulo,
				nr_sequencia,
				cd_centro_custo,
				nr_seq_conta_financ,
				nr_contrato,
				dt_atualizacao,
				nm_usuario,
				vl_titulo,
				vl_desconto,
				vl_original,
				cd_conta_contabil)
			values (	nr_titulo_w,
				nr_seq_classif_w,
				cd_centro_rateio_w,
				cd_conta_financ_rateio_w,
				nr_seq_contrato_p,
				clock_timestamp(),
				nm_usuario_p,
				vl_rateio_w,
				0,
				0,
				cd_conta_contabil_rateio_w);
				
			end;
		end loop;
		close C02;
		
		if (vl_total_rateio_w <> 0) then
			begin
			select	vl_titulo
			into STRICT	vl_titulo_w
			from	titulo_pagar
			where	nr_titulo	= nr_titulo_w;

			update	titulo_pagar_classif
			set	vl_titulo		= vl_titulo + vl_titulo_w - vl_total_rateio_w
			where	nr_titulo		= nr_titulo_w
			and	nr_sequencia	= nr_seq_classif_w;
			
			end;
		end if;
		
		end;
	end if;
	
	if (qt_meses_w > 0) then
		if ((to_char(PKG_DATE_UTILS.ADD_MONTH(dt_venc_atual_w,qt_meses_w,0), 'dd'))::numeric  >= (to_char(dt_vencimento_p, 'dd'))::numeric ) then
			select	to_date(to_char(dt_vencimento_p, 'dd') || '/' || to_char(PKG_DATE_UTILS.ADD_MONTH(dt_venc_atual_w,qt_meses_w,0), 'mm/yyyy'), 'dd/mm/yyyy')
			into STRICT	dt_venc_atual_w
			;
		else
			select	last_day(PKG_DATE_UTILS.ADD_MONTH(dt_venc_atual_w,qt_meses_w,0))
			into STRICT	dt_venc_atual_w
			;
		end if;
	elsif (qt_dias_w > 0) then
		select	dt_venc_atual_w + qt_dias_w
		into STRICT	dt_venc_atual_w
		;
	end if;

	if (coalesce(ie_data_contabil_w,'N') = 'S') then

		if (qt_meses_w > 0) then
			if ((to_char(PKG_DATE_UTILS.ADD_MONTH(dt_contabil_venc_w,qt_meses_w,0), 'dd'))::numeric  >= (to_char(dt_contabil_venc_ww, 'dd'))::numeric ) then
				select	to_date(to_char(dt_contabil_venc_ww, 'dd') || '/' || to_char(PKG_DATE_UTILS.ADD_MONTH(dt_contabil_venc_w,qt_meses_w,0), 'mm/yyyy'), 'dd/mm/yyyy')
				into STRICT	dt_contabil_venc_w
				;
			else
				select	last_day(PKG_DATE_UTILS.ADD_MONTH(dt_contabil_venc_w,qt_meses_w,0))
				into STRICT	dt_contabil_venc_w
				;
			end if;
		elsif (qt_dias_w > 0) then
			select	dt_contabil_venc_w + qt_dias_w
			into STRICT	dt_contabil_venc_w
			;
		end if;

	end if;
	
	if (coalesce(ie_data_contabil_w,'N') = 'A') then

		if (qt_meses_w > 0) then
			select	PKG_DATE_UTILS.ADD_MONTH(dt_ultimo_dia_mes_ant_w, qt_meses_w, 0)
			into STRICT	dt_ultimo_dia_mes_ant_w
			;
		elsif (qt_dias_w > 0) then
			select	dt_ultimo_dia_mes_ant_w + qt_dias_w
			into STRICT	dt_ultimo_dia_mes_ant_w
			;
		end if;

	end if;
	
	if (coalesce(ie_data_contabil_w,'N') = 'N') then

		if (qt_meses_w > 0) then
			select	PKG_DATE_UTILS.ADD_MONTH(dt_contabil_w, qt_meses_w, 0)
			into STRICT	dt_contabil_w
			;
		elsif (qt_dias_w > 0) then
			select	dt_contabil_w + qt_dias_w
			into STRICT	dt_contabil_w
			;
		end if;

	end if;

	qt_titulo_w := (qt_titulo_w - 1);
	
	if ( coalesce(ie_gerar_tributo_p,'N') = 'S') then
		
		select	sum(a.vl_ir), /*Tratei aqui para buscar os valores  dos tributos do contrato e nao mais considerar os parametros de entrada dessa rotina com esses tributos*/
				sum(a.vl_inss),
				sum(a.vl_iss)
		into STRICT	vl_ir_w,
				vl_inss_w,
				vl_iss_w
		from	contrato_regra_pagto a
		where	a.nr_sequencia		= nr_seq_regra_p
		and		a.nr_seq_contrato	= nr_seq_contrato_p;

		if (coalesce(vl_ir_w,0) = 0) and (coalesce(vl_inss_w,0) = 0) and (coalesce(vl_iss_w,0) = 0) then
			CALL gerar_tributo_titulo(nr_titulo_w,nm_usuario_p,'N',null,null,null,null,null,cd_estabelecimento_p,null);
		else
			CALL gerar_trib_titulo_contrato(nr_titulo_w,nm_usuario_p,'N',null,null,null,null,null,cd_estabelecimento_p,null,vl_ir_w,vl_inss_w,vl_iss_w);
		end if;
		
	end if;
	
	if (coalesce(ie_gerar_adiantamento_w,'N') = 'S') and (coalesce(ie_tipo_titulo_w,'1') = '5') then --AAMFIRMO OS 664763 em 23/11/2013.
	
		select	nextval('adiantamento_pago_seq')
		into STRICT	nr_adiantamento_pago_w
		;

		if (coalesce(nr_adiantamento_pago_w,0) <> 0) then
		
			insert into adiantamento_pago( cd_banco,
							cd_cgc,               
							cd_estabelecimento,     
							cd_moeda,                
							cd_pessoa_fisica,        
							ds_observacao,           
							dt_adiantamento,         
							dt_atualizacao,          
							dt_baixa,                
							dt_liberacao,            
							dt_prev_devolucao,       
							nm_usuario,              
							nm_usuario_lib,          
							nr_adiantamento,         
							nr_adiant_original,      
							nr_lote_contabil,        
							nr_seq_conta_banco,      
							nr_seq_distribuicao,     
							nr_seq_nf,               
							nr_seq_ordem_servico,
							nr_seq_tipo,             
							nr_seq_trans_fin,        
							nr_titulo_original,      
							vl_adiantamento,         
							vl_saldo)
						values ( null,
							cd_cgc_contratado_w,
							cd_estabelecimento_p,
							cd_moeda_padrao_w,
							cd_pessoa_contratado_w,
							substr(wheb_mensagem_pck.get_texto(312556,'NR_SEQ_CONTRATO=' || nr_seq_contrato_p),1,255),
							clock_timestamp(),
							clock_timestamp(),
							null,
							clock_timestamp(),
							null,
							nm_usuario_p,
							nm_usuario_p,
							nr_adiantamento_pago_w,
							null,
							null,
							null,
							null,
							null,
							null,
							null,
							nr_seq_trans_adiant_w,
							nr_titulo_w,
							vl_total_w,
							vl_total_w);																			
		end if;
	
	end if;
	
	end;

end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_tit_pagar_contrato ( dt_vencimento_p timestamp, qt_titulo_p bigint, nr_seq_regra_p bigint, nr_seq_contrato_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, dt_contabil_p timestamp, ie_gerar_tributo_p text, vl_ir_p bigint, vl_inss_p bigint, vl_iss_p bigint) FROM PUBLIC;

