-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_desfazer_titulos_lote_pag (nr_seq_lote_p bigint, nm_usuario_p text, dt_cancelamento_p timestamp) AS $body$
DECLARE


nr_titulo_w			bigint;
nr_seq_pag_prestador_w		bigint;
nr_seq_prestador_w		bigint;
nr_titulo_receber_w		bigint;
qt_copartic_w			integer;
ie_desfaz_lote_pag_copartic_w	pls_parametros.ie_desfaz_lote_pag_copartic%type;
cd_estabelecimento_w		pls_lote_pagamento.cd_estabelecimento%type;
nr_seq_escrit_w			titulo_pagar_escrit.nr_seq_escrit%type;
nr_bordero_w			bordero_tit_pagar.nr_bordero%type;
ie_data_lote_prod_med_w		pls_parametro_contabil.ie_data_lote_prod_med%type;
nr_lote_contabilizado_w		lote_contabil.nr_lote_contabil%type;
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;
ie_status_origem_w		lote_contabil.ie_status_origem%type;

C01 CURSOR FOR
	SELECT	c.nr_titulo nr_titulo_pagar,
		b.nr_sequencia,
		b.nr_seq_prestador,
		null nr_titulo_receber
	from	titulo_pagar		c,
		pls_pagamento_prestador	b,
		pls_lote_pagamento	a
	where	a.nr_sequencia	= b.nr_seq_lote
	and	b.nr_sequencia	= c.nr_seq_pls_pag_prest
	and	a.nr_sequencia 	= nr_seq_lote_p
	
union

	SELECT	d.nr_titulo nr_titulo_pagar,
		a.nr_sequencia,
		a.nr_seq_prestador,
		null nr_titulo_receber
	from	titulo_pagar			d,
		pls_pag_prest_venc_trib		c,
		pls_pag_prest_vencimento 	b,
		pls_pagamento_prestador 	a
	where	d.nr_seq_pls_venc_trib 	= c.nr_sequencia
	and	b.nr_sequencia		= c.nr_seq_vencimento
	and	a.nr_sequencia		= b.nr_seq_pag_prestador
	and	a.nr_seq_lote 		= nr_seq_lote_p
	
union all

	select	null nr_titulo_pagar,
		a.nr_sequencia,
		a.nr_seq_prestador,
		c.nr_titulo nr_titulo_receber
	from	titulo_receber			c,
		pls_pag_prest_vencimento 	b,
		pls_pagamento_prestador 	a
	where	c.nr_titulo 		= b.nr_titulo_receber
	and	a.nr_sequencia		= b.nr_seq_pag_prestador
	and	a.nr_seq_lote 		= nr_seq_lote_p;
	
C02 CURSOR(	nr_seq_lote_pc		pls_lote_pagamento.nr_sequencia%type) FOR
	SELECT	b.nr_sequencia,
		b.nr_adiant_pago_origem,
		b.vl_item
	from	pls_pagamento_item	b,
		pls_pagamento_prestador	a
	where	a.nr_sequencia		= b.nr_seq_pagamento
	and	a.nr_seq_lote		= nr_seq_lote_pc
	and	coalesce(a.ie_cancelamento::text, '') = ''
	and	(b.nr_adiant_pago_origem IS NOT NULL AND b.nr_adiant_pago_origem::text <> '');
	
BEGIN

if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	
	select	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	pls_lote_pagamento
	where	nr_sequencia	= nr_seq_lote_p;
	
	select	max(coalesce(ie_data_lote_prod_med,'C'))
	into STRICT	ie_data_lote_prod_med_w
	from	pls_parametro_contabil
	where	cd_estabelecimento	= cd_estabelecimento_w;

	if (ie_data_lote_prod_med_w = 'T') then	
		select	max(coalesce(nr_lote_contabil,0)) nr_lote_contabil
		into STRICT	nr_lote_contabilizado_w
		from	pls_lote_pagamento
		where	nr_sequencia = nr_seq_lote_p
		and	coalesce(nr_lote_contabil,0) <> 0;
		
		if (nr_lote_contabilizado_w <> 0) then
			select	coalesce(max(ie_status_origem), 'M')
			into STRICT	ie_status_origem_w
			from	lote_contabil
			where	nr_lote_contabil = nr_lote_contabilizado_w;

			if (ie_status_origem_w <> 'SO') then		
				/* O pagamento de produção já foi contabilizado no lote #@NR_LOTE_CONTABILIZADO#@. */

				CALL wheb_mensagem_pck.exibir_mensagem_abort(326581, 'NR_LOTE_CONTABILIZADO=' || nr_lote_contabilizado_w);	
			end if;
		end if;
	end if;
	
	select	coalesce(ie_desfaz_lote_pag_copartic,'S')
	into STRICT	ie_desfaz_lote_pag_copartic_w
	from	pls_parametros
	where	cd_estabelecimento	= cd_estabelecimento_w;

	if (ie_desfaz_lote_pag_copartic_w = 'N') then
		select	count(1)
		into STRICT	qt_copartic_w
		from	pls_conta_coparticipacao	a
		where	(a.nr_seq_mensalidade_seg IS NOT NULL AND a.nr_seq_mensalidade_seg::text <> '')
		and	a.nr_seq_conta	in (SELECT	x.nr_seq_conta
						from	pls_conta_medica_resumo	x
						where	x.nr_seq_lote_pgto	= nr_seq_lote_p);
		if (qt_copartic_w	> 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(249681);
		end if;
	end if;
	
	open C01;
	loop
	fetch C01 into	
		nr_titulo_w,
		nr_seq_pag_prestador_w,
		nr_seq_prestador_w,
		nr_titulo_receber_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
		
			select	max(nr_bordero)
			into STRICT	nr_bordero_w
			from	titulo_pagar_bordero_v
			where	nr_titulo	= nr_titulo_w;
			
			if (nr_bordero_w IS NOT NULL AND nr_bordero_w::text <> '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(283640, 'NR_TITULO=' || nr_titulo_w || ';NR_BORDERO=' || nr_bordero_w);
				-- O título #@NR_TITULO#@ já está no borderô de pagamento #@NR_BORDERO#@!

				-- Não é possível cancelar este pagamento.
			end if;

			select	max(nr_seq_escrit)
			into STRICT	nr_seq_escrit_w
			from	titulo_pagar_escrit
			where	nr_titulo	= nr_titulo_w;

			if (nr_seq_escrit_w IS NOT NULL AND nr_seq_escrit_w::text <> '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(283646, 'NR_TITULO=' || nr_titulo_w || ';NR_SEQ_ESCRIT=' || nr_bordero_w);
				-- O título #@NR_TITULO#@ já está no pagamento_escritural #@NR_SEQ_ESCRIT#@!

				-- Não é possível cancelar este pagamento.
			end if;
			
			CALL cancelar_titulo_pagar(nr_titulo_w, nm_usuario_p, coalesce(dt_cancelamento_p, clock_timestamp()));
			
			update	titulo_pagar
			set	nr_seq_pls_pag_prest	 = NULL,
				nr_seq_pls_venc_trib	 = NULL,
				ds_observacao_titulo	= 	('Este título havia sido gerado pelo lote de pagamento ' || nr_seq_lote_p || ' e o prestador ' || nr_seq_prestador_w || '.')	
			where	nr_titulo		= nr_titulo_w;
			
			update 	pls_pag_prest_vencimento
			set	nr_titulo 		 = NULL
			where	nr_seq_pag_prestador 	= nr_seq_pag_prestador_w
			and	nr_titulo		= nr_titulo_w;	
			
			update	TITULO_PAGAR_IMPOSTO
			set	NR_SEQ_PLS_VENC_TRIB	 = NULL
			where	nr_titulo		= nr_titulo_w;
			
		elsif (nr_titulo_receber_w IS NOT NULL AND nr_titulo_receber_w::text <> '') then
			CALL cancelar_titulo_receber(nr_titulo_receber_w, nm_usuario_p, 'N',clock_timestamp());
			
			update	titulo_receber
			set	ds_observacao_titulo	= 	('Este título havia sido gerado pelo lote de pagamento ' || nr_seq_lote_p || ' e o prestador ' || nr_seq_prestador_w || '.')	
			where	nr_titulo		= nr_titulo_receber_w;
			
			update 	pls_pag_prest_vencimento
			set	nr_titulo_receber	 = NULL
			where	nr_seq_pag_prestador 	= nr_seq_pag_prestador_w
			and	nr_titulo_receber	= nr_titulo_receber_w;	
		end if;	
		end;
	end loop;
	close C01;
	
	-- Varre todos os itens que são provenientes de adiantamentos pagos e gera a devolução no adiantamento pago
	for r_C02_w in C02(nr_seq_lote_p) loop
		CALL pls_devolver_adiant_evento(	r_C02_w.nr_sequencia,
						r_C02_w.nr_adiant_pago_origem,
						r_C02_w.vl_item,
						nm_usuario_p);
	end loop;
	
	update	pls_lote_pagamento
	set	dt_geracao_titulos	 = NULL,
		nm_usuario		= nm_usuario_p,
		dt_atualizacao		= clock_timestamp()
	where	nr_sequencia 		= nr_seq_lote_p;
	
	--Necessário retornar o status do protocolo para liberado para pagamento quando os titulos são cancelados
	update	pls_protocolo_conta	prot
	set	prot.ie_status		= '3'
	where	1 = 1
	and	ie_status <> '4'
	and	exists (SELECT 1
			from 	pls_conta_medica_resumo resumo
			where	resumo.nr_seq_protocolo = prot.nr_sequencia
			and	resumo.nr_seq_lote_pgto	= nr_seq_lote_p);
			
	update	pls_evento_movimento	c
	set	nr_titulo_pagar  = NULL,
		nm_usuario	= nm_usuario_p,
		dt_atualizacao 	= clock_timestamp()
	where 	exists (SELECT 	1
			from	pls_pagamento_item	b,
				pls_pagamento_prestador	a
			where	b.nr_sequencia 	= c.nr_seq_pagamento_item
			and	a.nr_sequencia 	= b.nr_seq_pagamento
			and	a.nr_seq_lote 	= nr_seq_lote_p
			and	((c.cd_pf_titulo_pagar IS NOT NULL AND c.cd_pf_titulo_pagar::text <> '') or (c.cd_cgc_titulo_pagar IS NOT NULL AND c.cd_cgc_titulo_pagar::text <> ''))
			and	(c.nr_titulo_pagar IS NOT NULL AND c.nr_titulo_pagar::text <> ''));

	select 	coalesce(max(ie_concil_contab), 'N')
	into STRICT	ie_concil_contab_w
	from	pls_visible_false
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	if (ie_concil_contab_w = 'S') then
		CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_canc_desvinc_tit(nr_seq_lote_p, cd_estabelecimento_w, nm_usuario_p, dt_cancelamento_p);
	end if;
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_desfazer_titulos_lote_pag (nr_seq_lote_p bigint, nm_usuario_p text, dt_cancelamento_p timestamp) FROM PUBLIC;

