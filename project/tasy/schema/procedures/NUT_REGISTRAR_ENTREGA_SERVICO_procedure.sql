-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE nut_registrar_entrega_servico ( nr_sequencia_p bigint, dt_atend_servico_p timestamp, nm_usuario_p text, cd_copeira_p text, ds_mensagem_p INOUT text) AS $body$
DECLARE

 
cd_kit_material_w	integer;
ds_mensagem_w		varchar(4000) := '';
nr_atendimento_w	bigint;
nr_seq_atepacu_w	bigint	:= 0;
cd_local_estoque_w	smallint;
cd_estabelecimento_w	integer;
cd_convenio_w		bigint;
ie_tipo_convenio_w	smallint;
cd_categoria_w		varchar(10);
nr_doc_convenio_w	varchar(20);
ie_tipo_guia_w		varchar(2);
cd_senha_w		varchar(20);
qt_idade_w		smallint;
ie_sexo_w		varchar(1);
cd_material_w		integer;
qt_material_w		double precision;
cd_unidade_medida_consumo_w	varchar(30);
ie_baixa_estoque_w	varchar(1);
ie_baixa_estoq_pac_w	varchar(1);
cd_setor_atendimento_w	integer;
dt_entrada_unidade_w	timestamp;
		
		 
C01 CURSOR FOR 
	SELECT	a.cd_kit_material 
	from	nut_refeicao a, 
		nut_pac_opcao_rec b 
	where	a.nr_sequencia = b.nr_seq_refeicao 
	and	(a.cd_kit_material IS NOT NULL AND a.cd_kit_material::text <> '') 
	and	b.nr_seq_servico_dia = nr_sequencia_p 
	order by 1;
	
C02 CURSOR FOR 
	SELECT 	a.cd_material, 
		a.qt_material, 
		substr(obter_dados_material_estab(b.cd_material,cd_estabelecimento_w,'UMS'),1,30) cd_unidade_medida_consumo, 
		a.ie_baixa_estoque 
	from	material b, 
		componente_kit a 
	where (a.cd_material = b.cd_material) 
	and 	a.cd_kit_material = cd_kit_material_w 
	and	coalesce(a.cd_convenio, coalesce(cd_convenio_w,0))	= coalesce(cd_convenio_w,0) 
	and	coalesce(a.ie_tipo_convenio, coalesce(ie_tipo_convenio_w,0))	= coalesce(ie_tipo_convenio_w,0) 
	and 	a.ie_situacao = 'A' 
	and 	b.ie_situacao = 'A' 
	and	qt_idade_w >= coalesce(a.qt_idade_minima,0) 
	and	qt_idade_w <= coalesce(a.qt_idade_maxima,999) 
	and	coalesce(a.ie_sexo, coalesce(ie_sexo_w,0))		= coalesce(ie_sexo_w,0) 
	and	((coalesce(a.cd_estab_regra::text, '') = '') or (a.cd_estab_regra = cd_estabelecimento_w));
					

BEGIN 
if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then 
	 
	select	max(nr_atendimento) 
	into STRICT	nr_atendimento_w 
	from	nut_atend_serv_dia 
	where	nr_sequencia	 = nr_sequencia_p;
	 
	select	cd_estabelecimento, 
		coalesce((obter_idade_pf(cd_pessoa_fisica, clock_timestamp(), 'A'))::numeric ,0), 
		substr(obter_sexo_pf(cd_pessoa_fisica, 'C'),1,1) 
	into STRICT	cd_estabelecimento_w, 
		qt_idade_w, 
		ie_sexo_w 
	from	atendimento_paciente 
	where	nr_atendimento = nr_atendimento_w;
	 
	nr_seq_atepacu_w 	:= OBTER_ATEPACU_PACIENTE(nr_atendimento_w, 'A');
	 
	select	cd_setor_atendimento, 
		dt_entrada_unidade 
	into STRICT	cd_setor_atendimento_w, 
		dt_entrada_unidade_w 
	from	atend_paciente_unidade 
	where	nr_seq_interno = nr_seq_atepacu_w;
	 
	SELECT * FROM obter_convenio_execucao(nr_atendimento_w, clock_timestamp(), cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w) INTO STRICT cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w;
			 
	if (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') then 
		select	ie_tipo_convenio 
		into STRICT	ie_tipo_convenio_w 
		from	convenio 
		where	cd_convenio = cd_convenio_w;
	end if;
	 
	select	coalesce(max(obter_local_estoque_setor(b.cd_setor_atendimento,cd_estabelecimento_w)),0) 
	into STRICT	cd_local_estoque_w 
	from  	usuario a, 
		setor_atendimento b 
	where  a.cd_setor_atendimento = b.cd_setor_atendimento 
	and   a.nm_usuario = nm_usuario_p;
	 
	open C01;
	loop 
	fetch C01 into	 
		cd_kit_material_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		 
		open C02;
		loop 
		fetch C02 into	 
			cd_material_w, 
			qt_material_w, 
			cd_unidade_medida_consumo_w, 
			ie_baixa_estoque_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin 
			ie_baixa_estoq_pac_w := obter_se_baixa_estoque_pac(cd_setor_atendimento_w, cd_material_w,null,0);
			 
			if (cd_local_estoque_w IS NOT NULL AND cd_local_estoque_w::text <> '') then 
				if (ie_baixa_estoque_w = 'S') and (ie_baixa_estoq_pac_w = 'S') then 
					CALL Gerar_Prescricao_Estoque(cd_estabelecimento_w, 
								nr_atendimento_w, 
								dt_entrada_unidade_w, 
								cd_material_w, 
								dt_atend_servico_p, 
								'1', 
								(cd_local_estoque_w)::numeric , 
								qt_material_w, 
								cd_setor_atendimento_w, 
								cd_unidade_medida_consumo_w, 
								nm_usuario_p, 
								'I', 
								null, 
								null, 
								null, 
								0, 
								'', 
								'', 
								0, 
								0, 
								0, 
								null, '','','');
				else 
					ds_mensagem_w := substr(ds_mensagem_w || WHEB_MENSAGEM_PCK.get_texto(312738, 'CD_MATERIAL_W=' || cd_material_w) || chr(10),1,4000); --O item ' || cd_material_w || ' não pode ser baixado pois está definido para não baixar estoque no cadastro do item ou do kit! 
				end if;
			else 
				ds_mensagem_w := substr(ds_mensagem_w || WHEB_MENSAGEM_PCK.get_texto(312741, 'CD_MATERIAL_W=' || cd_material_w) || chr(10),1,4000); --O item ' || cd_material_w || ' não pode ser baixado pois não possui local de estoque definido 
			
			end if;
 
			exception 
			when others then 
			ds_mensagem_w := substr(ds_mensagem_w || WHEB_MENSAGEM_PCK.get_texto(312742, 'CD_MATERIAL_W=' || cd_material_w) || substr(SQLERRM,1,1000) || chr(10),1,4000); --'Item ' || cd_material_w || ' inconsistente: ' 
			end;
		end loop;
		close C02;
		 
		/*GERAR_KIT_MATERIAL(cd_kit_material_w, 
				sysdate, 
				null, 
				'N', 
				cd_local_estoque_w, 
				null, 
				nr_seq_atepacu_w, 
				'N', 
				nm_usuario_p, 
				ds_erro_w);*/
 
 
		end;
	end loop;
	close C01;
	 
	ds_mensagem_p := '';
	if (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') then -- Se houver alguma inconsistência com algum item faz rollback para voltar os itens já baixados e grava log com a mensagem de inconsistência. 
		rollback;
		ds_mensagem_p := substr(ds_mensagem_w,1,252)||'...';
		CALL gravar_log_nutricao(1193,WHEB_MENSAGEM_PCK.get_texto(312747, 'NR_ATENDIMENTO_W=' || nr_atendimento_w || ';NR_SEQUENCIA_P=' || nr_sequencia_p || ';DT_ATEND_SERVICO_P=' || dt_atend_servico_p || ';CD_SETOR_ATENDIMENTO_W=' || cd_setor_atendimento_w) ||chr(10)||chr(10)||ds_mensagem_w,nm_usuario_p); --Atendimento: '||nr_atendimento_w||', Serviço: '||nr_sequencia_p||', Data: '||dt_atend_servico_p||', Setor: '||cd_setor_atendimento_w 
	else
		update	nut_atend_serv_dia 
		set	nm_usuario_atend = nm_usuario_p, 
			dt_atend_servico = dt_atend_servico_p, 
			cd_copeira	 = cd_copeira_p 
		where	nr_sequencia	 = nr_sequencia_p;
	end if;
 
end if;	
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nut_registrar_entrega_servico ( nr_sequencia_p bigint, dt_atend_servico_p timestamp, nm_usuario_p text, cd_copeira_p text, ds_mensagem_p INOUT text) FROM PUBLIC;

