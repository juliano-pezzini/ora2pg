-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE inf_obter_dados_cliente ( ie_exec_job_p text, nm_usuario_p text) AS $body$
DECLARE


nr_sequencia_w	bigint;
ds_comando_w	varchar(2000);
ds_procedure_w	varchar(100);
ie_exec_w	varchar(1) := 'N';
ds_erro_w	varchar(255);
c02		bigint;
fetch_rows_w	bigint;
vl_inf_w	varchar(100);
id_inf_w	varchar(100);
cd_cnpj_w	varchar(14);
proc_exec_w	varchar(150);

c01 CURSOR FOR
SELECT	distinct(a.nr_sequencia),
	substr(a.ds_comando,1,2000),
	substr(a.ds_procedure,1,100),
	coalesce(a.ie_exec,'N')
from	busca_inf_base_cliente a
where	a.ie_exec = ie_exec_job_p
and	(a.dt_aprov IS NOT NULL AND a.dt_aprov::text <> '');


BEGIN

open c01;
loop
fetch c01 into	nr_sequencia_w,
		ds_comando_w,
		ds_procedure_w,
		ie_exec_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
			if (coalesce(ds_comando_w::text, '') = '') and (coalesce(ds_procedure_w::text, '') = '') then
				begin
				ds_erro_w	:= 'Deve ser cadastrado ou uma procedure ou um comando de sql.'
;
				end;
			elsif (ds_comando_w IS NOT NULL AND ds_comando_w::text <> '') then
				begin
					begin
						c02	:= DBMS_SQL.OPEN_CURSOR;
						DBMS_SQL.parse(c02, ds_comando_w, DBMS_SQL.NATIVE);
						DBMS_SQL.define_column(c02, 1, vl_inf_w, 100);
						DBMS_SQL.define_column(c02, 2, id_inf_w, 100);
						DBMS_SQL.define_column(c02, 3, cd_cnpj_w, 14);
						fetch_rows_w := DBMS_SQL.EXECUTE(c02);
						loop

							fetch_rows_w := DBMS_SQL.FETCH_ROWS(c02);
							if (fetch_rows_w <= 0) then
								exit;
							end if;

							begin
							DBMS_SQL.column_value(c02, 1, vl_inf_w);
							DBMS_SQL.column_value(c02, 2, id_inf_w);
							DBMS_SQL.column_value(c02, 3, cd_cnpj_w);
							CALL insert_inf_base_cliente(nr_sequencia_w,
										vl_inf_w,
										id_inf_w,
										cd_cnpj_w,
										ds_erro_w,
										nm_usuario_p);
							exception
							when others then

								ds_erro_w := 'O comando sql está fora do padrão ou não foi executado. Seq:' ||nr_sequencia_w|| ' - ';
								ds_erro_w :=  substr(ds_erro_w + sqlerrm(SQLSTATE),1,255);

								CALL insert_inf_base_cliente(nr_sequencia_w,
											-1,
											-1,
											cd_cnpj_w,
											ds_erro_w,
											nm_usuario_p);
							end;
						end loop;
						dbms_sql.close_cursor(c02);
					exception
					when others then
						ds_erro_w := 'Ocorreu um erro na execução do cursor com o comando sql definido. Seq: ' ||nr_sequencia_w|| ' - ';
						ds_erro_w :=  substr(ds_erro_w + sqlerrm(SQLSTATE),1,255);

						CALL insert_inf_base_cliente(nr_sequencia_w,
									-2,
									-2,
									'NI',
									ds_erro_w,
									nm_usuario_p);
					end;
				end;
			elsif (ds_procedure_w IS NOT NULL AND ds_procedure_w::text <> '') then
				begin
					begin
						proc_exec_w := 'Begin ' || ds_procedure_w || '; End;';
						EXECUTE proc_exec_w;
					exception
					when others then
						ds_erro_w := 'Não foi possível executar a procedure: ' || ds_procedure_w || ' - ';
						ds_erro_w :=  substr(ds_erro_w + sqlerrm(SQLSTATE),1,255);


						CALL insert_inf_base_cliente(nr_sequencia_w,
									-3,
									-3,
									'NI',
									ds_erro_w,
									nm_usuario_p);
					end;

				end;
			end if;
			end;
end loop;
close c01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE inf_obter_dados_cliente ( ie_exec_job_p text, nm_usuario_p text) FROM PUBLIC;

