-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_kcal_kg_dia ( nr_seq_npt_cpoe_p bigint ,nr_seq_protocolo_p bigint ,qt_peso_p bigint ,kcal_kg_dia_p bigint ,pr_proteina_p bigint ,pr_carboidrato_p bigint ,pr_lipidio_p bigint ,nm_usuario_p text ,cd_estabelecimento_p bigint ,param_1034_p bigint ,param_1035_p bigint ,ds_json_p INOUT text ) AS $body$
DECLARE


nr_seq_elem_prescr_w          bigint;
nr_seq_nut_elem_mat_w         bigint;
ie_novo_produto_w	      varchar(1);
qt_formula_lipideo_w 	      double precision;
qt_formula_carb_w	      double precision;
ie_via_administracao_w	      varchar(1);
cd_unidade_medida_elem_w      varchar(30);
nr_seq_elemento_w	      bigint;
qt_elemento_w		      double precision;
qt_diaria_w		      double precision;
qt_vol_diaria_w		      double precision;
qt_dose_diaria_w              double precision;
ie_prod_adicional_elem_w      varchar(1);
ie_prim_fase_w		      varchar(1);
ie_seg_fase_w                 varchar(1);
ie_terc_fase_w                varchar(1);
ie_quar_fase_w                varchar(1);
ie_npt_w                      varchar(1);
qt_osmolaridade_w	      double precision;
ie_tipo_elemento_w	      varchar(1);	
ie_glutamina_w		      varchar(1);
nr_sequencia_mat_w	      bigint;
cd_material_prod_w	      integer;
qt_volume_w		      double precision;
qt_vol_1_fase_w		      double precision;
qt_vol_2_fase_w               double precision;
qt_vol_3_fase_w               double precision;
qt_vol_4_fase_w               double precision;
qt_dose_w		      double precision;
cd_unidade_medida_prod_w      varchar(30);	
ie_prod_adicional_prod_w      varchar(1);	
ie_somar_volume_w	      varchar(1);
qt_elem_kg_dia_w              double precision;
qt_kcal_w                     cpoe_npt_elemento.qt_kcal%type;
qt_grama_nitrogenio_w         double precision;
qt_vol_prot_w                 double precision;
qt_nitrogenio_prod_w          double precision;
qt_nitrogenio_w               double precision;
qt_nitrogenio_total_w	      double precision;
qt_grama_proteina_kg_dia_w    double precision;
qt_kcal_proteina_w            double precision;
qt_kcal_lipidio_w             double precision;
qt_kcal_carboidrato_w         double precision;
pr_conc_proteina_solucao_w    double precision;	
pr_conc_lipidio_solucao_w     double precision;
pr_conc_glic_solucao_w        double precision;
qt_kcal_total_w               double precision;
qt_rel_cal_nit_w              double precision;
qt_vel_inf_glicose_w          double precision;
qt_kcal_proteico_w            double precision;
qt_kcal_nao_proteico_w        double precision;
nr_horas_validade_w	      integer;
ie_calculo_auto_w	      varchar(1);
qt_volume_total_w	      double precision;
qt_gotejo_w		      double precision;
qt_osmolaridade_total_w       double precision;
qt_conversao_ml_w	      double precision;
qt_conversao_kcal_w	      nut_elem_material.qt_conversao_kcal%type;
qt_formula_lipideo_ww	      smallint;
qt_elem_lipidio_w	      smallint;
qt_lipidio_prop_w	      double precision;
qt_diaria_glutamina_w         double precision;
qt_diaria_aa_w                double precision;
aa_glut_ratio_w               double precision;
qt_adjusted_glut_w            double precision;
qt_adjusted_aa_w              double precision;
aa_qt_conversao_ml_w          double precision;
qt_elem_proteina_w            smallint;
ds_json_elem_w                text;
ds_json_prod_w                text;
ds_json_cpoe_w                text;
calc_conforme_prot_w	      varchar(1);
EXEC_W                      varchar(300);
cd_unid_med_cons_w		      varchar(30);
qt_conversao_und_ori_w	    double precision;
qt_conversao_und_dest_w	    double precision;
qt_limite_litro_w	      nut_elemento.qt_limite_litro%type;

c01 CURSOR FOR
  /** CPOE_NPT_ELEMENTO **/

SELECT a.cd_unidade_medida
      ,a.nr_seq_elemento
      ,coalesce(a.qt_elemento, 0)
      ,a.ie_prod_adicional	
      ,coalesce(a.ie_prim_fase, 'N')
      ,coalesce(a.ie_seg_fase, 'N')
      ,coalesce(a.ie_terc_fase, 'N')
      ,coalesce(a.ie_quar_fase, 'N')
      ,'S'
      ,a.qt_osmolaridade
      ,c.ie_tipo_elemento
      ,c.ie_glutamina
  /** CPOE_NPT_PRODUTO **/

      ,d.nr_sequencia
      ,b.cd_material
      ,b.qt_volume
      ,b.qt_vol_1_fase
      ,b.qt_vol_2_fase
      ,b.qt_vol_3_fase
      ,b.qt_vol_4_fase	
      ,b.qt_dose
      ,b.cd_unidade_medida
      ,b.ie_prod_adicional
      ,coalesce(b.ie_somar_volume, 'S')
      ,d.qt_nitrogenio
      ,d.qt_conversao_ml
      ,coalesce(d.qt_conversao_kcal,0)
FROM protocolo_npt_item a,
     protocolo_npt_prod b,
     nut_elemento c,
     nut_elem_material d
WHERE a.nr_seq_protocolo = nr_seq_protocolo_p
AND c.nr_sequencia = a.nr_seq_elemento
AND a.nr_seq_protocolo = b.nr_seq_protocolo
AND a.nr_seq_elemento = d.nr_seq_elemento
AND b.cd_material = d.cd_material
AND coalesce(c.IE_SITUACAO, 'A') = 'A'
AND coalesce(c.IE_DIETA_ENTERAL,'N') = 'N'
ORDER BY coalesce(a.nr_seq_apres, 999);

procedure obter_dados_dose_convertida(cd_unid_med_usua_p      IN text,
     cd_unidade_medida_p     IN text,
     cd_material_p           IN bigint,
     cd_unid_med_cons_p      OUT text,
     qt_conversao_und_ori_p  OUT bigint,
     qt_conversao_und_dest_p OUT bigint
    ) 
is	
;
BEGIN
  begin
    select  coalesce(a.cd_unidade_medida_consumo, b.cd_unidade_medida_consumo)
    into STRICT	cd_unid_med_cons_p
    from	material_estab a,
        material b
    where	b.cd_material	= a.cd_material
    and	    a.cd_material	= cd_material_p
    and  	a.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;
  exception
    when others then
      begin
        select	cd_unidade_medida_consumo
        into STRICT	cd_unid_med_cons_p
        from	material
        where	cd_material = cd_material_p;
      exception
      when others then
      null;
      end;
  end;

  begin
    select coalesce(max(qt_conversao),0)
    into STRICT	 qt_conversao_und_ori_p
    from	 material_conversao_unidade
    where	 upper(cd_unidade_medida) = upper(cd_unid_med_usua_p)
    and		 cd_material = cd_material_p;
    exception
    when others then
        qt_conversao_und_ori_p := null;
  end;

  begin
    select coalesce(max(qt_conversao),0)
    into STRICT   qt_conversao_und_dest_p
    from   material_conversao_unidade
    where  upper(cd_unidade_medida) = upper(cd_unidade_medida_p)
    and	   cd_material = cd_material_p;
    exception
    when others then
        qt_conversao_und_dest_p := null;
  end;
end;		

BEGIN
  if	((pr_proteina_p + pr_lipidio_p + pr_carboidrato_p) <> 100) then
	  CALL wheb_mensagem_pck.exibir_mensagem_abort(176792);		
  end if;
	
  if (coalesce(kcal_kg_dia_p,0) = 0) then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(256334);
  end if;

  ie_novo_produto_w := Obter_Param_Usuario(924, 1167, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_novo_produto_w);
  calc_conforme_prot_w := Obter_Param_Usuario(924, 1085, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, calc_conforme_prot_w);

  qt_formula_lipideo_w  := param_1034_p;
  qt_formula_carb_w     := param_1035_p;

  /** BELOW ATTRIBUTE WILL BE INSERTED IN CPOE_DIETA **/

  SELECT ie_via_administracao
  INTO STRICT ie_via_administracao_w
  FROM protocolo_npt
  WHERE nr_sequencia = nr_seq_protocolo_p;

  /** CPOE_DIETA attributes **/

  qt_nitrogenio_total_w := 0;
  qt_grama_proteina_kg_dia_w := 0;
  qt_kcal_proteina_w := 0;
  qt_kcal_lipidio_w := 0;
  qt_kcal_carboidrato_w := 0;
  pr_conc_proteina_solucao_w := 0;
  pr_conc_lipidio_solucao_w := 0;
  pr_conc_glic_solucao_w := 0;
  qt_volume_total_w := 0;

  ds_json_elem_w := null;
  ds_json_prod_w := null;
  
  begin
    EXEC_W := 'BEGIN CALCULA_RESULT_QTKCAL_MD(:1,:2,:3,:4,:5,:6,:7,:8); END;';

    EXECUTE EXEC_W USING IN kcal_kg_dia_p,
                                   IN qt_peso_p,
                                   IN pr_proteina_p, 
                                   IN pr_lipidio_p,
                                   OUT qt_kcal_total_w,
                                   OUT qt_kcal_proteina_w,
                                   OUT qt_kcal_lipidio_w,
                                   OUT qt_kcal_carboidrato_w;
  exception
      when others then
      qt_kcal_total_w        := null;
      qt_kcal_proteina_w     := null;
      qt_kcal_lipidio_w      := null;
      qt_kcal_carboidrato_w  := null;
  end;

  SELECT COUNT(ie_tipo_elemento)
  INTO STRICT	qt_elem_lipidio_w
  FROM protocolo_npt_item a,
       nut_elemento b
  WHERE a.nr_seq_protocolo = nr_seq_protocolo_p
  AND a.nr_seq_elemento = b.nr_sequencia
  AND b.ie_tipo_elemento = 'L';

  SELECT COUNT(ie_tipo_elemento)
  INTO STRICT	qt_elem_proteina_w
  FROM protocolo_npt_item a,
       nut_elemento b
  WHERE a.nr_seq_protocolo = nr_seq_protocolo_p
  AND a.nr_seq_elemento = b.nr_sequencia
  AND b.ie_tipo_elemento = 'P';

  SELECT coalesce(MAX(a.qt_elemento),0),
	 coalesce(MAX(d.qt_conversao_ml),0)
  INTO STRICT qt_diaria_aa_w,
       aa_qt_conversao_ml_w
  FROM protocolo_npt_item a,
       nut_elemento b,
       protocolo_npt_prod c, 
       nut_elem_material d 
  WHERE a.nr_seq_protocolo = nr_seq_protocolo_p
  AND b.nr_sequencia = a.nr_seq_elemento
  AND a.nr_seq_protocolo = c.nr_seq_protocolo
  AND a.nr_seq_elemento = d.nr_seq_elemento
  AND c.cd_material = d.cd_material
  AND b.ie_tipo_elemento = 'P'
  AND b.ie_glutamina = 'N';

  SELECT coalesce(max(a.qt_elemento),0)
  INTO STRICT	qt_diaria_glutamina_w
  FROM protocolo_npt_item a,
       nut_elemento b
  WHERE a.nr_seq_protocolo = nr_seq_protocolo_p
  AND a.nr_seq_elemento = b.nr_sequencia
  AND b.ie_tipo_elemento = 'P'
  AND b.ie_glutamina = 'S';

  begin
    EXEC_W := 'BEGIN CALCULA_RESULT_ADJUSTED_MD(:1,:2,:3,:4,:5,:6,:7,:8); END;';

    EXECUTE EXEC_W USING IN qt_elem_proteina_w,
                                   IN qt_diaria_aa_w,
                                   IN qt_diaria_glutamina_w,
                                   IN qt_kcal_proteina_w,
                                   IN aa_qt_conversao_ml_w,
                                   OUT aa_glut_ratio_w,
                                   OUT qt_adjusted_glut_w,
                                   OUT qt_adjusted_aa_w;
  exception
      when others then
        aa_glut_ratio_w       := null;
        qt_adjusted_glut_w    := null;
        qt_adjusted_aa_w      := null;
  end;

  OPEN c01;
  LOOP
  FETCH c01 INTO
      /**ELEMENTO**/

      cd_unidade_medida_elem_w
      ,nr_seq_elemento_w
      ,qt_elemento_w
      ,ie_prod_adicional_elem_w
      ,ie_prim_fase_w
      ,ie_seg_fase_w
      ,ie_terc_fase_w
      ,ie_quar_fase_w
      ,ie_npt_w
      ,qt_osmolaridade_w
      ,ie_tipo_elemento_w
      ,ie_glutamina_w
      /**PRODUTO**/

      ,nr_sequencia_mat_w
      ,cd_material_prod_w
      ,qt_volume_w
      ,qt_vol_1_fase_w
      ,qt_vol_2_fase_w
      ,qt_vol_3_fase_w
      ,qt_vol_4_fase_w
      ,qt_dose_w
      ,cd_unidade_medida_prod_w
      ,ie_prod_adicional_prod_w
      ,ie_somar_volume_w
      ,qt_nitrogenio_w
      ,qt_conversao_ml_w
      ,qt_conversao_kcal_w;
  EXIT WHEN NOT FOUND; /* apply on c01 */	

  --GENERATES PKs for CPOE_NPT_ELEMENTO and CPOE_NPT_PRODUTO
  SELECT nextval('cpoe_npt_elemento_seq')
  INTO STRICT	nr_seq_elem_prescr_w
;

  SELECT nextval('cpoe_npt_produto_seq')
  INTO STRICT nr_seq_nut_elem_mat_w
;
   
  qt_kcal_w		:= 0;
  qt_grama_nitrogenio_w := 0;
  qt_diaria_w := 0;
  qt_vol_diaria_w := qt_volume_w;
  qt_dose_diaria_w := qt_volume_w;

  if (ie_tipo_elemento_w IN ('C','P')) then
     obter_dados_dose_convertida(obter_unid_med_usua('ml'),cd_unidade_medida_prod_w,cd_material_prod_w,cd_unid_med_cons_w,qt_conversao_und_ori_w,qt_conversao_und_dest_w);
  elsif (ie_tipo_elemento_w IN ('L')) then
     obter_dados_dose_convertida(obter_unid_med_usua('g'),cd_unidade_medida_prod_w,cd_material_prod_w,cd_unid_med_cons_w,qt_conversao_und_ori_w,qt_conversao_und_dest_w);
  end if;

  begin
    EXEC_W := 'BEGIN CALCULA_RESULT_TP_ELEMENTO_MD(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,
                                                    :13,:14,:15,:16,:17,:18,:19,:20,:21,:22,:23,:24,:25,:26); END;';

    EXECUTE EXEC_W USING IN ie_tipo_elemento_w,
                                   IN qt_kcal_carboidrato_w,
                                   IN qt_formula_carb_w,
                                   IN qt_conversao_ml_w,
                                   IN cd_unidade_medida_prod_w,
                                   IN obter_unid_med_usua('ml'),
                                   IN obter_unid_med_usua('g'),
                                   IN qt_kcal_proteina_w,
                                   IN ie_glutamina_w,
                                   IN qt_conversao_kcal_w,
                                   IN qt_kcal_lipidio_w,
                                   IN qt_elem_lipidio_w,
                                   IN qt_formula_lipideo_w,
                                   IN cd_unid_med_cons_w,
                                   IN qt_conversao_und_ori_w,
                                   IN qt_conversao_und_dest_w,
                                   OUT qt_kcal_w,                  
                                   IN OUT qt_diaria_w,
                                   IN OUT qt_vol_diaria_w,
                                   IN OUT qt_dose_diaria_w,           
                                   IN OUT pr_conc_glic_solucao_w,
                                   OUT qt_grama_nitrogenio_w,      
                                   IN OUT qt_nitrogenio_total_w,
                                   IN OUT pr_conc_proteina_solucao_w,
                                   OUT qt_lipidio_prop_w,          
                                   IN OUT pr_conc_lipidio_solucao_w;
  exception
    when others then
      qt_kcal_w                   := null;
      qt_diaria_w                 := null;
      qt_vol_diaria_w             := null;
      qt_dose_diaria_w            := null;
      pr_conc_glic_solucao_w      := null;
      qt_grama_nitrogenio_w       := null;
      qt_nitrogenio_total_w       := null;
      pr_conc_proteina_solucao_w  := null;
      qt_lipidio_prop_w           := null;
      pr_conc_lipidio_solucao_w   := null;
  end;

  begin
    EXEC_W := 'CALL OBTER_QT_DIARIA_KCAL_KG_MD(:1,:2,:3,:4) INTO :RESULT';

    EXECUTE EXEC_W USING IN calc_conforme_prot_w,
                                   IN qt_elemento_w,
                                   IN qt_vol_diaria_w,
                                   IN qt_conversao_ml_w,
                                   OUT qt_diaria_w;
  exception
    when others then
        qt_diaria_w   := null;
  end;

  SELECT MAX(d.qt_limite_litro)
  INTO STRICT   qt_limite_litro_w
  FROM       protocolo_npt_prod a,
	     protocolo_npt_item b,
	     nut_elem_material c,
	     nut_elemento d
  WHERE  a.nr_seq_protocolo = nr_seq_protocolo_p
  AND    a.cd_material = cd_material_prod_w
  AND	 a.cd_material = c.cd_material
  AND    a.nr_seq_protocolo = b.nr_seq_protocolo
  AND	 b.nr_seq_elemento  = c.nr_seq_elemento
  AND	 b.nr_seq_elemento  = d.nr_sequencia
  AND	 c.nr_seq_elemento  = d.nr_sequencia
  AND	 coalesce(c.ie_tipo,'NPT')	= 'NPT'
  AND	 coalesce(d.qt_limite_litro,0) < coalesce(qt_diaria_w,0)
  AND	 coalesce(d.qt_limite_litro,0) > 0
  AND	 coalesce(c.ie_situacao,'A') = 'A'
  AND	 coalesce(d.ie_limite_concentracao,'N') = 'S';

  begin
    EXEC_W := 'BEGIN CALCULA_RESULT_ELEM_KG_DIA_MD(:1,:2,:3,:4,:5,:6,:7,:8,:9); END;';

    EXECUTE EXEC_W USING IN qt_limite_litro_w,
                                   IN qt_peso_p,
                                   IN cd_unidade_medida_elem_w,
                                   IN cd_unidade_medida_prod_w,
                                   IN qt_conversao_ml_w,
                                   IN OUT qt_diaria_w,
                                   OUT qt_elem_kg_dia_w,
                                   IN OUT qt_dose_diaria_w,
                                   IN OUT qt_vol_diaria_w;
  exception
      when others then
        qt_diaria_w       := null;
        qt_elem_kg_dia_w  := null;
        qt_dose_diaria_w  := null;
        qt_vol_diaria_w   := null;
  end;

  begin
    EXEC_W := 'CALL OBTER_QT_VOL_TOT_KCAL_KG_MD(:1,:2,:3) INTO :RESULT';

    EXECUTE EXEC_W USING IN ie_somar_volume_w,
                                   IN qt_volume_total_w,
                                   IN qt_dose_diaria_w,
                                   OUT qt_volume_total_w;
  exception
      when others then
        qt_volume_total_w   := null;
  end;

  --ATTRIBUTES FOR ELEMENTS AND PRODUCTS    
  ds_json_elem_w := ds_json_elem_w || '{'
      || format_array_json('NR_SEQUENCIA', nr_seq_elem_prescr_w, 1)
      || format_array_json('DS_ELEMENTO', substr(obter_descricao_padrao('NUT_ELEMENTO','DS_ELEMENTO',nr_seq_elemento_w),1,40), 1)
	  || format_array_json('DS_PADRAO', substr(obter_padrao_elem_nut_pac(nr_seq_elemento_w),1,40), 1)
      || format_array_json('DS_UNIDADE_MEDIDA', substr(obter_desc_unid_med(cd_unidade_medida_elem_w),1,40), 1)
      || format_array_json('NM_USUARIO', nm_usuario_p, 1)
      || format_array_json('NR_SEQ_NPT_CPOE', nr_seq_npt_cpoe_p, 1)
      || format_array_json('CD_UNIDADE_MEDIDA', cd_unidade_medida_elem_w, 1)
      || format_array_json('NR_SEQ_ELEMENTO', nr_seq_elemento_w, 1)
      || format_array_json_number('QT_DIARIA', qt_diaria_w)
      || format_array_json_number('QT_KCAL', qt_kcal_w)
      || format_array_json_number('QT_PROTOCOLO', qt_elemento_w)
      || format_array_json_number('QT_ELEM_KG_DIA', qt_elem_kg_dia_w)
      || format_array_json('IE_PROD_ADICIONAL', ie_prod_adicional_elem_w, 1)
      || format_array_json('IE_PRIM_FASE', ie_prim_fase_w, 1)
      || format_array_json('IE_SEG_FASE', ie_seg_fase_w, 1)
      || format_array_json('IE_TERC_FASE', ie_terc_fase_w, 1)
      || format_array_json('IE_QUAR_FASE', ie_quar_fase_w, 1)
      || format_array_json('IE_NPT', ie_npt_w, 1)      
      || format_array_json_number('QT_GRAMA_NITROGENIO', qt_grama_nitrogenio_w)
      || format_array_json('IE_TIPO_ELEMENTO', ie_tipo_elemento_w, 1)
      || format_array_json('IE_GLUTAMINA', ie_glutamina_w, 1);
  ds_json_elem_w := substr(ds_json_elem_w, 1, length(ds_json_elem_w) -2) || '}, ';
      
  ds_json_prod_w := ds_json_prod_w || '{'
      || format_array_json('NR_SEQUENCIA', nr_seq_nut_elem_mat_w, 1)
      || format_array_json('NM_USUARIO', nm_usuario_p, 1)
      || format_array_json('NR_SEQ_ELEM_MAT', nr_sequencia_mat_w, 1)
      || format_array_json('NR_SEQ_ELEMENTO', nr_seq_elem_prescr_w, 1)
      || format_array_json('NR_SEQ_NPT_CPOE', nr_seq_npt_cpoe_p, 1)      
      || format_array_json('CD_MATERIAL', cd_material_prod_w, 1)      
      || format_array_json_number('QT_VOLUME', qt_vol_diaria_w)
      || format_array_json_number('QT_VOL_1_FASE', qt_vol_1_fase_w)
      || format_array_json_number('QT_VOL_2_FASE', qt_vol_2_fase_w)
      || format_array_json_number('QT_VOL_3_FASE', qt_vol_3_fase_w)
      || format_array_json_number('QT_VOL_4_FASE', qt_vol_4_fase_w)
      || format_array_json_number('QT_PROTOCOLO', qt_volume_w) 
      || format_array_json_number('QT_DOSE', coalesce(qt_dose_diaria_w, qt_dose_w))
      || format_array_json('CD_UNIDADE_MEDIDA', cd_unidade_medida_prod_w, 1)
      || format_array_json('IE_PROD_ADICIONAL', ie_prod_adicional_prod_w, 1)
      || format_array_json('IE_SOMAR_VOLUME', ie_somar_volume_w, 1)      
      || format_array_json('DS_MATERIAL', substr(obter_desc_material(cd_material_prod_w),1,60), 1)
      || format_array_json('DS_UNIDADE_MEDIDA', substr(obter_desc_unid_med(cd_unidade_medida_prod_w),1,40), 1)      
      || format_array_json('IE_TIPO_ELEMENTO', ie_tipo_elemento_w, 1);
  ds_json_prod_w := substr(ds_json_prod_w, 1, length(ds_json_prod_w) -2) || '}, ';
  
END loop;
CLOSE c01;

  ds_json_elem_w := '"CPOE_NPT_ELEMENTO": [' || substr(ds_json_elem_w, 1, length(ds_json_elem_w) -2) || ']';
  ds_json_prod_w := '"CPOE_NPT_PRODUTO": [' || substr(ds_json_prod_w, 1, length(ds_json_prod_w) -2) || ']';

  begin
    EXEC_W := 'BEGIN CALCULA_PROT_NIT_GLI_GOTEJ_MD(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15); END;';

    EXECUTE EXEC_W USING IN pr_conc_proteina_solucao_w,
                                   IN qt_peso_p,
                                   IN qt_kcal_lipidio_w,
                                   IN qt_kcal_carboidrato_w,
                                   IN qt_nitrogenio_total_w,
                                   IN pr_conc_glic_solucao_w,
                                   IN qt_kcal_proteina_w,
                                   IN qt_kcal_total_w,
                                   IN qt_volume_total_w,
                                   OUT qt_grama_proteina_kg_dia_w,
                                   OUT qt_rel_cal_nit_w,
                                   OUT qt_vel_inf_glicose_w,
                                   OUT qt_kcal_proteico_w,
                                   OUT qt_kcal_nao_proteico_w,
                                   OUT qt_gotejo_w;
  exception
      when others then
        qt_grama_proteina_kg_dia_w  := null;
        qt_vel_inf_glicose_w        := null;
        qt_kcal_proteico_w          := null;
        qt_kcal_nao_proteico_w      := null;
        qt_gotejo_w                 := null;
  end;

    ds_json_cpoe_w := '{'
      || format_array_json_number('QT_KCAL_TOTAL', qt_kcal_total_w)
      || format_array_json_number('QT_KCAL_KG', kcal_kg_dia_p)
      || format_array_json_number('PR_PROTEINA', pr_proteina_p)
      || format_array_json_number('PR_LIPIDIO', pr_lipidio_p)
      || format_array_json_number('PR_CARBOIDRATO', pr_carboidrato_p)
      || format_array_json_number('QT_KCAL_PROTEINA', qt_kcal_proteina_w)
      || format_array_json_number('QT_KCAL_LIPIDIO', qt_kcal_lipidio_w)
      || format_array_json_number('QT_KCAL_CARBOIDRATO', qt_kcal_carboidrato_w)
      || format_array_json_number('PR_CONC_PROTEINA_SOLUCAO', pr_conc_proteina_solucao_w)
      || format_array_json_number('PR_CONC_LIPIDIO_SOLUCAO', pr_conc_lipidio_solucao_w)
      || format_array_json_number('PR_CONC_GLIC_SOLUCAO', pr_conc_glic_solucao_w)      
      || format_array_json_number('QT_GRAMA_PROTEINA_KG_DIA', qt_grama_proteina_kg_dia_w)	
      || format_array_json_number('QT_GRAMA_NITROGENIO', qt_nitrogenio_total_w)			
      || format_array_json_number('QT_REL_CAL_NIT', qt_rel_cal_nit_w)
      || format_array_json_number('QT_VEL_INF_GLICOSE', qt_vel_inf_glicose_w)
      || format_array_json_number('QT_KCAL_PROTEICO', qt_kcal_proteico_w)
      || format_array_json_number('QT_KCAL_NAO_PROTEICO', qt_kcal_nao_proteico_w)
      || format_array_json_number('QT_GOTEJO_NPT', qt_gotejo_w)      
      || format_array_json_number('QT_VOLUME_DIARIO', qt_volume_total_w)
      || format_array_json_number('NR_SEQ_PROTOCOLO', nr_seq_protocolo_p);	
      ds_json_cpoe_w := substr(ds_json_cpoe_w, 1, length(ds_json_cpoe_w) -2) || '}, ';
  
  ds_json_cpoe_w := substr(ds_json_cpoe_w, 1, length(ds_json_cpoe_w) -2);

  ds_json_p := '{"CPOE_DIETA": ' || ds_json_cpoe_w || ', '
                  || ds_json_elem_w || ', '
                  || ds_json_prod_w ||'}';

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_kcal_kg_dia ( nr_seq_npt_cpoe_p bigint ,nr_seq_protocolo_p bigint ,qt_peso_p bigint ,kcal_kg_dia_p bigint ,pr_proteina_p bigint ,pr_carboidrato_p bigint ,pr_lipidio_p bigint ,nm_usuario_p text ,cd_estabelecimento_p bigint ,param_1034_p bigint ,param_1035_p bigint ,ds_json_p INOUT text ) FROM PUBLIC;

