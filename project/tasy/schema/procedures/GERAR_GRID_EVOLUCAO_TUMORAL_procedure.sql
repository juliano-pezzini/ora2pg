-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE colunas AS (nm_coluna_w varchar(255),
			dt_registro_w	timestamp);


CREATE OR REPLACE PROCEDURE gerar_grid_evolucao_tumoral ( nr_seq_registro_p bigint, nm_usuario_p text) AS $body$
DECLARE



/* vetor */

type vetor is table of colunas index by integer;

/* globais */

vetor_w			vetor;
vetor_result    vetor;
ivet			bigint := 0;
ind			integer;
dt_registro_w		timestamp;
nr_sequencia_w		bigint;
ds_medida_w		varchar(255);
nr_seq_medida_w		bigint;
ds_localizacao_w	varchar(255);
ds_valor_medida_w	varchar(500);
ds_comando_w		varchar(3000);
ds_parametro_w		varchar(3000);
ie_mensurar_w    varchar(1);
nm_registro_w varchar(255);
valor_inicial_w  double precision;



c01 CURSOR FOR
	SELECT TRUNC(A.DT_REGISTRO) DT_REGISTRO
	FROM recist_reg_localizacao A,
		 RECIST_REGISTRO B,
		 RECIST_LOCALIZACAO C
	WHERE B.NR_SEQUENCIA = C.NR_SEQ_REGISTRO
	AND C.NR_SEQUENCIA = A.NR_SEQ_LOCALIZACAO
	AND EXISTS (SELECT	1 FROM	recist_reg_localizacao x
	WHERE	x.nr_seq_registro	= nr_seq_registro_p
	AND	A.NR_SEQ_LOCALIZACAO = x.NR_SEQ_LOCALIZACAO)
	GROUP BY TRUNC(A.DT_REGISTRO)
	ORDER BY 1;


c02 CURSOR FOR
  SELECT LOC.NR_SEQUENCIA, LOC.DS_LOCALIZACAO, loc.ie_mensurar FROM recist_registro reg, recist_localizacao loc
LEFT OUTER JOIN recist_reg_localizacao rec ON (LOC.NR_SEQUENCIA = REC.NR_SEQ_LOCALIZACAO)
WHERE REG.NR_SEQUENCIA =  LOC.NR_SEQ_REGISTRO AND REG.NR_SEQUENCIA =  nr_seq_registro_p GROUP BY LOC.NR_SEQUENCIA ,
           LOC.ds_localizacao,
		   ie_mensurar
   ORDER BY 2;


c03 CURSOR FOR
	SELECT a.nr_seq_localizacao,
		   c.ds_localizacao,
		   round((a.QT_DIAMETRO_X)::numeric,1) || ' x ' || round((a.QT_DIAMETRO_y)::numeric,1)
	FROM recist_reg_localizacao A,
		 RECIST_REGISTRO B,
		 RECIST_LOCALIZACAO C
	WHERE B.NR_SEQUENCIA = C.NR_SEQ_REGISTRO
	AND C.NR_SEQUENCIA = A.NR_SEQ_LOCALIZACAO
	AND	TRUNC(a.dt_registro) = dt_registro_w
	AND EXISTS (SELECT	1 FROM	recist_reg_localizacao x
			WHERE	x.nr_seq_registro	= nr_seq_registro_p
			AND	A.NR_SEQ_LOCALIZACAO = x.NR_SEQ_LOCALIZACAO)
	ORDER BY 1;

/* Recist */

c04 CURSOR FOR
	SELECT SUM(CASE WHEN QT_DIAMETRO_X > QT_DIAMETRO_Y THEN QT_DIAMETRO_X ELSE QT_DIAMETRO_Y END) ||''  VALOR
	FROM RECIST_REG_LOCALIZACAO REC,
	RECIST_LOCALIZACAO RL
	WHERE  RL.NR_SEQUENCIA = REC.NR_SEQ_LOCALIZACAO
	AND RL.NR_SEQ_REGISTRO = nr_seq_registro_p
	AND RL.IE_MENSURAR = 'S'
	GROUP BY DT_REGISTRO
	ORDER BY DT_REGISTRO;

/* Alteração*/

c05 CURSOR FOR
		SELECT ROUND((dividir(((SUM(CASE WHEN QT_DIAMETRO_X > QT_DIAMETRO_Y THEN QT_DIAMETRO_X ELSE QT_DIAMETRO_Y END)) * 100) , valor_inicial_w) ) -100, 1)  VALOR
		FROM RECIST_REG_LOCALIZACAO REC,
		RECIST_LOCALIZACAO RL
		WHERE  RL.NR_SEQUENCIA = REC.NR_SEQ_LOCALIZACAO
		AND RL.NR_SEQ_REGISTRO = nr_seq_registro_p
		AND RL.IE_MENSURAR = 'S'
		GROUP BY DT_REGISTRO
		ORDER BY DT_REGISTRO;

/* Nadir */

c06 CURSOR FOR
		SELECT ROUND(dividir(((SUM(CASE WHEN QT_DIAMETRO_X > QT_DIAMETRO_Y THEN QT_DIAMETRO_X ELSE QT_DIAMETRO_Y END)) * 100),
		((SELECT MIN(SUM(CASE WHEN A.QT_DIAMETRO_X > A.QT_DIAMETRO_Y THEN A.QT_DIAMETRO_X ELSE A.QT_DIAMETRO_Y END))
				FROM RECIST_REG_LOCALIZACAO A,
				RECIST_LOCALIZACAO B
				WHERE  B.NR_SEQUENCIA = A.NR_SEQ_LOCALIZACAO
				AND B.NR_SEQ_REGISTRO = nr_seq_registro_p
				AND B.IE_MENSURAR = 'S'
				AND A.DT_REGISTRO < REC.DT_REGISTRO
				GROUP BY A.DT_REGISTRO))) -100,1)
		FROM RECIST_REG_LOCALIZACAO REC,
		RECIST_LOCALIZACAO RL
		WHERE  RL.NR_SEQUENCIA = REC.NR_SEQ_LOCALIZACAO
		AND RL.NR_SEQ_REGISTRO = nr_seq_registro_p
		AND RL.IE_MENSURAR = 'S'
		GROUP BY DT_REGISTRO
		ORDER BY DT_REGISTRO;

/* Response */

c07 CURSOR FOR
	SELECT obter_status_avaliacao(B.NR_SEQUENCIA,valor_inicial_w,A.DT_REGISTRO) valor
	FROM recist_reg_localizacao A,
		 RECIST_REGISTRO B,
		 RECIST_LOCALIZACAO C
	WHERE B.NR_SEQUENCIA = C.NR_SEQ_REGISTRO
	AND C.NR_SEQUENCIA = A.NR_SEQ_LOCALIZACAO
	AND EXISTS (SELECT	1 FROM	recist_reg_localizacao x
	WHERE	x.nr_seq_registro	= nr_seq_registro_p
	AND	A.NR_SEQ_LOCALIZACAO = x.NR_SEQ_LOCALIZACAO)
	GROUP BY TRUNC(A.DT_REGISTRO) ,  obter_status_avaliacao(B.NR_SEQUENCIA,valor_inicial_w,A.DT_REGISTRO)
	ORDER BY TRUNC(A.DT_REGISTRO);


BEGIN

delete from w_recist_registro
where nm_usuario	= nm_usuario_p;

if (nr_seq_registro_p IS NOT NULL AND nr_seq_registro_p::text <> '') then

	ivet	:= 0;
	open C01;
	loop
	fetch C01 into
		dt_registro_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		ivet := ivet + 1;
		vetor_w[ivet].nm_coluna_w 	:= to_char(dt_registro_w,'dd/MM/yyyy');
		vetor_w[ivet].dt_registro_w   	:= dt_registro_w;
		end;
	end loop;
	close C01;

	/* completar vetor se necessário  */

	ind := ivet;
	while(ind < 30) loop
		begin
		ind := ind + 1;
		vetor_w[ind].nm_coluna_w := null;
		vetor_w[ind].dt_registro_w	:= null;
		end;
	end loop;

	select	nextval('w_recist_registro_seq')
	into STRICT	nr_sequencia_w
	;

	insert into  w_recist_registro(
		nr_sequencia,
		nr_seq_localizacao,
		nr_seq_registro,
		IE_MENSURAR,
		ie_ordem,
		nm_usuario,
		dt_atualizacao,
		ds_result1,
		ds_result2,
		ds_result3,
		ds_result4,
		ds_result5,
		ds_result6,
		ds_result7,
		ds_result8,
		ds_result9,
		ds_result10,
		ds_result11,
		ds_result12,
		ds_result13,
		ds_result14,
		ds_result15,
		ds_result16,
		ds_result17,
		ds_result18,
		ds_result19,
		ds_result20,
		ds_result21,
		ds_result22,
		ds_result23,
		ds_result24,
		ds_result25,
		ds_result26,
		ds_result27,
		ds_result28,
		ds_result29,
		ds_result30)
	Values ( nr_sequencia_w,
		null,
		nr_seq_registro_p,
		'S',
		-3,
		nm_usuario_p,
		clock_timestamp(),
		vetor_w[1].nm_coluna_w,
		vetor_w[2].nm_coluna_w,
		vetor_w[3].nm_coluna_w,
		vetor_w[4].nm_coluna_w,
		vetor_w[5].nm_coluna_w,
		vetor_w[6].nm_coluna_w,
		vetor_w[7].nm_coluna_w,
		vetor_w[8].nm_coluna_w,
		vetor_w[9].nm_coluna_w,
		vetor_w[10].nm_coluna_w,
		vetor_w[11].nm_coluna_w,
		vetor_w[12].nm_coluna_w,
		vetor_w[13].nm_coluna_w,
		vetor_w[14].nm_coluna_w,
		vetor_w[15].nm_coluna_w,
		vetor_w[16].nm_coluna_w,
		vetor_w[17].nm_coluna_w,
		vetor_w[18].nm_coluna_w,
		vetor_w[19].nm_coluna_w,
		vetor_w[20].nm_coluna_w,
		vetor_w[21].nm_coluna_w,
		vetor_w[22].nm_coluna_w,
		vetor_w[23].nm_coluna_w,
		vetor_w[24].nm_coluna_w,
		vetor_w[25].nm_coluna_w,
		vetor_w[26].nm_coluna_w,
		vetor_w[27].nm_coluna_w,
		vetor_w[28].nm_coluna_w,
		vetor_w[29].nm_coluna_w,
		vetor_w[30].nm_coluna_w);


	open C02;
	loop
	fetch C02 into
		nr_seq_medida_w,
		ds_medida_w,
		ie_mensurar_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		select	nextval('w_recist_registro_seq')
		into STRICT	nr_sequencia_w
		;

		insert into w_recist_registro(
			nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			ie_ordem,
			ie_mensurar,
			NR_SEQ_LOCALIZACAO,
			ds_localizacao,
			NR_SEQ_REGISTRO)
		values (	nr_sequencia_w,
			nm_usuario_p,
			clock_timestamp(),
			1,
			ie_mensurar_w,
			nr_seq_medida_w,
			ds_medida_w,
			nr_seq_registro_p);
		end;
	end loop;
	close C02;


	ind := 0;
	while(ind < 30) loop
		begin
		ind := ind + 1;
		dt_registro_w := vetor_w[ind].dt_registro_w;
		open C03;
		loop
		fetch C03 into
			nr_seq_medida_w,
			ds_valor_medida_w,
			ds_localizacao_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin

			ds_comando_w	:= ' update w_recist_registro ' ||
					  ' set ds_result' || to_char(ind) ||'= :ds_valor '||
					  ' where nm_usuario = :nm_usuario ' ||
					  ' and   nr_seq_localizacao = :nr_seq_localizacao ';

			if (ds_localizacao_w IS NOT NULL AND ds_localizacao_w::text <> '') then
				ds_parametro_w	:= 'ds_valor='||ds_localizacao_w||'#@#@nm_usuario='||nm_usuario_p||'#@#@nr_seq_localizacao='||nr_seq_medida_w||'#@#@';
			else
				ds_parametro_w	:= 'ds_valor='||coalesce(ds_valor_medida_w,' ')||'#@#@nm_usuario='||nm_usuario_p||'#@#@nr_seq_localizacao='||nr_seq_medida_w||'#@#@';
			end if;

			CALL exec_sql_dinamico_bv('TASY', ds_comando_w,ds_parametro_w);
			end;
		end loop;
		close C03;

		end;
	end loop;

	/* Resultado Recist  */

	ivet	:= 0;
	open C04;
	loop
	fetch C04 into
		nm_registro_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		ivet := ivet + 1;
		vetor_result[ivet].nm_coluna_w 	:= nm_registro_w;
		vetor_result[ivet].dt_registro_w   	:= Null;
		end;
	end loop;
	close C04;


	ind := ivet;
	while(ind < 30) loop
		begin
		ind := ind + 1;
		vetor_result[ind].nm_coluna_w := null;
		vetor_result[ind].dt_registro_w	:= null;
		end;
	end loop;

	select	nextval('w_recist_registro_seq')
	into STRICT	nr_sequencia_w
	;

	insert into  w_recist_registro(
		nr_sequencia,
		nr_seq_localizacao,
		nr_seq_registro,
		IE_MENSURAR,
		ie_ordem,
		nm_usuario,
		dt_atualizacao,
		ds_result1,
		ds_result2,
		ds_result3,
		ds_result4,
		ds_result5,
		ds_result6,
		ds_result7,
		ds_result8,
		ds_result9,
		ds_result10,
		ds_result11,
		ds_result12,
		ds_result13,
		ds_result14,
		ds_result15,
		ds_result16,
		ds_result17,
		ds_result18,
		ds_result19,
		ds_result20,
		ds_result21,
		ds_result22,
		ds_result23,
		ds_result24,
		ds_result25,
		ds_result26,
		ds_result27,
		ds_result28,
		ds_result29,
		ds_result30)
	Values ( nr_sequencia_w,
		null,
		nr_seq_registro_p,
		'S',
		-4,
		nm_usuario_p,
		clock_timestamp(),
		vetor_result[1].nm_coluna_w,
		vetor_result[2].nm_coluna_w,
		vetor_result[3].nm_coluna_w,
		vetor_result[4].nm_coluna_w,
		vetor_result[5].nm_coluna_w,
		vetor_result[6].nm_coluna_w,
		vetor_result[7].nm_coluna_w,
		vetor_result[8].nm_coluna_w,
		vetor_result[9].nm_coluna_w,
		vetor_result[10].nm_coluna_w,
		vetor_result[11].nm_coluna_w,
		vetor_result[12].nm_coluna_w,
		vetor_result[13].nm_coluna_w,
		vetor_result[14].nm_coluna_w,
		vetor_result[15].nm_coluna_w,
		vetor_result[16].nm_coluna_w,
		vetor_result[17].nm_coluna_w,
		vetor_result[18].nm_coluna_w,
		vetor_result[19].nm_coluna_w,
		vetor_result[20].nm_coluna_w,
		vetor_result[21].nm_coluna_w,
		vetor_result[22].nm_coluna_w,
		vetor_result[23].nm_coluna_w,
		vetor_result[24].nm_coluna_w,
		vetor_result[25].nm_coluna_w,
		vetor_result[26].nm_coluna_w,
		vetor_result[27].nm_coluna_w,
		vetor_result[28].nm_coluna_w,
		vetor_result[29].nm_coluna_w,
		vetor_result[30].nm_coluna_w);

	valor_inicial_w := vetor_result[1].nm_coluna_w;

	/* Resultado Change  */

	ivet	:= 0;
	open C05;
	loop
	fetch C05 into
		nm_registro_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
		ivet := ivet + 1;
		vetor_result[ivet].nm_coluna_w 	:= nm_registro_w;
		vetor_result[ivet].dt_registro_w   	:= Null;
		end;
	end loop;
	close C05;

	ind := ivet;
	while(ind < 30) loop
		begin
		ind := ind + 1;
		vetor_result[ind].nm_coluna_w := null;
		vetor_result[ind].dt_registro_w	:= null;
		end;
	end loop;

	select	nextval('w_recist_registro_seq')
	into STRICT	nr_sequencia_w
	;

	insert into  w_recist_registro(
		nr_sequencia,
		nr_seq_localizacao,
		nr_seq_registro,
		IE_MENSURAR,
		ie_ordem,
		nm_usuario,
		dt_atualizacao,
		ds_result1,
		ds_result2,
		ds_result3,
		ds_result4,
		ds_result5,
		ds_result6,
		ds_result7,
		ds_result8,
		ds_result9,
		ds_result10,
		ds_result11,
		ds_result12,
		ds_result13,
		ds_result14,
		ds_result15,
		ds_result16,
		ds_result17,
		ds_result18,
		ds_result19,
		ds_result20,
		ds_result21,
		ds_result22,
		ds_result23,
		ds_result24,
		ds_result25,
		ds_result26,
		ds_result27,
		ds_result28,
		ds_result29,
		ds_result30)
	Values ( nr_sequencia_w,
		null,
		nr_seq_registro_p,
		'S',
		-5,
		nm_usuario_p,
		clock_timestamp(),
		vetor_result[1].nm_coluna_w,
		vetor_result[2].nm_coluna_w,
		vetor_result[3].nm_coluna_w,
		vetor_result[4].nm_coluna_w,
		vetor_result[5].nm_coluna_w,
		vetor_result[6].nm_coluna_w,
		vetor_result[7].nm_coluna_w,
		vetor_result[8].nm_coluna_w,
		vetor_result[9].nm_coluna_w,
		vetor_result[10].nm_coluna_w,
		vetor_result[11].nm_coluna_w,
		vetor_result[12].nm_coluna_w,
		vetor_result[13].nm_coluna_w,
		vetor_result[14].nm_coluna_w,
		vetor_result[15].nm_coluna_w,
		vetor_result[16].nm_coluna_w,
		vetor_result[17].nm_coluna_w,
		vetor_result[18].nm_coluna_w,
		vetor_result[19].nm_coluna_w,
		vetor_result[20].nm_coluna_w,
		vetor_result[21].nm_coluna_w,
		vetor_result[22].nm_coluna_w,
		vetor_result[23].nm_coluna_w,
		vetor_result[24].nm_coluna_w,
		vetor_result[25].nm_coluna_w,
		vetor_result[26].nm_coluna_w,
		vetor_result[27].nm_coluna_w,
		vetor_result[28].nm_coluna_w,
		vetor_result[29].nm_coluna_w,
		vetor_result[30].nm_coluna_w);

	/* Resultado Nadir  */

	ivet	:= 0;
	open C06;
	loop
	fetch C06 into
		nm_registro_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin
		ivet := ivet + 1;
		vetor_result[ivet].nm_coluna_w 	:= nm_registro_w;
		vetor_result[ivet].dt_registro_w   	:= Null;
		end;
	end loop;
	close C06;

	ind := ivet;
	while(ind < 30) loop
		begin
		ind := ind + 1;
		vetor_result[ind].nm_coluna_w := null;
		vetor_result[ind].dt_registro_w	:= null;
		end;
	end loop;

	select	nextval('w_recist_registro_seq')
	into STRICT	nr_sequencia_w
	;

	insert into  w_recist_registro(
		nr_sequencia,
		nr_seq_localizacao,
		nr_seq_registro,
		IE_MENSURAR,
		ie_ordem,
		nm_usuario,
		dt_atualizacao,
		ds_result1,
		ds_result2,
		ds_result3,
		ds_result4,
		ds_result5,
		ds_result6,
		ds_result7,
		ds_result8,
		ds_result9,
		ds_result10,
		ds_result11,
		ds_result12,
		ds_result13,
		ds_result14,
		ds_result15,
		ds_result16,
		ds_result17,
		ds_result18,
		ds_result19,
		ds_result20,
		ds_result21,
		ds_result22,
		ds_result23,
		ds_result24,
		ds_result25,
		ds_result26,
		ds_result27,
		ds_result28,
		ds_result29,
		ds_result30)
	Values ( nr_sequencia_w,
		null,
		nr_seq_registro_p,
		'S',
		-6,
		nm_usuario_p,
		clock_timestamp(),
		vetor_result[1].nm_coluna_w,
		vetor_result[2].nm_coluna_w,
		vetor_result[3].nm_coluna_w,
		vetor_result[4].nm_coluna_w,
		vetor_result[5].nm_coluna_w,
		vetor_result[6].nm_coluna_w,
		vetor_result[7].nm_coluna_w,
		vetor_result[8].nm_coluna_w,
		vetor_result[9].nm_coluna_w,
		vetor_result[10].nm_coluna_w,
		vetor_result[11].nm_coluna_w,
		vetor_result[12].nm_coluna_w,
		vetor_result[13].nm_coluna_w,
		vetor_result[14].nm_coluna_w,
		vetor_result[15].nm_coluna_w,
		vetor_result[16].nm_coluna_w,
		vetor_result[17].nm_coluna_w,
		vetor_result[18].nm_coluna_w,
		vetor_result[19].nm_coluna_w,
		vetor_result[20].nm_coluna_w,
		vetor_result[21].nm_coluna_w,
		vetor_result[22].nm_coluna_w,
		vetor_result[23].nm_coluna_w,
		vetor_result[24].nm_coluna_w,
		vetor_result[25].nm_coluna_w,
		vetor_result[26].nm_coluna_w,
		vetor_result[27].nm_coluna_w,
		vetor_result[28].nm_coluna_w,
		vetor_result[29].nm_coluna_w,
		vetor_result[30].nm_coluna_w);


	ivet	:= 0;
	open C07;
	loop
	fetch C07 into
		nm_registro_w;
	EXIT WHEN NOT FOUND; /* apply on C07 */
		begin
		ivet := ivet + 1;
		vetor_result[ivet].nm_coluna_w 	:= nm_registro_w;
		vetor_result[ivet].dt_registro_w   	:= Null;
		end;
	end loop;
	close C07;

	ind := ivet;
	while(ind < 30) loop
		begin
		ind := ind + 1;
		vetor_result[ind].nm_coluna_w := null;
		vetor_result[ind].dt_registro_w	:= null;
		end;
	end loop;

	select	nextval('w_recist_registro_seq')
	into STRICT	nr_sequencia_w
	;

	insert into  w_recist_registro(
		nr_sequencia,
		nr_seq_localizacao,
		nr_seq_registro,
		IE_MENSURAR,
		ie_ordem,
		nm_usuario,
		dt_atualizacao,
		ds_result1,
		ds_result2,
		ds_result3,
		ds_result4,
		ds_result5,
		ds_result6,
		ds_result7,
		ds_result8,
		ds_result9,
		ds_result10,
		ds_result11,
		ds_result12,
		ds_result13,
		ds_result14,
		ds_result15,
		ds_result16,
		ds_result17,
		ds_result18,
		ds_result19,
		ds_result20,
		ds_result21,
		ds_result22,
		ds_result23,
		ds_result24,
		ds_result25,
		ds_result26,
		ds_result27,
		ds_result28,
		ds_result29,
		ds_result30)
	Values ( nr_sequencia_w,
		null,
		nr_seq_registro_p,
		'S',
		-7,
		nm_usuario_p,
		clock_timestamp(),
		vetor_result[1].nm_coluna_w,
		vetor_result[2].nm_coluna_w,
		vetor_result[3].nm_coluna_w,
		vetor_result[4].nm_coluna_w,
		vetor_result[5].nm_coluna_w,
		vetor_result[6].nm_coluna_w,
		vetor_result[7].nm_coluna_w,
		vetor_result[8].nm_coluna_w,
		vetor_result[9].nm_coluna_w,
		vetor_result[10].nm_coluna_w,
		vetor_result[11].nm_coluna_w,
		vetor_result[12].nm_coluna_w,
		vetor_result[13].nm_coluna_w,
		vetor_result[14].nm_coluna_w,
		vetor_result[15].nm_coluna_w,
		vetor_result[16].nm_coluna_w,
		vetor_result[17].nm_coluna_w,
		vetor_result[18].nm_coluna_w,
		vetor_result[19].nm_coluna_w,
		vetor_result[20].nm_coluna_w,
		vetor_result[21].nm_coluna_w,
		vetor_result[22].nm_coluna_w,
		vetor_result[23].nm_coluna_w,
		vetor_result[24].nm_coluna_w,
		vetor_result[25].nm_coluna_w,
		vetor_result[26].nm_coluna_w,
		vetor_result[27].nm_coluna_w,
		vetor_result[28].nm_coluna_w,
		vetor_result[29].nm_coluna_w,
		vetor_result[30].nm_coluna_w);
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_grid_evolucao_tumoral ( nr_seq_registro_p bigint, nm_usuario_p text) FROM PUBLIC;

