-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_desdobrar_lote_prescr ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
ap_lote_w				ap_lote%rowtype;
ap_lote_item_w			ap_lote_item%rowtype;
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w	intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w		intpd_eventos_sistema.nr_seq_sistema%type;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
ie_sistema_externo_w	varchar(15);
ds_erro_w				varchar(4000) :=null;
i						integer;
nr_seq_item_w			ap_lotE_item.nr_sequencia%type;
nr_novo_lote_w			ap_lote.nr_sequencia%type;
reg_integracao_p		gerar_int_padrao.reg_integracao;
reg_integracao2_p		gerar_int_padrao.reg_integracao;
cd_estabelecimento_w 	prescr_medica.cd_estabelecimento%type;
cd_local_estoque_w		ap_lote.cd_local_estoque%type;
cd_setor_atendimento_w	ap_lote.cd_setor_atendimento%type;
ie_status_lote_w		ap_lote.ie_status_lote%type;

c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/BATCH' passing xml_p columns
	NR_SEQ_LOTE			bigint	path	'NR_SEQ_LOTE',
	NR_SEQ_MOTIVO_DESD		bigint	path	'NR_SEQ_MOTIVO_DESD',
	DS_OBSERVACAO			varchar(255)	path	'DS_OBSERVACAO',
	xml_itens_lote			xml		path	'ITENS_BATCH');

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/ITENS_BATCH/ITEM_BATCH' passing xml_p columns
	NR_SEQ_MAT_HOR			bigint	path	'NR_SEQ_MAT_HOR',
	NR_SEQ_ITEM_LOTE		bigint	path	'NR_SEQ_ITEM_LOTE',
	QT_ORIGINAL			varchar(40)	path	'QT_ORIGINAL',
	QT_AJUSTE			varchar(40)	path	'QT_AJUSTE');

c02_w	c02%rowtype;


BEGIN
begin
/*'Atualiza o status da fila para Em processamento'*/

update	intpd_fila_transmissao
set	ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

/*'Realiza o commit para nao alterar o status de processamento em caso de rollback por existir consistencia. Existe tratamento de excecao abaixo para colocar o status de erro em caso de falha'*/

commit;

/*'Busca os dados da regra do registro da fila que esta em processamento'*/

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w	:=	nr_seq_sistema_w;

/*'Alimenta as informacoes iniciais de controle e consistencia de cada atributo do XML'*/

reg_integracao_w.nr_seq_fila_transmissao	:= nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:= 'R';
reg_integracao_w.ie_sistema_externo		:= ie_sistema_externo_w;
reg_integracao_w.ie_conversao			:= ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:= nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao		:= nr_seq_regra_w;
reg_integracao_w.qt_reg_log			:= 0;
reg_integracao_w.intpd_log_receb.delete;

open c01;
loop
fetch c01 into	
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	reg_integracao_w.nm_tabela	:=	'AP_LOTE';
	reg_integracao_w.nm_elemento	:=	'BATCH';
	reg_integracao_w.nr_seq_visao	:=	null;	
	
	/*'Consiste cada atributo do XML'*/
	
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_LOTE', c01_w.nr_seq_lote, 'N', ap_lote_w.nr_sequencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; ap_lote_w.nr_sequencia := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_MOTIVO_DESD', c01_w.nr_seq_motivo_desd, 'N', ap_lote_w.nr_seq_mot_desdobrar) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; ap_lote_w.nr_seq_mot_desdobrar := _ora2pg_r.ds_valor_retorno_p;
	
	CALL deletar_w_ap_lote_nr_lote(ap_lote_w.nr_sequencia,'WMS');
	
	open c02;
	loop
	fetch c02 into	
		c02_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		
		c02_w.qt_original := (somente_numero_virg_char(replace(c02_w.qt_original, '.', ',')))::numeric;
		c02_w.qt_ajuste := (somente_numero_virg_char(replace(c02_w.qt_ajuste, '.', ',')))::numeric;
		
		reg_integracao_w.nm_tabela	:=	'AP_LOTE_ITEM';
		reg_integracao_w.nm_elemento	:=	'ITEM_BATCH';
		reg_integracao_w.nr_seq_visao	:=	null;		
		
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_MAT_HOR', c02_w.nr_seq_mat_hor, 'N', ap_lote_item_w.nr_seq_mat_hor) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; ap_lote_item_w.nr_seq_mat_hor := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_ITEM_LOTE', c02_w.nr_seq_item_lote, 'N', ap_lote_item_w.nr_sequencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; ap_lote_item_w.nr_sequencia := _ora2pg_r.ds_valor_retorno_p;
		
		if (reg_integracao_w.qt_reg_log = 0) then
			begin
			
			select	max(nr_sequencia)
			into STRICT	nr_seq_item_w
			from	ap_lote_item
			where 	nr_seq_mat_hor = ap_lote_item_w.nr_seq_mat_hor;
			
			CALL gerar_w_ap_lote_desdob(ap_lote_w.nr_sequencia, nr_seq_item_w, ap_lote_item_w.nr_seq_mat_hor, c02_w.qt_original, c02_w.qt_ajuste);

			end;
		end if;
		end;
	end loop;
	close c02;
	end;
	
	nr_novo_lote_w := desdobrar_lote_prescricao(ap_lote_w.nr_sequencia, 'WMS', 'D', c01_w.nr_seq_motivo_desd, c01_w.ds_observacao, 'N', nr_novo_lote_w);
	
	/*enviar novo lote gerado*/

	select	max(b.cd_estabelecimento),
			max(a.cd_local_estoque),
			max(a.cd_setor_atendimento)
	into STRICT	cd_estabelecimento_w,
			cd_local_estoque_w,
			cd_setor_atendimento_w
	from	ap_lote a,
			prescr_medica b
	where 	a.nr_sequencia = nr_novo_lote_w
	and 	a.nr_prescricao = b.nr_prescricao;
	
	reg_integracao_p.cd_estab_documento		:= cd_estabelecimento_w;
	reg_integracao_p.cd_local_estoque		:= cd_local_estoque_w;
	reg_integracao_p.cd_setor_atendimento	:= cd_setor_atendimento_w;
	reg_integracao_p.nr_seq_agrupador		:= nr_novo_lote_w;
	reg_integracao_p := gerar_int_padrao.gravar_integracao('260', nr_novo_lote_w, 'WMS', reg_integracao_p);
	
	/*enviar cancelamento*/

	select	max(ie_status_lote),
			max(b.cd_estabelecimento),
			max(a.cd_local_estoque),
			max(a.cd_setor_atendimento)
	into STRICT	ie_status_lote_w,
			cd_estabelecimento_w,
			cd_local_estoque_w,
			cd_setor_atendimento_w
	from	ap_lote a,
			prescr_medica b
	where 	a.nr_sequencia = ap_lote_w.nr_sequencia
	and 	a.nr_prescricao = b.nr_prescricao;
	
	if (ie_status_lote_w <> 'G') then
		reg_integracao2_p.cd_estab_documento	:= cd_estabelecimento_w;
		reg_integracao2_p.cd_local_estoque	:= cd_local_estoque_w;
		reg_integracao2_p.nr_seq_agrupador	:= ap_lote_w.nr_sequencia;
		reg_integracao2_p.cd_setor_atendimento	:= cd_setor_atendimento_w;
		reg_integracao2_p := gerar_int_padrao.gravar_integracao('275', ap_lote_w.nr_sequencia, 'WMS', reg_integracao2_p);
	end if;
	
	update	intpd_fila_transmissao
	set	ie_status = 'S',
		nr_seq_documento = c01_w.nr_seq_lote
	where	nr_sequencia = nr_sequencia_p;
	
end loop;
close c01;
exception
when others then
	begin
	ds_erro_w	:= substr(sqlerrm,1,4000);
	rollback;
	
	update	intpd_fila_transmissao
	set	ie_status = 'E',
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;
	end;
end;

if (reg_integracao_w.qt_reg_log > 0) then
	begin
	
	rollback;
	
	update	intpd_fila_transmissao
	set	ie_status = 'E',
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;
	
	for i in 0..reg_integracao_w.qt_reg_log-1 loop
		intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
	end loop;
	end;
end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_desdobrar_lote_prescr ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

