-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_confirma_token ( nr_seq_transacao_p bigint, ie_tipo_transacao_p text, nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nm_usuario_p pls_carteira_leitura_token.nm_usuario%type, cd_estabelecimento_p bigint) AS $body$
DECLARE


ie_confirma_w			varchar(1) := 'N';
ie_valida_token_w		varchar(1) := 'N';
cd_usuario_plano_w		varchar(255);
nr_seq_segurado_w		pls_segurado_carteira.nr_seq_segurado%type;
ds_token_w			ptu_pedido_autorizacao.ds_token%type;
nr_seq_cart_leitura_w	pls_carteira_leitura_token.nr_sequencia%type;
ie_status_token_w		pls_carteira_leitura_token.ie_status%type;
nr_segundos_start		varchar(255);
nr_segundos_count		varchar(255);
nr_seq_carteira_leitura_w	pls_carteira_leitura.nr_sequencia%type;
nr_seq_prestador_w		pls_guia_plano.nr_seq_prestador%type;
nr_seq_prestador_solic_w	pls_guia_plano.nr_seq_prestador%type;


BEGIN

if (ie_tipo_transacao_p = 'L') then
	begin
		select	coalesce(ie_valida_token, 'N')
		into STRICT		ie_valida_token_w
		from	pls_param_atend_geral;
	exception
	when others then
		ie_valida_token_w := 'N';
	end;
else
	begin
		select	coalesce(ie_valida_token, 'N')
		into STRICT		ie_valida_token_w
		from	pls_param_intercambio_scs;
	exception
	when others then
		ie_valida_token_w := 'N';
	end;
end if;


if (ie_valida_token_w = 'S') then

	/*
		PA - PEDIDO AUTORIZACAO
		PC - PEDIDO COMPLEMENTO
		IA - INTERNACAO
		L- BENEFICIARIO LOCAL
	*/
	if (ie_tipo_transacao_p = 'PA') then
		select	lpad(cd_unimed_beneficiario, 4, '0') || cd_usuario_plano,
			ds_token
		into STRICT	cd_usuario_plano_w,
			ds_token_w
		from 	ptu_pedido_autorizacao
		where 	nr_sequencia = nr_seq_transacao_p;
	elsif (ie_tipo_transacao_p = 'PC') then
		select	lpad(cd_unimed_beneficiario, 4, '0') || cd_usuario_plano,
			ds_token
		into STRICT	cd_usuario_plano_w,
			ds_token_w
		from 	ptu_pedido_compl_aut
		where 	nr_sequencia = nr_seq_transacao_p;
	elsif (ie_tipo_transacao_p = 'IA') then
		select	lpad(cd_unimed_beneficiario, 4, '0') || cd_usuario_plano,
			ds_token
		into STRICT	cd_usuario_plano_w,
			ds_token_w
		from 	ptu_comunicacao_internacao
		where 	nr_sequencia = nr_seq_transacao_p;
	elsif (ie_tipo_transacao_p = 'L') then
		if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
			select	cd_validacao_benef_tiss,
					substr(pls_obter_dados_segurado(nr_seq_segurado,'CR'),1,255)
			into STRICT		ds_token_w,
					cd_usuario_plano_w
			from 	pls_requisicao
			where 	nr_sequencia = nr_seq_requisicao_p;
		elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
			select	cd_validacao_benef_tiss,
					substr(pls_obter_dados_segurado(nr_seq_segurado,'CR'),1,255)
			into STRICT		ds_token_w,
					cd_usuario_plano_w
			from 	pls_guia_plano
			where 	nr_sequencia = nr_seq_requisicao_p;
		end if;
	end if;
	
	if (ds_token_w IS NOT NULL AND ds_token_w::text <> '') then
		if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
			select	nr_seq_segurado
			into STRICT		nr_seq_segurado_w
			from	pls_requisicao
			where	nr_sequencia	= nr_seq_requisicao_p;
		elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
			select	nr_seq_segurado
			into STRICT		nr_seq_segurado_w
			from	pls_guia_plano
			where	nr_sequencia	= nr_seq_guia_p;
		end if;

		insert into pls_carteira_leitura(nr_sequencia, cd_usuario_plano, cd_estabelecimento,
			dt_leitura, nm_usuario_leitura, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			nr_seq_segurado, ie_tipo_leitura, ds_tarja_magnetica)
		values (nextval('pls_carteira_leitura_seq'), cd_usuario_plano_w, coalesce(cd_estabelecimento_p, wheb_usuario_pck.get_cd_estabelecimento()),
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			nr_seq_segurado_w, null, null) return;

		begin
			nr_seq_cart_leitura_w := pls_valida_token(ds_token_w, nm_usuario_p, nr_seq_carteira_leitura_w, 'S', 'N', nr_seq_cart_leitura_w);

			select	max(ie_status)
			into STRICT		ie_status_token_w
			from	pls_carteira_leitura_token
			where	nr_sequencia = nr_seq_cart_leitura_w;
		exception
		when others then
			ie_status_token_w := '1';
			ie_confirma_w := 'N';
		end;

		if (ie_status_token_w = 1) then
			nr_segundos_count := 0;
			select	to_char(clock_timestamp() + interval '30 days'/24/60/60,'dd/mm/yyyy hh24:mi:ss')
			into STRICT		nr_segundos_start
			;
			
			while(nr_segundos_count < nr_segundos_start) loop
				select	max(ie_status)
				into STRICT		ie_status_token_w
				from	pls_carteira_leitura_token
				where	nr_sequencia = nr_seq_cart_leitura_w;

				if (ie_status_token_w != 1) then
					exit;
				end if;

				select	to_char(clock_timestamp(),'dd/mm/yyyy hh24:mi:ss')
				into STRICT		nr_segundos_count
				;
			end loop;
		end if;

		if (ie_status_token_w = 1) then
			if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
				CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p, 'L', 'Token recebido e processado com falha.', null, nm_usuario_p);
			elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
				CALL pls_guia_gravar_historico(nr_seq_guia_p, 2, 'Token recebido e processado com falha.', null, nm_usuario_p);
			end if;
			ie_confirma_w := 'N';
		elsif (ie_status_token_w = 2) then
			if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
				CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p, 'L', 'Token recebido e processado com sucesso.', null, nm_usuario_p);
			elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
				CALL pls_guia_gravar_historico(nr_seq_guia_p, 2, 'Token recebido e processado com sucesso.', null, nm_usuario_p);
			end if;
			ie_confirma_w := 'S';
		elsif (ie_status_token_w = 3) then
			if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
				CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p, 'L', expressao_pck.obter_desc_expressao(969825), null, nm_usuario_p);
			elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
				CALL pls_guia_gravar_historico(nr_seq_guia_p, 2, expressao_pck.obter_desc_expressao(969825), null, nm_usuario_p);
			end if;
			ie_confirma_w := 'N';
		elsif (ie_status_token_w = 4) then
			if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
				CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p, 'L', expressao_pck.obter_desc_expressao(969781), null, nm_usuario_p);
			elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
				CALL pls_guia_gravar_historico(nr_seq_guia_p, 2, expressao_pck.obter_desc_expressao(969781), null, nm_usuario_p);
			end if;
			ie_confirma_w := 'N';
		end if;
		
		if (ie_tipo_transacao_p = 'PA') then
			update	ptu_pedido_autorizacao
			set	ie_status_token = ie_status_token_w
			where	nr_sequencia = nr_seq_transacao_p;
		elsif (ie_tipo_transacao_p = 'PC') then
			update	ptu_pedido_compl_aut
			set	ie_status_token = ie_status_token_w
			where	nr_sequencia = nr_seq_transacao_p;
		elsif (ie_tipo_transacao_p = 'IA') then
			update	ptu_comunicacao_internacao
			set	ie_status_token = ie_status_token_w
			where	nr_sequencia = nr_seq_transacao_p;
		elsif (ie_tipo_transacao_p = 'L') then
			if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
				CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p, 'L', 'Token informado: ' || ds_token_w, null, nm_usuario_p);
			elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
				CALL pls_guia_gravar_historico(nr_seq_guia_p, 2, 'Token informado: ' || ds_token_w, null, nm_usuario_p);
			end if;
		end if;
	else
		if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
			CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p, 'L', expressao_pck.obter_desc_expressao(880771), null, nm_usuario_p);
		elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
			CALL pls_guia_gravar_historico(nr_seq_guia_p, 2, expressao_pck.obter_desc_expressao(880771), null, nm_usuario_p);
		end if;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_confirma_token ( nr_seq_transacao_p bigint, ie_tipo_transacao_p text, nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nm_usuario_p pls_carteira_leitura_token.nm_usuario%type, cd_estabelecimento_p bigint) FROM PUBLIC;

