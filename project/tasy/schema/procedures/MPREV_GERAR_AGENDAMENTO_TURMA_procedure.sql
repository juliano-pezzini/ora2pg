-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mprev_gerar_agendamento_turma ( nr_sequencia_p bigint, nm_usuario_p text, ie_opcao_p text, qt_mensagens_erro_p INOUT bigint, qt_mensagens_atencao_p INOUT bigint, qt_mensagens_confirm_p INOUT bigint) AS $body$
DECLARE


dados_agendamento	mprev_agenda_pck.dados_agendamento;

qt_repeticao_w		mprev_grupo_col_turma_hor.qt_repeticao%type;
qt_repetiu_w		mprev_grupo_col_turma_hor.qt_repeticao%type := 0;
ie_frequencia_w		mprev_grupo_col_turma_hor.ie_frequencia%type;
ie_dia_semana_w		mprev_grupo_col_turma_hor.ie_dia_semana%type;
dt_referencia_w		timestamp;
hr_inicio_w		timestamp;
hr_termino_w		timestamp;
dt_referencia_ant_w	timestamp;
dt_inicio_w		timestamp;
nr_seq_agendamento_novo_w	mprev_agendamento.nr_sequencia%type;
dt_fim_repeticao_w	timestamp;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
nr_seq_grupo_tema_w	mprev_grupo_col_turma_hor.nr_seq_grupo_tema%type;
ie_semana_w		mprev_grupo_col_turma_hor.ie_semana%type;
ie_forma_atendimento_w	mprev_grupo_col_turma_hor.ie_forma_atendimento_mprev%type;
dt_inicio_turma_w			mprev_grupo_col_turma.dt_inicio%type;
dt_fim_turma_w				mprev_grupo_col_turma.dt_termino%type;
	
c02 CURSOR FOR
	SELECT 	cd_agenda
	from 	mprev_grupo_turma_hor_prof
	where 	nr_seq_horario = nr_sequencia_p;
	

BEGIN

select	max(a.dt_inicio),
		max(a.dt_termino)
into STRICT	dt_inicio_turma_w,
		dt_fim_turma_w
from	mprev_grupo_col_turma a,
		mprev_grupo_col_turma_hor b
where	b.nr_sequencia = nr_sequencia_p
and		a.nr_sequencia = b.nr_seq_turma;

dados_agendamento.nr_sequencia		:= 0;			
dados_agendamento.nr_seq_participante	:= null;
dados_agendamento.ds_utilizacao		:= null;
dados_agendamento.cd_agenda_profissional	:= null;
dados_agendamento.cd_agenda_local		:= null;
dados_agendamento.dt_agendamento		:= null;						
dados_agendamento.ds_observacao		:= Wheb_mensagem_pck.get_texto(308785); --'Gerado via Grupo de atendimento coletivo';
dados_agendamento.ie_marcar_horario		:= 'N';
dados_agendamento.nm_usuario		:= nm_usuario_p;
dados_agendamento.nr_seq_horario_turma	:= nr_sequencia_p;	

CALL mprev_agenda_pck.limpar_inconsistencias(dados_agendamento);				

if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then
	--busca os dados referentes ao periodo
	select 	nr_seq_turma,
		dt_inicio,
		dt_fim_repeticao,
		qt_repeticao,
		ie_dia_semana,
		ie_frequencia,
		to_date(to_char(dt_inicio,'dd/mm/yyyy') || ' ' || to_char(hr_inicio,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		to_date(to_char(dt_inicio,'dd/mm/yyyy') || ' ' || to_char(hr_termino,'hh24:mi'),'dd/mm/yyyy hh24:mi'),
		nr_seq_grupo_tema,
		ie_semana,
		ie_forma_atendimento_mprev
	into STRICT	dados_agendamento.nr_seq_turma,
		dt_inicio_w,
		dt_fim_repeticao_w,
		qt_repeticao_w,
		ie_dia_semana_w,
		ie_frequencia_w,
		hr_inicio_w,
		hr_termino_w,
		nr_seq_grupo_tema_w,
		ie_semana_w,
		ie_forma_atendimento_w
	from 	mprev_grupo_col_turma_hor
	where	nr_sequencia = nr_sequencia_p;
	
	if (dt_inicio_w < dt_inicio_turma_w)
		or (dt_fim_repeticao_w > dt_fim_turma_w) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1118362);
	end if;
	
	select	coalesce(min(cd_estabelecimento),1)
	into STRICT	cd_estabelecimento_w
	from	mprev_config_geral;
	
	dados_agendamento.nr_minutos	:= (hr_termino_w - hr_inicio_w) * 1440;
	
	/* Incluir horario na agenda de cada profissional */

	open c02;
	loop
	fetch c02 into	
		dados_agendamento.cd_agenda;
	EXIT WHEN NOT FOUND; /* apply on c02 */				
		
		if (dados_agendamento.cd_agenda IS NOT NULL AND dados_agendamento.cd_agenda::text <> '') then
			begin
			--local de atendimento apenas 1 permitido
			select	max(cd_agenda)
			into STRICT	dados_agendamento.cd_agenda_local
			from 	mprev_grupo_turma_hor_loc
			where  	nr_seq_grupo_turma_hor = nr_sequencia_p;					
			
			dt_referencia_w := dt_inicio_w;
			
			qt_repetiu_w	:= 0;		
			--trata periodo ou numero de repeticoes
									
			while(coalesce(dt_fim_repeticao_w::text, '') = '' or dt_referencia_w <= dt_fim_repeticao_w) and (coalesce(qt_repeticao_w::text, '') = '' or qt_repetiu_w < qt_repeticao_w) loop						
				select 	to_date(to_char(to_char(dt_referencia_w,'dd/mm/yyyy')||' '||to_char(hr_inicio_w,'hh24:mi')),'dd/mm/yyyy hh24:mi'),
					to_date(to_char(to_char(dt_referencia_w,'dd/mm/yyyy')||' '||to_char(hr_termino_w,'hh24:mi')),'dd/mm/yyyy hh24:mi')
				into STRICT	dados_agendamento.dt_agendamento,
					dados_agendamento.dt_final_agendamento
				;	
				
				--if	(dt_referencia_w > sysdate) and "Restricao retirada para permitir gerar agendamentos com data retroativa"
				if	((ie_dia_semana_w = 9 and obter_se_dia_util(dt_referencia_w,cd_estabelecimento_w) = 'S') or (pkg_date_utils.get_weekday(dt_referencia_w) = ie_dia_semana_w) and
					((obter_semana_dia_agecons(dt_referencia_w, pkg_date_utils.get_weekday(dt_referencia_w)) = ie_semana_w) or (ie_semana_w = 0))) then
					qt_repetiu_w := qt_repetiu_w + 1;
					--opcao C para consistencia, A para agendamento	
					if ( ie_opcao_p = 'C') then
						SELECT * FROM mprev_agenda_pck.consistir_agendamento(	dados_agendamento, nm_usuario_p, qt_mensagens_erro_p, qt_mensagens_atencao_p, qt_mensagens_confirm_p) INTO STRICT qt_mensagens_erro_p, qt_mensagens_atencao_p, qt_mensagens_confirm_p;
						
						/* antes: Se ja deu alguma inconsistencia, nem ir para a proxima data */


                        /* [OS-1732052] inconsistencias devem ser geradas mais de uma vez */

					elsif ( ie_opcao_p = 'A') then
						SELECT * FROM mprev_agenda_pck.agendar_horario(	0, dados_agendamento.cd_agenda, dados_agendamento.nr_seq_participante, dados_agendamento.nr_seq_turma, dados_agendamento.nr_seq_horario_turma, dados_agendamento.ds_utilizacao, dados_agendamento.cd_agenda_profissional, dados_agendamento.cd_agenda_local, dados_agendamento.dt_agendamento, dados_agendamento.dt_final_agendamento, dados_agendamento.nr_minutos, dados_agendamento.ds_observacao, 'S', nm_usuario_p, 'T', 'S', 'N', null, null, 'P', null, ie_forma_atendimento_w, null, 'ATE', 'C', null, nr_seq_grupo_tema_w, null, --nr_seq_forma_atendimento
										null, --nr_seq_status_pac_p
										qt_mensagens_erro_p, qt_mensagens_atencao_p, qt_mensagens_confirm_p, nr_seq_agendamento_novo_w) INTO STRICT 
										qt_mensagens_erro_p, qt_mensagens_atencao_p, qt_mensagens_confirm_p, nr_seq_agendamento_novo_w;
						null;
					end if;
					--trata frequencia IE_FREQUENCIA
					if (ie_frequencia_w	= 'D') then	
						dt_referencia_w := dt_referencia_w + 1;
					elsif (ie_frequencia_w	= 'S') then	
						dt_referencia_w := dt_referencia_w + 7;
					elsif (ie_frequencia_w	= 'Q') then	
						dt_referencia_w := dt_referencia_w + 14;
					elsif (ie_frequencia_w	= 'M') then
						
						dt_referencia_w := pkg_date_utils.add_month(dt_inicio_w,qt_repetiu_w, 0);
						
						if (ie_semana_w > 0) then
							begin
							dt_referencia_w := pkg_date_utils.start_of(dt_referencia_w, 'MONTH');
							end;
						end if;	
						
					
					end if;	
				else
					dt_referencia_w := dt_referencia_w + 1;
				end if;

				/* Garantir que nao fique em loop */

				if (dt_referencia_w = dt_referencia_ant_w) then
					exit;
				end if;
				dt_referencia_ant_w	:= dt_referencia_w;
			end loop;
			
			end;	
		else
			CALL wheb_mensagem_pck.exibir_mensagem_abort(272016);
		end if;
					
	end loop;
	close c02;
	
	if (ie_opcao_p = 'A') then
		update 	mprev_grupo_col_turma_hor
		set 	dt_geracao_horario = clock_timestamp(),
			dt_atualizacao = clock_timestamp(),
			nm_usuario = nm_usuario_p
		where	nr_sequencia = nr_sequencia_p;			
	end if;					
	
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_gerar_agendamento_turma ( nr_sequencia_p bigint, nm_usuario_p text, ie_opcao_p text, qt_mensagens_erro_p INOUT bigint, qt_mensagens_atencao_p INOUT bigint, qt_mensagens_confirm_p INOUT bigint) FROM PUBLIC;

