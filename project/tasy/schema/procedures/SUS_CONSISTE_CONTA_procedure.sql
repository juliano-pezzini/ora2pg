-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_conta ( nr_interno_conta_p bigint, nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE



ie_tipo_atendimento_w		smallint;
ds_detalhe_w			varchar(255)	:= '';
cd_estabelecimento_w		smallint;
cd_procedimento_w		bigint	:= 0;
cd_proc_princ_w			bigint	:= 0;
ie_origem_proced_w		bigint;
qt_proc_conta_w			bigint	:= 0;
qt_proc_permitido_w		bigint	:= 0;
qt_proc_permitido_ww		bigint	:= 0;
nm_mae_w			varchar(60);
nm_pessoa_w			varchar(60);
cd_municipio_ibge_w		varchar(6)	:= '';
dt_nascimento_w			timestamp;
dt_entrada_w			timestamp;
qt_reg_apac_w			smallint	:= 0;
qt_reg_bpa_w			smallint	:= 0;
cd_classif_setor_w			varchar(2);
ie_ind_equipe_um_w		smallint	:= 0;
ie_ind_equipe_dois_w		smallint	:= 0;
ie_ind_equipe_tres_w		smallint	:= 0;
ie_ind_equipe_quatro_w		smallint	:= 0;
ie_ind_equipe_cinco_w		smallint	:= 0;
ie_ind_equipe_seis_w		smallint	:= 0;
cd_unidade_basica_w		varchar(10);
cd_unidade_compl_w		varchar(10);
ie_codigo_autorizacao_w		smallint	:= 0;
ie_liberado_w			varchar(1)	:= 'N';
qt_proc_nao_sus_w		integer	:= 0;
qt_registro_w			bigint;
qt_proc_bpa_ind_w			bigint;/*Geliard OS108709 15/09/2008*/
nr_bpa_w				varchar(13);
cd_pessoa_fisica_w		varchar(10);
cd_medico_executor_w		varchar(10);
dt_alta_anterior_w			timestamp;
nr_atend_anterior_w		bigint;
cd_funcao_w			integer;
nr_seq_proc_princ_w		bigint;
qt_opm_permitida_w		bigint;
qt_procedimento_w			double precision;
qt_dia_internacao_w		bigint;
ie_gerar_cns_w			varchar(1)	:= 'N';
qt_proced_conta_w			integer	:= 0;
cd_motivo_alta_w			smallint;
ie_consiste_numero_bpa_w		varchar(1)	:= 'S';
qt_laudo_sismama_w		bigint;
qt_laudo_siscolo_w		bigint;
ie_regra_tipo_atend_w		varchar(1):= 'A';
qt_dados_aih_conta_w		bigint;
qt_max_dia_tres_w			bigint;
qt_max_dia_cinco_w		bigint;
nr_int_conta_fisio_w		conta_paciente.nr_interno_conta%type;
dt_mesano_referencia_w		conta_paciente.dt_mesano_referencia%type;
cd_subgrupo_w			sus_subgrupo.cd_subgrupo%type;
qt_nasc_vivo_w			bigint;
qt_nasc_mortos_w		bigint;
cd_material_w			material_atend_paciente.cd_material%type := 0;
nr_atendimento_w		conta_paciente.nr_atendimento%type;	
nr_interno_conta_w		conta_paciente.nr_interno_conta%type;
qt_max_proced_w			procedimento.qt_max_procedimento%type;	
ds_atendimentos_w		varchar(255) := '';
ds_contas_w			varchar(255) := '';
nr_cirurgia_w			bigint;
dt_procedimento_w		procedimento_paciente.dt_procedimento%type;
ds_texto_proc_w			varchar(20) := wheb_mensagem_pck.get_texto(278119);--Proc:
ds_texto_atend_w		varchar(30) := wheb_mensagem_pck.get_texto(303728);--atend:
ds_texto_conta_w		varchar(30) := wheb_mensagem_pck.get_texto(277157);--conta:
nm_paciente_txt_w		varchar(40) := wheb_mensagem_pck.get_texto(304335)||':';
ds_setor_txt_w			varchar(30) := wheb_mensagem_pck.get_texto(286491); --setor:
vl_material_w			material_atend_paciente.vl_material%type;
dt_procedimento_ww		procedimento_paciente.dt_procedimento%type;
qt_max_proc_princ_w             procedimento_paciente.qt_procedimento%type;
ie_tipo_atend_sus_w             sus_tipo_atendimento_pck.ie_tipo_atend_sus%type;

c01 CURSOR FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced,
		sum(qt_procedimento) qt_proc_conta,		
		obter_qtmax_procedimento(a.cd_procedimento, a.ie_origem_proced) qt_proc_permitido,
		a.nr_seq_proc_princ,
		d.cd_subgrupo,
		CASE WHEN d.cd_subgrupo=603 THEN establishment_timezone_utils.startofmonth(f.dt_mesano_referencia)  ELSE null END  dt_procedimento
	from	conta_paciente f,
		procedimento_paciente a,
		sus_procedimento b,
		sus_forma_organizacao c,
		sus_subgrupo d,
		sus_grupo e
	where	a.nr_atendimento		= nr_atendimento_p
	and	f.nr_interno_conta	= a.nr_interno_conta
	and	a.nr_interno_conta	= nr_interno_conta_p
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	coalesce(obter_qtmax_procedimento(a.cd_procedimento, a.ie_origem_proced),0) > 0
	and	not exists (SELECT 1
			from	sus_detalhe_proc x,
				sus_detalhe y
			where	x.nr_seq_detalhe = y.nr_sequencia
			and	y.cd_detalhe in ('10044','10045','10065','10066')
			and	x.cd_procedimento = a.cd_procedimento
			and	x.ie_origem_proced = a.ie_origem_proced  LIMIT 1)
	and	a.cd_procedimento = b.cd_procedimento
	and	a.ie_origem_proced = b.ie_origem_proced
	and	b.nr_seq_forma_org = c.nr_sequencia
	and	c.nr_seq_subgrupo = d.nr_sequencia
	and	d.nr_seq_grupo = e.nr_sequencia
	group by	a.cd_procedimento,
		a.ie_origem_proced,
		d.cd_subgrupo,
		a.nr_seq_proc_princ,
		CASE WHEN d.cd_subgrupo=603 THEN establishment_timezone_utils.startofmonth(f.dt_mesano_referencia)  ELSE null END
	having	sum(a.qt_procedimento) > obter_qtmax_procedimento(a.cd_procedimento, a.ie_origem_proced);

type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w			vetor;

c02 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		sum(qt_procedimento) qt_procedimento
	from	procedimento_paciente
	where	nr_interno_conta		= nr_interno_conta_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	Sus_validar_regra(68,cd_procedimento,ie_origem_proced,dt_procedimento)	> 0
	group by 	cd_procedimento,
		ie_origem_proced;
		
type 		fetch_array2 is table of c02%rowtype;
s_array2 	fetch_array2;
j		integer := 1;
type vetor2 is table of fetch_array2 index by integer;
vetor_c02_w			vetor2;
	
c03 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced
	from	procedimento_paciente
	where	nr_interno_conta = nr_interno_conta_p
	and	ie_origem_proced = 7
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	coalesce(cd_medico_executor::text, '') = ''
	and	coalesce(cd_pessoa_fisica::text, '') = '';
	
type 		fetch_array3 is table of c03%rowtype;
s_array3 	fetch_array3;
k		integer := 1;
type vetor3 is table of fetch_array3 index by integer;
vetor_c03_w			vetor3;
	
c04 CURSOR FOR
	SELECT 	cd_procedimento,
		cd_medico_executor,
		cd_pessoa_fisica,
		sum(qt_procedimento) qt_registro
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_conta_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	((cd_medico_executor IS NOT NULL AND cd_medico_executor::text <> '') or (cd_pessoa_fisica IS NOT NULL AND cd_pessoa_fisica::text <> ''))
	group by  	cd_procedimento,
		cd_medico_executor,
		cd_pessoa_fisica
	order by 	1;
	
type 		fetch_array4 is table of c04%rowtype;
s_array4 	fetch_array4;
l		integer := 1;
type vetor4 is table of fetch_array4 index by integer;
vetor_c04_w			vetor4;

c05 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		sum(qt_procedimento) qt_proc_conta,
		obter_qtmax_procedimento(cd_procedimento, ie_origem_proced) qt_proc_permitido,
		nr_seq_proc_princ,
		max(dt_procedimento) dt_procedimento
	from	procedimento_paciente
	where	nr_interno_conta in (	SELECT	distinct x.nr_interno_conta
					from	procedimento_paciente t,
						atendimento_paciente u,
						atendimento_paciente v,
						conta_paciente x
					where	x.nr_atendimento 	= v.nr_atendimento
					and	v.cd_pessoa_fisica	= u.cd_pessoa_fisica
					and	u.nr_atendimento	= nr_atendimento_p
					and	x.nr_interno_conta	= t.nr_interno_conta
					and	establishment_timezone_utils.startofmonth(t.dt_procedimento) = establishment_timezone_utils.startofmonth(clock_timestamp()))
						
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	obter_qtmax_procedimento(cd_procedimento, ie_origem_proced) > 0
	and	sus_validar_regra(4, cd_procedimento, ie_origem_proced,dt_procedimento) > 0
	group by
		cd_procedimento, 
		ie_origem_proced,
		nr_seq_proc_princ
	having	sum(qt_procedimento) > obter_qtmax_procedimento(cd_procedimento, ie_origem_proced);	

type 		fetch_array5 is table of c05%rowtype;
s_array5 	fetch_array5;
m		integer := 1;
type vetor5 is table of fetch_array5 index by integer;
vetor_c05_w			vetor5;	
	
C07 CURSOR FOR
	SELECT 	c.nr_atendimento,
		b.nr_interno_conta
	from	procedimento_paciente a,
		conta_paciente  b,
		atendimento_paciente c
	where	c.nr_atendimento = b.nr_atendimento
	and	b.nr_interno_conta = a.nr_interno_conta
	and	c.cd_pessoa_fisica = cd_pessoa_fisica_w
	and	a.ie_origem_proced = ie_origem_proced_w
	and	a.cd_procedimento = cd_procedimento_w
	and	b.nr_interno_conta <> nr_interno_conta_p
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	establishment_timezone_utils.startofmonth(b.dt_mesano_referencia) = establishment_timezone_utils.startofmonth(dt_mesano_referencia_w);
	
c07_w   C07%rowtype;

c_inco_255 CURSOR(	dt_mesano_referencia_pc		conta_paciente.dt_mesano_referencia%type,
			nr_atendimento_pc		atendimento_paciente.nr_atendimento%type) FOR
	SELECT	max(a.nr_interno_conta) conta,
		sum(qt_proc) qt_proc,
		max(qt_max) qt_max
	from	(SELECT	b.nr_interno_conta,
		establishment_timezone_utils.startofmonth(a.dt_procedimento) dt_procedimento,
		obter_qtmax_procedimento(a.cd_procedimento,a.ie_origem_proced) qt_max,
		a.cd_procedimento cd_procedimento,
		sum(a.qt_procedimento) qt_proc
	from	procedimento_paciente a,
		conta_paciente b,
		atendimento_paciente c
	where	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	sus_obter_estrut_proc(a.cd_procedimento,a.ie_origem_proced,'C','S') = '302'
	and	b.nr_atendimento = c.nr_atendimento
	and	a.nr_interno_conta = b.nr_interno_conta
	and	c.ie_tipo_atendimento <> 1
	and	establishment_timezone_utils.startofmonth(b.dt_mesano_referencia) = establishment_timezone_utils.startofmonth(dt_mesano_referencia_pc)
	and	c.cd_pessoa_fisica = (	select	max(x.cd_pessoa_fisica)
					from 	atendimento_paciente x
					where	x.nr_atendimento = nr_atendimento_pc)
	group by	b.nr_interno_conta,
			establishment_timezone_utils.startofmonth(a.dt_procedimento),
			a.cd_procedimento,
			obter_qtmax_procedimento(a.cd_procedimento,a.ie_origem_proced)) a
	where	1 = 1
	group by cd_procedimento
	having sum(qt_proc) > max(qt_max);

BEGIN

delete	from sus_consistencia_conta
where	nr_interno_conta	= nr_interno_conta_p;

cd_funcao_w	:= coalesce(obter_funcao_ativa,0);

/* Obter dados atendimento */

begin
select	ie_tipo_atendimento,
	cd_estabelecimento,
	upper(substr(obter_compl_pf(cd_pessoa_fisica, 5, 'N'),1,60)),
	upper(substr(obter_nome_pf(cd_pessoa_fisica),1,60)),
	substr(obter_compl_pf(cd_pessoa_fisica, 1, 'CDM'),1,6),
	to_date(obter_dados_pf(cd_pessoa_fisica, 'DN'), 'dd/mm/yyyy'),
	dt_entrada,
	cd_pessoa_fisica,
	cd_motivo_alta
into STRICT	ie_tipo_atendimento_w,
	cd_estabelecimento_w,
	nm_mae_w,
	nm_pessoa_w,
	cd_municipio_ibge_w,
	dt_nascimento_w,
	dt_entrada_w,
	cd_pessoa_fisica_w,
	cd_motivo_alta_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_p;
exception
        when no_data_found then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(190784,'NR_ATENDIMENTO='|| nr_atendimento_p);
	when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(190784,'NR_ATENDIMENTO='|| nr_atendimento_p);
	/* Problema na leitura dos dados do atendimento */

end;

/*Obter parametros de Faturamento*/

select	coalesce(max(ie_regra_tipo_atend),'A')
into STRICT	ie_regra_tipo_atend_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(ie_regra_tipo_atend_w,'A') = 'C') then
	begin
	select	coalesce(max(ie_tipo_atend_conta),ie_tipo_atendimento_w)
	into STRICT	ie_tipo_atendimento_w
	from 	conta_paciente
	where 	nr_interno_conta = nr_interno_conta_p;
	exception
                when no_data_found then
                ie_tipo_atendimento_w:= ie_tipo_atendimento_w;
		when others then
		ie_tipo_atendimento_w:= ie_tipo_atendimento_w;
	end;
end if;

CALL sus_tipo_atendimento_pck.set_ie_tipo_atendimento(ie_tipo_atendimento_w);
CALL sus_tipo_atendimento_pck.set_nr_interno_conta(nr_interno_conta_p);
CALL sus_tipo_atendimento_pck.set_nr_atendimento(nr_atendimento_p);
ie_tipo_atend_sus_w := sus_tipo_atendimento_pck.get_ie_tipo_atend_sus;

ie_gerar_cns_w := Obter_Param_Usuario(67, 347, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_cns_w);

if (ie_gerar_cns_w = 'S') then
	begin
	CALL Sus_Gerar_CNS_Automatico(cd_pessoa_fisica_w,nm_usuario_p);
	end;
end if;

if (ie_tipo_atendimento_w	= 1) then
        CALL sus_tipo_atendimento_pck.set_ie_tipo_atend_sus('A');
	CALL Sus_Consiste_Aih(nr_interno_conta_p, nr_atendimento_p, nm_usuario_p);
	/* Obter dados da AIH */

	begin
	select	coalesce(ie_codigo_autorizacao,0)
	into STRICT	ie_codigo_autorizacao_w
	from	sus_aih_unif
	where	nr_interno_conta	= nr_interno_conta_p;	
	exception
	when others then
		ie_codigo_autorizacao_w := 0;
	end;
	
	if (ie_codigo_autorizacao_w = 0) then
		begin
		
		select	count(1)
		into STRICT	qt_dados_aih_conta_w
		from	sus_dados_aih_conta
		where	nr_interno_conta = nr_interno_conta_p  LIMIT 1;
		
		if (qt_dados_aih_conta_w > 0) then
			begin
			
			select	coalesce(ie_codigo_autorizacao,0)
			into STRICT	ie_codigo_autorizacao_w
			from	sus_dados_aih_conta
			where	nr_interno_conta = nr_interno_conta_p;
			
			end;
		end if;
		end;
	end if;	
else
	select	count(1)
	into STRICT	qt_reg_apac_w
	from	sus_apac_unif
	where	nr_interno_conta	= nr_interno_conta_p
	and	nr_atendimento		= nr_atendimento_p  LIMIT 1;
	
	if (qt_reg_apac_w	> 0) or (cd_funcao_w	= 1124) or (ie_tipo_atend_sus_w = 'P') then
                CALL sus_tipo_atendimento_pck.set_ie_tipo_atend_sus('P');
		CALL Sus_Consiste_Apac(nr_interno_conta_p, nr_atendimento_p, nm_usuario_p);
	end if;
	
	select	count(1)
	into STRICT	qt_reg_bpa_w
	from	sus_bpa_unif
	where	nr_interno_conta	= nr_interno_conta_p
	and	nr_atendimento		= nr_atendimento_p  LIMIT 1;
	
	if (qt_reg_bpa_w 	> 0) or (cd_funcao_w	= 1125) or (ie_tipo_atend_sus_w = 'B') then
                CALL sus_tipo_atendimento_pck.set_ie_tipo_atend_sus('B');
		CALL Sus_Consiste_BPA(nr_interno_conta_p, nr_atendimento_p, nm_usuario_p);
	end if;
end if;

CALL Sus_Consiste_Procedimento(nr_interno_conta_p, nr_atendimento_p, nm_usuario_p);

/* 10 - Excedida a quantidade maxima permitida para o procedimento */


/* Essa inconsistencia e tratada tambem na procedure Sus_Consiste_Proc */

if (Sus_Obter_Inco_Ativa(10)) then
	begin
	
	open c01;
	loop
	fetch c01 bulk collect into s_array limit 100000;
		vetor_c01_w(i) := s_array;
		i := i + 1;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	end loop;
	close c01;

	for i in 1..vetor_c01_w.count loop
		begin
		s_array := vetor_c01_w(i);
		for z in 1..s_array.count loop
			begin
			
			cd_procedimento_w	:= s_array[z].cd_procedimento;
			ie_origem_proced_w	:= s_array[z].ie_origem_proced;
			qt_proc_conta_w		:= s_array[z].qt_proc_conta;
			qt_proc_permitido_w	:= s_array[z].qt_proc_permitido;
			nr_seq_proc_princ_w	:= s_array[z].nr_seq_proc_princ;
			cd_subgrupo_w		:= s_array[z].cd_subgrupo;
			dt_procedimento_w	:= s_array[z].dt_procedimento;
		
			if (ie_codigo_autorizacao_w in (5,14)) and (sus_validar_regra(27, cd_procedimento_w, ie_origem_proced_w,dt_procedimento_w) > 0) then
				ie_liberado_w	:= 'S';
			elsif (nr_seq_proc_princ_w IS NOT NULL AND nr_seq_proc_princ_w::text <> '') and (sus_validar_regra(4, cd_procedimento_w, ie_origem_proced_w,dt_procedimento_w)	> 0) then
				begin
				select	cd_procedimento
				into STRICT	cd_proc_princ_w
				from	procedimento_paciente
				where	nr_sequencia	= nr_seq_proc_princ_w;
				
				select	coalesce(max(qt_proc_permitida),0)
				into STRICT	qt_opm_permitida_w
				from	sus_proc_compativel
				where	cd_proc_secundario	= cd_procedimento_w
				and	ie_origem_proc_sec	= ie_origem_proced_w
				and	cd_proc_principal	= cd_proc_princ_w
				and	ie_origem_proc_princ	= 7;

                                if (qt_proc_conta_w > 1) and (ie_origem_proced_w = 7) and (qt_opm_permitida_w > 0) and (coalesce(sus_validar_regra(11,cd_proc_princ_w, ie_origem_proced_w,dt_procedimento_w),0) = 0) then
                                        begin
                                        select  qt_procedimento
                                        into STRICT    qt_max_proc_princ_w
                                        from    procedimento_paciente a,
                                                conta_paciente b
                                        where   a.nr_interno_conta = b.nr_interno_conta
                                        and     a.nr_interno_conta = nr_interno_conta_p
                                        and     cd_procedimento = cd_proc_princ_w;
                                        exception
                                        when others then
                                                qt_opm_permitida_w := qt_opm_permitida_w;
                                        end;

                                        qt_proc_permitido_w := qt_opm_permitida_w * qt_max_proc_princ_w;
                                end if;

				if (qt_proc_conta_w	<= qt_proc_permitido_w) then
					ie_liberado_w	:= 'S';
				end if;
                                end;
			elsif (cd_subgrupo_w = 603) then
				begin
				
				begin
				select	coalesce(max(a.qt_proc_permitida),0)
				into STRICT	qt_opm_permitida_w
				from	sus_proc_compativel a
				where	a.cd_proc_secundario	= cd_procedimento_w
				and	a.ie_origem_proc_sec	= ie_origem_proced_w
				and	a.cd_proc_principal in (SELECT	distinct t.cd_procedimento
								from	procedimento_paciente t,									
									atendimento_paciente v,
									conta_paciente x,
									sus_valor_proc_paciente z
								where	x.nr_atendimento 	= v.nr_atendimento
								and	v.cd_pessoa_fisica	= cd_pessoa_fisica_w
								and	x.nr_interno_conta	= t.nr_interno_conta
								and	t.nr_sequencia		= z.nr_sequencia
								and	coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(t.cd_procedimento,t.ie_origem_proced,'C',13)) = 3
								and	establishment_timezone_utils.startofmonth(x.dt_mesano_referencia) = establishment_timezone_utils.startofmonth(dt_procedimento_w))
				and	a.ie_origem_proc_princ	= 7;
				exception
				when others then
					qt_opm_permitida_w := 0;
				end;
				
				if (qt_proc_conta_w	<= qt_opm_permitida_w) then
					ie_liberado_w	:= 'S';
				end if;			
				end;
			elsif (qt_proc_conta_w	<= qt_proc_permitido_w) then
                                ie_liberado_w	:= 'S';
                        end if;

			if (ie_liberado_w	= 'N') and
				((coalesce(sus_verificar_codigo_autor(coalesce(ie_codigo_autorizacao_w,0),'QTD'),'N') = 'N') or (sus_validar_regra(4,cd_procedimento_w,ie_origem_proced_w,dt_procedimento_w) > 0)) then
				ds_detalhe_w	:= ds_texto_proc_w || ' ' || cd_procedimento_w || '; '|| wheb_mensagem_pck.get_texto(304333) || ' ' 
						|| qt_proc_conta_w || '; ' || wheb_mensagem_pck.get_texto(304334) || ' '||  qt_proc_permitido_w || '; '
						|| ds_texto_atend_w ||' ' || nr_atendimento_p || '; '|| ds_texto_conta_w ||' ' || nr_interno_conta_p;
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 10, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end if;
			
			end;
		end loop;
		end;
	end loop;
	
	end;
end if;

/* 29 - Classificacao do setor deve ser de internacao para paciente internado */

begin
select	coalesce(cd_unidade_basica,'#'),
	coalesce(cd_unidade_compl,'#')
into STRICT	cd_unidade_basica_w,
	cd_unidade_compl_w
from 	paciente_internado_v
where	nr_atendimento	= nr_atendimento_p;
exception
	when others then
	
	cd_unidade_basica_w	:= '#';
	cd_unidade_compl_w	:= '#';
	
	select	count(1)
	into STRICT	qt_registro_w
	from	atend_paciente_unidade a,	
		setor_atendimento b
	where	a.cd_setor_atendimento	= b.cd_setor_atendimento
	and 	b.cd_classif_setor in (3,4,8)
	and	a.nr_atendimento	= nr_atendimento_p
	and	a.dt_entrada_unidade < dt_entrada_w  LIMIT 1;
	
	if (Sus_Obter_Inco_Ativa(118)) and (ie_tipo_atendimento_w	= 1) and (qt_registro_w	 > 0 )  then
		ds_detalhe_w	:=  ds_texto_atend_w || ' ' || nr_atendimento_p || '; '|| nm_paciente_txt_w || ' ' || nm_pessoa_w;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 118, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
	
end;

if (Sus_Obter_Inco_Ativa(29)) and (ie_tipo_atendimento_w = 1) and	
	((cd_unidade_basica_w = '#') or (cd_unidade_compl_w = '#')) then
	ds_detalhe_w	:= ds_texto_atend_w || ' ' || nr_atendimento_p || '; '|| nm_paciente_txt_w || ' ' || nm_pessoa_w ||'; '|| ds_setor_txt_w || ' ' || cd_classif_setor_w;
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 29, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;

/* 37 - Cadastramento do indicador de equipe SUS nao realizado */

select	count(1)
into STRICT	ie_ind_equipe_um_w
from	funcao_medico
where	ie_ind_equipe_sus	= 1  LIMIT 1;

select	count(1)
into STRICT	ie_ind_equipe_dois_w
from	funcao_medico
where	ie_ind_equipe_sus	= 2  LIMIT 1;

select	count(1)
into STRICT	ie_ind_equipe_tres_w
from	funcao_medico
where	ie_ind_equipe_sus	= 3  LIMIT 1;

select	count(1)
into STRICT	ie_ind_equipe_quatro_w
from	funcao_medico
where	ie_ind_equipe_sus	= 4  LIMIT 1;

select	count(1)
into STRICT	ie_ind_equipe_cinco_w
from	funcao_medico
where	ie_ind_equipe_sus	= 5  LIMIT 1;

select	count(1)
into STRICT	ie_ind_equipe_seis_w
from	funcao_medico
where	ie_ind_equipe_sus	= 6  LIMIT 1;

if (Sus_Obter_Inco_Ativa(37)) then
	if (ie_ind_equipe_um_w = 0) or (ie_ind_equipe_dois_w = 0) or (ie_ind_equipe_tres_w = 0) or (ie_ind_equipe_quatro_w = 0) or (ie_ind_equipe_cinco_w = 0) or (ie_ind_equipe_seis_w = 0) then
		ds_detalhe_w	:= '1: ' || ie_ind_equipe_um_w ||'; 2: ' || ie_ind_equipe_um_w || '; 3: ' || ie_ind_equipe_tres_w ||
					'; 4: ' || ie_ind_equipe_quatro_w || '; 5: ' || ie_ind_equipe_cinco_w || '; 6: ' || ie_ind_equipe_um_w;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 37, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;

if (Sus_Obter_Inco_Ativa(98)) then
	begin
	select	count(1)
	into STRICT	qt_proc_nao_sus_w
	from	procedimento_paciente
	where	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	nr_interno_conta	= nr_interno_conta_p
	and	ie_origem_proced <> 7  LIMIT 1;
	
	if (qt_proc_nao_sus_w > 0) then
		begin
		ds_detalhe_w	:= ds_texto_atend_w || ' ' || nr_atendimento_p || '; '|| nm_paciente_txt_w|| ' ' || nm_pessoa_w ||'; ' || ds_setor_txt_w || ' ' || cd_classif_setor_w;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 98, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;
	end;
end if;

if (Sus_Obter_Inco_Ativa(121)) then
	begin
	select	count(1)
	into STRICT	qt_proc_bpa_ind_w
	from	procedimento_paciente a,
		sus_valor_proc_paciente b
	where   coalesce(b.cd_registro_proc,sus_obter_tipoReg_proc(a.cd_procedimento,a.ie_origem_proced,'C',1)) = 2
	and     coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	coalesce(a.nr_doc_convenio::text, '') = ''
	and	sus_obter_se_const_proc_bpa(a.cd_procedimento,a.ie_origem_proced,cd_estabelecimento_w) = 'S'
	and	a.nr_interno_conta = nr_interno_conta_p
	and	a.nr_sequencia = b.nr_sequencia  LIMIT 1;

	if (qt_proc_bpa_ind_w > 0) then
		begin
		select	coalesce(max(nr_bpa),'0')
		into STRICT	nr_bpa_w
		from	sus_bpa_unif
		where	nr_interno_conta = nr_interno_conta_p;

		if (nr_bpa_w = '0') then
			begin
			ds_detalhe_w	:= ds_texto_atend_w || ' ' || nr_atendimento_p || '; '|| nm_paciente_txt_w || ' ' || nm_pessoa_w;
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 121, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
		end;
	end if;
	end;
end if;

if (sus_obter_inco_ativa(134)) then
	begin
	
	begin
	select	max(nr_atendimento)
	into STRICT	nr_atend_anterior_w
	from	atendimento_paciente
	where	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and		nr_atendimento		< nr_atendimento_p
	and		coalesce(dt_cancelamento::text, '') = '';
	exception
	when others then
		nr_atend_anterior_w	:= null;
	end;
	
	begin
	select	coalesce(dt_alta,clock_timestamp())
	into STRICT	dt_alta_anterior_w
	from	atendimento_paciente
	where	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and		nr_atendimento		= nr_atend_anterior_w  LIMIT 1;
		exception
	when others then
		nr_atend_anterior_w	:= null;
	end;
	
	
	
	if (nr_atend_anterior_w IS NOT NULL AND nr_atend_anterior_w::text <> '') and (dt_entrada_w	< dt_alta_anterior_w) then
		begin
		ds_detalhe_w	:= wheb_mensagem_pck.get_texto(304355) || ' ' || nr_atendimento_p || '; ' || wheb_mensagem_pck.get_texto(304360) || ' ' || nr_atend_anterior_w || '; '|| nm_paciente_txt_w || ' ' || nm_pessoa_w;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 134, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;
	end;
end if;

if (sus_obter_inco_ativa(144)) then
	begin
	
	qt_dia_internacao_w	:= Obter_Dias_Internacao_aih(nr_atendimento_p,nr_interno_conta_p);
	
	open c02;
	loop
	fetch c02 bulk collect into s_array2 limit 100000;
		vetor_c02_w(j) := s_array2;
		j := j + 1;
	EXIT WHEN NOT FOUND; /* apply on c02 */
	end loop;
	close c02;
	
	for i in 1..vetor_c02_w.count loop
		begin
		s_array2 := vetor_c02_w(i);
		for z in 1..s_array2.count loop
			begin
			
			cd_procedimento_w	:= s_array2[z].cd_procedimento;
			ie_origem_proced_w	:= s_array2[z].ie_origem_proced;
			qt_procedimento_w	:= s_array2[z].qt_procedimento;
			
			if (qt_procedimento_w	> qt_dia_internacao_w) then
				ds_detalhe_w	:= wheb_mensagem_pck.get_texto(278134) ||' ' || cd_procedimento_w || ' ' || wheb_mensagem_pck.get_texto(281422)|| ' '||qt_procedimento_w;
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 144 ,ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end if;
			end;
		end loop;
		end;
	end loop;
	
	end;	
end if;

if (sus_obter_inco_ativa(158)) then
	begin
	
	open c03;
	loop
	fetch c03 bulk collect into s_array3 limit 100000;
		vetor_c03_w(k) := s_array3;
		k := k + 1;
	EXIT WHEN NOT FOUND; /* apply on c03 */
	end loop;
	close c03;
	
	for i in 1..vetor_c03_w.count loop
		begin
		s_array3 := vetor_c03_w(i);
		for z in 1..s_array3.count loop
			begin
			cd_procedimento_w	:= s_array3[z].cd_procedimento;
			ie_origem_proced_w	:= s_array3[z].ie_origem_proced;
			
			ds_detalhe_w	:= substr( wheb_mensagem_pck.get_texto(278134) || ' '|| cd_procedimento_w || ' - '|| obter_descricao_procedimento(cd_procedimento_w,ie_origem_proced_w),1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 158 ,ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end loop;
		end;
	end loop;		
	
	end;
end if;

if (sus_obter_inco_ativa(170)) and (cd_motivo_alta_w <> 9)then
	begin
	select	count(1)
	into STRICT	qt_proced_conta_w
	from	procedimento_paciente a
	where	a.nr_interno_conta	= nr_interno_conta_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''  LIMIT 1;
	end;
	if (qt_proced_conta_w = 0) then
		ds_detalhe_w	:= ds_texto_atend_w || ' ' || nr_atendimento_p ||'; '|| ds_texto_conta_w || ' ' || nr_interno_conta_p || '; ' || nm_paciente_txt_w || ' '|| nm_pessoa_w;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 170, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;

if (sus_obter_inco_atv_conta(188,nr_interno_conta_p,null)) then
	begin
	qt_registro_w := 0;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	procedimento_paciente a,
		sus_detalhe_proc x,
		sus_detalhe y
	where	a.nr_interno_conta	= nr_interno_conta_p
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	x.nr_seq_detalhe = y.nr_sequencia
	and	y.cd_detalhe = '025'
	and	x.cd_procedimento = a.cd_procedimento
	and	x.ie_origem_proced = a.ie_origem_proced  LIMIT 1;
	
	if (qt_registro_w > 0) then
		begin
		
		begin
		select	count(1)
		into STRICT	qt_laudo_sismama_w
		from	sismama_atendimento a,
			conta_paciente b
		where	a.nr_atendimento 	= b.nr_atendimento
		and	a.dt_liberacao between(clock_timestamp() - interval '30 days') and fim_dia(clock_timestamp())
		and	a.nr_sequencia 	= (	SELECT 	max(x.nr_sequencia)
						from	sismama_atendimento x	
						where	x.nr_atendimento = a.nr_atendimento)
		and	b.nr_interno_conta 	= nr_interno_conta_p  LIMIT 1;
		exception
		when others then
			qt_laudo_sismama_w := 0;
		end;
		
		if (qt_laudo_sismama_w = 0) then
			begin
			ds_detalhe_w	:= ds_texto_atend_w || ' ' || nr_atendimento_p ||'; '|| ds_texto_Conta_w ||' ' || nr_interno_conta_p || '; '|| nm_paciente_txt_w || ' ' || nm_pessoa_w;
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 188, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
		end;
	end if;
	end;
end if;

if (sus_obter_inco_ativa(189)) then
	begin
	
	qt_registro_w := 0;
	
	open c04;
	loop
	fetch c04 bulk collect into s_array4 limit 100000;
		vetor_c04_w(l) := s_array4;
		l := l + 1;
	EXIT WHEN NOT FOUND; /* apply on c04 */
	end loop;
	close c04;
	
	for i in 1..vetor_c04_w.count loop
		begin
		s_array4 := vetor_c04_w(i);
		for z in 1..s_array4.count loop
			begin
			
			cd_procedimento_w	:= s_array4[z].cd_procedimento;
			cd_medico_executor_w	:= s_array4[z].cd_medico_executor;
			cd_pessoa_fisica_w	:= s_array4[z].cd_pessoa_fisica;
			qt_registro_w		:= s_array4[z].qt_registro;
		
			if (qt_registro_w > 9) then
				begin
				ds_detalhe_w	:= ds_texto_atend_w || ' ' || nr_atendimento_p ||'; ' || ds_texto_conta_w || ' ' || nr_interno_conta_p || '; ' || wheb_mensagem_pck.get_texto(278134) || ' ' || cd_procedimento_w;
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 189, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
				end;
			end if;
		
			end;
		end loop;
		end;
	end loop;
	end;
end if;

if (sus_obter_inco_ativa(190)) then
	begin
	
	qt_registro_w := 0;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	prescr_procedimento b,
		prescr_medica a
	where	a.nr_prescricao		= b.nr_prescricao
	and	a.nr_atendimento 	= nr_atendimento_p
	and	sus_obter_estrut_proc(b.cd_procedimento,b.ie_origem_proced,'C','S') = 202
	and	not exists (	SELECT 	1
				from	procedimento_paciente x
				where	x.nr_atendimento 	= a.nr_atendimento
				and	x.nr_prescricao 	= b.nr_prescricao
				and	x.nr_sequencia_prescricao = b.nr_sequencia)  LIMIT 1;
	
	if (qt_registro_w > 0) then
		begin
		ds_detalhe_w	:= ds_texto_atend_w || ' '  || nr_atendimento_p ||'; ' || ds_texto_conta_w || ' ' || nr_interno_conta_p || '; ' || nm_paciente_txt_w || ' ' || nm_pessoa_w;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 190, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);	
		end;
	end if;	
	
	end;	
end if;

if (sus_obter_inco_atv_conta(214,nr_interno_conta_p,null)) then
	begin
	
	open c05;
	loop
	fetch c05 bulk collect into s_array5 limit 100000;
		vetor_c05_w(m) := s_array5;
		m := m + 1;
	EXIT WHEN NOT FOUND; /* apply on c05 */
	end loop;
	close c05;
	
	for i in 1..vetor_c05_w.count loop
		begin
		s_array5 := vetor_c05_w(i);
		for z in 1..s_array5.count loop
			begin
			
			cd_procedimento_w	:= s_array5[z].cd_procedimento;
			ie_origem_proced_w	:= s_array5[z].ie_origem_proced;
			qt_proc_conta_w		:= s_array5[z].qt_proc_conta;
			qt_proc_permitido_w	:= s_array5[z].qt_proc_permitido;
			nr_seq_proc_princ_w	:= s_array5[z].nr_seq_proc_princ;
			dt_procedimento_ww	:= s_array5[z].dt_procedimento;
			
			if (ie_codigo_autorizacao_w in (5,14)) and (sus_validar_regra(27, cd_procedimento_w, ie_origem_proced_w,dt_procedimento_ww) > 0) then
				ie_liberado_w	:= 'S';
			end if;
			
			if (nr_seq_proc_princ_w IS NOT NULL AND nr_seq_proc_princ_w::text <> '') and (sus_validar_regra(4, cd_procedimento_w, ie_origem_proced_w,dt_procedimento_ww)	> 0) then
				
				select	cd_procedimento
				into STRICT	cd_proc_princ_w
				from	procedimento_paciente
				where	nr_sequencia	= nr_seq_proc_princ_w;
				
				select	coalesce(max(qt_proc_permitida),0)
				into STRICT	qt_opm_permitida_w
				from	sus_proc_compativel
				where	cd_proc_secundario	= cd_procedimento_w
				and	ie_origem_proc_sec	= ie_origem_proced_w
				and	cd_proc_principal	= cd_proc_princ_w
				and	ie_origem_proc_princ	= 7;
				
				if (qt_proc_permitido_w	<= qt_opm_permitida_w) then
					ie_liberado_w	:= 'S';
				end if;
			end if;
			
			if (cd_subgrupo_w = 603) then
				begin
				
				begin
				select	coalesce(max(a.qt_proc_permitida),0)
				into STRICT	qt_opm_permitida_w
				from	sus_proc_compativel a
				where	a.cd_proc_secundario	= cd_procedimento_w
				and	a.ie_origem_proc_sec	= ie_origem_proced_w
				and	a.cd_proc_principal in (SELECT	distinct x.cd_procedimento
								from	procedimento_paciente x,
									sus_valor_proc_paciente z
								where	x.nr_interno_conta = nr_interno_conta_p
								and	x.nr_atendimento = nr_atendimento_p
								and	coalesce(cd_motivo_exc_conta::text, '') = ''
								and	x.nr_sequencia	= z.nr_sequencia
								and	coalesce(z.cd_registro_proc,sus_obter_tiporeg_proc(cd_procedimento,ie_origem_proced,'C',13)) = 3)
				and	a.ie_origem_proc_princ	= 7;
				exception
				when others then
					qt_opm_permitida_w := 0;
				end;
				
				if (qt_proc_permitido_w	<= qt_opm_permitida_w) then
					ie_liberado_w	:= 'S';
				end if;			
				end;
			end if;
			
			if	((sus_obter_se_detalhe_proc(cd_procedimento_w,ie_origem_proced_w,'10065',dt_procedimento_ww) > 0) or (sus_obter_se_detalhe_proc(cd_procedimento_w,ie_origem_proced_w,'10066',dt_procedimento_ww) > 0)) then
				ie_liberado_w	:= 'S';
			end if;
			
			if (ie_liberado_w	= 'N') and
				((coalesce(sus_verificar_codigo_autor(coalesce(ie_codigo_autorizacao_w,0),'QTD'),'N') = 'N') or (sus_validar_regra(4,cd_procedimento_w,ie_origem_proced_w,dt_procedimento_ww) > 0)) then
				ds_detalhe_w	:= ds_texto_proc_w || ' ' || cd_procedimento_w || '; ' || wheb_mensagem_pck.get_texto(304363)|| ' ' ||
							qt_proc_conta_w || '; '|| wheb_mensagem_pck.get_texto(304334) || ' ' || qt_proc_permitido_w || '; ' || ds_texto_atend_w || ' ' || 
				nr_atendimento_p || '; '|| ds_texto_conta_w || ' ' || nr_interno_conta_p;
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 214, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end if;
		
			end;
		end loop;
		end;
	end loop;
	
	end;
end if;

if (sus_obter_inco_atv_conta(253,nr_interno_conta_p,null)) and (ie_tipo_atendimento_w = 1) then
	begin
	
	select	count(*)
	into STRICT	qt_max_dia_tres_w
	from (SELECT	establishment_timezone_utils.startofday(dt_procedimento),
			cd_procedimento,
			sum(qt_procedimento) qt_proc
		from	procedimento_paciente
		where	nr_interno_conta = nr_interno_conta_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	sus_obter_se_detalhe_proc(cd_procedimento,ie_origem_proced,'10065',dt_procedimento) > 0
		group by establishment_timezone_utils.startofday(dt_procedimento),
			cd_procedimento) a
	where	a.qt_proc > 3;	
	
	if (qt_max_dia_tres_w > 0) then
		ds_detalhe_w	:= substr(ds_texto_atend_w|| ' '|| nr_atendimento_p ||'; ' || ds_texto_conta_w || ' '|| nr_interno_conta_p ,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 253, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
	end;
end if;

if (sus_obter_inco_atv_conta(254,nr_interno_conta_p,null)) and (ie_tipo_atendimento_w = 1) then
	begin
	
	select	count(*)
	into STRICT	qt_max_dia_cinco_w
	from (SELECT	establishment_timezone_utils.startofday(dt_procedimento),
			cd_procedimento,
			sum(qt_procedimento) qt_proc
		from	procedimento_paciente
		where	nr_interno_conta = nr_interno_conta_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	sus_obter_se_detalhe_proc(cd_procedimento,ie_origem_proced,'10066',dt_procedimento) > 0
		group by establishment_timezone_utils.startofday(dt_procedimento),
			cd_procedimento) a
	where	a.qt_proc > 5;
	
	if (qt_max_dia_cinco_w > 0) then
		ds_detalhe_w	:= substr(ds_texto_atend_w || ' '|| nr_atendimento_p ||'; ' || ds_texto_conta_w || ' '|| nr_interno_conta_p ,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 254, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
	end;
end if;

if (sus_obter_inco_atv_conta(255,nr_interno_conta_p,null)) and (ie_tipo_atendimento_w <> 1) then
	begin
	
	select	coalesce(max(dt_mesano_referencia),clock_timestamp())
	into STRICT	dt_mesano_referencia_w
	from	conta_paciente
	where	nr_interno_conta = nr_interno_conta_p;
	
	for	r_c_inco_255 in c_inco_255(dt_mesano_referencia_w, nr_atendimento_p) loop
		begin
		
		if (coalesce(r_c_inco_255.conta, 0) > 0) then
			ds_detalhe_w	:= substr(ds_texto_atend_w || ' '|| nr_atendimento_p ||'; '|| wheb_mensagem_pck.get_texto(304375) || ' '|| nr_interno_conta_p ||'; '|| wheb_mensagem_pck.get_texto(304382) || ' '|| r_c_inco_255.conta ||'; '||
						wheb_mensagem_pck.get_texto(304333) || ' ' || r_c_inco_255.qt_proc || '; ' || wheb_mensagem_pck.get_texto(304334) || ' '||  r_c_inco_255.qt_max ,1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 255, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end if;	
		
		end;
	end loop;
	
	end;
end if;

if (sus_obter_inco_atv_conta(263,nr_interno_conta_p,null)) and (ie_tipo_atendimento_w = 1) then
	begin	
	cd_procedimento_w := 0;
	
	begin
	select	qt_nascido_vivo,
		qt_nascido_morto
	into STRICT	qt_nasc_vivo_w,
		qt_nasc_mortos_w
	from	sus_aih_unif
	where	nr_interno_conta	= nr_interno_conta_p;	
	exception
	when others then
		begin
		select	qt_nascido_vivo,
			qt_nascido_morto
		into STRICT	qt_nasc_vivo_w,
			qt_nasc_mortos_w
		from	sus_dados_aih_conta
		where	nr_interno_conta = nr_interno_conta_p;
		exception
		when others then
			qt_nasc_vivo_w 		:= 0;
			qt_nasc_mortos_w	:= 0;
		end;
	end;
	
	select	coalesce(max(a.cd_proc),0)
	into STRICT	cd_procedimento_w
	from (SELECT	cd_procedimento cd_proc,
			sum(qt_procedimento) qt_proc
		from	procedimento_paciente
		where	nr_interno_conta = nr_interno_conta_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	sus_obter_se_detalhe_proc(cd_procedimento,ie_origem_proced,'10045',dt_procedimento) > 0
		group by cd_procedimento) a
	where	a.qt_proc > qt_nasc_vivo_w;
	
	if (cd_procedimento_w = 0) then
		begin
		
		select	coalesce(max(a.cd_proc),0)
		into STRICT	cd_procedimento_w
		from (SELECT	cd_procedimento cd_proc,
				sum(qt_procedimento) qt_proc
			from	procedimento_paciente
			where	nr_interno_conta = nr_interno_conta_p
			and	coalesce(cd_motivo_exc_conta::text, '') = ''
			and	sus_obter_se_detalhe_proc(cd_procedimento,ie_origem_proced,'10044',dt_procedimento) > 0
			group by cd_procedimento) a
		where	a.qt_proc > (qt_nasc_vivo_w + qt_nasc_mortos_w);
		
		end;
	end if;
	
	if (cd_procedimento_w > 0) then
		begin
		ds_detalhe_w	:= substr(ds_texto_atend_w || ' ' || nr_atendimento_p ||'; '|| ds_texto_conta_w || ' '|| nr_interno_conta_p ||'; '|| ds_texto_proc_w || ' '|| cd_procedimento_w,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 263, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;	
	end;
end if;

if (sus_obter_inco_atv_conta(265,nr_interno_conta_p,null)) then
	begin
	
	begin
	select	coalesce(max(cd_material),0)
	into STRICT	cd_material_w
	from	material_atend_paciente
	where	nr_interno_conta = nr_interno_conta_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	coalesce(ie_valor_informado,'N') = 'S'
	and	coalesce(vl_material,0) > 0;	
	exception
	when others then
		cd_material_w := 0;
	end;
	
	if (cd_material_w > 0) then
		begin
		ds_detalhe_w	:= substr(ds_texto_atend_w || ' '|| nr_atendimento_p ||'; ' ||  ds_texto_conta_w || ' '|| nr_interno_conta_p ||'; ' || wheb_mensagem_pck.get_texto(304383) || ' '|| cd_material_w,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 265, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;
	
	end;
end if;

if (sus_obter_inco_atv_conta(276,nr_interno_conta_p,null)) then
	begin

	cd_procedimento_w := 0;
	
	select	a.dt_mesano_referencia
	into STRICT	dt_mesano_referencia_w
	from	conta_paciente a
	where	nr_interno_conta = nr_interno_conta_p  LIMIT 1;
	
	begin
	select 	coalesce(a.cd_procedimento,0),
		coalesce(a.ie_origem_proced,0),
		coalesce(d.qt_max_procedimento,0)
	into STRICT	cd_procedimento_w,
		ie_origem_proced_w,
		qt_max_proced_w
	from	procedimento_paciente a,
		conta_paciente b,
		atendimento_paciente c,
		procedimento d
	where	c.nr_atendimento = b.nr_atendimento
	and	b.nr_interno_conta = a.nr_interno_conta
	and	c.cd_pessoa_fisica = cd_pessoa_fisica_w
	and	a.ie_origem_proced = 7
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	a.cd_procedimento = d.cd_procedimento
	and	a.ie_origem_proced = d.ie_origem_proced
	and	establishment_timezone_utils.startofmonth(b.dt_mesano_referencia) = establishment_timezone_utils.startofmonth(dt_mesano_referencia_w)
	and	coalesce(d.qt_max_procedimento,0) > 0
	and	exists (SELECT	1
			from	procedimento_paciente w
			where	w.nr_interno_conta	= nr_interno_conta_p
			and	w.cd_procedimento	= a.cd_procedimento
			and	w.ie_origem_proced	= a.ie_origem_proced
			and	coalesce(w.cd_motivo_exc_conta::text, '') = '')
	and	not exists (	select	1
				from	sus_detalhe_proc r,
					sus_detalhe s
				where	r.cd_procedimento	= a.cd_procedimento
				and	r.ie_origem_proced	= a.ie_origem_proced
				and	r.nr_seq_detalhe	= s.nr_sequencia
				and	s.cd_detalhe in ('10065','10066'))
	group by	coalesce(a.cd_procedimento,0),
		coalesce(a.ie_origem_proced,0),
		coalesce(d.qt_max_procedimento,0)
	having(sum(coalesce(a.qt_procedimento,0)) > coalesce(d.qt_max_procedimento,0));	
	exception
	when others then
		cd_procedimento_w	:= 0;
		ie_origem_proced_w	:= 0;
		qt_max_proced_w		:= 0;
	end;
	
	if (cd_procedimento_w <> 0) then
		begin
		for c07_w in C07 loop
                        begin
                        ds_atendimentos_w	:= substr(ds_atendimentos_w || c07_w.nr_atendimento || ', ',1,255);
                        ds_contas_w		:= substr(ds_contas_w || c07_w.nr_interno_conta || ', ',1,255);
                        end;
		end loop;
	
		if 	((coalesce(ds_contas_w,'X') <> 'X') or (coalesce(ds_atendimentos_w,'X') <> 'X')) then		
			ds_detalhe_w	:= substr(wheb_mensagem_pck.get_texto(304385) || ' ' || ds_contas_w ||
						' ' || ds_texto_atend_w || ' ' || ds_atendimentos_w || ' ' || 
						ds_texto_proc_w || ' ' || cd_procedimento_w || ' ' || wheb_mensagem_pck.get_texto(304391) || ' ' ||
						qt_procedimento_w || ' '|| wheb_mensagem_pck.get_texto(304386) || ' '|| qt_max_proced_w,1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 276, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);		
		end  if;		
		end;
	end if;
	end;
end if;

if (sus_obter_inco_atv_conta(269,nr_interno_conta_p,null)) then
	begin
	
	select 	coalesce(max(nr_cirurgia),0)
	into STRICT 	nr_cirurgia_w
	from (	SELECT  p.nr_cirurgia
		from 	procedimento_paciente p,
			cirurgia c
		where 	c.nr_cirurgia  = p.nr_cirurgia
		and 	(c.dt_bloqueio_faturamento IS NOT NULL AND c.dt_bloqueio_faturamento::text <> '')
		and 	p.nr_interno_conta = nr_interno_conta_p
		and 	coalesce(p.cd_motivo_exc_conta::text, '') = '' 
		
union all

		SELECT  p.nr_cirurgia
		from material_atend_paciente p,
		cirurgia c
		where c.nr_cirurgia  = p.nr_cirurgia
		and (c.dt_bloqueio_faturamento IS NOT NULL AND c.dt_bloqueio_faturamento::text <> '')
		and p.nr_interno_conta = nr_interno_conta_p
		and coalesce(p.cd_motivo_exc_conta::text, '') = ''  LIMIT 1) alias8;
	exception
	when others then
		nr_cirurgia_w := 0;
	end;
	
		
	if (nr_cirurgia_w > 0) then
		ds_detalhe_w	:= substr(ds_texto_conta_w || ' ' || nr_interno_conta_p || ' '|| ds_texto_atend_w || ' ' || nr_atendimento_p || ' ' || wheb_mensagem_pck.get_texto(299804)|| ' ' || nr_cirurgia_w,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 269, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);		
	end if;
	
end if;

if (sus_obter_inco_atv_conta(287,nr_interno_conta_p,null)) then
	
	select 	coalesce(sum(vl_material),0)
	into STRICT	vl_material_w
	from	material_atend_paciente a
	where	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and 	a.nr_interno_conta = nr_interno_conta_p;
	
	if (vl_material_w > 0) then
		
		ds_detalhe_w	:= substr(ds_texto_conta_w || ' ' || nr_interno_conta_p || ' '|| ds_texto_atend_w || ' ' || nr_atendimento_p || ' ' || wheb_mensagem_pck.get_texto(315956)|| ' ' || vl_material_w,1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 287, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		
	end if;
	
end if;

if (sus_obter_inco_atv_conta(293,nr_interno_conta_p,null)) then
	begin
	qt_registro_w := 0;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	procedimento_paciente a,
		sus_detalhe_proc x,
		sus_detalhe y
	where	a.nr_interno_conta	= nr_interno_conta_p
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	x.nr_seq_detalhe = y.nr_sequencia
	and	y.cd_detalhe in ('023','040')
	and	x.cd_procedimento = a.cd_procedimento
	and	x.ie_origem_proced = a.ie_origem_proced
	and	not exists (	SELECT 1
   				from	sus_detalhe_proc a,
   					sus_detalhe b
   				where	a.nr_seq_detalhe = b.nr_sequencia
   				and	b.cd_detalhe = '025'
   				and	a.cd_procedimento = x.cd_procedimento)  LIMIT 1;
	
	if (qt_registro_w > 0) then
		begin
		
		begin
		select	count(1)
		into STRICT	qt_laudo_siscolo_w
		from	siscolo_atendimento a,
			conta_paciente b
		where	a.nr_atendimento 	= b.nr_atendimento
		and	a.dt_liberacao between(clock_timestamp() - interval '30 days') and fim_dia(clock_timestamp())
		and	a.nr_sequencia 	= (	SELECT 	max(x.nr_sequencia)
						from	siscolo_atendimento x	
						where	x.nr_atendimento = a.nr_atendimento)
		and	b.nr_interno_conta 	= nr_interno_conta_p  LIMIT 1;
		exception
		when others then
			qt_laudo_siscolo_w := 0;
		end;
		
		if (qt_laudo_siscolo_w = 0) then
			begin
			ds_detalhe_w	:= ds_texto_atend_w || ' ' || nr_atendimento_p ||'; '|| ds_texto_Conta_w ||' ' || nr_interno_conta_p || '; '|| nm_paciente_txt_w || ' ' || nm_pessoa_w;
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 293, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
		end;
	end if;
	end;
end if;

CALL sus_consiste_dados_pf(nr_interno_conta_p, nr_atendimento_p, nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_conta ( nr_interno_conta_p bigint, nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;

