-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pfcs_calc_avg_tim_tele_req ( nr_seq_indicator_p bigint, cd_estabelecimento_p text, nm_usuario_p text) AS $body$
DECLARE


	nr_total_sequence_w				    bigint := 0;
	nr_average_time_w				    pfcs_panel.vl_indicator%type;
	nr_seq_operational_level_w          pfcs_operational_level.nr_sequencia%type;
	nr_total_time_avg_w			      	bigint := 0;
	nr_seq_panel_w						pfcs_panel_detail.nr_seq_panel%type;
	pfcs_flag_settings          		bigint := 0;
	
	ie_request_status             		varchar(5) := 'R';
    ie_matching_status					varchar(5) := 'S';

	ds_active_status					varchar(15) := 'ACTIVE';
	ds_planned_status					varchar(15) := 'PLANNED';
	ds_arrived_status					varchar(15) := 'ARRIVED';
	
	ds_monitor_dev_type 				varchar(10) := 'Monitor';
	ds_service_requested				varchar(10) := 'E0404';
  ie_active								smallint := 1;

	--Cursor to fetch time waiting for each requests not met
	/* Cursor to read from pfcs integration tables */

	cur_get_recom_time_pfcs CURSOR FOR
		SELECT sr.nr_sequencia,
			pfcs_get_tele_time(sr.nr_sequencia, ie_request_status) nr_req_wait_time
		from pfcs_service_request sr,
			pfcs_encounter enc,
			pfcs_patient pat
		where
			sr.si_status = ds_active_status
			and sr.cd_service = ds_service_requested
			and sr.nr_seq_encounter = enc.nr_sequencia
			and enc.si_status in (ds_planned_status, ds_arrived_status)
			and enc.nr_seq_patient = pat.nr_sequencia
			and pat.ie_active = ie_active
			and pat.nr_seq_organization = (cd_estabelecimento_p)::numeric
			and pat.nr_sequencia not in (
				SELECT dev.nr_seq_patient
				from pfcs_device dev
				where dev.si_status = ds_active_status
					and dev.ds_device_type = ds_monitor_dev_type
					and (dev.nr_seq_patient IS NOT NULL AND dev.nr_seq_patient::text <> '')
			);

	/*Cursor to read from tasy table */

	cur_get_recom_time_tasy CURSOR FOR
     SELECT cr.nr_sequencia,
        pfcs_get_recommendation_status(cr.nr_sequencia) status,
        pfcs_get_recommendation_time(cr.nr_sequencia,ie_request_status) nr_req_wait_time
    from atendimento_paciente ap,
        cpoe_recomendacao cr,
        tipo_recomendacao tr
    where ap.nr_atendimento = cr.nr_atendimento
          and coalesce(ap.dt_alta::text, '') = ''
          and coalesce(ap.dt_alta_medico::text, '') = ''
          and coalesce(ap.dt_cancelamento::text, '') = ''
          and ap.cd_estabelecimento = (cd_estabelecimento_p)::numeric
          and cr.cd_recomendacao = tr.cd_tipo_recomendacao
          and coalesce(cr.dt_suspensao::text, '') = ''
          and (cr.dt_liberacao IS NOT NULL AND cr.dt_liberacao::text <> '')
          and pfcs_get_recommendation_status(cr.nr_sequencia) = ie_request_status
          and tr.ie_telemetria = ie_matching_status;

	
BEGIN
		nr_seq_operational_level_w := pfcs_get_structure_level(
									cd_establishment_p => cd_estabelecimento_p,
									ie_level_p => 'O',
									ie_info_p => 'C');

		select ie_table_origin into STRICT pfcs_flag_settings
		from pfcs_general_rule;

		/* Read from Tasy cursor*/

		if (pfcs_flag_settings = 0 or pfcs_flag_settings = 2)
		then
			for rec_get_recom_time in cur_get_recom_time_tasy
				loop
					begin
						nr_total_sequence_w  := nr_total_sequence_w + 1;
						nr_total_time_avg_w   := nr_total_time_avg_w + rec_get_recom_time.nr_req_wait_time;
					end;
			end loop;
		end if;

		/* Read from PFCS Integration cursor*/

		if (pfcs_flag_settings = 1 or pfcs_flag_settings = 2)
		then
			for rec_get_recom_time in cur_get_recom_time_pfcs
			loop
				begin
					/* For pfcs_flag_settings = 2 append to data read from Tasy */

					nr_total_sequence_w  := nr_total_sequence_w + 1;
					nr_total_time_avg_w  := nr_total_time_avg_w + rec_get_recom_time.nr_req_wait_time;
				end;
			end loop;
		end if;

  if (nr_total_sequence_w = 0) then
    nr_total_sequence_w := 0;
  else
    nr_average_time_w := round(nr_total_time_avg_w / nr_total_sequence_w);
  end if;

	 := pfcs_pck.pfcs_generate_results(
		vl_indicator_p => nr_average_time_w, ds_reference_value_p => '', nr_seq_indicator_p => nr_seq_indicator_p, nr_seq_operational_level_p => nr_seq_operational_level_w, nm_usuario_p => nm_usuario_p, nr_seq_panel_p => nr_seq_panel_w);

	CALL pfcs_pck.pfcs_activate_records(
		nr_seq_indicator_p => nr_seq_indicator_p,
		nr_seq_operational_level_p => nr_seq_operational_level_w,
		nm_usuario_p => nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_calc_avg_tim_tele_req ( nr_seq_indicator_p bigint, cd_estabelecimento_p text, nm_usuario_p text) FROM PUBLIC;

