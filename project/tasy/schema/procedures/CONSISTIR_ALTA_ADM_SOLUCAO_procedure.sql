-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_alta_adm_solucao (nr_atendimento_p bigint, dt_evento_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ie_acao_p text) AS $body$
DECLARE

 
/* 
ie_acao_p 'P' = opção Processo(Solução) 
ie_acao_p 'A' = opção Registrar Volume Parcial 
*/
										 
dt_entrada_w			 timestamp;
dt_alta_w				 timestamp;						
ie_perm_sol_alta_w		 varchar(1);
qt_horas_alta_w	 		 bigint;
v_par_adep_set_670_w 	 varchar(1);
cd_setor_atendimento_w 	 integer;


BEGIN 
/* obter valor parametro */
 
CALL Wheb_assist_pck.set_informacoes_usuario(cd_estabelecimento_p, obter_perfil_ativo, nm_usuario_p);
 
ie_perm_sol_alta_w 	:= Wheb_assist_pck.obterParametroFuncao(1113,63);
qt_horas_alta_w			:= Wheb_assist_pck.obterParametroFuncao(1113,268);
v_par_adep_set_670_w	:= Wheb_assist_pck.obterParametroFuncao(1113,670);
 
if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then 
	begin 
	 
	/* obter dados atendimento */
 
		select	max(dt_entrada), 
			max(dt_alta) 
		into STRICT	dt_entrada_w, 
			dt_alta_w 
		from	atendimento_paciente 
		where	nr_atendimento = nr_atendimento_p;
 
	/*obter código do setor do atendimento*/
 
		cd_setor_atendimento_w := obter_unidade_atendimento(nr_atendimento_p,'A','CS');
	 
		if (v_par_adep_set_670_w = 'S') then 
				select coalesce(max(ie_permite_sol_alta),ie_perm_sol_alta_w), 
					coalesce(max(qt_minutos_alta_sol),qt_horas_alta_w) 
				into STRICT  ie_perm_sol_alta_w, 		 		 	 --Parâmetro 63 regra adep. Gestão do paciente/ADEP/Parâmetros ADEP por Setor 
						qt_horas_alta_w 					 --Parâmetro 268 regra adep. Gestão do paciente/ADEP/Parâmetros ADEP por Setor 
				from  adep_parametros_setor 
				where cd_setor_atendimento = cd_setor_atendimento_w;
		end if;
	 
		if (qt_horas_alta_w > 0) and (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') and (dt_alta_w < clock_timestamp() - qt_horas_alta_w/1440) then 
				if (ie_acao_p = 'P') then 
					 CALL wheb_mensagem_pck.exibir_mensagem_abort(282810, 'DATA='||PKG_DATE_FORMATERS.to_varchar(dt_alta_w, 'timestamp', 8031,PKG_DATE_FORMATERS.getCalendar(cd_estabelecimento_p,nm_usuario_p))||';'|| 
									'MINUTOS='||qt_horas_alta_w);
				elsif (ie_acao_p = 'A') then 
					  CALL wheb_mensagem_pck.exibir_mensagem_abort(282809, 'DATA='||PKG_DATE_FORMATERS.to_varchar(dt_alta_w, 'timestamp', 8031,PKG_DATE_FORMATERS.getCalendar(cd_estabelecimento_p,nm_usuario_p))||';'|| 
										'MINUTOS='||qt_horas_alta_w);
				end if;			
		end if;
 
	/* validar dados atendimento x evento */
 
		if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') and (ie_perm_sol_alta_w = 'N') then 
				if (ie_acao_p = 'P') then 
					 CALL wheb_mensagem_pck.exibir_mensagem_abort(282808, 'DATA='||PKG_DATE_FORMATERS.to_varchar(dt_alta_w, 'timestamp', 8031,PKG_DATE_FORMATERS.getCalendar(cd_estabelecimento_p,nm_usuario_p)));
				elsif (ie_acao_p = 'A') then 
					  CALL wheb_mensagem_pck.exibir_mensagem_abort(282807, 'DATA='||PKG_DATE_FORMATERS.to_varchar(dt_alta_w, 'timestamp', 8031,PKG_DATE_FORMATERS.getCalendar(cd_estabelecimento_p,nm_usuario_p)));
				end if;
		elsif (dt_evento_p < dt_entrada_w) then 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(173574);
		end if;
	end;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_alta_adm_solucao (nr_atendimento_p bigint, dt_evento_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ie_acao_p text) FROM PUBLIC;

