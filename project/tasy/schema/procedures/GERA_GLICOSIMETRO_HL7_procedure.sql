-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS ( nm_sinal_vital      varchar(100),
                        vl_sinal_vital      varchar(100),
                        nm_codigo           varchar(100),
                        ds_unidade_medida   varchar(100),
                        ds_lista            varchar(255));


CREATE OR REPLACE PROCEDURE gera_glicosimetro_hl7 ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, ie_trend_upload_p text default 'N', nr_atendimento_p bigint default null) AS $body$
DECLARE


TYPE Vetor IS TABLE OF campos INDEX BY integer;
Vetor_w	                Vetor;

nr_atendimento_w           bigint;
dt_sinal_vital_w           timestamp;
nr_seq_sinal_vital_w       bigint      := 0;
ds_parametros_w            varchar(32000);
indice                     integer;
ds_lista_aux_w             varchar(255);
ds_sep_bv_w                varchar(30)    := obter_separador_bv;
    ds_erro_w                  varchar(4000);
cd_estabelecimento_w       bigint;
ds_hl7_w				   varchar(4000);
nm_tabela_w                varchar(100);
nm_atributo_w			   varchar(100);
ds_update_complementar_w   varchar(255);
nr_sequencia_integracao_w  bigint;
ie_exige_aprovacao_w        varchar(2);
ExigeAprovacaoNao           varchar(2) := 'N';
ExigeAprovacaoSim           varchar(2) := 'S';
ExigeAprovacaoForaFaixa     varchar(2) := 'C';
ds_retorno_valida_sv_w      varchar(2000) := null;
ie_retorno_valida_sv_w      varchar(10)   := null;
nls_numeric_characters_w    varchar(50);
output_sql_dinam            smallint	:= 0;
avoid_loop                  smallint;
replaced_param              smallint;
first_param                 varchar(1);
second_param                varchar(1);
qt_glicemia_w		atendimento_sinal_vital.QT_GLICEMIA_CAPILAR%type;
qt_cetona_w			atendimento_sinal_vital.QT_CETONA%type;
IE_GLIC_EXTRAPOL_w	atendimento_sinal_vital.IE_GLIC_EXTRAPOL%type;


c01 CURSOR FOR
    SELECT nm_tabela,
    	   nm_atributo,
		   ds_hl7,
		   ds_update_complementar
    FROM   emp_integracao_de_para_hl7
    WHERE  nr_seq_emp_integracao = nr_sequencia_integracao_w;


	PROCEDURE inserir_sv IS
	;
BEGIN
    IF (nr_seq_sinal_vital_w	= 0) THEN

		SELECT	nextval('atendimento_sinal_vital_seq')
		INTO STRICT	nr_seq_sinal_vital_w
		;

		INSERT INTO atendimento_sinal_vital(	nr_sequencia,
							nr_atendimento,
							dt_sinal_vital,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							ie_importado,
							ie_situacao,
							nm_usuario_nrec,
							ie_integracao,
							IE_GLIC_EXTRAPOL)
				VALUES (	nr_seq_sinal_vital_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_p,
							NULL,
							'S',
							'A',
							nm_usuario_p,
							'S',
							IE_GLIC_EXTRAPOL_w);
	END IF;
	END;


	PROCEDURE exec_sql_dinamico_with_excep(
		nm_usuario_e in varchar2, 
		ds_comando_e in VARCHAR2, 
		ds_parametros_e in varchar2, 
		nm_atributo_e in VARCHAR2, 
		saida_e in out number, 
		avoid_loop_e in out number, 
		first_param_e in out varchar2,  
		second_param_e in out varchar2,
		replaced in out number
	) IS

	BEGIN
		CALL Exec_sql_Dinamico_bv(nm_usuario_e,ds_comando_e,ds_parametros_e);
		saida_e := 0;
		exception when others then
			avoid_loop_e := avoid_loop_e + 1;
			if (avoid_loop_e <= 1) AND (replaced = 1) then
			  first_param_e := '.'; second_param_e := ',';
			  saida_e := 1;
			else
			  saida_e := 0;
			end if;
	END;


	PROCEDURE atualizar_valor_sv(	nm_tabela_p	IN VARCHAR2,
					nm_atributo_p	IN VARCHAR2,
					vl_parametro_p	IN VARCHAR2,
					vl_unidade_complementar_p	IN VARCHAR2) IS
	ds_comando_w	VARCHAR2(2000);
	ds_parametros_w	VARCHAR2(2000);
	vl_parametro_w	VARCHAR2(2000);
	vl_unidade_complementar_w VARCHAR2(2000);
	BEGIN

	IF (vl_unidade_complementar_p IS NOT NULL AND vl_unidade_complementar_p::text <> '') THEN

	vl_unidade_complementar_w := vl_unidade_complementar_p;

	ds_comando_w	:= 	'	update	'||nm_tabela_p	||
				'	set	'||nm_atributo_p||' = :vl_unidade_complementar'||
				'	where	nr_sequencia	= :nr_sequencia ';

	ELSE
	ds_comando_w	:= 	'	update	'||nm_tabela_p	||
				'	set	'||nm_atributo_p||' = :vl_parametro'||
				'	where	nr_sequencia	= :nr_sequencia ';

	END IF;

	first_param := ',';
	second_param := '.';
	avoid_loop := 0;
	replaced_param := 0;

	<<error_exec_sql>>

	vl_parametro_w	:= vl_parametro_p;
	IF	((SUBSTR(nm_atributo_p,1,2)	= 'QT') OR (SUBSTR(nm_atributo_p,1,2)	= 'PR') OR (SUBSTR(nm_atributo_p,1,2)	= 'VL') OR (SUBSTR(nm_atributo_p,1,2)	= 'TX')) THEN
			begin
			replaced_param := 1;
			vl_parametro_w	:= REPLACE(vl_parametro_w,first_param,second_param);
			exception when others then	
				vl_parametro_w := vl_parametro_w;
			end;
	END IF;


BEGIN
	if (position('>' in vl_parametro_p)>0) then
	IE_GLIC_EXTRAPOL_w	:= 'S';
		elsif (position('<' in vl_parametro_p)>0) then
	IE_GLIC_EXTRAPOL_w	:= 'E';
	end if;

vl_parametro_w	:= replace(vl_parametro_p,'.',',');
vl_parametro_w	:= REPLACE(replace(replace(vl_parametro_p,'<',null),'>',null),'.',',');

exception
	when others then
	null;
end;

	
	IF (nm_tabela_p	= 'ATENDIMENTO_SINAL_VITAL') AND (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') AND (LOWER(vl_parametro_p)	<> 'null')THEN
		if (avoid_loop = 0) then
		    inserir_sv;
		end if;
		IF (vl_unidade_complementar_w IS NOT NULL AND vl_unidade_complementar_w::text <> '') THEN
		ds_parametros_w:=	'vl_unidade_complementar='||vl_unidade_complementar_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_sinal_vital_w||ds_sep_bv_w;
		ELSE
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_sinal_vital_w||ds_sep_bv_w;
		END IF;
    exec_sql_dinamico_with_excep(nm_usuario_p, ds_comando_w, ds_parametros_w, nm_atributo_p, output_sql_dinam, avoid_loop, first_param, second_param, replaced_param);
		if (output_sql_dinam = 1) then
		  GOTO error_exec_sql;
		end if;
	END IF;


	END;
	
BEGIN

SELECT nr_sequencia
INTO STRICT nr_sequencia_integracao_w
FROM empresa_integracao
WHERE UPPER(nm_empresa) = UPPER(nm_usuario_p);



BEGIN
dt_sinal_vital_w := TO_DATE(dt_sinal_vital_p, 'yyyymmddhh24miss');
EXCEPTION
	WHEN OTHERS THEN
	dt_sinal_vital_w	:=  clock_timestamp();
END;


select  coalesce(nr_atendimento_p,max(nr_atendimento))
into STRICT 	nr_atendimento_w
from 	atendimento_paciente
where 	cd_pessoa_fisica  = cd_pessoa_fisica_p
and 	coalesce(dt_alta::text, '') = '';

ds_parametros_w    := ds_lista_parametros_p||ds_lista_parametros2_p;
ds_parametros_w	   := REPLACE(ds_parametros_w,'null','');
indice	:= 0;

WHILE(LENGTH(ds_parametros_w) > 0) LOOP
	BEGIN
	indice	:= indice+1;
	IF (position(';' in ds_parametros_w)	>0)  THEN
		Vetor_w[indice].ds_lista	:= SUBSTR(ds_parametros_w,1,position(';' in ds_parametros_w)-1 );
		ds_parametros_w	:= SUBSTR(ds_parametros_w,position(';' in ds_parametros_w)+1,40000);

	ELSE
		Vetor_w[indice].ds_lista	:=SUBSTR(ds_parametros_w,1,LENGTH(ds_parametros_w) - 1);
		ds_parametros_w	:= NULL;
	END IF;

	END;
END LOOP;

RAISE NOTICE '%', Vetor_w.COUNT;


FOR j IN 1..Vetor_w.COUNT LOOP
	BEGIN

	ds_lista_aux_w	:= Vetor_w[j].ds_lista;

	Vetor_w[j].nm_sinal_vital	:= SUBSTR(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)-1 );
	RAISE NOTICE 'nm_sinal_vital = %', Vetor_w[j].nm_sinal_vital;

	ds_lista_aux_w	:= SUBSTR(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
	Vetor_w[j].ds_unidade_medida	:= SUBSTR(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );
	ds_lista_aux_w	:= SUBSTR(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);

	Vetor_w[j].nm_codigo	:= SUBSTR(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );

	RAISE NOTICE 'nm_codigo = %', Vetor_w[j].nm_codigo;
	ds_lista_aux_w	:= SUBSTR(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);

	Vetor_w[j].vl_sinal_vital	:= SUBSTR(ds_lista_aux_w,1,4000 );

	END;
END LOOP;

SELECT	coalesce(MAX(cd_estabelecimento),1)
INTO STRICT	cd_estabelecimento_w
FROM	atendimento_paciente
WHERE	nr_atendimento	= nr_atendimento_w;

if 	((nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') OR (ie_trend_upload_p = 'S')) then
	
	OPEN c01;
		LOOP
		FETCH c01 INTO
			nm_tabela_w,
			nm_atributo_w,
			ds_hl7_w,
			ds_update_complementar_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
	
		IF (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') THEN
	
			FOR i IN 1..Vetor_w.COUNT LOOP
			BEGIN
				IF (Vetor_w[i].nm_sinal_vital = ds_hl7_w) THEN
					atualizar_valor_sv(nm_tabela_w,nm_atributo_w,Vetor_w[i].vl_sinal_vital,ds_update_complementar_w );
				END IF;
			END;
			END LOOP;
	
		END IF;
	END LOOP;
	
	CLOSE c01;
end if;

if (coalesce(nr_seq_sinal_vital_w,0) > 0) then
	begin

	if (ie_trend_upload_p = 'S') then
		ie_exige_aprovacao_w := ExigeAprovacaoNao;
	else
		 ie_exige_aprovacao_w := obter_param_usuario(281, 1493, 0, nm_usuario_p, cd_estabelecimento_w, ie_exige_aprovacao_w);
	end if;

	case ie_exige_aprovacao_w

		when ExigeAprovacaoSim then
			null;
			
		when ExigeAprovacaoNao then

			update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
			commit;
			
		when ExigeAprovacaoForaFaixa then

			SELECT * FROM consiste_itens_sinal_vital(nr_seq_sinal_vital_w, ds_retorno_valida_sv_w, ie_retorno_valida_sv_w) INTO STRICT ds_retorno_valida_sv_w, ie_retorno_valida_sv_w;
			
			if (ie_retorno_valida_sv_w <> 'E' AND ie_retorno_valida_sv_w <> 'A')then

				update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
				commit;
				
			end if;
		else
			update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
			commit;
		
	end case;
	exception
	when others then
		update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
		commit;
	end;
end if;

COMMIT;


END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gera_glicosimetro_hl7 ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, ie_trend_upload_p text default 'N', nr_atendimento_p bigint default null) FROM PUBLIC;

