-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_calcular_trev_element ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE


qt_peso_w		double precision;
qt_be_w			double precision;
nr_sequencia_w		bigint;
nr_seq_elemento_w		bigint;
qt_elem_kg_dia_w		double precision;
qt_diaria_w		double precision;
ie_tipo_elemento_w		varchar(3);
qt_conversao_ml_w		double precision;
qt_volume_w		double precision;
qt_vol_tot_w		double precision;
nr_seq_elem_mat_w	bigint;
qt_peso_calorico_w			cpoe_trev.qt_peso_calorico%type;
qt_aporte_hidrico_diario_w	cpoe_trev.qt_aporte_hidrico_diario%type;
ie_unidade_ped_calc_w		cpoe_trev_elem.ie_unidade_ped_calc%type;

c01 CURSOR FOR
	SELECT	a.nr_sequencia,
			a.qt_elem_kg_dia,
			b.ie_tipo_elemento,
			a.ie_unidade_ped_calc
	from	nut_elemento b,
			cpoe_trev_elem a
	where	nr_seq_cpoe_trev	= nr_sequencia_p
	and	a.nr_seq_elemento	= b.nr_sequencia
	and b.ie_tipo_elemento not in ('S');

c02 CURSOR FOR
	SELECT	a.nr_sequencia,
			qt_conversao_ml
	from	nut_elem_material b,
			cpoe_trev_elem_mat a
	where	a.nr_seq_ele_cpoe	= nr_sequencia_w
	and	a.nr_seq_elem_mat	= b.nr_sequencia
	and	coalesce(b.ie_tipo,'NPT')	= 'NPT';

c03 CURSOR FOR
	SELECT	a.nr_sequencia,
			a.qt_elem_kg_dia,
			b.ie_tipo_elemento,
			a.ie_unidade_ped_calc
	from	nut_elemento b,
			cpoe_trev_elem a
	where	nr_seq_cpoe_trev = nr_sequencia_p
	and	a.nr_seq_elemento = b.nr_sequencia
	and b.ie_tipo_elemento in ('S');

BEGIN

select	coalesce(max(qt_peso),0),
		coalesce(max(qt_be),0),
		coalesce(max(qt_peso_calorico), 0),
		coalesce(max(qt_aporte_hidrico_diario), 0)
into STRICT	qt_peso_w,
		qt_be_w,
		qt_peso_calorico_w,
		qt_aporte_hidrico_diario_w
from	cpoe_trev
where	nr_sequencia = nr_sequencia_p;

/* Elementos diferente de sodio isotonico */

for c01_w in C01
loop
	nr_sequencia_w := c01_w.nr_sequencia;
	qt_elem_kg_dia_w := c01_w.qt_elem_kg_dia;
	ie_tipo_elemento_w := c01_w.ie_tipo_elemento;
	ie_unidade_ped_calc_w := c01_w.ie_unidade_ped_calc;

	qt_diaria_w := 0;
	qt_vol_tot_w := 0;

	/* Calcula peso diario para elementos diferentes de sodio isotonico glicose e agua*/

	if (ie_tipo_elemento_w not in ('S', 'C', 'A')) then
		/* Por peso real */

		if (ie_unidade_ped_calc_w = 'R') then
			qt_diaria_w := qt_elem_kg_dia_w * qt_peso_w;
		/* Por peso calorico */

		elsif (ie_unidade_ped_calc_w = 'C') then
			qt_diaria_w := qt_elem_kg_dia_w * qt_peso_calorico_w;
		/* Por litro */

		elsif (ie_unidade_ped_calc_w = 'L') then
			qt_diaria_w := qt_elem_kg_dia_w * (qt_aporte_hidrico_diario_w / 1000);
		/* Por mililitro */

		elsif (ie_unidade_ped_calc_w = 'M') then
			qt_diaria_w := qt_elem_kg_dia_w * qt_aporte_hidrico_diario_w;
		/* Por dia */

		elsif (ie_unidade_ped_calc_w = 'D') then
			qt_diaria_w := qt_elem_kg_dia_w;
		end if;
	elsif (ie_tipo_elemento_w in ('A')) then
		qt_diaria_w := qt_elem_kg_dia_w * qt_peso_w;
	end if;

	for c02_w in C02
	loop
		if (coalesce(c02_w.qt_conversao_ml::text, '') = '')	then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1161988);
		end if;

		nr_seq_elem_mat_w := c02_w.nr_sequencia;
		qt_conversao_ml_w := c02_w.qt_conversao_ml;

		qt_volume_w	:= qt_diaria_w * qt_conversao_ml_w;
		qt_vol_tot_w	:= qt_vol_tot_w + qt_volume_w;
		
		update	cpoe_trev_elem_mat
		set	qt_volume	= qt_volume_w,
			qt_vol_cor	= 0
		where	nr_sequencia	= nr_seq_elem_mat_w;
	end loop;

	update	cpoe_trev_elem
	set	qt_diaria		= qt_diaria_w,
		qt_volume	= qt_vol_tot_w,
		qt_volume_corrigido	= 0
	where	nr_sequencia	= nr_sequencia_w
	and ie_tipo_elemento_w not in ('S','C');

end loop;

qt_vol_tot_w := 0;
qt_diaria_w := 0;
qt_volume_w := 0;

/* Soma dos volumes para o sodio isotonico */

select sum(a.qt_volume)
  into STRICT qt_vol_tot_w
  from nut_elemento b,
       cpoe_trev_elem a
 where a.nr_seq_cpoe_trev	= nr_sequencia_p
   and a.nr_seq_elemento = b.nr_sequencia
   and b.ie_tipo_elemento not in ('S');

qt_volume_w := qt_aporte_hidrico_diario_w - qt_vol_tot_w;

for c03_w in C03
loop
	nr_sequencia_w := c03_w.nr_sequencia;
	ie_tipo_elemento_w := c03_w.ie_tipo_elemento;
	ie_unidade_ped_calc_w := c03_w.ie_unidade_ped_calc;

	qt_diaria_w := 0;
	for c02_w in C02
	loop
		if (coalesce(c02_w.qt_conversao_ml::text, '') = '')	then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1161988);
		end if;

		nr_seq_elem_mat_w := c02_w.nr_sequencia;
		qt_conversao_ml_w := c02_w.qt_conversao_ml;

		qt_diaria_w := qt_diaria_w + dividir(qt_volume_w, qt_conversao_ml_w);

		update	cpoe_trev_elem_mat
		set	qt_volume	= qt_volume_w,
			qt_vol_cor	= 0
		where nr_sequencia = nr_seq_elem_mat_w;

	end loop;
	
	update cpoe_trev_elem a
	   set a.qt_volume = qt_volume_w,
		   a.qt_elem_kg_dia = dividir(qt_diaria_w, qt_peso_w),
		   a.qt_diaria = qt_diaria_w
	 where a.nr_sequencia = nr_sequencia_w;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_calcular_trev_element ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

