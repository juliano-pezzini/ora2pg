-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nota_fiscal_adiant ( nr_adiantamento_p bigint, cd_serie_nf_p text, nm_usuario_p text, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, cd_condicao_pagamento_p bigint, cd_estabelecimento_p bigint, cd_centro_custo_p bigint, cd_conta_contabil_p text, cd_local_estoque_p bigint, nr_nota_fiscal_p INOUT bigint, cd_tipo_relacao_p text, cd_uso_cfdi_p text, cd_pessoa_fisica_p text, cd_cgc_p text, cd_procedimento_p bigint default null, cd_origem_proced_p bigint default null) AS $body$
DECLARE


nr_atendimento_w        adiantamento.nr_atendimento%TYPE;
cd_pessoa_fisica_w      adiantamento.cd_pessoa_fisica%TYPE;
cd_cgc_w                adiantamento.cd_cgc%TYPE;
vl_adiantamento_w       adiantamento.vl_adiantamento%TYPE;
cd_moeda_w              adiantamento.cd_moeda%TYPE;
ds_observacao_w		adiantamento.ds_observacao%TYPE;
nr_sequencia_w          nota_fiscal.nr_sequencia%TYPE;
ie_tipo_nota_w          nota_fiscal.ie_tipo_nota%TYPE;
nr_sequencia_nf_w       nota_fiscal.nr_sequencia_nf%TYPE;
nr_nota_fiscal_w	nota_fiscal.nr_nota_fiscal%TYPE;
cd_cgc_emitente_w	nota_fiscal.cd_cgc_emitente%TYPE;
ie_tipo_nota_ww         varchar(10);
vl_taxa_w		smallint := 16;
vl_valor_adiant_ajust_w	double precision;
vl_tributo_ww		nota_fiscal_item_trib.vl_tributo%TYPE;
vl_diferencia_w		double precision;
vl_ajustado_iva_w	adiantamento.vl_adiantamento%TYPE;
cd_natureza_operacao_w  natureza_operacao.cd_natureza_operacao%TYPE;
nr_seq_caixa_rec_w	caixa_receb.nr_sequencia%TYPE;   -- HSJ 2018 -- CRIADO
nr_adiantamento_w	adiantamento.nr_adiantamento%TYPE; -- HSJ 2018 -- CRIADO
cd_tipo_recebimento_w	adiantamento.cd_tipo_recebimento%TYPE; -- HSJ 2018 -- CRIADO
cd_tipo_recebimento_ww	adiantamento.cd_tipo_recebimento%TYPE; -- HSJ 2018 -- CRIADO
ds_erro_w		varchar(4000);
cd_serie_nf_w           nota_fiscal.cd_serie_nf%type;
cd_estabelecimento_w    nota_fiscal.cd_estabelecimento%type;

c01 CURSOR FOR  -- HSJ 2018 -- CRIADO O CURSOR
	SELECT	nr_adiantamento,
		cd_tipo_recebimento
	FROM	adiantamento
	WHERE	nr_seq_caixa_rec = nr_seq_caixa_rec_w;


BEGIN	

SELECT  MAX(nr_seq_caixa_rec) -- HSJ 2018 -- CRIADO PARA BUSCAR A SEQUENCIA DO CAIXA CONFORME O ADIANTAMENTO INFORMADO
INTO STRICT	nr_seq_caixa_rec_w
FROM	adiantamento
WHERE	nr_adiantamento = nr_adiantamento_p;

IF (coalesce(nr_seq_caixa_rec_w,0) <> 0) THEN
	OPEN c01; -- HSJ 2018 -- CRIADO O CURSOR
	LOOP
	FETCH c01 INTO
		nr_adiantamento_w,
		cd_tipo_recebimento_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		BEGIN

		SELECT  MAX(nr_atendimento),
			MAX(cd_pessoa_fisica),
			MAX(cd_cgc),
			MAX(vl_adiantamento),
			MAX(cd_moeda),
			MAX(ds_observacao)
		INTO STRICT    nr_atendimento_w,
			cd_pessoa_fisica_w,
			cd_cgc_w,
			vl_adiantamento_w,
			cd_moeda_w,
			ds_observacao_w
		FROM    adiantamento
		WHERE   nr_adiantamento = nr_adiantamento_w; -- HSJ 2018 --  ALTERADO PARA BUSCAR O NR_ADIANTAMENTO_W E NAO MAIS O NR_ADIANTAMENTO_P
		SELECT	nextval('nota_fiscal_seq')
		INTO STRICT	nr_sequencia_w
		;

		-- INICIO PEGAR O NR_NOTA_FISCAL
        begin
		SELECT	nr_ultima_nf + 1
		INTO STRICT	nr_nota_fiscal_w
		FROM	serie_nota_fiscal
		WHERE	cd_serie_nf 			= cd_serie_nf_p
		AND	cd_estabelecimento 		= cd_estabelecimento_p;
		exception
	when no_data_found then		
             CALL wheb_mensagem_pck.exibir_mensagem_abort(219156);		
        end;


		-- FIM PEGAR O NR_NOTA_FISCAL
		
		SELECT 	cd_cgc
		INTO STRICT 	cd_cgc_emitente_w
		FROM 	estabelecimento
		WHERE 	cd_estabelecimento = cd_estabelecimento_p;

		SELECT 	coalesce(MAX(nr_sequencia_nf),0)+1
		INTO STRICT	nr_sequencia_nf_w
		FROM 	nota_fiscal
		WHERE	nr_nota_fiscal 		= nr_nota_fiscal_w
		AND	cd_estabelecimento 	= cd_estabelecimento_p
		AND	cd_serie_nf 		= cd_serie_nf_p
		AND	cd_cgc_emitente		= cd_cgc_emitente_w;


		IF (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') THEN
		    ie_tipo_nota_w  := 'SF';
		    ie_tipo_nota_ww := '2';
		ELSE
		    ie_tipo_nota_w  := 'SE';
		    ie_tipo_nota_ww := '0';
		END IF;

		SELECT	coalesce(cd_natureza_operacao,cd_natureza_operacao_p)
		INTO STRICT	cd_natureza_operacao_w
		FROM	operacao_nota
		WHERE	cd_operacao_nf = cd_operacao_nf_p;


		INSERT INTO nota_fiscal(
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_nota_fiscal,
			nr_sequencia_nf,
			cd_operacao_nf,
			dt_emissao,
			dt_entrada_saida,
			ie_acao_nf,
			ie_emissao_nf,
			ie_tipo_frete,
			vl_mercadoria,
			vl_total_nota,
			qt_peso_bruto,
			qt_peso_liquido,
			dt_atualizacao,
			nm_usuario,
			cd_condicao_pagamento,
			dt_contabil,
			cd_cgc,
			cd_pessoa_fisica,
			vl_ipi,
			vl_descontos,
			vl_frete,
			vl_seguro,
			vl_despesa_acessoria,
			vl_despesa_doc,
			ds_observacao,
			nr_nota_referencia,
			cd_serie_referencia,
			cd_natureza_operacao,
			dt_atualizacao_estoque,
			vl_desconto_rateio,
			ie_situacao,
			nr_ordem_compra,
			nr_lote_contabil,
			nr_sequencia,
			cd_moeda,
			vl_conv_moeda,
			ie_entregue_bloqueto,
			ie_tipo_nota,
			cd_setor_digitacao,
			nr_danfe,
			nr_seq_adiantamento)
		VALUES (	cd_estabelecimento_p,
			cd_cgc_emitente_w,
			cd_serie_nf_p,
			nr_nota_fiscal_w,
			nr_sequencia_nf_w,
			cd_operacao_nf_p,
			clock_timestamp(),
			clock_timestamp(),
			'1',
			'0',
			'0',
			0,
			0,
			0,
			0,
			clock_timestamp(),
			nm_usuario_p,
			cd_condicao_pagamento_p,
			NULL,
			cd_cgc_p,
			cd_pessoa_fisica_p,
			0,
			0,
			NULL,
			0,
			0,
			0,
			ds_observacao_w,
			NULL,
			NULL,
			cd_natureza_operacao_p,
			NULL,
			0,
			'1',
			NULL,
			0,
			nr_sequencia_w,
			cd_moeda_w,
			NULL,
			'N',
			ie_tipo_nota_w,
			NULL,
			NULL,
			nr_adiantamento_w); -- HSJ 2018 --  ALTERADO PARA BUSCAR O NR_ADIANTAMENTO_W E NAO MAIS O NR_ADIANTAMENTO_P
		CALL atualizar_serie_nf(nr_sequencia_w, nm_usuario_p);

		vl_valor_adiant_ajust_w := (vl_adiantamento_w / ((vl_taxa_w / 100) + 1));

		vl_valor_adiant_ajust_w := (TRUNC(vl_valor_adiant_ajust_w,4) + 0.0001);

		INSERT	INTO nota_fiscal_item(
			cd_estabelecimento,
			ie_origem_proced,
			cd_procedimento,
			cd_natureza_operacao,
			cd_serie_nf,
			dt_atualizacao,
			nm_usuario,
			nr_atendimento,
			nr_item_nf,
			nr_nota_fiscal,
			nr_sequencia,
			nr_sequencia_nf,
			qt_item_nf,
			qt_peso_bruto,
			qt_peso_liquido,
			vl_desconto,
			vl_desconto_rateio,
			vl_despesa_acessoria,
			vl_frete,
			vl_liquido,
			vl_seguro,
			vl_total_item_nf,
			vl_unitario_item_nf,
			cd_centro_custo,
			cd_conta_contabil,
			cd_local_estoque)
		VALUES (	cd_estabelecimento_p,
			CASE WHEN cd_origem_proced_p=0 THEN null  ELSE cd_origem_proced_p END ,
			cd_procedimento_p,
			cd_natureza_operacao_p,
			cd_serie_nf_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_atendimento_w,
			1,
			nr_nota_fiscal_w,
			nr_sequencia_w,
			nr_sequencia_nf_w,
			1,
			0,
			0,
			0,
			0,
			0,
			0,
			coalesce(vl_valor_adiant_ajust_w,0),
			0,
			coalesce(vl_valor_adiant_ajust_w,0),
			coalesce(vl_valor_adiant_ajust_w,0),
			cd_centro_custo_p,
			cd_conta_contabil_p,
			cd_local_estoque_p);

		IF (cd_tipo_relacao_p IS NOT NULL AND cd_tipo_relacao_p::text <> '') THEN

		INSERT  INTO fis_tipo_relacao(nr_sequencia,
			nr_seq_nota,
			dt_atualizacao,
			nm_usuario,
			cd_tipo_relacao,
			cd_estabelecimento)
		VALUES (	nextval('fis_tipo_relacao_seq'),
			nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			cd_tipo_relacao_p,
			cd_estabelecimento_p);


		END IF;

		IF (cd_uso_cfdi_p IS NOT NULL AND cd_uso_cfdi_p::text <> '') THEN

		INSERT	INTO fis_uso_cfdi(nr_sequencia,
				nr_seq_nota,
				dt_atualizacao,
				nm_usuario,
				cd_uso_cfdi,
				cd_estabelecimento)
		VALUES (	nextval('fis_uso_cfdi_seq'),
				nr_sequencia_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_uso_cfdi_p,
				cd_estabelecimento_p);

		END IF;

		SELECT  MAX(CD_INTEGRACAO_EXTERNA) -- -- HSJ 2018 -- ADICIONADO PARA BUSCAR O CODIGO INTERNO DO RECEBIMENTO
		INTO STRICT	cd_tipo_recebimento_ww
		FROM	TIPO_RECEBIMENTO
		WHERE	cd_tipo_recebimento = cd_tipo_recebimento_w;

		IF (cd_tipo_recebimento_ww IS NOT NULL AND cd_tipo_recebimento_ww::text <> '')THEN

			INSERT INTO fis_metodo_pagamento(NR_SEQUENCIA,
							 DT_ATUALIZACAO,
							 NM_USUARIO,
							 DT_ATUALIZACAO_NREC,
							 NM_USUARIO_NREC,
							 CD_TIPO_RECEBIMENTO,
							 NR_SEQ_NOTA)
						  VALUES (nextval('fis_metodo_pagamento_seq'),
							 clock_timestamp(),
							 nm_usuario_p,
							 clock_timestamp(),
							 nm_usuario_p,
							 cd_tipo_recebimento_ww,
							 nr_sequencia_w);
		END IF;

		CALL Gerar_Imposto_Nf_Item(nr_sequencia_w, 1, nm_usuario_p, 0, 0, 'N');


		/* INICIO AJUSTE VALOR TRIBUTO NO ADIANTAMENTO */

		SELECT 	SUM(vl_tributo)
		INTO STRICT 	vl_tributo_ww
		FROM  	nota_fiscal_item_trib
		WHERE   nr_sequencia = nr_sequencia_w;

		vl_ajustado_iva_w := (vl_valor_adiant_ajust_w + vl_tributo_ww);

		vl_diferencia_w := (vl_adiantamento_w - vl_ajustado_iva_w);

		IF (vl_diferencia_w >= -0.02) AND (vl_diferencia_w <=  0.02) THEN

			vl_tributo_ww := vl_tributo_ww + vl_diferencia_w;

			UPDATE nota_fiscal_item_trib SET vl_tributo = vl_tributo_ww WHERE nr_sequencia = nr_sequencia_w;
			CALL atualiza_total_nota_fiscal(nr_sequencia_w,nm_usuario_p);

		END IF;

		/* FIM  AJUSTE VALOR TRIBUTO NO ADIANTAMENTO */

		CALL atualizar_nota_fiscal(nr_sequencia_w, 'I', nm_usuario_p, ie_tipo_nota_ww);

		nr_nota_fiscal_p := nr_nota_fiscal_w;

		END;
	END LOOP;
	CLOSE c01;
END IF;

IF (coalesce(nr_seq_caixa_rec_w,0) = 0) THEN  --HSJ 2018 criado este if pois para adiantamentos feitos na digitacao de antecipos nao existe caixa
		SELECT  MAX(nr_atendimento),
			MAX(cd_pessoa_fisica),
			MAX(cd_cgc),
			MAX(vl_adiantamento),
			MAX(cd_moeda),
			MAX(ds_observacao),
			MAX(cd_tipo_recebimento)
		INTO STRICT    nr_atendimento_w,
			cd_pessoa_fisica_w,
			cd_cgc_w,
			vl_adiantamento_w,
			cd_moeda_w,
			ds_observacao_w,
			cd_tipo_recebimento_w
		FROM    adiantamento
		WHERE   nr_adiantamento = nr_adiantamento_p;


		SELECT	nextval('nota_fiscal_seq')
		INTO STRICT	nr_sequencia_w
		;

		-- INICIO PEGAR O NR_NOTA_FISCAL
		begin
		SELECT	nr_ultima_nf + 1
		INTO STRICT	nr_nota_fiscal_w
		FROM	serie_nota_fiscal
		WHERE	cd_serie_nf 			= cd_serie_nf_p
		AND	cd_estabelecimento 		= cd_estabelecimento_p;
		exception
		when no_data_found then		
		     CALL wheb_mensagem_pck.exibir_mensagem_abort(219156);		
		end;
		
		SELECT 	cd_cgc
		INTO STRICT 	cd_cgc_emitente_w
		FROM 	estabelecimento
		WHERE 	cd_estabelecimento = cd_estabelecimento_p;

		SELECT 	coalesce(MAX(nr_sequencia_nf),0)+1
		INTO STRICT	nr_sequencia_nf_w
		FROM 	nota_fiscal
		WHERE	nr_nota_fiscal 		= nr_nota_fiscal_w
		AND	cd_estabelecimento 	= cd_estabelecimento_p
		AND	cd_serie_nf 		= cd_serie_nf_p
		AND	cd_cgc_emitente		= cd_cgc_emitente_w;


		IF (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') THEN
		    ie_tipo_nota_w  := 'SF';
		    ie_tipo_nota_ww := '2';
		ELSE
		    ie_tipo_nota_w  := 'SE';
		    ie_tipo_nota_ww := '0';
		END IF;

		SELECT	coalesce(cd_natureza_operacao,cd_natureza_operacao_p)
		INTO STRICT	cd_natureza_operacao_w
		FROM	operacao_nota
		WHERE	cd_operacao_nf = cd_operacao_nf_p;

		begin
		
		INSERT INTO nota_fiscal(
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_nota_fiscal,
			nr_sequencia_nf,
			cd_operacao_nf,
			dt_emissao,
			dt_entrada_saida,
			ie_acao_nf,
			ie_emissao_nf,
			ie_tipo_frete,
			vl_mercadoria,
			vl_total_nota,
			qt_peso_bruto,
			qt_peso_liquido,
			dt_atualizacao,
			nm_usuario,
			cd_condicao_pagamento,
			dt_contabil,
			cd_cgc,
			cd_pessoa_fisica,
			vl_ipi,
			vl_descontos,
			vl_frete,
			vl_seguro,
			vl_despesa_acessoria,
			vl_despesa_doc,
			ds_observacao,
			nr_nota_referencia,
			cd_serie_referencia,
			cd_natureza_operacao,
			dt_atualizacao_estoque,
			vl_desconto_rateio,
			ie_situacao,
			nr_ordem_compra,
			nr_lote_contabil,
			nr_sequencia,
			cd_moeda,
			vl_conv_moeda,
			ie_entregue_bloqueto,
			ie_tipo_nota,
			cd_setor_digitacao,
			nr_danfe,
			nr_seq_adiantamento)
		VALUES (	cd_estabelecimento_p,
			cd_cgc_emitente_w,
			cd_serie_nf_p,
			nr_nota_fiscal_w,
			nr_sequencia_nf_w,
			cd_operacao_nf_p,
			clock_timestamp(),
			clock_timestamp(),
			'1',
			'0',
			'0',
			0,
			0,
			0,
			0,
			clock_timestamp(),
			nm_usuario_p,
			cd_condicao_pagamento_p,
			NULL,
			cd_cgc_p,
			cd_pessoa_fisica_p,
			0,
			0,
			NULL,
			0,
			0,
			0,
			ds_observacao_w,
			NULL,
			NULL,
			cd_natureza_operacao_p,
			NULL,
			0,
			'1',
			NULL,
			0,
			nr_sequencia_w,
			cd_moeda_w,
			NULL,
			'N',
			ie_tipo_nota_w,
			NULL,
			NULL,
			nr_adiantamento_p);

			exception
				when others then
					ds_erro_w	:= sqlerrm(SQLSTATE);
					cd_serie_nf_w   := cd_serie_nf_p;
					cd_estabelecimento_w := cd_estabelecimento_p;
					/*(-20011,'erro ao gravar corpo da nota fiscal' || chr(10) || 
					'estab: ' ||cd_estabelecimento_p||
					'cgc: '   || cd_cgc_emitente_w 	||
					'serie: ' || cd_serie_nf_p 	||
					'nota: '  || nr_nota_fiscal_w 	||
					'seq: '   || nr_sequencia_nf_w  || chr(10) ||
					ds_erro_w);*/
					CALL wheb_mensagem_pck.exibir_mensagem_abort(173250,
										'cd_estab_factura_w='||cd_estabelecimento_w||';'||
										'cd_cgc_emitente_w='||cd_cgc_emitente_w||';'||
										'cd_serie_nf_w='||cd_serie_nf_w||';'||
										'nr_nota_fiscal_w='||nr_nota_fiscal_w||';'||
										'nr_sequencia_nf_w='||nr_sequencia_nf_w||';'||
										'ds_erro_w='||ds_erro_w);
			end;			
			
		CALL atualizar_serie_nf(nr_sequencia_w, nm_usuario_p);

		vl_valor_adiant_ajust_w := (vl_adiantamento_w / ((vl_taxa_w / 100) + 1));

		vl_valor_adiant_ajust_w := (TRUNC(vl_valor_adiant_ajust_w,4) + 0.0001);

		INSERT	INTO nota_fiscal_item(
			cd_estabelecimento,
			ie_origem_proced,
			cd_procedimento,
			cd_natureza_operacao,
			cd_serie_nf,
			dt_atualizacao,
			nm_usuario,
			nr_atendimento,
			nr_item_nf,
			nr_nota_fiscal,
			nr_sequencia,
			nr_sequencia_nf,
			qt_item_nf,
			qt_peso_bruto,
			qt_peso_liquido,
			vl_desconto,
			vl_desconto_rateio,
			vl_despesa_acessoria,
			vl_frete,
			vl_liquido,
			vl_seguro,
			vl_total_item_nf,
			vl_unitario_item_nf,
			cd_centro_custo,
			cd_conta_contabil,
			cd_local_estoque)
		VALUES (	cd_estabelecimento_p,
			CASE WHEN cd_origem_proced_p=0 THEN null  ELSE cd_origem_proced_p END ,
			cd_procedimento_p,
			cd_natureza_operacao_p,
			cd_serie_nf_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_atendimento_w,
			1,
			nr_nota_fiscal_w,
			nr_sequencia_w,
			nr_sequencia_nf_w,
			1,
			0,
			0,
			0,
			0,
			0,
			0,
			coalesce(vl_valor_adiant_ajust_w,0),
			0,
			coalesce(vl_valor_adiant_ajust_w,0),
			coalesce(vl_valor_adiant_ajust_w,0),
			cd_centro_custo_p,
			cd_conta_contabil_p,
			cd_local_estoque_p);

		IF (cd_tipo_relacao_p IS NOT NULL AND cd_tipo_relacao_p::text <> '') THEN

		INSERT  INTO fis_tipo_relacao(nr_sequencia,
			nr_seq_nota,
			dt_atualizacao,
			nm_usuario,
			cd_tipo_relacao,
			cd_estabelecimento)
		VALUES (	nextval('fis_tipo_relacao_seq'),
			nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			cd_tipo_relacao_p,
			cd_estabelecimento_p);


		END IF;

		IF (cd_uso_cfdi_p IS NOT NULL AND cd_uso_cfdi_p::text <> '') THEN

		INSERT	INTO fis_uso_cfdi(nr_sequencia,
				nr_seq_nota,
				dt_atualizacao,
				nm_usuario,
				cd_uso_cfdi,
				cd_estabelecimento)
		VALUES (	nextval('fis_uso_cfdi_seq'),
				nr_sequencia_w,
				clock_timestamp(),
				nm_usuario_p,
				coalesce(cd_uso_cfdi_p,'P01'),
				cd_estabelecimento_p);

		END IF;

		SELECT  MAX(CD_INTEGRACAO_EXTERNA) -- HSJ 2018 --  ALTERADO PARA BUSCAR O NR_ADIANTAMENTO_W E NAO MAIS O NR_ADIANTAMENTO_P
		INTO STRICT	cd_tipo_recebimento_ww
		FROM	TIPO_RECEBIMENTO
		WHERE	cd_tipo_recebimento = cd_tipo_recebimento_w;

		IF (cd_tipo_recebimento_ww IS NOT NULL AND cd_tipo_recebimento_ww::text <> '')THEN

			INSERT INTO fis_metodo_pagamento(NR_SEQUENCIA,
							 DT_ATUALIZACAO,
							 NM_USUARIO,
							 DT_ATUALIZACAO_NREC,
							 NM_USUARIO_NREC,
							 CD_TIPO_RECEBIMENTO,
							 NR_SEQ_NOTA)
						  VALUES (nextval('fis_metodo_pagamento_seq'),
							 clock_timestamp(),
							 nm_usuario_p,
							 clock_timestamp(),
							 nm_usuario_p,
							 cd_tipo_recebimento_ww,
							 nr_sequencia_w);
		END IF;

		CALL Gerar_Imposto_Nf_Item(nr_sequencia_w, 1, nm_usuario_p, 0, 0, 'N');


		/* INICIO AJUSTE VALOR TRIBUTO NO ADIANTAMENTO */

		SELECT 	SUM(vl_tributo)
		INTO STRICT 	vl_tributo_ww
		FROM  	nota_fiscal_item_trib
		WHERE   nr_sequencia = nr_sequencia_w;

		vl_ajustado_iva_w := (vl_valor_adiant_ajust_w + vl_tributo_ww);

		vl_diferencia_w := (vl_adiantamento_w - vl_ajustado_iva_w);

		IF (vl_diferencia_w >= -0.02) AND (vl_diferencia_w <=  0.02) THEN

			vl_tributo_ww := vl_tributo_ww + vl_diferencia_w;

			UPDATE nota_fiscal_item_trib SET vl_tributo = vl_tributo_ww WHERE nr_sequencia = nr_sequencia_w;
			CALL atualiza_total_nota_fiscal(nr_sequencia_w,nm_usuario_p);

		END IF;

		/* FIM  AJUSTE VALOR TRIBUTO NO ADIANTAMENTO */

		CALL atualizar_nota_fiscal(nr_sequencia_w, 'I', nm_usuario_p, ie_tipo_nota_ww);

		nr_nota_fiscal_p := nr_nota_fiscal_w;
END IF;

COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nota_fiscal_adiant ( nr_adiantamento_p bigint, cd_serie_nf_p text, nm_usuario_p text, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, cd_condicao_pagamento_p bigint, cd_estabelecimento_p bigint, cd_centro_custo_p bigint, cd_conta_contabil_p text, cd_local_estoque_p bigint, nr_nota_fiscal_p INOUT bigint, cd_tipo_relacao_p text, cd_uso_cfdi_p text, cd_pessoa_fisica_p text, cd_cgc_p text, cd_procedimento_p bigint default null, cd_origem_proced_p bigint default null) FROM PUBLIC;

