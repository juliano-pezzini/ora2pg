-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_confirmar_escala (nr_seq_escala_p bigint, nr_seq_unidade_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_convenio_p bigint default null, nr_seq_filtro_turno_p bigint default null, nr_seq_filtro_escala_p bigint default null, result_out_p INOUT text DEFAULT NULL) AS $body$
DECLARE



    nr_seq_escala_w     bigint := NULL;
    nr_seq_turno_w      bigint;
    ie_dia_semana_w     bigint;
    dt_fim_escala_w     timestamp;
    nr_seq_escala_aux_w bigint;
    nr_seq_ponto_w      bigint;
    ie_acao_w           varchar(1);
    ie_incluir_w        varchar(1) := 'N';
    ie_gerar_dialysis_schd_w      varchar(1);
    cd_evolucao_w       bigint;

    --    TYPE rdia IS RECORD(nr_sequencia NUMBER);
    TYPE rdia IS TABLE OF bigint;
    vdia rdia;
    c01 CURSOR FOR
        SELECT nr_seq_turno,
               ie_dia_semana,
               nr_seq_ponto,
               ie_acao
          FROM hd_escala_dialise_temp
         WHERE cd_pessoa_fisica = cd_pessoa_fisica_p
         ORDER BY 1;

  i RECORD;

BEGIN

    SELECT MAX(dt_fim) INTO STRICT dt_fim_escala_w FROM hd_escala_dialise WHERE nr_sequencia = nr_seq_escala_p;

    IF (dt_fim_escala_w IS NOT NULL AND dt_fim_escala_w::text <> '') OR (coalesce(nr_seq_escala_p::text, '') = '') OR (nr_seq_escala_p = 0) THEN

        SELECT nextval('hd_escala_dialise_seq') INTO STRICT nr_seq_escala_w;

        INSERT INTO hd_escala_dialise(nr_sequencia,
             cd_estabelecimento,
             dt_atualizacao,
             nm_usuario,
             dt_atualizacao_nrec,
             nm_usuario_nrec,
             cd_pessoa_fisica,
             dt_inicio,
             dt_fim,
             nr_seq_unid_dialise,
             nr_seq_escala,
             nr_seq_convenio,
             nr_seq_turno)
        VALUES (nr_seq_escala_w,
             cd_estabelecimento_p,
             clock_timestamp(),
             nm_usuario_p,
             clock_timestamp(),
             nm_usuario_p,
             cd_pessoa_fisica_p,
             dt_inicio_p,
             dt_fim_p,
             nr_seq_unidade_p,
             nr_seq_filtro_escala_p,
             nr_seq_convenio_p,
             nr_seq_filtro_turno_p);

			ie_gerar_dialysis_schd_w := obter_param_usuario(281, 1656, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1), ie_gerar_dialysis_schd_w);

            if ( ie_gerar_dialysis_schd_w = 'S' ) then
               cd_evolucao_w := clinical_notes_pck.gerar_soap(null, nr_seq_escala_w, 'DIALYSIS_SCHD', NULL, 'P', 1, cd_evolucao_w, null, cd_pessoa_fisica_p, null);
                update hd_escala_dialise
                set cd_evolucao = cd_evolucao_w
                where nr_sequencia = nr_seq_escala_w;
			end if;
    END IF;

    nr_seq_escala_aux_w := coalesce(nr_seq_escala_w, nr_seq_escala_p);

    OPEN c01;
    LOOP

        FETCH c01
            INTO nr_seq_turno_w,
                 ie_dia_semana_w,
                 nr_seq_ponto_w,
                 ie_acao_w;

        EXIT WHEN NOT FOUND; /* apply on c01 */
        BEGIN

            IF ie_acao_w = 'I' THEN
                IF (nr_seq_ponto_w IS NOT NULL AND nr_seq_ponto_w::text <> '') THEN
                    ie_incluir_w := 'S';
                END IF;
                INSERT INTO hd_escala_dialise_dia(nr_sequencia,
                     dt_atualizacao,
                     nm_usuario,
                     dt_atualizacao_nrec,
                     nm_usuario_nrec,
                     nr_seq_turno,
                     ie_dia_semana,
                     dt_inicio_escala_dia,
                     nr_seq_escala,
                     nr_seq_ponto)
                VALUES (nextval('hd_escala_dialise_dia_seq'),
                     clock_timestamp(),
                     nm_usuario_p,
                     clock_timestamp(),
                     nm_usuario_p,
                     nr_seq_turno_w,
                     ie_dia_semana_w,
                     clock_timestamp(),
                     nr_seq_escala_aux_w,
                     nr_seq_ponto_w);
            ELSE
                UPDATE hd_escala_dialise_dia a
                   SET a.dt_fim_escala_dia = clock_timestamp(),
                       dt_atualizacao      = clock_timestamp(),
                       nm_usuario          = nm_usuario_p
                 WHERE a.nr_seq_escala = nr_seq_escala_aux_w
                   AND a.nr_seq_turno = nr_seq_turno_w
                   AND a.ie_dia_semana = ie_dia_semana_w
                   AND coalesce(a.dt_fim_escala_dia::text, '') = ''
                   AND (a.nr_seq_ponto = nr_seq_ponto_w OR coalesce(nr_seq_ponto_w::text, '') = '')
                RETURNING nr_sequencia BULK COLLECT INTO vdia;

                FORALL x IN vdia.first .. vdia.last
                    UPDATE hd_agenda_dialise ad
                       SET ad.ie_situacao    = 'C',
                           ad.dt_atualizacao = clock_timestamp(),
                           ad.nm_usuario     = nm_usuario_p
                     WHERE ad.nr_seq_dialise_dia = vdia(x)
                       AND dt_agenda >= trunc(clock_timestamp());

                FOR i IN (SELECT ad.nr_seq_agenda
                            FROM hd_agenda_dialise ad
                           WHERE ad.cd_pessoa_fisica = cd_pessoa_fisica_p
                             AND ad.ie_situacao = 'C'
                             AND ad.dt_agenda >= trunc(clock_timestamp())
                             AND (ad.nr_seq_agenda IS NOT NULL AND ad.nr_seq_agenda::text <> '')) LOOP
                    UPDATE agenda_consulta c
                       SET c.ie_status_agenda = 'C',
                           c.nm_usuario       = nm_usuario_p,
                           c.dt_atualizacao   = clock_timestamp()
                     WHERE c.nr_sequencia = i.nr_seq_agenda;
                END LOOP;

            END IF;
        END;
    END LOOP;
    CLOSE c01;
    CALL atualizar_dados_escala_dialise(cd_pessoa_fisica_p => cd_pessoa_fisica_p);
    IF ie_incluir_w = 'S' THEN
        result_out_p := hd_gerar_agenda(cd_pessoa_fisica_p, result_out_p);
    END IF;
    COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_confirmar_escala (nr_seq_escala_p bigint, nr_seq_unidade_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_convenio_p bigint default null, nr_seq_filtro_turno_p bigint default null, nr_seq_filtro_escala_p bigint default null, result_out_p INOUT text DEFAULT NULL) FROM PUBLIC;

