-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gravar_conta_glosa ( cd_motivo_glosa_p tiss_motivo_glosa.cd_motivo_tiss%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, ie_lib_manual_p text, ds_observacao_p text, nm_usuario_p usuario.nm_usuario%type, ie_situacao_p text, ie_evento_p text, nr_seq_prestador_p pls_prestador.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_ocorrencia_benef_p pls_ocorrencia_benef.nr_sequencia%type, nr_seq_proc_partic_p pls_proc_participante.nr_sequencia%type, qt_glosada_p bigint default null) AS $body$
DECLARE


-- Diego OS - 329472 - 22/06/2011 -  Ie_evento_p = SCE(Sem consistência de evento) ou seja vai ser gerada em todas as situações.
ds_documentacao_w		varchar(4000);
ds_documentacao_ww		varchar(4000);
ds_glosa_interna_w		varchar(4000);
ie_tipo_conta_w			varchar(10);
ie_tipo_glosa_w			varchar(10);
ie_consistir_w			varchar(3);
ie_fechar_conta_w		varchar(1);
ie_auditoria_w			varchar(1);
ie_tipo_item_w			varchar(1);
ie_finalizar_analise_w		varchar(1);
qt_registro_w			integer := 0;
qt_consistir_w			integer := 0;
qt_glosa_w			integer := 0;
vl_glosada_w			double precision	:= 0;
vl_solicitado_w			double precision;
vl_unitario_w			double precision;
vl_calculado_w			double precision;
qt_solicitado_w			double precision;
qt_autorizado_w			double precision;
nr_seq_motivo_glosa_w		bigint;
ie_excecao_aut_w		varchar(1)	:= 'N';
nr_seq_outorgante_w		bigint;
nr_seq_ocorrencia_w		bigint;
nr_seq_ocorrencia_glosa_w	bigint;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
ie_nivel_liberacao_w		bigint;
nr_seq_glosa_w			bigint;
ie_fechar_conta_ocor_w		pls_ocorrencia_benef.ie_fechar_conta%type;
ie_respeita_padrao_glosa_w	pls_ocorrencia.ie_respeita_padrao_glosa%type;
nr_seq_nivel_lib_w		bigint;
qt_glosada_w			bigint	:= 0;
nr_seq_item_w			bigint;
nr_seq_glosa_ww			bigint;
nr_seq_ocor_benef_w		bigint;
nr_seq_analise_w		bigint;
nr_seq_conta_pos_estab_w	bigint	:= null;
qt_ocor_glosa_w			integer;
nr_seq_ocor_glosa_padrao_w	bigint;
nr_seq_analise_pos_w		bigint;
ie_apresentacao_w		varchar(1);
ie_apresentacao_protocolo_w	varchar(1);
ie_pre_analise_w		pls_ocorrencia.ie_pre_analise%type;
qt_glosada_p_w			bigint;
ie_ocorrencia_w			pls_controle_estab.ie_ocorrencia%type := 'N';

C01 CURSOR(	nr_seq_motivo_glosa_pc	tiss_motivo_glosa.nr_sequencia%type,
		ie_ocorrencia_pc	pls_controle_estab.ie_ocorrencia%type,
		cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type) FOR
	SELECT	b.cd_inconsistencia cd_inconsistencia
	from	pls_acao_glosa_tiss a,
		ptu_inconsistencia b
	where	a.nr_seq_motivo_glosa = nr_seq_motivo_glosa_pc
	and	b.nr_sequencia = a.nr_seq_ptu_inconsistencia
	and	ie_ocorrencia_pc = 'N'
	
union all

	SELECT	b.cd_inconsistencia cd_inconsistencia
	from	pls_acao_glosa_tiss a,
		ptu_inconsistencia b
	where	a.nr_seq_motivo_glosa = nr_seq_motivo_glosa_pc
	and	b.nr_sequencia = a.nr_seq_ptu_inconsistencia
	and	ie_ocorrencia_pc = 'S'
	and	a.cd_estabelecimento = cd_estabelecimento_pc;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		coalesce(a.ie_pre_analise, 'N') ie_pre_analise
	from	pls_ocorrencia a
	where	a.nr_seq_motivo_glosa = nr_seq_motivo_glosa_w
	and	a.ie_glosa	= 'S'
	and	a.ie_situacao	= 'A'
	and	((ie_ocorrencia_w = 'N') or (ie_ocorrencia_w = 'S' and cd_estabelecimento = cd_estabelecimento_p))
	and	coalesce(nr_seq_ocorrencia_benef_p,0) = 0
	and	not exists (SELECT	1
				 from	pls_ocorrencia_benef x
				 where	x.nr_seq_glosa = nr_seq_glosa_ww)
	and	not exists	(select	1
				from	pls_ocorrencia_benef	w,
					pls_ocorrencia	y,
					pls_conta_glosa	x
				where	w.nr_seq_ocorrencia	= y.nr_sequencia
				and	((w.nr_sequencia	= x.nr_seq_ocorrencia_benef) or (w.nr_seq_glosa = x.nr_sequencia))
				and	x.nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
				and	x.nr_seq_conta		= nr_seq_conta_p
				and	((x.nr_seq_conta_proc	= nr_seq_conta_proc_p) or (x.nr_seq_conta_mat	= nr_seq_conta_mat_p) or (coalesce(x.nr_seq_conta_proc::text, '') = '' and
					coalesce(x.nr_seq_conta_mat::text, '') = '')))
	and	((coalesce(nr_seq_analise_w::text, '') = '') or (coalesce(ie_lib_manual_p,'N') = 'N'))
	order by 1;

BEGIN
qt_glosada_p_w	:= qt_glosada_p;

if (coalesce(nr_seq_conta_p,0) <> 0) then
	select	coalesce(a.ie_tipo_conta,'O'),
		a.nr_seq_analise,
		b.ie_apresentacao
	into STRICT	ie_tipo_conta_w,
		nr_seq_analise_w,
		ie_apresentacao_protocolo_w
	from	pls_conta		a,
		pls_protocolo_conta	b
	where	a.nr_seq_protocolo 	= b.nr_sequencia
	and 	a.nr_sequencia		= nr_seq_conta_p;

elsif (coalesce(nr_seq_conta_proc_p,0) <> 0) then
	select	coalesce(b.ie_tipo_conta,'O'),
		b.nr_seq_analise,
		c.ie_apresentacao
	into STRICT	ie_tipo_conta_w,
		nr_seq_analise_w,
		ie_apresentacao_protocolo_w
	from	pls_conta_proc		a,
		pls_conta		b,
		pls_protocolo_conta	c
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_protocolo	= c.nr_sequencia
	and	a.nr_sequencia		= nr_seq_conta_proc_p;


elsif (coalesce(nr_seq_conta_mat_p,0) <> 0) then
	select	coalesce(b.ie_tipo_conta,'O'),
		b.nr_seq_analise,
		c.ie_apresentacao
	into STRICT	ie_tipo_conta_w,
		nr_seq_analise_w,
		ie_apresentacao_protocolo_w
	from	pls_conta_mat		a,
		pls_conta		b,
		pls_protocolo_conta 	c
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_protocolo 	= c.nr_sequencia
	and	a.nr_sequencia		= nr_seq_conta_mat_p;

end if;

/* Alexandre e Felipe - OS 298807 -  Foi tratado para quando for a glosa 1901 , seja verificado somente a glosa com o motivo  'Acomodação inválida'
Essa alteração foi realizada pois, conforme a norma tiss, existem duas glosas com o mesmo código TISS (1901)  e apenas uma está em uso*/
if (cd_motivo_glosa_p <> '1901') then
	begin
	select	nr_sequencia
	into STRICT	nr_seq_motivo_glosa_w
	from	tiss_motivo_glosa
	where	cd_motivo_tiss	= cd_motivo_glosa_p
	and	coalesce(cd_convenio::text, '') = '';
	exception
	when others then
		nr_seq_motivo_glosa_w	:= 0;
	end;
else
	begin
	select	nr_sequencia
	into STRICT	nr_seq_motivo_glosa_w
	from	tiss_motivo_glosa
	where	cd_motivo_tiss	= '1901'
	and	coalesce(cd_convenio::text, '') = ''
	and	upper(ds_motivo_tiss) = upper('Acomodação inválida');
	exception
	when others then
		nr_seq_motivo_glosa_w	:= 0;
	end;
end if;

select 	max(nr_sequencia)
into STRICT	nr_seq_outorgante_w
from	pls_outorgante
where	cd_estabelecimento	= cd_estabelecimento_p;

ie_ocorrencia_w := pls_obter_se_controle_estab('GO');

if (nr_seq_motivo_glosa_w <> 0) then
	if (ie_evento_p = 'SCE') then

		if (ie_ocorrencia_w = 'N') then
			/* Verificar se a glosa está vinculada a uma ocorrência do tipo "Glosa interna" */

			select	count(1)
			into STRICT	qt_registro_w
			from	pls_ocorrencia
			where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
			and	ie_glosa		= 'S'
			and	ie_situacao		= 'A'  LIMIT 1;
		else
			/* Verificar se a glosa está vinculada a uma ocorrência do tipo "Glosa interna" */

			select	count(1)
			into STRICT	qt_registro_w
			from	pls_ocorrencia
			where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
			and	ie_glosa		= 'S'
			and	ie_situacao		= 'A'
			and	cd_estabelecimento	= cd_estabelecimento_p  LIMIT 1;
		end if;

		if (qt_registro_w	> 0) then

			if (ie_ocorrencia_w = 'N') then
				select	count(1)
				into STRICT	qt_consistir_w
				from	pls_glosa_evento 	b,
					tiss_motivo_glosa 	a
				where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
				and	((b.ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
				and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
				and	b.ie_plano		= 'S'  LIMIT 1;
			else
				select	count(1)
				into STRICT	qt_consistir_w
				from	pls_glosa_evento 	b,
					tiss_motivo_glosa 	a
				where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
				and	((b.ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
				and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
				and	b.ie_plano		= 'S'
				and	b.cd_estabelecimento	= cd_estabelecimento_p  LIMIT 1;
			end if;

			if (qt_consistir_w > 0) then
				ie_consistir_w	:= 'S';
			else
				ie_consistir_w	:= 'N';
			end if;
		end if;

		if (ie_ocorrencia_w = 'N') then
			select  coalesce(max(ie_fechar_conta), 'S')
			into STRICT	ie_fechar_conta_w
			from	pls_glosa_evento 	b,
				tiss_motivo_glosa 	a
			where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
			and	((ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
			and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
			and	b.ie_plano		= 'S';
		else
			select  coalesce(max(ie_fechar_conta), 'S')
			into STRICT	ie_fechar_conta_w
			from	pls_glosa_evento 	b,
				tiss_motivo_glosa 	a
			where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
			and	((ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
			and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
			and	b.ie_plano		= 'S'
			and	b.cd_estabelecimento	= cd_estabelecimento_p;
		end if;

		if (nr_seq_ocorrencia_benef_p IS NOT NULL AND nr_seq_ocorrencia_benef_p::text <> '') then

			select	ocor.ie_fechar_conta,
				ocor.ie_respeita_padrao_glosa
			into STRICT	ie_fechar_conta_ocor_w,
				ie_respeita_padrao_glosa_w
			from	pls_ocorrencia_benef	conta,
				pls_ocorrencia		ocor
			where	conta.nr_sequencia	= nr_seq_ocorrencia_benef_p
			and	ocor.nr_sequencia	= conta.nr_seq_ocorrencia;

			if (ie_respeita_padrao_glosa_w	= 'N') then
				ie_fechar_conta_w	:= ie_fechar_conta_ocor_w;
			end if;
		end if;
	else
		begin
			if (ie_ocorrencia_w = 'N') then
				select  c.ie_consistir,
					c.ie_fechar_conta
				into STRICT	ie_consistir_w,
					ie_fechar_conta_w
				from	pls_glosa_evento 	b,
					pls_outorgante_glosa	d,
					pls_prestador_glosa 	c,
					tiss_motivo_glosa 	a
				where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
				and	d.nr_sequencia		= c.nr_seq_outorg_glosa
				and	d.nr_seq_evento_glosa	= b.nr_sequencia
				and	c.nr_seq_prestador	= nr_seq_prestador_p
				and	((b.ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
				and	a.nr_sequencia 		= nr_seq_motivo_glosa_w
				and	b.ie_plano		= 'S';
			else
				select  c.ie_consistir,
					c.ie_fechar_conta
				into STRICT	ie_consistir_w,
					ie_fechar_conta_w
				from	pls_glosa_evento 	b,
					pls_outorgante_glosa	d,
					pls_prestador_glosa 	c,
					tiss_motivo_glosa 	a
				where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
				and	d.nr_sequencia		= c.nr_seq_outorg_glosa
				and	d.nr_seq_evento_glosa	= b.nr_sequencia
				and	c.nr_seq_prestador	= nr_seq_prestador_p
				and	((b.ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
				and	a.nr_sequencia 		= nr_seq_motivo_glosa_w
				and	b.ie_plano		= 'S'
				and	b.cd_estabelecimento	= cd_estabelecimento_p;
			end if;
		exception
		when others then
			begin
				if (ie_ocorrencia_w = 'N') then
					select  d.ie_consistir,
						d.ie_fechar_conta
					into STRICT	ie_consistir_w,
						ie_fechar_conta_w
					from	pls_glosa_evento 	b,
						pls_outorgante_glosa	d,
						tiss_motivo_glosa 	a
					where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
					and	d.nr_seq_evento_glosa 	= b.nr_sequencia
					and	((b.ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
					and	d.nr_seq_outorgante	= nr_seq_outorgante_w
					and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
					and	b.ie_plano		= 'S';
				else
					select  d.ie_consistir,
						d.ie_fechar_conta
					into STRICT	ie_consistir_w,
						ie_fechar_conta_w
					from	pls_glosa_evento 	b,
						pls_outorgante_glosa	d,
						tiss_motivo_glosa 	a
					where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
					and	d.nr_seq_evento_glosa 	= b.nr_sequencia
					and	((b.ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
					and	d.nr_seq_outorgante	= nr_seq_outorgante_w
					and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
					and	b.ie_plano		= 'S'
					and	b.cd_estabelecimento	= cd_estabelecimento_p;
				end if;
			exception
			when others then
				begin
					if (ie_ocorrencia_w = 'N') then
						select  'S',
							ie_fechar_conta
						into STRICT	ie_consistir_w,
							ie_fechar_conta_w
						from	pls_glosa_evento 	b,
							tiss_motivo_glosa 	a
						where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
						and	((ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
						and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
						and	b.ie_plano		= 'S';
					else
						select  'S',
							ie_fechar_conta
						into STRICT	ie_consistir_w,
							ie_fechar_conta_w
						from	pls_glosa_evento 	b,
							tiss_motivo_glosa 	a
						where	a.nr_sequencia 		= b.nr_seq_motivo_glosa
						and	((ie_evento		= ie_evento_p) or (ie_evento_p = 'SCE'))
						and	a.nr_sequencia	 	= nr_seq_motivo_glosa_w
						and	b.ie_plano		= 'S'
						and	b.cd_estabelecimento	= cd_estabelecimento_p;
					end if;
				exception
				when others then
					ie_consistir_w 		:= 'N'; /* Felipe - OS 283878 - Mudei para N e coloquei o select acima, pois quando NÃO tem evento estava gerando glosa */
				end;
			end;
		end;

		if (coalesce(ie_consistir_w::text, '') = '') then
			ie_consistir_w	:= 'S';
		end if;
	end if;

	if (coalesce(ie_fechar_conta_w::text, '') = '') then
		ie_fechar_conta_w	:= 'S';
	end if;

	if (nr_seq_proc_partic_p IS NOT NULL AND nr_seq_proc_partic_p::text <> '') and (qt_glosa_w = 0) then

		select	count(1)
		into STRICT	qt_glosa_w
		from	pls_conta_glosa
		where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
		and	nr_seq_proc_partic	= nr_seq_proc_partic_p
		and	((coalesce(nr_seq_ocorrencia_benef::text, '') = '') or ((nr_seq_ocorrencia_benef_p IS NOT NULL AND nr_seq_ocorrencia_benef_p::text <> '') and nr_seq_ocorrencia_benef = nr_seq_ocorrencia_benef_p))  LIMIT 1;

	elsif (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') and (qt_glosa_w = 0) then

		select	count(1)
		into STRICT	qt_glosa_w
		from	pls_conta_glosa
		where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
		and	nr_seq_conta_proc	= nr_seq_conta_proc_p
		and	((coalesce(nr_seq_ocorrencia_benef::text, '') = '') or ((nr_seq_ocorrencia_benef_p IS NOT NULL AND nr_seq_ocorrencia_benef_p::text <> '') and nr_seq_ocorrencia_benef = nr_seq_ocorrencia_benef_p))  LIMIT 1;

	elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') and (qt_glosa_w = 0) then

		select	count(1)
		into STRICT	qt_glosa_w
		from	pls_conta_glosa
		where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
		and	nr_seq_conta_mat	= nr_seq_conta_mat_p
		and	((coalesce(nr_seq_ocorrencia_benef::text, '') = '') or ((nr_seq_ocorrencia_benef_p IS NOT NULL AND nr_seq_ocorrencia_benef_p::text <> '') and nr_seq_ocorrencia_benef = nr_seq_ocorrencia_benef_p))  LIMIT 1;

	elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then

		select	count(1)
		into STRICT	qt_glosa_w
		from	pls_conta_glosa
		where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
		and	nr_seq_conta		= nr_seq_conta_p
		and	((coalesce(nr_seq_ocorrencia_benef::text, '') = '') or ((nr_seq_ocorrencia_benef_p IS NOT NULL AND nr_seq_ocorrencia_benef_p::text <> '') and nr_seq_ocorrencia_benef = nr_seq_ocorrencia_benef_p))  LIMIT 1;
	end if;

	if (coalesce(nr_seq_ocorrencia_benef_p,0) > 0) then

		select	max(nr_seq_ocorrencia)
		into STRICT	nr_seq_ocorrencia_w
		from	pls_ocorrencia_benef
		where 	nr_sequencia	= nr_seq_ocorrencia_benef_p;

		ie_consistir_w	:= 'S';
	end if;

	if (qt_glosa_w = 0) or (ie_evento_p = 'SCE') then

		if	((ie_consistir_w = 'S') or (ie_evento_p = 'SCE')) then

			select	nextval('pls_conta_glosa_seq')
			into STRICT	nr_seq_glosa_w
			;

			if (coalesce(nr_seq_conta_proc_p,0) > 0) then

				-- Se tiver glosa parcial, atualmente o valor solicitado deve ser null. Futuramente isso pode ser alterado.
				if (qt_glosada_p_w IS NOT NULL AND qt_glosada_p_w::text <> '') then

					qt_solicitado_w	:= qt_glosada_p_w;
					vl_solicitado_w := null;
				else
					select	qt_procedimento_imp,
						vl_procedimento_imp,
						qt_autorizado,
						(vl_procedimento/CASE WHEN coalesce(qt_procedimento_imp,0)=0 THEN 1  ELSE qt_procedimento_imp END ),
						vl_procedimento
					into STRICT	qt_solicitado_w,
						vl_solicitado_w,
						qt_autorizado_w,
						vl_unitario_w,
						vl_calculado_w
					from	pls_conta_proc
					where	nr_sequencia	= nr_seq_conta_proc_p;
				end if;

				nr_seq_item_w 	:= nr_seq_conta_proc_p;
				ie_tipo_item_w	:= 'P';

			elsif (coalesce(nr_seq_conta_mat_p,0) > 0) then

				-- Se tiver glosa parcial, atualmente o valor solicitado deve ser null. Futuramente isso pode ser alterado.
				if (qt_glosada_p_w IS NOT NULL AND qt_glosada_p_w::text <> '') then

					qt_solicitado_w	:= qt_glosada_p_w;
					vl_solicitado_w := null;
				else
					select	max(qt_material_imp),
						max(vl_material_imp),
						max(qt_autorizado),
						max(vl_unitario),
						max(vl_material)
					into STRICT	qt_solicitado_w,
						vl_solicitado_w,
						qt_autorizado_w,
						vl_unitario_w,
						vl_calculado_w
					from	pls_conta_mat
					where	nr_sequencia	= nr_seq_conta_mat_p;
				end if;

				nr_seq_item_w 	:= nr_seq_conta_mat_p;
				ie_tipo_item_w	:= 'M';
			end if;

			if (pls_obter_ie_valor_glosa(nr_seq_item_w, ie_tipo_item_w) = 1) then
				qt_glosada_w	:= qt_solicitado_w;
				vl_glosada_w	:= vl_solicitado_w;
			else
				qt_glosada_w	:= qt_solicitado_w;
				vl_glosada_w	:= vl_calculado_w;
			end if;

			if (ie_ocorrencia_w = 'N') then
				select 	max(a.ds_documentacao)
				into STRICT	ds_documentacao_w
				from 	pls_glosa_documentacao	a,
					tiss_motivo_glosa	b
				where 	a.nr_seq_motivo_glosa	= b.nr_sequencia
				and	b.nr_sequencia		= nr_seq_motivo_glosa_w;
			else
				select 	max(a.ds_documentacao)
				into STRICT	ds_documentacao_w
				from 	pls_glosa_documentacao	a,
					tiss_motivo_glosa	b
				where 	a.nr_seq_motivo_glosa	= b.nr_sequencia
				and	b.nr_sequencia		= nr_seq_motivo_glosa_w
				and	a.cd_estabelecimento	= cd_estabelecimento_p;
			end if;

			if (nr_seq_motivo_glosa_w = 0) then
				nr_seq_motivo_glosa_w := null;
			end if;

			if (ie_ocorrencia_w = 'N') then
				select	coalesce(max(ie_apresentacao), 'T')
				into STRICT	ie_apresentacao_w
				from	pls_regra_glosa_tiss
				where	nr_seq_motivo_glosa = nr_seq_motivo_glosa_w;
			else
				select	coalesce(max(ie_apresentacao), 'T')
				into STRICT	ie_apresentacao_w
				from	pls_regra_glosa_tiss
				where	nr_seq_motivo_glosa = nr_seq_motivo_glosa_w
				and	cd_estabelecimento = cd_estabelecimento_p;
			end if;

			if (coalesce(nr_seq_conta_proc_p,0) <> 0) then

				select	max(nr_seq_conta)
				into STRICT	nr_seq_conta_w
				from	pls_conta_proc
				where	nr_sequencia	= nr_seq_conta_proc_p;

				select	max(a.nr_sequencia)
				into STRICT	nr_seq_conta_pos_estab_w
				from	pls_conta_pos_estabelecido a
				where	a.nr_seq_conta_proc	= nr_seq_conta_proc_p
				and	((a.ie_situacao		= 'A') or (coalesce(a.ie_situacao::text, '') = ''));

			elsif (coalesce(nr_seq_conta_mat_p,0) <> 0) then

				select	max(nr_seq_conta)
				into STRICT	nr_seq_conta_w
				from	pls_conta_mat
				where	nr_sequencia	= nr_seq_conta_mat_p;

				select	max(a.nr_sequencia)
				into STRICT	nr_seq_conta_pos_estab_w
				from	pls_conta_pos_estabelecido a
				where	a.nr_seq_conta_mat	= nr_seq_conta_mat_p
				and	((a.ie_situacao		= 'A') or (coalesce(a.ie_situacao::text, '') = ''));
			else
				nr_seq_conta_w	:= nr_seq_conta_p;
			end if;

			/*só verifica a exceção criada se for importação do arquivo conta*/

			if (ie_evento_p = 'IA') then

				ie_excecao_aut_w := pls_ocor_excecao_aut(nr_seq_conta_w,nr_seq_ocorrencia_glosa_w,nr_seq_motivo_glosa_w,nm_usuario_p);
			end if;

			if (ie_excecao_aut_w = 'N') then

				if (coalesce(ie_apresentacao_w,'T') = coalesce(ie_apresentacao_protocolo_w,'T')) or (coalesce(ie_apresentacao_w,'T') = 'T')then

					insert into pls_conta_glosa(
						nr_sequencia, nm_usuario, dt_atualizacao,
						nr_seq_conta, nr_seq_conta_proc, nr_seq_conta_mat,
						nr_seq_motivo_glosa, ds_observacao, ie_lib_manual,
						ie_situacao, ie_fechar_conta, nr_seq_ocorrencia,
						nr_seq_ocorrencia_benef, qt_glosa, vl_glosa,
						ds_documentacao, nr_seq_proc_partic, nm_usuario_nrec,
						dt_atualizacao_nrec
					) values (
						nr_seq_glosa_w, nm_usuario_p, clock_timestamp(),
						nr_seq_conta_p, nr_seq_conta_proc_p, nr_seq_conta_mat_p,
						nr_seq_motivo_glosa_w, ds_observacao_p, ie_lib_manual_p,
						coalesce(ie_situacao_p,'A'), ie_fechar_conta_w, nr_seq_ocorrencia_w,
						nr_seq_ocorrencia_benef_p, qt_glosada_w, vl_glosada_w,
						ds_documentacao_w, nr_seq_proc_partic_p, nm_usuario_p,
						clock_timestamp()
					);
				end if;
			end if;

			select	max(nr_seq_segurado)
			into STRICT	nr_seq_segurado_w
			from	pls_conta
			where 	nr_sequencia = nr_seq_conta_w;

			-- Inserir as ocorrência de glosa interna
			open C02;
			loop
			fetch C02 into
				nr_seq_ocorrencia_glosa_w,
				ie_pre_analise_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */

				select	max(ie_auditoria_conta),
					max(nr_seq_nivel_lib),
					coalesce(max(ie_fechar_conta),'S'),
					max(ie_tipo_glosa),
					coalesce(max(ie_finalizar_analise), 'S'),
					max(ds_documentacao)
				into STRICT	ie_auditoria_w,
					nr_seq_nivel_lib_w,
					ie_fechar_conta_w,
					ie_tipo_glosa_w,
					ie_finalizar_analise_w,
					ds_documentacao_ww
				from	pls_ocorrencia
				where	nr_sequencia	= nr_seq_ocorrencia_glosa_w;

				select	max(nr_nivel_liberacao)
				into STRICT	ie_nivel_liberacao_w
				from	pls_nivel_liberacao
				where	nr_sequencia	= nr_seq_nivel_lib_w;

				-- só verifica a exceção criada se for importação do arquivo conta
				if (ie_evento_p = 'IA') then

					ie_excecao_aut_w := pls_ocor_excecao_aut(	nr_seq_conta_w, nr_seq_ocorrencia_glosa_w, nr_seq_motivo_glosa_w,
											nm_usuario_p);
				end if;

				-- se não houver exeção para a ocorrência gerada
				if (ie_excecao_aut_w = 'N') then

					if (coalesce(ie_apresentacao_w,'T') = coalesce(ie_apresentacao_protocolo_w,'T'))	or (coalesce(ie_apresentacao_w,'T') = 'T')then

						ds_glosa_interna_w := substr('Ocorrência gerada através da glosa interna: ' || cd_motivo_glosa_p ||'.'
									||chr(13)||chr(10)||substr(coalesce(ds_observacao_p,''),1,3900),1,3800);

						insert into pls_ocorrencia_benef(
							nr_sequencia, nr_seq_segurado, nr_seq_ocorrencia,
							dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
							nm_usuario_nrec, nr_seq_requisicao, nr_seq_conta,
							nr_seq_proc, nr_seq_mat, nr_seq_regra,
							nr_seq_guia_plano, ie_auditoria, nr_nivel_liberacao,
							ds_observacao, ie_fechar_conta, nr_seq_glosa,
							qt_glosa, vl_glosa, ie_tipo_glosa,
							ds_documentacao, nr_seq_conta_proc, nr_seq_conta_mat,
							nr_seq_proc_partic, ie_finalizar_analise, ie_situacao,
							ie_pre_analise
						) values (
							nextval('pls_ocorrencia_benef_seq'), nr_seq_segurado_w, nr_seq_ocorrencia_glosa_w,
							clock_timestamp(), nm_usuario_p, clock_timestamp(),
							nm_usuario_p, null, nr_seq_conta_w,
							nr_seq_conta_proc_p, nr_seq_conta_mat_p, null,
							null, ie_auditoria_w, ie_nivel_liberacao_w,
							ds_glosa_interna_w, ie_fechar_conta_w, nr_seq_glosa_w,
							qt_glosada_w, vl_glosada_w, ie_tipo_glosa_w,
							ds_documentacao_ww, nr_seq_conta_proc_p, nr_seq_conta_mat_p,
							nr_seq_proc_partic_p, ie_finalizar_analise_w, 'A',
							ie_pre_analise_w
						) returning nr_sequencia into nr_seq_ocor_benef_w;

						-- Grava o histórico do lançamento da ocorrência
						CALL pls_gerar_ocor_cta_hist(nr_seq_conta_w, nr_seq_ocorrencia_glosa_w, nm_usuario_p, 'L');
					end if;
				end if;
			end loop;
			close C02;

			-- Gerar ocorrências de pós  - OS 510557
			if (nr_seq_conta_pos_estab_w IS NOT NULL AND nr_seq_conta_pos_estab_w::text <> '') then

				-- Verificar se não há ocorrência vinculada a glosa
				select	count(1)
				into STRICT	qt_ocor_glosa_w
				from	pls_ocorrencia_benef a
				where	a.nr_seq_glosa	= nr_seq_glosa_w  LIMIT 1;

				if (qt_ocor_glosa_w = 0) and (coalesce(nr_seq_ocorrencia_benef_p,0) = 0) then

					select	max(a.nr_seq_ocor_glosa_padrao)
					into STRICT	nr_seq_ocor_glosa_padrao_w
					from	pls_parametro_faturamento a
					where	cd_estabelecimento	= cd_estabelecimento_p;

					if (nr_seq_ocor_glosa_padrao_w IS NOT NULL AND nr_seq_ocor_glosa_padrao_w::text <> '') then

						if (coalesce(ie_apresentacao_w,'T') = coalesce(ie_apresentacao_protocolo_w,'T')) or (coalesce(ie_apresentacao_w,'T') = 'T')then

							ds_glosa_interna_w := substr('Ocorrência gerada através da glosa interna: ' || cd_motivo_glosa_p ||'.'||
										chr(13)||chr(10)||substr(coalesce(ds_observacao_p,''),1,3900),1,4000);

							insert into pls_ocorrencia_benef(
								nr_sequencia, nr_seq_segurado, nr_seq_ocorrencia,
								nr_seq_conta_pos_estab, dt_atualizacao, nm_usuario,
								dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_requisicao,
								nr_seq_regra, nr_seq_guia_plano, ie_auditoria,
								nr_nivel_liberacao, ds_observacao, ie_fechar_conta,
								nr_seq_glosa_fat, qt_glosa, vl_glosa,
								ie_tipo_glosa, ds_documentacao, nr_seq_proc_partic,
								ie_finalizar_analise, ie_situacao
							) values (
								nextval('pls_ocorrencia_benef_seq'), nr_seq_segurado_w, nr_seq_ocor_glosa_padrao_w,
								nr_seq_conta_pos_estab_w, clock_timestamp(), nm_usuario_p,
								clock_timestamp(), nm_usuario_p, null,
								null, null, ie_auditoria_w,
								ie_nivel_liberacao_w, ds_glosa_interna_w, ie_fechar_conta_w,
								nr_seq_glosa_w, qt_glosada_w, vl_glosada_w,
								ie_tipo_glosa_w, ds_documentacao_ww, nr_seq_proc_partic_p,
								ie_finalizar_analise_w, 'A'
							) returning nr_sequencia into nr_seq_ocor_benef_w;

							-- Grava o histórico do lançamento da ocorrência
							CALL pls_gerar_ocor_cta_hist(nr_seq_conta_w, nr_seq_ocor_glosa_padrao_w, nm_usuario_p, 'L');

							select	max(a.nr_seq_analise)
							into STRICT	nr_seq_analise_pos_w
							from	pls_conta_pos_estabelecido a
							where	a.nr_sequencia	= nr_seq_conta_pos_estab_w;
						end if;
					end if;
				end if;
			end if;

			if (ie_tipo_conta_w = 'I') then

				for r_c01_w in C01(nr_seq_motivo_glosa_w, ie_ocorrencia_w, cd_estabelecimento_p) loop

					CALL ptu_inserir_inconsistencia(	null, null, r_c01_w.cd_inconsistencia,
									'', cd_estabelecimento_p, nr_seq_conta_p,
									'CM', 'A500', nr_seq_conta_proc_p,
									nr_seq_conta_mat_p, null, nm_usuario_p);

				end loop;
			end if;
		end if;
	else
		if	((ie_consistir_w = 'S') or (ie_evento_p = 'SCE')) then

			if (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') and (coalesce(nr_seq_glosa_ww::text, '') = '') then

				select	max(nr_sequencia)
				into STRICT	nr_seq_glosa_ww
				from	pls_conta_glosa
				where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
				and	nr_seq_conta_mat	= nr_seq_conta_mat_p
				and	((ie_lib_manual		= 'N') or (ie_situacao = 'A'))
				and	((coalesce(nr_seq_ocorrencia_benef::text, '') = '') or ((nr_seq_ocorrencia_benef_p IS NOT NULL AND nr_seq_ocorrencia_benef_p::text <> '') and nr_seq_ocorrencia_benef = nr_seq_ocorrencia_benef_p));
			end if;

			if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') and (coalesce(nr_seq_glosa_ww::text, '') = '') then

				select	max(nr_sequencia)
				into STRICT	nr_seq_glosa_ww
				from	pls_conta_glosa
				where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
				and	nr_seq_conta_proc	= nr_seq_conta_proc_p
				and	((ie_lib_manual		= 'N') or (ie_situacao = 'A'))
				and	((coalesce(nr_seq_ocorrencia_benef::text, '') = '') or ((nr_seq_ocorrencia_benef_p IS NOT NULL AND nr_seq_ocorrencia_benef_p::text <> '') and nr_seq_ocorrencia_benef = nr_seq_ocorrencia_benef_p));
			end if;

			if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') and (coalesce(nr_seq_glosa_ww::text, '') = '') then

				select	max(nr_sequencia)
				into STRICT	nr_seq_glosa_ww
				from	pls_conta_glosa
				where	nr_seq_motivo_glosa	= nr_seq_motivo_glosa_w
				and	nr_seq_conta		= nr_seq_conta_p
				and	((ie_lib_manual		= 'N') or (ie_situacao = 'A'))
				and	((coalesce(nr_seq_ocorrencia_benef::text, '') = '') or ((nr_seq_ocorrencia_benef_p IS NOT NULL AND nr_seq_ocorrencia_benef_p::text <> '') and nr_seq_ocorrencia_benef = nr_seq_ocorrencia_benef_p));
			end if;

			if (coalesce(nr_seq_conta_proc_p,0) <> 0) then

				select	nr_seq_conta
				into STRICT	nr_seq_conta_w
				from	pls_conta_proc
				where	nr_sequencia	= nr_seq_conta_proc_p;

			elsif (coalesce(nr_seq_conta_mat_p,0) <> 0) then

				select	nr_seq_conta
				into STRICT	nr_seq_conta_w
				from	pls_conta_mat
				where	nr_sequencia	= nr_seq_conta_mat_p;
			else
				nr_seq_conta_w	:= nr_seq_conta_p;
			end if;

			select	max(nr_seq_segurado)
			into STRICT	nr_seq_segurado_w
			from	pls_conta
			where 	nr_sequencia = nr_seq_conta_w;

			-- Inserir as ocorrência de glosa interna
			open C02;
			loop
			fetch C02 into
				nr_seq_ocorrencia_glosa_w,
				ie_pre_analise_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */

				select	max(ie_auditoria_conta),
					max(nr_seq_nivel_lib),
					coalesce(max(ie_fechar_conta),'S'),
					max(ie_tipo_glosa),
					coalesce(max(ie_finalizar_analise),'S')
				into STRICT	ie_auditoria_w,
					nr_seq_nivel_lib_w,
					ie_fechar_conta_w,
					ie_tipo_glosa_w,
					ie_finalizar_analise_w
				from	pls_ocorrencia
				where	nr_sequencia = nr_seq_ocorrencia_glosa_w;

				select	max(nr_nivel_liberacao)
				into STRICT	ie_nivel_liberacao_w
				from	pls_nivel_liberacao
				where	nr_sequencia = nr_seq_nivel_lib_w;

				select	max(a.ds_documentacao)
				into STRICT	ds_documentacao_ww
				from	pls_ocorrencia	a
				where 	nr_seq_ocorrencia_glosa_w = a.nr_sequencia;

				if (coalesce(ie_apresentacao_w,'T') = coalesce(ie_apresentacao_protocolo_w,'T'))	or (coalesce(ie_apresentacao_w,'T') = 'T')then

					ds_glosa_interna_w := substr('Ocorrência gerada através da glosa interna: ' || cd_motivo_glosa_p ||'.'||
								chr(13)||chr(10)||substr(coalesce(ds_observacao_p,''),1,3900),1,4000);

					insert into pls_ocorrencia_benef(
						nr_sequencia, nr_seq_segurado, nr_seq_ocorrencia,
						dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
						nm_usuario_nrec, nr_seq_requisicao, nr_seq_conta,
						nr_seq_proc, nr_seq_mat, nr_seq_regra,
						nr_seq_guia_plano, ie_auditoria, nr_nivel_liberacao,
						ds_observacao, ie_fechar_conta, nr_seq_glosa,
						qt_glosa, vl_glosa, ie_tipo_glosa,
						ds_documentacao, nr_seq_conta_proc, nr_seq_conta_mat,
						nr_seq_proc_partic, ie_finalizar_analise, ie_situacao,
						ie_pre_analise
					) values (
						nextval('pls_ocorrencia_benef_seq'), nr_seq_segurado_w, nr_seq_ocorrencia_glosa_w,
						clock_timestamp(), nm_usuario_p, clock_timestamp(),
						nm_usuario_p, null, nr_seq_conta_w,
						nr_seq_conta_proc_p, nr_seq_conta_mat_p, null,
						null, ie_auditoria_w, ie_nivel_liberacao_w,
						ds_glosa_interna_w, ie_fechar_conta_w, nr_seq_glosa_ww,
						qt_glosada_w, vl_glosada_w, ie_tipo_glosa_w,
						ds_documentacao_ww, nr_seq_conta_proc_p, nr_seq_conta_mat_p,
						nr_seq_proc_partic_p, ie_finalizar_analise_w, 'A',
						ie_pre_analise_w
					);

					-- Grava o histórico do lançamento da ocorrência
					CALL pls_gerar_ocor_cta_hist(nr_seq_conta_w, nr_seq_ocorrencia_glosa_w, nm_usuario_p, 'L');
				end if;
			end loop;
			close C02;

			update	pls_conta_glosa
			set	ie_situacao		= 'A',
				ie_forma_inativacao	 = NULL
			where	nr_sequencia		= nr_seq_glosa_ww
			and (coalesce(ie_forma_inativacao::text, '') = '' or ie_forma_inativacao = 'S');

			update	pls_ocorrencia_benef
			set	ie_situacao		= 'A',
				ie_forma_inativacao	 = NULL
			where	nr_seq_glosa		= nr_seq_glosa_ww
			and (coalesce(ie_forma_inativacao::text, '') = '' or ie_forma_inativacao = 'S');

			update	pls_ocorrencia_benef
			set	ie_situacao		= 'A',
				ie_forma_inativacao	 = NULL
			where	nr_seq_glosa_fat	= nr_seq_glosa_ww
			and (coalesce(ie_forma_inativacao::text, '') = '' or ie_forma_inativacao = 'S');

			/*Necessário replicar o código para os casos onde o item foi liberado pelo usuário e pelo sistema*/

			update	pls_conta_glosa
			set	ie_situacao		= 'I',
				ie_forma_inativacao	= 'U'
			where	nr_sequencia		= nr_seq_glosa_ww
			and	ie_forma_inativacao 	= 'US';

			update	pls_ocorrencia_benef
			set	ie_situacao		= 'I',
				ie_forma_inativacao	= 'U'
			where	nr_seq_glosa		= nr_seq_glosa_ww
			and	ie_forma_inativacao 	= 'US';

			update	pls_ocorrencia_benef
			set	ie_situacao		= 'I',
				ie_forma_inativacao	= 'U'
			where	nr_seq_glosa_fat	= nr_seq_glosa_ww
			and	ie_forma_inativacao 	= 'US';
		end if;
	end if;
end if;

--Não é para commit em procedures intermediarias
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gravar_conta_glosa ( cd_motivo_glosa_p tiss_motivo_glosa.cd_motivo_tiss%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, ie_lib_manual_p text, ds_observacao_p text, nm_usuario_p usuario.nm_usuario%type, ie_situacao_p text, ie_evento_p text, nr_seq_prestador_p pls_prestador.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_ocorrencia_benef_p pls_ocorrencia_benef.nr_sequencia%type, nr_seq_proc_partic_p pls_proc_participante.nr_sequencia%type, qt_glosada_p bigint default null) FROM PUBLIC;

