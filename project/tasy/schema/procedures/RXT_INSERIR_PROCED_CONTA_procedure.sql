-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE rxt_inserir_proced_conta ( nr_seq_tratamento_p bigint, nm_usuario_p text, nr_atendimento_p bigint, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint, nr_seq_agenda_rxt_p bigint, ie_opcao_p text default 'A') AS $body$
DECLARE


nr_seq_protocolo_w		bigint;
nr_sequencia_proc_w		bigint;				
nr_sequencia_w			bigint;
cd_procedimento_w		bigint  	:= 0;
ie_origem_proced_w		smallint  	:= null;
nr_seq_proc_pac_w		bigint  	:= 0;
nr_seq_atepacu_w		bigint  	:=  0;
nr_seq_proc_interno_w		bigint  	:= 0;
cd_convenio_w			bigint  	:= 0;
cd_categoria_w			bigint  	:= 0;
cd_pessoa_fisica_w		bigint  	:= 0;
cd_medico_w		        bigint  	:= 0;
dt_ent_unidade_w		timestamp 		:= clock_timestamp();
cd_local_estoque_w		bigint;
ds_erro_w			varchar(255);
qt_registros_w			bigint;
cd_doenca_cid_w			varchar(10);
ie_gerar_w			varchar(1);
qt_cid_w			bigint;
qt_agenda_rxt_w			bigint;
qt_agenda_w			bigint;
qt_contreg_w			bigint;
nr_atendimento_w		bigint;
nr_seq_tumor_w			bigint;
nr_seq_dia_w			bigint;
nr_seq_fase_w	        	bigint;
ie_regra_lancamento_w   	varchar(10);
ie_regra_lancam_w       	varchar(2);
ie_consid_trat_volume_w		varchar(2);
nr_seq_volume_w         	bigint;
nr_seq_campo_w          	bigint;
qt_proced_w			integer;
qt_campo_w			integer;
contador_w			smallint;
qt_contador_w			bigint;
qt_passagem_w			bigint;
qt_tratamento_w			bigint;
nr_seq_tipo_w			rxt_tumor.nr_seq_tipo%type;
nr_atendimento_tumor_w		bigint;
ie_regra_lancamento_trat_w	varchar(10);
qt_tipo_trat_proced_w		bigint;
nr_seq_agenda_w				bigint;
existe_prot_convenio_w      	bigint;

C01 CURSOR FOR
	SELECT	a.nr_seq_protocolo,
		a.nr_seq_proc_interno,
		a.nr_sequencia,
		coalesce(a.ie_regra_lancamento,'T')
	from	rxt_protocolo_proc_exec	a,
		rxt_tratamento		b
	where	b.nr_sequencia		= nr_seq_tratamento_p
	and	a.nr_seq_protocolo	= b.nr_seq_protocolo
	and (a.cd_convenio = cd_convenio_w or (coalesce(a.cd_convenio::text, '') = '' and existe_prot_convenio_w = 0))
	and (a.nr_seq_modalidade = b.nr_seq_modalidade or (coalesce(a.nr_seq_modalidade::text, '') = '' and existe_prot_convenio_w = 0))
	and	((obter_se_contido_char(a.ie_regra_lancamento, ie_regra_lancamento_w) = 'S') or (coalesce(a.ie_regra_lancamento,'T') = 'T'))
	
union all

	SELECT	null nr_seq_protocolo,
		a.nr_seq_proc_interno,
		null nr_sequencia,
		a.ie_regra_lancamento
	from	rxt_tipo_trat_proced	a,
		rxt_tumor		c,
		rxt_tratamento		b
	where	b.nr_sequencia			= nr_seq_tratamento_p
	and	a.nr_seq_tipo			= c.nr_seq_tipo
	and	c.nr_sequencia			= b.nr_seq_tumor
	and	((obter_se_contido_char(a.ie_regra_lancamento, ie_regra_lancamento_w) = 'S') or (coalesce(a.ie_regra_lancamento,'MT') in ('MC','MT')))
	and	a.ie_situacao			= 'A'
	order by 1;

C02 CURSOR FOR  
	SELECT	b.nr_sequencia
	from	rxt_agenda	a,
		rxt_agenda_fase	b
	where	a.nr_sequencia		= b.nr_seq_agenda_rxt
	and	a.nr_sequencia		= nr_seq_agenda_rxt_p
	and	b.nr_seq_dia_fase	= 1
	order by  1;
	
C03 CURSOR FOR
	SELECT 	a.nr_sequencia	
	from 	rxt_agenda a,
			rxt_tratamento b,
			rxt_volume_tratamento c,
			rxt_fase_tratamento d,
			rxt_campo e,
			rxt_agenda_fase f
	where  	a.nr_seq_tratamento 	= b.nr_sequencia
	and    	b.nr_sequencia 		= c.nr_seq_tratamento
	and    	b.nr_sequencia 		= d.nr_seq_tratamento
	and    	c.nr_sequencia 		= d.nr_seq_volume_tratamento
	and    	d.nr_sequencia 		= e.nr_seq_fase
	AND		f.nr_seq_agenda_rxt = a.nr_sequencia
	AND		f.nr_seq_fase 		= d.nr_sequencia 
	and    	a.nr_sequencia 		= nr_seq_agenda_rxt_p  
	and  	b.nr_sequencia 		=  nr_seq_tratamento_p;
	


BEGIN
select	max(nr_seq_tumor)
into STRICT	nr_seq_tumor_w
from	rxt_tratamento	b
where	b.nr_sequencia	= nr_seq_tratamento_p;

nr_atendimento_w	:= nr_atendimento_p;

select 	max(nr_atendimento),
	max(nr_seq_tipo),
    max(cd_medico)
into STRICT	nr_atendimento_tumor_w,
	nr_seq_tipo_w,
    cd_medico_w
from	rxt_tumor	a
where	nr_sequencia	= nr_seq_tumor_w;

if (coalesce(nr_atendimento_w,0) = 0) then
	nr_atendimento_w	:= nr_atendimento_tumor_w;
end if;

select	count(1)
into STRICT	qt_tipo_trat_proced_w
from	rxt_tipo_trat_proced	b
where	b.nr_seq_tipo		= nr_seq_tipo_w
and	b.ie_situacao		= 'A';

select 	coalesce(count(*),'0')
into STRICT	qt_registros_w
from	rxt_protocolo_proc_exec;

if 	(((qt_registros_w > 0) or (qt_tipo_trat_proced_w > 0)) and (nr_atendimento_w <> '0') and (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '')) then
	begin
	select 	max(obter_convenio_atendimento(a.nr_atendimento)),
		max(obter_dados_categ_conv(a.nr_atendimento,'CA')),
		max(a.cd_pessoa_fisica)
	into STRICT  	cd_convenio_w,
		cd_categoria_w,
		cd_pessoa_fisica_w
	from  	atendimento_paciente	a
	where 	a.nr_atendimento	= nr_atendimento_w;

select coalesce(sum(nr_sequencia),0) into STRICT existe_prot_convenio_w
	from (SELECT a.nr_sequencia
		from rxt_protocolo_proc_exec a,
			rxt_tratamento		b,
			rxt_protocolo     c
		where a.nr_seq_protocolo = b.nr_seq_protocolo
			and b.nr_sequencia		= nr_seq_tratamento_p
			and a.cd_convenio = cd_convenio_w
			and a.nr_seq_modalidade = b.nr_seq_modalidade
			and c.ie_situacao = 'A'
		group by a.nr_sequencia
		order by 1
	) alias2;
	
	--Se nao possuir passagem naquele setor / atendimento, e preciso gerar passagem, se precisar gerar passagem  e nao possuir NR_ATENDIMENTO, nao sera possivel gerar passagem,

	--neste caso a procedure vai ter q abortar
	if	((nr_atendimento_w = '0') or (coalesce(nr_atendimento_w::text, '') = '')) then
		--ds_erro_w := 'Para inserir o procedimento automaticamente na conta e necessario existir o numero do atendimento '||chr(13);
		ds_erro_w	:= wheb_mensagem_pck.get_texto(299021);		
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(193594,'DS_ERRO=' || ds_erro_w);
	end if;
	
	select 	count(*)
	into STRICT	qt_passagem_w
	from   	atend_paciente_unidade w
	where  	w.nr_atendimento 		= nr_atendimento_w
	and    	w.cd_setor_atendimento 		= cd_setor_atendimento_p;

	--se nao achar passagem setor, gera passagem.
	if (qt_passagem_w = 0) then
		CALL Gerar_Passagem_Setor_Atend(	nr_atendimento_w,
						cd_setor_atendimento_p,
						clock_timestamp(),
						'S',
						nm_usuario_p);
	end if;
	
	select 	max(w.dt_entrada_unidade)
	into STRICT	dt_ent_unidade_w
	from   	atend_paciente_unidade w
	where  	w.nr_atendimento 		= nr_atendimento_w
	and    	w.cd_setor_atendimento 		= cd_setor_atendimento_p;
	
	select	max(a.nr_seq_interno)
	into STRICT	nr_seq_atepacu_w
	from 	atend_paciente_unidade a
	where 	a.cd_setor_atendimento		= cd_setor_atendimento_p
	and	a.nr_atendimento 		= nr_atendimento_w
	and	trunc(a.dt_entrada_unidade) 	= trunc(dt_ent_unidade_w);

	select	max(cd_local_estoque)
	into STRICT	cd_local_estoque_w
	from	setor_atendimento
	where	cd_setor_atendimento	= cd_setor_atendimento_p;

	select  max(ie_considera_tratamento_volume)
	into STRICT 	ie_consid_trat_volume_w
	from 	rxt_parametro;

	select	max(nr_seq_dia),
		max(nr_seq_dia_fase)
	into STRICT	nr_seq_dia_w,
		nr_seq_fase_w 	
	from 	rxt_agenda
	where 	nr_sequencia	= nr_seq_agenda_rxt_p;
	
	if (ie_opcao_p = 'AC') then
		ie_regra_lancamento_w	:= 'AC';
	elsif (ie_opcao_p = 'CF') then
		ie_regra_lancamento_w	:= 'CF';
	else
		if (nr_seq_dia_w = 1) then
			ie_regra_lancamento_w	:= 'PD,CL';
		else
			ie_regra_lancamento_w	:= 'DS';
		end if;
	end if;

	if (nr_seq_fase_w) = 1 and (ie_consid_trat_volume_w = 'N') then
		ie_regra_lancamento_w := ie_regra_lancamento_w ||',VF';
	elsif (ie_consid_trat_volume_w = 'S') then

		select	max(b.nr_seq_dia),
			max(b.nr_seq_dia_fase)
		into STRICT	nr_seq_dia_w,
			nr_seq_fase_w 		
		from 	rxt_agenda a,
			rxt_agenda_fase b
		where   a.nr_sequencia		= b.nr_seq_agenda_rxt
		and 	a.nr_sequencia		= nr_seq_agenda_rxt_p
		and     b.nr_seq_dia_fase	= 1;
		
		if (nr_seq_fase_w) = 1 then
			ie_regra_lancamento_w	:= ie_regra_lancamento_w ||',VF';
		end if;
	end if;
	
	open c01;
	loop
	fetch c01 into
		nr_seq_protocolo_w,
		nr_seq_proc_interno_w,
		nr_sequencia_proc_w,
		ie_regra_lancam_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	
		if (ie_regra_lancam_w = 'DS') or (ie_regra_lancam_w = 'PD') or (ie_regra_lancam_w = 'AC') or (ie_regra_lancam_w = 'T')  or (ie_regra_lancam_w = 'CF') then
			select	count(*)
			into STRICT	qt_agenda_rxt_w
			from	procedimento_paciente
			where	nr_seq_agenda_rxt	= nr_seq_agenda_rxt_p
			and	nr_seq_proc_interno	= nr_seq_proc_interno_w;
			
			if	((qt_agenda_rxt_w = 0) or
				((ie_regra_lancam_w = 'AC') or (ie_regra_lancam_w = 'CF'))) then
				CALL rxt_inserir_procedimento_conta(	nr_seq_proc_interno_w,
							       cd_estabelecimento_p,
							       cd_convenio_w,
							       cd_categoria_w,
							       cd_medico_w,
							       nr_seq_atepacu_w,
							       dt_ent_unidade_w,
							       nr_atendimento_w,
							       nm_usuario_p,
							       nr_seq_agenda_rxt_p,
							       cd_local_estoque_w,
							       cd_setor_atendimento_p);
			end if;
		end if;	
	
		if (ie_regra_lancam_w = 'VF') then
			open c02;
			loop
			fetch c02 into
				nr_sequencia_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
			
				select  count(*)
				into STRICT    qt_contreg_w
				from 	rxt_agenda a,
					rxt_agenda_fase b
				where   a.nr_sequencia = b.nr_seq_agenda_rxt
				and 	a.nr_sequencia = nr_seq_agenda_rxt_p
				and     b.nr_seq_dia_fase = 1;
				
				select count(*)
				into STRICT   qt_agenda_w
				from   procedimento_paciente	
				where  nr_seq_agenda_rxt = nr_seq_agenda_rxt_p
				and    nr_seq_proc_interno = nr_seq_proc_interno_w;

				if (qt_contreg_w > qt_agenda_w)	 then
					CALL rxt_inserir_procedimento_conta(nr_seq_proc_interno_w,
								       cd_estabelecimento_p,
								       cd_convenio_w,
								       cd_categoria_w,
								       cd_medico_w,
								       nr_seq_atepacu_w,
								       dt_ent_unidade_w,
								       nr_atendimento_w,
								       nm_usuario_p,
								       nr_seq_agenda_rxt_p,
								       cd_local_estoque_w,
								       cd_setor_atendimento_p);			
				end if;
				
			end loop;
			close c02;
		end if;	
	
		if (ie_regra_lancam_w = 'CL') then
			select 	count(*)
			into STRICT	qt_campo_w		
			from 	rxt_agenda a,
				rxt_tratamento b,
				rxt_volume_tratamento c,
				rxt_fase_tratamento d,
				rxt_campo e
			where  	a.nr_seq_tratamento 	= b.nr_sequencia
			and    	b.nr_sequencia 		= c.nr_seq_tratamento
			and    	b.nr_sequencia 		= d.nr_seq_tratamento
			and    	c.nr_sequencia 		= d.nr_seq_volume_tratamento
			and    	d.nr_sequencia 		= e.nr_seq_fase
			and    	a.nr_sequencia 		= nr_seq_agenda_rxt_p  
			and  	b.nr_sequencia 		=  nr_seq_tratamento_p;
			
			select	count(*)
			into STRICT	qt_proced_w
			from	procedimento_paciente
			where	nr_seq_agenda_rxt 	= nr_seq_agenda_rxt_p
			and	nr_seq_proc_interno 	= nr_seq_proc_interno_w;
			
			if (qt_campo_w > qt_proced_w) then
				for contador_w in 1..(qt_campo_w - qt_proced_w)  loop
				
					CALL rxt_inserir_procedimento_conta(nr_seq_proc_interno_w,
								       cd_estabelecimento_p,
								       cd_convenio_w,
								       cd_categoria_w,
								       cd_medico_w,
								       nr_seq_atepacu_w,
								       dt_ent_unidade_w,
								       nr_atendimento_w,
								       nm_usuario_p,
								       nr_seq_agenda_rxt_p,
								       cd_local_estoque_w,
								       cd_setor_atendimento_p);		
				
				END LOOP;
			end if;
		end if;
		
		if (ie_regra_lancam_w in ('MT')) then
			select	count(*)
			into STRICT	qt_agenda_rxt_w
			from	procedimento_paciente
			where	nr_seq_agenda_rxt	= nr_seq_agenda_rxt_p
			and		nr_seq_proc_interno	= nr_seq_proc_interno_w
			and		coalesce(nr_seq_proc_est::text, '') = ''
			and		(nr_interno_conta IS NOT NULL AND nr_interno_conta::text <> '');
			
			if (qt_agenda_rxt_w = 0) then
				
				open C03;
				loop
				fetch C03 into	
					nr_seq_agenda_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin
					CALL rxt_inserir_procedimento_conta(	nr_seq_proc_interno_w,
								cd_estabelecimento_p,
								cd_convenio_w,
								cd_categoria_w,
								cd_medico_w,
								nr_seq_atepacu_w,
								dt_ent_unidade_w,
								nr_atendimento_w,
								nm_usuario_p,
								nr_seq_agenda_rxt_p,
								cd_local_estoque_w,
								cd_setor_atendimento_p);	
					end;
				end loop;
				close C03;	
				
				
			end if;
		end if;
	
	end loop;
	close c01;

	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE rxt_inserir_proced_conta ( nr_seq_tratamento_p bigint, nm_usuario_p text, nr_atendimento_p bigint, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint, nr_seq_agenda_rxt_p bigint, ie_opcao_p text default 'A') FROM PUBLIC;

