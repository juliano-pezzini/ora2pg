-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_c170_icmsipi ( nr_seq_controle_p bigint, nr_seq_nota_p bigint) AS $body$
DECLARE


/* OBSERVAES
*001 - O campo cd_enquadramento_ipi (COD_ENQ)  nulo.
conforme consulta no site da receita, esta tabela ainda no foi criada pelo governo.
deve ser gerado o campo nulo
*/


-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1) := 'N';

vl_bc_icms_w			fis_efd_icmsipi_C170.vl_bc_icms%type;
tx_aliq_icms_w			fis_efd_icmsipi_C170.tx_aliq_icms%type;
vl_icms_w				fis_efd_icmsipi_C170.vl_icms%type;
vl_bc_icms_st_w			fis_efd_icmsipi_C170.vl_bc_icms_st%type;
tx_aliq_st_w			fis_efd_icmsipi_C170.tx_aliq_st%type;
vl_icms_st_w			fis_efd_icmsipi_C170.vl_icms_st%type;
vl_bc_ipi_w				fis_efd_icmsipi_C170.vl_bc_ipi%type;
tx_aliq_ipi_w			fis_efd_icmsipi_C170.tx_aliq_ipi%type;
vl_ipi_w				fis_efd_icmsipi_C170.vl_ipi%type;
	
cd_ind_apur_w			fis_efd_icmsipi_C170.cd_ind_apur%type;
cd_cst_ipi_w			fis_efd_icmsipi_C170.cd_cst_ipi%type;
nr_seq_icmsipi_C170_w	fis_efd_icmsipi_C170.nr_sequencia%type;

qt_cursor_w				bigint	:= 0;	
nr_vetor_w				bigint	:= 0;

			
-- USUARIO
nm_usuario_w			usuario.nm_usuario%type;

/*Cursor que retorna as informaes para o registro c170 restringindo pela sequencia da nota fiscal*/

c_itens_nota_fiscal CURSOR FOR
	SELECT	b.nr_item_nf nr_item,
			b.cd_material cd_item,
			trim(both substr(obter_desc_material(b.cd_material), 1,255)) ds_compl,
			b.qt_item_nf qt_item,
			trim(both substr(b.cd_unidade_medida_compra, 1,6)) cd_unid,
			b.vl_total_item_nf vl_item,
			b.vl_desconto vl_desc,
			(	SELECT	count(1)
				from	operacao_nota b
				where	b.cd_operacao_nf = a.cd_operacao_nf
				and	coalesce(b.cd_operacao_estoque::text, '') = ''  LIMIT 1) cd_ind_mov,
      tax_get_active_cst(b.nr_sequencia, b.nr_item_nf, b.cd_estabelecimento) cd_cst_icms,
			substr(Elimina_Caracter(obter_dados_natureza_operacao(a.cd_natureza_operacao, 'CF'), '.'), 1, 4) cd_cfop,
			a.cd_natureza_operacao cd_nat,
			null cd_enq, 		--observao - *001
			CASE WHEN obter_dados_operacao_nota(a.cd_operacao_nf, '6')='S' THEN  c.ie_tributacao_pis_saida  ELSE c.ie_tributacao_pis END  cd_cst_pis,
			null vl_bc_pis,
			null tx_aliq_pis,
			null qt_bc_pis,
			null tx_vl_aliq_pis,
			null vl_pis,
			CASE WHEN obter_dados_operacao_nota(a.cd_operacao_nf, '6')='S' THEN  c.ie_tribut_cofins_saida  ELSE c.ie_tributacao_cofins END  cd_cst_cofins,
			null vl_bc_cofins,
			null tx_aliq_cofins,
			null qt_bc_cofins,
			null tx_vl_aliq_cofins,
			null vl_cofins,
			b.cd_conta_contabil cd_cta,
			c.ie_tributacao_icms,		-- Verificao para icms
			c.ie_tributacao_ipi,		-- Verificao para ipi
			b.nr_sequencia nr_seq_item_nf, 	-- Informao para obter os impostos		
			b.nr_item_nf,			-- Informao para obter os impostos
			(select	d.nr_sequencia
			from	fis_variacao_fiscal v,
					fis_dispositivo_legal d
			where	b.nr_seq_variacao_fiscal = v.nr_sequencia
			and		v.cd_dispositivo_legal = d.nr_sequencia) cd_obs
	FROM nota_fiscal a, nota_fiscal_item b
LEFT OUTER JOIN material_fiscal c ON (b.cd_material = c.cd_material)
WHERE a.nr_sequencia = b.nr_Sequencia  and a.nr_sequencia = nr_seq_nota_p;

/*Criao do array com o tipo sendo do cursor eespecificado - C_ITENS_NOTA_FISCAL */
	
type reg_c_itens_nota_fiscal is table of c_itens_nota_fiscal%RowType;
vetItensNF 		reg_c_itens_nota_fiscal;

/*Criao do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_C170 */

type registro is table of fis_efd_icmsipi_C170%rowtype index by integer;
fis_registros_w		registro;
		
BEGIN
/*Obteo do usurio ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

delete from fis_efd_icmsipi_C170
where nr_seq_nota = nr_seq_nota_p;
commit;

open c_itens_nota_fiscal;
loop
fetch c_itens_nota_fiscal bulk collect into vetItensNF limit 1000;
	for i in 1..vetItensNF.Count loop
		begin
		
		/*Limpeza de variaveis*/

		vl_icms_w	:= 0;
		vl_bc_icms_w	:= 0;
		tx_aliq_icms_w	:= 0;
		vl_icms_st_w	:= 0;
		vl_bc_icms_st_w	:= 0;
		tx_aliq_st_w	:= 0;
		vl_ipi_w	:= 0;
		vl_bc_ipi_w	:= 0;
		tx_aliq_ipi_w	:= 0;
		cd_ind_apur_w	:= null;
		cd_cst_ipi_w	:= null;
		
		/*Incrementa a variavel para o array*/

		qt_cursor_w:=	qt_cursor_w + 1;
		
		if (ie_gerou_dados_bloco_w = 'N') then
			ie_gerou_dados_bloco_w:=	'S';
		end if;
		
		/*Bloco para obter os valores de impostos. ICMS,*/

		if (substr(vetItensNF[i].cd_cst_icms,2,3) in ('00', '01', '10', '20', '70', '90')) then
			SELECT * FROM fis_obter_valor_trib_item(	vetItensNF[i].nr_seq_item_nf, vetItensNF[i].nr_item_nf, 'ICMS', vl_icms_w, vl_bc_icms_w, tx_aliq_icms_w) INTO STRICT vl_icms_w, vl_bc_icms_w, tx_aliq_icms_w;
		end if;
		
		/*Bloco para obter os valores de impostos. ICMSST*/

		if (substr(vetItensNF[i].cd_cst_icms,2,3) in ('10', '30', '70')) then
			SELECT * FROM fis_obter_valor_trib_item(	vetItensNF[i].nr_seq_item_nf, vetItensNF[i].nr_item_nf, 'ICMSST', vl_icms_st_w, vl_bc_icms_st_w, tx_aliq_st_w) INTO STRICT vl_icms_st_w, vl_bc_icms_st_w, tx_aliq_st_w;
		end if;
		
		/*Bloco para obter os valores de impostos. IPI*/

		if (vetItensNF[i].ie_tributacao_ipi in ('00', '50')) then
			SELECT * FROM fis_obter_valor_trib_item(	vetItensNF[i].nr_seq_item_nf, vetItensNF[i].nr_item_nf, 'IPI', vl_ipi_w, vl_bc_ipi_w, tx_aliq_ipi_w) INTO STRICT vl_ipi_w, vl_bc_ipi_w, tx_aliq_ipi_w;
							
			if (coalesce(vl_ipi_w, 0) <> 0) then
				cd_ind_apur_w:= '0';
				cd_cst_ipi_w:=	vetItensNF[i].ie_tributacao_ipi;
			end if;
		end if;
		
		/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_C170 */

		select	nextval('fis_efd_icmsipi_c170_seq')
		into STRICT	nr_seq_icmsipi_C170_w
		;
		
		/*Inserindo valores no array para realizao do forall posteriormente*/

		fis_registros_w[qt_cursor_w].nr_sequencia		:=	nr_seq_icmsipi_C170_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao		:=	clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario			:=	nm_usuario_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec:=	clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec	:=	nm_usuario_w;
		fis_registros_w[qt_cursor_w].cd_reg				:=	'C170';
		fis_registros_w[qt_cursor_w].nr_item			:=	vetItensNF[i].nr_item;
		fis_registros_w[qt_cursor_w].cd_item			:=  vetItensNF[i].cd_item;
		fis_registros_w[qt_cursor_w].ds_compl			:=  vetItensNF[i].ds_compl;
		fis_registros_w[qt_cursor_w].qt_item			:=  vetItensNF[i].qt_item;
		fis_registros_w[qt_cursor_w].cd_unid			:=  vetItensNF[i].cd_unid;
		fis_registros_w[qt_cursor_w].vl_item			:=  vetItensNF[i].vl_item;
		fis_registros_w[qt_cursor_w].vl_desc			:=  vetItensNF[i].vl_desc;
		fis_registros_w[qt_cursor_w].cd_ind_mov			:=	vetItensNF[i].cd_ind_mov;
		fis_registros_w[qt_cursor_w].cd_cst_icms		:=  vetItensNF[i].cd_cst_icms;
		fis_registros_w[qt_cursor_w].cd_cfop			:=  vetItensNF[i].cd_cfop;
		fis_registros_w[qt_cursor_w].cd_nat				:=  vetItensNF[i].cd_nat;
		fis_registros_w[qt_cursor_w].vl_bc_icms			:=	vl_bc_icms_w;
		fis_registros_w[qt_cursor_w].tx_aliq_icms		:=  tx_aliq_icms_w;
		fis_registros_w[qt_cursor_w].vl_icms			:=  vl_icms_w;
		fis_registros_w[qt_cursor_w].vl_bc_icms_st		:=  vl_bc_icms_st_w;
		fis_registros_w[qt_cursor_w].tx_aliq_st			:=  tx_aliq_st_w;
		fis_registros_w[qt_cursor_w].vl_icms_st			:=  vl_icms_st_w;
		fis_registros_w[qt_cursor_w].cd_ind_apur		:=  cd_ind_apur_w;
		fis_registros_w[qt_cursor_w].cd_cst_ipi         :=  cd_cst_ipi_w;
		fis_registros_w[qt_cursor_w].cd_enq             :=	vetItensNF[i].cd_enq;
		fis_registros_w[qt_cursor_w].vl_bc_ipi			:=	vl_bc_ipi_w;
		fis_registros_w[qt_cursor_w].tx_aliq_ipi        :=  tx_aliq_ipi_w;
		fis_registros_w[qt_cursor_w].vl_ipi             :=  vl_ipi_w;
		fis_registros_w[qt_cursor_w].cd_cst_pis			:=	vetItensNF[i].cd_cst_pis;
		fis_registros_w[qt_cursor_w].vl_bc_pis          :=	vetItensNF[i].vl_bc_pis;
		fis_registros_w[qt_cursor_w].tx_aliq_pis        :=  vetItensNF[i].tx_aliq_pis;
		fis_registros_w[qt_cursor_w].qt_bc_pis			:=  vetItensNF[i].qt_bc_pis;
		fis_registros_w[qt_cursor_w].tx_vl_aliq_pis		:=  vetItensNF[i].tx_vl_aliq_pis;
		fis_registros_w[qt_cursor_w].vl_pis             :=  vetItensNF[i].vl_pis;
		fis_registros_w[qt_cursor_w].cd_cst_cofins		:=  vetItensNF[i].cd_cst_cofins;
		fis_registros_w[qt_cursor_w].vl_bc_cofins       :=  vetItensNF[i].vl_bc_cofins;
		fis_registros_w[qt_cursor_w].tx_aliq_cofins     :=  vetItensNF[i].tx_aliq_cofins;
		fis_registros_w[qt_cursor_w].qt_bc_cofins		:=  vetItensNF[i].qt_bc_cofins;
		fis_registros_w[qt_cursor_w].tx_vl_aliq_cofins  :=  vetItensNF[i].tx_vl_aliq_cofins;
		fis_registros_w[qt_cursor_w].vl_cofins          :=  vetItensNF[i].vl_cofins;
		fis_registros_w[qt_cursor_w].cd_cta				:=  vetItensNF[i].cd_cta;
		fis_registros_w[qt_cursor_w].cd_obs				:= 	vetItensNF[i].cd_obs;
		fis_registros_w[qt_cursor_w].nr_seq_controle    :=	nr_seq_controle_p;
		fis_registros_w[qt_cursor_w].nr_seq_nota		:=	nr_seq_nota_p;
		
		if (nr_vetor_w >= 1000) then
			begin
			/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_C170 */

			forall j in fis_registros_w.first..fis_registros_w.last
				insert into fis_efd_icmsipi_C170 values fis_registros_w(j);

			nr_vetor_w	:= 0;
			fis_registros_w.delete;

			commit;

			end;
		end if;
		
		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w	:= nr_vetor_w 	+ 1;
		
		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_itens_nota_fiscal */
end loop;
close c_itens_nota_fiscal;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que no entraram outro for all devido a quantidade de registros no vetor*/

	forall l in fis_registros_w.first..fis_registros_w.last
		insert into fis_efd_icmsipi_C170 values fis_registros_w(l);
		
	fis_registros_w.delete;

	commit;
	
	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualizao informao no controle de gerao de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update 	fis_efd_icmsipi_controle
	set	ie_mov_C = 'S'
	where 	nr_sequencia = nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_c170_icmsipi ( nr_seq_controle_p bigint, nr_seq_nota_p bigint) FROM PUBLIC;

