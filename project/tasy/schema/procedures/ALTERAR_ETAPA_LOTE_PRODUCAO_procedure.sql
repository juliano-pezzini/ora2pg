-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE alterar_etapa_lote_producao ( nr_lote_producao_p bigint, ie_etapa_p text, nm_usuario_p text, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint) AS $body$
DECLARE


ie_etapa_w		varchar(15);
ie_baixa_estoque_w	varchar(15);
cd_material_w		integer;
qt_material_w		double precision;
cd_unidade_medida_w	varchar(30);
cd_local_estoque_w	smallint;
nr_sequencia_w		bigint;
ie_existe_preparo_w	varchar(1);
ie_consignado_w		material.ie_consignado%type;
cd_cgc_fornecedor_w	lote_producao_comp.cd_fornecedor%type;
nr_seq_lote_fornec_w	lote_producao_comp.nr_seq_lote_fornec%type;
ie_regra_saldo_consig_w	parametro_estoque.ie_regra_saldo_consig%type;
cd_local_estoque_comp_w	lote_producao_comp.cd_local_estoque%type;
qt_movimento_w		double precision;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	lp_individual
	where	nr_lote_producao = nr_lote_producao_p
	and	ie_status = 'G'
	and	coalesce(nr_seq_processo::text, '') = '';
	
C02 CURSOR FOR
	SELECT	cd_material,
		qt_unitaria,
		cd_unidade_medida,
		cd_local_estoque,
		cd_fornecedor,
		nr_seq_lote_fornec
	from	lote_producao_comp
	where	nr_lote_producao = nr_lote_producao_p
	and	coalesce(ie_necessita_disp,'S') = 'S';
	
C03 CURSOR FOR
	SELECT	cd_material,
		qt_material,
		cd_unidade_medida
	from	lp_item_util
	where	nr_lote_producao = nr_lote_producao_p
	and	qt_material > 0;

BEGIN

ie_baixa_estoque_w := obter_param_usuario(9044, 8, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_baixa_estoque_w);

select	coalesce(max(ie_regra_saldo_consig), 0)
into STRICT	ie_regra_saldo_consig_w
from	parametro_estoque
where	cd_estabelecimento = cd_estabelecimento_p;

if (ie_etapa_p = 'H') then
	update	lote_producao
	set	dt_higienizacao		=	clock_timestamp(),
		nm_usuario_higienizacao	=	nm_usuario_p,
		ie_etapa       		=	'H'
	where	nr_lote_producao	=	nr_lote_producao_p;
elsif (ie_etapa_p = 'S') then
	update	lote_producao
	set	dt_separacao		=	clock_timestamp(),
		nm_usuario_separacao	=	nm_usuario_p,
		ie_etapa		=	'S'
	where	nr_lote_producao	=	nr_lote_producao_p;
elsif (ie_etapa_p = 'C') then
	
	select	coalesce(max('S'),'N')
	into STRICT	ie_existe_preparo_w
	from	lp_individual
	where	nr_lote_producao	=	nr_lote_producao_p
	and	ie_status in ('C','E','P');

	if (ie_baixa_estoque_w = 'S') then
		select	cd_local_estoque
		into STRICT	cd_local_estoque_w
		from	lote_producao
		where	nr_lote_producao	= nr_lote_producao_p;

		if (ie_existe_preparo_w = 'S') then
			begin
			
			open C01;
			loop
			fetch C01 into	
				nr_sequencia_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin
				nr_sequencia_w := nr_sequencia_w;
						
				open C02;
				loop
				fetch C02 into	
					cd_material_w,
					qt_material_w,
					cd_unidade_medida_w,
					cd_local_estoque_comp_w,
					cd_cgc_fornecedor_w,
					nr_seq_lote_fornec_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					
					select	coalesce(ie_consignado, '0')
					into STRICT	ie_consignado_w
					from	material
					where	cd_material = cd_material_w;
					
					if (ie_consignado_w = '2') and (ie_regra_saldo_consig_w > 0) and (coalesce(cd_cgc_fornecedor_w::text, '') = '') then
						qt_movimento_w := obter_quantidade_convertida(
									cd_material_p			=> cd_material_w,
									qt_material_p			=> qt_material_w,
									cd_unidade_medida_p		=> cd_unidade_medida_w,
									cd_unidade_medida_retorno_p	=> 'UME');
						
						CALL gerar_movimento_consig_ambos(
							cd_material_p		=> cd_material_w,
							qt_movimento_p		=> qt_movimento_w,
							cd_unidade_medida_p	=> cd_unidade_medida_w,
							ie_acao_p		=> 1,
							cd_local_estoque_p	=> cd_local_estoque_comp_w,
							cd_estabelecimento_p	=> cd_estabelecimento_p,
							ie_rotina_movimento_p	=> 'GPE',
							nm_usuario_p		=> nm_usuario_p,
							nr_seq_lote_fornec_p	=> nr_seq_lote_fornec_w,
							nr_sequencia_p		=> nr_lote_producao_p,
							cd_setor_atendimento_p	=> cd_setor_atendimento_p);
					else
						CALL Gerar_Prescricao_Estoque(cd_estabelecimento_p, null , null, cd_material_w ,clock_timestamp(), 1, cd_local_estoque_comp_w,
									qt_material_w, cd_setor_atendimento_p, cd_unidade_medida_w, nm_usuario_p, 'E',
									null, null, null, null, cd_cgc_fornecedor_w, null, nr_seq_lote_fornec_w,
									null, null, null, 'X', null, nr_lote_producao_p);
					end if;
					end;
				end loop;
				close C02;
				
				end;
			end loop;
			close C01;
			
			end;
		else
			begin
		
			open C03;
			loop
			fetch C03 into	
				cd_material_w,
				qt_material_w,
				cd_unidade_medida_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				CALL Gerar_Prescricao_Estoque(	cd_estabelecimento_p,null,null, cd_material_w,clock_timestamp(),1,cd_local_estoque_w,
								qt_material_w,cd_setor_atendimento_p,cd_unidade_medida_w,nm_usuario_p,'E',null,null,null,null,null,null,
								nr_seq_lote_fornec_w, null, null, null, 'X', null, nr_lote_producao_p);
				end;
			end loop;
			close C03;

			end;
		
		end if;
		
	update	lote_producao
	set	ie_etapa		=	'C',
		dt_cancelamento		=	clock_timestamp(),
		nm_usuario_cancelamento	=	nm_usuario_p
	where	nr_lote_producao	=	nr_lote_producao_p;
	
	update	lp_individual
	set	ie_status		=	'C',
		dt_cancelamento		=	clock_timestamp(),
		nm_usuario_cancelamento	=	nm_usuario_p
	where	nr_lote_producao	=	nr_lote_producao_p
	and	coalesce(nr_seq_processo::text, '') = '';
		
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE alterar_etapa_lote_producao ( nr_lote_producao_p bigint, ie_etapa_p text, nm_usuario_p text, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint) FROM PUBLIC;

