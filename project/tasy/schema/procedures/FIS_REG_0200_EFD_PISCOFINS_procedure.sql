-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_reg_0200_efd_piscofins ( nr_seq_controle_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, cd_empresa_p bigint, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) AS $body$
DECLARE


nr_seq_regra_efd_w	bigint;
nr_versao_efd_w		varchar(5);
tp_registro_w		varchar(4);
nr_linha_w		bigint 	:= qt_linha_p;
nr_seq_registro_w		bigint 	:= nr_sequencia_p;
ds_arquivo_w		varchar(4000);
ds_arquivo_compl_w	varchar(4000);
ds_linha_w		varchar(8000);
sep_w			varchar(1)	:= ds_separador_p;
ie_local_gerar_sped_w	varchar(1);
ie_nota_entrada_w		varchar(1);
ie_buscar_data_w		varchar(1);

-- ****************************************  Pegar pelas notas fiscais ***************************************
c01 CURSOR FOR
	SELECT	distinct '0200' tp_registro,
		to_char(m.cd_material) cd_item,
		m.ds_material ds_item,
		substr(m.cd_unidade_medida_estoque,1,6) cd_unidade_medida_estoque,
		'07' ie_tipo_fiscal,
		substr(to_char(obter_item_servico_item_nf(m.cd_material,0, 0, 'C')), 1, 5) cd_item_servico
	FROM operacao_nota o, material m, nota_fiscal n
LEFT OUTER JOIN nota_fiscal_item i ON (n.nr_sequencia = i.nr_sequencia)
LEFT OUTER JOIN lote_protocolo c ON (n.nr_seq_lote_prot = c.nr_sequencia)
LEFT OUTER JOIN conta_paciente x ON (n.nr_interno_conta = x.nr_interno_conta)
LEFT OUTER JOIN protocolo_convenio w ON (n.nr_seq_protocolo = w.nr_seq_protocolo)
LEFT OUTER JOIN protocolo_convenio z ON (x.nr_seq_protocolo = z.nr_seq_protocolo)
WHERE n.cd_operacao_nf = o.cd_operacao_nf  and i.cd_material = m.cd_material    and n.cd_estabelecimento = cd_estabelecimento_p and ((o.ie_operacao_fiscal = 'S' AND ie_nota_entrada_w = 'N')
	or (ie_nota_entrada_w = 'S')) AND ((n.dt_emissao BETWEEN dt_inicio_p AND fim_dia(dt_fim_p) AND (ie_buscar_data_w = 'N'))
	OR	((n.nr_seq_lote_prot IS NOT NULL AND n.nr_seq_lote_prot::text <> '') AND (TRUNC(c.dt_mesano_referencia,'mm') = TRUNC(dt_inicio_p,'mm') AND (ie_buscar_data_w = 'P')))
	OR	((x.nr_seq_protocolo IS NOT NULL AND x.nr_seq_protocolo::text <> '') AND (TRUNC(z.dt_mesano_referencia,'mm') = TRUNC(dt_inicio_p,'mm') AND (ie_buscar_data_w = 'P')))
	OR	((n.nr_seq_protocolo IS NOT NULL AND n.nr_seq_protocolo::text <> '') AND (TRUNC(w.dt_mesano_referencia,'mm') = TRUNC(dt_inicio_p,'mm') AND (ie_buscar_data_w = 'P')))
	or	(((coalesce(n.nr_seq_lote_prot::text, '') = '') and (coalesce(x.nr_seq_protocolo::text, '') = '') and (coalesce(n.nr_seq_protocolo::text, '') = '')) and (n.dt_emissao BETWEEN dt_inicio_p AND fim_dia(dt_fim_p)) and (ie_buscar_data_w = 'P'))) and (o.ie_servico = 'S') and (n.dt_atualizacao_estoque IS NOT NULL AND n.dt_atualizacao_estoque::text <> '') and n.ie_situacao in (1, 3)
	
union all

	SELECT	distinct '0200' tp_registro,
		'P' || i.cd_procedimento || coalesce(to_char(i.ie_origem_proced),'1') cd_item,
		obter_descricao_procedimento(i.cd_procedimento, i.ie_origem_proced) ds_item,
		'' cd_unidade_medida_estoque,
		'09' ie_tipo_fiscal,
		substr(coalesce(to_char(obter_dados_grupo_servico_item(obter_item_servico_proced(p.cd_procedimento, p.ie_origem_proced, cd_estabelecimento_p), 'CD')),obter_item_servico_item_nf(0,p.cd_procedimento,p.ie_origem_proced,'C')), 1, 5) cd_item_servico		
	FROM procedimento p, operacao_nota o, nota_fiscal n
LEFT OUTER JOIN nota_fiscal_item i ON (n.nr_sequencia = i.nr_sequencia)
LEFT OUTER JOIN lote_protocolo c ON (n.nr_seq_lote_prot = c.nr_sequencia)
LEFT OUTER JOIN conta_paciente x ON (n.nr_interno_conta = x.nr_interno_conta)
LEFT OUTER JOIN protocolo_convenio w ON (n.nr_seq_protocolo = w.nr_seq_protocolo)
LEFT OUTER JOIN protocolo_convenio z ON (x.nr_seq_protocolo = z.nr_seq_protocolo)
WHERE n.cd_operacao_nf = o.cd_operacao_nf     and i.cd_procedimento = p.cd_procedimento and i.ie_origem_proced = p.ie_origem_proced and n.cd_estabelecimento = cd_estabelecimento_p and ((o.ie_operacao_fiscal = 'S' AND ie_nota_entrada_w = 'N')
	or (ie_nota_entrada_w = 'S')) AND ((n.dt_emissao BETWEEN dt_inicio_p AND fim_dia(dt_fim_p) AND (ie_buscar_data_w = 'N'))
	OR	((n.nr_seq_lote_prot IS NOT NULL AND n.nr_seq_lote_prot::text <> '') AND (TRUNC(c.dt_mesano_referencia,'mm') = TRUNC(dt_inicio_p,'mm') AND (ie_buscar_data_w = 'P')))
	OR	((x.nr_seq_protocolo IS NOT NULL AND x.nr_seq_protocolo::text <> '') AND (TRUNC(z.dt_mesano_referencia,'mm') = TRUNC(dt_inicio_p,'mm') AND (ie_buscar_data_w = 'P')))
	OR	((n.nr_seq_protocolo IS NOT NULL AND n.nr_seq_protocolo::text <> '') AND (TRUNC(w.dt_mesano_referencia,'mm') = TRUNC(dt_inicio_p,'mm') AND (ie_buscar_data_w = 'P')))
	or	(((coalesce(n.nr_seq_lote_prot::text, '') = '') and (coalesce(x.nr_seq_protocolo::text, '') = '') and (coalesce(n.nr_seq_protocolo::text, '') = '')) and (n.dt_emissao BETWEEN dt_inicio_p AND fim_dia(dt_fim_p)) and (ie_buscar_data_w = 'P'))) and (o.ie_servico = 'S') and (n.dt_atualizacao_estoque IS NOT NULL AND n.dt_atualizacao_estoque::text <> '') and n.ie_situacao in (1, 3);

vet01	C01%rowtype;

-- ****************************************  Pegar pela conta paciente  ****************************************
c02 CURSOR FOR
SELECT	  distinct '0200' tp_registro,
	  to_char(m.cd_material) cd_item,
	  m.ds_material ds_item,
	  m.cd_unidade_medida_estoque,
	  '07' ie_tipo_fiscal,
	  to_char(m.cd_classif_fiscal) cd_classif_fiscal,	
	  substr(to_char(obter_item_servico_item_nf(m.cd_material,0,0,'C')), 1, 5) cd_item_servico
from 	  conta_paciente_resumo b,
	  conta_paciente a,
	  material m
where 	  b.nr_interno_conta = a.nr_interno_conta
and	  b.cd_material = m.cd_material
group by  m.cd_material,
	  m.ds_material,
	  m.cd_unidade_medida_estoque,
	  m.cd_classif_fiscal,
	  substr(ELIMINA_CARACTERE_ESPECIAL(to_char(obter_item_servico_item_nf(m.cd_material,0,0,'C'))), 1, 4)	  

union all

SELECT	  distinct '0200' tp_registro,
	  'P' || p.cd_procedimento || coalesce(to_char(p.ie_origem_proced),'1') cd_item,
	  replace(obter_descricao_procedimento(p.cd_procedimento, p.ie_origem_proced),'''||Chr(59)||''','') ds_item,
	  '' cd_unidade_medida_estoque,
	  '09' ie_tipo_fiscal,
	  '' cd_classif_fiscal,
	  substr(coalesce(to_char(obter_dados_grupo_servico_item(obter_item_servico_proced(p.cd_procedimento, p.ie_origem_proced, cd_estabelecimento_p), 'CD')), obter_item_servico_item_nf(0,p.cd_procedimento,p.ie_origem_proced,'C')), 1, 5) cd_item_servico	
FROM procedimento p
LEFT OUTER JOIN nota_fiscal_item i ON (p.cd_procedimento = i.cd_procedimento AND p.ie_origem_proced = i.ie_origem_proced) order BY   2;

vet02	C02%RowType;


BEGIN

select	nr_seq_regra_efd
into STRICT	nr_seq_regra_efd_w
from	fis_efd_controle
where	nr_sequencia = nr_seq_controle_p;

select	coalesce(max(ie_nota_entrada),'N'),
	coalesce(max(ie_buscar_data),'N')
into STRICT	ie_nota_entrada_w,
	ie_buscar_data_w
from	fis_regra_efd_a100
where	nr_seq_regra_efd = nr_seq_regra_efd_w;

ie_local_gerar_sped_w := obter_param_usuario(5500, 25, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_local_gerar_sped_w);

if (ie_local_gerar_sped_w = 'N') then -- Pegar pela nota fiscal
	open C01;
	loop
	fetch C01 into	
		vet01;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin	
		ds_linha_w	:= 	substr(	sep_w || vet01.tp_registro			||
						sep_w || vet01.cd_item		 	||
						sep_w || vet01.ds_item		 	||
						sep_w || ''				 	||
						sep_w || ''				 	||
						sep_w || substr(vet01.cd_unidade_medida_estoque,1,6)	||
						sep_w || lpad(vet01.ie_tipo_fiscal, 2,0) 		||
						sep_w || ''					||
						sep_w || ''				 	||
						sep_w || ''				 	||
						sep_w || vet01.cd_item_servico		 	||
						sep_w || ''				 	|| sep_w,1,8000);
		
		ds_arquivo_w		:= substr(ds_linha_w,1,4000);
		ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
		nr_seq_registro_w		:= nr_seq_registro_w + 1;
		nr_linha_w		:= nr_linha_w + 1;
		
		insert into fis_efd_arquivo(
						nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						nr_seq_controle_efd,
						nr_linha,
						cd_registro,
						ds_arquivo,
						ds_arquivo_compl)
					values (
						nr_seq_registro_w,
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nr_seq_controle_p,
						nr_linha_w,
						vet01.tp_registro,
						ds_arquivo_w,
						ds_arquivo_compl_w);
		end;
	end loop;
	close C01;
end if;

if (ie_local_gerar_sped_w = 'C') or (ie_local_gerar_sped_w = 'A') then -- Pegar pela conta paciente
	open C02;
	loop
	fetch C02 into	
		vet02;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin	
		ds_linha_w	:= 	substr(	sep_w || vet02.tp_registro				||
						sep_w || vet02.cd_item		 		||
						sep_w || vet02.ds_item		 		||
						sep_w || ''				 		||
						sep_w || ''				 		||
						sep_w || substr(vet02.cd_unidade_medida_estoque,1,6)		||
						sep_w || lpad(vet02.ie_tipo_fiscal, 2,0) 			||
						sep_w || vet02.cd_classif_fiscal			||
						sep_w || ''				 		||
						sep_w || ''				 		||
						sep_w || vet02.cd_item_servico		 		||
						sep_w || ''				 		|| sep_w,1,8000);
		
		ds_arquivo_w		:= substr(ds_linha_w,1,4000);
		ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
		nr_seq_registro_w		:= nr_seq_registro_w + 1;
		nr_linha_w		:= nr_linha_w + 1;
		
		insert into fis_efd_arquivo(
						nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						nr_seq_controle_efd,
						nr_linha,
						cd_registro,
						ds_arquivo,
						ds_arquivo_compl)
				values (
						nr_seq_registro_w,
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nr_seq_controle_p,
						nr_linha_w,
						vet02.tp_registro,
						ds_arquivo_w,
						ds_arquivo_compl_w);
		end;
	end loop;
	close C02;

end if;

commit;

qt_linha_p	:= nr_linha_w;
nr_sequencia_p	:= nr_seq_registro_w;	

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_reg_0200_efd_piscofins ( nr_seq_controle_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, cd_empresa_p bigint, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) FROM PUBLIC;

