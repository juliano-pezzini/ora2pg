-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_teste_apc ( nr_teste_p bigint, nr_seq_dialisador_p bigint, nr_seq_dialise_p bigint, nr_seq_dialise_dialisador_p bigint, cd_estabelecimento_p bigint, dt_teste_p timestamp, ie_resultado_p text, nm_usuario_p text, ie_result_prim_neg_p text, ds_erro_p INOUT text, ds_retorno_p INOUT text) AS $body$
DECLARE

 
 
nr_seq_unid_dialise_w		bigint;
ie_dialise_iniciada_w		varchar(1);
ie_status_w			varchar(1);
ie_status_atual_w		varchar(15);
dt_fim_dialise_w		timestamp;
dt_cancelamento_w		timestamp;
nr_seq_hd_dialisador_teste_w	hd_dialisador_teste.nr_sequencia%type;


BEGIN 
 
if (coalesce(ie_resultado_p::text, '') = '') then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(233282);
end if;
 
/* Pega a unidade de diálise */
 
select	nr_seq_unid_dialise, 
	CASE WHEN coalesce(dt_inicio_dialise::text, '') = '' THEN  'N'  ELSE 'S' END , 
	dt_fim_dialise, 
	dt_cancelamento 
into STRICT	nr_seq_unid_dialise_w, 
	ie_dialise_iniciada_w, 
	dt_fim_dialise_w, 
	dt_cancelamento_w 
from	hd_dialise 
where	nr_sequencia	= nr_seq_dialise_p;
 
/* Obter status do dialisador */
 
select	ie_status 
into STRICT	ie_status_atual_w 
from	hd_dializador 
where	nr_sequencia	= nr_seq_dialisador_p;
 
select	nextval('hd_dialisador_teste_seq') 
into STRICT	nr_seq_hd_dialisador_teste_w
;
/* Insere os dados do teste */
 
insert into hd_dialisador_teste( 
	nr_sequencia, 
	dt_atualizacao, 
	nm_usuario, 
	dt_atualizacao_nrec, 
	nm_usuario_nrec, 
	nr_teste, 
	dt_teste, 
	ie_resultado, 
	cd_pf_teste, 
	nr_seq_dialise, 
	nr_seq_dialisador, 
	nr_seq_dialise_dialisador, 
	cd_estabelecimento, 
	nr_seq_unid_dialise, 
	ie_pos_dialise 
) values ( 
	nr_seq_hd_dialisador_teste_w, 
	clock_timestamp(), 
	nm_usuario_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	nr_teste_p, 
	dt_teste_p, 
	ie_resultado_p, 
	substr(obter_pessoa_fisica_usuario(nm_usuario_p,'C'),1,10), 
	nr_seq_dialise_p, 
	nr_seq_dialisador_p, 
	nr_seq_dialise_dialisador_p, 
	cd_estabelecimento_p, 
	nr_seq_unid_dialise_w, 
	'N' 
);
 
/* Se o primeiro teste tenha dado negativo */
 
if	((ie_result_prim_neg_p = 'N') and (nr_teste_p = 1) and (ie_resultado_p = 'N')) then 
 
	SELECT * FROM HD_Retirar_Dialisador(	nr_seq_dialise_dialisador_p, nr_seq_dialisador_p, clock_timestamp(), nm_usuario_p, wheb_mensagem_pck.get_texto(281528,null), ds_erro_p, ds_retorno_p, 'N') INTO STRICT ds_erro_p, ds_retorno_p;
end if;
 
/* Coloca o dialisador em status Pronto para uso - Somente quando a diálise não está finalizada ou cancelada e quando o dialisador não tiver sido descartado*/
 
 
 
 
if	((ie_result_prim_neg_p = 'S' AND nr_teste_p = 1) or (nr_teste_p = 2)) and (ie_resultado_p = 'N') and (ie_status_atual_w <> 'D') and (coalesce(dt_fim_dialise_w::text, '') = '') and (coalesce(dt_cancelamento_w::text, '') = '') then 
	if (ie_dialise_iniciada_w = 'S') then 
		ie_status_w	:= 'E';
	elsif (ie_dialise_iniciada_w = 'N') then 
		ie_status_w	:= 'U';
	end if;
 
	update hd_dializador	 
	set  ie_status	= ie_status_w 
	where nr_sequencia	= nr_seq_dialisador_p;
end if;
 
if (nr_teste_p = 1) then 
	CALL hd_gerar_assinatura(nr_seq_dialise_dialisador_p, null, nr_seq_dialise_p, nr_seq_hd_dialisador_teste_w, null, null, null, null, null, 'TI', nm_usuario_p, 'N');
elsif (nr_teste_p = 2) then 
	CALL hd_gerar_assinatura(null, null, nr_seq_dialise_p, nr_seq_hd_dialisador_teste_w, null, null, null, null, null, 'TII', nm_usuario_p, 'N');	
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_teste_apc ( nr_teste_p bigint, nr_seq_dialisador_p bigint, nr_seq_dialise_p bigint, nr_seq_dialise_dialisador_p bigint, cd_estabelecimento_p bigint, dt_teste_p timestamp, ie_resultado_p text, nm_usuario_p text, ie_result_prim_neg_p text, ds_erro_p INOUT text, ds_retorno_p INOUT text) FROM PUBLIC;

