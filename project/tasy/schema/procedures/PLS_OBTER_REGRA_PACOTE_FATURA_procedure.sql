-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_obter_regra_pacote_fatura ( nr_seq_conta_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_material_p bigint, nr_seq_regra_p INOUT bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Obter a regra de agrupamento do procedimento/material
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
-------------------------------------------------------------------------------------------------------------------
Referências:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_tipo_intercambio_w			varchar(255);
ie_tipo_despesa_w			varchar(2);
sg_estado_w				pessoa_juridica.sg_estado%type;
sg_estado_int_w				pessoa_juridica.sg_estado%type;
cd_area_procedimento_w			bigint;
cd_especialidade_w			bigint;
cd_grupo_proc_w				bigint;
ie_origem_proced_ret_w			bigint;
cd_tipo_procedimento_w			bigint;
cd_grupo_material_w			bigint;
cd_subgrupo_material_w			bigint;
cd_classe_material_w			bigint;
nr_seq_regra_w				bigint;
nr_seq_congenere_w			bigint;
cd_material_w				integer;
cd_estabelecimento_w			smallint;
ie_tipo_contrato_w			pls_intercambio.ie_tipo_contrato%type;
nr_seq_segurado_w			pls_segurado.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	a.nr_seq_pacote_agrup
	from	pls_pacote_agrup_fat	b,
		pls_pac_agrup_fat_proc	a
	where	b.nr_sequencia	= a.nr_seq_pacote_agrup
	and	((b.ie_tipo_intercambio = ie_tipo_intercambio_w) or (coalesce(b.ie_tipo_intercambio, 'A') = 'A'))
	and	((coalesce(a.cd_grupo_proc::text, '') = '') or (a.cd_grupo_proc = cd_grupo_proc_w))
	and	((coalesce(a.cd_especialidade::text, '') = '') or (a.cd_especialidade = cd_especialidade_w))
	and	((coalesce(a.cd_area_procedimento::text, '') = '') or (a.cd_area_procedimento = cd_area_procedimento_w))
	and	((coalesce(a.cd_tipo_procedimento::text, '') = '') or (a.cd_tipo_procedimento = cd_tipo_procedimento_w))
	and	((coalesce(a.cd_procedimento::text, '') = '') or (a.cd_procedimento = cd_procedimento_p AND a.ie_origem_proced = ie_origem_proced_p))
	and	trunc(clock_timestamp()) between trunc(coalesce(b.dt_inicio_vigencia,clock_timestamp())) and coalesce(b.dt_fim_vigencia,clock_timestamp())
	order by
		coalesce(a.cd_grupo_proc, 0),
		coalesce(a.cd_especialidade, 0),
		coalesce(a.cd_area_procedimento, 0),
		coalesce(a.cd_tipo_procedimento, 0),
		coalesce(b.ie_tipo_intercambio, 'A');

C02 CURSOR FOR
	SELECT	a.nr_seq_pacote_agrup
	from	pls_pacote_agrup_fat	b,
		pls_pac_agrup_fat_mat	a
	where	b.nr_sequencia	= a.nr_seq_pacote_agrup
	and	((b.ie_tipo_intercambio = ie_tipo_intercambio_w) or (coalesce(b.ie_tipo_intercambio, 'A') = 'A'))
	and	((a.cd_grupo_material = cd_grupo_material_w) or (coalesce(a.cd_grupo_material::text, '') = ''))
	and	((a.cd_subgrupo_material = cd_subgrupo_material_w) or (coalesce(a.cd_subgrupo_material::text, '') = ''))
	and	((a.cd_classe_material = cd_classe_material_w) or (coalesce(a.cd_classe_material::text, '') = ''))
	and	((a.ie_tipo_despesa = ie_tipo_despesa_w) or (coalesce(a.ie_tipo_despesa::text, '') = ''))
	and	((a.cd_material = cd_material_w) or (coalesce(a.cd_material::text, '') = ''))
	and	((a.nr_seq_material = nr_seq_material_p) or (coalesce(a.nr_seq_material::text, '') = ''))
	and	trunc(clock_timestamp()) between trunc(coalesce(b.dt_inicio_vigencia,clock_timestamp())) and coalesce(b.dt_fim_vigencia,clock_timestamp())
	order by
		coalesce(a.cd_classe_material, 0),
		coalesce(a.cd_subgrupo_material, 0),
		coalesce(a.cd_grupo_material, 0),
		coalesce(a.ie_tipo_despesa, ' '),
		coalesce(b.ie_tipo_intercambio, 'A');


BEGIN
cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;

if (coalesce(cd_estabelecimento_w::text, '') = '') then
	select	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	pls_outorgante;
end if;

select	coalesce(max(c.nr_seq_ops_congenere), max(c.nr_seq_congenere)),
	max(c.nr_sequencia)
into STRICT	nr_seq_congenere_w,
	nr_seq_segurado_w
from	pls_segurado		c,
	pls_conta		b
where	c.nr_sequencia	= b.nr_seq_segurado
and	b.nr_sequencia	= nr_seq_conta_p;

if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
	select	max(a.ie_tipo_contrato)
	into STRICT	ie_tipo_contrato_w
	from	pls_intercambio a,
		pls_contrato_pagador b,
		pls_segurado c
	where	a.nr_sequencia	= b.nr_seq_pagador_intercambio
	and	b.nr_sequencia	= c.nr_seq_pagador
	and	c.nr_sequencia	= nr_seq_segurado_w;
end if;

if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '') then
	if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
		/* Obter a UF da operadora  - Tasy*/

		select	coalesce(max(sg_estado),'X')
		into STRICT	sg_estado_w
		from	pessoa_juridica
		where	cd_cgc	=	(SELECT	max(cd_cgc_outorgante)
					from	pls_outorgante
					where	cd_estabelecimento	= cd_estabelecimento_w);

		/* Obter a UF da operadora do beneficiário eventual ou que enviou o protocolo*/

		select	coalesce(max(a.sg_estado),'X')
		into STRICT	sg_estado_int_w
		from	pessoa_juridica	a,
			pls_congenere	b
		where	a.cd_cgc	= b.cd_cgc
		and	b.nr_sequencia	= nr_seq_congenere_w;

		if (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
			if (sg_estado_w	= sg_estado_int_w) then
				ie_tipo_intercambio_w	:= 'E';
			else
				ie_tipo_intercambio_w	:= 'N';
			end if;
		else
			ie_tipo_intercambio_w	:= 'A';
		end if;
	end if;

	-- Quando for PEA, tem que tratar como Nacional
	if (ie_tipo_contrato_w = 'S') then
		ie_tipo_intercambio_w	:= 'N';
	end if;

	SELECT * FROM pls_obter_estrut_proc(	cd_procedimento_p, ie_origem_proced_p, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_ret_w) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_ret_w;

	select	max(a.cd_tipo_procedimento)
	into STRICT	cd_tipo_procedimento_w
	from	procedimento	a
	where	a.cd_procedimento	= cd_procedimento_p
	and	a.ie_origem_proced	= ie_origem_proced_ret_w;

	open C01;
	loop
	fetch C01 into
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		nr_seq_regra_p	:= nr_seq_regra_w;
		end;
	end loop;
	close C01;
elsif (nr_seq_material_p IS NOT NULL AND nr_seq_material_p::text <> '') then
	select	coalesce(max(b.ie_tipo_despesa), 'X'),
		coalesce(max(b.cd_material), 0)
	into STRICT	ie_tipo_despesa_w,
		cd_material_w
	from	pls_material	b
	where	b.nr_sequencia = nr_seq_material_p;

	if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
		/* Obter a UF da operadora  - Tasy*/

		select	coalesce(max(sg_estado),'X')
		into STRICT	sg_estado_w
		from	pessoa_juridica
		where	cd_cgc	=	(SELECT	max(cd_cgc_outorgante)
					from	pls_outorgante
					where	cd_estabelecimento	= cd_estabelecimento_w);

		/* Obter a UF da operadora do beneficiário eventual ou que enviou o protocolo*/

		select	coalesce(max(a.sg_estado),'X')
		into STRICT	sg_estado_int_w
		from	pessoa_juridica	a,
			pls_congenere	b
		where	a.cd_cgc	= b.cd_cgc
		and	b.nr_sequencia	= nr_seq_congenere_w;

		if (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
			if (sg_estado_w	= sg_estado_int_w) then
				ie_tipo_intercambio_w	:= 'E';
			else
				ie_tipo_intercambio_w	:= 'N';
			end if;
		else
			ie_tipo_intercambio_w	:= 'A';
		end if;
	end if;

	-- Quando for PEA, tem que tratar como Nacional
	if (ie_tipo_contrato_w = 'S') then
		ie_tipo_intercambio_w	:= 'N';
	end if;

	if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then
		select	max(a.cd_classe_material)
		into STRICT	cd_classe_material_w
		from	material	a
		where	a.cd_material	= cd_material_w;

		cd_grupo_material_w	:= obter_estrutura_material(cd_material_w, 'G');
		cd_subgrupo_material_w	:= obter_estrutura_material(cd_material_w, 'S');
	end if;

	open C02;
	loop
	fetch C02 into
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		nr_seq_regra_p	:= nr_seq_regra_w;
		end;
	end loop;
	close C02;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obter_regra_pacote_fatura ( nr_seq_conta_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_material_p bigint, nr_seq_regra_p INOUT bigint) FROM PUBLIC;

