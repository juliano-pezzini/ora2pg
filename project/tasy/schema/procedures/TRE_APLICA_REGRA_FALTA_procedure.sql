-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tre_aplica_regra_falta (dt_registro_p timestamp, nr_seq_inscrito_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_seq_evento_w		bigint;
nr_seq_curso_w		bigint;
ie_falta_consecutiva_w	varchar(1);
pr_faltas_permitida_w	bigint;
qt_faltas_permitida_w	bigint;
dt_inicio_w		timestamp;
dt_final_w		timestamp;
qt_falta_w		bigint := 0;
qt_pac_faltou_w		bigint;
qt_pac_bloq_w		bigint;
dt_ini_bloqueio_w	timestamp;
dt_fim_bloqueio_w	timestamp;
qt_falta_pr_w		bigint := 0;
qt_aula_w		bigint := 0;
qt_pr_falta_w		bigint := 0;
qt_possui_aula_w	bigint := 0;
ie_continua_w		varchar(1) := 'S';
pr_falta_w		double precision := 0;
ie_suspender_tre_w	varchar(1);
cd_pessoa_fisica_w	varchar(10);
nr_seq_inscrito_w	bigint;

C01 CURSOR FOR
	SELECT	distinct b.nr_sequencia
	from	tre_evento a,
		tre_inscrito b
	where	a.nr_sequencia = b.nr_seq_evento
	and	b.cd_pessoa_fisica = cd_pessoa_fisica_w
	and	coalesce(a.dt_fim_real,a.dt_fim) >= clock_timestamp()
	and	not exists (	SELECT	1
				from	tre_agenda c
				where	c.nr_sequencia = a.nr_seq_agenda
				and	(c.dt_cancelamento IS NOT NULL AND c.dt_cancelamento::text <> ''));



BEGIN
select	max(nr_seq_evento),
        max(cd_pessoa_fisica)
into STRICT	nr_seq_evento_w ,
        cd_pessoa_fisica_w
from	tre_inscrito
where	nr_Sequencia = nr_seq_inscrito_p;


select	max(nr_seq_curso),
	max(dt_inicio),
	max(fim_dia(tre_obter_ultima_data_presenca(nr_sequencia)))
into STRICT	nr_seq_curso_w,
	dt_inicio_w,
	dt_final_w
from	tre_evento
where	nr_sequencia = nr_seq_evento_w;

select	max(a.ie_falta_consecutiva),
	max(a.pr_faltas_permitida),
	max(a.qt_faltas_permitida),
	max(a.ie_susp_treinamento)
into STRICT	ie_falta_consecutiva_w,
	pr_faltas_permitida_w,
	qt_faltas_permitida_w,
	ie_suspender_tre_w
from	tre_tipo a,
	tre_curso b
where	a.nr_sequencia = b.nr_seq_tipo
and	b.nr_sequencia = nr_seq_curso_w;

select	count(*)
into STRICT	qt_pac_bloq_w
from	tre_inscrito_bloqueio
where	nr_seq_inscrito = nr_seq_inscrito_p;

if (qt_pac_bloq_w > 0) then
	select	max(dt_fim_bloqueio)
	into STRICT	dt_fim_bloqueio_w
	from	tre_inscrito_bloqueio
	where	nr_seq_inscrito = nr_seq_inscrito_p
	and	dt_ini_bloqueio = (SELECT	max(dt_ini_bloqueio)
				from	tre_inscrito_bloqueio
				where	nr_seq_inscrito = nr_seq_inscrito_p);
else
	dt_fim_bloqueio_w := clock_timestamp();
end if;

while(dt_inicio_w <= dt_final_w) and (ie_continua_w = 'S') loop
	begin

	select	count(*)
	into STRICT	qt_possui_aula_w
	from	tre_inscrito b,
		tre_evento c
	where	b.nr_seq_evento = c.nr_sequencia
	and	((tre_valida_se_dia_curso(c.nr_sequencia,fim_dia(dt_inicio_w)) = 'S') or ((tre_obter_dados_pac_dia(b.nr_sequencia,dt_inicio_w,'CA'))::numeric  > 0))
	and (substr(tre_obter_se_data_fim_valida(dt_inicio_w,c.nr_sequencia,c.dt_fim_real,c.dt_fim),1,1) = 'S')
	and	fim_dia(dt_inicio_w) >= c.dt_inicio
	and (obter_se_feriado(cd_estabelecimento_p, dt_inicio_w) = 0)
	and	((dt_inicio_w >= dt_fim_bloqueio_w) or (qt_pac_bloq_w = 0))
	and	b.nr_sequencia = nr_seq_inscrito_p
	and	not exists (	SELECT	1
				from	tre_agenda v
				where	v.nr_sequencia = c.nr_seq_agenda
				and	(v.DT_CANCELAMENTO IS NOT NULL AND v.DT_CANCELAMENTO::text <> ''));

	if (qt_possui_aula_w > 0) then
		qt_aula_w := qt_aula_w + 1;

		select	count(*)
		into STRICT	qt_pac_faltou_w
		from	tre_inscrito b,
			tre_evento c
		where	b.nr_seq_evento = c.nr_sequencia
		and	((tre_valida_se_dia_curso(c.nr_sequencia,fim_dia(dt_inicio_w)) = 'S') or ((tre_obter_dados_pac_dia(b.nr_sequencia,dt_inicio_w,'CA'))::numeric  > 0))
		and (substr(tre_obter_se_data_fim_valida(dt_inicio_w,c.nr_sequencia,c.dt_fim_real,c.dt_fim),1,1) = 'S')
		and	fim_dia(dt_inicio_w) >= c.dt_inicio
		and (obter_se_feriado(cd_estabelecimento_p, dt_inicio_w) = 0)
		and	((dt_inicio_w >= dt_fim_bloqueio_w) or (qt_pac_bloq_w = 0))
		and	b.nr_sequencia = nr_seq_inscrito_p
		and	tre_obter_dados_pac_dia(b.nr_sequencia,dt_inicio_w,'SP') = 'I'
		and	not exists (	SELECT	1
					from	tre_agenda v
					where	v.nr_sequencia = c.nr_seq_agenda
					and	(v.DT_CANCELAMENTO IS NOT NULL AND v.DT_CANCELAMENTO::text <> ''));

		qt_pr_falta_w := qt_pr_falta_w + qt_pac_faltou_w;

		if (ie_falta_consecutiva_w = 'S') then
			if (qt_pac_faltou_w > 0) then
				qt_falta_w	:= qt_falta_w + 1;
			else
				qt_falta_w 	:= 0;
			end if;

			if (qt_falta_w > qt_faltas_permitida_w) then
				CALL tre_altera_bloqueio_inscrito(nr_seq_inscrito_p,dt_registro_p,'B',nm_usuario_p,'S');

				if (ie_suspender_tre_w = 'S') then

					open C01;
					loop
					fetch C01 into
						nr_seq_inscrito_w;
					EXIT WHEN NOT FOUND; /* apply on C01 */
						begin

						CALL tre_altera_bloqueio_inscrito(nr_seq_inscrito_w,dt_registro_p,'B',nm_usuario_p,'S');
						end;
					end loop;
					close C01;
				end if;

				ie_continua_w := 'N';
			end if;
		else
			if (qt_pac_faltou_w > 0) then
				qt_falta_w  := qt_falta_w + 1;
			end if;

			if (qt_falta_w > qt_faltas_permitida_w) then
				CALL tre_altera_bloqueio_inscrito(nr_seq_inscrito_p,dt_registro_p,'B',nm_usuario_p,'S');

				if (ie_suspender_tre_w = 'S') then

					open C01;
					loop
					fetch C01 into
						nr_seq_inscrito_w;
					EXIT WHEN NOT FOUND; /* apply on C01 */
						begin

						CALL tre_altera_bloqueio_inscrito(nr_seq_inscrito_w,dt_registro_p,'B',nm_usuario_p,'S');
						end;
					end loop;
					close C01;
				end if;

				ie_continua_w := 'N';
			end if;
		end if;
	end if;
	dt_inicio_w := dt_inicio_w + 1;

	end;
end loop;

if (qt_aula_w = 0) then
	qt_aula_w := 1;
end if;

pr_falta_w := round((qt_pr_falta_w * 100) / qt_aula_w,2);


if (pr_faltas_permitida_w IS NOT NULL AND pr_faltas_permitida_w::text <> '') and (pr_falta_w > pr_faltas_permitida_w) and (ie_continua_w = 'S')then
	CALL tre_altera_bloqueio_inscrito(nr_seq_inscrito_p,dt_registro_p,'B',nm_usuario_p,'S');

	if (ie_suspender_tre_w = 'S') then

		open C01;
		loop
		fetch C01 into
			nr_seq_inscrito_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			CALL tre_altera_bloqueio_inscrito(nr_seq_inscrito_w,dt_registro_p,'B',nm_usuario_p,'S');
			end;
		end loop;
		close C01;
	end if;

end if;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tre_aplica_regra_falta (dt_registro_p timestamp, nr_seq_inscrito_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

