-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fechar_caixa_receb ( nr_seq_caixa_rec_p bigint, ie_troco_p text, nm_usuario_p text, vl_troco_p INOUT bigint, dt_fechamento_p timestamp, ie_commit_p text default 'S') AS $body$
DECLARE


ie_alterar_pagador_eup_w	varchar(20);				
ie_receb_sem_tit_w		varchar(255);
ds_observacao_w			varchar(255);
ds_historico_w			varchar(255);
nr_doc_adiant_w			varchar(255);
nr_doc_baixa_w			varchar(22);
cd_cgc_w			varchar(14);
cd_pessoa_fisica_w		varchar(10);
vl_parametro_w			varchar(10);
ie_acao_duplic_w		varchar(3)	:= 'N';
ie_tipo_movto_w			varchar(2);
ie_obs_historico		varchar(1);
ie_consiste_cpf_w		varchar(1);
ie_consistir_recibo_w		varchar(1);
ie_pls_w			varchar(1);
vl_restante_w			double precision;
vl_transacao_w			double precision;
vl_base_imposto_w		double precision;
vl_saldo_titulo_w		double precision;
vl_recebido_w			double precision;
nr_seq_trans_fin_especie_w	bigint;
nr_adiantamento_w		bigint:= null;
nr_seq_trans_financ_w		bigint;
nr_documento_w			bigint;
nr_seq_saldo_caixa_w		bigint;
nr_seq_caixa_w			bigint;
nr_sequencia_w			bigint;
nr_seq_lote_w			bigint;
nr_seq_trans_troco_w		bigint;
nr_seq_especie_cr_w		bigint;
nr_recibo_w			bigint;
nr_titulo_w			bigint;
nr_seq_caixa_rec_w		bigint;
cont_w				bigint;
qtd_docto_branco_w		bigint;
nr_seq_negociacao_cr_w		bigint;
nr_seq_mensalidade_w		bigint;
nr_seq_trans_financ_receb_w	bigint;
qt_sem_cpf_w			bigint;
qt_sem_passaporte_w bigint;
nr_ultimo_recibo_w		bigint;
nr_seq_regra_w			bigint;
nr_seq_pagador_w		bigint;
cd_centro_custo_w		integer;
qt_sem_trans_financ_w		integer;
qt_lote_aberto_w		integer;
cd_tipo_recebimento_w		integer;
nr_seq_baixa_w			integer;
nr_sequencia_baixa_w		integer;
ie_tipo_consistencia_w		integer;
cd_estabelecimento_w		smallint;
ie_acao_w			smallint;
ie_lock_caixa_receb_w		smallint := 0;
dt_fechamento_w			timestamp;
dt_recebimento_w		timestamp;
dt_fechamento_saldo_w		timestamp;
dt_saldo_caixa_w		timestamp;
dt_cancelamento_w		timestamp;
dt_contabil_w			timestamp;
ie_rps_caixa_receb_w		varchar(1);
nr_rps_atual_w			bigint;
nr_rps_w			bigint;
vl_recebimento_w		double precision;
vl_titulo_w			double precision;
nr_seq_cob_previa_w		bigint;
cd_tipo_receb_tit_rec_w		bigint;
ie_receb_caixa_w		varchar(2);
cd_tipo_receb_caixa_w		integer;
nr_interno_conta_w		bigint;
nr_atendimento_w		bigint;
ds_interno_conta_w		varchar(255);
ds_atendimento_w		varchar(255);
ie_atualiza_w			varchar(1);
nr_adiant_receb_w		bigint;
vl_regra_ger_nc_w		double precision;
ie_situacao_tit_regra_w		varchar(5);
ie_situacao_tit_w		varchar(5);
ie_param_w			varchar(1);
vl_troco_informado_w		double precision;
ie_acao_caixa_w			varchar(10);
ie_status_adiant_w		varchar(1);
vl_saldo_adiant_w		double precision;
ds_titulos_contab_w		varchar(4000);
nr_titulo_contab_w		bigint;
ie_dt_contab_dt_receb_w		varchar(1);
ds_macro_w			varchar(255);
nr_seq_liq_origem_w		titulo_receber_liq.nr_seq_liq_origem%type;
vl_troco_restante_w		double precision;
ie_devo_adiant_w		varchar(1);
vl_saldo_adiant_atual_w		adiantamento.vl_saldo%type;
nr_seq_trans_pix_w      parametro_tesouraria.nr_seq_pix_cr%type;
nr_seq_banco_saldo_w banco_saldo.nr_sequencia%type;
/* Projeto Multimoeda - Variaveis */

ie_cotacao_diferente_w		varchar(1);
vl_transacao_estrang_w		double precision;
vl_complemento_w		double precision;
vl_cotacao_w			cotacao_moeda.vl_cotacao%type;
cd_moeda_w			integer;
vl_recebido_estrang_w		double precision;
vl_saldo_adiant_est_w		double precision;
ie_saldo_estrang_w		varchar(1);
ie_troca_valores_w		varchar(1) := 'N';
nr_seq_trans_trc_val_w		bigint;
ie_caixa_trc_w			varchar(1);
ie_saldo_trc_w			varchar(1);
ie_gerar_classif_cc_w	varchar(1);
ie_dev_adiant_negativo_w	transacao_financeira.ie_dev_adiant_negativo%type;
nr_seq_movto_w 			movto_cartao_cr.nr_sequencia%type;
cd_estab_movto_w		movto_cartao_cr.cd_estabelecimento%type;
nr_seq_trans_financ_deposito_w	parametro_tesouraria.nr_seq_trans_financ_deposito%type;
	
C01 CURSOR FOR
	/* Especie */

	SELECT	'E',
		coalesce(nr_seq_trans_fin_especie_w, nr_seq_especie_cr_w),
		vl_especie,
		(null)::numeric ,
		(null)::numeric ,
		null,
		null cd_centro_custo,
		null nr_seq_liq_origem,
		(null)::numeric  vl_especie_estrang,
		(null)::numeric  vl_cotacao,
		(null)::numeric  cd_moeda
	from	caixa_receb
	where	nr_sequencia	= nr_seq_caixa_rec_p
	and	vl_especie > 0
	
union all

	SELECT	'E',
		coalesce(nr_seq_trans_fin_especie_w, nr_seq_especie_cr_w),
		a.vl_especie,
		(null)::numeric ,
		(null)::numeric ,
		null,
		null cd_centro_custo,
		null nr_seq_liq_origem,
		a.vl_especie_estrang,
		a.vl_cotacao,
		a.cd_moeda
	from	caixa_receb_estrang a
	where	a.nr_seq_caixa_receb = nr_seq_caixa_rec_p
	and	a.vl_especie_estrang > 0
	
union all

	/* Titulos */

	select	'B',
		nr_seq_trans_caixa,
		vl_recebido + coalesce(vl_juros,0) + coalesce(vl_multa,0) + coalesce(vl_despesa_bancaria,0) + coalesce(vl_glosa,0),
		nr_titulo,
		nr_sequencia,
		null,
		cd_centro_custo,
		nr_seq_liq_origem,
		vl_recebido_estrang,
		vl_cotacao,
		cd_moeda
	from	titulo_receber_liq
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	and	ie_param_w = 'N'
	
union all

	/* Titulos c/ acrescimos*/

	select	'B',
		nr_seq_trans_caixa,
		vl_recebido + coalesce(vl_juros,0) + coalesce(vl_multa,0) + coalesce(vl_despesa_bancaria,0) + coalesce(vl_glosa,0) + coalesce(vl_outros_acrescimos,0),
		nr_titulo,
		nr_sequencia,
		null,
		cd_centro_custo,
		nr_seq_liq_origem,
		vl_recebido_estrang,
		vl_cotacao,
		cd_moeda
	from	titulo_receber_liq
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	and	ie_param_w = 'S'
	
union all

	/* Adiantamento */

	select	'A',
		nr_seq_trans_caixa,
		vl_adiantamento,
		nr_adiantamento,
		(null)::numeric ,
		nr_documento,
		null cd_centro_custo,
		null nr_seq_liq_origem,
		vl_adto_estrang,
		vl_cotacao,
		cd_moeda
	from	adiantamento
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	
union all

	/* Cheque */
	
	select	'CH',
		nr_seq_trans_caixa,
		vl_cheque,
		nr_seq_cheque,
		(null)::numeric ,
		null,
		null cd_centro_custo,
		null nr_seq_liq_origem,
		vl_cheque_estrang,
		vl_cotacao,
		cd_moeda
	from	cheque_cr
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	
union all

	/* Cartao */

	select	'CA',
		nr_seq_trans_caixa,
		vl_transacao,
		nr_sequencia,
		(null)::numeric ,
		null,
		null cd_centro_custo,
		null nr_seq_liq_origem,
		(null)::numeric  vl_transacao_estrang,
		(null)::numeric  vl_cotacao,
		(null)::numeric  cd_moeda
	from	movto_cartao_cr
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	and	coalesce(dt_cancelamento::text, '') = ''
	and ((dt_confirmacao_tef IS NOT NULL AND dt_confirmacao_tef::text <> '') or coalesce(dt_integracao_tef::text, '') = '')
	
union all

	/* Pix */

	select 	'P',
		nr_seq_trans_pix_w,
		vl_recebido,
		nr_sequencia,
		(null)::numeric ,
		null,
		null cd_centro_custo,
		null nr_seq_liq_origem,
		(null)::numeric  vl_transacao_estrang,
		(null)::numeric  vl_cotacao,
		(null)::numeric  cd_moeda
	from 	pix_cobranca
	where 	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	and     ds_status = 'CONCLUIDA'
	
union all

	select	'AP',
		nr_seq_trans_fin,
		vl_adiantamento,
		nr_adiantamento,
		(null)::numeric ,
		null,
		null cd_centro_custo,
		null nr_seq_liq_origem,
		vl_adto_estrang,
		vl_cotacao,
		cd_moeda
	from	adiantamento_pago
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	
union all

	/* Troco */

	select	'T',
		nr_seq_trans_troco_w,
		abs(vl_troco_p),
		(null)::numeric ,
		(null)::numeric ,
		null,
		null cd_centro_custo,
		null nr_seq_liq_origem,
		null vl_transacao_estrang,
		null vl_cotacao,
		null cd_moeda
	
	where	vl_troco_p < 0
	
union all

	/* Deposito Direto */

	select	'DD',
		nr_seq_trans_financ_deposito_w,
		coalesce(vl_deposito_direto,0), --Esse campo nao e obrigatorio e nem pode ser neste momento pois eh apenas para uma localizacao, por isso nvl
		(null)::numeric ,
		(null)::numeric ,
		null,
		null cd_centro_custo,
		null nr_seq_liq_origem,
		(null)::numeric  vl_especie_estrang,
		(null)::numeric  vl_cotacao,
		(null)::numeric  cd_moeda
	from	caixa_receb
	where	nr_sequencia	= nr_seq_caixa_rec_p
	and	coalesce(vl_deposito_direto,0) > 0;

/* Cursor para atualizar saldos dos titulos */

C02 CURSOR FOR
	SELECT	a.nr_titulo,
		a.nr_sequencia,
		b.ie_tipo_consistencia,
		c.nr_seq_mensalidade,
		coalesce(c.ie_pls,'N'),
		a.vl_recebido,
		c.vl_saldo_titulo,
		c.nr_seq_cob_previa
	from	titulo_receber c,
		tipo_recebimento b,
		titulo_receber_liq a
	where	a.cd_tipo_recebimento	= b.cd_tipo_recebimento
	and	a.nr_titulo		= c.nr_titulo
	and	a.nr_seq_caixa_rec	= nr_seq_caixa_rec_p;

/* Cursor para atualizar saldos dos adiantamentos */

C03 CURSOR FOR
	SELECT	distinct nr_adiantamento,
		vl_cotacao
	from	titulo_receber_liq
	where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p
	and	(nr_adiantamento IS NOT NULL AND nr_adiantamento::text <> '');
	
C04 CURSOR FOR
	SELECT 	b.nr_interno_conta,
		b.nr_atendimento
	from	titulo_receber_liq a,
		titulo_receber b
	where	a.nr_titulo = b.nr_titulo
	and 	a.nr_seq_caixa_rec = nr_seq_caixa_rec_p
	
union

	SELECT	null,
			b.nr_atendimento
	from	adiantamento b
	where   b.nr_seq_caixa_rec = nr_seq_caixa_rec_p;

c05 CURSOR FOR
SELECT	a.nr_adiantamento,
	a.vl_saldo,
	a.vl_saldo_estrang,
	a.vl_cotacao,
	a.cd_moeda
from	adiantamento a
where	a.nr_seq_caixa_rec	= nr_seq_caixa_rec_p
order by	a.vl_saldo;

c06 CURSOR FOR
SELECT 	nr_sequencia,
	cd_estabelecimento
from	movto_cartao_cr
where	nr_seq_caixa_rec = nr_seq_caixa_rec_p;
	

BEGIN
/*-- Edgar 29/01/2008
lock table caixa_receb in exclusive mode;
lock table movto_trans_financ in exclusive mode;
Francisco - 30/04/2008 - OS 91526 - Troquei abaixo para lockar somente os registros em uso */
ie_param_w := Obter_Param_Usuario(813, 163, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_param_w);
ie_devo_adiant_w := Obter_Param_Usuario(813, 195, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_devo_adiant_w);
ie_gerar_classif_cc_w := Obter_Param_Usuario(813, 202, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_gerar_classif_cc_w);

select	max(nr_sequencia),
	max(nr_seq_trans_financ),
	max(nr_seq_negociacao_cr),
	max(nr_recibo),
	max(cd_tipo_receb_caixa),
	coalesce(max(vl_troco_informado),0)
into STRICT	nr_seq_caixa_rec_w,
	nr_seq_trans_financ_receb_w,
	nr_seq_negociacao_cr_w,
	nr_recibo_w,
	cd_tipo_receb_caixa_w,
	vl_troco_informado_w
from	caixa_receb
where	nr_sequencia	= nr_seq_caixa_rec_p;

if (coalesce(cd_tipo_receb_caixa_w,0) <> 0) then
	select	max(ie_acao_rec_caixa)
	into STRICT	ie_acao_caixa_w
	from	tipo_recebimento
	where	cd_tipo_recebimento = cd_tipo_receb_caixa_w;
else
	select	max(ie_acao),
		max(ie_troca_valores)
	into STRICT	ie_acao_caixa_w,
		ie_troca_valores_w
	from	transacao_financeira
	where	nr_sequencia	= nr_seq_trans_financ_receb_w;
end if;

/* Francisco - 16/03/2010 - Consistir negociacao */

if (nr_seq_negociacao_cr_w IS NOT NULL AND nr_seq_negociacao_cr_w::text <> '') then
	CALL consistir_receb_negociacao_cr(nr_seq_caixa_rec_p,nm_usuario_p);
end if;

if (coalesce(nr_seq_caixa_rec_w::text, '') = '') then
	--r.aise_application_error(-20011,'Este recebimento ja foi cancelado!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179764);
end if;

select	1
into STRICT	ie_lock_caixa_receb_w
from	caixa_receb
where	nr_sequencia	= nr_seq_caixa_rec_p
for	update;

vl_troco_p	:= 0;

select	count(*)
into STRICT	qt_sem_trans_financ_w
from	titulo_receber_liq
where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
and	coalesce(nr_seq_trans_caixa::text, '') = '';

if (qt_sem_trans_financ_w > 0) then
	--r.aise_application_error(-20011,'Existem baixas sem transacao informada!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179765);
else
	select	count(*)
	into STRICT	qt_sem_trans_financ_w
	from	adiantamento
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	and	coalesce(nr_seq_trans_caixa::text, '') = '';

	if (qt_sem_trans_financ_w > 0) then
		--r.aise_application_error(-20011,'Existem adiantamentos sem transacao informada!');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(179766);
	else
		select	count(*)
		into STRICT	qt_sem_trans_financ_w
		from	cheque_cr
		where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
		and	coalesce(nr_seq_trans_caixa::text, '') = '';

		if (qt_sem_trans_financ_w > 0) then
			--r.aise_application_error(-20011,'Existem cheques sem transacao informada!');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(179767);
		else
			select	count(*)
			into STRICT	qt_sem_trans_financ_w
			from	movto_cartao_cr
			where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
			and	coalesce(nr_seq_trans_caixa::text, '') = ''
			and	coalesce(dt_cancelamento::text, '') = ''
			and ((dt_confirmacao_tef IS NOT NULL AND dt_confirmacao_tef::text <> '') or coalesce(dt_integracao_tef::text, '') = '');
		
			if (qt_sem_trans_financ_w > 0) then
				--r.aise_application_error(-20011,'Existem cartoes sem transacao informada!');
				CALL wheb_mensagem_pck.exibir_mensagem_abort(179768);
			else
				select  count(*)
				into STRICT    qt_sem_trans_financ_w
				from    pix_cobranca
				where   ds_status in ('NAO_REGISTRADA','ATIVA')
				and     nr_seq_caixa_rec = nr_seq_caixa_rec_p;
				
				if (qt_sem_trans_financ_w > 0) then
					--r.aise_application_error(-20011, 'Existem cobrancas pix em aberto, favor verificar o recebimento ou realizar o cancelamento')
					CALL wheb_mensagem_pck.exibir_mensagem_abort(1187999);
				end if;
			end if;
		end if;
	end if;
end if;

select	obter_valores_caixa_rec(nr_seq_caixa_rec_p,'VR')
into STRICT	vl_restante_w
;

if (vl_restante_w > 0) then
	--r.aise_application_error(-20011,'O valor monetario eh inferior ao valor dos documentos!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179769);
elsif (vl_troco_informado_w > 0) then
	vl_troco_p	:= vl_troco_informado_w * -1;
elsif (vl_restante_w < 0) then
	vl_troco_p	:= vl_restante_w;
end if;

/* Projeto Multimoeda - Transacao de troca de valores nao permite troco */

if (coalesce(ie_troca_valores_w,'N') = 'S') then
	if (coalesce(vl_troco_p,0) <> 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(353482);
	end if;
end if;

select	a.dt_fechamento,
	a.dt_recebimento,
	b.nr_sequencia,
	b.nr_seq_caixa,
	a.cd_pessoa_fisica,
	a.cd_cgc,
	a.ds_observacao
into STRICT	dt_fechamento_w,
	dt_recebimento_w,
	nr_seq_saldo_caixa_w,
	nr_seq_caixa_w,
	cd_pessoa_fisica_w,
	cd_cgc_w,
	ds_observacao_w
from	caixa_saldo_diario b,
	caixa_receb a
where	a.nr_seq_saldo_caixa	= b.nr_sequencia
and	a.nr_sequencia		= nr_seq_caixa_rec_p;

/* Nao deixar fechar em data diferente */

if (trunc(dt_recebimento_w,'dd') <> trunc(coalesce(dt_fechamento_p,clock_timestamp()),'dd')) then
	--r.aise_application_error(-20011,'A data de fechamento do recebimento precisa ser no mesmo dia que a data de abertura do mesmo!' || '#@#@');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179770);
end if;

select	a.dt_fechamento,
	a.dt_saldo,
	b.cd_estabelecimento,
	b.nr_seq_trans_fin_especie
into STRICT	dt_fechamento_saldo_w,
	dt_saldo_caixa_w,
	cd_estabelecimento_w,
	nr_seq_trans_fin_especie_w
from	caixa b,
	caixa_saldo_diario a
where	a.nr_seq_caixa	= b.nr_sequencia
and	a.nr_sequencia	= nr_seq_saldo_caixa_w;

ie_consistir_recibo_w := obter_param_usuario(813, 111, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_consistir_recibo_w);

/* ahoffelder - OS 322076 - 24/05/2011 - coloquei esse if porque, quando ha sobra no recimento o Delphi
					 chama essa procedure duas vezes, e antes atualizava o recibo duas vezes */
if	((ie_troco_p = 'N' and vl_troco_p = 0) or ie_troco_p = 'S') then
	nr_recibo_w := Obter_Recibo_Caixa(nr_seq_caixa_rec_p, nr_recibo_w, nm_usuario_p);

	if (ie_consistir_recibo_w = 'S') then	/* ahoffelder - OS 322076 - 23/05/2011 */
		select	coalesce(max(a.nr_recibo),0) + 1
		into STRICT	nr_ultimo_recibo_w
		from	caixa_receb a
		where	a.nr_sequencia	<> nr_seq_caixa_rec_p;

		if (nr_recibo_w <> nr_ultimo_recibo_w) then
			--r.aise_application_error(-20011,'O numero do recibo esta incorreto! Ele deve ser igual ao numero do ultimo recibo mais um. Parametro [111]');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(179771);
		end if;
	end if;
end if;

ie_obs_historico := Obter_Param_Usuario(813, 71, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_obs_historico);

vl_parametro_w	:= Obter_Valor_Param_Usuario(813, 61, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w);

if (vl_parametro_w = 'S') then
	select 	count(*)
	into STRICT	qtd_docto_branco_w
	from	titulo_receber_liq
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	and	coalesce(nr_documento::text, '') = '';

	if (qtd_docto_branco_w > 0) then
		--r.aise_application_error(-20011, 'Existem documentos em branco para este recebimento de caixa!');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(179772);
	end if;
end if;

begin
select	nr_seq_trans_troco,
	nr_seq_especie_cr,
	ie_receb_sem_tit,
	nr_rps_atual,
	nr_seq_trans_trc_val,
	nr_seq_pix_cr
into STRICT	nr_seq_trans_troco_w,
	nr_seq_especie_cr_w,
	ie_receb_sem_tit_w,
	nr_rps_atual_w,
	nr_seq_trans_trc_val_w,
	nr_seq_trans_pix_w
from	parametro_tesouraria
where	cd_estabelecimento	= cd_estabelecimento_w;
exception
when others then
	--r.aise_application_error(-20011, 'Parametros da tesouraria nao cadastrado para este estabelecimento!' || chr(13) || chr(10) || 'Estabelecimento: ' 

	--				|| cd_estabelecimento_w);
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179773,'CD_ESTABELECIMENTO_W='||cd_estabelecimento_w);
end;

/*OS 2079313 - Select separado do acima devido ao max*/

select	max(nr_seq_trans_financ_deposito)
into STRICT	nr_seq_trans_financ_deposito_w
from	parametro_tesouraria
where	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_receb_sem_tit_w = 'N') then
	select	count(*)
	into STRICT	cont_w
	from	transacao_financeira
	where	nr_sequencia	= nr_seq_trans_financ_receb_w
	and	ie_acao		= 1;
	
	if (cont_w > 0) then
		select	count(*)
		into STRICT	cont_w
		from	titulo_receber_liq
		where	nr_seq_caixa_rec	= nr_seq_caixa_rec_p;
		
		if (cont_w = 0) then
			--r.aise_application_error(-20011,'A transacao financeira deste recebimento exige pelo menos um titulo informado!');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(179774);
		end if;
	end if;
end if;

if (coalesce(coalesce(nr_seq_trans_fin_especie_w, nr_seq_especie_cr_w)::text, '') = '') then
	--r.aise_application_error(-20011,'Nao ha transacao de recebimento em especie cadastrada, verifique os parametros da tesouraria!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179775);
end if;

select	count(*)
into STRICT	qt_lote_aberto_w
from	movto_trans_financ
where	nr_seq_caixa	= nr_seq_caixa_w
and	coalesce(dt_fechamento_lote::text, '') = '';

if (qt_lote_aberto_w > 0) then
	--r.aise_application_error(-20011,'Ja existe um lote aberto para este caixa!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179776);
elsif (dt_fechamento_saldo_w IS NOT NULL AND dt_fechamento_saldo_w::text <> '') then
	--r.aise_application_error(-20011,'O saldo do caixa ja foi fechado!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179777);
elsif (trunc(dt_saldo_caixa_w,'dd') <> trunc(dt_recebimento_w,'dd')) then
	--r.aise_application_error(-20011,'A data de recebimento deve ser a mesma do saldo!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179778);
elsif (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then
	--r.aise_application_error(-20011,'Este recebimento ja foi fechado!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179779);
elsif (dt_cancelamento_w IS NOT NULL AND dt_cancelamento_w::text <> '') then
	--r.aise_application_error(-20011,'Este recebimento ja foi cancelado!');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(179780);
end if;

ie_consiste_cpf_w := Obter_Param_Usuario(813, 76, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_consiste_cpf_w);

ie_receb_caixa_w := Obter_Param_Usuario(813, 140, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_receb_caixa_w);

if (ie_consiste_cpf_w = 'S') then

	select	count(*)
	into STRICT	qt_sem_cpf_w
	from	pessoa_fisica b,
		caixa_receb a
	where	a.nr_sequencia		= nr_seq_caixa_rec_p
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	coalesce(b.nr_cpf::text, '') = '';

  if (qt_sem_cpf_w > 0) then
		--r.aise_application_error(-20011,'A pessoa fisica informada no recebimento nao possui CPF cadastrado! Parametro [76]');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(179781);		
	else
		select	count(*)
		into STRICT	qt_sem_cpf_w
		from	pessoa_fisica c,
			titulo_receber b,
			titulo_receber_liq a
		where	a.nr_seq_caixa_rec	= nr_seq_caixa_rec_p
		and	a.nr_titulo		= b.nr_titulo
		and	b.cd_pessoa_fisica	= c.cd_pessoa_fisica
		and	coalesce(c.nr_cpf::text, '') = '';

		if (qt_sem_cpf_w > 0) then
			--r.aise_application_error(-20011,'Existem titulos de pessoa fisica sem CPF! Parametro [76]');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(179782);
		end if;
	end if;

elsif (ie_consiste_cpf_w = 'P') then

	select	count(*)
	into STRICT	qt_sem_cpf_w
	from	pessoa_fisica b,
		caixa_receb a
	where	a.nr_sequencia		= nr_seq_caixa_rec_p
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	coalesce(b.nr_cpf::text, '') = ''
  and obter_se_brasileiro(a.cd_pessoa_fisica) = 'S';

	select	count(*)
	into STRICT	qt_sem_passaporte_w
	from	pessoa_fisica b,
		caixa_receb a
	where	a.nr_sequencia		= nr_seq_caixa_rec_p
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	coalesce(b.nr_passaporte::text, '') = ''
  and obter_se_brasileiro(a.cd_pessoa_fisica) = 'N';

	if (qt_sem_cpf_w > 0) then
		--r.aise_application_error(-20011,'A pessoa fisica informada no recebimento nao possui CPF cadastrado! Parametro [76]');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(179781);		
	else
		select	count(*)
		into STRICT	qt_sem_cpf_w
		from	pessoa_fisica c,
			titulo_receber b,
			titulo_receber_liq a
		where	a.nr_seq_caixa_rec	= nr_seq_caixa_rec_p
		and	a.nr_titulo		= b.nr_titulo
		and	b.cd_pessoa_fisica	= c.cd_pessoa_fisica
		and	coalesce(c.nr_cpf::text, '') = ''
    and obter_se_brasileiro(b.cd_pessoa_fisica) = 'S';

		if (qt_sem_cpf_w > 0) then
			--r.aise_application_error(-20011,'Existem titulos de pessoa fisica sem CPF! Parametro [76]');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(179782);
		end if;
	end if;

	if (qt_sem_passaporte_w > 0 and ie_consiste_cpf_w = 'P') then
		--r.aise_application_error(-20011,'A pessoa fisica estrangeira nao possui o numero do passaporte informado em seu cadastro! Parametro [76]');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(686388);		
	else
		select	count(*)
		into STRICT	qt_sem_passaporte_w
		from	pessoa_fisica c,
			titulo_receber b,
			titulo_receber_liq a
		where	a.nr_seq_caixa_rec	= nr_seq_caixa_rec_p
		and	a.nr_titulo		= b.nr_titulo
		and	b.cd_pessoa_fisica	= c.cd_pessoa_fisica
		and	coalesce(c.nr_passaporte::text, '') = ''
    and obter_se_brasileiro(b.cd_pessoa_fisica) = 'N';

		if (qt_sem_passaporte_w > 0 and ie_consiste_cpf_w = 'P') then
			--r.aise_application_error(-20011,'Existem titulos de pessoa fisica estrangeira sem numero de passaporte! Parametro [76]');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1108553);
		end if;
	end if;

end if;

SELECT * FROM obter_regra_acao_pag_duplic(dt_recebimento_w, cd_estabelecimento_w, nm_usuario_p, nr_seq_regra_w, ie_acao_duplic_w) INTO STRICT nr_seq_regra_w, ie_acao_duplic_w;

/* Projeto Multimoeda - Verifica se o saldo do caixa permite recebimento em moeda estrangeira */

select	obter_se_saldo_estrang(nr_seq_saldo_caixa)
into STRICT	ie_saldo_estrang_w
from	caixa_receb
where	nr_sequencia = nr_seq_caixa_rec_p;

/* Projeto Multimoeda - Valida a cotacao do recebimento quando houver recebimento em moeda estrangeira */

ie_cotacao_diferente_w := consiste_cotacao_caixa_receb(nr_seq_caixa_rec_p, ie_cotacao_diferente_w);
if (coalesce(ie_cotacao_diferente_w,'N') = 'S') then
	/* Existem cotacoes diferentes para a mesma moeda neste recebimento. Verifique as cotacoes antes de fechar o recebimento. */

	CALL wheb_mensagem_pck.exibir_mensagem_abort(352417);
end if;

/* Projeto Multimoeda - Para caixas que permitam recebimento em moeda estrangeira, sera realizada uma consistencia para verificar
	se existem recebimentos monetarios e de documentos numa mesma moeda. Caso alguma moeda lancada no recebimento nao
	possua recebimentos monetarios e de documentos, o sistema nao deve permitir o fechamento do recebimento. Para caixas 
	que nao realizem recebimentos em moeda estrangeira esta consistencia nao sera executada. */
if (ie_saldo_estrang_w = 'S') then
	CALL consiste_receb_moeda_estrang(nr_seq_caixa_rec_p);
end if;

/* Projeto Multimoeda - Quando for uma troca de valores, verificar se a transacao correspondente esta cadastrada nos parametros 
	da tesouraria. Verificar se a transacao referente a troca de valores eh uma transacao monetaria de saida de caixa. */
if (coalesce(ie_troca_valores_w,'N') = 'S') then
	if (coalesce(nr_seq_trans_trc_val_w::text, '') = '') then
		/* Transacao de troca de valores nao cadastrada nos parametros da tesouraria. */

		CALL wheb_mensagem_pck.exibir_mensagem_abort(353496);
	else
		select	ie_caixa,
			ie_saldo_caixa
		into STRICT	ie_caixa_trc_w,
			ie_saldo_trc_w
		from	transacao_financeira
		where	nr_sequencia = nr_seq_trans_trc_val_w
		and	ie_troca_valores = 'S';
		
		if (coalesce(ie_caixa_trc_w,'N') <> 'M') then
			/* A transacao de troca de valores deve ser uma transacao monetaria. */

			CALL wheb_mensagem_pck.exibir_mensagem_abort(353500);
		end if;
		if (coalesce(ie_saldo_trc_w,'N') <> 'S') then
			/* A transacao de troca de valores deve ser uma transacao de saida de caixa. */

			CALL wheb_mensagem_pck.exibir_mensagem_abort(353501);
		end if;
	end if;
end if;

if	((ie_troco_p = 'N' and vl_troco_p = 0) or ie_troco_p = 'S') then
	select	coalesce(max(nr_seq_lote),0) + 1
	into STRICT	nr_seq_lote_w
	from	movto_trans_financ
	where	nr_seq_caixa	= nr_seq_caixa_w;

	open C01;
	loop
	fetch C01 into
		ie_tipo_movto_w,
		nr_seq_trans_financ_w,
		vl_transacao_w,
		nr_documento_w,
		nr_seq_baixa_w,
		nr_doc_adiant_w,
		cd_centro_custo_w,
		nr_seq_liq_origem_w,
		vl_transacao_estrang_w,
		vl_cotacao_w,
		cd_moeda_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	
		if (ie_tipo_movto_w = 'DD') and (coalesce(vl_transacao_w,0) > 0) and (coalesce(nr_seq_trans_financ_w::text, '') = '') then
			--A transacao financeira de recebimento em deposito direto nao esta informada nos parametros da tesouraria
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1112164);
		end if;

		if (ie_tipo_movto_w = 'E') and (coalesce(nr_seq_trans_financ_w::text, '') = '') then
			--r.aise_application_error(-20011, 'A transacao financeira de recebimento em especie nao esta parametrizada no cadastro dos parametros' ||

			--				' da tesouraria e nem no cadastro do caixa!');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(179783);
		end if;
		
		if (ie_tipo_movto_w = 'E') then
			select 	max(nr_documento)
			into STRICT	nr_doc_baixa_w
			from 	movto_trans_financ
			where 	nr_seq_caixa_rec = nr_seq_caixa_rec_p;		
		end if;	

		if (ie_tipo_movto_w = 'E' and coalesce(ie_troca_valores_w,'N') = 'S') then
			nr_seq_trans_financ_w := nr_seq_trans_trc_val_w;
		end if;

		nr_adiantamento_w	:= null;

		select	nextval('movto_trans_financ_seq')
		into STRICT	nr_sequencia_w
		;

		ds_historico_w	:= '';

		if (ie_tipo_movto_w in ('A','B')) then
			select	cd_tipo_recebimento
			into STRICT	cd_tipo_recebimento_w
			from	transacao_financeira
			where	nr_sequencia	= nr_seq_trans_financ_w;
			
			if (ie_obs_historico = 'S') then
				ds_historico_w	:= ds_observacao_w;
			end if;
		end if;

		if (ie_tipo_movto_w = 'B') then
			select	nr_adiantamento,
				coalesce(vl_recebido,0) + coalesce(vl_glosa,0),
				nr_documento,
				vl_recebido,
				cd_tipo_recebimento,
				vl_recebido_estrang
			into STRICT	nr_adiantamento_w,
				vl_base_imposto_w,
				nr_doc_baixa_w,
				vl_recebido_w,
				cd_tipo_receb_tit_rec_w,
				vl_recebido_estrang_w
			from	titulo_receber_liq
			where	nr_titulo	= nr_documento_w
			and	nr_sequencia	= nr_seq_baixa_w;
			
			select	max(dt_contabil)
			into STRICT	dt_contabil_w
			from	titulo_receber
			where	nr_titulo	=  nr_documento_w;
			
			if (cd_tipo_receb_tit_rec_w IS NOT NULL AND cd_tipo_receb_tit_rec_w::text <> '') and (cd_tipo_receb_tit_rec_w <> cd_tipo_recebimento_w) then
				cd_tipo_recebimento_w	:= cd_tipo_receb_tit_rec_w;
			end if;
			
			if (ie_receb_caixa_w = 'TR') and (cd_tipo_receb_caixa_w IS NOT NULL AND cd_tipo_receb_caixa_w::text <> '') then
			
				cd_tipo_recebimento_w	:= cd_tipo_receb_caixa_w;

				update	titulo_receber_liq
				set	cd_tipo_recebimento	= cd_tipo_receb_caixa_w
				where	nr_titulo		= nr_documento_w
				and	nr_sequencia		= nr_seq_baixa_w;
				
			end if;

			if (nr_adiantamento_w IS NOT NULL AND nr_adiantamento_w::text <> '') and (coalesce(cd_tipo_recebimento_w::text, '') = '') then
				begin
				select	max(cd_tipo_recebimento)
				into STRICT	cd_tipo_recebimento_w
				from	tipo_recebimento
				where	ie_tipo_consistencia	= 7
				and	ie_situacao		= 'A';
				exception
				when no_data_found then
					--r.aise_application_error(-20011,'Nao ha um tipo de recebimento para adiantamento cadastrado!');
					CALL wheb_mensagem_pck.exibir_mensagem_abort(179784);
				end;

				update	titulo_receber_liq
				set	cd_tipo_recebimento	= coalesce(cd_tipo_recebimento, cd_tipo_recebimento_w)
				where	nr_titulo		= nr_documento_w
				and	nr_sequencia		= nr_seq_baixa_w;
			end if;
			
			vl_saldo_titulo_w	:= obter_saldo_titulo_receber(nr_documento_w, dt_recebimento_w);
			
			/*if	(vl_saldo_titulo_w = 0) and
				(dt_contabil_w > dt_recebimento_w) then
				Ra.ise_application_error(-20011,'O titulo ' || nr_documento_w || ' nao pode ser recebido nesta data pois,' ||
							' a data de recebimento (' || dt_recebimento_w || ') e menor que a data contabil (' || dt_contabil_w || ').');
			end if;*/
			
			update	titulo_receber_liq
			set	nr_seq_trans_fin	= nr_seq_trans_financ_w
			where	nr_titulo		= nr_documento_w
			and	nr_sequencia		= nr_seq_baixa_w;
			
			begin
			select	max(vl_minimo_nc),
				coalesce(ie_situacao_tit,'T')
			into STRICT	vl_regra_ger_nc_w,
				ie_situacao_tit_regra_w
			from	regra_acao_pag_duplic
			where	nr_sequencia = nr_seq_regra_w;
			exception
			when others then
				vl_regra_ger_nc_w		:= null;
				ie_situacao_tit_regra_w		:= 'T';
			end;
			
			-- OS 579650, titulo de perda nao gera nota de credito

			--if	(ie_acao_duplic_w in ('NC','NCM')) then
				select	max(ie_situacao)
				into STRICT	ie_situacao_tit_w
				from	titulo_receber
				where	nr_titulo	= nr_documento_w;
			--end if;
			
			if	((ie_acao_duplic_w in ('NC','NCM')) and (vl_recebido_w	> vl_saldo_titulo_w) and
				((coalesce(vl_regra_ger_nc_w::text, '') = '') or ((vl_recebido_w - vl_saldo_titulo_w) >= vl_regra_ger_nc_w)) and
				((coalesce(ie_situacao_tit_regra_w,'T') = 'T') or
				((coalesce(ie_situacao_tit_regra_w,'T') = 'LC') and (ie_situacao_tit_w in ('2','3'))))) or (ie_situacao_tit_w = '6') then			
				
				update	titulo_receber_liq
				set	vl_recebido		= vl_recebido_w - (vl_recebido_w - vl_saldo_titulo_w),
					vl_rec_maior		= (vl_recebido_w - vl_saldo_titulo_w)
				where	nr_titulo		= nr_documento_w
				and	nr_sequencia		= nr_seq_baixa_w;
				
				/* Projeto Multimoeda - Atualiza os valores em moeda estrangeira quando a baixa for em moeda estrangeira*/

				if (coalesce(vl_recebido_estrang_w,0) <> 0 and coalesce(vl_cotacao_w,0) <> 0) then
					update	titulo_receber_liq
					set	vl_recebido_estrang = vl_recebido_estrang_w - (vl_recebido_estrang_w - (vl_saldo_titulo_w / vl_cotacao_w)),
						vl_complemento = (vl_recebido_w - (vl_recebido_w - vl_saldo_titulo_w)) - (vl_recebido_estrang_w - (vl_recebido_estrang_w - (vl_saldo_titulo_w / vl_cotacao_w)))
					where	nr_titulo = nr_documento_w
					and	nr_sequencia = nr_seq_baixa_w;
				end if;
				
				if (ie_acao_duplic_w = 'NCM') then
					select	max(nr_seq_mensalidade_w)
					into STRICT	nr_seq_mensalidade_w
					from	titulo_receber
					where	nr_titulo	= nr_documento_w;
					
					if (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') then
						select	max(nr_seq_pagador)
						into STRICT	nr_seq_pagador_w
						from	pls_mensalidade
						where	nr_sequencia	= nr_seq_mensalidade_w;
					end if;
				end if;
				
				if (ie_situacao_tit_w <> '6') then
					CALL gerar_nota_credito_tesouraria(nr_documento_w,
									nr_seq_baixa_w,
									cd_pessoa_fisica_w,
									cd_cgc_w,
									nr_seq_pagador_w,
									dt_recebimento_w,
									(vl_recebido_w - vl_saldo_titulo_w),
									'I',
									cd_estabelecimento_w,
									nm_usuario_p);
				end if;
								
				vl_troco_p	:= vl_troco_p - (vl_recebido_w - vl_saldo_titulo_w);
				
				ie_dt_contab_dt_receb_w := Obter_Param_Usuario(813, 188, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_dt_contab_dt_receb_w);

				if ( coalesce(ie_dt_contab_dt_receb_w,'S') = 'N') then
				
					select	dt_contabil
					into STRICT	dt_contabil_w
					from	titulo_receber
					where	nr_titulo = nr_documento_w;

					if (dt_contabil_w IS NOT NULL AND dt_contabil_w::text <> '') and (dt_contabil_w > dt_recebimento_w)  then
						ds_macro_w := substr(Wheb_mensagem_pck.get_texto(355713) || ': ' || to_char(DT_RECEBIMENTO_W,'dd/mm/yyyy') || ' - ' || Wheb_mensagem_pck.get_texto(355714) || ': ' || to_char(DT_CONTABIL_W,'dd/mm/yyyy'),1,255);
						CALL wheb_mensagem_pck.exibir_mensagem_abort(285864,'DS_ERRO_W=' || ds_macro_w);			
					end if;
				
				end if;
			end if;

			CALL Atualizar_Imposto_Tit_Rec(nr_documento_w, nr_seq_baixa_w, vl_base_imposto_w, nm_usuario_p, nr_seq_liq_origem_w);
		end if;

		if (coalesce(cd_tipo_recebimento_w::text, '') = '') then
			begin
			select	max(cd_tipo_recebimento)
			into STRICT	cd_tipo_recebimento_w
			from	tipo_recebimento
			where	ie_tipo_consistencia	= 0
			and	ie_situacao		= 'A'
			and     ((cd_estabelecimento = cd_estabelecimento_w) or (coalesce(cd_estabelecimento::text, '') = ''));
			exception
				when no_data_found then
			--r.aise_application_error(-20011,'Nao ha um tipo de recebimento sem consistencia cadastrado!');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(179787);
			end;

			select	max(ie_acao)
			into STRICT	ie_acao_w
			from	transacao_financeira
			where	nr_sequencia	= nr_seq_trans_financ_w;

			/* Tratar recebimento por perdas */

			if (ie_acao_w = 18) then
				select	max(cd_tipo_recebimento)
				into STRICT	cd_tipo_recebimento_w
				from	tipo_recebimento
				where	ie_tipo_consistencia	= 9
				and	ie_situacao		= 'A'
				and     ((cd_estabelecimento = cd_estabelecimento_w) or (coalesce(cd_estabelecimento::text, '') = ''));				
			end if;
		end if;
		
		if (ie_receb_caixa_w = 'TR') and (cd_tipo_receb_caixa_w IS NOT NULL AND cd_tipo_receb_caixa_w::text <> '') then	
			
			cd_tipo_recebimento_w	:= cd_tipo_receb_caixa_w;

			update	titulo_receber_liq
			set	cd_tipo_recebimento	= cd_tipo_receb_caixa_w
			where	nr_titulo		= nr_documento_w
			and	nr_sequencia		= nr_seq_baixa_w;
			
		end if;

		if (ie_tipo_movto_w = 'B') and (cd_tipo_recebimento_w IS NOT NULL AND cd_tipo_recebimento_w::text <> '') then
			update	titulo_receber_liq
			set	cd_tipo_recebimento	= coalesce(cd_tipo_recebimento, cd_tipo_recebimento_w)
			where	nr_titulo		= nr_documento_w
			and	nr_sequencia		= nr_seq_baixa_w;
		end if;

		if (ie_tipo_movto_w	= 'CH') then

			CALL gerar_cheque_cr_hist(nr_documento_w, Wheb_mensagem_pck.get_texto(355711) || ' ' || nr_seq_caixa_rec_p || ', ' || Wheb_mensagem_pck.get_texto(355712),'N',nm_usuario_p);
			
			/*AAMFIRMO OS 892531 -> Atualizar cobranca do cheque ao confirmar o recebimento e nao mais no afterpost  do cheque_dbp no delphi*/

			CALL atualizar_cobranca_cheque(nr_documento_w,nm_usuario_p);

		end if;
		
		/* Projeto Multimoeda - Verifica se a transacao e em moeda estrangeira, caso positivo calcula os valores antes de gravar a transacao */

		if (coalesce(vl_transacao_estrang_w,0) <> 0 and coalesce(vl_cotacao_w,0) <> 0) then
			vl_complemento_w := vl_transacao_w - vl_transacao_estrang_w;
		else
			vl_transacao_estrang_w := null;
			vl_complemento_w := null;
			vl_cotacao_w := null;
			cd_moeda_w := null;
		end if;
		/*AAMFIRMO OS 892302 - Para recebimentos de adiantamento,  verificar se a TF esta parametrizada  com o IE_DEV_ADIANT_NEGATIVO para gravar no movimento de documento do receb*/

		ie_dev_adiant_negativo_w := null;
		if (ie_tipo_movto_w = 'A') and (nr_seq_trans_financ_w IS NOT NULL AND nr_seq_trans_financ_w::text <> '') then
		
			select	max(ie_acao)
			into STRICT	ie_acao_w
			from	transacao_financeira
			where	nr_sequencia	= nr_seq_trans_financ_w;
			
			/*Apenas para transacoes com acao recebimento de adiantamento*/

			if (ie_acao_w = 3) then
			
				select 	coalesce(max(a.ie_dev_adiant_negativo),'N')
				into STRICT	ie_dev_adiant_negativo_w
				from	transacao_financeira a
				where	a.nr_sequencia = nr_seq_trans_financ_w;
				
			end if;
	
		end if;
		
		if (ie_tipo_movto_w = 'P') then
			
			select max(a.nr_sequencia)
			into STRICT nr_seq_banco_saldo_w
			from banco_saldo a,
				 pix_cobranca b
			where a.nr_seq_conta = b.nr_seq_conta_banco
			and b.nr_sequencia = nr_documento_w
			and trunc(a.dt_referencia,'month') = trunc(b.dt_atualizacao, 'month')
			and coalesce(a.dt_fechamento::text, '') = '';

			if (coalesce(nr_seq_trans_pix_w::text, '') = '') then
			--r.aise_application_error(-20011,'Nao ha transacao de recebimento pix cadastrada, verifique os parametros da tesouraria!');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1188032);
			end if;
			
			if (coalesce(nr_seq_banco_saldo_w::text, '') = '') then
			--r.aise_application_error(-20011, 'Nao possui saldo em conta aberto para o mes');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1188424);
			end if;
			
		end if;

		insert	into movto_trans_financ(nr_sequencia,
			dt_transacao,
			nr_seq_trans_financ,
			vl_transacao,
			dt_atualizacao,
			nm_usuario,
			nr_lote_contabil,
			ie_conciliacao,
			nr_seq_caixa_rec,
			nr_seq_caixa,
			nr_seq_saldo_caixa,
			dt_referencia_saldo,
			nr_seq_lote,
			nr_seq_titulo_receber,
			nr_adiantamento,
			nr_seq_cheque,
			nr_seq_movto_cartao,
			nr_adiant_pago,
			nr_seq_cob_pix,
			cd_tipo_recebimento,
			cd_pessoa_fisica,
			cd_cgc,
			nr_documento,
			ds_historico,
			cd_centro_custo,
			vl_transacao_estrang,
			vl_complemento,
			vl_cotacao,
			cd_moeda,
			ie_dev_adiant_negativo,
			nr_seq_saldo_banco)
		values (nr_sequencia_w,
			dt_recebimento_w,
			nr_seq_trans_financ_w,
			vl_transacao_w,
			clock_timestamp(),
			nm_usuario_p,
			0,
			'N',
			nr_seq_caixa_rec_p,
			nr_seq_caixa_w,
			nr_seq_saldo_caixa_w,
			dt_saldo_caixa_w,
			nr_seq_lote_w,
			CASE WHEN ie_tipo_movto_w='B' THEN nr_documento_w  ELSE null END ,
			CASE WHEN ie_tipo_movto_w='A' THEN nr_documento_w  ELSE nr_adiantamento_w END ,
			CASE WHEN ie_tipo_movto_w='CH' THEN nr_documento_w  ELSE null END ,
			CASE WHEN ie_tipo_movto_w='CA' THEN nr_documento_w  ELSE null END ,
			CASE WHEN ie_tipo_movto_w='AP' THEN nr_documento_w  ELSE null END ,
			CASE WHEN ie_tipo_movto_w='P' THEN nr_documento_w  ELSE null END ,
			CASE WHEN ie_tipo_movto_w='B' THEN cd_tipo_recebimento_w  ELSE CASE WHEN ie_tipo_movto_w='A' THEN cd_tipo_recebimento_w  ELSE null END  END , /*Bruna OS84270, Mostrei para edgar*/
			cd_pessoa_fisica_w,
			cd_cgc_w,
			CASE WHEN ie_tipo_movto_w='A' THEN  nr_doc_adiant_w  ELSE nr_doc_baixa_w END ,
			ds_historico_w,
			cd_centro_custo_w,
			vl_transacao_estrang_w,
			vl_complemento_w,
			vl_cotacao_w,
			cd_moeda_w,
			ie_dev_adiant_negativo_w,
			CASE WHEN ie_tipo_movto_w='P' THEN nr_seq_banco_saldo_w  ELSE null END );

		/* Francisco  OS 53770 - 30/03/07 - Gravar na baixa a transacao que a originou */

		if (ie_tipo_movto_w = 'B') then
			update	titulo_receber_liq
			set	nr_seq_movto_trans_fin	= nr_sequencia_w,
				dt_recebimento		= coalesce(trunc(dt_fechamento_p,'dd'),dt_recebimento)
			where	nr_titulo		= nr_documento_w
			and	nr_sequencia		= nr_seq_baixa_w;
		end if;

	end loop;
	close C01;

	update	movto_trans_financ
	set	nr_seq_caixa		= nr_seq_caixa_w,
		nr_seq_saldo_caixa	= nr_seq_saldo_caixa_w,
		dt_referencia_saldo	= dt_saldo_caixa_w,
		nr_seq_lote		= nr_seq_lote_w,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p
	where	nr_seq_caixa_rec		= nr_seq_caixa_rec_p
	and	coalesce(nr_seq_lote::text, '') = '';

	CALL atualizar_saldo_caixa(cd_estabelecimento_w,
				nr_seq_lote_w,
				nr_seq_caixa_w,
				nm_usuario_p,
				'N');

	update	titulo_receber_liq
	set	ie_lib_caixa	= 'S'
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p;
	
	--Altera o pagador na EUP, com o pagador do recebimento
	
	ds_titulos_contab_w	:= null;
	
	open C02;
	loop
	fetch C02 into	
		nr_titulo_w,
		nr_sequencia_baixa_w,
		ie_tipo_consistencia_w,
		nr_seq_mensalidade_w,
		ie_pls_w,
		vl_recebimento_w,
		vl_titulo_w,
		nr_seq_cob_previa_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		if	((ie_tipo_consistencia_w = 9) or
			((nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') or (ie_pls_w = 'S'))) or ( coalesce(ie_gerar_classif_cc_w,'N') = 'S') then
			/* Francisco - 07/04/2010 -  OS 207178 -  Tive de alterar de volta para o if e tratar o nr_seq_mensalidade */

			CALL gerar_titulo_rec_liq_cc(cd_estabelecimento_w,
					NULL,
					nm_usuario_p,
					nr_titulo_w,
					nr_sequencia_baixa_w);
					
			nr_titulo_contab_w	:= null;		
			
			nr_titulo_contab_w := pls_gerar_tit_rec_liq_mens(nr_titulo_w, nr_sequencia_baixa_w, nm_usuario_p, nr_titulo_contab_w);
			
			if (nr_titulo_contab_w IS NOT NULL AND nr_titulo_contab_w::text <> '') then
				ds_titulos_contab_w	:= substr(ds_titulos_contab_w || nr_titulo_contab_w || ', ',1,4000);
			end if;
			
			CALL atualizar_baixa_gratuidade(nr_titulo_w, nr_sequencia_baixa_w, nm_usuario_p);
		end if;

		/* Francisco - OS 194892 - 10/02/2010 */

		CALL pls_gerar_amortizacao_regra(nr_titulo_w,nr_sequencia_baixa_w,nm_usuario_p,'N');

		/* Francisco - 28/09/2010 */

		CALL pls_apropriar_juros_multa_mens(nr_titulo_w,nr_sequencia_baixa_w,nm_usuario_p,cd_estabelecimento_w,'N','I');
		
		if (nr_seq_cob_previa_w IS NOT NULL AND nr_seq_cob_previa_w::text <> '') and (vl_recebimento_w = vl_titulo_w) then
			CALL pls_atualiza_situacao_cobranca(nr_seq_cob_previa_w,nm_usuario_p,'N');
		end if;
		
		CALL atualizar_saldo_tit_rec(nr_titulo_w,nm_usuario_p);
		/*AAMFIRMO OS 830247 em 13/05/2015*/

		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') and (nr_sequencia_baixa_w IS NOT NULL AND nr_sequencia_baixa_w::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
			CALL gerar_nf_parcial_tit_rec_liq( nr_titulo_w,
						      nr_sequencia_baixa_w,
						      nm_usuario_p,
						      'N',
						      'I');
		end if;
	
		end;
	end loop;
	close C02;

	if (ds_titulos_contab_w IS NOT NULL AND ds_titulos_contab_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(236517, 'NR_TITULO=' || ds_titulos_contab_w);
	end if;
	
	open C03;
	loop
	fetch C03 into
		nr_adiantamento_w,
		vl_cotacao_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		/* Projeto Multimoeda - Quando tiver cotacao, passa a cotacao para atualizar o saldo em moeda estrangeira. */

		if (coalesce(vl_cotacao_w,0) <> 0) then
			CALL atualizar_saldo_adiantamento(nr_adiantamento_w,nm_usuario_p,null,vl_cotacao_w);
		else
			CALL atualizar_saldo_adiantamento(nr_adiantamento_w,nm_usuario_p,null);
		end if;
		end;
	end loop;
	close C03;
	
	vl_troco_restante_w	:= coalesce(vl_troco_informado_w,0);
	
	open	c05;
	loop
	fetch	c05 into
		nr_adiant_receb_w,
		vl_saldo_adiant_w,
		vl_saldo_adiant_est_w,
		vl_cotacao_w,
		cd_moeda_w;
	EXIT WHEN NOT FOUND; /* apply on c05 */
	
		ie_status_adiant_w	:= 'D';	
	
		if (ie_acao_caixa_w = '34') then
		
			update	titulo_receber_liq
			set	nr_adiantamento		= nr_adiant_receb_w
			where	nr_seq_caixa_rec 	= nr_seq_caixa_rec_p;

			update	adiantamento
			set	ie_lib_caixa	= 'S'			
			where	nr_adiantamento	= nr_adiant_receb_w;
			
			if (coalesce(ie_devo_adiant_w,'N')	= 'S') then
				
				if (coalesce(vl_troco_restante_w,0)	> 0) then
				
					if (vl_troco_restante_w	> vl_saldo_adiant_w) then

						CALL gerar_adiantamento_dev(nr_adiant_receb_w,vl_saldo_adiant_w,nm_usuario_p);
						vl_troco_restante_w	:= vl_troco_restante_w - vl_saldo_adiant_w;
					else
						CALL gerar_adiantamento_dev(nr_adiant_receb_w,vl_troco_restante_w,nm_usuario_p);
						vl_troco_restante_w	:= 0;
					end if;
				end if;
			end if;
			/* Projeto Multimoeda - Quando tiver cotacao, passa a cotacao para atualizar o saldo em moeda estrangeira. */

			if (coalesce(vl_cotacao_w,0) <> 0) then
				CALL atualizar_saldo_adiantamento(nr_adiant_receb_w,nm_usuario_p,null,vl_cotacao_w);
			else
				CALL atualizar_saldo_adiantamento(nr_adiant_receb_w,nm_usuario_p,null);
			end if;
			
			select	max(a.vl_saldo)
			into STRICT	vl_saldo_adiant_atual_w
			from	adiantamento a
			where	a.nr_adiantamento	= nr_adiant_receb_w;
			
			if (coalesce(vl_saldo_adiant_atual_w,0)	> 0) then
				ie_status_adiant_w	:= 'P';
			end if;	

			CALL gerar_adiantamento_hist(	nr_adiant_receb_w,
							'T',
							clock_timestamp(),
							Wheb_mensagem_pck.get_texto(355710),
							nm_usuario_p,
							'N');			
		end if;
	

		update	adiantamento
		set	ie_lib_caixa	= 'S',
			ie_status	= ie_status_adiant_w
		where	nr_adiantamento	= nr_adiant_receb_w;
		
		if (ie_status_adiant_w = 'D') then

			CALL gerar_adiantamento_hist(	nr_adiant_receb_w,
							'S',
							clock_timestamp(),
							Wheb_mensagem_pck.get_texto(355709),
							nm_usuario_p,
							'N');
		end if;

	end	loop;
	close	c05;
	
	if (ie_receb_caixa_w = 'TR') then	

		update	adiantamento
		set	cd_tipo_recebimento	= cd_tipo_receb_caixa_w
		where	nr_seq_caixa_rec = nr_seq_caixa_rec_p;
		
	end if;

	update	cheque_cr
	set	ie_lib_caixa	= 'S'
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p;

	update	movto_cartao_cr
	set	ie_lib_caixa	= 'S',
		dt_liberacao  	= clock_timestamp()
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p
	and ((dt_confirmacao_tef IS NOT NULL AND dt_confirmacao_tef::text <> '') or coalesce(dt_integracao_tef::text, '') = '');
	
	open	c06;
	loop
	fetch	c06 into
		nr_seq_movto_w,
		cd_estab_movto_w;
	EXIT WHEN NOT FOUND; /* apply on c06 */
		
		if (nr_seq_movto_w IS NOT NULL AND nr_seq_movto_w::text <> '' AND cd_estab_movto_w IS NOT NULL AND cd_estab_movto_w::text <> '') then /*atributo CD_ESTABELECIMENTO obrigatorio na tabela MOVTO_CARTAO_CR_TRIB*/
		
			CALL gerar_imposto_cartao_cr(nr_seq_movto_w,
						cd_estab_movto_w,
						clock_timestamp(),
						nm_usuario_p);
	end if;
		

	end	loop;
	close	c06;
	
	select	max(a.ie_rps_caixa_receb)
	into STRICT	ie_rps_caixa_receb_w
	from	transacao_financeira a
	where	a.nr_sequencia	= nr_seq_trans_financ_receb_w;

	if (ie_rps_caixa_receb_w	= 'S') then
		nr_rps_w	:= coalesce(nr_rps_atual_w,0) + 1;

		update	parametro_tesouraria a
		set	nr_rps_atual		= nr_rps_w
		where	a.cd_estabelecimento	= cd_estabelecimento_w;
	end if;

	update	caixa_receb
	set	dt_fechamento	= coalesce(dt_fechamento_p,clock_timestamp()),
		nr_recibo	= nr_recibo_w,
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp(),
		nr_rps		= nr_rps_w
	where	nr_sequencia	= nr_seq_caixa_rec_p;

	/* Francisco - 19/11/2007 - OS 71631 */

	CALL atualiza_repasse_rec_caixa(nr_seq_caixa_rec_p,nm_usuario_p,'L');

	/* Francisco - 13/03/2010 - Se for recebimento de negociacao precisa atualizar data de recebimento */

	if (nr_seq_negociacao_cr_w IS NOT NULL AND nr_seq_negociacao_cr_w::text <> '') then
		update	negociacao_cr
		set	dt_recebimento	= coalesce(dt_fechamento_p,clock_timestamp()),
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia	= nr_seq_negociacao_cr_w;
	end if;
	
	/* OS 841795 - Gera movimento para contabilizacao da transacao monetaria do documento*/

	gerar_movto_trans_doc_monet(nr_seq_caixa_w,nr_seq_lote_w,cd_estabelecimento_w);

end if;

CALL gerar_caixa_receb_classif(nr_seq_caixa_rec_p, nm_usuario_p);

CALL atualizar_produto_financeiro(nr_seq_caixa_rec_p, nm_usuario_p);

ie_atualiza_w	:= 'N';
ie_alterar_pagador_eup_w := obter_param_usuario(813, 154, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_alterar_pagador_eup_w);

open C04;
loop
fetch C04 into	
	nr_interno_conta_w,
	nr_atendimento_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin	
	ds_interno_conta_w 	:= substr(ds_interno_conta_w || nr_interno_conta_w || ',',1,255);
	ds_atendimento_w	:= substr(ds_atendimento_w || nr_atendimento_w || ',',1,255);	
	ie_atualiza_w	:= 'S';	
	
	
	if ie_alterar_pagador_eup_w = 'S' then
		if (nr_interno_conta_w IS NOT NULL AND nr_interno_conta_w::text <> '') then
			select 	max(nr_atendimento)
			into STRICT	nr_atendimento_w
			from	conta_paciente
			where	nr_interno_conta = nr_interno_conta_w;
		end if;
		if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
			delete
			from	atendimento_pagador
			where	nr_atendimento = nr_atendimento_w;
			
			insert into atendimento_pagador(nr_sequencia,
							 dt_atualizacao,
							 nm_usuario,
							 dt_atualizacao_nrec,
							 nm_usuario_nrec,
							 cd_pessoa_fisica,
							 cd_cgc,
							 nr_atendimento,
							 ds_acordo)
			values (nextval('atendimento_pagador_seq'),
							 clock_timestamp(),
							 nm_usuario_p,
							 clock_timestamp(),
							 nm_usuario_p,
							 cd_pessoa_fisica_w,
							 cd_cgc_w,
							 nr_atendimento_w,
							 '');
							
							 
			begin
				CALL executar_evento_agenda_atend(nr_atendimento_w,'CR',obter_estabelecimento_ativo,nm_usuario_p);
			exception
			when others then
				null;
			end;
							
			
		end if;
		
		
		
	end if;
	end;
end loop;
close C04;

if (ie_atualiza_w	= 'S') then
	ds_interno_conta_w	:= substr(ds_interno_conta_w, 1, length(ds_interno_conta_w)-1);
	ds_atendimento_w	:= substr(ds_atendimento_w, 1, length(ds_atendimento_w)-1);
	
	update	cheque_cr
	set	ds_observacao	= ' ' || Wheb_mensagem_pck.get_texto(355707) || ': ' || ds_atendimento_w || ' ' || Wheb_mensagem_pck.get_texto(355708) || ': ' || ds_interno_conta_w
	where	nr_seq_caixa_rec = nr_seq_caixa_rec_p;
end if;

--gravar_agend_integracao()		nr_seq_caixa_rec_p;
CALL gravar_agend_integracao(403, 'NR_SEQ_CAIXA_REC=' || nr_seq_caixa_rec_p || ';');

CALL atualizar_atend_cartao_cheque(nr_seq_caixa_rec_p);

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fechar_caixa_receb ( nr_seq_caixa_rec_p bigint, ie_troco_p text, nm_usuario_p text, vl_troco_p INOUT bigint, dt_fechamento_p timestamp, ie_commit_p text default 'S') FROM PUBLIC;

