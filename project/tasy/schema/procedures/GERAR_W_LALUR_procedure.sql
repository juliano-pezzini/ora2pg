-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_lalur ( dt_ano_p text, cd_empresa_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/*Parte A*/
 
nr_sequencia_w				bigint;
cd_conta_lucro_liq_w			varchar(20);
nr_seq_mes_ref_w			bigint;
dt_referencia_w				timestamp;
cd_conta_contabil_w			varchar(20);
ds_conta_contabil_w			varchar(255);
vl_movimento_w				double precision;
vl_lucro_liq_w				double precision;
vl_lucro_liq_periodo_w			double precision;
vl_lucro_prej_antes_comp_w		double precision;
vl_lucro_prej_real_periodo_w		double precision;
vl_compensacao_w			double precision;
ie_entrou_w				varchar(1) := 'N';
ie_tipo_conta_w				varchar(1);
vl_adicao_mes_w				double precision;
vl_exclusao_mes_w			double precision;
vl_adicao_ano_w				double precision;
vl_exclusao_ano_w			double precision;
vl_adicao_ano_csll_w			double precision;
vl_exclusao_ano_csll_w			double precision;
ie_gerou_mes_w				boolean;
ds_periodo_w				varchar(255);
ds_lucro_prej_antes_comp_w		varchar(255);
ds_lucro_prej_real_periodo_w		varchar(255);
vl_base_adic_ir_w			double precision;
vl_ir_normal_w				double precision;
vl_ir_adicional_w			double precision;
vl_ir_total_w				double precision;
vl_compensacao_ir_w			double precision;
vl_contas_comp_ir_w			double precision;
pr_valor_w				double precision;
ie_tributo_w				varchar(15);

/* Contribuição Social CSLL*/
 
vl_adicao_mes_csll_w			double precision;
vl_exclusao_mes_csll_w			double precision;
vl_lucro_antes_comp_csll_w		double precision;
vl_compensacao_csll_w			double precision;
vl_lucro_real_periodo_csll_w		double precision;
vl_csll_normal_w			double precision;
/* Fim CSLL */
 
 
/*Parte B*/
ds_historico_w				varchar(255);
vl_debito_w				double precision;
vl_credito_w				double precision;
vl_prejuizo_acum_ant_w			double precision;
vl_prejuizo_acum_w			double precision;
vl_saldo_w				double precision;
dt_ano_w				bigint;
qt_existe_w				integer;

/* 
Tipo da informação. 
0 = Movimnetos do mês 
1 = Total das adições 
2 = Total das exclusões 
3 = Lucro líquido contábil 
4 = Lucro/Prejuizo antes da compensação (3 + 1 - 2) 
5 = Valor da compensação(30%) 
6 = Lucro/Prejuizo Real do período 
7 = Imposto de renda - valor total (15%) 
8 = Adicional do IR - acima de 20.000,00p/mes (10%) 
*/
 
 
C01 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		a.dt_referencia 
	from	ctb_mes_ref a 
	where	a.cd_empresa = cd_empresa_p 
	and	to_char(a.dt_referencia,'yyyy') = dt_ano_p 
	order by to_date(a.dt_referencia, 'dd/mm/yyyy');

C02 CURSOR FOR 
	SELECT	a.cd_conta_contabil, 
		b.ds_conta_contabil, 
		coalesce(sum(b.vl_movimento),0) vl_movimento, 
		a.ie_tipo_conta, 
		coalesce(a.ie_tributo,'A') ie_tributo 
	from	ctb_balancete_v2 b, 
		conta_contabil_lalur a 
	where	a.nr_seq_lalur		= nr_sequencia_w 
	and	a.cd_conta_contabil	= b.cd_conta_contabil 
	and	b.nr_seq_mes_ref	= nr_seq_mes_ref_w 
	and	b.cd_estabelecimento	= cd_estabelecimento_p 
	and	coalesce(a.cd_centro_custo, coalesce(b.cd_centro_custo,0))	= coalesce(b.cd_centro_custo,0) 
	and	b.ie_normal_encerramento 	= 'N' 
	and	a.ie_calculo		= 'M' 
	group by a.cd_conta_contabil, 
		b.ds_conta_contabil, 
		a.ie_tipo_conta, 
		coalesce(a.ie_tributo,'A');


BEGIN 
delete	from w_lalur;
delete	from w_lalur_b;
 
commit;
 
vl_adicao_ano_w		:= 0;
vl_exclusao_ano_w	:= 0;
vl_compensacao_ir_w	:= 0;
vl_adicao_ano_csll_w	:= 0;
vl_exclusao_ano_csll_w	:= 0;
 
begin 
select	nr_sequencia, 
	cd_conta_lucro_liq, 
	coalesce(vl_prejuizo_acum_ant, 0), 
	(dt_ano)::numeric  
into STRICT	nr_sequencia_w, 
	cd_conta_lucro_liq_w, 
	vl_prejuizo_acum_ant_w, 
	dt_ano_w 
from	livro_lalur 
where	cd_empresa	= cd_empresa_p 
and	dt_ano		= dt_ano_p;
exception 
when no_data_found then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(271302, 'DS_EMPRESA=' || substr(obter_nome_empresa(cd_empresa_p),1,255) || ';' || 
							'DT_ANO=' || dt_ano_p);
when too_many_rows then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(271314, 'DS_EMPRESA=' || substr(obter_nome_empresa(cd_empresa_p),1,255) || ';' || 
							'DT_ANO=' || dt_ano_p);
end;
 
open C01;
loop 
fetch C01 into 
	nr_seq_mes_ref_w, 
	dt_referencia_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
	vl_adicao_mes_w		:= 0;
	vl_exclusao_mes_w	:= 0;
	ie_gerou_mes_w		:= false;
	vl_adicao_mes_csll_w	:= 0;
	vl_exclusao_mes_csll_w	:= 0;
	 
	open C02;
	loop 
	fetch C02 into 
		cd_conta_contabil_w, 
		ds_conta_contabil_w, 
		vl_movimento_w, 
		ie_tipo_conta_w, 
		ie_tributo_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin 
		pr_valor_w		:= coalesce(ctb_obter_perc_conta_lalur(	nr_sequencia_w, 
										cd_conta_contabil_w, 
										ie_tipo_conta_w, 
										dt_referencia_w), 100);
										 
		if (pr_valor_w <> 100) then 
			vl_movimento_w		:= dividir(vl_movimento_w,dividir(100, pr_valor_w));
		end if;
		 
		ie_gerou_mes_w		:= true;
		 
		if (ie_tipo_conta_w = 'A') then 
			begin 
			if (ie_tributo_w in ('A','CSLL')) then 
				vl_adicao_mes_csll_w	:= coalesce(vl_adicao_mes_csll_w, 0) + vl_movimento_w;
			end if;
			if (ie_tributo_w in ('A','IR')) then 
				ie_entrou_w		:= 'S';
				vl_adicao_mes_w		:= vl_adicao_mes_w + vl_movimento_w;
			end if;
			end;
		elsif (ie_tipo_conta_w = 'E') then 
			begin 
			if (ie_tributo_w in ('A','CSLL')) then 
				vl_exclusao_mes_csll_w	:= coalesce(vl_exclusao_mes_csll_w, 0) + vl_movimento_w;
			end if;
			 
			if (ie_tributo_w in ('A','IR')) then 
				vl_exclusao_mes_w	:= vl_exclusao_mes_w + vl_movimento_w;
			end if;
			end;
		end if;
 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			cd_conta_contabil, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (0, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			cd_conta_contabil_w, 
			ds_conta_contabil_w, 
			vl_movimento_w, 
			clock_timestamp(), 
			nm_usuario_p);
		end;
	end loop;
	close C02;
 
	if (ie_gerou_mes_w) then 
		begin 
		vl_adicao_ano_w		:= vl_adicao_ano_w + vl_adicao_mes_w;
		vl_exclusao_ano_w	:= vl_exclusao_ano_w + vl_exclusao_mes_w;
		vl_adicao_ano_csll_w	:= vl_adicao_ano_csll_w + vl_adicao_mes_csll_w;
		vl_exclusao_ano_csll_w	:= vl_exclusao_ano_csll_w + vl_exclusao_mes_csll_w;
		 
		select	CASE WHEN substr(upper(obter_desc_mes_ano(dt_referencia_w,'A')),1,7)='JANEIRO' THEN  initcap(obter_desc_mes_ano(dt_referencia_w,'A'))  ELSE 'janeiro' || '/' || obter_desc_mes_ano(dt_referencia_w,'ANO') || ' a ' || initcap(obter_desc_mes_ano(dt_referencia_w,'A')) END  
		into STRICT	ds_periodo_w 
		;
 
		/*Lucro liquido contábil do período*/
 
		if (coalesce(cd_conta_lucro_liq_w, '0') <> '0') then 
			begin 
			select	coalesce(sum(vl_movimento),0) 
			into STRICT	vl_lucro_liq_w 
			from	ctb_balancete_v 
			where	cd_estabelecimento	= cd_estabelecimento_p 
			and	cd_conta_contabil	= cd_conta_lucro_liq_w 
			and	ie_normal_encerramento	= 'N' 
			and	nr_seq_mes_ref		= nr_seq_mes_ref_w;
			end;
		else 
			begin 
			select	coalesce(sum(CASE WHEN a.ie_tipo_conta='A' THEN b.vl_movimento WHEN a.ie_tipo_conta='E' THEN (b.vl_movimento*-1) END ),0) vl_movimento 
			into STRICT	vl_lucro_liq_w 
			from	ctb_balancete_v b, 
				conta_contabil_lalur a 
			where	a.nr_seq_lalur			= nr_sequencia_w 
			and	a.cd_conta_contabil		= b.cd_conta_contabil 
			and	b.nr_seq_mes_ref		= nr_seq_mes_ref_w 
			and	b.cd_estabelecimento		= cd_estabelecimento_p 
			and	b.ie_normal_encerramento 	= 'N' 
			and	a.ie_calculo			= 'R';
			end;
		end if;
		 
		vl_lucro_liq_periodo_w	:= coalesce(vl_lucro_liq_periodo_w,0) + vl_lucro_liq_w;
		/*vl_lucro_liq_periodo_w	:= (nvl(vl_lucro_liq_periodo_w,0) + vl_lucro_liq_w) - vl_csll_normal_w;*/
 
 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			cd_conta_contabil, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (3, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			cd_conta_lucro_liq_w, 
			substr('Lucro líquido contábil do período de ' || ds_periodo_w || chr(13) || chr(10) || 'após a Contribuição Social',1,255), 
			vl_lucro_liq_periodo_w, 
			clock_timestamp(), 
			nm_usuario_p);
 
		/*Adições e exclusões*/
 
		if (ie_entrou_w = 'N') then 
			vl_adicao_mes_w	:= vl_adicao_mes_w + vl_movimento_w;
		end if;
			 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (1, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Adições ' || initcap(obter_desc_mes_ano(dt_referencia_w,'A')), 
			vl_adicao_mes_w, 
			clock_timestamp(), 
			nm_usuario_p);
				 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao,	nm_usuario) 
		values (2, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Exclusões ' || initcap(obter_desc_mes_ano(dt_referencia_w,'A')), 
			vl_exclusao_mes_w, 
			clock_timestamp(), 
			nm_usuario_p);
 
		/*Lucro/Prejuizo antes de compensação*/
 
		vl_lucro_prej_antes_comp_w	:= vl_lucro_liq_periodo_w + vl_adicao_ano_w - vl_exclusao_ano_w;
		ds_lucro_prej_antes_comp_w	:= 'LUCRO REAL ANTES DE COMPENSAÇÃO DO PREJUIZO';
		 
		if (vl_lucro_prej_antes_comp_w < 0) then 
			ds_lucro_prej_antes_comp_w	:= 'PREJUIZO REAL';
		end if;
		 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao,	nm_usuario) 
		values (4, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			ds_lucro_prej_antes_comp_w, 
			vl_lucro_prej_antes_comp_w, 
			clock_timestamp(), 
			nm_usuario_p);
 
		/*Compensações*/
 
		vl_compensacao_w	:= 0;
		 
		if (vl_lucro_prej_antes_comp_w > 0) then -- faz a compensacao somente se for saldo positivo 
			vl_compensacao_w	:= dividir(vl_lucro_prej_antes_comp_w * 30, 100);
			 
			if (vl_compensacao_w > vl_prejuizo_acum_ant_w) then 
				vl_compensacao_w	:= vl_prejuizo_acum_ant_w;
			end if;
			 
			insert into w_lalur(ie_informacao, 
				nr_seq_mes_ref, 
				dt_referencia, 
				ds_historico, 
				vl_referencia, 
				dt_atualizacao, 
				nm_usuario) 
			values (5, 
				nr_seq_mes_ref_w, 
				dt_referencia_w, 
				'Compensações', 
				vl_compensacao_w, 
				clock_timestamp(), 
				nm_usuario_p);
		end if;
 
		/*Lucro/Prejuizo REAL do período*/
 
		vl_lucro_prej_real_periodo_w	:= vl_lucro_prej_antes_comp_w - vl_compensacao_w;
		ds_lucro_prej_real_periodo_w	:= 'Lucro Real do período de ' || ds_periodo_w;
		 
		if (vl_lucro_prej_real_periodo_w < 0) then 
			ds_lucro_prej_real_periodo_w	:= 'Prejuizo Real do período de ' || ds_periodo_w;
		end if;
		 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (6, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			ds_lucro_prej_real_periodo_w, 
			vl_lucro_prej_real_periodo_w, 
			clock_timestamp(), 
			nm_usuario_p);
 
		/* Início Contribuição social */
 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (20, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'CONTRIBUIÇÃO SOCIAL', 
			0, 
			clock_timestamp(), 
			nm_usuario_p);		
		 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (30, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Adições ' || initcap(obter_desc_mes_ano(dt_referencia_w,'A')), 
			vl_adicao_mes_csll_w, 
			clock_timestamp(), 
			nm_usuario_p);
			 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (35, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Total de adições', 
			vl_adicao_mes_csll_w, 
			clock_timestamp(), 
			nm_usuario_p);	
			 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (40, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Exclusões ' || initcap(obter_desc_mes_ano(dt_referencia_w,'A')), 
			vl_exclusao_mes_csll_w, 
			clock_timestamp(), 
			nm_usuario_p);	
			 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (45, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Total das exclusões', 
			vl_exclusao_mes_csll_w, 
			clock_timestamp(), 
			nm_usuario_p);
		 
		/*vl_lucro_antes_comp_csll_w	:= (vl_lucro_prej_real_periodo_w + vl_adicao_mes_csll_w) - vl_exclusao_mes_csll_w;*/
 
		vl_lucro_antes_comp_csll_w	:= (vl_lucro_liq_periodo_w + vl_adicao_mes_csll_w) - vl_exclusao_ano_csll_w;
		 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (50, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'LUCRO REAL BASE P/ CSLL ANTES DA COMPENSAÇÃO DO PREJUÍZO', 
			vl_lucro_antes_comp_csll_w, 
			clock_timestamp(), 
			nm_usuario_p);
		 
		vl_compensacao_csll_w	:= 0;
		 
		if (vl_lucro_antes_comp_csll_w > 0) then -- faz a compensacao somente se for saldo positivo 
			begin 
			vl_compensacao_csll_w	:= dividir(vl_lucro_antes_comp_csll_w * 30, 100);
 
			if (vl_compensacao_csll_w > vl_prejuizo_acum_ant_w) then 
				vl_compensacao_csll_w	:= vl_prejuizo_acum_ant_w;
			end if;
		 
			insert into w_lalur(ie_informacao, 
				nr_seq_mes_ref, 
				dt_referencia, 
				ds_historico, 
				vl_referencia, 
				dt_atualizacao, 
				nm_usuario) 
			values (55, 
				nr_seq_mes_ref_w, 
				dt_referencia_w, 
				'Compensações CSLL', 
				vl_compensacao_csll_w, 
				clock_timestamp(), 
				nm_usuario_p);	
			end;
		end if;
		 
		vl_lucro_real_periodo_csll_w	:= vl_lucro_antes_comp_csll_w;
		--vl_lucro_real_periodo_csll_w	:= vl_lucro_antes_comp_csll_w - vl_compensacao_csll_w; -- Márcio: Retirado essa linha devido à OS 486146 
		 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (60, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Lucro real base do período p/ CSLL após compensações', 
			vl_lucro_real_periodo_csll_w, 
			clock_timestamp(), 
			nm_usuario_p);	
			 
		if (vl_lucro_prej_real_periodo_w > 0) then 
			begin 
			vl_csll_normal_w	:= dividir(vl_lucro_real_periodo_csll_w*9,100);
			end;
		end if;
		 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (70, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Contribuição social (Aliquota 9%)', 
			vl_csll_normal_w, 
			clock_timestamp(), 
			nm_usuario_p);
				 
		vl_lucro_liq_periodo_w	:= coalesce(vl_lucro_liq_periodo_w,0) - vl_csll_normal_w;
		 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			cd_conta_contabil, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (18, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			cd_conta_lucro_liq_w, 
			substr('Lucro líquido contábil do período de ' || ds_periodo_w || chr(13) || chr(10) || 'após a Contribuição Social',1,255), 
			vl_lucro_liq_periodo_w, 
			clock_timestamp(), 
			nm_usuario_p);
	 
		/* Fim contribuição Social*/
 
		/*Imposto de renda*/
 
		/*vl_lucro_prej_real_periodo_w	:= - vl_lucro_prej_real_periodo_w - vl_csll_normal_w;*/
 
		vl_lucro_prej_real_periodo_w	:= vl_lucro_prej_real_periodo_w - vl_csll_normal_w;
	 
		select	(to_char(dt_referencia_w, 'mm'))::numeric  * 20000 
		into STRICT	vl_base_adic_ir_w 
		;
		 
		vl_ir_normal_w		:= 0;
		vl_ir_adicional_w	:= 0;
		vl_ir_total_w		:= 0;
		 
		if (vl_lucro_prej_real_periodo_w > 0) then 
			begin 
			/*vl_ir_normal_w	:= dividir((vl_lucro_prej_real_periodo_w * 15), 100);*/
 
			vl_ir_normal_w	:= dividir(vl_lucro_real_periodo_csll_w * 15, 100);
			 
			if (vl_lucro_prej_real_periodo_w > vl_base_adic_ir_w) then 
				/*vl_ir_adicional_w	:= dividir((vl_lucro_prej_real_periodo_w - vl_base_adic_ir_w) * 15, 100);*/
 
				vl_ir_adicional_w	:= dividir((vl_lucro_real_periodo_csll_w - vl_base_adic_ir_w) * 10, 100);
			end if;
			 
			vl_ir_total_w	:= vl_ir_normal_w + vl_ir_adicional_w;
			end;
		end if;
		 
		vl_adicao_mes_w			:= vl_adicao_mes_w + vl_csll_normal_w;	
		 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (75, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Adições ' || initcap(obter_desc_mes_ano(dt_referencia_w,'A')), 
			vl_adicao_mes_w, 
			clock_timestamp(), 
			nm_usuario_p);
		 
		/*Lucro/Prejuizo antes de compensação*/
 
		/*vl_adicao_ano_w			:= vl_adicao_ano_w + vl_csll_normal_w; 
		vl_lucro_prej_antes_comp_w	:= vl_lucro_liq_w + vl_adicao_ano_w - vl_exclusao_ano_w; 
		ds_lucro_prej_antes_comp_w	:= 'LUCRO REAL ANTES DE COMPENSAÇÃO DO PREJUIZO'; 
		if	(vl_lucro_prej_antes_comp_w < 0) then 
			ds_lucro_prej_antes_comp_w	:= 'PREJUIZO REAL'; 
		end if; 
		insert into w_lalur( 
			ie_informacao,	nr_seq_mes_ref, 
			dt_referencia,	ds_historico, 
			vl_referencia, 
			dt_atualizacao,	nm_usuario) 
		values(	76,		nr_seq_mes_ref_w, 
			dt_referencia_w,	ds_lucro_prej_antes_comp_w, 
			vl_lucro_prej_antes_comp_w, 
			sysdate,		nm_usuario_p);*/
 
		 
		 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (7, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Imposto de Renda (Aliquota 15%)', 
			vl_ir_normal_w, 
			clock_timestamp(), 
			nm_usuario_p);
 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (8, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Adicional 10% do Vlr do Lucro Real acima de R$' || vl_base_adic_ir_w, 
			vl_ir_adicional_w, 
			clock_timestamp(), 
			nm_usuario_p);
 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (9, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'Total do imposto de Renda devido no período', 
			vl_ir_total_w, 
			clock_timestamp(), 
			nm_usuario_p);
 
		/*Compensações do Imposto de renda*/
 
		insert into w_lalur(ie_informacao, 
			nr_seq_mes_ref, 
			dt_referencia, 
			ds_historico, 
			vl_referencia, 
			dt_atualizacao, 
			nm_usuario) 
		values (15, 
			nr_seq_mes_ref_w, 
			dt_referencia_w, 
			'(-) Valor do IR recolhido nos meses anteriores', 
			vl_compensacao_ir_w, 
			clock_timestamp(), 
			nm_usuario_p);
 
		if (vl_lucro_prej_real_periodo_w > 0) then 
			select	coalesce(sum(vl_movimento),0) 
			into STRICT	vl_contas_comp_ir_w 
			from	ctb_balancete_v 
			where	cd_estabelecimento		= cd_estabelecimento_p 
			and	ie_normal_encerramento	= 'N' 
			and	nr_seq_mes_ref		= nr_seq_mes_ref_w 
			and	cd_conta_contabil	in (SELECT	cd_conta_ir 
								from 	conta_ir_lalur 
								where	nr_seq_lalur	= nr_sequencia_w 
								and	ie_tributo in ('A','IR'));
 
			vl_compensacao_ir_w	:= vl_compensacao_ir_w + vl_contas_comp_ir_w;
 
			insert into w_lalur(ie_informacao, 
				nr_seq_mes_ref, 
				dt_referencia, 
				ds_historico, 
				vl_referencia, 
				dt_atualizacao, 
				nm_usuario) 
			values (16, 
				nr_seq_mes_ref_w, 
				dt_referencia_w, 
				'IRF S/ aplicação financeira', 
				vl_contas_comp_ir_w, 
				clock_timestamp(), 
				nm_usuario_p);
 
			insert into w_lalur(ie_informacao, 
				nr_seq_mes_ref, 
				dt_referencia, 
				ds_historico, 
				vl_referencia, 
				dt_atualizacao, 
				nm_usuario) 
			values (17, 
				nr_seq_mes_ref_w, 
				dt_referencia_w, 
				'Saldo a recolher', 
				vl_ir_total_w - vl_compensacao_ir_w, 
				clock_timestamp(), 
				nm_usuario_p);
		end if;
		end;
	end if;
	end;
end loop;
close C01;
 
ds_historico_w		:= 'Prejuizo';
vl_debito_w		:= 0;
vl_credito_w		:= 0;
vl_prejuizo_acum_w	:= 0;
 
ds_historico_w			:= 'Compensação';
 
if (vl_lucro_prej_real_periodo_w < 0) then 
	ds_historico_w		:= 'Prejuizo';
	vl_prejuizo_acum_w	:= vl_lucro_prej_real_periodo_w;
end if;
 
if (vl_prejuizo_acum_ant_w > vl_compensacao_w) then 
	vl_debito_w	:= coalesce(abs(vl_compensacao_w), 0);
	vl_saldo_w	:= coalesce(vl_compensacao_w, 0);
else 
	vl_credito_w	:= coalesce(abs(vl_prejuizo_acum_w), 0);
	vl_saldo_w	:= coalesce(vl_prejuizo_acum_w, 0);
end if;
 
update	livro_lalur 
set	vl_prejuizo_acum	= vl_prejuizo_acum_w 
where	cd_empresa		= cd_empresa_p 
and	(dt_ano)::numeric 	= dt_ano_w;
 
select	count(1) 
into STRICT	qt_existe_w 
from	livro_lalur 
where	cd_empresa		= cd_empresa_p 
and	(dt_ano)::numeric 	= dt_ano_w + 1  LIMIT 1;
 
if (qt_existe_w > 0) then 
	update	livro_lalur 
	set	vl_prejuizo_acum_ant = vl_prejuizo_acum_w 
	where	cd_empresa		= cd_empresa_p 
	and	(dt_ano)::numeric 	= dt_ano_w + 1;
else 
	insert into livro_lalur(nr_sequencia, 
		cd_empresa, 
		dt_atualizacao, 
		nm_usuario, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		dt_ano, 
		cd_conta_lucro_liq, 
		vl_prejuizo_acum, 
		vl_prejuizo_acum_ant) 
	SELECT	nextval('livro_lalur_seq'), 
		cd_empresa, 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		(dt_ano)::numeric  + 1, 
		cd_conta_lucro_liq, 
		0, 
		vl_prejuizo_acum_w 
	from	livro_lalur 
	where	cd_empresa		= cd_empresa_p 
	and	(dt_ano)::numeric 	= dt_ano_w;
end if;
 
insert into w_lalur_b(dt_referencia, 
	ds_historico, 
	vl_prejuizo_acum, 
	vl_debito, 
	vl_credito, 
	vl_saldo) 
values (fim_ano(dt_referencia_w), 
	ds_historico_w, 
	vl_prejuizo_acum_ant_w, 
	vl_debito_w, 
	vl_credito_w, 
	vl_saldo_w);
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_lalur ( dt_ano_p text, cd_empresa_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

