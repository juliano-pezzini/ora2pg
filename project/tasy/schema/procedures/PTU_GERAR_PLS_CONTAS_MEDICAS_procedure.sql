-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_pls_contas_medicas ( nr_sequencia_p ptu_fatura.nr_sequencia%type, nr_seq_lote_conta_p INOUT pls_lote_protocolo_conta.nr_sequencia%type, ds_erro_p INOUT text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_protocolo_w		bigint;
nr_seq_outorgante_w		bigint;
cd_estabelecimento_w		bigint;
cd_unimed_destino_w		varchar(10);
cd_unimed_origem_w		varchar(10);
dt_geracao_w			timestamp;
nr_competencia_w		bigint;
nr_fatura_w			ptu_fatura.nr_fatura%type;
dt_vencimento_fatura_w		timestamp;
dt_emissao_fatura_w		timestamp;
vl_total_fatura_w		double precision;
nr_versao_transacao_w		bigint;
nr_seq_fatura_w			bigint;
nr_seq_congenere_w		bigint;
nr_seq_lote_protocolo_w		bigint;
nr_seq_lote_conta_w		bigint;
nr_seq_acao_w			bigint;
qt_registro_w			bigint;
ie_dt_protocolo_a500_w		varchar(2);
ie_status_w			varchar(2);
qt_contas_w			bigint;
vl_parametro_w			varchar(255);
dt_recebimento_w		timestamp;
nr_ver_tiss_w			ptu_nota_cobranca.nr_ver_tiss%type;
qt_conta_w			integer;
ie_tipo_arquivo_cob_w		ptu_fatura.ie_tipo_arquivo_cob%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;

C01 CURSOR(	nr_seq_ptu_fatura_pc	ptu_fatura.nr_sequencia%type,
		cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type,
		ie_dt_protocolo_a500_pc	text) FOR
	SELECT	f.nr_sequencia,
		f.cd_estabelecimento,
		f.cd_unimed_destino,
		f.cd_unimed_origem,
		CASE WHEN coalesce(ie_dt_protocolo_a500_pc,'DG')='DG' THEN f.dt_geracao WHEN coalesce(ie_dt_protocolo_a500_pc,'DG')='DR' THEN f.dt_recebimento_fatura END  dt_geracao,
		f.nr_competencia,
		substr(f.nr_fatura,1,10) nr_fatura,
		f.dt_vencimento_fatura,
		f.dt_emissao_fatura,
		f.vl_total_fatura,
		f.nr_versao_transacao,
		f.ie_status,
		f.dt_recebimento_fatura,
		f.ie_tipo_arquivo_cob,
		(SELECT	max(c.nr_ver_tiss)
		from	ptu_nota_cobranca c
		where	c.nr_seq_fatura = f.nr_sequencia) nr_ver_tiss,
		null nr_seq_segurado
	from	ptu_fatura	f
	where	f.nr_sequencia	= nr_seq_ptu_fatura_pc
	and	f.ie_tipo_arquivo_cob	= '502'
	
union

	select	f.nr_sequencia,
		f.cd_estabelecimento, 
		f.cd_unimed_destino,
		f.cd_unimed_origem,
		CASE WHEN coalesce(ie_dt_protocolo_a500_pc,'DG')='DG' THEN f.dt_geracao WHEN coalesce(ie_dt_protocolo_a500_pc,'DG')='DR' THEN f.dt_recebimento_fatura END  dt_geracao,
		f.nr_competencia,
		substr(f.nr_fatura,1,20) nr_fatura,
		f.dt_vencimento_fatura,
		f.dt_emissao_fatura,
		f.vl_total_fatura,
		f.nr_versao_transacao,
		f.ie_status,
		f.dt_recebimento_fatura,
		f.ie_tipo_arquivo_cob,
		null nr_ver_tiss,
		pls_obter_segurado_carteira(lpad(to_char(c.cd_unimed),4,'0')||c.id_benef,cd_estabelecimento_pc) nr_seq_segurado
	from	ptu_fatura		f,
		ptu_nota_cobranca_rrs	c
	where	f.nr_sequencia	= c.nr_seq_fatura
	and	f.nr_sequencia	= nr_seq_ptu_fatura_pc
	and	f.ie_tipo_arquivo_cob	= '507';

BEGIN

CALL pls_grava_log_proces_imp_a500('Inicio ptu_gerar_pls_contas_medicas', nr_sequencia_p, nm_usuario_p);

ds_erro_p := null;
-- Colocar qualquer tratamento SEMPRE dentro do EXCEPTION
begin
select	count(1)
into STRICT	qt_registro_w
from	pls_protocolo_conta b,
	ptu_fatura a
where	b.nr_sequencia	= a.nr_seq_protocolo
and	a.nr_sequencia	= nr_sequencia_p;

select 	count(1)
into STRICT	qt_conta_w
from	pls_conta
where	nr_seq_fatura	= nr_sequencia_p;

/* Verificar se ja nao tem protocolo gerado para a fatura */

if (qt_registro_w 	= 0) and (qt_conta_w	= 0) then

	select	max(ie_dt_protocolo_a500)
	into STRICT	ie_dt_protocolo_a500_w
	from	pls_parametros
	where	cd_estabelecimento	= cd_estabelecimento_p;
		
	vl_parametro_w := Obter_Param_Usuario(1293, 17, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, vl_parametro_w);
	
	select	max(nr_sequencia)
	into STRICT	nr_seq_outorgante_w
	from	pls_outorgante;
	
	for r_c01_w in c01( nr_sequencia_p, cd_estabelecimento_p, ie_dt_protocolo_a500_w ) loop
		nr_seq_fatura_w		:= r_c01_w.nr_sequencia;
		cd_estabelecimento_w	:= r_c01_w.cd_estabelecimento;
		cd_unimed_destino_w	:= r_c01_w.cd_unimed_destino;
		cd_unimed_origem_w	:= r_c01_w.cd_unimed_origem;
		dt_geracao_w		:= r_c01_w.dt_geracao;
		nr_competencia_w	:= r_c01_w.nr_competencia;
		nr_fatura_w		:= r_c01_w.nr_fatura;
		dt_vencimento_fatura_w	:= r_c01_w.dt_vencimento_fatura;
		dt_emissao_fatura_w	:= r_c01_w.dt_emissao_fatura;
		vl_total_fatura_w	:= r_c01_w.vl_total_fatura;
		nr_versao_transacao_w	:= r_c01_w.nr_versao_transacao;
		ie_status_w		:= r_c01_w.ie_status;
		dt_recebimento_w	:= r_c01_w.dt_recebimento_fatura;
		ie_tipo_arquivo_cob_w	:= r_c01_w.ie_tipo_arquivo_cob;
		nr_ver_tiss_w		:= r_c01_w.nr_ver_tiss;
		nr_seq_segurado_w	:= r_c01_w.nr_seq_segurado;
		nr_seq_protocolo_w	:= null;
		
		update	ptu_fatura
		set	dt_mes_competencia	= CASE WHEN vl_parametro_w='S' THEN dt_recebimento_w  ELSE dt_mes_competencia END
		where	nr_sequencia		= nr_sequencia_p;

		if (ie_status_w <> 'I') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_congenere_w
			from	pls_congenere
			where	somente_numero(cd_cooperativa)	= somente_numero(cd_unimed_origem_w);

			/*Gerar o Lotes de Protocolo com os protocolos gerados. Todos os protocolos gerados na mesma importacao seram particioantes do mesmo lote*/

			if (coalesce(nr_seq_lote_protocolo_w::text, '') = '') then
				insert	into pls_lote_protocolo_conta(nr_sequencia, 				dt_atualizacao, 	dt_atualizacao_nrec,
					nm_usuario, 				nm_usuario_nrec, 	dt_lote,
					nr_seq_congenere, 			ie_tipo_lote, 		cd_estabelecimento,
					ie_origem_analise)		
				values (nextval('pls_lote_protocolo_conta_seq'), 	clock_timestamp(), 		clock_timestamp(),
					nm_usuario_p, 				nm_usuario_p, 		clock_timestamp(),
					nr_seq_congenere_w, 			'I', 			cd_estabelecimento_p, 
					2) returning nr_sequencia into nr_seq_lote_protocolo_w;
			end if;

			if (ie_tipo_arquivo_cob_w = '507') then
				select	max(p.nr_sequencia)
				into STRICT	nr_seq_protocolo_w
				from	pls_protocolo_conta p,
					pls_conta c
				where	p.nr_sequencia		= c.nr_seq_protocolo
				and	p.nr_seq_segurado	= nr_seq_segurado_w
				and	p.nr_seq_lote_conta	= nr_seq_lote_protocolo_w
				and	c.nr_seq_fatura		= nr_seq_fatura_w
				and	p.ie_tipo_protocolo	= 'R';
			end if;

			if (coalesce(nr_seq_protocolo_w::text, '') = '') then
				insert into pls_protocolo_conta(nr_sequencia, 				dt_atualizacao, 				nm_usuario,
					dt_atualizacao_nrec,			nm_usuario_nrec,				dt_protocolo,
					dt_mes_competencia, 			nr_protocolo_prestador, 			nr_seq_prestador,
					nr_seq_outorgante, 			ie_apresentacao,				ds_observacao,
					dt_integracao, 				nm_usuario_integracao,				ie_status, 
					ie_situacao, 				ie_tipo_protocolo,				cd_estabelecimento, 
					dt_base_venc, 				nr_seq_congenere,				nr_seq_lote_conta, 
					ie_origem_protocolo, 			dt_recebimento,					cd_versao_tiss,
					nr_seq_segurado)
				values (nextval('pls_protocolo_conta_seq'), 	clock_timestamp(), 					nm_usuario_p,
					clock_timestamp(), 				nm_usuario_p, 					dt_geracao_w,
					dt_recebimento_w, 			nr_fatura_w, 					null, 
					nr_seq_outorgante_w, 			'A',						null, 
					dt_emissao_fatura_w, 			'', 						'1', 
					'I', 					CASE WHEN ie_tipo_arquivo_cob_w='502' THEN 'I'  ELSE 'R' END , 	cd_estabelecimento_p, 
					clock_timestamp(), 				nr_seq_congenere_w,				nr_seq_lote_protocolo_w,
					'A',					dt_recebimento_w,				nr_ver_tiss_w,
					nr_seq_segurado_w) returning nr_sequencia into nr_seq_protocolo_w;
			end if;

			if (ie_tipo_arquivo_cob_w = '502') then
				CALL ptu_gerar_pls_conta( nr_seq_fatura_w, nr_seq_protocolo_w, cd_estabelecimento_p, nm_usuario_p);
			else
				CALL ptu_gerar_pls_conta_reemb( nr_seq_fatura_w, nr_seq_protocolo_w, nr_seq_segurado_w, cd_estabelecimento_p, nm_usuario_p);
			end if;

			select	nr_seq_lote_conta
			into STRICT	nr_seq_lote_conta_w
			from	pls_protocolo_conta a
			where	nr_sequencia	= nr_seq_protocolo_w;
			
			select	count(1)
			into STRICT	qt_contas_w
			from	pls_conta
			where	nr_seq_protocolo	= nr_seq_protocolo_w;
			
			update	pls_protocolo_conta
			set	qt_contas_informadas	= qt_contas_w
			where	nr_sequencia		= nr_seq_protocolo_w;
			
			nr_seq_lote_conta_p := nr_seq_lote_conta_w;
			
			update	ptu_fatura
			set	nr_seq_protocolo	= nr_seq_protocolo_w
			where	nr_sequencia		= nr_sequencia_p;
		end if;
	end loop;
end if;

exception
when others then
	ds_erro_p := 	substr('Erro: ' || sqlerrm || pls_util_pck.enter_w ||
			'Error Back Trace: ' || dbms_utility.format_error_backtrace,1,255);
end;

commit;

CALL pls_grava_log_proces_imp_a500('Fim ptu_gerar_pls_contas_medicas', nr_sequencia_p, nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_pls_contas_medicas ( nr_sequencia_p ptu_fatura.nr_sequencia%type, nr_seq_lote_conta_p INOUT pls_lote_protocolo_conta.nr_sequencia%type, ds_erro_p INOUT text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

