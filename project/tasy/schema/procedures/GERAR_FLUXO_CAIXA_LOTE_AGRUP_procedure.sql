-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_fluxo_caixa_lote_agrup (cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_final_p timestamp, ie_classif_fluxo_p text, nm_usuario_p text, cd_empresa_p bigint, ie_restringe_estab_p text, cd_moeda_p bigint default null) AS $body$
DECLARE

 
/*--------------------------------------------------------------- ATENÇÃO ----------------------------------------------------------------*/
 
/* Cuidado ao realizar alterações no fluxo de caixa em lote. Toda e qualquer alteração realizada em qualquer uma */
 
/* das procedures do fluxo de caixa em lote deve ser cuidadosamente verificada e realizada no fluxo de caixa   */
 
/* convencional. Devemos garantir que os dois fluxos de caixa tragam os mesmos valores no resultado, evitando   */
 
/* assim que existam diferenças entre os fluxos de caixa.                                                */
 
/*--------------- AO ALTERAR O FLUXO DE CAIXA EM LOTE ALTERAR TAMBÉM O FLUXO DE CAIXA ---------------*/
 
 
cd_conta_financ_w		bigint;
cd_conta_financ_agrup_w		bigint;
vl_fluxo_w			double precision;
dt_referencia_w			timestamp;
ie_integracao_w			varchar(4);
ie_acumular_w			conta_financeira.ie_acumular%type;
ie_inverte_valor_w		conta_financ_agrup.ie_inverte_valor%type;
vl_total_fluxo_w		fluxo_caixa_item.vl_fluxo%type;
nr_seq_lote_fluxo_w		bigint;
dt_inicio_w			timestamp;
dt_final_w			timestamp;
/* Projeto Multimoeda - Variáveis */
cd_moeda_estrang_w		integer;
cd_moeda_empresa_w		integer;

c01 CURSOR FOR 
SELECT	a.cd_conta_financ, 
	a.ie_acumular 
from	conta_financeira a 
where	obter_se_conta_financ_estab(a.cd_conta_financ, cd_estabelecimento_p, ie_restringe_estab_p) = 'S' 
and	exists (SELECT	1 
	from	conta_financeira e, 
		conta_financ_agrup d 
	where	e.ie_situacao 		= 'A' 
	and	d.cd_conta_financ_agrup	= e.cd_conta_financ 
	and	d.cd_conta_financ	= a.cd_conta_financ) 
and	a.ie_oper_fluxo		= 'I' 
and	a.cd_empresa		= cd_empresa_p 
order by cd_conta_apres;

c02 CURSOR FOR 
SELECT	a.cd_conta_financ_agrup, 
	coalesce(a.ie_inverte_valor,'N') 
from	conta_financ_agrup a, 
	conta_financeira b 
where	a.cd_conta_financ_agrup = b.cd_conta_financ 
and	a.cd_conta_financ	= cd_conta_financ_w 
order by cd_conta_apres;

c03 CURSOR FOR 
SELECT	CASE WHEN b.ie_oper_fluxo='S' THEN  sum(c.vl_fluxo) WHEN b.ie_oper_fluxo='F' THEN  sum(c.vl_fluxo) WHEN b.ie_oper_fluxo='D' THEN  sum(c.vl_fluxo) * -1 WHEN b.ie_oper_fluxo='A' THEN  sum(c.vl_fluxo) WHEN b.ie_oper_fluxo='I' THEN  sum(c.vl_fluxo)  ELSE 0 END , 
	trunc(c.dt_referencia, 'dd') dt_referencia, 
	c.ie_integracao, 
	a.nr_sequencia 
from	conta_financeira b, 
	fluxo_caixa_lote a, 
	fluxo_caixa_item c 
where	c.dt_referencia 	between dt_inicio_w and dt_final_w 
and	a.nr_sequencia		= c.nr_seq_lote_fluxo 
and	c.cd_conta_financ	= cd_conta_financ_agrup_w 
and	a.ie_classif_fluxo	= ie_classif_fluxo_p 
and	c.cd_conta_financ	= b.cd_conta_financ 
and	b.ie_situacao		= 'A' 
and	coalesce(c.cd_moeda,cd_moeda_empresa_w) = coalesce(cd_moeda_estrang_w,cd_moeda_empresa_w) --Projeto Multimoeda - Busca apenas os registros da moeda relacionada 
group by trunc(c.dt_referencia, 'dd'), 
	c.ie_integracao, 
	b.ie_oper_fluxo, 
	a.nr_sequencia 
order by dt_referencia;


BEGIN 
 
dt_inicio_w	:= trunc(dt_inicio_p,'dd');
dt_final_w	:= fim_dia(dt_final_p);
 
/* Projeto Multimoeda - Busca a moeda padrão da empresa e verifica o parâmetro cd_moeda passado na procedure. Ele será a base da busca dos dados 
		em moeda estrangeira. Caso o parâmetro seja nulo, deverá ser considerada a moeda padrão da empresa nas consultas, 
		caso contrário irá buscar somente os dados na moeda selecionada.*/
 
select obter_moeda_padrao_empresa(cd_estabelecimento_p,'E') 
into STRICT cd_moeda_empresa_w
;
if (coalesce(cd_moeda_p::text, '') = '') then 
	cd_moeda_estrang_w := cd_moeda_empresa_w;
else 
	cd_moeda_estrang_w := cd_moeda_p;
end if;
 
open	c01;
loop 
fetch	c01 into 
	cd_conta_financ_w, 
	ie_acumular_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	 
	open	c02;
	loop 
	fetch	c02 into 
		cd_conta_financ_agrup_w, 
		ie_inverte_valor_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		 
		open	c03;
		loop 
		fetch	c03 into 
			vl_fluxo_w, 
			dt_referencia_w, 
			ie_integracao_w, 
			nr_seq_lote_fluxo_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			 
			if (coalesce(ie_inverte_valor_w,'N') = 'S') then 
				vl_fluxo_w := coalesce(vl_fluxo_w,0) * -1;
			end if;
			 
			if (coalesce(ie_acumular_w,'N') = 'S') then 
				vl_total_fluxo_w := coalesce(vl_total_fluxo_w,0) + coalesce(vl_fluxo_w,0);
			else 
				vl_total_fluxo_w := coalesce(vl_fluxo_w,0);
			end if;
 
			CALL gerar_fluxo_caixa_lote(	dt_referencia_w, 
						cd_conta_financ_w, 
						'', 
						'13', 
						ie_integracao_w, 
						nm_usuario_p, 
						null, 
						null, 
						null, 
						null, 
						null, 
						null, 
						null, 
						null, 
						nr_seq_lote_fluxo_w, 
						null, 
						null, 
						null, 
						null, 
						null, 
						null, 
						null, 
						vl_total_fluxo_w);
 
		end	loop;
		close	c03;
 
	end	loop;
	close	c02;
end loop;
close c01;
 
/*NAO COLOCAR COMMIT NESTA PROCEDURE*/
 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_fluxo_caixa_lote_agrup (cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_final_p timestamp, ie_classif_fluxo_p text, nm_usuario_p text, cd_empresa_p bigint, ie_restringe_estab_p text, cd_moeda_p bigint default null) FROM PUBLIC;

