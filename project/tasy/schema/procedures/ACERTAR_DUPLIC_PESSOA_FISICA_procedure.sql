-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE acertar_duplic_pessoa_fisica ( cd_pessoa_origem_p text, cd_pessoa_destino_p text, ie_acao_p text, nm_usuario_p text, ie_desab_trigger_p text, dt_acerto_p timestamp, qt_erro_p INOUT bigint, ie_altera_cpfrg_p bigint default 1) AS $body$
DECLARE


/*
R - devolve o numero de registros por tabela
T - transfere de uma pessoa para outra
*/
ds_comando_w				varchar(2000);
nm_usuario_log_w			varchar(15) := 'Ajustedupl';
ds_res_w				varchar(4000);
VarSql					varchar(1)	:= chr(39);
qt_reg_w				double precision;
qt_erro_w				bigint;
nm_tabela_w				varchar(100);
nm_atributo_w				varchar(100);
nr_sequencia_w				bigint;
cd_cargo_w				bigint;
ie_funcionario_w			varchar(10);
nr_prontuario_w				bigint;
qt_atendimento_w			bigint;
qt_atend_interno_w			bigint;
cont_foto_orig_w			bigint;
cont_foto_dest_w			bigint;
nr_cpf_w				varchar(20);
nr_identidade_w				varchar(20);
DT_ADMISSAO_HOSP_w			timestamp;
cd_sistema_ant_w			varchar(30);
nr_pront_origem_w			bigint;
dt_nascimento_w				timestamp;
ie_sexo_w				varchar(10);
ie_estado_civil_w			varchar(10);
nr_telefone_celular_w			varchar(50);
ie_grau_instrucao_w			smallint;
nr_cep_cidade_nasc_w			varchar(20);
cd_municipio_ibge_w			varchar(10);
cd_religiao_w				integer;
nr_pis_pasep_w				varchar(20);
cd_nacionalidade_w			varchar(20);
ie_dependencia_sus_w			varchar(10);
qt_altura_cm_w				real;
ie_tipo_sangue_w			varchar(10);
ie_fator_rh_w				varchar(10);
dt_obito_w				timestamp;
nr_iss_w				varchar(30);
nr_inss_w				varchar(30);
nr_cert_nasc_w				varchar(255);
ds_orgao_emissor_ci_w			pessoa_fisica.ds_orgao_emissor_ci%type;
nr_cartao_nac_sus_w			varchar(20);
cd_cbo_sus_W				integer;
cd_atividade_sus_w			smallint;
ie_vinculo_sus_W			smallint;
nr_pager_bip_w				varchar(35);
cd_medico_w				varchar(20);
dt_emissao_ci_w				timestamp;
ie_fluencia_portugues_w			varchar(10);
ie_tipo_prontuario_w			smallint;
ds_observacao_w				varchar(2000);
qt_dependente_w				smallint;
nr_seq_perfil_w				bigint;
nr_transacao_sus_w			varchar(30);
nr_cartao_estrangeiro_W			varchar(40);
dt_chegada_brasil_w			timestamp;
cd_funcionario_w			varchar(20);
dt_naturalizacao_pf_w			timestamp;
dt_emissao_ctps_w			timestamp;
nr_ctps_w				pessoa_fisica.nr_ctps%type;
nr_portaria_nat_w			varchar(20);
nr_reg_geral_estrang_w			varchar(40);
nr_serie_ctps_w				pessoa_fisica.nr_serie_ctps%type;
nr_titulo_eleitor_w			varchar(30);
uf_emissora_ctps_w			varchar(10);
sg_emissora_ci_w			varchar(10);
nr_zona_w				varchar(10);
nr_secao_w				varchar(20);
trigger_name_w				varchar(40);		
nm_tabela_ww				varchar(100) := null;	
cont_w					bigint;
nm_tabela_hd_w				varchar(255);
nm_integridade_hd_w			varchar(255);
qt_pac_hd_w				bigint;
nr_seq_conselho_w			bigint;
nr_seq_cbo_saude_w			bigint;
ds_codigo_prof_w			varchar(50);
ds_param_integ_hl7_w			varchar(4000);
ds_sep_bv_w				varchar(150);
nr_seq_pac_reab_w			bigint;
qt_pf_acerto_duplic_w			bigint;
qt_rp_pac_modelo_agendamento_w		bigint;
qt_rp_pac_agend_individual_w		bigint;
ie_alerta_reab_w			varchar(1) := 'N';
nr_prontuario_cp_w			bigint;
dt_operacao_w				timestamp;
ie_tipo_operacao_w			varchar(1);
dt_atualizacao_log_w			timestamp;
nr_seq_acerto_w				bigint;
ds_aplicacao_w				varchar(30);
nr_atend_acerto_w			bigint;
qt_sus_laudo_pac_w			bigint;
qt_titular_conv_w			bigint;
dt_geracao_pront_w			timestamp;
nr_seq_partic_destino_w			mprev_participante.nr_sequencia%type;
nr_seq_partic_origem_w			mprev_participante.nr_sequencia%type;
cd_pessoa_mae_w				pessoa_fisica.cd_pessoa_mae%type;
nm_social_w				pessoa_fisica.nm_social%type;
nr_seq_pais_w				pessoa_fisica.nr_seq_pais%type;
nr_seq_cor_pele_w			pessoa_fisica.nr_seq_cor_pele%type;
nr_ric_w				pessoa_fisica.nr_ric%type;
nr_ddd_celular_w			pessoa_fisica.nr_ddd_celular%type;
ie_rh_fraco_w				pessoa_fisica.ie_rh_fraco%type;
qt_peso_w				pessoa_fisica.qt_peso%type;
ie_revisar_w				pessoa_fisica.ie_revisar%type;
qt_peso_nasc_w				pessoa_fisica.qt_peso_nasc%type;
nr_seq_etnia_w				pessoa_fisica.nr_seq_etnia%type;
nr_seq_cor_olho_w			pessoa_fisica.nr_seq_cor_olho%type;
nr_seq_cor_cabelo_w			pessoa_fisica.nr_seq_cor_cabelo%type;
ds_email_ccih_w				pessoa_fisica.ds_email_ccih%type;
cd_cid_direta_w				pessoa_fisica.cd_cid_direta%type;
nr_ddi_celular_w			pessoa_fisica.nr_ddi_celular%type;
dt_validade_rg_w			pessoa_fisica.dt_validade_rg%type;
cd_declaracao_nasc_vivo_w	pessoa_fisica.cd_declaracao_nasc_vivo%type;
cd_nit_w					pessoa_fisica.cd_nit%type;
dt_emissao_cert_casamento_w	pessoa_fisica.dt_emissao_cert_casamento%type;
nr_cert_casamento_w			pessoa_fisica.nr_cert_casamento%type;
ie_desab_trigger_w			varchar(1);
ie_person_name_w			varchar(1) := 'N';
qt_count_integracao_w			bigint;
ie_funcionario_orig_w		pessoa_fisica.ie_funcionario%type;
ie_funcionario_dest_w		pessoa_fisica.ie_funcionario%type;
cd_medico_orig_w			pessoa_fisica.cd_medico%type;
cd_medico_dest_w			pessoa_fisica.cd_medico%type;
cd_curp_w					pessoa_fisica.cd_curp%type;
cd_rfc_w					pessoa_fisica.cd_rfc%type;
qt_atend_aberto_origem_w		bigint;
qt_atend_aberto_destino_w		bigint;
reg_integracao_p			gerar_int_padrao.reg_integracao;
qt_registros_w				bigint;
NR_SEQ_PERSON_NAME_W PESSOA_FISICA.NR_SEQ_PERSON_NAME%TYPE;
valor_zero_w				pessoa_titular_convenio.cd_usuario_convenio%type;
ie_titular_w				pessoa_titular_convenio.nr_sequencia%type;




/* obter integridades e atributos a serem atualizados */

c01 CURSOR FOR
SELECT	a.nm_tabela,
	b.nm_atributo
from 	integridade_atributo b,
     	integridade_referencial a
where 	a.nm_tabela			= b.nm_tabela
and 	a.nm_integridade_referencial		= b.nm_integridade_referencial
and 	a.nm_tabela_referencia 		= 'PESSOA_FISICA'
and 	a.nm_tabela 			<> 'MEDICO'

union

select	a.nm_tabela,
	b.nm_atributo
from 	integridade_atributo b,
     	integridade_referencial a
where 	a.nm_tabela			= b.nm_tabela
and 	a.nm_integridade_referencial		= b.nm_integridade_referencial
and 	a.nm_tabela_referencia 		= 'MEDICO'

union

select	a.nm_tabela, 
	b.nm_atributo
from 	integridade_atributo b,
     	integridade_referencial a
where 	a.nm_tabela			= b.nm_tabela
and 	a.nm_integridade_referencial		= b.nm_integridade_referencial
and 	a.nm_tabela_referencia 		= 'MEDICO_ESPECIALIDADE'

union

select	a.nm_tabela,
	b.nm_atributo
from 	integridade_atributo b,
     	integridade_referencial a
where 	a.nm_tabela			= b.nm_tabela
and 	a.nm_integridade_referencial		= b.nm_integridade_referencial
and 	a.nm_tabela_referencia		= 'COMPRADOR'

union

select 	table_name nm_tabela, 	
	column_name nm_atributo
from 	user_cons_columns
where 	TABLE_NAME like 'ONC_%'
and	((CONSTRAINT_NAME like '%PESFISI%') or (CONSTRAINT_NAME like '%MEDICO%'))

union

select 	table_name nm_tabela, 	
	column_name nm_atributo
from 	USER_CONS_COLUMNS
where 	TABLE_NAME like 'LAUDO_PACIENTE%'
and	((CONSTRAINT_NAME like '%PESFISI%') or (CONSTRAINT_NAME like '%MEDICO%'))

union

select	a.nm_tabela,
		b.nm_atributo
from 	integridade_atributo b,
     	integridade_referencial a
where 	a.nm_tabela			= b.nm_tabela
and 	a.nm_integridade_referencial		= b.nm_integridade_referencial
and 	a.nm_tabela			= 'COMPL_PF_TEL_ADIC'

union

select  table_name nm_tabela,
 	column_name nm_atributo
from  	user_cons_columns
where  	table_name = 'AGENDA_CONSULTA_HIST'
and 	constraint_name like '%PESFISI%'

union

select  table_name nm_tabela,
 	column_name nm_atributo
from  	user_cons_columns
where  	table_name = 'AGENDA_PACIENTE_HIST'
and 	constraint_name like '%PESFISI%'

union

select  table_name nm_tabela,
 	column_name nm_atributo
from  	user_cons_columns
where  	table_name = 'AGENDA_CONSULTA'
and 	constraint_name like '%PESFISI%'

union

select  table_name nm_tabela,
 	column_name nm_atributo
from  	user_cons_columns
where  	table_name like 'ATESTADO_PACIENTE'
and	constraint_name like '%ATEPACT_PROFISS_FK%'

union

select  table_name nm_tabela,
 	column_name nm_atributo
from  	user_cons_columns
where  	table_name like 'ATENDIMENTO_VISITA'
and	constraint_name like 'ATEVISI_PESFISI_FK'

union

select  table_name nm_tabela,
 	column_name nm_atributo
from  	user_cons_columns
where  	table_name like 'QUA_EVENTO_PACIENTE'
and	constraint_name like 'QUAEVPA_PESFISI_FK'

union

select  table_name nm_tabela,
 	column_name nm_atributo
from  	user_cons_columns
where  	table_name like 'AVAL_NUTRICAO'
and	constraint_name like '%AVNUTRI_PESFISI_FK%'
order by 1;

c10 CURSOR FOR
SELECT	nm_tabela,
	nm_atributo
from	w_pf_acerto_duplic
where coalesce(nm_usuario, 'Tasy') = coalesce(nm_usuario_p, 'Tasy')
order by nm_tabela;

C11 CURSOR FOR
SELECT	nm_tabela,
	nm_atributo
from	w_pf_acerto_duplic
where	nm_tabela = 'PLS_PRESTADOR_PAGTO'
and coalesce(nm_usuario, 'Tasy') = coalesce(nm_usuario_p, 'Tasy')
order by nm_tabela;

c02 CURSOR FOR
SELECT	a.trigger_name
from	user_triggers A
where	a.table_name	= nm_tabela_w
and (exists (select	1 				-- Edgar 20/07/2009, OS 145473, desabilitar as triggers conforme necessidade do cliente
			from 	W_TRIGGER_DUPLIC_PF x
			where	upper(x.NM_TRIGGER)	= a.trigger_name));

c04 CURSOR FOR
SELECT	NM_TABELA,
	NM_INTEGRIDADE_REFERENCIAL
FROM	INTEGRIDADE_REFERENCIAL
WHERE	NM_TABELA_REFERENCIA	= 'HD_PAC_RENAL_CRONICO';

c05 CURSOR FOR
SELECT	nr_sequencia
from 	rp_paciente_reabilitacao			
where	cd_pessoa_fisica = cd_pessoa_origem_p
order	by 1;

C06 CURSOR FOR
SELECT	distinct	
	nr_prontuario,
	dt_operacao,
	ie_tipo_operacao
from	prontuario_controle
where	nr_prontuario = nr_pront_origem_w;


C07 CURSOR FOR
	SELECT 	'Tasy' ds_base,
		a.nr_atendimento
	from   	atendimento_paciente_v a
	where  	a.cd_pessoa_fisica     = cd_pessoa_origem_p
	
union all

	SELECT 	'TasyMed' ds_base,
		a.nr_atendimento
	from   	med_cliente b,
		med_atendimento a	
	where  	a.nr_seq_cliente = b.nr_sequencia
	and	b.cd_pessoa_fisica = cd_pessoa_origem_p
	order by 1,2;

  PROCEDURE VERIFICA_TRIGGERS_TABLE_FK(NM_TABLE_REF_P text, SQLERRM_P text) IS
    TRIGGERS_W varchar(4000) := '';
    NM_CONSTRAINT_W INTEGRIDADE_REFERENCIAL.NM_INTEGRIDADE_REFERENCIAL%TYPE;

BEGIN
    NM_CONSTRAINT_W := SUBSTR(SQLERRM_P, position('(' in SQLERRM_P) + 1, position(')' in SQLERRM_P) - position('(' in SQLERRM_P) - 1);

    FOR X IN (SELECT T.TRIGGER_NAME || CASE WHEN coalesce(T.NR_SEQUENCIA::text, '') = '' THEN  ''  ELSE ' (PHILIPS)' END  TRIGGER_NAME
              FROM INTEGRIDADE_REFERENCIAL IR,
                   (SELECT UT.TABLE_NAME, UT.TRIGGER_NAME, OS.NR_SEQUENCIA
                      FROM USER_TRIGGERS UT
                      LEFT JOIN OBJETO_SISTEMA OS ON (UPPER(OS.IE_TIPO_OBJETO) = 'TRIGGER'
                                                  AND UT.TRIGGER_NAME = OS.NM_OBJETO)
                     WHERE 1=1 --UT.TRIGGERING_EVENT LIKE '%DELETE%'
                     AND UT.STATUS = 'ENABLED'
                     AND coalesce(OS.NR_SEQUENCIA::text, '') = ''
					 AND UT.TRIGGER_NAME NOT LIKE '%_TP') T
             WHERE IR.NM_TABELA_REFERENCIA = NM_TABLE_REF_P
               AND IR.NM_INTEGRIDADE_REFERENCIAL = SUBSTR(NM_CONSTRAINT_W, position('.' in NM_CONSTRAINT_W) + 1)
               AND IR.NM_TABELA = T.TABLE_NAME
               AND NOT EXISTS (SELECT 1 FROM W_TRIGGER_DUPLIC_PF X
                               WHERE UPPER(X.NM_TRIGGER) = UPPER(T.TRIGGER_NAME ))) LOOP
      IF (coalesce(trim(both TRIGGERS_W)::text, '') = '') THEN
         TRIGGERS_W := X.TRIGGER_NAME;
      ELSE
         TRIGGERS_W := TRIGGERS_W || ', ' || X.TRIGGER_NAME;
      END IF;
    END LOOP;

    IF ((trim(both TRIGGERS_W) IS NOT NULL AND (trim(both TRIGGERS_W))::text <> '')) THEN
       CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(1061842, 'DS_TRIGGER='||TRIGGERS_W);
    ELSE
       CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(279336, 'DS_ERRO_P=' || SUBSTR(SQLERRM_P, position(':' in SQLERRM_P) + 1));
    END IF;
  END;

  PROCEDURE INTEGRA_BIFROST IS
    JSON_ADT_A08_W        PHILIPS_JSON;
    JSON_PATIENT_W        PHILIPS_JSON;
    DS_EVENT_W            VARCHAR2(100) := 'patient.mergePatient_ADT_A40';
    DS_MESSAGE_RESPONSE_W CLOB;

    NM_PESSOA_FISICA_W    PESSOA_FISICA.NM_PESSOA_FISICA%TYPE;
    DS_GIVEN_NAME_W       PERSON_NAME.DS_GIVEN_NAME%TYPE;
    DS_FAMILY_NAME_W      PERSON_NAME.DS_FAMILY_NAME%TYPE;
    DS_COMPONENT_NAME_1_W PERSON_NAME.DS_COMPONENT_NAME_1%TYPE;
  BEGIN
    NM_PESSOA_FISICA_W := OBTER_NOME_PF(CD_PESSOA_DESTINO_P);

    IF (NR_SEQ_PERSON_NAME_W IS NOT NULL AND NR_SEQ_PERSON_NAME_W::text <> '') THEN
      SELECT MAX(PN.DS_GIVEN_NAME), MAX(PN.DS_FAMILY_NAME), MAX(PN.DS_COMPONENT_NAME_1)
        INTO STRICT DS_GIVEN_NAME_W, DS_FAMILY_NAME_W, DS_COMPONENT_NAME_1_W
        FROM PERSON_NAME PN
       WHERE PN.NR_SEQUENCIA = NR_SEQ_PERSON_NAME_W;
    END IF;

    IF (coalesce(trim(both DS_GIVEN_NAME_W)::text, '') = ''
    AND coalesce(trim(both DS_FAMILY_NAME_W)::text, '') = ''
    AND coalesce(trim(both DS_COMPONENT_NAME_1_W)::text, '') = '') THEN
      SELECT OBTER_PARTE_NOME_PF(NM_PESSOA_FISICA_W, 'nome'),
             OBTER_PARTE_NOME_PF(NM_PESSOA_FISICA_W, 'sobrenome'),
             OBTER_PARTE_NOME_PF(NM_PESSOA_FISICA_W, 'restonome')
        INTO STRICT DS_GIVEN_NAME_W, DS_FAMILY_NAME_W, DS_COMPONENT_NAME_1_W
;
    END IF;

    JSON_ADT_A08_W := PHILIPS_JSON();
    JSON_ADT_A08_W.PUT('CD_PESSOA_FISICA', CD_PESSOA_DESTINO_P);
    JSON_ADT_A08_W.PUT('CD_PESSOA_FISICA_OLD', CD_PESSOA_ORIGEM_P);
    JSON_ADT_A08_W.PUT('NM_PESSOA_FISICA', NM_PESSOA_FISICA_W);
    JSON_ADT_A08_W.PUT('DT_NASCIMENTO', DT_NASCIMENTO_W);
    JSON_ADT_A08_W.PUT('IE_SEXO', IE_SEXO_W);

    JSON_ADT_A08_W.PUT('sendingApplicationNamespace', 'TASY');
    JSON_ADT_A08_W.PUT('sendingFacilityNamespace', 'PHILIPS');
    JSON_ADT_A08_W.PUT('processingID', 'P');

    JSON_PATIENT_W := PHILIPS_JSON();
    JSON_PATIENT_W.PUT('priorInternalID', CD_PESSOA_ORIGEM_P);
    JSON_PATIENT_W.PUT('internalID', CD_PESSOA_DESTINO_P);
    JSON_PATIENT_W.PUT('givenName', coalesce(DS_GIVEN_NAME_W, NM_PESSOA_FISICA_W));
    JSON_PATIENT_W.PUT('surname', DS_FAMILY_NAME_W);
    JSON_PATIENT_W.PUT('ownSurname', DS_COMPONENT_NAME_1_W);
    JSON_PATIENT_W.PUT('dateOfBirth', TO_CHAR(DT_NASCIMENTO_W, 'MM/DD/YYYY'));
    JSON_PATIENT_W.PUT('sex', IE_SEXO_W);

    JSON_ADT_A08_W.PUT('patient', JSON_PATIENT_W.TO_JSON_VALUE());

    DBMS_LOB.CREATETEMPORARY(DS_MESSAGE_RESPONSE_W, TRUE);
    JSON_ADT_A08_W.(DS_MESSAGE_RESPONSE_W);
    DS_MESSAGE_RESPONSE_W := BIFROST.SEND_INTEGRATION_CONTENT(DS_EVENT_W, DS_MESSAGE_RESPONSE_W, OBTER_USUARIO_ATIVO);
  END;

	function validar_merge_ish(
			cd_pessoa_destino_p	varchar2,
			cd_pessoa_origem_p	varchar2,
			nm_usuario_p		varchar2)
			return;
	nr_seq_fila_w		intpd_fila_transmissao.nr_sequencia%type;
	nr_seq_documento_w	intpd_fila_transmissao.nr_seq_documento%type;
	ie_status_w		intpd_fila_transmissao.ie_status%type	:= 'X';
	nr_seq_evento_sistema_w	intpd_fila_transmissao.nr_seq_evento_sistema%type;
	reg_integracao_w	gerar_int_padrao.reg_integracao;	

	pragma autonomous_transaction;
	begin

	begin
	begin
	select	nr_sequencia
	into STRICT	nr_seq_evento_sistema_w
	from	intpd_eventos_sistema
	where	nr_seq_projeto_xml = 103160
	and	ie_situacao = 'A' LIMIT 1;
	exception
	when others then
		nr_seq_evento_sistema_w	:=	'N';
	end;

	if (nr_seq_evento_sistema_w > 0) then
		begin
		nr_seq_documento_w	:=	cd_pessoa_destino_p || '|' || cd_pessoa_origem_p;

		reg_integracao_w := gerar_int_padrao.gravar_integracao('299', nr_seq_documento_w, nm_usuario_p, reg_integracao_w);
		commit;

		select	max(nr_sequencia)
		into STRICT	nr_seq_fila_w
		from	intpd_fila_transmissao a
		where	a.nr_seq_evento_sistema = nr_seq_evento_sistema_w
		and	a.ie_evento = '299'
		and	a.nr_seq_documento like nr_seq_documento_w;

		ie_status_w	:=	'R';

		if (nr_seq_fila_w > 0) then			
			update	intpd_fila_transmissao
			set	ie_status = 'R'
			where	nr_sequencia = nr_seq_fila_w;			

			CALL job_gravar_agend_integracao(614, 'NR_SEQUENCIA=' || nr_seq_fila_w, 1, null, null);			
			commit;	

			while	((ie_status_w not in ('E', 'S')) and (qt_tentativas_w < 10)) loop
				begin
				/*'Tem o sleep para aguardar o processamento da mensagem de integracao que ocorre dentro do WebServidorIntegracao'*/

				dbms_lock.sleep(1);

				select	ie_status
				into STRICT	ie_status_w
				from	intpd_fila_transmissao
				where	nr_sequencia = nr_seq_fila_w;

				qt_tentativas_w	:=	qt_tentativas_w + 1;
				end;
			end loop;
		end if;		
		end;
	end if;	
	commit;	
	exception
	when others then
		rollback;
	end;

	return;

	end;	

begin

CALL exec_sql_dinamico('ACDUPLICPF','alter trigger RASTREIO_ALTERACAO_EVOLUCAO disable');

-- Tratamento feito para funcinar em HTML5.
ie_desab_trigger_w := coalesce(ie_desab_trigger_p,'N');

if (ie_desab_trigger_p = '0') then
	ie_desab_trigger_w := 'N';
elsif (ie_desab_trigger_p = '1') then
	ie_desab_trigger_w := 'S';
end if;

ds_sep_bv_w := obter_separador_bv;

/* Oraci em 25/04/2007 OS55682	*/

if (cd_pessoa_origem_p = cd_pessoa_destino_p) then
	--rase_application_error(-20011, 'Pessoas de origem e destino informadas sao as mesmas, favor verificar. #@#@');
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(214251);
end if;

select	count(*)
into STRICT	cont_foto_orig_w
from	pessoa_fisica_foto
where	cd_pessoa_fisica	= cd_pessoa_origem_p;

select	count(*)
into STRICT	cont_foto_dest_w
from	pessoa_fisica_foto
where	cd_pessoa_fisica	= cd_pessoa_destino_p;

if (cont_foto_orig_w > 0) and (cont_foto_dest_w > 0) then
	begin
	delete from pessoa_fisica_foto
	where cd_pessoa_fisica = cd_pessoa_origem_p;
	exception
	when others then
		/*rase_application_error(-20011, 'As pessoas de origem e destino possuem fotos vinculadas, apenas uma delas pode ter foto vinculada! 
							Nao e possivel unificar as fotos da pessoa fisica.');*/
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(214252);					
	end;
end if;

/* obter prontuarios */

select	max(nr_prontuario)
into STRICT	nr_prontuario_w
from	pessoa_fisica
where	cd_pessoa_fisica = cd_pessoa_destino_p;

select	max(nr_prontuario)
into STRICT	nr_pront_origem_w
from	pessoa_fisica
where	cd_pessoa_fisica = cd_pessoa_origem_p;

--verifica se a integracao esta ativa (Christus Muguerza - Sending Patient Unification). Caso contrario nem faz a chamada para intpd_enviar_unif_persona e demais validacoes.
select	count(b.nr_sequencia)
into STRICT	qt_count_integracao_w
from	intpd_eventos a,
	intpd_eventos_sistema b
where	a.nr_sequencia = b.nr_seq_evento
and	a.ie_evento = 176
and	a.ie_situacao = 'A'
and	b.ie_situacao = 'A'  LIMIT 1;

if (ie_acao_p = 'T') and (coalesce(qt_count_integracao_w,0) > 0) then
	CALL wheb_usuario_pck.set_ie_lote_contabil('S');

	select	ie_funcionario
	into STRICT	ie_funcionario_dest_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_destino_p;

	select	ie_funcionario
	into STRICT	ie_funcionario_orig_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_origem_p;

	begin
	select	cd_pessoa_fisica
	into STRICT	cd_medico_dest_w
	from	medico
	where	cd_pessoa_fisica = cd_pessoa_destino_p;
	exception
	when others then
		cd_medico_dest_w := null;
	end;

	begin
	select	cd_pessoa_fisica
	into STRICT	cd_medico_orig_w
	from	medico
	where	cd_pessoa_fisica = cd_pessoa_origem_p;
	exception
	when others then
		cd_medico_orig_w := null;
	end;

	begin
	select	count(*)
	into STRICT	qt_atend_aberto_origem_w
	from	atendimento_paciente
	where	cd_pessoa_fisica = cd_pessoa_origem_p
	and	coalesce(dt_alta::text, '') = ''
	and	coalesce(dt_cancelamento::text, '') = '';
	exception
	when others then
		qt_atend_aberto_origem_w := 0;
	end;

	begin
	select	count(*)
	into STRICT	qt_atend_aberto_destino_w
	from	atendimento_paciente
	where	cd_pessoa_fisica = cd_pessoa_destino_p
	and	coalesce(dt_alta::text, '') = ''
	and	coalesce(dt_cancelamento::text, '') = '';
	exception
	when others then
		qt_atend_aberto_destino_w := 0;
	end;

	intpd_enviar_unif_persona(cd_pessoa_origem_p || '#' ||
						nr_pront_origem_w || '#' || 
						cd_pessoa_destino_p || '#' || 
						nr_prontuario_w || '#' ||
						ie_funcionario_dest_w || '#' || 
						ie_funcionario_orig_w || '#' || 
						cd_medico_dest_w || '#' || 
						cd_medico_orig_w || '#'|| 
						qt_atend_aberto_origem_w || '#'||
						qt_atend_aberto_destino_w,
						'N',
						nm_usuario_p);
end if;

-- Log Inicial
if (ie_acao_p = 'T') then
	open C07;
	loop
	fetch C07 into	
		ds_aplicacao_w,
		nr_atend_acerto_w;
	EXIT WHEN NOT FOUND; /* apply on C07 */
		begin

		/* manter historico atendimentos / acertos de duplicidade */

		select	nextval('atend_acerto_duplic_seq')
		into STRICT	nr_seq_acerto_w
		;

		insert into atend_acerto_duplic(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_atend_origem,
					cd_pessoa_origem,
					cd_pessoa_destino,
					ds_aplicacao)
			values (	nr_seq_acerto_w,
					clock_timestamp(), 
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,					
					nr_atend_acerto_w,
					cd_pessoa_origem_p, 
					cd_pessoa_destino_p,
					ds_aplicacao_w);		

		end;
	end loop;
	close C07;	

end if;

/* criar registro medico (se necessario), visando evitar falta do mesmo para transferencias */

if (ie_acao_p = 'T') then
	/* obter atendimentos */

	select	count(*),
		sum(CASE WHEN ie_tipo_atendimento=1 THEN 1  ELSE 0 END )
	into STRICT	qt_atendimento_w,
		qt_atend_interno_w
	from	atendimento_paciente
	where	cd_pessoa_fisica = cd_pessoa_origem_p;

	/* inserir medico */

	if (ie_desab_trigger_w = 'S') then
		CALL wheb_usuario_pck.SET_IE_EXECUTAR_TRIGGER('N');
	end if;

	insert into medico(
		cd_pessoa_fisica,
		nr_crm,
		nm_guerra,
		ie_vinculo_medico,
		dt_atualizacao,
		nm_usuario,
		cd_cgc,
		ie_cobra_pf_pj,
		ie_conveniado_sus,
		ie_auditor_sus,
		uf_crm,
		ie_situacao,
		ie_corpo_clinico,
		dt_admissao,
		dt_desligamento,
		ie_corpo_assist,
		ie_origem_inf,
		nr_seq_categoria,
		dt_atualizacao_nrec,
		nm_usuario_nrec)
	SELECT	cd_pessoa_destino_p,
		nr_crm,
		nm_guerra,
		ie_vinculo_medico,
		dt_atualizacao,
		nm_usuario,
		cd_cgc,
		ie_cobra_pf_pj,
		ie_conveniado_sus,
		ie_auditor_sus,
		uf_crm,
		ie_situacao,
		ie_corpo_clinico,
		dt_admissao,
		dt_desligamento,
		ie_corpo_assist,
		'AD',
		nr_seq_categoria,
		clock_timestamp(),
		nm_usuario_p
	from	medico
	where	cd_pessoa_fisica = cd_pessoa_origem_p
	and	not exists (	SELECT	1
				from	medico
				where	cd_pessoa_fisica = cd_pessoa_destino_p);

	CALL wheb_usuario_pck.SET_IE_EXECUTAR_TRIGGER('S');

end if;

qt_erro_w := 0;

if (ie_acao_p = 'R') then
	begin
	if (validar_merge_ish(cd_pessoa_destino_p, cd_pessoa_origem_p, nm_usuario_p) = 'E') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1174308);
	end if;

	delete	FROM w_pf_acerto_duplic where coalesce(nm_usuario, 'Tasy') = coalesce(nm_usuario_p, 'Tasy');


	/* gerar integridades e atributos a serem atualizados */

	open c01;
	loop
	fetch c01 into	nm_tabela_w,
			nm_atributo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		/* montar comando sql para obtencao da qtd registros a serem atualizados */

		ds_comando_w := 'select count(*) from ' || nm_tabela_w || ' where ' || nm_atributo_w || ' = ' || VarSql || cd_pessoa_origem_p || VarSql;

		/* tratar caso especifico prontuario x qtd */

		if (nm_atributo_w = 'NR_PRONTUARIO') and (nr_pront_origem_w IS NOT NULL AND nr_pront_origem_w::text <> '') then
			ds_comando_w := 'select count(*) from ' || nm_tabela_w || ' where ' || nm_atributo_w || ' = ' || nr_pront_origem_w;
		end if;



		qt_reg_w := obter_valor_dinamico(ds_comando_w, qt_reg_w);

		if (qt_reg_w > 0) then

			insert into w_pf_acerto_duplic(
							nm_tabela,	
							nm_atributo,
							qt_registro,
							nm_usuario
							)
			values (
							nm_tabela_w,
							nm_atributo_w,
							qt_reg_w,
							coalesce(nm_usuario_p, 'Tasy')
							);
		end if;
		end;
	end loop;
	close c01;

	ie_alerta_reab_w := obter_param_usuario(5, 151, Obter_perfil_Ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_alerta_reab_w);

	if (ie_alerta_reab_w = 'S') then

		select	count(*)
		into STRICT	qt_pf_acerto_duplic_w
		from	w_pf_acerto_duplic
		where 	nm_tabela = 'RP_PACIENTE_REABILITACAO'
		and coalesce(nm_usuario, 'Tasy') = coalesce(nm_usuario_p, 'Tasy');

		if (qt_pf_acerto_duplic_w > 0) then

			open c05;
			loop
			fetch c05 into
				nr_seq_pac_reab_w;
			EXIT WHEN NOT FOUND; /* apply on c05 */

				select	count(*)
				into STRICT	qt_rp_pac_modelo_agendamento_w
				from	rp_pac_modelo_agendamento
				where	nr_seq_pac_reab 	= nr_seq_pac_reab_w
				and	coalesce(dt_fim_tratamento::text, '') = '';				

				select	count(*)
				into STRICT	qt_rp_pac_agend_individual_w
				from	rp_pac_agend_individual
				where	nr_seq_pac_reab 	= nr_seq_pac_reab_w
				and	coalesce(dt_fim_tratamento::text, '') = '';				

				if (qt_rp_pac_modelo_agendamento_w > 0) or (qt_rp_pac_agend_individual_w > 0) then

					/*rase_application_error(-20011, 'Existem modelos de agendamento do paciente em reabilitacao sem data de fim do modelo ou tratamento individual sem  data fim tratamento. ' || chr(10) ||
									'Parametro [151] #@#@');*/
					CALL Wheb_mensagem_pck.exibir_mensagem_abort(214254);


				end if;

			end loop;
			close c05;

		end if;

	end if;

	end;
end if;


if (ie_acao_p = 'T') and (coalesce(nr_prontuario_w,0) > 0) then
	--Rase_application_error(-20011, nr_prontuario_w||' - Destino:'||cd_pessoa_destino_p||' - Origem:'||cd_pessoa_origem_p);
	/*Ajuste dos cadastros do controle de prontuario*/

	open c06;
	loop
	fetch c06 into
		nr_prontuario_cp_w,
		dt_operacao_w,
		ie_tipo_operacao_w;
	EXIT WHEN NOT FOUND; /* apply on c06 */
		begin				

		update	prontuario_controle
		set	nr_prontuario	 = nr_prontuario_w	
		where	nr_prontuario 	 = nr_prontuario_cp_w;

		CALL gravar_log_tasy(866, wheb_mensagem_pck.get_texto(799828)||': '||nr_prontuario_cp_w||
					' -  '||wheb_mensagem_pck.get_texto(799831)||': '||to_char(dt_operacao_w,pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(wheb_usuario_pck.get_cd_estabelecimento, wheb_usuario_pck.get_nm_usuario)))||
					' -  '||wheb_mensagem_pck.get_texto(799831)||': '||ie_tipo_operacao_w, nm_usuario_log_w);

		end;
	end loop;
	close c06;
end if;

if (ie_acao_p = 'T') then
	begin

	for r_C11_w in C11 loop

		nm_tabela_w := r_C11_w.nm_tabela;

		if (ie_desab_trigger_w = 'S') then
			open c02;
			loop
			fetch c02 into trigger_name_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				exec_sql_dinamico('ACDUPLICPF','alter trigger ' || trigger_name_w || ' disable');
				end;
			end loop;
			close c02;
			CALL wheb_usuario_pck.SET_IE_EXECUTAR_TRIGGER('N');
		end if;

		update	pls_prestador_pagto
		set	cd_pessoa_fisica  = NULL
		where	cd_pessoa_fisica = cd_pessoa_origem_p;

		delete	FROM w_pf_acerto_duplic
		where	nm_tabela = r_C11_w.nm_tabela
		and	nm_atributo = r_C11_w.nm_atributo
		and coalesce(nm_usuario, 'Tasy') = coalesce(nm_usuario_p, 'Tasy');

	end loop;


	open c10;
	loop
	fetch c10 into	nm_tabela_w,
			nm_atributo_w;
	EXIT WHEN NOT FOUND; /* apply on C10 */
		begin		
		begin

		if (ie_desab_trigger_w = 'S') then
			begin
			open c02;
			loop
			fetch c02 into trigger_name_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				exec_sql_dinamico('ACDUPLICPF','alter trigger ' || trigger_name_w || ' disable');
				end;
			end loop;
			close c02;
			end;
		end if;

		if (ie_desab_trigger_w	= 'S') then
			CALL wheb_usuario_pck.SET_IE_EXECUTAR_TRIGGER('N');
		end if;


		--MPREV_PARTICIPANTE
		--MPREV_POP_ALVO_PESSOA
		--PLS_CONTRATO_PAGADOR
		--HD_DIALIZADOR
		/* tratar tabelas especificas */

		if (nm_tabela_w = 'COMPL_PESSOA_FISICA') then /* complementos da pessoa fisica */
			CALL acertar_duplic_compl_pf(cd_pessoa_origem_p, cd_pessoa_destino_p); /* Oraci em 24/4/2007 OS54877 */
			CALL acertar_duplic_compl_pf_ref(cd_pessoa_origem_p, cd_pessoa_destino_p); /* Rafael em 7/4/8 OS88703 */
		elsif (nm_tabela_w = 'MED_CLIENTE') then /* cadastro de clientes TASYMED */
			CALL med_acertar_duplic_medico(cd_pessoa_origem_p, cd_pessoa_destino_p, nm_usuario_p); /* Ivan em 7/6/2007 OS57881 */
			CALL med_acertar_duplic_cliente(cd_pessoa_origem_p, cd_pessoa_destino_p, nm_usuario_p);

		elsif (nm_tabela_w = 'SAME_CPI_PRONTUARIO') then /* controles e solicitacoes de prontuarios */
			CALL acertar_duplic_prontuario(cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'LAUDO_PACIENTE') then
			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'SAME_PRONTUARIO') then /* prontuarios */
			CALL acertar_duplic_same_prontuario(cd_pessoa_origem_p,nr_pront_origem_w, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'MEDICO_TITULACAO') then /* especialidades medicas -> Titulacao da especialidade */
			CALL acertar_duplic_med_titulacao(cd_pessoa_origem_p, cd_pessoa_destino_p);	

		elsif (nm_tabela_w = 'MEDICO_ESPECIALIDADE') then /* especialidades medicas */
			CALL acertar_duplic_med_espec(cd_pessoa_origem_p, cd_pessoa_destino_p);		

		elsif (nm_tabela_w = 'TISS_CBO_SAUDE') then /* especialidades medicas -> TISS CBO Saude */
			CALL acertar_duplic_med_tiss_cbo(cd_pessoa_origem_p, cd_pessoa_destino_p);																																

		elsif (nm_tabela_w = 'TERCEIRO_PESSOA_FISICA') then /* terceiros */
			CALL acertar_duplic_med_terceiro(cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'PESSOA_CLASSIF') and
			/* Francisco - 05/08/08 - Inclui o and abaixo pra tratar o CD_PESSOA_REF como tabela generica */

			(nm_atributo_w = 'CD_PESSOA_FISICA') then /* classificacao pessoa */
			CALL acertar_duplic_pessoa_classif(cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'COMPRADOR') then /* comprador */
			CALL acertar_duplic_comprador(cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'PESSOA_PACIENTE_CONFIG') then /* Configuracao componente */
			select	count(*)
			into STRICT	cont_w
			from	pessoa_paciente_config
			where	cd_pessoa_fisica	= cd_pessoa_destino_p;

			if (cont_w > 0) then
				delete	from	pessoa_paciente_config
				where	cd_pessoa_fisica	= cd_pessoa_origem_p;
			else
				CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);
			end if;

		elsif (nm_tabela_w = 'AGENDA_CONSULTA_HIST') then

			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);
			delete	from	agenda_consulta_hist
			where	cd_pessoa_hist	= cd_pessoa_origem_p;

		elsif (nm_tabela_w = 'AGENDA_PACIENTE_HIST') then

			select	count(*)
			into STRICT	cont_w
			from	agenda_paciente_hist
			where	cd_pessoa_hist	= cd_pessoa_destino_p;

			if (cont_w > 0) then
				delete	from	agenda_paciente_hist
				where	cd_pessoa_hist	= cd_pessoa_origem_p;
			else
				CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);
				delete	from	agenda_paciente_hist
				where	cd_pessoa_hist	= cd_pessoa_origem_p;
			end if;

		elsif (nm_tabela_w = 'AGENDA_CONSULTA') then

			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'ATESTADO_PACIENTE') then

			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);


		elsif (nm_tabela_w = 'PRESCR_MEDICA') then

			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'PE_PRESCRICAO') then

			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'ATENDIMENTO_SINAL_VITAL') then

			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'SAN_DOACAO') then

			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);

		elsif (nm_tabela_w = 'HD_PAC_RENAL_CRONICO') then
			begin
			-- desabilitar constraints					
			open c04;
			loop
			fetch c04 into
				nm_tabela_hd_w,
				nm_integridade_hd_w;
			EXIT WHEN NOT FOUND; /* apply on c04 */
				CALL exec_sql_dinamico('TASY','ALTER TABLE ' || nm_tabela_hd_w || ' DISABLE CONSTRAINT ' || nm_integridade_hd_w);
			end loop;
			close c04;

			SELECT 	COUNT(*)
			INTO STRICT	qt_pac_hd_w
			FROM	HD_PAC_RENAL_CRONICO
			WHERE	cd_pessoa_fisica = cd_pessoa_destino_p;

			IF (qt_pac_hd_w > 0) THEN
				DELETE FROM HD_PAC_RENAL_CRONICO WHERE cd_pessoa_fisica = cd_pessoa_destino_p;
			END IF;			

			-- alterar cd_pessoa_fisica da tabela principal
			altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);

			-- alterar cd_pessoa_fisica das tabelas filhas
			open c04;
			loop
			fetch c04 into
				nm_tabela_hd_w,
				nm_integridade_hd_w;
			EXIT WHEN NOT FOUND; /* apply on c04 */
				CALL altera_valor_campo_tabela(nm_tabela_hd_w, 'CD_PESSOA_FISICA', cd_pessoa_origem_p, cd_pessoa_destino_p);
			end loop;
			close c04;

			-- habiltar constraints
			open c04;
			loop
			fetch c04 into
				nm_tabela_hd_w,
				nm_integridade_hd_w;
			EXIT WHEN NOT FOUND; /* apply on c04 */
				CALL exec_sql_dinamico('TASY','ALTER TABLE ' || nm_tabela_hd_w || ' ENABLE CONSTRAINT ' || nm_integridade_hd_w);
			end loop;
			close c04;
			exception
				when others then
					begin
					rollback;
					-- habiltar constraints
					open c04;
					loop
					fetch c04 into
						nm_tabela_hd_w,
						nm_integridade_hd_w;
					EXIT WHEN NOT FOUND; /* apply on c04 */
						CALL exec_sql_dinamico('TASY','ALTER TABLE ' || nm_tabela_hd_w || ' ENABLE CONSTRAINT ' || nm_integridade_hd_w);
					end loop;
					close c04;
					end;			
			end;			
		elsif (nm_tabela_w = 'COMPL_PF_TEL_ADIC') then
			CALL acertar_duplic_pf_tel_adic(cd_pessoa_origem_p, cd_pessoa_destino_p);
		elsif (nm_tabela_w = 'PESSOA_FISICA_PRONT_ESTAB') then
			CALL acertar_duplic_pront_estab(cd_pessoa_origem_p, cd_pessoa_destino_p);
		elsif (nm_tabela_w = 'PESSOA_FISICA_ESTAB') then
			begin
			update	pessoa_fisica_estab a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and not exists (	SELECT	1
					from	pessoa_fisica_estab x
					where	x.cd_pessoa_fisica = cd_pessoa_destino_p
					and	x.cd_estabelecimento = a.cd_estabelecimento);

			delete from pessoa_fisica_estab where cd_pessoa_fisica = cd_pessoa_origem_p;
			end;
		elsif (nm_tabela_w = 'ATENDIMENTO_ACOMPANHANTE') then
			begin
			update	atendimento_acompanhante a
			set		cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p;

			delete from atendimento_acompanhante where cd_pessoa_fisica = cd_pessoa_origem_p;
			end;

		elsif (nm_tabela_w = 'MEDICO_ESTABELECIMENTO') then
			begin
			update	medico_estabelecimento a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and not exists (	SELECT	1
					from	medico_estabelecimento x
					where	x.cd_pessoa_fisica = cd_pessoa_destino_p
					and	x.cd_estabelecimento = a.cd_estabelecimento);

			delete from medico_estabelecimento where cd_pessoa_fisica = cd_pessoa_origem_p;
			end;
		elsif (nm_tabela_w = 'PROFISSIONAL_ESPECIALIDADE') then
			begin
			update	profissional_especialidade a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and not exists (	SELECT	1
					from	profissional_especialidade x
					where	x.cd_pessoa_fisica = cd_pessoa_destino_p
					and	x.cd_especialidade_prof = a.cd_especialidade_prof);

			delete from profissional_especialidade where cd_pessoa_fisica = cd_pessoa_origem_p;
			end;

		elsif (nm_tabela_w = 'MPREV_PARTICIPANTE') then
			begin
			update	mprev_participante a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and not exists (	SELECT	1
					from	mprev_participante x
					where	x.cd_pessoa_fisica = cd_pessoa_destino_p);

			select	max(nr_sequencia)
			into STRICT	nr_seq_partic_origem_w
			from	mprev_participante
			where	cd_pessoa_fisica = cd_pessoa_origem_p;

			select	max(nr_sequencia)
			into STRICT	nr_seq_partic_destino_w
			from	mprev_participante
			where	cd_pessoa_fisica = cd_pessoa_destino_p;

			if (nr_seq_partic_origem_w IS NOT NULL AND nr_seq_partic_origem_w::text <> '') and (nr_seq_partic_destino_w IS NOT NULL AND nr_seq_partic_destino_w::text <> '') then

				update	mprev_atend_paciente
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_partic_tipo_atend
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_transf_part_cic_item
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_transf_resp_programa
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_suspensao_atend
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_partic_cuidador
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;			

				update	mprev_programa_partic
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_prog_partic_prof
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_partic_canc_ativ
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_grupo_turma_partic
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_campanha_partic
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_sel_partic_agenda
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				update	mprev_agendamento
				set	nr_seq_participante = nr_seq_partic_destino_w
				where	nr_seq_participante = nr_seq_partic_origem_w;

				delete	from mprev_agenda_partic_trab
				where	nr_seq_participante = nr_seq_partic_origem_w;

			end if;

			delete 	from mprev_participante
			where	cd_pessoa_fisica = cd_pessoa_origem_p;

			end;
		elsif (nm_tabela_w = 'MPREV_POP_ALVO_PESSOA') then
			begin
			update	mprev_pop_alvo_pessoa a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and not exists (	SELECT	1
					from	mprev_pop_alvo_pessoa x
					where	x.cd_pessoa_fisica = cd_pessoa_destino_p
					and	x.nr_seq_populacao_alvo = a.nr_seq_populacao_alvo);

			select	max(nr_sequencia)
			into STRICT	nr_seq_partic_origem_w
			from	mprev_pop_alvo_pessoa
			where	cd_pessoa_fisica = cd_pessoa_origem_p;

			select	max(nr_sequencia)
			into STRICT	nr_seq_partic_destino_w
			from	mprev_pop_alvo_pessoa
			where	cd_pessoa_fisica = cd_pessoa_destino_p;

			if (nr_seq_partic_origem_w IS NOT NULL AND nr_seq_partic_origem_w::text <> '') and (nr_seq_partic_destino_w IS NOT NULL AND nr_seq_partic_destino_w::text <> '') then

				update	mprev_pop_pes_diagnostico
				set	nr_seq_pop_alvo_pessoa = nr_seq_partic_destino_w
				where	nr_seq_pop_alvo_pessoa = nr_seq_partic_origem_w;

				update	mprev_pop_alvo_benef
				set	nr_seq_pop_alvo_pessoa = nr_seq_partic_destino_w
				where	nr_seq_pop_alvo_pessoa = nr_seq_partic_origem_w;

				update	mprev_pop_pes_custo
				set	nr_seq_pop_alvo_pessoa = nr_seq_partic_destino_w
				where	nr_seq_pop_alvo_pessoa = nr_seq_partic_origem_w;

				update	mprev_pop_pes_atend_proc
				set	nr_seq_pop_alvo_pessoa = nr_seq_partic_destino_w
				where	nr_seq_pop_alvo_pessoa = nr_seq_partic_origem_w;

				update	mprev_pop_pes_atend
				set	nr_seq_pop_alvo_pessoa = nr_seq_partic_destino_w
				where	nr_seq_pop_alvo_pessoa = nr_seq_partic_origem_w;

				update	mprev_captacao
				set	nr_seq_pop_alvo_pessoa = nr_seq_partic_destino_w
				where	nr_seq_pop_alvo_pessoa = nr_seq_partic_origem_w;

			end if;

			delete 	from mprev_pop_alvo_pessoa
			where	cd_pessoa_fisica = cd_pessoa_origem_p;

			end;
		elsif (nm_tabela_w = 'HD_DIALIZADOR') then
			begin
			CALL hd_ajustar_dialisador_pf_dup(cd_pessoa_origem_p,cd_pessoa_destino_p);						
			end;
		elsif (nm_tabela_w = 'IEP_PROFESSOR_DISCIPLINA') then
			begin
			update	IEP_PROFESSOR_DISCIPLINA a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and not exists (	SELECT	1
					from	IEP_PROFESSOR_DISCIPLINA x
					where	x.cd_pessoa_fisica = cd_pessoa_destino_p
					and	x.nr_seq_disciplina = a.nr_seq_disciplina);

			delete from IEP_PROFESSOR_DISCIPLINA where cd_pessoa_fisica = cd_pessoa_origem_p;
			end;	
		elsif (nm_tabela_w = 'PESSOA_ENCONTRO_CONTAS') then
			begin
			update	PESSOA_ENCONTRO_CONTAS a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and	not exists (SELECT	1
						from	PESSOA_ENCONTRO_CONTAS x
						where	x.cd_pessoa_fisica = cd_pessoa_destino_p
						and	x.NR_SEQ_LOTE	= a.NR_SEQ_LOTE);

			update	ENCONTRO_CONTAS_ITEM	a
			set	NR_SEQ_PESSOA	=	(SELECT	max(x.nr_sequencia)
							from	PESSOA_ENCONTRO_CONTAS	x
							where	x.cd_pessoa_fisica = cd_pessoa_destino_p
							and	exists (select	1
									from	PESSOA_ENCONTRO_CONTAS k
									where	k.cd_pessoa_fisica	= cd_pessoa_origem_p
									and	k.NR_SEQ_LOTE		= x.NR_SEQ_LOTE))
			where	exists (select	1
					from	PESSOA_ENCONTRO_CONTAS x
					where	x.cd_pessoa_fisica	= cd_pessoa_origem_p
					and	x.nr_sequencia		= a.NR_SEQ_PESSOA);

			delete from PESSOA_ENCONTRO_CONTAS where cd_pessoa_fisica = cd_pessoa_origem_p;
			end;
		elsif (nm_tabela_w = 'PESSOA_TITULAR_CONVENIO') then
			begin
			update	PESSOA_TITULAR_CONVENIO a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and not exists (	SELECT	1
					from	PESSOA_TITULAR_CONVENIO x
					where	x.cd_pessoa_fisica = cd_pessoa_destino_p
					and	x.CD_CONVENIO	= a.CD_CONVENIO
					and	x.CD_CATEGORIA	= a.CD_CATEGORIA
					and	x.DT_INICIO_VIGENCIA	= a.DT_INICIO_VIGENCIA
					and	coalesce(x.CD_USUARIO_CONVENIO, '0')	= coalesce(a.CD_USUARIO_CONVENIO, '0'));

			update	pessoa_titular_convenio ptc
			set		cd_pessoa_titular = cd_pessoa_destino_p
			where	cd_pessoa_titular = cd_pessoa_origem_p
			and not exists (	SELECT	1
							from	pessoa_titular_convenio pto
							where	pto.cd_pessoa_titular = cd_pessoa_destino_p
							and		pto.CD_CONVENIO	= ptc.CD_CONVENIO
							and		pto.CD_CATEGORIA	= ptc.CD_CATEGORIA
							and		pto.DT_INICIO_VIGENCIA	= ptc.DT_INICIO_VIGENCIA
							and		coalesce(pto.CD_USUARIO_CONVENIO, '0')	= coalesce(ptc.CD_USUARIO_CONVENIO, '0'));

			delete from PESSOA_TITULAR_CONVENIO where cd_pessoa_fisica = cd_pessoa_origem_p;
			delete from PESSOA_TITULAR_CONVENIO where cd_pessoa_titular = cd_pessoa_origem_p;
			end;
		elsif (nm_tabela_w = 'TEXTO_PADRAO_PESSOA_FISICA') then
			begin
			update	TEXTO_PADRAO_PESSOA_FISICA a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and not exists (	SELECT	1
					from	TEXTO_PADRAO_PESSOA_FISICA x
					where	x.cd_pessoa_fisica = cd_pessoa_destino_p
					and	x.cd_texto	= a.cd_texto);

			delete from TEXTO_PADRAO_PESSOA_FISICA where cd_pessoa_fisica = cd_pessoa_origem_p;
			end;
		elsif (nm_tabela_w = 'MPREV_GRUPO_TURMA_HOR_PROF') then
			begin
			update	MPREV_GRUPO_TURMA_HOR_PROF a
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p
			and not exists (	SELECT	1
					from	MPREV_GRUPO_TURMA_HOR_PROF x
					where	x.cd_pessoa_fisica = cd_pessoa_destino_p
					and	x.NR_SEQ_HORARIO	= a.NR_SEQ_HORARIO);

			delete from MPREV_GRUPO_TURMA_HOR_PROF where cd_pessoa_fisica = cd_pessoa_origem_p;
			end;
		elsif (nm_tabela_w = 'COBRANCA') then
			/* Por causa do tratamento realizado na trigger cobranca_atual, onde a cobranca deve ter sempre a mesma pessoa do cheque ou titulo que a originou, 
				a alteracao na titulo_receber e na cheque_cr devem ocorrer antes da tabela cobranca. OS 1388715 */
			CALL altera_valor_campo_tabela('TITULO_RECEBER', 'CD_PESSOA_FISICA', cd_pessoa_origem_p, cd_pessoa_destino_p);
			CALL altera_valor_campo_tabela('CHEQUE_CR', 'CD_PESSOA_FISICA', cd_pessoa_origem_p, cd_pessoa_destino_p);
			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);	
		elsif (nm_tabela_w = 'ATENDIMENTO_VISITA') and (nm_atributo_w = 'CD_PESSOA_FISICA') then
			update	ATENDIMENTO_VISITA
			set cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p;
		elsif (nm_tabela_w = 'CPOE_PROCEDIMENTO') and (nm_atributo_w = 'CD_PESSOA_FISICA') then
			update	cpoe_procedimento
			set	cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p;
	      elsif (nm_tabela_w = 'PESSOA_FISICA_CONTA') and (nm_atributo_w = 'CD_PESSOA_FISICA') then

			INSERT INTO pessoa_fisica_conta(nr_sequencia,
				cd_pessoa_fisica,
				cd_banco,
				cd_agencia_bancaria,
				nr_conta,
				dt_atualizacao,
				nm_usuario,
				ie_situacao,
				nr_digito_conta,
				cd_camara_compensacao,
				ie_digito_agencia,
				ie_tipo_conta,
				ie_conta_pagamento,
				ie_propriedade_conta,
				ds_observacao,
				ie_conta_repasse,
				ie_conta_pf_pj)
			SELECT	nextval('pessoa_fisica_conta_seq') AS nr_sequencia,
				cd_pessoa_destino_p             AS cd_pessoa_fisica,
				cd_banco,
				cd_agencia_bancaria,
				nr_conta,
				dt_atualizacao,
				nm_usuario,
				ie_situacao,
				nr_digito_conta,
				cd_camara_compensacao,
				ie_digito_agencia,
				ie_tipo_conta,
				ie_conta_pagamento,
				ie_propriedade_conta,
				ds_observacao,
				ie_conta_repasse,
				ie_conta_pf_pj
			FROM	pessoa_fisica_conta
			WHERE	cd_pessoa_fisica = cd_pessoa_origem_p;


			UPDATE	pessoa_fis_conta_estab
			SET	cd_pessoa_fisica = cd_pessoa_destino_p
			WHERE	cd_pessoa_fisica = cd_pessoa_origem_p;

			DELETE
			FROM	pessoa_fisica_conta
			WHERE	cd_pessoa_fisica = cd_pessoa_origem_p;

		elsif (nm_tabela_w = 'QUA_EVENTO_PACIENTE') and (nm_atributo_w = 'CD_PESSOA_FISICA') then
			update	QUA_EVENTO_PACIENTE
			set cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p;	
					/* QUA_EVENTO_PACIENTE */

		elsif (nm_tabela_w = 'VACINA_LISTA_ESPERA') and (nm_atributo_w = 'CD_PESSOA_FISICA') then
			update VACINA_LISTA_ESPERA
			set cd_pessoa_fisica = cd_pessoa_destino_p
			where	cd_pessoa_fisica = cd_pessoa_origem_p;	
					/* VACINA_LISTA_ESPERA */

		elsif (nm_tabela_w = 'PESSOA_FISICA_ESTUDANTE') and (nm_atributo_w = 'CD_PESSOA_FISICA') then

			INSERT INTO pessoa_fisica_estudante(cd_pessoa_fisica,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				dt_inicio,
				dt_fim,
				ie_situacao)
			SELECT	cd_pessoa_destino_p AS cd_pessoa_fisica,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				dt_inicio,
				dt_fim,
				ie_situacao
			FROM	pessoa_fisica_estudante
			WHERE	cd_pessoa_fisica = cd_pessoa_origem_p;


			UPDATE	liberacao_item_estudante
			SET	cd_pessoa_estudante = cd_pessoa_destino_p
			WHERE	cd_pessoa_estudante = cd_pessoa_origem_p;

			DELETE
			FROM	pessoa_fisica_estudante
			WHERE	cd_pessoa_fisica = cd_pessoa_origem_p;

		else	/* tratar tabelas genericas */
			

			/* tratar caso especifico prontuario x transf */

			if (nm_atributo_w = 'NR_PRONTUARIO') and (nr_prontuario_w IS NOT NULL AND nr_prontuario_w::text <> '') then
				CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, nr_pront_origem_w, nr_prontuario_w);
			else			
				CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);
			end if;

			/* calcular qtd de registros atualizados x obter erros */

			qt_reg_w := obter_valor_dinamico(ds_comando_w, qt_reg_w);
			if (qt_reg_w > 0) then
				ds_res_w := ds_res_w || nm_tabela_w || '=' || qt_reg_w || ',';
				if (nm_tabela_w <> 'MEDICO') and (nm_tabela_w <> 'COMPL_PESSOA_FISICA') and (nm_tabela_w <> 'MEDICO_CONVENIO') then
					qt_erro_w := qt_erro_w + 1;
				end if;
			end if;
		end if;

		exception
		when others then			
			CALL wheb_usuario_pck.SET_IE_EXECUTAR_TRIGGER('S');			
			if (ie_desab_trigger_w = 'S') then
				open c02;
				loop
				fetch c02 into trigger_name_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					begin
					CALL exec_sql_dinamico('ACDUPLICPF','alter trigger ' || trigger_name_w || ' enable');
					end;
				end loop;
				close c02;
			end if;
		end;

		/* atualizar/limpar tabela temporaria */

		delete
		from	w_pf_acerto_duplic
		where	nm_tabela = nm_tabela_w
		and	nm_atributo = nm_atributo_w
		and coalesce(nm_usuario, 'Tasy') = coalesce(nm_usuario_p, 'Tasy');
		end;

		commit;
		if (ie_desab_trigger_w = 'S') then
			open c02;
			loop
			fetch c02 into trigger_name_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				CALL exec_sql_dinamico('ACDUPLICPF','alter trigger ' || trigger_name_w || ' enable');
				end;
			end loop;
			close c02;
		end if;
	end loop;
	close c10;
	end;
end if;

if (ie_acao_p = 'T')  then
	CALL hd_ajustar_dialisador_pac(cd_pessoa_origem_p,cd_pessoa_destino_p,ie_desab_trigger_w);
	CALL altera_valor_campo_tabela('RECENT_PATIENTS_FOUND', 'CD_PESSOA_FISICA', cd_pessoa_origem_p, cd_pessoa_destino_p);	
end if;


/* gerar log tasy x acerto duplicidade */

insert into log_tasy(			
			dt_atualizacao,
			nm_usuario, 
			cd_log, 
			ds_log
			)
values (
			dt_acerto_p, 
			nm_usuario_p, 
			850, 
			substr(ds_res_w,1,2000)
			);

/* atualizar informacoes cadastro pf origem x destino e logs se acao transferencia */

if (ie_acao_p = 'T')  then
	/* gravar x manter historico acertos de duplicidade */

	select	nextval('pessoa_fisica_duplic_seq')
	into STRICT	nr_sequencia_w
	;

	insert into pessoa_fisica_duplic(
						nr_sequencia,
						cd_pessoa_fisica, 
						dt_atualizacao,
						nm_usuario,
						cd_cadastro,
						nm_paciente,
						nr_prontuario,
						qt_atendimento,
						qt_atend_interno,
						ie_acerto
						)
	SELECT					nr_sequencia_w, 
						cd_pessoa_destino_p, 
						clock_timestamp(), 
						nm_usuario_p,
						cd_pessoa_origem_p, 
						SUBSTR(OBTER_NOME_PF(cd_pessoa_fisica), 0, 60), 
						nr_prontuario,
						qt_atendimento_w, 
						qt_atend_interno_w,
						'D'
	from					pessoa_fisica
	where					cd_pessoa_fisica = cd_pessoa_origem_p;

	/* obter informacoes cadastro pf origem -> destino */

	select	coalesce(b.cd_cargo, a.cd_cargo),
		coalesce(b.ie_funcionario, a.ie_funcionario),
		coalesce(b.nr_prontuario, a.nr_prontuario),
		coalesce(b.nr_cpf, a.nr_cpf),
		coalesce(b.nr_identidade, a.nr_identidade),
		coalesce(b.DT_ADMISSAO_HOSP, a.DT_ADMISSAO_HOSP),
		coalesce(b.cd_sistema_ant, a.cd_sistema_ant),
		coalesce(b.dt_nascimento, a.dt_nascimento),
		coalesce(b.ie_sexo, a.ie_sexo),
		coalesce(b.ie_estado_civil, a.ie_estado_civil),
		coalesce(b.nr_telefone_celular, a.nr_telefone_celular),
		coalesce(b.ie_grau_instrucao, a.ie_grau_instrucao),
		coalesce(b.nr_cep_cidade_nasc, a.nr_cep_cidade_nasc),
		coalesce(b.cd_municipio_ibge, a.cd_municipio_ibge),
		coalesce(b.cd_religiao, a.cd_religiao),
		coalesce(b.nr_pis_pasep, a.nr_pis_pasep),
		coalesce(b.cd_nacionalidade, a.cd_nacionalidade),
		coalesce(b.ie_dependencia_sus, a.ie_dependencia_sus),
		coalesce(b.qt_altura_cm, a.qt_altura_cm),
		coalesce(b.ie_tipo_sangue, a.ie_tipo_sangue),
		coalesce(b.ie_fator_rh, a.ie_fator_rh),
		coalesce(b.dt_obito, a.dt_obito),
		coalesce(b.nr_iss, a.nr_iss),
		coalesce(b.nr_inss, a.nr_inss),
		coalesce(b.nr_cert_nasc, a.nr_cert_nasc),
		coalesce(b.ds_orgao_emissor_ci, a.ds_orgao_emissor_ci),
		coalesce(b.nr_cartao_nac_sus, a.nr_cartao_nac_sus),
		coalesce(b.cd_cbo_sus, a.cd_cbo_sus),
		coalesce(b.cd_atividade_sus, a.cd_atividade_sus),
		coalesce(b.ie_vinculo_sus, a.ie_vinculo_sus),
		coalesce(b.nr_pager_bip, a.nr_pager_bip),
		coalesce(b.cd_medico, a.cd_medico),
		coalesce(b.dt_emissao_ci, a.dt_emissao_ci),
		coalesce(b.ie_fluencia_portugues, a.ie_fluencia_portugues),
		coalesce(b.ie_tipo_prontuario, a.ie_tipo_prontuario),
		coalesce(b.ds_observacao, a.ds_observacao),
		coalesce(b.qt_dependente, a.qt_dependente),
		coalesce(b.nr_seq_perfil, a.nr_seq_perfil),
		coalesce(b.nr_transacao_sus, a.nr_transacao_sus),
		coalesce(b.nr_cartao_estrangeiro, a.nr_cartao_estrangeiro),
		coalesce(b.dt_chegada_brasil, a.dt_chegada_brasil),
		coalesce(b.cd_funcionario, a.cd_funcionario),
		coalesce(b.dt_naturalizacao_pf, a.dt_naturalizacao_pf),
		coalesce(b.dt_emissao_ctps, a.dt_emissao_ctps),
		coalesce(b.nr_ctps, a.nr_ctps),
		coalesce(b.nr_portaria_nat, a.nr_portaria_nat),
		coalesce(b.nr_reg_geral_estrang, a.nr_reg_geral_estrang),
		coalesce(b.nr_serie_ctps, a.nr_serie_ctps),
		coalesce(b.nr_titulo_eleitor, a.nr_titulo_eleitor),
		coalesce(b.uf_emissora_ctps, a.uf_emissora_ctps),
		coalesce(b.sg_emissora_ci, a.sg_emissora_ci),
		coalesce(b.nr_zona, a.nr_zona),
		coalesce(b.nr_secao, a.nr_secao),
		coalesce(b.nr_seq_conselho, a.nr_seq_conselho),
		coalesce(b.nr_seq_cbo_saude, a.nr_seq_cbo_saude),
		coalesce(b.ds_codigo_prof, a.ds_codigo_prof),
		coalesce(b.dt_geracao_pront, a.dt_geracao_pront),
		coalesce(b.cd_pessoa_mae, a.cd_pessoa_mae),
		coalesce(b.nm_social, a.nm_social),
		coalesce(b.nr_seq_pais,a.nr_seq_pais),
		coalesce(b.nr_seq_cor_pele,a.nr_seq_cor_pele),
		coalesce(b.nr_ric,a.nr_ric),
		coalesce(b.nr_ddd_celular,a.nr_ddd_celular),
		coalesce(b.ie_rh_fraco,a.ie_rh_fraco),
		coalesce(b.qt_peso,a.qt_peso),
		coalesce(b.ie_revisar,a.ie_revisar),
		coalesce(b.qt_peso_nasc,a.qt_peso_nasc),
		coalesce(b.nr_seq_etnia,a.nr_seq_etnia),
		coalesce(b.nr_seq_cor_olho,a.nr_seq_cor_olho),
		coalesce(b.nr_seq_cor_cabelo,a.nr_seq_cor_cabelo),
		coalesce(b.ds_email_ccih,a.ds_email_ccih),
		coalesce(b.cd_cid_direta,a.cd_cid_direta),		
		coalesce(b.nr_ddi_celular,a.nr_ddi_celular),
		coalesce(b.dt_validade_rg,a.dt_validade_rg),	
		coalesce(b.cd_declaracao_nasc_vivo,a.cd_declaracao_nasc_vivo),
		coalesce(b.cd_nit,a.cd_nit),
		coalesce(b.dt_emissao_cert_casamento,a.dt_emissao_cert_casamento),
		coalesce(b.nr_cert_casamento,a.nr_cert_casamento),
		coalesce(b.cd_curp,a.cd_curp),
		coalesce(b.cd_rfc,a.cd_rfc),
    coalesce(B.NR_SEQ_PERSON_NAME, A.NR_SEQ_PERSON_NAME)
	into STRICT	cd_cargo_w,
		ie_funcionario_w,
		nr_prontuario_w,
		nr_cpf_w,
		nr_identidade_w,
		DT_ADMISSAO_HOSP_w,
		cd_sistema_ant_w,
		dt_nascimento_w,
		ie_sexo_w,
		ie_estado_civil_w,
		nr_telefone_celular_w,
		ie_grau_instrucao_w,
		nr_cep_cidade_nasc_w,
		cd_municipio_ibge_w,
		cd_religiao_w,
		nr_pis_pasep_w,
		cd_nacionalidade_w,
		ie_dependencia_sus_w,
		qt_altura_cm_w,
		ie_tipo_sangue_w,
		ie_fator_rh_w,
		dt_obito_w,
		nr_iss_w,
		nr_inss_w,
		nr_cert_nasc_w,
		ds_orgao_emissor_ci_w,
		nr_cartao_nac_sus_w,
		cd_cbo_sus_w,
		cd_atividade_sus_w,
		ie_vinculo_sus_w,
		nr_pager_bip_w,
		cd_medico_w,
		dt_emissao_ci_w,
		ie_fluencia_portugues_w,
		ie_tipo_prontuario_w,
		ds_observacao_w,
		qt_dependente_w,
		nr_seq_perfil_w,
		nr_transacao_sus_w,
		nr_cartao_estrangeiro_W,
		dt_chegada_brasil_w,
		cd_funcionario_w,
		dt_naturalizacao_pf_w,
		dt_emissao_ctps_w,
		nr_ctps_w,
		nr_portaria_nat_w,
		nr_reg_geral_estrang_w,
		nr_serie_ctps_w,
		nr_titulo_eleitor_w,
		uf_emissora_ctps_w,
		sg_emissora_ci_w,
		nr_zona_w,
		nr_secao_w,
		nr_seq_conselho_w,
		nr_seq_cbo_saude_w,
		ds_codigo_prof_w,
		dt_geracao_pront_w,
		cd_pessoa_mae_w,
		nm_social_w,
		nr_seq_pais_w,
		nr_seq_cor_pele_w,
		nr_ric_w,
		nr_ddd_celular_w,
		ie_rh_fraco_w,
		qt_peso_w,
		ie_revisar_w,
		qt_peso_nasc_w,
		nr_seq_etnia_w,
		nr_seq_cor_olho_w,
		nr_seq_cor_cabelo_w,
		ds_email_ccih_w,
		cd_cid_direta_w,
		nr_ddi_celular_w,			
		dt_validade_rg_w,			
		cd_declaracao_nasc_vivo_w,	
		cd_nit_w,					
		dt_emissao_cert_casamento_w,	
		nr_cert_casamento_w,
		cd_curp_w,
		cd_rfc_w,
    NR_SEQ_PERSON_NAME_W
	from 	pessoa_fisica a,
		pessoa_fisica b
	where	a.cd_pessoa_fisica = cd_pessoa_origem_p
	  and	b.cd_pessoa_fisica = cd_pessoa_destino_p;

	ie_person_name_w := obter_param_usuario(0, 203, Obter_perfil_Ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_person_name_w);

	if (ie_person_name_w = 'S') then
		/* Atualizacao da tabela PERSON_NAME na pessoa destino */

		CALL acertar_duplic_person_name(cd_pessoa_origem_p,cd_pessoa_destino_p, nm_usuario_p);
	end if;

	/* eliminar cadastro origem qdo nao houverem erros */

	/* ATENCAO: Esta rotina deve permanecer aqui (antes do update), caso contrario, ira gera erros no momento de atualizacao do numero do prontuario do paciente
	devido ao indice PESFISI_U1 (Unique Key)!*/
	if (ie_altera_cpfrg_p = 0) then
		select 	coalesce(a.nr_cpf, b.nr_cpf),
			coalesce(a.nr_identidade, b.nr_identidade)
		into STRICT	nr_cpf_w,
			nr_identidade_w
		from 	pessoa_fisica a,
			pessoa_fisica b
		where	a.cd_pessoa_fisica = cd_pessoa_origem_p
		and	b.cd_pessoa_fisica = cd_pessoa_destino_p;
	end if;

	if (qt_erro_w = 0) then

		CALL pls_ajusta_pf_prestador_pgto(cd_pessoa_destino_p);

		select	count(*)
		into STRICT	qt_sus_laudo_pac_w
		from	sus_laudo_paciente
		where	cd_medico_requisitante = cd_pessoa_origem_p;

		if (qt_sus_laudo_pac_w > 0) then

			update	sus_laudo_paciente
			set	cd_medico_requisitante = cd_pessoa_destino_p
			where	cd_medico_requisitante = cd_pessoa_origem_p;
		end if;

		select	count(*)
		into STRICT	qt_titular_conv_w
		from	pessoa_titular_convenio
		where	cd_pessoa_titular = cd_pessoa_origem_p;
		
		select max(nr_sequencia)
		into STRICT ie_titular_w
		from 	pessoa_titular_convenio ptc
		where	cd_pessoa_titular = cd_pessoa_origem_p
		and not exists (	SELECT	1
					from	pessoa_titular_convenio x
					where	x.cd_pessoa_fisica				= cd_pessoa_destino_p
					and		x.cd_convenio					= ptc.cd_convenio
					and		x.cd_categoria					= ptc.cd_categoria
					and		x.cd_pessoa_titular				= ptc.cd_pessoa_titular
					and		x.dt_inicio_vigencia			= ptc.dt_inicio_vigencia
					and		x.cd_usuario_convenio 	= ptc.cd_usuario_convenio)
      and not exists (	select 1
					from pessoa_titular_convenio ad 
					where ad.CD_PESSOA_TITULAR = cd_pessoa_destino_p
					and ad.CD_PESSOA_FISICA = ptc.CD_PESSOA_FISICA
					and ad.CD_CATEGORIA = ptc.cd_categoria
					and ad.CD_CONVENIO = ptc.CD_CONVENIO);

		if (qt_titular_conv_w > 0) then
		
			if (coalesce(ie_titular_w::text, '') = '') then
				update	pessoa_titular_convenio ptc
				set	cd_pessoa_titular = cd_pessoa_destino_p
				where	cd_pessoa_titular = cd_pessoa_origem_p
				and not exists (	SELECT	1
					from	pessoa_titular_convenio x
					where	x.cd_pessoa_fisica				= cd_pessoa_destino_p
					and		x.cd_convenio					= ptc.cd_convenio
					and		x.cd_categoria					= ptc.cd_categoria
					and		x.cd_pessoa_titular				= ptc.cd_pessoa_titular
					and		x.dt_inicio_vigencia			= ptc.dt_inicio_vigencia
					and		coalesce(x.cd_usuario_convenio, valor_zero_w)	= coalesce(ptc.cd_usuario_convenio, valor_zero_w));
					
			end if;

			delete from pessoa_titular_convenio where pessoa_titular_convenio.cd_pessoa_titular = cd_pessoa_origem_p;
		end if;

		delete from medico
		where	cd_pessoa_fisica = cd_pessoa_origem_p;

		CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);


		delete	from	agenda_consulta_hist
		where	cd_pessoa_hist	= cd_pessoa_origem_p;				

		select	count(*)
		into STRICT	cont_w
		from	agenda_paciente_hist
		where	cd_pessoa_hist	= cd_pessoa_destino_p;

		if (cont_w > 0) then
			delete	from	agenda_paciente_hist

			where	cd_pessoa_hist	= cd_pessoa_origem_p;
		else
			CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);
			delete	from	agenda_paciente_hist
			where	cd_pessoa_hist	= cd_pessoa_origem_p;
		end if;

		CALL altera_valor_campo_tabela(nm_tabela_w, nm_atributo_w, cd_pessoa_origem_p, cd_pessoa_destino_p);

		open C01;
		loop
		fetch C01 into	
			nm_tabela_w,
			nm_atributo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			if (wheb_usuario_pck.get_ie_lote_contabil = 'S') then
				CALL exec_sql_dinamico('ACDUPLICPF',' delete ' || nm_tabela_w || ' where ' || nm_atributo_w || ' = ' || cd_pessoa_origem_p);	
				commit;
			end if;		

			end;
		end loop;
		close C01;

		delete	from	agenda_consulta
		where	cd_pessoa_fisica	= cd_pessoa_origem_p;

		delete	from	agenda_paciente
		where	cd_pessoa_fisica	= cd_pessoa_origem_p;

		delete	from	agenda_integrada
		where	cd_pessoa_fisica	= cd_pessoa_origem_p;

		delete 	from	anamnese_paciente
		where	cd_pessoa_fisica	= cd_pessoa_origem_p;

		delete	from	med_avaliacao_paciente
		where	cd_pessoa_fisica	= cd_pessoa_origem_p;

		delete	from	atestado_paciente
		where	cd_pessoa_fisica	= cd_pessoa_origem_p;

		delete	from	atestado_paciente
		where	cd_medico	= cd_pessoa_origem_p;

		delete	from	aval_nutricao
		where	CD_PROFISSIONAL	= cd_pessoa_origem_p;

		delete	from PESSOA_FISICA_BIOMETRIA
		where	cd_pessoa_fisica = cd_pessoa_origem_p;

		delete	from PEP_ITEM_PENDENTE
		where	cd_pessoa_fisica = cd_pessoa_origem_p;

		delete 	from pf_codigo_externo
		where	cd_pessoa_fisica = cd_pessoa_origem_p;

		    BEGIN
		      delete  from pessoa_fisica
		      where  cd_pessoa_fisica = cd_pessoa_origem_p;
		    EXCEPTION
		      WHEN SQLSTATE '50001' THEN

			VERIFICA_TRIGGERS_TABLE_FK('PESSOA_FISICA', SQLERRM);

		    END;  	

		CALL gerar_pessoa_fisica_hist(cd_pessoa_destino_p,null,clock_timestamp(),wheb_mensagem_pck.get_texto(451002),nm_usuario_p);
	else
		ds_res_w := ds_res_w ||  Wheb_mensagem_pck.get_texto(355700) || ' ' || qt_erro_w || Wheb_mensagem_pck.get_texto(355701);

		update	pessoa_fisica
		set	nr_prontuario		 = NULL
		where	cd_pessoa_fisica	= cd_pessoa_origem_p;
	end if;

	dt_atualizacao_log_w	:= clock_timestamp();

	/* atualizar informacoes cadastro pf origem -> destino */
	
	update	pessoa_fisica
	set	cd_cargo		= cd_cargo_w,
		ie_funcionario		= ie_funcionario_w,
		nr_prontuario		= nr_prontuario_w,
		nr_cpf			= nr_cpf_w,
		nr_identidade		= nr_identidade_w,
		DT_ADMISSAO_HOSP	= DT_ADMISSAO_HOSP_w,
		cd_sistema_ant		= cd_sistema_ant_w,
		dt_nascimento		= dt_nascimento_w,
		ie_sexo			= ie_sexo_w,
		ie_estado_civil		= ie_estado_civil_w,
		nr_telefone_celular	= nr_telefone_celular_w,
		ie_grau_instrucao	= ie_grau_instrucao_w,
		nr_cep_cidade_nasc	= nr_cep_cidade_nasc_w,
		cd_municipio_ibge	= cd_municipio_ibge_w,
		cd_religiao		= cd_religiao_w,
		nr_pis_pasep		= nr_pis_pasep_w,
		cd_nacionalidade	= cd_nacionalidade_w,
		ie_dependencia_sus	= ie_dependencia_sus_w,
		qt_altura_cm		= qt_altura_cm_w,
		ie_tipo_sangue		= ie_tipo_sangue_w,
		ie_fator_rh		= ie_fator_rh_w,
		dt_obito		= dt_obito_w,
		nr_iss			= nr_iss_w,
		nr_inss			= nr_inss_w,
		nr_cert_nasc		= nr_cert_nasc_w,
		ds_orgao_emissor_ci	= ds_orgao_emissor_ci_w,
		nr_cartao_nac_sus	= nr_cartao_nac_sus_w,
		cd_cbo_sus		= cd_cbo_sus_w,
		cd_atividade_sus	= cd_atividade_sus_w,
		ie_vinculo_sus		= ie_vinculo_sus_w,
		nr_pager_bip		= nr_pager_bip_w,
		cd_medico		= cd_medico_w,
		dt_emissao_ci		= dt_emissao_ci_w,
		ie_fluencia_portugues	= ie_fluencia_portugues_w,
		ie_tipo_prontuario	= ie_tipo_prontuario_w,
		ds_observacao		= ds_observacao_w,
		qt_dependente		= qt_dependente_w,
		nr_seq_perfil		= nr_seq_perfil_w,
		nr_transacao_sus	= nr_transacao_sus_w,
		nr_cartao_estrangeiro	= nr_cartao_estrangeiro_W,
		dt_chegada_brasil	= dt_chegada_brasil_w,
		cd_funcionario		= cd_funcionario_w,
		dt_naturalizacao_pf	= dt_naturalizacao_pf_w,
		dt_emissao_ctps		= dt_emissao_ctps_w,
		nr_ctps			= nr_ctps_w,
		nr_portaria_nat		= nr_portaria_nat_w,
		nr_reg_geral_estrang	= nr_reg_geral_estrang_w,
		nr_serie_ctps		= nr_serie_ctps_w,
		nr_titulo_eleitor	= nr_titulo_eleitor_w,
		uf_emissora_ctps	= uf_emissora_ctps_w,
		sg_emissora_ci		= sg_emissora_ci_w,
		nr_zona			= nr_zona_w,
		nr_secao		= nr_secao_w,
		nr_seq_conselho		= nr_seq_conselho_w,
		nr_seq_cbo_saude	= nr_seq_cbo_saude_w,
		ds_codigo_prof		= ds_codigo_prof_w,
		dt_geracao_pront	= dt_geracao_pront_w,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		ie_status_usuario_event = 'A',
		cd_pessoa_mae		= cd_pessoa_mae_w,
		nm_social		= nm_social_w,
		nr_seq_pais		= nr_seq_pais_w,
		nr_seq_cor_pele		= nr_seq_cor_pele_w,
		nr_ric			= nr_ric_w,
		nr_ddd_celular		= nr_ddd_celular_w,
		ie_rh_fraco		= ie_rh_fraco_w,
		qt_peso			= qt_peso_w,
		ie_revisar		= ie_revisar_w,
		qt_peso_nasc		= qt_peso_nasc_w,
		nr_seq_etnia		= nr_seq_etnia_w,
		nr_seq_cor_olho		= nr_seq_cor_olho_w,
		nr_seq_cor_cabelo	= nr_seq_cor_cabelo_w,
		ds_email_ccih		= ds_email_ccih_w,
		cd_cid_direta		= cd_cid_direta_w,
		nr_ddi_celular		= nr_ddi_celular_w,			
		dt_validade_rg		= dt_validade_rg_w,			
		cd_declaracao_nasc_vivo = cd_declaracao_nasc_vivo_w,
		cd_nit = cd_nit_w,					
		dt_emissao_cert_casamento	= dt_emissao_cert_casamento_w,
		nr_cert_casamento = nr_cert_casamento_w,
		cd_curp			= cd_curp_w,
		cd_rfc			= cd_rfc_w				
	where	cd_pessoa_fisica	= cd_pessoa_destino_p;

	update  tasy_log_alteracao
	set 	ds_descricao		= substr(CASE WHEN ds_descricao = NULL THEN wheb_mensagem_pck.get_texto(451002) || ' ' || wheb_mensagem_pck.get_texto(793114) || ' ' || obter_nome_usuario(nm_usuario)  ELSE wheb_mensagem_pck.get_texto(451002) || ' ' || wheb_mensagem_pck.get_texto(793114) || ' ' || obter_nome_usuario(wheb_usuario_pck.get_nm_usuario) || ' - ' || ds_descricao END ,1,255),
			nm_usuario = (wheb_usuario_pck.get_nm_usuario)
	where 	nm_tabela		= 'PESSOA_FISICA'
	and 	ds_chave_simples	= cd_pessoa_destino_p
	and 	dt_atualizacao	between dt_atualizacao_log_w and clock_timestamp();

	/*Coelho - 16/05 - utilizado para para disparar trigger para integracao com PACS apos acerto do medico*/

	update	medico
	set	ie_origem_inf 	  = NULL
	where	cd_pessoa_fisica = cd_pessoa_destino_p;

	ds_param_integ_hl7_w :=	'cd_pessoa_fisica=' || cd_pessoa_destino_p || ds_sep_bv_w ||
				'cd_pessoa_fisica_old=' || cd_pessoa_origem_p || ds_sep_bv_w;

	INTEGRA_BIFROST;
	CALL gravar_agend_integracao(19, ds_param_integ_hl7_w);
	CALL gravar_agend_integracao(31, ds_param_integ_hl7_w);

	/*Integracao HL7 Philips - enviar atualizacao de dados do paciente apos acerto de duplicidade*/

	ds_param_integ_hl7_w :=	'cd_pessoa_fisica=' || cd_pessoa_destino_p || ds_sep_bv_w ||
				'nr_atendimento=0' || ds_sep_bv_w ||
				'nr_seq_interno=0' || ds_sep_bv_w;
	CALL gravar_agend_integracao(72, ds_param_integ_hl7_w);	

	/*Philips - PACS -  iSite*/

	ds_param_integ_hl7_w :=	'cd_pessoa_fisica=' || cd_pessoa_destino_p || ds_sep_bv_w ||
				'cd_pessoa_fisica_old=' || cd_pessoa_origem_p || ds_sep_bv_w;
	CALL gravar_agend_integracao(159, ds_param_integ_hl7_w);

	ds_param_integ_hl7_w := 'nr_atendimento=0' || ds_sep_bv_w ||
				'nr_seq_interno=0' || ds_sep_bv_w||
				'cd_pessoa_fisica=' || cd_pessoa_destino_p || ds_sep_bv_w ||
				'cd_pessoa_fisica_old=' || cd_pessoa_origem_p || ds_sep_bv_w;

	/* (Germany) Standard */

	if	((substr(l10nger_integrar_adt_orm(cd_pessoa_destino_p, null, null, null),1,1) = 'S') or (substr(l10nger_integrar_adt_orm(cd_pessoa_origem_p, null, null, null),1,1) = 'S')) then
		CALL gravar_agend_integracao(648, ds_param_integ_hl7_w);/*Tasy -> Third-party (ADT_A40)*/
	end if;

	if (ie_acao_p = 'T') and /*So chama a integracao quando e uma transferencia de uma pessoa para a outra.*/
		(coalesce(qt_count_integracao_w,0) > 0) then

		intpd_enviar_unif_persona(	cd_pessoa_origem_p || '#' ||
						nr_pront_origem_w || '#' || 
						cd_pessoa_destino_p || '#' || 
						nr_prontuario_w || '#' ||
						ie_funcionario_dest_w || '#' || 
						ie_funcionario_orig_w || '#' || 
						cd_medico_dest_w || '#' || 
						cd_medico_orig_w || '#'|| 
						qt_atend_aberto_origem_w || '#'||
						qt_atend_aberto_destino_w,
						'S',
						nm_usuario_p);
	end if;

	/* Gowtham Added below event for ADT A18 message to transfer to HCOR system -- HCOR ADT A18  SO-1753902*/

	ds_param_integ_hl7_w := 'cd_pessoa_fisica=' || cd_pessoa_destino_p || ds_sep_bv_w ||
				'cd_pessoa_fisica_old=' || cd_pessoa_origem_p || ds_sep_bv_w;
	CALL gravar_agend_integracao(785, ds_param_integ_hl7_w);

	/* Rafael em 13/9/6 OS40735 -> atualizar nome paciente x nome pessoa fisica x agenda */

	if (cd_pessoa_destino_p IS NOT NULL AND cd_pessoa_destino_p::text <> '') then
		CALL exec_sql_dinamico('Rafael','begin ajustar_duplic_cad_age_pf(' || chr(39) || cd_pessoa_destino_p || chr(39) || '); end;');
	end if;

	/* ALTERA OS REGISTROS DE CENSO DA PF ANTIGA PARA A NOVA PF*/

	if (cd_pessoa_destino_p IS NOT NULL AND cd_pessoa_destino_p::text <> '') then
		CALL altera_valor_campo_tabela('EIS_OCUPACAO_HOSPITALAR', 'CD_PESSOA_FISICA', cd_pessoa_origem_p, cd_pessoa_destino_p);
	end if;

	/* ALTERA OS REGISTROS DE QUIMIO DA PF ANTIGA PARA A NOVA PF*/

	if (cd_pessoa_destino_p IS NOT NULL AND cd_pessoa_destino_p::text <> '') then
		CALL altera_valor_campo_tabela('AGENDA_QUIMIO_HIST', 'CD_PESSOA_HIST', cd_pessoa_origem_p, cd_pessoa_destino_p);
	end if;
	if (ie_acao_p = 'T') then
     		reg_integracao_p := gerar_int_padrao.gravar_integracao('299', cd_pessoa_destino_p, nm_usuario_p, reg_integracao_p);
  	end if;
end if;

qt_erro_p := qt_erro_w;	
CALL wheb_usuario_pck.SET_IE_EXECUTAR_TRIGGER('S');
CALL wheb_usuario_pck.set_ie_lote_contabil('N');

commit;

CALL exec_sql_dinamico('ACDUPLICPF','alter trigger RASTREIO_ALTERACAO_EVOLUCAO enable');

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE acertar_duplic_pessoa_fisica ( cd_pessoa_origem_p text, cd_pessoa_destino_p text, ie_acao_p text, nm_usuario_p text, ie_desab_trigger_p text, dt_acerto_p timestamp, qt_erro_p INOUT bigint, ie_altera_cpfrg_p bigint default 1) FROM PUBLIC;

