-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_movto_ret_trib ( nr_seq_lote_ret_trib_prest_p pls_lote_ret_trib_prest.nr_sequencia%type, nr_seq_evento_trib_lm_p pls_parametro_pagamento.nr_seq_evento_trib_lm%type, nr_seq_evento_trib_prov_p pls_parametro_pagamento.nr_seq_evento_trib_prov%type, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

					
nr_seq_lote_ret_w		pls_lote_retencao_trib.nr_sequencia%type;
cd_pessoa_fisica_w		pls_lote_ret_trib_prest.cd_pessoa_fisica%type;
vl_movimento_w			pls_lote_ret_trib_valor.vl_imposto%type;
dt_mes_referencia_w		pls_lote_retencao_trib.dt_mes_referencia%type;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
nr_seq_lote_evento_w		pls_lote_evento.nr_sequencia%type;
nr_seq_evento_movto_w		pls_evento_movimento.nr_sequencia%type;
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;
cd_conta_contabil_w		varchar(20);
nr_seq_evento_w			bigint;


BEGIN

-- Obtém o lote de retenção de tributo, e a pessoa física afim de obter o prestador da movimentação
select	max(a.nr_seq_lote),
	max(a.cd_pessoa_fisica)
into STRICT	nr_seq_lote_ret_w,
	cd_pessoa_fisica_w
from	pls_lote_ret_trib_prest a
where	a.nr_sequencia = nr_seq_lote_ret_trib_prest_p
and not exists (	SELECT	1
		from	pls_lote_ret_trib_val_dif b
		where	a.nr_sequencia = b.nr_seq_trib_prest);
		
-- Soma os valores afim de montar o valor da movimentação
select	coalesce(sum(vl_imposto),0)
into STRICT	vl_movimento_w
from	pls_lote_ret_trib_valor
where	nr_seq_trib_prest = nr_seq_lote_ret_trib_prest_p
and	ie_pago_prev = 'V';

-- Obtém o mês de referência
select	max(dt_mes_referencia)
into STRICT	dt_mes_referencia_w
from	pls_lote_retencao_trib
where	nr_sequencia = nr_seq_lote_ret_w;

-- Através da pessoa física obtida buscamos o prestador
select	max(nr_sequencia)
into STRICT	nr_seq_prestador_w
from	pls_prestador
where	cd_pessoa_fisica = cd_pessoa_fisica_w
and	ie_situacao = 'A'
and	coalesce(dt_exclusao::text, '') = '';

if (coalesce(nr_seq_prestador_w::text, '') = '') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_prestador_w
	from	pls_prestador
	where	cd_pessoa_fisica = cd_pessoa_fisica_w;
end if;

-- Insere apenas se encontrou prestador para a pessoa física
if (nr_seq_prestador_w IS NOT NULL AND nr_seq_prestador_w::text <> '') and (vl_movimento_w <> 0)then

	-- Se o valor for maior que zero define o evento com o  evento de desconto e negativa o valor
	if (vl_movimento_w > 0) then
		nr_seq_evento_w := nr_seq_evento_trib_lm_p;
		vl_movimento_w := pls_util_pck.obter_valor_negativo(vl_movimento_w);
	else -- Se o valor for menor que zero define o evento com o  evento de provento e garante que e positiva o valor
		nr_seq_evento_w := nr_seq_evento_trib_prov_p;
		vl_movimento_w := abs(vl_movimento_w);
	end if;
	
	-- Verifica se há 'lote de evento' para o 'lote de retenção de tributo' em questão
	select	max(nr_sequencia)
	into STRICT	nr_seq_lote_evento_w
	from	pls_lote_evento
	where	nr_seq_lote_ret_trib = nr_seq_lote_ret_w;
	
	-- Se não há lote de evento movimento para o 'lote de retenção de tributo' em questão, então gera um lote
	if (coalesce(nr_seq_lote_evento_w::text, '') = '') then
		insert into pls_lote_evento(nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
			nm_usuario, nm_usuario_nrec, cd_estabelecimento,
			nr_seq_lote_ret_trib, dt_competencia, ie_origem,
			dt_liberacao)
		values (	nextval('pls_lote_evento_seq'), clock_timestamp(), clock_timestamp(),
			nm_usuario_p, nm_usuario_p, cd_estabelecimento_p,
			nr_seq_lote_ret_w, dt_mes_referencia_w, 'A',
			dt_mes_referencia_w) returning nr_sequencia into nr_seq_lote_evento_w;
	end if;	
	
	-- Se encontrou ou gerou um lote de evento movimento para o 'lote de retenção de tributo', gera a movimentação
	if (nr_seq_lote_evento_w IS NOT NULL AND nr_seq_lote_evento_w::text <> '') then
		insert into pls_evento_movimento(nr_sequencia, nm_usuario, nm_usuario_nrec,
			dt_atualizacao, dt_atualizacao_nrec, dt_movimento,
			nr_seq_lote, nr_seq_evento, nr_seq_prestador,
			vl_movimento)
		values (	nextval('pls_evento_movimento_seq'), nm_usuario_p, nm_usuario_p,
			clock_timestamp(), clock_timestamp(), trunc(dt_mes_referencia_w,'dd'),
			nr_seq_lote_evento_w, nr_seq_evento_w, nr_seq_prestador_w,
			vl_movimento_w) returning nr_sequencia into nr_seq_evento_movto_w;
			
		cd_conta_contabil_w := pls_obter_conta_contab_eve_fin(nr_seq_evento_movto_w, cd_conta_contabil_w);
		
		update	pls_evento_movimento
		set	cd_conta_contabil = cd_conta_contabil_w
		where	nr_sequencia = nr_seq_evento_movto_w;
	end if;

	select	coalesce(max(ie_concil_contab), 'N')
	into STRICT	ie_concil_contab_w
	from	pls_visible_false
	where	cd_estabelecimento = cd_estabelecimento_p;

	if (ie_concil_contab_w = 'S') then
		CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_gerar_ret_trib(nr_seq_lote_evento_w, cd_estabelecimento_p, nm_usuario_p);
	end if;
end if;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_movto_ret_trib ( nr_seq_lote_ret_trib_prest_p pls_lote_ret_trib_prest.nr_sequencia%type, nr_seq_evento_trib_lm_p pls_parametro_pagamento.nr_seq_evento_trib_lm%type, nr_seq_evento_trib_prov_p pls_parametro_pagamento.nr_seq_evento_trib_prov%type, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

