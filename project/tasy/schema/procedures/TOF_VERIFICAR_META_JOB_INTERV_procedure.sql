-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tof_verificar_meta_job_interv ( nr_atendimento_p text, nm_usuario_p text, cd_estabelecimento_p text, dt_evento_p timestamp, ie_finalizar_p text default 'N') AS $body$
DECLARE



nr_sequencia_w		bigint;
nr_seq_meta_w		bigint;
contador_w			integer;
ie_status_w			varchar(2);
dt_inicio_w			timestamp;
dt_fim_w			timestamp;
nr_seq_meta_atend_w   bigint;

dt_inicio_meta_w			timestamp;
qt_horas_consistencia_w	double precision;
dt_horas_inicio_consist_w	timestamp;
qt_minutos_retr_w	bigint;


C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_meta,
		m.qt_minutos_retr,
		a.dt_inicio
	from	tof_meta_atend a,
		tof_meta m
	where	m.nr_sequencia = a.nr_seq_meta
	and	nr_atendimento = nr_atendimento_p
	and	coalesce(m.ie_situacao,'A') = 'A'
	and	coalesce(a.dt_finalizacao::text, '') = ''
	and	ie_regra = 'I'
	and (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and coalesce(a.dt_inativacao::text, '') = '';


BEGIN

if (coalesce(ie_finalizar_p,'N') = 'S') then

	dt_inicio_w 	:= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(dt_evento_p,clock_timestamp()));
	dt_fim_w 	:= clock_timestamp();

else

	dt_inicio_w 	:= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(dt_evento_p,clock_timestamp()) - 1);
	dt_fim_w 	:= fim_dia(dt_inicio_w);

end if;

open C01;
loop
fetch C01 into	
	nr_sequencia_w,
	nr_seq_meta_w,
	qt_minutos_retr_w,
	dt_inicio_meta_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
		qt_horas_consistencia_w		:= (qt_minutos_retr_w/1440);
		dt_horas_inicio_consist_w	:= (dt_fim_w - qt_horas_consistencia_w);
		
		if (dt_inicio_meta_w < dt_horas_inicio_consist_w) then	
	

			Select 	count(*)
			into STRICT	contador_w
			from   	tof_meta_atend_hor
			where  	nr_seq_meta_atend = nr_sequencia_w
			and    	dt_geracao  between dt_inicio_w and dt_fim_w
			and     (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and     coalesce(dt_inativacao::text, '') = '';
			
			if ( contador_w = 0 ) then
			
				ie_status_w := 'N';		

			else

				ie_status_w := 'A';

			end if;
			
			Select  nextval('tof_meta_atend_hor_seq')
			into STRICT	nr_seq_meta_atend_w
			;
			
			insert into tof_meta_atend_hor(	nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_meta_atend,
							ie_status,
							dt_geracao,
							ds_observacao,
							dt_liberacao)
						values (	nr_seq_meta_atend_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_sequencia_w,
							ie_status_w,
							dt_fim_w,
							'',
							clock_timestamp());
			if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;	
			
			CALL Alterar_status_tof_meta(nr_seq_meta_atend_w, nm_usuario_p);		
			
		end if;
	end;
end loop;
close C01;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tof_verificar_meta_job_interv ( nr_atendimento_p text, nm_usuario_p text, cd_estabelecimento_p text, dt_evento_p timestamp, ie_finalizar_p text default 'N') FROM PUBLIC;

