-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_questionamento ( nr_seq_conta_proc_mat_p bigint, nr_seq_conta_p bigint, nr_seq_contestacao_p bigint, nr_seq_protocolo_p bigint, ie_tipo_tabela_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

--Ie_tipo_tabela

--'P' Procedimento

--'M' Material 
ds_parecer_w			varchar(4000);
ds_servico_w			varchar(80);
cd_material_ops_w		varchar(30);
nm_segurado_w			varchar(25);
nm_segurado_cob_w		varchar(25);
cd_unimed_benef_w		varchar(20);
cd_unimed_benef_cob_w		varchar(20);
cd_usuario_plano_w		varchar(30);
cd_usuario_plano_cob_w		varchar(30);
ie_tipo_acordo_w		varchar(10);
cd_motivo_w			varchar(10);
cd_pacote_w			varchar(8);
hr_realiz_w			varchar(8);
ie_pacote_w			varchar(1) := 'N';
nr_nota_w			ptu_nota_servico.nr_nota%type;
vl_cobrado_w			double precision;
vl_reconhe_w			double precision;
vl_acordo_w			double precision;
vl_cobr_co_w			double precision;
vl_reconh_co_w			double precision;
vl_acordo_co_w			double precision;
vl_cobr_filme_w			double precision;
vl_reconh_filme_w		double precision;
vl_acordo_filme_w		double precision;
vl_cobr_adic_serv_w		double precision;
vl_reconh_adic_serv_w		double precision;
vl_acordo_adic_serv_w		double precision;
vl_cobr_adic_co_w		double precision;
vl_reconh_adic_co_w		double precision;
vl_acordo_adic_co_w		double precision;
vl_cobr_adic_filme_w		double precision;
vl_reconh_adic_filme_w		double precision;
vl_acordo_adic_filme_w		double precision;
cd_servico_w			bigint;
nr_seq_lote_w			bigint;
nr_lote_prest_w			varchar(12);
nr_seq_mot_questionamento_w	bigint;
ie_tipo_tabela_w		bigint;
ie_origem_proced_w		bigint;
ie_existe_glosa_w		bigint;
nr_seq_questionamento_w		bigint;
nr_seq_conta_w			bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_conta_proc_w		bigint;
cd_proc_conversao_w		bigint;
ie_origem_conversao_w		bigint;
nr_seq_regra_w			bigint;
nr_seq_congenere_w		bigint;
nr_seq_prestador_w		bigint;
nr_seq_a500_w			bigint;
ie_tipo_arquivo_w		integer;
qt_reconh_w			integer;
qt_cobrada_w			ptu_nota_servico.qt_procedimento%type;
tx_intercambio_imp_w		double precision;
dt_atendimento_w		timestamp;
dt_atendimento_cob_w		timestamp;
dt_servico_w			timestamp;
qt_reg_contest_w		bigint;
qt_acordada_w			bigint;
fat_mult_serv_w			double precision := 0;
ie_parecer_analise_w		varchar(2);
nr_seq_ptu_fatura_w		bigint;
nr_seq_pls_fatura_w		bigint;
ie_tipo_w			varchar(1);
nr_seq_proc_princ_w		bigint;
nr_seq_analise_w		bigint;
ie_somente_codigo_w		pls_conversao_proc.ie_somente_codigo%type;
vl_lib_proc_taxa_w		pls_conta_proc.vl_liberado%type;
vl_liberado_w			pls_conta_proc.vl_liberado%type;
ie_tipo_despesa_w		pls_conta_proc.ie_tipo_despesa%type;
ds_parecer_aux_w		pls_analise_fluxo_item.ds_parecer%type;
ie_ultimo_parecer_w		pls_parametros.ie_ultimo_parecer%type;
nr_seq_tipo_atendimento_w	pls_conta.nr_seq_tipo_atendimento%type;
cd_interface_w			pls_regra_arquivo_fatura.cd_interface%type;
ie_versao_w			bigint;
ie_versao_xml_w      		bigint;
nr_seq_nota_servico_w 		ptu_nota_servico.nr_sequencia%type;
nr_seq_nota_cobranca_w		ptu_nota_cobranca.nr_sequencia%type;
ie_tipo_tabela_tiss_w		ptu_nota_servico.ie_tipo_tabela_tiss%type;
nr_nota_fiscal_forn_w		ptu_questionamento.nr_nota_fiscal_forn%type;
nr_guia_tiss_principal_w	ptu_questionamento.nr_guia_tiss_principal%type;
cd_item_unico_w			ptu_questionamento.cd_item_unico%type;
nr_guia_tiss_prestador_w	ptu_questionamento.nr_guia_tiss_prestador%type;
nr_seq_material_w		pls_material.nr_sequencia%type;
cd_unimed_destino_w		smallint;

cd_servico_aux_w		ptu_nota_servico.cd_servico%type;
ie_tipo_tabela_aux_w		ptu_nota_servico.ie_tipo_tabela%type;
ie_tipo_tabela_tiss_aux_w	ptu_nota_servico.ie_tipo_tabela_tiss%type;
ie_codificacao_mat_w		pls_material_unimed.ie_codificacao%type;
ie_tipo_intercambio_w		varchar(1);
sg_estado_w			pessoa_juridica.sg_estado%type;
sg_estado_int_w			pessoa_juridica.sg_estado%type;
ie_nacional_w			pls_congenere.ie_nacional%type;
ie_tipo_exportacao_w		ptu_fatura.ie_tipo_exportacao%type;
cd_servico_tiss_w		ptu_questionamento.cd_servico_tiss%type;
cd_servico_xml_w      		ptu_questionamento.cd_servico_xml%type;
nr_guia_tiss_operadora_w	ptu_questionamento.nr_guia_tiss_operadora%type;

C01 CURSOR FOR
	SELECT	nr_seq_motivo
	from	ptu_questionamento_item
	where	nr_seq_conta_mat	= nr_seq_conta_proc_mat_p
	and	ie_tipo_w	= 'M'
	and	(nr_seq_motivo IS NOT NULL AND nr_seq_motivo::text <> '')
	and	ie_tipo_acordo_w <> '11' -- Quando o item for nao contestado, so deve colocar motivo 99
	
union

	SELECT	nr_seq_motivo
	from	ptu_questionamento_item
	where	nr_seq_conta_proc	= nr_seq_conta_proc_mat_p
	and	ie_tipo_w	= 'P'
	and	(nr_seq_motivo IS NOT NULL AND nr_seq_motivo::text <> '')
	and	ie_tipo_acordo_w <> '11' -- Quando o item for nao contestado, so deve colocar motivo 99
	
union

	select	nr_sequencia
	from	ptu_motivo_questionamento
	where	cd_motivo		= '99'
	and	ie_tipo_acordo_w	= '11'; -- Quando o item for nao contestado, so deve colocar motivo 99

--Cursor utilizado para buscar o parecer das glosas	
C02 CURSOR(	nr_seq_analise_pc		pls_conta.nr_seq_analise%type,
		nr_seq_conta_mat_pc		pls_conta_mat.nr_sequencia%type)FOR
	SELECT	a.ds_parecer
	FROM pls_analise_fluxo_item a
LEFT OUTER JOIN pls_grupo_auditor b ON (a.nr_seq_grupo = b.nr_sequencia)
WHERE a.nr_seq_analise	= nr_seq_analise_pc and a.nr_seq_conta_mat	= nr_seq_conta_mat_pc and (a.ds_parecer IS NOT NULL AND a.ds_parecer::text <> '') and a.ie_acao_item		= 'G' group by a.ds_parecer;
	
C03 CURSOR(	nr_seq_analise_pc		pls_conta.nr_seq_analise%type,
		nr_seq_conta_proc_pc		pls_conta_proc.nr_sequencia%type)FOR
	SELECT	a.ds_parecer
	FROM pls_analise_fluxo_item a
LEFT OUTER JOIN pls_grupo_auditor b ON (a.nr_seq_grupo = b.nr_sequencia)
WHERE a.nr_seq_analise	= nr_seq_analise_pc and a.nr_seq_conta_proc	= nr_seq_conta_proc_pc and (a.ds_parecer IS NOT NULL AND a.ds_parecer::text <> '') and a.ie_acao_item		= 'G' group by a.ds_parecer;
	
--Cursor utilizado para buscar o parecer das glosas	
C04 CURSOR(	nr_seq_analise_pc		pls_conta.nr_seq_analise%type,
		nr_seq_conta_mat_pc		pls_conta_mat.nr_sequencia%type)is
	with query_tmp as (
		SELECT	a.ds_parecer
		FROM pls_analise_fluxo_item a
LEFT OUTER JOIN pls_grupo_auditor b ON (a.nr_seq_grupo = b.nr_sequencia)
WHERE a.nr_seq_analise	= nr_seq_analise_pc and a.nr_seq_conta_mat	= nr_seq_conta_mat_pc and (a.ds_parecer IS NOT NULL AND a.ds_parecer::text <> '') and a.ie_acao_item		= 'G' order by a.nr_sequencia desc
	)
	SELECT	ds_parecer
	from	query_tmp LIMIT 1;
	
C05 CURSOR(	nr_seq_analise_pc		pls_conta.nr_seq_analise%type,
		nr_seq_conta_proc_pc		pls_conta_proc.nr_sequencia%type)is
	with query_tmp as (
		SELECT	a.ds_parecer
		FROM pls_analise_fluxo_item a
LEFT OUTER JOIN pls_grupo_auditor b ON (a.nr_seq_grupo = b.nr_sequencia)
WHERE a.nr_seq_analise	= nr_seq_analise_pc and a.nr_seq_conta_proc	= nr_seq_conta_proc_pc and (a.ds_parecer IS NOT NULL AND a.ds_parecer::text <> '') and a.ie_acao_item		= 'G' order by a.nr_sequencia desc
	)
	SELECT	ds_parecer
	from	query_tmp LIMIT 1;

BEGIN
ie_tipo_acordo_w	:= '00'; -- O processo se inicia com o tipo de acordo como Questionamento em Negociacao 
ie_tipo_w 		:= ie_tipo_tabela_p;

select	coalesce(max(ie_ultimo_parecer),'N')
into STRICT	ie_ultimo_parecer_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

select	max(a.nr_seq_ptu_fatura),
	max(a.nr_seq_pls_fatura),
	max(b.cd_unimed_destino)
into STRICT	nr_seq_ptu_fatura_w,
	nr_seq_pls_fatura_w,
	cd_unimed_destino_w
from	pls_lote_contestacao a,
	ptu_camara_contestacao b
where	a.nr_sequencia	= b.nr_seq_lote_contest
and	b.nr_sequencia	= nr_seq_contestacao_p;

if (coalesce(nr_seq_ptu_fatura_w::text, '') = '') and (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_ptu_fatura_w
	from	ptu_fatura
	where	nr_seq_pls_fatura = nr_seq_pls_fatura_w;
end if;

select	coalesce(max(ie_tipo_exportacao),'TXT')
into STRICT	ie_tipo_exportacao_w
from	ptu_fatura
where	nr_sequencia = nr_seq_ptu_fatura_w;

if (ie_tipo_w in ('P','Q')) then
	cd_unimed_benef_cob_w	:= null;
	
	if (ie_tipo_w = 'Q') then
		select	max(nr_seq_proc_princ)
		into STRICT	nr_seq_proc_princ_w
		from	pls_conta_proc
		where	nr_sequencia	= nr_seq_conta_proc_mat_p;
		
		ie_tipo_w := 'P';
	end if;
	
	select	substr(pls_obter_carteira_segurado(max(a.nr_seq_segurado)), 5, 13),
		substr(pls_obter_carteira_segurado(max(a.nr_seq_segurado)), 1, 4), -- As carteriras consistem em seus ultimos 4 digitos o cod. da unimed do benef.
		substr(pls_obter_dados_segurado(max(a.nr_seq_segurado), 'N'), 1, 25),
		max(b.dt_procedimento),
		max(b.cd_procedimento),
		max(b.ie_origem_proced),		
		sum(coalesce(b.vl_procedimento_ptu_imp, 0)),
		sum(coalesce(b.vl_liberado_hi, 0)),
		0, --valor informado somente em retorno do a550 ( Manual e a OS 291582)
		max(c.nr_seq_congenere),
		max(a.nr_seq_prestador),
		coalesce(max(tx_intercambio_imp), 0),
		--Valores individuais
		sum(coalesce(b.vl_co_ptu_imp, 0)),
		sum(coalesce(b.vl_liberado_co, 0)),
		0,
		sum(coalesce(b.vl_material_ptu_imp, 0)),
		sum(coalesce(b.vl_liberado_material, 0)),
		0,
		-- Taxas
		sum(coalesce(b.vl_taxa_servico_imp, 0)), --VL_COBR_ADIC_SERV_W
		sum(coalesce(b.vl_lib_taxa_servico, 0)), --VL_RECONH_ADIC_SERV_W
		0,
		sum(coalesce(b.vl_taxa_co_imp, 0)),
		sum(coalesce(b.vl_lib_taxa_co, 0)),
		0, --VL_RECONH_ADIC_CO_W
		sum(coalesce(b.vl_taxa_material_imp, 0)),
		sum(coalesce(b.vl_lib_taxa_material, 0)), --VL_RECONH_ADIC_FILME_W
		0, --VL_ACORDO_FILME_W
		trunc(sum(coalesce(b.qt_procedimento, 0))), -- No manual do PTU o campo e number(8) desconsideradas as casas decimais
		trunc(sum(coalesce(b.qt_procedimento_imp, 0))),
		sum(coalesce(b.vl_liberado_co,0) + coalesce(b.vl_liberado_hi,0) + coalesce(b.vl_liberado_material,0) + coalesce(b.vl_lib_taxa_co,0) + coalesce(b.vl_lib_taxa_material,0) + coalesce(b.vl_lib_taxa_servico,0)),
		sum(coalesce(b.vl_liberado,0)),
		max(b.ie_tipo_despesa),
		max(a.nr_seq_tipo_atendimento)
	into STRICT	cd_usuario_plano_w,
		cd_unimed_benef_w,
		nm_segurado_w,
		dt_atendimento_w,
		cd_servico_w,	
		ie_origem_proced_w,
		vl_cobrado_w,
		vl_reconhe_w,
		vl_acordo_w,
		nr_seq_congenere_w,
		nr_seq_prestador_w,
		tx_intercambio_imp_w,
		vl_cobr_co_w,
		vl_reconh_co_w,
		vl_acordo_co_w,
		vl_cobr_filme_w,
		vl_reconh_filme_w,
		vl_acordo_filme_w,        
		vl_cobr_adic_serv_w,
		vl_reconh_adic_serv_w,    
		vl_acordo_adic_serv_w,    
		vl_cobr_adic_co_w,
		vl_reconh_adic_co_w,      
		vl_acordo_adic_co_w,      
		vl_cobr_adic_filme_w,
		vl_reconh_adic_filme_w,
		vl_acordo_adic_filme_w,
		qt_reconh_w,
		qt_acordada_w,
		vl_lib_proc_taxa_w,
		vl_liberado_w,
		ie_tipo_despesa_w,
		nr_seq_tipo_atendimento_w
	from	pls_conta		a,
		pls_conta_proc		b,
		pls_protocolo_conta	c
	where	a.nr_sequencia	= b.nr_seq_conta
	and	c.nr_sequencia	= a.nr_seq_protocolo
	and (b.nr_sequencia = nr_seq_conta_proc_mat_p or b.nr_sequencia = nr_seq_proc_princ_w or b.nr_seq_proc_princ = nr_seq_conta_proc_mat_p);
	
	-- Se o tipo de despesa for TAXAS (2) OU DIARIAS (3) e a soma dos valores liberados quebrados for 0 (zero) entao o VL_LIB_TAXA_CO ganha o valor do VL_LIBERADO
	if	((coalesce(ie_tipo_despesa_w,0) in (2,3)) and (vl_lib_proc_taxa_w = 0)) then
		vl_reconh_adic_co_w	:= vl_liberado_w;
	end if;
	
	if (vl_reconhe_w = 0) then
		qt_reconh_w	:= qt_cobrada_w;
	end if;
	
	if (cd_servico_w IS NOT NULL AND cd_servico_w::text <> '') then
		SELECT * FROM pls_obter_proced_conversao(	cd_servico_w, ie_origem_proced_w, nr_seq_prestador_w, cd_estabelecimento_p, 1, nr_seq_congenere_w, null, null, null, null, null, null, null, cd_proc_conversao_w, ie_origem_conversao_w, nr_seq_regra_w, ie_somente_codigo_w, clock_timestamp(), nr_seq_tipo_atendimento_w, null, null) INTO STRICT cd_proc_conversao_w, ie_origem_conversao_w, nr_seq_regra_w, ie_somente_codigo_w;
	end if;

	if (length(cd_unimed_benef_w) = 16) then
		cd_unimed_benef_w	:= substr(cd_unimed_benef_w, 1, 3);
	else
		cd_unimed_benef_w	:= substr(cd_unimed_benef_w, 2, 3);
	end if;

	select	max(a.nr_nota),
		max(a.nr_lote),
		coalesce(max(a.nr_seq_a500),max(a.nr_seq_item)),
		max(a.cd_pacote),
		max(a.dt_procedimento),
		max(a.ds_hora_procedimento),
		max(a.ds_servico),
		max(a.ie_tipo_tabela),
		coalesce(max(a.ie_pacote),'N'),
		coalesce(max(a.tx_procedimento),0),
		coalesce(max(a.qt_procedimento),0),
		coalesce(max(vl_adic_co),0),
		coalesce(max(vl_adic_filme),0),
		coalesce(max(vl_adic_procedimento),0),
		coalesce(max(vl_custo_operacional),0),
		coalesce(max(vl_filme),0),
		coalesce(max(vl_procedimento),0),
		max(a.nr_sequencia),
		max(b.nr_sequencia),
		max(a.ie_tipo_tabela_tiss),
		max(a.nr_nota_fiscal_forn),
		max(a.cd_item_unico),
		max(b.nr_guia_tiss_principal),
		max(b.nr_guia_tiss_prestador),
		max(b.nr_guia_tiss_operadora),
		max(a.cd_servico_tiss),
		max(a.cd_servico_xml),
		max(b.nr_lote_prest)
	into STRICT	nr_nota_w,
		nr_seq_lote_w,
		nr_seq_a500_w,
		cd_pacote_w,
		dt_servico_w,
		hr_realiz_w,
		ds_servico_w,
		ie_tipo_tabela_w,
		ie_pacote_w,
		fat_mult_serv_w,
		qt_cobrada_w,
		vl_cobr_adic_co_w,
		vl_cobr_adic_filme_w,
		vl_cobr_adic_serv_w,
		vl_cobr_co_w,
		vl_cobr_filme_w,
		vl_cobrado_w,
		nr_seq_nota_servico_w,
		nr_seq_nota_cobranca_w,
		ie_tipo_tabela_tiss_w,
		nr_nota_fiscal_forn_w,
		cd_item_unico_w,
		nr_guia_tiss_principal_w,
		nr_guia_tiss_prestador_w,
		nr_guia_tiss_operadora_w,
		cd_servico_tiss_w,
		cd_servico_xml_w,
		nr_lote_prest_w
	from	ptu_nota_servico a,
		ptu_nota_cobranca b
	where	b.nr_sequencia		= a.nr_seq_nota_cobr
	and	b.nr_seq_fatura		= nr_seq_ptu_fatura_w
	and (a.nr_seq_conta_proc	= nr_seq_conta_proc_mat_p or a.nr_seq_conta_proc = nr_seq_proc_princ_w);
	
	-- base historica nao tinha divisao por "100" na importacao do A500
	if (fat_mult_serv_w > 10) then
		fat_mult_serv_w := fat_mult_serv_w / 100;
	end if;
	
	select	substr(max(cd_servico),1,10)
	into STRICT	cd_proc_conversao_w
	from	ptu_nota_servico
	where (nr_seq_conta_proc	= nr_seq_conta_proc_mat_p or nr_seq_conta_proc = nr_seq_proc_princ_w);
	
	if (coalesce(ie_tipo_tabela_w::text, '') = '') then
		-- Conversao do nosso tipo de despesa para o tipo de tabela da unimed
		select 	CASE WHEN max(ie_tipo_despesa)=1 THEN  0 WHEN max(ie_tipo_despesa)=2 THEN  1 WHEN max(ie_tipo_despesa)=3 THEN  1 WHEN max(ie_tipo_despesa)=4 THEN  4 END
		into STRICT	ie_tipo_tabela_w
		from	pls_conta_proc
		where	nr_sequencia	= nr_seq_conta_proc_mat_p;
	end if;
	

	if (coalesce(ie_tipo_tabela_tiss_w::text, '') = '') then
		ie_tipo_tabela_tiss_w	:= ptu_aviso_pck.gera_cd_tabela('P', ie_tipo_despesa_w, ie_origem_proced_w, null);
	end if;
	
	if (coalesce(ie_pacote_w,'N') = 'S') and (coalesce(cd_pacote_w::text, '') = '') then
		cd_pacote_w	:= substr(to_char(cd_proc_conversao_w), 1, 8);
	end if;
		
	-- OS 455575 - Alguns campos devem ser exatamentes iguais ao dados importados no A500
	begin
		select	max(a.cd_usuario_plano),
			max(a.nm_beneficiario),
			max(a.dt_atendimento),
			substr(max(a.cd_unimed), 1, 4)
		into STRICT	cd_usuario_plano_cob_w,
			nm_segurado_cob_w,
			dt_atendimento_cob_w,
			cd_unimed_benef_cob_w
		from	ptu_nota_cobranca	a,
			ptu_nota_servico	b,
			pls_conta_proc		c
		where	a.nr_sequencia	= b.nr_seq_nota_cobr
		and	c.nr_sequencia	= b.nr_seq_conta_proc
		and	a.nr_seq_fatura	= nr_seq_ptu_fatura_w
		and (c.nr_sequencia	= nr_seq_conta_proc_mat_p or c.nr_sequencia = nr_seq_proc_princ_w);
	exception
	when no_data_found then
		cd_usuario_plano_cob_w	:= cd_usuario_plano_w;
		nm_segurado_cob_w	:= nm_segurado_w;
		dt_atendimento_cob_w	:= dt_atendimento_w;
		cd_unimed_benef_cob_w	:= cd_unimed_benef_w;
	end;
	
	cd_usuario_plano_cob_w	:= coalesce(cd_usuario_plano_cob_w,cd_usuario_plano_w);
	nm_segurado_cob_w	:= coalesce(coalesce(nm_segurado_cob_w,nm_segurado_w),'ID_BENEF INVALIDO');
	dt_atendimento_cob_w	:= coalesce(dt_atendimento_cob_w,dt_atendimento_w);
	cd_unimed_benef_cob_w	:= coalesce(cd_unimed_benef_cob_w,cd_unimed_benef_w);

	select	count(1)
	into STRICT	ie_existe_glosa_w
	from	pls_conta_glosa a
	where	a.nr_seq_conta_proc	= nr_seq_conta_proc_mat_p;

	-- Obter o numero da conta
	select	nr_seq_conta,
		nr_seq_conta_proc_mat_p
	into STRICT	nr_seq_conta_w,
		nr_seq_conta_proc_w
	from	pls_conta_proc
	where	nr_sequencia	= nr_seq_conta_proc_mat_p;

	CALL pls_gerar_motivo_quest(	nr_seq_conta_proc_mat_p,
				nr_seq_conta_p,
				'P',
				cd_estabelecimento_p,
				nm_usuario_p);	

	select	count(1)
	into STRICT	qt_reg_contest_w
	from	pls_contestacao_proc
	where	nr_seq_conta_proc	= nr_seq_conta_proc_w;
				
elsif (ie_tipo_w = 'M') then
	cd_proc_conversao_w	:= null;
	cd_unimed_benef_cob_w	:= null;
	
	select	substr(pls_obter_carteira_segurado(a.nr_seq_segurado), 4, 13),
		substr(pls_obter_carteira_segurado(a.nr_seq_segurado), 1, 17),
		substr(pls_obter_dados_segurado(a.nr_seq_segurado,'N'), 1, 25),
		b.dt_atendimento,
		pls_obter_seq_codigo_material(b.nr_seq_material, null),
		coalesce(b.vl_material_imp, 0) - coalesce(b.vl_taxa_material_imp, 0),
		coalesce(b.vl_liberado, 0) - coalesce(b.vl_lib_taxa_material, 0),
		0,
		a.cd_guia,
		c.cd_material_ops,
		-- Valores individuais
		0,
		0,
		0,
		0,
		0,
		0,
		-- Taxas
		coalesce(b.vl_taxa_material_imp, 0),
		coalesce(b.vl_lib_taxa_material, 0),
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		-- Quantidades
		trunc(coalesce(b.qt_material,0)),
		trunc(coalesce(b.qt_material_imp,0)),
		a.nr_seq_tipo_atendimento,
		b.ie_tipo_despesa
	into STRICT	cd_usuario_plano_w,
		cd_unimed_benef_w,
		nm_segurado_w,
		dt_atendimento_w,
		cd_servico_w,
		vl_cobrado_w,
		vl_reconhe_w,
		vl_acordo_w,
		nr_nota_w,
		cd_material_ops_w,
		vl_cobr_co_w,
		vl_reconh_co_w,
		vl_acordo_co_w,
		vl_cobr_filme_w,          
		vl_reconh_filme_w,        
		vl_acordo_filme_w, 
		vl_cobr_adic_serv_w,      
		vl_reconh_adic_serv_w,    
		vl_acordo_adic_serv_w,        
		vl_cobr_adic_co_w,        
		vl_reconh_adic_co_w,      
		vl_acordo_adic_co_w,      
		vl_cobr_adic_filme_w,     
		vl_reconh_adic_filme_w,
		vl_acordo_adic_filme_w,
		qt_reconh_w,
		qt_acordada_w,
		nr_seq_tipo_atendimento_w,
		ie_tipo_despesa_w
	FROM pls_conta a, pls_conta_mat b
LEFT OUTER JOIN pls_material c ON (b.nr_seq_material = c.nr_sequencia)
WHERE a.nr_sequencia	= b.nr_seq_conta  and b.nr_sequencia	= nr_seq_conta_proc_mat_p;
	
	if (vl_reconhe_w = 0) then
		qt_reconh_w	:= qt_cobrada_w;
	end if;
	
	if (length(cd_unimed_benef_w) = 16) then
		cd_unimed_benef_w	:= substr(cd_unimed_benef_w, 1, 3);
	else
		cd_unimed_benef_w	:= substr(cd_unimed_benef_w, 2, 3);
	end if;

	select	max(a.nr_nota),
		max(a.nr_lote),
		coalesce(max(a.nr_seq_a500),max(a.nr_seq_item)),
		coalesce(max(a.ie_pacote), 'N'),
		max(a.cd_pacote),
		max(a.dt_procedimento),
		max(a.ds_hora_procedimento),
		max(a.ds_servico),
		coalesce(max(a.vl_adic_procedimento), 0),
		coalesce(max(a.vl_adic_filme), 0),
		coalesce(max(a.tx_procedimento),0),
		max(a.ie_tipo_tabela),
		coalesce(max(a.qt_procedimento),0),
		max(a.nr_sequencia),
		max(b.nr_sequencia),
		max(a.ie_tipo_tabela_tiss),
		max(a.nr_nota_fiscal_forn),
		max(a.cd_item_unico),
		max(b.nr_guia_tiss_principal),
		max(b.nr_guia_tiss_prestador),
		max(b.nr_guia_tiss_operadora),
		max(a.cd_servico_tiss),
		max(a.cd_servico_xml),
		max(b.nr_lote_prest)
	into STRICT	nr_nota_w,
		nr_seq_lote_w,
		nr_seq_a500_w,
		ie_pacote_w,
		cd_pacote_w,
		dt_servico_w,
		hr_realiz_w,
		ds_servico_w,
		vl_cobr_adic_serv_w,
		vl_cobr_adic_filme_w,
		fat_mult_serv_w,
		ie_tipo_tabela_w,
		qt_cobrada_w,
		nr_seq_nota_servico_w,
		nr_seq_nota_cobranca_w,
		ie_tipo_tabela_tiss_w,
		nr_nota_fiscal_forn_w,
		cd_item_unico_w,
		nr_guia_tiss_principal_w,
		nr_guia_tiss_prestador_w,
		nr_guia_tiss_operadora_w,
		cd_servico_tiss_w,
		cd_servico_xml_w,
		nr_lote_prest_w
	from	ptu_nota_servico a,
		ptu_nota_cobranca b
	where	b.nr_sequencia		= a.nr_seq_nota_cobr
	and	a.nr_seq_conta_mat	= nr_seq_conta_proc_mat_p
	and	b.nr_seq_fatura		= nr_seq_ptu_fatura_w;
	
	-- base historica nao tinha divisao por "100" na importacao do A500
	if (fat_mult_serv_w > 10) then
		fat_mult_serv_w := fat_mult_serv_w / 100;
	end if;
	
        select  max(cd_servico),
	        max(nr_seq_material)
        into STRICT	cd_material_ops_w,
		nr_seq_material_w
        from	ptu_nota_servico
        where	nr_seq_conta_mat	= nr_seq_conta_proc_mat_p;
	
	if (coalesce(ie_tipo_tabela_w::text, '') = '') then
		-- Conversao do nosso tipo de despesa para o tipo de tabela da unimed
		select 	CASE WHEN max(ie_tipo_despesa)=2 THEN  3  ELSE 2 END
		into STRICT	ie_tipo_tabela_w
		from	pls_conta_mat
		where	nr_sequencia	= nr_seq_conta_proc_mat_p;
	end if;
	
	if (coalesce(ie_tipo_tabela_tiss_w::text, '') = '') then
		ie_tipo_tabela_tiss_w	:= ptu_aviso_pck.gera_cd_tabela('M', ie_tipo_despesa_w, null, nr_seq_material_w );
	end if;
	
	-- OS 455575 - Alguns campos devem ser exatamentes iguais ao dados importados no A500	
	begin
		select	max(a.cd_usuario_plano),
			max(a.nm_beneficiario),
			max(a.dt_atendimento),
			substr(max(a.cd_unimed), 1, 4)
		into STRICT	cd_usuario_plano_cob_w,
			nm_segurado_cob_w,
			dt_atendimento_cob_w,
			cd_unimed_benef_cob_w
		from	ptu_nota_cobranca	a,
			ptu_nota_servico	b,
			pls_conta_mat		c
		where	a.nr_sequencia	= b.nr_seq_nota_cobr
		and	c.nr_sequencia	= b.nr_seq_conta_mat
		and	c.nr_sequencia	= nr_seq_conta_proc_mat_p
		and	a.nr_seq_fatura	= nr_seq_ptu_fatura_w;
	exception
	when others then
		cd_usuario_plano_cob_w	:= cd_usuario_plano_w;
		nm_segurado_cob_w	:= nm_segurado_w;
		dt_atendimento_cob_w	:= dt_atendimento_w;
		cd_unimed_benef_cob_w	:= cd_unimed_benef_w;
	end;
	
	if (coalesce(trim(both ds_servico_w)::text, '') = '') and (ie_tipo_tabela_w in (2,5)) then
		ds_servico_w := substr(ptu_somente_caracter_permitido(pls_obter_dados_conta_mat(nr_seq_conta_proc_mat_p,'D'),'ANS'),1,80);
	end if;
	
	cd_usuario_plano_cob_w	:= coalesce(cd_usuario_plano_cob_w,cd_usuario_plano_w);
	nm_segurado_cob_w	:= coalesce(coalesce(nm_segurado_cob_w,nm_segurado_w),'ID_BENEF INVALIDO');
	dt_atendimento_cob_w	:= coalesce(dt_atendimento_cob_w,dt_atendimento_w);
	cd_unimed_benef_cob_w	:= coalesce(cd_unimed_benef_cob_w,cd_unimed_benef_w);

	-- Obter o numero da conta
	select	nr_seq_conta,
		nr_seq_conta_proc_mat_p
	into STRICT	nr_seq_conta_w,
		nr_seq_conta_mat_w
	from	pls_conta_mat
	where	nr_sequencia	= nr_seq_conta_proc_mat_p;

	CALL pls_gerar_motivo_quest(	nr_seq_conta_proc_mat_p,
				nr_seq_conta_p,
				'M',
				cd_estabelecimento_p,
				nm_usuario_p);
				
	select	count(1)
	into STRICT	qt_reg_contest_w
	from	pls_contestacao_mat
	where	nr_seq_conta_mat	= nr_seq_conta_mat_w;
end if;

-- Se nao tiver em contestacao, nao esta esta sendo cobrado
if (qt_reg_contest_w = 0) then
	ie_tipo_acordo_w	:= '11';
end if;

if (nr_seq_contestacao_p IS NOT NULL AND nr_seq_contestacao_p::text <> '') then
	select	coalesce(max(ie_tipo_arquivo),1)
	into STRICT	ie_tipo_arquivo_w
	from	ptu_camara_contestacao
	where	nr_sequencia	= nr_seq_contestacao_p;
	
	if (ie_tipo_arquivo_w = 1) then
		qt_acordada_w := 0;
	end if;
end if;

select	nextval('ptu_questionamento_seq')
into STRICT	nr_seq_questionamento_w
;

cd_interface_w	:= pls_obter_interf_ptu(cd_estabelecimento_p, nr_seq_congenere_w, clock_timestamp(), 'A550');
ie_versao_w	:= somente_numero(ptu_obter_versao_dominio('A550', cd_interface_w));

ie_versao_xml_w  := somente_numero(ptu_batch_xml_pck.obter_versao_dominio( cd_estabelecimento_p, nr_seq_congenere_w, null, clock_timestamp(), 'A550'))*100;

-- se for da PTU 11.3 ou posterior
if (ie_tipo_tabela_w = '4') and (ie_versao_w >= 113) then
	ie_pacote_w := ' ';
end if;

-- Se for XML
if (ie_versao_xml_w > 0) and (ie_tipo_exportacao_w <> 'XML') then

	-- Se for procedimento
	if (cd_proc_conversao_w IS NOT NULL AND cd_proc_conversao_w::text <> '') and (coalesce(cd_material_ops_w::text, '') = '') then
		
		cd_servico_aux_w	:= cd_proc_conversao_w;
		
		cd_proc_conversao_w	:= ptu_conversao_item_tabela(ie_tipo_tabela_w, cd_proc_conversao_w, ie_origem_proced_w);
		ie_tipo_tabela_tiss_w	:= ptu_conversao_tipo_tabela(ie_tipo_tabela_w, cd_proc_conversao_w, 'E', ie_origem_proced_w);

		ie_tipo_tabela_aux_w		:= null;
		ie_tipo_tabela_tiss_aux_w	:= null;		
		ie_tipo_intercambio_w 		:= 'A';

		if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
			-- Obter a UF da operadora  - Tasy
			select	coalesce(max(sg_estado), 'X')
			into STRICT	sg_estado_w
			from	pessoa_juridica
			where	cd_cgc	= (	SELECT	max(cd_cgc_outorgante)
						from	pls_outorgante
						where	cd_estabelecimento = cd_estabelecimento_p);

			-- Obter a UF da operadora do beneficiario eventual ou que enviou o protocolo
			select	coalesce(max(a.sg_estado), 'X'),
				coalesce(max(b.ie_nacional), 'N')
			into STRICT	sg_estado_int_w,
				ie_nacional_w
			from	pessoa_juridica	a,
				pls_congenere	b
			where	a.cd_cgc	= b.cd_cgc
			and	b.nr_sequencia	= nr_seq_congenere_w;

			if (ie_nacional_w = 'S') then
				ie_tipo_intercambio_w := 'N';
			elsif (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
				if (sg_estado_w = sg_estado_int_w) then
					ie_tipo_intercambio_w := 'E';
				else
					ie_tipo_intercambio_w := 'N';
				end if;
			else
				ie_tipo_intercambio_w := 'A';
			end if;
		end if;		
		
		-- busca a conversao
		select 	max(a.cd_proc_envio),
			max(a.ie_tipo_tabela_scs)
		into STRICT 	cd_servico_aux_w,
			ie_tipo_tabela_aux_w
		from 	pls_conversao_proc a
		where 	trunc(clock_timestamp()) between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref
		and 	a.cd_estabelecimento	= cd_estabelecimento_p
		and 	a.cd_procedimento	= cd_servico_aux_w
		and 	a.ie_origem_proced 	= ie_origem_proced_w
		and 	coalesce(a.ie_ptu_a550, 'N') = 'S'
		and 	ie_envio_receb 		= 'E'
		and 	ie_situacao 		= 'A'
		and 	(cd_proc_envio IS NOT NULL AND cd_proc_envio::text <> '')
		and 	(ie_tipo_tabela_scs IS NOT NULL AND ie_tipo_tabela_scs::text <> '')
		and	((coalesce(ie_tipo_intercambio::text, '') = '') or (ie_tipo_intercambio = 'A') or (ie_tipo_intercambio	= ie_tipo_intercambio_w))
		and  	((coalesce(nr_seq_prestador::text, '') = '') or (nr_seq_prestador = nr_seq_prestador_w))
		and  	((coalesce(nr_seq_congenere::text, '') = '') or (nr_seq_congenere = nr_seq_congenere_w))
		and  	((coalesce(nr_seq_tipo_atendimento::text, '') = '') or (nr_seq_tipo_atendimento = nr_seq_tipo_atendimento_w));
		
		-- se tiver conversao de procedimento e de tipo de tabela
		if (cd_servico_aux_w IS NOT NULL AND cd_servico_aux_w::text <> '') and (ie_tipo_tabela_aux_w IS NOT NULL AND ie_tipo_tabela_aux_w::text <> '') then

			cd_proc_conversao_w		:= cd_servico_aux_w;

			-- muda para o padrao TISS
			select  case ie_tipo_tabela_aux_w
				when 0 then '22'
				when 1 then '18'
				when 2 then '00'
				when 3 then '00'
				when 4 then '98'
				when 5 then '19'
				when 6 then '20'
				end
			into STRICT  	ie_tipo_tabela_tiss_aux_w
			;

			ie_tipo_tabela_tiss_w	:= ie_tipo_tabela_tiss_aux_w;
		end if;
	end if;
	
	-- Se for material
	if (cd_material_ops_w IS NOT NULL AND cd_material_ops_w::text <> '') then
		
		cd_servico_aux_w	:= cd_material_ops_w;
		
		ie_tipo_tabela_tiss_w	:= ptu_conversao_tipo_tabela(ie_tipo_tabela_w, cd_material_ops_w, 'E', null);
		cd_material_ops_w	:= ptu_conversao_item_tabela(ie_tipo_tabela_w, cd_material_ops_w, null);

		-- Pegar a codificacao do material
		select	max(coalesce(b.ie_codificacao,1))
		into STRICT	ie_codificacao_mat_w
		from	pls_material	a,
			pls_material_unimed b
		where	b.nr_sequencia	= a.nr_seq_material_unimed
		and	a.nr_sequencia	= nr_seq_material_w;

		-- se nao for TUSS
		if (ie_codificacao_mat_w = 1 ) then
		
			if ie_tipo_tabela_w = 2 then
				ie_tipo_tabela_tiss_w	:= '19'; -- Materiais
			elsif ie_tipo_tabela_w = 3 then
				ie_tipo_tabela_tiss_w	:= '20'; -- Medicamentos
			elsif ie_tipo_tabela_w = 1 then
				ie_tipo_tabela_tiss_w	:= '18'; -- Taxas
			else
				ie_tipo_tabela_tiss_w	:= '00'; -- Tabela propria das Operadoras
			end if;
		
			cd_material_ops_w := ie_tipo_tabela_tiss_w || lpad(cd_servico_aux_w,8,'0');
			
			ie_tipo_tabela_tiss_w := '00';
		end if;
		
	end if;
end if;

-- obter o item unico caso o A500 importado era TXT
if (coalesce(cd_item_unico_w::text, '') = '') then
	cd_item_unico_w		:= pls_obter_id_item_unico(nr_seq_conta_proc_w, nr_seq_conta_mat_w, dt_atendimento_cob_w, cd_unimed_destino_w, nr_seq_a500_w);
end if;

insert into ptu_questionamento(nr_sequencia,
	nr_nota,
	cd_usuario_plano,
	dt_atualizacao,
	nm_usuario,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	ie_tipo_tabela,
	dt_acordo,
	ie_tipo_acordo,
	vl_acordo,
	cd_unimed,
	dt_atendimento,
	cd_servico,
	vl_cobrado,
	vl_reconhecido,
	nm_beneficiario,
	nr_seq_contestacao,
	nr_lote,
	nr_seq_conta,
	nr_seq_conta_proc,
	nr_seq_conta_mat,
	ie_origem_proced,
	nr_seq_a500,
	vl_cobr_co,
	vl_reconh_co,
	vl_acordo_co,
	vl_cobr_filme,
	vl_reconh_filme,        
	vl_acordo_filme,        
	vl_cobr_adic_serv,      
	vl_reconh_adic_serv,    
	vl_acordo_adic_serv,    
	vl_cobr_adic_co,        
	vl_reconh_adic_co,      
	vl_acordo_adic_co,      
	vl_cobr_adic_filme,     
	vl_reconh_adic_filme,
	vl_acordo_adic_filme,
	qt_cobrada,
	qt_reconh,
	ie_pacote,
	cd_pacote,
	dt_servico,
	hr_realiz,
	ds_servico,
	qt_acordada,
	fat_mult_serv,
	nr_seq_nota_servico,
	nr_seq_nota_cobranca,
	ie_tipo_tabela_tiss,
	nr_nota_fiscal_forn,
	nr_guia_tiss_principal,
	cd_item_unico,
	nr_guia_tiss_prestador,
	cd_servico_tiss,
	cd_servico_xml,
	nr_guia_tiss_operadora,
	nr_lote_prest)
values (nr_seq_questionamento_w,
	nr_nota_w, 
	cd_usuario_plano_cob_w, 
	clock_timestamp(),
	nm_usuario_p, 
	clock_timestamp(),
	nm_usuario_p,
	ie_tipo_tabela_w,
	null,
	ie_tipo_acordo_w,
	vl_acordo_w,
	cd_unimed_benef_cob_w,
	dt_atendimento_cob_w,
	coalesce(cd_proc_conversao_w, cd_material_ops_w),
	vl_cobrado_w,
	vl_reconhe_w,
	nm_segurado_cob_w,
	nr_seq_contestacao_p,
	nr_seq_lote_w,
	nr_seq_conta_w,
	nr_seq_conta_proc_w,
	nr_seq_conta_mat_w,
	ie_origem_proced_w,
	nr_seq_a500_w,
	vl_cobr_co_w,
	vl_reconh_co_w,
	vl_acordo_co_w,
	vl_cobr_filme_w,
	vl_reconh_filme_w,
	vl_acordo_filme_w,
	vl_cobr_adic_serv_w,
	vl_reconh_adic_serv_w,
	vl_acordo_adic_serv_w,
	vl_cobr_adic_co_w,
	vl_reconh_adic_co_w,
	vl_acordo_adic_co_w,
	vl_cobr_adic_filme_w,
	vl_reconh_adic_filme_w,
	vl_acordo_adic_filme_w,
	qt_cobrada_w,
	qt_reconh_w,
	ie_pacote_w,
	cd_pacote_w,
	dt_servico_w,
	hr_realiz_w,
	ds_servico_w,
	qt_acordada_w,
	fat_mult_serv_w,
	nr_seq_nota_servico_w,
	nr_seq_nota_cobranca_w,
	ie_tipo_tabela_tiss_w,
	nr_nota_fiscal_forn_w,
	nr_guia_tiss_principal_w,
	cd_item_unico_w,
	nr_guia_tiss_prestador_w,
	coalesce(cd_servico_tiss_w,cd_proc_conversao_w, somente_numero(cd_material_ops_w)),
	coalesce(cd_servico_xml_w,trim(both cd_servico_tiss_w),trim(both cd_proc_conversao_w), trim(both cd_material_ops_w)),
	nr_guia_tiss_operadora_w,
	nr_lote_prest_w);

begin
nr_seq_analise_w	:= (pls_obter_dados_conta(nr_seq_conta_w,'AN'))::numeric;
exception
when others then
	nr_seq_analise_w	:= null;
end;

begin

open C01;
loop
fetch C01 into
	nr_seq_mot_questionamento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ds_parecer_w 		:= null;
	ds_parecer_aux_w	:= null;
	

	
	select	max(cd_motivo),
		max(ie_parecer_analise)
	into STRICT	cd_motivo_w,
		ie_parecer_analise_w
	from	ptu_motivo_questionamento
	where	nr_sequencia	= nr_seq_mot_questionamento_w;
	
	if (cd_motivo_w = '98') or (coalesce(ie_parecer_analise_w,'N') = 'S') then
		if (ie_tipo_w = 'P') then
			
			select	max(b.ds_parecer_glosa)
			into STRICT	ds_parecer_w
			from	pls_contest_item_glosa	b,
				pls_contestacao_proc	a
			where	a.nr_sequencia 		= nr_seq_contest_proc
			and	a.nr_seq_conta_proc	= nr_seq_conta_proc_mat_p
			and	b.nr_seq_mot_quest	= nr_seq_mot_questionamento_w;
				
			/*aaschlote 15/04/2014 OS - 660251*/

			if	(((coalesce(ds_parecer_w::text, '') = '') and (nr_seq_analise_w IS NOT NULL AND nr_seq_analise_w::text <> '')) or (ie_ultimo_parecer_w = 'S')) then -- quando o parametro estiver marcado, deve ir o ultimo parecer da analise.
				
				if (ie_ultimo_parecer_w = 'N') then
					for r_c03_w in C03(nr_seq_analise_w, nr_seq_conta_proc_w) loop
						
						ds_parecer_w	:= replace(ds_parecer_w,r_c03_w.ds_parecer,' ');
					
						ds_parecer_w	:= substr(ds_parecer_w||' - '||r_c03_w.ds_parecer,1,4000);
						
					end loop;
				else
					--Apenas o ultimo parecer do item
					for r_c05_w in C05(nr_seq_analise_w, nr_seq_conta_proc_w) loop
						
						ds_parecer_w	:= substr(' - '||r_c05_w.ds_parecer,1,4000);						
					end loop;
					
				end if;
				
			end if;
			
		elsif (ie_tipo_w = 'M') then
			
			select	max(b.ds_parecer_glosa)
			into STRICT	ds_parecer_w
			from	pls_contest_item_glosa	b,
				pls_contestacao_mat	a
			where	a.nr_sequencia 		= nr_seq_contest_mat
			and	a.nr_seq_conta_mat	= nr_seq_conta_proc_mat_p
			and	b.nr_seq_mot_quest	= nr_seq_mot_questionamento_w;
			
			/*aaschlote 15/04/2014 OS - 660251*/

			if	(((coalesce(ds_parecer_w::text, '') = '') and (nr_seq_analise_w IS NOT NULL AND nr_seq_analise_w::text <> '')) or (ie_ultimo_parecer_w = 'S')) then -- quando o parametro estiver marcado, deve ir o ultimo parecer da analise
				
				if (ie_ultimo_parecer_w = 'N') then
					for r_c02_w in C02(nr_seq_analise_w, nr_seq_conta_mat_w) loop
						
						ds_parecer_w	:= replace(ds_parecer_w,r_c02_w.ds_parecer,' ');
					
						ds_parecer_w	:= substr(ds_parecer_w||' - '||r_c02_w.ds_parecer,1,4000);
						
					end loop;
				else
					for r_c04_w in C04(nr_seq_analise_w, nr_seq_conta_mat_w) loop
						
						ds_parecer_w	:= substr(' - '||r_c04_w.ds_parecer,1,4000);						
					end loop;
				end if;
			end if;
		end if;
	end if;
	
	-- Em alguns casos o parecer pode conter apenas caracteres especiais, nesta situacao eles devem ser descartados, 

	-- para que as rotinas que consomem esta informacao busquem do cadastro shift f11, ao inves de utilizar apenas os caracteres especiais

	-- Quando tiver qualquer informacao que nao seja caracter especial, segue o tratamento padrao
	if ((regexp_replace(ds_parecer_w, '[^0-9A-Za-z]', '') IS NOT NULL AND (regexp_replace(ds_parecer_w, '[^0-9A-Za-z]', ''))::text <> '')) then
		
		ds_parecer_w := replace(replace(ds_parecer_w, chr(13), ''), chr(10), '');
	else
	
		-- Quando o parecer e composto de apenas caracter especial, ele deve ficar null
		ds_parecer_w := null;
	end if;
	
	insert into ptu_questionamento_codigo(nr_sequencia,
		nm_usuario,
		nm_usuario_nrec,
		dt_atualizacao,
		dt_atualizacao_nrec,
		nr_seq_mot_questionamento,
		nr_seq_registro,
		ds_parecer_glosa)
	values (nextval('ptu_questionamento_codigo_seq'),
		nm_usuario_p,
		nm_usuario_p,
		clock_timestamp(),
		clock_timestamp(),
		nr_seq_mot_questionamento_w, 
		nr_seq_questionamento_w,
		ds_parecer_w);	
	end; 	
end loop;
close C01;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(185636,'NR_SEQ_MOTIVO=' || coalesce(nr_seq_mot_questionamento_w, 999999));	
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_questionamento ( nr_seq_conta_proc_mat_p bigint, nr_seq_conta_p bigint, nr_seq_contestacao_p bigint, nr_seq_protocolo_p bigint, ie_tipo_tabela_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

