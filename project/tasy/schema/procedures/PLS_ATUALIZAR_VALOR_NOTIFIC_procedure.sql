-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_valor_notific ( nr_seq_lote_p pls_notificacao_lote.nr_sequencia%type ) AS $body$
DECLARE


nr_seq_pagador_w		bigint;
nr_seq_regra_w			bigint;
ie_titulo_perda_w		varchar(2);
vl_saldo_pagador_w		double precision;
vl_juros_pagador_w		double precision;
vl_multa_pagador_w		double precision;
vl_pagar_pagador_w		double precision;
vl_tot_saldo_titulo_w		double precision;
vl_tot_juros_w			double precision;
vl_tot_multa_w			double precision;
vl_tot_titulo_w			double precision;

qt_benef_rescisao_w		bigint;
qt_pagador_w			bigint;
vl_benef_rescisao_w		double precision;
vl_benef_suspensao_w		double precision;
qt_benef_suspensao_w		double precision;
qt_pag_rescindido_w		bigint;
qt_pag_suspenso_w		bigint;
qt_benef_w			bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_notificacao_pagador
	where	nr_seq_lote	= nr_seq_lote_p;


BEGIN

select  max(nr_seq_regra)
into STRICT    nr_seq_regra_w
from    pls_notificacao_lote
where   nr_sequencia    = nr_seq_lote_p;


if (coalesce(nr_seq_regra_w,0) <> 0) then

	begin
	select  ie_titulo_perda
	into STRICT	ie_titulo_perda_w
        from    pls_notificacao_regra
        where   nr_sequencia    = nr_seq_regra_w
        and     ie_situacao     = 'A';
	exception
	when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(458655, 'NR_SEQ_REGRA_W='||nr_seq_regra_w); --A regra nº #@NR_SEQ_REGRA_W#@ está inativa. Favor verificar!
	end;
end if;

open C01;
loop
fetch C01 into
	nr_seq_pagador_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	select	sum(vl_saldo_titulo),
		sum(vl_juros),
		sum(vl_multa),
		sum(vl_pagar)
	into STRICT	vl_saldo_pagador_w,
		vl_juros_pagador_w,
		vl_multa_pagador_w,
		vl_pagar_pagador_w
	from	pls_notificacao_item
	where	nr_seq_notific_pagador	= nr_seq_pagador_w;

	update	pls_notificacao_pagador
	set	vl_pagador	= CASE WHEN ie_titulo_perda_w='S' THEN vl_pagar_pagador_w  ELSE vl_saldo_pagador_w END ,
		vl_juros	= vl_juros_pagador_w,
		vl_multa	= vl_multa_pagador_w,
		vl_pagar	= vl_pagar_pagador_w
	where	nr_sequencia	= nr_seq_pagador_w;

	end;
end loop;
close C01;

select	count(*),
	sum(a.vl_pagador),
	sum(a.vl_juros),
	sum(a.vl_multa),
	sum(a.vl_pagar)
	/*sum(pls_benef_obter_rescindido(0, nr_seq_pagador, 2)),
	sum(pls_benef_obter_rescindido(0, nr_seq_pagador, 1)),
	sum(pls_benef_obter_suspenso(0, nr_seq_pagador, 2)),
	sum(pls_benef_obter_suspenso(0, nr_seq_pagador, 1)),
	sum(decode(a.dt_rescisao,null,0,1)),
	sum(decode(a.dt_suspensao,null,0,1))*/
into STRICT	qt_pagador_w,
	vl_tot_saldo_titulo_w,
	vl_tot_juros_w,
	vl_tot_multa_w,
	vl_tot_titulo_w
	/*vl_benef_rescisao_w,
	qt_benef_rescisao_w,
	vl_benef_suspensao_w,
	qt_benef_suspensao_w,
	qt_pag_rescindido_w,
	qt_pag_suspenso_w*/
from	pls_notificacao_pagador	a
where	a.nr_seq_lote	= nr_seq_lote_p;

qt_benef_w			:= pls_obter_resc_susp_lote_not(nr_seq_lote_p,null,'B');
qt_benef_rescisao_w		:= pls_obter_resc_susp_lote_not(nr_seq_lote_p,null,'BR');
qt_benef_suspensao_w		:= pls_obter_resc_susp_lote_not(nr_seq_lote_p,null,'BS');
vl_benef_rescisao_w		:= pls_obter_resc_susp_lote_not(nr_seq_lote_p,null,'VBR');
vl_benef_suspensao_w		:= pls_obter_resc_susp_lote_not(nr_seq_lote_p,null,'VBS');
qt_pag_rescindido_w		:= pls_obter_resc_susp_lote_not(nr_seq_lote_p,null,'PR');
qt_pag_suspenso_w		:= pls_obter_resc_susp_lote_not(nr_seq_lote_p,null,'PS');

update	pls_notificacao_lote
set	vl_saldo		= coalesce(vl_tot_saldo_titulo_w,0),
	vl_titulo		= coalesce(vl_tot_titulo_w,0),
	vl_juros		= coalesce(vl_tot_juros_w,0),
	vl_multa		= coalesce(vl_tot_multa_w,0),
	vl_pagar		= coalesce(vl_tot_saldo_titulo_w + vl_tot_juros_w + vl_tot_multa_w,0),
	qt_benef_rescindido	= coalesce(qt_benef_rescisao_w,0),
	qt_pagador		= coalesce(qt_pagador_w,0),
	vl_rescisao		= coalesce(vl_benef_rescisao_w,0),
	vl_suspensao		= coalesce(vl_benef_suspensao_w,0),
	qt_benef_suspenso	= coalesce(qt_benef_suspensao_w,0),
	qt_pagador_resc		= coalesce(qt_pag_rescindido_w,0),
	qt_pagador_susp		= coalesce(qt_pag_suspenso_w,0),
	qt_beneficiarios	= coalesce(qt_benef_w,0)
where	nr_sequencia		= nr_seq_lote_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_valor_notific ( nr_seq_lote_p pls_notificacao_lote.nr_sequencia%type ) FROM PUBLIC;

