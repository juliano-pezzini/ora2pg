-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_aprov_solic_compra ( nr_solic_compra_p bigint, cd_perfil_ativo_p bigint, nm_usuario_p text, qt_dias_obter_compra_p bigint, ie_commit_p text) AS $body$
DECLARE


cd_material_w			integer;
nr_seq_aprovacao_w		bigint;
cd_processo_aprov_w		bigint;
nr_item_solic_compra_w		integer;
cd_cargo_w			bigint	:= 0;
cd_centro_custo_w		bigint	:= 0;
cd_estabelecimento_w		smallint	:= 0;
cd_local_estoque_w		smallint	:= 0;
cd_responsavel_w			varchar(10);
ie_responsavel_w			varchar(01);
ie_urgente_w			varchar(01);
cd_unidade_medida_w		varchar(30);
nr_sequencia_w			bigint;
dt_liberacao_w			timestamp;
nr_items_sem_aprov_w		smallint;
nr_seq_nf_w			bigint;
vl_ultima_compra_w		double precision;
qt_conv_compra_estoque_w	double precision;
cd_unidade_medida_compra_w	varchar(30);
cd_unidade_solic_w		varchar(30);
nr_seq_proj_rec_w		bigint;
cd_evento_w			smallint;
cd_setor_atendimento_w		integer;
nr_seq_regra_w			bigint := 0;
nm_usuario_destino_w		varchar(2000);
ie_comunic_aprovacao_w		varchar(1);
dt_entrega_w			timestamp;
ds_itens_w			varchar(4000);
ds_comunic_oc_ww		varchar(4000);
ds_comunic_oc_w			varchar(4000);
ds_titulo_w			varchar(2000);
ds_comunic_w			varchar(4000);
qt_regra_usuario_w		bigint;
nr_seq_comunic_w		bigint;
nr_seq_classif_w		bigint;
nm_usuario_regra_w		varchar(15);
ds_email_adicional_w		varchar(2000);
cd_perfil_disparar_w		varchar(10);
ds_email_origem_w			varchar(255);
nm_usuario_origem_w		varchar(255);
ds_assunto_padrao_w		varchar(255);
ds_email_destino_w			varchar(2000);
ds_mensagem_padrao_w		varchar(4000);
cd_perfil_ativo_w			bigint;
cd_perfil_w			varchar(5);
ie_ci_lida_w			varchar(1);
ie_gera_cot_oc_aprov_solic_w	varchar(1);
ie_forma_compra_w			varchar(10);
qt_existe_contrato_w		bigint;
ie_tipo_servico_w			varchar(15);
cd_conta_contabil_w		varchar(20); -- do item
cd_conta_contabil_ww		varchar(20); -- da solicitacao (geral)
dt_solicitacao_compra_w		timestamp;
vl_empenhado_w			double precision;
vl_orcado_w			double precision;
vl_solic_compra_w			double precision;
vl_diferenca_w			double precision := 0;
ie_tipo_solic_w			varchar(1) := 'S';
ie_fica_pend_aprov_sc_w		varchar(1);
ie_momento_envio_w		varchar(1);
nr_seq_proc_email_w		bigint;
/* Se tiver setor na regra, envia CI para os setores */

ds_setor_adicional_w                    	varchar(2000) := '';
/* Campos da regra Usuario da Regra */

cd_setor_regra_usuario_w		integer;
ie_aprovacao_nivel_w			varchar(1);
nr_nivel_atual_w			bigint;
nr_nivel_aprovacao_w			bigint;
nr_nivel_aprovacao_w2			bigint;
dt_liberacao_ww				timestamp;
ie_tipo_vl_prev_w			varchar(1);
ie_integracao_solic_w			varchar(15);
ds_erro_w				varchar(2000);
cd_pessoa_solicitante_w			varchar(10);
nr_seq_motivo_solic_w			bigint;
ie_norma_compra_w			varchar(1);
ie_commit_w				varchar(1);
cd_fornec_sugerido_w			varchar(14);
cd_pessoa_fisica_w			varchar(10);
ie_atualiza_vl_unit_w			varchar(15);
qt_pend_aprov				bigint;
qt_item_contrato_inativo_w	bigint;
qt_reg_w					bigint;
vl_minimo_w				processo_aprov_resp.vl_minimo%type;
vl_maximo_w				processo_aprov_resp.vl_maximo%type;
qt_minimo_aprovador_w			processo_aprov_resp.qt_minimo_aprovador%type;
qt_itens_regra_w			processo_aprov_resp.qt_itens_regra%type;
qt_intervalo_regra_w			processo_aprov_resp.qt_intervalo_regra%type;

c00 CURSOR FOR
SELECT	a.cd_material,
	a.nr_item_solic_compra,
	a.cd_unidade_medida_compra
from	Material c,
	Solic_Compra b,
	solic_Compra_Item a
where	a.nr_solic_compra		= nr_solic_compra_p
and	a.nr_solic_compra		= b.nr_solic_compra
and	coalesce(a.vl_unit_previsto,0)	= 0
and	a.cd_material			= c.cd_material
and	ie_atualiza_vl_unit_w		= 'S';

c01 CURSOR FOR
SELECT	a.nr_seq_aprovacao,
	a.cd_material,
	a.nr_item_solic_compra,
	b.cd_centro_custo,
	b.cd_local_estoque,
	a.nr_seq_proj_rec,
	a.cd_conta_contabil
from 	estrutura_material_v e,
	solic_compra b,
	solic_Compra_Item a
where 	a.nr_solic_compra		= nr_solic_compra_p
and 	coalesce(a.dt_autorizacao::text, '') = ''
and 	a.cd_material		= e.cd_material
and 	a.nr_solic_compra		= b.nr_solic_compra
order by	e.cd_grupo_material,
	e.cd_subgrupo_material,
	e.cd_classe_material,
	e.cd_material;

c02 CURSOR FOR
SELECT	nr_sequencia,
	ie_responsavel,
	cd_cargo,
	nm_usuario_regra,
	nr_nivel_aprovacao,
	vl_minimo,
	vl_maximo,
	qt_minimo_aprovador,
	qt_itens_regra,
	qt_intervalo_regra
from	processo_aprov_resp
where	cd_processo_aprov		= cd_processo_aprov_w
and	((ie_tipo_solic_w = 'S' AND ie_solicitacao_compra = 'S') or
	 (ie_tipo_solic_w = 'P' AND ie_solicitacao_pagto = 'S'))
order by	1;

c03 CURSOR FOR
SELECT	distinct nr_seq_aprovacao
from	solic_compra_item a
where	nr_solic_compra	= nr_solic_compra_p
and	coalesce(a.dt_autorizacao::text, '') = '';

c04 CURSOR FOR
SELECT	b.nr_sequencia,
	b.cd_perfil
from	regra_envio_comunic_compra a,
	regra_envio_comunic_evento b
where	a.nr_sequencia = b.nr_seq_regra
and	a.cd_funcao = 913
and	b.cd_evento = cd_evento_w
and	b.ie_situacao = 'A'
and	a.cd_estabelecimento = cd_estabelecimento_w
and	((cd_setor_atendimento_w IS NOT NULL AND cd_setor_atendimento_w::text <> '' AND b.cd_setor_destino = cd_setor_atendimento_w) or
	((coalesce(cd_setor_atendimento_w::text, '') = '') and (coalesce(b.cd_setor_destino::text, '') = '')) or (coalesce(b.cd_setor_destino::text, '') = ''))
and	substr(obter_se_envia_ci_regra_compra(b.nr_sequencia,nr_solic_compra_p,'SC',cd_perfil_ativo_p,nm_usuario_p,null),1,1) = 'S';

c05 CURSOR FOR
SELECT	substr(obter_desc_material(a.cd_material),1,50),
	coalesce(b.dt_entrega_solicitada, a.dt_solic_item)
from	solic_compra_item a,
	solic_compra_item_entrega b
where	a.nr_solic_compra = nr_solic_compra_p
and	a.nr_solic_compra = b.nr_solic_compra
and	a.nr_item_solic_compra = b.nr_item_solic_compra
and	substr(obter_se_material_estoque(cd_estabelecimento_w,cd_estabelecimento_w,a.cd_material),1,1) = CASE WHEN ie_comunic_aprovacao_w='E' THEN 'S' WHEN ie_comunic_aprovacao_w='M' THEN 'N' END;

c06 CURSOR FOR
SELECT	nr_sequencia,
	ds_email_adicional,
	cd_perfil_disparar,
	coalesce(ie_momento_envio,'I')
from	regra_envio_email_compra
where	ie_tipo_mensagem = 33
and	ie_situacao = 'A'
and	cd_estabelecimento = cd_estabelecimento_w
and	obter_se_envia_email_regra(nr_solic_compra_p, 'SC', 33, cd_estabelecimento_w) = 'S';

c07 CURSOR FOR
SELECT	coalesce(a.cd_setor_atendimento,0) cd_setor_atendimento
from	regra_envio_comunic_usu a
where	a.nr_seq_evento = nr_seq_regra_w;


BEGIN
select	count(*)
into STRICT	qt_reg_w
from 	solic_compra_item i,
		projeto_recurso p
where	i.nr_seq_proj_rec = p.nr_sequencia
and		(p.dt_suspensa IS NOT NULL AND p.dt_suspensa::text <> '')
and		i.nr_solic_compra = nr_solic_compra_p;

if (qt_reg_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1031851);
end if;


select	coalesce(ie_urgente,'N'),
	cd_estabelecimento,
	cd_setor_atendimento,
	ie_tipo_servico,
	dt_solicitacao_compra,
	cd_pessoa_solicitante,
	nr_seq_motivo_solic,
	cd_local_estoque,
	cd_centro_custo,
	cd_conta_contabil,
	cd_fornec_sugerido,
	cd_pessoa_fisica
into STRICT	ie_urgente_w,
	cd_estabelecimento_w,
	cd_setor_atendimento_w,
	ie_tipo_servico_w,
	dt_solicitacao_compra_w,
	cd_pessoa_solicitante_w,
	nr_seq_motivo_solic_w,
	cd_local_estoque_w,
	cd_centro_custo_w,
	cd_conta_contabil_ww,
	cd_fornec_sugerido_w,
	cd_pessoa_fisica_w
from	solic_compra
where	nr_solic_compra = nr_solic_compra_p;

ie_commit_w	:= coalesce(ie_commit_p,'S');

select	coalesce(ie_comunic_aprovacao, 'N'),
	ie_gera_cot_oc_aprov_solic,
	coalesce(ie_fica_pend_aprov_sc,'N'),
	ie_integracao_solic
into STRICT 	ie_comunic_aprovacao_w,
	ie_gera_cot_oc_aprov_solic_w,
	ie_fica_pend_aprov_sc_w,
	ie_integracao_solic_w
from	parametro_compras
where	cd_estabelecimento = cd_estabelecimento_w;

cd_perfil_ativo_w	:= obter_perfil_ativo;

select	coalesce((max(obter_valor_param_usuario(913, 25, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w))),'N'),
	coalesce((max(obter_valor_param_usuario(913, 165, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w))),'0'),
	coalesce((max(obter_valor_param_usuario(913, 215, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w))),'N')
into STRICT	ie_atualiza_vl_unit_w,
	ie_tipo_vl_prev_w,
	ie_norma_compra_w
;

if (ie_integracao_solic_w = 'P') then

	delete from erros_integracao_piramide
	where	cd_Estabelecimento = cd_estabelecimento_w
	and	nm_usuario = nm_usuario_p
	and	ie_funcao = 'SC';
	
  EXECUTE 'CALL pir_integra_solic_compra(
  :nr_solic_compra_p,
  :cd_pessoa_solicitante_w,
  :nr_seq_motivo_solic_w,
  :cd_local_estoque_w,
  :cd_centro_custo_w,
  :cd_estabelecimento_w,
  :nm_usuario_p)'
  using
  nr_solic_compra_p
  ,cd_pessoa_solicitante_w
  ,coalesce(nr_seq_motivo_solic_w,0)
  ,coalesce(cd_local_estoque_w,0)
  ,coalesce(cd_centro_custo_w,0)
  ,cd_estabelecimento_w
  ,nm_usuario_p;

	select	max(ds_erro)
	into STRICT	ds_erro_w
	from	erros_integracao_piramide
	where	cd_Estabelecimento = cd_estabelecimento_w
	and	nm_usuario = nm_usuario_p
	and	ie_funcao = 'SC';

	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(188174,'DS_MENSAGEM=' || ds_erro_w);
	end if;
end if;

select	count(*)
into STRICT	qt_item_contrato_inativo_w
from	solic_compra_item i,
		contrato c
where	i.nr_contrato = c.nr_sequencia
and		c.ie_situacao = 'I'
and		i.nr_solic_compra = nr_solic_compra_p;

if (qt_item_contrato_inativo_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1029198,'NR_SOLIC_COMPRA_P=' || nr_solic_compra_p);
end if;

update	solic_compra
set	dt_liberacao		= clock_timestamp(),
	dt_pre_liberacao	= clock_timestamp(),
	nm_usuario_lib		= nm_usuario_p,
	nm_usuario_pre_lib	= nm_usuario_p
where	nr_solic_compra		= nr_solic_compra_p;

CALL atualiza_status_solic_bionexo(nr_solic_compra_p, 'AE', '', nm_usuario_p);

CALL gerar_historico_solic_compra(
			nr_solic_compra_p,
			WHEB_MENSAGEM_PCK.get_texto(301395),
			WHEB_MENSAGEM_PCK.get_texto(301396,'DT_ATUAL_W=' || PKG_DATE_FORMATERS.TO_VARCHAR(clock_timestamp(), 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p) || ';' || 'NM_USUARIO_W=' || nm_usuario_p),
			'L',
			nm_usuario_p);
			
if (ie_norma_compra_w = 'S') then
	CALL atualizar_norma_compra_solic(nr_solic_compra_p, 'L', nm_usuario_p);
end if;			

open c00;
loop
fetch c00 into
	cd_material_w,
	nr_item_solic_compra_w,
	cd_unidade_solic_w;
EXIT WHEN NOT FOUND; /* apply on c00 */
	begin
	if (ie_tipo_vl_prev_w = '0') then
		vl_ultima_compra_w := obter_dados_ult_compra_data(cd_estabelecimento_w,cd_material_w,null,clock_timestamp(),0,'VE');
				
	elsif (ie_tipo_vl_prev_w = '1') then
		vl_ultima_compra_w := obter_dados_ult_compra_data(cd_estabelecimento_w,cd_material_w,null,clock_timestamp(),0,'VU');
	
	elsif (ie_tipo_vl_prev_w = '2') then
		vl_ultima_compra_w := obter_maior_vl_compra_mat(cd_estabelecimento_w,9999,cd_material_w,null,'N');
	
	elsif (ie_tipo_vl_prev_w = '3') then
		vl_ultima_compra_w := obter_maior_vl_compra_12_mes(cd_estabelecimento_w,9999,cd_material_w,null,'N');

	elsif (ie_tipo_vl_prev_w = '4') then
		vl_ultima_compra_w := obter_maior_valor_compra_geral(cd_material_w,null,'N',cd_unidade_solic_w);
	
	elsif (ie_tipo_vl_prev_w = '5') then
		vl_ultima_compra_w := 	obter_maior_valor_compra_geral(cd_material_w,null,'S',cd_unidade_solic_w);
	
	end if;
	
	update	solic_compra_item
	set	vl_unit_previsto 	= vl_ultima_compra_w
	where	nr_solic_compra		= nr_solic_compra_p
	and	nr_item_solic_compra	= nr_item_solic_compra_w;
	end;
end loop;
close c00;

open c01;
loop
fetch c01 into
	nr_seq_aprovacao_w,
	cd_material_w,
	nr_item_solic_compra_w,
	cd_centro_custo_w,
	cd_local_estoque_w,
	nr_seq_proj_rec_w,
	cd_conta_contabil_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	ie_tipo_solic_w := 'S';
	if (coalesce(nr_seq_aprovacao_w::text, '') = '') then

		if (coalesce(cd_centro_custo_w::text, '') = '') then
			select	coalesce(max(cd_centro_custo),null)
			into STRICT	cd_centro_custo_w
			from	local_estoque
			where	cd_estabelecimento = cd_estabelecimento_w
			and	cd_local_estoque = cd_local_estoque_w;
		end if;
		
		if (ie_tipo_servico_w in ('SR','SP','SI')) then 	/*OS 1144848 - Foi solicitado pelo Gasparetti do Sirio para que esses tipos nao considerasse o valor do orcamento. Sempre cair para a rota de "Solicitacao fora orcado"*/

									/*OS 1193697 - Foi solicitado pelo Gasparetti do Sirio para que as SI sigam o mesmo fluxo das SP e SR*/

			ie_tipo_solic_w := 'P';
		end if;

		--if	(ie_tipo_servico_w in ('CD','SN')) then	/* OS 1144848 */		
		if (ie_tipo_servico_w in ('CD')) then	/* OS 1351462 - Foi pedido para tirar o SN*/
	

			select	coalesce(obter_vl_orcado_empenhado_ano( cd_conta_contabil_w, cd_centro_custo_w, cd_Estabelecimento_w, dt_solicitacao_compra_w, 'E'),0)  vl_empenhado
			into STRICT	vl_empenhado_w
			;

			SELECT	coalesce(SUM(vl_orcado),0) vl_orcado
			into STRICT	vl_orcado_w
			FROM (
				SELECT	
					coalesce(a.vl_orcado,0) vl_orcado,
					CASE WHEN c.dt_referencia=ESTABLISHMENT_TIMEZONE_UTILS.startOfmonth(clock_timestamp()) THEN  coalesce(ctb_obter_empenho_orcamento(a.nr_seq_mes_ref, a.cd_conta_contabil, b.cd_centro_custo,a.cd_estabelecimento),0)  ELSE 0 END  vl_empenho
				FROM	ctb_mes_ref c,
					centro_custo b,
					ctb_orcamento a
				WHERE	b.cd_estabelecimento = a.cd_estabelecimento
				AND	b.cd_centro_custo	 = a.cd_centro_custo
				AND	c.nr_sequencia	 = a.nr_seq_mes_ref
				AND	a.cd_estabelecimento = cd_estabelecimento_w
				AND	c.dt_referencia BETWEEN ESTABLISHMENT_TIMEZONE_UTILS.startOfyear(clock_timestamp()) AND ESTABLISHMENT_TIMEZONE_UTILS.EndOfyear(clock_timestamp())
				AND	b.cd_centro_custo	= coalesce(cd_centro_custo_w, b.cd_centro_custo)
				and	a.cd_conta_contabil	= coalesce(cd_conta_contabil_w, a.cd_conta_contabil)) alias13;

			select	sum(qt_material * coalesce(vl_unit_previsto,0))
			into STRICT	vl_solic_compra_w
			from	solic_compra_item
			where	nr_solic_compra		= nr_solic_compra_p;
			
			if (vl_orcado_w > 0) then
				vl_diferenca_w	:= vl_orcado_w - vl_empenhado_w - vl_solic_compra_w;
			else
				vl_diferenca_w := 0;
			end if;
			
			if (vl_diferenca_w < 0) then
				ie_tipo_solic_w := 'P';
			end if;
		end if;
	
		cd_processo_aprov_w := obter_processo_aprovacao(
			cd_material_w, cd_centro_custo_w, cd_setor_atendimento_w, cd_local_estoque_w, null,  -- cd_local_estoque_destino_p - Usado somente na requisicao
			null,  -- cd_operacao_estoque_p       - Usado somente na requisicao
			coalesce(cd_conta_contabil_w,cd_conta_contabil_ww), cd_fornec_sugerido_w, cd_pessoa_fisica_w, ie_tipo_solic_w, ie_urgente_w, cd_estabelecimento_w, cd_perfil_ativo_p, nr_seq_proj_rec_w, nr_solic_compra_p, cd_processo_aprov_w);
	end if;


	if (coalesce(cd_processo_aprov_w::text, '') = '') then
		begin

		if (ie_fica_pend_aprov_sc_w = 'N') then /*Identifica se quando nao possui regras de aprovacao, e para deixar a solicitacao pendente de aprovacao*/
		
			select	count(*)
			into STRICT	qt_pend_aprov
			from	solic_compra_item
			where	nr_solic_compra = nr_solic_compra_p
			and		nr_item_solic_compra = nr_item_solic_compra_w
			and		nr_seq_aprovacao > 0
			and		coalesce(dt_autorizacao::text, '') = '';

			if (qt_pend_aprov = 0) then
				update	solic_compra_item
				set	dt_autorizacao		= clock_timestamp()
				where	nr_solic_compra		= nr_solic_compra_p
				and	nr_item_solic_compra	= nr_item_solic_compra_w;
			end if;

		end if;

		end;
	else
		begin

		select	coalesce(max(b.nr_sequencia),0)
		into STRICT 	nr_seq_aprovacao_w
		from 	processo_aprov_compra a,
			processo_compra b
		where 	b.nr_sequencia = a.nr_sequencia
		and 	b.cd_processo_aprov = cd_processo_aprov_w
		and 	a.nr_documento = nr_solic_compra_p
		and 	a.cd_estabelecimento = cd_estabelecimento_w
		and	a.ie_tipo = 'S';
		
		if (nr_seq_aprovacao_w = 0) then	
			begin

			select nextval('processo_compra_seq')
			into STRICT nr_seq_aprovacao_w
			;

			insert into processo_compra(
				nr_sequencia,
				cd_processo_aprov ,
				dt_atualizacao,
				nm_usuario)
			values (	nr_seq_aprovacao_w,
				cd_processo_aprov_w,
				clock_timestamp(),
				nm_usuario_p);

			dt_liberacao_w			:= clock_timestamp();

			open c02;
			loop
			fetch c02 into
				nr_sequencia_w,
				ie_responsavel_w,
				cd_cargo_w,
				nm_usuario_regra_w,
				nr_nivel_aprovacao_w,
				vl_minimo_w,
				vl_maximo_w,
				qt_minimo_aprovador_w,
				qt_itens_regra_w,
				qt_intervalo_regra_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				cd_responsavel_w	:= '';

				if (coalesce(nr_nivel_aprovacao_w2::text, '') = '') then
					nr_nivel_aprovacao_w2 := nr_nivel_aprovacao_w;
				end if;

				if (ie_responsavel_w = 'R') then

					if (coalesce(cd_centro_custo_w::text, '') = '') then
						select	coalesce(max(cd_centro_custo),null)
						into STRICT	cd_centro_custo_w
						from	local_estoque
						where	cd_estabelecimento	= cd_estabelecimento_w
						and	cd_local_estoque	= cd_local_estoque_w;
					end if;

					select	coalesce(max(b.cd_cargo),null)
					into STRICT	cd_cargo_w
					from	cargo a,
						cargo_centro_custo b
					where	b.cd_centro_custo	= cd_centro_custo_w
					and	b.cd_cargo	= a.cd_cargo
					and	a.ie_situacao	= 'A';
				end if;

				if (ie_responsavel_w <> 'F') then

					if (nr_nivel_aprovacao_w IS NOT NULL AND nr_nivel_aprovacao_w::text <> '')
						and (coalesce(dt_liberacao_w::text, '') = '') then
						
						select	obter_se_proc_por_nivel(nr_seq_aprovacao_w, cd_estabelecimento_w)
						into STRICT	ie_aprovacao_nivel_w
						;
						
						if (ie_aprovacao_nivel_w = 'S') and (nr_nivel_aprovacao_w2 = nr_nivel_aprovacao_w) then
							dt_liberacao_w	:= clock_timestamp();
						else
							dt_liberacao_w	:= null;
						end if;
					end if;

					insert into processo_aprov_compra(
						nr_sequencia,
						nr_seq_proc_aprov,
						dt_atualizacao,
						nm_usuario,
						nm_usuario_nrec,
						cd_pessoa_fisica,
						cd_cargo,
						dt_liberacao,
						dt_definicao,
						ie_aprov_reprov,
						cd_estabelecimento,
						ie_urgente,
						nr_documento,
						ie_tipo,
						dt_documento,
						nr_nivel_aprovacao,
						cd_processo_aprov,
						ie_responsavel,
						vl_minimo,
						vl_maximo,
						qt_minimo_aprovador,
						nm_usuario_regra,
						qt_itens_regra,
						qt_intervalo_regra)
					values (nr_seq_aprovacao_w,
						nr_sequencia_w,
						clock_timestamp(),
						nm_usuario_p,
						nm_usuario_p,
						cd_responsavel_w,
						cd_cargo_w,
						dt_liberacao_w,
						CASE WHEN coalesce(cd_cargo_w::text, '') = '' THEN  clock_timestamp()  ELSE null END ,
						CASE WHEN coalesce(cd_cargo_w::text, '') = '' THEN  'A'  ELSE 'P' END ,
						cd_estabelecimento_w,
						ie_urgente_w,
						nr_solic_compra_p,
						'S',
						dt_solicitacao_compra_w,
						nr_nivel_aprovacao_w,
						cd_processo_aprov_w,
						ie_responsavel_w,
						vl_minimo_w,
						vl_maximo_w,
						qt_minimo_aprovador_w,
						nm_usuario_regra_w,
						qt_itens_regra_w,
						qt_intervalo_regra_w);

					if (cd_cargo_w IS NOT NULL AND cd_cargo_w::text <> '') then
						dt_liberacao_w	:= null;
					end if;

				elsif (ie_responsavel_w = 'F') then

					select	obter_pessoa_fisica_usuario(nm_usuario_regra_w,'C')
					into STRICT	cd_responsavel_w
					;

					if (coalesce(cd_responsavel_w::text, '') = '') then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(188175,'NM_USUARIO=' || nm_usuario_regra_w);
					end if;

					if (nr_nivel_aprovacao_w IS NOT NULL AND nr_nivel_aprovacao_w::text <> '')
						and (coalesce(dt_liberacao_w::text, '') = '') then
						
						select	obter_se_proc_por_nivel(nr_seq_aprovacao_w, cd_estabelecimento_w)
						into STRICT	ie_aprovacao_nivel_w
						;
						
						if (ie_aprovacao_nivel_w = 'S') and (nr_nivel_aprovacao_w2 = nr_nivel_aprovacao_w) then
							dt_liberacao_w	:= clock_timestamp();
						else
							dt_liberacao_w	:= null;
						end if;
					end if;

					insert into processo_aprov_compra(
						nr_sequencia,
						nr_seq_proc_aprov,
						dt_atualizacao,
						nm_usuario,
						nm_usuario_nrec,
						cd_pessoa_fisica,
						cd_cargo,
						dt_liberacao,
						dt_definicao,
						ie_aprov_reprov,
						cd_estabelecimento,
						ie_urgente,
						nr_documento,
						ie_tipo,
						dt_documento,
						nr_nivel_aprovacao,
						cd_processo_aprov,
						ie_responsavel,
						vl_minimo,
						vl_maximo,
						qt_minimo_aprovador,
						nm_usuario_regra,
						qt_itens_regra,
						qt_intervalo_regra)
					values (	nr_seq_aprovacao_w,
						nr_sequencia_w,
						clock_timestamp(),
						nm_usuario_p,
						nm_usuario_p,
						cd_responsavel_w,
						null,
						dt_liberacao_w,
						null,
						'P',
						cd_estabelecimento_w,
						ie_urgente_w,
						nr_solic_compra_p,
						'S',
						dt_solicitacao_compra_w,
						nr_nivel_aprovacao_w,
						cd_processo_aprov_w,
						ie_responsavel_w,
						vl_minimo_w,
						vl_maximo_w,
						qt_minimo_aprovador_w,
						nm_usuario_regra_w,
						qt_itens_regra_w,
						qt_intervalo_regra_w);

					if (cd_responsavel_w IS NOT NULL AND cd_responsavel_w::text <> '') then
						dt_liberacao_w	:= null;
					end if;
					
				end if;
				end;
			end loop;
			close c02;
			end;
		end if;

		update	solic_compra_item
		set	nr_seq_aprovacao		= nr_seq_Aprovacao_w
		where	nr_solic_compra		= nr_solic_compra_p
		and	nr_item_solic_compra	= nr_item_solic_compra_w;

		end;
	end if;
	end;
end loop;
close c01;

open c03;
loop
fetch c03 into
	nr_seq_aprovacao_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
	CALL aprovacao_automatica_compra(nr_seq_aprovacao_w, nm_usuario_p);
end loop;
close c03;

select	count(*)
into STRICT	nr_items_sem_aprov_w
from	solic_compra_item
where	coalesce(dt_autorizacao::text, '') = ''
and	nr_solic_compra = nr_solic_compra_p;

if (nr_items_sem_aprov_w = 0) and (ie_fica_pend_aprov_sc_w = 'N') then /*Identifica se quando nao possui regras de aprovacao, e para deixar a solicitacao pendente de aprovacao*/
	select	count(*)
	into STRICT	qt_pend_aprov
	from	processo_aprov_compra
	where	ie_aprov_reprov	= 'P'
	and	ie_tipo = 'S'
	and	nr_documento = nr_solic_compra_p;

	if (qt_pend_aprov = 0) then
		update	solic_compra
		set	dt_autorizacao	= clock_timestamp()
		where	nr_solic_compra	= nr_solic_compra_p;
	end if;

	if (ie_gera_cot_oc_aprov_solic_w = 'S') then

		select	lic_obter_tipo_forma_compra(nr_seq_forma_compra)
		into STRICT	ie_forma_compra_w
		from	solic_compra
		where	nr_solic_compra = nr_solic_compra_p;

		select	count(*)
		into STRICT	qt_existe_contrato_w
		from	solic_compra_item
		where	nr_solic_compra = nr_solic_compra_p
		and	(nr_contrato IS NOT NULL AND nr_contrato::text <> '');

		if (qt_existe_contrato_w > 0) and (ie_forma_compra_w = 'C') then

			CALL gerar_cot_ordem_sc_contrato(	null,
							nr_solic_compra_p,
							nm_usuario_p);
		end if;
	end if;


	cd_evento_w := 16;
	open C04;
	loop
	fetch C04 into
		nr_seq_regra_w,
		cd_perfil_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin

		open C07;
		loop
		fetch C07 into
			cd_setor_regra_usuario_w;
		EXIT WHEN NOT FOUND; /* apply on C07 */
			begin
			if (cd_setor_regra_usuario_w <> 0) and (obter_se_contido_char(cd_setor_regra_usuario_w, ds_setor_adicional_w) = 'N') then
				ds_setor_adicional_w := substr(ds_setor_adicional_w || cd_setor_regra_usuario_w || ',',1,2000);
			end if;
			end;
		end loop;
		close C07;

		select	max(substr(obter_usuario_pessoa(cd_pessoa_solicitante),1,15))
		into STRICT	nm_usuario_destino_w
		from	solic_compra
		where 	nr_solic_compra	= nr_solic_compra_p;

		if (ie_comunic_aprovacao_w in ('E','M')) then
			open C05;
			loop
			fetch C05 into
				ds_itens_w,
				dt_entrega_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */			
				ds_itens_w 		:= substr(rpad(WHEB_MENSAGEM_PCK.get_texto(301397,'DT_ENTREGA_W=' || dt_entrega_w),30,' ') || ds_itens_w || chr(10),1,4000);
				ds_comunic_oc_ww 	:= substr(ds_comunic_oc_w || ds_itens_w, 1, 4000);
			end loop;
			close C05;
		end if;

		if (ie_comunic_aprovacao_w in ('S','E','M')) then

			select	substr(obter_dados_comunic_compra_sc(nr_solic_compra_p,cd_evento_w,nr_seq_regra_w,'T'),1,2000) ds_titulo,
				substr(obter_dados_comunic_compra_sc(nr_solic_compra_p,cd_evento_w,nr_seq_regra_w,'M'),1,4000) ds_comunic
			into STRICT	ds_titulo_w,
				ds_comunic_w
			;

			select	count(*)
			into STRICT	qt_regra_usuario_w
			from	regra_envio_comunic_compra a,
				regra_envio_comunic_evento b,
				regra_envio_comunic_usu c
			where	a.nr_sequencia = b.nr_seq_regra
			and	b.nr_sequencia = c.nr_seq_evento
			and	b.nr_sequencia = nr_seq_regra_w;

			select	coalesce(ie_ci_lida,'N')
			into STRICT	ie_ci_lida_w
			from 	regra_envio_comunic_evento
			where 	nr_sequencia = nr_seq_regra_w;

			if (qt_regra_usuario_w > 0) then
				nm_usuario_destino_w := obter_usu_comunic_compras_sc(nr_solic_compra_p,cd_evento_w,nr_seq_regra_w,'');
			end if;

			if (nm_usuario_destino_w IS NOT NULL AND nm_usuario_destino_w::text <> '') then

				select	nextval('comunic_interna_seq')
				into STRICT	nr_seq_comunic_w
				;

				select	obter_classif_comunic('F')
				into STRICT	nr_seq_classif_w
				;

				if (cd_perfil_w IS NOT NULL AND cd_perfil_w::text <> '') then
					cd_perfil_w := cd_perfil_w ||',';
				end if;

				insert	into comunic_interna(
					dt_comunicado,		ds_titulo,			ds_comunicado,
					nm_usuario,		dt_atualizacao,		ie_geral,
					nm_usuario_destino,	nr_sequencia,		ie_gerencial,
					nr_seq_classif,		dt_liberacao,		ds_perfil_adicional,
					ds_setor_adicional)
				values (	clock_timestamp(),			ds_titulo_w,		ds_comunic_w,
					nm_usuario_p,		clock_timestamp(),			'N',
					nm_usuario_destino_w,	nr_seq_comunic_w,		'N',
					nr_seq_classif_w,	clock_timestamp(),		cd_perfil_w,
					ds_setor_adicional_w);

				/*Para que a comunicacao seja gerada como lida ao proprio usuario */

				if (ie_ci_lida_w = 'S') then
					insert into comunic_interna_lida(nr_sequencia,nm_usuario,dt_atualizacao)values (nr_seq_comunic_w,nm_usuario_p,clock_timestamp());
				end if;

			end if;
		end if;
		end;
	end loop;
	close C04;

	open C06;
	loop
	fetch C06 into
		nr_seq_regra_w,
		ds_email_adicional_w,
		cd_perfil_disparar_w,
		ie_momento_envio_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin
		select  substr(obter_dados_regra_email_compra(33, cd_estabelecimento_w, nr_solic_compra_p, 'O', null, nm_usuario_p, null),1,255),
			substr(obter_dados_regra_email_compra(33, cd_estabelecimento_w, nr_solic_compra_p, 'U', null, nm_usuario_p, null),1,255),
			substr(obter_dados_regra_email_compra(33, cd_estabelecimento_w, nr_solic_compra_p, 'A', null, nm_usuario_p, null),1,255),
			substr(obter_dados_regra_email_compra(33, cd_estabelecimento_w, nr_solic_compra_p, 'M', null, nm_usuario_p, null),1,4000),
			substr(sup_obter_dados_comprador(cd_estabelecimento_w, obter_dados_parametro_compras(cd_estabelecimento_w, 16),'E'),1,255)
		into STRICT	ds_email_origem_w,
			nm_usuario_origem_w,
			ds_assunto_padrao_w,
			ds_mensagem_padrao_w,
			ds_email_destino_w
		;

		if (coalesce(cd_perfil_disparar_w::text, '') = '') or (cd_perfil_disparar_w IS NOT NULL AND cd_perfil_disparar_w::text <> '') and (cd_perfil_disparar_w = cd_perfil_ativo_w) then

			if (ds_email_adicional_w IS NOT NULL AND ds_email_adicional_w::text <> '') then
				ds_email_destino_w := substr(ds_email_destino_w || ';' || ds_email_adicional_w,1,2000);
			end if;
			
			if (ds_email_destino_w IS NOT NULL AND ds_email_destino_w::text <> '') then

				if (ie_momento_envio_w = 'A') then
					begin

					CALL sup_grava_envio_email(
						'SC',
						'33',
						nr_solic_compra_p,
						null,
						null,
						ds_email_destino_w,
						nm_usuario_origem_w,
						ds_email_origem_w,
						ds_assunto_padrao_w,
						ds_mensagem_padrao_w,
						cd_estabelecimento_w,
						nm_usuario_p);

					end;
				else
					begin
						CALL enviar_email(ds_assunto_padrao_w, ds_mensagem_padrao_w, ds_email_origem_w, ds_email_destino_w, nm_usuario_origem_w,'M');
					exception when others then
						CALL GERAR_HISTORICO_SOLIC_COMPRA(nr_solic_compra_p, WHEB_MENSAGEM_PCK.get_texto(1031247), SQLSTATE || ' - ' || SQLERRM, 'L', nm_usuario_p, 'S');
					end;
				end if;
			end if;

		end if;
		end;
	end loop;
	close C06;

end if;

if (nr_items_sem_aprov_w > 0) then
	begin

	select	coalesce(min(nr_seq_proc_aprov),0)
	into STRICT	nr_seq_proc_email_w
	from	processo_aprov_compra
	where	nr_sequencia = nr_seq_aprovacao_w
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	ie_aprov_reprov = 'P';

	CALL envia_email_proximo_aprov(nr_seq_aprovacao_w,nr_seq_proc_email_w,cd_estabelecimento_w,nm_usuario_p);

	end;
end if;

if (ie_commit_w = 'S') then
	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_aprov_solic_compra ( nr_solic_compra_p bigint, cd_perfil_ativo_p bigint, nm_usuario_p text, qt_dias_obter_compra_p bigint, ie_commit_p text) FROM PUBLIC;

