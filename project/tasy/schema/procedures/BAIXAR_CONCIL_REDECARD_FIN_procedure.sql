-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baixar_concil_redecard_fin ( nr_seq_extrato_arq_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_seq_extrato_w		bigint;
cd_estabelecimento_w		smallint;
nr_seq_conta_banco_w		bigint;
nr_seq_trans_financ_w		bigint;
nr_seq_trans_indevido_cred_w	bigint;
ie_forma_lanc_lote_cartao_w	varchar(255);
ie_gerar_movto_banco_w		varchar(1);
vl_conciliado_w			double precision;
nr_seq_parcela_w		bigint;
nr_seq_ext_parcela_w		bigint;
nr_seq_grupo_w			bigint;	
dt_prev_pagto_w			timestamp;
nr_seq_extrato_parcela_fin_w	bigint;
nr_seq_extrato_parcela_cred_w	bigint;	
vl_transacao_w			double precision;
nr_seq_conta_banco_res_w	bigint;
vl_despesa_w			double precision;
qt_movto_fin_concil_w		bigint;
nr_parcela_w			bigint;
nr_seq_movto_trans_w		bigint;
nr_seq_trans_indevido_w		bigint;
nr_seq_tf_indevido_w		bigint;
vl_ajuste_w			double precision;
ie_tipo_arquivo_w		varchar(5);
nr_seq_movto_fin_w		bigint;
nr_seq_parcela_ajuste_w		bigint;
vl_total_parcela_w		double precision;
vl_total_original_w		double precision;
vl_original_w			double precision;
vl_liquido_w			double precision;
vl_ajuste_sobra_w		double precision;
nr_seq_movto_w			bigint;
qt_ajuste_w			bigint;
nr_seq_baixa_w			movto_cartao_cr_baixa.nr_sequencia%type;

C04 CURSOR FOR  -- financeiro 
SELECT	distinct 
	b.nr_seq_extrato_parcela, 
	c.dt_prev_pagto, 
	a.nr_parcela, 
	a.nr_sequencia, 
	a.vl_ajuste 
from	extrato_cartao_cr_res c, 
	extrato_cartao_cr_movto a, 
	ext_cartao_cr_movto_concil b 
where	a.nr_seq_extrato_res	= c.nr_sequencia 
and	a.nr_seq_extrato_arq 	= nr_seq_extrato_arq_p 
and	b.nr_seq_ext_movto	= a.nr_sequencia;

C05 CURSOR FOR  -- credito 
SELECT	a.nr_seq_extrato_parcela, 
	b.vl_conciliado 
from	extrato_cartao_cr_arq c, 
	extrato_cartao_cr_movto a, 
	ext_cartao_cr_movto_concil b 
where	b.nr_seq_ext_movto		= a.nr_sequencia 
and	b.nr_seq_extrato_parcela	= nr_seq_extrato_parcela_fin_w 
and	a.nr_seq_extrato_arq 		= c.nr_sequencia 
and	c.ie_tipo_arquivo 		= 'C';

C06 CURSOR FOR  -- movtos tasy 
SELECT	a.nr_sequencia 
from	movto_cartao_cr_parcela a 
where	a.nr_seq_extrato_parcela		= nr_seq_extrato_parcela_cred_w 
and ((obter_numero_parcela_cartao(a.nr_seq_movto,a.nr_sequencia))::numeric  = nr_parcela_w or coalesce(nr_parcela_w,0) = 0);

c02 CURSOR FOR  -- movto indevidos 
SELECT	coalesce(a.vl_liquido,a.vl_parcela), 
	b.dt_prev_pagto, 
	b.nr_seq_conta_banco 
from	extrato_cartao_cr_res b, 
	extrato_cartao_cr_movto a 
where	a.nr_seq_extrato_res	= b.nr_sequencia 
and	a.nr_seq_extrato_arq	= nr_seq_extrato_arq_p 
and	a.ie_pagto_indevido	= 'S';
	
C03 CURSOR FOR  -- movto despesas 
SELECT	a.vl_liquido, 
	a.dt_prev_pagto 
from	extrato_cartao_cr_desp a 
where	a.nr_seq_extrato_arq	= nr_seq_extrato_arq_p;

/* movtos conciliados diretamente com as parcelas do Tasy */
 
c07 CURSOR FOR 
SELECT	a.nr_sequencia, 
	d.dt_prev_pagto, 
	b.vl_ajuste, 
	b.nr_sequencia 
from	movto_cartao_cr e, 
	extrato_cartao_cr_res d, 
	extrato_cartao_cr_parcela c, 
	extrato_cartao_cr_movto b, 
	movto_cartao_cr_parcela a 
where	a.nr_seq_extrato_parcela	= c.nr_sequencia 
and	b.nr_seq_extrato_parcela	= c.nr_sequencia 
and	b.nr_seq_extrato_res		= d.nr_sequencia 
and	a.nr_seq_movto			= e.nr_sequencia 
and	coalesce(e.dt_cancelamento::text, '') = '' 
and	c.nr_seq_extrato_arq		= nr_seq_extrato_arq_p 
and (coalesce(b.nr_parcela,0) = 0 or (obter_numero_parcela_cartao(a.nr_seq_movto,a.nr_sequencia))::numeric  = b.nr_parcela);

c08 CURSOR FOR 
SELECT	a.nr_sequencia, 
	a.nr_seq_extrato_parcela, 
	trunc(coalesce(b.dt_prev_pagto,clock_timestamp()),'dd') 
from	extrato_cartao_cr_res b, 
	extrato_cartao_cr_movto a 
where	a.nr_seq_extrato_res		= b.nr_sequencia 
and	coalesce(a.ie_pagto_indevido,'N')	<> 'S' 
and	a.nr_seq_extrato_arq		= nr_seq_extrato_arq_p;

/* parcelas conciliados diretamente com o arquivo financeiro */
 
c09 CURSOR FOR 
SELECT	b.nr_sequencia 
from	movto_cartao_cr_baixa b, 
	movto_cartao_cr_parcela a 
where	trunc(b.dt_baixa,'dd')		= dt_prev_pagto_w 
and	a.nr_sequencia			= b.nr_seq_parcela 
and	a.nr_seq_extrato_parcela	= nr_seq_extrato_parcela_fin_w;

/* parcelas conciliadas com o arquivo de crédito */
 
c10 CURSOR FOR 
SELECT	distinct 
	b.nr_seq_extrato_parcela 
from	ext_cartao_cr_movto_concil b, 
	extrato_cartao_cr_movto a 
where	a.nr_sequencia		= b.nr_seq_ext_movto 
and	a.nr_sequencia		= nr_seq_movto_fin_w;

c11 CURSOR FOR 
SELECT	distinct 
	f.nr_sequencia 
from	movto_cartao_cr_baixa f, 
	movto_cartao_cr_parcela e, 
	extrato_cartao_cr_arq d, 
	extrato_cartao_cr_res c, 
	extrato_cartao_cr_movto b, 
	ext_cartao_cr_movto_concil a 
where	trunc(f.dt_baixa,'dd')		= dt_prev_pagto_w 
and	e.nr_sequencia			= f.nr_seq_parcela 
and	b.nr_seq_extrato_parcela	= e.nr_seq_extrato_parcela 
and	d.ie_tipo_arquivo		= 'C' 
and	c.nr_seq_extrato_arq		= d.nr_sequencia 
and	b.nr_seq_extrato_res		= c.nr_sequencia 
and	a.nr_seq_ext_movto		= b.nr_sequencia 
and	a.nr_seq_extrato_parcela	= nr_seq_extrato_parcela_cred_w;


BEGIN 
 
select	count(*) 
into STRICT	qt_movto_fin_concil_w 
from	ext_cartao_cr_movto_concil c, 
	extrato_cartao_cr_movto b, 
	extrato_cartao_cr_res a 
where	a.nr_seq_extrato_arq	= nr_seq_extrato_arq_p 
and	a.nr_sequencia		= b.nr_seq_extrato_res 
and	b.nr_sequencia		= c.nr_seq_ext_movto;
 
/* se o arquivo financeiro foi conciliado direto com os movtos do Tasy, realiza a baixa igual ao crédito e débito */
 
if (coalesce(qt_movto_fin_concil_w,0) = 0) then 
 
	CALL baixar_concil_cartao_redecard(nr_seq_extrato_arq_p,nm_usuario_p,null);
 
else 
 
	select	max(b.nr_sequencia), 
		max(c.nr_sequencia), 
		max(b.cd_estabelecimento), 
		max(c.nr_seq_conta_banco), 
		max(c.nr_seq_trans_indevido_cred), 
		max(c.nr_seq_trans_desp_equip), 
		max(c.nr_seq_trans_indevido), 
		max(a.ie_tipo_arquivo) 
	into STRICT	nr_seq_extrato_w, 
		nr_seq_grupo_w, 
		cd_estabelecimento_w, 
		nr_seq_conta_banco_w, 
		nr_seq_trans_indevido_cred_w, 
		nr_seq_trans_financ_w, 
		nr_seq_trans_indevido_w, 
		ie_tipo_arquivo_w 
	from	grupo_bandeira_cr c, 
		extrato_cartao_cr b, 
		extrato_cartao_cr_arq a 
	where	a.nr_sequencia		= nr_seq_extrato_arq_p 
	and	a.nr_seq_extrato	= b.nr_sequencia 
	and	b.nr_seq_grupo		= c.nr_sequencia;
 
	if (nr_seq_grupo_w IS NOT NULL AND nr_seq_grupo_w::text <> '') then 
 
		open C02;
		loop 
		fetch	C02 into 
			vl_transacao_w, 
			dt_prev_pagto_w, 
			nr_seq_conta_banco_res_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
 
			if (ie_tipo_arquivo_w	= 'C') or (ie_tipo_arquivo_w	= 'F') then 
				nr_seq_tf_indevido_w	:= nr_seq_trans_indevido_cred_w;
			else 
				nr_seq_tf_indevido_w	:= nr_seq_trans_indevido_w;
			end if;
 
			if (coalesce(nr_seq_tf_indevido_w::text, '') = '') then 
				--'Falta informar a transação de pagamento indevido no cadastro do grupo de bandeiras.'); 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(186815);
			end if;
 
			select	nextval('movto_trans_financ_seq') 
			into STRICT	nr_seq_movto_trans_w 
			;
 
			insert	into movto_trans_financ(nr_sequencia, 
				dt_transacao, 
				nr_seq_trans_financ, 
				vl_transacao, 
				dt_atualizacao, 
				nm_usuario, 
				nr_lote_contabil, 
				ie_conciliacao, 
				nr_seq_banco, 
				dt_referencia_saldo) 
			values (nr_seq_movto_trans_w, 
				coalesce(dt_prev_pagto_w,clock_timestamp()), 
				nr_seq_tf_indevido_w, 
				abs(vl_transacao_w), 
				clock_timestamp(), 
				nm_usuario_p, 
				0, 
				'N', 
				coalesce(nr_seq_conta_banco_w,nr_seq_conta_banco_res_w), 
				clock_timestamp());
 
			CALL atualizar_transacao_financeira(cd_estabelecimento_w,nr_seq_movto_trans_w,nm_usuario_p,'I');
 
		end loop;
		close C02;
 
	end if;
 
	select	coalesce(max(ie_forma_lanc_lote_cartao),'P') 
	into STRICT	ie_forma_lanc_lote_cartao_w 
	from	parametro_contas_receber 
	where	cd_estabelecimento	= cd_estabelecimento_w;
 
	if (ie_forma_lanc_lote_cartao_w = 'P') then 
		ie_gerar_movto_banco_w	:= 'S';
	else 
		ie_gerar_movto_banco_w	:= 'N';
	end if;
 
	open C04;
	loop 
	fetch	C04 into	 
		nr_seq_extrato_parcela_fin_w, 
		dt_prev_pagto_w, 
		nr_parcela_w, 
		nr_seq_movto_fin_w, 
		vl_ajuste_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
 
		nr_seq_parcela_ajuste_w	:= null;
		nr_seq_parcela_w	:= null;
		vl_total_parcela_w	:= 0;
		vl_total_original_w	:= 0;
		vl_liquido_w		:= 0;
		vl_original_w		:= 0;
 
		open C05;
		loop 
		fetch C05 into	 
			nr_seq_extrato_parcela_cred_w, 
			vl_conciliado_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
 
			open C06;
			loop 
			fetch C06 into	 
				nr_seq_parcela_w;
			EXIT WHEN NOT FOUND; /* apply on C06 */
 
				CALL ajustar_parcela_cartao_cr(nr_seq_parcela_w,nr_seq_grupo_w,vl_ajuste_w,nm_usuario_p,nr_seq_movto_fin_w);
 
				select	max(a.vl_original), 
					coalesce(vl_total_parcela_w,0) + coalesce(max(a.vl_liquido),0), 
					coalesce(vl_total_original_w,0) + coalesce(max(CASE WHEN coalesce(a.vl_original,0)=0 THEN a.vl_liquido  ELSE a.vl_original END ),0) 
				into STRICT	vl_original_w, 
					vl_total_parcela_w, 
					vl_total_original_w 
				from	movto_cartao_cr_parcela a 
				where	a.nr_sequencia	= nr_seq_parcela_w;
 
				if (coalesce(vl_original_w,0)	<> 0) then 
					nr_seq_parcela_ajuste_w	:= nr_seq_parcela_w;
				end if;
 
				CALL Baixar_parcela_cartao_cr(nr_seq_parcela_w,coalesce(dt_prev_pagto_w,clock_timestamp()),nm_usuario_p,'S','S',null,'N','N',0,0,null);
 
			end loop;
			close C06;
 
		end loop;
		close C05;
 
		if (nr_seq_parcela_ajuste_w IS NOT NULL AND nr_seq_parcela_ajuste_w::text <> '') or (nr_seq_parcela_w IS NOT NULL AND nr_seq_parcela_w::text <> '') then 
 
			if (coalesce(nr_seq_parcela_ajuste_w::text, '') = '') then 
 
				update	movto_cartao_cr_parcela 
				set	vl_original		= coalesce(vl_liquido,0), 
					vl_liquido		= coalesce(vl_liquido,0) + coalesce(vl_ajuste_w,0), 
					vl_saldo_liquido	= vl_saldo_liquido + coalesce(vl_ajuste_w,0), 
					vl_despesa		= coalesce(vl_despesa,0) - coalesce(vl_ajuste_w,0) 
				where	nr_sequencia		= nr_seq_parcela_w;
 
			else 
 
				vl_ajuste_sobra_w	:= coalesce(vl_ajuste_w,0) - (coalesce(vl_total_parcela_w,0) - coalesce(vl_total_original_w,0));
 
				update	movto_cartao_cr_parcela 
				set	vl_liquido		= coalesce(vl_liquido,0) + coalesce(vl_ajuste_sobra_w,0), 
					vl_saldo_liquido	= vl_saldo_liquido + coalesce(vl_ajuste_sobra_w,0), 
					vl_despesa		= coalesce(vl_despesa,0) - coalesce(vl_ajuste_sobra_w,0) 
				where	nr_sequencia		= nr_seq_parcela_ajuste_w;
 
			end if;
 
			select	max(a.nr_seq_movto), 
				max(a.vl_liquido), 
				max(a.vl_despesa) 
			into STRICT	nr_seq_movto_w, 
				vl_liquido_w, 
				vl_despesa_w 
			from	movto_cartao_cr_parcela a 
			where	a.nr_sequencia	= coalesce(nr_seq_parcela_ajuste_w,nr_seq_parcela_w);
 
			update	movto_cartao_cr_baixa a 
			set	a.vl_baixa		= vl_liquido_w, 
				a.vl_despesa		= vl_despesa_w 
			where	a.nr_sequencia		= 
				(SELECT	max(x.nr_sequencia) 
				from	movto_cartao_cr_baixa x 
				where	x.nr_seq_parcela	= coalesce(nr_seq_parcela_ajuste_w,nr_seq_parcela_w)) 
			and	a.nr_seq_parcela		= coalesce(nr_seq_parcela_ajuste_w,nr_seq_parcela_w);
 
			CALL atualizar_saldo_cartao_cr(nr_seq_movto_w, nm_usuario_p);
 
		end if;
 
	end loop;
	close C04;
 
	nr_seq_parcela_ajuste_w	:= null;
	nr_seq_parcela_w	:= null;
	vl_total_parcela_w	:= 0;
	vl_total_original_w	:= 0;
	vl_liquido_w		:= 0;
	vl_original_w		:= 0;
 
	open	c07;
	loop 
	fetch	c07 into 
		nr_seq_parcela_w, 
		dt_prev_pagto_w, 
		vl_ajuste_w, 
		nr_seq_movto_fin_w;
	EXIT WHEN NOT FOUND; /* apply on c07 */
 
		/* só aplica o ajuste se ele não tiver sido aplicado pelas baixas do arquivo de crédito */
 
		select	count(*) 
		into STRICT	qt_ajuste_w 
		from	movto_cartao_cr_baixa f, 
			movto_cartao_cr_parcela e, 
			extrato_cartao_cr_arq d, 
			extrato_cartao_cr_res c, 
			extrato_cartao_cr_movto b, 
			ext_cartao_cr_movto_concil a, 
			ext_cartao_cr_movto_concil x 
		where	trunc(f.dt_baixa,'dd')		= trunc(coalesce(dt_prev_pagto_w,clock_timestamp()),'dd') 
		and	e.nr_sequencia			= f.nr_seq_parcela 
		and	b.nr_seq_extrato_parcela	= e.nr_seq_extrato_parcela 
		and	d.ie_tipo_arquivo		= 'C' 
		and	c.nr_seq_extrato_arq		= d.nr_sequencia 
		and	b.nr_seq_extrato_res		= c.nr_sequencia 
		and	a.nr_seq_ext_movto		= b.nr_sequencia 
		and	a.nr_seq_extrato_parcela	= x.nr_seq_extrato_parcela 
		and	x.nr_seq_ext_movto		= nr_seq_movto_fin_w;
 
		if (qt_ajuste_w	= 0) then 
 
			CALL ajustar_parcela_cartao_cr(nr_seq_parcela_w,nr_seq_grupo_w,vl_ajuste_w,nm_usuario_p,nr_seq_movto_fin_w);
 
		else 
 
			vl_ajuste_w	:= 0;
 
		end if;
 
		select	max(a.vl_original), 
			coalesce(vl_total_parcela_w,0) + coalesce(max(a.vl_liquido),0), 
			coalesce(vl_total_original_w,0) + coalesce(max(CASE WHEN coalesce(a.vl_original,0)=0 THEN a.vl_liquido  ELSE a.vl_original END ),0) 
		into STRICT	vl_original_w, 
			vl_total_parcela_w, 
			vl_total_original_w 
		from	movto_cartao_cr_parcela a 
		where	a.nr_sequencia	= nr_seq_parcela_w;
 
		if (coalesce(vl_original_w,0)	<> 0) then 
			nr_seq_parcela_ajuste_w	:= nr_seq_parcela_w;
		end if;
 
		CALL Baixar_parcela_cartao_cr(nr_seq_parcela_w,coalesce(dt_prev_pagto_w,clock_timestamp()),nm_usuario_p,'S','S',null,'N','N',0,0,null);
 
	end	loop;
	close	c07;
 
	if (nr_seq_parcela_ajuste_w IS NOT NULL AND nr_seq_parcela_ajuste_w::text <> '') or (nr_seq_parcela_w IS NOT NULL AND nr_seq_parcela_w::text <> '') then 
 
		if (coalesce(nr_seq_parcela_ajuste_w::text, '') = '') then 
 
			update	movto_cartao_cr_parcela 
			set	vl_original		= coalesce(vl_liquido,0), 
				vl_liquido		= coalesce(vl_liquido,0) + coalesce(vl_ajuste_w,0), 
				vl_saldo_liquido	= vl_saldo_liquido + coalesce(vl_ajuste_w,0), 
				vl_despesa		= coalesce(vl_despesa,0) - coalesce(vl_ajuste_w,0) 
			where	nr_sequencia		= nr_seq_parcela_w;
 
		else 
 
			vl_ajuste_sobra_w	:= coalesce(vl_ajuste_w,0) - (coalesce(vl_total_parcela_w,0) - coalesce(vl_total_original_w,0));
 
			update	movto_cartao_cr_parcela 
			set	vl_liquido		= coalesce(vl_liquido,0) + coalesce(vl_ajuste_sobra_w,0), 
				vl_saldo_liquido	= vl_saldo_liquido + coalesce(vl_ajuste_sobra_w,0), 
				vl_despesa		= coalesce(vl_despesa,0) - coalesce(vl_ajuste_sobra_w,0) 
			where	nr_sequencia		= nr_seq_parcela_ajuste_w;
 
		end if;
 
		select	max(a.nr_seq_movto), 
			max(a.vl_liquido), 
			max(a.vl_despesa) 
		into STRICT	nr_seq_movto_w, 
			vl_liquido_w, 
			vl_despesa_w 
		from	movto_cartao_cr_parcela a 
		where	a.nr_sequencia	= coalesce(nr_seq_parcela_ajuste_w,nr_seq_parcela_w);
 
		update	movto_cartao_cr_baixa a 
		set	a.vl_baixa		= vl_liquido_w, 
			a.vl_despesa		= vl_despesa_w 
		where	a.nr_sequencia		= 
			(SELECT	max(x.nr_sequencia) 
			from	movto_cartao_cr_baixa x 
			where	x.nr_seq_parcela	= coalesce(nr_seq_parcela_ajuste_w,nr_seq_parcela_w)) 
		and	a.nr_seq_parcela		= coalesce(nr_seq_parcela_ajuste_w,nr_seq_parcela_w);
 
		CALL atualizar_saldo_cartao_cr(nr_seq_movto_w, nm_usuario_p);
 
	end if;
 
	/* gerar a movimentação no Controle Bancário 
	é necessário gerar depois por causa dos ajustes das sobras */
 
	if (coalesce(ie_gerar_movto_banco_w,'N') = 'S') then 
 
		open	c08;
		loop 
		fetch	c08 into 
			nr_seq_movto_fin_w, 
			nr_seq_extrato_parcela_fin_w, 
			dt_prev_pagto_w;
		EXIT WHEN NOT FOUND; /* apply on c08 */
 
			open	c09;
			loop 
			fetch	c09 into 
				nr_seq_baixa_w;
			EXIT WHEN NOT FOUND; /* apply on c09 */
 
				CALL gerar_movto_baixa_cartao(nr_seq_baixa_w,nm_usuario_p,0);
 
			end	loop;
			close	c09;
 
			open	c10;
			loop 
			fetch	c10 into 
				nr_seq_extrato_parcela_cred_w;
			EXIT WHEN NOT FOUND; /* apply on c10 */
 
				open	c11;
				loop 
				fetch	c11 into 
					nr_seq_baixa_w;
				EXIT WHEN NOT FOUND; /* apply on c11 */
 
					CALL gerar_movto_baixa_cartao(nr_seq_baixa_w,nm_usuario_p,0);
 
				end	loop;
				close	c11;
 
			end	loop;
			close	c10;
 
		end	loop;
		close	c08;
 
	end if;
 
	if (nr_seq_grupo_w IS NOT NULL AND nr_seq_grupo_w::text <> '') and (nr_seq_trans_financ_w IS NOT NULL AND nr_seq_trans_financ_w::text <> '') and (nr_seq_conta_banco_w IS NOT NULL AND nr_seq_conta_banco_w::text <> '') then 
		open c03;
		loop 
		fetch c03 into 
			vl_despesa_w, 
			dt_prev_pagto_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			CALL gerar_movto_despesa_equip(vl_despesa_w,nr_seq_trans_financ_w,nr_seq_conta_banco_w,coalesce(dt_prev_pagto_w,clock_timestamp()),nm_usuario_p,'N');
		end loop;
		close c03;
	end if;
 
	update	extrato_cartao_cr_arq 
	set	dt_baixa	= clock_timestamp() 
	where	nr_sequencia	= nr_seq_extrato_arq_p;
 
	commit;
 
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baixar_concil_redecard_fin ( nr_seq_extrato_arq_p bigint, nm_usuario_p text) FROM PUBLIC;

