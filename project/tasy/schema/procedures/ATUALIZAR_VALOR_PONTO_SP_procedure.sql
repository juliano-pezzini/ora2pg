-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_valor_ponto_sp ( NR_ATENDIMENTO_P bigint, NR_INTERNO_CONTA_P bigint) AS $body$
DECLARE


vl_partic_w				double precision	:= 0;
vl_original_partic_w			double precision	:= 0;
qt_ponto_partic_w			bigint	:= 0;
vl_medico_w				double precision	:= 0;
qt_ponto_medico_w			bigint	:= 0;
qt_ponto_anest_w			bigint	:= 0;
vl_sp_w					double precision	:= 0;
qt_ato_sp_w				bigint	:= 0;
vl_ponto_sp_w				double precision	:= 0;
nr_sequencia_w				bigint	:= 0;
nr_seq_partic_w				bigint	:= 0;
qt_anestesista_w			bigint	:= 0;
ie_tipo_servico_sus_w			smallint	:= 0;
ie_tipo_ato_sus_w			smallint	:= 0;
qt_ato_medico_w				smallint	:= 0;
qt_ato_anestesista_w			smallint	:= 0;
vl_tot_Medico_w				double precision	:= 0;
vl_tot_Anest_w				double precision	:= 0;
vl_Proc_Medico_w			double precision	:= 0;
vl_Proc_Anest_w				double precision	:= 0;
vl_Dif_w				double precision	:= 0;
qt_tot_proc_w				bigint	:= 0;
qt_tot_proca_w				bigint	:= 0;
qt_proc_w				bigint	:= 0;
qt_ponto_sus_w				double precision	:= 0;
vl_partic_conta_w			double precision;
vl_medico_conta_w			double precision;
cd_proc_w				bigint;
vl_anest_especial_w			double precision;
vl_proc_total_w				double precision;

C02 CURSOR FOR
	SELECT 		a.nr_sequencia,
			a.nr_seq_partic,
			a.qt_ponto_sus,
			a.ie_tipo_servico_sus
	from		procedimento_participante a,
			procedimento_paciente b
	where		b.nr_interno_conta		= nr_interno_conta_p
	and		b.nr_sequencia			= a.nr_sequencia
	and		b.ie_origem_proced		= 2
	and		coalesce(a.ie_tipo_servico_sus,0)	in (4,7,45)
	and		Sus_Obter_Se_Calc_Pto_Proc(b.cd_procedimento) = 'S'
	and		coalesce(a.ie_tipo_ato_sus,0) 	<> 6
	and		coalesce(b.cd_motivo_exc_conta::text, '') = '';

C03 CURSOR FOR
	SELECT 		b.nr_sequencia,
			b.ie_tipo_servico_sus,
			b.ie_tipo_ato_sus,
			a.qt_ato_medico,
			a.qt_ato_anestesista,
			b.cd_procedimento
	from		procedimento_paciente b,
			sus_valor_proc_paciente a
	where		b.nr_interno_conta	= nr_interno_conta_p
	and		b.nr_sequencia		= a.nr_sequencia
	and		b.ie_origem_proced		= 2
	and		Sus_Obter_Se_Calc_Pto_Proc(b.cd_procedimento) = 'S'
	and		coalesce(b.ie_tipo_servico_sus,0)	in (4,7,45)
	and		coalesce(b.ie_tipo_ato_sus,0) <> 6
	and		coalesce(b.cd_motivo_exc_conta::text, '') = ''
	
union all

	SELECT 		b.nr_sequencia,
			b.ie_tipo_servico_sus,
			b.ie_tipo_ato_sus,
			a.qt_ato_medico,
			a.qt_ato_anestesista,
			b.cd_procedimento
	from		procedimento_paciente b,
			sus_valor_proc_paciente a
	where		b.nr_interno_conta	= nr_interno_conta_p
	and		b.nr_sequencia		= a.nr_sequencia
	and		b.ie_origem_proced		= 2
	and		coalesce(b.ie_tipo_servico_sus,0)	in (4,7,45)
	and		coalesce(b.ie_tipo_ato_sus,0) = 6
	and		b.cd_procedimento 	= 45000050
	and		coalesce(b.cd_motivo_exc_conta::text, '') = '';



BEGIN


/*	Neste momento o valor do anestesista já foi retirado do valor do médico pelo cálculo do porte ( 30%) */

/*	Obter o valor do médico de todos procedimentos da tabela SUS original*/

select		coalesce(sum(a.vl_medico),0)
into STRICT		vl_medico_w
from		sus_valor_proc_paciente a,
		procedimento_paciente b
where		b.nr_interno_conta	= nr_interno_conta_p
and		b.nr_sequencia		= a.nr_sequencia
and		b.ie_origem_proced	= 2
and		Sus_Obter_Se_Calc_Pto_Proc(b.cd_procedimento) = 'S'
and		coalesce(b.ie_tipo_servico_sus,7)	in (4,7,45)
and		coalesce(b.ie_tipo_ato_sus,0) <> 6
and		coalesce(b.cd_motivo_exc_conta::text, '') = '';

/*	Obter os pontos de médicos de todos procedimentos da tabela SUS original*/

select		sum(coalesce(a.qt_ato_anestesista,0) + coalesce(a.qt_ato_medico,0)),
		count(*)
into STRICT		qt_ponto_medico_w,
		qt_tot_proc_w
from		sus_valor_proc_paciente a,
		procedimento_paciente b
where		b.nr_interno_conta	= nr_interno_conta_p
and		b.nr_sequencia		= a.nr_sequencia
and		b.ie_origem_proced	= 2
and		(b.ie_tipo_ato_sus IS NOT NULL AND b.ie_tipo_ato_sus::text <> '')
and		Sus_Obter_Se_Calc_Pto_Proc(b.cd_procedimento) = 'S'
and		coalesce(b.ie_tipo_servico_sus,0)	in (4,7,45)
and		coalesce(b.ie_tipo_ato_sus,0) <> 6
and		coalesce(b.cd_motivo_exc_conta::text, '') = '';


/*	Obter os pontos de anestesia de todos procedimentos da tabela SUS original */

select		coalesce(sum(a.qt_ato_anestesista + a.qt_ato_medico),0),
		count(*)
into STRICT		qt_ponto_anest_w,
		qt_tot_proca_w
from		sus_valor_proc_paciente a,
		procedimento_paciente b
where		b.nr_interno_conta	= nr_interno_conta_p
and		b.nr_sequencia		= a.nr_sequencia
and		b.ie_origem_proced	= 2
and		(b.ie_tipo_ato_sus IS NOT NULL AND b.ie_tipo_ato_sus::text <> '')
and		coalesce(b.ie_tipo_servico_sus,0)	in (4,7,45)
and		coalesce(b.ie_tipo_ato_sus,0) = 6
and		Sus_Obter_Se_Calc_Pto_Proc(b.cd_procedimento) = 'S'
and		b.cd_procedimento	 = 45000050
and		coalesce(b.cd_motivo_exc_conta::text, '') = '';

/*	Obter os pontos de participantes de todos procedimentos já calculados na DEFINE_VALOR_PARTICIPANTE */

select		coalesce(sum(a.qt_ponto_sus),0)
into STRICT		qt_ponto_partic_w
from		procedimento_participante a,
		procedimento_paciente b
where		b.nr_interno_conta	= nr_interno_conta_p
and		b.nr_sequencia		= a.nr_sequencia
and		b.ie_origem_proced	= 2
and		(b.ie_tipo_ato_sus IS NOT NULL AND b.ie_tipo_ato_sus::text <> '')
and		coalesce(a.ie_tipo_servico_sus,0)	in (4,7,45)
and		Sus_Obter_Se_Calc_Pto_Proc(b.cd_procedimento) = 'S'
and		coalesce(a.ie_tipo_ato_sus,0) <> 6
and		coalesce(b.cd_motivo_exc_conta::text, '') = '';

/*	calcular o valor do ponto SP */

qt_tot_proc_w		:= qt_tot_proc_w + qt_tot_proca_w;
vl_sp_w			:= (vl_medico_w);
qt_ato_sp_w		:= (qt_ponto_medico_w + qt_ponto_partic_w + qt_ponto_anest_w);

if	qt_ato_sp_w = 0 then
	vl_ponto_sp_w 	:= 0;
else
	vl_ponto_sp_w	:= trunc((vl_sp_w / qt_ato_sp_w),5);
end if;

/*	Atualizar o ponto SP  na AIH */

update	sus_aih
set	vl_ponto_sp 		= vl_ponto_sp_w,
	qt_ponto_sp		= qt_ato_sp_w,
	vl_tot_sp		= vl_sp_w
where	nr_atendimento		= nr_atendimento_p
and	nr_interno_conta	= nr_interno_conta_p;


/*	Zerar os valores de médico dos procedimentos que participaram do cálculo do ponto */

update	procedimento_paciente a
set	a.vl_medico = 0,
	a.vl_anestesista = 0
where	a.nr_sequencia in (SELECT x.nr_sequencia
	from procedimento_paciente x
	where x.nr_interno_conta 	= nr_interno_conta_p
	and	coalesce(x.ie_tipo_servico_sus,7)	in (4,7,45)
	and	coalesce(x.ie_tipo_ato_sus,0) <> 6)
and	a.ie_origem_proced		= 2
and	Sus_Obter_Se_Calc_Pto_Proc(a.cd_procedimento) = 'S';

/*	Atualizar o valor do ato médico com o valor do médico se o mesmo não participou do cálculo do ponto??????????????????????????????????????*/

update 	sus_valor_proc_paciente
set 	vl_ato_medico 	= vl_medico
	where	nr_sequencia	in (
		SELECT	nr_sequencia
		from	procedimento_paciente
		where	nr_interno_conta	= nr_interno_conta_p
		and	ie_origem_proced	= 2
		and	Sus_Obter_Se_Calc_Pto_Proc(cd_procedimento) = 'N');


vl_tot_Medico_w	:= 0;
vl_tot_Anest_w	:= 0;
qt_proc_w	:= 0;

/*	Atualizar o valor de cada médico participante (Não anestesista) */

OPEN C02;
LOOP
FETCH C02 into
		nr_sequencia_w,
		nr_seq_partic_w,
		qt_ponto_sus_w,
		ie_tipo_servico_sus_w;
EXIT WHEN NOT FOUND; /* apply on c02 */
	vl_Proc_Medico_w	:= (vl_ponto_sp_w * qt_ponto_sus_w);
	vl_tot_Medico_w		:= vl_tot_Medico_w + vl_Proc_medico_w;
	update	procedimento_participante
	set	vl_participante 	= vl_proc_medico_w,
		vl_conta		= vl_proc_medico_w,
		vl_ponto_sus		= vl_ponto_sp_w
	where	nr_sequencia 		= nr_sequencia_w
	and	nr_seq_partic 		= nr_seq_partic_w;
END LOOP;
CLOSE C02;

/*	Atualizar o valor de cada médico principal do procedimento */

OPEN C03;
LOOP
FETCH C03 into
		nr_sequencia_w,
		ie_tipo_servico_sus_w,
		ie_tipo_ato_sus_w,
		qt_ato_medico_w,
		qt_ato_anestesista_w,
		cd_proc_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
	BEGIN
	qt_proc_w		:= qt_proc_w + 1;
	vl_Proc_Medico_w	:= (vl_ponto_sp_w * qt_ato_medico_w);
	vl_Proc_Anest_w		:= (vl_ponto_sp_w * qt_ato_anestesista_w);
	vl_tot_Medico_w		:= vl_tot_Medico_w + vl_Proc_medico_w;
	vl_tot_Anest_w		:= vl_tot_Anest_w  + vl_Proc_Anest_w;
	vl_dif_w		:= vl_sp_w - (vl_tot_medico_w + vl_Tot_Anest_w);
	if (qt_proc_w = qt_tot_proc_w) and (vl_dif_w <> 0) then
		if (vl_proc_medico_w <> 0) then
			vl_proc_medico_w	:= vl_proc_medico_w + vl_dif_w;
		else
			vl_proc_Anest_w	:= vl_proc_Anest_w + vl_dif_w;
		end if;
	end if;
	if (vl_proc_medico_w < 0) then
		vl_proc_medico_w	:= 0;
	end if;
	if (vl_proc_anest_w < 0) then
		vl_proc_anest_w		:= 0;
	end if;
	update 	sus_valor_proc_paciente
	set 	vl_ponto_sp 	= vl_ponto_sp_w,
		vl_ato_medico 	= vl_proc_medico_w
	where	nr_sequencia	= nr_sequencia_w;
	update	procedimento_paciente a
	set	a.vl_medico 	= (vl_proc_medico_w + vl_proc_anest_w),
		a.vl_anestesista= 0,
		a.vl_auxiliares	= 0
	where	a.nr_sequencia 	= nr_sequencia_w;
	if (cd_proc_w	= 45000050) then
		vl_proc_anest_w		:= 0;
	end if;
	if (ie_tipo_servico_sus_w in (4,7,45)) then
		vl_medico_conta_w	:= (vl_proc_medico_w + vl_proc_anest_w);
	else
		vl_medico_conta_w	:= 0;
	end if;
	select	coalesce(sum(coalesce(vl_conta,0)),0)
	into STRICT	vl_partic_conta_w
	from 	procedimento_participante
	where	nr_sequencia	= nr_sequencia_w;
	if	((vl_partic_conta_w + vl_medico_conta_w) > 0) then
		update procedimento_paciente
		set vl_procedimento	= (vl_materiais + vl_custo_operacional +
							vl_medico + vl_partic_conta_w)
		where nr_sequencia	= nr_sequencia_w;
	end if;
	END;
END LOOP;
CLOSE C03;


END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_valor_ponto_sp ( NR_ATENDIMENTO_P bigint, NR_INTERNO_CONTA_P bigint) FROM PUBLIC;

