-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_f600_efd ( nr_seq_controle_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, cd_empresa_p bigint, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
	IE_LOCAL_GERAR_SPED_W
		Parametro 5500 - [25] - SPED PIS/COFINS - Ao gerar os dados,  de onde buscar as informacoes
			C - Conta Paciente
			A - Conta paciente. Se nao houver vinculo, busca da nota
			N - Nota Fiscal
			P - Pr-faturamento
-------------------------------------------------------------------------------------------------------------------

Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
aliquota_pis_w		double precision;
aliquota_cofins_w		double precision;
cd_tributo_pis_w		smallint;
cd_tributo_cofins_w		smallint;
cd_cgc_w		varchar(14);
nr_seq_regra_efd_w	bigint;
nr_versao_efd_w		varchar(5);
tp_registro_w		varchar(4);
cd_municipio_ibge_w	varchar(7);
nr_linha_w		bigint 	:= qt_linha_p;
nr_seq_registro_w		bigint 	:= nr_sequencia_p;
ds_arquivo_w		varchar(4000);
ds_arquivo_compl_w	varchar(4000);
ds_linha_w		varchar(8000);
sep_w			varchar(1)	:= ds_separador_p;
dt_movimento_w		varchar(10);
vl_base_calculo_w		double precision	:= 0;
vl_pis_w			double precision	:= 0;
vl_cofins_w		double precision	:= 0;
vl_retencao_w		double precision;
qt_registros_w		bigint;
cd_empresa_w		smallint;
nr_seq_data_w		bigint;
ie_local_gerar_sped_w	varchar(1);
vl_tributo_pis_w		double precision;
vl_tributo_cofins_w		double precision;
ie_entrou_w		varchar(1)	:= 'N';
nr_seq_regra_efd_f600_w 	fis_regra_efd_f600.nr_sequencia%Type;
ie_forma_registro_w		fis_regra_efd_f600.ie_forma_registro%Type;
vl_soma_titulo_w		double precision;
vl_total_nota_w		double precision;
vl_tributo_cofins_nota_w	double precision;
vl_tributo_pis_nota_w	double precision;
ie_nat_retencao_w		tipo_pessoa_juridica.ie_nat_retencao_fonte%type;

c01 CURSOR FOR
	SELECT	round((sum(y.vl_pis))::numeric,2) vl_pis,
		round((sum(y.vl_cofins))::numeric,2) vl_cofins,
		to_char(y.dt_movimento,'ddmmyyyy') dt_retencao
	from (SELECT	round((CASE WHEN coalesce(c.ie_tipo_valor,'VM')='VM' THEN a.vl_movimento WHEN coalesce(c.ie_tipo_valor,'VM')='VC' THEN a.vl_credito WHEN coalesce(c.ie_tipo_valor,'VM')='VD' THEN  a.vl_debito END )::numeric,2) vl_pis,
			0 vl_cofins,
			dt_inicio_p dt_movimento
		from 	ctb_balancete_v		a,
			fis_efd_conta_contabil	c,
			fis_efd_regra_tipo_ct	r
		where	a.cd_conta_contabil	= c.cd_conta_contabil
		and	r.nr_sequencia		= c.nr_seq_tipo_ct
		and	a.nr_seq_mes_ref	= nr_seq_data_w
		and	r.ie_tipo_ct		= 'PR'
		and	a.cd_estabelecimento	= coalesce(c.cd_estabelecimento, cd_estabelecimento_p)
		and	obter_empresa_estab(a.cd_estabelecimento) = coalesce(c.cd_empresa, cd_empresa_p)
		and	a.ie_normal_encerramento	= 'N'
		
union

		select	0 vl_pis,
			round((CASE WHEN coalesce(c.ie_tipo_valor,'VM')='VM' THEN a.vl_movimento WHEN coalesce(c.ie_tipo_valor,'VM')='VC' THEN a.vl_credito WHEN coalesce(c.ie_tipo_valor,'VM')='VD' THEN  a.vl_debito END )::numeric,2) vl_cofins,
			dt_inicio_p	dt_movimento
		from 	ctb_balancete_v		a,
			fis_efd_conta_contabil	c,
			fis_efd_regra_tipo_ct	r
		where	a.cd_conta_contabil	= c.cd_conta_contabil
		and	r.nr_sequencia		= c.nr_seq_tipo_ct
		and	a.nr_seq_mes_ref	= nr_seq_data_w
		and	r.ie_tipo_ct		= 'CR'
		and	a.cd_estabelecimento	= coalesce(c.cd_estabelecimento, cd_estabelecimento_p)
		and	obter_empresa_estab(a.cd_estabelecimento) = coalesce(c.cd_empresa, cd_empresa_p)
		and	a.ie_normal_encerramento	= 'N') y
	group by
		to_char(y.dt_movimento,'ddmmyyyy');

c02 CURSOR FOR
	SELECT	y.cd_cgc,
		round((sum(y.vl_pis))::numeric,2) vl_pis,
		round((sum(y.vl_cofins))::numeric,2) vl_cofins,
		round((sum(y.vl_base_pis) * aliquota_pis_w)::numeric,2) vl_base_pis,
		to_char(y.dt_recebimento,'ddmmyyyy') dt_retencao
	from (SELECT	a.cd_cgc,
			b.dt_recebimento,
			sum(c.vl_adicional) vl_pis,
			null vl_cofins,
			null vl_base_pis
		from 	convenio		a,
			convenio_receb		b,
			convenio_receb_adic	c,
			transacao_financeira	d
		where 	a.cd_convenio	= b.cd_convenio
		and 	b.nr_sequencia	= c.nr_seq_receb
		and 	d.nr_sequencia	= c.nr_seq_trans_financ
		and	d.nr_sequencia	= 938 -- PIS
		and	b.dt_recebimento between dt_inicio_p and dt_fim_p
		group by
			a.cd_cgc,
			b.dt_recebimento
		
union

		select	a.cd_cgc,
			b.dt_recebimento,
			null vl_pis,
			sum(c.vl_adicional) vl_cofins,
			null vl_base_pis
		from 	convenio		a,
			convenio_receb		b,
			convenio_receb_adic	c,
			transacao_financeira	d
		where 	a.cd_convenio	= b.cd_convenio
		and 	b.nr_sequencia	= c.nr_seq_receb
		and 	d.nr_sequencia	= c.nr_seq_trans_financ
		and	d.nr_sequencia	= 939 -- COFINS
		and	b.dt_recebimento between dt_inicio_p and dt_fim_p
		group by
			a.cd_cgc,
			b.dt_recebimento
		
union

		select	a.cd_cgc,
			b.dt_recebimento,
			null vl_pis,
			null vl_cofins,
			sum(b.vl_recebimento) vl_base_pis
		from 	convenio a,
			convenio_receb		b,
			convenio_receb_adic	c,
			transacao_financeira	d
		where 	a.cd_convenio	= b.cd_convenio
		and 	b.nr_sequencia	= c.nr_seq_receb
		and 	d.nr_sequencia	= c.nr_seq_trans_financ
		and	d.nr_sequencia	= 938 -- PIS
		and	b.dt_recebimento between dt_inicio_p and dt_fim_p
		group by
			a.cd_cgc,
			b.dt_recebimento) y
	group by
		y.cd_cgc,
		to_char(y.dt_recebimento,'ddmmyyyy');

C03 CURSOR FOR
	SELECT	coalesce(n.cd_cgc, r.cd_cgc) cd_cgc,
		to_char(l.dt_recebimento,'ddmmyyyy') dt_recebimento,
		sum(l.vl_recebido) vl_recebido,
		n.nr_sequencia nr_seq_nota
	from	nota_fiscal		n,
		titulo_receber		r,
		titulo_receber_liq	l
	where	n.nr_sequencia	= r.nr_seq_nf_saida
	and	r.nr_titulo	= l.nr_titulo
	and	l.dt_recebimento between dt_inicio_p and dt_fim_p
	and	obter_empresa_estab(r.cd_estabelecimento)	= cd_empresa_p
	and	coalesce(r.cd_estabelecimento,cd_estabelecimento_p)	= cd_estabelecimento_p
	and	n.ie_situacao	= 1
	and ((r.cd_cgc IS NOT NULL AND r.cd_cgc::text <> '') or (n.cd_cgc IS NOT NULL AND n.cd_cgc::text <> ''))
	group by
		coalesce(n.cd_cgc, r.cd_cgc),
		n.nr_sequencia,
		to_char(l.dt_recebimento,'ddmmyyyy');

C04 CURSOR FOR
	SELECT	coalesce(n.cd_cgc, r.cd_cgc) cd_cgc,
		to_char(l.dt_recebimento,'ddmmyyyy') dt_recebimento,
		sum(l.vl_recebido) vl_recebido,
		coalesce(fis_obter_natureza_retencao(coalesce(n.cd_cgc, r.cd_cgc)),'04') ie_nat_retencao
	from	nota_fiscal		n,
		titulo_receber		r,
		titulo_receber_liq		l
	where	n.nr_sequencia	= r.nr_seq_nf_saida
	and	r.nr_titulo	= l.nr_titulo
	and	l.dt_recebimento between dt_inicio_p and dt_fim_p
	and	obter_empresa_estab(r.cd_estabelecimento)	= cd_empresa_p
	and	coalesce(r.cd_estabelecimento,cd_estabelecimento_p)	= cd_estabelecimento_p
	and	n.ie_situacao	= 1
	and ((r.cd_cgc IS NOT NULL AND r.cd_cgc::text <> '') or (n.cd_cgc IS NOT NULL AND n.cd_cgc::text <> ''))
	group by
		coalesce(n.cd_cgc, r.cd_cgc),
		to_char(l.dt_recebimento,'ddmmyyyy');
		
--Nota Fiscal - Data Emissao
C05 CURSOR FOR
	SELECT 	round((sum(coalesce(x.vl_pis, 0)))::numeric, 2) vl_pis,
			round((sum(coalesce(x.vl_cofins, 0)))::numeric, 2) vl_cofins,
			to_char(x.dt_emissao,'ddmmyyyy') dt_retencao,
			x.cd_cgc cd_cgc
	from (	SELECT 	sum(coalesce(t.vl_tributo, 0)) vl_pis,
						null vl_cofins,
						n.dt_emissao dt_emissao,
						n.cd_cgc cd_cgc
				from 	nota_fiscal n,
						nota_fiscal_trib t
				where 	t.nr_sequencia = n.nr_sequencia 
				and 	t.cd_tributo = cd_tributo_pis_w
				and		n.dt_emissao between dt_inicio_p and dt_fim_p
				and		obter_empresa_estab(n.cd_estabelecimento)	= cd_empresa_p
				and		coalesce(n.cd_estabelecimento,cd_estabelecimento_p)	= cd_estabelecimento_p
				and		n.ie_situacao = 1
				and		(n.cd_cgc IS NOT NULL AND n.cd_cgc::text <> '')
				and		coalesce(Obter_Se_Nota_Entrada_Saida(n.nr_sequencia), 'S') = 'S'
				group by n.dt_emissao, n.cd_cgc 
				
union

				select 	null vl_pis,
						sum(coalesce(t.vl_tributo, 0)) vl_cofins,
						n.dt_emissao dt_emissao,
						n.cd_cgc cd_cgc
				from 	nota_fiscal n,
						nota_fiscal_trib t
				where 	t.nr_sequencia = n.nr_sequencia 
				and 	t.cd_tributo = cd_tributo_cofins_w
				and		n.dt_emissao between dt_inicio_p and dt_fim_p
				and		obter_empresa_estab(n.cd_estabelecimento)	= cd_empresa_p
				and		coalesce(n.cd_estabelecimento,cd_estabelecimento_p)	= cd_estabelecimento_p
				and		n.ie_situacao = 1
				and		(n.cd_cgc IS NOT NULL AND n.cd_cgc::text <> '')
				and		coalesce(Obter_Se_Nota_Entrada_Saida(n.nr_sequencia), 'S') = 'S'
				group by n.dt_emissao, n.cd_cgc ) x
	group by
		to_char(x.dt_emissao,'ddmmyyyy'), x.cd_cgc;
	
			
vet01	C01%RowType;
vet02	C02%RowType;
vet03	C03%RowType;
vet04	C04%RowType;
vet05	C05%RowType;


BEGIN
select	cd_empresa
into STRICT	cd_empresa_w
from	estabelecimento
where	cd_estabelecimento	= cd_estabelecimento_p;

select	count(1)
into STRICT	qt_registros_w
from	ctb_mes_ref
where	trunc(dt_referencia,'mm')	= trunc(dt_inicio_p,'mm')
and	cd_empresa			= cd_empresa_w  LIMIT 1;

if (qt_registros_w = 1) then
	select	max(nr_sequencia)
	into STRICT	nr_seq_data_w
	from 	ctb_mes_ref
	where 	trunc(dt_referencia,'mm')	= trunc(dt_inicio_p,'mm')
	and	cd_empresa			= cd_empresa_w;
end if;

select	a.cd_cgc
into STRICT	cd_cgc_w
from	estabelecimento a
where	a.cd_estabelecimento	= cd_estabelecimento_p;

select	nr_seq_regra_efd
into STRICT	nr_seq_regra_efd_w
from	fis_efd_controle
where	nr_sequencia	= nr_seq_controle_p;

select 	cd_tributo_pis,
	cd_tributo_cofins
into STRICT	cd_tributo_pis_w,
	cd_tributo_cofins_w
from	fis_regra_efd
where	nr_sequencia	= nr_seq_regra_efd_w;

begin
select	nr_sequencia
into STRICT	nr_seq_regra_efd_f600_w
from	fis_regra_efd_f600
where	nr_seq_regra_efd	= nr_seq_regra_efd_w;
exception
when others then
	nr_seq_regra_efd_f600_w	:= 0;
	ie_forma_registro_w	:= 'CC';	
end;

if (nr_seq_regra_efd_f600_w <> 0) then
	select 	coalesce(ie_forma_registro,'CC')
	into STRICT	ie_forma_registro_w
	from	fis_regra_efd_f600
	where	nr_sequencia	= nr_seq_regra_efd_f600_w;
end if;

aliquota_pis_w		:= obter_pr_imposto(cd_tributo_pis_w);
aliquota_cofins_w	:= obter_pr_imposto(cd_tributo_cofins_w);

ie_local_gerar_sped_w := obter_param_usuario(5500, 25, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_local_gerar_sped_w);

if (ie_local_gerar_sped_w = 'N') then
	if (ie_forma_registro_w = 'NF') then
		open c05;
		loop
		fetch c05 into
			vet05;
		EXIT WHEN NOT FOUND; /* apply on c05 */
			vl_base_calculo_w 	:= round((vet05.vl_pis / aliquota_pis_w)::numeric,2) * 100;
			vl_retencao_w		:= vet05.vl_pis + vet05.vl_cofins;
			
			select	coalesce(fis_obter_natureza_retencao(vet05.cd_cgc),'02')
			into STRICT	ie_nat_retencao_w
			;
			
			ds_linha_w	:= substr(	sep_w || 'F600' 						|| --texto fixo
							sep_w || ie_nat_retencao_w					|| -- indicador da natureza retencao
							sep_w || vet05.dt_retencao					|| -- data retencao
							sep_w || sped_formatar_numericos(abs(vl_base_calculo_w),2,',')	|| -- base de calculo da retencao
							sep_w || sped_formatar_numericos(abs(vl_retencao_w),2,',')	|| -- valor da retencao
							sep_w || ''							|| -- codigo da retencao
							sep_w || ''							|| -- natureza da receita
							sep_w || vet05.cd_cgc		 				|| -- cnpj
							sep_w || sped_formatar_numericos(abs(vet05.vl_pis),2,',')	|| -- valor do pis retido na fonte
							sep_w || sped_formatar_numericos(abs(vet05.vl_cofins),2,',')	|| -- valor do cofins retido na fonte
							sep_w || '0'							|| -- natureza do declarante
							sep_w,1,8000);

			ds_arquivo_w		:= substr(ds_linha_w,1,4000);
			ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
			nr_seq_registro_w	:= nr_seq_registro_w + 1;
			nr_linha_w			:= nr_linha_w + 1;
			
			vl_tributo_pis_w	:= round((abs(vet05.vl_pis))::numeric,2);
			vl_tributo_cofins_w	:= round((abs(vet05.vl_cofins))::numeric,2);
			
			insert into fis_efd_nota_arq(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					vl_pis_retido,
					vl_cofins_retido,
					nr_seq_controle)
				values (nextval('fis_efd_nota_arq_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					vl_tributo_pis_w,
					vl_tributo_cofins_w,
					nr_seq_controle_p);
			
			insert into fis_efd_arquivo(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_controle_efd,
				nr_linha,
				cd_registro,
				ds_arquivo,
				ds_arquivo_compl)
			values (nr_seq_registro_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_controle_p,
				nr_linha_w,
				'F600',
				ds_arquivo_w,
				ds_arquivo_compl_w);

			qt_linha_p	:= nr_linha_w;
			nr_sequencia_p	:= nr_seq_registro_w;
		end loop;
		close c05;
	end if;

	if (ie_forma_registro_w = 'CC') then
		open C01;
		loop
		fetch C01 into
			vet01;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			vl_base_calculo_w 	:= round((vet01.vl_pis / aliquota_pis_w)::numeric,2) * 100;
			vl_retencao_w		:= vet01.vl_pis + vet01.vl_cofins;
			
			select	coalesce(fis_obter_natureza_retencao(cd_cgc_w),'02')
			into STRICT	ie_nat_retencao_w
			;

			ds_linha_w	:= substr(	sep_w || 'F600' 						|| --texto fixo
							sep_w || ie_nat_retencao_w					|| -- indicador da natureza retencao
							sep_w || vet01.dt_retencao					|| -- data retencao
							sep_w || sped_formatar_numericos(abs(vl_base_calculo_w),2,',')	|| -- base de calculo da retencao
							sep_w || sped_formatar_numericos(abs(vl_retencao_w),2,',')	|| -- valor da retencao
							sep_w || ''							|| -- codigo da retencao
							sep_w || ''							|| -- natureza da receita
							sep_w || cd_cgc_w		 				|| -- cnpj
							sep_w || sped_formatar_numericos(abs(vet01.vl_pis),2,',')	|| -- valor do pis retido na fonte
							sep_w || sped_formatar_numericos(abs(vet01.vl_cofins),2,',')	|| -- valor do cofins retido na fonte
							sep_w || '1'							|| -- natureza do declarante
							sep_w,1,8000);

			ds_arquivo_w		:= substr(ds_linha_w,1,4000);
			ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
			nr_seq_registro_w	:= nr_seq_registro_w + 1;
			nr_linha_w		:= nr_linha_w + 1;
			
			vl_tributo_pis_w	:= round((abs(vet01.vl_pis))::numeric,2);
			vl_tributo_cofins_w	:= round((abs(vet01.vl_cofins))::numeric,2);
			
			insert into fis_efd_nota_arq(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					vl_pis_retido,
					vl_cofins_retido,
					nr_seq_controle)
				values (nextval('fis_efd_nota_arq_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					vl_tributo_pis_w,
					vl_tributo_cofins_w,
					nr_seq_controle_p);

			insert into fis_efd_arquivo(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_controle_efd,
				nr_linha,
				cd_registro,
				ds_arquivo,
				ds_arquivo_compl)
			values (nr_seq_registro_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_controle_p,
				nr_linha_w,
				'F600',
				ds_arquivo_w,
				ds_arquivo_compl_w);

			qt_linha_p	:= nr_linha_w;
			nr_sequencia_p	:= nr_seq_registro_w;
			end;
		end loop;
		close C01;
	end if;
	
	if (ie_forma_registro_w = 'TR') then		
		open C04;
		loop
		fetch C04 into
			vet04;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			
				vl_base_calculo_w := 0;
				vl_tributo_cofins_w := 0;
				vl_tributo_pis_w := 0;
				vl_retencao_w := 0;
				
				open C03;
				loop
				fetch C03 into
					vet03;
				EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				
				if (vet04.cd_cgc = vet03.cd_cgc) and (vet04.dt_recebimento = vet03.dt_recebimento) then
					
					select	sum(coalesce(a.vl_titulo,0)) vl_titulo
					into STRICT    vl_soma_titulo_w
					from	titulo_receber a,
						nota_fiscal b
					where	a.nr_seq_nf_saida	= b.nr_sequencia
					and 	b.nr_sequencia		= vet03.nr_seq_nota;
					
					select	sum(coalesce(a.vl_mercadoria,0) - coalesce(a.vl_descontos,0)) vl_total_nota,
						sum((select	sum(coalesce(t.vl_tributo,0))
						from	nota_fiscal_trib	t
						where	t.nr_sequencia	= a.nr_sequencia
						and	t.cd_tributo	= cd_tributo_cofins_w)) vl_tributo_cofins,
						sum((select	sum(coalesce(t.vl_tributo,0))
						from	nota_fiscal_trib	t
						where	t.nr_sequencia	= a.nr_sequencia
						and	t.cd_tributo	= cd_tributo_pis_w)) vl_tributo_pis	
					into STRICT	vl_total_nota_w,
						vl_tributo_cofins_nota_w,
						vl_tributo_pis_nota_w
					from	nota_fiscal a
					where 	a.nr_sequencia = vet03.nr_seq_nota;
					
					vl_base_calculo_w	:= vl_base_calculo_w + ((vet03.vl_recebido/vl_soma_titulo_w) * vl_total_nota_w);
					vl_tributo_cofins_w	:= vl_tributo_cofins_w + ((vet03.vl_recebido/vl_soma_titulo_w) * vl_tributo_cofins_nota_w);
					vl_tributo_pis_w	:= vl_tributo_pis_w + ((vet03.vl_recebido/vl_soma_titulo_w) * vl_tributo_pis_nota_w);
					
					vl_retencao_w		:= vl_retencao_w + vl_tributo_pis_w + vl_tributo_cofins_w;
					
					vl_tributo_pis_w	:= round((abs(vl_tributo_pis_w))::numeric,2);
					vl_tributo_cofins_w	:= round((abs(vl_tributo_cofins_w))::numeric,2);
				end if;
				end;
				end loop;
			close C03;
			
			if (coalesce(vl_retencao_w,0) > 0) then
				
				ds_linha_w	:= substr(	sep_w || 'F600' 						|| --texto fixo
								sep_w || vet04.ie_nat_retencao					|| -- indicador da natureza retencao
								sep_w || vet04.dt_recebimento					|| -- data retencao
								sep_w || sped_formatar_numericos(abs(vl_base_calculo_w),2,',')	|| -- base de calculo da retencao
								sep_w || sped_formatar_numericos(abs(vl_retencao_w),2,',')	|| -- valor da retencao
								sep_w || ''							|| -- codigo da retencao
								sep_w || ''							|| -- natureza da receita
								sep_w || vet04.cd_cgc		 				|| -- cnpj
								sep_w || sped_formatar_numericos(vl_tributo_pis_w,2,',')	|| -- valor do pis retido na fonte
								sep_w || sped_formatar_numericos(vl_tributo_cofins_w,2,',')	|| -- valor do cofins retido na fonte
								sep_w || '0'							|| -- natureza do declarante
								sep_w,1,8000);

				ds_arquivo_w		:= substr(ds_linha_w,1,4000);
				ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
				nr_seq_registro_w	:= nr_seq_registro_w + 1;
				nr_linha_w		:= nr_linha_w + 1;

				insert into fis_efd_nota_arq(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					vl_pis_retido,
					vl_cofins_retido,
					nr_seq_controle)
				values (nextval('fis_efd_nota_arq_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					vl_tributo_pis_w,
					vl_tributo_cofins_w,
					nr_seq_controle_p);

				insert into fis_efd_arquivo(nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nr_seq_controle_efd,
					nr_linha,
					cd_registro,
					ds_arquivo,
					ds_arquivo_compl)
				values (nr_seq_registro_w,
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nr_seq_controle_p,
					nr_linha_w,
					'F600',
					ds_arquivo_w,
					ds_arquivo_compl_w);
			end if;
			end;
		end loop;
		close C04;
	end if;
elsif	(ie_local_gerar_sped_w = 'C' AND ie_forma_registro_w = 'CV') then
	open C02;
	loop
	fetch C02 into
		vet02;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		vl_base_calculo_w 	:= round((vet02.vl_base_pis / aliquota_pis_w)::numeric,2) * 100;
		vl_retencao_w		:= vet02.vl_pis + vet02.vl_cofins;

		ds_linha_w	:= substr(	sep_w || 'F600' 							|| --texto fixo
						sep_w || '02'								|| -- indicador da natureza retencao
						sep_w || vet02.dt_retencao						|| -- data retencao
						sep_w || sped_formatar_numericos(abs(vl_base_calculo_w/100),2,',')	|| -- base de calculo da retencao
						sep_w || sped_formatar_numericos(abs(vl_retencao_w),2,',')		|| -- valor da retencao
						sep_w || ''								|| -- codigo da retencao
						sep_w || ''								|| -- natureza da receita
						sep_w || vet02.cd_cgc		 					|| -- cnpj
						sep_w || sped_formatar_numericos(round((abs(vet02.vl_pis))::numeric,2),2,',')	|| -- valor do pis retido na fonte
						sep_w || sped_formatar_numericos(round((abs(vet02.vl_cofins))::numeric,2),2,',')	|| -- valor do cofins retido na fonte
						sep_w || '1'								|| -- natureza do declarante
						sep_w,1,8000);

		ds_arquivo_w		:= substr(ds_linha_w,1,4000);
		ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
		nr_seq_registro_w	:= nr_seq_registro_w + 1;
		nr_linha_w		:= nr_linha_w + 1;

		insert into fis_efd_arquivo(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_controle_efd,
			nr_linha,
			cd_registro,
			ds_arquivo,
			ds_arquivo_compl)
		values (nr_seq_registro_w,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nr_seq_controle_p,
			nr_linha_w,
			'F600',
			ds_arquivo_w,
			ds_arquivo_compl_w);
		end;
	end loop;
	close C02;
elsif (ie_local_gerar_sped_w = 'P') then
	SELECT * FROM fis_pre_fat_F600_efd(	nr_seq_controle_p, nm_usuario_p, cd_estabelecimento_p, dt_inicio_p, dt_fim_p, cd_empresa_p, ds_separador_p, nr_linha_w, nr_seq_registro_w) INTO STRICT nr_linha_w, nr_seq_registro_w;
end if;

commit;

qt_linha_p	:= nr_linha_w;
nr_sequencia_p	:= nr_seq_registro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_f600_efd ( nr_seq_controle_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, cd_empresa_p bigint, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) FROM PUBLIC;

