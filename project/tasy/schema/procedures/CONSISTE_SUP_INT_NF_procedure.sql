-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_sup_int_nf ( nr_sequencia_p bigint, cd_cgc_p text, cd_cgc_emitente_p text, cd_condicao_pagamento_p bigint, cd_estabelecimento_p bigint, cd_natureza_operacao_p bigint, cd_operacao_nf_p bigint, cd_pessoa_fisica_p text, cd_serie_nf_p text, ie_tipo_nota_p text) AS $body$
DECLARE


qt_existe_w				bigint;
cd_centro_custo_w				integer;
cd_conta_contabil_w			varchar(20);
cd_local_estoque_w			smallint;
cd_material_w				integer;
cd_unidade_medida_compra_w		varchar(30);
ie_de_para_unid_med_w			varchar(15);
ie_de_para_material_w			varchar(15);

c01 CURSOR FOR
SELECT	cd_centro_custo,
	cd_conta_contabil,
	cd_local_estoque,
	cd_material,
	cd_unidade_medida_compra
from	sup_int_nf_item
where	nr_sequencia = nr_sequencia_p;


BEGIN

if (cd_cgc_p IS NOT NULL AND cd_cgc_p::text <> '') then
	begin

	select	count(*)
	into STRICT	qt_existe_w
	from	pessoa_juridica
	where	cd_cgc = cd_cgc_p;

	if (qt_existe_w = 0) then
		CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313442));
	end if;

	end;
end if;

if (cd_cgc_emitente_p IS NOT NULL AND cd_cgc_emitente_p::text <> '') then
	begin

	select	count(*)
	into STRICT	qt_existe_w
	from	pessoa_juridica
	where	cd_cgc = cd_cgc_emitente_p;

	if (qt_existe_w = 0) then
		CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313443));
	end if;

	end;
end if;

if (cd_condicao_pagamento_p IS NOT NULL AND cd_condicao_pagamento_p::text <> '') then
	begin

	select	count(*)
	into STRICT	qt_existe_w
	from	condicao_pagamento
	where	cd_condicao_pagamento = cd_condicao_pagamento_p;

	if (qt_existe_w = 0) then
		CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313444));
	end if;

	end;
end if;

select	count(*)
into STRICT	qt_existe_w
from	estabelecimento_v
where	cd_estabelecimento = cd_estabelecimento_p;

if (qt_existe_w = 0) then
	CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313445));
end if;

if (cd_natureza_operacao_p IS NOT NULL AND cd_natureza_operacao_p::text <> '') then
	begin

	select	count(*)
	into STRICT	qt_existe_w
	from	natureza_operacao
	where	cd_natureza_operacao = cd_natureza_operacao_p;

	if (qt_existe_w = 0) then
		CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313446));
	end if;

	end;
end if;

select	count(*)
into STRICT	qt_existe_w
from	operacao_nota
where	cd_operacao_nf = cd_operacao_nf_p;

if (qt_existe_w = 0) then
	CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313447));
end if;

if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then
	begin

	select	count(*)
	into STRICT	qt_existe_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_p;

	if (qt_existe_w = 0) then
		CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313448));
	end if;

	end;
end if;

select	count(*)
into STRICT	qt_existe_w
from	valor_dominio
where	cd_dominio = 1661
and	vl_dominio = upper(ie_tipo_nota_p);

if (qt_existe_w = 0) then
	CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313449));
end if;

select	obter_ie_de_para_sup_integr('NF','R','UNIDADE_MEDIDA'),
	obter_ie_de_para_sup_integr('NF','R','MATERIAL')
into STRICT	ie_de_para_unid_med_w,
	ie_de_para_material_w
;

open c01;
loop
fetch c01 into
	cd_centro_custo_w,
	cd_conta_contabil_w,
	cd_local_estoque_w,
	cd_material_w,
	cd_unidade_medida_compra_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	if (cd_centro_custo_w IS NOT NULL AND cd_centro_custo_w::text <> '') then
		begin

		select	count(*)
		into STRICT	qt_existe_w
		from	centro_custo
		where	cd_estabelecimento = cd_estabelecimento_p
		and	cd_centro_custo = cd_centro_custo_w;

		if (qt_existe_w = 0) then
			CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313450));
		end if;

		end;
	end if;

	if (cd_conta_contabil_w IS NOT NULL AND cd_conta_contabil_w::text <> '') then
		begin

		select	count(*)
		into STRICT	qt_existe_w
		from	conta_contabil
		where	cd_conta_contabil = cd_conta_contabil_w;

		if (qt_existe_w = 0) then
			CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313451));
		end if;

		end;
	end if;

	if (cd_local_estoque_w IS NOT NULL AND cd_local_estoque_w::text <> '') then
		begin

		select	count(*)
		into STRICT	qt_existe_w
		from	local_estoque
		where	cd_estabelecimento = cd_estabelecimento_p
		and	cd_local_estoque = cd_local_estoque_w;

		if (qt_existe_w = 0) then
			CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313452));
		end if;

		end;
	end if;

	if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then
		begin

		/*Conversao para material*/

		if (ie_de_para_material_w = 'C') then
			cd_material_w	:= coalesce(Obter_Conversao_interna(null,'MATERIAL','CD_MATERIAL',cd_material_w),cd_material_w);
		elsif (ie_de_para_material_w = 'S') then
			cd_material_w	:= coalesce(obter_material_sistema_ant(cd_material_w),cd_material_w);
		end if;
		/*Fim*/

		select	count(*)
		into STRICT	qt_existe_w
		from	material
		where	cd_material = cd_material_w;

		if (qt_existe_w = 0) then
			CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313453));
		end if;

		end;
	end if;

	if (cd_unidade_medida_compra_w IS NOT NULL AND cd_unidade_medida_compra_w::text <> '') then
		begin

		/*Conversao para unidade de medida*/

		if (ie_de_para_unid_med_w = 'C') then
			cd_unidade_medida_compra_w	:= coalesce(Obter_Conversao_interna(null,'UNIDADE_MEDIDA','CD_UNIDADE_MEDIDA',cd_unidade_medida_compra_w),cd_unidade_medida_compra_w);
		elsif (ie_de_para_unid_med_w = 'S') then
			cd_unidade_medida_compra_w	:= coalesce(obter_unid_med_sist_ant(cd_unidade_medida_compra_w),cd_unidade_medida_compra_w);
		end if;
		/*Fim*/

		select	count(*)
		into STRICT	qt_existe_w
		from	unidade_medida
		where	cd_unidade_medida = cd_unidade_medida_compra_w;

		if (qt_existe_w = 0) then
			CALL grava_sup_int_nf_consist(nr_sequencia_p,wheb_mensagem_pck.get_texto(313454));
		end if;

		end;
	end if;

	end;
end loop;
close c01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_sup_int_nf ( nr_sequencia_p bigint, cd_cgc_p text, cd_cgc_emitente_p text, cd_condicao_pagamento_p bigint, cd_estabelecimento_p bigint, cd_natureza_operacao_p bigint, cd_operacao_nf_p bigint, cd_pessoa_fisica_p text, cd_serie_nf_p text, ie_tipo_nota_p text) FROM PUBLIC;

