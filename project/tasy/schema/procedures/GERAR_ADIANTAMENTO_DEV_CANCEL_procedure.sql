-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_adiantamento_dev_cancel ( nr_adiantamento_p adiantamento_dev.nr_adiantamento%TYPE, vl_devolucao_p adiantamento_dev.vl_devolucao%TYPE, nr_seq_mtvo_dev_p adiantamento_dev.nr_seq_motivo_dev%TYPE, nr_seq_trans_fin_p adiantamento_dev.nr_seq_trans_fin%TYPE, nm_usuario_p adiantamento_dev.nm_usuario%TYPE ) AS $body$
DECLARE


    cd_moeda_w               adiantamento.cd_moeda%TYPE;
    nr_sequencia_w           adiantamento_dev.nr_sequencia%TYPE;
/* Projeto Multimoeda - Variaveis */

    vl_devolucao_estrang_w   adiantamento_dev.vl_devolucao_estrang%TYPE;
    vl_complemento_w         adiantamento_dev.vl_complemento%TYPE;
    vl_cotacao_w             cotacao_moeda.vl_cotacao%TYPE;
    vl_adto_estrang_w        adiantamento.vl_adto_estrang%TYPE;
    nr_seq_mtvo_dev_w        adiantamento_dev.nr_seq_motivo_dev%TYPE;
    nr_seq_trans_fin_w       adiantamento_dev.nr_seq_trans_fin%TYPE;

BEGIN
    SELECT
        MAX(a.cd_moeda),
        MAX(a.vl_adto_estrang),
        MAX(vl_cotacao)
    INTO STRICT
        cd_moeda_w,
        vl_adto_estrang_w,
        vl_cotacao_w
    FROM
        adiantamento a
    WHERE
        a.nr_adiantamento = nr_adiantamento_p;

    nr_seq_trans_fin_w := nr_seq_trans_fin_p;
    nr_seq_mtvo_dev_w := nr_seq_mtvo_dev_p;
    SELECT
        coalesce(MAX(a.nr_sequencia), 0) + 1
    INTO STRICT nr_sequencia_w
    FROM
        adiantamento_dev a
    WHERE
        a.nr_adiantamento = nr_adiantamento_p;

/* Projeto Multimoeda - Verifica se o adiantamento eh em moeda estrangeira, caso positivo calcula os valores antes de gravar a devolucao */

    IF ( coalesce(vl_adto_estrang_w, 0) <> 0 AND coalesce(vl_cotacao_w, 0) <> 0 ) THEN
        vl_devolucao_estrang_w := vl_devolucao_p / vl_cotacao_w;
        vl_complemento_w := vl_devolucao_p - vl_devolucao_estrang_w;
    ELSE
        vl_devolucao_estrang_w := NULL;
        vl_complemento_w := NULL;
        vl_cotacao_w := NULL;
    END IF;

--Validacao de campos motivo e transacao padroes para o cancelamento ou para quando estiver vazio na devolucao
    IF ( coalesce(nr_seq_mtvo_dev_w::text, '') = '' ) THEN
        SELECT
            nr_seq_motivo_dev
        INTO STRICT nr_seq_mtvo_dev_w
        FROM
            parametro_contas_receber
        WHERE
            cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

    END IF;

    IF ( coalesce(nr_seq_trans_fin_w::text, '') = '' ) THEN
        SELECT
            nr_seq_trans_fin_canc_adiant
        INTO STRICT nr_seq_trans_fin_w
        FROM
            parametro_contas_receber
        WHERE
            cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

    END IF;

    INSERT INTO adiantamento_dev(
        nr_sequencia,
        nr_adiantamento,
        cd_moeda,
        dt_atualizacao,
        dt_devolucao,
        vl_devolucao,
        nm_usuario,
        nr_seq_trans_fin,
        nr_seq_motivo_dev,
        vl_devolucao_estrang,
        vl_complemento,
        vl_cotacao
    ) VALUES (
        nr_sequencia_w,
        nr_adiantamento_p,
        cd_moeda_w,
        clock_timestamp(),
        clock_timestamp(),
        vl_devolucao_p,
        nm_usuario_p,
        nr_seq_trans_fin_w,
        nr_seq_mtvo_dev_w,
        vl_devolucao_estrang_w,
        vl_complemento_w,
        vl_cotacao_w
    );

    COMMIT;
    CALL atualizar_saldo_adiantamento(nr_adiantamento_p, nm_usuario_p, NULL, NULL);
    COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_adiantamento_dev_cancel ( nr_adiantamento_p adiantamento_dev.nr_adiantamento%TYPE, vl_devolucao_p adiantamento_dev.vl_devolucao%TYPE, nr_seq_mtvo_dev_p adiantamento_dev.nr_seq_motivo_dev%TYPE, nr_seq_trans_fin_p adiantamento_dev.nr_seq_trans_fin%TYPE, nm_usuario_p adiantamento_dev.nm_usuario%TYPE ) FROM PUBLIC;

