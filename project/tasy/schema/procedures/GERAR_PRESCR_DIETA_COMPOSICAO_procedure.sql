-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_prescr_dieta_composicao ( nr_prescricao_p bigint, nm_usuario_p text, cd_intervalo_p text default null, ie_agora_p text DEFAULT NULL, ie_dose_esp_p text DEFAULT NULL, hr_dose_especial_p text DEFAULT NULL, ie_validade_p text DEFAULT NULL, qt_parametro_p bigint DEFAULT NULL, ds_erro_p INOUT text DEFAULT NULL) AS $body$
DECLARE


/*
ie_validade_p ---- Para prescrições com mais de 24 horas de validade, dias que a dieta será válida
'P' - Primeiro dia
'S' - Segundo dia
'A' - Ambos
*/


--Parâmetros da REP
vl_param_298_w			numeric(20);
vl_param_510_w			numeric(20);
vl_param_530_w			varchar(5);
vl_param_1012_w			varchar(5);

dt_prim_hor_dieta_w		timestamp;
dt_inicio_prescr_w		timestamp;
dt_validade_prescr_w	timestamp;
dt_rep_pt_w				timestamp;
dt_rep_pt2_w			timestamp;
dt_prim_setor_w			timestamp;
dt_inicio_dieta_w		timestamp;
dt_fim_dieta_w			timestamp;
dt_dia_validade_w		timestamp;
dt_horario_servico_w	timestamp;
						
hr_prim_horario_w		prescr_dieta.hr_prim_horario%type;
nr_seq_dieta_w			prescr_dieta.nr_sequencia%type;
nr_seq_interno_w		prescr_dieta.nr_seq_interno%type;

nr_horas_validade_w		prescr_medica.nr_horas_validade%type;

cd_dieta_w				dieta.cd_dieta%type;
cd_dieta_ww				dieta.cd_dieta%type;

cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;

ds_composicao_w			composicao_dieta.ds_composicao%type;

nr_seq_consistencia_w	w_dieta_consistencia.nr_seq_consistencia%type;
nr_seq_composicao_w		w_dieta_consistencia.nr_seq_composicao%type;
nr_seq_composicao_ww	w_dieta_consistencia.nr_seq_composicao%type;

nr_atendimento_w		atendimento_paciente.nr_atendimento%type;

cd_perfil_w				perfil.cd_perfil%type;

cd_funcao_w				funcao.cd_funcao%type;

nr_seq_rep_servico_w	rep_servico.nr_sequencia%type;

cd_setor_atendimento_w	setor_atendimento.cd_setor_atendimento%type;

ds_consistencia_w		consistencia_dieta.ds_consistencia%type;

cont_w					numeric(20);
ie_identica_w			varchar(1);
ds_horarios_w			varchar(2000) := '';
ds_horarios2_w			varchar(2000);
nr_intervalo_w			numeric(20) := 0;
ds_lista_composicao_w	varchar(255);
ie_inseriu_w			varchar(1);
ds_mensagem_w			varchar(255);
ds_horario_serv_w		varchar(5);
ds_horarios_servico_w	varchar(255);
ds_erro_w				varchar(2000);
ds_tempo_w				varchar(50);
ie_operacao_w			varchar(1);
cd_convenio_w			atend_categoria_convenio.cd_convenio%type;

c01 CURSOR FOR
SELECT	nr_seq_consistencia
from		w_dieta_consistencia
where	nr_prescricao	= nr_prescricao_p
and		nm_usuario	= nm_usuario_p
group by nr_seq_consistencia;

C02 CURSOR FOR
SELECT	a.cd_dieta
from	dieta_consistencia a,
	dieta b
where	a.cd_dieta		= b.cd_dieta
and	a.nr_seq_consistencia	= nr_seq_consistencia_w
and	coalesce(b.ie_situacao,'A')	= 'A'
and	obter_se_dieta_perfil(cd_perfil_w,cd_setor_atendimento_w,a.cd_dieta,nm_usuario_p,cd_convenio_w,'A',null) = 'S'
and (b.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento or coalesce(b.cd_estabelecimento::text, '') = '')
group by a.cd_dieta;

C03 CURSOR FOR
SELECT	a.cd_dieta
from	dieta_consistencia a,
	dieta b
where	a.cd_dieta		= b.cd_dieta
and	coalesce(b.ie_situacao,'A')	= 'A'
and	a.nr_seq_consistencia	= nr_seq_consistencia_w
and	obter_se_dieta_perfil(cd_perfil_w,cd_setor_atendimento_w,a.cd_dieta,nm_usuario_p,cd_convenio_w,'A',null) = 'S'
and	not exists (	SELECT	1
			from	dieta_composicao x
			where	x.cd_dieta = a.cd_dieta)
group by a.cd_dieta;

C04 CURSOR FOR
SELECT	a.nr_seq_composicao,
		substr(Obter_desc_composicao_dieta(a.nr_seq_composicao),1,255)
from		w_dieta_consistencia a
where	(a.nr_seq_composicao IS NOT NULL AND a.nr_seq_composicao::text <> '')
and		a.nm_usuario		= nm_usuario_p
and		a.nr_prescricao		= nr_prescricao_p
and		a.nr_seq_consistencia   = nr_seq_consistencia_w
group by a.nr_seq_composicao;

C05 CURSOR FOR
SELECT	nm_dieta
from		dieta_consistencia a,
		dieta b
where	a.cd_dieta		= b.cd_dieta
and		coalesce(b.ie_situacao,'A')	= 'A'
and		obter_se_dieta_perfil(cd_perfil_w,cd_setor_atendimento_w,a.cd_dieta,nm_usuario_p,cd_convenio_w,'A',null) = 'S'
and		a.nr_seq_consistencia	= nr_seq_consistencia_w;

c06 CURSOR FOR
SELECT	dt_horario,
		nr_sequencia
from		rep_servico
where	nr_prescricao	= nr_prescricao_p
and		nr_seq_registro = nr_seq_consistencia_w
and		nm_usuario	= nm_usuario_p
and		coalesce(nr_seq_dieta::text, '') = '';

c07 CURSOR FOR
SELECT	to_char(dt_horario,'hh24:mi'),
		dt_horario
from		rep_servico
where	nr_prescricao	= nr_prescricao_p
and		nr_seq_registro = nr_seq_consistencia_w
and		nm_usuario	= nm_usuario_p
and		coalesce(nr_seq_dieta::text, '') = ''
and		(dt_horario IS NOT NULL AND dt_horario::text <> '')
order by dt_horario;	


BEGIN

select	max(cd_estabelecimento)
into STRICT	cd_estabelecimento_w
from	usuario
where	nm_usuario = nm_usuario_p;

cd_perfil_w		:= coalesce(obter_perfil_ativo,0);

vl_param_530_w := Obter_Param_Usuario(924, 530, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, vl_param_530_w);
vl_param_298_w := Obter_Param_Usuario(924, 298, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, vl_param_298_w);
vl_param_510_w := Obter_Param_Usuario(924, 510, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, vl_param_510_w);
vl_param_1012_w := Obter_Param_Usuario(924, 1012, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, vl_param_1012_w);

select	coalesce(max(cd_setor_atendimento), obter_setor_atendimento(max(nr_atendimento))),
		max(dt_rep_pt),
		max(dt_rep_pt2),
		max(dt_inicio_prescr),
		max(dt_validade_prescr),
		max(nr_horas_validade),
		coalesce(max(cd_funcao_origem),obter_funcao_ativa),
		obter_convenio_atendimento(max(nr_atendimento))
into STRICT	cd_setor_atendimento_w,
		dt_rep_pt_w,
		dt_rep_pt2_w,
		dt_inicio_prescr_w,
		dt_validade_prescr_w,
		nr_horas_validade_w,
		cd_funcao_w,
		cd_convenio_w
from	prescr_medica
where	nr_prescricao = nr_prescricao_p;


--Data utilizada para quando a prescrição estiver presente em três dias diferentes. Exemplo: 17/08/2011 23:30 - 19/08/2011 08:00 - Philippe
dt_dia_validade_w	:= dt_inicio_prescr_w + 1;

select	to_date(to_char(dt_inicio_prescr_w,'dd/mm/yyyy')||' '||coalesce(to_char(max(hr_inicio_prescricao),'hh24:mi:ss'),'00:00:00'),'dd/mm/yyyy hh24:mi:ss')
into STRICT	dt_prim_setor_w
from	setor_atendimento
where	cd_setor_atendimento	= cd_setor_atendimento_w;

if (nr_horas_validade_w	<= 24) or (ie_validade_p		= 'A') then

	dt_inicio_dieta_w	:= dt_inicio_prescr_w;
	dt_fim_dieta_w		:= dt_validade_prescr_w;
	
elsif (ie_validade_p	= 'P') then

	dt_inicio_dieta_w	:= dt_inicio_prescr_w;

	if (dt_inicio_prescr_w	>= dt_prim_setor_w) then
		dt_fim_dieta_w	:= dt_prim_setor_w + 1;
	else
		dt_fim_dieta_w	:= dt_prim_setor_w;
	end if;	
	
	dt_rep_pt2_w	:= null;

elsif (ie_validade_p	= 'S') then

	if (dt_inicio_prescr_w	>= dt_prim_setor_w) then
		dt_inicio_dieta_w	:= dt_prim_setor_w + 1;
	else
		dt_inicio_dieta_w	:= dt_prim_setor_w;
	end if;	
	
	dt_fim_dieta_w	:= dt_validade_prescr_w;
	dt_rep_pt_w	:= null;
	
end if;

open C01;
loop
fetch C01 into	
	nr_seq_consistencia_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	cd_dieta_ww := null;
	
	select	max(ds_consistencia)
	into STRICT	ds_consistencia_w
	from	consistencia_dieta
	where	nr_sequencia = nr_seq_consistencia_w;
	
	open C02;
	loop
	fetch C02 into	
		cd_dieta_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
	
		ie_identica_w	:= 'S';
		cont_w		:= 0;
		ds_lista_composicao_w := null;
		open C04;
		loop
		fetch C04 into	
			nr_seq_composicao_w,
			ds_composicao_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
		
			if (coalesce(cd_dieta_ww::text, '') = '') then
			
				if (ds_lista_composicao_w IS NOT NULL AND ds_lista_composicao_w::text <> '') then
					ds_lista_composicao_w := substr(ds_lista_composicao_w || chr(13),1,255);
				end if;
				
				ds_lista_composicao_w := substr(ds_lista_composicao_w|| ds_composicao_w,1,255);
			
				select	count(*)
				into STRICT	cont_w
				from	w_dieta_consistencia a
				where	(a.nr_seq_composicao IS NOT NULL AND a.nr_seq_composicao::text <> '')
				and	a.nm_usuario		= nm_usuario_p
				and	a.nr_seq_consistencia   = nr_seq_consistencia_w
				and	a.nr_prescricao		= nr_prescricao_p
				and	not exists (	SELECT	1
							from	dieta_composicao x
							where	a.nr_seq_composicao	= x.nr_seq_composicao
							and	x.cd_dieta		= cd_dieta_w);

				if (cont_w > 0) then
					ie_identica_w	:= 'N';
					cd_dieta_ww	:= null;
				end if;
				
				select	count(*)
				into STRICT	cont_w
				from	dieta_composicao a
				where	a.cd_dieta		= cd_dieta_w
				and	not exists (	SELECT	1
							from	w_dieta_consistencia x
							where	x.nr_seq_composicao	= a.nr_seq_composicao
							and	(x.nr_seq_composicao IS NOT NULL AND x.nr_seq_composicao::text <> '')
							and	x.nm_usuario		= nm_usuario_p
							and	x.nr_prescricao		= nr_prescricao_p
							and	x.nr_seq_consistencia   = nr_seq_consistencia_w);

				if (cont_w > 0) then
					ie_identica_w	:= 'N';
					cd_dieta_ww	:= null;
				end if;
				
				if (ie_identica_w = 'S') then
					select	max(cd_dieta)
					into STRICT	cd_dieta_ww
					from	dieta_composicao a
					where	a.cd_dieta		= cd_dieta_w
					and	a.nr_seq_composicao	= nr_seq_composicao_w;
					
					if (coalesce(cd_dieta_ww::text, '') = '') or (cd_dieta_ww = '') then
						ie_identica_w	:= 'N';
					end if;
				end if;
			end if;
		end loop;
		close C04;
	end loop;
	close C02;
	ie_inseriu_w := 'N';
	
	select	max(nr_seq_composicao)
	into STRICT	nr_seq_composicao_ww
	from	w_dieta_consistencia
	where	nr_prescricao	= nr_prescricao_p
	and		nm_usuario	= nm_usuario_p;
	
	if (coalesce(nr_seq_composicao_ww::text, '') = '') then
		open C03;
		loop
		fetch C03 into	
			cd_dieta_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
		
			ie_identica_w	:= 'S';
			cont_w		:= 0;
			ds_lista_composicao_w := null;
			open C04;
			loop
			fetch C04 into	
				nr_seq_composicao_w,
				ds_composicao_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
			
				if (coalesce(cd_dieta_ww::text, '') = '') then
				
					if (ds_lista_composicao_w IS NOT NULL AND ds_lista_composicao_w::text <> '') then
						ds_lista_composicao_w := substr(ds_lista_composicao_w || chr(13),1,255);
					end if;
					
					ds_lista_composicao_w := substr(ds_lista_composicao_w|| ds_composicao_w,1,255);
				
					select	count(*)
					into STRICT	cont_w
					from	w_dieta_consistencia a
					where	(a.nr_seq_composicao IS NOT NULL AND a.nr_seq_composicao::text <> '')
					and	a.nm_usuario		= nm_usuario_p
					and	a.nr_seq_consistencia   = nr_seq_consistencia_w
					and	a.nr_prescricao		= nr_prescricao_p
					and	not exists (	SELECT	1
								from	dieta_composicao x
								where	a.nr_seq_composicao	= x.nr_seq_composicao
								and	x.cd_dieta		= cd_dieta_w);

					if (cont_w > 0) then
						ie_identica_w	:= 'N';
						cd_dieta_ww	:= null;
					end if;
					
					select	count(*)
					into STRICT	cont_w
					from	dieta_composicao a
					where	a.cd_dieta		= cd_dieta_w
					and	not exists (	SELECT	1
								from	w_dieta_consistencia x
								where	x.nr_seq_composicao	= a.nr_seq_composicao
								and	(x.nr_seq_composicao IS NOT NULL AND x.nr_seq_composicao::text <> '')
								and	x.nm_usuario		= nm_usuario_p
								and	x.nr_prescricao		= nr_prescricao_p
								and	x.nr_seq_consistencia   = nr_seq_consistencia_w);

					if (cont_w > 0) then
						ie_identica_w	:= 'N';
						cd_dieta_ww	:= null;
					end if;
					
					if (ie_identica_w = 'S') then
						select	max(cd_dieta)
						into STRICT	cd_dieta_ww
						from	dieta_composicao a
						where	a.cd_dieta		= cd_dieta_w
						and	a.nr_seq_composicao	= nr_seq_composicao_w;
						
						if (coalesce(cd_dieta_ww::text, '') = '') or (cd_dieta_ww = '') then
							ie_identica_w	:= 'N';
						end if;
					end if;
				end if;
			end loop;
			close C04;
		end loop;
		close C03;
		ie_inseriu_w := 'N';
	end if;
	
	if	(((cd_dieta_ww IS NOT NULL AND cd_dieta_ww::text <> '') or (cd_dieta_ww <> '')) or (coalesce(nr_seq_composicao_ww::text, '') = '')) then
		
		select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_seq_dieta_w
		from	prescr_dieta
		where	nr_prescricao	= nr_prescricao_p;

		select	nextval('prescr_dieta_seq')
		into STRICT	nr_seq_interno_w
		;
		
		select	max(dt_inicio_prescr),
				max(nr_horas_validade),
				max(dt_validade_prescr),
				max(nr_atendimento)
		into STRICT	dt_inicio_prescr_w,
				nr_horas_validade_w,
				dt_validade_prescr_w,
				nr_atendimento_w
		from	prescr_medica
		where	nr_prescricao	= nr_prescricao_p;
		
		select	count(*)
		into STRICT	cont_w
		from	prescr_dieta a,
			prescr_medica b
		where	obter_se_prescr_vig_adep(b.dt_inicio_prescr, b.dt_validade_prescr, dt_inicio_prescr_w, dt_validade_prescr_w) = 'S'
		and	a.nr_prescricao		= b.nr_prescricao
		and	coalesce(b.dt_suspensao::text, '') = ''
		and	coalesce(a.dt_suspensao::text, '') = ''
		and	(((coalesce(b.dt_liberacao,b.dt_liberacao_medico) IS NOT NULL AND (coalesce(b.dt_liberacao,b.dt_liberacao_medico))::text <> '')) or (b.nr_prescricao	= nr_prescricao_p))
		and	b.nr_atendimento	= nr_atendimento_w
		and	((vl_param_1012_w = 'N') or
			 (vl_param_1012_w = 'S' AND b.nr_prescricao	= nr_prescricao_p));
		
		if (vl_param_298_w > 0) and
			((cont_w = vl_param_298_w) or
			 ((cont_w + 1) > vl_param_298_w)) then
			if (cd_funcao_w	= 950) then
				ds_tempo_w	:= lower(wheb_mensagem_pck.get_texto(307506)); -- plano
			elsif (vl_param_1012_w	= 'N') then
				ds_tempo_w	:= lower(wheb_mensagem_pck.get_texto(307505)); -- período de prescrições
			else
				ds_tempo_w	:= lower(wheb_mensagem_pck.get_texto(307503)); -- prescrição
			end if;				
			--O número máximo de dietas por #@DS_TEMPO#@ é #@QT_DIETAS#@!
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(178044, 'DS_TEMPO='|| ds_tempo_w ||';QT_DIETAS=' || vl_param_298_w);
		end if;
		
		
		cont_w := Obter_qt_dieta_prescr(nr_Prescricao_p);
	
		if (vl_param_510_w > 0) and (coalesce(cont_w,0) >= vl_param_510_w) then
			--A quantidade máxima de registro permitida é #@QT_DIETAS#@!
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(178060, 'QT_DIETAS=' || vl_param_510_w);
		end if;

		--Verificar se o horário está dentro da vigência da dieta
		open C06;
		loop
		fetch C06 into	
			dt_horario_servico_w,
			nr_seq_rep_servico_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin
			if	not(dt_horario_servico_w	between dt_inicio_dieta_w and dt_fim_dieta_w) then

				delete	FROM rep_servico
				where	nr_sequencia = nr_seq_rep_servico_w;

			end if;			
			end;
		end loop;
		close C06;

		ds_horarios_servico_w 		:= '';

		--Ordenar os horários para a geração do DS_HORARIOS
		open C07;
		loop
		fetch C07 into	
			ds_horario_serv_w,
			dt_horario_servico_w;
		EXIT WHEN NOT FOUND; /* apply on C07 */
			begin
			if (coalesce(ds_horarios_servico_w::text, '') = '') then
				ds_horarios_servico_w := ds_horario_serv_w;
			else
				ds_horarios_servico_w := substr(ds_horarios_servico_w||' '||ds_horario_serv_w,1,255);
			end if;			
			end;
		end loop;
		close C07;
		
		hr_prim_horario_w	:= '';
		
		if (coalesce(ie_agora_p,'N')	= 'S') then
		
			select	to_char(coalesce(max(a.dt_fim + 1/1440),clock_timestamp()),'hh24:mi')
			into STRICT	ds_horarios_w
			from	rep_jejum a,
					prescr_medica b
			where	a.nr_prescricao	= b.nr_prescricao
			and	coalesce(b.dt_suspensao::text, '') = ''
			and	coalesce(a.ie_suspenso,'N')	<> 'S'
			and	dt_fim	> clock_timestamp()
			and	b.nr_atendimento	= nr_atendimento_w;

		elsif (ds_horarios_servico_w IS NOT NULL AND ds_horarios_servico_w::text <> '') then
			
			ds_horarios_w	:= ds_horarios_servico_w;

		elsif (cd_intervalo_p IS NOT NULL AND cd_intervalo_p::text <> '') then
		
			hr_prim_horario_w	:= substr(obter_primeiro_horario(cd_intervalo_p, nr_prescricao_p, null,null),1,5);
			
			dt_prim_hor_dieta_w	:= dt_inicio_prescr_w;
			if (hr_prim_horario_w IS NOT NULL AND hr_prim_horario_w::text <> '') then
				dt_prim_hor_dieta_w	:= to_date(to_char(dt_prim_hor_dieta_w,'dd/mm/yyyy ') || hr_prim_horario_w,'dd/mm/yyyy hh24:mi');
			end if;
			
			SELECT * FROM Calcular_Horario_Prescricao(	nr_prescricao_p, cd_intervalo_p, dt_inicio_prescr_w, dt_prim_hor_dieta_w, nr_horas_validade_w, null, null, null, nr_intervalo_w, ds_horarios_w, ds_horarios2_w, 'N', null) INTO STRICT nr_intervalo_w, ds_horarios_w, ds_horarios2_w;
			ds_horarios_w	:= ds_horarios_w||ds_horarios2_w;	
			
			Select 	max(ie_operacao)
			into STRICT	ie_operacao_w
			from	intervalo_prescricao
			where	cd_intervalo = cd_intervalo_p;
			
			if (ie_operacao_w <> 'F') and (ds_horarios_w IS NOT NULL AND ds_horarios_w::text <> '') then
				ds_horarios_w	:= eliminar_horarios_vigencia(ds_horarios_w, cd_intervalo_p, dt_prim_hor_dieta_w, dt_inicio_prescr_w, 0, 0, nr_prescricao_p);
			end if;
		end if;
		
		if ((coalesce(cd_dieta_ww,cd_dieta_w) IS NOT NULL AND (coalesce(cd_dieta_ww,cd_dieta_w))::text <> '')) then
		
			insert into prescr_dieta(
							nr_sequencia,
							nr_prescricao,
							nr_seq_interno,
							cd_dieta,
							cd_intervalo,
							ie_urgencia,
							ie_dose_espec_agora,
							ds_horarios,
							dt_atualizacao,
							nm_usuario,
							hr_dose_especial,
							dt_rep_pt,
							dt_rep_pt2,
							qt_parametro,
							hr_prim_horario
					) values (
							nr_seq_dieta_w,
							nr_prescricao_p,
							nr_seq_interno_w,
							coalesce(cd_dieta_ww,cd_dieta_w),
							cd_intervalo_p,
							coalesce(ie_agora_p,'N'),
							ie_dose_esp_p,
							ds_horarios_w,
							clock_timestamp(),
							nm_usuario_p,
							hr_dose_especial_p,
							dt_rep_pt_w,
							dt_rep_pt2_w,
							qt_parametro_p,
							hr_prim_horario_w);
			
			ds_erro_w := Consistir_prescr_dieta(nr_prescricao_p, nr_seq_dieta_w, cd_estabelecimento_w, wheb_usuario_pck.get_cd_perfil, nm_usuario_p, ds_erro_w); 	
			CALL gerar_suplementos_dieta(nr_prescricao_p,nr_seq_dieta_w,nm_usuario_p,cd_perfil_w);
						
		end if;
		CALL gerar_servico_dieta(nr_prescricao_p, nr_seq_dieta_w, nr_seq_consistencia_w, null, 'A', null, nm_usuario_p,null);

		ie_inseriu_w := 'S';
					
		if (vl_param_530_w = 'S') then
			CALL Gerar_prescr_dieta_hor_sem_lib(nr_prescricao_p,nr_seq_dieta_w,cd_perfil_w,'N','','N',nm_usuario_p);
		end if;
	end if;
end loop;
close C01;

ds_erro_p := null;

if (ie_inseriu_w = 'N') then
	ds_erro_p := substr(wheb_mensagem_pck.get_texto(277204, 'DS_CONSISTENCIA_P=' || ds_consistencia_w || ';DS_LISTA_COMPOSICAO_P=' || ds_lista_composicao_w),1,255);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_prescr_dieta_composicao ( nr_prescricao_p bigint, nm_usuario_p text, cd_intervalo_p text default null, ie_agora_p text DEFAULT NULL, ie_dose_esp_p text DEFAULT NULL, hr_dose_especial_p text DEFAULT NULL, ie_validade_p text DEFAULT NULL, qt_parametro_p bigint DEFAULT NULL, ds_erro_p INOUT text DEFAULT NULL) FROM PUBLIC;

