-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_50 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Aplicar validação referente a Solicitação de Liberação de Mat/Med
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
A validação referente ao valor apresentado em relação ao valor liberação na solicitação de mat/med, só será
aplicado se existir exigência de liberação e o valor liberado for diferente do apresentado
------------------------------------------------------------------------------------------------------------------
dlehmkuhl OS 688483 - 14/04/2014 -

Alteração:	Modificada a forma de trabalho em relação a atualização dos campos de controle
	que basicamente decidem se a ocorrência será ou não gerada. Foi feita também a
	substituição da rotina obterX_seX_geraX.

Motivo:	Necessário realizar essas alterações para corrigir bugs principalmente no que se
	refere a questão de aplicação de filtros (passo anterior ao da validação). Também
	tivemos um foco especial em performance, visto que a mesma precisou ser melhorada
	para não inviabilizar a nova solicitação que diz que a exceção deve verificar todo
	o atendimento.
------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_select_w		varchar(6000);
ds_restricao_regra_w	varchar(2000);
ds_campos_regra_w	varchar(4000);

var_cur_w 		integer;
var_exec_w		integer;
var_retorno_w		integer;
qt_cnt_w		integer;

dados_tb_selecao_w	pls_tipos_ocor_pck.dados_table_selecao_ocor;

-- Informações da validação de restrição do material
C01 CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_validacao,
		a.ie_forma_validacao,
		a.ie_forma_validacao_vl_apres,
		a.ie_prestador_fornecedor
	from	pls_oc_cta_val_liber_mat a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

BEGIN

if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	-- Obter a quantidade de registros que devem ser enviados para o banco em cada acesso ao SQL.
	qt_cnt_w	:= pls_util_cta_pck.qt_registro_transacao_w;

	-- inicializar as tables como sendo vazias.
	pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_selecao_w);

	--Percorre a lista da seleção, criando select conforme restrições definidas na regra
	for	r_C01_w in C01(dados_regra_p.nr_sequencia) loop

		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);

		-- Deve existir uma regra de restrição para o material cadastrada e que exija a autorização especial para gerar a ocorrência.
		ds_restricao_regra_w :=		'and	exists	(	select	1 ' || pls_util_pck.enter_w ||
						'			from	pls_material_restricao regra ' || pls_util_pck.enter_w ||
						'			where	regra.nr_seq_material = mat.nr_seq_material ' || pls_util_pck.enter_w ||
						'			and	regra.ie_autorizacao = ''S'' ';

		-- Durante a importação olhar os campos imp, caso contrário olhar os campos quentes.
		-- A primeira retrição que será montada é a verificação das retrições do material vigentes na data do atendimento realizado.
		if (dados_regra_p.ie_evento = 'IMP') then

			ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w ||
						'			and	((regra.dt_inicio_vigencia <= mat.dt_atendimento_imp) and ' || pls_util_pck.enter_w ||
						'				(regra.dt_fim_vigencia is null or ' || pls_util_pck.enter_w ||
						'				regra.dt_fim_vigencia >= mat.dt_atendimento_imp)) ';
		else
			ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w ||
						'			and	((regra.dt_inicio_vigencia <= mat.dt_atendimento) and ' || pls_util_pck.enter_w ||
						'				(regra.dt_fim_vigencia is null or ' || pls_util_pck.enter_w ||
						'				regra.dt_fim_vigencia >= mat.dt_atendimento)) ';
		end if;

		-- Fechar o parênteses do exists
		ds_restricao_regra_w := ds_restricao_regra_w || ')';


		-- Verificar a liberação do material especial.
		ds_campos_regra_w :=	'(	select	max(solic.vl_unit_aprovado) vl_aprovado ' || pls_util_pck.enter_w ||
					'	from	pls_solic_lib_mat_med solic ' || pls_util_pck.enter_w ||
					'	where	solic.nr_seq_material = mat.nr_seq_material ' || pls_util_pck.enter_w ||
					'	and	solic.nr_seq_segurado = mat.nr_seq_segurado ' || pls_util_pck.enter_w ||
					'	and	solic.nr_seq_guia = mat.nr_seq_guia ' || pls_util_pck.enter_w ||
					'	and	solic.ie_status = ''3'' ) ';

		-- Verificar a liberação do material especial.
		--irá verificar a incidência de prestador fornecedor
		if (r_c01_w.ie_prestador_fornecedor = 'S') then
					ds_restricao_regra_w :=	ds_restricao_regra_w || pls_util_pck.enter_w ||
						'and	( not exists (	select	1 ' || pls_util_pck.enter_w ||
						'			from	pls_solic_lib_mat_med solic ' || pls_util_pck.enter_w ||
						'			where	solic.nr_seq_material = mat.nr_seq_material ' || pls_util_pck.enter_w ||
						'			and	solic.nr_seq_segurado = mat.nr_seq_segurado ' || pls_util_pck.enter_w ||
						'			and	solic.nr_seq_guia = mat.nr_seq_guia ' || pls_util_pck.enter_w ||
						'			and	solic.ie_status = ''3''  ';



			--Verificar a forma de consistência do valor, se verificar quando liberado ou tem que bater o valor também.
			-- Liberação
			if ( r_C01_w.ie_forma_validacao = 'L' ) then

				-- Não há liberação.
				null;
			-- Valor.
			elsif ( r_C01_w.ie_forma_validacao = 'V' ) then

				--Restrição aplicada na validação do valor, comparando se o valor apresentado pelo prestador é o mesmo liberado na solicitação de mat/med
				case(r_C01_w.ie_forma_validacao_vl_apres)
				-- Igual,
				-- Na verdade gera ocorrência quando é diferente por causa do NOT EXISTS
				when 'IG' then ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w ||
						'and	solic.vl_unit_aprovado = mat.vl_material_imp ';
				-- Maior
				when 'MA' then ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w ||
						'and	solic.vl_unit_aprovado >= mat.vl_material_imp ';
				-- Menor
				when 'ME' then ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w ||
						'and	solic.vl_unit_aprovado <= mat.vl_material_imp ';
				end case;

			end if;

			ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w || ') or ( ';

			ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w || ' exists (	select	1 ' || pls_util_pck.enter_w ||
						'			from	pls_solic_lib_mat_med solic ' || pls_util_pck.enter_w ||
						'			where	solic.nr_seq_material = mat.nr_seq_material ' || pls_util_pck.enter_w ||
						'			and	solic.nr_seq_segurado = mat.nr_seq_segurado ' || pls_util_pck.enter_w ||
						'			and	solic.nr_seq_guia = mat.nr_seq_guia ' || pls_util_pck.enter_w ||
						'			and	solic.nr_seq_prest_fornec  is not null ' || pls_util_pck.enter_w ||
						'			and	solic.ie_status = ''3'' )   '|| pls_util_pck.enter_w ||
						'			and 	mat.nr_seq_prest_fornec     is not null)) ';

		else
			ds_restricao_regra_w :=	ds_restricao_regra_w || pls_util_pck.enter_w ||
						'and	not exists (	select	1 ' || pls_util_pck.enter_w ||
						'			from	pls_solic_lib_mat_med solic ' || pls_util_pck.enter_w ||
						'			where	solic.nr_seq_material = mat.nr_seq_material ' || pls_util_pck.enter_w ||
						'			and	solic.nr_seq_segurado = mat.nr_seq_segurado ' || pls_util_pck.enter_w ||
						'			and	solic.nr_seq_guia = mat.nr_seq_guia ' || pls_util_pck.enter_w ||
						'			and	solic.ie_status = ''3''  ';


			--Verificar a forma de consistência do valor, se verificar quando liberado ou tem que bater o valor também.
			-- Liberação
			if ( r_C01_w.ie_forma_validacao = 'L' ) then

				-- Não há liberação.
				null;
			-- Valor.
			elsif ( r_C01_w.ie_forma_validacao = 'V' ) then

				--Restrição aplicada na validação do valor, comparando se o valor apresentado pelo prestador é o mesmo liberado na solicitação de mat/med
				case(r_C01_w.ie_forma_validacao_vl_apres)
				-- Igual,
				-- Na verdade gera ocorrência quando é diferente por causa do NOT EXISTS
				when 'IG' then ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w ||
						'and	solic.vl_unit_aprovado = mat.vl_material_imp ';
				-- Maior
				when 'MA' then ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w ||
						'and	solic.vl_unit_aprovado >= mat.vl_material_imp ';
				-- Menor
				when 'ME' then ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w ||
						'and	solic.vl_unit_aprovado <= mat.vl_material_imp ';
				end case;

			end if;

			ds_restricao_regra_w := ds_restricao_regra_w || pls_util_pck.enter_w || ')';
		end if;
		-- Montar o select utilizando as restrições informadas na regra.
		ds_select_w :=	'select	sel.nr_sequencia nr_seq_selecao, ' || pls_util_pck.enter_w ||
				'	:ie_valido ie_valido, ' || pls_util_pck.enter_w ||
				'	''Este material necessita de uma autorização especial cedida pela operadora.'' || chr(13) || chr(10) || ' || pls_util_pck.enter_w ||
				'	''Se a solicitação já está aprovada, verifique se os valores apresentados estão corretos: '' ||  chr(13) || chr(10) || ' || pls_util_pck.enter_w ||
				'	''Vl autorizado: '' || ' || ds_campos_regra_w || ' || '' | '' || ''Vl apresentado: '' || mat.vl_material_imp ||  chr(13) || chr(10) || ' || pls_util_pck.enter_w ||
				'	''Verifique ainda se não existe a incidência de prestador fornecedor no material e se a operadora permite esta informação '' '|| pls_util_pck.enter_w ||
 				'from	pls_oc_cta_selecao_ocor_v sel, ' || pls_util_pck.enter_w ||
				'	pls_conta_mat_ocor_v mat ' || pls_util_pck.enter_w ||
				'where	sel.nr_id_transacao = :nr_id_transacao ' || pls_util_pck.enter_w ||
				'and	sel.ie_valido = ''S'' ' || pls_util_pck.enter_w ||
				'and	sel.ie_tipo_registro = ''M'' ' || pls_util_pck.enter_w ||
				'and	mat.nr_sequencia = sel.nr_seq_conta_mat ' || pls_util_pck.enter_w ||
				ds_restricao_regra_w;

		-- Abrir um novo cursor
		var_cur_w := dbms_sql.open_cursor;
		begin
			-- Criar o cursor
			dbms_sql.parse(var_cur_w, ds_select_w, 1);

			dbms_sql.bind_variable(var_cur_w, ':nr_id_transacao', nr_id_transacao_p);
			dbms_sql.bind_variable(var_cur_w, ':ie_valido', 'S');

			-- Executar select  dinamico
			dbms_sql.define_array(var_cur_w, 1, dados_tb_selecao_w.nr_seq_selecao, qt_cnt_w, 1);
			dbms_sql.define_array(var_cur_w, 2, dados_tb_selecao_w.ie_valido, qt_cnt_w, 1);
			dbms_sql.define_array(var_cur_w, 3, dados_tb_selecao_w.ds_observacao, qt_cnt_w, 1);

			var_exec_w := dbms_sql.execute(var_cur_w);
			loop
				var_retorno_w := dbms_sql.fetch_rows(var_cur_w);

				-- Inicializar as tabelas para que o mesmo registro não seja processado mais de uma vez.
				pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_selecao_w);

				-- Pegar os dados do SQL dinamico
				dbms_sql.column_value(var_cur_w, 1, dados_tb_selecao_w.nr_seq_selecao);
				dbms_sql.column_value(var_cur_w, 2, dados_tb_selecao_w.ie_valido);
				dbms_sql.column_value(var_cur_w, 3, dados_tb_selecao_w.ds_observacao);

				-- Gravar na tabela de seleção os materiais selecionados
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(
						dados_tb_selecao_w.nr_seq_selecao, dados_tb_selecao_w.ds_seqs_selecao,
						'SEQ', dados_tb_selecao_w.ds_observacao, dados_tb_selecao_w.ie_valido,
						nm_usuario_p);

				-- Quando foi efetuado um fetch com um número diferente do padrão para transação então significa que acabou os registros e o processo será abortado.
				exit when var_retorno_w != qt_cnt_w;
			end loop; -- Contas filtradas
			dbms_sql.close_cursor(var_cur_w);
		exception
		when others then

			-- Fechar os cursores que continuam abertos, os cursores que utilizam FOR - LOOP não necessitam serem fechados, serão fechados automaticamente.
			if (dbms_sql.is_open(var_cur_w)) then

				dbms_sql.close_cursor(var_cur_w);
			end if;
			-- Insere o log na tabela e aborta a operação
			CALL pls_tipos_ocor_pck.trata_erro_sql_dinamico(dados_regra_p ,ds_select_w , nr_id_transacao_p, nm_usuario_p);
		end;

		-- seta os registros que serão válidos ou inválidos após o processamento
		CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
	end loop; -- C01
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_50 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

