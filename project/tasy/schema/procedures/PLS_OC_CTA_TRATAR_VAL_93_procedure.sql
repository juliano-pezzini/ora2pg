-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_93 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE



cd_pessoa_fisica_w	pessoa_fisica.cd_pessoa_fisica%type;
qt_idade_meses_w	integer;
qt_idade_anos_w		integer;
dt_nascimento_w		pessoa_fisica.dt_nascimento%type;
qt_idade_dia_mes_w	integer;
i			integer;
nr_seq_selecao_w	dbms_sql.number_table;
ie_valido_w		dbms_sql.varchar2_table;
ds_observacao_w		dbms_sql.varchar2_table;
ie_gera_ocorrencia_w	pls_oc_cta_selecao_ocor_v.ie_valido%type;
qt_executada_w		integer;
dt_inicio_w		timestamp;
dt_fim_w		timestamp;
qt_mes_ini_regra_w	integer;
qt_mes_fim_regra_w	integer;

c01 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_selecao,
		b.nr_sequencia nr_seq_conta,
		b.nr_seq_segurado,
		c.dt_procedimento,
		c.nr_sequencia nr_seq_conta_proc,
		CASE WHEN dados_regra_p.ie_evento='IMP' THEN  c.cd_procedimento_imp  ELSE c.cd_procedimento END  cd_procedimento,
		c.ie_origem_proced
	from	pls_oc_cta_selecao_ocor_v a,
		pls_conta_ocor_v b,
		pls_conta_proc_ocor_v c
	where	a.nr_id_transacao 	= nr_id_transacao_p
	and	a.ie_valido		= 'S'
	and	a.ie_tipo_registro	= 'P'
	and	b.nr_sequencia		= a.nr_seq_conta
	and	c.nr_seq_conta		= a.nr_seq_conta
	and	c.nr_sequencia		= a.nr_seq_conta_proc;

c02 CURSOR FOR
	SELECT 	qt_ano_final,
		qt_ano_inicial,
		qt_dia_final,
		qt_dia_inicial,
		qt_liberado,
		qt_mes_final,
		qt_mes_inicial
	from	pls_oc_cta_val_idade
	where	nr_seq_oc_cta_comb = dados_regra_p.nr_sequencia;


BEGIN
-- Deve existir a informação da regra e da transação para que seja possível executar a validação
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') and (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '') then
	for r_c02_w in c02 loop
		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);
		-- Incializar as listas para cada regra.
		nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;
		ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
		ds_observacao_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
		-- Iniciar o índice para preenchimento da tabela.
		i := 0;

		for r_c01_w in c01 loop
			qt_idade_meses_w 	:= -1; --pode ter na regra meses começando com zero
			qt_idade_anos_w  	:= -1; --pode ter na regras anos começando com zero
			qt_idade_dia_mes_w	:= -1; --pode começar com zero
			dt_nascimento_w 	:= null;

			ie_gera_ocorrencia_w := 'N';
			-- Inicializar os valores que serão atualizados na tabela de seleção.
			nr_seq_selecao_w(i) := r_C01_w.nr_seq_selecao;
			ds_observacao_w(i)  := null;
			qt_executada_w	    := 0;

			if (r_c01_w.nr_seq_segurado is  not null) then
				select	coalesce(obter_idade(a.dt_nascimento, r_C01_w.dt_procedimento, 'A'), -1),
					coalesce(obter_idade(a.dt_nascimento, r_C01_w.dt_procedimento, 'M'), -1),
					coalesce(obter_idade(a.dt_nascimento, r_C01_w.dt_procedimento, 'DI'), -1),
					a.dt_nascimento
				into STRICT	qt_idade_anos_w,
					qt_idade_meses_w,
					qt_idade_dia_mes_w,
					dt_nascimento_w
				from	pessoa_fisica a,
					pls_segurado b
				where	b.nr_sequencia = r_c01_w.nr_seq_segurado
				and	a.cd_pessoa_fisica = b.cd_pessoa_fisica;
			end if;

			-- Obtém a quantidade de meses juntando os meses e o ano
			qt_mes_ini_regra_w := r_c02_w.qt_ano_inicial * 12 + r_c02_w.qt_mes_inicial;
			qt_mes_fim_regra_w := r_c02_w.qt_ano_final * 12 + r_c02_w.qt_mes_final;

			-- Adiciona os meses na variável que irá restringir a contagem de procedimentos realizados
			dt_inicio_w := add_months(dt_nascimento_w,qt_mes_ini_regra_w);
			dt_fim_w := add_months(dt_nascimento_w,qt_mes_fim_regra_w);

			-- Adiciona os dias na variável que irá restringir a contagem de procedimentos realziados
			dt_inicio_w := to_date(to_char((dt_inicio_w + r_c02_w.qt_dia_inicial),'dd/mm/yyyy'),'dd/mm/yyyy');
			dt_fim_w := to_date(to_char((dt_fim_w + r_c02_w.qt_dia_final),'dd/mm/yyyy'),'dd/mm/yyyy');

			--verifica a quantidade de procedimento executaos para este segurado
			select	sum(qt_procedimento_imp)
			into STRICT	qt_executada_w
			from	pls_conta a,
				pls_conta_proc b
			where	a.nr_sequencia			= b.nr_seq_conta
			and	b.cd_procedimento 		= r_c01_w.cd_procedimento
			and	b.ie_origem_proced 		= r_c01_w.ie_origem_proced
			and	a.nr_seq_segurado 		= r_c01_w.nr_seq_segurado
			and	b.dt_procedimento between dt_inicio_w and dt_fim_w;

			--verifica se encontrou a idade do segurado para tratar as regras de idade
			if ( qt_idade_anos_w  	> -1 ) and ( qt_idade_meses_w 	> -1 ) and ( qt_idade_dia_mes_w	> -1 ) then

				--se a data em anos ou meses for maior do que a da regra exe: a regra o ano é 0 e o segurado ja tem 1 ou em meses na regra 1 nao e 6 meses e o segurado 1 e oito meses
				if (qt_idade_anos_w 	between r_c02_w.qt_ano_inicial and r_c02_w.qt_ano_final) and (qt_idade_meses_w   	between qt_mes_ini_regra_w and qt_mes_fim_regra_w) then

					if (qt_idade_meses_w = qt_mes_fim_regra_w) then

						if (qt_idade_dia_mes_w between r_c02_w.qt_dia_inicial and r_c02_w.qt_dia_final) then

							if (qt_executada_w > coalesce(r_c02_w.qt_liberado, 0))  then
								ie_gera_ocorrencia_w := 'S';
								ds_observacao_w(i) 	:= 'Quantidade de exucação supera a quantidade liberada para o período. Executado ' ||	qt_executada_w || ' liberado ' || r_c02_w.qt_liberado ||
												'Beneficiário acima da idade permitida.';
							end if;
						end if;
					else
						if (qt_executada_w > coalesce(r_c02_w.qt_liberado, 0))  then
							ie_gera_ocorrencia_w := 'S';
							ds_observacao_w(i) 	:= 'Quantidade de exucação supera a quantidade liberada para o período. Executado ' ||	qt_executada_w || ' liberado ' || r_c02_w.qt_liberado ||
											'Beneficiário acima da idade permitida.';
						end if;
					end if;
				end if;
			end if;

			-- Verificar se o registro atual é válido ou não conforme as parametrizações de regras e regras de exceção.
			ie_valido_w(i) := ie_gera_ocorrencia_w;

			-- Quando a quantidade de itens da lista tiver chegado ao máximo definido na PLS_CTA_CONSISTIR_PCK, então os registros são levados para
			-- o BD e gravados todos de uma vez, pela procedure GERENCIAL_SELECAO_VALIDACAO, que atualiza os registros conforme passado por
			-- parâmetro, o indice e as listas são reiniciados para carregar os novos registros e para que os registros atuais não sejam atualizados novamente em
			-- na próxima carga.
			if (i = pls_cta_consistir_pck.qt_registro_transacao_w) then

				-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
				-- conforme passado por parâmetro,
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
										'SEQ', ds_observacao_w, ie_valido_w, nm_usuario_p);

				-- Zerar o índice
				i := 0;

				-- Zerar as listas.
				ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
				nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;
			-- Enquanto os registros não tiverem atingido a carga para gravar na seleção incrementa o índice para armazenar os próximos registros.
			else
				i := i + 1;
			end if;

		end loop; --c01
		-- Quando tiver sobrado algo na lista irá gravar o que restou após a execução do loop.
		if (nr_seq_selecao_w.count > 0) then
			-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
			-- conforme passado por parâmetro,
			CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
									'SEQ', ds_observacao_w, ie_valido_w, nm_usuario_p);
		end if;

		-- seta os registros que serão válidos ou inválidos após o processamento
		CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
	end loop; --c02
end if;
--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_93 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

