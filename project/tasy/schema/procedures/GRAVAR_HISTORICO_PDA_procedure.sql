-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gravar_historico_pda ( nr_atendimento_p bigint, ie_processo_p text, ds_historico_p text, nr_cirurgia_p bigint default null, nr_seq_sala_cir_p bigint default null, nm_usuario_p text DEFAULT NULL) AS $body$
DECLARE

/* 
	valor do campo ie_processo_p 
	IP - Inclusão painel 
	IE - Impressão de etiqueta 
	RE - reimpressão de etiqueta 
	CA - checagem do paciente cirúrgico bipando o atendimento 
	CP - checagem do paciente cirúrgico bipando a pulseira 
	CC - checagem do paciente cirúrgico bipando a sala cirúrgica 
*/
 
qt_atendimento_w	bigint;
nr_cirurgia_ww		bigint;
nr_cirurgia_w		bigint;
dt_inicio_real_w	timestamp;
ds_historico_w		varchar(255);	
ds_sala_painel_w	varchar(255);	
 
c01 CURSOR FOR 
	SELECT 	b.nr_cirurgia, 
			b.dt_inicio_real 
	from  	agenda_paciente a, 
			cirurgia b, 
			sala_cirurgia c 
	where 	a.nr_cirurgia   = b.nr_cirurgia 
	and		a.nr_seq_sala_cir = c.nr_sequencia 
	and  	c.nr_seq_interno = nr_seq_sala_cir_p 
	and  	a.nr_atendimento = nr_atendimento_p 
	and  	a.ie_status_agenda not in ('L','C','B') 
	and		coalesce(b.dt_termino::text, '') = '' 
	order by coalesce(b.dt_inicio_real,b.dt_inicio_prevista) desc;

/* 
O cursor 02 e 03 são para casos onde a sala bipada está errada, não encontrando a cirurgia 
O cursor 02 encontra a cirurgia que está iniciada e não finalizada. No HSL somente irá ter uma cirurgia iniciada e não finalizada para o mesmo atendimento. 
O cursor 03 ele faz a pesquisa pelo log procurando a cirurgia que não há registro de log de checagem da sala e há registro de sala no painel 
*/
 
 
c02 CURSOR FOR	 
	SELECT	a.nr_cirurgia 
	into STRICT	nr_cirurgia_ww		 
	from	cirurgia a 
	where	a.nr_atendimento = nr_atendimento_p 
	and		coalesce(a.dt_termino::text, '') = '' 
	and		coalesce(a.dt_interrupcao::text, '') = '' 
	and		coalesce(a.dt_cancelamento::text, '') = '' 
	and		a.ie_status_cirurgia in (1,2) 
	order by coalesce(a.dt_inicio_real,a.dt_inicio_prevista) desc;

 
c03 CURSOR FOR	 
	SELECT	a.nr_cirurgia 
	into STRICT	nr_cirurgia_ww		 
	from	atend_hist_checagem_pda a 
	where	a.nr_atendimento = nr_atendimento_p 
	and	a.ie_processo 	 = 'IP' 
	and	not exists (	SELECT	1 
				from	atend_hist_checagem_pda b 
				where	b.ie_processo 	 = 'CC' 
				and	a.nr_cirurgia	 = b.nr_cirurgia) 
	order by a.dt_atualizacao_nrec;
	

BEGIN 
 
nr_cirurgia_ww := nr_cirurgia_p;
 
if (coalesce(nr_seq_sala_cir_p,0) > 0) then 
	open C01;
	loop 
	fetch C01 into	 
		nr_cirurgia_w, 
		dt_inicio_real_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		nr_cirurgia_ww := nr_cirurgia_w;
		end;
	end loop;
	close C01;
end if;
 
if (coalesce(nr_cirurgia_ww,0) = 0) then 
	open C02;
	loop 
	fetch C02 into	 
		nr_cirurgia_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		nr_cirurgia_ww := nr_cirurgia_w;
		end;
	end loop;
	close C02;
	if (coalesce(nr_cirurgia_ww,0) = 0) then 
		open C03;
		loop 
		fetch C03 into	 
			nr_cirurgia_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin 
			nr_cirurgia_ww := nr_cirurgia_w;
			end;
		end loop;
		close C03;
	end if;
end if;	
 
if	((ie_processo_p = 'ECC') or (ie_processo_p = 'CC')) then 
	SELECT	max(ds_sala_painel) 
	into STRICT	ds_sala_painel_w 
	FROM 	sala_cirurgia 
	where 	nr_seq_interno = nr_seq_sala_cir_p;
	if (ie_processo_p = 'ECC') then 
		-- 'Erro ao bipar a sala ' || ds_sala_painel_w 
		ds_historico_w := wheb_mensagem_pck.get_texto(472031,'DS_SALA=' || ds_sala_painel_w);
	else		 
		-- 'Bipado a sala = ' || ds_sala_painel_w; 
		ds_historico_w := wheb_mensagem_pck.get_texto(455978,'DS_SALA=' || ds_sala_painel_w);
	end if;	
end if;	
 
select	count(*) 
into STRICT	qt_atendimento_w 
from	atendimento_paciente 
where	nr_atendimento = nr_atendimento_p;
 
insert into atend_hist_checagem_pda( 
		nr_sequencia, 
		dt_atualizacao, 
		nm_usuario, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		nr_atendimento, 
		ie_processo, 
		ds_historico, 
		nr_cirurgia) 
SELECT	nextval('atend_hist_checagem_pda_seq'), 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		CASE WHEN qt_atendimento_w=0 THEN null  ELSE nr_atendimento_p END , 
		ie_processo_p, 
		coalesce(ds_historico_w,ds_historico_p), 
		CASE WHEN nr_cirurgia_ww=0 THEN null  ELSE nr_cirurgia_ww END
;
		 
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gravar_historico_pda ( nr_atendimento_p bigint, ie_processo_p text, ds_historico_p text, nr_cirurgia_p bigint default null, nr_seq_sala_cir_p bigint default null, nm_usuario_p text DEFAULT NULL) FROM PUBLIC;

