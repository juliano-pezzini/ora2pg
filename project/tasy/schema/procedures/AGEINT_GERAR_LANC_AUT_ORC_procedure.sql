-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_gerar_lanc_aut_orc (CD_ESTABELECIMENTO_P bigint, CD_CONVENIO_P bigint, CD_CATEGORIA_P text, DT_CONTA_P timestamp, CD_TIPO_ACOMODACAO_P bigint, CD_ITEM_P bigint, IE_ORIGEM_PROCED_P bigint, CD_MEDICO_P text, CD_FUNCAO_MEDICO_P bigint, QT_IDADE_P bigint, NR_SEQUENCIA_P bigint, NR_SEQ_EXAME_LAB_P bigint, NR_SEQ_PROC_INTERNO_P bigint, IE_TIPO_ATENDIMENTO_P bigint, CD_SETOR_ATENDIMENTO_P bigint, CD_USUARIO_CONVENIO_P text, CD_PLANO_P text, IE_CLINICA_P bigint, CD_EMPRESA_REF_P bigint, CD_CGC_FORNECEDOR_P text, cd_edicao_amb_p bigint, nr_seq_agend_item_p bigint, nm_usuario_p text, ie_sexo_p text) AS $body$
DECLARE


nr_seq_lanc_w			bigint;
qt_pontos_w			preco_amb.qt_pontuacao%type;
cd_material_w			bigint;
cd_procedimento_w		bigint;
qt_lancamento_w			bigint;
ie_origem_proced_w		bigint;
dt_ult_vigencia_w		timestamp;
cd_tab_preco_mat_w		smallint;
ie_origem_preco_w		smallint;
vl_material_w			double precision;
VL_PROCEDIMENTO_w		double precision;
VL_CUSTO_OPERACIONAL_w		double precision;
VL_ANESTESISTA_w		double precision;
VL_MEDICO_w			double precision;
VL_AUXILIARES_w			double precision;
VL_MATERIAIS_w			double precision;
VL_PTO_PROCEDIMENTO_w		double precision;
VL_PTO_CUSTO_OPERAC_w		double precision;
VL_PTO_ANESTESISTA_w		double precision;
VL_PTO_MEDICO_w			double precision;
VL_PTO_AUXILIARES_w		double precision;
VL_PTO_MATERIAIS_w		double precision;
QT_PORTE_ANESTESICO_w		smallint;
CD_EDICAO_AMB_w			integer;
ie_preco_informado_w		varchar(01);
ie_classificacao_w		varchar(1);
nr_seq_proc_interno_w		bigint;
nr_seq_exame_w			bigint;
ds_ret_w			bigint;
ds_erro_w			varchar(255);
ds_irrelevante_w		varchar(255);
ie_regra_w			integer;
ie_glosa_w			varchar(1);
nr_seq_regra_w			bigint;
vl_aux_w			double precision;
ds_aux_w			varchar(10);
		
ie_dispara_kit_w		varchar(1);
cd_kit_material_w		bigint;

qt_existe_w			bigint;

ie_resp_autor_w			varchar(10);
ie_autorizacao_w		varchar(3);

ie_tipo_convenio_w	smallint;
ie_edicao_w		varchar(1);
ie_pacote_w		varchar(1);
qt_item_edicao_w	bigint;
cd_edicao_ajuste_w	bigint;

cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_plano_w		varchar(10);
nr_seq_proc_interno_aux_w	bigint;
nr_seq_bras_preco_w		bigint;
nr_seq_mat_bras_w		bigint;
nr_seq_conv_bras_w		bigint;
ie_calc_glosa_atend_w	varchar(1);

cd_convenio_part_w	integer;
cd_categoria_part_w	varchar(10);
vl_procedimento_part_w	double precision;
ie_vl_particular_w	varchar(1);
nr_seq_conv_simpro_w	bigint;
nr_seq_mat_simpro_w	bigint;
nr_seq_simpro_preco_w	bigint;
nr_seq_ajuste_proc_w	bigint;
nr_seq_ajuste_mat_w	bigint;
pr_glosa_w				double precision;
vl_glosa_w				double precision;
ie_regra_arredondamento_tx_w	varchar(1):= 'N';
ie_tipo_rounded_w		varchar(1);
ie_regra_arred_IPE_w		varchar(1):= 'N';
IE_CALCULA_GLOSA_w			parametro_Agenda_integrada.ie_calcula_glosa%type;
ie_bloq_glosa_part_w	varchar(1);
ie_situacao_w  varchar(1);
ie_param_444_w               varchar(1) := '';
ie_excluir_valor             varchar(1) := 'N';

C01 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		cd_material,
		coalesce(qt_lancamento,1),
		nr_seq_proc_interno,
		nr_seq_exame
	from	regra_lanc_aut_pac
	where	nr_seq_regra = nr_seq_lanc_w
	and 	coalesce(ie_adic_orcamento,'N') = 'S'
	and	coalesce(cd_material::text, '') = '';


BEGIN
select	coalesce(max(IE_CALCULA_GLOSA),'N')
into STRICT	IE_CALCULA_GLOSA_w
from	parametro_Agenda_integrada
where	coalesce(cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento)	= wheb_usuario_pck.get_cd_estabelecimento;

nr_seq_exame_w	:= coalesce(NR_SEQ_EXAME_LAB_P,0);

ie_dispara_kit_w := coalesce(Obter_Valor_Param_Usuario(106, 9, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p),'N');

ie_calc_glosa_atend_w := obter_param_usuario(869, 262, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_calc_glosa_atend_w);
ie_vl_particular_w := obter_param_usuario(869, 331, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_vl_particular_w);

ie_bloq_glosa_part_w := obter_param_usuario(869, 187, obter_perfil_ativo, nm_usuario_p, 0, ie_bloq_glosa_part_w);
ie_param_444_w := obter_param_usuario(869, 444, obter_perfil_ativo, nm_usuario_p, 0, ie_param_444_w);


select 	max(ie_tipo_convenio)
into STRICT	ie_tipo_convenio_w
from	convenio
where	cd_convenio = cd_convenio_p;

select	coalesce(max(nr_sequencia), 0)
into STRICT	nr_seq_lanc_w
from	regra_lanc_automatico
where	cd_estabelecimento =  cd_estabelecimento_p
and	nr_seq_proc_interno =  nr_seq_proc_interno_p
and     coalesce(cd_convenio,cd_convenio_p)  = cd_convenio_p
and 	coalesce(cd_edicao_amb, coalesce(cd_edicao_amb_p,0)) = coalesce(cd_edicao_amb_p,0)
and	coalesce(nr_seq_exame, nr_seq_exame_w)	= nr_seq_exame_w
and	coalesce(ie_tipo_atendimento, coalesce(ie_tipo_atendimento_p, 0)) = coalesce(ie_tipo_atendimento_p,0);

OPEN C01;
LOOP
	FETCH C01 into
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_material_w,
		qt_lancamento_w,
		nr_seq_proc_interno_w,
		nr_seq_exame_w;	
	EXIT WHEN NOT FOUND; /* apply on c01 */
	
	IF 	ie_glosa_w = 'E' AND
		coalesce(ie_param_444_w,'N') = 'N' AND
		ie_tipo_convenio_w = '1' THEN
		ie_excluir_valor := 'S';
	END IF;
	
	begin	
	if not(coalesce(cd_material_w::text, '') = '') then		
		
		select	coalesce(max(ie_situacao),'A')
		into STRICT	ie_situacao_w
		from	material
		where	cd_material = cd_material_w;

		if (ie_situacao_w = 'I') then
			goto continue_loop;
        end if;

		SELECT * FROM Consiste_Plano_mat_proc(cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, cd_plano_p, cd_material_w, null, null, null, coalesce(ie_tipo_Atendimento_p,0), 0, 0, null, null, ds_aux_w, ds_aux_w, ie_regra_w, nr_seq_regra_w) INTO STRICT ds_aux_w, ds_aux_w, ie_regra_w, nr_seq_regra_w;
						
		SELECT * FROM obter_regra_Ajuste_mat(
					cd_estabelecimento_p, 		--cd_estabelecimento_p
					cd_convenio_p,                   --cd_convenio_p
					cd_categoria_p,                  --cd_categoria_p
					cd_material_w,                   --cd_material_p
					clock_timestamp(),                         --dt_vigencia_p
					null,                            --cd_tipo_acomodacao_p
					coalesce(ie_tipo_Atendimento_p,0),    --ie_tipo_atendimento_p
					null,                            --cd_setor_atendimento_p
					qt_idade_p,                      --qt_idade_p
					NULL,                            --nr_sequencia_p
					cd_plano_p,                      --cd_plano_p
					null,                            --cd_proc_referencia_p
					null,                            --ie_origem_proced_p
					null,                            --nr_seq_proc_interno_p
					clock_timestamp(),                         --dt_entrada_p
					vl_aux_w,                        --OUT tx_ajuste_p
					vl_aux_w,                        --OUT vl_negociado_p
					ds_aux_w,                        --OUT ie_preco_informado_p
					ie_glosa_w,                      --OUT ie_glosa_p
					vl_aux_w,                        --OUT tx_brasindice_pfb_p
					vl_aux_w,                        --OUT tx_brasindice_pmc_p
					vl_aux_w,                        --OUT tx_pmc_neg_p
					vl_aux_w,                        --OUT tx_pmc_pos_p
					vl_aux_w,                        --OUT tx_afaturar_p
					vl_aux_w,                        --OUT tx_simpro_pfb_p
					vl_aux_w,                        --OUT tx_simpro_pmc_p
					ds_aux_w,                        --OUT ie_origem_preco_p
					ds_aux_w,                        --OUT ie_precedencia_p
					vl_aux_w,                        --OUT pr_glosa_p
					vl_aux_w,                        --OUT vl_glosa_p
					vl_aux_w, 			--OUT cd_tabela_preco_p
					vl_aux_w,                        --OUT cd_motivo_exc_conta_p
					vl_aux_w,                        --OUT nr_seq_regra_p
					ds_aux_w,                        --OUT ie_autor_particular_p
					vl_aux_w,                        --OUT cd_convenio_glosa_p
					ds_aux_w,                        --OUT cd_categoria_glosa_p
					null,                            --ie_atend_retorno_p
					vl_aux_w,                        --OUT tx_pfb_neg_p 
					vl_aux_w,                        --OUT tx_pfb_pos_p
					ds_aux_w,                        --OUT ie_ignora_preco_venda_p
					vl_aux_w,                        --OUT tx_simpro_pos_pfb_p
					vl_aux_w,                        --OUT tx_simpro_neg_pfb_p
					vl_aux_w,                        --OUT tx_simpro_pos_pmc_p
					vl_aux_w,                        --OUT tx_simpro_neg_pmc_p
					null,                            --nr_seq_origem_p
					null,                            --nr_seq_cobertura_p
					0,                               --qt_dias_internacao_p
					nr_seq_lanc_w,                   --nr_seq_regra_lanc_p
					null,                            --nr_seq_lib_dieta_conv_p
					null,                            --ie_clinica_p
					null,                            --cd_usuario_convenio_p
					null) INTO STRICT 
					vl_aux_w, 
					vl_aux_w, 
					ds_aux_w, 
					ie_glosa_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					ds_aux_w, 
					ds_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					ds_aux_w, 
					vl_aux_w, 
					ds_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					ds_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w, 
					vl_aux_w;                          --nr_seq_classif_atend_p
		
		if (ie_excluir_valor = 'S') or
			(((coalesce(ie_regra_w,0) not in (1,2,5)) or (coalesce(ie_glosa_w,'') not in ('T','E','R','B','H','Z',''))) and (ie_tipo_convenio_w <> 1)) then
			vl_material_w	:= 0;
		else
			SELECT * FROM define_preco_material(cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, dt_conta_p, cd_material_w, cd_tipo_acomodacao_p, ie_tipo_atendimento_p, cd_setor_atendimento_p, cd_cgc_fornecedor_p, qt_idade_p, nr_sequencia_p, cd_plano_p, null, null, null, null, null, null, null, vl_material_w, dt_ult_vigencia_w, cd_tab_preco_mat_w, ie_origem_preco_w, nr_seq_bras_preco_w, nr_seq_mat_bras_w, nr_seq_conv_bras_w, nr_seq_conv_simpro_w, nr_seq_mat_simpro_w, nr_seq_simpro_preco_w, nr_seq_ajuste_mat_w) INTO STRICT vl_material_w, dt_ult_vigencia_w, cd_tab_preco_mat_w, ie_origem_preco_w, nr_seq_bras_preco_w, nr_seq_mat_bras_w, nr_seq_conv_bras_w, nr_seq_conv_simpro_w, nr_seq_mat_simpro_w, nr_seq_simpro_preco_w, nr_seq_ajuste_mat_w;
		end if;
		
		
		select	count(*)
		into STRICT	qt_existe_w
		from	ageint_itens_adicionais
		where	nr_seq_ageint_item 	= nr_seq_agend_item_p
		and	cd_material		= cd_material_w;	
		
		if (qt_existe_w = 0) then
			
			insert into ageint_itens_adicionais(nr_sequencia,
					dt_Atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_material,
					nr_seq_ageint_item,
					vl_item,
					ie_regra,
					ie_glosa)
				values (nextval('ageint_itens_adicionais_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_material_w,
					nr_seq_agend_item_p,
					(vl_material_w * qt_lancamento_w),
					ie_regra_w,
					ie_glosa_w);

			if (ie_dispara_kit_w	= 'S') then
						
				select	coalesce(max(cd_kit_material),0)
				into STRICT	cd_kit_material_w
				from 	material_estab
				where 	cd_material		= cd_material_w
				and 	cd_estabelecimento	= cd_estabelecimento_p;
			
				if (cd_kit_material_w	<> 0) then

					CALL ageint_gerar_kit_material_orc(cd_kit_material_w,
							nr_seq_agend_item_p,
							cd_convenio_p,
							cd_categoria_p,
							cd_plano_p,
							ie_tipo_Atendimento_p,
							qt_idade_p,
							cd_tipo_acomodacao_p,
							cd_setor_atendimento_p,
							cd_cgc_fornecedor_p,
							nr_sequencia_p,
							nm_usuario_p,
							cd_estabelecimento_p);
					
				end if;
			end if;
		end if;
			
		
	elsif (not(coalesce(cd_procedimento_w::text, '') = '')) or (not(coalesce(nr_seq_exame_w::text, '') = '')) or (not(coalesce(nr_seq_proc_interno_w::text, '') = '')) then
		
         /*tratar para ir para o final caso o proc interno da acao da regra esteja inativo*/

         if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
		select	coalesce(max(ie_situacao),'A')
		into STRICT	ie_situacao_w
		from	proc_interno
		where	nr_sequencia = nr_seq_proc_interno_w;

		if (ie_situacao_w = 'I') then
			goto continue_loop;
		end if;
         end if;
		
		/* heckmann - os 238389 - 04/08/2010 Para calcular o lancamento automatico quando existe RLA por exame ou proc interno*/

		if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
			SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proc_interno_w, cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, cd_plano_p, cd_setor_atendimento_p, cd_procedimento_w, ie_origem_proced_w, null, dt_conta_p, cd_tipo_acomodacao_p, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
		end if;
		
		if	((coalesce(nr_seq_exame_w,0) > 0) and (coalesce(cd_procedimento_w,0) = 0)) then
			SELECT * FROM Obter_Exame_Lab_Convenio(nr_seq_exame_w, cd_convenio_p, cd_categoria_p, ie_tipo_atendimento_p, cd_estabelecimento_p, ie_tipo_convenio_w, nr_seq_proc_interno_w, null, cd_plano_p, ds_ret_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w) INTO STRICT ds_ret_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w;
		end if;
	
    /*Apos obter o codigo do procedimento atraves do proc interno ou exame de laboratorio testar novamente para ver se o codigo esta ativo.*/

    if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then
      select 	coalesce(max(ie_situacao),'A')
      into STRICT	ie_situacao_w
      from	procedimento
      where	cd_procedimento	 = cd_procedimento_w
      and	ie_origem_proced = ie_origem_proced_w;
		
      if (ie_situacao_w = 'I') then
        goto continue_loop;
      end if;
    end if;
	
		select 	coalesce(max(ie_classificacao),1)
		into STRICT	ie_classificacao_w
		from 	procedimento
		where 	cd_procedimento = cd_procedimento_w
		and 	ie_origem_proced = ie_origem_proced_w;
		
		
		SELECT * FROM ageint_consiste_plano_conv(
			null, cd_convenio_p, cd_procedimento_w, ie_origem_proced_w, clock_timestamp(), 1, coalesce(ie_tipo_Atendimento_p,0), cd_plano_p, null, ds_erro_w, 0, null, ie_regra_w, null, nr_seq_regra_w, nr_seq_proc_interno_w, cd_categoria_p, cd_estabelecimento_p, null, ie_Sexo_p, ie_glosa_w, cd_edicao_ajuste_w, null, ds_irrelevante_w, ds_irrelevante_w, null, null, pr_glosa_w, vl_glosa_w) INTO STRICT ds_erro_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, cd_edicao_ajuste_w, ds_irrelevante_w, ds_irrelevante_w, pr_glosa_w, vl_glosa_w;
		
		ie_edicao_w	:= ageint_obter_se_proc_conv(cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, clock_timestamp(), cd_procedimento_w, ie_origem_proced_w, nr_Seq_proc_interno_w, ie_tipo_atendimento_p);
		
		ie_pacote_w	:= obter_Se_pacote_convenio(cd_procedimento_w, ie_origem_proced_w, cd_convenio_p, cd_estabelecimento_p);
			
		if (ie_edicao_w 				= 'N') and (coalesce(cd_edicao_ajuste_w,0) 	= 0) and (coalesce(ie_glosa_w,'L') 		= 'L') and (ie_pacote_w				= 'N') then
			ie_glosa_w        			:= 'T';
		end if;

				      
		if (ie_edicao_w 			= 'N') and (coalesce(cd_edicao_ajuste_w,0) 	> 0) and (coalesce(ie_glosa_w,'L') 		= 'L') and (ie_pacote_w			= 'N') then
		
			select	count(*)
			into STRICT    qt_item_edicao_w
			from    preco_amb
			where	cd_edicao_amb = cd_edicao_ajuste_w
			and     cd_procedimento = cd_procedimento_w
			and     ie_origem_proced = ie_origem_proced_w;
					
			if (qt_item_edicao_w = 0) then
				    ie_glosa_w :=    'G';
			end if;
				
		end if;
				
		if (ie_excluir_valor = 'S') or
			(((((coalesce(ie_Regra_w,0) not in (1,2,5)) or (coalesce(ie_glosa_w,'') not in ('T','E','R','B','H','Z',''))) and (ie_tipo_convenio_w <> 1) and (ie_calc_glosa_atend_w = 'N')) or				
			((ie_calc_glosa_atend_w = 'S') 	and (ie_tipo_convenio_w <> 1) 	and
			 ((coalesce(ie_glosa_w,'') not in ('T','G','P','R')) or (coalesce(ie_glosa_w::text, '') = '')))) and (IE_CALCULA_GLOSA_w = 'N' or (IE_CALCULA_GLOSA_w = 'S' and (coalesce(ie_glosa_w,'') not in ('P','R') or (coalesce(ie_glosa_w::text, '') = ''))))) then
			 vl_procedimento_w	:= 0;
		else
			if (ie_glosa_w	in ('P','R') and
				IE_CALCULA_GLOSA_w = 'S') then
				if (ie_classificacao_w = 1) then
			
					SELECT * FROM define_preco_procedimento(cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, dt_conta_p, cd_procedimento_w, cd_tipo_acomodacao_p, ie_tipo_atendimento_p, cd_setor_atendimento_p, cd_medico_p, cd_funcao_medico_p, qt_idade_p, nr_seq_exame_w, nr_seq_proc_interno_p, cd_usuario_convenio_p, cd_plano_p, ie_clinica_p, cd_empresa_ref_p, null, vl_procedimento_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w, nr_sequencia_p, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_procedimento_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w;
					
				else
					SELECT * FROM define_preco_servico(cd_estabelecimento_p, cd_convenio_p, cd_categoria_p, dt_conta_p, cd_procedimento_w, coalesce(cd_setor_atendimento_p,0), coalesce(ie_tipo_atendimento_p,0), coalesce(cd_tipo_acomodacao_p,0), cd_usuario_convenio_p, cd_plano_p, coalesce(ie_clinica_p,0), coalesce(cd_empresa_ref_p,0), null, vl_procedimento_w, nr_seq_ajuste_proc_w, null, 0, null, nr_seq_proc_interno_p, null, null, null, null, null, null, null, null, null, cd_medico_p) INTO STRICT vl_procedimento_w, nr_seq_ajuste_proc_w;
				end if;
				if (ie_glosa_w = 'P') then
					vl_glosa_w:= vl_procedimento_w * pr_glosa_w / 100;
					
					/* ROTINA DE ARREDONDAMENTO, USADO PELO CONVENIO IPE   --->>    INICIO  <<----- */

					begin
					select 	coalesce(max(ie_regra_arredondamento_tx),'N')
					into STRICT	ie_regra_arredondamento_tx_w
					from 	parametro_faturamento
					where 	cd_estabelecimento = cd_estabelecimento_p;
					exception
						when others then
							ie_regra_arredondamento_tx_w:= 'N';
					end;	

					if (ie_regra_arredondamento_tx_w = 'S')then

						select	max(ie_arredondamento)
						into STRICT	ie_tipo_rounded_w
						from	convenio_estabelecimento
						where	cd_convenio	  	= cd_convenio_w
						and	cd_estabelecimento	= cd_estabelecimento_p;

						if (ie_tipo_rounded_w = 'R') then

							select 	obter_regra_arredondamento(cd_convenio_w, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_p,
									coalesce(clock_timestamp(),clock_timestamp()), 'P', 1)
							into STRICT	ie_tipo_rounded_w
							;
							
							ie_regra_arred_IPE_w:= 'S';

						end if;

						if (ie_tipo_rounded_w IS NOT NULL AND ie_tipo_rounded_w::text <> '') and (ie_regra_arred_IPE_w = 'S') then

							vl_glosa_w := arredondamento(vl_glosa_w, 2, ie_tipo_rounded_w);
							
						else
							ie_regra_arred_IPE_w:= 'N';
						end if;

					end if;
					if (vl_glosa_w	> 0)  then
						vl_procedimento_w	:= vl_procedimento_w - vl_glosa_w;
					end if;	
				else
					vl_procedimento_w:= vl_glosa_w;
				end if;
			else
				
				if (ie_tipo_convenio_w <> 1) then
					select	max(cd_convenio_partic),
						max(cd_categoria_partic)
					into STRICT	cd_convenio_w,
						cd_categoria_w
					from	parametro_faturamento
					where	cd_estabelecimento	= cd_estabelecimento_p;
					
					if (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '') then
						select	max(cd_plano)
						into STRICT	cd_plano_w
						from	convenio_plano
						where	cd_convenio	= cd_convenio_w
						and	ie_situacao	= 'A';
					end if;
				end if;	

				if (ie_classificacao_w = 1) then
				
					SELECT * FROM define_preco_procedimento(cd_estabelecimento_p, coalesce(cd_convenio_w,cd_convenio_p), coalesce(cd_categoria_w,cd_categoria_p), dt_conta_p, cd_procedimento_w, cd_tipo_acomodacao_p, ie_tipo_atendimento_p, cd_setor_atendimento_p, cd_medico_p, cd_funcao_medico_p, qt_idade_p, nr_seq_exame_w, nr_seq_proc_interno_p, cd_usuario_convenio_p, coalesce(cd_plano_w,cd_plano_p), ie_clinica_p, cd_empresa_ref_p, null, vl_procedimento_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w, nr_sequencia_p, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_procedimento_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w;
					
				else
					SELECT * FROM define_preco_servico(cd_estabelecimento_p, coalesce(cd_convenio_w,cd_convenio_p), coalesce(cd_categoria_w,cd_categoria_p), dt_conta_p, cd_procedimento_w, coalesce(cd_setor_atendimento_p,0), coalesce(ie_tipo_atendimento_p,0), coalesce(cd_tipo_acomodacao_p,0), cd_usuario_convenio_p, coalesce(cd_plano_w,cd_plano_p), coalesce(ie_clinica_p,0), coalesce(cd_empresa_ref_p,0), null, vl_procedimento_w, nr_seq_ajuste_proc_w, null, 0, null, nr_seq_proc_interno_p, null, null, null, null, null, null, null, null, null, cd_medico_p) INTO STRICT vl_procedimento_w, nr_seq_ajuste_proc_w;
				
				end if;		
			end if;
		end if;
						
		select	count(*)
		into STRICT	qt_existe_w
		from	ageint_itens_adicionais
		where	nr_seq_ageint_item 	= nr_seq_agend_item_p
		and	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w
		and	nr_seq_proc_interno	= nr_seq_proc_interno_w;
		
		if (qt_existe_w = 0) then
			select	count(*)
			into STRICT	qt_existe_w
			from	ageint_itens_adicionais
			where	nr_seq_ageint_item 	= nr_seq_agend_item_p
			and	cd_procedimento		= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w
			and	nr_Seq_exame	= nr_seq_exame_w;
		end if;
		
		if (qt_existe_w = 0) then
		
			ie_autorizacao_w	:= 'L';
			if	((ie_Regra_w in (1,2,5)) or
				(ie_Regra_w = 8 AND ie_bloq_glosa_part_w = 'N')) then
				ie_autorizacao_w	:= 'B';
			elsif (ie_Regra_w in (3,6,7)) then
				select 	coalesce(max(ie_resp_autor),'H')
				into STRICT	ie_resp_autor_w
				from 	regra_convenio_plano
				where 	nr_sequencia = nr_seq_regra_w;
				if (ie_resp_autor_w	= 'H') then
					ie_autorizacao_w	:= 'PAH';
				elsif (ie_resp_autor_w	= 'P') then
					ie_autorizacao_w	:= 'PAP';
				end if;
			end if;
						
			if (ie_glosa_w in ('G','T','D','F')) then
				ie_autorizacao_w	:= 'B';
			end if;
			
			if (ie_vl_particular_w = 'S') then
			
				SELECT * FROM obter_convenio_particular(cd_estabelecimento_p, cd_convenio_part_w, cd_categoria_part_w) INTO STRICT cd_convenio_part_w, cd_categoria_part_w;
			
				SELECT * FROM define_preco_procedimento(cd_estabelecimento_p, cd_convenio_part_w, cd_categoria_part_w, dt_conta_p, cd_procedimento_w, cd_tipo_acomodacao_p, ie_tipo_atendimento_p, cd_setor_atendimento_p, cd_medico_p, cd_funcao_medico_p, qt_idade_p, nr_seq_exame_w, nr_seq_proc_interno_p, cd_usuario_convenio_p, null, ie_clinica_p, cd_empresa_ref_p, null, vl_procedimento_part_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w, nr_sequencia_p, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_procedimento_part_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w;
			end if;
		
			insert into ageint_itens_adicionais(nr_sequencia,
					dt_Atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_proc_interno,
					cd_procedimento,
					nr_seq_exame,
					ie_origem_proced,
					nr_seq_ageint_item,
					vl_item,
					ie_regra,
					ie_glosa,
					ie_autorizacao,
					nr_seq_regra_lanc,
					vl_item_particular)
				values (nextval('ageint_itens_adicionais_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_proc_interno_w,
					cd_procedimento_w,
					nr_seq_exame_w,
					ie_origem_proced_w,
					nr_seq_agend_item_p,
					vl_procedimento_w,
					ie_regra_w,
					ie_glosa_w,
					ie_autorizacao_w,
					nr_seq_lanc_w,
					vl_procedimento_part_w);	

		end if;
		
	end if;			
	end;
	<<continue_loop>>
	ie_situacao_w := null;
END LOOP;
CLOSE C01;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_gerar_lanc_aut_orc (CD_ESTABELECIMENTO_P bigint, CD_CONVENIO_P bigint, CD_CATEGORIA_P text, DT_CONTA_P timestamp, CD_TIPO_ACOMODACAO_P bigint, CD_ITEM_P bigint, IE_ORIGEM_PROCED_P bigint, CD_MEDICO_P text, CD_FUNCAO_MEDICO_P bigint, QT_IDADE_P bigint, NR_SEQUENCIA_P bigint, NR_SEQ_EXAME_LAB_P bigint, NR_SEQ_PROC_INTERNO_P bigint, IE_TIPO_ATENDIMENTO_P bigint, CD_SETOR_ATENDIMENTO_P bigint, CD_USUARIO_CONVENIO_P text, CD_PLANO_P text, IE_CLINICA_P bigint, CD_EMPRESA_REF_P bigint, CD_CGC_FORNECEDOR_P text, cd_edicao_amb_p bigint, nr_seq_agend_item_p bigint, nm_usuario_p text, ie_sexo_p text) FROM PUBLIC;

