-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_cot_ordem_sc_contrato ( nr_seq_aprovacao_p bigint, nr_solic_compra_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_cot_compra_w			bigint;
cd_comprador_w			varchar(10);
cd_pessoa_fisica_w		varchar(10);
cd_estabelecimento_w		bigint;
cd_pessoa_solicitante_w		varchar(10);
qt_dias_retorno_w			bigint;
dt_retorno_prev_w			timestamp;
cd_material_w			integer;
qt_material_w			double precision;
cd_unidade_medida_compra_w	varchar(30);
nr_contrato_w			bigint;
nr_item_cot_compra_w		integer;
nr_solic_compra_w			bigint;
nr_item_solic_compra_w		integer;
dt_solic_item_w			timestamp;
ds_material_direto_ww		varchar(255);
qt_entrega_solicitada_w		double precision;
dt_entrega_solicitada_w		timestamp;
cd_cgc_contratado_w		varchar(14);
cd_pessoa_contratada_w		varchar(10);
cd_condicao_pagamento_w		bigint;
cd_moeda_padrao_w		bigint;
cd_cond_pagto_fornec_w		bigint := 0;
nr_seq_regra_contrato_w		bigint;
vl_pagto_w			double precision;
qt_existe_w			bigint;
nr_seq_fornec_w			bigint;
nr_ordem_compra_w		bigint;
nm_pessoa_contato_w		varchar(255);
cd_local_entrega_w		bigint;
ie_aviso_chegada_w		varchar(1);
ie_urgente_w			varchar(1);
qt_conv_unid_fornec_w		double precision;
cd_centro_custo_w			varchar(10);
ds_erro_w			varchar(2000);
vl_desconto_w			contrato_regra_nf.vl_desconto%type;
pr_desconto_w			contrato_regra_nf.pr_desconto%type;

c01 CURSOR FOR
SELECT	nr_solic_compra,
	nr_item_solic_compra,
	cd_material,
	qt_material,
	cd_unidade_medida_compra,
	dt_solic_item,
	nr_contrato,
	ds_material_direto,
	nr_seq_regra_contrato
from	solic_compra_item
where	nr_seq_aprovacao = nr_seq_aprovacao_p
and	(dt_autorizacao IS NOT NULL AND dt_autorizacao::text <> '')
and	(nr_seq_aprovacao_p IS NOT NULL AND nr_seq_aprovacao_p::text <> '')
and	(nr_contrato IS NOT NULL AND nr_contrato::text <> '')

union

SELECT	nr_solic_compra,
	nr_item_solic_compra,
	cd_material,
	qt_material,
	cd_unidade_medida_compra,
	dt_solic_item,
	nr_contrato,
	ds_material_direto,
	nr_seq_regra_contrato
from	solic_compra_item
where	nr_solic_compra = nr_solic_compra_p
and	(dt_autorizacao IS NOT NULL AND dt_autorizacao::text <> '')
and	coalesce(nr_seq_aprovacao_p::text, '') = ''
and	(nr_contrato IS NOT NULL AND nr_contrato::text <> '');

c02 CURSOR FOR
SELECT	qt_entrega_solicitada,
	dt_entrega_solicitada
from	solic_compra_item_entrega
where	nr_solic_compra = nr_solic_compra_w
and	nr_item_solic_compra = nr_item_solic_compra_w;

c03 CURSOR FOR
SELECT	c.nr_seq_cot_forn,
	c.nr_item_cot_compra,
	c.cd_material,
	c.cd_unidade_medida_compra,
	c.qt_material,
	c.dt_limite_entrega,
	coalesce(c.vl_unitario_material,0),
	coalesce(c.qt_conv_unid_fornec,0),
	c.cd_cgc_fornecedor,
	c.nr_contrato
from	cot_compra_resumo_v c
where	c.nr_cot_compra      = nr_cot_compra_w;


BEGIN

if (nr_solic_compra_p > 0) then

	begin
	CALL gerar_historico_solic_compra(	nr_solic_compra_p,
					Wheb_mensagem_pck.get_Texto(301989), /*'Tentativa de envio do pedido GIMBA'*/
					Wheb_mensagem_pck.get_Texto(301992), /*'Liberado a solicitacao de compras, sendo em seguida realizado a tentativa de envio do pedido para GIMBA.',*/
					'I',
					nm_usuario_p);
	exception when others then
		null;
	end;

	select	coalesce(max(cd_comprador_resp),0),
		max(cd_estabelecimento),
		max(cd_pessoa_solicitante),
		max(cd_local_estoque),
		max(ie_aviso_chegada),
		max(ie_urgente),
		max(cd_centro_custo)
	into STRICT	cd_comprador_w,
		cd_estabelecimento_w,
		cd_pessoa_solicitante_w,
		cd_local_entrega_w,
		ie_aviso_chegada_w,
		ie_urgente_w,
		cd_centro_custo_w
	from	solic_compra
	where	nr_solic_compra = nr_solic_compra_p;	

	select	coalesce(max(cd_moeda_padrao),0)
	into STRICT	cd_moeda_padrao_w
	from	parametro_compras
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	if (cd_moeda_padrao_w = 0) then
		/*(-20011,'Falta informar a moeda padrao nos parametros de compras. Essa moeda e utilizada para gerar o fornecedor da cotacao.');*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(240468);
	end if;
	
	if (cd_comprador_w = 0) then
		
		select	coalesce(obter_pessoa_fisica_usuario(nm_usuario_p, 'C'),0)
		into STRICT	cd_comprador_w
		;
		
		if (cd_comprador_w > 0) then
		
			select	count(*)
			into STRICT	qt_existe_w
			from	comprador
			where	cd_estabelecimento = cd_estabelecimento_w
			and	ie_situacao = 'A'
			and	cd_pessoa_fisica = cd_comprador_w;
			
			if (qt_existe_w = 0) then
			
				select	coalesce(max(cd_comprador_padrao),0)
				into STRICT	cd_comprador_w
				from	parametro_compras
				where	cd_estabelecimento = cd_estabelecimento_w;
				
				if (cd_comprador_w = 0) then
					/*(-20011,	'O sistema nao conseguiu encontrar nenhum comprador para gerar a cotacao de compras. ' || chr(13) || chr(10) ||
									'- Verifique se a solicitacao de compras possui comprador responsavel, ou ' || chr(13) || chr(10) ||
									'- Verifique se voce e um comprador (no cadastro de comprador), ou ' || chr(13) || chr(10) ||
									'- Verifique se existe comprador padrao nos parametros de compras.');*/
					CALL wheb_mensagem_pck.exibir_mensagem_abort(240469);
				end if;
			end if;
		end if;
	end if;

	select	obter_valor_param_usuario(915, 2, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)
	into STRICT	qt_dias_retorno_w
	;
	
	select	obter_dia_hora_util_periodo(cd_estabelecimento_w, clock_timestamp(),coalesce(qt_dias_retorno_w,3))
	into STRICT	dt_retorno_prev_w
	;
	
	select	nextval('cot_compra_seq')
	into STRICT	nr_cot_compra_w
	;
	
	insert into cot_compra(
		nr_cot_compra,
		dt_cot_compra,
		dt_atualizacao,
		cd_comprador,
		nm_usuario,
		ds_observacao,
		cd_pessoa_solicitante,
		cd_estabelecimento,
		dt_retorno_prev,
		ie_finalidade_cotacao)
	values (	nr_cot_compra_w,
		clock_timestamp(),
		clock_timestamp(),
		cd_comprador_w,
		nm_usuario_p,
		null,
		cd_pessoa_solicitante_w,
		cd_estabelecimento_w,
		dt_retorno_prev_w,
		'C');
	open C01;
	loop
	fetch C01 into	
		nr_solic_compra_w,
		nr_item_solic_compra_w,
		cd_material_w,
		qt_material_w,
		cd_unidade_medida_compra_w,
		dt_solic_item_w,
		nr_contrato_w,
		ds_material_direto_ww,
		nr_seq_regra_contrato_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		select	coalesce(max(nr_item_cot_compra),0) +1
		into STRICT	nr_item_cot_compra_w
		from	cot_compra_item
		where	nr_cot_compra = nr_cot_compra_w;
		
		insert into cot_compra_item(
			nr_cot_compra,
			nr_item_cot_compra,
			cd_material,
			qt_material,
			cd_unidade_medida_compra,
			dt_atualizacao,
			dt_limite_entrega,
			nm_usuario,
			ie_situacao,
			ds_material_direto_w,
			nr_solic_compra,
			nr_item_solic_compra,
			cd_estab_item)
		values (	nr_cot_compra_w,
			nr_item_cot_compra_w,
			cd_material_w,
			qt_material_w,
			cd_unidade_medida_compra_w,
			clock_timestamp(),
			dt_solic_item_w,
			nm_usuario_p,
			'A',
			ds_material_direto_ww,
			nr_solic_compra_w,
			nr_item_solic_compra_w,
			cd_estabelecimento_w);

		/*Grava o numero da cotacao no item da solicitacao de compra*/

		update	solic_compra_item
		set	nr_cot_compra		= nr_cot_compra_w,
			nr_item_cot_compra	= nr_item_cot_compra_w
		where	nr_solic_compra		= nr_solic_compra_p
		and	nr_item_solic_compra	= nr_item_solic_compra_w;

		open C02;
		loop
		fetch C02 into	
			qt_entrega_solicitada_w,
			dt_entrega_solicitada_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			
			insert into cot_compra_item_entrega(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_cot_compra,
				nr_item_cot_compra,
				dt_entrega,
				qt_entrega)
			values (	nextval('cot_compra_item_entrega_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_cot_compra_w,
				nr_item_cot_compra_w,
				dt_entrega_solicitada_w,
				qt_entrega_solicitada_w);
			end;
		end loop;
		close C02;
		
		select	cd_cgc_contratado,
			cd_pessoa_contratada,
			coalesce(cd_condicao_pagamento,0)
		into STRICT	cd_cgc_contratado_w,
			cd_pessoa_contratada_w,
			cd_condicao_pagamento_w
		from	contrato
		where	nr_sequencia = nr_contrato_w;
		
		if (cd_cgc_contratado_w IS NOT NULL AND cd_cgc_contratado_w::text <> '') then
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_fornec_w
			from	cot_compra_forn
			where	nr_cot_compra = nr_cot_compra_w
			and	cd_cgc_fornecedor = cd_cgc_contratado_w;
			
			select	coalesce(max(cd_cond_pagto),0),
				max(nm_pessoa_contato)
			into STRICT	cd_cond_pagto_fornec_w,
				nm_pessoa_contato_w
			from	pessoa_juridica_estab
			where	cd_cgc = cd_cgc_contratado_w
			and	cd_estabelecimento = cd_estabelecimento_w;
			
		elsif (cd_pessoa_contratada_w IS NOT NULL AND cd_pessoa_contratada_w::text <> '') then
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_fornec_w
			from	cot_compra_forn
			where	nr_cot_compra = nr_cot_compra_w
			and	cd_pessoa_fisica = cd_pessoa_contratada_w;
		end if;	
		
		if (cd_cond_pagto_fornec_w = 0) then
			cd_cond_pagto_fornec_w := cd_condicao_pagamento_w;
		end if;	

		if (cd_cond_pagto_fornec_w = 0) then		
			/*(-20011,	'Falta informar a condicao de pagamento.' || chr(13) || chr(10) ||
			'Verifique a condicao de pagamento no cadastro da pessoa juridica do contrato, ou a condicao de pagamento do proprio contrato. Seq contrato = ' || nr_contrato_w || '.');*/
			CALL wheb_mensagem_pck.exibir_mensagem_abort(240471,'NR_CONTRATO=' || nr_contrato_w);
		end if;		
		
		if (nr_seq_fornec_w = 0) then
			
			select	nextval('cot_compra_forn_seq')
			into STRICT	nr_seq_fornec_w
			;
			
			insert into cot_compra_forn(
				nr_cot_compra,
				cd_cgc_fornecedor,
				cd_condicao_pagamento,
				cd_moeda,
				ie_frete,
				dt_atualizacao,
				nm_usuario,
				nr_sequencia,
				cd_pessoa_fisica,
				ie_gerado_bionexo,
				ie_exclusivo)
			values (	nr_cot_compra_w,
				cd_cgc_contratado_w,
				cd_cond_pagto_fornec_w,
				cd_moeda_padrao_w,
				'C',
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_fornec_w,
				cd_pessoa_contratada_w,
				'N',
				'N');
		end if;
		
		select	coalesce(max(vl_pagto),0),
			max(vl_desconto),
			max(pr_desconto)
		into STRICT	vl_pagto_w,
			vl_desconto_w,
			pr_desconto_w
		from	contrato_regra_nf
		where	nr_sequencia = nr_seq_regra_contrato_w;
		
		insert into cot_compra_forn_item(
			nr_cot_compra,
			nr_item_cot_compra,
			cd_cgc_fornecedor,
			qt_material,
			vl_unitario_material,
			dt_atualizacao,
			nm_usuario,
			ds_material_direto,
			ie_situacao,
			nr_sequencia,
			nr_seq_cot_forn,
			cd_material,
			nr_contrato,
			vl_desconto,
			pr_desconto,
            nr_seq_regra_contrato)
		values (	nr_cot_compra_w,
			nr_item_cot_compra_w,
			cd_cgc_contratado_w,
			qt_material_w,
			vl_pagto_w,
			clock_timestamp(),
			nm_usuario_p,
			ds_material_direto_ww,
			'A',
			nextval('cot_compra_forn_item_seq'),
			nr_seq_fornec_w,
			cd_material_w,
			nr_contrato_w,
			vl_desconto_w,
			pr_desconto_w,
            nr_seq_regra_contrato_w);
		end;
	end loop;
	close C01;
	
	begin
	CALL calcular_cot_compra_liquida(nr_cot_compra_w, nm_usuario_p);
	CALL gerar_cot_compra_resumo(nr_cot_compra_w, nm_usuario_p);
	exception when others then
		/*(-20011,'Erro ao calcular a cotacao de compras.' || chr(13) || chr(10) || substr(sqlerrm,1,2000));*/

		ds_erro_w	:= substr(sqlerrm,1,2000);
		CALL wheb_mensagem_pck.exibir_mensagem_abort(240472,'ERRO=' || ds_erro_w);
	end;

	select	count(*)
	into STRICT	qt_existe_w
	from	cot_compra_resumo_v c
	where	c.nr_cot_compra = nr_cot_compra_w;

	if (qt_existe_w = 0) then
		begin
		delete FROM cot_compra where nr_cot_compra = nr_cot_compra_w;
		if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
		exception when others then
			null;
		end;
		/*(-20011,'Nao foi possivel gerar a integracao com Gimba, pois nao existe itens cotados. ' || chr(13) || chr(10) ||
					  'Favor verificar os itens informados. ');*/
		CALL wheb_mensagem_pck.exibir_mensagem_abort(240473);
	end if;

	select	nextval('ordem_compra_seq')
	into STRICT	nr_ordem_compra_w
	;
	
	insert	into ordem_compra(
		nr_ordem_compra,
		cd_estabelecimento,
	 	cd_cgc_fornecedor,
		cd_pessoa_fisica,
	 	cd_condicao_pagamento,
	 	cd_comprador,
	 	dt_ordem_compra,
	 	dt_atualizacao,
	 	nm_usuario,
	 	cd_moeda,
	 	ie_situacao,
	 	dt_inclusao,
	 	cd_pessoa_solicitante,
	 	cd_cgc_transportador,
	 	ie_frete,
	 	vl_frete,
		vl_despesa_acessoria,
	 	ds_pessoa_contato,
	 	cd_local_entrega,
	 	dt_entrega,
		ie_aviso_chegada,
		ie_emite_obs,
		ie_urgente,
		ie_somente_pagto,
		vl_desconto,
		ie_tipo_ordem,
		dt_liberacao,
		dt_aprovacao)
	values (	nr_ordem_compra_w,
		cd_estabelecimento_w,
		cd_cgc_contratado_w,
		cd_pessoa_contratada_w,
		cd_cond_pagto_fornec_w,
		cd_comprador_w,
	      	clock_timestamp(), 
		clock_timestamp(), 
		nm_usuario_p,
		cd_moeda_padrao_w, 
		'A', 
		clock_timestamp(), 
		cd_pessoa_solicitante_w, 
		null,
		'C', 
		0, 
		0,
		nm_pessoa_contato_w,
		cd_local_entrega_w,
		dt_solic_item_w, 
		ie_aviso_chegada_w,
		'S',
		ie_urgente_w,
		'N',
		0,
		'C',
		clock_timestamp(),
		clock_timestamp());
	
	open C03;
	loop
	fetch C03 into
		nr_seq_fornec_w,
		nr_item_cot_compra_w,
		cd_material_w,
		cd_unidade_medida_compra_w,
		qt_material_w,
		dt_solic_item_w,
		vl_pagto_w,
		qt_conv_unid_fornec_w,
		cd_cgc_contratado_w,
		nr_contrato_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		CALL grava_item_ordem_compra(
			nr_ordem_compra_w,
			cd_material_w,
			cd_unidade_medida_compra_w,
			vl_pagto_w,
			qt_material_w,
			null,
			null,
			null,
			nm_usuario_p,
			'A',
			dt_solic_item_w,
			null,
			nr_cot_compra_w,
			nr_item_cot_compra_w,
			nr_seq_fornec_w,
			qt_conv_unid_fornec_w,
			'N',
			null,
			'N',
			0,
			nr_contrato_w,
			cd_centro_custo_w,
			null,
			null);

		end;
	end loop;
	close C03;

	select	count(*)
	into STRICT	qt_existe_w
	from	cliente_integracao
	where	nr_seq_inf_integracao = 213
	and	ie_situacao = 'A';
	
	if (qt_existe_w > 0) then
		CALL gravar_agend_integracao(133,'nr_ordem_compra=' || nr_ordem_compra_w || ';');
	end if;

	update	cot_compra
	set	dt_geracao_ordem_compra = clock_timestamp()
	where	nr_cot_compra = nr_cot_compra_w;

	/* Faz update na data de BAIXA da solicitacao de compra */

	update	solic_compra_item
	set	dt_baixa		= clock_timestamp()
	where	nr_solic_compra	= nr_solic_compra_p;

	CALL gerar_hist_solic_sem_commit(
		nr_solic_compra_p,
		Wheb_mensagem_pck.get_Texto(301990), /*'Baixa do item da solicitacao',*/
		Wheb_mensagem_pck.get_Texto(301991), /*'Itens baixados pela procedure GERAR_COT_ORDEM_SC_CONTRATO',*/
		'B',
		'TASY');

	update	solic_compra
	set	dt_baixa		= clock_timestamp()
	where	nr_solic_compra	= nr_solic_compra_p;

end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_cot_ordem_sc_contrato ( nr_seq_aprovacao_p bigint, nr_solic_compra_p bigint, nm_usuario_p text) FROM PUBLIC;

