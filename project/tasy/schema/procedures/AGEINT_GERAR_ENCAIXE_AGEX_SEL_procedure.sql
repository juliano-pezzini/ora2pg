-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_gerar_encaixe_agex_sel (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p text, qt_duracao_p bigint, nr_seq_agenda_sel_p bigint, ie_transferir_p text, cd_motivo_p bigint, ds_motivo_p text, nm_usuario_p text, nr_seq_encaixe_p INOUT bigint, nm_usuario_confirm_encaixe_p text default null, dt_confirm_encaixe_p timestamp default null, cd_medico_exec_p text default NULL, ie_confirmacao_aut_p text default null) AS $body$
DECLARE


dt_encaixe_w			timestamp;
ds_consistencia_w		varchar(255);
cd_turno_w			varchar(1);
nr_seq_classif_w		bigint;
cd_agenda_w			bigint;
ie_status_agenda_w		varchar(3);
cd_pessoa_fisica_w		varchar(10);
nm_paciente_w			varchar(60);
dt_nascimento_pac_w		timestamp;
qt_idade_paciente_w		smallint;
nr_telefone_w			varchar(255);
nm_pessoa_contato_w		varchar(50);
cd_procedencia_w		integer;
cd_convenio_w			integer;
cd_usuario_convenio_w	varchar(30);
cd_categoria_w		varchar(10);
dt_validade_carteira_w	timestamp;
cd_plano_w			varchar(10);
nr_doc_convenio_w		varchar(20);
cd_medico_w			varchar(10);
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w	bigint;
ie_lado_w			varchar(1);
ie_autorizacao_w		varchar(3);
cd_medico_exec_w		varchar(10);
nr_seq_sala_w			bigint;
ds_cirurgia_w			varchar(500);
ie_anestesia_w		varchar(1);
cd_anestesista_w		varchar(10);
ds_observacao_w		varchar(4000);
nr_seq_agenda_w		agenda_paciente.nr_sequencia%type;
nr_seq_proced_w		integer;
nm_usuario_orig_w	varchar(15);
dt_agendamento_w	timestamp;
ie_manter_usuario_w	varchar(1);
ie_manter_atend_w	varchar(1);
ie_manter_cirurgia_w	varchar(1);
nr_atendimento_w	bigint;
nr_cirurgia_w		bigint;
qt_peso_w		real;
qt_altura_cm_w		real;
nr_prescricao_w		bigint;
ie_setor_encaixe_selec_w varchar(1);
cd_setor_atendimento_w	 integer;
ie_manut_proced_w	varchar(1);
qt_horario_livre_w	bigint;
qt_tentativas_w		bigint	:= 0;
atrib_oldvalue_w			varchar(50);
atrib_newvalue_w			varchar(50);
hr_inicio_w		timestamp;
nm_usuario_ant_w	varchar(15);
ie_reserva_transf_w	varchar(1);
nr_reserva_w		varchar(20);
cd_estab_origem_w	smallint;
cd_estab_destino_w	smallint;
ie_modo_gerar_reserva_w	varchar(1);
cd_estabelecimento_w	smallint;
ds_motivo_w		varchar(255);
ie_tipo_atendimento_w	smallint;
nr_seq_item_adic_ageint_w		agenda_paciente_proc.nr_seq_item_adic_ageint%type;
cd_doenca_cid_w			varchar(10);
nr_seq_segurado_w   agenda_paciente.nr_seq_segurado%type;

/* cursores */

/* obter procedimentos adicionais */

c01 CURSOR FOR
SELECT	cd_procedimento,
	ie_origem_proced,
	nr_seq_proc_interno,
	nr_seq_item_adic_ageint
from	agenda_paciente_proc
where	nr_sequencia = nr_seq_agenda_sel_p
and	ie_manut_proced_w = 'S'
order by
	nr_seq_agenda;


BEGIN
if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') and (hr_encaixe_p IS NOT NULL AND hr_encaixe_p::text <> '') and (qt_duracao_p IS NOT NULL AND qt_duracao_p::text <> '') and (nr_seq_agenda_sel_p IS NOT NULL AND nr_seq_agenda_sel_p::text <> '') and (nr_seq_agenda_sel_p > 0) and (ie_transferir_p IS NOT NULL AND ie_transferir_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	/* obter horario agenda x encaixe */

	dt_encaixe_w := to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || hr_encaixe_p || ':00','dd/mm/yyyy hh24:mi:ss');	

	
	select	count(*)
	into STRICT	qt_horario_livre_w
	from	agenda_paciente
	where	cd_agenda	= cd_agenda_p
	and	hr_inicio	= dt_encaixe_w;
				
	while(qt_horario_livre_w > 0 and qt_tentativas_w < 30) loop
		begin
		qt_tentativas_w	:= qt_tentativas_w + 1;
		dt_encaixe_w	:= dt_encaixe_w + 1/1440;
		select	count(*)
		into STRICT	qt_horario_livre_w
		from	agenda_paciente
		where	cd_agenda	= cd_agenda_p
		and	hr_inicio	= dt_encaixe_w;
		end;
	end loop;

	/* obter turno */

	select	obter_turno_horario_agenda(cd_agenda_p, dt_encaixe_w)
	into STRICT	cd_turno_w
	;

	/* obter classificacao */

	nr_seq_classif_w := obter_classif_encaixe_agenda(nr_seq_classif_w);
	
	/*obter parametro manter usuario*/

	select	max(ie_usuario_orig_transf)
	into STRICT	ie_manter_usuario_w
	from	parametro_agenda
	where	cd_estabelecimento = cd_estabelecimento_p;
	
	ie_manter_atend_w := obter_param_usuario(871, 204, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_manter_atend_w);
	
	ie_manter_cirurgia_w := obter_param_usuario(871, 205, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_manter_cirurgia_w);
	
	ie_manut_proced_w := obter_param_usuario(820, 150, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_manut_proced_w);
	
	select	obter_parametro_agenda(cd_estabelecimento_p, 'IE_SETOR_ENCAIXE_SELEC', 'S')
	into STRICT	ie_setor_encaixe_selec_w
	;
	
	select 	obter_parametro_agenda(cd_estabelecimento_p, 'IE_RESERVA_TRANSF', 'S')
	into STRICT	ie_reserva_transf_w
	;

	/* obter dados selecao */

	select	a.cd_agenda,
		a.ie_status_agenda,
		a.cd_pessoa_fisica,
		a.nm_paciente,
		a.dt_nascimento_pac,
		a.qt_idade_paciente,
		a.nr_telefone,
		a.nm_pessoa_contato,
		a.cd_procedencia,
		a.cd_convenio,
		a.cd_usuario_convenio,
		a.cd_categoria,
		a.dt_validade_carteira,
		a.cd_plano,
		a.nr_doc_convenio,
		a.cd_medico,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_seq_proc_interno,
		a.ie_lado,
		a.ie_autorizacao,
		a.cd_medico_exec,
		a.nr_seq_sala,
		a.ds_cirurgia,
		a.ie_anestesia,
		a.cd_anestesista,
		a.ds_observacao,
		a.nm_usuario_orig,
		a.dt_agendamento,
		a.nr_atendimento,
		a.nr_cirurgia,
		a.qt_peso,
		a.qt_altura_cm,
		a.cd_setor_atendimento,
		a.hr_inicio,
		a.nm_usuario,
		a.nr_reserva,
		b.cd_estabelecimento,
		a.ie_tipo_atendimento,
		a.cd_doenca_cid,
		a.nr_seq_segurado
	into STRICT	cd_agenda_w,
		ie_status_agenda_w,
		cd_pessoa_fisica_w,
		nm_paciente_w,
		dt_nascimento_pac_w,
		qt_idade_paciente_w,
		nr_telefone_w,
		nm_pessoa_contato_w,
		cd_procedencia_w,
		cd_convenio_w,
		cd_usuario_convenio_w,
		cd_categoria_w,
		dt_validade_carteira_w,
		cd_plano_w,
		nr_doc_convenio_w,
		cd_medico_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_proc_interno_w,
		ie_lado_w,
		ie_autorizacao_w,
		cd_medico_exec_w,
		nr_seq_sala_w,
		ds_cirurgia_w,
		ie_anestesia_w,
		cd_anestesista_w,
		ds_observacao_w,
		nm_usuario_orig_w,
		dt_agendamento_w,
		nr_atendimento_w,
		nr_cirurgia_w,
		qt_peso_w,
		qt_altura_cm_w,
		cd_setor_atendimento_w,
		hr_inicio_w,
		nm_usuario_ant_w,
		nr_reserva_w,
		cd_estabelecimento_w,
		ie_tipo_atendimento_w,
		cd_doenca_cid_w,
		nr_seq_segurado_w
	from	agenda_paciente a,
		agenda b
	where	a.cd_agenda = b.cd_agenda
	and	a.nr_sequencia = nr_seq_agenda_sel_p;

	/* obter sequencia */

	select	nextval('agenda_paciente_seq')
	into STRICT	nr_seq_agenda_w
	;
	
	if (ie_manter_atend_w	= 'N') then
		nr_atendimento_w	:= null;
	end if;
	if (ie_manter_cirurgia_w	= 'N') then
		nr_cirurgia_w	:= null;
	end if;
	
	if (ie_setor_encaixe_selec_w = 'E') and (ie_transferir_p = 'S') then
		cd_setor_atendimento_w	:= null;
	elsif (ie_setor_encaixe_selec_w = 'T') and (ie_transferir_p = 'N') then
		cd_setor_atendimento_w	:= null;
	elsif (ie_setor_encaixe_selec_w = 'N') then
		cd_setor_atendimento_w	:= null;
	end if;
	
	ie_modo_gerar_reserva_w := obter_param_usuario(869, 102, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_modo_gerar_reserva_w);
	
	select	cd_estabelecimento
	into STRICT	cd_estab_destino_w
	from	agenda
	where	cd_agenda	= cd_agenda_p;	
	
	if (cd_estabelecimento_w	<> cd_estab_destino_w) then
		if (ie_modo_gerar_reserva_w	= '1') then			
			nr_reserva_w	:= Ageint_Obter_Reserva_Pac(nr_seq_agenda_w, dt_encaixe_w, cd_pessoa_fisica_w, cd_estab_destino_w,'E');
		end if;
	end if;
	
	/* gerar encaixe */

	
	if (ie_manut_proced_w = 'N') and (ie_transferir_p = 'N') then
		cd_procedimento_w	:= null;
		ie_origem_proced_w	:= null;
		nr_seq_proc_interno_w	:= null;
	
	end if;
	insert into agenda_paciente(
					nr_sequencia,
					cd_agenda,
					dt_agenda,
					hr_inicio,
					nr_minuto_duracao,
					ie_status_agenda,
					cd_pessoa_fisica,
					nm_paciente,
					dt_nascimento_pac,
					qt_idade_paciente,
					nr_telefone,
					nm_pessoa_contato,
					cd_procedencia,
					cd_convenio,
					cd_usuario_convenio,
					cd_categoria,
					dt_validade_carteira,
					cd_plano,
					nr_doc_convenio,
					cd_medico,
					cd_procedimento,
					ie_origem_proced,
					nr_seq_proc_interno,
					ie_lado,
					ie_autorizacao,
					cd_medico_exec,
					nr_seq_sala,
					ds_cirurgia,
					ie_anestesia,
					cd_anestesista,
					ds_observacao,
					nr_seq_classif_agenda,
					cd_turno,
					dt_agendamento,
					nm_usuario_orig,
					nm_usuario,
					dt_atualizacao,
					ie_equipamento,
					ie_encaixe,
					nr_atendimento,
					nr_cirurgia,
					qt_peso,
					qt_altura_cm,
					cd_setor_atendimento,
					nm_usuario_confirm_encaixe,
					dt_confirm_encaixe,
					nr_reserva,
					ie_tipo_atendimento,
					cd_doenca_cid,
					nr_seq_segurado,
					ie_confirmacao_aut,
					dt_confirmacao,
					nm_usuario_confirm)
				values (
					nr_seq_agenda_w,
					cd_agenda_p,
					trunc(dt_encaixe_w,'dd'),
					dt_encaixe_w,
					qt_duracao_p,
					ie_status_agenda_w,
					cd_pessoa_fisica_w,
					nm_paciente_w,
					dt_nascimento_pac_w,
					qt_idade_paciente_w,
					nr_telefone_w,
					nm_pessoa_contato_w,
					cd_procedencia_w,
					cd_convenio_w,
					cd_usuario_convenio_w,
					cd_categoria_w,
					dt_validade_carteira_w,
					cd_plano_w,
					nr_doc_convenio_w,
					cd_medico_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					nr_seq_proc_interno_w,
					ie_lado_w,
					ie_autorizacao_w,
					cd_medico_exec_p,
					nr_seq_sala_w,
					ds_cirurgia_w,
					ie_anestesia_w,
					cd_anestesista_w,
					ds_observacao_w,
					nr_seq_classif_w,
					cd_turno_w,
					CASE WHEN ie_manter_usuario_w='S' THEN  dt_agendamento_w  ELSE clock_timestamp() END ,
					CASE WHEN ie_manter_usuario_w='S' THEN  nm_usuario_orig_w  ELSE nm_usuario_p END ,
					nm_usuario_p,
					clock_timestamp(),
					'N',
					'S',
					nr_atendimento_w,
					nr_cirurgia_w,
					qt_peso_w,
					qt_altura_cm_w,
					cd_setor_atendimento_w,
					nm_usuario_confirm_encaixe_p,    
					dt_confirm_encaixe_p,
					CASE WHEN ie_reserva_transf_w='S' THEN  nr_reserva_w  ELSE null END ,
					ie_tipo_atendimento_w,
					cd_doenca_cid_w,
					nr_seq_segurado_w,
					ie_confirmacao_aut_p,
					dt_confirm_encaixe_p,
					nm_usuario_confirm_encaixe_p);
	commit;
	
	/* Transferir prescricao vinculada ao agendamento */

	select	max(nr_prescricao)
	into STRICT	nr_prescricao_w
	from	prescr_medica
	where	nr_seq_agenda = nr_seq_agenda_sel_p;
	
	if (nr_prescricao_w > 0) then
		update	prescr_medica
		set	nr_seq_agenda		=	nr_seq_agenda_w
		where	nr_prescricao		=	nr_prescricao_w;	
	end if;
	
	/* gerar procedimentos adicionais */

	open c01;
	loop
	fetch c01 into	cd_procedimento_w,
				ie_origem_proced_w,
				nr_seq_proc_interno_w,
				nr_seq_item_adic_ageint_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		/* obter sequencia */

		select	coalesce(max(nr_seq_agenda),0)+1
		into STRICT	nr_seq_proced_w
		from	agenda_paciente_proc
		where	nr_sequencia = nr_seq_agenda_w;

		insert into agenda_paciente_proc(
							nr_sequencia,
							nr_seq_agenda,
							cd_procedimento,
							ie_origem_proced,
							nr_seq_proc_interno,
							dt_atualizacao,
							nm_usuario,
							nr_seq_item_adic_ageint
							)
						values (
							nr_seq_agenda_w,
							nr_seq_proced_w,
							cd_procedimento_w,
							ie_origem_proced_w,
							nr_seq_proc_interno_w,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_item_adic_ageint_w
							);
		end;
	end loop;
	close c01;
	
	/* OPME */

	insert into agenda_pac_opme(
		nr_sequencia,
		nr_seq_agenda,
		dt_atualizacao,
		nm_usuario,
		cd_material,
		qt_material,
		ie_origem_inf,
		nr_seq_apres,
		ie_padrao,
		ds_observacao,
		ie_autorizado,
		nr_seq_motivo_exclusao,
		nm_usuario_exclusao,
		dt_exclusao,
		cd_cgc,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_proc_interno,
		ie_integracao,
		vl_unitario_item,
		vl_desconto,
		cd_cond_pagto,
		ie_integracao_util,
		ie_gerar_autor)
	SELECT	nextval('agenda_pac_opme_seq'),
		nr_seq_agenda_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_material,
		qt_material,
		ie_origem_inf,
		nr_seq_apres,
		ie_padrao,
		ds_observacao,
		ie_autorizado,
		nr_seq_motivo_exclusao,
		nm_usuario_exclusao,
		dt_exclusao,
		cd_cgc,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_proc_interno,
		ie_integracao,
		vl_unitario_item,
		vl_desconto,
		cd_cond_pagto,
		ie_integracao_util,
		ie_gerar_autor
	from	agenda_pac_opme
	where	nr_seq_agenda	=	nr_seq_agenda_sel_p;	
	
	select	max(ds_agenda)
	into STRICT	atrib_oldvalue_w
	from	agenda
	where	cd_agenda	= cd_agenda_w;
	
	select	max(ds_agenda)
	into STRICT	atrib_newvalue_w
	from	agenda
	where	cd_agenda	= cd_agenda_p;
	
	select	max(ds_motivo)
	into STRICT	ds_motivo_w
	from	agenda_motivo
	where	nr_sequencia = cd_motivo_p;
	
	CALL gerar_agenda_paciente_hist(cd_agenda_p,nr_seq_agenda_sel_p,'T',nm_usuario_p,wheb_mensagem_pck.get_texto(791001,'nm_agenda_old='||atrib_oldvalue_w||';hr_inicio='||to_char(hr_inicio_w, pkg_date_formaters.localize_mask('timestamp',    pkg_date_formaters.getUserLanguageTag(cd_estabelecimento_p, nm_usuario_p)))||';nm_agenda_new='||atrib_newvalue_w||';hr_destino='||to_char(dt_encaixe_w, pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.			getUserLanguageTag(cd_estabelecimento_p, nm_usuario_p)))||';nm_usuario_ant='||nm_usuario_ant_w||';ds_motivo='||ds_motivo_w|| ' ' ||ds_motivo_p),cd_pessoa_fisica_w,nm_paciente_w,dt_encaixe_w,obter_perfil_ativo);
				
				
	CALL gerar_agenda_paciente_hist(cd_agenda_p,nr_seq_agenda_w,'T',nm_usuario_p,wheb_mensagem_pck.get_texto(791001,'nm_agenda_old='||atrib_oldvalue_w||';hr_inicio='||to_char(hr_inicio_w, pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(cd_estabelecimento_p, nm_usuario_p)))||';nm_agenda_new='||atrib_newvalue_w||';hr_destino='||to_char(dt_encaixe_w, pkg_date_formaters.localize_mask('timestamp', pkg_date_formaters.getUserLanguageTag(cd_estabelecimento_p, nm_usuario_p)))||';nm_usuario_ant='||nm_usuario_ant_w||';ds_motivo='||ds_motivo_w|| ' ' ||ds_motivo_p),cd_pessoa_fisica_w,nm_paciente_w,dt_encaixe_w,obter_perfil_ativo);	
						
	/* cancelar agendamento anterior */

	if (ie_transferir_p = 'S') then
		--alterar_status_agenda(2,cd_agenda_w,nr_seq_agenda_sel_p,'C',cd_motivo_p,ds_motivo_p,'N',nm_usuario_p);
		CALL alterar_status_agenda(cd_agenda_w,nr_seq_agenda_sel_p,'C',cd_motivo_p,ds_motivo_p,'N',nm_usuario_p);
	end if;
end if;

commit;

nr_seq_encaixe_p := nr_seq_agenda_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_gerar_encaixe_agex_sel (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p text, qt_duracao_p bigint, nr_seq_agenda_sel_p bigint, ie_transferir_p text, cd_motivo_p bigint, ds_motivo_p text, nm_usuario_p text, nr_seq_encaixe_p INOUT bigint, nm_usuario_confirm_encaixe_p text default null, dt_confirm_encaixe_p timestamp default null, cd_medico_exec_p text default NULL, ie_confirmacao_aut_p text default null) FROM PUBLIC;

