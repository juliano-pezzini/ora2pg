-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_repasse_terceiro ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE



_ora2pg_r RECORD;
repasse_terceiro_w		repasse_terceiro%rowtype;
repasse_terceiro_item_w		repasse_terceiro_item%rowtype;

ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w		intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w		varchar(15);
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
ds_erro_w			varchar(4000);
i				integer;
ds_enter_w			varchar(255) := chr(13)||chr(10);

cd_convenio_w			convenio.cd_convenio%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
nr_repasse_terceiro_intpd_w	repasse_terceiro.nr_repasse_terceiro%type;
nr_repasse_terceiro_w		repasse_terceiro.nr_repasse_terceiro%type;
cd_condicao_pagamento_w		repasse_terceiro.cd_condicao_pagamento%type;
nr_sequencia_item_w		repasse_terceiro_item.nr_sequencia_item%type;
cd_medico_w			repasse_terceiro_item.cd_medico%type;
nr_seq_tipo_item_w		repasse_terceiro_item.nr_seq_tipo%type;
cd_centro_custo_w		repasse_terceiro_item.cd_centro_custo%type;
nr_sequencia_w			repasse_terceiro_item.nr_sequencia%type;
nr_seq_terceiro_w		terceiro.nr_sequencia%type;
nr_seq_tipo_w			tipo_repasse.nr_sequencia%type;
dt_mesano_referencia_w		timestamp;
dt_contabil_w			timestamp;
dt_lancamento_w			timestamp;

/*'Efetua a consulta transformando o elemento XML num tipo de tabela'*/

c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/TRANSFER_THIRD_PARTY' passing xml_p columns
	ie_action			varchar(15)	path	'IE_ACTION',
	nr_seq_terceiro			bigint	path	'NR_SEQ_TERCEIRO_TASY',
	dt_mesano_referencia		varchar(40)	path	'DT_MESANO_REFERENCIA',
	ie_tipo_data			smallint	path	'IE_TIPO_DATA_TASY',
	cd_condicao_pagamento		bigint	path	'CD_CONDICAO_PAGAMENTO_TASY',
	nr_seq_tipo			bigint	path	'NR_SEQ_TIPO_TASY',
	ie_status			varchar(1)	path	'IE_STATUS_TASY',
	cd_estabelecimento		smallint	path	'CD_ESTABELECIMENTO_TASY',
	xml_transfer_third_party_items	xml		path	'ID_ITEMS');

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	*
from	xmltable('/ID_ITEMS/TRANSFER_THIRD_PARTY_ITEMS' passing c01_w.xml_transfer_third_party_items columns
	nr_sequencia_item		integer	path	'NR_SEQ_ITEM_TASY',
	dt_contabil			varchar(40)	path	'DT_CONTABIL',
	dt_lancamento			varchar(40)	path	'DT_LANCAMENTO',
	vl_repasse			varchar(20)	path	'VL_REPASSE_TASY',
	cd_medico			varchar(10)	path	'CD_MEDICO_TASY',
	nr_seq_tipo			bigint	path	'NR_SEQ_TIPO_ITEM_TASY',
	cd_centro_custo			integer	path	'CD_CENTRO_CUSTO_TASY',
	ie_partic_tributo		varchar(1)	path	'IE_PARTIC_TRIBUTO_TASY');

c02_w	c02%rowtype;


BEGIN

/*'Atualiza o status da fila para Em processamento'*/

update	intpd_fila_transmissao
set	ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

/*'Realiza o commit para não permite o status de processamento em casa de rollback por existir consistência. Existe tratamento de exceção abaixo para colocar o status de erro em caso de falha'*/

commit;

/*'Início de controle de falha'*/

begin
/*'Busca os dados da regra do registro da fila que está em processamento'*/

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w	:=	nr_seq_sistema_w;

/*'Alimenta as informações iniciais de controle e consistência de cada atributo do XML'*/

reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:=	'R';
reg_integracao_w.ie_sistema_externo		:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao			:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao		:=	nr_seq_regra_w;
reg_integracao_w.intpd_log_receb.delete;
reg_integracao_w.qt_reg_log			:=	0;

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	/*'Alimenta as informações de controle e consistência referente ao Elemento a ser processado no momento. É importante manter dentro do cursor e não fora.'*/

	reg_integracao_w.nm_tabela	:=	'REPASSE_TERCEIRO';
	reg_integracao_w.nm_elemento	:=	'TRANSFER_THIRD_PARTY';
	reg_integracao_w.nr_seq_visao	:=	'';

	if (c01_w.nr_seq_terceiro IS NOT NULL AND c01_w.nr_seq_terceiro::text <> '') then
		begin
		select	nr_sequencia
		into STRICT	nr_seq_terceiro_w
		from	terceiro
		where	nr_sequencia = c01_w.nr_seq_terceiro;
		exception
		when no_data_found then
			--Sequência do terceiro informado inválido. Sequência: #@nr_seq_terceiro_w#@
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1055701,'nr_seq_terceiro_w='||c01_w.nr_seq_terceiro);
		end;
	else
		--Não foi informado sequência do terceiro no Tasy
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1055702);
	end if;

	if (coalesce(c01_w.dt_mesano_referencia::text, '') = '') then
		--Não foi informada a data de mês/ano referência do repasse no Tasy
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1055703);
	end if;

	if (coalesce(c01_w.ie_tipo_data::text, '') = '') then
		--Não foi informado o tipo de data do repasse no Tasy
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1055704);
	end if;

	if (c01_w.cd_condicao_pagamento IS NOT NULL AND c01_w.cd_condicao_pagamento::text <> '') then
		begin
		select	cd_condicao_pagamento
		into STRICT	cd_condicao_pagamento_w
		from	condicao_pagamento
		where	cd_condicao_pagamento = c01_w.cd_condicao_pagamento;
		exception
		when no_data_found then
			--Código de condição de pagamento informado inválido. Código: #@cd_condicao_pagamento_w#@
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1055705,'cd_condicao_pagamento_w='||c01_w.cd_condicao_pagamento);
		end;
	else
		--Não foi informado a condição de pagamento do repasse no Tasy
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1055706);
	end if;

	if (c01_w.nr_seq_tipo IS NOT NULL AND c01_w.nr_seq_tipo::text <> '') then
		begin
		select	nr_sequencia
		into STRICT	nr_seq_tipo_w
		from	tipo_repasse
		where	nr_sequencia = c01_w.nr_seq_tipo;
		exception
		when no_data_found then
			--Sequência do tipo de repasse informado inválido. Sequência: #@nr_seq_tipo_w#@
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1055707,'nr_seq_tipo_w='||c01_w.nr_seq_tipo);
		end;
	else
		--Não foi informado a sequência do tipo de repasse no Tasy
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1055708);
	end if;

	if (coalesce(c01_w.ie_status::text, '') = '') then
		--Não foi informado o status do repasse no Tasy
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1055709);
	end if;

	if (coalesce(c01_w.cd_estabelecimento,0) > 0) then
		begin
		select	cd_estabelecimento
		into STRICT	cd_estabelecimento_w
		from	estabelecimento
		where	cd_estabelecimento = c01_w.cd_estabelecimento;
		exception
		when no_data_found then
			--Código de estabelecimento informado inválido. Código: #@cd_estabelecimento_w#@
			CALL wheb_mensagem_pck.exibir_mensagem_abort(759919,'cd_estabelecimento_w='||c01_w.cd_estabelecimento);
		end;
	else
		--Não foi informado código de estabelecimento no Tasy
		CALL wheb_mensagem_pck.exibir_mensagem_abort(759920);
	end if;

	dt_mesano_referencia_w	:= to_date(c01_w.dt_mesano_referencia,'dd/mm/yyyy hh24:mi:ss');

	select	max(a.nr_repasse_terceiro)
	into STRICT	nr_repasse_terceiro_w
	from	repasse_terceiro a
	where	a.nr_seq_terceiro = nr_seq_terceiro_w
	and	a.ie_status = 'A'
	and	a.dt_mesano_referencia = dt_mesano_referencia_w;

	if (coalesce(nr_repasse_terceiro_w::text, '') = '') then
		select	nextval('repasse_terceiro_seq')
		into STRICT	nr_repasse_terceiro_w
		;
	end if;

	begin

	--'Consiste cada atributo do XML'
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TERCEIRO', nr_seq_terceiro_w, 'N', repasse_terceiro_w.nr_seq_terceiro) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_w.nr_seq_terceiro := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_MESANO_REFERENCIA', dt_mesano_referencia_w, 'N', repasse_terceiro_w.dt_mesano_referencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_w.dt_mesano_referencia := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_TIPO_DATA', c01_w.ie_tipo_data, 'N', repasse_terceiro_w.ie_tipo_data) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_w.ie_tipo_data := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CONDICAO_PAGAMENTO', cd_condicao_pagamento_w, 'N', repasse_terceiro_w.cd_condicao_pagamento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_w.cd_condicao_pagamento := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO', nr_seq_tipo_w, 'N', repasse_terceiro_w.nr_seq_tipo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_w.nr_seq_tipo := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_STATUS', c01_w.ie_status, 'N', repasse_terceiro_w.ie_status) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_w.ie_status := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', cd_estabelecimento_w, 'N', repasse_terceiro_w.cd_estabelecimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_w.cd_estabelecimento := _ora2pg_r.ds_valor_retorno_p;

	/*'Efetua a atualização caso não possua consistência '*/

	if (reg_integracao_w.qt_reg_log = 0) then
		begin
		repasse_terceiro_w.nr_repasse_terceiro := nr_repasse_terceiro_w;
		repasse_terceiro_w.dt_atualizacao := clock_timestamp();
		repasse_terceiro_w.nm_usuario := 'Integração';

		insert into repasse_terceiro values (repasse_terceiro_w.*);

		/*'Registra a conversão que poderá ser utilizada em outros pontos de integração e para somente atualizar (update) num recebimento futuro do mesmo registro.'*/

		--gerar_conv_meio_externo(null, 'REPASSE_TERCEIRO', 'NR_REPASSE_TERCEIRO', repasse_terceiro_w.nr_repasse_terceiro, null, null, nr_seq_regra_w, 'A', repasse_terceiro_w.nm_usuario);
		end;
	end if;
	end;

	open c02;
	loop
	fetch c02 into
		c02_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		/*'Alimenta as informações de controle e consistência referente ao Elemento a ser processado no momento. É importante manter dentro do cursor e não fora.'*/

		reg_integracao_w.nm_tabela	:=	'REPASSE_TERCEIRO_ITEM';
		reg_integracao_w.nm_elemento	:=	'TRANSFER_THIRD_PARTY_ITEMS';
		reg_integracao_w.nr_seq_visao	:=	'';

		if (coalesce(c02_w.dt_contabil::text, '') = '') then
			--Não foi informada a data contabil do item de repasse no Tasy
			--wheb_mensagem_pck.exibir_mensagem_abort(1055710);
			dt_contabil_w	:= dt_mesano_referencia_w;
		else
			dt_contabil_w	:= c02_w.dt_contabil;
		end if;

		if (coalesce(c02_w.dt_lancamento::text, '') = '') then
			--Não foi informada a data de lançamento do item de repasse no Tasy
			--wheb_mensagem_pck.exibir_mensagem_abort(1055711);
			dt_lancamento_w	:= dt_mesano_referencia_w;
		else
			dt_lancamento_w	:= c02_w.dt_lancamento;
		end if;

		if (coalesce(c02_w.cd_medico,0) > 0) then
			begin
			select	cd_pessoa_fisica
			into STRICT	cd_medico_w
			from	medico
			where	cd_pessoa_fisica = c02_w.cd_medico;
			exception
			when no_data_found then
				--Código do médico do item de repasse informado é inválido. Código: #@cd_medico_w#@
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1055712,'cd_medico_w='||c02_w.cd_medico);
			end;
		else
			--Não foi informado código do médico do item de repasse no Tasy
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1055713);
		end if;

		if (coalesce(c02_w.nr_seq_tipo,0) > 0) then
			begin
			select	nr_sequencia
			into STRICT	nr_seq_tipo_item_w
			from	tipo_repasse_item
			where	nr_sequencia = c02_w.nr_seq_tipo;
			exception
			when no_data_found then
				--A sequência do tipo do item de repasse informado é inválido. Código: #@nr_seq_tipo_item_w#@
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1055714,'nr_seq_tipo_item_w='||c02_w.nr_seq_tipo);
			end;
		else
			--Não foi informado a sequência do tipo do item de repasse no Tasy
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1055715);
		end if;

		if (coalesce(c02_w.cd_centro_custo,0) > 0) then
			begin
			select	cd_centro_custo
			into STRICT	cd_centro_custo_w
			from	centro_custo
			where	cd_centro_custo = c02_w.cd_centro_custo;
			exception
			when no_data_found then
				--O código do centro de custo do item de repasse informado é inválido. Código: #@cd_centro_custo_w#@
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1055716,'cd_centro_custo_w='||c02_w.cd_centro_custo);
			end;
		else
			--Não foi informado o código do centro de custo do item de repasse no Tasy
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1055717);
		end if;

		if (coalesce(c02_w.ie_partic_tributo::text, '') = '') then
			--Não foi informado o campo se deve participar do tributo do repasse no Tasy
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1055718);
		end if;

		select	coalesce(max(nr_sequencia_item),0) + 1
		into STRICT	nr_sequencia_item_w
		from	repasse_terceiro_item
		where	nr_repasse_terceiro = nr_repasse_terceiro_w;

		begin
		--'Consiste cada atributo do XML'
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQUENCIA_ITEM', nr_sequencia_item_w, 'N', repasse_terceiro_item_w.nr_sequencia_item) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_item_w.nr_sequencia_item := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_CONTABIL', dt_contabil_w, 'N', repasse_terceiro_item_w.dt_contabil) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_item_w.dt_contabil := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_LANCAMENTO', dt_lancamento_w, 'N', repasse_terceiro_item_w.dt_lancamento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_item_w.dt_lancamento := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'VL_REPASSE', (replace(obter_valor_campo_separador(c02_w.vl_repasse,4,'|'),'.',','))::numeric , 'N', repasse_terceiro_item_w.vl_repasse) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_item_w.vl_repasse := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO', cd_medico_w, 'N', repasse_terceiro_item_w.cd_medico) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_item_w.cd_medico := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_TIPO', nr_seq_tipo_item_w, 'N', repasse_terceiro_item_w.nr_seq_tipo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_item_w.nr_seq_tipo := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CENTRO_CUSTO', cd_centro_custo_w, 'N', repasse_terceiro_item_w.cd_centro_custo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_item_w.cd_centro_custo := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_PARTIC_TRIBUTO', c02_w.ie_partic_tributo, 'N', repasse_terceiro_item_w.ie_partic_tributo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; repasse_terceiro_item_w.ie_partic_tributo := _ora2pg_r.ds_valor_retorno_p;

		/*'Efetua a atualização caso não possua consistência '*/

		if (reg_integracao_w.qt_reg_log = 0) then
			begin

			select	nextval('repasse_terceiro_item_seq')
			into STRICT	nr_sequencia_w
			;

			repasse_terceiro_item_w.nr_sequencia		:= nr_sequencia_w;
			repasse_terceiro_item_w.nr_repasse_terceiro	:= nr_repasse_terceiro_w;
			repasse_terceiro_item_w.dt_atualizacao		:= clock_timestamp();
			repasse_terceiro_item_w.nm_usuario		:= 'Integração';

			insert into repasse_terceiro_item values (repasse_terceiro_item_w.*);

			/*'Registra a conversão que poderá ser utilizada em outros pontos de integração e para somente atualizar (update) num recebimento futuro do mesmo registro.'*/

			--gerar_conv_meio_externo(null, 'REPASSE_TERCEIRO_ITEM', 'NR_SEQUENCIA', repasse_terceiro_item_w.nr_sequencia, null, null, nr_seq_regra_w, 'A', repasse_terceiro_item_w.nm_usuario);
			end;
		end if;
		end;

		end;
	end loop;
	close c02;
	end;
end loop;
close c01;
exception
when others then
	begin
	--'Em caso de qualquer falha o sistema captura a mensagem de erro, efetua o rollback, atualiza o status para Erro e registra a falha ocorrida'
	ds_erro_w	:= ds_erro_w || substr(sqlerrm,1,4000);
	rollback;
	update	intpd_fila_transmissao
	set	ie_status = 'E',
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;
	end;
end;

if (reg_integracao_w.qt_reg_log > 0) then
	begin
	/*'Em caso de qualquer consistência o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistência'*/

	rollback;

	update	intpd_fila_transmissao
	set	ie_status = 'E',
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;

	for i in 0..reg_integracao_w.qt_reg_log-1 loop
		intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
	end loop;
	end;
else
	update	intpd_fila_transmissao
	set	ie_status = 'S',
		nr_seq_documento = nr_repasse_terceiro_intpd_w
	where	nr_sequencia = nr_sequencia_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_repasse_terceiro ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

