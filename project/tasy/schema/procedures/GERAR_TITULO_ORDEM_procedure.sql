-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_titulo_ordem ( nr_ordem_compra_p bigint, cd_estabelecimento_p bigint, dt_ordem_compra_p timestamp, cd_moeda_p bigint, tx_juros_p bigint, tx_multa_p bigint, cd_pessoa_fisica_p text, cd_cgc_fornecedor_p text, nm_usuario_p text, ds_observacao_p text) AS $body$
DECLARE

 
nr_item_oc_venc_w		integer;
nr_titulo_w			bigint;
dt_vencimento_w			timestamp;
vl_vencimento_w			double precision;
cd_conta_financ_cpa_w		bigint;
nr_seq_classif_w			bigint;
cd_conta_contabil_w		varchar(20);
cd_centro_custo_w			integer;
nr_seq_conta_financ_w		bigint;
cd_estab_financeiro_w		bigint;

vl_titulo_w			double precision;
vl_total_w			double precision;

vl_classif_w			double precision;
vl_total_classif_w			double precision;

vl_criterio_w			double precision;
vl_total_criterio_w			double precision;

 
ie_origem_titulo_w			varchar(100);
ie_tipo_tit_oc_w			varchar(100);
nr_seq_trans_financ_w		bigint;
nr_seq_criterio_rateio_w		bigint;
pr_rateio_w			double precision;

ie_trib_ordem_tit_pagar_w		varchar(1);
vl_tributo_w			double precision;
pr_tributo_w			double precision;
cd_tributo_w			integer;
dt_imposto_w			timestamp;
ie_vencimento_w			varchar(1);
vl_base_tributo_w			double precision;
nr_seq_imposto_w			bigint;
vl_total_venc_w			double precision;
ie_gerar_titulo_w			varchar(1);

c01 CURSOR FOR 
SELECT	nr_item_oc_venc, 
	dt_vencimento, 
	vl_vencimento 
from	ordem_compra_venc 
where	nr_ordem_compra = nr_ordem_compra_p;

c02 CURSOR FOR 
SELECT	null, 
	a.cd_conta_contabil, 
	a.cd_centro_custo, 
	coalesce(a.nr_seq_conta_financ, cd_conta_financ_cpa_w), 
	sum(a.vl_item_liquido) * (vl_vencimento_w / vl_total_w) 
from 	ordem_compra_item a 
where	a.nr_ordem_compra = nr_ordem_compra_p 
and (coalesce(nr_seq_criterio_rateio::text, '') = '' or obter_total_percentual_rateio(a.nr_seq_criterio_rateio, clock_timestamp()) <> 100) 
group	by a.cd_conta_contabil, 
	a.cd_centro_custo, 
	a.nr_seq_conta_financ 

union all
 
SELECT	nr_seq_criterio_rateio, 
	null, 
	null, 
	null, 
	sum(a.vl_item_liquido) * (vl_vencimento_w / vl_total_w) 
from 	ordem_compra_item a 
where	a.nr_ordem_compra = nr_ordem_compra_p 
and	(nr_seq_criterio_rateio IS NOT NULL AND nr_seq_criterio_rateio::text <> '') 
and	obter_total_percentual_rateio(a.nr_seq_criterio_rateio, clock_timestamp()) = 100 
group	by nr_seq_criterio_rateio;

c03 CURSOR FOR 
SELECT	cd_conta_contabil, 
	cd_centro_custo, 
	cd_conta_financ, 
	pr_rateio 
from	ctb_criterio_rateio_item b 
where	nr_seq_criterio 	= nr_seq_criterio_rateio_w 
and	coalesce(b.pr_rateio,0)	> 0 
and (dt_ordem_compra_p 	>= coalesce(dt_inicio_vigencia, dt_ordem_compra_p) and dt_ordem_compra_p <= coalesce(dt_fim_vigencia, dt_ordem_compra_p)) 
order by pr_rateio;

c04 CURSOR FOR 
SELECT 	a.cd_tributo, 
	a.vl_tributo, 
	a.pr_tributo 
from	ordem_compra_item_trib	a 
where	a.nr_ordem_compra 	= nr_ordem_compra_p;


BEGIN 
 
select	coalesce(max(cd_conta_financ_cpa),1) 
into STRICT	cd_conta_financ_cpa_w 
from	parametro_fluxo_caixa 
where	cd_estabelecimento	= cd_estabelecimento_p;
 
select	coalesce(cd_estab_financeiro, cd_estabelecimento) 
into STRICT	cd_estab_financeiro_w 
from	estabelecimento 
where	cd_estabelecimento	= cd_estabelecimento_p;
 
select	sum(vl_item_liquido) 
into STRICT	vl_total_w 
from	ordem_compra_item 
where	nr_ordem_compra = nr_ordem_compra_p;
 
select	sum(vl_vencimento) 
into STRICT	vl_total_venc_w 
from	ordem_compra_venc 
where	nr_ordem_compra = nr_ordem_compra_p;
 
select	max(ie_origem_tit_oc), 
	max(nr_seq_trans_fin_oc), 
	max(ie_tipo_tit_oc), 
	max(ie_trib_ordem_tit_pagar) 
into STRICT	ie_origem_titulo_w, 
	nr_seq_trans_financ_w, 
	ie_tipo_tit_oc_w, 
	ie_trib_ordem_tit_pagar_w 
from	parametros_contas_pagar 
where	cd_estabelecimento	= cd_estabelecimento_p;
 
open c01;
loop 
fetch c01 into 
	nr_item_oc_venc_w, 
	dt_vencimento_w, 
	vl_vencimento_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
 
	begin 
	select	nextval('titulo_pagar_seq') 
	into STRICT	nr_titulo_w 
	;
	/* ricardo 05/04/2006 - a pedido do marcus, incluí em todos os inserts da titulo pagar o campo nr_lote_transf_trib como 0 (zero) */
 
	insert into titulo_pagar( 
		nr_titulo, 
		cd_estabelecimento, 
		dt_atualizacao, 
		nm_usuario, 
		dt_emissao, 
		dt_contabil, 
		dt_vencimento_original, 
		dt_vencimento_atual, 
		vl_titulo, 
		vl_saldo_titulo, 
		vl_saldo_juros, 
		vl_saldo_multa, 
		cd_moeda, 
		tx_juros, 
		tx_multa, 
		cd_tipo_taxa_juro, 
		cd_tipo_taxa_multa, 
		tx_desc_antecipacao, 
		ie_situacao, 
		ie_origem_titulo, 
		ie_tipo_titulo, 
		nr_seq_nota_fiscal, 
		cd_pessoa_fisica, 
		cd_cgc, 
		nr_documento, 
		ie_desconto_dia, 
		ds_observacao_titulo, 
		ie_status_tributo, 
		nr_lote_transf_trib, 
		cd_estab_financeiro, 
		nr_seq_trans_fin_contab, 
		ie_status, 
		nr_ordem_compra) 
	values (	nr_titulo_w, 
		cd_estabelecimento_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		dt_ordem_compra_p, 
		dt_ordem_compra_p, 
		dt_vencimento_w, 
		dt_vencimento_w, 
		vl_vencimento_w, 
		vl_vencimento_w, 
		0, 
		0, 
		cd_moeda_p, 
		tx_juros_p, 
		tx_multa_p, 
		1, 
		1, 
		0, 
		'A',	/* situação aberto */
 
		coalesce(ie_origem_titulo_w, 1),	/* origem nota fiscal */
 
		coalesce(ie_tipo_tit_oc_w, 0),	/* tipo nota fiscal */
 
		null, 
		cd_pessoa_fisica_p, 
		cd_cgc_fornecedor_p, 
		nr_ordem_compra_p, 
		'N', 
		ds_observacao_p, 
		'N', 
		0, 
		cd_estab_financeiro_w, 
		nr_seq_trans_financ_w, 
		'D', 
		nr_ordem_compra_p);
		 
	CALL atualizar_inclusao_tit_pagar(nr_titulo_w,nm_usuario_p);
	 
	if (ie_trib_ordem_tit_pagar_w = 'S') then 
		begin 
		open c04;
		loop 
		fetch c04 into	 
			cd_tributo_w, 
			vl_tributo_w, 
			pr_tributo_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			begin		 
			vl_base_tributo_w	:= dividir((vl_tributo_w * 100), pr_tributo_w);
			vl_base_tributo_w	:= dividir((vl_base_tributo_w * vl_vencimento_w), vl_total_venc_w);		
			vl_tributo_w		:= dividir((vl_tributo_w * vl_vencimento_w), vl_total_venc_w);
			 
			select	ie_vencimento, 
				ie_gerar_titulo_pagar 
			into STRICT	ie_vencimento_w, 
				ie_gerar_titulo_w 
			from	tributo 
			where	cd_tributo = cd_tributo_w;
			 
			if (ie_vencimento_w = 'C') then 
				dt_imposto_w	:= dt_ordem_compra_p;
			elsif (ie_vencimento_w = 'V') then 
				dt_imposto_w	:= dt_vencimento_w;
			else 
				dt_imposto_w	:= dt_ordem_compra_p;
			end if;
			 
			select	nextval('titulo_pagar_imposto_seq') 
			into STRICT	nr_seq_imposto_w 
			;
			 
			insert into titulo_pagar_imposto( 
				nr_sequencia, 
				nr_titulo, 
				cd_tributo, 
				ie_pago_prev, 
				dt_atualizacao, 
				nm_usuario, 
				dt_imposto, 
				vl_base_calculo, 
				vl_imposto, 
				vl_nao_retido, 
				ie_vencimento, 
				vl_base_nao_retido, 
				vl_trib_adic, 
				vl_base_adic, 
				ds_emp_retencao) 
			values (	nr_seq_imposto_w, 
				nr_titulo_w, 
				cd_tributo_w, 
				'V', 
				clock_timestamp(), 
				nm_usuario_p, 
				dt_imposto_w, 
				vl_base_tributo_w, 
				vl_tributo_w, 
				0, 
				ie_vencimento_w, 
				0, 
				0, 
				0, 
				null);
				 
			if (ie_gerar_titulo_w = 'S') then 
				CALL gerar_titulo_tributo(nr_seq_imposto_w, nm_usuario_p);
			end if;
			end;
		end loop;
		close c04;
		end;
	end if;
 
	nr_seq_classif_w	:= 0;
	vl_total_classif_w	:= 0;
	 
	open c02;
	loop 
	fetch c02 into 
		nr_seq_criterio_rateio_w, 
		cd_conta_contabil_w, 
		cd_centro_custo_w, 
		nr_seq_conta_financ_w, 
		vl_classif_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin				 
		if (coalesce(nr_seq_criterio_rateio_w::text, '') = '') then 
			begin 
			update	titulo_pagar_classif 
			set	vl_titulo = (vl_titulo + vl_classif_w) 
			where	nr_titulo = nr_titulo_w 
			and	coalesce(nr_seq_conta_financ,0) = coalesce(nr_seq_conta_financ_w,0) 
			and	coalesce(cd_centro_custo,0) = coalesce(cd_centro_custo_w,0) 
			and	coalesce(cd_conta_contabil,0) = coalesce(cd_conta_contabil_w,0);
			 
			if (NOT FOUND) then 
				begin 
				nr_seq_classif_w	:= nr_seq_classif_w + 1;
				 
				insert into titulo_pagar_classif( 
					nr_titulo, 
					nr_sequencia, 
					vl_titulo, 
					dt_atualizacao, 
					nm_usuario, 
					cd_conta_contabil, 
					cd_centro_custo, 
					nr_seq_conta_financ) 
				values (	nr_titulo_w, 
					nr_seq_classif_w, 
					vl_classif_w, 
					clock_timestamp(), 
					nm_usuario_p, 
					cd_conta_contabil_w, 
					cd_centro_custo_w, 
					nr_seq_conta_financ_w);
				end;
			end if;
			end;
		else 
			begin 
			vl_total_criterio_w 	:= 0;
			vl_criterio_w 		:= vl_classif_w;
			 
			open c03;
			loop 
			fetch c03 into	 
				cd_conta_contabil_w, 
				cd_centro_custo_w, 
				nr_seq_conta_financ_w, 
				pr_rateio_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				begin 
				vl_criterio_w		:= dividir((vl_classif_w * pr_rateio_w), 100);
				 
				update	titulo_pagar_classif 
				set	vl_titulo = (vl_titulo + vl_criterio_w) 
				where	nr_titulo = nr_titulo_w 
				and	coalesce(nr_seq_conta_financ,0) = coalesce(nr_seq_conta_financ_w,0) 
				and	coalesce(cd_centro_custo,0) = coalesce(cd_centro_custo_w,0) 
				and	coalesce(cd_conta_contabil,0) = coalesce(cd_conta_contabil_w,0);
				 
				if (NOT FOUND) then 
					begin 
					nr_seq_classif_w	:= nr_seq_classif_w + 1;
					 
					insert into titulo_pagar_classif( 
						nr_titulo, 
						nr_sequencia, 
						vl_titulo, 
						dt_atualizacao, 
						nm_usuario, 
						cd_conta_contabil, 
						cd_centro_custo, 
						nr_seq_conta_financ) 
					values (	nr_titulo_w, 
						nr_seq_classif_w, 
						vl_criterio_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						cd_conta_contabil_w, 
						cd_centro_custo_w, 
						nr_seq_conta_financ_w);
					end;
				end if;
				 
				vl_total_criterio_w := vl_total_criterio_w + vl_criterio_w;
				end;
			end loop;
			close c03;
			 
			if (vl_classif_w <> vl_total_criterio_w) then 
				update	titulo_pagar_classif 
				set	vl_titulo	= vl_titulo + vl_classif_w - vl_total_criterio_w 
				where	nr_titulo	= nr_titulo_w 
				and	nr_sequencia	= nr_seq_classif_w;
			end if;
			 
			 
			end;
		end if;
		 
		vl_total_classif_w	:= vl_total_classif_w + vl_classif_w;
		end;
	end loop;
	close c02;
	 
	if (vl_vencimento_w <> vl_total_classif_w) then 
		update	titulo_pagar_classif 
		set	vl_titulo	= vl_titulo + vl_vencimento_w - vl_total_classif_w 
		where	nr_titulo	= nr_titulo_w 
		and	nr_sequencia	= nr_seq_classif_w;
	end if;
 
	update	ordem_compra_venc 
	set	nr_titulo_pagar = nr_titulo_w 
	where	nr_ordem_compra = nr_ordem_compra_p 
	and	nr_item_oc_venc = nr_item_oc_venc_w;
 
	end;
end loop;
close c01;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_titulo_ordem ( nr_ordem_compra_p bigint, cd_estabelecimento_p bigint, dt_ordem_compra_p timestamp, cd_moeda_p bigint, tx_juros_p bigint, tx_multa_p bigint, cd_pessoa_fisica_p text, cd_cgc_fornecedor_p text, nm_usuario_p text, ds_observacao_p text) FROM PUBLIC;

