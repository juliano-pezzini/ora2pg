-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_analise_glosa_it_novo_pos ( nr_seq_analise_p bigint, nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_conta_pos_p bigint, qt_liberar_p bigint, nr_seq_mot_liberacao_p bigint, ds_parecer_p text, cd_estabelecimento_p bigint, nr_seq_grupo_atual_p bigint, ie_obriga_parecer_p text, ie_obriga_ocorrencia_p text, nm_usuario_p text, ie_acao_glosar_p text default 'N') AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Fazer todo o tratamento de glosa individual (um item só selecionado) na
Análise de contas médicas nova.
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: Alterações nrssa rotina devem ser refletidas na pls_analise_glosar_item_pos, pois
esta rotina foi criada à partir daquela para contemplar nova geração de pós-estabelecido.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_observacao_w			varchar(4000);
ds_ocorrencia_w			varchar(255);
cd_ocorrencia_w			varchar(30);
cd_motivo_tiss_w		varchar(10)	:= null;

nr_seq_ocorrencia_w		bigint;
nr_seq_motivo_glosa_w		bigint;
qt_registro_w			bigint;
ie_valor_base_w			varchar(10)	:= null;
ie_tipo_liberacao_w		varchar(10);
nr_seq_conta_w			bigint;
nr_seq_item_w			bigint;
ie_tipo_item_w			varchar(10);
nr_seq_conta_proc_w		bigint;

vl_unitario_apres_w		double precision	:= null;
vl_unitario_calc_w		double precision	:= null;
vl_unitario_w			double precision	:= null;
vl_glosa_w			double precision	:= null;
vl_liberado_w			double precision	:= null;
vl_pag_medico_conta_w		double precision	:= null;
vl_saldo_w			double precision	:= null;
vl_calculado_w			double precision	:= null;
vl_apresentado_w		double precision	:= null;
vl_base_w			double precision	:= null;
ie_item_w			varchar(1)	:= 'S';
nr_id_w				varchar(30)	:= null;
nr_seq_glosa_conta_w		bigint	:= null;

nr_seq_conta_mat_w		bigint;
nr_seq_segurado_w		bigint;
ie_tipo_item_ww			bigint;
nr_seq_glosa_vinculada_w	bigint;
nr_seq_ocor_benef_w		bigint;
ie_tipo_w			varchar(10);
ie_tipo_historico_w		integer;
qt_glosa_w			double precision;
qt_original_w			double precision;
vl_administracao_w		double precision;
vl_liberado_material_fat_w	double precision;
vl_liberado_co_fat_w		double precision;
vl_liberado_hi_fat_w		double precision;
vl_glosa_material_fat_w		double precision;
vl_glosa_hi_fat_w		double precision;
vl_glosa_co_fat_w		double precision;
vl_materiais_calc_w		double precision	:= 0;
vl_custo_operacional_calc_w	double precision	:= 0;
vl_medico_calc_w		double precision	:= 0;
nr_seq_analise_ref_w		bigint;
vl_glosa_taxa_co_w     		pls_conta_pos_estabelecido.vl_glosa_taxa_co%type;
vl_glosa_taxa_material_w	pls_conta_pos_estabelecido.vl_glosa_taxa_material%type;
vl_glosa_taxa_servico_w 	pls_conta_pos_estabelecido.vl_glosa_taxa_servico%type;
vl_lib_taxa_co_w     		pls_conta_pos_estabelecido.vl_lib_taxa_co%type;
vl_lib_taxa_material_w		pls_conta_pos_estabelecido.vl_lib_taxa_material%type;
vl_lib_taxa_servico_w     	pls_conta_pos_estabelecido.vl_lib_taxa_servico%type;
vl_taxa_co_w 			pls_conta_pos_estabelecido.vl_taxa_co%type;
vl_taxa_material_w		pls_conta_pos_estabelecido.vl_taxa_material%type;
vl_taxa_servico_w 		pls_conta_pos_estabelecido.vl_taxa_servico%type;
qt_liberada_pos_w		pls_conta_proc.qt_procedimento%type;
qt_liberada_w			pls_conta_proc.qt_procedimento%type;
vl_beneficiario_w		pls_conta_pos_estabelecido.vl_beneficiario%type;
ie_status_faturamento_w		pls_conta_pos_estabelecido.ie_status_faturamento%type;
ie_vl_pag_prestador_w		pls_conta_pos_estabelecido.ie_vl_pag_prestador%type;
/* Glosas e ocorrências incluídas na tela
Tem que ser repassadas para as tabelas quentes */
c01 CURSOR FOR
	SELECT	a.nr_seq_ocorrencia,
		CASE WHEN coalesce(a.nr_seq_ocorrencia::text, '') = '' THEN a.nr_seq_motivo_glosa  ELSE null END
	from	w_pls_analise_glosa_ocor a
	where	a.nr_seq_analise	 	= nr_seq_analise_p
	and	a.nm_usuario			= nm_usuario_p
	and	a.ie_situacao			= 'A'
	and	a.ie_inserido_auditor		= 'S'
	and	(nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '');


BEGIN

/* ---------------------------------Consistências --------------------------------------*/

if (coalesce(nr_seq_mot_liberacao_p::text, '') = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(204574);
end if;

if (ie_obriga_parecer_p = 'S') and (coalesce(ds_parecer_p::text, '') = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(205753);
end if;

select	max(a.nr_seq_analise_ref)
into STRICT	nr_seq_analise_ref_w
from	pls_analise_conta a
where	a.nr_sequencia	= nr_seq_analise_p;

if (ie_obriga_ocorrencia_p = 'S') then
	select	count(1)
	into STRICT	qt_registro_w
	from	w_pls_analise_glosa_ocor a
	where (a.nr_seq_analise = nr_seq_analise_p or
		a.nr_seq_analise = nr_seq_analise_ref_w)
	and	a.nm_usuario		= nm_usuario_p
	and	(a.nr_seq_ocorrencia IS NOT NULL AND a.nr_seq_ocorrencia::text <> '')
	and (a.ie_inserido_auditor = 'S' or (coalesce(a.ie_inserido_auditor::text, '') = '' and a.ie_situacao = 'A'));

	if (qt_registro_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(205754);
	end if;
end if;
/*------------------------- Se não gerou nenhuma consistência  ----------------------*/

if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then
	nr_seq_item_w		:= nr_seq_conta_proc_p;
	ie_tipo_item_w		:= 'P';

	select	a.nr_seq_conta,
		a.nr_sequencia,
		a.qt_procedimento,
		b.qt_item + coalesce(b.qt_glosa, 0)	qt_original, --Nesse momento o qt_item é a quantidade original
		(b.vl_custo_operacional_calc + b.vl_materiais_calc + b.vl_medico_calc +
			b.vl_taxa_material + b.vl_taxa_co + b.vl_taxa_servico),
		(b.vl_lib_taxa_material + b.vl_lib_taxa_co + b.vl_lib_taxa_servico),
		b.vl_medico_calc,
		b.vl_materiais_calc,
		b.vl_custo_operacional_calc,
		b.vl_taxa_co,
		b.vl_taxa_material,
		b.vl_taxa_servico,
		b.qt_item,
		b.vl_custo_operacional_calc + b.vl_materiais_calc + b.vl_medico_calc,
		b.ie_vl_pag_prestador
	into STRICT	nr_seq_conta_w,
		nr_seq_conta_proc_w,
		qt_liberada_w,
		qt_original_w,
		vl_calculado_w,
		vl_administracao_w,
		vl_medico_calc_w,
		vl_materiais_calc_w,
		vl_custo_operacional_calc_w,
		vl_taxa_co_w,
		vl_taxa_material_w,
		vl_taxa_servico_w,
		qt_liberada_pos_w,
		vl_beneficiario_w, --apenas serve para definir se tem valor de pós, o valor exato não importa aqui
		ie_vl_pag_prestador_w
	from	pls_conta_proc 		a,
		pls_conta_pos_proc	b
	where	a.nr_sequencia	= b.nr_seq_conta_proc
	and	b.nr_sequencia	= nr_seq_conta_pos_p
	and	a.nr_sequencia	= nr_seq_conta_proc_p;
elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then
	nr_seq_item_w	:= nr_seq_conta_mat_p;
	ie_tipo_item_w	:= 'M';

	select	a.nr_seq_conta,
		a.nr_sequencia,
		a.qt_material,
		b.qt_item + coalesce(b.qt_glosa, 0)	qt_original,
		b.vl_materiais_calc + b.vl_taxa_material,
		b.vl_lib_taxa_material,
		0,
		b.vl_materiais_calc,
		0,
		0,
		b.vl_taxa_material,
		0,
		b.qt_item,
		b.vl_lib_taxa_material + b.vl_materiais,
		b.ie_vl_pag_prestador
	into STRICT	nr_seq_conta_w,
		nr_seq_conta_mat_w,
		qt_liberada_w,
		qt_original_w,
		vl_calculado_w,
		vl_administracao_w,
		vl_medico_calc_w,
		vl_materiais_calc_w,
		vl_custo_operacional_calc_w,
		vl_taxa_co_w,
		vl_taxa_material_w,
		vl_taxa_servico_w,
		qt_liberada_pos_w,
		vl_beneficiario_w,
		ie_vl_pag_prestador_w
	from	pls_conta_mat 		a,
		pls_conta_pos_mat	b
	where	a.nr_sequencia	= b.nr_seq_conta_mat
	and	b.nr_sequencia	= nr_seq_conta_pos_p
	and	a.nr_sequencia	= nr_seq_conta_mat_p;
elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	ie_item_w	:= 'N';
	nr_seq_conta_w	:= nr_seq_conta_p;
end if;

if (nr_seq_conta_w IS NOT NULL AND nr_seq_conta_w::text <> '') then

	select	max(nr_seq_segurado)
	into STRICT	nr_seq_segurado_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_w;

	/* Inserir as novas glosas */

	open C01;
	loop
	fetch C01 into
		nr_seq_ocorrencia_w,
		nr_seq_motivo_glosa_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		select	max(cd_ocorrencia),
			'O',
			max(nr_seq_motivo_glosa),
			max(ds_ocorrencia)
		into STRICT	cd_ocorrencia_w,
			ie_tipo_w,
			nr_seq_glosa_vinculada_w,
			ds_ocorrencia_w
		from	pls_ocorrencia
		where	nr_sequencia	= nr_seq_ocorrencia_w;

		if (nr_seq_glosa_vinculada_w IS NOT NULL AND nr_seq_glosa_vinculada_w::text <> '') then
			select	cd_motivo_tiss
			into STRICT	cd_motivo_tiss_w
			from	tiss_motivo_glosa a
			where	a.nr_sequencia	= nr_seq_glosa_vinculada_w;
		end if;

		if (cd_ocorrencia_w IS NOT NULL AND cd_ocorrencia_w::text <> '') then
			if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
				ie_tipo_item_ww	:= 3;
			elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
				ie_tipo_item_ww	:= 4;
			elsif (nr_seq_conta_w IS NOT NULL AND nr_seq_conta_w::text <> '') then
				ie_tipo_item_ww	:= 8;
			end if;

			nr_seq_ocor_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_w, nr_seq_ocorrencia_w, null, null, null, null, null, null, nm_usuario_p, 'Ocorrência inserida pelo auditor '||obter_nome_usuario(nm_usuario_p), nr_seq_glosa_vinculada_w, ie_tipo_item_ww, cd_estabelecimento_p, 'N', null, nr_seq_ocor_benef_w, nr_seq_conta_pos_p, null, 'S', null, null, null, ie_tipo_item_w);

			ie_tipo_historico_w	:= 6;

			ds_observacao_w	:= 'Ocorrência inserida: ' || cd_ocorrencia_w || ' - ' || ds_ocorrencia_w;
		end if;
		qt_glosa_w	:= qt_original_w - qt_liberar_p;

		update	pls_ocorrencia_benef
		set	ie_lib_manual	= 'S',
			qt_glosa_fat	= qt_glosa_w
		where	nr_seq_conta_pos_estab	= nr_seq_conta_pos_p
		and	nr_seq_ocorrencia	= nr_seq_ocorrencia_w;

		if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then
			update	pls_ocorrencia_benef
			set	ie_lib_manual	= 'S',
				qt_glosa_fat	= qt_glosa_w
			where	nr_seq_conta_pos_proc	= nr_seq_conta_pos_p
			and	nr_seq_ocorrencia	= nr_seq_ocorrencia_w;
		elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then
			update	pls_ocorrencia_benef
			set	ie_lib_manual	= 'S',
				qt_glosa_fat	= qt_glosa_w
			where	nr_seq_conta_pos_proc	= nr_seq_conta_pos_p
			and	nr_seq_ocorrencia	= nr_seq_ocorrencia_w;
		end if;

		/* Gravar histórico no item, indicando inserção de nova glosa/ocorrência */

		insert into pls_hist_analise_conta(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_analise,
			nr_seq_conta_proc,
			nr_seq_conta_mat,
			nr_seq_proc_partic,
			ie_tipo_historico,
			ds_observacao,
			nr_seq_grupo,
			ds_call_stack)
		values (nextval('pls_hist_analise_conta_seq'),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nr_seq_analise_p,
			nr_seq_conta_proc_w,
			nr_seq_conta_mat_w,
			null,
			ie_tipo_historico_w,
			ds_observacao_w,
			nr_seq_grupo_atual_p,
			substr(dbms_utility.format_call_stack,1,4000));
		end;
	end loop;
	close C01;

	/* Se não estiver selecionada uma conta médica */

	if (ie_item_w = 'S') and
		((coalesce(ie_vl_pag_prestador_w,'N') = 'N') or (coalesce(qt_liberar_p,0) = 0))and
		((not(vl_beneficiario_w	> 0 AND qt_liberada_w		= qt_liberada_pos_w)) or (ie_acao_glosar_p	= 'S')) then
		vl_liberado_w		:= (coalesce(vl_calculado_w,0) ) * dividir_sem_round(coalesce(qt_liberar_p,0),coalesce(qt_original_w,0));

		vl_liberado_material_fat_w 	:= dividir( (vl_materiais_calc_w * (vl_liberado_w)),vl_calculado_w);
		vl_liberado_co_fat_w	   	:= dividir( (vl_custo_operacional_calc_w * (vl_liberado_w)),vl_calculado_w);
		vl_liberado_hi_fat_w		:= dividir( (vl_medico_calc_w * (vl_liberado_w)),vl_calculado_w);
		vl_lib_taxa_co_w     		:= dividir( (vl_taxa_co_w * (vl_liberado_w)),vl_calculado_w);
		vl_lib_taxa_material_w		:= dividir( (vl_taxa_material_w * (vl_liberado_w)),vl_calculado_w);
		vl_lib_taxa_servico_w     	:= dividir( (vl_taxa_servico_w * (vl_liberado_w)),vl_calculado_w);


		if (coalesce(vl_liberado_material_fat_w,0) < 0) then
			vl_liberado_material_fat_w := 0;
		end if;

		if (coalesce(vl_liberado_co_fat_w,0) < 0) then
			vl_liberado_co_fat_w := 0;
		end if;

		if (coalesce(vl_liberado_hi_fat_w,0) < 0) then
			vl_liberado_hi_fat_w := 0;
		end if;

		if (coalesce(vl_lib_taxa_co_w,0) < 0) then
			vl_lib_taxa_co_w := 0;
		end if;

		if (coalesce(vl_lib_taxa_material_w,0) < 0) then
			vl_lib_taxa_material_w := 0;
		end if;

		if (coalesce(vl_lib_taxa_servico_w,0) < 0) then
			vl_lib_taxa_servico_w := 0;
		end if;

		vl_liberado_w	:= 	coalesce(vl_liberado_material_fat_w,0) + coalesce(vl_liberado_co_fat_w,0) + coalesce(vl_liberado_hi_fat_w,0) +
					coalesce(vl_lib_taxa_co_w,0) + coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_lib_taxa_servico_w,0);

		vl_glosa_material_fat_w		:= vl_materiais_calc_w	- vl_liberado_material_fat_w;
		vl_glosa_hi_fat_w		:= vl_medico_calc_w 	- vl_liberado_hi_fat_w;
		vl_glosa_co_fat_w		:= vl_custo_operacional_calc_w - vl_liberado_co_fat_w;
		vl_glosa_taxa_co_w     		:= vl_taxa_co_w 	- vl_lib_taxa_co_w;
		vl_glosa_taxa_material_w	:= vl_taxa_material_w 	- vl_lib_taxa_material_w;
		vl_glosa_taxa_servico_w	 	:= vl_taxa_servico_w 	- vl_lib_taxa_servico_w;

		if (vl_glosa_material_fat_w < 0) then
			vl_glosa_material_fat_w := 0;
		end if;

		if (vl_glosa_hi_fat_w < 0) then
			vl_glosa_hi_fat_w := 0;
		end if;

		if (vl_glosa_co_fat_w < 0) then
			vl_glosa_co_fat_w := 0;
		end if;

		if (vl_glosa_taxa_co_w < 0) then
			vl_glosa_taxa_co_w := 0;
		end if;

		if (vl_glosa_taxa_material_w < 0) then
			vl_glosa_taxa_material_w := 0;
		end if;

		if (vl_glosa_taxa_servico_w < 0) then
			vl_glosa_taxa_servico_w := 0;
		end if;

		if (vl_liberado_w > 0) then
			ie_status_faturamento_w	:= 'L';
		else
			ie_status_faturamento_w	:= 'N';
		end if;


		if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then

			update	pls_conta_pos_proc
			set	qt_item				= coalesce(qt_liberar_p,0),
				ie_status_faturamento 		= ie_status_faturamento_w,
				vl_liberado_material_fat 	= vl_liberado_material_fat_w,
				vl_liberado_co_fat	   	= vl_liberado_co_fat_w,
				vl_liberado_hi_fat		= vl_liberado_hi_fat_w,
				vl_medico			= vl_liberado_hi_fat_w,
				vl_materiais			= vl_liberado_material_fat_w,
				vl_custo_operacional		= vl_liberado_co_fat_w,
				vl_glosa_material_fat		= vl_glosa_material_fat_w,
				vl_glosa_hi_fat			= vl_glosa_hi_fat_w,
				vl_glosa_co_fat			= vl_glosa_co_fat_w,
				vl_lib_taxa_co     		= vl_lib_taxa_co_w,
				vl_lib_taxa_material		= vl_lib_taxa_material_w,
				vl_lib_taxa_servico     	= vl_lib_taxa_servico_w,
				vl_glosa_taxa_co     		= vl_glosa_taxa_co_w,
				vl_glosa_taxa_material		= vl_glosa_taxa_material_w,
				vl_glosa_taxa_servico	 	= vl_glosa_taxa_servico_w,
				dt_atualizacao			= clock_timestamp(),
				nm_usuario			= nm_usuario_p
			where	nr_sequencia			= nr_seq_conta_pos_p;

		elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then

			update	pls_conta_pos_mat
				set	qt_item				= coalesce(qt_liberar_p,0),
					ie_status_faturamento 		= ie_status_faturamento_w,
					vl_liberado_material_fat 	= vl_liberado_material_fat_w,
					vl_materiais			= vl_liberado_material_fat_w,
					vl_glosa_material_fat		= vl_glosa_material_fat_w,
					vl_lib_taxa_material		= vl_lib_taxa_material_w,
					vl_glosa_taxa_material		= vl_glosa_taxa_material_w,
					dt_atualizacao			= clock_timestamp(),
					nm_usuario			= nm_usuario_p
				where	nr_sequencia			= nr_seq_conta_pos_p;

		end if;
	end if;

	if (nr_seq_grupo_atual_p IS NOT NULL AND nr_seq_grupo_atual_p::text <> '') then
		/* Gravar fluxo de análise */

		CALL pls_analise_atual_fluxo_audit(nr_seq_analise_p,
					nr_seq_conta_w,
					nr_seq_conta_proc_w,
					nr_seq_conta_mat_w,
					null,
					nr_seq_conta_pos_p,
					nr_seq_grupo_atual_p,
					nr_seq_mot_liberacao_p,
					ds_parecer_p,
					'N',
					'N',
					nm_usuario_p,
					'N',
					'F');
	end if;

	/* Mudar situação das ocorrências e glosas conforme alterado no WDLG */

	CALL pls_analise_altera_sit_ocor(nr_seq_analise_p,nm_usuario_p);
end if;

/* Não pode ter commit */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_analise_glosa_it_novo_pos ( nr_seq_analise_p bigint, nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_conta_pos_p bigint, qt_liberar_p bigint, nr_seq_mot_liberacao_p bigint, ds_parecer_p text, cd_estabelecimento_p bigint, nr_seq_grupo_atual_p bigint, ie_obriga_parecer_p text, ie_obriga_ocorrencia_p text, nm_usuario_p text, ie_acao_glosar_p text default 'N') FROM PUBLIC;

