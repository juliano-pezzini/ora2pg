-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos_acumulado_seq AS (nr_sequencia		bigint,
		qt_acumulado		double precision,
		qt_executada		double precision,
		nr_seq_orcamento	bigint);
CREATE TYPE campos AS (	tx_procedimento 	double precision,
			tx_medico		double precision,
			tx_custo_operacional	double precision,
			tx_auxiliar		double precision,
			tx_anestesista		double precision);


CREATE OR REPLACE PROCEDURE gerar_taxa_qtde_exec_valor_orc ( nr_seq_orcamento_p bigint) AS $body$
DECLARE



----------------------------------------------------------------------------------------------------
type vetor_acumulado_seq is
	table of campos_acumulado_seq index by integer;
type Vetor is table of campos index 	by integer;
Vetor_w			Vetor;

i				integer := 1;
x				integer	:= 1;
vetor_acumulado_seq_w		vetor_acumulado_seq;

--------------------------------------------------------------------------------------------------------
tx_proc_w			double precision;
tx_procedimento_w			double precision;
cd_grupo_proc_w			bigint;
cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
ie_regra_execucao_w		varchar(01);
qt_exec_max_w			double precision;
qt_exec_min_w			double precision;
qt_exec_w			double precision;
ie_regra_w			varchar(01)	:= 'N';
nr_sequencia_w			bigint;
tx_custo_oper_w			double precision;
tx_custo_operacional_w		double precision;
tx_medico_w			double precision;
tx_medico_proc_w			double precision;

cd_area_procedimento_regra_w	bigint;
cd_especialidade_regra_w 		bigint;
cd_grupo_proc_regra_w		bigint;
cd_procedimento_regra_w 		bigint;
ie_origem_proced_regra_w		bigint;
qt_min_regra_per_w		bigint;
cd_setor_procedimento_w		integer;
cd_pessoa_fisica_w		varchar(10);
vl_procedimento_w			double precision;
cd_estabelecimento_w		integer;
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w		bigint;
qt_registro_w			bigint;
ie_ajuste_proc_w			varchar(10)	:= 'N';
vl_custo_operacional_w		double precision;
vl_medico_w			double precision;
nr_seq_procedimento_w		bigint;
ie_aplica_taxa_filme_w		varchar(01)		:= 'N';
vl_materiais_w			double precision;
vl_proced_ant_w			double precision:= 0;
vl_original_tabela_w		double precision:= 0;
nr_seq_ant_w			bigint:= 0;
varconsideramenordata_w		varchar(1);
ie_acumulou_w			varchar(1):= 'N';
qt_proc_lido_w			double precision;
ie_existe_w			varchar(1):= 'N';
ie_tipo_atendimento_w		smallint;
tx_proc_via_princ_w		double precision;
tx_proc_maior_valor_w		double precision;
nr_registro_atual_w			bigint := 0;
ie_via_acesso_proc_w		varchar(1);
nr_seq_proc_via_princ_w		bigint;
ie_aplica_tx_filme_w		varchar(1) := 'N';
ie_aplica_valor_informado_w		varchar(1) := 'N';
ie_classificacao_w			varchar(1);
cd_medico_executor_w		varchar(10);
cd_medico_executor_regra_w		varchar(10);
ie_aplica_tx_filme_conta_w	varchar(1) := 'N';
ie_regra_arredondamento_tx_w	varchar(1):= 'N';
ie_tipo_rounded_w			varchar(1);
vl_custo_operacional_ww		double precision;
vl_medico_ww			double precision;
vl_procedimento_ww			double precision;
vl_materiais_ww			double precision;
dt_orcamento_w			timestamp;
vl_anestesista_w		double precision;
vl_auxiliares_w			double precision;
ie_lado_w			varchar(1);
cd_tipo_procedimento_w		procedimento.cd_tipo_procedimento%type;
ie_regra_tx_qtde_exec_w		varchar(1);
qt_procedimento_orc_w		orcamento_paciente_proc.qt_procedimento%type;
qt_exec_ww			double precision;
cd_setor_atendimento_w		integer;
cd_edicao_amb_filtro_w		bigint; -- pega de procedimento paciente
cd_edicao_amb_w			bigint; --na conta vem por parametro
cd_tipo_proced_regra_w		convenio_regra_qtde.cd_tipo_procedimento%type;
tx_auxiliar_w			double precision;
tx_aux_w			double precision;
tx_anestesista_w		double precision;
tx_anest_w			double precision;
cd_setor_proc_w			setor_atendimento.cd_setor_atendimento%type;
ie_tipo_ordenacao_w		convenio_regra_qtde.ie_regra_valor%type;
qt_porte_anestesico_w		orcamento_paciente_proc.qt_porte_anestesico%type;
cd_plano_w                      orcamento_paciente.cd_plano%type;

c00 CURSOR FOR
	SELECT	distinct a.ie_regra_valor
	from	convenio_regra_qtde a
	where	a.cd_estabelecimento	= cd_estabelecimento_w
	and	a.cd_convenio		= cd_convenio_w
	and 	coalesce(a.ie_situacao,'A')	= 'A'
	and	a.ie_regra_execucao	= 'O';

c01 CURSOR FOR
	SELECT	ie_regra_execucao,
		nr_sequencia,
		cd_area_procedimento,
		cd_especialidade,
		cd_grupo_proc,
		cd_procedimento,
		ie_origem_proced,
		qt_min_regra_per,
		a.cd_medico_executor,
		a.cd_setor_atendimento,
		a.cd_edicao_amb,
		a.cd_tipo_procedimento
	from	convenio_regra_qtde a
	where	1=1
 	and     a.cd_estabelecimento					= cd_estabelecimento_w
	and	a.cd_convenio						= cd_convenio_w
	and	coalesce(a.cd_categoria, cd_categoria_w)			= cd_categoria_w
        and	coalesce(a.cd_plano, coalesce(cd_plano_w,'0'))     		= coalesce(cd_plano_w,'0')
 	and	coalesce(a.cd_area_procedimento, cd_area_procedimento_w)	= cd_area_procedimento_w
	and	coalesce(a.cd_especialidade, cd_especialidade_w)		= cd_especialidade_w
	and	coalesce(a.cd_grupo_proc, cd_grupo_proc_w)			= cd_grupo_proc_w
	and	coalesce(a.cd_procedimento, cd_procedimento_w)		= cd_procedimento_w
	and	coalesce(a.ie_origem_proced, ie_origem_proced_w)		= ie_origem_proced_w
	and	coalesce(a.nr_seq_proc_interno, coalesce(nr_seq_proc_interno_w,0))= coalesce(nr_seq_proc_interno_w,0)
	and 	coalesce(a.cd_setor_atendimento, coalesce(cd_setor_proc_w,cd_setor_procedimento_w)) = coalesce(cd_setor_proc_w,cd_setor_procedimento_w)
	and	coalesce(a.ie_regra_valor,'N')				= ie_tipo_ordenacao_w
	and	coalesce(a.ie_tipo_atendimento,coalesce(ie_tipo_atendimento_w,0))	= coalesce(ie_tipo_atendimento_w,0)
	and	coalesce(a.cd_medico_executor, coalesce(cd_medico_executor_w,0))  = coalesce(cd_medico_executor_w,0)
	and	coalesce(a.ie_lado, coalesce(ie_lado_w,'A'))			= coalesce(ie_lado_w,'A')
	and	coalesce(a.cd_tipo_procedimento, coalesce(cd_tipo_procedimento_w,0)) = coalesce(cd_tipo_procedimento_w,0)
	and 	coalesce(a.ie_situacao,'A')					= 'A'
	and	a.ie_regra_execucao					= 'O'
	and	a.dt_vigencia						=
			(SELECT		max(b.dt_vigencia)
			from	convenio_regra_qtde b
			where	b.cd_estabelecimento					= cd_estabelecimento_w
			and	b.cd_convenio						= cd_convenio_w
			and	coalesce(b.cd_categoria, cd_categoria_w)			= cd_categoria_w
                        and	coalesce(b.cd_plano, coalesce(cd_plano_w,'0'))     		= coalesce(cd_plano_w,'0')
			and	coalesce(b.cd_area_procedimento, cd_area_procedimento_w)	= cd_area_procedimento_w
			and	coalesce(b.cd_especialidade, cd_especialidade_w)		= cd_especialidade_w
			and	coalesce(b.cd_grupo_proc, cd_grupo_proc_w)			= cd_grupo_proc_w
			and	coalesce(b.cd_procedimento, cd_procedimento_w)		= cd_procedimento_w
			and	coalesce(b.ie_origem_proced, ie_origem_proced_w)		= ie_origem_proced_w
			and	coalesce(b.nr_seq_proc_interno, coalesce(nr_seq_proc_interno_w,0))= coalesce(nr_seq_proc_interno_w,0)
			and 	coalesce(b.cd_setor_atendimento, coalesce(cd_setor_proc_w,cd_setor_procedimento_w))	= coalesce(cd_setor_proc_w,cd_setor_procedimento_w)
			and	coalesce(b.ie_tipo_atendimento,coalesce(ie_tipo_atendimento_w,0))	= coalesce(ie_tipo_atendimento_w,0)
			and	coalesce(b.cd_medico_executor, coalesce(cd_medico_executor_w,0))	= coalesce(cd_medico_executor_w,0)
			and	coalesce(b.ie_lado, coalesce(ie_lado_w,'A'))			= coalesce(ie_lado_w,'A')
			and	coalesce(b.cd_tipo_procedimento, coalesce(cd_tipo_procedimento_w,0)) = coalesce(cd_tipo_procedimento_w,0)
			and 	coalesce(b.ie_situacao,'A')					= 'A'
			and	b.ie_regra_execucao					= 'O'
			and	coalesce(dt_orcamento_w,clock_timestamp()) > b.dt_vigencia);

c02 CURSOR FOR
	SELECT	qt_exec_min,
		qt_exec_max,
		tx_procedimento,
		tx_custo_operacional,
		tx_medico,
		tx_auxiliar,
		tx_anestesista
	from	convenio_regra_qtde_tx
	where	nr_seq_regra	= nr_sequencia_w
	order by qt_exec_min;


c03 CURSOR FOR
	SELECT	a.nr_sequencia,
		b.cd_convenio,
		b.cd_categoria,
		a.vl_procedimento vl_proc,
		a.cd_procedimento,
		a.ie_origem_proced,
		vl_original_tabela,
		a.tx_procedimento,
		a.ie_via_acesso,
		a.nr_seq_proc_interno,
		b.cd_medico cd_medic,
		a.qt_porte_anestesico qt_porte,
		a.ie_lado,
		coalesce(a.qt_procedimento,0),
		a.cd_setor_atendimento,
                b.cd_plano
	from	orcamento_paciente_proc a,
		orcamento_paciente b
	where	a.nr_sequencia_orcamento = b.nr_sequencia_orcamento
	and	a.nr_sequencia_orcamento = nr_seq_orcamento_p
	and	a.ie_valor_informado = 'N'
	order by CASE WHEN ie_tipo_ordenacao_w='N' THEN vl_proc WHEN ie_tipo_ordenacao_w='S' THEN vl_proc WHEN ie_tipo_ordenacao_w='P' THEN qt_porte WHEN ie_tipo_ordenacao_w='C' THEN  := obter_valor_porte_cbhpm(cd_estabelecimento_w, dt_orcamento_w, cd_procedimento, ie_origem_proced, cd_convenio_w, null, null) END  desc,
		cd_medic,
		nr_sequencia;

BEGIN

select 	max(cd_estabelecimento),
	max(ie_tipo_atendimento),
	max(dt_orcamento),
	max(cd_pessoa_fisica),
	coalesce(max(cd_setor_atendimento),0),
	max(cd_convenio)
into STRICT	cd_estabelecimento_w,
	ie_tipo_atendimento_w,
	dt_orcamento_w,
	cd_pessoa_fisica_w,
	cd_setor_procedimento_w,
	cd_convenio_w
from	orcamento_paciente
where	nr_sequencia_orcamento =  nr_seq_orcamento_p;

open c00;
loop
fetch c00 into
	ie_tipo_ordenacao_w;
EXIT WHEN NOT FOUND; /* apply on c00 */
begin
	begin

	select 	coalesce(max(ie_regra_arredondamento_tx),'N'),
		coalesce(max(ie_regra_tx_qtde_exec),'N')
	into STRICT	ie_regra_arredondamento_tx_w,
		ie_regra_tx_qtde_exec_w
	from 	parametro_faturamento
	where 	cd_estabelecimento = cd_estabelecimento_W;
	exception
	when others then
		ie_regra_arredondamento_tx_w	:= 'N';
		ie_regra_tx_qtde_exec_w 	:= 'N';
	end;

	select	coalesce(max(obter_regra_preco_filme(cd_convenio)),'N')
	into STRICT	ie_aplica_tx_filme_conta_w
	from	orcamento_paciente
	where	nr_sequencia_orcamento = nr_seq_orcamento_p;

	update	orcamento_paciente_proc
	set 	vl_original_tabela 	= dividir(vl_procedimento * 100, tx_procedimento) -
						CASE WHEN ie_aplica_tx_filme_conta_w='N' THEN  dividir(vl_filme * 100, tx_procedimento) - vl_filme  ELSE 0 END
	where	nr_sequencia_orcamento = nr_seq_orcamento_p
	and	ie_valor_informado = 'N';

	commit; -- inclu?do o commit os 354304
	open c03; /*ORCAMENTO_PACIENTE_PROC*/
	loop
	fetch c03 into
		nr_seq_procedimento_w,
		cd_convenio_w,
		cd_categoria_w,
		vl_procedimento_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		vl_original_tabela_w,
		tx_proc_maior_valor_w,
		ie_via_acesso_proc_w,
		nr_seq_proc_interno_w,
		cd_medico_executor_w,
		qt_porte_anestesico_w,
		ie_lado_w,
		qt_procedimento_orc_w,
		cd_setor_proc_w,
                cd_plano_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin

		ie_regra_w			:= 'N';

		select	obter_regra_preco_filme(cd_convenio_w)
		into STRICT 	ie_aplica_taxa_filme_w
		;

		begin
		select 	cd_grupo_proc,
			cd_area_procedimento,
			cd_especialidade,
			cd_tipo_procedimento
		into STRICT	cd_grupo_proc_w,
			cd_area_procedimento_w,
			cd_especialidade_w,
			cd_tipo_procedimento_w
		from	estrutura_procedimento_v
		where	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w;
		exception
			 when others then
			 begin
			 cd_grupo_proc_w		:= 0;
			 cd_area_procedimento_w		:= 0;
			 cd_especialidade_w		:= 0;
			 end;
		end;

		begin
			select	dividir(vl_procedimento * 100, tx_procedimento),
				dividir(vl_custo_operacional * 100, tx_procedimento),
				dividir(vl_medico * 100, tx_procedimento),
				CASE WHEN ie_aplica_taxa_filme_w='S' THEN  dividir(vl_filme * 100, tx_procedimento)  ELSE vl_filme END ,
				dividir(vl_anestesista * 100, tx_procedimento),
				dividir(vl_auxiliares * 100, tx_procedimento)
			into STRICT	vl_procedimento_w,
				vl_custo_operacional_w,
				vl_medico_w,
				vl_materiais_w,
				vl_anestesista_w,
				vl_auxiliares_w
			from	orcamento_paciente_proc
			where	nr_sequencia	= nr_seq_procedimento_w;
		exception
			 when others then
			 begin
			 vl_procedimento_w		:= 0;
			 vl_anestesista_w		:= 0;
			 vl_auxiliares_w		:= 0;
			 end;
		end;

		RAISE NOTICE 'cd_estabelecimento_w= %  cd_convenio_w= %  cd_categoria_w= %  cd_area_procedimento_w= %  cd_especialidade_w= %  cd_grupo_proc_w= %  cd_procedimento_w= %  ie_origem_proced_w= %  cd_tipo_procedimento_w= %  nr_seq_proc_interno_w= %  cd_setor_proc_w= %  cd_setor_procedimento_w= %', cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, cd_procedimento_w, ie_origem_proced_w, cd_tipo_procedimento_w, nr_seq_proc_interno_w, cd_setor_proc_w, cd_setor_procedimento_w;

		open c01; /*CONVENIO_REGRA_QTDE*/
		loop
		fetch c01 into
			ie_regra_execucao_w,
			nr_sequencia_w,
			cd_area_procedimento_regra_w,
			cd_especialidade_regra_w,
			cd_grupo_proc_regra_w,
			cd_procedimento_regra_w,
			ie_origem_proced_regra_w,
			qt_min_regra_per_w,
			cd_medico_executor_regra_w,
			cd_setor_atendimento_w,
			cd_edicao_amb_filtro_w,
			cd_tipo_proced_regra_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin

			RAISE NOTICE 'regra quantidade Seq= % Vl_procedimento_w %', nr_sequencia_w, vl_procedimento_w;

			if (ie_regra_tx_qtde_exec_w = 'S') then
			RAISE NOTICE 'consistir qtde execucao = S';
			RAISE NOTICE 'qtde de item -> qt_procedimento_orc_w = %', qt_procedimento_orc_w;
				for i in 1..trunc(qt_procedimento_orc_w) loop
					ie_acumulou_w := 'N';
					RAISE NOTICE '  for-> item %', i;
					open c02;
					loop
					fetch c02 into
						qt_exec_min_w,
						qt_exec_max_w,
						tx_proc_w,
						tx_custo_oper_w,
						tx_medico_proc_w,
						tx_aux_w,
						tx_anest_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */
						begin

						RAISE NOTICE '    open C02-> qt_exec_min_w=%  qt_exec_max_w=%', qt_exec_min_w, qt_exec_max_w;
						ie_existe_w:= 'N';
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].nr_seq_orcamento = coalesce(nr_seq_orcamento_p,0)) then
								RAISE NOTICE '    1nr_sequencia_w= %; qt_exec_w= %; ie_acumulou_w= %', nr_sequencia_w, qt_exec_w, ie_acumulou_w;
								ie_existe_w:= 'S';
								exit;
							end if;
						end loop;

						-- se n?o existe cria
						if (ie_existe_w = 'N') then
							x	:= coalesce(vetor_acumulado_seq_w.count,0) + 1;
							vetor_acumulado_seq_w[x].nr_sequencia 	:= nr_sequencia_w;
							vetor_acumulado_seq_w[x].qt_acumulado  	:= 0;
							vetor_acumulado_seq_w[x].qt_executada	:= 0;
							vetor_acumulado_seq_w[x].nr_seq_orcamento := coalesce(nr_seq_orcamento_p,0);
							RAISE NOTICE '    2nr_seq_orcamento_p= %; qt_exec_w= %; ie_acumulou_w= %', vetor_acumulado_seq_w[x].nr_seq_orcamento, qt_exec_w, ie_acumulou_w;
						end if;

						--acumula a qtde conforme a regra que foi aplicada
						for 	i in 1..vetor_acumulado_seq_w.count loop
							if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].nr_seq_orcamento = coalesce(nr_seq_orcamento_p,0)) then
								RAISE NOTICE '    3nr_sequencia_w= %; qt_exec_w= %; ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
								if (ie_acumulou_w = 'N') then
									vetor_acumulado_seq_w[i].qt_acumulado	:= vetor_acumulado_seq_w[i].qt_acumulado + 1;
									qt_exec_w				:= vetor_acumulado_seq_w[i].qt_acumulado;
									ie_acumulou_w				:= 'S';
									RAISE NOTICE '    Acumulou qt_exec_w =%', qt_exec_w;
								end if;
								exit;
							end if;
						end loop;

						if (qt_exec_w between qt_exec_min_w and coalesce(qt_exec_max_w, qt_exec_w)) then
							ie_regra_w		:= 'S';
							RAISE NOTICE 'Vetor_w(%).tx_procedimento = %', i, tx_proc_w;
							Vetor_w[i].tx_procedimento	:= tx_proc_w;
							Vetor_w[i].tx_custo_operacional	:= tx_custo_oper_w;
							Vetor_w[i].tx_medico		:= tx_medico_proc_w;
							Vetor_w[i].tx_auxiliar		:= tx_aux_w;
							Vetor_w[i].tx_anestesista	:= tx_anest_w;
						end if;

						end;
					end loop;
					close c02;
				RAISE NOTICE '  for -> FIM';
				end loop;
			else /*IE_REGRA_TX_QTDE_EXEC_W = N */
				open c02;
				loop
				fetch c02 into
					qt_exec_min_w,
					qt_exec_max_w,
					tx_proc_w,
					tx_custo_oper_w,
					tx_medico_proc_w,
					tx_aux_w,
					tx_anest_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					begin

					if (ie_regra_w	= 'N') then
						begin

						if (ie_regra_execucao_w 	= 'O') then

							-- verifica se o item j? existe no vetor  (casos de mais de uma regra)
							ie_existe_w:= 'N';
							for 	i in 1..vetor_acumulado_seq_w.count loop
								if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].nr_seq_orcamento = coalesce(nr_seq_orcamento_p,0)) then
									RAISE NOTICE '1nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', nr_sequencia_w, qt_exec_w, ie_acumulou_w;
									ie_existe_w:= 'S';
									exit;
								end if;
							end loop;

							-- se n?o existe cria
							if (ie_existe_w = 'N') then
								x	:= coalesce(vetor_acumulado_seq_w.count,0) + 1;
								vetor_acumulado_seq_w[x].nr_sequencia 	:= nr_sequencia_w;
								vetor_acumulado_seq_w[x].qt_acumulado  	:= 0;
								vetor_acumulado_seq_w[x].qt_executada	:= 0;
								vetor_acumulado_seq_w[x].nr_seq_orcamento := coalesce(nr_seq_orcamento_p,0);
								RAISE NOTICE '2nr_seq_orcamento_p= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].nr_seq_orcamento, qt_exec_w, ie_acumulou_w;
							end if;

							--acumula a qtde conforme a regra que foi aplicada
							for 	i in 1..vetor_acumulado_seq_w.count loop
								if (vetor_acumulado_seq_w[i].nr_sequencia = nr_sequencia_w) and (vetor_acumulado_seq_w[i].nr_seq_orcamento = coalesce(nr_seq_orcamento_p,0)) then
									RAISE NOTICE '3nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;
									if (ie_acumulou_w = 'N') then
										vetor_acumulado_seq_w[i].qt_acumulado	:= vetor_acumulado_seq_w[i].qt_acumulado + 1;
										qt_exec_w				:= vetor_acumulado_seq_w[i].qt_acumulado;
										ie_acumulou_w				:= 'S';
									end if;
									exit;
								end if;
							end loop;
							RAISE NOTICE '4nr_sequencia_w= % - qt_exec_w= % - ie_acumulou_w= %', vetor_acumulado_seq_w[x].qt_acumulado, qt_exec_w, ie_acumulou_w;

						end if;

						RAISE NOTICE 'qt_exec_w= % qt_exec_min_w= % qt_exec_max_w= %', qt_exec_w, qt_exec_min_w, qt_exec_max_w;

						if (qt_exec_w between qt_exec_min_w and coalesce(qt_exec_max_w, qt_exec_w)) then
							tx_procedimento_w	:= tx_proc_w;
							tx_custo_operacional_w	:= tx_custo_oper_w;
							tx_medico_w		:= tx_medico_proc_w;
							tx_auxiliar_w		:= tx_aux_w;
							tx_anestesista_w	:= tx_anest_w;
							ie_regra_w		:= 'S';
							ie_acumulou_w		:= 'N';
						end if;

						end;
						end if;
					end;
				end loop;
				close c02;
			end if;
			end;
		end loop;
		close c01;

		RAISE NOTICE 'Seq_Proc= % ie_regra_w= %', nr_seq_procedimento_w, ie_regra_w;

		if (ie_regra_w		= 'S') then
			--dbms_output.put_line('Taxa= ' || tx_procedimento_w);
			if (ie_regra_tx_qtde_exec_w = 'S') then

				tx_procedimento_w	:= null;
				tx_medico_w		:= null;
				tx_custo_operacional_w	:= null;
				tx_auxiliar_w		:= null;
				tx_anestesista_w	:= null;
				RAISE NOTICE 'Somando as taxas acumuladas no vetor';
				if (Vetor_w.count > 0) then
					for k in Vetor_w.first .. Vetor_w.last loop
					if (Vetor_w.exists(k)) then

						if (Vetor_w[k](.tx_procedimento IS NOT NULL AND .tx_procedimento::text <> '')) then
							RAISE NOTICE 'tx_procedimento (%) = %', k, Vetor_w[k].tx_procedimento;
							tx_procedimento_w	:= coalesce(tx_procedimento_w,0)	+ Vetor_w[k].tx_procedimento;
						end if;
						if (Vetor_w[k](.tx_medico IS NOT NULL AND .tx_medico::text <> '')) then
							tx_medico_w		:= coalesce(tx_medico_w,0)		+ Vetor_w[k].tx_medico;
						end if;
						if (Vetor_w[k](.tx_custo_operacional IS NOT NULL AND .tx_custo_operacional::text <> '')) then
							tx_custo_operacional_w	:= coalesce(tx_custo_operacional_w,0)+ Vetor_w[k].tx_custo_operacional;
						end if;
						if (Vetor_w[k](.tx_auxiliar IS NOT NULL AND .tx_auxiliar::text <> '')) then
							tx_auxiliar_w		:= coalesce(tx_auxiliar_w,0)		+ Vetor_w[k].tx_auxiliar;
						end if;
						if (Vetor_w[k](.tx_anestesista IS NOT NULL AND .tx_anestesista::text <> '')) then
							tx_anestesista_w	:= coalesce(tx_anestesista_w,0)	+ Vetor_w[k].tx_anestesista;
						end if;
					end if;
					end loop;
				end if;

				if (tx_procedimento_w IS NOT NULL AND tx_procedimento_w::text <> '') then
					RAISE NOTICE 'calculo final da taxa = tx_procedimento_w(%)/%', tx_procedimento_w, Vetor_w.Count;
					tx_procedimento_w	:= dividir(tx_procedimento_w,Vetor_w.Count);
				end if;

				if (tx_medico_w IS NOT NULL AND tx_medico_w::text <> '') then
					tx_medico_w	:= dividir(tx_medico_w,Vetor_w.Count);
				end if;

				if (tx_custo_operacional_w IS NOT NULL AND tx_custo_operacional_w::text <> '') then
					tx_custo_operacional_w	:= dividir(tx_custo_operacional_w,Vetor_w.Count);
				end if;

				if (tx_auxiliar_w IS NOT NULL AND tx_auxiliar_w::text <> '') then
					tx_auxiliar_w	:= dividir(tx_auxiliar_w,Vetor_w.Count);
				end if;

				if (tx_anestesista_w IS NOT NULL AND tx_anestesista_w::text <> '') then
					tx_anestesista_w	:= dividir(tx_anestesista_w,Vetor_w.Count);
				end if;

				if (coalesce(tx_procedimento_w,0)	= 0) then
					tx_procedimento_w	:= 100;
				end if;
				/*VERIFICAR SE AO DEFINIR OS VALORES CADA TIPO DE VALOR SERA CORRESPONDENTE A TAXA*/


				/*LIMPAR O VETOR SE POSSIVEL*/

				Vetor_w.delete();
			end if;

			/*DEFINE OS VALORES */

			vl_custo_operacional_w 		:= ((coalesce(tx_custo_operacional_w, tx_procedimento_w) * vl_custo_operacional_w)/100);
			vl_medico_w 			:= ((coalesce(tx_medico_w,tx_procedimento_w) * vl_medico_w)/100);
			--vl_procedimento_w		:= ((tx_procedimento_w * vl_procedimento_w)/100);
			if (ie_aplica_taxa_filme_w = 'S') then
				vl_materiais_w 		:= ((tx_procedimento_w * vl_materiais_w)/100);
			end if;
			vl_anestesista_w	:= ((coalesce(tx_anestesista_w, tx_procedimento_w) * vl_anestesista_w)/100);
			vl_auxiliares_w		:= ((coalesce(tx_auxiliar_w, tx_procedimento_w) * vl_auxiliares_w)/100);

			select	coalesce(max(ie_classificacao),'0')
			into STRICT	ie_classificacao_w
			from	procedimento
			where	cd_procedimento = cd_procedimento_w
			and	ie_origem_proced = ie_origem_proced_w;

			if (ie_classificacao_w = '1') then
				vl_procedimento_w	:= coalesce(vl_custo_operacional_w,0) + coalesce(vl_medico_w,0) + coalesce(vl_materiais_w,0) + coalesce(vl_anestesista_w,0) + coalesce(vl_auxiliares_w,0);
			else
				vl_procedimento_w	:= ((tx_procedimento_w * vl_procedimento_w)/100);
			end if;


			/* ROTINA DE ARREDONDAMENTO, USADO PELO CONV?NIO IPE   --->>  INICIO  <<----- */

			if (ie_regra_arredondamento_tx_w = 'S') then

				select	max(ie_arredondamento)
				into STRICT	ie_tipo_rounded_w
				from	convenio_estabelecimento
				where	cd_convenio	  	= cd_convenio_w
				and	cd_estabelecimento	= cd_estabelecimento_w;

				if (ie_tipo_rounded_w = 'R') then
					select 	obter_regra_arredondamento(cd_convenio_w, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_w, dt_orcamento_w, 'P', 1)
					into STRICT	ie_tipo_rounded_w
					;
				end if;

				if (ie_tipo_rounded_w IS NOT NULL AND ie_tipo_rounded_w::text <> '') then
					vl_procedimento_w := arredondamento(vl_procedimento_w, 2, ie_tipo_rounded_w);
					vl_custo_operacional_w := arredondamento(vl_custo_operacional_w, 2, ie_tipo_rounded_w);
					vl_medico_w := arredondamento(vl_medico_w, 2, ie_tipo_rounded_w);
					vl_materiais_w := arredondamento(vl_materiais_w, 2, ie_tipo_rounded_w);
					vl_anestesista_w := arredondamento(vl_anestesista_w, 2, ie_tipo_rounded_w);
					vl_auxiliares_w := arredondamento(vl_auxiliares_w, 2, ie_tipo_rounded_w);
				end if;

			end if;
			/* ROTINA DE ARREDONDAMENTO, USADO PELO CONV?NIO IPE   --->>  FIM  <<----- */

			update	orcamento_paciente_proc
			set	vl_procedimento		= vl_procedimento_w,
				vl_medico	 	= vl_medico_w,
				vl_custo_operacional 	= vl_custo_operacional_w,
				tx_procedimento		= tx_procedimento_w,
				vl_filme		= vl_materiais_w,
				vl_anestesista		= vl_anestesista_w,
				vl_auxiliares		= vl_auxiliares_w
			where	nr_sequencia		= nr_seq_procedimento_w;

			RAISE NOTICE 'vl_procedimento_w= %', vl_procedimento_w;

			ie_ajuste_proc_w	:= 'S';

		end if;

		end;

		vl_proced_ant_w	:= vl_original_tabela_w;
		nr_seq_ant_w	:= nr_seq_procedimento_w;

	end loop;
	close c03;
end;
end loop;
close c00;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_taxa_qtde_exec_valor_orc ( nr_seq_orcamento_p bigint) FROM PUBLIC;

