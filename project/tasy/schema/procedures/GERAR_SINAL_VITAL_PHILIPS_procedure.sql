-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS (		nm_sinal_vital	varchar(100),
				vl_sinal_vital	varchar(100),
				nm_codigo			varchar(100),
				ds_unidade_medida	varchar(100),
                ds_lista                varchar(255),
                nm_atributo             varchar(100));
CREATE TYPE deHL7SVParaSDC AS (de_nm_codigo			varchar(255),
                               para_nm_atributo_sv     varchar(100));


CREATE OR REPLACE PROCEDURE gerar_sinal_vital_philips (cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, cd_setor_atendimento_p text default null, cd_unidade_basica_p text default null, cd_unidade_compl_p text default null, ie_integracao_extra_p text default 'N', nr_seq_log_integracao_p bigint default null, nr_atendimento_p bigint default null) AS $body$
DECLARE

type Vetor is table of campos index 	by integer;
Vetor_w			Vetor;
type setDeHL7SVParaSDC is table of deHL7SVParaSDC index by integer;
deParaHL7SV_SDC_w			setDeHL7SVParaSDC;


nr_atendimento_w            bigint;
dt_sinal_vital_w            timestamp;
nr_seq_sinal_vital_w        bigint	:= 0;
nr_seq_regra_vital_w        bigint	:= 0;
ds_sep_w                    varchar(100)	:= ';';
nr_pos_separador_w          bigint;
qt_parametros_w             bigint;
qt_contador_w               bigint;
ds_parametros_w             varchar(32000);
i                           integer;
ds_lista_aux_w              varchar(255);
ds_sep_bv_w                 varchar(30)	:= obter_separador_bv;
nr_seq_monit_resp_w         bigint	:= 0;
nr_seq_monit_hemo_w         bigint	:= 0;
cd_modalidade_w             varchar(15);
ie_respiracao_w             varchar(7);
ds_erro_w                   varchar(4000);
qt_minutos_w                bigint;
qt_min_philips_w            bigint;
cd_estabelecimento_w        bigint;
nr_cirurgia_w               bigint;
nr_seq_pepo_w               bigint;
nr_atendimento_cirur_w      bigint;
cd_pessoa_fisica_w          varchar(10):= cd_pessoa_fisica_p;
nr_seq_interno_w            bigint;
ds_param_integ_hl7_w        varchar(4000);
cd_setor_atendimento_w	    integer;
ie_rpa_w                    varchar(1);
ie_integracao_extra_w       varchar(1);
qt_setor_integrado_w        bigint;
ie_nome_setor_philips_w	    varchar(3) := 'N';
ie_gravar_suporte_decisao_w varchar(1) := 'N';
ie_tem_suporte_decisao_w    char(1) := 'N';
cd_setor_regra_w	        integer;
qt_min_periodico_w          bigint;
qt_min_aperiodico_w         bigint;
ie_tem_sv_periodo_w         char(1);
ie_consiste_aperiodico_w    char(1) := 'N';
qt_idade_w	                bigint;
in_nm_codigo_w			    varchar(255);
vl_minimo_w                 bigint;
vl_maximo_w                 bigint;
nm_sv_atributo_w            varchar(30);
pendencia_sinal_vital_w      constant integer := 3;
indice                      integer;
sql_errm_w                  varchar(4000);
qt_gerado_mentor_w          varchar(1);
ie_tem_regra_minuto_sv_w    varchar(1);
ds_atributos_regra_min_w    varchar(4000);
ie_integrar_regra_min_w     char(1) := 'N';
seq_min_philips_w       	bigint	:= null;
ie_ignorar_item_sv_w        char(1) := 'N';
ie_tem_regra_shift_F11_w    char(1) := 'N';
qt_idade_dias_w		        integer;
qt_peso_gramas_w		    double precision;
nr_regras_atendidas_w       varchar(2000);
qt_percentual_tolerancia_w  bigint;
dt_referencia_apap_w        timestamp;
minuto_sv_w                 bigint;
hora_sv_w                   bigint;
ie_horario_aceito_w         char(1) := 'S';
ie_controlar_data_apap_w    char(1);
ie_tipo_horario_w           char(1);
ie_horario_par_w            char(1) := 'P';
ie_horario_impar_w          char(1) := 'I';
ie_horario_ambos_w          char(1) := 'A';
ie_horario_real_w           char(1) := 'R';
ie_horario_apap_w           char(1) := 'A';
nr_cirurgia_ww		        bigint;

ie_tipo_Halogenado_w		bigint	:= 0;
ie_inN2O_w 					varchar(1) := 'N';
ie_inO2_w 					varchar(1) := 'N';
ie_sevo_w                varchar(1) := 'N';
qt_utilizada_w 				varchar(15);
qt_halog_insp_w				varchar(15);
vl_sinal_vital_inN2O_w		varchar(15);
vl_sinal_vital_inO2_w		varchar(15);

qt_Isoflurano_halog_insp_w	varchar(10);
qt_Isoflurano_halog_exp_w   varchar(10);
qt_Isoflurano_utilizada_w   varchar(10);
qt_Sevofl_halog_insp_w  		varchar(10);
qt_Sevofl_halog_exp_w   		varchar(10);
qt_Sevofl_utilizada_w   		varchar(10);
qt_Halotano_halog_insp_w    varchar(10);
qt_Halotano_halog_exp_w     varchar(10);
qt_Halotano_utilizada_w     varchar(10);
qt_Enfluorano_halog_insp_w  varchar(10);
qt_Enfluorano_halog_exp_w   varchar(10);
qt_Enfluorano_utilizada_w   varchar(10);

ie_exige_aprovacao_w        varchar(2);
ie_retorno_valida_sv_w      varchar(10)   := '';
ds_retorno_valida_sv_w      varchar(2000) := '';
ExigeAprovacaoNao           varchar(2) := 'N';
ExigeAprovacaoSim           varchar(2) := 'S';
ExigeAprovacaoForaFaixa     varchar(2) := 'C';
ie_tx_indice_card_w			varchar(2) := 'N';
nls_numeric_characters_w	varchar(255);
ie_periodico_aceito_w   	varchar(2) := 'S';
ie_tipo_periodico_w  		SV_INTEGRACAO_PHILIPS.IE_PERIODICO_APERIODICO%type;
ie_localizacao_w			establishment_locale.ds_locale%type;

-- Cursor de suporte a decisao clinica
C01 CURSOR FOR
    SELECT  c.nm_atributo,
            a.vl_minimo, 
            a.vl_maximo,
            a.nr_seq_sinal_vital
    from    gqa_pendencia_regra a,
            gqa_pendencia       b,
            sinal_vital         c
    where   b.nr_sequencia          = a.nr_seq_pendencia
    and     a.nr_seq_sinal_vital    = c.nr_sequencia
    and     (c.nm_atributo IS NOT NULL AND c.nm_atributo::text <> '')
    and     b.ie_tipo_pendencia     = pendencia_sinal_vital_w
    and     b.ie_situacao           = 'A'
    and     a.ie_situacao           = 'A'
    and     obter_se_gqa_regra_liberada(a.nr_sequencia) = 'S'
    and     qt_idade_w between coalesce(a.qt_idade_min, 0) and coalesce(a.qt_idade_max,   999)
    and     qt_idade_dias_w between coalesce(a.qt_dias_min,0) and coalesce(a.qt_dias_max,99999)
    and     qt_peso_gramas_w between coalesce(a.qt_peso_gramas_min,0) and coalesce(a.qt_peso_gramas_max,999999999)
    and     coalesce(a.cd_setor_atendimento, coalesce(cd_setor_atendimento_w, 0)) = coalesce(cd_setor_atendimento_w, 0)
    and     Obter_se_pendencia_mentor(nr_atendimento_w, a.nr_seq_sinal_vital,nm_usuario_p,cd_estabelecimento_w) <> 'S'
    and     exists (
                      SELECT z.nr_sequencia
                        from gqa_acao z
                       where z.nr_seq_pend_regra = a.nr_sequencia
                         and z.ie_situacao = 'A'
                         and coalesce(z.ie_executar, 'N') = 'N'
                   )
    and     nr_seq_sinal_vital in (select x.nr_sequencia 
                                         from sinal_vital x 
                                        where nm_atributo not in (
                                              'QT_ESCALA_DOR',
                                              'QT_GLICEMIA_CAPILAR',
                                              'QT_BCF',
                                              'QT_PESO',
                                              'QT_ALTURA_CM',
                                              'QT_IMC',
                                              'QT_SUPERF_CORPORIA',
                                              'QT_PVC_H2O',
                                              'QT_PRESSAO_INTRA_ABD',
                                              'QT_TEMP_INCUBADORA',
                                              'QT_PERIMETRO_CEFALICO',
                                              'QT_DOR'
                                            )
                                      );

	procedure inserir_sv is
	;
BEGIN

	if (nr_seq_sinal_vital_w	= 0) then


		select	nextval('atendimento_sinal_vital_seq')
		into STRICT	nr_seq_sinal_vital_w
		;


        insert into atendimento_sinal_vital(
                            nr_sequencia,
                            nr_atendimento,
                            dt_sinal_vital,
                            dt_atualizacao,
                            dt_atualizacao_nrec,
                            nm_usuario,
                            nm_usuario_nrec,
                            CD_PESSOA_FISICA,

                            ie_importado,
                            ie_situacao,
                            nr_cirurgia,
                            nr_seq_pepo,
                            ie_integracao,
                            cd_setor_atendimento,
                            ie_rpa,
                            ie_integracao_extra, 
                            nr_seq_min_philips, 
                            ie_integracao_regra,
                            nr_seq_log_integracao)
                values (nr_seq_sinal_vital_w,
                            nr_atendimento_w,
                            dt_sinal_vital_w,
                            clock_timestamp(),
                            clock_timestamp(),
                            nm_usuario_p,
                            nm_usuario_p,
                            null,

                            'S',
                            'A',
                            nr_cirurgia_w,
                            nr_seq_pepo_w,
                            'S',
                            cd_setor_atendimento_w,
                            ie_rpa_w,
                            ie_integracao_extra_w,
                            seq_min_philips_w,
                            ie_integrar_regra_min_w,
                            nr_seq_log_integracao_p);
    end if;
    end;

	procedure inserir_resp is
	begin
	if (nr_seq_monit_resp_w	= 0) then

		select	nextval('atendimento_monit_resp_seq')
		into STRICT	nr_seq_monit_resp_w
		;

		insert into ATENDIMENTO_MONIT_RESP(	nr_sequencia,
							nr_atendimento,
							DT_MONITORIZACAO,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,

							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao,
							cd_setor_atendimento,
							ie_integracao_extra)
				values (	nr_seq_monit_resp_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_p,
							null,

							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S',
							cd_setor_atendimento_w,
							ie_integracao_extra_w);
	end if;
	end;


	procedure inserir_hemo is
	begin
	if (nr_seq_monit_hemo_w	= 0) then

		select	nextval('atend_monit_hemod_seq')
		into STRICT	nr_seq_monit_hemo_w
		;

		insert into ATEND_MONIT_HEMOD(	nr_sequencia,
							nr_atendimento,
							DT_MONITORACAO,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,

							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao,
							cd_setor_atendimento,
							ie_integracao_extra)
				values (	nr_seq_monit_hemo_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_p,
							null,

							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S',
							cd_setor_atendimento_w,
							ie_integracao_extra_w);
	end if;
	end;

	procedure atualizar_valor_sv(	nm_tabela_p	varchar2,
					nm_atributo_p	varchar2,
					vl_parametro_p	varchar2) is
	ds_comando_w	varchar2(2000);
	ds_parametros_w	varchar2(2000);
	vl_parametro_w	varchar2(2000);
	begin
	ds_comando_w	:= 	'	update	'||nm_tabela_p	||
				'	set	'||nm_atributo_p||' = :vl_parametro'||
				'	where	nr_sequencia	= :nr_sequencia ';
	begin
	vl_parametro_w	:= vl_parametro_p;
	if (nls_numeric_characters_w <> '.,') and -- Avoing issues with customer outside Brasil
		((substr(nm_atributo_p,1,2)	= 'QT') or (substr(nm_atributo_p,1,2)	= 'PR') or (substr(nm_atributo_p,1,2)	= 'VL') or (substr(nm_atributo_p,1,2)	= 'TX')) then
		vl_parametro_w	:= replace(vl_parametro_w,'.',',');
	end if;

	if (nm_tabela_p	= 'ATENDIMENTO_SINAL_VITAL') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_sv;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_sinal_vital_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
	elsif (nm_tabela_p	= 'ATENDIMENTO_MONIT_RESP') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_resp;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_monit_resp_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
	elsif (nm_tabela_p	= 'ATEND_MONIT_HEMOD') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_hemo;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_monit_hemo_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
	end if;

	exception
		when others then
		ds_erro_w		:= sqlerrm(SQLSTATE);
	end;

	end;
	
	function obter_se_existe_agente(ie_tipo_agente number, nr_cirurgia_param number,
										 cd_estabelecimento_param number) return;
	begin
	

	ie_possui_reg_w	:= agente_anest_pck.obter_se_existe_agente(ie_tipo_agente,nr_cirurgia_param,cd_estabelecimento_param);
	
	return;
	
	end;
	
	function obter_se_agente_ja_adm(ie_tipo_agente number, nr_cirurgia_param number,
										 cd_estabelecimento_param number) return;
	begin
	

	ie_possui_reg_w		:= agente_anest_pck.obter_se_agente_ja_adm(ie_tipo_agente,nr_cirurgia_param,cd_estabelecimento_param);
	
	return;
	
	end;
	
	procedure 	inserir_cir_agente_anest(ie_tipo_agente number,
										 nr_cirurgia_param number, 
										 vl_velocidade varchar2,
										 cd_estabelecimento_param number)  is
	begin
	
	CALL agente_anest_pck.inserir_cir_agente_anest(	ie_tipo_agente,
							nr_cirurgia_param,
							vl_velocidade,
							cd_estabelecimento_param,
							nr_seq_pepo_w,
							nm_usuario_p,
              'S');
	
	end;
	
	procedure inserir_adm_agente_anestesico(ie_tipo_agente number, nr_cirurgia_param number, qt_vel_p varchar2, qt_utilizada_p varchar2 , qt_halog_insp_p varchar2 )  is
	begin
	
	CALL agente_anest_pck.inserir_adm_agente_anestesico(	ie_tipo_agente,
							nr_cirurgia_param,
							qt_vel_p,
							qt_utilizada_p,
							qt_halog_insp_p,
							cd_estabelecimento_w,
							nm_usuario_p,
              'S');
	
	end;
	
	function obter_vl_agente_adm(ie_tipo_agente number, nr_cirurgia_param number) return;
	begin
	

	qt_velocidade_w	:= AGENTE_ANEST_PCK.obter_vl_agente_adm(	ie_tipo_agente,
									nr_cirurgia_param,
									cd_estabelecimento_w);
	
	return;
	
	end;
	
	procedure atualizar_adm_agente_anest(ie_tipo_agente number, nr_cirurgia_param number)  is
	begin
	CALL agente_anest_pck.atualizar_adm_agente_anest(	ie_tipo_agente,
							nr_cirurgia_param,
							cd_estabelecimento_w);
	end;
	
	procedure atualizar_registro_adm_sevo(ie_tipo_agente_p number, qt_utilizada_p number, nr_cirurgia_pp number)  is
	begin	
		
	CALL AGENTE_ANEST_PCK.atualizar_registro_adm_sevo(	ie_tipo_agente_p,
							qt_utilizada_p,
							nr_cirurgia_pp);
	
	end;
	
	procedure gerar_passagem_setor(nr_atendimento_param number, nr_seq_interno_param number, cd_setor_atend_param number) is
	begin

	
	ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_param || ds_sep_bv_w ||
					'nr_seq_interno=' || nr_seq_interno_param || ds_sep_bv_w||
					'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w;
	CALL gravar_agend_integracao(67, ds_param_integ_hl7_w, cd_setor_atend_param);
	
	commit;
	end;
	

begin

begin
	select 	max(value)
	into STRICT	nls_numeric_characters_w
	from 	v$nls_parameters
	where	parameter = 'NLS_NUMERIC_CHARACTERS';
exception
when others then
	nls_numeric_characters_w	:= null;
end;

begin
dt_sinal_vital_w := to_date(dt_sinal_vital_p, 'yyyymmddhh24miss');
exception
	when others then
	dt_sinal_vital_w	:= clock_timestamp();
end;

select 	max(coalesce(nr_atendimento_p,nr_atendimento))
into STRICT 	nr_atendimento_w
from 	atendimento_paciente
where 	cd_pessoa_fisica  = cd_pessoa_fisica_p
and		dt_alta_interno  = TO_DATE('30/12/2999','dd/mm/yyyy')
and		ie_tipo_atendimento in (1,3);

if (coalesce(nr_atendimento_w::text, '') = '') then
	select 	max(nr_atendimento)
	into STRICT 	nr_atendimento_w
	from 	atendimento_paciente
	where 	cd_pessoa_fisica  = cd_pessoa_fisica_p
	and		dt_alta_interno  = TO_DATE('30/12/2999','dd/mm/yyyy');
end if;

ie_integracao_extra_w := coalesce(ie_integracao_extra_p,'N');

select	max(nr_cirurgia),
		max(nr_seq_pepo)
into STRICT	nr_cirurgia_w,
		nr_seq_pepo_w
from	cirurgia
where	nr_atendimento = nr_atendimento_w
and		dt_sinal_vital_w between dt_inicio_real and coalesce(dt_termino, dt_sinal_vital_w);

if (coalesce(nr_seq_pepo_w::text, '') = '') then
	begin
		select	max(nr_sequencia)
		into STRICT	nr_seq_pepo_w
		from	PEPO_CIRURGIA
		where	nr_atendimento = nr_atendimento_w
		and		dt_sinal_vital_w between dt_inicio_proced  and coalesce(dt_fim_cirurgia, dt_sinal_vital_w);
	end;
end if;

if (coalesce(nr_cirurgia_w::text, '') = '') and (coalesce(nr_seq_pepo_w::text, '') = '') then
	select	max(nr_cirurgia),
			max(nr_seq_pepo)
	into STRICT	nr_cirurgia_w,
			nr_seq_pepo_w
	from	atend_paciente_unidade
	where	nr_atendimento = nr_atendimento_w
	and		dt_sinal_vital_w between dt_entrada_unidade and coalesce(dt_saida_unidade, dt_sinal_vital_w);
end if;

ds_parametros_w    := ds_lista_parametros_p||ds_lista_parametros2_p;
ds_parametros_w	   := replace(ds_parametros_w,'null','');
i	:= 0;

while(length(ds_parametros_w) > 0) loop
	begin
	i	:= i+1;
	if (position(';' in ds_parametros_w)	>0)  then
		Vetor_w[i].ds_lista	:= substr(ds_parametros_w,1,position(';' in ds_parametros_w)-1 );
		ds_parametros_w	:= substr(ds_parametros_w,position(';' in ds_parametros_w)+1,40000);

	else
		Vetor_w[i].ds_lista	:=substr(ds_parametros_w,1,length(ds_parametros_w) - 1);
		ds_parametros_w	:= null;
	end if;

	end;
end loop;

RAISE NOTICE '%', Vetor_w.count;




for j in 1..Vetor_w.count loop
	begin

	ds_lista_aux_w	:= Vetor_w[j].ds_lista;

	Vetor_w[j].nm_sinal_vital	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)-1 );
	RAISE NOTICE 'nm_sinal_vital = %', Vetor_w[j].nm_sinal_vital;
	
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
	Vetor_w[j].ds_unidade_medida	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
	
	Vetor_w[j].nm_codigo	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );
	
	RAISE NOTICE 'nm_codigo = %', Vetor_w[j].nm_codigo;
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);

	
	
	Vetor_w[j].vl_sinal_vital	:= substr(ds_lista_aux_w,1,4000 );
	

	end;
end loop;

select	coalesce(max(cd_estabelecimento),1)
into STRICT	cd_estabelecimento_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_w;

cd_setor_atendimento_w := obter_setor_atendimento(nr_atendimento_w);

select	max(nr_cirurgia)
into STRICT	nr_cirurgia_ww
from	cirurgia
where	nr_atendimento = nr_atendimento_w;

select	coalesce(max(QT_MIN_PHILIPS),120),
		coalesce(max(IE_NOME_SETOR_PHILIPS),'N'),
		coalesce(max(get_establishment_locale(cd_estabelecimento)),'pt_BR')
into STRICT	qt_minutos_w,
		ie_nome_setor_philips_w,
		ie_localizacao_w
from	parametro_medico
where	cd_estabelecimento = cd_estabelecimento_w;

select  coalesce(MAX(qt_min_philips),0),
		coalesce(max(ie_rpa),'N')
into STRICT	qt_min_philips_w,
		ie_rpa_w
from	setor_atendimento
where	cd_setor_atendimento = cd_setor_atendimento_w;



if (qt_min_philips_w > 0) then
	qt_minutos_w := qt_min_philips_w;	
end if;

select  coalesce(max(qt_min_periodico_w), qt_minutos_w)             qt_min_periodico_w,
        coalesce(max(qt_min_aperiodico_w), qt_minutos_w)            qt_min_aperiodico_w,
        coalesce(max(ie_gravar_suporte_decisao_w), 'N')             ie_gravar_suporte_decisao_w,
        coalesce(max(cd_setor_regra_w), null)                       cd_setor_regra_w,
        coalesce(max(ie_tem_regra_shift_F11_w), 'N')                ie_tem_regra_shift_F11_w,
        coalesce(max(qt_percentual_tolerancia_w), 0)                qt_percentual_tolerancia_w,
        coalesce(max(ie_tipo_horario_w), 'A')                       ie_tipo_horario_w,
        coalesce(max(ie_controlar_data_apap_w), ie_horario_real_w)  ie_controlar_data_apap_w,
        coalesce(max(ie_tipo_periodico_w), 'T')                     ie_tipo_periodico_w
  into STRICT qt_min_periodico_w,
       qt_min_aperiodico_w,
       ie_gravar_suporte_decisao_w,
       cd_setor_regra_w,
       ie_tem_regra_shift_F11_w,
       qt_percentual_tolerancia_w,
       ie_tipo_horario_w,
       ie_controlar_data_apap_w,
       ie_tipo_periodico_w
from ( 
        SELECT  max(qt_min_philips)                     qt_min_periodico_w,
                max(qt_min_philips_ap)                  qt_min_aperiodico_w,
                max(ie_gravar_suporte_decisao)          ie_gravar_suporte_decisao_w,
                max(cd_setor_atendimento)               cd_setor_regra_w,
                max('S')                                ie_tem_regra_shift_F11_w,
                max(qt_percentual_tolerancia)           qt_percentual_tolerancia_w,
                max(ie_horario_par_impar)               ie_tipo_horario_w,
                max(ie_tipo_horario)                    ie_controlar_data_apap_w,
                max(IE_PERIODICO_APERIODICO)            ie_tipo_periodico_w
        from    sv_integracao_philips
        where   cd_estabelecimento   = cd_estabelecimento_w
        and     cd_setor_atendimento = cd_setor_atendimento_w
        and     (cd_setor_atendimento IS NOT NULL AND cd_setor_atendimento::text <> '')
        
union all

        SELECT  max(qt_min_philips)                     qt_min_periodico_w,
                max(qt_min_philips_ap)                  qt_min_aperiodico_w,
                max(ie_gravar_suporte_decisao)          ie_gravar_suporte_decisao,
                max(cd_setor_atendimento)               cd_setor_regra_w,
                max('S')                                ie_tem_regra_shift_F11_w,
                max(qt_percentual_tolerancia)           qt_percentual_tolerancia_w,
                max(ie_horario_par_impar)               ie_tipo_horario_w,
                max(ie_tipo_horario)                    ie_controlar_data_apap_w,
                max(IE_PERIODICO_APERIODICO)            ie_tipo_periodico_w
        from    sv_integracao_philips
        where   cd_estabelecimento   = cd_estabelecimento_w
        and     coalesce(cd_setor_atendimento::text, '') = ''
        and     not exists (
          select 1
          from    sv_integracao_philips
          where   cd_estabelecimento   = cd_estabelecimento_w
          and     cd_setor_atendimento = cd_setor_atendimento_w
        )         
    ) x
    order by cd_setor_regra_w;

-- Horario Real ou Horario APAP    
if (ie_controlar_data_apap_w = ie_horario_apap_w) then
	hora_sv_w	:= to_char(round(dt_sinal_vital_w, 'HH'),'hh24');
else
	hora_sv_w	:= to_char(trunc(dt_sinal_vital_w, 'HH'),'hh24');
end if;

if (ie_integracao_extra_p = 'S' and ie_tem_regra_shift_F11_w = 'S') then
    qt_minutos_w := qt_min_aperiodico_w;
    if (qt_percentual_tolerancia_w > 0) then
        qt_minutos_w := qt_min_aperiodico_w - ((qt_min_aperiodico_w*qt_percentual_tolerancia_w)/100);
    end if;
	ie_consiste_aperiodico_w := 'S';
end if;

if (ie_integracao_extra_p = 'N' and ie_tem_regra_shift_F11_w = 'S') then
    qt_minutos_w := qt_min_periodico_w;
end if;

ie_tem_sv_periodo_w := 'N';
if (ie_integracao_extra_p = 'S' and ie_consiste_aperiodico_w = 'S') or (ie_integracao_extra_p <> 'S')  then
   
    if (ie_controlar_data_apap_w = ie_horario_real_w) then
        select	coalesce(max('S'), 'N')
        into STRICT	ie_tem_sv_periodo_w
        from	atendimento_sinal_vital a
        where	a.nr_atendimento	= nr_atendimento_w
        and	    coalesce(a.dt_inativacao::text, '') = ''
        and	    a.dt_sinal_vital between dt_sinal_vital_w - (1/24/60)* qt_minutos_w and dt_sinal_vital_w
        and	    a.nm_usuario_nrec = nm_usuario_p
        and	    coalesce(a.ie_integracao_extra,'N') = ie_integracao_extra_p
        and	    coalesce(a.ie_integracao_mentor,'N') = 'N';
    else

        select  coalesce(max('S'), 'N')
        into STRICT	ie_tem_sv_periodo_w
        from	atendimento_sinal_vital a
        where	a.nr_atendimento	= nr_atendimento_w
        and	    coalesce(a.dt_inativacao::text, '') = ''
        and	    a.dt_referencia between round(dt_sinal_vital_w, 'HH') - (1/24/60)* qt_minutos_w and trunc(dt_sinal_vital_w, 'HH') + interval '1' hour
        and	    a.nm_usuario_nrec = nm_usuario_p
        and	    coalesce(a.ie_integracao_extra,'N') = ie_integracao_extra_p
        and	    coalesce(a.ie_integracao_mentor,'N') = 'N';

    end if;

end if;

-- Criado consistencia para verificar se o paciente se encontra em um setor/leito monitorado. 
select	count(*)
into STRICT	qt_setor_integrado_w	
from	atend_paciente_unidade a,
		unidade_atendimento b
where	a.nr_atendimento = nr_atendimento_w
and		a.cd_setor_atendimento = b.cd_setor_atendimento
and		a.cd_unidade_basica = b.cd_unidade_basica
and		coalesce(b.ie_leito_monitorado,'N') = 'S'
and		dt_sinal_vital_w between a.dt_entrada_unidade and coalesce(a.dt_saida_unidade, dt_sinal_vital_w);

if (	qt_setor_integrado_w > 0) and (	ie_nome_setor_philips_w = 'S') then
	select	count(*)
	into STRICT	qt_setor_integrado_w	
	from	atend_paciente_unidade a,
			unidade_atendimento b
	where	a.nr_atendimento = nr_atendimento_w
	and		a.cd_setor_atendimento = b.cd_setor_atendimento
	and		a.cd_unidade_basica = b.cd_unidade_basica
	and		upper(b.nm_setor_integracao) = upper(cd_setor_atendimento_p)
	and		trim(both upper(b.nm_leito_integracao)) = trim(both upper(cd_unidade_compl_p))
	and		coalesce(b.ie_leito_monitorado,'N') = 'S'
	and		dt_sinal_vital_w between a.dt_entrada_unidade and coalesce(a.dt_saida_unidade, dt_sinal_vital_w);		
end if;

--Suporte a decisao clinica
qt_minutos_w := obter_param_usuario(355, 2, 0, nm_usuario_p, cd_estabelecimento_w, qt_minutos_w);

if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (qt_setor_integrado_w > 0) and (ie_tem_sv_periodo_w = 'S') and (ie_gravar_suporte_decisao_w = 'S') and (coalesce(qt_minutos_w,0) > 0) then
    
    select	coalesce(max('S'), 'N')
    into STRICT	ie_tem_sv_periodo_w
    from	atendimento_sinal_vital a
    where	a.nr_atendimento    = nr_atendimento_w
    and	    coalesce(a.dt_inativacao::text, '') = ''
    and	    a.dt_sinal_vital between dt_sinal_vital_w - ((1/24)* qt_minutos_w) and dt_sinal_vital_w
    and	    a.nm_usuario_nrec = nm_usuario_p
    and	    coalesce(a.ie_integracao_mentor,'N') = 'S';



    if (ie_tem_sv_periodo_w = 'N') then         
    
        ie_tem_sv_periodo_w := 'S';

        qt_idade_w		 := obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'A');	
        qt_idade_dias_w	 := obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'DIA');
	    qt_peso_gramas_w := (coalesce(obter_peso_pf(cd_pessoa_fisica_w),0) * 1000);

        --Inicializa vetores dos atributos considerados da tabela sinal_vital e seus respectivos codigos hl7
        deParaHL7SV_SDC_w[1].de_nm_codigo         := '0002-4a07,0002-4a13,0002-4a17';
        deParaHL7SV_SDC_w[1].para_nm_atributo_sv  := 'QT_PAM';

        deParaHL7SV_SDC_w[2].de_nm_codigo         := '0002-4a05,0002-4a11,0002-4a15';
        deParaHL7SV_SDC_w[2].para_nm_atributo_sv  := 'QT_PA_SISTOLICA';

        deParaHL7SV_SDC_w[3].de_nm_codigo         := '0002-4a06,0002-4a12,0002-4a16';
        deParaHL7SV_SDC_w[3].para_nm_atributo_sv  := 'QT_PA_DIASTOLICA';

        deParaHL7SV_SDC_w[4].de_nm_codigo         := '0002-5000,0002-500a,0002-fb5f';
        deParaHL7SV_SDC_w[4].para_nm_atributo_sv  := 'QT_FREQ_RESP';

        deParaHL7SV_SDC_w[5].de_nm_codigo         := '0002-4b64,0002-4b6c,0002-4b74,0002-4b78,0002-4b7c,0002-f0c7,0002-f0c8,0002-e004,0002-e014,0002-f110,0002-4b48';
        deParaHL7SV_SDC_w[5].para_nm_atributo_sv  := 'QT_TEMP';

        deParaHL7SV_SDC_w[6].de_nm_codigo         := '0002-4bb8,0002-4b34,0002-f09c,0002-fbcf';
        deParaHL7SV_SDC_w[6].para_nm_atributo_sv  := 'QT_SATURACAO_O2';

        deParaHL7SV_SDC_w[7].de_nm_codigo         := '0002-4182,0002-f0e5,0002-480a';
        deParaHL7SV_SDC_w[7].para_nm_atributo_sv  := 'QT_FREQ_CARDIACA';

        deParaHL7SV_SDC_w[8].de_nm_codigo         := '0002-4a47';
        deParaHL7SV_SDC_w[8].para_nm_atributo_sv  := 'QT_PVC';

        deParaHL7SV_SDC_w[9].de_nm_codigo         := '0002-4a33';
        deParaHL7SV_SDC_w[9].para_nm_atributo_sv  := 'QT_PAE';

        deParaHL7SV_SDC_w[10].de_nm_codigo        := '0002-f0b7,0002-580b';
        deParaHL7SV_SDC_w[10].para_nm_atributo_sv := 'QT_PRESSAO_INTRA_CRANIO';
    
        open C01;
        loop
        fetch C01 into
            nm_sv_atributo_w,
            vl_minimo_w,
            vl_maximo_w,
            nr_seq_regra_vital_w;
        EXIT WHEN NOT FOUND; /* apply on C01 */
        begin
        
        
            if (ie_tem_suporte_decisao_w <> 'S') then
            
                in_nm_codigo_w := null;

                for i in 1..deParaHL7SV_SDC_w.count loop
                    begin
                        if ((deParaHL7SV_SDC_w[i].para_nm_atributo_sv = nm_sv_atributo_w) and (coalesce(in_nm_codigo_w::text, '') = '') ) then                             
                            in_nm_codigo_w := deParaHL7SV_SDC_w[i].de_nm_codigo;
                        end if;
                    end;
                end loop;
                
                
                for i in 1..Vetor_w.count loop
                    begin   
                
                        if (ie_tem_suporte_decisao_w = 'N' and position(Vetor_w[i].nm_codigo in in_nm_codigo_w) > 0 ) then                            
                            
                            if vl_maximo_w >= (Vetor_w[i].vl_sinal_vital)::numeric  and vl_minimo_w <= (Vetor_w[i].vl_sinal_vital)::numeric  then                          
                               
                                ie_tem_suporte_decisao_w := 'S';

                            end if;

                        end if;
                    end;
                end loop;

            end if;
        end;
        end loop;
        close C01;
    end if;
end if;

case ie_tipo_horario_w 
    when ie_horario_par_w then
      if mod(hora_sv_w, 2) = 0 then 
        ie_horario_aceito_w :=  'S';
      else
        ie_horario_aceito_w :=  'N';
      end if;

    when ie_horario_impar_w then
      if mod(hora_sv_w, 2) <> 0 then 
        ie_horario_aceito_w :=  'S';
      else
        ie_horario_aceito_w :=  'N';
      end if;

    when ie_horario_ambos_w then
      ie_horario_aceito_w := 'S';
end case;

--- SHIFT+F11 - Regra intervalo sinal vital
if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (qt_setor_integrado_w > 0) and (ie_tem_sv_periodo_w = 'S') then
           
        select coalesce(max('S'), 'N') 
        into STRICT   ie_tem_regra_minuto_sv_w 
        from   lib_itens_sv_philips  a,
               sv_integracao_philips b
        where  b.nr_sequencia           = a.nr_seq_regra
        and    b.cd_estabelecimento     = cd_estabelecimento_w
        and    b.cd_setor_atendimento   = cd_setor_atendimento_w
        and    a.ie_situacao = 'A'
        and exists (  SELECT x.nr_sequencia 
               from   lib_itens_regra_sv x
               where  x.nr_seq_regra_tempo =  a.nr_sequencia
            );

        if (ie_tem_regra_minuto_sv_w = 'S') then
            
            select  coalesce(max('S'), 'N'), 
                    max(a.nr_sequencia),
                    rtrim(xmlagg(XMLELEMENT(name e, pep_obter_info_ssvs_hl7(b.cd_integracao, 'A')||',')).extract('//text()'),',') 
            into STRICT    ie_integrar_regra_min_w,
                    seq_min_philips_w,
                    ds_atributos_regra_min_w
            from    lib_itens_sv_philips     a, 
                    lib_itens_regra_sv       b,
                    sv_integracao_philips    c  
            where   b.nr_seq_regra_tempo = a.nr_sequencia
            and     a.nr_seq_regra       = c.nr_sequencia
            and     coalesce(c.cd_estabelecimento, cd_estabelecimento_w)         = cd_estabelecimento_w
            and     coalesce(c.cd_setor_atendimento, cd_setor_atendimento_w)     = cd_setor_atendimento_w
            and     a.ie_situacao = 'A'            
            and     not exists
                    (         
                        SELECT	x.nr_atendimento
                        from	atendimento_sinal_vital x
                        where	x.nr_atendimento    = nr_atendimento_w
                        and	    coalesce(x.dt_inativacao::text, '') = ''
                        and	    x.dt_sinal_vital between dt_sinal_vital_w - ((1/24/60)* a.qt_min_item_philips) and dt_sinal_vital_w
                        and	    x.nm_usuario_nrec = nm_usuario_p
                        and	    coalesce(x.ie_integracao_regra, 'N') = 'S'
                        and     x.nr_seq_min_philips = a.nr_sequencia
                    );

        end if;
end if;

if (ie_tipo_periodico_w = 'T') or (ie_tipo_periodico_w = 'P' and ie_integracao_extra_p = 'N') or (ie_tipo_periodico_w = 'A' and ie_integracao_extra_p = 'S') then

    ie_periodico_aceito_w := 'S';
else
    ie_periodico_aceito_w := 'N';
end if;

if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (qt_setor_integrado_w > 0) and (ie_horario_aceito_w = 'S') and (ie_periodico_aceito_w = 'S') and
	((ie_tem_sv_periodo_w <> 'S' or (qt_min_philips_w = 0 AND ie_localizacao_w = 'en_AU'))or ie_tem_suporte_decisao_w = 'S' or ie_integrar_regra_min_w = 'S') then

	for i in 1..Vetor_w.count loop
		begin

        if (ie_integrar_regra_min_w = 'S') then
            select pep_obter_info_SsVs_HL7(Vetor_w[i].nm_codigo, 'F') 
            into STRICT   Vetor_w[i].nm_atributo
;

            select  coalesce(max('S'), 'N')
            into STRICT    ie_ignorar_item_sv_w
            
            where   ds_atributos_regra_min_w like '%'|| Vetor_w[i].nm_atributo || '%';
            
            if (ie_ignorar_item_sv_w <> 'S') then
                Vetor_w[i].nm_codigo := 'XXXX';
            end if;

        end if;

		if (Vetor_w[i].nm_codigo	= '0002-0101') then	-- I
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D1');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_codigo	= '0401-00b8') then	-- I
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D1');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0102') then	-- II
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D2');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0401-00c4') then	-- II
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D2');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0103') then	-- V1
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V1');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0104') then	-- V2
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V2');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0105') then	-- V3
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V3');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0106') then	-- V4
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V4');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0107') then	-- V5
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V5');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0108') then	-- V6
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V6');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-013d') then	-- III
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D3');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-013e') then	-- aVR
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','aVR');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-013f') then	-- aVL
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','aVL');	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0140') then	-- aVF
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','aVF');	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0301') then	-- ST-I
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D1');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0302') then	-- ST-II
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D2');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0303') then	-- ST-V1
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V1');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0304') then	-- ST-V2
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V2');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0305') then	-- ST-V3
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V3');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0306') then	-- ST-V4
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V4');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0307') then	-- ST-V5
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V5');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0308') then	-- ST-V6
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V6');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-033d') then	-- ST-III
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D3');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0401-00c8') then	-- ST-III
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D3');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-033e') then	-- ST-aVR
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','aVR');
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-033f') then	-- ST-aVL
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','aVL');	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-0340') then	-- ST-aVF		
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','aVF');	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SEGMENTO_ST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4182') then	-- HR
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_CARD_MONIT',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_CARDIACA',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4822') then	--Pulse (SpO2)
			begin
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SPO2R', Vetor_w[i].vl_sinal_vital);		/* FC oxi (bpm) */
			end;
		elsif (Vetor_w[i].nm_codigo	= '0002-4900') then	-- SVRI
			atualizar_valor_sv('ATEND_MONIT_HEMOD','TX_RV_SISTEMICA',Vetor_w[i].vl_sinal_vital);
		elsif	((Vetor_w[i].nm_codigo	= '0002-490c')
			or (Vetor_w[i].nm_codigo	= '0002-f047')) then	/* C.I./ ICC (Continuous Cardiac Output Index)*/
			begin
			if (Vetor_w[i].nm_codigo = '0002-490c') then
				ie_tx_indice_card_w := 'S';
			end if;
			
			if ((ie_tx_indice_card_w <> 'S' AND Vetor_w[i].nm_codigo = '0002-f047')
				or (Vetor_w[i].nm_codigo = '0002-490c')) then
				atualizar_valor_sv('ATEND_MONIT_HEMOD','TX_INDICE_CARD',Vetor_w[i].vl_sinal_vital);
			end if;	
			end;
		elsif (Vetor_w[i].nm_codigo	= '0002-4a05') then	-- NBPs
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_SISTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','C');	
		elsif (Vetor_w[i].nm_codigo	= '0002-4a06') then	-- NBPd
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_DIASTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','C');
		elsif (Vetor_w[i].nm_codigo	= '0002-4a07') then	-- NBPm
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PAM',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','C');
		elsif (Vetor_w[i].nm_codigo	= '0002-4a11') then	-- ARTs
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_SISTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');
		elsif (Vetor_w[i].nm_codigo	= '0002-4a12') then	-- ARTd
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_DIASTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');
		elsif (Vetor_w[i].nm_codigo	= '0002-4a13') then	-- ARTm
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PAM',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');			
		elsif (Vetor_w[i].nm_codigo	= '0002-4a15') then	-- ABPs
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_SISTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');	
		elsif (Vetor_w[i].nm_codigo	= '0002-4a16') then	-- ABPd
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_DIASTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');	
		elsif (Vetor_w[i].nm_codigo	= '0002-4a17') then	--ABPm
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PAM',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');			
    elsif (Vetor_w[i].nm_codigo	= '0002-f0a5') then	--
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_SISTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');
    elsif (Vetor_w[i].nm_codigo	= '0002-f0a7') then	--
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PAM',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');
    elsif (Vetor_w[i].nm_codigo	= '0002-f0a6') then	--
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_DIASTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');
		elsif (Vetor_w[i].nm_codigo	= '0002-4a1d') then	-- PAPs
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_SIST_AP',Vetor_w[i].vl_sinal_vital);	
    elsif (Vetor_w[i].nm_codigo	= '0002-f0a9') then	-- PAPs
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_SIST_AP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4a1e') then	-- PAPd
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_DIAST_AP',Vetor_w[i].vl_sinal_vital);	
    elsif (Vetor_w[i].nm_codigo	= '0002-f0aa') then	-- PAPd
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_DIAST_AP',Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_codigo	= '0002-4a1f') then	-- PAPm
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_MEDIA_AP',Vetor_w[i].vl_sinal_vital);
    elsif (Vetor_w[i].nm_codigo	= '0002-f0ab') then	-- PAPm
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_MEDIA_AP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4a33') then	-- LAPm
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PAE',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4a47') then	-- CVPm
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PVC',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b04') then	-- C.O.
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_DEBITO_CARD',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b28') then	-- SVR
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_RV_SISTEMICA',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b3c') then	-- SvO2
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_SATUR_VEN_MISTA_OXIGENIO',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0401-0a98') then	-- SvO2
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_SATUR_VEN_MISTA_OXIGENIO',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b48') then	-- Generic temperature
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b64') then	-- Tesoph
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',2);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b6c') then	-- Tnaso
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',6);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b74') then	-- Tskin
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',4);
		elsif (Vetor_w[i].nm_codigo	in ('0002-4b78','0401-0b54')) then	-- Ttymp
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',5);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b7c') then	-- Tven
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',10);
		elsif (Vetor_w[i].nm_codigo	= '0002-f0c7') then	-- Tven
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',1);
		elsif (Vetor_w[i].nm_codigo	= '0002-f0c8') then	-- Tven
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',1);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b84') then	-- SV
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_VOLUME_SIST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4bb8') then	-- SpO2
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SATURACAO_O2',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b34') then	-- SpO2
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SATURACAO_O2',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-f09c') then	-- SpO2
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SATURACAO_O2',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-fbcf') then	-- SpO2
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_SATURACAO_O2',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SATURACAO_O2',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-5000') then	-- Resp
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FREQ_RESP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_RESP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-500a') then	-- RR
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FREQ_RESP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_RESP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-fb5f') then	-- RRa
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FREQ_RESP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-5012') then	-- awRR
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FREQ_VENT',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-50b0') then	-- etCO2
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_CO2',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-50ba') then	-- ico2
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_ICO2',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-50dd') then	-- PIF
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FLUXO_INSP',Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_codigo	= '0002-50e8') then	-- Pplat
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_PPLATO',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-5100') then	-- iPEEP
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_AUTO_PEEP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-5109') then	-- PIP
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_PIP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-510b') then	-- MnAwP
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_PVA',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-513c') then	-- TV
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_VCI',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-51a8') then	-- PEEP
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_PEEP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-522c') then	-- etN2O
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_OXIDO_NITROSO_EXP',Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_codigo	= '0002-5280') then	-- inN2O
			begin
			ie_inN2O_w := 'S';
			vl_sinal_vital_inN2O_w := Vetor_w[i].vl_sinal_vital;
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_OXIDO_NITROSO_INSP',Vetor_w[i].vl_sinal_vital);
			end;
		elsif (Vetor_w[i].nm_codigo	= '0002-5284') then	-- inO2 
			begin
			ie_inO2_w := 'S';
			vl_sinal_vital_inO2_w := Vetor_w[i].vl_sinal_vital;
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_OXIG_INS',Vetor_w[i].vl_sinal_vital);
			end;
		elsif (Vetor_w[i].nm_codigo	= '0002-5378') then	-- etO2 
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_OXIG_EXP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-538c') then	-- etAGT
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP',Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_codigo	= '0002-5390') then	-- inAGT
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS',Vetor_w[i].vl_sinal_vital);		
		elsif (Vetor_w[i].nm_codigo	= '0002-5804') then	-- CPP
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PPC',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-7498') then	-- FIO2
			begin
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FIO2',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_O2_SUPLEMENTAR', Vetor_w[i].vl_sinal_vital);	
			end;
		elsif (Vetor_w[i].nm_codigo	= '0002-e004') then	-- Trect
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',3);
		elsif (Vetor_w[i].nm_codigo	= '0002-e014') then	-- Tblood
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',10);
		elsif (Vetor_w[i].nm_codigo	= '0002-f04e') then	-- BIS
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_MAEC',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4261') then	-- BIS
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_RITMO_ECG ',3);
		elsif (Vetor_w[i].nm_codigo	= '0002-f0b7') then	-- IC1m
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PRESSAO_INTRA_CRANIO',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-580b') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PRESSAO_INTRA_CRANIO',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-f0e3') then	-- PPV
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_DELTA_PP',Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_codigo	= '0002-f0e5') then	-- Pulse
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_CARDIACA',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-480a') then	-- Pulse
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_CARDIACA',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-f100') then	-- ScvO2
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_SAT_VENOSA_O2',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-f110') then	-- pToral
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO',9);
		elsif (Vetor_w[i].nm_codigo	= '0002-f897') then	-- TOFrat
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TOF_BLOQ_NEURO_MUSC',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-f899') then	-- Rdyn
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_RSR',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-f8a1') then	-- ExpTi
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_TE',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-f8a3') then	-- InsTi
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_TI',Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_codigo	= '0002-5148') then	-- MINVOL
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_VMIN',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-508c') then	-- Cdyn
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_CDYN',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-5090') then	-- Cstat
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_CST',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-f05d') then	-- MAC
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_CAM',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4b40') then	-- AaDO2
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_CONT_ART_VEN_OXIG',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4a01') then	-- P suporte (cmH2O)
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_PS', Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_codigo	= '0402-f91d') then	-- Sensib resp (I/min
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_SENSIB_FLUXO', Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_codigo	= '0002-f049') then	/*Variacao de Pressao Sistolica (VPS) (Stroke volume variation - SVV)*/
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_VPS',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_codigo	= '0002-4a24') then	-- PAW
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_OCLUIDA_AP',Vetor_w[i].vl_sinal_vital);

		elsif (Vetor_w[i].nm_codigo	= '0002-5278') then
			begin
			qt_Isoflurano_halog_insp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 1;	
			end if;
			end;		
		elsif (Vetor_w[i].nm_codigo	= '0002-5224') then
			begin
			qt_Isoflurano_halog_exp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 1;		
			end if;
			end;		
		elsif (Vetor_w[i].nm_codigo	= '0002-f8cb') then
			begin
			qt_Isoflurano_utilizada_w := Vetor_w[i].vl_sinal_vital;	
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 1;	
			end if;
			end;		
		elsif (Vetor_w[i].nm_codigo	= '0002-5274') then
			begin
			qt_Sevofl_halog_insp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 2; 			
			elsif (obter_se_existe_agente(4,nr_cirurgia_ww, cd_estabelecimento_w) = 'S')  then
				CALL atualizar_adm_agente_anest(4,nr_cirurgia_ww);
			end if;
			end;		
		elsif (Vetor_w[i].nm_codigo	= '0002-5220') then
			begin
			qt_Sevofl_halog_exp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 2; 			
			end if;
			end;		
		elsif (Vetor_w[i].nm_codigo	='0002-f8cc') then
			begin
			ie_sevo_w := 'S';
			qt_Sevofl_utilizada_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 2;
			end if;
			end;
			
		elsif (Vetor_w[i].nm_codigo	= '0002-5270') then
			begin
			qt_Halotano_halog_insp_w := Vetor_w[i].vl_sinal_vital;	
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 3;
			end if;
			end;		
		elsif (Vetor_w[i].nm_codigo	= '0002-521c') then
			begin
			qt_Halotano_halog_exp_w := Vetor_w[i].vl_sinal_vital;		
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 3;
			end if;
			end;		
		elsif (Vetor_w[i].nm_codigo	= '0002-f8ca') then
			begin
			qt_Halotano_utilizada_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 3;
			end if;
			end;		
			
		elsif (Vetor_w[i].nm_codigo	= '0002-526c') then
			begin
			qt_Enfluorano_halog_insp_w := Vetor_w[i].vl_sinal_vital;		
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 4;
			end if;
			end;		
		elsif (Vetor_w[i].nm_codigo	= '0002-5218') then
			begin
			qt_Enfluorano_halog_exp_w := Vetor_w[i].vl_sinal_vital;	
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 4;
			end if;
			end;		
		elsif (Vetor_w[i].nm_codigo	= '0002-f8c9') then
			begin
			qt_Enfluorano_utilizada_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 4; 	
			end if;
			end;		
			
		elsif (Vetor_w[i].nm_codigo	= '0402-f8f5') then	-- sMode
			begin
			if (Vetor_w[i].vl_sinal_vital	= 'D002-0001') then
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'VCV';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0002') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'PCV';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0003') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'PSV + CPAP';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0004') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'SIMVV';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0005') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'SIMVP';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0006') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'MMV + PSV';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0007') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'PSV + VTA';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0008') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'APRV';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0009') then	
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_RESPIRACAO','VMNI');
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-000A') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'TCPL';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-000B') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'TCPL + SIMVP';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-000C') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'CPAP';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-000D') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'VCV RESP';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-000E') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'PCV RESP';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-000F') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'TCPL RESP';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0010') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'EMERG';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0011') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'PRVC';
			elsif (Vetor_w[i].vl_sinal_vital	= 'D002-0012') then	
				select	max(cd_modalidade)
				into STRICT	cd_modalidade_w
				from	MODALIDADE_VENTILATORIA
				where	CD_MOD_INTEGRACAO = 'ESPERA';
			end if;
			if (cd_modalidade_w IS NOT NULL AND cd_modalidade_w::text <> '') then	
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','CD_MOD_VENT',cd_modalidade_w);
			end if;
			end;

		end if;
	
		end;
end loop;
	
	if (coalesce(ie_tipo_Halogenado_w,0) > 0) then
		begin
		if (ie_inN2O_w = 'S') then
			begin
			if (coalesce(ie_tipo_Halogenado_w,0) = 1) then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Isoflurano_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Isoflurano_halog_exp_w);
				qt_utilizada_w := qt_Isoflurano_utilizada_w;
			elsif (coalesce(ie_tipo_Halogenado_w,0) = 2) then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Sevofl_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Sevofl_halog_exp_w);
				qt_utilizada_w := qt_Sevofl_utilizada_w;
			elsif (coalesce(ie_tipo_Halogenado_w,0) = 3) then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Halotano_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Halotano_halog_exp_w);
				qt_utilizada_w := qt_Halotano_utilizada_w;
			elsif (coalesce(ie_tipo_Halogenado_w,0) = 4) then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Enfluorano_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Enfluorano_halog_exp_w);
				qt_utilizada_w := qt_Enfluorano_utilizada_w;
			end if;

			if (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, qt_utilizada_w, null);
			elsif (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (vl_sinal_vital_inN2O_w <> obter_vl_agente_adm(2,nr_cirurgia_ww)) then
				CALL atualizar_adm_agente_anest(2,nr_cirurgia_ww);
				CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, qt_utilizada_w, null);
			elsif (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_cir_agente_anest(2,	nr_cirurgia_ww,
										 vl_sinal_vital_inN2O_w,
										 cd_estabelecimento_w);
				CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, qt_utilizada_w, null);
			elsif (somente_numero(vl_sinal_vital_inN2O_w) = 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') then
				CALL atualizar_adm_agente_anest(2,nr_cirurgia_ww);	
			end if;			
			
			end;
		end if;
		if (ie_inO2_w = 'S') then
			begin
			if (coalesce(ie_tipo_Halogenado_w,0) = 1) then 
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Isoflurano_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Isoflurano_halog_exp_w);
				qt_utilizada_w := qt_Isoflurano_utilizada_w;
			elsif (coalesce(ie_tipo_Halogenado_w,0) = 2) then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Sevofl_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Sevofl_halog_exp_w);
				qt_utilizada_w := qt_Sevofl_utilizada_w;
			elsif (coalesce(ie_tipo_Halogenado_w,0) = 3) then 
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Halotano_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Halotano_halog_exp_w);
				qt_utilizada_w := qt_Halotano_utilizada_w;
			elsif (coalesce(ie_tipo_Halogenado_w,0) = 4) then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Enfluorano_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Enfluorano_halog_exp_w);
				qt_utilizada_w := qt_Enfluorano_utilizada_w;
			end if;

			if (somente_numero(vl_sinal_vital_inO2_w) > 0) and (obter_se_existe_agente(3,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(3,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_adm_agente_anestesico(3,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, null);
			elsif (somente_numero(vl_sinal_vital_inO2_w) > 0) and (obter_se_existe_agente(3,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(3,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (vl_sinal_vital_inO2_w <> obter_vl_agente_adm(3,nr_cirurgia_ww)) then
				CALL atualizar_adm_agente_anest(3,nr_cirurgia_ww);
				CALL inserir_adm_agente_anestesico(3,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, null);
			elsif (somente_numero(vl_sinal_vital_inO2_w) > 0) and (obter_se_existe_agente(3,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_cir_agente_anest(3,	nr_cirurgia_ww,
										vl_sinal_vital_inO2_w,
										cd_estabelecimento_w);
				CALL inserir_adm_agente_anestesico(3,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, null);
			elsif (somente_numero(vl_sinal_vital_inO2_w) = 0) and (obter_se_existe_agente(3,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(3,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') then
				CALL atualizar_adm_agente_anest(3,nr_cirurgia_ww);	
			end if;	
			
			end;
		end if;

		if (ie_sevo_w = 'S') then
			begin
			if (coalesce(ie_tipo_Halogenado_w,0) = 1) then 
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Isoflurano_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Isoflurano_halog_exp_w);
				qt_utilizada_w := qt_Isoflurano_utilizada_w;
				qt_halog_insp_w := qt_Isoflurano_halog_insp_w;
			elsif (coalesce(ie_tipo_Halogenado_w,0) = 2) then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Sevofl_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Sevofl_halog_exp_w);
				qt_utilizada_w := qt_Sevofl_utilizada_w;
				if (somente_numero(qt_Sevofl_halog_insp_w) = 0) then
					CALL atualizar_registro_adm_sevo(4, qt_utilizada_w, nr_cirurgia_ww);
					qt_utilizada_w:= 0;
				end if;
				qt_halog_insp_w := qt_Sevofl_halog_insp_w;
			elsif (coalesce(ie_tipo_Halogenado_w,0) = 3) then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Halotano_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Halotano_halog_exp_w);
				qt_utilizada_w := qt_Halotano_utilizada_w;
				qt_halog_insp_w := qt_Halotano_halog_insp_w;
			elsif (coalesce(ie_tipo_Halogenado_w,0) = 4) then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Enfluorano_halog_insp_w);
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Enfluorano_halog_exp_w);
				qt_utilizada_w := qt_Enfluorano_utilizada_w;
				qt_halog_insp_w := qt_Enfluorano_halog_insp_w;
			end if;			

			if (somente_numero(qt_utilizada_w) > 0) and (obter_se_existe_agente(4,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(4,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_adm_agente_anestesico(4,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);
			elsif (somente_numero(qt_utilizada_w) > 0) and (obter_se_existe_agente(4,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(4,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') then
				CALL atualizar_adm_agente_anest(4,nr_cirurgia_ww);
				CALL inserir_adm_agente_anestesico(4,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);
			elsif (somente_numero(qt_utilizada_w) > 0) and (obter_se_existe_agente(4,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_cir_agente_anest(4,	nr_cirurgia_ww,
										vl_sinal_vital_inO2_w,
										cd_estabelecimento_w);
				CALL inserir_adm_agente_anestesico(4,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);
			elsif (obter_se_existe_agente(4,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(4,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') then
				CALL atualizar_adm_agente_anest(4,nr_cirurgia_ww);	
			end if;	
			
			end;
		end if;

		end;
	else /* Alteracao para integrar o Oxido Nitroso mesmo sem ter iniciado os hologenados. Nesta situacao so se enquadra os agentes anestesico, ou seja, o oxigenio nao deve ser integrado ainda. Fonte: Miller's Anesthesia  -  8th edition -  Volume 1 - Chapter 25*/
		if (ie_inN2O_w = 'S') then
			begin
			if (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, null, null);
			elsif (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (vl_sinal_vital_inN2O_w <> obter_vl_agente_adm(2,nr_cirurgia_ww)) then
				CALL atualizar_adm_agente_anest(2,nr_cirurgia_ww);
				CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, null, null);
			elsif (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_cir_agente_anest(2,	nr_cirurgia_ww,
										 vl_sinal_vital_inN2O_w,
										 cd_estabelecimento_w);
				CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, null, null);
			elsif (somente_numero(vl_sinal_vital_inN2O_w) = 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') then
				CALL atualizar_adm_agente_anest(2,nr_cirurgia_ww);	
			end if;			
			
			end;
		end if;
	end if;	

end if;

commit;

 if ( ie_tem_suporte_decisao_w = 'S') and (coalesce(nr_seq_sinal_vital_w,0) > 0) then
    begin

    nr_regras_atendidas_w := GQA_Liberacao_Sinal_Vital(nr_seq_sinal_vital_w, nm_usuario_p);
    CALL gera_protocolo_assistencial(nr_atendimento_w, nm_usuario_p);

    Select  coalesce(max('S'),'N')
    into STRICT    qt_gerado_mentor_w
    from    gqa_pendencia_pac 
    where   nr_seq_sinal_vital = nr_seq_sinal_vital_w;
        
    if (qt_gerado_mentor_w = 'S') then
    
        update  atendimento_sinal_vital
        set     ie_integracao_mentor =  'S'
        where   nr_sequencia = nr_seq_sinal_vital_w;

        commit;

    end if;

    exception
    when others then
            sql_errm_w := substr(sqlerrm,4000);
    end;
 end if;

if (coalesce(nr_seq_sinal_vital_w,0) > 0) then
	begin
    CALL release_vital_sign_integration(nr_seq_sinal_vital_w, nr_seq_monit_hemo_w, nr_seq_monit_resp_w, nr_atendimento_w, cd_estabelecimento_w);
	exception
	when others then
		update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
		update atendimento_monit_resp  set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_resp_w;
		update atend_monit_hemod       set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_hemo_w;
		commit;
	end;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_sinal_vital_philips (cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, cd_setor_atendimento_p text default null, cd_unidade_basica_p text default null, cd_unidade_compl_p text default null, ie_integracao_extra_p text default 'N', nr_seq_log_integracao_p bigint default null, nr_atendimento_p bigint default null) FROM PUBLIC;

