-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consiste_proced_autor ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_prestador_p bigint, ie_evento_p text, ie_origem_proced_p bigint, ie_consiste_guia_p INOUT text, ie_existe_regra_p INOUT text, nr_seq_motivo_glosa_p INOUT bigint, nr_seq_regra_p INOUT pls_regra_autorizacao.nr_sequencia%type) AS $body$
DECLARE



cd_guia_referencia_w		varchar(20);
cd_cgc_cooperativa_w		varchar(14);
nr_seq_contrato_w			varchar(10);
nr_seq_contrato_intercambio_w	varchar(10);
ie_tipo_guia_w			varchar(2);
sg_estado_w			pessoa_juridica.sg_estado%type;
sg_estado_operadora_w		pessoa_juridica.sg_estado%type;
nr_seq_prestador_w		bigint;
ie_tipo_conta_w			varchar(2);
ie_liberado_w			varchar(1);
ie_existe_regra_w			varchar(1);
ie_grupo_contrato_w		varchar(1)	:= 'S';
ie_tipo_intercambio_w		varchar(1)	:= 'A';
ie_grupo_servico_w			varchar(1)	:= 'S';
nr_seq_prestador_imp_w		numeric(20);
cd_procedimento_w		bigint;
cd_grupo_w			bigint;
cd_especialidade_w		bigint;
cd_area_w			bigint;
ie_origem_proced_w		bigint;
nr_seq_tipo_atendimento_w		bigint;
nr_seq_motivo_glosa_w		bigint := null;
nr_seq_segurado_w		bigint;
nr_seq_grupo_contrato_w		bigint;
nr_seq_prestador_prot_w		bigint;
nr_seq_congenere_w		bigint;
nr_seq_congenere_protocolo_w	bigint;
nr_seq_grupo_servico_w		bigint;
nr_seq_prestador_prot_imp_w     pls_protocolo_conta.nr_seq_prestador_imp%type;
ie_guia_valida_w		varchar(1) := 'N';
dt_procedimento_w		timestamp;
nr_seq_regra_aut_w		bigint;
nr_seq_regra_aut_ww		bigint;
cd_cgc_congenere_w		varchar(14);
ie_tipo_congenere_w		varchar(1) := 'A';
sg_estado_congenere_w		pessoa_juridica.sg_estado%type;
ie_tipo_segurado_w		varchar(1);
nr_seq_grupo_produto_w		bigint;
nr_seq_plano_w			bigint;
ie_grupo_produto_w		varchar(1);
nr_seq_cbo_conta_w		bigint;
cd_especialidade_medica_w	especialidade_medica.cd_especialidade%type;
nr_seq_regra_w			pls_regra_autorizacao.nr_sequencia%type;
ie_carater_internacao_w		pls_regra_autorizacao.ie_carater_internacao%type;
ie_excecao_w			varchar(2);
ds_log_call_w			varchar(1500);
ie_preco_w			pls_plano.ie_preco%type;
dt_atendimento_referencia_w	timestamp;
ie_tipo_atendimento_imp_w	pls_conta.ie_tipo_atendimento_imp%type;
cd_estabelecimento_w		pls_conta.cd_estabelecimento%type;
ie_regime_atendimento_w		pls_conta.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_conta.ie_saude_ocupacional%type;

-- feito esta tratativa com dois cursores devido a performance.

-- e mais facil identificar primeiro as regras para o procedimento e depois aplicar os demais itens da regra no cursor 2
c01 CURSOR FOR
	SELECT 	nr_sequencia, ie_liberado, cd_procedimento,
		cd_grupo_proc, cd_especialidade, cd_area_procedimento,
		nr_seq_grupo_servico, nr_seq_prestador, ie_tipo_segurado
	from	pls_regra_autorizacao
	where	((coalesce(cd_procedimento::text, '') = '') 	or (cd_procedimento  	=  cd_procedimento_w AND ie_origem_proced 	= ie_origem_proced_w))
	and 	((coalesce(cd_area_procedimento::text, '') = '') 	or (cd_area_procedimento = cd_area_w))
	and 	((coalesce(cd_especialidade::text, '') = '' ) 	or (cd_especialidade 	= cd_especialidade_w))
	and 	((coalesce(cd_grupo_proc::text, '') = '') 	or ( cd_grupo_proc 	= cd_grupo_w))
	and	coalesce(nr_seq_material, 1) = 1
	and	coalesce(nr_seq_estrut_mat, 1) = 1
	order by
		ie_liberado desc,
		coalesce(cd_procedimento,0),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_procedimento,0),
		coalesce(nr_seq_grupo_servico,0),
		coalesce(nr_seq_prestador,0),
		ie_tipo_segurado;

c02 CURSOR FOR
	SELECT 	ie_liberado,
		nr_seq_motivo_glosa,
		nr_seq_grupo_contrato,
		nr_seq_grupo_servico,
		nr_sequencia,
		nr_seq_grupo_produto
	from	pls_regra_autorizacao
	where	nr_sequencia = nr_seq_regra_w
	and 	cd_estabelecimento			= cd_estabelecimento_p
	and 	ie_situacao            			= 'A'
	and	((coalesce(nr_seq_prestador::text, '') = '')	or (nr_seq_prestador 	= coalesce(nr_seq_prestador_imp_w,nr_seq_prestador_w)))
	and	((coalesce(nr_seq_tipo_atendimento::text, '') = '') 	or ( nr_seq_tipo_atendimento = nr_seq_tipo_atendimento_w))
	and	((coalesce(ie_regime_atendimento::text, '') = '') 	or ( ie_regime_atendimento = ie_regime_atendimento_w))
	and	((coalesce(ie_saude_ocupacional::text, '') = '') 	or ( ie_saude_ocupacional = ie_saude_ocupacional_w))
	and	((coalesce(ie_tipo_segurado::text, '') = '') 	or (ie_tipo_segurado 	= ie_tipo_segurado_w))
	and	((coalesce(ie_tipo_guia::text, '') = '') 	or (ie_tipo_guia 	= ie_tipo_guia_w))
	and	(((ie_tipo_intercambio	= 'A') 		or (coalesce(ie_tipo_intercambio::text, '') = '')) or (coalesce(ie_tipo_intercambio,'A') = ie_tipo_intercambio_w))
	and	(((ie_tipo_congenere	= 'A') 		or (coalesce(ie_tipo_congenere::text, '') = '')) or (coalesce(ie_tipo_congenere,'A') = ie_tipo_congenere_w))
	and	((coalesce(ie_guia_valida,'N') = 'S') 	or (coalesce(ie_guia_valida,'N') = ie_guia_valida_w ))
	and	dt_procedimento_w between coalesce(dt_inicio_vigencia,dt_procedimento_w-1) and coalesce(dt_fim_vigencia,dt_procedimento_w+1)
	and	((coalesce(cd_especialidade_medica::text, '') = '') or (cd_especialidade_medica = cd_especialidade_medica_w))
	and	((coalesce(ie_carater_internacao::text, '') = '') or (ie_carater_internacao = ie_carater_internacao_w))
	and	((coalesce(ie_preco::text, '') = '') or (ie_preco = ie_preco_w));
	
BEGIN
ie_liberado_w 		:= 'N';
ie_existe_regra_w 	:= 'N';
begin
	select 	a.ie_tipo_guia,
		a.cd_guia_referencia,
		a.nr_seq_tipo_atendimento,
		a.nr_seq_segurado,
		a.nr_Seq_prestador,
		a.nr_seq_prestador_imp,
		a.nr_Seq_congenere,
		a.ie_tipo_conta,
		a.nr_seq_cbo_saude,
		b.nr_seq_congenere,
		a.dt_atendimento_referencia,
		a.ie_tipo_atendimento_imp,
		a.cd_estabelecimento,
		a.ie_tipo_segurado,
		a.ie_regime_atendimento,
		a.ie_saude_ocupacional
	into STRICT	ie_tipo_guia_w,
		cd_guia_referencia_w,
		nr_seq_tipo_atendimento_w,
		nr_seq_segurado_w,
		nr_seq_prestador_prot_w,
		nr_seq_prestador_prot_imp_w,
		nr_Seq_congenere_w,
		ie_tipo_conta_w,
		nr_seq_cbo_conta_w,
		nr_seq_congenere_protocolo_w,
		dt_atendimento_referencia_w,
		ie_tipo_atendimento_imp_w,
		cd_estabelecimento_w,
		ie_tipo_segurado_w,
		ie_regime_atendimento_w,
		ie_saude_ocupacional_w	
	from 	pls_conta 		a,
		pls_protocolo_conta 	b
	where 	a.nr_seq_protocolo 	= b.nr_Sequencia
	and	a.nr_sequencia 		= nr_seq_conta_p;
exception
when others then
	null;
end;

nr_seq_prestador_w	:=  coalesce(nr_seq_prestador_p,nr_seq_prestador_prot_w);

if (coalesce(nr_seq_prestador_imp_w::text, '') = '')	then
	nr_seq_prestador_imp_w := nr_seq_prestador_prot_w;
end if;
ie_tipo_conta_w := coalesce(ie_tipo_conta_w,'X');

if (ie_evento_p in ('CC','DC','I5')) then
	nr_seq_prestador_prot_w := nr_seq_prestador_prot_w;
	begin
		select  cd_procedimento,
			ie_origem_proced,
			coalesce(dt_procedimento,clock_timestamp())
		into STRICT	cd_procedimento_w,
			ie_origem_proced_w,
			dt_procedimento_w
		from	pls_conta_proc
		where	nr_sequencia	= nr_seq_conta_proc_p;
	exception
	when others then
		cd_procedimento_w := null;
		ie_origem_proced_w := null;
		dt_procedimento_w := clock_timestamp();
	end;
	ie_guia_valida_w := 'N';
elsif (ie_evento_p = 'IA') then
	begin	
		nr_seq_prestador_prot_w := nr_seq_prestador_prot_imp_w;
	exception
	when others then
		nr_seq_prestador_prot_w := null;
	end;
	
	select	max(nr_sequencia)
	into STRICT	nr_seq_tipo_atendimento_w
	from	pls_tipo_atendimento
	where	cd_tiss			= ie_tipo_atendimento_imp_w
	and	cd_estabelecimento	= cd_estabelecimento_w;
	
	begin
		select	coalesce(cd_procedimento, cd_procedimento_imp),
			ie_origem_proced_p,
			coalesce(dt_procedimento,clock_timestamp())
		into STRICT	cd_procedimento_w,
			ie_origem_proced_w,
			dt_procedimento_w
		from	pls_conta_proc
		where	nr_sequencia	= nr_seq_conta_proc_p;
	exception
	when others then
		cd_procedimento_w := null;
		ie_origem_proced_w := null;
		dt_procedimento_w := clock_timestamp();
	end;
	ie_guia_valida_w := 'S';
end if;

begin
	select	nr_seq_contrato,
		nr_seq_intercambio,
		pls_obter_produto_benef(nr_sequencia,dt_atendimento_referencia_w)
		--nr_seq_plano
	into STRICT	nr_seq_contrato_w,
		nr_seq_contrato_intercambio_w,
		nr_seq_plano_w
	from	pls_segurado
	where	nr_sequencia = nr_seq_segurado_w;
exception
when others then
	nr_seq_contrato_w		:= 0;
	nr_seq_contrato_intercambio_w	:= 0;
	ie_tipo_segurado_w		:= null;
	nr_seq_plano_w			:= null;
end;
SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_proced_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w;

select	max(ie_preco)
into STRICT	ie_preco_w
from	pls_plano
where	nr_sequencia = nr_seq_plano_w;

select	coalesce(max(sg_estado),'X') /* Obter a UF da operadora  - Tasy */
into STRICT	sg_estado_w
from	pessoa_juridica
where	cd_cgc	=	(SELECT	max(cd_cgc_outorgante)
			from	pls_outorgante
			where	cd_estabelecimento	= cd_estabelecimento_p);

if (ie_tipo_conta_w = 'I')	then /* se o tipo da conta for igual a intercambio entao verifica o congenere da conta  	Demitrius OS -  364849 */
	begin
		select	sg_estado /* Obter estado da operadora congenere */
		into STRICT	sg_estado_operadora_w
		from	pls_congenere	a,
			pessoa_juridica	b
		where	b.cd_cgc	= a.cd_cgc
		and	a.nr_sequencia	= nr_seq_congenere_protocolo_w;
	exception
	when others then
		sg_estado_operadora_w := null;
	end;
	/*Alexandre - OS 327220 - Alterado para obter o estado da operadora conegere informada no protocolo. Validando a regra do campo IE_TIPO_INTERCAMBIO encima do operadora informando no protocolo*/

elsif (ie_tipo_conta_w = 'C')	then  /* Verifica se a conta e uma cobranca, se for uma cobranca a rotina verifica a cooperativa da conta.	Demitrius OS -  364849 */
	if (cd_cgc_cooperativa_w IS NOT NULL AND cd_cgc_cooperativa_w::text <> '') then
		select 	max(cd_cgc)
		into STRICT	cd_cgc_cooperativa_w
		from 	pls_congenere
		where 	cd_cooperativa =	(SELECT	cd_cooperativa
						from	pls_conta
						where 	nr_sequencia	= nr_seq_conta_p);
		begin				
			select	sg_estado
			into STRICT	sg_estado_operadora_w
			from	pessoa_juridica
			where	cd_cgc	= cd_cgc_cooperativa_w;
		exception
		when others then
			sg_estado_operadora_w := null;
		end;
	end if;
end if;

if (sg_estado_w <> 'X') and (coalesce(sg_estado_operadora_w,'X') <> 'X') then /* Verifica o estado da congenere e da outorgante e o mesmo, se nao for o mesmo entao e intercambio nacional */
	if ( sg_estado_w	= sg_estado_operadora_w ) then
		ie_tipo_intercambio_w	:= 'E'; --ESTADUAL
	else
		ie_tipo_intercambio_w	:= 'N'; -- NACIONAL
	end if;
else
	ie_tipo_intercambio_w	:= 'A';
end if;

-- jjung OS 490482 - Obter o estado da operadora congenere  do segurado.				
select	max(cd_cgc)	
into STRICT	cd_cgc_congenere_w
from	pls_congenere
where	nr_sequencia = (	SELECT	max(a.nr_seq_congenere)
				from	pls_segurado	a,
					pls_conta	b
				where	a.nr_sequencia = b.nr_seq_segurado
				and	b.nr_sequencia = nr_seq_conta_p
			);
begin
	select	sg_estado
	into STRICT	sg_estado_congenere_w
	from	pessoa_juridica
	where	cd_cgc = cd_cgc_congenere_w;
exception
when others then
	sg_estado_congenere_w := null;
end;

-- jjung OS 490482 - Verificar a abragencia da congenere do beneficiario.
if ( sg_estado_w <> 'X') and (coalesce(sg_estado_congenere_w,'X') <> 'X') then
	if ( sg_estado_w	= sg_estado_congenere_w ) then
		ie_tipo_congenere_w	:= 'E'; --ESTADUAL
	else
		ie_tipo_congenere_w	:= 'N'; -- NACIONAL
	end if;
else
	ie_tipo_congenere_w	:= 'A';--AMBOS/Regra para todos. pls_regra_autorizacao ie_tipo_congenere
end if;

select	max(cd_especialidade)
into STRICT	cd_especialidade_medica_w
from	especialidade_medica
where	nr_seq_cbo_saude = nr_seq_cbo_conta_w;

select	ie_carater_internacao
into STRICT	ie_carater_internacao_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_p  LIMIT 1;

for r_c01_w in c01 loop
	
	nr_seq_regra_w := r_c01_w.nr_sequencia;	
	for r_c02_w in c02 loop			
		
		nr_seq_motivo_glosa_w := r_c02_w.nr_seq_motivo_glosa;
		nr_seq_grupo_contrato_w := r_c02_w.nr_seq_grupo_contrato;
		nr_seq_grupo_servico_w := r_c02_w.nr_seq_grupo_servico;
		nr_seq_grupo_produto_w := r_c02_w.nr_seq_grupo_produto;

		--Por default, seta tudo como valido antes das verificacoes
		ie_grupo_contrato_w	:= 'S';
		ie_grupo_produto_w	:= 'S';
		ie_grupo_servico_w	:= 'S';

		--Apenas verifica se grupo contrato e valido, caso a regra tenha essa informacao
		if (coalesce(nr_seq_grupo_contrato_w,0) > 0) then /* Grupo de contratos */
			if	((coalesce(nr_seq_contrato_w,0) > 0) or (coalesce(nr_seq_contrato_intercambio_w,0) > 0)) then
				ie_grupo_contrato_w	:= pls_se_grupo_preco_contrato(nr_seq_grupo_contrato_w, nr_seq_contrato_w, nr_seq_contrato_intercambio_w);
			else
				ie_grupo_contrato_w	:= 'N';
			end if;
		end if;
		
		--Somente verifica o grupo de servico, caso a regra tenha essa informacao
		if (nr_seq_grupo_servico_w IS NOT NULL AND nr_seq_grupo_servico_w::text <> '') then
			ie_grupo_servico_w	:= pls_se_grupo_preco_servico(nr_seq_grupo_servico_w,cd_procedimento_w,ie_origem_proced_w);
						
		end if;
		
		--Somente verifica o grupo de produto, caso a regra tenha essa informacao
		if (coalesce(nr_seq_grupo_produto_w,0) > 0) then
			ie_grupo_produto_w	:= pls_se_grupo_preco_produto(nr_seq_grupo_produto_w, nr_seq_plano_w);
		end if;
			
		if (ie_grupo_contrato_w = 'S') and (ie_grupo_produto_w = 'S') and (ie_grupo_servico_w = 'S')then
						
			ie_liberado_w		:= r_c02_w.ie_liberado;
			ie_existe_regra_w	:= 'S';
			nr_seq_regra_aut_ww 	:= nr_seq_regra_w;
			
			--Verifica se existe excecao para a regra.
			ie_excecao_w := pls_obter_excecao_autorizacao(nr_seq_regra_w, nr_seq_prestador_w, cd_procedimento_w, ie_origem_proced_w, null);		
			--So precisa verificar excecao da regra, caso realmente a regra esta sendo valida ate aqui.  Caso tiver valida e excecao tambem ser valida, a mesma devera modificar o valor da ie_liberado
			if (ie_excecao_w = 'S') then
	
				nr_seq_motivo_glosa_w := null;
				if (r_c02_w.ie_liberado = 'S') then
					ie_liberado_w := 'N';
				else
					ie_liberado_w := 'S';
				end if;			
				exit;
			end if;
			
		end if;

	end loop;
	
end loop;

update	pls_conta_proc
set	ie_exige_autorizacao 	= coalesce(ie_liberado_w,'N')
where	nr_sequencia 		= nr_seq_conta_proc_p;
commit;

if (ie_existe_regra_w = 'S') then
	nr_seq_regra_p := nr_seq_regra_aut_ww;
else
	nr_seq_regra_p := null;
end if;

nr_seq_motivo_glosa_p	:= nr_seq_motivo_glosa_w;
ie_existe_regra_p	:= ie_existe_regra_w;
ie_consiste_guia_p	:= ie_liberado_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consiste_proced_autor ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_prestador_p bigint, ie_evento_p text, ie_origem_proced_p bigint, ie_consiste_guia_p INOUT text, ie_existe_regra_p INOUT text, nr_seq_motivo_glosa_p INOUT bigint, nr_seq_regra_p INOUT pls_regra_autorizacao.nr_sequencia%type) FROM PUBLIC;

