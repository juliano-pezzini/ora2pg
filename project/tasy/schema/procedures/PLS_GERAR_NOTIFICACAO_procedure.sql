-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_notificacao ( nr_seq_lote_p bigint, ie_incluir_notific_p text, nm_usuario_p text, cd_estabelecimento_p bigint) is /* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar as notificacoes de atraso para os pagadores conforme a de notificacao
especificada no lote de notificacoes.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
	Parametro [3] - qt_meses_perda_w
	Parametro [4] - ie_incluir_notific_p
	PLS_AJUSTAR_MIN_MAX_TIT_NOTIF
-------------------------------------------------------------------------------------------------------------------

Referencias:
	OPS - Controle de Notificacoes de Atraso
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 cd_cgc_w varchar(14) RETURNS bigint AS $body$
DECLARE


qt_excesao_w	bigint;
				
BEGIN

select	count(1)
into STRICT	qt_excesao_w
from	pls_notific_regra_excecao a
where	((nr_seq_contrato_p = a.nr_seq_contrato) or (coalesce(a.nr_seq_contrato::text, '') = ''))
and	((cd_portador_p = a.cd_portador) or (coalesce(a.cd_portador::text, '') = ''))
and	((cd_tipo_portador_p = a.cd_tipo_portador) or (coalesce(a.cd_tipo_portador::text, '') = ''))
and	((ie_origem_titulo_excesao_p = a.ie_origem_titulo) or (coalesce(a.ie_origem_titulo::text, '') = ''))
and	((a.cd_tipo_portador IS NOT NULL AND a.cd_tipo_portador::text <> '') or (a.cd_portador IS NOT NULL AND a.cd_portador::text <> '') or (a.nr_seq_contrato IS NOT NULL AND a.nr_seq_contrato::text <> '')
	or (a.ie_origem_titulo IS NOT NULL AND a.ie_origem_titulo::text <> '') or (a.nr_seq_pagador IS NOT NULL AND a.nr_seq_pagador::text <> '') or (a.nr_seq_motivo_suspensao IS NOT NULL AND a.nr_seq_motivo_suspensao::text <> ''))
and	((nr_seq_pagador_p = a.nr_seq_pagador) or (coalesce(a.nr_seq_pagador::text, '') = ''))
and	((coalesce(a.nr_seq_motivo_suspensao::text, '') = '') 
	or (exists (	SELECT	1
			from	pls_contrato_susp_mens x
			where	x.nr_seq_pagador = nr_seq_pagador_p
			and	clock_timestamp() between coalesce(x.dt_inicio_suspensao, clock_timestamp()) and coalesce(x.dt_fim_suspensao, clock_timestamp())
			and	(x.dt_liberacao IS NOT NULL AND x.dt_liberacao::text <> '')
			and	x.nr_seq_motivo_suspensao = a.nr_seq_motivo_suspensao
			
union all

			SELECT	1
			from	pls_contrato_susp_mens x
			where	x.nr_seq_contrato = nr_seq_contrato_p
			and	coalesce(x.nr_seq_pagador::text, '') = ''
			and	clock_timestamp() between coalesce(x.dt_inicio_suspensao, clock_timestamp()) and coalesce(x.dt_fim_suspensao, clock_timestamp())
			and	(x.dt_liberacao IS NOT NULL AND x.dt_liberacao::text <> '')
			and	x.nr_seq_motivo_suspensao = a.nr_seq_motivo_suspensao)))
and	nr_seq_regra_geracao = nr_seq_regra_p;

return qt_excesao_w;

end;
	
function obter_regra_excecao_etapa_cobr(	nr_seq_regra_p		pls_notificacao_regra.nr_sequencia%type,
						nr_titulo_p		titulo_receber.nr_titulo%type)
					return number is

qt_excecao_etapa_cobranca_w	number(10);

begin

select 	count(1)
into STRICT	qt_excecao_etapa_cobranca_w
from 	pls_notif_regra_etapa a
where 	a.nr_seq_regra = nr_seq_regra_p
and 	exists ( SELECT	1
		 from	cobranca_etapa y,
			cobranca x
		 where 	x.nr_titulo = nr_titulo_p
		 and 	x.nr_sequencia = y.nr_seq_cobranca
		 and 	y.nr_seq_etapa = a.nr_seq_etapa);

return 	qt_excecao_etapa_cobranca_w;

end;

begin
-- Leitura do parametro 3 da OPS - Controle de notificacoes de atraso
begin
qt_meses_perda_w	:= coalesce(obter_valor_param_usuario(1241, 3, Obter_Perfil_Ativo, nm_usuario_p, 0), 0);
exception
when others then
	qt_meses_perda_w	:= 0;
end;

select  coalesce(max(nr_seq_regra), 0),
	trunc(dt_lote,'dd'),
	max(nr_seq_tipo_notificacao)
into STRICT	nr_seq_regra_w,
	dt_lote_w,
	nr_seq_tipo_notif_lote_w
from	pls_notificacao_lote
where	nr_sequencia    = nr_seq_lote_p
group by
	dt_lote;

if (nr_seq_regra_w = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(187638);
else
	select	qt_dias_atraso,
		ie_rescindir_contrato,
		ie_contrato_ativo,
		ie_contrato_rescindido,
		ie_titulo_perda,
		nr_seq_motivo_cancelamento,
		nr_seq_relatorio,
		qt_dias_inicial,
		qt_dias_final,
		ie_suspender_atend,
		qt_dias_suspensao,
		qt_intervalo_incidencia,
		ie_intervalo_incidencia,
		ie_regulamentacao_plano,
		ie_forma_cobranca,
		ie_tipo_contratacao,
		dt_dia_venc_inicial,
		dt_dia_venc_final,
		ie_preco,
		coalesce(ie_tipo_estipulante, 'A'),
		coalesce(ie_data_base, 'VA'),
		ie_tipo_pagador,
		qt_min_titulo,
		qt_max_titulo,
		coalesce(ie_situacao_benef, 'T'),
		nr_seq_grupo_contrato,
		coalesce(ie_fora_pagador_mes, 'N'),
		qt_dias_rec_notif,
		coalesce(ie_primeira_mensalidade, 'S'),
		ie_origem_titulo,
		coalesce(ie_dias_acumulativos,'N'),
		nr_seq_plano,
		coalesce(ie_notific_pag_contrato, 'N'),
		nr_seq_regra_vinculo,
		coalesce(ie_considera_tit_regra,'S'),
		coalesce(ie_titulo_atrasado,'N'),
		nr_seq_grupo_produto,
		coalesce(ie_titulo_notificacao,'N'),
		dt_contrato_inicial,
		dt_contrato_final,
		ie_processo_judicial,
		qt_intervalo_incidencia_regra,
		coalesce(ie_qtd_tit_competencia, 'N'),
		coalesce(ie_tipo_envio_pagador, 'T')	,
		coalesce(ie_remido,'T'),
		coalesce(ie_considera_titulo_liq_cumul, 'N')
	into STRICT	qt_dias_atraso_w,
		ie_rescindir_contrato_w,
		ie_pagador_ativo_w,
		ie_pagador_rescindido_w,
		ie_titulo_perda_w,
		nr_seq_motivo_cancelamento_w,
		nr_seq_relatorio_w,
		qt_dias_inicial_w,
		qt_dias_final_w,
		ie_suspender_atend_w,
		qt_dias_suspensao_w,
		qt_intervalo_incidencia_w,
		ie_intervalo_incidencia_w,
		ie_regulamentacao_plano_w,
		ie_forma_cobranca_w,
		ie_tipo_contratacao_w,
		dt_dia_venc_inicial_w,
		dt_dia_venc_final_w,
		ie_preco_w,
		ie_tipo_estipulante_w,
		ie_data_base_w,
		ie_tipo_pagador_w,
		qt_min_titulo_w,
		qt_max_titulo_w,
		ie_situacao_benef_w,
		nr_seq_grupo_contrato_w,
		ie_fora_pagador_mes_w,
		qt_dias_rec_notif_w,
		ie_primeira_mensalidade_w,
		ie_origem_titulo_w,
		ie_dias_acumulativos_w,
		nr_seq_plano_w,
		ie_notific_pag_contrato_w,
		nr_seq_regra_vinculo_w,
		ie_considera_tit_regra_w,
		ie_titulo_atrasado_w,
		nr_seq_grupo_produto_w,
		ie_titulo_notificacao_w,
		dt_contrato_inicial_w,
		dt_contrato_final_w,
		ie_processo_judicial_w,
		qt_intervalo_incid_regra_w,
		ie_qtd_tit_competencia_w,
		ie_tipo_envio_pagador_w,
		ie_remido_w,
		ie_considera_tit_liq_cumul_w
	from	pls_notificacao_regra
	where	nr_sequencia	= nr_seq_regra_w
	and	ie_situacao	= 'A';
	
	if (ie_dias_acumulativos_w = 'N') then
		ie_considera_tit_liq_cumul_w := 'N';
	end if;
	
	open c03;
	loop
	fetch c03 into
		ie_tipo_item_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin
		vetor_itens_mens_w[vetor_itens_mens_w.count+1].ie_tipo_item	:= ie_tipo_item_w;
		end;
	end loop;
	close c03;
	
	open c04;
	loop
	fetch c04 into
		ie_tipo_contrato_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		begin
		vetor_itens_intercambio_w[vetor_itens_intercambio_w.count+1].ie_tipo_contrato := ie_tipo_contrato_w;
		end;
	end loop;
	close c04;
	
	open C01;
	loop
	fetch C01 into
		cd_pessoa_fisica_w,
		cd_cgc_w,
		nr_seq_mensalidade_w,
		nr_seq_contrato_w,
		nr_titulo_w,
		nr_seq_pagador_w,
		vl_saldo_titulo_w,
		vl_titulo_w,
		dt_vencimento_w,
		dt_liquidacao_w,
		dt_rescisao_pagador_w,
		ie_notificacao_w,
		dt_suspensao_pagador_w,
		dt_vencimento_original_w,
		nr_seq_lote_w,
		nr_seq_pagador_intercambio_w,
		nr_seq_forma_cobranca_w,
		ie_tipo_pagador_pag_w,
		cd_portador_w,
		cd_tipo_portador_w,
		nr_seq_cotrato_inter_w,
		ie_origem_titulo_excesao_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		ie_incluir_notificacao_w	:= 'S';
		ie_inativo_pag_w		:= 'N';
		ie_impacto_notificacao_w	:= null;
		nr_seq_notific_pagador_w	:= null;
		
		vl_juros_w	:= coalesce(obter_juros_multa_titulo(nr_titulo_w, clock_timestamp(), 'R', 'J'),0);
		vl_multa_w	:= coalesce(obter_juros_multa_titulo(nr_titulo_w, clock_timestamp(), 'R', 'M'),0);
		
		if (ie_notificacao_w = 'N') then
			ie_incluir_notificacao_w	:= 'N';
		end if;
		
		if	((dt_contrato_inicial_w IS NOT NULL AND dt_contrato_inicial_w::text <> '') or (dt_contrato_final_w IS NOT NULL AND dt_contrato_final_w::text <> '')) then
			if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
				select	count(1)
				into STRICT	ie_data_contrato_w
				from	pls_contrato
				where	nr_sequencia = nr_seq_contrato_w
				and	dt_contrato between coalesce(dt_contrato_inicial_w,dt_contrato) and coalesce(dt_contrato_final_w,dt_contrato);
			elsif (nr_seq_cotrato_inter_w IS NOT NULL AND nr_seq_cotrato_inter_w::text <> '') then
				select	count(1)
				into STRICT	ie_data_contrato_w
				from	pls_intercambio
				where	nr_sequencia = nr_seq_cotrato_inter_w
				and	dt_inclusao between coalesce(dt_contrato_inicial_w,dt_inclusao) and coalesce(dt_contrato_final_w,dt_inclusao);
			end if;
			
			if (ie_data_contrato_w = 0) then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;
		
		--  Em alguns casos, o pagador e alterado e notificado antes de gerar uma nova mensalidade,

		--  como as mensalidades antigas estao em nome do pagador antigo, nada era encontrado e gerado notificacao.

		-- Quando nao localizar nada, tem que procurar por um pagador do contrato que nao tenha mensalidade gerada.
		if	((ie_notific_pag_contrato_w = 'S') and
			-- se ja foi rescindido, busca o do contrato
			(dt_rescisao_pagador_w IS NOT NULL AND dt_rescisao_pagador_w::text <> '' AND dt_rescisao_pagador_w < dt_lote_w)) then
			begin
				select	c.cd_pessoa_fisica,
					c.cd_cgc,
					c.nr_seq_contrato,
					c.nr_sequencia,
					c.dt_rescisao,
					c.ie_notificacao,
					c.dt_suspensao,
					c.nr_seq_pagador_intercambio,
					c.nr_sequencia
				into STRICT	cd_pessoa_fisica_w,
					cd_cgc_w,
					nr_seq_contrato_w,
					nr_seq_pagador_w,
					dt_rescisao_pagador_w,
					ie_notificacao_w,
					dt_suspensao_pagador_w,
					nr_seq_pagador_intercambio_w,
					nr_seq_pagador_princ_w
				from	pls_contrato_pagador	c
				where	c.nr_seq_contrato	= nr_seq_contrato_w
				and	c.ie_tipo_pagador	= 'P'
				and	coalesce(c.dt_rescisao::text, '') = ''  LIMIT 1;
			exception
				when no_data_found then null;
			end;
		end if;
		
		-- Verificar se pagador esta inativo
		if	((trunc(coalesce(dt_rescisao_pagador_w,trunc(clock_timestamp() + interval '10 days'))) <= trunc(clock_timestamp())) or (trunc(coalesce(dt_suspensao_pagador_w,trunc(clock_timestamp() + interval '10 days'))) <= trunc(clock_timestamp()))) then
			ie_inativo_pag_w	:= 'S';
		end if;
		
		if (ie_incluir_notificacao_w = 'S') and (ie_pagador_rescindido_w = 'S') and -- Apenas pagadores rescindidos
			(trunc(coalesce(dt_rescisao_pagador_w, trunc(clock_timestamp() + interval '10 days'))) > trunc(clock_timestamp())) then
			ie_incluir_notificacao_w	:= 'N';
		end if;
		
		-- criado tratamento nao gerar pagadores com mes de rescisao no mes do lote
		if (ie_incluir_notificacao_w = 'S') and (ie_fora_pagador_mes_w = 'S') and (dt_rescisao_pagador_w IS NOT NULL AND dt_rescisao_pagador_w::text <> '') and (trunc(dt_rescisao_pagador_w, 'month') = trunc(dt_lote_w, 'month')) then
			ie_incluir_notificacao_w	:= 'N';
		end if;
		
		if (ie_incluir_notificacao_w = 'S') then
			if	((ie_tipo_pagador_w = 'PF') and (coalesce(cd_pessoa_fisica_w::text, '') = '') or (ie_tipo_pagador_w = 'PJ') and (coalesce(cd_cgc_w::text, '') = ''))  then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;
		
		if (ie_incluir_notificacao_w = 'S') and (ie_tipo_estipulante_w <> 'A') then
			select	max(z.cd_pf_estipulante),
				max(z.cd_cgc_estipulante)
			into STRICT	cd_pf_estipulante_w,
				cd_cgc_estipulante_w
			from	pls_contrato		z
			where	z.nr_sequencia		= nr_seq_contrato_w;
			
			if (ie_tipo_estipulante_w = 'PF') and (coalesce(cd_pf_estipulante_w::text, '') = '') then
				ie_incluir_notificacao_w	:= 'N';
			elsif (ie_tipo_estipulante_w = 'PJ') and (coalesce(cd_cgc_estipulante_w::text, '') = '') then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;
		
		if (ie_incluir_notificacao_w = 'S') and (ie_pagador_ativo_w = 'S') and -- Apenas pagadores ativos
			(ie_inativo_pag_w = 'S') then
			if (trunc(coalesce(dt_rescisao_pagador_w, trunc(clock_timestamp() + interval '10 days'))) <= trunc(clock_timestamp())) or (ie_inativo_pag_w = 'S') then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;
		
		if	(((ie_dias_acumulativos_w = 'S') or (ie_dias_acumulativos_w = 'A')) and (ie_incluir_notificacao_w = 'S') and (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') and (qt_dias_atraso_w IS NOT NULL AND qt_dias_atraso_w::text <> '')) then
			
			dt_ano_contr_inicio_w	:= null;
			dt_ano_contr_fim_w	:= null;
			qt_dias_atrasados_w	:= 0;
			
			if (ie_dias_acumulativos_w = 'S') then
				select	dt_contrato
				into STRICT	dt_contrato_w
				from	pls_contrato
				where	nr_sequencia		= nr_seq_contrato_w;
				
				if (to_char(dt_contrato_w,'mm') = '02') then
					ie_erro_data_w	:= false;
					
					begin
					dt_ano_contr_inicio_w	:= to_date(to_char(dt_contrato_w,'dd/mm/') || to_char(dt_lote_w,'yyyy'));
					exception
					when others then
						ie_erro_data_w	:= true;
					end;
					
					if (ie_erro_data_w) then
						dt_ano_contr_inicio_w	:= to_date('28'||to_char(dt_contrato_w,'/mm/') || to_char(dt_lote_w,'yyyy'));
						dt_ano_contr_fim_w	:= add_months(to_date('28'||to_char(dt_contrato_w,'mm/') || to_char(dt_lote_w,'yyyy')),12);
					else
						dt_ano_contr_fim_w	:= add_months(to_date(to_char(dt_contrato_w,'dd/mm/') || to_char(dt_lote_w,'yyyy')),12);
					end if;
				else
					dt_ano_contr_inicio_w	:= to_date(to_char(dt_contrato_w,'dd/mm/') || to_char(dt_lote_w,'yyyy'));
					dt_ano_contr_fim_w	:= add_months(to_date(to_char(dt_contrato_w,'dd/mm/') || to_char(dt_lote_w,'yyyy')),12);
				end if;
			else
				dt_ano_contr_inicio_w	:= add_months(dt_lote_w,-12);
				dt_ano_contr_fim_w	:= dt_lote_w;
			end if;
			
			open c05;
			loop
			fetch c05 into
				dt_vencimento_aux_w,
				dt_liquidacao_aux_w;
			EXIT WHEN NOT FOUND; /* apply on c05 */
				begin
				qt_dias_atrasados_aux_w	:= trunc(dt_liquidacao_aux_w,'dd') - trunc(dt_vencimento_aux_w,'dd');
				
				if (qt_dias_atrasados_aux_w > 0) then
					qt_dias_atrasados_w	:= qt_dias_atrasados_w + qt_dias_atrasados_aux_w;
				end if;
				end;
			end loop;
			close c05;
			
			qt_dias_atrasados_aux_w	:= 0;
			
			if (ie_data_base_w = 'VO') then
				qt_dias_atrasados_aux_w	:= trunc(coalesce(dt_liquidacao_w,dt_lote_w),'dd') - trunc(dt_vencimento_original_w,'dd');
			elsif (ie_data_base_w = 'VA') then
				qt_dias_atrasados_aux_w	:= trunc(coalesce(dt_liquidacao_w,dt_lote_w),'dd') - trunc(dt_vencimento_w,'dd');
			end if;
			
			if (qt_dias_atrasados_aux_w > 0) then
				qt_dias_atrasados_w	:= qt_dias_atrasados_w + qt_dias_atrasados_aux_w;
			end if;
			
			if (qt_dias_atrasados_w < qt_dias_atraso_w) then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;

		if (ie_incluir_notificacao_w = 'S') and (ie_forma_cobranca_w IS NOT NULL AND ie_forma_cobranca_w::text <> '') then
			if (nr_seq_forma_cobranca_w IS NOT NULL AND nr_seq_forma_cobranca_w::text <> '') then
				if (nr_seq_forma_cobranca_w <> ie_forma_cobranca_w) then
					ie_incluir_notificacao_w	:= 'N';
				end if;
			else
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_pagador_fin_w
				from	pls_contrato_pagador_fin	a
				where	a.nr_seq_pagador	= nr_seq_pagador_w
				and	dt_lote_w between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia,dt_lote_w);
				
				if (nr_seq_pagador_fin_w IS NOT NULL AND nr_seq_pagador_fin_w::text <> '') then
					select	max(b.nr_seq_forma_cobranca)
					into STRICT	nr_seq_forma_cobranca_w
					from	pls_contrato_pagador_fin	b
					where	b.nr_sequencia	= nr_seq_pagador_fin_w;
					
					if (nr_seq_forma_cobranca_w <> ie_forma_cobranca_w) then
						ie_incluir_notificacao_w	:= 'N';
					end if;
				end if;
			end if;
		end if;
		
		--  Reincidencia
		if (ie_incluir_notificacao_w = 'S') and (ie_intervalo_incidencia_w IS NOT NULL AND ie_intervalo_incidencia_w::text <> '') then
			if (qt_intervalo_incidencia_w IS NOT NULL AND qt_intervalo_incidencia_w::text <> '') then
				if (ie_intervalo_incidencia_w = 'M') then
					select	count(1)
					into STRICT	qt_registros_w
					from	pls_notificacao_pagador y,
						pls_notificacao_lote	x
					where	x.nr_sequencia		= y.nr_seq_lote
					and	y.nr_seq_pagador	= nr_seq_pagador_w
					and	x.cd_estabelecimento	= cd_estabelecimento_p
					and	x.nr_sequencia <> nr_seq_lote_p
					and	trunc(x.dt_lote, 'month') > add_months(trunc(dt_lote_w, 'month'),qt_intervalo_incidencia_w * -1)  LIMIT 1;
					
					if (qt_registros_w > 0) then
						ie_incluir_notificacao_w	:= 'N';
					end if;
				elsif (ie_intervalo_incidencia_w = 'D') then
					select	count(1)
					into STRICT	qt_registros_w
					from	pls_notificacao_pagador y,
						pls_notificacao_lote	x
					where	x.nr_sequencia		= y.nr_seq_lote
					and	y.nr_seq_pagador	= nr_seq_pagador_w
					and	x.cd_estabelecimento	= cd_estabelecimento_p
					and	x.nr_sequencia <> nr_seq_lote_p
					and	trunc(x.dt_lote, 'dd') > trunc(dt_lote_w, 'dd') - qt_intervalo_incidencia_w  LIMIT 1;
					
					if (qt_registros_w > 0) then
						ie_incluir_notificacao_w	:= 'N';
					end if;
				end if;
			end if;
			
			if (qt_intervalo_incid_regra_w IS NOT NULL AND qt_intervalo_incid_regra_w::text <> '') then
				if (ie_intervalo_incidencia_w = 'M') then
					select	count(1)
					into STRICT	qt_registros_w
					from	pls_notificacao_pagador y,
						pls_notificacao_lote	x
					where	x.nr_sequencia		= y.nr_seq_lote
					and	y.nr_seq_pagador	= nr_seq_pagador_w
					and	x.cd_estabelecimento	= cd_estabelecimento_p
					and	x.nr_seq_regra		= nr_seq_regra_w
					and	x.nr_sequencia <> nr_seq_lote_p
					and	trunc(x.dt_lote, 'month') > add_months(trunc(dt_lote_w, 'month'),qt_intervalo_incid_regra_w * -1)  LIMIT 1;
					
					if (qt_registros_w > 0) then
						ie_incluir_notificacao_w	:= 'N';
					end if;
				elsif (ie_intervalo_incidencia_w = 'D') then
					select	count(1)
					into STRICT	qt_registros_w
					from	pls_notificacao_pagador y,
						pls_notificacao_lote	x
					where	x.nr_sequencia		= y.nr_seq_lote
					and	y.nr_seq_pagador	= nr_seq_pagador_w
					and	x.cd_estabelecimento	= cd_estabelecimento_p
					and	x.nr_seq_regra		= nr_seq_regra_w
					and	x.nr_sequencia <> nr_seq_lote_p
					and	trunc(x.dt_lote, 'dd') > trunc(dt_lote_w, 'dd') - qt_intervalo_incid_regra_w  LIMIT 1;
					
					if (qt_registros_w > 0) then
						ie_incluir_notificacao_w	:= 'N';
					end if;
				end if;
			end if;
		end if;
		
		-- Reincidencia
		if (ie_incluir_notificacao_w = 'S') and (ie_intervalo_incidencia_w IS NOT NULL AND ie_intervalo_incidencia_w::text <> '') then
			open C02;
			loop
			fetch C02 into
				nr_seq_tipo_notificacao_w,
				qt_intervalo_incid_reg_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				if (ie_intervalo_incidencia_w = 'M') then
					select	count(1)
					into STRICT	qt_registros_w
					from	pls_notificacao_pagador y,
						pls_notificacao_lote	x
					where	x.nr_sequencia			= y.nr_seq_lote
					and	y.nr_seq_pagador		= nr_seq_pagador_w
					and	x.cd_estabelecimento		= cd_estabelecimento_p
					and	x.nr_seq_tipo_notificacao	= nr_seq_tipo_notificacao_w
					and	x.nr_sequencia <> nr_seq_lote_p
					and	trunc(x.dt_lote, 'month') > add_months(trunc(dt_lote_w, 'month'),qt_intervalo_incid_reg_w * -1)  LIMIT 1;
					
					if (qt_registros_w > 0) then
						ie_incluir_notificacao_w	:= 'N';
					end if;
				elsif (ie_intervalo_incidencia_w = 'D') then
					select	count(1)
					into STRICT	qt_registros_w
					from	pls_notificacao_pagador y,
						pls_notificacao_lote	x
					where	x.nr_sequencia			= y.nr_seq_lote
					and	y.nr_seq_pagador		= nr_seq_pagador_w
					and	x.cd_estabelecimento		= cd_estabelecimento_p
					and	x.nr_seq_tipo_notificacao	= nr_seq_tipo_notificacao_w
					and	x.nr_sequencia <> nr_seq_lote_p
					and	trunc(x.dt_lote, 'dd') > trunc(dt_lote_w, 'dd') - qt_intervalo_incid_reg_w  LIMIT 1;
					
					if (qt_registros_w > 0) then
						ie_incluir_notificacao_w	:= 'N';
					end if;
				end if;
				end;
			end loop;
			close C02;
		end if;

		if (ie_incluir_notificacao_w = 'S') and (qt_dias_rec_notif_w IS NOT NULL AND qt_dias_rec_notif_w::text <> '') then
			select	count(1)
			into STRICT	qt_registros_w
			from	pls_notificacao_pagador y,
				pls_notificacao_lote	x
			where	x.nr_sequencia		= y.nr_seq_lote
			and	y.nr_seq_pagador	= nr_seq_pagador_w
			and	x.cd_estabelecimento	= cd_estabelecimento_p
			and	x.nr_sequencia <> nr_seq_lote_p
			and	trunc(y.dt_recebimento_notif, 'dd') - qt_dias_rec_notif_w < trunc(dt_lote_w, 'dd')  LIMIT 1;
			
			if (qt_registros_w = 0) then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;

		if (ie_incluir_notificacao_w = 'S') and
			((ie_regulamentacao_plano_w IS NOT NULL AND ie_regulamentacao_plano_w::text <> '') or (nr_seq_plano_w IS NOT NULL AND nr_seq_plano_w::text <> '')) then
			select	count(1)
			into STRICT	qt_registros_w
			from	pls_mensalidade_segurado	c,
				pls_mensalidade			b,
				titulo_receber			a,
				pls_segurado			d,
				pls_plano			e
			where	b.nr_sequencia		= c.nr_seq_mensalidade
			and	b.nr_sequencia		= a.nr_seq_mensalidade
			and	d.nr_sequencia		= c.nr_seq_segurado
			and	e.nr_sequencia		= d.nr_seq_plano
			and	a.nr_titulo		= nr_titulo_w
			and (e.ie_regulamentacao	= ie_regulamentacao_plano_w or coalesce(ie_regulamentacao_plano_w::text, '') = '')
			and (e.nr_sequencia		= nr_seq_plano_w or coalesce(nr_seq_plano_w::text, '') = '')  LIMIT 1;
			
			if (qt_registros_w = 0) then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;
		
		if (ie_incluir_notificacao_w = 'S') and (nr_seq_grupo_produto_w IS NOT NULL AND nr_seq_grupo_produto_w::text <> '') then
			select	count(1)
			into STRICT	qt_registros_w
			from	pls_mensalidade_segurado	c,
				pls_mensalidade			b,
				titulo_receber			a,
				pls_segurado			d
			where	b.nr_sequencia		= c.nr_seq_mensalidade
			and	b.nr_sequencia		= a.nr_seq_mensalidade
			and	d.nr_sequencia		= c.nr_seq_segurado
			and	a.nr_titulo		= nr_titulo_w
			and	exists (	SELECT	1
						from	pls_preco_produto x
						where	x.nr_seq_grupo	= nr_seq_grupo_produto_w
						and	x.nr_seq_plano	= d.nr_seq_plano)  LIMIT 1;
			
			if (qt_registros_w = 0) then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;
		
		if (ie_incluir_notificacao_w = 'S') and (nr_seq_grupo_contrato_w IS NOT NULL AND nr_seq_grupo_contrato_w::text <> '') then
			
			select	count(1)
			into STRICT	qt_grupo_contrato_w
			from	pls_contrato_grupo	b,
				pls_contrato		a
			where	a.nr_sequencia	= nr_seq_contrato_w
			and	a.nr_sequencia	= b.nr_seq_contrato
			and	b.nr_seq_grupo = nr_seq_grupo_contrato_w;
			
			if (qt_grupo_contrato_w = 0) then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;

		if (ie_incluir_notificacao_w = 'S') and (dt_dia_venc_inicial_w IS NOT NULL AND dt_dia_venc_inicial_w::text <> '') and (dt_dia_venc_final_w IS NOT NULL AND dt_dia_venc_final_w::text <> '') then
			dt_dia_vencimento_w	:= pls_obter_dados_pagador_fin(nr_seq_pagador_w, 'D');
			
			select	CASE WHEN count(1)=0 THEN  'N'  ELSE 'S' END
			into STRICT	ie_incluir_notificacao_w
			
			where	dt_dia_vencimento_w between dt_dia_venc_inicial_w and dt_dia_venc_final_w;
		end if;
		
		if (ie_incluir_notificacao_w = 'S') and (nr_seq_lote_w IS NOT NULL AND nr_seq_lote_w::text <> '') and (ie_primeira_mensalidade_w = 'N') then
			select	coalesce(a.ie_primeira_mensalidade, 'N')
			into STRICT	ie_primeira_mensalidade_lote_w
			from	pls_lote_mensalidade	a
			where	a.nr_sequencia	= nr_seq_lote_w;
			
			if (ie_primeira_mensalidade_lote_w <> ie_primeira_mensalidade_w) then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;

		if (ie_incluir_notificacao_w = 'S') and (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') and (ie_situacao_benef_w <> 'T') then
			
			select	count(1)
			into STRICT	qt_registros_w
			from	pls_segurado	x
			where	x.nr_seq_pagador	= nr_seq_pagador_w
			and	pls_obter_dados_segurado(x.nr_sequencia, 'CS') = ie_situacao_benef_w  LIMIT 1;
			
			if (qt_registros_w = 0) then --Buscar pagador complementar
				select	count(1)
				into STRICT	qt_registros_w
				from	pls_segurado	x,
					pls_contrato_pagador y,
					pls_pagador_item_mens z
				where	y.nr_sequencia	= x.nr_seq_pagador
				and	y.nr_sequencia	= z.nr_seq_pagador
				and	z.nr_seq_pagador_item	= nr_seq_pagador_w
				and	pls_obter_dados_segurado(x.nr_sequencia, 'CS') = ie_situacao_benef_w  LIMIT 1;
			end if;			
			
			if (qt_registros_w = 0) then
				ie_incluir_notificacao_w	:= 'N';
			end if;
		end if;
		
		if (ie_incluir_notificacao_w = 'S') and (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
			select	count(1)
			into STRICT	qt_plano_w
			from	pls_contrato_plano	x
			where	x.nr_seq_contrato	= nr_seq_contrato_w;
			
			if (qt_plano_w > 0) then
				select	count(1)
				into STRICT	qt_regra_w
				from	pls_contrato_plano	x,
					pls_contrato		z,
					pls_plano		y
				where	z.nr_sequencia		= x.nr_seq_contrato
				and	y.nr_sequencia		= x.nr_seq_plano
				and	z.nr_sequencia		= nr_seq_contrato_w
				and	((y.ie_tipo_contratacao	= coalesce(ie_tipo_contratacao_w, y.ie_tipo_contratacao)) or (coalesce(y.ie_tipo_contratacao::text, '') = ''))
				and	((y.ie_preco		= coalesce(ie_preco_w, y.ie_preco)) or (coalesce(y.ie_preco::text, '') = ''));
				
				if (qt_regra_w = 0) then
					ie_incluir_notificacao_w	:= 'N';
				end if;
			end if;
		end if;
		
		if (ie_incluir_notificacao_w = 'S') and (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') and (vetor_itens_mens_w.count > 0) then
			
			index_w	:= 0;
			ie_incluir_notificacao_w	:= 'N';
			
			for index_w in 1..vetor_itens_mens_w.count loop
				qt_registros_w	:= 0;
				
				select	count(1)
				into STRICT	qt_registros_w
				from	pls_mensalidade_segurado	b,
					pls_mensalidade_seg_item	a
				where	a.nr_seq_mensalidade_seg	= b.nr_sequencia
				and	b.nr_seq_mensalidade		= nr_seq_mensalidade_w
				and	a.ie_tipo_item			= vetor_itens_mens_w[index_w].ie_tipo_item  LIMIT 1;
				
				if (qt_registros_w > 0) then
					ie_incluir_notificacao_w	:= 'S';
					exit;
				end if;
			end loop;
		end if;

		if (ie_incluir_notificacao_w = 'S') and (vetor_itens_intercambio_w.count > 0) then
			
			index_w	:= 0;
			ie_incluir_notificacao_w	:= 'N';
			
			if (coalesce(nr_seq_pagador_intercambio_w::text, '') = '') then
				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					select	max(nr_seq_pagador_intercambio)
					into STRICT	nr_seq_pagador_intercambio_w
					from	pls_contrato_pagador
					where	cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	(nr_seq_pagador_intercambio IS NOT NULL AND nr_seq_pagador_intercambio::text <> '');
				elsif (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
					select	max(nr_seq_pagador_intercambio)
					into STRICT	nr_seq_pagador_intercambio_w
					from	pls_contrato_pagador
					where	cd_cgc	= cd_cgc_w
					and	(nr_seq_pagador_intercambio IS NOT NULL AND nr_seq_pagador_intercambio::text <> '');
				end if;
			end if;
			
			if (nr_seq_pagador_intercambio_w IS NOT NULL AND nr_seq_pagador_intercambio_w::text <> '') then
				select	max(ie_tipo_contrato)
				into STRICT	ie_tipo_contrato_w
				from	pls_intercambio
				where	nr_sequencia	= nr_seq_pagador_intercambio_w;
				
				for index_w in 1..vetor_itens_intercambio_w.count loop
					if (ie_tipo_contrato_w = vetor_itens_intercambio_w[index_w].ie_tipo_contrato) then
						ie_incluir_notificacao_w	:= 'S';
						exit;
					end if;
				end loop;
			end if;
		end if;
		
		if (ie_incluir_notificacao_w = 'S') then
			open C08;
			loop
			fetch C08 into	
				nr_seq_processo_w;
			EXIT WHEN NOT FOUND; /* apply on C08 */
				begin
				if (nr_seq_processo_w IS NOT NULL AND nr_seq_processo_w::text <> '') and (ie_incluir_notificacao_w = 'S') then
					select	max(ie_impacto_notificacao)
					into STRICT	ie_impacto_notificacao_w
					from	processo_judicial_liminar
					where	nr_sequencia = nr_seq_processo_w;
					
					if (ie_impacto_notificacao_w = 'N') and (ie_processo_judicial_w <> 'S') then
						ie_incluir_notificacao_w := 'N';
					elsif (ie_impacto_notificacao_w = 'S') and (ie_processo_judicial_w <> 'S') then
						if (ie_processo_judicial_w = 'N') then
							ie_incluir_notificacao_w := 'N';
						elsif (ie_processo_judicial_w = 'P') then	-- Se a regra Incluir pagador/beneficiarios com processo judicial estiver marcada como Incluir todos com processo judicial que permita a notificacao e 
												--se o atributo processo_judicial_liminar.ie_impacto_notificacao estiver desmarcado nao deve gerar notificacao, se o atributo  processo_judicial_liminar.ie_impacto_notificacao estiver marcado

												--gera notificacao, mas se este processo tiver uma regra cadastrada na pasta processos/regras/notificacao de atraso que esteja com o campo permite gerar notificacao de atraso desmarcado nao deve gerar 

												--a notificacao e se o campo permite gerar notificacao estiver marcado devera gerar a notificacao de atraso.
							select	count(1)
							into STRICT	qt_regra_processo_susp_w
							from	pls_processo_jud_notif
							where	nr_seq_processo = nr_seq_processo_w
							and	((coalesce(nr_seq_regra_notif::text, '') = '') or (nr_seq_regra_notif = nr_seq_regra_w))
							and	ie_permite_notificacao = 'N';
							
							if (qt_regra_processo_susp_w > 0) then
								ie_incluir_notificacao_w := 'N';
							else
								ie_incluir_notificacao_w := 'S';
							end if;
						end if;
					end if;
				end if;
				end;
			end loop;
			close C08;
		end if;
		
		ie_incluir_notif_tit_w	:= pls_obter_se_notifica_titulo(nr_titulo_w);
		
		if (obter_regra_excecao_etapa_cobr(nr_seq_regra_w, nr_titulo_w) > 0) then
			ie_incluir_notif_tit_w := 'N';
		end if;
		
		-- Se o pagador e secundario e esta com data de rescisao igual ou menor que a data de geracao

		--  tem que verificar se tem um pagador principal sem data de rescicao, neste caso e utilizado

		--  o pagador principal. Senao mantem o pagador secundario
		if (ie_incluir_notif_tit_w = 'S') and (ie_tipo_pagador_pag_w = 'S') and (trunc(dt_rescisao_pagador_w) <= trunc(clock_timestamp())) and (ie_notific_pag_contrato_w = 'S') then
			
			nr_seq_pagador_princ_w := null;
			
			-- procura se tem pagador principal para utilizar,

			--  se nao tiver nao altera os dados
			begin
				select	c.cd_pessoa_fisica,
					c.cd_cgc,
					c.nr_seq_contrato,
					c.nr_sequencia,
					c.dt_rescisao,
					c.ie_notificacao,
					c.dt_suspensao,
					c.nr_seq_pagador_intercambio,
					c.nr_sequencia
				into STRICT	cd_pessoa_fisica_w,
					cd_cgc_w,
					nr_seq_contrato_w,
					nr_seq_pagador_w,
					dt_rescisao_pagador_w,
					ie_notificacao_w,
					dt_suspensao_pagador_w,
					nr_seq_pagador_intercambio_w,
					nr_seq_pagador_princ_w
				from	pls_contrato_pagador	c,
					titulo_receber		b
				where	c.nr_sequencia		= b.nr_seq_pagador
				and	c.nr_seq_contrato	= nr_seq_contrato_w
				and	c.ie_tipo_pagador	= 'P'
				and	coalesce(c.dt_rescisao::text, '') = ''  LIMIT 1;
			exception
				when no_data_found then null;
			end;
			
			-- Em alguns casos, o pagador e alterado e notificado antes de gerar uma nova mensalidade,

			--  como as mensalidades antigas estao em nome do pagador antigo, nada era encontrado e gerado notificacao.

			-- Quando nao localizar nada, tem que procurar por um pagador do contrato que nao tenha mensalidade gerada.
			if (coalesce(nr_seq_pagador_princ_w::text, '') = '') then
				begin
					select	c.cd_pessoa_fisica,
						c.cd_cgc,
						c.nr_seq_contrato,
						c.nr_sequencia,
						c.dt_rescisao,
						c.ie_notificacao,
						c.dt_suspensao,
						c.nr_seq_pagador_intercambio,
						c.nr_sequencia
					into STRICT	cd_pessoa_fisica_w,
						cd_cgc_w,
						nr_seq_contrato_w,
						nr_seq_pagador_w,
						dt_rescisao_pagador_w,
						ie_notificacao_w,
						dt_suspensao_pagador_w,
						nr_seq_pagador_intercambio_w,
						nr_seq_pagador_princ_w
					from	pls_contrato_pagador	c
					where	c.nr_seq_contrato	= nr_seq_contrato_w
					and	c.ie_tipo_pagador	= 'P'
					and	coalesce(c.dt_rescisao::text, '') = ''  LIMIT 1;
				exception
					when no_data_found then null;
				end;
			end if;
			
			if (coalesce(nr_seq_pagador_princ_w::text, '') = '') then
				select	max(nr_contrato_principal)
				into STRICT	nr_seq_contrato_princ_w
				from	pls_contrato
				where	nr_sequencia = nr_seq_contrato_w;
				
				begin
					select	c.cd_pessoa_fisica,
						c.cd_cgc,
						c.nr_seq_contrato,
						c.nr_sequencia,
						c.dt_rescisao,
						c.ie_notificacao,
						c.dt_suspensao,
						c.nr_seq_pagador_intercambio
					into STRICT	cd_pessoa_fisica_w,
						cd_cgc_w,
						nr_seq_contrato_w,
						nr_seq_pagador_w,
						dt_rescisao_pagador_w,
						ie_notificacao_w,
						dt_suspensao_pagador_w,
						nr_seq_pagador_intercambio_w
					from	pls_contrato_pagador	c,
						titulo_receber		b
					where	c.nr_sequencia		= b.nr_seq_pagador
					and	c.nr_seq_contrato	= nr_seq_contrato_princ_w
					and	c.ie_tipo_pagador	= 'P'
					and	coalesce(c.dt_rescisao::text, '') = ''  LIMIT 1;
				exception
					when no_data_found then null;
				end;
				
				-- Em alguns casos, o pagador e alterado e notificado antes de gerar uma nova mensalidade,

				--  como as mensalidades antigas estao em nome do pagador antigo, nada era encontrado e gerado notificacao.

				-- Quando nao localizar nada, tem que procurar por um pagador do contrato que nao tenha mensalidade gerada.
				if (coalesce(nr_seq_pagador_w::text, '') = '') then
					begin
						select	c.cd_pessoa_fisica,
							c.cd_cgc,
							c.nr_seq_contrato,
							c.nr_sequencia,
							c.dt_rescisao,
							c.ie_notificacao,
							c.dt_suspensao,
							c.nr_seq_pagador_intercambio
						into STRICT	cd_pessoa_fisica_w,
							cd_cgc_w,
							nr_seq_contrato_w,
							nr_seq_pagador_w,
							dt_rescisao_pagador_w,
							ie_notificacao_w,
							dt_suspensao_pagador_w,
							nr_seq_pagador_intercambio_w
						from	pls_contrato_pagador	c
						where	c.nr_seq_contrato	= nr_seq_contrato_princ_w
						and	c.ie_tipo_pagador	= 'P'
						and	coalesce(c.dt_rescisao::text, '') = ''  LIMIT 1;
					exception
						when no_data_found then null;
					end;
				end if;
			end if;
		end if;
		
		if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
			if (obter_regra_notific_excecao(	nr_seq_regra_w, nr_seq_contrato_w, cd_portador_w,
								cd_tipo_portador_w, ie_origem_titulo_excesao_w, nr_seq_pagador_w) > 0) then
				ie_incluir_notif_tit_w := 'N';
			end if;
		end if;
		
		if (ie_incluir_notificacao_w = 'S') and (ie_remido_w <> 'T') then
			select	count(1)
			into STRICT	qt_benef_remido_w
			from	pls_segurado
			where	nr_seq_pagador = nr_seq_pagador_w
			and 	coalesce(dt_cancelamento::text, '') = ''
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and 	pls_obter_se_benef_remido(nr_sequencia,clock_timestamp()) = 'S';

			if	(ie_remido_w = 'S' AND qt_benef_remido_w = 0)  then
				ie_incluir_notificacao_w := 'N';
			elsif	(ie_remido_w = 'N' AND qt_benef_remido_w > 0) then
				ie_incluir_notificacao_w := 'N';
				null;
			end if;
		end if;

		if (ie_incluir_notif_tit_w = 'S') then
			if (ie_incluir_notificacao_w = 'S') then
				select	count(1)
				into STRICT	qt_registros_w
				from	pls_notificacao_pagador
				where	nr_seq_lote	= nr_seq_lote_p
				and	nr_seq_pagador	= nr_seq_pagador_w  LIMIT 1;
				
				if (qt_registros_w = 0) then
					insert into pls_notificacao_pagador(nr_sequencia,
						nr_seq_lote,
						cd_pessoa_fisica,
						cd_cgc,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_regra,
						nr_seq_pagador,
						ie_rescisao,
						ie_suspensao)
					values (nextval('pls_notificacao_pagador_seq'),
						nr_seq_lote_p,
						cd_pessoa_fisica_w,
						cd_cgc_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_regra_w,
						nr_seq_pagador_w,
						CASE WHEN ie_notificacao_w='R' THEN  'N'  ELSE coalesce(ie_rescindir_contrato_w, 'S') END ,
						CASE WHEN ie_notificacao_w='R' THEN  'N'  ELSE coalesce(ie_suspender_atend_w, 'S') END );
				end if;
				
				begin
				select	nr_sequencia
				into STRICT	nr_seq_notific_pagador_w
				from	pls_notificacao_pagador
				where	nr_seq_lote	= nr_seq_lote_p
				and	nr_seq_pagador	= nr_seq_pagador_w;
				exception
				when others then
					nr_seq_notific_pagador_w	:= null;
				end;
			end if;
			
			if (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') then
				select	count(1)
				into STRICT	qt_mensalidades_w
				from	pls_notificacao_item
				where	nr_seq_mensalidade	= nr_seq_mensalidade_w  LIMIT 1;
				
				if	((qt_mensalidades_w = 0 AND ie_incluir_notific_p = 'N') or (ie_incluir_notific_p	= 'S')) and (nr_seq_notific_pagador_w IS NOT NULL AND nr_seq_notific_pagador_w::text <> '') then
					
					if (ie_considera_tit_regra_w = 'N') then
						select	count(1)
						into STRICT	qt_titulo_w
						from	pls_notificacao_item
						where	nr_seq_notific_pagador	= nr_seq_notific_pagador_w
						and	nr_seq_mensalidade	= nr_seq_mensalidade_w;
					elsif (ie_considera_tit_regra_w = 'S') then
						select	count(1)
						into STRICT	qt_titulo_w
						from	pls_notificacao_item a,
							pls_notificacao_pagador b,
							pls_notificacao_lote c
						where	c.nr_sequencia			= b.nr_seq_lote
						and	b.nr_sequencia			= a.nr_seq_notific_pagador
						and	a.nr_seq_notific_pagador	= nr_seq_notific_pagador_w
						and	a.nr_seq_mensalidade		= nr_seq_mensalidade_w
						and	c.nr_seq_regra			= nr_seq_regra_w
						and	coalesce(a.ie_titulo_adicional,'N')  = 'N';
					end if;

					if (qt_titulo_w = 0) then
						insert into pls_notificacao_item(nr_sequencia,
							nr_seq_notific_pagador,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_regra,
							nr_seq_mensalidade,
							nr_seq_contrato,
							ie_rescindir_contrato,
							nr_titulo,
							vl_saldo_titulo,
							vl_juros,
							vl_multa,
							vl_titulo,
							dt_vencimento_titulo,
							dt_liquidacao,
							vl_pagar,
							ie_suspender_contrato,
							dt_vencimento_original,
							ie_tipo_vinculacao,
							ie_titulo_adicional)
						values (nextval('pls_notificacao_item_seq'),
							nr_seq_notific_pagador_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							null,
							nr_seq_mensalidade_w,
							nr_seq_contrato_w,
							ie_rescindir_contrato_w,
							nr_titulo_w,
							vl_saldo_titulo_w,
							vl_juros_w,
							vl_multa_w,
							vl_titulo_w,
							dt_vencimento_w,
							dt_liquidacao_w,
							(CASE WHEN ie_titulo_perda_w='S' THEN  vl_titulo_w  ELSE vl_saldo_titulo_w END  + vl_juros_w + vl_multa_w),
							ie_suspender_atend_w,
							dt_vencimento_original_w,
							'A',
							'N');
						
						if (ie_titulo_atrasado_w = 'S') then
							open c07;
							loop
							fetch c07 into
								nr_titulo_w,
								nr_seq_mensalidade_w,
								vl_saldo_titulo_w,
								vl_titulo_w,
								dt_vencimento_w,
								dt_liquidacao_w,
								vl_juros_w,
								vl_multa_w,
								dt_vencimento_original_w,
								cd_portador_tit_atrasado_w,
								cd_tipo_portador_tit_atrasad_w,
								ie_origem_tit_atrasado_w;
							EXIT WHEN NOT FOUND; /* apply on c07 */
								begin
								if	((obter_regra_notific_excecao(	nr_seq_regra_w, nr_seq_contrato_w, cd_portador_tit_atrasado_w,
													cd_tipo_portador_tit_atrasad_w, ie_origem_tit_atrasado_w, nr_seq_pagador_w) = 0) and (obter_regra_excecao_etapa_cobr(nr_seq_regra_w, nr_titulo_w) = 0)) then
									insert into pls_notificacao_item(nr_sequencia,
										nr_seq_notific_pagador,
										dt_atualizacao,
										nm_usuario,
										dt_atualizacao_nrec,
										nm_usuario_nrec,
										nr_seq_regra,
										nr_seq_mensalidade,
										nr_seq_contrato,
										ie_rescindir_contrato,
										nr_titulo,
										vl_saldo_titulo,
										vl_juros,
										vl_multa,
										vl_titulo,
										dt_vencimento_titulo,
										dt_liquidacao,
										vl_pagar,
										ie_suspender_contrato,
										dt_vencimento_original,
										ie_tipo_vinculacao,
										ie_titulo_adicional)
									values (nextval('pls_notificacao_item_seq'),
										nr_seq_notific_pagador_w,
										clock_timestamp(),
										nm_usuario_p,
										clock_timestamp(),
										nm_usuario_p,
										null,
										nr_seq_mensalidade_w,
										nr_seq_contrato_w,
										ie_rescindir_contrato_w,
										nr_titulo_w,
										vl_saldo_titulo_w,
										vl_juros_w,
										vl_multa_w,
										vl_titulo_w,
										dt_vencimento_w,
										dt_liquidacao_w,
										(CASE WHEN ie_titulo_perda_w='S' THEN  vl_titulo_w  ELSE vl_saldo_titulo_w END  + vl_juros_w + vl_multa_w),
										ie_suspender_atend_w,
										dt_vencimento_original_w,
										'A',
										'S');
								end if;
								end;
							end loop;
							close c07;
						end if;
					end if;
				end if;
			else
				select	count(1)
				into STRICT	qt_mensalidades_w
				from	pls_notificacao_item
				where	nr_titulo	= nr_titulo_w  LIMIT 1;
				
				if	((qt_mensalidades_w = 0 AND ie_incluir_notific_p = 'N') or (ie_incluir_notific_p	= 'S')) and (nr_seq_notific_pagador_w IS NOT NULL AND nr_seq_notific_pagador_w::text <> '') then
					
					if (ie_considera_tit_regra_w = 'N') then	
						select	count(1)
						into STRICT	qt_titulo_w
						from	pls_notificacao_item
						where	nr_seq_notific_pagador	= nr_seq_notific_pagador_w
						and	nr_titulo		= nr_titulo_w;
					elsif (ie_considera_tit_regra_w = 'S') then
						select	count(1)
						into STRICT	qt_titulo_w
						from	pls_notificacao_item a,
							pls_notificacao_pagador b,
							pls_notificacao_lote c
						where	c.nr_sequencia			= b.nr_seq_lote
						and	b.nr_sequencia			= a.nr_seq_notific_pagador
						and	a.nr_seq_notific_pagador	= nr_seq_notific_pagador_w
						and	a.nr_titulo			= nr_titulo_w
						and	c.nr_seq_regra			= nr_seq_regra_w
						and	coalesce(a.ie_titulo_adicional,'N')  = 'N';
					end if;
					
					if (qt_titulo_w = 0) then
						insert into pls_notificacao_item(nr_sequencia,
							nr_seq_notific_pagador,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_regra,
							nr_seq_mensalidade,
							nr_seq_contrato,
							ie_rescindir_contrato,
							nr_titulo,
							vl_saldo_titulo,
							vl_juros,
							vl_multa,
							vl_titulo,
							dt_vencimento_titulo,
							dt_liquidacao,
							vl_pagar,
							ie_suspender_contrato,
							dt_vencimento_original,
							ie_tipo_vinculacao,
							ie_titulo_adicional)
						values (nextval('pls_notificacao_item_seq'),
							nr_seq_notific_pagador_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							null,
							null,
							nr_seq_contrato_w,
							ie_rescindir_contrato_w,
							nr_titulo_w,
							vl_saldo_titulo_w,
							vl_juros_w,
							vl_multa_w,
							vl_titulo_w,
							dt_vencimento_w,
							dt_liquidacao_w,
							(CASE WHEN ie_titulo_perda_w='S' THEN vl_titulo_w  ELSE vl_saldo_titulo_w END  + vl_juros_w + vl_multa_w),
							ie_suspender_atend_w,
							dt_vencimento_original_w,
							'A',
							'N');
						
						if (ie_titulo_atrasado_w = 'S') then
							open c07;
							loop
							fetch c07 into
								nr_titulo_w,
								nr_seq_mensalidade_w,
								vl_saldo_titulo_w,
								vl_titulo_w,
								dt_vencimento_w,
								dt_liquidacao_w,
								vl_juros_w,
								vl_multa_w,
								dt_vencimento_original_w,
								cd_portador_tit_atrasado_w,
								cd_tipo_portador_tit_atrasad_w,
								ie_origem_tit_atrasado_w;
							EXIT WHEN NOT FOUND; /* apply on c07 */
								begin
								if	((obter_regra_notific_excecao(	nr_seq_regra_w, nr_seq_contrato_w, cd_portador_tit_atrasado_w,
													cd_tipo_portador_tit_atrasad_w, ie_origem_tit_atrasado_w, nr_seq_pagador_w) = 0) and (obter_regra_excecao_etapa_cobr(nr_seq_regra_w, nr_titulo_w) = 0)) then
									insert into pls_notificacao_item(nr_sequencia,
										nr_seq_notific_pagador,
										dt_atualizacao,
										nm_usuario,
										dt_atualizacao_nrec,
										nm_usuario_nrec,
										nr_seq_regra,
										nr_seq_mensalidade,
										nr_seq_contrato,
										ie_rescindir_contrato,
										nr_titulo,
										vl_saldo_titulo,
										vl_juros,
										vl_multa,
										vl_titulo,
										dt_vencimento_titulo,
										dt_liquidacao,
										vl_pagar,
										ie_suspender_contrato,
										dt_vencimento_original,
										ie_tipo_vinculacao,
										ie_titulo_adicional)
									values (nextval('pls_notificacao_item_seq'),
										nr_seq_notific_pagador_w,
										clock_timestamp(),
										nm_usuario_p,
										clock_timestamp(),
										nm_usuario_p,
										null,
										nr_seq_mensalidade_w,
										nr_seq_contrato_w,
										ie_rescindir_contrato_w,
										nr_titulo_w,
										vl_saldo_titulo_w,
										vl_juros_w,
										vl_multa_w,
										vl_titulo_w,
										dt_vencimento_w,
										dt_liquidacao_w,
										(CASE WHEN ie_titulo_perda_w='S' THEN  vl_titulo_w  ELSE vl_saldo_titulo_w END  + vl_juros_w + vl_multa_w),
										ie_suspender_atend_w,
										dt_vencimento_original_w,
										'A',
										'S');
								end if;
								end;
							end loop;
							close c07;
						end if;
					end if;
				end if;
			end if;
		end if;
		end;
	end loop;
	close C01;

	for r_c09_w in c09 loop
		begin
		delete	from	pls_notificacao_item
		where	nr_sequencia = r_c09_w.nr_seq_item_notificacao;
		end;
	end loop;
	
	if (qt_min_titulo_w IS NOT NULL AND qt_min_titulo_w::text <> '') or (qt_max_titulo_w IS NOT NULL AND qt_max_titulo_w::text <> '') then
		CALL pls_ajustar_min_max_tit_notif(nr_seq_lote_p, coalesce(qt_min_titulo_w, 0), coalesce(qt_max_titulo_w, 999999999999), ie_qtd_tit_competencia_w);
	end if;
	
	CALL pls_atualizar_valor_notific(nr_seq_lote_p);
	
	update	pls_notificacao_lote
	set	dt_geracao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_lote_p;
	
	if (vetor_itens_mens_w.count > 0) then
		vetor_itens_mens_w.delete;
	end if;
	
	if (vetor_itens_intercambio_w.count > 0) then
		vetor_itens_intercambio_w.delete;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_notificacao ( nr_seq_lote_p bigint, ie_incluir_notific_p text, nm_usuario_p text, cd_estabelecimento_p bigint) is  cd_cgc_w varchar(14) FROM PUBLIC;

