-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function define_preco_mat_atualizacao as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE PROCEDURE define_preco_mat_atualizacao ( cd_material_p bigint, dt_vigencia_p timestamp, cd_tab_preco_mat_p bigint, cd_tab_mat_atualizacao_p bigint, nr_seq_matpaci_p bigint, nm_usuario_p text, cd_convenio_p bigint, vl_material_p INOUT bigint, ie_status_p INOUT text) AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

BEGIN
	v_query := 'SELECT * FROM define_preco_mat_atualizacao_atx ( ' || quote_nullable(cd_material_p) || ',' || quote_nullable(dt_vigencia_p) || ',' || quote_nullable(cd_tab_preco_mat_p) || ',' || quote_nullable(cd_tab_mat_atualizacao_p) || ',' || quote_nullable(nr_seq_matpaci_p) || ',' || quote_nullable(nm_usuario_p) || ',' || quote_nullable(cd_convenio_p) || ',' || quote_nullable(vl_material_p) || ',' || quote_nullable(ie_status_p) || ' )';
	SELECT * FROM dblink(v_conn_str, v_query) AS p (v_ret0 bigint, v_ret1 text) INTO vl_material_p, ie_status_p;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE PROCEDURE define_preco_mat_atualizacao_atx ( cd_material_p bigint, dt_vigencia_p timestamp, cd_tab_preco_mat_p bigint, cd_tab_mat_atualizacao_p bigint, nr_seq_matpaci_p bigint, nm_usuario_p text, cd_convenio_p bigint, vl_material_p INOUT bigint, ie_status_p INOUT text) AS $body$
DECLARE


vl_preco_tab_atual_w	double precision; 		-- preço da tabela de atualização
vl_preco_praticado_w	double precision; 		-- preço da tabela oficial do convênio
vl_material_w		double precision := 0; 	-- preço retorno
ie_existe_mat_tab_w	varchar(1);
cd_estabelecimento_w	bigint;
pr_valor_w		double precision;
pr_variacao_w		double precision;
dt_inicio_vigencia_w	timestamp;
ds_erro_w		varchar(1000);
ie_status_w		varchar(3);

c01 CURSOR FOR
	SELECT	a.vl_preco_venda,
		a.dt_inicio_vigencia,
		a.cd_estabelecimento
	from	preco_material a
	where	a.cd_tab_preco_mat		= cd_tab_mat_atualizacao_p
	and	a.cd_material        		= cd_material_p
	and	a.dt_inicio_vigencia		<= dt_vigencia_p
	and	coalesce(a.ie_situacao,'A')		= 'A'
	and	coalesce(a.ie_preco_venda, 'S') 	= 'S'
	order by 	a.dt_inicio_vigencia,
			a.vl_preco_venda;

C02 CURSOR FOR
	SELECT	a.vl_preco_venda,
		obter_status_item_tab_preco(a.cd_material,a.cd_tab_preco_mat,a.cd_estabelecimento,a.dt_inicio_vigencia)
	from	preco_material a
	where	a.cd_tab_preco_mat		= cd_tab_preco_mat_p
	and	a.cd_material        		= cd_material_p
	and	a.dt_inicio_vigencia		<= dt_vigencia_p
	and	coalesce(a.ie_situacao,'A')		= 'A'
	and	coalesce(a.ie_preco_venda, 'S') 	= 'S'
	order by	obter_status_item_tab_preco(a.cd_material,a.cd_tab_preco_mat, a.cd_estabelecimento,a.dt_inicio_vigencia) desc,
			a.dt_inicio_vigencia,
			a.vl_preco_venda;
BEGIN
--Atualizacao de preço
if (nr_seq_matpaci_p > 0) then

	open C01;
	loop
	fetch C01 into
		vl_preco_tab_atual_w,
		dt_inicio_vigencia_w,
		cd_estabelecimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		vl_preco_tab_atual_w := vl_preco_tab_atual_w;
		dt_inicio_vigencia_w := dt_inicio_vigencia_w;
		cd_estabelecimento_w := cd_estabelecimento_w;
		end;
	end loop;
	close C01;

	if (vl_preco_tab_atual_w IS NOT NULL AND vl_preco_tab_atual_w::text <> '') and (dt_inicio_vigencia_w IS NOT NULL AND dt_inicio_vigencia_w::text <> '') and (cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '') then

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_existe_mat_tab_w
		from	preco_material
		where	cd_material 		= cd_material_p
		and	dt_inicio_vigencia	= dt_inicio_vigencia_w
		and	cd_tab_preco_mat	= cd_tab_preco_mat_p
		and	cd_estabelecimento	= cd_estabelecimento_w;

		if (ie_existe_mat_tab_w = 'N') then
			-- gravar na tabela dos preços praticados com o status "Aguardando envio"
			insert	into preco_material(cd_estabelecimento,
						    cd_tab_preco_mat,
						    cd_material,
						    dt_inicio_vigencia,
						    vl_preco_venda,
						    cd_moeda,
						    ie_brasindice,
						    dt_atualizacao,
						    nm_usuario,
						    cd_unidade_medida,
						    ie_situacao,
						    nr_sequencia_nf,
						    nr_item_nf,
						    cd_cgc_fornecedor,
						    qt_conversao,
						    dt_atualizacao_nrec,
						    nm_usuario_nrec,
						    ie_preco_venda)
				SELECT	cd_estabelecimento_w,
					cd_tab_preco_mat_p,
					cd_material,
					dt_inicio_vigencia,
					vl_preco_venda,
					cd_moeda,
					ie_brasindice,
					clock_timestamp(),
					nm_usuario_p,
					cd_unidade_medida,
					ie_situacao,
					nr_sequencia_nf,
					nr_item_nf,
					cd_cgc_fornecedor,
					qt_conversao,
					clock_timestamp(),
					nm_usuario_p,
					ie_preco_venda
				from	preco_material
				where	cd_material 		= cd_material_p
				and	dt_inicio_vigencia	= dt_inicio_vigencia_w
				and	cd_tab_preco_mat	= cd_tab_mat_atualizacao_p
				and	cd_estabelecimento	= cd_estabelecimento_w;

				CALL alterar_status_item_tab_preco(	'4',
								cd_material_p,
								cd_tab_preco_mat_p,
								cd_estabelecimento_w,
								dt_inicio_vigencia_w,
								nm_usuario_p,
								vl_preco_tab_atual_w);

		else
			open C02;
			loop
			fetch C02 into
				vl_preco_praticado_w,
				ie_status_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				vl_preco_praticado_w := vl_preco_praticado_w;
				ie_status_w	     := ie_status_w;
				end;
			end loop;
			close C02;

			select	coalesce(max(pr_valor),1)
			into STRICT	pr_valor_w
			from	conv_regra_perc_vigente
			where	cd_convenio = cd_convenio_p
			and	dt_vigencia <= dt_vigencia_p;

			pr_variacao_w := ((vl_preco_tab_atual_w * 100 / vl_preco_praticado_w) - 100);

			if (pr_variacao_w > pr_valor_w) then
				--gravar o item na tabela de preços praticados com o status "Atualização de preço" e o  valor será 100,00
				begin
				insert	into preco_material(	cd_estabelecimento,
								cd_tab_preco_mat,
								cd_material,
								dt_inicio_vigencia,
								vl_preco_venda,
								cd_moeda,
								ie_brasindice,
								dt_atualizacao,
								nm_usuario,
								cd_unidade_medida,
								ie_situacao,
								nr_sequencia_nf,
								nr_item_nf,
								cd_cgc_fornecedor,
								qt_conversao,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								ie_preco_venda)
				SELECT	cd_estabelecimento,
					cd_tab_preco_mat_p,
					cd_material,
					dt_inicio_vigencia_w,
					100.00,
					cd_moeda,
					ie_brasindice,
					dt_atualizacao,
					nm_usuario,
					cd_unidade_medida,
					ie_situacao,
					nr_sequencia_nf,
					nr_item_nf,
					cd_cgc_fornecedor,
					qt_conversao,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ie_preco_venda
				from	preco_material
				where	cd_material 		= cd_material_p
				and	dt_inicio_vigencia	= dt_inicio_vigencia_w
				and	cd_tab_preco_mat	= cd_tab_mat_atualizacao_p
				and	cd_estabelecimento	= cd_estabelecimento_w;

				CALL alterar_status_item_tab_preco(	'5',
								cd_material_p,
								cd_tab_preco_mat_p,
								cd_estabelecimento_w,
								dt_inicio_vigencia_w,
								nm_usuario_p,
								100.00);
				exception
				when others then
					ds_erro_w := wheb_mensagem_pck.get_Texto(310606); /*'Erro na atualização: o material já existe na tabela (mesma vigência e estabelecimento)';*/
				end;
			end if;
		end if;
	end if;
end if;

vl_material_p:= coalesce(vl_material_p,0);

--Busca do Preço
open C02;
loop
fetch C02 into
	vl_material_w,
	ie_status_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	vl_material_p 	:= coalesce(vl_material_w,0);
	ie_status_p	:= ie_status_w;
	end;
end loop;
close C02;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE define_preco_mat_atualizacao ( cd_material_p bigint, dt_vigencia_p timestamp, cd_tab_preco_mat_p bigint, cd_tab_mat_atualizacao_p bigint, nr_seq_matpaci_p bigint, nm_usuario_p text, cd_convenio_p bigint, vl_material_p INOUT bigint, ie_status_p INOUT text) FROM PUBLIC; -- REVOKE ALL ON PROCEDURE define_preco_mat_atualizacao_atx ( cd_material_p bigint, dt_vigencia_p timestamp, cd_tab_preco_mat_p bigint, cd_tab_mat_atualizacao_p bigint, nr_seq_matpaci_p bigint, nm_usuario_p text, cd_convenio_p bigint, vl_material_p INOUT bigint, ie_status_p INOUT text) FROM PUBLIC;

