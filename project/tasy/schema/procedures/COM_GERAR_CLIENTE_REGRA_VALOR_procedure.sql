-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE com_gerar_cliente_regra_valor ( nr_sequencia_p com_solic_contr_proc.nr_seq_solic_contr%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

			 
cd_condicao_pagamento_w 	com_solic_contr_proc.cd_condicao_pagamento%type;
cd_procedimento_w		com_solic_contr_proc.cd_procedimento%type;
ie_origem_proced_w		com_solic_contr_proc.ie_origem_proced%type;
vl_distribuidor_w		com_solic_contrato.vl_distribuidor%type;
dt_aprov_reprov_w		com_solic_contrato.dt_aprov_reprov%type;
qt_licenca_w			com_solic_contrato.qt_licenca%type;
vl_total_w			com_solic_contrato.vl_total%type;
vl_manut_mensal_w		com_solic_contrato.vl_manut_mensal%type;
nr_seq_canal_w			com_solic_contrato.nr_seq_canal%type;
cd_centro_custo_w		com_cli_regra_valor_item.cd_centro_custo%type;
cd_conta_contabil_w		com_cli_regra_valor_item.cd_conta_contabil%type;
ds_compl_nf_w			com_cli_regra_valor_item.ds_compl_nf%type;
vl_cobrar_w			com_cli_regra_valor_item.vl_cobrar%type;
cd_natureza_operacao_w		com_cliente_regra_valor.cd_natureza_operacao%type;
nr_sequencia_regra_valor_w	com_cliente_regra_valor.nr_sequencia%type;
nr_seq_regra_valor_item_w com_cli_regra_valor_item.nr_sequencia%type;
nr_seq_cliente_w		com_cliente.nr_sequencia%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
ie_tipo_financ_proced_w		com_tipo_procedimento.ie_tipo_financ_proced%type;
nm_guerra_w			com_canal.nm_guerra%type;
cd_cnpj_w			com_canal.cd_cnpj%type;
ie_param_cargo_w		funcao_param_usuario.vl_parametro%type;
ds_comunicado_w			comunic_interna.ds_comunicado%type;
ie_gerar_comunic_w		boolean := false;
qt_controle_w			bigint;
qt_pos_separador_w		bigint;
ds_cargo_ci_w			varchar(2000);

C01 CURSOR FOR 
	SELECT 	a.cd_condicao_pagamento, 
		a.cd_procedimento, 
		a.ie_origem_proced, 
		b.dt_aprov_reprov, 
		(SELECT max(coalesce(x.nr_sequencia,0)) 
		  from com_cliente x 
		 where x.cd_cnpj = b.cd_cnpj 
		  and x.ie_situacao = 'A' 
		  and	x.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento) nr_seq_cliente, 
		CASE WHEN obter_dados_pf_pj('', b.cd_cnpj,'UF')='SC' THEN 5949  ELSE 6949 END  cd_natureza_operacao, 
		b.qt_licenca, 
		b.vl_total, 
		b.vl_manut_mensal, 
		b.vl_distribuidor, 
		b.nr_seq_canal 
	from	com_solic_contr_proc a, 
		com_solic_contrato b 
	where	a.nr_seq_solic_contr = b.nr_sequencia 
	and	a.nr_seq_solic_contr = nr_sequencia_p;


BEGIN 
 
cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
 
open C01;
loop 
fetch C01 into	 
	cd_condicao_pagamento_w, 
	cd_procedimento_w, 
	ie_origem_proced_w, 
	dt_aprov_reprov_w, 
	nr_seq_cliente_w, 
	cd_natureza_operacao_w, 
	qt_licenca_w, 
	vl_total_w, 
	vl_manut_mensal_w, 
	vl_distribuidor_w, 
	nr_seq_canal_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	if (nr_seq_cliente_w <> 0) then 
		begin 
		ie_gerar_comunic_w := true;
		 
		select nextval('com_cliente_regra_valor_seq') 
		into STRICT nr_sequencia_regra_valor_w 
		;	
		 
		insert into com_cliente_regra_valor(		 
			cd_condicao_pagamento, 
			cd_estabelecimento,    
			cd_natureza_operacao,   
			cd_operacao_nf,      
			ds_observacao,  
			dt_atualizacao, 
			dt_atualizacao_nrec,   
			dt_fim_vigencia,     
			dt_inicio_vigencia, 
			ie_atualizar,      		    
			ie_situacao,  
			nm_usuario, 
			nm_usuario_nrec,     
			nr_seq_cliente,      
			nr_seq_cliente_nf,    
			nr_seq_ordem_serv,    
			nr_sequencia) values (		 
			cd_condicao_pagamento_w, 
			wheb_usuario_pck.get_cd_estabelecimento, 
			cd_natureza_operacao_w, 
			null, 
			'', 
			clock_timestamp(), 
			clock_timestamp(), 
			null, 
			dt_aprov_reprov_w, 
			'N',		 
			'A', 
			nm_usuario_p, 
			nm_usuario_p, 
			nr_seq_cliente_w, 
			null, 
			null, 
			nr_sequencia_regra_valor_w 
			);
			 
		SELECT * FROM define_conta_procedimento(	cd_estabelecimento_w, cd_procedimento_w, ie_origem_proced_w, 1, null, null, '', null, null, null, '', clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, '') INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
		begin				 
		select max(coalesce(ie_tipo_financ_proced,'X')) 
		into STRICT	ie_tipo_financ_proced_w 
		from 	com_tipo_procedimento 
		where 	cd_procedimento = cd_procedimento_w 
		and	ie_origem_proced = ie_origem_proced_w;
		exception 
		when others then 
			ie_tipo_financ_proced_w := 'X';
		end;
		 
		 
		if (ie_tipo_financ_proced_w = 'CDU') then 
			begin 
			vl_cobrar_w := vl_total_w;
			ds_compl_nf_w := wheb_mensagem_pck.get_texto(949154, 'QT_LICENCA=' || qt_licenca_w);--Referente a aquisição de #@QT_LICENCA#@ licenças. 
			end;
		else 
			begin 
			vl_cobrar_w := vl_manut_mensal_w;
			ds_compl_nf_w := wheb_mensagem_pck.get_texto(949155);--Referente ao Mês @MES@	 
			end;
		end if;
 
		select nextval('com_cli_regra_valor_item_seq') 
		into STRICT nr_seq_regra_valor_item_w 
		;		
			 
		insert into com_cli_regra_valor_item(	 
			cd_centro_custo,         
			cd_conta_contabil,        
			cd_procedimento,         
			ds_compl_nf,           
			ds_observacao,          
			ds_titulo,            
			dt_atualizacao,          
			dt_atualizacao_nrec,       
			ie_origem_proced,         
			ie_rat,              
			ie_situacao,           
			nm_usuario,            
			nm_usuario_nrec,         
			nr_seq_regra,           
			nr_sequencia,           
			vl_cobrar)            
			values ( 
			cd_centro_custo_w,     
			cd_conta_contabil_w,        
			cd_procedimento_w,         
			ds_compl_nf_w,           
			'',          
			substr(obter_desc_procedimento(cd_procedimento_w,ie_origem_proced_w),1,255), 
			clock_timestamp(),          
			clock_timestamp(), 
			ie_origem_proced_w, 
			'N',              
			'A', 
			nm_usuario_p,            
			nm_usuario_p,         
			nr_sequencia_regra_valor_w,           
			nr_seq_regra_valor_item_w, 
			vl_cobrar_w 
			);
			 
		select max(b.cd_cnpj), 
		    max(b.nm_guerra)	 
		 into STRICT cd_cnpj_w,	 
		    nm_guerra_w 
		 from com_canal_cliente a, 
		    com_canal b 
		 where b.nr_sequencia = a.nr_seq_canal 
		  and coalesce(a.dt_fim_atuacao::text, '') = '' 
		  and a.nr_seq_canal = nr_seq_canal_w;
		 
		if (ie_tipo_financ_proced_w in ('CDU','LUT')) then 
			begin 
			insert into com_cli_regra_valor_rep(	 
				cd_cnpj,        
				cd_cond_pagto,      
				cd_material,       
				cd_pessoa_fisica,     
				ds_titulo,        
				dt_atualizacao,      
				dt_atualizacao_nrec, 
				dt_vigencia,       
				ie_situacao,       
				nm_usuario,        
				nm_usuario_nrec,     
				nr_seq_regra_item,    
				nr_sequencia,       
				pr_repasse,        
				vl_repasse) 
				values(	 
				cd_cnpj_w, 
				cd_condicao_pagamento_w, 
				com_obter_material_vinc_proc(cd_procedimento_w, ie_origem_proced_w), 
				null, 
				nm_guerra_w, 
				clock_timestamp(), 
				clock_timestamp(), 
				clock_timestamp(), 
				'A', 
				nm_usuario_p, 
				nm_usuario_p, 
				nr_seq_regra_valor_item_w, 
				nextval('com_cli_regra_valor_rep_seq'),	 
				((vl_distribuidor_w * 100)/vl_cobrar_w), 
				vl_distribuidor_w 
				);
			end;
		end if;
		end;
	end if;
	end;
end loop;
close C01;
 
select	coalesce(max(obter_valor_param_usuario(992, 79, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)), 'X') 
into STRICT	ie_param_cargo_w
;
 
if (ie_param_cargo_w <> 'X') and (ie_gerar_comunic_w) then 
	begin 
	 
	/*Aprovado o registro #@NR_SEQUENCIA_P#@ na aba 'Solicitação de contrados' da função Gestão Comercial Philips. 
	Usuário responsável pela liberação: #@NM_USUARIO_P#@.*/
 
	ds_comunicado_w		:= wheb_mensagem_pck.get_texto(949317, 'NR_SEQUENCIA_P=' || nr_sequencia_p || ';NM_USUARIO_P=' || nm_usuario_p);
	 
	qt_pos_separador_w 	:= position(',' in ie_param_cargo_w);
	 
	if (qt_pos_separador_w = 0 ) then 
		begin 
		begin 
		insert into comunic_interna( 
			dt_comunicado, ds_titulo, ds_comunicado, nm_usuario, 
			dt_atualizacao, ie_geral, nr_sequencia, 
			ie_gerencial, cd_cargo, dt_liberacao) 
		values ( 
			clock_timestamp(), wheb_mensagem_pck.get_texto(949345), ds_comunicado_w, nm_usuario_p, 
			clock_timestamp(), 'N', nextval('comunic_interna_seq'), 
			'N', ie_param_cargo_w, clock_timestamp()); 		
		exception 
		when others then 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(992787,'CD_CARGO_P='||ie_param_cargo_w);			
		end;
			 
		end;
	else 
		begin 
		 
		while( qt_pos_separador_w > 0 ) loop 
			begin 
			 
			ds_cargo_ci_w := substr(ie_param_cargo_w,1,qt_pos_separador_w-1);
			 
			begin 
			insert into comunic_interna( 
				dt_comunicado, ds_titulo, ds_comunicado, nm_usuario, 
				dt_atualizacao, ie_geral, nr_sequencia, 
				ie_gerencial, cd_cargo, dt_liberacao) 
			values ( 
				clock_timestamp(), wheb_mensagem_pck.get_texto(949345), ds_comunicado_w, nm_usuario_p, 
				clock_timestamp(), 'N', nextval('comunic_interna_seq'), 
				'N', ds_cargo_ci_w, clock_timestamp());			
			exception 
			when others then 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(992787,'CD_CARGO_P='||ds_cargo_ci_w);
			end;
			 
			ie_param_cargo_w 	:= substr(ie_param_cargo_w,qt_pos_separador_w+1,length(ie_param_cargo_w));
			qt_pos_separador_w 	:= position(',' in ie_param_cargo_w);
				 
			end;
		end loop;
		 
		end;
	end if;
	 
	 
 
	end;
end if;
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE com_gerar_cliente_regra_valor ( nr_sequencia_p com_solic_contr_proc.nr_seq_solic_contr%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

