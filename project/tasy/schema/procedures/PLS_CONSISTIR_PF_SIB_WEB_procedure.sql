-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_pf_sib_web ( cd_pessoa_fisica_p text, nm_mae_benef_p text, nm_beneficiario_p text, dt_nascimento_p text, nr_cpf_p text, nr_cartao_nac_sus_p text, nr_reg_geral_estrang_p text, nr_identidade_p text, ds_orgao_emissor_ci_p pessoa_fisica.ds_orgao_emissor_ci%type, nr_seq_pais_emissor_p text, nr_cep_p text, uf_p text, ds_municipio_p text, ds_logradouro_p text, sg_emissora_ci_p text, nm_usuario_p text, cd_declaracao_nasc_vivo_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ds_retorno_p INOUT text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Consistir as informações do SIB na alteração cadastral do beneficiário, no acesso do Beneficiário e do Estipulante
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  x  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: Validação utilizada no acesso do Beneficiário e do Estipulante/Contratante
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_erro_w			varchar(4000)	:= null;
cd_pais_sib_w			varchar(30);
ie_brasileiro_w			varchar(1)	:= 'S';
cd_pessoa_resp_w		varchar(10);
nr_ident_resp_w			varchar(30);
ds_orgao_emissor_ci_resp_w	pessoa_fisica.ds_orgao_emissor_ci%type;
nr_reg_geral_estrang_resp_w	varchar(30);
qt_idade_w			integer;
ie_nome_benef_invalido_w	varchar(10);
ie_nome_mae_invalido_w		varchar(10);
cd_nacionalidade_w		pessoa_fisica.cd_nacionalidade%type;
ie_valida_sib_alt_w		pls_web_param_geral.ie_valida_sib_alt%type;


BEGIN

/*Parâmetro utilizado para verificar se irá aplicar as consistências do SIB na alteração cadastral
Parâmetro criado na funçã o OPS - Gestão de de Operadoras / Portal Web */
ie_valida_sib_alt_w := pls_parametro_operadora_web('VSIB', cd_estabelecimento_p);


if ( ie_valida_sib_alt_w = 'S' ) then
	select	max(cd_nacionalidade)
	into STRICT	cd_nacionalidade_w
	from	pessoa_fisica
	where	cd_pessoa_fisica	= cd_pessoa_fisica_p;

	if (coalesce(cd_nacionalidade_w,'0') <> '0') then
		select	ie_brasileiro
		into STRICT	ie_brasileiro_w
		from	nacionalidade
		where	cd_nacionalidade = cd_nacionalidade_w;
	end if;

	/* 2- Nome da mãe do beneficiário não informado*/

	if (coalesce(nm_mae_benef_p,'0') = '0') and (pls_obter_incosistencia_lib(2) = 'S') then
		ds_erro_w	:= ds_erro_w || 'Nome da mãe do beneficiário não informado' || chr(13) || chr(10);
	end if;

	/* 3 - Nome do Beneficiário não informado*/

	if (coalesce(nm_beneficiario_p,'0') = '0') and (pls_obter_incosistencia_lib(3) = 'S') then
		ds_erro_w	:= ds_erro_w || 'Nome do beneficiário não informado' || chr(13) || chr(10);
	end if;

	/* 4 - Data de Nasc. do Beneficiário não informado*/

	if (coalesce(dt_nascimento_p,'0') = '0') and (pls_obter_incosistencia_lib(4) = 'S') then
		ds_erro_w	:= ds_erro_w || 'Data de nascimento do beneficiário não informada' || chr(13) || chr(10);
	else
		select	obter_idade(to_date(dt_nascimento_p,'dd/mm/yyyy'),clock_timestamp(),'A')
		into STRICT	qt_idade_w
		;
	end if;

	/* 5 - Sexo do Beneficiário não informado
	if	(nvl(ie_sexo_p,'0') = '0') and
		(pls_obter_incosistencia_lib(5) = 'S') then
		ds_erro_w	:= ds_erro_w || 'Sexo do beneficiário não informado' || chr(13) || chr(10);
	end if;*/
	select	max(cd_pessoa_fisica_ref)
	into STRICT	cd_pessoa_resp_w
	from	compl_pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
	and	ie_tipo_complemento = 3;

	if (coalesce(cd_pessoa_resp_w,0) <> 0) then
		select	coalesce(max(nr_identidade),'0'),
			coalesce(max(ds_orgao_emissor_ci),'0'),
			coalesce(max(nr_reg_geral_estrang),'0')
		into STRICT	nr_ident_resp_w,
			ds_orgao_emissor_ci_resp_w,
			nr_reg_geral_estrang_resp_w
		from	pessoa_fisica
		where	cd_pessoa_fisica = cd_pessoa_resp_w;
	end if;

	/* 6 - CPF, CNS, Pis/Pasep do Beneficiário não informado
	if	((((nvl(nr_cpf_p,'0') = '0') and (qt_idade_w < 60) and (qt_idade_w >= 18)) and	(nvl(nr_pis_pasep_p,'0') = '0') and (nvl(nr_cartao_nac_sus_p,'0') = '0'))
		and (ie_brasileiro_w = 'S')) or
		((ie_brasileiro_w = 'N') and (nr_reg_geral_estrang_p is null)) then
			select	count(*)
			into	qt_titular_w
			from	pls_segurado
			where	cd_pessoa_fisica	= cd_pessoa_fisica_p
			and	nr_seq_titular is null
			and	dt_liberacao is not null
			and	dt_rescisao is null;

			if	(qt_titular_w > 0) and
				(pls_obter_incosistencia_lib(6) = 'S') then
				ds_erro_w	:= ds_erro_w || 'CPF, CNS, Pis/Pasep do Beneficiário não informado' || chr(13) || chr(10);
			end if;
	end if;*/
	/* 7 - Documento de Identificação do Beneficiário não informado*/

	if	(((ie_brasileiro_w = 'S') and (coalesce(nr_identidade_p,'0') = '0')) or
		((ie_brasileiro_w = 'N') and (coalesce(nr_reg_geral_estrang_p,'0') = '0'))) and (pls_obter_incosistencia_lib(7) = 'S') then
		if (qt_idade_w < 18) and (cd_pessoa_resp_w <> 0) then
			if (nr_ident_resp_w = '0') then
				ds_erro_w	:= ds_erro_w || 'Documento de Identificação do Beneficiário não informado' || chr(13) || chr(10);
			end if;
		else
			ds_erro_w	:= ds_erro_w || 'Documento de Identificação do Beneficiário não informado' || chr(13) || chr(10);
		end if;
	end if;

	/*aaschlote 12/03/2012 - OS 418682*/

	if (coalesce(nr_identidade_p,'0') <> '0')  then
		/* 8 - Orgão Emissor do Documento de Identificação do Beneficiário não informado*/

		if (coalesce(ds_orgao_emissor_ci_p,'0') = '0') and (pls_obter_incosistencia_lib(8) = 'S') then
			if (qt_idade_w < 18) and (cd_pessoa_resp_w <> 0) then
				if (ds_orgao_emissor_ci_resp_w = '0') then
					ds_erro_w	:= ds_erro_w || 'Orgão Emissor do Documento de Identificação do Beneficiário não informado' || chr(13) || chr(10);
				end if;
			else
				ds_erro_w	:= ds_erro_w || 'Orgão Emissor do Documento de Identificação do Beneficiário não informado' || chr(13) || chr(10);
			end if;
		end if;

		if (coalesce(nr_seq_pais_emissor_p,'0') <> '0') then
			select	max(cd_pais_sib)
			into STRICT	cd_pais_sib_w
			from	pais
			where	nr_sequencia	= nr_seq_pais_emissor_p;
		end if;

		/* 9 - País Emissor do Documento de Identificação do Beneficiário não informado*/

		if (coalesce(cd_pais_sib_w,'0') = '0') and (pls_obter_incosistencia_lib(9) = 'S') then
			ds_erro_w	:= ds_erro_w || 'País Emissor do Documento de Identificação do Beneficiário não informado' || chr(13) || chr(10);
		end if;

		/*UF Emissor do Documento de Identificação do Beneficiário não informado*/

		if (coalesce(sg_emissora_ci_p::text, '') = '') and (pls_obter_incosistencia_lib(31) = 'S') then
			ds_erro_w	:= ds_erro_w || 'UF Emissor do Documento de Identificação do Beneficiário não informado' || chr(13) || chr(10);
		end if;
	end if;

	/* 10 - CEP do Beneficiário não informado*/

	if (coalesce(nr_cep_p,'0') = '0') and (pls_obter_incosistencia_lib(10) = 'S') then
		ds_erro_w	:= ds_erro_w || 'CEP do Beneficiário não informado' || chr(13) || chr(10);
	end if;

	/* 11 - UF do Beneficiário não informado*/

	if (coalesce(uf_p,'0') = '0') and (pls_obter_incosistencia_lib(11) = 'S') then
		ds_erro_w	:= ds_erro_w || 'UF do Beneficiário não informado' || chr(13) || chr(10);
	end if;

	/* 12 - Municipio do Beneficiário não informado*/

	if (coalesce(ds_municipio_p,'0') = '0') and (pls_obter_incosistencia_lib(12) = 'S') then
		ds_erro_w	:= ds_erro_w || 'Municipio do Beneficiário não informado' || chr(13) || chr(10);
	end if;

	/* 13 - Logradouro do Beneficiário não informado*/

	if (coalesce(ds_logradouro_p,'0') = '0') and (pls_obter_incosistencia_lib(13) = 'S') then
		ds_erro_w	:= ds_erro_w || 'Logradouro do Beneficiário não informado' || chr(13) || chr(10);
	end if;

	/*24 - Número da declaração de nascido vivo não informado
	if	(cd_declaracao_nasc_vivo_p is null) and
		(to_date(dt_nascimento_p,'dd/mm/yyyy') >= to_date('01/01/2010','dd/mm/yyyy')) and
		(pls_obter_incosistencia_lib(24) = 'S') then
		ds_erro_w	:= ds_erro_w || 'Número da declaração de nascido vivo não informado' || chr(13) || chr(10);
	end if;*/
	ie_nome_benef_invalido_w	:= pls_consistir_letra_unica_pf(nm_beneficiario_p);
	ie_nome_mae_invalido_w		:= pls_consistir_letra_unica_pf(nm_mae_benef_p);

	/*28 - Nome do beneficiário ou da mãe inválido*/

	if (ie_nome_mae_invalido_w = 'S') or (ie_nome_benef_invalido_w = 'S') and (pls_obter_incosistencia_lib(28) = 'S') then
		ds_erro_w	:= ds_erro_w || 'Nome do beneficiário ou da mãe inválido' || chr(13) || chr(10);
	end if;
end if;

ds_retorno_p	:= substr(ds_erro_w,1,255);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_pf_sib_web ( cd_pessoa_fisica_p text, nm_mae_benef_p text, nm_beneficiario_p text, dt_nascimento_p text, nr_cpf_p text, nr_cartao_nac_sus_p text, nr_reg_geral_estrang_p text, nr_identidade_p text, ds_orgao_emissor_ci_p pessoa_fisica.ds_orgao_emissor_ci%type, nr_seq_pais_emissor_p text, nr_cep_p text, uf_p text, ds_municipio_p text, ds_logradouro_p text, sg_emissora_ci_p text, nm_usuario_p text, cd_declaracao_nasc_vivo_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ds_retorno_p INOUT text) FROM PUBLIC;

