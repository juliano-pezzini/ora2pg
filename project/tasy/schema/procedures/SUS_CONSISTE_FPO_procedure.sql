-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_fpo ( dt_parametro_p timestamp, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, nr_atendimento_p bigint, cd_estabelecimento_p bigint, ie_tipo_atendimento_p bigint, ie_opcao_p text, ds_retorno_p INOUT text) AS $body$
DECLARE

/*
A - Ambos
V - Valor
Q - Quantidade
*/
qt_fisico_w		bigint := 0;
vl_orcamentario_w	double precision;
cd_convenio_w		integer;
qt_exec_w		bigint := 0;
dt_entrega_w		timestamp;
ds_retorno_w		varchar(2000);
vl_exec_w		double precision;
vl_info_w		double precision;

BEGIN
if (ie_origem_proced_p = 3) and (ie_tipo_atendimento_p <> 1) and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
	/*obter convenio atendimento*/

	select	obter_convenio_atendimento(nr_atendimento_p)
	into STRICT	cd_convenio_w
	;
	/*teto maximo quantidade*/

	select	sus_obter_fpo(cd_procedimento_p, ie_origem_proced_p, dt_parametro_p, 1)
	into STRICT	qt_fisico_w
	;
	/*teto maximo valor*/

	select	sus_obter_fpo(cd_procedimento_p, ie_origem_proced_p, dt_parametro_p, 2)
	into STRICT	vl_orcamentario_w
	;
	/*valor procedimento*/

	select	obter_preco_proc_sus(dt_parametro_p, cd_procedimento_p, ie_origem_proced_p, cd_estabelecimento_p)
	into STRICT	vl_info_w
	;
	/*quantidade e valor ja executado do procedimento para a data de vigencia*/

	select	coalesce(sum(qt_procedimento),0),
		coalesce(sum(vl_procedimento),0)
	into STRICT	qt_exec_w,
		vl_exec_w
	from	procedimento_paciente
	where	cd_procedimento				= cd_procedimento_p
	and	ie_origem_proced			= ie_origem_proced_p
	and	trunc(dt_procedimento, 'month')		= trunc(dt_parametro_p, 'month')
	and	cd_convenio				= cd_convenio_w
	and	coalesce(cd_motivo_exc_conta::text, '') = '';
	qt_exec_w	:= coalesce(qt_exec_w,0) + coalesce(qt_procedimento_p,0);
	vl_exec_w	:= coalesce(vl_exec_w,0) + coalesce((vl_info_w * qt_procedimento_p),0);
	if (ie_opcao_p = 'V') and (vl_exec_w	> vl_orcamentario_w) then --299670
		--ds_retorno_w	:= 'Valor(R$' || campo_mascara(vl_exec_w,2) || ') ultrapassou o teto que é de R$' || campo_mascara(vl_orcamentario_w,2) || '.';
		ds_retorno_w	:= wheb_mensagem_pck.get_texto(299670, 'VL_EXEC=' || campo_mascara(vl_exec_w,2) || ';VL_ORCAMENTARIO=' || campo_mascara(vl_orcamentario_w,2));
	elsif (ie_opcao_p = 'Q') and (qt_exec_w	> qt_fisico_w) then
		--ds_retorno_w	:= 'Quantidade(' || qt_exec_w || ') ultrapassou o teto que é de ' || qt_fisico_w || '.';
		ds_retorno_w	:= wheb_mensagem_pck.get_texto(299671, 'QT_EXEC=' || qt_exec_w || ';QT_FISICO=' || qt_fisico_w);
	elsif (ie_opcao_p = 'A') and
		((qt_exec_w	> qt_fisico_w) or (vl_exec_w	> vl_orcamentario_w)) then
		/*ds_retorno_w	:= 'Valor(R$' || campo_mascara(vl_exec_w,2) || ') ou quantidade(' || qt_exec_w || ') ultrapassaram o teto que é de R$' ||
campo_mascara(vl_orcamentario_w,2) || ' para o valor, e de ' || qt_fisico_w || ' para quantidade.';*/
		ds_retorno_w	:= wheb_mensagem_pck.get_texto(299672, 'VL_EXEC=' || campo_mascara(vl_exec_w,2) || ';QT_EXEC=' || qt_exec_w || ';VL_ORCAMENTARIO=' || campo_mascara(vl_orcamentario_w,2) || ';QT_FISICO=' || qt_fisico_w);
	else
		ds_retorno_w	:= '';
	end if;
else
	ds_retorno_w	:= '';
end if;
ds_retorno_p	:= ds_retorno_w;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_fpo ( dt_parametro_p timestamp, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, nr_atendimento_p bigint, cd_estabelecimento_p bigint, ie_tipo_atendimento_p bigint, ie_opcao_p text, ds_retorno_p INOUT text) FROM PUBLIC;

