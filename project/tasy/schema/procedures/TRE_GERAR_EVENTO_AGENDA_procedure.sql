-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tre_gerar_evento_agenda (nr_seq_agenda_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_inicio_w			timestamp;
dt_termino_w			timestamp;
nr_seq_curso_w			bigint;
nr_seq_evento_w			bigint;
nr_seq_modulo_evento_w		bigint;
qt_carga_horaria_w			double precision;
nr_seq_modulo_w			bigint;
nr_seq_apres_w			bigint;
nr_sequencia_w			bigint;
ds_conteudo_w			varchar(4000);
nr_seq_evento_cont_w		bigint;
cd_pessoa_fisica_w		varchar(10);
ds_titulo_w			varchar(80);
ds_agenda_w			varchar(80);
dt_inicio_modulo_w			timestamp;
dt_termino_modulo_w		timestamp;
cd_palestrante_w			varchar(10);
cd_cgc_w			varchar(14);
cd_setor_usuario_w			integer;
cd_cargo_w			bigint;
ds_arquivo_w			varchar(255);
nr_seq_anexo_w			bigint;
nr_pac_reabilitacao_w		bigint;
nr_seq_modalidade_w		bigint;
ie_pac_inserido_w		varchar(1);
dt_inicio_real_w		timestamp;
dt_termino_real_w		timestamp;
nr_valida_modulo_w		bigint;


c01 CURSOR FOR
SELECT	nr_sequencia,
	nr_seq_modulo,
	qt_carga_horaria,
	dt_inicio,
	dt_termino,
	cd_palestrante
from	tre_agenda_modulo
where	nr_seq_agenda = nr_seq_agenda_p;

c02 CURSOR FOR
SELECT	nr_seq_apres,
	ds_conteudo,
	ds_titulo
from	tre_curso_conteudo
where	nr_seq_modulo = nr_seq_modulo_w
order by NR_SEQ_APRES;

c03 CURSOR FOR
SELECT	cd_pessoa_fisica,
	nr_seq_modulo,
	cd_cgc,
	cd_setor_usuario,
	cd_cargo,
	nr_pac_reabilitacao
from	tre_candidato
where	nr_seq_agenda = nr_seq_agenda_p
and	(nr_seq_modulo IS NOT NULL AND nr_seq_modulo::text <> '')
and	coalesce(ie_cancelamento,'N') = 'N'

union all

select	a.cd_pessoa_fisica,
	b.nr_sequencia,
	a.cd_cgc,
	a.cd_setor_usuario,
	a.cd_cargo,
	nr_pac_reabilitacao
from	tre_candidato a,
	tre_agenda_modulo b
where	a.nr_seq_agenda = b.nr_seq_agenda
and	coalesce(a.nr_seq_modulo::text, '') = ''
and	a.nr_seq_agenda = nr_seq_agenda_p
and	coalesce(a.ie_cancelamento,'N') = 'N'

union all

select	a.cd_pessoa_fisica,
	0,
	a.cd_cgc,
	a.cd_setor_usuario,
	a.cd_cargo,
	nr_pac_reabilitacao
from	tre_candidato a
where	coalesce(a.nr_seq_modulo::text, '') = ''
and	a.nr_seq_agenda = nr_seq_agenda_p
AND (SUBSTR(obter_valor_param_usuario(7041, 40, Obter_perfil_Ativo(), nm_usuario_p, Obter_estabelecimento_Ativo()),1,1) = 'S')
and	coalesce(a.ie_cancelamento,'N') = 'N';

C04 CURSOR FOR
SELECT	ds_arquivo
from	tre_agenda_mod_anexo
where	nr_seq_modulo	= nr_sequencia_w;


BEGIN

select	max(dt_inicio),
	max(dt_termino),
	max(nr_seq_curso),
	max(ds_agenda),
	max(nr_seq_modalidade),
	max(dt_inicio_real),
	max(dt_termino_real)
into STRICT	dt_inicio_w,
	dt_termino_w,
	nr_seq_curso_w,
	ds_agenda_w,
	nr_seq_modalidade_w,
	dt_inicio_real_w,
	dt_termino_real_w
from	tre_agenda
where	nr_sequencia = nr_seq_agenda_p;


select	max(qt_carga_horaria)
into STRICT	qt_carga_horaria_w
from	tre_curso
where	nr_sequencia = nr_seq_curso_w;

select	nextval('tre_evento_seq')
into STRICT	nr_seq_evento_w
;

insert into tre_evento(
		nr_sequencia,
		nr_seq_curso,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		dt_inicio,
		dt_fim,
		ds_evento,
		nr_seq_agenda,
		nr_seq_modalidade,
		cd_estabelecimento,
		dt_inicio_real,
		dt_fim_real,
		qt_carga_horaria)
	values (	nr_seq_evento_w,
		nr_seq_curso_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		dt_inicio_w,
		dt_termino_w,
		ds_agenda_w,
		nr_seq_agenda_p,
		nr_seq_modalidade_w,
		Obter_estabelecimento_Ativo(),
		dt_inicio_real_w,
		dt_termino_real_w,
		qt_carga_horaria_w);

open c01;
loop
	fetch c01 into
		nr_sequencia_w,
		nr_seq_modulo_w,
		qt_carga_horaria_w,
		dt_inicio_modulo_w,
		dt_termino_modulo_w,
		cd_palestrante_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		begin
		select	nextval('tre_evento_modulo_seq')
		into STRICT	nr_seq_modulo_evento_w
		;

		insert into tre_evento_modulo(
				nr_sequencia,
				nr_seq_evento,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_modulo,
				qt_carga_horaria,
				dt_inicio,
				dt_termino,
				cd_palestrante)
			values (	nr_seq_modulo_evento_w,
				nr_seq_evento_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_modulo_w,
				qt_carga_horaria_w,
				dt_inicio_modulo_w,
				dt_termino_modulo_w,
				cd_palestrante_w);

		open C04;
		loop
		fetch C04 into
			ds_arquivo_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin

			select	nextval('tre_modulo_anexo_seq')
			into STRICT	nr_seq_anexo_w
			;

			insert	into tre_modulo_anexo(
					nr_sequencia,
					nr_seq_modulo,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ds_arquivo)
				values (	nr_seq_anexo_w,
					nr_seq_modulo_evento_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					ds_arquivo_w);
			end;
		end loop;
		close C04;

		open c02;
		loop
			fetch c02 into
				nr_seq_apres_w,
				ds_conteudo_w,
				ds_titulo_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */

				begin
				select	nextval('tre_evento_conteudo_seq')
				into STRICT	nr_seq_evento_cont_w
				;

				insert into tre_evento_conteudo(
					nr_sequencia,
					nr_seq_mod_evento,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_apres,
					ds_conteudo,
					ds_titulo)
				values (	nr_seq_evento_cont_w,
					nr_seq_modulo_evento_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_apres_w,
					ds_conteudo_w,
					ds_titulo_w);
				end;
		end loop;
		close c02;

		end;
end loop;
close c01;

open c03;
loop
	fetch c03 into
		cd_pessoa_fisica_w,
		nr_seq_modulo_w,
		cd_cgc_w,
		cd_setor_usuario_w,
		cd_cargo_w,
		nr_pac_reabilitacao_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */

		begin

		if (nr_seq_modulo_w = 0) then
			select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_pac_inserido_w
			from	tre_inscrito
			where	nr_seq_evento = nr_seq_evento_w
			and	cd_pessoa_fisica = cd_pessoa_fisica_W;
		else
			select	max(nr_seq_modulo)
			into STRICT	nr_valida_modulo_w
			from	tre_agenda_modulo
			where	nr_sequencia = nr_seq_modulo_w;

			select	coalesce(max(a.nr_sequencia),0)
			into STRICT	nr_valida_modulo_w
			from	tre_evento_modulo a,
				tre_evento b
			where	b.nr_sequencia = a.nr_seq_evento
			and	a.nr_seq_modulo = nr_valida_modulo_w;

			select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_pac_inserido_w
			from	tre_inscrito
			where	nr_seq_evento = nr_seq_evento_w
			and	cd_pessoa_fisica = cd_pessoa_fisica_W
			and	nr_seq_mod_evento = nr_valida_modulo_w;
		end if;

		if (ie_pac_inserido_w = 'N') then

			select	max(nr_seq_modulo)
			into STRICT	nr_seq_modulo_w
			from	tre_agenda_modulo
			where	nr_sequencia = nr_seq_modulo_w;

			select	coalesce(max(a.nr_sequencia),0)
			into STRICT	nr_seq_modulo_w
			from	tre_evento_modulo a,
				tre_evento b
			where	b.nr_sequencia = a.nr_seq_evento
			and	a.nr_seq_modulo = nr_seq_modulo_w;

			select	nextval('tre_inscrito_seq')
			into STRICT	nr_sequencia_w
			;

			insert into tre_inscrito(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_pessoa_fisica,
					nr_seq_evento,
					nr_seq_mod_evento,
					dt_inscricao,
					cd_cgc,
					cd_setor_usuario,
					cd_cargo,
					nr_pac_reabilitacao)
				values (	nr_sequencia_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_pessoa_fisica_w,
					nr_seq_evento_w,
					CASE WHEN nr_seq_modulo_w=0 THEN null  ELSE nr_seq_modulo_w END ,
					clock_timestamp(),
					cd_cgc_w,
					cd_setor_usuario_w,
					cd_cargo_w,
					nr_pac_reabilitacao_w);

		end if;
		end;
end loop;
close c03;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tre_gerar_evento_agenda (nr_seq_agenda_p bigint, nm_usuario_p text) FROM PUBLIC;

