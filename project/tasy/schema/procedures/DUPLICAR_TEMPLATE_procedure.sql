-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE duplicar_template ( nr_sequencia_p bigint, cd_profissional_p bigint, nr_seq_novo_p INOUT bigint, nm_usuario_p text, nr_atendimento_p bigint, nr_seq_aval_pre_p bigint default null) AS $body$
DECLARE


nr_sequencia_w		bigint;
nr_sequencia_reg_w	bigint;
nr_seq_template_w	bigint;
nr_seq_cad_template_w	bigint;
ie_template_lib_w	varchar(5);	
				
C01 CURSOR FOR
	SELECT	b.nr_sequencia
	from	ehr_reg_template a,
		ehr_reg_elemento b,
		ehr_registro c
	where	c.nr_sequencia	= a.nr_seq_reg
	and	a.nr_seq_reg	= nr_sequencia_w
	and	a.nr_sequencia = b.nr_seq_reg_template
	and	(b.nr_seq_temp_conteudo IS NOT NULL AND b.nr_seq_temp_conteudo::text <> '')
	and	coalesce(b.NR_REGISTRO_CLUSTER::text, '') = ''
	and	not exists (	SELECT	1
					from	ehr_template_conteudo x
					where	x.nr_seq_template	= a.nr_seq_template
					and	b.nr_seq_temp_conteudo	= x.nr_sequencia);				
				

BEGIN

select	max(nr_sequencia),
	max(nr_seq_template)
into STRICT	nr_seq_template_w,
	nr_seq_cad_template_w
from	ehr_reg_template
where	nr_seq_reg = nr_sequencia_p
and	(NR_SEQ_TEMPLATE IS NOT NULL AND NR_SEQ_TEMPLATE::text <> '');

ie_template_lib_w := Ehr_Obter_Se_Template_Lib(nr_seq_cad_template_w, Obter_Perfil_Ativo, null, cd_profissional_p, null, nr_atendimento_p);

if (coalesce(ie_template_lib_w,'S') = 'N') then
	--Nao foi possivel duplicar! Verificar o cadastro de liberacao de uso do template.
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(329492);
end if;



select  nextval('ehr_registro_seq')
into STRICT	nr_sequencia_w
;

select 	nextval('ehr_reg_template_seq')
into STRICT	nr_sequencia_reg_w
;


insert into  	ehr_registro(	nr_sequencia,
				cd_profissional,
				dt_liberacao,
				dt_inativacao,
				dt_registro,
				nr_seq_tipo_reg,
				nm_usuario,
				nm_usuario_nrec,
				dt_atualizacao,
				dt_atualizacao_nrec,
				cd_paciente,
				nr_atendimento,
				NR_SEQ_ITEM_PRONT,
				NR_SEQ_AVAL_PRE,
				NR_SEQ_ATEND_CONS_PEPA,
				dt_duplicacao,
				nr_seq_duplicacao,
				nr_seq_duplicacao_inicial,
				ie_duplicado)
		SELECT		nr_sequencia_w,
				cd_profissional_p,
				null,
				null,
				clock_timestamp(),
				nr_seq_tipo_reg,
				nm_usuario_p,
				nm_usuario_p,
				clock_timestamp(),
				clock_timestamp(),
				cd_paciente,
				CASE WHEN coalesce(nr_atendimento_p,0)=0 THEN nr_atendimento  ELSE nr_atendimento_p END ,
				NR_SEQ_ITEM_PRONT,
				coalesce(nr_seq_aval_pre_p,NR_SEQ_AVAL_PRE),
				CASE WHEN Obter_Funcao_Ativa=381 THEN  NR_SEQ_ATEND_CONS_PEPA  ELSE null END ,
				dt_atualizacao_nrec,
				nr_sequencia_p,
				coalesce((SELECT nr_seq_duplicacao_inicial from ehr_registro where nr_sequencia = nr_sequencia_p), nr_sequencia_p) nr_seq_duplicacao_inicial,
				'S' ie_duplicado
		from		ehr_registro
		where		nr_sequencia = nr_sequencia_p;
		
insert into ehr_reg_template(	nr_sequencia,
				nr_seq_reg,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				dt_registro,
				nr_seq_template)
		SELECT		nr_sequencia_reg_w,
				nr_sequencia_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_template
		from		ehr_reg_template
		where		nr_sequencia = nr_seq_template_w;
		
CALL EHR_Duplicar_Template_Consulta(nr_seq_template_w,nr_sequencia_reg_w,nm_usuario_p);

nr_seq_novo_p	:= nr_sequencia_w;

open C01;
loop
fetch C01 into	
	nr_sequencia_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	delete	from	ehr_reg_elemento
	where	nr_sequencia	= nr_sequencia_w;
	
	
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE duplicar_template ( nr_sequencia_p bigint, cd_profissional_p bigint, nr_seq_novo_p INOUT bigint, nm_usuario_p text, nr_atendimento_p bigint, nr_seq_aval_pre_p bigint default null) FROM PUBLIC;

