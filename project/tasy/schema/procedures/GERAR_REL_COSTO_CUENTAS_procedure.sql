-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_rel_costo_cuentas ( dt_inicial_p timestamp, dt_final_p timestamp, nr_atencion_p text, nr_interno_cuenta_p text, nr_factura_p text, cd_paciente_p text, nm_usuario_p text, cd_convenio_p text) AS $body$
DECLARE



w_rel_costo_cuenta_w	w_rel_costo_cuenta%rowtype;
cd_grupo_proc_w			grupo_proc.cd_grupo_proc%type;
cd_classe_material_w	classe_material.cd_classe_material%type;
ie_consignado_w			material.ie_consignado%type;

dt_inicial_w			timestamp;
dt_final_w				timestamp;
nr_atencion_w			varchar(10000);
nr_interno_cuenta_w		varchar(10000);
nr_factura_w			varchar(15000);
cd_convenio_w			varchar(4000);
cd_paciente_w			varchar(4000);

ie_atend_lista_w	varchar(1);
ie_conta_lista_w	varchar(1);
ie_fatura_lista_w	varchar(1);
ie_convenio_lista_w	varchar(1);

ds_cursor			REFCURSOR;

C01 CURSOR FOR
SELECT	nr_atendimento,
	nr_interno_conta,
	cd_item,
	coalesce(qt_item,0) qt_item,
	coalesce(vl_item,0) vl_item,
	coalesce(vl_unitario_item,0) vl_unitario_item,
	dt_item,
	ie_proc_mat,
	ie_origem_proced,
	nr_sequencia,
	ie_emite_conta,
	cd_convenio,
	cd_pessoa_fisica,
	cd_estabelecimento
from	(
	SELECT	distinct
		1 ie_proc_mat,
		a.nr_atendimento,
		a.nr_interno_conta,
		a.cd_procedimento cd_item,
		a.qt_procedimento qt_item,
		a.vl_procedimento vl_item,
		null vl_unitario_item,
		a.dt_procedimento dt_item,
		a.ie_origem_proced,
		a.nr_sequencia,
		a.ie_emite_conta,
		a.cd_convenio,
		d.cd_pessoa_fisica,
		c.cd_estabelecimento
	FROM atendimento_paciente d, procedimento_paciente a, conta_paciente b
LEFT OUTER JOIN nota_fiscal c ON (b.nr_interno_conta = c.nr_interno_conta)
WHERE a.nr_interno_conta = b.nr_interno_conta  and a.nr_atendimento   = d.nr_atendimento and a.qt_procedimento <> 0 and coalesce(b.ie_cancelamento::text, '') = '' and a.dt_procedimento between pkg_date_utils.start_of(dt_inicial_w,'DAY', 0) and pkg_date_utils.end_of(dt_final_w, 'DAY', 0) and ((d.cd_pessoa_fisica = cd_paciente_w) or (cd_paciente_w = '0')) and ((coalesce(a.nr_seq_proc_pacote::text, '') = '')
		or (a.nr_sequencia = (	select	z.nr_seq_procedimento
								from 	atendimento_pacote z
								where  	z.nr_seq_procedimento = a.nr_sequencia
								and	(nr_atencion_w = '0'
									or ( (position(',' in nr_atencion_w) = '0') and (ie_atend_lista_w = 'N') and z.nr_atendimento = nr_atencion_w)
									or ((ie_atend_lista_w = 'S') and obter_se_contido_char(z.nr_atendimento,nr_atencion_w) = 'S')
									))
			and (a.nr_seq_proc_pacote IS NOT NULL AND a.nr_seq_proc_pacote::text <> ''))) and (nr_atencion_w = '0'
		or ( (position(',' in nr_atencion_w) = '0') and (ie_atend_lista_w = 'N') and d.nr_atendimento = nr_atencion_w)
		or ((ie_atend_lista_w = 'S') and obter_se_contido_char(d.nr_atendimento,nr_atencion_w) = 'S')
		) and (nr_interno_cuenta_w = '0' 
		or ( (position(',' in nr_interno_cuenta_w) = '0')  and (ie_conta_lista_w = 'N') and b.nr_interno_conta = nr_interno_cuenta_w)
		or ((ie_conta_lista_w = 'S') and obter_se_contido_char(b.nr_interno_conta,nr_interno_cuenta_w) = 'S')	
		) and (nr_factura_w = '0' 
		or ( (position(',' in nr_factura_w) = '0') and (ie_fatura_lista_w = 'N') and c.nr_nota_fiscal = nr_factura_w)
		or ((ie_fatura_lista_w = 'S') and obter_se_contido_char(c.nr_nota_fiscal,nr_factura_w) = 'S')
		) and (cd_convenio_w = '0' 
		or ( (position(',' in cd_convenio_w) = '0')  and (ie_convenio_lista_w = 'N') and b.cd_convenio_parametro = cd_convenio_w)
		or ((ie_convenio_lista_w = 'S') and obter_se_contido_char(b.cd_convenio_parametro,cd_convenio_w) = 'S')
                )
	 
union

	select	distinct
		2 ie_proc_mat,
		a.nr_atendimento,
		a.nr_interno_conta,
		a.cd_material cd_item,
		a.qt_material qt_item,
		a.vl_material vl_item,
		coalesce(a.vl_unitario,0) vl_unitario_item,
		a.dt_atendimento dt_item,
		null ie_origem_proced,
		a.nr_sequencia,
		a.ie_emite_conta,
		a.cd_convenio,
		d.cd_pessoa_fisica,
		c.cd_estabelecimento
	FROM atendimento_paciente d, material_atend_paciente a, conta_paciente b
LEFT OUTER JOIN nota_fiscal c ON (b.nr_interno_conta = c.nr_interno_conta)
WHERE a.nr_interno_conta = b.nr_interno_conta  and a.nr_atendimento   = d.nr_atendimento and a.qt_material <> 0 and coalesce(b.ie_cancelamento::text, '') = '' and a.dt_atendimento between pkg_date_utils.start_of(dt_inicial_w,'DAY', 0) and pkg_date_utils.end_of(dt_final_w, 'DAY', 0) and ((d.cd_pessoa_fisica = cd_paciente_w) or (cd_paciente_w = '0')) and (nr_atencion_w = '0' 
		or ( (position(',' in nr_atencion_w) = '0') and (ie_atend_lista_w = 'N') and d.nr_atendimento = nr_atencion_w)
		or ((ie_atend_lista_w = 'S') and obter_se_contido_char(d.nr_atendimento,nr_atencion_w) = 'S')
		) and (nr_interno_cuenta_w = '0' 
		or ( (position(',' in nr_interno_cuenta_w) = '0')  and (ie_conta_lista_w = 'N') and b.nr_interno_conta = nr_interno_cuenta_w)
		or ((ie_conta_lista_w = 'S') and obter_se_contido_char(b.nr_interno_conta,nr_interno_cuenta_w) = 'S')	
		) and (nr_factura_w = '0' 
		or ( (position(',' in nr_factura_w) = '0') and (ie_fatura_lista_w = 'N') and c.nr_nota_fiscal = nr_factura_w)
		or ((ie_fatura_lista_w = 'S') and obter_se_contido_char(c.nr_nota_fiscal,nr_factura_w) = 'S')
		) and (cd_convenio_w = '0' 
		or ( (position(',' in cd_convenio_w) = '0')  and (ie_convenio_lista_w = 'N') and b.cd_convenio_parametro = cd_convenio_w)
		or ((ie_convenio_lista_w = 'S') and obter_se_contido_char(b.cd_convenio_parametro,cd_convenio_w) = 'S')
                )
	 ) alias94;

-- Variaveis utilizadas na criação do cursor dinamico
type		fetch_array is table of C01%rowtype;
s_array		fetch_array;
i			integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w	vetor;

/*-----OBSERVAÇÃO-------*/



-- Em caso de alteracao nos selects é importante se atentar ao tamanho das variaveis para

-- nao ocorrer excecao em relacao ao tamanho do buffer. O tamanho das variaveis foi definido

-- com uma folga de +-50%, porem se houverem alteracoes significativas os tamanhos devem ser alterados.
ds_sql					varchar(32767);

ds_sql_select			varchar(400);
ds_sql_from				varchar(4800);
ds_sql_where			varchar(27567);

ds_sql_proc				varchar(2400);

ds_sql_select_proc		varchar(1000);
ds_sql_from_proc		varchar(300);
ds_sql_where_proc		varchar(300);
ds_sql_group_by_proc	varchar(800);

ds_sql_mat				varchar(2400);

ds_sql_select_mat		varchar(1000);
ds_sql_from_mat			varchar(300);
ds_sql_where_mat		varchar(300);
ds_sql_group_by_mat		varchar(800);
			

BEGIN
CALL exec_sql_dinamico('Tasy','Truncate table w_rel_costo_cuenta');
/*delete from w_rel_costo_cuenta where nm_usuario = nm_usuario_p;*/

ds_sql_select	:= 'SELECT	nr_atendimento,
		nr_interno_conta,
		cd_item,
		nvl(qt_item,0) qt_item,
		nvl(vl_item,0) vl_item,
		nvl(vl_unitario_item,0) vl_unitario_item,
		dt_item,
		ie_proc_mat,
		ie_origem_proced,
		nr_sequencia,
		ie_emite_conta,
		cd_convenio,
		cd_pessoa_fisica,
		cd_estabelecimento';

ds_sql_select_proc	:= 'SELECT 1 ie_proc_mat,
                a.nr_atendimento,
                a.nr_interno_conta,
                a.cd_procedimento cd_item,
                a.qt_procedimento qt_item,
                a.vl_procedimento vl_item,
                NULL vl_unitario_item,
                a.dt_procedimento dt_item,
                a.ie_origem_proced,
                a.nr_sequencia,
                a.ie_emite_conta,
                a.cd_convenio,
                max(c.cd_pessoa_fisica)cd_pessoa_fisica,
                max(b.cd_estabelecimento)cd_estabelecimento,                
                max(b.cd_convenio_parametro)cd_convenio_parametro,
                max(b.ie_cancelamento)ie_cancelamento,
                a.nr_seq_proc_pacote';
				
ds_sql_from_proc	:= 'FROM    procedimento_paciente a,
                conta_paciente        b,
                atendimento_paciente  c';
				
ds_sql_where_proc	:= 'WHERE   a.nr_interno_conta = b.nr_interno_conta
        AND     a.nr_atendimento = c.nr_atendimento';

ds_sql_group_by_proc := 'GROUP BY    a.nr_atendimento,
                    a.nr_interno_conta,
                    a.cd_procedimento,
                    a.qt_procedimento,
                    a.vl_procedimento,
                    a.dt_procedimento,
                    a.ie_origem_proced,
                    a.nr_sequencia,
                    a.ie_emite_conta,
                    a.cd_convenio,
                    a.nr_seq_proc_pacote';

ds_sql_select_mat	:= 'SELECT  2 ie_proc_mat,
                a.nr_atendimento,
                a.nr_interno_conta,
                a.cd_material cd_item,
                a.qt_material qt_item,
                a.vl_material vl_item,
                nvl(a.vl_unitario, 0) vl_unitario_item,
                a.dt_atendimento dt_item,
                NULL ie_origem_proced,
                a.nr_sequencia,
                a.ie_emite_conta,
                a.cd_convenio,
                max(c.cd_pessoa_fisica)cd_pessoa_fisica,
                max(b.cd_estabelecimento)cd_estabelecimento,                
                max(b.cd_convenio_parametro)cd_convenio_parametro,
                max(b.ie_cancelamento)ie_cancelamento,
                a.nr_seq_proc_pacote';
				
ds_sql_from_mat		:= 'FROM    material_atend_paciente a,
                conta_paciente          b,
                atendimento_paciente    c';
				
ds_sql_where_mat	:= 'WHERE   a.nr_interno_conta = b.nr_interno_conta
        AND     a.nr_atendimento = c.nr_atendimento';

ds_sql_group_by_mat := 'GROUP BY    a.nr_atendimento,
                    a.nr_interno_conta,
                    a.cd_material,
                    a.qt_material,
                    a.vl_material,
                    a.vl_unitario,
                    a.dt_atendimento,
                    a.nr_sequencia,
                    a.ie_emite_conta,
                    a.cd_convenio,
                    a.nr_seq_proc_pacote';

ds_sql_where	:= 'WHERE	x.qt_item <> 0
AND 	nvl(x.nr_seq_proc_pacote, x.nr_sequencia) = x.nr_sequencia
AND		x.ie_cancelamento is null';

if (dt_inicial_p IS NOT NULL AND dt_inicial_p::text <> '' AND dt_final_p IS NOT NULL AND dt_final_p::text <> '') then
	dt_inicial_w	:= pkg_date_utils.start_of(dt_inicial_p,'DAY');
	dt_final_w	:= pkg_date_utils.end_of(dt_final_p,'DAY');
	
	ds_sql_where	:= ds_sql_where || chr(10)
		|| 'AND		x.dt_item between to_date('||CHR(39)|| to_char(dt_inicial_w, 'dd/mm/yyyy hh24:mi:ss') ||CHR(39)||','||CHR(39)||'dd/mm/yyyy hh24:mi:ss'||CHR(39)||') '
		|| 'AND		to_date('||CHR(39)|| to_char(dt_final_w, 'dd/mm/yyyy hh24:mi:ss') ||CHR(39)||','||CHR(39)||'dd/mm/yyyy hh24:mi:ss'||CHR(39)||')';
end if;


if (coalesce(cd_paciente_p,0) > 0) then
	ds_sql_where	:= ds_sql_where || chr(10)
					|| 'AND		x.cd_pessoa_fisica = ' || cd_paciente_p;
end if;

/*-----TRATAMENTO DE LISTAS DE PARAMETROS DO RELATORIO-------*/



-- Se for informado mais de um valor para os campos que permitem lista, é realizado o 'regexp_substr'

-- para separar os valores de texto e passá-los como lista de parâmetros 'IN' na montagem do select.


-- ATENDIMENTOS
nr_atencion_w := substr(trim(both coalesce(nr_atencion_p,'0')),1,10000);
if (nr_atencion_w <> '0') then	
	ds_sql_where	:= ds_sql_where || chr(10)
					|| 'AND		x.nr_atendimento in ('||nr_atencion_w||')';
end if;

--CONTAS
nr_interno_cuenta_w	:= substr(trim(both coalesce(nr_interno_cuenta_p,'0')),1,10000);
if (nr_interno_cuenta_w <> '0') then			
	ds_sql_where	:= ds_sql_where || chr(10)
					|| 'AND		x.nr_interno_conta in ('||nr_interno_cuenta_w||')';
end if;

--NOTAS FISCAIS (FACTURAS)

-- Se possuir Nota Fiscal (Factura), deve incluir a tabela de nota fiscal no where, caso contrário, não existe a necessidade.
nr_factura_w := substr(trim(both coalesce(nr_factura_p,'0')),1,15000);
if (nr_factura_w <> '0') then
	ds_sql_select_proc	:= ds_sql_select_proc ||','|| chr(10)
						|| 'max(d.nr_nota_fiscal)nr_nota_fiscal';
	ds_sql_from_proc	:= ds_sql_from_proc ||','|| chr(10)
						|| 'nota_fiscal           d';
	ds_sql_where_proc	:= ds_sql_where_proc || chr(10)
						|| 'AND     b.nr_interno_conta = d.nr_interno_conta';
						
	ds_sql_select_mat	:= ds_sql_select_mat ||','|| chr(10)
						|| 'max(d.nr_nota_fiscal)nr_nota_fiscal';
	ds_sql_from_mat		:= ds_sql_from_mat ||','|| chr(10)
						|| 'nota_fiscal           d';
	ds_sql_where_mat	:= ds_sql_where_mat || chr(10)
						|| 'AND     b.nr_interno_conta = d.nr_interno_conta';
						
	ds_sql_where	:= ds_sql_where || chr(10)
					|| 'AND		x.nr_nota_fiscal in ('||nr_factura_w||')';
end if;

--CONVENIOS
cd_convenio_w := substr(trim(both coalesce(cd_convenio_p,'0')),1,4000);
if (cd_convenio_w <> '0') then	
	ds_sql_where	:= ds_sql_where || chr(10)
					|| 'AND		x.cd_convenio_parametro in ('||cd_convenio_w||')';
end if;
/*-----TRATAMENTO DE LISTAS DE PARAMETROS DO RELATORIO-------*/



/*-----TRATAMENTO PARA MONTAR O SELECT-------*/

ds_sql_proc	:= ds_sql_select_proc|| chr(10)
			|| ds_sql_from_proc|| chr(10)
			|| ds_sql_where_proc|| chr(10)
			|| ds_sql_group_by_proc;

ds_sql_mat	:= ds_sql_select_mat|| chr(10)
			|| ds_sql_from_mat|| chr(10)
			|| ds_sql_where_mat|| chr(10)
			|| ds_sql_group_by_mat;

ds_sql_from	:= 'FROM	('||ds_sql_proc|| chr(10)
			||'UNION ALL'|| chr(10)
			|| ds_sql_mat ||') x';

ds_sql		:= ds_sql_select || chr(10)
			|| ds_sql_from || chr(10)
			|| ds_sql_where;
					
/*-----TRATAMENTO PARA MONTAR O SELECT-------*/
	

-- Novo loop para usar o SQL dinâmico. O C01 não é mais utilizado, porém foi mantido seu código para consulta
open ds_cursor for EXECUTE ds_sql;
	loop
	fetch ds_cursor bulk collect into s_array limit 10000;
	vetor_c01_w(i) := s_array;
	i := i + 1;
	EXIT WHEN NOT FOUND; /* apply on ds_cursor */
	end loop;
close ds_cursor;

for i in 1..vetor_c01_w.count loop
	s_array := vetor_c01_w(i);
	for z in 1..s_array.count loop
	begin
		select	obter_semana_ano_dia(s_array[z].dt_item)
		into STRICT	w_rel_costo_cuenta_w.nr_semana
		;
		
		w_rel_costo_cuenta_w.nr_atencion 		:= s_array[z].nr_atendimento;
		w_rel_costo_cuenta_w.nr_interno_cuenta 	:= s_array[z].nr_interno_conta;
		w_rel_costo_cuenta_w.cd_item 			:= s_array[z].cd_item;
		w_rel_costo_cuenta_w.qt_item 			:= s_array[z].qt_item;
		w_rel_costo_cuenta_w.vl_item	 		:= s_array[z].vl_item;
		w_rel_costo_cuenta_w.dt_item	 		:= s_array[z].dt_item;
		w_rel_costo_cuenta_w.cd_convenio		:= s_array[z].cd_convenio;
		w_rel_costo_cuenta_w.cd_paciente		:= s_array[z].cd_pessoa_fisica;
		w_rel_costo_cuenta_w.nm_usuario 		:= nm_usuario_p;
		w_rel_costo_cuenta_w.nr_seq_item 		:= s_array[z].nr_sequencia;
		w_rel_costo_cuenta_w.ie_proc_mat 		:= s_array[z].ie_proc_mat;
		
		if (s_array[z].ie_proc_mat = 1) then /*PROCEDIMENTO*/
			begin
			
			select	ds_procedimento,
					cd_grupo_proc
			into STRICT	w_rel_costo_cuenta_w.ds_item,
					cd_grupo_proc_w
			from	procedimento
			where	cd_procedimento		= s_array[z].cd_item
			and		ie_origem_proced	= s_array[z].ie_origem_proced;
			
			select	ds_grupo_proc
			into STRICT	w_rel_costo_cuenta_w.ds_clase
			from	grupo_proc
			where	cd_grupo_proc = cd_grupo_proc_w;
			
			select	coalesce(mx_obter_valor_estado_conta(s_array[z].nr_interno_conta,s_array[z].nr_sequencia,null,s_array[z].ie_emite_conta,'D'),0) vl_descuento,
					coalesce(obter_valor_deducao_item(s_array[z].nr_sequencia,null),0) vl_deducible
				  --nvl(obter_valor_imposto_item(s_array(z).nr_interno_conta,'3'),0) vl_impuesto
			into STRICT	w_rel_costo_cuenta_w.vl_descuento,
					w_rel_costo_cuenta_w.vl_deducible
				  --w_rel_costo_cuenta_w.vl_impuesto,
			;
			
			w_rel_costo_cuenta_w.vl_costo_medio	 	:= 0;
			
			/*vl item original (valor unitario original)*/

			w_rel_costo_cuenta_w.vl_item_original 	:=  coalesce(obter_vl_item_conta_original(s_array[z].nr_sequencia, null),0);
			if ( w_rel_costo_cuenta_w.vl_item_original = 0) then
				w_rel_costo_cuenta_w.vl_item_original := dividir(s_array[z].vl_item, s_array[z].qt_item);
			end if;
			
			/*importe (qt_item * vl item_original)*/


			/*impuesto (imposto gerado para o item)*/

			SELECT 	coalesce(SUM(x.vl_imposto),0)
			INTO STRICT	w_rel_costo_cuenta_w.vl_impuesto
			FROM 	propaci_imposto x
			WHERE 	x.nr_seq_propaci = s_array[z].nr_sequencia;
			
			/*precio total (valor do item na conta + imposto)*/

			w_rel_costo_cuenta_w.vl_precio_total 	:= w_rel_costo_cuenta_w.vl_item + w_rel_costo_cuenta_w.vl_impuesto;
			
			/*imposto da factura somente nos totais do estado de cuenta,entao nao vou tratar aqui*/

			
			end;		
		elsif (s_array[z].ie_proc_mat = 2) then /*MATERIAL*/
			begin
			
			select	ds_material,
					cd_classe_material,
					ie_consignado
			into STRICT	w_rel_costo_cuenta_w.ds_item,
					cd_classe_material_w,
					ie_consignado_w
			from	material
			where	cd_material = s_array[z].cd_item;
			
			select	ds_classe_material
			into STRICT	w_rel_costo_cuenta_w.ds_clase
			from	classe_material
			where	cd_classe_material = cd_classe_material_w;
			
			select	coalesce(mx_obter_valor_estado_conta(s_array[z].nr_interno_conta,null,s_array[z].nr_sequencia,s_array[z].ie_emite_conta,'D'),0) vl_descuento,
				coalesce(obter_valor_deducao_item(null,s_array[z].nr_sequencia),0) vl_deducible,
				--nvl(obter_valor_imposto_item(s_array(z).nr_interno_conta,'3'),0) vl_impuesto,
				coalesce(obter_custo_medio_material(s_array[z].cd_estabelecimento, trunc(s_array[z].dt_item,'mm'),s_array[z].cd_item,ie_consignado_w),0) vl_costo_medio
			into STRICT	w_rel_costo_cuenta_w.vl_descuento,
				w_rel_costo_cuenta_w.vl_deducible,
				--w_rel_costo_cuenta_w.vl_impuesto,
				w_rel_costo_cuenta_w.vl_costo_medio
			;
					
			/*vl item original (valor unitario original)*/

			w_rel_costo_cuenta_w.vl_item_original 	:=  coalesce(obter_vl_item_conta_original(null, s_array[z].nr_sequencia),0);
			if ( w_rel_costo_cuenta_w.vl_item_original = 0) then
				w_rel_costo_cuenta_w.vl_item_original := s_array[z].vl_unitario_item;
			end if;
			
			/*importe (qt_item * vl item_original)*/


			/*impuesto (imposto gerado para o item)*/

			SELECT 	coalesce(SUM(x.vl_imposto),0)
			INTO STRICT	w_rel_costo_cuenta_w.vl_impuesto
			FROM 	matpaci_imposto x
			WHERE 	x.nr_seq_matpaci = s_array[z].nr_sequencia;
			
			/*precio total (valor do item na conta + imposto)*/

			w_rel_costo_cuenta_w.vl_precio_total 	:= w_rel_costo_cuenta_w.vl_item + w_rel_costo_cuenta_w.vl_impuesto;		
			
			/*imposto da factura somente nos totais do estado de cuenta,entao nao vou tratar aqui*/
		
			end;
		end if;
		
		insert into w_rel_costo_cuenta values (w_rel_costo_cuenta_w.*);
	end;
	end loop;
	commit;
end loop;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_rel_costo_cuentas ( dt_inicial_p timestamp, dt_final_p timestamp, nr_atencion_p text, nr_interno_cuenta_p text, nr_factura_p text, cd_paciente_p text, nm_usuario_p text, cd_convenio_p text) FROM PUBLIC;

