-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE rc_proc AS (nr_seq_apre_w			bigint, 
				dt_proce_w			timestamp, 
				dt_entrada_w			timestamp, 
				dt_alta_w			timestamp, 
				cd_edicao_amb_w			varchar(10), 
				cd_proc_w			varchar(255), 
				ds_proc_w			varchar(255), 
				qt_proc_w			double precision, 
				ie_via_aces_w			varchar(10), 
				ie_tecn_util_w			varchar(40), 
				vl_red_acresc_w			double precision, 
				vl_unit_w			double precision, 
				vl_proc_w			double precision);
CREATE TYPE rc_prof AS (nr_seq_aprese_w		bigint, 
				nr_grau_part_w			pls_proc_participante.nr_seq_grau_partic%type, 
				nm_contratado_w			varchar(255), 
				nr_seq_conselho_w		pls_proc_participante.nr_seq_conselho%type, 
				sg_conselho_w			varchar(255), 
				uf_crm_w			medico.uf_crm%type, 
				cd_cbo_saude_w			cbo_saude.cd_cbo%type, 
				nr_cpf_w			pessoa_fisica.nr_cpf%type);


CREATE OR REPLACE PROCEDURE pls_tiss_gerar_w_guia_hono (nr_seq_conta_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade:  Gerar o relatório de Conta Guia de Honorários. 
---------------------------------------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[X] Objetos do dicionário [ x ] Tasy (Delphi/Java) [ x ] Portal [ ] Relatórios [ ] Outros: 
 ---------------------------------------------------------------------------------------------------------------------------------------------------- 
Pontos de atenção: Cuidado ao alterar os processos feitos para geração de informação para completar as guias 
	      geradas e com a alteração dos valores das variáveis utilizadas para realização desse processo. 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/ 
 
--Procedimentos 
--Profissionais Executantes 
	 
type 	tb_proc is table of rc_proc index by integer;

type 	tb_prof is table of rc_prof index by integer;

tb_proc_w	tb_proc;
tb_prof_w	tb_prof;
--Procedimentos 
dt_procedimento_w			timestamp;
dt_entrada_w				timestamp;
dt_alta_w				timestamp;
cd_edicao_amb_w				varchar(10);
cd_procedimento_w			varchar(255);
ds_procedimento_w			varchar(255);
qt_procedimento_w			double precision;
ie_via_acesso_w				varchar(10);
ie_tecnica_utilizada_w			varchar(40);
vl_reducao_acrescimo_w			double precision;
vl_unitario_w				double precision;
vl_procedimento_w			double precision;

--Médico 
nr_grau_part_w				varchar(10);
nm_contratado_w				varchar(255);
nr_seq_conselho_w			varchar(20);
sg_conselho_w				varchar(15);
uf_crm_w				medico.uf_crm%type;
cd_cbo_saude_w				varchar(255);
nr_cpf_w				varchar(20);

nr_seq_apresentacao_w			bigint;
nr_seq_conta_proc_w			bigint;
nr_seq_tiss_guia_w			bigint;
cd_guia_prestador_w			varchar(20);
sg_conselho_imp_w			varchar(2);
nr_guia_w				bigint;
nr_seq_participante_w			bigint;

--Variáveis de Controle 
qt_pag_guia_w				integer;
qt_guias_proc_w				integer;
qt_guias_prof_w				integer;
nr_proc_w				integer;
nr_prof_w				integer;
ct_proc_w				integer;
ct_prof_w				integer;
qt_pag_proc_w				integer;
qt_pag_prof_w				integer;
qt_pagina_guia_w			integer;
ct_insere_partic_w			integer;

 
c01 CURSOR FOR 	--Procedimentos 
	SELECT	a.dt_procedimento, 
		a.dt_inicio_proc, 
		a.dt_fim_proc, 
		substr(pls_obter_cod_tabela_tiss(a.cd_procedimento, a.ie_origem_proced, null) ,1,2) cd_tabela, 
		substr(a.cd_procedimento,1,10), 
		substr(obter_descricao_procedimento(a.cd_procedimento,a.ie_origem_proced),1,150), 
		a.qt_procedimento, 
		a.ie_via_acesso, 
		a.ie_tecnica_utilizada, 
		substr((SELECT	max(c.tx_reducao_acrescimo) 
			from	pls_conta b, 
				pls_conta_mat c 
			where	b.nr_sequencia = nr_seq_conta_p 
			and		c.nr_seq_conta = b.nr_sequencia), 1, 4), 
		a.vl_unitario_imp, --a.vl_proc_unitario, 
		a.vl_procedimento_imp, --a.vl_total_procedimento, 
		a.nr_sequencia 
	from	pls_conta_proc a, 
		pls_conta b 
	where	a.nr_seq_conta = b.nr_sequencia 
	and	b.nr_sequencia = nr_seq_conta_p;
	
c02 CURSOR FOR 	--Profissional Executante 
	SELECT (SELECT max(cd_tiss) from pls_grau_participacao where nr_sequencia = b.nr_seq_grau_partic), 
		substr(obter_nome_pf(b.cd_medico),1,255 )nm_medico, 
		(select	max(nr_crm) from medico where cd_pessoa_fisica = b.cd_medico), 
		CASE WHEN obter_dados_medico(b.cd_medico,'SGCRM')='CRM' THEN '06' WHEN obter_dados_medico(b.cd_medico,'SGCRM')='CRN' THEN '07' WHEN obter_dados_medico(b.cd_medico,'SGCRM')='CRO' THEN '08' WHEN obter_dados_medico(b.cd_medico,'SGCRM')='CREFITO' THEN '05'  ELSE '10' END , 
		b.uf_conselho, 
		(select max(cd_cbo) from cbo_saude where nr_sequencia = b.nr_seq_cbo_saude), 
		(select max(nr_cpf) from pessoa_fisica where cd_pessoa_fisica = b.cd_medico) nr_cpf	 
	from  pls_proc_participante b 
	where  b.nr_seq_conta_proc = nr_seq_conta_proc_w;

BEGIN 
 
delete	from w_tiss_proc_partic 
where	nm_usuario		= nm_usuario_p;
 
delete	from w_tiss_contratado_solic 
where	nm_usuario		= nm_usuario_p;
 
delete from w_tiss_guia 
where	nm_usuario		= nm_usuario_p;
 
commit;
 
if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then 
	select max(cd_guia_prestador) 
	into STRICT	cd_guia_prestador_w 
	from 	pls_conta 
	where  nr_sequencia = nr_seq_conta_p;
	--Inicia as variáveis 
	nr_seq_apresentacao_w := 0;
	qt_pag_guia_w := 0;
	qt_guias_proc_w := 0;
	qt_guias_prof_w := 0;
	nr_proc_w := 0;
	nr_prof_w := 0;
	ct_proc_w := 0;
	ct_prof_w := 0;
	qt_pag_proc_w := 0;
	qt_pag_prof_w := 0;
	qt_pagina_guia_w := 1;
	ct_insere_partic_w := 1;
 
	open c01;
	loop 
	fetch c01 into	--Procedimentos 
			dt_procedimento_w, 
			dt_entrada_w, 
			dt_alta_w, 
			cd_edicao_amb_w, 
			cd_procedimento_w, 
			ds_procedimento_w, 
			qt_procedimento_w, 
			ie_via_acesso_w, 
			ie_tecnica_utilizada_w, 
			vl_reducao_acrescimo_w, 
			vl_unitario_w, 
			vl_procedimento_w, 
			nr_seq_conta_proc_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */		
 
		nr_seq_apresentacao_w := nr_seq_apresentacao_w + 1;
		nr_proc_w := nr_proc_w + 1;
		ct_proc_w := ct_proc_w + 1;
		--Insere as informações do cursor(C01) de procedimentos no record. 
		tb_proc_w[nr_proc_w].nr_seq_apre_w	:= nr_seq_apresentacao_w;
		tb_proc_w[nr_proc_w].dt_proce_w		:= dt_procedimento_w;
		tb_proc_w[nr_proc_w].dt_entrada_w	:= dt_entrada_w;
		tb_proc_w[nr_proc_w].dt_alta_w		:= dt_alta_w;
		tb_proc_w[nr_proc_w].cd_edicao_amb_w	:= cd_edicao_amb_w;
		tb_proc_w[nr_proc_w].cd_proc_w		:= cd_procedimento_w;
		tb_proc_w[nr_proc_w].ds_proc_w		:= ds_procedimento_w;
		tb_proc_w[nr_proc_w].qt_proc_w		:= qt_procedimento_w;
		tb_proc_w[nr_proc_w].ie_via_aces_w	:= ie_via_acesso_w;
		tb_proc_w[nr_proc_w].ie_tecn_util_w	:= ie_tecnica_utilizada_w;
		tb_proc_w[nr_proc_w].vl_red_acresc_w	:= vl_reducao_acrescimo_w;
		tb_proc_w[nr_proc_w].vl_unit_w		:= vl_unitario_w;
		tb_proc_w[nr_proc_w].vl_proc_w		:= vl_procedimento_w;
		--Conta a quantidade de guias que devem ser geradas para os procedimentos. 
		if ( ct_proc_w = 10 ) then 
			ct_proc_w := 0;
			qt_guias_proc_w := qt_guias_proc_w + 1;
		end if;
 
		open c02;
		loop 
		fetch c02 into	--Profissional Executante 
				nr_grau_part_w, 
				nm_contratado_w, 
				nr_seq_conselho_w, 
				sg_conselho_w, 
				uf_crm_w, 
				cd_cbo_saude_w, 
				nr_cpf_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */	
 
			nr_prof_w := nr_prof_w + 1;
			ct_prof_w := ct_prof_w + 1;
			--Insere as informações do cursor(C02) de profissionais no record. 
			tb_prof_w[nr_prof_w].nr_seq_aprese_w	:= tb_proc_w[nr_proc_w].nr_seq_apre_w;
			tb_prof_w[nr_prof_w].nr_grau_part_w	:= nr_grau_part_w;
			tb_prof_w[nr_prof_w].nm_contratado_w	:= nm_contratado_w;
			tb_prof_w[nr_prof_w].nr_seq_conselho_w	:= nr_seq_conselho_w;
			tb_prof_w[nr_prof_w].sg_conselho_w	:= sg_conselho_w;
			tb_prof_w[nr_prof_w].uf_crm_w		:= uf_crm_w;
			tb_prof_w[nr_prof_w].cd_cbo_saude_w	:= cd_cbo_saude_w;
			tb_prof_w[nr_prof_w].nr_cpf_w		:= nr_cpf_w;
			--Conta a quantidade de guias que devem ser geradas para os profissionais. 
			if ( ct_prof_w = 4 ) then 
				ct_prof_w := 0;
				qt_guias_prof_w := qt_guias_prof_w + 1;
			end if;
 
		end loop;
		close c02;
 
	end loop;
	close c01;
	--Verifica se a ultima guia possui 10 procedimentos, caso não possua será gerado os procedimentos faltantes em branco até completar a página. 
	if ( ct_proc_w < 10 ) then	 
		ct_proc_w := ct_proc_w + 1;
		for x in 1..10 loop 
			begin 
				if ( x = ct_proc_w ) then 
					nr_proc_w := nr_proc_w + 1;
					nr_seq_apresentacao_w := nr_seq_apresentacao_w + 1;
					tb_proc_w[nr_proc_w].nr_seq_apre_w	:= nr_seq_apresentacao_w;
					tb_proc_w[nr_proc_w].dt_proce_w		:= null;
					tb_proc_w[nr_proc_w].dt_entrada_w	:= null;
					tb_proc_w[nr_proc_w].dt_alta_w		:= null;
					tb_proc_w[nr_proc_w].cd_edicao_amb_w	:= '';
					tb_proc_w[nr_proc_w].cd_proc_w		:= '';
					tb_proc_w[nr_proc_w].ds_proc_w		:= '';
					tb_proc_w[nr_proc_w].qt_proc_w		:= '';
					tb_proc_w[nr_proc_w].ie_via_aces_w	:= '';
					tb_proc_w[nr_proc_w].ie_tecn_util_w	:= '';
					tb_proc_w[nr_proc_w].vl_red_acresc_w	:= null;
					tb_proc_w[nr_proc_w].vl_unit_w		:= null;
					tb_proc_w[nr_proc_w].vl_proc_w		:= null;
					ct_proc_w := ct_proc_w + 1;
				end if;
			end;
		end loop;
		qt_guias_proc_w := qt_guias_proc_w + 1;
	end if;
	--Verifica se a ultima guia possui 4 profissionais, caso não possua será gerado os profissionais faltantes em branco até completar a página. 
	if ( ct_prof_w < 4 ) then	 
		ct_prof_w := ct_prof_w + 1;
		for y in 1..4 loop 
			begin 
				if ( y = ct_prof_w ) then 
					nr_prof_w := nr_prof_w + 1;
					tb_prof_w[nr_prof_w].nr_seq_aprese_w	:= '';
					tb_prof_w[nr_prof_w].nr_grau_part_w	:= '';
					tb_prof_w[nr_prof_w].nm_contratado_w	:= '';
					tb_prof_w[nr_prof_w].nr_seq_conselho_w	:= '';
					tb_prof_w[nr_prof_w].sg_conselho_w	:= '';
					tb_prof_w[nr_prof_w].uf_crm_w		:= '';
					tb_prof_w[nr_prof_w].cd_cbo_saude_w	:= '';
					tb_prof_w[nr_prof_w].nr_cpf_w		:= '';
					ct_prof_w := ct_prof_w + 1;
				end if;
			end;
		end loop;
		qt_guias_prof_w := qt_guias_prof_w + 1;
	end if;
	--Verifica a quantidade de páginas faltantes de procedimentos em comparação a quantidade de paginas geradas para profissionais. 
	qt_pag_proc_w := qt_guias_prof_w - qt_guias_proc_w;
	--Caso a quantidade de guias geradas para profissionais for maior que a quantidade gerada para os procedimentos, as paginas serão preenchidas com os campos em branco. 
	if ( qt_pag_proc_w > 0 ) then	 
		for x in 1..( qt_pag_proc_w * 10 ) loop 
			begin 
				nr_proc_w := nr_proc_w + 1;
				nr_seq_apresentacao_w := nr_seq_apresentacao_w + 1;
				tb_proc_w[nr_proc_w].nr_seq_apre_w	:= nr_seq_apresentacao_w;
				tb_proc_w[nr_proc_w].dt_proce_w		:= null;
				tb_proc_w[nr_proc_w].dt_entrada_w	:= null;
				tb_proc_w[nr_proc_w].dt_alta_w		:= null;
				tb_proc_w[nr_proc_w].cd_edicao_amb_w	:= '';
				tb_proc_w[nr_proc_w].cd_proc_w		:= '';
				tb_proc_w[nr_proc_w].ds_proc_w		:= '';
				tb_proc_w[nr_proc_w].qt_proc_w		:= '';
				tb_proc_w[nr_proc_w].ie_via_aces_w	:= '';
				tb_proc_w[nr_proc_w].ie_tecn_util_w	:= '';
				tb_proc_w[nr_proc_w].vl_red_acresc_w	:= null;
				tb_proc_w[nr_proc_w].vl_unit_w		:= null;
				tb_proc_w[nr_proc_w].vl_proc_w		:= null;
			end;
		end loop;
	end if;
	--Verifica a quantidade de páginas faltantes de profissionais em comparação a quantidade de paginas geradas para procedimentos. 
	qt_pag_prof_w := qt_guias_proc_w - qt_guias_prof_w;
	--Caso a quantidade de guias geradas para procedimentos for maior que a quantidade gerada para os profissionais, as paginas serão preenchidas com os campos em branco. 
	if ( qt_pag_prof_w > 0 ) then	 
		for y in 1..( qt_pag_prof_w * 4 ) loop 
			begin 
				nr_prof_w := nr_prof_w + 1;
				tb_prof_w[nr_prof_w].nr_seq_aprese_w	:= '';
				tb_prof_w[nr_prof_w].nr_grau_part_w	:= '';
				tb_prof_w[nr_prof_w].nm_contratado_w	:= '';
				tb_prof_w[nr_prof_w].nr_seq_conselho_w	:= '';
				tb_prof_w[nr_prof_w].sg_conselho_w	:= '';
				tb_prof_w[nr_prof_w].uf_crm_w		:= '';
				tb_prof_w[nr_prof_w].cd_cbo_saude_w	:= '';
				tb_prof_w[nr_prof_w].nr_cpf_w		:= '';
			end;
		end loop;
	end if;
	--Insere os registros de procedimentos na tabela temporária. 
	for i in 1.. tb_proc_w.count loop 
	begin 
		--Gera uma nova guia a cada 10 procedimentos e 4 profissionais inseridos nas tabelas temporárias. 
		qt_pag_guia_w := qt_pag_guia_w + 1;
		if ( qt_pag_guia_w = 1 ) then 
			select	nextval('w_tiss_guia_seq') 
			into STRICT	nr_seq_tiss_guia_w 
			;
			 
			insert	into w_tiss_guia(nr_sequencia, dt_atualizacao, nm_usuario, 
				nr_seq_conta_guia, nr_guia_prestador) 
			values (nr_seq_tiss_guia_w, clock_timestamp(), nm_usuario_p, 
				nr_seq_conta_p, cd_guia_prestador_w);
		end if;
 
		insert into w_tiss_proc_paciente(nr_sequencia, dt_atualizacao, nm_usuario, 
			nr_seq_apresentacao, dt_procedimento, dt_entrada, 
			dt_alta, cd_edicao_amb, cd_procedimento, 
			ds_procedimento, qt_procedimento, ie_via_acesso, 
			ie_tecnica_utilizada, vl_reducao_acrescimo, vl_unitario, 
			vl_procedimento, nr_seq_conta, nr_seq_guia) 
		values (nextval('w_tiss_proc_paciente_seq'), clock_timestamp(), nm_usuario_p, 
			tb_proc_w[i].nr_seq_apre_w, tb_proc_w[i].dt_proce_w, tb_proc_w[i].dt_entrada_w, 
			tb_proc_w[i].dt_alta_w, tb_proc_w[i].cd_edicao_amb_w, tb_proc_w[i].cd_proc_w, 
			tb_proc_w[i].ds_proc_w, tb_proc_w[i].qt_proc_w, tb_proc_w[i].ie_via_aces_w, 
			tb_proc_w[i].ie_tecn_util_w, tb_proc_w[i].vl_red_acresc_w, tb_proc_w[i].vl_unit_w, 
			tb_proc_w[i].vl_proc_w, nr_seq_conta_p, nr_seq_tiss_guia_w);
		--Insere os registros de profissionais na tabela temporária. 
		if ( qt_pag_guia_w = 10 ) then 
			begin 
				qt_pagina_guia_w := qt_pagina_guia_w + 4;
				while( ct_insere_partic_w < qt_pagina_guia_w ) loop 
					begin 
						insert	into	w_tiss_proc_partic(nr_sequencia , nr_seq_guia, nm_usuario, 
							dt_atualizacao, sg_conselho, nr_crm, 
							uf_crm, cd_cbos, nm_pessoa_fisica, 
							nr_cpf, nr_seq_apresentacao, ie_funcao_medico) 
						values (nextval('w_tiss_proc_partic_seq'), nr_seq_tiss_guia_w, nm_usuario_p, 
							clock_timestamp(), tb_prof_w[ct_insere_partic_w].sg_conselho_w, tb_prof_w[ct_insere_partic_w].nr_seq_conselho_w, 
							tb_prof_w[ct_insere_partic_w].uf_crm_w, tb_prof_w[ct_insere_partic_w].cd_cbo_saude_w, tb_prof_w[ct_insere_partic_w].nm_contratado_w, 
							tb_prof_w[ct_insere_partic_w].nr_cpf_w, tb_prof_w[ct_insere_partic_w].nr_seq_aprese_w, tb_prof_w[ct_insere_partic_w].nr_grau_part_w);
					end;
					ct_insere_partic_w := ct_insere_partic_w + 1;
				end loop;
			qt_pag_guia_w := 0;
			end;
		end if;
	end;
	end loop;
 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_tiss_gerar_w_guia_hono (nr_seq_conta_p bigint, nm_usuario_p text) FROM PUBLIC;

