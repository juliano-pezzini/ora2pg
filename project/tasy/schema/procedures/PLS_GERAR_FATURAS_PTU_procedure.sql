-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_faturas_ptu ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, nr_seq_fatura_p pls_fatura.nr_sequencia%type, ie_commit_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					
cd_unimed_origem_w		pls_congenere.cd_cooperativa%type;
cd_cooperativa_w		varchar(10) := null;
ds_caminho_arquivo_w		pls_regra_arquivo_fatura.ds_caminho_arquivo%type;
ie_tipo_arquivo_w		pls_regra_arquivo_fatura.ie_tipo_arquivo%type;
cd_interface_w			pls_regra_arquivo_fatura.cd_interface%type;
ie_compactar_w			pls_regra_arquivo_fatura.ie_compactar%type;
nr_seq_esquema_xml_w		pls_regra_arquivo_fatura.nr_seq_esquema_xml%type;
nm_arquivo_w			pls_regra_arquivo_fatura.nm_arquivo%type;
nr_seq_regra_w			pls_regra_arquivo_fatura.nr_sequencia%type;
ds_mascara_w			pls_regra_arquivo_fatura.nm_mascara_arquivo%type;
ds_mascara_zip_w		pls_regra_arquivo_fatura.nm_mascara_arquivo_zip%type;
ds_mascara_arq_adic_w		pls_regra_arquivo_fatura.nm_mascara_arquivo_adic%type;
ds_interface_w			pls_regra_arquivo_fatura.ds_interface%type;
ie_tipo_compactar_w		pls_regra_arquivo_fatura.ie_tipo_compactar%type;
nr_seq_congenere_w		pls_congenere.nr_sequencia%type;
cd_versao_w			varchar(255);
nr_versao_transacao_w		varchar(255);
nr_versao_xml_w			varchar(255);
dt_emissao_w			pls_lote_faturamento.dt_emissao%type;
dt_mesano_referencia_w		smallint;
dt_emissao_fat_w		pls_fatura.dt_emissao%type;
ie_tipo_contrato_w		pls_intercambio.ie_tipo_contrato%type;
cd_cgc_w			pessoa_juridica.cd_cgc%type;
nr_titulo_w			titulo_receber.nr_titulo%type;
nr_titulo_ndc_w			titulo_receber.nr_titulo%type;
ie_gerar_tit_ptu_w		varchar(1);
dt_vencimento_w			pls_fatura.dt_vencimento%type;
dt_vencimento_ndc_w		pls_fatura.dt_vencimento_ndc%type;
nr_seq_acao_w			pls_processo_interc_acao.nr_sequencia%type;
vl_tributo_ir_w			pls_fatura_trib.vl_tributo%type := 0;
ie_classif_cobranca_w		varchar(1) := '1';
tp_documento_1_w		ptu_fatura.tp_documento_1%type;
tp_documento_2_w		ptu_fatura.tp_documento_2%type;
dt_emissao_ndc_w		pls_fatura.dt_emissao%type;
doc_fiscal_1_w			ptu_fatura.doc_fiscal_1%type;
doc_fiscal_2_w			ptu_fatura.doc_fiscal_2%type;
nr_seq_fatura_w			ptu_fatura.nr_sequencia%type;
vl_ndr_w			pls_fatura.vl_total_ndc%type;
vl_fatura_w			pls_fatura.vl_fatura%type;
qt_cobrancas_w			integer;
qt_cobr_rrs_w			integer;
nr_documento_1_w		ptu_fatura.nr_fatura%type;
nr_documento_2_w		ptu_fatura.nr_nota_credito_debito%type;
nr_nfe_imp_1_w			nota_fiscal.nr_nfe_imp%type;
nr_nfe_imp_2_w			nota_fiscal.nr_nfe_imp%type;
ds_link_nfe_1_w			nota_fiscal.ds_link_rps%type;
ds_link_nfe_2_w			nota_fiscal.ds_link_rps%type;
qt_reg_exce_w			integer;
nr_nota_fiscal_w		ptu_nota_fiscal.nr_nota_fiscal%type;
nr_nota_fiscal_doc2_w		ptu_nota_fiscal.nr_nota_fiscal_doc2%type;
qt_cobr_rrs_reem_w		integer;
qt_cobr_rrs_sus_w		integer;
ie_fatura_taxa_w		pls_fatura.ie_fatura_taxa%type;
ie_tipo_cobranca_fatura_w	ptu_fatura.ie_tipo_cobranca_fatura%type;
ie_tipo_exportacao_w      	ptu_fatura.ie_tipo_exportacao%type;

c01 CURSOR(	nr_seq_lote_pc		pls_lote_faturamento.nr_sequencia%type,
		nr_seq_fatura_pc	pls_fatura.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_fatura,
		nr_titulo,
		dt_vencimento,
		nr_seq_lote,
		nr_seq_congenere,
		dt_vencimento_ndc,
		nr_titulo_ndc,
		nr_seq_pagador,
		dt_emissao dt_emissao_fat,
		trim(both substr(pls_obter_dados_pls_fatura(nr_sequencia,'NFE'),1,30)) nr_nfe_imp_1,
		trim(both substr(pls_obter_dados_pls_fatura(nr_sequencia,'NFNE'),1,30)) nr_nfe_imp_2,
		trim(both substr(pls_obter_dados_pls_fatura(nr_sequencia,'DL'),1,255)) ds_link_nfe_1,
		trim(both substr(pls_obter_dados_pls_fatura(nr_sequencia,'DLC'),1,255)) ds_link_nfe_2,
		coalesce(ie_fatura_taxa,'N') ie_fatura_taxa,
		coalesce(ie_remido,'N') ie_remido
	from	pls_fatura
	where	nr_seq_lote = nr_seq_lote_pc
	and	((nr_seq_congenere IS NOT NULL AND nr_seq_congenere::text <> '') or (coalesce(nr_seq_congenere::text, '') = '' and ie_remido = 'S'))
	and	coalesce(ie_cancelamento::text, '') = ''
	and	coalesce(dt_geracao_ptu::text, '') = ''
	and	coalesce(ie_impedimento_cobranca, 'F') <> 'NF'
	and	coalesce(ie_fatura_taxa, 'N')	= 'N'
	
union

	SELECT	nr_sequencia nr_seq_fatura,
		nr_titulo,
		dt_vencimento,
		nr_seq_lote,
		nr_seq_congenere,
		dt_vencimento_ndc,
		nr_titulo_ndc,
		nr_seq_pagador,
		dt_emissao dt_emissao_fat,
		trim(both substr(pls_obter_dados_pls_fatura(nr_sequencia,'NFE'),1,30)) nr_nfe_imp_1,
		trim(both substr(pls_obter_dados_pls_fatura(nr_sequencia,'NFNE'),1,30)) nr_nfe_imp_2,
		trim(both substr(pls_obter_dados_pls_fatura(nr_sequencia,'DL'),1,255)) ds_link_nfe_1,
		trim(both substr(pls_obter_dados_pls_fatura(nr_sequencia,'DLC'),1,255)) ds_link_nfe_2,
		coalesce(ie_fatura_taxa,'N') ie_fatura_taxa,
		coalesce(ie_remido,'N') ie_remido
	from	pls_fatura
	where	nr_sequencia = nr_seq_fatura_pc
	and	((nr_seq_congenere IS NOT NULL AND nr_seq_congenere::text <> '') or (coalesce(nr_seq_congenere::text, '') = '' and ie_remido = 'S'))
	and	coalesce(ie_cancelamento::text, '') = ''
	and	coalesce(dt_geracao_ptu::text, '') = ''
	and	coalesce(ie_impedimento_cobranca, 'F') <> 'NF';
	
BEGIN

cd_unimed_origem_w := pls_obter_unimed_estab(cd_estabelecimento_p);

if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then

	select 	coalesce(max(ie_tipo_lote),'C')
	into STRICT	ie_tipo_cobranca_fatura_w
	from 	pls_lote_faturamento
	where	nr_sequencia =	nr_seq_lote_p;
else
	select 	coalesce(max(a.ie_tipo_lote),'C')
	into STRICT	ie_tipo_cobranca_fatura_w
	from 	pls_lote_faturamento	a,
		pls_fatura		b
	where	b.nr_seq_lote		= a.nr_sequencia
	and	b.nr_sequencia		= nr_seq_fatura_p;
end if;

if (cd_unimed_origem_w IS NOT NULL AND cd_unimed_origem_w::text <> '') then
	for r_c01_w in c01( nr_seq_lote_p, nr_seq_fatura_p ) loop
		
		nr_documento_1_w	:= null;
		nr_documento_2_w	:= null;
		nr_titulo_w		:= r_c01_w.nr_titulo;
		nr_titulo_ndc_w		:= r_c01_w.nr_titulo_ndc;
		dt_emissao_fat_w	:= r_c01_w.dt_emissao_fat;
		dt_vencimento_w		:= r_c01_w.dt_vencimento;
		dt_vencimento_ndc_w	:= r_c01_w.dt_vencimento_ndc;
		nr_nfe_imp_1_w		:= r_c01_w.nr_nfe_imp_1;
		nr_nfe_imp_2_w		:= r_c01_w.nr_nfe_imp_2;
		ds_link_nfe_1_w		:= r_c01_w.ds_link_nfe_1;
		ds_link_nfe_2_w		:= r_c01_w.ds_link_nfe_2;
		qt_cobr_rrs_w		:= null;
		ie_fatura_taxa_w	:= r_c01_w.ie_fatura_taxa;
	
		-- Gerar itens do pacote
		CALL pls_gerar_conta_pos_pac_fat(r_c01_w.nr_seq_fatura, null, 'N', cd_estabelecimento_p, nm_usuario_p);
		
		-- Obter interface
		SELECT * FROM pls_obter_caminho_arquivo_fat(	r_c01_w.nr_seq_fatura, null, 'A500', nm_usuario_p, ds_caminho_arquivo_w, ie_tipo_arquivo_w, cd_interface_w, ie_compactar_w, nr_seq_esquema_xml_w, nm_arquivo_w, nr_seq_regra_w, ds_mascara_w, ds_mascara_zip_w, ds_interface_w, ie_tipo_compactar_w, ds_mascara_arq_adic_w) INTO STRICT ds_caminho_arquivo_w, ie_tipo_arquivo_w, cd_interface_w, ie_compactar_w, nr_seq_esquema_xml_w, nm_arquivo_w, nr_seq_regra_w, ds_mascara_w, ds_mascara_zip_w, ds_interface_w, ie_tipo_compactar_w, ds_mascara_arq_adic_w;
						
		cd_interface_w := null; -- OS 1988871 JTRINDADE - Conversado com Vagner e a partir da data de hoje 28/10/2019 o CD_INTERFACE precisa vir direto da Gestao de Operadoras.
		cd_interface_w := pls_obter_interf_ptu(cd_estabelecimento_p, r_c01_w.nr_seq_congenere, clock_timestamp(), 'A500');

		select	ptu_obter_versao('A500', cd_interface_w)
		into STRICT	cd_versao_w
		;
		
		nr_versao_transacao_w := ptu_obter_versao_transacao('A500', cd_versao_w);
		nr_versao_xml_w := ptu_batch_xml_pck.obter_versao_transacao( cd_estabelecimento_p, r_c01_w.nr_seq_congenere, null, clock_timestamp(), 'A500');
		
		if (nr_versao_xml_w IS NOT NULL AND nr_versao_xml_w::text <> '') then
			nr_versao_transacao_w := nr_versao_xml_w;
		end if;
		
		select	max(dt_emissao),
			max((to_char(dt_mesano_referencia, 'yymm'))::numeric )
		into STRICT	dt_emissao_w,
			dt_mesano_referencia_w
		from	pls_lote_faturamento
		where	nr_sequencia = r_c01_w.nr_seq_lote;
		
		dt_emissao_fat_w := trunc(coalesce(coalesce(dt_emissao_fat_w, dt_emissao_w), clock_timestamp()), 'dd');
		dt_emissao_ndc_w := trunc(coalesce(coalesce(dt_emissao_fat_w, dt_emissao_w), clock_timestamp()), 'dd');
		
		cd_cooperativa_w := null;
		if (r_c01_w.nr_seq_congenere IS NOT NULL AND r_c01_w.nr_seq_congenere::text <> '') then
			select	max(cd_cooperativa)
			into STRICT	cd_cooperativa_w
			from	pls_congenere
			where	nr_sequencia = r_c01_w.nr_seq_congenere;
			
			if (cd_cooperativa_w = cd_unimed_origem_w) then
				select	max(a.ie_tipo_contrato),
					max(b.cd_cgc)
				into STRICT	ie_tipo_contrato_w,
					cd_cgc_w
				from	pls_intercambio 	a,
					pls_contrato_pagador 	b
				where	a.nr_sequencia		= b.nr_seq_pagador_intercambio
				and	b.nr_sequencia		= r_c01_w.nr_seq_pagador;
				
				if (ie_tipo_contrato_w = 'S') then
					select	max(cd_cooperativa)
					into STRICT	cd_cooperativa_w
					from	pls_congenere
					where	cd_cgc = cd_cgc_w;
				end if;
			end if;
		end if;
		
		if (r_c01_w.ie_remido = 'S') then
			select	max(a.cd_cooperativa)
			into STRICT	cd_cooperativa_w
			from 	pls_congenere a
			where	a.nr_sequencia	= r_c01_w.nr_seq_congenere;			
		end if;

		-- Gerar o numero e vencimento do titulo (nao pode gerar quando for fatura de aviso)
		if (coalesce(nr_titulo_w::text, '') = '') and (coalesce(nr_titulo_ndc_w::text, '') = '') and (ie_tipo_cobranca_fatura_w != 'A') then
			ie_gerar_tit_ptu_w	:= 'S';
			dt_vencimento_w		:= null;
			dt_vencimento_ndc_w	:= null;
			
			-- Geracao do titulo de faturamento -- Gerar titulo a receber
			nr_seq_acao_w := pls_obter_acao_intercambio('14', '1', null, r_c01_w.nr_seq_fatura, null, null, clock_timestamp(), null, 'N', nr_seq_acao_w);
			
			if (nr_seq_acao_w IS NOT NULL AND nr_seq_acao_w::text <> '') then
				ie_gerar_tit_ptu_w := 'N';
				
				select	nextval('titulo_seq')
				into STRICT	nr_titulo_w
				;
				
				dt_vencimento_w	:= pls_obter_data_venc_pls_fatura(r_c01_w.nr_seq_fatura, cd_estabelecimento_p, 'F');
			end if;
			
			if (ie_gerar_tit_ptu_w = 'S') then
				-- Geracao do titulo de faturamento -- Gerar titulo a receber (Fatura)
				nr_seq_acao_w := pls_obter_acao_intercambio('14', '14', null, r_c01_w.nr_seq_fatura, null, null, clock_timestamp(), null, 'N', nr_seq_acao_w);
				
				if (nr_seq_acao_w IS NOT NULL AND nr_seq_acao_w::text <> '') then
					select	nextval('titulo_seq')
					into STRICT	nr_titulo_w
					;
					
					dt_vencimento_w := pls_obter_data_venc_pls_fatura(r_c01_w.nr_seq_fatura, cd_estabelecimento_p, 'F');
				end if;
				
				nr_seq_acao_w := null;
				
				-- Geracao do titulo de faturamento -- Gerar titulo a receber (NDC)
				nr_seq_acao_w := pls_obter_acao_intercambio('14', '15', null, r_c01_w.nr_seq_fatura, null, null, clock_timestamp(), null, 'N', nr_seq_acao_w);
				
				if (nr_seq_acao_w IS NOT NULL AND nr_seq_acao_w::text <> '') then
					select	nextval('titulo_seq')
					into STRICT	nr_titulo_ndc_w
					;
					
					dt_vencimento_ndc_w := pls_obter_data_venc_pls_fatura(r_c01_w.nr_seq_fatura, cd_estabelecimento_p, 'N');
				end if;
			end if;
		end if;
		
		-- Fatura + NDC (Reembolso de Custo Assistencial))
		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') and (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
			ie_classif_cobranca_w	:= '3';
			tp_documento_1_w	:= 1;
			tp_documento_2_w	:= 1;
			
		elsif (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then		-- Fatura
			ie_classif_cobranca_w	:= '2';
			nr_titulo_ndc_w		:= null;
			dt_vencimento_ndc_w	:= null;
			dt_emissao_ndc_w	:= null;
			tp_documento_1_w	:= 1;
			
		elsif (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then	-- NDC (Reembolso de Custo Assistencial)
			ie_classif_cobranca_w	:= '1';
			nr_titulo_w		:= null;
			dt_vencimento_w		:= null;
			dt_emissao_fat_w	:= null;
			tp_documento_2_w	:= 1;
		end if;
		
		nr_documento_1_w := nr_titulo_w;
		if (nr_nfe_imp_1_w IS NOT NULL AND nr_nfe_imp_1_w::text <> '') and (ds_link_nfe_1_w IS NOT NULL AND ds_link_nfe_1_w::text <> '') then	-- Se tiver NFS-e (nota fiscal eletronica)
			nr_documento_1_w	:= nr_nfe_imp_1_w;
			tp_documento_1_w	:= 3;
		end if;
		
		nr_documento_2_w := nr_titulo_ndc_w;
		if (nr_nfe_imp_2_w IS NOT NULL AND nr_nfe_imp_2_w::text <> '') and (ds_link_nfe_2_w IS NOT NULL AND ds_link_nfe_2_w::text <> '') then	-- Se tiver NFS-e (nota fiscal eletronica)
			nr_documento_2_w	:= nr_nfe_imp_2_w;
			tp_documento_2_w	:= 3;
		end if;
		
		if	((dt_emissao_fat_w IS NOT NULL AND dt_emissao_fat_w::text <> '') and (trunc(dt_emissao_fat_w, 'mm') <> trunc(clock_timestamp(), 'mm'))) then
			dt_emissao_fat_w := clock_timestamp();
		end if;
		
		begin
			select	coalesce(sum(k.vl_tributo), 0)
			into STRICT	vl_tributo_ir_w
			from	tributo			y,
				pls_fatura_trib		k
			where	k.cd_tributo		= y.cd_tributo
			and	y.ie_tipo_tributo	= 'IR'
			and	k.nr_seq_fatura		= r_c01_w.nr_seq_fatura;
		exception
		when others then
			vl_tributo_ir_w	:= 0;
		end;
		
		-- Documento fiscal deve ser igual ao documento
		doc_fiscal_1_w 		:= nr_documento_1_w;
		doc_fiscal_2_w 		:= nr_documento_2_w;
    		ie_tipo_exportacao_w 	:= substr(pls_obter_tipo_exp_fatura(r_c01_w.nr_seq_fatura),1,3);
		
		insert into ptu_fatura(	nr_sequencia, 			cd_estabelecimento, 		cd_unimed_destino,
					cd_unimed_origem, 		dt_geracao, 			nr_competencia,
					nr_fatura, 			dt_atualizacao, 		nm_usuario,
					dt_atualizacao_nrec, 		nm_usuario_nrec, 		dt_emissao_fatura, 
					vl_total_fatura, 		nr_versao_transacao, 		ie_tipo_fatura, 
					ie_operacao, 			dt_vencimento_fatura, 		nr_seq_pls_fatura,	
					ie_doc_fisica_conferida,	ie_classif_cobranca, 		nr_nota_credito_debito,
					dt_vencimento_ndc, 		dt_emissao_ndc, 		vl_total_ndc,
					tp_documento_1, 		tp_documento_2, 		vl_ir,
					doc_fiscal_1, 			doc_fiscal_2, 			ie_fatura_fisica,
					ie_tipo_cobranca_fatura, 	ie_tipo_exportacao)
				values (nextval('ptu_fatura_seq'), 	cd_estabelecimento_p, 		substr(cd_cooperativa_w, 1,4),
					cd_unimed_origem_w, 		trunc(clock_timestamp(), 'dd'), 		dt_mesano_referencia_w,
					nr_documento_1_w, 		clock_timestamp(), 			nm_usuario_p,
					clock_timestamp(), 			nm_usuario_p, 			dt_emissao_fat_w,
					0, 				coalesce(nr_versao_transacao_w, 20), 1,
					'E', 				dt_vencimento_w, 		r_c01_w.nr_seq_fatura,
					'N', 				ie_classif_cobranca_w, 		nr_documento_2_w,
					dt_vencimento_ndc_w, 		dt_emissao_ndc_w, 		0,
					tp_documento_1_w, 		tp_documento_2_w, 		vl_tributo_ir_w,
					doc_fiscal_1_w, 		doc_fiscal_2_w, 		'N',
					ie_tipo_cobranca_fatura_w,	ie_tipo_exportacao_w) returning nr_sequencia into nr_seq_fatura_w;

		-- Gravar historio PTU Fatura
		CALL ptu_atualizar_status_fat_envio(nr_seq_fatura_w, 1, nm_usuario_p);
		
		-- Gerar registro de Cobranca - R502
		CALL pls_gerar_ptu_nota_cobranca(r_c01_w.nr_seq_fatura, nr_seq_fatura_w, nm_usuario_p, cd_interface_w, cd_estabelecimento_p);
		
		-- Verificar se foi gerada nota fiscal por regra de conversao
		select	max(nr_nota_fiscal),
			max(nr_nota_fiscal_doc2)
		into STRICT	nr_nota_fiscal_w,
			nr_nota_fiscal_doc2_w
		from	ptu_nota_fiscal
		where	nr_seq_fatura	= nr_seq_fatura_w;

		if (nr_nota_fiscal_w IS NOT NULL AND nr_nota_fiscal_w::text <> '') then -- Se tiver NFS-e (nota fiscal eletronica)
			nr_documento_1_w	:= nr_nfe_imp_1_w;
			doc_fiscal_1_w		:= nr_nfe_imp_1_w;
			tp_documento_1_w	:= 3;
		end if;
		
		if (nr_nota_fiscal_doc2_w IS NOT NULL AND nr_nota_fiscal_doc2_w::text <> '') then -- Se tiver NFS-e (nota fiscal eletronica)
			nr_documento_2_w	:= nr_nfe_imp_2_w;
			doc_fiscal_2_w		:= nr_nfe_imp_2_w;
			tp_documento_2_w	:= 3;
		end if;
		
		
		-- Verificar se tem registro reembolso e ressarcimento - 507
		select	count(1)
		into STRICT	qt_cobr_rrs_reem_w
		from	ptu_nota_cobranca_rrs
		where	nr_seq_fatura		= nr_seq_fatura_w
		and	id_reembolso_sus	= '1';

		qt_cobr_rrs_w	:=  qt_cobr_rrs_reem_w;
		
		vl_ndr_w	:= 0;
		vl_fatura_w	:= 0;
		-- Somar os valores dos registros de servico - 504 
		if (qt_cobr_rrs_reem_w = 0) then
			select	sum(coalesce(vl_procedimento, 0)) + sum(coalesce(vl_filme, 0)) + sum(coalesce(vl_custo_operacional, 0)) vl_ndr,
				sum(coalesce(vl_adic_procedimento, 0)) + sum(coalesce(vl_adic_filme, 0)) + sum(coalesce(vl_adic_co, 0)) vl_fat
			into STRICT	vl_ndr_w,
				vl_fatura_w
			from	ptu_nota_servico	s,
				ptu_nota_cobranca	c
			where	c.nr_sequencia		= s.nr_seq_nota_cobr
			and	c.nr_seq_fatura		= nr_seq_fatura_w;

			if (somente_numero(nr_versao_transacao_w) > 28) then -- so se for versao PTU 10. (29)
				select	count(1)
				into STRICT	qt_reg_exce_w
				from	ptu_nota_cobranca
				where	nr_seq_fatura	= nr_seq_fatura_w
				and	cd_excecao	!= 'J'
				and	(cd_excecao IS NOT NULL AND cd_excecao::text <> '');
				
				-- O tipo 4 deve ser utilizado somente quando a cobranca for referente a reapresentacao de nota glosada (Ajius) CD_EXCECAO = J.
				if (qt_reg_exce_w = 0) then
					tp_documento_1_w := 4; -- NDC
				end if;
			end if;
		
		-- Somar os valores dos registros de reembolso - 507
		elsif (qt_cobr_rrs_reem_w > 0) then
			select	sum(coalesce(vl_dif_vl_inter,0)),
				0
			into STRICT	vl_ndr_w,
				vl_fatura_w
			from	ptu_nota_servico_rrs	sr,
				ptu_nota_cobranca_rrs	cr
			where	cr.nr_sequencia		= sr.nr_seq_nota_cobr_rrs
			and	cr.nr_seq_fatura	= nr_seq_fatura_w
			and	cr.id_reembolso_sus	= '1';
		end if;
		
		-- Fatura
		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
			vl_fatura_w	:= vl_fatura_w + vl_ndr_w;
			vl_ndr_w	:= 0;
		
		-- NDC (Reembolso de Custo Assistencial)
		elsif (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
			vl_ndr_w	:= vl_ndr_w + vl_fatura_w;
			vl_fatura_w	:= 0;
		end if;
		
		select	count(1)
		into STRICT	qt_cobr_rrs_sus_w
		from	ptu_nota_cobranca_rrs
		where	nr_seq_fatura		= nr_seq_fatura_w
		and	id_reembolso_sus	= '2';
		
		if (qt_cobr_rrs_sus_w > 0) then
			select	sum(coalesce(vl_serv_cob,0))
			into STRICT	vl_fatura_w
			from	ptu_nota_servico_rrs	sr,
				ptu_nota_cobranca_rrs	cr
			where	cr.nr_sequencia		= sr.nr_seq_nota_cobr_rrs
			and	cr.nr_seq_fatura	= nr_seq_fatura_w
			and	cr.id_reembolso_sus	= '2';
		end if;
		
		qt_cobr_rrs_w	:= qt_cobr_rrs_w + qt_cobr_rrs_sus_w;
		
		-- Verificar se tem registro que necessita de documento fisico
		select	count(1)
		into STRICT	qt_cobrancas_w
		from	ptu_nota_cobranca
		where	nr_seq_fatura = nr_seq_fatura_w
		and	ie_necessita_doc_fisico	= 'S'  LIMIT 1;
		
		-- Atualizar dados da PTU fatura - R501
		update 	ptu_fatura
		set	ie_necessita_doc_fisico	= CASE WHEN qt_cobrancas_w=0 THEN  'N'  ELSE 'S' END ,
			ie_tipo_arquivo_cob	= CASE WHEN qt_cobr_rrs_w=0 THEN  '502'  ELSE '507' END ,
			vl_total_fatura		= vl_fatura_w,
			vl_total_ndc		= vl_ndr_w,
			nr_fatura		= nr_documento_1_w,
			nr_nota_credito_debito	= nr_documento_2_w,
			tp_documento_1		= tp_documento_1_w,
			tp_documento_2		= tp_documento_2_w,
			doc_fiscal_1		= doc_fiscal_1_w,
			doc_fiscal_2		= doc_fiscal_2_w
		where	nr_sequencia		= nr_seq_fatura_w;
		
		update	pls_fatura
		set	dt_geracao_ptu	= clock_timestamp()
		where	nr_sequencia	= r_c01_w.nr_seq_fatura;
		if (coalesce(ie_commit_p,'N') = 'S') then
			commit;
		end if;

		-- Chamar rotina para atualizar o valor do PTU quando o valor do procedimento estiver zerado, o procedimento pode vir zerado na hora que dividir pelo pos contabil
		CALL pls_atu_valor_servico(r_c01_w.nr_seq_fatura);

		-- adicionado no merge com o codigo do analista
		if (coalesce(ie_commit_p,'N') = 'S') then
		
			CALL pls_ajusta_fatura_remido(r_c01_w.nr_seq_fatura);
			commit;
		end if;

	end loop;
	
	if (coalesce(ie_commit_p,'N') = 'S') then
		commit;
	end if;

	CALL pls_atu_valor_servico(nr_seq_fatura_p);

	if (coalesce(ie_commit_p,'N') = 'S') then
		commit;
	end if;

end if;

if (coalesce(ie_commit_p,'N') = 'S') then
	commit;
end if;



CALL pls_atu_valor_servico(nr_seq_fatura_p);

if (coalesce(ie_commit_p,'N') = 'S') then
	commit;
end if;

-- Consisitir Fatura
CALL pls_validar_inf_ptu_xml(nr_seq_fatura_p, cd_estabelecimento_p, nm_usuario_p,'PTU');


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_faturas_ptu ( nr_seq_lote_p pls_lote_faturamento.nr_sequencia%type, nr_seq_fatura_p pls_fatura.nr_sequencia%type, ie_commit_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

