-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intcom_gerar_contrato ( id_contrato_p text, /*E a Tag id_contrato*/
 nr_requisicao_p text, /* E a Tag Requisicao - representa o CD_CONTRATO da tabela CONTRATO*/
 ie_status_p text, /*E a Tag Status*/
 ie_tipo_p text, /*E a Tag Tipo*/
 ds_titulo_p text, /*E a Tag Titulo*/
 cd_categoria_p text, /*E a Tag Categoria_Contrato*/
 ds_contato_comprador_p text, /*E a Tag Contato_Comprador*/
 dt_criacao_p timestamp, /*E a tag Data_Criacao*/
 dt_inicio_vigencia_p timestamp, /*E a tag Data_Vigencia_Inicio*/
 dt_fim_vigencia_p timestamp, /*E a tag Data_Vigencia_Fim*/
 cd_cnpj_p text, /*E a Tag CNPJ_fornecedor*/
 ds_razao_social_p text, /*E a Tag Razao_Fornecedor*/
 ds_contato_fornecedor_p text, /*E a Tag Contato_Fornecedor*/
 ie_frete_p text, /*E a Tag Frete*/
 vl_fat_minimo_p text, /*E a Tag Faturamento_Minimo*/
 qt_dias_entrega_p text, /*E a Tag Prazo_Entrega*/
 ds_observacao_p text, /*E a Tag Observacoes*/
 cd_material_p bigint, /*E a Tag Codigo*/
 qt_material_p bigint, /*E a Tag Quantidade*/
 vl_unit_material_p bigint, /*E a Tag Valor_Unitario*/
 ie_opcao_p bigint, /*E a Tag Preco_Total*/
 nm_usuario_p text, cd_estabelecimento_p bigint, nr_sequencia_p INOUT text) AS $body$
DECLARE


qt_existe_w				bigint;
cd_cnpj_w				varchar(14);			
cd_material_w				integer;
qt_material_w				double precision;
vl_material_w				double precision;			
cd_cep_w				varchar(15);
sg_estado_w				pessoa_juridica.sg_estado%type;
cd_estab_w				smallint;		
cd_tipo_pessoa_w				smallint;
nr_seq_classif_w				bigint;	
nm_usuario_destino_w			varchar(15);
nr_seq_comunic_w				bigint;
ie_ci_lida_w				varchar(1);
ds_titulo_w				varchar(255);
ds_comunicado_w				varchar(2000);
ie_frete_w				varchar(1);
nr_sequencia_w				bigint;
nr_seq_tipo_contrato_w			bigint;
cd_comprador_padrao_w			varchar(10);
qt_erro_w				bigint := 0;
ds_erro_w				varchar(2000) := '';
nr_seq_registro_w			bigint;
ds_login_w				varchar(255);
ds_senha_w				varchar(255);
cd_conta_imp_w				varchar(20);

c01 CURSOR FOR
SELECT	cd_estabelecimento
from	estabelecimento
where	ie_situacao = 'A';


BEGIN

qt_erro_w	:= 0;
cd_cnpj_w	:= cd_cnpj_p;
cd_material_w	:= cd_material_p;

if (length(cd_cnpj_w) <> 14) then
	cd_cnpj_w := lpad(cd_cnpj_w,14,'0');
end if;

select	count(*)
into STRICT	qt_existe_w
from	pessoa_juridica
where	cd_cgc = cd_cnpj_w;

select	coalesce(cd_tipo_pessoa_bionexo,0),
	nr_seq_tipo_contrato,
	coalesce(cd_comprador_padrao,'0')
into STRICT	cd_tipo_pessoa_w,
	nr_seq_tipo_contrato_w,
	cd_comprador_padrao_w
from	parametro_compras
where	cd_estabelecimento	= cd_estabelecimento_p;
	
/*Cadastrar pessoa juridica caso nao exista*/

if (qt_existe_w = 0) and (ie_opcao_p = 0) and (cd_cnpj_w IS NOT NULL AND cd_cnpj_w::text <> '') then
	begin
		
	select	coalesce(cd_cep,0),
		coalesce(sg_estado,'SP')
	into STRICT	cd_cep_w,
		sg_estado_w
	from	pessoa_juridica
	where	cd_cgc = obter_cgc_estabelecimento(cd_estabelecimento_p);
	
	if (cd_tipo_pessoa_w = 0) then
	
		select	min(cd_tipo_pessoa)
		into STRICT	cd_tipo_pessoa_w
		from	pessoa_juridica
		where	ie_situacao = 'A';
		
	end if;
	
	if (cd_tipo_pessoa_w > 0) then	
		select	cd_conta_imp
		into STRICT	cd_conta_imp_w
		from	tipo_pessoa_juridica
		where	cd_tipo_pessoa = cd_tipo_pessoa_w;	
	end if;
	
	begin
	insert into pessoa_juridica(
		cd_cgc,
		ds_razao_social,
		nm_fantasia,
		cd_cep,
		ds_endereco,
		ds_municipio,
		sg_estado,
		dt_atualizacao,
		nm_usuario,
		cd_tipo_pessoa,
		ie_prod_fabric,
		ie_situacao,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		cd_conta_contabil)
	values (	cd_cnpj_w,
		substr(ds_razao_social_p,1,255),
		substr(ds_razao_social_p,1,255),
		cd_cep_w,
		substr(wheb_mensagem_pck.get_texto(315117),1,255),
		substr(wheb_mensagem_pck.get_texto(315117),1,255),
		sg_estado_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_tipo_pessoa_w,
		'N',
		'A',
		clock_timestamp(),
		nm_usuario_p,
		cd_conta_imp_w);
	exception
	when others then
		qt_erro_w	:= 1;
		ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(315118) || sqlerrm,1,2000);
	end;
	
	if (qt_erro_w > 0) then
		open C01;
		loop
		fetch C01 into	
			cd_estab_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			
			begin			
			insert into pessoa_juridica_estab(
				nr_sequencia,
				cd_cgc,
				cd_estabelecimento,
				dt_atualizacao,
				nm_usuario,
				ie_conta_dif_nf,
				ie_rateio_adiant,
				ie_retem_iss,
				vl_minimo_nf,
				qt_dia_prazo_entrega,
				nm_pessoa_contato)
			values (	nextval('pessoa_juridica_estab_seq'),
				cd_cnpj_w,
				cd_estab_w,
				clock_timestamp(),
				nm_usuario_p,
				'N',
				'P',
				'N',
				vl_fat_minimo_p,
				qt_dias_entrega_p,
				substr(ds_contato_fornecedor_p,1,255));	
			exception
			when others then
				qt_erro_w	:= 1;
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(315119) || sqlerrm,1,2000);	
			end;			
			end;
		end loop;
		close C01;
	end if;
	
	if (qt_erro_w = 0) then
	
		select	obter_classif_comunic('F')
		into STRICT	nr_seq_classif_w
		;
	
		select	obter_usuario_pf(cd_comprador_padrao_w)
		into STRICT	nm_usuario_destino_w
		;
		
		ds_titulo_w	:= 	substr(wheb_mensagem_pck.get_texto(302769),1,255);
		ds_comunicado_w	:= 	substr(wheb_mensagem_pck.get_texto(315121,'ID_CONTRATO=' || id_contrato_p ||
						';CD_CNPJ=' || cd_cnpj_w ||
						';DS_RAZAO_SOCIAL=' || substr(ds_razao_social_p,1,80)),1,255);

		if (nm_usuario_destino_w IS NOT NULL AND nm_usuario_destino_w::text <> '') then
				
			select	nextval('comunic_interna_seq')
			into STRICT	nr_seq_comunic_w
			;
			
			begin
			insert	into comunic_interna(
				dt_comunicado,
				ds_titulo,
				ds_comunicado,
				nm_usuario,
				dt_atualizacao,	
				ie_geral,
				nm_usuario_destino,
				nr_sequencia,
				ie_gerencial,
				nr_seq_classif,
				dt_liberacao)
			values (	clock_timestamp(),
				ds_titulo_w,
				ds_comunicado_w,
				nm_usuario_p,
				clock_timestamp(),
				'N',
				nm_usuario_destino_w,
				nr_seq_comunic_w,
				'N',
				nr_seq_classif_w,
				clock_timestamp());
			exception
			when others then
				qt_erro_w	:= 1;
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(315125) || sqlerrm,1,2000);	
			end;			
			
			/*Para que a comunicacao seja gerada como lida ao proprio usuario */

			if (ie_ci_lida_w = 'S') then
				begin
				insert into comunic_interna_lida(nr_sequencia,nm_usuario,dt_atualizacao)values (nr_seq_comunic_w,nm_usuario_p,clock_timestamp());
				exception
				when others then
					qt_erro_w	:= 1;
					ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(315128) || sqlerrm,1,2000);	
				end;				
			end if;	
		end if;
		
		if (qt_erro_w = 0) then
		
			begin
			CALL intcom_gerar_int_cnpj(cd_cnpj_w, cd_estabelecimento_p, nm_usuario_p);
			exception
			when others then
				qt_erro_w	:= 1;
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(315130) || sqlerrm,1,2000);
			end;
		end if;		
	end if;
	end;
end if;

if (ie_opcao_p = 0) and (qt_erro_w = 0) then
	begin
	
	if (nr_seq_tipo_contrato_w = 0) then
			
		select	min(nr_sequencia)
		into STRICT	nr_seq_tipo_contrato_w
		from	tipo_contrato
		where	ie_situacao = 'A';
		
	end if;
	
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_sequencia_w
	from	contrato
	where	nr_documento_externo = id_contrato_p;
	
	if (upper(ie_frete_p) = 'FOB') then
		ie_frete_w := 'F';
	else
		ie_frete_w := 'C';
	end if;
	
	if (nr_sequencia_w = 0) then
		begin
		
		select	nextval('contrato_seq')
		into STRICT	nr_sequencia_w
		;
		
		begin
		insert into contrato(
			nr_sequencia,
			cd_cgc_contratado,
			nr_seq_tipo_contrato,
			ds_objeto_contrato,
			ie_renovacao,
			dt_atualizacao,
			nm_usuario,
			ie_situacao,
			dt_inicio,
			dt_fim,
			cd_contrato,
			cd_estabelecimento,
			ie_avisa_vencimento,
			ie_avisa_venc_setor,
			ie_classificacao,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_documento_externo,
			nm_contato,
			ie_periodo_nf)
		values (	nr_sequencia_w,
			cd_cnpj_w,
			nr_seq_tipo_contrato_w,
			coalesce(ds_titulo_p,substr(wheb_mensagem_pck.get_texto(315132),1,255)),
			'A',
			clock_timestamp(),
			nm_usuario_p,
			'A',
			coalesce(dt_criacao_p,trunc(clock_timestamp(),'dd')),
			dt_fim_vigencia_p,
			nr_sequencia_w,
			cd_estabelecimento_p,
			'N',
			'S',
			'AT',
			clock_timestamp(),
			nm_usuario_p,
			id_contrato_p,
			substr(ds_contato_comprador_p,1,40),
			'N');
		exception
		when others then
			qt_erro_w	:= 1;
			ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(315133) || sqlerrm,1,2000);
		end;
				
		end;
	else
		begin	
		
		begin
		update	contrato
		set	nr_seq_tipo_contrato	= nr_seq_tipo_contrato_w,
			nm_contato		= substr(ds_contato_comprador_p,1,40),
			dt_inicio		= coalesce(dt_criacao_p,dt_inicio),
			ie_situacao		= CASE WHEN ie_status_p='A' THEN 'A'  ELSE 'I' END ,
			ds_objeto_contrato	= CASE WHEN ds_titulo_p='' THEN ds_objeto_contrato  ELSE ds_titulo_p END
		where	nr_sequencia		= nr_sequencia_w;
		exception
		when others then
			qt_erro_w	:= 1;
			ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(315136) || sqlerrm,1,2000);
		end;		
		end;
	end if;
	end;
end if;

if (ie_opcao_p = 1) and (nr_sequencia_p > 0) and (qt_erro_w = 0) then
	
		
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_sequencia_w
	from	contrato
	where	nr_sequencia = nr_sequencia_p;
	
	if (nr_sequencia_w > 0) then
	
		select	count(*)
		into STRICT	qt_existe_w
		from	contrato_regra_nf
		where	nr_seq_contrato = nr_sequencia_w
		and	cd_material = cd_material_p;
		
		if (qt_existe_w = 0) then
			
			begin
			insert into contrato_regra_nf(
				nr_sequencia,
				nr_seq_contrato,
				dt_atualizacao,
				nm_usuario,
				cd_material,
				vl_pagto,
				dt_inicio_vigencia,
				dt_fim_vigencia,
				ie_gera_sc_automatico)
			values (	nextval('contrato_regra_nf_seq'),
				nr_sequencia_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_material_w,
				vl_unit_material_p,
				dt_inicio_vigencia_p,
				dt_fim_vigencia_p,
				'N');
			exception
			when others then
				qt_erro_w	:= 1;
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(315137) || sqlerrm,1,2000);
			end;
						
		else
			begin
			update	contrato_regra_nf
			set	vl_pagto		= vl_unit_material_p,
				dt_inicio_vigencia	= dt_inicio_vigencia_p,
				dt_fim_vigencia	= dt_fim_vigencia_p
			where	nr_seq_contrato 	= nr_sequencia_w
			and	cd_material	= cd_material_p;
			exception
			when others then
				qt_erro_w	:= 1;
				ds_erro_w	:= substr(wheb_mensagem_pck.get_texto(315138) || sqlerrm,1,2000);
			end;
			
		end if;
		
	end if;
end if;

if (qt_erro_w > 0) then
	
	rollback;
	select	nextval('registro_integr_compras_seq')
	into STRICT	nr_seq_registro_w
	;

	select	a.ds_login_integr_compras_ws,
		a.ds_senha_integr_compras_ws
	into STRICT	ds_login_w,
		ds_senha_w
	from	parametro_compras a
	where	a.cd_estabelecimento	= cd_estabelecimento_p;

	insert into registro_integr_compras(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		ie_tipo_operacao,
		id_contrato)
	values (	nr_seq_registro_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,	
		'WFG',	
		id_contrato_p);

	insert into registro_integr_com_xml(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_registro,
		ie_status,
		ie_operacao,
		ie_sistema_origem,
		ds_erro,
		ds_retorno,
		ie_tipo_operacao,
		ds_login,
		ds_senha,
		id_contrato)
	values (	nextval('registro_integr_com_xml_seq'),
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_registro_w,
		'E',
		'R',
		'TASY',
		ds_erro_w,
		null,
		'WFG',
		ds_login_w,
		ds_senha_w,
		id_contrato_p);
	commit;
	
	CALL wheb_mensagem_pck.exibir_mensagem_abort(182482,'DS_ERRO_P='||DS_ERRO_W);
end if;

nr_sequencia_p := nr_sequencia_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intcom_gerar_contrato ( id_contrato_p text,  nr_requisicao_p text,  ie_status_p text,  ie_tipo_p text,  ds_titulo_p text,  cd_categoria_p text,  ds_contato_comprador_p text,  dt_criacao_p timestamp,  dt_inicio_vigencia_p timestamp,  dt_fim_vigencia_p timestamp,  cd_cnpj_p text,  ds_razao_social_p text,  ds_contato_fornecedor_p text,  ie_frete_p text,  vl_fat_minimo_p text,  qt_dias_entrega_p text,  ds_observacao_p text,  cd_material_p bigint,  qt_material_p bigint,  vl_unit_material_p bigint,  ie_opcao_p bigint,  nm_usuario_p text, cd_estabelecimento_p bigint, nr_sequencia_p INOUT text) FROM PUBLIC;

