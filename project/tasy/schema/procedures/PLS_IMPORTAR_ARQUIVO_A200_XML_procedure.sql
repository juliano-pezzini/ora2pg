-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_importar_arquivo_a200_xml ( nr_seq_intercambio_p ptu_intercambio.nr_sequencia%type, nm_arquivo_p text, nm_usuario_p text) AS $body$
DECLARE


nr_seq_retorno_mov_w	ptu_retorno_movimentacao.nr_sequencia%type;
ds_ptu_w		varchar(4);
dt_geracao_w		timestamp;
cd_uni_destino_w	varchar(255);
cd_uni_origem_w		varchar(255);
ie_tipo_mov_w		ptu_intercambio.ie_tipo_mov%type;
dt_mov_inicio_w		ptu_intercambio.dt_mov_inicio%type;
dt_mov_fim_w		ptu_intercambio.dt_mov_fim%type;
nr_versao_transacao_w	varchar(255);
nr_protocolo_w		varchar(255);
nm_arquivo_w		varchar(255);

identificacao_benef_w	varchar(2000);
identificacao_benef_comp_w varchar(2000);
cd_inconsistencia_w	varchar(255);
cd_unimed_w		varchar(255);
cd_usuario_plano_w	varchar(255);
cd_unimed_comp_w	varchar(255);
cd_usuario_plano_comp_w	varchar(255);
nr_via_carteira_w	varchar(255);
dt_validade_carteira_w	timestamp;
nr_seq_benef_intercambio_w	ptu_intercambio_benef.nr_sequencia%type;
nr_seq_benef_simp_w		ptu_intercambio_benef_simp.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	ds_conteudo,
		ie_tipo_registro
	from	w_importar_xml_a100
	where	nm_usuario = nm_usuario_p
	order by 2;

c02 CURSOR(	cd_unimed_cad_pc	text,
		nr_seq_segurado_pc	pls_segurado.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia
	from	pls_segurado_repasse a,
		pls_congenere b
	where	b.nr_sequencia = a.nr_seq_congenere
	and	a.nr_seq_segurado = nr_seq_segurado_pc
	and	lpad(b.cd_cooperativa,4,'0') = cd_unimed_cad_pc
	and	coalesce(a.nr_cartao_intercambio::text, '') = '';
	
BEGIN

for r_c01_w in C01 loop
	begin
	if (position('ptu:' in r_c01_w.ds_conteudo) > 0 ) then
		ds_ptu_w := 'ptu:';
	else
		ds_ptu_w := '';
	end if;
	
	if (r_c01_w.ie_tipo_registro = '1') then
		dt_geracao_w		:= to_date(pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<'||ds_ptu_w||'dt_geracao>'),'YYYYmmdd');
		cd_uni_destino_w	:= pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<'||ds_ptu_w||'cd_Uni_Destino>');
		cd_uni_origem_w		:= pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<'||ds_ptu_w||'cd_Uni_Origem>');
		nr_versao_transacao_w	:= pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<'||ds_ptu_w||'nrVerTra_PTU>');
		nr_protocolo_w		:= pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<'||ds_ptu_w||'nr_protocolo>');
		nm_arquivo_w		:= obter_nome_arquivo(nm_arquivo_p, 'N');
		
		select	ie_tipo_mov,
			dt_mov_inicio,
			dt_mov_fim
		into STRICT	ie_tipo_mov_w,
			dt_mov_inicio_w,
			dt_mov_fim_w
		from	ptu_intercambio
		where	nr_sequencia	= nr_seq_intercambio_p;
		
		insert	into	ptu_retorno_movimentacao(	nr_sequencia, dt_geracao, ie_tipo_mov,
				dt_mov_inicio, dt_mov_fim, ie_operacao,
				dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
				nm_usuario_nrec, nr_versao_transacao, nr_seq_intercambio,
				cd_unimed_origem, cd_unimed_destino, ie_tipo_retorno)
			values (nextval('ptu_retorno_movimentacao_seq'), dt_geracao_w, ie_tipo_mov_w,
				dt_mov_inicio_w, dt_mov_fim_w, 'E',
				clock_timestamp(), nm_usuario_p, clock_timestamp(),
				nm_usuario_p, nr_versao_transacao_w, nr_seq_intercambio_p,
				cd_uni_origem_w, cd_uni_destino_w, 'A100')
			returning nr_sequencia into nr_seq_retorno_mov_w;
	elsif (r_c01_w.ie_tipo_registro = '2') then
		cd_inconsistencia_w	:= pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<'||ds_ptu_w||'cd_mens_retorno>');
		
		identificacao_benef_w	:= pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<'||ds_ptu_w||'identificacaoBenef>');
		cd_unimed_w		:= pls_extrair_dado_tag_xml(identificacao_benef_w,'<'||ds_ptu_w||'cd_Unimed>');
		cd_usuario_plano_w	:= pls_extrair_dado_tag_xml(identificacao_benef_w,'<'||ds_ptu_w||'id_Benef>');
		
		identificacao_benef_comp_w	:= pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<'||ds_ptu_w||'identificacaoBenef_compRisco>');
		cd_unimed_comp_w		:= pls_extrair_dado_tag_xml(identificacao_benef_comp_w,'<'||ds_ptu_w||'cd_Unimed>');
		cd_usuario_plano_comp_w		:= pls_extrair_dado_tag_xml(identificacao_benef_comp_w,'<'||ds_ptu_w||'id_Benef>');
		nr_via_carteira_w		:= pls_extrair_dado_tag_xml(identificacao_benef_comp_w,'<'||ds_ptu_w||'via_cartao>');
		dt_validade_carteira_w		:= to_date(pls_extrair_dado_tag_xml(identificacao_benef_comp_w,'<'||ds_ptu_w||'dt_val_carteira>'),'YYYYmmdd');
		
		select	max(a.nr_sequencia)
		into STRICT	nr_seq_benef_intercambio_w
		from	ptu_intercambio			c,
			ptu_intercambio_empresa		b,
			ptu_intercambio_benef		a
		where	a.nr_seq_empresa		= b.nr_sequencia
		and	b.nr_seq_intercambio		= c.nr_sequencia
		and	c.nr_sequencia			= nr_seq_intercambio_p
		and	a.cd_usuario_plano		= cd_usuario_plano_w;
		
		select	max(nr_sequencia)
		into STRICT	nr_seq_benef_simp_w
		from	ptu_intercambio_benef_simp
		where	nr_seq_intercambio	= nr_seq_intercambio_p
		and	cd_beneficiario		= cd_usuario_plano_w;
		
		insert	into	ptu_retorno_mov_benef(	nr_sequencia, nr_seq_retorno_mov, cd_usuario_plano,
				cd_inconsistencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, cd_unimed,
				nr_via_carteira, dt_validade_carteira, cd_unimed_cad,
				cd_usuario_plano_cad, nr_seq_benef_intercambio, nr_seq_benef_simp)
			values (	nextval('ptu_retorno_mov_benef_seq'), nr_seq_retorno_mov_w, cd_usuario_plano_w,
				cd_inconsistencia_w, clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, cd_unimed_w,
				nr_via_carteira_w, dt_validade_carteira_w, cd_unimed_comp_w,
				cd_usuario_plano_comp_w, nr_seq_benef_intercambio_w, nr_seq_benef_simp_w);
		
		--Se foi incluido, gravar o cartao de intercambio
		if (cd_inconsistencia_w = '3201') and (cd_usuario_plano_comp_w IS NOT NULL AND cd_usuario_plano_comp_w::text <> '') then
			if (nr_seq_benef_intercambio_w IS NOT NULL AND nr_seq_benef_intercambio_w::text <> '') then
				select	max(nr_seq_segurado)
				into STRICT	nr_seq_segurado_w
				from	ptu_intercambio_benef
				where	nr_sequencia	= nr_seq_benef_intercambio_w;
			elsif (nr_seq_benef_simp_w IS NOT NULL AND nr_seq_benef_simp_w::text <> '') then
				select	max(nr_seq_segurado)
				into STRICT	nr_seq_segurado_w
				from	ptu_intercambio_benef_simp
				where	nr_sequencia	= nr_seq_benef_simp_w;
			end if;
			
			if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
				update	pls_segurado_carteira
				set	nr_cartao_intercambio	= lpad(cd_unimed_comp_w,4,'0')||lpad(cd_usuario_plano_comp_w,13,'0'),
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	nr_seq_segurado		= nr_seq_segurado_w;
				
				for r_c02_w in c02(	cd_unimed_comp_w,
							nr_seq_segurado_w) loop
					begin
					update	pls_segurado_repasse
					set	nr_cartao_intercambio = lpad(cd_unimed_comp_w,4,'0')||lpad(cd_usuario_plano_comp_w,13,'0'),
						dt_atualizacao = clock_timestamp(),
						nm_usuario = nm_usuario_p
					where	nr_sequencia = r_c02_w.nr_sequencia;
					end;
				end loop;
			end if;
		end if;
	end if;
	
	end;
end loop;

update	ptu_intercambio
set	dt_importacao_retorno	= clock_timestamp(),
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp()
where	nr_sequencia		= nr_seq_intercambio_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_importar_arquivo_a200_xml ( nr_seq_intercambio_p ptu_intercambio.nr_sequencia%type, nm_arquivo_p text, nm_usuario_p text) FROM PUBLIC;

