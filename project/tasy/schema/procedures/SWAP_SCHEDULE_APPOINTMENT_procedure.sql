-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE swap_schedule_appointment ( nr_seq_agenda_orig_p bigint, nr_seq_agenda_dest_p bigint, is_swap_p text, ds_schedules_p INOUT text) AS $body$
DECLARE


nr_sequencia_orig_w		agenda_paciente.nr_sequencia%type;
nr_sequencia_dest_w		agenda_paciente.nr_sequencia%type;
nr_minuto_duracao_orig_w	agenda_paciente.nr_minuto_duracao%type;
nr_minuto_duracao_dest_w	agenda_paciente.nr_minuto_duracao%type;
hr_inicio_orig_w		timestamp;
hr_inicio_dest_w		timestamp;
ie_status_agenda_orig_w		agenda_paciente.ie_status_agenda%type;
ie_status_agenda_dest_w		agenda_paciente.ie_status_agenda%type;
cd_agenda_orig_w		agenda_paciente.cd_agenda%type;
cd_agenda_dest_w		agenda_paciente.cd_agenda%type;
cd_pessoa_fisica_orig_w		pessoa_fisica.cd_pessoa_fisica%type;
cd_pessoa_fisica_dest_w		pessoa_fisica.cd_pessoa_fisica%type;
dt_agenda_orig_w		timestamp;
dt_agenda_dest_w		timestamp;
cd_estabelecimento_w		usuario.cd_estabelecimento%type;
nm_usuario_w			usuario.nm_usuario%type;
is_swap_w			varchar(2) := is_swap_p;


BEGIN

cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
nm_usuario_w          := wheb_usuario_pck.get_nm_usuario;


select	max(nr_sequencia),
	max(hr_inicio),
	max(nr_minuto_duracao),
	max(ie_status_agenda),
	max(cd_pessoa_fisica),
	max(cd_agenda),
	max(dt_agenda)
into STRICT	nr_sequencia_orig_w,
	hr_inicio_orig_w,
	nr_minuto_duracao_orig_w,
	ie_status_agenda_orig_w,
	cd_pessoa_fisica_orig_w,
	cd_agenda_orig_w,
	dt_agenda_orig_w
from	agenda_paciente
where	nr_sequencia = nr_seq_agenda_orig_p;

select	max(nr_sequencia),
	max(hr_inicio),
	max(nr_minuto_duracao),
	max(ie_status_agenda),
	max(cd_pessoa_fisica),
	max(cd_agenda),
	max(dt_agenda)
into STRICT	nr_sequencia_dest_w,
	hr_inicio_dest_w,
	nr_minuto_duracao_dest_w,
	ie_status_agenda_dest_w,
	cd_pessoa_fisica_dest_w,
	cd_agenda_dest_w,
	dt_agenda_dest_w
from	agenda_paciente
where	nr_sequencia = nr_seq_agenda_dest_p;

if (is_swap_w = 'S' and coalesce(cd_pessoa_fisica_dest_w::text, '') = '' and coalesce(pkg_i18n.get_user_locale, 'pt_BR') <> 'de_AT')	then
	is_swap_w := 'N';
end if;

if ((cd_pessoa_fisica_orig_w IS NOT NULL AND cd_pessoa_fisica_orig_w::text <> '') or coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'de_AT')	then
	update agenda_paciente set	ie_status_agenda = 'ZZ',
		cd_agenda = cd_agenda_dest_w,
		dt_agenda = dt_agenda_dest_w,
		hr_inicio = trunc(hr_inicio_dest_w, 'MI')
	where	nr_sequencia = nr_seq_agenda_orig_p;
end if;


if ((cd_pessoa_fisica_dest_w IS NOT NULL AND cd_pessoa_fisica_dest_w::text <> '') or coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'de_AT')	then
	if (is_swap_w = 'S')	then
		update agenda_paciente set
			cd_agenda = cd_agenda_orig_w,
			dt_agenda = dt_agenda_orig_w,
			hr_inicio = trunc(hr_inicio_orig_w, 'MI'),
			nm_usuario = nm_usuario_w,
			dt_atualizacao = clock_timestamp()
		where	nr_sequencia = nr_seq_agenda_dest_p;
	else
		update agenda_paciente set
			hr_inicio = trunc(hr_inicio_dest_w, 'MI') + 1 / (86400),
			dt_agenda = dt_agenda_dest_w,
			nm_usuario = nm_usuario_w,
			dt_atualizacao = clock_timestamp()
		where	nr_sequencia = nr_seq_agenda_dest_p;
	end if;
end if;


if ((cd_pessoa_fisica_orig_w IS NOT NULL AND cd_pessoa_fisica_orig_w::text <> '') or coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'de_AT')	then
	update agenda_paciente set
		ie_status_agenda = ie_status_agenda_orig_w,
		nm_usuario = nm_usuario_w,
		dt_atualizacao = clock_timestamp()
	where	nr_sequencia = nr_seq_agenda_orig_p;
end if;
commit;

if (nr_minuto_duracao_orig_w != nr_minuto_duracao_dest_w
		or is_swap_w != 'S')	then

	/* Below procedure is used to shift/re-arrange the swapped patient appointments */

	CALL SHIFT_SWAPPED_PATIENTS(cd_agenda_orig_w,
		cd_agenda_dest_w,
		dt_agenda_orig_w,
		dt_agenda_dest_w,
		nm_usuario_w
	);

	/* Below procedure is used to re-arrange all the empty schedules for CD_AGENDA_ORIG */

	ds_schedules_p := OBTER_HORARIOS_LIVRES_CIRURGIA(cd_estabelecimento_w, cd_agenda_orig_w, dt_agenda_orig_w, pkg_date_utils.end_of(dt_agenda_orig_w, 'DAY'), 0, '', '', '', nm_usuario_w, 'S', ds_schedules_p, 'N', null
	);
	commit;

	/* Below procedure is used to re-arrange all the empty schedules for CD_AGENDA_DEST */

	if (cd_agenda_orig_w != cd_agenda_dest_w
			or trunc(dt_agenda_orig_w) != trunc(dt_agenda_dest_w))	then

		ds_schedules_p := OBTER_HORARIOS_LIVRES_CIRURGIA(cd_estabelecimento_w, cd_agenda_dest_w, dt_agenda_dest_w, pkg_date_utils.end_of(dt_agenda_dest_w, 'DAY'), 0, '', '', '', nm_usuario_w, 'S', ds_schedules_p, 'N', null
		);
		commit;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE swap_schedule_appointment ( nr_seq_agenda_orig_p bigint, nr_seq_agenda_dest_p bigint, is_swap_p text, ds_schedules_p INOUT text) FROM PUBLIC;

