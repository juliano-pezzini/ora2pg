-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_indicador_niss ( dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint ) AS $body$
DECLARE

 
cd_setor_atendimento_w	integer;
qt_paciente_w		bigint;
qt_admitido_w		bigint;
qt_svd_w		bigint;
qt_respirador_w		bigint;
qt_cvc_w		bigint;
qt_cvu_w		bigint;
ie_classif_peso_w	varchar(15);
vl_dominio_w		varchar(15);
nr_atendimento_w	bigint;
dt_entrada_unidade_w	timestamp;
dt_final_w		timestamp;
ie_neonatal_w		varchar(1);
qt_dias_neo_w		varchar(10) := null;
cd_pessoa_fisica_w	varchar(10);
qt_dias_pf_w		double precision;
qt_ih_w			bigint;

c01 CURSOR FOR 
	SELECT	cd_setor_atendimento, 
		coalesce(ie_neonatal,'N') 
	from	niss_classif_setor b, 
		setor_atendimento a 
	where	a.nr_seq_classif_niss	= b.nr_sequencia 
	and	(a.nr_seq_classif_niss IS NOT NULL AND a.nr_seq_classif_niss::text <> '');

c02 CURSOR FOR 
	SELECT	distinct a.nr_atendimento, 
		coalesce(CASE WHEN obter_se_pac_disp_dia(dt_referencia_p,a.nr_atendimento,'CVC')='S' THEN 1  ELSE 0 END ,0), 
		coalesce(CASE WHEN obter_se_pac_disp_dia(dt_referencia_p,a.nr_atendimento,'Resp')='S' THEN 1  ELSE 0 END ,0), 
		coalesce(CASE WHEN obter_se_pac_disp_dia(dt_referencia_p,a.nr_atendimento,'SVD')='S' THEN 1  ELSE 0 END ,0), 
		coalesce(CASE WHEN obter_se_pac_disp_dia(dt_referencia_p,a.nr_atendimento,'CVU')='S' THEN 1  ELSE 0 END ,0), 
		obter_total_episodios_ih_niss(b.cd_setor_atendimento,a.nr_atendimento,dt_referencia_p,cd_estabelecimento_p) 
	from	atendimento_paciente a, 
		atend_paciente_unidade b 
	where	a.nr_atendimento 	= b.nr_atendimento 
	and	b.cd_setor_atendimento	= cd_setor_atendimento_w 
	and	b.dt_saida_interno 	>= PKG_DATE_UTILS.start_of(dt_referencia_p, 'dd', 0) 
	and	b.dt_entrada_unidade	< fim_dia(dt_referencia_p) 
	and	a.cd_estabelecimento	= cd_estabelecimento_p 
	and	coalesce(b.dt_saida_unidade, fim_dia(dt_referencia_p) + 1) > fim_dia(dt_referencia_p) 
	and	coalesce(a.dt_cancelamento::text, '') = '' 
	and	not exists (SELECT	x.cd_motivo_alta 
		from	motivo_alta x 
		where	x.ie_censo_diario = 'N' 
		and	a.cd_motivo_alta 	= x.cd_motivo_alta);


BEGIN 
 
qt_dias_neo_w := Obter_Param_Usuario(7022, 16, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_dias_neo_w);
 
dt_final_w	:= fim_dia(dt_referencia_p);
 
delete	from niss_invasividade 
where	dt_referencia between PKG_DATE_UTILS.start_of(dt_referencia_p, 'dd', 0) and dt_final_w 
and	cd_estabelecimento = cd_estabelecimento_p;
commit;
 
OPEN C01;
LOOP 
FETCH C01 into 
	cd_setor_atendimento_w, 
	ie_neonatal_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
 
	open C02;
	loop 
	fetch C02 into 
		nr_atendimento_w, 
		qt_cvc_w, 
		qt_respirador_w, 
		qt_svd_w, 
		qt_cvu_w, 
		qt_ih_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
 
		select	max(cd_pessoa_fisica), 
			min(dt_entrada_unidade) 
		into STRICT	cd_pessoa_fisica_w, 
			dt_entrada_unidade_w 
		from	atendimento_paciente a, 
			atend_paciente_unidade b 
		where	a.nr_atendimento	= b.nr_atendimento 
		and	a.nr_atendimento 	= nr_atendimento_w;
 
		qt_dias_pf_w	:= obter_idade_pf(cd_pessoa_fisica_w,dt_entrada_unidade_w,'DIA');
 
		if (ie_neonatal_w = 'S') then 
 
			select	obter_classif_peso_neo(coalesce(max(n.qt_peso_sala_parto),0)/1000) 
			into STRICT	ie_classif_peso_w 
			from	nascimento n 
			where	n.nr_atendimento = nr_atendimento_w;
 
			if (coalesce(ie_classif_peso_w::text, '') = '') then 
				select	obter_classif_peso_neo(obter_primeiro_sinal_vital(nr_atendimento_w,'Peso')) 
				into STRICT	ie_classif_peso_w 
				;
 
				if (coalesce(ie_classif_peso_w::text, '') = '') then 
					select	obter_classif_peso_neo(coalesce(p.qt_peso_nasc,0)/1000) 
					into STRICT	ie_classif_peso_w 
					from	pessoa_fisica p 
					where	p.cd_pessoa_fisica = cd_pessoa_fisica_w;
 
				end if;
			end if;
		end if;
 
		if (ie_neonatal_w = 'S') and (qt_dias_neo_w IS NOT NULL AND qt_dias_neo_w::text <> '') and (qt_dias_pf_w > campo_numerico(qt_dias_neo_w)) then 
			ie_classif_peso_w := 60;
		end if;
 
		qt_admitido_w	:= 0;
		qt_paciente_w	:= 1;
		 
		select	count(*) 
		into STRICT	qt_admitido_w 
		from	atendimento_paciente a, 
			atend_paciente_unidade b 
		where	a.nr_atendimento 	= b.nr_atendimento 
		and	b.cd_setor_atendimento	= cd_setor_atendimento_w 
		and	a.nr_atendimento 	= nr_atendimento_w 
		and	b.dt_saida_interno 	>= PKG_DATE_UTILS.start_of(dt_referencia_p, 'dd', 0) 
		and	b.dt_entrada_unidade	< fim_dia(dt_referencia_p) 
		and	a.cd_estabelecimento	= cd_estabelecimento_p 
		and	((coalesce(b.dt_saida_unidade, fim_dia(dt_referencia_p) + 1) between dt_referencia_p and fim_dia(dt_referencia_p)) 
		or (coalesce(b.dt_saida_unidade, fim_dia(dt_referencia_p) + 1) > fim_dia(dt_referencia_p))) 
		and (PKG_DATE_UTILS.start_of(b.dt_entrada_unidade, 'dd', 0) = PKG_DATE_UTILS.start_of(dt_referencia_p, 'dd', 0)) 
		and	coalesce(a.dt_cancelamento::text, '') = '' 
		and	not exists (SELECT	x.cd_motivo_alta 
				from	motivo_alta x 
				where	x.ie_censo_diario = 'N' 
				and	a.cd_motivo_alta 	= x.cd_motivo_alta);
 
		/*if	(PKG_DATE_UTILS.start_of(dt_entrada_unidade_w, 'dd', 0) = PKG_DATE_UTILS.start_of(dt_referencia_p, 'dd', 0)) then 
			qt_admitido_w	:= 1; 
		end if;*/
 
 
		insert into niss_invasividade( 
			nr_sequencia, 
			cd_estabelecimento, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			cd_setor_atendimento, 
			dt_referencia, 
			ie_classif_peso, 
			qt_paciente, 
			qt_admitido, 
			qt_svd, 
			qt_respirador, 
			qt_cvc, 
			qt_npp, 
			nr_atendimento, 
			qt_cvu, 
			qt_ih) 
		values ( 
			nextval('niss_invasividade_seq'), 
			cd_estabelecimento_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_setor_atendimento_w, 
			PKG_DATE_UTILS.start_of(dt_referencia_p, 'dd', 0), 
			ie_classif_peso_w, 
			qt_paciente_w, 
			qt_admitido_w, 
			qt_svd_w, 
			qt_respirador_w, 
			qt_cvc_w, 
			0, 
			nr_atendimento_w, 
			qt_cvu_w, 
			qt_ih_w);
		commit;
 
		end;
	end loop;
	close C02;
 
	end;
END LOOP;
CLOSE C01;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_indicador_niss ( dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint ) FROM PUBLIC;

