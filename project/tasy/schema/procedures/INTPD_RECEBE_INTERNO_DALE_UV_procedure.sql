-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_interno_dale_uv ( nm_usuario_p text, cd_estabelecimento_p bigint, xml_p xml) AS $body$
DECLARE

/*'
  Receber XML DALE_UV
'*/
nr_sequencia_w	 	bigint;
nr_seq_lote_w    	bigint;
nr_seq_retorno_w 	bigint;
nr_seq_tipo_mensagem_w	bigint;

C01 CURSOR FOR
SELECT	*
from	xmltable('/quitt/arzt' passing xml_p columns
	cd_cnes_arquivo		varchar(30)	path 'arzt_ik',
	ds_email		varchar(255)	path 'arzt_mail',
	dt_fim_assinatura 	timestamp       	path 'arzt_sigzeit');
c01_w	c01%ROWTYPE;

C02 CURSOR FOR
SELECT	*
from	xmltable('/quitt/unidav' passing xml_p columns
	cd_uni_dav 		varchar(50)	path  'unidav_ik',
	ds_uni_dav 		varchar(255)	path 'unidav_name',
	ds_endereco_uni_dav 	varchar(255)	path  'unidav_ort');
c02_w    c02%ROWTYPE;

C03 CURSOR FOR
SELECT *
from xmltable('/quitt/datei' passing xml_p columns
	ds_arquivo 		varchar(255)	path 'dat_nam',
	tipo_mensagem 		varchar(255)	path 'dat_typ',
	ds_id_objeto 		varchar(20)	path 'dat_obj_id',
	dt_recebimento_date 	timestamp  		path 'dat_dat',
	dt_recebimento_time	varchar(8)    	path 'dat_time',
	cd_cnes_destino 	varchar(50)	path 'dat_empf',
	nm_destino 		varchar(255)	path 'dat_empf_name',
	ie_status 		varchar(10)	path 'dat_status');
c03_w  c03%ROWTYPE;

C04 CURSOR FOR
SELECT 	*
from 	xmltable('/quitt/datei/dat_fehler' passing xml_p columns
	ds_erro 		varchar(4000) 	path 'fehler_text',
	ds_tag_erro 		varchar(255) 	path 'fehler_feld_tech',
	ds_campo_incorreto 	varchar(4000) 	path 'fehler_feld_fach',
	cd_erro 		varchar(30) 	path 'fehler_code');
c04_w  c04%ROWTYPE;


BEGIN

/*necessário para um to_char não retirar a hora da data nas rotinas que recebem valores desse tipo de dado*/

EXECUTE 'ALTER SESSION SET NLS_DATE_FORMAT = ''DD/MM/YYYY HH24:MI:SS''';

open C01;
loop
fetch C01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */

	if (c01_w.cd_cnes_arquivo IS NOT NULL AND c01_w.cd_cnes_arquivo::text <> '') then

		select	nextval('duv_lote_retorno_seq')
		into STRICT	nr_sequencia_w
		;

		nr_seq_lote_w := nr_sequencia_w;

		open C02;
		loop
		fetch C02 into
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */

			insert into DUV_LOTE_RETORNO(
				NR_SEQUENCIA,
				CD_ESTABELECIMENTO,
				DT_ATUALIZACAO,
				NM_USUARIO,
				DT_ATUALIZACAO_NREC,
				NM_USUARIO_NREC,
				CD_CNES_ARQUIVO,
				DS_EMAIL,
				DT_FIM_ASSINATURA,
				CD_UNI_DAV,
				DS_UNI_DAV,
				DS_ENDERECO_UNI_DAV,
				IE_STATUS)
			values (	nr_sequencia_w,
				cd_estabelecimento_p,
				clock_timestamp(),
				nm_usuario_p,
				null,
				null,
				c01_w.cd_cnes_arquivo,
				c01_w.ds_email,
				c01_w.dt_fim_assinatura,
				c02_w.cd_uni_dav,
				c02_w.ds_uni_dav,
				c02_w.ds_endereco_uni_dav,
				'1'); --Importado
		end loop;
		close C02;

	end if;

end loop;
close C01;

Open C03;
loop
fetch C03 into
	c03_w;
EXIT WHEN NOT FOUND; /* apply on C03 */

	if (c03_w.ds_arquivo IS NOT NULL AND c03_w.ds_arquivo::text <> '') then

		select	nextval('duv_retorno_seq')
		into STRICT	nr_sequencia_w
		;

		nr_seq_retorno_w := nr_sequencia_w;

		select	max(nr_sequencia)
		into STRICT	nr_seq_tipo_mensagem_w
		from	duv_tipo_mensagem
		where	CD_MENSAGEM = lower(c03_w.tipo_mensagem);

		insert into DUV_RETORNO(
			NR_SEQUENCIA,
			DT_ATUALIZACAO,
			NM_USUARIO,
			DT_ATUALIZACAO_NREC,
			NM_USUARIO_NREC,
			NR_SEQ_LOTE,
			DS_ARQUIVO,
			NR_SEQ_TIPO_MENSAGEM,
			DS_ID_OBJETO,
			DT_RECEBIMENTO,
			CD_CNES_DESTINO,
			NM_DESTINO,
			IE_STATUS)
		values (	nr_sequencia_w,
			clock_timestamp(),
			nm_usuario_p,
			NULL,
			NULL,
			nr_seq_lote_w,
			c03_w.ds_arquivo,
			nr_seq_tipo_mensagem_w,
			c03_w.ds_id_objeto,
			pkg_date_utils.get_DateTime(to_char(c03_w.dt_recebimento_date,'yyyy-mm-dd') || 'T' || c03_w.dt_recebimento_time),
			c03_w.cd_cnes_destino,
			c03_w.nm_destino,
			c03_w.ie_status );

		Open C04;
		loop
		fetch C04 into
			c04_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */

			if (c04_w.ds_erro IS NOT NULL AND c04_w.ds_erro::text <> '') then

			select	nextval('duv_retorno_erro_seq')
			into STRICT	nr_sequencia_w
			;

			Insert into DUV_RETORNO_ERRO(
				NR_SEQUENCIA,
				DT_ATUALIZACAO,
				NM_USUARIO,
				DT_ATUALIZACAO_NREC,
				NM_USUARIO_NREC,
				NR_SEQ_RETORNO,
				DS_ERRO,
				DS_TAG_ERRO,
				DS_CAMPO_INCORRETO,
				CD_ERRO)
			values ( nr_sequencia_w,
				clock_timestamp(),
				nm_usuario_p,
				null,
				null,
				nr_seq_retorno_w,
				c04_w.ds_erro,
				c04_w.ds_tag_erro,
				c04_w.ds_campo_incorreto,
				c04_w.cd_erro );

			end if;

		end loop;
		close C04;
	end if;

end loop;
close C03;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_interno_dale_uv ( nm_usuario_p text, cd_estabelecimento_p bigint, xml_p xml) FROM PUBLIC;

