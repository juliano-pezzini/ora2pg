-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_tributos_item_nf ( nr_sequencia_p bigint, nr_item_nf_p bigint, nr_seq_variacao_fiscal_p bigint, vl_liquido_p bigint, nm_usuario_p text) AS $body$
DECLARE



cd_cgc_emitente_w		varchar(14);
nr_base_calculo_icms_w		integer;
nr_aliquota_icms_w			integer;
nr_reducao_base_calculo_icms_w	integer;
cd_tributo_w			smallint;
vl_base_calculo_w			double precision;
vl_tributo_w			double precision;
vl_reducao_base_w		double precision;
nr_nota_fiscal_w			varchar(255);
cd_estabelecimento_w		smallint;
nr_sequencia_nf_w			bigint;
cd_serie_nf_w			nota_fiscal.cd_serie_nf%type;
qt_registro_w			bigint;

c01 CURSOR FOR
SELECT	cd_tributo
from	tributo
where	ie_tipo_tributo = 'ICMS'
and	ie_corpo_item = 'I'
and	ie_situacao = 'A'
and	((coalesce(cd_estabelecimento::text, '') = '') or
	(cd_estabelecimento IS NOT NULL AND cd_estabelecimento::text <> '' AND cd_estabelecimento = cd_estabelecimento_w));


BEGIN

select	count(*)
into STRICT	qt_registro_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

if (nr_seq_variacao_fiscal_p > 0) and (qt_registro_w > 0) then

	select	nr_nota_fiscal,
		nr_sequencia_nf,
		cd_estabelecimento,
		cd_cgc_emitente,
		cd_serie_nf
	into STRICT	nr_nota_fiscal_w,
		nr_sequencia_nf_w,
		cd_estabelecimento_w,
		cd_cgc_emitente_w,
		cd_serie_nf_w
	from	nota_fiscal
	where	nr_sequencia = nr_sequencia_p;

	select	coalesce(max(nr_base_calculo_icms),0),
		coalesce(max(nr_aliquota_icms),0),
		coalesce(max(nr_reducao_base_calculo_icms),0)
	into STRICT	nr_base_calculo_icms_w,
		nr_aliquota_icms_w,
		nr_reducao_base_calculo_icms_w
	from	fis_variacao_fiscal
	where	nr_sequencia = nr_seq_variacao_fiscal_p;

	if	((nr_base_calculo_icms_w > 0) or (nr_aliquota_icms_w > 0) or (nr_reducao_base_calculo_icms_w > 0)) then

		open C01;
		loop
		fetch C01 into
			cd_tributo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			delete from nota_fiscal_item_trib
			where	nr_sequencia = nr_sequencia_p
			and	nr_item_nf = nr_item_nf_p
			and	cd_tributo = cd_tributo_w;

			vl_base_calculo_w		:= round((dividir((vl_liquido_p * nr_base_calculo_icms_w), 100))::numeric,2);
			vl_reducao_base_w	:= round((dividir((vl_liquido_p * nr_reducao_base_calculo_icms_w), 100))::numeric,2);
			vl_tributo_w		:= round(vl_base_calculo_w * (dividir(nr_aliquota_icms_w, 100)),2);

			insert into nota_fiscal_item_trib(
				nr_sequencia,
				cd_estabelecimento,
				cd_cgc_emitente,
				cd_serie_nf,
				nr_sequencia_nf,
				nr_item_nf,
				cd_tributo,
				vl_tributo,
				dt_atualizacao,
				nm_usuario,
				vl_base_calculo,
				tx_tributo,
				vl_reducao_base,
				ie_rateio,
				vl_trib_nao_retido,
				vl_base_nao_retido,
				vl_trib_adic,
				vl_base_adic,
				nr_nota_fiscal)
			values (	nr_sequencia_p,
				cd_estabelecimento_w,
				cd_cgc_emitente_w,
				cd_serie_nf_w,
				nr_sequencia_nf_w,
				nr_item_nf_p,
				cd_tributo_w,
				vl_tributo_w,
				clock_timestamp(),
				nm_usuario_p,
				vl_base_calculo_w,
				nr_aliquota_icms_w,
				vl_reducao_base_w,
				'N',
				0,
				0,
				0,
				0,
				nr_nota_fiscal_w);
			end;
		end loop;
		close C01;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_tributos_item_nf ( nr_sequencia_p bigint, nr_item_nf_p bigint, nr_seq_variacao_fiscal_p bigint, vl_liquido_p bigint, nm_usuario_p text) FROM PUBLIC;

