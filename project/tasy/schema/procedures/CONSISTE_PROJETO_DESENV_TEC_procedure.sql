-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_projeto_desenv_tec ( nr_seq_proj_p bigint) AS $body$
DECLARE


qt_equipe_analise_w		bigint;
qt_equipe_solicitante_w 	bigint;
qt_requisito_def_w		bigint;
qt_requisito_inc_w		bigint;
qt_historico_envio_w		bigint;
qt_requisito_nao_aprov_w	bigint;
qt_equipe_desenv_w		bigint;
qt_historico_plano_w		bigint;
qt_proj_sem_reuniao_w		bigint;
qt_historico_risco_w		bigint;
qt_historico_impacto_w		bigint;
qt_cronograma_w			bigint;
nr_seq_estagio_w		bigint;
qt_requisito_nao_atend_w	bigint;
qt_posicionamento_atraso_w	bigint;
dt_fim_prev_w			timestamp;
ie_status_w			varchar(15);
dt_fim_real_w			timestamp;
dt_cancelamento_w		timestamp;
dt_projeto_w			timestamp;
qt_tabelas_criadas_w		bigint;
qt_anexo_modelagem_w		bigint;
nr_seq_classif_w		bigint;
ie_email_nao_inform_w		varchar(15);
ie_ficha_projeto_w		varchar(1);
nr_seq_proj_sup_w		proj_projeto.nr_seq_proj_sup%type;
qt_historico_prog_w		bigint;
qt_anexo_w			bigint;


BEGIN
delete from w_inconsistencia_proj
where nr_seq_projeto = nr_seq_proj_p;

select	dt_cancelamento,
	nr_seq_proj_sup
into STRICT	dt_cancelamento_w,
	nr_seq_proj_sup_w
from	proj_projeto
where	nr_sequencia = nr_seq_proj_p;

if (coalesce(dt_cancelamento_w::text, '') = '') then
	begin

	select	nr_seq_estagio,
		dt_fim_prev,
		ie_status,
		dt_fim_real,
		nr_seq_classif
	into STRICT	nr_seq_estagio_w,
		dt_fim_prev_w,
		ie_status_w,
		dt_fim_real_w,
		nr_seq_classif_w
	from	proj_projeto
	where	nr_sequencia = nr_seq_proj_p;

	/*Equipe de análise*/

	select	count(*)
	into STRICT	qt_equipe_analise_w
	from	proj_equipe_papel b,
		proj_equipe a
	where	a.nr_sequencia	= b.nr_seq_equipe
	and	a.nr_seq_proj	= nr_seq_proj_p
	and	a.nr_seq_equipe_funcao	= 10;

	if ( qt_equipe_analise_w = 0 ) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'Falta equipe de análise.');
	end if;

	/*Equipe do solicitante*/

	select	count(*)
	into STRICT	qt_equipe_solicitante_w
	from	proj_equipe_papel b,
		proj_equipe a
	where	a.nr_sequencia	= b.nr_seq_equipe
	and	a.nr_seq_proj	= nr_seq_proj_p
	and	a.nr_seq_equipe_funcao	= 13;

	if (qt_equipe_solicitante_w = 0) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'Falta equipe de solicitante.');
	end if;

	select	count(*)
	into STRICT	qt_requisito_def_w
	from	des_requisito_item b,
		des_requisito a
	where	a.nr_seq_projeto	= nr_seq_proj_p
	and	a.nr_sequencia		= b.nr_seq_requisito;

	if (qt_requisito_def_w = 0)  and (nr_seq_estagio_w not in (1, 20)) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'Falta definir os requisitos.');
	end if;

	select	count(*)
	into STRICT	qt_requisito_inc_w
	from	des_requisito_item b,
		des_requisito a
	where	a.nr_seq_projeto	= nr_seq_proj_p
	and	a.nr_sequencia		= b.nr_seq_requisito
	and	((coalesce(b.ie_status::text, '') = '') or (coalesce(b.ie_tipo_requisito::text, '') = ''));

	if (qt_requisito_inc_w > 0)  and (nr_seq_estagio_w <> 1) and (qt_requisito_def_w	> 0)then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'Existem requisitos sem status ou sem tipo definido.');
	end if;

	select	count(*)
	into STRICT	qt_historico_envio_w
	from	com_cliente_hist
	where	nr_seq_projeto	= nr_seq_proj_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	nr_seq_tipo	= 12;

	if (qt_historico_envio_w = 0) and (nr_seq_estagio_w not in (1, 2, 3, 20)) and -- Cadastro do projeto, Levantamento dos requisitos, Requisito definido, Analisando requisito
		(qt_requisito_def_w	> 0)then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter um histórico de envio dos requisitos para aprovação do cliente.');
	end if;

	select	count(*)
	into STRICT	qt_requisito_nao_aprov_w
	from	des_requisito
	where	nr_seq_projeto	= nr_seq_proj_p
	and	coalesce(dt_aprovacao::text, '') = '';

	if (qt_requisito_nao_aprov_w > 0) and (nr_seq_estagio_w not in (1, 2, 3, 4, 20)) and (qt_requisito_def_w	> 0)then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto possui requisitos não aprovados.');
	end if;

	select	count(*)
	into STRICT	qt_historico_envio_w
	from	com_cliente_hist
	where	nr_seq_projeto	= nr_seq_proj_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	nr_seq_tipo	= 13;

	if (qt_historico_envio_w = 0) and (nr_seq_estagio_w not in (1, 2, 3, 4, 5, 20)) and (qt_requisito_def_w	> 0) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter um histórico de requisitos aprovados pelo cliente.');
	end if;

	select	count(*)
	into STRICT	qt_equipe_desenv_w
	from	proj_equipe_papel b,
		proj_equipe a
	where	a.nr_sequencia	= b.nr_seq_equipe
	and	a.nr_seq_proj	= nr_seq_proj_p
	and	a.nr_seq_equipe_funcao	= 11; /*Equipe de desenvolvimento*/
	select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
	into STRICT	ie_email_nao_inform_w
	from	proj_equipe_papel b,
		proj_equipe a
	where	a.nr_sequencia	= b.nr_seq_equipe
	and	a.nr_seq_proj	= nr_seq_proj_p
	and	(b.nr_seq_funcao IS NOT NULL AND b.nr_seq_funcao::text <> '')
	and	coalesce(b.ds_email::text, '') = '';

	if (ie_email_nao_inform_w = 'S') then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'Devem ser informados os e-mails de todos os integrantes das equipes.');
	end if;


	if (qt_equipe_desenv_w = 0) and (ie_status_w in ('P', 'E', 'T', 'F')) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter equipe de desenvolvimento definida.');
	end if;

	select	count(*)
	into STRICT	qt_historico_plano_w
	from	com_cliente_hist
	where	nr_seq_projeto	= nr_seq_proj_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	nr_seq_tipo	= 14;

	if (qt_historico_plano_w = 0) and (ie_status_w in ('P', 'E', 'T', 'F')) and (nr_seq_estagio_w not in (1, 2, 3, 4, 5, 6, 7, 20)) and (nr_seq_estagio_w <> 7) and (nr_seq_classif_w <> 45) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter um histórico de envio do plano para aprovação do solicitante.');
	end if;

	select	count(*)
	into STRICT	qt_cronograma_w
	from	proj_cronograma
	where	nr_seq_proj		= nr_seq_proj_p
	and	ie_tipo_cronograma	= 'E';

	if (qt_cronograma_w = 0) and (nr_seq_estagio_w not in (1, 2, 3, 4, 5, 6, 20)) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter um cronograma de execução.');
	end if;

	select	count(*)
	into STRICT	qt_cronograma_w
	from	proj_cronograma
	where	nr_seq_proj		= nr_seq_proj_p
	and	ie_tipo_cronograma	= 'E'
	and	ie_situacao		= 'A'
	and	ie_classificacao	= 'D'
	and	coalesce(dt_aprovacao::text, '') = '';

	if (qt_cronograma_w > 0) and (ie_status_w in ('E', 'T', 'F')) and (nr_seq_estagio_w not in (1, 2, 3, 4, 5, 6, 7, 8, 20)) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter um cronograma de execução com data de aprovação informada.');
	end if;

	select	count(*)
	into STRICT	qt_historico_plano_w
	from	pessoa_fisica p,
		com_cliente_hist a
	where	a.nr_seq_projeto	= nr_seq_proj_p
	and	a.cd_profissional	= p.cd_pessoa_fisica
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	a.nr_seq_tipo	= 16
	--and	p.cd_cargo	= 519; /*diretor presidente*/
	and	p.cd_pessoa_fisica in (442,688,18636,40683,4654,42616);

	if (qt_cronograma_w > 0)  and (qt_historico_plano_w = 0) and (ie_status_w in ('E', 'T', 'F')) and (nr_seq_classif_w <> 45) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter um histórico de aprovação interna do plano pelo PMO.');
	end if;

	select	count(*)
	into STRICT	qt_historico_plano_w
	from	com_cliente_hist
	where	nr_seq_projeto	= nr_seq_proj_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	nr_seq_tipo	= 15;

	if (qt_historico_plano_w = 0) and (ie_status_w in ('P', 'E', 'T', 'F')) and (nr_seq_estagio_w not in (1, 2, 3, 4, 5, 6, 7, 20)) and (nr_seq_classif_w <> 45) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter um histórico de aprovação do plano pelo solicitante.');
	end if;

	if (nr_seq_estagio_w = 12) then

		if (coalesce(dt_fim_prev_w::text, '') = '') then
			CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'Projetos em programação devem possuir a data de fim previsto informada.');
		end if;

		if (coalesce(nr_seq_proj_sup_w::text, '') = '') then

			select	count(1)
			into STRICT	qt_historico_prog_w
			from	com_cliente_hist
			where	nr_seq_projeto = nr_seq_proj_p
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	nr_seq_tipo = 55; -- Ausência de modelagem de dados e objetos
			if (qt_historico_prog_w = 0) then

				select	count(1)
				into STRICT	qt_historico_prog_w
				from	com_cliente_hist
				where	nr_seq_projeto = nr_seq_proj_p
				and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
				and	nr_seq_tipo = 54; -- Aprovação de Modelagem de dados
				select	count(1)
				into STRICT	qt_anexo_w
				from	proj_documento
				where	nr_seq_proj = nr_seq_proj_p
				and	nr_seq_tipo_documento = 23; -- Modelo de dados
				if (qt_historico_prog_w = 0 or qt_anexo_w = 0) then
					/* Para avançar para o estágio "Programação", é necessário que exista um documento com o tipo "Modelagem de dados" e um histórico do tipo "Aprovação de modelagem de dados" ou um histórico
					do tipo "Ausência de modelagem de dados e objetos" */
					CALL inserir_inconsistencia_proj(nr_seq_proj_p, wheb_mensagem_pck.get_texto(1029792));
				end if;
			end if;
		end if;
	end if;

	select	count(*)
	into STRICT	qt_requisito_nao_atend_w
	from   	DES_REQUISITO a,
		DES_REQUISITO_item b
	where   a.nr_sequencia = b.nr_seq_requisito
	and	b.ie_status = 'N'
	and	a.nr_seq_projeto = nr_seq_proj_p;

	if (qt_requisito_nao_atend_w > 0 ) and (ie_status_w in ('T', 'F')) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'Para colocar o projeto em teste no cliente não podem existir requisitos não atendidos.');
	end if;

	select	count(*)
	into STRICT	qt_posicionamento_atraso_w
	from   	com_cliente_hist
	where   nr_seq_projeto  = nr_seq_proj_p
	and	NR_SEQ_TIPO	= 33
	and 	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

	if (coalesce(dt_fim_prev_w, clock_timestamp()) < coalesce(dt_fim_real_w, clock_timestamp())) and (nr_seq_estagio_w not in (17)) and (ie_status_w = 'E') and (qt_posicionamento_atraso_w = 0) then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto encontra-se em atraso (data fim prevista menor que a atual) e não há posicionamento ao cliente. Inclua um histórico do tipo Posição de projetos em atraso.');
	end if;

	select	coalesce(dt_inicio_real, dt_projeto)
	into STRICT	dt_projeto_w
	from	proj_projeto
	where	nr_sequencia = nr_seq_proj_p;

	if (dt_projeto_w < to_date('30/10/2013', 'dd/mm/yyyy')) then -- Data na qual foi realizada a alteração no PD, descrevendo a necessidade apenas no registro do histórico.
		select	count(*)
		into STRICT	qt_proj_sem_reuniao_w
		from	proj_ata a
		where	a.nr_seq_projeto = nr_seq_proj_p
		and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
		and	a.nr_seq_classif = 1;

		if	((qt_proj_sem_reuniao_w = 0) and (nr_seq_estagio_w not in (1, 2, 3, 4, 5, 6, 7, 8, 9, 20))) then
			CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa do registro de ata de reunião de implementação.');
		end if;

	else

		select 	count(*)
		into STRICT	qt_proj_sem_reuniao_w
		from 	com_cliente_hist
		where 	nr_seq_projeto = nr_seq_proj_p
		and   	nr_seq_tipo = 27
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

		if (qt_proj_sem_reuniao_w = 0) and (nr_seq_estagio_w not in (1, 2, 3, 4, 5, 6, 7, 8, 9, 20)) and (nr_seq_classif_w <> 45) then
			CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa de um registro de reunião de implementação.');
		end if;

	end if;

	select	count(*)
	into STRICT	qt_historico_risco_w
	from	com_cliente_hist
	where	nr_seq_projeto = nr_seq_proj_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	nr_seq_tipo = 17;
	/*
	if	(qt_historico_risco_w = 0 ) then

		select 	count(*)
		into	qt_historico_risco_w
		from	proj_risco_implantacao
		where	nr_seq_proj = nr_seq_proj_p;

		if	(qt_historico_risco_w = 0 ) and
			(nr_seq_estagio_w not in (1,2,3,4,5,6,7,8,9,20)) then
			inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter um histórico de Ausência de risco ou riscos registrados');
		end if;
	end if;
	*/
	end;

	select	count(*)
	into STRICT	qt_tabelas_criadas_w
	from 	tabela_sistema a
	where 	a.nr_seq_ordem_serv in ( SELECT	x.nr_seq_ordem
					 from	proj_ordem_servico x
					 where	x.nr_seq_proj = nr_seq_proj_p );

	if (qt_tabelas_criadas_w > 5) then
		select	count(*)
		into STRICT	qt_anexo_modelagem_w
		from	proj_documento
		where	nr_seq_proj = nr_seq_proj_p
		and	nr_seq_tipo_documento = 23;

		if (qt_anexo_modelagem_w = 0) then
			CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'O projeto precisa ter um anexo do tipo modelagem de dados.');
		end if;
	end if;

	select	max(CASE WHEN a.nr_seq_classif=45 THEN  'N'  ELSE CASE WHEN(select 1 from proj_ficha_projeto b where a.nr_sequencia = b.nr_seq_projeto and (dt_liberacao IS NOT NULL AND dt_liberacao::text <> ''))=1 THEN  'N'  ELSE 'S' END  END )
	into STRICT	ie_ficha_projeto_w
	from	proj_projeto a
	where nr_sequencia  = nr_seq_proj_p;

	if (ie_ficha_projeto_w = 'S') then
		CALL inserir_inconsistencia_proj(nr_seq_proj_p, 'Nenhuma ficha de projeto liberada informada.');
	end if;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_projeto_desenv_tec ( nr_seq_proj_p bigint) FROM PUBLIC;

