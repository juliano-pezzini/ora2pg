-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE nut_copiar_servicos_ant (nm_usuario_p text) AS $body$
DECLARE

 
nr_sequencia_w			bigint;
qt_servicos_w			bigint;
nr_seq_atend_acomp_novo_w	bigint;
ie_classif_setor_w		varchar(2);
nr_seq_servico_w		bigint;
ds_lista_dieta_w		varchar(1000);
ds_lista_suplemento_w		varchar(1000);
ds_lista_enteral_w		varchar(1000);
ds_mensagem_w			varchar(1000);
ie_serv_todos_setores_w		varchar(1);
nr_seq_atepacu_w		bigint;
cd_setor_atendimento_w		integer;

C01 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		a.nr_seq_servico, 
		a.dt_servico, 
		a.cd_setor_atendimento, 
		a.nr_atendimento, 
		a.ie_status, 
		a.ds_observacao, 
		a.ds_observacao_tec, 
		a.ie_acompanhante 
	from	nut_atend_serv_dia a, 
		atendimento_paciente b 
	where	trunc(a.dt_servico,'dd') = trunc(clock_timestamp() - interval '1 days','dd') 
	and	a.nr_atendimento = b.nr_atendimento 
	and	coalesce(b.dt_alta::text, '') = '' 
	and (not exists (SELECT	1 
			from	nut_atend_serv_dia_dieta c, 
				nut_atend_serv_dieta d 
			where	c.nr_sequencia = d.nr_seq_dieta 
			and	d.nr_seq_servico = a.nr_sequencia 
			and	(c.dt_suspensao IS NOT NULL AND c.dt_suspensao::text <> '')) 
	or	exists (select	1 
			from	nut_atend_serv_dia_dieta c, 
				nut_atend_serv_dieta d 
			where	c.nr_sequencia = d.nr_seq_dieta 
			and	d.nr_seq_servico = a.nr_sequencia 
			and	coalesce(c.dt_suspensao::text, '') = '')) 
	order by 1 desc;
	
Vet01	C01%RowType;

c02 CURSOR FOR 
	SELECT	b.cd_pessoa_fisica, 
		b.nm_pessoa_fisica, 
		b.ds_observacao, 
		b.nr_sequencia 
	from 	nut_atend_serv_dia a, 
		nut_atend_acompanhante b 
	where	a.nr_sequencia = b.nr_seq_atend_serv_dia 
	and	a.nr_sequencia = Vet01.nr_sequencia 
	and	((b.cd_pessoa_fisica IS NOT NULL AND b.cd_pessoa_fisica::text <> '') or (b.nm_pessoa_fisica IS NOT NULL AND b.nm_pessoa_fisica::text <> '')) 
	and	a.nr_seq_servico 	= Vet01.nr_seq_servico 
	and	dt_servico between inicio_dia(Vet01.dt_servico) and fim_dia(Vet01.dt_servico) 
	and	a.nr_atendimento = Vet01.nr_atendimento;
	
Vet02	C02%RowType;
	
c03 CURSOR FOR 
	SELECT cd_dieta 
	from  nut_atend_acomp_dieta a 
	where a.nr_seq_atend_acomp = Vet02.nr_sequencia;

Vet03	C03%RowType;

C04 CURSOR FOR 
	SELECT	b.nr_prescricao 
	from	nut_atend_serv_dia a, 
		prescr_medica b		 
	where	((to_date(a.dt_servico) between trunc(b.dt_inicio_prescr) and fim_dia(b.dt_validade_prescr)) 
	  or (coalesce(b.dt_validade_prescr::text, '') = '')) 
	and	b.nr_atendimento = Vet01.nr_atendimento 
	and	(coalesce(b.dt_liberacao,b.dt_liberacao_medico) IS NOT NULL AND (coalesce(b.dt_liberacao,b.dt_liberacao_medico))::text <> '') 
	and  ((exists (SELECT	1 from prescr_dieta f	 where (b.nr_prescricao = f.nr_prescricao)))   
	  or (exists (select 1 from rep_jejum c	 where (b.nr_prescricao = c.nr_prescricao)))   
	  or (exists (select 1 from prescr_material d where (b.nr_prescricao = d.nr_prescricao and d.ie_agrupador in (8,12)))) 
	  or (exists (select 1 from nut_pac e	 where (b.nr_prescricao = e.nr_prescricao ))) ) 
	and	a.nr_sequencia = nr_sequencia_w;
	
Vet04	C04%RowType;


BEGIN 
 
open C01;
loop 
fetch C01 into	 
	Vet01;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	 
	begin 
	select	count(*) 
	into STRICT	qt_servicos_w 
	from	nut_atend_serv_dia a, 
		nut_servico b 
	where	a.nr_seq_servico 	= b.nr_sequencia 
	and	b.ie_tipo_prescricao_servico = 1 /* Serviços do tipo Dieta oral não podem ter 2 registros no mesmo dia */
 
	and	a.nr_atendimento 	= Vet01.nr_atendimento 
	and	a.nr_Seq_servico 	= Vet01.nr_seq_servico 
	and	a.dt_servico between inicio_dia(Vet01.dt_servico + 1) and fim_dia(Vet01.dt_servico + 1);
	 
	if (qt_servicos_w = 0) then 
 
		select	coalesce(max(nr_seq_interno),0) 
		into STRICT	nr_seq_atepacu_w 
		from 	atend_paciente_unidade a 
		where	a.nr_atendimento = Vet01.nr_atendimento 
		and	Obter_Tipo_Unidade_Atend(a.nr_atendimento, a.nr_seq_interno, a.ie_passagem_setor) <> 'S' 
		and 	coalesce(a.dt_saida_unidade, a.dt_entrada_unidade + 9999) = 
			(SELECT max(coalesce(b.dt_saida_unidade, b.dt_entrada_unidade + 9999)) 
			from 	atend_paciente_unidade b 
			where 	b.nr_atendimento 	= Vet01.nr_atendimento 
			and	Obter_Tipo_Unidade_Atend(b.nr_atendimento, b.nr_seq_interno, b.ie_passagem_setor) <> 'S');
			 
		select	max(cd_setor_atendimento) 
		into STRICT	cd_setor_atendimento_w 
		from	atend_paciente_unidade 
		where	nr_seq_interno = nr_seq_atepacu_w;
				 
		if (cd_setor_atendimento_w IS NOT NULL AND cd_setor_atendimento_w::text <> '') then 
		 
			select	max(cd_classif_setor) 
			into STRICT	ie_classif_setor_w 
			from	setor_atendimento 
			where	cd_setor_atendimento = cd_setor_atendimento_w;
		 
			if (ie_classif_setor_w in (3,4)) then 
		 
				select	nextval('nut_atend_serv_dia_seq') 
				into STRICT	nr_sequencia_w 
				;
 
				insert into nut_atend_serv_dia( 
					nr_sequencia, 
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					nr_Seq_servico, 
					dt_servico, 
					cd_setor_atendimento, 
					nr_atendimento, 
					ie_status, 
					ds_observacao, 
					ds_observacao_tec, 
					ie_acompanhante) 
				values (	nr_sequencia_w, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					Vet01.nr_seq_servico, 
					Vet01.dt_servico + 1, 
					cd_setor_atendimento_w, 
					Vet01.nr_atendimento, 
					'A', 
					Vet01.ds_observacao, 
					Vet01.ds_observacao_tec, 
					Vet01.ie_acompanhante);
					 
				commit;
				 
				CALL Gerar_Dietas_Servico(nr_sequencia_w, nm_usuario_p);
				 
				open c02;
				loop 
				fetch c02 into 	 
					Vet02;
					EXIT WHEN NOT FOUND; /* apply on c02 */
						begin 
						 
						select	nextval('nut_atend_acompanhante_seq') 
						into STRICT	nr_seq_atend_acomp_novo_w 
						;
						 
						insert into nut_atend_acompanhante(	nr_sequencia, 
											nr_seq_atend_serv_dia, 
											cd_pessoa_fisica, 
											nm_pessoa_fisica, 
											ds_observacao, 
											dt_atualizacao, 
											dt_atualizacao_nrec, 
											nm_usuario, 
											nm_usuario_nrec) 
									values (	nr_seq_atend_acomp_novo_w, 
											nr_sequencia_w, 
											Vet02.cd_pessoa_fisica, 
											Vet02.nm_pessoa_fisica, 
											Vet02.ds_observacao, 
											clock_timestamp(), 
											clock_timestamp(), 
											nm_usuario_p, 
											nm_usuario_p);
											 
						open c03;
						loop 
						fetch c03 into 
							Vet03;
						EXIT WHEN NOT FOUND; /* apply on c03 */
							begin 
							 
							insert into nut_atend_acomp_dieta(	nr_sequencia, 
												nr_seq_atend_acomp, 
												cd_dieta, 
												dt_atualizacao, 
												dt_atualizacao_nrec, 
												nm_usuario, 
												nm_usuario_nrec) 
										values (nextval('nut_atend_acomp_dieta_seq'), 
												nr_seq_atend_acomp_novo_w, 
												Vet03.cd_dieta, 
												clock_timestamp(), 
												clock_timestamp(), 
												nm_usuario_p, 
												nm_usuario_p);
							 
							end;
						end loop;
						close c03;
						 
						end;
				end loop;
				close c02;
				 
				open c04;
				loop 
				fetch c04 into 
					Vet04;
				EXIT WHEN NOT FOUND; /* apply on c04 */
					begin 
					 
					CALL Definir_Prescricao_Nutricao(Vet04.nr_prescricao, 0, nr_sequencia_w, 'T', nm_usuario_p);
					 
					end;
				end loop;
				close c04;
			 
			end if;
		end if;
	end if;
	exception 
	when others then 
		CALL gravar_log_tasy(9090, wheb_mensagem_pck.get_texto(795194) || ' NUT_ATEND_SERV_DIA: '||Vet01.nr_sequencia||' - '||wheb_mensagem_pck.get_texto(307420)||':'||Vet01.nr_atendimento|| ' - ' || wheb_mensagem_pck.get_texto(793186) || ': ' || sqlerrm, 'Tasy');
	end;
		 
	end;
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nut_copiar_servicos_ant (nm_usuario_p text) FROM PUBLIC;

