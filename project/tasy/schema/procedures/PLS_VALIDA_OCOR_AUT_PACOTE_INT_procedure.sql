-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_valida_ocor_aut_pacote_int ( nr_seq_ocor_combinada_p pls_ocor_aut_combinada.nr_sequencia%type, nr_seq_ocorrencia_p pls_ocorrencia.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, nr_seq_motivo_glosa_p tiss_motivo_glosa.nr_sequencia%type, nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_execucao_p pls_execucao_requisicao.nr_sequencia%type, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type ) AS $body$
DECLARE

 
ie_valida_item_pacote_w		pls_valida_aut_pacote_inte.ie_valida_item_pacote%type;
ie_pacote_w					varchar(2);

nr_seq_procedimento_w		pls_guia_plano_proc.nr_sequencia%type;
cd_procedimento_w			pls_guia_plano_proc.cd_procedimento%type;
ie_origem_proced_w			pls_guia_plano_proc.ie_origem_proced%type;
											
ie_regra_w					varchar(1);
ie_tipo_ocorrencia_w		varchar(1);
nr_seq_oc_benef_w			pls_ocorrencia_benef.nr_sequencia%type;
ie_gerar_ocorrencia_w		varchar(1);
nr_seq_prestador_w			pls_requisicao.nr_seq_prestador%type;

c01 CURSOR FOR 
			SELECT	nr_sequencia, 
					cd_procedimento, 
					ie_origem_proced, 
					ie_pacote_ptu 
			from	pls_guia_plano_proc 
			where	nr_seq_guia = nr_seq_guia_p;

c02 CURSOR FOR 
			SELECT	nr_sequencia, 
					cd_procedimento, 
					ie_origem_proced, 
					ie_pacote_ptu 
			from	pls_requisicao_proc 
			where	nr_seq_requisicao = nr_seq_requisicao_p;											
											 

BEGIN 
 
begin 
	select	ie_valida_item_pacote 
	into STRICT	ie_valida_item_pacote_w 
	from	pls_valida_aut_pacote_inte 
	where	nr_seq_ocor_aut_combinada = nr_seq_ocor_combinada_p 
	and		ie_situacao = 'A';
exception 
when others then 
	ie_valida_item_pacote_w := 'N';
end;
 
 
if	(ie_valida_item_pacote_w IS NOT NULL AND ie_valida_item_pacote_w::text <> '' AND ie_valida_item_pacote_w = 'S') then 
 
	ie_gerar_ocorrencia_w := 'S';
	 
	if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then -- Autorização 
	 
		begin 
			select	nr_seq_prestador 
			into STRICT	nr_seq_prestador_w 
			from	pls_guia_plano 
			where	nr_sequencia = nr_seq_guia_p;
		exception 
		when others then 
			nr_seq_prestador_w := null;
		end;
		 
		open c01;
		loop 
		fetch c01 into 
			nr_seq_procedimento_w, 
			cd_procedimento_w, 
			ie_origem_proced_w, 
			ie_pacote_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin 
				if (coalesce(ie_pacote_w,'N') = 'S') then 
					exit; --Se achar algum com ie_pacote flegado, executa as validações necessárias. 
				end if;
			end;
		end loop;
		close c01;
		 
		--Se achou algum procedimento flegado como pacote, realiza as validações da ocorrência 
		if (ie_pacote_w = 'S') then 
			 
				if ( ie_utiliza_filtro_p	= 'S' ) then 
				/* Tratamento para filtros */
 
				SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, nr_seq_guia_p, null, null, nr_seq_procedimento_w, null, null, null, null, cd_procedimento_w, ie_origem_proced_w, null, null, nr_seq_prestador_w, nr_seq_ocorrencia_p, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
					 
					if ( ie_regra_w	= 'S' ) then 
						ie_gerar_ocorrencia_w	:= 'S';
					elsif ( ie_regra_w	in ('E','N') ) then 
						ie_gerar_ocorrencia_w	:= 'N';
					end if;
				else 
					ie_gerar_ocorrencia_w	:= 'S';
				end if;
				 
				--Somente irá validar minha regra e gerar ocorrência, caso tenha se encaixado nos filtros cadastrados na ocorrência 
				if ( ie_gerar_ocorrencia_w	= 'S' ) then 
					nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, null, nr_seq_guia_p, null, null, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 7, cd_estabelecimento_p, 'N', null, nr_seq_oc_benef_w, null, null, null, null);
									 
					CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p, 
									nr_seq_guia_p, null, null, 
									null, null, null, 
									null, null, null, 
									nm_usuario_p, cd_estabelecimento_p);
				end if;
		end if;		
		 
	elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then --Requisição 
	 
		begin 
			select	nr_seq_prestador 
			into STRICT	nr_seq_prestador_w 
			from	pls_requisicao 
			where	nr_sequencia = nr_seq_requisicao_p;
		exception 
		when others then 
			nr_seq_prestador_w := null;
		end;
		 
		open c02;
		loop 
		fetch c02 into	 
			nr_seq_procedimento_w, 
			cd_procedimento_w, 
			ie_origem_proced_w, 
			ie_pacote_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin 
				if (coalesce(ie_pacote_w,'N') = 'S') then 
					exit; --Se achar algum com ie_pacote flegado, executa as validações necessárias. 
				end if;
			end;
		end loop;
		close c02;
		 
		--Se achou algum procedimento flegado como pacote, realiza as validações da ocorrência 
		if (ie_pacote_w = 'S') then 
		 
			if ( ie_utiliza_filtro_p	= 'S' ) then 
				/* Tratamento para filtros*/
 
				SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, null, nr_seq_requisicao_p, null, null, null, nr_seq_procedimento_w, null, null, cd_procedimento_w, ie_origem_proced_w, null, null, nr_seq_prestador_w, nr_seq_ocorrencia_p, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
									 
					if ( ie_regra_w	= 'S' ) then 
						ie_gerar_ocorrencia_w	:= 'S';
					elsif ( ie_regra_w	in ('E','N') ) then 
						ie_gerar_ocorrencia_w	:= 'N';
					end if;					
			else 
				ie_gerar_ocorrencia_w	:= 'S';
			end if;
				 
			--Somente irá validar minha regra e gerar ocorrência, caso tenha se encaixado nos filtros cadastrados na ocorrência 
			if ( ie_gerar_ocorrencia_w	= 'S' ) then				 
				nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, nr_seq_requisicao_p, null, null, null, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 7, cd_estabelecimento_p, 'N', null, nr_seq_oc_benef_w, null, null, null, null);
								 
				CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p, 
								null, nr_seq_requisicao_p, null, 
								null, null, null, 
								null, null, null, 
								nm_usuario_p, cd_estabelecimento_p);
			end if;
			 
		end if;	
	end if;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_valida_ocor_aut_pacote_int ( nr_seq_ocor_combinada_p pls_ocor_aut_combinada.nr_sequencia%type, nr_seq_ocorrencia_p pls_ocorrencia.nr_sequencia%type, nr_seq_segurado_p pls_segurado.nr_sequencia%type, nr_seq_motivo_glosa_p tiss_motivo_glosa.nr_sequencia%type, nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_execucao_p pls_execucao_requisicao.nr_sequencia%type, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type ) FROM PUBLIC;

