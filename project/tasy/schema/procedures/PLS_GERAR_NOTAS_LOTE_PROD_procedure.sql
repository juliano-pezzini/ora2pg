-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_notas_lote_prod ( nr_seq_lote_p bigint, cd_serie_nf_p text, cd_operacao_nf_p bigint, dt_emissao_p timestamp, cd_natureza_operacao_p bigint, ds_observacao_p text, ds_complemento_p text, dt_base_venc_p timestamp, nr_nota_fiscal_p text, nm_usuario_p usuario.nm_usuario%type, ie_somente_nota_p text, nr_seq_prestador_p bigint, nr_seq_prestador_pgto_p bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_base_venc_p text, nr_seq_nota_fiscal_p INOUT bigint) AS $body$
DECLARE

/*
Criado o parâmetro ie_somente_nota_p para os casos onde foi gerado somente o título e deseja-se criar uma nota_fiscal para vincular ao título gerado
OS 108368 - 01/10/2008 - Paulo
*/
ds_tipo_despesa_w		varchar(255);
cd_conta_cred_w			varchar(20);
cd_cgc_prestador_w		varchar(14);
cd_pf_prestador_w		varchar(10);
ie_tipo_nota_w			varchar(3);
ie_geracao_nota_titulo_w	varchar(2);
ie_tipo_item_w			varchar(1);
ie_tipo_despesa_w		varchar(1);
ie_gerou_tributo_w		varchar(1)	:= 'N';
nr_nota_fiscal_w		numeric(20) := nr_nota_fiscal_p;
vl_resumo_w			double precision;
vl_mercadoria_w			double precision;
vl_total_nota_w			double precision;
vl_liberado_w			double precision;
vl_liquido_nota_w		double precision;
vl_imposto_w			double precision;
vl_reducao_base_w		double precision;
vl_trib_nao_retido_w		double precision;
vl_base_nao_retido_w		double precision;
vl_trib_adic_w			double precision;
vl_base_adic_w			double precision;
cd_procedimento_w		bigint;
nr_seq_trans_fin_baixa_conta_w	bigint;
cd_condicao_pagamento_w		bigint;
nr_seq_nota_fiscal_w		bigint;
nr_sequencia_nf_w		bigint	:= 9;
ie_origem_proced_w		bigint;
cd_conta_financ_w		bigint;
nr_titulo_w			bigint;
qt_dia_vencimento_w		bigint;
qt_existe_w			bigint;
nr_seq_evento_w			bigint;
pr_tributo_w			double precision;
cd_material_w			integer;
nr_item_nf_w			integer;
qt_notas_w			integer	:= 0;
ie_forma_pagamento_w		smallint;
dt_base_venc_w			timestamp;
dt_entrada_saida_w		timestamp;
vl_base_calculo_w		double precision;
nr_seq_conta_w			bigint;
ie_natureza_w			pls_evento.ie_natureza%type;
ie_parametro_34_w		varchar(1);
cd_local_estoque_w		nota_fiscal_item.cd_local_estoque%type;
cd_unidade_medida_estoque_w	nota_fiscal_item.cd_unidade_medida_estoque%type;
cd_unidade_medida_compra_w	nota_fiscal_item.cd_unidade_medida_compra%type;

C01 CURSOR FOR
	SELECT	'P' ie_tipo_item,
		a.ie_tipo_despesa,
		sum(a.vl_liberado) vl_liberado,
		CASE WHEN a.ie_tipo_despesa=1 THEN 'Procedimentos' WHEN a.ie_tipo_despesa=2 THEN 'Taxas' WHEN a.ie_tipo_despesa=3 THEN 'Diárias' WHEN a.ie_tipo_despesa=4 THEN 'Pacotes'  ELSE '' END  ds_tipo_despesa,
		b.cd_conta_cred,
		null nr_seq_evento
	from	pls_conta_medica_resumo a,
		pls_conta_proc b
	where	a.nr_seq_item = b.nr_sequencia
	and 	a.vl_liberado <> 0
	and	(a.cd_procedimento IS NOT NULL AND a.cd_procedimento::text <> '')
	and	a.nr_seq_lote_pgto = nr_seq_lote_p
	and	a.nr_seq_prestador_pgto = nr_seq_prestador_p
	and	((coalesce(a.ie_situacao::text, '') = '') or (a.ie_situacao != 'I'))
	group by a.ie_tipo_despesa,
		 b.cd_conta_cred
	
union all

	-- procedimento recurso de glosa
	SELECT	'P' ie_tipo_item,
		b.ie_tipo_despesa,
		sum(a.vl_liberado) vl_liberado,
		CASE WHEN b.ie_tipo_despesa=1 THEN 'Procedimentos' WHEN b.ie_tipo_despesa=2 THEN 'Taxas' WHEN b.ie_tipo_despesa=3 THEN 'Diárias' WHEN b.ie_tipo_despesa=4 THEN 'Pacotes'  ELSE '' END  ds_tipo_despesa,
		a.cd_conta_cred,
		null nr_seq_evento
	from	pls_conta_rec_resumo_item a,
		pls_conta_proc b,
		pls_rec_glosa_proc c
	where	a.nr_seq_lote_pgto = nr_seq_lote_p
	and	a.nr_seq_prestador_pgto = nr_seq_prestador_p
	and	c.nr_sequencia = a.nr_seq_proc_rec
	and	b.nr_sequencia = c.nr_seq_conta_proc
	and	((coalesce(a.ie_situacao::text, '') = '') or (a.ie_situacao != 'I'))
	and 	a.vl_liberado <> 0
	group by b.ie_tipo_despesa,
		 a.cd_conta_cred
	
union all

	select	'M' ie_tipo_item,
		a.ie_tipo_despesa,
		sum(a.vl_liberado) vl_liberado,
		CASE WHEN a.ie_tipo_despesa='1' THEN 'Gases medicinais' WHEN a.ie_tipo_despesa='2' THEN 'Medicamentos' WHEN a.ie_tipo_despesa='3' THEN 'Materiais' WHEN a.ie_tipo_despesa='7' THEN 'OPM'  ELSE '' END  ds_tipo_despesa,
		b.cd_conta_cred,
		null nr_seq_evento
	from	pls_conta_medica_resumo a,
		pls_conta_mat b
	where	a.nr_seq_item = b.nr_sequencia
	and	coalesce(a.cd_procedimento::text, '') = ''
	and	a.nr_seq_lote_pgto = nr_seq_lote_p
	and	a.nr_seq_prestador_pgto = nr_seq_prestador_p
	and	((coalesce(a.ie_situacao::text, '') = '') or (a.ie_situacao != 'I'))
	and 	a.vl_liberado <> 0
	group by a.ie_tipo_despesa,
		 b.cd_conta_cred
	
union all

	-- material recurso de glosa
	select	'M' ie_tipo_item,
		b.ie_tipo_despesa,
		sum(a.vl_liberado) vl_liberado,
		CASE WHEN b.ie_tipo_despesa=1 THEN 'Procedimentos' WHEN b.ie_tipo_despesa=2 THEN 'Taxas' WHEN b.ie_tipo_despesa=3 THEN 'Diárias' WHEN b.ie_tipo_despesa=4 THEN 'Pacotes'  ELSE '' END  ds_tipo_despesa,
		a.cd_conta_cred,
		null nr_seq_evento
	from	pls_conta_rec_resumo_item a,
		pls_conta_mat b,
		pls_rec_glosa_mat c
	where	a.nr_seq_lote_pgto = nr_seq_lote_p
	and	a.nr_seq_prestador_pgto = nr_seq_prestador_p
	and	c.nr_sequencia = a.nr_seq_mat_rec
	and	b.nr_sequencia = c.nr_seq_conta_mat
	and	((coalesce(a.ie_situacao::text, '') = '') or (a.ie_situacao != 'I'))
	and 	a.vl_liberado <> 0
	group by b.ie_tipo_despesa,
		 a.cd_conta_cred
	
union all

	select	'E' ie_tipo_item,
		'E' ie_tipo_despesa,
		sum(a.vl_movimento) vl_liberado,
		'Eventos' ds_tipo_despesa,
		a.cd_conta_contabil,
		a.nr_seq_evento nr_seq_evento
	from	pls_evento_movimento a
	where	a.nr_seq_prestador	= nr_seq_prestador_p
	and	a.nr_seq_lote_pgto	= nr_seq_lote_p
	and	coalesce(a.ie_cancelamento::text, '') = ''
	and 	a.vl_movimento <> 0
	group by a.nr_seq_evento, a.cd_conta_contabil;
	
C02 CURSOR FOR
	SELECT	a.cd_tributo
	from	pls_pag_prest_vencimento b,
		pls_pag_prest_venc_trib a
	where	a.nr_seq_vencimento = b.nr_sequencia
	and	b.nr_seq_pag_prestador = nr_seq_prestador_pgto_p
	group by
		a.cd_tributo;

BEGIN

ie_parametro_34_w := Obter_Param_Usuario(1282, 34, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_parametro_34_w);

cd_local_estoque_w 		:= obter_regra_atributo2('NOTA_FISCAL_ITEM', 'CD_LOCAL_ESTOQUE', 0, 'VLD', wheb_usuario_pck.get_cd_estabelecimento, obter_perfil_ativo, obter_funcao_ativa, nm_usuario_p);
cd_unidade_medida_estoque_w 	:= obter_regra_atributo2('NOTA_FISCAL_ITEM', 'CD_UNIDADE_MEDIDA_ESTOQUE', 0, 'VLD', wheb_usuario_pck.get_cd_estabelecimento, obter_perfil_ativo, obter_funcao_ativa, nm_usuario_p);
cd_unidade_medida_compra_w	:= obter_regra_atributo2('NOTA_FISCAL_ITEM', 'CD_UNIDADE_MEDIDA_COMPRA', 0, 'VLD', wheb_usuario_pck.get_cd_estabelecimento, obter_perfil_ativo, obter_funcao_ativa, nm_usuario_p);
cd_condicao_pagamento_w		:= obter_regra_atributo2('NOTA_FISCAL', 'CD_CONDICAO_PAGAMENTO', 0, 'VLD', wheb_usuario_pck.get_cd_estabelecimento, obter_perfil_ativo, obter_funcao_ativa, nm_usuario_p);

/* Consistência para verificar se algum resumo está incorreto (sem tipo de despesa) */

select	max(nr_seq_conta)
into STRICT	nr_seq_conta_w
from	(SELECT	max(a.nr_seq_conta) nr_seq_conta
	from	pls_conta_medica_resumo a,
		pls_conta_proc b
	where	a.nr_seq_item = b.nr_sequencia
	and	(a.cd_procedimento IS NOT NULL AND a.cd_procedimento::text <> '')
	and	a.nr_seq_lote_pgto = nr_seq_lote_p
	and	a.nr_seq_prestador_pgto = nr_seq_prestador_p
	and	coalesce(a.ie_tipo_despesa::text, '') = ''
	and	((coalesce(a.ie_situacao::text, '') = '') or (a.ie_situacao != 'I'))
	
union
		
	SELECT	max(a.nr_seq_conta) nr_seq_conta
	from	pls_conta_medica_resumo a,
		pls_conta_mat b
	where	a.nr_seq_item = b.nr_sequencia
	and	coalesce(a.cd_procedimento::text, '') = ''
	and	a.nr_seq_lote_pgto = nr_seq_lote_p
	and	a.nr_seq_prestador_pgto = nr_seq_prestador_p
	and	coalesce(a.ie_tipo_despesa::text, '') = ''
	and	((coalesce(a.ie_situacao::text, '') = '') or (a.ie_situacao != 'I'))) alias15;
		
if (nr_seq_conta_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(192541,'NR_SEQ_CONTA=' || nr_seq_conta_w);
	--R aise_application_error(-20011,'A conta ' || nr_seq_conta_w || ' não possui tipo de despesa no resumo, não permitindo a geração dessa nota.#@#@');
end if;

if (dt_emissao_p IS NOT NULL AND dt_emissao_p::text <> '') then

	dt_entrada_saida_w	:= to_date(to_char(dt_emissao_p, 'dd/mm/yyyy') || ' ' ||  to_char(clock_timestamp(),'hh24:mi:ss') ,'dd/mm/yyyy hh24:mi:ss');
end if;

select	sum(vl_vencimento)
into STRICT	vl_resumo_w
from	pls_pag_prest_vencimento
where	nr_seq_pag_prestador = nr_seq_prestador_pgto_p;

/*Parametros*/

select	nr_seq_trans_fin_baixa_conta	
into STRICT	nr_seq_trans_fin_baixa_conta_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

select	count(*)
into STRICT	qt_notas_w
from	nota_fiscal
where	nr_seq_pgto_prest	= nr_seq_prestador_pgto_p
and	ie_situacao	= '1';

if (qt_notas_w > 0) then

	CALL wheb_mensagem_pck.exibir_mensagem_abort(192542);
	--R aise_application_error(-20011,'Já foram geradas notas para este item.#@#@');
end if;

select	cd_pessoa_fisica,
	cd_cgc
into STRICT	cd_pf_prestador_w,
	cd_cgc_prestador_w
from	pls_prestador
where	nr_sequencia	= nr_seq_prestador_p;

select	coalesce(cd_condicao_pagamento_w,max(cd_condicao_pagamento)),
	max(ie_geracao_nota_titulo),
	max(qt_dia_vencimento)
into STRICT	cd_condicao_pagamento_w,
	ie_geracao_nota_titulo_w,
	qt_dia_vencimento_w
from	pls_prestador_pagto
where	nr_seq_prestador	= nr_seq_prestador_p;

if (coalesce(cd_condicao_pagamento_w,0) = 0) then

	CALL wheb_mensagem_pck.exibir_mensagem_abort(192543,'NR_SEQ_PREST=' || nr_seq_prestador_p || ';NM_PREST=' || substr(pls_obter_dados_prestador(nr_seq_prestador_p, 'N'),1,255));
	--R aise_application_error(-20011,'Não foi informada a condição de pagamento do prestador. Verifique! Prestador: '||

	--				nr_seq_prestador_p||' - '||substr(pls_obter_dados_prestador(nr_seq_prestador_p, 'N'),1,255)||'#@#@');
end if;

if (coalesce(ie_base_venc_p, 'N') = 'N') then

	/* Fazer tratamento para adicionar 1 mês, já faz isso para os vencimentos do pagamento */

	dt_base_venc_w	:= add_months(dt_base_venc_p,1);

	/* Obter dia após adicionar o mês, para que não ocorra de obter dia 31 em mês que não há dia 31. - ebcabral - 454989 - 05/06/2012 */

	if (coalesce(qt_dia_vencimento_w,0) = 0) then
		qt_dia_vencimento_w	:= to_char(dt_base_venc_w,'dd');
	end if;

	/* Tratar fevereiro */

	if (to_char(trunc(dt_base_venc_w,'dd'),'mm') = '02') then
		if (qt_dia_vencimento_w >= 29) then
			select	to_number(to_char(last_day(to_date(('01/' || to_char(trunc(dt_base_venc_w,'dd'),'mm/yyyy')),'dd/mm/yyyy')),'dd'))
			into STRICT	qt_dia_vencimento_w
			;
		end if;
	end if;

	begin
		dt_base_venc_w	:= to_date(lpad(to_char(qt_dia_vencimento_w),2,0) || to_char(trunc(dt_base_venc_w,'dd'),'mm/yyyy'),'dd/mm/yyyy');
	exception
	when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(192540,'NR_SEQ_PREST=' || nr_seq_prestador_p || ';NM_PREST=' || substr(pls_obter_dados_prestador(nr_seq_prestador_p, 'N'),1,255));
	end;
else
	dt_base_venc_w	:= dt_base_venc_p;
end if;

if (coalesce(cd_pf_prestador_w::text, '') = '') then
	ie_tipo_nota_w := 'EN';
else
	ie_tipo_nota_w := 'EF';
end if;

select	coalesce(max(nr_sequencia_nf),0) + 1
into STRICT	nr_sequencia_nf_w
from	nota_fiscal
where	nr_nota_fiscal	= nr_nota_fiscal_p;

vl_mercadoria_w		:= vl_resumo_w;
vl_total_nota_w		:= vl_resumo_w;

/*Criar a nota fiscal*/

insert into nota_fiscal(nr_sequencia,
		cd_estabelecimento,
		cd_cgc_emitente,
		cd_serie_nf,
		nr_nota_fiscal,
		nr_sequencia_nf,
		cd_operacao_nf,
		dt_emissao,
		dt_entrada_saida,
		ie_acao_nf,
		ie_emissao_nf,
		ie_tipo_frete,
		vl_mercadoria,
		vl_total_nota,
		qt_peso_bruto,
		qt_peso_liquido,
		dt_atualizacao,
		nm_usuario,
		ie_tipo_nota,
		cd_condicao_pagamento,
		cd_natureza_operacao,
		nr_seq_classif_fiscal,
		ds_observacao,
		vl_ipi,
		vl_descontos,
		vl_frete,
		vl_seguro,
		vl_despesa_acessoria,
		cd_pessoa_fisica,
		cd_cgc,
		nr_seq_pgto_prest,
		ie_situacao,
		nr_lote_contabil,
		ie_entregue_bloqueto)
	values (nextval('nota_fiscal_seq'),
		cd_estabelecimento_p,
		cd_cgc_prestador_w,
		cd_serie_nf_p,
		nr_nota_fiscal_p,
		nr_sequencia_nf_w,
		cd_operacao_nf_p,
		trunc(dt_emissao_p,'dd'),
		dt_entrada_saida_w,
		'1',
		'0',
		'0',
		vl_mercadoria_w,
		vl_total_nota_w,
		0,
		0,
		clock_timestamp(),
		nm_usuario_p,
		ie_tipo_nota_w,
		cd_condicao_pagamento_w,
		cd_natureza_operacao_p,
		null,
		ds_observacao_p,
		0,
		0,
		0,
		0,
		0,
		cd_pf_prestador_w,
		cd_cgc_prestador_w,
		nr_seq_prestador_pgto_p,
		'1',
		0,
		'N') returning nr_sequencia into nr_seq_nota_fiscal_w;

open C01; /* Obter itens da conta */
loop
fetch C01 into	
	ie_tipo_item_w,
	ie_tipo_despesa_w,
	vl_liberado_w,
	ds_tipo_despesa_w,
	cd_conta_cred_w,
	nr_seq_evento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (ie_tipo_despesa_w IS NOT NULL AND ie_tipo_despesa_w::text <> '') then
		if (ie_tipo_item_w	= 'P') then
			select	coalesce(max(cd_procedimento),0),
				coalesce(max(ie_origem_proced),0)
			into STRICT	cd_procedimento_w,
				ie_origem_proced_w
			from	pls_tipo_desp_proc
			where	ie_tipo_despesa	= ie_tipo_despesa_w
			and	cd_estabelecimento	= cd_estabelecimento_p;
			if (cd_procedimento_w = 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(192544,'DS_DESP=' || ds_tipo_despesa_w);
				--R aise_application_error(-20011,'Não foi cadastrado um procedimento para o tipo de despesa ' || ds_tipo_despesa_w || '#@#@');
			end if;
			
			cd_conta_financ_w := pls_obter_conta_financ_regra(	'PP', null, cd_estabelecimento_p, null, null, null, null, nr_seq_prestador_p, null, null, null, null, null, null, null, null, null, cd_conta_financ_w); /* Obter primeiro a conta financeira do plano */
							
			if (coalesce(cd_conta_financ_w::text, '') = '') then
				cd_conta_financ_w := obter_conta_financeira('S', cd_estabelecimento_p, null, cd_procedimento_w, ie_origem_proced_w, null, null, null, null, cd_conta_financ_w, null, cd_operacao_nf_p, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
			end if;
		elsif (ie_tipo_item_w	= 'M') then
			begin
			select	max(b.cd_material)
			into STRICT	cd_material_w
			from	pls_tipo_desp_mat	a,
				pls_material 		b
			where	a.nr_seq_material	= b.nr_sequencia
			and	a.ie_tipo_despesa 	= ie_tipo_despesa_w
			and	a.cd_estabelecimento	= cd_estabelecimento_p;
			exception
			when others then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(192545,'DS_DESP=' || ds_tipo_despesa_w);
				--R aise_application_error(-20011,'Não foi cadastrado material para o tipo de despesa ' || ds_tipo_despesa_w || '#@#@');
			end;
			
			cd_conta_financ_w := pls_obter_conta_financ_regra(	'PP', null, cd_estabelecimento_p, null, null, null, null, nr_seq_prestador_p, null, null, null, null, null, null, null, null, null, cd_conta_financ_w); /* Obter primeiro a conta financeira do plano */
							
			if (coalesce(cd_conta_financ_w::text, '') = '') then
				cd_conta_financ_w := obter_conta_financeira('S', cd_estabelecimento_p, cd_material_w, null, null, null, null, null, null, cd_conta_financ_w, null, cd_operacao_nf_p, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
			end if;
		elsif (ie_tipo_item_w	= 'E') then
			
			begin
				select	ie_natureza
				into STRICT	ie_natureza_w
				from	pls_evento
				where	nr_sequencia	= nr_seq_evento_w;
			exception
			when others then
				ie_natureza_w	:= null;
			end;
			
			if (coalesce(ie_natureza_w,'X') = 'D') and (coalesce(vl_liberado_w,0) > 0) then
				vl_liberado_w	:= vl_liberado_w * (-1);
			end if;
			
			-- como não tem uma ordenação e não é usado em mais de um lugar, não tem motivo de ser um cursor
			select	max(a.cd_procedimento),
				max(a.ie_origem_proced),
				max(a.cd_material)
			into STRICT	cd_procedimento_w,
				ie_origem_proced_w,
				cd_material_w
			from	pls_evento_regra_item_nf a
			where	a.nr_seq_evento	= nr_seq_evento_w
			and	dt_base_venc_w	between trunc(a.dt_inicio_vigencia,'dd') and fim_dia(coalesce(a.dt_fim_vigencia,dt_base_venc_w));
			
			if (coalesce(cd_procedimento_w::text, '') = '') and (coalesce(cd_material_w::text, '') = '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(192546);
				--R aise_application_error(-20011,'Não existe uma regra com procedimento ou material.');
			end if;
			
			cd_conta_financ_w := pls_obter_conta_financ_regra(	'PP', null, cd_estabelecimento_p, null, null, null, null, nr_seq_prestador_p, null, null, null, null, null, null, null, null, null, cd_conta_financ_w); /* Obter primeiro a conta financeira do plano */
							
			if (coalesce(cd_conta_financ_w::text, '') = '') then
				cd_conta_financ_w := obter_conta_financeira('S', cd_estabelecimento_p, cd_material_w, cd_procedimento_w, ie_origem_proced_w, null, null, null, null, cd_conta_financ_w, null, cd_operacao_nf_p, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
			end if;
		end if;
			
		select	coalesce(max(nr_item_nf),0) + 1
		into STRICT	nr_item_nf_w
		from	nota_fiscal_item
		where	nr_sequencia	= nr_seq_nota_fiscal_w;
		
		insert into nota_fiscal_item(nr_sequencia,
				cd_estabelecimento,
				cd_cgc_emitente,
				cd_serie_nf,
				nr_nota_fiscal,
				nr_sequencia_nf,
				nr_item_nf,
				cd_natureza_operacao,
				qt_item_nf,
				vl_unitario_item_nf,
				vl_total_item_nf,
				vl_liquido,
				vl_frete,
				vl_desconto,
				vl_despesa_acessoria,
				vl_desconto_rateio,
				vl_seguro,
				nm_usuario,
				dt_atualizacao,
				ds_complemento,
				cd_procedimento,
				ie_origem_proced,
				nr_seq_conta_financ,
				cd_material,
				cd_conta_contabil,
				cd_local_estoque,
				cd_unidade_medida_estoque,
				cd_unidade_medida_compra)
			values (nr_seq_nota_fiscal_w,
				cd_estabelecimento_p,
				cd_cgc_prestador_w,
				cd_serie_nf_p,
				nr_nota_fiscal_w,
				nr_sequencia_nf_w,
				nr_item_nf_w,
				cd_natureza_operacao_p,
				1,
				vl_liberado_w,
				vl_liberado_w,
				vl_liberado_w,
				0,
				0,
				0,
				0,
				0,
				nm_usuario_p,
				clock_timestamp(),
				ds_complemento_p,
				CASE WHEN ie_tipo_item_w='M' THEN null  ELSE cd_procedimento_w END ,
				CASE WHEN ie_tipo_item_w='M' THEN null  ELSE ie_origem_proced_w END ,
				CASE WHEN cd_conta_financ_w=0 THEN null  ELSE cd_conta_financ_w END ,
				CASE WHEN ie_tipo_item_w='P' THEN null  ELSE cd_material_w END ,
				cd_conta_cred_w,
				cd_local_estoque_w,
				cd_unidade_medida_estoque_w,
				cd_unidade_medida_compra_w);
		end if;
	end;
end loop;
close C01;

/* Francisco - OS 222072 - Gerar tributos conforme o lote de pagamento */

for r_c02_w in C02 loop
	
	ie_gerou_tributo_w	:= 'S';
	
	select	sum(pr_tributo),
		sum(vl_imposto),
		sum(vl_reducao),
		sum(vl_nao_retido),
		sum(vl_base_nao_retido),
		sum(vl_trib_adic),
		sum(vl_base_adic),
		sum(vl_base_calculo)
	into STRICT	pr_tributo_w,
		vl_imposto_w,
		vl_reducao_base_w,
		vl_trib_nao_retido_w,
		vl_base_nao_retido_w,
		vl_trib_adic_w,
		vl_base_adic_w,
		vl_base_calculo_w
	from	pls_pag_prest_vencimento b,
		pls_pag_prest_venc_trib a
	where	a.nr_seq_vencimento	= b.nr_sequencia
	and	b.nr_seq_pag_prestador	= nr_seq_prestador_pgto_p
	and	a.cd_tributo		= r_c02_w.cd_tributo
	and	a.ie_pago_prev <> 'R';
	
	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal_trib
	where	nr_sequencia	= nr_seq_nota_fiscal_w
	and	cd_tributo	= r_c02_w.cd_tributo;
	
	if (qt_existe_w = 0) then
	
		insert into nota_fiscal_trib(
				nr_sequencia,
				cd_tributo,
				vl_tributo,
				dt_atualizacao,
				nm_usuario,
				vl_base_calculo,
				tx_tributo,
				vl_reducao_base,
				vl_trib_nao_retido,
				vl_base_nao_retido,
				vl_trib_adic,
				vl_base_adic,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_origem_trib,
				nr_seq_interno
		) values (
				nr_seq_nota_fiscal_w,
				r_c02_w.cd_tributo,
				vl_imposto_w,
				clock_timestamp(),
				nm_usuario_p,
				vl_base_calculo_w,
				pr_tributo_w,
				vl_reducao_base_w,
				vl_trib_nao_retido_w,
				vl_base_nao_retido_w,
				vl_trib_adic_w,
				vl_base_adic_w,
				clock_timestamp(),
				nm_usuario_p,
				'LP',
				nextval('nota_fiscal_trib_seq'));
	end if;
end loop;

/* Francisco - OS 222072 - Alterei para só gerar os tributos através da procedure abaixo quando não obter pelo lote */

if (ie_gerou_tributo_w = 'N') then
	CALL gerar_tributos_fornecedor(nr_seq_nota_fiscal_w, null, nm_usuario_p, dt_emissao_p);
end if;
--gerar_imposto_nf(nr_seq_nota_fiscal_w, nm_usuario_p, null, null);
CALL atualiza_total_nota_fiscal(nr_seq_nota_fiscal_w, nm_usuario_p);

select	coalesce(max(ie_forma_pagamento),0)
into STRICT	ie_forma_pagamento_w
from	condicao_pagamento
where	cd_condicao_pagamento	= cd_condicao_pagamento_w;

-- busca o nr_titulo para vincular aos vencimentos da nota
select	max(nr_titulo)
into STRICT	nr_titulo_w
from	titulo_pagar
where	nr_seq_pls_pag_prest = nr_seq_prestador_pgto_p;

if (ie_forma_pagamento_w = 10) then -- Conforme vencimentos 
	select	coalesce(vl_total_nota,0)
	into STRICT	vl_liquido_nota_w
	from	nota_fiscal
	where	nr_sequencia	= nr_seq_nota_fiscal_w;
	
	insert into nota_fiscal_venc(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_nota_fiscal,
			nr_sequencia_nf,
			dt_vencimento,
			vl_vencimento,
			ie_origem,
			nr_titulo_pagar)
		values (nr_seq_nota_fiscal_w,
			nm_usuario_p,
			clock_timestamp(),
			cd_estabelecimento_p,
			cd_cgc_prestador_w,
			cd_serie_nf_p,
			nr_nota_fiscal_w,
			1,
			dt_base_venc_w,
			vl_liquido_nota_w,
			'N',
			nr_titulo_w);
else
	CALL gerar_nota_fiscal_venc(nr_seq_nota_fiscal_w, coalesce(dt_base_venc_p,dt_base_venc_w));
	
	update 	nota_fiscal_venc
	set	nr_titulo_pagar = nr_titulo_w
	where	nr_sequencia = nr_seq_nota_fiscal_w;
end if;

if (coalesce(ie_parametro_34_w,'S') <> 'S') then

	update	nota_fiscal
	set	dt_atualizacao_estoque = clock_timestamp()
	where	nr_sequencia = nr_seq_nota_fiscal_w;
	
end if;

if (ie_somente_nota_p = 'N') then

	if (coalesce(nr_titulo_w,0) = 0) then /* Se ainda não tem título gerado */
		CALL gerar_titulo_pagar_nf(nr_seq_nota_fiscal_w, nm_usuario_p);
		
		select	max(nr_titulo)
		into STRICT	nr_titulo_w
		from	titulo_pagar
		where	nr_seq_pls_pag_prest	= nr_seq_prestador_pgto_p;
		
		if (coalesce(nr_titulo_w,0) > 0) then
			CALL gerar_bloqueto_tit_rec(nr_titulo_w, 'OPSPPM');
		end if;
	else
		update	titulo_pagar
		set	nr_seq_nota_fiscal	= nr_seq_nota_fiscal_w
		where	nr_titulo		= nr_titulo_w;
	end if;
	
	update	titulo_pagar
	set	nr_seq_trans_fin_baixa	= nr_seq_trans_fin_baixa_conta_w
	where	nr_titulo in (	SELECT	nr_titulo
				from	titulo_pagar
				where	nr_seq_pls_pag_prest = nr_seq_prestador_p);
end if;

nr_seq_nota_fiscal_p := nr_seq_nota_fiscal_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_notas_lote_prod ( nr_seq_lote_p bigint, cd_serie_nf_p text, cd_operacao_nf_p bigint, dt_emissao_p timestamp, cd_natureza_operacao_p bigint, ds_observacao_p text, ds_complemento_p text, dt_base_venc_p timestamp, nr_nota_fiscal_p text, nm_usuario_p usuario.nm_usuario%type, ie_somente_nota_p text, nr_seq_prestador_p bigint, nr_seq_prestador_pgto_p bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_base_venc_p text, nr_seq_nota_fiscal_p INOUT bigint) FROM PUBLIC;

