-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE same_atender_solic_pront ( ds_prontuario_p text, nr_seq_solic_p bigint, ds_consistencia_p INOUT text, ds_mensagem_p INOUT text, ds_pront_falta_p INOUT text, nm_usuario_p text) AS $body$
DECLARE


ds_prontuario_w			varchar(2000);
ie_contador_w			bigint	:= 0;
tam_lista_w			bigint;
ie_pos_virgula_w		smallint;
nr_seq_pront_w			bigint;
nr_seq_solic_w			bigint;
nr_seq_solic_atual_w		bigint;
ds_prontuario_solic_w		varchar(2000);
ds_pront_solic_dif_w		varchar(2000);
tam_lista_solic_w		bigint;
ie_pos_virgula_solic_w		smallint;
ie_contador_solic_w		bigint	:= 0;
qt_pront_solic_w		bigint;
nr_seq_solicitacao_w		bigint;
cd_pessoa_solicitante_w		varchar(10);
cd_setor_solicitante_w		bigint;
nr_seq_prontuario_w		bigint;
ie_status_w			varchar(5);
ds_local_pront_w		varchar(100);
nr_atendimento_w		bigint;
ds_tipo_w			varchar(40);
dt_devolucao_w			timestamp;
dt_recebimento_w		timestamp;
ie_atualizar_data_devol_w	varchar(1);
qt_dias_devolucao_w		bigint;
ie_atual_setor_atend_pront_w	varchar(1);

c01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_pessoa_solicitante,
		cd_setor_solicitante
	from	same_solic_pront
	where	nr_sequencia		= nr_seq_solic_p;
	
c02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_atendimento,
		a.ie_status,
		substr(obter_local_prontuario(a.nr_sequencia),1,100),
		substr(obter_valor_dominio(1219, a.ie_tipo),1,40),
		b.dt_devolucao,
		b.dt_recebimento
	from	same_solic_pront_envelope b,
		same_prontuario a
	where	b.nr_seq_solic		= nr_seq_solic_atual_w
	and	a.nr_sequencia		= b.nr_seq_prontuario;
	

BEGIN

qt_dias_devolucao_w 		:= coalesce(Obter_Valor_Param_Usuario(941, 42, Obter_perfil_Ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),0);
ie_atualizar_data_devol_w 	:= coalesce(Obter_Valor_Param_Usuario(941, 173, Obter_perfil_Ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');
ie_atual_setor_atend_pront_w 	:= coalesce(Obter_Valor_Param_Usuario(941, 112, Obter_perfil_Ativo, nm_usuario_p,  wheb_usuario_pck.get_cd_estabelecimento),'N');

ds_prontuario_w		:= ds_prontuario_p;

while	(ds_prontuario_w IS NOT NULL AND ds_prontuario_w::text <> '') or ie_contador_w > 200 loop
	begin
	tam_lista_w		:= length(ds_prontuario_w);
	ie_pos_virgula_w	:= position(',' in ds_prontuario_w);

	if (ie_pos_virgula_w <> 0) then
		nr_seq_pront_w	:= substr(ds_prontuario_w,1,(ie_pos_virgula_w - 1));
		ds_prontuario_w	:= substr(ds_prontuario_w,(ie_pos_virgula_w + 1),tam_lista_w);
	end if;

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_solic_w
	from	same_solic_pront_envelope b,
		same_solic_pront a
	where	a.nr_sequencia = b.nr_seq_solic
	and	a.ie_status not in ('C', 'E','R','D')
	and	a.nr_sequencia      = nr_seq_solic_p
	and	b.nr_seq_prontuario = nr_seq_pront_w;

	if (coalesce(nr_seq_solic_w::text, '') = '') then

		select	max(a.nr_sequencia)
		into STRICT	nr_seq_solic_w
		from	same_solic_pront_envelope b,
			same_solic_pront a
		where	a.nr_sequencia = b.nr_seq_solic
		and	a.ie_status not in ('C', 'E','R','D')
		and	b.nr_seq_prontuario = nr_seq_pront_w;

	end if;

	if (nr_seq_solic_w = nr_seq_solic_p) then
		nr_seq_solic_atual_w	:= nr_seq_solic_w;
		ds_prontuario_solic_w	:= ds_prontuario_solic_w || nr_seq_pront_w || ',';
	elsif (nr_seq_solic_w <> nr_seq_solic_p) then
		ds_pront_solic_dif_w	:= ds_pront_solic_dif_w || nr_seq_pront_w || ',';
	end if;

	ie_contador_w	:= ie_contador_w + 1;
	end;
end loop;

select	obter_select_concatenado_bv('
		select nr_seq_prontuario from same_solic_pront_envelope
		where nr_seq_solic = :nr_seq_solic
		and substr(obter_se_contido(nr_seq_prontuario,:ds_prontuario),1,1) = ' || chr(39) || 'N' || chr(39),
		'nr_seq_solic=' || nr_seq_solic_p || '#@#@' || 'ds_prontuario=' || ds_prontuario_solic_w, ',') || ','
into STRICT	ds_pront_falta_p
;

while	(ds_prontuario_solic_w IS NOT NULL AND ds_prontuario_solic_w::text <> '') loop
	begin
	tam_lista_solic_w	:= length(ds_prontuario_solic_w);
	ie_pos_virgula_solic_w	:= position(',' in ds_prontuario_solic_w);

	if (ie_pos_virgula_solic_w <> 0) then
		nr_seq_pront_w		:= substr(ds_prontuario_solic_w,1,(ie_pos_virgula_solic_w - 1));
		ds_prontuario_solic_w	:= substr(ds_prontuario_solic_w,(ie_pos_virgula_solic_w + 1),tam_lista_solic_w);
	end if;	
	ie_contador_solic_w	:= ie_contador_solic_w + 1;	
	end;
end loop;

if (nr_seq_solic_p IS NOT NULL AND nr_seq_solic_p::text <> '') then
	begin	
	/* Obter quantidade de prontuários*/

	select	count(*)
	into STRICT	qt_pront_solic_w
	from	same_solic_pront_envelope
	where	nr_seq_solic = nr_seq_solic_p;
	
	/* Verificar se a quantidade de prontuários lançados é igual a quantidade de prontuários da solicitação a ser atendida */

	if (ie_contador_solic_w = qt_pront_solic_w) then
		begin		
		open c01;
		loop
		fetch c01 into	
			nr_seq_solicitacao_w,
			cd_pessoa_solicitante_w,
			cd_setor_solicitante_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
	
			/* Atende a solicitação */

			update	same_solic_pront
			set	ie_status	= 'E',
				dt_atualizacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				dt_entrega	= clock_timestamp(),
				dt_devolucao_prevista = CASE WHEN ie_atualizar_data_devol_w='S' THEN clock_timestamp() + qt_dias_devolucao_w  ELSE dt_devolucao_prevista END
			where	nr_sequencia	= nr_seq_solicitacao_w;
					
			open c02;
			loop
			fetch c02 into	
				nr_seq_prontuario_w,
				nr_atendimento_w,
				ie_status_w,
				ds_local_pront_w,
				ds_tipo_w,
				dt_devolucao_w,
				dt_recebimento_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				if (ie_status_w = '1') and (coalesce(dt_devolucao_w::text, '') = '') and (coalesce(dt_recebimento_w::text, '') = '') then
					begin
					update	same_prontuario
					set	ie_status	= '8',
						dt_atualizacao	= clock_timestamp(),
						nm_usuario	= nm_usuario_p
					where	nr_sequencia	= nr_seq_prontuario_w;
					
					if (ie_atual_setor_atend_pront_w = 'S' 	or (ie_atual_setor_atend_pront_w = 'V' and
							nr_seq_solic_p = nr_seq_solic_atual_w)) then
						update	same_prontuario
						set	cd_setor_atendimento = cd_setor_solicitante_w
						where	nr_sequencia = nr_seq_prontuario_w;
						
						
					end if;
			
					CALL Same_Gerar_Historico(nr_seq_prontuario_w, 11, cd_pessoa_solicitante_w, cd_setor_solicitante_w, nm_usuario_p);
					end;
				elsif (coalesce(dt_devolucao_w::text, '') = '') and (coalesce(dt_recebimento_w::text, '') = '') then
					rollback;
					--#@DS_TIPO#@ #@NR_SEQ_PRONTUARIO#@ do atendimento #@NR_ATENDIMENTO#@ não encontra-se no SAME. Local atual no hospital: #@DS_LOCAL_PRONT#@.
					CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(187693, 'DS_TIPO='||ds_tipo_w||';'||
										'NR_SEQ_PRONTUARIO='||to_char(nr_seq_prontuario_w)||';'||
										'NR_ATENDIMENTO='||to_char(nr_atendimento_w)||';'||
										'DS_LOCAL_PRONT='||ds_local_pront_w);
				end if;
				end;
			end loop;
			close c02;
			end;
		end loop;
		close c01;
		commit;
		end;
	else
		ds_mensagem_p	:= substr(wheb_mensagem_pck.get_texto(309856, 'NR_SEQ_SOLIC_P=' || to_char(nr_seq_solic_p)),1,255);
		-- Existem prontuários faltantes para esta solicitação #@NR_SEQ_SOLIC_P#@, deseja atender assim mesmo ?
	end if;
	end;
end if;

/* Avisa o usuário que alguns prontuários lançados não fazem parte da solicitação que está sendo atendida */

if (ds_pront_solic_dif_w IS NOT NULL AND ds_pront_solic_dif_w::text <> '') then
	ds_consistencia_p	:= wheb_mensagem_pck.get_texto(309865, 'DS_PRONT_SOLIC_DIF_W=' || ds_pront_solic_dif_w || ';NR_SEQ_SOLIC_P=' || to_char(nr_seq_solic_p));
	-- Os prontuários: #@DS_PRONT_SOLIC_DIF_W#@ não fazem parte da solicitação #@NR_SEQ_SOLIC_P#@ que será atendida !
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE same_atender_solic_pront ( ds_prontuario_p text, nr_seq_solic_p bigint, ds_consistencia_p INOUT text, ds_mensagem_p INOUT text, ds_pront_falta_p INOUT text, nm_usuario_p text) FROM PUBLIC;

