-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE Sinais_Dado AS (	vl_resultado	varchar(255),
				vl_sinal_ww	varchar(255));
CREATE TYPE sinais AS (	vl_sinal	varchar(255),
			qt_registro	bigint,
			vl_registro	double precision,
			ds_resultado	Dados);
CREATE TYPE medic AS (	qt_dose		double precision,
						qt_registro	bigint);
CREATE TYPE PerdaGanho AS (	qt_perda_ganho double precision,
				qt_registro	bigint);
CREATE TYPE BalancoHidrico AS (	vl_balanco_hidrico double precision,
				qt_registro	bigint);


CREATE OR REPLACE PROCEDURE gerar_apap ( nr_atendimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nr_seq_apap_p bigint, ie_24_horas_p text, cd_setor_atendimento_p bigint, nm_usuario_p text, ie_rn_p text default 'A', ie_html_p text default 'N', ie_relatorio_p text default 'N') AS $body$
DECLARE



nr_seq_inf_w				bigint;
nr_seq_apap_inf_w			bigint;
nr_sequencia_w				bigint;
nr_seq_grupo_w				bigint;
nr_seq_grupo_pai_w			bigint;
ie_tipo_w				varchar(15);
nr_seq_tipo_pg_w			bigint;
nr_seq_grupo_pg_w			bigint;
nr_seq_grupo_pg_ww			bigint;
NR_SEQ_INF_ADIC_w			bigint;
qt_dose_medic_w				double precision;
nr_ficha_tecnica_w			bigint;
ie_manter_nulo_w			varchar(1);
qt_dose_total_medic_w			double precision;

qt_freq_cardiaca_w			double precision;
qt_freq_resp_w				double precision;
qt_temp_w					real;
qt_altura_cm_w				double precision;
qt_peso_w					double precision;
qt_pvc_h2o_w				real;
qt_pvc_w					real;
qt_rel_pao2_fio2_w			double precision;
qt_pa_sistolica_w			double precision;
qt_pa_diastolica_w			double precision;
qt_pam_w					double precision;
qt_escala_dor_w				double precision;
qt_glicemia_capilar_w		double precision;
qt_insulina_w				double precision;
qt_saturacao_o2_w			double precision;
qt_pae_w					double precision;
qt_pressao_intra_cranio_w		double precision;
qt_pressao_intra_abd_w		double precision;
qt_bcf_w					double precision;
qt_temp_incubadora_w		double precision;
qt_maec_w					double precision;
ds_escala_dor_w				varchar(255);
ds_nivel_consciencia_w			varchar(255);
ds_ritmo_ecg_w				varchar(255);
qt_perimetro_cefalico_w		real;
qt_perimetro_toracico_w		real;
qt_perimetro_abdominal_w		real;
qt_segmento_st_w			double precision;
qt_superf_corporia_w		double precision;
qt_imc_w					real;

qt_rima_labial_w			double precision;
qt_fluxo_oxigenio_w			double precision;
ie_muscul_acess_w			varchar(3);
qt_fio2_w					double precision;
qt_freq_vent_w				double precision;
qt_amplitude_w				smallint;
qt_freq_prog_w				smallint;
qt_vc_prog_w				double precision;
qt_vci_w					double precision;
qt_vmin_w					double precision;
qt_pip_w					double precision;
qt_pplato_w					double precision;
qt_peep_w					double precision;
qt_ps_w						double precision;
qt_pva_w					double precision;
qt_auto_peep_w				double precision;
qt_co2_w					double precision;
qt_cst_w					double precision;
qt_rsr_w					double precision;
qt_fluxo_insp_w				double precision;
qt_tempo_insp_w				double precision;
qt_ti_te_w					double precision;
qt_vce_w					double precision;
qt_sensib_resp_w			double precision;
qt_sensib_fluxo_w			double precision;
qt_limite_pa_max_w			double precision;
qt_limite_pa_min_w			double precision;
qt_pressao_cuff_w			double precision;
qt_pressao_cuff_CMH2O_w			double precision;
qt_grad_aao2_w				double precision;
qt_sat_venosa_o2_w			double precision;
qt_saturacao_o2				double precision;
qt_bolus_adm_w				double precision;
qt_fluxo_ar_compr_w			double precision;
QT_OXIDO_NITRICO_w			double precision;
qt_temp_humidifier_w    real;
ie_air_entry_w          varchar(255);

nr_seq_apres_grupo_w		bigint;
nr_seq_apres_w			bigint;
ds_grupo_w			varchar(100);
ds_informacao_w			varchar(255);
ds_info_w			varchar(100);
ds_grupo_pg_w			varchar(100);
ds_tipo_pg_w			varchar(100);
ds_ficha_tecnica_w			varchar(100);
ds_balanco_hidrico_w		varchar(100);
ie_balanco_hidrico_w		varchar(15);
qt_volume_w			double precision;
qt_dosagem_w			double precision;
qt_gasoterapia_w			double precision;
qt_gasoterapia_ant_w			double precision;
ds_dosagem_w			varchar(100);
ds_dosagem_ant_w			varchar(100);
ie_tipo_dosagem_w			varchar(5);
ie_alteracao_w			double precision;
dt_alteracao_w			timestamp;
dt_alteracao_www		timestamp;

qt_total6_w			double precision;
qt_total12h_w			double precision;
qt_total18h_w			double precision;
qt_total24h_w			double precision;
qt_total_geral_w			double precision;
ds_unid_med_w			varchar(15);
nr_prescricao_w			bigint;
nr_seq_solucao_w			integer;
nr_prescricao_www		bigint;

nr_hora_ww			smallint;
dt_alteracao_ww			timestamp;
qt_dosagem_ww			double precision;
ie_tipo_dosagem_ww		varchar(5);
ie_alteracao_ww			double precision;
nr_prescricao_ww		bigint;
nr_seq_solucao_ww		integer;

nr_hora_w			smallint;
nr_hora_ant_w			smallint;
nr_hora_dif_w			smallint;
ind				smallint;
ipg				smallint;
ibh				smallint;
ie_cursor_w			varchar(1);

ds_cor_param_w			varchar(15);
ds_cor_total_parcial_w		varchar(15);
ds_cor_total_geral_w		varchar(15);
ds_cor_grupo_w			varchar(15);
ie_tipo_inf_w			varchar(15);

qt_volume_ganho_w		double precision;
qt_volume_perda_w		double precision;
qt_acumulado_dia_w		double precision;

dt_inicio_ref_w			timestamp;
dt_final_ref_w			timestamp;
dt_medida_w			timestamp;

qt_tam_informacao_w		integer;
qt_tam_hora_w			integer;
qt_tam_total_w			integer;
qt_tam_unid_med_w		integer;

qt_registro_w			bigint;

qt_pa_sist_ap_w			double precision;
qt_pa_diast_ap_w			double precision;
qt_pa_media_ap_w			double precision;
qt_pa_ocluida_ap_w		double precision;
qt_pvd_sist_w			double precision;
qt_pvd_diast_final_w		double precision;
qt_debito_card_w			double precision;
tx_indice_card_w			double precision;
qt_volume_sist_w			double precision;
tx_indice_sist_w			double precision;
qt_rv_sistemica_w			double precision;
tx_rv_sistemica_w			double precision;
qt_rv_pulmonar_w			double precision;
tx_rv_pulmonar_w			double precision;
qt_trab_sist_ve_w			double precision;
tx_trab_sist_ve_w			double precision;
qt_trab_sist_vd_w			double precision;
tx_trab_sist_vd_w			double precision;
qt_satur_ven_mista_oxigenio_w	double precision;
ds_respiracao_w			varchar(255);
cd_mod_vent_w			varchar(255);
ds_mod_vent_w			varchar(255);
ds_disp_resp_esp_w		varchar(255);

ie_ramsay_w			double precision;
ie_rass_w				double precision;
ie_prurido_w			double precision;
ie_nausea_w			double precision;
ie_bloqueio_motor_w		double precision;
ie_cateter_peridural_w		double precision;
ie_ricker_w			smallint;
ie_maas_w			smallint;
qt_cook_pontuacao_w		double precision;
ie_grafico_w			varchar(1);
cd_estabelecimento_w		smallint;
ie_lib_sinal_vital_w			varchar(1);
cd_material_w			integer;
cd_material_ww			integer;
ds_material_w			varchar(255);
qt_dose_w			double precision;
qt_dose_medic_vet_w		double precision;
cd_unidade_medida_dose_w		varchar(30);
qt_solucao_w			double precision;
qt_dose_terap_w			double precision := 0;
qt_dose_total_w			double precision;
qt_dose_interv_w			double precision;
qt_peso_prescr_w			real;
qt_dias_w			bigint;
dt_referencia_w			timestamp;
ie_numerico_w			varchar(1);
ie_decubito_w			varchar(15);
ie_liberar_ganho_perda_w		varchar(1);
qt_perda_w			double precision;
qt_ganho_w			double precision;
ie_ganho_perda_w			varchar(1);
qt_ganho_perda_w			double precision;
ie_controla_adep_w		varchar(1);
qt_min_valor_w			double precision;
qt_max_valor_w			double precision;
qt_media_valor_w			double precision;
qt_media_w			double precision;
vl_hora_w			double precision;
nr_seq_atend_pg_w	bigint;
nr_sequencias_atend_pg_w varchar(80) := null;
hr_inicio_w			varchar(2);
qt_hora_w			smallint;
hr_inicio_param_w			timestamp;
hr_final_param_w			timestamp;
ie_minima_w			varchar(1);
ie_maxima_w			varchar(1);
ie_media_w			varchar(1);
ie_total_w			varchar(1);
ie_informacao_w			varchar(1);
ie_mostra_disp_w		varchar(1);
vl_balanco_hidrico_w		double precision;
qt_total_perda_ganho_w		double precision;
qt_ocorrencia_w			bigint;
vl_param_decub_w			varchar(1);
vl_param_regra_destaque_w			varchar(1);
nr_seq_exame_w			bigint;
nr_seq_exame_ww			bigint;
qt_resultado_w			double precision;
hr_exame_w	  			smallint;
ds_resultado_w			varchar(50);
ds_formato_w			varchar(2);
pr_resultado_w			double precision;
ie_leucocitos_w			varchar(30);
ie_urobilinogenio_w		varchar(30);
ie_ph_w					varchar(30);
ie_densidade_w			varchar(30);
ie_bilirrubina_w		varchar(30);
ie_nitrito_w			varchar(30);
ie_proteina_w			varchar(30);
ie_sangue_w				varchar(30);
ie_cetona_w				varchar(30);
ie_glicose_w			varchar(30);

qt_glasgow_w			smallint;
ds_glic_extrapol_w		varchar(255);
ie_resposta_motora_w		smallint;
ie_resposta_verbal_w		smallint;
ie_abertura_ocular_w		smallint;
hr_glasgow_w			smallint;
ie_escala_w			varchar(10);
cd_setor_atendimento_w		bigint;
ds_resultados_w			varchar(4000);
ie_turno_apap_w			bigint;
qt_hct_w			double precision;
qt_glicemia_w			double precision;
qt_glicemia_mmol_w		double precision;
dt_glicemia_w			timestamp;
ie_evento_w			varchar(15);
nr_seq_gasoterapia_w		bigint;
nr_seq_gas_w			bigint;
ds_gas_w			varchar(80);
IE_UNIDADE_MEDIDA_w		varchar(15);
qt_glicose_w			real;
qt_tamanho_pupila_w		bigint;
qt_pupila_tam_esq_w		bigint;
qt_o2_suplementar_w		double precision;
ie_unid_med_o2_suplem_w		varchar(10);
DS_PUPILA_REACAO_LUZ_w		varchar(255);
DS_PUPILA_REACAO_LUZ_E_w	varchar(255);
DS_PUPILA_ALTERACAO_w		varchar(255);
DS_PUPILA_LADO_w		varchar(255);
DS_SINAL_FOCAL_w		varchar(255);
DS_SINAL_FOCAL_LOCAL_w		varchar(255);
ds_inf_adic_item_w		varchar(255);
qt_ppc_w			real;
qt_ppa_w			real;
qt_tamanho_pupila_esq_w		bigint;
QT_ANGULO_CABECEIRA_w		bigint;
ie_membro_pa_w				varchar(3);
qt_pic_temp_w				real;
qt_circunf_panturrilha_w	double precision;
qt_circunf_braco_w			double precision;
qt_bcf_2_w					smallint;
QT_BCF_3_w					smallint;
ie_glic_extrapol_w			varchar(1);
qt_irradiancia_w		real;
ds_qt_glasgow_w varchar(255);
/*Escala Braden*/

QT_PONTO_w					double precision;
hr_braden_w					smallint;
IE_PERCEPCAO_SENSORIAL_w	varchar(10);
IE_UMIDADE_w				varchar(10);
IE_ATIVIDADE_FISICA_w		varchar(10);
IE_MOBILIDADE_w				varchar(10);
IE_NUTRICAO_w				varchar(10);
IE_FRICCAO_CISALHAMENTO_w	varchar(10);
ds_qt_ponto_w varchar(255);

/*Escala Rass/Richmond, */

qt_rass_w					double precision;
hr_rass_w					smallint;
ie_pupila_lado_w				varchar(10);
ie_rn_w						varchar(10);
nr_disparo_pca_w					bigint;
NR_DISPARO_EFETIVO_w				bigint;
qt_vol_infundido_w				double precision;
/*Escala NAS*/

Qt_pontuacao_nas_w		double precision;
hr_nas_w			smallint;
/*Escala Flebite*/

ie_intensidade_flebite_w	varchar(4);
hr_flebite_w			smallint;
ds_ie_intensidade_flebite_w	varchar(255);
/*Escala TEV*/

ds_risco_w			varchar(50);
hr_tev_w			smallint;
ds_hora_min_w			varchar(200);
/*Escala Ramsay*/

hr_Ramsay_w			smallint;
ds_Ramsay_w			varchar(240);
pt_ramsay_w			varchar(5);
/*Escala Flebite Nova*/

ie_flebite_w			varchar(350);
hr_flebite_ins_W		smallint;
ds_grau_w			varchar(2);
/*Escala MEWS */

QT_FREQ_CARDIACA_MEWS_w		double precision;
QT_FREQ_RESP_MEWS_w		double precision;
QT_PA_SISTOLICA_MEWS_w		double precision;
QT_TEMP_MEWS_W			double precision;
IE_NIVEL_CONSCIENCIA_MEWS_w	varchar(15);
QT_PONTUACAO_MEWS_W		double precision;
hr_mews_w			smallint;
DS_PONTUACAO_W		varchar(255);
/*Braden Crianca*/

IE_MOBILIDADE_BRADEN_Q_W	varchar(350);
IE_ATIVIDADE_FISICA_BRADEN_Q_W	varchar(350);
IE_PERCEP_SENSO_BRADEN_Q_W	varchar(350);
IE_UMIDADE_BRADEN_Q_W		varchar(350);
IE_FRICCAO_CISA_BRADEN_Q_W	varchar(350);
IE_NUTRICAO_BRADEN_Q_W		varchar(350);
IE_PERFUSAO_BRADEN_Q_W		varchar(350);
QT_PONTO_BRADEN_Q_W		double precision;
hr_braden_q_W			smallint;
/*Apache II*/

IE_IRA_AP2_w			varchar(1);
IE_PO_URGENCIA_AP2_w		varchar(1);
QT_TEMP_AXILAR_AP2_w		integer;
QT_BICARBONATO_SERICO_AP2_w	integer;
QT_PAS_AP2_w			double precision;
QT_PH_ARTERIAL_AP2_w		integer;
QT_PAD_AP2_w			double precision;
QT_SODIO_SERICO_AP2_w		integer;
QT_PAL_MEDIA_AP2_w		integer;
QT_POTASSIO_SERICO_AP2_w	integer;
QT_FREQ_CARD_AP2_w		integer;
QT_CREATININA_AP2_w		integer;
QT_FREQ_RESP_AP2_w		integer;
QT_HEMATOCRITO_AP2_w		integer;
QT_OXIGENACAO_FIO2_AP2_w	integer;
QT_GLOBULOS_BRANCOS_AP2_w	bigint;
QT_OXIGENACAO_PCO2_AP2_w	integer;
QT_PB_AP2_w			bigint;
QT_OXIGENACAO_PAO2_AP2_w	integer;
QT_ESCALA_GLASGOW_AP2_w		integer;
QT_OXIGENACAO_PAAO2_AP2_w	bigint;
IE_TIPO_CATEGORIA_AP2_w		smallint;
NR_SEQ_CAT_DIAG_AP2_w		bigint;
QT_PONT_VAR_FISIO_AP2_w		integer;
QT_APACHE_II_AP2_w		integer;
QT_PONT_IDADE_AP2_w		integer;
QT_RISCO_CALCULADO_AP2_w	integer;
QT_PT_DOENCA_CRON_ED_AP2_w	integer;
PR_RISCO_AP2_w			integer;
QT_PESO_CAT_DIAG_AP2_w		integer;
hr_apache_II_w			smallint;
/*Apache IV*/

QT_TEMP_APIV_w			smallint;
QT_NA_APIV_w			bigint;
QT_PA_SIST_APIV_w		bigint;
QT_GLICOSE_APIV_w		bigint;
QT_PA_DIAST_APIV_w		bigint;
QT_CREATININA_APIV_w		integer;
QT_FC_APIV_w			bigint;
QT_UREIA_APIV_w			bigint;
QT_FREQ_RESP_APIV_w		bigint;
QT_DIURESE_APIV_w		real;
QT_ALTITUDE_APIV_w		bigint;
QT_ALBUMINA_APIV_w		bigint;
QT_FIO2_APIV_w			double precision;
QT_BILIRRUBINA_APIV_w		bigint;
QT_PH_APIV_w			bigint;
QT_GLOB_VERMELHOS_APIV_w	bigint;
QT_PO2_APIV_w			bigint;
QT_GLOB_BRANCOS_APIV_w		bigint;
QT_PCO2_APIV_w			bigint;
IE_GLASGOW_INDIS_APIV_w		varchar(2);
IE_GLASGOW_OCULAR_APIV_w	smallint;
IE_GLASGOW_VERBAL_APIV_w	smallint;
IE_GLASGOW_MOTORA_APIV_w	smallint;
QT_ESCALA_GLASGOW_APIV_w	smallint;
QT_IDADE_APIV_w			double precision;
IE_RENAL_APIV_w			varchar(1);
IE_CANCER_METASTATICO_APIV_w	varchar(1);
IE_AIDS_APIV_w			varchar(1);
IE_LEUC_MILEOMA_MULT_APIV_w	varchar(1);
IE_HEPATICA_APIV_w		varchar(1);
IE_IMUNOSUPRESSAO_APIV_w	varchar(1);
IE_LINFOMA_APIV_w		varchar(1);
IE_CIRROSE_APIV_w		varchar(1);
IE_ORIGEM_PACIENTE_APIV_w	smallint;
QT_DIAS_ANTES_UTI_APIV_w	double precision;
IE_EMERGENCIA_APIV_w		varchar(1);
IE_READMISSAO_APIV_w		varchar(1);
IE_VENTILACAO_APIV_w		varchar(1);
NR_SEQ_DIAG_APIV_w		varchar(300);
IE_TERAPIA_TROMBO_APIV_w	varchar(1);
QT_PONTUACAO_APIV_w		integer;
QT_PONTOS_APS_APIV_w		integer;
QT_PONTOS_LOGIT_APIV_w		bigint;
QT_DIAG_MAP_COD_APIV_w		varchar(20);
PR_MORTALIDADE_APIV_w		smallint;
QT_DIAS_UTI_APIV_w		integer;
hr_Apache_IV_w			smallint;
/*Partograma*/

hr_partograma_w			smallint;
IE_INTERV_CONTRACOES_w		varchar(255);
qt_bcf_p_w			double precision;
IE_BOLSA_w			varchar(100);
IE_ASPECTO_LIQUIDO_w 		varchar(255);
IE_OCITOCINA_w			varchar(255);
/*Grace*/

QT_IDADE_g_w			double precision;
QT_FREQ_CARDIACA_g_w		double precision;
QT_PA_SISTOLICA_g_w		double precision;
QT_CREATININA_g_w		integer;
IE_KILLIP_g_w			varchar(3);
IE_PARADA_CARDIACA_ADM_g_w	varchar(1);
IE_MARCADOR_CARDIACO_ELE_g_w	varchar(1);
IE_DESVIO_SEG_ST_g_w		varchar(1);
QT_PONTUACAO_g_w		double precision;
DS_RESULTADO_g_w		varchar(300);
hr_grace_w			smallint;
/*Saps II*/

IE_TIPO_ADMISSAO_SPII_w		varchar(30);
QT_BICARBONATO_SPII_w		double precision;
QT_BILIRRUBINA_SPII_w		bigint;
IE_CANCRO_METASTATICO_SPII_w	varchar(1);
IE_CATEGORIA_CLINICA_SPII_w	varchar(30);
QT_DIAS_ANTES_UTI_SPII_w	double precision;
QT_DIURESE_SPII_w		integer;
QT_GLASGOW_SPII_w		smallint;
QT_FREQ_CARDIACA_SPII_w		double precision;
QT_GLOBULOS_BRANCOS_SPII_w	bigint;
IE_AIDS_SPII_w			varchar(1);
QT_IDADE_SPII_w			double precision;
IE_INTOXICACAO_SPII_w		varchar(1);
IE_MALIG_HEMATOLOGICA_SPII_w	varchar(1);
PR_MORTALIDADE_SPII_w		integer;
PR_MORT_EXPAND_SPII_w		integer;
IE_ORIGEM_PACIENTE_SPII_w	varchar(35);
QT_PA_SISTOLICA_SPII_w		double precision;
QT_REL_PAO2_FIO2_SPII_w		double precision;
QT_POTASSIO_SPII_w		bigint;
QT_SAPS_EXPAND_SPII_w		bigint;
QT_SAPS_SPII_w			bigint;
DS_SEXO_SPII_w			varchar(30);
QT_SODIO_SPII_w			integer;
QT_TEMP_SPII_w			smallint;
QT_UREIA_SPII_w			bigint;
hr_saps_II_w			smallint;
/*EScala PIM 2*/

IE_ADM_ELETIVA_PIM_w		varchar(1);
QT_PTO_ADM_ELETIVA_PIM_w	bigint;
IE_PROC_RECUPERACAO_PIM_w	varchar(1);
QT_PTO_PROC_RECUP_PIM_w		bigint;
IE_CIRURGIA_CARDIACA_PIM_w	varchar(1);
QT_PTO_CIRUR_CARD_PIM_w		bigint;
IE_DIAG_ALTO_RISCO_PIM_w	varchar(1);
QT_PTO_DIAG_ALTO_RISCO_PIM_w	bigint;
IE_DIAG_BAIXO_RISCO_PIM_w	varchar(1);
IE_RESPOSTA_PUPILAS_PIM_w	varchar(1);
QT_PTO_RESP_PUPILAS_PIM_w	bigint;
IE_VENTILACAO_MECANICA_PIM_w	varchar(1);
QT_PTO_VENT_MEC_PIM_w		bigint;
QT_PA_SITOLICA_PIM_w		double precision;
QT_PTO_PA_SISTOLICA_PIM_w	bigint;
QT_PH_SANGUE_PIM_w		bigint;
QT_PTO_PH_SANGUE_PIM_w		bigint;
QT_REL_PAO2_PIM_w		integer;
QT_REL_FIO2_PIM_w		integer;
QT_PTO_PAO2_FIO2_PIM_w		bigint;
QT_TX_MORTALIDADE_PIM_w		integer;
hr_PIM2_w			smallint;
/* Escala PRISM*/

IE_LACTANTE_PRISM_w		varchar(1);
QT_IDADE_PRISM_w		integer;
QT_PA_SISTOLICA_PRISM_w		double precision;
QT_PTO_PAS_PRISM_w		smallint;
QT_BILIRRUBINA_TOTAL_PRISM_w	bigint;
QT_PTO_BILIRRUBINA_PRISM_w	smallint;
QT_PA_DIASTOLICA_PRISM_w	double precision;
QT_PTO_PAD_PRISM_w		smallint;
QT_CALCIO_PRISM_w		bigint;
QT_PTO_CALCIO_PRISM_w		smallint;
QT_FREQ_CARDIACA_PRISM_w	double precision;
QT_PTO_FC_PRISM_w		smallint;
QT_POTASSIO_PRISM_w		bigint;
QT_PTO_POTASSIO_PRISM_w		smallint;
QT_FREQ_RESP_PRISM_w		double precision;
QT_PTO_FR_PRISM_w		smallint;
QT_GLICEMIA_PRISM_w		bigint;
QT_PTO_GLICEMIA_PRISM_w		smallint;
IE_APNEIA_PRISM_w		varchar(1);
QT_BICARBONATO_PRISM_w		bigint;
QT_PTO_BICARBONATO_PRISM_w	smallint;
QT_REL_PAO2_FIO2_PRISM_w	integer;
QT_PTO_REL_PAO2_FIO2_PRISM_w	smallint;
QT_ESCALA_GLASGOW_PRISM_w	integer;
QT_PTO_GLASGOW_PRISM_w		smallint;
QT_PACO2_PRISM_w		integer;
QT_PTO_PACO2_PRISM_w		smallint;
IE_TEMPO_TP_TTP_PRISM_w		varchar(1);
QT_PTO_TP_TTP_PRISM_w		smallint;
IE_REACOES_PUPILARES_PRISM_w	smallint;
QT_PTO_REAC_PUP_PRISM_w		smallint;
QT_PTO_TOTAL_PRISM_w		smallint;
PR_MORTALIDADE_PRISM_w		bigint;
PR_MORTALIDADE_POS_OP_PRISM_w	bigint;
hr_prism_w			smallint;
/*Escala AKIN */

IE_NIVEL_SERICO_AKIN_W		double precision;
IE_DEBITO_URINARIO_AKIN_W	double precision;
QT_PONTUACAO_AKIN_W		double precision;
DS_PONTUACAO_AKIN_W		varchar(255);
hr_akin_w			smallint;
--cd_material_w			number(10);
cd_grupo_material_w		bigint;
cd_classe_material_w		bigint;
cd_subgrupo_material_w		bigint;
ds_informacao_inst_w		varchar(60);
ie_respiracao_w			varchar(255);
dt_entrada_setor_w		timestamp;
ie_apresenta_zero_w		varchar(10);
qt_veloc_adm_w			double precision;
dt_avaliacao_w			timestamp;
qt_ti_w				double precision;
qt_te_w				double precision;
/*Escala Tinetti*/

qt_tinetti_w				double precision;
hr_tinetti_w				smallint;
/*Escala Richmond/Rass*/

qt_richmond_w		smallint;
hr_richmond_w		smallint;
/*Escala  EARQ*/

qt_earq_w			smallint;
hr_earq_w			smallint;
/*Escala CAM - ICU*/

qt_cam_w			varchar(255);
hr_cam_w			smallint;
ie_negrito_w		varchar(10);
/*Escala SNAP || e SNAPPE ||*/

qt_snap_w		double precision;
hr_snap_w		smallint;
qt_snappe_w		double precision;
hr_snappe_w		smallint;
qt_mortalidade_w	double precision;
hr_mortalidade_w	smallint;
QT_PC_w				double precision;
ds_equipamento_w	varchar(255);
/*Escala SNAP|||*/

qt_snap3_w		double precision;
hr_snap3_w		smallint;
/*Escala SOFA*/

qt_sofa_w		double precision;
hr_sofa_w		smallint;
IE_MEMBRO_w		varchar(10);
IE_MEMBRO_SAT_O2_w	varchar(10);
ie_sitio_w		varchar(255);
/*Escala TISS28*/

qt_tiss_w		double precision;
hr_tiss_w		smallint;
/*Escala  Eca*/

qt_eca_w		double precision;
hr_eca_w		smallint;
/*Escala Aldrete*/

qt_aldrete_w		double precision;
hr_Aldrete_w		smallint;
/*Escala MODS*/

qt_mods_w		double precision;
hr_mods_w		smallint;
qt_pto_resp_w		smallint;
qt_pto_snc_w		smallint;
qt_pto_cardio_w		smallint;
qt_pto_hepatica_w	smallint;
qt_pto_coag_w		smallint;
qt_pto_renal_w		smallint;
pr_mortalidade_w	smallint;
pr_mortalidade_uti_w	smallint;
/*Escala Clearence de creatinina*/

hr_clearence_w		smallint;
qt_cockcroft_gault_w	double precision;
qt_mdrd_w		double precision;
qt_schwartz_w		double precision;
qt_counhahan_barratt_w	double precision;
/*Escala Karnofsk*/

qt_karnofsk_w		double precision;
hr_karnofsk_w		smallint;
/*Escala CRIB II*/

pr_score_crib_w		double precision;
qt_score_crib_w		bigint;
hr_score_crib_w		smallint;
/*Escala Edmonton (ESAS)*/

qt_esas_dor_w		smallint;
qt_esas_cansaco_w	smallint;
qt_esas_nausea_w	smallint;
qt_esas_depressao_w	smallint;
qt_esas_ansiedade_w	smallint;
qt_esas_sonolencia_w	smallint;
qt_esas_bom_apetite_w	smallint;
qt_esas_bem_estar_w	smallint;
qt_esas_falta_ar_w	smallint;
hr_esas_w		smallint;

ie_exibir_topografia_w	varchar(10);
ie_exibir_lado_w		varchar(10);
nr_seq_topografia_w	bigint;
nr_seq_dispositivo_w bigint;
ds_complemento_disp_w varchar(255);
nr_seq_atend_disp_w bigint;
nr_seq_comp_adic_w bigint;
ds_dispositivo_w varchar(255) := '';
QT_DELTA_PP_w		double precision;
ie_glicemia_confirmada_w	varchar(1);
ie_relat_w					varchar(1);
qt_pressao_intra_abd_h2o_w	double precision;
nr_seq_score_flex_w bigint;
/* Escala Morse */

qt_pontuacao_morse_w	 bigint;
ds_risco_morde_w		 varchar(255);
hr_morse_w smallint;
ie_lado_w varchar(1);
ds_lado_w varchar(255);
ds_espaco_w		varchar(255)	:= '   ';

/*Score Flex II*/

qt_score_flex2_w			smallint;
hr_score_flex2_w			smallint;
ds_score_flex2_w		varchar(255);

ds_informacao_ganho_perda_w varchar(510);

/* Coloracao Html 5*/

ds_cor_ref_sv_w	 	varchar(2000);
ds_cor_varias_sv_w	 varchar(2000);

/* Analisador bioquimico portatil */

qt_tca_w	bigint;
hr_abp_w	smallint;

/* Escala Stratify */

qt_pontuacao_stratify_w 	smallint;
hr_stratify_w 				smallint;
ds_escala_stratify_w		varchar(255);
IE_APARELHO_PA_w		varchar(10);
IE_APARELHO_PA_SV_w		varchar(10);

/* Solucoes (volumes previstos) */

solucao_item_nr_seq_solucao_w	prescr_solucao.nr_seq_solucao%type;
solucao_item_nr_prescricao_w	prescr_medica.nr_prescricao%type;

/* Regra Apap */

vl_minimo_w				bigint;
vl_maximo_w				bigint;
qt_idade_min_w			smallint;
qt_idade_max_w			smallint;
ie_tipo_alerta_w		varchar(1);
ie_mostrar_alerta_w 	varchar(1);
qt_idade_pf_w			smallint;
qt_daily_dose_w		double precision;
type Dados is table of Sinais_Dado index by integer;
type Vetor is table of sinais index by integer;
vt_sinal_w		vetor;
type VetorMed is table of medic index by integer;
vt_medic_w		VetorMed;
type VetorPG is table of PerdaGanho index by integer;
vt_perda_ganho_w	vetorPG;
type VetorBH is table of BalancoHidrico index by integer;
vt_balanco_hidrico_w	VetorBH;




C00 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_apres,
		ds_grupo,
		ie_tipo,
		ds_cor_grupo,
		ie_manter_nulo,
		coalesce(ie_ganho_perda,'N'),
		ie_tipo,
		coalesce(ie_informacao,'S'),
		coalesce(ie_mostra_disp,'N')
	from	pep_apap_grupo
	where	nr_seq_apap	= nr_seq_apap_p
	order by nr_seq_apres;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_inf,
		nr_seq_apres,
		nr_seq_tipo_pg,
		nr_seq_grupo_pg,
		CASE WHEN coalesce(nr_seq_tipo_pg::text, '') = '' THEN nr_seq_grupo_pg  ELSE null END ,
		nr_ficha_tecnica,
		ie_balanco_hidrico,
		coalesce(DS_INFORMACAO_INST,coalesce(substr(Obter_Desc_informacao(nr_seq_inf),1,100), substr(Obter_Desc_exame(nr_seq_exame),1,100))),
		substr(obter_desc_grupo_pg(nr_seq_grupo_pg),1,100),
		substr(Obter_Desc_Tipo_Perda_Ganho(nr_seq_tipo_pg),1,100),
		substr(Obter_desc_ficha_tecnica(nr_ficha_tecnica),1,100),
		substr(Obter_valor_dominio(2066,ie_balanco_hidrico),1,100),
		ie_tipo_dosagem,
		ie_manter_nulo,
		CASE WHEN coalesce(ie_grafico,'N')='N' THEN null  ELSE 'S' END ,
		coalesce(ie_controla_adep,'N'),
		coalesce(ie_minima,'S'),
		coalesce(ie_maxima,'S'),
		coalesce(ie_media,'S'),
		coalesce(ie_total,'S'),
		nr_seq_exame,
		ie_escala,
		nr_seq_gas,
		obter_desc_gas(nr_seq_gas),
		NR_SEQ_INF_ADIC,
		ie_pupila_lado,
		cd_material,
		cd_grupo_material,
		cd_classe_material,
		cd_subgrupo_material,
		ds_informacao_inst,
		ie_apresenta_zero,
		ie_negrito_relat,
		IE_MEMBRO,
		coalesce(ie_relat,'S'),
    		nr_seq_score_flex,
			IE_APARELHO_PA
	from	pep_apap_inf
	where	nr_seq_grupo_apap	= nr_seq_grupo_w
	order by nr_seq_apres;

C02 CURSOR FOR
	SELECT	somente_numero(coalesce(nr_hora,to_char(round(dt_sinal_vital,'hh24'),'hh24'))),
		qt_ppa,
		qt_ppc,
		qt_freq_cardiaca,
		qt_freq_resp,
		qt_temp,
		qt_altura_cm,
		qt_peso,
		qt_pvc_h2o,
		qt_pvc,
		qt_pa_sistolica,
		qt_pa_diastolica,
		qt_pam,
		qt_escala_dor,
		qt_glicemia_capilar,
		qt_insulina,
		qt_saturacao_o2,
		qt_pae,
		qt_pressao_intra_cranio,
		qt_pressao_intra_abd,
		qt_bcf,
		qt_temp_incubadora,
		qt_maec,
		qt_saturacao_o2,
		substr(obter_valor_dominio(1298,cd_escala_dor),1,255),
		substr(obter_valor_dominio(3342,IE_NIVEL_CONSCIENCIA),1,255),
		substr(obter_valor_dominio(1557,ie_ritmo_ecg),1,255),
		qt_perimetro_cefalico,
		qt_perimetro_toracico,
		qt_perimitro_abdominal,
		qt_segmento_st,
		qt_superf_corporia,
		qt_imc,
		ie_decubito,
		qt_pupila_tamanho,
		qt_pupila_tam_esq,
		qt_o2_suplementar,
		ie_unid_med_o2_suplem,
		substr(obter_valor_dominio(2925,IE_PUPILA_REACAO_LUZ),1,255),
		substr(obter_valor_dominio(2926,IE_PUPILA_ALTERACAO),1,255),
		substr(obter_valor_dominio(1372,IE_PUPILA_LADO),1,255),
		substr(obter_valor_dominio(2927,IE_SINAL_FOCAL),1,255),
		substr(obter_valor_dominio(2928,IE_SINAL_FOCAL_LOCAL),1,255),
		to_char(dt_sinal_vital,'hh24:mi:ss'),
		IE_MEMBRO_SAT_O2,
		substr(obter_valor_dominio(1558,ie_sitio),1,255),
		qt_angulo_cabeceira,
		ie_membro,
		qt_pic_temp,
		qt_circunf_panturrilha,
		qt_circunf_braco,
		qt_bcf_2,
		CASE WHEN ie_glic_extrapol='S' THEN '+' WHEN ie_glic_extrapol='E' THEN '-' END ,
		substr(obter_valor_dominio(2925,IE_PUPILA_REACAO_LUZ_E),1,255),
		qt_bcf_3,
		qt_pressao_intra_abd_h2o,
		substr(obter_valor_dominio(4398,ie_glic_extrapol),1,255),
		qt_irradiancia,
		qt_glicemia_mmol,
		IE_APARELHO_PA
	from	atendimento_sinal_vital
	where	nr_atendimento	= nr_atendimento_p
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(dt_referencia,dt_sinal_vital) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A')	= 'A'
	and	((ie_lib_sinal_vital_w = 'N') or (dt_liberacao IS NOT NULL AND dt_liberacao::text <> ''))
--	and	((ie_pupila_lado_w	is null) or (ie_pupila_lado_w = ie_pupila_lado))
	and	((ie_rn_w	= 'A')	or (ie_rn = ie_rn_w))
	and	Apap_Obter_Se_Exibe_Grupo(nr_seq_grupo_w,nm_usuario) = 'S'
	order by coalesce(ie_relevante_apap,'N'), coalesce(dt_referencia,dt_sinal_vital),dt_sinal_vital;

C03 CURSOR FOR
	SELECT	somente_numero(coalesce(nr_hora,to_char(round(dt_monitorizacao,'hh24'),'hh24'))),
		qt_rel_pao2_fio2,
		qt_rima_labial,
		qt_fluxo_oxigenio,
		qt_fio2,
		qt_freq_vent,
		qt_amplitude,
		qt_freq_prog,
		qt_freq_resp,
		qt_vc_prog,
		qt_vci,
		qt_vmin,
		qt_pip,
		qt_pplato,
		qt_peep,
		qt_ps,
		qt_pva,
		qt_auto_peep,
		qt_co2,
		qt_cst,
		qt_rsr,
		qt_fluxo_insp,
		qt_tempo_insp,
		qt_ti_te,
		qt_vce,
		qt_sensib_resp,
		qt_sensib_fluxo,
		qt_limite_pa_max,
		qt_limite_pa_min,
		qt_pressao_cuff,
		qt_pressao_cuff_CMH2O,
		qt_grad_aao2,
		qt_sat_venosa_o2,
		qt_saturacao_o2,
		substr(obter_valor_dominio(1299,ie_respiracao),1,255),
		cd_mod_vent,
		substr(obter_valor_dominio(1612,ie_disp_resp_esp),1,255),
		ie_respiracao,
		qt_ti,
		qt_te,
		QT_PC,
		substr(obter_descricao_padrao('EQUIPAMENTO_RESP','DS_EQUIPAMENTO',NR_SEQ_EQUIPAMENTO),1,255),
		qt_fluxo_ar_compr,
		QT_OXIDO_NITRICO,
		CASE WHEN ie_muscul_acess=1 THEN '+' WHEN ie_muscul_acess=2 THEN '++' WHEN ie_muscul_acess=3 THEN '+++' END ,
		qt_temp_humidifier,
		substr(obter_valor_dominio(9306,ie_air_entry),1,255),
		(SELECT ds_modalidade from modalidade_ventilatoria where cd_modalidade = cd_mod_vent)
	from	atendimento_monit_resp
	where	nr_atendimento	= nr_atendimento_p
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(dt_referencia,dt_monitorizacao) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A')	= 'A'
	and	((ie_lib_sinal_vital_w = 'N') or (dt_liberacao IS NOT NULL AND dt_liberacao::text <> ''))
	and	Apap_Obter_Se_Exibe_Grupo(nr_seq_grupo_w,nm_usuario) = 'S'
	order by coalesce(ie_relevante_apap,'N'), coalesce(dt_referencia,dt_monitorizacao),dt_monitorizacao;

C04 CURSOR FOR
	SELECT	somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24'))),
		sum(c.qt_volume)
	from	tipo_perda_ganho b,
		grupo_perda_ganho a,
		atendimento_perda_ganho c
	where	c.nr_atendimento	= nr_atendimento_p
	and	b.nr_sequencia		= c.nr_seq_tipo
	and	b.nr_seq_grupo		= a.nr_sequencia
	and	c.nr_seq_tipo		= nr_seq_tipo_pg_w
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(c.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	--and	nvl(b.ie_soma_bh,'S')	= 'S'
	and	coalesce(c.dt_apap,c.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(c.ie_situacao,'A')	= 'A'
	and	((ie_liberar_ganho_perda_w = 'N') or (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> ''))
	and 	b.ie_volume_ocorrencia in ('V','P')
	and	((ie_rn_w	= 'A') or (c.ie_recem_nato	= ie_rn_w))
	and	((coalesce(nr_seq_topografia_w::text, '') = '')	or (coalesce(c.nr_seq_topografia,0) = nr_seq_topografia_w))
	and (((coalesce(ie_lado_w::text, '') = '')  and (coalesce(c.ie_lado::text, '') = '')) or ( ie_lado_w = c.ie_lado ))
	group by somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24')));

C05 CURSOR FOR
	SELECT	somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24'))),
		sum(c.qt_volume)
	from	tipo_perda_ganho b,
		grupo_perda_ganho a,
		atendimento_perda_ganho c
	where	c.nr_atendimento	= nr_atendimento_p
	and	b.nr_sequencia		= c.nr_seq_tipo
	and	b.nr_seq_grupo		= a.nr_sequencia
	and	b.nr_seq_grupo		= nr_seq_grupo_pg_w
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(c.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(nr_seq_tipo_pg_w::text, '') = ''
	and	coalesce(c.dt_apap,c.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(c.ie_situacao,'A')	= 'A'
	and	((ie_liberar_ganho_perda_w = 'N') or (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> ''))
	and 	b.ie_volume_ocorrencia in ('V','P')
	and	((ie_rn_w	= 'A') or (c.ie_recem_nato	= ie_rn_w))
	group by somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24')));

C24 CURSOR FOR
	SELECT	somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24'))),
		substr(obter_dados_pg_inf_adic_item(d.nr_seq_inf_adic_item, 'D'),1,255)
	from	tipo_perda_ganho b,
		grupo_perda_ganho a,
		atend_perda_ganho_inf_adic d,
		atendimento_perda_ganho c
	where	c.nr_atendimento	= nr_atendimento_p
	and	b.nr_sequencia		= c.nr_seq_tipo
	and	b.nr_seq_grupo		= a.nr_sequencia
	and	c.nr_sequencia		= d.NR_SEQ_ATEND_PG
	and	c.nr_seq_tipo		= nr_seq_tipo_pg_w
	and	d.NR_SEQ_INF_ADIC	= nr_seq_inf_adic_w
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(c.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(c.dt_apap,c.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(c.ie_situacao,'A')	= 'A'
	and	((ie_rn_w	= 'A') or (c.ie_recem_nato	= ie_rn_w))
	and	((ie_liberar_ganho_perda_w = 'N') or (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> ''));



C25 CURSOR FOR
	SELECT	somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24'))),
		substr(obter_dados_pg_inf_adic_item(d.nr_seq_inf_adic_item, 'D'),1,255)
	from	tipo_perda_ganho b,
		grupo_perda_ganho a,
		atend_perda_ganho_inf_adic d,
		atendimento_perda_ganho c
	where	c.nr_atendimento	= nr_atendimento_p
	and	b.nr_sequencia		= c.nr_seq_tipo
	and	b.nr_seq_grupo		= a.nr_sequencia
	and	c.nr_sequencia		= d.NR_SEQ_ATEND_PG
	and	c.nr_seq_tipo		= nr_seq_tipo_pg_w
	and	d.NR_SEQ_INF_ADIC	= nr_seq_inf_adic_w
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(c.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(c.dt_apap,c.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(c.ie_situacao,'A')	= 'A'
	and	((ie_liberar_ganho_perda_w = 'N') or (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> ''))
	and	((ie_rn_w	= 'A') or (c.ie_recem_nato	= ie_rn_w))
	and	b.IE_VOLUME_OCORRENCIA	= 'O';

C06 CURSOR FOR
	SELECT	somente_numero(to_char(a.dt_alteracao,'hh24')),
		trunc(a.dt_alteracao,'hh24'),
		a.dt_alteracao,
		a.qt_dosagem,
		b.ie_tipo_dosagem,
		a.ie_alteracao,
		b.nr_prescricao,
		b.nr_seq_solucao
	from	prescr_medica d,
		prescr_solucao b,
		prescr_solucao_evento a
	where	a.ie_evento_valido	= 'S'
	and	a.nr_prescricao		= b.nr_prescricao
	and	a.nr_seq_solucao	= b.nr_seq_solucao
	and	b.nr_prescricao		= d.nr_prescricao
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(d.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	(a.nr_seq_solucao IS NOT NULL AND a.nr_seq_solucao::text <> '')
	and	a.nr_atendimento	= nr_atendimento_p
	and	d.nr_prescricao = nr_prescricao_www
	and	a.ie_alteracao in (1,2,3,4,5)
	and	((ie_controla_adep_w = 'N') or (coalesce(b.ie_apap,'SV') = 'SV'))
	and	((a.dt_alteracao between(dt_inicio_ref_w -7) and dt_final_ref_w) or
		((ie_24_horas_p = 'S') and (a.dt_alteracao > clock_timestamp()) and (a.dt_alteracao <= dt_final_ref_w + 1)) or
		 ((obter_status_solucao_prescr(1,b.nr_prescricao,b.nr_seq_solucao) IN ('I','R')) and (a.dt_alteracao <= dt_final_ref_w)))
	and	obter_se_solucao_apap(a.nr_prescricao,a.nr_seq_solucao,nr_ficha_tecnica_w) = 'S'
	and	((ie_rn_w	= 'A') or (d.ie_recem_nato	= ie_rn_w))
	and	coalesce(d.dt_suspensao::text, '') = ''
	and	(d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> '')
	order by a.dt_alteracao, a.nr_prescricao;

C07 CURSOR FOR
	SELECT	somente_numero(coalesce(a.nr_hora,to_char(a.dt_medida,'hh24'))),
		trunc(coalesce(a.dt_apap,a.dt_medida),'hh24') dt_apap,
		sum(CASE WHEN c.ie_perda_ganho='P' THEN a.qt_volume  ELSE 0 END ),
		sum(CASE WHEN c.ie_perda_ganho='G' THEN a.qt_volume  ELSE 0 END )
	from	grupo_perda_ganho c,
		tipo_perda_ganho b,
		atendimento_perda_ganho a
	where	a.nr_seq_tipo	= b.nr_sequencia
	and	b.nr_seq_grupo	= c.nr_sequencia
	and	a.nr_atendimento= nr_atendimento_p
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(a.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(b.ie_soma_bh,'S')	= 'S'
	and	coalesce(a.dt_apap,a.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(a.ie_situacao,'A')	= 'A'
	and	((ie_liberar_ganho_perda_w = 'N') or (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> ''))
	and	((ie_rn_w	= 'A') or (a.ie_recem_nato	= ie_rn_w))
	group by somente_numero(coalesce(a.nr_hora,to_char(a.dt_medida,'hh24'))),
		trunc(coalesce(a.dt_apap,a.dt_medida),'hh24')
	order by dt_apap,somente_numero(coalesce(a.nr_hora,to_char(a.dt_medida,'hh24')));

C08 CURSOR FOR
	SELECT	nr_sequencia
	from	w_pep_apap
	where	nm_usuario	= nm_usuario_p
	and	nr_atendimento	= nr_atendimento_p
	and	coalesce(nr_seq_grupo::text, '') = ''
	and	coalesce(ie_manter_nulo,'S') = 'N';

C09 CURSOR FOR
	SELECT	somente_numero(coalesce(nr_hora,to_char(round(dt_monitoracao,'hh24'),'hh24'))),
		trunc(qt_pa_sist_ap,1),
		trunc(qt_pa_diast_ap,1),
		trunc(qt_pa_media_ap,1),
		trunc(qt_pa_ocluida_ap,1),
		trunc(qt_pvd_sist,1),
		trunc(qt_pvd_diast_final,1),
		trunc(qt_debito_card,1),
		trunc(tx_indice_card,1),
		trunc(qt_volume_sist,1),
		trunc(tx_indice_sist,1),
		trunc(qt_rv_sistemica,1),
		trunc(tx_rv_sistemica,1),
		trunc(qt_rv_pulmonar,1),
		trunc(tx_rv_pulmonar,1),
		trunc(qt_trab_sist_ve,1),
		trunc(tx_trab_sist_ve,1),
		trunc(qt_trab_sist_vd,1),
		trunc(tx_trab_sist_vd,1),
		trunc(qt_satur_ven_mista_oxigenio,1),
		QT_DELTA_PP_MMHG
	from	atend_monit_hemod
	where	nr_atendimento	= nr_atendimento_p
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(dt_referencia,dt_monitoracao) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A')	= 'A'
	and	((ie_lib_sinal_vital_w = 'N') or (dt_liberacao IS NOT NULL AND dt_liberacao::text <> ''))
	order by coalesce(ie_relevante_apap,'N'), coalesce(dt_referencia,dt_monitoracao),dt_monitoracao;

C10 CURSOR FOR
	SELECT	somente_numero(coalesce(nr_hora,to_char(round(dt_avaliacao,'hh24'),'hh24'))),
		ie_ramsay,
		ie_rass,
		ie_prurido,
		ie_nausea,
		ie_bloqueio_motor,
		ie_cateter_peridural,
		ie_ricker,
		ie_maas,
		qt_cook_pontuacao
	from	atend_aval_analgesia
	where	nr_atendimento	= nr_atendimento_p
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(dt_referencia,dt_avaliacao) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A')	= 'A'
	and	((ie_lib_sinal_vital_w = 'N') or (dt_liberacao IS NOT NULL AND dt_liberacao::text <> ''))
	order by coalesce(ie_relevante_apap,'N'), coalesce(dt_referencia,dt_avaliacao),dt_avaliacao;

C11 CURSOR FOR
	SELECT	somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24'))),
		sum(coalesce(c.qt_ocorrencia,0))
	from	tipo_perda_ganho b,
		grupo_perda_ganho a,
		atendimento_perda_ganho c
	where	c.nr_atendimento	= nr_atendimento_p
	and	b.nr_sequencia		= c.nr_seq_tipo
	and	b.nr_seq_grupo		= a.nr_sequencia
	and	b.nr_seq_grupo		= nr_seq_grupo_pg_w
	and	c.nr_seq_tipo		= nr_seq_tipo_pg_w
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(c.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(c.dt_apap,c.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(c.ie_situacao,'A')	= 'A'
	and	((ie_liberar_ganho_perda_w = 'N') or (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> ''))
	and	((ie_rn_w	= 'A') or (c.ie_recem_nato	= ie_rn_w))
	and 	b.ie_volume_ocorrencia = 'O'
	group by somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24')));

C12 CURSOR FOR
	SELECT	somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24'))),
		sum(coalesce(c.qt_ocorrencia,0))
	from	tipo_perda_ganho b,
		grupo_perda_ganho a,
		atendimento_perda_ganho c
	where	c.nr_atendimento	= nr_atendimento_p
	and	b.nr_sequencia		= c.nr_seq_tipo
	and	b.nr_seq_grupo		= a.nr_sequencia
	and	coalesce(nr_seq_tipo_pg_w::text, '') = ''
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(c.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(b.ie_soma_bh,'S')	= 'S'
	and	coalesce(c.dt_apap,c.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(c.ie_situacao,'A')	= 'A'
	and	((ie_liberar_ganho_perda_w = 'N') or (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> ''))
	and	((ie_rn_w	= 'A') or (c.ie_recem_nato	= ie_rn_w))
	and 	b.ie_volume_ocorrencia = 'O'
	group by somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24')));

c13 CURSOR FOR
	SELECT	b.nr_seq_exame,
			somente_numero(to_char(round(a.dt_resultado,'hh24'),'hh24')),
			substr(obter_formato_result_exame(b.nr_seq_exame, b.nr_seq_material),1,1) ds_formato,
			b.qt_resultado,
			substr(b.ds_resultado,1,30)	ds_resultado,
			pr_resultado
	from	exame_lab_result_item b,
			prescr_procedimento x,
			prescr_medica d,
			exame_lab_resultado a
	where	a.nr_seq_resultado	= b.nr_seq_resultado
	and		d.nr_prescricao 	= a.nr_prescricao
	and		d.nr_prescricao		= x.nr_prescricao
	and		x.nr_sequencia		= b.nr_seq_prescr
	and 	d.nr_atendimento = nr_atendimento_p
	and 	a.dt_resultado between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(d.dt_suspensao::text, '') = ''
	and	(d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> '');

c14 CURSOR FOR
	SELECT	substr(obter_valor_dominio(2571,ie_leucocitos),1,30),
			substr(obter_valor_dominio(2573,ie_urobilinogenio),1,30),
			substr(obter_valor_dominio(2575,ie_ph),1,30),
			substr(obter_valor_dominio(2577,ie_densidade),1,30),
			substr(obter_valor_dominio(2579,ie_bilirrubina),1,30),
			substr(obter_valor_dominio(2574,ie_proteina),1,30),
			substr(obter_valor_dominio(2572,ie_nitrito),1,30),
			substr(obter_valor_dominio(2576,ie_sangue),1,30),
			substr(obter_valor_dominio(2578,ie_cetona),1,30),
			substr(obter_valor_dominio(2580,ie_glicose),1,30),
			somente_numero(to_char(round(dt_analise,'hh24'),'hh24'))
	from	atend_uroanalise
	where	coalesce(ie_situacao,'A') = 'A'
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and		nr_atendimento	= nr_atendimento_p
	and		coalesce(dt_analise,clock_timestamp()) between dt_inicio_ref_w and dt_final_ref_w;

C15 CURSOR FOR
	SELECT	qt_glasgow,
		somente_numero(coalesce(nr_hora,to_char(round(dt_avaliacao,'hh24'),'hh24'))),
		ie_resposta_motora,
		ie_resposta_verbal,
		ie_abertura_ocular,
    substr(obter_resultado_glasgow(qt_glasgow),1,100)
	from	atend_escala_indice
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');


c16 CURSOR FOR
	SELECT	a.qt_hgt,
		a.qt_glicose_adm,
		somente_numero(to_char(round(a.dt_controle,'hh24'),'hh24')),
		a.qt_bolus_adm,
		a.qt_veloc_adm
	from	atendimento_cig a
	where	a.nr_atendimento	= nr_atendimento_p
	and	dt_controle between dt_inicio_ref_w and dt_final_ref_w
	and	((ie_glicemia_confirmada_w = 'N') or (ie_adm_confirmada = 'S'))
	order by a.dt_controle;

c17 CURSOR FOR
	SELECT	a.qt_glicemia,
		a.qt_glicemia_mmol,
		a.qt_ui_insulina_adm,
		a.qt_glicose_adm,
		somente_numero(to_char(round(a.dt_controle,'hh24'),'hh24'))
	from	atendimento_glicemia a
	where	a.nr_atendimento	= nr_atendimento_p
	and	dt_controle between dt_inicio_ref_w and dt_final_ref_w
	and	((ie_glicemia_confirmada_w = 'N') or (ie_adm_confirmada = 'S'))
	order by a.dt_controle;


c18 CURSOR FOR
	SELECT	a.qt_glicemia,
		somente_numero(to_char(round(a.dt_controle,'hh24'),'hh24')),
		a.dt_controle dt_glicemia
	from	atendimento_glicemia a
	where	a.nr_atendimento	= nr_atendimento_p
	and	dt_controle between dt_inicio_ref_w and dt_final_ref_w
	and	((ie_glicemia_confirmada_w = 'N') or (ie_adm_confirmada = 'S'))
	
union

	SELECT	a.qt_hgt,
		somente_numero(to_char(round(a.dt_controle,'hh24'),'hh24')),
		a.dt_controle dt_glicemia
	from	atendimento_cig a
	where	a.nr_atendimento	= nr_atendimento_p
	and	dt_controle between dt_inicio_ref_w and dt_final_ref_w
	and	((ie_glicemia_confirmada_w = 'N') or (ie_adm_confirmada = 'S'))
	
union

	select	a.qt_glicemia_capilar,
		somente_numero(coalesce(nr_hora,to_char(round(dt_sinal_vital,'hh24'),'hh24'))),
		coalesce(dt_referencia,dt_sinal_vital) dt_glicemia
	from	atendimento_sinal_vital a
	where	nr_atendimento	= nr_atendimento_p
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(dt_referencia,dt_sinal_vital) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A')	= 'A'
	and	((ie_lib_sinal_vital_w = 'N') or (dt_liberacao IS NOT NULL AND dt_liberacao::text <> ''))
	order by dt_glicemia;



C19 CURSOR FOR
	SELECT	somente_numero(to_char(a.dt_evento,'hh24')),
		a.dt_evento,
		a.qt_gasoterapia,
		a.ie_evento,
		b.nr_prescricao,
		b.nr_sequencia,
		coalesce(a.IE_UNIDADE_MEDIDA,b.IE_UNIDADE_MEDIDA)
	from	prescr_medica d,
		prescr_gasoterapia b,
		prescr_gasoterapia_evento a
	where	a.ie_evento_valido	= 'S'
	and	a.nr_seq_gasoterapia	= b.nr_sequencia
	and	b.nr_prescricao		= d.nr_prescricao
	and	b.nr_seq_gas		= nr_seq_gas_w
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(d.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	(b.NR_SEQ_GAS IS NOT NULL AND b.NR_SEQ_GAS::text <> '')
	and	d.nr_atendimento	= nr_atendimento_p
	and	a.ie_evento in ('I','IN','R','T','V')
	and	coalesce(d.dt_suspensao::text, '') = ''
	and 	(d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> '')
	and	((a.dt_evento between dt_inicio_ref_w -1 and dt_final_ref_w) or
		 ((obter_status_gasot_prescr(b.nr_prescricao,b.nr_sequencia) IN ('I','R')) and (a.dt_evento <= dt_final_ref_w)))
	order by a.dt_evento, d.nr_prescricao;

C20 CURSOR FOR
	SELECT	substr(obter_valor_dominio(7701,ie_leucocitos),1,30),
		substr(obter_valor_dominio(7706,ie_urobilinogenio),1,30),
		substr(obter_valor_dominio(7700,ie_ph),1,30),
		substr(obter_valor_dominio(7699,ie_densidade),1,30),
		substr(obter_valor_dominio(7705,ie_bilirrubina),1,30),
		substr(obter_valor_dominio(7707,ie_proteina),1,30),
		substr(obter_valor_dominio(7703,ie_nitrito),1,30),
		substr(obter_valor_dominio(7702,ie_sangue),1,30),
		substr(obter_valor_dominio(7704,ie_cetona),1,30),
		substr(obter_valor_dominio(7708,ie_glicose),1,30),
		somente_numero(to_char(round(dt_analise,'hh24'),'hh24'))
	from	atend_uro_choice
	where	coalesce(ie_situacao,'A') = 'A'
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and		nr_atendimento	= nr_atendimento_p
	and		coalesce(dt_analise,clock_timestamp()) between dt_inicio_ref_w and dt_final_ref_w;

C23 CURSOR FOR
	SELECT	QT_PONTO,
		somente_numero(coalesce(nr_hora,to_char(round(dt_avaliacao,'hh24'),'hh24'))),
		IE_PERCEPCAO_SENSORIAL,
		IE_UMIDADE,
		IE_ATIVIDADE_FISICA,
		IE_MOBILIDADE,
		IE_NUTRICAO,
		IE_FRICCAO_CISALHAMENTO,
     substr(obter_resultado_braden(QT_PONTO),1,100) ds_qt_ponto
	from	ATEND_ESCALA_BRADEN
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C43 CURSOR FOR
	SELECT	somente_numero(coalesce(nr_hora,to_char(round(dt_avaliacao,'hh24'),'hh24'))),
		substr(obter_valor_dominio(1509,ie_ramsay),1,240),
		ie_ramsay,
		dt_avaliacao
	from	escala_ramsay
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	
union all

	SELECT	somente_numero(coalesce(nr_hora,to_char(round(dt_avaliacao,'hh24'),'hh24'))),
		substr(obter_valor_dominio(1509,ie_ramsay),1,240),
		ie_ramsay,
		dt_avaliacao
	from	atend_aval_analgesia
	where	nr_atendimento	= nr_atendimento_p
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(dt_referencia,dt_avaliacao) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A')	= 'A'
	and	((ie_lib_sinal_vital_w = 'N') or (dt_liberacao IS NOT NULL AND dt_liberacao::text <> ''))
	order by  dt_avaliacao;

C30 CURSOR FOR
	SELECT	ie_flebite,
		somente_numero(coalesce(nr_hora,to_char(round(dt_avaliacao,'hh24'),'hh24')))
	from	ESCALA_FLEBITE_INS
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C31 CURSOR FOR
	SELECT	QT_FREQ_CARDIACA,
		QT_FREQ_RESP,
		QT_PA_SISTOLICA,
		QT_TEMP,
		IE_NIVEL_CONSCIENCIA,
		QT_PONTUACAO,
		somente_numero(coalesce(nr_hora,to_char(round(dt_avaliacao,'hh24'),'hh24'))),
		obter_desc_pontuacao_mews(nr_sequencia)
	from	ESCALA_MEWS
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C32 CURSOR FOR
	SELECT	IE_MOBILIDADE,
		IE_ATIVIDADE_FISICA,
		IE_PERCEPCAO_SENSORIAL,
		IE_UMIDADE,
		IE_FRICCAO_CISALHAMENTO,
		IE_NUTRICAO,
		IE_PERFUSAO,
		QT_PONTO,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ATEND_ESCALA_BRADEN_Q
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C33 CURSOR FOR
	SELECT	IE_IRA,
		IE_PO_URGENCIA,
		QT_TEMP_AXILAR,
		QT_BICARBONATO_SERICO,
		QT_PAS,
		QT_PH_ARTERIAL,
		QT_PAD,
		QT_SODIO_SERICO,
		QT_PAL_MEDIA,
		QT_POTASSIO_SERICO,
		QT_FREQ_CARD,
		QT_CREATININA,
		QT_FREQ_RESP,
		QT_HEMATOCRITO,
		QT_OXIGENACAO_FIO2,
		QT_GLOBULOS_BRANCOS,
		QT_OXIGENACAO_PCO2,
		QT_PB,
		QT_OXIGENACAO_PAO2,
		QT_ESCALA_GLASGOW,
		QT_OXIGENACAO_PAAO2,
		IE_TIPO_CATEGORIA,
		NR_SEQ_CAT_DIAG,
		QT_PONT_VAR_FISIOLOGICAS,
		QT_APACHE_II,
		QT_PONT_IDADE,
		QT_RISCO_CALCULADO,
		QT_PONT_DOENCA_CRONICA,
		PR_RISCO,
		QT_PESO_CAT_DIAG,
		somente_numero(to_char(round(dt_apache,'hh24'),'hh24'))
	from	APACHE
	where	nr_atendimento = nr_atendimento_p
	and	dt_apache between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C34 CURSOR FOR
	SELECT	QT_TEMP,
		QT_NA,
		QT_PA_SIST,
		QT_GLICOSE,
		QT_PA_DIAST,
		QT_CREATININA,
		QT_FC,
		QT_UREIA,
		QT_FREQ_RESP,
		QT_DIURESE,
		QT_ALTITUDE,
		QT_ALBUMINA,
		QT_FIO2,
		QT_BILIRRUBINA,
		QT_PH,
		QT_GLOB_VERMELHOS,
		QT_PO2,
		QT_GLOB_BRANCOS,
		QT_PCO2,
		IE_GLASGOW_INDIS,
		IE_GLASGOW_OCULAR,
		IE_GLASGOW_VERBAL,
		IE_GLASGOW_MOTORA,
		QT_ESCALA_GLASGOW,
		QT_IDADE,
		IE_RENAL,
		IE_CANCER_METASTATICO,
		IE_AIDS,
		IE_LEUC_MILEOMA_MULT,
		IE_HEPATICA,
		IE_IMUNOSUPRESSAO,
		IE_LINFOMA,
		IE_CIRROSE,
		IE_ORIGEM_PACIENTE,
		QT_DIAS_ANTES_UTI,
		IE_EMERGENCIA,
		IE_READMISSAO,
		IE_VENTILACAO,
		(SELECT substr(ds_diagnostico,1,300)
		 FROM 	diag_doenca_apache_iv
		 WHERE	nr_sequencia = A.NR_SEQ_DIAG),
		IE_TERAPIA_TROMBO,
		QT_PONTUACAO,
		QT_PONTOS_APS,
		QT_PONTOS_LOGIT,
		substr(obter_dados_apache_iv('DMC',nr_seq_diag),1,20),
		PR_MORTALIDADE,
		QT_DIAS_UTI,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_APACHE_IV A
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C35 CURSOR FOR
	SELECT	QT_IDADE,
		QT_FREQ_CARDIACA,
		QT_PA_SISTOLICA,
		QT_CREATININA,
		IE_KILLIP,
		IE_PARADA_CARDIACA_ADM,
		IE_MARCADOR_CARDIACO_ELE,
		IE_DESVIO_SEG_ST,
		QT_PONTUACAO,
		substr(obter_desc_grace(qt_pontuacao),1,255),
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_GRACE A
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C36 CURSOR FOR
	SELECT	CASE WHEN IE_TIPO_ADMISSAO='1' THEN  	Wheb_mensagem_pck.get_texto(308458) /*'Cirurgia programada'*/ WHEN IE_TIPO_ADMISSAO='2' THEN 	Wheb_mensagem_pck.get_texto(308459) /*'Cirurgia nao programada'*/ WHEN IE_TIPO_ADMISSAO='3' THEN 	Wheb_mensagem_pck.get_texto(308460) /*'Clinica'*/ END ,
		QT_BICARBONATO,
		QT_BILIRRUBINA,
		IE_CANCRO_METASTATICO,
		CASE WHEN IE_CATEGORIA_CLINICA='1' THEN  	Wheb_mensagem_pck.get_texto(308461) /*'Paciente clinico'*/ WHEN IE_CATEGORIA_CLINICA='2' THEN 	Wheb_mensagem_pck.get_texto(308462) /*'Outros'*/ END ,
		QT_DIAS_ANTES_UTI,
		QT_DIURESE,
		QT_GLASGOW,
		QT_FREQ_CARDIACA,
		QT_GLOBULOS_BRANCOS,
		IE_AIDS,
		QT_IDADE,
		IE_INTOXICACAO,
		IE_MALIG_HEMATOLOGICA,
		PR_MORTALIDADE,
		PR_MORT_EXPAND,
		CASE WHEN IE_ORIGEM_PACIENTE='1' THEN  Wheb_mensagem_pck.get_texto(308463) /*'Sala de emergencia ou UTI movel'*/ WHEN IE_ORIGEM_PACIENTE='2' THEN  Wheb_mensagem_pck.get_texto(308464) /*'Enfermaria neste hospital'*/ WHEN IE_ORIGEM_PACIENTE='3' THEN  Wheb_mensagem_pck.get_texto(308465)/*'Outro hospital'*/ END ,
		QT_PA_SISTOLICA,
		QT_REL_PAO2_FIO2,
		QT_POTASSIO,
		QT_SAPS_EXPAND,
		QT_SAPS,
		substr(obter_sexo_pf(obter_pessoa_atendimento(nr_atendimento, 'C'), 'D'),1,100),
		QT_SODIO,
		QT_TEMP,
		QT_UREIA,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_SAPS
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C37 CURSOR FOR
	SELECT	IE_ADM_ELETIVA,
		QT_PTO_ADM_ELETIVA,
		IE_PROC_RECUPERACAO,
		QT_PTO_PROC_RECUP,
		IE_CIRURGIA_CARDIACA,
		QT_PTO_CIRUR_CARD,
		IE_DIAG_ALTO_RISCO,
		QT_PTO_DIAG_ALTO_RISCO,
		IE_DIAG_BAIXO_RISCO,
		IE_RESPOSTA_PUPILAS,
		QT_PTO_RESP_PUPILAS,
		IE_VENTILACAO_MECANICA,
		QT_PTO_VENT_MEC,
		QT_PA_SITOLICA,
		QT_PTO_PA_SISTOLICA,
		QT_PH_SANGUE,
		QT_PTO_PH_SANGUE,
		QT_REL_PAO2,
		QT_REL_FIO2,
		QT_PTO_PAO2_FIO2,
		QT_TX_MORTALIDADE,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_PIM2
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C38 CURSOR FOR
	SELECT	IE_LACTANTE,
		QT_IDADE,
		QT_PA_SISTOLICA,
		QT_PTO_PAS,
		QT_BILIRRUBINA_TOTAL,
		QT_PTO_BILIRRUBINA,
		QT_PA_DIASTOLICA,
		QT_PTO_PAD,
		QT_CALCIO,
		QT_PTO_CALCIO,
		QT_FREQ_CARDIACA,
		QT_PTO_FC,
		QT_POTASSIO,
		QT_PTO_POTASSIO,
		QT_FREQ_RESP,
		QT_PTO_FR,
		QT_GLICEMIA,
		QT_PTO_GLICEMIA,
		IE_APNEIA,
		QT_BICARBONATO,
		QT_PTO_BICARBONATO,
		QT_REL_PAO2_FIO2,
		QT_PTO_REL_PAO2_FIO2,
		QT_ESCALA_GLASGOW,
		QT_PTO_GLASGOW,
		QT_PACO2,
		QT_PTO_PACO2,
		IE_TEMPO_TP_TTP,
		QT_PTO_TP_TTP,
		IE_REACOES_PUPILARES,
		QT_PTO_REAC_PUP,
		QT_PTO_TOTAL,
		PR_MORTALIDADE,
		PR_MORTALIDADE_POS_OP,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_PRISM
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C39 CURSOR FOR
	SELECT	IE_NIVEL_SERICO,
		IE_DEBITO_URINARIO,
		QT_PONTUACAO,
		substr(obter_descr_escala_akin(QT_PONTUACAO),1,255),
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_AKIN
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

c40 CURSOR FOR
	SELECT	ie_interv_contracoes,
		qt_bcf,
		ie_bolsa,
		ie_aspecto_liquido,
		CASE WHEN ie_ocitocina='S' THEN Wheb_mensagem_pck.get_texto(308469)/*'Sim'*/  ELSE Wheb_mensagem_pck.get_texto(308470) /*'Nao'*/ END ,
		somente_numero(to_char(round(dt_registro,'hh24'),'hh24'))
	from	partograma
	where	nr_atendimento = nr_atendimento_p
	and	dt_registro between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C27 CURSOR FOR
	SELECT	qt_pontuacao,
		somente_numero(coalesce(nr_hora,to_char(round(dt_avaliacao,'hh24'),'hh24')))
	from	escala_nas
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C28 CURSOR FOR
	SELECT	ie_intensidade,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24')),
    substr(Obter_valor_dominio(3341, ie_intensidade),1, 255) ds_ie_intensidade
	from	escala_flebite
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C29 CURSOR FOR
	SELECT	substr(obter_valor_dominio(2900,ie_risco),1,150),
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_tev
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

c45 CURSOR FOR
	SELECT	qt_pontuacao,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_DINI
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');
c46 CURSOR FOR
	SELECT	QT_PTO_TOTAL,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_NTISS
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C26 CURSOR FOR
	SELECT	somente_numero(to_char(a.dt_alteracao,'hh24')),
		trunc(a.dt_alteracao,'hh24'),
		sum(a.nr_disparo_pca),
		sum(a.nr_disparo_efetivo),
		sum(a.qt_vol_infundido)
	from	prescr_medica d,
		prescr_solucao b,
		prescr_solucao_evento a
	where	a.ie_evento_valido	= 'S'
	and	a.nr_prescricao		= b.nr_prescricao
	and	a.nr_seq_solucao	= b.nr_seq_solucao
	and	b.nr_prescricao		= d.nr_prescricao
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(d.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	(a.nr_seq_solucao IS NOT NULL AND a.nr_seq_solucao::text <> '')
	and	a.nr_atendimento	= nr_atendimento_p
	and	a.ie_alteracao in (22)
	and	((ie_controla_adep_w = 'N') or (coalesce(b.ie_apap,'SV') = 'SV'))
	and	a.dt_alteracao between dt_inicio_ref_w -1 and dt_final_ref_w
	and	((ie_rn_w	= 'A') or (d.ie_recem_nato	= ie_rn_w))
	and	coalesce(d.dt_suspensao::text, '') = ''
	and	(d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> '')
	group by somente_numero(to_char(a.dt_alteracao,'hh24')),
		trunc(a.dt_alteracao,'hh24')
	order by 2;

c41 CURSOR FOR
	SELECT	distinct
		d.cd_material,
		d.ds_material
	from	prescr_mat_hor a,
		prescr_material b,
		prescr_medica c,
		estrutura_material_v d
	where	c.nr_prescricao	= b.nr_prescricao
	and	b.nr_prescricao	= a.nr_prescricao
	and	b.nr_sequencia = a.nr_seq_material
	and	d.cd_material = b.cd_material
	and	c.nr_atendimento = nr_atendimento_p
	and	a.dt_fim_horario between dt_inicio_ref_w and dt_final_ref_w
	and	c.dt_suspensao is  null
	and	b.dt_suspensao is  null
	and	a.dt_suspensao is  null
	and (d.cd_material	= cd_material_w	 or coalesce(cd_material_w::text, '') = '')
	and (d.cd_grupo_material = cd_grupo_material_w or coalesce(cd_grupo_material_w::text, '') = '')
	and (d.cd_subgrupo_material = cd_subgrupo_material_w or coalesce(cd_subgrupo_material_w::text, '') = '')
	and (d.cd_classe_material = cd_classe_material_w or coalesce(cd_classe_material_w::text, '') = '')
	and (d.nr_seq_ficha_tecnica = nr_ficha_tecnica_w or coalesce(nr_ficha_tecnica_w::text, '') = '')
	and	coalesce(c.dt_suspensao::text, '') = ''
	and	(c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '')
	order by d.ds_material;

c42 CURSOR FOR
	SELECT	distinct
		somente_numero(to_char(a.dt_fim_horario,'hh24')),
		a.qt_dose
	from	prescr_mat_hor a,
		prescr_material b,
		prescr_medica c
	where	c.nr_prescricao	= b.nr_prescricao
	and	b.nr_prescricao	= a.nr_prescricao
	and	b.nr_sequencia = a.nr_seq_material
	and	c.nr_atendimento = nr_atendimento_p
	and	a.dt_fim_horario between dt_inicio_ref_w and dt_final_ref_w
	and	b.cd_material	= cd_material_ww
	and	c.dt_suspensao is  null
	and	b.dt_suspensao is  null
	and	a.dt_suspensao is  null;

C47 CURSOR FOR
	SELECT	qt_pontuacao,
			somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_tenetti
	where	nr_atendimento = nr_atendimento_p
	and		dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and		coalesce(ie_situacao,'A') = 'A'
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C48 CURSOR FOR
	SELECT	ie_rass,
			somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_richmond
	where	nr_atendimento = nr_atendimento_p
	and		dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and		coalesce(ie_situacao,'A') = 'A'
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C49 CURSOR FOR
	SELECT	qt_pontuacao,
			somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_earq
	where	nr_atendimento = nr_atendimento_p
	and		dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and		coalesce(ie_situacao,'A') = 'A'
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C50 CURSOR FOR
	SELECT	substr(obter_result_CAM_ICU(ie_alt_estado_mental,ie_comport_anormal,ie_focar_atencao,ie_distraido,ie_desorganizado,ie_consiencia,IE_CAM_ICU_MODIFICADA,ie_pedra_flutuam,ie_peixe_mar,ie_quilograma,ie_martelo_madeira,ie_agitado,ie_letagico,ie_estuporoso,ie_camatoso),1,255),
			somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_cam_icu
	where	nr_atendimento = nr_atendimento_p
	and		dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and		coalesce(ie_situacao,'A') = 'A'
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C51 CURSOR FOR
	SELECT	qt_snap_ii,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_snapii_snappeii
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C52 CURSOR FOR
	SELECT	qt_snappe_ii,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_snapii_snappeii
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C53 CURSOR FOR
	SELECT	pr_mortalidade,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_snapii_snappeii
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C54 CURSOR FOR
	SELECT	qt_pontuacao,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_saps3
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C55 CURSOR FOR
	SELECT	qt_pontuacao,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_sofa
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

 C56 CURSOR FOR
	SELECT	qt_pontuacao,
         somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	TISS_INTERV_TERAPEUTICA
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C57 CURSOR FOR
	SELECT	qt_pontuacao,
         somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	GCA_ATENDIMENTO
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C58 CURSOR FOR
	SELECT	qt_ALDRETE,
         somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_ALDRETE
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');
C59 CURSOR FOR
	SELECT	qt_pontuacao,
		qt_pto_resp,
		qt_pto_snc,
		qt_pto_cardio,
		qt_pto_hepatica,
		qt_pto_coag,
		qt_pto_renal,
		pr_mortalidade,
		pr_mortalidade_uti,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_MODS
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');
C60 CURSOR FOR
	SELECT	qt_cockcroft_gault,
		qt_mdrd,
		qt_schwartz,
		qt_counhahan_barratt,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	PAC_CLEREANCE_CREATININA
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');




C61 CURSOR FOR
	SELECT	coalesce(c.NR_SEQ_TOPOGRAFIA,0),
			substr(obter_valor_dominio( 1372, c.ie_lado),1,255) ds_lado,
			c.ie_lado
	from	tipo_perda_ganho b,
		grupo_perda_ganho a,
		atendimento_perda_ganho c
	where	c.nr_atendimento	= nr_atendimento_p
	and	b.nr_sequencia		= c.nr_seq_tipo
	and	b.nr_seq_grupo		= a.nr_sequencia
	and	c.nr_seq_tipo		= nr_seq_tipo_pg_w
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(c.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(b.ie_soma_bh,'S')	= 'S'
	and	coalesce(c.dt_apap,c.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(c.ie_situacao,'A')	= 'A'
	and	((ie_liberar_ganho_perda_w = 'N') or (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> ''))
	and 	b.ie_volume_ocorrencia in ('V','P')
	and	((ie_rn_w	= 'A') or (c.ie_recem_nato	= ie_rn_w))
	group by coalesce(c.NR_SEQ_TOPOGRAFIA,0),c.ie_lado;

C71 CURSOR FOR
	SELECT	coalesce(c.NR_SEQ_TOPOGRAFIA,0),
			substr(obter_valor_dominio( 1372, c.ie_lado),1,255) ds_lado,
			c.ie_lado,
			c.nr_seq_dispositivo,
			c.nr_seq_atend_disp
	from	tipo_perda_ganho b,
		grupo_perda_ganho a,
		atendimento_perda_ganho c
	where	c.nr_atendimento	= nr_atendimento_p
	and	b.nr_sequencia		= c.nr_seq_tipo
	and	b.nr_seq_grupo		= a.nr_sequencia
	and	c.nr_seq_tipo		= nr_seq_tipo_pg_w
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(c.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(b.ie_soma_bh,'S')	= 'S'
	and	coalesce(c.dt_apap,c.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(c.ie_situacao,'A')	= 'A'
	and	((ie_liberar_ganho_perda_w = 'N') or (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> ''))
	and 	b.ie_volume_ocorrencia in ('V','P')
	and	((ie_rn_w	= 'A') or (c.ie_recem_nato	= ie_rn_w))
	group by coalesce(c.NR_SEQ_TOPOGRAFIA,0),c.ie_lado, c.nr_seq_dispositivo, c.nr_seq_atend_disp;

C72 CURSOR FOR
	SELECT	somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24'))),
		sum(c.qt_volume)
	from	tipo_perda_ganho b,
		grupo_perda_ganho a,
		atendimento_perda_ganho c
	where	c.nr_atendimento	= nr_atendimento_p
	and	b.nr_sequencia		= c.nr_seq_tipo
	and	b.nr_seq_grupo		= a.nr_sequencia
	and	c.nr_seq_tipo		= nr_seq_tipo_pg_w
	and c.nr_seq_atend_disp = nr_seq_atend_disp_w
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(c.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	--and	nvl(b.ie_soma_bh,'S')	= 'S'
	and	coalesce(c.dt_apap,c.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(c.ie_situacao,'A')	= 'A'
	and	((ie_liberar_ganho_perda_w = 'N') or (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> ''))
	and 	b.ie_volume_ocorrencia in ('V','P')
	and	((ie_rn_w	= 'A') or (c.ie_recem_nato	= ie_rn_w))
	and	((coalesce(nr_seq_topografia_w::text, '') = '')	or (coalesce(c.nr_seq_topografia,0) = nr_seq_topografia_w))
	and (((coalesce(ie_lado_w::text, '') = '')  and (coalesce(c.ie_lado::text, '') = '')) or ( ie_lado_w = c.ie_lado ))
	group by somente_numero(coalesce(c.nr_hora,to_char(c.dt_medida,'hh24')));

C62 CURSOR FOR
	SELECT	ie_karnofsky,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_KARNOFSKY
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C63 CURSOR FOR
	SELECT	ie_dor,
		ie_cansaco,
		ie_nausea,
		ie_depressao,
		ie_ansiedade,
		ie_sonolencia,
		ie_bom_apetite,
		ie_sensacao_bem_estar,
		ie_falta_ar,
		somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	ESCALA_EDMONTON
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C64 CURSOR FOR
	SELECT	pr_score,
			qt_score,
			somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	  from	ESCALA_CRIB_II
	 where	nr_atendimento = nr_atendimento_p
	   and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	   and	coalesce(ie_situacao,'A') = 'A'
	   and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');


	C65 CURSOR FOR
	SELECT	QT_PONTUACAO,
			substr(Obter_desc_escala_morse(qt_pontuacao),1,255),
			somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24'))
	from	escala_morse
	where	nr_atendimento = nr_atendimento_p
	and	dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(ie_situacao,'A') = 'A'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C66 CURSOR FOR
	SELECT	nr_prescricao
	from	prescr_medica
	where	nr_atendimento = nr_atendimento_p
	and	coalesce(dt_suspensao::text, '') = ''
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	order by nr_prescricao;

C67 CURSOR FOR
	SELECT 	qt_flixo_sanguineo, qt_ultra_filtracao, qt_rotacao_bomba, qt_fluxo_gas, qt_fio2,
			qt_pressao_acesso, qt_pressao_pre_membrana, qt_pressao_pos_membrana, qt_temperatura, nr_hora, qt_fluxo_sanguineo_membr, qt_pressao_trans_membrana
	from 	circulacao_extracorporea
	where	nr_atendimento = nr_atendimento_p
	and		dt_registro between dt_inicio_ref_w and dt_final_ref_w
	and		coalesce(ie_situacao,'A') = 'A'
	and 	coalesce(ie_apap,'N') = 'S'
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C68 CURSOR FOR
	SELECT 	qt_tca,
			somente_numero(to_char(round(dt_analise,'hh24'),'hh24'))
	from 	atend_anal_bioq_port
	where	nr_atendimento = nr_atendimento_p
	and 	coalesce(ie_situacao,'A') = 'A'
	and 	((ie_lib_sinal_vital_w = 'N') or (dt_liberacao IS NOT NULL AND dt_liberacao::text <> ''))
	and		coalesce(dt_inativacao::text, '') = ''
	and 	dt_analise between dt_inicio_ref_w and dt_final_ref_w;

C69 CURSOR FOR
	SELECT	qt_score,
			somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24')),
			substr(obter_desc_escala_stratify(qt_score),1,255)
	from	escala_stratify
	where	nr_atendimento = nr_atendimento_p
	and		dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and		coalesce(ie_situacao,'A') = 'A'
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

C70 CURSOR FOR
	SELECT	qt_pontos,
			somente_numero(to_char(round(dt_avaliacao,'hh24'),'hh24')),
			substr(obter_desc_resul_score_flex_2(qt_pontos,nr_seq_escala),1,255)
	from	escala_eif_ii
	where	nr_atendimento = nr_atendimento_p
	and		dt_avaliacao between dt_inicio_ref_w and dt_final_ref_w
	and		coalesce(ie_situacao,'A') = 'A'
	and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
        and             nr_seq_escala  = nr_seq_score_flex_w;

C73 CURSOR FOR
	SELECT
	QT_VEF1,
	QT_VEF1_PREV,
	QT_CAPACI_VITAL,
	QT_CAPAC_PUL_TOTAL,
	QT_CAPAC_VITAL_FORC,
	QT_CAPA_RES_FUN,
	QT_FLUX_EXP_MED,
	QT_INDICE_TIFFENEAU,
	QT_PICO_FLUX_EXP,
	QT_PICO_FLUXO_RESP_PREV,
	QT_TEF,
	QT_CAPAC_INSP,
	QT_VOL_RES,
	QT_VOL_RES_EXP,
	QT_VOL_CORRENTE,
	QT_VOL_RES_INSP,
	somente_numero(to_char(round(dt_registro,'hh24'),'hh24')) NR_HORA_FP
	from	ATENDIMENTO_CAPAC_PULMONAR
	where	nr_atendimento	= nr_atendimento_p
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	coalesce(dt_inativacao::text, '') = ''
	and	dt_registro between dt_inicio_ref_w and dt_final_ref_w
	and	Apap_Obter_Se_Exibe_Grupo(nr_seq_grupo_w,nm_usuario) = 'S';

solucao_item CURSOR FOR
	SELECT	a.nr_prescricao,
			x.nr_seq_solucao,
			SUBSTR(coalesce(trim(both x.ds_solucao),obter_prim_comp_sol(a.nr_prescricao,x.nr_seq_solucao)),1,240) ds_solucao
	FROM	prescr_solucao x,
			prescr_medica a,
			prescr_material b
	WHERE	a.nr_prescricao = x.nr_prescricao
	AND		x.nr_prescricao = b.nr_prescricao
	AND		x.nr_seq_solucao = b.nr_sequencia_solucao
    AND     nr_atendimento = nr_atendimento_p
	AND 	a.dt_validade_prescr > clock_timestamp()
	AND 	coalesce(a.dt_suspensao::text, '') = ''
	AND		coalesce(x.dt_suspensao::text, '') = ''
	AND		coalesce(x.nr_seq_dialise::text, '') = ''
	AND		obter_status_solucao_prescr(1,a.nr_prescricao, x.nr_seq_solucao) NOT IN ('T', 'N')
	GROUP BY a.nr_prescricao, x.nr_seq_solucao, SUBSTR(coalesce(trim(both x.ds_solucao),obter_prim_comp_sol(a.nr_prescricao,x.nr_seq_solucao)),1,240);

solucao_valores CURSOR FOR
	SELECT	max(a.qt_volume) qt_volume,
			somente_numero(to_char(round(DT_APAP,'hh24'),'hh24')) nr_hora
	FROM	atendimento_perda_ganho a
	WHERE	a.nr_seq_evento_adep IN (
										SELECT	b.nr_sequencia
										FROM	prescr_solucao_evento b,
												prescr_solucao a
										WHERE	b.nr_prescricao = a.nr_prescricao
										AND		b.nr_seq_solucao = a.nr_seq_solucao
										AND		b.nr_seq_solucao = solucao_item_nr_seq_solucao_w
										AND		b.nr_prescricao = solucao_item_nr_prescricao_w
									)
    AND     DT_APAP between dt_inicio_ref_w and dt_final_ref_w
	AND		a.ie_situacao = 'A'
    GROUP BY somente_numero(to_char(round(DT_APAP,'hh24'),'hh24'));

	ganho_perda_limite CURSOR FOR
		SELECT 	vl_minimo,
				vl_maximo,
				qt_idade_min,
				qt_idade_max,
				ie_tipo_alerta,
				ie_mostrar_alerta
		from 	TIPO_PERDA_GANHO_LIM_TURNO
		where	nr_seq_tipo_pg = nr_seq_tipo_pg_w
		and		ie_situacao = 'A';

	procedure	adiciona_registro(	nr_indice_p	bigint,
						vl_parametro_p	text,
						ds_hora_p	text := null) is

	nr_indice_ww	bigint;
	
BEGIN
	vt_sinal_w[nr_indice_p].vl_sinal	:= vl_parametro_p;
	nr_indice_ww				:= vt_sinal_w[nr_indice_p].ds_resultado.count + 1;
	if (ds_hora_p IS NOT NULL AND ds_hora_p::text <> '') then
		vt_sinal_w[nr_indice_p].ds_resultado(nr_indice_ww).vl_resultado	:= Wheb_mensagem_pck.get_texto(308472) || ': ' /*'Horario: '*/||ds_hora_p|| '   --> ' ||Wheb_mensagem_pck.get_texto(308473)|| ' '/*'   --> Valor: '*/||vl_parametro_p;

	else
		vt_sinal_w[nr_indice_p].ds_resultado(nr_indice_ww).vl_resultado	:= vl_parametro_p;
	end if;

	vt_sinal_w[nr_indice_p].ds_resultado(nr_indice_ww).vl_sinal_ww	:= vl_parametro_p;
	end;

	procedure	comparar_limites_SV(	nr_indice_p		number,
										nr_seq_inf_p	number,
										vl_parametro_p	varchar2) is

	ie_referencia_w   varchar2(1) := 'S';
	ds_cor_ref_w	  Varchar2(20);

	begin
		if (coalesce(ie_html_p,'N') = 'S') and (vl_param_regra_destaque_w <> 'N')then

		   CALL gerar_w_limites_sv_atend(nr_atendimento_p, nm_usuario_p);

			select   coalesce(max('S'),'N')
			into STRICT	 ie_referencia_w
			from     w_limites_sv_atend
			where    nr_atendimento =  nr_atendimento_p
			and		 nm_usuario = nm_usuario_p
			and		 nr_seq_sinal_vital = obter_de_para_inf_apap_sv(nr_seq_inf_p)
			and		 ((vl_param_regra_destaque_w = 'A' and ((vl_parametro_p < vl_minimo_aviso) or (vl_parametro_p > vl_maximo_aviso))) or
					  (vl_param_regra_destaque_w = 'P' and ((vl_parametro_p < vl_minimo_permitido) or (vl_parametro_p > vl_maximo_permitido))));

			if (ie_referencia_w = 'S') then

				select	CASE WHEN length(to_char(nr_indice_p))=1 THEN '0'||to_char(nr_indice_p)  ELSE to_char(nr_indice_p) END
				into STRICT	ds_cor_ref_w
				;

				ds_cor_ref_sv_w	:= ds_cor_ref_sv_w ||ds_cor_ref_w ||'7038,';

			end if;

		end if;
	end;



	function	obter_reg(	nr_indice_p	number)
			return;
	ds_cor_ref_w	  Varchar2(20);
	begin

	for i in 1..vt_sinal_w[nr_indice_p].ds_resultado.Count loop
		begin
		ds_retorno_w	:= substr(vt_sinal_w[nr_indice_p].ds_resultado(i).vl_resultado ||'#@#@'||ds_retorno_w,1,4000);

		end;
	end loop;

	if (coalesce(ie_html_p,'N') = 'S') and
		(instr(substr(ds_retorno_w,1,(length(ds_retorno_w)-4)),'#@#@') > 0) then

		select	CASE WHEN length(to_char(nr_indice_p))=1 THEN '0'||to_char(nr_indice_p)  ELSE to_char(nr_indice_p) END
		into STRICT	ds_cor_ref_w
		;

		ds_cor_varias_sv_w	:= ds_cor_varias_sv_w ||ds_cor_ref_w ||'7037,';

	end if;

	return;
	end;


	function Obter_Turno_APAP(	nr_hora_p	number)
					return;
	ie_turno_ww	number(1);
	dt_inicial_w			Date;
	dt_final_w			Date;
	dt_atual_w			Date;
	nr_hora_turno_w			varchar2(10);

	C22 CURSOR FOR
		SELECT	to_date('01/01/1999' || ' ' || to_char(dt_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') dt_inicial,
			to_date('01/01/1999' || ' ' || to_char(dt_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') dt_final,
			to_date('01/01/1999' || ' ' || nr_hora_turno_w||':00:00','dd/mm/yyyy hh24:mi:ss') dt_atual,
			ie_turno_apap
		from	regra_turno_gp
		where	cd_estabelecimento	= cd_estabelecimento_w
		and (coalesce(cd_setor_atendimento::text, '') = '' or cd_setor_atendimento = cd_setor_atendimento_w)
		order by coalesce(cd_setor_atendimento,0);

	begin
	nr_hora_turno_w	:= lpad(nr_hora_p,2,0);

	open C22;
	loop
	fetch C22 into
		dt_inicial_w,
		dt_final_w,
		dt_atual_w,
		ie_turno_ww;
	EXIT WHEN NOT FOUND; /* apply on C22 */
		begin
		if	(dt_atual_w >= dt_inicial_w AND dt_atual_w <= dt_final_w) or
			((dt_final_w < dt_inicial_w) and
			((dt_atual_w >= dt_inicial_w) or (dt_atual_w <= dt_final_w))) then
			ie_turno_w := ie_turno_ww;
		end if;
		end;
	end loop;
	close C22;


	return;

	end;

	procedure totalizar_apap is
	begin
	qt_total6_w	:= 		coalesce(vt_sinal_w[6].vl_sinal,0) +
					coalesce(vt_sinal_w[7].vl_sinal,0) +
					coalesce(vt_sinal_w[8].vl_sinal,0) +
					coalesce(vt_sinal_w[9].vl_sinal,0) +
					coalesce(vt_sinal_w[10].vl_sinal,0) +
					coalesce(vt_sinal_w[11].vl_sinal,0);
	qt_total12h_w	:=	coalesce(vt_sinal_w[12].vl_sinal,0) +
					coalesce(vt_sinal_w[13].vl_sinal,0) +
					coalesce(vt_sinal_w[14].vl_sinal,0) +
					coalesce(vt_sinal_w[15].vl_sinal,0) +
					coalesce(vt_sinal_w[16].vl_sinal,0) +
					coalesce(vt_sinal_w[17].vl_sinal,0);
	qt_total18h_w	:=	coalesce(vt_sinal_w[18].vl_sinal,0) +
					coalesce(vt_sinal_w[19].vl_sinal,0) +
					coalesce(vt_sinal_w[20].vl_sinal,0) +
					coalesce(vt_sinal_w[21].vl_sinal,0) +
					coalesce(vt_sinal_w[22].vl_sinal,0) +
					coalesce(vt_sinal_w[23].vl_sinal,0);
	qt_total24h_w	:=	coalesce(vt_sinal_w[0].vl_sinal,0) +
					coalesce(vt_sinal_w[1].vl_sinal,0) +
					coalesce(vt_sinal_w[2].vl_sinal,0) +
					coalesce(vt_sinal_w[3].vl_sinal,0) +
					coalesce(vt_sinal_w[4].vl_sinal,0) +
					coalesce(vt_sinal_w[5].vl_sinal,0);

	if (ie_balanco_hidrico_w = 'I') then
		for i in 0..vt_sinal_w.Count loop
					begin

					if (i	between 0 and 23) and (i <= PKG_DATE_UTILS.extract_field('HOUR',clock_timestamp())) and (vt_sinal_w[i](.vl_sinal IS NOT NULL AND .vl_sinal::text <> '')) then
						qt_total_geral_w := vt_sinal_w[i].vl_sinal;
					end if;
					end;
				end loop;
	else
		qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;
	end if;

	qt_total6_w	:= 0;
	qt_total12h_w	:= 0;
	qt_total18h_w	:= 0;
	qt_total24h_w	:= 0;
	exception
	when others then
		qt_total6_w	:= 0;
		qt_total12h_w	:= 0;
		qt_total18h_w	:= 0;
		qt_total24h_w	:= 0;
		qt_total_geral_w:= 0;



	end;


procedure calcula_total_grupos(array_w vetorPG) is

    qt_registro_w number(10);

    begin
    select	count(*)
    into STRICT	qt_registro_w
    from	REGRA_TURNO_GP
    where	cd_estabelecimento	= cd_estabelecimento_w
    and	(ie_turno_apap IS NOT NULL AND ie_turno_apap::text <> '');

    if (qt_registro_w	= 0) then

        qt_total6_w	:= 		coalesce(array_w[6].qt_perda_ganho,0) +
                            coalesce(array_w[7].qt_perda_ganho,0) +
                            coalesce(array_w[8].qt_perda_ganho,0) +
                            coalesce(array_w[9].qt_perda_ganho,0) +
                            coalesce(array_w[10].qt_perda_ganho,0) +
                            coalesce(array_w[11].qt_perda_ganho,0);
        qt_total12h_w	:=	coalesce(array_w[12].qt_perda_ganho,0) +
                            coalesce(array_w[13].qt_perda_ganho,0) +
                            coalesce(array_w[14].qt_perda_ganho,0) +
                            coalesce(array_w[15].qt_perda_ganho,0) +
                            coalesce(array_w[16].qt_perda_ganho,0) +
                            coalesce(array_w[17].qt_perda_ganho,0);
        qt_total18h_w	:=	coalesce(array_w[18].qt_perda_ganho,0) +
                            coalesce(array_w[19].qt_perda_ganho,0) +
                            coalesce(array_w[20].qt_perda_ganho,0) +
                            coalesce(array_w[21].qt_perda_ganho,0) +
                            coalesce(array_w[22].qt_perda_ganho,0) +
                            coalesce(array_w[23].qt_perda_ganho,0);
        qt_total24h_w	:=	coalesce(array_w[0].qt_perda_ganho,0) +
                            coalesce(array_w[1].qt_perda_ganho,0) +
                            coalesce(array_w[2].qt_perda_ganho,0) +
                            coalesce(array_w[3].qt_perda_ganho,0) +
                            coalesce(array_w[4].qt_perda_ganho,0) +
                            coalesce(array_w[5].qt_perda_ganho,0);


    else
        qt_total6_w	:= 0;
        qt_total12h_w	:= 0;
        qt_total18h_w	:= 0;
        qt_total24h_w	:= 0;

        for i in 0..array_w.Count loop
            begin

            if (i	between 0 and 23) then

                ie_turno_apap_w	:= Obter_Turno_Apap(i);
                if (ie_turno_apap_w	= 1) then
                    qt_total6_w	:= qt_total6_w	 + coalesce(array_w[i].qt_perda_ganho,0);
                elsif (ie_turno_apap_w	= 2) then
                    qt_total12h_w	:= qt_total12h_w + coalesce(array_w[i].qt_perda_ganho,0);
                elsif (ie_turno_apap_w	= 3) then
                    qt_total18h_w	:= qt_total18h_w+ coalesce(array_w[i].qt_perda_ganho,0);
                elsif (ie_turno_apap_w	= 4) then
                    qt_total24h_w	:= qt_total24h_w+ coalesce(array_w[i].qt_perda_ganho,0);
                end if;

            end if;
            end;
        end loop;

    end if;

    exception
        when others then
        qt_total6_w	:= 0;
        qt_total12h_w	:= 0;
        qt_total18h_w	:= 0;
        qt_total24h_w	:= 0;
    end;

begin

if (ie_html_p	= 'S') and (coalesce(ie_relatorio_p,'N') = 'N') then
	ds_espaco_w := chr(38)||'nbsp;'||chr(38)||'nbsp;'||chr(38)||'nbsp;';
end if;

qt_idade_pf_w := obter_idade_pf(OBTER_PESSOA_ATENDIMENTO(nr_atendimento_p, 'C'), clock_timestamp(), 'A');
ie_rn_w	:= upper(coalesce(ie_rn_p,'A'));

select	cd_estabelecimento
into STRICT	cd_estabelecimento_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_p;
cd_setor_atendimento_w	:= obter_Setor_Atendimento(nr_atendimento_p);

select	coalesce(max(ie_lib_sinal_vital),'N'),
	coalesce(max(ie_liberar_ganho_perda),'N'),
	to_date(to_char(clock_timestamp(),'dd/mm/yyyy') || ' ' || coalesce(max(to_char(hr_inicio_apap,'hh24:mi:ss')),'06:00:01'),'dd/mm/yyyy hh24:mi:ss'),
	coalesce(max(ie_glicemia_confirmada),'N')
into STRICT	ie_lib_sinal_vital_w,
	ie_liberar_ganho_perda_w,
	hr_inicio_param_w,
	ie_glicemia_confirmada_w
from	parametro_medico
where	cd_estabelecimento	= cd_estabelecimento_w;

hr_final_param_w	:= hr_inicio_param_w - 1/86400;
qt_hora_w		:= somente_numero(to_char(hr_inicio_param_w,'hh24'));

vl_param_regra_destaque_w := obter_param_usuario(1355, 4, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, vl_param_regra_destaque_w);
vl_param_decub_w := obter_param_usuario(1355, 6, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, vl_param_decub_w);

delete	from w_pep_apap
where	dt_atualizacao < clock_timestamp() - interval '12 days'/24;

commit;

delete	from w_pep_apap
where	nr_atendimento	= nr_atendimento_p
and	nm_usuario	= nm_usuario_p;

commit;

qt_dias_w	:= dt_final_p - dt_inicial_p + 1;
dt_referencia_w	:= dt_inicial_p;

if (ie_24_horas_p = 'S') and (trunc(clock_timestamp()) = trunc(dt_referencia_w)) then
	begin
	hr_inicio_param_w	:= to_date(to_char(clock_timestamp() - interval '1 days' + (1/24),'dd/mm/yyyy hh24:')||to_char(hr_inicio_param_w,'mi:ss'),'dd/mm/yyyy hh24:mi:ss');
	if (somente_numero(to_char(clock_timestamp(),'mi')) >= 30) then
		hr_inicio_param_w	:= hr_inicio_param_w + (1/24);
	end if;
	dt_referencia_w		:= trunc(hr_inicio_param_w);
	hr_final_param_w	:= hr_inicio_param_w - 1/86400;
	qt_hora_w		:= somente_numero(to_char(hr_inicio_param_w,'hh24'));
	end;
end if;

while qt_dias_w > 0 loop
	begin
	qt_dias_w	:= qt_dias_w - 1;

	dt_inicio_ref_w	:= to_date(to_char(trunc(dt_referencia_w,'dd'),'dd/mm/yyyy')||' '||to_char(hr_inicio_param_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
	dt_final_ref_w	:= to_date(to_char(trunc(dt_referencia_w,'dd') + 1,'dd/mm/yyyy')||' '||to_char(hr_final_param_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');

	select	max(ds_cor_param),
		max(ds_cor_total_parcial),
		max(ds_cor_total_geral),
		max(qt_tam_informacao),
		max(qt_tam_hora),
		max(qt_tam_total),
		max(qt_tam_unid_med)
	into STRICT	ds_cor_param_w,
		ds_cor_total_parcial_w,
		ds_cor_total_geral_w,
		qt_tam_informacao_w,
		qt_tam_hora_w,
		qt_tam_total_w,
		qt_tam_unid_med_w
	from	pep_apap
	where	nr_sequencia	= nr_seq_apap_p;

	select	sum(CASE WHEN c.ie_perda_ganho='P' THEN a.qt_volume  ELSE 0 END ),
		sum(CASE WHEN c.ie_perda_ganho='G' THEN a.qt_volume  ELSE 0 END ),
		sum(a.qt_ocorrencia)
	into STRICT	qt_perda_w,
		qt_ganho_w,
		qt_ocorrencia_w
	from	grupo_perda_ganho c,
		tipo_perda_ganho b,
		atendimento_perda_ganho a
	where	a.nr_seq_tipo	= b.nr_sequencia
	and	b.nr_seq_grupo	= c.nr_sequencia
	and	a.nr_atendimento= nr_atendimento_p
	and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(a.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
	and	coalesce(b.ie_soma_bh,'S')	= 'S'
	and	coalesce(a.dt_apap,a.dt_medida) between dt_inicio_ref_w and dt_final_ref_w
	and	coalesce(a.ie_situacao,'A')	= 'A'
	and	((ie_rn_w	= 'A') or (a.ie_recem_nato	= ie_rn_w))
	and	((ie_liberar_ganho_perda_w = 'N') or (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> ''));

	open c00;
	loop
	fetch c00 into
		nr_seq_grupo_w,
		nr_seq_apres_grupo_w,
		ds_grupo_w,
		ie_tipo_w,
		ds_cor_grupo_w,
		ie_manter_nulo_w,
		ie_ganho_perda_w,
		ie_tipo_inf_w,
		ie_informacao_w,
		ie_mostra_disp_w;
	EXIT WHEN NOT FOUND; /* apply on c00 */
		begin
		/*if	(ie_tipo_w <> 'BH') or
			(ie_informacao_w = 'S') then*/
		if (ie_html_p	= 'S') and (coalesce(ie_relatorio_p,'N') = 'N') then
			ds_grupo_w := '<b>'||ds_grupo_w||'</b>';
		end if;

		ipg			:= 0;
		qt_total_perda_ganho_w	:= null;
		while(ipg < 25) loop
			begin
			vt_perda_ganho_w[ipg].qt_perda_ganho	:= null;
			ipg 					:= ipg + 1;
			end;
		end loop;

		qt_ganho_perda_w	:= null;

		if (ie_tipo_w = 'CH') then
			begin
			if (ie_ganho_perda_w = 'G') then
				qt_ganho_perda_w	:= qt_ganho_w;
			elsif (ie_ganho_perda_w = 'P') then
				qt_ganho_perda_w	:= qt_perda_w;
			end if;
			end;
		elsif (ie_tipo_w = 'OC') then
			qt_ganho_perda_w	:= qt_ocorrencia_w;
		end if;

		select	nextval('w_pep_apap_seq')
		into STRICT	nr_sequencia_w
		;

		nr_seq_grupo_pai_w	:= nr_sequencia_w;

		insert into w_pep_apap(
			nr_sequencia,
			ds_informacao,
			nr_atendimento,
			nr_ordem_grupo,
			nr_ordem_inf,
			dt_atualizacao,
			nm_usuario,
			ds_cor_param,
			ds_cor_total_parcial,
			ds_cor_total_geral,
			ds_cor_grupo,
			qt_tam_informacao,
			qt_tam_hora,
			qt_tam_total,
			qt_tam_unid_med,
			ie_manter_nulo,
			dt_referencia,
			ie_numerico,
			qt_total_geral,
			ie_tipo_inf,
			ds_unid_med,
			ie_negrito_relat,
			ie_relat,
      ie_tipo_pg)
		values (	nr_seq_grupo_pai_w,
			ds_grupo_w,
			nr_atendimento_p,
			nr_seq_apres_grupo_w,
			0,
			clock_timestamp(),
			nm_usuario_p,
			ds_cor_param_w,
			ds_cor_total_parcial_w,
			ds_cor_total_geral_w,
			ds_cor_grupo_w,
			qt_tam_informacao_w,
			qt_tam_hora_w,
			qt_tam_total_w,
			qt_tam_unid_med_w,
			ie_manter_nulo_w,
			dt_referencia_w,
			'S',
			qt_ganho_perda_w,
			CASE WHEN ie_informacao_w='N' THEN  ie_tipo_w  ELSE null END ,
			CASE WHEN ie_informacao_w='N' THEN  obter_unid_med_usua('ml')  ELSE null END ,
			ie_negrito_w,
			ie_relat_w,
      ie_ganho_perda_w);

			commit;

		if (ie_tipo_w = 'SVP') then
            select  coalesce(max(ie_grafico),'N'),
                    coalesce(max(ie_minima),'N'),
                    coalesce(max(ie_maxima),'N'),
                    coalesce(max(ie_media),'N'),
                    coalesce(max(ie_total),'N')
            into STRICT    ie_grafico_w,
                    ie_minima_w,
                    ie_maxima_w,
                    ie_media_w,
                    ie_total_w
            from    pep_apap_inf
            where   nr_seq_grupo_apap = nr_seq_grupo_w;

			begin

				for item in solucao_item loop

					solucao_item_nr_seq_solucao_w := item.nr_seq_solucao;
					solucao_item_nr_prescricao_w := item.nr_prescricao;

                    select	nextval('w_pep_apap_seq')
					into STRICT	nr_sequencia_w
					;

					insert into w_pep_apap(
						nr_sequencia,
						ds_informacao,
						nr_atendimento,
						nr_ordem_grupo,
						nr_ordem_inf,
						dt_atualizacao,
						nm_usuario,
						ds_cor_param,
						ds_cor_total_parcial,
						ds_cor_total_geral,
						ds_cor_grupo,
						qt_tam_informacao,
						qt_tam_hora,
						qt_tam_total,
						qt_tam_unid_med,
						ie_manter_nulo,
						dt_referencia,
                        ie_grafico,
						ie_numerico,
						qt_total_geral,
						ie_tipo_inf,
						ds_unid_med,
						ie_negrito_relat,
						ie_relat,
            nr_seq_grupo,
            ie_tipo_pg)
					values (
						nr_sequencia_w,
						item.ds_solucao,
						nr_atendimento_p,
						nr_seq_apres_grupo_w,
						0,
						clock_timestamp(),
						nm_usuario_p,
						ds_cor_param_w,
						ds_cor_total_parcial_w,
						ds_cor_total_geral_w,
						ds_cor_grupo_w,
						qt_tam_informacao_w,
						qt_tam_hora_w,
						qt_tam_total_w,
						qt_tam_unid_med_w,
						ie_manter_nulo_w,
						dt_referencia_w,
                        ie_grafico_w,
						'S',
						qt_ganho_perda_w,
						CASE WHEN ie_informacao_w='N' THEN  ie_tipo_w  ELSE null END ,
						CASE WHEN ie_informacao_w='N' THEN  obter_unid_med_usua('ml')  ELSE null END ,
						ie_negrito_w,
						ie_relat_w,
            nr_seq_grupo_pai_w,
            ie_ganho_perda_w);

                        commit;

                        vt_perda_ganho_w.delete;

						ind := 0;
						while(ind < 24) loop
                            begin
                                vt_perda_ganho_w[ind].qt_perda_ganho := null;
                                ind	:= ind + 1;
                            end;
                        end loop;

                    qt_total6_w := 0;
                    qt_total12h_w := 0;
                    qt_total18h_w := 0;
                    qt_total24h_w := 0;
                    qt_max_valor_w := 0;
                    qt_media_valor_w := 0;
                    qt_media_w := 0;
                    qt_min_valor_w := null;

					for valor in solucao_valores loop
						vt_perda_ganho_w[valor.nr_hora].qt_perda_ganho := valor.qt_volume;

                        if (valor.qt_volume IS NOT NULL AND valor.qt_volume::text <> '') and (valor.qt_volume > coalesce(qt_max_valor_w,0)) then
                            qt_max_valor_w	:= valor.qt_volume;
                        end if;

                        if (valor.qt_volume IS NOT NULL AND valor.qt_volume::text <> '') and (valor.qt_volume < coalesce(qt_min_valor_w,9999999)) then
                            qt_min_valor_w	:= valor.qt_volume;
                        end if;

                        if (valor.qt_volume IS NOT NULL AND valor.qt_volume::text <> '') then
                        begin
                            qt_media_valor_w := coalesce(qt_media_valor_w,0) + valor.qt_volume;
                            qt_media_w := coalesce(qt_media_w,0) + 1;
                        end;
                        end if;
					end loop;

                    if (qt_media_w > 0) then
                    begin
                        qt_media_valor_w	:= dividir(qt_media_valor_w, qt_media_w);
                    end;
                    end if;

                    calcula_total_grupos(vt_perda_ganho_w);

                    qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;

					update	w_pep_apap
					set	ds_hora_00	= vt_perda_ganho_w[0].qt_perda_ganho,
						ds_hora_01	= vt_perda_ganho_w[1].qt_perda_ganho,
						ds_hora_02	= vt_perda_ganho_w[2].qt_perda_ganho,
						ds_hora_03	= vt_perda_ganho_w[3].qt_perda_ganho,
						ds_hora_04	= vt_perda_ganho_w[4].qt_perda_ganho,
						ds_hora_05	= vt_perda_ganho_w[5].qt_perda_ganho,
						ds_hora_06	= vt_perda_ganho_w[6].qt_perda_ganho,
						ds_hora_07	= vt_perda_ganho_w[7].qt_perda_ganho,
						ds_hora_08	= vt_perda_ganho_w[8].qt_perda_ganho,
						ds_hora_09	= vt_perda_ganho_w[9].qt_perda_ganho,
						ds_hora_10	= vt_perda_ganho_w[10].qt_perda_ganho,
						ds_hora_11	= vt_perda_ganho_w[11].qt_perda_ganho,
						ds_hora_12	= vt_perda_ganho_w[12].qt_perda_ganho,
						ds_hora_13	= vt_perda_ganho_w[13].qt_perda_ganho,
						ds_hora_14	= vt_perda_ganho_w[14].qt_perda_ganho,
						ds_hora_15	= vt_perda_ganho_w[15].qt_perda_ganho,
						ds_hora_16	= vt_perda_ganho_w[16].qt_perda_ganho,
						ds_hora_17	= vt_perda_ganho_w[17].qt_perda_ganho,
						ds_hora_18	= vt_perda_ganho_w[18].qt_perda_ganho,
						ds_hora_19	= vt_perda_ganho_w[19].qt_perda_ganho,
						ds_hora_20	= vt_perda_ganho_w[20].qt_perda_ganho,
						ds_hora_21	= vt_perda_ganho_w[21].qt_perda_ganho,
						ds_hora_22	= vt_perda_ganho_w[22].qt_perda_ganho,
						ds_hora_23	= vt_perda_ganho_w[23].qt_perda_ganho,
                        qt_maxima	    = CASE WHEN ie_maxima_w='N' THEN  null  ELSE round((qt_max_valor_w)::numeric,2) END ,
                        qt_media	    = CASE WHEN ie_media_w='N' THEN  null  ELSE round((qt_media_valor_w)::numeric,2) END ,
                        qt_minima       = CASE WHEN ie_minima_w='N' THEN  null  ELSE CASE WHEN qt_min_valor_w = NULL THEN  0  ELSE round((qt_min_valor_w)::numeric,2) END  END ,
                        qt_total_6h     = CASE WHEN qt_total6_w=0 THEN null  ELSE qt_total6_w END ,
                        qt_total_12h	= CASE WHEN qt_total12h_w=0 THEN null  ELSE qt_total12h_w END ,
                        qt_total_18h	= CASE WHEN qt_total18h_w=0 THEN null  ELSE qt_total18h_w END ,
                        qt_total_24h	= CASE WHEN qt_total24h_w=0 THEN null  ELSE qt_total24h_w END ,
                        qt_total_geral	= CASE WHEN ie_total_w='N' THEN  null  ELSE qt_total_geral_w END
					where	nr_sequencia = nr_sequencia_w;
					
					commit;
				end loop;
			end;

		elsif (ie_tipo_w <> 'BH') or (ie_informacao_w = 'S') then
			begin
			open c01;
			loop
			fetch c01 into
				nr_seq_apap_inf_w,
				nr_seq_inf_w,
				nr_seq_apres_w,
				nr_seq_tipo_pg_w,
				nr_seq_grupo_pg_w,
				nr_seq_grupo_pg_ww,
				nr_ficha_tecnica_w,
				ie_balanco_hidrico_w,
				ds_info_w,
				ds_grupo_pg_w,
				ds_tipo_pg_w,
				ds_ficha_tecnica_w,
				ds_balanco_hidrico_w,
				ds_unid_med_w,
				ie_manter_nulo_w,
				ie_grafico_w,
				ie_controla_adep_w,
				ie_minima_w,
				ie_maxima_w,
				ie_media_w,
				ie_total_w,
				nr_seq_exame_w,
				ie_escala_w,
				nr_seq_gas_w,
				ds_gas_w,
				nr_seq_inf_adic_w,
				ie_pupila_lado_w,
				cd_material_w,
				cd_grupo_material_w,
				cd_classe_material_w,
				cd_subgrupo_material_w,
				ds_informacao_inst_w,
				ie_apresenta_zero_w,
				ie_negrito_w,
				IE_MEMBRO_w,
				ie_relat_w,
                nr_seq_score_flex_w,
				IE_APARELHO_PA_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin
				qt_total6_w	:= null;
				qt_total12h_w	:= null;
				qt_total18h_w	:= null;
				qt_total24h_w	:= null;
				qt_total_geral_w:= null;
				ie_numerico_w	:= 'S';
				ds_cor_ref_sv_w := '';
				ds_cor_varias_sv_w := '';

				if (nr_seq_inf_w > 0) then
					select	max(obter_desc_expressao(cd_exp_unid_med, ds_unid_med)),
						max(ie_numerico)
					into STRICT	ds_unid_med_w,
						ie_numerico_w
					from	pep_informacao
					where	nr_sequencia	= nr_seq_inf_w;
				end if;
				if (ie_tipo_w = 'SV') or (ie_tipo_w = 'MR') or (ie_tipo_w = 'MH') or (ie_tipo_w = 'MA') or (ie_tipo_w = 'GL') or (ie_tipo_w = 'EL') or (ie_tipo_w = 'UR')  or (ie_tipo_w = 'URC')  or (ie_tipo_w = 'PC') then
					ds_informacao_w	:= ds_espaco_w||ds_info_w;

					if (IE_MEMBRO_w IS NOT NULL AND IE_MEMBRO_w::text <> '') then
						ds_informacao_w	:= ds_informacao_w||' - '||obter_valor_dominio(1304,IE_MEMBRO_w);
					end if;

					if (ie_pupila_lado_w IS NOT NULL AND ie_pupila_lado_w::text <> '') then
						ds_informacao_w:= ds_informacao_w ||' - '||obter_valor_dominio(1372,ie_pupila_lado_w);
					end if;

				elsif (ie_tipo_w = 'CH') or (ie_tipo_w = 'OC') then
					if (ds_tipo_pg_w IS NOT NULL AND ds_tipo_pg_w::text <> '') then
						ds_informacao_w	:= ds_espaco_w||ds_tipo_pg_w;
					else
						ds_informacao_w	:= ds_espaco_w||ds_grupo_pg_w;
					end if;

					if (nr_seq_inf_adic_w IS NOT NULL AND nr_seq_inf_adic_w::text <> '') then
						ds_unid_med_w	:= substr(obter_dados_pg_inf_adic(nr_seq_inf_adic_w,'D'),1,15);
					end if;

				elsif (ie_tipo_w 	= 'DE') then
					ds_informacao_w	:= ds_espaco_w||ds_ficha_tecnica_w;
				elsif (ie_tipo_w 	= 'BH') then
					ds_informacao_w	:= ds_espaco_w||ds_balanco_hidrico_w;
				elsif (ie_tipo_w	= 'GA') then
					ds_informacao_w	:= ds_espaco_w||ds_gas_w;
				elsif (ie_tipo_w = 'ES') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(2718, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'EB') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3317, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif	((ie_tipo_w = 'EN')  or (ie_tipo_w = 'CAM') or (ie_tipo_w = 'NHS') or (ie_tipo_w	= 'ETN') or (ie_tipo_w	= 'RR'))and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3603, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'EF') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3604, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'ET') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3605, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'ER') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3802, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'EFN') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3715, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'EM') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3716, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'EBQ') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3718, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'AP') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3719, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'AIV') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3721, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'GR') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3722, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'SP') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3723, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'PIM') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3724, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'PR') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3725, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'AK') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3726, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'PAR') and (ie_escala_w IS NOT NULL AND ie_escala_w::text <> '')then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio(3731, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'SNP') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 4702, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'SNPP') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 4703, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'SNPPM') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 4705, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'SNAP') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 4868, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'SOFA') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 4869, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'TI28') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 5252, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'ECA') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 5253, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'ALD') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 5254, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'MODS') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 5267, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'ECL') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 5268, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'KARN') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 5463, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'EMO') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 7412, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'EDMO') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 5464, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w	= 'CRIB') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 5840, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'ABP') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 8371, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'CEM') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 8368, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'ESTR') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 8505, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
        		elsif (ie_tipo_w = 'SF') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 9310, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				elsif (ie_tipo_w = 'FP') then
					ds_informacao_w	:= ds_espaco_w||obter_valor_dominio( 10518, ie_escala_w);
					nr_seq_inf_w := ie_escala_w;
				end if;



				if (ie_tipo_w	<> 'IA') then
					select	nextval('w_pep_apap_seq')
					into STRICT	nr_sequencia_w
					;


					insert into w_pep_apap(
						nr_sequencia,
						nr_seq_inf,
						nr_seq_inf_sv,
						ds_informacao,
						nr_atendimento,
						nr_ordem_grupo,
						nr_ordem_inf,
						dt_atualizacao,
						nm_usuario,
						ds_cor_param,
						ds_cor_total_parcial,
						ds_cor_total_geral,
						qt_tam_informacao,
						qt_tam_hora,
						qt_tam_total,
						qt_tam_unid_med,
						nr_seq_grupo,
						ie_manter_nulo,
						dt_referencia,
						ie_grafico,
						nr_seq_grupo_pg,
						nr_seq_tipo_pg,
						ie_numerico,
						ie_tipo_inf,
						ie_negrito_relat,
						ie_relat,
            ie_tipo_pg)
					values (	nr_sequencia_w,
						coalesce(nr_seq_inf_w,nr_seq_exame_w),
						CASE WHEN ie_tipo_inf_w='SV' THEN  obter_de_para_inf_apap_sv(nr_seq_inf_w)  ELSE null END ,
						ds_informacao_w,
						nr_atendimento_p,
						nr_seq_apres_grupo_w,
						nr_seq_apres_w,
						clock_timestamp(),
						nm_usuario_p,
						ds_cor_param_w,
						ds_cor_total_parcial_w,
						ds_cor_total_geral_w,
						qt_tam_informacao_w,
						qt_tam_hora_w,
						qt_tam_total_w,
						qt_tam_unid_med_w,
						nr_seq_grupo_pai_w,
						ie_manter_nulo_w,
						dt_referencia_w,
						ie_grafico_w,
						nr_seq_grupo_pg_ww,
						nr_seq_tipo_pg_w,
						ie_numerico_w,
						ie_tipo_inf_w,
						ie_negrito_w,
						ie_relat_w,
            ie_ganho_perda_w);
						
						commit;
				end if;
				vt_sinal_w.delete;

				ind := 0;
				while(ind < 24) loop
					begin
					vt_sinal_w[ind].vl_sinal	:= null;
					vt_sinal_w[ind].qt_registro	:= 0;
					ind 				:= ind + 1;
					end;
				end loop;




				if (ie_tipo_w = 'SV') then
					begin

					ds_cor_ref_sv_w := '';
					ds_cor_varias_sv_w := '';

					open c02;
					loop
					fetch c02 into
						nr_hora_w,
						qt_ppa_w,
						qt_ppc_w,
						qt_freq_cardiaca_w,
						qt_freq_resp_w,
						qt_temp_w,
						qt_altura_cm_w,
						qt_peso_w,
						qt_pvc_h2o_w,
						qt_pvc_w,
						qt_pa_sistolica_w,
						qt_pa_diastolica_w,
						qt_pam_w,
						qt_escala_dor_w,
						qt_glicemia_capilar_w,
						qt_insulina_w,
						qt_saturacao_o2_w,
						qt_pae_w,
						qt_pressao_intra_cranio_w,
						qt_pressao_intra_abd_w,
						qt_bcf_w,
						qt_temp_incubadora_w,
						qt_maec_w,
						qt_saturacao_o2_w,
						ds_escala_dor_w,
						ds_nivel_consciencia_w,
						ds_ritmo_ecg_w,
						qt_perimetro_cefalico_w,
						qt_perimetro_toracico_w,
						qt_perimetro_abdominal_w,
						qt_segmento_st_w,
						qt_superf_corporia_w,
						qt_imc_w,
						ie_decubito_w,
						qt_tamanho_pupila_w,
						qt_pupila_tam_esq_w,
						qt_o2_suplementar_w,
						ie_unid_med_o2_suplem_w,
						ds_pupila_reacao_luz_w,
						ds_pupila_alteracao_w,
						ds_pupila_lado_w,
						ds_sinal_focal_w,
						ds_sinal_focal_local_w,
						ds_hora_min_w,
						IE_MEMBRO_SAT_O2_w,
						ie_sitio_w,
						qt_angulo_cabeceira_w,
						ie_membro_pa_w,
						qt_pic_temp_w,
						qt_circunf_panturrilha_w,
						qt_circunf_braco_w,
						qt_bcf_2_w,
						ie_glic_extrapol_w,
						DS_PUPILA_REACAO_LUZ_E_w,
						QT_BCF_3_w,
						qt_pressao_intra_abd_h2o_w,
						ds_glic_extrapol_w,
						qt_irradiancia_w,
						qt_glicemia_mmol_w,
						IE_APARELHO_PA_SV_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */

						if (IE_MEMBRO_W IS NOT NULL AND IE_MEMBRO_W::text <> '') and (IE_MEMBRO_SAT_O2_w	<> IE_MEMBRO_W) then
							goto fim;
						end if;

						if (nr_seq_inf_w = 12) and
							((qt_peso_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_peso_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_peso_w);

						elsif (nr_seq_inf_w = 13) and
							((qt_altura_cm_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_altura_cm_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_altura_cm_w);
						elsif (nr_seq_inf_w = 14) and
							(((qt_pa_sistolica_w > 0) or (ie_apresenta_zero_w	= 'S')) and
							((qt_pa_diastolica_w > 0) or (ie_apresenta_zero_w	= 'S'))) and
							((IE_APARELHO_PA_w = IE_APARELHO_PA_SV_w) or (coalesce(IE_APARELHO_PA_w::text, '') = '')) then
							adiciona_registro(nr_hora_w,qt_pa_sistolica_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pa_sistolica_w);
						elsif (nr_seq_inf_w = 15) and
							((qt_freq_cardiaca_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_freq_cardiaca_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_freq_cardiaca_w);
						elsif (nr_seq_inf_w = 16) and
							((qt_freq_resp_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_freq_resp_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_freq_resp_w);
						elsif (nr_seq_inf_w = 17) and
							((qt_temp_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_temp_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_temp_w);
						elsif (nr_seq_inf_w = 21) and
							((qt_pvc_h2o_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_pvc_h2o_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pvc_h2o_w);
						elsif (nr_seq_inf_w = 23) and
							((qt_pa_diastolica_w > 0) or (ie_apresenta_zero_w	= 'S')) and
							((qt_pa_sistolica_w > 0)or (ie_apresenta_zero_w	= 'S')) and
							((IE_APARELHO_PA_w = IE_APARELHO_PA_SV_w) or (coalesce(IE_APARELHO_PA_w::text, '') = '')) then
							adiciona_registro(nr_hora_w,qt_pa_diastolica_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pa_diastolica_w);
						elsif (nr_seq_inf_w = 24) and
							((qt_pam_w > 0) or (ie_apresenta_zero_w	= 'S')) and
							((IE_APARELHO_PA_w = IE_APARELHO_PA_SV_w) or (coalesce(IE_APARELHO_PA_w::text, '') = '')) then
							adiciona_registro(nr_hora_w,qt_pam_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pam_w);
						elsif (nr_seq_inf_w = 43) and (ds_ritmo_ecg_w IS NOT NULL AND ds_ritmo_ecg_w::text <> '') then
							adiciona_registro(nr_hora_w,ds_ritmo_ecg_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 44) and (ds_escala_dor_w IS NOT NULL AND ds_escala_dor_w::text <> '') then
							adiciona_registro(nr_hora_w,ds_escala_dor_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 45) and (qt_escala_dor_w >= 0) then
							adiciona_registro(nr_hora_w,qt_escala_dor_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_escala_dor_w);
						elsif (nr_seq_inf_w = 51) and
							((qt_glicemia_capilar_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_glicemia_capilar_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_glicemia_capilar_w);
						elsif (nr_seq_inf_w = 52) and
							((qt_insulina_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_insulina_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_insulina_w);
						elsif (nr_seq_inf_w = 54) and
							((qt_saturacao_o2_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_saturacao_o2_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_saturacao_o2_w);
						elsif (nr_seq_inf_w = 55) and
							((qt_pae_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_pae_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pae_w);
						elsif (nr_seq_inf_w = 47) and
							((qt_pressao_intra_cranio_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_pressao_intra_cranio_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pressao_intra_cranio_w);
						elsif (nr_seq_inf_w = 49) and
							((qt_pressao_intra_abd_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_pressao_intra_abd_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pressao_intra_abd_w);
						elsif (nr_seq_inf_w = 56) and
							((qt_bcf_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_bcf_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_bcf_w);
						elsif (nr_seq_inf_w = 48) and
							((qt_temp_incubadora_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_temp_incubadora_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_temp_incubadora_w);
						elsif (nr_seq_inf_w = 53) and
							((qt_maec_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_maec_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_maec_w);
						elsif (nr_seq_inf_w = 129) and
							((qt_pvc_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_pvc_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pvc_w);
						elsif (nr_seq_inf_w = 130) and
							((qt_perimetro_cefalico_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_perimetro_cefalico_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_perimetro_cefalico_w);
						elsif (nr_seq_inf_w = 131) and
							((qt_perimetro_toracico_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_perimetro_toracico_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_perimetro_toracico_w);
						elsif (nr_seq_inf_w = 132) and
							((qt_perimetro_abdominal_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_perimetro_abdominal_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_perimetro_abdominal_w);
						elsif (nr_seq_inf_w = 133) and
							((qt_segmento_st_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_segmento_st_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_segmento_st_w);
						elsif (nr_seq_inf_w = 134) and
							((qt_superf_corporia_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_superf_corporia_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_superf_corporia_w);
						elsif (nr_seq_inf_w = 135) and
							((qt_imc_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_imc_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_imc_w);
						elsif (nr_seq_inf_w = 162) and (ie_decubito_w IS NOT NULL AND ie_decubito_w::text <> '') then
							if (vl_param_decub_w = 'S') then
								adiciona_registro(nr_hora_w,ie_decubito_w,ds_hora_min_w);
							else
								adiciona_registro(nr_hora_w,obter_valor_dominio(2279,ie_decubito_w),ds_hora_min_w);
							end if;
						elsif (nr_seq_inf_w = 190) and (qt_tamanho_pupila_w IS NOT NULL AND qt_tamanho_pupila_w::text <> '') then
							adiciona_registro(nr_hora_w,qt_tamanho_pupila_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_tamanho_pupila_w);
						elsif (nr_seq_inf_w = 191) and (ds_pupila_reacao_luz_w IS NOT NULL AND ds_pupila_reacao_luz_w::text <> '') then
							adiciona_registro(nr_hora_w,ds_pupila_reacao_luz_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 192) and (ds_pupila_alteracao_w IS NOT NULL AND ds_pupila_alteracao_w::text <> '') then
							adiciona_registro(nr_hora_w,ds_pupila_alteracao_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 193) and (ds_pupila_lado_w IS NOT NULL AND ds_pupila_lado_w::text <> '') then
							adiciona_registro(nr_hora_w,ds_pupila_lado_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 194) and (ds_sinal_focal_w IS NOT NULL AND ds_sinal_focal_w::text <> '') then
							adiciona_registro(nr_hora_w,ds_sinal_focal_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 195) and (ds_sinal_focal_local_w IS NOT NULL AND ds_sinal_focal_local_w::text <> '') then
							adiciona_registro(nr_hora_w,ds_sinal_focal_local_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 207) and (qt_ppc_w IS NOT NULL AND qt_ppc_w::text <> '') then
							adiciona_registro(nr_hora_w,qt_ppc_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_ppc_w);
						elsif (nr_seq_inf_w = 208) and (qt_ppa_w IS NOT NULL AND qt_ppa_w::text <> '') then
							adiciona_registro(nr_hora_w,qt_ppa_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_ppa_w);
						elsif (nr_seq_inf_w = 210) and (qt_pupila_tam_esq_w IS NOT NULL AND qt_pupila_tam_esq_w::text <> '') then
							adiciona_registro(nr_hora_w,qt_pupila_tam_esq_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pupila_tam_esq_w);
						elsif (nr_seq_inf_w = 217) and (qt_o2_suplementar_w IS NOT NULL AND qt_o2_suplementar_w::text <> '') then
							begin
							adiciona_registro(nr_hora_w,qt_o2_suplementar_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_o2_suplementar_w);
							if (IE_UNID_MED_O2_SUPLEM_w IS NOT NULL AND IE_UNID_MED_O2_SUPLEM_w::text <> '') then
								ds_unid_med_w	:= obter_valor_dominio(3574,IE_UNID_MED_O2_SUPLEM_w);
							end if;
							end;
						elsif (nr_seq_inf_w = 227) and (ie_sitio_w IS NOT NULL AND ie_sitio_w::text <> '') then
							adiciona_registro(nr_hora_w,ie_sitio_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 232) and (ds_nivel_consciencia_w IS NOT NULL AND ds_nivel_consciencia_w::text <> '') then
							adiciona_registro(nr_hora_w,ds_nivel_consciencia_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 238) and (qt_angulo_cabeceira_w > 0) then
							adiciona_registro(nr_hora_w,qt_angulo_cabeceira_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_angulo_cabeceira_w);
						elsif (nr_seq_inf_w = 141) and (ie_membro_pa_w IS NOT NULL AND ie_membro_pa_w::text <> '') then
							adiciona_registro(nr_hora_w,ie_membro_pa_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 239) and (IE_MEMBRO_SAT_O2_w IS NOT NULL AND IE_MEMBRO_SAT_O2_w::text <> '') then
							adiciona_registro(nr_hora_w,IE_MEMBRO_SAT_O2_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 240) and (qt_pic_temp_w > 0) then
							adiciona_registro(nr_hora_w,qt_pic_temp_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pic_temp_w);
						elsif (nr_seq_inf_w = 241) and (qt_circunf_panturrilha_w > 0) then
							adiciona_registro(nr_hora_w,qt_circunf_panturrilha_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_circunf_panturrilha_w);
						elsif (nr_seq_inf_w = 242) and (qt_circunf_braco_w > 0) then
							adiciona_registro(nr_hora_w,qt_circunf_braco_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_circunf_braco_w);
						elsif (nr_seq_inf_w = 243) and (qt_bcf_2_w > 0) then
							adiciona_registro(nr_hora_w,qt_bcf_2_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_bcf_2_w);
						elsif (nr_seq_inf_w = 244) and (ie_glic_extrapol_w IS NOT NULL AND ie_glic_extrapol_w::text <> '') then
							adiciona_registro(nr_hora_w,ie_glic_extrapol_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 246) and (DS_PUPILA_REACAO_LUZ_E_w IS NOT NULL AND DS_PUPILA_REACAO_LUZ_E_w::text <> '') then
							adiciona_registro(nr_hora_w,DS_PUPILA_REACAO_LUZ_E_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 247) and (QT_BCF_3_w > 0) then
							adiciona_registro(nr_hora_w,QT_BCF_3_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, QT_BCF_3_w);
						elsif (nr_seq_inf_w = 264) and (qt_pressao_intra_abd_h2o_w > 0) then
							adiciona_registro(nr_hora_w,qt_pressao_intra_abd_h2o_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_pressao_intra_abd_h2o_w);
						elsif (nr_seq_inf_w = 279) and (ds_glic_extrapol_w IS NOT NULL AND ds_glic_extrapol_w::text <> '') then
							adiciona_registro(nr_hora_w,ds_glic_extrapol_w,ds_hora_min_w);
						elsif (nr_seq_inf_w = 281) and (qt_irradiancia_w IS NOT NULL AND qt_irradiancia_w::text <> '') then
							adiciona_registro(nr_hora_w,qt_irradiancia_w,ds_hora_min_w);
							comparar_limites_SV(nr_hora_w, nr_seq_inf_w, qt_irradiancia_w);
						elsif (nr_seq_inf_w = 358) and
							((qt_glicemia_mmol_w > 0) or (ie_apresenta_zero_w	= 'S')) then
							adiciona_registro(nr_hora_w,qt_glicemia_mmol_w,ds_hora_min_w);
						end if;

						if (substr(vt_sinal_w[nr_hora_w].vl_sinal,1,1) = ',') or (substr(vt_sinal_w[nr_hora_w].vl_sinal,1,1) = '.') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= '0'||vt_sinal_w[nr_hora_w].vl_sinal;
						end if;

						<<Fim>>
						nr_hora_w	:= nr_hora_w;
					end loop;
					Close C02;


					qt_total6_w	:= 		coalesce(vt_sinal_w[6].vl_sinal,0) +
										coalesce(vt_sinal_w[7].vl_sinal,0) +
										coalesce(vt_sinal_w[8].vl_sinal,0) +
										coalesce(vt_sinal_w[9].vl_sinal,0) +
										coalesce(vt_sinal_w[10].vl_sinal,0) +
										coalesce(vt_sinal_w[11].vl_sinal,0);
					qt_total12h_w	:=	coalesce(vt_sinal_w[12].vl_sinal,0) +
										coalesce(vt_sinal_w[13].vl_sinal,0) +
										coalesce(vt_sinal_w[14].vl_sinal,0) +
										coalesce(vt_sinal_w[15].vl_sinal,0) +
										coalesce(vt_sinal_w[16].vl_sinal,0) +
										coalesce(vt_sinal_w[17].vl_sinal,0);
					qt_total18h_w	:=	coalesce(vt_sinal_w[18].vl_sinal,0) +
										coalesce(vt_sinal_w[19].vl_sinal,0) +
										coalesce(vt_sinal_w[20].vl_sinal,0) +
										coalesce(vt_sinal_w[21].vl_sinal,0) +
										coalesce(vt_sinal_w[22].vl_sinal,0) +
										coalesce(vt_sinal_w[23].vl_sinal,0);
					qt_total24h_w	:=	coalesce(vt_sinal_w[0].vl_sinal,0) +
										coalesce(vt_sinal_w[1].vl_sinal,0) +
										coalesce(vt_sinal_w[2].vl_sinal,0) +
										coalesce(vt_sinal_w[3].vl_sinal,0) +
										coalesce(vt_sinal_w[4].vl_sinal,0) +
										coalesce(vt_sinal_w[5].vl_sinal,0);

					qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;

					qt_total6_w	:= 0;
					qt_total12h_w	:= 0;
					qt_total18h_w	:= 0;
					qt_total24h_w	:= 0;
					exception
					when others then
						qt_total6_w	:= 0;
						qt_total12h_w	:= 0;
						qt_total18h_w	:= 0;
						qt_total24h_w	:= 0;
						qt_total_geral_w:= 0;

					end;

				elsif (ie_tipo_w	= 'GL') then
					begin


					if (nr_seq_inf_w	in (181,189,212,213)) then
						open C16;
						loop
						fetch C16 into
							qt_hct_w,
							qt_glicose_w,
							nr_hora_w,
							qt_bolus_adm_w,
							qt_veloc_adm_w;
						EXIT WHEN NOT FOUND; /* apply on C16 */
							begin

							if (nr_seq_inf_w	= 181) and (qt_hct_w	> 0) then
								adiciona_registro(nr_hora_w,qt_hct_w);
							elsif (nr_seq_inf_w	= 189) and (qt_glicose_w	> 0) then
								adiciona_registro(nr_hora_w,qt_glicose_w);
							elsif (nr_seq_inf_w	= 212) then
								adiciona_registro(nr_hora_w,qt_bolus_adm_w);
							elsif (nr_seq_inf_w	= 213) then
								adiciona_registro(nr_hora_w,qt_veloc_adm_w);
							end if;
							end;
						end loop;
						close C16;
					elsif (nr_seq_inf_w	in (182,187,188,369)) then

						open C17;
						loop
						fetch C17 into
							qt_glicemia_w,
							qt_glicemia_mmol_w,
							qt_insulina_w,
							qt_glicose_w,
							nr_hora_w;
						EXIT WHEN NOT FOUND; /* apply on C17 */
							begin
							if (nr_seq_inf_w	= 182) and (qt_glicemia_w	> 0) then
								adiciona_registro(nr_hora_w,qt_glicemia_w);
							elsif (nr_seq_inf_w	= 369) and (qt_glicemia_mmol_w	> 0) then
								adiciona_registro(nr_hora_w,qt_glicemia_mmol_w);
							elsif (nr_seq_inf_w	= 187) and (qt_insulina_w	> 0) then
								adiciona_registro(nr_hora_w,qt_insulina_w);
							elsif (nr_seq_inf_w	= 188) and (qt_glicose_w	> 0) then
								adiciona_registro(nr_hora_w,qt_glicose_w);
							end if;
							end;
						end loop;
						close C17;
					elsif (nr_seq_inf_w	= 184) then

						open C18;
						loop
						fetch C18 into
							qt_glicemia_w,
							nr_hora_w,
							dt_glicemia_w;
						EXIT WHEN NOT FOUND; /* apply on C18 */
							begin
							if (qt_glicemia_w	> 0) then
								adiciona_registro(nr_hora_w,qt_glicemia_w);
							end if;
							end;
						end loop;
						close C18;

					end if;

					qt_total6_w	:= 	coalesce(vt_sinal_w[6].vl_sinal,0) +
								coalesce(vt_sinal_w[7].vl_sinal,0) +
								coalesce(vt_sinal_w[8].vl_sinal,0) +
								coalesce(vt_sinal_w[9].vl_sinal,0) +
								coalesce(vt_sinal_w[10].vl_sinal,0) +
								coalesce(vt_sinal_w[11].vl_sinal,0);
					qt_total12h_w	:=	coalesce(vt_sinal_w[12].vl_sinal,0) +
								coalesce(vt_sinal_w[13].vl_sinal,0) +
								coalesce(vt_sinal_w[14].vl_sinal,0) +
								coalesce(vt_sinal_w[15].vl_sinal,0) +
								coalesce(vt_sinal_w[16].vl_sinal,0) +
								coalesce(vt_sinal_w[17].vl_sinal,0);
					qt_total18h_w	:=	coalesce(vt_sinal_w[18].vl_sinal,0) +
								coalesce(vt_sinal_w[19].vl_sinal,0) +
								coalesce(vt_sinal_w[20].vl_sinal,0) +
								coalesce(vt_sinal_w[21].vl_sinal,0) +
								coalesce(vt_sinal_w[22].vl_sinal,0) +
								coalesce(vt_sinal_w[23].vl_sinal,0);
					qt_total24h_w	:=	coalesce(vt_sinal_w[0].vl_sinal,0) +
								coalesce(vt_sinal_w[1].vl_sinal,0) +
								coalesce(vt_sinal_w[2].vl_sinal,0) +
								coalesce(vt_sinal_w[3].vl_sinal,0) +
								coalesce(vt_sinal_w[4].vl_sinal,0) +
								coalesce(vt_sinal_w[5].vl_sinal,0);

					qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;
					qt_total6_w	:= 0;
					qt_total12h_w	:= 0;
					qt_total18h_w	:= 0;
					qt_total24h_w	:= 0;


					exception
					when others then
						qt_total6_w	:= 0;
						qt_total12h_w	:= 0;
						qt_total18h_w	:= 0;
						qt_total24h_w	:= 0;
						qt_total_geral_w:= 0;

					end;

				elsif (ie_tipo_w = 'UR') then
					open c14;
					loop
					fetch c14 into
						ie_leucocitos_w,
						ie_urobilinogenio_w,
						ie_ph_w,
						ie_densidade_w,
						ie_bilirrubina_w,
						ie_nitrito_w,
						ie_proteina_w,
						ie_sangue_w,
						ie_cetona_w,
						ie_glicose_w,
						nr_hora_w;
					EXIT WHEN NOT FOUND; /* apply on c14 */
					begin
						if (nr_seq_inf_w = 172) and (ie_bilirrubina_w IS NOT NULL AND ie_bilirrubina_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_bilirrubina_w;
						elsif (nr_seq_inf_w = 171) and (ie_densidade_w IS NOT NULL AND ie_densidade_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_densidade_w;
						elsif (nr_seq_inf_w = 176) and (ie_cetona_w IS NOT NULL AND ie_cetona_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_cetona_w;
						elsif (nr_seq_inf_w = 177) and (ie_glicose_w IS NOT NULL AND ie_glicose_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_glicose_w;
						elsif (nr_seq_inf_w = 168) and (ie_leucocitos_w IS NOT NULL AND ie_leucocitos_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_leucocitos_w;
						elsif (nr_seq_inf_w = 173) and (ie_nitrito_w IS NOT NULL AND ie_nitrito_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_nitrito_w;
						elsif (nr_seq_inf_w = 170) and (ie_ph_w IS NOT NULL AND ie_ph_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_ph_w;
						elsif (nr_seq_inf_w = 174) and (ie_proteina_w IS NOT NULL AND ie_proteina_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_proteina_w;
						elsif (nr_seq_inf_w = 175) and (ie_sangue_w IS NOT NULL AND ie_sangue_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_sangue_w;
						elsif (nr_seq_inf_w = 169) and (ie_urobilinogenio_w IS NOT NULL AND ie_urobilinogenio_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_urobilinogenio_w;
						end if;
					end;
					end loop;
					close c14;
				elsif (ie_tipo_w = 'URC') then
					open c20;
					loop
					fetch c20 into
						ie_leucocitos_w,
						ie_urobilinogenio_w,
						ie_ph_w,
						ie_densidade_w,
						ie_bilirrubina_w,
						ie_proteina_w,
						ie_nitrito_w,
						ie_sangue_w,
						ie_cetona_w,
						ie_glicose_w,
						nr_hora_w;
					EXIT WHEN NOT FOUND; /* apply on c20 */
					begin
						if (nr_seq_inf_w = 284) and (ie_bilirrubina_w IS NOT NULL AND ie_bilirrubina_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_bilirrubina_w;
						elsif (nr_seq_inf_w = 286) and (ie_densidade_w IS NOT NULL AND ie_densidade_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_densidade_w;
						elsif (nr_seq_inf_w = 285) and (ie_cetona_w IS NOT NULL AND ie_cetona_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_cetona_w;
						elsif (nr_seq_inf_w = 287) and (ie_glicose_w IS NOT NULL AND ie_glicose_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_glicose_w;
						elsif (nr_seq_inf_w = 288) and (ie_leucocitos_w IS NOT NULL AND ie_leucocitos_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_leucocitos_w;
						elsif (nr_seq_inf_w = 289) and (ie_nitrito_w IS NOT NULL AND ie_nitrito_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_nitrito_w;
						elsif (nr_seq_inf_w = 290) and (ie_ph_w IS NOT NULL AND ie_ph_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_ph_w;
						elsif (nr_seq_inf_w = 291) and (ie_proteina_w IS NOT NULL AND ie_proteina_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_proteina_w;
						elsif (nr_seq_inf_w = 292) and (ie_sangue_w IS NOT NULL AND ie_sangue_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_sangue_w;
						elsif (nr_seq_inf_w = 293) and (ie_urobilinogenio_w IS NOT NULL AND ie_urobilinogenio_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_urobilinogenio_w;
						end if;
					end;
					end loop;
					close c20;
				elsif (ie_tipo_w = 'MR') then
					begin
					open c03;
					loop
					fetch c03 into
						nr_hora_w,
						qt_rel_pao2_fio2_w,
						qt_rima_labial_w,
						qt_fluxo_oxigenio_w,
						qt_fio2_w,
						qt_freq_vent_w,
						qt_amplitude_w,
						qt_freq_prog_w,
						qt_freq_resp_w,
						qt_vc_prog_w,
						qt_vci_w,
						qt_vmin_w,
						qt_pip_w,
						qt_pplato_w,
						qt_peep_w,
						qt_ps_w,
						qt_pva_w,
						qt_auto_peep_w,
						qt_co2_w,
						qt_cst_w,
						qt_rsr_w,
						qt_fluxo_insp_w,
						qt_tempo_insp_w,
						qt_ti_te_w,
						qt_vce_w,
						qt_sensib_resp_w,
						qt_sensib_fluxo_w,
						qt_limite_pa_max_w,
						qt_limite_pa_min_w,
						qt_pressao_cuff_w,
						qt_pressao_cuff_CMH2O_w,
						qt_grad_aao2_w,
						qt_sat_venosa_o2_w,
						qt_saturacao_o2_w,
						ds_respiracao_w,
						cd_mod_vent_w,
						ds_disp_resp_esp_w,
						ie_respiracao_w,
						qt_ti_w,
						qt_te_w,
						QT_PC_w,
						ds_equipamento_w,
						qt_fluxo_ar_compr_w,
						qt_oxido_nitrico_w,
						ie_muscul_acess_w,
						qt_temp_humidifier_w,
						ie_air_entry_w,
						ds_mod_vent_w;
					EXIT WHEN NOT FOUND; /* apply on c03 */
						begin
						if (nr_seq_inf_w = 18) and (qt_rel_pao2_fio2_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_rel_pao2_fio2_w;
						elsif (nr_seq_inf_w = 89) and (ds_respiracao_w IS NOT NULL AND ds_respiracao_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ds_respiracao_w;
						elsif (nr_seq_inf_w = 90) and (ds_disp_resp_esp_w IS NOT NULL AND ds_disp_resp_esp_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ds_disp_resp_esp_w;
						elsif (nr_seq_inf_w = 91) and (qt_rima_labial_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_rima_labial_w;
						elsif (nr_seq_inf_w = 93) and (cd_mod_vent_w IS NOT NULL AND cd_mod_vent_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= cd_mod_vent_w;
						elsif (nr_seq_inf_w = 96) and (qt_fluxo_oxigenio_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_fluxo_oxigenio_w;
						elsif (nr_seq_inf_w = 94) and (qt_fio2_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_fio2_w;
						elsif (nr_seq_inf_w = 110) and (qt_freq_vent_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_freq_vent_w;
						elsif (nr_seq_inf_w = 273) and (qt_amplitude_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_amplitude_w;
						elsif (nr_seq_inf_w = 276) and (qt_freq_prog_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_freq_prog_w;
						elsif (nr_seq_inf_w = 97) and (qt_freq_resp_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_freq_resp_w;
						elsif (nr_seq_inf_w = 111) and (qt_vc_prog_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_vc_prog_w;
						elsif (nr_seq_inf_w = 100) and (qt_vci_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_vci_w;
						elsif (nr_seq_inf_w = 112) and (qt_vmin_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_vmin_w;
						elsif (nr_seq_inf_w = 98) and (qt_pip_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pip_w;
						elsif (nr_seq_inf_w = 99) and (qt_pplato_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pplato_w;
						elsif (nr_seq_inf_w = 101) and (qt_peep_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_peep_w;
						elsif (nr_seq_inf_w = 102) and (qt_ps_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_ps_w;
						elsif (nr_seq_inf_w = 113) and (qt_pva_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pva_w;
						elsif (nr_seq_inf_w = 114) and (qt_auto_peep_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_auto_peep_w;
						elsif (nr_seq_inf_w = 115) and (qt_co2_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_co2_w;
						elsif (nr_seq_inf_w = 116) and (qt_cst_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_cst_w;

						elsif (nr_seq_inf_w = 117) and (qt_rsr_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_rsr_w;

						elsif (nr_seq_inf_w = 118) and (qt_fluxo_insp_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_fluxo_insp_w;

						elsif (nr_seq_inf_w = 119) and (qt_tempo_insp_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_tempo_insp_w;

						elsif (nr_seq_inf_w = 120) and (qt_ti_te_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_ti_te_w;

						elsif (nr_seq_inf_w = 103) and (qt_vce_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_vce_w;

						elsif (nr_seq_inf_w = 121) and (qt_sensib_resp_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_sensib_resp_w;
							
						elsif (nr_seq_inf_w = 619) and (qt_sensib_fluxo_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_sensib_fluxo_w;

						elsif (nr_seq_inf_w = 122) and (qt_limite_pa_max_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_limite_pa_max_w;

						elsif (nr_seq_inf_w = 123) and (qt_limite_pa_min_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_limite_pa_min_w;

						elsif (nr_seq_inf_w = 104) and (qt_pressao_cuff_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pressao_cuff_w;

						elsif (nr_seq_inf_w = 209) and (qt_pressao_cuff_CMH2O_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pressao_cuff_CMH2O_w;

						elsif (nr_seq_inf_w = 106) and (qt_grad_aao2_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_grad_aao2_w;

						elsif (nr_seq_inf_w = 107) and (qt_sat_venosa_o2_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_sat_venosa_o2_w;

						elsif (nr_seq_inf_w = 108) and (qt_saturacao_o2_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_saturacao_o2_w;
						elsif (nr_seq_inf_w = 211) and (ie_respiracao_w IS NOT NULL AND ie_respiracao_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_respiracao_w;
						elsif (nr_seq_inf_w	= 214) and (qt_te_w IS NOT NULL AND qt_te_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_te_w;
						elsif (nr_seq_inf_w	= 215) and (qt_ti_w IS NOT NULL AND qt_ti_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_ti_w;
						elsif (nr_seq_inf_w	= 218) and (QT_PC_w IS NOT NULL AND QT_PC_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= QT_PC_w;
						elsif (nr_seq_inf_w	= 220) and (ds_equipamento_w IS NOT NULL AND ds_equipamento_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ds_equipamento_w;
						elsif (nr_seq_inf_w	= 221) and (qt_fluxo_ar_compr_w IS NOT NULL AND qt_fluxo_ar_compr_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_fluxo_ar_compr_w;
						elsif (nr_seq_inf_w	= 222) and (qt_oxido_nitrico_w IS NOT NULL AND qt_oxido_nitrico_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_oxido_nitrico_w;
						elsif (nr_seq_inf_w = 245) and (ie_muscul_acess_w IS NOT NULL AND ie_muscul_acess_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_muscul_acess_w;
						elsif (nr_seq_inf_w = 372) and (qt_temp_humidifier_w IS NOT NULL AND qt_temp_humidifier_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_temp_humidifier_w;
						elsif (nr_seq_inf_w = 373) and (ie_air_entry_w IS NOT NULL AND ie_air_entry_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_air_entry_w;
						elsif (nr_seq_inf_w = 613) and (ds_mod_vent_w IS NOT NULL AND ds_mod_vent_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ds_mod_vent_w;	
						end if;
						if (substr(vt_sinal_w[nr_hora_w].vl_sinal,1,1) = ',') or (substr(vt_sinal_w[nr_hora_w].vl_sinal,1,1) = '.') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= '0'||vt_sinal_w[nr_hora_w].vl_sinal;
						end if;
						end;
					end loop;
					Close C03;
					end;
					
                elsif (ie_tipo_w = 'FP') then
					begin
					for ATENDIMENTO_CAPAC_PULMONAR in C73 loop		

						if (ie_escala_w = '1') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_VEF1;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_VEF1_PREV;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_CAPACI_VITAL;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_CAPAC_PUL_TOTAL;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_CAPAC_VITAL_FORC;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_CAPA_RES_FUN;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_FLUX_EXP_MED;
						elsif (ie_escala_w = '8') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_INDICE_TIFFENEAU;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_PICO_FLUX_EXP;
						elsif (ie_escala_w = '10') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_PICO_FLUXO_RESP_PREV;
						elsif (ie_escala_w = 'TEF') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_TEF;
						elsif (ie_escala_w = '12') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_CAPAC_INSP;
						elsif (ie_escala_w = '13') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_VOL_RES;
						elsif (ie_escala_w = '14') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_VOL_RES_EXP;
						elsif (ie_escala_w = '15') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_VOL_CORRENTE;
						elsif (ie_escala_w = '16') then
							vt_sinal_w[ATENDIMENTO_CAPAC_PULMONAR.NR_HORA_FP].vl_sinal := ATENDIMENTO_CAPAC_PULMONAR.QT_VOL_RES_INSP;
						end if;
					end loop;

					end;

				elsif (ie_tipo_w = 'MH') then
					begin
					open c09;
					loop
					fetch c09 into
						nr_hora_w,
						qt_pa_sist_ap_w,
						qt_pa_diast_ap_w,
						qt_pa_media_ap_w,
						qt_pa_ocluida_ap_w,
						qt_pvd_sist_w,
						qt_pvd_diast_final_w,
						qt_debito_card_w,
						tx_indice_card_w,
						qt_volume_sist_w,
						tx_indice_sist_w,
						qt_rv_sistemica_w,
						tx_rv_sistemica_w,
						qt_rv_pulmonar_w,
						tx_rv_pulmonar_w,
						qt_trab_sist_ve_w,
						tx_trab_sist_ve_w,
						qt_trab_sist_vd_w,
						tx_trab_sist_vd_w,
						qt_satur_ven_mista_oxigenio_w,
						QT_DELTA_PP_w;
					EXIT WHEN NOT FOUND; /* apply on c09 */
						begin
						if (nr_seq_inf_w = 59) and (qt_pa_sist_ap_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pa_sist_ap_w;

						elsif (nr_seq_inf_w = 60) and (qt_pa_diast_ap_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pa_diast_ap_w;

						elsif (nr_seq_inf_w = 62) and (qt_pa_media_ap_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pa_media_ap_w;

						elsif (nr_seq_inf_w = 63) and (qt_pa_ocluida_ap_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pa_ocluida_ap_w;

						elsif (nr_seq_inf_w = 64) and (qt_pvd_sist_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pvd_sist_w;

						elsif (nr_seq_inf_w = 65) and (qt_pvd_diast_final_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_pvd_diast_final_w;

						elsif (nr_seq_inf_w = 66) and (qt_debito_card_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_debito_card_w;

						elsif (nr_seq_inf_w = 67) and (tx_indice_card_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= tx_indice_card_w;

						elsif (nr_seq_inf_w = 69) and (qt_volume_sist_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_volume_sist_w;

						elsif (nr_seq_inf_w = 70) and (tx_indice_sist_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= tx_indice_sist_w;

						elsif (nr_seq_inf_w = 71) and (qt_rv_sistemica_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_rv_sistemica_w;

						elsif (nr_seq_inf_w = 72) and (tx_rv_sistemica_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= tx_rv_sistemica_w;

						elsif (nr_seq_inf_w = 73) and (qt_rv_pulmonar_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_rv_pulmonar_w;

						elsif (nr_seq_inf_w = 74) and (tx_rv_pulmonar_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= tx_rv_pulmonar_w;

						elsif (nr_seq_inf_w = 75) and (qt_trab_sist_ve_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_trab_sist_ve_w;

						elsif (nr_seq_inf_w = 76) and (tx_trab_sist_ve_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= tx_trab_sist_ve_w;

						elsif (nr_seq_inf_w = 77) and (qt_trab_sist_vd_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_trab_sist_vd_w;

						elsif (nr_seq_inf_w = 78) and (tx_trab_sist_vd_w <> 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= tx_trab_sist_vd_w;

						elsif (nr_seq_inf_w = 79) and (qt_satur_ven_mista_oxigenio_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_satur_ven_mista_oxigenio_w;
						elsif (nr_seq_inf_w = 236) and (QT_DELTA_PP_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= QT_DELTA_PP_w;

						end if;
						if (substr(vt_sinal_w[nr_hora_w].vl_sinal,1,1) = ',') or (substr(vt_sinal_w[nr_hora_w].vl_sinal,1,1) = '.') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= '0'||vt_sinal_w[nr_hora_w].vl_sinal;
						end if;
					end;
					end loop;
					Close C09;
					end;

				elsif (ie_tipo_w = 'MA') then
					begin
					open c10;
					loop
					fetch c10 into
						nr_hora_w,
						ie_ramsay_w,
						ie_rass_w,
						ie_prurido_w,
						ie_nausea_w,
						ie_bloqueio_motor_w,
						ie_cateter_peridural_w,
						ie_ricker_w,
						ie_maas_w,
						qt_cook_pontuacao_w;
					EXIT WHEN NOT FOUND; /* apply on c10 */
						begin
						if (nr_seq_inf_w = 81) and (ie_ramsay_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_ramsay_w;
						elsif (nr_seq_inf_w = 83) and (ie_rass_w IS NOT NULL AND ie_rass_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_rass_w;
						elsif (nr_seq_inf_w = 85) and (ie_prurido_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_prurido_w;
						elsif (nr_seq_inf_w = 86) and (ie_nausea_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_nausea_w;
						elsif (nr_seq_inf_w = 87) and (ie_bloqueio_motor_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_bloqueio_motor_w;
						elsif (nr_seq_inf_w = 88) and (ie_cateter_peridural_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_cateter_peridural_w;
						elsif (nr_seq_inf_w = 124) and (ie_ricker_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_ricker_w;
						elsif (nr_seq_inf_w = 125) and (ie_maas_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= ie_maas_w;
						elsif (nr_seq_inf_w = 126) and (qt_cook_pontuacao_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_cook_pontuacao_w;
						elsif (nr_seq_inf_w = 185) and (qt_cook_pontuacao_w > 0) then
							vt_sinal_w[nr_hora_w].vl_sinal	:= obter_desc_pontuacao_cook(qt_cook_pontuacao_w);
						end if;
						if (substr(vt_sinal_w[nr_hora_w].vl_sinal,1,1) = ',') or (substr(vt_sinal_w[nr_hora_w].vl_sinal,1,1) = '.') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= '0'||vt_sinal_w[nr_hora_w].vl_sinal;
						end if;
						end;
					end loop;
					Close C10;
					end;
				elsif (ie_tipo_w = 'OC') then
					begin
					if (coalesce(nr_seq_inf_adic_w::text, '') = '') then

						open C11;
						loop
						fetch C11 into
							nr_hora_w,
							qt_ocorrencia_w;
						EXIT WHEN NOT FOUND; /* apply on C11 */
							begin
							if (qt_ocorrencia_w > 0) then
								begin
								vt_sinal_w[nr_hora_w].vl_sinal				:= qt_ocorrencia_w;
								end;
							end if;
							end;
						end loop;
						close C11;

						open C12;
						loop
						fetch C12 into
							nr_hora_w,
							qt_ocorrencia_w;
						EXIT WHEN NOT FOUND; /* apply on C12 */
							begin
							if (qt_ocorrencia_w > 0) then
								begin
								vt_sinal_w[nr_hora_w].vl_sinal 				:= qt_ocorrencia_w;
								end;
							end if;
							end;
						end loop;
						close C12;
						begin



						qt_total6_w	:= 		coalesce(vt_sinal_w[6].vl_sinal,0) +
											coalesce(vt_sinal_w[7].vl_sinal,0) +
											coalesce(vt_sinal_w[8].vl_sinal,0) +
											coalesce(vt_sinal_w[9].vl_sinal,0) +
											coalesce(vt_sinal_w[10].vl_sinal,0) +
											coalesce(vt_sinal_w[11].vl_sinal,0);
						qt_total12h_w	:=	coalesce(vt_sinal_w[12].vl_sinal,0) +
											coalesce(vt_sinal_w[13].vl_sinal,0) +
											coalesce(vt_sinal_w[14].vl_sinal,0) +
											coalesce(vt_sinal_w[15].vl_sinal,0) +
											coalesce(vt_sinal_w[16].vl_sinal,0) +
											coalesce(vt_sinal_w[17].vl_sinal,0);
						qt_total18h_w	:=	coalesce(vt_sinal_w[18].vl_sinal,0) +
											coalesce(vt_sinal_w[19].vl_sinal,0) +
											coalesce(vt_sinal_w[20].vl_sinal,0) +
											coalesce(vt_sinal_w[21].vl_sinal,0) +
											coalesce(vt_sinal_w[22].vl_sinal,0) +
											coalesce(vt_sinal_w[23].vl_sinal,0);
						qt_total24h_w	:=	coalesce(vt_sinal_w[0].vl_sinal,0) +
											coalesce(vt_sinal_w[1].vl_sinal,0) +
											coalesce(vt_sinal_w[2].vl_sinal,0) +
											coalesce(vt_sinal_w[3].vl_sinal,0) +
											coalesce(vt_sinal_w[4].vl_sinal,0) +
											coalesce(vt_sinal_w[5].vl_sinal,0);

						qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;
						qt_total6_w	:= 0;
						qt_total12h_w	:= 0;
						qt_total18h_w	:= 0;
						qt_total24h_w	:= 0;

						exception
						when others then
							qt_total6_w	:= 0;
							qt_total12h_w	:= 0;
							qt_total18h_w	:= 0;
							qt_total24h_w	:= 0;
							qt_total_geral_w:= 0;
						end;

					else
						open C25;
						loop
						fetch C25 into
							nr_hora_w,
							ds_inf_adic_item_w;
						EXIT WHEN NOT FOUND; /* apply on C25 */
							begin
							adiciona_registro(nr_hora_w,ds_inf_adic_item_w);
							end;
						end loop;
						close C25;


					end if;
					end;
				elsif (ie_tipo_w = 'ES') then
					begin
					open C15;
					loop
					fetch C15 into
						qt_glasgow_w,
						hr_glasgow_w,
						ie_resposta_motora_w,
						ie_resposta_verbal_w,
						ie_abertura_ocular_w,
            ds_qt_glasgow_w;
					EXIT WHEN NOT FOUND; /* apply on C15 */
						begin

						if (ie_escala_w = '1') then
							vt_sinal_w[hr_glasgow_w].vl_sinal := ie_resposta_motora_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_glasgow_w].vl_sinal := ie_abertura_ocular_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_glasgow_w].vl_sinal := qt_glasgow_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_glasgow_w].vl_sinal := ie_resposta_verbal_w;
            	elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_glasgow_w].vl_sinal := ds_qt_glasgow_w;
						end if;

						end;
					end loop;
					close C15;
					end;
				/*Escala Braden*/

				elsif (ie_tipo_w = 'EB') then
					begin
					open C23;
					loop
					fetch C23 into
						qt_ponto_w,
						hr_braden_w,
						ie_percepcao_sensorial_w,
						ie_umidade_w,
						ie_atividade_fisica_w,
						ie_mobilidade_w,
						ie_nutricao_w,
						ie_friccao_cisalhamento_w,
            ds_qt_ponto_w;
					EXIT WHEN NOT FOUND; /* apply on C23 */
						begin
							if (ie_escala_w = '1') then
							  vt_sinal_w[hr_braden_w].vl_sinal := obter_valor_dominio(1399,ie_percepcao_sensorial_w);
              elsif (ie_escala_w = '2') then
                vt_sinal_w[hr_braden_w].vl_sinal := obter_valor_dominio(1400,ie_umidade_w);
              elsif (ie_escala_w = '3') then
                vt_sinal_w[hr_braden_w].vl_sinal := obter_valor_dominio(1401,ie_atividade_fisica_w);
              elsif (ie_escala_w = '4') then
                vt_sinal_w[hr_braden_w].vl_sinal := obter_valor_dominio(1402,ie_mobilidade_w);
              elsif (ie_escala_w = '5') then
                vt_sinal_w[hr_braden_w].vl_sinal := obter_valor_dominio(1403,ie_nutricao_w);
              elsif (ie_escala_w = '6') then
                vt_sinal_w[hr_braden_w].vl_sinal := obter_valor_dominio(1404,ie_friccao_cisalhamento_w);
              elsif (ie_escala_w = '7') then
                vt_sinal_w[hr_braden_w].vl_sinal := qt_ponto_w;
              elsif (ie_escala_w = '8') then
                vt_sinal_w[hr_braden_w].vl_sinal := ds_qt_ponto_w;
              end if;
						end;
					end loop;
					close C23;
					end;
				/*Escala Ramsay*/

				elsif (ie_tipo_w = 'ER') then
					begin
					open C43;
					loop
					fetch C43 into
						hr_Ramsay_w,
						ds_Ramsay_w,
						pt_ramsay_w,
						dt_avaliacao_w;
					EXIT WHEN NOT FOUND; /* apply on C43 */
						begin
						if (ie_escala_w = '1') then
							adiciona_registro(hr_Ramsay_w,ds_Ramsay_w,to_char(dt_avaliacao_w,'hh24:mi:ss'));
							--vt_sinal_w(hr_Ramsay_w).vl_sinal := ds_Ramsay_w;
						elsif (ie_escala_w = '2') then
							adiciona_registro(hr_Ramsay_w,pt_ramsay_w,to_char(dt_avaliacao_w,'hh24:mi:ss'));
							--vt_sinal_w(hr_Ramsay_w).vl_sinal := pt_ramsay_w;
						end if;
						end;
					end loop;
					close C43;
					end;
				/*Escala Flebite Nova*/

				elsif (ie_tipo_w = 'EFN') then
					begin
					open C30;
					loop
					fetch C30 into
						ie_flebite_w,
						hr_flebite_ins_w;
					EXIT WHEN NOT FOUND; /* apply on C30 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_flebite_ins_w].vl_sinal := obter_valor_dominio(3668,ie_flebite_W);
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_flebite_ins_w].vl_sinal := ie_flebite_w;
						end if;
						end;
					end loop;
					close C30;
					end;
				/*Escala MEWS*/

				elsif (ie_tipo_w = 'EM') then
					begin
					open C31;
					loop
					fetch C31 into
						QT_FREQ_CARDIACA_MEWS_w,
						QT_FREQ_RESP_MEWS_w,
						QT_PA_SISTOLICA_MEWS_w,
						QT_TEMP_MEWS_W,
						IE_NIVEL_CONSCIENCIA_MEWS_w,
						QT_PONTUACAO_MEWS_W,
						hr_mews_w,
						DS_PONTUACAO_W;
					EXIT WHEN NOT FOUND; /* apply on C31 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_MEWS_w].vl_sinal := QT_FREQ_CARDIACA_MEWS_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_MEWS_w].vl_sinal := QT_FREQ_RESP_MEWS_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_MEWS_w].vl_sinal := QT_PA_SISTOLICA_MEWS_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_MEWS_w].vl_sinal := QT_TEMP_MEWS_W;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_MEWS_w].vl_sinal := IE_NIVEL_CONSCIENCIA_MEWS_w;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_MEWS_w].vl_sinal := QT_PONTUACAO_MEWS_W;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_MEWS_w].vl_sinal := DS_PONTUACAO_W;
						end if;
						end;
					end loop;
					close C31;
					end;
				/*Escala Braden (crianca)*/

				elsif (ie_tipo_w = 'EBQ') then
					begin
					open C32;
					loop
					fetch C32 into
						IE_MOBILIDADE_BRADEN_Q_W,
						IE_ATIVIDADE_FISICA_BRADEN_Q_W,
						IE_PERCEP_SENSO_BRADEN_Q_W,
						IE_UMIDADE_BRADEN_Q_W,
						IE_FRICCAO_CISA_BRADEN_Q_W,
						IE_NUTRICAO_BRADEN_Q_W,
						IE_PERFUSAO_BRADEN_Q_W,
						QT_PONTO_BRADEN_Q_W,
						hr_braden_q_w;
					EXIT WHEN NOT FOUND; /* apply on C32 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_braden_q_w].vl_sinal := obter_valor_dominio(1402,IE_MOBILIDADE_BRADEN_Q_W);
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_braden_q_w].vl_sinal := obter_valor_dominio(1401,IE_ATIVIDADE_FISICA_BRADEN_Q_W);
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_braden_q_w].vl_sinal := obter_valor_dominio(1399,IE_PERCEP_SENSO_BRADEN_Q_W);
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_braden_q_w].vl_sinal := obter_valor_dominio(1400,IE_UMIDADE_BRADEN_Q_W);
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_braden_q_w].vl_sinal := obter_valor_dominio(3198,IE_FRICCAO_CISA_BRADEN_Q_W);
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_braden_q_w].vl_sinal := obter_valor_dominio(1403,IE_NUTRICAO_BRADEN_Q_W);
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_braden_q_w].vl_sinal := obter_valor_dominio(3174,IE_PERFUSAO_BRADEN_Q_W);
						elsif (ie_escala_w = '8') then
							vt_sinal_w[hr_braden_q_w].vl_sinal := QT_PONTO_BRADEN_Q_W;
						end if;
						end;
					end loop;
					close C32;
					end;
				/*EScala Apache II*/

				elsif (ie_tipo_w = 'AP') then
					begin
					open C33;
					loop
					fetch C33 into
						IE_IRA_AP2_w,
						IE_PO_URGENCIA_AP2_w,
						QT_TEMP_AXILAR_AP2_w,
						QT_BICARBONATO_SERICO_AP2_w,
						QT_PAS_AP2_w,
						QT_PH_ARTERIAL_AP2_w,
						QT_PAD_AP2_w,
						QT_SODIO_SERICO_AP2_w,
						QT_PAL_MEDIA_AP2_w,
						QT_POTASSIO_SERICO_AP2_w,
						QT_FREQ_CARD_AP2_w,
						QT_CREATININA_AP2_w,
						QT_FREQ_RESP_AP2_w,
						QT_HEMATOCRITO_AP2_w,
						QT_OXIGENACAO_FIO2_AP2_w,
						QT_GLOBULOS_BRANCOS_AP2_w,
						QT_OXIGENACAO_PCO2_AP2_w,
						QT_PB_AP2_w,
						QT_OXIGENACAO_PAO2_AP2_w,
						QT_ESCALA_GLASGOW_AP2_w,
						QT_OXIGENACAO_PAAO2_AP2_w,
						IE_TIPO_CATEGORIA_AP2_w,
						NR_SEQ_CAT_DIAG_AP2_w,
						QT_PONT_VAR_FISIO_AP2_w,
						QT_APACHE_II_AP2_w,
						QT_PONT_IDADE_AP2_w,
						QT_RISCO_CALCULADO_AP2_w,
						QT_PT_DOENCA_CRON_ED_AP2_w,
						PR_RISCO_AP2_w,
						QT_PESO_CAT_DIAG_AP2_w,
						hr_apache_II_w;
					EXIT WHEN NOT FOUND; /* apply on C33 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := IE_IRA_AP2_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := IE_PO_URGENCIA_AP2_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_TEMP_AXILAR_AP2_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_BICARBONATO_SERICO_AP2_w;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_PAS_AP2_w;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_PH_ARTERIAL_AP2_w;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_PAD_AP2_w;
						elsif (ie_escala_w = '8') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_SODIO_SERICO_AP2_w;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_PAL_MEDIA_AP2_w;
						elsif (ie_escala_w = '10') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_POTASSIO_SERICO_AP2_w;
						elsif (ie_escala_w = '11') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_FREQ_CARD_AP2_w;
						elsif (ie_escala_w = '12') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_CREATININA_AP2_w;
						elsif (ie_escala_w = '13') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_FREQ_RESP_AP2_w;
						elsif (ie_escala_w = '14') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_HEMATOCRITO_AP2_w;
						elsif (ie_escala_w = '15') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_OXIGENACAO_FIO2_AP2_w;
						elsif (ie_escala_w = '16') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_GLOBULOS_BRANCOS_AP2_w;
						elsif (ie_escala_w = '17') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_OXIGENACAO_PCO2_AP2_w;
						elsif (ie_escala_w = '18') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_PB_AP2_w;
						elsif (ie_escala_w = '19') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_OXIGENACAO_PAO2_AP2_w;
						elsif (ie_escala_w = '20') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_ESCALA_GLASGOW_AP2_w;
						elsif (ie_escala_w = '21') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_OXIGENACAO_PAAO2_AP2_w;
						elsif (ie_escala_w = '22') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := IE_TIPO_CATEGORIA_AP2_w;
						elsif (ie_escala_w = '23') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := NR_SEQ_CAT_DIAG_AP2_w;
						elsif (ie_escala_w = '24') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_PONT_VAR_FISIO_AP2_w;
						elsif (ie_escala_w = '25') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_APACHE_II_AP2_w;
						elsif (ie_escala_w = '26') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_PONT_IDADE_AP2_w;
						elsif (ie_escala_w = '27') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_RISCO_CALCULADO_AP2_w;
						elsif (ie_escala_w = '28') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_PT_DOENCA_CRON_ED_AP2_w;
						elsif (ie_escala_w = '29') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := PR_RISCO_AP2_w;
						elsif (ie_escala_w = '30') then
							vt_sinal_w[hr_apache_II_w].vl_sinal := QT_PESO_CAT_DIAG_AP2_w;
						end if;
						end;
					end loop;
					close C33;
					end;
				/*EScala APache IV*/

				elsif (ie_tipo_w = 'AIV') then
					begin
					open C34;
					loop
					fetch C34 into
						QT_TEMP_APIV_w,
						QT_NA_APIV_w,
						QT_PA_SIST_APIV_w,
						QT_GLICOSE_APIV_w,
						QT_PA_DIAST_APIV_w,
						QT_CREATININA_APIV_w,
						QT_FC_APIV_w,
						QT_UREIA_APIV_w,
						QT_FREQ_RESP_APIV_w,
						QT_DIURESE_APIV_w,
						QT_ALTITUDE_APIV_w,
						QT_ALBUMINA_APIV_w,
						QT_FIO2_APIV_w,
						QT_BILIRRUBINA_APIV_w,
						QT_PH_APIV_w,
						QT_GLOB_VERMELHOS_APIV_w,
						QT_PO2_APIV_w,
						QT_GLOB_BRANCOS_APIV_w,
						QT_PCO2_APIV_w,
						IE_GLASGOW_INDIS_APIV_w,
						IE_GLASGOW_OCULAR_APIV_w,
						IE_GLASGOW_VERBAL_APIV_w,
						IE_GLASGOW_MOTORA_APIV_w,
						QT_ESCALA_GLASGOW_APIV_w,
						QT_IDADE_APIV_w,
						IE_RENAL_APIV_w,
						IE_CANCER_METASTATICO_APIV_w,
						IE_AIDS_APIV_w,
						IE_LEUC_MILEOMA_MULT_APIV_w,
						IE_HEPATICA_APIV_w,
						IE_IMUNOSUPRESSAO_APIV_w,
						IE_LINFOMA_APIV_w,
						IE_CIRROSE_APIV_w,
						IE_ORIGEM_PACIENTE_APIV_w,
						QT_DIAS_ANTES_UTI_APIV_w,
						IE_EMERGENCIA_APIV_w,
						IE_READMISSAO_APIV_w,
						IE_VENTILACAO_APIV_w,
						NR_SEQ_DIAG_APIV_w,
						IE_TERAPIA_TROMBO_APIV_w,
						QT_PONTUACAO_APIV_w,
						QT_PONTOS_APS_APIV_w,
						QT_PONTOS_LOGIT_APIV_w,
						QT_DIAG_MAP_COD_APIV_w,
						PR_MORTALIDADE_APIV_w,
						QT_DIAS_UTI_APIV_w,
						hr_Apache_IV_w;
					EXIT WHEN NOT FOUND; /* apply on C34 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_TEMP_APIV_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_NA_APIV_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_PA_SIST_APIV_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_GLICOSE_APIV_w;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_PA_DIAST_APIV_w;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_CREATININA_APIV_w;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_FC_APIV_w;
						elsif (ie_escala_w = '8') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_UREIA_APIV_w;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_FREQ_RESP_APIV_w;
						elsif (ie_escala_w = '10') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_DIURESE_APIV_w;
						elsif (ie_escala_w = '11') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_ALTITUDE_APIV_w;
						elsif (ie_escala_w = '12') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_ALBUMINA_APIV_w;
						elsif (ie_escala_w = '13') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_FIO2_APIV_w;
						elsif (ie_escala_w = '14') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_BILIRRUBINA_APIV_w;
						elsif (ie_escala_w = '15') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_PH_APIV_w;
						elsif (ie_escala_w = '16') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_GLOB_VERMELHOS_APIV_w;
						elsif (ie_escala_w = '17') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_PO2_APIV_w;
						elsif (ie_escala_w = '18') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_GLOB_BRANCOS_APIV_w;
						elsif (ie_escala_w = '19') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_PCO2_APIV_w;
						elsif (ie_escala_w = '20') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_GLASGOW_INDIS_APIV_w;
						elsif (ie_escala_w = '21') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_GLASGOW_OCULAR_APIV_w;
						elsif (ie_escala_w = '22') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_GLASGOW_VERBAL_APIV_w;
						elsif (ie_escala_w = '23') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_GLASGOW_MOTORA_APIV_w;
						elsif (ie_escala_w = '24') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_ESCALA_GLASGOW_APIV_w;
						elsif (ie_escala_w = '25') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_IDADE_APIV_w;
						elsif (ie_escala_w = '26') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_RENAL_APIV_w;
						elsif (ie_escala_w = '27') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_CANCER_METASTATICO_APIV_w;
						elsif (ie_escala_w = '28') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_AIDS_APIV_w;
						elsif (ie_escala_w = '29') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_LEUC_MILEOMA_MULT_APIV_w;
						elsif (ie_escala_w = '30') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_HEPATICA_APIV_w;
						elsif (ie_escala_w = '31') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_IMUNOSUPRESSAO_APIV_w;
						elsif (ie_escala_w = '32') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_LINFOMA_APIV_w;
						elsif (ie_escala_w = '33') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_CIRROSE_APIV_w;
						elsif (ie_escala_w = '34') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_ORIGEM_PACIENTE_APIV_w;
						elsif (ie_escala_w = '35') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_DIAS_ANTES_UTI_APIV_w;
						elsif (ie_escala_w = '36') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_EMERGENCIA_APIV_w;
						elsif (ie_escala_w = '37') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_READMISSAO_APIV_w;
						elsif (ie_escala_w = '38') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_VENTILACAO_APIV_w;
						elsif (ie_escala_w = '39') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := NR_SEQ_DIAG_APIV_w;
						elsif (ie_escala_w = '40') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := IE_TERAPIA_TROMBO_APIV_w;
						elsif (ie_escala_w = '41') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_PONTUACAO_APIV_w;
						elsif (ie_escala_w = '42') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_PONTOS_APS_APIV_w;
						elsif (ie_escala_w = '43') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_PONTOS_LOGIT_APIV_w;
						elsif (ie_escala_w = '44') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_DIAG_MAP_COD_APIV_w;
						elsif (ie_escala_w = '45') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := PR_MORTALIDADE_APIV_w;
						elsif (ie_escala_w = '46') then
							vt_sinal_w[hr_apache_IV_w].vl_sinal := QT_DIAS_UTI_APIV_w;
						end if;
						end;
					end loop;
					close C34;
					end;
				/*Escala Grace*/

				elsif (ie_tipo_w = 'GR') then
					begin
					open C35;
					loop
					fetch C35 into
						QT_IDADE_g_w,
						QT_FREQ_CARDIACA_g_w,
						QT_PA_SISTOLICA_g_w,
						QT_CREATININA_g_w,
						IE_KILLIP_g_w,
						IE_PARADA_CARDIACA_ADM_g_w,
						IE_MARCADOR_CARDIACO_ELE_g_w,
						IE_DESVIO_SEG_ST_g_w,
						QT_PONTUACAO_g_w,
						DS_RESULTADO_g_w,
						hr_grace_w;
					EXIT WHEN NOT FOUND; /* apply on C35 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_grace_w].vl_sinal := QT_IDADE_g_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_grace_w].vl_sinal := QT_FREQ_CARDIACA_g_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_grace_w].vl_sinal := QT_PA_SISTOLICA_g_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_grace_w].vl_sinal := QT_CREATININA_g_w;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_grace_w].vl_sinal := obter_valor_dominio(3067,IE_KILLIP_g_w);
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_grace_w].vl_sinal := IE_PARADA_CARDIACA_ADM_g_w;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_grace_w].vl_sinal := IE_MARCADOR_CARDIACO_ELE_g_w;
						elsif (ie_escala_w = '8') then
							vt_sinal_w[hr_grace_w].vl_sinal := IE_DESVIO_SEG_ST_g_w;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[hr_grace_w].vl_sinal := QT_PONTUACAO_g_w;
						elsif (ie_escala_w = '10') then
							vt_sinal_w[hr_grace_w].vl_sinal := DS_RESULTADO_g_w;
						end if;
						end;
					end loop;
					close C35;
					end;
				/*Escala SAPS II*/

				elsif (ie_tipo_w = 'SP') then
					begin
					open C36;
					loop
					fetch C36 into
						IE_TIPO_ADMISSAO_SPII_w,
						QT_BICARBONATO_SPII_w,
						QT_BILIRRUBINA_SPII_w,
						IE_CANCRO_METASTATICO_SPII_w,
						IE_CATEGORIA_CLINICA_SPII_w,
						QT_DIAS_ANTES_UTI_SPII_w,
						QT_DIURESE_SPII_w,
						QT_GLASGOW_SPII_w,
						QT_FREQ_CARDIACA_SPII_w,
						QT_GLOBULOS_BRANCOS_SPII_w,
						IE_AIDS_SPII_w,
						QT_IDADE_SPII_w,
						IE_INTOXICACAO_SPII_w,
						IE_MALIG_HEMATOLOGICA_SPII_w,
						PR_MORTALIDADE_SPII_w,
						PR_MORT_EXPAND_SPII_w,
						IE_ORIGEM_PACIENTE_SPII_w,
						QT_PA_SISTOLICA_SPII_w,
						QT_REL_PAO2_FIO2_SPII_w,
						QT_POTASSIO_SPII_w,
						QT_SAPS_EXPAND_SPII_w,
						QT_SAPS_SPII_w,
						DS_SEXO_SPII_w,
						QT_SODIO_SPII_w,
						QT_TEMP_SPII_w,
						QT_UREIA_SPII_w,
						hr_saps_II_w;
					EXIT WHEN NOT FOUND; /* apply on C36 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := IE_TIPO_ADMISSAO_SPII_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_BICARBONATO_SPII_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_BILIRRUBINA_SPII_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := IE_CANCRO_METASTATICO_SPII_w;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := IE_CATEGORIA_CLINICA_SPII_w;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_DIAS_ANTES_UTI_SPII_w;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_DIURESE_SPII_w;
						elsif (ie_escala_w = '8') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_GLASGOW_SPII_w;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_FREQ_CARDIACA_SPII_w;
						elsif (ie_escala_w = '10') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_GLOBULOS_BRANCOS_SPII_w;
						elsif (ie_escala_w = '11') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := IE_AIDS_SPII_w;
						elsif (ie_escala_w = '12') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_IDADE_SPII_w;
						elsif (ie_escala_w = '13') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := IE_INTOXICACAO_SPII_w;
						elsif (ie_escala_w = '14') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := IE_MALIG_HEMATOLOGICA_SPII_w;
						elsif (ie_escala_w = '15') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := PR_MORTALIDADE_SPII_w;
						elsif (ie_escala_w = '16') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := PR_MORT_EXPAND_SPII_w;
						elsif (ie_escala_w = '17') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := IE_ORIGEM_PACIENTE_SPII_w;
						elsif (ie_escala_w = '18') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_PA_SISTOLICA_SPII_w;
						elsif (ie_escala_w = '19') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_REL_PAO2_FIO2_SPII_w;
						elsif (ie_escala_w = '20') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_POTASSIO_SPII_w;
						elsif (ie_escala_w = '21') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_SAPS_EXPAND_SPII_w;
						elsif (ie_escala_w = '22') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_SAPS_SPII_w;
						elsif (ie_escala_w = '23') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := DS_SEXO_SPII_w;
						elsif (ie_escala_w = '24') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_SODIO_SPII_w;
						elsif (ie_escala_w = '25') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_TEMP_SPII_w;
						elsif (ie_escala_w = '26') then
							vt_sinal_w[hr_saps_II_w].vl_sinal := QT_UREIA_SPII_w;
						end if;
						end;
					end loop;
					close C36;
					end;
				/*Escala PIM*/

				elsif (ie_tipo_w = 'PIM') then
					begin
					open C37;
					loop
					fetch C37 into
						IE_ADM_ELETIVA_PIM_w,
						QT_PTO_ADM_ELETIVA_PIM_w,
						IE_PROC_RECUPERACAO_PIM_w,
						QT_PTO_PROC_RECUP_PIM_w,
						IE_CIRURGIA_CARDIACA_PIM_w,
						QT_PTO_CIRUR_CARD_PIM_w,
						IE_DIAG_ALTO_RISCO_PIM_w,
						QT_PTO_DIAG_ALTO_RISCO_PIM_w,
						IE_DIAG_BAIXO_RISCO_PIM_w,
						IE_RESPOSTA_PUPILAS_PIM_w,
						QT_PTO_RESP_PUPILAS_PIM_w,
						IE_VENTILACAO_MECANICA_PIM_w,
						QT_PTO_VENT_MEC_PIM_w,
						QT_PA_SITOLICA_PIM_w,
						QT_PTO_PA_SISTOLICA_PIM_w,
						QT_PH_SANGUE_PIM_w,
						QT_PTO_PH_SANGUE_PIM_w,
						QT_REL_PAO2_PIM_w,
						QT_REL_FIO2_PIM_w,
						QT_PTO_PAO2_FIO2_PIM_w,
						QT_TX_MORTALIDADE_PIM_w,
						hr_PIM2_w;
					EXIT WHEN NOT FOUND; /* apply on C37 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := IE_ADM_ELETIVA_PIM_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PTO_ADM_ELETIVA_PIM_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := IE_PROC_RECUPERACAO_PIM_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PTO_PROC_RECUP_PIM_w;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := IE_CIRURGIA_CARDIACA_PIM_w;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PTO_CIRUR_CARD_PIM_w;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := obter_valor_dominio(2112, IE_DIAG_ALTO_RISCO_PIM_w);
						elsif (ie_escala_w = '8') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PTO_DIAG_ALTO_RISCO_PIM_w;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := obter_valor_dominio(2113, IE_DIAG_BAIXO_RISCO_PIM_w);
						elsif (ie_escala_w = '10') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := IE_RESPOSTA_PUPILAS_PIM_w;
						elsif (ie_escala_w = '11') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PTO_RESP_PUPILAS_PIM_w;
						elsif (ie_escala_w = '12') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := IE_VENTILACAO_MECANICA_PIM_w;
						elsif (ie_escala_w = '13') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PTO_VENT_MEC_PIM_w;
						elsif (ie_escala_w = '14') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PA_SITOLICA_PIM_w;
						elsif (ie_escala_w = '15') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PTO_PA_SISTOLICA_PIM_w;
						elsif (ie_escala_w = '16') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PH_SANGUE_PIM_w;
						elsif (ie_escala_w = '17') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PTO_PH_SANGUE_PIM_w;
						elsif (ie_escala_w = '18') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_REL_PAO2_PIM_w;
						elsif (ie_escala_w = '19') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_REL_FIO2_PIM_w;
						elsif (ie_escala_w = '20') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_PTO_PAO2_FIO2_PIM_w;
						elsif (ie_escala_w = '21') then
							vt_sinal_w[hr_PIM2_w].vl_sinal := QT_TX_MORTALIDADE_PIM_w;
						end if;
						end;
					end loop;
					close C37;
					end;
				/*Escala PRISM */

				elsif (ie_tipo_w = 'PR') then
					begin
					open C38;
					loop
					fetch C38 into
						IE_LACTANTE_PRISM_w,
						QT_IDADE_PRISM_w,
						QT_PA_SISTOLICA_PRISM_w,
						QT_PTO_PAS_PRISM_w,
						QT_BILIRRUBINA_TOTAL_PRISM_w,
						QT_PTO_BILIRRUBINA_PRISM_w,
						QT_PA_DIASTOLICA_PRISM_w,
						QT_PTO_PAD_PRISM_w,
						QT_CALCIO_PRISM_w,
						QT_PTO_CALCIO_PRISM_w,
						QT_FREQ_CARDIACA_PRISM_w,
						QT_PTO_FC_PRISM_w,
						QT_POTASSIO_PRISM_w,
						QT_PTO_POTASSIO_PRISM_w,
						QT_FREQ_RESP_PRISM_w,
						QT_PTO_FR_PRISM_w,
						QT_GLICEMIA_PRISM_w,
						QT_PTO_GLICEMIA_PRISM_w,
						IE_APNEIA_PRISM_w,
						QT_BICARBONATO_PRISM_w,
						QT_PTO_BICARBONATO_PRISM_w,
						QT_REL_PAO2_FIO2_PRISM_w,
						QT_PTO_REL_PAO2_FIO2_PRISM_w,
						QT_ESCALA_GLASGOW_PRISM_w,
						QT_PTO_GLASGOW_PRISM_w,
						QT_PACO2_PRISM_w,
						QT_PTO_PACO2_PRISM_w,
						IE_TEMPO_TP_TTP_PRISM_w,
						QT_PTO_TP_TTP_PRISM_w,
						IE_REACOES_PUPILARES_PRISM_w,
						QT_PTO_REAC_PUP_PRISM_w,
						QT_PTO_TOTAL_PRISM_w,
						PR_MORTALIDADE_PRISM_w,
						PR_MORTALIDADE_POS_OP_PRISM_w,
						hr_prism_w;
					EXIT WHEN NOT FOUND; /* apply on C38 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_prism_w].vl_sinal := IE_LACTANTE_PRISM_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_IDADE_PRISM_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PA_SISTOLICA_PRISM_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_PAS_PRISM_w;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_BILIRRUBINA_TOTAL_PRISM_w;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_BILIRRUBINA_PRISM_w;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PA_DIASTOLICA_PRISM_w;
						elsif (ie_escala_w = '8') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_PAD_PRISM_w;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_CALCIO_PRISM_w;
						elsif (ie_escala_w = '10') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_CALCIO_PRISM_w;
						elsif (ie_escala_w = '11') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_FREQ_CARDIACA_PRISM_w;
						elsif (ie_escala_w = '12') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_FC_PRISM_w;
						elsif (ie_escala_w = '13') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_POTASSIO_PRISM_w;
						elsif (ie_escala_w = '14') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_POTASSIO_PRISM_w;
						elsif (ie_escala_w = '15') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_FREQ_RESP_PRISM_w;
						elsif (ie_escala_w = '16') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_FR_PRISM_w;
						elsif (ie_escala_w = '17') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_GLICEMIA_PRISM_w;
						elsif (ie_escala_w = '18') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_GLICEMIA_PRISM_w;
						elsif (ie_escala_w = '19') then
							vt_sinal_w[hr_prism_w].vl_sinal := IE_APNEIA_PRISM_w;
						elsif (ie_escala_w = '20') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_BICARBONATO_PRISM_w;
						elsif (ie_escala_w = '21') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_BICARBONATO_PRISM_w;
						elsif (ie_escala_w = '22') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_REL_PAO2_FIO2_PRISM_w;
						elsif (ie_escala_w = '23') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_REL_PAO2_FIO2_PRISM_w;
						elsif (ie_escala_w = '24') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_ESCALA_GLASGOW_PRISM_w;
						elsif (ie_escala_w = '25') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_GLASGOW_PRISM_w;
						elsif (ie_escala_w = '26') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PACO2_PRISM_w;
						elsif (ie_escala_w = '27') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_PACO2_PRISM_w;
						elsif (ie_escala_w = '28') then
							vt_sinal_w[hr_prism_w].vl_sinal := IE_TEMPO_TP_TTP_PRISM_w;
						elsif (ie_escala_w = '29') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_TP_TTP_PRISM_w;
						elsif (ie_escala_w = '30') then
							vt_sinal_w[hr_prism_w].vl_sinal := IE_REACOES_PUPILARES_PRISM_w;
						elsif (ie_escala_w = '31') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_REAC_PUP_PRISM_w;
						elsif (ie_escala_w = '32') then
							vt_sinal_w[hr_prism_w].vl_sinal := QT_PTO_TOTAL_PRISM_w;
						elsif (ie_escala_w = '33') then
							vt_sinal_w[hr_prism_w].vl_sinal := PR_MORTALIDADE_PRISM_w;
						elsif (ie_escala_w = '34') then
							vt_sinal_w[hr_prism_w].vl_sinal := PR_MORTALIDADE_POS_OP_PRISM_w;
						end if;
						end;
					end loop;
					close C38;
					end;
				/* Escala AKIN*/

				elsif (ie_tipo_w = 'AK') then
					begin
					open C39;
					loop
					fetch C39 into
						IE_NIVEL_SERICO_AKIN_W,
						IE_DEBITO_URINARIO_AKIN_W,
						QT_PONTUACAO_AKIN_W,
						DS_PONTUACAO_AKIN_W,
						hr_akin_w;
					EXIT WHEN NOT FOUND; /* apply on C39 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_akin_w].vl_sinal := obter_valor_dominio(3547, IE_NIVEL_SERICO_AKIN_W);
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_akin_w].vl_sinal := obter_valor_dominio(3548, IE_DEBITO_URINARIO_AKIN_W);
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_akin_w].vl_sinal := QT_PONTUACAO_AKIN_W;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_akin_w].vl_sinal := DS_PONTUACAO_AKIN_W;
						end if;
						end;
					end loop;
					close C39;
					end;
				/*Partograma*/

				elsif (ie_tipo_w = 'PAR') then
					begin
					open C40;
					loop
					fetch C40 into
						ie_interv_contracoes_w,
						qt_bcf_p_w,
						ie_bolsa_w,
						ie_aspecto_liquido_w,
						ie_ocitocina_w,
						hr_partograma_w;
					EXIT WHEN NOT FOUND; /* apply on C40 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_partograma_w].vl_sinal := obter_valor_dominio(2950,ie_interv_contracoes_w);
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_partograma_w].vl_sinal := qt_bcf_p_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_partograma_w].vl_sinal := obter_valor_dominio(2951,ie_bolsa_w);
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_partograma_w].vl_sinal := obter_valor_dominio(2952,ie_aspecto_liquido_w);
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_partograma_w].vl_sinal := ie_ocitocina_w;
						end if;
						end;
					end loop;
					close C40;
					end;
				/*Escala NAS*/

				elsif (ie_tipo_w = 'EN') then
					begin
					open C27;
					loop
					fetch C27 into
						Qt_pontuacao_nas_w,
						hr_nas_w;
					EXIT WHEN NOT FOUND; /* apply on C27 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_nas_w].vl_sinal := Qt_pontuacao_nas_w;
						end if;
						end;
					end loop;
					close C27;
					end;
				elsif (ie_tipo_w = 'EF') then
					begin
					open C28;
					loop
					fetch C28 into
						ie_intensidade_flebite_w,
						hr_flebite_w,
            ds_ie_intensidade_flebite_w;
					EXIT WHEN NOT FOUND; /* apply on C28 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_flebite_w].vl_sinal := ie_intensidade_flebite_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_flebite_w].vl_sinal := ds_ie_intensidade_flebite_w;
						end if;
						end;
					end loop;
					close C28;
					end;
				elsif (ie_tipo_w = 'ET') then
					begin
					open C29;
					loop
					fetch C29 into
						ds_risco_w,
						hr_tev_w;
					EXIT WHEN NOT FOUND; /* apply on C29 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_tev_w].vl_sinal := ds_risco_w;
						end if;
						end;
					end loop;
					close C29;
					end;
				elsif (ie_tipo_w = 'EDI') then
					begin
					open C45;
					loop
					fetch C45 into
						ds_risco_w,
						hr_tev_w;
					EXIT WHEN NOT FOUND; /* apply on C45 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_tev_w].vl_sinal := ds_risco_w;
						end if;
						end;
					end loop;
					close C45;
					end;
				elsif (ie_tipo_w = 'ENT') then
					begin
					open C46;
					loop
					fetch C46 into
						ds_risco_w,
						hr_tev_w;
					EXIT WHEN NOT FOUND; /* apply on C46 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_tev_w].vl_sinal := ds_risco_w;
						end if;
						end;
					end loop;
					close C46;
					end;
				elsif (ie_tipo_w = 'CH') then
					begin


					if (coalesce(nr_seq_inf_adic_w::text, '') = '') then
						begin

						open C05;
						loop
						fetch C05 into
							nr_hora_w,
							qt_volume_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin
							vt_sinal_w[nr_hora_w].vl_sinal		:= APAP_Campo_Masc_virgula_casas(qt_volume_w,2);
							vt_sinal_w[nr_hora_w].vl_registro	:= qt_volume_w;
							vt_perda_ganho_w[nr_hora_w].qt_perda_ganho	:= coalesce(vt_perda_ganho_w[nr_hora_w].qt_perda_ganho,0) + qt_volume_w;
							end;
						end loop;
						close C05;


						select	coalesce(max(IE_EXIBIR_TOPOGRAFIA),'N'),
								coalesce(max(ie_exibir_lado),'N')
						into STRICT	ie_exibir_topografia_w,
								ie_exibir_lado_w
						from	tipo_perda_ganho
						where	nr_sequencia	= nr_seq_tipo_pg_w;

						nr_seq_topografia_w	:= null;

						if (ie_exibir_topografia_w	= 'N') and (ie_exibir_lado_w	= 'N')then

						ie_lado_w := null;

						open C04;
						loop
						fetch C04 into
							nr_hora_w,
							qt_volume_w;
						EXIT WHEN NOT FOUND; /* apply on C04 */
							begin

							vt_sinal_w[nr_hora_w].vl_sinal 			:= APAP_Campo_Masc_virgula_casas(qt_volume_w,2);

							vt_sinal_w[nr_hora_w].vl_registro		:= qt_volume_w;
							vt_perda_ganho_w[nr_hora_w].qt_perda_ganho	:= coalesce(vt_perda_ganho_w[nr_hora_w].qt_perda_ganho,0) + qt_volume_w;
							end;
						end loop;
						close C04;



						begin
						select	count(*)
						into STRICT	qt_registro_w
						from	REGRA_TURNO_GP
						where	cd_estabelecimento	= cd_estabelecimento_w
						and	(ie_turno_apap IS NOT NULL AND ie_turno_apap::text <> '');



							qt_total6_w	:= 		coalesce(vt_sinal_w[6].vl_registro,0) +
												coalesce(vt_sinal_w[7].vl_registro,0) +
												coalesce(vt_sinal_w[8].vl_registro,0) +
												coalesce(vt_sinal_w[9].vl_registro,0) +
												coalesce(vt_sinal_w[10].vl_registro,0) +
												coalesce(vt_sinal_w[11].vl_registro,0);
							qt_total12h_w	:=	coalesce(vt_sinal_w[12].vl_registro,0) +
												coalesce(vt_sinal_w[13].vl_registro,0) +
												coalesce(vt_sinal_w[14].vl_registro,0) +
												coalesce(vt_sinal_w[15].vl_registro,0) +
												coalesce(vt_sinal_w[16].vl_registro,0) +
												coalesce(vt_sinal_w[17].vl_registro,0);
							qt_total18h_w	:=	coalesce(vt_sinal_w[18].vl_registro,0) +
												coalesce(vt_sinal_w[19].vl_registro,0) +
												coalesce(vt_sinal_w[20].vl_registro,0) +
												coalesce(vt_sinal_w[21].vl_registro,0) +
												coalesce(vt_sinal_w[22].vl_registro,0) +
												coalesce(vt_sinal_w[23].vl_registro,0);
							qt_total24h_w	:=	coalesce(vt_sinal_w[0].vl_registro,0) +
												coalesce(vt_sinal_w[1].vl_registro,0) +
												coalesce(vt_sinal_w[2].vl_registro,0) +
												coalesce(vt_sinal_w[3].vl_registro,0) +
												coalesce(vt_sinal_w[4].vl_registro,0) +
												coalesce(vt_sinal_w[5].vl_registro,0);

						qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;
						qt_total6_w	:= 0;
						qt_total12h_w	:= 0;
						qt_total18h_w	:= 0;
						qt_total24h_w	:= 0;
						exception
						when others then
							qt_total6_w	:= 0;
							qt_total12h_w	:= 0;
							qt_total18h_w	:= 0;
							qt_total24h_w	:= 0;
							qt_total_geral_w:= 0;
						end;

						elsif (ie_exibir_topografia_w	<> 'N') or (ie_exibir_lado_w	<> 'N')then
							begin

							if (ie_mostra_disp_w = 'N') then -- nao leva em consideracao os dispositivos. Utiliza os cursores 61 e 04 para montagem dos registros do APAP.
							begin
								open C61;
								loop
								fetch C61 into
									nr_seq_topografia_w,
									ds_lado_w,
									ie_lado_w;
								EXIT WHEN NOT FOUND; /* apply on C61 */
									begin

									select	nextval('w_pep_apap_seq')
									into STRICT	nr_sequencia_w
									;

									ds_informacao_ganho_perda_w	:= ds_informacao_w;

									if (nr_seq_topografia_w IS NOT NULL AND nr_seq_topografia_w::text <> '') and (nr_seq_topografia_w > 0) then
										ds_informacao_ganho_perda_w  := ds_informacao_ganho_perda_w|| ' - '|| Obter_desc_topografia_dor(nr_seq_topografia_w);
										nr_sequencias_atend_pg_w := 'topo=' || nr_seq_topografia_w || ';';
									end if;


									if (ds_lado_w IS NOT NULL AND ds_lado_w::text <> '') then
										ds_informacao_ganho_perda_w := ds_informacao_ganho_perda_w || ' - ' || ds_lado_w;
										if (coalesce(nr_sequencias_atend_pg_w::text, '') = '') then
											nr_sequencias_atend_pg_w := 'lado=' || ie_lado_w || ';';
										else
											nr_sequencias_atend_pg_w := nr_sequencias_atend_pg_w || 'lado=' || ie_lado_w || ';';
										end if;
									end if;

									insert into w_pep_apap(
										nr_sequencia,
										nr_seq_inf,
										nr_seq_inf_sv,
										ds_informacao, --1
										nr_atendimento,
										nr_ordem_grupo,
										nr_ordem_inf,
										dt_atualizacao,
										nm_usuario,
										ds_cor_param,
										ds_cor_total_parcial,
										ds_cor_total_geral,
										qt_tam_informacao,
										qt_tam_hora,
										qt_tam_total,
										qt_tam_unid_med,
										nr_seq_grupo,
										ie_manter_nulo,
										dt_referencia,
										ie_grafico,
										nr_seq_grupo_pg,
										nr_seq_tipo_pg,
										ie_numerico,
										ie_tipo_inf,
										ie_negrito_relat,
										ie_relat,
										ds_sequencias)
									values (	nr_sequencia_w,
										coalesce(nr_seq_inf_w,nr_seq_exame_w),
										CASE WHEN ie_tipo_inf_w='SV' THEN  obter_de_para_inf_apap_sv(nr_seq_inf_w)  ELSE null END ,
										substr(ds_informacao_ganho_perda_w,1,255),--1
										nr_atendimento_p,
										nr_seq_apres_grupo_w,
										nr_seq_apres_w,
										clock_timestamp(),
										nm_usuario_p,
										ds_cor_param_w,
										ds_cor_total_parcial_w,
										ds_cor_total_geral_w,
										qt_tam_informacao_w,
										qt_tam_hora_w,
										qt_tam_total_w,
										qt_tam_unid_med_w,
										nr_seq_grupo_pai_w,
										ie_manter_nulo_w,
										dt_referencia_w,
										ie_grafico_w,
										nr_seq_grupo_pg_ww,
										nr_seq_tipo_pg_w,
										ie_numerico_w,
										ie_tipo_inf_w,
										ie_negrito_w,
										ie_relat_w,
										nr_sequencias_atend_pg_w);
										
									commit;	

									vt_sinal_w.delete;

									ind := 0;
									while(ind < 24) loop
										begin
										vt_sinal_w[ind].vl_sinal	:= null;
										vt_sinal_w[ind].qt_registro	:= 0;
										ind 				:= ind + 1;
										end;
									end loop;

									begin
									open C04;
									loop
									fetch C04 into
										nr_hora_w,
										qt_volume_w;
									EXIT WHEN NOT FOUND; /* apply on C04 */
										begin

										vt_sinal_w[nr_hora_w].vl_sinal 			:= APAP_Campo_Masc_virgula_casas(qt_volume_w,2);

										vt_sinal_w[nr_hora_w].vl_registro		:= qt_volume_w;
										vt_perda_ganho_w[nr_hora_w].qt_perda_ganho	:= coalesce(vt_perda_ganho_w[nr_hora_w].qt_perda_ganho,0) + qt_volume_w;

										end;
									end loop;
									close C04;

									qt_total6_w	:= 		coalesce(vt_sinal_w[6].vl_registro,0) +
														coalesce(vt_sinal_w[7].vl_registro,0) +
														coalesce(vt_sinal_w[8].vl_registro,0) +
														coalesce(vt_sinal_w[9].vl_registro,0) +
														coalesce(vt_sinal_w[10].vl_registro,0) +
														coalesce(vt_sinal_w[11].vl_registro,0);
									qt_total12h_w	:=	coalesce(vt_sinal_w[12].vl_registro,0) +
														coalesce(vt_sinal_w[13].vl_registro,0) +
														coalesce(vt_sinal_w[14].vl_registro,0) +
														coalesce(vt_sinal_w[15].vl_registro,0) +
														coalesce(vt_sinal_w[16].vl_registro,0) +
														coalesce(vt_sinal_w[17].vl_registro,0);
									qt_total18h_w	:=	coalesce(vt_sinal_w[18].vl_registro,0) +
														coalesce(vt_sinal_w[19].vl_registro,0) +
														coalesce(vt_sinal_w[20].vl_registro,0) +
														coalesce(vt_sinal_w[21].vl_registro,0) +
														coalesce(vt_sinal_w[22].vl_registro,0) +
														coalesce(vt_sinal_w[23].vl_registro,0);
									qt_total24h_w	:=	coalesce(vt_sinal_w[0].vl_registro,0) +
														coalesce(vt_sinal_w[1].vl_registro,0) +
														coalesce(vt_sinal_w[2].vl_registro,0) +
														coalesce(vt_sinal_w[3].vl_registro,0) +
														coalesce(vt_sinal_w[4].vl_registro,0) +
														coalesce(vt_sinal_w[5].vl_registro,0);

									qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;
									qt_total6_w	:= 0;
									qt_total12h_w	:= 0;
									qt_total18h_w	:= 0;
									qt_total24h_w	:= 0;
									exception
									when others then
										qt_total6_w	:= 0;
										qt_total12h_w	:= 0;
										qt_total18h_w	:= 0;
										qt_total24h_w	:= 0;
										qt_total_geral_w:= 0;
									end;


									update	w_pep_apap
									set	ds_hora_00	= vt_sinal_w[0].vl_sinal,
										ds_hora_01	= vt_sinal_w[1].vl_sinal,
										ds_hora_02	= vt_sinal_w[2].vl_sinal,
										ds_hora_03	= vt_sinal_w[3].vl_sinal,
										ds_hora_04	= vt_sinal_w[4].vl_sinal,
										ds_hora_05	= vt_sinal_w[5].vl_sinal,
										ds_hora_06	= vt_sinal_w[6].vl_sinal,
										ds_hora_07	= vt_sinal_w[7].vl_sinal,
										ds_hora_08	= vt_sinal_w[8].vl_sinal,
										ds_hora_09	= vt_sinal_w[9].vl_sinal,
										ds_hora_10	= vt_sinal_w[10].vl_sinal,
										ds_hora_11	= vt_sinal_w[11].vl_sinal,
										ds_hora_12	= vt_sinal_w[12].vl_sinal,
										ds_hora_13	= vt_sinal_w[13].vl_sinal,
										ds_hora_14	= vt_sinal_w[14].vl_sinal,
										ds_hora_15	= vt_sinal_w[15].vl_sinal,
										ds_hora_16	= vt_sinal_w[16].vl_sinal,
										ds_hora_17	= vt_sinal_w[17].vl_sinal,
										ds_hora_18	= vt_sinal_w[18].vl_sinal,
										ds_hora_19	= vt_sinal_w[19].vl_sinal,
										ds_hora_20	= vt_sinal_w[20].vl_sinal,
										ds_hora_21	= vt_sinal_w[21].vl_sinal,
										ds_hora_22	= vt_sinal_w[22].vl_sinal,
										ds_hora_23	= vt_sinal_w[23].vl_sinal,
										qt_total_6h	= CASE WHEN qt_total6_w=0 THEN null  ELSE qt_total6_w END ,
										qt_total_12h	= CASE WHEN qt_total12h_w=0 THEN null  ELSE qt_total12h_w END ,
										qt_total_18h	= CASE WHEN qt_total18h_w=0 THEN null  ELSE qt_total18h_w END ,
										qt_total_24h	= CASE WHEN qt_total24h_w=0 THEN null  ELSE qt_total24h_w END ,
										--qt_total_geral	= round(decode(qt_total_geral_w,0,null,qt_total_geral_w),0),
										qt_total_geral	= CASE WHEN ie_total_w='N' THEN  null  ELSE CASE WHEN qt_total_geral_w=0 THEN  null  ELSE qt_total_geral_w END  END ,
										ds_unid_med	= ds_unid_med_w,
										qt_tam_informacao = qt_tam_informacao_w,
										qt_tam_hora	= qt_tam_hora_w,
										qt_tam_total	= qt_tam_total_w,
										qt_tam_unid_med	= qt_tam_unid_med_w,
										--qt_maxima	= decode(ie_tipo_inf,'CH',null,round(qt_max_valor_w,2)),

										--qt_media	= decode(ie_tipo_inf,'CH',null,round(qt_media_valor_w,1)),

										--qt_minima	= decode(ie_tipo_inf,'CH',null,round(qt_min_valor_w,2))
										qt_minima	= CASE WHEN ie_minima_w='N' THEN  null  ELSE round((qt_min_valor_w)::numeric,2) END ,
										qt_maxima	= CASE WHEN ie_maxima_w='N' THEN  null  ELSE round((qt_max_valor_w)::numeric,2) END ,
										qt_media	= CASE WHEN ie_media_w='N' THEN  null  ELSE round((qt_media_valor_w)::numeric,2) END ,
										qt_minima_graf	= round((obter_somente_numero(qt_min_valor_w))::numeric,2),
										qt_maxima_graf	= round((obter_somente_numero(qt_max_valor_w))::numeric,2),
										ds_resultados	= ds_resultados_w
									where	nr_sequencia	= nr_sequencia_w;
									
									commit;

									end;
								end loop;
								close C61;
							end;
							else -- leva em consideracao os dispositivos. Utiliza os cursores 71 e 72 para montagem dos registros do APAP.
							begin
								open C71; -- leva em consideracao os dispositivos
								loop
								fetch C71 into
									nr_seq_topografia_w,
									ds_lado_w,
									ie_lado_w,
									nr_seq_dispositivo_w,
									nr_seq_atend_disp_w;
								EXIT WHEN NOT FOUND; /* apply on C71 */
									begin

									select	nextval('w_pep_apap_seq')
									into STRICT	nr_sequencia_w
									;

									if (nr_seq_dispositivo_w IS NOT NULL AND nr_seq_dispositivo_w::text <> '' AND nr_seq_atend_disp_w IS NOT NULL AND nr_seq_atend_disp_w::text <> '') then
										select 	ds_dispositivo
										into STRICT	ds_dispositivo_w
										from 	dispositivo
										where	nr_sequencia = nr_seq_dispositivo_w;

										nr_seq_comp_adic_w := obter_nr_seq_comp_adic(nr_seq_atend_disp_w);

										if (nr_seq_comp_adic_w IS NOT NULL AND nr_seq_comp_adic_w::text <> '') then
											ds_complemento_disp_w := ' - ' || OBTER_COMPLEM_ADICIONAL(nr_seq_comp_adic_w);
										end if;

										ds_informacao_ganho_perda_w := ds_espaco_w || ds_dispositivo_w || ds_complemento_disp_w;

									else
										ds_informacao_ganho_perda_w	:= ds_informacao_w;
									end if;

									if (nr_seq_topografia_w IS NOT NULL AND nr_seq_topografia_w::text <> '') and (nr_seq_topografia_w > 0) then
										ds_informacao_ganho_perda_w  := ds_informacao_ganho_perda_w|| ' - '|| Obter_desc_topografia_dor(nr_seq_topografia_w);
										nr_sequencias_atend_pg_w := 'topo=' || nr_seq_topografia_w || ';';
									end if;


									if (ds_lado_w IS NOT NULL AND ds_lado_w::text <> '') then
										ds_informacao_ganho_perda_w := ds_informacao_ganho_perda_w || ' - ' || ds_lado_w;
										if (coalesce(nr_sequencias_atend_pg_w::text, '') = '') then
											nr_sequencias_atend_pg_w := 'lado=' || ie_lado_w || ';';
										else
											nr_sequencias_atend_pg_w := nr_sequencias_atend_pg_w || 'lado=' || ie_lado_w || ';';
										end if;
									end if;

									if (nr_seq_atend_disp_w IS NOT NULL AND nr_seq_atend_disp_w::text <> '') then
										if (coalesce(nr_sequencias_atend_pg_w::text, '') = '') then
											nr_sequencias_atend_pg_w := 'nr_seq_atend_disp=' || nr_seq_atend_disp_w || ';';
										else
											nr_sequencias_atend_pg_w := nr_sequencias_atend_pg_w || 'nr_seq_atend_disp=' || nr_seq_atend_disp_w || ';';
										end if;
									end if;

									insert into w_pep_apap(
										nr_sequencia,
										nr_seq_inf,
										nr_seq_inf_sv,
										ds_informacao, --1
										nr_atendimento,
										nr_ordem_grupo,
										nr_ordem_inf,
										dt_atualizacao,
										nm_usuario,
										ds_cor_param,
										ds_cor_total_parcial,
										ds_cor_total_geral,
										qt_tam_informacao,
										qt_tam_hora,
										qt_tam_total,
										qt_tam_unid_med,
										nr_seq_grupo,
										ie_manter_nulo,
										dt_referencia,
										ie_grafico,
										nr_seq_grupo_pg,
										nr_seq_tipo_pg,
										ie_numerico,
										ie_tipo_inf,
										ie_negrito_relat,
										ie_relat,
										ds_sequencias,
                    ie_tipo_pg)
									values (	nr_sequencia_w,
										coalesce(nr_seq_inf_w,nr_seq_exame_w),
										CASE WHEN ie_tipo_inf_w='SV' THEN  obter_de_para_inf_apap_sv(nr_seq_inf_w)  ELSE null END ,
										substr(ds_informacao_ganho_perda_w,1,255),--1
										nr_atendimento_p,
										nr_seq_apres_grupo_w,
										nr_seq_apres_w,
										clock_timestamp(),
										nm_usuario_p,
										ds_cor_param_w,
										ds_cor_total_parcial_w,
										ds_cor_total_geral_w,
										qt_tam_informacao_w,
										qt_tam_hora_w,
										qt_tam_total_w,
										qt_tam_unid_med_w,
										nr_seq_grupo_pai_w,
										ie_manter_nulo_w,
										dt_referencia_w,
										ie_grafico_w,
										nr_seq_grupo_pg_ww,
										nr_seq_tipo_pg_w,
										ie_numerico_w,
										ie_tipo_inf_w,
										ie_negrito_w,
										ie_relat_w,
										nr_sequencias_atend_pg_w,
                    ie_ganho_perda_w);
									commit;	

									vt_sinal_w.delete;

									ind := 0;
									while(ind < 24) loop
										begin
										vt_sinal_w[ind].vl_sinal	:= null;
										vt_sinal_w[ind].qt_registro	:= 0;
										ind 				:= ind + 1;
										end;
									end loop;

									begin
									open C72;
									loop
									fetch C72 into
										nr_hora_w,
										qt_volume_w;
									EXIT WHEN NOT FOUND; /* apply on C72 */
										begin

										vt_sinal_w[nr_hora_w].vl_sinal 			:= APAP_Campo_Masc_virgula_casas(qt_volume_w,2);

										vt_sinal_w[nr_hora_w].vl_registro		:= qt_volume_w;
										vt_perda_ganho_w[nr_hora_w].qt_perda_ganho	:= coalesce(vt_perda_ganho_w[nr_hora_w].qt_perda_ganho,0) + qt_volume_w;
										end;
									end loop;
									close C72;


									qt_total6_w	:= 		coalesce(vt_sinal_w[6].vl_registro,0) +
														coalesce(vt_sinal_w[7].vl_registro,0) +
														coalesce(vt_sinal_w[8].vl_registro,0) +
														coalesce(vt_sinal_w[9].vl_registro,0) +
														coalesce(vt_sinal_w[10].vl_registro,0) +
														coalesce(vt_sinal_w[11].vl_registro,0);
									qt_total12h_w	:=	coalesce(vt_sinal_w[12].vl_registro,0) +
														coalesce(vt_sinal_w[13].vl_registro,0) +
														coalesce(vt_sinal_w[14].vl_registro,0) +
														coalesce(vt_sinal_w[15].vl_registro,0) +
														coalesce(vt_sinal_w[16].vl_registro,0) +
														coalesce(vt_sinal_w[17].vl_registro,0);
									qt_total18h_w	:=	coalesce(vt_sinal_w[18].vl_registro,0) +
														coalesce(vt_sinal_w[19].vl_registro,0) +
														coalesce(vt_sinal_w[20].vl_registro,0) +
														coalesce(vt_sinal_w[21].vl_registro,0) +
														coalesce(vt_sinal_w[22].vl_registro,0) +
														coalesce(vt_sinal_w[23].vl_registro,0);
									qt_total24h_w	:=	coalesce(vt_sinal_w[0].vl_registro,0) +
														coalesce(vt_sinal_w[1].vl_registro,0) +
														coalesce(vt_sinal_w[2].vl_registro,0) +
														coalesce(vt_sinal_w[3].vl_registro,0) +
														coalesce(vt_sinal_w[4].vl_registro,0) +
														coalesce(vt_sinal_w[5].vl_registro,0);

									qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;
									qt_total6_w	:= 0;
									qt_total12h_w	:= 0;
									qt_total18h_w	:= 0;
									qt_total24h_w	:= 0;
									exception
									when others then
										qt_total6_w	:= 0;
										qt_total12h_w	:= 0;
										qt_total18h_w	:= 0;
										qt_total24h_w	:= 0;
										qt_total_geral_w:= 0;
									end;


									update	w_pep_apap
									set	ds_hora_00	= vt_sinal_w[0].vl_sinal,
										ds_hora_01	= vt_sinal_w[1].vl_sinal,
										ds_hora_02	= vt_sinal_w[2].vl_sinal,
										ds_hora_03	= vt_sinal_w[3].vl_sinal,
										ds_hora_04	= vt_sinal_w[4].vl_sinal,
										ds_hora_05	= vt_sinal_w[5].vl_sinal,
										ds_hora_06	= vt_sinal_w[6].vl_sinal,
										ds_hora_07	= vt_sinal_w[7].vl_sinal,
										ds_hora_08	= vt_sinal_w[8].vl_sinal,
										ds_hora_09	= vt_sinal_w[9].vl_sinal,
										ds_hora_10	= vt_sinal_w[10].vl_sinal,
										ds_hora_11	= vt_sinal_w[11].vl_sinal,
										ds_hora_12	= vt_sinal_w[12].vl_sinal,
										ds_hora_13	= vt_sinal_w[13].vl_sinal,
										ds_hora_14	= vt_sinal_w[14].vl_sinal,
										ds_hora_15	= vt_sinal_w[15].vl_sinal,
										ds_hora_16	= vt_sinal_w[16].vl_sinal,
										ds_hora_17	= vt_sinal_w[17].vl_sinal,
										ds_hora_18	= vt_sinal_w[18].vl_sinal,
										ds_hora_19	= vt_sinal_w[19].vl_sinal,
										ds_hora_20	= vt_sinal_w[20].vl_sinal,
										ds_hora_21	= vt_sinal_w[21].vl_sinal,
										ds_hora_22	= vt_sinal_w[22].vl_sinal,
										ds_hora_23	= vt_sinal_w[23].vl_sinal,
										qt_total_6h	= CASE WHEN qt_total6_w=0 THEN null  ELSE qt_total6_w END ,
										qt_total_12h	= CASE WHEN qt_total12h_w=0 THEN null  ELSE qt_total12h_w END ,
										qt_total_18h	= CASE WHEN qt_total18h_w=0 THEN null  ELSE qt_total18h_w END ,
										qt_total_24h	= CASE WHEN qt_total24h_w=0 THEN null  ELSE qt_total24h_w END ,
										--qt_total_geral	= round(decode(qt_total_geral_w,0,null,qt_total_geral_w),0),
										qt_total_geral	= CASE WHEN ie_total_w='N' THEN  null  ELSE CASE WHEN qt_total_geral_w=0 THEN  null  ELSE qt_total_geral_w END  END ,
										ds_unid_med	= ds_unid_med_w,
										qt_tam_informacao = qt_tam_informacao_w,
										qt_tam_hora	= qt_tam_hora_w,
										qt_tam_total	= qt_tam_total_w,
										qt_tam_unid_med	= qt_tam_unid_med_w,
										--qt_maxima	= decode(ie_tipo_inf,'CH',null,round(qt_max_valor_w,2)),

										--qt_media	= decode(ie_tipo_inf,'CH',null,round(qt_media_valor_w,1)),

										--qt_minima	= decode(ie_tipo_inf,'CH',null,round(qt_min_valor_w,2))
										qt_minima	= CASE WHEN ie_minima_w='N' THEN  null  ELSE round((qt_min_valor_w)::numeric,2) END ,
										qt_maxima	= CASE WHEN ie_maxima_w='N' THEN  null  ELSE round((qt_max_valor_w)::numeric,2) END ,
										qt_media	= CASE WHEN ie_media_w='N' THEN  null  ELSE round((qt_media_valor_w)::numeric,2) END ,
										qt_minima_graf	= round((obter_somente_numero(qt_min_valor_w))::numeric,2),
										qt_maxima_graf	= round((obter_somente_numero(qt_max_valor_w))::numeric,2),
										ds_resultados	= ds_resultados_w
									where	nr_sequencia	= nr_sequencia_w;
									
									commit;

									end;
								end loop;
								close C71;
							end;
							end if;


							vt_sinal_w.delete;

							ind := 0;
							while(ind < 24) loop
								begin
								vt_sinal_w[ind].vl_sinal	:= null;
								vt_sinal_w[ind].qt_registro	:= 0;
								ind 				:= ind + 1;
								end;
							end loop;


							nr_sequencia_w	:= null;

							end;

						end if;
					end;
					elsif (nr_seq_inf_adic_w IS NOT NULL AND nr_seq_inf_adic_w::text <> '') then
						begin

						open C24;
						loop
						fetch C24 into
							nr_hora_w,
							ds_inf_adic_item_w;
						EXIT WHEN NOT FOUND; /* apply on C24 */
							begin
							adiciona_registro(nr_hora_w,ds_inf_adic_item_w);
							end;
						end loop;
						close C24;

						end;
					end if;
					end;
				elsif (ie_tipo_w = 'EL') then
					open c13;
					loop
					fetch c13 into
						nr_seq_exame_ww,
						hr_exame_w,
						ds_formato_w,
						qt_resultado_w,
						ds_resultado_w,
						pr_resultado_w;
					EXIT WHEN NOT FOUND; /* apply on c13 */
						begin
						if (nr_seq_exame_w = nr_seq_exame_ww) then
							begin
								if (obter_campo_result(ds_formato_w) = 'V') then
									vt_sinal_w[hr_exame_w].vl_sinal	:= qt_resultado_w;
								elsif (obter_campo_result(ds_formato_w) = 'D') then
									vt_sinal_w[hr_exame_w].vl_sinal	:= ds_resultado_w;
								elsif (obter_campo_result(ds_formato_w) = 'PR') then
									vt_sinal_w[hr_exame_w].vl_sinal	:= pr_resultado_w;
								end if;
							end;
						end if;
						end;
					end loop;
					close c13;

				elsif (ie_tipo_w = 'PC') then
					begin

					open C26;
					loop
					fetch C26 into
						nr_hora_w,
						dt_alteracao_w,
						nr_disparo_pca_w,
						NR_DISPARO_EFETIVO_w,
						qt_vol_infundido_w;
					EXIT WHEN NOT FOUND; /* apply on C26 */
						begin

						if (nr_seq_inf_w = 201) and (NR_DISPARO_EFETIVO_w IS NOT NULL AND NR_DISPARO_EFETIVO_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= NR_DISPARO_EFETIVO_w;
						elsif (nr_seq_inf_w = 202) and (nr_disparo_pca_w IS NOT NULL AND nr_disparo_pca_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= nr_disparo_pca_w;
						elsif (nr_seq_inf_w = 203) and (qt_vol_infundido_w IS NOT NULL AND qt_vol_infundido_w::text <> '') then
							vt_sinal_w[nr_hora_w].vl_sinal	:= qt_vol_infundido_w;
						end if;
						end;
					end loop;
					close C26;

					end;
				elsif (ie_tipo_w = 'BH') then
					begin


					ds_unid_med_w	:= obter_unid_med_usua('ml');
					if (ie_balanco_hidrico_w = 'H') then
						begin
						open C07;
						loop
						fetch C07 into
							nr_hora_w,
							dt_medida_w,
							qt_volume_perda_w,
							qt_volume_ganho_w;
						EXIT WHEN NOT FOUND; /* apply on C07 */
							begin
							--vt_sinal_w(nr_hora_w).vl_sinal :=  trim(replace(to_char(round(qt_volume_ganho_w - qt_volume_perda_w),'999,999,999'),',','.'));
							vt_sinal_w[nr_hora_w].vl_sinal	:= (qt_volume_ganho_w - qt_volume_perda_w);
							end;
						end loop;
						close C07;


					exception
						when others then
						null;

					end;


					elsif (ie_balanco_hidrico_w = 'D') then
						begin
						qt_acumulado_dia_w	:= 0;
						open C07;
						loop
						fetch C07 into
							nr_hora_w,
							dt_medida_w,
							qt_volume_perda_w,
							qt_volume_ganho_w;
						EXIT WHEN NOT FOUND; /* apply on C07 */
							begin
							--vt_sinal_w(nr_hora_w).vl_sinal 	:= trim(replace(to_char(round(qt_acumulado_dia_w + qt_volume_ganho_w - qt_volume_perda_w),'999,999,999'),',','.'));
							vt_sinal_w[nr_hora_w].vl_sinal 	:= (qt_acumulado_dia_w + qt_volume_ganho_w - qt_volume_perda_w);
							qt_acumulado_dia_w		:= qt_acumulado_dia_w + qt_volume_ganho_w - qt_volume_perda_w;
							end;
						end loop;
						close C07;
						end;
					elsif (ie_balanco_hidrico_w = 'I') then
						begin
						select	coalesce(sum(CASE WHEN c.ie_perda_ganho='G' THEN a.qt_volume  ELSE 0 END ) - sum(CASE WHEN c.ie_perda_ganho='P' THEN a.qt_volume  ELSE 0 END ),0) qt_saldo
						into STRICT	qt_acumulado_dia_w
						from	grupo_perda_ganho c,
							tipo_perda_ganho b,
							atendimento_perda_ganho a
						where	a.nr_seq_tipo	= b.nr_sequencia
						and	b.nr_seq_grupo	= c.nr_sequencia
						and	a.nr_atendimento= nr_atendimento_p
						and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(a.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
						and	coalesce(b.ie_soma_bh,'S')	= 'S'
						and	coalesce(a.dt_apap,a.dt_medida) < dt_inicio_ref_w
						and	coalesce(a.ie_situacao,'A')	= 'A'
						and	((ie_rn_w	= 'A') or (a.ie_recem_nato	= ie_rn_w))
						and	((ie_liberar_ganho_perda_w = 'N') or (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> ''));
						--vt_sinal_w(qt_hora_w + 1).vl_sinal	:= trim(replace(to_char(round(qt_acumulado_dia_w),'999,999,999'),',','.'));
						vt_sinal_w[qt_hora_w + 1].vl_sinal	:= (qt_acumulado_dia_w);

						open C07;
						loop
						fetch C07 into
							nr_hora_w,
							dt_medida_w,
							qt_volume_perda_w,
							qt_volume_ganho_w;
						EXIT WHEN NOT FOUND; /* apply on C07 */
							begin
							--vt_sinal_w(nr_hora_w).vl_sinal 	:= trim(replace(to_char(round(qt_acumulado_dia_w + qt_volume_ganho_w - qt_volume_perda_w),'999,999,999'),',','.'));
							vt_sinal_w[nr_hora_w].vl_sinal	:= (qt_acumulado_dia_w + qt_volume_ganho_w - qt_volume_perda_w);
							qt_acumulado_dia_w		:= qt_acumulado_dia_w + qt_volume_ganho_w - qt_volume_perda_w;
							end;
						end loop;
						close C07;
						end;
					elsif (ie_balanco_hidrico_w = 'S') then

						select	max(DT_ENTRADA_UNIDADE)
						into STRICT	dt_entrada_setor_w
						from	resumo_atendimento_paciente_v
						where	nr_atendimento	= nr_atendimento_p;


						select	coalesce(sum(CASE WHEN c.ie_perda_ganho='G' THEN a.qt_volume  ELSE 0 END ) - sum(CASE WHEN c.ie_perda_ganho='P' THEN a.qt_volume  ELSE 0 END ),0) qt_saldo
						into STRICT	qt_acumulado_dia_w
						from	grupo_perda_ganho c,
							tipo_perda_ganho b,
							atendimento_perda_ganho a
						where	a.nr_seq_tipo	= b.nr_sequencia
						and	b.nr_seq_grupo	= c.nr_sequencia
						and	a.nr_atendimento= nr_atendimento_p
						and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(a.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
						and	coalesce(b.ie_soma_bh,'S')	= 'S'
						and	coalesce(a.dt_apap,a.dt_medida) < dt_inicio_ref_w
						and	coalesce(a.ie_situacao,'A')	= 'A'
						and	((ie_rn_w	= 'A') or (a.ie_recem_nato	= ie_rn_w))
						and	coalesce(a.dt_referencia,coalesce(a.dt_apap,a.dt_medida)) between  dt_entrada_setor_w and clock_timestamp()
						and	((ie_liberar_ganho_perda_w = 'N') or (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> ''));

						vt_sinal_w[qt_hora_w + 1].vl_sinal	:= (qt_acumulado_dia_w);

						open C07;
						loop
						fetch C07 into
							nr_hora_w,
							dt_medida_w,
							qt_volume_perda_w,
							qt_volume_ganho_w;
						EXIT WHEN NOT FOUND; /* apply on C07 */
							begin
							--vt_sinal_w(nr_hora_w).vl_sinal 	:= trim(replace(to_char(round(qt_acumulado_dia_w + qt_volume_ganho_w - qt_volume_perda_w),'999,999,999'),',','.'));
							vt_sinal_w[nr_hora_w].vl_sinal	:= (qt_acumulado_dia_w + qt_volume_ganho_w - qt_volume_perda_w);
							qt_acumulado_dia_w		:= qt_acumulado_dia_w + qt_volume_ganho_w - qt_volume_perda_w;
							end;
						end loop;
						close C07;
					end if;
					totalizar_apap;
					for i in 0..vt_sinal_w.count - 1 loop
						begin
						vt_sinal_w[i].vl_sinal	:= APAP_Campo_Masc_virgula_casas(vt_sinal_w[i].vl_sinal,2);
						end;
					end loop;
					end;
				elsif (ie_tipo_w = 'DE') then
					begin
					nr_hora_ant_w	:= null;
					ds_dosagem_ant_w:= '';
					ie_cursor_w	:= 'N';

					open C66;
					loop
					fetch C66 into
						nr_prescricao_www;
					EXIT WHEN NOT FOUND; /* apply on C66 */
						begin
						open C06;
						loop
						fetch C06 into
							nr_hora_w,
							dt_alteracao_w,
							dt_alteracao_www,
							qt_dosagem_w,
							ie_tipo_dosagem_w,
							ie_alteracao_w,
							nr_prescricao_w,
							nr_seq_solucao_w;
						EXIT WHEN NOT FOUND; /* apply on C06 */
							begin
							if (ie_alteracao_w in (2,4)) then
								select	max(somente_numero(to_char(a.dt_alteracao,'hh24'))),
									max(trunc(a.dt_alteracao,'hh24')),
									max(a.qt_dosagem),
									max(b.ie_tipo_dosagem),
									max(a.ie_alteracao),
									max(b.nr_prescricao),
									max(b.nr_seq_solucao)
								into STRICT	nr_hora_ww,
									dt_alteracao_ww,
									qt_dosagem_ww,
									ie_tipo_dosagem_ww,
									ie_alteracao_ww,
									nr_prescricao_ww,
									nr_seq_solucao_ww
								from	prescr_medica d,
									prescr_solucao b,
									prescr_solucao_evento a
								where	a.ie_evento_valido	= 'S'
								and	a.nr_prescricao		= b.nr_prescricao
								and	a.nr_seq_solucao	= b.nr_seq_solucao
								and	b.nr_prescricao		= d.nr_prescricao
								and	d.nr_prescricao = nr_prescricao_www
								and	((coalesce(cd_setor_atendimento_p::text, '') = '') or (coalesce(d.cd_setor_atendimento,cd_setor_atendimento_p) = cd_setor_atendimento_p))
								and	(a.nr_seq_solucao IS NOT NULL AND a.nr_seq_solucao::text <> '')
								and	a.nr_atendimento	= nr_atendimento_p
								and	a.ie_alteracao in (1,3,5)
								and	((ie_controla_adep_w = 'N') or (coalesce(b.ie_apap,'SV') = 'SV'))
								and (a.dt_alteracao <= dt_alteracao_www)
								and	obter_se_solucao_apap(a.nr_prescricao,a.nr_seq_solucao,nr_ficha_tecnica_w) = 'S'
								and	((ie_rn_w	= 'A') or (d.ie_recem_nato	= ie_rn_w))
								and	coalesce(d.dt_suspensao::text, '') = ''
								and	(d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> '')
								order by a.dt_alteracao, a.nr_prescricao;

								ie_cursor_w	:= 'S';

								if (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/kg/min'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/kg/hora'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/kg/hora'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/kg/min'))) then
									begin
									qt_dose_terap_w := 0;

									select	coalesce(max(qt_peso),0)
									into STRICT	qt_peso_prescr_w
									from	prescr_medica
									where	nr_prescricao	= nr_prescricao_ww;

									select	max(a.cd_material),
										max(a.qt_dose),
										max(a.cd_unidade_medida_dose)
									into STRICT	cd_material_w,
										qt_dose_w,
										cd_unidade_medida_dose_w
									from	material b,
										prescr_material a
									where	a.nr_prescricao		= nr_prescricao_ww
									and	a.nr_sequencia_solucao	= nr_seq_solucao_ww
									and	a.cd_material		= b.cd_material
									and	coalesce(b.ie_ancora_solucao,'N')	= 'S';

									select	coalesce(sum(a.qt_solucao),0)
									into STRICT	qt_solucao_w
									from	material b,
										prescr_material a
									where	a.nr_prescricao		= nr_prescricao_ww
									and	a.nr_sequencia_solucao	= nr_seq_solucao_ww
									and	a.cd_material		= b.cd_material
									and	coalesce(b.ie_ancora_solucao,'N') = 'N';

									if (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/kg/min'))) then

										SELECT * FROM Calcular_Dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 13, qt_solucao_w, 24, 0, '', qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;
									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/kg/hora'))) then

										SELECT * FROM Calcular_Dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 37, qt_solucao_w, 24, 0, '', qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;

									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/kg/hora'))) then

										SELECT * FROM Calcular_Dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 40, qt_solucao_w, 24, 0, '', qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;

									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/kg/min'))) then

										SELECT * FROM Calcular_Dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 12, qt_solucao_w, 24, 0, '', qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;

									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('ui/hr'))) then
										SELECT * FROM calcular_dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 173, qt_solucao_w, 24, 0, null, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;
									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('ui/min'))) then
										SELECT * FROM calcular_dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 180, qt_solucao_w, 24, 0, null, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;
									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('ui/kg/min'))) then
										SELECT * FROM calcular_dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 176, qt_solucao_w, 24, 0, null, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;
									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('ui/kg/hr'))) then
										SELECT * FROM calcular_dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 174, qt_solucao_w, 24, 0, null, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;
									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/min'))) then
										SELECT * FROM calcular_dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 183, qt_solucao_w, 24, 0, null, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;
									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('Mg/hr'))) then
										SELECT * FROM calcular_dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 184, qt_solucao_w, 24, 0, null, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;
									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/hr'))) then
										SELECT * FROM calcular_dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 182, qt_solucao_w, 24, 0, null, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;
									elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/min'))) then
										SELECT * FROM calcular_dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 181, qt_solucao_w, 24, 0, null, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_ww, ie_tipo_dosagem_ww, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;

									end if;

									qt_dosagem_ww	:= qt_dose_terap_w;

									end;
								elsif (ie_tipo_dosagem_ww <> ds_unid_med_w) and (ds_unid_med_w IS NOT NULL AND ds_unid_med_w::text <> '') then
									qt_dosagem_ww	:= round((Converte_vel_infusao(ie_tipo_dosagem_ww,ds_unid_med_w,qt_dosagem_ww))::numeric,2);
								end if;
								ds_unid_med_w	:= coalesce(ds_unid_med_w,ie_tipo_dosagem_ww);

								ds_dosagem_w	:= to_char(qt_dosagem_ww);
								if (qt_dosagem_ww = 0) then
									ds_dosagem_w	:= '';
								elsif (substr(to_char(qt_dosagem_ww),1,1) = ',') then
									ds_dosagem_w	:= '0'||to_char(qt_dosagem_ww);
								end if;

								if (dt_inicio_ref_w > dt_alteracao_ww) then
									begin


									ie_cursor_w	:= 'N';
									if (trunc(clock_timestamp(),'dd') = trunc(dt_referencia_w,'dd')) then
										begin
										ind		:= qt_hora_w + 1;
										while(ind <= somente_numero(to_char(clock_timestamp(),'hh24'))) loop
											begin
											vt_sinal_w[ind].vl_sinal := ds_dosagem_w;
											ind := ind + 1;
											end;
										end loop;
										end;
									elsif (trunc(clock_timestamp(),'dd') = trunc(dt_referencia_w + 1,'dd')) and (somente_numero(to_char(clock_timestamp(),'hh24')) <= qt_hora_w + 1) then
										begin
										ind		:= 0;
										while(ind <= somente_numero(to_char(clock_timestamp(),'hh24'))) loop
											begin
											vt_sinal_w[ind].vl_sinal := ds_dosagem_w;
											ind := ind + 1;
											end;
										end loop;
										ind		:= qt_hora_w + 1;
										while(ind <= 23) loop
											begin
											vt_sinal_w[ind].vl_sinal := ds_dosagem_w;
											ind := ind + 1;
											end;
										end loop;
										end;
									else
										begin
										ind		:= 0;
										while(ind <= 23) loop
											begin
											if (ie_alteracao_w in (2,4)) then
											vt_sinal_w[ind].vl_sinal := '';
											else
											vt_sinal_w[ind].vl_sinal := ds_dosagem_w;
											end if;
											ind := ind + 1;
											end;
										end loop;
										end;
									end if;
									end;
								elsif (ie_alteracao_ww in (1,3,5)) then
									begin
									if (dt_alteracao_ww >= dt_inicio_ref_w) and (dt_alteracao_ww <= dt_final_ref_w) then
										begin


										vt_sinal_w[nr_hora_ww].vl_sinal := ds_dosagem_w;
										if (nr_hora_ww > qt_hora_w + 1) and
											((trunc(dt_referencia_w,'dd') = trunc(dt_final_ref_w,'dd')) or (clock_timestamp() > dt_referencia_w)) then
											ind := coalesce(nr_hora_ant_w,qt_hora_w + 1);
											while(ind < nr_hora_ww) loop
												begin
												if (ds_dosagem_ant_w IS NOT NULL AND ds_dosagem_ant_w::text <> '') then
													vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
												end if;
												ind := ind + 1;
												end;
											end loop;
										else
											begin
											while(ind <= 23) loop
												begin
												if (ds_dosagem_ant_w IS NOT NULL AND ds_dosagem_ant_w::text <> '') then
													vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
												end if;
												ind := ind + 1;
												end;
											end loop;

											if (nr_hora_ww < nr_hora_ant_w) then
												begin
												ind	:= 0;
												while(ind <= nr_hora_ww) loop
													begin
													if (ds_dosagem_ant_w IS NOT NULL AND ds_dosagem_ant_w::text <> '') then
														vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
													end if;
													ind := ind + 1;
													end;
												end loop;
												end;
											end if;
											end;
										end if;
										nr_hora_ant_w		:= nr_hora_ww;
										end;
									end if;
									end;
								end if;
								ds_dosagem_ant_w	:= ds_dosagem_w;
							end if;

							ie_cursor_w	:= 'S';

							if (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/kg/min'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/kg/hora'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/kg/hora'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/kg/min'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('ui/hr'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('ui/min'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('ui/kg/min'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('ui/kg/hr'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/min'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('Mg/hr'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/hr'))) or (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/min'))) then
								begin
								qt_dose_terap_w := 0;

								select	coalesce(max(qt_peso),0)
								into STRICT	qt_peso_prescr_w
								from	prescr_medica
								where	nr_prescricao	= nr_prescricao_w;

								select	max(a.cd_material),
									max(a.qt_dose),
									max(a.cd_unidade_medida_dose)
								into STRICT	cd_material_w,
									qt_dose_w,
									cd_unidade_medida_dose_w
								from	material b,
									prescr_material a
								where	a.nr_prescricao		= nr_prescricao_w
								and	a.nr_sequencia_solucao	= nr_seq_solucao_w
								and	a.cd_material		= b.cd_material
								and	coalesce(b.ie_ancora_solucao,'N')	= 'S';

								select	coalesce(sum(a.qt_solucao),0)
								into STRICT	qt_solucao_w
								from	material b,
									prescr_material a
								where	a.nr_prescricao		= nr_prescricao_w
								and	a.nr_sequencia_solucao	= nr_seq_solucao_w
								and	a.cd_material		= b.cd_material
								and	coalesce(b.ie_ancora_solucao,'N') = 'N';

								if (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/kg/min'))) then

									SELECT * FROM Calcular_Dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 13, qt_solucao_w, 24, 0, '', qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_w, ie_tipo_dosagem_w, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_w, ie_tipo_dosagem_w, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;
								elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/kg/hora'))) then

									SELECT * FROM Calcular_Dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 37, qt_solucao_w, 24, 0, '', qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_w, ie_tipo_dosagem_w, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_w, ie_tipo_dosagem_w, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;

								elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mcg/kg/hora'))) then

									SELECT * FROM Calcular_Dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 40, qt_solucao_w, 24, 0, '', qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_w, ie_tipo_dosagem_w, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_w, ie_tipo_dosagem_w, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;

								elsif (upper(ds_unid_med_w) = upper(obter_unid_med_usua('mg/kg/min'))) then

									SELECT * FROM Calcular_Dose_medic(cd_material_w, 0, qt_peso_prescr_w, 0, 0, qt_dose_terap_w, 12, qt_solucao_w, 24, 0, '', qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_w, ie_tipo_dosagem_w, 0, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, 'N', qt_daily_dose_w) INTO STRICT qt_dose_terap_w, qt_dose_w, cd_unidade_medida_dose_w, qt_dosagem_w, ie_tipo_dosagem_w, qt_dose_total_w, qt_dose_interv_w, qt_dose_medic_w, qt_daily_dose_w;

								end if;

								qt_dosagem_w	:= qt_dose_terap_w;

								end;
							elsif (ie_tipo_dosagem_w <> ds_unid_med_w) and (ds_unid_med_w IS NOT NULL AND ds_unid_med_w::text <> '') then
								qt_dosagem_w	:= round((Converte_vel_infusao(ie_tipo_dosagem_w,ds_unid_med_w,qt_dosagem_w))::numeric,2);
							end if;

							ds_unid_med_w	:= coalesce(ds_unid_med_w,ie_tipo_dosagem_w);

							ds_dosagem_w	:= to_char(qt_dosagem_w);
							if (qt_dosagem_w = 0) then
								ds_dosagem_w	:= '';
							elsif (substr(to_char(qt_dosagem_w),1,1) = ',') then
								ds_dosagem_w	:= '0'||to_char(qt_dosagem_w);
							end if;

							if (dt_inicio_ref_w > dt_alteracao_w) then
								begin

								ie_cursor_w	:= 'N';
								if (trunc(clock_timestamp(),'dd') = trunc(dt_referencia_w,'dd')) then
									begin
									ind		:= qt_hora_w + 1;
									while(ind <= somente_numero(to_char(clock_timestamp(),'hh24'))) loop
										begin
										vt_sinal_w[ind].vl_sinal := ds_dosagem_w;
										ind := ind + 1;
										end;
									end loop;
									end;
								elsif (trunc(clock_timestamp(),'dd') = trunc(dt_referencia_w + 1,'dd')) and (somente_numero(to_char(clock_timestamp(),'hh24')) <= qt_hora_w + 1) then
									begin
									ind		:= 0;
									while(ind <= somente_numero(to_char(clock_timestamp(),'hh24'))) loop
										begin
										vt_sinal_w[ind].vl_sinal := ds_dosagem_w;
										ind := ind + 1;
										end;
									end loop;
									ind		:= qt_hora_w + 1;
									while(ind <= 23) loop
										begin
										vt_sinal_w[ind].vl_sinal := ds_dosagem_w;
										ind := ind + 1;
										end;
									end loop;
									end;
								else
									begin
									ind		:= 0;
									while(ind <= 23) loop
										begin
										if (ie_alteracao_w in (2,4)) then
										vt_sinal_w[ind].vl_sinal := '';
										else
										vt_sinal_w[ind].vl_sinal := ds_dosagem_w;
										end if;
										ind := ind + 1;
										end;
									end loop;
									end;
								end if;
								end;
							elsif (ie_alteracao_w in (1,3,5)) then
								begin
								if (dt_alteracao_w >= dt_inicio_ref_w) and (dt_alteracao_w <= dt_final_ref_w) then
									begin
									vt_sinal_w[nr_hora_w].vl_sinal := ds_dosagem_w;

									if (nr_hora_w > qt_hora_w + 1) and
										((trunc(dt_referencia_w,'dd') = trunc(dt_final_ref_w,'dd')) or (clock_timestamp() > dt_referencia_w)) then
										ind := coalesce(nr_hora_ant_w,qt_hora_w + 1);

										while(ind < nr_hora_w) loop
											begin
											if (ds_dosagem_ant_w IS NOT NULL AND ds_dosagem_ant_w::text <> '') then
												vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
											end if;
											ind := ind + 1;
											end;
										end loop;

										ind := ind + 1;

										while(ind <= 23) loop
											begin
											if (ds_dosagem_w IS NOT NULL AND ds_dosagem_w::text <> '') then
												vt_sinal_w[ind].vl_sinal := ds_dosagem_w;
											end if;
											ind := ind + 1;
											end;
										end loop;
									else
										begin
										if (nr_hora_w < nr_hora_ant_w) then
											begin
											ind	:= 0;
											while(ind < nr_hora_w) loop
												begin
												if (ds_dosagem_ant_w IS NOT NULL AND ds_dosagem_ant_w::text <> '') then
													vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
												end if;
												ind := ind + 1;
												end;
											end loop;
											end;
										else
											begin
											ind := coalesce(nr_hora_ant_w,qt_hora_w + 1);

											while(ind < nr_hora_w) loop
												begin
												if (ds_dosagem_ant_w IS NOT NULL AND ds_dosagem_ant_w::text <> '') then
													vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
												end if;
												ind := ind + 1;
												end;
											end loop;
											end;
										end if;
										end;
									end if;
									nr_hora_ant_w		:= nr_hora_w;
									end;
								end if;
								end;
							elsif (ie_alteracao_w in (2,4)) then
								begin

								if (dt_alteracao_w >= dt_inicio_ref_w) and
									((dt_alteracao_w <= dt_final_ref_w) or
									 ((ie_24_horas_p = 'S') and (dt_alteracao_w > clock_timestamp()) and (dt_alteracao_w <= dt_final_ref_w + 1))) then
									begin
									if (nr_hora_w > qt_hora_w + 1) then
										begin

										nr_hora_dif_w	:= somente_numero(to_char(dt_alteracao_w,'hh24'));
										ind := coalesce(nr_hora_ant_w,qt_hora_w + 1);
										while(ind <= nr_hora_dif_w) loop
											begin
											vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
											ind := ind + 1;
											end;
										end loop;
										ind	:= nr_hora_dif_w + 1;
										while(ind <= 23) loop
											begin
											vt_sinal_w[ind].vl_sinal := '';
											ind := ind + 1;
											end;
										end loop;
										ind	:= 0;
										while(ind < qt_hora_w + 1) loop
											begin
											vt_sinal_w[ind].vl_sinal := '';
											ind := ind + 1;
											end;
										end loop;
										end;
									elsif (coalesce(nr_hora_ant_w,0) > qt_hora_w + 1) then
										begin

										ind	:= coalesce(nr_hora_ant_w,0);
										while(ind <= 23) loop
											begin
											vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
											ind := ind + 1;
											end;
										end loop;
										ind	:= 0;
										while(ind <= nr_hora_w) loop
											begin
											vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
											ind := ind + 1;
											end;
										end loop;
										end;
									elsif (coalesce(nr_hora_ant_w,0) < qt_hora_w + 1) then
										begin

										ind	:= coalesce(nr_hora_ant_w,0);


										if (ie_24_horas_p = 'S') and (dt_alteracao_w > clock_timestamp()) then

											while(ind <= somente_numero(to_char(clock_timestamp(),'hh24'))) loop
												begin
												vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
												ind := ind + 1;
												end;
											end loop;

										else

											while(ind <= nr_hora_w) loop
													begin
													if (ie_alteracao_w in (2,4)) then
													vt_sinal_w[ind].vl_sinal := '';
													else
													vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
													end if;
													ind := ind + 1;
													end;
												end loop;

										end if;



										end;
									end if;
									nr_hora_ant_w		:= nr_hora_w;
									end;
								end if;


								end;
							end if;
							ds_dosagem_ant_w	:= ds_dosagem_w;
							end;
						end loop;
						close C06;
						end;
					end loop;
					close C66;
					if (ie_cursor_w = 'S') and (ie_alteracao_w in (1,3,5)) then
						begin
						if (clock_timestamp() <= dt_final_ref_w) then
							begin
							if (nr_hora_w > qt_hora_w + 1) and
								((trunc(dt_referencia_w,'dd') = trunc(dt_final_ref_w,'dd')) or (clock_timestamp() >= dt_inicio_ref_w)) then
								begin
								nr_hora_dif_w	:= somente_numero(to_char(clock_timestamp(),'hh24'));
								ind := coalesce(nr_hora_ant_w,qt_hora_w + 1);
								if (nr_hora_dif_w < ind) then
									begin
									while(ind <= 23) loop
										begin
										vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
										ind := ind + 1;
										end;
									end loop;
									ind := 0;
									while(ind < nr_hora_w) loop
										begin
										vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
										ind := ind + 1;
										end;
									end loop;
									end;
								else
									begin
									while(ind <= nr_hora_dif_w) loop
										begin
										vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
										ind := ind + 1;
										end;
									end loop;
									end;
								end if;
								end;
							elsif (nr_hora_w < qt_hora_w + 1) and (dt_alteracao_w < dt_inicio_ref_w) then
								begin
								nr_hora_dif_w	:= somente_numero(to_char(clock_timestamp(),'hh24'));
								ind := qt_hora_w + 1;
								while(ind <= nr_hora_dif_w) loop
									begin
									vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
									ind := ind + 1;
									end;
								end loop;
								end;
							end if;
							end;
						elsif (nr_hora_w >= qt_hora_w + 1) then
							begin
							ind := nr_hora_w + 1;
							while(ind <= 23) loop
								begin
								vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
								ind := ind + 1;
								end;
							end loop;
							ind := 0;
							while(ind <= qt_hora_w) loop
								begin
								vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
								ind := ind + 1;
								end;
							end loop;
							end;
						elsif (nr_hora_w < qt_hora_w + 1) then
							begin
							ind := nr_hora_w + 1;
							while(ind <= qt_hora_w) loop
								begin
								vt_sinal_w[ind].vl_sinal := ds_dosagem_ant_w;
								ind := ind + 1;
								end;
							end loop;
							end;
						end if;
						end;
					end if;
					end;
				elsif (ie_tipo_w	= 'GA') then
					begin
					ie_cursor_w	:= 'N';
					open c19;
					loop
					fetch C19 into
						nr_hora_w,
						dt_alteracao_w,
						qt_gasoterapia_w,
						ie_evento_w,
						nr_prescricao_w,
						nr_seq_gasoterapia_w,
						IE_UNIDADE_MEDIDA_w;
					EXIT WHEN NOT FOUND; /* apply on c19 */
						begin
						ds_unid_med_w	:= IE_UNIDADE_MEDIDA_w;
						ie_cursor_w	:= 'S';
						if (dt_inicio_ref_w > dt_alteracao_w) then
							begin
							ie_cursor_w	:= 'N';
							if (trunc(clock_timestamp(),'dd') = trunc(dt_referencia_w,'dd')) then
								begin
								ind		:= qt_hora_w + 1;
								while(ind <= somente_numero(to_char(clock_timestamp(),'hh24'))) loop
									begin
									vt_sinal_w[ind].vl_sinal := qt_gasoterapia_w;
									ind := ind + 1;
									end;
								end loop;
								end;
							elsif (trunc(clock_timestamp(),'dd') = trunc(dt_referencia_w + 1,'dd')) and (somente_numero(to_char(clock_timestamp(),'hh24')) <= qt_hora_w + 1) then
								begin
								ind		:= 0;
								while(ind <= somente_numero(to_char(clock_timestamp(),'hh24'))) loop
									begin
									vt_sinal_w[ind].vl_sinal := qt_gasoterapia_w;
									ind := ind + 1;
									end;
								end loop;
								ind		:= qt_hora_w + 1;
								while(ind <= 23) loop
									begin
									vt_sinal_w[ind].vl_sinal := qt_gasoterapia_w;
									ind := ind + 1;
									end;
								end loop;
								end;
							else
								begin
								ind		:= 0;
								while(ind <= 23) loop
									begin
									vt_sinal_w[ind].vl_sinal := qt_gasoterapia_w;
									ind := ind + 1;
									end;
								end loop;
								end;
							end if;
							end;
						elsif (ie_evento_w in ('I','R','V')) then
							begin
							if (dt_alteracao_w >= dt_inicio_ref_w) and (dt_alteracao_w <= dt_final_ref_w) then
								begin
								vt_sinal_w[nr_hora_w].vl_sinal := qt_gasoterapia_w;
								if (nr_hora_w > qt_hora_w + 1) and
									((trunc(dt_referencia_w,'dd') = trunc(dt_final_ref_w,'dd')) or (clock_timestamp() > dt_referencia_w)) then
									ind := coalesce(nr_hora_ant_w,qt_hora_w + 1);
									while(ind < nr_hora_w) loop
										begin
										if (qt_gasoterapia_ant_w IS NOT NULL AND qt_gasoterapia_ant_w::text <> '') then
											vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
										end if;
										ind := ind + 1;
										end;
									end loop;
								else
									begin
									while(ind <= 23) loop
										begin
										if (qt_gasoterapia_ant_w IS NOT NULL AND qt_gasoterapia_ant_w::text <> '') then
											vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
										end if;
										ind := ind + 1;
										end;
									end loop;

									if (nr_hora_w < nr_hora_ant_w) then
										begin
										ind	:= 0;
										while(ind <= nr_hora_w) loop
											begin
											if (qt_gasoterapia_ant_w IS NOT NULL AND qt_gasoterapia_ant_w::text <> '') then
												vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
											end if;
											ind := ind + 1;
											end;
										end loop;
										end;
									end if;
									end;
								end if;
								nr_hora_ant_w		:= nr_hora_w;
								end;
							end if;
							end;
						elsif (ie_evento_w in ('IN','T')) then
							begin
							if (dt_alteracao_w >= dt_inicio_ref_w) and (dt_alteracao_w <= dt_final_ref_w) then
								begin
								if (nr_hora_w > qt_hora_w + 1) then
									begin
									nr_hora_dif_w	:= somente_numero(to_char(dt_alteracao_w,'hh24'));
									ind := coalesce(nr_hora_ant_w,qt_hora_w + 1);
									while(ind <= nr_hora_dif_w) loop
										begin
										vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
										ind := ind + 1;
										end;
									end loop;
									ind	:= nr_hora_dif_w + 1;
									while(ind <= 23) loop
										begin
										vt_sinal_w[ind].vl_sinal := '';
										ind := ind + 1;
										end;
									end loop;
									ind	:= 0;
									while(ind < qt_hora_w + 1) loop
										begin
										vt_sinal_w[ind].vl_sinal := '';
										ind := ind + 1;
										end;
									end loop;
									end;
								elsif (coalesce(nr_hora_ant_w,0) > qt_hora_w + 1) then
									begin
									ind	:= coalesce(nr_hora_ant_w,0);
									while(ind <= 23) loop
										begin
										vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
										ind := ind + 1;
										end;
									end loop;
									ind	:= 0;
									while(ind <= nr_hora_w) loop
										begin
										vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
										ind := ind + 1;
										end;
									end loop;
									end;
								elsif (coalesce(nr_hora_ant_w,0) < qt_hora_w + 1) then
									begin
									ind	:= coalesce(nr_hora_ant_w,0);
									while(ind <= nr_hora_w) loop
										begin
										vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
										ind := ind + 1;
										end;
									end loop;
									end;
								end if;
								nr_hora_ant_w		:= nr_hora_w;
								end;
							end if;
							end;
						end if;
						qt_gasoterapia_ant_w	:= qt_gasoterapia_w;
						end;
					end loop;
					close c19;

					if (ie_cursor_w = 'S') and (ie_evento_w in ('I','R','V')) then
						begin
						if (clock_timestamp() <= dt_final_ref_w) then
							begin
							if (nr_hora_w > qt_hora_w + 1) and
								((trunc(dt_referencia_w,'dd') = trunc(dt_final_ref_w,'dd')) or (clock_timestamp() >= dt_inicio_ref_w)) then
								begin
								nr_hora_dif_w	:= somente_numero(to_char(clock_timestamp(),'hh24'));

								ind := coalesce(nr_hora_ant_w,qt_hora_w + 1);
								if (nr_hora_dif_w < ind) then
									begin
									while(ind <= 23) loop
										begin
										vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
										ind := ind + 1;
										end;
									end loop;
									ind := 0;
									while(ind < nr_hora_w) loop
										begin
										vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
										ind := ind + 1;
										end;
									end loop;

									end;
								else
									begin
									while(ind <= nr_hora_dif_w) loop
										begin
										vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
										ind := ind + 1;
										end;
									end loop;
									end;

								end if;
								end;
							elsif (nr_hora_w < qt_hora_w + 1) and (dt_alteracao_w < dt_inicio_ref_w) then
								begin

								nr_hora_dif_w	:= somente_numero(to_char(clock_timestamp(),'hh24'));
								ind := qt_hora_w + 1;
								while(ind <= nr_hora_dif_w) loop
									begin
									vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
									ind := ind + 1;
									end;
								end loop;
								end;
							end if;
							end;
						elsif (nr_hora_w >= qt_hora_w + 1) then
							begin

							ind := nr_hora_w + 1;
							while(ind <= 23) loop
								begin
								vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
								ind := ind + 1;
								end;
							end loop;
							ind := 0;
							while(ind <= qt_hora_w) loop
								begin
								vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
								ind := ind + 1;
								end;
							end loop;
							end;
						elsif (nr_hora_w < qt_hora_w + 1) then
							begin

							ind := nr_hora_w;
							while(ind <= qt_hora_w) loop
								begin
								vt_sinal_w[ind].vl_sinal := qt_gasoterapia_ant_w;
								ind := ind + 1;
								end;
							end loop;
							end;
						end if;
						end;
					end if;
					end;
				elsif (ie_tipo_w	= 'IA') then
					begin
					qt_min_valor_w	:= null;
					qt_max_valor_w	:= null;
					qt_media_valor_w:= null;

					open C41;
					loop
					fetch C41 into
						cd_material_ww,
						ds_material_w;
					EXIT WHEN NOT FOUND; /* apply on C41 */
						begin
						select	nextval('w_pep_apap_seq')
						into STRICT	nr_sequencia_w
						;


						insert into w_pep_apap(
							nr_sequencia,
							nr_seq_inf,
							nr_seq_inf_sv,
							ds_informacao,
							nr_atendimento,
							nr_ordem_grupo,
							nr_ordem_inf,
							dt_atualizacao,
							nm_usuario,
							ds_cor_param,
							ds_cor_total_parcial,
							ds_cor_total_geral,
							qt_tam_informacao,
							qt_tam_hora,
							qt_tam_total,
							qt_tam_unid_med,
							nr_seq_grupo,
							ie_manter_nulo,
							dt_referencia,
							ie_grafico,
							nr_seq_grupo_pg,
							nr_seq_tipo_pg,
							ie_numerico,
							ie_tipo_inf,
							ie_negrito_relat,
							ie_relat,
              ie_tipo_pg)
						values (	nr_sequencia_w,
							coalesce(nr_seq_inf_w,nr_seq_exame_w),
							CASE WHEN ie_tipo_inf_w='SV' THEN  obter_de_para_inf_apap_sv(nr_seq_inf_w)  ELSE null END ,
							ds_espaco_w||ds_material_w,
							nr_atendimento_p,
							nr_seq_apres_grupo_w,
							nr_seq_apres_w,
							clock_timestamp(),
							nm_usuario_p,
							ds_cor_param_w,
							ds_cor_total_parcial_w,
							ds_cor_total_geral_w,
							qt_tam_informacao_w,
							qt_tam_hora_w,
							qt_tam_total_w,
							qt_tam_unid_med_w,
							nr_seq_grupo_pai_w,
							ie_manter_nulo_w,
							dt_referencia_w,
							ie_grafico_w,
							nr_seq_grupo_pg_ww,
							nr_seq_tipo_pg_w,
							'N',
							ie_tipo_inf_w,
							ie_negrito_w,
							ie_relat_w,
              ie_ganho_perda_w);
						commit;
						
						ie_numerico_w	:= 'N';
						vt_sinal_w.delete;

						ind := 0;
						while(ind < 24) loop
							begin
							vt_sinal_w[ind].vl_sinal	:= null;
							vt_sinal_w[ind].qt_registro	:= 0;

							vt_medic_w[ind].qt_dose 	:= null;
							vt_medic_w[ind].qt_registro := 0;
							ind 				:= ind + 1;
							end;
						end loop;

						open C42;
						loop
						fetch C42 into
							nr_hora_w,
							qt_dose_medic_vet_w;
						EXIT WHEN NOT FOUND; /* apply on C42 */
							begin
							vt_sinal_w[nr_hora_w].vl_sinal	:= 'X';

							vt_medic_w[nr_hora_w].qt_dose := qt_dose_medic_vet_w;
							end;
						end loop;
						close C42;

						qt_dose_total_medic_w := 0;
						ind := 0;
						while(ind < 24) loop
							begin

							if (vt_medic_w[ind].qt_dose > 0) then
								qt_dose_total_medic_w := qt_dose_total_medic_w + vt_medic_w[ind].qt_dose;
							end if;

							ind 				:= ind + 1;
							end;
						end loop;

						update	w_pep_apap
						set	ds_hora_00	= vt_sinal_w[0].vl_sinal,
							ds_hora_01	= vt_sinal_w[1].vl_sinal,
							ds_hora_02	= vt_sinal_w[2].vl_sinal,
							ds_hora_03	= vt_sinal_w[3].vl_sinal,
							ds_hora_04	= vt_sinal_w[4].vl_sinal,
							ds_hora_05	= vt_sinal_w[5].vl_sinal,
							ds_hora_06	= vt_sinal_w[6].vl_sinal,
							ds_hora_07	= vt_sinal_w[7].vl_sinal,
							ds_hora_08	= vt_sinal_w[8].vl_sinal,
							ds_hora_09	= vt_sinal_w[9].vl_sinal,
							ds_hora_10	= vt_sinal_w[10].vl_sinal,
							ds_hora_11	= vt_sinal_w[11].vl_sinal,
							ds_hora_12	= vt_sinal_w[12].vl_sinal,
							ds_hora_13	= vt_sinal_w[13].vl_sinal,
							ds_hora_14	= vt_sinal_w[14].vl_sinal,
							ds_hora_15	= vt_sinal_w[15].vl_sinal,
							ds_hora_16	= vt_sinal_w[16].vl_sinal,
							ds_hora_17	= vt_sinal_w[17].vl_sinal,
							ds_hora_18	= vt_sinal_w[18].vl_sinal,
							ds_hora_19	= vt_sinal_w[19].vl_sinal,
							ds_hora_20	= vt_sinal_w[20].vl_sinal,
							ds_hora_21	= vt_sinal_w[21].vl_sinal,
							ds_hora_22	= vt_sinal_w[22].vl_sinal,
							ds_hora_23	= vt_sinal_w[23].vl_sinal,
							qt_total_6h	= CASE WHEN qt_total6_w=0 THEN null  ELSE qt_total6_w END ,
							qt_total_12h	= CASE WHEN qt_total12h_w=0 THEN null  ELSE qt_total12h_w END ,
							qt_total_18h	= CASE WHEN qt_total18h_w=0 THEN null  ELSE qt_total18h_w END ,
							qt_total_24h	= CASE WHEN qt_total24h_w=0 THEN null  ELSE qt_total24h_w END ,
							--qt_total_geral	= round(decode(qt_total_geral_w,0,null,qt_total_geral_w),0),
							qt_total_geral	= CASE WHEN ie_total_w='N' THEN  null  ELSE CASE WHEN qt_dose_total_medic_w=0 THEN  null  ELSE qt_dose_total_medic_w END  END ,
							ds_unid_med	= ds_unid_med_w,
							qt_tam_informacao = qt_tam_informacao_w,
							qt_tam_hora	= qt_tam_hora_w,
							qt_tam_total	= qt_tam_total_w,
							qt_tam_unid_med	= qt_tam_unid_med_w,
							qt_minima	= CASE WHEN ie_minima_w='N' THEN  null  ELSE round((qt_min_valor_w)::numeric,2) END ,
							qt_maxima	= CASE WHEN ie_maxima_w='N' THEN  null  ELSE round((qt_max_valor_w)::numeric,2) END ,
							qt_media	= CASE WHEN ie_media_w='N' THEN  null  ELSE round((qt_media_valor_w)::numeric,2) END ,
							qt_minima_graf	= round((obter_somente_numero(qt_min_valor_w))::numeric,2),
							qt_maxima_graf	= round((obter_somente_numero(qt_max_valor_w))::numeric,2),
							ds_resultados	= ds_resultados_w
						where	nr_sequencia	= nr_sequencia_w;

						commit;

						end;
					end loop;
					close C41;
					end;

				elsif (ie_tipo_w = 'ETN') then --Escala Tinetti
					begin
					open C47;
					loop
					fetch C47 into
						qt_tinetti_w,
						hr_tinetti_w;
					EXIT WHEN NOT FOUND; /* apply on C47 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_tinetti_w].vl_sinal := qt_tinetti_w;
						end if;
						end;
					end loop;
					close C47;
					end;

				elsif (ie_tipo_w = 'RR') then --Escala Rishmond/Rass
					begin
					open C48;
					loop
					fetch C48 into
						qt_richmond_w,
						hr_richmond_w;
					EXIT WHEN NOT FOUND; /* apply on C48 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_richmond_w].vl_sinal := qt_richmond_w;
						end if;
						end;
					end loop;
					close C48;
					end;

				elsif (ie_tipo_w = 'NHS') then -- Escala EARQ
					begin
					open C49;
					loop
					fetch C49 into
						qt_earq_w,
						hr_earq_w;
					EXIT WHEN NOT FOUND; /* apply on C49 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_earq_w].vl_sinal := qt_earq_w;
						end if;
						end;
					end loop;
					close C49;
					end;

				elsif (ie_tipo_w = 'CAM') then --Escala CAM - ICU
					begin
					open C50;
					loop
					fetch C50 into
						qt_cam_w,
						hr_cam_w;
					EXIT WHEN NOT FOUND; /* apply on C50 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_cam_w].vl_sinal := qt_cam_w;
						end if;
						end;
					end loop;
					close C50;
					end;
				elsif (ie_tipo_w = 'SNP') then --Escala SNAP ||
					begin
					open C51;
					loop
					fetch C51 into
						qt_snap_w,
						hr_snap_w;
					EXIT WHEN NOT FOUND; /* apply on C51 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_snap_w].vl_sinal := qt_snap_w;
						end if;
						end;
					end loop;
					close C51;
					end;
				elsif (ie_tipo_w = 'SNPP') then --Escala SNAPPE ||
					begin
					open C52;
					loop
					fetch C52 into
						qt_snappe_w,
						hr_snappe_w;
					EXIT WHEN NOT FOUND; /* apply on C52 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_snappe_w].vl_sinal := qt_snappe_w;
						end if;
						end;
					end loop;
					close C52;
					end;
				elsif (ie_tipo_w = 'SNPPM') then --Escala SNAPPE II Mortalidade prevista (%)
					begin
					open C53;
					loop
					fetch C53 into
						qt_mortalidade_w,
						hr_mortalidade_w;
					EXIT WHEN NOT FOUND; /* apply on C53 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_mortalidade_w].vl_sinal := qt_mortalidade_w;
						end if;
						end;
					end loop;
					close C53;
					end;
				elsif (ie_tipo_w = 'SNAP') then -- Escala SNAP III
					open C54;
					loop
					fetch C54 into
						qt_snap3_w,
						hr_snap3_w;
					EXIT WHEN NOT FOUND; /* apply on C54 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_snap3_w].vl_sinal := qt_snap3_w;
						end if;
						end;
					end loop;
					close C54;
				elsif (ie_tipo_w = 'SOFA') then -- Escala SOFA
					open C55;
					loop
					fetch C55 into
						qt_sofa_w,
						hr_sofa_w;
					EXIT WHEN NOT FOUND; /* apply on C55 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_sofa_w].vl_sinal := qt_sofa_w;
						end if;
						end;
					end loop;
					close C55;
				elsif (ie_tipo_w = 'TI28') then -- Escala TISS 28
					open C56;
					loop
					fetch C56 into
						qt_tiss_w,
						hr_tiss_w;
					EXIT WHEN NOT FOUND; /* apply on C56 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_tiss_w].vl_sinal := qt_tiss_w;
						end if;
						end;
					end loop;
					close C56;
				elsif (ie_tipo_w = 'ECA') then -- Escala ECA(Fugulin)
					open C57;
					loop
					fetch C57 into
						qt_eca_w,
						hr_eca_w;
					EXIT WHEN NOT FOUND; /* apply on C57 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_eca_w].vl_sinal := qt_eca_w;
						end if;
						end;
					end loop;
					close C57;
				elsif (ie_tipo_w = 'ALD') then -- Escala Aldrete
					open C58;
					loop
					fetch C58 into
						qt_aldrete_w,
						hr_aldrete_w;
					EXIT WHEN NOT FOUND; /* apply on C58 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_aldrete_w].vl_sinal := qt_aldrete_w;
						end if;
						end;
					end loop;
					close C58;
				elsif (ie_tipo_w = 'MODS') then -- Escala MODS
					open C59;
					loop
					fetch C59 into
						qt_mods_w,
						qt_pto_resp_w,
						qt_pto_snc_w,
						qt_pto_cardio_w,
						qt_pto_hepatica_w,
						qt_pto_coag_w,
						qt_pto_renal_w,
						pr_mortalidade_w,
						pr_mortalidade_uti_w,
						hr_mods_w;
					EXIT WHEN NOT FOUND; /* apply on C59 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_mods_w].vl_sinal := qt_mods_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_mods_w].vl_sinal := qt_pto_resp_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_mods_w].vl_sinal := qt_pto_snc_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_mods_w].vl_sinal := qt_pto_cardio_w;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_mods_w].vl_sinal := qt_pto_hepatica_w;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_mods_w].vl_sinal := qt_pto_coag_w;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_mods_w].vl_sinal := qt_pto_renal_w;
						elsif (ie_escala_w = '8') then
							vt_sinal_w[hr_mods_w].vl_sinal := pr_mortalidade_w;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[hr_mods_w].vl_sinal := pr_mortalidade_uti_w;
						end if;
						end;
					end loop;
					close C59;
				elsif (ie_tipo_w = 'ECL') then -- Escala Clearence de creatinina
					open C60;
					loop
					fetch C60 into
						qt_cockcroft_gault_w,
						qt_mdrd_w,
						qt_schwartz_w,
						qt_counhahan_barratt_w,
						hr_clearence_w;
					EXIT WHEN NOT FOUND; /* apply on C60 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_clearence_w].vl_sinal := qt_cockcroft_gault_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_clearence_w].vl_sinal := qt_mdrd_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_clearence_w].vl_sinal := qt_schwartz_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_clearence_w].vl_sinal := qt_counhahan_barratt_w;
						end if;
						end;
					end loop;
					close C60;
				elsif (ie_tipo_w = 'KARN') then -- Escala Karnofsky
					open C62;
					loop
					fetch C62 into
						qt_karnofsk_w,
						hr_karnofsk_w;
					EXIT WHEN NOT FOUND; /* apply on C62 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_karnofsk_w].vl_sinal := qt_karnofsk_w;
						end if;
						end;
					end loop;
					close C62;
				elsif (ie_tipo_w = 'EMO') then -- Escala Morse
					open C65;
					loop
					fetch C65 into
						qt_pontuacao_morse_w,
						ds_risco_morde_w,
						hr_morse_w;
					EXIT WHEN NOT FOUND; /* apply on C65 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_morse_w].vl_sinal := qt_pontuacao_morse_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_morse_w].vl_sinal := ds_risco_morde_w;
						end if;
						end;
					end loop;
					close C65;
				elsif (ie_tipo_w = 'EDMO') then -- Escala Edmonton (ESAS)
					open C63;
					loop
					fetch C63 into
						qt_esas_dor_w,
						qt_esas_cansaco_w,
						qt_esas_nausea_w,
						qt_esas_depressao_w,
						qt_esas_ansiedade_w,
						qt_esas_sonolencia_w,
						qt_esas_bom_apetite_w,
						qt_esas_bem_estar_w,
						qt_esas_falta_ar_w,
						hr_esas_w;
					EXIT WHEN NOT FOUND; /* apply on C63 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_esas_w].vl_sinal := qt_esas_dor_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_esas_w].vl_sinal := qt_esas_cansaco_w;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[hr_esas_w].vl_sinal := qt_esas_nausea_w;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[hr_esas_w].vl_sinal := qt_esas_depressao_w;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[hr_esas_w].vl_sinal := qt_esas_ansiedade_w;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[hr_esas_w].vl_sinal := qt_esas_sonolencia_w;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[hr_esas_w].vl_sinal := qt_esas_bom_apetite_w;
						elsif (ie_escala_w = '8') then
							vt_sinal_w[hr_esas_w].vl_sinal := qt_esas_bem_estar_w;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[hr_esas_w].vl_sinal := qt_esas_falta_ar_w;
						end if;
						end;
					end loop;
					close C63;
					/*Escala CRIB II*/

				elsif (ie_tipo_w = 'CRIB') then
					begin
					open C64;
					loop
					fetch C64 into
						pr_score_crib_w,
						qt_score_crib_w,
						hr_score_crib_w;
					EXIT WHEN NOT FOUND; /* apply on C64 */
						begin
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_score_crib_w].vl_sinal := qt_score_crib_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_score_crib_w].vl_sinal := pr_score_crib_w;
						end if;
						end;
					end loop;
					close C64;
					end;
				elsif (ie_tipo_w = 'ABP') then -- Analisador bioquimico portatil
					begin
					open C68;
					loop
					fetch C68 into
						qt_tca_w,
						hr_abp_w;
					EXIT WHEN NOT FOUND; /* apply on C68 */
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_abp_w].vl_sinal := qt_tca_w;
						end if;
					end loop;
					Close C68;
					end;
				elsif (ie_tipo_w = 'CEM') then -- Circulacao extracoporea por membrana
					begin
					for circulacao_extracorporea in c67 loop

						if (ie_escala_w = '1') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_flixo_sanguineo;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_ultra_filtracao;
						elsif (ie_escala_w = '3') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_rotacao_bomba;
						elsif (ie_escala_w = '4') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_fluxo_gas;
						elsif (ie_escala_w = '5') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_fio2;
						elsif (ie_escala_w = '6') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_pressao_acesso;
						elsif (ie_escala_w = '7') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_pressao_pre_membrana;
						elsif (ie_escala_w = '8') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_pressao_pos_membrana;
						elsif (ie_escala_w = '9') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_temperatura;
						elsif (ie_escala_w = '10') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_pressao_trans_membrana;
						elsif (ie_escala_w = '11') then
							vt_sinal_w[circulacao_extracorporea.nr_hora].vl_sinal := circulacao_extracorporea.qt_fluxo_sanguineo_membr;
						end if;

					end loop;

					end;
				elsif (ie_tipo_w = 'ESTR') then
					begin
					open C69;
					loop
					fetch C69 into
						qt_pontuacao_stratify_w,
						hr_stratify_w,
						ds_escala_stratify_w;
					EXIT WHEN NOT FOUND; /* apply on C69 */
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_stratify_w].vl_sinal := qt_pontuacao_stratify_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_stratify_w].vl_sinal := ds_escala_stratify_w;
						end if;
					end loop;
					Close C69;
					end;
         		       elsif (ie_tipo_w = 'SF') then
					begin
					open C70;
					loop
					fetch C70 into
						qt_score_flex2_w,
						hr_score_flex2_w,
						ds_score_flex2_w;
					EXIT WHEN NOT FOUND; /* apply on C70 */
						if (ie_escala_w = '1') then
							vt_sinal_w[hr_score_flex2_w].vl_sinal := qt_score_flex2_w;
						elsif (ie_escala_w = '2') then
							vt_sinal_w[hr_score_flex2_w].vl_sinal := ds_score_flex2_w;
						end if;
					end loop;
					Close C70;
					end;
				end if;

				ind	:= 0;
				qt_min_valor_w		:= null;
				qt_max_valor_w		:= null;
				qt_media_valor_w	:= null;
				qt_media_w		:= null;
				if (ie_numerico_w = 'S') then
					begin
					while(ind <= 23) loop
						begin
						if (vt_sinal_w[ind].ds_resultado.count	= 0) then
							begin
							if (pkg_i18n.get_user_locale()='en_AU') or (philips_param_pck.get_nr_seq_idioma = 2) then -- Espanhol - Mexico(MX)
								vl_hora_w	:= (replace(vt_sinal_w[ind].vl_sinal,',',''))::numeric;
							else
								vl_hora_w	:= (replace(vt_sinal_w[ind].vl_sinal,'.',''))::numeric;
							end if;
							exception
							when others then
								vl_hora_w	:= null;
							end;

							if (vl_hora_w IS NOT NULL AND vl_hora_w::text <> '') and (vl_hora_w > coalesce(qt_max_valor_w,0)) then
								qt_max_valor_w	:= vl_hora_w;
							end if;
							if (vl_hora_w IS NOT NULL AND vl_hora_w::text <> '') and (vl_hora_w < coalesce(qt_min_valor_w,9999999)) then
								qt_min_valor_w	:= vl_hora_w;
							end if;
							if (vl_hora_w IS NOT NULL AND vl_hora_w::text <> '') then
								begin
								qt_media_valor_w	:= coalesce(qt_media_valor_w,0) + vl_hora_w;
								qt_media_w		:= coalesce(qt_media_w,0) + 1;
								end;
							end if;
						else

							for i in 1..vt_sinal_w[ind].ds_resultado.count  loop
								begin

								begin
								if (pkg_i18n.get_user_locale()='en_AU') or (philips_param_pck.get_nr_seq_idioma = 2) then --Espanhol - Mexico(MX)
									vl_hora_w	:= (replace(vt_sinal_w[ind].ds_resultado(i).vl_sinal_ww	,',',''))::numeric;
								else
									vl_hora_w	:= (replace(vt_sinal_w[ind].ds_resultado(i).vl_sinal_ww	,'.',''))::numeric;
								end if;
								exception
									when others then
									vl_hora_w	:= null;
								end;

								if (vl_hora_w IS NOT NULL AND vl_hora_w::text <> '') and (vl_hora_w > coalesce(qt_max_valor_w,0)) then
									qt_max_valor_w	:= vl_hora_w;
								end if;
								if (vl_hora_w IS NOT NULL AND vl_hora_w::text <> '') and (vl_hora_w < coalesce(qt_min_valor_w,9999999)) then
									qt_min_valor_w	:= vl_hora_w;
								end if;
								if (vl_hora_w IS NOT NULL AND vl_hora_w::text <> '') then
									begin
									qt_media_valor_w	:= coalesce(qt_media_valor_w,0) + vl_hora_w;
									qt_media_w		:= coalesce(qt_media_w,0) + 1;
									end;
								end if;
								end;


								end loop;
						end if;

						ind := ind + 1;
						end;
					end loop;

					if (qt_media_w > 0) then
						begin
						qt_media_valor_w	:= dividir(qt_media_valor_w,qt_media_w);
						end;
					end if;
					end;
				end if;
				if (ie_tipo_w	<> 'IA') then

					begin
					ds_resultados_w	:= substr('ds_hora_00='||obter_reg(0)  ||';'||
								   'ds_hora_01='||obter_reg(1)   ||';'||
								   'ds_hora_02='||obter_reg(2)   ||';'||
								   'ds_hora_03='||obter_reg(3)   ||';'||
								   'ds_hora_04='||obter_reg(4)   ||';'||
								   'ds_hora_05='||obter_reg(5)   ||';'||
								   'ds_hora_06='||obter_reg(6)   ||';'||
								   'ds_hora_07='||obter_reg(7)   ||';'||
								   'ds_hora_08='||obter_reg(8)   ||';'||
								   'ds_hora_09='||obter_reg(9)    ||';'||
								   'ds_hora_10='||obter_reg(10)    ||';'||
								   'ds_hora_11='||obter_reg(11)    ||';'||
								   'ds_hora_12='||obter_reg(12)    ||';'||
								   'ds_hora_13='||obter_reg(13)    ||';'||
								   'ds_hora_14='||obter_reg(14)   ||';'||
								   'ds_hora_15='||obter_reg(15)   ||';'||
								   'ds_hora_16='||obter_reg(16)   ||';'||
								   'ds_hora_17='||obter_reg(17)    ||';'||
								   'ds_hora_18='||obter_reg(18)    ||';'||
								   'ds_hora_19='||obter_reg(19)    ||';'||
								   'ds_hora_20='||obter_reg(20)    ||';'||
								   'ds_hora_21='||obter_reg(21)    ||';'||
								   'ds_hora_22='||obter_reg(22)    ||';'||
								   'ds_hora_23='||obter_reg(23)    ||';',1,4000);


					exception
						when others then
						ds_resultados_w	:= null;
					end;

					update	w_pep_apap
					set	ds_hora_00	= vt_sinal_w[0].vl_sinal,
						ds_hora_01	= vt_sinal_w[1].vl_sinal,
						ds_hora_02	= vt_sinal_w[2].vl_sinal,
						ds_hora_03	= vt_sinal_w[3].vl_sinal,
						ds_hora_04	= vt_sinal_w[4].vl_sinal,
						ds_hora_05	= vt_sinal_w[5].vl_sinal,
						ds_hora_06	= vt_sinal_w[6].vl_sinal,
						ds_hora_07	= vt_sinal_w[7].vl_sinal,
						ds_hora_08	= vt_sinal_w[8].vl_sinal,
						ds_hora_09	= vt_sinal_w[9].vl_sinal,
						ds_hora_10	= vt_sinal_w[10].vl_sinal,
						ds_hora_11	= vt_sinal_w[11].vl_sinal,
						ds_hora_12	= vt_sinal_w[12].vl_sinal,
						ds_hora_13	= vt_sinal_w[13].vl_sinal,
						ds_hora_14	= vt_sinal_w[14].vl_sinal,
						ds_hora_15	= vt_sinal_w[15].vl_sinal,
						ds_hora_16	= vt_sinal_w[16].vl_sinal,
						ds_hora_17	= vt_sinal_w[17].vl_sinal,
						ds_hora_18	= vt_sinal_w[18].vl_sinal,
						ds_hora_19	= vt_sinal_w[19].vl_sinal,
						ds_hora_20	= vt_sinal_w[20].vl_sinal,
						ds_hora_21	= vt_sinal_w[21].vl_sinal,
						ds_hora_22	= vt_sinal_w[22].vl_sinal,
						ds_hora_23	= vt_sinal_w[23].vl_sinal,
						qt_total_6h	= CASE WHEN qt_total6_w=0 THEN null  ELSE qt_total6_w END ,
						qt_total_12h	= CASE WHEN qt_total12h_w=0 THEN null  ELSE qt_total12h_w END ,
						qt_total_18h	= CASE WHEN qt_total18h_w=0 THEN null  ELSE qt_total18h_w END ,
						qt_total_24h	= CASE WHEN qt_total24h_w=0 THEN null  ELSE qt_total24h_w END ,
						--qt_total_geral	= round(decode(qt_total_geral_w,0,null,qt_total_geral_w),0),
						qt_total_geral	= CASE WHEN ie_total_w='N' THEN  null  ELSE CASE WHEN qt_total_geral_w=0 THEN  null  ELSE qt_total_geral_w END  END ,
						ds_unid_med	= ds_unid_med_w,
						qt_tam_informacao = qt_tam_informacao_w,
						qt_tam_hora	= qt_tam_hora_w,
						qt_tam_total	= qt_tam_total_w,
						qt_tam_unid_med	= qt_tam_unid_med_w,
						--qt_maxima	= decode(ie_tipo_inf,'CH',null,round(qt_max_valor_w,2)),

						--qt_media	= decode(ie_tipo_inf,'CH',null,round(qt_media_valor_w,1)),

						--qt_minima	= decode(ie_tipo_inf,'CH',null,round(qt_min_valor_w,2))
						qt_minima	= CASE WHEN ie_minima_w='N' THEN  null  ELSE round((qt_min_valor_w)::numeric,2) END ,
						qt_maxima	= CASE WHEN ie_maxima_w='N' THEN  null  ELSE round((qt_max_valor_w)::numeric,2) END ,
						qt_media	= CASE WHEN ie_media_w='N' THEN  null  ELSE round((qt_media_valor_w)::numeric,2) END ,
						qt_minima_graf	= round((obter_somente_numero(qt_min_valor_w))::numeric,2),
						qt_maxima_graf	= round((obter_somente_numero(qt_max_valor_w))::numeric,2),
						ds_resultados	= ds_resultados_w,
						ds_cor_ref_sv	= ds_cor_ref_sv_w,
						ds_cor_varias_sv	= ds_cor_varias_sv_w
					where	nr_sequencia	= nr_sequencia_w;
					commit;

					if (ie_tipo_w = 'CH') then -- obter se tipo eh controle hidrico; obtem valores com relacao aos turnos para cada registro de perda ou ganho
						select	count(*)
						into STRICT	qt_registro_w
						from	REGRA_TURNO_GP
						where	cd_estabelecimento	= cd_estabelecimento_w
						and	(ie_turno_apap IS NOT NULL AND ie_turno_apap::text <> '');

						if (qt_registro_w = 0) then

							qt_total6_w	:= 		coalesce(vt_sinal_w[6].vl_registro,0) +
												coalesce(vt_sinal_w[7].vl_registro,0) +
												coalesce(vt_sinal_w[8].vl_registro,0) +
												coalesce(vt_sinal_w[9].vl_registro,0) +
												coalesce(vt_sinal_w[10].vl_registro,0) +
												coalesce(vt_sinal_w[11].vl_registro,0);
							qt_total12h_w	:=	coalesce(vt_sinal_w[12].vl_registro,0) +
												coalesce(vt_sinal_w[13].vl_registro,0) +
												coalesce(vt_sinal_w[14].vl_registro,0) +
												coalesce(vt_sinal_w[15].vl_registro,0) +
												coalesce(vt_sinal_w[16].vl_registro,0) +
												coalesce(vt_sinal_w[17].vl_registro,0);
							qt_total18h_w	:=	coalesce(vt_sinal_w[18].vl_registro,0) +
												coalesce(vt_sinal_w[19].vl_registro,0) +
												coalesce(vt_sinal_w[20].vl_registro,0) +
												coalesce(vt_sinal_w[21].vl_registro,0) +
												coalesce(vt_sinal_w[22].vl_registro,0) +
												coalesce(vt_sinal_w[23].vl_registro,0);
							qt_total24h_w	:=	coalesce(vt_sinal_w[0].vl_registro,0) +
												coalesce(vt_sinal_w[1].vl_registro,0) +
												coalesce(vt_sinal_w[2].vl_registro,0) +
												coalesce(vt_sinal_w[3].vl_registro,0) +
												coalesce(vt_sinal_w[4].vl_registro,0) +
												coalesce(vt_sinal_w[5].vl_registro,0);

						else

							qt_total6_w		:= 0;
							qt_total12h_w	:= 0;
							qt_total18h_w	:= 0;
							qt_total24h_w	:= 0;

							for i in 0..vt_sinal_w.Count loop
								begin

								if (i	between 0 and 23) then

									ie_turno_apap_w	:= Obter_Turno_Apap(i);
									if (ie_turno_apap_w	= 1) then
										qt_total6_w	:= qt_total6_w	 + coalesce(vt_sinal_w[i].vl_registro,0);
									elsif (ie_turno_apap_w	= 2) then
										qt_total12h_w	:= qt_total12h_w + coalesce(vt_sinal_w[i].vl_registro,0);
									elsif (ie_turno_apap_w	= 3) then
										qt_total18h_w	:= qt_total18h_w+ coalesce(vt_sinal_w[i].vl_registro,0);
									elsif (ie_turno_apap_w	= 4) then
										qt_total24h_w	:= qt_total24h_w+ coalesce(vt_sinal_w[i].vl_registro,0);
									end if;

								end if;
								end;
							end loop;

						end if;

						update 	w_pep_apap
						set		qt_total_6h	= CASE WHEN qt_total6_w=0 THEN null  ELSE qt_total6_w END ,
								qt_total_12h	= CASE WHEN qt_total12h_w=0 THEN null  ELSE qt_total12h_w END ,
								qt_total_18h	= CASE WHEN qt_total18h_w=0 THEN null  ELSE qt_total18h_w END ,
								qt_total_24h	= CASE WHEN qt_total24h_w=0 THEN null  ELSE qt_total24h_w END
						where	nr_seq_tipo_pg	= nr_seq_tipo_pg_w
						and		nm_usuario 		= nm_usuario_p
						and		nr_atendimento  = nr_atendimento_p;

						commit;


						qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;

					end if;

					ds_cor_ref_sv_w := null;
					ds_cor_varias_sv_w := null;
					open ganho_perda_limite;
					loop
					fetch ganho_perda_limite into
						vl_minimo_w,
						vl_maximo_w,
						qt_idade_min_w,
						qt_idade_max_w,
						ie_tipo_alerta_w,
						ie_mostrar_alerta_w;
					EXIT WHEN NOT FOUND; /* apply on ganho_perda_limite */
						if ((ie_mostrar_alerta_w = 'H' or ie_mostrar_alerta_w = 'A') and qt_idade_pf_w between qt_idade_min_w and qt_idade_max_w) then
							for i in 0..23
							loop
								begin
									if (vt_sinal_w[i].vl_sinal > 0 and vt_sinal_w[i].vl_sinal between vl_minimo_w and vl_maximo_w) then
										if (i < 10) then
											ds_cor_ref_sv_w := ds_cor_ref_sv_w || '0' || i || '7038,';
										else
											ds_cor_ref_sv_w := ds_cor_ref_sv_w || i || '7038,';
										end if;
										if (ie_tipo_alerta_w = 'C') then
											if (i<10) then
												ds_cor_varias_sv_w := ds_cor_varias_sv_w || '0' || i || '7038,';
											else
												ds_cor_varias_sv_w := ds_cor_varias_sv_w || i || '7038,';
											end if;
										end if;
									end if;
								end;
							end loop;
						end if;

						if ((ie_mostrar_alerta_w = 'T' or ie_mostrar_alerta_w = 'A') and qt_idade_pf_w between qt_idade_min_w and qt_idade_max_w) then
							if (qt_total6_w > 0 and qt_total6_w between vl_minimo_w and vl_maximo_w) then
								ds_cor_ref_sv_w := ds_cor_ref_sv_w || 31 || '7038,'; -- 1 turno
								if (ie_tipo_alerta_w = 'C') then
									ds_cor_varias_sv_w := ds_cor_varias_sv_w || 31 || '7038,';
								end if;
							end if;
							if (qt_total12h_w > 0 and qt_total12h_w between vl_minimo_w and vl_maximo_w) then
								ds_cor_ref_sv_w := ds_cor_ref_sv_w || 32 || '7038,'; -- 2 turno
								if (ie_tipo_alerta_w = 'C') then
									ds_cor_varias_sv_w := ds_cor_varias_sv_w || 32 || '7038,';
								end if;
							end if;
							if (qt_total18h_w > 0 and qt_total18h_w between vl_minimo_w and vl_maximo_w) then
								ds_cor_ref_sv_w := ds_cor_ref_sv_w || 33 || '7038,'; -- 3 turno
								if (ie_tipo_alerta_w = 'C') then
									ds_cor_varias_sv_w := ds_cor_varias_sv_w || 33 || '7038,';
								end if;
							end if;
							if (qt_total24h_w > 0 and qt_total24h_w between vl_minimo_w and vl_maximo_w) then
								ds_cor_ref_sv_w := ds_cor_ref_sv_w || 34 || '7038,'; -- 4 turno
								if (ie_tipo_alerta_w = 'C') then
									ds_cor_varias_sv_w := ds_cor_varias_sv_w || 34 || '7038,';
								end if;
							end if;
						end if;

						update	w_pep_apap
						set		ds_cor_ref_sv	= ds_cor_ref_sv_w,
								ds_cor_varias_sv = ds_cor_varias_sv_w
						where	nr_seq_tipo_pg	= nr_seq_tipo_pg_w
						and		nm_usuario 		= nm_usuario_p
						and		nr_atendimento  = nr_atendimento_p;
						
						commit;
						
					end loop;
					qt_total6_w	:= 0;
					qt_total12h_w	:= 0;
					qt_total18h_w	:= 0;
					qt_total24h_w	:= 0;
					close ganho_perda_limite;

				end if;
				end;
			end loop;
			Close C01;

			/* Rafael em 12/8/8 */

			qt_total_perda_ganho_w	:= 	coalesce(vt_perda_ganho_w[0].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[1].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[2].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[3].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[4].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[5].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[6].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[7].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[8].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[9].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[10].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[11].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[12].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[13].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[14].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[15].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[16].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[17].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[18].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[19].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[20].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[21].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[22].qt_perda_ganho,0)	+
							coalesce(vt_perda_ganho_w[23].qt_perda_ganho,0);




			calcula_total_grupos(vt_perda_ganho_w);

			update	w_pep_apap
			set	ds_hora_00	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[0].qt_perda_ganho,2),
				ds_hora_01	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[1].qt_perda_ganho,2),
				ds_hora_02	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[2].qt_perda_ganho,2),
				ds_hora_03	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[3].qt_perda_ganho,2),
				ds_hora_04	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[4].qt_perda_ganho,2),
				ds_hora_05	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[5].qt_perda_ganho,2),
				ds_hora_06	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[6].qt_perda_ganho,2),
				ds_hora_07	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[7].qt_perda_ganho,2),
				ds_hora_08	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[8].qt_perda_ganho,2),
				ds_hora_09	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[9].qt_perda_ganho,2),
				ds_hora_10	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[10].qt_perda_ganho,2),
				ds_hora_11	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[11].qt_perda_ganho,2),
				ds_hora_12	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[12].qt_perda_ganho,2),
				ds_hora_13	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[13].qt_perda_ganho,2),
				ds_hora_14	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[14].qt_perda_ganho,2),
				ds_hora_15	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[15].qt_perda_ganho,2),
				ds_hora_16	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[16].qt_perda_ganho,2),
				ds_hora_17	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[17].qt_perda_ganho,2),
				ds_hora_18	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[18].qt_perda_ganho,2),
				ds_hora_19	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[19].qt_perda_ganho,2),
				ds_hora_20	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[20].qt_perda_ganho,2),
				ds_hora_21	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[21].qt_perda_ganho,2),
				ds_hora_22	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[22].qt_perda_ganho,2),
				ds_hora_23	= APAP_Campo_Masc_virgula_casas(vt_perda_ganho_w[23].qt_perda_ganho,2),
				qt_total_6h	= round((CASE WHEN qt_total6_w=0 THEN null  ELSE qt_total6_w END )::numeric,2),
				qt_total_12h	= round((CASE WHEN qt_total12h_w=0 THEN null  ELSE qt_total12h_w END )::numeric,2),
				qt_total_18h	= round((CASE WHEN qt_total18h_w=0 THEN null  ELSE qt_total18h_w END )::numeric,2),
				qt_total_24h	= round((CASE WHEN qt_total24h_w=0 THEN null  ELSE qt_total24h_w END )::numeric,2),
				qt_total_geral	= round((CASE WHEN qt_total_perda_ganho_w=0 THEN  null  ELSE qt_total_perda_ganho_w END )::numeric,2),
				ds_unid_med	= CASE WHEN ie_tipo_w='CH' THEN  obter_unid_med_usua('ml')  ELSE null END
			where	nr_sequencia	= nr_seq_grupo_pai_w;
			/* fim Rafael em 12/8/8 */

			commit;
			
			end;

		else
			begin
			ibh	:= 0;
			while(ibh < 24) loop
				begin
				vt_balanco_hidrico_w[ibh].vl_balanco_hidrico	:= null;
				ibh 						:= ibh + 1;
				end;
			end loop;

			qt_min_valor_w		:= null;
			qt_max_valor_w		:= null;
			qt_media_valor_w	:= null;
			qt_media_w		:= null;

			open C07;
			loop
			fetch C07 into
				nr_hora_w,
				dt_medida_w,
				qt_volume_perda_w,
				qt_volume_ganho_w;
			EXIT WHEN NOT FOUND; /* apply on C07 */
				begin
				vl_balanco_hidrico_w					:= (qt_volume_ganho_w - qt_volume_perda_w);
				--vt_balanco_hidrico_w(nr_hora_w).vl_balanco_hidrico	:= trim(to_char(vl_balanco_hidrico_w,'999,999,999'));
				vt_balanco_hidrico_w[nr_hora_w].vl_balanco_hidrico	:= vl_balanco_hidrico_w;

				if (vt_balanco_hidrico_w[nr_hora_w](.vl_balanco_hidrico IS NOT NULL AND .vl_balanco_hidrico::text <> '')) and (vl_balanco_hidrico_w > coalesce(qt_max_valor_w,0)) then
					begin
					qt_max_valor_w	:= vl_balanco_hidrico_w;
					end;
				end if;

				if (vt_balanco_hidrico_w[nr_hora_w](.vl_balanco_hidrico IS NOT NULL AND .vl_balanco_hidrico::text <> '')) and (vl_balanco_hidrico_w < coalesce(qt_min_valor_w,9999999)) then
					begin
					qt_min_valor_w	:= vl_balanco_hidrico_w;
					end;
				end if;

				if (vt_balanco_hidrico_w[nr_hora_w](.vl_balanco_hidrico IS NOT NULL AND .vl_balanco_hidrico::text <> '')) then
					begin
					qt_media_valor_w	:= coalesce(qt_media_valor_w,0) + vl_balanco_hidrico_w;
					qt_media_w		:= coalesce(qt_media_w,0) + 1;
					end;
				end if;
				end;
			end loop;
			close C07;

			if (qt_media_w > 0) then
				begin
				qt_media_valor_w	:= dividir(qt_media_valor_w, qt_media_w);
				end;
			end if;


			begin
			select	count(*)
			into STRICT	qt_registro_w
			from	REGRA_TURNO_GP
			where	cd_estabelecimento	= cd_estabelecimento_w
			and	(ie_turno_apap IS NOT NULL AND ie_turno_apap::text <> '');

			if (qt_registro_w	= 0) then

				qt_total6_w	:= 		coalesce(vt_balanco_hidrico_w[6].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[7].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[8].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[9].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[10].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[11].vl_balanco_hidrico,0);
				qt_total12h_w	:=	coalesce(vt_balanco_hidrico_w[12].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[13].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[14].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[15].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[16].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[17].vl_balanco_hidrico,0);
				qt_total18h_w	:=	coalesce(vt_balanco_hidrico_w[18].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[19].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[20].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[21].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[22].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[23].vl_balanco_hidrico,0);
				qt_total24h_w	:=	coalesce(vt_balanco_hidrico_w[0].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[1].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[2].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[3].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[4].vl_balanco_hidrico,0) +
									coalesce(vt_balanco_hidrico_w[5].vl_balanco_hidrico,0);

			else
				select	ie_total
				into STRICT	ie_total_w
				from	pep_apap_inf
				where	nr_seq_grupo_apap = nr_seq_grupo_w;

				qt_total6_w	:= 0;
				qt_total12h_w	:= 0;
				qt_total18h_w	:= 0;
				qt_total24h_w	:= 0;

				for i in 0..vt_balanco_hidrico_w.Count loop
					begin

					if (i	between 0 and 23) then

						ie_turno_apap_w	:= Obter_Turno_Apap(i);
						if (ie_turno_apap_w	= 1) then
							qt_total6_w	:= qt_total6_w	 + coalesce(vt_balanco_hidrico_w[i].vl_balanco_hidrico,0);
						elsif (ie_turno_apap_w	= 2) then
							qt_total12h_w	:= qt_total12h_w + coalesce(vt_balanco_hidrico_w[i].vl_balanco_hidrico,0);
						elsif (ie_turno_apap_w	= 3) then
							qt_total18h_w	:= qt_total18h_w+ coalesce(vt_balanco_hidrico_w[i].vl_balanco_hidrico,0);
						elsif (ie_turno_apap_w	= 4) then
							qt_total24h_w	:= qt_total24h_w+ coalesce(vt_balanco_hidrico_w[i].vl_balanco_hidrico,0);
						end if;

					end if;
					end;
				end loop;

			end if;

			qt_total_geral_w:=	qt_total6_w + qt_total12h_w + qt_total18h_w + qt_total24h_w;
			exception
				when others then

				qt_total6_w	:= 0;
				qt_total12h_w	:= 0;
				qt_total18h_w	:= 0;
				qt_total24h_w	:= 0;
			end;

			update	w_pep_apap
			set	ds_hora_00	= vt_balanco_hidrico_w[0].vl_balanco_hidrico,
				ds_hora_01	= vt_balanco_hidrico_w[1].vl_balanco_hidrico,
				ds_hora_02	= vt_balanco_hidrico_w[2].vl_balanco_hidrico,
				ds_hora_03	= vt_balanco_hidrico_w[3].vl_balanco_hidrico,
				ds_hora_04	= vt_balanco_hidrico_w[4].vl_balanco_hidrico,
				ds_hora_05	= vt_balanco_hidrico_w[5].vl_balanco_hidrico,
				ds_hora_06	= vt_balanco_hidrico_w[6].vl_balanco_hidrico,
				ds_hora_07	= vt_balanco_hidrico_w[7].vl_balanco_hidrico,
				ds_hora_08	= vt_balanco_hidrico_w[8].vl_balanco_hidrico,
				ds_hora_09	= vt_balanco_hidrico_w[9].vl_balanco_hidrico,
				ds_hora_10	= vt_balanco_hidrico_w[10].vl_balanco_hidrico,
				ds_hora_11	= vt_balanco_hidrico_w[11].vl_balanco_hidrico,
				ds_hora_12	= vt_balanco_hidrico_w[12].vl_balanco_hidrico,
				ds_hora_13	= vt_balanco_hidrico_w[13].vl_balanco_hidrico,
				ds_hora_14	= vt_balanco_hidrico_w[14].vl_balanco_hidrico,
				ds_hora_15	= vt_balanco_hidrico_w[15].vl_balanco_hidrico,
				ds_hora_16	= vt_balanco_hidrico_w[16].vl_balanco_hidrico,
				ds_hora_17	= vt_balanco_hidrico_w[17].vl_balanco_hidrico,
				ds_hora_18	= vt_balanco_hidrico_w[18].vl_balanco_hidrico,
				ds_hora_19	= vt_balanco_hidrico_w[19].vl_balanco_hidrico,
				ds_hora_20	= vt_balanco_hidrico_w[20].vl_balanco_hidrico,
				ds_hora_21	= vt_balanco_hidrico_w[21].vl_balanco_hidrico,
				ds_hora_22	= vt_balanco_hidrico_w[22].vl_balanco_hidrico,
				ds_hora_23	= vt_balanco_hidrico_w[23].vl_balanco_hidrico,
				qt_total_6h	= round((CASE WHEN qt_total6_w=0 THEN null  ELSE qt_total6_w END )::numeric,2),
				qt_total_12h	= round((CASE WHEN qt_total12h_w=0 THEN null  ELSE qt_total12h_w END )::numeric,2),
				qt_total_18h	= round((CASE WHEN qt_total18h_w=0 THEN null  ELSE qt_total18h_w END )::numeric,2),
				qt_total_24h	= round((CASE WHEN qt_total24h_w=0 THEN null  ELSE qt_total24h_w END )::numeric,2),
				qt_total_geral	= CASE WHEN ie_total_w='N' THEN  null  ELSE round((CASE WHEN qt_total_geral_w=0 THEN  null  ELSE qt_total_geral_w END )::numeric,2) END
				where	nr_sequencia	= nr_seq_grupo_pai_w;				
				commit;
				
			end;
		end if;
		end;
	end loop;
	Close C00;
	dt_referencia_w	:= dt_referencia_w + 1;
	end;
end loop;

delete	FROM w_pep_apap
where	nm_usuario		= nm_usuario_p
and	nr_atendimento		= nr_atendimento_p
and	(nr_seq_grupo IS NOT NULL AND nr_seq_grupo::text <> '')
and	coalesce(ie_manter_nulo,'S')	= 'N'
and	coalesce(ds_hora_00::text, '') = ''
and	coalesce(ds_hora_01::text, '') = ''
and	coalesce(ds_hora_02::text, '') = ''
and	coalesce(ds_hora_03::text, '') = ''
and	coalesce(ds_hora_04::text, '') = ''
and	coalesce(ds_hora_05::text, '') = ''
and	coalesce(ds_hora_06::text, '') = ''
and	coalesce(ds_hora_07::text, '') = ''
and	coalesce(ds_hora_08::text, '') = ''
and	coalesce(ds_hora_09::text, '') = ''
and	coalesce(ds_hora_10::text, '') = ''
and	coalesce(ds_hora_11::text, '') = ''
and	coalesce(ds_hora_12::text, '') = ''
and	coalesce(ds_hora_13::text, '') = ''
and	coalesce(ds_hora_14::text, '') = ''
and	coalesce(ds_hora_15::text, '') = ''
and	coalesce(ds_hora_16::text, '') = ''
and	coalesce(ds_hora_17::text, '') = ''
and	coalesce(ds_hora_18::text, '') = ''
and	coalesce(ds_hora_19::text, '') = ''
and	coalesce(ds_hora_20::text, '') = ''
and	coalesce(ds_hora_21::text, '') = ''
and	coalesce(ds_hora_22::text, '') = ''
and	coalesce(ds_hora_23::text, '') = '';

commit;

open C08;
loop
fetch C08 into
	nr_sequencia_w;
EXIT WHEN NOT FOUND; /* apply on C08 */
	begin
	select	count(*)
	into STRICT	qt_registro_w
	from	w_pep_apap
	where	nm_usuario	= nm_usuario_p
	and	nr_atendimento	= nr_atendimento_p
	and	nr_seq_grupo	= nr_sequencia_w;

	if (qt_registro_w = 0) then
		begin
		delete	FROM w_pep_apap
		where	nr_sequencia	= nr_sequencia_w
		and	coalesce(ie_manter_nulo,'S') = 'N';
		commit;
		end;
	end if;
	end;
end loop;
close C08;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_apap ( nr_atendimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nr_seq_apap_p bigint, ie_24_horas_p text, cd_setor_atendimento_p bigint, nm_usuario_p text, ie_rn_p text default 'A', ie_html_p text default 'N', ie_relatorio_p text default 'N') FROM PUBLIC;

