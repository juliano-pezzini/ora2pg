-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_eis_agenda ( dt_parametro_P timestamp, nm_usuario_p text) AS $body$
DECLARE


dt_parametro_fim_w		timestamp;
dt_parametro_w			timestamp;
cd_estabelecimento_w		integer;
cd_convenio_w			integer;
cd_medico_w			varchar(10);
cd_agenda_w			bigint;
cd_tipo_agenda_w		bigint;
ie_status_agenda_w		varchar(03);
hr_inicio_w			smallint;
cd_motivo_canc_w		varchar(03);
qt_min_duracao_w		bigint;
qt_agenda_w			bigint;
ie_carater_cirurgia_w		varchar(01);
CD_SETOR_ATENDIMENTO_W		integer;
nr_sequencia_w			bigint;

expressao1_w	varchar(255) := obter_desc_expressao_idioma(283242, null, wheb_usuario_pck.get_nr_seq_idioma);--Agenda
BEGIN
/*Insert into Log_xxxxTasy values (sysdate, 'Tasy', 601, 'Agenda');
commit;*/
nr_sequencia_w := Gravar_Log_Indicador(141, expressao1_w, clock_timestamp(), PKG_DATE_UTILS.start_of(dt_parametro_P, 'dd', 0), nm_usuario_p, nr_sequencia_w);


dt_parametro_fim_w	:= PKG_DATE_UTILS.ADD_MONTH(PKG_DATE_UTILS.start_of(dt_parametro_p, 'MONTH', 0), 1,0) - (1/86400);
dt_parametro_w		:= PKG_DATE_UTILS.start_of(dt_parametro_p,'month', 0);

delete from eis_agenda
where 	dt_referencia 	between dt_parametro_w and dt_parametro_fim_w
and	cd_tipo_agenda	in (1, 2);

insert into Eis_Agenda(
	dt_referencia,
	cd_estabelecimento,
	cd_tipo_agenda,
	cd_agenda,
	ie_status_agenda,
	hr_inicio,
	cd_motivo_canc,
	cd_medico,
	cd_convenio,
	qt_min_duracao,
	qt_agenda,
	ie_carater_cirurgia,
	cd_setor_atendimento,
	nm_usuario_agenda,
	CD_PROC_PRINC,
	IE_ORIGEM_PROC_PRINC,
	CD_SETOR_EXECUCAO,
	nr_seq_sala,
	nr_seq_classif_agenda,
	ie_tipo_proc_agenda,
	nm_usuario_original,
	nr_seq_proc_interno,
	qt_aguardando,
	qt_consulta,
	ie_lado,
	nr_seq_indicacao,
	qt_atendimento,
	cd_procedencia,
	dt_chegada,
	dt_atendimento,
	dt_atendido,
	dt_em_exame,
	dt_executada,
	dt_agendamento,
	nr_seq_motivo_trans,
	cd_medico_exec,
	ie_tipo_atendimento,
	ie_forma_agendamento,
	nr_seq_motivo_bloqueio,
	dt_inicio_agendamento,
	nm_usuario_confirm,
	cd_pessoa_fisica,
	nm_paciente,
	cd_categoria,
	ie_clinica_pac,
	nr_seq_origem,
	nm_usuario_cancelamento,
	dt_cancelamento,
	dt_confirmacao,
	dt_copia_trans,
	nr_cirurgia,
	ie_autorizacao,
	nr_seq_status_pac)
SELECT
	a.dt_agenda,
	b.cd_estabelecimento,
	b.cd_tipo_agenda,
	a.cd_agenda,
	a.ie_status_agenda,
	PKG_DATE_UTILS.extract_field('HOUR',hr_inicio),
	cd_motivo_cancelamento,
	a.cd_medico,
	a.cd_convenio,
	sum(nr_minuto_duracao),
	count(*),
	a.ie_carater_cirurgia,
	b.cd_setor_exclusivo,
	coalesce(a.nm_usuario, a.nm_usuario_orig),
	a.cd_procedimento,
	a.ie_origem_proced,
	obter_setor_prescr_agenda(a.nr_sequencia),
	a.nr_seq_sala,
	a.nr_seq_classif_agenda,
	'P',
	a.nm_usuario_orig,
	a.nr_seq_proc_interno,
	Obter_Tempo_Espera_Atend(nr_atendimento),
	Obter_Min_Entre_Datas(dt_chegada, coalesce(coalesce(to_date(obter_dados_atendimento(nr_atendimento,'DE'),'dd/mm/yyyy hh24:mi:ss'), 		dt_chegada_fim),clock_timestamp()),null),
	a.ie_lado,
	a.nr_seq_indicacao,
	coalesce(sum(CASE WHEN coalesce(a.nr_atendimento::text, '') = '' THEN  0  ELSE 1 END ),0) qt_atend,
	a.cd_procedencia,
	a.dt_chegada,
	a.dt_atendimento,
	a.dt_atendido,
	a.dt_em_exame,
	a.dt_executada,
	a.hr_inicio,
	a.nr_seq_motivo_transf,
	a.cd_medico_exec,
	a.ie_tipo_atendimento,
	a.ie_forma_agendamento,
	obter_mot_bloq_agenda(b.cd_agenda,a.hr_inicio,obter_cod_dia_semana(a.hr_inicio)),
	a.dt_agendamento,
	a.nm_usuario_confirm,
	a.cd_pessoa_fisica,
	a.nm_paciente,
	a.cd_categoria,
	obter_clinica_pac_agenda(a.hr_inicio,a.cd_pessoa_fisica,'C') ie_clinica_pac,
	coalesce(a.nr_seq_origem,OBTER_ORIGEM_CONV_ATEND(a.nr_atendimento,'C')),
	a.nm_usuario_status,
	a.dt_cancelamento,
	a.dt_confirmacao,
	a.dt_copia_trans,
	a.nr_cirurgia,
	a.ie_autorizacao,
	a.nr_seq_status_pac
from	Agenda b,
	Agenda_paciente a
where  	a.dt_agenda between dt_parametro_w and dt_parametro_fim_w
  and	a.cd_agenda		= b.cd_agenda
  and	(ie_status_agenda IS NOT NULL AND ie_status_agenda::text <> '')
group by b.cd_estabelecimento,
	b.cd_tipo_agenda,
	a.cd_agenda,
	a.ie_status_agenda,
	PKG_DATE_UTILS.extract_field('HOUR',hr_inicio),
	cd_motivo_cancelamento,
	a.cd_medico,
	a.cd_convenio,
	a.ie_carater_cirurgia,
	b.cd_setor_exclusivo,
	coalesce(a.nm_usuario, a.nm_usuario_orig),
	a.cd_procedimento,
	a.ie_origem_proced,
	obter_setor_prescr_agenda(a.nr_sequencia),
	a.nr_seq_sala,
	a.dt_agenda,
	a.nr_seq_classif_agenda,
	a.nm_usuario_orig,
	a.nr_seq_proc_interno,
	Obter_Tempo_Espera_Atend(nr_atendimento),
	Obter_Min_Entre_Datas(dt_chegada, coalesce(coalesce(to_date(obter_dados_atendimento(nr_atendimento,'DE'),'dd/mm/yyyy hh24:mi:ss'), dt_chegada_fim), 				clock_timestamp()), null),
	ie_lado,
	a.nr_seq_indicacao,
	a.dt_chegada,
	a.dt_atendimento,
	a.dt_atendido,
	a.dt_em_exame,
	a.dt_executada,
	a.hr_inicio,
	a.cd_procedencia,
	a.nr_seq_motivo_transf,
	a.cd_medico_exec,
	a.ie_tipo_atendimento,
	a.ie_forma_agendamento,
	obter_mot_bloq_agenda(b.cd_agenda,a.hr_inicio,obter_cod_dia_semana(a.hr_inicio)),
	a.dt_agendamento,
	nm_usuario_confirm,
	a.cd_pessoa_fisica,
	a.nm_paciente,
	a.cd_categoria,
	obter_clinica_pac_agenda(a.hr_inicio,a.cd_pessoa_fisica,'C'),
	a.nr_seq_origem,
	a.nr_atendimento,
	a.nm_usuario_status,
	a.dt_cancelamento,
	a.dt_confirmacao,
	a.dt_copia_trans,
	a.nr_cirurgia,
	a.ie_autorizacao,
	a.nr_seq_status_pac;
	
insert into Eis_Agenda(
	dt_referencia,
	cd_estabelecimento,
	cd_tipo_agenda,
	cd_agenda,
	ie_status_agenda,
	hr_inicio,
	cd_motivo_canc,
	cd_medico,
	cd_convenio,
	qt_min_duracao,
	qt_agenda,
	ie_carater_cirurgia,
	cd_setor_atendimento,
	nm_usuario_agenda,
	CD_PROC_PRINC,
	IE_ORIGEM_PROC_PRINC,
	CD_PROC_ADIC,
	IE_ORIGEM_PROC_ADIC,
	CD_SETOR_EXECUCAO,
	nr_seq_sala,
	nr_seq_classif_agenda,
	ie_tipo_proc_agenda,
	nm_usuario_original,
	nr_seq_proc_interno,
	qt_aguardando,
	qt_consulta,
	ie_lado,
	nr_seq_indicacao,
	qt_atendimento,
	cd_procedencia,
	dt_chegada,
	dt_atendimento,
	dt_atendido,
	dt_em_exame,
	dt_executada,
	dt_agendamento,
	nr_seq_motivo_trans,
	cd_medico_exec,
	ie_tipo_atendimento,
	ie_forma_agendamento,
	nr_seq_motivo_bloqueio,
	dt_inicio_agendamento,
	nm_usuario_confirm,
	cd_pessoa_fisica,
	nm_paciente,
	cd_categoria,
	ie_clinica_pac,
	nr_seq_origem,
	nm_usuario_cancelamento,
	dt_cancelamento,
	dt_confirmacao,
	dt_copia_trans,
	nr_cirurgia,
	ie_autorizacao,
	nr_seq_status_pac)
SELECT
	a.dt_agenda,
	b.cd_estabelecimento,
	b.cd_tipo_agenda,
	a.cd_agenda,
	a.ie_status_agenda,
	PKG_DATE_UTILS.extract_field('HOUR',hr_inicio),
	cd_motivo_cancelamento,
	coalesce(c.cd_medico, a.cd_medico),
	coalesce(c.cd_convenio, a.cd_convenio),
	sum(nr_minuto_duracao),
	0,
	a.ie_carater_cirurgia,
	b.cd_setor_exclusivo,
	coalesce(a.nm_usuario, a.nm_usuario_orig),
	a.cd_procedimento,
	a.ie_origem_proced,
	c.cd_procedimento,
	c.ie_origem_proced,
	obter_setor_prescr_agenda(a.nr_sequencia),
	a.nr_seq_sala,
	a.nr_seq_classif_agenda,
	'A',
	a.nm_usuario_orig,
	c.nr_seq_proc_interno,
	Obter_Tempo_Espera_Atend(a.nr_atendimento),
	Obter_Min_Entre_Datas(dt_chegada, coalesce(coalesce(to_date(obter_dados_atendimento(a.nr_atendimento,'DE'),'dd/mm/yyyy hh24:mi:ss'), dt_chegada_fim), 				clock_timestamp()), null),
	c.ie_lado,
	a.nr_seq_indicacao,
	coalesce(sum(CASE WHEN coalesce(a.nr_atendimento::text, '') = '' THEN  0  ELSE 1 END ),0) qt_atend,
	a.cd_procedencia,
	a.dt_chegada,
	a.dt_atendimento,
	a.dt_atendido,
	a.dt_em_exame,
	a.dt_executada,
	a.hr_inicio,
	a.nr_seq_motivo_transf,
	a.cd_medico_exec,
	a.ie_tipo_atendimento,
	a.ie_forma_agendamento,
	obter_mot_bloq_agenda(b.cd_agenda,a.hr_inicio,obter_cod_dia_semana(a.hr_inicio)),
	a.dt_agendamento,
	a.nm_usuario_confirm,
	a.cd_pessoa_fisica,
	a.nm_paciente,
	a.cd_categoria,
	obter_clinica_pac_agenda(a.hr_inicio,a.cd_pessoa_fisica,'C') ie_clinica_pac,
	coalesce(a.nr_seq_origem,OBTER_ORIGEM_CONV_ATEND(a.nr_atendimento,'C')),
	a.nm_usuario_status,
	a.dt_cancelamento,
	a.dt_confirmacao,
	a.dt_copia_trans,
	a.nr_cirurgia,
	a.ie_autorizacao,
	a.nr_seq_status_pac
from	Agenda b,
	agenda_paciente_proc c,
	Agenda_paciente a
where  	a.dt_agenda between dt_parametro_w and dt_parametro_fim_w
  and	a.cd_agenda		= b.cd_agenda
  and	(ie_status_agenda IS NOT NULL AND ie_status_agenda::text <> '')
  and	a.nr_sequencia		= c.nr_sequencia
group by b.cd_estabelecimento,
	b.cd_tipo_agenda,
	a.cd_agenda,
	a.ie_status_agenda,
	PKG_DATE_UTILS.extract_field('HOUR', hr_inicio),
	cd_motivo_cancelamento,
	coalesce(c.cd_medico, a.cd_medico),
	coalesce(c.cd_convenio, a.cd_convenio),
	a.ie_carater_cirurgia,
	b.cd_setor_exclusivo,
	coalesce(a.nm_usuario, a.nm_usuario_orig),
	a.cd_procedimento,
	a.ie_origem_proced,
	c.cd_procedimento,
	c.ie_origem_proced,
	obter_setor_prescr_agenda(a.nr_sequencia),
	a.nr_seq_sala,
	a.dt_agenda,
	a.nr_seq_classif_agenda,
	a.nm_usuario_orig,
	c.nr_seq_proc_interno,
	Obter_Tempo_Espera_Atend(a.nr_atendimento),
	Obter_Min_Entre_Datas(dt_chegada, coalesce(coalesce(to_date(obter_dados_atendimento(a.nr_atendimento,'DE'),'dd/mm/yyyy hh24:mi:ss'), dt_chegada_fim), 				clock_timestamp()), null),
	c.ie_lado,
	a.nr_seq_indicacao,
	a.dt_chegada,
	a.dt_atendimento,
	a.dt_atendido,
	a.dt_em_exame,
	a.dt_executada,
	a.hr_inicio,
	a.cd_procedencia,
	a.nr_seq_motivo_transf,
	a.cd_medico_exec,
	a.ie_tipo_atendimento,
	a.ie_forma_agendamento,
	obter_mot_bloq_agenda(b.cd_agenda,a.hr_inicio,obter_cod_dia_semana(a.hr_inicio)),
	a.dt_agendamento,
	a.nm_usuario_confirm,
	a.cd_pessoa_fisica,
	a.nm_paciente,
	a.cd_categoria,
	obter_clinica_pac_agenda(a.hr_inicio,a.cd_pessoa_fisica,'C'),
	a.nr_seq_origem,
	a.nr_atendimento,
	a.nm_usuario_status,
	a.dt_cancelamento,
	a.dt_confirmacao,
	a.dt_copia_trans,
	a.nr_cirurgia,
	a.ie_autorizacao,
	a.nr_seq_status_pac;

/*Insert into Log_xxxTasy values (sysdate, 'Tasy', 602, 'Agenda');*/

CALL Atualizar_Log_Indicador(clock_timestamp(), nr_sequencia_w);

CALL Gerar_Eis_Agenda_Cons(dt_parametro_p, nm_usuario_p);

COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_eis_agenda ( dt_parametro_P timestamp, nm_usuario_p text) FROM PUBLIC;

