-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerencia_inicio_tb_tm ( ie_cria_job_p text default 'S') AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Tratar para que a população inicial dos registros seja feita para as tabelas TM.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Alterações:
------------------------------------------------------------------------------------------------------------------
dlehmkuhl - OS 732546 - 15/05/2014 - Criação da procedure.
------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qt_registro_w	integer;
jobno 		bigint;
nr_max_reg_w	bigint;


BEGIN

select	count(1)
into STRICT	qt_registro_w
from 	pls_outorgante;

-- executa somente se for uma operadora de plano de saúde
if (qt_registro_w > 0) then

	-----------------------------------------------------------------------------------------------------------------------------------------------------
	-- início tratamento tabela PLS_COMBINACAO_ITEM_TM utilizada para validar simultâneos e concorrentes (validação 32)
	select	max(nr_sequencia)
	into STRICT	nr_max_reg_w
	from	pls_combinacao_item_cta;

	-- se tem regras na tabela de simultâneo e concorrente verifica se a tabela TM tem algum registro
	if (qt_registro_w > 0) then

		select	max(nr_sequencia)
		into STRICT	nr_max_reg_w
		from	pls_combinacao_item_tm;

		-- se existem regras e a tabela não possui registro, marca a mesma para ser atualizada
		if (qt_registro_w = 0) then
			CALL pls_gerencia_upd_obj_pck.marcar_para_atualizacao(	'PLS_COMBINACAO_ITEM_TM',
										coalesce(wheb_usuario_pck.get_nm_usuario, 'versao'),
										'PLS_GERENCIA_INICIO_TB_TM');
			commit;
		end if;
	end if;
	-- fim tratamento tabela PLS_COMBINACAO_ITEM_TM utilizada para validar simultâneos e concorrentes (validação 32)
	--------------------------------------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------------------------------------
	-- início tratamento tabela PLS_ESTRUTURA_MATERIAL_TM utilizada para validar materiais habilitados para o prestador (validação 30)
	select	max(nr_sequencia)
	into STRICT	nr_max_reg_w
	from	pls_estrutura_material;

	-- se tem regras na tabela de estrutura verifica se a tabela TM tem algum registro
	if (qt_registro_w > 0) then

		select	max(nr_sequencia)
		into STRICT	nr_max_reg_w
		from	pls_estrutura_material_tm;

		-- se existem regras e a tabela não possui registro, marca a mesma para ser atualizada
		if (qt_registro_w = 0) then
			CALL pls_gerencia_upd_obj_pck.marcar_para_atualizacao(	'PLS_ESTRUTURA_MATERIAL_TM',
										coalesce(wheb_usuario_pck.get_nm_usuario, 'versao'),
										'PLS_GERENCIA_INICIO_TB_TM');
			commit;

			-- verifica se é para criar a JOB, feito isso pois essa procedure irá ser chamada na atualização de versão (cria job) e consistência da conta (não cria)
			if (ie_cria_job_p = 'S') then

				select	count(1)
				into STRICT	qt_registro_w
				from	job_v
				where 	comando like '%PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS%';

				if (qt_registro_w = 0) then
					begin
						-- configura um job para atualizar depois de 30 minutos
						-- esse processo é feito via job pelo motivo que essa atualização pode demorar uns 10 minutos
						-- esse é um job que roda apenas uma vez, se apagando depois da primeira execução
						DBMS_JOB.SUBMIT(JOBNO,
								'PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS(''Tasy'', ''PLS_GERENCIA_INICIO_TB_TM'', ''PLS_ESTRUTURA_MATERIAL_TM'');',
								clock_timestamp() + interval '1 days'/48);
						commit;
					exception
					when others then
						null;
					end;
				end if;
			end if;
		end if;
	end if;
	-- fim tratamento tabela PLS_ESTRUTURA_MATERIAL_TM utilizada para validar materiais habilitados para o prestador (validação 30)
	--------------------------------------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------------------------------------
	-- início tratamento tabela PLS_GRUPO_SERVICO_TM utilizada para ter a relação entre grupo de serviço e seus respectivos procedimentos
	select	max(nr_seq_grupo_servico)
	into STRICT	nr_max_reg_w
	from	pls_grupo_servico_tm;

	-- se existem regras e a tabela não possui registro, marca a mesma para ser atualizada
	if (qt_registro_w = 0) then
		CALL pls_gerencia_upd_obj_pck.marcar_para_atualizacao(	'PLS_GRUPO_SERVICO_TM',
									coalesce(wheb_usuario_pck.get_nm_usuario, 'versao'),
									'PLS_GERENCIA_INICIO_TB_TM');
		commit;

		-- verifica se é para criar a JOB, feito isso pois essa procedure irá ser chamada na atualização de versão (cria job) e consistência da conta (não cria)
		if (ie_cria_job_p = 'S') then

			select	count(1)
			into STRICT	qt_registro_w
			from	job_v
			where 	comando like '%PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS%';

			if (qt_registro_w = 0) then
				begin
					-- configura um job para atualizar depois de 31 minutos
					-- esse processo é feito via job pelo motivo que essa atualização pode demorar uns 10 minutos
					-- esse é um job que roda apenas uma vez, se apagando depois da primeira execução
					DBMS_JOB.SUBMIT(JOBNO,
							'PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS(''Tasy'', ''PLS_GERENCIA_INICIO_TB_TM'', ''PLS_GRUPO_SERVICO_TM'');',
							clock_timestamp() + interval '1 days'/46);
					commit;
				exception
				when others then
					null;
				end;
			end if;
		end if;
	end if;

	-- fim tratamento tabela PLS_GRUPO_SERVICO_TM utilizada para ter a relação entre grupo de serviço e seus respectivos procedimentos
	--------------------------------------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------------------------------------
	-- início tratamento tabela PLS_ESTRUTURA_OCOR_TM
	select	max(nr_sequencia)
	into STRICT	nr_max_reg_w
	from	pls_estrutura_ocor_tm;

	-- se existem regras e a tabela não possui registro, marca a mesma para ser atualizada
	if (qt_registro_w = 0) then
		CALL pls_gerencia_upd_obj_pck.marcar_para_atualizacao(	'PLS_ESTRUTURA_OCOR_TM',
									coalesce(wheb_usuario_pck.get_nm_usuario, 'versao'),
									'PLS_GERENCIA_INICIO_TB_TM');
		commit;

		-- verifica se é para criar a JOB, feito isso pois essa procedure irá ser chamada na atualização de versão (cria job) e consistência da conta (não cria)
		if (ie_cria_job_p = 'S') then

			select	count(1)
			into STRICT	qt_registro_w
			from	job_v
			where 	comando like '%PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS%';

			if (qt_registro_w = 0) then
				begin
					-- configura um job para atualizar depois de 31 minutos
					-- esse processo é feito via job pelo motivo que essa atualização pode demorar uns 10 minutos
					-- esse é um job que roda apenas uma vez, se apagando depois da primeira execução
					DBMS_JOB.SUBMIT(JOBNO,
							'PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS(''Tasy'', ''PLS_GERENCIA_INICIO_TB_TM'', ''PLS_ESTRUTURA_OCOR_TM'');',
							clock_timestamp() + interval '1 days'/46);
					commit;
				exception
				when others then
					null;
				end;
			end if;
		end if;
	end if;

	-- fim tratamento tabela PLS_ESTRUTURA_OCOR_TM
	--------------------------------------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------------------------------------
	-- início tratamento tabela PLS_GRUPO_PARTIC_TM
	select	max(nr_sequencia)
	into STRICT	nr_max_reg_w
	from	pls_grupo_partic_tm;

	-- se existem regras e a tabela não possui registro, marca a mesma para ser atualizada
	if (qt_registro_w = 0) then
		CALL pls_gerencia_upd_obj_pck.marcar_para_atualizacao(	'PLS_GRUPO_PARTIC_TM',
									coalesce(wheb_usuario_pck.get_nm_usuario, 'versao'),
									'PLS_GERENCIA_INICIO_TB_TM');
		commit;

		-- verifica se é para criar a JOB, feito isso pois essa procedure irá ser chamada na atualização de versão (cria job) e consistência da conta (não cria)
		if (ie_cria_job_p = 'S') then

			select	count(1)
			into STRICT	qt_registro_w
			from	job_v
			where 	comando like '%PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS%';

			if (qt_registro_w = 0) then
				begin
					-- configura um job para atualizar depois de 31 minutos
					-- esse processo é feito via job pelo motivo que essa atualização pode demorar uns 10 minutos
					-- esse é um job que roda apenas uma vez, se apagando depois da primeira execução
					DBMS_JOB.SUBMIT(JOBNO,
							'PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS(''Tasy'', ''PLS_GERENCIA_INICIO_TB_TM'', ''PLS_GRUPO_PARTIC_TM'');',
							clock_timestamp() + interval '1 days'/50);
					commit;
				exception
				when others then
					null;
				end;
			end if;
		end if;
	end if;

	-- fim tratamento tabela PLS_GRUPO_PARTIC_TM
	--------------------------------------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------------------------------------
	-- início tratamento tabela PLS_GRUPO_MATERIAL_TM
	select	max(nr_sequencia)
	into STRICT	nr_max_reg_w
	from	pls_grupo_material_tm;

	-- se existem regras e a tabela não possui registro, marca a mesma para ser atualizada
	if (qt_registro_w = 0) then
		CALL pls_gerencia_upd_obj_pck.marcar_para_atualizacao(	'PLS_GRUPO_MATERIAL_TM',
									coalesce(wheb_usuario_pck.get_nm_usuario, 'versao'),
									'PLS_GERENCIA_INICIO_TB_TM');
		commit;

		-- verifica se é para criar a JOB, feito isso pois essa procedure irá ser chamada na atualização de versão (cria job) e consistência da conta (não cria)
		if (ie_cria_job_p = 'S') then

			select	count(1)
			into STRICT	qt_registro_w
			from	job_v
			where 	comando like '%PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS%';

			if (qt_registro_w = 0) then
				begin
					-- configura um job para atualizar depois de 50 minutos
					-- esse processo é feito via job pelo motivo que essa atualização pode demorar uns 10 minutos
					-- esse é um job que roda apenas uma vez, se apagando depois da primeira execução
					DBMS_JOB.SUBMIT(JOBNO,
							'PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS(''Tasy'', ''PLS_GERENCIA_INICIO_TB_TM'', ''PLS_GRUPO_MATERIAL_TM'');',
							clock_timestamp() + interval '3024 seconds');
					commit;
				exception
				when others then
					null;
				end;
			end if;
		end if;
	end if;

	-- fim tratamento tabela PLS_GRUPO_MATERIAL_TM
	--------------------------------------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------------------------------------
	-- início tratamento tabela PLS_PRESTADOR_MAT_TM
	select	max(nr_sequencia)
	into STRICT	nr_max_reg_w
	from	pls_prestador_mat_tm;

	-- se existem regras e a tabela não possui registro, marca a mesma para ser atualizada
	if (qt_registro_w = 0) then
		CALL pls_gerencia_upd_obj_pck.marcar_para_atualizacao(	'PLS_PRESTADOR_MAT_TM',
									coalesce(wheb_usuario_pck.get_nm_usuario, 'versao'),
									'PLS_GERENCIA_INICIO_TB_TM');
		commit;

		-- verifica se é para criar a JOB, feito isso pois essa procedure irá ser chamada na atualização de versão (cria job) e consistência da conta (não cria)
		if (ie_cria_job_p = 'S') then

			select	count(1)
			into STRICT	qt_registro_w
			from	job_v
			where 	comando like '%PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS%';

			if (qt_registro_w = 0) then
				begin
					-- configura um job para atualizar depois de 60 minutos
					-- esse processo é feito via job pelo motivo que essa atualização pode demorar uns 10 minutos
					-- esse é um job que roda apenas uma vez, se apagando depois da primeira execução
					DBMS_JOB.SUBMIT(JOBNO,
							'PLS_GERENCIA_UPD_OBJ_PCK.ATUALIZAR_OBJETOS(''Tasy'', ''PLS_GERENCIA_INICIO_TB_TM'', ''PLS_PRESTADOR_MAT_TM'');',
							clock_timestamp() + interval '3628 seconds');
					commit;
				exception
				when others then
					null;
				end;
			end if;
		end if;
	end if;

	-- fim tratamento tabela PLS_PRESTADOR_MAT_TM
	--------------------------------------------------------------------------------------------------------------------------------------------------
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerencia_inicio_tb_tm ( ie_cria_job_p text default 'S') FROM PUBLIC;

