-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_titulo_receber_cobr ( nr_seq_cobranca_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
vl_titulo_w			double precision;
nr_seq_empresa_w		bigint;
nr_seq_conta_banco_w		bigint;
cd_cgc_w			varchar(14);
ds_razao_social_w		varchar(255);
ds_observacao_w			varchar(255);
cd_tipo_taxa_juros_w		bigint;
tx_juros_w			double precision;
cd_tipo_taxa_multa_w		bigint;
tx_multa_w			double precision;
cd_tipo_portador_w		integer;
cd_portador_w			integer;
cd_tipo_taxa_juro_par_w		bigint;
cd_tipo_taxa_multa_par_w	bigint;
pr_juro_padrao_par_w		double precision;
pr_multa_padrao_par_w		double precision;
cd_moeda_w			integer;
dt_vencimento_w			timestamp;
nr_titulo_w			bigint	:= null;
-------------------------------------------------------------------------------- 
ie_gerar_nota_fiscal_w		pls_desc_empresa.ie_gerar_nota_fiscal%type;
ie_gerar_titulo_receber_w	pls_desc_empresa.ie_gerar_titulo_receber%type;
cd_condicao_pagamento_w		pls_parametros.cd_condicao_pagamento%type;
cd_operacao_nf_w		pls_parametros.cd_operacao_nf%type;
cd_natureza_operacao_w		pls_parametros.cd_operacao_nf%type;
nr_seq_classif_fiscal_w		pls_parametros.nr_seq_classif_fiscal%type;
cd_serie_nf_w			pls_parametros.cd_serie_nf%type;
nr_sequencia_w			nota_fiscal.nr_sequencia%type	:= null;
nr_nota_fiscal_w		nota_fiscal.nr_nota_fiscal%type;
ie_tipo_item_w			varchar(3);
vl_item_mens_w			double precision;
cd_procedimento_w		bigint	:= null;
ie_origem_proced_w		bigint	:= null;
cd_conta_debito_w		varchar(20);
cd_conta_financ_item_w		bigint;
nr_seq_tipo_lanc_w		bigint;
cd_material_w			varchar(6)	:= null;
nr_item_nf_w			integer;
ie_forma_pagamento_w		smallint;
ds_condicao_pagamento_w		condicao_pagamento.ds_condicao_pagamento%type;
vl_liquido_nota_w		double precision;
ie_gerou_parcelas_nota_fisc_w	bigint;
qt_nota_fiscal_w		bigint;
nr_sequencia_nf_ww		smallint;
cd_conta_financ_w		bigint;
ie_estab_serie_nf_w		parametro_compras.ie_estab_serie_nf%type;
cd_cgc_emitente_w		estabelecimento.cd_cgc%type;
nr_seq_grupo_item_w		pls_grupo_item_mens.nr_sequencia%type;
nr_item_nf_ww			integer;
vl_unitario_item_nf_w		nota_fiscal_item.vl_unitario_item_nf%type;

c01 CURSOR FOR 
	SELECT	a.ie_tipo_item, 
		(null)::numeric  nr_seq_tipo_lanc, 
		sum(vl_item), 
		a.cd_conta_deb, 
		a.cd_conta_financ 
	from	pls_mensalidade_seg_item	a, 
		pls_mensalidade_segurado	b, 
		pls_mensalidade			c, 
		titulo_receber_cobr		d 
	where	a.nr_seq_mensalidade_seg	= b.nr_sequencia 
	and	b.nr_seq_mensalidade		= c.nr_sequencia 
	and	d.nr_seq_mensalidade		= c.nr_sequencia 
	and	d.nr_seq_cobranca		= nr_seq_cobranca_p 
	group by 
		a.ie_tipo_item, 
		a.cd_conta_deb, 
		a.cd_conta_financ 
	
union all
 
	SELECT	to_char(null) ie_tipo_item, 
		a.nr_seq_tipo_lanc, 
		sum(vl_adicional), 
		null cd_conta_debito, 
		null cd_conta_financ 
	from	pls_mensalidade_seg_adic	a, 
		pls_mensalidade_segurado	b, 
		pls_mensalidade			c, 
		titulo_receber_cobr		d 
	where	a.nr_seq_mensalidade_seg	= b.nr_sequencia 
	and	b.nr_seq_mensalidade		= c.nr_sequencia 
	and	d.nr_seq_mensalidade		= c.nr_sequencia 
	and	d.nr_seq_cobranca		= nr_seq_cobranca_p 
	group by 
		a.nr_seq_tipo_lanc;

C02 CURSOR FOR 
	SELECT	sum(vl_item) vl_item, 
		count(1) qt_item, 
		nr_seq_grupo_item, 
		cd_procedimento, 
		cd_material, 
		ie_origem_proced 
	from (SELECT	a.vl_item vl_item, 
			f.nr_sequencia nr_seq_grupo_item, 
			g.cd_procedimento, 
			g.cd_material, 
			g.ie_origem_proced 
		from 	pls_mensalidade_seg_item a, 
			pls_mensalidade_segurado b, 
			pls_mensalidade     c, 
			titulo_receber_cobr   d, 
			pls_item_grupo_tipo_mens e, 
			pls_grupo_item_mens   f, 
			pls_tipo_item_mens    g 
		where 	a.nr_seq_mensalidade_seg = b.nr_sequencia 
		and 	b.nr_seq_mensalidade 	= c.nr_sequencia 
		and 	d.nr_seq_mensalidade 	= c.nr_sequencia 
		and 	e.ie_tipo_item    	= a.ie_tipo_item 
		and 	f.nr_sequencia    	= e.nr_seq_grupo_item 
		and 	f.nr_sequencia    	= g.nr_seq_grupo_item 
		and	a.ie_tipo_item 		<> 20 
		and 	d.nr_seq_cobranca 	= nr_seq_cobranca_p 
		
union all
 
		select	a.vl_item vl_item, 
			f.nr_sequencia nr_seq_grupo_item, 
			g.cd_procedimento, 
			g.cd_material, 
			g.ie_origem_proced 
		from 	pls_mensalidade_seg_item a, 
			pls_mensalidade_segurado b, 
			pls_mensalidade     c, 
			titulo_receber_cobr   d, 
			pls_item_grupo_tipo_mens e, 
			pls_grupo_item_mens   f, 
			pls_tipo_item_mens    g 
		where 	a.nr_seq_mensalidade_seg = b.nr_sequencia 
		and 	b.nr_seq_mensalidade 	= c.nr_sequencia 
		and 	d.nr_seq_mensalidade 	= c.nr_sequencia 
		and 	e.ie_tipo_item    	= a.ie_tipo_item 
		and 	f.nr_sequencia    	= e.nr_seq_grupo_item 
		and 	f.nr_sequencia    	= g.nr_seq_grupo_item 
		and	a.ie_tipo_item 		= 20 
		and  	a.nr_seq_tipo_lanc 	= e.nr_seq_tipo_lanc 
		and 	d.nr_seq_cobranca 	= nr_seq_cobranca_p 
		
union all
 
		select	a.vl_item vl_item, 
			f.nr_sequencia nr_seq_grupo_item, 
			g.cd_procedimento, 
			g.cd_material, 
			g.ie_origem_proced 
		from 	pls_mensalidade_seg_item a, 
			pls_mensalidade_segurado b, 
			pls_mensalidade     c, 
			titulo_receber_cobr   d, 
			pls_item_grupo_tipo_mens e, 
			pls_grupo_item_mens   f, 
			pls_tipo_item_mens    g 
		where 	a.nr_seq_mensalidade_seg = b.nr_sequencia 
		and 	b.nr_seq_mensalidade 	= c.nr_sequencia 
		and 	d.nr_seq_mensalidade 	= c.nr_sequencia 
		and 	e.ie_tipo_item    	= a.ie_tipo_item 
		and 	f.nr_sequencia    	= e.nr_seq_grupo_item 
		and 	f.nr_sequencia    	= g.nr_seq_grupo_item 
		and	a.ie_tipo_item 		= 20 
		and	coalesce(e.nr_seq_tipo_lanc::text, '') = '' 
		and	not exists (	select 1 
					from  pls_mensalidade_seg_item x, 
						pls_item_grupo_tipo_mens y 
					where  x.ie_tipo_item 	= y.ie_tipo_item 
					and   x.nr_sequencia 	= a.nr_sequencia 
					and   x.nr_seq_tipo_lanc = y.nr_seq_tipo_lanc) 
		and 	d.nr_seq_cobranca 	= nr_seq_cobranca_p) alias4 
	group by 
		nr_seq_grupo_item, 
		cd_procedimento, 
		cd_material, 
		ie_origem_proced;
		
BEGIN 
 
/* obter se será considerado estabelecimento no parâmetro de compras */
 
select	coalesce(max(ie_estab_serie_nf),'N') 
into STRICT	ie_estab_serie_nf_w 
from	parametro_compras 
where	cd_estabelecimento = cd_estabelecimento_p;
 
select	max(cd_cgc) 
into STRICT	cd_cgc_emitente_w 
from	estabelecimento 
where	cd_estabelecimento = cd_estabelecimento_p;
 
select	sum(b.vl_titulo) 
into STRICT	vl_titulo_w 
from	titulo_receber		b, 
	titulo_receber_cobr	a 
where	a.nr_titulo		= b.nr_titulo 
and	a.nr_seq_cobranca	= nr_seq_cobranca_p;
 
select	nr_seq_empresa, 
	nr_seq_conta_banco 
into STRICT	nr_seq_empresa_w, 
	nr_seq_conta_banco_w 
from	cobranca_escritural 
where	nr_sequencia = nr_seq_cobranca_p;
 
select	cd_cgc, 
	substr(obter_razao_social(cd_cgc),1,255), 
	coalesce(ie_gerar_nota_fiscal,'N'), 
	coalesce(ie_gerar_titulo_receber,'N') 
into STRICT	cd_cgc_w, 
	ds_razao_social_w, 
	ie_gerar_nota_fiscal_w, 
	ie_gerar_titulo_receber_w 
from	pls_desc_empresa 
where	nr_sequencia = nr_seq_empresa_w;
 
begin 
select	cd_tipo_taxa_juro, 
	pr_juro_padrao, 
	cd_tipo_taxa_multa, 
	pr_multa_padrao, 
	cd_condicao_pagamento, 
	cd_operacao_nf, 
	cd_natureza_operacao, 
	nr_seq_classif_fiscal, 
	cd_serie_nf 
into STRICT	cd_tipo_taxa_juros_w, 
	tx_juros_w, 
	cd_tipo_taxa_multa_w, 
	tx_multa_w, 
	cd_condicao_pagamento_w, 
	cd_operacao_nf_w, 
	cd_natureza_operacao_w, 
	nr_seq_classif_fiscal_w, 
	cd_serie_nf_w 
from	pls_parametros 
where	cd_estabelecimento = cd_estabelecimento_p;
exception 
when others then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(204704, null);
	/* Mensagem: Cadastro de juros e multa não informados nos parâmetros do Plano de Saúde! */
 
end;
 
select	trunc(add_months(clock_timestamp(),1),'month') 
into STRICT	dt_vencimento_w
;
 
if (ie_gerar_nota_fiscal_w = 'N') and (ie_gerar_titulo_receber_w = 'S') then 
	ds_observacao_w := 'Título gerado para a cobrança escritural '||nr_seq_cobranca_p|| ' para a empresa '||ds_razao_social_w;
	 
	select	cd_tipo_portador, 
		cd_portador, 
		cd_tipo_taxa_juro, 
		cd_tipo_taxa_multa, 
		pr_juro_padrao, 
		pr_multa_padrao 
	into STRICT	cd_tipo_portador_w, 
		cd_portador_w, 
		cd_tipo_taxa_juro_par_w, 
		cd_tipo_taxa_multa_par_w, 
		pr_juro_padrao_par_w, 
		pr_multa_padrao_par_w 
	from	parametro_contas_receber 
	where	cd_estabelecimento	= cd_estabelecimento_p;
	 
	select	obter_moeda_padrao(cd_estabelecimento_p,'R') 
	into STRICT	cd_moeda_w 
	;
	 
	select	nextval('titulo_seq') 
	into STRICT	nr_titulo_w 
	;
	 
	insert	into	titulo_receber(	nr_titulo, cd_pessoa_fisica, cd_cgc, dt_atualizacao, nm_usuario, cd_estabelecimento, 
				dt_emissao, dt_vencimento, dt_pagamento_previsto, vl_titulo, vl_saldo_titulo, 
				vl_saldo_juros, vl_saldo_multa, cd_tipo_taxa_juro, cd_tipo_taxa_multa, 
				cd_moeda, tx_desc_antecipacao, tx_juros, tx_multa, cd_tipo_portador, 
				cd_portador, ie_tipo_inclusao, ie_tipo_titulo, ie_origem_titulo, ie_tipo_emissao_titulo, 
				ie_situacao, nr_lote_contabil, nr_seq_mensalidade, nr_seq_mens_segurado, nr_seq_conta_banco, 
				ie_pls, ds_observacao_titulo, nm_usuario_orig, dt_inclusao) 
		values (	nr_titulo_w, null, cd_cgc_w, clock_timestamp(), nm_usuario_p, cd_estabelecimento_p, 
				clock_timestamp(), dt_vencimento_w, dt_vencimento_w, vl_titulo_w, vl_titulo_w, 
				0, 0, coalesce(cd_tipo_taxa_juros_w,cd_tipo_taxa_juro_par_w), coalesce(cd_tipo_taxa_multa_w,cd_tipo_taxa_multa_par_w), 
				cd_moeda_w, 0, coalesce(tx_juros_w,pr_juro_padrao_par_w), coalesce(tx_multa_w,pr_multa_padrao_par_w), cd_tipo_portador_w, 
				cd_portador_w, '2', '1', 9, 2, 
				'1', 0, null, null, nr_seq_conta_banco_w, 
				'S', ds_observacao_w, nm_usuario_p, clock_timestamp());
elsif (ie_gerar_nota_fiscal_w = 'S') then 
	select	nextval('nota_fiscal_seq') 
	into STRICT	nr_sequencia_w 
	;
	 
	nr_nota_fiscal_w	:= nr_sequencia_w + 800000;
	 
	if (coalesce(cd_condicao_pagamento_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(191590);
	else 
		insert	into	nota_fiscal(	nr_sequencia,cd_estabelecimento,cd_cgc_emitente,cd_serie_nf, 
				nr_nota_fiscal,nr_sequencia_nf,cd_operacao_nf,dt_emissao, 
				dt_entrada_saida,ie_acao_nf,ie_emissao_nf,ie_tipo_frete,vl_mercadoria, 
				vl_total_nota,qt_peso_bruto,qt_peso_liquido,dt_atualizacao, 
				nm_usuario,ie_tipo_nota,cd_condicao_pagamento,cd_natureza_operacao,nr_seq_classif_fiscal, 
				ds_observacao,vl_ipi,vl_descontos,vl_frete,vl_seguro, 
				vl_despesa_acessoria,cd_pessoa_fisica,cd_cgc, 
				ie_situacao,nr_lote_contabil,ie_entregue_bloqueto) 
		values (	nr_sequencia_w,cd_estabelecimento_p,obter_cgc_estabelecimento(cd_estabelecimento_p),cd_serie_nf_w, 
				nr_nota_fiscal_w,1,cd_operacao_nf_w,clock_timestamp(), 
				clock_timestamp(),'1','0','0',vl_titulo_w, 
				vl_titulo_w,0,0,clock_timestamp(), 
				nm_usuario_p,'SE',cd_condicao_pagamento_w,cd_natureza_operacao_w,nr_seq_classif_fiscal_w, 
				'',0,0,0,0, 
				0,'',cd_cgc_w, 
				'1',0,'N');
	end if;
	 
	open c01;
	loop 
	fetch c01 into 
		ie_tipo_item_w, 
		nr_seq_tipo_lanc_w, 
		vl_item_mens_w, 
		cd_conta_debito_w, 
		cd_conta_financ_item_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		if (coalesce(cd_conta_financ_item_w::text, '') = '') then 
			cd_conta_financ_w := pls_obter_conta_financ_regra(	'M', null, cd_estabelecimento_p, ie_tipo_item_w, nr_seq_tipo_lanc_w, null, null, null, null, null, null, null, null, null, null, null, null, cd_conta_financ_w);
		else 
			cd_conta_financ_w	:= cd_conta_financ_item_w;
		end if;
		 
		SELECT * FROM pls_obter_tipo_item_nf_mens(	ie_tipo_item_w, nr_seq_tipo_lanc_w, cd_estabelecimento_p, cd_procedimento_w, ie_origem_proced_w, cd_material_w, nr_seq_grupo_item_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w, cd_material_w, nr_seq_grupo_item_w;
		 
		if	((coalesce(cd_procedimento_w::text, '') = '') or (coalesce(ie_origem_proced_w::text, '') = '')) and (coalesce(cd_material_w::text, '') = '') and (coalesce(nr_seq_grupo_item_w::text, '') = '') then 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(191593,'DS_ITEM='||coalesce(substr(obter_valor_dominio(1930,ie_tipo_item_w),1,100), 
				substr(obter_descricao_padrao('PLS_TIPO_LANC_ADIC','DS_TIPO_LANCAMENTO',nr_seq_tipo_lanc_w),1,100)));
		end if;
		 
		if (coalesce(nr_seq_grupo_item_w::text, '') = '') then 
			select	coalesce(max(nr_item_nf),0) + 1 
			into STRICT	nr_item_nf_w 
			from	nota_fiscal_item 
			where	nr_sequencia	= nr_sequencia_w;
			 
			insert	into	nota_fiscal_item(	nr_sequencia,cd_estabelecimento,cd_cgc_emitente,cd_serie_nf,nr_nota_fiscal, 
					nr_sequencia_nf,nr_item_nf,cd_natureza_operacao,qt_item_nf,vl_unitario_item_nf, 
					vl_total_item_nf,vl_liquido,vl_frete,vl_desconto,vl_despesa_acessoria, 
					vl_desconto_rateio,vl_seguro,nm_usuario,dt_atualizacao,ds_complemento, 
					cd_procedimento,ie_origem_proced,nr_seq_conta_financ,cd_conta_contabil,cd_material) 
			values (	nr_sequencia_w,cd_estabelecimento_p,obter_cgc_estabelecimento(cd_estabelecimento_p),cd_serie_nf_w,nr_nota_fiscal_w, 
					1,nr_item_nf_w,cd_natureza_operacao_w,1,vl_item_mens_w, 
					vl_item_mens_w,vl_item_mens_w,0,0,0, 
					0,0,nm_usuario_p,clock_timestamp(),'', 
					cd_procedimento_w,ie_origem_proced_w,CASE WHEN cd_conta_financ_w=0 THEN null  ELSE cd_conta_financ_w END ,cd_conta_debito_w,cd_material_w);
		end if;
	end loop;
	close c01;
	 
	for r_c02_w in c02 loop 
		begin 
		select	coalesce(max(nr_item_nf),0) + 1 
		into STRICT	nr_item_nf_ww 
		from	nota_fiscal_item 
		where	nr_sequencia	= nr_sequencia_w;
		 
		begin 
		vl_unitario_item_nf_w := r_c02_w.vl_item / r_c02_w.qt_item;
		exception 
		when others then 
			vl_unitario_item_nf_w := 0;	
		end;
		 
		insert	into	nota_fiscal_item(	nr_sequencia,cd_estabelecimento,cd_cgc_emitente,cd_serie_nf,nr_nota_fiscal, 
				nr_sequencia_nf,nr_item_nf,cd_natureza_operacao,qt_item_nf,vl_unitario_item_nf, 
				vl_total_item_nf,vl_liquido,vl_frete,vl_desconto,vl_despesa_acessoria, 
				vl_desconto_rateio,vl_seguro,nm_usuario,dt_atualizacao,ds_complemento, 
				cd_procedimento,ie_origem_proced,nr_seq_conta_financ,cd_conta_contabil,cd_material) 
		values (	nr_sequencia_w,cd_estabelecimento_p,obter_cgc_estabelecimento(cd_estabelecimento_p),cd_serie_nf_w,nr_nota_fiscal_w, 
				1,nr_item_nf_ww,cd_natureza_operacao_w,r_c02_w.qt_item,coalesce(vl_unitario_item_nf_w,0), 
				r_c02_w.vl_item,r_c02_w.vl_item,0,0,0, 
				0,0,nm_usuario_p,clock_timestamp(),'', 
				r_c02_w.cd_procedimento,r_c02_w.ie_origem_proced, null, null, r_c02_w.cd_material);
		end;
	end loop;
	 
	CALL gerar_imposto_nf(nr_sequencia_w, nm_usuario_p, null, null);
	 
	CALL atualiza_total_nota_fiscal(nr_sequencia_w,nm_usuario_p);
	 
	select	max(ie_forma_pagamento), 
		max(ds_condicao_pagamento) 
	into STRICT	ie_forma_pagamento_w, 
		ds_condicao_pagamento_w 
	from	condicao_pagamento 
	where	cd_condicao_pagamento	= cd_condicao_pagamento_w;
	 
	/* conforme vencimentos */
 
	if (ie_forma_pagamento_w = 10) then 
		select	coalesce(vl_total_nota,0) 
		into STRICT	vl_liquido_nota_w 
		from	nota_fiscal 
		where	nr_sequencia	= nr_sequencia_w;
		 
		insert	into	nota_fiscal_venc(	nr_sequencia,nm_usuario,dt_atualizacao,cd_estabelecimento,cd_cgc_emitente, 
				cd_serie_nf,nr_nota_fiscal,nr_sequencia_nf,dt_vencimento,vl_vencimento, 
				ie_origem) 
		values (	nr_sequencia_w,nm_usuario_p,clock_timestamp(),cd_estabelecimento_p,obter_cgc_estabelecimento(cd_estabelecimento_p), 
				cd_serie_nf_w,nr_nota_fiscal_w,1,dt_vencimento_w,vl_liquido_nota_w,'N');
	else 
		CALL gerar_nota_fiscal_venc(nr_sequencia_w, dt_vencimento_w);
		 
		select	count(1) 
		into STRICT	ie_gerou_parcelas_nota_fisc_w 
		from	nota_fiscal_venc 
		where	nr_sequencia	= nr_sequencia_w;
		--Se não gerou registro na nota_fiscal_venc e a forma de pagamento for "A prazo" é porque não haviam parcelas cadastradas para a forma de pagamento. 
		if (ie_gerou_parcelas_nota_fisc_w = 0 and 
			ie_forma_pagamento_w = 2) then 
			/*Processo interrompido, para continuar efetue o cadastro das parcelas para a condição de pagamento "#@CD_CONDICAO_PAGAMENTO#@ - #@DS_CONDICAO_PAGAMENTO#@" 
			em Shift + F11 > Suprimentos > Compras > Condição de Pagamento > Parcelas.*/
 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(295491,	'CD_CONDICAO_PAGAMENTO=' || to_char(cd_condicao_pagamento_w) || ';' || 
									'DS_CONDICAO_PAGAMENTO=' || to_char(ds_condicao_pagamento_w), -20012);
		end if;
	end if;
	 
	lock table serie_nota_fiscal in exclusive mode;
	select	coalesce(nr_ultima_nf,0) + 1 
	into STRICT	nr_nota_fiscal_w 
	from	serie_nota_fiscal 
	where	cd_serie_nf		= cd_serie_nf_w 
	and	cd_estabelecimento	= cd_estabelecimento_p;
	 
	if (coalesce(ie_estab_serie_nf_w,'N') = 'S') then 
		update	serie_nota_fiscal 
		set	nr_ultima_nf 		= nr_nota_fiscal_w 
		where	cd_serie_nf 		= cd_serie_nf_w 
		and	cd_estabelecimento in (SELECT	z.cd_estabelecimento 
						from	estabelecimento z 
						where	z.cd_cgc = cd_cgc_emitente_w);
	else 
		update	serie_nota_fiscal 
		set	nr_ultima_nf		= nr_nota_fiscal_w 
		where	cd_serie_nf		= cd_serie_nf_w 
		and	cd_estabelecimento	= cd_estabelecimento_p;
	end if;
 
		 
	select	count(1) 
	into STRICT	qt_nota_fiscal_w 
	from	nota_fiscal 
	where	nr_nota_fiscal		= nr_nota_fiscal_w 
	and	cd_serie_nf		= cd_serie_nf_w 
	and	cd_estabelecimento	= cd_estabelecimento_p 
	and	nr_sequencia_nf		= 1  LIMIT 1;
	 
	if (qt_nota_fiscal_w > 0) then 
		select	max(nr_sequencia_nf) + 1 
		into STRICT	nr_sequencia_nf_ww 
		from	nota_fiscal 
		where	nr_nota_fiscal		= nr_nota_fiscal_w 
		and	cd_serie_nf		= cd_serie_nf_w 
		and	cd_estabelecimento	= cd_estabelecimento_p;
		 
		update	nota_fiscal 
		set	nr_sequencia_nf	= nr_sequencia_nf_ww 
		where	nr_sequencia	= nr_sequencia_w;
	end if;
	 
	/* atualizar os totais da nota fiscal */
 
	update	nota_fiscal 
	set	nr_nota_fiscal		= nr_nota_fiscal_w, 
		dt_atualizacao_estoque	= clock_timestamp() 
	where	nr_sequencia		= nr_sequencia_w;
	 
	update	nota_fiscal_item 
	set	nr_nota_fiscal	= nr_nota_fiscal_w 
	where	nr_sequencia	= nr_sequencia_w;
	 
	if (ie_gerar_titulo_receber_w = 'S') then 
		CALL gerar_titulo_receber_nfs(nr_sequencia_w,nm_usuario_p);
		 
		select	max(nr_titulo) 
		into STRICT	nr_titulo_w 
		from	titulo_receber 
		where	nr_seq_nf_saida	= nr_sequencia_w;
	end if;
end if;
 
update	cobranca_escritural 
set	nr_titulo_desc_folha	= nr_titulo_w, 
	nr_seq_nf_desc_folha	= nr_sequencia_w, 
	dt_atualizacao		= clock_timestamp(), 
	nm_usuario		= nm_usuario_p 
where	nr_sequencia		= nr_seq_cobranca_p;
 
if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then 
	CALL gerar_bloqueto_tit_rec(nr_titulo_w, 'OPSDF');
	CALL atualizar_saldo_tit_rec(nr_titulo_w, nm_usuario_p);
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_titulo_receber_cobr ( nr_seq_cobranca_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

