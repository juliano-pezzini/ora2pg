-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE loc_importar_drg ( catalog_year_p text, edition_seq_p bigint) AS $body$
DECLARE


qt_existe_grupo_w 			numeric(20);	
qt_existe_proc_w 			numeric(20);
qt_existe_drg_proc_w 			numeric(20);
qt_existe_proc_versao_w			numeric(20);
next_code_area_w  			area_procedimento.cd_area_procedimento%type;
next_code_especialidade_w 		especialidade_proc.cd_especialidade%type;
next_code_grupo_w 			grupo_proc.cd_grupo_proc%type;
next_code_proc_w			procedimento.cd_procedimento%type;
next_drg_proc_w				drg_procedimento.nr_sequencia%type;
curr_drg_proc_w				drg_procedimento.nr_sequencia%type;
next_drg_percentual_w			drg_valor_percentual.nr_sequencia%type;
curr_drg_percentual_w			drg_valor_percentual.nr_sequencia%type;

dt_inicio_cat_w				timestamp;
dt_fim_cat_w				timestamp;
	
c01 CURSOR FOR
SELECT 	cd_grupo_proc,                  
	ds_grupo_proc,                 
	cd_drg,                 
	ds_drg,                        
	ie_origem_proced,
	ie_tipo_drg,
	qt_estadia_min,
	qt_estadia_max,
	qt_estadia_media,               
	tx_departamento,                
	tx_estadia_min,                 
	tx_estadia_max,                 
	tx_transferencia,               
	dt_inicio_vigencia,             
	dt_final_vigencia,             
	ie_terceiro,             
	ie_anestesista,                 
	ie_assistente,                  
	ie_cirurgiao,                   
	ie_parteira,                   
	ie_terapeuta_ocupacional,
	tx_departamento_ter,            
	tx_estadia_min_ter,             
	tx_estadia_max_ter,
	dt_inicio_vigencia_ter,
	dt_final_vigencia_ter,
	pr_funcao
from   loc_drg_w;

c01_w  c01%ROWTYPE;
	

BEGIN

dt_inicio_cat_w	:= to_date('01/01/'||catalog_year_p,'dd/mm/yyyy');
dt_fim_cat_w	:= to_date('31/12/'||catalog_year_p,'dd/mm/yyyy');

CALL popular_loc_drg_w(dt_inicio_cat_w,dt_fim_cat_w);

--Ajuste automÃ¡tico da sequences.
select	max(nr_sequencia)
into STRICT	next_drg_proc_w
from	drg_procedimento;

select	nextval('drg_procedimento_seq')
into STRICT	curr_drg_proc_w
;

if (next_drg_proc_w > curr_drg_proc_w) then
	CALL ajustar_newvalue_sequence('DRG_PROCEDIMENTO_SEQ',next_drg_proc_w);
end if;

select 	max(nr_sequencia)
into STRICT 	next_drg_percentual_w
from 	drg_valor_percentual;

select	nextval('drg_valor_percentual_seq')
into STRICT	curr_drg_percentual_w
;

if (next_drg_percentual_w > curr_drg_percentual_w) then
	CALL ajustar_newvalue_sequence('DRG_VALOR_PERCENTUAL_SEQ',next_drg_percentual_w);
end if;
--
	open c01;
    loop
        fetch c01 into c01_w;
        EXIT WHEN NOT FOUND; /* apply on c01 */
        begin
			select max(cd_grupo_proc)
			into STRICT qt_existe_grupo_w
			from grupo_proc
			where ds_grupo_proc = c01_w.ds_grupo_proc
			and cd_grupo_proc     = c01_w.cd_grupo_proc
			and ie_origem_proced= c01_w.ie_origem_proced;
			
			-- verifica se o grupo do procedimento j?? existe, se nao exister inseri um grupo, especialidade e area nova
			if (qt_existe_grupo_w = 0 or coalesce(qt_existe_grupo_w::text, '') = '') then
				begin
					select coalesce(max(cd_area_procedimento),0) + 1
					into STRICT next_code_area_w
					from area_procedimento;
			
					insert into area_procedimento(
										  cd_area_procedimento, 
										  ds_area_procedimento, 
										  dt_atualizacao, 
										  nm_usuario, 
										  ie_origem_proced, 
										  cd_original 
							  ) 
							  values ( 
										  next_code_area_w, 
										  substr(c01_w.ds_grupo_proc, 1, 40), 
										  clock_timestamp(), 
										  'TasyLoad', 
										  (c01_w.ie_origem_proced)::numeric , 
										  (c01_w.cd_grupo_proc)::numeric 
							  );
					
					select coalesce(max(cd_especialidade),0) + 1 
					into STRICT   next_code_especialidade_w 
					from   especialidade_proc;
				  
					insert into especialidade_proc( 
										  cd_especialidade, 
										  ds_especialidade, 
										  dt_atualizacao, 
										  nm_usuario, 
										  cd_area_procedimento, 
										  ie_origem_proced, 
										  cd_original 
							  ) 
							  values ( 
										  next_code_especialidade_w, 
										  substr(c01_w.ds_grupo_proc, 1, 240), 
										  clock_timestamp(), 
										  'TasyLoad', 
										  next_code_area_w, 
										  (c01_w.ie_origem_proced)::numeric , 
										  (c01_w.cd_grupo_proc)::numeric  
							  );
							  
					select coalesce(max(cd_grupo_proc),0) + 1 
					into STRICT   next_code_grupo_w 
					from   grupo_proc;
				   
					insert into grupo_proc( 
                                          cd_grupo_proc, 
                                          ds_grupo_proc, 
                                          cd_especialidade, 
                                          ie_situacao, 
                                          dt_atualizacao, 
                                          nm_usuario, 
                                          ie_origem_proced, 
                                          cd_original 
                              ) 
                              values ( 
                                          next_code_grupo_w, 
                                          substr(c01_w.ds_grupo_proc, 1, 240), 
                                          next_code_especialidade_w, 
                                          'A', 
                                          clock_timestamp(), 
                                          'TasyLoad', 
                                          (c01_w.ie_origem_proced)::numeric , 
                                          (c01_w.cd_grupo_proc)::numeric  
                              );							
							  commit;
				
					RAISE NOTICE 'insert grupo_proc >>> cd_grupo_proc: %', c01_w.cd_grupo_proc;
				end;
			else
				begin
				  -- grupo procedimento ja existe apenas pega o codigo
					select max(cd_grupo_proc)
					into STRICT next_code_grupo_w
					from grupo_proc
					where ds_grupo_proc = c01_w.ds_grupo_proc
					and cd_grupo_proc     = c01_w.cd_grupo_proc
					and ie_origem_proced= c01_w.ie_origem_proced;
				end;
			end if;
			
			select count(cd_procedimento)
			into STRICT qt_existe_proc_w
			from procedimento
			where ie_origem_proced = c01_w.ie_origem_proced
			and cd_procedimento_loc = c01_w.cd_drg;
			
			if (qt_existe_proc_w = 0 or coalesce(qt_existe_proc_w::text, '') = '') then
				begin
					select nextval('procedimento_seq')
					into STRICT   next_code_proc_w 
					;
					
					insert into procedimento( 
											  cd_procedimento, 
											  ds_procedimento, 
											  ie_situacao, 
											  cd_grupo_proc, 
											  dt_atualizacao, 
											  nm_usuario, 
											  ie_classificacao, 
											  ie_origem_proced, 
											  ie_exige_autor_sus, 
											  qt_exec_barra, 
											  ie_ativ_prof_bpa, 
											  ie_alta_complexidade, 
											  ie_ignora_origem, 
											  ie_classif_custo, 
											  ie_localizador, 
											  cd_procedimento_loc 
								  ) 
								  values ( 
											  next_code_proc_w, 
											  substr(c01_w.ds_drg, 1, 255), 
											  'A', 
											  next_code_grupo_w, 
											  clock_timestamp(), 
											  'TasyLoad', 
											   1, 
											  (c01_w.ie_origem_proced)::numeric , 
											  'N', 
											   1, 
											  'N', 
											  'N', 
											  'N', 
											  'B', 
											  'S', 
											  c01_w.cd_drg
								  );
								commit;
								
					RAISE NOTICE 'insert procedimento >>> cd_procedimento: % cd_procedimento_loc: %', next_code_proc_w, c01_w.cd_drg;				
				end;
			else
				begin
					select max(cd_procedimento)
					into STRICT next_code_proc_w
					from procedimento
					where ie_origem_proced = c01_w.ie_origem_proced
					and cd_procedimento_loc = c01_w.cd_drg;
					
					update procedimento
					set ds_procedimento = substr(c01_w.ds_drg, 1, 255)
					where cd_procedimento = next_code_proc_w;
					
					commit;
					
					RAISE NOTICE 'update procedimento >>> cd_procedimento: % cd_procedimento_loc: %', next_code_proc_w, c01_w.cd_drg;	
				end;
			end if;			
			
			if (next_code_proc_w IS NOT NULL AND next_code_proc_w::text <> '') then
                begin 
					SELECT Count(*) 
                    INTO STRICT   qt_existe_proc_versao_w 
                    FROM   procedimento_versao 
                    WHERE  cd_procedimento = next_code_proc_w 
		    and (ie_origem_proced)::numeric  = (c01_w.ie_origem_proced)::numeric 
                    AND trunc(dt_vigencia_inicial) = To_date(c01_w.dt_inicio_vigencia, 'dd/mm/yyyy')
                    AND trunc(dt_vigencia_final) = To_date(c01_w.dt_final_vigencia, 'dd/mm/yyyy');
					
					if (qt_existe_proc_versao_w = 0) then
						insert into procedimento_versao(
												nr_sequencia, 
												dt_versao, 
												dt_atualizacao, 
												nm_usuario, 
												dt_atualizacao_nrec, 
												nm_usuario_nrec, 
												dt_vigencia_inicial, 
												dt_vigencia_final, 
												cd_procedimento, 
												ie_origem_proced 
									) 
									values ( 
												nextval('procedimento_versao_seq'), 
												trunc(to_date(c01_w.dt_inicio_vigencia, 'dd/mm/yyyy'), 'yyyy'), 
												clock_timestamp(), 
												'TasyLoad', 
												clock_timestamp(), 
												'TasyLoad', 
												to_date(c01_w.dt_inicio_vigencia, 'dd/mm/yyyy'), 
												coalesce(to_date(c01_w.dt_final_vigencia, 'dd/mm/yyyy'), null),
												next_code_proc_w, 
												(c01_w.ie_origem_proced)::numeric  
									);
						 
									RAISE NOTICE 'insert procedimento_versao >>> cd_procedimento: %', next_code_proc_w;
						commit;
					end if;
					
					select count(nr_sequencia)
					into STRICT qt_existe_drg_proc_w
					from drg_procedimento
					where cd_drg like c01_w.cd_drg
					and (ie_origem_proced)::numeric  = (c01_w.ie_origem_proced)::numeric
					and trunc(dt_inicio_vigencia) = to_date(c01_w.dt_inicio_vigencia, 'dd/mm/yyyy')
					and trunc(dt_final_vigencia) = to_date(c01_w.dt_final_vigencia, 'dd/mm/yyyy');
					
					if (qt_existe_drg_proc_w = 0 or coalesce(qt_existe_drg_proc_w::text, '') = '') then
						begin
							/*select nvl(max(nr_sequencia)+1,1)
							into next_drg_proc_w
							from drg_procedimento;*/
							
							select nextval('drg_procedimento_seq')
							into STRICT next_drg_proc_w
							;
							
							insert into drg_procedimento(
									 qt_estadia_media,
									 cd_drg,                 
									 ds_drg,                 
									 qt_estadia_min,         
									 qt_estadia_max,         
									 dt_inicio_vigencia,     
									 dt_final_vigencia,      
									 ie_situacao,            
									 tx_departamento,        
									 tx_estadia_min,        
									 tx_estadia_max,         
									 ie_tipo_drg,            
									 tx_transferencia,       
									 nr_sequencia,           
									 dt_atualizacao,         
									 nm_usuario,             
									 dt_atualizacao_nrec,    
									 nm_usuario_nrec,        
									 ie_origem_proced,      
									 cd_procedimento,
									 nr_seq_edition
								) 
								values ( 
									(c01_w.qt_estadia_media)::numeric ,
									c01_w.cd_drg,                 
									substr(c01_w.ds_drg, 1, 2000),                 
									(c01_w.qt_estadia_min)::numeric ,         
									(c01_w.qt_estadia_max)::numeric ,         
									to_date(c01_w.dt_inicio_vigencia, 'dd/mm/yyyy'),     
									coalesce(to_date(c01_w.dt_final_vigencia, 'dd/mm/yyyy'), null),     
									'A',            
									(c01_w.tx_departamento)::numeric ,        
									(c01_w.tx_estadia_min)::numeric ,        
									(c01_w.tx_estadia_max)::numeric ,         
									c01_w.ie_tipo_drg,            
									(c01_w.tx_transferencia)::numeric ,       
									next_drg_proc_w,           
									clock_timestamp(),         
									'TasyLoad',             
									clock_timestamp(),    
									'TasyLoad',        
									(c01_w.ie_origem_proced)::numeric ,      
									next_code_proc_w,
									edition_seq_p
								);
								commit;
								
							RAISE NOTICE 'insert drg_procedimento >>> nr_sequencia: %', next_drg_proc_w;				
						end;					
					end if;
					
					if (c01_w.ie_terceiro = 'X') then
						begin
							/*select nvl(max(nr_sequencia)+1,1)
							into next_drg_percentual_w
							from drg_valor_percentual;*/
							
							select	nextval('drg_valor_percentual_seq')
							into STRICT	next_drg_percentual_w
							;
						
							insert into drg_valor_percentual(
											dt_inicio_vigencia,
											dt_fim_vigencia,               
											tx_departamento,                
											tx_estadia_min,                 
											tx_estadia_max,                
											cd_procedimento,                
											nr_sequencia,               
											dt_atualizacao,                 
											nm_usuario,                     
											dt_atualizacao_nrec,            
											nm_usuario_nrec,                
											ie_origem_proced,              
											ie_cirurgiao,                   
											ie_assistente,                  
											ie_anestesista,                 
											ie_terapeuta_ocupacional,       
											ie_parteira,
											pr_funcao
										)
										values (
											to_date(c01_w.dt_inicio_vigencia, 'dd/mm/yyyy'),     
											coalesce(to_date(c01_w.dt_final_vigencia, 'dd/mm/yyyy'), null),
											(c01_w.tx_departamento_ter)::numeric ,
											(c01_w.tx_estadia_min_ter)::numeric ,
											(c01_w.tx_estadia_max_ter)::numeric ,
											next_code_proc_w,                
											next_drg_percentual_w,                   
											clock_timestamp(),                 
											'TasyLoad',                     
											clock_timestamp(),             
											'TasyLoad',                
											(c01_w.ie_origem_proced)::numeric ,               
											c01_w.ie_cirurgiao,                  
											c01_w.ie_assistente,                  
											c01_w.ie_anestesista,                 
											c01_w.ie_terapeuta_ocupacional,       
											c01_w.ie_parteira,
											(c01_w.pr_funcao)::numeric 
										);
									commit;
							
							RAISE NOTICE 'insert drg_valor_percentual >>> nr_sequencia: %', next_drg_percentual_w;
						end;
					end if;
				end;
			end if;
        end;
    end loop;
	close c01;	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE loc_importar_drg ( catalog_year_p text, edition_seq_p bigint) FROM PUBLIC;

