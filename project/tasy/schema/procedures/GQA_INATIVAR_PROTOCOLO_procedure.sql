-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gqa_inativar_protocolo ( nr_seq_protocolo_p gqa_protocolo_pac.nr_sequencia%type, nr_seq_motivo_p gqa_protocolo_pac.nr_seq_motivo%type, ds_justificativa_p gqa_protocolo_pac.ds_justificativa%type ) AS $body$
DECLARE


cd_profissional_w         pessoa_fisica.cd_pessoa_fisica%type;
nm_usuario_w              gqa_protocolo_pac.nm_usuario%type;
deveinativar              smallint;

  etapa RECORD;

BEGIN
  select obter_usuario_ativo into STRICT nm_usuario_w;

  select (obter_pf_usuario(nm_usuario_w, 'C'))::numeric  into STRICT cd_profissional_w;

  if ((nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '')
    and (nr_seq_motivo_p IS NOT NULL AND nr_seq_motivo_p::text <> '')
    and (ds_justificativa_p IS NOT NULL AND ds_justificativa_p::text <> '')
    and (nm_usuario_w IS NOT NULL AND nm_usuario_w::text <> '')
    and (cd_profissional_w IS NOT NULL AND cd_profissional_w::text <> '')) then

        select count(*) into STRICT deveinativar from gqa_protocolo_pac where nr_sequencia = nr_seq_protocolo_p and (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

        if (deveinativar = 1) then
          update gqa_protocolo_pac set
            dt_inativacao = clock_timestamp(), 
            nm_usuario_inativacao = nm_usuario_w, 
            ds_justificativa = ds_justificativa_p, 
            nr_seq_motivo = nr_seq_motivo_p,
            ie_situacao = 'I'
          where nr_sequencia = nr_seq_protocolo_p;

          -- Inativar itens do PEP
          for etapa in (
                        SELECT NR_SEQ_EVOLUCAO, NR_SEQ_AVALIACAO, NR_SEQ_SCORE_FLEX_II, NR_SEQ_DIAGNOSTICO 
                        from gqa_protocolo_etapa_pac 
                        where nr_seq_prot_pac = nr_seq_protocolo_p
                       ) loop
            if (etapa.NR_SEQ_EVOLUCAO IS NOT NULL AND etapa.NR_SEQ_EVOLUCAO::text <> '') then
              update EVOLUCAO_PACIENTE 
              set DT_LIBERACAO = clock_timestamp() 
              where CD_EVOLUCAO = etapa.NR_SEQ_EVOLUCAO and coalesce(DT_LIBERACAO::text, '') = '';

              update EVOLUCAO_PACIENTE 
              set DT_INATIVACAO = clock_timestamp(), NM_USUARIO_INATIVACAO = nm_usuario_w, DS_JUSTIFICATIVA = ds_justificativa_p 
              where CD_EVOLUCAO = etapa.NR_SEQ_EVOLUCAO;
            elsif (etapa.NR_SEQ_AVALIACAO IS NOT NULL AND etapa.NR_SEQ_AVALIACAO::text <> '') then
              update MED_AVALIACAO_PACIENTE 
              set DT_LIBERACAO = clock_timestamp(), NM_USUARIO_LIB = nm_usuario_w 
              where NR_SEQUENCIA = etapa.NR_SEQ_AVALIACAO and coalesce(DT_LIBERACAO::text, '') = '';

              update MED_AVALIACAO_PACIENTE
              set DT_INATIVACAO = clock_timestamp(), NM_USUARIO_INATIVACAO = nm_usuario_w, DS_JUSTIFICATIVA = ds_justificativa_p 
              where NR_SEQUENCIA = etapa.NR_SEQ_AVALIACAO;
            elsif (etapa.NR_SEQ_SCORE_FLEX_II IS NOT NULL AND etapa.NR_SEQ_SCORE_FLEX_II::text <> '') then
              update ESCALA_EIF_II
              set DT_LIBERACAO = clock_timestamp() 
              where NR_SEQUENCIA = etapa.NR_SEQ_SCORE_FLEX_II and coalesce(DT_LIBERACAO::text, '') = '';

              update ESCALA_EIF_II 
              set DT_INATIVACAO = clock_timestamp(), NM_USUARIO_INATIVACAO = nm_usuario_w, DS_JUSTIFICATIVA = ds_justificativa_p 
              where NR_SEQUENCIA = etapa.NR_SEQ_SCORE_FLEX_II;
            elsif (etapa.NR_SEQ_DIAGNOSTICO IS NOT NULL AND etapa.NR_SEQ_DIAGNOSTICO::text <> '') then
              update DIAGNOSTICO_DOENCA 
              set DT_LIBERACAO = clock_timestamp() 
              where NR_SEQ_INTERNO = etapa.NR_SEQ_DIAGNOSTICO and coalesce(DT_LIBERACAO::text, '') = '';

              update DIAGNOSTICO_DOENCA 
              set DT_INATIVACAO = clock_timestamp(), NM_USUARIO_INATIVACAO = nm_usuario_w, DS_JUSTIFICATIVA = ds_justificativa_p 
              where NR_SEQ_INTERNO = etapa.NR_SEQ_DIAGNOSTICO;
            end if;
          end loop;
        end if;
  end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gqa_inativar_protocolo ( nr_seq_protocolo_p gqa_protocolo_pac.nr_sequencia%type, nr_seq_motivo_p gqa_protocolo_pac.nr_seq_motivo%type, ds_justificativa_p gqa_protocolo_pac.ds_justificativa%type ) FROM PUBLIC;

