-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_alterar_pagador_benef ( nr_seq_contrato_p bigint, nr_seq_segurado_p bigint, nr_seq_pagador_p bigint, ie_tipo_acao_p text, cd_estabelecimento_p bigint, nm_usuario_p text, dt_geracao_sib_p timestamp, nr_seq_alteracao_motivo_p bigint, nr_seq_motivo_rescisao_p bigint, ie_gerar_carteira_p text, nr_seq_motivo_via_adic_p bigint, ie_manter_pagador_contas_p text, ie_commit_p text, ds_erro_p INOUT text) AS $body$
DECLARE


/* ie_tipo_acao_p
	B - Somente do beneficiario
	D - Beneficiario e dependentes
	T - Todos os beneficiarios do contrato
	P - Para todos os beneficiarios com o mesmo pagador
*/
nr_seq_segurado_w		bigint;
nr_seq_pagador_w		bigint;
nm_pagador_w			varchar(255);
ie_tipo_acao_w			varchar(1);
ds_erro_w			varchar(400);
ie_calc_primeira_mens_w		varchar(1);
ie_mensalidade_proporcional_w	varchar(1);
nr_seq_titular_w		pls_segurado.nr_seq_titular%type;
nr_seq_carteira_w		bigint;
dt_validade_carteira_w		timestamp;
ie_exigir_mtvo_alteracao_w	varchar(1);
nr_seq_pagador_ant_w		bigint;
ie_titular_pagador_w		varchar(1);
ie_alteracao_permitida_w	varchar(10);
qt_params_w			integer;
array_w				dbms_utility.lname_array;
ie_permitiu_w			varchar(1) := 'N';

c01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_titular
	from	pls_segurado
	where	((nr_sequencia	= nr_seq_segurado_p)
	or (nr_seq_titular	= nr_seq_segurado_p))
	and (coalesce(dt_rescisao::text, '') = '' or dt_rescisao >= dt_geracao_sib_p)
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	ie_tipo_acao_p	= 'D'
	order by
		nr_seq_titular desc;

c02 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_titular
	from	pls_segurado
	where	nr_seq_contrato	= nr_seq_contrato_p
	and (coalesce(dt_rescisao::text, '') = '' or dt_rescisao >= dt_geracao_sib_p)
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	ie_tipo_acao_p	= 'T'
	order by
		nr_seq_titular desc;

C03 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_titular
	from	pls_segurado
	where	nr_seq_contrato	= nr_seq_contrato_p
	and	nr_seq_pagador	= nr_seq_pagador_ant_w
	and (coalesce(dt_rescisao::text, '') = '' or dt_rescisao >= dt_geracao_sib_p)
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	ie_tipo_acao_p	= 'P'
	order by
		nr_seq_titular desc;
	
procedure pls_consiste_pagador(	ie_titular_pagador_p		text,
				nr_seq_titular_p		pls_segurado.nr_seq_titular%type) is

qt_pagador_w			bigint;

BEGIN

if	((ie_titular_pagador_p = 'S') and (coalesce(nr_seq_titular_p::text, '') = '')) then
	select count(1)
	into STRICT 	qt_pagador_w	
	from 	pls_segurado a
	where 	a.nr_seq_pagador 	= nr_seq_pagador_p
	and 	a.nr_seq_contrato = nr_seq_contrato_p 
	and	coalesce(a.dt_rescisao::text, '') = ''
	and	exists (SELECT	1
			from	pls_contrato_pagador x
			where	x.nr_sequencia = a.nr_seq_pagador
			and	(x.cd_pessoa_fisica IS NOT NULL AND x.cd_pessoa_fisica::text <> ''))
	and	coalesce(a.nr_seq_titular::text, '') = ''
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '');
end if;

if (qt_pagador_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1095554); --E permitido apenas 1 titular ativo por pagador pessoa fisica!
end if;

end;
	
begin

ie_exigir_mtvo_alteracao_w	:= coalesce(obter_valor_param_usuario(1202, 110, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'N');
ie_titular_pagador_w		:= coalesce(obter_valor_param_usuario(1202, 166, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p),'N');
ie_alteracao_permitida_w	:= coalesce(obter_valor_param_usuario(1202, 172, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p),'N');

if (coalesce(ie_exigir_mtvo_alteracao_w,'N') = 'S') and (coalesce(nr_seq_alteracao_motivo_p,0) = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort( 185609, null );
end if;

ie_tipo_acao_w		:= coalesce(ie_tipo_acao_p,'X');

CALL pls_consiste_data_sib(dt_geracao_sib_p, nm_usuario_p, cd_estabelecimento_p);

if (ie_alteracao_permitida_w <> 'N') then

	dbms_utility.comma_to_table(ie_alteracao_permitida_w, qt_params_w, array_w);
	
	for i in 1 .. qt_params_w loop
	begin
		if (ie_tipo_acao_w = array_w(i)) then
			ie_permitiu_w := 'S';
			exit;
		end if;
	end;
	end loop;
	
	if (ie_permitiu_w = 'N') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1161716, null);
	end if;
end if;

begin
select	ie_calc_primeira_mens
into STRICT	ie_calc_primeira_mens_w
from	pls_contrato_pagador
where	nr_sequencia	= nr_seq_pagador_p;
exception
when others then
	ie_calc_primeira_mens_w	:= 'I';
end;

if (ie_calc_primeira_mens_w = 'I') then
	ie_mensalidade_proporcional_w	:= 'N';
elsif (ie_calc_primeira_mens_w = 'P') then
	ie_mensalidade_proporcional_w	:= 'S';
end if;

if (ie_tipo_acao_w = 'B') and -- B Somente do beneficiario
	(nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') and (coalesce(nr_seq_segurado_p,0) <> 0) then
	select	nr_seq_pagador,
		substr(pls_obter_dados_pagador(nr_seq_pagador,'N'),1,255),
		nr_seq_titular
	into STRICT	nr_seq_pagador_w,
		nm_pagador_w,
		nr_seq_titular_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_p;
	
	pls_consiste_pagador(ie_titular_pagador_w, nr_seq_titular_w);
	
	if (nr_seq_pagador_w <> nr_seq_pagador_p) then
		update	pls_segurado
		set	nr_seq_pagador	= nr_seq_pagador_p,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			ie_mensalidade_proporcional = ie_mensalidade_proporcional_w
		where	nr_sequencia	= nr_seq_segurado_p;
		
		CALL pls_alterar_pagador_segurado(nr_seq_segurado_p, nr_seq_pagador_w, nr_seq_pagador_p, dt_geracao_sib_p, 'N', nm_usuario_p);
		
		CALL pls_gerar_segurado_historico(
			nr_seq_segurado_p, '6', clock_timestamp(),
			wheb_mensagem_pck.get_texto(280132, 'NR_SEQ_PAGADOR_P=' || to_char(nr_seq_pagador_w) || ';NM_PAGAD0R_P=' || nm_pagador_w),'pls_alterar_pagador_benef', null,
			null, null, null,
			dt_geracao_sib_p, null, null,
			null, null, null,
			null, nm_usuario_p, 'N');
		
		if (coalesce(nr_seq_alteracao_motivo_p,0) <> 0) then
			ds_erro_w := pls_inserir_rescicao_pagador(nr_seq_alteracao_motivo_p, nr_seq_pagador_p, nr_seq_segurado_p, nr_seq_motivo_rescisao_p, null, dt_geracao_sib_p, nm_usuario_p, 0, ds_erro_w);
		end if;
		
		if (coalesce(ie_gerar_carteira_p,'N') = 'S') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_carteira_w
			from	pls_segurado_carteira
			where	nr_seq_segurado	= nr_seq_segurado_p;
			
			CALL pls_gerar_via_carteira(nr_seq_carteira_w,nr_seq_motivo_via_adic_p,nm_usuario_p,1202,'M','N');
			
			select	max(dt_limite_utilizacao)
			into STRICT	dt_validade_carteira_w
			from	pls_rescisao_contrato
			where	nr_seq_pagador	= nr_seq_pagador_p;
			
			update	pls_segurado_carteira
			set	dt_validade_carteira	= dt_validade_carteira_w
			where	nr_seq_segurado		= nr_seq_segurado_p;
		end if;
		
		if (ie_manter_pagador_contas_p = 'N') then
			CALL pls_alt_pagador_contas_benef(nr_seq_segurado_p, nr_seq_pagador_p, null, null, null, 'N', nm_usuario_p);
		end if;
	end if;
elsif (ie_tipo_acao_w = 'D') and -- D - Beneficiario e dependentes
	(nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') and (coalesce(nr_seq_segurado_p,0) <> 0) then
	open c01;
	loop
	fetch c01 into
		nr_seq_segurado_w,
		nr_seq_titular_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		pls_consiste_pagador(ie_titular_pagador_w, nr_seq_titular_w);
		
		select	nr_seq_pagador,
			substr(pls_obter_dados_pagador(nr_seq_pagador,'N'),1,255)
		into STRICT	nr_seq_pagador_w,
			nm_pagador_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w;
		
		update	pls_segurado
		set	nr_seq_pagador	= nr_seq_pagador_p,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			ie_mensalidade_proporcional = ie_mensalidade_proporcional_w
		where	nr_sequencia	= nr_seq_segurado_w;
		
		CALL pls_alterar_pagador_segurado(nr_seq_segurado_w, nr_seq_pagador_w, nr_seq_pagador_p, dt_geracao_sib_p,'N', nm_usuario_p);
		
		CALL pls_gerar_segurado_historico(
			nr_seq_segurado_w, '6', clock_timestamp(),
			wheb_mensagem_pck.get_texto(280132, 'NR_SEQ_PAGADOR_P=' || to_char(nr_seq_pagador_w) || ';NM_PAGAD0R_P=' || nm_pagador_w),'pls_alterar_pagador_benef', null,
			null, null, null,
			dt_geracao_sib_p, null, null,
			null, null, null,
			null, nm_usuario_p, 'N');
		
		if (coalesce(nr_seq_alteracao_motivo_p,0) <> 0) then
			ds_erro_w := pls_inserir_rescicao_pagador(nr_seq_alteracao_motivo_p, nr_seq_pagador_p, nr_seq_segurado_w, nr_seq_motivo_rescisao_p, null, dt_geracao_sib_p, nm_usuario_p, 0, ds_erro_w);
		end if;
		
		if (coalesce(ie_gerar_carteira_p,'N') = 'S') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_carteira_w
			from	pls_segurado_carteira
			where	nr_seq_segurado	= nr_seq_segurado_w;
			
			CALL pls_gerar_via_carteira(nr_seq_carteira_w,nr_seq_motivo_via_adic_p,nm_usuario_p,1202,'M','N');
			
			select	max(dt_limite_utilizacao)
			into STRICT	dt_validade_carteira_w
			from	pls_rescisao_contrato
			where	nr_seq_pagador	= nr_seq_pagador_p;
			
			update	pls_segurado_carteira
			set	dt_validade_carteira	= dt_validade_carteira_w
			where	nr_seq_segurado		= nr_seq_segurado_w;
		end if;
		
		if (ie_manter_pagador_contas_p = 'N') then
			CALL pls_alt_pagador_contas_benef(nr_seq_segurado_w, nr_seq_pagador_p, null, null, null, 'N', nm_usuario_p);
		end if;
		end;
	end loop;
	close c01;
elsif (ie_tipo_acao_w = 'T') and 	--T - Todos os beneficiarios do contrato
	(nr_seq_contrato_p IS NOT NULL AND nr_seq_contrato_p::text <> '') and (coalesce(nr_seq_contrato_p,0) <> 0) then
	open c02;
	loop
	fetch c02 into
		nr_seq_segurado_w,
		nr_seq_titular_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		
		pls_consiste_pagador(ie_titular_pagador_w, nr_seq_titular_w);
		
		select	nr_seq_pagador,
			substr(pls_obter_dados_pagador(nr_seq_pagador,'N'),1,255)
		into STRICT	nr_seq_pagador_w,
			nm_pagador_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w;
		
		update	pls_segurado
		set	nr_seq_pagador	= nr_seq_pagador_p,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			ie_mensalidade_proporcional = ie_mensalidade_proporcional_w
		where	nr_sequencia	= nr_seq_segurado_w;
		
		CALL pls_alterar_pagador_segurado(nr_seq_segurado_w, nr_seq_pagador_w, nr_seq_pagador_p, dt_geracao_sib_p,'N', nm_usuario_p);
		
		CALL pls_gerar_segurado_historico(
			nr_seq_segurado_w, '6', clock_timestamp(),
			wheb_mensagem_pck.get_texto(280132, 'NR_SEQ_PAGADOR_P=' || to_char(nr_seq_pagador_w) || ';NM_PAGAD0R_P=' || nm_pagador_w),'pls_alterar_pagador_benef', null,
			null, null, null,
			dt_geracao_sib_p, null, null,
			null, null, null,
			null, nm_usuario_p, 'N');
		
		if (coalesce(nr_seq_alteracao_motivo_p,0) <> 0) then
			ds_erro_w := pls_inserir_rescicao_pagador(nr_seq_alteracao_motivo_p, nr_seq_pagador_p, nr_seq_segurado_w, nr_seq_motivo_rescisao_p, null, dt_geracao_sib_p, nm_usuario_p, 0, ds_erro_w);
		end if;
		
		if (coalesce(ie_gerar_carteira_p,'N') = 'S') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_carteira_w
			from	pls_segurado_carteira
			where	nr_seq_segurado	= nr_seq_segurado_w;
			
			CALL pls_gerar_via_carteira(nr_seq_carteira_w,nr_seq_motivo_via_adic_p,nm_usuario_p,1202,'M','N');
			
			select	max(dt_limite_utilizacao)
			into STRICT	dt_validade_carteira_w
			from	pls_rescisao_contrato
			where	nr_seq_pagador	= nr_seq_pagador_p;
			
			update	pls_segurado_carteira
			set	dt_validade_carteira	= dt_validade_carteira_w
			where	nr_seq_segurado		= nr_seq_segurado_w;
		end if;
		
		if (ie_manter_pagador_contas_p = 'N') then
			CALL pls_alt_pagador_contas_benef(nr_seq_segurado_w, nr_seq_pagador_p, null, null, null, 'N', nm_usuario_p);
		end if;
		end;
	end loop;
	close c02;
elsif (ie_tipo_acao_p = 'P') then --Para todos os beneficiarios com o mesmo pagador
	begin
	select	max(nr_seq_pagador)
	into STRICT	nr_seq_pagador_ant_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_p;
	exception
	when others then
		nr_seq_pagador_ant_w	:= null;
	end;
	
	if (nr_seq_pagador_ant_w IS NOT NULL AND nr_seq_pagador_ant_w::text <> '') then
		nm_pagador_w	:=	substr(pls_obter_dados_pagador(nr_seq_pagador_ant_w,'N'),1,255);
		
		open c03;
		loop
		fetch c03 into
			nr_seq_segurado_w,
			nr_seq_titular_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			
			pls_consiste_pagador(ie_titular_pagador_w, nr_seq_titular_w);
			
			update	pls_segurado
			set	nr_seq_pagador	= nr_seq_pagador_p,
				dt_atualizacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p,
				ie_mensalidade_proporcional = ie_mensalidade_proporcional_w
			where	nr_sequencia	= nr_seq_segurado_w;
			
			CALL pls_alterar_pagador_segurado(nr_seq_segurado_w, nr_seq_pagador_ant_w, nr_seq_pagador_p, dt_geracao_sib_p,'N', nm_usuario_p);
			
			CALL pls_gerar_segurado_historico(
				nr_seq_segurado_w, '6', clock_timestamp(),
				wheb_mensagem_pck.get_texto(280132, 'NR_SEQ_PAGADOR_P=' || to_char(nr_seq_pagador_ant_w) || ';NM_PAGAD0R_P=' || nm_pagador_w),'pls_alterar_pagador_benef', null,
				null, null, null,
				dt_geracao_sib_p, null, null,
				null, null, null,
				null, nm_usuario_p, 'N');
			
			if (coalesce(nr_seq_alteracao_motivo_p,0) <> 0) then
				ds_erro_w := pls_inserir_rescicao_pagador(nr_seq_alteracao_motivo_p, nr_seq_pagador_p, nr_seq_segurado_w, nr_seq_motivo_rescisao_p, null, dt_geracao_sib_p, nm_usuario_p, 0, ds_erro_w);
			end if;
			
			if (coalesce(ie_gerar_carteira_p,'N') = 'S') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_carteira_w
				from	pls_segurado_carteira
				where	nr_seq_segurado	= nr_seq_segurado_w;
				
				CALL pls_gerar_via_carteira(nr_seq_carteira_w,nr_seq_motivo_via_adic_p,nm_usuario_p,1202,'M','N');
				
				select	max(dt_limite_utilizacao)
				into STRICT	dt_validade_carteira_w
				from	pls_rescisao_contrato
				where	nr_seq_pagador	= nr_seq_pagador_p;
				
				update	pls_segurado_carteira
				set	dt_validade_carteira	= dt_validade_carteira_w
				where	nr_seq_segurado		= nr_seq_segurado_w;
			end if;
			
			if (ie_manter_pagador_contas_p = 'N') then
				CALL pls_alt_pagador_contas_benef(nr_seq_segurado_w, nr_seq_pagador_p, null, null,null, 'N', nm_usuario_p);
			end if;
			end;
		end loop;
		close c03;
	end if;
end if;

ds_erro_p := ds_erro_w;

if (ie_commit_p = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_alterar_pagador_benef ( nr_seq_contrato_p bigint, nr_seq_segurado_p bigint, nr_seq_pagador_p bigint, ie_tipo_acao_p text, cd_estabelecimento_p bigint, nm_usuario_p text, dt_geracao_sib_p timestamp, nr_seq_alteracao_motivo_p bigint, nr_seq_motivo_rescisao_p bigint, ie_gerar_carteira_p text, nr_seq_motivo_via_adic_p bigint, ie_manter_pagador_contas_p text, ie_commit_p text, ds_erro_p INOUT text) FROM PUBLIC;

