-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gera_w_pls_rec_glosa_web ( nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, cd_guia_p pls_conta.cd_guia%type, cd_guia_prestador_p pls_conta.cd_guia_prestador%type, ie_tipo_data_p text, dt_inicio_p timestamp, dt_fim_p timestamp, ie_tipo_prest_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, nr_id_transacao_p INOUT w_pls_rec_glosa_web.nr_id_transacao%type, ie_consid_prest_exec_p text default 'N') AS $body$
DECLARE


nr_id_transacao_w	w_pls_rec_glosa_web.nr_id_transacao%type;
dt_atendimento_ref_w	pls_conta.dt_atendimento_referencia%type;
nr_seq_conta_w		pls_conta.nr_sequencia%type;
vl_glosa_w		pls_conta.vl_glosa%type;
vl_cobrado_w		pls_conta.vl_cobrado%type;
cd_guia_w		pls_conta.cd_guia%type;
cd_guia_ref_w		pls_conta.cd_guia_ok%type;
nm_beneficiario_w		pessoa_fisica.nm_pessoa_fisica%type;
nm_prestador_w		pessoa_juridica.nm_fantasia%type;
dt_recebimento_w		pls_protocolo_conta.dt_recebimento%type;
qt_glosa_w		integer;
qt_w_pls_w		integer;
restricao_w		varchar(2000);
ds_sql_w			varchar(4000);
r_cursor_w		sql_pck.t_cursor;
valor_bind_w		sql_pck.t_dado_bind;
dt_inicio_w		timestamp;
dt_fim_w			timestamp;
ie_participante_cooperado_w	pls_parametros_rec_glosa.ie_participante_cooperado%type;
ie_cooperado_w	varchar(1) := 'N';
ie_pgto_definitivo_w 	pls_parametros_rec_glosa.ie_pgto_definitivo%type := 'N';
qt_item_w		integer := 0;
ie_forma_obter_recurso_w	pls_parametros_rec_glosa.ie_forma_obter_recurso%type;
ie_consid_negados_w			pls_parametros_rec_glosa.ie_consid_negado%type;
			

BEGIN
dt_inicio_w := trunc(dt_inicio_p);
dt_fim_w := dt_fim_p;


select 	coalesce(max(ie_participante_cooperado),'N'),
	coalesce(max(ie_pgto_definitivo),'N'),
	coalesce(max(ie_forma_obter_recurso),'N'),
	coalesce(max(ie_consid_negado),'N')
into STRICT	ie_participante_cooperado_w,
	ie_pgto_definitivo_w,
	ie_forma_obter_recurso_w,
	ie_consid_negados_w
from 	pls_parametros_rec_glosa
where	cd_estabelecimento = cd_estabelecimento_p;

if (ie_participante_cooperado_w = 'S') then

		select 	coalesce(max(pls_obter_se_cooperado(cd_pessoa_fisica, cd_cgc)),'N')
		into STRICT	ie_cooperado_w
		from 	pls_prestador
		where 	nr_sequencia = nr_seq_prestador_p;

end if;

if (ie_tipo_data_p = 'CT') then
	restricao_w :=  restricao_w || ' and a.dt_atendimento_referencia between to_date(''' || dt_inicio_w || ''',''dd/mm/RRRR'')' || ' and fim_dia(to_date(''' || dt_fim_w || ''',''dd/mm/RRRR''))';
elsif (ie_tipo_data_p = 'RP') then
	restricao_w := restricao_w || ' and b.dt_recebimento between to_date(''' || dt_inicio_w || ''',''dd/mm/RRRR'')' || ' and fim_dia(to_date(''' || dt_fim_w|| ''',''dd/mm/RRRR''))';
end if;

--se parametro de prestador cooperado estiver marcado e o prestador em questao se tratar de um cooperado, entao o mesmo devera ser executor da conta ou participante em algum procedimento da mesma
if (ie_participante_cooperado_w = 'S' and ie_cooperado_w = 'S') then
	restricao_w := restricao_w || ' and (a.nr_seq_prestador_exec = ' || nr_seq_prestador_p ||' or exists (select 1 from pls_conta_proc d, pls_proc_participante e ' || pls_util_pck.enter_w||
			' where d.nr_sequencia = e.nr_seq_conta_proc and d.nr_seq_conta = a.nr_sequencia and e.nr_seq_prestador = '||nr_seq_prestador_p||'))'|| pls_util_pck.enter_w;

elsif (ie_tipo_prest_p = 'PA') then
	restricao_w := restricao_w || ' and b.nr_seq_prestador = ' || nr_seq_prestador_p || pls_util_pck.enter_w;
elsif (ie_tipo_prest_p = 'PG') then
	restricao_w := restricao_w || ' and c.nr_seq_prestador_pgto = ' || nr_seq_prestador_p || pls_util_pck.enter_w;
else
	restricao_w := restricao_w || ' and a.nr_seq_prestador_exec = ' || nr_seq_prestador_p || pls_util_pck.enter_w;
end if;

if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then
	restricao_w := restricao_w || ' and b.nr_sequencia = ' || nr_seq_protocolo_p || pls_util_pck.enter_w;
end if;

if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	restricao_w := restricao_w || ' and a.nr_sequencia = ' || nr_seq_conta_p || pls_util_pck.enter_w;
end if;

if (cd_guia_p IS NOT NULL AND cd_guia_p::text <> '') then
	restricao_w := restricao_w || ' and a.cd_guia_ok = ''' || cd_guia_p || '''' || pls_util_pck.enter_w;
end if;

if (cd_guia_prestador_p IS NOT NULL AND cd_guia_prestador_p::text <> '') then
	restricao_w := restricao_w || ' and a.cd_guia_prestador = ''' || cd_guia_prestador_p || '''' || pls_util_pck.enter_w;
end if;

if (ie_pgto_definitivo_w = 'S') then
	restricao_w := restricao_w || 'and ((exists (select 1 from pls_lote_pagamento d where c.nr_seq_lote_pgto = d.nr_sequencia and d.ie_status = ''D'')) or (exists (select 1 from  pls_pp_lote e where c.nr_seq_pp_lote = e.nr_sequencia and e.ie_status = ''D'')))' || pls_util_pck.enter_w;
elsif (ie_pgto_definitivo_w = 'N') then
	restricao_w := restricao_w || '	and	((c.nr_seq_lote_pgto is not null) or (c.nr_seq_pp_lote is not null)) ' || pls_util_pck.enter_w;
end if;

ds_sql_w := 	'	select	distinct a.nr_sequencia, ' || pls_util_pck.enter_w ||
		'	pls_obter_dados_conta(a.nr_sequencia, ''NB'') nm_beneficiario, ' || pls_util_pck.enter_w ||
		'	a.cd_guia, ' || pls_util_pck.enter_w ||
		'	a.cd_guia_referencia, ' || pls_util_pck.enter_w ||
		'	substr(pls_obter_dados_prestador(a.nr_seq_prestador_exec,''N''),1,255) nm_prestador, ' || pls_util_pck.enter_w ||
		'	pls_obter_saldo_recurso_glosa(a.nr_sequencia, ''C'', ''S'', '''||ie_consid_negados_w||''') vl_glosa, ' || pls_util_pck.enter_w ||
		'	a.vl_cobrado, ' || pls_util_pck.enter_w ||
		'	b.dt_recebimento, ' || pls_util_pck.enter_w ||
		'	a.dt_atendimento_referencia, ' || pls_util_pck.enter_w ||
		'	(	select	count(1) ' || pls_util_pck.enter_w ||
		'		from	pls_conta_glosa ' || pls_util_pck.enter_w ||
		'		where	nr_seq_conta = a.nr_sequencia ' || pls_util_pck.enter_w ||
		'		and	nr_seq_conta_proc is null ' || pls_util_pck.enter_w ||
		'		and	nr_seq_conta_mat is null) qt_glosas_conta, ' || pls_util_pck.enter_w ||
		'	(	select	count(1) ' || pls_util_pck.enter_w ||
		'		from	w_pls_recurso_glosa	x ' || pls_util_pck.enter_w ||
		'		where	x.nr_seq_conta		= a.nr_sequencia ' || pls_util_pck.enter_w ||
		'		and	x.ie_tipo_inclusao	= ''C'') qt_w_pls' || pls_util_pck.enter_w ||
		'	from	pls_conta		a, ' || pls_util_pck.enter_w ||
		'		pls_protocolo_conta	b, ' || pls_util_pck.enter_w ||
		'		pls_conta_medica_resumo	c ' || pls_util_pck.enter_w ||
		'	where	a.nr_seq_protocolo	= b.nr_sequencia ' || pls_util_pck.enter_w ||
		'	and	a.nr_sequencia		= c.nr_seq_conta ' || pls_util_pck.enter_w ||
		'	and	a.vl_glosa > 0 ' || pls_util_pck.enter_w ||		
		restricao_w;
		
valor_bind_w := sql_pck.executa_sql_cursor(ds_sql_w, valor_bind_w);

EXECUTE 'truncate table w_pls_rec_glosa_web';

select	nextval('pls_id_transacao_rec_seq')
into STRICT	nr_id_transacao_w
;

if (r_cursor_w%ISOPEN) then

	loop
		fetch 	r_cursor_w
		into	nr_seq_conta_w,
			nm_beneficiario_w,
			cd_guia_w,
			cd_guia_ref_w,
			nm_prestador_w,
			vl_glosa_w,
			vl_cobrado_w,
			dt_recebimento_w,
			dt_atendimento_ref_w,
			qt_glosa_w,
			qt_w_pls_w;

		EXIT WHEN NOT FOUND; /* apply on r_cursor_w */

		qt_item_w := 0;
		if (vl_glosa_w > 0) and (qt_w_pls_w = 0) and (pls_obter_se_recursa_item(nr_seq_conta_w, nr_seq_prestador_p) = 'S') then

			-- Se N faz as verificacoes do obj 310649(que posteriormente e verificado para saber os itens apresentados para recurso)

			-- Se S entao faz as verificacoes do obj 1047676 (que posteriormente e verificado para saber os itens apresentados para recurso)
			if (ie_consid_prest_exec_p = 'N' ) then
			
				
				if ( ie_forma_obter_recurso_w = 'S') then
					select	count(1)
					into STRICT	qt_item_w
					from	pls_conta b, pls_conta_proc a
					where	b.nr_sequencia = nr_seq_conta_w
					and	a.nr_seq_conta = b.nr_sequencia
					and	a.ie_status not in ('M', 'D')
					and	not exists (SELECT	1
							from	w_pls_recurso_glosa x 
							where	x.nr_seq_conta_proc = a.nr_sequencia and x.ie_tipo_inclusao = 'P')
					and	a.vl_glosa > 0
					and	pls_obter_saldo_recurso_glosa(a.nr_sequencia, 'P', 'S', ie_consid_negados_w) > 0
					and	pls_obter_recursa_item_regra(a.nr_sequencia,a.nr_seq_conta, nr_seq_prestador_p,'P') = 'S'
					and	pls_obter_se_prest_recursa(a.nr_sequencia, a.nr_seq_conta, nr_seq_prestador_p, ie_tipo_prest_p, 'P') = 'S'
					and	pls_obter_se_exibe_portal_rec(a.nr_seq_conta, a.nr_sequencia, 'P') <> 'R'
					and	exists (	select	1
								from	pls_conta_glosa x
								where	x.nr_seq_conta_proc = a.nr_sequencia
								and	x.ie_situacao = 'A'
								
union all

								SELECT	1
								from	pls_conta_glosa x
								where	x.nr_seq_conta = a.nr_seq_conta
								and	coalesce(x.nr_seq_conta_proc::text, '') = '' 
								and 	coalesce(x.nr_seq_conta_mat::text, '') = '' 
								and 	x.ie_situacao = 'A')
						;

									
					if ( qt_item_w = 0 ) then
						select	count(1)
						into STRICT	qt_item_w
						from	pls_conta_mat a
						where	a.nr_seq_conta = nr_seq_conta_w
						and	a.ie_status not in ('M', 'D')
						and	not exists (SELECT	1
									from	w_pls_recurso_glosa x 
									where	x.nr_seq_conta_mat = a.nr_sequencia and x.ie_tipo_inclusao = 'M')					
						and	a.vl_glosa > 0
						and	pls_obter_saldo_recurso_glosa(a.nr_sequencia, 'M', 'S', ie_consid_negados_w) > 0
						and	pls_obter_recursa_item_regra(a.nr_sequencia,a.nr_seq_conta, nr_seq_prestador_p,'M') = 'S'
						and	pls_obter_se_prest_recursa(a.nr_sequencia, a.nr_seq_conta, nr_seq_prestador_p, ie_tipo_prest_p, 'M') = 'S'
						and	pls_obter_se_exibe_portal_rec(a.nr_seq_conta, a.nr_sequencia, 'M') <> 'R'
						and	exists (	select	1
									from	pls_conta_glosa x
									where	x.nr_seq_conta_mat = a.nr_sequencia
									and	x.ie_situacao = 'A'
									
union all

									SELECT	1
									from	pls_conta_glosa x
									where	x.nr_seq_conta = a.nr_seq_conta
									and	coalesce(x.nr_seq_conta_proc::text, '') = '' 
									and 	coalesce(x.nr_seq_conta_mat::text, '') = '' 
									and 	x.ie_situacao = 'A');
					
					end if;
				end if;
								
				--se ie_forma_obter_recurso_w = S, entao tem que executar os selects utilizados para identificacao de itens pendentes para prestador

				--se o parametro for N, entao aqui ja pode inserir o registro sem mais verificacoes
				if ( qt_item_w > 0 or ie_forma_obter_recurso_w = 'N') then
					insert	into	w_pls_rec_glosa_web(	cd_guia, cd_guia_referencia, dt_atendimento_referencia,
						dt_atualizacao, dt_atualizacao_nrec, dt_recebimento,
						nm_beneficiario, nm_prestador, nm_usuario,
						nm_usuario_nrec, nr_seq_conta, nr_sequencia,
						qt_glosas_conta, vl_cobrado, vl_glosa,
						nr_id_transacao)
					values (	cd_guia_w, cd_guia_ref_w, dt_atendimento_ref_w,
						clock_timestamp(), clock_timestamp(), dt_recebimento_w,
						nm_beneficiario_w, nm_prestador_w, nm_usuario_p,
						nm_usuario_p, nr_seq_conta_w, nextval('w_pls_rec_glosa_web_seq'),
						qt_glosa_w, vl_cobrado_w, vl_glosa_w,
						nr_id_transacao_w);																				
				end if;
				
				
			else
			
				if (ie_forma_obter_recurso_w = 'S') then
					select	count(1)	
					into STRICT	qt_item_w				
					from	pls_conta b, pls_conta_proc a
					where	b.nr_sequencia = nr_seq_conta_w
					and	a.nr_seq_conta = b.nr_sequencia
					and (b.nr_seq_prestador_exec = nr_seq_prestador_p or exists (SELECT 1
					from pls_proc_participante where nr_seq_conta_proc = a.nr_sequencia 
					and nr_seq_prestador = nr_seq_prestador_p))
					and	a.ie_status not in ('M', 'D')
					and	not exists (select	1 
							from	w_pls_recurso_glosa x 
							where	x.nr_seq_conta_proc = a.nr_sequencia and x.ie_tipo_inclusao = 'P')
					and	a.vl_glosa > 0
					and	pls_obter_saldo_recurso_glosa(a.nr_sequencia, 'P', 'S', ie_consid_negados_w) > 0
					and	pls_obter_recursa_item_regra(a.nr_sequencia,a.nr_seq_conta, nr_seq_prestador_p,'P') = 'S'
					and	pls_obter_se_prest_recursa(a.nr_sequencia, a.nr_seq_conta, nr_seq_prestador_p, ie_tipo_prest_p, 'P') = 'S'
					and	pls_obter_se_exibe_portal_rec(a.nr_seq_conta, a.nr_sequencia, 'P') <> 'R'
					and	exists (	select	1
								from	pls_conta_glosa x
								where	x.nr_seq_conta_proc = a.nr_sequencia
								and	x.ie_situacao = 'A'
								
union all

								SELECT	1
								from	pls_conta_glosa x
								where	x.nr_seq_conta = a.nr_seq_conta
								and	coalesce(x.nr_seq_conta_proc::text, '') = '' 
								and 	coalesce(x.nr_seq_conta_mat::text, '') = '' 
								and 	x.ie_situacao = 'A');

					if (qt_item_w = 0) then
					
						select	count(1)
						into STRICT	qt_item_w
						from	pls_conta_mat a,
								pls_conta b
						where	a.nr_seq_conta = nr_seq_conta_w
						and 	a.nr_seq_conta = b.nr_sequencia
						and		b.nr_seq_prestador_exec = nr_seq_prestador_p
						and	a.ie_status not in ('M', 'D')
						and	not exists (SELECT	1
									from	w_pls_recurso_glosa x 
									where	x.nr_seq_conta_mat = a.nr_sequencia and x.ie_tipo_inclusao = 'M')
						and	a.vl_glosa > 0 and	pls_obter_saldo_recurso_glosa(a.nr_sequencia, 'M', 'S', ie_consid_negados_w) > 0
						and	pls_obter_recursa_item_regra(a.nr_sequencia,a.nr_seq_conta, nr_seq_prestador_p,'M') = 'S'
						and	pls_obter_se_prest_recursa(a.nr_sequencia, a.nr_seq_conta, nr_seq_prestador_p, ie_tipo_prest_p, 'M') = 'S'
						and	pls_obter_se_exibe_portal_rec(a.nr_seq_conta, a.nr_sequencia, 'M') <> 'R'
						and	exists (	select	1
									from	pls_conta_glosa x
									where	x.nr_seq_conta_mat = a.nr_sequencia
									and	x.ie_situacao = 'A'
									
union all

									SELECT	1
									from	pls_conta_glosa x
									where	x.nr_seq_conta = a.nr_seq_conta
									and	coalesce(x.nr_seq_conta_proc::text, '') = '' 
									and 	coalesce(x.nr_seq_conta_mat::text, '') = '' 
									and 	x.ie_situacao = 'A');
					end if;
				end if;
							
				--se ie_forma_obter_recurso_w = S, entao tem que executar os selects utilizados para identificacao de itens pendentes para prestador

				--se o parametro for N, entao aqui ja pode inserir o registro sem mais verificacoes
				if ( qt_item_w > 0 or ie_forma_obter_recurso_w = 'N') then
					insert	into	w_pls_rec_glosa_web(	cd_guia, cd_guia_referencia, dt_atendimento_referencia,
						dt_atualizacao, dt_atualizacao_nrec, dt_recebimento,
						nm_beneficiario, nm_prestador, nm_usuario,
						nm_usuario_nrec, nr_seq_conta, nr_sequencia,
						qt_glosas_conta, vl_cobrado, vl_glosa,
						nr_id_transacao)
					values (	cd_guia_w, cd_guia_ref_w, dt_atendimento_ref_w,
						clock_timestamp(), clock_timestamp(), dt_recebimento_w,
						nm_beneficiario_w, nm_prestador_w, nm_usuario_p,
						nm_usuario_p, nr_seq_conta_w, nextval('w_pls_rec_glosa_web_seq'),
						qt_glosa_w, vl_cobrado_w, vl_glosa_w,
						nr_id_transacao_w);
																			
				end if;
			
			end if;
		end if;
	end loop;
end if;

commit;

nr_id_transacao_p := nr_id_transacao_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gera_w_pls_rec_glosa_web ( nr_seq_prestador_p pls_prestador.nr_sequencia%type, nr_seq_protocolo_p pls_protocolo_conta.nr_sequencia%type, nr_seq_conta_p pls_conta.nr_sequencia%type, cd_guia_p pls_conta.cd_guia%type, cd_guia_prestador_p pls_conta.cd_guia_prestador%type, ie_tipo_data_p text, dt_inicio_p timestamp, dt_fim_p timestamp, ie_tipo_prest_p text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, nr_id_transacao_p INOUT w_pls_rec_glosa_web.nr_id_transacao%type, ie_consid_prest_exec_p text default 'N') FROM PUBLIC;

