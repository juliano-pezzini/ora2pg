-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_conta_proc ( nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_consistindo_conta_p text, nm_usuario_p usuario.nm_usuario%type, ie_processo_novo_p text default 'N') AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Realizar a consistencia de informacoes relacionadas ao procedimento apresentado
	pelo prestador.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  X]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atencao:

Alteracoes
-------------------------------------------------------------------------------------------------------------------

jjung OS 621943 - 22/06/2013 - 

Alteracao:	Removido a chamada para a procedure PLS_OC_CTA_GERAR_COMBINADA.

Motivo:	Nao e necessario chamar para cada item pois na chamada para a conta ja e feita 
	a geracao para todos os itens.
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_conta_proc_w			pls_conta_proc.nr_sequencia%type;
cd_procedimento_w			procedimento.cd_procedimento%type;
ie_origem_proced_w			procedimento.ie_origem_proced%type;
qt_procedimento_w			pls_conta_proc.qt_procedimento%type;
dt_procedimento_w			timestamp;
vl_calculado_w				double precision;
vl_repasse_glosa_w			double precision;
vl_repasse_medico_glosa_w		double precision;
vl_total_procedimento_w			double precision;
vl_materiais_w				double precision;
vl_custo_operacional_w			double precision;
ie_tipo_despesa_w			varchar(1);
ie_liberar_item_autor_w			varchar(1);
nr_seq_guia_w				pls_guia_plano.nr_sequencia%type;
cd_guia_w				varchar(20);
cd_guia_referencia_w			varchar(20);/*Somente a guia referencia*/
cd_guia_princ_w				varchar(20);/*Somente a guia principal*/
nr_seq_tipo_acomodacao_w		bigint;
nr_seq_protocolo_w			bigint;
nr_seq_segurado_w			bigint;
ie_tipo_guia_w				varchar(2);
ie_classificacao_w			varchar(1);
qt_utilizada_w				pls_conta_proc.qt_procedimento%type;
qt_autorizada_w				pls_conta_proc.qt_procedimento%type;
qt_diferenca_proc_w			pls_conta_proc.qt_procedimento%type	:= 0;
nr_seq_prestador_w			bigint;
ds_contas_autor_w			varchar(255);
nr_seq_plano_w				bigint;
qt_glosa_w				bigint;
ie_segmentacao_w			varchar(3);
nr_seq_guia_conta_w			bigint;
qt_solicitada_w				pls_guia_plano_proc.qt_solicitada%type;
ie_existe_regra_w			varchar(1);
nr_seq_tipo_atendimento_w		bigint;
nr_seq_conta_w				bigint;
ie_tipo_conta_w				varchar(1);
qt_idade_maxima_sus_w			bigint;
dt_emissao_w				timestamp;
qt_idade_segurado_w			bigint;
ie_sexo_sus_w				varchar(1);
ie_sexo_w				varchar(1);
cd_pessoa_fisica_w			bigint;
nr_seq_regra_valor_w			bigint;
vl_total_partic_w			double precision;
ie_conta_intercambio_w			varchar(10)	:= 'N';
nr_seq_congenere_w			bigint;
qt_dia_envio_w				bigint;
nr_seq_regra_w				bigint;
ie_permite_w				varchar(1);
ie_nascido_plano_w			varchar(1);
nr_seq_prestador_retorno_w		bigint;
nr_seq_regra_retorno_w			bigint;
nr_seq_motivo_glosa_w			bigint;
ie_origem_conta_w			varchar(10);
nr_seq_evento_w				bigint;
nr_seq_evento_prod_w			bigint;
nr_seq_preco_pacote_w			bigint;
nr_seq_analise_w			bigint;
ie_reconsistencia_w 			varchar(1) := 'N';
nr_seq_proc_ref_w			bigint;
ie_evento_w				varchar(2);
ie_existe_item_analise_w		bigint;
nr_seq_regra_preco_w			bigint;
nr_seq_honorario_crit_w			bigint;
ie_gerar_glosa_valor_zerado_w		varchar(10);
ie_repassa_medico_w			varchar(10);
ie_repassa_medico_ww			varchar(15);
ie_regra_liberacao_w			bigint;
qt_procedimento_conta_w			bigint;
nr_seq_hon_crit_medico_w		bigint;
ie_tipo_pagador_w			varchar(10);
ie_taxa_coleta_w			varchar(1)	:= 'N';
qt_registro_w				bigint;
qt_partic_conta_w			bigint;
qt_partic_cancelado_w			bigint;
ie_partic_zero_w			varchar(1);
ie_carencia_abrangencia_ant_w		varchar(10);
ie_status_atual_w			varchar(3);
qt_negativo_w				pls_conta_proc.qt_procedimento%type;
ie_limitacao_w				varchar(1);
ie_carencia_w				varchar(1);
ie_cpt_w				varchar(1);
ie_proc_ativo_w				varchar(1);
nr_seq_regra_vinculo_w			bigint;
qt_saldo_w				double precision;
qt_conta_dif_w				integer;
dt_atendimento_conta_w			pls_conta_v.dt_atendimento%type;
qt_autorizada_item_w			pls_guia_plano_proc.qt_autorizada%type;
ie_estagio_complemento_w		pls_conta_proc.ie_estagio_complemento%type;
qt_glosa_ativa_w			integer;
dt_procedimento_ref_w			pls_conta_proc.dt_procedimento_referencia%type;
nr_seq_congenere_seg_w			pls_segurado.nr_seq_congenere%type;
nr_seq_prest_inter_w			pls_conta.nr_seq_prest_inter%type;
ie_internado_w				pls_conta_v.ie_internado%type;
nr_seq_intercambio_w			pls_segurado.nr_seq_intercambio%type;
ie_tipo_intercambio_w			pls_conta_v.ie_tipo_intercambio%type;
nr_seq_regra_autor_w			pls_regra_autorizacao.nr_sequencia%type;
qt_proc_conta_aut_w			integer;
ie_cobertura_taxa_diaria_w		pls_parametros.ie_cobertura_taxa_diaria%type;
ds_obs_data_w				pls_conta_glosa.ds_observacao%type;
ie_regime_atendimento_w		pls_conta.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_conta.ie_saude_ocupacional%type;


BEGIN

ie_evento_w := 'CC'; /*CONSITENCIA DE CONTA*/
select	nr_seq_conta,
	nr_sequencia,
	cd_procedimento,
	ie_origem_proced,
	coalesce(qt_procedimento_imp,0), 
	dt_procedimento,
	ie_tipo_despesa,
	qt_procedimento_imp,
	vl_total_procedimento,
	vl_procedimento,
	nr_seq_preco_pacote,
	nr_seq_proc_ref,
	nr_seq_regra,
	nr_seq_honorario_crit,
	vl_total_partic,
	nr_seq_regra_valor,
	vl_materiais,
	vl_custo_operacional,
	nr_seq_hon_crit_medico,
	CASE WHEN coalesce(nr_seq_exame_coleta::text, '') = '' THEN 'N'  ELSE 'S' END ,
	ie_status,
	nr_seq_regra_vinculo,
	ie_estagio_complemento,
	dt_procedimento_referencia
into STRICT	nr_seq_conta_w,
	nr_seq_conta_proc_w, 
	cd_procedimento_w,
	ie_origem_proced_w,
	qt_procedimento_w,
	dt_procedimento_w,
	ie_tipo_despesa_w,
	qt_solicitada_w,
	vl_total_procedimento_w,
	vl_calculado_w,
	nr_seq_preco_pacote_w,
	nr_seq_proc_ref_w,
	nr_seq_regra_preco_w,
	nr_seq_honorario_crit_w,
	vl_total_partic_w,
	nr_seq_regra_valor_w,
	vl_materiais_w,
	vl_custo_operacional_w,
	nr_seq_hon_crit_medico_w,
	ie_taxa_coleta_w,
	ie_status_atual_w,
	nr_seq_regra_vinculo_w,
	ie_estagio_complemento_w,
	dt_procedimento_ref_w
from	pls_conta_proc
where	nr_sequencia = nr_seq_conta_proc_p;

-- Obter dados da conta 
select	coalesce(cd_guia_referencia, cd_guia),/* Felipe - OS 276997 - Coloquei o NVL cd_guia_referencia, pois e esse o campo de integridade com a autorizacao */
	cd_guia,
	cd_guia_referencia,
	nr_seq_tipo_acomodacao,
	nr_seq_protocolo,
	nr_seq_segurado,
	ie_tipo_guia,
	nr_seq_tipo_atendimento,
	dt_emissao,
	coalesce(ie_tipo_conta,'O'),
	ie_origem_conta,
	nr_seq_analise,
	dt_atendimento,
	nr_seq_guia,
	nr_seq_prestador_prot,
	nr_seq_congenere_prot,
	nr_seq_prest_inter,
	ie_internado,
	ie_tipo_intercambio,
	nr_seq_congenere_seg,
	ie_regime_atendimento,
	ie_saude_ocupacional
into STRICT	cd_guia_w,
	cd_guia_princ_w,
	cd_guia_referencia_w,
	nr_seq_tipo_acomodacao_w,
	nr_seq_protocolo_w,
	nr_seq_segurado_w,
	ie_tipo_guia_w, 
	nr_seq_tipo_atendimento_w,
	dt_emissao_w,
	ie_tipo_conta_w,
	ie_origem_conta_w,
	nr_seq_analise_w,
	dt_atendimento_conta_w,
	nr_seq_guia_conta_w,
	nr_seq_prestador_w,
	nr_seq_congenere_w,
	nr_seq_prest_inter_w,
	ie_internado_w,
	ie_tipo_intercambio_w,
	nr_seq_congenere_seg_w,
	ie_regime_atendimento_w,
	ie_saude_ocupacional_w
from	pls_conta_v
where	nr_sequencia	= nr_seq_conta_w;

begin
	select	CASE WHEN b.cd_cgc='' THEN 'PF'  ELSE 'PJ' END 
	into STRICT	ie_tipo_pagador_w
	from	pls_contrato_pagador	b,
		pls_segurado		a
	where	a.nr_sequencia		= nr_seq_segurado_w
	and	a.nr_seq_pagador	= b.nr_sequencia;
exception
	when others then
	ie_tipo_pagador_w	:= 'A';
end;

/*Obter conta intercambio para ocorrencia*/

if (ie_tipo_conta_w = 'I') then
	ie_conta_intercambio_w	:= 'I';
	ie_evento_w		:= 'I5';
end if;

select	coalesce(ie_gerar_glosa_valor_zerado,'S'),
	coalesce(ie_carencia_abrangencia_ant,'N'),
	coalesce(ie_cobertura_taxa_diaria,'N')
into STRICT	ie_gerar_glosa_valor_zerado_w,
	ie_carencia_abrangencia_ant_w,
	ie_cobertura_taxa_diaria_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

if (ie_conta_intercambio_w	!= 'I') then
	SELECT * FROM pls_obter_tipo_prest_consist(nr_seq_conta_w, nm_usuario_p, nr_seq_prestador_retorno_w, nr_seq_regra_retorno_w) INTO STRICT nr_seq_prestador_retorno_w, nr_seq_regra_retorno_w;
end if;

if (nr_seq_prestador_retorno_w IS NOT NULL AND nr_seq_prestador_retorno_w::text <> '') then
	nr_seq_prestador_w	:= nr_seq_prestador_retorno_w;
end if;

select	count(1)
into STRICT	qt_registro_w
from	procedimento
where	cd_procedimento		= cd_procedimento_w
and	ie_origem_proced	= ie_origem_proced_w;

if (coalesce(qt_registro_w,0) = 0) then
	CALL pls_gravar_conta_glosa('1801',null,nr_seq_conta_proc_p,
				null,'N', 'Procedimento invalido ou inexistente.',
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);
end if;

/*Obter idade segurado em anos*/

qt_idade_segurado_w := pls_obter_idade_segurado(nr_seq_segurado_w, dt_emissao_w, 'A'); 	

begin
	--select	nr_seq_plano,
	select	pls_obter_produto_benef(nr_sequencia,dt_atendimento_conta_w),
		nr_seq_intercambio
	into STRICT	nr_seq_plano_w,
		nr_seq_intercambio_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
exception
	when others then
	nr_seq_plano_w	:= null;
	CALL pls_gravar_conta_glosa('1013',nr_seq_conta_w,null,
				null,'N','Beneficiario nao informado',
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);
end;

ds_obs_data_w := pls_valida_regra_data_conta(dt_procedimento_ref_w);

if (ds_obs_data_w IS NOT NULL AND ds_obs_data_w::text <> '') then
	CALL pls_gravar_conta_glosa('1701',nr_seq_conta_w,null,
				null,'N',ds_obs_data_w || '. Seq item: ' || nr_seq_conta_proc_p,
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);
end if;
		
if (ie_tipo_conta_w = 'I') then
	
	/*5002 - Problemas no processamento (Quando a data de envio  + a regra da operadora for menor que a data de hoje Glosa */

	qt_dia_envio_w := pls_obter_data_envio_operadora(dt_procedimento_w, nr_seq_congenere_w, nr_seq_segurado_w, cd_estabelecimento_p, nm_usuario_p, qt_dia_envio_w);
	if (coalesce(qt_dia_envio_w,0) <> 0) then		
		if (trunc(dt_procedimento_w + qt_dia_envio_w) < trunc(clock_timestamp())) then 		
			CALL ptu_inserir_inconsistencia(null, null, 5002,
						'Cobranca de intercambio indevida. '||to_char(dt_procedimento_w,'DD/MM/YYYY')||' '||to_char(clock_timestamp(),'DD/MM/YYYY') ||' funcao OPS - Cooperativas Medicas - Cooperativas - Regras - Interambio ',
						cd_estabelecimento_p, nr_seq_conta_w,
						'CM', 'A500', nr_seq_conta_proc_w,
						null, 4, nm_usuario_p);
		end if;
	end if;
	
	if (coalesce(cd_procedimento_w, 0) = 0) then
		/*2031 - Servico nao informado*/
 
		CALL ptu_inserir_inconsistencia(null, null, 2031, 
					 '', cd_estabelecimento_p, nr_seq_conta_w,
					 'CM', 'A500', nr_seq_conta_proc_p,
					 null, 4, nm_usuario_p);
	else

		/*2003 - Quant. servico deve ser maior que 0*/
 
		if (coalesce(qt_solicitada_w, 0) = 0)then
			CALL ptu_inserir_inconsistencia(null, null, 2003,
						 '', cd_estabelecimento_p, nr_seq_conta_w,
						 'CM', 'A500', nr_seq_conta_proc_p,
						 null, 4, nm_usuario_p);
		end if;

		if (coalesce(nr_seq_segurado_w,0) <> 0) then 

			/*2006 - Idade do beneficiario acima da idade limite*/

			select	qt_idade_maxima_sus,
				ie_sexo_sus
			into STRICT	qt_idade_maxima_sus_w,
				ie_sexo_sus_w 
			from	procedimento
			where	cd_procedimento		= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w;

			if (qt_idade_maxima_sus_w < qt_idade_segurado_w) then				
				CALL ptu_inserir_inconsistencia(null, null, 2006,
							 '', cd_estabelecimento_p, nr_seq_conta_w, 
							 'CM', 'A500', nr_seq_conta_proc_p, 
							 null, 4, nm_usuario_p);
			end if;

			/*2011 - Servico invalido para o sexo do funcionario*/

			select	b.cd_pessoa_fisica,
				b.ie_sexo
			into STRICT	cd_pessoa_fisica_w,
				ie_sexo_w
			from	pls_segurado a,
				pessoa_fisica b 
			where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica 
			and	a.nr_sequencia 		= nr_seq_segurado_w;

			if	((ie_sexo_w <> ie_sexo_sus_w) or (ie_sexo_sus_w = 'I')) then
				CALL ptu_inserir_inconsistencia(null, null, 2011, 
							 '', cd_estabelecimento_p, nr_seq_conta_w, 
							 'CM', 'A500', nr_seq_conta_proc_p, 
							 null, 4, nm_usuario_p);
			end if;
		end if;
	end if;
	
	-- se for pelo processo novo, nao deve chamar esta rotina
	if (ie_processo_novo_p = 'N') then
		CALL pls_gerar_ocorrencia(	nr_seq_segurado_w, null, null,
					nr_seq_conta_w, nr_seq_conta_proc_w, null, 
					cd_procedimento_w, ie_origem_proced_w, null, 
					ie_tipo_guia_w, nr_seq_plano_w, 'C',
					null, ie_tipo_pagador_w, nr_seq_prestador_w,
					nr_seq_tipo_atendimento_w,'I', dt_procedimento_w,
					ie_origem_conta_w,nm_usuario_p, cd_estabelecimento_p,
					nr_seq_congenere_w,ie_conta_intercambio_w, null,null,null);
	end if;
end if;

if (ie_tipo_despesa_w = '2') then
	CALL pls_tiss_consistir_taxa(nr_seq_conta_proc_w, 'CP', ie_evento_w, 
		null, null, '', 
		nm_usuario_p, cd_estabelecimento_p,null);
end if;

if (ie_tipo_despesa_w = '1') then
	CALL pls_tiss_consistir_proc(nr_seq_conta_proc_w, 'CP', ie_evento_w,
		null, null, '', 
		nm_usuario_p, cd_estabelecimento_p,null);
end if;
	
if (ie_tipo_guia_w in ('6','5')) then
	CALL pls_tiss_consistir_honorario(nr_seq_conta_proc_w, 'CP', ie_evento_w,
		null, null, '', 
		nm_usuario_p, cd_estabelecimento_p,null);
end if;	

CALL pls_consistir_elegibilidade(	nr_seq_segurado_w, ie_evento_w, nr_seq_conta_proc_w,
				'CP', null, null,
				'', nm_usuario_p, cd_estabelecimento_p);

CALL pls_tiss_consistir_autorizacao(nr_seq_conta_proc_w, 'CP', ie_evento_w,
	nr_seq_prestador_w, null, '', 
	nm_usuario_p, cd_estabelecimento_p,null);

select	count(1)
into STRICT	qt_glosa_ativa_w
from	tiss_motivo_glosa	tiss
where	cd_motivo_tiss	in ('1308','1312','1321','1317','1304')
and	pls_obter_se_evento_glosa(tiss.nr_sequencia, null, cd_estabelecimento_p) = 'S';

if (qt_glosa_ativa_w > 0) then

	CALL pls_tiss_consistir_guia(nr_seq_conta_proc_w, 'CP', ie_evento_w,
				nr_seq_prestador_w, null, '', 
				nm_usuario_p, cd_estabelecimento_p);
end if;

if (nr_seq_guia_conta_w IS NOT NULL AND nr_seq_guia_conta_w::text <> '') then

	nr_seq_guia_w := nr_seq_guia_conta_w;
else
	/* Obter dados da guia */
	select	coalesce(max(a.nr_sequencia),0)
	into STRICT	nr_seq_guia_w 
	from	pls_guia_plano	a
	where	a.cd_guia		= cd_guia_referencia_w
	and	a.ie_status <>	'3'
	and	a.nr_seq_segurado	= nr_seq_segurado_w
	and	((ie_tipo_conta_w <> 'I') or
		((ie_tipo_conta_w = 'I') and (a.nr_seq_prestador not in (	SELECT 	x.nr_sequencia 
						from	pls_prestador x)
		or	coalesce(a.nr_seq_prestador::text, '') = '')));
	/*Se nao houver dados da guia principal busca na referencia*/

	if (nr_seq_guia_w = 0)	then
		select	coalesce(max(a.nr_sequencia),0)
		into STRICT	nr_seq_guia_w
		from	pls_guia_plano	a
		where	a.cd_guia		= cd_guia_princ_w
		and	a.ie_status <>	'3'
		and	a.nr_seq_segurado	= nr_seq_segurado_w
		and	((ie_tipo_conta_w <> 'I') or
			((ie_tipo_conta_w = 'I') and (not exists (	SELECT 	x.nr_sequencia 
					from	pls_prestador x
					where	x.nr_sequencia = a.nr_seq_prestador)/*Prestador nao deve estar cadastrado na base , se estiver nao e conta de intercambio*/
			or	coalesce(a.nr_seq_prestador::text, '') = '')));
			
		if (nr_seq_guia_w = 0) and (ie_tipo_conta_w = 'I') then
			
			select	coalesce(max(e.nr_seq_guia),0)
			into STRICT	nr_seq_guia_w
			from	pls_execucao_requisicao  e,
				ptu_resposta_autorizacao d,
				ptu_nota_servico	 c
			where	c.nr_seq_conta_proc  	= nr_seq_conta_proc_p
			and	d.nr_seq_origem		= c.nr_autorizacao
			and	d.nr_seq_requisicao	= e.nr_seq_requisicao
			and	exists (	SELECT	1
						from	pls_guia_plano_proc x
						where	x.nr_seq_guia 		= e.nr_seq_guia
						and	x.cd_procedimento	= cd_procedimento_w
						and	x.ie_origem_proced	= ie_origem_proced_w);
			if (nr_seq_guia_w = 0) then
				select	coalesce(max(e.nr_seq_guia),0)
				into STRICT	nr_seq_guia_w
				from	pls_execucao_requisicao  e,
					ptu_resposta_autorizacao d,
					ptu_nota_servico	 c
				where	c.nr_seq_conta_proc  	= nr_seq_conta_proc_p
				and	d.nr_seq_origem		= c.nr_autorizacao
				and	d.nr_seq_requisicao	= e.nr_seq_requisicao;
			end if;
		end if;
		/*Se ainda assim nao for encontrado ira verificar na nota PTU enviada*/
	
	end if;
end if;
/*Tratamento para verificar a guia tambem pois se nao houver nada autorizado para a guia referencia tem que buscar da guia*/

ie_liberar_item_autor_w	:= 'N';

/*Procedure que verifica as regras de Procedimentos que necessitam de autorizacao previa (OPS - Cadastro de Regras > Contas Medicas > Regras de Autorizacoes > Contas Medicas x Autorizacoes)
    Retorna	ie_liberar_item_autor_w = 'S' quando o procedimento exige a utilizacao de guia autorizada
	ie_liberar_item_autor_w = 'N' quando nao exige autorizacao
		
	ie_existe_regra_w = 'S' quando existe regra para o procedimento
	ie_existe_regra_w = 'N' quando nao existe regra para o procedimento*/
SELECT * FROM pls_consiste_proced_autor(nr_seq_conta_w, nr_seq_conta_proc_w, nm_usuario_p, cd_estabelecimento_p, nr_seq_prestador_w, ie_evento_w, null, ie_liberar_item_autor_w, ie_existe_regra_w, nr_seq_motivo_glosa_w, nr_seq_regra_autor_w) INTO STRICT ie_liberar_item_autor_w, ie_existe_regra_w, nr_seq_motivo_glosa_w, nr_seq_regra_autor_w;

if (nr_seq_guia_w <> 0) then /*Se for uma guia existente na OPS - Autorizacao */

	
	/*TIPO DESPESA QUE NAO FOR  DIARIAS*/

	if (ie_tipo_despesa_w <> '3') and (ie_liberar_item_autor_w = 'S' )then /*Quando nao for diarias*/

		/*Procedure que realiza uma verificacao na guia da conta e retorna se esta autorizada a quantia liberadada e a quantia utilizada*/

		select 	coalesce(max(qt_saldo),0),
			coalesce(max(qt_utilizada),0),
			coalesce(max(qt_autorizada),0)
		into STRICT	qt_saldo_w,
			qt_utilizada_w,
			qt_autorizada_w
		from 	table(pls_conta_autor_pck.obter_dados(nr_seq_guia_w,'P', cd_estabelecimento_p, ie_origem_proced_w, cd_procedimento_w));
		
		ie_classificacao_w  := ie_tipo_despesa_w;
		
		-- jjung Removido o tratamento abaixo pois esta situacao ja esta corretamente tratada na view pls_conta_autor_v e 

		-- este calculo acabava duplicando as quantidades dos itens.
		if (qt_autorizada_w > 0) and (qt_saldo_w < 0) 	and (ie_existe_regra_w = 'S') then/*Verifica se o item realmente esta autorizada*/
			
			select	count(1)
			into STRICT	qt_conta_dif_w
			from	pls_conta_autor_utilizada_v
			where	nr_seq_guia		=  nr_seq_guia_w
			and	nr_seq_conta		!= nr_seq_conta_w
			and	cd_procedimento 	= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w;
			
			if ( qt_conta_dif_w = 0 )	then -- Se a nao em outras contas
				
				/*askono OS 349281 - Considerei o tratamento da glosa para taxas quando se exige autorizacao*/

				if (ie_classificacao_w = '2') then
				
					/*'[1] - Quantidade apresentada do procedimento ('||nvl(qt_procedimento_w,0)||') excede quantidade autorizada ('|| nvl(qt_autorizada_w,0)||').'*/
					
					CALL pls_gravar_conta_glosa('2421',null,nr_seq_conta_proc_w,
								null,'N','[1] - Quantidade apresentada do procedimento ('||coalesce(qt_procedimento_w,0)||') excede quantidade autorizada ('|| coalesce(qt_autorizada_w,0)||'). Regra de autorizacao: ' || nr_seq_regra_autor_w,
								nm_usuario_p,'A',ie_evento_w,
								nr_seq_prestador_w, cd_estabelecimento_p, '', null); 											
				else
				
					CALL pls_gravar_conta_glosa('1820',null, nr_seq_conta_proc_w,
								null,'N',
								'[1] - A quantidade de procedimentos autorizados e ainda nao utilizados e menor que a quantidade apresentada de procedimentos da conta. Procedimentos utilizados: ' || qt_utilizada_w || 
								' / Procedimento autorizados : ' || qt_autorizada_w || '. Regra de autorizacao: ' || nr_seq_regra_autor_w,
								nm_usuario_p,'A',ie_evento_w, 
								nr_seq_prestador_w, cd_estabelecimento_p, '', null);
				end if;				
			
			else 	

				select substr(pls_admin_cursor.obter_desc_cursor_gigante(cursor(  	select	nr_seq_conta ds
								from	pls_conta_autor_utilizada_v
								where	nr_seq_guia	=  nr_seq_guia_w
								and	nr_seq_conta	!= nr_seq_conta_w
								and	cd_procedimento 	= cd_procedimento_w
								and	ie_origem_proced	= ie_origem_proced_w), ', '),1,255) x
				into STRICT	ds_contas_autor_w	
				;
				/*askono OS 349281 - Considerei o tratamento da glosa para taxas quando se exige autorizacao*/

				if (ie_classificacao_w = '2') then

					CALL pls_gravar_conta_glosa('2421',null,nr_seq_conta_proc_w,
								null,'N','[3] - Quantidade utilizada excede a quantidade autorizada.   Autorizado: '||coalesce(qt_autorizada_w,0)||'    Qtde apresentada nesta conta: '||qt_procedimento_conta_w||
								'    (Qtde que ja foi utilizada: '||(coalesce(qt_autorizada_w,0) - coalesce(qt_diferenca_proc_w,0))||' Contas que utilizaram: '|| ds_contas_autor_w||'). Regra de autorizacao: ' || nr_seq_regra_autor_w,
								nm_usuario_p,'A',ie_evento_w,
								nr_seq_prestador_w, cd_estabelecimento_p, '', null);
				else						
					select	position('-' in qt_saldo_w)
					into STRICT	qt_negativo_w
					;
					
					if (coalesce(qt_negativo_w,0) > 0) then

						CALL pls_gravar_conta_glosa('1820',null, nr_seq_conta_proc_w,
									null,'N', '[3] - Esta guia foi executada em outras contas ('|| ds_contas_autor_w ||'). Quantidade cobrada acima da autorizada : '|| replace(qt_saldo_w,'-','') ||
									' Regra de autorizacao: ' || nr_seq_regra_autor_w,
									nm_usuario_p,'A',ie_evento_w,
									nr_seq_prestador_w, cd_estabelecimento_p, '', null);

					elsif (qt_saldo_w < 0) then

						CALL pls_gravar_conta_glosa('1820',null, nr_seq_conta_proc_w,
									null,'N', '[3] - Esta guia foi executada em outras contas ('|| ds_contas_autor_w ||') e possui saldo de '||qt_saldo_w || '. Regra de autorizacao: ' || nr_seq_regra_autor_w,
									nm_usuario_p,'A',ie_evento_w,
									nr_seq_prestador_w, cd_estabelecimento_p, '', null);
					end if;
				end if;					
			end if;					
		end if;
		
	/*TIPO DESPESA DIARIAS E GUIA INTERNACAO*/
	
	elsif (ie_tipo_despesa_w	= '3') and	-- Quando for diarias e
		(ie_tipo_guia_w	= '5') then		-- Guia de Resumo de Internacao	
		select 	coalesce(max(qt_saldo),0),
			coalesce(max(qt_utilizada),0),
			coalesce(max(qt_autorizada),0)
		into STRICT	qt_saldo_w,
			qt_utilizada_w,
			qt_autorizada_w
		from 	table(pls_conta_autor_pck.obter_dados(nr_seq_guia_w,'D', cd_estabelecimento_p, ie_origem_proced_w, cd_procedimento_w));

		
		if ( qt_utilizada_w = 0) then
			qt_utilizada_w := qt_solicitada_w;
		end if;
		
		if	(qt_saldo_w < 0 AND qt_autorizada_w > 0) or (qt_autorizada_w = 0) then
			
			select	count(1)
			into STRICT	qt_conta_dif_w
			from	pls_conta_autor_utilizada_v
			where	nr_seq_guia		=  nr_seq_guia_w
			and	nr_seq_conta		!= nr_seq_conta_w
			and	cd_procedimento 	= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w;
			
			if (qt_conta_dif_w = 0) then
				CALL pls_gravar_conta_glosa('1999',null,nr_seq_conta_proc_w,
							null,'N', '[1] Quantidade de diarias utilizadas excede a quantidade de dias autorizados. '||
							'Autorizada: '||qt_autorizada_w||' Utilizada: '||qt_utilizada_w , 
							nm_usuario_p,'A',ie_evento_w,
							nr_seq_prestador_w, cd_estabelecimento_p, '', null);

			else
				select substr(pls_admin_cursor.obter_desc_cursor_gigante(cursor(  	select	nr_seq_conta ds
								from	pls_conta_autor_utilizada_v
								where	nr_seq_guia	=  nr_seq_guia_w
								and	nr_seq_conta	!= nr_seq_conta_w
								and	cd_procedimento 	= cd_procedimento_w
								and	ie_origem_proced	= ie_origem_proced_w), ', '),1,255) x
				into STRICT	ds_contas_autor_w	
				;
				
				CALL pls_gravar_conta_glosa('1999',null,nr_seq_conta_proc_w,
							null,'N', '[3] Quantidade de diarias utilizadas excede a quantidade de dias autorizados. Esta guia foi executada em outras contas ('|| ds_contas_autor_w ||') e possui saldo de '|| qt_saldo_w||'. '||
							'Autorizada: '||qt_autorizada_w||' Utilizada: '||qt_utilizada_w,
							nm_usuario_p,'A',ie_evento_w,
							nr_seq_prestador_w, cd_estabelecimento_p, '', null);
			end if;
		end if;
	end if;
end if;

/*Consiste vigencia proc*/

ie_proc_ativo_w	:= pls_obter_se_proc_ativo(cd_procedimento_w, ie_origem_proced_w, dt_procedimento_w);
	

if (ie_proc_ativo_w = 'N') then
	CALL pls_gravar_conta_glosa('9920', null, nr_seq_conta_proc_p, null, 'N', 'O procedimento nao esta ativo.', nm_usuario_p, 'A', ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);
elsif (ie_proc_ativo_w = 'D') then
	CALL pls_gravar_conta_glosa('9920', null, nr_seq_conta_proc_p, null, 'N', 'O procedimento esta fora da data de vigencia.', nm_usuario_p, 'A', ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);
end if;

/*TIPO DESPESA PROCEDIMENTOS*/
	
if (ie_tipo_despesa_w in ('1','4') or (ie_tipo_despesa_w in ('2','3')  and ie_cobertura_taxa_diaria_w = 'S')) then
	
	select 	coalesce(max(qt_autorizada),0),
		coalesce(max(qt_saldo),0)
	into STRICT	qt_autorizada_item_w,
		qt_saldo_w
	from 	table(pls_conta_autor_pck.obter_dados(nr_seq_guia_w,'P', cd_estabelecimento_p, ie_origem_proced_w, cd_procedimento_w));
	
	select	coalesce(max(ie_segmentacao),0) 
	into STRICT	ie_segmentacao_w 
	from	pls_plano 
	where	nr_sequencia	= nr_seq_plano_w;
	
	qt_glosa_w := pls_consistir_cobertura_proc(	nr_seq_segurado_w, null, nr_seq_conta_proc_w, null, cd_procedimento_w, ie_origem_proced_w, dt_procedimento_w, ie_segmentacao_w, cd_estabelecimento_p, null, nm_usuario_p, qt_glosa_w, 'C');

	if (coalesce(qt_glosa_w,0) = 0) then
		ie_limitacao_w	:= pls_obter_se_gera_glosa_conta('1423',null,'CC',cd_estabelecimento_p);
	
		if (ie_limitacao_w = 'S') and (coalesce(qt_autorizada_item_w,0) != coalesce(qt_solicitada_w,0))then
			CALL pls_consistir_limitacao_proc(nr_seq_segurado_w, null, nr_seq_conta_proc_w,
							null, null, cd_procedimento_w, 
							ie_origem_proced_w, qt_solicitada_w, null, 
							cd_estabelecimento_p, nm_usuario_p);
		end if;	
		
		select	count(1)
		into STRICT	qt_proc_conta_aut_w
		from	pls_guia_plano_proc
		where	nr_seq_guia		= nr_seq_guia_w
		and	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w  LIMIT 1;
		
		if	(ie_liberar_item_autor_w = 'S' AND qt_saldo_w < 0) or
			(ie_liberar_item_autor_w = 'N' AND qt_proc_conta_aut_w = 0) then
			ie_carencia_w	:= pls_obter_se_gera_glosa_conta('1410',null,'CC',cd_estabelecimento_p);
		
			if (ie_carencia_w = 'S') then
				/*aaschlote 21/12/2010 - OS - 271679 - Verificar se o beneficiario e recem-nascido, caso for, nao sera preciso consitir as carencias do beneficiario*/

				ie_nascido_plano_w := pls_obter_segurado_nasc_plano(nr_seq_segurado_w, cd_estabelecimento_p, ie_nascido_plano_w, nm_usuario_p);
				if (coalesce(ie_nascido_plano_w,'N') = 'N') then
					CALL pls_consistir_carencia_proc(nr_seq_segurado_w, null, null,
									nr_seq_conta_proc_w, null, cd_procedimento_w, 
									ie_origem_proced_w, dt_procedimento_w, cd_estabelecimento_p, 
									nm_usuario_p, null,ie_carencia_abrangencia_ant_w);
				end if;
			end if;
		end if;
		
		ie_cpt_w	:= pls_obter_se_gera_glosa_conta('1421',null,'CC',cd_estabelecimento_p);
	
		if (ie_cpt_w = 'S') then
			CALL pls_consistir_cpt(	nr_seq_segurado_w, null, nr_seq_conta_proc_w,
						null, null, cd_procedimento_w, 
						ie_origem_proced_w, dt_procedimento_w, cd_estabelecimento_p, 
						nm_usuario_p);
		end if;
	end if;
end if;

/*TIPO DESPESAS = TAXAS */

select	max(ie_classificacao)
into STRICT	ie_classificacao_w 
from	procedimento
where	cd_procedimento	= cd_procedimento_w
and	ie_origem_proced = ie_origem_proced_w;
/* incluido o tratamento para que quando for pacote seja verificado se existe regra de pacote ou regra de criterio de preco*/


/*
Regra de liberacao de valores da  conta - OPS- CAdastro de regras\ OPS - Contas medicas\ Liberacao de valores na conta
	REGRA 1 - VL APRESENTADO MENOR QUE VL CALCULADO
	REGRA2- VL CALCULADO MENOR QUE  VL APRESENTADO
	REGRA3- VL CALCULADO ZERADO
*/


/*OS 406815 - Quando for regra de "vl calculado zerado" na regra de liberacao de valores da conta, entao nao gera glosa - Solicitacao do Felipe da UNIMED RIO PRETO*/


/* ESTE TRATAMENTO INFLUI NAS GLOSAS 1707 E 9919*/

begin
	select	a.ie_regra_liberacao	
	into STRICT	ie_regra_liberacao_w
	from 	pls_regra_valor_conta 	a	
	where	a.nr_Sequencia = nr_seq_regra_valor_w;
exception
when others then
	ie_regra_liberacao_w	:= 0;
end;

select	count(1)
into STRICT	qt_partic_conta_w
from	pls_proc_participante
where	nr_seq_conta_proc = nr_seq_conta_proc_w;

select	count(1)
into STRICT	qt_partic_cancelado_w
from	pls_proc_participante
where	nr_seq_conta_proc = nr_seq_conta_proc_w
and	coalesce(ie_status,'X') = 'C';

/*Criado para caso for conta de sp/sadt ou resumo de internacao e houver participante, caso tenha sido gerada conta de honorario para este nao sera gerada a  glosa 1707 e 9919 Diogo OS 433078*/

if (coalesce(qt_partic_cancelado_w,0) = coalesce(qt_partic_conta_w,0)) and (coalesce(qt_partic_conta_w,0) > 0) then
	ie_partic_zero_w := 'S';
else
	ie_partic_zero_w := 'N';
end if;

begin
	select	ie_repassa_medico
	into STRICT	ie_repassa_medico_w
	from	pls_regra_honorario
	where	nr_sequencia	= nr_seq_honorario_crit_w;
exception
when others then
	ie_repassa_medico_w	:= 'S';
end;

if (ie_repassa_medico_w	= 'S') then
	vl_repasse_glosa_w		:= vl_calculado_w;
elsif (ie_repassa_medico_w	= 'H') then
	vl_repasse_glosa_w		:= vl_total_partic_w;
elsif (ie_repassa_medico_w	= 'N') then
	vl_repasse_glosa_w		:= vl_materiais_w + vl_custo_operacional_w;
end if;

-- verifica se e para utilizar o campo da regra de preco combinada ou campo nr_seq_regra
if (pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(cd_estabelecimento_p) = 'S') then

	select 	max(nr_seq_cp_comb_filtro)
	into STRICT	nr_seq_regra_preco_w
	from	pls_conta_proc_regra
	where	nr_sequencia = nr_seq_conta_proc_w;
end if;

if (coalesce(nr_seq_regra_preco_w,0) = 0) and (coalesce(nr_seq_preco_pacote_w,0) = 0) and (ie_regra_liberacao_w <> 3) and (coalesce(nr_seq_regra_vinculo_w::text, '') = '') and (coalesce(ie_partic_zero_w,'N') = 'N') then
	CALL pls_gravar_conta_glosa('1707',null,nr_seq_conta_proc_w,
				null,'N','O sistema nao pode calcular um preco para este item.'||chr(13)||chr(10)||
				'Possiveis motivos: '||chr(13)||chr(10)||
				'1)Nao existem regras de preco adequadas ao item, cadastradas na funcao OPS - Regras e Criterios de Preco.',
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);
/*Caso exista regra de preco, mas o valor calculado esta zerado  e nao tenha se encaixado na REGRA DE liberacao DE VALORES DA CONTA com regra de "valor calculado zerado" , gera a glos especifica 9919 */
	
elsif (coalesce(vl_repasse_glosa_w,0)	= 0) and (ie_regra_liberacao_w <> 3) and (coalesce(ie_partic_zero_w,'N') = 'N') then /*OS 406815 - Quando for regra de vl calculado zerado na liberacao de valores da conta, entao nao gera glosa*/
	if (ie_repassa_medico_w	= 'S') then
		CALL pls_gravar_conta_glosa('9919',null, nr_seq_conta_proc_w,
				null,'N', 'O sistema obteve uma regra de valorizacao adequada, mas nao foi possivel realizar o calculo do item.'||chr(13)||chr(10)||
				'Possiveis motivos: '||chr(13)||chr(10)||				
				'1)Nao existe o procedimento cadastrado na tabela de precos apontada pela regra.'||chr(13)||chr(10)||
				'2)Nao existem regras de honorario medico adequadas ao item, cadastradas na funcao OPS - Cadastro de Regras > OPS - Contas medicas > Regra honorario.',
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);	
	elsif (ie_repassa_medico_w	= 'H') then
		CALL pls_gravar_conta_glosa('9919',null, nr_seq_conta_proc_w,
				null,'N', 'O sistema obteve uma regra de valorizacao adequada, mas nao foi possivel realizar o calculo do item.'||chr(13)||chr(10)||
				'Possiveis motivos: '||chr(13)||chr(10)||				
				'1)Nao existe o procedimento cadastrado na tabela de precos apontada pela regra.'||chr(13)||chr(10)||
				'2)Nao existem regras de honorario medico adequadas ao item, cadastradas na funcao OPS - Cadastro de Regras > OPS - Contas medicas > Regra honorario.'||chr(13)||chr(10)||
				'3)Regra de honorario paga ao prestador os honorario medicos, porem o mesmo nao foi calculado.',
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);	
	elsif (ie_repassa_medico_w	= 'N') then
		CALL pls_gravar_conta_glosa('9919',null, nr_seq_conta_proc_w,
				null,'N', 'O sistema obteve uma regra de valorizacao adequada, mas nao foi possivel realizar o calculo do item.'||chr(13)||chr(10)||
				'Possiveis motivos: '||chr(13)||chr(10)||				
				'1)Nao existe o procedimento cadastrado na tabela de precos apontada pela regra.'||chr(13)||chr(10)||
				'2)Nao existem regras de honorario medico adequadas ao item, cadastradas na funcao OPS - Cadastro de Regras > OPS - Contas medicas > Regra honorario.'||chr(13)||chr(10)||
				'3)Regra de honorario paga ao prestador o CO e Filme, porem o mesmo nao foi calculado.',
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);
	end if;
end if;

begin
select	ie_repassa_medico
into STRICT	ie_repassa_medico_ww
from	pls_regra_honorario
where	nr_sequencia	= nr_seq_hon_crit_medico_w;
exception
when others then
	ie_repassa_medico_ww	:= 'S';
end;

if (ie_repassa_medico_ww	= 'S') then
	vl_repasse_medico_glosa_w	:= vl_calculado_w;
elsif (ie_repassa_medico_ww	= 'H') then
	vl_repasse_medico_glosa_w	:= vl_total_partic_w;
elsif (ie_repassa_medico_ww	= 'N') then
	vl_repasse_medico_glosa_w	:= vl_materiais_w + vl_custo_operacional_w;
end if;

if (coalesce(vl_repasse_medico_glosa_w,0)	= 0) and (coalesce(nr_seq_regra_preco_w,0) > 0) then
	if (ie_repassa_medico_ww	= 'S') then
		CALL pls_gravar_conta_glosa('9919',null, nr_seq_conta_proc_w,
				null,'N', 'O sistema obteve uma regra de valorizacao adequada, mas nao foi possivel realizar o calculo do item.'||chr(13)||chr(10)||
				'Possiveis motivos: '||chr(13)||chr(10)||				
				'1)Nao existe o procedimento cadastrado na tabela de precos apontada pela regra.'||chr(13)||chr(10)||
				'2)Nao existem regras de honorario medico adequadas ao item, cadastradas na funcao OPS - Cadastro de Regras > OPS - Contas medicas > Regra honorario.',
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);	
	elsif (ie_repassa_medico_ww	= 'H') then
		CALL pls_gravar_conta_glosa('9919',null, nr_seq_conta_proc_w,
				null,'N', 'O sistema obteve uma regra de valorizacao adequada, mas nao foi possivel realizar o calculo do item.'||chr(13)||chr(10)||
				'Possiveis motivos: '||chr(13)||chr(10)||				
				'1)Nao existe o procedimento cadastrado na tabela de precos apontada pela regra.'||chr(13)||chr(10)||
				'2)Nao existem regras de honorario medico adequadas ao item, cadastradas na funcao OPS - Cadastro de Regras > OPS - Contas medicas > Regra honorario.'||chr(13)||chr(10)||
				'3)Regra de honorario paga ao medico executor os honorario medicos, porem o mesmo nao foi calculado.',
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);	
	elsif (ie_repassa_medico_ww	= 'N') then
		CALL pls_gravar_conta_glosa('9919',null, nr_seq_conta_proc_w,
				null,'N', 'O sistema obteve uma regra de valorizacao adequada, mas nao foi possivel realizar o calculo do item.'||chr(13)||chr(10)||
				'Possiveis motivos: '||chr(13)||chr(10)||				
				'1)Nao existe o procedimento cadastrado na tabela de precos apontada pela regra.'||chr(13)||chr(10)||
				'2)Nao existem regras de honorario medico adequadas ao item, cadastradas na funcao OPS - Cadastro de Regras > OPS - Contas medicas > Regra honorario.'||chr(13)||chr(10)||
				'3)Regra de honorario paga ao medico executor o CO e Filme, porem o mesmo nao foi calculado.',
				nm_usuario_p,'A',ie_evento_w,
				nr_seq_prestador_w, cd_estabelecimento_p, '', null);
	end if;
end if;

if (ie_tipo_conta_w	<> 'I') then
	CALL pls_consistir_proc_prestador(nr_seq_prestador_w, nr_seq_conta_proc_w, null, null, null, cd_estabelecimento_p, nm_usuario_p,ie_evento_w);
end if;

/*Diego - OS's 257673 e 257674 - Verificacao da idade e sexo . Geracao das glosas 1803 e 1802.*/
CALL pls_consistir_benef_proc(nr_seq_segurado_w, null, nr_seq_conta_proc_w, null, ie_evento_w, nm_usuario_p, cd_estabelecimento_p, qt_idade_segurado_w);

/*Diether - OS - 266284 */

SELECT * FROM pls_consiste_rede_atend(nr_seq_conta_w, null, null, null, nr_seq_conta_proc_w, null, null, null, nm_usuario_p, cd_estabelecimento_p, nr_seq_regra_w, ie_permite_w) INTO STRICT nr_seq_regra_w, ie_permite_w;

SELECT * FROM pls_obter_evento_item(cd_procedimento_w, ie_origem_proced_w, null, cd_estabelecimento_p, ie_tipo_guia_w, ie_origem_conta_w, nr_seq_tipo_atendimento_w, ie_tipo_despesa_w, nr_seq_segurado_w, nr_seq_conta_w, 'N', null, nr_seq_evento_w, nr_seq_evento_prod_w, 'C', ie_regime_atendimento_w, ie_saude_ocupacional_w) INTO STRICT nr_seq_evento_w, nr_seq_evento_prod_w;
	
-- removida a rotina pls_obter_regra_valor_glosa a mesma nao e mais utilizada

	
/*Diego - 21/06/2011 - OS  313903 - Ao final da consistencia do procedimento este sera deixado em status "Pendente de liberacao" para se ter uma diferenciacao entre procedimentos consitidos e que faltam consistir.*/


/* Francisco - 17/10/2012 - OS 469604 - Se o item estiver na analise na pode mudar o status 
Nao pode estar  "En analise" , "Liberado pelo usuario" e "Cancelado"*/


-- se for pelo processo novo, nao deve chamar esta rotina
if (ie_processo_novo_p = 'N') then
		update	pls_conta_proc
		set	ie_status 		= CASE WHEN ie_status='A' THEN 'A' WHEN ie_status='D' THEN 'D' WHEN ie_status='L' THEN 'L' WHEN ie_status='M' THEN 'M'  ELSE 'P' END ,
			nr_seq_evento		= nr_seq_evento_w,
			nr_seq_evento_prod	= nr_seq_evento_prod_w
		where	nr_sequencia		= nr_seq_conta_proc_w;
end if;

if (coalesce(nr_seq_analise_w,0) > 0) then
	
	ie_reconsistencia_w := 'S';
	/*VERIFICA SE O ITEM JA EXISTE NA TABELA DE RESUMO DA ANALISE*/


	/*SE NAO EXISTIR, EH POR QUE esta SENDO INCLUIDO UM NOVO ITEM AO INVES DE RECONSISTIR*/

	select	count(1)
	into STRICT	ie_existe_item_analise_w
	from 	w_pls_resumo_conta
	where	nr_seq_item 		= nr_seq_conta_proc_w
	and	ie_origem_proced 	= ie_origem_proced_w
	and	cd_item 		= cd_procedimento_w
	and	nr_Seq_analise 		= nr_seq_analise_w;
	
	if (ie_existe_item_analise_w = 0) then
		ie_reconsistencia_w := 'N';		
	end if;	
end if;

/* Alexandre - OS 248576 - Gerar ocorrencias para o procedimento da conta*/


/* Francisco - 20/05/2012 - OS 418741 - Quando estiver consistindo toda a conta,  vai passar so uma vez na PLS_GERAR_OCORRENCIA */



-- se for pelo processo novo, nao deve chamar esta rotina
if (ie_processo_novo_p = 'N') then
	if (coalesce(ie_consistindo_conta_p,'N') = 'N') then
	
		CALL pls_gerar_ocorrencia(	nr_seq_segurado_w, 'P', null,
					nr_seq_conta_w, nr_seq_conta_proc_w, null, 
					cd_procedimento_w, ie_origem_proced_w, null, 
					ie_tipo_guia_w, nr_seq_plano_w, 'C',
					null, ie_tipo_pagador_w, nr_seq_prestador_w,
					nr_seq_tipo_atendimento_w, 'I', dt_procedimento_w,
					ie_origem_conta_w,nm_usuario_p, cd_estabelecimento_p,
					nr_seq_congenere_w, ie_conta_intercambio_w, null,
					null, ie_reconsistencia_w);
	end if;
end if;
	
-- se for pelo processo novo, nao deve chamar esta rotina
if (ie_processo_novo_p = 'N') then
	if (ie_tipo_despesa_w = '4')	and (nr_seq_preco_pacote_w IS NOT NULL AND nr_seq_preco_pacote_w::text <> '') then
		-- Gerar a estrutura definida na composicao do pacote dentro da conta responsavel pelo procedimento em questao. 

		-- Serao criados registros de procedimentos e materiais para a conta caso a vigencia da composicao selecionada

		-- esteja valendo para a data de atendimento da conta.
		CALL pls_abrir_proc_pacote(
				nr_seq_preco_pacote_w, nr_seq_conta_w, null,
				null, ie_evento_w, nr_seq_prestador_w,
				ie_tipo_guia_w, dt_atendimento_conta_w, nm_usuario_p, nr_seq_conta_proc_p);
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_conta_proc ( nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_consistindo_conta_p text, nm_usuario_p usuario.nm_usuario%type, ie_processo_novo_p text default 'N') FROM PUBLIC;

