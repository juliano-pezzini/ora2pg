-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE alterar_status_agenda ( cd_agenda_p bigint, nr_seq_agenda_p bigint, ie_status_p text, cd_motivo_p text, ds_motivo_p text, ie_agenda_dia_p text, nm_usuario_p text, ds_lista_p text default null) AS $body$
DECLARE


dt_agenda_w		timestamp;
nr_minuto_w		bigint;
ie_status_w		varchar(3);
cd_pf_w			varchar(10);
cd_agenda_w		bigint;
cd_funcao_ativa_w	integer;

ds_erro_w		varchar(255);
cd_estabelecimento_w	bigint;

qt_hor_cancel_w		bigint;
ie_status_desf_exec_w	varchar(3);
ie_motivo_col_pac_w	varchar(20);
nr_atendimento_w	bigint;
nr_seq_ageint_w		bigint;
ie_cancela_ageint_w	varchar(1);
nr_seq_status_w		bigint;
nr_seq_agenda_int_w	bigint;
ie_altera_status_confirmada_w parametro_agenda.ie_altera_status_confirmada%type;

ie_origem_agendamento_w	 agenda_integrada_item.ie_origem_agendamento%type := 'ND';

ds_lista_agenda_w	varchar(4000);
tam_lista_w			bigint;
ie_pos_virgula_w	smallint;
nr_seq_age_item_w	bigint;
ie_cancel_evolucao_schedule_w     varchar(1);
cd_evolucao_w                   bigint;

BEGIN

if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (ie_status_p IS NOT NULL AND ie_status_p::text <> '') then
	ie_motivo_col_pac_w := Obter_Param_Usuario(820, 130, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_motivo_col_pac_w);
	ie_cancel_evolucao_schedule_w := Obter_param_usuario(281, 1646, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_cancel_evolucao_schedule_w);
	select	max(hr_inicio),
		max(nr_minuto_duracao),
		coalesce(max(ie_status_agenda),ie_status_p),
		max(cd_pessoa_fisica),
		max(cd_agenda)
	into STRICT	dt_agenda_w,
		nr_minuto_w,
		ie_status_w,
		cd_pf_w,
		cd_agenda_w
	from	agenda_paciente
	where	nr_sequencia = nr_seq_agenda_p;

	select 	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	agenda
	where	cd_agenda = cd_agenda_w;


	select 	coalesce(max(ie_status_desf_exec),'O')
	into STRICT	ie_status_desf_exec_w
	from	parametro_agenda
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	select	max(Obter_Funcao_Ativa)
	into STRICT	cd_funcao_ativa_w
	;

	if (ie_status_p = 'B') then

		if (ie_status_w = 'B') then

			update	agenda_paciente
			set	ie_status_agenda	= 'L',
				dt_status		 = NULL,
				nm_usuario_status	 = NULL,
				ds_motivo_status	 = NULL,
				nm_usuario_bloq	 = NULL,
				dt_bloqueio		 = NULL,
				nr_seq_motivo_bloq	 = NULL,
				nm_paciente		 = NULL,
				nm_usuario		= nm_usuario_p
			where	nr_sequencia		= nr_seq_agenda_p;
		else

			update	agenda_paciente
			set	ie_status_agenda	= 'B',
				dt_status		= clock_timestamp(),
				nm_usuario_status	= nm_usuario_p,
				ds_motivo_status	= ds_motivo_p,
				nm_usuario_bloq		= nm_usuario_p,
				dt_bloqueio		= clock_timestamp(),
				nr_seq_motivo_bloq	= cd_motivo_p,
				nm_usuario		= nm_usuario_p,
        nm_paciente		= substr(CASE WHEN ie_motivo_col_pac_w='S' THEN  obter_desc_expressao(302715) || ' (' || ds_motivo_p || ')'  ELSE obter_desc_expressao(343191) END ,1,60)
			where	nr_sequencia		= nr_seq_agenda_p;
		end if;

	elsif (ie_status_p = 'C') then

		select	max(hr_inicio),
				max(nr_minuto_duracao),
				coalesce(max(ie_status_agenda),ie_status_p),
				max(cd_pessoa_fisica)
		into STRICT	dt_agenda_w,
				nr_minuto_w,
				ie_status_w,
				cd_pf_w
		from	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p;
		
		if (ie_status_w = 'C') then

			ds_erro_w := consistir_horario_agenda_exame(cd_agenda_p, PKG_DATE_UTILS.get_Time(dt_agenda_w, to_char(dt_agenda_w, 'hh24:mi')), nr_minuto_w, 'S', ds_erro_w);

			if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(208949, 'DS_ERRO_W=' || ds_erro_w);

			else
				/*OS 1014477 ao reverter o cancelamento, exclui o horario livre, para nao ter horarios duplicados*/

				delete
				from	agenda_paciente
				where	hr_inicio = PKG_DATE_UTILS.get_Time(dt_agenda_w, to_char(dt_agenda_w, 'hh24:mi'))
				and		cd_agenda =  cd_agenda_p
				and		ie_status_agenda	=	'L';
				
				select	coalesce(max(PKG_DATE_UTILS.extract_field('SECOND', hr_inicio)),0)+1
                into STRICT	qt_hor_cancel_w
                from	agenda_paciente
                where	cd_agenda = cd_agenda_p
                and     PKG_DATE_UTILS.get_Time(hr_inicio, to_char(hr_inicio, 'hh24:mi')) = PKG_DATE_UTILS.get_Time(dt_agenda_w, to_char(dt_agenda_w, 'hh24:mi'));
				
				update	agenda_paciente
				set	hr_inicio			= PKG_DATE_UTILS.get_Time(dt_agenda_w, to_char(dt_agenda_w, 'hh24:mi')) + qt_hor_cancel_w/86400,
					ie_status_agenda		= 'N',
					nm_usuario_status		 = NULL,
					dt_status			 = NULL,
					ds_motivo_status		 = NULL,
					nm_usuario_cancel		 = NULL,
					dt_cancelamento		 = NULL,
					cd_motivo_cancelamento	 = NULL,
					nm_usuario			= nm_usuario_p
				where	nr_sequencia			= nr_seq_agenda_p;

			end if;

			CALL cancelar_lista_espera(nr_seq_agenda_p, nm_usuario_p, null, 'S');

		else

			select	coalesce(max(PKG_DATE_UTILS.extract_field('SECOND', hr_inicio)),0)+1
			into STRICT	qt_hor_cancel_w
			from	agenda_paciente
			where	cd_agenda = cd_agenda_p
			and	PKG_DATE_UTILS.get_Time(hr_inicio, to_char(hr_inicio, 'hh24:mi')) = PKG_DATE_UTILS.get_Time(dt_agenda_w, to_char(dt_agenda_w, 'hh24:mi'))
			and	ie_status_agenda = 'C';

			update	agenda_paciente
			set		hr_inicio				= hr_inicio + qt_hor_cancel_w / 86400,
					ie_status_agenda		= 'C',
					nm_usuario_status		= nm_usuario_p,
					dt_status				= clock_timestamp(),
					ds_motivo_status		= ds_motivo_p,
					nm_usuario_cancel		= nm_usuario_p,
					dt_cancelamento			= clock_timestamp(),
					cd_motivo_cancelamento	= cd_motivo_p,
					nm_usuario				= nm_usuario_p
			where	nr_sequencia			= nr_seq_agenda_p;
			if ( ie_cancel_evolucao_schedule_w = 'S') then
            select coalesce(max(cd_evolucao),0) into STRICT cd_evolucao_w
            from AGENDA_PACIENTE_AUXILIAR
			where NR_SEQ_AGENDA = nr_seq_agenda_p;
                if (cd_evolucao_w > 0) then
                    delete from clinical_note_soap_data where cd_evolucao = cd_evolucao_w and ie_med_rec_type ='EXAM_SCHD' and ie_stage = 1 and ie_soap_type = 'P' and nr_seq_med_item = nr_seq_agenda_p;
                    CALL clinical_notes_pck.SOAP_DATA_AFTER_DELETE(cd_evolucao_w);
                 end if;
            end if;
			CALL cancelar_lista_espera(nr_seq_agenda_p, nm_usuario_p, cd_motivo_p);

			
		--INICIO - Deletar registro da tabela AGEINT_MARCACAO_USUARIO quando o agendamento for cancelado para liberar o horario novamente na Agenda Integrada		
		select	max(nr_sequencia),
			max(nr_seq_agenda_int),
			max(ie_origem_agendamento)
		into STRICT	nr_seq_ageint_w,
			nr_seq_agenda_int_w,
			ie_origem_agendamento_w
		from	agenda_integrada_item
		where	nr_seq_agenda_exame	= nr_seq_agenda_p;		
		
		if (nr_seq_ageint_w IS NOT NULL AND nr_seq_ageint_w::text <> '') and
			((cd_funcao_ativa_w = 2314) or -- Quando realizado o reagendamento de um exame pela CPOE tambem deve ser cancelado a agenda integrada
			 (cd_funcao_ativa_w = 820)  or (ie_origem_agendamento_w in ('MS','CP'))) then --Deve deletar somente se o cancelamento estiver sendo feito pela Agenda de Exames, liberando o horario novamente para marcacao
			begin

			ie_cancela_ageint_w := Ageint_Obter_Se_Cancel_Agenda(nr_seq_agenda_int_w);			
			if (ie_cancela_ageint_w = 'S') then
				select	min(nr_sequencia)
				into STRICT	nr_seq_status_w
				from 	agenda_integrada_status 
				where	ie_situacao = 'A' 
				and 	ie_Status_tasy = 'CA';

				update	agenda_integrada
				set		nr_seq_status	= nr_seq_status_w,
						dt_cancelamento	= clock_timestamp()
				where	nr_sequencia	= nr_seq_agenda_int_w;
				
			end if;

			if (cd_funcao_ativa_w = 2314) then
				update cpoe_procedimento
				set nr_seq_agenda  = NULL
				where nr_seq_agenda = nr_seq_agenda_p;
			end if;
			
			if (ie_origem_agendamento_w in ('MS','CP')) then
			    delete	FROM ageint_marcacao_usuario
			    where	nr_seq_ageint_item = nr_seq_ageint_w
			    and		coalesce(ie_gerado,'N') = 'S';
			else
			    delete	FROM ageint_marcacao_usuario
			    where	nr_seq_ageint_item = nr_seq_ageint_w;
			end if;
			exception
			when others then
				ds_erro_w	:= '';
			
			end;			
			
			if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;		
		end if;
		--FIM - Deletar registro da tabela AGEINT_MARCACAO_USUARIO quando o agendamento for cancelado para liberar o horario novamente na Agenda Integrada
		
		end if;

	elsif (ie_status_p in ('F','I')) then

		select	coalesce(max(PKG_DATE_UTILS.extract_field('SECOND', hr_inicio)),0)+1
		into STRICT	qt_hor_cancel_w
		from	agenda_paciente
		where	cd_agenda = cd_agenda_p
		and	PKG_DATE_UTILS.get_Time(hr_inicio, to_char(hr_inicio, 'hh24:mi')) = PKG_DATE_UTILS.get_Time(dt_agenda_w, to_char(dt_agenda_w, 'hh24:mi'))
		and	ie_status_agenda = ie_status_p;

		update	agenda_paciente
		set	hr_inicio			= hr_inicio + qt_hor_cancel_w / 86400,
			ie_status_agenda		= ie_status_p,
			dt_status			= clock_timestamp(),
			ds_motivo_status		= ds_motivo_p,
			nr_seq_motivo_falta		= cd_motivo_p,
			nm_usuario_status		= nm_usuario_p,
			nm_usuario			= nm_usuario_p
		where	nr_sequencia			= nr_seq_agenda_p;

		CALL altera_lista_esp_aguard(nr_seq_agenda_p, nm_usuario_p);

	elsif (ie_status_p = 'RF') then

		select	max(hr_inicio),
			max(nr_minuto_duracao),
			coalesce(max(ie_status_agenda),ie_status_p),
			max(cd_pessoa_fisica)
		into STRICT	dt_agenda_w,
			nr_minuto_w,
			ie_status_w,
			cd_pf_w
		from	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p;
			
		update	agenda_paciente
		set	hr_inicio			= PKG_DATE_UTILS.get_Time(dt_agenda_w, to_char(dt_agenda_w, 'hh24:mi')),
			ie_status_agenda		= 'N',
			nm_usuario_status		 = NULL,
			dt_status			 = NULL,
			ds_motivo_status		 = NULL,
			nr_seq_motivo_falta  = NULL,
			nm_usuario			= nm_usuario_p
		where	nr_sequencia			= nr_seq_agenda_p;

		CALL altera_lista_esp_aguard(nr_seq_agenda_p, nm_usuario_p, 'S');

	elsif (ie_status_p = 'R') then

		update	agenda_paciente
		set	ie_status_agenda	= 'R',
			dt_status		 = NULL,
			ds_motivo_status	 = NULL,
			nm_usuario_status	 = NULL,
			nm_usuario		= nm_usuario_p,
			nm_usuario_reserva	= nm_usuario_p,
			dt_reserva		= clock_timestamp(),
			ds_obs_reserva		= ds_motivo_p
		where	nr_sequencia		= nr_seq_agenda_p;
	elsif (ie_status_p = 'AC') then
		select 	coalesce(max(ie_altera_status_confirmada),'N')
		into STRICT 	ie_altera_status_confirmada_w
		from 	parametro_agenda
		where	cd_estabelecimento = obter_estabelecimento_ativo;
		
		update	agenda_paciente
		set	dt_confirmacao				= clock_timestamp(),
			nm_usuario_confirm			= nm_usuario_p,
			nm_usuario					= nm_usuario_p,
			ds_confirmacao 				= ds_motivo_p,
			nr_seq_forma_confirmacao	= coalesce(cd_motivo_p,''),
			ie_status_agenda			= CASE WHEN ie_altera_status_confirmada_w='S' THEN 'CN'  ELSE ie_status_agenda END
		where	nr_sequencia = nr_seq_agenda_p;

	elsif (ie_status_p = 'RC') then
		select 	coalesce(max(ie_altera_status_confirmada),'N')
		into STRICT 	ie_altera_status_confirmada_w
		from 	parametro_agenda
		where	cd_estabelecimento = obter_estabelecimento_ativo;
		
		update	agenda_paciente
		set	dt_confirmacao				 = NULL,
			nm_usuario_confirm			 = NULL,
			nm_usuario					= nm_usuario_p,
			ds_confirmacao 				=  '',
			nr_seq_forma_confirmacao 	 = NULL,
			ie_status_agenda			= CASE WHEN ie_altera_status_confirmada_w='S' THEN 'N'  ELSE ie_status_agenda END
		where	nr_sequencia = nr_seq_agenda_p;

	elsif (ie_status_p = 'A') then

		update	agenda_paciente
		set	ie_status_agenda	= 'A',
			dt_chegada			= clock_timestamp(),
			nm_usuario			= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;

	elsif (ie_status_p = 'RA') then

		update	agenda_paciente
		set	ie_status_agenda	= 'N',
			dt_chegada		 = NULL,
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;

	elsif (ie_status_p = 'O') then

		update	agenda_paciente
		set	ie_status_agenda	= 'O',
			dt_atendimento	= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;
		
		select	max(nr_atendimento)
		into STRICT	nr_atendimento_w
		from	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p;
		
		update	atendimento_paciente
		set	DT_ATEND_MEDICO = clock_timestamp()
		where	nr_atendimento = nr_atendimento_w;

	elsif (ie_status_p = 'RO') then

		update	agenda_paciente
		set	ie_status_agenda	= 'A',
			dt_atendimento	 = NULL,
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;

	elsif (ie_status_p = 'E') then

		if (ds_lista_p IS NOT NULL AND ds_lista_p::text <> '') then
			ds_lista_agenda_w := ds_lista_p;
			
			while	(ds_lista_agenda_w IS NOT NULL AND ds_lista_agenda_w::text <> '') loop
			begin
				tam_lista_w	:= length(ds_lista_agenda_w);
				ie_pos_virgula_w	:= position(',' in ds_lista_agenda_w);
				
				if (ie_pos_virgula_w <> 0) then
					nr_seq_age_item_w	:= (substr(ds_lista_agenda_w, 1, (ie_pos_virgula_w - 1)))::numeric;
					ds_lista_agenda_w	:= substr(ds_lista_agenda_w, (ie_pos_virgula_w + 1), tam_lista_w);
					
					if (nr_seq_age_item_w > 0) then

							update	agenda_paciente
							set	ie_status_agenda	= 'E',
								dt_executada		= clock_timestamp(),
								nm_usuario			= nm_usuario_p
							where	nr_sequencia	= nr_seq_age_item_w;
							
							CALL agend_executado_list_esp(nr_seq_age_item_w, nm_usuario_p);
					end if;
				end if;
			end;			
			end loop;
		else

			update	agenda_paciente
			set	ie_status_agenda	= 'E',
				dt_executada		= clock_timestamp(),
				nm_usuario		= nm_usuario_p
			where	nr_sequencia		= nr_seq_agenda_p;
			
			CALL agend_executado_list_esp(nr_seq_agenda_p, nm_usuario_p);
		end if;

	elsif (ie_status_p = 'RE') then

		update	agenda_paciente
		set	ie_status_agenda	= coalesce(ie_status_desf_exec_w,'O'),
			dt_executada		 = NULL,
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;

		CALL agend_executado_list_esp(nr_seq_agenda_p, nm_usuario_p, 'S');

	elsif (ie_status_p = 'REE') then

		update	agenda_paciente
		set	ie_status_agenda	= 'O',
			dt_em_exame		 = NULL,
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p
		and	coalesce(dt_atendido::text, '') = '';


		update	agenda_paciente
		set	ie_status_agenda	= 'AD',
			dt_em_exame		 = NULL,
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p
		and	(dt_atendido IS NOT NULL AND dt_atendido::text <> '');

	elsif (ie_status_p = 'RAD') then

		update	agenda_paciente
		set	ie_status_agenda	= 'O',
			dt_atendido		 = NULL,
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;

	elsif (ie_status_p = 'EE') then

		update	agenda_paciente
		set	ie_status_agenda	= 'EE',
			dt_em_exame		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;

	elsif (ie_status_p = 'AD') then

		update	agenda_paciente
		set	ie_status_agenda	= 'AD',
			dt_atendido		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;
	elsif (ie_status_p = 'L') then

		update	agenda_paciente
		set	ie_status_agenda	= 'L',
			nm_usuario		= nm_usuario_p,
			nm_usuario_reserva	 = NULL,
			dt_reserva		 = NULL,
			ds_obs_reserva		 = NULL
		where	nr_sequencia		= nr_seq_agenda_p;
	elsif (ie_status_p = 'AE') then

		update	agenda_paciente
		set	ie_status_agenda	= 'AE',
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;
	elsif (ie_status_p = 'RAE') then

		update	agenda_paciente
		set	ie_status_agenda	= 'N',
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p;
	elsif (ie_status_p = 'ET') then
		update	agenda_paciente
		set	ie_status_agenda		= 'ET',
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p; 		
	elsif (ie_status_p = 'AR') then
		update	agenda_paciente
		set	ie_status_agenda		= 'AR',
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_p; 		
	end if;

	if (coalesce(ie_agenda_dia_p,'N') = 'S') and (ie_status_p in ('A','O','AC','AD')) then

		select	max(hr_inicio),
				max(cd_pessoa_fisica)
		into STRICT	dt_agenda_w,
				cd_pf_w
		from	agenda_paciente
		where	nr_sequencia = nr_seq_agenda_p;
		
		CALL alterar_status_agenda_dia(cd_agenda_p, nr_seq_agenda_p, dt_agenda_w, ie_status_p, cd_pf_w, nm_usuario_p);

	end if;

end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE alterar_status_agenda ( cd_agenda_p bigint, nr_seq_agenda_p bigint, ie_status_p text, cd_motivo_p text, ds_motivo_p text, ie_agenda_dia_p text, nm_usuario_p text, ds_lista_p text default null) FROM PUBLIC;

