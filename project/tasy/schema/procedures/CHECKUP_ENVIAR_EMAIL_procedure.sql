-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';


PROCEDURE CHECKUP_ENVIAR_EMAIL IS

ds_mensagem_w                   CHEKUP_EMAIL.ds_texto_padrao%TYPE;

CURSOR CHECKUP_C ( cd_estabelecimento_p IN CHECKUP.cd_estabelecimento%TYPE,
dt_inicial_p IN date,
dt_final_p IN date
) IS
	SELECT
		cd_estabelecimento cd_estabelecimento,
		substr(obter_nome_pf(c.cd_pessoa_fisica), 1, 60) nm_pessoa_fisica,
		to_char(c.dt_previsto,'dd/mm/yyyy hh24:mi') dt_previsto,
		c.token_checkup token_checkup,
		c.nm_usuario nm_usuario,
		substr(obter_dados_usuario_opcao(c.nm_usuario, 'E'), 1, 240) 		ds_email_origem,
		substr(obter_email_pf(c.cd_pessoa_fisica), 1, 240) ds_email_destino,
		c.nr_sequencia nr_sequencia
	FROM CHECKUP c
	WHERE
		c.cd_pessoa_fisica IS NOT NULL
		AND c.dt_previsto between 
			dt_inicial_p and dt_final_p
		AND c.token_checkup IS NOT NULL
		AND c.nm_usuario IS NOT NULL
		AND c.cd_estabelecimento = cd_estabelecimento_p;
  
cursor CHECKUP_EMAIL_C IS
	SELECT
		ce.ds_titulo ds_titulo,
		ce.ds_texto_padrao ds_texto_padrao,
		NVL(ce.qt_horas, 0) qt_horas,
		ce.cd_estabelecimento cd_estabelecimento
	FROM CHEKUP_EMAIL ce;
	
 
type t_LOG_MOV_array is table of LOG_MOV%ROWTYPE;
a_LOG_MOV t_LOG_MOV_array := t_LOG_MOV_array();  
indice_w number := 1; 




CREATE OR REPLACE PROCEDURE addlog (DS_LOG_P log_mov.DS_LOG%type, a_LOG_MOV_p INOUT t_LOG_MOV_array , indice_p INOUT bigint) AS $body$
DECLARE
_ora2pg_r RECORD;
BEGIN
	a_LOG_MOV_p.extend;
	a_LOG_MOV_p[indice_w].CD_LOG := 2666774;
	a_LOG_MOV_p[indice_w].DS_LOG := DS_LOG_P;
	a_LOG_MOV_p[indice_w].DT_ATUALIZACAO := clock_timestamp();
	a_LOG_MOV_p[indice_w].NM_USUARIO := coalesce(wheb_usuario_pck.get_nm_usuario,'Tasy');
	indice_p := indice_p + 1;
end;

procedure gravarLog( a_LOG_MOV_p in out nocopy t_LOG_MOV_array) is
begin
	if (a_LOG_MOV_p.first IS NOT NULL AND a_LOG_MOV_p.first::text <> '') then
		forall i in a_LOG_MOV_p.first .. a_LOG_MOV_p.last  
			insert into LOG_MOV values a_LOG_MOV_p(i);
		
		commit;
	end if;
end;

BEGIN
a_LOG_MOV.delete();

FOR CHECKUP_EMAIL_R IN CHECKUP_EMAIL_C
LOOP
	
	IF ( CHECKUP_EMAIL_R.qt_horas > 0
		AND (CHECKUP_EMAIL_R.ds_texto_padrao IS NOT NULL AND CHECKUP_EMAIL_R.ds_texto_padrao::text <> '')
		AND (CHECKUP_EMAIL_R.ds_titulo IS NOT NULL AND CHECKUP_EMAIL_R.ds_titulo::text <> '')
		) THEN

		FOR CHECKUP_R IN CHECKUP_C(
			CHECKUP_EMAIL_R.cd_estabelecimento,
			trunc(clock_timestamp() + CHECKUP_EMAIL_R.qt_horas/24),
			trunc(clock_timestamp() + CHECKUP_EMAIL_R.qt_horas/24) + 86399/86400
			)
		LOOP
			IF ( (CHECKUP_R.ds_email_origem IS NOT NULL AND CHECKUP_R.ds_email_origem::text <> '')
				AND (CHECKUP_R.ds_email_destino IS NOT NULL AND CHECKUP_R.ds_email_destino::text <> '')
				AND (CHECKUP_R.nm_pessoa_fisica IS NOT NULL AND CHECKUP_R.nm_pessoa_fisica::text <> '')
				) THEN

				ds_mensagem_w := CHECKUP_EMAIL_R.ds_texto_padrao;
				ds_mensagem_w := substr(replace_macro(ds_mensagem_w, '@PACIENTE', CHECKUP_R.nm_pessoa_fisica), 1, 4000);
				ds_mensagem_w := substr(replace_macro(ds_mensagem_w, '@DT_HORA_AGENDAMENTO', CHECKUP_R.dt_previsto), 1, 4000);
				ds_mensagem_w := substr(replace_macro(ds_mensagem_w, '@LINK_URL_QUESTIONARIO', CHECKUP_R.token_checkup), 1, 4000);
				
				SELECT * FROM addLOG('seq:' ||  CHECKUP_R.nr_sequencia || ' msg:' ||  ds_mensagem_w, a_LOG_MOV, indice_w) INTO STRICT _ora2pg_r;
 a_LOG_MOV := _ora2pg_r.a_LOG_MOV_p; indice_w := _ora2pg_r.indice_p;
				
				begin
				CALL enviar_email( CHECKUP_EMAIL_R.ds_titulo, ds_mensagem_w, CHECKUP_R.ds_email_origem, CHECKUP_R.ds_email_destino, CHECKUP_R.nm_usuario, 'M');
				exception
				when no_data_found then
					SELECT * FROM addLOG('seq: ' ||  CHECKUP_R.nr_sequencia ||
						' ds_titulo: ' || CHECKUP_EMAIL_R.ds_titulo ||
						' ds_email_origem: ' || CHECKUP_R.ds_email_origem ||
						' ds_email_destino: ' || CHECKUP_R.ds_email_destino ||
						' nm_usuario: ' || CHECKUP_R.nm_usuario ||
						' sqlerrm: ' || sqlerrm, a_LOG_MOV, indice_w) INTO STRICT _ora2pg_r;
 a_LOG_MOV := _ora2pg_r.a_LOG_MOV_p; indice_w := _ora2pg_r.indice_p;
				when others then
					SELECT * FROM addLOG('seq: ' ||  CHECKUP_R.nr_sequencia ||
						' ds_titulo: ' || CHECKUP_EMAIL_R.ds_titulo ||
						' ds_email_origem: ' || CHECKUP_R.ds_email_origem ||
						' ds_email_destino: ' || CHECKUP_R.ds_email_destino ||
						' nm_usuario: ' || CHECKUP_R.nm_usuario ||
						' sqlerrm: ' || sqlerrm, a_LOG_MOV, indice_w) INTO STRICT _ora2pg_r;
 a_LOG_MOV := _ora2pg_r.a_LOG_MOV_p; indice_w := _ora2pg_r.indice_p;

				end;
			END IF;
		END LOOP;
	end if;
END LOOP;

gravarLog(a_LOG_MOV);

END;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE addlog (DS_LOG_P log_mov.DS_LOG%type, a_LOG_MOV_p INOUT t_LOG_MOV_array , indice_p INOUT bigint) FROM PUBLIC;

