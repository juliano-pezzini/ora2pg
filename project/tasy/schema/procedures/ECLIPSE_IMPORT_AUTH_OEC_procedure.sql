-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE eclipse_import_auth_oec (nm_usuario_p text, NR_SEQ_TRANSACTION_p text) AS $body$
DECLARE

   nr_account_w oec_response.nr_account%type;
   vl_co_pay_w  oec_response.vl_co_pay%type;
   ds_co_pay_w  oec_response.ds_co_pay%type;
   vl_excess_amt_w  oec_response.vl_excess_amt%type;
   ds_excess_amt_w  oec_response.ds_excess_amt%type;
   cd_financial_status_w  oec_response.cd_financial_status%type;
   authorization_id_w   oec_claim.nr_sequencia_autor%type;
   ds_copayment_excess_w  autorizacao_convenio_compl.ds_observacao%type;
   nr_seq_aut_conv_compl_w autorizacao_convenio_compl.nr_sequencia%type;
   nr_seq_estagio_w estagio_autorizacao.nr_sequencia%type;
   nr_seq_previous_letter_w bigint;
   sts_process_status_w varchar(50);
   history_w  autorizacao_convenio_hist.ds_historico%type;
   claim_exp_w  oec_claim_exp.DS_CLAIM_EXP%type;

   c01 CURSOR FOR
	SELECT  d.DS_SERVICE_EXP as service_exp
	from 	oec_response a, oec_claim_exp b, oec_service_resp c, 
		oec_service_exp d
	where 	a.nr_seq_transaction = nr_seq_transaction_p 
	and 	a.NR_SEQUENCIA = b.NR_SEQ_OEC_RESP
	and 	a.NR_SEQUENCIA = c.NR_SEQ_OEC_RESP 
	and 	c.NR_SEQUENCIA = d.NR_SEQ_SERVICE_RESP;

BEGIN 

	select  max(a.nr_account), max(a.vl_co_pay), max(a.ds_co_pay), max(a.vl_excess_amt),
		max(a.ds_excess_amt), max(a.cd_financial_status), max(b.DS_CLAIM_EXP)
	into STRICT 	nr_account_w, vl_co_pay_w, ds_co_pay_w, vl_excess_amt_w,
		ds_excess_amt_w, cd_financial_status_w, claim_exp_w
	from 	oec_response a, oec_claim_exp b
	where 	a.nr_seq_transaction = nr_seq_transaction_p
	and 	a.NR_SEQUENCIA = b.NR_SEQ_OEC_RESP;

	select 	max(nr_sequencia_autor), max(CD_STS_PROCESSS_STATUS)
	into STRICT 	authorization_id_w, sts_process_status_w
	from 	oec_claim 
	where 	cd_seq_transaction = nr_seq_transaction_p;

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_previous_letter_w
	from	autorizacao_convenio_compl
	where	nr_sequencia_autor = authorization_id_w
	and	(nr_documento_portal IS NOT NULL AND nr_documento_portal::text <> '')
	and	coalesce(dt_cancelamento::text, '') = '';
	
	if (nr_seq_previous_letter_w > 0) then
		update autorizacao_convenio_compl
		set	dt_cancelamento = clock_timestamp(),
			nm_usuario_canc = nm_usuario_p
		where	nr_sequencia = nr_seq_previous_letter_w;
	end if;

	ds_copayment_excess_w := Substr('Co-Payment: ' 
                                    || DS_CO_PAY_W
                                    || Chr(13) 
                                    || Chr(10) 
                                    || ' Excess: ' 
                                    || DS_EXCESS_AMT_W, 1, 4000);

	SELECT nextval('autorizacao_convenio_compl_seq') 
	INTO STRICT   nr_seq_aut_conv_compl_w 
	;

	if (sts_process_status_w = 'COMPLETE' or sts_process_status_w = 'MEDICARE_REJECTED' or sts_process_status_w = 'HEALTH_FUND_REJECTED')  then 
		INSERT INTO autorizacao_convenio_compl(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_sinistro, 
			nr_relatorio_renda, 
			nr_documento, 
			nr_documento_portal, 
			pr_coseguro_hosp, 
			pr_coseguro_honor, 
			vl_deduzivel, 
			vl_autorizado, 
			ie_modalidade, 
			ie_tipo, 
			ds_observacao, 
			dt_liberacao, 
			nm_usuario_lib, 
			dt_cancelamento, 
			nm_usuario_canc, 
			nr_sequencia_autor, 
			nr_reclamacao) 
		VALUES ( nr_seq_aut_conv_compl_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			NULL,--invoice_id_p,--nr_sinistro / eligibility 
			NULL, 
			NULL,-- oec_id_p,--nr_documento / document no. 
			NR_ACCOUNT_W,   -- nr_documento_portal /portal document no. 
			NULL, 
			NULL, 
			NULL, 
			NULL, 
			'E',-- ie_modalidade 
			'C',-- ie_tipo 
			ds_copayment_excess_w,-- ds_observacao 
			clock_timestamp(),--dt_liberacao 
			nm_usuario_p,--nm_usuario_lib 
			NULL, 
			NULL, 
			authorization_id_w,--nr_sequencia_autor 
			NULL);

    -- coPayment 
		IF ( VL_CO_PAY_W > 0 ) THEN 
		 
			INSERT INTO autorizacao_conv_deducao(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec,  
			nm_usuario_nrec, 
			ie_tipo_calculo, 
			pr_informado_calculo, 
			vl_informado_calculo, 
			nr_seq_auto_conv_compl) 
			VALUES ( nextval('autorizacao_conv_deducao_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			'C', 
			NULL, 
			VL_CO_PAY_W, 
			nr_seq_aut_conv_compl_w);
		
		END IF;
	
	-- Excess- 
		IF ( VL_EXCESS_AMT_W > 0 ) THEN 
		 
		INSERT INTO autorizacao_conv_deducao(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			ie_tipo_calculo, 
			pr_informado_calculo, 
			vl_informado_calculo, 
			nr_seq_auto_conv_compl) 
		VALUES ( nextval('autorizacao_conv_deducao_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			'E', 
			NULL, 
			VL_EXCESS_AMT_W, 
			nr_seq_aut_conv_compl_w);
		 
		END IF;
	
		 
		IF ( CD_FINANCIAL_STATUS_W = 'Y' ) THEN 
			SELECT Max(nr_sequencia) 
			INTO STRICT   nr_seq_estagio_w 
			FROM   estagio_autorizacao 
			WHERE  ie_situacao = 'A' 
				AND ie_interno = 10;
		
			UPDATE autorizacao_convenio 
			SET    nr_seq_estagio = nr_seq_estagio_w, 
				nm_usuario = nm_usuario_p, 
				dt_atualizacao = clock_timestamp() 
			WHERE  nr_sequencia = authorization_id_w;
			ELSE 
			SELECT Max(nr_sequencia) 
			INTO STRICT   nr_seq_estagio_w 
			FROM   estagio_autorizacao 
			WHERE  ie_situacao = 'A' 
				AND ie_interno = 90;
		
			UPDATE autorizacao_convenio 
			SET    nr_seq_estagio = nr_seq_estagio_w, 
				nm_usuario = nm_usuario_p, 
				dt_atualizacao = clock_timestamp() 
			WHERE  nr_sequencia = authorization_id_w;
		END IF;
	ELSE IF (sts_process_status_w = 'RECEIVED' or sts_process_status_w = 'MEDICARE_UNVERIFIED' or
		sts_process_status_w = 'MEDICARE_VERIFIED' or sts_process_status_w = 'PROCESSING' or
		sts_process_status_w = 'HEALTH_FUND_UNVERIFIED' or sts_process_status_w = 'HEALTH_FUND_VERIFIED' or
		sts_process_status_w = 'MEDICARE_ASSESSING' or sts_process_status_w = 'HEALTH_FUND_ASSESSING' or
		sts_process_status_w = 'HEALTH_FUND_ASSESSING' or sts_process_status_w = 'HEALTH_FUND_ASSESSING' ) THEN
          
		SELECT 	Max(nr_sequencia) 
		INTO STRICT   	nr_seq_estagio_w 
		FROM   	estagio_autorizacao 
		WHERE  	ie_situacao = 'A' 
		AND 	ie_interno = 178;
		
		UPDATE 	autorizacao_convenio 
		SET    	nr_seq_estagio = nr_seq_estagio_w, 
			nm_usuario = nm_usuario_p, 
			dt_atualizacao = clock_timestamp() 
		WHERE  nr_sequencia = authorization_id_w;
	end if;

	END IF;
	
	
	history_w := 	'History generated after receiving a response from ECLIPSE with ' || sts_process_status_w
			||' status  ' ||chr(10)|| claim_exp_w	|| chr(10);
	
	for r01 in c01	loop
		history_w :=  history_w || ' ' || r01.service_exp || chr(10);
	end loop;
	
	insert into autorizacao_convenio_hist(nr_sequencia,
			 dt_atualizacao,
			 nm_usuario,
			 nr_atendimento,
			 ds_historico,
			 nr_sequencia_autor)
		values (nextval('autorizacao_convenio_hist_seq'),
			 clock_timestamp(),
			 nm_usuario_p,
			 null,
			 history_w,
			 authorization_id_w);
	EXCEPTION
		WHEN OTHERS THEN 
		NULL;
COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eclipse_import_auth_oec (nm_usuario_p text, NR_SEQ_TRANSACTION_p text) FROM PUBLIC;

