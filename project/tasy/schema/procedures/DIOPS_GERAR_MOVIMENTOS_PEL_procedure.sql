-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE diops_gerar_movimentos_pel ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_periodo_p bigint, nr_seq_identificador_p bigint) AS $body$
DECLARE


dt_inicio_w			timestamp;
dt_fim_w			timestamp;
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
ie_nao_aplica_recalc_w		varchar(1);
nr_contador_w			bigint;
nr_seq_tipo_movto_pgto_w	bigint;
nr_seq_tipo_movto_evento_w	bigint;
nr_seq_tipo_movto_glosa_w	bigint;
nr_seq_tipo_movto_copart_w	bigint;
qt_meses_w			bigint;
qt_meses_pgto_w			bigint;
vl_total_copart_w		double precision;
vl_total_glosa_w		double precision;
vl_total_pago_w			double precision;
vl_mes_n_w			double precision;
vl_mes_n1_w			double precision;
vl_mes_n2_w			double precision;
vl_mes_n3_w			double precision;
vl_mes_n4_w                     double precision;
vl_mes_n5_w                     double precision;
vl_mes_n6_w                     double precision;
vl_mes_n7_w                     double precision;
vl_mes_n8_w                     double precision;
vl_mes_n9_w                     double precision;
vl_mes_n10_w			double precision;
vl_mes_n11_w                    double precision;
vl_mes_n12_w                    double precision;
vl_mes_n13_w                    double precision;
vl_mes_n14_w                    double precision;
vl_mes_n15_w                    double precision;
vl_mes_n16_w                    double precision;
vl_mes_n17_w                    double precision;
vl_mes_n18_w			double precision;
vl_mes_n19_w			double precision;
vl_mes_n20_w			double precision;
vl_mes_n21_w			double precision;
vl_mes_n22_w			double precision;
vl_mes_n23_w			double precision;
vl_mes_n24_w			double precision;
vl_mes_n25_w			double precision;
vl_mes_n26_w			double precision;
vl_mes_n27_w			double precision;
vl_mes_n28_w			double precision;
vl_mes_n29_w			double precision;
vl_mes_n30_w			double precision;
vl_mes_n31_w			double precision;
vl_mes_n32_w			double precision;
vl_mes_n33_w			double precision;
vl_mes_n34_w			double precision;
vl_mes_n35_w			double precision;
nr_mes_w			smallint;
nr_seq_tipo_movto_w		diops_tipo_movto_pel.nr_sequencia%type;
nr_seq_periodo_ant_w		diops_tipo_movto_pel.nr_sequencia%type;
ie_movto_pel_w			pls_parametros.ie_movto_pel%type;
ie_forma_contab_taxa_pgto_w	pls_parametro_contabil.ie_forma_contab_taxa_pgto%type;
ie_lote_ajuste_prod_w 		pls_parametro_contabil.ie_lote_ajuste_prod%type;
nr_seq_superior_w		diops_tipo_movto_pel.nr_seq_superior%type;
dt_inicial_n_w			timestamp;
dt_fim_n_w			timestamp;	
nr_periodo_w			bigint;
vl_valor_peona_w		ctb_saldo.vl_saldo%type;
cd_empresa_w			empresa.cd_empresa%type;
ie_2019_ou_posterior_w		varchar(2);
nr_seq_repasse_w		pls_segurado_repasse.nr_sequencia%type;
ie_tipo_compartilhamento_w	pls_segurado_repasse.ie_tipo_compartilhamento%type;
ie_benef_compartilhado_w 	varchar(1);

c_movimentos_pel CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_superior
	from	diops_tipo_movto_pel
	where	dt_periodo_final_w between dt_inicio and coalesce(dt_fim,dt_periodo_final_w)
	order by nr_seq_apres_tela;

c_evento_pagto CURSOR FOR
	SELECT	obter_meses_entre_datas_util(trunc(p.dt_mes_competencia,'month'),dt_periodo_final_w) nr_periodo,
		t.dt_liquidacao dt_mes_competencia,
		coalesce(r.vl_liberado,0) vl_evento,
		c.nr_sequencia nr_seq_conta,
		cp.nr_sequencia nr_seq_item,
		cp.dt_procedimento dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta 		p,
		pls_conta 			c,
		pls_conta_medica_resumo 	r,
		pls_pagamento_item 		i,
		pls_pagamento_prestador 	pe,
		pls_pag_prest_vencimento 	ve,
		titulo_pagar 			t,
		pls_segurado 			s,
		pls_plano 			pl,
		pls_conta_proc			cp
	where	p.nr_sequencia 		= c.nr_seq_protocolo
	and	c.nr_sequencia		= r.nr_seq_conta
	and	i.nr_sequencia 		= r.nr_seq_pag_item
	and	i.nr_seq_pagamento 	= pe.nr_sequencia
	and	ve.nr_seq_pag_prestador = pe.nr_sequencia
	and	ve.nr_titulo 		= t.nr_titulo
	and	c.nr_seq_segurado 	= s.nr_sequencia
	and	s.nr_seq_plano 		= pl.nr_sequencia
	and	cp.nr_seq_conta = c.nr_sequencia
	and	r.nr_seq_conta_proc = cp.nr_sequencia
	and	t.dt_liquidacao between dt_periodo_inicial_w and dt_periodo_final_w
	and	p.dt_mes_competencia <= dt_periodo_final_w
	and	substr(cp.cd_classif_cred,1,5) = '2.1.1'
	and	pl.ie_preco = '1'
	and	cp.ie_status not in ('D','M')
	
union all

	SELECT	obter_meses_entre_datas_util(trunc(p.dt_mes_competencia,'month'),dt_periodo_final_w) nr_periodo,
		t.dt_liquidacao dt_mes_competencia,
		coalesce(CASE WHEN ie_nao_aplica_recalc_w='S' THEN coalesce(e.vl_item, r.vl_liberado)  ELSE r.vl_liberado END ,0) vl_evento,
		c.nr_sequencia nr_seq_conta,
		cm.nr_sequencia nr_seq_item,
		cm.dt_atendimento dt_ocorrencia,
		c.nr_seq_segurado
	FROM pls_pag_prest_vencimento ve, titulo_pagar t, pls_segurado s, pls_plano pl, pls_pagamento_prestador pe, pls_protocolo_conta p, pls_pagamento_item i, pls_conta_mat cm, pls_conta c, pls_conta_medica_resumo r
LEFT OUTER JOIN pls_item_recalculo e ON (r.nr_sequencia = e.nr_seq_conta_resumo)
WHERE p.nr_sequencia 		= c.nr_seq_protocolo and c.nr_sequencia		= r.nr_seq_conta and i.nr_sequencia 		= r.nr_seq_pag_item and i.nr_seq_pagamento 	= pe.nr_sequencia and ve.nr_seq_pag_prestador = pe.nr_sequencia and ve.nr_titulo 		= t.nr_titulo and c.nr_seq_segurado 	= s.nr_sequencia and s.nr_seq_plano 		= pl.nr_sequencia  and cm.nr_seq_conta = c.nr_sequencia and r.nr_seq_conta_proc = cm.nr_sequencia and t.dt_liquidacao between dt_periodo_inicial_w and dt_periodo_final_w and p.dt_mes_competencia <= dt_periodo_final_w and substr(cm.cd_classif_cred,1,5) = '2.1.1' and pl.ie_preco = '1' and cm.ie_status not in ('D','M')
	
union all

	select	obter_meses_entre_datas_util(trunc(p.dt_mes_competencia,'month'),dt_periodo_final_w) nr_periodo,
		t.dt_liquidacao dt_mes_competencia,
		coalesce(CASE WHEN ie_nao_aplica_recalc_w='S' THEN coalesce(e.vl_item, r.vl_liberado)  ELSE r.vl_liberado END ,0) vl_evento,
		c.nr_sequencia nr_seq_conta,
		coalesce(r.nr_seq_conta_mat,r.nr_seq_conta_proc) nr_seq_item,
		(select y.dt_procedimento
                from    pls_conta_proc y
                where   r.nr_seq_conta_proc = y.nr_sequencia
                
union

                select  y.dt_atendimento
                from    pls_conta_mat y
                where   r.nr_seq_conta_mat = y.nr_sequencia) dt_ocorrencia,
		c.nr_seq_segurado
	FROM pls_pag_prest_vencimento ve, titulo_pagar t, pls_segurado s, pls_plano pl, pls_pagamento_prestador pe, pls_protocolo_conta p, pls_pagamento_item i, pls_conta c, pls_conta_medica_resumo r
LEFT OUTER JOIN pls_item_recalculo e ON (r.nr_sequencia = e.nr_seq_conta_resumo)
WHERE p.nr_sequencia 		= c.nr_seq_protocolo and c.nr_sequencia		= r.nr_seq_conta and i.nr_sequencia 		= r.nr_seq_pag_item and i.nr_seq_pagamento 	= pe.nr_sequencia and ve.nr_seq_pag_prestador = pe.nr_sequencia and ve.nr_titulo 		= t.nr_titulo and c.nr_seq_segurado 	= s.nr_sequencia and s.nr_seq_plano 		= pl.nr_sequencia  and t.dt_liquidacao between dt_periodo_inicial_w and dt_periodo_final_w and p.dt_mes_competencia <= dt_periodo_final_w and substr(r.cd_classif_cred,1,5) = '2.1.1' and pl.ie_preco = '1' and exists (	select	1
			from	pls_conta_proc w
			where	w.nr_sequencia = r.nr_seq_conta_proc
			and	w.nr_seq_conta = r.nr_seq_conta
			and	w.ie_status not in ('D','M')
			
union all

			select	1
			from	pls_conta_mat w
			where	w.nr_sequencia = r.nr_seq_conta_mat
			and	w.nr_seq_conta = r.nr_seq_conta
			and	w.ie_status not in ('D','M'))	
	 
union all

	select	obter_meses_entre_datas_util(trunc(p.dt_mes_competencia,'month'),dt_periodo_final_w) nr_periodo,
		t.dt_liquidacao dt_mes_competencia,
		coalesce((dividir(o.vl_liberado * v.vl_liquido,pls_obter_valor_lote_resumo(l.nr_sequencia))),0) vl_evento,
		c.nr_sequencia nr_seq_conta,
		o.nr_sequencia nr_seq_item,
		o.dt_procedimento dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta		p,
		pls_prot_conta_titulo		u,
		pls_conta			c,
		pls_conta_proc			o,
		pls_lote_protocolo		l,
		pls_lote_protocolo_venc		v,
		pls_segurado			s,
		pls_plano			a,
		titulo_pagar			t
	where	p.nr_sequencia	= c.nr_seq_protocolo
	and	p.nr_sequencia	= u.nr_seq_protocolo
	and	v.nr_seq_lote	= u.nr_seq_lote
	and	l.nr_sequencia	= v.nr_seq_lote
	and	v.nr_titulo	= t.nr_titulo
	and	c.nr_sequencia	= o.nr_seq_conta
	and	s.nr_sequencia	= c.nr_seq_segurado
	and	a.nr_sequencia	= s.nr_seq_plano
	and	coalesce(o.cd_classif_cred::text, '') = ''
	and	t.dt_liquidacao between dt_periodo_inicial_w and dt_periodo_final_w
	and	p.dt_mes_competencia <= dt_periodo_final_w
	and	o.cd_conta_cred	in (	select 	cd_conta_contabil
					from	conta_contabil
					where	substr(ctb_obter_classif_conta(cd_conta_contabil, cd_classificacao, p.dt_mes_competencia),1,5) = '2.1.1'
					and	ie_tipo = 'A')
	and	not 	exists (select	1
				from	pls_conta_medica_resumo		r,
					pls_lote_pagamento		l
				where	c.nr_sequencia	= r.nr_seq_conta
				and	l.nr_sequencia	= r.nr_seq_lote_pgto)
	and	a.ie_preco = '1'
	and	o.ie_status not in ('D','M')
	
union all

	select	obter_meses_entre_datas_util(trunc(p.dt_mes_competencia,'month'),dt_periodo_final_w) nr_periodo,
		t.dt_liquidacao dt_mes_competencia,
		coalesce(dividir(m.vl_liberado * v.vl_liquido, pls_obter_valor_lote_resumo(l.nr_sequencia)),0) vl_evento,
		c.nr_sequencia nr_seq_conta,
		m.nr_sequencia nr_seq_item,
		m.dt_atendimento dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta		p,
		pls_prot_conta_titulo		u,
		pls_conta			c,
		pls_conta_mat			m,
		pls_lote_protocolo		l,
		pls_lote_protocolo_venc		v,
		pls_segurado			s,
		pls_plano			a,
		titulo_pagar			t
	where	p.nr_sequencia	= c.nr_seq_protocolo
	and	p.nr_sequencia	= u.nr_seq_protocolo
	and	v.nr_seq_lote	= u.nr_seq_lote
	and	l.nr_sequencia	= v.nr_seq_lote
	and	v.nr_titulo	= t.nr_titulo
	and	c.nr_sequencia	= m.nr_seq_conta
	and	s.nr_sequencia	= c.nr_seq_segurado
	and	a.nr_sequencia	= s.nr_seq_plano
	and	coalesce(m.cd_classif_cred::text, '') = ''
	and	t.dt_liquidacao between dt_periodo_inicial_w and dt_periodo_final_w
	and	p.dt_mes_competencia <= dt_periodo_final_w
	and	m.cd_conta_cred	in (	select 	cd_conta_contabil
					from	conta_contabil
					where	substr(ctb_obter_classif_conta(cd_conta_contabil, cd_classificacao, p.dt_mes_competencia),1,5) = '2.1.1'
					and	ie_tipo = 'A')
	and	not 	exists (select	1
				from	pls_conta_medica_resumo		r,
					pls_lote_pagamento		l
				where	c.nr_sequencia	= r.nr_seq_conta
				and	l.nr_sequencia	= r.nr_seq_lote_pgto)
	and	a.ie_preco = '1'
	and	m.ie_status not in ('D','M')
	
union all

	select	obter_meses_entre_datas_util(trunc(p.dt_mes_competencia,'month'),dt_periodo_final_w) nr_periodo,
		t.dt_liquidacao dt_mes_competencia,
		coalesce(o.vl_liberado,0) - coalesce(o.vl_coparticipacao,0),
		c.nr_sequencia nr_seq_conta,
		o.nr_sequencia nr_seq_item,
		o.dt_procedimento dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta	p,
		pls_conta		c,
		pls_conta_proc		o,
		titulo_pagar		t,
		pls_segurado		s,
		pls_plano		a
	where	p.nr_sequencia	= c.nr_seq_protocolo
	and	c.nr_sequencia	= o.nr_seq_conta
	and	p.nr_sequencia	= t.nr_seq_reembolso
	and	c.nr_seq_segurado = s.nr_sequencia
	and	s.nr_seq_plano = a.nr_sequencia
	and	t.dt_liquidacao between dt_periodo_inicial_w and dt_periodo_final_w
	and	t.ie_situacao	<> 'C'
	and	p.dt_mes_competencia <= dt_periodo_final_w
	and	o.cd_conta_cred	in (	select 	cd_conta_contabil
					from	conta_contabil
					where	substr(ctb_obter_classif_conta(cd_conta_contabil, cd_classificacao, p.dt_mes_competencia),1,5) = '2.1.1'
					and	ie_tipo = 'A')
	and	a.ie_preco = '1'
	and	o.ie_status not in ('D','M')
	
union all

	select	obter_meses_entre_datas_util(trunc(p.dt_mes_competencia,'month'),dt_periodo_final_w) nr_periodo,
		t.dt_liquidacao dt_mes_competencia,
		coalesce(o.vl_liberado,0) - coalesce(o.vl_participacao,0),
		c.nr_sequencia nr_seq_conta,
		o.nr_sequencia nr_seq_item,
		o.dt_atendimento dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta	p,
		pls_conta		c,
		pls_conta_mat		o,
		titulo_pagar		t,
		pls_segurado		s,
		pls_plano		a
	where	p.nr_sequencia	= c.nr_seq_protocolo
	and	c.nr_sequencia	= o.nr_seq_conta
	and	p.nr_sequencia	= t.nr_seq_reembolso
	and	c.nr_seq_segurado = s.nr_sequencia
	and	s.nr_seq_plano = a.nr_sequencia
	and	t.dt_liquidacao between dt_periodo_inicial_w and dt_periodo_final_w
	and	t.ie_situacao	<> 'C'
	and	p.dt_mes_competencia <= dt_periodo_final_w
	and	o.cd_conta_cred	in (	select 	cd_conta_contabil
					from	conta_contabil
					where	substr(ctb_obter_classif_conta(cd_conta_contabil, cd_classificacao, p.dt_mes_competencia),1,5) = '2.1.1'
					and	ie_tipo = 'A')
	and	a.ie_preco = '1'
	and	o.ie_status not in ('D','M')
	order by dt_mes_competencia desc;

vet_evt_pago c_evento_pagto%ROWTYPE;

c_avisos_mes CURSOR FOR
	SELECT 	--obter_meses_entre_datas_util(trunc(nvl(c.dt_atendimento_referencia, c.dt_atendimento),'month'),dt_fim_n_w) nr_periodo,
		trunc(coalesce(c.dt_atendimento_referencia, c.dt_atendimento)) dt_atendimento_referencia,
		p.dt_mes_competencia dt_mes_competencia,
		coalesce(CASE WHEN p.ie_tipo_protocolo='R' THEN  cp.vl_procedimento_imp  ELSE CASE WHEN cp.vl_provisao=0 THEN cp.vl_procedimento_imp  ELSE cp.vl_provisao END  END ,0) vl_pago,
		coalesce(cp.vl_glosa,0) vl_glosa,
		CASE WHEN p.ie_tipo_protocolo='I' THEN  0   ELSE coalesce(cp.vl_provisao,0) - coalesce((	SELECT	max(r.vl_liberado)											from	pls_conta_medica_resumo	r											where	cp.nr_sequencia		= r.nr_seq_conta_proc											and	c.nr_sequencia		= r.nr_seq_conta),0) END  vl_ajuste,
		c.nr_sequencia nr_seq_conta,
		cp.nr_sequencia nr_seq_item,
		c.ie_tipo_segurado ie_tipo_segurado,
		cp.dt_procedimento dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta p,
		pls_conta c,
		pls_conta_proc cp,
		pls_segurado s,
		pls_plano pl
	where	p.nr_sequencia = c.nr_seq_protocolo
	and	c.nr_sequencia = cp.nr_seq_conta
	and	c.nr_seq_segurado = s.nr_sequencia
	and	s.nr_seq_plano = pl.nr_sequencia
	--and	cp.cd_classif_deb is null
	and	cp.cd_conta_deb	in (	select 	cd_conta_contabil
					from	conta_contabil
					where	substr(ctb_obter_classif_conta(cd_conta_contabil, cd_classificacao, p.dt_mes_competencia),1,5) = '4.1.1'
					and	ie_tipo = 'A')
	and	p.dt_mes_competencia between dt_inicial_n_w and dt_fim_n_w
	--and	nvl(cp.dt_procedimento,p.dt_mes_competencia) <= dt_fim_n_w
	and	pl.ie_preco = '1'
	and	not exists (	select	1
				from	pls_conta_medica_resumo	r
				where	c.nr_sequencia	= r.nr_seq_conta
				and	cp.nr_sequencia	= r.nr_seq_conta_proc
				and	(r.cd_conta_prov_deb IS NOT NULL AND r.cd_conta_prov_deb::text <> ''))
	and	cp.ie_status not in ('D','M')
	
union all

	select 	--obter_meses_entre_datas_util(trunc(nvl(c.dt_atendimento_referencia, c.dt_atendimento),'month'),dt_fim_n_w) nr_periodo,
		trunc(coalesce(c.dt_atendimento_referencia, c.dt_atendimento)) dt_atendimento_referencia,
		p.dt_mes_competencia dt_mes_competencia,
		coalesce(CASE WHEN p.ie_tipo_protocolo='R' THEN  cm.vl_material_imp  ELSE CASE WHEN cm.vl_provisao=0 THEN cm.vl_material_imp  ELSE cm.vl_provisao END  END ,0) vl_pago,
		coalesce(cm.vl_glosa,0) vl_glosa,
		CASE WHEN p.ie_tipo_protocolo='I' THEN  0  ELSE coalesce(cm.vl_provisao,0) - coalesce((	select	max(r.vl_liberado)											from	pls_conta_medica_resumo	r											where	cm.nr_sequencia		= r.nr_seq_conta_mat											and	c.nr_sequencia		= r.nr_seq_conta),0) END  vl_ajuste,
		c.nr_sequencia nr_seq_conta,
		cm.nr_sequencia nr_seq_item,
		c.ie_tipo_segurado ie_tipo_segurado,
		cm.dt_atendimento dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta p,
		pls_conta c,
		pls_conta_mat cm,
		pls_segurado s,
		pls_plano pl
	where	p.nr_sequencia = c.nr_seq_protocolo
	and	c.nr_sequencia = cm.nr_seq_conta
	and	c.nr_seq_segurado = s.nr_sequencia
	and	s.nr_seq_plano = pl.nr_sequencia
	--and	cm.cd_classif_deb is null
	and	cm.cd_conta_deb	 in (	select 	cd_conta_contabil
					from	conta_contabil
					where	substr(ctb_obter_classif_conta(cd_conta_contabil, cd_classificacao, p.dt_mes_competencia),1,5) = '4.1.1'
					and	ie_tipo = 'A')
	and	p.dt_mes_competencia between dt_inicial_n_w and dt_fim_n_w
	--and	nvl(cm.dt_atendimento,p.dt_mes_competencia) <= dt_fim_n_w
	and	pl.ie_preco = '1'
	and	not exists (	select	1
				from	pls_conta_medica_resumo	r
				where	c.nr_sequencia	= r.nr_seq_conta
				and	cm.nr_sequencia	= r.nr_seq_conta_mat
				and	(r.cd_conta_prov_deb IS NOT NULL AND r.cd_conta_prov_deb::text <> ''))
	and	cm.ie_status not in ('D','M')
	
union all

	select 	--obter_meses_entre_datas_util(trunc(nvl(c.dt_atendimento_referencia, c.dt_atendimento),'month'),dt_fim_n_w) nr_periodo,
		trunc(coalesce(c.dt_atendimento_referencia, c.dt_atendimento)) dt_atendimento_referencia,
		p.dt_mes_competencia dt_mes_competencia,
		coalesce(pls_obter_valor_prov_resumo(r.nr_seq_conta,r.nr_sequencia,r.vl_apresentado,r.vl_calculado,r.vl_liberado,r.vl_taxa_adm,r.vl_taxa_adm_co,r.vl_taxa_adm_mat,ie_forma_contab_taxa_pgto_w,'P'),0) vl_pago,
		coalesce(r.vl_glosa,0) vl_glosa,
		coalesce(pls_obter_valor_prov_resumo(r.nr_seq_conta,r.nr_sequencia,r.vl_apresentado,r.vl_calculado,r.vl_liberado,r.vl_taxa_adm,r.vl_taxa_adm_co,r.vl_taxa_adm_mat,ie_forma_contab_taxa_pgto_w,'A'),0) vl_ajuste,
		c.nr_sequencia nr_seq_conta,
		cp.nr_sequencia nr_seq_item,
		c.ie_tipo_segurado ie_tipo_segurado,
		(select y.dt_procedimento
                from    pls_conta_proc y
                where   r.nr_seq_conta_proc = y.nr_sequencia

union

                select  y.dt_atendimento
                from    pls_conta_mat y
                where   r.nr_seq_conta_mat = y.nr_sequencia) dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta p,
		pls_conta c,
		pls_conta_medica_resumo r,
		pls_conta_proc cp,
		pls_segurado s,
		pls_plano pl
	where	p.nr_sequencia = c.nr_seq_protocolo
	and	c.nr_sequencia = r.nr_seq_conta
	and	c.nr_seq_segurado = s.nr_sequencia
	and	s.nr_seq_plano = pl.nr_sequencia
	and	c.nr_sequencia = cp.nr_seq_conta
	and	cp.nr_sequencia = r.nr_seq_conta_proc
	and	substr(r.cd_classif_prov_deb,1,5) = '4.1.1'
	and	p.dt_mes_competencia between dt_inicial_n_w and dt_fim_n_w
	--and	cp.dt_procedimento <= dt_fim_n_w
	and 	coalesce(r.ie_situacao,'A') 	= 'A'
	and	pl.ie_preco = '1'
	and	cp.ie_status not in ('D','M')
	
union all

	select 	--obter_meses_entre_datas_util(trunc(nvl(c.dt_atendimento_referencia, c.dt_atendimento),'month'),dt_fim_n_w) nr_periodo,
		trunc(coalesce(c.dt_atendimento_referencia, c.dt_atendimento)) dt_atendimento_referencia,
		p.dt_mes_competencia dt_mes_competencia,
 		coalesce(pls_obter_valor_prov_resumo(r.nr_seq_conta,r.nr_sequencia,r.vl_apresentado,r.vl_calculado,r.vl_liberado,r.vl_taxa_adm,r.vl_taxa_adm_co,r.vl_taxa_adm_mat,ie_forma_contab_taxa_pgto_w,'P'),0) vl_pago,
		coalesce(r.vl_glosa,0) vl_glosa,
		coalesce(pls_obter_valor_prov_resumo(r.nr_seq_conta,r.nr_sequencia,r.vl_apresentado,r.vl_calculado,r.vl_liberado,r.vl_taxa_adm,r.vl_taxa_adm_co,r.vl_taxa_adm_mat,ie_forma_contab_taxa_pgto_w,'A'),0) vl_ajuste,
		c.nr_sequencia nr_seq_conta,
		cm.nr_sequencia nr_seq_item,
		c.ie_tipo_segurado ie_tipo_segurado,
		(select y.dt_procedimento
                from    pls_conta_proc y
                where   r.nr_seq_conta_proc = y.nr_sequencia
                
union

                select  y.dt_atendimento
                from    pls_conta_mat y
                where   r.nr_seq_conta_mat = y.nr_sequencia) dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta p,
		pls_conta c,
		pls_conta_medica_resumo r,
		pls_conta_mat cm,
		pls_segurado s,
		pls_plano pl
	where	p.nr_sequencia = c.nr_seq_protocolo
	and	c.nr_sequencia = r.nr_seq_conta
	and	c.nr_seq_segurado = s.nr_sequencia
	and	s.nr_seq_plano = pl.nr_sequencia
	and	c.nr_sequencia = cm.nr_seq_conta
	and	cm.nr_sequencia = r.nr_seq_conta_mat
	and	substr(r.cd_classif_prov_deb,1,5) = '4.1.1'
	and	p.dt_mes_competencia between dt_inicial_n_w and dt_fim_n_w
	--and	cm.dt_atendimento <= dt_fim_n_w
	and	pl.ie_preco = '1'
	and 	coalesce(r.ie_situacao,'A') 	= 'A'
	and	cm.ie_status not in ('D','M')
	order by dt_mes_competencia desc;

vet_avisos c_avisos_mes%ROWTYPE;

c_tributo CURSOR FOR
	SELECT	(pkg_date_utils.extract_field('MONTH', l.dt_mes_competencia))::numeric  mes_n,
		coalesce(b.vl_evento,0) vl_imposto
	from	pls_lote_pagamento		l,
		pls_pagamento_prestador		p,
		pls_pagamento_item		i,
		pls_pag_item_trib		b
	where	l.nr_sequencia	= p.nr_seq_lote
	and	p.nr_sequencia	= i.nr_seq_pagamento
	and	i.nr_sequencia	= b.nr_seq_pagamento
	and	l.dt_mes_competencia between pkg_date_utils.add_month(dt_periodo_final_w,-2,0) and dt_periodo_final_w
	group by (pkg_date_utils.extract_field('MONTH', l.dt_mes_competencia))::numeric;

vet_tributo	c_tributo%rowtype;

--Como o DIOPS ainda esta em discussao, devemos deixar a coparticipacao comentada caso ela venha a voltar, pois ja foi validado e testados
c_copartic CURSOR FOR
	SELECT	obter_meses_entre_datas_util(trunc(c.dt_atendimento,'month'),dt_fim_n_w) nr_periodo,
		v.dt_referencia dt_mes_competencia,
		coalesce(b.vl_coparticipacao,0) vl_coparticipacao,
		c.nr_sequencia nr_seq_conta,
		coalesce(o.nr_seq_conta_proc,o.nr_seq_conta_mat) nr_seq_item,
		c.ie_tipo_segurado ie_tipo_segurado,
		(SELECT y.dt_procedimento
                from    pls_conta_proc y
                where   y.nr_sequencia = o.nr_seq_conta_proc

union

                select  y.dt_atendimento
                from    pls_conta_mat y
                where   y.nr_sequencia = o.nr_seq_conta_mat) dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_mensalidade_seg_item 	x,
		pls_mensalidade_segurado 	t,
		pls_segurado 			u,
		pls_mensalidade 		v,
		pls_contrato_pagador 		d,
		pls_lote_mensalidade 		e,
		pls_contrato 			f,
		pls_plano 			g,
		pls_conta			c,
		pls_conta_coparticipacao	o,
		pls_conta_copartic_contab	b
	where	u.nr_sequencia		= t.nr_seq_segurado
	and	v.nr_sequencia		= t.nr_seq_mensalidade
	and	d.nr_sequencia		= v.nr_seq_pagador
	and	e.nr_sequencia		= v.nr_seq_lote
	and	f.nr_sequencia		= d.nr_seq_contrato
	and	g.nr_sequencia		= u.nr_seq_plano
	and	x.nr_seq_mensalidade_seg = t.nr_sequencia
	and	c.nr_sequencia		= x.nr_seq_conta
	and	c.nr_sequencia		= o.nr_seq_conta
	and	o.nr_sequencia		= b.nr_seq_conta_copartic
	and	b.dt_mes_competencia	between dt_inicial_n_w and dt_fim_n_w
	and	coalesce(v.ie_cancelamento::text, '') = ''
	and	x.ie_tipo_item = '3'
	and	1 = 2
	and	g.ie_preco = '1'
	
union all

	select	obter_meses_entre_datas_util(trunc(coalesce(c.dt_atendimento_referencia, c.dt_atendimento),'month'),dt_fim_n_w) nr_periodo,
		p.dt_mes_competencia dt_mes_competencia,
		coalesce(b.vl_coparticipacao,0),
		c.nr_sequencia nr_seq_conta_medica,
		coalesce(o.nr_seq_conta_proc,o.nr_seq_conta_mat) nr_seq_item,
		c.ie_tipo_segurado ie_tipo_segurado,
		(select y.dt_procedimento
                from    pls_conta_proc y
                where   y.nr_sequencia = o.nr_seq_conta_proc
                
union

                select  y.dt_atendimento
                from    pls_conta_mat y
                where   y.nr_sequencia = o.nr_seq_conta_mat) dt_ocorrencia,
		c.nr_seq_segurado
	from	pls_protocolo_conta		p,
		pls_conta			c,
		pls_conta_coparticipacao	o,
		pls_conta_copartic_contab	b,
		pls_segurado 			u,
		pls_plano 			g
	where	p.nr_sequencia		= c.nr_seq_protocolo
	and	c.nr_sequencia		= o.nr_seq_conta
	and	o.nr_sequencia		= b.nr_seq_conta_copartic
	and	c.nr_seq_segurado	= u.nr_sequencia
	and	u.nr_seq_plano		= g.nr_sequencia
	and	b.dt_mes_competencia 	between dt_inicial_n_w and dt_fim_n_w
	and 	p.ie_situacao		in ('D','T')
	and	p.ie_tipo_protocolo	in ('C','I', 'R')
	and	g.ie_preco = '1';

vet_copartic c_copartic%ROWTYPE;

c_agrupar_movimentos CURSOR FOR
	SELECT	obter_meses_entre_datas_util(trunc(w.dt_mes_competencia,'month'),dt_periodo_final_w) nr_periodo,
		coalesce(sum(w.vl_evento),0) vl_evento
	from	w_diops_movto_pel	w
	where	w.nr_seq_periodo 	= nr_seq_periodo_p
	and	w.nr_seq_tipo_movto 	= nr_seq_tipo_movto_w
	and 	coalesce(w.ie_tipo_segurado, 'X') 	<> 'R'
	group by  trunc(w.dt_mes_competencia,'month')
	order by nr_periodo;

vet_agrupar_movimentos c_agrupar_movimentos%ROWTYPE;

c_agrupar_movimentos_repasse CURSOR FOR
	SELECT	obter_meses_entre_datas_util(trunc(w.dt_mes_competencia,'month'),dt_periodo_final_w) nr_periodo,
		coalesce(sum(w.vl_evento),0) vl_evento
	from	w_diops_movto_pel	w
	where	w.nr_seq_periodo 	= nr_seq_periodo_p
	and	w.nr_seq_tipo_movto 	= nr_seq_tipo_movto_w
	and	w.ie_tipo_segurado 	= 'R'
	group by  trunc(w.dt_mes_competencia,'month')
	order by nr_periodo;

vet_agrupar_movimentos_repasse c_agrupar_movimentos_repasse%ROWTYPE;

c_conta_peona CURSOR FOR
	SELECT	coalesce(c.cd_conta_contabil,'0') cd_conta_contabil
	from	conta_contabil c
	where	c.cd_empresa = cd_empresa_w
	and	((replace(ctb_obter_classif_conta(c.cd_conta_contabil, c.cd_classificacao,dt_periodo_final_w),'.','') in ('211111041', '211121041', '231111041', '231121041') and ie_2019_ou_posterior_w = 'S')
	or (replace(ctb_obter_classif_conta(c.cd_conta_contabil, c.cd_classificacao,dt_periodo_final_w),'.','') in ('211119041', '211129041', '231119041', '231129041') and ie_2019_ou_posterior_w = 'N'));		

vet_conta_peona c_conta_peona%rowtype;	
	
BEGIN

nr_contador_w := 0;

ie_nao_aplica_recalc_w := obter_param_usuario(1314, 3, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_nao_aplica_recalc_w);
pls_obter_pls_parametros(cd_estabelecimento_p,'ie_movto_pel','G',ie_movto_pel_w);

select	coalesce(max(ie_lote_ajuste_prod),'R'),
	coalesce(max(ie_forma_contab_taxa_pgto),'N')
into STRICT	ie_lote_ajuste_prod_w,
	ie_forma_contab_taxa_pgto_w
from	pls_parametro_contabil
where	cd_estabelecimento	= cd_estabelecimento_p;

/*Desfazer a Geracao Anterior*/

if (nr_seq_identificador_p in (0,34)) then
	delete 	FROM diops_movto_pel
	where	nr_seq_periodo			= nr_seq_periodo_p;

	delete	FROM w_diops_movto_pel
	where	nr_seq_periodo			= nr_seq_periodo_p
	and	coalesce(ie_tipo_segurado, 'X') 	<> 'R';
end if;

if (nr_seq_identificador_p in (0,40)) then
	delete 	FROM diops_movto_corresp_cedida
	where	nr_seq_periodo 		= nr_seq_periodo_p;

	delete	FROM w_diops_movto_pel
	where	nr_seq_periodo		= nr_seq_periodo_p
	and	ie_tipo_segurado 	= 'R';
end if;




commit;

-- Buscar periodo do DIOPS

--
select	max(dt_periodo_inicial),
	max(dt_periodo_final)
into STRICT	dt_periodo_inicial_w,
	dt_periodo_final_w
from	diops_periodo
where	nr_sequencia = nr_seq_periodo_p;


if (dt_periodo_inicial_w >= to_date('01/01/2019', 'dd/mm/yyyy')) then
	ie_2019_ou_posterior_w := 'S';
else
	ie_2019_ou_posterior_w := 'N';
end if;
--dt_inicio_w 	:= pkg_date_utils.start_of(dt_periodo_final_w,'MONTH',0);
dt_fim_w	:= fim_dia(dt_periodo_final_w);

vl_mes_n_w	:= 0;
vl_mes_n1_w	:= 0;
vl_mes_n2_w	:= 0;

if (ie_movto_pel_w in ('G','GI')) then
	begin
	/*Gerar valores nas linhas que foram geradas pelo cursor c_movimentos_pel*/

	
	open c_evento_pagto;
	loop
	fetch c_evento_pagto into
		vet_evt_pago;
	EXIT WHEN NOT FOUND; /* apply on c_evento_pagto */
		begin
		nr_contador_w := nr_contador_w + 1;

		nr_seq_tipo_movto_pgto_w := 	case vet_evt_pago.nr_periodo
							when 0 then -- se for no mes (n)
							3
							when 1 then -- se for no mes anterior (n-1)
							5
							when 2 then -- se for dois meses anteriores (n-2)
							6
							else -- se for no mes anterior (n-3 ou anteriores)
							7
							end;
							
		ie_tipo_compartilhamento_w	:= null;
		ie_benef_compartilhado_w 	:= null;
		
		/* Obtem a sequencia referente ao repasse ocorrido na data de atendimento*/

		select 	max(nr_sequencia)
		into STRICT	nr_seq_repasse_w
		from 	pls_segurado_repasse
		where	vet_evt_pago.nr_seq_segurado = nr_seq_segurado
		and	vet_evt_pago.dt_ocorrencia between dt_repasse and coalesce(dt_fim_repasse, vet_evt_pago.dt_ocorrencia);

		if (nr_seq_repasse_w IS NOT NULL AND nr_seq_repasse_w::text <> '') then
			select 	ie_tipo_compartilhamento
			into STRICT	ie_tipo_compartilhamento_w
			from 	pls_segurado_repasse
			where	nr_sequencia = nr_seq_repasse_w;
			
			if (ie_tipo_compartilhamento_w IS NOT NULL AND ie_tipo_compartilhamento_w::text <> '') then
				ie_benef_compartilhado_w := 'R';
			end if;
		end if;
		
		insert into w_diops_movto_pel( 	nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						dt_mes_competencia,
						nr_seq_periodo,
						nr_seq_tipo_movto,
						nr_seq_conta,
						nr_seq_item,
						vl_evento,
						ie_tipo_segurado)
				values (nextval('w_diops_movto_pel_seq'),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						vet_evt_pago.dt_mes_competencia,
						nr_seq_periodo_p,
						nr_seq_tipo_movto_pgto_w,
						vet_evt_pago.nr_seq_conta,
						vet_evt_pago.nr_seq_item,
						vet_evt_pago.vl_evento,
						CASE WHEN ie_2019_ou_posterior_w='S' THEN  ie_benef_compartilhado_w  ELSE null END );

		if (mod(nr_contador_w,1000) = 0) then
			commit;
		end if;

		end;
	end loop;
	close c_evento_pagto;

	commit;
	
	
	
	for i in 0..obter_meses_entre_datas_util(dt_periodo_inicial_w,dt_periodo_final_w) loop
		begin

		dt_fim_n_w:= fim_dia(PKG_DATE_UTILS.ADD_MONTH(dt_periodo_final_w, i * -1));
		
		dt_inicial_n_w:= trunc(dt_fim_n_w,'month');
		
		open c_avisos_mes;
		loop
		fetch c_avisos_mes into
			vet_avisos;
		EXIT WHEN NOT FOUND; /* apply on c_avisos_mes */
			begin
			
			nr_periodo_w:= 0;
			if (trunc(vet_avisos.dt_atendimento_referencia,'month') > trunc(vet_avisos.dt_mes_competencia,'month')) then
				nr_periodo_w:= obter_meses_entre_datas_util(trunc(vet_avisos.dt_mes_competencia,'month'),dt_fim_n_w);
			else
				nr_periodo_w:= obter_meses_entre_datas_util(trunc(vet_avisos.dt_atendimento_referencia,'month'),dt_fim_n_w);
			end if;
			
			if (ie_lote_ajuste_prod_w = 'P') and (vet_avisos.vl_ajuste > 0) then
				vet_avisos.vl_pago	:= vet_avisos.vl_pago + vet_avisos.vl_ajuste;
			end if;
			
			nr_contador_w := nr_contador_w + 1;

			nr_seq_tipo_movto_evento_w := 	case nr_periodo_w
								when 0 then -- se for no mes (n)
								9
								when 1 then -- se for no mes anterior (n-1)
								10
								when 2 then -- se for dois meses anteriores (n-2)
								11
								when 3 then -- se for dois meses anteriores (n-3)
								12
								when 4 then -- se for dois meses anteriores (n-4)
								13
								when 5 then -- se for dois meses anteriores (n-5)
								14
								when 6 then -- se for dois meses anteriores (n-6)
								15
								when 7 then -- se for dois meses anteriores (n-7)
								16
								when 8 then -- se for dois meses anteriores (n-8)
								17
								when 9 then -- se for dois meses anteriores (n-9)
								18
								when 10 then -- se for dois meses anteriores (n-10)
								19
								when 11 then -- se for dois meses anteriores (n-11)
								20
								when 12 then -- se for dois meses anteriores (n-12)
								21
								else -- se for no mes anterior (n-13 ou anteriores)
								22
								end;

			nr_seq_tipo_movto_glosa_w := 	case nr_periodo_w
								when 0 then -- se for no mes (n)
								24
								when 1 then -- se for no mes anterior (n-1)
								25
								when 2 then -- se for dois meses anteriores (n-2)
								26
								when 3 then -- se for dois meses anteriores (n-3)
								27
								when 4 then -- se for dois meses anteriores (n-4)
								28
								when 5 then -- se for dois meses anteriores (n-5)
								29
								when 6 then -- se for dois meses anteriores (n-6)
								30
								when 7 then -- se for dois meses anteriores (n-7)
								31
								when 8 then -- se for dois meses anteriores (n-8)
								32
								when 9 then -- se for dois meses anteriores (n-9)
								33
								when 10 then -- se for dois meses anteriores (n-10)
								34
								when 11 then -- se for dois meses anteriores (n-11)
								35
								when 12 then -- se for dois meses anteriores (n-12)
								36
								else -- se for no mes anterior (n-13 ou anteriores)
								37
								end;
			
			ie_tipo_compartilhamento_w	:= null;
			ie_benef_compartilhado_w 	:= null;
			
			/* Obtem a sequencia referente ao repasse ocorrido na data de atendimento*/

			select 	max(nr_sequencia)
			into STRICT	nr_seq_repasse_w
			from 	pls_segurado_repasse
			where	vet_avisos.nr_seq_segurado = nr_seq_segurado
			and	vet_avisos.dt_ocorrencia between dt_repasse and coalesce(dt_fim_repasse, vet_avisos.dt_ocorrencia);

			if (nr_seq_repasse_w IS NOT NULL AND nr_seq_repasse_w::text <> '') then
				select 	ie_tipo_compartilhamento
				into STRICT	ie_tipo_compartilhamento_w
				from 	pls_segurado_repasse
				where	nr_sequencia = nr_seq_repasse_w;
				
				if (ie_tipo_compartilhamento_w IS NOT NULL AND ie_tipo_compartilhamento_w::text <> '') then
					ie_benef_compartilhado_w := 'R';
				end if;
			end if;

			insert into w_diops_movto_pel(	nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nm_usuario_nrec,
							dt_atualizacao_nrec,
							dt_mes_competencia,
							nr_seq_periodo,
							nr_seq_tipo_movto,
							nr_seq_conta,
							nr_seq_item,
							vl_evento,
							ie_tipo_segurado)
					values (nextval('w_diops_movto_pel_seq'),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							vet_avisos.dt_mes_competencia,
							nr_seq_periodo_p,
							nr_seq_tipo_movto_evento_w,
							vet_avisos.nr_seq_conta,
							vet_avisos.nr_seq_item,
							vet_avisos.vl_pago,
							CASE WHEN ie_2019_ou_posterior_w='S' THEN  ie_benef_compartilhado_w  ELSE null END );

			insert into w_diops_movto_pel(	nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nm_usuario_nrec,
							dt_atualizacao_nrec,
							dt_mes_competencia,
							nr_seq_periodo,
							nr_seq_tipo_movto,
							nr_seq_conta,
							nr_seq_item,
							vl_evento,
							ie_tipo_segurado)
					values (nextval('w_diops_movto_pel_seq'),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							vet_avisos.dt_mes_competencia,
							nr_seq_periodo_p,
							nr_seq_tipo_movto_glosa_w,
							vet_avisos.nr_seq_conta,
							vet_avisos.nr_seq_item,
							vet_avisos.vl_glosa,
							CASE WHEN ie_2019_ou_posterior_w='S' THEN  ie_benef_compartilhado_w  ELSE null END );

			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;

			end;
		end loop;
		close c_avisos_mes;
		
		commit;

		open c_copartic;
		loop
		fetch c_copartic into
			vet_copartic;
		EXIT WHEN NOT FOUND; /* apply on c_copartic */
			begin
			nr_contador_w := nr_contador_w + 1;

			nr_seq_tipo_movto_copart_w := 	case vet_copartic.nr_periodo
								when 0 then -- se for no mes (n)
								43
								when 1 then -- se for no mes anterior (n-1)
								44
								when 2 then -- se for dois meses anteriores (n-2)
								45
								when 3 then -- se for dois meses anteriores (n-3)
								46
								when 4 then -- se for dois meses anteriores (n-4)
								47
								when 5 then -- se for dois meses anteriores (n-5)
								48
								when 6 then -- se for dois meses anteriores (n-6)
								49
								when 7 then -- se for dois meses anteriores (n-7)
								50
								when 8 then -- se for dois meses anteriores (n-8)
								51
								when 9 then -- se for dois meses anteriores (n-9)
								52
								when 10 then -- se for dois meses anteriores (n-10)
								53
								when 11 then -- se for dois meses anteriores (n-11)
								54
								when 12 then -- se for dois meses anteriores (n-12)
								55
								else -- se for no mes anterior (n-13 ou anteriores)
								56
								end;
			
			ie_tipo_compartilhamento_w	:= null;
			ie_benef_compartilhado_w 	:= null;
			
			select 	max(nr_sequencia)
			into STRICT	nr_seq_repasse_w
			from 	pls_segurado_repasse
			where	vet_copartic.nr_seq_segurado = nr_seq_segurado
			and	vet_copartic.dt_ocorrencia between dt_repasse and coalesce(dt_fim_repasse, vet_copartic.dt_ocorrencia);

			if (nr_seq_repasse_w IS NOT NULL AND nr_seq_repasse_w::text <> '') then
				select 	ie_tipo_compartilhamento
				into STRICT	ie_tipo_compartilhamento_w
				from 	pls_segurado_repasse
				where	nr_sequencia = nr_seq_repasse_w;
				
				if (ie_tipo_compartilhamento_w IS NOT NULL AND ie_tipo_compartilhamento_w::text <> '') then
					ie_benef_compartilhado_w := 'R';
				end if;
			end if;
		
			insert into w_diops_movto_pel(  nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nm_usuario_nrec,
							dt_atualizacao_nrec,
							dt_mes_competencia,
							nr_seq_periodo,
							nr_seq_tipo_movto,
							nr_seq_conta,
							nr_seq_item,
							vl_evento,
							ie_tipo_segurado)
					values (nextval('w_diops_movto_pel_seq'),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							vet_copartic.dt_mes_competencia,
							nr_seq_periodo_p,
							nr_seq_tipo_movto_copart_w,
							vet_copartic.nr_seq_conta,
							vet_copartic.nr_seq_item,
							vet_copartic.vl_coparticipacao,
							CASE WHEN ie_2019_ou_posterior_w='S' THEN  ie_benef_compartilhado_w  ELSE null END );

			if (mod(nr_contador_w,1000) = 0) then
				commit;
			end if;

			end;
		end loop;
		close c_copartic;
		
		vl_valor_peona_w	:= 0;
		cd_empresa_w 		:= obter_empresa_estab(cd_estabelecimento_p);
		
		open c_conta_peona;
		loop
		fetch c_conta_peona into	
			vet_conta_peona;
		EXIT WHEN NOT FOUND; /* apply on c_conta_peona */
			begin
			
			vl_valor_peona_w:= vl_valor_peona_w + ctb_obter_valor_balancete(dt_inicial_n_w,vet_conta_peona.cd_conta_contabil, 'S', cd_empresa_w);
			
			end;
		end loop;
		close c_conta_peona;
		
		insert into w_diops_movto_pel(	nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						dt_mes_competencia,
						nr_seq_periodo,
						nr_seq_tipo_movto,
						vl_evento)
				values (nextval('w_diops_movto_pel_seq'),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						dt_inicial_n_w,
						nr_seq_periodo_p,
						57,
						vl_valor_peona_w);

		
		commit;
		
		end;
	end loop;
	
	end;
end if;	

commit;
	
--Obter o periodo anterior
select	max(a.nr_sequencia)
into STRICT	nr_seq_periodo_ant_w
from	diops_periodo	a
where	a.dt_periodo_final between trunc(add_months(dt_periodo_final_w,-5)) and fim_dia(fim_mes(add_months(dt_periodo_final_w,-3)))
and	a.ie_tipo_periodo_diops	in ('T','F');

select	ceil((to_char(dt_periodo_final_w,'mm'))::numeric  / 3) nr_mes
into STRICT	nr_mes_w
;

open c_movimentos_pel;
loop
fetch c_movimentos_pel into	
	nr_seq_tipo_movto_w,
	nr_seq_superior_w;
EXIT WHEN NOT FOUND; /* apply on c_movimentos_pel */
	begin
	if (nr_seq_identificador_p in (0, 34)) then
		vl_mes_n_w	:= 0;
		vl_mes_n1_w	:= 0;
		vl_mes_n2_w	:= 0;
		open c_agrupar_movimentos;
		loop
		fetch c_agrupar_movimentos into
			vet_agrupar_movimentos;
		EXIT WHEN NOT FOUND; /* apply on c_agrupar_movimentos */
			begin
			
			if (vet_agrupar_movimentos.nr_periodo = 0) then
				vl_mes_n_w		:= vet_agrupar_movimentos.vl_evento;
			elsif (vet_agrupar_movimentos.nr_periodo = 1) then
				vl_mes_n1_w		:= vet_agrupar_movimentos.vl_evento;
			elsif (vet_agrupar_movimentos.nr_periodo = 2) then
				vl_mes_n2_w		:= vet_agrupar_movimentos.vl_evento;
			end if;

			end;
		end loop;
		close c_agrupar_movimentos;

		select	coalesce(max(a.vl_mes_n),0),
			coalesce(max(a.vl_mes_n1),0),
			coalesce(max(a.vl_mes_n2),0),
			coalesce(max(a.vl_mes_n3),0),
			coalesce(max(a.vl_mes_n4),0),
			coalesce(max(a.vl_mes_n5),0),
			coalesce(max(a.vl_mes_n6),0),
			coalesce(max(a.vl_mes_n7),0),
			coalesce(max(a.vl_mes_n8),0),
			coalesce(max(a.vl_mes_n9),0),
			coalesce(max(a.vl_mes_n10),0),
			coalesce(max(a.vl_mes_n11),0),
			coalesce(max(a.vl_mes_n12),0),
			coalesce(max(a.vl_mes_n13),0),
			coalesce(max(a.vl_mes_n14),0),
			coalesce(max(a.vl_mes_n15),0),
			coalesce(max(a.vl_mes_n16),0),
			coalesce(max(a.vl_mes_n17),0),
			coalesce(max(a.vl_mes_n18),0),
			coalesce(max(a.vl_mes_n19),0),
			coalesce(max(a.vl_mes_n20),0),
			coalesce(max(a.vl_mes_n21),0),
			coalesce(max(a.vl_mes_n22),0),
			coalesce(max(a.vl_mes_n23),0),
			coalesce(max(a.vl_mes_n24),0),
			coalesce(max(a.vl_mes_n25),0),
			coalesce(max(a.vl_mes_n26),0),
			coalesce(max(a.vl_mes_n27),0),
			coalesce(max(a.vl_mes_n28),0),
			coalesce(max(a.vl_mes_n29),0),
			coalesce(max(a.vl_mes_n30),0),
			coalesce(max(a.vl_mes_n31),0),
			coalesce(max(a.vl_mes_n32),0)
		into STRICT	vl_mes_n3_w,
			vl_mes_n4_w,
			vl_mes_n5_w,
			vl_mes_n6_w,
			vl_mes_n7_w,
			vl_mes_n8_w,
			vl_mes_n9_w,
			vl_mes_n10_w,
			vl_mes_n11_w,
			vl_mes_n12_w,
			vl_mes_n13_w,
			vl_mes_n14_w,
			vl_mes_n15_w,
			vl_mes_n16_w,
			vl_mes_n17_w,
			vl_mes_n18_w,
			vl_mes_n19_w,
			vl_mes_n20_w,
			vl_mes_n21_w,
			vl_mes_n22_w,
			vl_mes_n23_w,
			vl_mes_n24_w,
			vl_mes_n25_w,
			vl_mes_n26_w,
			vl_mes_n27_w,
			vl_mes_n28_w,
			vl_mes_n29_w,
			vl_mes_n30_w,
			vl_mes_n31_w,
			vl_mes_n32_w,
			vl_mes_n33_w,
			vl_mes_n34_w,
			vl_mes_n35_w
		from	diops_movto_pel		a
		where	a.nr_seq_periodo	= nr_seq_periodo_ant_w
		and	a.nr_seq_tipo_movto	= nr_seq_tipo_movto_w;
				
		insert into diops_movto_pel(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_tipo_movto,
				nr_seq_periodo,
				vl_mes_n,
				vl_mes_n1,
				vl_mes_n2,
				vl_mes_n3,
				vl_mes_n4,
				vl_mes_n5,
				vl_mes_n6,
				vl_mes_n7,
				vl_mes_n8,
				vl_mes_n9,
				vl_mes_n10,
				vl_mes_n11,
				vl_mes_n12,
				vl_mes_n13,
				vl_mes_n14,
				vl_mes_n15,
				vl_mes_n16,
				vl_mes_n17,
				vl_mes_n18,
				vl_mes_n19,
				vl_mes_n20,
				vl_mes_n21,
				vl_mes_n22,
				vl_mes_n23,
				vl_mes_n24,
				vl_mes_n25,
				vl_mes_n26,
				vl_mes_n27,
				vl_mes_n28,
				vl_mes_n29,
				vl_mes_n30,
				vl_mes_n31,
				vl_mes_n32,
				vl_mes_n33,
				vl_mes_n34,
				vl_mes_n35)
		values (	nextval('diops_movto_pel_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_tipo_movto_w,
				nr_seq_periodo_p,
				vl_mes_n_w,
				vl_mes_n1_w,
				vl_mes_n2_w,
				vl_mes_n3_w,
				vl_mes_n4_w,
				vl_mes_n5_w,
				vl_mes_n6_w,
				vl_mes_n7_w,
				vl_mes_n8_w,
				vl_mes_n9_w,
				vl_mes_n10_w,
				vl_mes_n11_w,
				vl_mes_n12_w,
				vl_mes_n13_w,
				vl_mes_n14_w,
				vl_mes_n15_w,
				vl_mes_n16_w,
				vl_mes_n17_w,
				vl_mes_n18_w,
				vl_mes_n19_w,
				vl_mes_n20_w,
				vl_mes_n21_w,
				vl_mes_n22_w,
				vl_mes_n23_w,
				vl_mes_n24_w,
				vl_mes_n25_w,
				vl_mes_n26_w,
				vl_mes_n27_w,
				vl_mes_n28_w,
				vl_mes_n29_w,
				vl_mes_n30_w,
				vl_mes_n31_w,
				vl_mes_n32_w,
				vl_mes_n33_w,
				vl_mes_n34_w,
				vl_mes_n35_w);

		if (coalesce(nr_seq_superior_w,0) <> 0) then
			CALL pls_atualizar_totalizador_pel(nm_usuario_p,nr_seq_superior_w,nr_seq_periodo_p);
		end if;	
	end if;

	/* Verifica o nr_seq_tipo_movto_w <> 57 pois este valor e referente ao tipo de movimento PEONA, que nao esta presente no quadro de corresponsabilidade cedida*/

	if (nr_seq_identificador_p in (0, 40) and nr_seq_tipo_movto_w <> 57) and (((dt_periodo_inicial_w >= pkg_date_utils.get_dateTime(2022, 01, 01))
            and (nr_seq_tipo_movto_w < 23)) 
            or (dt_periodo_inicial_w < pkg_date_utils.get_dateTime(2022, 01, 01))) then
		vl_mes_n_w	:= 0;
		vl_mes_n1_w	:= 0;
		vl_mes_n2_w	:= 0;
		
		open c_agrupar_movimentos_repasse;
		loop
		fetch c_agrupar_movimentos_repasse into
			vet_agrupar_movimentos_repasse;
		EXIT WHEN NOT FOUND; /* apply on c_agrupar_movimentos_repasse */
			begin
			
			if (vet_agrupar_movimentos_repasse.nr_periodo = 0) then
				vl_mes_n_w		:= vet_agrupar_movimentos_repasse.vl_evento;
			elsif (vet_agrupar_movimentos_repasse.nr_periodo = 1) then
				vl_mes_n1_w		:= vet_agrupar_movimentos_repasse.vl_evento;
			elsif (vet_agrupar_movimentos_repasse.nr_periodo = 2) then
				vl_mes_n2_w		:= vet_agrupar_movimentos_repasse.vl_evento;
			end if;

			end;
		end loop;
		close c_agrupar_movimentos_repasse;


		select	coalesce(max(a.vl_mes_n),0),
			coalesce(max(a.vl_mes_n1),0),
			coalesce(max(a.vl_mes_n2),0),
			coalesce(max(a.vl_mes_n3),0),
			coalesce(max(a.vl_mes_n4),0),
			coalesce(max(a.vl_mes_n5),0),
			coalesce(max(a.vl_mes_n6),0),
			coalesce(max(a.vl_mes_n7),0),
			coalesce(max(a.vl_mes_n8),0),
			coalesce(max(a.vl_mes_n9),0),
			coalesce(max(a.vl_mes_n10),0),
			coalesce(max(a.vl_mes_n11),0),
			coalesce(max(a.vl_mes_n12),0),
			coalesce(max(a.vl_mes_n13),0),
			coalesce(max(a.vl_mes_n14),0),
			coalesce(max(a.vl_mes_n15),0),
			coalesce(max(a.vl_mes_n16),0),
			coalesce(max(a.vl_mes_n17),0),
			coalesce(max(a.vl_mes_n18),0),
			coalesce(max(a.vl_mes_n19),0),
			coalesce(max(a.vl_mes_n20),0),
			coalesce(max(a.vl_mes_n21),0),
			coalesce(max(a.vl_mes_n22),0),
			coalesce(max(a.vl_mes_n23),0),
			coalesce(max(a.vl_mes_n24),0),
			coalesce(max(a.vl_mes_n25),0),
			coalesce(max(a.vl_mes_n26),0),
			coalesce(max(a.vl_mes_n27),0),
			coalesce(max(a.vl_mes_n28),0),
			coalesce(max(a.vl_mes_n29),0),
			coalesce(max(a.vl_mes_n30),0),
			coalesce(max(a.vl_mes_n31),0),
			coalesce(max(a.vl_mes_n32),0)
		into STRICT	vl_mes_n3_w,
			vl_mes_n4_w,
			vl_mes_n5_w,
			vl_mes_n6_w,
			vl_mes_n7_w,
			vl_mes_n8_w,
			vl_mes_n9_w,
			vl_mes_n10_w,
			vl_mes_n11_w,
			vl_mes_n12_w,
			vl_mes_n13_w,
			vl_mes_n14_w,
			vl_mes_n15_w,
			vl_mes_n16_w,
			vl_mes_n17_w,
			vl_mes_n18_w,
			vl_mes_n19_w,
			vl_mes_n20_w,
			vl_mes_n21_w,
			vl_mes_n22_w,
			vl_mes_n23_w,
			vl_mes_n24_w,
			vl_mes_n25_w,
			vl_mes_n26_w,
			vl_mes_n27_w,
			vl_mes_n28_w,
			vl_mes_n29_w,
			vl_mes_n30_w,
			vl_mes_n31_w,
			vl_mes_n32_w,
			vl_mes_n33_w,
			vl_mes_n34_w,
			vl_mes_n35_w
		from	diops_movto_corresp_cedida		a
		where	a.nr_seq_periodo	= nr_seq_periodo_ant_w
		and	a.nr_seq_tipo_movto	= nr_seq_tipo_movto_w;
				
		insert into diops_movto_corresp_cedida(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_tipo_movto,
				nr_seq_periodo,
				vl_mes_n,
				vl_mes_n1,
				vl_mes_n2,
				vl_mes_n3,
				vl_mes_n4,
				vl_mes_n5,
				vl_mes_n6,
				vl_mes_n7,
				vl_mes_n8,
				vl_mes_n9,
				vl_mes_n10,
				vl_mes_n11,
				vl_mes_n12,
				vl_mes_n13,
				vl_mes_n14,
				vl_mes_n15,
				vl_mes_n16,
				vl_mes_n17,
				vl_mes_n18,
				vl_mes_n19,
				vl_mes_n20,
				vl_mes_n21,
				vl_mes_n22,
				vl_mes_n23,
				vl_mes_n24,
				vl_mes_n25,
				vl_mes_n26,
				vl_mes_n27,
				vl_mes_n28,
				vl_mes_n29,
				vl_mes_n30,
				vl_mes_n31,
				vl_mes_n32,
				vl_mes_n33,
				vl_mes_n34,
				vl_mes_n35)
		values (	nextval('diops_movto_corresp_cedida_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_tipo_movto_w,
				nr_seq_periodo_p,
				vl_mes_n_w,
				vl_mes_n1_w,
				vl_mes_n2_w,
				vl_mes_n3_w,
				vl_mes_n4_w,
				vl_mes_n5_w,
				vl_mes_n6_w,
				vl_mes_n7_w,
				vl_mes_n8_w,
				vl_mes_n9_w,
				vl_mes_n10_w,
				vl_mes_n11_w,
				vl_mes_n12_w,
				vl_mes_n13_w,
				vl_mes_n14_w,
				vl_mes_n15_w,
				vl_mes_n16_w,
				vl_mes_n17_w,
				vl_mes_n18_w,
				vl_mes_n19_w,
				vl_mes_n20_w,
				vl_mes_n21_w,
				vl_mes_n22_w,
				vl_mes_n23_w,
				vl_mes_n24_w,
				vl_mes_n25_w,
				vl_mes_n26_w,
				vl_mes_n27_w,
				vl_mes_n28_w,
				vl_mes_n29_w,
				vl_mes_n30_w,
				vl_mes_n31_w,
				vl_mes_n32_w,
				vl_mes_n33_w,
				vl_mes_n34_w,
				vl_mes_n35_w);
		if (coalesce(nr_seq_superior_w,0) <> 0) then
			CALL pls_atualizar_total_cedida(nm_usuario_p,nr_seq_superior_w,nr_seq_periodo_p);
		end if;	
	end if;

		
	end;
end loop;
close c_movimentos_pel;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE diops_gerar_movimentos_pel ( nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_periodo_p bigint, nr_seq_identificador_p bigint) FROM PUBLIC;

