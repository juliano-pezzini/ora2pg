-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_calcular_longa_perm_unif ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nm_usuario_p text, cd_procedimento_p INOUT bigint, ie_origem_proced_p INOUT bigint, qt_perm_sus_p INOUT bigint, qt_perm_real_p INOUT bigint, qt_longa_perm_p INOUT bigint) AS $body$
DECLARE



dt_entrada_w		timestamp;
dt_alta_w			timestamp;
dt_final_w		timestamp;
qt_diarias_w		bigint	:= 0;
cd_procedimento_real_w	bigint;
ie_origem_proc_real_w	bigint;
ie_permanencia_w		varchar(1)	:= 'N';
qt_permanencia_w		bigint	:= 0;
qt_diarias_uti_w		bigint	:= 0;
qt_longa_perm_total_w	bigint	:= 0;
qt_longa_perm_liq_w	bigint	:= 0;
cd_procedimento_w	bigint;
ie_verifica_data_alta_w	varchar(2) 	:= 'N';
ie_periodo_conta_w	varchar(2) 	:= 'N';
ie_cons_ultimo_dia_w	varchar(2) := 'S';
dt_procedimento_w	procedimento_paciente.dt_procedimento%type;
cd_motivo_cobranca_w    sus_aih_unif.cd_motivo_cobranca%type;
ie_cons_motivo_encerramento_w   varchar(2)     := 'N';

c01 CURSOR FOR
	SELECT 	cd_procedimento,
		dt_procedimento
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_conta_p
	and	coalesce(cd_motivo_Exc_conta::text, '') = ''
	and	Sus_Obter_TipoReg_Proc(cd_procedimento,ie_origem_proced,'C',13) = 3
	order by obter_qt_dia_internacao_sus(cd_procedimento, ie_origem_proced);



BEGIN

ie_verifica_data_alta_w := obter_valor_param_usuario(1123,113,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
ie_periodo_conta_w 	:= obter_valor_param_usuario(1123,206,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
ie_cons_ultimo_dia_w := obter_valor_param_usuario(1123,225,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
ie_cons_motivo_encerramento_w := obter_valor_param_usuario(1123,250,obter_perfil_ativo,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);

/* Obter dados da AIH */

begin
select	cd_procedimento_real,
	ie_origem_proc_real,
	dt_inicial
into STRICT	cd_procedimento_real_w,
	ie_origem_proc_real_w,
	dt_procedimento_w
from	sus_aih_unif
where	nr_atendimento		= nr_atendimento_p
and	nr_interno_conta	= nr_interno_conta_p;
exception
	when others then
	select	coalesce(max(cd_procedimento_solic),0),
		coalesce(max(ie_origem_proced),0),
		max(dt_emissao)
	into STRICT	cd_procedimento_real_w,
		ie_origem_proc_real_w,
		dt_procedimento_w
	from	sus_laudo_paciente
	where	nr_seq_interno = (SELECT max(nr_seq_interno)
				from	sus_laudo_paciente
				where	nr_interno_conta	= nr_interno_conta_p
				and	nr_atendimento		= nr_atendimento_p
				and	ie_classificacao 	= 1
				and	ie_tipo_laudo_sus in (0,1));
end;
	/*Nos casos de Cirurgia Multipla, Politraumatizado, Tratamento da AIDS, Procedimentos Sequenciais de
	Coluna em Ortopedia e/ou Neurocirurgia e Cirurgia Plastica Corretiva pos Gastroplastia, para fins de calculo de
	permanencia deve-se utilizar como parametro a media de permanencia do procedimento de maior numero de dias, entre
	os registrados no SISAIH01, na tela Procedimentos Realizados.*/
if (Sus_Validar_Regra(11,cd_procedimento_real_w,ie_origem_proc_real_w,dt_procedimento_w) > 0) then
	open C01;
	loop
	fetch C01 into	
		cd_procedimento_w,
		dt_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	end loop;
	close C01;

	if (coalesce(cd_procedimento_w,0)	<> 0) then
		cd_procedimento_real_w		:= cd_procedimento_w;
	end if;
end if;

/* Obter dados do procedimento */

begin
select	ie_permanencia,
	obter_qt_dia_internacao_sus(cd_procedimento, ie_origem_proced)
into STRICT	ie_permanencia_w,
	qt_permanencia_w
from	sus_procedimento
where	cd_procedimento		= cd_procedimento_real_w
and	ie_origem_proced	= ie_origem_proc_real_w;
exception
	when others then
	ie_permanencia_w	:= 'N';
end;

/* Selecao das datas de entrada e alta do Paciente */

begin
select	coalesce(a.dt_inicial,b.dt_entrada),
	a.dt_final,
	coalesce(b.dt_alta,clock_timestamp()),
    coalesce(a.cd_motivo_cobranca,0)
into STRICT	dt_entrada_w,
	dt_final_w,
	dt_alta_w,
    cd_motivo_cobranca_w
from	atendimento_paciente	b,
	sus_aih_unif		a
where	a.nr_atendimento	= nr_atendimento_p
and	a.nr_interno_conta	= nr_interno_conta_p
and	a.nr_atendimento	= b.nr_atendimento;
exception
	when others then
	begin
	Select	dt_entrada,
		coalesce(dt_alta,clock_timestamp())
	into STRICT	dt_entrada_w,
		dt_alta_w
	from 	atendimento_paciente
	where	nr_atendimento	= nr_atendimento_p;
	end;
end;

if (cd_motivo_cobranca_w = 0) then
        begin
        begin
        select  coalesce(cd_motivo_cobranca,0)
        into STRICT    cd_motivo_cobranca_w
        from    sus_dados_aih_conta
        where   nr_interno_conta = nr_interno_conta_p;
        exception
                when others then
                cd_motivo_cobranca_w := 0;
                end;
        end;
end if;

if (coalesce(ie_periodo_conta_w,'N') = 'S') then
	begin
	select	coalesce(max(dt_periodo_inicial),dt_entrada_w),
		coalesce(max(dt_periodo_final),dt_final_w),
		coalesce(max(dt_periodo_inicial),dt_entrada_w)
	into STRICT	dt_entrada_w,
		dt_final_w,
		dt_procedimento_w
	from	conta_paciente
	where	nr_interno_conta = nr_interno_conta_p;	
	end;
end if;

if (dt_final_w IS NOT NULL AND dt_final_w::text <> '') then
	if (ie_verifica_data_alta_w = 'S') and (dt_final_w <= dt_alta_w) then
		dt_alta_w := dt_final_w;
	elsif (ie_verifica_data_alta_w = 'N') then	
		dt_alta_w := dt_final_w;
	end if;	
end if;

/* Identificar se tem permanencia para o procedimento realizado */

if (ie_cons_ultimo_dia_w = 'S') then
	qt_diarias_w	:= (establishment_timezone_utils.startofday(dt_alta_w) - establishment_timezone_utils.startofday(dt_entrada_w) + 1);
elsif   ((ie_cons_motivo_encerramento_w = 'S') and cd_motivo_cobranca_w in ('21','22','23','24','25','26','27','28','29','31','32','41','42','43')) then
        qt_diarias_w	:= (establishment_timezone_utils.startofday(dt_alta_w) - establishment_timezone_utils.startofday(dt_entrada_w) + 1);
else	
	qt_diarias_w	:= (establishment_timezone_utils.startofday(dt_alta_w) - establishment_timezone_utils.startofday(dt_entrada_w));
end if;		

/* Procedimentos de diaria de UTI */
select	coalesce(sum(qt_procedimento),0)
into STRICT	qt_diarias_uti_w
from	procedimento_paciente
where 	nr_atendimento		= nr_atendimento_p
and	nr_interno_conta	= nr_interno_conta_p
and	ie_origem_Proced	= 7
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	((sus_validar_regra(7, cd_procedimento, ie_origem_proced, dt_procedimento) > 0) or (sus_validar_regra(13, cd_procedimento, ie_origem_proced, dt_procedimento) > 0));

/* Calculo da Longa Permanencia */
begin
if (qt_diarias_w > 0) and (qt_permanencia_w > 0) and (Sus_Obter_Se_Detalhe_Proc(cd_procedimento_real_w, ie_origem_proc_real_w,'004',dt_procedimento_w) > 0) and (cd_procedimento_real_w IS NOT NULL AND cd_procedimento_real_w::text <> '') then
	begin
	qt_permanencia_w		:= (qt_permanencia_w * 2);
	qt_longa_perm_total_w		:= qt_diarias_w - qt_permanencia_w;
	qt_longa_perm_liq_w		:= qt_longa_perm_total_w - qt_diarias_uti_w;
	if (qt_longa_perm_liq_w) < 0 then
		qt_longa_perm_liq_w	:= 0;
	end if;

	qt_perm_sus_p			:= qt_permanencia_w;
	qt_perm_real_p			:= qt_diarias_w;
	qt_longa_perm_p			:= qt_longa_perm_liq_w;
	end;
end if;
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_calcular_longa_perm_unif ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nm_usuario_p text, cd_procedimento_p INOUT bigint, ie_origem_proced_p INOUT bigint, qt_perm_sus_p INOUT bigint, qt_perm_real_p INOUT bigint, qt_longa_perm_p INOUT bigint) FROM PUBLIC;

