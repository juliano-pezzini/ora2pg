-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_valor_glosa_geral (nr_sequencia_p bigint, nm_usuario_p text, ie_opcao_p text, vl_glosa_ant_p bigint, ds_erro_p INOUT text ) AS $body$
DECLARE

/* ie_opcao_p
G - Glosar Total
P - Pagar Total
R - Reapresentar Total
AP - Atualiza valor pago
AG - Atualiza valor glosado
*/
vl_cobrado_w			convenio_retorno_glosa.vl_cobrado%type;
vl_pago_w				convenio_retorno_glosa.vl_pago_digitado%type;
vl_glosa_w				convenio_retorno_glosa.vl_glosa%type;
vl_saldo_ant_w			convenio_retorno_glosa.vl_saldo_reap%type;
vl_saldo_w				convenio_retorno_glosa.vl_saldo_reap%type;
nr_seq_ret_item_w		convenio_retorno_glosa.nr_seq_propaci%type;
nr_seq_retorno_w		convenio_retorno_glosa.nr_seq_retorno%type;
vl_pago_dig_atual_w		convenio_retorno_glosa.vl_pago_digitado%type;
vl_lote_audit_glosa_w	lote_audit_hist_item.vl_glosa%type;
vl_glosa_atual_w		convenio_retorno_glosa.vl_glosa%type;
vl_saldo_ww				convenio_retorno_glosa.vl_glosa%type;
vl_saldo_atual_w		convenio_retorno_glosa.vl_saldo_reap%type;
ds_erro_w				varchar(255);


BEGIN

select	CASE WHEN coalesce(nr_seq_propaci,0)=0 THEN nr_seq_matpaci  ELSE nr_seq_propaci END ,
		vl_cobrado,
		vl_pago_digitado,
		vl_glosa,
		coalesce(vl_saldo_reap,0)
into STRICT	nr_seq_ret_item_w,
		vl_cobrado_w,
		vl_pago_dig_atual_w,
		vl_glosa_atual_w,
		vl_saldo_atual_w
from	convenio_retorno_glosa
where	nr_sequencia =  nr_sequencia_P
and		(nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '');

select	sum(coalesce(vl_pago_digitado,0)),
		sum(coalesce(vl_glosa,0)),
		sum(coalesce(vl_saldo_reap,0))
into STRICT	vl_pago_w,
		vl_glosa_w,
		vl_saldo_ant_w
from	convenio_retorno_glosa
where	((coalesce(nr_seq_propaci,0) = nr_seq_ret_item_w)  or (coalesce(nr_seq_matpaci,0) = nr_seq_ret_item_w));

select	sum(coalesce(vl_glosa,0))
into STRICT	vl_lote_audit_glosa_w
from	lote_audit_hist_item
where	((coalesce(nr_seq_propaci,0) = coalesce(nr_seq_ret_item_w,0))  or (coalesce(nr_seq_matpaci,0) = coalesce(nr_seq_ret_item_w,0)));

if (coalesce(ie_opcao_p,'X') = 'G') then
	vl_glosa_w	:= vl_cobrado_w - (vl_pago_w + coalesce(vl_lote_audit_glosa_w,0));
	vl_saldo_w	:= (vl_cobrado_w - (vl_pago_w + coalesce(vl_lote_audit_glosa_w,0))) + vl_pago_dig_atual_w;

	update	convenio_retorno_glosa
	set		vl_glosa 			= vl_saldo_w,
			vl_pago_digitado	= 0,
			vl_saldo_reap		= 0,
			nm_usuario			= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
	where	nr_sequencia		= nr_sequencia_p;
elsif (coalesce(ie_opcao_p,'X') = 'P') then
	vl_glosa_w	:= vl_cobrado_w - (vl_pago_w + coalesce(vl_lote_audit_glosa_w,0));
	vl_saldo_w	:= (vl_cobrado_w - (vl_pago_w + coalesce(vl_lote_audit_glosa_w,0))) + vl_pago_dig_atual_w;

	update	convenio_retorno_glosa
	set		vl_pago_digitado 	= vl_saldo_w,
			vl_saldo_reap		= 0,
			vl_glosa 			= 0,
			nm_usuario			= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
	where	nr_sequencia		= nr_sequencia_p;
elsif (coalesce(ie_opcao_p,'X') = 'R') then
	vl_glosa_w	:= vl_cobrado_w - (vl_pago_w + coalesce(vl_lote_audit_glosa_w,0));
	vl_saldo_w	:= (vl_cobrado_w - (vl_pago_w + coalesce(vl_lote_audit_glosa_w,0))) + vl_pago_dig_atual_w;
	update	convenio_retorno_glosa
	set		vl_glosa 			= vl_saldo_w,
			vl_pago_digitado	= 0,
			vl_saldo_reap		= vl_saldo_w,
			nm_usuario			= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
	where	nr_sequencia		= nr_sequencia_p;
elsif (coalesce(ie_opcao_p,'X') = 'AP') then -- atualizar valor pago/glosado/saldo
		vl_glosa_w	:= vl_cobrado_w - (vl_pago_w + coalesce(vl_lote_audit_glosa_w,0));
		vl_saldo_w	:= vl_cobrado_w - (vl_pago_w + coalesce(vl_lote_audit_glosa_w,0));

		if (coalesce(vl_saldo_w,0) < 0) then
			vl_saldo_w := 0;
		end if;
		if (coalesce(vl_glosa_w,0) < 0) then

			update	convenio_retorno_glosa
			set		vl_saldo_reap 	= vl_saldo_w,
					vl_glosa		= 0,
					vl_amaior		= vl_glosa_w * (-1),
					nm_usuario		= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_sequencia_p;
		else
			update	convenio_retorno_glosa
			set		vl_saldo_reap 	= vl_saldo_w,
					vl_glosa		= vl_glosa_w,
					vl_amaior		= 0,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_sequencia_p;
		end if;
elsif (coalesce(ie_opcao_p,'X') = 'AG') then -- atualizar valor pago/glosado/saldo
		vl_saldo_w	:= coalesce(vl_pago_w,0);
		vl_saldo_ww	:= vl_cobrado_w - (vl_pago_w + coalesce(vl_lote_audit_glosa_w,0));
		vl_pago_w	:= vl_cobrado_w - (coalesce(vl_pago_w,0) + coalesce(vl_lote_audit_glosa_w,0) + coalesce(vl_glosa_atual_w,0));
		vl_saldo_w	:= vl_cobrado_w - (coalesce(vl_pago_w,0) + coalesce(vl_lote_audit_glosa_w,0) + coalesce(vl_saldo_w,0));

		if (coalesce(vl_glosa_atual_w,0) > coalesce(vl_saldo_ww,0)) then

			update	convenio_retorno_glosa
			set		vl_glosa 		= vl_glosa_ant_p,
					vl_saldo_reap 	= vl_saldo_atual_w,
					ds_observacao_interna = 'X'
			where	nr_sequencia	= nr_sequencia_p;
			commit;
			ds_erro_w := 'ERRO';
			--Wheb_mensagem_pck.exibir_mensagem_abort(729821);
		else
			if (coalesce(vl_pago_w,0) < 0) then
				update	convenio_retorno_glosa
				set		vl_saldo_reap 		= vl_saldo_w,
						vl_pago_digitado	= 0,
						--vl_amaior 			= vl_pago_w *(-1),
						nm_usuario			= nm_usuario_p,
						dt_atualizacao		= clock_timestamp(),
						ds_observacao_interna	= ''
				where	nr_sequencia		= nr_sequencia_p;
			else
				update	convenio_retorno_glosa
				set		vl_saldo_reap 		= vl_saldo_w,
						vl_pago_digitado	= vl_pago_w,
						vl_amaior 			= 0,
						nm_usuario			= nm_usuario_p,
						dt_atualizacao		= clock_timestamp(),
						ds_observacao_interna = ''
				where	nr_sequencia		= nr_sequencia_p;
			end if;
		end if;
end if;

commit;

ds_erro_p := coalesce(ds_erro_w,'X');

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_valor_glosa_geral (nr_sequencia_p bigint, nm_usuario_p text, ie_opcao_p text, vl_glosa_ant_p bigint, ds_erro_p INOUT text ) FROM PUBLIC;

