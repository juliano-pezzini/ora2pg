-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_valor_co ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_conta_rec_p text default null) AS $body$
DECLARE


ie_controle_pos_estabelecido_w	pls_parametros.ie_controle_pos_estabelecido%type;
ie_cobrar_mensalidade_w		pls_conta_co.ie_cobrar_mensalidade%type;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
vl_beneficiario_w		pls_conta_proc.vl_beneficiario%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;
nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
dt_mes_competencia_w		pls_protocolo_conta.dt_mes_competencia%type;
nr_seq_prestador_atend_w	pls_prestador.nr_sequencia%type;
nr_seq_prestador_exec_w		pls_prestador.nr_sequencia%type;
nr_seq_plano_w			pls_plano.nr_sequencia%type;
ie_preco_w			pls_plano.ie_preco%type;
ie_proc_mat_w			varchar(1);
ie_tipo_prestador_atend_w	varchar(2);
ie_tipo_prestador_exec_w	varchar(2);
nr_seq_conta_co_w		pls_conta_co.nr_sequencia%type;
nr_seq_centro_aprop_w		pls_centro_apropriacao.nr_sequencia%type;
vl_apropriacao_w		pls_conta_proc_aprop.vl_beneficiario%type;
nr_seq_protocolo_rec_w		pls_rec_glosa_protocolo.nr_sequencia%type;
qt_copartic_w			integer;
qt_pos_estab_w			integer;
ie_gera_valor_co_w		varchar(1);
nr_seq_proc_rec_w		pls_rec_glosa_proc.nr_sequencia%type;
nr_seq_mat_rec_w		pls_rec_glosa_mat.nr_sequencia%type;
qt_copart_pos_rec_w		integer;
ie_apropriacao_copartic_w	pls_parametros.ie_apropriacao_copartic%type;
vl_cobranca_prevista_w		pls_conta_proc.vl_proc_cobranca_prev%type;
nr_seq_regra_cobr_prev_w	pls_conta_proc.nr_seq_regra_cobr_prev%type;
vl_benef_aprop_w		pls_conta_proc_aprop.vl_apropriado%type;
qt_liberada_w			pls_conta_proc.qt_procedimento%type;
nr_seq_mensalidade_seg_w	pls_conta_co.nr_seq_mensalidade_seg%type;
nr_seq_regra_limite_mens_w	pls_conta_co.nr_seq_regra_limite_mens%type;
qt_registros_mensalidade_w	bigint;
qt_lote_liberacao_w		integer;

C01 CURSOR FOR
	SELECT	'P' ie_proc_mat,
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_conta_mat,
		b.nr_sequencia nr_seq_conta,
		CASE WHEN coalesce(a.vl_beneficiario,0)=0 THEN coalesce(a.vl_liberado,0)  ELSE a.vl_beneficiario END   vl_beneficiario,
		b.nr_seq_segurado,
		c.nr_sequencia nr_seq_protocolo,
		c.dt_mes_competencia,
		c.ie_tipo_protocolo,
		coalesce(b.ie_tipo_guia,c.ie_tipo_guia) ie_tipo_guia,
		c.nr_seq_prestador,
		b.nr_seq_prestador_exec,
		a.vl_proc_cobranca_prev,
		a.nr_seq_regra_cobr_prev,
		b.ie_tipo_segurado,
		a.qt_procedimento qt_liberada
	from	pls_conta_proc		a,
		pls_conta		b,
		pls_protocolo_conta	c
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_protocolo	= c.nr_sequencia
	and	(b.nr_seq_segurado IS NOT NULL AND b.nr_seq_segurado::text <> '')
	and	a.ie_cobranca_prevista	= 'S'
	and	a.ie_status 		<> 'D'
	and	((a.nr_seq_conta = nr_seq_conta_p and coalesce(nr_seq_conta_proc_p::text, '') = '' and coalesce(nr_seq_conta_mat_p::text, '') = '') or (a.nr_sequencia = nr_seq_conta_proc_p))
	
union all

	SELECT	'M' ie_proc_mat,
		null nr_seq_conta_proc,
		a.nr_sequencia nr_seq_conta_mat,
		b.nr_sequencia nr_seq_conta,
		CASE WHEN coalesce(a.vl_beneficiario,0)=0 THEN coalesce(a.vl_liberado,0)  ELSE a.vl_beneficiario END   vl_beneficiario,
		b.nr_seq_segurado,
		c.nr_sequencia nr_seq_protocolo,
		c.dt_mes_competencia,
		c.ie_tipo_protocolo,
		coalesce(b.ie_tipo_guia,c.ie_tipo_guia) ie_tipo_guia,
		c.nr_seq_prestador,
		b.nr_seq_prestador_exec,
		a.vl_mat_cobranca_prev,
		a.nr_seq_regra_cobr_prev,
		b.ie_tipo_segurado,
		a.qt_material qt_liberada
	from	pls_conta_mat		a,
		pls_conta		b,
		pls_protocolo_conta	c
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_protocolo	= c.nr_sequencia
	and	(b.nr_seq_segurado IS NOT NULL AND b.nr_seq_segurado::text <> '')
	and	coalesce(a.ie_cobranca_prevista,a.ie_cobranca_previa_servico)	= 'S'
	and	a.ie_status 		<> 'D'
	and	b.nr_sequencia		= nr_seq_conta_p
	and	((a.nr_seq_conta = nr_seq_conta_p and coalesce(nr_seq_conta_mat_p::text, '') = '' and coalesce(nr_seq_conta_proc_p::text, '') = '') or (a.nr_sequencia = nr_seq_conta_mat_p));
	
C02 CURSOR FOR
	SELECT	nr_seq_centro_aprop,
		CASE WHEN coalesce(vl_beneficiario,0)=0 THEN vl_apropriado  ELSE vl_beneficiario END  vl_beneficiario
	from	pls_conta_proc_aprop
	where	nr_seq_conta_proc	= nr_seq_conta_proc_w
	and	CASE WHEN coalesce(vl_beneficiario,0)=0 THEN vl_apropriado  ELSE vl_beneficiario END  > 0
	
union all

	SELECT	nr_seq_centro_aprop,
		CASE WHEN coalesce(vl_beneficiario,0)=0 THEN vl_apropriado  ELSE vl_beneficiario END  vl_beneficiario
	from	pls_conta_mat_aprop
	where	nr_seq_conta_mat	= nr_seq_conta_mat_w
	and	CASE WHEN coalesce(vl_beneficiario,0)=0 THEN vl_apropriado  ELSE vl_beneficiario END  > 0;
	
C03 CURSOR(nr_seq_conta_rec_pc		pls_rec_glosa_conta.nr_sequencia%type) FOR
	SELECT	'P' ie_tipo_item,
		a.nr_sequencia nr_seq_item,
		a.vl_acatado,
		a.nr_seq_conta_proc nr_seq_conta_item
	from	pls_rec_glosa_proc a,
		pls_conta_proc	b
	where	a.nr_seq_conta_rec = nr_seq_conta_rec_pc
	and	b.nr_sequencia 	   = a.nr_seq_conta_proc
	and	coalesce(a.ie_cobranca_prevista,b.ie_cobranca_prevista) = 'S'
	
union all

	SELECT	'M' ie_tipo_item,
		a.nr_sequencia nr_seq_item,
		a.vl_acatado,
		a.nr_seq_conta_mat nr_seq_conta_item
	from	pls_rec_glosa_mat a,
		pls_conta_mat b
	where	a.nr_seq_conta_rec = nr_seq_conta_rec_pc
	and	b.nr_sequencia = a.nr_seq_conta_mat
	and	coalesce(a.ie_cobranca_prevista, b.ie_cobranca_prevista) = 'S';

C04 CURSOR(	nr_seq_proc_rec_pc		pls_rec_glosa_proc.nr_sequencia%type,
		nr_seq_mat_rec_pc		pls_rec_glosa_mat.nr_sequencia%type) FOR
	SELECT	nr_seq_centro_aprop,
		CASE WHEN coalesce(vl_beneficiario,0)=0 THEN vl_apropriado  ELSE vl_beneficiario END  vl_beneficiario
	from	pls_conta_proc_aprop
	where	nr_seq_proc_rec	= nr_seq_proc_rec_pc
	and	CASE WHEN coalesce(vl_beneficiario,0)=0 THEN vl_apropriado  ELSE vl_beneficiario END  > 0
	
union all

	SELECT	nr_seq_centro_aprop,
		CASE WHEN coalesce(vl_beneficiario,0)=0 THEN vl_apropriado  ELSE vl_beneficiario END  vl_beneficiario
	from	pls_conta_mat_aprop
	where	nr_seq_mat_rec	= nr_seq_mat_rec_pc
	and	CASE WHEN coalesce(vl_beneficiario,0)=0 THEN vl_apropriado  ELSE vl_beneficiario END  > 0;
	
BEGIN

	if ( coalesce(nr_seq_conta_rec_p::text, '') = '' ) then
		select	max(nr_seq_mensalidade_seg),
			max(nr_seq_regra_limite_mens),
			max(nr_sequencia)
		into STRICT	nr_seq_mensalidade_seg_w,
			nr_seq_regra_limite_mens_w,
			nr_seq_conta_co_w
		from	pls_conta_co
		where	nr_seq_conta	= nr_seq_conta_p;
		
		if	((coalesce(nr_seq_mensalidade_seg_w::text, '') = '') and (coalesce(nr_seq_regra_limite_mens_w::text, '') = '')) and (nr_seq_conta_co_w IS NOT NULL AND nr_seq_conta_co_w::text <> '') then
			select  count(1)
			into STRICT 	qt_registros_mensalidade_w
			from  	pls_mensalidade_seg_item b
			where  	b.nr_seq_conta = nr_seq_conta_p;
		else
			qt_registros_mensalidade_w	:= 0;
		end if;
		
		
		if	((nr_seq_mensalidade_seg_w IS NOT NULL AND nr_seq_mensalidade_seg_w::text <> '') or (nr_seq_regra_limite_mens_w IS NOT NULL AND nr_seq_regra_limite_mens_w::text <> '') or (qt_registros_mensalidade_w > 0)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(334824); --Já existe mensalidade para o custo operacional. Favor verificar.
		else
			select	count(1)
			into STRICT	qt_lote_liberacao_w
			from	pls_lib_pos_estabelecido
			where	nr_seq_conta	= nr_seq_conta_p;
			
			if (qt_lote_liberacao_w > 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(334825); --Já existe lote de liberação para o custo operacional. Favor verificar na função OPS - Controle de Coparticipações e Pós-estabelecidos.
			else
				
				delete	FROM pls_conta_co_aprop
				where	nr_seq_conta_co in (	SELECT  nr_sequencia
								from	pls_conta_co
								where	nr_seq_conta  = nr_seq_conta_p);
				
				delete	FROM pls_conta_co
				where	nr_seq_conta	= nr_seq_conta_p;
			end if;
		end if;
	else
	
		select	max(nr_seq_mensalidade_seg),
			max(nr_seq_regra_limite_mens),
			max(nr_sequencia)
		into STRICT	nr_seq_mensalidade_seg_w,
			nr_seq_regra_limite_mens_w,
			nr_seq_conta_co_w
		from	pls_conta_co
		where	nr_seq_conta_rec	= nr_seq_conta_rec_p;
		
		if	((coalesce(nr_seq_mensalidade_seg_w::text, '') = '') and (coalesce(nr_seq_regra_limite_mens_w::text, '') = '')) and (nr_seq_conta_co_w IS NOT NULL AND nr_seq_conta_co_w::text <> '') then
						
			select	count(1)
			into STRICT	qt_registros_mensalidade_w
			from	pls_mensalidade_item_conta a,
					pls_conta_co b
			where	a.nr_seq_conta_co = b.nr_sequencia
			and		b.nr_seq_conta_rec = nr_seq_conta_rec_p;
			
		else
			qt_registros_mensalidade_w	:= 0;
		end if;
		
		if	((nr_seq_mensalidade_seg_w IS NOT NULL AND nr_seq_mensalidade_seg_w::text <> '') or (nr_seq_regra_limite_mens_w IS NOT NULL AND nr_seq_regra_limite_mens_w::text <> '') or (qt_registros_mensalidade_w > 0)) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(334824); --Já existe mensalidade para o custo operacional. Favor verificar.
		else
			select	count(1)
			into STRICT	qt_lote_liberacao_w
			from	pls_lib_pos_estabelecido a,
					pls_conta_co b
			where	a.nr_seq_conta_co = b.nr_sequencia
			and 	b.nr_seq_conta_rec = nr_seq_conta_rec_p;
			
			if (qt_lote_liberacao_w > 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(334825); --Já existe lote de liberação para o custo operacional. Favor verificar na função OPS - Controle de Coparticipações e Pós-estabelecidos.
			else
				
				delete	FROM pls_conta_co_aprop
				where	nr_seq_conta_co in (	SELECT  nr_sequencia
								from	pls_conta_co
								where	nr_seq_conta_rec  = nr_seq_conta_rec_p);
				
				delete	FROM pls_conta_co
				where	nr_seq_conta_rec	= nr_seq_conta_rec_p;
			end if;
		end if;
		
	end if;

nr_seq_conta_co_w := null;	

select	coalesce(max(ie_controle_pos_estabelecido),'N'),
	coalesce(max(ie_apropriacao_copartic),'N')
into STRICT	ie_controle_pos_estabelecido_w,
	ie_apropriacao_copartic_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

if (ie_controle_pos_estabelecido_w = 'S') then
	ie_cobrar_mensalidade_w	:= 'P'; -- Pendente de liberação
else
	ie_cobrar_mensalidade_w	:= 'S'; -- Liberado para a mensalidade
end if;



if (coalesce(nr_seq_conta_rec_p::text, '') = '') then

	open C01;
	loop
	fetch C01 into
		ie_proc_mat_w,
		nr_seq_conta_proc_w,
		nr_seq_conta_mat_w,
		nr_seq_conta_w,
		vl_beneficiario_w,
		nr_seq_segurado_w,
		nr_seq_protocolo_w,
		dt_mes_competencia_w,
		ie_tipo_protocolo_w,
		ie_tipo_guia_w,
		nr_seq_prestador_atend_w,
		nr_seq_prestador_exec_w,
		vl_cobranca_prevista_w,
		nr_seq_regra_cobr_prev_w,
		ie_tipo_segurado_w,
		qt_liberada_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		qt_copartic_w 		:= 0;
		qt_pos_estab_w 		:= 0;
		vl_benef_aprop_w	:= 0;
		ie_gera_valor_co_w	:= 'S';
		
		if (ie_proc_mat_w = 'P') then
			select	count(1)
			into STRICT	qt_copartic_w
			from	pls_conta_coparticipacao
			where	nr_seq_conta_proc 		= nr_seq_conta_proc_w
			and	ie_status_coparticipacao	!= 'N'
			and	ie_status_mensalidade		!= 'C';
			
			select	count(1)
			into STRICT	qt_pos_estab_w
			from	pls_conta_pos_estabelecido
			where	nr_seq_conta_proc = nr_seq_conta_proc_w
			and	vl_beneficiario	> 0;
		else
			select	count(1)
			into STRICT	qt_copartic_w
			from	pls_conta_coparticipacao
			where	nr_seq_conta_mat = nr_seq_conta_mat_w
			and	ie_status_coparticipacao	!= 'N'
			and	ie_status_mensalidade		!= 'C';
			
			select	count(1)
			into STRICT	qt_pos_estab_w
			from	pls_conta_pos_estabelecido
			where	nr_seq_conta_mat = nr_seq_conta_mat_w
			and	vl_beneficiario	> 0;
		end if;	
		
		if (qt_copartic_w > 0) or (qt_pos_estab_w > 0) then
			ie_gera_valor_co_w := 'N';
		end if;
	
		/* sideker - OS 877836 - Somente pode gerar itens na pasta "Custo operacional (Contrato pré)" se os procedimentos já não tiverem sido gerados na pasta "Coparticipação" ou "Pós-Estabelecido". */

		
		if (ie_gera_valor_co_w = 'S') then
			
			if (ie_apropriacao_copartic_w = 'S') then
				if (ie_proc_mat_w = 'P') then
					select	coalesce(sum(a.vl_apropriado),0)
					into STRICT	vl_benef_aprop_w
					from	pls_conta_proc_aprop a
					where	a.nr_seq_conta_proc = nr_seq_conta_proc_w
					and	exists (	SELECT	1
							from	pls_centro_apropriacao x
							where	x.nr_sequencia = a.nr_seq_centro_aprop
							and	x.ie_responsavel_apropriacao = '1');
				else
					select	coalesce(sum(a.vl_apropriado),0)
					into STRICT	vl_benef_aprop_w
					from	pls_conta_mat_aprop a
					where	a.nr_seq_conta_mat = nr_seq_conta_mat_w
					and	exists (	SELECT	1
							from	pls_centro_apropriacao x
							where	x.nr_sequencia = a.nr_seq_centro_aprop
							and	x.ie_responsavel_apropriacao = '1');
				end if;
			end if;
		
			if (vl_benef_aprop_w > 0) or (ie_apropriacao_copartic_w = 'N') then			
				if (nr_seq_regra_cobr_prev_w IS NOT NULL AND nr_seq_regra_cobr_prev_w::text <> '') then
					vl_beneficiario_w := vl_cobranca_prevista_w * qt_liberada_w;
				end if;
			
				select	max(nr_seq_plano)
				into STRICT	nr_seq_plano_w
				from	pls_segurado
				where	nr_sequencia	= nr_seq_segurado_w;
				
				select	max(ie_preco)
				into STRICT	ie_preco_w
				from	pls_plano
				where	nr_sequencia	= nr_seq_plano_w;
				
				begin
				select	CASE WHEN coalesce(cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END
				into STRICT	ie_tipo_prestador_atend_w
				from	pls_prestador
				where	nr_sequencia	= nr_seq_prestador_atend_w;
				exception
				when others then
					ie_tipo_prestador_atend_w	:= null;
				end;
				
				begin
				select	CASE WHEN coalesce(cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END
				into STRICT	ie_tipo_prestador_exec_w
				from	pls_prestador
				where	nr_sequencia	= nr_seq_prestador_exec_w;
				exception
				when others then
					ie_tipo_prestador_exec_w	:= null;
				end;
				
				select	nextval('pls_conta_co_seq')
				into STRICT	nr_seq_conta_co_w
				;
				
				insert	into	pls_conta_co(	nr_sequencia, nr_seq_conta, vl_beneficiario,
						dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
						nr_seq_segurado, dt_mes_competencia, ie_tipo_protocolo,
						nr_seq_conta_proc, nr_seq_conta_mat, ie_tipo_guia,
						nr_seq_prestador_atend, nr_seq_prestador_exec, ie_cobrar_mensalidade,
						ie_tipo_prestador_atend, ie_tipo_prestador_exec, ie_tipo_segurado,
						ie_preco, nr_seq_protocolo, ie_origem_valor_co)
					values (	nr_seq_conta_co_w, nr_seq_conta_w, vl_beneficiario_w,
						clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
						nr_seq_segurado_w, dt_mes_competencia_w, ie_tipo_protocolo_w,
						nr_seq_conta_proc_w, nr_seq_conta_mat_w, ie_tipo_guia_w,
						nr_seq_prestador_atend_w, nr_seq_prestador_exec_w, ie_cobrar_mensalidade_w,
						ie_tipo_prestador_atend_w, ie_tipo_prestador_exec_w, ie_tipo_segurado_w,
						ie_preco_w, nr_seq_protocolo_w, 'CM');
				
				open C02;
				loop
				fetch C02 into
					nr_seq_centro_aprop_w,
					vl_apropriacao_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					insert	into	pls_conta_co_aprop(	nr_sequencia, nr_seq_conta_co, nr_seq_conta,
							nr_seq_centro_apropriacao, vl_apropriacao, dt_atualizacao,
							nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec)
						values (	nextval('pls_conta_co_aprop_seq'), nr_seq_conta_co_w, nr_seq_conta_w,
							nr_seq_centro_aprop_w, vl_apropriacao_w, clock_timestamp(),
							nm_usuario_p, clock_timestamp(), nm_usuario_p);
					end;
				end loop;
				close C02;
			else
				insert	into	pls_conta_log(	ds_alteracao, dt_alteracao, dt_atualizacao,
						dt_atualizacao_nrec, nm_usuario, nm_usuario_alteracao,
						nm_usuario_nrec, nr_seq_conta, nr_seq_conta_mat,
						nr_seq_conta_proc, nr_sequencia)
				values (	'Valores de custo operacional não gerados pois as regras de apropriação não preveem cobrança ao beneficiário', clock_timestamp(), clock_timestamp(),
						clock_timestamp(), nm_usuario_p, nm_usuario_p,
						nm_usuario_p, nr_seq_conta_w, nr_seq_conta_mat_w,
						nr_seq_conta_proc_w, nextval('pls_conta_log_seq'));
			end if;
		end if;
		end;
	end loop;
	close C01;
else
	for r_C03_w in C03(nr_seq_conta_rec_p) loop
	
	
	
			
		nr_seq_conta_proc_w := null;
		nr_seq_proc_rec_w := null;	
		nr_seq_conta_mat_w := null;
		nr_seq_mat_rec_w := null;
		
		if (r_C03_w.ie_tipo_item = 'P') then
			select	sum(qt_item)
			into STRICT	qt_copart_pos_rec_w
			from (
				SELECT	count(1) qt_item
				from	pls_conta_coparticipacao a
				where	a.nr_seq_proc_rec		= r_C03_w.nr_seq_item
				and	ie_status_coparticipacao	!= 'N'
				and	ie_status_mensalidade		!= 'C'
				
union all

				SELECT	count(1) qt_item
				from	pls_conta_pos_estabelecido a
				where	a.nr_seq_proc_rec	= r_C03_w.nr_seq_item
				and	vl_beneficiario		> 0) alias4;
		else
			select	sum(qt_item)
			into STRICT	qt_copart_pos_rec_w
			from (
				SELECT	count(1) qt_item
				from	pls_conta_coparticipacao a
				where	a.nr_seq_mat_rec		= r_C03_w.nr_seq_item
				and	ie_status_coparticipacao	!= 'N'
				and	ie_status_mensalidade		!= 'C'
				
union all

				SELECT	count(1) qt_item
				from	pls_conta_pos_estabelecido a
				where	a.nr_seq_mat_rec	= r_C03_w.nr_seq_item
				and	vl_beneficiario		> 0) alias3;
		end if;
		
		if (qt_copart_pos_rec_w = 0) then
			
			nr_seq_conta_proc_w := null;
			nr_seq_proc_rec_w := null;
			nr_seq_conta_mat_w := null;
			nr_seq_mat_rec_w := null;
			
			if (r_C03_w.ie_tipo_item = 'P') then
				nr_seq_conta_proc_w := r_C03_w.nr_seq_conta_item;
				nr_seq_proc_rec_w := r_C03_w.nr_seq_item;
			else
				nr_seq_conta_mat_w := r_C03_w.nr_seq_conta_item;
				nr_seq_mat_rec_w := r_C03_w.nr_seq_item;
			end if;
			
			select	nr_seq_conta,
				nr_seq_protocolo
			into STRICT	nr_seq_conta_w,
				nr_seq_protocolo_rec_w
			from	pls_rec_glosa_conta
			where	nr_sequencia = nr_seq_conta_rec_p;
			
			select	nr_seq_segurado,
				ie_tipo_guia,
				nr_seq_prestador_exec,
				nr_seq_protocolo,
				ie_tipo_segurado
			into STRICT	nr_seq_segurado_w,
				ie_tipo_guia_w,
				nr_seq_prestador_exec_w,
				nr_seq_protocolo_w,
				ie_tipo_segurado_w
			from	pls_conta
			where	nr_sequencia = nr_seq_conta_w;
			
			select	ie_tipo_protocolo
			into STRICT	ie_tipo_protocolo_w
			from	pls_protocolo_conta
			where	nr_sequencia = nr_seq_protocolo_w;
			
			select	max(nr_seq_plano)
			into STRICT	nr_seq_plano_w
			from	pls_segurado
			where	nr_sequencia = nr_seq_segurado_w;
			
			select	max(ie_preco)
			into STRICT	ie_preco_w
			from	pls_plano
			where	nr_sequencia = nr_seq_plano_w;
			
			select	dt_competencia_lote,
				nr_seq_prestador
			into STRICT	dt_mes_competencia_w,
				nr_seq_prestador_atend_w
			from	pls_rec_glosa_protocolo
			where	nr_sequencia = nr_seq_protocolo_rec_w;
			
			begin
			select	CASE WHEN coalesce(cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END
			into STRICT	ie_tipo_prestador_atend_w
			from	pls_prestador
			where	nr_sequencia	= nr_seq_prestador_atend_w;
			exception
			when others then
				ie_tipo_prestador_atend_w := null;
			end;
			
			begin
			select	CASE WHEN coalesce(cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END
			into STRICT	ie_tipo_prestador_exec_w
			from	pls_prestador
			where	nr_sequencia	= nr_seq_prestador_exec_w;
			exception
			when others then
				ie_tipo_prestador_exec_w := null;
			end;
			
			select	nextval('pls_conta_co_seq')
			into STRICT	nr_seq_conta_co_w
			;
			
			if (ie_apropriacao_copartic_w = 'S') then
				CALL pls_apropriacao_pck.pls_gerar_copart_aprop_rec(	nr_seq_proc_rec_w, nr_seq_mat_rec_w, nr_seq_conta_proc_w,
										nr_seq_conta_mat_w, nm_usuario_p);
			end if;
			
			insert	into	pls_conta_co(	nr_sequencia, nr_seq_conta, vl_beneficiario,
					dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
					nr_seq_segurado, dt_mes_competencia, ie_tipo_protocolo,
					nr_seq_conta_proc, nr_seq_conta_mat, ie_tipo_guia,
					nr_seq_prestador_atend, nr_seq_prestador_exec, ie_cobrar_mensalidade,
					ie_tipo_prestador_atend, ie_tipo_prestador_exec, ie_tipo_segurado,
					ie_preco, nr_seq_protocolo, nr_seq_protocolo_rec,
					nr_seq_conta_rec, nr_seq_proc_rec, nr_seq_mat_rec,
					ie_origem_valor_co)
				values (	nr_seq_conta_co_w, nr_seq_conta_w, r_C03_w.vl_acatado,
					clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
					nr_seq_segurado_w, dt_mes_competencia_w, ie_tipo_protocolo_w,
					nr_seq_conta_proc_w, nr_seq_conta_mat_w, ie_tipo_guia_w,
					nr_seq_prestador_atend_w, nr_seq_prestador_exec_w, ie_cobrar_mensalidade_w,
					ie_tipo_prestador_atend_w, ie_tipo_prestador_exec_w, ie_tipo_segurado_w,
					ie_preco_w, nr_seq_protocolo_w, nr_seq_protocolo_rec_w,
					nr_seq_conta_rec_p, nr_seq_proc_rec_w, nr_seq_mat_rec_w, 
					'RG');
					
			for r_C04_w in C04(nr_seq_proc_rec_w, nr_seq_mat_rec_w) loop
				
				insert	into	pls_conta_co_aprop(	nr_sequencia, nr_seq_conta_co, nr_seq_conta,
						nr_seq_centro_apropriacao, vl_apropriacao, dt_atualizacao,
						nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
						nr_seq_conta_rec)
					values (	nextval('pls_conta_co_aprop_seq'), nr_seq_conta_co_w, nr_seq_conta_w,
						r_C04_w.nr_seq_centro_aprop, r_C04_w.vl_beneficiario, clock_timestamp(),
						nm_usuario_p, clock_timestamp(), nm_usuario_p,
						nr_seq_conta_rec_p);
			end loop;
		end if;
		
	end loop;
end if;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_valor_co ( nr_seq_conta_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_conta_rec_p text default null) FROM PUBLIC;

