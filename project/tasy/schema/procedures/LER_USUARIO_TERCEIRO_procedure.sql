-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ler_usuario_terceiro ( nr_seq_terceiro_p bigint, nm_usuario_p text, ds_inconsistencia_p INOUT text) AS $body$
DECLARE

 
cd_pessoa_fisica_w	usuario_terceiro.cd_pessoa_fisica%type;
nr_seq_tipo_usuario_w	usuario_terceiro.nr_seq_tipo_usuario%type;
nm_usuario_terc_w	usuario_terceiro.nm_usuario_terc%type;
ds_inconsistencia_w	varchar(255);
nm_pessoa_fisica_w	varchar(255);
cd_setor_atend_w	tipo_usuario_terc_setor.cd_setor_atendimento%type;
cd_perfil_w		tipo_usuario_terc_perfil.cd_perfil%type;
cd_estabelecimento_w	terceiro.cd_estabelecimento%type;
ds_login_w		usuario_terceiro.ds_login%type;
ie_gerou_w		varchar(1) := 'N';
ds_tec_w			varchar(15):= '';
				
				 
C01 CURSOR FOR 
SELECT a.cd_pessoa_fisica, 
	a.nm_usuario_terc, 
	a.nr_seq_tipo_usuario, 
	substr(obter_nome_pf_pj(a.cd_pessoa_fisica,null),1,255) nm_pessoa_fisica, 
	a.ds_login 
from	usuario_terceiro a 
where	not exists (SELECT	1 
	from	usuario x 
	where	upper(x.nm_usuario)	= a.nm_usuario_terc) 
and	a.nr_seq_terceiro	= nr_seq_terceiro_p 
and	(nm_usuario_terc IS NOT NULL AND nm_usuario_terc::text <> '') 
and 	(nr_seq_tipo_usuario IS NOT NULL AND nr_seq_tipo_usuario::text <> '');
		
C02 CURSOR FOR 
SELECT	distinct 
	a.cd_setor_atendimento 
from	tipo_usuario_terc_setor a 
where	a.nr_seq_tipo_usuario	= nr_seq_tipo_usuario_w;
		
C03 CURSOR FOR 
SELECT	distinct 
 	a.cd_perfil 
from	tipo_usuario_terc_perfil a 
where	a.nr_seq_tipo_usuario	= nr_seq_tipo_usuario_w;
		

BEGIN 
select	max(cd_estabelecimento) 
into STRICT	cd_estabelecimento_w 
from	terceiro 
where	nr_sequencia	= nr_seq_terceiro_p;
 
open	C01;
loop 
fetch	C01 into	 
	cd_pessoa_fisica_w, 
	nm_usuario_terc_w, 
	nr_seq_tipo_usuario_w, 
	nm_pessoa_fisica_w, 
	ds_login_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
 
	if (coalesce(nm_usuario_terc_w::text, '') = '') then 
		/*	'Não foi informado um nome de usuário para a pessoa '*/
 
		ds_inconsistencia_w	:= wheb_mensagem_pck.get_texto(303129) || nm_pessoa_fisica_w;
	 
	end if;
		 
	if (coalesce(nr_seq_tipo_usuario_w::text, '') = '') then 
 
		if (ds_inconsistencia_w IS NOT NULL AND ds_inconsistencia_w::text <> '') then 
 
			ds_inconsistencia_w	:= ds_inconsistencia_w || chr(13) || chr(10);
 
		end if;
		 
		ds_inconsistencia_w	:= ds_inconsistencia_w || wheb_mensagem_pck.get_texto(303130) || nm_pessoa_fisica_w;
 
	end if;
	if (coalesce(ds_inconsistencia_w::text, '') = '') then 
		 
		select	replace(replace(dbms_random.string('P', 15), chr(39), ''), ';', '') 
		into STRICT	ds_tec_w 
		;
	 
		insert	into usuario(nm_usuario, 
			ds_usuario, 
			ds_senha, 
			ie_situacao, 
			dt_atualizacao, 
			nm_usuario_atual, 
			cd_estabelecimento, 
			qt_dia_senha, 
			ie_anexar_arquivo, 
			ie_comunic_interna, 
			ie_versao_anterior, 
			ie_evento_agenda, 
			ie_evento_sac, 
			ie_evento_processo, 
			ie_evento_prescr, 
			ie_evento_proc_agenda, 
			ie_evento_comunic, 
			ie_evento_alerta, 
			ie_evento_aprov_compra, 
			ie_evento_exame_urg, 
			ie_evento_aprov_doc, 
			ie_fechar_tasymon, 
			ie_evento_lib_telefone, 
			ie_mostrar_anexo_comunic, 
			ie_evento_ordem_serv, 
			ie_evento_obj_inv, 
			ie_evento_recoleta, 
			cd_pessoa_fisica, 
			nm_usuario_nrec, 
			ds_login, 
			ds_tec) 
		values (nm_usuario_terc_w, 
			nm_pessoa_fisica_w, 
			Obter_Sha2('123456' || ds_tec_w,256), 
			'A', 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_estabelecimento_w, 
			180, 
			'N', 
			'S', 
			'N', 
			'N', 
			'N', 
			'N', 
			'N', 
			'N', 
			'N', 
			'N', 
			'N', 
			'N', 
			'N', 
			'S', 
			'N', 
			'N', 
			'N', 
			'N', 
			'N', 
			cd_pessoa_fisica_w, 
			nm_usuario_p, 
			ds_login_w, 
			ds_tec_w);
		 
		open	C02;
		loop 
		fetch	C02 into	 
			cd_setor_atend_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin 
			insert	into usuario_setor(	 
				nm_usuario_param, 
				cd_setor_atendimento, 
				dt_atualizacao, 
				nm_usuario) 
			values (	nm_usuario_terc_w, 
				cd_setor_atend_w, 
				clock_timestamp(), 
				nm_usuario_p);
			end;
		end	loop;
		close	C02;
		 
		open	C03;
		loop 
		fetch	C03 into	 
			cd_perfil_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin 
			insert	into usuario_perfil(	 
				nm_usuario, 
				cd_perfil, 
				dt_atualizacao, 
				nm_usuario_atual, 
				dt_validade)		 
			values ( nm_usuario_terc_w, 
				cd_perfil_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp());
			end;
		end	loop;
		close	C03;
 
		ie_gerou_w := 'S';
	 
	end if;		
	end;
end loop;
close C01;
 
ds_inconsistencia_p	:= ds_inconsistencia_w;
 
if (coalesce(ds_inconsistencia_w::text, '') = '') and (ie_gerou_w = 'S') then 
	commit;
else 
	if (coalesce(ds_inconsistencia_w::text, '') = '') and (ie_gerou_w = 'N') then 
		/*'Usuário ou tipo de usuário não informado'*/
 
		ds_inconsistencia_w := wheb_mensagem_pck.get_texto(303131);
 
	end if;
	 
	ds_inconsistencia_p	:= ds_inconsistencia_w;
	 
rollback;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ler_usuario_terceiro ( nr_seq_terceiro_p bigint, nm_usuario_p text, ds_inconsistencia_p INOUT text) FROM PUBLIC;

