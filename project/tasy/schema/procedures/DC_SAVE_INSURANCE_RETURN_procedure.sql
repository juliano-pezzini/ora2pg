-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dc_save_insurance_return ( ie_type_report_p text, -- HardCode value based on the method (BulkBill, DVA, IHC) used
 nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

  /*ECLIPSE*/

  nr_seq_dvr_w dvr_response.nr_sequencia%type;
  vl_paid_w dvr_response.vl_paid%type;
  cd_claim_w dvr_response.cd_claim%type;
  vl_charge_w dvr_response.vl_charge%type;
  nr_seq_request_w dvr_response.nr_seq_request%type;
  nr_seq_transaction_w dvr_response.nr_seq_transaction%type;
  ds_code_w eclipse_status_codes.ds_code%type;
  form_not_informed_w varchar(200) := wheb_mensagem_pck.get_texto(1097738);
  /*Direct Control*/

  nr_patient_account_w conta_paciente.nr_interno_conta%type;
  cd_convenio_parametro_w conta_paciente.cd_convenio_parametro%type;
  vl_form_w conta_paciente_guia.vl_guia%type;
  cd_authorization_w conta_paciente_guia.cd_autorizacao%type;
  nr_seq_return_w convenio_retorno.nr_sequencia%type;
  vl_denied_w convenio_retorno_item.vl_glosado%type;
  vl_additional_w convenio_retorno_item.vl_adicional%type;
  nr_invoice_w      bigint;
  nr_claim_w        varchar(20);
  nr_service_code_w varchar(255);
  nr_seq_item_denied_w convenio_retorno_glosa.nr_sequencia%type;
  ds_notes_w convenio_retorno_glosa.ds_observacao%type;
  nr_seq_ret_item_w convenio_retorno_item.nr_sequencia%type;
  ds_notes_claim_fund_w varchar(4000);
  cd_procedimento_w procedimento_paciente.cd_procedimento%type;
  ie_origem_proced_w procedimento_paciente.ie_origem_proced%type;
  cd_setor_atendimento_w procedimento_paciente.cd_setor_atendimento%type;
  ie_emite_conta_w procedimento_paciente.ie_emite_conta%type;
  qt_procedimento_w procedimento_paciente.qt_procedimento%type;
  err_msg_w    varchar(1000);
  ds_message_w varchar(4000);
  /*
  ie_type_report_p
  IHC -> IHC
  BBDVA ->Bulk Bill and DVA
  */
  cihcclaim CURSOR FOR
    SELECT nr_claim_id,
      invoice_id,
      total_charge_amount,
      total_payment,
      excess_amount_decimal,
      claim_fund_assessment,
      co_payment_amount
    from era_response
    where ie_status      = 'P' --Pending
    and ie_type_report_p = 'IHC';
  cihcclaimservice CURSOR(nr_invoice_w bigint, nr_claim_w text)
  FOR
    SELECT a.nr_claim_id,
      a.nr_invoice_id,
      a.vl_charge_amount,
      a.vl_fund_benefit_amount,
      a.nr_service_code
    from dc_ihc_service a
    where a.nr_invoice_id = nr_invoice_w
    and a.nr_claim_id     = nr_claim_w;
  cihcclaimservexplan CURSOR(nr_invoice_w bigint, nr_claim_w text, nr_service_code_w text)
  FOR
    SELECT nr_claim_id,
      nr_invoice_id,
      ds_service_fund_expl
    from dc_ihc_service_expla
    where nr_claim_id   = nr_claim_w
    and nr_invoice_id   = nr_invoice_w
    and nr_service_code = nr_service_code_w;
  cihcclaimfundexpla CURSOR(nr_invoice_w bigint, nr_claim_w text)
  FOR
    SELECT nr_claim_id,
      nr_invoice_id,
      ds_claim_fund_explanation
    from dc_ihc_fund_expla
    where nr_claim_id = nr_claim_w
    and nr_invoice_id = nr_invoice_w;
  cbbdvaclaim CURSOR FOR
    SELECT distinct cd_claim,
      nr_dc_invoice,
      sum(vl_charge_amount) vl_charge_amount,
      sum(vl_claim_benefit_paid) vl_claim_benefit_paid
    from dc_reports
    where ie_status       = 'P' --Pending
    and ie_type_report_p in ('BBDVA')
    group by cd_claim,
      nr_dc_invoice;
  cbbdvaclaimservice CURSOR(nr_dc_invoice_w bigint, cd_claim_w text)
  FOR
    SELECT a.cd_claim,
      a.nr_dc_invoice,
      a.ds_explanation_text,
      a.nr_item,
      a.vl_charge_amount,
      a.vl_claim_benefit_paid,
      a.ds_message
    from dc_reports a
    where ie_status       = 'P' --Pending
    and ie_type_report_p in ('BBDVA')
    and a.cd_claim        = cd_claim_w
    and a.nr_dc_invoice   = nr_dc_invoice_w;
BEGIN
  if (ie_type_report_p = ('IHC')) then
    for rihcclaim in cihcclaim
    loop
      begin
        begin -- Exception
          select dc_obter_conversao_interna_int(null, 'CONTA_PACIENTE','CD_AUTORIZACAO',rihcclaim.invoice_id,'DC')
          into STRICT nr_patient_account_w
;
          if (nr_patient_account_w > 0) then
            select max(cd_convenio_parametro)
            into STRICT cd_convenio_parametro_w
            from conta_paciente
            where nr_interno_conta = nr_patient_account_w;
            select coalesce(max(nr_sequencia),0)
            into STRICT nr_seq_return_w
            from convenio_retorno
            where cd_convenio     = cd_convenio_parametro_w
            and ie_status_retorno = 'R' -- Received
            and clock_timestamp() between coalesce(dt_inicial,clock_timestamp()) and coalesce(dt_final,clock_timestamp());
            select max(b.vl_guia) vl_guia,
              max(coalesce(b.cd_autorizacao, form_not_informed_w)) cd_autorizacao
            into STRICT vl_form_w,
              cd_authorization_w
            from conta_paciente_guia b,
              conta_paciente a
            where a.nr_interno_conta    = b.nr_interno_conta
            and a.nr_interno_conta      = nr_patient_account_w
            and a.cd_convenio_parametro = cd_convenio_parametro_w
            and a.ie_status_acerto      = 2 -- Closed
            and coalesce(a.ie_cancelamento::text, '') = '';
            if (nr_seq_return_w         = 0) then -- Do not exist batch created opened
              select nextval('convenio_retorno_seq') into STRICT nr_seq_return_w;
              insert
              into convenio_retorno(
                  nr_sequencia,
                  cd_convenio,
                  dt_retorno,
                  ie_status_retorno,
                  dt_atualizacao,
                  nm_usuario,
                  nm_usuario_retorno,
                  nr_seq_protocolo,
                  cd_estabelecimento,
                  ds_lote_convenio,
                  ie_tipo_glosa
                )
                values (
                  nr_seq_return_w,
                  cd_convenio_parametro_w,
                  clock_timestamp(),
                  'R', -- Received
                  clock_timestamp(),
                  nm_usuario_p,
                  nm_usuario_p,
                  null,
                  cd_estabelecimento_p,
                  ie_type_report_p
                  || nr_seq_return_w,
                  'N'
                );
            end if;
            vl_denied_w       := rihcclaim.total_charge_amount - rihcclaim.total_payment;
            vl_additional_w   := 0;
            if (vl_denied_w    < 0) then -- Identify the amount paid as additional
              vl_additional_w := rihcclaim.total_payment - rihcclaim.total_charge_amount;
            end if;
            cd_claim_w := rihcclaim.nr_claim_id;
            for rihcclaimfundexpla in cihcclaimfundexpla(
              rihcclaim.invoice_id, rihcclaim.nr_claim_id
            )
            loop
              begin
                ds_notes_claim_fund_w := substr(rihcclaimfundexpla.ds_claim_fund_explanation || chr(13) || chr(10),1,4000);
              end;
            end loop;
            ds_notes_w := substr('Claim Fund Assessment: ' || rihcclaim.claim_fund_assessment || chr(13) || chr(10) || 'Claim Fund Explanation: ' || ds_notes_claim_fund_w,1,4000);
            select nextval('convenio_retorno_item_seq') into STRICT nr_seq_ret_item_w;
            insert
            into convenio_retorno_item(
                nr_sequencia,
                cd_autorizacao,
                dt_atualizacao,
                ie_analisada,
                ie_glosa,
                nm_usuario,
                nr_seq_retorno,
                nr_interno_conta,
                vl_adicional,
                vl_amenor,
                vl_glosado,
                vl_pago,
                ie_doc_retorno_origem,
                ds_observacao,
                cd_autorizacao_conv,
                vl_sinistro,
                vl_coparticipacao
              )
              values (
                nr_seq_ret_item_w,
                cd_authorization_w,
                clock_timestamp(),
                'N',
                'P',
                nm_usuario_p,
                nr_seq_return_w,
                nr_patient_account_w,
                vl_additional_w,         -- vl_adic_w
                vl_denied_w,             -- vl_amenor_w
                0,                       -- vl_glosado
                rihcclaim.total_payment, -- vl_pago_w
                null,
                ds_notes_w,
                rihcclaim.nr_claim_id,
                rihcclaim.excess_amount_decimal, -- Excess amount
                rihcclaim.co_payment_amount
              ); -- Copayment
            ds_notes_w := '';
            for rihcclaimservice in cihcclaimservice(
              rihcclaim.invoice_id, rihcclaim.nr_claim_id
            )
            loop
              begin
                for rihcclaimservexplan in cihcclaimservexplan(
                  rihcclaim.invoice_id, rihcclaim.nr_claim_id, rihcclaimservice.nr_service_code
                )
                loop
                  begin
                    ds_notes_w := substr(rihcclaimservexplan.ds_service_fund_expl || chr(13) || chr(10),1,4000);
                  end;
                end loop;
                if (rihcclaimservice.nr_service_code IS NOT NULL AND rihcclaimservice.nr_service_code::text <> '') then
                  vl_denied_w                        := coalesce(rihcclaimservice.vl_charge_amount,0)- coalesce(rihcclaimservice.vl_fund_benefit_amount,0);
                  select nextval('convenio_retorno_glosa_seq') into STRICT nr_seq_item_denied_w;
                  select max(cd_procedimento),
                    max(ie_origem_proced),
                    max(cd_setor_atendimento),
                    max(ie_emite_conta),
                    max(qt_procedimento)
                  into STRICT cd_procedimento_w,
                    ie_origem_proced_w,
                    cd_setor_atendimento_w,
                    ie_emite_conta_w,
                    qt_procedimento_w
                  from procedimento_paciente a
                  where a.cd_procedimento_convenio = rihcclaimservice.nr_service_code
                  and a.nr_interno_conta           = nr_patient_account_w;
                  insert
                  into convenio_retorno_glosa(
                      nr_sequencia,
                      nr_seq_ret_item,
                      vl_glosa,
                      dt_atualizacao,
                      nm_usuario,
                      cd_procedimento,
                      ie_origem_proced,
                      cd_setor_atendimento,
                      ie_emite_conta,
                      ie_atualizacao,
                      vl_pago_digitado,
                      qt_glosa,
                      qt_cobrada,
                      vl_cobrado,
                      cd_item_convenio,
                      cd_motivo_glosa,
                      ds_observacao
                    )
                    values (
                      nr_seq_item_denied_w,
                      nr_seq_ret_item_w,
                      vl_denied_w, -- vl_glosa_w
                      clock_timestamp(),
                      nm_usuario_p,
                      cd_procedimento_w,
                      ie_origem_proced_w,
                      cd_setor_atendimento_w,
                      ie_emite_conta_w,
                      'N',
                      0,
                      0, -- qt_glosa
                      qt_procedimento_w,
                      rihcclaimservice.vl_charge_amount,
                      rihcclaimservice.nr_service_code,
                      null, -- cd_motivo_glosa
                      ds_notes_w
                    );
                end if;
              end;
            end loop; -- rIHCClaimService
            update era_response
            set ie_status     = 'E' -- Executed
            where nr_claim_id = rihcclaim.nr_claim_id
            and invoice_id    = rihcclaim.invoice_id;
          end if;
          commit;
        exception
        when others then
          err_msg_w    := substr(sqlerrm, 1, 1000);
          ds_message_w := '{success=false, errorMessage=' || err_msg_w || '}';
          insert
          into log_dc_interface(
              nr_sequencia,
              invoice_id,
              dt_event,
              ds_event,
              ie_request_response,
              ds_message
            )
            values (
              nextval('log_dc_interface_seq'),
              nr_patient_account_w,
              clock_timestamp(),
              'directcontrol.getreportihc',
              'T',
              ds_message_w
            );
        end;
      end;
    end loop; -- rIHCClaim
  end if;
  ds_notes_w          := '';
  if (ie_type_report_p = ('BBDVA')) then
    for rbbdvaclaim in cbbdvaclaim
    loop -- BB DVA Claim
      begin
        begin -- Exception
          select dc_obter_conversao_interna_int(null, 'CONTA_PACIENTE','CD_AUTORIZACAO',rbbdvaclaim.nr_dc_invoice,'DC')
          into STRICT nr_patient_account_w
;
          if (coalesce(nr_patient_account_w,0) > 0) then
            select max(cd_convenio_parametro)
            into STRICT cd_convenio_parametro_w
            from conta_paciente
            where nr_interno_conta = nr_patient_account_w;
            select coalesce(max(nr_sequencia),0)
            into STRICT nr_seq_return_w
            from convenio_retorno
            where cd_convenio     = cd_convenio_parametro_w
            and ie_status_retorno = 'R' -- Received
            and clock_timestamp() between coalesce(dt_inicial,clock_timestamp()) and coalesce(dt_final,clock_timestamp());
            select coalesce(b.vl_guia,0) vl_guia,
              coalesce(b.cd_autorizacao, form_not_informed_w) cd_autorizacao
            into STRICT vl_form_w,
              cd_authorization_w
            from conta_paciente_guia b,
              conta_paciente a
            where a.nr_interno_conta    = b.nr_interno_conta
            and a.nr_interno_conta      = nr_patient_account_w
            and a.cd_convenio_parametro = cd_convenio_parametro_w
            and a.ie_status_acerto      = 2 -- Closed
            and coalesce(a.ie_cancelamento::text, '') = '';
            if (nr_seq_return_w         = 0) then -- Do not exist batch created opened
              select nextval('convenio_retorno_seq') into STRICT nr_seq_return_w;
              insert
              into convenio_retorno(
                  nr_sequencia,
                  cd_convenio,
                  dt_retorno,
                  ie_status_retorno,
                  dt_atualizacao,
                  nm_usuario,
                  nm_usuario_retorno,
                  nr_seq_protocolo,
                  cd_estabelecimento,
                  ds_lote_convenio,
                  ie_tipo_glosa
                )
                values (
                  nr_seq_return_w,
                  cd_convenio_parametro_w,
                  clock_timestamp(),
                  'R', -- Received
                  clock_timestamp(),
                  nm_usuario_p,
                  nm_usuario_p,
                  null,
                  cd_estabelecimento_p,
                  ie_type_report_p
                  || nr_seq_return_w,
                  'N'
                );
            end if;
            vl_denied_w       := rbbdvaclaim.vl_charge_amount - rbbdvaclaim.vl_claim_benefit_paid;
            vl_additional_w   := 0;
            if (vl_denied_w    < 0) then -- Identify the amount paid as additional
              vl_additional_w := rbbdvaclaim.vl_claim_benefit_paid - rbbdvaclaim.vl_charge_amount;
            end if;
            cd_claim_w := rbbdvaclaim.cd_claim;
            select nextval('convenio_retorno_item_seq') into STRICT nr_seq_ret_item_w;
            insert
            into convenio_retorno_item(
                nr_sequencia,
                cd_autorizacao,
                dt_atualizacao,
                ie_analisada,
                ie_glosa,
                nm_usuario,
                nr_seq_retorno,
                nr_interno_conta,
                vl_adicional,
                vl_amenor,
                vl_glosado,
                vl_pago,
                ie_doc_retorno_origem,
                ds_observacao,
                cd_autorizacao_conv,
                vl_sinistro,
                vl_coparticipacao
              )
              values (
                nr_seq_ret_item_w,
                cd_authorization_w,
                clock_timestamp(),
                'N',
                'P',
                nm_usuario_p,
                nr_seq_return_w,
                nr_patient_account_w,
                vl_additional_w,                   -- vl_adic_w
                vl_denied_w,                       -- vl_amenor_w
                0,                                 -- vl_glosado
                rbbdvaclaim.vl_claim_benefit_paid, -- vl_pago_w
                null,
                ds_notes_w,
                cd_claim_w,
                null, -- Excess amount
                null
              ); -- Copayment
            for rbbdvaclaimservice in cbbdvaclaimservice(
              rbbdvaclaim.nr_dc_invoice, cd_claim_w
            )
            loop
              begin
                ds_notes_w  := substr(rbbdvaclaimservice.ds_explanation_text,1,4000);
                vl_denied_w := rbbdvaclaimservice.vl_charge_amount - rbbdvaclaimservice.vl_claim_benefit_paid;
                select nextval('convenio_retorno_glosa_seq') into STRICT nr_seq_item_denied_w;
                select max(cd_procedimento),
                  max(ie_origem_proced),
                  max(cd_setor_atendimento),
                  max(ie_emite_conta),
                  max(qt_procedimento)
                into STRICT cd_procedimento_w,
                  ie_origem_proced_w,
                  cd_setor_atendimento_w,
                  ie_emite_conta_w,
                  qt_procedimento_w
                from procedimento_paciente a
                where a.cd_procedimento_convenio = rbbdvaclaimservice.nr_item
                and a.nr_interno_conta           = nr_patient_account_w;
                insert
                into convenio_retorno_glosa(
                    nr_sequencia,
                    nr_seq_ret_item,
                    vl_glosa,
                    dt_atualizacao,
                    nm_usuario,
                    cd_procedimento,
                    ie_origem_proced,
                    cd_setor_atendimento,
                    ie_emite_conta,
                    ie_atualizacao,
                    vl_pago_digitado,
                    qt_glosa,
                    qt_cobrada,
                    vl_cobrado,
                    cd_item_convenio,
                    cd_motivo_glosa,
                    ds_observacao,
                    cd_autorizacao_compl
                  )
                  values (
                    nr_seq_item_denied_w,
                    nr_seq_ret_item_w,
                    vl_denied_w, -- vl_glosa_w
                    clock_timestamp(),
                    nm_usuario_p,
                    cd_procedimento_w,
                    ie_origem_proced_w,
                    cd_setor_atendimento_w,
                    ie_emite_conta_w,
                    'N',
                    rbbdvaclaimservice.vl_claim_benefit_paid,
                    0, -- qt_glosa
                    qt_procedimento_w,
                    rbbdvaclaimservice.vl_charge_amount,
                    rbbdvaclaimservice.nr_item,
                    null, -- cd_motivo_glosa
                    ds_notes_w,
                    cd_claim_w
                  );
              end;
            end loop; -- rBBDVAClaimService
            update dc_reports
            set ie_status     = 'E' -- Executed
            where cd_claim    = rbbdvaclaim.cd_claim
            and nr_dc_invoice = rbbdvaclaim.nr_dc_invoice;
          end if;
          commit;
        exception
        when others then
          err_msg_w    := substr(sqlerrm, 1, 1000);
          ds_message_w := '{success=false, errorMessage=' || err_msg_w || '}';
          insert
          into log_dc_interface(
              nr_sequencia,
              invoice_id,
              dt_event,
              ie_request_response,
              ds_event,
              ds_message
            )
            values (
              nextval('log_dc_interface_seq'),
              nr_patient_account_w,
              clock_timestamp(),
              'T',
              'directcontrol.getreportbbdva',
              ds_message_w
            );
        end;
      end;
    end loop; -- rBBDVAClaim
  end if;
  commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dc_save_insurance_return ( ie_type_report_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

