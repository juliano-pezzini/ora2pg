-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE populate_cad_table ( dt_exportar_de_p timestamp , dt_exportar_ate_p timestamp , nm_usuario_p text , returned_value_p INOUT bigint , other_exception_p INOUT text ) AS $body$
DECLARE

dt_exportar_de_w		timestamp;
dt_exportar_ate_w		timestamp;
returned_value_w		bigint;
  /*--CAD table columns*/

nr_prontuario_w			varchar(8);
nr_atendimento_w		varchar(12);
nr_mul_primary_site_count_w	varchar(2);
nr_medicare_number_w		varchar(11);
nm_patient_surname_w		varchar(24);
nm_patient_first_name_w		varchar(15);
nm_patient_second_name_w	varchar(15);
ds_address_usual_residence_w	varchar(50);
ds_location_usual_residence_w	varchar(40);
cd_postcode_usual_residence_w	varchar(4);
dt_date_of_birth_w		varchar(9);
ds_occupation_before_retire_w	varchar(50);
ie_sex_w			varchar(1);
cd_country_of_birth_w		varchar(4);
ie_martial_status_w		varchar(2);
ie_indigenous_status_w		varchar(2);
dt_admission_date_w		varchar(9);
dt_separation_date_w		varchar(9);
ie_mode_of_separation_w		varchar(2);
cd_transferring_to_facility_w	varchar(5);
ie_autopsy_flag_w		varchar(1);
ds_cause_of_death_w		varchar(50);
cd_treating_doc_title_w		varchar(4);
cd_treating_doc_ini_w		varchar(9);
nm_treating_doc_fn_w		varchar(55);
nm_treating_doc_sn_w		varchar(29);
cd_diagnosis_at_separation_w	varchar(9);
line_count_w			bigint	:=0;
downloaded_report_count_w	bigint	:=0;
v_errm				varchar(100 );
exc_raised_in_cad_tab		exception;
								 													
error_result			text		:=null;
  c01 CURSOR FOR
	SELECT	distinct adiciona_zeros_esquerda(pf.nr_prontuario,8),
		adiciona_zeros_esquerda(ap.nr_atendimento,12),
		obter_count_primary_site(ap.nr_atendimento , rc.nr_sequencia ) ,
		coalesce( pf.cd_rfc , 0 ) ,
		chr( 34 ) || substr( parse_name( ap.cd_pessoa_fisica , 'LN' ) , 1 , 22 ) || chr( 34 ) ,
		chr( 34 ) || trim(both substr( parse_name( ap.cd_pessoa_fisica , 'FN' ) , 1 , 13 ) ) || chr( 34 ) ,
		(CASE WHEN (parse_name( ap.cd_pessoa_fisica , 'MN' ) IS NOT NULL AND (parse_name( ap.cd_pessoa_fisica , 'MN' ))::text <> '') THEN chr( 34 ) || trim(both substr( parse_name( ap.cd_pessoa_fisica , 'MN' ) , 1 , 13 ) ) || chr( 34 )  ELSE null  END),
		chr( 34 ) || substr( obter_compl_pf( ap.cd_pessoa_fisica , 1 , 'EN' ) , 1 , 48 ) || chr( 34 ) ,
		chr( 34 ) || substr( obter_compl_pf( ap.cd_pessoa_fisica , 1 , 'DSM' ) , 1 , 38 ) || chr( 34 ) ,
		substr( coalesce( obter_compl_pf( ap.cd_pessoa_fisica , 1 , 'CEP' ) , 8888 ) , 1 , 4 ) ,
		to_char( coalesce( pf.dt_nascimento , '15-JUN-1900' ) , 'ddMONyyyy' ) ,
		(CASE WHEN (obter_desc_profissao( pf.cd_ult_profissao ) IS NOT NULL AND (obter_desc_profissao( pf.cd_ult_profissao ))::text <> '') THEN chr( 34 ) ||substr( obter_desc_profissao( pf.cd_ult_profissao ) , 1 , 48 )||chr( 34 ) ELSE null END) ,
		substr( pf.ie_sexo , 1 , 1 ) ,
		substr( coalesce( pf.cd_nacionalidade , 9999 ) , 1 , 4 ) ,
		substr( coalesce( obter_valor_dominio( 5 , pf.ie_estado_civil ) , 'N' ) , 1 , 2 ) ,
		substr( coalesce( pf.nr_seq_etnia , '00' ) , 1 , 2 ) ,
		to_char( ap.dt_entrada , 'ddMONyyyy' ) ,
		coalesce( to_char( pf.dt_obito , 'ddMONyyyy' ) , to_char( ap.dt_alta , 'ddMONyyyy' ) , to_char( clock_timestamp() , 'ddMONyyyy' ) ) ,
		substr( coalesce( obter_cd_motivo_alta_atend( ap.nr_atendimento ) , 10 ) , 1 , 2 ) ,
		substr( obter_nome_cpf_cgc( get_transfer_detail( ap.nr_atendimento ) ) , 1 , 5 ) ,
		obter_atend_sumario_alta( ap.cd_pessoa_fisica , 'N' ) ,
		(CASE WHEN (obter_desc_causa_morte( ap.cd_pessoa_fisica ) IS NOT NULL AND (obter_desc_causa_morte( ap.cd_pessoa_fisica ))::text <> '') THEN chr( 34 )||substr( obter_desc_causa_morte( ap.cd_pessoa_fisica )||chr( 34 ) , 1 , 50 )  ELSE null  END) ,
		chr( 34 ) || substr( pf.nr_seq_forma_trat , 1 , 2 ) || chr( 34 ) ,
		chr( 34 ) || substr( parse_name( ap.cd_medico_resp , 'FN' ) , 1 , 1 ) || '' || substr( parse_name( ap.cd_medico_resp , 'LN' ) , 1 , 1 ) || chr( 34 ) ,
		chr( 34 ) || trim(both substr( parse_name( ap.cd_medico_resp , 'FN' ) , 1 , 53 )) || chr( 34 ) ,
		chr( 34 ) || trim(both substr( parse_name( ap.cd_medico_resp , 'LN' ) , 1 , 27 )) || chr( 34 ) ,
		dd.cd_doenca
	FROM pessoa_fisica pf, diagnostico_doenca dd, atendimento_paciente ap
LEFT OUTER JOIN registro_cancer rc ON (ap.nr_atendimento = rc.nr_atendimento)
WHERE ap.nr_atendimento =dd.nr_atendimento and ap.cd_pessoa_fisica =pf.cd_pessoa_fisica  and dd.cd_doenca in (
			SELECT cd_doenca_cid
			from cid_doenca
			where (	cd_doenca_cid like 'C%'		OR
				cd_doenca_cid like 'D0%' 	OR
				cd_doenca_cid like 'D3%' 	OR
				cd_doenca_cid like 'D4%' 	OR
				cd_doenca_cid like 'Z85%')
			EXCEPT
			select cd_doenca_cid
			from cid_doenca
			where (	cd_doenca_cid like 'C44%' 	OR
				cd_doenca_cid like 'C77%' 	OR
				cd_doenca_cid like 'C78%' 	OR
				cd_doenca_cid like 'C79%' 	OR
				cd_doenca_cid like 'D1%'  	OR
				cd_doenca_cid like 'D2%'  	OR
				cd_doenca_cid like 'D31%' 	OR
				cd_doenca_cid like 'D32%' 	OR
				cd_doenca_cid like 'D34%' 	OR
				cd_doenca_cid like 'D35%' 	OR
				cd_doenca_cid like 'D36%' 	OR
				cd_doenca_cid like 'D04%' 	OR
				cd_doenca_cid like 'D48.5%' 	OR
				cd_doenca_cid like 'Z85.9')
			
UNION ALL

			select cd_doenca_cid
			from cid_doenca
			where (	cd_doenca_cid like 'D18.02' 	OR
				cd_doenca_cid like 'Q85.0' 	OR
				cd_doenca_cid like 'D76.0')
		) and (rc.dt_liberacao IS NOT NULL AND rc.dt_liberacao::text <> '') and rc.dt_diagnostico between dt_exportar_de_w and dt_exportar_ate_w;

BEGIN
dt_exportar_de_w	:= dt_exportar_de_p;
dt_exportar_ate_w	:= dt_exportar_ate_p;
if (dt_exportar_de_w IS NOT NULL AND dt_exportar_de_w::text <> '' AND dt_exportar_ate_w IS NOT NULL AND dt_exportar_ate_w::text <> '') then
	open c01;
	loop
	 begin
		line_count_w	:= line_count_w+1;
        fetch c01 into
		nr_prontuario_w ,
		nr_atendimento_w ,
		nr_mul_primary_site_count_w ,
		nr_medicare_number_w ,
		nm_patient_surname_w ,
		nm_patient_first_name_w ,
		nm_patient_second_name_w ,
		ds_address_usual_residence_w ,
		ds_location_usual_residence_w ,
		cd_postcode_usual_residence_w ,
		dt_date_of_birth_w ,
		ds_occupation_before_retire_w ,
		ie_sex_w ,
		cd_country_of_birth_w ,
		ie_martial_status_w ,
		ie_indigenous_status_w ,
		dt_admission_date_w ,
		dt_separation_date_w ,
		ie_mode_of_separation_w ,
		cd_transferring_to_facility_w ,
		ie_autopsy_flag_w ,
		ds_cause_of_death_w ,
		cd_treating_doc_title_w ,
		cd_treating_doc_ini_w ,
		nm_treating_doc_fn_w ,
		nm_treating_doc_sn_w ,
		cd_diagnosis_at_separation_w;
        EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		insert into cancer_admission_details(
			nr_sequencia ,
			dt_atualizacao ,
			nm_usuario ,
			dt_atualizacao_nrec ,
			nm_usuario_nrec ,
			nr_prontuario ,
			nr_atendimento ,
			nr_mul_primary_site_count ,
			nr_medicare_number ,
			nm_patient_surname ,
			nm_patient_first_name ,
			nm_patient_second_name ,
			ds_address_of_usual_residence ,
			ds_location_of_usual_residence ,
			cd_postcode_of_usual_residence ,
			dt_date_of_birth ,
			ds_occupation_before_retire ,
			ie_sex ,
			cd_country_of_birth ,
			ie_martial_status ,
			ie_indigenous_status ,
			dt_admission_date ,
			dt_separation_date ,
			ie_mode_of_separation ,
			cd_transferring_to_facility ,
			ie_autopsy_flag ,
			ds_cause_of_death ,
			cd_treating_doc_title ,
			cd_treating_doc_ini ,
			nm_treating_doc_fn ,
			nm_treating_doc_sn ,
			cd_diagnosis_at_separation ,
			dt_export_from ,
			dt_export_to ,
			nr_report_sequence)
		values (	nextval('cancer_admission_details_seq') ,
			clock_timestamp() ,
			nm_usuario_p ,
			clock_timestamp() ,
			nm_usuario_p ,
			nr_prontuario_w ,
			nr_atendimento_w ,
			nr_mul_primary_site_count_w ,
			nr_medicare_number_w ,
			nm_patient_surname_w ,
			nm_patient_first_name_w ,
			nm_patient_second_name_w ,
			ds_address_usual_residence_w ,
			ds_location_usual_residence_w ,
			cd_postcode_usual_residence_w ,
			dt_date_of_birth_w ,
			ds_occupation_before_retire_w ,
			ie_sex_w ,
			cd_country_of_birth_w ,
			ie_martial_status_w ,
			ie_indigenous_status_w ,
			dt_admission_date_w ,
			dt_separation_date_w ,
			ie_mode_of_separation_w ,
			cd_transferring_to_facility_w ,
			ie_autopsy_flag_w ,
			ds_cause_of_death_w ,
			cd_treating_doc_title_w ,
			cd_treating_doc_ini_w ,
			nm_treating_doc_fn_w ,
			nm_treating_doc_sn_w ,
			cd_diagnosis_at_separation_w ,
			dt_exportar_de_w ,
			dt_exportar_ate_w ,
			null);
		exception when others then
			v_errm      := substr( sqlerrm , 1 , 100 );
			error_result:= error_result || ' '|| v_errm||' . error happened at line '||line_count_w||' for encounter '|| nr_atendimento_w ||chr( 13 )||chr( 10 );
		end;						
	exception
	when data_exception or unique_violation or invalid_cursor_state then
		v_errm      	:= substr( sqlerrm , 1 , 100 );
		error_result	:= error_result || ' '|| v_errm||' . error happened at line '||line_count_w||chr( 13 )||chr( 10 );
	end;
	end loop;
		returned_value_w	:= 1;
		other_exception_p	:= null;
		if (error_result IS NOT NULL AND error_result::text <> '')then
			returned_value_w	:= 0;
			other_exception_p	:= error_result;
			raise exc_raised_in_cad_tab;				
		end if;
	close c01;
end if;
	returned_value_p	:= returned_value_w;
exception
when others then
	returned_value_p :=2;
	other_exception_p:=other_exception_p||wheb_mensagem_pck.get_texto( 1073278 , 'DS_ERROR='||'populate_cad_table. Error:'|| sqlerrm );
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE populate_cad_table ( dt_exportar_de_p timestamp , dt_exportar_ate_p timestamp , nm_usuario_p text , returned_value_p INOUT bigint , other_exception_p INOUT text ) FROM PUBLIC;

