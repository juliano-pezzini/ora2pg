-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE inserir_item_protocolo_prescr ( nr_prescricao_p bigint, cd_protocolo_p bigint, nr_sequencia_p bigint, cd_intervalo_p text, qt_protocolo_p bigint, nm_usuario_p text, ie_urgencia_p text, dt_procedimento_p timestamp, hr_prim_horario_p text, ds_dados_clinicos_p text, qt_peso_p bigint, nr_seq_pend_pac_acao_p bigint default null) AS $body$
DECLARE

			
c_fmt_data	constant varchar(21) := 'dd/mm/yyyy hh24:mi:ss';											
											
-- OS 583829 // Somente ajustei a ordem das restricoes nos select's
ds_erro_w			varchar(255);
ie_cig_w				varchar(255);
ds_horarios_sol_2w			varchar(255);
ds_erro_ww			varchar(4000);
ds_rec_w				varchar(4000);
hr_prim_horario_rec_w		varchar(5);
qt_volume_sol_w			double precision;
ie_kit_automatico_w		varchar(5);
qt_dia_entrega_w			numeric(20);
varIe_Sol_prescr_w			varchar(5);
VarRegraPrimHorarioSol_w 		varchar(5);
ie_arredondar_etapas_w		varchar(5);
ie_vel_etapa_w			varchar(5);
ie_gera_horarios_ACM_w		varchar(5);
ie_gera_horarios_SN_w		varchar(5);
ie_medico_prescr_w		varchar(5);
cd_prescritor_w			varchar(50);
cd_medico_exec_w			varchar(20);
ie_data_objetivo_w			varchar(5);
ie_acm_w			varchar(5);
ie_solucao_especial_w		varchar(5);
dt_primeiro_horario_w		timestamp;
dt_primeiro_horario_sol_w		timestamp;
dt_incio_prescr_w			timestamp;
dt_validade_prescr_w		timestamp;
qt_prescr_atend_w			bigint;
cd_convenio_w			integer;
nr_atendimento_w			bigint;
nr_seq_pend_pac_acao_w		bigint;
qt_min_intervalo_w			bigint;
cd_setor_atend_w			bigint;
nr_seq_topografia_w		bigint;
nr_seq_topografia_ww		bigint;
nr_erro_w				bigint;
nr_seq_solic_w			bigint;
cd_kit_material_w			bigint;
QT_EXAMES_CONTA_W		double precision;
nr_horas_validade_w		integer;
nr_seq_material_w			integer;
nr_seq_procedimento_w		integer;
qt_dose_ataque_w			double precision;
nr_seq_rec2_w			bigint;
nr_seq_dieta_w			integer;
nr_seq_dieta_novo_w		integer;
nr_seq_dieta_prot_w		integer;
cd_dieta_w			bigint;
ie_destino_dieta_w			varchar(2);
ie_situacao_w			varchar(2);
VarParam805_w			varchar(2);
ie_via_aplicacao_w			varchar(5);
ds_justificativa_w			varchar(4000);
ie_tipo_sol_w			varchar(5);
cd_kit_w				varchar(50);
cd_estab_w			smallint;
ie_tipo_convenio_w			smallint;
ds_dado_clinico_w			varchar(2000);
ie_refeicao_w			varchar(3);
ds_horarios_dieta_w		varchar(2000);
DS_HORARIOS_PADRAO_W	varchar(2000);
ds_observacao_dieta_w		varchar(2000);
ds_exame_fis_achado_cirur_w	varchar(2000);
ds_resumo_clinico_w		varchar(2000);
nr_seq_rec_w			integer;
nr_seq_solucao_w			integer;
nr_seq_solucao_novo_w		integer;
nr_seq_solucao_prot_w		integer;
nr_agrupamento_sol_w		double precision;
ie_tipo_dosagem_w			varchar(3);
qt_dosagem_w			double precision;
qt_dosagem_ww			double precision;
qt_solucao_total_w			double precision;
qt_tempo_aplicacao_w		double precision;
cd_categoria_w			varchar(10);
qt_volume_w			double precision;
nr_etapas_w			smallint;
nr_etapas_2w			smallint;
ie_bomba_infusao_w		varchar(1);
ie_prot_glic_mentor_w		varchar(1);
ie_esquema_alternado_w		varchar(1);
ie_calc_aut_w			varchar(1);
ie_acm_sol_w			varchar(1);
qt_hora_fase_w			double precision;
qt_hora_fase_ww			double precision;
ds_horarios_sol_w			varchar(2000);
nr_seq_proc_w			integer;
nr_agrupamento_proc_w		double precision;
nr_seq_proc_novo_w		integer;
nr_seq_proc_prot_w		integer;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
qt_procedimento_w			double precision;
ds_observacao_w			varchar(2000);
cd_intervalo_w			varchar(7);
cd_setor_exclusivo_w		integer;
cd_material_exame_w		varchar(20);
nr_seq_exame_w			bigint;
ie_se_necessario_w		varchar(1);
ie_acm_proced_w			varchar(1);
hr_prim_horario_proced_w 		varchar(5);
ds_material_especial_w		varchar(45);
ie_agora_w			varchar(1);
cd_proced_aux_w			bigint;
ie_origem_aux_w			bigint;
ds_horarios_proced_w    		varchar(2000);
ds_horarios_proced2_w  		varchar(2000);
nr_ocorrencia_proced_w		double precision;
ie_objetivo_onco_w			varchar(15);
ie_executar_leito_w			varchar(1);
nr_seq_contraste_w		bigint;
qt_limite_uma_hora_w		double precision;
hr_prim_hor_sol_w			varchar(5);
cd_material_w          		 integer;
qt_dose_w       			double precision;
cd_unidade_medida_dose_w 		varchar(30);
nr_sequencia_w			bigint;
qt_dose_ml_w			double precision;
qt_total_etapa_w			double precision;
qt_dosagem_final_w		double precision;
qt_conversao_ml_w			double precision;
ds_solucao_w			varchar(100);
nr_seq_proc_interno_w		bigint;
nr_seq_proc_interno_deriv_w 		bigint;
ie_lado_w			varchar(1);
dt_prescricao_w			timestamp;
dt_prescricao_ww			timestamp;
nr_seq_nut_w			bigint;
nr_seq_fator_ativ_w		bigint;
nr_seq_fator_stress_w		bigint;
pr_proteina_w			smallint;
pr_lipidio_w			smallint;
pr_carboidrato_w			smallint;
qt_kcal_prot_w			integer;
qt_kcal_lipidio_w       		integer;
qt_kcal_carboidrato_w  		integer;
qt_kcal_total_w        		integer;
qt_kcal_kg_w			real;
qt_grama_prot_kg_dia_w  		real;
pr_npt_w                			real;
qt_fase_npt_w           		smallint;
qt_gotejamento_npt_w    		smallint;
cd_pessoa_fisica_w		varchar(10);
qt_peso_w	 		real;
qt_peso_pos_w 			real;
qt_peso_atual_w			real;
qt_peso_ideal_w			real;
qt_altura_w			real;
qt_idade_w			smallint;
nr_seq_npt_w			bigint;
cd_estabelecimento_w		smallint;
DS_DOSE_DifERENCIADA_w	varchar(50);
ie_medic_internado_w		varchar(255);
ie_tipo_atendimento_w		smallint;
ie_urgencia_w			varchar(1);
cd_setor_prescr_w			integer;/* Rafael em 28/2/8 OS81068 */
ie_respiracao_w			varchar(15);
cd_mod_vent_w			varchar(15);
qt_fluxo_oxigenio_w		double precision;
dt_prim_horario_proced_w 		timestamp;
ie_tipo_hemodialise_w		varchar(15);
qt_sessao_sem_w			smallint;
qt_hora_sessao_w			smallint;
qt_min_sessao_w			smallint;
qt_fluxo_sangue_w			double precision;
nr_seq_mod_dialisador_w		bigint;
ie_ultrafiltracao_w			varchar(15);
qt_ultrafiltracao_w			double precision;
ie_tipo_dialise_w			varchar(1);
ie_tipo_peritoneal_w		varchar(15);
nr_seq_maq_cicladora_w		bigint;
qt_volume_total_w			double precision;
dt_status_w			timestamp;
ie_status_w			varchar(15);
nr_seq_hd_prescr_w		bigint;
ie_pos_dialisador_w			varchar(1);
ie_hemodialise_w			varchar(1);
nr_seq_protocolo_w		bigint;
ie_tipo_solucao_w			varchar(15);
qt_temp_solucao_w			real;
ie_momento_w			varchar(1);
ie_unid_vel_inf_w			varchar(3);
nr_seq_elemento_w			bigint;
cd_unidade_medida_w		varchar(30);
qt_elemento_w			double precision;
nr_seq_sol_elem_w			bigint;
nr_seq_medic_w			bigint;
dt_inicio_prescr_w			timestamp;
ie_gerar_setor_w			varchar(10);
nr_seq_bco_sangue_w		bigint;
ie_tipo_paciente_w			varchar(2);
ie_porte_cirurgico_w		varchar(2);
ie_tipo_w				bigint;
ds_diag_bco_sangue_w		varchar(256);
nr_seq_proc_sangue_w		bigint;
nr_seq_derivado_w			bigint;
qt_vol_hemocomp_w		bigint;
dt_prev_execucao_w		timestamp;
qt_veloc_inf_hemo_w		bigint;
cd_setor_atendimento_w		integer;
ie_util_hemocomponente_w 		varchar(15);
nr_seq_prescr_sangue_w		bigint;
nr_seq_prot_glic_w			bigint;
ie_se_necessario_sol_w		varchar(15);
nr_seq_gasoterapia_w		bigint;
ie_disp_resp_esp_w		varchar(15);
cd_modalidade_vent_w		varchar(15);
nr_seq_gas_w			bigint;
ie_modo_adm_w			varchar(5);
ie_inicio_w			varchar(15);
ie_unidade_medida_w		varchar(15);
qt_gasoterapia_w			double precision;
qt_freq_vent_w			smallint;
nr_seq_gas_prot_w			bigint;
ie_solucao_pca_w			varchar(15);
ie_tipo_analgesia_w		varchar(15);
ie_pca_modo_prog_w		varchar(15);
qt_dose_inicial_pca_w		double precision;
qt_vol_infusao_pca_w		double precision;
qt_bolus_pca_w			double precision;
qt_intervalo_bloqueio_w		double precision;
qt_limite_quatro_hora_w		double precision;
ds_orientacao_w			varchar(2000);
nr_seq_tipo_w			bigint;
nr_seq_objetivo_w			bigint;
dt_inicio_w			timestamp;
dt_fim_w				timestamp;
dt_evento_w			timestamp;
qt_min_ant_w			integer;
qt_min_depois_w			integer;
qt_hora_ant_w			integer;
qt_hora_depois_w			integer;
ds_evento_w			varchar(255);
ie_repete_copia_w			varchar(1);
nr_seq_jejum_w			bigint;
ie_consiste_medic_w		varchar(3);
ie_dt_prescr_dt_exec_proc_w		varchar(1);
ie_arredondar_w			varchar(1);
ie_urgencia_Prot_W		varchar(1);
cd_setor_entrega_w		integer;
cd_setor_coleta_w			integer;
ds_recomendacao_w		varchar(4000);
qt_recomendacao_w		double precision;
cd_recomendacao_w		bigint;
nr_seq_classif_w			bigint;
ds_horarios_w			varchar(4000);
ds_horario1_w			varchar(4000);
ds_horario2_w			varchar(4000);
ds_horarios2_w			varchar(4000);
nr_seq_apres_w			bigint;
nr_ocorrencia_w			double precision;
ie_um_dose_inicio_pca_w 		varchar(15);
ie_um_limite_pca_w			varchar(15);
ie_um_limite_hora_pca_w 		varchar(15);
ie_um_fluxo_pca_w			varchar(15);
ie_um_bolus_pca_w		varchar(15);
ie_prescr_proc_sem_lib_w 		varchar(30);
ie_grupo_hemocom_w		varchar(3);
nr_seq_indicacao_w		bigint;
ds_indicacao_adic_w		varchar(2000);
ds_prescricao_w			varchar(80);
ie_etapa_interv_w			varchar(1);
cd_intervalo_ww			varchar(7);
ie_recalc_vel_inf_w			varchar(1);
ieEliminaHorVigencia_w		varchar(1);
nr_seq_diametro_agulha_w 		bigint;
nr_seq_tipo_agulha_w		bigint;
nr_seq_tipo_agulha_art_w 		bigint;
nr_seq_ultra_w				protocolo_hd_prescricao.nr_seq_ultra%type;
nr_seq_perfil_sodio_w		bigint;
qt_zero_um_w			bigint;
qt_um_dois_w			bigint;
qt_dois_tres_w			bigint;
qt_tres_quatro_w			bigint;
ie_ligar_prime_w			varchar(1);
qt_peso_seco_w			double precision;
ie_continuo_w			varchar(1);
dt_inicio_interv_w			timestamp;
ie_interv_setor_w			varchar(1);
ie_mesmo_zerado_w		varchar(1);
ds_horarios_gas_w			varchar(4000);
ds_horarios_gas_ww		varchar(4000);
ie_previsao_proced_w		varchar(15);
ie_check_tipo_interv_w		varchar(1);
ds_erro_www			varchar(2000);
nr_seq_proc_interno_aux_w 		bigint;
ie_limpa_prim_hor_w		varchar(1) := 'N';
ds_diag_provavel_ap_w		varchar(255);
ds_exame_anterior_ap_w		varchar(255);
ds_localizacao_lesao_w		varchar(2000);
ds_tempo_doenca_w		varchar(255);
cd_cgc_laboratorio_w		varchar(14);
qt_frasco_env_w			integer;
nr_seq_proc_int_cirur_w		bigint;
qt_peca_ap_w			smallint;
nr_seq_amostra_princ_w		bigint;
ds_qualidade_peca_ap_w		varchar(2000);
ie_forma_exame_w			varchar(15);
cd_pessoa_coleta_w		varchar(10);
nr_etapas_prot_w			integer;
cd_plano_convenio_w		varchar(10);
ie_inconsistencia_w			varchar(20);
ds_inconsistentes_w		varchar(20);
ie_acm_sn_w			varchar(20) := 'N';
ie_etapa_espec_sol_w		varchar(2);
ie_perm_etapa_espec_w		varchar(1);
ie_etapa_especial_w		varchar(1);
ie_Calcula_Etapa_w		varchar(1);
cd_perfil_w			integer;
ie_Calcula_Vol_Veloc_w		varchar(10);
IE_CALCULA_TEMPO_SOL_W	varchar(10);
ie_categoria_w			varchar(1);
ie_fator_correcao_w		varchar(1);
ie_amostra_w			varchar(1);
VarIeValidadeJejum			varchar(1);
VarIeInicioValidadeJejum		varchar(1);
ie_Gera_Setor_PrescrProc_w		varchar(1);
QT_HEMOGLOBINA_W		varchar(255);
QT_HEMATOCRITO_W		varchar(255);
QT_TAP_W			varchar(255);
QT_TAP_INR_W			varchar(255);
QT_TTPA_W			varchar(255);
QT_TTPA_REL_W			varchar(255);
QT_HEMOGLOBINA_W2		varchar(255);
QT_HEMATOCRITO_W2		varchar(255);
QT_TAP_W2			varchar(255);
QT_TAP_INR_W2			varchar(255);
QT_TTPA_W2			varchar(255);
QT_TTPA_REL_W2		varchar(255);
ie_aberta_w			varchar(1);
ie_aberta_ww			varchar(1);
cd_setor_atend_w2			varchar(255);
cd_setor_col_w2			varchar(255);
cd_setor_entrega_w2		varchar(255);
qt_dia_entrega_w2			numeric(20);
ie_emite_mapa_w2 			varchar(255);
ds_hora_fixa_w2 			varchar(255);
ie_data_resultado_w2 		varchar(255);
qt_min_entrega_w2 		bigint;
ie_atualizar_recoleta_w2 		varchar(255);
ie_dia_semana_final_w2  		bigint;
ie_forma_atual_dt_result_w2		exame_lab_regra_setor.ie_atul_data_result%type;
qt_min_atraso_w2	    		bigint;
ie_atualizar_hor_sol_w		varchar(1) := 'S';
cd_funcao_origem_w		prescr_medica.cd_funcao_origem%type;
qt_hora_infusao_w			protocolo_medic_solucao.qt_hora_infusao%type;
qt_tempo_infusao_w		protocolo_medic_solucao.qt_tempo_infusao%type;
ie_sol_intermitente_w		prescr_solucao.ie_sol_intermitente%type := 'N';
ie_sol_intermitente_ww		prescr_solucao.ie_sol_intermitente%type;
qt_sodio_w					double precision;
qt_bicarbonato_w			double precision;

qt_zero_um_bic_w   			bigint;
qt_um_dois_bic_w   			bigint;
qt_dois_tres_bic_w 			bigint;
qt_tres_quatro_bic_w		bigint;
qt_quatro_cinco_bic_w		bigint;
qt_cinco_seis_bic_w			bigint;
nr_seq_perfil_bic_w			bigint;
qt_quatro_cinco_w      		bigint;
qt_cinco_seis_w         	bigint;
VarCheckInterSN_w			varchar(1);
ie_se_necessario_ww			varchar(1);
ie_reserva_w				prescr_solic_bco_sangue.ie_reserva%type;
nr_doc_convenio_w			varchar(20);
ie_guia_w					varchar(3);
ie_horario_solucao_w		varchar(1);
qt_tempo_aplicacao_ww		prescr_solucao.qt_tempo_aplicacao%type;
ds_erro_autorizacao_w		varchar(255);
ie_regra_w					smallint;
nr_seq_regra_w				bigint;
cd_pessoa_fisica_prescr_w	prescr_medica.cd_pessoa_fisica%type;
ie_glosa_w					varchar(3);
nr_seq_regra_ajuste_w		bigint;
ie_autorizacao_w			varchar(5) := 'L';

nr_seq_proc_hem_w			integer;
nr_seq_proc_interno_ww		protocolo_outras_solic_hm.nr_seq_proc_interno%type;
nr_seq_derivado_hem_w		protocolo_outras_solic_hm.nr_seq_derivado%type;
qt_procedimento_hem_w		protocolo_outras_solic_hm.qt_procedimento%type;
--qt_vol_hemocomp_w			protocolo_outras_solic_hm.qt_vol_hemocomp%type;
ie_suspenso_hem_w			protocolo_outras_solic_hm.ie_suspenso%type;
cd_intervalo_hem_w			protocolo_outras_solic_hm.cd_intervalo%type;
ds_horarios_hem_w			protocolo_outras_solic_hm.ds_horarios%type;
cd_setor_atendimento_hem_w	protocolo_outras_solic_hm.cd_setor_atendimento%type;
ds_observacao_hem_w			protocolo_outras_solic_hm.ds_observacao%type;
cd_procedimento_hem_w		protocolo_outras_solic_hm.cd_procedimento%type;
ie_origem_proced_hem_w		protocolo_outras_solic_hm.ie_origem_proced%type;
ie_tipo_proc_w				proc_interno.ie_tipo%type;
nr_seq_dialise_sol_w		prescr_solucao.nr_seq_dialise%type;

ie_log_dt_prev_execucao_w	varchar(1);
ds_log_dt_prev_execucao_w	varchar(4000);

/* Protocolo: Dietas */

C01 CURSOR FOR
	SELECT	nr_seq_dieta + nr_seq_dieta_w,
			nr_seq_dieta,
			cd_dieta,
			ie_destino_dieta,
			ie_refeicao,
			ds_observacao,
			cd_intervalo
	from	Protocolo_medic_dieta
	where	nr_sequencia = nr_sequencia_p
	and		cd_protocolo = cd_protocolo_p;

/* Protocolo: Solucoes */

C02 CURSOR FOR
	SELECT	nr_seq_solucao + nr_seq_solucao_w,
			nr_seq_solucao,
			coalesce(ie_tipo_dosagem,'gtm'),
			qt_dosagem,
			qt_solucao_total,
			qt_tempo_aplicacao,
			coalesce(qt_volume,0),
			ie_bomba_infusao,
			ie_esquema_alternado,
			ie_calc_aut,
			ie_acm,
			qt_hora_fase,
			coalesce(ds_solucao,DS_ROTINA),
			ie_pos_dialisador,
			coalesce(ie_hemodialise,'N'),
			nr_seq_protocolo,
			ie_tipo_solucao,
			qt_temp_solucao,
			ie_momento,
			ie_unid_vel_inf,
			ie_se_necessario,
			ie_solucao_pca,
			ie_tipo_analgesia,
			ie_pca_modo_prog,
			qt_dose_inicial_pca,
			qt_vol_infusao_pca,
			qt_bolus_pca,
			qt_intervalo_bloqueio,
			qt_limite_quatro_hora,
			qt_dose_ataque,
			ds_orientacao,
			ie_tipo_sol,
			qt_limite_uma_hora,
			ie_urgencia,
			hr_prim_horario,
			ie_um_dose_inicio_pca,
			ie_um_limite_pca,
			ie_um_limite_hora_pca,
			ie_um_fluxo_pca,
			ie_um_bolus_pca,
			ie_via_aplicacao,
			cd_intervalo,
			ie_sol_especial,
			nr_etapas,
			coalesce(ie_aberta,'N'),
			coalesce(qt_hora_infusao,0),
			coalesce(qt_tempo_infusao,0)
	from	Protocolo_medic_Solucao
	where	coalesce(ie_situacao,'A') = 'A'
	and		nr_sequencia	= nr_sequencia_p
	and		cd_protocolo	= cd_protocolo_p;

/* Protocolo: Proced/Exames */

C03 CURSOR FOR
	SELECT	a.nr_seq_proc + nr_seq_proc_w,
			a.nr_seq_proc,
			a.cd_procedimento,
			CASE WHEN coalesce(a.ie_multiplicar_quant,'N')='S' THEN (coalesce(qt_protocolo_p,1) * a.qt_procedimento)  ELSE a.qt_procedimento END ,
			a.ds_observacao,
			a.ie_origem_proced,
			coalesce(a.cd_intervalo,cd_intervalo_p),
			a.cd_setor_atendimento,
			a.cd_material_exame,
			a.nr_seq_exame,
			coalesce(a.ie_se_necessario,'N'),
			coalesce(a.ie_acm,'N'),
			coalesce(a.hr_prim_horario, hr_prim_horario_p),
			a.ds_material_especial,
			a.ie_urgencia,
			a.nr_seq_proc_interno,
			a.ie_lado,
			a.ie_respiracao,
			a.cd_mod_vent,
			a.ie_disp_resp_esp,
			a.qt_fluxo_oxigenio,
			coalesce(qt_min_intervalo,0),
			a.nr_seq_prot_glic,
			a.ds_dado_clinico,
			ie_objetivo_onco,
			coalesce(ie_executar_leito, 'N'),
			nr_seq_contraste,
			ds_exame_fis_achado_cirur,
			a.ds_resumo_clinico,
			a.cd_setor_entrega,
			a.cd_setor_coleta,
			SUBSTR(a.ds_prescricao,1,80),
			a.ie_horario,
			a.cd_medico_exec,
			substr(a.ds_diag_provavel_ap,1,255),
			substr(a.ds_exame_anterior_ap,1,255),
			substr(a.ds_localizacao_lesao,1,2000),
			substr(a.ds_tempo_doenca,1,255),
			substr(a.cd_cgc_laboratorio,1,14),
			a.qt_frasco_env,
			a.nr_seq_proc_int_cirur,
			a.qt_peca_ap,
			a.nr_seq_amostra_princ,
			a.ds_qualidade_peca_ap,
			a.ie_forma_exame,
			a.cd_pessoa_coleta,
			a.ds_justificativa,
			a.cd_kit_material,
			a.ie_amostra,
			a.nr_seq_topografia
	FROM protocolo_medic_proc a
LEFT OUTER JOIN exame_laboratorio b ON (a.nr_seq_exame = b.nr_seq_exame)
WHERE ((b.ie_solicitacao = 'S') or (coalesce(a.nr_seq_exame::text, '') = '')) and coalesce(a.nr_seq_solic_bs::text, '') = '' and a.nr_sequencia		= nr_sequencia_p and a.cd_protocolo	 	= cd_protocolo_p order by a.nr_seq_apres;

C04 CURSOR FOR
	SELECT	nr_sequencia
	from	prescr_material
	where	ie_agrupador = 1
	and		nr_prescricao = nr_prescricao_p;

C05 CURSOR FOR
	SELECT	nr_sequencia
	from	prescr_procedimento
	where	nr_prescricao = nr_prescricao_p;

C06 CURSOR FOR
	SELECT	nr_seq_solucao,
			nr_etapas,
			qt_tempo_aplicacao,
			qt_dosagem,
			ie_tipo_dosagem,
			ie_esquema_alternado,
			cd_intervalo,
			qt_hora_fase,
			ie_aberto,
			ie_sol_intermitente,
			ie_acm,
			ie_se_necessario
	from	prescr_solucao
	where	((ie_calc_aut	= 'S') or (VarParam805_w = 'S'))
	and		coalesce(ie_hemodialise,'N')	<> 'S'
	and		nr_prescricao	= nr_prescricao_p;

C07 CURSOR FOR
	SELECT	cd_material,
			qt_dose,
			cd_unidade_medida_dose,
			nr_sequencia,
			ds_dose_diferenciada
	from	prescr_material
	where	nr_sequencia_solucao	= nr_seq_solucao_w
	and		nr_prescricao 		= nr_prescricao_p;

C08 CURSOR FOR
	SELECT	nr_seq_solucao
	from	prescr_solucao
	where	nr_prescricao	= nr_prescricao_p;

/* Protocolo: NPT Adulta */

C09 CURSOR FOR
	SELECT	nr_seq_npt,
			nr_seq_fator_ativ,
			nr_seq_fator_stress,
			pr_proteina,
			pr_lipidio,
			pr_carboidrato,
			qt_kcal_prot,
			qt_kcal_lipidio,
			qt_kcal_carboidrato,
			qt_kcal_total,
			qt_kcal_kg,
			qt_grama_prot_kg_dia,
			ie_bomba_infusao,
			pr_npt,
			qt_fase_npt,
			qt_gotejamento_npt
	from	protocolo_medic_npt
	where	nr_sequencia	= nr_sequencia_p
	and		cd_protocolo	= cd_protocolo_p;

/* Protocolo: Dialise */

c10 CURSOR FOR
	SELECT	ie_tipo_hemodialise,
			qt_sessao_sem,
			qt_hora_sessao,
			qt_min_sessao,
			qt_fluxo_sangue,
			nr_seq_mod_dialisador,
			ie_ultrafiltracao,
			qt_ultrafiltracao,
			ie_tipo_peritoneal,
			dt_status,
			ie_status,
			ie_tipo_dialise,
			qt_volume_total,
			nr_seq_maq_cicladora,
			nr_seq_diametro_agulha,
			nr_seq_tipo_agulha,
			nr_seq_tipo_agulha_art,
			nr_seq_ultra,
			nr_seq_perfil_sodio,
			qt_zero_um,
			qt_um_dois,
			qt_dois_tres,
			qt_tres_quatro,
			ie_ligar_prime,
			qt_peso_seco,
			ds_observacao,
			ie_continuo,
			ie_categoria,
			qt_sodio,
			qt_bicarbonato,
			qt_zero_um_bic,
			qt_um_dois_bic,
			qt_dois_tres_bic,
			qt_tres_quatro_bic,
			qt_quatro_cinco_bic,
			qt_cinco_seis_bic,
			nr_seq_perfil_bic,
			qt_quatro_cinco,
			qt_cinco_seis
	from	protocolo_hd_prescricao
	where	nr_seq_protocolo	= nr_sequencia_p
	and		cd_protocolo		= cd_protocolo_p;

c11 CURSOR FOR
	SELECT	nr_sequencia,
			nr_seq_solucao
	from	protocolo_medic_solucao
	where	nr_sequencia	= nr_sequencia_p
	and		cd_protocolo	= cd_protocolo_p;

/* Protocolo: Elementos das solucoes de dialise */

c12 CURSOR FOR
	SELECT	nr_seq_elemento,
			cd_unidade_medida,
			qt_elemento
	from	prot_hd_prescr_sol_elem
	where	nr_seq_medic	= nr_seq_medic_w
	and		nr_seq_solucao	= nr_seq_solucao_w
	and		cd_protocolo	= cd_protocolo_p;

/* Protocolo: Banco de Sangue (Hemoterapia) */

C13 CURSOR FOR
	SELECT	nr_sequencia,
			ie_tipo_paciente,
			ie_porte_cirurgico,
			ie_tipo,
			ie_reserva
	from	prot_solic_bco_sangue
	where	nr_seq_protocolo	= nr_sequencia_p
	and		cd_protocolo		= cd_protocolo_p;

/* Protocolo: Hemocomponentes */

C14 CURSOR FOR
	SELECT	nr_seq_proc + nr_seq_proc_sangue_w,
			cd_procedimento,
			ie_origem_proced,
			nr_seq_proc_interno,
			qt_procedimento,
			nr_seq_derivado,
			qt_vol_hemocomp,
			dt_prev_execucao,
			cd_intervalo,
			qt_veloc_inf_hemo,
			cd_setor_atendimento,
			ie_util_hemocomponente,
			ds_observacao,
			coalesce(ie_se_necessario,'N'),
			coalesce(ie_acm,'N'),
			coalesce(ie_urgencia,'N')
	from	protocolo_medic_proc
	where	nr_seq_solic_bs	= nr_seq_bco_sangue_w;

/* Protocolo: Indicacoes clinicas */

c18 CURSOR FOR
	SELECT	ie_grupo_hemocom,
			nr_seq_indicacao,
			ds_indicacao_adic
	from	protocolo_solic_indicacao
	where	nr_seq_solic_bs	= nr_seq_bco_sangue_w;
	
/*  Outras solicitacoes */

c19 CURSOR FOR
	SELECT 	nr_seq_proc_interno,
	   		nr_seq_derivado,
	   		qt_procedimento,
	   		qt_vol_hemocomp,
	   		coalesce(ie_suspenso,'N'),
	   		cd_intervalo,
	   		ds_horarios,
	   		cd_setor_atendimento,
	   		ds_observacao,
			cd_procedimento,
			ie_origem_proced
	from   	protocolo_outras_solic_hm
	where  	nr_seq_solic_bs = nr_seq_bco_sangue_w;

/* Protocolo: Gasoterapia */

c15 CURSOR FOR
	SELECT	ie_respiracao,
			ie_disp_resp_esp,
			cd_modalidade_vent,
			nr_seq_gas,
			ie_modo_adm,
			ie_inicio,
			ie_unidade_medida,
			qt_gasoterapia,
			qt_freq_vent,
			ds_observacao,
			nr_sequencia,
			cd_intervalo
	from	protocolo_medic_gas
	where	nr_seq_protocolo	= nr_sequencia_p
	and		cd_protocolo		= cd_protocolo_p;

/* Protocolo: Jejum */

c16 CURSOR FOR
	SELECT	nr_seq_tipo,
			nr_seq_objetivo,
			ie_inicio,
			dt_inicio,
			dt_fim,
			dt_evento,
			qt_min_ant,
			qt_min_depois,
			qt_hora_ant,
			qt_hora_depois,
			ds_evento,
			ds_observacao,
			ie_repete_copia
	from	Protocolo_medic_jejum
	where	nr_sequencia		= nr_sequencia_p
	and		cd_protocolo	 	= cd_protocolo_p;

/* Protocolo: Recomendacoes */

c17 CURSOR FOR
	SELECT	nr_seq_rec,
			ds_recomendacao,
			qt_recomendacao,
			cd_recomendacao,
			nr_seq_classif,
			cd_intervalo,
			ds_horarios,
			nr_seq_apres,
			cd_kit,
			ie_acm,
			ie_se_necessario,
			ie_urgencia,
			nr_seq_topografia
	from	protocolo_medic_Rec
	where	nr_sequencia		= nr_sequencia_p
	and		cd_protocolo	 	= cd_protocolo_p
	order by coalesce(nr_seq_apres,999);
	
procedure add_log_dt_prev_execucao(nr_linha_p integer, nr_seq_proc_p prescr_procedimento.nr_sequencia%type, ds_log_p text) is
;
BEGIN
	if (ie_log_dt_prev_execucao_w = 'S') then
		ds_log_dt_prev_execucao_w := substr(ds_log_dt_prev_execucao_w||chr(10)||$$plsql_unit||':'||nr_linha_p||' NR_SEQ_PROCEDIMENTO('||nr_seq_proc_p||') '||ds_log_p, 1, 4000);
	end if;
end;

begin

cd_perfil_w	:= obter_perfil_ativo;

if (ie_urgencia_p = 'S') then
	ie_urgencia_w	:= 'S';
end if;

ie_log_dt_prev_execucao_w := obter_se_info_rastre_prescr('D', wheb_usuario_pck.get_nm_usuario, cd_perfil_w, wheb_usuario_pck.get_cd_estabelecimento);

select	dt_primeiro_horario,
		nr_atendimento,
		nr_horas_validade,
		dt_prescricao,
		cd_estabelecimento,
		cd_setor_atendimento,
		dt_inicio_prescr,
		dt_validade_prescr,
		coalesce(nr_seq_pend_pac_acao,0),
		coalesce(cd_funcao_origem,924),
		cd_pessoa_fisica
into STRICT	dt_primeiro_horario_w,
		nr_atendimento_w,
		nr_horas_validade_w,
		dt_prescricao_w,
		cd_estabelecimento_w,
		cd_setor_prescr_w,
		dt_inicio_prescr_w,
		dt_validade_prescr_w,
		nr_seq_pend_pac_acao_w,
		cd_funcao_origem_w,
		cd_pessoa_fisica_prescr_w
from	prescr_medica
where	nr_prescricao	= nr_prescricao_p;

if ((coalesce(nr_seq_pend_pac_acao_w, 0) = 0) and (coalesce(nr_seq_pend_pac_acao_p, 0) > 0) and (coalesce(nr_prescricao_p, 0) > 0)) then

   update 	prescr_medica
   set		nr_seq_pend_pac_acao = nr_seq_pend_pac_acao_p
   where 	nr_prescricao = nr_prescricao_p;

   if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end if;

ie_consiste_medic_w := Obter_Param_Usuario(924, 18, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_consiste_medic_w);
ie_medic_internado_w := Obter_Param_Usuario(924, 177, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_medic_internado_w);
varIe_Sol_prescr_w := Obter_Param_Usuario(924, 322, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, varIe_Sol_prescr_w);
VarRegraPrimHorarioSol_w := obter_param_usuario(924, 332, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, VarRegraPrimHorarioSol_w);
ie_gera_horarios_ACM_w := obter_param_usuario(924, 338, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gera_horarios_ACM_w);
ie_Calcula_Tempo_Sol_w := Obter_Param_Usuario(924, 394, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_Calcula_Tempo_Sol_w);
ie_dt_prescr_dt_exec_proc_w := Obter_Param_Usuario(924, 397, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_dt_prescr_dt_exec_proc_w);
ie_gera_horarios_SN_w := obter_param_usuario(924, 431, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_gera_horarios_SN_w);
ieEliminaHorVigencia_w := Obter_Param_Usuario(924, 443, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ieEliminaHorVigencia_w);
ie_Calcula_Etapa_w := Obter_Param_Usuario(924, 461, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_Calcula_Etapa_w);
VarIeValidadeJejum := Obter_Param_Usuario(924, 488, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, VarIeValidadeJejum);
ie_Gera_Setor_PrescrProc_w := Obter_Param_Usuario(924, 493, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_Gera_Setor_PrescrProc_w);
ie_prescr_proc_sem_lib_w := Obter_Param_Usuario(924, 530, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_prescr_proc_sem_lib_w);
ie_arredondar_w := obter_param_usuario(924, 560, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_arredondar_w);
ie_perm_etapa_espec_w := obter_param_usuario(924, 583, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_perm_etapa_espec_w);

ie_Calcula_Vol_Veloc_w := obter_param_usuario(924, 636, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_Calcula_Vol_Veloc_w);
ie_arredondar_etapas_w := obter_param_usuario(924, 742, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_arredondar_etapas_w);
ie_recalc_vel_inf_w := obter_param_usuario(924, 756, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_recalc_vel_inf_w);
ie_kit_automatico_w := Obter_Param_Usuario(924, 810, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_kit_automatico_w);
ie_check_tipo_interv_w := obter_param_usuario(924, 809, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_check_tipo_interv_w);
VarParam805_w := obter_param_usuario(924, 805, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, VarParam805_w);
ie_vel_etapa_w := Obter_Param_Usuario(924, 855, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_vel_etapa_w);
ie_medico_prescr_w := Obter_Param_Usuario(924, 998, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_medico_prescr_w);
VarIeInicioValidadeJejum := Obter_Param_Usuario(924, 1047, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, VarIeInicioValidadeJejum);
ie_fator_correcao_w := Obter_Param_Usuario(924, 1082, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_fator_correcao_w);
ie_etapa_espec_sol_w := Obter_Param_Usuario(924, 1138, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_etapa_espec_sol_w);
VarCheckInterSN_w := obter_param_usuario(924, 650, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, VarCheckInterSN_w);
ie_horario_solucao_w := obter_param_usuario(924, 284, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_horario_solucao_w);

if (cd_funcao_origem_w = 950) then
	ie_etapa_interv_w := obter_param_usuario(950, 42, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_etapa_interv_w);
else
	ie_etapa_interv_w := obter_param_usuario(924, 590, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_etapa_interv_w);
end if;	

select	max(coalesce(ie_tipo_atendimento,1))
into STRICT	ie_tipo_atendimento_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_w;

CALL Consiste_Protocolo_prescricao(cd_estabelecimento_w, cd_protocolo_p, nr_sequencia_p, ie_consiste_medic_w);

-- Obter_Convenio do Atendimento
if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
	begin
	select	cd_convenio
	into STRICT	cd_convenio_w
	from	atend_categoria_convenio
	where	nr_atendimento = nr_atendimento_w
	and	dt_inicio_vigencia =
		(SELECT	max(dt_inicio_vigencia)
		from	atend_categoria_convenio
		where	nr_atendimento = nr_atendimento_w);
	exception
		when others then
			cd_convenio_w := null;
	end;
end if;

-- Incluir as Dietas
select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_dieta_w
from	prescr_dieta
where	nr_prescricao = nr_prescricao_p;

open C01;
loop
	fetch C01 into
		nr_seq_dieta_novo_w,
		nr_seq_dieta_prot_w,
		cd_dieta_w,
		ie_destino_dieta_w,
		ie_refeicao_w,
		ds_observacao_dieta_w,
		cd_intervalo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	if (coalesce(ie_urgencia_p,'N')	= 'S') then
		
		select	max(cd_intervalo)
		into STRICT	cd_intervalo_w
		from	intervalo_prescricao
		where	ie_agora	= 'S'
		and	ie_situacao	= 'A'
		and	coalesce(ie_se_farmacia_amb,'N') = 'N'
		and	((coalesce(cd_estabelecimento::text, '') = '') or (cd_estabelecimento	= cd_estabelecimento_w))
		and	Obter_se_intervalo(cd_intervalo, 13)	= 'S'
		and	obter_se_exibe_intervalo(nr_prescricao_p,cd_intervalo, null)	= 'S'
		and	obter_prescr_dieta_interv(cd_intervalo,'O') = 'S';
		
	end if;
	
	ds_horario1_w  := null;
	ds_horarios2_w := null;
	nr_ocorrencia_w := null;
	
	if (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '') then
		if (obter_se_limpa_prim_hor(cd_intervalo_w,cd_setor_atendimento_w) = 'S') then
			ds_horarios2_w := null;
		else
			SELECT * FROM Calcular_Horario_Prescricao(nr_prescricao_p, cd_intervalo_w, dt_inicio_prescr_w, dt_inicio_prescr_w, nr_horas_validade_w, 0, 0, 0, nr_ocorrencia_w, ds_horario1_w, ds_horario2_w, 'N', null) INTO STRICT nr_ocorrencia_w, ds_horario1_w, ds_horario2_w;

			ds_horarios2_w	:= ds_horario1_w || ds_horario2_w;
		end if;
	end if;
	
	insert into Prescr_Dieta(
		nr_prescricao,
		nr_sequencia,
		cd_dieta,
		dt_atualizacao,
		nm_usuario,
		ie_destino_dieta,
		ie_refeicao,
		ie_suspenso,
		ds_horarios,
		ds_observacao,
		cd_intervalo,
		ie_urgencia,
		cd_protocolo,
		nr_seq_protocolo,
		nr_seq_item_prot)
	values (	nr_prescricao_p,
		nr_seq_dieta_novo_w,
		cd_dieta_w,
		clock_timestamp(),
		nm_usuario_p,
		ie_destino_dieta_w,
		ie_refeicao_w,
		'N',
		ds_horarios2_w,
		ds_observacao_dieta_w,
		cd_intervalo_w,
		ie_urgencia_p,
		cd_protocolo_p,
		nr_sequencia_p,
		nr_seq_dieta_prot_w);
		
	ds_erro_www := Consistir_prescr_dieta(nr_prescricao_p, nr_seq_dieta_novo_w, cd_estabelecimento_w, cd_perfil_w, nm_usuario_p, ds_erro_www); 	

	if (ie_prescr_proc_sem_lib_w = 'S') then
		CALL Gerar_prescr_dieta_hor_sem_lib(nr_prescricao_p,nr_seq_dieta_novo_w,cd_perfil_w,'N','','N',nm_usuario_p);
	end if;

	CALL Inserir_mat_prescr_prot(nr_prescricao_p, cd_protocolo_p, nr_sequencia_p,0,
				6, nr_seq_dieta_prot_w, 0, 0, nr_seq_dieta_novo_w,
				null, null, cd_intervalo_p, qt_protocolo_p, nm_usuario_p, coalesce(ie_urgencia_w,'N'),coalesce(qt_peso_p,0),hr_prim_horario_p,0,0, null,null,null, null,null,null, null,null,null,null,null,null,null,'S',null,null,null,null, null,null,null, null,null,null,null,null);
	end;
end loop;
close C01;

open c16;
loop
fetch c16 into
	nr_seq_tipo_w,
	nr_seq_objetivo_w,
	ie_inicio_w,
	dt_inicio_w,
	dt_fim_w,
	dt_evento_w,
	qt_min_ant_w,
	qt_min_depois_w,
	qt_hora_ant_w,
	qt_hora_depois_w,
	ds_evento_w,
	ds_observacao_w,
	ie_repete_copia_w;
EXIT WHEN NOT FOUND; /* apply on c16 */

	if ((VarIeValidadeJejum <> 'N' AND ie_inicio_w = 'F') or (ie_inicio_w = 'I')) and (coalesce(dt_inicio_w::text, '') = '') or (coalesce(dt_fim_w::text, '') = '') then

	    if ((VarIeInicioValidadeJejum = 'V') or (ie_inicio_w = 'I')) then
            dt_inicio_w  := dt_inicio_prescr_w;
        else
            dt_inicio_w  := PKG_DATE_UTILS.start_of(dt_inicio_prescr_w, 'dd', 0);
	    end if;
		
		if (ie_inicio_w = 'I') and
		   ((qt_min_depois_w IS NOT NULL AND qt_min_depois_w::text <> '') or (qt_hora_depois_w IS NOT NULL AND qt_hora_depois_w::text <> '')) then
			
			dt_fim_w := dt_inicio_w;
			
			if (qt_hora_depois_w IS NOT NULL AND qt_hora_depois_w::text <> '') then
				dt_fim_w := (dt_fim_w + (qt_hora_depois_w/24));
			end if;
			
			if (qt_min_depois_w IS NOT NULL AND qt_min_depois_w::text <> '') then
				dt_fim_w := (dt_fim_w + (qt_min_depois_w/1440));
			end if;
	
        elsif ((VarIeValidadeJejum = 'S') or (ie_inicio_w = 'I')) then
           dt_fim_w    := dt_validade_prescr_w;
	    end if;
	
	end if;

	select	nextval('rep_jejum_seq')
	into STRICT	nr_seq_jejum_w
	;
	
	select	coalesce(ie_data_final,'N')
	into STRICT	ie_data_objetivo_w
	from	rep_objetivo_jejum
	where	nr_sequencia = nr_seq_objetivo_w;
	
	if (ie_data_objetivo_w <> 'N') then
		dt_fim_w := dt_validade_prescr_w;
	end if;
	
	insert into rep_jejum(nr_sequencia,
		nr_prescricao,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_tipo,
		nr_seq_objetivo,
		ie_inicio,
		dt_inicio,
		dt_fim,
		dt_evento,
		qt_min_ant,
		qt_min_depois,
		qt_hora_ant,
		qt_hora_depois,
		ds_evento,
		ds_observacao,
		ie_repete_copia,
		ie_suspenso,
		cd_protocolo,
		nr_seq_protocolo)
	values (nr_seq_jejum_w,
		nr_prescricao_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_tipo_w,
		nr_seq_objetivo_w,
		ie_inicio_w,
		dt_inicio_w,
		dt_fim_w,
		dt_evento_w,
		qt_min_ant_w,
		qt_min_depois_w,
		qt_hora_ant_w,
		qt_hora_depois_w,
		ds_evento_w,
		ds_observacao_w,
		ie_repete_copia_w,
		'N',
		cd_protocolo_p,
		nr_sequencia_p);

end loop;
close c16;

-- Incluir as NPTs Adulta
if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
	begin

	select   obter_pessoa_atendimento(nr_atendimento_w,'C')
	into STRICT     cd_pessoa_fisica_w
	;

	begin
	select	coalesce(obter_idade(dt_nascimento, clock_timestamp(), 'A'),0)
	into STRICT	qt_idade_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_w;
	exception
		when others then
			qt_idade_w		:= 0;
		end;

	select	coalesce(obter_sinal_vital(nr_atendimento_w,'Peso'),0),
		coalesce(obter_sinal_vital(nr_atendimento_w,'Altura'),0),
		coalesce(Obter_Peso_pre_dialise(cd_pessoa_fisica_w),0),
		coalesce(Obter_Peso_pos_dialise(cd_pessoa_fisica_w),coalesce(qt_peso_p,0))
	into STRICT	qt_peso_w,
		qt_altura_w,
		qt_peso_pos_w,
		qt_peso_atual_w
	;

	
	if (qt_peso_atual_w = 0) then
		qt_peso_atual_w:= qt_peso_w;
	end if;
	
	select	max(qt_peso_ideal)
	into STRICT	qt_peso_ideal_w
	from	hd_pac_renal_cronico
	where	cd_pessoa_fisica = cd_pessoa_fisica_w;
	
	open C09;
	loop

	select	nextval('nut_paciente_seq')
	into STRICT	nr_seq_nut_w
	;

		fetch C09 into
			nr_seq_npt_w,
			nr_seq_fator_ativ_w,
			nr_seq_fator_stress_w,
			pr_proteina_w,
			pr_lipidio_w,
			pr_carboidrato_w,
			qt_kcal_prot_w,
			qt_kcal_lipidio_w,
			qt_kcal_carboidrato_w,
			qt_kcal_total_w,
			qt_kcal_kg_w,
			qt_grama_prot_kg_dia_w,
			ie_bomba_infusao_w,
			pr_npt_w,
			qt_fase_npt_w,
			qt_gotejamento_npt_w;
		EXIT WHEN NOT FOUND; /* apply on C09 */
		begin
		insert into nut_paciente(
			nr_prescricao,
			nr_atendimento,
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_fator_ativ,
			nr_seq_fator_stress,
			pr_proteina,
			pr_lipidio,
			pr_carboidrato,
			qt_kcal_prot,
			qt_kcal_lipidio,
			qt_kcal_carboidrato,
			qt_kcal_total,
			qt_kcal_kg,
			qt_grama_prot_kg_dia,
			ie_bomba_infusao,
			pr_npt,
			qt_fase_npt,
			qt_gotejamento_npt,
			qt_idade_ano,
			qt_altura_cm,
			qt_peso,
			ie_calc_automatico)
		values (	nr_prescricao_p,
			nr_atendimento_w,
			nr_seq_nut_w,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_fator_ativ_w,
			nr_seq_fator_stress_w,
			pr_proteina_w,
			pr_lipidio_w,
			pr_carboidrato_w,
			qt_kcal_prot_w,
			qt_kcal_lipidio_w,
			qt_kcal_carboidrato_w,
			qt_kcal_total_w,
			qt_kcal_kg_w,
			qt_grama_prot_kg_dia_w,
			ie_bomba_infusao_w,
			pr_npt_w,
			qt_fase_npt_w,
			qt_gotejamento_npt_w,
			qt_idade_w,
			qt_altura_w,
			qt_peso_w,
			'N');

			CALL gerar_elementos_nut_prot(cd_protocolo_p, nr_sequencia_p, nr_seq_npt_w, nr_prescricao_p, nr_seq_nut_w, nm_usuario_p);
		end;
	end loop;
	close C09;

	end;
end if;

-- Incluir Recomendacoes
select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_rec_w
from	prescr_recomendacao
where	nr_prescricao = nr_prescricao_p;

select	max(dt_inicio_prescr),
		max(nr_horas_validade),
		max(cd_estabelecimento),
		max(cd_setor_atendimento)
into STRICT	dt_incio_prescr_w,
		nr_horas_validade_w,
		cd_estabelecimento_w,
		cd_setor_atendimento_w
from	prescr_medica
where	nr_prescricao	= nr_prescricao_p;

ie_urgencia_w := null;
open C17;
loop
fetch C17 into
	nr_seq_rec2_w,
	ds_recomendacao_w,
	qt_recomendacao_w,
	cd_recomendacao_w,
	nr_seq_classif_w,
	cd_intervalo_w,
	ds_horarios_w,
	nr_seq_apres_w,
	cd_kit_w,
	ie_acm_w,
	ie_se_necessario_w,
	ie_urgencia_w,
	nr_seq_topografia_w;
EXIT WHEN NOT FOUND; /* apply on C17 */

	if (coalesce(cd_intervalo_w::text, '') = '') then
		select	max(cd_intervalo)
		into STRICT	cd_intervalo_w
		from	tipo_recomendacao
		where	cd_tipo_recomendacao = cd_recomendacao_w;
	end if;
	
	select	Obter_se_setor_intervalo(cd_intervalo_w,cd_setor_atendimento_w,cd_estabelecimento_w,null,null,obter_unid_atend_setor_atual(nr_atendimento_w,cd_setor_atendimento_w,'UB'))
	into STRICT		ie_interv_setor_w
	;

	if (ie_interv_setor_w = 'S') then
		hr_prim_horario_rec_w	:= obter_primeiro_horario(cd_intervalo_w,nr_prescricao_p,null,null);
		dt_inicio_interv_w	:= PKG_DATE_UTILS.get_Time(dt_incio_prescr_w, hr_prim_horario_rec_w);
	else
		if (hr_prim_horario_p IS NOT NULL AND hr_prim_horario_p::text <> '') then
			hr_prim_horario_rec_w	:= hr_prim_horario_p;
		else
			hr_prim_horario_rec_w	:= to_char(dt_incio_prescr_w,'hh24:mi');
		end if;
		dt_inicio_interv_w	:= dt_incio_prescr_w;
	end if;

	ds_horarios2_w	:= '';
	nr_ocorrencia_w	:= 0;
	
	ie_se_necessario_ww := ie_se_necessario_w;
	if (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '') then
		if (ie_check_tipo_interv_w = 'S') then
			select	coalesce(max(ie_se_necessario),ie_se_necessario_w),
					coalesce(max(ie_agora),ie_urgencia_w),
					coalesce(max(ie_acm),ie_acm_w)
			into STRICT	ie_se_necessario_w,
					ie_urgencia_w,
					ie_acm_w
			from	intervalo_prescricao
			where	cd_intervalo = cd_intervalo_w;
			
			if (coalesce(VarCheckInterSN_w, 'N') = 'N') and (coalesce(ie_se_necessario_w, 'N') = 'S') and (coalesce(ie_se_necessario_ww, 'N') = 'N') then
				ie_se_necessario_w := 'N';
			end if;
		end if;
		
		select 	coalesce(max(ie_limpa_prim_hor),'N'),
				coalesce(max(qt_min_intervalo),0)
		into STRICT	ie_limpa_prim_hor_w,
				qt_min_intervalo_w
		from	intervalo_prescricao
		where	cd_intervalo = cd_intervalo_w;
			
		SELECT * FROM Calcular_Horario_Prescricao(nr_prescricao_p, cd_intervalo_w, dt_incio_prescr_w, dt_inicio_interv_w, nr_horas_validade_w, 0, 0, qt_min_intervalo_w, nr_ocorrencia_w, ds_horario1_w, ds_horario2_w, 'N', null) INTO STRICT nr_ocorrencia_w, ds_horario1_w, ds_horario2_w;

		ds_horarios2_w	:= ds_horario1_w || ds_horario2_w;
	end if;
	
	--if	(ds_recomendacao_w is null) then
	select	max(ds_complemento)
	into STRICT	ds_rec_w
	from	tipo_recomendacao
	where	cd_tipo_recomendacao = cd_recomendacao_w;
	
	if (ds_rec_w IS NOT NULL AND ds_rec_w::text <> '') then
		ds_recomendacao_w	:= substr(ds_recomendacao_w || ' - ' || ds_rec_w,1,4000);
	end if;
	--end if;
	
	if (coalesce(ie_urgencia_w,'N') = 'S') then
		ds_horarios_w	:= to_char(clock_timestamp(),'hh24:mi');
	elsif (coalesce(ie_acm_w,'N') = 'S') then
		ds_horarios_w	:= 'ACM';
	elsif (coalesce(ie_se_necessario_w,'N') = 'S') then
		ds_horarios_w	:= 'SN';
	end if;
	--decode(,'S',,decode(,'ACM',decode(,'S','SN',nvl(ds_horarios_w, ds_horarios2_w)),nvl(ds_horarios_w, ds_horarios2_w)), nvl(ds_horarios_w, ds_horarios2_w))
	begin
	insert into Prescr_recomendacao(
		nr_prescricao,
		nr_sequencia,
		ie_destino_rec,
		dt_atualizacao,
		nm_usuario,
		ds_recomendacao,
		qt_recomendacao,
		ie_suspenso,
		cd_recomendacao,
		nr_seq_classif,
		cd_intervalo,
		ds_horarios,
		nr_seq_apres,
		hr_prim_horario,
		cd_kit,
		ie_acm,
		ie_se_necessario,
		ie_urgencia,
		nr_seq_topografia,
		cd_protocolo,
		nr_seq_protocolo,
		nr_seq_item_prot)
	values (nr_prescricao_p,
		nr_seq_rec2_w + nr_seq_rec_w,
		'E',
		clock_timestamp(),
		nm_usuario_p,
		ds_recomendacao_w,
		qt_recomendacao_w,
		'N',
		cd_recomendacao_w,
		nr_seq_classif_w,
		cd_intervalo_w,
		CASE WHEN ie_limpa_prim_hor_w='N' THEN coalesce(ds_horarios_w, ds_horarios2_w)  ELSE null END ,
		nr_seq_apres_w,
		CASE WHEN ie_limpa_prim_hor_w='N' THEN hr_prim_horario_rec_w  ELSE null END ,
		cd_kit_w,
		ie_acm_w,
		ie_se_necessario_w,
		ie_urgencia_w,
		nr_seq_topografia_w,
		cd_protocolo_p,
		nr_sequencia_p,
		nr_seq_rec2_w);

	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

	
	if (cd_kit_w IS NOT NULL AND cd_kit_w::text <> '') then
		CALL Inserir_kit_recomendacao(nm_usuario_p,nr_prescricao_p,nr_seq_rec2_w + nr_seq_rec_w,cd_recomendacao_w,cd_kit_w);
		CALL Gerar_Kit_rec_Prescricao(cd_estabelecimento_w,nr_Prescricao_p,nr_seq_rec2_w + nr_seq_rec_w,nm_usuario_p,'N','N');
	end if;
	
	if (ie_prescr_proc_sem_lib_w = 'S') then
		CALL Gerar_prescr_hor_sem_lib(nr_prescricao_p,nr_seq_rec2_w + nr_seq_rec_w,cd_perfil_w,'N',nm_usuario_p);
	end if;
	exception
		when others then
			ds_erro_w	:= substr(sqlerrm(SQLSTATE),1,255);
			--Erro na Inclusao das Recomendacoes da Prescricao Medica

			--#@DS_ERRO#@
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(176620,'DS_ERRO='||ds_erro_w);
	end;

end loop;
close C17;

-- Incluir HD Prescricao
open c10;
loop

	fetch c10 into	ie_tipo_hemodialise_w,
			qt_sessao_sem_w,
			qt_hora_sessao_w,
			qt_min_sessao_w,
			qt_fluxo_sangue_w,
			nr_seq_mod_dialisador_w,
			ie_ultrafiltracao_w,
			qt_ultrafiltracao_w,
			ie_tipo_peritoneal_w,
			dt_status_w,
			ie_status_w,
			ie_tipo_dialise_w,
			qt_volume_total_w,
			nr_seq_maq_cicladora_w,
			nr_seq_diametro_agulha_w,
			nr_seq_tipo_agulha_w,
			nr_seq_tipo_agulha_art_w,
			nr_seq_ultra_w,
			nr_seq_perfil_sodio_w,
			qt_zero_um_w,
			qt_um_dois_w,
			qt_dois_tres_w,
			qt_tres_quatro_w,
			ie_ligar_prime_w,
			qt_peso_seco_w,
			ds_observacao_w,
			ie_continuo_w,
			ie_categoria_w,
			qt_sodio_w,
			qt_bicarbonato_w,
			qt_zero_um_bic_w,   	
			qt_um_dois_bic_w,   	
			qt_dois_tres_bic_w, 	
			qt_tres_quatro_bic_w,
			qt_quatro_cinco_bic_w,
			qt_cinco_seis_bic_w,	
			nr_seq_perfil_bic_w,	
			qt_quatro_cinco_w,
			qt_cinco_seis_w;
		EXIT WHEN NOT FOUND; /* apply on c10 */

	/* obter sequencia protocolo HD prescricao */

	select	nextval('hd_prescricao_seq')
	into STRICT	nr_seq_hd_prescr_w
	;

	insert into hd_prescricao(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_prescricao,
		qt_fluxo_sangue,
		qt_sessao_sem,
		qt_hora_sessao,
		qt_min_sessao,
		nr_seq_mod_dialisador,
		ie_ultrafiltracao,
		qt_ultrafiltracao,
		ie_tipo_hemodialise,
		ie_tipo_dialise,
		ie_tipo_peritoneal,
		nr_seq_maq_cicladora,
		qt_volume_total,
		dt_status,
		ie_status,
		nr_seq_diametro_agulha,
		nr_seq_tipo_agulha,
		nr_seq_tipo_agulha_art,
		nr_seq_ultra,
		nr_seq_perfil_sodio,
		qt_zero_um,
		qt_um_dois,
		qt_dois_tres,
		qt_tres_quatro,
		ie_ligar_prime,
		qt_peso_seco,
		ds_observacao,
		ie_continuo,
		ie_categoria,
		qt_peso_pos,
		qt_peso_atual,
		qt_peso_ideal,
		qt_sodio,
		qt_bicarbonato,
		qt_zero_um_bic,
		qt_um_dois_bic,
		qt_dois_tres_bic,
		qt_tres_quatro_bic,
		qt_quatro_cinco_bic,
		qt_cinco_seis_bic,
		nr_seq_perfil_bic,
		qt_seto_oito,
		qt_cinco_seis,
		cd_protocolo,
		nr_seq_protocolo)
	values (
		nr_seq_hd_prescr_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_prescricao_p,
		qt_fluxo_sangue_w,
		qt_sessao_sem_w,
		qt_hora_sessao_w,
		qt_min_sessao_w,
		nr_seq_mod_dialisador_w,
		ie_ultrafiltracao_w,
		qt_ultrafiltracao_w,
		ie_tipo_hemodialise_w,
		ie_tipo_dialise_w,
		ie_tipo_peritoneal_w,
		nr_seq_maq_cicladora_w,
		qt_volume_total_w,
		dt_status_w,
		ie_status_w,
		nr_seq_diametro_agulha_w,
		nr_seq_tipo_agulha_w,
		nr_seq_tipo_agulha_art_w,
		nr_seq_ultra_w,
		nr_seq_perfil_sodio_w,
		qt_zero_um_w,
		qt_um_dois_w,
		qt_dois_tres_w,
		qt_tres_quatro_w,
		ie_ligar_prime_w,
		qt_peso_seco_w,
		ds_observacao_w,
		ie_continuo_w,
		ie_categoria_w,
		qt_peso_pos_w,
		qt_peso_atual_w,
		qt_peso_ideal_w,
		qt_sodio_w,
		qt_bicarbonato_w,
		qt_zero_um_bic_w,
		qt_um_dois_bic_w,
		qt_dois_tres_bic_w,
		qt_tres_quatro_bic_w,
		qt_quatro_cinco_bic_w,
		qt_cinco_seis_bic_w,
		nr_seq_perfil_bic_w,
		qt_quatro_cinco_w,
		qt_cinco_seis_w,
		cd_protocolo_p,
		nr_sequencia_p);

end loop;
close c10;

/* Inserir Medicamentos/Anticoagulacao do HD */

CALL Inserir_mat_prescr_prot(nr_prescricao_p, cd_protocolo_p, nr_sequencia_p,0,
	14, 0, 0, 0, null, null, null, cd_intervalo_p, qt_protocolo_p, nm_usuario_p, coalesce(ie_urgencia_p,'N'),coalesce(qt_peso_p,0),hr_prim_horario_p,0,0, null,null,null, null,null,null, null,null,null,null,null,null,null,'S',null,null,null,null, null,null,null, null,null,null,null,null);

-- Inserir Solucoes
select	coalesce(max(nr_seq_solucao),0),
		coalesce(max(nr_agrupamento),0)
into STRICT	nr_seq_solucao_w,
		nr_agrupamento_sol_w
from	prescr_solucao
where	nr_prescricao = nr_prescricao_p;

if (ie_urgencia_p = 'S') then
	ie_urgencia_w	:= 'S';
else
	ie_urgencia_w := null;
end if;

open C02;
loop
fetch C02 into
	nr_seq_solucao_novo_w,
	nr_seq_solucao_prot_w,
	ie_tipo_dosagem_w,
	qt_dosagem_w,
	qt_solucao_total_w,
	qt_tempo_aplicacao_w,
	qt_volume_w,
	ie_bomba_infusao_w,
	ie_esquema_alternado_w,
	ie_calc_aut_w,
	ie_acm_sol_w,
	qt_hora_fase_ww,
	ds_solucao_w,
	ie_pos_dialisador_w,
	ie_hemodialise_w,
	nr_seq_protocolo_w,
	ie_tipo_solucao_w,
	qt_temp_solucao_w,
	ie_momento_w,
	ie_unid_vel_inf_w,
	ie_se_necessario_Sol_w,
	ie_solucao_pca_w,
	ie_tipo_analgesia_w,
	ie_pca_modo_prog_w,
	qt_dose_inicial_pca_w,
	qt_vol_infusao_pca_w,
	qt_bolus_pca_w,
	qt_intervalo_bloqueio_w,
	qt_limite_quatro_hora_w,
	qt_dose_ataque_w,
	ds_orientacao_w,
	ie_tipo_sol_w,
	qt_limite_uma_hora_w,
	ie_urgencia_Prot_W,
	hr_prim_hor_sol_w,
	ie_um_dose_inicio_pca_w,
	ie_um_limite_pca_w,
	ie_um_limite_hora_pca_w,
	ie_um_fluxo_pca_w,
	ie_um_bolus_pca_w,
	ie_via_aplicacao_w,
	cd_intervalo_ww,
	ie_solucao_especial_w,
	nr_etapas_prot_w,
	ie_aberta_w,
	qt_hora_infusao_w,
	qt_tempo_infusao_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	--begin
	dt_primeiro_horario_w	:= to_date('30/12/1899 ' || to_char(dt_inicio_prescr_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
	
	if	((varIe_Sol_prescr_w = 'S') or
	     ((varIe_Sol_prescr_w = 'C') and (coalesce(qt_tempo_aplicacao_w::text, '') = ''))) then
		qt_tempo_aplicacao_w	:= nr_horas_validade_w;
	end if;	
	
	if (ie_etapa_interv_w = 'S') then
		
		select	obter_se_intervalo_continuo(cd_intervalo_ww)
		into STRICT		ie_continuo_w
		;
		
		if (ie_continuo_w = 'S') then
			qt_volume_sol_w := qt_volume_w;
		else
			qt_volume_sol_w := qt_solucao_total_w;
		end if;
		
		SELECT * FROM Calcular_etapas_interv_solucao(cd_intervalo_ww, qt_tempo_aplicacao_w, ie_arredondar_etapas_w, qt_hora_fase_w, nr_etapas_w, qt_volume_sol_w, qt_dosagem_w) INTO STRICT qt_hora_fase_w, nr_etapas_w;
	else
		nr_etapas_w := nr_etapas_prot_w;
		qt_hora_fase_w := qt_hora_fase_ww;
	end if;

	if (ie_tipo_sol_w = 1) and
		((coalesce(qt_hora_infusao_w,0) > 0) or (coalesce(qt_tempo_infusao_w,0) > 0)) then
		 ie_sol_intermitente_w := 'S';
		 if (coalesce(qt_tempo_infusao_w,0) > 0) then
			qt_hora_fase_w	:= coalesce(qt_hora_infusao_w,0) + coalesce(qt_tempo_infusao_w,0) / 60;
		 else	
			qt_hora_fase_w  := coalesce(qt_hora_infusao_w,0);
	     end if;	
	end if;
	
	if (coalesce(hr_prim_hor_sol_w::text, '') = '') or (hr_prim_hor_sol_w <> '  :  ') then
		if (VarRegraPrimHorarioSol_w = 'P') then
			hr_prim_hor_sol_w   := to_char(dt_inicio_prescr_w,'hh24:mi');
		elsif (VarRegraPrimHorarioSol_w = 'R') then
			select	Obter_prim_horario_solucao(to_char(dt_inicio_prescr_w,'dd/mm/yyyy hh24:mi:ss'))
			into STRICT	hr_prim_hor_sol_w
			;			
		elsif	((VarRegraPrimHorarioSol_w	= 'I') or (VarRegraPrimHorarioSol_w	= 'T')) and (cd_intervalo_ww IS NOT NULL AND cd_intervalo_ww::text <> '') then
			select	obter_primeiro_horario(cd_intervalo_ww,nr_prescricao_p,null,null)
			into STRICT	hr_prim_hor_sol_w
			;			
		end if;		
	end if;	
	
	Select	Obter_prim_horario_Sol_regra(nr_etapas_w, dt_prescricao_w, hr_prim_hor_sol_w)
	into STRICT	hr_prim_hor_sol_w 
	;
	
	if (cd_intervalo_ww IS NOT NULL AND cd_intervalo_ww::text <> '') and (ie_check_tipo_interv_w = 'S') then
		select	coalesce(coalesce(max(ie_se_necessario),ie_se_necessario_sol_w),'N'),
				coalesce(coalesce(max(ie_agora),ie_urgencia_w),'N'),
				coalesce(coalesce(max(ie_acm),ie_acm_sol_w),'N')
		into STRICT	ie_se_necessario_sol_w,
				ie_urgencia_w,
				ie_acm_sol_w
		from	intervalo_prescricao
		where	cd_intervalo = cd_intervalo_ww;
	end if;

	if (ie_urgencia_w = 'S') or (ie_urgencia_Prot_W = 'S') then
		hr_prim_hor_sol_w	:= to_char(clock_timestamp(),'hh24:mi');
	end if;

	if	((varIe_Sol_prescr_w = 'S') or
	     ((varIe_Sol_prescr_w = 'C') and (coalesce(qt_tempo_aplicacao_w::text, '') = ''))) then
		qt_tempo_aplicacao_w	:= nr_horas_validade_w;
	end if;

	if (coalesce(qt_hora_fase_w::text, '') = '') and (coalesce(nr_etapas_w,0) 		> 0) and
		((coalesce(nr_etapas_prot_w,0) 	> 0) or (coalesce(ie_acm_sol_w,'N')		<> 'S') or (coalesce(qt_tempo_aplicacao_w,0)	> 0) or (coalesce(nr_etapas_w,0)		> 1)) then
		if (coalesce(qt_tempo_aplicacao_w,0) = 0) then
			qt_tempo_aplicacao_w := 24;
		end if;
		qt_hora_fase_w	:= dividir(qt_tempo_aplicacao_w, nr_etapas_w);
	elsif (coalesce(qt_hora_fase_w::text, '') = '') and (coalesce(qt_tempo_aplicacao_w::text, '') = '') and (coalesce(nr_etapas_prot_w::text, '') = '') and (coalesce(nr_etapas_w,0) 		= 1) and (coalesce(ie_acm_sol_w,'N')		= 'S') then
		nr_etapas_w	:= null;
	end if;	
	
	nr_agrupamento_sol_w	:= nr_agrupamento_sol_w + 1;

	dt_primeiro_horario_w	:= to_date('30/12/1899 ' || to_char(dt_primeiro_horario_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
	
	if (ie_perm_etapa_espec_w	= 'S') and (ie_etapa_espec_sol_w	= 'S') and (coalesce(ie_acm_sol_w,'N')	<> 'S') and (coalesce(ie_se_necessario_Sol_w,'N') <> 'S') and (coalesce(ie_urgencia_w,'N')	<> 'S') and (coalesce(ie_esquema_alternado_w,'N') <> 'S') and (nr_horas_validade_w	> 24) and (nr_horas_validade_w	> coalesce(qt_tempo_aplicacao_w,0)) and (coalesce(ie_tipo_sol_w,0)	<> 2) then
		ie_etapa_especial_w	:= 'S';
		hr_prim_hor_sol_w	:= to_char(clock_timestamp(),'hh24:mi');
		nr_etapas_2w		:= nr_etapas_w +1;
	elsif (ie_perm_etapa_espec_w	= 'S') and (ie_etapa_espec_sol_w	= 'SA') and (coalesce(ie_acm_sol_w,'N')	<> 'S') and (coalesce(ie_se_necessario_Sol_w,'N') <> 'S') and (coalesce(ie_urgencia_w,'N')	<> 'S') and (coalesce(ie_esquema_alternado_w,'N') <> 'S') and (nr_horas_validade_w	> 24) and (nr_horas_validade_w	> coalesce(qt_tempo_aplicacao_w,0)) and (coalesce(qt_tempo_aplicacao_w,0) >= 24) and (coalesce(ie_tipo_sol_w,0)	<> 2) then
		ie_etapa_especial_w	:= 'S';
		hr_prim_hor_sol_w	:= to_char(clock_timestamp(),'hh24:mi');
		nr_etapas_2w		:= nr_etapas_w +1;
	else
		ie_etapa_especial_w	:= 'N';
		nr_etapas_2w		:= nr_etapas_w;
	end if;	
	
	if (ie_calc_aut_w = 'S') or (VarParam805_w = 'S') then
		
		qt_tempo_aplicacao_ww := null;
		
		if (cd_intervalo_ww IS NOT NULL AND cd_intervalo_ww::text <> '') and (coalesce(qt_hora_fase_w,0) > 0) and (coalesce(nr_etapas_w,0) > 0) and (coalesce(ie_etapa_interv_w,'N') = 'S') and (coalesce(ie_arredondar_etapas_w,'N') = 'S') and (coalesce(ie_horario_solucao_w,'N') = 'N') then
			
			qt_tempo_aplicacao_ww := qt_hora_fase_w * nr_etapas_w;
		end if;
		
		SELECT * FROM Calcula_Horarios_Etapas(PKG_DATE_UTILS.get_Time(dt_primeiro_horario_w, hr_prim_hor_sol_w), coalesce(nr_etapas_2w,0), coalesce(qt_hora_fase_w,0), nm_usuario_p, 'N', coalesce(qt_tempo_aplicacao_ww,qt_tempo_aplicacao_w), ds_horarios_sol_w, ds_horarios_sol_2w, ie_etapa_especial_w, 'N') INTO STRICT ds_horarios_sol_w, ds_horarios_sol_2w;
	end if;	
	
	dt_primeiro_horario_sol_w	:= dt_primeiro_horario_w;
	
	if (ie_gera_horarios_ACM_w = 'N')	and (ie_acm_sol_w	= 'S') then
		hr_prim_hor_sol_w	:= null;
		ds_horarios_sol_w	:= null;
	end if;
	
	if (ie_gera_horarios_SN_w = 'N')	and (ie_se_necessario_Sol_w	= 'S') then
		hr_prim_hor_sol_w	:= null;
		ds_horarios_sol_w	:= null;
	end if;
	
	if (ie_hemodialise_w in ('S', 'P')) then
		nr_seq_dialise_sol_w := nr_seq_hd_prescr_w;
	else
		nr_seq_dialise_sol_w := null;
	end if;	

	insert into Prescr_Solucao(
		nr_prescricao,
		nr_seq_solucao,
		ie_via_aplicacao,
		dt_atualizacao,
		nm_usuario,
		cd_unidade_medida,
		ie_tipo_dosagem,
		qt_dosagem,
		qt_solucao_total,
		qt_tempo_aplicacao,
		ds_solucao,
		qt_volume,
		nr_etapas,
		ie_bomba_infusao,
		ie_suspenso,
		nr_agrupamento,
		ie_esquema_alternado,
		ie_calc_aut,
		ie_acm,
		qt_hora_fase,
		ds_horarios,
		hr_prim_horario,
		ie_urgencia,
		ie_solucao_especial,
		ie_pos_dialisador,
		ie_hemodialise,
		nr_seq_dialise,
		nr_seq_protocolo,
		ie_tipo_solucao,
		qt_temp_solucao,
		ie_momento,
		ie_unid_vel_inf,
		ie_se_necessario,
		ie_solucao_pca,
		ie_tipo_analgesia,
		ie_pca_modo_prog,
		qt_dose_inicial_pca,
		qt_vol_infusao_pca,
		qt_bolus_pca,
		qt_intervalo_bloqueio,
		qt_limite_quatro_hora,
		qt_dose_ataque,
		ds_orientacao,
		ie_tipo_sol,
		qt_limite_uma_hora,
		IE_UM_LIMITE_HorA_PCA,
		ie_um_dose_inicio_pca,
		ie_um_limite_pca,
		ie_um_fluxo_pca,
		ie_um_bolus_pca,
		cd_intervalo,
		ie_etapa_especial,
		cd_protocolo,
		ie_fator_correcao,
		ie_aberto,
		ie_sol_intermitente,
		qt_hora_infusao,
		qt_tempo_infusao)
	values (
		nr_prescricao_p,
		nr_seq_solucao_novo_w,
		coalesce(ie_via_aplicacao_w, upper(obter_via_usuario('IV'))),
		clock_timestamp(),
		nm_usuario_p,
		obter_unid_med_usua('ml'),
		ie_tipo_dosagem_w,
		qt_dosagem_w,
		qt_solucao_total_w,
		qt_tempo_aplicacao_w,
		ds_solucao_w,
		qt_volume_w,
		nr_etapas_w,
		ie_bomba_infusao_w,
		'N',
		nr_agrupamento_sol_w,
		ie_esquema_alternado_w,
		ie_calc_aut_w,
		coalesce(ie_acm_sol_w, 'N'),
		qt_hora_fase_w,
		ds_horarios_sol_w,
		CASE WHEN ie_acm_sol_w='S' THEN ''  ELSE hr_prim_hor_sol_w END ,
		coalesce(CASE WHEN ie_urgencia_w='S' THEN  ie_urgencia_w  ELSE coalesce(ie_urgencia_Prot_W,'N') END ,'N'),
		coalesce(ie_solucao_especial_w,'N'),
		ie_pos_dialisador_w,
		ie_hemodialise_w,
		nr_seq_dialise_sol_w,
		nr_seq_protocolo_w,
		ie_tipo_solucao_w,
		qt_temp_solucao_w,
		ie_momento_w,
		ie_unid_vel_inf_w,
		coalesce(ie_se_necessario_Sol_w, 'N'),
		ie_solucao_pca_w,
		ie_tipo_analgesia_w,
		ie_pca_modo_prog_w,
		qt_dose_inicial_pca_w,
		qt_vol_infusao_pca_w,
		qt_bolus_pca_w,
		qt_intervalo_bloqueio_w,
		qt_limite_quatro_hora_w,
		qt_dose_ataque_w,
		substr(ds_orientacao_w,1,2000),
		ie_tipo_sol_w,
		qt_limite_uma_hora_w,
		coalesce(ie_um_limite_hora_pca_w, obter_unid_med_usua('ml')),
		ie_um_dose_inicio_pca_w,
		ie_um_limite_pca_w,
		ie_um_fluxo_pca_w,
		ie_um_bolus_pca_w,
		cd_intervalo_ww,
		ie_etapa_especial_w,
		cd_protocolo_p,
		ie_fator_correcao_w,
		ie_aberta_w,
		coalesce(ie_sol_intermitente_w,'N'),
		CASE WHEN coalesce(ie_sol_intermitente_w,'N')='S' THEN  coalesce(qt_hora_infusao_w,0)  ELSE null END ,
		CASE WHEN coalesce(ie_sol_intermitente_w,'N')='S' THEN  coalesce(qt_tempo_infusao_w,0)  ELSE null END );

	if (ie_hemodialise_w in ('N','O')) then

		CALL Inserir_mat_prescr_prot(nr_prescricao_p, cd_protocolo_p, nr_sequencia_p,0,
					4, 0, 0, nr_seq_solucao_prot_w, null,
					null, nr_seq_solucao_novo_w, cd_intervalo_p, qt_protocolo_p, nm_usuario_p, coalesce(ie_urgencia_w,'N'),coalesce(qt_peso_p,0),hr_prim_horario_p,0,0, null,null,null, null,null,null, null,null,null,null,null,null,null,'S',null,null,null,null, null,null,null, null,null,null,null,null);

		if (ie_calc_aut_w = 'S') then
			CALL Calcular_Etapas_Esquema(nr_prescricao_p,nr_seq_solucao_novo_w);
		end if;
	else
		CALL Inserir_mat_prescr_prot(nr_prescricao_p, cd_protocolo_p, nr_sequencia_p,0,
					13, 0, 0, nr_seq_solucao_prot_w, null,
					null, nr_seq_solucao_novo_w, cd_intervalo_p, qt_protocolo_p, nm_usuario_p, coalesce(ie_urgencia_w,'N'),coalesce(qt_peso_p,0),hr_prim_horario_p,0,0, null,null,null, null,null,null, null,null,null,null,null,null,null,'S',null,null,null,null, null,null,null, null,null,null,null,null);

	end if;
	
	if (nr_seq_hd_prescr_w IS NOT NULL AND nr_seq_hd_prescr_w::text <> '') and (nr_seq_solucao_novo_w IS NOT NULL AND nr_seq_solucao_novo_w::text <> '') and (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') and (coalesce(ie_hemodialise_w,'N') = 'S') and	
	   ((coalesce(qt_solucao_total_w::text, '') = '') or (qt_solucao_total_w = 0)) then
		CALL calc_etapa_sol_dialise(nr_prescricao_p, nr_seq_hd_prescr_w, nr_seq_solucao_novo_w,nm_usuario_p);		
		CALL calc_vol_total_sol_protocol(nr_prescricao_p, nr_seq_hd_prescr_w, nr_seq_solucao_novo_w);
	end if;

	/* exception
		when others then
			ds_erro_w	:= substr(sqlerrm(sqlcode),1,255);
			--Erro na Inclusao das Solucoes Prescricao Medica

			--#@DS_ERRO#@

			Wheb_mensagem_pck.exibir_mensagem_abort(176614,'DS_ERRO='||ds_erro_w);
	end; */
	ds_erro_ww := Consistir_prescr_solucao(nr_prescricao_p, nr_seq_solucao_novo_w, cd_estabelecimento_w, cd_perfil_w, nm_usuario_p, ds_erro_ww);

end loop;
close C02;

-- Inserir HD elementos
open c11;
loop fetch c11 into
	nr_seq_medic_w,
	nr_seq_solucao_w;
EXIT WHEN NOT FOUND; /* apply on c11 */

	if (nr_seq_medic_w IS NOT NULL AND nr_seq_medic_w::text <> '') and (nr_seq_solucao_w IS NOT NULL AND nr_seq_solucao_w::text <> '') then


	open c12;
	loop

	fetch c12 into	nr_seq_elemento_w,
			cd_unidade_medida_w,
			qt_elemento_w;
		EXIT WHEN NOT FOUND; /* apply on c12 */

		select	nextval('hd_prescr_sol_elem_seq')
		into STRICT	nr_seq_sol_elem_w
		;

		insert into hd_prescr_sol_elem(
		 	nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_prescricao,
			nr_seq_solucao,
			nr_seq_elemento,
			cd_unidade_medida,
			qt_elemento)
		values (
			nr_seq_sol_elem_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_prescricao_p,
			nr_seq_solucao_w,
			nr_seq_elemento_w,
			cd_unidade_medida_w,
			qt_elemento_w);
	end loop;
	close c12;
	end if;
end loop;
close c11;

/* Banco de sangue */

open C13;
loop
fetch C13 into
	nr_seq_bco_sangue_w,
	ie_tipo_paciente_w,
	ie_porte_cirurgico_w,
	ie_tipo_w,
	ie_reserva_w;
EXIT WHEN NOT FOUND; /* apply on C13 */
	begin
	select	coalesce(Obter_Diagnostico_Atendimento(nr_atendimento_w), ' ')
	into STRICT	ds_diag_bco_sangue_w
	;

	select	nextval('prescr_solic_bco_sangue_seq')
	into STRICT	nr_seq_prescr_sangue_w
	;

	SELECT * FROM Obter_Informacao_Atributo(	cd_estabelecimento_w, OBTER_EMPRESA_ESTAB(cd_estabelecimento_w), nr_atendimento_w, cd_pessoa_fisica_w, 'PRESCR_SOLIC_BCO_SANGUE', 'QT_HEMOGLOBINA', QT_HEMOGLOBINA_W, QT_HEMOGLOBINA_W2) INTO STRICT QT_HEMOGLOBINA_W, QT_HEMOGLOBINA_W2;
	SELECT * FROM Obter_Informacao_Atributo(	cd_estabelecimento_w, OBTER_EMPRESA_ESTAB(cd_estabelecimento_w), nr_atendimento_w, cd_pessoa_fisica_w, 'PRESCR_SOLIC_BCO_SANGUE', 'QT_HEMATOCRITO', QT_HEMATOCRITO_W, QT_HEMATOCRITO_W2) INTO STRICT QT_HEMATOCRITO_W, QT_HEMATOCRITO_W2;
	SELECT * FROM Obter_Informacao_Atributo(	cd_estabelecimento_w, OBTER_EMPRESA_ESTAB(cd_estabelecimento_w), nr_atendimento_w, cd_pessoa_fisica_w, 'PRESCR_SOLIC_BCO_SANGUE', 'QT_TAP', QT_TAP_W, QT_TAP_W2) INTO STRICT QT_TAP_W, QT_TAP_W2;
	SELECT * FROM Obter_Informacao_Atributo(	cd_estabelecimento_w, OBTER_EMPRESA_ESTAB(cd_estabelecimento_w), nr_atendimento_w, cd_pessoa_fisica_w, 'PRESCR_SOLIC_BCO_SANGUE', 'QT_TAP_INR', QT_TAP_INR_W, QT_TAP_INR_W2) INTO STRICT QT_TAP_INR_W, QT_TAP_INR_W2;
	SELECT * FROM Obter_Informacao_Atributo(	cd_estabelecimento_w, OBTER_EMPRESA_ESTAB(cd_estabelecimento_w), nr_atendimento_w, cd_pessoa_fisica_w, 'PRESCR_SOLIC_BCO_SANGUE', 'QT_TTPA', QT_TTPA_W, QT_TTPA_W2) INTO STRICT QT_TTPA_W, QT_TTPA_W2;
	SELECT * FROM Obter_Informacao_Atributo(	cd_estabelecimento_w, OBTER_EMPRESA_ESTAB(cd_estabelecimento_w), nr_atendimento_w, cd_pessoa_fisica_w, 'PRESCR_SOLIC_BCO_SANGUE', 'QT_TTPA_REL', QT_TTPA_REL_W, QT_TTPA_REL_W2) INTO STRICT QT_TTPA_REL_W, QT_TTPA_REL_W2;


	insert into prescr_solic_bco_sangue(
		nr_sequencia,
		nr_prescricao, 
		dt_atualizacao,
		nm_usuario, 
		ds_diagnostico, 
		ie_trans_anterior,
		ie_tipo_paciente, 
		ie_porte_cirurgico, 
		ie_tipo,
		cd_protocolo, 
		nr_seq_protocolo, 
		nr_seq_item_prot,
		ie_gravidez,
		QT_HEMOGLOBINA,
		QT_HEMATOCRITO,
		QT_TAP,
		QT_TAP_INR,
		QT_TTPA,
		QT_TTPA_REL,
		ie_reserva)
	values (nr_seq_prescr_sangue_w, 
		nr_prescricao_p, 
		clock_timestamp(),
		nm_usuario_p, 
		ds_diag_bco_sangue_w, 
		'N',
		ie_tipo_paciente_w, 
		ie_porte_cirurgico_w, 
		ie_tipo_w,
		cd_protocolo_p, 
		nr_sequencia_p, 
		nr_seq_bco_sangue_w,
		'N',
		QT_HEMOGLOBINA_W,
		QT_HEMATOCRITO_W,
		QT_TAP_W,
		QT_TAP_INR_W,
		QT_TTPA_W,
		QT_TTPA_REL_W,
		ie_reserva_w);

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_proc_sangue_w
	from	prescr_procedimento
	where	nr_prescricao = nr_prescricao_p;

	/* Hemocomponentes */

	ie_urgencia_w := null;		
	if (ie_urgencia_p = 'S') then
		 ie_urgencia_w	:= 'S';
	end if;
	
	open C14;
	loop
	fetch C14 into
		nr_seq_proc_novo_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_proc_interno_w,
		qt_procedimento_w,
		nr_seq_derivado_w,
		qt_vol_hemocomp_w,
		dt_prev_execucao_w,
		cd_intervalo_w,
		qt_veloc_inf_hemo_w,
		cd_setor_atendimento_w,
		ie_util_hemocomponente_w,
		ds_observacao_w,
		ie_se_necessario_w,
		ie_acm_w,
		ie_urgencia_w;
	EXIT WHEN NOT FOUND; /* apply on C14 */
		begin
		if (cd_intervalo_p IS NOT NULL AND cd_intervalo_p::text <> '') then
			cd_intervalo_w := cd_intervalo_p;
		end if;
		
		if (coalesce(nr_atendimento_w,0) > 0) then
			select	a.ie_tipo_convenio,
					b.cd_convenio,
					b.cd_categoria,
					a.cd_estabelecimento,
					b.cd_plano_convenio,
					obter_setor_atendimento(a.nr_atendimento)
			into STRICT	ie_tipo_convenio_w,
					cd_convenio_w,
					cd_categoria_w,
					cd_estab_w,
					cd_plano_convenio_w,
					cd_setor_atend_w
			from	atend_categoria_convenio b,
					atendimento_paciente a
			where	a.nr_atendimento	= nr_atendimento_w
			and		b.nr_atendimento	= a.nr_atendimento
			and		b.nr_seq_interno	= OBTER_ATECACO_ATendIMENTO(A.NR_ATendIMENTO);
		end if;
	
		
		if (nr_seq_derivado_w IS NOT NULL AND nr_seq_derivado_w::text <> '') then
			SELECT * FROM obter_san_proced_convenio(0, nr_seq_derivado_w, cd_estabelecimento_w, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, cd_categoria_w, cd_setor_atend_w, cd_procedimento_w, ie_origem_proced_w, 0, nr_seq_proc_interno_w, clock_timestamp(), nr_seq_proc_interno_deriv_w, qt_exames_conta_w, 'N', 'N', 'N', 'N', 'N', 'N') INTO STRICT cd_setor_atend_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_deriv_w, qt_exames_conta_w;
			if (nr_seq_proc_interno_deriv_w > 0) then
				nr_seq_proc_interno_w := nr_seq_proc_interno_deriv_w;
			end if;
		end if;

		dt_prim_horario_proced_w	:= null;		
		
		if (coalesce(ie_dt_prescr_dt_exec_proc_w, 'N') <> 'S') then
			if	((coalesce(dt_procedimento_p::text, '') = '') or (dt_procedimento_p < dt_prescricao_w)) then
			select	Obter_data_prev_exec(dt_prescricao_w,dt_procedimento_p,coalesce(cd_setor_exclusivo_w,cd_setor_prescr_w), nr_prescricao_p, 'A')
			into STRICT	dt_primeiro_horario_w
			;
			
			dt_prim_horario_proced_w	:= dt_primeiro_horario_w;
			end if;
		else
			if (dt_inicio_prescr_w > dt_prescricao_w) then
				select	dt_prescricao + 1/1440
				into STRICT	dt_prescricao_w
				from	prescr_medica 
				where	nr_prescricao = nr_prescricao_p;
			end if;	
				
			dt_primeiro_horario_w		:= dt_prescricao_w;
			if (coalesce(hr_prim_horario_proced_w::text, '') = '') or (hr_prim_horario_proced_w	= '  :  ') then
				hr_prim_horario_proced_w	:= to_char(dt_prescricao_w, 'hh24:mi');
			end if;	
		end if;		



		if (dt_inicio_prescr_w between dt_prescricao_w and clock_timestamp()) and (coalesce(ie_dt_prescr_dt_exec_proc_w, 'N') = 'S') then
			dt_prim_horario_proced_w 	:= dt_inicio_prescr_w;
		elsif (coalesce(ie_dt_prescr_dt_exec_proc_w, 'N') = 'S') then
				dt_prim_horario_proced_w 	:= dt_prescricao_w;
		elsif (hr_prim_horario_proced_w <> '  :  ') and (hr_prim_horario_proced_w IS NOT NULL AND hr_prim_horario_proced_w::text <> '') then
				dt_prim_horario_proced_w	:=  PKG_DATE_UTILS.get_Time(dt_primeiro_horario_w, hr_prim_horario_proced_w);
				if (to_char(dt_prescricao_w,'dd/mm/yyyy hh24:mi') > to_char(dt_prim_horario_proced_w,'dd/mm/yyyy hh24:mi')) and (dt_prim_horario_proced_w < dt_validade_prescr_w) then
					dt_prim_horario_proced_w := dt_prim_horario_proced_w + 1;
				end if;
		end if;
		
		if (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '') and (coalesce(ie_urgencia_w, 'N') = 'N') and (ie_check_tipo_interv_w = 'S') then
			select	coalesce(coalesce(max(ie_se_necessario),ie_se_necessario_w),'N'),
					coalesce(coalesce(max(ie_agora),ie_urgencia_w),'N'),
					coalesce(coalesce(max(ie_acm),ie_acm_w),'N')
			into STRICT	ie_se_necessario_w,
					ie_agora_w,
					ie_acm_proced_w
			from	intervalo_prescricao
			where	cd_intervalo = cd_intervalo_w;
		elsif (ie_urgencia_w = 'S') then
			select	max(cd_intervalo)
			into STRICT	cd_intervalo_w
			from    intervalo_prescricao
			where   ie_situacao = 'A'
			and     ie_agora    = 'S'
			and 	cd_intervalo = cd_intervalo_w
			and     ((coalesce(cd_estabelecimento::text, '') = '') or (cd_estabelecimento = cd_estabelecimento_w))
			and     Obter_se_intervalo(cd_intervalo, 'P') = 'S'
			and     obter_se_exibe_intervalo(nr_prescricao_p,cd_intervalo, null) = 'S'
			order by coalesce(nr_seq_apresent,999),
				     ds_intervalo;
		end if;
		
		if (coalesce(ie_urgencia_w,ie_agora_w) = 'S') then
			dt_prim_horario_proced_w	:= clock_timestamp();
		elsif (ie_previsao_proced_w IS NOT NULL AND ie_previsao_proced_w::text <> '') then	/* Verificar se procedimento cadastrado com especificacao para a data prevista */
			if (ie_previsao_proced_w = 'DP') then		---- Data da prescricao (DP) 
				dt_prim_horario_proced_w := dt_prescricao_w;
			elsif (ie_previsao_proced_w = '2h') then	---- 2 horas apos a prescricao (2h)
				dt_prim_horario_proced_w := dt_prescricao_w + 2/24;
			elsif (ie_previsao_proced_w = '3h') then	---- 3 horas apos a prescricao (3h)
				dt_prim_horario_proced_w := dt_prescricao_w + 3/24;
			elsif (ie_previsao_proced_w = '6h') then	---- 6 horas apos a prescricao (6h)
				dt_prim_horario_proced_w := dt_prescricao_w + 6/24;
			elsif (ie_previsao_proced_w = '9h') then	---- 9 horas apos a prescricao (9h)
				dt_prim_horario_proced_w := dt_prescricao_w + 9/24;
			end if;
		end if;

		ds_horarios_proced_w 	:= '';
		nr_ocorrencia_proced_w 	:= 0;

		if (coalesce(ie_urgencia_w,ie_agora_w) = 'S') then
			dt_primeiro_horario_w	:= clock_timestamp();

			select	coalesce(max(obter_interv_acm_sn_agora_lib(cd_estabelecimento_w,1,2,'P',cd_procedimento_w,cd_intervalo_w,nr_prescricao_p,ie_origem_proced_w,nr_seq_proc_interno_w)),cd_intervalo_w)
			into STRICT	cd_intervalo_w
			;

		elsif (ie_previsao_proced_w IS NOT NULL AND ie_previsao_proced_w::text <> '') then	/* Verificar se procedimento cadastrado com especificacao para a data prevista */
			if (ie_previsao_proced_w = 'DP') then		---- Data da prescricao (DP) 
				dt_primeiro_horario_w := dt_prescricao_w;
			elsif (ie_previsao_proced_w = '3h') then	---- 3 horas apos a prescricao (3h)
				dt_primeiro_horario_w := dt_prescricao_w + 3/24;
			elsif (ie_previsao_proced_w = '6h') then	---- 6 horas apos a prescricao (6h)
				dt_primeiro_horario_w := dt_prescricao_w + 6/24;
			elsif (ie_previsao_proced_w = '9h') then	---- 9 horas apos a prescricao (9h)
				dt_primeiro_horario_w := dt_prescricao_w + 9/24;
			end if;
		end if;
		
		if ((coalesce(cd_intervalo_p, cd_intervalo_w) IS NOT NULL AND (coalesce(cd_intervalo_p, cd_intervalo_w))::text <> '')) then		
			select	max(qt_min_intervalo)
			into STRICT	qt_min_intervalo_w
			from	intervalo_prescricao
			where	cd_intervalo	= coalesce(cd_intervalo_p, cd_intervalo_w);
		end if;
		
		SELECT * FROM Calcular_Horario_Prescricao(nr_prescricao_p, cd_intervalo_w, coalesce(dt_procedimento_p,coalesce(dt_primeiro_horario_w,dt_prescricao_w)), coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)), nr_horas_validade_w, cd_procedimento_w, 0, qt_min_intervalo_w, nr_ocorrencia_proced_w, ds_horarios_proced_w, ds_horarios_proced2_w, 'N', null, null, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w) INTO STRICT nr_ocorrencia_proced_w, ds_horarios_proced_w, ds_horarios_proced2_w;

		ds_horarios_proced_w	:= ds_horarios_proced_w || ds_horarios_proced2_w;

		select	padroniza_horario_prescr(ds_horarios_proced_w, to_char(dt_inicio_prescr_w,'dd/mm/yyyy hh24:mi:ss'))
		into STRICT	ds_horarios_padrao_w
		;
		
		if (ieEliminaHorVigencia_w = 'S') and (ie_agora_w <> 'S') and (ds_horarios_padrao_w IS NOT NULL AND ds_horarios_padrao_w::text <> '') then			
			ds_horarios_proced_w	:= Eliminar_hor_vigencia_proc(ds_horarios_proced_w, cd_intervalo_w, dt_inicio_prescr_w,
									coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)),
									0, qt_min_intervalo_w, nr_prescricao_p,coalesce(ie_agora_w,'N'),coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)));
			if (ds_horarios_proced_w IS NOT NULL AND ds_horarios_proced_w::text <> '') and (ds_horarios_proced_w <> '') then
				nr_ocorrencia_proced_w := obter_ocorrencias_horarios_rep(ds_horarios_proced_w);
			end if;
		end if;


		select	max(obter_ctrl_glic_proc(nr_seq_proc_interno_w))
		into STRICT	ie_cig_w
		;

		if (ie_cig_w	= 'CIG') then		
			ds_horarios_proced_w 	:= to_char(coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)),'hh24:mi');
			nr_ocorrencia_proced_w	:= 1;
		end if;

		ds_horarios_w := ds_horarios_proced_w;
		
		if (ie_se_necessario_w = 'S') then
			ds_horarios_w := 'SN';
		elsif (ie_acm_w = 'S') then
			ds_horarios_w := 'ACM';		
		end if;
		
		begin
		nr_doc_convenio_w := null;
		SELECT * FROM tiss_obter_guia(4, null,  --Conta
				nr_doc_convenio_w, 'N',  --Se e honorario ou nao
				null,  --Medico honorario
				null,  --CGC Prestador
				null,  --Responsavel credito 
				null,  --funcao medico
				null,  --CBO
				ie_guia_w,  -- Regra retornada
				null,  --Pedido
				nr_prescricao_p,  --Prescricao
				null,  --Senha
				cd_setor_exclusivo_w,  -- Setor atendimento
				null,  --Medico requerido
				nr_prescricao_p,  --Numero da prescricao de procedimento
				null,  --Medico solicitante da prescricao
				null,  --Data referencia
				null,  --Funcionario
				null,  --Sequencia do material
				null,  --Sequencia do procedimento
				null,  --numero prescr material
				cd_procedimento_w,  --Codigo do procedimento
				ie_origem_proced_w,  --Origem proced
				null,  -- Seq registro medico de faturamento
				null) INTO STRICT 
				nr_doc_convenio_w, 
				ie_guia_w; -- Seq pedido exame;
		exception
		when others then
			nr_doc_convenio_w := null;
		end;
		
		insert into prescr_procedimento(
			nr_prescricao,
			nr_sequencia, 
			cd_procedimento,
			ie_origem_proced, 
			nr_seq_proc_interno, 
			dt_atualizacao,
			nm_usuario, 
			ie_origem_inf, 
			nr_seq_derivado,
			qt_procedimento, 
			qt_vol_hemocomp, 
			ie_suspenso,
			dt_prev_execucao, 
			cd_intervalo, 
			qt_veloc_inf_hemo,
			ds_horarios, 
			cd_setor_atendimento, 
			ie_util_hemocomponente,
			ds_observacao, 
			nr_seq_solic_sangue, 
			ie_se_necessario,
			ie_acm,
			ie_urgencia,
			ie_tipo_proced,
			nr_doc_convenio,
			cd_protocolo,
			nr_seq_protocolo,
			dt_status) 
		values (	
			nr_prescricao_p, 
			nr_seq_proc_novo_w, 
			cd_procedimento_w,
			ie_origem_proced_w, 
			nr_seq_proc_interno_w, 
			clock_timestamp(),
			nm_usuario_p, 
			1, 
			nr_seq_derivado_w,
			qt_procedimento_w, 
			qt_vol_hemocomp_w, 
			'N',
			dt_prev_execucao_w, 
			cd_intervalo_w, 
			qt_veloc_inf_hemo_w,
			ds_horarios_w, 
			cd_setor_atendimento_w, 
			ie_util_hemocomponente_w,
			ds_observacao_w, 
			nr_seq_prescr_sangue_w,
			ie_se_necessario_w,
			ie_acm_w,
			ie_urgencia_w,
			'BSHE',
			nr_doc_convenio_w,
			cd_protocolo_p,
			nr_sequencia_p,
			clock_timestamp());
		
		add_log_dt_prev_execucao(
			nr_linha_p		=> $$plsql_line,
			nr_seq_proc_p	=> nr_seq_proc_novo_w,
			ds_log_p		=> 'dt_prev_execucao_w:'||to_char(dt_prev_execucao_w, c_fmt_data));
			
		if (ie_prescr_proc_sem_lib_w = 'S') then
			CALL Gerar_prescr_proc_sem_dt_lib(nr_prescricao_p,nr_seq_proc_novo_w,cd_perfil_w,'N',nm_usuario_p);
		end if;
		end;
	end loop;
	close C14;

	open C18;
	loop
	fetch C18 into
		ie_grupo_hemocom_w,
		nr_seq_indicacao_w,
		ds_indicacao_adic_w;
	EXIT WHEN NOT FOUND; /* apply on C18 */
		select	nextval('prescr_sol_bs_indicacao_seq')
		into STRICT	nr_seq_solic_w
		;

		insert into prescr_sol_bs_indicacao(nr_sequencia,
			nr_seq_solic_bs,
			dt_atualizacao,
			nm_usuario,
			nr_seq_indicacao,
			ds_indicacao_adic,
			ie_grupo_hemocom,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_perfil_ativo)
		values (nr_seq_solic_w,
			nr_seq_prescr_sangue_w,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_indicacao_w,
			ds_indicacao_adic_w,
			ie_grupo_hemocom_w,
			clock_timestamp(),
			nm_usuario_p,
			cd_perfil_w);

	end loop;
	close C18;
	

	open C19;
	loop
	fetch C19 into
		nr_seq_proc_interno_ww,
		nr_seq_derivado_hem_w,
		qt_procedimento_hem_w,
		qt_vol_hemocomp_w,
		ie_suspenso_hem_w,
		cd_intervalo_hem_w,
		ds_horarios_hem_w,
		cd_setor_atendimento_hem_w,
		ds_observacao_hem_w,
		cd_procedimento_hem_w,
		ie_origem_proced_hem_w;
	EXIT WHEN NOT FOUND; /* apply on C19 */
		
		if (coalesce(cd_procedimento_hem_w::text, '') = '') then
			
			select	a.cd_procedimento,
	   				a.ie_origem_proced,
	   				a.ie_tipo
			into STRICT 	cd_procedimento_hem_w,
					ie_origem_proced_hem_w,
					ie_tipo_proc_w
			from  	procedimento b,
      				proc_interno a
			where 	a.ie_tipo in ('BS', 'AT', 'ST')
			and   	a.cd_procedimento    = b.cd_procedimento
			and   	a.ie_origem_proced   = b.ie_origem_proced
			and   	coalesce(a.IE_EXIBE_REP,'S') = 'S'
			and   	coalesce(a.ie_situacao,'A') = 'A'
			and   	coalesce(b.ie_situacao,'A') = 'A'
			and		nr_sequencia = nr_seq_proc_interno_ww;

		
		end if;
		
		if (cd_intervalo_p IS NOT NULL AND cd_intervalo_p::text <> '') then
			cd_intervalo_hem_w := cd_intervalo_p;
		end if;
		
		if (coalesce(nr_atendimento_w,0) > 0) then
			select	a.ie_tipo_convenio,
					b.cd_convenio,
					b.cd_categoria,
					a.cd_estabelecimento,
					b.cd_plano_convenio,
					obter_setor_atendimento(a.nr_atendimento)
			into STRICT	ie_tipo_convenio_w,
					cd_convenio_w,
					cd_categoria_w,
					cd_estab_w,
					cd_plano_convenio_w,
					cd_setor_atend_w
			from	atend_categoria_convenio b,
					atendimento_paciente a
			where	a.nr_atendimento	= nr_atendimento_w
			and		b.nr_atendimento	= a.nr_atendimento
			and		b.nr_seq_interno	= OBTER_ATECACO_ATendIMENTO(A.NR_ATendIMENTO);
		end if;
	
		
		if (nr_seq_derivado_hem_w IS NOT NULL AND nr_seq_derivado_hem_w::text <> '') then
			SELECT * FROM obter_san_proced_convenio(0, nr_seq_derivado_hem_w, cd_estabelecimento_w, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, cd_categoria_w, cd_setor_atend_w, cd_procedimento_w, ie_origem_proced_w, 0, nr_seq_proc_interno_ww, clock_timestamp(), nr_seq_proc_interno_deriv_w, qt_exames_conta_w, 'N', 'N', 'N', 'N', 'N', 'N') INTO STRICT cd_setor_atend_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_deriv_w, qt_exames_conta_w;
			if (nr_seq_proc_interno_deriv_w > 0) then
				nr_seq_proc_interno_ww := nr_seq_proc_interno_deriv_w;
			end if;
		end if;
		

		dt_prim_horario_proced_w	:= null;		
		
		if (coalesce(ie_dt_prescr_dt_exec_proc_w, 'N') <> 'S') then
			if	((coalesce(dt_procedimento_p::text, '') = '') or (dt_procedimento_p < dt_prescricao_w)) then
			select	Obter_data_prev_exec(dt_prescricao_w,dt_procedimento_p,coalesce(cd_setor_exclusivo_w,cd_setor_prescr_w), nr_prescricao_p, 'A')
			into STRICT	dt_primeiro_horario_w
			;
			
			dt_prim_horario_proced_w	:= dt_primeiro_horario_w;
			end if;
		else
			if (dt_inicio_prescr_w > dt_prescricao_w) then
				select	dt_prescricao + 1/1440
				into STRICT	dt_prescricao_w
				from	prescr_medica 
				where	nr_prescricao = nr_prescricao_p;
			end if;	
				
			dt_primeiro_horario_w		:= dt_prescricao_w;
			if (coalesce(hr_prim_horario_proced_w::text, '') = '') or (hr_prim_horario_proced_w	= '  :  ') then
				hr_prim_horario_proced_w	:= to_char(dt_prescricao_w, 'hh24:mi');
			end if;	
		end if;		

		if (dt_inicio_prescr_w between dt_prescricao_w and clock_timestamp()) and (coalesce(ie_dt_prescr_dt_exec_proc_w, 'N') = 'S') then
			dt_prim_horario_proced_w 	:= dt_inicio_prescr_w;
		elsif (coalesce(ie_dt_prescr_dt_exec_proc_w, 'N') = 'S') then
				dt_prim_horario_proced_w 	:= dt_prescricao_w;
		elsif (hr_prim_horario_proced_w <> '  :  ') and (hr_prim_horario_proced_w IS NOT NULL AND hr_prim_horario_proced_w::text <> '') then
				dt_prim_horario_proced_w	:=  PKG_DATE_UTILS.get_Time(dt_primeiro_horario_w, hr_prim_horario_proced_w);
				if (to_char(dt_prescricao_w,'dd/mm/yyyy hh24:mi') > to_char(dt_prim_horario_proced_w,'dd/mm/yyyy hh24:mi')) and (dt_prim_horario_proced_w < dt_validade_prescr_w) then
					dt_prim_horario_proced_w := dt_prim_horario_proced_w + 1;
				end if;
		end if;
		
		if ((coalesce(cd_intervalo_p, cd_intervalo_hem_w) IS NOT NULL AND (coalesce(cd_intervalo_p, cd_intervalo_hem_w))::text <> '')) then		
			select	max(qt_min_intervalo)
			into STRICT	qt_min_intervalo_w
			from	intervalo_prescricao
			where	cd_intervalo	= coalesce(cd_intervalo_p, cd_intervalo_w);
		end if;
		
		SELECT * FROM Calcular_Horario_Prescricao(nr_prescricao_p, cd_intervalo_hem_w, coalesce(dt_procedimento_p,coalesce(dt_primeiro_horario_w,dt_prescricao_w)), coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)), nr_horas_validade_w, cd_procedimento_hem_w, 0, qt_min_intervalo_w, nr_ocorrencia_proced_w, ds_horarios_proced_w, ds_horarios_proced2_w, 'N', null, null, cd_procedimento_hem_w, ie_origem_proced_w, nr_seq_proc_interno_ww) INTO STRICT nr_ocorrencia_proced_w, ds_horarios_proced_w, ds_horarios_proced2_w;

		ds_horarios_proced_w	:= ds_horarios_proced_w || ds_horarios_proced2_w;

		select	padroniza_horario_prescr(ds_horarios_proced_w, to_char(dt_inicio_prescr_w,'dd/mm/yyyy hh24:mi:ss'))
		into STRICT	ds_horarios_padrao_w
		;
		
		if (ieEliminaHorVigencia_w = 'S') and (ds_horarios_padrao_w IS NOT NULL AND ds_horarios_padrao_w::text <> '') then			
			ds_horarios_proced_w	:= Eliminar_hor_vigencia_proc(ds_horarios_proced_w, cd_intervalo_hem_w, dt_inicio_prescr_w,
									coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)),
									0, qt_min_intervalo_w, nr_prescricao_p,coalesce(ie_agora_w,'N'),coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)));
			if (ds_horarios_proced_w IS NOT NULL AND ds_horarios_proced_w::text <> '') and (ds_horarios_proced_w <> '') then
				nr_ocorrencia_proced_w := obter_ocorrencias_horarios_rep(ds_horarios_proced_w);
			end if;
		end if;

		select	max(obter_ctrl_glic_proc(nr_seq_proc_interno_ww))
		into STRICT	ie_cig_w
		;

		if (ie_cig_w	= 'CIG') then		
			ds_horarios_proced_w 	:= to_char(coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)),'hh24:mi');
			nr_ocorrencia_proced_w	:= 1;
		end if;

		ds_horarios_hem_w := ds_horarios_proced_w;
		
		begin
		nr_doc_convenio_w := null;
		SELECT * FROM tiss_obter_guia(4, null,  --Conta
				nr_doc_convenio_w, 'N',  --Se e honorario ou nao
				null,  --Medico honorario
				null,  --CGC Prestador
				null,  --Responsavel credito 
				null,  --funcao medico
				null,  --CBO
				ie_guia_w,  -- Regra retornada
				null,  --Pedido
				nr_prescricao_p,  --Prescricao
				null,  --Senha
				cd_setor_exclusivo_w,  -- Setor atendimento
				null,  --Medico requerido
				nr_prescricao_p,  --Numero da prescricao de procedimento
				null,  --Medico solicitante da prescricao
				null,  --Data referencia
				null,  --Funcionario
				null,  --Sequencia do material
				null,  --Sequencia do procedimento
				null,  --numero prescr material
				cd_procedimento_hem_w,  --Codigo do procedimento
				ie_origem_proced_w,  --Origem proced
				null,  -- Seq registro medico de faturamento
				null) INTO STRICT 
				nr_doc_convenio_w, 
				ie_guia_w; -- Seq pedido exame;
		exception
		when others then
			nr_doc_convenio_w := null;
		end;
		
		select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_seq_proc_hem_w
		from	prescr_procedimento
		where	nr_prescricao = nr_prescricao_p;
		
		insert into prescr_procedimento(
			nr_prescricao,
			nr_sequencia, 
			cd_procedimento,
			ie_origem_proced, 
			nr_seq_proc_interno, 
			dt_atualizacao,
			nm_usuario, 
			ie_origem_inf, 
			nr_seq_derivado,
			qt_procedimento, 
			qt_vol_hemocomp, 
			ie_suspenso,
			dt_prev_execucao, 
			cd_intervalo, 
			ds_horarios, 
			cd_setor_atendimento, 
			ds_observacao, 
			nr_seq_solic_sangue, 
			ie_tipo_proced,
			nr_doc_convenio,
			cd_protocolo,
			nr_seq_protocolo) 
		values (	
			nr_prescricao_p,
			nr_seq_proc_hem_w,
			cd_procedimento_hem_w,
			ie_origem_proced_hem_w,
			nr_seq_proc_interno_ww,
			clock_timestamp(),
			nm_usuario_p,
			1, 
			nr_seq_derivado_hem_w,
			qt_procedimento_hem_w,
			qt_vol_hemocomp_w,
			'N',
			dt_inicio_prescr_w,
			cd_intervalo_hem_w,
			ds_horarios_hem_w, 
			cd_setor_atendimento_hem_w,
			ds_observacao_hem_w, 
			nr_seq_prescr_sangue_w,
			ie_tipo_proc_w,
			nr_doc_convenio_w,
			cd_protocolo_p,
			nr_sequencia_p);
			
		add_log_dt_prev_execucao(
			nr_linha_p		=> $$plsql_line,
			nr_seq_proc_p	=> nr_seq_proc_hem_w,
			ds_log_p		=> 'dt_inicio_prescr_w:'||to_char(dt_inicio_prescr_w, c_fmt_data));
			
		if (ie_prescr_proc_sem_lib_w = 'S') then
			CALL Gerar_prescr_proc_sem_dt_lib(nr_prescricao_p,nr_seq_proc_hem_w,cd_perfil_w,'N',nm_usuario_p);
		end if;

	end loop;
	close C19;

	end;
end loop;
close C13;

-- Inserir gasoterapia
open C15;
loop
fetch C15 into
	ie_respiracao_w,
	ie_disp_resp_esp_w,
	cd_modalidade_vent_w,
	nr_seq_gas_w,
	ie_modo_adm_w,
	ie_inicio_w,
	ie_unidade_medida_w,
	qt_gasoterapia_w,
	qt_freq_vent_w,
	ds_observacao_w,
	nr_seq_gas_prot_w,
	cd_intervalo_w;
EXIT WHEN NOT FOUND; /* apply on C15 */

	select	nextval('prescr_gasoterapia_seq')
	into STRICT	nr_seq_gasoterapia_w
	;

	dt_prev_execucao_w	:= clock_timestamp();
	if (clock_timestamp() < dt_inicio_prescr_w) then
		dt_prev_execucao_w := dt_inicio_prescr_w;
	end if;
	
	if (cd_intervalo_p IS NOT NULL AND cd_intervalo_p::text <> '') then
		cd_intervalo_w := cd_intervalo_p;
	end if;
	
	nr_ocorrencia_w := 0;
	ds_horarios_gas_w	:= '';
	ds_horarios_gas_ww	:= '';
	
	select	coalesce(max(qt_min_intervalo),0)
	into STRICT	qt_min_intervalo_w
	from	intervalo_prescricao
	where	cd_intervalo	= cd_intervalo_w;

	SELECT * FROM Calcular_Horario_Prescricao(nr_prescricao_p, cd_intervalo_w, dt_inicio_prescr_w, dt_prev_execucao_w, nr_horas_validade_w, 0, 0, qt_min_intervalo_w, nr_ocorrencia_w, ds_horarios_gas_w, ds_horarios_gas_ww, 'N', null) INTO STRICT nr_ocorrencia_w, ds_horarios_gas_w, ds_horarios_gas_ww;
	
	ds_horarios_gas_w	:= ds_horarios_gas_w || ds_horarios_gas_ww;

	insert into prescr_gasoterapia(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		cd_protocolo,
		nr_seq_protocolo,
		ie_respiracao,
		ie_disp_resp_esp,
		cd_modalidade_vent,
		nr_seq_gas,
		ie_modo_adm,
		ie_inicio,
		ie_unidade_medida,
		qt_gasoterapia,
		qt_freq_vent,
		ds_observacao,
		nr_prescricao,
		ie_suspenso,
		dt_prev_execucao,
		cd_intervalo,
		ds_horarios,
		nr_seq_item_rotina)
	values (	nr_seq_gasoterapia_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		cd_protocolo_p,
		nr_sequencia_p,
		ie_respiracao_w,
		ie_disp_resp_esp_w,
		cd_modalidade_vent_w,
		nr_seq_gas_w,
		ie_modo_adm_w,
		ie_inicio_w,
		ie_unidade_medida_w,
		qt_gasoterapia_w,
		qt_freq_vent_w,
		ds_observacao_w,
		nr_prescricao_p,
		'N',
		dt_prev_execucao_w,
		cd_intervalo_w,
		ds_horarios_gas_w,
		nr_seq_gas_prot_w);

	CALL Inserir_mat_med_assoc_gas_prot(cd_protocolo_p, nr_sequencia_p, nr_seq_gas_prot_w,nr_prescricao_p, coalesce(qt_peso_p,0), nr_seq_gasoterapia_w, nm_usuario_p, null);
	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;


end loop;
close C15;


-- Inserir Procedimentos
select	coalesce(max(nr_sequencia),0),
		coalesce(max(nr_agrupamento),0)
into STRICT	nr_seq_proc_w,
		nr_agrupamento_proc_w
from	prescr_procedimento
where	nr_prescricao = nr_prescricao_p;

ie_urgencia_w := null;

if (ie_urgencia_p = 'S') then
     ie_urgencia_w	:= 'S';
end if;


open C03;
loop
fetch C03 into
	nr_seq_proc_novo_w,
	nr_seq_proc_prot_w,
	cd_procedimento_w,
	qt_procedimento_w,
	ds_observacao_w,
	ie_origem_proced_w,
	cd_intervalo_w,
	cd_setor_exclusivo_w,
	cd_material_exame_w,
	nr_seq_exame_w,
	ie_se_necessario_w,
	ie_acm_proced_w,
	hr_prim_horario_proced_w,
	ds_material_especial_w,
	ie_agora_w,
	nr_seq_proc_interno_w,
	ie_lado_w,
	ie_respiracao_w,
	cd_mod_vent_w,
	ie_disp_resp_esp_w,
	qt_fluxo_oxigenio_w,
	qt_min_intervalo_w,
	nr_seq_prot_glic_w,
	ds_dado_clinico_w,
	ie_objetivo_onco_w,
	ie_executar_leito_w,
	nr_seq_contraste_w,
	ds_exame_fis_achado_cirur_w,
	ds_resumo_clinico_w,
	cd_setor_entrega_w,
	cd_setor_coleta_w,
	ds_prescricao_w,
	ie_previsao_proced_w,
	cd_medico_exec_w,
	ds_diag_provavel_ap_w,
	ds_exame_anterior_ap_w,
	ds_localizacao_lesao_w,
	ds_tempo_doenca_w,
	cd_cgc_laboratorio_w,
	qt_frasco_env_w,
	nr_seq_proc_int_cirur_w,
	qt_peca_ap_w,
	nr_seq_amostra_princ_w,
	ds_qualidade_peca_ap_w,
	ie_forma_exame_w,
	cd_pessoa_coleta_w,
	ds_justificativa_w,
	cd_kit_material_w,
	ie_amostra_w,
	nr_seq_topografia_ww;
EXIT WHEN NOT FOUND; /* apply on C03 */

	begin

	if (cd_intervalo_p IS NOT NULL AND cd_intervalo_p::text <> '') then
		cd_intervalo_w := cd_intervalo_p;
	end if;

	if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
		SELECT * FROM Obter_Proc_Tab_Interno(nr_seq_proc_interno_w, nr_prescricao_p, 0, 0, cd_procedimento_w, ie_origem_proced_w, NULL, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
	end if;

	if (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') then
		begin
		select	DisTINCT 
			cd_procedimento,
			ie_origem_proced
		into STRICT	cd_proced_aux_w,
			ie_origem_aux_w
		from	exame_lab_convenio
		where	nr_seq_exame	= nr_seq_exame_w
		and	cd_convenio	= cd_convenio_w;
		exception
			when others then
				cd_proced_aux_w	:= null;
				ie_origem_aux_w	:= null;
		end;

		cd_procedimento_w	:= coalesce(cd_proced_aux_w,cd_procedimento_w);
		ie_origem_proced_w	:= coalesce(ie_origem_aux_w,ie_origem_proced_w);
	end if;

	select	coalesce(max(ie_situacao),'A')
	into STRICT	ie_situacao_w
	from	procedimento
	where	cd_procedimento		= cd_procedimento_w
	and	ie_origem_proced	= ie_origem_proced_w;

	if (ie_situacao_w = 'A') then

		if (coalesce(cd_procedimento_w::text, '') = '') and (coalesce(nr_atendimento_w,0) > 0) then
			select	a.ie_tipo_convenio,
					b.cd_convenio,
					b.cd_categoria,
					a.cd_estabelecimento,
					b.cd_plano_convenio
			into STRICT	ie_tipo_convenio_w,
					cd_convenio_w,
					cd_categoria_w,
					cd_estab_w,
					cd_plano_convenio_w
			from	atend_categoria_convenio b,
					atendimento_paciente a
			where	a.nr_atendimento	= nr_atendimento_w
			and		b.nr_atendimento	= a.nr_atendimento
			and		b.nr_seq_interno	= OBTER_ATECACO_ATendIMENTO(A.NR_ATendIMENTO);

			SELECT * FROM obter_exame_lab_convenio(nr_seq_exame_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, cd_estab_w, ie_tipo_convenio_w, nr_seq_proc_interno_w, cd_material_exame_w, cd_plano_convenio_w, cd_setor_atend_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w) INTO STRICT cd_setor_atend_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w;

		end if;

		begin
		select	coalesce(cd_setor_exclusivo,cd_setor_exclusivo_w)
		into STRICT	cd_setor_exclusivo_w
		from	procedimento
		where	cd_procedimento		= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w;
		exception
			when others then
				cd_setor_exclusivo_w := cd_setor_exclusivo_w;
		end;

		ie_gerar_setor_w := obter_se_gerar_setor_rotina(cd_estabelecimento_w, 924, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, nr_seq_exame_w, cd_setor_prescr_w,nm_usuario_p);

		/* Rafael em 28/2/8 OS81068 */

		if (coalesce(cd_setor_exclusivo_w::text, '') = '') and (ie_gerar_setor_w = 'S') then
			select	obter_setor_atend_proc(cd_estabelecimento_w, cd_procedimento_w, ie_origem_proced_w, null, cd_setor_prescr_w, nm_usuario_p, nr_seq_proc_interno_w,nr_atendimento_w)
			into STRICT	cd_setor_exclusivo_w
			;
		end if;
		
		if (coalesce(cd_setor_exclusivo_w::text, '') = '') and (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') then

			select	obter_setor_atend_proc_lab(cd_estabelecimento_w,cd_procedimento_w,ie_origem_proced_w, null,cd_setor_prescr_w,null,nr_seq_exame_w)
			into STRICT	cd_setor_exclusivo_w
			;

		end if;

		dt_prim_horario_proced_w	:= null;		
		
		if (coalesce(ie_dt_prescr_dt_exec_proc_w, 'N') <> 'S') then
			if	((coalesce(dt_procedimento_p::text, '') = '') or (dt_procedimento_p < dt_prescricao_w)) then
			select	Obter_data_prev_exec(dt_prescricao_w,dt_procedimento_p,coalesce(cd_setor_exclusivo_w,cd_setor_prescr_w), nr_prescricao_p, 'A')
			into STRICT	dt_primeiro_horario_w
			;
			
			dt_prim_horario_proced_w	:= dt_primeiro_horario_w;
			end if;
		else
			if (dt_inicio_prescr_w > dt_prescricao_w) then
				select	dt_prescricao + 1/1440
				into STRICT	dt_prescricao_w
				from	prescr_medica 
				where	nr_prescricao = nr_prescricao_p;
			end if;	
				
			dt_primeiro_horario_w		:= dt_prescricao_w;
			if (coalesce(hr_prim_horario_proced_w::text, '') = '') or (hr_prim_horario_proced_w	= '  :  ') then
				hr_prim_horario_proced_w	:= to_char(dt_prescricao_w, 'hh24:mi');
			end if;	
		end if;		



		if (dt_inicio_prescr_w between dt_prescricao_w and clock_timestamp()) and (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') and (coalesce(ie_dt_prescr_dt_exec_proc_w, 'N') = 'S') then
			dt_prim_horario_proced_w 	:= dt_inicio_prescr_w;
		elsif (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') and (coalesce(ie_dt_prescr_dt_exec_proc_w, 'N') = 'S') then
				dt_prim_horario_proced_w 	:= dt_prescricao_w;
		elsif (hr_prim_horario_proced_w <> '  :  ') and (hr_prim_horario_proced_w IS NOT NULL AND hr_prim_horario_proced_w::text <> '') then
				dt_prim_horario_proced_w	:=  PKG_DATE_UTILS.get_Time(dt_inicio_prescr_w, hr_prim_horario_proced_w);
				if (to_char(dt_prescricao_w,'dd/mm/yyyy hh24:mi') > to_char(dt_prim_horario_proced_w,'dd/mm/yyyy hh24:mi')) and (dt_prim_horario_proced_w < dt_validade_prescr_w) then
					dt_prim_horario_proced_w := dt_prim_horario_proced_w + 1;
				end if;
		end if;

		ie_se_necessario_ww := ie_se_necessario_w;
		
		if (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '') and (coalesce(ie_urgencia_w, 'N') = 'N') and (ie_check_tipo_interv_w = 'S') then
			select	coalesce(coalesce(max(ie_se_necessario),ie_se_necessario_w),'N'),
				coalesce(coalesce(max(ie_agora),ie_urgencia_w),'N'),
				coalesce(coalesce(max(ie_acm),ie_acm_w),'N')
			into STRICT	ie_se_necessario_w,
				ie_agora_w,
				ie_acm_proced_w
			from	intervalo_prescricao
			where	cd_intervalo = cd_intervalo_w;
			
			if (coalesce(VarCheckInterSN_w, 'N') = 'N') and (coalesce(ie_se_necessario_w, 'N') = 'S') and (coalesce(ie_se_necessario_ww, 'N') = 'N') then
				ie_se_necessario_w := 'N';
			end if;	
		elsif (ie_urgencia_w = 'S') then
			select	max(cd_intervalo)
			into STRICT	cd_intervalo_w
			from    intervalo_prescricao
			where   ie_situacao = 'A'
			and     ie_agora    = 'S'
			and 	cd_intervalo = cd_intervalo_w
			and     ((coalesce(cd_estabelecimento::text, '') = '') or (cd_estabelecimento = cd_estabelecimento_w))
			and     Obter_se_intervalo(cd_intervalo, 'P') = 'S'
			and     obter_se_exibe_intervalo(nr_prescricao_p,cd_intervalo, null) = 'S'
			order by coalesce(nr_seq_apresent,999),
				     ds_intervalo;
		end if;
		
		if (coalesce(ie_urgencia_w,ie_agora_w) = 'S') then
			dt_prim_horario_proced_w	:= clock_timestamp();
		elsif (ie_previsao_proced_w IS NOT NULL AND ie_previsao_proced_w::text <> '') then	/* Verificar se procedimento cadastrado com especificacao para a data prevista */
			if (ie_previsao_proced_w = 'DP') then		---- Data da prescricao (DP) 
				dt_prim_horario_proced_w := dt_prescricao_w;
			elsif (ie_previsao_proced_w = '2h') then	---- 2 horas apos a prescricao (2h)
				dt_prim_horario_proced_w := dt_prescricao_w + 2/24;
			elsif (ie_previsao_proced_w = '3h') then	---- 3 horas apos a prescricao (3h)
				dt_prim_horario_proced_w := dt_prescricao_w + 3/24;
			elsif (ie_previsao_proced_w = '6h') then	---- 6 horas apos a prescricao (6h)
				dt_prim_horario_proced_w := dt_prescricao_w + 6/24;
			elsif (ie_previsao_proced_w = '9h') then	---- 9 horas apos a prescricao (9h)
				dt_prim_horario_proced_w := dt_prescricao_w + 9/24;
			end if;
		end if;

		ds_horarios_proced_w 	:= '';
		nr_ocorrencia_proced_w 	:= 0;

		if (coalesce(ie_urgencia_w,ie_agora_w) = 'S') then
			dt_primeiro_horario_w	:= clock_timestamp();

			select	coalesce(max(obter_interv_acm_sn_agora_lib(cd_estabelecimento_w,1,2,'P',cd_procedimento_w,cd_intervalo_w,nr_prescricao_p,ie_origem_proced_w,nr_seq_proc_interno_w)),cd_intervalo_w)
			into STRICT	cd_intervalo_w
			;

		elsif (ie_previsao_proced_w IS NOT NULL AND ie_previsao_proced_w::text <> '') then	/* Verificar se procedimento cadastrado com especificacao para a data prevista */
			if (ie_previsao_proced_w = 'DP') then		---- Data da prescricao (DP) 
				dt_primeiro_horario_w := dt_prescricao_w;
			elsif (ie_previsao_proced_w = '3h') then	---- 3 horas apos a prescricao (3h)
				dt_primeiro_horario_w := dt_prescricao_w + 3/24;
			elsif (ie_previsao_proced_w = '6h') then	---- 6 horas apos a prescricao (6h)
				dt_primeiro_horario_w := dt_prescricao_w + 6/24;
			elsif (ie_previsao_proced_w = '9h') then	---- 9 horas apos a prescricao (9h)
				dt_primeiro_horario_w := dt_prescricao_w + 9/24;
			end if;
		end if;

		if ((coalesce(cd_intervalo_p, cd_intervalo_w) IS NOT NULL AND (coalesce(cd_intervalo_p, cd_intervalo_w))::text <> '')) then		
			select	max(qt_min_intervalo)
			into STRICT	qt_min_intervalo_w
			from	intervalo_prescricao
			where	cd_intervalo	= coalesce(cd_intervalo_p, cd_intervalo_w);
		end if;

		SELECT * FROM Calcular_Horario_Prescricao(nr_prescricao_p, cd_intervalo_w, coalesce(dt_procedimento_p,coalesce(dt_primeiro_horario_w,dt_prescricao_w)), coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)), nr_horas_validade_w, cd_procedimento_w, 0, qt_min_intervalo_w, nr_ocorrencia_proced_w, ds_horarios_proced_w, ds_horarios_proced2_w, 'N', null, null, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w) INTO STRICT nr_ocorrencia_proced_w, ds_horarios_proced_w, ds_horarios_proced2_w;

		ds_horarios_proced_w	:= ds_horarios_proced_w || ds_horarios_proced2_w;

		select	padroniza_horario_prescr(ds_horarios_proced_w, to_char(dt_inicio_prescr_w,'dd/mm/yyyy hh24:mi:ss'))
		into STRICT	ds_horarios_padrao_w
		;
		
		if (ieEliminaHorVigencia_w = 'S') and (ie_agora_w <> 'S') and (ds_horarios_padrao_w IS NOT NULL AND ds_horarios_padrao_w::text <> '') then			
			ds_horarios_proced_w	:= Eliminar_hor_vigencia_proc(ds_horarios_proced_w, cd_intervalo_w, dt_inicio_prescr_w,
									coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)),
									0, qt_min_intervalo_w, nr_prescricao_p,coalesce(ie_agora_w,'N'),coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)));
			if (ds_horarios_proced_w IS NOT NULL AND ds_horarios_proced_w::text <> '') and (ds_horarios_proced_w <> '') then
				nr_ocorrencia_proced_w := obter_ocorrencias_horarios_rep(ds_horarios_proced_w);
			end if;
		end if;


		select	max(obter_ctrl_glic_proc(nr_seq_proc_interno_w))
		into STRICT	ie_cig_w
		;

		if (ie_cig_w	= 'CIG') then		
			ds_horarios_proced_w 	:= to_char(coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)),'hh24:mi');
			nr_ocorrencia_proced_w	:= 1;
		end if;

		if (ie_se_necessario_w = 'S') then		
			ds_horarios_proced_w := 'SN';
		ELSif (ie_acm_proced_w = 'S') then		
			ds_horarios_proced_w := 'ACM';
		end if;

		if (ie_se_necessario_w = 'S') or (ie_acm_proced_w = 'S') then
			select	max(cd_setor_atendimento)
			into STRICT	cd_setor_atendimento_w
			from	prescr_medica
			where	nr_prescricao	= nr_prescricao_p;

			select	coalesce(max(b.qt_se_necessario),0),
				coalesce(max(b.ie_mesmo_zerado),'N')
			into STRICT	nr_ocorrencia_proced_w,
				ie_mesmo_zerado_w
			from	intervalo_prescricao a,
				intervalo_setor b
			where	a.cd_intervalo 		= b.cd_intervalo
			and	coalesce(b.cd_setor_atendimento,cd_setor_atendimento_w)	= cd_setor_atendimento_w
			and	coalesce(b.cd_estab, cd_estabelecimento_w)			= cd_estabelecimento_w
			and	a.cd_intervalo 		= cd_intervalo_w;

			if (coalesce(nr_ocorrencia_proced_w,0) = 0) and (ie_mesmo_zerado_w = 'N') then
				select	coalesce(max(qt_se_necessario),1)
				into STRICT	nr_ocorrencia_proced_w
				from	intervalo_prescricao
				where	cd_intervalo = cd_intervalo_w;
			end if;
		end if;

		nr_agrupamento_proc_w	:= nr_agrupamento_proc_w + 1;

		ds_dado_clinico_w	:= coalesce(ds_dado_clinico_w, substr(ds_dados_clinicos_p,1,2000));

                                --OS 967549

		--if	(nvl(nr_atendimento_w,0) > 0) and

		--	(nvl(nr_seq_pend_pac_acao_w,0) > 0) then			

		--	Select	nvl(obter_unidade_atendimento(nr_atendimento_w,'IA','CS'), obter_unidade_atendimento(nr_atendimento_w,'A','CS')) 

		--	into	cd_setor_exclusivo_w	

		--	from	dual;			

		--end if;

		--OS 967549
		if (coalesce(cd_medico_exec_w::text, '') = '') and (ie_medico_prescr_w = 'S') then
			select	max(cd_prescritor)
			into STRICT	cd_prescritor_w
			from	prescr_medica
			where	Obter_se_medico(cd_prescritor, 'M') = 'S'
			and		nr_prescricao	= nr_prescricao_p;
			
			cd_medico_exec_w	:= cd_prescritor_w;
			
		end if;

		if (coalesce(cd_setor_exclusivo_w::text, '') = '') and (ie_Gera_Setor_PrescrProc_w = 'S') and (obter_se_setor_exec(cd_setor_prescr_w, cd_estabelecimento_w, cd_procedimento_w,ie_origem_proced_w, nr_seq_proc_interno_w) = 'S') then
			cd_setor_exclusivo_w	:= cd_setor_prescr_w;
		end if;

		if	((coalesce(cd_setor_exclusivo_w::text, '') = '') or (coalesce(cd_setor_entrega_w::text, '') = '')) and (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') then

			cd_setor_atend_w2 := '';
			cd_setor_entrega_w2 := '';

			SELECT * FROM obter_setor_exame_lab(	nr_prescricao_p, nr_seq_exame_w, obter_setor_usuario(nm_usuario_p), null, null, 'S', cd_setor_atend_w2, cd_setor_col_w2, cd_setor_entrega_w2, qt_dia_entrega_w2, ie_emite_mapa_w2, ds_hora_fixa_w2, ie_data_resultado_w2, qt_min_entrega_w2, ie_atualizar_recoleta_w2, coalesce(ie_agora_w,'N'), ie_dia_semana_final_w2, ie_forma_atual_dt_result_w2, qt_min_atraso_w2) INTO STRICT cd_setor_atend_w2, cd_setor_col_w2, cd_setor_entrega_w2, qt_dia_entrega_w2, ie_emite_mapa_w2, ds_hora_fixa_w2, ie_data_resultado_w2, qt_min_entrega_w2, ie_atualizar_recoleta_w2, ie_dia_semana_final_w2, ie_forma_atual_dt_result_w2, qt_min_atraso_w2;

				if	coalesce(cd_setor_exclusivo_w::text, '') = '' then				
					cd_setor_exclusivo_w := gerar_setor_exame_lab(cd_setor_atend_w2);
				end if;

				if	coalesce(cd_setor_entrega_w::text, '') = '' then
					cd_setor_entrega_w := trunc((replace(replace(cd_setor_entrega_w2,'(',''), ')',''))::numeric );
				end if;

		end if;
		
		
		
		begin
		nr_doc_convenio_w := null;
		SELECT * FROM tiss_obter_guia(4, null,  --Conta
				nr_doc_convenio_w, 'N',  --Se e honorario ou nao
				null,  --Medico honorario
				null,  --CGC Prestador
				null,  --Responsavel credito 
				null,  --funcao medico
				null,  --CBO
				ie_guia_w,  -- Regra retornada
				null,  --Pedido
				nr_prescricao_p,  --Prescricao
				null,  --Senha
				cd_setor_exclusivo_w,  -- Setor atendimento
				null,  --Medico requerido
				nr_prescricao_p,  --Numero da prescricao de procedimento
				null,  --Medico solicitante da prescricao
				null,  --Data referencia
				null,  --Funcionario
				null,  --Sequencia do material
				null,  --Sequencia do procedimento
				null,  --numero prescr material
				cd_procedimento_w,  --Codigo do procedimento
				ie_origem_proced_w,  --Origem proced
				null,  -- Seq registro medico de faturamento
				null) INTO STRICT 
				nr_doc_convenio_w, 
				ie_guia_w; -- Seq pedido exame;
		exception
		when others then
			nr_doc_convenio_w := null;
		end;
		
		SELECT * FROM consiste_plano_convenio(nr_atendimento_w, cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, clock_timestamp(), qt_procedimento_w, ie_tipo_atendimento_w, cd_plano_convenio_w, '', ds_erro_autorizacao_w, cd_setor_exclusivo_w, nr_seq_exame_w, ie_regra_w, null, nr_seq_regra_w, nr_seq_proc_interno_w, cd_categoria_w, cd_estabelecimento_w, cd_setor_entrega_w, cd_medico_exec_w, cd_pessoa_fisica_prescr_w, ie_glosa_w, nr_seq_regra_ajuste_w, nr_prescricao_p, null) INTO STRICT ds_erro_autorizacao_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, nr_seq_regra_ajuste_w;

		ie_autorizacao_w := 'L';
		
		if (ie_regra_w in (1,2)) then
			ie_autorizacao_w := 'B';
		elsif (ie_regra_w in (3,6,7)) then
			ie_autorizacao_w := 'PA';
		end if;
		
		select 	coalesce(max(nr_sequencia),0) + 1
		into STRICT 	nr_seq_proc_novo_w
		from 	prescr_procedimento
		where	nr_prescricao = nr_prescricao_p;
		
		insert into prescr_procedimento(
			nr_prescricao,
			nr_sequencia,
			nr_agrupamento,
			cd_procedimento,
			qt_procedimento,
			dt_atualizacao,
			nm_usuario,
			ds_observacao,
			cd_motivo_baixa,
			ie_origem_proced,
			cd_intervalo,
			ie_urgencia,
			ie_suspenso,
			cd_setor_atendimento,
			dt_prev_execucao,
			cd_material_exame,
			nr_seq_exame,
			ie_status_atend,
			ie_amostra,
			ie_origem_inf,
			ie_se_necessario,
			ie_acm,
			ds_horarios,
			nr_ocorrencia,
			ds_material_especial,
			nr_seq_interno,
			nr_seq_proc_interno,
			ds_dado_clinico,
			ie_avisar_result,
			cd_protocolo,
			nr_seq_protocolo,
			nr_seq_proc_protocolo,
			ie_lado,
			ie_respiracao,
			cd_mod_vent,
			ie_disp_resp_esp,
			qt_fluxo_oxigenio,
			qt_min_intervalo,
			nr_seq_prot_glic,
			ie_objetivo_onco,
			ie_executar_leito,
			nr_seq_contraste,
			ds_exame_fis_achado_cirur,
			ds_resumo_clinico,
			cd_setor_coleta,
			cd_setor_entrega,
			ds_rotina,
			cd_medico_exec,
			ds_diag_provavel_ap,
			ds_exame_anterior_ap,
			ds_localizacao_lesao,
			ds_tempo_doenca,
			cd_cgc_laboratorio,
			qt_frasco_env,
			nr_seq_proc_int_cirur,
			qt_peca_ap,
			nr_seq_amostra_princ,
			ds_qualidade_peca_ap,
			ie_forma_exame,
			cd_pessoa_coleta,
			ds_justificativa,
			nr_seq_topografia,
			nr_doc_convenio,
			ie_autorizacao)
		values (
			nr_prescricao_p,
			nr_seq_proc_novo_w,
			nr_agrupamento_proc_w,
			cd_procedimento_w,
			qt_procedimento_w,
			clock_timestamp(),
			nm_usuario_p,
			ds_observacao_w,
			0,
			ie_origem_proced_w,
			cd_intervalo_w,
			coalesce(ie_urgencia_w,ie_agora_w),
			'N',
			cd_setor_exclusivo_w,
			coalesce(dt_prim_horario_proced_w,coalesce(dt_procedimento_p,dt_primeiro_horario_w)),
			cd_material_exame_w,
			nr_seq_exame_w,
			5,
			coalesce(ie_amostra_w,'N'),
			'1',
			ie_se_necessario_w,
			ie_acm_proced_w,
			ds_horarios_proced_w,
			nr_ocorrencia_proced_w,
			ds_material_especial_w,
			nextval('prescr_procedimento_seq'),
			nr_seq_proc_interno_w,
			ds_dado_clinico_w,
			'N',
			cd_protocolo_p,
			nr_sequencia_p,
			nr_seq_proc_prot_w,
			ie_lado_w,
			ie_respiracao_w,
			cd_mod_vent_w,
			ie_disp_resp_esp_w,
			qt_fluxo_oxigenio_w,
			CASE WHEN qt_min_intervalo_w=0 THEN null  ELSE qt_min_intervalo_w END ,
			nr_seq_prot_glic_w,
			ie_objetivo_onco_w,
			ie_executar_leito_w,
			nr_seq_contraste_w,
			ds_exame_fis_achado_cirur_w,
			ds_resumo_clinico_w,
			cd_setor_coleta_w,
			cd_setor_entrega_w,
			ds_prescricao_w,
			cd_medico_exec_w,
			ds_diag_provavel_ap_w,
			ds_exame_anterior_ap_w,
			ds_localizacao_lesao_w,
			ds_tempo_doenca_w,
			cd_cgc_laboratorio_w,
			qt_frasco_env_w,
			nr_seq_proc_int_cirur_w,
			qt_peca_ap_w,
			nr_seq_amostra_princ_w,
			ds_qualidade_peca_ap_w,
			ie_forma_exame_w,
			cd_pessoa_coleta_w,
			ds_justificativa_w,
			nr_seq_topografia_ww,
			nr_doc_convenio_w, 
			ie_autorizacao_w);
			
		add_log_dt_prev_execucao(
			nr_linha_p		=> $$plsql_line,
			nr_seq_proc_p	=> nr_seq_proc_novo_w,
			ds_log_p		=> 'dt_prim_horario_proced_w:'||to_char(dt_prim_horario_proced_w, c_fmt_data)||'|dt_procedimento_p:'||to_char(dt_procedimento_p, c_fmt_data)||'|dt_primeiro_horario_w:'||to_char(dt_primeiro_horario_w, c_fmt_data));
			
		if (cd_kit_material_w IS NOT NULL AND cd_kit_material_w::text <> '') then
			CALL Gerar_Kit_Proced_manual(cd_estabelecimento_w, nr_prescricao_p, nr_seq_proc_novo_w, cd_kit_material_w, nm_usuario_p);
		end if;

		select	coalesce(max(ie_glicemia_mentor),'N')
		into STRICT	ie_prot_glic_mentor_w
		from	protocolo_medicacao
		where	cd_protocolo = cd_protocolo_p
		and		nr_sequencia = nr_sequencia_p;
		
		select	count(*)
		into STRICT	qt_prescr_atend_w
		from	prescr_medica
		where	nr_atendimento = nr_atendimento_w;
						
		if	((ie_prescr_proc_sem_lib_w = 'S') or
			 ((coalesce(nr_seq_pend_pac_acao_w,0) > 0) and (coalesce(ie_prot_glic_mentor_w,'N') = 'S') and (coalesce(nr_seq_prot_glic_w,0) > 0) and (coalesce(qt_prescr_atend_w,0) = 1))) then			
			CALL Gerar_prescr_proc_sem_dt_lib(nr_prescricao_p,nr_seq_proc_novo_w,cd_perfil_w,'N',nm_usuario_p);
		end if;

		CALL Inserir_mat_prescr_prot(nr_prescricao_p, cd_protocolo_p, nr_sequencia_p,0,
					5, 0, nr_seq_proc_prot_w, 0, null,
					nr_seq_proc_novo_w, null, cd_intervalo_w, qt_protocolo_p, nm_usuario_p, coalesce(ie_urgencia_w,'N'),coalesce(qt_peso_p,0),hr_prim_horario_p,0,0, null,null,null, null,null,null, null,null,null,null,null,null,null,'S',null,null,null,null, null,null,null, null,null,null,null,null);
		CALL Gerar_Prescr_Proc_Glic(nr_prescricao_p, nr_seq_proc_novo_w, nr_seq_prot_glic_w, nm_usuario_p);
		CALL Gerar_Med_Mat_Assoc_Glic(nr_prescricao_p, nr_seq_proc_novo_w, nr_seq_prot_glic_w);
		ds_erro_w := consistir_prescr_procedimento(nr_prescricao_p, nr_seq_proc_novo_w, nm_usuario_p, 0, ds_erro_w);		
		
		select	coalesce(max(ie_glicemia_mentor),'N')
		into STRICT	ie_prot_glic_mentor_w
		from	protocolo_medicacao
		where	cd_protocolo = cd_protocolo_p
		and		nr_sequencia = nr_sequencia_p;		
		
		if (coalesce(nr_seq_prot_glic_w,0) > 0) and (coalesce(nr_seq_pend_pac_acao_w,0) > 0) and (coalesce(ie_prot_glic_mentor_w,'N') = 'S') then
			
			if (coalesce(ie_acm_proced_w,'N') = 'S') or (coalesce(ie_se_necessario_w,'N') = 'S') then
				ie_acm_sn_w	:= 'S';
			end if;
			
			SELECT * FROM Aprazar_item_prescr('N', obter_estab_atend(nr_atendimento_w), nr_atendimento_w, 'G', nr_horas_validade_w, cd_procedimento_w, cd_intervalo_w, qt_procedimento_w, dt_inicio_prescr_w, to_char(nr_prescricao_p), nr_prescricao_p, nr_seq_proc_novo_w, 'N', null, wheb_mensagem_pck.get_texto(307600),  -- Realizado pelo sistema
								nm_usuario_p, ie_inconsistencia_w, ds_inconsistentes_w, nr_seq_proc_interno_w, null, ie_acm_sn_w, null, null, 'N', null, nr_seq_prot_glic_w, null, null, '', null) INTO STRICT ie_inconsistencia_w, ds_inconsistentes_w;
			
		end if;

	end if;

	exception
		when others then			
			ds_erro_w	:= substr(sqlerrm(SQLSTATE),1,255);			
			--Erro na Inclusao dos Procedimentos da Prescricao Medica #@DS_ERRO#@
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(176615,'DS_ERRO='||ds_erro_w);
	end;

end loop;
close C03;

if (ie_kit_automatico_w = 'S') then
	CALL GERAR_KIT_PROCEDIMENTO(cd_estabelecimento_w, nr_prescricao_p, null, nm_usuario_p);
end if;

-- Inserir materiais
CALL Inserir_mat_prescr_prot(nr_prescricao_p, cd_protocolo_p, nr_sequencia_p,0,
			2, 0, 0, 0, null, null, null, cd_intervalo_p, qt_protocolo_p, nm_usuario_p, coalesce(ie_urgencia_p,'N'),coalesce(qt_peso_p,0),hr_prim_horario_p,0,0, null,null,null, null,null,null, null,null,null,null,null,'N',null,'S',null,null,null,null, null,null,null, null,null,null,null,null);

-- Inserir medicamentos
if	((ie_tipo_atendimento_w = 1) and (ie_medic_internado_w = 'S') or (ie_medic_internado_w = 'N')) then
	CALL Inserir_mat_prescr_prot(nr_prescricao_p, cd_protocolo_p, nr_sequencia_p,0,
			1, 0, 0, 0, null, null, null, cd_intervalo_p, qt_protocolo_p, nm_usuario_p, coalesce(ie_urgencia_p,'N'),coalesce(qt_peso_p,0),hr_prim_horario_p,0,0, null,null,null, null,null,null, null,null,null,null,null,'N',null,'S',null,null,null,null,  null,null,null, null,null,null,null,null);
end if;

-- Inserir Suplemento oral
CALL Inserir_mat_prescr_prot(nr_prescricao_p, cd_protocolo_p, nr_sequencia_p, 0,
			12, 0, 0, 0, null, null, null, cd_intervalo_p, qt_protocolo_p, nm_usuario_p, coalesce(ie_urgencia_p,'N'),coalesce(qt_peso_p,0),hr_prim_horario_p,0,0, null,null,null, null,null,null, null,null,null,null,null,'N',null,'S',null,null,null,null,  null,null,null, null,null,null,null,null);

-- Inserir Suporte Nutricional Enteral
CALL Inserir_mat_prescr_prot(nr_prescricao_p, cd_protocolo_p, nr_sequencia_p, 0,
			8, 0, 0, 0, null, null, null, cd_intervalo_p, qt_protocolo_p, nm_usuario_p, coalesce(ie_urgencia_p,'N'),coalesce(qt_peso_p,0),hr_prim_horario_p,0,0, null,null,null, null,null,null, null,null,null,null,null,'N',null,'S',null,null,null,null,  null,null,null, null,null,null,null,null);

-- Inserir Dispositivos Protocolo
CALL Gerar_dispositivo_protocolo(cd_protocolo_p, nr_atendimento_w, nr_sequencia_p, nm_usuario_p);

--Inserir Leites
CALL gerar_leite_protocolo(nr_prescricao_p, cd_protocolo_p, 	nr_sequencia_p, nm_usuario_p, cd_perfil_w);

-- Atualizar os reconstituintes, diluente e rediluentes do medicamento ---
open C04;
loop
	fetch C04 into
		nr_seq_material_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
	CALL ajustar_prescr_material(nr_prescricao_p, nr_seq_material_w);
end loop;
close C04;

-- Atualizar os medicamentos dos procedimentos ---
open C05;
loop
	fetch C05 into
		nr_seq_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
	--ajustar_prescr_mat_proc(nr_prescricao_p, nr_seq_procedimento_w);

	--Gerar_med_mat_assoc(nr_prescricao_p,nr_seq_procedimento_w);
	CALL Gerar_prescr_proc_assoc(nr_prescricao_p,nr_seq_procedimento_w, nm_usuario_p);
	CALL ajustar_prescr_mat_proc(nr_prescricao_p, nr_seq_procedimento_w, cd_perfil_w,null);
end loop;
close C05;

-- Fazer o calculo automatico da solucao
open C06;
loop
fetch C06 into
	nr_seq_solucao_w,
	nr_etapas_w,
	qt_tempo_aplicacao_w,
	qt_dosagem_w,
	ie_tipo_dosagem_w,
	ie_esquema_alternado_w,
	cd_intervalo_w,
	qt_hora_fase_w,
	ie_aberta_ww,
	ie_sol_intermitente_ww,
	ie_acm_sol_w,
	ie_se_necessario_Sol_w;
EXIT WHEN NOT FOUND; /* apply on c06 */
	qt_total_etapa_w	:= 0;
	open C07;
	loop
	fetch C07 into
		cd_material_w,
		qt_dose_w,
		cd_unidade_medida_dose_w,
		nr_sequencia_w,
		ds_dose_diferenciada_w;
	EXIT WHEN NOT FOUND; /* apply on C07 */

		if (ie_esquema_alternado_w = 'S') then
			qt_dose_w := obter_valor_dinamico('select ('|| REPLACE(ds_dose_diferenciada_w,'-','+')||') from dual ', qt_dose_w);
		end if;
		qt_dose_ml_w		:= obter_conversao_ml(cd_material_w,qt_dose_w,cd_unidade_medida_dose_w);
		qt_total_etapa_w	:= qt_total_etapa_w + qt_dose_ml_w;

		update	prescr_material
		set		qt_solucao	= qt_dose_ml_w
		where	nr_prescricao	= nr_prescricao_p
		and		nr_sequencia	= nr_sequencia_w;
	end loop;
	close C07;
	
	if (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '') and (ie_etapa_interv_w = 'S') then
		SELECT * FROM Calcular_etapas_interv_solucao(cd_intervalo_w, qt_tempo_aplicacao_w, ie_arredondar_etapas_w, qt_hora_fase_w, nr_etapas_w, null, null) INTO STRICT qt_hora_fase_w, nr_etapas_w;
	end if;
	
	if (ie_esquema_alternado_w = 'N') and (coalesce(nr_etapas_w,0)		> 0) then
		qt_total_etapa_w	:= qt_total_etapa_w * nr_etapas_w;
	end if;
	
	update	prescr_solucao
	set		qt_volume			= dividir(qt_total_etapa_w,nr_etapas_w),
			qt_solucao_total	= qt_total_etapa_w,
			qt_hora_fase		= CASE WHEN ie_sol_intermitente_ww='N' THEN qt_hora_fase_w  ELSE qt_hora_fase END ,--dividir(qt_tempo_aplicacao_w,nr_etapas_w)
			nr_etapas			= nr_etapas_w
	where	nr_seq_solucao		= nr_seq_solucao_w
	and		nr_prescricao 		= nr_prescricao_p;
	
	qt_dosagem_final_w := Calcular_volume_total_solucao(UPPER(ie_tipo_dosagem_w), qt_tempo_aplicacao_w, qt_total_etapa_w, qt_dosagem_w, nr_prescricao_p, nr_seq_solucao_w, 1, qt_dosagem_final_w, ie_arredondar_w, nr_etapas_w, ie_vel_etapa_w);
	update	prescr_solucao
	set		qt_dosagem		= qt_dosagem_final_w
	where	((ie_recalc_vel_inf_w = 'S') or (coalesce(qt_dosagem,0) = 0))
	and		nr_seq_solucao		= nr_seq_solucao_w
	and		nr_prescricao 		= nr_prescricao_p;
	
	select max(qt_dosagem)
	into STRICT   qt_dosagem_ww
	from   prescr_solucao
	where  nr_seq_solucao		= nr_seq_solucao_w
	and	   nr_prescricao 		= nr_prescricao_p;
	
	if (coalesce(nr_etapas_w,0)	= 0) and (ie_etapa_interv_w <> 'S') then
		SELECT * FROM Calcular_Valores_Solucao(nr_prescricao_p, nr_seq_solucao_w, qt_dosagem_ww, ie_tipo_dosagem_w, ie_Calcula_Etapa_w, ie_Calcula_Vol_Veloc_w, ie_Calcula_Tempo_Sol_w, ie_arredondar_etapas_w, nm_usuario_p, qt_tempo_aplicacao_w, qt_solucao_total_w, nr_etapas_w, qt_tempo_aplicacao_w, 'N') INTO STRICT qt_solucao_total_w, nr_etapas_w, qt_tempo_aplicacao_w;
		
		if (coalesce(qt_tempo_aplicacao_w,0)	> 0) and (coalesce(nr_etapas_w,0)	> 0) then
			qt_hora_fase_w	:= dividir(qt_tempo_aplicacao_w,nr_etapas_w);
		end if;
		
		update	prescr_solucao
		set	nr_etapas				= nr_etapas_w,
			QT_HORA_FASE			= qt_hora_fase_w
		where	nr_seq_solucao		= nr_seq_solucao_w
		and		nr_prescricao 		= nr_prescricao_p;

		if	((ie_gera_horarios_ACM_w	= 'N' AND ie_acm_sol_w			= 'S') or
			 (ie_gera_horarios_SN_w	= 'N' AND ie_se_necessario_Sol_w	= 'S')) then
			hr_prim_hor_sol_w	:= null;
			ds_horarios_sol_w	:= null;
			ie_atualizar_hor_sol_w := 'N';
		else
			ie_atualizar_hor_sol_w := 'S';
		end if;

		if (ie_atualizar_hor_sol_w = 'S') then
			SELECT * FROM Calcula_Horarios_Etapas(PKG_DATE_UTILS.get_Time(dt_primeiro_horario_sol_w, hr_prim_hor_sol_w), coalesce(nr_etapas_w,0), coalesce(qt_hora_fase_w,0), nm_usuario_p, 'N', qt_tempo_aplicacao_w, ds_horarios_sol_w, ds_horarios_sol_2w, ie_etapa_especial_w, 'N') INTO STRICT ds_horarios_sol_w, ds_horarios_sol_2w;
			
			update prescr_solucao
			set    ds_horarios 			= ds_horarios_sol_w
			where  nr_seq_solucao		= nr_seq_solucao_w
			and	   nr_prescricao 		= nr_prescricao_p;
			
		end if;
		
		if (coalesce(nr_etapas_w,0) > 0) then
			qt_total_etapa_w := qt_total_etapa_w * nr_etapas_w;
			
			update prescr_solucao
			set	   qt_solucao_total 	= qt_total_etapa_w
			where  nr_seq_solucao		= nr_seq_solucao_w
			and	   nr_prescricao 		= nr_prescricao_p;
		end if;
	end if;	
	
	if (coalesce(ie_aberta_ww,'N') = 'S') then
		update	prescr_solucao
		set	nr_etapas		    	 = 1,
			qt_tempo_aplicacao		= '',
			qt_hora_fase			= ''
		where	nr_prescricao 		= nr_prescricao_p
		and		nr_seq_solucao		= nr_seq_solucao_w;
	end if;

end loop;
close C06;

-- Atualizar os medicamentos das solucoes ---
open C08;
loop
	fetch C08 into
		nr_seq_solucao_w;
	EXIT WHEN NOT FOUND; /* apply on C08 */
	begin
	CALL Ajustar_Prescr_Mat_Solucao(nr_prescricao_p, nr_seq_solucao_w);

	/*update para chamar a trigger e ajustar o volume da etapa.*/

	update	prescr_solucao
	set		dt_atualizacao	= dt_atualizacao
	where	nr_prescricao	= nr_prescricao_p
	and	nr_seq_solucao	= nr_seq_solucao_w;
	end;
end loop;
close C08;
		
if (ds_log_dt_prev_execucao_w IS NOT NULL AND ds_log_dt_prev_execucao_w::text <> '' AND ie_log_dt_prev_execucao_w = 'S') then
	CALL gerar_log_prescricao(
		nr_prescricao_p		=> nr_prescricao_p,
		nr_seq_item_p		=> null,
		ie_agrupador_p		=> null,
		nr_seq_horario_p	=> null,
		ie_tipo_item_p		=> null,
		ds_log_p			=> 'Rastreabilidade DT_PREV_EXECUCAO '||ds_log_dt_prev_execucao_w,
		nm_usuario_p		=> wheb_usuario_pck.get_nm_usuario,
		nr_seq_objeto_p		=> 2870,
		ie_commit_p			=> 'N');
end if;

CALL reordenar_medicamento(nr_prescricao_p);
CALL Reordenar_Solucoes(nr_prescricao_p);
CALL Reordenar_Procedimento(nr_prescricao_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE inserir_item_protocolo_prescr ( nr_prescricao_p bigint, cd_protocolo_p bigint, nr_sequencia_p bigint, cd_intervalo_p text, qt_protocolo_p bigint, nm_usuario_p text, ie_urgencia_p text, dt_procedimento_p timestamp, hr_prim_horario_p text, ds_dados_clinicos_p text, qt_peso_p bigint, nr_seq_pend_pac_acao_p bigint default null) FROM PUBLIC;

