-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_reenvio_trans ( nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_lote_p bigint, nm_usuario_p text, nr_seq_lote_novo_p INOUT bigint) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar lote de reenvio das transações do SCS pela função OPS - Manutenção de Processos Operacionais do Autorizador.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_pedido_reenv_w		bigint;
ie_tipo_guia_w			varchar(255);
nr_seq_prestador_exec_w		bigint;
nr_seq_segurado_w		bigint;
ie_tipo_item_w			varchar(255);
cd_proc_mat_w			varchar(255);
ds_proc_mat_w			varchar(255);
qt_aprovada_w			bigint;

C01 CURSOR FOR
	SELECT	'P',
		to_char(cd_procedimento),
		substr(obter_descricao_procedimento(cd_procedimento,ie_origem_proced),1,255),
		qt_solicitado
	from	pls_requisicao_proc
	where	nr_seq_requisicao	= nr_seq_requisicao_p
	
union

	SELECT	'M',
		substr(pls_obter_seq_codigo_material(nr_seq_material,''),1,255),
		substr(pls_obter_desc_material(nr_seq_material),1,255),
		qt_solicitado
	from	pls_requisicao_mat
	where	nr_seq_requisicao	= nr_seq_requisicao_p;

C02 CURSOR FOR
	SELECT	'P',
		to_char(cd_procedimento),
		substr(obter_descricao_procedimento(cd_procedimento,ie_origem_proced),1,255),
		qt_solicitada
	from	pls_guia_plano_proc
	where	nr_seq_guia	= nr_seq_guia_p
	
union

	SELECT	'M',
		substr(pls_obter_seq_codigo_material(nr_seq_material,''),1,255),
		substr(pls_obter_desc_material(nr_seq_material),1,255),
		qt_solicitada
	from	pls_guia_plano_mat
	where	nr_seq_guia	= nr_seq_guia_p;


BEGIN

if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
	select	nr_seq_segurado,
		nr_seq_prestador_exec,
		ie_tipo_guia
	into STRICT	nr_seq_segurado_w,
		nr_seq_prestador_exec_w,
		ie_tipo_guia_w
	from	pls_requisicao
	where	nr_sequencia	= nr_seq_requisicao_p;
elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
	select	nr_seq_segurado,
		nr_seq_prestador,
		ie_tipo_guia
	into STRICT	nr_seq_segurado_w,
		nr_seq_prestador_exec_w,
		ie_tipo_guia_w
	from	pls_guia_plano
	where	nr_sequencia	= nr_seq_guia_p;
end if;

if (coalesce(nr_seq_lote_p::text, '') = '') then
	select	nextval('pls_lote_reenvio_scs_seq')
	into STRICT	nr_seq_lote_novo_p
	;

	insert	into pls_lote_reenvio_scs(nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
		 dt_reenvio, nm_usuario, nm_usuario_nrec)
	values (nr_seq_lote_novo_p, clock_timestamp(), clock_timestamp(),
		 clock_timestamp(), nm_usuario_p, nm_usuario_p);
elsif (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	select	nextval('pls_pedido_reenvio_scs_seq')
	into STRICT	nr_seq_pedido_reenv_w
	;

	insert	into pls_pedido_reenvio_scs(nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,
		 ie_tipo_guia, nm_usuario, nm_usuario_nrec,
		 nr_seq_lote_reenvio, nr_seq_prestador, nr_seq_requisicao,
		 nr_seq_guia, nr_seq_segurado, ie_estagio)
	values (nr_seq_pedido_reenv_w, clock_timestamp(), clock_timestamp(),
		 ie_tipo_guia_w, nm_usuario_p, nm_usuario_p,
		 nr_seq_lote_p, nr_seq_prestador_exec_w, nr_seq_requisicao_p,
		 nr_seq_guia_p, nr_seq_segurado_w, 1);

	if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
		open C01;
		loop
		fetch C01 into
			ie_tipo_item_w,
			cd_proc_mat_w,
			ds_proc_mat_w,
			qt_aprovada_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			insert	into pls_itens_reenvio_scs(nr_sequencia, cd_proc_mat, ds_proc_mat,
				 dt_atualizacao, dt_atualizacao_nrec, ie_tipo_item,
				 nm_usuario, nm_usuario_nrec, nr_seq_ped_reenvio_scs,
				 qt_aprovado)
			values (nextval('pls_itens_reenvio_scs_seq'), cd_proc_mat_w, ds_proc_mat_w,
				 clock_timestamp(), clock_timestamp(), ie_tipo_item_w,
				 nm_usuario_p, nm_usuario_p, nr_seq_pedido_reenv_w,
				 qt_aprovada_w);
			end;
		end loop;
		close C01;
	elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
		open C02;
		loop
		fetch C02 into
			ie_tipo_item_w,
			cd_proc_mat_w,
			ds_proc_mat_w,
			qt_aprovada_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			insert	into pls_itens_reenvio_scs(nr_sequencia, cd_proc_mat, ds_proc_mat,
				 dt_atualizacao, dt_atualizacao_nrec, ie_tipo_item,
				 nm_usuario, nm_usuario_nrec, nr_seq_ped_reenvio_scs,
				 qt_aprovado)
			values (nextval('pls_itens_reenvio_scs_seq'), cd_proc_mat_w, ds_proc_mat_w,
				 clock_timestamp(), clock_timestamp(), ie_tipo_item_w,
				 nm_usuario_p, nm_usuario_p, nr_seq_pedido_reenv_w,
				 qt_aprovada_w);
			end;
		end loop;
		close C02;
	end if;

	CALL pls_gravar_hist_reenvio_scs(nr_seq_guia_p, nr_seq_requisicao_p, nm_usuario_p);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_reenvio_trans ( nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_lote_p bigint, nm_usuario_p text, nr_seq_lote_novo_p INOUT bigint) FROM PUBLIC;

