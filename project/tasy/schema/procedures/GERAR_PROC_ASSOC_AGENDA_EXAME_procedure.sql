-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proc_assoc_agenda_exame ( nr_seq_agenda_p bigint, cd_estabelecimento_p bigint, nr_seq_proc_interno_p bigint, nm_usuario_p text) AS $body$
DECLARE


qt_idade_pac_w		double precision;
qt_idade_min_w		real;
qt_idade_max_w		real;
nr_seq_proc_int_adic_w 	bigint;
cd_proced_adic_w	bigint;
ie_origem_proc_adic_w 	bigint;
cd_convenio_w		integer;
ie_tipo_regra_w		varchar(1);
ie_origem_proc_filtro_w	bigint;
ie_tipo_convenio_w	smallint;
cd_categoria_w		varchar(10);
cd_medico_w		varchar(10);
nr_sequencia_w		agenda_paciente_proc.nr_seq_agenda%type;
ie_proced_vinculado_w	varchar(1);
qt_proc_adic_w		proc_int_proc_prescr.qt_proc_adic%type;
ds_retorno_w		varchar(4000);
cd_plano_w		convenio_plano.cd_plano%type;
cd_medico_exec_w	agenda_paciente.cd_medico_exec%type;

ie_lancar_proc_assoc_w		varchar(1);

C01 CURSOR FOR
	
	SELECT	a.nr_seq_proc_int_adic,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.ie_tipo_regra,
		a.ie_proced_vinculado,
		coalesce(a.qt_proc_adic, 1)
	from	proc_int_proc_prescr a
	where	coalesce(a.cd_convenio,cd_convenio_w) = cd_convenio_w
	and		coalesce(a.cd_categoria_convenio,cd_categoria_w) = cd_categoria_w
	and		Obter_conv_excluir_proc_assoc(nr_sequencia, cd_convenio_w)	= 'S'
	and		((coalesce(a.cd_estabelecimento::text, '') = '') or (cd_estabelecimento = cd_estabelecimento_p))
	and	((coalesce(a.cd_medico_prescritor::text, '') = '') or (a.cd_medico_prescritor = cd_medico_w))
	and	((coalesce(a.cd_medico_excluir::text, '') = '') or (a.cd_medico_excluir <> cd_medico_w))
	and	coalesce(a.ie_situacao,'A')	= 'A'
	and		((coalesce(cd_perfil::text, '') = '') or (cd_perfil = obter_perfil_ativo))
	and	coalesce(a.ie_somente_agenda_cir,'N') = 'N'
	and 	((a.ie_origem_proc_filtro = ie_origem_proc_filtro_w) or (coalesce(a.ie_origem_proc_filtro::text, '') = ''))
	and	(((coalesce(qt_idade_pac_w::text, '') = '') or (coalesce(a.qt_idade_min::text, '') = '' and coalesce(a.qt_idade_max::text, '') = '')) or
		((qt_idade_pac_w IS NOT NULL AND qt_idade_pac_w::text <> '') and (qt_idade_pac_w between coalesce(a.qt_idade_min,qt_idade_pac_w) and
		coalesce(a.qt_idade_max,qt_idade_pac_w))))
	and	nr_seq_proc_interno = nr_seq_proc_interno_p
	and	not exists( SELECT	1
			    from	agenda_paciente_proc b
			    where	b.nr_sequencia = nr_seq_agenda_p
			    and		((b.cd_procedimento = a.cd_procedimento) or (b.nr_seq_proc_interno = a.nr_seq_proc_int_adic)))
	and	coalesce(a.ie_somente_agenda_int,'N') = 'N';
	

BEGIN

ie_lancar_proc_assoc_w := Obter_Param_Usuario(820, 121, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_lancar_proc_assoc_w);

select	max(qt_idade_paciente),
	max(cd_medico),
	max(cd_convenio),
	max(cd_categoria),
	max(cd_plano),
	max(cd_medico_exec)
into STRICT	qt_idade_pac_w,
	cd_medico_w,
	cd_convenio_w,
	cd_categoria_w,
	cd_plano_w,
	cd_medico_exec_w
from	agenda_paciente
where	nr_sequencia = nr_seq_agenda_p;

if (ie_lancar_proc_assoc_w = 'E') then
	cd_medico_w := cd_medico_exec_w;
end if;

select 	max(ie_tipo_convenio)
into STRICT	ie_tipo_convenio_w
from 	convenio
where 	cd_convenio = cd_convenio_w;

ie_origem_proc_filtro_w:= Obter_Origem_Proced_Cat(cd_estabelecimento_p, null, ie_tipo_convenio_w, cd_convenio_w, cd_categoria_w);

open C01;
loop
fetch C01 into
	nr_seq_proc_int_adic_w,
	cd_proced_adic_w,
	ie_origem_proc_adic_w,
	ie_tipo_regra_w,
	ie_proced_vinculado_w,
	qt_proc_adic_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
		select	coalesce(max(nr_seq_agenda),0)+1
		into STRICT	nr_sequencia_w
		from	agenda_paciente_proc
		where	nr_sequencia = nr_seq_agenda_p;
		
		if (coalesce(cd_proced_adic_w::text, '') = '' or
			coalesce(ie_origem_proc_adic_w::text, '') = '') then
			
				SELECT * FROM obter_proc_tab_interno_conv(
						nr_seq_proc_int_adic_w, cd_estabelecimento_p, cd_convenio_w, cd_categoria_w, cd_plano_w, null, cd_proced_adic_w, ie_origem_proc_adic_w, null, clock_timestamp(), null, null, null, null, null, null, null, null) INTO STRICT cd_proced_adic_w, ie_origem_proc_adic_w;	

		end if;	
		
		if (cd_proced_adic_w IS NOT NULL AND cd_proced_adic_w::text <> '' AND ie_origem_proc_adic_w IS NOT NULL AND ie_origem_proc_adic_w::text <> '') then
			insert into agenda_paciente_proc(nr_sequencia,
							 nr_seq_agenda,
							 dt_atualizacao,
							 nm_usuario,
							 cd_procedimento,
							 ie_origem_proced,
							 nr_seq_proc_interno,
							 cd_medico,
							 nr_seq_agenda_princ,
							 qt_procedimento)
						values (nr_seq_agenda_p,
							  nr_sequencia_w,
							  clock_timestamp(),
							  nm_usuario_p,
							  cd_proced_adic_w,
							  ie_origem_proc_adic_w,
							  nr_seq_proc_int_adic_w,
							  cd_medico_w,
							  CASE WHEN ie_proced_vinculado_w='S' THEN nr_seq_agenda_p  ELSE null END ,
							  qt_proc_adic_w);		
		
			CALL gerar_autor_regra(null,null,null,null,null,null,'AP',nm_usuario_p,nr_seq_agenda_p,null,null,null,null,nr_sequencia_w,'','','');
		
		end if;
		
	end;
end loop;
close C01;

commit;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proc_assoc_agenda_exame ( nr_seq_agenda_p bigint, cd_estabelecimento_p bigint, nr_seq_proc_interno_p bigint, nm_usuario_p text) FROM PUBLIC;

