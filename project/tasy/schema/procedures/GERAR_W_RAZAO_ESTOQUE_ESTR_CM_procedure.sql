-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_razao_estoque_estr_cm ( cd_estabelecimento_p bigint, dt_mesano_referencia_p timestamp, dt_mesano_referencia_fim_p timestamp, cd_local_estoque_p bigint, dt_inicio_movto_p timestamp, dt_fim_movto_p timestamp, cd_material_p bigint, cd_grupo_material_p bigint, cd_subgrupo_material_p bigint, cd_classe_material_p bigint, nm_usuario_p text, ie_movimento_p text, ie_ordem_p text) AS $body$
DECLARE


dt_movimento_w			timestamp;
dt_movimento_estoque_w		timestamp;
qt_movimento_w			double precision;
dt_processo_w			timestamp;
dt_atualzacao_w			timestamp;
cd_local_estoque_w		smallint;
cd_operacao_estoque_w		smallint;
cd_material_estoque_w		integer;
nr_movimento_estoque_w		bigint;
nr_documento_w			bigint;
dt_mes_ant_w			timestamp;
qt_saldo_ant_w			double precision;
qt_estoque_w			double precision	:= 0;
ie_entrada_saida_w			varchar(1);
cd_acao_w			varchar(1);
dt_mesano_referencia_w		timestamp;
vl_estoque_ant_w			double precision;
vl_movimento_w			double precision;
vl_estoque_w			double precision	:= 0;
cd_material_w			integer;
dt_ordem_w			timestamp;
dt_fim_movto_w			timestamp;

c01 CURSOR FOR
SELECT	a.cd_material
from	saldo_estoque a,
	estrutura_material_v b
where	a.cd_material = b.cd_material
and (a.cd_material = cd_material_p or coalesce(cd_material_p, 0) = 0)
and (b.cd_grupo_material = cd_grupo_material_p or coalesce(cd_grupo_material_p, 0) = 0)
and (b.cd_subgrupo_material = cd_subgrupo_material_p or coalesce(cd_subgrupo_material_p, 0) = 0)
and (b.cd_classe_material = cd_classe_material_p or coalesce(cd_classe_material_p, 0) = 0)
and	a.dt_mesano_referencia between dt_mesano_referencia_p and dt_mesano_referencia_fim_p
and (ie_movimento_p = 'S' and exists (select 1
					from	movimento_estoque_v1 c
					where	c.cd_material_estoque = a.cd_material
					and (c.cd_local_estoque 	= cd_local_estoque_p or coalesce(cd_local_estoque_p, 0) = 0)
					and	c.cd_estabelecimento	= cd_estabelecimento_p
					and	(c.dt_processo IS NOT NULL AND c.dt_processo::text <> '')
					and	ie_ordem_p = 'P'
					and (c.dt_processo between coalesce(dt_inicio_movto_p, c.dt_processo) and coalesce(dt_fim_movto_w, c.dt_processo))
					and	c.dt_mesano_referencia	between dt_mesano_referencia_p and dt_mesano_referencia_fim_p
					
union all

					SELECT 1
					from	movimento_estoque_v1 c
					where	c.cd_material_estoque = a.cd_material
					and (c.cd_local_estoque 	= cd_local_estoque_p or coalesce(cd_local_estoque_p, 0) = 0)
					and	c.cd_estabelecimento	= cd_estabelecimento_p
					and	(c.dt_processo IS NOT NULL AND c.dt_processo::text <> '')
					and	ie_ordem_p = 'M'
					and (c.dt_movimento_estoque between coalesce(dt_inicio_movto_p, c.dt_movimento_estoque) and coalesce(dt_fim_movto_w, c.dt_movimento_estoque))
					and	c.dt_mesano_referencia	between dt_mesano_referencia_p and dt_mesano_referencia_fim_p) or (ie_movimento_p = 'N'))
group by a.cd_material;

c02 CURSOR FOR
SELECT	CASE WHEN ie_ordem_p='P' THEN  a.dt_processo  ELSE a.dt_movimento_estoque END  dt_ordem,
	PKG_DATE_UTILS.start_of(a.dt_movimento_estoque,'dd',0) dt_movimento_estoque,
	a.dt_movimento_estoque dt_movimento_estoque2,
	coalesce(sum(CASE WHEN a.cd_acao='1' THEN 	CASE WHEN b.ie_entrada_saida='S' THEN (qt_estoque * -1)  ELSE qt_estoque END  WHEN a.cd_acao='2' THEN 	CASE WHEN b.ie_entrada_saida='S' THEN (qt_estoque * -1)  ELSE qt_estoque END  * 1 END ),0) qt_movimento,
	a.dt_processo,
	a.dt_atualizacao,
	a.cd_local_estoque,
	a.cd_operacao_estoque,
	b.ie_entrada_saida,
	a.cd_material_estoque,
	a.nr_movimento_estoque,
	a.nr_documento,
	a.cd_acao,
	a.dt_mesano_referencia,
	coalesce(sum(CASE WHEN b.ie_entrada_saida='E' THEN 	a.vl_movimento  ELSE a.vl_movimento* -1 END ),0) vl_movimento
from	operacao_estoque b,
	movimento_estoque_v1 a
where	a.cd_operacao_estoque	= b.cd_operacao_estoque
and (a.cd_local_estoque 	= cd_local_estoque_p or coalesce(cd_local_estoque_p, 0) = 0)
and	(a.dt_processo IS NOT NULL AND a.dt_processo::text <> '')
and	a.cd_material_estoque	= cd_material_w
and	a.cd_estabelecimento	= cd_estabelecimento_p
and	a.dt_mesano_referencia	between dt_mesano_referencia_p and dt_mesano_referencia_fim_p
group by
	PKG_DATE_UTILS.start_of(a.dt_movimento_estoque,'dd',0),
	a.dt_movimento_estoque,
	a.dt_processo,
	a.dt_atualizacao,
	a.cd_local_estoque,
	a.cd_operacao_estoque,
	b.ie_entrada_saida,
	a.cd_material_estoque,
	a.nr_movimento_estoque,
	a.nr_documento,
	a.cd_acao,
	a.dt_mesano_referencia
order by	a.dt_mesano_referencia,
	CASE WHEN ie_ordem_p='P' THEN  a.dt_processo  ELSE a.dt_movimento_estoque END ,
	a.dt_processo,
	a.nr_movimento_estoque,
	PKG_DATE_UTILS.start_of(a.dt_movimento_estoque,'dd',0),
	a.dt_atualizacao;


BEGIN

delete from w_razao_estoque;
commit;

dt_mesano_referencia_w		:= dt_mesano_referencia_p;
dt_mes_ant_w			:= PKG_DATE_UTILS.ADD_MONTH(dt_mesano_referencia_p,-1,0);

if (dt_fim_movto_p IS NOT NULL AND dt_fim_movto_p::text <> '') then
	dt_fim_movto_w := fim_dia(dt_fim_movto_p);
end if;

open c01;
loop
fetch c01 into
	cd_material_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	select	coalesce(sum(qt_estoque),0),
		coalesce(sum(vl_estoque),0)
	into STRICT	qt_saldo_ant_w,
		vl_estoque_ant_w
	from	saldo_estoque
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	dt_mesano_referencia	= dt_mes_ant_w
	and (cd_local_estoque 	= cd_local_estoque_p or coalesce(cd_local_estoque_p, 0) = 0)
	and	cd_material		= cd_material_w;

	qt_estoque_w	:= qt_saldo_ant_w;
	vl_estoque_w	:= vl_estoque_ant_w;

	insert into w_razao_estoque(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		ie_tipo_informacao,
		cd_estabelecimento,
		dt_mesano_referencia,
		cd_local_estoque,
		cd_material,
		qt_estoque,
		vl_movimento,
		vl_estoque)
	values (	nextval('w_razao_estoque_seq'),
		clock_timestamp(),
		nm_usuario_p,
		0,
		cd_estabelecimento_p,
		dt_mesano_referencia_w,
		CASE WHEN coalesce(cd_local_estoque_p, 0)=0 THEN  null  ELSE cd_local_estoque_p END ,
		cd_material_w,
		qt_saldo_ant_w,
		0,
		vl_estoque_ant_w);

	open c02;
	loop
	fetch c02 into
		dt_ordem_w,
		dt_movimento_w,
		dt_movimento_estoque_w,
		qt_movimento_w,
		dt_processo_w,
		dt_atualzacao_w,
		cd_local_estoque_w,
		cd_operacao_estoque_w,
		ie_entrada_saida_w,
		cd_material_estoque_w,
		nr_movimento_estoque_w,
		nr_documento_w,
		cd_acao_w,
		dt_mesano_referencia_w,
		vl_movimento_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		if (coalesce(dt_fim_movto_w::text, '') = '') or (dt_ordem_w <= dt_fim_movto_w) then
			begin
			if (dt_ordem_w < dt_inicio_movto_p) then
				qt_estoque_w	:= qt_estoque_w + qt_movimento_w;
				vl_estoque_w	:= vl_estoque_w + vl_movimento_w;

				update	w_razao_estoque
				set	qt_estoque = qt_estoque_w,
					vl_estoque = vl_estoque_w
				where	ie_tipo_informacao = 0
				and	cd_material = cd_material_estoque_w;
			else
				begin
				qt_estoque_w	:= qt_estoque_w + qt_movimento_w;
				vl_estoque_w	:= vl_estoque_w + vl_movimento_w;

				insert into w_razao_estoque(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					ie_tipo_informacao,
					cd_estabelecimento,
					dt_mesano_referencia,
					dt_movimento,
					dt_movimento_estoque,
					dt_processo,
					cd_local_estoque,
					cd_operacao_estoque,
					ie_entrada_saida,
					cd_acao,
					cd_material,
					nr_movimento_estoque,
					nr_documento,
					qt_movimento,
					qt_estoque,
					vl_movimento,
					vl_estoque)
				values ( nextval('w_razao_estoque_seq'),
					clock_timestamp(),
					nm_usuario_p,
					5,
					cd_estabelecimento_p,
					dt_mesano_referencia_w,
					dt_movimento_w,
					dt_movimento_estoque_w,
					dt_processo_w,
					cd_local_estoque_w,
					cd_operacao_estoque_w,
					ie_entrada_saida_w,
					cd_acao_w,
					cd_material_estoque_w,
					nr_movimento_estoque_w,
					nr_documento_w,
					qt_movimento_w,
					qt_estoque_w,
					vl_movimento_w,
					vl_estoque_w);
				end;
			end if;
			end;
		end if;
		end;
	end loop;
	close c02;

	insert into w_razao_estoque(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		ie_tipo_informacao,
		cd_estabelecimento,
		dt_mesano_referencia,
		cd_local_estoque,
		cd_material,
		qt_estoque,
		vl_estoque)
	values (	nextval('w_razao_estoque_seq'),
		clock_timestamp(),
		nm_usuario_p,
		9,
		cd_estabelecimento_p,
		dt_mesano_referencia_w,
		CASE WHEN coalesce(cd_local_estoque_p, 0)=0 THEN  null  ELSE cd_local_estoque_p END ,
		cd_material_w,
		qt_estoque_w,
		vl_estoque_w);
	end;
end loop;
close c01;

CALL gerar_w_custo_medio_historico(cd_estabelecimento_p,dt_mesano_referencia_p,nm_usuario_p);

commit;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_razao_estoque_estr_cm ( cd_estabelecimento_p bigint, dt_mesano_referencia_p timestamp, dt_mesano_referencia_fim_p timestamp, cd_local_estoque_p bigint, dt_inicio_movto_p timestamp, dt_fim_movto_p timestamp, cd_material_p bigint, cd_grupo_material_p bigint, cd_subgrupo_material_p bigint, cd_classe_material_p bigint, nm_usuario_p text, ie_movimento_p text, ie_ordem_p text) FROM PUBLIC;

