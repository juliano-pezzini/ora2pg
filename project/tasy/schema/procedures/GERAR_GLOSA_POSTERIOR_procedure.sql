-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_glosa_posterior ( nr_seq_lote_audit_p bigint, nm_usuario_p text, ie_glosa_posterior_p text, ie_acao_p text) AS $body$
DECLARE


vl_saldo_w		double precision;
vl_glosa_w		double precision;
vl_glosa_item_w		double precision;
nr_seq_propaci_w	bigint;
nr_seq_proc_rep_novo_w	bigint;
nr_seq_hist_guia_w	bigint;
vl_procedimento_w	double precision;
vl_repasse_w		double precision;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
ie_liberar_glosado_w	parametro_repasse.ie_lib_glosa_negativo%type;
nr_seq_partic_w		grg_proc_partic.nr_seq_partic%type;
vl_posterior_estorno_w	procedimento_repasse.vl_liberado%type;
ds_valor_w		procedimento_repasse.ds_observacao%type;
vl_saldo_amenor_w	lote_audit_hist_item.vl_saldo_amenor%type;
tx_diferenca_w	double precision;
vl_novo_repasse_w	double precision;
nr_seq_lote_hist_w	lote_audit_hist_guia.nr_seq_lote_hist%type;
ie_considerar_repasse_w   varchar(1);

c01 CURSOR FOR
SELECT	coalesce(a.vl_saldo_guia,0),
	coalesce(obter_valores_guia_grc(a.nr_seq_lote_hist,a.nr_interno_conta,a.cd_autorizacao,'VG'),0),
	a.nr_sequencia,
  a.nr_seq_lote_hist
from	lote_audit_hist_guia a,
	lote_audit_hist b
where	a.nr_seq_lote_hist	= b.nr_sequencia
and	b.nr_sequencia		= nr_seq_lote_audit_p;

c02 CURSOR FOR
SELECT	coalesce(sum(c.vl_glosa),0) vl_glosa_item,
	c.nr_seq_propaci,
	coalesce(sum(b.vl_procedimento),0) vl_procedimento,
	x.nr_seq_partic,
  coalesce(sum(c.VL_SALDO_AMENOR),0) vl_saldo_amenor
from	procedimento_paciente b,
	lote_audit_hist_guia a,
	lote_audit_hist_item c,
         procedimento_repasse x
where	x.nr_seq_procedimento      = b.nr_sequencia
and	c.nr_seq_propaci		= b.nr_sequencia
and	c.nr_seq_guia		= a.nr_sequencia
and	a.nr_sequencia		= nr_seq_hist_guia_w
and	(c.nr_seq_propaci IS NOT NULL AND c.nr_seq_propaci::text <> '')
and	not exists (	SELECT 	1
			from 	grg_proc_partic x
			where	x.nr_seq_hist_item	= c.nr_sequencia)
and	coalesce(c.vl_glosa,0)	> 0
and	((ie_acao_p = 'F' and x.ie_status in ('S','L','R')) or (ie_acao_p = 'A' and x.ie_status = 'G'))
and (coalesce(x.nr_seq_lote_audit_hist,0) <> a.nr_seq_lote_hist)
group by	c.nr_seq_propaci,
	x.nr_seq_partic

union all

select	coalesce(sum(b.vl_glosa),0) vl_glosa_item,
	b.nr_seq_proc,
	coalesce(sum(d.vl_participante),0) vl_procedimento,
	b.nr_seq_partic,
  coalesce(sum(a.VL_SALDO_AMENOR),0) vl_saldo_amenor
from	procedimento_participante d,
	grg_proc_partic b,
	lote_audit_hist_item a
where	b.nr_seq_partic		= d.nr_seq_partic
and	b.nr_seq_proc		= d.nr_sequencia
and	a.nr_sequencia		= b.nr_seq_hist_item
and	a.nr_seq_guia		= nr_seq_hist_guia_w
and	(a.nr_seq_propaci IS NOT NULL AND a.nr_seq_propaci::text <> '')
and	coalesce(b.vl_glosa,0)	> 0
and	((ie_acao_p = 'F' and
	exists (select	1
	from	procedimento_repasse x
	where	x.ie_status			in ('S','L','R')
	and	x.nr_seq_procedimento		= b.nr_seq_proc)) or (ie_acao_p = 'A' and
	exists (select	1
	from	procedimento_repasse x
	where	x.ie_status			= 'G'
	and	x.nr_seq_procedimento		= b.nr_seq_proc)))
and	not exists (	select	1
			from	lote_audit_hist_guia y,
			         procedimento_repasse x
			where	 x.nr_seq_procedimento = b.nr_seq_proc
			and (x.nr_seq_lote_audit_hist = y.nr_seq_lote_hist)
			and     y.nr_sequencia	= a.nr_seq_guia)
group	by b.nr_seq_proc,
	b.nr_seq_partic

union all

select	coalesce(sum(b.vl_glosa),0) vl_glosa_item,
	b.nr_seq_proc,
	coalesce(sum(c.vl_medico),0) vl_procedimento,
	null,
  coalesce(sum(a.VL_SALDO_AMENOR),0) vl_saldo_amenor
from	procedimento_paciente c,
	grg_proc_partic b,
	lote_audit_hist_item a
where	coalesce(b.nr_seq_partic::text, '') = ''
and	b.nr_seq_proc		= c.nr_sequencia
and	a.nr_sequencia		= b.nr_seq_hist_item
and	a.nr_seq_guia		= nr_seq_hist_guia_w
and	(a.nr_seq_propaci IS NOT NULL AND a.nr_seq_propaci::text <> '')
and	coalesce(b.vl_glosa,0)	> 0
and	((ie_acao_p = 'F' and
	exists (select	1
	from	procedimento_repasse x
	where	x.ie_status			in ('S','L','R')
	and	x.nr_seq_procedimento		= b.nr_seq_proc)) or (ie_acao_p = 'A' and
	exists (select	1
	from	procedimento_repasse x
	where	x.ie_status			= 'G'
	and	x.nr_seq_procedimento		= b.nr_seq_proc)))
and	not exists (	select	1
			from	lote_audit_hist_guia y,
			        procedimento_repasse x
			where	x.nr_seq_procedimento = b.nr_seq_proc
			and (x.nr_seq_lote_audit_hist = y.nr_seq_lote_hist)
			and     y.nr_sequencia	= a.nr_seq_guia)
group	by b.nr_seq_proc;

c_repasse CURSOR(	nr_seq_procedimento_pc	procedimento_repasse.nr_seq_procedimento%type,
			nr_seq_partic_pc		procedimento_repasse.nr_seq_partic%type) FOR
	SELECT	a.nr_sequencia nr_sequencia,
		a.nr_seq_partic nr_seq_partic,
		a.nr_seq_terceiro,
		a.ie_status,
		a.nr_seq_trans_fin,
		a.vl_repasse,
		a.cd_regra,
		a.cd_medico,
		a.dt_contabil_titulo,
		a.dt_contabil,
		a.vl_original_repasse
	from	procedimento_repasse a
	where	a.nr_seq_procedimento  	= nr_seq_procedimento_pc
	and	coalesce(a.nr_seq_partic,0) 	= nr_seq_partic_pc
	and 	(nr_seq_partic_pc IS NOT NULL AND nr_seq_partic_pc::text <> '')
  and (coalesce(nr_seq_lote_hist_w::text, '') = '' or coalesce(nr_seq_lote_audit_hist,-1)	<> nr_seq_lote_hist_w)
	and		(( ((coalesce(vl_saldo_amenor_w,0) = 0) or (vl_procedimento_w = vl_glosa_item_w)) and (coalesce(ie_considerar_repasse_w,'N') = 'S')) or (coalesce(ie_considerar_repasse_w,'N') = 'N'))
	and	ie_status		in ('S','L','R')
    	and	exists (	SELECT	1
			from	terceiro x
			where	x.nr_sequencia = a.nr_seq_terceiro
			and	x.ie_glosa_posterior = 'S')
	and	exists (	select	1
			from	proc_criterio_repasse x
			where	x.nr_sequencia = a.nr_seq_criterio
			and	x.ie_glosa_posterior = 'S')
	
union all

	select	a.nr_sequencia nr_sequencia,
		a.nr_seq_partic nr_seq_partic,
		a.nr_seq_terceiro,
		a.ie_status,
		a.nr_seq_trans_fin,
		a.vl_repasse,
		a.cd_regra,
		a.cd_medico,
		a.dt_contabil_titulo,
		a.dt_contabil,
		a.vl_original_repasse
	from	procedimento_repasse a
	where	a.nr_seq_procedimento  	= nr_seq_procedimento_pc
	and	coalesce(a.nr_seq_partic::text, '') = ''
	and 	coalesce(nr_seq_partic_pc::text, '') = ''
  and (coalesce(nr_seq_lote_hist_w::text, '') = '' or coalesce(nr_seq_lote_audit_hist,-1)	<> nr_seq_lote_hist_w)
	and		(( ((coalesce(vl_saldo_amenor_w,0) = 0) or (vl_procedimento_w = vl_glosa_item_w)) and (coalesce(ie_considerar_repasse_w,'N') = 'S')) or (coalesce(ie_considerar_repasse_w,'N') = 'N'))
	and	ie_status		in ('S','L','R')
    	and	exists (	select	1
			from	terceiro x
			where	x.nr_sequencia = a.nr_seq_terceiro
			and	x.ie_glosa_posterior = 'S')
	and	exists (	select	1
			from	proc_criterio_repasse x
			where	x.nr_sequencia = a.nr_seq_criterio
			and	x.ie_glosa_posterior = 'S');

BEGIN

cd_estabelecimento_w := obter_estabelecimento_ativo;

ie_considerar_repasse_w := obter_param_usuario(69, 84, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_considerar_repasse_w);
select	max(coalesce(ie_lib_glosa_negativo,'N'))
into STRICT	ie_liberar_glosado_w
from	parametro_repasse
where	cd_estabelecimento = cd_estabelecimento_w;

open c01;
loop
fetch c01 into
	vl_saldo_w,
	vl_glosa_w,
	nr_seq_hist_guia_w,
  nr_seq_lote_hist_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	
	if (vl_glosa_w > vl_saldo_w) or (ie_glosa_posterior_p = 'T') then

		open c02;
		loop
		fetch c02 into
			vl_glosa_item_w,
			nr_seq_propaci_w,
			vl_procedimento_w,
			nr_seq_partic_w,
      vl_saldo_amenor_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */

			for r_c_repasse in c_repasse(nr_seq_propaci_w, nr_seq_partic_w) loop
				begin

				select	nextval('procedimento_repasse_seq')
				into STRICT	nr_seq_proc_rep_novo_w
				;

				vl_posterior_estorno_w := 0;
				vl_repasse_w := ((coalesce(r_c_repasse.vl_repasse,0) * coalesce(vl_glosa_item_w,0)) / coalesce(vl_procedimento_w,0));

				if (coalesce(ie_glosa_posterior_p,'N') = 'T')
					and (coalesce(ie_liberar_glosado_w,'N') = 'S') then
					vl_posterior_estorno_w := vl_repasse_w;
				end if;

				ds_valor_w :=  	Wheb_mensagem_pck.get_texto(1090592) || ':'  || r_c_repasse.vl_repasse ||  ' '  ||
						Wheb_mensagem_pck.get_texto(1090593) || ':'  || vl_glosa_item_w ||  ' '  ||
						Wheb_mensagem_pck.get_texto(1090594) || ':'  || vl_procedimento_w;

				insert into procedimento_repasse(
					nr_sequencia,
					nr_seq_procedimento,
					vl_repasse,
					dt_atualizacao,
					nm_usuario,
					nr_seq_terceiro,
					nr_lote_contabil,
					nr_repasse_terceiro,
					cd_conta_contabil,
					nr_seq_trans_fin,
					vl_liberado,
					nr_seq_item_retorno,
					ie_status,
					nr_seq_origem,
					cd_regra,
					dt_liberacao,
					cd_medico,
					dt_contabil_titulo,
					dt_contabil,
					nr_seq_partic,
					vl_original_repasse,
					ds_observacao)
				values (nr_seq_proc_rep_novo_w,
					nr_seq_propaci_w,
					vl_repasse_w,
					clock_timestamp(),
					nm_usuario_p,
					r_c_repasse.nr_seq_terceiro,
					null,
					null,
					null,
					r_c_repasse.nr_seq_trans_fin,
					vl_posterior_estorno_w,
					null,
					CASE WHEN ie_acao_p='F' THEN 'G'  ELSE 'E' END ,
					r_c_repasse.nr_sequencia,
					r_c_repasse.cd_regra,
					clock_timestamp(),
					r_c_repasse.cd_medico,
					r_c_repasse.dt_contabil_titulo,
					r_c_repasse.dt_contabil,
					r_c_repasse.nr_seq_partic,
					r_c_repasse.vl_original_repasse,
					ds_valor_w);
				exception
					when others then
						--r.aise_application_error(-20011, 'Erro ao gerar glosa posterior! ' || SQLERRM || 'nr_seq_propaci_w=' || nr_seq_propaci_w);
						CALL wheb_mensagem_pck.exibir_mensagem_abort(196674,'SQLERRM_W='|| SQLERRM ||';nr_seq_propaci_w='|| nr_seq_propaci_w);
				end;

				if (coalesce(ie_glosa_posterior_p,'N') = 'T') and (ie_acao_p = 'F') then
					--Glosa posterior negativa devido a parametrizacao de Glosa Posterior na funcao Cadastros Financeiros, pasta Repasse/Retorno
					update	procedimento_repasse
					set	vl_repasse	= coalesce(vl_repasse,0) * -1,
						ds_observacao	= substr(wheb_mensagem_pck.get_texto(306333),1,2000),
						dt_atualizacao	= clock_timestamp(),
						nm_usuario	= nm_usuario_p,
						vl_liberado	= CASE WHEN ie_liberar_glosado_w='S' THEN (coalesce(vl_repasse,0) * -1)  ELSE vl_liberado END
					where	nr_sequencia	= nr_seq_proc_rep_novo_w;
				/* para quando a analise for reaberta */

				elsif (coalesce(ie_glosa_posterior_p,'N') <> 'T') and (ie_acao_p = 'A') then
					update	procedimento_repasse
					set	vl_repasse	= coalesce(vl_repasse,0) * -1,
						dt_atualizacao	= clock_timestamp(),
						nm_usuario	= nm_usuario_p
					where	nr_sequencia	= nr_seq_proc_rep_novo_w;
				end if;
			end loop;

		end loop;
		close c02;

  end if;

end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_glosa_posterior ( nr_seq_lote_audit_p bigint, nm_usuario_p text, ie_glosa_posterior_p text, ie_acao_p text) FROM PUBLIC;

