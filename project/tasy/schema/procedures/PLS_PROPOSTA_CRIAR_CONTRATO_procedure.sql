-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_proposta_criar_contrato ( nr_seq_proposta_plano_p bigint, nm_usuario_p text, nr_seq_contrato_p INOUT bigint) AS $body$
DECLARE


cd_cgc_estipulante_w		varchar(14);
cd_estipulante_w		varchar(10);
cd_estabelecimento_w		smallint;
dt_inicio_proposta_w		timestamp;
nr_seq_emissor_w		bigint;
nr_seq_contrato_w		bigint;
nr_seq_regra_desconto_w		bigint;
nr_seq_preco_regra_desc_w	bigint;
qt_registro_w			integer	:= 0;
nr_seq_proposta_w		bigint;
nr_seq_contrato_prop_plano_w	bigint;
ie_principal_w			varchar(1);
nr_seq_contrato_princ_w		bigint;
nr_seq_regra_w			bigint;
ie_contrato_plano_w		varchar(1)	:= 'N';
ie_permite_prod_dif_w		varchar(1);
nr_contrato_w			bigint;
nr_seq_operadora_w		bigint;
qt_dias_renovacao_w		varchar(10);
qt_dias_renovacao_number_w	bigint;
cd_seq_contrato_princ_w		bigint;
dt_base_validade_carteira_w	varchar(1);
ie_tipo_proposta_w		varchar(2);
ie_reajuste_w			varchar(1);
nr_seq_indice_reajuste_w	bigint;
dt_base_carteira_w		timestamp;
ie_tipo_operacao_w		pls_plano.ie_tipo_operacao%type;
ie_preencher_emissor_w		varchar(1);
ie_empresario_individual_w	pls_contrato.ie_empresario_individual%type;
cd_caepf_w			pls_proposta_adesao.cd_caepf%type;



C00 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_desconto
	where	nr_seq_proposta	= nr_seq_proposta_w;

C01 CURSOR FOR
	SELECT	b.nr_sequencia
	from	pls_preco_regra		b,
		pls_regra_desconto	a
	where	a.nr_sequencia		= b.nr_seq_regra
	and	a.nr_sequencia		= nr_seq_regra_w;


BEGIN
ie_preencher_emissor_w	:= coalesce(obter_valor_param_usuario(1202, 154, Obter_Perfil_Ativo, nm_usuario_p, 0), 'N');

/* Parâmetro 17 da OPS - Proposta de adesão: Ao gerar contratação, gerar um contrato para cada produto diferente cadastrado na proposta */

ie_contrato_plano_w	:= coalesce(obter_valor_param_usuario(1232, 17, Obter_Perfil_Ativo, nm_usuario_p, 0), 'N');
/* Se a proposta gera um contrato por produto então o contrato NÃO permite mais de um produto diferente.
Se a proposta gera um único contrato para todos os produtos, então permite mais de um produto por contrato  */
if (ie_contrato_plano_w	= 'S') then
	ie_permite_prod_dif_w	:= 'N';
elsif (ie_contrato_plano_w	= 'N') then
	ie_permite_prod_dif_w	:= 'S';
end if;


qt_dias_renovacao_number_w	:= 0;

/* Obter dados do produto da proposta */

select	coalesce(nr_seq_proposta,0),
	a.nr_seq_contrato,
	a.ie_principal,
	b.ie_tipo_operacao
into STRICT	nr_seq_proposta_w,
	nr_seq_contrato_prop_plano_w,
	ie_principal_w,
	ie_tipo_operacao_w
from	pls_proposta_plano	a,
	pls_plano		b
where	b.nr_sequencia	= a.nr_seq_plano
and	a.nr_sequencia	= nr_seq_proposta_plano_p;

/* Obter dados da proposta */

select	cd_cgc_estipulante,
	cd_estipulante,
	cd_estabelecimento,
	dt_inicio_proposta,
	coalesce(nr_seq_contrato,0),
	ie_tipo_proposta,
	coalesce(ie_empresario_individual,'N'),
	cd_caepf	
into STRICT	cd_cgc_estipulante_w,
	cd_estipulante_w,
	cd_estabelecimento_w,
	dt_inicio_proposta_w,
	nr_seq_contrato_w,
	ie_tipo_proposta_w,
	ie_empresario_individual_w,
	cd_caepf_w
from	pls_proposta_adesao
where	nr_sequencia	= nr_seq_proposta_w;

/*aaschlote 04/03/2011 - 292862*/

if (ie_tipo_proposta_w in (1,3)) then
	/* Obter o contrato principal do produto */

	if (ie_principal_w	= 'N') then
		select	coalesce(max(nr_seq_contrato),null)
		into STRICT	nr_seq_contrato_princ_w
		from	pls_proposta_plano
		where	nr_seq_proposta	= nr_seq_proposta_w
		and	ie_principal	= 'S';
		
		if (coalesce(nr_seq_contrato_princ_w,0) <> 0) then
			begin
			select	coalesce(max(nr_contrato),null)
			into STRICT	cd_seq_contrato_princ_w
			from	pls_contrato
			where	nr_sequencia	= nr_seq_contrato_princ_w;
			exception
			when others then
				cd_seq_contrato_princ_w	:= null;
			end;
		else
			cd_seq_contrato_princ_w		:= null;
		end if;
	end if;
elsif (ie_tipo_proposta_w = 6) then
	if (coalesce(nr_seq_contrato_w,0) <> 0) then
		begin
		select	max(nr_sequencia)
		into STRICT	nr_seq_contrato_princ_w
		from	pls_contrato
		where	nr_contrato	= nr_seq_contrato_w;
		exception
		when others then
			nr_seq_contrato_princ_w	:= null;
		end;
		cd_seq_contrato_princ_w	:= nr_seq_contrato_w;
		nr_seq_contrato_w	:= null;
	else
		nr_seq_contrato_princ_w		:= null;
		cd_seq_contrato_princ_w		:= null;
	end if;
end if;

/* Obter o emissor do contrato */

if (ie_preencher_emissor_w = 'S') then
	select	max(nr_seq_emissor)
	into STRICT	nr_seq_emissor_w
	from 	pls_parametros
	where 	cd_estabelecimento	= cd_estabelecimento_w;
else
	nr_seq_emissor_w	:= null;
end if;

select	coalesce(dt_base_validade_carteira,'B'),  /* Obter o padrão da validade da carteira */
	coalesce(ie_reajuste,'C') /* Obter a data padrão para reajuste */
into STRICT	dt_base_validade_carteira_w,
	ie_reajuste_w
from 	pls_parametros
where 	cd_estabelecimento	= cd_estabelecimento_w;

if (dt_base_validade_carteira_w = 'V') then
	dt_base_carteira_w	:= dt_inicio_proposta_w;
else
	dt_base_carteira_w	:= null;
end if;

select	max(nr_sequencia)
into STRICT	nr_seq_operadora_w
from	pls_outorgante
where	cd_estabelecimento	= cd_estabelecimento_w;

select	nextval('pls_contrato_seq'),
	nextval('nr_contrato_seq')
into STRICT	nr_seq_contrato_w,
	nr_contrato_w
;

select	max(nr_seq_indice_reajuste)
into STRICT	nr_seq_indice_reajuste_w
from	pls_regra_indice_reajust
where 	(ie_tipo_pessoa = 'PF' AND cd_estipulante_w IS NOT NULL AND cd_estipulante_w::text <> '')
or	(ie_tipo_pessoa = 'PJ' AND cd_cgc_estipulante_w IS NOT NULL AND cd_cgc_estipulante_w::text <> '')
or	ie_tipo_pessoa = 'A';

insert into pls_contrato(
	nr_sequencia, dt_atualizacao, nm_usuario,
	dt_atualizacao_nrec, nm_usuario_nrec, cd_cgc_estipulante,
	cd_pf_estipulante, dt_aprovacao, cd_cod_anterior,
	qt_intervalo, ie_renovacao_automatica, ie_permite_prod_dif,
	ie_situacao, dt_rescisao_contrato, dt_contrato,
	dt_reativacao, cd_contrato, ie_reajuste,
	cd_estabelecimento, ie_geracao_valores, nr_seq_emissor,
	ie_tipo_beneficiario, nr_seq_congenere, qt_dias_valid_cart,
	qt_idade_limite_reaj, qt_anos_limite_reaj, dt_cancelamento,
	nr_seq_motivo_rescisao, nr_seq_proposta, nr_contrato_principal,
	ie_preco_co_operadora, ie_itens_nao_cobertos, ie_tipo_operacao,
	nr_contrato, nr_seq_operadora,cd_contrato_principal,
	ie_controle_carteira,dt_base_validade_carteira, ie_mes_cobranca_reaj,dt_reajuste,
	ie_permite_matricula_dif,ie_consistir_carencia_rede,nr_seq_indice_reajuste,
	dt_base_carteira, ie_empresario_individual, cd_caepf)
values (	nr_seq_contrato_w, clock_timestamp(), nm_usuario_p,
	clock_timestamp(), nm_usuario_p, cd_cgc_estipulante_w,
	cd_estipulante_w, null, null,
	12, 'N', ie_permite_prod_dif_w,
	'1', null, dt_inicio_proposta_w,
	null, null, ie_reajuste_w,
	cd_estabelecimento_w, 'B', nr_seq_emissor_w,
	'BE', null, qt_dias_renovacao_number_w,
	null, null, null,
	null, nr_seq_proposta_w, nr_seq_contrato_princ_w,
	'N', 'N', ie_tipo_operacao_w,
	nr_contrato_w, nr_seq_operadora_w,cd_seq_contrato_princ_w,
	'A',dt_base_validade_carteira_w, 'R',dt_inicio_proposta_w,
	'S','N',nr_seq_indice_reajuste_w,
	dt_base_carteira_w, ie_empresario_individual_w, cd_caepf_w);

update	pls_proposta_plano
set	nr_seq_contrato	= nr_seq_contrato_w
where	nr_sequencia	= nr_seq_proposta_plano_p;

select	count(*)
into STRICT	qt_registro_w
from	pls_regra_desconto
where	nr_seq_contrato	= nr_seq_contrato_w;

/* Se já existir regra de desconto no contrato não gera outra */

if (qt_registro_w	= 0) then
	open C00;
	loop
	fetch C00 into
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C00 */
		begin
		
		select	nextval('pls_regra_desconto_seq')
		into STRICT	nr_seq_regra_desconto_w
		;
		
		insert into pls_regra_desconto(
			nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, ds_regra,
			nr_seq_plano, nr_seq_contrato, ie_situacao,
			dt_inicio_vigencia, dt_fim_vigencia, ie_tipo_regra,
			nr_seq_proposta, ie_simulacao_preco,cd_estabelecimento)
		SELECT	nr_seq_regra_desconto_w, clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, ds_regra,
			null, nr_seq_contrato_w, 'A',
			dt_inicio_vigencia, dt_fim_vigencia, ie_tipo_regra,
			null, 'N',cd_estabelecimento_w
		from	pls_regra_desconto
		where	nr_sequencia	= nr_seq_regra_w;
		
		open C01;
		loop
		fetch C01 into
			nr_seq_preco_regra_desc_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			insert into pls_preco_regra(
				nr_sequencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, qt_min_vidas,
				qt_max_vidas, nr_seq_regra, tx_desconto,
				ie_tipo_segurado, vl_desconto)
			SELECT	nextval('pls_preco_regra_seq'), clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, qt_min_vidas,
				qt_max_vidas, nr_seq_regra_desconto_w, tx_desconto,
				coalesce(ie_tipo_segurado,'T'), vl_desconto
			from	pls_preco_regra
			where	nr_sequencia	= nr_seq_preco_regra_desc_w;
			end;
		end loop;
		close C01;
		
		end;
	end loop;
	close C00;
end if;

select	count(*)
into STRICT	qt_registro_w
from	pls_regra_inscricao
where	nr_seq_proposta	= nr_seq_proposta_w;

if (qt_registro_w	> 0) then
	insert	into pls_regra_inscricao(
		dt_atualizacao, nm_usuario, nr_seq_contrato,
		nr_sequencia, tx_inscricao, vl_inscricao,
		qt_parcela_inicial, qt_parcela_final,
		dt_fim_vigencia, dt_inicio_vigencia, ie_grau_dependencia)
	SELECT	clock_timestamp(),
		nm_usuario_p,
		nr_seq_contrato_w,
		nextval('pls_regra_inscricao_seq'),
		tx_inscricao,
		vl_inscricao,
		qt_parcela_inicial,
		qt_parcela_final,
		dt_fim_vigencia,
		dt_inicio_vigencia,
		ie_grau_dependencia
	from	pls_regra_inscricao
	where	nr_seq_proposta	=	nr_seq_proposta_w;
end if;

--pls_dias_renovcao_carteira(nr_seq_contrato_w,cd_estabelecimento_w,'N',nm_usuario_p);
CALL pls_gerar_regra_renov_contr(nr_seq_contrato_w,'N',cd_estabelecimento_w,nm_usuario_p);

nr_seq_contrato_p	:= nr_seq_contrato_w;

/* COMMIT feito na procedure PLS_PROPOSTA_GERAR_CONTRATO */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_proposta_criar_contrato ( nr_seq_proposta_plano_p bigint, nm_usuario_p text, nr_seq_contrato_p INOUT bigint) FROM PUBLIC;

