-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_conta_fpo ( dt_parametro_p timestamp, nr_interno_conta_p bigint, ie_tipo_atendimento_p bigint, cd_estabelecimento_p bigint, nr_seq_protocolo_p bigint, ie_opcao_p text, ds_retorno_p INOUT text) AS $body$
DECLARE

 
qt_fisico_w		bigint 	:= 0;
vl_orcamentario_w		double precision	:= 0;
cd_convenio_w		integer	:= 0;
qt_exec_w		bigint 	:= 0;
vl_exec_w		double precision	:= 0;
vl_info_w			double precision	:= 0;
ds_retorno_w		varchar(2000)	:='S';
dt_entrega_w		timestamp;
cd_procedimento_w	bigint	:=0;
ie_origem_proced_w	bigint	:=0;
qt_procedimento_w		bigint	:=0;
nr_atendimento_w		bigint	:=0;
ie_tipo_atendimento_w	smallint	:= 0;
cd_estabelecimento_w	smallint;
ie_regra_tipo_atend_w	varchar(1):= 'A';

 
c01 CURSOR FOR 
	SELECT	cd_procedimento, 
		ie_origem_proced, 
		qt_procedimento 
	from	procedimento_paciente 
	where	nr_interno_conta	= nr_interno_conta_p 
	and	ie_origem_proced	= 3 
	and	coalesce(cd_motivo_exc_conta::text, '') = '';

 

BEGIN 
 
begin 
select	b.cd_estabelecimento 
into STRICT	cd_estabelecimento_w 
from	atendimento_paciente	a, 
	conta_Paciente 		b 
where	a.nr_Atendimento	= b.nr_Atendimento 
and	b.nr_interno_conta	= nr_interno_conta_p;
exception 
	when others then 
	cd_estabelecimento_w	:= 0;
end;
 
/*Obter par√¢metros de Faturamento*/
 
select	coalesce(max(ie_regra_tipo_atend),'A') 
into STRICT	ie_regra_tipo_atend_w 
from	parametro_faturamento 
where	cd_estabelecimento = cd_estabelecimento_w;
 
if (coalesce(ie_regra_tipo_atend_w,'A') = 'C') then 
	begin 
	select	coalesce(max(ie_tipo_atend_conta),ie_tipo_atendimento_p) 
	into STRICT	ie_tipo_atendimento_w 
	from 	conta_paciente 
	where 	nr_interno_conta = nr_interno_conta_p;
	exception 
		when others then 
		ie_tipo_atendimento_w:= ie_tipo_atendimento_p;
	end;
end if;
 
OPEN C01;
LOOP 
FETCH C01 into	cd_procedimento_w, 
		ie_origem_proced_w, 
		qt_procedimento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
 
	if (ie_tipo_atendimento_w <> 1) then 
		 
		/*Obter Atendimento da Conta*/
 
		select	obter_atendimento_conta(nr_interno_conta_p) 
		into STRICT	nr_atendimento_w 
		;
	 
		/*obter convenio atendimento*/
 
		select	obter_convenio_atendimento(nr_atendimento_w) 
		into STRICT	cd_convenio_w 
		;
	 
		/*teto maximo quantidade*/
 
		select	sus_obter_fpo(cd_procedimento_w, ie_origem_proced_w, dt_parametro_p, 1) 
		into STRICT	qt_fisico_w 
		;
	 
		/*teto maximo valor*/
 
		select	sus_obter_fpo(cd_procedimento_w, ie_origem_proced_w, dt_parametro_p, 2) 
		into STRICT	vl_orcamentario_w 
		;
		 
		/*valor procedimento*/
 
		select	obter_preco_proc_sus(dt_parametro_p, cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_p) 
		into STRICT	vl_info_w 
		;
	 
		if (ie_opcao_p = 'S') then 
			/*quantidade e valor ja executado do procedimento para a data de vigencia*/
 
			select	coalesce(sum(qt_procedimento),0), 
			coalesce(sum(vl_procedimento),0) 
			into STRICT	qt_exec_w, 
			vl_exec_w 
			from	procedimento_paciente 
			where	cd_procedimento				= cd_procedimento_w 
			and	ie_origem_proced			= ie_origem_proced_w 
			and	trunc(dt_procedimento, 'month')		= trunc(dt_parametro_p, 'month') 
			and	cd_convenio				= cd_convenio_w 
			and	coalesce(cd_motivo_exc_conta::text, '') = '';
			qt_exec_w	:= coalesce(qt_exec_w,0);
			vl_exec_w	:= coalesce(vl_exec_w,0);
		else if (ie_opcao_p = 'P') then 
			/*quantidade e valor ja executado do procedimento para a data de vigencia*/
 
			select	coalesce(sum(a.qt_procedimento),0), 
				coalesce(sum(a.vl_procedimento),0) 
			into STRICT	qt_exec_w, 
				vl_exec_w 
			from	conta_paciente b, 
				procedimento_paciente a 
			where	a.cd_procedimento			= cd_procedimento_w 
			and	a.ie_origem_proced			= ie_origem_proced_w 
			and	a.cd_convenio				= cd_convenio_w 
			and	b.nr_seq_protocolo			= nr_seq_protocolo_p 
			and	a.nr_interno_conta			= b.nr_interno_conta 
			and	coalesce(a.cd_motivo_exc_conta::text, '') = '';
			qt_exec_w	:= coalesce(qt_exec_w,0) + coalesce(qt_procedimento_w,0);
			vl_exec_w	:= coalesce(vl_exec_w,0) + coalesce((vl_info_w * qt_procedimento_w),0);
		end if;
		end if;
	 
		if 	((qt_exec_w	> qt_fisico_w) or (vl_exec_w	> vl_orcamentario_w)) then 
			ds_retorno_w	:= 'N';
		end if;
		 
	end if;
qt_exec_w		:= 0;
vl_exec_w		:= 0;
qt_fisico_w		:= 0;
vl_orcamentario_w	:= 0;
vl_info_w		:= 0;
qt_procedimento_w	:= 0;
 
END LOOP;
CLOSE C01;
ds_retorno_p	:= ds_retorno_w;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_conta_fpo ( dt_parametro_p timestamp, nr_interno_conta_p bigint, ie_tipo_atendimento_p bigint, cd_estabelecimento_p bigint, nr_seq_protocolo_p bigint, ie_opcao_p text, ds_retorno_p INOUT text) FROM PUBLIC;

