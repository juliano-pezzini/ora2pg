-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE valida_novo_episodio ( nr_seq_episodio_p bigint, cd_pessoa_fisica_p text default null, nr_seq_tipo_episodio_p bigint default null, nr_seq_subtipo_episodio_p bigint default null, ie_status_p text default null, ie_tipo_atendimento_p bigint default null, ie_tipo_convenio_p bigint default null, nr_atendimento_p bigint DEFAULT NULL, nr_seq_classificacao_p bigint DEFAULT NULL, nr_seq_queixa_p bigint DEFAULT NULL, ie_consistiu_p INOUT text DEFAULT NULL, ie_comportamento_p INOUT text DEFAULT NULL, ds_msg_p INOUT text DEFAULT NULL, nr_seq_tipo_admissao_fat_p bigint default null, dt_entrada_p timestamp default null, new_case_p text default 'N') AS $body$
DECLARE


    nr_seq_tipo_episodio_w		    episodio_paciente.nr_seq_tipo_episodio%type;
    nr_seq_subtipo_episodio_w	    episodio_paciente.nr_seq_subtipo_episodio%type;
    ie_status_w			            episodio_paciente.ie_status%type;
    nr_atendimento_w		        atendimento_paciente.nr_atendimento%type;
    ie_tipo_atendimento_w		    atendimento_paciente.ie_tipo_atendimento%type;
    ie_tipo_convenio_w		        atendimento_paciente.ie_tipo_convenio%type;
    nr_seq_queixa_w			        atendimento_paciente.nr_seq_queixa%type;
    nr_seq_tipo_admissao_fat_w      atendimento_paciente.nr_seq_tipo_admissao_fat%type;
    nr_seq_classificacao_w		    atendimento_paciente.nr_seq_classificacao%type;
    qt_episodio_mesma_situacao_w	bigint;
    qt_atendimento_por_episodio_w   bigint;
    ie_possui_doc_necessario_w	    varchar(1);
    ie_tipo_w			            tipo_episodio.ie_tipo%type;
    ie_type_outpatient_w		    smallint := 0;
    ie_outpatient_w			        smallint := 8;
    dt_fim_regra_w			        atendimento_paciente.dt_entrada%type;
    dt_inicio_regra_w		        atendimento_paciente.dt_entrada%type;
    qt_atendimento_w		        smallint;
    qt_episodio_w		            smallint;
    ie_existe_bloqueio_w 	        varchar(1);
    ie_regra_quarter_w              varchar(1);
    qt_mes_atual_w			        bigint;
    qt_ano_atual_w			        bigint;
    dt_validade_case_w		        timestamp;
    nr_primeiro_atendimento_w       atendimento_paciente.nr_atendimento%type;

    -- cursor com os atendimentos ativo do episodio.
    c01 CURSOR FOR
      SELECT  nr_atendimento
      from  atendimento_paciente
      where  nr_seq_episodio = nr_seq_episodio_p
      and  coalesce(dt_cancelamento::text, '') = '';

      c01_w c01%rowtype;

    -- valores da tabela regra_tipo_episodio.
    c02 CURSOR FOR
        SELECT  nr_seq_tipo_episodio,
          nr_seq_subtipo_episodio,
          ie_status,
          nr_sequencia,
          ie_tipo_convenio,
          nr_seq_tipo_admissao_fat
        from    regra_tipo_episodio
        where   ((nr_seq_tipo_episodio    = nr_seq_tipo_episodio_w)    or (coalesce(nr_seq_tipo_episodio::text, '') = ''))
        and     ((nr_seq_subtipo_episodio = nr_seq_subtipo_episodio_w) or (coalesce(nr_seq_subtipo_episodio::text, '') = ''))
        and     ((ie_status               = ie_status_w)               or (coalesce(ie_status::text, '') = ''))
        and     ((ie_tipo_atendimento     = ie_tipo_atendimento_w)     or (coalesce(ie_tipo_atendimento::text, '') = ''))
        and     ((ie_tipo_convenio        = ie_tipo_convenio_w)        or (coalesce(ie_tipo_convenio::text, '') = ''))
        and     ((nr_seq_classificacao    = nr_seq_classificacao_w)    or (coalesce(nr_seq_classificacao::text, '') = ''))
        and     ((nr_seq_queixa	      = nr_seq_queixa_w)           or (coalesce(nr_seq_queixa::text, '') = ''))
        and     ((nr_seq_tipo_admissao_fat	      = nr_seq_tipo_admissao_fat_w)           or (coalesce(nr_seq_tipo_admissao_fat::text, '') = ''))
        order by nr_seq_tipo_admissao_fat, ie_tipo_convenio, nr_sequencia;

    c03 CURSOR(nr_seq_regra_tipo_epi_p bigint) FOR
        SELECT	coalesce(rtei.ie_possui_cid,'N')   ie_possui_cid,
                coalesce(rtei.qt_visitas, 9999)    qt_visitas,
                coalesce(rtei.qt_simultaneo, 9999) qt_simultaneo,
                rtei.ie_comportamento,
                rtei.ds_mensagem,
                rtei.nr_seq_documento
        from	regra_tipo_ep_item rtei
        where	rtei.nr_seq_regra_tipo_epi = nr_seq_regra_tipo_epi_p;
	
	
    c04 CURSOR FOR
        SELECT  
	  nr_seq_tipo_episodio,
          nr_seq_subtipo_episodio,
          ie_status,
	  ie_tipo_atendimento,
	  ie_tipo_convenio,
	  nr_seq_classificacao,
	  nr_seq_queixa,
	  nr_seq_tipo_admissao_fat,
          nr_sequencia
        from    regra_tipo_episodio
        where   ((nr_seq_tipo_episodio      = nr_seq_tipo_episodio_w) or (coalesce(nr_seq_tipo_episodio::text, '') = ''))
        and     ((nr_seq_subtipo_episodio   = nr_seq_subtipo_episodio_w) or (coalesce(nr_seq_subtipo_episodio::text, '') = ''))
        and     ((ie_status           	    = ie_status_w) or (coalesce(ie_status::text, '') = ''))
        and     ((ie_tipo_atendimento       = ie_tipo_atendimento_p) or (coalesce(ie_tipo_atendimento::text, '') = ''))
        and     ((ie_tipo_convenio          = ie_tipo_convenio_p) or (coalesce(ie_tipo_convenio::text, '') = ''))
        and     ((nr_seq_classificacao      = nr_seq_classificacao_p) or (coalesce(nr_seq_classificacao::text, '') = ''))
        and     ((nr_seq_queixa	            = nr_seq_queixa_p) or (coalesce(nr_seq_queixa::text, '') = ''))
        and     ((nr_seq_tipo_admissao_fat  = nr_seq_tipo_admissao_fat_p) or (coalesce(nr_seq_tipo_admissao_fat::text, '') = ''))
        order by coalesce(nr_seq_tipo_admissao_fat,999),
		 coalesce(nr_seq_queixa,999),
		 coalesce(nr_seq_classificacao,999),
		 coalesce(ie_tipo_convenio,999),
		 coalesce(ie_tipo_atendimento,999),
		 coalesce(nr_seq_subtipo_episodio,999),
		 coalesce(nr_seq_tipo_episodio,999), 
		 coalesce(ie_status,'XXX'),
		 nr_sequencia;

    procedure limpar_tab_validacao_episodio is
;
BEGIN
          delete from validacao_episodio
          where nr_seq_episodio = nr_seq_episodio_p;
    end;

    function existe_cid return;
      nr_atendimento_cid_w number := null;
    begin
      nr_atendimento_cid_w := null;
      id_existe_w          := false;

      for  c01_w in c01 loop
        begin
            select max(nr_atendimento) nr_atendimento_max
            into STRICT nr_atendimento_cid_w
            from diagnostico_doenca
            where nr_atendimento = c01_w.nr_atendimento;
        end;

        if (nr_atendimento_cid_w IS NOT NULL AND nr_atendimento_cid_w::text <> '') then
          id_existe_w := true;
          exit;
        end if;
      end loop c01_w;

      return;

    end;

begin
    if (nr_seq_episodio_p IS NOT NULL AND nr_seq_episodio_p::text <> '') then
        IF coalesce(nr_atendimento_p::text, '') = '' then
            nr_seq_tipo_episodio_w := nr_seq_tipo_episodio_p;
            nr_seq_subtipo_episodio_w := nr_seq_subtipo_episodio_p;
            ie_status_w := ie_status_p;
        ELSE
            SELECT	nr_seq_tipo_episodio,
                    nr_seq_subtipo_episodio,
                    ie_status
            INTO STRICT	nr_seq_tipo_episodio_w,
                    nr_seq_subtipo_episodio_w,
                    ie_status_w
            FROM    episodio_paciente
            WHERE   nr_sequencia = nr_seq_episodio_p;
        END IF;

        limpar_tab_validacao_episodio;

        -- quantidade de episodios ativo com a mesma situacao.
        select  count(ep.nr_sequencia) qtd_episodio
        into STRICT 	qt_episodio_mesma_situacao_w
        from    episodio_paciente ep,
                atendimento_paciente ap
        where 	ap.nr_seq_episodio = ep.nr_sequencia
        and	    ep.cd_pessoa_fisica               = cd_pessoa_fisica_p
        and     coalesce(ep.nr_seq_tipo_episodio,0)    = coalesce(nr_seq_tipo_episodio_p   ,coalesce(ep.nr_seq_tipo_episodio,0))
        and     coalesce(ep.nr_seq_subtipo_episodio,0) = coalesce(nr_seq_subtipo_episodio_p,coalesce(ep.nr_seq_subtipo_episodio,0))
        and     coalesce(ep.ie_status,' ')             = coalesce(ie_status_p              ,coalesce(ep.ie_status,' '))
        and     coalesce(ep.ie_status,' ')             <> 'T' --alta.
        and (coalesce(ap.dt_alta::text, '') = '' and coalesce(ep.dt_fim_episodio::text, '') = '')
        and     ep.nr_sequencia <> nr_seq_episodio_p
        and     coalesce(ep.dt_cancelamento::text, '') = ''
        and     coalesce(ap.dt_cancelamento::text, '') = '';


        IF (new_case_p = 'N') THEN
            select  min(ap.nr_atendimento)   nr_ultimo_atendimento_w
            into STRICT    nr_atendimento_w
            from    atendimento_paciente ap,
                    episodio_paciente ep
            where   ap.nr_seq_episodio = ep.nr_sequencia
            and 	ap.cd_pessoa_fisica = cd_pessoa_fisica_p
            and  	coalesce(ap.dt_alta::text, '') = ''
            and 	ep.nr_sequencia = nr_seq_episodio_p
            and 	ap.nr_atendimento <> nr_atendimento_p
            and     coalesce(ap.dt_cancelamento::text, '') = '';
        ELSE
            select  min(ap.nr_atendimento)   nr_ultimo_atendimento_w
            into STRICT    nr_atendimento_w
            from    atendimento_paciente ap,
                    episodio_paciente ep
            where   ap.nr_seq_episodio = ep.nr_sequencia
            and 	ap.cd_pessoa_fisica = cd_pessoa_fisica_p
            and  	coalesce(ap.dt_alta::text, '') = ''
            and     coalesce(ap.dt_cancelamento::text, '') = '';
        END IF;

        if  coalesce(ie_tipo_atendimento_p::text, '') = '' and
            coalesce(ie_tipo_convenio_p::text, '') = '' and
            coalesce(nr_seq_classificacao_p::text, '') = '' and
            coalesce(nr_seq_queixa_p::text, '') = '' and
            coalesce(nr_seq_tipo_admissao_fat_p::text, '') = '' and
            (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then

            /*A chamada foi feita pela tela de episodios, e nesta tela nao tem as informacoes de tipo de atendimento e convenio.*/

            select	ie_tipo_atendimento,
                    ie_tipo_convenio,
                    nr_seq_classificacao,
                    nr_seq_queixa,
                    nr_seq_tipo_admissao_fat
            into STRICT	ie_tipo_atendimento_w,
                    ie_tipo_convenio_w,
                    nr_seq_classificacao_w,
                    nr_seq_queixa_w,
                    nr_seq_tipo_admissao_fat_w
            from    atendimento_paciente
            where   nr_atendimento = nr_atendimento_w;
        else
            ie_tipo_atendimento_w      := ie_tipo_atendimento_p;
            ie_tipo_convenio_w         := ie_tipo_convenio_p;
            nr_seq_classificacao_w     := nr_seq_classificacao_p;
            nr_seq_queixa_w            := nr_seq_queixa_p;
            nr_seq_tipo_admissao_fat_w := nr_seq_tipo_admissao_fat_p;
        end if;

        ie_consistiu_p:= 'N';
	qt_atendimento_por_episodio_w := 0;
	qt_episodio_mesma_situacao_w := 0;

        --Acessar a tabela regra_tipo_episodio
	
	for c04_w in c04 loop
		select  coalesce(max('S'), 'N')
		into STRICT    ie_regra_quarter_w
		from    subtipo_episodio subtip,
			subtipo_episodio_validade sutivl
		where   subtip.nr_sequencia = sutivl.nr_seq_tipo
		and     subtip.nr_seq_tipo_admissao = c04_w.nr_seq_tipo_admissao_fat;
		
		if (ie_regra_quarter_w = 'N') then
		       select  count(ep.nr_sequencia) qtd_episodio
		       into STRICT    qt_episodio_mesma_situacao_w
		       from    episodio_paciente ep,
				atendimento_paciente ap
		       where   ap.nr_seq_episodio = ep.nr_sequencia
		       and     ep.cd_pessoa_fisica                 = cd_pessoa_fisica_p
		       and     coalesce(ep.nr_seq_tipo_episodio,0)      = coalesce(nr_seq_tipo_episodio_p   ,coalesce(ep.nr_seq_tipo_episodio,0))
		       and     coalesce(ep.nr_seq_subtipo_episodio,0)   = coalesce(nr_seq_subtipo_episodio_p,coalesce(ep.nr_seq_subtipo_episodio,0))
		       and     coalesce(ep.ie_status,' ')               = coalesce(ie_status_p              ,coalesce(ep.ie_status,' '))
		       and     coalesce(ep.ie_status,' ')               <> 'T' --alta.
		       and     coalesce(ap.ie_tipo_atendimento,0)       = coalesce(c04_w.ie_tipo_atendimento, coalesce(ap.ie_tipo_atendimento,0))
		       and     coalesce(ap.ie_tipo_convenio,0)          = coalesce(c04_w.ie_tipo_convenio, coalesce(ap.ie_tipo_convenio, 0))
		       and     coalesce(ap.nr_seq_classificacao,0)      = coalesce(c04_w.nr_seq_classificacao, coalesce(ap.nr_seq_classificacao,0))
		       and     coalesce(ap.nr_seq_queixa,0)	           = coalesce(c04_w.nr_seq_queixa, coalesce(ap.nr_seq_queixa,0))
		       and     coalesce(ap.nr_seq_tipo_admissao_fat,0)  = coalesce(c04_w.nr_seq_tipo_admissao_fat, coalesce(ap.nr_seq_tipo_admissao_fat, 0))
		       and (coalesce(ap.dt_alta::text, '') = '' and coalesce(ep.dt_fim_episodio::text, '') = '')
		       and     ep.nr_sequencia <> nr_seq_episodio_p
		       and     coalesce(ep.dt_cancelamento::text, '') = ''
		       and     coalesce(ap.dt_cancelamento::text, '') = '';
		       		
		
		       select  count(ap.nr_atendimento) qt_atendimento_por_episodio
		       into STRICT    qt_atendimento_por_episodio_w
		       from    atendimento_paciente ap,
			       episodio_paciente ep
		       where   ap.nr_seq_episodio = ep.nr_sequencia
		       and     ap.cd_pessoa_fisica = cd_pessoa_fisica_p
		       and     coalesce(ap.dt_alta::text, '') = ''
		       and     ep.nr_sequencia = nr_seq_episodio_p
		       and     ap.nr_atendimento <> nr_atendimento_p
		       and     coalesce(ap.dt_cancelamento::text, '') = ''
		       and     coalesce(ap.ie_tipo_atendimento,0)       = coalesce(c04_w.ie_tipo_atendimento, coalesce(ap.ie_tipo_atendimento,0))
		       and     coalesce(ap.ie_tipo_convenio,0)          = coalesce(c04_w.ie_tipo_convenio, coalesce(ap.ie_tipo_convenio, 0))
		       and     coalesce(ap.nr_seq_classificacao,0)      = coalesce(c04_w.nr_seq_classificacao, coalesce(ap.nr_seq_classificacao,0))
		       and     coalesce(ap.nr_seq_queixa,0)	           = coalesce(c04_w.nr_seq_queixa, coalesce(ap.nr_seq_queixa,0))
		       and     coalesce(ap.nr_seq_tipo_admissao_fat,0)  = coalesce(c04_w.nr_seq_tipo_admissao_fat, coalesce(ap.nr_seq_tipo_admissao_fat, 0));
		
		    for c03_w in c03(c04_w.nr_sequencia) loop
		    
			 ie_comportamento_p := c03_w.ie_comportamento;
			 ds_msg_p           := c03_w.ds_mensagem;
			
			--  2 - limite de atendimentos atingido
			if  ((qt_atendimento_por_episodio_w) >= c03_w.qt_visitas) then
			    CALL gravar_validacao_episodio(nr_seq_episodio_p,
					    2,
					    ie_comportamento_p,
					    ds_msg_p);
			    ie_consistiu_p:= 'S';
			    goto final;
			end if;
		
			-- 4  - limite de episodios simultaneos atingido 
			if (qt_episodio_mesma_situacao_w >= c03_w.qt_simultaneo) then
			    IF coalesce(nr_atendimento_p::text, '') = '' then
					CALL gravar_validacao_episodio(nr_seq_episodio_p,
						 4,
						 ie_comportamento_p,
						 ds_msg_p);
				   ie_consistiu_p:= 'S';
				else
					if ((c04_w.nr_seq_tipo_admissao_fat IS NOT NULL AND c04_w.nr_seq_tipo_admissao_fat::text <> '')
						or (c04_w.ie_tipo_atendimento IS NOT NULL AND c04_w.ie_tipo_atendimento::text <> '')
						or (c04_w.ie_tipo_convenio IS NOT NULL AND c04_w.ie_tipo_convenio::text <> '') 
						or (c04_w.nr_seq_classificacao IS NOT NULL AND c04_w.nr_seq_classificacao::text <> '') 
						or (c04_w.nr_seq_queixa IS NOT NULL AND c04_w.nr_seq_queixa::text <> '') ) then
						CALL gravar_validacao_episodio(nr_seq_episodio_p,
						 4,
						 ie_comportamento_p,
						 ds_msg_p);
						ie_consistiu_p:= 'S';
					end if;
				end if;
			   goto final;
			end if;
		    end loop c03_w;
	    end if;
	
	end loop c04_w;
	
	
        for   c02_w in c02 loop

            --Acessar a tabela regra_tipo_ep_item
            for c03_w in c03(c02_w.nr_sequencia) loop
                ie_comportamento_p := c03_w.ie_comportamento;
                ds_msg_p           := c03_w.ds_mensagem;

                if coalesce(ie_existe_bloqueio_w::text, '') = '' or ie_comportamento_p = 'B' then
                    ie_existe_bloqueio_w := c03_w.ie_comportamento;
                end if;

                --  1 - episodio sem cid
                if (c03_w.ie_possui_cid = 'S') then
                    if not(existe_cid()) then
                        CALL gravar_validacao_episodio(nr_seq_episodio_p,
                                                  1,
                                                  ie_comportamento_p,
                                                  ds_msg_p);
                        ie_consistiu_p:= 'S';
                    end if;
                end if;

                -- Valida quarter
                ie_outpatient_w := 8;

                select  max(dt_validade)
                into STRICT    dt_validade_case_w
                from    atendimento_paciente_inf
                where   nr_atendimento = nr_atendimento_w;

                if ((nr_seq_tipo_admissao_fat_w IS NOT NULL AND nr_seq_tipo_admissao_fat_w::text <> '') and
                    ie_tipo_atendimento_w = ie_outpatient_w and 
                    (dt_validade_case_w IS NOT NULL AND dt_validade_case_w::text <> '')) then

                    IF (nr_seq_tipo_admissao_fat_w = c02_w.nr_seq_tipo_admissao_fat) THEN
                        select  count(te.nr_sequencia)
                        into STRICT	ie_type_outpatient_w
                        from    tipo_episodio te
                        where   te.ie_tipo = ie_outpatient_w
                        and     te.ie_situacao = 'A'
                        and     te.nr_sequencia in (SELECT se.nr_seq_tipo_episodio
                                                    from   subtipo_episodio se,
                                                           subtipo_episodio_validade sv
                                                    where  se.nr_seq_tipo_admissao = nr_seq_tipo_admissao_fat_w
                                                    and    sv.nr_seq_tipo = se.nr_sequencia);

                        if (ie_type_outpatient_w > 0 ) then
                            dt_fim_regra_w 	  :=  dt_validade_case_w;
                            dt_inicio_regra_w := trunc(pkg_date_utils.ADD_MONTH(dt_validade_case_w, -3) + 1);

                            if ((dt_fim_regra_w IS NOT NULL AND dt_fim_regra_w::text <> '') and (dt_inicio_regra_w IS NOT NULL AND dt_inicio_regra_w::text <> '') and dt_entrada_p > dt_inicio_regra_w and dt_entrada_p < dt_fim_regra_w) then
                                qt_atendimento_w := 0;
                                qt_episodio_w := 0;

                                if (new_case_p = 'N') then
                                    select	count(1)
                                    into STRICT	qt_atendimento_w
                                    from	atendimento_paciente ap
                                    where	ap.ie_tipo_atendimento = ie_outpatient_w
                                    and	    ap.nr_seq_tipo_admissao_fat = nr_seq_tipo_admissao_fat_p
                                    and 	ap.cd_pessoa_fisica = cd_pessoa_fisica_p
                                    and 	ap.dt_entrada between dt_inicio_regra_w and dt_fim_regra_w
                                    and 	ap.nr_atendimento <> nr_atendimento_p;

                                    IF (c03_w.qt_visitas > 0 AND c03_w.qt_visitas <> 9999 AND qt_atendimento_w >= c03_w.qt_visitas) THEN
                                        CALL gravar_validacao_episodio(nr_seq_episodio_p,
                                                                  4,
                                                                  ie_comportamento_p,
                                                                  ds_msg_p);
                                        ie_consistiu_p := 'S';
                                        goto final;
                                    end if;
                                elsif (new_case_p = 'S')  then
                                    select	count(1)
                                    into STRICT	qt_episodio_w
                                    from	episodio_paciente epipac
                                    where	epipac.nr_seq_tipo_episodio = nr_seq_tipo_episodio_w
                                    and 	epipac.cd_pessoa_fisica = cd_pessoa_fisica_p
                                    and 	epipac.dt_episodio between dt_inicio_regra_w and dt_fim_regra_w
                                    and     coalesce(epipac.dt_fim_episodio::text, '') = ''
                                    and     coalesce(epipac.dt_cancelamento::text, '') = ''
                                    and 	epipac.nr_sequencia <> nr_seq_episodio_p;

                                    IF (c03_w.qt_simultaneo > 0 AND c03_w.qt_simultaneo <> 9999 AND qt_episodio_w >= c03_w.qt_simultaneo) THEN
                                        CALL gravar_validacao_episodio(nr_seq_episodio_p,
                                                                  4,
                                                                  'A',
                                                                  ds_msg_p);
                                        ie_consistiu_p := 'S';
                                        goto final;
                                    END IF;
                                end if;
                            else
                                if (new_case_p = 'N') then
                                    gravar_validacao_episodio(nr_seq_episodio_p,
                                                              4,
                                                              ie_comportamento_p,
                                                              wheb_mensagem_pck.get_texto(1089483));
                                    ie_consistiu_p := 'S';
                                    goto final;
                                 end if;
                            end if;
                        end if;
                    END IF;
                end if;

                -- 5 - falta de documentacao
                if (c03_w.nr_seq_documento IS NOT NULL AND c03_w.nr_seq_documento::text <> '') then
                    select	CASE WHEN count(1)=0 THEN  'N'  ELSE 'S' END
                    into STRICT	ie_possui_doc_necessario_w
                    from	atendimento_paciente_anexo
                    where	nr_atendimento = nr_atendimento_w
                    and	nr_seq_documento = c03_w.nr_seq_documento;

                    if (ie_possui_doc_necessario_w = 'N') then
                        CALL gravar_validacao_episodio(
                            nr_seq_episodio_p,
                            5,
                            ie_comportamento_p,
                            ds_msg_p);
                        ie_consistiu_p:= 'S';
                        goto final;
                    end if;
                end if;
            end loop c03_w;
        end loop c02_w;

        if (ie_existe_bloqueio_w IS NOT NULL AND ie_existe_bloqueio_w::text <> '') then
          ie_comportamento_p := ie_existe_bloqueio_w;
        end if;

        if (coalesce(ie_consistiu_p, 'S') = 'N')then
            select	max(ie_tipo)
            into STRICT	ie_tipo_w
            from	tipo_episodio
            where 	nr_sequencia = nr_seq_tipo_episodio_p;
            ds_msg_p := consiste_gerar_novo_atend(cd_pessoa_fisica_p, wheb_usuario_pck.get_nm_usuario, ie_tipo_w, wheb_usuario_pck.get_cd_estabelecimento, null, null, ds_msg_p, nr_seq_classificacao_p);
            if (ds_msg_p IS NOT NULL AND ds_msg_p::text <> '')then
                ie_consistiu_p:= 'I';
            end if;
        end if;
        <<final>>
        commit;

    end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE valida_novo_episodio ( nr_seq_episodio_p bigint, cd_pessoa_fisica_p text default null, nr_seq_tipo_episodio_p bigint default null, nr_seq_subtipo_episodio_p bigint default null, ie_status_p text default null, ie_tipo_atendimento_p bigint default null, ie_tipo_convenio_p bigint default null, nr_atendimento_p bigint DEFAULT NULL, nr_seq_classificacao_p bigint DEFAULT NULL, nr_seq_queixa_p bigint DEFAULT NULL, ie_consistiu_p INOUT text DEFAULT NULL, ie_comportamento_p INOUT text DEFAULT NULL, ds_msg_p INOUT text DEFAULT NULL, nr_seq_tipo_admissao_fat_p bigint default null, dt_entrada_p timestamp default null, new_case_p text default 'N') FROM PUBLIC;

