-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_solic_pront_agenda_gp ( cd_pessoa_fisica_p text, nr_seq_agecons_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text, cd_setor_agenda_p bigint, nr_seq_lote_p bigint default null, nr_seq_sala_p bigint DEFAULT NULL) AS $body$
DECLARE


nr_seq_solic_w	bigint;
cd_setor_atendimento_w	bigint;
cd_estabelecimento_w	bigint;
cd_pessoa_solicitante_w	varchar(10);
nr_seq_prontuario_w	bigint;
ds_lista_informacao_w	varchar(255);
nr_seq_motivo_pront_w	bigint;
qt_dias_parametro_w	varchar(255);
dt_devolucao_w		timestamp;
nr_seq_motivo_lote_w	bigint;
dt_prevista_lote_w	timestamp;
dt_devolucao_lote_w	timestamp;
ie_setor_atendimento_w	varchar(1);
ie_setor_agrupamento_w	varchar(1);
cd_setor_sala_w		integer;
nr_seq_agrupamento_setor_w	integer;
nr_seq_tipo_w bigint;


C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	same_prontuario a
	where (coalesce(cd_pessoa_fisica_p::text, '') = ''  or a.cd_pessoa_fisica   = cd_pessoa_fisica_p)
	and     coalesce(a.nr_seq_caixa::text, '') = ''
	and     a.ie_status not in ('2','5','6','10')
	and     a.nr_sequencia not in (	SELECT   b.nr_seq_prontuario
					from     same_solic_pront_envelope b
					where    b.nr_seq_prontuario    = a.nr_sequencia
					and      b.nr_seq_solic         = nr_seq_solic_w)
	--and      a.dt_periodo_final   is not null
	and      (a.dt_periodo_inicial IS NOT NULL AND a.dt_periodo_inicial::text <> '');

C02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	same_prontuario a,
		same_local b
	where   a.nr_seq_local = b.nr_sequencia
	and (coalesce(cd_pessoa_fisica_p::text, '') = '' or a.cd_pessoa_fisica   = cd_pessoa_fisica_p)
	and     coalesce(a.nr_seq_caixa::text, '') = ''
	and     a.ie_status not in ('2','5','6','10')
	and     a.nr_sequencia not in (	SELECT   b.nr_seq_prontuario
					from     same_solic_pront_envelope b
					where    b.nr_seq_prontuario    = a.nr_sequencia
					and      b.nr_seq_solic         = 0)
	and      (a.dt_periodo_inicial IS NOT NULL AND a.dt_periodo_inicial::text <> '')
	--and      a.dt_periodo_final   is not null
	and	 b.nr_seq_agrupamento = nr_seq_agrupamento_setor_w;


BEGIN

dt_devolucao_w := null;
qt_dias_parametro_w 	:= coalesce(Obter_Valor_Param_Usuario(941,42,  Obter_perfil_Ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento),'0');
ie_setor_atendimento_w 	:= coalesce(Obter_Valor_Param_Usuario(821,356, Obter_perfil_Ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento),'E');

ie_setor_agrupamento_w := obter_param_usuario(821, 400, Obter_perfil_Ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, ie_setor_agrupamento_w);

if (qt_dias_parametro_w > '0') and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') then
	dt_devolucao_w := dt_agenda_p + obter_somente_numero(qt_dias_parametro_w);
end if;

ds_lista_informacao_w	:= '';

/* Obter o setor exclusivo e o estabelecimento da agenda + Sequencia do Tipo de Prontuario */

select	max(cd_setor_exclusivo),
	max(cd_estabelecimento),
	max(nr_seq_motivo_pront),
   max(nr_seq_tipo)
into STRICT	cd_setor_atendimento_w,
	cd_estabelecimento_w,
	nr_seq_motivo_pront_w,
   nr_seq_tipo_w
from	agenda
where	cd_agenda		= cd_agenda_p;

select	max(a.cd_setor_atendimento)
into STRICT	cd_setor_sala_w
from	agenda_sala_consulta a
where	a.nr_sequencia = nr_seq_sala_p;

select	max(nr_seq_agrupamento)
into STRICT	nr_seq_agrupamento_setor_w
from	setor_atendimento
where	cd_setor_atendimento = cd_setor_sala_w;

if (ie_setor_atendimento_w = 'S')then
	select	coalesce(max(a.cd_setor_atendimento), cd_setor_atendimento_w)
	into STRICT	cd_setor_atendimento_w
	from	agenda_sala_consulta a
	where	a.nr_sequencia = nr_seq_sala_p;
end if;

/* Obter o número do atendimento e a pessoa solicitante */

select	substr(Obter_Pessoa_Fisica_Usuario(nm_usuario_p,'C'),1,10)
into STRICT	cd_pessoa_solicitante_w
;

/* Obter o motivo da solicitação e data prevista do lote */

if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	select	max(nr_seq_motivo),
		max(dt_prevista),
		max(dt_devolucao_prevista)
	into STRICT	nr_seq_motivo_lote_w,
		dt_prevista_lote_w,
		dt_devolucao_lote_w
	from	same_solic_pront_lote
	where	nr_sequencia = nr_seq_lote_p;
end if;


if (cd_setor_atendimento_w > 0) and (cd_estabelecimento_w > 0) then
	begin

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_solic_w
	from	same_solic_pront
	where	cd_estabelecimento		= cd_estabelecimento_w
	and	nr_seq_agecons			= nr_seq_agecons_p;

	if (nr_seq_solic_w = 0) then

		/* Verifica se possui alguma solicitação existente para o estabelecimento, setor, data */

		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_solic_w
		from	same_solic_pront
		where	cd_estabelecimento		= cd_estabelecimento_w
		and	cd_setor_solicitante		= coalesce(cd_setor_agenda_p,cd_setor_atendimento_w)
		and	trunc(dt_prevista, 'dd')	= trunc(dt_agenda_p, 'dd')
		and	cd_pessoa_fisica		= cd_pessoa_fisica_p
		and		ie_status <> 'C';
	else

		update	same_solic_pront
		set	cd_setor_solicitante 	= CASE WHEN ie_setor_atendimento_w='E' THEN  coalesce(cd_setor_agenda_p,cd_setor_atendimento_w)  ELSE cd_setor_atendimento_w END ,
			dt_prevista		= CASE WHEN nr_seq_lote_p = NULL THEN dt_agenda_p  ELSE coalesce(dt_prevista_lote_w,dt_agenda_p) END
		where	nr_seq_agecons		= nr_seq_agecons_p
		and	ie_status		= 'P';

	end if;

	/*Se não possuir, cria uma solicitação */

	if (nr_seq_solic_w = 0) then
		begin

		select	nextval('same_solic_pront_seq')
		into STRICT	nr_seq_solic_w
		;

		insert into same_solic_pront(
			nr_sequencia,
			cd_estabelecimento,
			dt_prevista,
			dt_solicitacao,
			dt_atualizacao,
			nm_usuario,
			ie_status,
			cd_pessoa_fisica,
			cd_pessoa_solicitante,
			ie_tipo_solicitacao,
			ie_urgente,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_setor_solicitante,
			nr_seq_agecons,
			dt_liberacao,
			nr_seq_motivo,
			dt_devolucao_prevista,
			nr_seq_lote,
         nr_seq_tipo)
		values (	nr_seq_solic_w,
			cd_estabelecimento_w,
			CASE WHEN coalesce(nr_seq_lote_p::text, '') = '' THEN dt_agenda_p  ELSE coalesce(dt_prevista_lote_w,dt_agenda_p) END ,
			clock_timestamp(),
			clock_timestamp(),
			nm_usuario_p,
			'P',
			cd_pessoa_fisica_p,
			cd_pessoa_solicitante_w,
			'O',
			'N',
			clock_timestamp(),
			nm_usuario_p,
			CASE WHEN ie_setor_atendimento_w='E' THEN  coalesce(cd_setor_agenda_p,cd_setor_atendimento_w)  ELSE cd_setor_atendimento_w END ,
			nr_seq_agecons_p,
			clock_timestamp(),
			CASE WHEN coalesce(nr_seq_lote_p::text, '') = '' THEN nr_seq_motivo_pront_w  ELSE coalesce(nr_seq_motivo_lote_w,nr_seq_motivo_pront_w) END ,
			CASE WHEN coalesce(nr_seq_lote_p::text, '') = '' THEN dt_devolucao_w  ELSE coalesce(dt_devolucao_lote_w,dt_devolucao_w) END ,
			nr_seq_lote_p,
         nr_seq_tipo_w);

		if (ie_setor_agrupamento_w = 'S') then
			open C02;
			loop
			fetch C02 into
				nr_seq_prontuario_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				ds_lista_informacao_w	:= nr_seq_prontuario_w || ',';
				CALL Same_Inserir_Pront_Solic(nr_seq_solic_w, ds_lista_informacao_w, nm_usuario_p);
				end;
			end loop;
			close C02;
		else
			open C01;
			loop
			fetch C01 into
				nr_seq_prontuario_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin
				ds_lista_informacao_w	:= nr_seq_prontuario_w || ',';
				CALL Same_Inserir_Pront_Solic(nr_seq_solic_w, ds_lista_informacao_w, nm_usuario_p);
				end;
			end loop;
			close C01;
		end if;
		end;
	end if;

	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_solic_pront_agenda_gp ( cd_pessoa_fisica_p text, nr_seq_agecons_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text, cd_setor_agenda_p bigint, nr_seq_lote_p bigint default null, nr_seq_sala_p bigint DEFAULT NULL) FROM PUBLIC;

