-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_pre_venda ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w		intpd_eventos_sistema.nr_seq_sistema%type;
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
pre_venda_w				pre_venda%rowtype;
person_name_w			person_name%rowtype;
pre_venda_item_w		pre_venda_item%rowtype;
procedimento_w			procedimento%rowtype;
nr_ordem_delete_w		pre_venda.nr_sequencia%type;
pessoa_fisica_w			pessoa_fisica%rowtype;
ds_erro_w				varchar(4000);
ie_sistema_externo_w	varchar(15);
ie_erro_w 				varchar(1) := 'N';
ie_exception_w			varchar(1) := 'N';
i						integer;
qt_registros_w			bigint;

c01 CURSOR FOR
SELECT	*	
from	xmltable('/STRUCTURE/PRE_SALE' passing xml_p columns
		ie_action			varchar(40)	path	'IE_ACTION',
		cd_estabelecimento		varchar(40)	path	'CD_ESTABLISHMENT',
		cd_cnpj_empresa			varchar(40)	path	'CD_COMPANY',
		nr_ordem_venda			varchar(40)	path	'NR_SALES_ORDER',
		nr_sequencia			bigint	path	'NR_SEQUENCE',
		dt_ordem_venda			varchar(15)	path	'DT_SALES_ORDER',
		dt_cancelamento			varchar(15)	path	'DT_CANCELLATION',
		nm_usuario_cancelamento		varchar(15)	path	'NM_CANCELLATION_USER',
		ie_situacao			varchar(1)	path	'IE_SITUATION',
		nm_usuario			varchar(15)	path	'NM_USER',
		dt_atualizacao			varchar(15)	path	'DT_UPDATE',
		ie_agrupada				varchar(1)	path	'IE_GROUPED',
		xml_insurances			xml		path	'ITEMS');
	
c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	*
from	xmltable('/ITEMS/ITEM' passing c01_w.xml_insurances columns
		ie_action				varchar(40)	path	'IE_ACTION',
		cd_procedimento			varchar(40)	path	'CD_PROCEDURE',
		cd_beneficiario			varchar(40)	path	'CD_BENEFICIARY',
		dt_inicio_vigencia		varchar(15)	path	'DT_VALIDITY_START',
		dt_fim_vigencia			varchar(15)	path	'DT_END_VALIDITY',
		nm_beneficiario			varchar(128)	path	'NM_FIRST_NAME',
		nm_ultimo_sobrenome		varchar(128)	path	'NM_LAST_NAME',
		nm_sobrenome_meio		varchar(128)	path	'NM_MIDDLE_NAME',
		dt_nascimento			varchar(15)	path	'DT_BIRTH',
		ie_sexo					varchar(1)		path	'IE_GENDER',
		nm_usuario				varchar(15)	path	'NM_USER',
		dt_atualizacao			varchar(15)	path	'DT_UPDATE',
		nm_medico				varchar(255) 	path 	'NM_PHYSICIAN');

c02_w	c02%rowtype;


BEGIN

update	intpd_fila_transmissao
set		ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

commit;

begin
select	coalesce(b.ie_conversao,'I'),
		nr_seq_sistema,
		nr_seq_projeto_xml,
		nr_seq_regra_conv
into STRICT	ie_conversao_w,
		nr_seq_sistema_w,
		nr_seq_projeto_xml_w,
		nr_seq_regra_w
from	intpd_fila_transmissao a,
		intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and		a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w	:=	nr_seq_sistema_w;

reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe			:=	'R';
reg_integracao_w.ie_sistema_externo			:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao				:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml			:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao		:=	nr_seq_regra_w;
reg_integracao_w.intpd_log_receb.delete;
reg_integracao_w.qt_reg_log					:=	0;

open c01;
loop
fetch c01 into	
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin	

	if (coalesce(upper(c01_w.ie_action),'INSERT') = 'DELETE') then
	
		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_ordem_delete_w
		from	pre_venda
		where	nr_sequencia = c01_w.nr_sequencia;
		
		if (nr_ordem_delete_w > 0) then
		
			select	count(*)
			into STRICT	qt_registros_w
			from	pre_venda_item
			where	nr_seq_pre_venda = nr_ordem_delete_w
			and	((nr_atendimento > 0) or (nr_prescricao > 0));
			
			if (qt_registros_w > 0) then
				
				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1024823),'INTPDTASY','0009');
				/*Esta pré venda já foi utilizada em um atendimento, portanto, não é permitido altera-la ou excluí-la.*/

				ie_erro_w := 'S';			
			else		
		
				delete
				from	pre_venda
				where	nr_sequencia = nr_ordem_delete_w;
			end if;			
		else
			intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1024820),'INTPDTASY','0004');
			/*Código da pré venda inválido ou inexistente no Tasy para exclusão ou alteração do registro.*/

			ie_erro_w := 'S';		
		end if;
			
	else
		-- INSERT or UPDATE
		ie_erro_w			:= 	'N';
		reg_integracao_w.nm_elemento	:=	'PRE_SALE';
		reg_integracao_w.nm_tabela	:=	'PRE_VENDA';
		reg_integracao_w.nr_seq_visao	:=	98302;
		
		select	coalesce(max(nr_sequencia),0)
		into STRICT	pre_venda_w.nr_sequencia
		from	pre_venda
		where	nr_sequencia = c01_w.nr_sequencia;
		
		begin
		/*'Busca o registro atual do Tasy pela PK'
		Esse tratamento foi necessário porque quando é update, o sistema externo só envia as informações alteradas e o restante dos campos eles mandam vazio. Então temos que buscar a informação que já está gravada na tabela.*/
		select	*
		into STRICT	pre_venda_w
		from	pre_venda
		where 	nr_sequencia = pre_venda_w.nr_sequencia;
		exception
		when others then
			null;
		end;		
		
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', c01_w.cd_estabelecimento, 'S', pre_venda_w.cd_estabelecimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.cd_estabelecimento := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CNPJ_EMPRESA', c01_w.cd_cnpj_empresa, 'S', pre_venda_w.cd_cnpj_empresa) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.cd_cnpj_empresa := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_ORDEM_VENDA', c01_w.nr_ordem_venda, 'N', pre_venda_w.nr_ordem_venda) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.nr_ordem_venda := _ora2pg_r.ds_valor_retorno_p;		
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ORDEM_VENDA', c01_w.dt_ordem_venda, 'N', pre_venda_w.dt_ordem_venda) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.dt_ordem_venda := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_CANCELAMENTO', c01_w.dt_cancelamento, 'N', pre_venda_w.dt_cancelamento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.dt_cancelamento := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO_CANCELAMENTO', c01_w.nm_usuario_cancelamento, 'N', pre_venda_w.nm_usuario_cancelamento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.nm_usuario_cancelamento := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_SITUACAO', c01_w.ie_situacao, 'N', pre_venda_w.ie_situacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.ie_situacao := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.nm_usuario, 'N', pre_venda_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c01_w.dt_atualizacao, 'N', pre_venda_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_AGRUPADA', c01_w.ie_agrupada, 'N', pre_venda_w.ie_agrupada) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_w.ie_agrupada := _ora2pg_r.ds_valor_retorno_p;
		pre_venda_w.dt_atualizacao_nrec		:=	pre_venda_w.dt_atualizacao;
		pre_venda_w.nm_usuario_nrec 		:= 	pre_venda_w.nm_usuario;
		
		if (coalesce(pre_venda_w.ie_agrupada::text, '') = '' or pre_venda_w.ie_agrupada = '') then
			pre_venda_w.ie_agrupada := 'N';
		end if;
		
		/*Consistencia para nao deixar inserir ordem de venda com o mesmo codigo*/

		if (coalesce(upper(c01_w.ie_action),'INSERT') = 'INSERT') then
			
			select	count(*)
			into STRICT	qt_registros_w
			from	pre_venda
			where	nr_ordem_venda = pre_venda_w.nr_ordem_venda
			and	ie_situacao = 'A'
			and	coalesce(dt_cancelamento::text, '') = '';
			
			if (qt_registros_w > 0) then
				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1028800),'INTPDTASY','0010');
				/*Já existe uma ordem de venda com este número no Tasy. Não será possível realizar a inserção deste registro em duplicidade.*/

				ie_erro_w := 'S';			
			end if;	
		end if;		
		
		if	(reg_integracao_w.qt_reg_log = 0 AND ie_erro_w = 'N') then
		
			if (pre_venda_w.nr_sequencia > 0) then
			
				select	count(*)
				into STRICT	qt_registros_w
				from	pre_venda_item
				where	nr_seq_pre_venda = pre_venda_w.nr_sequencia
				and	((nr_atendimento > 0) or (nr_prescricao > 0));
				
				if (qt_registros_w > 0) then
				
					intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1024823),'INTPDTASY','0009');
					/*Esta pré venda já foi utilizada em um atendimento, portanto, não é permitido altera-la ou excluí-la.*/

					ie_erro_w := 'S';			
				else	
				
					update	pre_venda
					set	row = pre_venda_w
					where	nr_sequencia = pre_venda_w.nr_sequencia;				
				end if;				
			else
				if (coalesce(upper(c01_w.ie_action),'INSERT') = 'UPDATE') then
					
					intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1024820),'INTPDTASY','0004');
					/*Código da pré venda inválido ou inexistente no Tasy para exclusão ou alteração do registro.*/

					ie_erro_w := 'S';
				else
					
					select	nextval('pre_venda_seq')
					into STRICT	pre_venda_w.nr_sequencia
					;
				
					insert into pre_venda values (pre_venda_w.*);				
				end if;
			end if;
		end if;	
		
		if (ie_erro_w = 'N') then
			
			open C02;
			loop
			fetch C02 into	
				c02_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin						
				
				select	count(*)
				into STRICT	qt_registros_w
				from	pre_venda_item
				where	nr_seq_pre_venda = pre_venda_w.nr_sequencia
				and	((nr_atendimento > 0) or (nr_prescricao > 0));
				
				if (qt_registros_w > 0) then
				
					intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1024823),'INTPDTASY','0009');
					/*Esta pré venda já foi utilizada em um atendimento, portanto, não é permitido altera-la ou excluí-la.*/

					ie_erro_w := 'S';	
				
				else
				
					reg_integracao_w.nm_elemento			:=	'ITEM';	
					reg_integracao_w.nm_tabela			:=	'PRE_VENDA_ITEM';
					reg_integracao_w.nr_seq_visao			:=	98325;
							
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_PROCEDIMENTO', c02_w.cd_procedimento, 'N', procedimento_w.cd_sistema_ant) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; procedimento_w.cd_sistema_ant := _ora2pg_r.ds_valor_retorno_p; /*Não consistir porque eles vão mandar o CD_SISTEMA_ANT neste campo*/
					
					select	coalesce(max(cd_procedimento),0)
					into STRICT	pre_venda_item_w.cd_procedimento
					from	procedimento
					where	ie_situacao = 'A'
					and	cd_sistema_ant = procedimento_w.cd_sistema_ant;
					
					if (pre_venda_item_w.cd_procedimento > 0) then
						select	max(ie_origem_proced)
						into STRICT	pre_venda_item_w.ie_origem_proced
						from 	procedimento
						where	cd_procedimento = pre_venda_item_w.cd_procedimento;
					else			
						intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_Texto(1025268, 'CD_SISTEMA_ANT_W='|| procedimento_w.cd_sistema_ant),'INTPDTASY','0004');
						/*Não existe nenhum procedimento registrado no Tasy com o código do sistema externo #@CD_SISTEMA_ANT_W.#@*/

						ie_erro_w := 'S';	
					end if;					
									
					if (ie_erro_w = 'N') then
					
						if (coalesce(upper(c02_w.ie_action),'INSERT') = 'UPDATE') then
							begin
							/*'Busca o registro atual do Tasy pela PK'
							Esse tratamento foi necessário porque quando é update, o sistema externo só envia as informações alteradas e o restante dos campos eles mandam vazio. Então temos que buscar a informação que já está gravada na tabela.*/
							select	*
							into STRICT	pre_venda_item_w
							from	pre_venda_item
							where 	nr_seq_pre_venda = pre_venda_w.nr_sequencia
							and	cd_procedimento = pre_venda_item_w.cd_procedimento
							and	ie_origem_proced = pre_venda_item_w.ie_origem_proced;
							exception
							when others then
								null;
							end;
						end if;
						
						begin
						if (coalesce(upper(c02_w.ie_action),'INSERT') <> 'DELETE') then
						
							SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_BENEFICIARIO', c02_w.cd_beneficiario, 'S', pre_venda_item_w.cd_beneficiario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_item_w.cd_beneficiario := _ora2pg_r.ds_valor_retorno_p;
							SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_INICIO_VIGENCIA', c02_w.dt_inicio_vigencia, 'N', pre_venda_item_w.dt_inicio_vigencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_item_w.dt_inicio_vigencia := _ora2pg_r.ds_valor_retorno_p;		
							SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_FIM_VIGENCIA', c02_w.dt_fim_vigencia, 'N', pre_venda_item_w.dt_fim_vigencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_item_w.dt_fim_vigencia := _ora2pg_r.ds_valor_retorno_p;		
							SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_NASCIMENTO', c02_w.dt_nascimento, 'N', pre_venda_item_w.dt_nascimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_item_w.dt_nascimento := _ora2pg_r.ds_valor_retorno_p;
							SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_SEXO', c02_w.ie_sexo, 'N', pre_venda_item_w.ie_sexo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_item_w.ie_sexo := _ora2pg_r.ds_valor_retorno_p;
							SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c02_w.nm_usuario, 'N', pre_venda_item_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_item_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
							SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c02_w.dt_atualizacao, 'N', pre_venda_item_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_item_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
							SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_MEDICO', c02_w.nm_medico, 'N', pre_venda_item_w.nm_medico) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pre_venda_item_w.nm_medico := _ora2pg_r.ds_valor_retorno_p;
							pre_venda_item_w.nr_seq_pre_venda		:= 	pre_venda_w.nr_sequencia;
							pre_venda_item_w.nm_usuario_nrec		:= 	pre_venda_item_w.nm_usuario;
							pre_venda_item_w.dt_atualizacao_nrec		:= 	pre_venda_item_w.dt_atualizacao;
							
							if (reg_integracao_w.qt_reg_log = 0) then
								
								/*Verifica se tem uma pessoa cadastrada com o código de beneficiario que vem no XML*/

								select	count(*)
								into STRICT	qt_registros_w
								from	pessoa_fisica
								where	cd_pessoa_fisica = pre_venda_item_w.cd_beneficiario;
								
								
								/*Se tem uma pessoa cadastrada, verifica se tem person_name cadastrada.*/

								if (qt_registros_w > 0) then
								
									select  coalesce(max(a.nr_seq_person_name),0)
									into STRICT    person_name_w.nr_sequencia
									from    pessoa_fisica a,
										person_name b
									where   a.nr_seq_person_name = b.nr_sequencia
									and	a.cd_pessoa_fisica = pre_venda_item_w.cd_beneficiario;
								end if;
								
								/*Registra uma person_name sempre que;
									- Não tem pessoa cadastrada, ou
									- A pessao cadastrada não tem persona name vinculada */
	
									
								if (c02_w.nm_beneficiario IS NOT NULL AND c02_w.nm_beneficiario::text <> '') then
									begin
									
									if	((qt_registros_w = 0) or (person_name_w.nr_sequencia = 0)) then
								
										select	nextval('person_name_seq')
										into STRICT	person_name_w.nr_sequencia
										;
										
										SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_BENEFICIARIO', c02_w.nm_beneficiario, 'N', person_name_w.ds_given_name) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; person_name_w.ds_given_name := _ora2pg_r.ds_valor_retorno_p;
										SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_ULTIMO_SOBRENOME', c02_w.nm_ultimo_sobrenome, 'N', person_name_w.ds_component_name_1) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; person_name_w.ds_component_name_1 := _ora2pg_r.ds_valor_retorno_p;
										SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_SOBRENOME_MEIO', c02_w.nm_sobrenome_meio, 'N', person_name_w.ds_family_name) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; person_name_w.ds_family_name := _ora2pg_r.ds_valor_retorno_p;
											
										person_name_w.dt_atualizacao		:=	clock_timestamp();
										person_name_w.nm_usuario		:=	pre_venda_item_w.nm_usuario;
										person_name_w.dt_atualizacao_nrec	:=	clock_timestamp();
										person_name_w.nm_usuario_nrec		:=	pre_venda_item_w.nm_usuario_nrec;
										person_name_w.ds_type			:=	'main';
										pessoa_fisica_w.nr_seq_person_name	:=	person_name_w.nr_sequencia;	
										
										/*Insere um person_name*/

										insert into person_name values (person_name_w.*);
									end if;
									
									/*Se não tem pessoa cadastrada, faz o registro nessa rotina*/

									if (qt_registros_w = 0) then
									
										select	nextval('pessoa_fisica_seq')
										into STRICT	pessoa_fisica_w.cd_pessoa_fisica
										;
										
										pessoa_fisica_w.ie_tipo_pessoa		:=	1;
										pessoa_fisica_w.nm_pessoa_fisica	:=	pkg_name_utils.get_person_name(person_name_w.nr_sequencia, pre_venda_w.cd_estabelecimento, NULL, 'main');
										pessoa_fisica_w.dt_atualizacao		:= 	coalesce(pre_venda_item_w.dt_atualizacao, clock_timestamp());
										pessoa_fisica_w.nm_usuario		:=	coalesce(pre_venda_item_w.nm_usuario, 'INTPDTASY');
										pessoa_fisica_w.dt_nascimento		:=	pre_venda_item_w.dt_nascimento;
										pessoa_fisica_w.ie_sexo 		:=	pre_venda_item_w.ie_sexo;									
										pre_venda_item_w.cd_beneficiario	:=	pessoa_fisica_w.cd_pessoa_fisica;
									
										/*Insere a pessoa física*/

										insert into pessoa_fisica values (pessoa_fisica_w.*);
									else
										/*Faz update na pessoa ja existente*/

										update	pessoa_fisica
										set	nr_seq_person_name 	= 	person_name_w.nr_sequencia
										where	cd_pessoa_fisica	= 	pre_venda_item_w.cd_beneficiario;
									end if;
									end;
								end if;
								
								select (coalesce(max(nr_seq_item),0)) + 1
								into STRICT 	pre_venda_item_w.nr_seq_item
								from	pre_venda_item
								where	nr_seq_pre_venda = pre_venda_w.nr_sequencia;
												
								select	nextval('pre_venda_item_seq')
								into STRICT	pre_venda_item_w.nr_sequencia
								;
									
								insert into pre_venda_item values (pre_venda_item_w.*);
								
							end if;
						else
					
							select	max(nr_sequencia)
							into STRICT	pre_venda_item_w.nr_sequencia
							from	pre_venda_item
							where	nr_seq_pre_venda = pre_venda_w.nr_sequencia;
							
							if (coalesce(pre_venda_item_w.nr_sequencia,0) > 0) then
								
								delete	FROM pre_venda_item
								where	nr_sequencia = pre_venda_item_w.nr_sequencia
								and	cd_procedimento = pre_venda_item_w.cd_procedimento;
							else
								/*Código do broker inválido ou inexistente no Tasy para exclusão ou alteração do registro.*/

								intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1010175),'INTPDTASY','0004');
								ie_erro_w := 'S';							
							end if;
						end if;
						end;
					end if;
				end if;
				end;
			end loop;
			close C02;
		end if;
	end if;
	end;
end loop;
close c01;

exception
when others then
	begin
	ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
	rollback;
	
	update	intpd_fila_transmissao
	set	ie_status = 'E',
		cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;
	ie_exception_w := 'S';
	end;
end;

if (ie_exception_w = 'N') then

	if	((reg_integracao_w.qt_reg_log > 0) or (ie_erro_w = 'S')) then
		begin
		rollback;
		
		/*Este delete foi feito para não criar uma ordem de venda pela metade.
		Isso ocorria quando algum item da ordem de venda dava problema, e a ordem de venda era criada só com alguns itens.*/
		if (coalesce(upper(c02_w.ie_action),'INSERT') <> 'DELETE') then
			delete
			from	pre_venda a
			where	a.nr_sequencia = pre_venda_w.nr_sequencia;
		end if;
		
		update	intpd_fila_transmissao
		set	ie_status		= 'E',
			cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
			ds_log			= ds_erro_w,
			nr_doc_externo	 	= c01_w.nr_ordem_venda
		where	nr_sequencia		= nr_sequencia_p;
		
		for i in 0..reg_integracao_w.qt_reg_log-1 loop
			intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY',reg_integracao_w.intpd_log_receb[i].cd_default_message);
		end loop;		
		end;
	else
		update	intpd_fila_transmissao
		set	ie_status 	 	= 'S',
			cd_default_message 	= '0000',
			nr_seq_documento 	= coalesce(pre_venda_w.nr_sequencia,nr_ordem_delete_w),
			nr_doc_externo 	 	= c01_w.nr_ordem_venda
		where	nr_sequencia	 	= nr_sequencia_p;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_pre_venda ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

