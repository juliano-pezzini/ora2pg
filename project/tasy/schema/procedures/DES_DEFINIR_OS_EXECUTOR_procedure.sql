-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE des_definir_os_executor ( nr_ordem_servico_p bigint, nm_usuario_exec_p text, dt_prevista_p timestamp, qt_min_prev_p bigint, nr_seq_ativ_exec_p bigint, ie_prioridade_desen_p bigint, ie_finalizar_exec_p text, ie_finalizar_exec_usuario_p text, dt_liberacao_p timestamp, nm_usuario_p text) AS $body$
DECLARE


nr_seq_fila_w				CADASTRO_FILA.NR_SEQUENCIA%type;
nr_seq_ativ_prev_w			MAN_ORDEM_ATIV_PREV.NR_SEQUENCIA%type;
nm_usuario_ult_exec_w			USUARIO.NM_USUARIO%type;
qt_registro_ww				bigint;
nr_seq_pacote_w				DES_PACOTE_VERSAO.NR_SEQUENCIA%type;
nr_seq_pacote_os_w			DES_PACOTE_VERSAO.NR_SEQUENCIA%type;
ie_programacao_w			varchar(1);
nr_seq_proj_cron_etapa_w		man_ordem_servico.nr_seq_proj_cron_etapa%type;
nr_seq_gerencia_w			GERENCIA_WHEB.NR_SEQUENCIA%Type;
qt_usuario_sup_w			bigint;	



BEGIN

select	max(nr_sequencia)
into STRICT	nr_seq_fila_w
from	cadastro_fila
where	nm_usuario_fila	= nm_usuario_exec_p;

/*Retornar OS para a fila */

if (nr_seq_fila_w IS NOT NULL AND nr_seq_fila_w::text <> '') then
	begin
	/*Limpa o final de execucao da fila */

	update	man_ordem_servico_exec
	set	dt_fim_execucao	 = NULL,
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_seq_ordem	= nr_ordem_servico_p
	and	nm_usuario_exec	= nm_usuario_exec_p;

	insert into man_ordem_ativ_prev(
		nr_sequencia,
		nr_seq_ordem_serv,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		dt_prevista,
		qt_min_prev,
		nr_seq_ativ_exec,
		nm_usuario_prev,
		ie_prioridade_desen)
	SELECT	nextval('man_ordem_ativ_prev_seq'),
		nr_ordem_servico_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		dt_prevista_p,
		coalesce(qt_min_prev_p,a.qt_min_prev),
		nr_seq_ativ_exec,
		nm_usuario_exec_p,
		ie_prioridade_desen_p
	from	man_ordem_ativ_prev a
	where	a.nr_seq_ordem_serv	= nr_ordem_servico_p
	and	a.nm_usuario_prev	= nm_usuario_exec_p
	and	coalesce(a.dt_real::text, '') = ''
	and	a.dt_prevista		= (	SELECT max(y.dt_prevista)
						from	man_ordem_ativ_prev y
						where	y.nr_seq_ordem_serv	= nr_ordem_servico_p
						and	y.nm_usuario_prev	= nm_usuario_exec_p
						and	coalesce(y.dt_real::text, '') = '')  LIMIT 1;
	/*Finaliza a execucao do ultimo usuario que a fila passou a OS
	Usar para os casos onde a OS retorna para a fila mas nao necessariamente para o mesmo executor
	*/
	if (ie_finalizar_exec_p = 'S') then

		select	max(nm_usuario_exec)
		into STRICT	nm_usuario_ult_exec_w
		from	man_ordem_servico_exec a
		where	a.nr_seq_ordem	= nr_ordem_servico_p
		and	coalesce(a.dt_fim_execucao::text, '') = ''
		and	a.nm_usuario_nrec	= nm_usuario_exec_p
		and	exists (	SELECT	1
				from	man_ordem_serv_ativ y
				where	y.nr_seq_ordem_serv	= a.nr_seq_ordem
				and	y.nm_usuario_exec	= a.nm_usuario_exec
				and	(y.nr_seq_ativ_prev IS NOT NULL AND y.nr_seq_ativ_prev::text <> ''));

	end if;
	end;
else
	begin

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_ativ_prev_w
	from	man_ordem_ativ_prev a
	where	a.nr_seq_ordem_serv	= nr_ordem_servico_p
	and	a.nm_usuario_prev	= nm_usuario_exec_p
	and	coalesce(a.dt_real::text, '') = '';

	if (nr_seq_ativ_prev_w IS NOT NULL AND nr_seq_ativ_prev_w::text <> '') then
		begin
		/*Cria nova atividade prevista para o usuario */

		insert into man_ordem_ativ_prev(
			nr_sequencia,
			nr_seq_ordem_serv,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_prevista,
			qt_min_prev,
			nr_seq_ativ_exec,
			nm_usuario_prev,
			ie_prioridade_desen)
		SELECT	nextval('man_ordem_ativ_prev_seq'),
			nr_ordem_servico_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			CASE WHEN coalesce(dt_liberacao_p::text, '') = '' THEN dt_prevista_p  ELSE dt_liberacao_p END ,
			qt_min_prev,
			nr_seq_ativ_exec,
			nm_usuario_prev,
			ie_prioridade_desen_p
		from	man_ordem_ativ_prev a
		where	a.nr_seq_ordem_serv	= nr_ordem_servico_p
		and	a.nm_usuario_prev	= nm_usuario_exec_p
		and	a.nr_sequencia		= nr_seq_ativ_prev_w;
		end;
	elsif (coalesce(qt_min_prev_p,0) > 0) then
		begin
		insert into man_ordem_ativ_prev(
			nr_sequencia,
			nr_seq_ordem_serv,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_prevista,
			qt_min_prev,
			nr_seq_ativ_exec,
			nm_usuario_prev,
			ie_prioridade_desen)
		values (	nextval('man_ordem_ativ_prev_seq'),
			nr_ordem_servico_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			CASE WHEN coalesce(dt_liberacao_p::text, '') = '' THEN dt_prevista_p  ELSE dt_liberacao_p END ,
			qt_min_prev_p,
			nr_seq_ativ_exec_p,
			nm_usuario_exec_p,
			ie_prioridade_desen_p);

		end;

	end if;

	update	man_ordem_servico_exec
	set	dt_fim_execucao	 = NULL,
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_seq_ordem	= nr_ordem_servico_p
	and	nm_usuario_exec	= nm_usuario_exec_p;

	select	max(b.nr_sequencia)
	into STRICT	nr_seq_fila_w
	from	cadastro_fila b,
		lista_usuario_os a
	where	b.nr_sequencia		= a.nr_seq_fila
	and	b.ie_pacote_entrega	= 'S'
	and	b.ie_situacao		= 'A'
	and	a.nm_usuario_lista	= nm_usuario_exec_p;

	ie_programacao_w	:= substr(coalesce(des_obter_se_estagio_os_progr(nr_ordem_servico_p),'N'),1,1);

	select	max(nr_seq_proj_cron_etapa)
	into STRICT	nr_seq_proj_cron_etapa_w
	from	man_ordem_servico
	where	nr_sequencia	= nr_ordem_servico_p;

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_gerencia_w
	from	grupo_desenvolvimento a,
		man_ordem_Servico b
	where	b.nr_seq_grupo_des	= a.nr_Sequencia
	and	b.nr_sequencia	= nr_ordem_servico_p;
	
	
	select	coalesce(max(a.nr_sequencia),0)
	into STRICT	nr_seq_pacote_w
	from	des_pacote_versao a
	where	a.nr_seq_fila	= coalesce(nr_seq_fila_w, a.nr_seq_fila)
	and	nr_seq_gerencia	= nr_seq_gerencia_w
	and	dt_prevista_p between a.dt_inicial and a.dt_final;


	select	count(*)
	into STRICT	qt_registro_ww
	from	des_pacote_ordem_serv
	where	nr_seq_pacote		= nr_seq_pacote_w
	and	nr_seq_ordem_serv	= nr_ordem_servico_p;

	if (ie_programacao_w = 'S') and (coalesce(nr_seq_pacote_w,0) <> 0) and (coalesce(nr_seq_proj_cron_etapa_w::text, '') = '') and (qt_registro_ww = 0) then

		select	max(a.nr_seq_pacote)
		into STRICT	nr_seq_pacote_os_w
		from	des_pacote_versao b,
			des_pacote_ordem_serv a
		where	b.nr_sequencia		= a.nr_seq_pacote
		and	a.nr_seq_ordem_serv	= nr_ordem_servico_p;

		insert into des_pacote_ordem_serv(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_pacote,
			nr_seq_ordem_serv,
			ds_observacao,
			ie_origem,
			nr_seq_pacote_orig,
			ie_os_adicional)
		values (	nextval('des_pacote_ordem_serv_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_pacote_w,
			nr_ordem_servico_p,
			'Retorno de OS inserida no pacote pelo analista',
			'RUS',
			nr_seq_pacote_os_w,
			'S');

	end if;


	end;
end if;

if (ie_finalizar_exec_usuario_p = 'S') and (nm_usuario_p <> nm_usuario_exec_p) then

	update	man_ordem_servico_exec
	set	dt_fim_execucao	= clock_timestamp(),
		dt_ult_visao	= clock_timestamp(),
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_seq_ordem	= nr_ordem_servico_p
	and	nm_usuario_exec	= nm_usuario_p
	and	coalesce(dt_fim_execucao::text, '') = '';


end if;

select	max(nr_sequencia)
into STRICT	qt_usuario_sup_w
from	usuario_grupo_sup
where	nm_usuario_grupo = nm_usuario_exec_p
and	trunc(clock_timestamp()) between trunc(dt_inicio_vigencia) and trunc(coalesce(dt_fim_vigencia,clock_timestamp()));

if (qt_usuario_sup_w IS NOT NULL AND qt_usuario_sup_w::text <> '') then
	
	update	man_ordem_servico a
	set	a.nr_seq_estagio	= 2113,
		a.nm_usuario		= nm_usuario_p,
		a.dt_atualizacao	= clock_timestamp(),
		a.dt_liberacao_exec	= CASE WHEN dt_liberacao_p = NULL THEN dt_liberacao_exec  ELSE dt_liberacao_p END
	where	a.nr_sequencia		= nr_ordem_servico_p;

else

	update	man_ordem_servico a
	set	a.nr_seq_estagio	= 1191,
		a.nm_usuario		= nm_usuario_p,
		a.dt_atualizacao	= clock_timestamp(),
		a.dt_liberacao_exec	= CASE WHEN dt_liberacao_p = NULL THEN dt_liberacao_exec  ELSE dt_liberacao_p END
	where	a.nr_sequencia		= nr_ordem_servico_p;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE des_definir_os_executor ( nr_ordem_servico_p bigint, nm_usuario_exec_p text, dt_prevista_p timestamp, qt_min_prev_p bigint, nr_seq_ativ_exec_p bigint, ie_prioridade_desen_p bigint, ie_finalizar_exec_p text, ie_finalizar_exec_usuario_p text, dt_liberacao_p timestamp, nm_usuario_p text) FROM PUBLIC;

