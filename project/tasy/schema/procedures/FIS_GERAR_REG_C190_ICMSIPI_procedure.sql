-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_c190_icmsipi ( nr_seq_controle_p bigint, nr_seq_nota_p bigint) AS $body$
DECLARE


-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1)	:= 'N';
nr_vetor_w				bigint	:= 0;
qt_cursor_w				bigint	:= 0;
vl_total_despesa_w		nota_fiscal.vl_total_nota%type := 0;	

-- FIS_EFD_ICMSIPI_C190
nr_seq_icmsipi_C190_w	fis_efd_icmsipi_C190.nr_sequencia%type;
vl_red_bc_w				fis_efd_icmsipi_C190.vl_red_bc%type;
			
-- USUARIO
nm_usuario_w			usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro c190 restringindo pela sequencia da nota fiscal e sendo agrupado pelos campos de Código da Situação Tributária, Código Fiscal de Operação e Prestação e  Alíquota do ICMS*/

c_movimentos_c170 CURSOR FOR
	SELECT 	cd_cst_icms,
			cd_cfop,
			tx_aliq_icms,
			sum(coalesce(vl_item,0)) vl_item,
			sum(coalesce(vl_icms_st_2,0)) vl_icms_st_2,
			sum(coalesce(vl_ipi_2,0)) vl_ipi_2,
			sum(coalesce(vl_bc_icms,0)) vl_bc_icms,
			sum(coalesce(vl_icms,0)) vl_icms,
			sum(coalesce(vl_bc_icms_st,0)) vl_bc_icms_st,
			sum(coalesce(vl_icms_st,0)) vl_icms_st,
			sum(coalesce(vl_ipi,0)) vl_ipi,
			sum(coalesce(vl_desc,0)) vl_desc,
			max(coalesce(cd_obs,'')) cd_obs,
			sum(coalesce(vl_red_bc,0)) vl_red_bc
	from 	(SELECT	coalesce(a.cd_cst_icms,'') cd_cst_icms,
					coalesce(a.cd_cfop,'') cd_cfop,
					coalesce(a.tx_aliq_icms,0) tx_aliq_icms,
					a.vl_item,
					(select sum(CASE WHEN obter_tipo_tributo(b.cd_tributo)='ICMSST' THEN  b.vl_tributo  ELSE 0 END ) FROM a
LEFT OUTER JOIN nota_fiscal_item_trib b ON (a.nr_seq_nota = b.nr_sequencia AND a.nr_item = b.nr_item_nf) ) vl_icms_st_2,
					(select sum(CASE WHEN obter_tipo_tributo(b.cd_tributo)='IPI' THEN  b.vl_tributo  ELSE 0 END ) FROM a
LEFT OUTER JOIN nota_fiscal_item_trib b ON (a.nr_seq_nota = b.nr_sequencia AND a.nr_item = b.nr_item_nf) )  vl_ipi_2,
					a.vl_bc_icms,
					a.vl_icms,
					a.vl_bc_icms_st,
					a.vl_icms_st,
					a.vl_ipi,
					a.vl_desc,
					a.cd_obs,
					(select sum(CASE WHEN obter_tipo_tributo(b.cd_tributo)='ICMS' THEN  vl_reducao_base  ELSE 0 END ) FROM a
LEFT OUTER JOIN nota_fiscal_item_trib b ON (a.nr_seq_nota = b.nr_sequencia AND a.nr_item = b.nr_item_nf) ) vl_red_bc
			from	fis_efd_icmsipi_C170 	a
			where	a.nr_seq_nota 	= nr_seq_nota_p) x
	group by	x.cd_cst_icms,
				x.cd_cfop,
				x.tx_aliq_icms
	order by 	sum(x.vl_item) desc;
	
/*Criação do array com o tipo sendo do cursor eespecificado - C_MOVIMENTOS_C170 */
	
type reg_c_movimentos_c170 is table of c_movimentos_c170%RowType;
vetmovimentos_c170	reg_c_movimentos_c170;

/*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_C190 */

type registro is table of fis_efd_icmsipi_C190%rowtype index by integer;
fis_registros_w		registro;
		
BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_movimentos_c170;
loop
fetch c_movimentos_c170 bulk collect into vetmovimentos_c170 limit 1000;
	for i in 1..vetmovimentos_c170.Count loop
		begin
		
		/*Limpeza de variaveis*/

		vl_total_despesa_w:= 0;
		
		/*Incrementa a variavel para o array*/

		qt_cursor_w:=	qt_cursor_w + 1;
				
		if (ie_gerou_dados_bloco_w = 'N') then
			ie_gerou_dados_bloco_w:=	'S';
		end if;
		
		/*Busca o total de despesas da nota e insere no item com maior valor agrupado por cts, cfop e aliquota do icms
		Como o select está ordenado por valor no primeiro registro deve entrar*/
		if (qt_cursor_w = 1) then
			begin
				select (coalesce(vl_frete,0) + coalesce(vl_seguro,0) + coalesce(vl_despesa_acessoria,0)) - coalesce(vl_descontos, 0)
				into STRICT	vl_total_despesa_w
				from	nota_fiscal
				where	nr_sequencia = nr_seq_nota_p  LIMIT 1;
			exception
			when others then
				vl_total_despesa_w:= 0;
			end;
		end if;		
		
		/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_C190 */

		select	nextval('fis_efd_icmsipi_c190_seq')
		into STRICT	nr_seq_icmsipi_C190_w
		;
		
		/*Inserindo valores no array para realização do forall posteriormente*/

		fis_registros_w[qt_cursor_w].nr_sequencia		:=	nr_seq_icmsipi_C190_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao		:=	clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario			:=	nm_usuario_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec:=	clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec	:=	nm_usuario_w;
		fis_registros_w[qt_cursor_w].cd_reg             :=	'C190';
		fis_registros_w[qt_cursor_w].cd_cst_icms        :=	vetmovimentos_c170[i].cd_cst_icms;
		fis_registros_w[qt_cursor_w].cd_cfop            :=	vetmovimentos_c170[i].cd_cfop;
		fis_registros_w[qt_cursor_w].tx_aliq_icms		:=	vetmovimentos_c170[i].tx_aliq_icms;
		fis_registros_w[qt_cursor_w].vl_opr             :=	(vetmovimentos_c170[i].vl_item + vetmovimentos_c170[i].vl_icms_st_2 + vetmovimentos_c170[i].vl_ipi_2 + vl_total_despesa_w) - vetmovimentos_c170[i].vl_desc;
		fis_registros_w[qt_cursor_w].vl_bc_icms         :=	vetmovimentos_c170[i].vl_bc_icms;
		fis_registros_w[qt_cursor_w].vl_icms            :=  vetmovimentos_c170[i].vl_icms;
		fis_registros_w[qt_cursor_w].vl_bc_icms_st		:=  vetmovimentos_c170[i].vl_bc_icms_st;
		fis_registros_w[qt_cursor_w].vl_icms_st         :=  vetmovimentos_c170[i].vl_icms_st;
		fis_registros_w[qt_cursor_w].vl_ipi             :=	vetmovimentos_c170[i].vl_ipi;
		fis_registros_w[qt_cursor_w].vl_red_bc          :=  vetmovimentos_c170[i].vl_red_bc;
		fis_registros_w[qt_cursor_w].cd_obs             :=  vetmovimentos_c170[i].cd_obs;
		fis_registros_w[qt_cursor_w].nr_seq_controle    :=	nr_seq_controle_p;
		fis_registros_w[qt_cursor_w].nr_seq_nota		:=	nr_seq_nota_p;
		
		if (nr_vetor_w >= 1000) then
			begin
			/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_C190 */

			forall j in fis_registros_w.first..fis_registros_w.last
				insert into fis_efd_icmsipi_C190 values fis_registros_w(j);

			nr_vetor_w	:= 0;
			fis_registros_w.delete;

			commit;

			end;
		end if;
		
		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w	:= nr_vetor_w 	+ 1;
		
		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_movimentos_c170 */
end loop;
close c_movimentos_c170;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall l in fis_registros_w.first..fis_registros_w.last
		insert into fis_efd_icmsipi_C190 values fis_registros_w(l);
		
	fis_registros_w.delete;

	commit;
	
	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update 	fis_efd_icmsipi_controle
	set	ie_mov_C 	= 'S'
	where 	nr_sequencia 	= nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_c190_icmsipi ( nr_seq_controle_p bigint, nr_seq_nota_p bigint) FROM PUBLIC;

