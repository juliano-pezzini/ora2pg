-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_58 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Aplicar a validação para gerar a ocorrência em itens que não foram autorizados.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cursor_w		sql_pck.t_cursor;
bind_sql_valor_w	sql_pck.t_dado_bind;
ds_sql_w		varchar(4000);
nr_seq_selecao_w	pls_oc_cta_selecao_ocor_v.nr_sequencia%type;
ie_status_guia_w	pls_guia_plano.ie_status%type;
nr_seq_guia_w		pls_guia_plano.nr_sequencia%type;
ie_estagio_w		pls_guia_plano.ie_estagio%type;
ie_tipo_despesa_w	pls_conta_proc_ocor_v.ie_tipo_despesa%type;
var_cur_w		integer;
var_exec_w		integer;
var_retorno_w		integer;
i			integer;

dados_tb_sel_w		pls_tipos_ocor_pck.dados_table_selecao_ocor;

-- Informações da regra de validação da carteira
--Criado o item somente item autor que deverá considerar somente se o item estiver devidamente autorizado se não nem verifica o item
c_regra CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_validacao,
		a.ie_tipo_guia_validacao,
		coalesce(a.ie_valida_estagio_canc, 'N') ie_valida_estagio_canc
	from	pls_oc_cta_val_guia_aut_lo a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

BEGIN

-- Só aplicar a validação se existir informação da regra.
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	-- Informações da regra de validação da carteira.
	for	r_c_regra_w in c_regra(dados_regra_p.nr_sequencia) loop

		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);

		-- Verificar se a regra irá validar os itens não autorizados ou a quantidade.
		if (r_c_regra_w.ie_tipo_guia_validacao = 'S') or (r_c_regra_w.ie_valida_estagio_canc = 'S') then
			-- Monta o select principal para buscar as guias que estão autorizadas. Para esta validação, se não for encontrado uma guia para a conta, então será gerada a ocorrência em todos
			-- os itens da regra.
			ds_sql_w := 		'select	sel.nr_sequencia		nr_seq_selecao, ' || pls_tipos_ocor_pck.enter_w ||
						'	conta.ie_status_guia		ie_status_guia, ' || pls_tipos_ocor_pck.enter_w ||
						'	conta.nr_seq_guia		nr_seq_guia, ' || pls_tipos_ocor_pck.enter_w;

						-- se for para validar o estágio cancelado, então carrega o mesmo, senão apenas aplica null, para fins de otimização
						if (r_c_regra_w.ie_valida_estagio_canc = 'S') then

							ds_sql_w	:= ds_sql_w  || '	(select	max(x.ie_estagio) from pls_guia_plano x where x.cd_guia = conta.cd_guia_referencia and x.nr_seq_segurado = conta.nr_seq_segurado) ie_estagio ' || pls_tipos_ocor_pck.enter_w;
						else

							ds_sql_w	:= ds_sql_w  || '	null ie_estagio ' || pls_tipos_ocor_pck.enter_w;
						end if;

			ds_sql_w	:= ds_sql_w ||

						'from	pls_oc_cta_selecao_ocor_v	sel, ' || pls_tipos_ocor_pck.enter_w ||
						'	pls_conta_v	conta ' || pls_tipos_ocor_pck.enter_w ||
						'where	sel.nr_id_transacao		= :nr_id_transacao '|| pls_tipos_ocor_pck.enter_w ||
						'and	sel.ie_valido			= ''S'' ' || pls_tipos_ocor_pck.enter_w ||
						'and	conta.nr_sequencia		= sel.nr_seq_conta ';

			begin

				-- Iniciar o índice para preenchimento da tabela.
				i := 0;

				bind_sql_valor_w := sql_pck.bind_variable(':nr_id_transacao', nr_id_transacao_p, bind_sql_valor_w);

				bind_sql_valor_w := sql_pck.executa_sql_cursor(ds_sql_w, bind_sql_valor_w);
				pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);

				loop
				fetch 	cursor_w
				into	nr_seq_selecao_w, ie_status_guia_w, nr_seq_guia_w, ie_estagio_w;
				EXIT WHEN NOT FOUND; /* apply on cursor_w */

					-- Sempre que um item for filtrado por este select quer dizer que a sua conta tem uma autorização. Porém ainda não sabemos se este
					-- item em específico faz parte da autorização ou não, portanto deixamos para que seja gerada a ocorrência por padrão, e o que pode fazer isto mudar
					-- é apenas o item ter sido autorizado e ainda ter saldo disponível para utilização.
					dados_tb_sel_w.ie_valido(i)	:= 'S';
					dados_tb_sel_w.ds_observacao(i)	:= null;

					-- Inicializar os valores que serão atualizados na tabela de seleção.
					dados_tb_sel_w.nr_seq_selecao(i)	:= nr_seq_selecao_w;

					-- Verificar se a conta em questão teve uma guia váilida, se não tiver a ocorrência será gerada
					if (coalesce(nr_seq_guia_w::text, '') = '') and (r_c_regra_w.ie_tipo_guia_validacao = 'S') then

						dados_tb_sel_w.ie_valido(i) := 'S';
						dados_tb_sel_w.ds_observacao(i) := 'Não foi encontrada uma autorização para este atendimento.';


					-- Se for para validar o estágio da guia, se estiver cancelado, mesmo que a guia esteja autorizada deverá gerar a ocorrência
					elsif (ie_estagio_w = '8') and (r_c_regra_w.ie_valida_estagio_canc = 'S') then

						dados_tb_sel_w.ie_valido(i) := 'S';
						dados_tb_sel_w.ds_observacao(i) := 'A autorização para este atendimento foi encontrada, mas está cancelada.';
					-- Se a guia não estiver autorizada também gera ocorrência.
					elsif (ie_status_guia_w <> '1') and (r_c_regra_w.ie_tipo_guia_validacao = 'S') then

						dados_tb_sel_w.ie_valido(i) := 'S';
						dados_tb_sel_w.ds_observacao(i) :=
								'A solicitação de autorização para este atendimento ' ||
								'não foi autorizada pela operadora.' || pls_util_pck.enter_w ||
								'Status da solicitação: ' ||
								obter_valor_dominio(1747, ie_status_guia_w);

					else
						dados_tb_sel_w.ie_valido(i) := 'N';
					end if;
					-- Verificar o tipo de item que deve ser buscado da PLS_CONTA_AUTOR_PCK.
					-- Procedimentos
					-- Quando a quantidade de itens da lista tiver chegado ao máximo definido na PLS_CTA_CONSISTIR_PCK, então os registros são levados para
						-- o BD e gravados todos de uma vez, pela procedure GERENCIAL_SELECAO_VALIDACAO, que atualiza os registros conforme passado por
					-- parâmetro, o indice e as listas são reiniciados para carregar os novos registros e para que os registros atuais não sejam atualizados novamente em
					-- na próxima carga.
					if ( i = pls_cta_consistir_pck.qt_registro_transacao_w) then

						-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
						-- conforme passado por parâmetro,
						CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(
							dados_tb_sel_w.nr_seq_selecao, pls_tipos_ocor_pck.clob_table_vazia,
							'SEQ', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p);

						-- Zerar o índice
						i := 0;

						-- Zerar as listas.
						pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);
					-- Enquanto os registros não tiverem atingido a carga para gravar na seleção incrementa o índice para armazenar os próximos registros.
					else
						i := i + 1;
					end if;

				end loop;

				close cursor_w;

				-- Quando tiver sobrado algo na lista irá gravar o que restou após a execução do loop.
				if (dados_tb_sel_w.nr_seq_selecao.count > 0) then
					-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
					-- conforme passado por parâmetro,
					CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(
						dados_tb_sel_w.nr_seq_selecao, pls_tipos_ocor_pck.clob_table_vazia,
						'SEQ', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p);
				end if;
			exception
				when others then

					if (cursor_w%isopen) then
						close cursor_w;
					end if;
					CALL pls_tipos_ocor_pck.trata_erro_sql_dinamico(dados_regra_p, ds_sql_w, nr_id_transacao_p, nm_usuario_p);
			end;
		end if;

		-- seta os registros que serão válidos ou inválidos após o processamento
		CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);

	end loop; -- c_regra
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_58 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

