-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_sip_conta_assist ( nr_seq_conta_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_seq_segurado_w		bigint;
nr_seq_protocolo_w		bigint;
nr_seq_prestador_exec_w		bigint;
qt_beneficiario_w		bigint;
ie_sexo_w			varchar(10);
cd_doenca_cid_w			varchar(10);
sg_uf_sip_w			pls_prestador.sg_uf_sip%type	:= 'NC';
ie_internado_w			varchar(1);
ie_segmentacao_w		varchar(10);
nr_seq_proc_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_item_assistencial_w	bigint;
ie_tipo_guia_w			varchar(2);
nr_seq_cbo_saude_w		bigint;
nr_seq_tipo_atendimento_w	bigint;
nr_seq_clinica_w		bigint;
ie_regime_internacao_w		varchar(10);
ie_tipo_contratacao_w		varchar(10);
cd_item_sip_w			varchar(10);
cd_classificacao_w		varchar(20);
cd_classificacao_ww		varchar(20);
dt_mes_competencia_w		timestamp;
qt_idade_w			bigint;
qt_idade_meses_w		bigint;
qt_idade_dia_w			bigint;
nr_seq_mat_w			bigint;
nr_seq_material_w		bigint;
ie_parto_normal_w		varchar(1);
qt_nasc_vivos_w			bigint;
qt_nasc_vivos_premat_w		bigint;
ie_nasc_vivos_w			varchar(1)	:= 'S';
qt_evento_w			double precision;
qt_evento_ww			double precision;
nr_seq_conta_w			bigint;
vl_despesa_w			double precision;
nr_seq_item_assis_w		bigint;
qt__w				bigint;
cd_grupo_proc_w			bigint;
cd_especialidade_w		bigint;
cd_area_procedimento_w		bigint;
ie_materiais_w			varchar(1)	:= 'N';
nr_seq_prot_referencia_w	bigint;
qt_ptocedimento_regra_w		bigint;
nr_seq_contrato_w		bigint;
nr_seq_congenere_contrato_w	bigint;

cd_procedimento_ww		bigint;
ie_origem_proced_ww		bigint;
cd_area_procedimento_ww		bigint;
cd_especialidade_ww		bigint;
cd_grupo_proc_ww		bigint;
qt_sip_mov_item_assistencial_w	bigint;
nr_sequencia_w			bigint;
nr_seq_mov_item_sip_w		bigint;
ie_nascido_vivo_w		varchar(10);
qt_idade_min_w			smallint;
qt_idade_max_w			smallint;
ie_unid_tempo_idade_w		varchar(10);
ie_idade_w			varchar(10);
cd_categoria_cid_w		varchar(10);
cd_guia_referencia_w		varchar(20);
nr_seq_item_internacao_w	bigint;
nr_seq_item_internacao_EX_w	bigint;
nr_seq_item_internacao_F_w	bigint;
nr_seq_item_internacao_EY_w	bigint;
ie_acho_regra_w			varchar(10)	:= 'N';
cd_cbo_saude_w			varchar(15);
dt_ocorrencia_w			timestamp;
dt_ocorrencia_item_w		timestamp;
qt_procedimento_resumo_w	bigint	:= 0;
nr_seq_lote_sip_w		bigint;
nr_seq_lote_w			bigint;
nr_seq_congenere_w		bigint;
ie_tipo_protocolo_w		varchar(3);
ie_considerar_conta_w		varchar(10)	:= 'N';
ie_considerar_conta_ww		varchar(10)	:= 'N';
ie_considerar_guia_w		varchar(10)	:= 'N';
ie_considerar_guia_ww		varchar(10)	:= 'N';
nr_seq_regra_w			bigint;
nr_seq_regra_ww			bigint;
ie_verificar_atualiza_w		varchar(10);
ie_verificar_atualiza_ww	varchar(10);
cd_pessoa_fisica_w		bigint;
dt_nascimento_w			timestamp;
C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_procedimento,
		a.ie_origem_proced,
		coalesce(a.qt_procedimento_imp,0),
		coalesce(a.vl_liberado,0),
		a.dt_procedimento
	from	pls_conta_proc	a
	where	a.nr_seq_conta	= nr_seq_conta_p;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_material,
		coalesce(a.qt_material_imp,0),
		coalesce(a.vl_liberado,0),
		a.dt_atendimento
	from	pls_conta_mat	a
	where	a.nr_seq_conta	= nr_seq_conta_p;

/*Regras de procedimento*/

C03 CURSOR FOR
	SELECT	a.nr_seq_item_assist,
		coalesce(a.ie_nascido_vivo,'N'),
		b.cd_item,
		b.cd_classificacao,
		ie_nascido_vivo,
		qt_idade_inicial,
		qt_idade_final,
		coalesce(ie_unid_tempo_idade,'X'),
		ie_considerar_conta,
		ie_considerar_guia_ref,
		a.nr_sequencia
	from	sip_item_assist_regra	a,
		sip_item_assistencial	b
	where	a.nr_seq_item_assist	= b.nr_sequencia
	and	a.ie_situacao	= 'A'
	--and	(nvl(ie_parto_normal,'N')	= ie_parto_normal_p) OS - 305282
	and	((a.cd_procedimento = cd_procedimento_w) or (coalesce(a.cd_procedimento::text, '') = ''))
	and	((a.ie_origem_proced = ie_origem_proced_w) or (coalesce(ie_origem_proced::text, '') = ''))
	and	((a.cd_grupo_proc = cd_grupo_proc_w) or (coalesce(a.cd_grupo_proc::text, '') = ''))
	and	((a.cd_especialidade = cd_especialidade_w) or (coalesce(cd_especialidade::text, '') = ''))
	and	((a.cd_area_procedimento = cd_area_procedimento_w) or (coalesce(cd_area_procedimento::text, '') = ''))
	and	((a.nr_seq_tipo_atendimento = nr_seq_tipo_atendimento_w) or (coalesce(nr_seq_tipo_atendimento::text, '') = ''))
	and	((a.nr_seq_clinica = nr_seq_clinica_w) or (coalesce(nr_seq_clinica::text, '') = ''))
	and	((a.ie_regime_internacao = ie_regime_internacao_w) or (coalesce(ie_regime_internacao::text, '') = ''))
	--and	((a.nr_seq_cbo_saude = nr_seq_cbo_saude_w) or (nr_seq_cbo_saude is null))
	and	((a.ie_tipo_guia = ie_tipo_guia_w) or (coalesce(ie_tipo_guia::text, '') = ''))
	and	((a.cd_doenca_cid = cd_doenca_cid_w) or (coalesce(cd_doenca_cid::text, '') = ''))
	and	((ie_sexo	= ie_sexo_w)	or (coalesce(ie_sexo::text, '') = ''))
	and	((cd_categoria_cid = cd_categoria_cid_w) or (coalesce(cd_categoria_cid::text, '') = ''))
	and	((substr(obter_codigo_cbo_saude(a.nr_seq_cbo_saude),1,15) = cd_cbo_saude_w) or (coalesce(nr_seq_cbo_saude::text, '') = ''))
	and	((coalesce(a.nr_seq_prestador_exec::text, '') = '') or (a.nr_seq_prestador_exec = nr_seq_prestador_exec_w))
	order by
		coalesce(a.cd_procedimento,0) desc,
		coalesce(a.cd_grupo_proc,0) desc,
		coalesce(a.cd_especialidade,0) desc,
		coalesce(a.cd_area_procedimento,0) desc,
		coalesce(qt_idade_inicial,0) desc,
		coalesce(qt_idade_final,0) desc,
		coalesce(ie_unid_tempo_idade,0) desc,
		coalesce(a.ie_regime_internacao,'A') desc,
		coalesce(cd_categoria_cid,'A') desc,
		coalesce(a.nr_seq_tipo_atendimento,0) desc,
		coalesce(a.cd_doenca_cid,0) desc,
		coalesce(a.nr_seq_clinica,0) desc,
		coalesce(a.nr_seq_cbo_saude,0) desc,
		coalesce(a.nr_seq_prestador_exec,0) desc;

/*Regras de Material*/

C06 CURSOR FOR
	SELECT	a.nr_seq_item_assist,
		coalesce(a.ie_nascido_vivo,'N'),
		a.cd_procedimento,
		a.ie_origem_proced,
		a.cd_area_procedimento,
		a.cd_especialidade,
		a.cd_grupo_proc,
		b.cd_item,
		b.cd_classificacao,
		ie_nascido_vivo,
		qt_idade_inicial,
		qt_idade_final,
		coalesce(ie_unid_tempo_idade,'X')
	from	sip_item_assist_regra	a,
		sip_item_assistencial	b
	where	a.nr_seq_item_assist	= b.nr_sequencia
	and	a.ie_situacao	= 'A'
	and	((a.nr_seq_tipo_atendimento = nr_seq_tipo_atendimento_w) or (coalesce(nr_seq_tipo_atendimento::text, '') = ''))
	and	((a.nr_seq_clinica = nr_seq_clinica_w) or (coalesce(nr_seq_clinica::text, '') = ''))
	and	((a.ie_regime_internacao = ie_regime_internacao_w) or (coalesce(ie_regime_internacao::text, '') = ''))
	--and	((a.nr_seq_cbo_saude = nr_seq_cbo_saude_w) or (nr_seq_cbo_saude is null))
	and	((a.ie_tipo_guia = ie_tipo_guia_w) or (coalesce(ie_tipo_guia::text, '') = ''))
	and	((a.cd_doenca_cid = cd_doenca_cid_w) or (coalesce(cd_doenca_cid::text, '') = ''))
	and (coalesce(a.ie_materiais,'N')	= ie_materiais_w)
	and	((ie_sexo	= ie_sexo_w)	or (coalesce(ie_sexo::text, '') = ''))
	and	((cd_categoria_cid = cd_categoria_cid_w) or (coalesce(cd_categoria_cid::text, '') = ''))
	and	((substr(obter_codigo_cbo_saude(a.nr_seq_cbo_saude),1,15) = cd_cbo_saude_w) or (coalesce(nr_seq_cbo_saude::text, '') = ''))
	and	((coalesce(a.nr_seq_prestador_exec::text, '') = '') or (a.nr_seq_prestador_exec = nr_seq_prestador_exec_w))
	order by
		coalesce(a.cd_procedimento,0) desc,
		coalesce(a.cd_grupo_proc,0) desc,
		coalesce(a.cd_especialidade,0) desc,
		coalesce(a.cd_area_procedimento,0) desc,
		coalesce(qt_idade_inicial,0) desc,
		coalesce(qt_idade_final,0) desc,
		coalesce(ie_unid_tempo_idade,0) desc,
		coalesce(a.ie_regime_internacao,'A') desc,
		coalesce(cd_categoria_cid,'A') desc,
		coalesce(a.nr_seq_tipo_atendimento,0) desc,
		coalesce(a.cd_doenca_cid,0) desc,
		coalesce(a.nr_seq_clinica,0) desc,
		coalesce(a.nr_seq_cbo_saude,0) desc,
		coalesce(a.nr_seq_prestador_exec,0) desc;

C04 CURSOR FOR
	SELECT	nr_seq_item_sip,
		cd_item_sip,
		cd_classificacao_sip,
		ie_tipo_contratacao,
		ie_segmentacao,
		sg_uf,
		dt_item_sip,
		coalesce(a.dt_ocorrencia,b.dt_emissao)
	from	sip_mov_item_assistencial	a,
		pls_conta	b
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	b.nr_seq_protocolo	= nr_seq_prot_referencia_w;

C05 CURSOR FOR
	SELECT	nr_seq_item_sip,
		cd_item_sip,
		cd_classificacao_sip,
		ie_tipo_contratacao,
		ie_segmentacao,
		sg_uf,
		dt_item_sip,
		coalesce(a.dt_ocorrencia,b.dt_emissao)
	from	sip_mov_item_assistencial	a,
		pls_conta	b
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	and	a.nr_seq_material	= nr_seq_material_w
	and	b.nr_seq_protocolo	= nr_seq_prot_referencia_w;

C07 CURSOR FOR
	SELECT	cd_classificacao_sip
	from	sip_mov_item_assistencial
	where	nr_seq_mat		= nr_seq_mat_w;

C08 CURSOR FOR
	SELECT	cd_classificacao_sip
	from	sip_mov_item_assistencial
	where	nr_seq_proc		= nr_seq_proc_w;

C09 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_classificacao_sip
	from	sip_mov_item_assistencial	a,
		pls_conta			b
	where	a.nr_seq_conta		= b.nr_sequencia
	and	((b.cd_guia_referencia	= cd_guia_referencia_w)
	or (coalesce(b.cd_guia_referencia::text, '') = '')
	and (b.cd_guia		= cd_guia_referencia_w))
	and	b.ie_tipo_guia		<> 6
	and	a.nr_sequencia	in 	(SELECT  x.nr_sequencia
					from    sip_mov_item_assistencial	x,
						pls_conta		y
					where   y.nr_sequencia		= x.nr_seq_conta
					and	((y.cd_guia_referencia	= cd_guia_referencia_w)
					or (coalesce(y.cd_guia_referencia::text, '') = '')
					and (y.cd_guia		= cd_guia_referencia_w))
					and	((substr(x.cd_classificacao_sip,1,1)	= 'F'
					and	substr(x.cd_classificacao_sip,1,1)	= substr(a.cd_classificacao_sip,1,1))
					or	substr(x.cd_classificacao_sip,1,2)	= substr(a.cd_classificacao_sip,1,2))
					and	x.cd_classificacao_sip			<> 'G'
					and	y.ie_tipo_guia		<> 6
					and	(x.cd_procedimento IS NOT NULL AND x.cd_procedimento::text <> ''))
	order by length(a.cd_classificacao_sip),
		 dt_item_sip desc;

C10 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_conta
	where	((cd_guia_referencia	= cd_guia_referencia_w)
	or (nr_sequencia 		= nr_seq_conta_p));


BEGIN
/* Buscar dados da conta do beneficiários da OPS e que sejam contas principais (guia referência nula ou igual a guia principal*/

begin
select	a.nr_seq_segurado,
	a.nr_seq_protocolo,
	a.nr_seq_prestador_exec,
	a.ie_tipo_guia,
	a.nr_seq_cbo_saude,
	a.nr_seq_tipo_atendimento,
	a.nr_seq_clinica,
	a.ie_regime_internacao,
	b.ie_tipo_contratacao,
	b.ie_segmentacao,
	a.nr_sequencia,
	coalesce(a.ie_parto_normal,'N'),
	coalesce(a.qt_nasc_vivos_termo,0),
	coalesce(qt_nasc_vivos_prematuros,0),
	coalesce(cd_guia_referencia,cd_guia),
	nr_seq_contrato
into STRICT	nr_seq_segurado_w,
	nr_seq_protocolo_w,
	nr_seq_prestador_exec_w,
	ie_tipo_guia_w,
	nr_seq_cbo_saude_w,
	nr_seq_tipo_atendimento_w,
	nr_seq_clinica_w,
	ie_regime_internacao_w,
	ie_tipo_contratacao_w,
	ie_segmentacao_w,
	nr_seq_conta_w,
	ie_parto_normal_w,
	qt_nasc_vivos_w,
	qt_nasc_vivos_premat_w,
	cd_guia_referencia_w,
	nr_seq_contrato_w
from	pls_segurado	c,
	pls_plano	b,
	pls_conta	a
where	a.nr_seq_segurado	= c.nr_sequencia
and	c.nr_seq_plano		= b.nr_sequencia
and	a.nr_sequencia		= nr_seq_conta_p
and	((coalesce(a.ie_tipo_segurado,'B')	= 'B')
or (coalesce(a.ie_tipo_segurado,'B')	= 'R'));
exception
when others then
	nr_seq_segurado_w	:= null;
end;

select	max(nr_seq_congenere)
into STRICT	nr_seq_congenere_contrato_w
from	pls_contrato
where	nr_sequencia	= nr_seq_contrato_w;

if (coalesce(nr_seq_segurado_w,0) <> 0) and (coalesce(nr_seq_congenere_contrato_w::text, '') = '') then
	if (nr_seq_cbo_saude_w IS NOT NULL AND nr_seq_cbo_saude_w::text <> '') then
		cd_cbo_saude_w	:= substr(obter_codigo_cbo_saude(nr_seq_cbo_saude_w),1,15);
	end if;
	/* Obter data do protocolo */

	begin
	select	dt_mes_competencia,
		nr_seq_prot_referencia,
		nr_seq_congenere,
		ie_tipo_protocolo
	into STRICT	dt_mes_competencia_w,
		nr_seq_prot_referencia_w,
		nr_seq_congenere_w,
		ie_tipo_protocolo_w
	from	pls_protocolo_conta
	where	nr_sequencia	= nr_seq_protocolo_w;
	exception
	when others then
		dt_mes_competencia_w		:= null;
		nr_seq_prot_referencia_w	:= null;
	end;

	/* William - OS 397802 - Performance, count(1), IN*/

	/* Obter a quantidade de beneficiário */

	begin
	select	qt_benef_sip
	into STRICT	qt_beneficiario_w
	from	w_sip_inform_aux
	where 	nm_usuario = nm_usuario_p;
	exception
	when others then
	qt_beneficiario_w:=0;
	end;



	if (coalesce(qt_beneficiario_w,0)=0) then
		select	count(1)
		into STRICT	qt_beneficiario_w
		from (	SELECT	1
			from	pls_segurado
			where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	coalesce(dt_rescisao::text, '') = ''
			and	ie_tipo_segurado = 'R'
			and	cd_estabelecimento = cd_estabelecimento_p
			
union all

			SELECT	1
			from	pls_segurado
			where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	coalesce(dt_rescisao::text, '') = ''
			and	ie_tipo_segurado = 'B'
			and	cd_estabelecimento = cd_estabelecimento_p) alias7;
	end if;

	if (qt_beneficiario_w	> 49999) then
		/* Obter a UF do prestador executor */

		begin
		select	sg_uf_sip
		into STRICT	sg_uf_sip_w
		from	pls_prestador
		where	nr_sequencia	= nr_seq_prestador_exec_w;
		exception
		when others then
			sg_uf_sip_w	:= 'NC';
		end;
		if (coalesce(sg_uf_sip_w::text, '') = '') then
			sg_uf_sip_w	:= 'NC';
		end if;
		if (coalesce(ie_tipo_protocolo_w,'X') = 'I') then
			begin
			select	a.sg_estado
			into STRICT	sg_uf_sip_w
			from	pls_congenere		b,
				pls_cooperativa_area	a
			where	b.nr_sequencia	= a.nr_seq_cooperativa
			and	b.nr_sequencia  = nr_seq_congenere_w;
			exception
			when others then
			sg_uf_sip_w	:= 'NC';
			end;
			if (coalesce(sg_uf_sip_w::text, '') = '') then
				sg_uf_sip_w	:= 'NC';
			end if;
		end if;

	end if;

	/*qt_idade_w	:= pls_obter_idade_segurado(nr_seq_segurado_w, sysdate, 'A');*/

	begin
	select	ie_sexo,
		a.cd_pessoa_fisica
	into STRICT	ie_sexo_w,
		cd_pessoa_fisica_w
	from	pls_segurado	a,
		pessoa_fisica	b
	where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	a.nr_sequencia		= nr_seq_segurado_w;
	exception
	when others then
		ie_sexo_w := '';
		cd_pessoa_fisica_w := 0;
	end;

	if (coalesce(ie_sexo_w::text, '') = '') then
		ie_sexo_w := 'I';
	end if;

	if (coalesce(cd_pessoa_fisica_w,0) > 0) then

		select 	dt_nascimento
		into STRICT	dt_nascimento_w
		from	pessoa_fisica
		where	cd_pessoa_fisica = to_char(cd_pessoa_fisica_w);

		qt_idade_w	:= substr(obter_idade(dt_nascimento_w, clock_timestamp(), 'A'),1,10);
		qt_idade_meses_w:= substr(obter_idade(dt_nascimento_w, clock_timestamp(), 'M'),1,10);
		qt_idade_dia_w	:= substr(obter_idade(dt_nascimento_w, clock_timestamp(), 'DIA'),1,10);
	end if;

	/* Obter o CID principal da conta */

	select	max(cd_doenca)
	into STRICT	cd_doenca_cid_w
	from	pls_diagnostico_conta
	where	nr_seq_conta		= nr_seq_conta_p
	and	ie_classificacao	= 'P';

	/*Buscar catergoria CID*/

	select	max(cd_categoria_cid)
	into STRICT	cd_categoria_cid_w
	from 	cid_doenca
	where 	cd_doenca_cid = cd_doenca_cid_w;

	ie_internado_w	:= pls_obter_se_internado(nr_seq_conta_p, '');
	if	((ie_segmentacao_w in ('1','8')) or
		((ie_segmentacao_w in ('5','6','7','11','12')) and (ie_internado_w = 'N'))) then
		ie_segmentacao_w	:= 1;
	/*	ERRO ANS: Erro ao processar elemento segmentacao. Trimestre de reconhecimento 01/01/2010, forma de contratação individual familiar.
	Operadoras com cobertura hospitalar E obstetrica deverão enviar as informações sobre os itens hospitalares no quadro hospitalarObstetricia.
	Felipe - 29/10/2010 - Coloquei para receber 3 nesse caso também para ser possível enviar o arquivo para o Itamed
	*/
	elsif	((ie_segmentacao_w in ('3','10')) or
		((ie_segmentacao_w in ('7','12')) and (ie_internado_w = 'S'))) then
		ie_segmentacao_w	:= 3;
	elsif	((ie_segmentacao_w in ('2','9')) or
		((ie_segmentacao_w in ('5','6','11')) and (ie_internado_w = 'S'))) then
		ie_segmentacao_w	:= 3;
	elsif (ie_segmentacao_w = '4') then
		ie_segmentacao_w	:= 4;
	end if;

	ie_verificar_atualiza_w	:= 'G';
	ie_verificar_atualiza_w := pls_sip_considerar_guia( nr_seq_regra_ww, nr_seq_conta_p, cd_guia_referencia_w, ie_tipo_contratacao_w, ie_segmentacao_w, sg_uf_sip_w, dt_mes_competencia_w, nm_usuario_p, cd_estabelecimento_p, ie_verificar_atualiza_w);
	if (ie_verificar_atualiza_w	= 'N') then
		open C01;
		loop
		fetch C01 into
			nr_seq_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_evento_w,
			vl_despesa_w,
			dt_ocorrencia_item_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			if (ie_considerar_conta_ww	= 'N') and (ie_considerar_guia_ww	= 'N') then
				select	max(nr_seq_lote_sip)
				into STRICT	nr_seq_lote_sip_w
				from	sip_mov_item_assistencial
				where	nr_seq_proc	= nr_seq_proc_w;

				if (nr_seq_lote_sip_w IS NOT NULL AND nr_seq_lote_sip_w::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_lote_w
					from	pls_lote_sip
					where	nr_sequencia = nr_seq_lote_sip_w
					and	(dt_envio IS NOT NULL AND dt_envio::text <> '');
				end if;

				if (coalesce(nr_seq_lote_w::text, '') = '') then
					delete	FROM sip_mov_item_assistencial
					where	nr_seq_proc	= nr_seq_proc_w;

					ie_materiais_w	:= null;
					SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_proced_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w;

					select	count(1)
					into STRICT	qt_procedimento_resumo_w
					from	sip_mov_item_assistencial	a,
						pls_conta	b
					where	a.nr_seq_conta		= b.nr_sequencia
					and	b.nr_seq_segurado	= nr_seq_segurado_w
					and	a.cd_procedimento	= cd_procedimento_w
					and	a.ie_origem_proced	= ie_origem_proced_w
					and	b.nr_seq_protocolo	= nr_seq_prot_referencia_w;

					if (nr_seq_prot_referencia_w IS NOT NULL AND nr_seq_prot_referencia_w::text <> '') and (qt_procedimento_resumo_w	<> 0) then
						open C04;
						loop
						fetch C04 into
							nr_seq_item_assistencial_w,
							cd_item_sip_w,
							cd_classificacao_w,
							ie_tipo_contratacao_w,
							ie_segmentacao_w,
							sg_uf_sip_w,
							dt_mes_competencia_w,
							dt_ocorrencia_w;
						EXIT WHEN NOT FOUND; /* apply on C04 */
							begin

							select	nextval('sip_mov_item_assistencial_seq')
							into STRICT	nr_seq_mov_item_sip_w
							;

							insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
								qt_beneficiario, vl_despesa, nr_seq_conta,
								dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
								nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
								nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
								sg_uf, cd_item_sip, cd_classificacao_sip,
								dt_item_sip,cd_procedimento,ie_origem_proced,
								dt_ocorrencia)
							values (nr_seq_mov_item_sip_w, cd_estabelecimento_p, 0,
								0, vl_despesa_w, nr_seq_conta_w,
								clock_timestamp(), nm_usuario_p, clock_timestamp(),
								nm_usuario_p, nr_seq_proc_w, null,
								nr_seq_item_assistencial_w, ie_tipo_contratacao_w, ie_segmentacao_w,
								sg_uf_sip_w, cd_item_sip_w, cd_classificacao_w,
								dt_mes_competencia_w,cd_procedimento_w,ie_origem_proced_w,
								dt_ocorrencia_w);
							end;
						end loop;
						close C04;
					else
						open C03;
						loop
						fetch C03 into
							nr_seq_item_assistencial_w,
							ie_nasc_vivos_w,
							cd_item_sip_w,
							cd_classificacao_w,
							ie_nascido_vivo_w,
							qt_idade_min_w,
							qt_idade_max_w,
							ie_unid_tempo_idade_w,
							ie_considerar_conta_w,
							ie_considerar_guia_w,
							nr_seq_regra_w;
						EXIT WHEN NOT FOUND; /* apply on C03 */
							begin
							ie_idade_w	:= 'S';
							qt_sip_mov_item_assistencial_w	:= 0;
							if (ie_unid_tempo_idade_w = 'A') then
								ie_idade_w	:= 'N';
								if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w <= qt_idade_w) and
									(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w >= qt_idade_w) then
									ie_idade_w	:= 'S';
								end if;
							elsif (ie_unid_tempo_idade_w = 'M') then
								ie_idade_w	:= 'N';
								if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w <= qt_idade_meses_w) or
									(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w >= qt_idade_meses_w) then
									ie_idade_w	:= 'S';
								end if;
							elsif (ie_unid_tempo_idade_w = 'D') then
								ie_idade_w	:= 'N';
								if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w <= qt_idade_dia_w) or
									(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w >= qt_idade_dia_w) then
									ie_idade_w	:= 'S';
								end if;
							end if;

							if (ie_idade_w	= 'S') then
								open C08;
								loop
								fetch C08 into
									cd_classificacao_ww;
								EXIT WHEN NOT FOUND; /* apply on C08 */
									begin
									if (cd_classificacao_w	<> 'G') then
										if (substr(cd_classificacao_w,1,2)	= 'EX') or (substr(cd_classificacao_w,1,2)	= 'EY') or (substr(cd_classificacao_w,1,1)	= 'F')  then
											if ((substr(coalesce(cd_classificacao_ww,'0'),1,2) = substr(coalesce(cd_classificacao_w,'0'),1,2)) or (substr(cd_classificacao_ww,1,1) not in ('E','F','G'))) then
												qt_sip_mov_item_assistencial_w	:= 1;
											end if;
										else
											--if	(substr(nvl(cd_classificacao_ww,'0'),1,1) = substr(nvl(cd_classificacao_w,'0'),1,1)) then
												qt_sip_mov_item_assistencial_w	:= 1;
											--end if;
										end if;
									end if;
									end;
								end loop;
								close C08;

								if (qt_sip_mov_item_assistencial_w	= 0) then
									if (ie_nasc_vivos_w	= 'S') and
										((qt_nasc_vivos_w	<> 0) or (qt_nasc_vivos_premat_w <> 0)) then
										qt_evento_ww	:= qt_nasc_vivos_w + qt_nasc_vivos_premat_w;
									elsif (ie_internado_w = 'S') then
										qt_evento_ww    := 1;
									else
										qt_evento_ww	:= qt_evento_w;
									end if;

									if (coalesce(ie_considerar_conta_w,'N')	= 'S') then
										ie_considerar_conta_ww		:= 'S';
										nr_seq_regra_ww			:= nr_seq_regra_w;
									end if;

									if (coalesce(ie_considerar_guia_w,'N')	= 'S') then
										ie_considerar_guia_ww		:= 'S';
										nr_seq_regra_ww			:= nr_seq_regra_w;
									end if;

									select	nextval('sip_mov_item_assistencial_seq')
									into STRICT	nr_seq_mov_item_sip_w
									;

									insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
										qt_beneficiario, vl_despesa, nr_seq_conta,
										dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
										nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
										nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
										sg_uf, cd_item_sip, cd_classificacao_sip,
										dt_item_sip,cd_procedimento,ie_origem_proced,
										ie_nascido_vivo, dt_ocorrencia, ie_considerar_guia)
									values (nr_seq_mov_item_sip_w, cd_estabelecimento_p, qt_evento_ww,
										1, vl_despesa_w, nr_seq_conta_w,
										clock_timestamp(), nm_usuario_p, clock_timestamp(),
										nm_usuario_p, nr_seq_proc_w, null,
										nr_seq_item_assistencial_w, ie_tipo_contratacao_w, ie_segmentacao_w,
										sg_uf_sip_w, cd_item_sip_w, cd_classificacao_w,
										dt_mes_competencia_w,cd_procedimento_w,ie_origem_proced_w,
										ie_nascido_vivo_w, dt_ocorrencia_item_w, ie_considerar_guia_w);
								end if;
							end if;
							end;
						end loop;
						close C03;
					end if;
				end if;
				/*nr_seq_item_assistencial_w	:= sip_obter_item_assistencial(cd_procedimento_w, ie_origem_proced_w, ie_tipo_guia_w,
											nr_seq_cbo_saude_w, nr_seq_tipo_atendimento_w, nr_seq_clinica_w,
											qt_idade_w, cd_doenca_cid_w, ie_regime_internacao_w,
											'', ie_sexo_w, ie_parto_normal_w, ie_nasc_vivos_w);*/
			end if;
			end;
		end loop;
		close C01;

		cd_procedimento_w	:= '';
		ie_origem_proced_w	:= '';
		cd_area_procedimento_w	:= '';
		cd_especialidade_w	:= '';
		cd_grupo_proc_w		:= '';
		if (ie_considerar_conta_ww	= 'N') then
			open C02;
			loop
			fetch C02 into
				nr_seq_mat_w,
				nr_seq_material_w,
				qt_evento_w,
				vl_despesa_w,
				dt_ocorrencia_item_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				select	max(nr_seq_lote_sip)
				into STRICT	nr_seq_lote_sip_w
				from	sip_mov_item_assistencial
				where	nr_seq_mat	= nr_seq_mat_w;

				if (nr_seq_lote_sip_w IS NOT NULL AND nr_seq_lote_sip_w::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_lote_w
					from	pls_lote_sip
					where	nr_sequencia = nr_seq_lote_sip_w
					and	(dt_envio IS NOT NULL AND dt_envio::text <> '');
				end if;

				if (coalesce(nr_seq_lote_w::text, '') = '') then
					delete	FROM sip_mov_item_assistencial
					where	nr_seq_mat	= nr_seq_mat_w;

					ie_materiais_w	:= 'S';

					select	count(1)
					into STRICT	qt_procedimento_resumo_w
					from	sip_mov_item_assistencial	a,
						pls_conta			b
					where	a.nr_seq_conta		= b.nr_sequencia
					and	b.nr_seq_segurado	= nr_seq_segurado_w
					and	a.nr_seq_material	= nr_seq_material_w
					and	b.nr_seq_protocolo	= nr_seq_prot_referencia_w;

					if (nr_seq_prot_referencia_w IS NOT NULL AND nr_seq_prot_referencia_w::text <> '') and (qt_procedimento_resumo_w <> 0) then
						open C05;
						loop
						fetch C05 into
							nr_seq_item_assistencial_w,
							cd_item_sip_w,
							cd_classificacao_w,
							ie_tipo_contratacao_w,
							ie_segmentacao_w,
							sg_uf_sip_w,
							dt_mes_competencia_w,
							dt_ocorrencia_w;
						EXIT WHEN NOT FOUND; /* apply on C05 */
							begin

							select	nextval('sip_mov_item_assistencial_seq')
							into STRICT	nr_seq_mov_item_sip_w
							;

							insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
								qt_beneficiario, vl_despesa, nr_seq_conta,
								dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
								nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
								nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
								sg_uf, cd_item_sip, cd_classificacao_sip,
								dt_item_sip, nr_seq_material, dt_ocorrencia)
							values (nr_seq_mov_item_sip_w, cd_estabelecimento_p, 0,
								0, vl_despesa_w, nr_seq_conta_w,
								clock_timestamp(), nm_usuario_p, clock_timestamp(),
								nm_usuario_p, null, nr_seq_mat_w,
								nr_seq_item_assistencial_w, ie_tipo_contratacao_w, ie_segmentacao_w,
								sg_uf_sip_w, cd_item_sip_w, cd_classificacao_w,
								dt_mes_competencia_w,nr_seq_material_w, dt_ocorrencia_w);
							end;
						end loop;
						close C05;
					else

					open C06;
					loop
					fetch C06 into
						nr_seq_item_assistencial_w,
						ie_nasc_vivos_w,
						cd_procedimento_ww,
						ie_origem_proced_ww,
						cd_area_procedimento_ww,
						cd_especialidade_ww,
						cd_grupo_proc_ww,
						cd_item_sip_w,
						cd_classificacao_w,
						ie_nascido_vivo_w,
						qt_idade_min_w,
						qt_idade_max_w,
						ie_unid_tempo_idade_w;
					EXIT WHEN NOT FOUND; /* apply on C06 */
						begin
						ie_idade_w	:= 'S';
						qt_sip_mov_item_assistencial_w	:= 0;
						if (ie_unid_tempo_idade_w = 'A') then
							ie_idade_w	:= 'N';
							if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w <= qt_idade_w) and
								(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w >= qt_idade_w) then
								ie_idade_w	:= 'S';
							end if;
						elsif (ie_unid_tempo_idade_w = 'M') then
							ie_idade_w	:= 'N';
							if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w <= qt_idade_meses_w) and
								(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w >= qt_idade_meses_w) then
								ie_idade_w	:= 'S';
							end if;
						elsif (ie_unid_tempo_idade_w = 'D') then
								ie_idade_w	:= 'N';
								if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w <= qt_idade_dia_w) and
									(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w >= qt_idade_dia_w) then
									ie_idade_w	:= 'S';
								end if;
						end if;

						if (ie_idade_w	= 'S') then
							open C07;
							loop
							fetch C07 into
								cd_classificacao_ww;
							EXIT WHEN NOT FOUND; /* apply on C07 */
								begin
								if (cd_classificacao_w	<> 'G') then
									if (substr(cd_classificacao_w,1,2)	= 'EX') or (substr(cd_classificacao_w,1,2)	= 'EY') or (substr(cd_classificacao_w,1,1)	= 'F') then
											if ((substr(coalesce(cd_classificacao_ww,'0'),1,2) = substr(coalesce(cd_classificacao_w,'0'),1,2)) or (substr(cd_classificacao_ww,1,1) not in ('E','F','G'))) then
												qt_sip_mov_item_assistencial_w	:= 1;
											end if;
										else
											--if	(substr(nvl(cd_classificacao_ww,'0'),1,1) = substr(nvl(cd_classificacao_w,'0'),1,1)) then
												qt_sip_mov_item_assistencial_w	:= 1;
											--end if;
										end if;
								end if;
								end;
							end loop;
							close C07;

							if (qt_sip_mov_item_assistencial_w	= 0) then
								qt_ptocedimento_regra_w	:= 1;
								ie_acho_regra_w	:= 'N';
								if (ie_tipo_guia_w	= 5) then
									open C10;
									loop
									fetch C10 into
										nr_seq_conta_w;
									EXIT WHEN NOT FOUND; /* apply on C10 */
										begin
										if (ie_acho_regra_w	= 'N') then
											if (coalesce(cd_procedimento_ww,0) <> 0) then
												select	count(1)
												into STRICT	qt_ptocedimento_regra_w
												from	pls_conta_proc
												where	nr_seq_conta		= nr_seq_conta_w
												and	cd_procedimento		= cd_procedimento_ww
												and	ie_origem_proced	= ie_origem_proced_ww;
											elsif (coalesce(cd_area_procedimento_ww,0) <> 0) then
												select	count(1)
												into STRICT	qt_ptocedimento_regra_w
												from	pls_conta_proc
												where	nr_seq_conta		= nr_seq_conta_w
												and	(obter_dados_estrut_proc(cd_procedimento,ie_origem_proced,'C','A'))::numeric 	= cd_area_procedimento_ww;
											elsif (coalesce(cd_especialidade_ww,0) <> 0) then
												select	count(1)
												into STRICT	qt_ptocedimento_regra_w
												from	pls_conta_proc
												where	nr_seq_conta		= nr_seq_conta_w
												and	(obter_dados_estrut_proc(cd_procedimento,ie_origem_proced,'C','E'))::numeric 	= cd_especialidade_ww;
											elsif (coalesce(cd_grupo_proc_ww,0) <> 0) then
												select	count(1)
												into STRICT	qt_ptocedimento_regra_w
												from	pls_conta_proc	b,
													procedimento	a
												where	b.cd_procedimento	= a.cd_procedimento
												and	b.ie_origem_proced	= a.ie_origem_proced
												and	b.nr_seq_conta		= nr_seq_conta_w
												and	a.cd_grupo_proc		= cd_grupo_proc_ww;
											end if;
											if (coalesce(qt_ptocedimento_regra_w,0) <> 0) then
												ie_acho_regra_w	:= 'S';
											end if;
										end if;
										end;
									end loop;
									close C10;
								else
									if (coalesce(cd_procedimento_ww,0) <> 0) then
										select	count(1)
										into STRICT	qt_ptocedimento_regra_w
										from	pls_conta_proc
										where	nr_seq_conta		= nr_seq_conta_w
										and	cd_procedimento		= cd_procedimento_ww
										and	ie_origem_proced	= ie_origem_proced_ww;
									elsif (coalesce(cd_area_procedimento_ww,0) <> 0) then
										select	count(1)
										into STRICT	qt_ptocedimento_regra_w
										from	pls_conta_proc
										where	nr_seq_conta		= nr_seq_conta_w
										and	(obter_dados_estrut_proc(cd_procedimento,ie_origem_proced,'C','A'))::numeric 	= cd_area_procedimento_ww;
									elsif (coalesce(cd_especialidade_ww,0) <> 0) then
										select	count(1)
										into STRICT	qt_ptocedimento_regra_w
										from	pls_conta_proc
										where	nr_seq_conta		= nr_seq_conta_w
										and	(obter_dados_estrut_proc(cd_procedimento,ie_origem_proced,'C','E'))::numeric 	= cd_especialidade_ww;
									elsif (coalesce(cd_grupo_proc_ww,0) <> 0) then
										select	count(1)
										into STRICT	qt_ptocedimento_regra_w
										from	pls_conta_proc	b,
											procedimento	a
										where	b.cd_procedimento	= a.cd_procedimento
										and	b.ie_origem_proced	= a.ie_origem_proced
										and	b.nr_seq_conta		= nr_seq_conta_w
										and	a.cd_grupo_proc		= cd_grupo_proc_ww;
									end if;
									if (qt_ptocedimento_regra_w > 0) then
										ie_acho_regra_w	:= 'S';
									end if;
								end if;

								if (ie_acho_regra_w = 'S') then
									select	nextval('sip_mov_item_assistencial_seq')
									into STRICT	nr_seq_mov_item_sip_w
									;

									insert into sip_mov_item_assistencial(nr_sequencia, cd_estabelecimento, qt_evento,
										qt_beneficiario, vl_despesa, nr_seq_conta,
										dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
										nm_usuario_nrec, nr_seq_proc, nr_seq_mat,
										nr_seq_item_sip, ie_tipo_contratacao, ie_segmentacao,
										sg_uf, cd_item_sip, cd_classificacao_sip,
										dt_item_sip,nr_seq_material, ie_nascido_vivo,
										dt_ocorrencia)
									values (nr_seq_mov_item_sip_w, cd_estabelecimento_p, 0,
										1, vl_despesa_w, nr_seq_conta_p,
										clock_timestamp(), nm_usuario_p, clock_timestamp(),
										nm_usuario_p, null, nr_seq_mat_w,
										nr_seq_item_assistencial_w, ie_tipo_contratacao_w, ie_segmentacao_w,
										sg_uf_sip_w, cd_item_sip_w, cd_classificacao_w,
										dt_mes_competencia_w,nr_seq_material_w, ie_nascido_vivo_w,
										dt_ocorrencia_item_w);
								end if;
							end if;
						end if;
						end;
					end loop;
					close C06;
					end if;
				end if;
				/*nr_seq_item_assistencial_w	:= sip_obter_item_assistencial(null, null, ie_tipo_guia_w,
											nr_seq_cbo_saude_w, nr_seq_tipo_atendimento_w, nr_seq_clinica_w,
											qt_idade_w, cd_doenca_cid_w, ie_regime_internacao_w,
											nr_seq_mat_w, ie_sexo_w, ie_parto_normal_w, ie_nasc_vivos_w);*/
				end;
			end loop;
			close C02;
		end if;

		if (ie_considerar_guia_ww	= 'S') then
			ie_verificar_atualiza_ww	:= 'GA';
			ie_verificar_atualiza_ww := pls_sip_considerar_guia( nr_seq_regra_ww, nr_seq_conta_p, cd_guia_referencia_w, ie_tipo_contratacao_w, ie_segmentacao_w, sg_uf_sip_w, dt_mes_competencia_w, nm_usuario_p, cd_estabelecimento_p, ie_verificar_atualiza_ww);
		end if;
	end if;

	if (ie_considerar_conta_ww	= 'S') and (ie_considerar_guia_ww	= 'N') then
		CALL pls_sip_considerar_conta( nr_seq_regra_ww, nr_seq_conta_p, ie_tipo_contratacao_w, ie_segmentacao_w,
					sg_uf_sip_w, dt_mes_competencia_w, nm_usuario_p, cd_estabelecimento_p);
	end if;

	if (ie_tipo_guia_w	<> '6') then
		if (ie_internado_w = 'S') then
			qt_evento_w	:= 1;
			if	((qt_nasc_vivos_w	<> 0) or (qt_nasc_vivos_premat_w	<> 0)) then
				qt_evento_w	:= qt_nasc_vivos_w + qt_nasc_vivos_premat_w;
			end if;

			update  sip_mov_item_assistencial
			set     qt_evento       = 0
			where   nr_seq_conta    = nr_seq_conta_p;
			nr_seq_item_internacao_F_w	:= 0;
			nr_seq_item_internacao_EX_w	:= 0;
			nr_seq_item_internacao_EY_w	:= 0;
			open C09;
			loop
			fetch C09 into
				nr_seq_item_internacao_w,
				cd_classificacao_w;
			EXIT WHEN NOT FOUND; /* apply on C09 */
				begin
				update  sip_mov_item_assistencial	a
				set     a.qt_evento	= 0
				where   a.nr_seq_conta	= nr_seq_conta_p
				and	a.nr_sequencia	= nr_seq_item_internacao_w;

				if (substr(cd_classificacao_w,1,1) = 'F') then
					nr_seq_item_internacao_F_w	:= nr_seq_item_internacao_w;
				elsif (substr(cd_classificacao_w,1,2) = 'EX') then
					nr_seq_item_internacao_EX_w	:= nr_seq_item_internacao_w;
				elsif (substr(cd_classificacao_w,1,2) = 'EY') then
					nr_seq_item_internacao_EY_w	:= nr_seq_item_internacao_w;
				end if;
				end;
			end loop;
			close C09;

			update  sip_mov_item_assistencial	a
			set     a.qt_evento	= 1
			where   a.nr_seq_conta	= nr_seq_conta_p
			and	a.nr_sequencia	= nr_seq_item_internacao_F_w;

			update  sip_mov_item_assistencial	a
			set     a.qt_evento	= 1
			where   a.nr_seq_conta	= nr_seq_conta_p
			and	a.nr_sequencia	= nr_seq_item_internacao_EX_w;

			update  sip_mov_item_assistencial	a
			set     a.qt_evento	= 1
			where   a.nr_seq_conta	= nr_seq_conta_p
			and	a.nr_sequencia	= nr_seq_item_internacao_EY_w;

			update  sip_mov_item_assistencial	a
			set     a.qt_evento       = qt_evento_w
			where   a.nr_seq_conta    = nr_seq_conta_p
			and	a.nr_sequencia	in (SELECT  max(x.nr_sequencia)
							from    sip_mov_item_assistencial	x
							where   x.nr_seq_conta    	= nr_seq_conta_p
							and	x.cd_classificacao_sip	= a.cd_classificacao_sip
							and	x.cd_classificacao_sip	= 'G'
							and	(x.cd_procedimento IS NOT NULL AND x.cd_procedimento::text <> ''));

			update	sip_mov_item_assistencial
			set     qt_evento       = 0
			where   nr_seq_conta    = nr_seq_conta_p
			and	(nr_seq_material IS NOT NULL AND nr_seq_material::text <> '');
		end if;
	else
		update  sip_mov_item_assistencial
		set     qt_evento       = 0
		where   nr_seq_conta    = nr_seq_conta_p;
	end if;
	if (ie_internado_w	= 'N') then
		update	sip_mov_item_assistencial
		set     qt_evento       = 0
		where   nr_seq_conta    = nr_seq_conta_p
		and	(nr_seq_material IS NOT NULL AND nr_seq_material::text <> '');
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_sip_conta_assist ( nr_seq_conta_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

