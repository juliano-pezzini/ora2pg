-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pfcs_pa_calc_occupancy_census ( cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


-- Cursors
---- Departments' names
c01_dpt CURSOR FOR
SELECT cd_setor_atendimento cd_department,
    ds_setor_atendimento ds_department
from setor_atendimento
where cd_classif_setor          = PFCS_PCK_CONSTANTS.CD_ED  -- Emergency
    and ie_situacao             = PFCS_PCK_CONSTANTS.IE_ACTIVE
    and cd_estabelecimento_base = cd_estabelecimento_p;

---- All beds
c02_bds CURSOR(cd_setor_atendimento_p bigint) FOR
SELECT CASE WHEN coalesce(sec.ds_setor_atendimento::text, '') = '' THEN  uni.cd_unidade_basica || PFCS_PCK_CONSTANTS.DS_HYPHEN || uni.cd_unidade_compl  ELSE sec.ds_setor_atendimento || PFCS_PCK_CONSTANTS.DS_HYPHEN || uni.cd_unidade_basica || PFCS_PCK_CONSTANTS.DS_HYPHEN || uni.cd_unidade_compl END  ds_location,
  substr(obter_valor_dominio(PFCS_PCK_CONSTANTS.CD_DOMAIN_BED_STATUS, uni.ie_status_unidade),1,255) ds_status,
  uni.ie_status_unidade cd_status,
  uni.cd_unidade_basica ds_room,
  uni.cd_unidade_compl ds_bed,
  uni.nr_seq_interno,
  uni.nr_seq_location,
  PFCS_GET_SPECIAL_REQUESTS(null, nr_seq_location,PFCS_PCK_CONSTANTS.IE_BED_STATUS_AVAILABLE_BR) bedFlags,
  pfcs_get_bed_status(uni.ie_status_unidade, PFCS_PCK_CONSTANTS.IE_TOTAL_BEDS, cd_estabelecimento_p) ie_total_beds,
  pfcs_get_bed_status(uni.ie_status_unidade, PFCS_PCK_CONSTANTS.IE_CENSUS, cd_estabelecimento_p) ie_census,
  uni.ie_situacao
from unidade_atendimento uni,
	 setor_atendimento sec
where uni.cd_setor_atendimento     = cd_setor_atendimento_p
	and  uni.cd_setor_atendimento = sec.cd_setor_atendimento;

---- Occupied beds (Patient info)
c03_ocp CURSOR(nr_seq_interno_p bigint) FOR
SELECT enc.id_encounter nr_encounter_varchar,
    pat.patient_id id_patient,
    pfcs_get_human_name(pat.nr_sequencia, PFCS_PCK_CONSTANTS.DS_PATIENT) nm_patient,
    PFCS_GET_PATIENT_GENDER(pat.gender) gender,
    pat.birthdate,
    to_char(round(months_between(coalesce(pat.deceased_date, clock_timestamp()), pat.birthdate))) qt_patient_age,
    enc.period_start,
    pfcs_get_patient_diagnosis(enc.nr_sequencia) diagnosis,
    uni.cd_unidade_compl ds_bed,
    pfcs_get_code_status(pat.nr_sequencia, enc.nr_sequencia, PFCS_PCK_CONSTANTS.IE_YES_BR) code_status,
    pfcs_get_special_requests(enc.nr_sequencia, uni.nr_seq_location) special_requests,
	coalesce(pfcs_get_checklist(enc.nr_sequencia, pat.nr_sequencia, PFCS_PCK_CONSTANTS.CD_MPL),null) ds_care_status,
	coalesce(pfcs_get_checklist(enc.nr_sequencia, pat.nr_sequencia, PFCS_PCK_CONSTANTS.CD_TOOLTIP),null) ds_checklist,
    enc.nr_sequencia encounter_sequence,
	pfcs_pck_utils.get_start_encounter_status(enc.nr_sequencia,PFCS_PCK_CONSTANTS.SI_STATUS_TRIAGED) ed_triage_start,
	pfcs_pck_utils.get_wait_time_in_status(enc.nr_sequencia,PFCS_PCK_CONSTANTS.SI_STATUS_TRIAGED) ed_waiting_time,
    ((clock_timestamp() - enc.period_start) * 24 * 60 ) total_time,
    enc.si_classif,
    enc.ds_triage_value,
    pfcs_get_lace_plus(enc.nr_sequencia, enc.nr_seq_organization) readmission_risk,
    pfcs_get_edi_score(enc.nr_sequencia   ) nr_edi_score,
    pfcs_get_frequent_flyer(enc.nr_sequencia) flag_recur_pat,
    pfcs_get_recurring_patient(pat.nr_sequencia) ds_recur_pat,
    CASE WHEN coalesce(sec.ds_setor_atendimento::text, '') = '' THEN  uni.cd_unidade_basica || PFCS_PCK_CONSTANTS.DS_HYPHEN || uni.cd_unidade_compl  ELSE sec.ds_setor_atendimento || PFCS_PCK_CONSTANTS.DS_HYPHEN || uni.cd_unidade_basica || PFCS_PCK_CONSTANTS.DS_HYPHEN || uni.cd_unidade_compl END  ds_location,
	pfcs_obs_contributor_pck.get_laceplus(enc.nr_sequencia) ds_readm_risk_contrb,
	pfcs_obs_contributor_pck.get_freqflyer_visits(enc.nr_sequencia) ds_recur_pat_adm_data,
	pfcs_obs_contributor_pck.get_freqflyer_comorbidities(enc.nr_sequencia) ds_recur_pat_comorbd,
	pfcs_obs_contributor_pck.get_freqflyer_visit_reason(enc.nr_sequencia) ds_recur_pat_reasons,
	pfcs_obs_contributor_pck.get_edi_vital_warnings(enc.nr_sequencia) ds_edi_vitals_warn,
	pfcs_obs_contributor_pck.get_edi_contributors(enc.nr_sequencia) ds_edi_contrb
from pfcs_encounter enc,
    pfcs_patient pat,
    unidade_atendimento uni,
	 setor_atendimento sec
where uni.nr_seq_location       = coalesce(enc.nr_seq_location,pfcs_get_pat_location(pat.nr_sequencia, enc.nr_sequencia))
    and uni.nr_seq_interno      = nr_seq_interno_p
    and enc.nr_seq_patient      = pat.nr_sequencia
    and uni.cd_setor_atendimento = sec.cd_setor_atendimento
    and (enc.period_start IS NOT NULL AND enc.period_start::text <> '')
    and coalesce(enc.period_end::text, '') = '';


nr_seq_indicator_w          pfcs_panel.nr_seq_indicator%type := PFCS_PCK_INDICATORS.NR_ED_CENSUS;
pfcs_panel_detail_seq_w     pfcs_panel_detail.nr_sequencia%type;
pfcs_panel_seq_w            pfcs_panel.nr_sequencia%type;
pfcs_detail_bed_seq_w       pfcs_detail_bed.nr_sequencia%type;

ds_dpt_w                    setor_atendimento.ds_setor_atendimento%type;

qt_ed_time_w           	    numeric(20)  := 0;
qt_los_time_w               numeric(20)  := 0;

qt_census_pa_w              numeric(20)  := 0; --> Total of patients in emergency department
qt_census_pa_triaged_w      numeric(20)  := 0; --> Total of patients in emergency department that have started triage
qt_unit_w                   numeric(20)  := 0; --> Total beds
qt_census_w                 numeric(20)  := 0; --> Total beds for census/capacity
qt_occupied_unit_w          numeric(20)  := 0; --> Occupied beds
qt_blocked_unit_w           numeric(20)  := 0; --> Blocked/Suspended Beds
qt_inconsitent_unit_w       numeric(20)  := 0; --> Beds that are blocked but occupied
qt_virtual_encounters_w     numeric(20)  := 0; --> Encounters on virtual beds
BEGIN

for c01_w in c01_dpt loop
    ds_dpt_w := c01_w.ds_department;
    qt_unit_w := 0;
    qt_census_w := 0;
    qt_occupied_unit_w := 0;
    qt_blocked_unit_w := 0;
	qt_inconsitent_unit_w := 0;
    qt_virtual_encounters_w := 0;

    for c02_w in c02_bds(c01_w.cd_department) loop
        if (c02_w.ie_situacao = PFCS_PCK_CONSTANTS.IE_ACTIVE) then
            if (c02_w.ie_census IS NOT NULL AND c02_w.ie_census::text <> '') then
                qt_unit_w := qt_unit_w + 1;
            end if;

            if (c02_w.ie_total_beds = PFCS_PCK_CONSTANTS.IE_YES) then
                qt_census_w := qt_census_w + 1;
            end if;

            if (c02_w.ie_census = PFCS_PCK_CONSTANTS.IE_BLOCKED_BEDS ) then
                qt_blocked_unit_w := qt_blocked_unit_w + 1;
            end if;
        end if;

        select	nextval('pfcs_panel_detail_seq')
        into STRICT	pfcs_panel_detail_seq_w
;

        insert into pfcs_panel_detail(
            nr_sequencia,
            nm_usuario,
            dt_atualizacao,
            nm_usuario_nrec,
            dt_atualizacao_nrec,
            ie_situation,
            nr_seq_indicator,
            nr_seq_operational_level)
        values (
            pfcs_panel_detail_seq_w,
            nm_usuario_p,
            clock_timestamp(),
            nm_usuario_p,
            clock_timestamp(),
            'T',
            nr_seq_indicator_w,
            cd_estabelecimento_p);

        select	nextval('pfcs_detail_bed_seq')
        into STRICT	pfcs_detail_bed_seq_w
;

        insert into pfcs_detail_bed(
            nr_sequencia,
            nm_usuario,
            dt_atualizacao,
            nm_usuario_nrec,
            dt_atualizacao_nrec,
            nr_seq_detail,
            ds_location,
            ds_special_request,
            cd_department,
            ds_department,
            cd_status,
            ds_status,
            ie_status)
        values (
            pfcs_detail_bed_seq_w,
            nm_usuario_p,
            clock_timestamp(),
            nm_usuario_p,
            clock_timestamp(),
            pfcs_panel_detail_seq_w,
            c02_w.ds_location,
            c02_w.bedFlags,
            c01_w.cd_department,
            c01_w.ds_department,
            c02_w.cd_status,
            c02_w.ds_status,
            c02_w.ie_situacao);

        for c03_w in c03_ocp(c02_w.nr_seq_interno) loop
            qt_census_pa_w := qt_census_pa_w + 1;
            qt_occupied_unit_w := qt_occupied_unit_w + 1;

            if (c02_w.ie_situacao = PFCS_PCK_CONSTANTS.IE_INACTIVE) then
                qt_virtual_encounters_w := qt_virtual_encounters_w + 1;
            end if;

            if (c02_w.ie_census = PFCS_PCK_CONSTANTS.IE_BLOCKED_BEDS and c02_w.ie_situacao = PFCS_PCK_CONSTANTS.IE_ACTIVE) then
                qt_inconsitent_unit_w := qt_inconsitent_unit_w + 1;
            end if;

            qt_los_time_w := qt_los_time_w + coalesce(c03_w.total_time,0);

            if (c03_w.ed_triage_start IS NOT NULL AND c03_w.ed_triage_start::text <> '') then
               qt_ed_time_w := qt_ed_time_w + coalesce(c03_w.ed_waiting_time,0);
               qt_census_pa_triaged_w := qt_census_pa_triaged_w + 1;
            end if;

           insert into pfcs_detail_patient(
                nr_sequencia,
                nm_usuario,
                dt_atualizacao,
                nm_usuario_nrec,
                dt_atualizacao_nrec,
                nr_seq_detail,
                nr_encounter_varchar,
                dt_entrance,
                id_patient,
                nm_patient,
                ds_gender,
                dt_birthdate,
                ds_age_range,
                ds_symptoms,
                ds_dnr_status,
                ds_special_request,
                qt_time_total_pa,
                ds_care_status,
                ds_checklist,
                ds_triage_value,
                ds_readmission_risk,
                qt_edi_score,
                ie_freq_flyer,
                ds_recurring_patient,
				ds_readm_risk_contrb,
				ds_rec_pat_adm_data,
				ds_rec_pat_comorbd,
				ds_rec_pat_reasons,
				ds_edi_vitals_warn,
				ds_edi_contrb)
            values (
                nextval('pfcs_detail_patient_seq'),
                nm_usuario_p,
                clock_timestamp(),
                nm_usuario_p,
                clock_timestamp(),
                pfcs_panel_detail_seq_w,
                c03_w.nr_encounter_varchar,
                c03_w.period_start,
                c03_w.id_patient,
                c03_w.nm_patient,
                c03_w.gender,
                c03_w.birthdate,
                c03_w.qt_patient_age,
                c03_w.diagnosis,
                c03_w.code_status,
                c03_w.special_requests,
                c03_w.total_time,
                c03_w.ds_care_status,
                c03_w.ds_checklist,
                c03_w.ds_triage_value,
                c03_w.readmission_risk,
                c03_w.nr_edi_score,
                c03_w.flag_recur_pat,
                c03_w.ds_recur_pat,
				c03_w.ds_readm_risk_contrb,
				c03_w.ds_recur_pat_adm_data,
				c03_w.ds_recur_pat_comorbd,
				c03_w.ds_recur_pat_reasons,
				c03_w.ds_edi_vitals_warn,
				c03_w.ds_edi_contrb);
        end loop;
    end loop;

    /*
        VL_INDICATOR = Total of beds to be considered in census/capacity
        VL_INDICATOR_HELP = Total of occupied beds
        VL_INDICATOR_COLLAB = Total of blocked beds
        VL_INDICATOR_ASSIST = Total of beds that are not blocked (used for simulation calcs)
        VL_INDICATOR_AUX = Total of Available beds
        VL_INDICATOR_DEC = Virtual Encounters
    */
    pfcs_pck.pfcs_generate_results(
        ds_reference_value_p => ds_dpt_w,
        vl_indicator_p => qt_census_w,
        vl_indicator_help_p => qt_occupied_unit_w - qt_inconsitent_unit_w,
        vl_indicator_collab_p => qt_blocked_unit_w ,
        vl_indicator_assist_p => (qt_unit_w - qt_blocked_unit_w),
        vl_indicator_aux_p => (qt_unit_w - qt_occupied_unit_w - qt_blocked_unit_w + qt_inconsitent_unit_w + qt_virtual_encounters_w),
        vl_indicator_dec_p => qt_virtual_encounters_w,
        nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_ED_CAPACITY,
        nr_seq_operational_level_p => cd_estabelecimento_p,
        nm_usuario_p => nm_usuario_p,
        nr_seq_panel_p => pfcs_panel_seq_w);
end loop;

 := pfcs_pck.pfcs_generate_results(
        vl_indicator_p => qt_census_pa_w, nr_seq_indicator_p => nr_seq_indicator_w, nr_seq_operational_level_p => cd_estabelecimento_p, nm_usuario_p => nm_usuario_p, nr_seq_panel_p => pfcs_panel_seq_w);


CALL pfcs_pck.pfcs_update_detail(
        nr_seq_indicator_p => nr_seq_indicator_w,
        nr_seq_panel_p => pfcs_panel_seq_w,
        nr_seq_operational_level_p => cd_estabelecimento_p,
        nm_usuario_p => nm_usuario_p);

CALL pfcs_pck.pfcs_activate_records(
        nr_seq_indicator_p => nr_seq_indicator_w,
        nr_seq_operational_level_p => cd_estabelecimento_p,
        nm_usuario_p => nm_usuario_p);

CALL pfcs_pck.pfcs_activate_records(
        nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_ED_CAPACITY,
        nr_seq_operational_level_p => cd_estabelecimento_p,
        nm_usuario_p => nm_usuario_p);
		
--Calc AVG ED Waiting time
 := pfcs_pck.pfcs_generate_results(
    vl_indicator_p              => qt_census_pa_w, vl_indicator_aux_p          => dividir(qt_ed_time_w, qt_census_pa_triaged_w), nr_seq_indicator_p          => PFCS_PCK_INDICATORS.NR_ED_AVG_WAITING_TIME, nr_seq_operational_level_p  => cd_estabelecimento_p, nm_usuario_p                => nm_usuario_p, nr_seq_panel_p              => pfcs_panel_seq_w);

CALL pfcs_pck.pfcs_activate_records(
    nr_seq_indicator_p          => PFCS_PCK_INDICATORS.NR_ED_AVG_WAITING_TIME,
    nr_seq_operational_level_p  => cd_estabelecimento_p,
    nm_usuario_p                => nm_usuario_p);

-- Calculating the Average LOS
pfcs_pck.pfcs_generate_results(
	vl_indicator_p => (dividir(qt_los_time_w,qt_census_pa_w)),
	nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_ED_AVG_LOS,
	nr_seq_operational_level_p => cd_estabelecimento_p,
	nm_usuario_p => nm_usuario_p,
	nr_seq_panel_p => pfcs_panel_seq_w);

CALL pfcs_pck.pfcs_activate_records(
	nr_seq_indicator_p => PFCS_PCK_INDICATORS.NR_ED_AVG_LOS,
	nr_seq_operational_level_p => cd_estabelecimento_p,
	nm_usuario_p => nm_usuario_p);
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_pa_calc_occupancy_census ( cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

