-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE com_duplicar_cliente ( ie_produto_p text, nr_seq_cliente_p bigint, nm_usuario_p text, cd_canal_p bigint, cd_gestor_p bigint, ds_historico_p text, dt_fechamento_p timestamp) AS $body$
DECLARE

				 
nr_seq_gestor_w		bigint;
nr_seq_cliente_w	bigint;
nr_seq_canal_w		bigint;
nr_seq_canal_ww		bigint;
cd_pessoa_fisica_w	bigint;
ds_email_w		varchar(250);

C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		cd_pessoa_fisica 
	from	com_cliente_gestor 
	where	nr_seq_cliente = nr_seq_cliente_p 
	and	coalesce(dt_final::text, '') = '' 
	order by 1;
	
C02 CURSOR FOR 
	SELECT	nr_sequencia 
	from	com_canal_cliente 
	where	nr_seq_cliente = nr_seq_cliente_p 
	and	coalesce(dt_fim_atuacao::text, '') = '' 
	and	ie_situacao = 'A' 
	order by 1;	

BEGIN 
if (ie_produto_p IS NOT NULL AND ie_produto_p::text <> '') and (nr_seq_cliente_p IS NOT NULL AND nr_seq_cliente_p::text <> '') then 
	 
	select	nextval('com_cliente_seq') 
	into STRICT	nr_seq_cliente_w 
	;
	 
	insert into com_cliente(	 
		nr_sequencia, 
		cd_cnpj, 
		ie_natureza, 
		ie_status_neg, 
		ie_fase_venda, 
		ie_tipo, 
		ie_classificacao, 
		ie_resp_atend, 
		ie_resp_implantacao, 
		ie_situacao, 
		ie_referencia, 
		ie_recebe_visita, 
		ie_hosp_escola, 
		ie_acompanha_implantacao, 
		ie_produto, 
		cd_empresa, 
		dt_atualizacao, 
		nm_usuario, 
		nr_seq_ativ, 
		nr_seq_forma_conhec, 
		qt_leito, 
		qt_leito_uti, 
		vl_fat_anual, 
		dt_revisao_prevista, 
		qt_consultores, 
		dt_oficializacao_uso, 
		ie_resp_coordenacao, 
		qt_mes_estimado, 
		qt_vidas, 
		ie_revisado, 
		nr_visita_pos_venda, 
		cd_estabelecimento, 
		pr_possib_fecham, 
		dt_atualizacao_nrec, 
		ie_inclusao_manual, 
		nm_usuario_nrec, 
		nr_seq_lead, 
		ie_forma_aquisicao, 
		dt_revisao_prevista_orig, 
		dt_cliente, 
		ie_migracao, 
		dt_migrado, 
		ie_etapa_duplic, 
		dt_aprov_duplic) 
	SELECT	nr_seq_cliente_w, 
		cd_cnpj, 
		ie_natureza, 
		ie_status_neg, 
		ie_fase_venda, 
		ie_tipo, 
		ie_classificacao, 
		ie_resp_atend, 
		ie_resp_implantacao, 
		ie_situacao, 
		ie_referencia, 
		ie_recebe_visita, 
		ie_hosp_escola, 
		ie_acompanha_implantacao, 
		ie_produto_p, 
		cd_empresa, 
		clock_timestamp(), 
		nm_usuario_p, 
		nr_seq_ativ, 
		nr_seq_forma_conhec, 
		qt_leito, 
		qt_leito_uti, 
		vl_fat_anual, 
		dt_fechamento_p, 
		qt_consultores, 
		dt_oficializacao_uso, 
		ie_resp_coordenacao, 
		qt_mes_estimado, 
		qt_vidas, 
		ie_revisado, 
		nr_visita_pos_venda, 
		cd_estabelecimento, 
		pr_possib_fecham, 
		clock_timestamp(), 
		ie_inclusao_manual, 
		nm_usuario_p, 
		nr_seq_lead, 
		ie_forma_aquisicao, 
		dt_revisao_prevista_orig, 
		dt_cliente, 
		ie_migracao, 
		dt_migrado, 
		'P', 
		null 
	from	com_cliente 
	where	nr_sequencia = nr_seq_cliente_p;
	 
	 
	if (coalesce(cd_gestor_p::text, '') = '') and (nr_seq_gestor_w IS NOT NULL AND nr_seq_gestor_w::text <> '') then 
		open C01;
		loop 
		fetch C01 into	 
			nr_seq_gestor_w, 
			cd_pessoa_fisica_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			insert into com_cliente_gestor(	 
				nr_sequencia, 
				cd_pessoa_fisica, 
				dt_atualizacao, 
				nm_usuario, 
				nr_seq_cliente, 
				dt_inicial, 
				dt_final, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec) 
			SELECT	nextval('com_cliente_gestor_seq'), 
				cd_pessoa_fisica, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_cliente_w, 
				dt_inicial, 
				dt_final, 
				clock_timestamp(), 
				nm_usuario_p 
			from	com_cliente_gestor 
			where	nr_sequencia = nr_seq_gestor_w;
			 
			select obter_dados_pf_pj(cd_pessoa_fisica_w, null, 'M') 
			into STRICT ds_email_w	 
			;
			end;
		end loop;
		close C01;
	else	insert into com_cliente_gestor(	 
				nr_sequencia, 
				cd_pessoa_fisica, 
				dt_atualizacao, 
				nm_usuario, 
				nr_seq_cliente, 
				dt_inicial, 
				dt_final, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec) 
		values (nextval('com_cliente_gestor_seq'), 
				cd_gestor_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_cliente_w, 
				null, 
				null, 
				clock_timestamp(), 
				nm_usuario_p);
	end if;
	 
	if (coalesce(cd_canal_p::text, '') = '') and (nr_seq_canal_w IS NOT NULL AND nr_seq_canal_w::text <> '')	then 
		open C02;
		loop 
		fetch C02 into	 
			nr_seq_canal_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin 
			insert into com_canal_cliente(	 
				nr_sequencia, 
				nr_seq_canal, 
				nr_seq_cliente, 
				ie_tipo_atuacao, 
				dt_inicio_atuacao, 
				ie_situacao, 
				dt_atualizacao, 
				nm_usuario, 
				dt_fim_atuacao, 
				pr_esforco, 
				cd_vendedor, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec) 
			SELECT	nextval('com_canal_cliente_seq'), 
				nr_seq_canal, 
				nr_seq_cliente_w, 
				ie_tipo_atuacao, 
				dt_inicio_atuacao, 
				ie_situacao, 
				clock_timestamp(), 
				nm_usuario_p, 
				dt_fim_atuacao, 
				pr_esforco, 
				cd_vendedor, 
				clock_timestamp(), 
				nm_usuario_p 
			from	com_canal_cliente 
			where	nr_sequencia = nr_seq_canal_w;
			end;
		end loop;
		close C02;
	else 	insert into com_canal_cliente(	 
			nr_sequencia, 
			nr_seq_canal, 
			nr_seq_cliente, 
			ie_tipo_atuacao, 
			dt_inicio_atuacao, 
			ie_situacao, 
			dt_atualizacao, 
			nm_usuario, 
			dt_fim_atuacao, 
			pr_esforco, 
			cd_vendedor, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec) 
		values (nextval('com_canal_cliente_seq'), 
			cd_canal_p, 
			nr_seq_cliente_w, 
			'V', 
			clock_timestamp(), 
			'A', 
			clock_timestamp(), 
			nm_usuario_p, 
			null, 
			null, 
			null, 
			clock_timestamp(), 
			nm_usuario_p);	
	end if;
	 
	select	max(nr_seq_canal) 
	into STRICT	nr_seq_canal_ww 
	from	com_canal_cliente 
	where	nr_seq_cliente = nr_seq_cliente_w 
	and	nr_sequencia = (SELECT	max(nr_sequencia) 
				from	com_canal_cliente 
				where	nr_seq_cliente = nr_seq_cliente_w);
				 
	insert into com_cliente_hist(	 
		nr_sequencia, 
		nr_seq_cliente, 
		nr_seq_tipo, 
		dt_historico, 
		nm_usuario,		 
		dt_atualizacao, 
		ds_titulo, 
		nr_seq_canal, 
		nr_seq_ativ, 
		nr_seq_classif, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		ds_historico) 
	values (	nextval('com_cliente_hist_seq'), 
		nr_seq_cliente_w, 
		2, 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		'Abertura de conta', 
		cd_canal_p, 
		31, 
		21, 
		clock_timestamp(), 
		nm_usuario_p, 
		'Duplicado a partir do cliente '||nr_seq_cliente_p || chr(13) || ds_historico_p);
 
CALL enviar_email('Duplicação de Cliente', 'Duplicado a partir do cliente ' || nr_seq_cliente_p, 'comercial@wheb.com.br', 'comercial@wheb.com.br;' || ds_email_w, nm_usuario_p, 'A');		
			 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE com_duplicar_cliente ( ie_produto_p text, nr_seq_cliente_p bigint, nm_usuario_p text, cd_canal_p bigint, cd_gestor_p bigint, ds_historico_p text, dt_fechamento_p timestamp) FROM PUBLIC;

