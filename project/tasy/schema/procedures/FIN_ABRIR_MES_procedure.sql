-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fin_abrir_mes (cd_estabelecimento_p bigint, dt_referencia_p timestamp, nm_usuario_p text, ie_cp_cr_p text) AS $body$
DECLARE


cont_w			bigint;
ie_forma_fechamento_w	varchar(1)	:= 'M';
ie_copiar_regra_w	varchar(1)	:= 'N';
nr_seq_mes_w		bigint;
nr_seq_anterior_w	bigint;
nr_dais_permite_w	bigint;


BEGIN

if (ie_cp_cr_p	= 'CR') then
	select	coalesce(max(ie_forma_fechamento),'M')
	into STRICT	ie_forma_fechamento_w
	from	parametro_contas_receber
	where	cd_estabelecimento	= cd_estabelecimento_p;
elsif (ie_cp_cr_p	= 'CP') then
	select	coalesce(max(ie_forma_fechamento),'M')
	into STRICT	ie_forma_fechamento_w
	from	parametros_contas_pagar
	where	cd_estabelecimento	= cd_estabelecimento_p;
elsif (ie_cp_cr_p	= 'A') then
	select	coalesce(max(ie_forma_fechamento),'M')
	into STRICT	ie_forma_fechamento_w
	from	parametro_contas_receber
	where	cd_estabelecimento	= cd_estabelecimento_p;

	if (ie_forma_fechamento_w = 'D') then
		select	coalesce(max(ie_forma_fechamento),'M')
		into STRICT	ie_forma_fechamento_w
		from	parametros_contas_pagar
		where	cd_estabelecimento	= cd_estabelecimento_p;
	end if;
end if;

nr_dais_permite_w := obter_param_usuario(5511, 6, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, nr_dais_permite_w);

if (ie_forma_fechamento_w	= 'D') then
	select	count(*)
	into STRICT	cont_w
	from	fin_mes_ref
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	dt_referencia	= trunc(dt_referencia_p, 'dd')
	and (ie_cp_cr		= ie_cp_cr_p or ie_cp_cr = 'A' or ie_cp_cr_p = 'A');

	if (cont_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(219028);
		--r.aise_application_error(-20011, 'Já existe um dia de referência com esta data!');
	end if;

	if (trunc(clock_timestamp(),'dd') < trunc(dt_referencia_p, 'dd') - nr_dais_permite_w) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(219029,'nr_dais_permite_w='||nr_dais_permite_w);
		--r.aise_application_error(-20011, 'Para abrir um novo dia referência é necessário estar no mínimo nr_dais_permite_w dias antes do novo dia!');
	end if;
else

	select	count(*)
	into STRICT	cont_w
	from	fin_mes_ref
	where	cd_estabelecimento = cd_estabelecimento_p
	and	dt_referencia = pkg_date_utils.start_of(dt_referencia_p, 'MONTH', 0)
	and (ie_cp_cr = ie_cp_cr_p or ie_cp_cr = 'A' or ie_cp_cr_p = 'A');

	if (cont_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(219030);
		--r.aise_application_error(-20011, 'Já existe um mês de referência com esta data!');
	end if;

	if (trunc(clock_timestamp(),'dd') < pkg_date_utils.start_of(dt_referencia_p, 'MONTH', 0) - nr_dais_permite_w) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(219031,'nr_dais_permite_w='||nr_dais_permite_w);
		--r.aise_application_error(-20011, 'Para abrir um novo mês de referência é necessário estar no mínimo nr_dais_permite_w dias antes do novo mês!');
	end if;
end if;

select	nextval('fin_mes_ref_seq')
into STRICT	nr_seq_mes_w
;

insert into fin_mes_ref(nr_sequencia,
	cd_estabelecimento,
	dt_atualizacao,
	nm_usuario,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	dt_referencia,
	dt_abertura,
	nm_usuario_abertura,
	dt_fechamento,
	nm_usuario_fechamento,
	ie_cp_cr)
values (	nr_seq_mes_w,
	cd_estabelecimento_p,
	clock_timestamp(),
	nm_usuario_p,
	clock_timestamp(),
	nm_usuario_p,
	CASE WHEN ie_forma_fechamento_w='D' THEN trunc(dt_referencia_p,'dd')  ELSE pkg_date_utils.start_of(dt_referencia_p, 'MONTH', 0) END ,
	clock_timestamp(),
	nm_usuario_p,
	null,
	null,
	ie_cp_cr_p);

ie_copiar_regra_w := obter_param_usuario(5511, 5, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_copiar_regra_w);

if (ie_copiar_regra_w = 'S') then

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_anterior_w
	from	fin_mes_ref a
	where	a.nr_sequencia		< nr_seq_mes_w
	and	a.cd_estabelecimento	= cd_estabelecimento_p;

	insert	into fin_mes_ref_fora(
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_fin_mes,
		nr_sequencia,
		ie_tipo_titulo_cpa,
		cd_convenio,
		ie_baixa_retorno,
		ie_cancel_conta_pac,
		cd_perfil_lib,
		nm_usuario_lib)
	SELECT	clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_mes_w,
		nextval('fin_mes_ref_fora_seq'),
		ie_tipo_titulo_cpa,
		cd_convenio,
		ie_baixa_retorno,
		ie_cancel_conta_pac,
		cd_perfil_lib,
		nm_usuario_lib
	from	fin_mes_ref_fora a
	where	a.nr_seq_fin_mes	= nr_seq_anterior_w;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fin_abrir_mes (cd_estabelecimento_p bigint, dt_referencia_p timestamp, nm_usuario_p text, ie_cp_cr_p text) FROM PUBLIC;

