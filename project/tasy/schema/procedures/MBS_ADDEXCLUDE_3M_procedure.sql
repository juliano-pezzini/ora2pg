-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mbs_addexclude_3m ( nr_atendimento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


cd_procedimento_w	procedimento_pac_medico.cd_procedimento%type;
ie_situacao_w		procedimento_pac_medico.ie_situacao%type;
cd_motivo_exc_conta_w	parametro_faturamento.cd_motivo_exc_conta%type;
nr_interno_conta_w	conta_paciente.nr_interno_conta%type;
nr_seq_atepacu_w  	atend_paciente_unidade.nr_seq_interno%type;
dt_entrada_unidade_w	atend_paciente_unidade.dt_entrada_unidade%type;
cd_categoria_w		atend_categoria_convenio.cd_categoria%type;
cd_convenio_w		atend_categoria_convenio.cd_convenio%type;
cd_setor_atendimento_w	atend_paciente_unidade.cd_setor_atendimento%type;
nr_seq_procpac_w	bigint;

c01 CURSOR FOR
SELECT  cd_procedimento,
	ie_situacao
from    procedimento_pac_medico
where   nr_atendimento = nr_atendimento_p
and     ie_origem_proced = 19; -- ACHI
c10 CURSOR FOR
	SELECT	x.cd_procedimento,
		x.ie_origem_proced
	from	procedimento_conv_sus x
	where 	x.cd_procedimento_sus = cd_procedimento_w
	and     x.ie_origem_proced_sus = 19 -- ACHI
	and 	x.ie_origem_proced = 20 -- MBS
	and	not exists (	SELECT	1
				from 	procedimento_paciente a
				where	a.cd_procedimento = x.cd_procedimento
				and	a.ie_origem_proced = x.ie_origem_proced
				and 	a.cd_convenio = cd_convenio_w
				and	(a.cd_motivo_exc_conta IS NOT NULL AND a.cd_motivo_exc_conta::text <> '')
				and	a.nr_atendimento = nr_atendimento_p);

c10_w	c10%rowtype;

c11 CURSOR FOR
	SELECT	x.cd_procedimento,
		x.ie_origem_proced
	from	procedimento_conv_sus x
	where 	x.cd_procedimento_sus = cd_procedimento_w
	and     x.ie_origem_proced_sus = 19 -- ACHI
	and 	x.ie_origem_proced = 20 -- MBS
	and	exists (	SELECT	1
				from 	procedimento_paciente a
				where	a.cd_procedimento = x.cd_procedimento
				and	a.ie_origem_proced = x.ie_origem_proced
				and 	a.cd_convenio = cd_convenio_w
				and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
				and	a.nr_atendimento = nr_atendimento_p);

c11_w	c11%rowtype;


BEGIN
/*
It is created to add/exclude the mbs procedures from billing but as of now
this process is not required in SATH.
But latter on this might be required so just placed the codition instead of removing code which calls this procedure.
*/
if (1=2) then
open c01;
loop
fetch c01 into
	cd_procedimento_w,
	ie_situacao_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	
	select	coalesce(max(cd_convenio),0),
		coalesce(max(cd_categoria),0)
	into STRICT	cd_convenio_w,
		cd_categoria_w
	from 	atend_categoria_convenio a
	where 	a.nr_atendimento	= nr_atendimento_p
	and 	a.dt_inicio_vigencia	=	(SELECT max(dt_inicio_vigencia)
						from atend_categoria_convenio b
						where nr_atendimento	= nr_atendimento_p);
	select	max(cd_motivo_exc_conta)
	into STRICT	cd_motivo_exc_conta_w
	from	parametro_faturamento
	where	cd_estabelecimento    = cd_estabelecimento_p;

	if (coalesce(cd_motivo_exc_conta_w::text, '') = '') then
		select	max(cd_motivo_exc_conta)
		into STRICT	cd_motivo_exc_conta_w
		from 	motivo_exc_conta
		where	ie_exclusao = 'S'
		and 	ie_situacao = 'A';
	end if;

	if (ie_situacao_w = 'A') then
		open c10;
		loop
		fetch c10 into
			c10_w;
			EXIT WHEN NOT FOUND; /* apply on c10 */
			begin
			
			nr_seq_atepacu_w	:= obter_atepacu_paciente(nr_atendimento_p, 'A');

			select	coalesce(max(dt_entrada_unidade), clock_timestamp()),
				max(cd_setor_atendimento)
			into STRICT	dt_entrada_unidade_w,
				cd_setor_atendimento_w
			from	atend_paciente_unidade
			where	nr_seq_interno = nr_seq_atepacu_w;
			
			select	coalesce(max(nr_interno_conta),0)
			into STRICT	nr_interno_conta_w
			from 	conta_paciente
			where 	cd_convenio_parametro = cd_convenio_w
			and 	nr_atendimento = nr_atendimento_p
			and 	ie_status_acerto = 1;
			
			select	nextval('procedimento_paciente_seq')
			into STRICT	nr_seq_procpac_w
			;

	
			insert into procedimento_paciente(
						nr_sequencia,
						nr_atendimento,
						dt_entrada_unidade,
						cd_procedimento,
						dt_procedimento,
						cd_convenio,
						cd_categoria,
						ie_origem_proced,
						qt_procedimento,
						cd_setor_atendimento,
						nr_seq_atepacu,
						vl_procedimento,
						nm_usuario_original,
						dt_atualizacao,
						nm_usuario,
						nr_interno_conta)
			values ( 		nr_seq_procpac_w,
						nr_atendimento_p,
						dt_entrada_unidade_w,
						c10_w.cd_procedimento,
						clock_timestamp(),
						cd_convenio_w,
						cd_categoria_w,
						c10_w.ie_origem_proced,
						1,
						cd_setor_atendimento_w,
						nr_seq_atepacu_w,
						0,
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						CASE WHEN nr_interno_conta_w=0 THEN null  ELSE nr_interno_conta_w END 
						);
	
				CALL atualiza_preco_procedimento(nr_seq_procpac_w, cd_convenio_w, nm_usuario_p);
			end;
		end loop;
		close c10;
	else
	
		open c11;
		loop
		fetch c11 into
			c11_w;
			EXIT WHEN NOT FOUND; /* apply on c11 */
			begin
			
			update	procedimento_paciente
			set	cd_motivo_exc_conta = cd_motivo_exc_conta_w
			where 	nr_atendimento 	= nr_atendimento_p
			and 	cd_procedimento = c11_w.cd_procedimento
			and	ie_origem_proced = c11_w.ie_origem_proced
			and 	cd_convenio 	= cd_convenio_w;
			end;
		end loop;
		close c11;
	end if;
	end;
end loop;
close c01;

end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mbs_addexclude_3m ( nr_atendimento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

