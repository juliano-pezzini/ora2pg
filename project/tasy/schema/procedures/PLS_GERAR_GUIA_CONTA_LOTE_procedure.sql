-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_guia_conta_lote ( nr_seq_lote_automatic_p bigint, nr_seq_protocolo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, qt_max_conta_p pls_cta_regra_apres_aut.qt_max_conta%type) AS $body$
DECLARE



ds_diagnostico_w		varchar(2000);
ds_motivo_w			varchar(255);
nm_recem_nascido_w		varchar(80);
dt_emissao_w			pls_guia_plano.dt_emissao%type;
cd_senha_externa_w		varchar(30);
cd_guia_w			varchar(20);
nr_crm_exec_w			varchar(20)	:= null;
sg_conselho_exec_w		varchar(20)	:= null;
cd_medico_exec_w		varchar(10);
cd_medico_solicitante_w		varchar(10);
cd_cooperativa_w		varchar(10)	:= null;
cd_doenca_w			varchar(10);
ie_pagamento_automatico_w	varchar(3);
ie_tipo_guia_w			varchar(2);
ie_tipo_proc_w			varchar(2);
uf_crm_exec_w			valor_dominio.vl_dominio%type;
ie_parametro_w			varchar(2);
ie_tipo_atend_tiss_w		varchar(2);
ie_carater_internacao_w		varchar(1);
ie_classificacao_proc_w		varchar(1);
ie_tipo_doenca_w		varchar(1);
ie_indicacao_acidente_w		varchar(1);
ie_classificacao_w		varchar(1);
ie_recem_nascido_w		varchar(1);
nr_seq_segurado_w		bigint;
nr_seq_prestador_w		bigint;
nr_seq_tipo_atendimento_w	bigint;
nr_seq_conta_w			bigint;
cd_estabelecimento_w		bigint;
cd_proc_mat_w			bigint;
ie_origem_proced_w		bigint;
nr_seq_cbo_saude_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conselho_exec_w		bigint;
ie_tipo_consulta_w		bigint;
ie_estagio_complemento_w	bigint;
nr_seq_prest_fornec_w		bigint;
nr_seq_tipo_acomodacao_w	bigint;
nr_seq_protocolo_w		bigint;
nr_seq_guia_w			bigint;
ie_tipo_saida_w			bigint;
ie_tipo_saida_str_w		varchar(10);
qt_item_w			bigint;
nr_seq_conta_ww			bigint;
nr_seq_cbo_w			bigint 	:= null;
cd_especialidade_w		bigint;
nr_seq_prestador_solic_w	bigint;
qt_solicitada_w			pls_guia_plano_proc.qt_solicitada%type;
qt_autorizada_w			pls_guia_plano_proc.qt_autorizada%type;
dt_nasc_recem_nascido_w		timestamp;
nr_seq_lote_w			bigint;
nr_seq_prestador_ant_w		pls_guia_plano.nr_seq_prestador%type	:= 0;
qt_registro_w			integer	:= 0;
nr_seq_clinica_w		pls_guia_plano.nr_seq_clinica%type;
ie_regime_internacao_w		pls_guia_plano.ie_regime_internacao%type;
cd_guia_principal_w		pls_guia_plano.cd_guia_principal%type;
ie_motivo_encerramento_w	pls_guia_plano.ie_motivo_encerramento%type;
tb_nr_seq_guia_w		pls_util_cta_pck.t_number_table;
qt_max_conta_w			pls_cta_regra_apres_aut.qt_max_conta%type;
index_w				bigint;
ds_indicacao_clinica_w		pls_guia_plano.ds_indicacao_clinica%type;
ds_observacao_w			pls_guia_plano.ds_observacao%type;
dt_autorizacao_w		pls_guia_plano.dt_autorizacao%type;
cd_senha_w			pls_guia_plano.cd_senha%type;
dt_validade_senha_w		pls_guia_plano.dt_validade_senha%type;
cd_guia_prestador_w		pls_guia_plano.cd_guia_prestador%type;
ie_medico_requisicao_w		pls_parametros.ie_medico_requisicao%type;
nr_seq_prestador_exec_req_w	pls_requisicao.nr_seq_prestador_exec%type;
cd_medico_partic_w		pls_guia_plano.cd_medico_solicitante%type;
ie_gera_partic_w		varchar(2) := 'N';
nr_seq_grau_partic_w		pls_grau_participacao.nr_sequencia%type;
nr_seq_apres_aut_guia_w		pls_apres_automatica_guia.nr_sequencia%type;
cd_medico_exec_req_w		pls_execucao_req_item.cd_medico_executor%type;
ie_agrupamento_lote_w		pls_regra_geracao_lote_cta.ie_forma_agrupamento%type;
ie_data_base_apresentacao_w	pls_parametros.ie_data_base_apresentacao%type;
dt_solicitacao_w		pls_guia_plano.dt_solicitacao%type;
nr_seq_grau_partic_regra_w	pls_proc_participante.nr_seq_grau_partic%type;
ie_via_acesso_regra_w		pls_conta_proc.ie_via_acesso%type;
ie_valido_w			varchar(1);
ie_qtd_autorizada_w		pls_parametros.ie_qtd_autorizada%type;
ie_cbo_autorizacao_w		pls_regra_conta_aut.ie_cbo_autorizacao%type;

nr_seq_item_tiss_w		pls_guia_plano_proc.nr_seq_item_tiss%type;
cd_validacao_benef_tiss_w	pls_conta_tiss.cd_validacao_benef_tiss%type;
cd_ausencia_val_benef_tiss_w	pls_conta_tiss.cd_ausencia_val_benef_tiss%type;
cd_ident_biometria_benef_w	pls_conta_tiss.cd_ident_biometria_benef%type;
cd_template_biomet_benef_w	pls_conta_tiss.cd_template_biomet_benef%type;
ie_tipo_ident_benef_w		pls_conta_tiss.ie_tipo_ident_benef%type;
ds_erro_w					varchar(4000);
ds_stack_w 					varchar(4000);
ds_err_stack_w				varchar(4000);
tb_seq_guia_w				pls_util_cta_pck.t_number_table;
tb_seq_prestador_w			pls_util_cta_pck.t_number_table;
tb_sequencia_w				pls_util_cta_pck.t_number_table;
ds_motivo_zerado_w			varchar(255);
ds_erro_zerado_w			varchar(4000);
ie_regime_atendimento_w		pls_guia_plano.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_guia_plano.ie_saude_ocupacional%type;

C01 CURSOR FOR
	SELECT	a.cd_procedimento cd_proc_mat,
		a.qt_solicitada,
		a.qt_autorizada,
		a.ie_origem_proced,
		'P' ie_tipo_proc,
		null nr_seq_prest_fornec,
		( 	SELECT 	max(nr_seq_grau_partic)
			from	pls_regra_conta_aut c
			where	c.nr_sequencia = b.nr_seq_pgto_aut) nr_seq_grau_partic_regra,
		(	select	max(ie_via_acesso)
			from	pls_regra_conta_aut c
			where	c.nr_sequencia = b.nr_seq_pgto_aut) ie_via_acesso_regra,
		a.nr_seq_item_tiss
	from	pls_guia_plano_proc 	a,
		pls_guia_plano		b
	where	a.nr_seq_guia	= b.nr_sequencia
	and	b.nr_sequencia  = nr_seq_guia_w
	and	pls_conta_autor_pck.pls_obter_ie_utilizado_guia(a.nr_seq_guia, a.nr_sequencia,null, cd_estabelecimento_p) in ('P','N')
	
union

	select	a.nr_seq_material cd_proc_mat,
		a.qt_solicitada,
		a.qt_autorizada,
		null,
		'M' ie_tipo_proc,
		a.nr_seq_prest_fornec nr_seq_prest_fornec,
		null nr_seq_grau_partic_regra,
		null ie_via_acesso_regra,
		a.nr_seq_item_tiss
	from	pls_guia_plano_mat 	a,
		pls_guia_plano		b
	where	a.nr_seq_guia	= b.nr_sequencia
	and	b.nr_sequencia  = nr_seq_guia_w
	and	pls_conta_autor_pck.pls_obter_ie_utilizado_guia(a.nr_seq_guia, null,a.nr_sequencia, cd_estabelecimento_p) in ('P','N')
	order by
		2,
		1;

C02 CURSOR FOR
	SELECT	cd_doenca,
		ie_tipo_doenca,
		ie_indicacao_acidente,
		ie_classificacao,
		ds_diagnostico
	from 	pls_diagnostico
	where	nr_seq_guia	= nr_seq_guia_w;

C03 CURSOR(	nr_seq_guia_pc			pls_apres_automatica_guia.nr_seq_guia%type,
				nr_seq_prestador_pc		pls_guia_plano.nr_seq_prestador%type,	
				nr_sequencia_pc			pls_apres_automatica_guia.nr_sequencia%type
			)FOR
	SELECT	nr_seq_guia_pc 			nr_seq_guia,
			nr_seq_prestador_pc		nr_seq_prestador,
			nr_sequencia_pc			nr_sequencia
	;
	
C00 CURSOR( nr_seq_lote_w	pls_apres_automatica_guia.nr_seq_lote%type) FOR
	SELECT	nr_seq_guia,
		(SELECT nr_seq_prestador from pls_guia_plano where nr_sequencia = nr_seq_guia) nr_seq_prestador,
		nr_sequencia
	from 	pls_apres_automatica_guia
	where	nr_seq_lote	= nr_seq_lote_w
	order by nr_seq_prestador;

BEGIN

-- fica como S, e se alguma guia cair em alguma validacao,ficara como N para nao atualizar a data de integracao
ie_valido_w := 'S';

if (qt_max_conta_p IS NOT NULL AND qt_max_conta_p::text <> '') then
	qt_max_conta_w := qt_max_conta_p;
else
	qt_max_conta_w := 100;
end if;

select	coalesce(ie_medico_requisicao,'N'),
	coalesce(ie_data_base_apresentacao,'DS'),
	coalesce(ie_qtd_autorizada,'N')
into STRICT	ie_medico_requisicao_w,
	ie_data_base_apresentacao_w,
	ie_qtd_autorizada_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

delete	FROM pls_log_apresent_autom
where 	nr_seq_lote_apresentacao = nr_seq_lote_automatic_p;

update	pls_lote_apres_automatica
set	ie_status 	= '2'
where	nr_sequencia 	= nr_seq_lote_automatic_p;

index_w	:= 0;

open C00(nr_seq_lote_automatic_p);
loop
	-- Limpa os registros da lista para que nao seja processado o mesmo registro mais de uma vez.
	tb_sequencia_w.delete;

	fetch C00 bulk collect into tb_seq_guia_w, tb_seq_prestador_w, tb_sequencia_w;
	
	-- Quando o cursor nao tiver mais linhas entao sai do loop.
	EXIT WHEN NOT FOUND; /* apply on C00 */
				
	
end loop;
close C00;

if (tb_sequencia_w.count > 0) then
	
	for i in tb_sequencia_w.first..tb_sequencia_w.last loop
	
		for r_c03_w in c03( tb_seq_guia_w(i), tb_seq_prestador_w(i), tb_sequencia_w(i)) loop

			nr_seq_guia_w := r_c03_w.nr_seq_guia;
			nr_seq_prestador_w := r_c03_w.nr_seq_prestador;
			nr_seq_apres_aut_guia_w := r_c03_w.nr_sequencia;

			ds_motivo_w	:= '';
			ds_erro_w := '';
			ds_stack_w := '';
			ds_err_stack_w := '';
			nr_seq_cbo_w	:= null;

			begin
				nr_seq_protocolo_w	:= null;

				begin
					select	cd_guia,
						nr_seq_segurado,
						nr_seq_prestador,
						cd_medico_solicitante,
						CASE WHEN ie_tipo_guia='1' THEN  '5' WHEN ie_tipo_guia='2' THEN  '4' WHEN ie_tipo_guia='3' THEN  '3' WHEN ie_tipo_guia='8' THEN  '5' END ,
						ie_carater_internacao,
						ie_tipo_atend_tiss,
						cd_estabelecimento,
						dt_solicitacao,
						ie_tipo_consulta,
						coalesce(ie_pagamento_automatico, 'PA'),
						ie_estagio_complemento,
						nr_seq_tipo_acomodacao,
						coalesce(ie_tipo_saida, '3'),
						cd_senha_externa,
						coalesce(cd_especialidade, 0),
						nr_seq_cbo_saude,
						nr_seq_clinica,
						ie_regime_internacao,
						cd_guia_principal,
						ie_motivo_encerramento,
						substr(ds_indicacao_clinica, 1,500),
						ds_observacao,
						dt_autorizacao,
						cd_senha,
						dt_validade_senha,
						coalesce(cd_guia_prestador,cd_guia),
						cd_validacao_benef_tiss,
						cd_ausencia_val_benef_tiss,
						cd_ident_biometria_benef,
						cd_template_biomet_benef,
						ie_tipo_ident_benef,
						(select max(ie_cbo_autorizacao)
						from	pls_regra_conta_aut b
						where	b.nr_sequencia = nr_seq_pgto_aut) ie_cbo_autorizacao,
						ie_regime_atendimento,
						ie_saude_ocupacional
					into STRICT	cd_guia_w,
						nr_seq_segurado_w,
						nr_seq_prestador_w,
						cd_medico_exec_w,
						ie_tipo_guia_w,
						ie_carater_internacao_w,
						ie_tipo_atend_tiss_w,
						cd_estabelecimento_w,
						dt_solicitacao_w,
						ie_tipo_consulta_w,
						ie_pagamento_automatico_w,
						ie_estagio_complemento_w,
						nr_seq_tipo_acomodacao_w,
						ie_tipo_saida_str_w,
						cd_senha_externa_w,
						cd_especialidade_w,
						nr_seq_cbo_w,
						nr_seq_clinica_w,
						ie_regime_internacao_w,
						cd_guia_principal_w,
						ie_motivo_encerramento_w,
						ds_indicacao_clinica_w,
						ds_observacao_w,
						dt_autorizacao_w,
						cd_senha_w,
						dt_validade_senha_w,
						cd_guia_prestador_w,
						cd_validacao_benef_tiss_w,
						cd_ausencia_val_benef_tiss_w,
						cd_ident_biometria_benef_w,
						cd_template_biomet_benef_w,
						ie_tipo_ident_benef_w,
						ie_cbo_autorizacao_w,
						ie_regime_atendimento_w,
						ie_saude_ocupacional_w
					from	pls_guia_plano
					where	nr_sequencia	= nr_seq_guia_w;

					begin
						ie_tipo_saida_w := ie_tipo_saida_str_w;
					exception
					when others then
						ie_tipo_saida_w := 3;
					end;

					if (ie_data_base_apresentacao_w	= 'DS') then
						dt_emissao_w	:= dt_solicitacao_w;
					elsif (ie_data_base_apresentacao_w	= 'DA') then
						dt_emissao_w	:= dt_autorizacao_w;
					end if;

					if (cd_medico_exec_w IS NOT NULL AND cd_medico_exec_w::text <> '') then
						nr_crm_exec_w		:= substr(obter_dados_medico(cd_medico_exec_w,'CRM'),1,20);
						uf_crm_exec_w		:= substr(obter_dados_medico(cd_medico_exec_w,'UFCRM'),1,2);
						sg_conselho_exec_w	:= substr(obter_dados_medico(cd_medico_exec_w, 'SGCRM'),1,20);
					end if;

					if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
						cd_cooperativa_w	:= substr(obter_cooperativa_benef(nr_seq_segurado_w, cd_estabelecimento_w),1,4);
					end if;
				exception
				when others then
					ds_motivo_w	:= 'Falha ao carregar dados da guia: '||nr_seq_guia_w;
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
				end;

				if (coalesce(nr_seq_prestador_w::text, '') = '') then
					ds_motivo_w	:= 'Prestador nao encontrado na guia: '||nr_seq_guia_w;
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
				end if;

				cd_medico_partic_w := cd_medico_exec_w;

				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_ww
				from 	pls_conta
				where	nr_seq_guia	= nr_seq_guia_w
				and	ie_status	!= 'C';

				if (nr_seq_conta_ww IS NOT NULL AND nr_seq_conta_ww::text <> '') then
					ds_motivo_w	:= 'Guia com conta ja gerada, conta numero : ' || nr_seq_conta_ww;
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
				end if;

				if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then
					nr_seq_protocolo_w	:= nr_seq_protocolo_p;
					update	pls_protocolo_conta
					set	nr_seq_lote_apres_autom	= nr_seq_lote_automatic_p
					where	nr_sequencia		= nr_seq_protocolo_w;
				else
					begin
						select	max(nr_sequencia)
						into STRICT	nr_seq_protocolo_w
						from 	pls_protocolo_conta a
						where	a.nr_seq_prestador	= nr_seq_prestador_w
						and	a.ie_tipo_guia		= ie_tipo_guia_w
						and	a.nr_seq_lote_conta	= nr_seq_lote_w
						and	a.nr_seq_lote_apres_autom = nr_seq_lote_automatic_p
						and	((	SELECT 	count(1)
								from 	pls_conta b
								where 	b.nr_seq_protocolo = a.nr_sequencia) < qt_max_conta_w);

						if (coalesce(nr_seq_protocolo_w::text, '') = '') then
							nr_seq_protocolo_w := pls_gerar_protocolo_automatic(	nr_seq_prestador_w, clock_timestamp(), nr_seq_protocolo_w, ie_tipo_guia_w, null, null, cd_estabelecimento_p, clock_timestamp(), nm_usuario_p, null, nr_seq_lote_w, nr_seq_lote_automatic_p, 'N', clock_timestamp());
						end if;
					exception
					when others then
						ds_motivo_w	:= 'Falha na geracao do protocolo ';
						ds_stack_w := dbms_utility.format_call_stack;
						ds_err_stack_w := dbms_utility.format_error_backtrace;
						ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
						CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
					end;
				end if;

				begin
					select	max(nr_sequencia)
					into STRICT	nr_seq_tipo_atendimento_w
					from	pls_tipo_atendimento
					where	cd_tipo_atendimento	= ie_tipo_atend_tiss_w;
				exception
				when others then
					ds_motivo_w	:= 'Falha ao identificar tipo de atendimento ';
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
				end;

				if (coalesce(nr_seq_tipo_atendimento_w::text, '') = '') then
					begin
						select	max(nr_sequencia)
						into STRICT	nr_seq_tipo_atendimento_w
						from	pls_tipo_atendimento
						where	(cd_tipo_atendimento)::numeric 	= (ie_tipo_atend_tiss_w)::numeric;
					exception
					when others then
						ds_motivo_w	:= 'Falha ao identificar tipo de atendimento ';
						ds_stack_w := dbms_utility.format_call_stack;
						ds_err_stack_w := dbms_utility.format_error_backtrace;
						ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
						CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
					end;
				end if;

				begin
					cd_medico_solicitante_w	:= cd_medico_exec_w;


					if (ie_estagio_complemento_w <> 1) then
						ie_parametro_w		:= obter_valor_param_usuario(1208,30,Obter_Perfil_Ativo,nm_usuario_p,cd_estabelecimento_p);

						if (ie_parametro_w = 'E') then
							cd_medico_solicitante_w	:= null;
						elsif (ie_parametro_w	= 'S') then
							cd_medico_exec_w 	:= null;
							nr_crm_exec_w	 	:= null;
							uf_crm_exec_w	 	:= null;
							sg_conselho_exec_w	:= null;
						elsif (ie_parametro_w = 'N') then
							cd_medico_exec_w	:= null;
							cd_medico_solicitante_w	:= null;
							nr_crm_exec_w		:= null;
							uf_crm_exec_w		:= null;
							sg_conselho_exec_w	:= null;
						end if;
					end if;
				exception
				when others then
					ds_motivo_w := 'Falha ao identificar parametro atribuicao medico ';
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
				end;
				if (coalesce(ie_cbo_autorizacao_w,'N') = 'S') then
				nr_seq_cbo_saude_w := nr_seq_cbo_w;				
				end if;
				--nas guias de sp/sadr e resumo ter internacao nao possui mais a informacao do profissioanl executor
				if (ie_tipo_guia_w in ('4','5')) then
					begin
					cd_medico_exec_w 	:= null;
					nr_crm_exec_w	 	:= null;
					uf_crm_exec_w	 	:= null;
					sg_conselho_exec_w	:= null;
					nr_seq_cbo_w		:= null;
					end;
				end if;

				if (coalesce(nr_seq_cbo_w::text, '') = '') then
					begin
						select	max(nr_seq_cbo_saude)
						into STRICT	nr_seq_cbo_w
						from	medico_especialidade
						where	cd_pessoa_fisica	= cd_medico_exec_w
						and	nr_seq_prioridade	=	(SELECT	min(nr_seq_prioridade)
											from	medico_especialidade
											where	cd_pessoa_fisica	= cd_medico_exec_w
											and	(nr_seq_cbo_saude IS NOT NULL AND nr_seq_cbo_saude::text <> ''));
					exception
					when others then
						nr_seq_cbo_w	:= null;
					end;

					begin
					if (coalesce(nr_seq_cbo_saude_w, 0) = 0) then
						select	max(nr_seq_cbo_saude)
						into STRICT	nr_seq_cbo_saude_w
						from	medico_especialidade
						where	cd_pessoa_fisica	= cd_medico_solicitante_w
						and	nr_seq_prioridade	=	(SELECT	min(nr_seq_prioridade)
											from	medico_especialidade
											where	cd_pessoa_fisica	= cd_medico_solicitante_w
											and	(nr_seq_cbo_saude IS NOT NULL AND nr_seq_cbo_saude::text <> ''));
					end if;
					exception
					when others then
						nr_seq_cbo_saude_w	:= null;
					end;
				else
					nr_seq_cbo_saude_w := nr_seq_cbo_w;
				end if;

				--incluido tratamento cbo devido a inclusao da informacao da guia
				begin
					if (coalesce(cd_especialidade_w,0) > 0) and (coalesce(nr_seq_cbo_w::text, '') = '' )then
						select  max(nr_seq_cbo_saude)
						into STRICT	nr_seq_cbo_w
						from    especialidade_medica
						where	cd_especialidade	= cd_especialidade_w;
					end if;
				exception
				when others then
					ds_motivo_w	:= 'Falha ao identificar especialidade medica ';
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
				end;

				begin
					select	max(c.nr_seq_prestador),
						max(c.ie_recem_nascido),
						max(c.nm_recem_nascido),
						max(c.dt_nasc_recem_nascido),
						max(coalesce(c.nr_seq_prestador_exec,d.nr_seq_prestador)),
						max(a.cd_medico_executor)
					into STRICT	nr_seq_prestador_solic_w,
						ie_recem_nascido_w,
						nm_recem_nascido_w,
						dt_nasc_recem_nascido_w,
						nr_seq_prestador_exec_req_w,
						cd_medico_exec_req_w
					from  	pls_guia_plano    	b,
						pls_execucao_req_item 	a,
						pls_requisicao   	c,
						pls_execucao_requisicao d
					where 	b.nr_sequencia    	= a.nr_seq_guia
					and   	d.nr_sequencia 		= a.nr_seq_execucao
					and 	a.nr_seq_requisicao   	= c.nr_sequencia
					and 	(a.nr_seq_requisicao IS NOT NULL AND a.nr_seq_requisicao::text <> '')
					and	a.nr_seq_guia 		= nr_seq_guia_w;

					if (ie_medico_requisicao_w	= 'S') and (nr_seq_prestador_exec_req_w IS NOT NULL AND nr_seq_prestador_exec_req_w::text <> '') and (ie_tipo_guia_w		= '3')then
						begin
						select 	max(p.cd_pessoa_fisica)
						into STRICT	cd_medico_exec_w
						from	pls_prestador	p,
							medico		m
						where	p.nr_sequencia 		= nr_seq_prestador_exec_req_w
						and	p.cd_pessoa_fisica	= m.cd_pessoa_fisica;

						if (cd_medico_exec_w IS NOT NULL AND cd_medico_exec_w::text <> '') then
							begin
							nr_crm_exec_w		:= substr(obter_dados_medico(cd_medico_exec_w,'CRM'),1,20);
							uf_crm_exec_w		:= substr(obter_dados_medico(cd_medico_exec_w,'UFCRM'),1,2);
							sg_conselho_exec_w	:= substr(obter_dados_medico(cd_medico_exec_w, 'SGCRM'),1,20);

							select	max(nr_seq_cbo_saude)
							into STRICT	nr_seq_cbo_saude_w
							from	medico_especialidade
							where	cd_pessoa_fisica	= cd_medico_exec_w
							and	nr_seq_prioridade	=	(SELECT	min(nr_seq_prioridade)
												from	medico_especialidade
												where	cd_pessoa_fisica	= cd_medico_exec_w
												and	(nr_seq_cbo_saude IS NOT NULL AND nr_seq_cbo_saude::text <> ''));
							end;
						end if;

						end;

					elsif (ie_medico_requisicao_w	= 'E') and (cd_medico_exec_req_w IS NOT NULL AND cd_medico_exec_req_w::text <> '') and (ie_tipo_guia_w IS NOT NULL AND ie_tipo_guia_w::text <> '') then
						begin
						cd_medico_exec_w	:= cd_medico_exec_req_w;
						nr_crm_exec_w		:= substr(obter_dados_medico(cd_medico_exec_w,'CRM'),1,20);
						uf_crm_exec_w		:= substr(obter_dados_medico(cd_medico_exec_w,'UFCRM'),1,2);
						sg_conselho_exec_w	:= substr(obter_dados_medico(cd_medico_exec_w, 'SGCRM'),1,20);

						select	max(nr_seq_cbo_saude)
						into STRICT	nr_seq_cbo_saude_w
						from	medico_especialidade
						where	cd_pessoa_fisica	= cd_medico_exec_w
						and	nr_seq_prioridade	=	(SELECT	min(nr_seq_prioridade)
											from	medico_especialidade
											where	cd_pessoa_fisica	= cd_medico_exec_w
											and	(nr_seq_cbo_saude IS NOT NULL AND nr_seq_cbo_saude::text <> ''));

						end;
					end if;

					if (ie_tipo_guia_w = '5') and (coalesce(cd_guia_principal_w::text, '') = '') then
						cd_guia_principal_w	:= cd_guia_w;
					end if;

					if (cd_medico_exec_w IS NOT NULL AND cd_medico_exec_w::text <> '') then
						nr_seq_conselho_exec_w	:= substr(pls_obter_seq_conselho_prof(cd_medico_exec_w),1,255);
					end if;

					insert into pls_conta(nr_sequencia, cd_guia_prestador, dt_emissao,
						nr_seq_segurado, nr_seq_prestador_exec, cd_medico_executor,
						ie_tipo_guia, ie_carater_internacao, nr_seq_tipo_atendimento,
						ie_status, nr_seq_protocolo, nr_seq_saida_spsadt,
						dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
						nm_usuario_nrec, cd_estabelecimento, nr_crm_exec,
						nr_seq_cbo_saude_solic, uf_crm_exec, sg_conselho_exec,
						cd_guia, cd_medico_solicitante, cd_cooperativa,
						ie_tipo_consulta, nr_seq_conselho_exec,
						vl_adic_co,vl_adic_materiais,vl_adic_procedimento,
						vl_cobrado,vl_coparticipacao,vl_diarias,
						vl_diarias_imp,vl_gases,vl_gases_imp,
						vl_glosa,vl_liberado_ptu,vl_materiais,
						vl_materiais_imp,vl_medicamentos,vl_medicamentos_imp,
						vl_opm,vl_opm_imp,vl_pacotes,
						vl_pagamento_medico,vl_procedimentos,vl_procedimentos_imp,
						vl_saldo,vl_taxas,vl_taxas_imp,
						vl_total,vl_total_beneficiario,vl_total_imp,
						nr_seq_tipo_acomodacao, ie_origem_conta, nr_seq_saida_consulta,
						dt_atendimento,nr_seq_cbo_saude, cd_senha_externa,
						ie_tipo_conta, nr_seq_prestador, dt_nascimento,
						nm_recem_nascido, ie_recem_nascido, cd_guia_referencia,
						nr_seq_clinica,ie_regime_internacao, ie_motivo_encerramento,
						ds_indicacao_clinica, ds_observacao,
						dt_autorizacao,cd_senha,dt_validade_senha,
						ie_regime_atendimento, ie_saude_ocupacional)
					values (nextval('pls_conta_seq'), cd_guia_prestador_w,dt_emissao_w,
						nr_seq_segurado_w, nr_seq_prestador_w, cd_medico_exec_w,
						ie_tipo_guia_w, ie_carater_internacao_w, nr_seq_tipo_atendimento_w,
						'U', nr_seq_protocolo_w, null,
						clock_timestamp(), nm_usuario_p, clock_timestamp(),
						nm_usuario_p, cd_estabelecimento_w, nr_crm_exec_w,
						nr_seq_cbo_saude_w, uf_crm_exec_w, sg_conselho_exec_w,
						cd_guia_w, cd_medico_solicitante_w, cd_cooperativa_w,
						ie_tipo_consulta_w, nr_seq_conselho_exec_w,
						0,0,0,
						0,0,0,
						0,0,0,
						0,0,0,
						0,0,0,
						0,0,0,
						0,0,0,
						0,0,0,
						0,0,0,
						nr_seq_tipo_acomodacao_w, 'T',null,
						dt_emissao_w,nr_seq_cbo_w,cd_senha_externa_w,
						'O', nr_seq_prestador_solic_w,dt_nasc_recem_nascido_w,
						nm_recem_nascido_w,coalesce(ie_recem_nascido_w,'N'),cd_guia_principal_w,
						nr_seq_clinica_w,ie_regime_internacao_w, ie_motivo_encerramento_w,
						ds_indicacao_clinica_w, ds_observacao_w,
						dt_autorizacao_w,cd_senha_w,dt_validade_senha_w,
						ie_regime_atendimento_w, ie_saude_ocupacional_w) returning nr_sequencia into nr_seq_conta_w;


					CALL pls_conta_tiss_pck.criar_registro(	nr_seq_conta_w,			cd_estabelecimento_p,		cd_validacao_benef_tiss_w,
										cd_ausencia_val_benef_tiss_w,	cd_ident_biometria_benef_w,	cd_template_biomet_benef_w,
										ie_tipo_ident_benef_w,		null,	nm_usuario_p);
				exception
				when others then
					ds_motivo_w	:= substr('Falha da geracao da conta ' || sqlerrm, 1, 255);
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
				end;


				begin
					open C02;
					loop
					fetch C02 into
						cd_doenca_w,
						ie_tipo_doenca_w,
						ie_indicacao_acidente_w,
						ie_classificacao_w,
						ds_diagnostico_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */
						begin
						insert into pls_diagnostico_conta(nr_sequencia,
							cd_doenca,
							ie_tipo_doenca,
							ie_indicacao_acidente,
							ie_classificacao,
							ds_diagnostico,
							dt_atualizacao,
							nm_usuario,
							nr_seq_conta)
						values (nextval('pls_diagnostico_conta_seq'),
							cd_doenca_w,
							ie_tipo_doenca_w,
							ie_indicacao_acidente_w,
							ie_classificacao_w,
							ds_diagnostico_w,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_conta_w);


						if (ie_indicacao_acidente_w IS NOT NULL AND ie_indicacao_acidente_w::text <> '') then
							update	pls_conta
							set	ie_indicacao_acidente = ie_indicacao_acidente_w
							where	nr_sequencia = nr_seq_conta_w;
						end if;

						end;
					end loop;
					close C02;
				exception
				when others then
					ds_motivo_w	:= 'Falha ao gravar diagnostico da conta ';
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
				end;

				open c01;
				loop
				fetch c01 into
					cd_proc_mat_w,
					qt_solicitada_w,
					qt_autorizada_w,
					ie_origem_proced_w,
					ie_tipo_proc_w,
					nr_seq_prest_fornec_w,
					nr_seq_grau_partic_regra_w,
					ie_via_acesso_regra_w,
					nr_seq_item_tiss_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					if (qt_solicitada_w > 0 and qt_autorizada_w > 0 ) then
						begin
							if (ie_tipo_proc_w = 'P') then
								begin
								select	ie_classificacao
								into STRICT	ie_classificacao_proc_w
								from	procedimento
								where	cd_procedimento		= cd_proc_mat_w
								and	ie_origem_proced	= ie_origem_proced_w;
								exception
								when others then
									ie_classificacao_proc_w	:= '1';
								end;

								if (ie_qtd_autorizada_w = 'S') then
								insert into pls_conta_proc(nr_sequencia, cd_procedimento, qt_procedimento_imp,
									qt_procedimento,ie_status, dt_atualizacao,
									nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
									nr_seq_conta, ie_situacao, tx_item,
									ie_origem_proced, ie_tipo_despesa, ie_estagio_complemento,
									vl_adic_co, vl_adic_materiais,	vl_adic_procedimento,
									vl_anestesista,vl_auxiliares,vl_beneficiario,
									vl_coparticipacao,vl_co_ptu,vl_custo_operacional,
									vl_exame_coleta,vl_glosa,vl_intercambio,
									vl_liberado,vl_liberado_regra,vl_liquido,
									vl_materiais,vl_material_ptu,vl_medico,
									vl_pag_medico_conta,vl_participacao,vl_pcmso,
									vl_prestador,vl_proc_copartic,vl_procedimento,
									vl_procedimento_imp,vl_procedimento_ptu,vl_proc_unitario,
									vl_saldo,vl_total_procedimento,vl_unitario,
									vl_unitario_imp, qt_autorizado, dt_procedimento,
									dt_inicio_proc, dt_fim_proc, ie_via_acesso)
								values (nextval('pls_conta_proc_seq'), cd_proc_mat_w, qt_autorizada_w,
									qt_autorizada_w,'S', clock_timestamp(),
									nm_usuario_p, clock_timestamp(), nm_usuario_p,
									nr_seq_conta_w, 'D', 100,
									ie_origem_proced_w, ie_classificacao_proc_w, 3,
									0,0,0,
									0,0,0,
									0,0,0,
									0,0,0,
									0,0,0,
									0,0,0,
									0,0,0,
									0,0,0,
									0,0,0,
									0,0,0,
									0, qt_autorizada_w, dt_emissao_w,
									dt_emissao_w,dt_emissao_w, ie_via_acesso_regra_w) returning nr_sequencia into nr_seq_conta_proc_w;
								else								
									insert into pls_conta_proc(nr_sequencia, cd_procedimento, qt_procedimento_imp,
										qt_procedimento,ie_status, dt_atualizacao,
										nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
										nr_seq_conta, ie_situacao, tx_item,
										ie_origem_proced, ie_tipo_despesa, ie_estagio_complemento,
										vl_adic_co, vl_adic_materiais,	vl_adic_procedimento,
										vl_anestesista,vl_auxiliares,vl_beneficiario,
										vl_coparticipacao,vl_co_ptu,vl_custo_operacional,
										vl_exame_coleta,vl_glosa,vl_intercambio,
										vl_liberado,vl_liberado_regra,vl_liquido,
										vl_materiais,vl_material_ptu,vl_medico,
										vl_pag_medico_conta,vl_participacao,vl_pcmso,
										vl_prestador,vl_proc_copartic,vl_procedimento,
										vl_procedimento_imp,vl_procedimento_ptu,vl_proc_unitario,
										vl_saldo,vl_total_procedimento,vl_unitario,
										vl_unitario_imp, qt_autorizado, dt_procedimento,
										dt_inicio_proc, dt_fim_proc, ie_via_acesso)
									values (nextval('pls_conta_proc_seq'), cd_proc_mat_w, qt_solicitada_w,
										qt_autorizada_w,'S', clock_timestamp(),
										nm_usuario_p, clock_timestamp(), nm_usuario_p,
										nr_seq_conta_w, 'D', 100,
										ie_origem_proced_w, ie_classificacao_proc_w, 3,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0,0,
										0, qt_autorizada_w, dt_emissao_w,
										dt_emissao_w,dt_emissao_w, ie_via_acesso_regra_w) returning nr_sequencia into nr_seq_conta_proc_w;
								end if;


								-- verifica se foi informado o sequencial do tiss, para gerar as regras
								if (nr_seq_item_tiss_w IS NOT NULL AND nr_seq_item_tiss_w::text <> '') then

									-- Se existe a regra, so atualiza, senao gera novamente
									CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_proc(nr_seq_conta_proc_w, nm_usuario_p);


									CALL pls_cta_proc_mat_regra_pck.atualiza_seq_tiss_proc(nr_seq_conta_proc_w, nr_seq_item_tiss_w, null, nm_usuario_p);

								end if;

								ie_gera_partic_w := obter_valor_param_usuario(1285, 29, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p);

								if (ie_gera_partic_w = 'S') and (ie_tipo_guia_w = '4') then

									if (coalesce(nr_seq_grau_partic_regra_w::text, '') = '') then

										select	max(nr_sequencia)
										into STRICT	nr_seq_grau_partic_w
										from	pls_grau_participacao
										where	cd_tiss = '12'
										and	ie_situacao = 'A';
									end if;

									insert	into	pls_proc_participante(	cd_medico, dt_atualizacao, dt_atualizacao_nrec,
											ie_status, nm_usuario, nm_usuario_nrec,
											nr_seq_conta_proc, nr_seq_grau_partic, nr_sequencia,
											vl_anestesista, vl_anestesista_base, vl_apresentado,
											vl_auxiliares, vl_auxiliares_base, vl_calculado,
											vl_calculado_ant, vl_digitado_complemento, vl_glosa,
											vl_honorario_medico, vl_medico, vl_medico_base,
											vl_negociado, vl_participante, vl_pos_estab,
											nr_seq_cbo_saude)
									values (	cd_medico_partic_w, clock_timestamp(), clock_timestamp(),
											'U', nm_usuario_p, nm_usuario_p,
											nr_seq_conta_proc_w, coalesce(nr_seq_grau_partic_regra_w, nr_seq_grau_partic_w), nextval('pls_proc_participante_seq'),
											0,0,0,
											0,0,0,
											0,0,0,
											0,0,0,
											0,0,0,
											nr_seq_cbo_w);
								end if;
							end if;
						exception
						when others then
							ds_motivo_w	:= 'Falha na gravacao dos procedimentos da guia ';
							ds_stack_w := dbms_utility.format_call_stack;
							ds_err_stack_w := dbms_utility.format_error_backtrace;
							ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
							CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
						end;

						begin
							if (ie_tipo_proc_w = 'M') then

								if (ie_qtd_autorizada_w = 'S') then
								insert into pls_conta_mat(nr_sequencia, nr_seq_material, qt_material_imp,
									qt_material, ie_status, dt_atualizacao,
									nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
									nr_seq_conta, ie_situacao, ie_estagio_complemento,
									vl_adic_material,vl_beneficiario,vl_gerado,
									vl_glosa,vl_intercambio,vl_liberado,
									vl_liberado_regra,vl_mat_copartic,vl_material,
									vl_material_imp,vl_material_ptu,vl_participacao,
									vl_pcmso,vl_saldo,vl_unitario,
									vl_unitario_imp, nr_seq_prest_fornec, qt_autorizado,
									dt_atendimento)
								values (nextval('pls_conta_mat_seq'), cd_proc_mat_w, qt_autorizada_w,
									qt_autorizada_w,'S', clock_timestamp(),
									nm_usuario_p,clock_timestamp(), nm_usuario_p,
									nr_seq_conta_w,'D', 3,
									0,0,0,
									0,0,0,
									0,0,0,
									0,0,0,
									0,0,0,
									0, nr_seq_prest_fornec_w, qt_autorizada_w,
									dt_emissao_w) returning nr_sequencia into nr_seq_conta_mat_w;								
								else								
									insert into pls_conta_mat(nr_sequencia, nr_seq_material, qt_material_imp,
										qt_material, ie_status, dt_atualizacao,
										nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
										nr_seq_conta, ie_situacao, ie_estagio_complemento,
										vl_adic_material,vl_beneficiario,vl_gerado,
										vl_glosa,vl_intercambio,vl_liberado,
										vl_liberado_regra,vl_mat_copartic,vl_material,
										vl_material_imp,vl_material_ptu,vl_participacao,
										vl_pcmso,vl_saldo,vl_unitario,
										vl_unitario_imp, nr_seq_prest_fornec, qt_autorizado,
										dt_atendimento)
									values (nextval('pls_conta_mat_seq'), cd_proc_mat_w, qt_solicitada_w,
										qt_autorizada_w,'S', clock_timestamp(),
										nm_usuario_p,clock_timestamp(), nm_usuario_p,
										nr_seq_conta_w,'D', 3,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0,0,
										0,0,0,
										0, nr_seq_prest_fornec_w, qt_autorizada_w,
										dt_emissao_w) returning nr_sequencia into nr_seq_conta_mat_w;								
								end if;
								
								-- so gera neste momento quando possui informacao
								if (nr_seq_item_tiss_w IS NOT NULL AND nr_seq_item_tiss_w::text <> '') then

									-- Se existe a regra, so atualiza, senao gera novamente
									CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_mat(nr_seq_conta_mat_w, nm_usuario_p);

									CALL pls_cta_proc_mat_regra_pck.atualiza_seq_tiss_mat(nr_seq_conta_mat_w, nr_seq_item_tiss_w, null, nm_usuario_p);

								end if;

							end if;
						exception
						when others then
							ds_motivo_w	:= 'Falha na gravacao dos materias da guia ';
							ds_stack_w := dbms_utility.format_call_stack;
							ds_err_stack_w := dbms_utility.format_error_backtrace;
							ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
							CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
						end;

						begin
							if (coalesce(nr_seq_protocolo_w::text, '') = '') then
								CALL pls_gerar_protocolo_conta(nr_seq_conta_w, cd_estabelecimento_w, nm_usuario_p);

							end if;
						exception
						when others then
							ds_motivo_w	:= 'Falha ao consistir guia ';
							ds_stack_w := dbms_utility.format_call_stack;
							ds_err_stack_w := dbms_utility.format_error_backtrace;
							ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
							CALL wheb_mensagem_pck.exibir_mensagem_abort(183010);
						end;
					else
																
						ds_motivo_zerado_w := 'Guia com itens negativos ou zerados';						
						ds_stack_w := dbms_utility.format_call_stack;
						ds_err_stack_w := dbms_utility.format_error_backtrace;
						ds_erro_zerado_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					
					end if;
				end loop;
				close C01;

				begin
					select 	count(1)
					into STRICT	qt_item_w
					from	pls_conta_proc
					where	nr_seq_conta	= nr_seq_conta_w;
				exception
				when others then
					ds_motivo_w	:= 'Guia ao contar quantidade de itens';
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(195881);
				end;
				if (qt_item_w = 0) then
					select	count(1)
					into STRICT	qt_item_w
					from	pls_conta_mat
					where	nr_seq_conta	= nr_seq_conta_w;

					if (qt_item_w = 0) then
						ds_motivo_w	:= 'Guia sem itens, ou com itens em situacao igual a totalmente utilizado';
						ds_stack_w := dbms_utility.format_call_stack;
						ds_err_stack_w := dbms_utility.format_error_backtrace;
						ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
						CALL wheb_mensagem_pck.exibir_mensagem_abort( 183011 );
					end if;
				end if;

				ie_agrupamento_lote_w := pls_obter_regra_ger_lote_cta(nr_seq_protocolo_w, cd_estabelecimento_p);

				if (ie_agrupamento_lote_w = 'PP') then

					select	max(a.nr_sequencia)
					into STRICT	nr_seq_lote_w
					from	pls_lote_protocolo_conta a,
						pls_protocolo_conta b
					where	a.nr_sequencia = b.nr_seq_lote_conta
					and	a.ie_status = 'U'
					and	b.nr_seq_prestador = nr_seq_prestador_w
					and	b.ie_origem_protocolo = 'T';

					if (coalesce(nr_seq_lote_w::text, '') = '') then
						nr_seq_lote_w := pls_gerar_lote_guia_aut(cd_estabelecimento_p, nm_usuario_p, nr_seq_lote_w);
					end if;

				elsif (ie_agrupamento_lote_w = 'PL') then

					nr_seq_lote_w := pls_gerar_lote_guia_aut(cd_estabelecimento_p, nm_usuario_p, nr_seq_lote_w);

				else
					if (coalesce(nr_seq_prestador_w,0) != coalesce(nr_seq_prestador_ant_w,0)) and (nr_seq_prestador_w IS NOT NULL AND nr_seq_prestador_w::text <> '') then
						nr_seq_prestador_ant_w := nr_seq_prestador_w;

						if (qt_registro_w	> 5000) or (coalesce(nr_seq_lote_w::text, '') = '') then
							qt_registro_w := 0;
							nr_seq_lote_w := pls_gerar_lote_guia_aut(cd_estabelecimento_p, nm_usuario_p, nr_seq_lote_w);
						end if;
					end if;
				end if;

				update	pls_protocolo_conta
				set	nr_seq_lote_conta	= nr_seq_lote_w,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	nr_sequencia		= nr_seq_protocolo_w;

				begin

					/*Diego Os 315626 - 18/05/2011 - Caso seja uma importacao de guia de pagamento automatico e atualizado para que conste a informacao de "Conta gerada" */

					if (ie_pagamento_automatico_w = 'PA') then

						update	pls_apres_automatica_guia
						set	nr_seq_conta = nr_seq_conta_w
						where   nr_sequencia = nr_seq_apres_aut_guia_w;

						update	pls_guia_plano
						set	ie_pagamento_automatico	= 'CG'
						where	nr_sequencia	= nr_seq_guia_w;

						commit;

					end if;

				exception
				when others then
					ds_motivo_w	:= 'Guia com falha ao realizar update';
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);
					CALL wheb_mensagem_pck.exibir_mensagem_abort(183011);
				end;
			exception
			when others then
			
				if (coalesce(ds_motivo_w,'X') = 'X') then

					ds_motivo_w := 'Guia nao inserida pela falta de dado na guia '||nr_seq_guia_w;
					ds_stack_w := dbms_utility.format_call_stack;
					ds_err_stack_w := dbms_utility.format_error_backtrace;
					ds_erro_w := substr(	'Erro: ' || sqlerrm || pls_util_pck.enter_w || pls_util_pck.enter_w ||
									'Stack:' || pls_util_pck.enter_w ||
									ds_stack_w || pls_util_pck.enter_w ||
									'Error Back Trace: ' || pls_util_pck.enter_w ||
									ds_err_stack_w,1,4000);

				end if;

				if (C01%ISOPEN) then
					close C01;
				end if;

				if (C02%ISOPEN) then
					close C02;
				end if;

				rollback;
				insert  into pls_log_apresent_autom(nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nr_seq_guia,
					nr_seq_lote_apresentacao,
					ds_motivo,
					nr_sequencia,
					ds_log)
				values (nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nr_seq_guia_w,
					nr_seq_lote_automatic_p,
					ds_motivo_w,
					nextval('pls_log_apresent_autom_seq'),
					ds_Erro_w);

				update	pls_lote_apres_automatica
				set	ie_status = '3'
				where	nr_sequencia = nr_seq_lote_automatic_p;

				ie_valido_w := 'N';

				commit;
			end;
									
			if (ds_motivo_zerado_w IS NOT NULL AND ds_motivo_zerado_w::text <> '') then
				-- quando item com quantidade zerada, nao lanca exception e sim trata apenas com o log. Caso a guia nao tiver nenhum item, lancara uma exception propria para isso
																	
				insert  into pls_log_apresent_autom(nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nr_seq_guia,
					nr_seq_lote_apresentacao,
					ds_motivo,
					nr_sequencia,
					ds_log)
				values (nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nr_seq_guia_w,
					nr_seq_lote_automatic_p,
					ds_motivo_zerado_w,
					nextval('pls_log_apresent_autom_seq'),
					ds_Erro_zerado_w );
			end if;
			ds_motivo_zerado_w := null;
			ds_Erro_zerado_w := null;

		end loop;
		qt_registro_w	:= qt_registro_w +1;
	end loop;
end if;

if (tb_nr_seq_guia_w.count > 0) then
	forall i in tb_nr_seq_guia_w.first..tb_nr_seq_guia_w.last
		update	pls_guia_plano
		set	ie_pagamento_automatico	= 'CG'
		where	nr_sequencia	= tb_nr_seq_guia_w(i);

	forall i in tb_nr_seq_guia_w.first..tb_nr_seq_guia_w.last
		update	pls_guia_plano
		set	ie_pagamento_automatico	= 'CG'
		where	nr_seq_guia_principal	= tb_nr_seq_guia_w(i);

	tb_nr_seq_guia_w.delete;
end if;

update	pls_lote_apres_automatica
set	dt_integracao	= CASE WHEN ie_valido_w='S' THEN  clock_timestamp()  ELSE null END ,
	nm_usuario	= nm_usuario_p,
	ie_status	= CASE WHEN ie_status='2' THEN '1'  ELSE ie_status END
where	nr_sequencia	= nr_seq_lote_automatic_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_guia_conta_lote ( nr_seq_lote_automatic_p bigint, nr_seq_protocolo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, qt_max_conta_p pls_cta_regra_apres_aut.qt_max_conta%type) FROM PUBLIC;

