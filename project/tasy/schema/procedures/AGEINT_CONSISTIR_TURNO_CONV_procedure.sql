-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_consistir_turno_conv ( nr_seq_agenda_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nr_seq_turno_p bigint, cd_convenio_p bigint, ie_classif_agenda_p text, ds_consistencia_p INOUT text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_encaixe_p text, cd_categoria_p text default null) AS $body$
DECLARE


ds_consistencia_w    varchar(255) := '';
nr_seq_regra_w      bigint;
qt_permitido_w      bigint;
pr_permitido_w      bigint;
ie_atende_conv_w    varchar(1);
ie_regra_conv_w      varchar(1) := 'N';
ds_convenio_w      varchar(255);
qt_agenda_conv_w    bigint;
qt_agenda_w        bigint;
pr_agenda_conv_w    double precision;
dt_inicio_vigencia_w  timestamp;
dt_fim_vigencia_w    timestamp;
dt_atual_w        timestamp;
qt_perm_encaixe_w    bigint;
qt_encaixe_atual_w    bigint;
ie_ultrapassar_limite_w  varchar(1);
qt_regra_w        bigint;
qt_regra_classif_w    bigint;
nr_seq_turno_regra_w  agenda_turno_conv.nr_seq_turno%type;
ie_encaixe_convenio_w  varchar(1) := 'S';
ie_tipo_convenio_w    bigint;
ie_tipo_convenio_regra_w bigint;
ie_encaixe_w    varchar(1);
ie_valida_zerada_w agenda_turno_conv.ie_valida_zerada%type;

c01 CURSOR FOR
SELECT  nr_sequencia,
        coalesce(qt_permissao,0) qt_permissao,
        coalesce(pr_permissao,0) pr_permissao,
        coalesce(ie_atende_convenio,'N') ie_atende_convenio,
        trunc(dt_inicio_vigencia) dt_inicio_vigencia,
        trunc(dt_fim_vigencia) dt_fim_vigencia,
        coalesce(qt_perm_encaixe,0) qt_perm_encaixe,
        coalesce(nr_seq_turno,0) nr_seq_turno,
        ie_tipo_convenio,
        coalesce(ie_valida_zerada, 'N') ie_valida_zerada
from  agenda_turno_conv
where  nr_seq_turno  = nr_seq_turno_p
and    coalesce(cd_convenio, cd_convenio_p)  = cd_convenio_p
and    ((coalesce(cd_categoria,coalesce(cd_categoria_p,'XPTO')) = coalesce(cd_categoria_p,'XPTO')) or (coalesce(cd_categoria::text, '') = ''))
and    coalesce(ie_tipo_convenio, ie_tipo_convenio_w) = ie_tipo_convenio_w
order by
  coalesce(cd_convenio, 0),
  coalesce(cd_categoria, '0'),
  coalesce(ie_tipo_convenio, 0);

BEGIN

ie_encaixe_w := coalesce(ie_encaixe_p,'N');
select  count(*)
into STRICT  qt_regra_w
from  ageint_turno_conv_classif
where  coalesce(ie_situacao,'A') = 'A';

select  count(*)
into STRICT  qt_regra_classif_w
from  ageint_turno_conv_classif
where  ie_classif_agenda = ie_classif_agenda_p
and    coalesce(ie_situacao,'A') = 'A';

if (qt_regra_w = 0) or (qt_regra_classif_w > 0) then
  ie_ultrapassar_limite_w := obter_valor_param_usuario(821, 194, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  ie_encaixe_convenio_w   := obter_valor_param_usuario(821, 187, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);

  if (coalesce(cd_agenda_p,0) > 0) and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') and (coalesce(nr_seq_turno_p,0) > 0) and (coalesce(cd_convenio_p,0) > 0) then

    select  max(ie_tipo_convenio)
    into STRICT   ie_tipo_convenio_w
    from   convenio
    where   cd_convenio = cd_convenio_p;

    for c01_w in c01 loop
      begin
      nr_seq_regra_w           := c01_w.nr_sequencia;
      qt_permitido_w           := c01_w.qt_permissao;
      pr_permitido_w           := c01_w.pr_permissao;
      ie_atende_conv_w         := c01_w.ie_atende_convenio;
      dt_inicio_vigencia_w     := c01_w.dt_inicio_vigencia;
      dt_fim_vigencia_w        := c01_w.dt_fim_vigencia;
      qt_perm_encaixe_w        := c01_w.qt_perm_encaixe;
      nr_seq_turno_regra_w     := c01_w.nr_seq_turno;
      ie_tipo_convenio_regra_w := c01_w.ie_tipo_convenio;
      ie_valida_zerada_w       := c01_w.ie_valida_zerada;

      ie_regra_conv_w  := 'S';

      end;
    end loop;

    if (ie_regra_conv_w = 'S') then

      ds_convenio_w  := obter_nome_convenio(cd_convenio_p);

      if (ie_atende_conv_w = 'N') then
        if (dt_inicio_vigencia_w IS NOT NULL AND dt_inicio_vigencia_w::text <> '') and (dt_fim_vigencia_w IS NOT NULL AND dt_fim_vigencia_w::text <> '') then
          if (trunc(dt_agenda_p) >= dt_inicio_vigencia_w) and (trunc(dt_agenda_p) <= dt_fim_vigencia_w) then
            ds_consistencia_w  := wheb_mensagem_pck.get_texto(306823, 'DS_CONVENIO_W=' || ds_convenio_w); -- Convenio #@DS_CONVENIO_W#@ nao esta liberado para atender neste periodo!
          end if;
        else
          ds_consistencia_w  := wheb_mensagem_pck.get_texto(306825, 'DS_CONVENIO_W=' || ds_convenio_w); -- Atencao: o convenio #@DS_CONVENIO_W#@ nao esta liberado para atender neste turno!
        end if;
      elsif (dt_inicio_vigencia_w IS NOT NULL AND dt_inicio_vigencia_w::text <> '') and (dt_fim_vigencia_w IS NOT NULL AND dt_fim_vigencia_w::text <> '') then
        if (trunc(dt_agenda_p) < dt_inicio_vigencia_w) or (trunc(dt_agenda_p) > dt_fim_vigencia_w) then
          ds_consistencia_w  := wheb_mensagem_pck.get_texto(306823, 'DS_CONVENIO_W=' || ds_convenio_w); -- Convenio #@DS_CONVENIO_W#@ nao esta liberado para atender neste periodo!
        end if;

      elsif (ie_encaixe_convenio_w = 'S') and (ie_ultrapassar_limite_w = 'N') and (qt_perm_encaixe_w > 0) and (ie_encaixe_w = 'S') and (nr_seq_turno_regra_w = nr_seq_turno_p) then

        select  count(*)
        into STRICT  qt_encaixe_atual_w
        from  agenda_consulta a
        where  cd_agenda  = cd_agenda_p
        and    dt_agenda  between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + 86399/86400
        and    ie_status_agenda not in ('C','F','I')
        and  ((cd_convenio    = cd_convenio_p)
        or (exists (SELECT  1
            from  convenio x
            where   a.cd_convenio = x.cd_convenio
            and   x.ie_tipo_convenio = ie_tipo_convenio_w)
            and   (ie_tipo_convenio_regra_w IS NOT NULL AND ie_tipo_convenio_regra_w::text <> '')))
        and    nr_seq_turno   = nr_seq_turno_p
        and    ie_encaixe = 'S';

        if (qt_encaixe_atual_w >= qt_perm_encaixe_w) then

          ds_consistencia_w  := wheb_mensagem_pck.get_texto(306831, 'DS_CONVENIO_W=' || ds_convenio_w || ';' ||
                                          'QT_PERM_ENCAIXE_W=' || to_char(qt_perm_encaixe_w));
                    -- Atencao: o convenio #@DS_CONVENIO_W#@ atingiu a quantidade limite (#@ QT_PERM_ENCAIXE_W#@) de encaixes permitidos neste turno!
        end if;

      elsif (ie_ultrapassar_limite_w = 'N') and (qt_permitido_w > 0 or ie_valida_zerada_w = 'S') and (ie_encaixe_w = 'N') then

        select  count(*)
        into STRICT  qt_agenda_conv_w
        from  agenda_consulta a
        where  cd_agenda  = cd_agenda_p
        and  dt_agenda  between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + 86399/86400
        and  ie_status_agenda not in ('C','F','I')
        and  nr_sequencia  <> nr_seq_agenda_p
        and  nr_seq_turno   = nr_seq_turno_p
        and  ((cd_convenio    = cd_convenio_p)
        or (exists (SELECT  1
            from  convenio x
            where   a.cd_convenio = x.cd_convenio
            and   x.ie_tipo_convenio = ie_tipo_convenio_w)
            and   (ie_tipo_convenio_regra_w IS NOT NULL AND ie_tipo_convenio_regra_w::text <> '')));


        if (qt_agenda_conv_w >= qt_permitido_w) then

          ds_consistencia_w  := wheb_mensagem_pck.get_texto(306834,  'DS_CONVENIO_W=' || ds_convenio_w || ';' ||
                                        'QT_PERMITIDO_W=' || to_char(qt_permitido_w));
                    -- Atencao: o convenio #@DS_CONVENIO_W#@ atingiu a quantidade limite (#@QT_PERMITIDO_W#@) de agendamentos permitidos neste turno!
        end if;

      elsif (ie_ultrapassar_limite_w = 'N') and (pr_permitido_w > 0) and (ie_encaixe_w = 'N')then

        select  count(*)
        into STRICT  qt_agenda_w
        from  agenda_consulta
        where  cd_agenda  = cd_agenda_p
        and  ie_status_agenda <> 'C'
        and  nr_sequencia  <> nr_seq_agenda_p
        and  nr_seq_turno   = nr_seq_turno_p
        and  dt_agenda  between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + 86399/86400;

        select  count(*)
        into STRICT  qt_agenda_conv_w
        from  agenda_consulta a
        where  cd_agenda  = cd_agenda_p
        and  ie_status_agenda <> 'C'
        and  dt_agenda  between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + 86399/86400
        and  nr_sequencia  <> nr_seq_agenda_p
        and  nr_seq_turno   = nr_seq_turno_p
        and  ((cd_convenio    = cd_convenio_p)
        or (exists (SELECT  1
            from  convenio x
            where   a.cd_convenio = x.cd_convenio
            and   x.ie_tipo_convenio = ie_tipo_convenio_w)
            and   (ie_tipo_convenio_regra_w IS NOT NULL AND ie_tipo_convenio_regra_w::text <> '')));

        pr_agenda_conv_w  :=dividir(qt_agenda_conv_w * 100, qt_agenda_w);

        if (pr_agenda_conv_w >= pr_permitido_w) then

          ds_consistencia_w  := wheb_mensagem_pck.get_texto(306835,  'DS_CONVENIO_W=' || ds_convenio_w || ';' ||
                                        'PR_PERMITIDO_W=' || to_char(pr_permitido_w));
                      -- Atencao: o convenio #@DS_CONVENIO_W#@ atingiu a porcentagem limite (#@PR_PERMITIDO_W#@ %) de agendamentos permitidos neste turno!
        end if;

      end if;

    end if;

  end if;
end if;

ds_consistencia_p := ds_consistencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_consistir_turno_conv ( nr_seq_agenda_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nr_seq_turno_p bigint, cd_convenio_p bigint, ie_classif_agenda_p text, ds_consistencia_p INOUT text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_encaixe_p text, cd_categoria_p text default null) FROM PUBLIC;

