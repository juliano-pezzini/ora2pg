-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_mens_taxa_boleto ( nr_seq_mensalidade_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_taxa_emissao_boleto_w	varchar(2);
vl_taxa_emissao_w		double precision;
dt_referencia_w			timestamp;
nr_seq_item_pre_estab_w		bigint;
nr_seq_regra_emissao_w		bigint;
cd_tipo_portador_w		integer;
cd_portador_w			bigint;
nr_parcela_w			bigint;
qt_segurado_mens_w		bigint;
ie_segurado_w			bigint	:= 0;
nr_seq_mensalidade_seg_w	bigint;
vl_item_w			double precision;
vl_inserido_w			double precision	:= 0;
nr_seq_pagador_w		bigint;
nr_seq_bonificacao_w		bigint;
ie_tipo_item_w			varchar(255);
vl_bonificacao_w		double precision;
tx_bonificacao_w		double precision;
ie_alteracao_vinculacao_w	varchar(1);
nr_seq_vinculo_bonificacao_w	bigint;
vl_bonific_pagador_w		double precision	:= 0;
nm_bonificacao_w		varchar(255);
ds_observacao_w			varchar(255);
qt_cobertura_w			bigint;
nr_seq_contrato_w		bigint;
qt_parcela_dia_w		bigint;
qt_parcelas_pagas_inicial_w	bigint;
qt_parcelas_pagas_final_w	bigint;
vl_preco_pre_segurado_w		double precision;
vl_total_preco_pre_w		double precision;
vl_bonificacao_seg_w		double precision;
nr_seq_item_w			bigint;
ie_gerou_inscricao_w		varchar(1)	:= 'N';
nr_seq_item_mensalidade_w	pls_mensalidade_seg_item.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_mensalidade_segurado a
	where	a.nr_seq_mensalidade	= nr_seq_mensalidade_p;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		max(b.nr_sequencia)
	from	pls_mensalidade_seg_item b,
		pls_mensalidade_segurado a
	where	b.nr_seq_mensalidade_seg	= a.nr_sequencia
	and	a.nr_seq_mensalidade		= nr_seq_mensalidade_p
	and	b.ie_tipo_item	in ('1','12')
	group by	a.nr_sequencia;

C03 CURSOR FOR /* Gerar a bonificação para a taxa de boleto */
	SELECT	b.nr_sequencia,
		c.ie_tipo_item,
		c.vl_bonificacao,
		c.tx_bonificacao,
		b.ie_alteracao_vinculacao,
		a.nr_sequencia,
		b.nm_bonificacao,
		c.qt_parcelas_pagas_inicial,
		c.qt_parcelas_pagas_final
	from	pls_bonificacao_vinculo	a,
		pls_bonificacao_regra	c,
		pls_bonificacao		b
	where	a.nr_seq_bonificacao	= b.nr_sequencia
	and	c.nr_seq_bonificacao	= b.nr_sequencia
	and	(c.ie_tipo_item IS NOT NULL AND c.ie_tipo_item::text <> '')
	and	((a.nr_seq_pagador	= nr_seq_pagador_w AND a.nr_seq_pagador IS NOT NULL AND a.nr_seq_pagador::text <> '')
	or	(a.nr_seq_contrato	= nr_seq_contrato_w AND a.nr_seq_contrato IS NOT NULL AND a.nr_seq_contrato::text <> ''))
	and	((dt_referencia_w	>= a.dt_inicio_vigencia AND a.dt_inicio_vigencia IS NOT NULL AND a.dt_inicio_vigencia::text <> '') or coalesce(a.dt_inicio_vigencia::text, '') = '')
	and	(((dt_referencia_w	< fim_dia(a.dt_fim_vigencia)) and (a.dt_fim_vigencia IS NOT NULL AND a.dt_fim_vigencia::text <> '')) or coalesce(a.dt_fim_vigencia::text, '') = '')
	and	ie_gerou_inscricao_w	= 'S' /* Só chama bonificação, se gerou taxa de isncricação */
	order by	c.ie_tipo_item;


BEGIN

begin
select	b.ie_taxa_emissao_boleto,
	trunc(a.dt_referencia,'dd'),
	c.cd_tipo_portador,
	c.cd_portador,
	(substr(pls_obter_parcela_contrato(b.nr_seq_contrato,a.dt_referencia),1,3))::numeric ,
	a.nr_seq_pagador,
	b.nr_seq_contrato
into STRICT	ie_taxa_emissao_boleto_w,
	dt_referencia_w,
	cd_tipo_portador_w,
	cd_portador_w,
	nr_parcela_w,
	nr_seq_pagador_w,
	nr_seq_contrato_w
from	pls_mensalidade		a,
	pls_contrato_pagador	b,
	pls_contrato_pagador_fin c
where	b.nr_sequencia	= a.nr_seq_pagador
and	b.nr_sequencia	= c.nr_seq_pagador
and	a.nr_sequencia	= nr_seq_mensalidade_p
and	trunc(a.dt_referencia,'dd') between
	trunc(coalesce(c.dt_inicio_vigencia,a.dt_referencia),'dd') and fim_dia(coalesce(c.dt_fim_vigencia,a.dt_referencia));
exception
when others then
	ie_taxa_emissao_boleto_w	:= 'N';
end;

select	sum(b.vl_mensalidade)
into STRICT	vl_total_preco_pre_w
from	pls_mensalidade_segurado	b,
	pls_mensalidade			c
where	b.nr_seq_mensalidade		= c.nr_sequencia
and	c.nr_sequencia			= nr_seq_mensalidade_p;

if (ie_taxa_emissao_boleto_w <> 'N') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_regra_emissao_w
	from	pls_regra_emissao_boleto
	where	coalesce(cd_tipo_portador,cd_tipo_portador_w)	= cd_tipo_portador_w
	and	coalesce(cd_portador,cd_portador_w)			= cd_portador_w
	and	trunc(dt_referencia_w,'dd') between
		trunc(coalesce(dt_inicio_vigencia,dt_referencia_w),'dd') and fim_dia(coalesce(dt_fim_vigencia,dt_referencia_w))
	and	ie_situacao	= 'A'
	and	((ie_primeira_mensalidade = 'N' AND nr_parcela_w > 1) or (ie_primeira_mensalidade = 'S'));

	if (coalesce(nr_seq_regra_emissao_w,0) > 0) then
		select	coalesce(vl_taxa_emissao,0)
		into STRICT	vl_taxa_emissao_w
		from	pls_regra_emissao_boleto
		where	nr_sequencia	= nr_seq_regra_emissao_w;

		if (coalesce(vl_taxa_emissao_w,0) <> 0 ) then
			if (ie_taxa_emissao_boleto_w = 'E') then /* Valor embutido no preço pré-estabelecido */
				select	count(*)
				into STRICT	qt_segurado_mens_w
				from	pls_mensalidade_segurado a
				where	a.nr_seq_mensalidade	= nr_seq_mensalidade_p
				and	exists (	SELECT	1
							from	pls_mensalidade_seg_item x
							where	a.nr_sequencia	= x.nr_seq_mensalidade_seg
							and	x.ie_tipo_item	in ('1','12'));

				vl_item_w	:= round((vl_taxa_emissao_w/qt_segurado_mens_w)::numeric,2);

				open C02;
				loop
				fetch C02 into
					nr_seq_mensalidade_seg_w,
					nr_seq_item_pre_estab_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					ie_segurado_w	:= ie_segurado_w + 1;

					if (ie_segurado_w	= qt_segurado_mens_w) then
						vl_item_w	:= vl_taxa_emissao_w - coalesce(vl_inserido_w,0);
					end if;

					update	pls_mensalidade_seg_item
					set	vl_item 	= vl_item + coalesce(vl_item_w,0),
						vl_taxa_boleto	= vl_item_w
					where	nr_sequencia	= nr_seq_item_pre_estab_w;

					vl_inserido_w	:= coalesce(vl_inserido_w,0) + vl_item_w;
					end;
				end loop;
				close C02;
			elsif (ie_taxa_emissao_boleto_w = 'D') then /* Valor destacado na mensalidade */
				select	count(*)
				into STRICT	qt_segurado_mens_w
				from	pls_mensalidade_segurado
				where	nr_seq_mensalidade	= nr_seq_mensalidade_p;

				open C01;
				loop
				fetch C01 into
					nr_seq_mensalidade_seg_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin
					ie_segurado_w	:= ie_segurado_w + 1;

					select	coalesce(b.vl_mensalidade,0)
					into STRICT	vl_preco_pre_segurado_w
					from	pls_mensalidade_segurado	b
					where	nr_sequencia			= nr_seq_mensalidade_seg_w;

					if (coalesce(vl_total_preco_pre_w::text, '') = '') then
						vl_total_preco_pre_w	:= 0;
					end if;

					/*aaschlote 29/03/2011 - Ajuste quando os valores vl_preco_pre_segurado_w e vl_total_preco_pre_w estiveram zerados não ocorrer erro*/

					begin
					vl_item_w	:= round((vl_preco_pre_segurado_w/vl_total_preco_pre_w)*vl_taxa_emissao_w,2);
					exception
					when others then
						vl_item_w	:= 0;
					end;

					if (ie_segurado_w	= qt_segurado_mens_w) then
						vl_item_w	:= vl_taxa_emissao_w - vl_inserido_w;
					end if;

					/*aaschlote 16/08/2012  OS - 480899*/

					if (vl_item_w	> 0) then

						nr_seq_item_mensalidade_w := null;

						nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('17', nm_usuario_p, null, null, null, null, null, null, null, 'P', null, null, null, null, null, null, null, nr_seq_mensalidade_seg_w, null, null, null, null, null, null, null, null, null, null, null, null, null, vl_item_w, nr_seq_item_mensalidade_w);

						if (nr_seq_item_mensalidade_w IS NOT NULL AND nr_seq_item_mensalidade_w::text <> '') then
							ie_gerou_inscricao_w	:= 'S';
							vl_inserido_w	:= coalesce(vl_inserido_w,0) + vl_item_w;
						end if;
					end if;
					end;
				end loop;
				close C01;
			end if;
		end if;
	end if;
end if;

open C03;
loop
fetch C03 into
	nr_seq_bonificacao_w,
	ie_tipo_item_w,
	vl_bonificacao_w,
	tx_bonificacao_w,
	ie_alteracao_vinculacao_w,
	nr_seq_vinculo_bonificacao_w,
	nm_bonificacao_w,
	qt_parcelas_pagas_inicial_w,
	qt_parcelas_pagas_final_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	if	((coalesce(qt_parcelas_pagas_inicial_w,0) = 0) and (coalesce(qt_parcelas_pagas_final_w,0) = 0)) then
		qt_parcela_dia_w	:= 0;
	else
		begin
		qt_parcela_dia_w	:=  pls_obter_nr_parcela_em_dia(nr_seq_mensalidade_p,nr_seq_mensalidade_seg_w,nr_seq_bonificacao_w);
		exception
		when others then
			qt_parcela_dia_w	:= 0;
		end;
	end if;

	if (qt_parcela_dia_w >= coalesce(qt_parcelas_pagas_inicial_w,qt_parcela_dia_w)) and (qt_parcela_dia_w <= coalesce(qt_parcelas_pagas_final_w,qt_parcela_dia_w)) then
		if (ie_alteracao_vinculacao_w = 'S') then
			select	coalesce(max(vl_bonificacao),vl_bonificacao_w),
				coalesce(max(tx_bonificacao),tx_bonificacao_w)
			into STRICT	vl_bonificacao_w,
				tx_bonificacao_w
			from	pls_bonificacao_vinculo	a,
				pls_bonificacao		b
			where	a.nr_seq_bonificacao	= b.nr_sequencia
			and	a.nr_sequencia		= nr_seq_vinculo_bonificacao_w
			and	b.ie_alteracao_vinculacao = 'S'
			and	(((a.nr_seq_pagador	= nr_seq_pagador_w) or (coalesce(nr_seq_pagador_w::text, '') = ''))
			or	((a.nr_seq_contrato	= nr_seq_contrato_w) or (coalesce(nr_seq_contrato_w::text, '') = '')))
			and (clock_timestamp() between coalesce(a.dt_inicio_vigencia,clock_timestamp()) and coalesce(a.dt_fim_vigencia,clock_timestamp()));
		end if;

		select	sum(a.vl_item)
		into STRICT	vl_item_w
		from	pls_mensalidade_seg_item	a,
			pls_mensalidade_segurado	b,
			pls_mensalidade			c
		where	a.nr_seq_mensalidade_seg = b.nr_sequencia
		and	b.nr_seq_mensalidade	= c.nr_sequencia
		and	c.nr_sequencia		= nr_seq_mensalidade_p
		and	pls_obter_item_mens(ie_tipo_item_w,a.ie_tipo_item) = 'S'
		and	a.ie_tipo_item		= '17'
		and	a.ie_tipo_mensalidade	= 'P';

		if (coalesce(vl_item_w,0) <> 0) then
			vl_bonific_pagador_w	:= vl_bonific_pagador_w + (((coalesce(tx_bonificacao_w,0)/100) * coalesce(vl_item_w,0)) + coalesce(vl_bonificacao_w,0));
			ds_observacao_w := 'Bonificação gerada por: '||nm_bonificacao_w||', vinculado ao pagador.';

			select	count(*)
			into STRICT	qt_cobertura_w
			from	pls_bonificacao_regra
			where	nr_seq_bonificacao = nr_seq_bonificacao_w
			and	(nr_seq_tipo_cobertura IS NOT NULL AND nr_seq_tipo_cobertura::text <> '');
		else
			vl_bonific_pagador_w	:= 0;
		end if;

		if	(vl_bonific_pagador_w <> 0 AND qt_cobertura_w	= 0) then
			vl_bonific_pagador_w := vl_bonific_pagador_w * -1;
			vl_inserido_w	:= 0;

			open C01;
			loop
			fetch C01 into
				nr_seq_mensalidade_seg_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin
				ie_segurado_w	:= ie_segurado_w + 1;

				select	coalesce(b.vl_mensalidade,0)
				into STRICT	vl_preco_pre_segurado_w
				from	pls_mensalidade_segurado	b
				where	nr_sequencia			= nr_seq_mensalidade_seg_w;

				/*aaschlote 29/03/2011 - Ajuste quando os valores vl_preco_pre_segurado_w e vl_total_preco_pre_w estiveram zerados não ocorrer erro*/

				begin
				vl_bonificacao_seg_w	:= round((vl_preco_pre_segurado_w/vl_total_preco_pre_w)*vl_bonific_pagador_w,2);
				exception
				when others then
					vl_bonificacao_seg_w	:= 0;
				end;

				if (ie_segurado_w	= qt_segurado_mens_w) then
					vl_bonificacao_seg_w	:= vl_taxa_emissao_w - vl_inserido_w;
				end if;

				nr_seq_item_mensalidade_w := null;

				nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('14', nm_usuario_p, null, null, ds_observacao_w, null, null, null, null, 'P', null, null, nr_seq_vinculo_bonificacao_w, null, null, null, null, nr_seq_mensalidade_seg_w, nr_seq_mensalidade_p, null, null, null, null, null, null, null, null, null, null, null, null, coalesce(vl_bonificacao_seg_w,0), nr_seq_item_mensalidade_w);

				vl_inserido_w	:= coalesce(vl_inserido_w,0) + vl_bonificacao_seg_w;
				end;
			end loop;
			close C01;
		end if;
	end if;
	end;
end loop;
close C03;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_mens_taxa_boleto ( nr_seq_mensalidade_p bigint, nm_usuario_p text) FROM PUBLIC;

