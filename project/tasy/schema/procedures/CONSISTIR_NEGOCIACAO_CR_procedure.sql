-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_negociacao_cr ( nr_seq_negociacao_p bigint, cd_estabelecimento_p bigint, dt_referencia_p timestamp, nm_usuario_p text) AS $body$
DECLARE


cd_cgc_w    varchar(14);
cd_pessoa_fisica_w  varchar(10);
ie_inconsistencia_w  varchar(1)  := null;
ie_gerar_w    varchar(1)  := 'N';
--vl_resultado_inicial_w  number(15,2);
--vl_resultado_final_w  number(15,2);
--vl_resultado_w    number(15,2);
nr_seq_regra_w    bigint;
qt_registro_w    bigint;
qt_meses_resultado_w  bigint;
nr_seq_resultado_w  bigint;
nr_seq_result_regra_w  bigint  := null;
pr_inicial_w    double precision;
pr_final_w    double precision;
pr_resultado_w    double precision;
dt_negociacao_w    timestamp;
qt_min_meses_contrato_w  smallint;
qt_max_meses_contrato_w  smallint;
dt_contrato_w    timestamp;

c01 CURSOR FOR
  SELECT  a.nr_sequencia,
    a.ie_consistencia,
    coalesce(a.qt_min_meses_contrato,0),
    coalesce(a.qt_max_meses_contrato,999)
  from  regra_inconsist_neg_cr a
  where  a.cd_estabelecimento  = cd_estabelecimento_p
  and  dt_referencia_p  between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia,dt_referencia_p);

C02 CURSOR FOR
  SELECT  a.nr_sequencia,
    a.qt_meses_resultado,
    a.pr_inicial,--a.vl_resultado_inicial,
    a.pr_final --a.vl_resultado_final
  from  regra_resultado_neg_cr a
  where  dt_negociacao_w between trunc(a.dt_inicio_vigencia,'dd') and coalesce(fim_dia(a.dt_fim_vigencia),dt_negociacao_w)
  and  (a.qt_meses_resultado IS NOT NULL AND a.qt_meses_resultado::text <> '')
  and  a.ie_consistir  = 'S';


BEGIN
if (nr_seq_negociacao_p IS NOT NULL AND nr_seq_negociacao_p::text <> '') then
  select  a.dt_negociacao,
    cd_pessoa_fisica,
    cd_cgc
  into STRICT  dt_negociacao_w  ,
    cd_pessoa_fisica_w,
    cd_cgc_w
  from  negociacao_cr a
  where  a.nr_sequencia  = nr_seq_negociacao_p;

  delete from negociacao_cr_inconsist
  where  nr_seq_negociacao  = nr_seq_negociacao_p;

  open c01;
  loop
  fetch c01 into
    nr_seq_regra_w,
    ie_inconsistencia_w,
    qt_min_meses_contrato_w,
    qt_max_meses_contrato_w;
  EXIT WHEN NOT FOUND; /* apply on c01 */
    begin
    ie_gerar_w  := 'N';
    /* Cheques devolvidos */

    if (ie_inconsistencia_w = 1) then
      select  sum(qt_registro)
      into STRICT  qt_registro_w
      from (SELECT  count(*) qt_registro
        from  cheque_cr a
        where  coalesce(a.cd_estabelecimento,coalesce(cd_estabelecimento_p,0))  = coalesce(cd_estabelecimento_p,0)
        and  a.cd_pessoa_fisica  = cd_pessoa_fisica_w
        and  obter_status_cheque(a.nr_seq_cheque) in ('3','5','10')
        and  (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '')

union all

        SELECT  count(*) qt_registro
        from  cheque_cr a
        where  coalesce(a.cd_estabelecimento,coalesce(cd_estabelecimento_p,0))  = coalesce(cd_estabelecimento_p,0)
        and  a.cd_cgc  = cd_cgc_w
        and  obter_status_cheque(a.nr_seq_cheque) in ('3','5','10')
        and  (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '')) alias16;

      if (qt_registro_w > 0) then
        ie_gerar_w  := 'S';
      end if;
    end if;
    /* Negociação não liquidada */

    if (ie_inconsistencia_w = 2) then
      select  sum(qt_registro)
      into STRICT  qt_registro_w
      from (SELECT  count(*) qt_registro
        from  negociacao_cr a
        where  a.cd_pessoa_fisica  = cd_pessoa_fisica_w
        and  (a.dt_fechamento IS NOT NULL AND a.dt_fechamento::text <> '')
        and (coalesce(a.dt_liquidacao::text, '') = '' or a.ie_status <> 'L')
        and  (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '')
        and  a.nr_sequencia    <> nr_seq_negociacao_p
        and  coalesce(a.dt_cancelamento::text, '') = ''

union all

        SELECT  count(*) qt_registro
        from  negociacao_cr a
        where  a.cd_cgc  = cd_cgc_w
        and  (a.dt_fechamento IS NOT NULL AND a.dt_fechamento::text <> '')
        and (coalesce(a.dt_liquidacao::text, '') = '' or a.ie_status <> 'L')
        and  (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '')
        and  a.nr_sequencia    <> nr_seq_negociacao_p
        and  coalesce(a.dt_cancelamento::text, '') = '') alias14;

      if (qt_registro_w > 0) then
        ie_gerar_w  := 'S';
      end if;
    end if;
    /* Negociação ainda não liberada */

    if (ie_inconsistencia_w = 3) then
      select  sum(qt_registro)
      into STRICT  qt_registro_w
      from (SELECT  count(*) qt_registro
        from  negociacao_cr a
        where  a.cd_pessoa_fisica  = cd_pessoa_fisica_w
        and  coalesce(a.dt_liberacao::text, '') = ''
        and  (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '')
        and  a.nr_sequencia    <> nr_seq_negociacao_p
        and  coalesce(a.dt_cancelamento::text, '') = ''

union all

        SELECT  count(*) qt_registro
        from  negociacao_cr a
        where  a.cd_cgc  = cd_cgc_w
        and  coalesce(a.dt_liberacao::text, '') = ''
        and  (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '')
        and  a.nr_sequencia    <> nr_seq_negociacao_p
        and  coalesce(a.dt_cancelamento::text, '') = '') alias10;

      if (qt_registro_w > 0) then
        ie_gerar_w  := 'S';
      end if;
    end if;
    /*Devedor não possui o mínimo de meses de contrato permitido*/

    if (ie_inconsistencia_w = 5) then
      select  max(x.dt_contrato)
      into STRICT  dt_contrato_w
      from (SELECT  max(a.dt_contrato) dt_contrato
        from  pls_contrato a,
          pls_contrato_pagador b,
          titulo_receber c,
          titulo_rec_negociado d
        where  d.nr_titulo    = c.nr_titulo
        and  c.nr_seq_pagador  = b.nr_sequencia
        and  b.nr_seq_contrato  = a.nr_sequencia
        and  d.nr_seq_negociacao  = nr_seq_negociacao_p
        and  a.cd_cgc_estipulante  = cd_cgc_w

union

        SELECT  max(a.dt_contrato) dt_contrato
        from  pls_contrato a,
          pls_contrato_pagador b,
          titulo_receber c,
          titulo_rec_negociado d
        where  d.nr_titulo    = c.nr_titulo
        and  c.nr_seq_pagador  = b.nr_sequencia
        and  b.nr_seq_contrato  = a.nr_sequencia
        and  d.nr_seq_negociacao  = nr_seq_negociacao_p
        and  a.cd_pf_estipulante  = cd_pessoa_fisica_w) x;

      if (pls_obter_meses_entre_datas(dt_contrato_w,clock_timestamp()) < qt_min_meses_contrato_w or
        pls_obter_meses_entre_datas(dt_contrato_w,clock_timestamp()) > qt_max_meses_contrato_w) then
        ie_gerar_w := 'S';
      end if;
    end if;

    if (ie_gerar_w = 'S') then
      begin
      insert into negociacao_cr_inconsist(nr_sequencia,
        nm_usuario,
        dt_atualizacao,
        nm_usuario_nrec,
        dt_atualizacao_nrec,
        nr_seq_negociacao,
        ie_inconsistencia,
        nr_seq_regra)
      values (nextval('negociacao_cr_inconsist_seq'),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nr_seq_negociacao_p,
        ie_inconsistencia_w,
        nr_seq_regra_w);
      exception
        when others then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(251665,'nr_seq_regra_w='||nr_seq_regra_w);
      end;
    end if;
    end;
  end loop;
  close c01;

  open C02;
  loop
  fetch C02 into
    nr_seq_resultado_w,
    qt_meses_resultado_w,
    pr_inicial_w,
    pr_final_w;
  EXIT WHEN NOT FOUND; /* apply on C02 */
    begin
    select  avg(pr_result)
    into STRICT  pr_resultado_w
    from (
      SELECT  --b.dt_mes_referencia,
        --a.nr_sequencia nr_seq_pagador,
        --sum(b.vl_resultado) vl_result
        dividir_sem_round(sum(coalesce(CASE WHEN ie_tipo_valor=1 THEN 0  ELSE vl_resultado END ,0)),sum(coalesce(CASE WHEN ie_tipo_valor=1 THEN vl_resultado  ELSE 0 END ,0))) * 100 pr_result
      from  pls_resultado b,
        pls_contrato_pagador a
      where  a.cd_pessoa_fisica  = cd_pessoa_fisica_w
      and  a.nr_sequencia    = b.nr_seq_pagador
      and  (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '')
      and  b.dt_mes_referencia >= PKG_DATE_UTILS.ADD_MONTH(PKG_DATE_UTILS.start_of(clock_timestamp(),'month',0),qt_meses_resultado_w * -1,0)
      group by
        a.nr_sequencia

union all

      SELECT  --b.dt_mes_referencia,
        --a.nr_sequencia nr_seq_pagador,
        --nvl(sum(b.vl_resultado),0) vl_result
        dividir_sem_round(sum(coalesce(CASE WHEN ie_tipo_valor=1 THEN 0  ELSE vl_resultado END ,0)),sum(coalesce(CASE WHEN ie_tipo_valor=1 THEN vl_resultado  ELSE 0 END ,0))) * 100 pr_result
      from  pls_resultado b,
        pls_contrato_pagador a
      where  a.cd_cgc    = cd_cgc_w
      and  a.nr_sequencia    = b.nr_seq_pagador
      and  (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '')
      and  b.dt_mes_referencia >= PKG_DATE_UTILS.ADD_MONTH(PKG_DATE_UTILS.start_of(clock_timestamp(),'month',0),qt_meses_resultado_w * -1,0)
      group by
        a.nr_sequencia) alias19;

    if (pr_resultado_w between
      coalesce(pr_inicial_w,-9999999999) and
      coalesce(pr_final_w,9999999999)) then
      nr_seq_result_regra_w  := nr_seq_resultado_w;
    end if;
    end;
  end loop;
  close C02;

  if (nr_seq_result_regra_w IS NOT NULL AND nr_seq_result_regra_w::text <> '') then
    begin
    insert into negociacao_cr_inconsist(nr_sequencia,
      nm_usuario,
      dt_atualizacao,
      nm_usuario_nrec,
      dt_atualizacao_nrec,
      nr_seq_regra,
      nr_seq_negociacao,
      ie_inconsistencia,
      nr_seq_regra_result)
    values (nextval('negociacao_cr_inconsist_seq'),
      nm_usuario_p,
      clock_timestamp(),
      nm_usuario_p,
      clock_timestamp(),
      null,
      nr_seq_negociacao_p,
      '4',
      nr_seq_result_regra_w);
    exception
      when others then
      CALL wheb_mensagem_pck.exibir_mensagem_abort(251667,'nr_seq_regra_w='||nr_seq_regra_w);
    end;
  end if;
end if;

/* Não dar commit */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_negociacao_cr ( nr_seq_negociacao_p bigint, cd_estabelecimento_p bigint, dt_referencia_p timestamp, nm_usuario_p text) FROM PUBLIC;

