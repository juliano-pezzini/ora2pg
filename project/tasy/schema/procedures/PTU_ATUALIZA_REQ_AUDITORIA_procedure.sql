-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_atualiza_req_auditoria ( nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_resp_aud_p ptu_resposta_auditoria.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


--Regra de retorno utilizada para requisicao
nr_seq_regra_ret_orig_w		pls_retorno_aud_origem.nr_sequencia%type;

-- Verificar o parametro na funcao OPS - Gestao de Operadoras / Parametros OPS / Intercambio / Intercambio SCS
ie_gerar_senha_interna_w	pls_param_intercambio_scs.ie_gerar_senha_interna%type;
cd_senha_externa_w		ptu_resposta_auditoria.nr_seq_origem%type;


--Campos de atualizacao PLS_GUIA_PLANO
ie_estagio_w 			pls_guia_plano.ie_estagio%type;
ie_status_w  			pls_guia_plano.ie_status%type;
dt_validade_senha_w		pls_guia_plano.dt_valid_senha_ext%type;
cd_senha_w			pls_guia_plano.cd_senha%type;

--Variavel utilizada para a contagem de itens liberados e negados
qt_proc_liberado_w	bigint;
qt_mat_liberado_w	bigint;
qt_proc_negado_w	bigint;
qt_mat_negado_w		bigint;
qt_itens_liberado_w	bigint;
qt_itens_negado_w	bigint;

nr_seq_regra_senha_w	pls_aut_regra_gera_senha.nr_sequencia%type;
ie_status_item_w	pls_guia_plano_proc.ie_status%type;
qt_autorizada_w		pls_guia_plano_proc.qt_autorizada%type;

nr_seq_guia_w		pls_guia_plano.nr_sequencia%type;
ie_origem_solic_w	pls_requisicao.ie_origem_solic%type;

nr_seq_segurado_w	pls_requisicao.nr_seq_segurado%type;
dt_requisicao_w		pls_requisicao.dt_requisicao%type;
ie_tipo_guia_w		pls_requisicao.ie_tipo_guia%type;

C01 CURSOR( nr_seq_resp_aud_pc 	ptu_resposta_auditoria.nr_sequencia%type ) FOR
	SELECT	a.dt_validade,
		a.nr_seq_origem cd_senha_externa,
		a.cd_unimed_beneficiario,
		a.ds_observacao,
		(SELECT	max(b.nr_sequencia)
		from	pls_auditoria b
		where	b.nr_seq_requisicao = a.nr_seq_requisicao
		and	coalesce(b.dt_liberacao::text, '') = '') nr_seq_auditoria,
		(select	max(b.ie_status)
		from	pls_auditoria b
		where	b.nr_seq_requisicao = a.nr_seq_requisicao
		and	coalesce(b.dt_liberacao::text, '') = '') ie_status_analise
	from	ptu_resposta_auditoria a
	where	a.nr_sequencia 	= nr_seq_resp_aud_pc;

C02 CURSOR( nr_seq_auditoria_pc	pls_auditoria.nr_sequencia%type ) FOR
	SELECT	nr_sequencia,
		nr_seq_proc_origem,
		nr_seq_mat_origem
	from	pls_auditoria_item
	where	nr_seq_auditoria = nr_seq_auditoria_pc
	and	ie_status	= 'P'
	order by nr_sequencia;

BEGIN

cd_senha_w := null;

--Carregar as informacoes referente a Guia e a Auditoria
for c01_w in C01( nr_seq_resp_aud_p ) loop

	--Verifica regra de retorno, criada na funcao OPS - Controle dos Grupos de Analise. Se existir regra de retorno ja atualiza a requisicao
	nr_seq_regra_ret_orig_w := pls_verif_reg_retorno_aud_orig(nr_seq_requisicao_p, nm_usuario_p, nr_seq_regra_ret_orig_w);

	if ( nr_seq_regra_ret_orig_w > 0 ) then
		update	pls_requisicao
		set	dt_valid_senha_ext	= c01_w.dt_validade,
			dt_validade_senha	= c01_w.dt_validade,
			cd_senha_externa	= c01_w.cd_senha_externa,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_requisicao_p;

		CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p,'L',substr('Recebida e processada a resposta de auditoria da Unimed '||c01_w.cd_unimed_beneficiario||' com a mensagem: '||chr(10)||c01_w.ds_observacao,1,4000),null,nm_usuario_p);
	else
		--Obter as quantidades de itens liberados e itens negados
		select (select	count(1)
			from	pls_requisicao_proc
			where	nr_seq_requisicao	= nr_seq_requisicao_p
			and	ie_status	= 'S') qt_proc_liberado,
			(select	count(1)
			from	pls_requisicao_mat
			where	nr_seq_requisicao	= nr_seq_requisicao_p
			and	ie_status	= 'S') qt_mat_liberado,
			(select	count(1)
			from	pls_requisicao_proc
			where	nr_seq_requisicao	= nr_seq_requisicao_p
			and	ie_status	= 'N') qt_proc_negado,
			(select	count(1)
			from	pls_requisicao_mat
			where	nr_seq_requisicao	= nr_seq_requisicao_p
			and	ie_status	= 'N')  qt_mat_negado
		into STRICT	qt_proc_liberado_w,
			qt_mat_liberado_w,
			qt_proc_negado_w,
			qt_mat_negado_w
		;

		qt_itens_liberado_w	:= qt_proc_liberado_w + qt_mat_liberado_w;
		qt_itens_negado_w	:= qt_proc_negado_w + qt_mat_negado_w;

		ie_estagio_w := null;

		cd_senha_externa_w	:= c01_w.cd_senha_externa;
		dt_validade_senha_w	:= c01_w.dt_validade;
		
		--Valores ESTAGIO 6-Parcialmente aprovada - 7-Reprovada - 2-Aprovada
		if (qt_itens_liberado_w > 0) and (qt_itens_negado_w > 0) then
			ie_estagio_w := 6;
		elsif (qt_itens_negado_w > 0) and (qt_itens_liberado_w = 0) then
			ie_estagio_w := 7;
			cd_senha_externa_w	:= null;
			dt_validade_senha_w	:= null;
		elsif (qt_itens_negado_w = 0) and (qt_itens_liberado_w > 0) then
			ie_estagio_w := 2;
		end if;

		if (ie_estagio_w in (6,2)) then
			select	nr_seq_segurado,
				dt_requisicao,
				ie_tipo_guia
			into STRICT 	nr_seq_segurado_w,
				dt_requisicao_w,
				ie_tipo_guia_w
			from 	pls_requisicao
			where 	nr_sequencia = nr_seq_requisicao_p;

			CALL pls_gerar_validade_senha_req(nr_seq_requisicao_p, nr_seq_segurado_w, dt_requisicao_w, ie_tipo_guia_w, nm_usuario_p);
		end if;

		update	pls_requisicao
		set	ie_estagio		= coalesce(ie_estagio_w,ie_estagio),
			dt_valid_senha_ext	= coalesce(dt_validade_senha_w, dt_valid_senha_ext),
			dt_validade_senha	= c01_w.dt_validade,
			cd_senha_externa	= coalesce(cd_senha_externa_w,cd_senha_externa),
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_requisicao_p;
		
		select	coalesce(ie_origem_solic, 'M'),
			ie_estagio
		into STRICT	ie_origem_solic_w,
			ie_estagio_w
		from	pls_requisicao
		where	nr_sequencia	= nr_seq_requisicao_p;

		if (ie_origem_solic_w = 'E') then
			select	max(a.nr_seq_guia)
			into STRICT	nr_seq_guia_w
			from	pls_requisicao c,
				pls_execucao_requisicao a
			where	a.nr_seq_requisicao	= c.nr_sequencia
			and	c.nr_sequencia		= nr_seq_requisicao_p;
			
			if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
				update	pls_guia_plano
				set	ie_estagio		= CASE WHEN ie_estagio_w=2 THEN  6 WHEN ie_estagio_w=6 THEN  10 WHEN ie_estagio_w=7 THEN  4  ELSE ie_estagio END ,
					ie_status		= CASE WHEN ie_estagio_w=2 THEN  1 WHEN ie_estagio_w=6 THEN  1 WHEN ie_estagio_w=7 THEN  3  ELSE ie_status END ,
					dt_autorizacao		= clock_timestamp(),
					dt_valid_senha_ext	= coalesce(dt_validade_senha_w, dt_valid_senha_ext),
					cd_senha_externa	= coalesce(cd_senha_externa_w,cd_senha_externa),
					nm_usuario_liberacao	= nm_usuario_p
				where	nr_sequencia		= nr_seq_guia_w;
			end if;
		end if;

		if (c01_w.nr_seq_auditoria IS NOT NULL AND c01_w.nr_seq_auditoria::text <> '') then

			update	pls_auditoria
			set	dt_liberacao	= clock_timestamp(),
				ie_status	= 'F',
				dt_atualizacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p
			where	nr_sequencia	= c01_w.nr_seq_auditoria;

			for c02_w in C02( c01_w.nr_seq_auditoria ) loop

				ie_status_item_w 	:= 'S';
				qt_autorizada_w		:= null;
				ie_status_w		:= 'N';

				if (c02_w.nr_seq_proc_origem IS NOT NULL AND c02_w.nr_seq_proc_origem::text <> '') then
					select	ie_status,
						qt_procedimento
					into STRICT	ie_status_item_w,
						qt_autorizada_w
					from	pls_requisicao_proc
					where	nr_sequencia = c02_w.nr_seq_proc_origem;
				elsif (c02_w.nr_seq_mat_origem IS NOT NULL AND c02_w.nr_seq_mat_origem::text <> '') then
					select	ie_status,
						qt_material
					into STRICT	ie_status_item_w,
						qt_autorizada_w
					from	pls_requisicao_mat
					where	nr_sequencia =  c02_w.nr_seq_mat_origem;
				end if;

				if (ie_status_item_w in ('S','P')) then
					ie_status_w := 'S';
				elsif (ie_status_item_w in ('N','G','C')) then
					ie_status_w := 'N';
				end if;

				update	pls_auditoria_item
				set	ie_status		= CASE WHEN ie_status_w='S' THEN 'A'  ELSE 'N' END ,
					ie_status_solicitacao	= CASE WHEN ie_status_w='S' THEN 'A'  ELSE 'N' END ,
					dt_atualizacao		= clock_timestamp(),
					qt_ajuste		= coalesce(qt_autorizada_w,qt_ajuste),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia 		= c02_w.nr_sequencia;
			end loop;

			commit;
			--Rotina utilizada para gerar envio de SMS, CI ou Email
			CALL pls_gerar_alerta_evento(1, c01_w.nr_seq_auditoria, null, null, nm_usuario_p);
		end if;

		--Gera notificacao para o Call Center entrar em contato com o Beneficiario
		if ( c01_w.ie_status_analise <> 'A') then
			if (c01_w.ie_status_analise	= 'AN') then
				update	pls_notificacao_atend
				set	dt_fim_solicitacao	= clock_timestamp(),
					ie_status		= 'NE',
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_auditoria	= c01_w.nr_seq_auditoria;
			end if;
			CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p,'L',substr('Alterado status para Analise devido recebimento de resposta de auditoria da operadora de origem',1,4000),null,nm_usuario_p);
		end if;
		CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p,'L',substr('Recebida e processada a resposta de auditoria da Unimed '||c01_w.cd_unimed_beneficiario||' com a mensagem: '||chr(10)||c01_w.ds_observacao,1,4000),null,nm_usuario_p);
	end if;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_atualiza_req_auditoria ( nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_resp_aud_p ptu_resposta_auditoria.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

