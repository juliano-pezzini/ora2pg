-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE esus_gerar_atend_odon_proc ( cd_profissional_p text, cd_cbo_p text, cd_sec_profissional_p text, cd_sec_cbo_p text, cd_ter_profissional_p text, cd_ter_cbo_p text, nr_atendimento_p bigint, dt_atendimento_p timestamp, nr_seq_ficha_p bigint, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					 
cd_procedimento_w		esus_atend_odon_proced.cd_procedimento%type;
ie_origem_proced_w		esus_atend_odon_proced.ie_origem_proced%type;
qt_procedimento_w			esus_atend_odon_proced.qt_procedimento%type;
nr_interno_conta_w			conta_paciente.nr_interno_conta%type := 0;
qt_proc_gerado_w			bigint := 0;

C01 CURSOR FOR 
	SELECT	b.cd_procedimento, 
		b.ie_origem_proced, 
		sum(b.qt_procedimento) qt_procedimento 
	from	procedimento_paciente b 
	where	trunc(b.dt_procedimento) = trunc(dt_atendimento_p) 
	and	coalesce(b.cd_pessoa_fisica,b.cd_medico_executor) = cd_profissional_p 
	and	b.cd_cbo = cd_cbo_p 
	and	b.nr_atendimento = nr_atendimento_p 
	and	((nr_interno_conta_w = 0) or (b.nr_interno_conta = nr_interno_conta_w)) 
	and	coalesce(b.cd_motivo_exc_conta::text, '') = '' 
	group by	b.cd_procedimento, 
		b.ie_origem_proced;

C02 CURSOR FOR 
	SELECT	b.cd_procedimento, 
		b.ie_origem_proced, 
		sum(b.qt_procedimento) qt_procedimento 
	from	procedimento_paciente b 
	where	trunc(b.dt_procedimento) = trunc(dt_atendimento_p) 
	and	coalesce(b.cd_pessoa_fisica,b.cd_medico_executor) = cd_sec_profissional_p 
	and	b.cd_cbo = cd_sec_cbo_p 
	and	b.nr_atendimento = nr_atendimento_p 
	and	((nr_interno_conta_w = 0) or (b.nr_interno_conta = nr_interno_conta_w)) 
	and	coalesce(b.cd_motivo_exc_conta::text, '') = '' 
	group by	b.cd_procedimento, 
		b.ie_origem_proced;

C03 CURSOR FOR 
	SELECT	b.cd_procedimento, 
		b.ie_origem_proced, 
		sum(b.qt_procedimento) qt_procedimento 
	from	procedimento_paciente b 
	where	trunc(b.dt_procedimento) = trunc(dt_atendimento_p) 
	and	coalesce(b.cd_pessoa_fisica,b.cd_medico_executor) = cd_ter_profissional_p 
	and	b.cd_cbo = cd_ter_cbo_p 
	and	b.nr_atendimento = nr_atendimento_p 
	and	((nr_interno_conta_w = 0) or (b.nr_interno_conta = nr_interno_conta_w)) 
	and	coalesce(b.cd_motivo_exc_conta::text, '') = '' 
	group by	b.cd_procedimento, 
		b.ie_origem_proced;				
					 

BEGIN 
 
begin 
select 	coalesce(min(nr_interno_conta),0) 
into STRICT	nr_interno_conta_w 
from	conta_paciente 
where 	nr_atendimento = nr_atendimento_p 
and	trunc(dt_atendimento_p) between trunc(dt_periodo_inicial) and trunc(dt_periodo_final);
exception 
when others then 
	nr_interno_conta_w := 0;
end;
 
open C01;
loop 
fetch C01 into	 
	cd_procedimento_w, 
	ie_origem_proced_w, 
	qt_procedimento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	 
	select	count(1) 
	into STRICT	qt_proc_gerado_w 
	from	esus_atend_odon_proced 
	where	nr_seq_atend_onco = nr_seq_ficha_p 
	and	cd_procedimento	= cd_procedimento_w 
	and	ie_origem_proced = ie_origem_proced_w;
	 
	if (qt_proc_gerado_w = 0) then 
		begin 
		 
		insert into esus_atend_odon_proced( 
			nm_usuario, 
			nm_usuario_nrec, 
			dt_atualizacao, 
			dt_atualizacao_nrec, 
			cd_procedimento, 
			ie_origem_proced, 
			qt_procedimento, 
			nr_seq_atend_onco, 
			nr_sequencia) 
		values (	nm_usuario_p, 
			nm_usuario_p, 
			clock_timestamp(), 
			clock_timestamp(), 
			cd_procedimento_w, 
			ie_origem_proced_w, 
			qt_procedimento_w, 
			nr_seq_ficha_p, 
			nextval('esus_atend_odon_proced_seq'));
			 
		end;
	end if;	
	 
	end;
end loop;
close C01;
 
if (coalesce(cd_sec_profissional_p,'X') <> 'X' ) then 
	begin 
	 
	open C02;
	loop 
	fetch C02 into	 
		cd_procedimento_w, 
		ie_origem_proced_w, 
		qt_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		 
		select	count(1) 
		into STRICT	qt_proc_gerado_w 
		from	esus_atend_odon_proced 
		where	nr_seq_atend_onco = nr_seq_ficha_p 
		and	cd_procedimento	= cd_procedimento_w 
		and	ie_origem_proced = ie_origem_proced_w;
		 
		if (qt_proc_gerado_w = 0) then 
			begin 
			 
			insert into esus_atend_odon_proced( 
				nm_usuario, 
				nm_usuario_nrec, 
				dt_atualizacao, 
				dt_atualizacao_nrec, 
				cd_procedimento, 
				ie_origem_proced, 
				qt_procedimento, 
				nr_seq_atend_onco, 
				nr_sequencia) 
			values (	nm_usuario_p, 
				nm_usuario_p, 
				clock_timestamp(), 
				clock_timestamp(), 
				cd_procedimento_w, 
				ie_origem_proced_w, 
				qt_procedimento_w, 
				nr_seq_ficha_p, 
				nextval('esus_atend_odon_proced_seq'));
				 
			end;
		end if;	
		 
		end;
	end loop;
	close C02;
 
	end;
end if;
 
if (coalesce(cd_ter_profissional_p,'X') <> 'X') then 
	begin 
	 
	open C03;
	loop 
	fetch C03 into	 
		cd_procedimento_w, 
		ie_origem_proced_w, 
		qt_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		 
		select	count(1) 
		into STRICT	qt_proc_gerado_w 
		from	esus_atend_odon_proced 
		where	nr_seq_atend_onco = nr_seq_ficha_p 
		and	cd_procedimento	= cd_procedimento_w 
		and	ie_origem_proced = ie_origem_proced_w;
		 
		if (qt_proc_gerado_w = 0) then 
			begin 
			 
			insert into esus_atend_odon_proced( 
				nm_usuario, 
				nm_usuario_nrec, 
				dt_atualizacao, 
				dt_atualizacao_nrec, 
				cd_procedimento, 
				ie_origem_proced, 
				qt_procedimento, 
				nr_seq_atend_onco, 
				nr_sequencia) 
			values (	nm_usuario_p, 
				nm_usuario_p, 
				clock_timestamp(), 
				clock_timestamp(), 
				cd_procedimento_w, 
				ie_origem_proced_w, 
				qt_procedimento_w, 
				nr_seq_ficha_p, 
				nextval('esus_atend_odon_proced_seq'));
				 
			end;
		end if;	
		 
		end;
	end loop;
	close C03;
 
	end;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE esus_gerar_atend_odon_proc ( cd_profissional_p text, cd_cbo_p text, cd_sec_profissional_p text, cd_sec_cbo_p text, cd_ter_profissional_p text, cd_ter_cbo_p text, nr_atendimento_p bigint, dt_atendimento_p timestamp, nr_seq_ficha_p bigint, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

