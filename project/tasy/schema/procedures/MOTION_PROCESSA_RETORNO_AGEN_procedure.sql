-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE motion_processa_retorno_agen ( nr_sequencia_p bigint) AS $body$
DECLARE


agendamento 					philips_json;
ds_erro_w						varchar(2000);

cd_agenda_w						agenda.cd_agenda%type;
cd_pessoa_fisica_w				pessoa_fisica.cd_pessoa_fisica%type;
cd_pessoa_fisica_medico_w		pessoa_fisica.cd_pessoa_fisica%type;
qt_registros_w					bigint;
qt_exames_adc_w					bigint := 0;
bl_inclusao_w					boolean;
hr_inicio_w						timestamp;
hr_inicio_nova_w				timestamp;
hr_final_w						timestamp;
nr_seq_agenda_w					agenda_paciente.nr_sequencia%type;
nr_seq_agenda_ant_w				agenda_paciente.nr_sequencia%type := 0;

ds_retorno_w					varchar(255);
cd_turno_w						varchar(1);

nr_sequence_agenda_w			agenda_paciente.nr_sequencia%type;

cd_procedimento_w				proc_interno.cd_procedimento%type;
nr_seq_proc_interno_w			proc_interno.nr_sequencia%type;
nr_seq_proc_interno_2_w			proc_interno.nr_sequencia%type;
ie_origem_proced_w				proc_interno.ie_origem_proced%type;
ie_acao_executada_w				varchar(1);

cd_medico_temp_w				medico.cd_pessoa_fisica%type;
nr_seq_temp_w					agenda_paciente_proc.nr_seq_Agenda%type;

cd_pessoa_fisica_json_w			varchar(50);
cd_pessoa_fisica_ext_json_w		varchar(50);
cd_medico_solic_json_w			varchar(50);
cd_medico_solic_ext_json_w		varchar(50);

ds_log_w						varchar(5000);

ds_return_message				varchar(254);

ds_agenda_w						varchar(254);
ds_curta_w						agenda.ds_curta%type;
ie_ordenacao_w					agenda.ie_ordenacao%type;
ds_estab_apelido_w				varchar(254);
ds_setor_agenda_w				varchar(254);
nm_medico_executor_w			varchar(254);

nr_conselho_profissional_w		conselho_profissional.nr_sequencia%type;

nr_sequencia_pf_cod_ext_w		pf_codigo_externo.nr_sequencia%type;
nr_sequencia_proc_w				agenda_paciente_proc.nr_sequencia%type;
nr_seq_agenda_proc_w			agenda_paciente_proc.nr_seq_agenda%type;
cd_externo_w					agenda_paciente_proc.cd_externo%type;
ie_lado_w						agenda_paciente_proc.ie_lado%type;
ds_observacao_w					agenda_paciente_proc.ds_observacao%type;
cd_medico_req_w					agenda_paciente_proc.cd_medico_req%type;
dt_agendamento_proc_w			agenda_paciente_proc.dt_agenda_externa%type;
dt_agendamento_fim_proc_w		agenda_paciente_proc.dt_agenda_fim_externa%type;

hr_inicio_agenda_paciente_w		agenda_paciente.hr_inicio%type;

dt_nascimento_pac_w             agenda_paciente.dt_nascimento_pac%type;
qt_idade_paciente_w             agenda_paciente.qt_idade_paciente%type;
qt_idade_meses_w                agenda_paciente.qt_idade_meses%type;
qt_peso_w                       agenda_paciente.qt_peso%type;
qt_altura_cm_w                  agenda_paciente.qt_altura_cm%type;
nr_telefones_w					agenda_paciente.nr_telefone%type;

dt_ultima_hora_w				timestamp;

tempo 							timestamp;
ds_cod_erro_w					varchar(1000);
ds_stack_w						varchar(2000);
nr_seq_agenda_consulta_w			agenda_consulta.nr_sequencia%type;
ie_executa_trigger_w				varchar(1);
qt_controle_hor_w				bigint;
cdUFCrm_w						varchar(5);
nrCrmMedicoSolicitante_w		varchar(20);

url_telemedicina_w              agenda_consulta_adic.ds_url_telemedicina%type;

/*
Metodo post

{
	"idOrigin"						: "SP01",
	"cdEstabelecimento"				: "014",
	"cdTipoAgenda"					: 2,
	"dsAgenda"						: "ITA - Ressonancia",
	"cdSetorAgenda"					: "435",
	"cdMedicoExecutor"				: "456327",
	"ieAcaoExcl"					: "False",
	"nrSeqItemAgenda"				: "B4F5055F97E84438A46242DFAC03BFDA",
	"nrSeqItemAgendaAnt"			: "A3D5053F56C74098F26491ABDE01CEBF",
	"ieStatusAgenda"				: "N",
	"ieClassifAgenda"				: "P",
	"hrInicioExaCons"				: "10/10/2017 08:00",
	"hrFinalExaCons"				: "10/10/2017 09:00",
	"cdPessoaFisica"				: "", 
	"cdPessoaFisicaExterno"			: "98742935",
	"nmPessoaFisica"				: "Jose Eduardo Mendes",
	"dtNascimento"					: "20/10/1970",
	"ieSexo"						: "M",
	"cdConvenio"					: "262",
	"cdCategoria"					: "1",
	"cdPlano"						: "12",
	"cdCobertura"					: "568",
	"cdMedicoSolicitante"			: "",
	"cdMedicoSolicitanteExterno"	: "56149449494",
	"nmMedicoSolicitante"			: "Medico Solicitante de Teste",
	"cdMedicoSolicitanteDoc"		: "CRM",
	"nrCrmMedicoSolicitante"		: "923457",
	"cdUFCrm"						: "SP",
	"nrProcInterno"					: "123456",
	"ieTipoAtendimento"				: "7",
	"ieLateralidade"				: "D",
	"qtPeso"						: 85,
	"ieAnestesia"					: "N",
	"dsObservacao"					: "Necessario transporte - Cadeira de Rodas",
	"urlTelemedicina"               : "https://www.philips.com.br/",
	"nrTelefone"                    : "999999999"
}

*/
	procedure adiciona_erro(ds_erro_c text, cd_codigo_erro_c text) is
;
BEGIN
      ds_erro_w := coalesce(ds_erro_w, '')	||  '{'
										||	'"CodMsg": "'			|| cd_codigo_erro_c ||'",'
										||	'"MsgDescription": "'	|| ds_erro_c ||'"'
										||	'},';
    end;

	procedure preencheInfAdicPessoa(cdPessoaFisica_p varchar2) is
	begin
	
	dt_nascimento_pac_w := obter_dados_pf(cdPessoaFisica_p,'DN');
	qt_idade_paciente_w	:= obter_dados_pf(cdPessoaFisica_p,'I');
	qt_peso_w           := obter_dados_pf(cdPessoaFisica_p, 'KG');
	qt_altura_cm_w      := obter_dados_pf(cdPessoaFisica_p, 'AL');
	nr_telefones_w 		:= trim(both agendamento.get['nrTelefone'].get_string()) || ' - '|| obter_fone_pac_agenda(cdPessoaFisica_p);
	qt_idade_meses_w    := substr(obter_idade(dt_nascimento_pac_w, clock_timestamp(),'MM'),1,3);

	end;
	
	procedure inserirRegraLiberacaoCons(cdAgenda_p number,
										cdSetor_p	 varchar2,
										cdMedico_p varchar2) is
	begin
		if (cdAgenda_p IS NOT NULL AND cdAgenda_p::text <> '') then
			insert into med_permissao(	NR_SEQUENCIA,
										CD_AGENDA,
										CD_MEDICO, 
										CD_SETOR_ATENDIMENTO,
										IE_AGENDA, 										
										IE_ATENDIMENTO, 
										IE_CONFIG_AGENDA, 
										IE_CONSULTA, 
										IE_DIAGNOSTICO, 
										IE_EIS, 
										IE_ENDERECOS, 
										IE_EVOLUCAO, 
										IE_EXAME_PADRAO, 
										IE_FECHAR_ATEND, 
										IE_GRUPO_MEDICO, 
										IE_MED_PADRAO, 
										IE_PACIENTE, 
										IE_PARAMETRO, 
										IE_PERMISSAO, 
										IE_PERMITE_BLOQUEAR_AGENDA, 
										IE_PERMITE_EXCLUIR_AGENDA, 
										IE_PROTOCOLO, 
										IE_RECEITA,
										IE_REFERENCIA,
										IE_RESULTADO,
										IE_SOLIC_EXAME,
										IE_TEXTO_ADICIONAL,
										IE_TEXTO_PADRAO, 
										NM_USUARIO,
										DT_ATUALIZACAO
								) values (
										nextval('med_permissao_seq'),
										cdAgenda_p,
										cdMedico_p,
										cdSetor_p,
										'T',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'S',
										'S',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										'N',
										wheb_usuario_pck.get_nm_usuario,
										clock_timestamp());
										
			insert into agenda_regra_permissao( nr_sequencia,
												 dt_atualizacao,
												 nm_usuario,
												 dt_atualizacao_nrec,
												 nm_usuario_nrec,
												 ie_permite_cancelar_agenda,
												 cd_pessoa_fisica,
												 ie_permite_encaixe_agenda,
												 cd_agenda,
												 ie_situacao,
												 ie_permite_confirmar_encaixe,
												 ie_ignora_regra_agend_fut
								         ) values (
												 nextval('agenda_regra_permissao_seq'),
												 clock_timestamp(),
												 wheb_usuario_pck.get_nm_usuario,
												 clock_timestamp(),
												 wheb_usuario_pck.get_nm_usuario,
												 'N',
												 null,
												 'S',
												 cdAgenda_p,
												 'A',
												 'S',
												 'N');

			commit;
		end if;					
	end;
	
	procedure inserirInfAdicAgendaConsulta(nrSeqAgenda_p number,
								           dsUrlTelemedicina_p varchar2) is
	begin
		if (dsUrlTelemedicina_p IS NOT NULL AND dsUrlTelemedicina_p::text <> '' AND nrSeqAgenda_p IS NOT NULL AND nrSeqAgenda_p::text <> '') then
			delete from agenda_consulta_adic
			where nr_seq_agenda = nrSeqAgenda_p;
			
			insert into agenda_consulta_adic( nr_seq_agenda,
											   ds_url_telemedicina,
											   nm_usuario,
											   dt_atualizacao
											 )
									  values ( nrSeqAgenda_p,
										       dsUrlTelemedicina_p,
											   coalesce(wheb_usuario_pck.get_nm_usuario, 'TASY'),
											   clock_timestamp()
											 );
		end if;
	end;
begin
--alter session set nls_timestamp_format = 'dd/mm/yyyy hh24:mi:ss.ff';
tempo := LOCALTIMESTAMP;

select	ds_message
into STRICT	ds_log_w
from	intpd_fila_transmissao a
where	a.nr_sequencia = nr_sequencia_p;

agendamento		:= philips_json(ds_log_w);

/*
select	CD_PESSOA_FISICA
from	PF_CODIGO_EXTERNO
where	cd_pessoa_fisica_externo = paciente.get('cdPessoaFisicaExterno').get_string();
*/
ds_erro_w := '';

bl_inclusao_w := upper(agendamento.get['ieAcaoExcl'].get_string()) = 'FALSE';

/* RN 10 - Tipo de Agenda - Inicio */

if (agendamento.get['cdTipoAgenda'].get_number() = 2) then
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_agenda_w
	from	agenda_paciente
	where	cd_agendamento_externo = agendamento.get['nrSeqItemAgenda'].get_string();
	
	if (nr_seq_agenda_w = 0) then
	
		select	count(*) qt
		into STRICT	qt_exames_adc_w
		from	agenda_paciente_proc
		where	cd_externo = agendamento.get['nrSeqItemAgenda'].get_string();
	end if;

elsif (agendamento.get['cdTipoAgenda'].get_number() = 3) then
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_agenda_w
	from	agenda_consulta
	where	cd_agendamento_externo = agendamento.get['nrSeqItemAgenda'].get_string();

end if;
/* RN 10 - Tipo de Agenda - Fim */

if (agendamento.get['ieTipoAtendimento'].get_string() <> '7') then
	adiciona_erro('Tipo de atendimento ['|| agendamento.get['ieTipoAtendimento'].get_string() ||'] nao e valido, apenas (7) Externo.', '004');
end if;	

if (not(agendamento.get['ieStatusAgenda'].get_string() in ('N','A','R','E'))) then
	adiciona_erro('Tipo do atendimento do paciente na agenda [' || agendamento.get['ieStatusAgenda'].get_string() || '] nao e valido, apenas N. Normal, A. Agendado, R. Remarcacao ou E. Encaixe sao aceitaveis.', '008');
end if;

if	not bl_inclusao_w then
	/* No caso de exclusao, o agendamento sera cancelado no Tasy */



	/* Inicio
	RN 11 - Status da agenda
	RN 12 - Sexo
	RN 13 - Tipo de atendimento
	RN 14 - Lateralidade
	*/


	--if	(agendamento.get('ieStatusAgenda').get_string() in ('N','E'))			/* N - Normal		E - Encaixe  					*/

	--and	(agendamento.get('ieSexo').get_string() in ('M','F'))					/* M - Masculino;	F - Feminino 					*/

	--and	(agendamento.get('ieTipoAtendimento').get_string() = '7') 				/* 7 - Externo 										*/

	--and	(agendamento.get('ieLateralidade').get_string() in ('D','E','B')) then	/* D - Direito		E - Esquerdo	B - Bilateral	*/

		/* RN 09 - Agendamento - Inicio */

	ie_acao_executada_w	:= 'E';  /* (I)nclusao ou (E)xclusao */
	ds_return_message	:= 'Agendamento Cancelado';
	if (nr_seq_agenda_w = 0)
	and (qt_exames_adc_w = 0) then
		adiciona_erro('Sequencial [' || agendamento.get['nrSeqItemAgenda'].get_string() ||'] nao foi informado ou inexistente.','010');
	else			
		if (agendamento.get['cdTipoAgenda'].get_number() = 2) then	
			
			if (qt_exames_adc_w = 0) then
			
				select	coalesce(max(nr_seq_proc_interno),0),
						coalesce(max(cd_procedimento),0),
						coalesce(max(ie_origem_proced),0),
						coalesce(max(nr_seq_agenda),0),
						coalesce(max(cd_externo),0),
						coalesce(max(ie_lado),0),
						max(ds_observacao),
						max(cd_medico_req),
						max(dt_agenda_externa),
						max(dt_agenda_fim_externa)
				into STRICT	nr_seq_proc_interno_w,
						cd_procedimento_w,
						ie_origem_proced_w,
						nr_seq_agenda_proc_w,
						cd_externo_w,
						ie_lado_w,
						ds_observacao_w,
						cd_medico_req_w,
						dt_agendamento_proc_w,
						dt_agendamento_fim_proc_w
				from	agenda_paciente_proc
				where	nr_sequencia = nr_seq_agenda_w
				and		nr_seq_agenda = (SELECT	min(nr_seq_agenda)
										from	agenda_paciente_proc
										where	nr_sequencia = nr_seq_agenda_w
										and		(cd_externo IS NOT NULL AND cd_externo::text <> ''));
				
				if	cd_procedimento_w = 0 then
					
					--necessario para entrar nas triggers da agenda_paciente e demais tabelas
					ie_executa_trigger_w := wheb_usuario_pck.get_ie_executar_trigger();
					CALL wheb_usuario_pck.set_ie_executar_trigger('S');
					CALL cancelar_agenda_paciente( nr_seq_agenda_w, null, coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'), 0, agendamento.get['dsObservacao'].get_string(), 'S');
					CALL wheb_usuario_pck.set_ie_executar_trigger(ie_executa_trigger_w);
				else
					
					
					hr_inicio_w := dt_agendamento_proc_w;
					hr_final_w	:= dt_agendamento_fim_proc_w;
					
					select	cd_agenda
					into STRICT	cd_agenda_w
					from	agenda_paciente
					where	nr_sequencia = nr_seq_agenda_w;
					
					select	count(*) qt
					into STRICT	qt_registros_w
					from	agenda_paciente
					where	cd_agenda = cd_agenda_w
					and		dt_Agenda = trunc(hr_inicio_w)
					and		hr_inicio =	hr_inicio_w
					and		ie_status_agenda <> 'C';

					hr_inicio_nova_w := hr_inicio_w;
					if (qt_registros_w > 0) then
					
						select 	count(*)
						into STRICT	qt_controle_hor_w
						FROM 	agenda_paciente a
						WHERE 	cd_agenda = cd_agenda_w
						AND 	hr_inicio = hr_inicio_nova_w
						and		ie_status_agenda <> 'C';
						
						if (qt_controle_hor_w > 0) then
						
							SELECT 	coalesce(MIN(hr_inicio)+1/24/60,hr_inicio_nova_w)
							into STRICT	hr_inicio_nova_w
							FROM 	agenda_paciente a
							WHERE 	cd_agenda = cd_agenda_w
							AND 	hr_inicio BETWEEN hr_inicio_nova_w AND TRUNC(hr_inicio_nova_w)+86399/86400
							and		ie_status_agenda <> 'C'
							AND 	NOT EXISTS (SELECT 1
											   FROM agenda_paciente x
											   WHERE 	x.cd_agenda = a.cd_agenda
											   and		ie_status_agenda <> 'C'
											   AND 	x.hr_inicio = a.hr_inicio+1/24/60);
							
						end if;

					end if;
					
					update	agenda_paciente
					set		cd_procedimento = cd_procedimento_w,
							ie_origem_proced = ie_origem_proced_w,
							nr_seq_proc_interno = nr_seq_proc_interno_w,
							cd_agendamento_externo = cd_externo_w,
							ie_lado = ie_lado_w,
							ds_observacao = ds_observacao_w,
							cd_medico = cd_medico_req_w,
							dt_agenda = trunc(hr_inicio_nova_w),
							hr_inicio = hr_inicio_nova_w,							
							nr_minuto_duracao = round((hr_final_w - dt_agendamento_proc_w) * 60 * 24)
					where	nr_sequencia = nr_seq_Agenda_w;
					
					delete	from recep_ficha_pre_agenda
					where	nr_seq_agenda = nr_seq_agenda_w
					and		nr_seq_age_proc = nr_seq_agenda_proc_w;
					
					update  autorizacao_convenio
					set   	nr_seq_agenda_proc  = NULL							
					where 	nr_seq_agenda = nr_seq_agenda_w
					and 	nr_seq_agenda_proc = nr_seq_agenda_proc_w;
					
					delete	from agenda_paciente_proc
					where	nr_sequencia = nr_seq_agenda_w
					and		nr_seq_agenda = nr_seq_agenda_proc_w;
					
				end if;	
			elsif (qt_exames_adc_w > 0) then
				delete	from agenda_paciente_proc
				where	cd_externo = agendamento.get['nrSeqItemAgenda'].get_string();
			end if;
		elsif (agendamento.get['cdTipoAgenda'].get_number() = 3) then			
			CALL cancelar_agenda_consulta(nr_seq_agenda_w , coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'));
		end if;
	/* RN 10 - Agendamento - Fim */

	end if;
	--end if;
else
	ie_acao_executada_w	:= 'I';  /* (I)nclusao ou (E)xclusao */
	ds_return_message	:= 'Item Agendado';
	select	count(*) qtd
	into STRICT	qt_registros_w
	from	estabelecimento
	where	cd_estabelecimento = agendamento.get['cdEstabelecimento'].get_string();
	
	if	qt_registros_w = 0 then
		adiciona_erro('Unidade ['|| agendamento.get['cdEstabelecimento'].get_string() ||'] nao cadastrado no TASY.', '002');
	end if;

	if	((agendamento.get['ieStatusAgenda'].get_string() in ('N','E','A','R'))	/* N - Normal  			E - Encaixe  			A - Agendado  			R - Remarcacao	*/
	and (agendamento.get['ieSexo'].get_string() in ('M','F','I'))				/* M - Masculino;		F - Feminino 			I - Indefinido							*/
	and (agendamento.get['ieTipoAtendimento'].get_string() = '7') 				/* 7 - Externo 																			*/
	and	((agendamento.get['ieLateralidade']coalesce(.get_string()::text, '') = '')
	or	agendamento.get['ieLateralidade'].get_string() in ('D','E','B')) 		/* D - Direito			E - Esquerdo			B - Bilateral							*/
	and (agendamento.get['cdTipoAgenda'].get_number() in (2, 3))) then			/* 2 - Agenda Exame		3 - Agenda Consulta												*/

	
	/* Fim
	RN 11 - Status da agenda
	RN 12 - Sexo
	RN 13 - Tipo de atendimento
	RN 14 - Lateralidade
	*/
		if (agendamento.get['nrSeqItemAgendaAnt'](.get_string() IS NOT NULL AND (.get_string())::text <> '')) then
			if (agendamento.get['cdTipoAgenda'].get_number() = 2) then
				
				select	coalesce(max(nr_sequencia),0),
						max(cd_agenda)
				into STRICT	nr_seq_agenda_ant_w,
						cd_agenda_w
				from	agenda_paciente				
				where	dt_Agenda > trunc(clock_timestamp() - interval '1 days')
				and		cd_agendamento_externo = coalesce(agendamento.get['nrSeqItemAgendaAnt'].get_string(),'0');

				if (nr_seq_agenda_ant_w = 0) then
					delete	from agenda_paciente_proc
					where	cd_externo = agendamento.get['nrSeqItemAgendaAnt'].get_string();
				end if;
			elsif (agendamento.get['cdTipoAgenda'].get_number() = 3) then
				
				select	coalesce(max(nr_sequencia),0),
						max(cd_agenda)
				into STRICT	nr_seq_agenda_ant_w,
						cd_agenda_w
				from	agenda_consulta
				where	trunc(dt_Agenda) > trunc(clock_timestamp() - interval '1 days')
				and		cd_agendamento_externo = coalesce(agendamento.get['nrSeqItemAgendaAnt'].get_string(),'0');
			end if;	

			if (nr_seq_agenda_ant_w <> 0) then
				
				if (agendamento.get['cdTipoAgenda'].get_number() = 2) then
					
					select	coalesce(max(nr_seq_proc_interno),0),
							coalesce(max(cd_procedimento),0),
							coalesce(max(ie_origem_proced),0),
							coalesce(max(nr_seq_agenda),0),
							coalesce(max(cd_externo),0),
							coalesce(max(ie_lado),0),
							max(ds_observacao),
							max(cd_medico_req),
							max(dt_agenda_externa)
					into STRICT	nr_seq_proc_interno_w,
							cd_procedimento_w,
							ie_origem_proced_w,
							nr_seq_agenda_proc_w,
							cd_externo_w,
							ie_lado_w,
							ds_observacao_w,
							cd_medico_req_w,
							dt_agendamento_proc_w
					from	agenda_paciente_proc
					where	nr_sequencia = nr_seq_agenda_ant_w
					and		nr_seq_agenda = (SELECT	min(nr_seq_agenda)
											from	agenda_paciente_proc
											where	nr_sequencia = nr_seq_agenda_ant_w
											and		(cd_externo IS NOT NULL AND cd_externo::text <> ''));						
					
					if	cd_procedimento_w = 0 then

						--necessario para entrar nas triggers da agenda_paciente e demais tabelas
						ie_executa_trigger_w := wheb_usuario_pck.get_ie_executar_trigger();
						CALL wheb_usuario_pck.set_ie_executar_trigger('S');
						CALL cancelar_agenda_paciente( nr_seq_agenda_ant_w, null, coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'), 0, agendamento.get['dsObservacao'].get_string(), 'S');
						CALL wheb_usuario_pck.set_ie_executar_trigger(ie_executa_trigger_w);
					
					else					
						
						hr_inicio_w := dt_agendamento_proc_w;
/*						
						select	cd_agenda
						into	cd_agenda_w
						from	agenda_paciente
						where	nr_sequencia = nr_seq_agenda_ant_w;
						
						select	count(*) qt
						into	qt_registros_w
						from	agenda_paciente
						where	cd_agenda = cd_agenda_w
						and		dt_Agenda = trunc(hr_inicio_w)
						and		hr_inicio =	hr_inicio_w
						and		ie_status_agenda = 'N';
						
						hr_inicio_nova_w := hr_inicio_w;
						if	(qt_registros_w > 0) then
						
							open C01;
							loop
							fetch C01 into
								c01_w;
							if	hr_inicio_nova_w = hr_inicio_w then
								hr_inicio_nova_w := c01_w.hr_inicio;
								
							end if;
							
							exit when C01%notfound;
								begin									
									if	c01_w.hr_inicio = hr_inicio_nova_w then										
										hr_inicio_nova_w := c01_w.hr_inicio + (1/24/60);										
									else										
										exit;
									end if;
								end;
							end loop;
							close C01;
							
						end if;					
*/
						update	agenda_paciente
						set		cd_procedimento = cd_procedimento_w,
								ie_origem_proced = ie_origem_proced_w,
								nr_seq_proc_interno = nr_seq_proc_interno_w,
								cd_agendamento_externo = cd_externo_w,
								ie_lado = ie_lado_w,
								ds_observacao = ds_observacao_w,
								cd_medico = cd_medico_req_w
						where	nr_sequencia = nr_seq_agenda_ant_w;
						
						delete	from agenda_paciente_proc
						where	nr_sequencia = nr_seq_agenda_ant_w
						and		nr_seq_agenda = nr_seq_agenda_proc_w;
					end if;

					--cancelar_agenda_paciente( nr_seq_agenda_ant_w, null, nvl(wheb_usuario_pck.get_nm_usuario,'TASY'), 0, agendamento.get('dsObservacao').get_string());
				elsif (agendamento.get['cdTipoAgenda'].get_number() = 3) then					
					CALL cancelar_agenda_consulta(nr_seq_agenda_ant_w , coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'));
				end if;
			end if;
		end if;

		if	((agendamento.get['cdMedicoExecutor'].get_string()) is not null) then
			
			select	count(*)
			into STRICT	qt_registros_w
			from	medico
			where	cd_pessoa_fisica = (agendamento.get['cdMedicoExecutor'].get_string())
			and		ie_situacao = 'A';
			
			if	qt_registros_w = 0 then
				adiciona_erro('Medico executor ['|| agendamento.get['cdMedicoExecutor'].get_string() ||'] nao existe ou esta inativo.', '999'); -- AJUSTAR ISSO
			end if;
		elsif (agendamento.get['cdTipoAgenda'].get_number() = 3) then
			
			adiciona_erro('Necessario informar medico executor para agendas de consulta.', '999'); -- AJUSTAR ISSO
		end if;
				
		if	((agendamento.get['ieStatusAgenda'].get_string() in ('N','E'))
		and (coalesce(ds_erro_w::text, '') = '')) then

			/* RN 04 - Agenda - Inicio */

		
			select	coalesce(max(cd_Agenda),0)
			into STRICT	cd_agenda_w
			from	agenda
			where 	cd_estabelecimento	= agendamento.get['cdEstabelecimento'].get_string()
			and		cd_tipo_agenda 		= agendamento.get['cdTipoAgenda'].get_number()
			and 	cd_setor_exclusivo  = agendamento.get['cdSetorAgenda'].get_string()
			and		((agendamento.get['cdTipoAgenda'].get_number() = 2) --  Para criar agendas de EXAMES o Tasy devera verificar apenas Estabelecimento e Setor Exclusivo, ou seja, quando receber o Motion o JSON o Tasy devera buscar agendas considerando o estabelecimento e setor exclusivo. 
			or		((agendamento.get['cdMedicoExecutor']coalesce(.get_string()::text, '') = '')
			or (cd_pessoa_fisica 	= agendamento.get['cdMedicoExecutor'].get_string())))
			and		ie_situacao			= 'A'; -- Situacao ativa da agenda
			
			if (cd_agenda_w = 0) then
				
				select	nextval('agenda_seq')
				into STRICT	cd_agenda_w
				;
				
				if (agendamento.get['dsAgenda']coalesce(.get_string()::text, '') = '') then
										
					select	nm_sigla_estab
					into STRICT	ds_estab_apelido_w
					from	estabelecimento
					where	cd_estabelecimento = agendamento.get['cdEstabelecimento'].get_string();

					select	nm_pep
					into STRICT	ds_setor_agenda_w
					from	setor_atendimento
					where	cd_setor_Atendimento = coalesce(agendamento.get['cdSetorAgenda'].get_string(),'0');
					
					-- Agenda de exames nao deve gravar o nome do medico na descricao da agenda em sua criacao
					if (agendamento.get['cdTipoAgenda'].get_number() = 2) then
						ds_agenda_w := ds_estab_apelido_w || ' - ' || ds_setor_agenda_w;
					else
						select	obter_nome_pf(agendamento.get['cdMedicoExecutor'].get_string())
						into STRICT	nm_medico_executor_w
						;

						ds_agenda_w := ds_estab_apelido_w || ' - ' || ds_setor_agenda_w || ' - ' || substr(nm_medico_executor_w, 0, position(' ' in nm_medico_executor_w))||' '||Substr(nm_medico_executor_w, InStr(nm_medico_executor_w, ' ', -1));
					end if;
				else					
					ds_agenda_w := agendamento.get['dsAgenda'].get_string();
				end if;
				
				-- agenda exame
				if (agendamento.get['cdTipoAgenda'].get_number() = 2) then
					ds_curta_w := '';
					ie_ordenacao_w := '';
				elsif (agendamento.get['cdTipoAgenda'].get_number() = 3) then
					ds_curta_w := ds_estab_apelido_w || ' - ' || ds_setor_agenda_w;
					ie_ordenacao_w := 'DP';
				end if;

				insert into agenda(	cd_agenda,
									ds_curta,
									ds_agenda,
									cd_estabelecimento,
									cd_tipo_agenda,
									cd_setor_exclusivo,
									cd_pessoa_fisica,
									nm_usuario,
									nm_usuario_nrec,
									dt_atualizacao,
									dt_atualizacao_nrec,
									ie_situacao,
									--cd_agenda_externa,
									IE_MEDICO_REQUISITANTE,
									IE_FERIADO,
									QT_DIA_HISTORICO,
									IE_MEDICO_EXECUTOR,
									HR_QUEBRA_TURNO,
									QT_MIN_QUEBRA_TURNO,
									IE_GERAR_SOBRA_HORARIO,
									IE_GERAR_SOLIC_PRONT,
									IE_TIPO_AGENDA_CONSULTA,
									IE_GERAR_SOLIC_PRONT_GP,
									IE_ORDENACAO
								)
							values (	cd_agenda_w,
									substr(ds_curta_w,1,30),
									substr(ds_agenda_w,1,50),--agendamento.get('dsAgenda').get_string(),
									agendamento.get['cdEstabelecimento'].get_string(),
									agendamento.get['cdTipoAgenda'].get_number(),
									agendamento.get['cdSetorAgenda'].get_string(),
									CASE WHEN agendamento.get['cdTipoAgenda'].get_number()=2 THEN  null  ELSE agendamento.get['cdMedicoExecutor'].get_string() END ,
									coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
									coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
									clock_timestamp(),
									clock_timestamp(),
									'A',
									--agendamento.get('dsAgenda').get_string(),

									--ds_agenda_w,
									'S',
									'N',
									60,
									'S',
									'12',
									'00',
									'N',
									'S',
									'A',
									'N',
									ie_ordenacao_w
								);	

				if (agendamento.get['cdTipoAgenda'].get_number() = 3) then
					inserirRegraLiberacaoCons(cd_agenda_w, agendamento.get['cdSetorAgenda'].get_string(), agendamento.get['cdMedicoExecutor'].get_string());
				end if;
			end if;

		/* RN 04 - Agenda - Fim */




		/* RN 05 - Medico executor - Inicio */
			
			if (agendamento.get['cdTipoAgenda'].get_number() = 3) then
				select	count(*) qtd
				into STRICT	qt_registros_w
				from	pessoa_fisica p,
						medico m
				where	p.cd_pessoa_fisica = coalesce(agendamento.get['cdMedicoExecutor'].get_string(),'0')
				and		m.cd_pessoa_fisica = p.cd_pessoa_fisica
				and		m.ie_situacao = 'A';
			
				if (qt_registros_w	= 0) then
					adiciona_erro('Profissional da agenda [' || agendamento.get['cdMedicoExecutor'].get_string() || '] nao cadastrado no TASY ou esta inativo.', '001');
				end if;
			end if;
			
		/* RN 05 - Medico executor - Fim */



		/* RN 06 - Setor da agenda - Inicio */

			select	count(*) qtd
			into STRICT	qt_registros_w
			from	setor_atendimento
			where	cd_setor_Atendimento = coalesce(agendamento.get['cdSetorAgenda'].get_string(),'0');
			
			if (qt_registros_w = 0) then
				adiciona_erro('Setor da agenda inexistente. [' || agendamento.get['cdSetorAgenda'].get_string() || ']', '014');
			end if;
			
		/* RN 06 - Setor da agenda - Fim */
	

		/* RN 07 - Paciente do agendamento - Inicio */


			--if	(agendamento.get('cdPessoaFisica').get_string() is not null) then ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL ORIGINAL 
			if (agendamento.get['cdPessoaFisica'](.get_string() IS NOT NULL AND (.get_string())::text <> ''))
			or (agendamento.get['cdPessoaFisicaExterno'](.get_string() IS NOT NULL AND (.get_string())::text <> '')) then
				cd_pessoa_fisica_json_w := agendamento.get['cdPessoaFisica'].get_string();
				cd_pessoa_fisica_ext_json_w := agendamento.get['cdPessoaFisicaExterno'].get_string();
				
				select	max(cd_pessoa_fisica) cd_pessoa_fisica
				into STRICT	cd_pessoa_fisica_w
				from (
						SELECT	coalesce(max(cd_pessoa_fisica),'0') cd_pessoa_fisica
						from	pessoa_fisica
						where	cd_pessoa_fisica = cd_pessoa_fisica_json_w
						
union all

						SELECT	coalesce(max(cd_pessoa_fisica),'0') cd_pessoa_fisica
						from	PF_CODIGO_EXTERNO
						where	cd_pessoa_fisica_externo = cd_pessoa_fisica_ext_json_w
						and		ie_tipo_codigo_externo = 'MO'
					) alias5;
				
				--if	cd_pessoa_fisica_w	= 0 then

				--	adiciona_erro('Paciente inexistente no cadastro de pessoa fisica. [' || agendamento.get('cdPessoaFisicaExterno').get_string() || ']', '012');

				--end if;
				
				if (cd_pessoa_fisica_w	= 0) then
									
					select	nextval('pessoa_fisica_seq')
					into STRICT	cd_pessoa_fisica_w
					;

					insert into pessoa_fisica(	cd_pessoa_fisica,
												nm_pessoa_fisica,
												dt_nascimento,
												ie_sexo,
												ie_tipo_pessoa,
												dt_atualizacao,
												dt_atualizacao_nrec,
												nm_usuario,
												nm_usuario_nrec,
												qt_peso
											)
									   values (	cd_pessoa_fisica_w,
												agendamento.get['nmPessoaFisica'].get_string(),
												to_date(agendamento.get['dtNascimento'].get_string()),
												agendamento.get['ieSexo'].get_string(),
												2,
												clock_timestamp(),
												clock_timestamp(),
												coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
												coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
												agendamento.get['qtPeso'].get_number()
											);
					
					select	nextval('pf_codigo_externo_seq')
					into STRICT	nr_sequencia_pf_cod_ext_w
					;
					
					insert into pf_codigo_externo(	nr_sequencia,
													dt_atualizacao,
													nm_usuario,
													dt_atualizacao_nrec,
													nm_usuario_nrec,
													ie_tipo_codigo_externo,
													cd_pessoa_fisica,
													cd_pessoa_fisica_externo
												)
										values (	nr_sequencia_pf_cod_ext_w,
													clock_timestamp(),
													coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
													clock_timestamp(),
													coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
													'MO',
													cd_pessoa_fisica_w,
													agendamento.get['cdPessoaFisicaExterno'].get_string()
												);
					
				end if;
			else
				adiciona_erro('Nao foi informado codigo de pessoa', '999');
			end if;
		/* RN 07 - Paciente do agendamento - Fim */



		/* RN 08 - Medico solicitante - Inicio */

			cd_medico_solic_json_w := coalesce(agendamento.get['cdMedicoSolicitante'].get_string(),'0');
			cd_medico_solic_ext_json_w := coalesce(agendamento.get['cdMedicoSolicitanteExterno'].get_string(),'0');
			nrCrmMedicoSolicitante_w	:= agendamento.get['nrCrmMedicoSolicitante'].get_string();
			cdUFCrm_w	:= upper(agendamento.get['cdUFCrm'].get_string());

			--if	cd_medico_solic_json_w is not null then	
			if (cd_medico_solic_json_w <> '0')
			or (cd_medico_solic_ext_json_w <> '0') then	

				--Busca profissional cadastrado pelo Codigo, CRM/UF.
				select 	coalesce(max(p.cd_pessoa_fisica),0)
				into STRICT	cd_pessoa_fisica_medico_w
				FROM medico m, pessoa_fisica p
LEFT OUTER JOIN pf_codigo_externo pf ON (p.cd_pessoa_fisica = pf.cd_pessoa_fisica)
WHERE p.cd_pessoa_fisica = m.cd_pessoa_fisica and ((p.cd_pessoa_fisica = cd_medico_solic_json_w) or (pf.cd_pessoa_fisica_externo = cd_medico_solic_ext_json_w)) and (coalesce(m.nr_crm,'0') = coalesce(nrCrmMedicoSolicitante_w,'0')) and (coalesce(m.uf_crm,'0') = coalesce(cdUFCrm_w,'0')) and m.ie_situacao = 'A';
			
				if (coalesce(cd_pessoa_fisica_medico_w::text, '') = '') and (cdUFCrm_w IS NOT NULL AND cdUFCrm_w::text <> '' AND nrCrmMedicoSolicitante_w IS NOT NULL AND nrCrmMedicoSolicitante_w::text <> '') then
					--Localiza medico pelo CRM/UF
					select 	coalesce(max(p.cd_pessoa_fisica),0)
					into STRICT	cd_pessoa_fisica_medico_w
					FROM medico m, pessoa_fisica p
LEFT OUTER JOIN pf_codigo_externo pf ON (p.cd_pessoa_fisica = pf.cd_pessoa_fisica)
WHERE p.cd_pessoa_fisica = m.cd_pessoa_fisica and m.nr_crm = nrCrmMedicoSolicitante_w and m.uf_crm = cdUFCrm_w and m.ie_situacao = 'A';
				elsif (coalesce(cd_pessoa_fisica_medico_w::text, '') = '') then
					--Localiza medico pelo codigo
					select 	coalesce(max(p.cd_pessoa_fisica),0)
					into STRICT	cd_pessoa_fisica_medico_w
					FROM medico m, pessoa_fisica p
LEFT OUTER JOIN pf_codigo_externo pf ON (p.cd_pessoa_fisica = pf.cd_pessoa_fisica)
WHERE p.cd_pessoa_fisica = m.cd_pessoa_fisica and ((p.cd_pessoa_fisica = cd_medico_solic_json_w) or (pf.cd_pessoa_fisica_externo = cd_medico_solic_ext_json_w)) and m.ie_situacao = 'A';
				end if;
										
				qt_registros_w := 1;
				if	cd_pessoa_fisica_medico_w = '0' then
				
					select	coalesce(nextval('pessoa_fisica_seq'),0)
					into STRICT	cd_pessoa_fisica_medico_w
					;
					
					select	max(nr_sequencia)
					into STRICT	nr_conselho_profissional_w
					from	conselho_profissional
					where	sg_conselho = agendamento.get['cdMedicoSolicitanteDoc'].get_string();
					
					insert into pessoa_fisica(	cd_pessoa_fisica,
												nm_pessoa_fisica,
												ie_sexo,
												ie_tipo_pessoa,
												dt_atualizacao,
												dt_atualizacao_nrec,
												nm_usuario,
												nm_usuario_nrec,
												nr_seq_conselho
											)
									   values (	cd_pessoa_fisica_medico_w,
												agendamento.get['nmMedicoSolicitante'].get_string(),
												'I',
												2,
												clock_timestamp(),
												clock_timestamp(),
												coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
												coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
												nr_conselho_profissional_w
											);

					select	nextval('pf_codigo_externo_seq')
					into STRICT	nr_sequencia_pf_cod_ext_w
					;

					insert into pf_codigo_externo(	nr_sequencia,
													dt_atualizacao,
													nm_usuario,
													dt_atualizacao_nrec,
													nm_usuario_nrec,
													ie_tipo_codigo_externo,
													cd_pessoa_fisica,
													cd_pessoa_fisica_externo
												)
										values (	nr_sequencia_pf_cod_ext_w,
													clock_timestamp(),
													coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
													clock_timestamp(),
													coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
													'MO',
													cd_pessoa_fisica_medico_w,
													agendamento.get['cdMedicoSolicitanteExterno'].get_string()
												);
					qt_registros_w := 0;
				else

					select	count( * )
					into STRICT	qt_registros_w
					from	medico
					where	cd_pessoa_fisica = cd_pessoa_fisica_medico_w;
				end if;
				
				if	qt_registros_w = 0 then
					insert into medico(	cd_pessoa_fisica,
										nr_crm,
										nm_guerra,
										ie_vinculo_medico,
										dt_atualizacao,
										nm_usuario,
										ie_corpo_clinico,
										ie_corpo_assist,
										UF_CRM,
										ie_situacao
									)
								values (	cd_pessoa_fisica_medico_w,
										coalesce(nrCrmMedicoSolicitante_w,'0'),
										coalesce(agendamento.get['nmMedicoSolicitante'].get_string(),' '),
										1,	 -- USEI O DEFAULT
										clock_timestamp(),
										coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
										'N', -- USEI O DEFAULT
										'N', -- USEI 
										coalesce(cdUFCrm_w,' '),--O DEFAULT,
										'A'
								);
				end if;				
			end if;

		/* RN 08 - Medico solicitando - Fim */




		/* RN 09 - Agendamento - Inicio */

			select	count(*) qtd
			into STRICT	qt_registros_w
			from	convenio
			where	cd_convenio = agendamento.get['cdConvenio'].get_string();

			if (qt_registros_w = 0) then
				adiciona_erro('Codigo do convenio [' || agendamento.get['cdConvenio'].get_string() ||'] nao cadastrado no TASY.','005');
			end if;

			select	count(*) qtd
			into STRICT	qt_registros_w
			from	convenio_plano
			where	cd_plano	= agendamento.get['cdPlano'].get_string()
			and		cd_convenio	= agendamento.get['cdConvenio'].get_string();

			if (qt_registros_w = 0) then
				adiciona_erro('Codigo do plano [' || agendamento.get['cdPlano'].get_string() || '] para o convenio [' || agendamento.get['cdConvenio'].get_string() ||'] nao cadastrado no TASY.', '007');
			end if;

			select	count(*) qtd
			into STRICT	qt_registros_w
			from	categoria_convenio
			where	cd_convenio	 = agendamento.get['cdConvenio'].get_string()
			and		cd_categoria = agendamento.get['cdCategoria'].get_string();

			if (qt_registros_w = 0) then
				adiciona_erro('Codigo de Categoria [' || agendamento.get['cdCategoria'].get_string() || '] inexistente para este convenio [' || agendamento.get['cdConvenio'].get_string() || ']', '013');
			end if;

			--ds_erro_w := null;
			if (agendamento.get['cdTipoAgenda'].get_number() = 2) then
				select	count(*) qt
				into STRICT	qt_registros_w
				from	agenda_paciente
				where	cd_agendamento_externo = agendamento.get['nrSeqItemAgenda'].get_string();

				if (qt_registros_w < 0) then
					select	count(*) qt
					into STRICT	qt_registros_w
					from	agenda_paciente_proc
					where	cd_externo = agendamento.get['nrSeqItemAgenda'].get_string();
				end if;
				
				if (qt_registros_w > 0) then
					adiciona_erro('Sequencial duplicado [' || agendamento.get['nrSeqItemAgenda'].get_string() || ']', '011');	
				end if;
			end if;
			
			if (cd_agenda_w > 0)
			and (coalesce(ds_erro_w::text, '') = '') then

				hr_inicio_w := to_date(agendamento.get['hrInicioExaCons'].get_string());
				hr_final_w  := to_date(agendamento.get['hrFinalExaCons'].get_string());

				if (hr_inicio_w > hr_final_w) then
					adiciona_erro('Agenda:Hora de inicio ['||agendamento.get['hrInicioExaCons'].get_string()||'] da agenda e maior que hora de fim ['|| agendamento.get['hrFinalExaCons'].get_string() ||'] ou nao informadas.','003');

				else
					
					if (agendamento.get['cdTipoAgenda'].get_number() = 2) then  -- AGENDA DE EXAMES
					
						select	coalesce(max(nr_sequencia),0),
								max(hr_inicio),
								max(nr_seq_proc_interno),
								max(ie_lado),
								max(ds_observacao),
								max(cd_medico_req),
								max(cd_agendamento_externo),
								coalesce(max(hr_inicio),hr_inicio_w),
								coalesce((max(hr_inicio) + (max(nr_minuto_duracao)/60/24)),hr_final_w)
						into STRICT	nr_sequence_agenda_w,
								hr_inicio_agenda_paciente_w,
								nr_seq_proc_interno_w,
								ie_lado_w,
								ds_observacao_w,
								cd_medico_req_w,
								cd_externo_w,
								hr_inicio_w,
								hr_final_w
						from	agenda_paciente
						where	cd_pessoa_fisica = cd_pessoa_fisica_w
						and		trunc(hr_inicio) = trunc(hr_inicio_w)
						and		cd_Agenda = cd_agenda_w
						and		((agendamento.get['cdMedicoExecutor']coalesce(.get_string()::text, '') = '')
						or (cd_medico_exec = agendamento.get['cdMedicoExecutor'].get_string()))
						and		ie_status_agenda <> 'C';

						if (nr_sequence_agenda_w = 0) then
							
							hr_inicio_w := to_date(agendamento.get['hrInicioExaCons'].get_string());
							hr_final_w  := to_date(agendamento.get['hrFinalExaCons'].get_string());
							
							select	count(*) qt
							into STRICT	qt_registros_w
							from	agenda_paciente
							where	cd_agenda = cd_agenda_w
							and		dt_Agenda = trunc(hr_inicio_w)
							and		hr_inicio =	hr_inicio_w;

							hr_inicio_nova_w := hr_inicio_w;

							if (qt_registros_w > 0) then
							
								select 	count(*)
								into STRICT	qt_controle_hor_w
								FROM 	agenda_paciente a
								WHERE 	cd_agenda = cd_agenda_w
								AND 	hr_inicio = hr_inicio_nova_w
								and		ie_status_agenda <> 'C';
								
								if (qt_controle_hor_w > 0) then
								
									SELECT 	coalesce(MIN(hr_inicio)+1/24/60,hr_inicio_nova_w)
									into STRICT	hr_inicio_nova_w
									FROM 	agenda_paciente a
									WHERE 	cd_agenda = cd_agenda_w
									and		ie_status_agenda <> 'C'
									AND 	hr_inicio BETWEEN hr_inicio_nova_w AND TRUNC(hr_inicio_nova_w)+86399/86400
									AND 	NOT EXISTS (SELECT 1
													   FROM agenda_paciente x
													   WHERE 	x.cd_agenda = a.cd_agenda
													   and		ie_status_agenda <> 'C'
													   AND 	x.hr_inicio = a.hr_inicio+1/24/60);
									
								end if;
								
							end if;

							select	nextval('agenda_paciente_seq')
							into STRICT	nr_seq_agenda_w
							;
							
							-- Obtem dados complementares da pessoa fisica que vai ser inserida, e popula as variaveis
							preencheInfAdicPessoa(cd_pessoa_fisica_w);

							insert into AGENDA_PACIENTE(	nr_sequencia,
															cd_agenda,
															hr_inicio,
															nr_minuto_duracao,
															ie_equipamento,
															nm_usuario,
															dt_atualizacao,
															cd_categoria,
															nr_seq_cobertura,
															cd_convenio,
															cd_plano,
															ds_observacao,
															ie_anestesia,
															nr_seq_classif_agenda,
															ie_lado,
															ie_status_agenda,
															ie_tipo_atendimento,
															nr_seq_proc_interno,
															cd_agendamento_externo,
															cd_medico_exec,
															cd_pessoa_fisica,
															nm_paciente,
															nm_usuario_orig,
															dt_agendamento,
															dt_agenda,
															cd_medico,
															dt_nascimento_pac,
															qt_idade_paciente,
															qt_idade_meses,
															qt_peso,
															qt_altura_cm,
															nr_telefone,
															ds_cirurgia,
															cd_usuario_convenio
														)
												 values(	nr_seq_agenda_w,
															cd_agenda_w,
															hr_inicio_nova_w,
															--hr_inicio_w,
															round((hr_final_w - hr_inicio_w) * 60 * 24),
															'N',
															coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
															clock_timestamp(),
															agendamento.get['cdCategoria'].get_string(),
															agendamento.get['cdCobertura'].get_number(),
															agendamento.get['cdConvenio'].get_string(),
															agendamento.get['cdPlano'].get_string(),
															agendamento.get['dsObservacao'].get_string(),
															agendamento.get['ieAnestesia'].get_string(),
															agendamento.get['ieClassifAgenda'].get_string(),
															CASE WHEN agendamento.get['ieLateralidade'].get_string()='B' THEN 'A'  ELSE agendamento.get['ieLateralidade'].get_string() END ,
															agendamento.get['ieStatusAgenda'].get_string(),
															agendamento.get['ieTipoAtendimento'].get_string(),
															--agendamento.get('nrProcInterno').get_number(),
															agendamento.get['nrProcInterno'].get_string(),
															agendamento.get['nrSeqItemAgenda'].get_string(),															
															agendamento.get['cdMedicoExecutor'].get_string(),
															cd_pessoa_fisica_w,
															obter_nome_pf(cd_pessoa_fisica_w),
															coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
															clock_timestamp(),
															trunc(hr_inicio_w),
															cd_pessoa_fisica_medico_w,
															dt_nascimento_pac_w,
															qt_idade_paciente_w,
															qt_idade_meses_w,
															qt_peso_w,
															qt_altura_cm_w,
															substr(nr_telefones_w,1,255),
															substr(agendamento.get['indicacaoClinica'].get_string(),1,500),
															substr(agendamento.get['carteirinhaUsuario'].get_string(),1,30)
														);
														
												CALL gerar_autor_regra(null,null,null,null,null,null,'AP',coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),nr_seq_agenda_w,agendamento.get['nrProcInterno'].get_string(),null,null,null,null,'','','');
							-- alocar os exames adicionais para o agendamento remarcado

/*
							if	nr_seq_agenda_ant_w <> 0 then
								open C02;
									loop
									fetch C02 into
										c02_w;

									exit when C02%notfound;
										begin
											insert into agenda_paciente_proc(	nr_sequencia,
																				nr_seq_agenda,
																				dt_atualizacao,
																				nm_usuario,
																				nr_seq_proc_interno,
																				cd_procedimento,
																				ie_origem_proced,
																				ie_lado
																			)
																	  values(	nr_seq_agenda_w,
																				c02_w.nr_seq_Agenda,
																				sysdate,
																				nvl(wheb_usuario_pck.get_nm_usuario,'TASY'),
																				c02_w.nr_seq_proc_interno,
																				c02_w.cd_procedimento,
																				c02_w.ie_origem_proced,
																				c02_w.ie_lado
																			);
										end;
									end loop;
								close C02;
							end if;*/

							--- fim alocar os exames adicionais para o agendamento remarcado
						else

							select	count(*) qt
							into STRICT	qt_registros_w
							from	agenda_paciente_proc
							where	cd_externo = agendamento.get['nrSeqItemAgenda'].get_string();

							if (qt_registros_w > 0) then
								adiciona_erro('Sequencial duplicado [' || agendamento.get['nrSeqItemAgenda'].get_string() || ']', '011');
							else
								if (to_date(agendamento.get['hrInicioExaCons'].get_string()) < hr_inicio_agenda_paciente_w) then
									
									hr_inicio_nova_w := to_date(agendamento.get['hrInicioExaCons'].get_string());
									
									select 	count(*)
									into STRICT	qt_controle_hor_w
									FROM 	agenda_paciente a
									WHERE 	cd_agenda = cd_agenda_w
									AND 	hr_inicio = hr_inicio_nova_w
									and		ie_status_agenda <> 'C';
									
									if (qt_controle_hor_w > 0) then
									
										SELECT 	coalesce(MIN(hr_inicio)+1/24/60,hr_inicio_nova_w)
										into STRICT	hr_inicio_nova_w
										FROM 	agenda_paciente a
										WHERE 	cd_agenda = cd_agenda_w
										and		ie_status_agenda <> 'C'
										AND 	hr_inicio BETWEEN hr_inicio_nova_w AND TRUNC(hr_inicio_nova_w)+86399/86400
										AND 	NOT EXISTS (SELECT 1
														   FROM agenda_paciente x
														   WHERE 	x.cd_agenda = a.cd_agenda
														   and		ie_status_agenda <> 'C'
														   AND 	x.hr_inicio = a.hr_inicio+1/24/60);
										
									end if;
									
									
									select	max(nr_sequencia),
											max(cd_procedimento),
											max(ie_origem_proced)
									into STRICT	nr_seq_proc_interno_2_W,
											cd_procedimento_w,
											ie_origem_proced_w
									from 	proc_interno
									where 	nr_sequencia = agendamento.get['nrProcInterno'].get_string();

									update	agenda_paciente
									set		cd_procedimento = cd_procedimento_w,
											ie_origem_proced = ie_origem_proced_w,
											nr_seq_proc_interno = nr_seq_proc_interno_2_w,
											cd_agendamento_externo = agendamento.get['nrSeqItemAgenda'].get_string(),
											ie_lado = CASE WHEN agendamento.get['ieLateralidade'].get_string()='B' THEN 'A'  ELSE agendamento.get['ieLateralidade'].get_string() END ,
											ds_observacao = agendamento.get['dsObservacao'].get_string(),
											ds_cirurgia = substr(agendamento.get['indicacaoClinica'].get_string(),1,500),
											cd_usuario_convenio = substr(agendamento.get['carteirinhaUsuario'].get_string(),1,30),
											cd_medico = cd_pessoa_fisica_medico_w,
											dt_agenda = trunc(hr_inicio_nova_w),
											hr_inicio = hr_inicio_nova_w,
											nr_minuto_duracao = round((to_date(agendamento.get['hrFinalExaCons'].get_string()) - to_date(agendamento.get['hrInicioExaCons'].get_string())) * 60 * 24)
									where	nr_sequencia = nr_sequence_agenda_w;

									delete	from agenda_paciente_proc
									where	nr_sequencia = nr_seq_agenda_w
									and		nr_seq_agenda = nr_seq_agenda_proc_w;
																		
								else
									cd_medico_req_w := cd_pessoa_fisica_medico_w;
									nr_seq_proc_interno_w := agendamento.get['nrProcInterno'].get_string();
									hr_inicio_w := to_date(agendamento.get['hrInicioExaCons'].get_string());
									hr_final_w  := to_date(agendamento.get['hrFinalExaCons'].get_string());
									ds_observacao_w := agendamento.get['dsObservacao'].get_string();
									select	CASE WHEN agendamento.get['ieLateralidade'].get_string()='B' THEN 'A'  ELSE agendamento.get['ieLateralidade'].get_string() END
									into STRICT	ie_lado_w
									;
									cd_externo_w := agendamento.get['nrSeqItemAgenda'].get_string();
									--ie_lado_w := decode(agendamento.get('ieLateralidade').get_string(),'B','A', agendamento.get('ieLateralidade').get_string());
								end if;

								select	nr_sequencia,
										cd_procedimento,
										ie_origem_proced
								into STRICT	nr_seq_proc_interno_w,
										cd_procedimento_w,
										ie_origem_proced_w
								from 	proc_interno
								where 	nr_sequencia = nr_seq_proc_interno_w;

								if	coalesce(nr_seq_proc_interno_w::text, '') = '' then
									adiciona_erro('Codigo do produto/procedimento [' || agendamento.get['nrProcInterno'].get_string() ||'] nao cadastrado no TASY.','009');
								else

									select	coalesce(max(nr_seq_Agenda)+1,1)
									into STRICT	nr_seq_temp_w
									from	agenda_paciente_proc	
									where	nr_sequencia = nr_sequence_agenda_w;

									insert into agenda_paciente_proc(	nr_sequencia,
																		nr_seq_agenda,
																		dt_atualizacao,
																		nm_usuario,
																		nr_seq_proc_interno,
																		cd_procedimento,
																		ie_origem_proced,
																		ie_lado,
																		cd_externo,
																		ds_observacao,
																		cd_medico_req,
																		dt_agenda_externa,
																		dt_agenda_fim_externa
																	)
															  values (	nr_sequence_agenda_w,
																		nr_seq_temp_w,
																		clock_timestamp(),
																		coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
																		nr_seq_proc_interno_w,
																		cd_procedimento_w,
																		ie_origem_proced_w,
																		ie_lado_w,
																		cd_externo_w,
																		ds_observacao_w,
																		cd_medico_req_w,
																		hr_inicio_w,
																		hr_final_w
																	);
																	
									CALL gerar_autor_regra(null,null,null,null,null,null,'AP',coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),nr_sequence_agenda_w,null,null,null,null,nr_seq_temp_w,'','','');

								end if;
							end if;
						end if;

					elsif agendamento.get['cdTipoAgenda'].get_number() = 3 then

						select	coalesce(max(nr_sequencia),0)
						into STRICT	nr_sequence_agenda_w
						from	agenda_consulta
						where	cd_pessoa_fisica = cd_pessoa_fisica_w
						and		dt_agenda = hr_inicio_w
						and		cd_agenda = cd_agenda_w;
						
						begin
							url_telemedicina_w := substr(agendamento.get['urlTelemedicina'].get_string(), 1, 255);
						exception
							when others then
								url_telemedicina_w := '';
						end;

						if	nr_sequence_agenda_w = 0 then

							select	count(*) qt
							into STRICT	qt_registros_w
							from	agenda_consulta
							where	cd_agendamento_externo = agendamento.get['nrSeqItemAgenda'].get_string();
							
							if	qt_registros_w > 0 then

								adiciona_erro('Sequencial duplicado [' || agendamento.get['nrSeqItemAgenda'].get_string() || ']', '011');
							else

								------novo inicio
								hr_inicio_w := to_date(agendamento.get['hrInicioExaCons'].get_string());
								hr_final_w  := to_date(agendamento.get['hrFinalExaCons'].get_string());
								
								select	count(*) qt
								into STRICT	qt_registros_w
								from	agenda_consulta
								where	cd_agenda = cd_agenda_w
								and		dt_Agenda = hr_inicio_w;

								hr_inicio_nova_w := hr_inicio_w;

								if (qt_registros_w > 0) then
								
									select 	count(*)
									into STRICT	qt_controle_hor_w
									FROM 	agenda_consulta a
									WHERE 	cd_agenda = cd_agenda_w
									AND 	dt_agenda = hr_inicio_nova_w
									and		ie_status_agenda <> 'C';
									
									if (qt_controle_hor_w > 0) then
									
										SELECT 	coalesce(MIN(dt_agenda)+1/24/60,hr_inicio_nova_w)
										into STRICT	hr_inicio_nova_w
										FROM 	agenda_consulta a
										WHERE 	cd_agenda = cd_agenda_w
										AND 	dt_agenda BETWEEN hr_inicio_nova_w AND TRUNC(hr_inicio_nova_w)+86399/86400
										and		ie_status_agenda <> 'C'
										AND 	NOT EXISTS (SELECT 1
														   FROM agenda_consulta x
														   WHERE 	x.cd_agenda = a.cd_agenda
														   and		ie_status_agenda <> 'C'
														   AND 	x.dt_agenda = a.dt_agenda+1/24/60);
										
									end if;
									
								end if;

								select	obter_turno_horario_agenda(cd_agenda_w, trunc(hr_final_w - hr_inicio_w))
								into STRICT	cd_turno_w
								;
								
								-- Obtem dados complementares da pessoa fisica que vai ser inserida, e popula as variaveis
								preencheInfAdicPessoa(cd_pessoa_fisica_w);

								insert into AGENDA_CONSULTA(	nr_sequencia,
																cd_agenda,
																dt_agenda,
																nr_minuto_duracao,
																nm_usuario,
																dt_atualizacao,
																cd_categoria,
																cd_convenio,
																cd_plano,
																ds_observacao,
																ie_lado,
																ie_status_agenda,
																ie_tipo_atendimento,
																nr_seq_proc_interno,
																cd_agendamento_externo,
																cd_pessoa_fisica,
																nm_paciente,
																nm_usuario_origem,
																dt_agendamento,
																ie_classif_agenda,
																cd_turno,
																cd_senha,
																cd_medico_req,
																dt_nascimento_pac,
																qt_idade_pac,
																qt_peso,
																qt_altura_cm,
																nr_telefone,
																cd_usuario_convenio
															)
													 values(	nextval('agenda_consulta_seq'),
																cd_agenda_w,
																hr_inicio_nova_w,
																round((hr_final_w - hr_inicio_w) * 60 * 24),
																coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
																clock_timestamp(),
																agendamento.get['cdCategoria'].get_string(),
																agendamento.get['cdConvenio'].get_string(),
																agendamento.get['cdPlano'].get_string(),
																agendamento.get['dsObservacao'].get_string(),
																agendamento.get['ieLateralidade'].get_string(),
																agendamento.get['ieStatusAgenda'].get_string(),
																agendamento.get['ieTipoAtendimento'].get_number(),
																agendamento.get['nrProcInterno'].get_number(),
																agendamento.get['nrSeqItemAgenda'].get_string(),
																cd_pessoa_fisica_w,
																obter_nome_pf(cd_pessoa_fisica_w),
																coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
																clock_timestamp(),
																agendamento.get['ieClassifAgenda'].get_string(),
																cd_turno_w,
																'SENHA',
																cd_pessoa_fisica_medico_w,
																dt_nascimento_pac_w,
																qt_idade_paciente_w,
																qt_peso_w,
																qt_altura_cm_w,
																substr(nr_telefones_w,1,80),
																substr(agendamento.get['carteirinhaUsuario'].get_string(),1,30)
																
															)returning nr_sequencia into nr_seq_agenda_consulta_w;
															
								inserirInfAdicAgendaConsulta(nr_seq_agenda_consulta_w, url_telemedicina_w);
								CALL gerar_autor_regra(null,null,null,null,null,null,'AC',coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),null,null,null,nr_seq_agenda_consulta_w,null,null,'','','');
							end if;
						else

							select	nr_sequencia,
									cd_procedimento,
									ie_origem_proced
							into STRICT	nr_seq_proc_interno_w,
									cd_procedimento_w,
									ie_origem_proced_w
							from 	proc_interno
							where 	nr_sequencia = agendamento.get['nrProcInterno'].get_string();

							if	coalesce(nr_seq_proc_interno_w::text, '') = '' then

								adiciona_erro('Codigo do produto/procedimento [' || agendamento.get['nrProcInterno'].get_string() ||'] nao cadastrado no TASY.','009');
							else

								insert into agenda_consulta_proc(	nr_sequencia,
																	nr_seq_agenda,
																	dt_atualizacao,
																	nm_usuario,
																	nr_seq_proc_interno,
																	cd_procedimento,
																	ie_origem_proced,
																	dt_atualizacao_nrec,
																	nm_usuario_nrec,
																	ie_lado,
																	ie_executar_proc
																)	
														  values (	nextval('agenda_consulta_proc_seq'),
																	nr_sequence_agenda_w,
																	clock_timestamp(),
																	coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
																	nr_seq_proc_interno_w,
																	cd_procedimento_w,
																	ie_origem_proced_w,
																	clock_timestamp(),
																	coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),
																	agendamento.get['ieLateralidade'].get_string(),
																	'S'
																)returning nr_sequencia into nr_seq_agenda_consulta_w;

								inserirInfAdicAgendaConsulta(nr_sequence_agenda_w, url_telemedicina_w);
								CALL gerar_autor_regra(null,null,null,null,null,null,'AC',coalesce(wheb_usuario_pck.get_nm_usuario,'TASY'),null,null,null,nr_sequence_agenda_w,null,nr_seq_agenda_consulta_w,'','','');
							end if;
						end if;
					end if;	
				end if;
			end if;
			/* RN 09 - Agendamento - Fim */
	
		end if;
end if;

end if;

if	coalesce(ds_erro_w::text, '') = '' then
	update	intpd_fila_transmissao
	set		ie_status_http = 200,
			ds_message_response =	'{ '
								||	'"idOrigin": "' 				|| agendamento.get['idOrigin'].get_string() || '", '
								||	'"cdEstabelecimentoConta": "' 	|| agendamento.get['cdEstabelecimento'].get_string() || '", '
								||	'"ieAcaoExecutada": "'			|| ie_acao_executada_w ||'",'
								||	'"nrSeqItemAgenda": "'			|| agendamento.get['nrSeqItemAgenda'].get_string() || '",'
								||	'"Sucess": true,'
								||	'"ReturnMessage": "'			|| ds_return_message || '"'
								||	'}	',
			ie_status = 'S'
	where nr_sequencia = nr_sequencia_p;
else
	update	intpd_fila_transmissao
	set		ie_status_http = 400,
			ds_message_response =	'{ '
								||	'"idOrigin": "' 				|| agendamento.get['idOrigin'].get_string() || '", '
								||	'"cdEstabelecimentoConta": "' 	|| agendamento.get['cdEstabelecimento'].get_string() || '", '
								||	'"ieAcaoExecutada": "'			|| ie_acao_executada_w ||'",'
								||	'"nrSeqItemAgenda": "'			|| agendamento.get['nrSeqItemAgenda'].get_string() || '",'
								||	'"Sucess": false,'
								||	'"ReturnMessage": "Item nao Agendado",'
								||	'"ListErrorsMessages": ['
								||	substr(ds_erro_w,0, length(ds_erro_w)-1 )
								||	']	'
								||	'}	',
			ie_status = 'E'
	where nr_sequencia = nr_sequencia_p;
end if;
exception
	when others then
		begin
			adiciona_erro( chr(10) ||  DBMS_UTILITY.FORMAT_ERROR_STACK() || chr(10) || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE(), '999');

			update 	intpd_fila_transmissao
			set		ie_status_http = 400,
					ds_message_response =	'{ '
										||	'"idOrigin": "' 				|| agendamento.get['idOrigin'].get_string() || '", '
										||	'"cdEstabelecimentoConta": "' 	|| agendamento.get['cdEstabelecimento'].get_string() || '", '
										||	'"ieAcaoExecutada": "'			|| ie_acao_executada_w ||'",'
										||	'"nrSeqItemAgenda": "'			|| agendamento.get['nrSeqItemAgenda'].get_string() || '",'
										||	'"Sucess": false,'
										||	'"ReturnMessage": "Item nao Agendado",'
										||	'"ListErrorsMessages": ['
										||	substr(ds_erro_w,0, length(ds_erro_w)-1 )
										||	']	'
										||	'}	',
					ie_status = 'E'
			where 	nr_sequencia = nr_sequencia_p;
		end;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE motion_processa_retorno_agen ( nr_sequencia_p bigint) FROM PUBLIC;

