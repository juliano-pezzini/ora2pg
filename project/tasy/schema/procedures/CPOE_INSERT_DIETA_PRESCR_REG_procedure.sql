-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_insert_dieta_prescr_reg ( nr_atendimento_p atendimento_paciente.nr_atendimento%type, nr_prescricao_p prescr_medica.nr_prescricao%type, nr_sequencia_p cpoe_dieta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_perfil_p perfil.cd_perfil%type, nm_usuario_p usuario.nm_usuario%type, ie_origem_inf_p prescr_medica.ie_origem_inf%type, dt_inicio_prescr_p timestamp, dt_inicio_ret_p INOUT timestamp) AS $body$
DECLARE


EXEC_W varchar(300);
se_copia_dieta_w varchar(1);
cd_dieta_w          dieta.cd_dieta%type;

cd_material_w        material.cd_material%type;

nr_ocorrencia_w        prescr_material.nr_ocorrencia%type;

ie_tipo_dieta_w        cpoe_dieta.ie_tipo_dieta%type;
qt_parametro_w        cpoe_dieta.qt_parametro%type;
dt_atualizacao_w      cpoe_dieta.dt_atualizacao%type;
nm_usuario_w        cpoe_dieta.nm_usuario%type;
dt_atualizacao_nrec_w    cpoe_dieta.dt_atualizacao_nrec%type;
nm_usuario_nrec_w      cpoe_dieta.nm_usuario_nrec%type;
cd_intervalo_w        cpoe_dieta.cd_intervalo%type;
qt_dose_w          cpoe_dieta.qt_dose%type;
cd_unidade_medida_dose_w   cpoe_dieta.cd_unidade_medida_dose%type;
nr_seq_tipo_w        cpoe_dieta.nr_seq_tipo%type;
qt_min_ant_w        cpoe_dieta.qt_min_ant%type;
qt_hora_ant_w        cpoe_dieta.qt_hora_ant%type;
qt_min_depois_w        cpoe_dieta.qt_min_depois%type;
qt_hora_depois_w      cpoe_dieta.qt_hora_depois%type;
ds_observacao_w        cpoe_dieta.ds_observacao%type;
nr_seq_disp_succao_w    cpoe_dieta.nr_seq_disp_succao%type;
nr_seq_via_acesso_w      cpoe_dieta.nr_seq_via_acesso%type;
ie_bomba_infusao_w      cpoe_dieta.ie_bomba_infusao%type;
ie_aplic_bolus_w      cpoe_dieta.ie_aplic_bolus%type;
ie_duracao_w        cpoe_dieta.ie_duracao%type;
qt_hora_aplicacao_w      cpoe_dieta.qt_hora_aplicacao%type;
qt_vel_infusao_w      cpoe_dieta.qt_vel_infusao%type;
ie_leite_materno_w      cpoe_dieta.ie_leite_materno%type;
ie_via_aplicacao_w      cpoe_dieta.ie_via_aplicacao%type;
dt_evento_w          cpoe_dieta.dt_evento%type;
ds_evento_w          cpoe_dieta.ds_evento%type;
nr_seq_dieta_w        cpoe_dieta.nr_sequencia%type;
dt_liberacao_w        cpoe_dieta.dt_liberacao%type;
ds_justificativa_w      cpoe_dieta.ds_justificativa%type;
nr_seq_objetivo_w      cpoe_dieta.nr_seq_objetivo%type;
ds_orientacao_w        cpoe_dieta.ds_orientacao%type;
qt_volume_total_w      cpoe_dieta.qt_volume_total%type;
nr_etapas_w          cpoe_dieta.nr_etapas%type;
qt_volume_w          cpoe_dieta.qt_volume%type;
ie_referencia_w        cpoe_dieta.ie_referencia%type;
ie_continuo_w        cpoe_dieta.ie_continuo%type;
ie_urgencia_w        cpoe_dieta.ie_urgencia%type;
hr_prim_horario_w      cpoe_dieta.hr_prim_horario%type;
ie_administracao_w      cpoe_dieta.ie_administracao%type;
ie_retrogrado_w        cpoe_dieta.ie_retrogrado%type;

nr_prescricao_orig_w    prescr_recomendacao.nr_prescricao%type;
nr_sequencia_orig_w      prescr_recomendacao.nr_prescricao%type;


ie_operacao_w			intervalo_prescricao.ie_operacao%type;

ds_erro_w          varchar(2000);
qt_hora_fase_w        double precision;
ds_horarios_w        varchar(4000);
ds_horarios_aux_w      varchar(4000);
ie_se_necessario_w      char(1);
ie_acm_w          char(1);
qt_tempo_aplicacao_w    double precision;
qt_solucao_w        double precision;
nr_horas_prox_geracao_w    bigint;
nr_seq_rep_w        bigint;
dt_inicio_w          timestamp;
dt_inicio_orig_w      timestamp;
dt_inicio_base_w      timestamp;
dt_prox_geracao_w timestamp;
dt_fim_w          timestamp;
ie_calcula_horarios_w    boolean;
nm_rep_tabela_cpoe_w    varchar(30);
nm_rep_chave_cpoe_w      varchar(30);
nm_hor_tabela_rep_w      varchar(30);
nm_hor_atributo_rep_w    varchar(30);
dt_fim_anterior_w      timestamp;
ie_copia_w          smallint;
hr_inicio_pausa_w		  cpoe_dieta.dt_inicio_pausa%type;
param_CPOE_24_w		varchar(1);
ie_regra_disp_w		cpoe_dieta.ie_regra_disp%type;

c01 CURSOR FOR
  SELECT  a.nr_sequencia,
      a.cd_dieta,
      a.qt_parametro,
      a.ds_horarios,
      a.ds_justificativa,
      a.dt_atualizacao,
      a.nm_usuario,
      a.cd_intervalo,
      a.ie_tipo_dieta,
      a.cd_material,
      a.qt_dose,
      a.cd_unidade_medida_dose,
      a.nr_seq_objetivo,
      a.nr_seq_tipo,
      a.ie_duracao,
      a.qt_min_ant,
      a.qt_hora_ant,
      a.qt_min_depois,
      a.qt_hora_depois,
      coalesce(a.ie_administracao,'P'),
      a.ds_observacao,
      a.nr_seq_disp_succao,
      a.nr_seq_via_acesso,
      a.ds_orientacao,
      a.qt_volume_total,
      coalesce(a.ie_bomba_infusao,'N'),
      coalesce(a.ie_aplic_bolus,'N'),
      a.qt_hora_aplicacao,
      a.nr_etapas,
      a.qt_vel_infusao,
      a.ie_leite_materno,
      a.ie_via_aplicacao,
      a.qt_volume,
      a.dt_inicio,
      coalesce(a.hr_prim_horario, to_char(a.dt_inicio,'hh24:mi')),
      CASE WHEN coalesce(a.dt_lib_suspensao::text, '') = '' THEN  a.dt_fim  ELSE coalesce(a.dt_suspensao,a.dt_fim) END  dt_fim,
      a.dt_evento,
      a.ds_evento,
      a.dt_liberacao,
      CASE WHEN coalesce(a.qt_hora_fase,'__:__')='__:__' THEN null  ELSE dividir(coalesce(obter_minutos_hora(a.qt_hora_fase),0),60) END ,
      coalesce(CASE WHEN coalesce(a.qt_tempo_aplic,'__:__')='__:__' THEN null  ELSE dividir(coalesce(obter_minutos_hora(a.qt_tempo_aplic),0),60) END ,24),
      a.nr_ocorrencia,
      coalesce(a.ie_referencia,'I'),
      a.ie_continuo,
      a.ie_urgencia,
      coalesce(ie_retrogrado,'N'),
	a.dt_inicio_pausa,
	a.ie_regra_disp
  from  cpoe_dieta a
  where  a.nr_sequencia = nr_sequencia_p
  and    ((CASE WHEN coalesce(a.dt_lib_suspensao::text, '') = '' THEN  a.dt_fim  ELSE coalesce(a.dt_suspensao,a.dt_fim) END  >= clock_timestamp()) or (CASE WHEN coalesce(a.dt_lib_suspensao::text, '') = '' THEN  a.dt_fim  ELSE coalesce(a.dt_suspensao,a.dt_fim) coalesce(END::text, '') = '') or (coalesce(a.ie_retrogrado,'N') = 'S' AND a.dt_inicio >= dt_inicio_prescr_p)) -- retrograde/backward item
  order by
      a.nr_sequencia;

  procedure Calcular_horarios_item is
    dt_fim_aux_w      timestamp;
    qt_tempo_etapa_aux_w  double precision;
    qt_tempo_pausa_aux_w  double precision;
    nr_etapas_aux_w      double precision;
    hr_prim_horario_aux_w  varchar(5);

    procedure Carregar_inf_d_oral is
;
BEGIN
      nm_rep_tabela_cpoe_w  := 'prescr_dieta';
      nm_rep_chave_cpoe_w    := 'nr_seq_dieta_cpoe';
      nm_hor_tabela_rep_w    := 'prescr_dieta_hor';
      nm_hor_atributo_rep_w  := 'nr_seq_dieta';

      ie_continuo_w    := null;
      qt_tempo_aplicacao_w  := null;
      qt_hora_fase_w    := null;
    end;

    procedure Carregar_inf_d_suplementar is
    begin
      nm_rep_tabela_cpoe_w  := 'prescr_material';
      nm_rep_chave_cpoe_w  := 'nr_seq_dieta_cpoe';
      nm_hor_tabela_rep_w  := 'prescr_mat_hor';
      nm_hor_atributo_rep_w  := 'nr_seq_material';

      ie_continuo_w    := null;
      qt_tempo_aplicacao_w  := null;
      qt_hora_fase_w    := null;
    end;

    procedure Carregar_inf_d_enteral is
    begin
      nm_rep_tabela_cpoe_w  := 'prescr_material';
      nm_rep_chave_cpoe_w    := 'nr_seq_dieta_cpoe';
      nm_hor_tabela_rep_w    := 'prescr_mat_hor';
      nm_hor_atributo_rep_w  := 'nr_seq_material';

      if (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '') then
        nr_etapas_aux_w    := Obter_ocorrencia_intervalo(cd_intervalo_w, 24, '0');
      else
        nr_etapas_aux_w    := nr_etapas_w;
      end if;

      qt_tempo_etapa_aux_w  := dividir_sem_round(qt_tempo_aplicacao_w, nr_etapas_aux_w);

      if (coalesce(ie_continuo_w,'C') <> 'I') then
        ie_continuo_w    := 'S';
        qt_hora_fase_w    := null;
        qt_tempo_pausa_aux_w  := 0;
      else
        ie_continuo_w    := 'N';
        qt_tempo_pausa_aux_w  := dividir_sem_round(qt_tempo_aplicacao_w, nr_etapas_aux_w) - qt_hora_fase_w;
      end if;
    end;

    procedure Carregar_inf_d_leites is
    begin
      if (ie_leite_materno_w = 'S') then
        Carregar_inf_d_oral;
      else
        Carregar_inf_d_suplementar;
      end if;
    end;

    procedure Calcular_tempo_aplic_sne is
		dt_horario_w   date;
		qt_tempo_aplic_aux_w  number(18,6);
		nr_etapas_ww   number(2);
		ds_horarios_ww varchar2(2000);
		ie_present_desc_stage_w varchar2(2) := 'N';
		ds_etapa_w 	   varchar2(200) := wheb_mensagem_pck.get_texto(307054);
    begin
		ds_etapa_w := substr(ds_etapa_w, 1, position(' ' in ds_etapa_w));
		if (position(ds_etapa_w in ds_horarios_w) > 0) then
			ie_present_desc_stage_w := 'S';
		end if;

    if (param_CPOE_24_w = 'N') then
			dt_horario_w    := dt_inicio_w;
			qt_tempo_aplic_aux_w  := 0;

			/* Este calculo esta bem antigo. Necessario revisar seu objetivo ou remover */

      while(dt_horario_w < dt_fim_w) and (nr_etapas_aux_w > 0) loop
      begin
        begin
          EXEC_W := 'BEGIN CALC_TEMP_INSERT_DIE_CPOE_MD(:1,:2,:3,:4,:5,:6,:7); END;';

          EXECUTE EXEC_W USING IN dt_fim_w,
                                         IN qt_tempo_pausa_aux_w,
                                         IN OUT dt_fim_aux_w,
                                         IN OUT qt_tempo_etapa_aux_w,
                                         IN OUT qt_tempo_aplic_aux_w,
                                         IN OUT dt_horario_w,
                                         IN OUT nr_etapas_aux_w;
        exception
          when others then
            dt_fim_aux_w          := null;
            qt_tempo_etapa_aux_w  := null;
            qt_tempo_aplic_aux_w  := null;
            dt_horario_w          := null;
            nr_etapas_aux_w       := null;
        end;
      end;
      end loop;

			/* Quando o numero de etapas for zero recalcula utilizando a mesma rotina do backend */

			if (coalesce(nr_etapas_w, 0) = 0) then
				nr_etapas_ww := nr_ocorrencia_w;

				SELECT * FROM CPOE_Calcula_horarios_enteral(
					nm_usuario_p, dt_horario_w, ie_continuo_w, nr_etapas_ww, cd_intervalo_w, qt_tempo_aplicacao_w, qt_tempo_etapa_aux_w, to_char(hr_inicio_pausa_w, 'hh24:mi'), 'N', null, dt_fim_w, ie_present_desc_stage_w, nr_atendimento_p, cd_estabelecimento_p, cd_perfil_p) INTO STRICT nr_etapas_ww, ds_horarios_ww;
					
				nr_ocorrencia_w := nr_etapas_ww;
			else
        qt_tempo_aplicacao_w := ceil(qt_tempo_aplic_aux_w);
        nr_ocorrencia_w      := nr_etapas_w;
      end if;
		else
			nr_etapas_ww := nr_ocorrencia_w;

			dt_horario_w := CPOE_Obter_dt_fim_enteral(
				cd_estabelecimento_p,
				cd_perfil_p,
				nm_usuario_p,
				dt_inicio_w,
				ie_continuo_w,
				nr_ocorrencia_w,
				cd_intervalo_w,
				qt_tempo_aplicacao_w,
				qt_tempo_aplicacao_w,
				to_char(hr_inicio_pausa_w, 'hh24:mi'),
				dt_fim_w);

			SELECT * FROM CPOE_Calcula_horarios_enteral(
				nm_usuario_p, dt_horario_w, ie_continuo_w, nr_etapas_ww, cd_intervalo_w, qt_tempo_aplicacao_w, qt_tempo_aplicacao_w, to_char(hr_inicio_pausa_w, 'hh24:mi'), 'N', null, dt_fim_w, ie_present_desc_stage_w, nr_atendimento_p, cd_estabelecimento_p, cd_perfil_p) INTO STRICT nr_etapas_ww, ds_horarios_ww;

			hr_prim_horario_w := to_char(dt_horario_w, 'hh24:mi');
			nr_etapas_w := nr_etapas_ww;
			ds_horarios_w := ds_horarios_ww;

			update cpoe_dieta
			   set ds_horarios = ds_horarios_ww,
				     nr_ocorrencia = nr_etapas_w,
				     hr_prim_horario = hr_prim_horario_w
			 where nr_sequencia = nr_sequencia_p;
		end if;
    end;

  begin
    -- Dieta Oral
    if (ie_tipo_dieta_w = 'O') then
      Carregar_inf_d_oral;
    -- Suplemento Oral
    elsif (ie_tipo_dieta_w = 'S') then
      Carregar_inf_d_suplementar;
    -- Nutricao Enteral
    elsif (ie_tipo_dieta_w = 'E') then
      Carregar_inf_d_enteral;
    -- Leites e formulas infantis
    elsif (ie_tipo_dieta_w = 'L') then
      Carregar_inf_d_leites;
    else
        return;
    end if;

    if (coalesce(nr_ocorrencia_w,0) = 0) and (ie_tipo_dieta_w <> 'E') then
      nr_ocorrencia_w := obter_ocorrencia_intervalo(cd_intervalo_w, 24, '0');
    end if;

    if (ie_tipo_dieta_w = 'E') then
      Calcular_tempo_aplic_sne;
    end if;
  end;

  procedure Localizar_ultimo_item is
  begin
    nr_prescricao_orig_w  := null;
    nr_sequencia_orig_w    := null;

    if (ie_calcula_horarios_w) and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
      -- Localizar ultima prescricao
      if (ie_tipo_dieta_w = 'O') then
        select  max(a.nr_prescricao)
        into STRICT  nr_prescricao_orig_w
        from  prescr_medica a
        where  a.nr_atendimento = nr_atendimento_p
        and    a.dt_prescricao > dt_inicio_base_w - 10
        and    exists (  SELECT  1
                from  prescr_dieta b
                where  b.nr_prescricao = a.nr_prescricao
                and    b.nr_seq_dieta_cpoe = nr_sequencia_p );
      elsif (ie_tipo_dieta_w = 'L') then
        select  max(a.nr_prescricao)
        into STRICT  nr_prescricao_orig_w
        from  prescr_medica a
        where  a.nr_atendimento = nr_atendimento_p
        and    a.dt_prescricao > dt_inicio_base_w - 10
        and    exists (  SELECT  1
                from  prescr_leite_deriv b
                where  b.nr_prescricao = a.nr_prescricao
                and    b.nr_seq_dieta_cpoe = nr_sequencia_p );
      elsif (ie_tipo_dieta_w = 'J') then
        select  max(a.nr_prescricao)
        into STRICT  nr_prescricao_orig_w
        from  prescr_medica a
        where  a.nr_atendimento = nr_atendimento_p
        and    a.dt_prescricao > dt_inicio_base_w - 10
        and    exists (  SELECT  1
                from  rep_jejum b
                where  b.nr_prescricao = a.nr_prescricao
                and    b.nr_seq_dieta_cpoe = nr_sequencia_p );
      elsif (ie_tipo_dieta_w in ('E','S')) then
        select  max(a.nr_prescricao)
        into STRICT  nr_prescricao_orig_w
        from  prescr_medica a
        where  a.nr_atendimento = nr_atendimento_p
        and    a.dt_prescricao > dt_inicio_base_w - 10
        and    exists (  SELECT  1
                from  prescr_material b
                where  b.nr_prescricao = a.nr_prescricao
                and    b.nr_seq_dieta_cpoe = nr_sequencia_p );
      end if;

      if (nr_prescricao_orig_w IS NOT NULL AND nr_prescricao_orig_w::text <> '') then
        -- Itens copiados nao devem ser gerados como agora
        ie_urgencia_w  := null;

        -- Localizar ultimo item
        if (ie_tipo_dieta_w = 'O') then
          select  min(b.nr_sequencia)
          into STRICT  nr_sequencia_orig_w
          from  prescr_dieta b
          where  b.nr_prescricao = nr_prescricao_orig_w
          and    b.nr_seq_dieta_cpoe = nr_sequencia_p;
        elsif (ie_tipo_dieta_w = 'L') then
          select  min(b.nr_sequencia)
          into STRICT  nr_sequencia_orig_w
          from  prescr_leite_deriv b
          where  b.nr_prescricao = nr_prescricao_orig_w
          and    b.nr_seq_dieta_cpoe = nr_sequencia_p;
        elsif (ie_tipo_dieta_w = 'J') then
          select  min(b.nr_sequencia)
          into STRICT  nr_sequencia_orig_w
          from  rep_jejum b
          where  b.nr_prescricao = nr_prescricao_orig_w
          and    b.nr_seq_dieta_cpoe = nr_sequencia_p;
        elsif (ie_tipo_dieta_w in ('E','S')) then
          select  min(b.nr_sequencia)
          into STRICT  nr_sequencia_orig_w
          from  prescr_material b
          where  b.nr_prescricao = nr_prescricao_orig_w
          and    b.nr_seq_dieta_cpoe = nr_sequencia_p;
        end if;
      else
        nr_sequencia_orig_w  := null;
      end if;
    end if;
  end;

begin

dt_inicio_base_w    := trunc(dt_inicio_prescr_p,'mi');
nr_horas_prox_geracao_w  := get_qt_hours_after_copy_cpoe(cd_perfil_p, nm_usuario_p, cd_estabelecimento_p);
param_CPOE_24_w := Obter_Param_Usuario(2314, 24, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, param_CPOE_24_w);

open c01;
loop
fetch c01 into
    nr_seq_dieta_w,
    cd_dieta_w,
    qt_parametro_w,
    ds_horarios_w,
    ds_justificativa_w,
    dt_atualizacao_w,
    nm_usuario_w,
    cd_intervalo_w,
    ie_tipo_dieta_w,
    cd_material_w,
    qt_dose_w,
    cd_unidade_medida_dose_w,
    nr_seq_objetivo_w,
    nr_seq_tipo_w,
    ie_duracao_w,
    qt_min_ant_w,
    qt_hora_ant_w,
    qt_min_depois_w,
    qt_hora_depois_w,
    ie_administracao_w,
    ds_observacao_w,
    nr_seq_disp_succao_w,
    nr_seq_via_acesso_w,
    ds_orientacao_w,
    qt_volume_total_w,
    ie_bomba_infusao_w,
    ie_aplic_bolus_w,
    qt_hora_aplicacao_w,
    nr_etapas_w,
    qt_vel_infusao_w,
    ie_leite_materno_w,
    ie_via_aplicacao_w,
    qt_volume_w,
    dt_inicio_orig_w,
    hr_prim_horario_w,
    dt_fim_w,
    dt_evento_w,
    ds_evento_w,
    dt_liberacao_w,
    qt_hora_fase_w,
    qt_tempo_aplicacao_w,
    nr_ocorrencia_w,
    ie_referencia_w,
    ie_continuo_w,
    ie_urgencia_w,
    ie_retrogrado_w,
	hr_inicio_pausa_w,
	ie_regra_disp_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
  begin

  ie_calcula_horarios_w  := false;
  dt_inicio_w    := dt_inicio_orig_w;

  -- Itens ACM e SN nao possuem primeiro horario, definir inicio do item para execucao da geracao.
  if (ie_administracao_w <> 'P') then
    begin
    if (trunc(dt_inicio_w) > trunc(dt_inicio_base_w)) then
      hr_prim_horario_w  := '00:00';
    else
      hr_prim_horario_w    := to_char(dt_inicio_base_w,'hh24:mi');
    end if;
    end;
  end if;

  -- Atualiza a data inicio com dia e horario.
  dt_inicio_w  := to_date(to_char(dt_inicio_w,'dd/mm/yyyy ') || hr_prim_horario_w,'dd/mm/yyyy hh24:mi');

  select  max(1)
  into STRICT  ie_copia_w
  from  prescr_medica
  where  nr_prescricao = nr_prescricao_p
  and   coalesce(nr_prescricoes::text, '') = '';
  -- Atualizar data de inicio com a data atual, para itens que a data de inicio ja tenha sido ultrapassada.

  -- E se for nao for a primeira prescricao de um item retrogrado
  if (dt_inicio_w < dt_inicio_base_w) and
    (((coalesce(ie_copia_w,0) = 1)  and (coalesce(ie_retrogrado_w,'N') <> 'S')) or (coalesce(ie_copia_w,0) = 0)) then
    -- Assumir data da prescricao para o item
    dt_inicio_w  := to_date(to_char(dt_inicio_base_w,'dd/mm/yyyy ') || hr_prim_horario_w, 'dd/mm/yyyy hh24:mi');
    -- Adicionar um dia, caso o inicio do item, nao caia na data de hoje
    begin
      EXEC_W := 'CALL OBTER_DATA_INICIO_CPOE_MD(:1,:2) INTO :RESULT';

      EXECUTE EXEC_W USING IN dt_inicio_w,
                                     IN dt_inicio_base_w,
                                     OUT dt_inicio_w;
    exception
      when others then
        dt_inicio_w := null;
    end;

    ie_calcula_horarios_w  := true;
  end if;

  if (ie_tipo_dieta_w <> 'J')then
    -- Recalcula os horarios do item, caso a data de inicio, nao seja a mesma da tabela de CPOE_DIETA
    if (ie_calcula_horarios_w) then
      Calcular_horarios_item;
    end if;
  end if;

  -- Se a data de inicio do item for superior a data de inicio da prescricao adicionando 1 dia (totalizando 24h),

  --  deve-se programar a geracao de uma prescricao para este.
  if (dt_inicio_w > dt_inicio_base_w + 1 - 1/86400) then
    --- Inicio MD3 utilizar ou criar o objeto obter_dt_prox_geracao_cpoe_md.
    begin
      EXEC_W := 'CALL OBTER_DT_PROX_GERACAO_CPOE_MD(:1,:2) INTO :RESULT';

      EXECUTE EXEC_W USING IN dt_inicio_w,
                                     IN nr_horas_prox_geracao_w,
                                     OUT dt_prox_geracao_w;
    exception
      when others then
        dt_prox_geracao_w := null;
    end;

    update  cpoe_dieta
    set    dt_prox_geracao = dt_prox_geracao_w
    where  nr_sequencia = nr_sequencia_p;

	CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG LOG DT_INICIO_W > DT_INICIO_BASE_W:'
		||'//dt_inicio_w : ' || to_char(dt_inicio_w,'dd/mm/yyyy hh24:mi:ss')
		||' dt_proxima_dose_new : ' || to_char(trunc(dt_inicio_w,'hh24') - (nr_horas_prox_geracao_w/24),'dd/mm/yyyy hh24:mi:ss')
		||' dt_inicio_base_w : ' || to_char(dt_inicio_base_w,'dd/mm/yyyy hh24:mi:ss')
		||' nr_prescricao_p : ' || nr_prescricao_p
		||' nr_seq_dieta_cpoe_w :' || nr_sequencia_p
		||' cd_perfil_p: ' || cd_perfil_p,1,2000),
		nr_atendimento_p, 'N', nr_sequencia_p);
    goto proximo_item;
  end if;

  if (ie_tipo_dieta_w <> 'J')then
    -- Se o inicio do item for apos a data de fim, definida para o mesmo, este item nao deve ser mais copiado.
    if (dt_fim_w IS NOT NULL AND dt_fim_w::text <> '') and (dt_fim_w <= dt_inicio_w) then
		CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG LOG DT_FIM_W <= DT_INICIO_W:'
			||'//dt_inicio_base_w : ' || to_char(dt_inicio_base_w,'dd/mm/yyyy hh24:mi:ss')
			||' dt_inicio_w : ' || to_char(dt_inicio_w,'dd/mm/yyyy hh24:mi:ss')
			||' dt_fim_w : ' || to_char(dt_fim_w,'dd/mm/yyyy hh24:mi:ss')
			||' nr_prescricao_p : ' || nr_prescricao_p
			||' nr_seq_dieta_cpoe_w :' || nr_sequencia_p
			||' cd_perfil_p: ' || cd_perfil_p,1,2000),
			nr_atendimento_p, 'N', nr_sequencia_p);
      goto proximo_item;
    end if;

    -- Localizar ultima prescricao e item principal vinculado ao registro da CPOE
    Localizar_ultimo_item;
  end if;

  -- Retornar a maior data de inicio dos itens.
  if (coalesce(dt_inicio_ret_p::text, '') = '') or (dt_inicio_w > dt_inicio_ret_p) then
    dt_inicio_ret_p  := dt_inicio_w;
  end if;

  nr_seq_rep_w := 0;


  if (cd_intervalo_w IS NOT NULL AND cd_intervalo_w::text <> '' AND ie_urgencia_w IS NOT NULL AND ie_urgencia_w::text <> '') then
	select	max(ie_operacao)
	into STRICT	ie_operacao_w
	from	intervalo_prescricao
	where	cd_intervalo = cd_intervalo_w;

	if (coalesce(ie_operacao_w, 'XX') = 'V') then
		ie_urgencia_w := null;
	end if;
  end if;

  if (ie_tipo_dieta_w = 'J')then
    begin
    select  max(b.dt_fim)
    into STRICT  dt_fim_anterior_w
    from  prescr_medica a,
        rep_jejum b,
        cpoe_dieta c
    where  c.nr_sequencia = b.nr_seq_dieta_cpoe
    and   a.nr_prescricao = b.nr_prescricao
    and   a.nr_atendimento = nr_atendimento_p
    and   b.nr_seq_dieta_cpoe = nr_seq_dieta_w;

    if (dt_fim_anterior_w IS NOT NULL AND dt_fim_anterior_w::text <> '') then
      dt_inicio_w := dt_fim_anterior_w +1/24/60/60;
    end if;

    -- Se o inicio do item for apos a data de fim, definida para o mesmo, este item nao deve ser mais copiado.
    begin
      EXEC_W := 'CALL OBTER_SE_COPIA_DIETA_MD(:1,:2) INTO :RESULT';

      EXECUTE EXEC_W USING IN dt_fim_w,
                                     IN dt_inicio_w,
                                     OUT se_copia_dieta_w;
    exception
      when others then
        se_copia_dieta_w := null;
    end;

    if (se_copia_dieta_w = 'S') then
      goto proximo_item;
    end if;

	CALL cpoe_insert_dieta_jejum(  nr_atendimento_p, nr_prescricao_p, nr_seq_dieta_w, nr_seq_tipo_w,
		  hr_prim_horario_w, ie_duracao_w, dt_inicio_w, qt_min_ant_w,
		  qt_min_depois_w, qt_hora_ant_w, qt_hora_depois_w, nr_seq_objetivo_w,
		  dt_evento_w, dt_fim_w, cd_perfil_p, nm_usuario_p,
		  dt_atualizacao_w, ds_evento_w, ds_observacao_w );


    --Gerar Log  Geracao REP
    select  coalesce(max(nr_sequencia),0)
    into STRICT  nr_seq_rep_w
    from  rep_jejum
    where  nr_seq_dieta_cpoe = nr_seq_dieta_w
    and   nr_prescricao = nr_prescricao_p;

    if (nr_seq_rep_w = 0) then
		CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG LOG JEJUM SEM PRESCR:'
			||' nr_atendimento_p: ' || nr_atendimento_p
			||' nr_prescricao_p : ' || nr_prescricao_p
			||' nr_seq_dieta_w : ' || nr_seq_dieta_w
			||' nr_seq_tipo_w : ' || nr_seq_tipo_w
			||' hr_prim_horario_w :'|| hr_prim_horario_w
			||' ie_duracao_w : '|| ie_duracao_w
			||' dt_inicio_w : '|| dt_inicio_w
			||' qt_min_ant_w : '|| qt_min_ant_w
			||' qt_min_depois_w : '|| qt_min_depois_w
			||' qt_hora_ant_w : '|| qt_hora_ant_w
			||' qt_hora_depois_w : '|| qt_hora_depois_w
			||' nr_seq_objetivo_w : '|| nr_seq_objetivo_w
			||' dt_evento_w :' || to_char(dt_evento_w, 'dd/mm/yyyy hh24:mi:ss')
			||' dt_fim_w : '|| to_char(dt_fim_w,'dd/mm/yyyy hh24:mi:ss')
			||' cd_perfil_p : '|| cd_perfil_p
			||' nm_usuario_p : '|| nm_usuario_p
			||' dt_atualizacao_w : '|| to_char(dt_atualizacao_w,'dd/mm/yyyy hh24:mi:ss')
			||' ds_evento_w : ' || ds_evento_w
			||' ds_observacao_w : '|| ds_observacao_w
			||' Sequencia CPOE :'|| nr_seq_dieta_w,1,2000),
			nr_atendimento_p, 'N', nr_sequencia_p);
    end if;
    end;
  else
    if (qt_volume_w IS NOT NULL AND qt_volume_w::text <> '') then
      qt_solucao_w  := qt_volume_w;
    elsif (cd_material_w IS NOT NULL AND cd_material_w::text <> '') and (coalesce(qt_solucao_w::text, '') = '') then
      qt_solucao_w  := obter_conversao_ml( cd_material_w, qt_dose_w, cd_unidade_medida_dose_w );
    end if;

    ie_se_necessario_w  := 'N';
    ie_acm_w      := 'N';

    if (ie_administracao_w not in ('P')) then
      --Necessario gerar primeiro horario quando o item e de um intervalo ACM/SN caso contrario nao gera prescr_mat_hor.
		if (coalesce(ie_copia_w,0) = 1) then
			 hr_prim_horario_w := to_char(trunc(clock_timestamp() + interval '1 days'/24,'hh24'),'hh24:mi');
		else
			if (trunc(dt_inicio_orig_w) > trunc(dt_inicio_base_w)) then
			  hr_prim_horario_w  := '00:00';
			else
			  hr_prim_horario_w    := to_char(dt_inicio_base_w,'hh24:mi');
			end if;
		end if;

      if (ie_administracao_w = 'N') then
        ie_se_necessario_w  := 'S';
        ie_acm_w      := 'N';
        --hr_prim_horario_w  := null;
        ds_horarios_w    := 'SN';
        ie_urgencia_w    := null;
      elsif (ie_administracao_w = 'C') then
        ie_se_necessario_w  := 'N';
        ie_acm_w      := 'S';
        --hr_prim_horario_w  := null;
        ds_horarios_w    := 'ACM';
        ie_urgencia_w    := null;
      end if;

    end if;

	begin
		/* Com o parametro 24 ativo a function CPOE_Calcula_horarios_enteral ja se encarrega de gerar os horarios ate o dt_fim */

		if ((coalesce(ie_copia_w,0) = 1) and (dt_fim_w IS NOT NULL AND dt_fim_w::text <> '') and ((ie_tipo_dieta_w = 'E' AND param_CPOE_24_w = 'N') or (ie_tipo_dieta_w <> 'E')) and (ie_tipo_dieta_w not in ('J', 'P', 'I'))) then
			/* Essa function nao retorna com "Das ... as" */

			ds_horarios_w := cpoe_recalcula_horarios_copia(ds_horarios_w, dt_inicio_w, dt_fim_w, ie_acm_w, ie_se_necessario_w, cd_intervalo_w);
			nr_ocorrencia_w := obter_ocorrencias_horarios_rep(ds_horarios_w);
		end if;
	exception when others then
		CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG EXCEPTION CPOE_RECALCULA_HORARIOS_COPIA:'|| substr(to_char(sqlerrm),1,2000)
			|| '-nr_sequencia_p: ' || nr_sequencia_p
			|| '-nr_prescricao_p: ' || nr_prescricao_p
			|| '-nr_atendimento_p: ' || nr_atendimento_p
			|| '-cd_estabelecimento_p'||cd_estabelecimento_p
			|| '-cd_perfil_p: ' || cd_perfil_p
			|| '-nm_usuario_p: ' || nm_usuario_p
			|| '-ie_origem_inf_p: ' || ie_origem_inf_p
			|| '-dt_inicio_prescr_p: ' || to_char(dt_inicio_prescr_p,'dd/mm/yyyy hh24:mi:ss')
			|| '-dt_inicio_ret_p: ' || to_char(dt_inicio_ret_p,'dd/mm/yyyy hh24:mi:ss')
			|| '-ds_horarios_w: ' || ds_horarios_w
			|| '-dt_fim_w: ' || to_char(dt_fim_w,'dd/mm/yyyy hh24:mi:ss')
			|| '-ie_acm_w: ' || ie_acm_w
			|| '-ie_se_necessario_w: ' || ie_se_necessario_w
			|| '-cd_intervalo_w: ' || cd_intervalo_w
			, 1, 2000),
			nr_atendimento_p, 'N', nr_sequencia_p);
	end;

    -- Caso realmente o numero de ocorrencias seja 0
    if (coalesce(nr_ocorrencia_w,0) = 0) then
      /* Para a dieta enteral chama a rotina oficial senao a ocorrencia fica fracionada */

      if (ie_tipo_dieta_w = 'E')then
        Calcular_horarios_item;
      else
        nr_ocorrencia_w  := obter_ocorrencia_intervalo(cd_intervalo_w,24,'O');
      end if;

      if (coalesce(nr_ocorrencia_w,0) = 0) then
        nr_ocorrencia_w  := 1;
      end if;
    end if;

    case ie_tipo_dieta_w
      when 'O' then
        begin
        ds_justificativa_w := substr(ds_justificativa_w || chr(13) || cpoe_obter_justificativa_item(nr_sequencia_p, cd_dieta_w,'N'),1,2000);

        CALL cpoe_insert_dieta_oral(  nr_atendimento_p, nr_prescricao_p, nr_seq_dieta_w, cd_dieta_w,
                    hr_prim_horario_w, cd_intervalo_w, qt_dose_w, ds_horarios_w,
                    cd_perfil_p, nm_usuario_p, dt_atualizacao_w, ds_observacao_w,
                    ds_justificativa_w, ie_urgencia_w );


        --Gerar Log  Geracao REP
        select  coalesce(max(nr_sequencia),0)
        into STRICT  nr_seq_rep_w
        from  prescr_dieta
        where  nr_seq_dieta_cpoe = nr_seq_dieta_w
        and   nr_prescricao = nr_prescricao_p;

        if (nr_seq_rep_w = 0) then
			CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG LOG DIETA ORAL SEM PRESCR:'
				||' nr_atendimento_p: '        || nr_atendimento_p
				||' nr_prescricao_p : '     || nr_prescricao_p
				||' nr_seq_dieta_w : '       || nr_seq_dieta_w
				||' cd_dieta_w : '         || cd_dieta_w
				||' hr_prim_horario_w :'    || hr_prim_horario_w
				||' cd_intervalo_w : '     || cd_intervalo_w
				||' qt_parametro_w : '      || qt_parametro_w
				||' ds_horarios_w : '      || ds_horarios_w
				||' cd_perfil_p : '          || cd_perfil_p
				||' nm_usuario_p : '          || nm_usuario_p
				||' dt_atualizacao_w : '      || to_char(dt_atualizacao_w,'dd/mm/yyyy hh24:mi:ss')
				||' ds_observacao_w : '       || ds_observacao_w
				||' ds_justificativa_w : '    || ds_justificativa_w
				||' Sequencia CPOE :'   || nr_seq_dieta_w,1,2000),
				nr_atendimento_p, 'N', nr_sequencia_p);
          end if;

        end;
      when 'E' then
        begin

        ds_justificativa_w := cpoe_obter_justificativa_item(nr_sequencia_p, cd_material_w,'N');

        nr_ocorrencia_w    := coalesce(nr_etapas_w, nr_ocorrencia_w);

        CALL cpoe_insert_dieta_enteral(  nr_prescricao_p, nr_seq_dieta_w, cd_material_w, qt_dose_w,
                      cd_unidade_medida_dose_w, ie_via_aplicacao_w, cd_intervalo_w, hr_prim_horario_w,
                      ds_horarios_w, ie_se_necessario_w, ie_acm_w, nr_ocorrencia_w,
                      ds_observacao_w, ie_bomba_infusao_w, ie_aplic_bolus_w, nr_seq_via_acesso_w,
                      qt_vel_infusao_w, qt_hora_fase_w, ds_justificativa_w, cd_estabelecimento_p,
                      cd_perfil_p, nm_usuario_p, ie_origem_inf_p, ie_urgencia_w, ie_regra_disp_w);

        --Gerar Log  Geracao REP
        select  coalesce(max(nr_sequencia),0)
        into STRICT  nr_seq_rep_w
        from  prescr_material
        where  nr_seq_dieta_cpoe = nr_seq_dieta_w
        and   nr_prescricao = nr_prescricao_p;


        if (nr_seq_rep_w = 0) then

			CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG LOG ENTERAL SEM PRESCR:'
				||' nr_prescricao_p : '          || nr_prescricao_p
				||' nr_seq_dieta_w : '         || nr_seq_dieta_w
				||' cd_material_w : '        || cd_material_w
				||' qt_dose_w : '          || qt_dose_w
				||' cd_unidade_medida_dose_w : '   || cd_unidade_medida_dose_w
				||' ie_via_aplicacao_w : '      || ie_via_aplicacao_w
				||' cd_intervalo_w : '         || cd_intervalo_w
				||' hr_prim_horario_w : '      || hr_prim_horario_w
				||' ds_horarios_w : '         || ds_horarios_w
				||' ie_se_necessario_w : '      || ie_se_necessario_w
				||' ie_acm_w : '             || ie_acm_w
				||' nr_ocorrencia_w : '         || nr_ocorrencia_w
				||' ds_observacao_w : '         || ds_observacao_w
				||' ie_bomba_infusao_w : '      || ie_bomba_infusao_w
				||' ie_aplic_bolus_w : '         || ie_aplic_bolus_w
				||' nr_seq_via_acesso_w : '      || nr_seq_via_acesso_w
				||' qt_vel_infusao_w : '         || qt_vel_infusao_w
				||' qt_hora_fase_w : '         || qt_hora_fase_w
				||' ds_justificativa_w : '      || ds_justificativa_w
				||' cd_estabelecimento_p : '      || cd_estabelecimento_p
				||' cd_perfil_p : '           || cd_perfil_p
				||' nm_usuario_p : '           || nm_usuario_p
				||' ie_origem_inf_p : '         || ie_origem_inf_p
				||' ie_urgencia_w :'           || ie_urgencia_w
				||' Sequencia CPOE :'   || nr_seq_dieta_w,1,2000),
				nr_atendimento_p, 'N', nr_sequencia_p);
          end if;


        end;
      when 'S' then
        begin

		CALL cpoe_insert_dieta_suplem(  nr_prescricao_p, nr_seq_dieta_w, cd_material_w, qt_dose_w,
					cd_unidade_medida_dose_w, ie_via_aplicacao_w, cd_intervalo_w, hr_prim_horario_w,
					ds_horarios_w, ie_se_necessario_w, ie_acm_w, nr_ocorrencia_w,
					ds_observacao_w, ie_bomba_infusao_w, ie_aplic_bolus_w, nr_seq_via_acesso_w,
					qt_vel_infusao_w, cd_estabelecimento_p, cd_perfil_p, nm_usuario_p,
					ie_origem_inf_p, ie_urgencia_w, ds_justificativa_w, ie_regra_disp_w);

		--Gerar Log  Geracao REP
		select  coalesce(max(nr_sequencia),0)
		into STRICT  nr_seq_rep_w
		from  prescr_material
		where  nr_seq_dieta_cpoe = nr_seq_dieta_w
		and   nr_prescricao = nr_prescricao_p;

        if (nr_seq_rep_w = 0) then
			CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG LOG SUPLEMENTO SEM PRESCR:'
				||'  nr_prescricao_p : '          || nr_prescricao_p
				||' nr_seq_dieta_w : '         || nr_seq_dieta_w
				||' cd_material_w : '        || cd_material_w
				||' qt_dose_w : '          || qt_dose_w
				||' cd_unidade_medida_dose_w : '   || cd_unidade_medida_dose_w
				||' ie_via_aplicacao_w : '      || ie_via_aplicacao_w
				||' cd_intervalo_w : '         || cd_intervalo_w
				||' hr_prim_horario_w : '      || hr_prim_horario_w
				||' ds_horarios_w : '         || ds_horarios_w
				||' ie_se_necessario_w : '      || ie_se_necessario_w
				||' ie_acm_w : '             || ie_acm_w
				||' nr_ocorrencia_w : '         || nr_ocorrencia_w
				||' ds_observacao_w : '         || ds_observacao_w
				||' ie_bomba_infusao_w : '      || ie_bomba_infusao_w
				||' ie_aplic_bolus_w : '         || ie_aplic_bolus_w
				||' nr_seq_via_acesso_w : '      || nr_seq_via_acesso_w
				||' qt_vel_infusao_w : '         || qt_vel_infusao_w
				||' cd_estabelecimento_p : '      || cd_estabelecimento_p
				||' cd_perfil_p : '           || cd_perfil_p
				||' nm_usuario_p : '           || nm_usuario_p
				||' ie_origem_inf_p : '         || ie_origem_inf_p
				||' Sequencia CPOE :'   || nr_seq_dieta_w,1,2000),
				nr_atendimento_p, 'N', nr_sequencia_p);
          end if;

        end;
      when 'L' then
        begin
        if (ie_leite_materno_w = 'S') then
          CALL Inserir_Leite_materno(nr_prescricao_p, nm_usuario_p, cd_perfil_p, cd_estabelecimento_p, nr_seq_dieta_w);
          --Nao foi colocado log pois esta rotina nao grava sequencia da cpoe na rep. Procedure antiga
        else
          CALL cpoe_insert_leite_derivados(  nr_prescricao_p, nr_seq_dieta_w, cd_unidade_medida_dose_w, ie_via_aplicacao_w,
                          cd_intervalo_w, hr_prim_horario_w, ds_horarios_w, ie_se_necessario_w,
                          nr_ocorrencia_w, ds_observacao_w, qt_vel_infusao_w, ie_leite_materno_w,
                          nr_seq_disp_succao_w, cd_estabelecimento_p, cd_perfil_p, nm_usuario_p,
                          ie_origem_inf_p, ie_urgencia_w );

          --Gerar Log  Geracao REP
          select  coalesce(max(nr_sequencia),0)
          into STRICT  nr_seq_rep_w
          from  prescr_leite_deriv
          where  nr_seq_dieta_cpoe = nr_seq_dieta_w
          and   nr_prescricao = nr_prescricao_p;

          if (nr_seq_rep_w = 0) then
			CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG LOG SUPLEMENTO SEM PRESCR:'
				||'  nr_prescricao_p : '          || nr_prescricao_p
				||' nr_seq_dieta_w : '         || nr_seq_dieta_w
				||' cd_unidade_medida_dose_w : '   || cd_unidade_medida_dose_w
				||' ie_via_aplicacao_w : '      || ie_via_aplicacao_w
				||' cd_intervalo_w : '         || cd_intervalo_w
				||' hr_prim_horario_w : '      || hr_prim_horario_w
				||' ds_horarios_w : '         || ds_horarios_w
				||' ie_se_necessario_w : '      || ie_se_necessario_w
				||' nr_ocorrencia_w : '         || nr_ocorrencia_w
				||' ds_observacao_w : '         || ds_observacao_w
				||' qt_vel_infusao_w : '         || qt_vel_infusao_w
				||' ie_leite_materno_w : '      || ie_leite_materno_w
				||' nr_seq_disp_succao_w : '      || nr_seq_disp_succao_w
				||' cd_estabelecimento_p : '      || cd_estabelecimento_p
				||' cd_perfil_p : '           || cd_perfil_p
				||' nm_usuario_p : '           || nm_usuario_p
				||' ie_origem_inf_p : '         || ie_origem_inf_p
				||' Sequencia CPOE :'   || nr_seq_dieta_w,1,2000),
				nr_atendimento_p, 'N', nr_sequencia_p);
            end if;

        end if;
        end;
      when 'P' then
        begin
        CALL CPOE_Insert_npt_adulta( nr_atendimento_p, nr_prescricao_p, nr_seq_dieta_w, cd_estabelecimento_p, cd_perfil_p, nm_usuario_p, ie_origem_inf_p);

        --Gerar Log  Geracao REP
        select  coalesce(max(nr_sequencia),0)
        into STRICT  nr_seq_rep_w
        from  nut_pac
        where  nr_seq_npt_cpoe = nr_seq_dieta_w
        and   nr_prescricao = nr_prescricao_p;

        if (nr_seq_rep_w = 0) then

			CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG LOG NPT SEM PRESCR:'
				||'  nr_atendimento_p: '|| nr_atendimento_p
				|| 'nr_prescricao_p : '|| nr_prescricao_p
				||' nr_seq_dieta_w : '|| nr_seq_dieta_w
				||' cd_perfil_p : '|| cd_perfil_p
				||' nm_usuario_p : '|| nm_usuario_p
				||' ie_origem_inf_p : '|| ie_origem_inf_p
				||' Sequencia CPOE :'|| nr_seq_dieta_w,1,2000),
					nr_atendimento_p, 'N', nr_sequencia_p);
          end if;
        end;
	  when 'I' then
        begin
        CALL CPOE_Insert_npt_ped( nr_atendimento_p, nr_prescricao_p, nr_seq_dieta_w, cd_estabelecimento_p, cd_perfil_p, nm_usuario_p, ie_origem_inf_p);

        --Gerar Log  Geracao REP
        select  coalesce(max(nr_sequencia),0)
        into STRICT  nr_seq_rep_w
        from  nut_pac
        where  nr_seq_npt_cpoe = nr_seq_dieta_w
        and   nr_prescricao = nr_prescricao_p;

        if (nr_seq_rep_w = 0) then

			CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG LOG NPT PED SEM PRESCR:'
				||'  nr_atendimento_p: '|| nr_atendimento_p
				|| 'nr_prescricao_p : '|| nr_prescricao_p
				||' nr_seq_dieta_w : '|| nr_seq_dieta_w
				||' cd_perfil_p : '|| cd_perfil_p
				||' nm_usuario_p : '|| nm_usuario_p
				||' ie_origem_inf_p : '|| ie_origem_inf_p
				||' Sequencia CPOE :'|| nr_seq_dieta_w,1,2000),
					nr_atendimento_p, 'N', nr_sequencia_p);
          end if;
        end;
      else
        begin
        goto proximo_item;
        end;
    end case;
  end if;

  <<proximo_item>>
  commit;
  end;
end loop;
close c01;

exception when others then
	CALL gravar_log_cpoe(substr('CPOE_INSERT_DIETA_PRESCR_REG EXCEPTION:'|| substr(to_char(sqlerrm),1,2000)
		||'//nr_sequencia_p:'||nr_sequencia_p||'nr_prescricao_p:'||nr_prescricao_p
		||'nr_atendimento_p:'||nr_atendimento_p||'cd_estabelecimento_p'||cd_estabelecimento_p
		||'cd_perfil_p:'||cd_perfil_p||'nm_usuario_p : '||nm_usuario_p||'ie_origem_inf_p:'||ie_origem_inf_p
		||'dt_inicio_prescr_p :'||to_char(dt_inicio_prescr_p,'dd/mm/yyyy hh24:mi:ss')
		||'dt_inicio_ret_p :'||to_char(dt_inicio_ret_p,'dd/mm/yyyy hh24:mi:ss'),1,2000),
		nr_atendimento_p, 'N', nr_sequencia_p);
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_insert_dieta_prescr_reg ( nr_atendimento_p atendimento_paciente.nr_atendimento%type, nr_prescricao_p prescr_medica.nr_prescricao%type, nr_sequencia_p cpoe_dieta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_perfil_p perfil.cd_perfil%type, nm_usuario_p usuario.nm_usuario%type, ie_origem_inf_p prescr_medica.ie_origem_inf%type, dt_inicio_prescr_p timestamp, dt_inicio_ret_p INOUT timestamp) FROM PUBLIC;

