-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE spa_aprovar ( nr_seq_aprovacao_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_seq_spa_w		bigint;
nr_ordem_w		smallint;
nr_ordem_atual_w	smallint;
qt_spa_aprov_w		bigint;
nr_seq_aprovacao_w	bigint;
qt_regra_responsavel_w	bigint;
nr_nivel_w		integer;
nr_nivel_atual_w	integer;
ie_status_w		spa.ie_status%type;
		

BEGIN 
 
update	spa_aprovacao 
set	dt_atualizacao 	= clock_timestamp(), 
	nm_usuario	= nm_usuario_p, 
	dt_aprovacao 	= clock_timestamp(), 
	nm_aprovador_real = nm_usuario_p /*aprovando spa. controla o usuario que esta aprovando*/
 
where	nr_sequencia 	= nr_seq_aprovacao_p;
 
select	max(nr_seq_spa), 
	max(nr_ordem), 
	max(nr_nivel) 
into STRICT	nr_seq_spa_w, 
	nr_ordem_w, 
	nr_nivel_w 
from	spa_aprovacao 
where	nr_sequencia = nr_seq_aprovacao_p;
 
select	count(*) 
into STRICT	qt_spa_aprov_w 
from	spa_aprovacao 
where	nr_sequencia <> nr_seq_aprovacao_p 
and	nr_seq_spa = nr_seq_spa_w 
and	coalesce(dt_aprovacao::text, '') = '' 
and	coalesce(dt_cancelamento::text, '') = '';
 
select 	ie_status 
into STRICT	ie_status_w 
from	spa 
where 	nr_sequencia = nr_seq_spa_w;
	 
if (qt_spa_aprov_w > 0) then 
	 
	update	spa 
	set	ie_status = 3 --em aprovação 
	where	nr_sequencia = nr_seq_spa_w;
		 
	CALL spa_gerar_historico(nr_seq_spa_w,nm_usuario_p,ie_status_w,3,1,'','N');
	 
	select	min(nr_ordem) 
	into STRICT	nr_ordem_atual_w 
	from	spa_aprovacao 
	where	nr_sequencia <> nr_seq_aprovacao_p 
	and	nr_seq_spa = nr_seq_spa_w 
	and	coalesce(dt_aprovacao::text, '') = '' 
	and	coalesce(dt_cancelamento::text, '') = '';
	 
	select	count(*) 
	into STRICT	qt_regra_responsavel_w 
	from	spa_aprovacao 
	where	nr_sequencia <> nr_seq_aprovacao_p 
	and	nr_seq_spa = nr_seq_spa_w 
	and	nr_ordem = nr_ordem_atual_w 
	and	(nr_seq_regra_resp IS NOT NULL AND nr_seq_regra_resp::text <> '') 
	and	coalesce(dt_aprovacao::text, '') = '' 
	and	coalesce(dt_cancelamento::text, '') = '';
	 
	if (qt_regra_responsavel_w > 0) then 
	 
		select	min(nr_nivel) 
		into STRICT	nr_nivel_atual_w 
		from	spa_aprovacao 
		where	nr_sequencia <> nr_seq_aprovacao_p 
		and	nr_seq_spa = nr_seq_spa_w 
		and	nr_ordem = nr_ordem_atual_w 
		and	(nr_seq_regra_resp IS NOT NULL AND nr_seq_regra_resp::text <> '') 
		and	coalesce(dt_aprovacao::text, '') = '' 
		and	coalesce(dt_cancelamento::text, '') = '';
		 
		if (coalesce(nr_nivel_w,0) <> coalesce(nr_nivel_atual_w,0)) then 
		 
			update	spa_aprovacao 
			set	dt_atualizacao = clock_timestamp(), 
				nm_usuario = nm_usuario_p, 
				dt_lib_aprov = clock_timestamp() 
			where	nr_sequencia <> nr_seq_aprovacao_p 
			and	nr_seq_spa = nr_seq_spa_w 
			and	nr_ordem = nr_ordem_atual_w 
			and	nr_nivel = nr_nivel_atual_w 
			and	coalesce(dt_aprovacao::text, '') = '' 
			and	coalesce(dt_cancelamento::text, '') = '';
		 
		end if;		
		 
	end if;
	 
	if (nr_ordem_w <> nr_ordem_atual_w) then 
	 
		update	spa_aprovacao 
		set	dt_atualizacao = clock_timestamp(), 
			nm_usuario = nm_usuario_p, 
			dt_lib_aprov = clock_timestamp() 
		where	nr_seq_spa = nr_seq_spa_w 
		and	nr_ordem = nr_ordem_atual_w 
		and	coalesce(nr_seq_regra_resp::text, '') = '';
	 
	end if;
	CALL gerar_spa_hist_email('P',nr_seq_spa_w,nm_usuario_p);
else		 
	update	spa 
	set	ie_status = 4 
	where	nr_sequencia = nr_seq_spa_w;
	 
	CALL gerar_spa_hist_email('A',nr_seq_spa_w,nm_usuario_p);
		 
	CALL spa_gerar_historico(nr_seq_spa_w,nm_usuario_p,ie_status_w,4,1,'','N');
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE spa_aprovar ( nr_seq_aprovacao_p bigint, nm_usuario_p text) FROM PUBLIC;

