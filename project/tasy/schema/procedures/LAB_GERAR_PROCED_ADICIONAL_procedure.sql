-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE lab_gerar_proced_adicional ( nr_prescricao_p bigint, cd_exame_p text, nr_seq_material_p bigint, cd_setor_atendimento_p bigint, ie_status_atend_p bigint, cd_setor_entrega_p bigint, cd_setor_coleta_p bigint, cd_medico_solic_p text, nm_usuario_p text, qt_procedimento_p bigint, dt_coleta_p timestamp, cd_perfil_p integer, cd_funcao_p integer, nr_seq_motivo_inclusao_p bigint, ie_urgencia_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


nr_sequencia_w			            bigint;
exame_alvaro_w			            bigint;
cd_intervalo_w			            varchar(7);
dt_prev_execucao_w		          timestamp;
nr_seq_exame_w			            bigint;
cd_material_exame_w		          varchar(20);
dt_prescricao_w			            timestamp;
nr_atendimento_w		            bigint;
cd_convenio_w			              integer;
cd_categoria_w			            varchar(10);
ie_tipo_atendimento_w		        smallint;
cd_estab_w			                smallint;
ie_tipo_convenio_w		          smallint;
cd_setor_atend_w		            integer;
cd_setor_entrega_ww		          integer;
cd_setor_atend_ww		            varchar(255);
cd_procedimento_w		            bigint;
ie_origem_proced_w		          bigint;
ds_erro_w			                  varchar(255);
cd_setor_coleta_w		            varchar(255);
cd_setor_entrega_w		          varchar(255);
qt_dia_entrega_w		            smallint;
ie_emite_mapa_w			            varchar(1);
ie_data_resultado_w		          varchar(1);
ds_hora_fixa_w			            varchar(2);
dt_coleta_w			                timestamp;
ie_amostra_w			              varchar(1);
nr_seq_lab_w			              varchar(20);
nr_seq_grupo_imp_w		          bigint;
ie_permite_gerar_definitivo_w	  varchar(15);
qt_conta_prov_w			            bigint;
qt_conta_def_w			            bigint;
ie_status_conta_w		            smallint;
ie_conta_w			                integer;
ie_recoleta_w			              varchar(1);
qt_min_entrega_w		            double precision;
nr_seq_proc_interno_w		        bigint;
cd_plano_convenio_w		          varchar(10);
ie_regra_plano_w		            smallint;
nr_seq_regra_plano_w		        bigint;
ie_nova_autorizacao_w		        varchar(1);
ie_consiste_autorizacao_w	      varchar(1)	:= 'N';
ie_erro_autorizacao_w		        varchar(255);
ie_gerou_autorizacao_w		      varchar(1);
ie_dia_semana_final_w 		      bigint;
qt_min_atraso_w		 	            bigint;
dt_resultado_w			            timestamp;
ie_dia_semana_upd_w		          smallint;
ie_atualiza_dt_entrega_w	      varchar(1);
permiteExameRepetido_w		      varchar(1);
qtExisteExame_w			            bigint;
nm_exame_w			                varchar(255);
cd_estab_prescr_w	              smallint;
ie_setor_entrega_w	            varchar(1) := 'N';
nr_seq_proc_interno_aux_w	      bigint;
ie_gerar_sequencia_w		        varchar(1);
ie_gera_amostra_coleta_w 	      varchar(1);
ie_origem_proced_bloq_w			    bigint;
ie_executa_proced_w 	          varchar(1) := 'N';
nr_seq_ficha_lote_w		          bigint;
nr_seq_lote_ficha_exam_w	      bigint;
ie_manter_setor_origem_w	      varchar(1);
cd_setor_atend_original_w	      varchar(255);
nr_seq_classificacao_w		      atendimento_paciente.nr_seq_classificacao%type;
ie_medico_executor_out_w		    varchar(2000);
cd_cgc_out_w					          varchar(2000);
cd_medico_executor_out_w	      varchar(2000);
cd_pessoa_fisica_out_w          varchar(2000);
cd_medico_exec_w			          prescr_procedimento.cd_medico_exec%type;
cd_medico_resp_w			          atendimento_paciente.cd_medico_resp%type;
ie_forma_atual_dt_result_w	    exame_lab_regra_setor.ie_atul_data_result%type;
nr_controle_int_lab_w           bigint;
ds_observacao_prescr_w          varchar(2000);


BEGIN
  SELECT coalesce(MAX(nr_seq_exame),NULL), SUBSTR(MAX(nm_exame),1,255)
    INTO STRICT nr_seq_exame_w, nm_exame_w
    FROM exame_laboratorio
   WHERE upper(cd_exame)	= upper(cd_exame_p);

  select coalesce(max(NR_SEQ_FICHA_LOTE),0)
    into STRICT nr_seq_ficha_lote_w
    from prescr_medica
   where nr_prescricao = nr_prescricao_p;

  IF (nr_seq_exame_w > 0) THEN
    permiteExameRepetido_w	 := coalesce(Obter_Valor_Param_Usuario(722,214,cd_perfil_p,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento),'S');
    ie_origem_proced_bloq_w  := Obter_Valor_Param_Usuario(722,324,cd_perfil_p,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
    ie_manter_setor_origem_w := coalesce(Obter_Valor_Param_Usuario(722,342,cd_perfil_p,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento),'N');	

    IF (permiteExameRepetido_w = 'N') THEN
      SELECT COUNT(*)
        INTO STRICT qtExisteExame_w
        FROM prescr_procedimento a
       WHERE a.nr_prescricao = nr_prescricao_p AND	
             a.nr_seq_exame = nr_seq_exame_w;
    END IF;

    IF (qtExisteExame_w > 0) THEN
      ds_retorno_p := SUBSTR(' - '||nm_exame_w,1,255);
    ELSE
      SELECT MAX(cd_material_exame)
        INTO STRICT cd_material_exame_w
  		  FROM material_exame_lab
    	 WHERE nr_sequencia = nr_seq_material_p;

      SELECT coalesce(MAX(nr_sequencia),0) + 1
    		INTO STRICT nr_sequencia_w
    		FROM prescr_procedimento
    	 WHERE nr_prescricao = nr_prescricao_p;

      SELECT coalesce(MAX(b.dt_prev_execucao),MAX(a.dt_prescricao))
		    INTO STRICT dt_prev_execucao_w
        FROM prescr_procedimento b, prescr_medica a
       WHERE a.nr_prescricao = nr_prescricao_p AND	
             a.nr_prescricao = b.nr_prescricao AND (b.nr_seq_exame	= nr_seq_exame_w or
                b.cd_material_exame = cd_material_exame_w);

      SELECT MAX(nr_seq_proc_interno)
		    INTO STRICT nr_seq_proc_interno_w
		    FROM prescr_procedimento b, prescr_medica a
		   WHERE a.nr_prescricao = nr_prescricao_p AND	
             a.nr_prescricao = b.nr_prescricao AND	
             b.nr_seq_exame	= nr_seq_exame_w;

		  SELECT coalesce(MAX(nr_atendimento), 0), coalesce(MAX(dt_prescricao), clock_timestamp()),
             coalesce(MAX(cd_setor_entrega),0), coalesce(MAX(cd_estabelecimento),1)
		    INTO STRICT nr_atendimento_w, dt_prescricao_w,
             cd_setor_entrega_ww, cd_estab_prescr_w
        FROM prescr_medica
       WHERE nr_prescricao = nr_prescricao_p;

      ie_setor_entrega_w := Obter_Param_Usuario(722, 227, cd_perfil_p, nm_usuario_p, cd_estab_prescr_w, ie_setor_entrega_w);

      IF (coalesce(nr_atendimento_w, 0) > 0) THEN
			BEGIN
        SELECT a.ie_tipo_convenio,
               a.ie_tipo_atendimento,
               b.cd_convenio,
               b.cd_categoria,
               a.cd_estabelecimento,
               b.cd_plano_convenio,
               a.NR_SEQ_CLASSIFICACAO,
               a.cd_medico_resp
          INTO STRICT ie_tipo_convenio_w,
               ie_tipo_atendimento_w,
               cd_convenio_w,
               cd_categoria_w,
               cd_estab_w,
               cd_plano_convenio_w,
               nr_seq_classificacao_w,
               cd_medico_resp_w
          FROM atend_categoria_convenio b, atendimento_paciente a
         WHERE a.nr_atendimento	= nr_atendimento_w  AND	
               b.nr_atendimento	= a.nr_atendimento AND	
               b.nr_seq_interno	= OBTER_ATECACO_ATENDIMENTO(A.NR_ATENDIMENTO);
        EXCEPTION
				WHEN no_data_found THEN
          --rai_application_error(-20011,'Faltam informações do convênio na Entrada Única.');
          CALL wheb_mensagem_pck.exibir_mensagem_abort(192526);
        END;
        ie_permite_gerar_definitivo_w := Obter_Param_Usuario(722, 88, cd_perfil_p, nm_usuario_p, cd_estab_w, ie_permite_gerar_definitivo_w);
        ie_consiste_autorizacao_w := Obter_Param_Usuario(722, 164, cd_perfil_p, nm_usuario_p, cd_estab_w, ie_consiste_autorizacao_w);

        IF (ie_permite_gerar_definitivo_w = 'N') THEN
  				SELECT COUNT(*)
            INTO STRICT qt_conta_prov_w
            FROM conta_paciente
        	 WHERE nr_atendimento	= nr_atendimento_w AND
                 ie_status_acerto	= 1;

          SELECT COUNT(*)
            INTO STRICT qt_conta_def_w
            FROM conta_paciente
				   WHERE nr_atendimento	= nr_atendimento_w AND
                 ie_status_acerto	= 2;

          IF (qt_conta_prov_w = 0) AND (qt_conta_def_w > 0) THEN
            --rai_application_error(-20011, 'A conta do atendimento está com status definitivo. O procedimento não pode ser executado!');
            CALL wheb_mensagem_pck.exibir_mensagem_abort(192531);
          END IF;
        END IF;

  			SELECT * FROM obter_exame_lab_convenio(nr_seq_exame_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, cd_estab_w, ie_tipo_convenio_w, nr_seq_proc_interno_w, cd_material_exame_w, cd_plano_convenio_w, cd_setor_atend_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w) INTO STRICT cd_setor_atend_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w;

        cd_setor_atend_w := Obter_setor_Atend_proc_lab(	cd_estab_w, cd_procedimento_w, ie_origem_proced_w, cd_setor_atendimento_p,
                                              					cd_setor_atend_w, nm_usuario_p, nr_seq_exame_w );
      END IF;

      if (coalesce(cd_procedimento_w::text, '') = '') then
        SELECT coalesce(MAX(a.cd_procedimento),0),
               coalesce(MAX(a.ie_origem_proced),0),
               MAX(b.cd_setor_exclusivo),
               coalesce(MAX(a.nr_seq_proc_interno),0)
          INTO STRICT cd_procedimento_w,
               ie_origem_proced_w,
               cd_setor_atend_w,
               nr_seq_proc_interno_w
          FROM procedimento b, exame_laboratorio a
         WHERE a.nr_seq_exame	= nr_seq_exame_w AND
               a.cd_procedimento = b.cd_procedimento AND	
               a.ie_origem_proced	= b.ie_origem_proced;
      end if;

      if (ie_origem_proced_bloq_w IS NOT NULL AND ie_origem_proced_bloq_w::text <> '') and (ie_origem_proced_bloq_w = ie_origem_proced_w) then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(249401);
      end if;

      dt_coleta_w	:= NULL;
      ie_amostra_w	:='N';

      IF (ie_status_atend_p >=20) THEN
  			dt_coleta_w	:= clock_timestamp();
    		ie_amostra_w	:='S';
  		END IF;

    	SELECT MAX(ie_status_conta),
             coalesce(MAX(ie_gerar_sequencia),'P'),
             coalesce(MAX(ie_gera_amostra_coleta),'N')
        INTO STRICT ie_status_conta_w,
             ie_gerar_sequencia_w,
             ie_gera_amostra_coleta_w
        FROM lab_parametro
       WHERE cd_estabelecimento = cd_estab_w;

      IF (coalesce(cd_setor_atend_w::text, '') = '') THEN
  			SELECT * FROM obter_setor_exame_lab( nr_prescricao_p, nr_seq_exame_w, cd_setor_atendimento_p, cd_material_exame_w, dt_coleta_w, 'N', cd_setor_atend_ww, cd_setor_coleta_w, cd_setor_entrega_w, qt_dia_entrega_w, ie_emite_mapa_w, ds_hora_fixa_w, ie_data_resultado_w, qt_min_entrega_w, ie_recoleta_w, 'N', ie_dia_semana_final_w, ie_forma_atual_dt_result_w, qt_min_atraso_w) INTO STRICT cd_setor_atend_ww, cd_setor_coleta_w, cd_setor_entrega_w, qt_dia_entrega_w, ie_emite_mapa_w, ds_hora_fixa_w, ie_data_resultado_w, qt_min_entrega_w, ie_recoleta_w, ie_dia_semana_final_w, ie_forma_atual_dt_result_w, qt_min_atraso_w;

        dt_resultado_w := dt_prescricao_w + qt_dia_entrega_w;

        IF (ie_dia_semana_final_w > 0) THEN
          SELECT pkg_date_utils.get_WeekDay(dt_resultado_w)
            INTO STRICT ie_dia_semana_upd_w
;

          WHILE(ie_dia_semana_upd_w <> ie_dia_semana_final_w) LOOP
            dt_resultado_w := dt_resultado_w + 1;

  					SELECT pkg_date_utils.get_WeekDay(dt_resultado_w)
      				INTO STRICT ie_dia_semana_upd_w
          		;
          END LOOP;
        END IF;

        IF (cd_setor_atend_ww IS NOT NULL AND cd_setor_atend_ww::text <> '') THEN
          SELECT gerar_setor_exame_lab(cd_setor_atend_ww)
            INTO STRICT cd_setor_atend_w
;
  			END IF;
      END IF;

      SELECT MAX(coalesce(lab_obter_grupo_imp_estab(cd_estab_w,a.nr_seq_exame, cd_convenio_w),a.nr_seq_grupo_imp))
        INTO STRICT nr_seq_grupo_imp_w
        FROM exame_laboratorio a
       WHERE a.nr_seq_exame = nr_seq_exame_w;

      SELECT MIN(nr_seq_lab)
        INTO STRICT nr_seq_lab_w
        FROM prescr_procedimento b, exame_laboratorio a
LEFT OUTER JOIN exame_lab_grupo_imp c ON (a.nr_seq_exame = c.nr_seq_exame AND cd_estab_w = c.cd_estabelecimento AND cd_convenio_w = c.cd_convenio)
WHERE a.nr_seq_exame = b.nr_seq_exame    AND b.cd_material_exame = cd_material_exame_w AND coalesce(c.nr_seq_grupo_imp,a.nr_seq_grupo_imp) = nr_seq_grupo_imp_w AND nr_prescricao = nr_prescricao_p;

      IF (coalesce(ie_setor_entrega_w,'N') = 'S') AND (cd_setor_entrega_ww > 0) THEN
        cd_setor_atend_w := cd_setor_entrega_ww;
      END IF;

      if (ie_manter_setor_origem_w = 'S') then
        cd_setor_atend_original_w	:= cd_setor_atendimento_p;
      else
        cd_setor_atend_original_w	:= coalesce(cd_setor_atend_w,cd_setor_atendimento_p);
      end if;
		
      SELECT * FROM consiste_medico_executor(	cd_estab_prescr_w, cd_convenio_w, cd_setor_atendimento_p, cd_procedimento_w, ie_origem_proced_w, ie_tipo_atendimento_w, nr_seq_exame_w, nr_seq_proc_interno_w, ie_medico_executor_out_w, cd_cgc_out_w, cd_medico_executor_out_w, cd_pessoa_fisica_out_w, '',  --OK cd_medico_exec_filtro_p	varchar2,
              									clock_timestamp(), nr_seq_classificacao_w, 'L', null,  --cd_cgc_laboratorio_p	varchar2,
              									null --cd_setor_prescricao_p	number,
) INTO STRICT ie_medico_executor_out_w, cd_cgc_out_w, cd_medico_executor_out_w, cd_pessoa_fisica_out_w;
			
      if (ie_medico_executor_out_w IS NOT NULL AND ie_medico_executor_out_w::text <> '') then
        if (ie_medico_executor_out_w = 'A') then
          cd_medico_exec_w	:= cd_medico_resp_w;
        elsif (ie_medico_executor_out_w = 'F') then				
          cd_medico_exec_w	:= cd_medico_executor_out_w;				
        end if;
      end if;		
		
      if (cd_funcao_p <> 728) then
        ds_observacao_prescr_w := wheb_mensagem_pck.get_texto(302817,'NM_USUARIO='||nm_usuario_p||
                                                                     ';DT_ATUAL='||PKG_DATE_FORMATERS.TO_VARCHAR(clock_timestamp(), 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p));
      else  
        ds_observacao_prescr_w := wheb_mensagem_pck.get_texto(1026316,'NM_USUARIO='||nm_usuario_p||
                                                                      ';DT_ATUAL='||PKG_DATE_FORMATERS.TO_VARCHAR(clock_timestamp(), 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p)||
                                                                      ';DS_FUNCAO='||wheb_mensagem_pck.get_texto(1026317));
      end if;
    
      INSERT INTO prescr_procedimento( nr_prescricao, nr_sequencia, cd_procedimento, qt_procedimento, dt_atualizacao,
                                        nm_usuario, cd_motivo_baixa, ie_origem_proced, cd_intervalo,
                                        ie_urgencia, ie_suspenso, cd_setor_atendimento, dt_prev_execucao,
                                        ie_status_atend, ie_origem_inf, ie_executar_leito, ie_se_necessario,
                                        ie_acm, nr_ocorrencia, ds_observacao, nr_seq_interno, nr_seq_proc_interno,
                                        ie_avisar_result, nr_seq_exame,cd_material_exame, ie_amostra, dt_resultado, nr_seq_lab,
                                        cd_setor_coleta,cd_setor_entrega,cd_medico_solicitante, dt_coleta, nr_seq_motivo_inclusao, cd_medico_exec)
                               VALUES ( nr_prescricao_p, nr_sequencia_w, cd_procedimento_w, qt_procedimento_p, clock_timestamp(),
                                        nm_usuario_p, 0, ie_origem_proced_w, NULL,
                                        ie_urgencia_p, 'N', cd_setor_atend_original_w, coalesce(dt_prev_execucao_w,clock_timestamp()) ,
                                        10, 'L','N','N',
                                        'N',1, ds_observacao_prescr_w, nextval('prescr_procedimento_seq'), NULL, 
                                        'N', nr_seq_exame_w,cd_material_exame_w,ie_amostra_w, dt_resultado_w, nr_seq_lab_w,
                                        cd_setor_coleta_p,cd_setor_entrega_p,cd_medico_solic_p, dt_coleta_p, nr_seq_motivo_inclusao_p, cd_medico_exec_w);

      /*ROTINA DE INSERT DA GESTAO LABORATORIAL DE TRIAGEM NEONATAL*/

      if (nr_seq_ficha_lote_w > 0) then
  			select nextval('lote_ent_sec_ficha_exam_seq')
        	into STRICT nr_seq_lote_ficha_exam_w
;

        insert into lote_ent_sec_ficha_exam( CD_MATERIAL_EXAME,
                                              DT_ATUALIZACAO,
                                              DT_ATUALIZACAO_NREC,
                                              IE_TIPO_COLETA,
                                              NM_USUARIO,
                                              NM_USUARIO_NREC,
                                              NR_SEQ_EXAME,
                                              NR_SEQ_FICHA,
                                              NR_SEQUENCIA )
                                     values ( cd_material_exame_w,
                                              clock_timestamp(),
                                              clock_timestamp(),
                                              '',
                                              nm_usuario_p,
                                              nm_usuario_p,
                                              nr_seq_exame_w,
                                              nr_seq_ficha_lote_w,
                                              nr_seq_lote_ficha_exam_w);

      end if;
      /*FIM DA ROTINA*/

      IF (coalesce(dt_resultado_w::text, '') = '') THEN
        dt_resultado_w := obter_data_resultado_exame(nr_sequencia_w,nr_prescricao_p);

        IF (coalesce(dt_resultado_w::text, '') = '') THEN
  				dt_resultado_w := Obter_Data_Result_Prescr_Lab(nr_prescricao_p,nr_seq_exame_w,nr_sequencia_w);
  			END IF;
	
    		IF (dt_resultado_w IS NOT NULL AND dt_resultado_w::text <> '') THEN
  				UPDATE prescr_procedimento
             SET dt_resultado = dt_resultado_w
           WHERE nr_prescricao = nr_prescricao_p AND
                 nr_sequencia	= nr_sequencia_w;
        END IF;
      END IF;

      ie_atualiza_dt_entrega_w := Obter_Param_Usuario(722, 211, cd_perfil_p, nm_usuario_p, cd_estab_w, ie_atualiza_dt_entrega_w);

      IF (ie_atualiza_dt_entrega_w = 'S') THEN
        CALL alterar_dt_entrega_prescr(nr_prescricao_p, cd_perfil_p, nm_usuario_p);
      elsif (ie_atualiza_dt_entrega_w = 'D') THEN
        CALL lab_alterar_dt_entrega_prescr(nr_prescricao_p, cd_perfil_p, nm_usuario_p);
      END IF;

      UPDATE prescr_procedimento
         SET ie_status_atend = coalesce(ie_status_atend_p,10)
       WHERE nr_prescricao = nr_prescricao_p
         AND nr_sequencia	= nr_sequencia_w;

      CALL Gerar_Prescr_Proc_Seq_Lab(nr_prescricao_p, nm_usuario_p, 'P');
		
      IF ((ie_gerar_sequencia_w <> 'C') OR (ie_gera_amostra_coleta_w <> 'S')) OR
         ((ie_gerar_sequencia_w = 'C') AND (ie_gera_amostra_coleta_w = 'S') AND (ie_status_atend_p >= 20))  THEN
        CALL gerar_prescr_proc_mat_item(nr_prescricao_p, nm_usuario_p, cd_estab_w);
      END IF;

      IF (cd_funcao_p	= 722) AND (ie_consiste_autorizacao_w	= 'S') THEN
        if (coalesce(nr_seq_proc_interno_w::text, '') = '') then
          SELECT MAX(nr_seq_proc_interno)
            INTO STRICT nr_seq_proc_interno_w
            FROM prescr_procedimento b, prescr_medica a
           WHERE a.nr_prescricao = nr_prescricao_p AND
                 a.nr_prescricao = b.nr_prescricao AND
                 b.nr_seq_exame	= nr_seq_exame_w;				
        end if;

        /*OS  341672*/

        CALL gerar_autor_regra(nr_atendimento_w,
                          NULL,
                          NULL,
                          nr_prescricao_p,
                          NULL,
                          nr_sequencia_w,
                          'LP',
                          nm_usuario_p,
                          NULL,
                          nr_seq_proc_interno_w,
                          NULL,
                          NULL,
                          NULL,
                          NULL,
                          '',
                          '',
                          '');

        CALL Atualizar_autoriz_proced(nr_prescricao_p,nr_atendimento_w);
      END IF;

      ie_executa_proced_w := Obter_Param_Usuario(722, 327, cd_perfil_p, nm_usuario_p, cd_estab_w, ie_executa_proced_w);

  		if (coalesce(ie_executa_proced_w,'N') = 'S') then
    		CALL gerar_proc_pac_item_prescr_up(	nr_prescricao_p,
                      									nr_sequencia_w,
                                        nr_atendimento_w,
                  											null,
                                    		nr_seq_proc_interno_w,
                  											cd_procedimento_w,
                                    		ie_origem_proced_w,
                  											qt_procedimento_p,
                                    		cd_setor_atendimento_p,
                                        9,
                  											null,
                                    		nm_usuario_p,
                  											cd_medico_solic_p,
                                    		nr_seq_exame_w,
                  											null,
                                    		null,
                  											null,
                                    		null,
                  											null,
                                    		null,
                  											null,
                                    		null,
                  											null);
      end if;

      CALL Gerar_Exame_Lab_Dependente(	nr_prescricao_p,nr_sequencia_w,6,nr_atendimento_w,nm_usuario_p,null,null,null);

      select coalesce(NR_CONTROLE_INT_LAB,0)
        into STRICT nr_controle_int_lab_w
        from prescr_medica
       where nr_prescricao = nr_prescricao_p;
    
      select count(*)
        into STRICT exame_alvaro_w
        from lab_lote_alvaro_v b, prescr_procedimento pp, lab_exame_equip lee, equipamento_lab c, material_exame_lab d 
       where b.nr_prescricao = nr_prescricao_p and 
             b.nr_sequencia = nr_sequencia_w and 
             (((SELECT coalesce(max(a.ie_utiliza_cod_equip), 'N') 
                  from empresa_integr_dados a 
                 where a.nr_seq_empresa_integr = 12 and 
                       a.ie_situacao = 'A') = 'S' and 
               (b.cd_exame_equip IS NOT NULL AND b.cd_exame_equip::text <> '')) or (select coalesce(max(a.ie_utiliza_cod_equip), 'N') 
                 from empresa_integr_dados a 
                where a.nr_seq_empresa_integr = 12 and 
                      a.ie_situacao = 'A') = 'N') and 
             pp.nr_seq_exame = lee.nr_seq_exame and 
             lee.cd_equipamento = c.cd_equipamento and 
             pp.cd_material_exame = d.cd_material_exame	and 
             pp.nr_prescricao = b.nr_prescricao and 
             pp.nr_sequencia = b.nr_sequencia and (lee.nr_seq_material = d.nr_sequencia or coalesce(lee.nr_seq_material::text, '') = '') and 
             c.ds_sigla = 'ALVARO';

      if ((wheb_usuario_pck.is_evento_ativo(628) = 'S') and (nr_controle_int_lab_w > 0) and (exame_alvaro_w > 0)) then          		
        -- Envio das informações do exame adicionado para a integração do alvaro
        CALL gravar_agend_integracao(628,'cd_estabelecimento_p=' || cd_estab_w || ';nr_prescricao_p=' || nr_prescricao_p || ';nr_sequencia_p=' || nr_sequencia_w || ';');
      end if;

      if (nr_seq_ficha_lote_w > 0) then
        CALL Gera_Exame_Result_Lab(nr_prescricao_p, nr_sequencia_w, 'N', 'N', 'S', nm_usuario_p, 'N', 'S');
      end if;
    END IF;
  END IF;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE lab_gerar_proced_adicional ( nr_prescricao_p bigint, cd_exame_p text, nr_seq_material_p bigint, cd_setor_atendimento_p bigint, ie_status_atend_p bigint, cd_setor_entrega_p bigint, cd_setor_coleta_p bigint, cd_medico_solic_p text, nm_usuario_p text, qt_procedimento_p bigint, dt_coleta_p timestamp, cd_perfil_p integer, cd_funcao_p integer, nr_seq_motivo_inclusao_p bigint, ie_urgencia_p text, ds_retorno_p INOUT text) FROM PUBLIC;

