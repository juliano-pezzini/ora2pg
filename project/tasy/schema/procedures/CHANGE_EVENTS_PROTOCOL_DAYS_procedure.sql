-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE change_events_protocol_days ( NR_SEQUENCIA_P bigint , NR_SEQ_ETAPA_P bigint , NR_DIA_PROTOCOLO_P bigint , NR_DIA_P bigint , IE_DIA_AHEAD_P text , IE_DIA_BACK_P text , NR_SEQ_ORDEM_P bigint ) AS $body$
DECLARE


EVENT_VALUE_W bigint;
INITIAL_VALUE_W  bigint;
FINAL_VALUE_W  bigint;
NEW_STAGE_W bigint := 0;
SUMMARY_STAGE_W bigint;
CHANGED_DAYS_W bigint;

C01 CURSOR FOR
    SELECT C.*
    FROM   PROTOCOLO_INTEGRADO A, 
           PROTOCOLO_INTEGRADO_ETAPA B, 
           PROTOCOLO_INTEGRADO_EVENTO C 
    WHERE  A.NR_SEQUENCIA = B.NR_SEQ_PROTOCOLO_INTEGRADO 
           AND B.NR_SEQUENCIA = C.NR_SEQ_ETAPA 
           AND A.NR_SEQUENCIA = (SELECT NR_SEQ_PROTOCOLO_INTEGRADO 
                                  FROM   PROTOCOLO_INTEGRADO_ETAPA 
                                  WHERE  NR_SEQUENCIA = NR_SEQ_ETAPA_P  LIMIT 1)
           AND (CONCAT(C.NR_DIA_PROTOCOLO,C.NR_SEQ_ORDEM))::numeric  >= (CONCAT(NR_DIA_PROTOCOLO_P,NR_SEQ_ORDEM_P))::numeric;

CURSOR_W C01%ROWTYPE;

C02 CURSOR FOR
    SELECT *
    FROM PROTOCOLO_INTEGRADO_ETAPA 
    WHERE NR_SEQ_PROTOCOLO_INTEGRADO = (SELECT NR_SEQ_PROTOCOLO_INTEGRADO 
                                      FROM   PROTOCOLO_INTEGRADO_ETAPA 
                                      WHERE  NR_SEQUENCIA = NR_SEQ_ETAPA_P  LIMIT 1);

CURSOR_STAGES_W C02%ROWTYPE;


BEGIN

OPEN C01;
	LOOP
    FETCH C01 INTO CURSOR_W;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	
        BEGIN
        OPEN C02;
        LOOP
        FETCH C02 INTO CURSOR_STAGES_W;
        EXIT WHEN NOT FOUND; /* apply on C02 */

        IF IE_DIA_AHEAD_P = 'S' THEN
                CHANGED_DAYS_W := CURSOR_W.NR_DIA_PROTOCOLO + NR_DIA_P;
                EVENT_VALUE_W := (CONCAT(CHANGED_DAYS_W,CURSOR_W.NR_SEQ_ORDEM))::numeric;
        
        ELSIF IE_DIA_BACK_P = 'S' THEN
                CHANGED_DAYS_W := CURSOR_W.NR_DIA_PROTOCOLO - NR_DIA_P;
                EVENT_VALUE_W := (CONCAT(CHANGED_DAYS_W,CURSOR_W.NR_SEQ_ORDEM))::numeric;

        END IF;

        BEGIN
        IF CURSOR_STAGES_W.IE_EVENTO_SUMARIO != 'S' THEN
               INITIAL_VALUE_W := (CONCAT(CURSOR_STAGES_W.NR_DIA_INICIAL,CURSOR_STAGES_W.NR_ORDEM_INICIAL))::numeric;
               FINAL_VALUE_W:= (CONCAT(CURSOR_STAGES_W.NR_DIA_FINAL,CURSOR_STAGES_W.NR_ORDEM_FINAL))::numeric;

               IF (EVENT_VALUE_W >= INITIAL_VALUE_W AND EVENT_VALUE_W <= FINAL_VALUE_W) THEN
                    NEW_STAGE_W := CURSOR_STAGES_W.NR_SEQUENCIA;
                    EXIT;
               END IF;

        ELSE
           SUMMARY_STAGE_W := CURSOR_STAGES_W.NR_SEQUENCIA;
           NEW_STAGE_W := CURSOR_STAGES_W.NR_SEQUENCIA;

        END IF;
        END;
        END LOOP;
        CLOSE C02;

        IF (NEW_STAGE_W = 0) THEN
            NEW_STAGE_W := SUMMARY_STAGE_W;
            UPDATE PROTOCOLO_INTEGRADO_EVENTO
            SET  NR_DIA_PROTOCOLO = CHANGED_DAYS_W,
            NR_SEQ_ETAPA = NEW_STAGE_W
            WHERE  NR_SEQUENCIA = CURSOR_W.NR_SEQUENCIA;
            COMMIT;

        ELSE 
            UPDATE PROTOCOLO_INTEGRADO_EVENTO
            SET  NR_DIA_PROTOCOLO = CHANGED_DAYS_W,
            NR_SEQ_ETAPA = NEW_STAGE_W
            WHERE  NR_SEQUENCIA = CURSOR_W.NR_SEQUENCIA;
            COMMIT;

        END IF;

        END;
    END LOOP;
CLOSE C01;
COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE change_events_protocol_days ( NR_SEQUENCIA_P bigint , NR_SEQ_ETAPA_P bigint , NR_DIA_PROTOCOLO_P bigint , NR_DIA_P bigint , IE_DIA_AHEAD_P text , IE_DIA_BACK_P text , NR_SEQ_ORDEM_P bigint ) FROM PUBLIC;

