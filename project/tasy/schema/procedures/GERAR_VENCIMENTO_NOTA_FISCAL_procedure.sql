-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_vencimento_nota_fiscal ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_condicao_pagamento_w		bigint;
cd_estabelecimento_w		smallint;
dt_emissao_w			timestamp;
dt_entrada_saida_w		timestamp;
qt_vencimentos_w		integer;
ds_vencimentos_w		varchar(2000);
dt_vencimento_w			timestamp;
cd_cgc_emitente_w		varchar(14);
cd_serie_nf_w			nota_fiscal.cd_serie_nf%type;
nr_nota_fiscal_w		varchar(255);
nr_sequencia_nf_w		bigint;
nr_vencimento_w			integer;
vl_vencimento_w			double precision	:= 0;
vl_total_nota_w			double precision;
tx_fracao_parcela_w		double precision;
qt_venc_w			integer;
ie_forma_pagamento_w		smallint;
vl_mercadoria_w			double precision;
vl_base_venc_w			double precision;
vl_total_base_venc_w		double precision;
vl_desconto_w			double precision;
vl_desconto_venc_w		double precision;
vl_desc_financ_w		double precision;
vl_desc_fin_venc_w		double precision;
vl_total_vencimento_w		double precision;
dt_ultimo_vencimento_w		timestamp;
vl_total_nota_ww		double precision;
vl_mercadoria_ww		double precision;
vl_diferenca_w			double precision;
ie_data_base_venc_nota_w	varchar(1);
qt_dias_parcela_w		integer;
dt_vencimento_orig_w		timestamp;
ie_venc_nao_util_w		varchar(1);
vl_liquido_abater_w		double precision;
ie_nf_consignada_w		varchar(1);
ie_data_base_venc_nf_consig_w	varchar(1);
vl_despesas_frete_seguro_w	nota_fiscal_desp_adic.vl_documento%type;
dt_venc_desp_w			nota_fiscal_desp_adic.dt_vencimento%type;
vl_documento_w			nota_fiscal_desp_adic.vl_documento%type;
cd_cnpj_desp_w			nota_fiscal_desp_adic.cd_cgc%type;
ie_origem_w			nota_fiscal_desp_adic.ie_origem%type;

C01 CURSOR FOR
SELECT	tx_fracao_parcela,
	qt_dias_parcela
from	parcela
where	cd_condicao_pagamento = cd_condicao_pagamento_w;

c02 CURSOR FOR
SELECT	trunc(dt_vencimento,'dd') dt_vencimento,
	vl_documento,
	cd_cgc,
	ie_origem
from	nota_fiscal_desp_adic
where	nr_seq_nf = nr_sequencia_p
and	ie_origem in ('S','F');


BEGIN

select	vl_mercadoria
into STRICT	vl_mercadoria_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

/*Maicon - OS 350918 - Tive que colocar essa procedure para atualizar o vl_mercadoria, pois estava sempre vindo zerado na primeira vez (quando troca a condição de pagamento da nota.*/

if (coalesce(vl_mercadoria_w,0) = 0) then
	CALL atualiza_total_nota_fiscal(nr_sequencia_p, nm_usuario_p);
end if;

select	coalesce(sum(a.vl_liquido),0)
into STRICT	vl_liquido_abater_w
from	nota_fiscal_item a,
	natureza_operacao b
where	a.cd_natureza_operacao = b.cd_natureza_operacao
and	a.nr_sequencia = nr_sequencia_p
and	(((b.ie_entrada_saida = 'E') and (coalesce(b.ie_integra_contas_pagar,'S') = 'N')) or
	 ((b.ie_entrada_saida = 'S') and (coalesce(b.ie_integra_contas_receber,'S') = 'N')));

select	cd_estabelecimento,
	cd_condicao_pagamento,
	dt_emissao,
	dt_entrada_saida,
	cd_cgc_emitente,
	cd_serie_nf,
	nr_nota_fiscal,
	nr_sequencia_nf,
	vl_total_nota,
	vl_mercadoria,
	coalesce(vl_descontos,0),
	obter_se_nota_consignada(nr_sequencia)
into STRICT	cd_estabelecimento_w,
	cd_condicao_pagamento_w,
	dt_emissao_w,
	dt_entrada_saida_w,
	cd_cgc_emitente_w,
	cd_serie_nf_w,
	nr_nota_fiscal_w,
	nr_sequencia_nf_w,
	vl_total_nota_w,
	vl_mercadoria_w,
	vl_desconto_w,
	ie_nf_consignada_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

select	coalesce(sum(vl_documento),0)
into STRICT	vl_despesas_frete_seguro_w
from	nota_fiscal_desp_adic
where	nr_seq_nf = nr_sequencia_p
and	ie_origem in ('S','F'); /* Frete e Seguro*/
if (vl_liquido_abater_w > 0) then
	vl_total_nota_w := vl_total_nota_w - vl_liquido_abater_w;
	vl_mercadoria_w	:= vl_mercadoria_w - vl_liquido_abater_w;
end if;

if (vl_despesas_frete_seguro_w > 0) then
	vl_total_nota_w := vl_total_nota_w - vl_despesas_frete_seguro_w;
end if;

select	coalesce(max(ie_data_base_venc_nota),'E'),
	coalesce(max(ie_data_base_venc_nf_consig),'E')
into STRICT	ie_data_base_venc_nota_w,
	ie_data_base_venc_nf_consig_w
from	parametro_compras
where	cd_estabelecimento = cd_estabelecimento_w;

select	count(*)
into STRICT	qt_venc_w
from	nota_fiscal_venc
where	cd_estabelecimento = cd_estabelecimento_w
and	cd_cgc_emitente    = cd_cgc_emitente_w
and	cd_serie_nf        = cd_serie_nf_w
and	nr_nota_fiscal     = nr_nota_fiscal_w
and	nr_sequencia_nf    = nr_sequencia_nf_w;

begin
select	ie_forma_pagamento
into STRICT	ie_forma_pagamento_w
from	condicao_pagamento
where	cd_condicao_pagamento	= cd_condicao_pagamento_w;
exception when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(285118,'NR_SEQ_NF=' || nr_sequencia_p);
end;

select	coalesce(sum(vl_desc_financ),0)
into STRICT	vl_desc_financ_w
from	nota_fiscal_item
where	nr_sequencia	= nr_sequencia_p;

if	(ie_data_base_venc_nota_w = 'N' AND ie_nf_consignada_w = 'N') or
	(ie_nf_consignada_w = 'S' AND ie_data_base_venc_nf_consig_w = 'N') then
	dt_emissao_w := dt_entrada_saida_w;
end if;

if (qt_venc_w = 0) then
	begin

	delete	from nota_fiscal_venc
	where	nr_sequencia		= nr_sequencia_p;

	begin
	if (ie_forma_pagamento_w = 1) then	-- Edgar 19/02/2007, se for a vista
		insert into nota_fiscal_venc(
			nr_sequencia,
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_nota_fiscal,
			nr_sequencia_nf,
			dt_vencimento,
			vl_vencimento,
			dt_atualizacao,
			nm_usuario,
			vl_base_venc,
			vl_desconto,
			vl_desc_financ,
			ie_origem)
		Values (nr_sequencia_p,
			cd_estabelecimento_w,
			cd_cgc_emitente_w,
			cd_serie_nf_w,
			nr_nota_fiscal_w,
			nr_sequencia_nf_w,
			dt_emissao_w,
			vl_total_nota_w,
			clock_timestamp(),
			nm_usuario_p,
			vl_mercadoria_w,
			vl_desconto_w,
			vl_desc_financ_w,
			'N');
	else
		SELECT * FROM Calcular_Vencimento(
			cd_estabelecimento_w, cd_condicao_pagamento_w, dt_emissao_w, qt_vencimentos_w, ds_vencimentos_w) INTO STRICT qt_vencimentos_w, ds_vencimentos_w;

		OPEN C01;
		LOOP
		FETCH C01 INTO
			tx_fracao_parcela_w,
			qt_dias_parcela_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin

			dt_vencimento_w		:= To_Date(substr(ds_vencimentos_w,1,10),'dd/mm/yyyy');
			dt_vencimento_orig_w	:= dt_emissao_w + coalesce(qt_dias_parcela_w,0);
			ds_vencimentos_w	:= substr(ds_vencimentos_w,12, length(ds_vencimentos_w));
			vl_vencimento_w		:= dividir((vl_total_nota_w * tx_fracao_parcela_w),100);
			vl_base_venc_w		:= dividir((vl_mercadoria_w * tx_fracao_parcela_w),100);
			vl_desconto_venc_w	:= dividir((vl_desconto_w * tx_fracao_parcela_w),100);
			vl_desc_fin_venc_w	:= dividir((vl_desc_financ_w * tx_fracao_parcela_w),100);

			if (trunc(dt_vencimento_w,'dd') <> trunc(dt_vencimento_orig_w,'dd')) then
				ie_venc_nao_util_w := 'S';
			else
				ie_venc_nao_util_w := 'N';
			end if;

			insert into nota_fiscal_venc(
				nr_sequencia,
				cd_estabelecimento,
				cd_cgc_emitente,
				cd_serie_nf,
				nr_nota_fiscal,
				nr_sequencia_nf,
				dt_vencimento,
				vl_vencimento,
				dt_atualizacao,
				nm_usuario,
				vl_base_venc,
				vl_desconto,
				vl_desc_financ,
				ie_venc_alt_sistema,
				ie_origem)
			Values (nr_sequencia_p,
				cd_estabelecimento_w,
				cd_cgc_emitente_w,
				cd_serie_nf_w,
				nr_nota_fiscal_w,
				nr_sequencia_nf_w,
				dt_vencimento_w,
				vl_vencimento_w,
				clock_timestamp(),
				nm_usuario_p,
				vl_base_venc_w,
				vl_desconto_venc_w,
				vl_desc_fin_venc_w,
				ie_venc_nao_util_w,
				'N');
			commit;
			end;
		END LOOP;
		close c01;
	end if;
	exception when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(204475);
	end;

	/*Tratamento abaixo para jogar a diferença para o último vencimento*/

	select	coalesce(sum(vl_vencimento),0),
		coalesce(sum(vl_base_venc),0),
		max(dt_vencimento)
	into STRICT	vl_total_vencimento_w,
		vl_total_base_venc_w,
		dt_ultimo_vencimento_w
	from	nota_fiscal_venc
	where	nr_sequencia = nr_sequencia_p;

	select	vl_total_nota,
		vl_mercadoria
	into STRICT	vl_total_nota_ww,
		vl_mercadoria_ww
	from	nota_fiscal
	where	nr_sequencia = nr_sequencia_p;

	if (vl_liquido_abater_w > 0) then
		vl_total_nota_ww := vl_total_nota_ww - vl_liquido_abater_w;
	end if;

	if (vl_despesas_frete_seguro_w > 0) then
		vl_total_nota_ww := vl_total_nota_ww - vl_despesas_frete_seguro_w;
	end if;

	if (vl_total_vencimento_w <> vl_total_nota_ww) then
		vl_diferenca_w := abs(vl_total_vencimento_w - vl_total_nota_ww);

		if (vl_total_vencimento_w < vl_total_nota_ww) then

			update	nota_fiscal_venc
			set	vl_vencimento	= vl_vencimento + vl_diferenca_w
			where	nr_sequencia	= nr_sequencia_p
			and	dt_vencimento	= dt_ultimo_vencimento_w;

		else

			update	nota_fiscal_venc
			set	vl_vencimento	= vl_vencimento - vl_diferenca_w
			where	nr_sequencia	= nr_sequencia_p
			and	dt_vencimento	= dt_ultimo_vencimento_w;

		end if;

		commit;

	end if;

	if (vl_total_base_venc_w <> vl_mercadoria_ww) then
		vl_diferenca_w := abs(vl_total_base_venc_w - vl_mercadoria_ww);

		if (vl_total_base_venc_w < vl_mercadoria_ww) then

			update	nota_fiscal_venc
			set	vl_base_venc	= vl_base_venc + vl_diferenca_w
			where	nr_sequencia	= nr_sequencia_p
			and	dt_vencimento	= dt_ultimo_vencimento_w;

		else

			update	nota_fiscal_venc
			set	vl_base_venc	= vl_base_venc - vl_diferenca_w
			where	nr_sequencia	= nr_sequencia_p
			and	dt_vencimento	= dt_ultimo_vencimento_w;

		end if;

		commit;
	end if;

	open C02;
	loop
	fetch C02 into
		dt_venc_desp_w,
		vl_documento_w,
		cd_cnpj_desp_w,
		ie_origem_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		insert into nota_fiscal_venc(
			nr_sequencia,
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_nota_fiscal,
			nr_sequencia_nf,
			dt_vencimento,
			vl_vencimento,
			dt_atualizacao,
			nm_usuario,
			vl_base_venc,
			vl_desconto,
			vl_desc_financ,
			ie_venc_alt_sistema,
			ie_origem)
		values (	nr_sequencia_p,
			cd_estabelecimento_w,
			cd_cnpj_desp_w,
			cd_serie_nf_w,
			nr_nota_fiscal_w,
			nr_sequencia_nf_w,
			dt_venc_desp_w,
			vl_documento_w,
			clock_timestamp(),
			nm_usuario_p,
			vl_documento_w,
			0,
			0,
			ie_venc_nao_util_w,
			ie_origem_w);

		end;
	end loop;
	close C02;


	end;
end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_vencimento_nota_fiscal ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

