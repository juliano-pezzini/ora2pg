-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE change_type_case_cancel (( nr_atendimento_p atendimento_paciente.nr_atendimento%TYPE, ds_lista_p text, nm_usuario_p text, ds_erro_p OUT text) IS ds_lista_w text) AS $body$
DECLARE

                tam_lista_w bigint;

BEGIN
                SELECT
                length(ds)
                INTO STRICT tam_lista_w
;

                RETURN;
        END;

        FUNCTION get_position(
                                ds     IN   CLOB,
                                item   IN   VARCHAR2
        ) RETURN;
        BEGIN
                SELECT
                position(item in ds)
                INTO STRICT ie_pos_w
;

                RETURN;
        END;

BEGIN

        select max(ahpct.nr_seq_agrup)
        into STRICT nr_grouping_his_w
        from atendimento_hist_paciente athp
                join ATEND_HIST_PAC_CHANGE_TYPE ahpct
                on athp.nr_sequencia = ahpct.NR_SEQ_HISTORICO
        where
                athp.nr_atendimento = nr_atendimento_p
                and athp.nr_seq_tipo_historico = (SELECT max(tihiat.nr_sequencia)
                                                from tipo_historico_atendimento tihiat
                                                where coalesce(tihiat.ie_tipo_alterar_case, 'N') = 'S' and tihiat.ie_situacao = 'A')
                order by athp.dt_atualizacao desc;

        nr_grouping_his_w := coalesce(nr_grouping_his_w, 0) + 1;

        IF ( (ds_lista_p IS NOT NULL AND ds_lista_p::text <> '') AND length(ds_lista_p) > 1 ) THEN
                ds_lista_w := ds_lista_p;
                WHILE(ds_lista_w IS NOT NULL AND ds_lista_w::text <> '') LOOP
                ie_pos_w := get_position(ds_lista_w, ',');
                IF ( ie_pos_w <> 0 ) THEN
                        ds_grupo_w := substr(ds_lista_w, 1,(ie_pos_w - 1));
                        ds_lista_w := substr(ds_lista_w,(ie_pos_w + 1), get_length(ds_lista_w));

                        IF (ds_grupo_w IS NOT NULL AND ds_grupo_w::text <> '') THEN
                        ie_pos_w := get_position(ds_grupo_w, '#');
                        IF ( ie_pos_w <> 0 ) THEN
                                cd_tipo_agenda_w := (substr(ds_grupo_w, 1,(ie_pos_w - 1)))::numeric;

                                ds_grupo_w := substr(ds_grupo_w,(ie_pos_w + 1), get_length(ds_grupo_w));

                                IF ( (cd_tipo_agenda_w IS NOT NULL AND cd_tipo_agenda_w::text <> '') AND cd_tipo_agenda_w = 1 ) THEN
                                CALL cancel_type_case(cd_tipo_agenda_w, ds_grupo_w, nr_atendimento_p, nr_grouping_his_w);
                                ELSIF ( (cd_tipo_agenda_w IS NOT NULL AND cd_tipo_agenda_w::text <> '') AND cd_tipo_agenda_w = 2 ) THEN
                                CALL cancel_type_case(cd_tipo_agenda_w, ds_grupo_w, nr_atendimento_p, nr_grouping_his_w);
                                ELSIF ( (cd_tipo_agenda_w IS NOT NULL AND cd_tipo_agenda_w::text <> '') AND cd_tipo_agenda_w = 3 ) THEN
                                CALL cancel_type_case(cd_tipo_agenda_w, ds_grupo_w, nr_atendimento_p, nr_grouping_his_w);
                                ELSIF ( (cd_tipo_agenda_w IS NOT NULL AND cd_tipo_agenda_w::text <> '') AND cd_tipo_agenda_w = 5 ) THEN
                                CALL cancel_type_case(cd_tipo_agenda_w, ds_grupo_w, nr_atendimento_p, nr_grouping_his_w);
                                ELSIF ( (cd_tipo_agenda_w IS NOT NULL AND cd_tipo_agenda_w::text <> '') AND cd_tipo_agenda_w = 11 ) THEN
                                CALL processa_diagnosticos(cd_tipo_agenda_w, ds_grupo_w, nr_atendimento_p, nr_grouping_his_w);
                                ELSIF ( (cd_tipo_agenda_w IS NOT NULL AND cd_tipo_agenda_w::text <> '') AND cd_tipo_agenda_w = 10 ) THEN
                                CALL cancel_type_case(cd_tipo_agenda_w, ds_grupo_w, nr_atendimento_p, nr_grouping_his_w);
                                END IF;

                        ELSE
                                ds_grupo_w := NULL;
                        END IF;

                        END IF;

                ELSE
                        ds_lista_w := NULL;
                END IF;

                END LOOP;

        END IF;

        BEGIN
                FOR r_c_episode_companion IN c_episode_companion LOOP
                UPDATE episodio_acompanhante eap
                SET
                        eap.nr_atend_paciente  = NULL,
                        eap.nr_seq_ep_paciente  = NULL,
                        eap.dt_atualizacao = clock_timestamp(),
                        eap.nm_usuario = nm_usuario_p
                WHERE
                        eap.nr_sequencia = r_c_episode_companion.nr_sequencia;


                COMMIT;

                CALL insert_atend_hist_paciente(nr_atendimento_p, 12, NULL, NULL, NULL,
                                        r_c_episode_companion.nr_atend_acompanhante, NULL, r_c_episode_companion.nr_sequencia, nr_grouping_his_w, null);

                END LOOP;

        EXCEPTION
                WHEN OTHERS THEN

                ds_erro_w        := sqlerrm(SQLSTATE);

                INSERT INTO log_atendimento(
                        dt_atualizacao,
                        nm_usuario,
                        cd_log,
                        ds_log
                ) VALUES (
                        clock_timestamp(),
                        nm_usuario_p,
                        17,
                        concat(substr('unlinking companion - nr_atend_p:' || nr_atendimento_p, 1, 2000), ' error: ' || ds_erro_w)
                );

                COMMIT;
        END;

        BEGIN
                SELECT
                MAX(ap.cd_pessoa_fisica)
                INTO STRICT cd_pessoa_fisica_w
                FROM
                atendimento_paciente ap
                WHERE
                ap.nr_atendimento = nr_atendimento_p;

                SELECT
                MAX(nr_sequencia)
                INTO STRICT nr_seq_mot_w
                FROM
                motivo_cancel_atend
                WHERE
                coalesce(ie_tipo_alterar_case, 'N') = 'S'
                AND ie_situacao = 'A';

                BEGIN

                        CALL cancelar_atendimento_paciente(nr_atendimento_p, nm_usuario_p, nr_seq_mot_w, cd_pessoa_fisica_w, NULL,
                                                0, 0, 'N', NULL, NULL);
                EXCEPTION
                        WHEN OTHERS THEN
                        ie_pos_w                := get_position(sqlerrm, ':');
                        ds_erro_p               := substr(sqlerrm, (ie_pos_w + 1), get_length(sqlerrm));
                        ds_erro_p               := replace(ds_erro_p, '#@#@', null);
                        ds_erro_p               := trim(both ds_erro_p);

                        ds_erro_w               := sqlerrm(SQLSTATE);

                        INSERT INTO log_atendimento(
                                dt_atualizacao,
                                nm_usuario,
                                cd_log,
                                ds_log
                        ) VALUES (
                                clock_timestamp(),
                                nm_usuario_p,
                                17,
                                concat(substr('1 - cancel encounter - nr_atend_p:' || nr_atendimento_p, 1, 2000),  ' error: ' || ds_erro_w)
                        );

                END;

                COMMIT;

                CALL insert_atend_hist_paciente(nr_atendimento_p, 13, NULL, NULL, NULL, NULL, NULL, NULL, nr_grouping_his_w, NULL);

        EXCEPTION
                WHEN OTHERS THEN

                ds_erro_w               := sqlerrm(SQLSTATE);

                INSERT INTO log_atendimento(
                        dt_atualizacao,
                        nm_usuario,
                        cd_log,
                        ds_log
                ) VALUES (
                        clock_timestamp(),
                        nm_usuario_p,
                        17,
                        concat(substr('2 - cancel encounter - nr_atend_p:' || nr_atendimento_p, 1, 2000),  ' error: ' || ds_erro_w)
                );

                COMMIT;
        END;

        BEGIN
                if Obter_Tipo_Atendimento(nr_atendimento_p) = 1 THEN

                        ds_erro_w := null;
                        ds_erro_w := gerar_estornar_alta(
                                nr_atendimento_p, 'A', 0, 4,  --Medical Discharge
                                clock_timestamp(), nm_usuario_p, ds_erro_w, 0, null, 'generate discharger by change case type option');

                        if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') THEN

                                INSERT INTO log_atendimento(
                                        dt_atualizacao,
                                        nm_usuario,
                                        cd_log,
                                        ds_log
                                ) VALUES (
                                        clock_timestamp(),
                                        nm_usuario_p,
                                        17,
                                        concat(substr('1 - generate discharger - nr_atend_p:' || nr_atendimento_p, 1, 2000),  ' error: ' || ds_erro_w)
                                );

                        end if;

                        COMMIT;

                end if;

        EXCEPTION
                WHEN OTHERS THEN

                ds_erro_w               := sqlerrm(SQLSTATE);

                INSERT INTO log_atendimento(
                        dt_atualizacao,
                        nm_usuario,
                        cd_log,
                        ds_log
                ) VALUES (
                        clock_timestamp(),
                        nm_usuario_p,
                        17,
                        concat(substr('2 - generate discharger - nr_atend_p:' || nr_atendimento_p, 1, 2000),  ' error: ' || ds_erro_w)
                );

                COMMIT;
        END;

        BEGIN
                SELECT MAX(nr_sequencia)
                INTO STRICT tipo_episodio_w
                FROM tipo_episodio
                WHERE ie_tipo = 8
                        and ie_situacao =  'A'
                        and ie_acompanhante_paciente =  'N'
                ORDER BY nr_sequencia ASC;

                SELECT
                nr_seq_episodio
                INTO STRICT nr_episodio_w
                FROM
                atendimento_paciente
                WHERE
                nr_atendimento = nr_atendimento_p;

                UPDATE episodio_paciente
                SET
                nr_seq_tipo_episodio = tipo_episodio_w,
                nm_usuario = nm_usuario_p,
                dt_atualizacao = clock_timestamp()
                WHERE
                nr_sequencia = nr_episodio_w;

                COMMIT;

                CALL insert_atend_hist_paciente(nr_atendimento_p, 14, NULL, NULL, NULL, NULL, NULL, NULL, nr_grouping_his_w, NULL);

        EXCEPTION
                WHEN OTHERS THEN

                ds_erro_w        := sqlerrm(SQLSTATE);

                INSERT INTO log_atendimento(
                        dt_atualizacao,
                        nm_usuario,
                        cd_log,
                        ds_log
                ) VALUES (
                        clock_timestamp(),
                        nm_usuario_p,
                        17,
                        substr('change case type - nr_atend_p:'
                        || nr_atendimento_p
                        || ' tipo_episodio_w:'
                        || tipo_episodio_w
                        || ' nr_episodio_w: '
                        || nr_episodio_w
                        || ' error: '
                        || ds_erro_w, 1, 2000)
                );

                COMMIT;
        END;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE change_type_case_cancel (( nr_atendimento_p atendimento_paciente.nr_atendimento%TYPE, ds_lista_p text, nm_usuario_p text, ds_erro_p OUT text) IS ds_lista_w text) FROM PUBLIC;

