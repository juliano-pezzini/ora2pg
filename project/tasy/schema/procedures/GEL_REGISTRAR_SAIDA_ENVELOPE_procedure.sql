-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gel_registrar_saida_envelope ( nr_seq_envelope_p bigint, ie_acao_p text, nm_usuario_p text) AS $body$
DECLARE


/*
ie_acao_p
-S - Sa√≠da
-E - Entrega
*/
dt_atual_w			timestamp := clock_timestamp();
nr_seq_prescr_w			bigint;
nr_prescricao_w			bigint;
nr_seq_laudo_w			bigint;
nr_seq_result_lab_w		bigint;
ie_etapa_w			varchar(5);
nr_seq_malote_w			bigint;
ie_sem_entrega_w		varchar(1);
ie_atualizar_status_w		varchar(2);

C01 CURSOR FOR
SELECT	nr_seq_laudo,
	nr_seq_result_lab
from	envelope_laudo_item
where	nr_seq_envelope = nr_seq_envelope_p;

C02 CURSOR FOR
SELECT	nr_prescricao,
	nr_seq_prescr
from	envelope_laudo_item
where	nr_seq_envelope = nr_seq_envelope_p
and	(nr_seq_laudo IS NOT NULL AND nr_seq_laudo::text <> '')
and	coalesce(nr_seq_result_lab::text, '') = '';




BEGIN

ie_atualizar_status_w	:=	coalesce(obter_valor_param_usuario(9047, 28, Obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');

select	max(a.nr_sequencia)
into STRICT	nr_seq_malote_w
from	malote_envelope_laudo a,
	malote_envelope_item b
where	a.nr_sequencia = b.nr_seq_malote
and	b.nr_seq_envelope = nr_seq_envelope_p;

if (ie_acao_p = 'S') then
	begin
	update	malote_envelope_item
	set	dt_saida_entrega = dt_atual_w,
		nm_usuario_saida_entrega = nm_usuario_p,
		dt_atualizacao = dt_atual_w,
		nm_usuario = nm_usuario_p
	where	nr_seq_envelope = nr_seq_envelope_p;

	commit;

	update	envelope_laudo
	set	dt_saida_entrega = dt_atual_w,
		nm_usuario_saida_entrega = nm_usuario_p,
		dt_atualizacao = dt_atual_w,
		nm_usuario = nm_usuario_p,
		nr_seq_status_envelope = 30
	where	nr_sequencia = nr_seq_envelope_p;

	update	malote_envelope_laudo
	set	dt_saida_entrega = dt_atual_w,
		nm_usuario	 = nm_usuario_p,
		nm_usuario_saida_entrega = nm_usuario_p,
		nr_seq_status_malote = 20,
		dt_atualizacao   = dt_atual_w
	where	nr_sequencia     = nr_seq_malote_w
	and	coalesce(dt_saida_entrega::text, '') = '';

	ie_etapa_w	:= 'DSE';
	end;
else
	begin
	update	malote_envelope_item
	set	dt_entrega = dt_atual_w,
		nm_usuario_entrega = nm_usuario_p,
		dt_atualizacao = dt_atual_w,
		nm_usuario = nm_usuario_p
	where	nr_seq_envelope = nr_seq_envelope_p;

	commit;

	update	envelope_laudo
	set	dt_entrega = dt_atual_w,
		nm_usuario_entrega = nm_usuario_p,
		dt_atualizacao = dt_atual_w,
		nm_usuario = nm_usuario_p,
		nr_seq_status_envelope = 40
	where	nr_sequencia = nr_seq_envelope_p;

	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_sem_entrega_w
	from	malote_envelope_item a
	where	a.nr_seq_malote = nr_seq_malote_w
	and	a.nr_seq_envelope <> nr_seq_envelope_p
	and	coalesce(a.dt_entrega::text, '') = '';

	if (ie_sem_entrega_w = 'N') then
		update	malote_envelope_laudo
		set	dt_entrega = dt_atual_w,
			nm_usuario_entrega = nm_usuario_p,
			dt_atualizacao = dt_atual_w,
			nm_usuario = nm_usuario_p,
			nr_seq_status_malote = 30
		where	nr_sequencia     = nr_seq_malote_w;
	end if;

	ie_etapa_w	:= 'DEE';
	end;
end if;

open C01;
loop
fetch C01 into
	nr_seq_laudo_w,
	nr_seq_result_lab_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	CALL gel_gravar_historico_envelope(nr_seq_laudo_w, nr_seq_result_lab_w, nr_seq_envelope_p, NULL, ie_etapa_w, nm_usuario_p);
	end;
end loop;
close C01;


if (ie_atualizar_status_w = 'S') then
	begin
	open C02;
	loop
	fetch C02 into
		nr_prescricao_w,
		nr_seq_prescr_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		update 	prescr_procedimento
		set	ie_status_execucao = '60'
		where	nr_prescricao = nr_prescricao_w
		and	nr_sequencia = nr_seq_prescr_w;

		end;
	end loop;
	close C02;
	end;
end if;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gel_registrar_saida_envelope ( nr_seq_envelope_p bigint, ie_acao_p text, nm_usuario_p text) FROM PUBLIC;

