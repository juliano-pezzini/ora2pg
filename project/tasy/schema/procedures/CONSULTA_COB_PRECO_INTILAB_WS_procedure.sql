-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consulta_cob_preco_intilab_ws (cd_convenio_p bigint, cd_plano_convenio_p text, cd_exame_p text, dt_procedimento_p text, cd_setor_atendimento_p bigint, ds_erro_p INOUT text, ie_cobertura_p INOUT text, vl_procedimento_p INOUT bigint) AS $body$
DECLARE

																				
  cd_estabelecimento_w		atendimento_paciente.cd_estabelecimento%type;

  cd_procedimento_w  		procedimento_paciente.cd_procedimento%type;
  nr_seq_proc_interno_w		procedimento_paciente.nr_seq_proc_interno%type;
  ie_origem_proced_w  		procedimento_paciente.ie_origem_proced%type;
  vl_procedimento_w			procedimento_paciente.vl_procedimento%type;
  cd_medico_executor_w		procedimento_paciente.cd_medico_executor%type;

  cd_convenio_w				atend_categoria_convenio.cd_convenio%type;
  cd_categoria_w    		atend_categoria_convenio.cd_categoria%type;
  nr_seq_cobertura_w		atend_categoria_convenio.nr_seq_cobertura%type;

  ie_classificacao_w		procedimento.ie_classificacao%type;
  ie_tipo_convenio_w		convenio.ie_tipo_convenio%type;
  qt_pontos_w				preco_amb.qt_pontuacao%type;

  -- Retorno da consiste plano / regra ajuste
  ds_retorno_w			varchar(2000);
  ie_bloqueia_agenda_w	varchar(10);
  ie_regra_w			varchar(10);
  nr_seq_regra_w		bigint;

  dt_procedimento_w  timestamp;
  dt_procedimento_varchar_w   varchar(40);
  ie_glosa_w		 varchar(5);
  cd_erro_w			 varchar(100);
  ds_erro_w          varchar(2000);

  ie_cobertura_w		varchar(5)	:= '0';

  -- Váriaveis para retornos não utilizados 
  vl_aux_w			double precision;
  ds_aux_w			varchar(255);

  
BEGIN
	
	cd_estabelecimento_w := 1;
	
	 if (coalesce(dt_procedimento_p::text, '') = ''
    or dt_procedimento_p = ' ') then
     begin
        dt_procedimento_w := clock_timestamp();
     end;
     else
        begin
        select substr(dt_procedimento_p,9,2)||'/'||
               substr(dt_procedimento_p,6,2)||'/'||                
               substr(dt_procedimento_p,1,4)||' '||
               substr(dt_procedimento_p,12,2)||':'||
               substr(dt_procedimento_p,15,2) ||':'||
               substr(dt_procedimento_p,18,2)
               into STRICT dt_procedimento_varchar_w
;
        exception
        when others then
             dt_procedimento_w := clock_timestamp();
        end;
    end if;
       
    dt_procedimento_w := coalesce(to_date(dt_procedimento_varchar_w,'dd/MM/yyyy HH24:mi:ss'), dt_procedimento_w);
	

	begin
	  select	nr_seq_proc_interno				
	  into STRICT		nr_seq_proc_interno_w	
	  from		exame_laboratorio
	  where		cd_exame	= cd_exame_p;
	
	  exception
	  when others then        
	  ds_erro_w  := obter_desc_expressao(621266,'');
	  goto final_ds_erro;
	
	end;

	begin
	  select 1,
			 ie_tipo_convenio
	  into STRICT   cd_erro_w,
			 ie_tipo_convenio_w
	  from   convenio
	  where  cd_convenio = cd_convenio_p
	  and	 ie_situacao = 'A';
	
	  exception
	  when others then
	  ds_erro_w  := obter_desc_expressao(871391,'');
	  goto final_ds_erro;
	end;	
	
	if (cd_plano_convenio_p IS NOT NULL AND cd_plano_convenio_p::text <> '') then
	begin
		select	1
		into STRICT	cd_erro_w
		from	convenio_plano
		where	cd_convenio = cd_convenio_p
		and	cd_plano = cd_plano_convenio_p
		and	ie_situacao = 'A';
		exception
			when others then
			ds_erro_w  := 'Plano inexistente / inativo';
		    goto final_ds_erro;
		end;
	end if;
	
	if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
		begin
		SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proc_interno_w, null, cd_convenio_p, cd_categoria_w, cd_plano_convenio_p, null, cd_procedimento_w, ie_origem_proced_w, null, dt_procedimento_w, null, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
		exception
			when others then
			ds_erro_w	:= obter_desc_expressao(738325,'');
			goto final_ds_erro;
		end;
	end if;
	
	-- Obter o valor do procedimento
	if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') then
		
		select	coalesce(ie_classificacao,'0')
		into STRICT	ie_classificacao_w
		from	procedimento
		where	cd_procedimento = cd_procedimento_w
		and	ie_origem_proced = ie_origem_proced_w;
		
		if (ie_classificacao_w in ('2','3')) then		
			SELECT * FROM define_preco_servico(cd_estabelecimento_w, cd_convenio_p, cd_categoria_w, dt_procedimento_w, cd_procedimento_w, cd_setor_atendimento_p, null, 0, null, cd_plano_convenio_p, 0, 0, null, vl_procedimento_w, vl_aux_w, null, 0, 0, nr_seq_proc_interno_w, 0, null, null, nr_seq_cobertura_w, null, null, null, null, null, cd_medico_executor_w) INTO STRICT vl_procedimento_w, vl_aux_w;		
		else	
			SELECT * FROM define_preco_procedimento(cd_estabelecimento_w, cd_convenio_p, cd_categoria_w, dt_procedimento_w, cd_procedimento_w, 0, null, cd_setor_atendimento_p, cd_medico_executor_w, 0, 0, 0, nr_seq_proc_interno_w, null, cd_plano_convenio_p, 0, 0, null, vl_procedimento_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, qt_pontos_w, vl_aux_w, ds_aux_w, vl_aux_w, 0, null, 0, null, null, null, '0', null, null, null, null, nr_seq_cobertura_w, null, null, null, null, ie_origem_proced_w, null, null, null) INTO STRICT vl_procedimento_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, qt_pontos_w, vl_aux_w, ds_aux_w, vl_aux_w;			
		end if;

		-- Verificar a regra de ajuste
		SELECT * FROM obter_regra_ajuste_proc(cd_estabelecimento_w, cd_convenio_p, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, null, dt_procedimento_w, 0, null, cd_setor_atendimento_p, cd_medico_executor_w, 0, 0, 0, nr_seq_proc_interno_w, null, cd_plano_convenio_p, 0, 0, null, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, ie_glosa_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, null, 0, ds_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, null, null, null, null, null, null, null, null, vl_aux_w, nr_seq_cobertura_w, null, null, null, null, null, null, null, null, null) INTO STRICT vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, ie_glosa_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w;

			if (ie_glosa_w = 'Z') then
			vl_procedimento_w	:= 0;
		end if;
	

	
		-- Verificar a regra de plano
		SELECT * FROM consiste_plano_mat_proc(cd_estabelecimento_w, cd_convenio_p, cd_categoria_w, cd_plano_convenio_p, null, cd_procedimento_w, ie_origem_proced_w, null, null, 0, cd_setor_atendimento_p, null, nr_seq_proc_interno_w, ds_retorno_w, ie_bloqueia_agenda_w, ie_regra_w, nr_seq_regra_w) INTO STRICT ds_retorno_w, ie_bloqueia_agenda_w, ie_regra_w, nr_seq_regra_w;
			
		
	end if;
	
	if	((coalesce(ie_regra_w,'4') = '4') or (coalesce(ie_regra_w,'4') = '0')) and (coalesce(ie_glosa_w,'L') = 'L') and (coalesce(vl_procedimento_w,0) > 0) then		
		ie_cobertura_w		:= '1';
	end if;				
	
	<<final_ds_erro>>
	ie_cobertura_p 	:= ie_cobertura_w;
	vl_procedimento_p := vl_procedimento_w;
	ds_erro_p  		:= substr(ds_erro_w,1,255);										
					
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consulta_cob_preco_intilab_ws (cd_convenio_p bigint, cd_plano_convenio_p text, cd_exame_p text, dt_procedimento_p text, cd_setor_atendimento_p bigint, ds_erro_p INOUT text, ie_cobertura_p INOUT text, vl_procedimento_p INOUT bigint) FROM PUBLIC;

