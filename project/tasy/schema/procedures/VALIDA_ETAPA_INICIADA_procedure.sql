-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE valida_etapa_iniciada ( nr_seq_checkup_etapa_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_etapa_w		bigint;
nr_seq_ck_etapa_w 	bigint;
nr_seq_checkup_w 	bigint;
qt_max_paciente_w 	bigint;
qt_paciente_etapa_w 	bigint;
dt_ini_real_w		timestamp;
dt_fim_etapa_w		timestamp;
dt_cancel_etapa_w	timestamp;
nm_paciente_w		varchar(255);
ds_etapa_w		varchar(255);


BEGIN

if (nr_seq_checkup_etapa_p IS NOT NULL AND nr_seq_checkup_etapa_p::text <> '') then
	begin
	/*busca o nr_seq_etapa para verificar se existe alguma etapa iniciada */

	select 	max(a.nr_seq_etapa),
		max(a.nr_seq_checkup)
	into STRICT 	nr_seq_etapa_w,
		nr_seq_ck_etapa_w
	from 	checkup_etapa a
	where 	a.nr_sequencia = nr_seq_checkup_etapa_p;

	select 	coalesce(a.qt_maxima_paciente,0)
	into STRICT	qt_max_paciente_w
	from  	etapa_checkup a
	where 	a.nr_sequencia = nr_seq_etapa_w;

	select 	count(*)
	into STRICT	qt_paciente_etapa_w
	from    checkup_etapa a
	where   a.nr_seq_etapa = nr_seq_etapa_w
	and     (a.dt_inicio_real IS NOT NULL AND a.dt_inicio_real::text <> '')
	and     trunc(a.dt_prevista) between trunc(clock_timestamp()) and fim_dia(clock_timestamp());

	select  max(a.nr_seq_checkup),
		max(a.dt_inicio_real),
		max(a.dt_fim_etapa),
		max(a.dt_cancelamento)
	into STRICT	nr_seq_checkup_w,
		dt_ini_real_w,
		dt_fim_etapa_w,
		dt_cancel_etapa_w
	from    checkup_etapa a
	where   a.nr_seq_etapa = nr_seq_etapa_w
	and     (a.dt_inicio_real IS NOT NULL AND a.dt_inicio_real::text <> '')
	and     trunc(a.dt_prevista) between trunc(clock_timestamp()) and fim_dia(clock_timestamp());

	if ( qt_max_paciente_w > 0 ) and ( qt_paciente_etapa_w >= qt_max_paciente_w ) and (nr_seq_checkup_w IS NOT NULL AND nr_seq_checkup_w::text <> '') and (dt_ini_real_w IS NOT NULL AND dt_ini_real_w::text <> '') and ( coalesce(dt_fim_etapa_w::text, '') = '' ) and ( coalesce(dt_cancel_etapa_w::text, '') = '' ) then
		begin
		select 	max(obter_nome_pf(a.cd_pessoa_fisica))
		into STRICT	nm_paciente_w
		from 	checkup a
		where 	a.nr_sequencia = nr_seq_checkup_w;
		-- Essa etapa esta sendo ocupada pela pelo paciente '|| nm_paciente_w ||'#@#@'
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(264554,'NM_PACIENTE_W=' || NM_PACIENTE_W);
		end;
	end if;
	end;

/* verificar se existe alguma etapa para o paciente em aberto*/

	select  max(a.dt_inicio_real),
		max(a.dt_fim_etapa),
		max(a.dt_cancelamento),
		max(substr(Obter_desc_etapa_checkup(a.nr_seq_etapa),1,255)),
		max(obter_nome_pf(b.cd_pessoa_fisica))
	into STRICT	dt_ini_real_w,
		dt_fim_etapa_w,
		dt_cancel_etapa_w,
		ds_etapa_w,
		nm_paciente_w
	from    checkup_etapa a,
		checkup b
	where   a.nr_seq_checkup = nr_seq_ck_etapa_w
	and	b.nr_sequencia	= a.nr_seq_checkup
	and     (a.dt_inicio_real IS NOT NULL AND a.dt_inicio_real::text <> '')
	and     coalesce(a.dt_fim_etapa::text, '') = '';

	if (dt_ini_real_w IS NOT NULL AND dt_ini_real_w::text <> '') and ( coalesce(dt_fim_etapa_w::text, '') = '' ) and ( coalesce(dt_cancel_etapa_w::text, '') = '') then
	   -- Paciente '|| nm_paciente_w || ' esta em atendimento na etapa: '|| ds_etapa_w || '#@#@'
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(264556,	'NM_PACIENTE_W='||NM_PACIENTE_W || ';' ||'DS_ETAPA_W=' ||DS_ETAPA_W);
	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE valida_etapa_iniciada ( nr_seq_checkup_etapa_p bigint, nm_usuario_p text) FROM PUBLIC;

