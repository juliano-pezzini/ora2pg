-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE criar_arquivo_utl_file (cd_evento_p evento_tasy_utl_file.cd_evento%type, nm_arquivo_p text, ds_conteudo_p bytea, nm_usuario_p text, ds_url_arquivo_p INOUT text) AS $body$
DECLARE


ds_conteudo_w   	varchar(32000);
nr_bytes_w          bigint := 4000;
nr_index_w			bigint := 1;
v_CORPO_ARQUIVO 	bytea;
l_out_file 			UTL_FILE.file_type;
l_buffer    		bytea;
l_amount    		integer := 32767;
l_pos       		integer := 1;
l_blob_len  		integer;
ds_local_w			varchar(4000) := null;
ds_local_windows_w	varchar(2000);
ds_erro_w			varchar(4000) := null;
nr_seq_erro_w		dic_objeto.nr_sequencia%type := null;

procedure nr_seq_erro_p	out	dic_objeto.nr_sequencia%type  := validar_diretorio_windows(ds_local_windows_p	text, nr_seq_erro_p	out	dic_objeto.nr_sequencia%type ) is
;
BEGIN

-- Validar para que o diretório Windows seja obrigatório
if (coalesce(ds_local_windows_p::text, '') = '') then
	nr_seq_erro_p := 460844; -- Favor verificar o cadastro UTL_FILE, necessário informar o campo Local na rede (Windows)
end if;

-- Validar se o diretório é comum para o Windows
if (ds_local_windows_p IS NOT NULL AND ds_local_windows_p::text <> '') and
	(instr(ds_local_windows_p, '\') = 0) then --'
	nr_seq_erro_p := 460848; -- Favor verificar o cadastro UTL_FILE, necessário informar um diretório válido para o Windows no campo Local na rede (Windows)
end if;

end validar_diretorio_windows;

-- Obter os diretorios UTL / Windows
procedure obter_local_utl_intern(	cd_evento_p			evento_tasy_utl_file.cd_evento%type,
									ds_local_utl_p		out	varchar,
									ds_local_windows_p	out	varchar,
									ie_valida_dir_ws_p		varchar) is
begin

begin
-- Obter local reconhecido pelo ORACLE para geração do arquivo UTL_FILE
obter_evento_utl_file( cd_evento_p, null, ds_local_utl_p, ds_erro_w);
exception
when others then
	ds_local_utl_p 		:= null;
end;

-- Obter local reconhecido pelo WINDOWS para geração do arquivo UTL_FILE
if	(ie_valida_dir_ws_p = 'S') and
	(ds_erro_w is null)  then
	begin
	pls_obter_dir_rede_utl_file( cd_evento_p, null, ds_local_windows_p, ds_erro_w);
	exception
	when others then
		ds_local_windows_p	:= null;
	end;

	-- Validar diretório Windows
	if	(ds_erro_w is null) then
		validar_diretorio_windows( ds_local_windows_p, nr_seq_erro_w);
	end if;
end if;

end obter_local_utl_intern;

begin

begin

DBMS_LOB.CREATETEMPORARY(v_CORPO_ARQUIVO , TRUE);

v_CORPO_ARQUIVO := ds_conteudo_p;

-- Obter local reconhecido pelo ORACLE e pelo WINDOWS para geração do arquivo UTL_FILE
obter_local_utl_intern( cd_evento_p, ds_local_w, ds_local_windows_w, 'S');

BEGIN
  l_blob_len := DBMS_LOB.getlength(v_CORPO_ARQUIVO);

  l_out_file := UTL_FILE.fopen(ds_local_w, nm_arquivo_p, 'W', 32767);

  WHILE l_pos < l_blob_len LOOP
	 DBMS_LOB.read(v_CORPO_ARQUIVO, l_amount, l_pos, l_buffer);
	 UTL_FILE.put_raw(l_out_file, l_buffer, TRUE);
	 UTL_FILE.fflush(l_out_file);
	 l_pos := l_pos + l_amount;
  END LOOP;

  UTL_FILE.fclose(l_out_file);
EXCEPTION
  WHEN OTHERS THEN
	 IF UTL_FILE.is_open(l_out_file) THEN
		UTL_FILE.fclose(l_out_file);
	 END IF;
END;

exception
		when others then
	DBMS_LOB.FREETEMPORARY(v_CORPO_ARQUIVO);

end;

ds_url_arquivo_p := ds_local_windows_w || nm_arquivo_p;

DBMS_LOB.FREETEMPORARY(v_CORPO_ARQUIVO);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE criar_arquivo_utl_file (cd_evento_p evento_tasy_utl_file.cd_evento%type, nm_arquivo_p text, ds_conteudo_p bytea, nm_usuario_p text, ds_url_arquivo_p INOUT text) FROM PUBLIC;

