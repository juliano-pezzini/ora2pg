-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_kafka_padrao ((DS_JSON_P text, ID_EVENT_P text, NR_SEQ_FILA_P bigint) IS /*
PROCEDURE DESTINADA A REALIZAR A GRAVACAO DO JSON NA TABELA CONFORME EVENTO, OU SEJA, CADA GRUPO DEVERA CRIAR SUA TABELA E AFIM DE INSERIR O JSON.
O NUMERO DO EVENTO E O PONTO DE INTEGRACAO PROPRIAMENTE DITO, QUE PODE SER VISTO NA FUNCAO GERENCIAMENTO PARA INTEGRACOES ABA REGRAS DA INTEGRACAO GRID EVENTO.


------ IE_EVENTO -------


3 - NOTA_FISCAL
7 - PESSOA_JURIDICA
12 - Enviar pessoa fisica
114 - Enviar alta do paciente
118 - Enviar movimentacao do paciente
168 - Enviar cadastro de medicos
302 -  Alergias
303 -  SAE - Riscos
304 - Enviar funcionario
307 - SAPS - Prescricao de Enfermagem
308 - Enviar admissao paciente no setor
313 - Enviar usuario
320 - Enviar refeicao
305 - Enviar Prescricao de medicamento
300 - Enviar Prescricao de Recomendacao
310 - Enviar Prescricao de Procedimento
306 - Enviar Prescricao de Jejum
311 - Enviar Tipo de Recomendacao
314 - Enviar Cadastro de materiais
309 - Enviar cadastro de exames laboratoriais
327 - Enviar intervencoes de enfermagem
328 - Enviar Controle Glicemia
329 - Envio Tipo Procedimento
389 - Enviar os itens da SAE
299 - Acerto de duplicidade de pessoa fisica
*/


  --NR_SEQUENCIA_W       NUMBER(10);
 CD_ESTABELECIMENTO_W ESTABELECIMENTO.CD_ESTABELECIMENTO%TYPE) RETURNS bigint AS $body$
DECLARE

    NR_SEQ_MAX_W bigint;

BEGIN
    NR_SEQ_MAX_W := OBTER_VALOR_DINAMICO('SELECT NVL(MAX(NR_SEQUENCIA), 0) NR_SEQ FROM ' || NM_TABELA || ' WHERE NR_SEQ_FILA = ' || NR_SEQ_FILA_P, NR_SEQ_MAX_W);

    RETURN NR_SEQ_MAX_W;
  END;

BEGIN
  IF (DS_JSON_P <> '[]') THEN
    SELECT MAX(coalesce(CD_ESTAB_DOCUMENTO, WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO))
      INTO STRICT CD_ESTABELECIMENTO_W
      FROM INTPD_FILA_TRANSMISSAO
     WHERE NR_SEQUENCIA = NR_SEQ_FILA_P;

    --OS 2072399 - Inclusao de log para tentar identificar origem do problema de registro duplicado.
    INSERT INTO LOG_ATENDIMENTO(DT_ATUALIZACAO, NM_USUARIO, CD_LOG, DS_LOG)
    VALUES (clock_timestamp(), coalesce(WHEB_USUARIO_PCK.GET_NM_USUARIO, 'OS2072399'), 20723, SUBSTR(
            '-- Informacoes gerais: ' || CHR(13) || CHR(10) ||
            ' Maquina: ' || WHEB_USUARIO_PCK.GET_MACHINE || CHR(13) || CHR(10) ||
            ' Estabelecimento: ' || CD_ESTABELECIMENTO_W || CHR(13) || CHR(10) ||
            ' Funcao: ' || WHEB_USUARIO_PCK.GET_CD_FUNCAO || CHR(13) || CHR(10) ||
            ' Perfil: ' || WHEB_USUARIO_PCK.GET_CD_PERFIL || CHR(13) || CHR(10) ||
            ' Call stack: ' || SUBSTR(DBMS_UTILITY.FORMAT_CALL_STACK, 1, 1500) || CHR(13) || CHR(10) ||
            '- Informacoes da procedure: ' || CHR(13) || CHR(10) ||
            ' ID_EVENT_P: ' || ID_EVENT_P  || CHR(13) || CHR(10) ||
            ' NR_SEQ_FILA_P: ' || NR_SEQ_FILA_P  || CHR(13) || CHR(10) ||
            ' DS_JSON_P: ' || DS_JSON_P, 1, 2000));
    COMMIT;

/*    IF (ID_EVENT_P = '3') THEN
      --NOTA_FISCAL

      SELECT COUNT(*) + 1
        INTO NR_SEQUENCIA_W
        FROM NOTA_FISCAL;
    ELSIF (ID_EVENT_P = '7') THEN
      --PESSOA_JURIDICA

      SELECT COUNT(*)
        INTO NR_SEQUENCIA_W
        FROM PESSOA_JURIDICA; */
    IF (ID_EVENT_P = '12') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_PESSOA_FISICA') = 0) THEN
        INSERT INTO INTPD_KAFKA_PESSOA_FISICA(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_pessoa_fisica_seq'),
           '12',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
/*   ELSIF (ID_EVENT_P = '114') THEN
     INSERT INTO INTPD_KAFKA_ALTA_PAC
       (NR_SEQUENCIA,
        IE_EVENTO,
        CD_ESTABELECIMENTO,
        DT_ATUALIZACAO,
        DS_JSON,
        NR_SEQ_FILA)
     VALUES
       (INTPD_KAFKA_ALTA_PAC_SEQ.NEXTVAL,
        '114',
        CD_ESTABELECIMENTO_W,
        SYSDATE,
        DS_JSON_P,
        NR_SEQ_FILA_P); */
    ELSIF (ID_EVENT_P IN ('114', '118', '308')) THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_MOV_PAC') = 0) THEN
        INSERT INTO INTPD_KAFKA_MOV_PAC(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (NR_SEQ_FILA_P,
           ID_EVENT_P,
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '168') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_CAD_MEDICO') = 0) THEN
        INSERT INTO INTPD_KAFKA_CAD_MEDICO(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_cad_medico_seq'),
           '168',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '302') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_ALERGIA') = 0) THEN
        INSERT INTO INTPD_KAFKA_ALERGIA(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_alergia_seq'),
           '302',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P IN ('303', '389')) THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_SAE') = 0) THEN
        INSERT INTO INTPD_KAFKA_SAE(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_sae_seq'),
           '303',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '304') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_FUNCIONARIO') = 0) THEN
        INSERT INTO INTPD_KAFKA_FUNCIONARIO(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_funcionario_seq'),
           '304',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '307') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_SAPS') = 0) THEN
        INSERT INTO INTPD_KAFKA_SAPS(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_saps_seq'),
           '307',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
/*    ELSIF (ID_EVENT_P = '308') THEN
      INSERT INTO INTPD_KAFKA_ADM_PAC_SETOR
        (NR_SEQUENCIA,
         IE_EVENTO,
         CD_ESTABELECIMENTO,
         DT_ATUALIZACAO,
         DS_JSON,
         NR_SEQ_FILA)
      VALUES
        (INTPD_KAFKA_ADM_PAC_SETOR_SEQ.NEXTVAL,
         '308',
         CD_ESTABELECIMENTO_W,
         SYSDATE,
         DS_JSON_P,
         NR_SEQ_FILA_P); */
    ELSIF (ID_EVENT_P = '313') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_USUARIO') = 0) THEN
        INSERT INTO INTPD_KAFKA_USUARIO(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_usuario_seq'),
           '313',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '320') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_REFEICAO') = 0) THEN
        INSERT INTO INTPD_KAFKA_REFEICAO(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_refeicao_seq'),
           '320',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '305') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_PRESCR_MAT') = 0) THEN
        INSERT INTO INTPD_KAFKA_PRESCR_MAT(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_prescr_mat_seq'),
           '305',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '299') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_ACERTO_DUPLIC') = 0) THEN
        INSERT INTO INTPD_KAFKA_ACERTO_DUPLIC(NR_SEQUENCIA,
           DT_ATUALIZACAO,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           NR_SEQ_FILA,
           DS_JSON)
        VALUES (nextval('intpd_kafka_acerto_duplic_seq'),
           clock_timestamp(),
           '299',
           CD_ESTABELECIMENTO_W,
           NR_SEQ_FILA_P,
           DS_JSON_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '300') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_PRESCR_REC') = 0) THEN
        INSERT INTO INTPD_KAFKA_PRESCR_REC(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_prescr_rec_seq'),
           '300',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '310') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_PRESCR_PROC') = 0) THEN
        INSERT INTO INTPD_KAFKA_PRESCR_PROC(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_prescr_proc_seq'),
           '310',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '306') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_PRESCR_JEJUM') = 0) THEN
        INSERT INTO INTPD_KAFKA_PRESCR_JEJUM(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_prescr_jejum_seq'),
           '306',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '311') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_TIPO_RECOMEND') = 0) THEN
        INSERT INTO INTPD_KAFKA_TIPO_RECOMEND(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_tipo_recomend_seq'),
           '311',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '309') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_EXAME_LAB') = 0) THEN
        INSERT INTO INTPD_KAFKA_EXAME_LAB(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_exame_lab_seq'),
           '309',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '314') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_MATERIAL') = 0) THEN
        INSERT INTO INTPD_KAFKA_MATERIAL(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_material_seq'),
           '314',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '328') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_GLICEMIA') = 0) THEN
        INSERT INTO INTPD_KAFKA_GLICEMIA(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_glicemia_seq'),
           '328',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '327') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_PE_PRESCR') = 0) THEN
        INSERT INTO INTPD_KAFKA_PE_PRESCR(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_pe_prescr_seq'),
           '327',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    ELSIF (ID_EVENT_P = '329') THEN
      IF (FN_SEQ_MAX_NR_FILA('INTPD_KAFKA_TIPO_EXAME') = 0) THEN
        INSERT INTO INTPD_KAFKA_TIPO_EXAME(NR_SEQUENCIA,
           IE_EVENTO,
           CD_ESTABELECIMENTO,
           DT_ATUALIZACAO,
           DS_JSON,
           NR_SEQ_FILA)
        VALUES (nextval('intpd_kafka_tipo_exame_seq'),
           '329',
           CD_ESTABELECIMENTO_W,
           clock_timestamp(),
           DS_JSON_P,
           NR_SEQ_FILA_P);
        COMMIT;
      END IF;
    END IF;
  END IF;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_kafka_padrao ((DS_JSON_P text, ID_EVENT_P text, NR_SEQ_FILA_P bigint) IS  CD_ESTABELECIMENTO_W ESTABELECIMENTO.CD_ESTABELECIMENTO%TYPE) FROM PUBLIC;

