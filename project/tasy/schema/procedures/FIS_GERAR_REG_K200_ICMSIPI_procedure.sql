-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_k200_icmsipi (nr_seq_controle_p bigint) AS $body$
DECLARE


/*REGISTRO K200: ESTOQUE ESCRITURADO*/



-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1) := 'N';
qt_cursor_w 			bigint := 0;
nr_vetor_w  			bigint := 0;

-- FIS_EFD_ICMSIPI_K200
nr_seq_icmsipi_K200_w 	fis_efd_icmsipi_K200.nr_sequencia%type;

-- USUARIO
nm_usuario_w 			usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro K200 restringindo pela sequencia da nota fiscal*/
c_reg_K200 CURSOR FOR
SELECT  dt_est,
        dt_fim_apuracao,
        cd_item,
        sum(qt_item) qt_item,
        cd_ind_est,
        cd_part,
		max(cd_local_estoque)
from (	SELECT 	max(a.dt_mesano_referencia)	dt_est,
				b.dt_fim_apuracao dt_fim_apuracao,
				a.cd_material cd_item,
				a.qt_estoque qt_item,
				0 cd_ind_est,
				null cd_part,
				e.cd_local_estoque
		FROM local_estoque e, material_estab d, fis_efd_icmsipi_controle b, saldo_estoque a
LEFT OUTER JOIN material_fiscal c ON (a.cd_material = c.cd_material)
WHERE trunc(a.dt_mesano_referencia) between trunc(b.dt_inicio_apuracao) and trunc(b.dt_fim_apuracao) and a.cd_estabelecimento = b.cd_estabelecimento and a.cd_estabelecimento = e.cd_estabelecimento and e.cd_local_estoque = a.cd_local_estoque and d.cd_material = a.cd_material and d.cd_estabelecimento = a.cd_estabelecimento and d.ie_material_estoque = 'S' and b.nr_sequencia = nr_seq_controle_p  and c.ie_tipo_fiscal in ('00', '01', '02', '03', '04', '05', '06', '10') group by b.dt_fim_apuracao, a.cd_material, 0, null, a.qt_estoque, e.cd_local_estoque
		
union

		select 	max(a.dt_mesano_referencia) dt_est,
				b.dt_fim_apuracao dt_fim_apuracao,
				a.cd_material	cd_item,
				a.qt_estoque	qt_item,
				2 cd_ind_est,
				a.cd_fornecedor cd_part,
				e.cd_local_estoque
		FROM local_estoque e, material_estab d, fis_efd_icmsipi_controle b, fornecedor_mat_consignado a
LEFT OUTER JOIN material_fiscal c ON (a.cd_material = c.cd_material)
WHERE trunc(a.dt_mesano_referencia) between trunc(b.dt_inicio_apuracao) and trunc(b.dt_fim_apuracao) and a.cd_estabelecimento = b.cd_estabelecimento and a.cd_estabelecimento = e.cd_estabelecimento and e.cd_local_estoque = a.cd_local_estoque and d.cd_material = a.cd_material and d.cd_estabelecimento = a.cd_estabelecimento and d.ie_material_estoque = 'S' and b.nr_sequencia = nr_seq_controle_p  and c.ie_tipo_fiscal in ('00', '01', '02', '03', '04', '05', '06', '10') group by b.dt_fim_apuracao, a.cd_material, 2, a.cd_fornecedor, a.qt_estoque, e.cd_local_estoque
		order by 1,2
) alias12
group by dt_est, dt_fim_apuracao, cd_item, cd_ind_est, cd_part;

/*Criação do array com o tipo sendo do cursor eespecificado - c_reg_K200*/

type reg_c_reg_K200 is table of c_reg_K200%RowType;
vetRegK200 reg_c_reg_K200;

/*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_K200 */

type registro is table of fis_efd_icmsipi_K200%rowtype index by integer;
fis_registros_w registro;

BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_reg_K200;
loop
fetch c_reg_K200 bulk collect      into vetRegK200 limit 1000;
	for i in 1 .. vetRegK200.Count loop

	begin

	/*Incrementa a variavel para o array*/

	qt_cursor_w:=	qt_cursor_w + 1;

	if (ie_gerou_dados_bloco_w = 'N') then
		ie_gerou_dados_bloco_w := 'S';
	end if;

	/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_K200 */

	select nextval('fis_efd_icmsipi_k200_seq')	into STRICT nr_seq_icmsipi_K200_w	;

	/*Inserindo valores no array para realização do forall posteriormente*/
	fis_registros_w[qt_cursor_w].nr_sequencia 			:= nr_seq_icmsipi_K200_w;
	fis_registros_w[qt_cursor_w].dt_atualizacao 		:= clock_timestamp();
	fis_registros_w[qt_cursor_w].nm_usuario 			:= nm_usuario_w;
	fis_registros_w[qt_cursor_w].dt_atualizacao_nrec 	:= clock_timestamp();
	fis_registros_w[qt_cursor_w].nm_usuario_nrec 		:= nm_usuario_w;
	fis_registros_w[qt_cursor_w].cd_reg 				:= 'K200';
	fis_registros_w[qt_cursor_w].dt_est 				:= vetRegK200[i].dt_fim_apuracao;
	fis_registros_w[qt_cursor_w].cd_item 				:= vetRegK200[i].cd_item;
	fis_registros_w[qt_cursor_w].qt_item 				:= vetRegK200[i].qt_item;
	fis_registros_w[qt_cursor_w].cd_ind_est 			:= vetRegK200[i].cd_ind_est;
	fis_registros_w[qt_cursor_w].cd_part 				:= vetRegK200[i].cd_part;
	fis_registros_w[qt_cursor_w].nr_seq_controle 		:= nr_seq_controle_p;

	if (nr_vetor_w >= 1000) then
	begin
		/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_K200 */

		forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_K200 values fis_registros_w(i);

		nr_vetor_w := 0;
		fis_registros_w.delete;

		commit;

	end;
	end if;

	/*incrementa variavel para realizar o forall quando chegar no valor limite*/

	nr_vetor_w := nr_vetor_w + 1;

	end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_K200 */
end loop;
close c_reg_K200;

if (fis_registros_w.count > 0) then
begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
	insert into fis_efd_icmsipi_K200 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update fis_efd_icmsipi_controle set ie_mov_K = 'S' where nr_sequencia = nr_seq_controle_p;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_k200_icmsipi (nr_seq_controle_p bigint) FROM PUBLIC;

