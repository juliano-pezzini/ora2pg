-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE itens AS (	nr_seq_conta_proc		bigint,
			nr_seq_conta_mat		bigint,
			cd_procedimento			bigint,
			ie_origem_proced		bigint,
			nr_seq_material			bigint);
CREATE TYPE ocor AS (	nr_seq_ocorrencia		bigint,
			nr_seq_motivo_glosa		bigint,
			ie_auditoria			varchar(3),
			cd_ocorrencia			varchar(30),
			ie_proc_mat			varchar(3),
			ie_excecao_ocor			varchar(10));


CREATE OR REPLACE PROCEDURE pls_gerar_ocorrencia ( nr_seq_segurado_p pls_segurado.nr_sequencia%type, param1_p text, ie_toda_conta_p text, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, nr_seq_material_p pls_material.nr_sequencia%type, ie_tipo_guia_p text, nr_seq_plano_p bigint, ie_aplicacao_regra_p text, qt_dias_vencido_p bigint, ie_tipo_pagador_p text, nr_seq_prestador_p bigint, nr_seq_tipo_atendimento_p bigint, ie_tipo_ocorrencia_p text, dt_procedimento_p timestamp, ie_origem_ocorrencia_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_congenere_p bigint, ie_conta_intercambio_p text, ie_tipo_conta_web_p text, nr_seq_ocorrencia_p pls_ocorrencia.nr_sequencia%type, --CASO SEJA INFORMADO IRA SER REALIZADA A CONSISTÊNCIA DE SOMENTE ESTA OCORRÊNCIA
 ie_reconsistencia_p text) AS $body$
DECLARE


/* IE_APLICACAO_REGRA_P 13
	A - Autorização
	C - Conta médica
*/
/*
ie_tipo_item_w
3 - Procedimento da conta
4 - Material da conta
8 - Contas Médica
*/
ie_gerar_oc_partic_ww			varchar(1);
ie_gerar_solic_w			varchar(1);
ie_gerar_exec_w				varchar(1);

nr_seq_regra_w				pls_ocorrencia_regra.nr_sequencia%type;
nr_seq_estrutura_w			pls_ocorrencia_regra.nr_seq_estrutura%type;
nr_seq_ocorrencia_w			bigint;
nr_seq_contrato_w			bigint;
ie_tipo_segurado_w			varchar(3);
qt_ocorrencia_w				integer	:= 0;
ie_preco_w				varchar(10);
nr_contrato_w				bigint;
ie_estrutura_w				varchar(1)	:= 'S';

qt_liberada_w				pls_ocorrencia_regra.qt_liberada%type;
ie_tipo_qtde_w				pls_ocorrencia_regra.ie_tipo_qtde%type;
qt_tipo_quantidade_w			pls_ocorrencia_regra.qt_tipo_quantidade%type;
nr_seq_item_w				bigint;
ie_calculo_coparticipacao_w		varchar(10);
ie_tipo_item_w				bigint;
nr_seq_motivo_glosa_w			bigint;
nr_seq_simultaneo_w			pls_ocorrencia_regra.nr_seq_simultaneo%type;

ie_ocorrencia_w				varchar(1)	:= 'N';
cd_ocorrencia_w				varchar(10);
ie_sexo_w				pessoa_fisica.ie_sexo%type;
qt_idade_w				varchar(5);
ie_cid_w				varchar(1)	:= 'S';
cd_doenca_cid_w				pls_ocorrencia_regra.cd_doenca_cid%type;
qt_dias_mensal_vencido_w		pls_ocorrencia_regra.qt_dias_mensal_vencido%type;
ie_simultaneo_w				varchar(1);
nr_seq_ocorrencia_benef_w		bigint;
ie_guia_referencia_w			pls_ocorrencia_regra.ie_guia_referencia%type;
qt_cooperativa_val_w			integer;
cd_guia_referencia_w			pls_conta.cd_guia_referencia%type;
dia_semana_w				smallint := 0;
ie_tipo_feriado_w 			feriado.ie_tipo_feriado%type;
nr_seq_nota_cobranca_w			pls_conta.nr_seq_nota_cobranca%type;
ie_tipo_feriado_ww 			pls_ocorrencia_regra.ie_tipo_feriado%type;
dia_feriado_w 				varchar(1) := 'N';
ie_benef_prestador_w			pls_ocorrencia_regra.ie_benef_prestador%type := 'N';
ds_qtde_liberacao_w			varchar(4000);
ie_benef_menor_w			varchar(1)	:= 'N';
nr_seq_proc_espec_w			pls_ocorrencia_regra.nr_seq_proc_espec%type;

ie_consiste_exec_coop_w			pls_ocorrencia_regra.ie_consiste_exec_coop%type;
ie_prest_medico_w			varchar(1);
ie_validade_carteira_w			pls_ocorrencia_regra.ie_validade_carteira%type;
ie_devolucao_carteira_w			pls_ocorrencia_regra.ie_devolucao_carteira%type;

ie_benef_rescindido_ww			pls_ocorrencia_regra.ie_benef_rescindido%type;
ie_nota_intercambio_w			pls_ocorrencia_regra.ie_nota_intercambio%type;
ie_benef_resci_w			varchar(1)	:= 'N';
ie_devolucao_cart_benf_w		varchar(2)	:= 'N';
ie_carteira_vencida_w			varchar(2)	:= 'N';
ie_auditoria_w				varchar(1);
ie_produto_inativo_w			varchar(1)	:= 'N';
ie_exige_procedimento_w			pls_ocorrencia_regra.ie_exige_procedimento%type;
cd_procedimento_regra_w			bigint;

ie_item_fora_periodo_int_w		pls_ocorrencia_regra.ie_item_fora_periodo_int%type;
ie_dupla_internacao_w			pls_ocorrencia_regra.ie_dupla_internacao%type;
ie_item_fora_per_int_w			varchar(1)	:= 'S';
ie_dupla_int_w				varchar(1)	:= 'S';
ie_tipo_guia_w				varchar(2);
ie_grupo_prest_w			varchar(1)	:= 'S';
nr_seq_grupo_prestador_w		pls_ocorrencia_regra.nr_seq_grupo_prestador%type;
ie_tipo_pessoa_qtde_w			pls_ocorrencia_regra.ie_tipo_pessoa_qtde%type;
dt_atendimento_referencia_w		timestamp;

nr_seq_protocolo_w			bigint;
nr_seq_prest_prot_w			bigint;
ie_tipo_prest_prot_w			varchar(10);
ie_relacao_prest_pf_w			pls_ocorrencia_regra.ie_relacao_prest_pf%type;
qt_registro_w				bigint	:= 0;
cd_medico_protocolo_w			varchar(10);
nr_seq_intercambio_w			bigint;
ie_tipo_contrato_inter_w		varchar(2);
cd_usuario_plano_w			pls_ocorrencia_regra.cd_usuario_plano%type;
ie_regime_internacao_w			pls_ocorrencia_regra.ie_regime_internacao%type;
ie_regime_internacao_regra_w		varchar(2);
ie_afastamento_cooperado_w		pls_ocorrencia_regra.ie_afastamento_cooperado%type;
cd_medico_solicitante_w			bigint;
ie_regra_qtde_w				pls_ocorrencia_regra.ie_regra_qtde%type;
ie_regulamentacao_w			varchar(1);
ds_observacao_w				varchar(4000);
ie_tipo_internado_w			pls_ocorrencia_regra.ie_tipo_internado%type;
ie_executa_uma_vez_w			pls_ocorrencia_regra.ie_executa_uma_vez%type;
qt_indicacao_clinica_w			bigint;
ie_exige_indicacao_clinica_w		pls_ocorrencia_regra.ie_exige_indicacao_clinica%type;
ie_grau_duplic_w			varchar(1);
qt_diarias_permitida_w			pls_ocorrencia_regra.qt_diarias_permitida%type;
ie_tipo_processo_w			varchar(1);
ie_carater_internacao_w			varchar(1);
cd_medico_executor_w			pls_ocorrencia_regra.cd_medico_executor%type;
vl_procedimento_w			double precision;
nr_seq_tipo_prestador_w			pls_ocorrencia_regra.nr_seq_tipo_prestador%type;
ie_limite_dt_recebimento_out_w		varchar(1)	:= 'N';
qt_dias_limite_w			pls_ocorrencia_regra.qt_dias_envio%type;
ie_tipo_data_envio_w			pls_ocorrencia_regra.ie_tipo_data_envio%type;
ie_medico_exec_solic_w			pls_ocorrencia_regra.ie_medico%type;
ie_existe_medico_w			varchar(10)	:= 'N';
cd_medico_executor_regra_w		bigint;
vl_minimo_w				pls_ocorrencia_regra.vl_minimo%type;
vl_minimo_apresentado_w			pls_ocorrencia_regra.vl_minimo_apresentado%type;
ie_valor_minimo_w			varchar(1);
nr_seq_congener_sup_w			bigint;
nr_seq_congenere_w			bigint;
nr_seq_congenere_sup_w			pls_ocorrencia_regra.nr_seq_congenere_sup%type;
ie_exceto_coop_sup_w			pls_ocorrencia_regra.ie_exceto_coop_sup%type;
nr_seq_grupo_contrato_w			pls_ocorrencia_regra.nr_seq_grupo_contrato%type;
ie_origem_conta_ww			varchar(5);
cd_congenere_w				varchar(15);
sg_estado_operadora_w			pessoa_juridica.sg_estado%type;
qt_existe_grupo_w			integer;
dt_inicio_proc_w			timestamp;
dt_fim_proc_w				timestamp;
dt_inicio_mat_w				timestamp;
dt_fim_mat_w				timestamp;
hr_inicial_w				pls_ocorrencia_regra.hr_inicial%type;
hr_final_w				pls_ocorrencia_regra.hr_final%type;
ie_hora_periodo_w			varchar(1);
dt_item_w				timestamp;
qt_item_w				double precision;
vl_item_w				double precision;
vl_mat_imp_w				double precision;
ie_conta_w				varchar(1)	:= 'N';
ie_item_dentro_periodo_int_w		pls_ocorrencia_regra.ie_item_dentro_periodo_int%type	:= 'N';
ie_dentro_periodo_int_w			varchar(1)	:= 'N';
nr_seq_classificacao_w			pls_ocorrencia_regra.nr_seq_classificacao%type;
nr_seq_classificacao_regra_w		bigint;
ie_tipo_prestador_w			pls_ocorrencia_regra.ie_tipo_prestador%type;
nr_seq_prestador_regra_w		bigint;
ie_relacao_prest_pf_regra_w		pls_ocorrencia_regra.ie_relacao_prest_pf%type;
nr_seq_tipo_prestador_regra_w		bigint;
nr_seq_prestador_w			pls_ocorrencia_regra.nr_seq_prestador%type;
ie_somar_estrutura_w			pls_ocorrencia_regra.ie_somar_estrutura%type;
ie_gerar_oc_concorrente_w		varchar(1);
nr_seq_regra_concorrente_w		pls_ocorrencia_regra.nr_seq_concorrente%type;
ie_tipo_atend_tiss_w			pls_ocorrencia_regra.ie_tipo_atend_tiss%type;
qt_excecao_w				integer;
ie_excecao_w				varchar(1) := 'N';
nr_seq_regra_cid_int_w			pls_ocorrencia_regra.nr_seq_regra_cid_int%type;
ie_qt_lib_posterior_w			pls_ocorrencia_regra.ie_qt_lib_posterior%type;
cd_espec_medica_w			pls_ocorrencia_regra.cd_especialidade_medica%type;
ie_tipo_despesa_w			varchar(10);
ie_validacao_cpt_w			pls_ocorrencia_regra.ie_validacao_cpt%type;
cd_tiss_atendimento_w			varchar(20);
nr_seq_conta_proc_partic_w		pls_ocorrencia_regra.nr_seq_proc_partic%type;
nr_seq_grupo_servico_w			pls_ocorrencia_regra.nr_seq_grupo_servico%type;
ie_grupo_servico_w			varchar(1)	:= 'S';
ie_med_exec_inativo_w			pls_ocorrencia_regra.ie_med_exec_inativo%type;
qt_idade_min_w				pls_ocorrencia_regra.qt_idade_min%type;
qt_idade_max_w				pls_ocorrencia_regra.qt_idade_max%type;
qt_idade_meses_w			integer;
ie_unid_tempo_idade_w			pls_ocorrencia_regra.ie_unid_tempo_idade%type;
ie_partic_diferente_w			pls_ocorrencia_regra.ie_partic_diferente%type;
qt_dias_cobranca_prev_w			pls_ocorrencia_regra.qt_dias_cobranca_prev%type;
ie_aut_nao_utilizado_w			pls_ocorrencia_regra.ie_aut_nao_utilizado%type;
cd_guia_w				varchar(20);
ds_retorno_iten_aut_dig_w		varchar(4000)	:= '';
ds_observacao_dupla_int_w		varchar(4000)	:= '';
ds_observacao_dento_int_w		varchar(4000)	:= '';
cd_senha_w				varchar(20);
cd_senha_externa_w			varchar(20);
ie_cd_senha_w				varchar(1)	:= 'N';
ie_cd_senha_externa_w			varchar(1)	:= 'N';
ie_conta_intercambio_w			varchar(1);
ie_prestador_inativo_w			pls_ocorrencia_regra.ie_prestador_inativo%type	:= 'N';
ie_prestador_exec_w			pls_ocorrencia_regra.ie_prestador_exec%type	:= 'N';
ie_situacao_prest_w			varchar(1)	:= 'S';
ie_consiste_qt_diaria_w			pls_ocorrencia_regra.ie_consiste_qt_diaria%type;
sg_estado_w				pessoa_juridica.sg_estado%type;
ie_tipo_intercambio_w			varchar(1);
ie_atributo_w				pls_ocorrencia_regra.ie_atributo%type;
ie_situacao_med_w			varchar(1);
nr_seq_saida_int_w			pls_ocorrencia_regra.nr_seq_saida_int%type;
nr_seq_saida_int_conta_w		bigint;
ie_nascido_vivo_w			pls_ocorrencia_regra.ie_nascido_vivo%type;
nr_seq_grau_partic_w			pls_ocorrencia_regra.nr_seq_grau_partic%type;
qt_nasc_vivos_prematuros_w		integer;
qt_nasc_vivos_w				bigint;
qt_obito_precoce_w			bigint;
qt_obito_tardio_w			bigint;
qt_total_vivos_w			bigint;
qt_reg_w				bigint;
nr_seq_clinica_w			pls_ocorrencia_regra.nr_seq_clinica%type;
nr_seq_grupo_cooperativa_w		pls_ocorrencia_regra.nr_seq_grupo_cooperativa%type;
nr_seq_prestador_fornec_w		bigint;
nr_seq_material_lib_w			bigint;
ie_tipo_consulta_w			pls_ocorrencia_regra.ie_tipo_consulta%type;
ie_mat_espec_aut_w			varchar(2);
ie_pre_analise_w			varchar(2);
ie_benef_autorizacao_w			pls_ocorrencia_regra.ie_benef_autorizacao%type;
ie_segurado_igual_w			varchar(1);
ie_guia_existe_w			varchar(1);
ie_internacao_obstetrica_w		pls_ocorrencia_regra.ie_internacao_obstetrica%type;
ie_gestacao_w				varchar(1);
ie_aborto_w				varchar(1);
ie_parto_normal_w			varchar(1);
ie_complicacao_puerperio_w		varchar(1);
ie_complicacao_neonatal_w		varchar(1);
ie_parto_cesaria_w			varchar(1);
ie_baixo_peso_w				varchar(1);
ie_atend_rn_sala_parto_w		varchar(1);
ie_transtorno_w				varchar(1);
ie_obstetrico_informado_w		varchar(1)	:= 'N';
cd_tiss_tipo_internacao_w		varchar(20);
cd_convenio_w				pls_ocorrencia_regra.cd_convenio%type;
cd_categoria_w				pls_ocorrencia_regra.cd_categoria%type;
ie_consiste_qtd_aut_w			pls_ocorrencia_regra.ie_consiste_qtd_aut%type;
ie_oco_grau_partic_w			varchar(1);
qt_item_conta_w				double precision;
nr_seq_guia_w				bigint;
nr_seq_guia_ww				bigint;
qt_autorizada_w				bigint;
nr_seq_grau_partic_ww			bigint;
nr_seq_conselho_w			pls_ocorrencia_regra.nr_seq_conselho%type;
ie_medico_cooperado_regra_w		varchar(2);
ie_ocorrencia_item_w			varchar(1) := 'N';
nr_seq_regra_partic_w			pls_ocorrencia_regra.nr_seq_regra_partic%type;
ie_gerar_oc_partic_w			varchar(2) := 'N';
qt_participantes_w			integer;
nr_seq_material_regra_w			bigint;
nr_seq_tipo_acomod_conta_w		pls_ocorrencia_regra.nr_seq_tipo_acomod_conta%type;
nr_seq_tipo_acomodacao_w		pls_ocorrencia_regra.nr_seq_tipo_acomodacao%type;
ie_tipo_conta_web_w			varchar(1);
ie_origem_valor_w			pls_ocorrencia_regra.ie_origem_valor%type;
ie_gerado_ocorrencia_w			varchar(1) := 'N';
dt_referencia_w				timestamp;
dt_max_proc_w				timestamp;
dt_max_mat_w				timestamp;
dt_max_item_w				timestamp;
dt_procedimento_w			timestamp;
dt_material_w				timestamp;
dt_material_conta_w			timestamp; --data do material obtido da conta(sem tratar nulo )
dt_procedimento_conta_w			timestamp; -- data do procedimento obtido da conta ( sem tratar nulo)
ie_tipo_data_w				pls_ocorrencia_regra.ie_tipo_data%type;
nr_seq_regra_atrib_w			pls_ocorrencia_regra.nr_seq_regra_atrib%type;
cd_prestador_regra_w			pls_ocorrencia_regra.cd_prestador%type;
cd_prestador_w				varchar(30);
ie_espec_medica_w			varchar(10);
nr_seq_participante_w			bigint;
ie_feriado_w				pls_ocorrencia_regra.ie_feriado%type;
nr_seq_congenere_protocolo_w		bigint;
ie_local_cadastro_w			smallint;
nr_seq_ocorrencia_ww			bigint;
cd_pessoa_fisica_w			bigint;
ie_tipo_conta_w				varchar(2);
cd_cgc_cooperativa_w			varchar(14);
nr_seq_grupo_produto_w			pls_ocorrencia_regra.nr_seq_grupo_produto%type;
ie_grupo_produto_w			varchar(2) := 'N';
dt_referencia_ww			timestamp;
dt_nascimento_w				timestamp;
ie_reconsistencia_w			varchar(10);
qt_regra_w				bigint;
nr_seq_pagador_w			bigint;
ie_pagador_isento_w			varchar(1)	:= 'N';
ie_tipo_data_envio_rec_w		pls_ocorrencia_regra.ie_tipo_data_envio_rec%type;
ie_coparticipacao_zerada_w		pls_ocorrencia_regra.ie_coparticipacao_zerada%type;
ie_coparticipacao_w			varchar(1);
cd_prestador_exec_w			varchar(20);
nr_seq_prestador_exec_w			bigint;
nr_seq_estrut_mat_w			bigint;
cd_area_procedimento_w			pls_ocorrencia_regra.cd_area_procedimento%type;
cd_especialidade_w			pls_ocorrencia_regra.cd_especialidade%type;
cd_grupo_proc_w				pls_ocorrencia_regra.cd_grupo_proc%type;
ie_origem_proced_regra_w		bigint;
nr_seq_grupo_rec_w			pls_ocorrencia_regra.nr_seq_grupo_rec%type;
qt_item_existe_conta_w			bigint;
nr_seq_participante_ww			bigint;
ie_medico_cooperado_solic_w		pls_ocorrencia_regra.ie_medico_cooperado_solic%type;
cd_medico_executor_solic_w		pls_ocorrencia_regra.cd_medico_executor_solic%type;
nr_seq_conselho_solic_w			pls_ocorrencia_regra.nr_seq_conselho_solic%type;
nr_seq_proc_espec_solic_w		pls_ocorrencia_regra.nr_seq_proc_espec_solic%type;
nr_seq_prestador_pag_w			pls_ocorrencia_regra.nr_seq_prestador_pag%type;
ie_retorno_w				varchar(1);
ie_nasc_morto_w				pls_ocorrencia_regra.ie_consiste_decl_nasc_morto%type;
qt_declaracao_obito_w			bigint;
qt_nasc_mortos_w			smallint;
qt_dias_vencido_w			bigint;
ie_origem_ocorrencia_w			varchar(10);
dt_inicio_vigencia_w			pls_ocorrencia_regra.dt_inicio_vigencia%type;
dt_fim_vigencia_w			pls_ocorrencia_regra.dt_fim_vigencia%type;
ie_complemento_conta_w			pls_ocorrencia_regra.ie_complemento_conta%type;
ie_tipo_guia_ww				pls_ocorrencia_regra.ie_tipo_guia%type;
ie_preco_ww				pls_ocorrencia_regra.ie_preco%type;
ie_tipo_segurado_ww			pls_ocorrencia_regra.ie_tipo_segurado%type;
nr_contrato_ww				pls_ocorrencia_regra.nr_contrato%type;
ie_sexo_ww				varchar(2);
nr_seq_plano_w				pls_ocorrencia_regra.nr_seq_plano%type;
ie_local_cadastro_ww			pls_ocorrencia_regra.ie_local_cadastro%type;
ie_tipo_pagador_w			pls_ocorrencia_regra.ie_tipo_pagador%type;
dt_dia_semana_w				pls_ocorrencia_regra.dt_dia_semana%type := 0;
nr_seq_tipo_atendimento_w		pls_ocorrencia_regra.nr_seq_tipo_atendimento%type;
ie_tipo_processo_autor_w		pls_ocorrencia_regra.ie_tipo_processo_autor%type;
ie_carater_internacao_ww		pls_ocorrencia_regra.ie_carater_internacao%type;
ie_tipo_contrato_intercambio_w		pls_ocorrencia_regra.ie_tipo_contrato_intercambio%type;
nr_seq_congenere_ww			pls_ocorrencia_regra.nr_seq_congenere%type;
nr_seq_intercambio_ww			pls_ocorrencia_regra.nr_seq_intercambio%type;
ie_regulamentacao_ww			pls_ocorrencia_regra.ie_regulamentacao%type;
nr_seq_clinica_ww			bigint;
ie_tipo_consulta_ww			smallint;
cd_convenio_ww				integer;
cd_categoria_ww				varchar(10);
nr_seq_tipo_acomod_conta_ww		bigint;
nr_seq_tipo_acomodacao_ww		bigint;
ie_consulta_urgencia_ww			varchar(2);
sg_estado_operadora_ww			pls_ocorrencia_regra.sg_estado_operadora%type;
ie_tipo_atend_tiss_ww			varchar(2);
ie_origem_conta_w			pls_ocorrencia_regra.ie_origem_conta%type;
ie_exige_senha_externa_w		pls_ocorrencia_regra.ie_exige_senha_externa%type;
ie_tipo_intercambio_ww			pls_ocorrencia_regra.ie_tipo_intercambio%type;
ie_produto_inativo_ww			pls_ocorrencia_regra.ie_produto_inativo%type := 'N';
ie_conta_intercambio_ww			pls_ocorrencia_regra.ie_conta_intercambio%type;
ds_observacao_out_w			varchar(4000):= '';
nr_seq_grupo_material_w			pls_ocorrencia_regra.nr_seq_grupo_material%type;
ie_grupo_material_w			varchar(1);
nr_seq_regra_duplic_w			pls_ocorrencia_regra.nr_seq_regra_duplic%type;
ds_w					varchar(4000);
nr_seq_conta_duplic_w			bigint;
nr_seq_proc_partic_w			pls_ocorrencia_regra.nr_seq_proc_partic%type;
ie_duplicidade_w			varchar(2);
ie_consistencia_valor_w 		pls_ocorrencia_regra.ie_consistencia_valor%type;
vl_calculado_w				double precision;
vl_apresentado_w			double precision;
vl_max_item_w				pls_ocorrencia_regra.vl_max_item%type;
vl_minimo_item_w			pls_ocorrencia_regra.vl_minimo_item%type;
ie_tipo_despesa_ww			varchar(1);
tx_intercambio_w			double precision;
tx_intercambio_imp_w			double precision;
nr_seq_evento_w				bigint;
ie_co_preco_operadora_w			varchar(10);
vl_custo_operacional_w			double precision;
ie_coparticipacao_ww			varchar(10);
ie_tipo_desp_proc_w			pls_ocorrencia_regra.ie_tipo_desp_proc%type;
ie_tipo_despesa_mat_w			pls_ocorrencia_regra.ie_tipo_despesa_mat%type;
ie_exige_hora_final_w			pls_ocorrencia_regra.ie_exige_hora_final%type;
ie_exige_hora_item_w			pls_ocorrencia_regra.ie_exige_hora_item%type;
ie_taxa_intercambio_w			pls_ocorrencia_regra.ie_taxa_intercambio%type;
ie_qtd_item_fracionada_w		pls_ocorrencia_regra.ie_qtd_item_fracionada%type;
ie_fracionado_w				varchar(1);
qt_procedimento_w			double precision;
qt_material_w				bigint;
ie_sem_evento_w				pls_ocorrencia_regra.ie_sem_evento%type;
ie_regra_valor_co_w			pls_ocorrencia_regra.ie_regra_valor_co%type;
ie_regra_valor_copartic_w		pls_ocorrencia_regra.ie_regra_valor_copartic%type;
ie_autorizacao_especial_w		varchar(1);
qt_minima_w				double precision;
qt_maxima_w				double precision;
qt_idade_minima_w			double precision;
qt_idade_maxima_w			double precision;
ie_sexo_exclusivo_w			varchar(1)	:= 'N';
ie_bloqueia_custo_op_w			varchar(5);
ie_bloqueia_pre_pag_w			varchar(5);
ie_bloqueia_intercambio_w		varchar(5);
ie_bloqueia_prod_nao_reg_w		varchar(5);
ie_bloqueia_prod_reg_w			varchar(5);
nr_seq_restricao_w			bigint;
qt_solic_lib_mat_med_w			double precision;
ie_consiste_qtd_w			varchar(1)	:= 'N';
ie_consiste_sexo_w			varchar(1)	:= 'N';
ie_consiste_idade_w			varchar(1)	:= 'N';
ie_mat_autorizacao_esp_w		pls_ocorrencia_regra.ie_mat_autorizacao_esp%type	:= 'N';
ie_nao_utilizado_w			pls_ocorrencia_regra.ie_nao_utilizado%type;
qt_item_solic_w				double precision;
qt_item_autorizado_w			double precision;
ie_exige_autorizacao_w			varchar(1);
ie_gerar_oc_pacote_w			varchar(1);
ie_pacote_honorario_w			pls_ocorrencia_regra.ie_pacote_honorario%type;
ie_consiste_qtd_ww			pls_ocorrencia_regra.ie_consiste_qtd%type;
ie_consiste_idade_ww			pls_ocorrencia_regra.ie_consiste_idade%type;
ie_consiste_sexo_ww			pls_ocorrencia_regra.ie_consiste_sexo%type;
ie_bloqueio_mat_w			pls_ocorrencia_regra.ie_bloqueio_mat%type;
ie_exige_medico_w			pls_ocorrencia_regra.ie_exige_medico%type;
ie_exige_fornecedor_w			pls_ocorrencia_regra.ie_exige_fornecedor%type;
nr_seq_prest_fornec_w			bigint;
ie_fornecedor_w				varchar(1);
nr_nota_fiscal_mat_w			numeric(20);
ie_nota_fiscal_w			varchar(2);
ie_exige_nf_w				pls_ocorrencia_regra.ie_exige_nf%type;
cd_usuario_plano_seg_w			varchar(30);
ie_tipo_internado_regra_w		varchar(1);
cd_procedimento_w			pls_ocorrencia_regra.cd_procedimento%type;
ie_origem_proced_w			pls_ocorrencia_regra.ie_origem_proced%type;
nr_seq_material_w			pls_ocorrencia_regra.nr_seq_material%type	:= null;
nr_seq_conta_proc_w			pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w			pls_conta_mat.nr_sequencia%type;
ie_tipo_ocorrencia_w			varchar(3);
cd_area_procedimento_regra_w		bigint;
cd_grupo_proc_regra_w			bigint;
cd_especialidade_regra_w		bigint;
ie_validacao_compl_prest_w		varchar(1)	:= 'S';
ie_regra_cong_rec_fat_w			pls_ocorrencia_regra.ie_regra_cong_rec_fat%type	:= 'N';
ie_permite_w				varchar(1)	:= 'S';
nr_seq_ops_congenere_w			bigint;
cd_cgc_estab_w				varchar(14);
nr_seq_cooperativa_w			bigint;
ie_data_conta_w				pls_ocorrencia_regra.ie_data_conta%type;
ie_data_item_w				pls_ocorrencia_regra.ie_data_item%type;
dt_alta_int_w				timestamp;
dt_entrada_int_w			timestamp;
ie_gerar_ocorrencia_out_w		varchar(1):= 'S';
dt_atendimento_w			timestamp;
cd_espec_medica_solic_w			pls_ocorrencia_regra.cd_espec_medica_solic%type;
cd_espec_medica_exec_w			pls_ocorrencia_regra.cd_espec_medica_exec%type;
ie_pcmso_w				pls_ocorrencia_regra.ie_pcmso%type;
ie_digitacao_portal_w			pls_ocorrencia_regra.ie_digitacao_portal%type;
ie_restringe_estab_w			varchar(2);
cd_pessoa_fisica_consist_w		varchar(10);
cd_cgc_consist_w			varchar(14);
nr_seq_prestador_consist_w		bigint;
ie_existe_regra_w			varchar(5);
nr_seq_regra_carteira_w			pls_ocorrencia_regra.nr_seq_regra_atend_cart%type;
ie_glosar_cart_w			varchar(1);
qt_participante_w			bigint;
qt_utilizada_w				bigint;
ie_autorizado_w				varchar(255);
qt_ocorrencia_partic_w			bigint;
nr_seq_grupo_rec_ww			bigint;
nr_seq_prestador_ww			bigint;
nr_seq_classificacao_ww			bigint;
ie_internacao_w				varchar(1);
ie_consiste_material_w			varchar(1);
ie_consiste_mat_prestador_w		pls_ocorrencia_regra.ie_consiste_mat_prestador%type;
ie_consiste_auxiliar_w			pls_ocorrencia_regra.ie_consiste_auxiliar%type := 'N';
ie_qtd_auxiliar_maior_w			varchar(1):= 'N';
nr_auxiliares_w				bigint;
cd_cgc_w				varchar(14);
ie_cooperativa_w			pls_ocorrencia_regra.ie_cooperativa%type := 'N';
qt_item_aut_mat_w			bigint;
ds_motivo_saida_regra_w			varchar(255);
ie_tipo_pessoa_prestador_w		pls_ocorrencia_regra.ie_tipo_pessoa_prestador%type;
ie_goto_w				varchar(1);
qt_feriado_w				bigint;
cd_doenca_cid_conta_w			varchar(50);
nr_seq_grupo_doenca_regra_w		pls_ocorrencia_regra.nr_seq_grupo_doenca%type;
ie_grupo_doenca_w			varchar(1);
qt_minimo_item_w			pls_ocorrencia_regra.qt_min_item_conta%type;
qt_maximo_item_w			pls_ocorrencia_regra.qt_max_item_conta%type;
ie_regra_valor_pos_estab_w		pls_ocorrencia_regra.ie_regra_valor_pos_estab%type;
ie_geracao_pos_estabelecido_w		varchar(255);
ie_calculo_pos_estab_w			varchar(1);
vl_pos_estab_w				double precision;
ie_tipo_consistencia_valor_w		pls_ocorrencia_regra.ie_tipo_consistencia_valor%type;
nr_seq_ocorrencia_p_w			pls_ocorrencia.nr_sequencia%type;
cd_estabelecimento_p_w			estabelecimento.cd_estabelecimento%type;
nr_seq_conta_p_w			pls_conta.nr_sequencia%type;
ie_aplicacao_regra_p_w			varchar(3);
ie_tipo_guia_p_w			varchar(2);
cd_guia_pesquisa_w			varchar(20);
cd_procedimento_p_w			bigint;
ie_origem_proced_p_w			bigint;
nr_seq_prestador_conta_w		bigint;
ie_tipo_guia_conta_w			varchar(2);
cd_cooperativa_conta_w			varchar(10);
ds_indicacao_clinica_conta_w		varchar(500);
nr_seq_fatura_conta_w			bigint;
ie_status_fatura_w			varchar(255);
dt_emissao_conta_w			timestamp;
ie_proc_mat_w				pls_ocorrencia_regra.ie_proc_mat%type;
ie_proc_mat_regra_w			varchar(255);
ie_pcmso_regra_w			varchar(255);
ie_pre_analise_ocor_w			varchar(255);
nr_seq_analise_w			bigint;
ie_excecao_ocor_w			varchar(255);
qt_ocor_analise_w			integer;
ie_excecao_ocor_ww			varchar(255);
qt_ocorr_analise_w			integer;
nr_seq_tipo_atend_conta_w		bigint;
ie_origem_protocolo_w			varchar(255);
cd_prestador_exec_param_w		varchar(20);
ie_internado_regra_w			pls_ocorrencia_regra.ie_internado%type;
qt_guia_relacionada_inter_w		integer;
ie_consiste_co_duplic_w			pls_ocorrencia_regra.ie_consiste_co_mat_duplic_int%type;
ie_gerar_co_duplic_w			varchar(1);
dt_protocolo_w				timestamp;
nr_seq_duplic_grau_part_w		pls_ocorrencia_regra.nr_seq_duplic_grau_part%type;
ie_consiste_prest_fornec_w		pls_ocorrencia_regra.ie_consiste_prest_fornec%type;
sg_cons_prof_prest_w			varchar(12);
nr_cons_prof_prest_w			varchar(15);
sg_uf_cons_prest_w			varchar(2);
qt_saldo_w				pls_conta_proc.qt_procedimento%type;
nr_fatura_dup_w				ptu_fatura.nr_fatura%type;
vl_taxa_intercambio_w			double precision;
vl_taxa_intercambio_imp_w		double precision;
nr_seq_guia_referencia_w		pls_conta.nr_seq_guia%type;
nr_seq_guia_conta_w			pls_conta.nr_seq_guia%type;
qt_libera_guia_w			integer;
nr_seq_regra_autor_w			pls_regra_autorizacao.nr_sequencia%type;
qt_regra_prest_w			integer;
ie_ocor_estab_w				pls_controle_estab.ie_ocorrencia%type := pls_obter_se_controle_estab('GO');
ie_tipo_segurado_conta_w	pls_conta.ie_tipo_segurado%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_motivo_glosa,
		coalesce(a.ie_auditoria,'S'),
		a.cd_ocorrencia,
		coalesce(a.ie_proc_mat,'A'),
		coalesce(a.ie_pre_analise,'N')
	from	pls_ocorrencia	a
	where	a.ie_situacao		= 'A'
	and	a.cd_estabelecimento	= cd_estabelecimento_p_w
	and	ie_ocor_estab_w		= 'S'
	and	((a.nr_sequencia	= nr_seq_ocorrencia_p_w) or (coalesce(nr_seq_ocorrencia_p_w::text, '') = ''))
	and	a.ie_glosa	= 'N' --Não precisa consistir regras de glosa interna.
	and (a.ie_regra_combinada = 'N' or coalesce(a.ie_regra_combinada::text, '') = '') /* As ocorrências combinadas são tratadas em outra procedure */
	and	exists (SELECT	1
			from	pls_ocorrencia_regra x
			where	x.nr_seq_ocorrencia	= a.nr_sequencia
			and	x.ie_aplicacao_regra = 'C')
	
union all

	select	a.nr_sequencia,
		a.nr_seq_motivo_glosa,
		coalesce(a.ie_auditoria,'S'),
		a.cd_ocorrencia,
		coalesce(a.ie_proc_mat,'A'),
		coalesce(a.ie_pre_analise,'N')
	from	pls_ocorrencia	a
	where	a.ie_situacao		= 'A'
	and	ie_ocor_estab_w		= 'N'
	and	((a.nr_sequencia	= nr_seq_ocorrencia_p_w) or (coalesce(nr_seq_ocorrencia_p_w::text, '') = ''))
	and	a.ie_glosa	= 'N' --Não precisa consistir regras de glosa interna.
	and (a.ie_regra_combinada = 'N' or coalesce(a.ie_regra_combinada::text, '') = '') /* As ocorrências combinadas são tratadas em outra procedure */
	and	exists (select	1
			from	pls_ocorrencia_regra x
			where	x.nr_seq_ocorrencia	= a.nr_sequencia
			and	x.ie_aplicacao_regra = 'C')
	order by 1;

C02 CURSOR FOR
	-- Regras exclusivas de procedimento
	SELECT	a.nr_sequencia,
		a.nr_seq_estrutura,
		a.qt_liberada,
		a.ie_tipo_qtde,
		a.qt_tipo_quantidade,
		a.cd_doenca_cid,
		a.qt_dias_mensal_vencido,
		a.nr_seq_simultaneo,
		a.ie_guia_referencia,
		a.ie_benef_prestador,
		a.nr_seq_proc_espec,
		a.ie_consiste_exec_coop,
		a.ie_exige_procedimento,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.ie_item_fora_periodo_int,
		a.ie_dupla_internacao,
		a.nr_seq_grupo_prestador,
		a.ie_tipo_pessoa_qtde,
		a.ie_relacao_prest_pf,
		a.ie_regime_internacao,
		a.ie_afastamento_cooperado,
		a.ie_regra_qtde,
		a.ie_executa_uma_vez,
		a.ie_exige_indicacao_clinica,
		a.qt_diarias_permitida,
		a.qt_dias_envio,
		a.ie_tipo_data_envio,
		a.ie_medico,
		a.cd_medico_executor,
		a.vl_minimo,
		a.nr_seq_congenere_sup,
		a.ie_exceto_coop_sup,
		a.nr_seq_grupo_contrato,
		a.hr_inicial,
		a.hr_final,
		a.ie_item_dentro_periodo_int,
		a.ie_tipo_prestador,
		a.nr_seq_prestador,
		a.ie_relacao_prest_pf,
		a.nr_seq_tipo_prestador,
		a.nr_seq_classificacao,
		a.ie_somar_estrutura,
		a.nr_seq_concorrente,
		a.nr_seq_regra_cid_int,
		a.ie_qt_lib_posterior,
		a.cd_especialidade_medica,
		a.ie_validacao_cpt,
		a.nr_seq_proc_partic,
		a.nr_seq_grupo_servico,
		a.ie_med_exec_inativo,
		a.qt_idade_min,
		a.qt_idade_max,
		a.ie_unid_tempo_idade,
		a.qt_dias_cobranca_prev,
		a.ie_aut_nao_utilizado,
		a.ie_prestador_inativo,
		a.ie_prestador_exec,
		a.ie_consiste_qt_diaria,
		a.ie_atributo,
		a.nr_seq_saida_int,
		a.ie_nascido_vivo,
		a.nr_seq_grau_partic,
		a.ie_benef_autorizacao,
		a.ie_internacao_obstetrica,
		a.ie_consiste_qtd_aut,
		a.ie_medico_cooperado,
		a.nr_seq_regra_partic,
		a.nr_seq_material,
		a.ie_origem_valor,
		a.ie_tipo_data,
		a.ie_devolucao_carteira,
		a.nr_seq_regra_atrib,
		a.cd_prestador,
		a.ie_validade_carteira,
		a.ie_feriado,
		a.ie_tipo_feriado,
		a.ie_benef_rescindido,
		a.nr_seq_grupo_produto,
		a.nr_seq_conselho,
		a.ie_partic_diferente,
		a.ie_medico_cooperado_solic,
		a.cd_medico_executor_solic,
		a.nr_seq_conselho_solic,
		a.nr_seq_proc_espec_solic,
		a.ie_tipo_data_envio_rec,
		a.nr_seq_prestador_pag,
		a.ie_coparticipacao_zerada,
		a.ie_consiste_decl_nasc_morto,
		a.dt_inicio_vigencia,
		a.dt_fim_vigencia,
		a.ie_complemento_conta,
		a.ie_tipo_guia,
		a.ie_preco,
		a.ie_tipo_segurado,
		a.nr_contrato,
		a.ie_sexo,
		a.nr_seq_plano,
		a.ie_local_cadastro,
		a.ie_tipo_pagador,
		a.dt_dia_semana,
		a.nr_seq_tipo_atendimento,
		a.ie_tipo_processo_autor,
		a.ie_carater_internacao,
		a.ie_tipo_contrato_intercambio,
		a.nr_seq_congenere,
		a.nr_seq_intercambio,
		a.ie_regulamentacao,
		a.nr_seq_clinica,
		a.ie_tipo_consulta,
		a.cd_convenio,
		a.cd_categoria,
		a.nr_seq_tipo_acomod_conta,
		a.nr_seq_tipo_acomodacao,
		a.ie_consulta_urgencia,
		a.sg_estado_operadora,
		a.ie_tipo_atend_tiss,
		a.ie_origem_conta,
		a.ie_exige_senha_externa,
		a.ie_tipo_intercambio,
		a.ie_produto_inativo,
		a.ie_conta_intercambio,
		a.nr_seq_grupo_material,
		a.nr_seq_regra_duplic,
		a.ie_consistencia_valor,
		a.vl_max_item,
		a.vl_minimo_item,
		a.ie_tipo_desp_proc,
		a.ie_tipo_despesa_mat,
		a.ie_taxa_intercambio,
		a.ie_exige_hora_final,
		a.ie_exige_hora_item,
		a.ie_qtd_item_fracionada,
		a.ie_sem_evento,
		a.ie_regra_valor_co,
		a.ie_regra_valor_copartic,
		a.ie_mat_autorizacao_esp,
		a.ie_nao_utilizado,
		a.ie_pacote_honorario,
		a.ie_consiste_qtd,
		a.ie_consiste_idade,
		a.ie_consiste_sexo,
		a.ie_bloqueio_mat,
		a.ie_exige_medico,
		a.ie_exige_fornecedor,
		a.cd_area_procedimento,
		a.cd_grupo_proc,
		a.cd_especialidade,
		a.ie_regra_cong_rec_fat,
		a.ie_data_conta,
		a.ie_data_item,
		a.ie_exige_nf,
		a.cd_espec_medica_solic,
		a.cd_espec_medica_exec,
		a.ie_digitacao_portal,
		a.nr_seq_regra_atend_cart,
		a.ie_tipo_internado,
		a.nr_seq_grupo_rec,
		a.ie_consiste_mat_prestador,
		a.ie_consiste_auxiliar,
		coalesce(a.ie_cooperativa,'N'),
		a.ie_tipo_pessoa_prestador,
		a.cd_usuario_plano,
		a.nr_seq_grupo_doenca,
		a.qt_min_item_conta,
		a.qt_max_item_conta,
		a.ie_regra_valor_pos_estab,
		a.ie_tipo_consistencia_valor,
		coalesce(a.ie_proc_mat,'A'),
		coalesce(a.ie_pcmso,'N'),
		a.ie_internado,
		a.ie_consiste_co_mat_duplic_int,
		a.vl_minimo_apresentado,
		a.nr_seq_grupo_cooperativa,
		a.nr_seq_duplic_grau_part,
		a.ie_nota_intercambio,
		a.ie_consiste_prest_fornec,
		(SELECT	count(1)
		from	pls_ocor_regra_prest x
		where	x.nr_seq_ocor_regra = a.nr_sequencia) qt_regra_prest
	from	pls_ocorrencia_regra a
	where	a.nr_seq_ocorrencia		= nr_seq_ocorrencia_w
	and	a.cd_procedimento		= cd_procedimento_w
	and	a.ie_origem_proced		= ie_origem_proced_w
	and	a.ie_situacao			= 'A'
	and	a.ie_aplicacao_regra 		= ie_aplicacao_regra_p_w
	and (a.ie_tipo_ocorrencia 		= ie_tipo_ocorrencia_w)
	and	(nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '')
	and (a.ie_proc_mat = ie_proc_mat_w or coalesce(a.ie_proc_mat::text, '') = '' or coalesce(ie_proc_mat_w,'A') = 'A')
	and (a.ie_proc_mat = 'A' or
		coalesce(a.ie_proc_mat::text, '') = '' or (a.ie_proc_mat = 'P' and (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '')) or (a.ie_proc_mat = 'M' and (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> ''))
		)
	
union all

	-- Com regra de participante
	select	a.nr_sequencia,
		a.nr_seq_estrutura,
		a.qt_liberada,
		a.ie_tipo_qtde,
		a.qt_tipo_quantidade,
		a.cd_doenca_cid,
		a.qt_dias_mensal_vencido,
		a.nr_seq_simultaneo,
		a.ie_guia_referencia,
		a.ie_benef_prestador,
		a.nr_seq_proc_espec,
		a.ie_consiste_exec_coop,
		a.ie_exige_procedimento,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.ie_item_fora_periodo_int,
		a.ie_dupla_internacao,
		a.nr_seq_grupo_prestador,
		a.ie_tipo_pessoa_qtde,
		a.ie_relacao_prest_pf,
		a.ie_regime_internacao,
		a.ie_afastamento_cooperado,
		a.ie_regra_qtde,
		a.ie_executa_uma_vez,
		a.ie_exige_indicacao_clinica,
		a.qt_diarias_permitida,
		a.qt_dias_envio,
		a.ie_tipo_data_envio,
		a.ie_medico,
		a.cd_medico_executor,
		a.vl_minimo,
		a.nr_seq_congenere_sup,
		a.ie_exceto_coop_sup,
		a.nr_seq_grupo_contrato,
		a.hr_inicial,
		a.hr_final,
		a.ie_item_dentro_periodo_int,
		a.ie_tipo_prestador,
		a.nr_seq_prestador,
		a.ie_relacao_prest_pf,
		a.nr_seq_tipo_prestador,
		a.nr_seq_classificacao,
		a.ie_somar_estrutura,
		a.nr_seq_concorrente,
		a.nr_seq_regra_cid_int,
		a.ie_qt_lib_posterior,
		a.cd_especialidade_medica,
		a.ie_validacao_cpt,
		a.nr_seq_proc_partic,
		a.nr_seq_grupo_servico,
		a.ie_med_exec_inativo,
		a.qt_idade_min,
		a.qt_idade_max,
		a.ie_unid_tempo_idade,
		a.qt_dias_cobranca_prev,
		a.ie_aut_nao_utilizado,
		a.ie_prestador_inativo,
		a.ie_prestador_exec,
		a.ie_consiste_qt_diaria,
		a.ie_atributo,
		a.nr_seq_saida_int,
		a.ie_nascido_vivo,
		a.nr_seq_grau_partic,
		a.ie_benef_autorizacao,
		a.ie_internacao_obstetrica,
		a.ie_consiste_qtd_aut,
		a.ie_medico_cooperado,
		a.nr_seq_regra_partic,
		a.nr_seq_material,
		a.ie_origem_valor,
		a.ie_tipo_data,
		a.ie_devolucao_carteira,
		a.nr_seq_regra_atrib,
		a.cd_prestador,
		a.ie_validade_carteira,
		a.ie_feriado,
		a.ie_tipo_feriado,
		a.ie_benef_rescindido,
		a.nr_seq_grupo_produto,
		a.nr_seq_conselho,
		a.ie_partic_diferente,
		a.ie_medico_cooperado_solic,
		a.cd_medico_executor_solic,
		a.nr_seq_conselho_solic,
		a.nr_seq_proc_espec_solic,
		a.ie_tipo_data_envio_rec,
		a.nr_seq_prestador_pag,
		a.ie_coparticipacao_zerada,
		a.ie_consiste_decl_nasc_morto,
		a.dt_inicio_vigencia,
		a.dt_fim_vigencia,
		a.ie_complemento_conta,
		a.ie_tipo_guia,
		a.ie_preco,
		a.ie_tipo_segurado,
		a.nr_contrato,
		a.ie_sexo,
		a.nr_seq_plano,
		a.ie_local_cadastro,
		a.ie_tipo_pagador,
		a.dt_dia_semana,
		a.nr_seq_tipo_atendimento,
		a.ie_tipo_processo_autor,
		a.ie_carater_internacao,
		a.ie_tipo_contrato_intercambio,
		a.nr_seq_congenere,
		a.nr_seq_intercambio,
		a.ie_regulamentacao,
		a.nr_seq_clinica,
		a.ie_tipo_consulta,
		a.cd_convenio,
		a.cd_categoria,
		a.nr_seq_tipo_acomod_conta,
		a.nr_seq_tipo_acomodacao,
		a.ie_consulta_urgencia,
		a.sg_estado_operadora,
		a.ie_tipo_atend_tiss,
		a.ie_origem_conta,
		a.ie_exige_senha_externa,
		a.ie_tipo_intercambio,
		a.ie_produto_inativo,
		a.ie_conta_intercambio,
		a.nr_seq_grupo_material,
		a.nr_seq_regra_duplic,
		a.ie_consistencia_valor,
		a.vl_max_item,
		a.vl_minimo_item,
		a.ie_tipo_desp_proc,
		a.ie_tipo_despesa_mat,
		a.ie_taxa_intercambio,
		a.ie_exige_hora_final,
		a.ie_exige_hora_item,
		a.ie_qtd_item_fracionada,
		a.ie_sem_evento,
		a.ie_regra_valor_co,
		a.ie_regra_valor_copartic,
		a.ie_mat_autorizacao_esp,
		a.ie_nao_utilizado,
		a.ie_pacote_honorario,
		a.ie_consiste_qtd,
		a.ie_consiste_idade,
		a.ie_consiste_sexo,
		a.ie_bloqueio_mat,
		a.ie_exige_medico,
		a.ie_exige_fornecedor,
		a.cd_area_procedimento,
		a.cd_grupo_proc,
		a.cd_especialidade,
		a.ie_regra_cong_rec_fat,
		a.ie_data_conta,
		a.ie_data_item,
		a.ie_exige_nf,
		a.cd_espec_medica_solic,
		a.cd_espec_medica_exec,
		a.ie_digitacao_portal,
		a.nr_seq_regra_atend_cart,
		a.ie_tipo_internado,
		a.nr_seq_grupo_rec,
		a.ie_consiste_mat_prestador,
		a.ie_consiste_auxiliar,
		coalesce(a.ie_cooperativa,'N'),
		a.ie_tipo_pessoa_prestador,
		a.cd_usuario_plano,
		a.nr_seq_grupo_doenca,
		a.qt_min_item_conta,
		a.qt_max_item_conta,
		a.ie_regra_valor_pos_estab,
		a.ie_tipo_consistencia_valor,
		coalesce(a.ie_proc_mat,'A'),
		coalesce(a.ie_pcmso,'N'),
		a.ie_internado,
		a.ie_consiste_co_mat_duplic_int,
		a.vl_minimo_apresentado,
		a.nr_seq_grupo_cooperativa,
		a.nr_seq_duplic_grau_part,
		a.ie_nota_intercambio,
		a.ie_consiste_prest_fornec,
		(select	count(1)
		from	pls_ocor_regra_prest x
		where	x.nr_seq_ocor_regra = a.nr_sequencia) qt_regra_prest
	from	pls_oc_regra_proc_partic b,
		pls_ocorrencia_regra	a
	where	a.nr_seq_ocorrencia		= nr_seq_ocorrencia_w
	and	a.nr_seq_proc_partic		= b.nr_sequencia
	and	b.cd_procedimento		= cd_procedimento_w
	and	b.ie_origem_proced		= ie_origem_proced_w
	and	a.ie_situacao			= 'A'
	and	a.ie_aplicacao_regra 		= ie_aplicacao_regra_p_w
	and (a.ie_tipo_ocorrencia 		= ie_tipo_ocorrencia_w)
	and	(nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '')
	and (a.ie_proc_mat = ie_proc_mat_w or coalesce(a.ie_proc_mat::text, '') = '' or coalesce(ie_proc_mat_w,'A') = 'A')
	and (a.ie_proc_mat = 'A' or
		coalesce(a.ie_proc_mat::text, '') = '' or (a.ie_proc_mat = 'P' and (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '')) or (a.ie_proc_mat = 'M' and (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> ''))
		)
	
union all

	-- Outros
	select	a.nr_sequencia,
		a.nr_seq_estrutura,
		a.qt_liberada,
		a.ie_tipo_qtde,
		a.qt_tipo_quantidade,
		a.cd_doenca_cid,
		a.qt_dias_mensal_vencido,
		a.nr_seq_simultaneo,
		a.ie_guia_referencia,
		a.ie_benef_prestador,
		a.nr_seq_proc_espec,
		a.ie_consiste_exec_coop,
		a.ie_exige_procedimento,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.ie_item_fora_periodo_int,
		a.ie_dupla_internacao,
		a.nr_seq_grupo_prestador,
		a.ie_tipo_pessoa_qtde,
		a.ie_relacao_prest_pf,
		a.ie_regime_internacao,
		a.ie_afastamento_cooperado,
		a.ie_regra_qtde,
		a.ie_executa_uma_vez,
		a.ie_exige_indicacao_clinica,
		a.qt_diarias_permitida,
		a.qt_dias_envio,
		a.ie_tipo_data_envio,
		a.ie_medico,
		a.cd_medico_executor,
		a.vl_minimo,
		a.nr_seq_congenere_sup,
		a.ie_exceto_coop_sup,
		a.nr_seq_grupo_contrato,
		a.hr_inicial,
		a.hr_final,
		a.ie_item_dentro_periodo_int,
		a.ie_tipo_prestador,
		a.nr_seq_prestador,
		a.ie_relacao_prest_pf,
		a.nr_seq_tipo_prestador,
		a.nr_seq_classificacao,
		a.ie_somar_estrutura,
		a.nr_seq_concorrente,
		a.nr_seq_regra_cid_int,
		a.ie_qt_lib_posterior,
		a.cd_especialidade_medica,
		a.ie_validacao_cpt,
		a.nr_seq_proc_partic,
		a.nr_seq_grupo_servico,
		a.ie_med_exec_inativo,
		a.qt_idade_min,
		a.qt_idade_max,
		a.ie_unid_tempo_idade,
		a.qt_dias_cobranca_prev,
		a.ie_aut_nao_utilizado,
		a.ie_prestador_inativo,
		a.ie_prestador_exec,
		a.ie_consiste_qt_diaria,
		a.ie_atributo,
		a.nr_seq_saida_int,
		a.ie_nascido_vivo,
		a.nr_seq_grau_partic,
		a.ie_benef_autorizacao,
		a.ie_internacao_obstetrica,
		a.ie_consiste_qtd_aut,
		a.ie_medico_cooperado,
		a.nr_seq_regra_partic,
		a.nr_seq_material,
		a.ie_origem_valor,
		a.ie_tipo_data,
		a.ie_devolucao_carteira,
		a.nr_seq_regra_atrib,
		a.cd_prestador,
		a.ie_validade_carteira,
		a.ie_feriado,
		a.ie_tipo_feriado,
		a.ie_benef_rescindido,
		a.nr_seq_grupo_produto,
		a.nr_seq_conselho,
		a.ie_partic_diferente,
		a.ie_medico_cooperado_solic,
		a.cd_medico_executor_solic,
		a.nr_seq_conselho_solic,
		a.nr_seq_proc_espec_solic,
		a.ie_tipo_data_envio_rec,
		a.nr_seq_prestador_pag,
		a.ie_coparticipacao_zerada,
		a.ie_consiste_decl_nasc_morto,
		a.dt_inicio_vigencia,
		a.dt_fim_vigencia,
		a.ie_complemento_conta,
		a.ie_tipo_guia,
		a.ie_preco,
		a.ie_tipo_segurado,
		a.nr_contrato,
		a.ie_sexo,
		a.nr_seq_plano,
		a.ie_local_cadastro,
		a.ie_tipo_pagador,
		a.dt_dia_semana,
		a.nr_seq_tipo_atendimento,
		a.ie_tipo_processo_autor,
		a.ie_carater_internacao,
		a.ie_tipo_contrato_intercambio,
		a.nr_seq_congenere,
		a.nr_seq_intercambio,
		a.ie_regulamentacao,
		a.nr_seq_clinica,
		a.ie_tipo_consulta,
		a.cd_convenio,
		a.cd_categoria,
		a.nr_seq_tipo_acomod_conta,
		a.nr_seq_tipo_acomodacao,
		a.ie_consulta_urgencia,
		a.sg_estado_operadora,
		a.ie_tipo_atend_tiss,
		a.ie_origem_conta,
		a.ie_exige_senha_externa,
		a.ie_tipo_intercambio,
		a.ie_produto_inativo,
		a.ie_conta_intercambio,
		a.nr_seq_grupo_material,
		a.nr_seq_regra_duplic,
		a.ie_consistencia_valor,
		a.vl_max_item,
		a.vl_minimo_item,
		a.ie_tipo_desp_proc,
		a.ie_tipo_despesa_mat,
		a.ie_taxa_intercambio,
		a.ie_exige_hora_final,
		a.ie_exige_hora_item,
		a.ie_qtd_item_fracionada,
		a.ie_sem_evento,
		a.ie_regra_valor_co,
		a.ie_regra_valor_copartic,
		a.ie_mat_autorizacao_esp,
		a.ie_nao_utilizado,
		a.ie_pacote_honorario,
		a.ie_consiste_qtd,
		a.ie_consiste_idade,
		a.ie_consiste_sexo,
		a.ie_bloqueio_mat,
		a.ie_exige_medico,
		a.ie_exige_fornecedor,
		a.cd_area_procedimento,
		a.cd_grupo_proc,
		a.cd_especialidade,
		a.ie_regra_cong_rec_fat,
		a.ie_data_conta,
		a.ie_data_item,
		a.ie_exige_nf,
		a.cd_espec_medica_solic,
		a.cd_espec_medica_exec,
		a.ie_digitacao_portal,
		a.nr_seq_regra_atend_cart,
		a.ie_tipo_internado,
		a.nr_seq_grupo_rec,
		a.ie_consiste_mat_prestador,
		a.ie_consiste_auxiliar,
		coalesce(a.ie_cooperativa,'N'),
		a.ie_tipo_pessoa_prestador,
		a.cd_usuario_plano,
		a.nr_seq_grupo_doenca,
		a.qt_min_item_conta,
		a.qt_max_item_conta,
		a.ie_regra_valor_pos_estab,
		a.ie_tipo_consistencia_valor,
		coalesce(a.ie_proc_mat,'A'),
		coalesce(a.ie_pcmso,'N'),
		a.ie_internado,
		a.ie_consiste_co_mat_duplic_int,
		a.vl_minimo_apresentado,
		a.nr_seq_grupo_cooperativa,
		a.nr_seq_duplic_grau_part,
		a.ie_nota_intercambio,
		a.ie_consiste_prest_fornec,
		(select	count(1)
		from	pls_ocor_regra_prest x
		where	x.nr_seq_ocor_regra = a.nr_sequencia) qt_regra_prest
	from	pls_ocorrencia_regra	a
	where	a.nr_seq_ocorrencia		= nr_seq_ocorrencia_w
	and	a.ie_situacao			= 'A'
	and	a.ie_aplicacao_regra 		= ie_aplicacao_regra_p_w
	and (a.ie_tipo_ocorrencia 		= ie_tipo_ocorrencia_w)
	and (a.ie_proc_mat = ie_proc_mat_w or coalesce(a.ie_proc_mat::text, '') = '' or coalesce(ie_proc_mat_w,'A') = 'A')
	and (a.ie_proc_mat = 'A' or
		coalesce(a.ie_proc_mat::text, '') = '' or (a.ie_proc_mat = 'P' and (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '')) or (a.ie_proc_mat = 'M' and (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> ''))
		)
	and	coalesce(a.cd_procedimento::text, '') = ''
	and	coalesce(a.nr_seq_proc_partic::text, '') = '';

C03 CURSOR FOR
	SELECT	distinct nr_seq_participante
	from	w_pls_ocorrencia_partic
	where	nr_seq_ocorrencia 	= nr_seq_ocorrencia_w
	and	nm_usuario	  	= nm_usuario_p
	group by nr_seq_participante;

type vetor_itens is table of itens index by integer;

/* Vetores */

vetor_itens_w		vetor_itens;
i	bigint	:= 1;
k	bigint	:= 1;

type vetor_ocor is table of ocor index by integer;

/* Vetores */

vetor_ocor_w		vetor_ocor;
total_ocor		bigint	:= 1;
ind_ocor		bigint	:= 1;

c04 CURSOR FOR
	/* Quando for individual apenas para a conta */

	SELECT	null,
		null,
		null,
		null,
		null
	
	where	coalesce(nr_seq_conta_proc_p,0) = 0
	and	coalesce(nr_seq_conta_mat_p,0) = 0
	and	coalesce(ie_toda_conta_p,'N') = 'N'
	
union all

	/* Quando for individual, apenas para o procedimento */

	SELECT	nr_seq_conta_proc_p,
		null,
		cd_procedimento_p,
		ie_origem_proced_p,
		null
	
	where	nr_seq_conta_proc_p > 0
	and	coalesce(ie_toda_conta_p,'N') = 'N'
	
union all

	/* Quando for individual, apenas par o material */

	select	null,
		nr_seq_conta_mat_p,
		null,
		null,
		nr_seq_material_p
	
	where	nr_seq_conta_mat_p > 0
	and	coalesce(ie_toda_conta_p,'N') = 'N'
	
union all

	/* Quando for para gerar ocorrência de toda a conta de uma vez */

	select	null,
		null,
		null,
		null,
		null
	
	where	ie_toda_conta_p = 'S'
	
union all

	select	a.nr_sequencia,
		null,
		cd_procedimento,
		ie_origem_proced,
		null
	from	pls_conta_proc a
	where	a.nr_seq_conta	= nr_seq_conta_p_w
	and	a.ie_status	not in ('D', 'M')
	and	ie_toda_conta_p = 'S'
	
union all

	select	null,
		a.nr_sequencia,
		null,
		null,
		nr_seq_material
	from	pls_conta_mat a
	where	nr_seq_conta	= nr_seq_conta_p_w
	and	a.ie_status	not in ('D', 'M')
	and	ie_toda_conta_p = 'S';

C05 CURSOR FOR
	SELECT	cd_ocorrencia,
		nr_seq_motivo_glosa,
		ie_auditoria,
		ie_pre_analise,
		ie_proc_mat,
		nr_seq_ocorrencia,
		ie_excecao
	from	w_pls_ocorrencia
	where	nr_seq_analise	= nr_seq_analise_w
	and	nm_usuario	= nm_usuario_p;


BEGIN
nr_seq_ocorrencia_p_w		:= nr_seq_ocorrencia_p;
cd_estabelecimento_p_w		:= cd_estabelecimento_p;
nr_seq_conta_p_w		:= nr_seq_conta_p;
ie_aplicacao_regra_p_w		:= ie_aplicacao_regra_p;
ie_tipo_guia_p_w		:= ie_tipo_guia_p;

ds_motivo_saida_regra_w		:= null;
ie_origem_ocorrencia_w		:= coalesce(ie_origem_ocorrencia_p,'D');
ie_reconsistencia_w		:= coalesce(ie_reconsistencia_p,'N');
qt_dias_vencido_w		:= coalesce(qt_dias_vencido_p,0);
ie_tipo_ocorrencia_w		:= ie_tipo_ocorrencia_p;

begin
select	cd_prestador
into STRICT	cd_prestador_exec_param_w
from	pls_prestador
where	nr_sequencia	= nr_seq_prestador_p;
exception
when others then
	cd_prestador_exec_param_w	:= null;
end;

/* Parâmetro para definir o tipo de conta digitada no portal
C - Complemento de contas web
D - Digitação de contas web
*/
ie_tipo_conta_web_w	:= ie_tipo_conta_web_p;

ie_conta_intercambio_w	:= 'N';

/*askono - tratei para que o seja intercâmbio ou operadora , o tipo de conta vem por parametro mas pode ser buscado da PLS_CONTA caso haja algum problema na restrição do cursor*/

if ( coalesce(ie_conta_intercambio_p,'O') = 'I') then
	ie_conta_intercambio_w	:= 'I'; -- intercambio
else
	ie_conta_intercambio_w	:= 'N';	-- operadora
end if;

ie_restringe_estab_w	:= pls_obter_se_controle_estab('CO');

select	coalesce(max(ie_calculo_coparticipacao),'P'),
	coalesce(max(ie_geracao_pos_estabelecido),'F'),
	coalesce(max(ie_calculo_pos_estab),'C')
into STRICT	ie_calculo_coparticipacao_w,
	ie_geracao_pos_estabelecido_w,
	ie_calculo_pos_estab_w
from	pls_parametros
where	((ie_restringe_estab_w	= 'S' AND cd_estabelecimento	= cd_estabelecimento_p_w) or (ie_restringe_estab_w	= 'N'));

/* Obter dados do segurado */

begin
select	b.nr_seq_contrato,
	b.ie_tipo_segurado,
	a.ie_sexo,
	b.cd_pessoa_fisica,
	coalesce(nr_seq_intercambio,0),
	nr_seq_congenere,
	coalesce(b.ie_local_cadastro,'0'),
	a.dt_nascimento,
	b.nr_seq_pagador,
	b.nr_seq_ops_congenere,
	coalesce(b.ie_pcmso,'N')
into STRICT	nr_seq_contrato_w,
	ie_tipo_segurado_w,
	ie_sexo_w,
	cd_pessoa_fisica_w,
	nr_seq_intercambio_w,
	nr_seq_congenere_w,
	ie_local_cadastro_w,
	dt_nascimento_w,
	nr_seq_pagador_w,
	nr_seq_ops_congenere_w,
	ie_pcmso_w
from	pessoa_fisica	a,
	pls_segurado	b
where	b.cd_pessoa_fisica	= a.cd_pessoa_fisica
and 	b.nr_sequencia		= nr_seq_segurado_p;
exception
when others then
	nr_seq_contrato_w 	:= 0;
	ie_tipo_segurado_w	:= '0';
	nr_seq_intercambio_w	:= 0;
	cd_pessoa_fisica_w	:= 0;
	ie_pcmso_w		:= 'N';
end;

select	max(nr_seq_congenere)
into STRICT	nr_seq_congenere_sup_w
from	pls_congenere
where	nr_sequencia	= nr_seq_congenere_w;
/*
cd_cgc_estab_w 		:= pls_obter_dados_outorgante(cd_estabelecimento_p,'C');
cd_usuario_plano_seg_w	:= pls_obter_carteira_segurado(nr_seq_segurado_p);*/
select	max(b.nr_sequencia)
into STRICT	nr_seq_cooperativa_w
from	pls_congenere b
where	b.ie_tipo_congenere = 'OP'
and	b.cd_cgc = cd_cgc_estab_w;

qt_idade_w		:= substr(obter_idade(dt_nascimento_w, clock_timestamp(), 'A'),1,10);
qt_idade_meses_w	:= substr(obter_idade(dt_nascimento_w, clock_timestamp(), 'M'),1,10);
cd_convenio_w		:= coalesce(pls_obter_conv_cat_segurado(nr_seq_segurado_p, 1),0);
cd_categoria_w		:= coalesce(pls_obter_conv_cat_segurado(nr_seq_segurado_p, 2),'0');


begin
select	coalesce(ie_tipo_contrato,'0')
into STRICT	ie_tipo_contrato_inter_w
from	pls_intercambio
where	nr_sequencia	= nr_seq_intercambio_w;
exception
when others then
	nr_seq_intercambio_w		:= 0;
	ie_tipo_contrato_inter_w	:= '0';
end;

/* Obter o código TISS do tipo de atendimento */

select	coalesce(max(cd_tiss),'01')
into STRICT	cd_tiss_atendimento_w
from	pls_tipo_atendimento
where	nr_sequencia	= nr_seq_tipo_atendimento_p;

/* Obter dados do contrato */

begin
select	nr_contrato
into STRICT	nr_contrato_w
from	pls_contrato
where	nr_sequencia	= nr_seq_contrato_w;
exception
when others then
	nr_contrato_w	:= 0;
end;

/* Obter dados do produto */

begin
select	ie_preco,
	ie_regulamentacao
into STRICT	ie_preco_w,
	ie_regulamentacao_w
from	pls_plano
where	nr_sequencia	= nr_seq_plano_p;
exception
when others then
	ie_preco_w	:= '0';
end;

/*obter acomodacao do plano*/

begin
select	nr_seq_tipo_acomodacao
into STRICT	nr_seq_tipo_acomodacao_w
from 	pls_plano_acomodacao
where	nr_seq_plano	= nr_seq_plano_p;
exception
when others then
	nr_seq_tipo_acomodacao_w	:= null;
end;

begin
select	cd_guia_referencia,
	cd_guia,
	coalesce(dt_atendimento_referencia, clock_timestamp()),
	nr_seq_protocolo,
	ie_carater_internacao,
	cd_medico_executor,
	cd_senha,
	(qt_nasc_vivos_prematuros)::numeric ,
	(qt_nasc_vivos_termo)::numeric ,
	(qt_obito_precoce)::numeric ,
	(qt_obito_tardio)::numeric ,
	nr_seq_clinica,
	ie_tipo_consulta,
	coalesce(ie_gestacao,'N'),
	coalesce(ie_aborto,'N'),
	coalesce(ie_parto_normal,'N'),
	coalesce(ie_complicacao_puerperio,'N'),
	coalesce(ie_complicacao_neonatal,'N'),
	coalesce(ie_parto_cesaria,'N'),
	coalesce(ie_baixo_peso,'N'),
	coalesce(ie_atend_rn_sala_parto,'N'),
	coalesce(ie_transtorno,'N'),
	cd_medico_solicitante,
	nr_seq_tipo_acomodacao,
	nr_seq_grau_partic,
	nr_seq_prestador_exec,
	qt_nasc_mortos,
	cd_senha_externa,
	dt_alta,
	dt_entrada,
	coalesce(dt_atendimento,dt_atendimento_imp),
	ie_tipo_guia,
	ie_regime_internacao,
	ie_origem_conta,
	nr_seq_prestador,
	nr_seq_saida_int,
	coalesce(ie_tipo_conta,'X'),
	cd_cooperativa,
	ds_indicacao_clinica,
	nr_seq_fatura,
	coalesce(dt_atendimento_referencia, clock_timestamp()),
	nr_seq_analise,
	nr_seq_tipo_atendimento,
	CASE WHEN cd_medico_executor='' THEN 'N'  ELSE 'S' END ,
	nr_seq_nota_cobranca,
	ie_tipo_segurado
into STRICT	cd_guia_referencia_w,  --alterada as variaves das guias pois estavam invertidas
	cd_guia_w,
	dt_atendimento_referencia_w,
	nr_seq_protocolo_w,
	ie_carater_internacao_w,
	cd_medico_executor_w,
	cd_senha_w,
	qt_nasc_vivos_prematuros_w,
	qt_nasc_vivos_w,
	qt_obito_precoce_w,
	qt_obito_tardio_w,
	nr_seq_clinica_w,
	ie_tipo_consulta_w,
	ie_gestacao_w,
	ie_aborto_w,
	ie_parto_normal_w,
	ie_complicacao_puerperio_w,
	ie_complicacao_neonatal_w,
	ie_parto_cesaria_w,
	ie_baixo_peso_w,
	ie_atend_rn_sala_parto_w,
	ie_transtorno_w,
	cd_medico_solicitante_w,
	nr_seq_tipo_acomod_conta_w,
	nr_seq_grau_partic_ww,
	nr_seq_prestador_exec_w,
	qt_nasc_mortos_w,
	cd_senha_externa_w,
	dt_alta_int_w,
	dt_entrada_int_w,
	dt_atendimento_w,
	ie_tipo_guia_conta_w,
	ie_regime_internacao_w,
	ie_origem_conta_ww,
	nr_seq_prestador_conta_w,
	nr_seq_saida_int_conta_w,
	ie_tipo_conta_w,
	cd_cooperativa_conta_w,
	ds_indicacao_clinica_conta_w,
	nr_seq_fatura_conta_w,
	dt_emissao_conta_w,
	nr_seq_analise_w,
	nr_seq_tipo_atend_conta_w,
	ie_existe_medico_w,
	nr_seq_nota_cobranca_w,
	ie_tipo_segurado_conta_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_p;
exception
when others then
	dt_atendimento_referencia_w 			:= clock_timestamp();
	cd_guia_referencia_w		:= '';
	nr_seq_tipo_acomod_conta_w	:= null;
end;

if (ie_tipo_segurado_conta_w IS NOT NULL AND ie_tipo_segurado_conta_w::text <> '') then
	ie_tipo_segurado_w := ie_tipo_segurado_conta_w;
end if;

if (coalesce(ds_indicacao_clinica_conta_w::text, '') = '') then
	qt_indicacao_clinica_w	:= 1;
else
	qt_indicacao_clinica_w	:= 0;
end if;
/*tratamento realizado para contas de intercâmbio onde o medico executor não esta cadastrado na base porém existe a informação do mesmo na nota PTU, OS 570462*/

if (ie_tipo_conta_w = 'I') and (nr_seq_nota_cobranca_w IS NOT NULL AND nr_seq_nota_cobranca_w::text <> '') then

	select	max(sg_cons_prof_prest),
		max(nr_cons_prof_prest),
		max(sg_uf_cons_prest)
	into STRICT	sg_cons_prof_prest_w,
		nr_cons_prof_prest_w,
		sg_uf_cons_prest_w
	from	ptu_nota_servico
	where	nr_seq_nota_cobr = nr_seq_nota_cobranca_w;

	if (sg_cons_prof_prest_w IS NOT NULL AND sg_cons_prof_prest_w::text <> '') and (nr_cons_prof_prest_w IS NOT NULL AND nr_cons_prof_prest_w::text <> '') and (sg_uf_cons_prest_w IS NOT NULL AND sg_uf_cons_prest_w::text <> '') then
		ie_existe_medico_w := 'S';
	end if;
end if;
if (ie_tipo_guia_p in (4,5)) then /*obter dados autorização*/
	select 	max(nr_sequencia)
	into STRICT 	nr_seq_guia_w
	from 	pls_guia_plano
	where	cd_guia 	= cd_guia_referencia_w
	and	nr_seq_segurado = nr_seq_segurado_p;
elsif (ie_tipo_guia_p = 3) then
	select 	max(nr_sequencia)
	into STRICT 	nr_seq_guia_w
	from 	pls_guia_plano
	where	cd_guia 	= cd_guia_w
	and	nr_Seq_segurado = nr_seq_segurado_p;
end if;

select	count(1)
into STRICT	qt_declaracao_obito_w
from	pls_diagnost_conta_obito
where 	nr_seq_conta	= nr_seq_conta_p
and	(nr_declaracao_obito IS NOT NULL AND nr_declaracao_obito::text <> '');

dt_referencia_w	:= dt_atendimento_referencia_w;

/*Obter CD_TISS do tipo internação*/

select	max(cd_tiss)
into STRICT	cd_tiss_tipo_internacao_w
from   	pls_clinica
where  	cd_estabelecimento 	= cd_estabelecimento_p
and	nr_sequencia 		= nr_seq_clinica_w;

/*verifica se informações de internação obstétrica */

if (ie_tipo_guia_p = 5) then

	if	((coalesce(ie_gestacao_w,'N') = 'S') or ( coalesce(ie_aborto_w,'N') = 'S') or ( coalesce(ie_parto_normal_w,'N') = 'S') or (coalesce(ie_complicacao_puerperio_w,'N') = 'S') or ( coalesce(ie_complicacao_neonatal_w,'N') = 'S') or (coalesce(ie_parto_cesaria_w,'N') = 'S') or (coalesce(ie_baixo_peso_w,'N') = 'S') or (coalesce(ie_atend_rn_sala_parto_w,'N') = 'S') or (coalesce(ie_transtorno_w,'N') = 'S')) then
		ie_obstetrico_informado_w	:= 'S';
	end if;
end if;

cd_guia_pesquisa_w	:= coalesce(cd_guia_referencia_w, cd_guia_w);

/*verifica se guia existe*/

select	coalesce(max('S'),'N')
into STRICT	ie_guia_existe_w
from 	pls_guia_plano
where	cd_guia	= cd_guia_pesquisa_w;

if (coalesce(cd_senha_w::text, '') = '') and (ie_tipo_guia_p in ('4','5','6')) then
	ie_cd_senha_w	:= 'S';
end if;

if (coalesce(cd_senha_externa_w::text, '') = '') then
	ie_cd_senha_externa_w	:= 'S';
end if;

/*Obter se o produto está inativo*/

ie_produto_inativo_w := pls_obter_se_produto_inativo(nr_seq_conta_p,nr_seq_segurado_p);

if (ie_tipo_guia_conta_w in ('5','6')) then
	ie_internacao_w		:= 'S';
else
	ie_internacao_w		:= substr(pls_obter_se_internado(nr_seq_conta_p, null), 1, 1);
end if;

if (ie_internacao_w = 'S') then
	ie_tipo_internado_w	:= 'I';
else
	ie_tipo_internado_w	:= 'A';
end if;

begin
select	ie_status
into STRICT	ie_status_fatura_w
from	ptu_fatura	a
where	a.nr_sequencia	= nr_seq_fatura_conta_w;
exception
when others then
	ie_status_fatura_w	:= 'X';
end;

-- jjung - Alterado para que o status verificado na Pré-Análise seja EI devido a alteração realizada por
-- wcbernardino na rotina PTU_GERAR_ANALISE este será o status durante a geração da Pré-Análise.
if (ie_status_fatura_w = 'EI') then
	ie_pre_analise_w	:= 'S';
else
	ie_pre_analise_w	:= 'N';
end if;

select	count(1)
into STRICT	qt_ocorr_analise_w
from	w_pls_ocorrencia
where	nr_seq_analise	= nr_seq_analise_w
and	(nr_seq_ocorrencia IS NOT NULL AND nr_seq_ocorrencia::text <> '');

ind_ocor	:= 1;

if (qt_ocorr_analise_w = 0) then
	/* Francisco - 11/06/2012 - Transformar em vetor as ocorrências */

	open C01;
	loop
	fetch C01 into
		nr_seq_ocorrencia_w,
		nr_seq_motivo_glosa_w,
		ie_auditoria_w,
		cd_ocorrencia_w,
		ie_proc_mat_w,
		ie_pre_analise_ocor_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		--realizado o select abaixo devidos as ocorrências de pré-análise que eram inativadas indevidamente na reconsistência da conta devido ao status da fatura ser diferente de 'V'
		select	count(1)
		into STRICT	qt_ocorrencia_w
		from	pls_ocorrencia_benef
		where	nr_seq_conta		= nr_seq_conta_p
		and	nr_seq_ocorrencia	= nr_seq_ocorrencia_w;

		if	((ie_pre_analise_ocor_w = ie_pre_analise_w) or (qt_ocorrencia_w > 0)) or (ie_pre_analise_ocor_w = 'N') then

			vetor_ocor_w[ind_ocor].nr_seq_ocorrencia	:= nr_seq_ocorrencia_w;
			vetor_ocor_w[ind_ocor].nr_seq_motivo_glosa	:= nr_seq_motivo_glosa_w;
			vetor_ocor_w[ind_ocor].ie_auditoria		:= ie_auditoria_w;
			vetor_ocor_w[ind_ocor].cd_ocorrencia		:= cd_ocorrencia_w;
			vetor_ocor_w[ind_ocor].ie_proc_mat		:= ie_proc_mat_w;

			select	count(1)
			into STRICT	qt_ocor_analise_w
			from	w_pls_ocorrencia
			where	nr_seq_analise	= nr_seq_analise_w
			and	coalesce(nr_seq_ocorrencia::text, '') = '';

			/* Montar tabela para auxílio das ocorrências */

			if (qt_ocor_analise_w > 0) then
				select	count(1)
				into STRICT	qt_excecao_w
				from	pls_excecao_ocorrencia
				where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
				and	ie_conta_medica		= 'S'  LIMIT 1;

				if (qt_excecao_w > 0) then
					ie_excecao_ocor_w	:= 'S';
				else
					ie_excecao_ocor_w	:= 'N';
				end if;

				insert into w_pls_ocorrencia(	dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_analise,
								cd_ocorrencia, nr_seq_motivo_glosa, ie_auditoria, ie_pre_analise, ie_proc_mat,
								nr_seq_ocorrencia, ie_excecao, nr_sequencia)
							values (clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p, nr_seq_analise_w,
								cd_ocorrencia_w, nr_seq_motivo_glosa_w, ie_auditoria_w, ie_pre_analise_ocor_w, ie_proc_mat_w,
								nr_seq_ocorrencia_w, ie_excecao_ocor_w, 0);

				vetor_ocor_w[ind_ocor].ie_excecao_ocor		:= ie_excecao_ocor_w;

			end if;
			ind_ocor	:= ind_ocor + 1;
		end if;
		end;
	end loop;
	close c01;
else
	open C05;
	loop
	fetch C05 into
		cd_ocorrencia_w,
		nr_seq_motivo_glosa_w,
		ie_auditoria_w,
		ie_pre_analise_ocor_w,
		ie_proc_mat_w,
		nr_seq_ocorrencia_w,
		ie_excecao_ocor_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
		vetor_ocor_w[ind_ocor].nr_seq_ocorrencia	:= nr_seq_ocorrencia_w;
		vetor_ocor_w[ind_ocor].nr_seq_motivo_glosa	:= nr_seq_motivo_glosa_w;
		vetor_ocor_w[ind_ocor].ie_auditoria		:= ie_auditoria_w;
		vetor_ocor_w[ind_ocor].cd_ocorrencia		:= cd_ocorrencia_w;
		vetor_ocor_w[ind_ocor].ie_proc_mat		:= ie_proc_mat_w;
		vetor_ocor_w[ind_ocor].ie_excecao_ocor		:= ie_excecao_ocor_w;
		ind_ocor	:= ind_ocor + 1;
		end;
	end loop;
	close C05;
end if;

delete	from w_pls_ocorrencia
where	nr_seq_analise = nr_seq_analise_w
and	coalesce(nr_seq_ocorrencia::text, '') = ''
and	nm_usuario	= nm_usuario_p;

/* Obter dados do protocolo */

begin
select	nr_seq_prestador,
	nr_seq_congenere,
	ie_origem_protocolo,
	dt_protocolo
into STRICT	nr_seq_prest_prot_w,
	nr_seq_congenere_protocolo_w,
	ie_origem_protocolo_w,
	dt_protocolo_w
from	pls_protocolo_conta
where	nr_sequencia	= nr_seq_protocolo_w;
exception
when others then
	nr_seq_prest_prot_w :=0;
end;

cd_congenere_w	:= coalesce(pls_obter_seq_codigo_coop(nr_seq_congenere_protocolo_w,''),'X');


ie_tipo_prest_prot_w	:= pls_obter_tipo_prestador(nr_seq_prest_prot_w);

/* Obter o código da pessoa fisica do prestador do protocolo */

if (ie_tipo_prest_prot_w	= 'PF') then
	select	coalesce(max(cd_pessoa_fisica),'X')
	into STRICT	cd_medico_protocolo_w
	from	pls_prestador
	where	nr_sequencia	= nr_seq_prest_prot_w;
end if;

if (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then
	begin
	select	cd_prestador
	into STRICT	cd_prestador_exec_w
	from	pls_prestador
	where	nr_sequencia	= nr_seq_prestador_exec_w;
	exception
	when others then
		cd_prestador_exec_w	:= null;
	end;
end if;

/* Obter a UF da operadora  - Tasy*/

select	coalesce(max(sg_estado),'X')
into STRICT	sg_estado_w
from	pessoa_juridica
where	cd_cgc	=	(SELECT	max(cd_cgc_outorgante)
			from	pls_outorgante
			where	cd_estabelecimento	= cd_estabelecimento_p);

if (ie_tipo_conta_w = 'I')	then -- se o tipo da conta for igual a intercâmbio então verifica o congenere da conta  	Demitrius OS -  364849
	/*Obter estado da operadora congenere*/

	select	max(sg_estado)
	into STRICT	sg_estado_operadora_w
	from	pls_congenere	a,
		pessoa_juridica	b
	where	b.cd_cgc		= a.cd_cgc
	and	a.nr_sequencia	= nr_seq_congenere_protocolo_w;
	/*Alexandre - OS 327220 - Alterado para obter o estado da operadora conegere informada no protocolo. Validando a regra do campo IE_TIPO_INTERCAMBIO encima do operadora informando no protocolo*/

elsif (ie_tipo_conta_w = 'C')	then  -- verfica se a conta é uma cobrança, se for uma cobrança a rotina verifica a cooperativa da conta.	Demitrius OS -  364849
	select 	max(cd_cgc)
	into STRICT	cd_cgc_cooperativa_w
	from 	pls_congenere
	where 	cd_cooperativa =	cd_cooperativa_conta_w;

	select	max(sg_estado)
	into STRICT	sg_estado_operadora_w
	from	pessoa_juridica
	where	cd_cgc	=  cd_cgc_cooperativa_w;
end if;

if (sg_estado_w <> 'X') and (coalesce(sg_estado_operadora_w,'X') <> 'X') then
	if (sg_estado_w	= sg_estado_operadora_w) then
		ie_tipo_intercambio_w	:= 'E';
	else
		ie_tipo_intercambio_w	:= 'N';
	end if;
else
	ie_tipo_intercambio_w	:= 'A';
end if;

if (coalesce( cd_guia_referencia_w,'~X~') <> '~X~') then
	/*obter dados autorização*/

	select 	max(nr_sequencia)
	into STRICT 	nr_seq_guia_ww
	from 	pls_guia_plano
	where	cd_guia 	= cd_guia_referencia_w
	and	nr_seq_segurado = nr_seq_segurado_p;

	nr_seq_guia_referencia_w	:= nr_seq_guia_ww;
elsif (coalesce( cd_guia_w,'~X~') <> '~X~') then
	select 	max(nr_sequencia)
	into STRICT 	nr_seq_guia_ww
	from 	pls_guia_plano
	where	cd_guia 	= cd_guia_w
	and	nr_seq_segurado = nr_seq_segurado_p;

	nr_seq_guia_conta_w		:= nr_seq_guia_ww;
end if;


if (coalesce(nr_seq_guia_referencia_w::text, '') = '') then

	select 	max(nr_sequencia)
	into STRICT 	nr_seq_guia_referencia_w
	from 	pls_guia_plano
	where	cd_guia 	= cd_guia_referencia_w
	and	nr_seq_segurado = nr_seq_segurado_p;
end if;

if (coalesce(nr_seq_guia_conta_w::text, '') = '') then

	select 	max(nr_sequencia)
	into STRICT 	nr_seq_guia_conta_w
	from 	pls_guia_plano
	where	cd_guia 	= cd_guia_w
	and	nr_seq_segurado = nr_seq_segurado_p;
end if;

if (coalesce(nr_seq_conta_p,0) > 0) then
	ie_tipo_item_w := 8; /*conta medica*/
	select	max(dt_procedimento)
	into STRICT	dt_max_proc_w
	from	pls_conta_proc
	where	nr_seq_conta	= nr_seq_conta_p;

	select	max(dt_atendimento)
	into STRICT	dt_max_mat_w
	from	pls_conta_mat
	where	nr_seq_conta	= nr_seq_conta_p;

	/*Diego - 24/11/2011 - Tratamento realizado para o  caso de existir procedimento mas não existir material (estava ocorrendo problemas quanto a comparação ( > ))*/

	if (coalesce(to_char(dt_max_proc_w),'X') <> 'X') and (coalesce(to_char(dt_max_mat_w),'X') = 'X') then
		dt_max_item_w	:= dt_max_proc_w;
	elsif (coalesce(to_char(dt_max_proc_w),'X') = 'X') and (coalesce(to_char(dt_max_mat_w),'X') <> 'X') then
		dt_max_item_w	:= dt_max_mat_w;
	else
		if (dt_max_proc_w	> dt_max_mat_w) then
			dt_max_item_w	:= dt_max_proc_w;
		else
			dt_max_item_w	:= dt_max_mat_w;
		end if;
	end if;
end if;

/* Aqui termina os selects referentes a conta, guia, beneficiário plano, etc e começa os tratamentos por itens
**********************************************************************************************
**********************************************************************************************
Atencao!!
Só colocar daqui pra baixo os selects que são referente a itens...
**********************************************************************************************
**********************************************************************************************
*/
i	:= 1;
open c04;
loop
fetch c04 into
	nr_seq_conta_proc_w,
	nr_seq_conta_mat_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	nr_seq_material_w;
EXIT WHEN NOT FOUND; /* apply on c04 */
	begin
	vetor_itens_w[i].nr_seq_conta_proc	:= nr_seq_conta_proc_w;
	vetor_itens_w[i].nr_seq_conta_mat	:= nr_seq_conta_mat_w;
	vetor_itens_w[i].cd_procedimento	:= cd_procedimento_w;
	vetor_itens_w[i].ie_origem_proced	:= ie_origem_proced_w;
	vetor_itens_w[i].nr_seq_material	:= nr_seq_material_w;
	i	:= i + 1;
	end;
end loop;
close c04;

i := vetor_itens_w.count;

for k in 1.. i loop
	nr_seq_conta_proc_w	:= vetor_itens_w[k].nr_seq_conta_proc;
	nr_seq_conta_mat_w	:= vetor_itens_w[k].nr_seq_conta_mat;
	cd_procedimento_w	:= vetor_itens_w[k].cd_procedimento;
	ie_origem_proced_w	:= vetor_itens_w[k].ie_origem_proced;
	nr_seq_material_w	:= vetor_itens_w[k].nr_seq_material;
	nr_auxiliares_w 	:= null;
	cd_procedimento_p_w	:= coalesce(cd_procedimento_p, cd_procedimento_w);
	ie_origem_proced_p_w	:= coalesce(ie_origem_proced_p, ie_origem_proced_w);

	if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
		CALL gravar_processo_longo('Consistência do procedimento ' || cd_procedimento_w,'PLS_CONSISTIR_ANALISE',-1);

		nr_seq_item_w	:= nr_seq_conta_proc_w;
		ie_tipo_item_w	:= 3; /*procedimento da conta*/
		ie_tipo_ocorrencia_w	:= 'I';

		begin
		select	coalesce(a.dt_procedimento,coalesce(pls_obter_data_preco_item(nr_seq_conta_proc_w,'P'), clock_timestamp())),
			coalesce(a.dt_procedimento,(pls_obter_data_preco_item(nr_seq_conta_proc_w,'P'))),
			a.dt_inicio_proc,
			a.dt_fim_proc,
			a.qt_procedimento_imp,
			a.vl_procedimento,
			a.vl_procedimento_imp,
			a.ie_tipo_despesa,
			a.tx_intercambio,
			a.tx_intercambio_imp,
			pls_obter_valor_taxas_total(NR_SEQUENCIA,'C'),
			pls_obter_valor_taxas_total(NR_SEQUENCIA,'I'),
			a.nr_seq_evento,
			a.ie_co_preco_operadora,
			a.ie_coparticipacao,
			a.vl_custo_operacional,
			a.nr_auxiliares,
			obter_cid_doenca_procedimento(a.cd_procedimento,a.ie_origem_proced,'C')
		into STRICT	dt_procedimento_w,
			dt_procedimento_conta_w,
			dt_inicio_proc_w,
			dt_fim_proc_w,
			qt_item_conta_w,
			vl_calculado_w,
			vl_apresentado_w,
			ie_tipo_despesa_ww,
			tx_intercambio_w,
			tx_intercambio_imp_w,
			vl_taxa_intercambio_w,
			vl_taxa_intercambio_imp_w,
			nr_seq_evento_w,
			ie_co_preco_operadora_w,
			ie_coparticipacao_ww,
			vl_custo_operacional_w,
			nr_auxiliares_w,
			cd_doenca_cid_conta_w
		from	pls_conta_proc 	a
		where	a.nr_sequencia	= nr_seq_conta_proc_w;
		exception
		when others then
			dt_atendimento_referencia_w 	:= coalesce(pls_obter_data_preco_item(nr_seq_conta_proc_w,'P'), clock_timestamp());
		end;

		if (coalesce(vl_custo_operacional_w,0) <> 0)	then
			ie_co_preco_operadora_w	:= 'S';
		end if;

		qt_procedimento_w	:= qt_item_conta_w;
		dt_referencia_w		:= dt_procedimento_w;

		if (cd_guia_w IS NOT NULL AND cd_guia_w::text <> '') then
			/*Ao verificar a quantidade utilizada o sistema busca pelo cd_guia_referencia e ao fazer a comparação as informações devem ser iguais*/

			select	sum(a.qt_procedimento_imp)
			into STRICT	qt_item_solic_w
			from	pls_conta_proc	a,
				pls_conta	b
			where	b.nr_seq_segurado 	= nr_seq_segurado_p
			and	a.cd_procedimento	= cd_procedimento_p_w
			and	a.ie_origem_proced	= ie_origem_proced_p_w
			and	a.nr_seq_conta		= b.nr_sequencia
			and	coalesce(a.nr_seq_proc_ref::text, '') = ''
			and	b.cd_guia_ok		= cd_guia_pesquisa_w
			and	(qt_procedimento_imp IS NOT NULL AND qt_procedimento_imp::text <> '');

		else
			select	sum(qt_procedimento_imp)
			into STRICT	qt_item_solic_w
			from	pls_conta_proc
			where	nr_seq_conta		= nr_seq_conta_p
			and	cd_procedimento		= cd_procedimento_p_w
			and	ie_origem_proced	= ie_origem_proced_p_w
			and	(qt_procedimento_imp IS NOT NULL AND qt_procedimento_imp::text <> '');
		end if;

		select 	coalesce(max(qt_saldo),0),
			coalesce(max(qt_utilizada),0),
			coalesce(max(qt_autorizada),0)
		into STRICT	qt_saldo_w,
			qt_utilizada_w,
			qt_item_autorizado_w
		from 	table(pls_conta_autor_pck.obter_dados(	nr_seq_guia_ww,'P', cd_estabelecimento_p,
								ie_origem_proced_w, cd_procedimento_w));

		if (qt_item_autorizado_w > 0 ) then
			ie_autorizado_w := 'S';
		else
			ie_autorizado_w := 'N';
		end if;

		if (ie_tipo_despesa_ww = 4)	then
			ie_gerar_oc_pacote_w := pls_obter_oc_pacote_conv(nr_seq_conta_p, nr_seq_conta_proc_w, ie_gerar_oc_pacote_w, cd_estabelecimento_p, nm_usuario_p);
		end if;

		begin
			select	sum(qt_procedimento_imp)
			into STRICT	qt_item_conta_w
			from  	pls_conta_proc
			where  	cd_procedimento  = cd_procedimento_p_w
			and	ie_origem_proced = ie_origem_proced_p_w
			and	nr_seq_conta 	 = nr_seq_conta_p;
		exception
		when others then
			qt_item_conta_w	:= 0;
		end;

		SELECT * FROM pls_consiste_proced_autor(nr_seq_conta_p, nr_seq_conta_proc_w, nm_usuario_p, cd_estabelecimento_p, nr_seq_prestador_exec_w, 'CC', null, ie_exige_autorizacao_w, ie_existe_regra_w, nr_seq_motivo_glosa_w, nr_seq_regra_autor_w) INTO STRICT ie_exige_autorizacao_w, ie_existe_regra_w, nr_seq_motivo_glosa_w, nr_seq_regra_autor_w;

	elsif (coalesce(nr_seq_conta_mat_w,0) > 0) then
		CALL gravar_processo_longo('Consistência do material ' || nr_seq_material_w,'PLS_CONSISTIR_ANALISE',-1);

		nr_seq_item_w	:= nr_seq_conta_mat_w;
		ie_tipo_item_w	:= 4; /*material da conta*/
		ie_tipo_ocorrencia_w	:= 'I';

		begin
		select	coalesce(a.dt_atendimento, coalesce(pls_obter_data_preco_item(nr_seq_conta_mat_w,'M'), clock_timestamp())),
			coalesce(a.dt_atendimento, (pls_obter_data_preco_item(nr_seq_conta_mat_w,'M'))),
			coalesce(a.qt_material_imp,0),
			a.nr_seq_evento,
			a.ie_exige_autorizacao,
			a.nr_seq_prest_fornec,
			a.nr_nota_fiscal,
			a.vl_material,
			a.vl_material_imp,
			a.tx_intercambio,
			a.tx_intercambio_imp,
			a.vl_taxa_material,
			a.vl_taxa_material_imp,
			a.ie_tipo_despesa,
			a.dt_inicio_atend,
			a.dt_fim_atend
		into STRICT	dt_material_w,
			dt_material_conta_w,
			qt_item_conta_w,
			nr_seq_evento_w,
			ie_exige_autorizacao_w,
			nr_seq_prest_fornec_w,
			nr_nota_fiscal_mat_w,
			vl_calculado_w,
			vl_apresentado_w,
			tx_intercambio_w,
			tx_intercambio_imp_w,
			vl_taxa_intercambio_w,
			vl_taxa_intercambio_imp_w,
			ie_tipo_despesa_ww,
			dt_inicio_mat_w,
			dt_fim_mat_w
		from	pls_conta_mat	a
		where	a.nr_sequencia	= nr_seq_conta_mat_w;
		exception
		when others then
			dt_atendimento_referencia_w 			:= coalesce(pls_obter_data_preco_item(nr_seq_conta_mat_w,'M'), clock_timestamp());
			nr_seq_tipo_acomod_conta_w	:= null;
		end;

		SELECT * FROM pls_consiste_mat_autor(nr_seq_conta_p, nr_seq_conta_mat_w, nm_usuario_p, cd_estabelecimento_p, nr_seq_prestador_exec_w, ie_exige_autorizacao_w, ie_existe_regra_w, nr_seq_regra_autor_w) INTO STRICT ie_exige_autorizacao_w, ie_existe_regra_w, nr_seq_regra_autor_w;

		select 	coalesce(max(qt_saldo),0),
			coalesce(max(qt_utilizada),0),
			coalesce(max(qt_autorizada),0)
		into STRICT	qt_saldo_w,
			qt_utilizada_w,
			qt_item_aut_mat_w
		from 	table(pls_conta_autor_pck.obter_dados(	nr_seq_guia_ww,'M', cd_estabelecimento_p,
								null, null, nr_seq_material_w));

		if (qt_item_aut_mat_w > 0 ) then
			ie_autorizado_w := 'S';
		else
			ie_autorizado_w := 'N';
		end if;

		dt_referencia_w	:= dt_material_w;

		ie_fornecedor_w		:= 'N';

		if (nr_seq_prest_fornec_w IS NOT NULL AND nr_seq_prest_fornec_w::text <> '') then
			ie_fornecedor_w		:= 'S';
		end if;

		begin
		select	sum(qt_material_imp)
		into STRICT	qt_item_conta_w
		from  	pls_conta_mat
		where  	nr_seq_conta 	 = nr_seq_conta_p
		and	nr_seq_material	 = nr_seq_material_w;
		exception
		when others then
			qt_item_conta_w	:= 0;
		end;

	end if;

	qt_material_w	:= coalesce(qt_item_conta_w,0);

	if (coalesce(nr_seq_material_w,0) > 0) then
		begin
		select	nr_seq_estrut_mat
		into STRICT	nr_seq_estrut_mat_w
		from	pls_material
		where	nr_sequencia	= nr_seq_material_w;
		exception
		when others then
			nr_seq_estrut_mat_w	:= null;
		end;
	end if;

	if (cd_procedimento_p_w <> 0) then
		SELECT * FROM pls_obter_estrut_proc(coalesce(cd_procedimento_p,cd_procedimento_w), coalesce(ie_origem_proced_p,ie_origem_proced_w), cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w;

		if (cd_procedimento_p_w IS NOT NULL AND cd_procedimento_p_w::text <> '') then
			begin
			select	nr_seq_grupo_rec
			into STRICT	nr_seq_grupo_rec_w
			from	procedimento
			where	cd_procedimento		= cd_procedimento_p_w --nvl(cd_procedimento_p,cd_procedimento_w)
			and	ie_origem_proced	= ie_origem_proced_p_w; --nvl(ie_origem_proced_p,ie_origem_proced_w)
			exception
			when others then
				nr_seq_grupo_rec_w := null;
			end;
		end if;
	else
		cd_area_procedimento_w	:= null;
		cd_especialidade_w	:= null;
		cd_grupo_proc_w		:= null;
	end if;

	nr_seq_restricao_w := pls_obter_mat_restricao_data(nr_seq_material_w, dt_material_w, nr_seq_restricao_w);

	if (coalesce(nr_seq_restricao_w,0) > 0) then
		select	coalesce(ie_autorizacao,'N'),
			qt_minima,
			qt_maxima,
			qt_idade_minima,
			qt_idade_maxima,
			ie_sexo_exclusivo,
			CASE WHEN ie_bloqueia_custo_op='S' THEN 'BCO' END ,
			CASE WHEN ie_bloqueia_pre_pag='S' THEN 'BPP' END ,
			CASE WHEN ie_bloqueia_intercambio='S' THEN 'BI' END ,
			CASE WHEN ie_bloqueia_prod_nao_reg='S' THEN 'BNR' END ,
			CASE WHEN ie_bloqueia_prod_reg='S' THEN 'BR' END ,
			coalesce(ie_nota_fiscal,'N')
		into STRICT	ie_autorizacao_especial_w,
			qt_minima_w,
			qt_maxima_w,
			qt_idade_minima_w,
			qt_idade_maxima_w,
			ie_sexo_exclusivo_w,
			ie_bloqueia_custo_op_w,
			ie_bloqueia_pre_pag_w,
			ie_bloqueia_intercambio_w,
			ie_bloqueia_prod_nao_reg_w,
			ie_bloqueia_prod_reg_w,
			ie_nota_fiscal_w
		from	pls_material_restricao
		where	nr_sequencia	= nr_seq_restricao_w;

		if	((coalesce(qt_item_conta_w,0) < qt_minima_w) or (coalesce(qt_item_conta_w,0) > qt_maxima_w)) then
			ie_consiste_qtd_w	:= 'S';
		end if;

		if (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then
			if (ie_sexo_w <> ie_sexo_exclusivo_w /*ie_sexo_mat_w*/
) then
				ie_consiste_sexo_w	:= 'S';
			end if;

			if (qt_idade_w > qt_idade_maxima_w /*qt_idade_max_mat_w*/
 or qt_idade_w < qt_idade_minima_w /*qt_idade_min_mat_w*/
) then
				ie_consiste_idade_w	:= 'S';
			end if;
		end if;
	end if;

	if (ie_tipo_item_w in (3,4)) then
		qt_participante_w	:= 0;
		ie_conta_w		:= 'S';
		if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
			select	a.vl_procedimento,
				CASE WHEN b.cd_medico_executor='' THEN 'N'  ELSE 'S' END ,
				coalesce(a.dt_procedimento,a.dt_atualizacao),
				a.qt_procedimento_imp,
				a.ie_tipo_despesa,
				b.ie_tipo_guia
			into STRICT	vl_procedimento_w,
				ie_existe_medico_w,
				dt_item_w,
				qt_item_w,
				ie_tipo_despesa_w,
				ie_tipo_guia_w
			from	pls_conta	b,
				pls_conta_proc	a
			where	a.nr_seq_conta	= b.nr_sequencia
			and	a.nr_sequencia	= nr_seq_conta_proc_w;

			select	count(1)
			into STRICT	qt_participante_w
			from 	pls_proc_participante
			where 	nr_seq_conta_proc	= nr_seq_conta_proc_w;

			/*Se existir participante, tem que verificar se tem medico cadastrado*/

			if (coalesce(qt_participante_w,0) > 0)	or (ie_tipo_guia_w	= '5')	then
				begin
				select	distinct 'S'
				into STRICT	ie_existe_medico_w
				from	pls_proc_participante
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w
				and (coalesce(cd_medico,0))	<> 0;
				exception
				when others then
						ie_existe_medico_w	:= 'N';
				end;

				begin
				select	nr_seq_prestador
				into STRICT 	nr_seq_prestador_ww
				from	pls_proc_participante
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w;
				exception
				when others then
					nr_seq_prestador_ww := null;
				end;
			end if;

			if (ie_tipo_conta_w = 'I') and (nr_seq_nota_cobranca_w IS NOT NULL AND nr_seq_nota_cobranca_w::text <> '') then

				select	max(sg_cons_prof_prest),
					max(nr_cons_prof_prest),
					max(sg_uf_cons_prest)
				into STRICT	sg_cons_prof_prest_w,
					nr_cons_prof_prest_w,
					sg_uf_cons_prest_w
				from	ptu_nota_servico
				where	nr_seq_conta_proc = nr_seq_conta_proc_w;

				if (sg_cons_prof_prest_w IS NOT NULL AND sg_cons_prof_prest_w::text <> '') and (nr_cons_prof_prest_w IS NOT NULL AND nr_cons_prof_prest_w::text <> '') and (sg_uf_cons_prest_w IS NOT NULL AND sg_uf_cons_prest_w::text <> '') then
					ie_existe_medico_w := 'S';
				end if;
			end if;
			/*
			if	(ie_tipo_guia_w	= '5') then
				begin
				select	distinct 'S'
				into	ie_existe_medico_w
				from	pls_proc_participante
				where	nr_seq_conta_proc	= nr_seq_conta_proc_w;
				exception
				when others then
					ie_existe_medico_w	:= 'N';
				end;

				if	(ie_tipo_despesa_w <> '1') then
					ie_existe_medico_w	:= 'S';
				end if;
			end if;*/
		elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
			select	a.vl_material,
				CASE WHEN b.cd_medico_executor='' THEN 'N'  ELSE 'S' END ,
				coalesce(a.dt_atendimento,a.dt_atualizacao),
				a.qt_material_imp,
				b.ie_tipo_guia,
				a.vl_material_imp
			into STRICT	vl_item_w,
				ie_existe_medico_w,
				dt_item_w,
				qt_item_w,
				ie_tipo_guia_w,
				vl_mat_imp_w
			from	pls_conta	b,
				pls_conta_mat	a
			where	a.nr_seq_conta	= b.nr_sequencia
			and	a.nr_sequencia	= nr_seq_conta_mat_w;

			if (ie_tipo_guia_w	= '5') then
				ie_existe_medico_w	:= 'S';
			end if;

			if (ie_tipo_conta_w = 'I') and (nr_seq_nota_cobranca_w IS NOT NULL AND nr_seq_nota_cobranca_w::text <> '') then

				select	max(sg_cons_prof_prest),
					max(nr_cons_prof_prest),
					max(sg_uf_cons_prest)
				into STRICT	sg_cons_prof_prest_w,
					nr_cons_prof_prest_w,
					sg_uf_cons_prest_w
				from	ptu_nota_servico
				where	nr_seq_conta_mat = nr_seq_conta_mat_w;

				if (sg_cons_prof_prest_w IS NOT NULL AND sg_cons_prof_prest_w::text <> '') and (nr_cons_prof_prest_w IS NOT NULL AND nr_cons_prof_prest_w::text <> '') and (sg_uf_cons_prest_w IS NOT NULL AND sg_uf_cons_prest_w::text <> '') then
					ie_existe_medico_w := 'S';
				end if;
			end if;
		end if;
	end if;

	nr_seq_prestador_consist_w	:= coalesce(nr_seq_prestador_ww,nr_seq_prestador_exec_w);
	begin
	select	cd_cgc,
		cd_pessoa_fisica
	into STRICT	cd_cgc_consist_w,
		cd_pessoa_fisica_consist_w
	from	pls_prestador
	where	nr_sequencia	= nr_seq_prestador_consist_w;
	exception
	when others then
		cd_cgc_consist_w		:= '0';
		cd_pessoa_fisica_consist_w	:= '0';
	end;


	/* Obter o dia da semana*/

	dia_semana_w	:= (to_char(dt_referencia_w,'d'))::numeric;

	dt_referencia_ww := dt_referencia_w; -- pois a varievel dt_referencia_w quando realizava o cursor 2 era alterado
	if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
		select	max(cd_cgc)
		into STRICT	cd_cgc_w
		from	pls_contrato_pagador
		where	nr_sequencia = nr_seq_pagador_w;

		ie_pagador_isento_w	:= pls_obter_se_pagador_isento(nr_seq_pagador_w,cd_cgc_w,dt_referencia_ww);
	end if;

	/* Vetor das ocorrências */

	total_ocor := vetor_ocor_w.count;

	for ind_ocor in 1.. total_ocor loop
		begin
		nr_seq_ocorrencia_w	:= vetor_ocor_w[ind_ocor].nr_seq_ocorrencia;
		nr_seq_motivo_glosa_w	:= vetor_ocor_w[ind_ocor].nr_seq_motivo_glosa;
		ie_auditoria_w		:= vetor_ocor_w[ind_ocor].ie_auditoria;
		cd_ocorrencia_w		:= vetor_ocor_w[ind_ocor].cd_ocorrencia;
		ie_proc_mat_w		:= vetor_ocor_w[ind_ocor].ie_proc_mat;
		ie_excecao_ocor_ww	:= vetor_ocor_w[ind_ocor].ie_excecao_ocor;
		if (ie_proc_mat_w = 'P' and (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '')) or (ie_proc_mat_w = 'M' and (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '')) or (ie_proc_mat_w = 'A') then

			/*A estrutura abaixo deve ser mantida para que seja possivel gerar a ocorrência mais em uma vez na conta (no proc A, B, C, Mat D, etc)*/

			if (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
				begin
				select	x.nr_sequencia
				into STRICT	qt_regra_w
				from	pls_ocorrencia_benef x
				where	x.nr_seq_ocorrencia		= nr_seq_ocorrencia_w
				and	x.nr_seq_conta			= nr_seq_conta_p
				and	x.nr_seq_conta_mat		= nr_seq_conta_mat_w  LIMIT 1;
				exception
				when others then
					qt_regra_w	:= 0;
				end;

			elsif (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
				begin
				select	x.nr_sequencia
				into STRICT	qt_regra_w
				from	pls_ocorrencia_benef x
				where	x.nr_seq_ocorrencia		= nr_seq_ocorrencia_w
				and	x.nr_seq_conta			= nr_seq_conta_p
				and	x.nr_seq_conta_proc		= nr_seq_conta_proc_w  LIMIT 1;
				exception
				when others then
					qt_regra_w	:= 0;
				end;

			elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
				begin
				select	x.nr_sequencia
				into STRICT	qt_regra_w
				from	pls_ocorrencia_benef x
				where	x.nr_seq_ocorrencia		= nr_seq_ocorrencia_w
				and	x.nr_seq_conta			= nr_seq_conta_p
				and	coalesce(x.nr_seq_proc::text, '') = ''
				and	coalesce(x.nr_seq_mat::text, '') = ''  LIMIT 1;
				exception
				when others then
					qt_regra_w	:= 0;
				end;

			end if;

			if (coalesce(dt_referencia_w::text, '') = '') then
				dt_referencia_w	:= dt_emissao_conta_w;
			end if;

			if	((ie_reconsistencia_w	= 'S') or (coalesce(qt_regra_w,0) = 0)) then
				ie_excecao_w := 'N';
				if (ie_excecao_ocor_ww IS NOT NULL AND ie_excecao_ocor_ww::text <> '') then
					if (ie_excecao_ocor_ww = 'S') then
						qt_excecao_w	:= 1;
					else
						qt_excecao_w	:= 0;
					end if;
				else
					/* Verificar se existem regras de exceção para a ocorrência da regra*/

					/* William - OS 397802 - Performance, count(1) */

					select	count(1)
					into STRICT	qt_excecao_w
					from	pls_excecao_ocorrencia
					where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
					and	ie_conta_medica		= 'S'  LIMIT 1;
				end if;

				if (qt_excecao_w > 0) then
					/*Na rotina pls_obter_se_regra_excecao, irá retornar "S" se caiu em alguam regra de exceção, então NÃO irá gerar a ocorrência. Se retornar "N" então não caiu em nenhuma regra*/

					ie_excecao_w := pls_obter_se_regra_excecao_con(	nr_seq_ocorrencia_w, nr_seq_conta_p, nr_seq_conta_proc_w,
											nr_seq_conta_mat_w, dt_referencia_w, ie_tipo_item_w,
											nr_seq_prestador_p, coalesce(cd_procedimento_p,cd_procedimento_w), coalesce(ie_origem_proced_p,ie_origem_proced_w),
											nr_seq_material_w, nr_seq_segurado_p, nm_usuario_p, cd_estabelecimento_p, nr_seq_plano_p, ie_internacao_w,
											qt_idade_w, qt_idade_meses_w, nr_seq_prestador_exec_w, nr_seq_prest_prot_w, cd_pessoa_fisica_w,
											nr_seq_contrato_w, nr_seq_intercambio_w, ie_tipo_segurado_w, dt_nascimento_w, ie_pcmso_w,
											nr_seq_clinica_w, nr_seq_tipo_acomod_conta_w, cd_guia_w, cd_guia_referencia_w, ie_tipo_guia_conta_w,
											nr_seq_tipo_atend_conta_w, ie_carater_internacao_w, nr_seq_protocolo_w, nr_seq_tipo_acomodacao_w,
											ie_origem_protocolo_w, cd_prestador_exec_param_w);
				end if;

				if (ie_excecao_w = 'N') then
					delete	FROM w_pls_ocorrencia_partic
					where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
					and	nm_usuario		= nm_usuario_p;

					open C02;
					loop
					fetch C02 into
						nr_seq_regra_w,
						nr_seq_estrutura_w,
						qt_liberada_w,
						ie_tipo_qtde_w,
						qt_tipo_quantidade_w,
						cd_doenca_cid_w,
						qt_dias_mensal_vencido_w,
						nr_seq_simultaneo_w,
						ie_guia_referencia_w,
						ie_benef_prestador_w,
						nr_seq_proc_espec_w,
						ie_consiste_exec_coop_w,
						ie_exige_procedimento_w,
						cd_procedimento_regra_w,
						ie_origem_proced_regra_w,
						ie_item_fora_periodo_int_w,
						ie_dupla_internacao_w,
						nr_seq_grupo_prestador_w,
						ie_tipo_pessoa_qtde_w,
						ie_relacao_prest_pf_w,
						ie_regime_internacao_regra_w,
						ie_afastamento_cooperado_w,
						ie_regra_qtde_w,
						ie_executa_uma_vez_w,
						ie_exige_indicacao_clinica_w,
						qt_diarias_permitida_w,
						qt_dias_limite_w,
						ie_tipo_data_envio_w,
						ie_medico_exec_solic_w, -- asdasd
						cd_medico_executor_regra_w,
						vl_minimo_w,
						nr_seq_congener_sup_w,
						ie_exceto_coop_sup_w,
						nr_seq_grupo_contrato_w,
						hr_inicial_w,
						hr_final_w,
						ie_item_dentro_periodo_int_w,
						ie_tipo_prestador_w,
						nr_seq_prestador_regra_w,
						ie_relacao_prest_pf_regra_w,
						nr_seq_tipo_prestador_regra_w,
						nr_seq_classificacao_regra_w,
						ie_somar_estrutura_w,
						nr_seq_regra_concorrente_w,
						nr_seq_regra_cid_int_w,
						ie_qt_lib_posterior_w,
						cd_espec_medica_w,
						ie_validacao_cpt_w,
						nr_seq_conta_proc_partic_w,
						nr_seq_grupo_servico_w,
						ie_med_exec_inativo_w,
						qt_idade_min_w,
						qt_idade_max_w,
						ie_unid_tempo_idade_w,
						qt_dias_cobranca_prev_w,
						ie_aut_nao_utilizado_w,
						ie_prestador_inativo_w,
						ie_prestador_exec_w,/*askono*/
						ie_consiste_qt_diaria_w,
						ie_atributo_w,
						nr_seq_saida_int_w,
						ie_nascido_vivo_w,
						nr_seq_grau_partic_w,
						ie_benef_autorizacao_w,
						ie_internacao_obstetrica_w,
						ie_consiste_qtd_aut_w,
						ie_medico_cooperado_regra_w,
						nr_seq_regra_partic_w,
						nr_seq_material_regra_w,
						ie_origem_valor_w,
						ie_tipo_data_w,
						ie_devolucao_carteira_w,
						nr_seq_regra_atrib_w,
						cd_prestador_regra_w,
						ie_validade_carteira_w,
						ie_feriado_w,
						ie_tipo_feriado_ww,
						ie_benef_rescindido_ww,
						nr_seq_grupo_produto_w,
						nr_seq_conselho_w,
						ie_partic_diferente_w,
						ie_medico_cooperado_solic_w,
						cd_medico_executor_solic_w,
						nr_seq_conselho_solic_w,
						nr_seq_proc_espec_solic_w,
						ie_tipo_data_envio_rec_w,
						nr_seq_prestador_pag_w,
						ie_coparticipacao_zerada_w,
						ie_nasc_morto_w,
						dt_inicio_vigencia_w,
						dt_fim_vigencia_w,
						ie_complemento_conta_w,
						ie_tipo_guia_ww,
						ie_preco_ww,
						ie_tipo_segurado_ww,
						nr_contrato_ww,
						ie_sexo_ww,
						nr_seq_plano_w,
						ie_local_cadastro_ww,
						ie_tipo_pagador_w,
						dt_dia_semana_w,
						nr_seq_tipo_atendimento_w,
						ie_tipo_processo_autor_w,
						ie_carater_internacao_ww,
						ie_tipo_contrato_intercambio_w,
						nr_seq_congenere_ww,
						nr_seq_intercambio_ww,
						ie_regulamentacao_ww,
						nr_seq_clinica_ww,
						ie_tipo_consulta_ww,
						cd_convenio_ww,
						cd_categoria_ww,
						nr_seq_tipo_acomod_conta_ww,
						nr_seq_tipo_acomodacao_ww,
						ie_consulta_urgencia_ww,
						sg_estado_operadora_ww,
						ie_tipo_atend_tiss_ww,
						ie_origem_conta_w,
						ie_exige_senha_externa_w,
						ie_tipo_intercambio_ww,
						ie_produto_inativo_ww,
						ie_conta_intercambio_ww,
						nr_seq_grupo_material_w,
						nr_seq_regra_duplic_w,
						ie_consistencia_valor_w,
						vl_max_item_w,
						vl_minimo_item_w,
						ie_tipo_desp_proc_w,
						ie_tipo_despesa_mat_w,
						ie_taxa_intercambio_w,
						ie_exige_hora_final_w,
						ie_exige_hora_item_w,
						ie_qtd_item_fracionada_w,
						ie_sem_evento_w,
						ie_regra_valor_co_w,
						ie_regra_valor_copartic_w,
						ie_mat_autorizacao_esp_w,
						ie_nao_utilizado_w,
						ie_pacote_honorario_w,
						ie_consiste_qtd_ww,
						ie_consiste_idade_ww,
						ie_consiste_sexo_ww,
						ie_bloqueio_mat_w,
						ie_exige_medico_w,
						ie_exige_fornecedor_w,
						cd_area_procedimento_regra_w,
						cd_grupo_proc_regra_w,
						cd_especialidade_regra_w,
						ie_regra_cong_rec_fat_w,
						ie_data_conta_w,
						ie_data_item_w,
						ie_exige_nf_w,
						cd_espec_medica_solic_w,
						cd_espec_medica_exec_w,
						ie_digitacao_portal_w,
						nr_seq_regra_carteira_w,
						ie_tipo_internado_regra_w,
						nr_seq_grupo_rec_ww,
						ie_consiste_mat_prestador_w,
						ie_consiste_auxiliar_w,
						ie_cooperativa_w,
						ie_tipo_pessoa_prestador_w,
						cd_usuario_plano_w,
						nr_seq_grupo_doenca_regra_w,
						qt_minimo_item_w,
						qt_maximo_item_w,
						ie_regra_valor_pos_estab_w,
						ie_tipo_consistencia_valor_w,
						ie_proc_mat_regra_w,
						ie_pcmso_regra_w,
						ie_internado_regra_w,
						ie_consiste_co_duplic_w,
						vl_minimo_apresentado_w,
						nr_seq_grupo_cooperativa_w,
						nr_seq_duplic_grau_part_w,
						ie_nota_intercambio_w,
						ie_consiste_prest_fornec_w,
						qt_regra_prest_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */

						ie_validacao_compl_prest_w := 'S'; -- jjkruk - Inicializada dentro do loop para gerar todas as ocorrencias OS 696806
						ds_motivo_saida_regra_w	:= null;
						if	((ie_proc_mat_regra_w = 'P' and coalesce(nr_seq_conta_proc_w::text, '') = '') or (ie_proc_mat_regra_w = 'M' and coalesce(nr_seq_conta_mat_w::text, '') = '')) then
							ds_motivo_saida_regra_w		:= 'Tipo do item para a regra (PROC ou MAT)';
							goto final;
						end if;

						if (coalesce(ie_tipo_conta_web_w::text, '') = '')	then
							/*Complemento de conta pelo portal*/

							if (ie_origem_conta_ww = 'T')	then
								ie_tipo_conta_web_w	:= 'C';
							/*Digitação de conta pelo portal*/

							elsif (ie_origem_conta_ww = 'P')	then
								ie_tipo_conta_web_w	:= 'D';
							end if;
						end if;

						-- Quando a conta for consistida na operadora, os campos de digitação e complemento não podem estar marcados para que a regra funcione corretamente.
						-- Isto é garantido nas duas verificações que seguem abaixo.
						if (coalesce(ie_tipo_conta_web_p::text, '') = '' and (ie_digitacao_portal_w = 'S' or ie_complemento_conta_w = 'S')) then
							goto final;

						-- Quando a conta for consistida no portal, durante a digitação de contas, o campo de digitação deve estar marcado na regra.
						elsif (ie_tipo_conta_web_p = 'D' and
							 ie_digitacao_portal_w = 'N') then
							goto final;

						-- Quando a conta for consistida no portal, durante o complemento de conta, o campo de complemento deve estar marcado na regra.
						elsif (ie_tipo_conta_web_p = 'C' and
							 ie_complemento_conta_w = 'N')	then
							goto final;
						--Qunado a conta for consistida no portal, pelo processo de complemento, esta ação irá verificar se não há liberação da ocorrencia na função"Gestão de análise de autorizações e caso tenha não gera a ocorrência"
						elsif (ie_tipo_conta_web_p = 'C' and
							 ie_complemento_conta_w = 'S') then
							select	count(1)
							into STRICT	qt_libera_guia_w
							from	pls_guia_lib_ocor_web	a
							where	a.nr_seq_ocorrencia	= nr_seq_ocorrencia_w
							and	a.nr_seq_guia		= nr_seq_guia_w
							and	dt_emissao_conta_w between trunc(dt_inicio_vigencia) and fim_dia(coalesce(dt_fim_vigencia, dt_emissao_conta_w));

							if (qt_libera_guia_w > 0) then
								ds_motivo_saida_regra_w := 'Liberado na Gestão de análise de autorizações';
								goto final;
							end if;

						end if;

						if	(ie_tipo_guia_ww IS NOT NULL AND ie_tipo_guia_ww::text <> '' AND ie_tipo_guia_ww <> ie_tipo_guia_p) then
							ds_motivo_saida_regra_w	:= 'Tipo de guia';
							goto final;
						end if;

						--jung 26/09/2012 - Alterado para que quando na regra o ie_pcmso seja 'N' a ocorrencia seja lancada para todos, pois quando o cb estava desmarcado a ocorrencia era gerada somente para quem nao tinha pcmso
						if (ie_pcmso_regra_w = 'S') 	 and (ie_pcmso_regra_w <> ie_pcmso_w) then
							ds_motivo_saida_regra_w		:= 'PCMSO';
							goto final;
						end if;

						ie_gerar_oc_partic_ww	:= 'N';
						ie_gerar_solic_w	:= 'N';
						ie_gerar_exec_w		:= 'N';
						ie_autorizado_w		:= 'N';

						ie_tipo_pessoa_qtde_w	:= coalesce(ie_tipo_pessoa_qtde_w, 'B');
						ds_observacao_w 	:= '';
						nr_seq_participante_w 	:= null;

						if (coalesce(dt_fim_vigencia_w::text, '') = '') then
							dt_fim_vigencia_w	:= (dt_referencia_ww + 1);
						end if;

						if	not(dt_referencia_ww between trunc(dt_inicio_vigencia_w) and fim_dia(dt_fim_vigencia_w)) then
							ds_motivo_saida_regra_w		:= 'Data início e fim de vigência';
							goto final;
						end if;

						/* Francisco - 08/06/2012 - Fazer essa verificação primeiro, é mais restritiva */

						/*Se for regra de itens com estrutura ou procedimento informado*/

						if (coalesce(ie_exige_procedimento_w,'N') = 'N') then
							if (cd_procedimento_regra_w > 0) and (nr_seq_estrutura_w > 0) then
								/*Em casos em que a cd_procedimento e a estrutura estão informado o cd_procedimento funciona como um adendo a estrura.
								    Ou seja um 'OR'. Ou o proc esta na conta ou um dos procedimentos da estrutura esta.*/
								if (ie_tipo_item_w = 3) then
									/*Se na regra já coincidiu o procedimento com o da conta já é gerado ocorrencia sem necessidadse de verificar a estrutura.	*/

									if	(((cd_procedimento_regra_w <> cd_procedimento_w) or (ie_origem_proced_regra_w <> ie_origem_proced_p_w)) and (pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, coalesce(cd_procedimento_p,cd_procedimento_w), coalesce(ie_origem_proced_p,ie_origem_proced_w), null) = 'N')) then
										ds_motivo_saida_regra_w		:= 'Estrutura de procedimento';
										goto final;
									end if;
								elsif (ie_tipo_item_w = 4) then
									if	((nr_seq_material_regra_w <> nr_seq_material_w) and (pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, null, null, nr_seq_material_w) = 'N')) then
										ds_motivo_saida_regra_w	:= 'Estrutura de material';
										goto final;
									end if;
								elsif (ie_tipo_item_w = 8) then

									/*Se for conta verifica-se primeiro se o proc informado existe na conta*/

									select	count(1)
									into STRICT	qt_item_existe_conta_w
									from	pls_conta_proc
									where	nr_seq_conta	 = nr_seq_conta_p
									and	cd_procedimento	 = cd_procedimento_regra_w
									and	ie_origem_proced = ie_origem_proced_regra_w;

									/*Caso não exista é verificada a estrutura*/

									if (qt_item_existe_conta_w = 0) then
										select	count(1)
										into STRICT	qt_item_existe_conta_w
										from	pls_conta_proc
										where	nr_seq_conta	= nr_seq_conta_p
										and	pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, cd_procedimento, ie_origem_proced, null) = 'S';
									end if;

									/*Caso não exista é verificada a estrutura*/

									if (qt_item_existe_conta_w = 0) then
										select	count(1)
										into STRICT	qt_item_existe_conta_w
										from	pls_conta_mat
										where	nr_seq_conta	= nr_seq_conta_p
										and	pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, null, null, nr_seq_material) = 'S';
									end if;

									if (qt_item_existe_conta_w = 0) then
										ds_motivo_saida_regra_w	:= 'Conta não se encaixa na estrutura';
										goto final;
									end if;
								end if;

							/*Se for regra de estrutura e material verifica-se os dois */

							elsif (coalesce(nr_seq_material_regra_w,0) > 0) and (coalesce(nr_seq_estrutura_w,0) > 0) then
								if (ie_tipo_item_w = 3) then
									/*Se for consistência de procedimento e possuir material na regra já esta incorreto*/

									ds_motivo_saida_regra_w	:= 'Regra por estrutura de material, mas procedimento';
									goto final;
								elsif (ie_tipo_item_w = 4) then
									if	((nr_seq_material_regra_w <> nr_seq_material_w) and (pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, null, null, nr_seq_material_w) = 'N')) then
										ds_motivo_saida_regra_w		:= 'Estrutura de material';
										goto final;
									end if;
								elsif (ie_tipo_item_w = 8) then
									/*Se for conta verifica-se primeiro se o mat informado existe na conta*/

									select	count(1)
									into STRICT	qt_item_existe_conta_w
									from	pls_conta_mat
									where	nr_seq_material = nr_seq_material_regra_w;

									/*Caso não exista é verificada a estrutura*/

									if (qt_item_existe_conta_w = 0) then
										select	count(1)
										into STRICT	qt_item_existe_conta_w
										from	pls_conta_mat
										where	nr_seq_conta	= nr_seq_conta_p
										and	pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, null, null, nr_seq_material) = 'S';
									end if;

									/*Caso não exista é verificada a estrutura proc*/

									if (qt_item_existe_conta_w = 0) then
										select	count(1)
										into STRICT	qt_item_existe_conta_w
										from	pls_conta_proc
										where	nr_seq_conta	= nr_seq_conta_p
										and	pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, cd_procedimento, ie_origem_proced, null) = 'S';
									end if;

									if (qt_item_existe_conta_w = 0) then
										ds_motivo_saida_regra_w	:= 'Estrutura conta';
										goto final;
									end if;
								end if;
							/*Se for regra de estrutura*/

							elsif (nr_seq_estrutura_w > 0) then
								if (ie_tipo_item_w = 3) then
									if (pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, coalesce(cd_procedimento_p,cd_procedimento_w), coalesce(ie_origem_proced_p,ie_origem_proced_w), null) = 'N') then
										ds_motivo_saida_regra_w		:= 'Estrutura da ocorrência';
										goto final;
									end if;
								elsif (ie_tipo_item_w = 4) then
									if (pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, null, null, nr_seq_material_w) = 'N') then
										ds_motivo_saida_regra_w		:= 'Estrutura da ocorrência';
										goto final;
									end if;
								elsif (ie_tipo_item_w = 8) then
									select	count(1)
									into STRICT	qt_item_existe_conta_w
									from	pls_conta_proc
									where	nr_seq_conta	= nr_seq_conta_p
									and	pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, cd_procedimento, ie_origem_proced, null) = 'S';

									if (qt_item_existe_conta_w = 0) then
										select	count(1)
										into STRICT	qt_item_existe_conta_w
										from	pls_conta_mat
										where	nr_seq_conta	= nr_seq_conta_p
										and	pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, null, null, nr_seq_material) = 'S';
									end if;

									if (qt_item_existe_conta_w = 0) then
										ds_motivo_saida_regra_w		:= 'Estrutura da ocorrência';
										goto final;
									end if;
								end if;
							/*Se for uma regra de procedimento*/

							elsif (cd_procedimento_regra_w > 0) then
								if (ie_tipo_item_w = 3) then
									/*Verifica se o procedimento da regra consiste com o do procedimento da conta*/

									if (cd_procedimento_regra_w 	<> coalesce(cd_procedimento_w,0)) or (ie_origem_proced_regra_w <> coalesce(ie_origem_proced_w,0)) then
										ds_motivo_saida_regra_w	:= 'Procedimento diferente';
										goto final;
									end if;

								elsif (ie_tipo_item_w = 4) then
									ds_motivo_saida_regra_w		:= 'Procedimento diferente';
									goto final;
								elsif (ie_tipo_item_w = 8) then
									select	count(1)
									into STRICT	qt_item_existe_conta_w
									from	pls_conta_proc
									where	nr_seq_conta		= nr_seq_conta_p
									and	cd_procedimento		= cd_procedimento_regra_w
									and	ie_origem_proced	= ie_origem_proced_regra_w;

									if (qt_item_existe_conta_w = 0) then
										ds_motivo_saida_regra_w	:= 'Procedimento diferente';
										goto final;
									end if;
								end if;
							/*Se for uma regra de material*/

							elsif (coalesce(nr_seq_material_regra_w,0) > 0) then
								if (ie_tipo_item_w = 3) then
									ds_motivo_saida_regra_w	:= 'Material diferente';
									goto final;
								elsif (ie_tipo_item_w = 4) then
									/*Verifica se o materual da regra consiste com o do material da conta*/

									if (nr_seq_material_regra_w <> coalesce(nr_seq_material_w,0)) then
										ds_motivo_saida_regra_w		:= 'Material diferente';
										goto final;
									end if;
								elsif (ie_tipo_item_w = 8) then
									select	count(1)
									into STRICT	qt_item_existe_conta_w
									from	pls_conta_mat
									where	nr_seq_conta	= nr_seq_conta_p
									and	nr_seq_material	= nr_seq_material_regra_w;

									if (qt_item_existe_conta_w = 0) then
										ds_motivo_saida_regra_w	:= 'Material diferente';
										goto final;
									end if;
								end if;
							end if;
						end if;


						if (coalesce(nr_seq_grupo_cooperativa_w,0) <> 0)	then
							if (ie_tipo_conta_w = 'I')	then -- PARA VALIDA COOPERATIVA NECESSITA SER UMA CONTA DE INTERCÂMBIO
								begin
								select	count(1)
								into STRICT	qt_cooperativa_val_w
								from	pls_cooperativa_grupo
								where	nr_seq_grupo 	 = nr_seq_grupo_cooperativa_w
								and	nr_seq_congenere = nr_seq_congenere_protocolo_w;
								exception
								when others then
									qt_cooperativa_val_w	:= 0;
								end;

								if (qt_cooperativa_val_w = 0)	then
									ds_motivo_saida_regra_w	:= 'Não pertence ao grupo de cooperativas';
									goto final;
								end if;

							else
								ds_motivo_saida_regra_w	:= 'Grupo cooperativa - conta não é de intercâmbio';
								goto final;
							end if;
						end if;

						if (coalesce(qt_dias_mensal_vencido_w,0) <> 0) and
							not (((qt_dias_vencido_w >= coalesce(qt_dias_mensal_vencido_w,0)) and (ie_pagador_isento_w = 'N')) or (coalesce(ie_pagador_isento_w::text, '') = '')) then
							ds_motivo_saida_regra_w	:= 'Dias vencidos de mensalidade';
							goto final;
						end if;


						if (coalesce(ie_tipo_pessoa_prestador_w,'A') <> 'A') then
							if (ie_tipo_pessoa_prestador_w = 'PF') then
								if (coalesce(cd_pessoa_fisica_consist_w,'0') = '0') then
									goto final;
								end if;
							elsif (ie_tipo_pessoa_prestador_w = 'PJ') then
								if (coalesce(cd_cgc_consist_w,'0') = '0') then
									goto final;
								end if;
							end if;

						end if;

						/*Consistencia das carteirinha*/

						if (coalesce(cd_usuario_plano_w,'X') <> 'X')	then
							if (coalesce(cd_usuario_plano_seg_w,'X') <> cd_usuario_plano_w)	then
								goto final;
							end if;
						end if;

						/*Consistencia tipo internado*/

						if (coalesce(ie_tipo_internado_regra_w,'X') <>	'X')	then
							if (ie_tipo_internado_w <> ie_tipo_internado_regra_w)	then
								ds_motivo_saida_regra_w		:= 'Tipo internação';
								goto final;
							end if;
						end if;

						if	((cd_grupo_proc_regra_w IS NOT NULL AND cd_grupo_proc_regra_w::text <> '') and (cd_grupo_proc_regra_w <> coalesce(cd_grupo_proc_w,0))) then
							ds_motivo_saida_regra_w		:= 'Grupo de procedimento';
							goto final;
						end if;

						if	((cd_especialidade_regra_w IS NOT NULL AND cd_especialidade_regra_w::text <> '') and (cd_especialidade_regra_w <> coalesce(cd_especialidade_w,0))) then
							ds_motivo_saida_regra_w		:= 'Especialidade procedimento';
							goto final;
						end if;

						if	((cd_area_procedimento_regra_w IS NOT NULL AND cd_area_procedimento_regra_w::text <> '') and (cd_area_procedimento_regra_w <> coalesce(cd_area_procedimento_w,0))) then
							ds_motivo_saida_regra_w		:= 'Área do procedimento';
							goto final;
						end if;

						if	(ie_preco_ww IS NOT NULL AND ie_preco_ww::text <> '' AND ie_preco_ww <> ie_preco_w) then
							ds_motivo_saida_regra_w		:= 'Formação de preço';
							goto final;
						end if;

						if	(ie_tipo_segurado_ww IS NOT NULL AND ie_tipo_segurado_ww::text <> '' AND ie_tipo_segurado_ww <> ie_tipo_segurado_w) then
							ds_motivo_saida_regra_w	:= 'Tipo beneficiário';
							goto final;
						end if;

						if	(nr_contrato_ww IS NOT NULL AND nr_contrato_ww::text <> '' AND nr_contrato_ww <> nr_contrato_w)  then
							ds_motivo_saida_regra_w	:= 'Contrato';
							goto final;
						end if;

						if	(ie_sexo_ww IS NOT NULL AND ie_sexo_ww::text <> '' AND ie_sexo_ww <> ie_sexo_w)  then
							ds_motivo_saida_regra_w	:= 'Sexo do beneficiário';
							goto final;
						end if;

						if	((nr_seq_plano_w IS NOT NULL AND nr_seq_plano_w::text <> '') and (nr_seq_plano_w <> coalesce(nr_seq_plano_p,0))) then
							ds_motivo_saida_regra_w	:= 'Plano';
							goto final;
						end if;

						if	(ie_local_cadastro_ww IS NOT NULL AND ie_local_cadastro_ww::text <> '' AND ie_local_cadastro_ww <> ie_local_cadastro_w) then
							ds_motivo_saida_regra_w	:= 'Local de cadastro';
							goto final;
						end if;

						if	(ie_tipo_pagador_w <> 'A' AND ie_tipo_pagador_w <> ie_tipo_pagador_p) then
							ds_motivo_saida_regra_w	:= 'Tipo de pagador';
							goto final;
						end if;

						if	(dt_dia_semana_w IS NOT NULL AND dt_dia_semana_w::text <> '' AND dt_dia_semana_w <> dia_semana_w) then
							ds_motivo_saida_regra_w	:= 'Dia semana';
							goto final;
						end if;

						if	(nr_seq_tipo_atendimento_w IS NOT NULL AND nr_seq_tipo_atendimento_w::text <> '' AND nr_seq_tipo_atendimento_w <> nr_seq_tipo_atendimento_p) then
							ds_motivo_saida_regra_w		:= 'Tipo atendimento';
							goto final;
						end if;

						if	(ie_tipo_processo_autor_w IS NOT NULL AND ie_tipo_processo_autor_w::text <> '' AND ie_tipo_processo_autor_w <> ie_tipo_processo_w) then
							ds_motivo_saida_regra_w	:= 'Tipo de processo autorização';
							goto final;
						end if;

						if	(ie_carater_internacao_ww IS NOT NULL AND ie_carater_internacao_ww::text <> '' AND ie_carater_internacao_ww <> ie_carater_internacao_w) then
							ds_motivo_saida_regra_w		:= 'Caráter internação';
							goto final;
						end if;

						if	(ie_tipo_contrato_intercambio_w IS NOT NULL AND ie_tipo_contrato_intercambio_w::text <> '' AND ie_tipo_contrato_intercambio_w <> ie_tipo_contrato_inter_w) then
							ds_motivo_saida_regra_w		:= 'Tipo contrato intercâmbio';
							goto final;
						end if;

						if	((nr_seq_congenere_ww IS NOT NULL AND nr_seq_congenere_ww::text <> '') and (coalesce(nr_seq_congenere_ww,0) <> coalesce(nr_seq_congenere_w,0))) then
							ds_motivo_saida_regra_w		:= 'Operadora congênere';
							goto final;
						end if;

						if (ie_cooperativa_w = 'S' and coalesce(nr_seq_congenere_w::text, '') = '') then
							ds_motivo_saida_regra_w		:= 'Somente cooperativa';
							goto final;
						end if;

						if	(nr_seq_intercambio_ww IS NOT NULL AND nr_seq_intercambio_ww::text <> '' AND nr_seq_intercambio_ww <> nr_seq_intercambio_w) then
							ds_motivo_saida_regra_w	:= 'Contrato de intercâmbio';
							goto final;
						end if;

						if	(ie_regulamentacao_ww IS NOT NULL AND ie_regulamentacao_ww::text <> '' AND ie_regulamentacao_ww <> ie_regulamentacao_w) then
							ds_motivo_saida_regra_w		:= 'Regulamentação';
							goto final;
						end if;

						if	(nr_seq_clinica_ww IS NOT NULL AND nr_seq_clinica_ww::text <> '' AND nr_seq_clinica_ww <> nr_seq_clinica_w) then
							ds_motivo_saida_regra_w		:= 'Indicação clínica';
							goto final;
						end if;

						if	(ie_tipo_consulta_ww IS NOT NULL AND ie_tipo_consulta_ww::text <> '' AND ie_tipo_consulta_ww <> ie_tipo_consulta_w) then
							ds_motivo_saida_regra_w	:= 'Tipo de consulta';
							goto final;
						end if;

						if	((cd_convenio_ww IS NOT NULL AND cd_convenio_ww::text <> '') and (coalesce(cd_convenio_ww,0) <> coalesce(cd_convenio_w,0))) then
							ds_motivo_saida_regra_w		:= 'Convênio';
							goto final;
						end if;

						if	(cd_categoria_ww IS NOT NULL AND cd_categoria_ww::text <> '' AND cd_categoria_ww <> cd_categoria_w) then
							ds_motivo_saida_regra_w		:= 'Categoria';
							goto final;
						end if;

						if	(nr_seq_tipo_acomod_conta_ww IS NOT NULL AND nr_seq_tipo_acomod_conta_ww::text <> '' AND nr_seq_tipo_acomod_conta_ww <> nr_seq_tipo_acomod_conta_w) then
							ds_motivo_saida_regra_w		:= 'Tipo de acomodação da conta';
							goto final;
						end if;

						if	(nr_seq_tipo_acomodacao_ww IS NOT NULL AND nr_seq_tipo_acomodacao_ww::text <> '' AND nr_seq_tipo_acomodacao_ww  <> nr_seq_tipo_acomodacao_w ) then
							ds_motivo_saida_regra_w		:= 'Tipo acomodação solicitada';
							goto final;
						end if;

						if	((sg_estado_operadora_ww IS NOT NULL AND sg_estado_operadora_ww::text <> '') and (coalesce(sg_estado_operadora_ww,'X') <> coalesce(sg_estado_operadora_w,'X'))) then
							ds_motivo_saida_regra_w		:= 'UF Operadora';
							goto final;
						end if;

						if	(ie_relacao_prest_pf_w IS NOT NULL AND ie_relacao_prest_pf_w::text <> '' AND ie_tipo_prest_prot_w <> 'PF') then
							ds_motivo_saida_regra_w		:= 'Tipo de relação prestador PF';
							goto final;
						end if;

						if	(ie_tipo_atend_tiss_ww IS NOT NULL AND ie_tipo_atend_tiss_ww::text <> '' AND ie_tipo_atend_tiss_ww <> ie_tipo_atend_tiss_w) then
							ds_motivo_saida_regra_w		:= 'Tipo atendimento TISS';
							goto final;
						end if;

						if	(ie_origem_conta_w IS NOT NULL AND ie_origem_conta_w::text <> '' AND ie_origem_conta_w <> ie_origem_ocorrencia_w) then
							ds_motivo_saida_regra_w		:= 'Origem da conta';
							goto final;
						end if;

						if	(ie_exige_senha_externa_w <> 'N' AND ie_exige_senha_externa_w <> ie_cd_senha_externa_w) then
							ds_motivo_saida_regra_w		:= 'Exige senha externa';
							goto final;
						end if;

						if	(ie_tipo_intercambio_ww <> 'A' AND ie_tipo_intercambio_ww <> ie_tipo_intercambio_w) then
							ds_motivo_saida_regra_w		:= 'Tipo de intercâmbio';
							goto final;
						end if;

						--(N,I,S)(Operadora,Intercâmbio,Ambas)
						if ( coalesce(ie_conta_intercambio_ww,'S') <> 'S') then -- não é ambos
							if (ie_conta_intercambio_ww <> ie_conta_intercambio_w) then
								ds_motivo_saida_regra_w		:= 'Conta de intercâmbio';
								goto final;
							end if;
						end if;

						if	(ie_produto_inativo_ww <> 'N' AND ie_produto_inativo_ww <> ie_produto_inativo_w) then
							ds_motivo_saida_regra_w		:= 'Produto inativo';
							goto final;
						end if;
						if (coalesce(ie_tipo_data_w,'C') = 'I') then
							if (ie_tipo_item_w	= 3) then
								dt_referencia_w	:= dt_procedimento_w;
							elsif (ie_tipo_item_w	= 4) then
								dt_referencia_w	:= dt_material_w;
							elsif (ie_tipo_item_w	= 8) then
								dt_referencia_w	:= dt_max_item_w;
							end if;
						elsif (coalesce(ie_tipo_data_w,'C') = 'C') then
							dt_referencia_w	:= dt_atendimento_referencia_w;
						end if;

						/* William - OS 397802 - Performance, truncar antes de fazer os selects */

						dt_referencia_w	:= trunc(dt_referencia_w,'dd');

						/*Diego OS 377384 - Obter se o beneficiario está rescindido */

						if (coalesce(ie_benef_rescindido_ww,'N') = 'S') then
							ie_benef_resci_w := pls_obter_se_benef_rescindido(nr_seq_conta_p,nr_seq_segurado_p, dt_referencia_w);

							if (coalesce(ie_benef_resci_w,'N') = 'N') then
								ds_motivo_saida_regra_w		:= 'Beneficiário rescindido';
								goto final;
							end if;
						end if;



						if (coalesce(ie_feriado_w,'N') = 'S') then
							/*Obter Feriado */

							select	count(1)
							into STRICT	qt_feriado_w
							from	feriado
							where	cd_estabelecimento	= cd_estabelecimento_p
							and	dt_feriado		= dt_referencia_w  LIMIT 1;

							if (qt_feriado_w > 0) then
								dia_feriado_w	:= 'S';

								select	max(ie_tipo_feriado)
								into STRICT	ie_tipo_feriado_w
								from	feriado
								where	cd_estabelecimento	= cd_estabelecimento_p
								and	dt_feriado		= dt_referencia_w;
							else
								dia_feriado_w		:= 'N';
								ie_tipo_feriado_w	:= '';
							end if;

							if (coalesce(dia_feriado_w, 'N') = 'N') then
								ds_motivo_saida_regra_w		:= 'Feriado';
								goto final;
							end if;
						end if;

						if (coalesce(ie_tipo_feriado_ww,'N') = 'S') then
							/*Obter Feriado */

							select	count(1)
							into STRICT	qt_feriado_w
							from	feriado
							where	cd_estabelecimento	= cd_estabelecimento_p
							and	dt_feriado		= dt_referencia_w  LIMIT 1;

							if (qt_feriado_w > 0) then
								dia_feriado_w	:= 'S';

								select	max(ie_tipo_feriado)
								into STRICT	ie_tipo_feriado_w
								from	feriado
								where	cd_estabelecimento	= cd_estabelecimento_p
								and	dt_feriado		= dt_referencia_w;
							else
								dia_feriado_w		:= 'N';
								ie_tipo_feriado_w	:= '';
							end if;

							if (coalesce(ie_tipo_feriado_w, 'N') = 'N') then
								ds_motivo_saida_regra_w	:= 'Tipo de feriado';
								goto final;
							end if;
						end if;

						if (coalesce(ie_nasc_morto_w,'N') = 'S') then
							if (coalesce(qt_nasc_mortos_w,0) = 0) and (coalesce(qt_obito_precoce_w,0) = 0) and (coalesce(qt_obito_tardio_w,0) = 0) then
								ds_motivo_saida_regra_w	:= 'Nascidos mortos';
								goto final;
							else
								if	(coalesce(qt_declaracao_obito_w,0) = (coalesce(qt_nasc_mortos_w,0) + coalesce(qt_obito_precoce_w,0) + coalesce(qt_obito_tardio_w,0))) then
									ds_motivo_saida_regra_w	:= 'Declaração óbito';
									goto final;
								end if;
							end if;
						end if;

						if (coalesce(nr_seq_grupo_rec_ww,0) > 0) then
							if (ie_tipo_item_w = 3) then
								if (nr_seq_grupo_rec_ww <> coalesce(nr_seq_grupo_rec_w,0)) then
									ds_motivo_saida_regra_w	:= 'Grupo receita';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Grupo receita - material';
								goto final;
							end if;
						end if;
						/*Se for uma regra que verifica o prestador executante, ou Atendimento */

						/*Orientado por DRQUADROS 24/01/2013*/

						if (ie_tipo_prestador_w = 'E') then
							nr_seq_prestador_w	:= nr_seq_prestador_exec_w;
						elsif (ie_tipo_prestador_w = 'S') then
							nr_seq_prestador_w	:= nr_seq_prest_prot_w;

							/*select	a.nr_seq_prestador
							into	nr_seq_prestador_w
							from	pls_protocolo_conta	a,
								pls_conta		b
							where	a.nr_sequencia	= b.nr_seq_protocolo
							and	b.nr_sequencia	= nr_seq_conta_p;*/
						elsif (ie_tipo_prestador_w = 'L') then
							nr_seq_prestador_w	:= nr_seq_prestador_conta_w;
							/*select	b.nr_seq_prestador
							into	nr_seq_prestador_w
							from	pls_conta	b
							where	b.nr_sequencia	= nr_seq_conta_p;*/
						else
							nr_seq_prestador_w	:= nr_seq_prestador_p;
						end if;

						/*Robson da Silva*/

						if (cd_espec_medica_w IS NOT NULL AND cd_espec_medica_w::text <> '') then
							ie_espec_medica_w	:= pls_obter_se_espec_prestador(nr_seq_prestador_w, cd_espec_medica_w);

							if (ie_espec_medica_w = 'N') then
								ds_motivo_saida_regra_w	:= 'Especialidade prestador';
								goto final;
							end if;
						end if;

						/*askono*/

						/*Se for regra de prestador selecionado ( Tipo prestador ) diferente de prestador protocolo --- askono*/

						if ( coalesce(ie_prestador_exec_w,'N') = 'S')  then
							if (nr_seq_prest_prot_w > 0) and (nr_seq_prestador_w = nr_seq_prest_prot_w)  then
								ds_motivo_saida_regra_w	:= 'Prestador executor';
								goto final; /*Askono - OS332069  - Verifica se o prestador do protocolo é diferente do prestador informado no campo "Tipo Prestador" , caso  sejam iguais não é gerado ocorrência */
							end if;
						end if;

						if (coalesce(nr_seq_prestador_pag_w,0) > 0) then
							ie_retorno_w := pls_consistir_prestador_pgto(	nr_seq_conta_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_prestador_pag_w, ie_retorno_w, nm_usuario_p);

							if (coalesce(ie_retorno_w,'N') = 'N') then
								ds_motivo_saida_regra_w	:= 'Prestador pagamento';
								goto final;
							end if;
						end if;

						/*if	(nr_seq_prestador_w is not null) then
							--Obter dados do prestador
							select	max(nr_seq_tipo_prestador),
								max(nr_seq_classificacao),
								max(cd_prestador)
							into	nr_seq_tipo_prestador_w,
								nr_seq_classificacao_w,
								cd_prestador_w
							from	pls_prestador
							where	nr_sequencia	= nr_seq_prestador_w;
						else
							nr_seq_tipo_prestador_w	:= 0;
						end if;*/
						/* Obter dados do prestador */

						/*begin
						select	nr_seq_tipo_prestador,
							nr_seq_classificacao,
							cd_prestador
						into	nr_seq_tipo_prestador_w,
							nr_seq_classificacao_w,
							cd_prestador_w
						from	pls_prestador
						where	nr_sequencia	= nr_seq_prestador_w;
						exception
						when others then
							nr_seq_tipo_prestador_w	:= 0;
						end;*/
						/*Obter se a regra é para uma classificacao do prestador*/

						if (coalesce(ie_complemento_conta_w,'N') = 'S')	and (ie_tipo_item_w = 3) then
							select	max(nr_seq_classificacao)
							into STRICT	nr_seq_classificacao_ww
							from	pls_prestador
							where	nr_sequencia	= nr_seq_prestador_ww;

							if (coalesce(nr_seq_classificacao_regra_w,0) > 0) then
								if (nr_seq_classificacao_regra_w <> nr_seq_classificacao_ww) or (coalesce(nr_seq_classificacao_ww::text, '') = '') then
									ds_motivo_saida_regra_w	 := 'Classificação prestador';
									goto final;
								end if;
							end if;

						elsif (coalesce(nr_seq_classificacao_regra_w,0) > 0) then
							select	max(nr_seq_classificacao)
							into STRICT	nr_seq_classificacao_w
							from	pls_prestador
							where	nr_sequencia	= nr_seq_prestador_w;

							if (nr_seq_classificacao_regra_w <> nr_seq_classificacao_w) or (coalesce(nr_seq_classificacao_w::text, '') = '') then
								ds_motivo_saida_regra_w	:= 'Classificação prestador';
								goto final;
							end if;
						end if;

						/*Obter se a regra é para um prestador especifico*/

						if (coalesce(nr_seq_prestador_regra_w,0) > 0) then
							if (nr_seq_prestador_regra_w <> nr_seq_prestador_w) or (coalesce(nr_seq_prestador_w::text, '') = '') then
								ds_motivo_saida_regra_w		:= 'Prestador';
								goto final;
							end if;
						end if;
						/*Obter se a regra é para o prestador especificado*/

						if (coalesce(cd_prestador_regra_w,0) > 0) and (coalesce(qt_participante_w,0) = 0)	then
							select	max(cd_prestador)
							into STRICT	cd_prestador_w
							from	pls_prestador
							where	nr_sequencia	= nr_seq_prestador_w;

							if (cd_prestador_regra_w <> cd_prestador_w) or (coalesce(cd_prestador_w::text, '') = '') then
								ds_motivo_saida_regra_w	:= 'Código prestador';
								goto final;
							end if;
						end if;

						/*Se for uma regra para o tipo do prestador*/

						if (coalesce(nr_seq_tipo_prestador_regra_w,0) > 0) then
							select	max(nr_seq_tipo_prestador)
							into STRICT	nr_seq_tipo_prestador_w
							from	pls_prestador
							where	nr_sequencia	= nr_seq_prestador_w;

							/*Se for é verificado se o prestador é do tipo do prestador da regra*/

							if (nr_seq_tipo_prestador_regra_w <> nr_seq_tipo_prestador_w) or (coalesce(nr_seq_tipo_prestador_w::text, '') = '') then
								ds_motivo_saida_regra_w		:= 'Tipo prestador';
								goto final;
							end if;
						end if;
						/*Verificar duplicidade de guia de intercambio OS - 560454*/

						if (coalesce(ie_nota_intercambio_w,'N') = 'S')	then
							if (ie_conta_intercambio_w = 'I')	then

								select max(b.nr_fatura)
								into STRICT	nr_fatura_dup_w
								from	pls_conta		a,
									ptu_fatura		b
								where	a.cd_guia		= cd_guia_w
								and	a.nr_sequencia		<> nr_seq_conta_p
								and	b.nr_sequencia		= a.nr_seq_fatura
								and	b.cd_unimed_origem	= cd_congenere_w
								and	b.ie_status		<> 'CA';

								if (coalesce(nr_fatura_dup_w::text, '') = '')	then
									ds_motivo_saida_regra_w	:= 'Não existem notas de intercâmbio em duplicidade';
									goto final;
								else
									ds_observacao_w := ds_observacao_w || ' Fatura em duplicidade '||nr_fatura_dup_w||', operadora '||cd_congenere_w||chr(13)||chr(10);
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Nota fiscal de intercâmbio - Conta não é de intercâmbio';
								goto final;
							end if;
						end if;

						/*Verificar se o prestador pertence ao grupo dos prestador*/

						if (coalesce(nr_seq_grupo_prestador_w,0) > 0) then
							select	max(nr_seq_classificacao)
							into STRICT	nr_seq_classificacao_w
							from	pls_prestador
							where	nr_sequencia	= nr_seq_prestador_w;

							ie_grupo_prest_w	:= pls_se_grupo_preco_prestador(nr_seq_grupo_prestador_w, nr_seq_prestador_w, nr_seq_classificacao_w);

							if (ie_grupo_prest_w = 'N') then
								ds_motivo_saida_regra_w	:= 'Grupo prestadores';
								goto final;
							end if;
						end if;
						/* Tipo de relação do prestador pessoa jurídica, a qual o profissional do prestador pessoa física do PROTOCOLO está vinculado. */

						if (coalesce(ie_relacao_prest_pf_w,'X') <> 'X') and (ie_tipo_prest_prot_w = 'PF') then
							select	count(1)
							into STRICT	qt_registro_w
							from	pls_prestador		b,
								pls_prestador_medico	a
							where	a.nr_seq_prestador	= b.nr_sequencia
							and	a.cd_medico		= cd_medico_protocolo_w
							and	b.ie_tipo_relacao	= ie_relacao_prest_pf_w
							and	a.ie_situacao		= 'A'
							and	coalesce(dt_referencia_w,clock_timestamp()) between trunc(coalesce(a.dt_inclusao,coalesce(dt_referencia_w,clock_timestamp())),'dd') and
								fim_dia(coalesce(a.dt_exclusao,coalesce(dt_referencia_w,clock_timestamp())));

							if (qt_registro_w = 0) then
								ds_motivo_saida_regra_w	:= 'Tipo relação prestador PF';
								goto final;
							end if;
						end if;

						/*Grupo serviço*/

						if (coalesce(nr_seq_grupo_servico_w,0) > 0) then
							ie_grupo_servico_w	:= pls_se_grupo_preco_servico(nr_seq_grupo_servico_w, coalesce(cd_procedimento_p,cd_procedimento_w), ie_origem_proced_w);

							if (ie_grupo_servico_w	= 'N') then
								ds_motivo_saida_regra_w	:= 'Grupo serviço';
								goto final;
							end if;
						end if;

						/*Verificar se a ocorrencia possui regra cadastradade exigencia de estrutura. */

						/*Caso seja Autorização / Conta*/

						if (coalesce(ie_exige_procedimento_w,'N') <> 'N') then
							/*Exige ao menos um dos procedimentos da estrutura ou o procedimento informado.*/

							if (ie_exige_procedimento_w = 'U') then
								if (ie_tipo_item_w <> 4) then
									if (coalesce(nr_seq_estrutura_w,0) > 0) then
										ie_estrutura_w	:= pls_obter_estrut_ao_menos_um(nr_seq_estrutura_w, null, nr_seq_conta_p, cd_procedimento_regra_w, ie_origem_proced_regra_w, coalesce(cd_procedimento_p,cd_procedimento_w), coalesce(ie_origem_proced_p,ie_origem_proced_w));
										/*Retorna S se deve-se gerar ocorrencia
										Retorna N se não é necessario*/
									end if;
								else
									ds_motivo_saida_regra_w	:= 'Exigência procedimento';
									goto final;
								end if;

								/*Se não é nencessário criar ocorrência*/

								if (ie_estrutura_w = 'N') then
									ds_motivo_saida_regra_w	:= 'Exigência procedimento';
									goto final;
								end if;
							/*Exige todos os procedimentos da estrutura, mais o procedimento se existir*/

							elsif (ie_exige_procedimento_w = 'T') then
								ie_estrutura_w := 'N';

								if (coalesce(nr_seq_estrutura_w,0) > 0) then
									/*Se há estrutura cadastrada verifica-se se todos os procedimentos da regra estão na conta/guia*/

									ie_estrutura_w	:= pls_obter_se_estrut_ocor_todos(nr_seq_estrutura_w, null, nr_seq_conta_p, cd_procedimento_regra_w, ie_origem_proced_regra_w,
															coalesce(cd_procedimento_p,ie_origem_proced_w), coalesce(ie_origem_proced_p,ie_origem_proced_w), nr_seq_material_w);
									/*Retorna S se deve-se gerar ocorrencia
									Retorna N se não é necessario*/
								end if;

								/*Não gera ocorrencia se todos os procedimentos da estrutura , mais o procedimento se existir, estiver na regra.*/

								if (ie_estrutura_w = 'N') then
									ds_motivo_saida_regra_w := 'Exigência procedimento';
									goto final;
								end if;
							/*Exige todos os procedimentos da estrutura, mais o procedimento se existir e nenhum procedimento além.*/

							elsif (ie_exige_procedimento_w = 'S') then
								/*Verifica-se se todos os procedimentos da regra estão na conta/guia e nenhum outro procedimento*/

								ie_estrutura_w	:= pls_obter_estrut_somente_itens(nr_seq_estrutura_w, null, nr_seq_conta_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w, cd_procedimento_regra_w, ie_origem_proced_regra_w);
								/*Retorna S se deve-se gerar ocorrencia
								Retorna N se não é necessario*/
								if (ie_estrutura_w = 'N') then
									ds_motivo_saida_regra_w		:= 'Exigência procedimento';
									goto final;
								end if;
							end if;
						end if;

						/* Verificar se for regra de quantidade de idade minima ou maxima da regra, sendo "A" por ano e "M" por meses*/

						if (coalesce(ie_unid_tempo_idade_w,'A') = 'A') then
							if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w > qt_idade_w) or
								(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w < qt_idade_w) then
								ds_motivo_saida_regra_w	:= 'Idade beneficiário';
								goto final;
							end if;
						elsif (coalesce(ie_unid_tempo_idade_w,'A') = 'M') then
							if	(qt_idade_min_w IS NOT NULL AND qt_idade_min_w::text <> '' AND qt_idade_min_w > qt_idade_meses_w) or
								(qt_idade_max_w IS NOT NULL AND qt_idade_max_w::text <> '' AND qt_idade_max_w < qt_idade_meses_w) then
								ds_motivo_saida_regra_w	:= 'Idade beneficiário';
								goto final;
							end if;
						end if;

						if (coalesce(nr_seq_grupo_contrato_w,0) <> 0) then
							select	count(1)
							into STRICT	qt_existe_grupo_w
							from	pls_preco_contrato	a
							where	a.nr_seq_grupo		= nr_seq_grupo_contrato_w
							and (nr_seq_contrato	= nr_seq_contrato_w
							or	 nr_seq_intercambio	= nr_seq_intercambio_w);

							if (qt_existe_grupo_w = 0) then
								ds_motivo_saida_regra_w	:= 'Grupo contrato';
								goto final;
							end if;
						end if;

						if (coalesce(ie_consiste_co_duplic_w,'N') = 'S')	/*and
							/*(nvl(ie_conta_intercambio_w,'N') = 'I')	*/
	then

							ie_gerar_co_duplic_w	:= pls_obter_co_mat_duplic(cd_procedimento_p_w,ie_origem_proced_p_w,dt_procedimento_w,nr_seq_conta_proc_w,nr_seq_conta_p);

							if (coalesce(ie_gerar_co_duplic_w,'N')  = 'S')	then
								ds_motivo_saida_regra_w	:= 'Cobrado apenas um valor de CO no intercâmbio';
								goto final;
							end if;

						end if;

						/*Consistencia do fornecedor solicitante do material*/

						if (coalesce(ie_consiste_prest_fornec_w,'N') = 'S') and (ie_tipo_item_w = 4) then

							if (nr_seq_prest_fornec_w IS NOT NULL AND nr_seq_prest_fornec_w::text <> '') or (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '') then

							/*obtendo status do material especial*/

								if (nr_seq_material_w IS NOT NULL AND nr_seq_material_w::text <> '')	then
									begin
									select	ie_status,
										nr_seq_material,
										coalesce(nr_seq_prest_fornec,coalesce(nr_seq_prestador,0))
									into STRICT	ie_mat_espec_aut_w,
										nr_seq_material_lib_w,
										nr_seq_prestador_fornec_w
									from	pls_solic_lib_mat_med
									where	nr_seq_segurado = nr_seq_segurado_p
									and	nr_seq_material = nr_seq_material_w
									and	nr_seq_guia	= nr_seq_guia_ww
									and	ie_status 	= 3;
									exception
									when others then
										ie_mat_espec_aut_w	:= '';
										nr_seq_material_lib_w	:= null;
										nr_seq_prestador_fornec_w := 0;
									end;

									if (coalesce(nr_seq_prest_fornec_w,nr_seq_prestador_exec_w) = nr_seq_prestador_fornec_w) then
										ds_motivo_saida_regra_w	:= 'Prestador Fornec não é igual';
										goto final;
									end if;
								else
									ds_motivo_saida_regra_w	:= 'Material não informado';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Prestadores Fornec nulos';
								goto final;
							end if;
						end if;

						if (coalesce(nr_seq_proc_espec_w,0) > 0)	then
							if (coalesce(nr_seq_conta_proc_w,0) > 0)	and (coalesce(qt_participante_w,0) = 0)		then
								/*Se for caso de procedimento X especialidade e for medico executor é testado todos os procedimentos;
								    Se um deles der negado já gera a ocorrência*/
								if (pls_obter_se_espec_solic_oc(nr_seq_conta_proc_w, nr_seq_proc_espec_w, cd_medico_executor_w) = 'S') then
									ds_motivo_saida_regra_w	:= 'Procedimento Especial';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Procedimento especial - Não existe procedimento informado';
								goto final;
							end if;
						end if;

						if (coalesce(nr_seq_conta_proc_partic_w,0) > 0) then
							ie_oco_grau_partic_w	:= pls_obter_proc_grau_oc_partic(	nr_seq_conta_proc_partic_w,
															nr_seq_grau_partic_ww,
															cd_procedimento_w,
															ie_origem_proced_w,
															nr_seq_conta_p,
															nr_seq_conta_proc_w);

							if ( ie_oco_grau_partic_w = 'N') or (coalesce(cd_procedimento_w,0) = 0 )	then
								goto final;
							end if;
						end if;

						/*Regra para grau de participação duplicado*/

						if (coalesce(nr_seq_duplic_grau_part_w,0) > 0)	then
							/*só ira gerar se houver proc informado*/

							ie_grau_duplic_w	:= pls_consist_grau_partic_duplic(nr_seq_duplic_grau_part_w,nr_seq_conta_p,nr_seq_conta_proc_w);

							if (ie_grau_duplic_w = 'N')	then
								ds_motivo_saida_regra_w	:= 'Grau de participação duplicado';
								goto final;
							end if;
						end if;

						/*tratamento do campo ie_consiste_auxiliar deverá verificar se dentre os auxiliares da conta/item não existe nenhum que exeda o número de auxiliares permitidos
						na tabela de preço selecionado, para esta consistência é observado o cadastro da tabela de preço e o cadastro realizado nos cadastros gerais > plano de saúde> contas médicas>
						grau de participação profissional campo posição auxiliar, este somente será verificado se existir profissional com o grau de participação auxiliar ou na conta ou no item*/
						if (ie_consiste_auxiliar_w = 'S')then
							if (nr_auxiliares_w IS NOT NULL AND nr_auxiliares_w::text <> '') then
								if	((ie_tipo_guia_p = 3) or (coalesce(nr_seq_conta_proc_w,0) = 0)) then
									ie_qtd_auxiliar_maior_w := 'N';
								else
									ie_qtd_auxiliar_maior_w := pls_consiste_auxiliar( 	ie_tipo_guia_p, nr_seq_conta_p, nr_seq_conta_proc_w, nr_auxiliares_w, nm_usuario_p, cd_estabelecimento_p, ie_qtd_auxiliar_maior_w);
								end if;

								if (ie_qtd_auxiliar_maior_w = 'N') then
									ds_motivo_saida_regra_w	:= 'Quantidade auxiliares';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Quantidade auxiliares';
								goto final;
							end if;
						end if;

						/* Verificar se o CID se encaixa na regra */

						if (coalesce(cd_doenca_cid_w,'X') <> 'X') then
							ie_cid_w	:= pls_obter_se_cid_ocorrencia(null,null,nr_seq_conta_p,cd_doenca_cid_w);

							if (ie_cid_w = 'N') then
								ds_motivo_saida_regra_w	 := 'CID';
								goto final;
							end if;
						end if;

						/*Grupos de Doencas*/

						if	((coalesce(nr_seq_grupo_doenca_regra_w,0) > 0) and (coalesce(cd_doenca_cid_conta_w, '~X~') <> '~X~')) then
							ie_grupo_doenca_w	:= pls_se_grupo_preco_doenca(nr_seq_grupo_doenca_regra_w, cd_doenca_cid_conta_w);

							if (ie_grupo_doenca_w = 'N') then
								ds_motivo_saida_regra_w := 'Grupo CID';
								goto final;
							end if;
						end if;

						/* Verificar se exige guia referência e a mesma não foi informada */

						if (coalesce(ie_guia_referencia_w,'N') = 'S') then
							if (coalesce(cd_guia_referencia_w,'X') <> 'X') then
								ds_motivo_saida_regra_w	:= 'Guia referência';
								goto final;
							end if;
						end if;

						/*Obter os valores pagos pelo benficiário e paro o prestador e verificar se o beneficiário esta pagando a menor.
						Se for o caso gerar uma ocorrência. */
						if (coalesce(ie_benef_prestador_w,'N') = 'S') and (ie_tipo_item_w = 3) then
							ie_benef_menor_w := pls_obter_se_benef_pag_menor(nr_seq_conta_proc_w);
							if (ie_benef_menor_w = 'S') then
								ds_motivo_saida_regra_w	:= 'Benficiário menor de idade';
								goto final;
							end if;
						end if;

						/*Consiste qtd autorizada    - Qtd Procedimento /material  da conta   */

						/*ASKONO - Verificar  qtde autorizada da conta. Se a qtde do proc/mat da conta for maior que a autorizada, gera ocorrência*/

						if (coalesce(ie_consiste_qtd_aut_w,'N') = 'S' ) then
							if (ie_tipo_item_w in (3,4)) then
								if (ie_tipo_guia_p in (4,5)) then /*se resumo internação ou guia/spsadt, ligação de guia feita pela guia referencia */
									if (coalesce(coalesce(cd_guia_referencia_w,cd_guia_w),'~X~') <> '~X~') then
										/*procedimento da guia*/

										if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
											qt_autorizada_w	:= pls_obter_dados_item_aut( nr_seq_guia_w, ie_origem_proced_w, cd_procedimento_w, null,'QA');
										/*material da guia*/

										elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
											qt_autorizada_w	:= pls_obter_dados_item_aut( nr_seq_guia_w, '', '',nr_seq_material_w,'QA');
										else
											ds_motivo_saida_regra_w	:= 'Quantidade autorizada';
											goto final;
										end if;

										if (coalesce(qt_autorizada_w,0) > 0)	then
											if (qt_autorizada_w >= coalesce(qt_item_conta_w,0)) then
												ds_motivo_saida_regra_w	:= 'Quantidade autorizada';
												goto final;
											end if;
										else
											ds_motivo_saida_regra_w	:= 'Quantidade autorizada -  nulo';
											goto final;
										end if;
									else
										ds_motivo_saida_regra_w		:= 'Quantidade autorizada - Conta';
										goto final;
									end if;
								elsif (ie_tipo_guia_p = 3 ) then/*quando guia consulta, ligação pela cd guia, não tem material*/
									if (coalesce(cd_guia_w,'~Ç~') <> '~Ç~') then
										if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
											qt_autorizada_w	:= pls_obter_dados_item_aut(nr_seq_guia_w, ie_origem_proced_w, cd_procedimento_w,null,'QA');

											if (coalesce(qt_autorizada_w,0) > 0)	then
												if (qt_autorizada_w >= coalesce(qt_item_conta_w,0)) then
													ds_motivo_saida_regra_w	:= 'Quantidade autorizada - Proc';
													goto final;
												end if;
											else
												ds_motivo_saida_regra_w	:= 'Quantidade autorizada -  nulo';
												goto final;
											end if;
										else
											ds_motivo_saida_regra_w	:= 'Quantidade autorizada - Mat';
											goto final;
										end if;
									else
										ds_motivo_saida_regra_w	:= 'Quantidade autorizada - Sem guia';
										goto final;
									end if;
								else
									ds_motivo_saida_regra_w	:= 'Quantidade autorizada - Tipo de guia';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Quantidade autorizada - conta';
								goto final;
							end if;
						end if;/*ASKONO- consiste qte autorizada.*/
-------
						if (coalesce(nr_seq_grupo_produto_w,0) > 0)	then
							ie_grupo_produto_w	:= pls_se_grupo_preco_produto(nr_seq_grupo_produto_w, nr_seq_plano_p);

							if (ie_grupo_produto_w = 'N')	then
								ds_motivo_saida_regra_w	:= 'Grupo produto';
								goto final;
							end if;
						end if;

						/* Verificar se a data do procedimento ou material da conta, está fora do periodo de internação */

						if (coalesce(ie_item_fora_periodo_int_w,'N') = 'S') then
							if	((ie_tipo_guia_p = '6') or (ie_internacao_w = 'S')) and (ie_tipo_item_w in (3,4)) then
								ie_item_fora_per_int_w	:= pls_obter_item_fora_period_int(nr_seq_conta_p, nr_seq_item_w, ie_tipo_item_w);

								if (ie_item_fora_per_int_w = 'S') then
									ds_motivo_saida_regra_w	 := 'Item fora período internação';
									goto final;
								end if;
							else
								/*Se for uma regra de fora do periodo de internação e não for uma guia de internação ou sp/sadt internado
								    A regra já falhou e não gera ocorrencia*/
								ds_motivo_saida_regra_w := 'Item fora período internação - sem internação';
								goto final;
							end if;
						end if;

						/* Verificar se o beneficiário tem mais de uma internação no mesmo periodo */

						if (coalesce(ie_dupla_internacao_w,'N') = 'S') then
							/*Verificados contas de internação ou sp/sadt do tipo atendimento internado. */

							if	((ie_tipo_guia_p in ('5','6')) or (ie_tipo_guia_p = '4' AND ie_internacao_w = 'S')) and (ie_tipo_item_w = 8 ) then
								SELECT * FROM pls_obter_se_dupla_internacao(nr_seq_conta_p, nr_seq_segurado_p, ie_dupla_int_w, ds_observacao_dupla_int_w) INTO STRICT ie_dupla_int_w, ds_observacao_dupla_int_w;

								if (ie_dupla_int_w = 'S') then
									ds_motivo_saida_regra_w	:= 'Dupla internação';
									goto final;
								end if;

								ds_observacao_w := substr(ds_observacao_w || ds_observacao_dupla_int_w || chr(13) || chr(10) ,1,4000);
							else
							/*Se for uma regra de internação mas regra de mais de uma internação no mesmo periodo masi a regra não é para autorização/conta
							    ou guia de internação a regra não é válida*/
								ds_motivo_saida_regra_w	:= 'Dupla internação - sem internação';
								goto final;
							end if;
						end if;

						if (ie_regime_internacao_regra_w IS NOT NULL AND ie_regime_internacao_regra_w::text <> '') then
							if (ie_tipo_item_w = 8)	then
								ie_tipo_guia_w	:= ie_tipo_guia_conta_w;
								/*select	ie_tipo_guia,
									ie_regime_internacao
								into	ie_tipo_guia_w,
									ie_regime_internacao_w
								from	pls_conta
								where	nr_sequencia = nr_seq_conta_p; */
								/*Verificação somente para contas de internação	*/

								if (ie_tipo_guia_w = 5) then
									/*Se não for do tipo especifico da regra não é gerado ocorrencia*/

									if (ie_regime_internacao_w <> ie_regime_internacao_regra_w) then
										ds_motivo_saida_regra_w	 := 'Regime internação';
										goto final;
									end if;
								else
									/*Se for uma regra de internação e não for guia de internação pode continuar o processo*/

									ds_motivo_saida_regra_w	:= 'Regime internação - sem internação';
									goto final;
								end if;
							end if;
						end if;

						/*Verificado se trata de uma regra de quantidade Executa apenas uma vez*/

						if (ie_executa_uma_vez_w = 'S') and (ie_tipo_item_w in (3,8)) then
							ie_estrutura_w := pls_obter_se_estrut_realizada(nr_seq_estrutura_w, cd_procedimento_w, ie_origem_proced_p,
									nr_seq_segurado_p, nr_seq_item_w, ie_tipo_item_w, cd_procedimento_regra_w, ie_origem_proced_regra_w, nr_seq_conta_p);

							/*Se o beneficiário nunca gerou o procedimento, da regra e da est
							rutura, então não gera ocorrencia*/
							if (ie_estrutura_w = 'N') then
								ds_motivo_saida_regra_w	:= 'Execução única';
								goto final;
							end if;
						end if;

						if (coalesce(ie_regra_valor_pos_estab_w,'N') = 'S') then
							if (ie_geracao_pos_estabelecido_w = 'C') and (ie_tipo_item_w in (3,4)) then
								if (ie_tipo_item_w = 3) then
									begin
									select	vl_beneficiario
									into STRICT	vl_pos_estab_w
									from	pls_conta_pos_estabelecido
									where	nr_seq_conta_proc	= nr_seq_conta_proc_w
									and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = ''));
									exception
									when others then
										vl_pos_estab_w := 0;
									end;

									if (coalesce(vl_pos_estab_w,0) > 0 ) then
										ds_motivo_saida_regra_w	 := 'Valor pós-estabelecido';
										goto final;
									end if;
								elsif (ie_tipo_item_w = 4 ) then
									begin
									select	vl_beneficiario
									into STRICT	vl_pos_estab_w
									from	pls_conta_pos_estabelecido
									where	nr_seq_conta_mat	= nr_seq_conta_mat_w
									and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = ''));
									exception
									when others then
										vl_pos_estab_w := 0;
									end;

									if (coalesce(vl_pos_estab_w,0) > 0 ) then
										ds_motivo_saida_regra_w	 := 'Valor pós-estabelecido';
										goto final;
									end if;
								end if;
							else
								ds_motivo_saida_regra_w	 := 'Regra de consistência de valor pós-estabelecido';
								goto final;
							end if;
						end if;
						/*Diego - Verificar se é uma regra de limitação de data de recebimento*/

						if (coalesce(qt_dias_limite_w,0) > 0) then
							/*askono - 16-05-2012 - Encapsulei a regra nesta procedure abaixo*/

							ie_tipo_guia_w	:= ie_tipo_guia_conta_w;
							/*select	max(ie_tipo_guia)
							into	ie_tipo_guia_w
							from	pls_conta
							where	nr_sequencia = nr_seq_conta_p;*/
							SELECT * FROM pls_consiste_prazo_recebimento(qt_dias_limite_w, ie_tipo_data_envio_rec_w, ie_tipo_data_envio_w, cd_guia_referencia_w, ie_tipo_guia_w, nr_seq_segurado_p, nr_seq_protocolo_w, nr_seq_conta_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w, ie_tipo_item_w, cd_tiss_atendimento_w, nm_usuario_p, ds_observacao_out_w, ie_limite_dt_recebimento_out_w ) INTO STRICT ds_observacao_out_w, ie_limite_dt_recebimento_out_w;

							if (ie_limite_dt_recebimento_out_w = 'S') then
								ds_motivo_saida_regra_w	 := 'Quantidade de dias limite';
								goto final;
							end if;

							ds_observacao_w	:= substr(ds_observacao_out_w, 1, 4000);
						end if;
						/*Regra tipo data da conta*/

						if (coalesce(ie_data_conta_w,0)> 0) then
							ie_gerar_ocorrencia_out_w := pls_tratar_regra_dt_conta(ie_data_conta_w, dt_atendimento_referencia_w, dt_alta_int_w, dt_entrada_int_w, dt_protocolo_w, nm_usuario_p, ie_gerar_ocorrencia_out_w);

							if (ie_gerar_ocorrencia_out_w ='N') then
								ds_motivo_saida_regra_w	:= 'Regra data conta';
								goto final;
							end if;
						end if;

												/* Regra tipo data do item*/

						if (coalesce(ie_data_item_w,0) > 0)	then

							if (coalesce(ie_tipo_item_w,0) in (3,4)) then
								ie_gerar_ocorrencia_out_w  := pls_tratar_regra_dt_item(ie_data_item_w, ie_tipo_item_w, dt_procedimento_conta_w, dt_material_conta_w, dt_entrada_int_w, dt_alta_int_w, dt_atendimento_referencia_w, dt_atendimento_referencia_w, nm_usuario_p, ie_gerar_ocorrencia_out_w );

								if (ie_gerar_ocorrencia_out_w = 'N') then
									ds_motivo_saida_regra_w		:= 'Regra data item';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w		:= 'Data Regra conta médica';
								goto final;
							end if;
						end if;

						/*Verificar se é uma regra de exigência de indicação clinica*/

						if (coalesce(ie_exige_indicacao_clinica_w,'N') = 'S') then
							/*Se haver uma indicação clinica não é gerado ocorrência*/

							if (qt_indicacao_clinica_w = 0) then
								ds_motivo_saida_regra_w	:= 'Indicação clínica';
								goto final;
							end if;
						end if;

						/*Se for uma regra de valor minimo e do tipo Autorização/Conta */

						if (coalesce(vl_minimo_w,0) > 0) then
							/*A rotina irá verificar se a soma dos valores calculados é maior que a regra de valor minimo  e entçao irá retornar 'S'*/

							--ie_valor_minimo_w := pls_obter_se_valor_calculado(nr_seq_conta_p, null, vl_minimo_w); -- ASKONO - COMENTADO E CRIADO ROTINA SOMENTE PARA CONTAS
							ie_valor_minimo_w	:= pls_obter_se_valor_calc_origem(nr_seq_conta_p, ie_origem_valor_w , vl_minimo_w);

							if ( ie_valor_minimo_w = 'N') then
								ds_motivo_saida_regra_w	:= 'Valor mínimo calculado';
								goto final;
							end if;
						end if;

						-- jjung - Verificação para campo de vl mínimo apresentado
						if (coalesce(vl_minimo_apresentado_w,0) > 0) then
							ie_valor_minimo_w := pls_obter_se_valor_apres_orig(nr_seq_conta_p, ie_origem_valor_w,vl_minimo_apresentado_w);

							if (coalesce(ie_valor_minimo_w, 'N') = 'N') then
								ds_motivo_saida_regra_w	:= 'Valor mínimo apresentado';
								goto final;
							end if;
						end if;

						/*Se for uma regra de congenere*/

						if (coalesce(nr_seq_congener_sup_w,0) > 0) then
							if (coalesce(ie_exceto_coop_sup_w,'N') = 'S') then
								/*Se o check box Exceto ESTIVER SELECIONADO e FOR a operadora superior da operadora do protocolo na regra não é gerado ocorrência*/

								if (coalesce(nr_seq_congener_sup_w,0) = coalesce(nr_seq_congenere_sup_w,0)) or (coalesce(nr_seq_congenere_sup_w,0) = 0)then
									ds_motivo_saida_regra_w	 := 'Congênere superior';
									goto final;
								end if;
							else
								/*Se o check box Exceto NÂO ESTIVER SELECIONADO e NÂO FOR a operadora superior da operadora do protocolo na regra não é gerado ocorrência*/

								if (coalesce(nr_seq_congener_sup_w,0) <> coalesce(nr_seq_congenere_sup_w,0)) then
									ds_motivo_saida_regra_w	:= 'Congênere superior';
									goto final;
								end if;
							end if;
						end if;

						/*Se for regra de concorrente*/

						if (coalesce(nr_seq_regra_concorrente_w,0) > 0) then
							if (ie_tipo_item_w in (3,8)) then
								ie_gerar_oc_concorrente_w := pls_gerar_oc_concorrente(nr_seq_regra_concorrente_w, coalesce(cd_procedimento_p,cd_procedimento_w), coalesce(ie_origem_proced_p,ie_origem_proced_w), coalesce(dt_procedimento_p,dt_procedimento_w), nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p, ie_gerar_oc_concorrente_w);

								if (coalesce(ie_gerar_oc_concorrente_w,'N') = 'N') then
									ds_motivo_saida_regra_w	 := 'Concorrente';
									goto final;
								end if;
							else
								/*Os 383127 - Diego - 29/11/2011 - Concorrente serve somente para procedimentos e conta*/

								ds_motivo_saida_regra_w	:= 'Concorrente - conta';
								goto final;
							end if;
						end if;

						/* Se for regra com hora e final informados */

						if (hr_inicial_w IS NOT NULL AND hr_inicial_w::text <> '') and (hr_final_w IS NOT NULL AND hr_final_w::text <> '') and (ie_tipo_item_w = 3) then
							ie_hora_periodo_w := obter_se_datas_entre_periodo(	to_date(to_char(hr_inicial_w,'hh24:mi:ss'),'hh24:mi:ss'),
																				to_date(to_char(hr_final_w,'hh24:mi:ss'),'hh24:mi:ss'),
																				to_date(to_char(dt_inicio_proc_w,'hh24:mi:ss'),'hh24:mi:ss'),
																				to_date(to_char(dt_fim_proc_w,'hh24:mi:ss'),'hh24:mi:ss'));

							if (ie_hora_periodo_w = 'N') then
								ds_motivo_saida_regra_w		:= 'Hora inicial e final';
								goto final;
							end if;
						end if;
						/*Médico executor da conta inativo*/

						if (coalesce(ie_med_exec_inativo_w,'N') = 'S')	and (coalesce(qt_participante_w,0) = 0)	then
							begin
							select	ie_situacao
							into STRICT	ie_situacao_med_w
							from	medico
							where	cd_pessoa_fisica = cd_medico_executor_w;
							exception
							when others then
								ie_situacao_med_w := 'A';
							end;

							/*Se estiver ativo a regra não é válida*/

							if (ie_situacao_med_w = 'A') then
								ds_motivo_saida_regra_w	:= 'Médico Ativo';
								goto final;
							end if;
						end if;

						/*Grau de participação da conta*/

						if (coalesce(nr_seq_grau_partic_w,0) <> 0)	then
							if (coalesce(qt_participante_w,0) = 0)	then
								if (nr_seq_grau_partic_w <> nr_seq_grau_partic_ww ) or (coalesce(nr_seq_grau_partic_ww,0) =0) then
									ds_motivo_saida_regra_w	:= 'Grau de participação da conta';
									goto final; --nao gera ocorrencia
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Grau de participação da conta - participantes';
								goto final;
							end if;
						end if;

						if (coalesce(ie_item_dentro_periodo_int_w, 'N') = 'S')  then
							if (ie_tipo_item_w in ('3','8')) then
								SELECT * FROM pls_item_dentro_internacao(nr_seq_conta_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nm_usuario_p, ie_dentro_periodo_int_w, ds_observacao_dento_int_w) INTO STRICT ie_dentro_periodo_int_w, ds_observacao_dento_int_w;

								if (ie_dentro_periodo_int_w = 'N') then
									ds_motivo_saida_regra_w	 := 'Período internação';
									goto final;
								end if;

								ds_observacao_w := substr(ds_observacao_w||ds_observacao_dento_int_w||chr(13)||chr(10),1,4000);
							else
								ds_motivo_saida_regra_w	:= 'Período internação - material';
								goto final;
							end if;
						end if;

						/*Se for regra de procedimentos autorizados e não utilizados*/

						if (coalesce(ie_aut_nao_utilizado_w,'N') = 'S') then
							/*Só válido para contas médicas*/

							if (ie_tipo_item_w = 8) then
								ds_retorno_iten_aut_dig_w := pls_obter_se_itens_aut_dig(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p);

								if (coalesce(ds_retorno_iten_aut_dig_w,'X') = 'X') then
									ds_motivo_saida_regra_w	:= 'Autorizado e não utilizado';
									goto final;
								end if;

								ds_observacao_w := substr(ds_observacao_w||ds_retorno_iten_aut_dig_w||chr(13)||chr(10) ,1,4000);
							else
								/*Se for uma regra de item ñ utilizado e for diferente de conta a regra ñ é válida*/

								ds_motivo_saida_regra_w	 := 'Autorizado e não utilizado - proc/mat';
								goto final;
							end if;
						end if;

						if (coalesce(nr_seq_regra_partic_w,0) > 0) then
							if (ie_tipo_item_w = 3) then
								select 	count(1)
								into STRICT  	qt_participantes_w
								from 	pls_proc_participante
								where	nr_seq_conta_proc 	=  nr_seq_conta_proc_w
								and	coalesce(ie_status,'X')	<> 'C';

								/*Deve haver mais de uma participante de um precedimento para a regra ser aplicavel*/

								if (qt_participantes_w = 0) then
									select 	count(1)
									into STRICT  	qt_participantes_w
									from 	pls_conta_proc	a
									where	a.nr_sequencia 	= nr_seq_conta_proc_w
									and	exists ( SELECT	1
											  from	pls_conta_proc b
											  where	a.nr_seq_agrup_analise = b.nr_seq_agrup_analise
											  and	b.nr_sequencia <> a.nr_sequencia);
								end if;

								if (qt_participantes_w > 0) then
									ie_gerar_oc_partic_w := pls_obter_se_regra_particip(nr_seq_conta_proc_w, nr_seq_regra_partic_w, nm_usuario_p, ie_gerar_oc_partic_w, nr_seq_ocorrencia_w);

									if (ie_gerar_oc_partic_w = 'N') then
										ds_motivo_saida_regra_w	:= 'Participantes';
										goto final;
									end if;

									select 	count(1)
									into STRICT  	qt_participantes_w
									from 	pls_proc_participante
									where	nr_seq_conta_proc 	=  nr_seq_conta_proc_w
									and	coalesce(ie_status,'X')	<> 'C';

									if (qt_participantes_w = 0) then
										ie_gerar_oc_partic_ww := ie_gerar_oc_partic_ww;
									else
										ie_gerar_oc_partic_ww := 'S';
									end if;
								else
									ds_motivo_saida_regra_w	 := 'Participantes - sem participantes';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	 := 'Participantes - sem participantes';
								goto final;
							end if;
						end if;

						/*Consistência do tipo de saida internação*/

						if (coalesce(nr_seq_saida_int_w,0) <> 0) then
							/*select	max(nr_seq_saida_int)
							into	nr_seq_saida_int_conta_w
							from	pls_conta
							where	nr_sequencia = nr_seq_conta_p;	*/
							if (coalesce(nr_seq_saida_int_w,0) <> coalesce(nr_seq_saida_int_conta_w,0)) then
								ds_motivo_saida_regra_w	 := 'Saída internação';
								goto final;
							end if;
						end if;

						 /*Consisitr se coparticipação zerada*/

						if (coalesce(ie_coparticipacao_zerada_w,'N') = 'S') then
							ie_coparticipacao_w	:= pls_consistir_copartic_zerada(nr_seq_conta_proc_w,nr_seq_conta_mat_w,nm_usuario_p);

							if (ie_coparticipacao_w = 'N')       then
								ds_motivo_saida_regra_w	:= 'Coparticipação zerada';
								goto final;
							end if;
						end if;

						if (coalesce(ie_nascido_vivo_w,'N') = 'S') then
							if (ie_tipo_item_w = 8) and (ie_tipo_guia_p = '5') then
								qt_total_vivos_w := coalesce(qt_nasc_vivos_prematuros_w,0) + coalesce(qt_nasc_vivos_w,0) +
													coalesce(qt_obito_precoce_w,0) + coalesce(qt_obito_tardio_w,0);

								select	count(1)
								into STRICT	qt_reg_w
								from	pls_diagnostico_nasc_vivo
								where	nr_seq_conta = nr_seq_conta_p;

								if (qt_reg_w = coalesce(qt_total_vivos_w,0)) then
									ds_motivo_saida_regra_w	 := 'Nascidos vivos';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Nascidos vivos - não conta';
								goto final;
							end if;
						end if;

						if (coalesce(ie_internacao_obstetrica_w,'N') = 'S') then
							if (ie_obstetrico_informado_w = 'S') then
								ds_motivo_saida_regra_w	 := 'Internação obstétrica';
								goto final;
							end if;
						end if;

						/*Consiste se o beneficiario da autorizacao é igual ao da conta - askono  OS 336220 29/07/11 */

						if (ie_tipo_item_w = 8) and (coalesce(ie_benef_autorizacao_w,'N') = 'S') then
							ie_segurado_igual_w	:= 'S';

							if (ie_tipo_guia_p = '3')  then /*guia consulta*/
								if (ie_guia_existe_w = 'S') and (cd_guia_w IS NOT NULL AND cd_guia_w::text <> '') then
									select	coalesce(max('S'),'N')
									into STRICT	ie_segurado_igual_w
									from   	pls_guia_plano
									where  	cd_guia  	  = cd_guia_w
									and	nr_seq_segurado   = nr_seq_segurado_p;
								end if;
							elsif (cd_guia_referencia_w IS NOT NULL AND cd_guia_referencia_w::text <> '') and (ie_guia_existe_w = 'S') then
								select	coalesce(max('S'),'N')
								into STRICT	ie_segurado_igual_w
								from   	pls_guia_plano
								where  	cd_guia  	  = cd_guia_referencia_w
								and	nr_seq_segurado   = nr_seq_segurado_p;
							end if;

							if (ie_segurado_igual_w = 'S' ) then
								ds_motivo_saida_regra_w	 := 'Benficiário autorização/beneficiário conta';
								goto final;
							end if;
						end if;

						/*Obter se o beneficiario devolveu a carteirinha */

						if (coalesce(ie_devolucao_carteira_w,'N') <> 'N') then
							ie_devolucao_cart_benf_w := pls_obter_devolucao_carteira(nr_seq_conta_p,nr_seq_segurado_p, dt_referencia_w);

							if (coalesce(ie_devolucao_carteira_w,'N') <> ie_devolucao_cart_benf_w) then
								ds_motivo_saida_regra_w	:= 'Devolução carteira';
								goto final;
							end if;
						end if;

						/*Obter se a carteirinha do beneficiário tem a carteirinhavencida */

						if (coalesce(ie_validade_carteira_w,'N') <> 'N') then
							ie_carteira_vencida_w	:= pls_obter_se_carteira_vencida(nr_seq_conta_p, nr_seq_segurado_p, dt_referencia_w);

							if (coalesce(ie_validade_carteira_w,'N') <> ie_carteira_vencida_w) then
								ds_motivo_saida_regra_w	 := 'Validade carteira';
								goto final;
							end if;
						end if;
						/*Verificar se existe o mesmo participante em grau de participação diferente no procedimento*/

						if (coalesce(ie_partic_diferente_w,'N') = 'S') then
							if (coalesce(nr_seq_conta_proc_w,0) > 0)	then
								if (pls_obter_medico_partic_dif_oc(	nr_seq_conta_proc_w,
														cd_medico_executor_w,
														/* OS 695710 jjkruk, alterado para nr_seq_grau_partic_ww antes passava nr_seq_grau_partic_w e nao gerava ocorencia */

														nr_seq_grau_partic_ww,
														cd_estabelecimento_p,
														nm_usuario_p) = 'N') then
									ds_motivo_saida_regra_w	:= 'Grau de participação não é duplicado';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Consistir grau partic sem proc';
								goto final;
							end if;
						end if;
						/*Verificar se existe procedimentos simulteneo */

						if (coalesce(nr_seq_simultaneo_w,0) > 0) then
							ie_simultaneo_w := pls_verificar_ocorrencia_simul(	nr_seq_simultaneo_w, nr_seq_conta_p, null, coalesce(cd_procedimento_p,cd_procedimento_w), coalesce(ie_origem_proced_p,ie_origem_proced_w), nr_seq_material_w, ie_tipo_item_w, ie_simultaneo_w, cd_estabelecimento_p, nm_usuario_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w);

							if (ie_simultaneo_w = 'N') then
								ds_motivo_saida_regra_w	 := 'Simultâneo';
								goto final;
							end if;
						end if;

						/* Verificar se a regra por quantidade liberada */

						/*OS - 369408 - Robson da Silva, só verificar se tiver informação da data do procedimento, e hora inicial.*/

						if (coalesce(qt_liberada_w,0) > 0) then
							if (ie_tipo_item_w in (3,4)) then
								if (ie_tipo_qtde_w	= 'G') 		and
									((coalesce(dt_inicio_proc_w::text, '') = '')	or (coalesce(dt_procedimento_w::text, '') = ''))	and (ie_tipo_item_w	= 3)		then
									ds_motivo_saida_regra_w	:= 'Quantidade liberada - proc';
									goto final;
								elsif (ie_tipo_qtde_w	= 'G') 		and (coalesce(dt_material_w::text, '') = '')		and (ie_tipo_item_w	= 4)		then
									ds_motivo_saida_regra_w	:= 'Quantidade liberada - mat';
									goto final;
								else
									ds_qtde_liberacao_w	:= pls_obter_se_qtd_oc_conta(	nr_seq_item_w, ie_tipo_item_w, qt_liberada_w,
																ie_tipo_qtde_w, qt_tipo_quantidade_w, ie_tipo_pessoa_qtde_w, ie_regra_qtde_w,
																ie_somar_estrutura_w, nr_seq_estrutura_w, nr_seq_ocorrencia_w,
																ie_qt_lib_posterior_w, cd_estabelecimento_p, nm_usuario_p);

									if (coalesce(ds_qtde_liberacao_w,'X') = 'X') then
										ds_motivo_saida_regra_w	:= 'Quantidade liberada - tipo';
										goto final;
									else
										ds_observacao_w := substr( 'Itens utilizados na consistência por quant.:'||chr(13)||chr(10)||ds_qtde_liberacao_w||chr(13)||chr(10)||ds_observacao_w, 1, 4000 );
									end if;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Quantidade liberada - conta';
								goto final;
							end if;
						end if;

						if (ie_auditoria_w = 'S') then
							ie_ocorrencia_w := 'S';
						end if;

						----------------------------------------------------------------/*Consistencia dos atributos da conta - ASKONO - OS372874*/------------------------------------------------------------------------------------------------
						if (coalesce(nr_seq_regra_atrib_w,0) > 0) /*and (ie_tipo_item_w = 8) */
then
							--Precisa encaixar em pelo menos uma regra da conta para realizar a chamada.
							ie_gerado_ocorrencia_w := pls_gerar_oc_conta_atrib(	nr_seq_conta_p, nr_seq_ocorrencia_w, ie_reconsistencia_p, cd_estabelecimento_p, nm_usuario_p, ie_gerado_ocorrencia_w, nr_seq_regra_atrib_w	);

							if (ie_gerado_ocorrencia_w	= 'N') then
								ds_motivo_saida_regra_w	:= 'Atributos conta';
								goto final;
							end if;
						end if;


						------------------------------------------------------------------------------------/* REGRAS QUE IDENTIFICAM PARTICIPANTES */---------------------------------------------------------------------------
						/*Se a regra é para a consistência de executante*/

						if (coalesce(cd_medico_executor_regra_w, 0) 	> 0) 	or (coalesce(cd_prestador_regra_w,0)		> 0)	or (coalesce(nr_seq_grau_partic_w,0)		> 0) 	or (coalesce(nr_seq_conselho_w,0)		> 0) 	or (coalesce(nr_seq_proc_espec_w,0)		> 0) 	or (coalesce(nr_seq_conta_proc_partic_w,0)	> 0) 	or (coalesce(cd_espec_medica_exec_w,0)		> 0) 	or (coalesce(ie_prestador_inativo_w,'N')	= 'S')  or (coalesce(ie_tipo_pessoa_prestador_w,'A')	<> 'A') or (coalesce(ie_medico_cooperado_regra_w,'N')  	<>'A') 	or (coalesce(ie_partic_diferente_w,'N') 	= 'S') 	or (coalesce(ie_exige_medico_w,'N')	        = 'S')	or (coalesce(ie_med_exec_inativo_w,'N') 	= 'S') 	or (coalesce(ie_consiste_exec_coop_w,'N') 	= 'S')  or (coalesce(vl_max_item_w,0)			> 0)	or (coalesce(vl_minimo_item_w,0)		> 0)	then
							ie_gerar_exec_w 	:= null;

							if (nr_seq_conta_proc_w	> 0)	and (qt_participante_w > 0)		then

								SELECT * FROM pls_consistir_oco_partic(	ie_medico_cooperado_regra_w, cd_medico_executor_regra_w, nr_seq_grau_partic_w, nr_seq_conselho_w, nr_seq_proc_espec_w, nr_seq_conta_proc_partic_w, ie_consiste_exec_coop_w, ie_partic_diferente_w, ie_med_exec_inativo_w, nr_seq_ocorrencia_w, nr_seq_conta_p, nr_seq_conta_proc_w, dt_referencia_w, ie_tipo_item_w, cd_espec_medica_exec_w, ie_gerar_exec_w, cd_estabelecimento_p, vl_max_item_w, vl_minimo_item_w, nm_usuario_p, ie_complemento_conta_w, ie_exige_medico_w, ie_tipo_pessoa_prestador_w, ie_prestador_inativo_w, ie_tipo_prestador_w, cd_prestador_regra_w, ie_goto_w) INTO STRICT ie_gerar_exec_w, ie_goto_w;
							end if;

							if (ie_gerar_exec_w 	= 'P') then
								ie_gerar_oc_partic_ww 	:= 'S';
							elsif (ie_gerar_exec_w 	= 'N')	and (coalesce(ie_goto_w,'S')	= 'S')then
								ds_motivo_saida_regra_w	:= 'Regra participantes';
								goto final;
							end if;
						end if;
						/*Se for regra de prestador inativo*/

						/*Regra de prestador inativar, favor se for alterar conversar com DEMITRIUS ou PAULO ROSA */

						if (coalesce(ie_prestador_inativo_w,'N') = 'S') and
							((coalesce(qt_participante_w,0) = 0) 	or (coalesce(ie_tipo_prestador_w,'N') <> 'E'))then

							if (coalesce(ie_gerar_exec_w ,'I') = 'I')	then
								if (coalesce(nr_seq_prestador_w,0) > 0) then
									select	coalesce(max('S'),'N')
									into STRICT	ie_situacao_prest_w
									from	pls_prestador
									where	nr_sequencia	= nr_seq_prestador_w
									and	ie_situacao 	= 'A'
									and	coalesce(dt_referencia_w,dt_atendimento_referencia_w) >= dt_cadastro
									and	coalesce(dt_referencia_w,dt_atendimento_referencia_w) < coalesce(dt_exclusao, coalesce(dt_referencia_w+1,dt_atendimento_referencia_w+1));

									if (ie_situacao_prest_w = 'S') then
										ds_motivo_saida_regra_w	:= 'Situação prestador';
										goto final;
									end if;
								else
									ds_motivo_saida_regra_w	:= 'Situação prestador - Sem prestador';
									goto final; -- Diego OS 315636 - Caso não haja um prestador informado (Como pode haver em intercambios) o sistema não considera a regra como válida.
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Prestador inativo - Verificou participante';
								goto final;
							end if;
						end if;
						/*Se o médico executor não foi consistido no cadastro do prestador*/

								/*Se o médico executor não foi consistido no cadastro do prestador*/

						if (coalesce(ie_consiste_exec_coop_w,'N') = 'S') and (coalesce(ie_gerar_exec_w,'I') = 'I')	then
							/*Alterado para utilizar a mesma consistência do participante OS 549839*/

							ie_prest_medico_w	:= pls_obter_se_medico_prest(nr_seq_conta_p, null, coalesce(dt_referencia_w,clock_timestamp()));

							if (coalesce(ie_prest_medico_w,'N') = 'S') then
								ds_motivo_saida_regra_w	:= 'Profissional vinculado ao prestador executor da conta';
								goto final;
							end if;
						end if;

						/*Se existe consistência de solicitante a ser realizada*/

						if (coalesce(ie_medico_cooperado_solic_w,'A') <> 'A') or (coalesce(cd_medico_executor_solic_w,0) > 0) or (coalesce(nr_seq_conselho_solic_w,0) > 0) or (coalesce(cd_espec_medica_solic_w,0)	> 0) or (coalesce(nr_seq_proc_espec_solic_w,0) > 0) then
							if (coalesce(cd_medico_solicitante_w,0) > 0) then
								ie_gerar_solic_w := pls_consistir_oco_med_solic(	ie_medico_cooperado_solic_w, cd_medico_executor_solic_w, nr_seq_conselho_solic_w, nr_seq_proc_espec_solic_w, nr_seq_ocorrencia_w, cd_medico_solicitante_w, dt_referencia_w, nr_seq_conta_p, nr_seq_conta_proc_w, ie_tipo_item_w, cd_espec_medica_solic_w, ie_gerar_solic_w, cd_estabelecimento_p, nm_usuario_p);

								if (ie_gerar_solic_w = 'N') then
									ds_motivo_saida_regra_w	:= 'Regra médico solic';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Regra médico solic - sem médico solic';
								goto final;
							end if;
						end if;

						/*--------------------------------------------------------NOVOS CAMPOS --------------------------------------------------------*/

						/*Grupos de material*/

						if (coalesce(nr_seq_grupo_material_w,0) > 0) and (coalesce(nr_seq_material_w,0) > 0) then
							ie_grupo_material_w	:= pls_se_grupo_preco_material(nr_seq_grupo_material_w, nr_seq_material_w);

							if (ie_grupo_material_w = 'N') then
								ds_motivo_saida_regra_w	 := 'Grupo material';
								goto final;
							end if;
						end if;

						/*Duplicidade*/

						if (coalesce(nr_seq_regra_duplic_w ,0) > 0) then
						--if	(nr_seq_regra_w = 1139) and(nm_usuario_p = 'askono') then
						--	pls_inserir_log_kono('entrou na regra de ocorrencia!');
						--end if;
							/*
							pls_obter_se_regra_dup(	nr_seq_regra_w,  nm_usuario_p,  nr_seq_conta_p,
										nr_seq_conta_proc_p, null, nr_seq_regra_duplic_w,
										nr_seq_estrutura_w,cd_procedimento_w,ie_origem_proced_w,
										ds_w, nr_seq_conta_duplic_w, nr_seq_proc_partic_w,
										ie_duplicidade_w);
							*/
							SELECT * FROM pls_tratar_regra_duplicidade(	nr_seq_regra_w, nm_usuario_p, nr_seq_conta_p, nr_seq_conta_proc_w, null, nr_seq_regra_duplic_w, nr_seq_estrutura_w, cd_procedimento_regra_w, ie_origem_proced_regra_w, ds_w, nr_seq_conta_duplic_w, nr_seq_proc_partic_w, ie_duplicidade_w, cd_area_procedimento_regra_w, cd_especialidade_regra_w, cd_grupo_proc_regra_w, null) INTO STRICT ds_w, nr_seq_conta_duplic_w, nr_seq_proc_partic_w, ie_duplicidade_w;

							if (ie_duplicidade_w = 'N') then
								ds_motivo_saida_regra_w	:= 'Regra duplicidade';
								goto final;
							end if;

							if (ie_duplicidade_w = 'S') and (ds_w IS NOT NULL AND ds_w::text <> '') then
								ds_observacao_w	:= substr( ds_observacao_w || chr(13) || chr(10) || 'Contas em duplicidade: ' || chr(13) || chr(10) || ds_w,1,4000);
							end if;

						end if;

						/*Diego OS 477435 - Tratamento havia sido sobrescrito.*/

						if	((coalesce(vl_max_item_w,-999) <> -999) or (coalesce(vl_minimo_item_w,-999) <> -999))and (ie_gerar_oc_partic_ww = 'N') and (coalesce(ie_tipo_consistencia_valor_w,'A') in ('A','I')) then
							if (ie_tipo_item_w = 3) or (ie_tipo_item_w = 4) then
								/*valor máximo , valor mínimo e tipo de valor*/

								if (coalesce(ie_consistencia_valor_w,'X')= 'C') then
									if (vl_calculado_w IS NOT NULL AND vl_calculado_w::text <> '') then
										if (not(vl_calculado_w >= coalesce(vl_max_item_w,vl_calculado_w + 1))) and (vl_max_item_w IS NOT NULL AND vl_max_item_w::text <> '')then
											ds_motivo_saida_regra_w	:= 'Valor calculado maior';
											goto final;
										end if;

										if (not(vl_calculado_w <= coalesce(vl_minimo_item_w,vl_calculado_w + 1))) and (vl_minimo_item_w IS NOT NULL AND vl_minimo_item_w::text <> '') then
											ds_motivo_saida_regra_w	 := 'Valor calculado menor';
											goto final;
										end if;
									else
										ds_motivo_saida_regra_w	:= 'Valor calculado nulo';
										goto final;
									end if;
								elsif (coalesce(ie_consistencia_valor_w,'X')= 'A') then
									if (vl_apresentado_w IS NOT NULL AND vl_apresentado_w::text <> '')	then
										if (not(vl_apresentado_w >= coalesce(vl_max_item_w,vl_apresentado_w + 1))) and (vl_max_item_w IS NOT NULL AND vl_max_item_w::text <> '') then
											ds_motivo_saida_regra_w	 := 'Valor apresentado maior';
											goto final;
										end if;

										if (not(vl_apresentado_w <= coalesce(vl_minimo_item_w,vl_apresentado_w + 1))) and (vl_minimo_item_w IS NOT NULL AND vl_minimo_item_w::text <> '') then
											ds_motivo_saida_regra_w	:= 'Valor apresentado menor';
												goto final;
										end if;
									else
										ds_motivo_saida_regra_w	:= 'Valor apresentado nulo';
										goto final;
									end if;
								end if;
							else
								/*No caso de ser a consistência de contas esta regra não é válida*/

								ds_motivo_saida_regra_w	:= 'Regra de valor - conta';
								goto final;
							end if;
						end if;

						/*Consistência da quantidade dos itens*/

						if	((coalesce(qt_minimo_item_w,0) > 0) or (coalesce(qt_maximo_item_w,0) > 0)) then

							if (ie_tipo_item_w = 3) or (ie_tipo_item_w = 4) then
								if (ie_tipo_item_w = 3) then
									if	((coalesce(qt_item_w,0) > coalesce(qt_minimo_item_w, coalesce(qt_item_w,0))) or (coalesce(qt_item_w,0) < coalesce(qt_maximo_item_w, coalesce(qt_item_w,0)))) then
										ds_motivo_saida_regra_w	:= 'Qt.max procedimento';
										goto final;
									end if;
								elsif (ie_tipo_item_w = 4) then
									if	((coalesce(qt_item_w,0) > coalesce(qt_minimo_item_w, coalesce(qt_item_w,0))) or (coalesce(qt_item_w,0) < coalesce(qt_maximo_item_w, coalesce(qt_item_w,0)))) then
										ds_motivo_saida_regra_w	:= 'Qt.Max material';
										goto final;
									end if;
								end if;
							else
								/*No caso de ser a consistência de contas esta regra não é válida*/

								ds_motivo_saida_regra_w	:= 'Regra de valor - conta';
								goto final;
							end if;

						end if;


						if (ie_tipo_desp_proc_w IS NOT NULL AND ie_tipo_desp_proc_w::text <> '') then
							if (ie_tipo_despesa_ww <> coalesce(ie_tipo_desp_proc_w,ie_tipo_despesa_ww) and ie_tipo_item_w = 3) or (ie_tipo_item_w <> 3)	then
								ds_motivo_saida_regra_w	:= 'Tipo despesa procedimento';
								goto final;
							end if;
						end if;

						if (ie_tipo_despesa_mat_w IS NOT NULL AND ie_tipo_despesa_mat_w::text <> '') then
							if (ie_tipo_despesa_ww <> coalesce(ie_tipo_despesa_mat_w, ie_tipo_despesa_ww) and ie_tipo_item_w = 4)or (ie_tipo_item_w <> 4) then
								ds_motivo_saida_regra_w	:= 'Tipo despesa material';

								goto final;
							end if;
						end if;

						/*Consistir  se Hora  Fim do procedimento  está informado*/

						if (coalesce(ie_exige_hora_final_w,'N') = 'S') and (ie_tipo_item_w = 3) then
							if (dt_fim_proc_w IS NOT NULL AND dt_fim_proc_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Exige hora final - proc';
								goto final;
							end if;
						end if;

						/*Exige hora inicial do procedimento*/

						if (coalesce(ie_exige_hora_item_w,'N') = 'S') and (ie_tipo_item_w = 3) then
							if (dt_inicio_proc_w IS NOT NULL AND dt_inicio_proc_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Exige hora inicial - proc';
								goto final;
							end if;
						end if;

								/*Consistir  se Hora  Fim do material está informado*/

						if ( coalesce(ie_exige_hora_final_w,'N') = 'S') and (ie_tipo_item_w = 4) then
							if (dt_fim_mat_w IS NOT NULL AND dt_fim_mat_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Exige hora final - mat';
								goto final;
							end if;
						end if;

						/*Exige hora inicial do material*/

						if ( coalesce(ie_exige_hora_item_w,'N') = 'S') and (ie_tipo_item_w = 4) then
							if (dt_inicio_mat_w IS NOT NULL AND dt_inicio_mat_w::text <> '') then
								ds_motivo_saida_regra_w	:= 'Exige hora inicial - mat';
								goto final;
							end if;
						end if;

						/*Consiste taxa de intercambio*/

						if (coalesce(ie_taxa_intercambio_w,'N')	= 'S') and (ie_tipo_conta_w = 'I') then
							if (coalesce(tx_intercambio_w,0) = coalesce(tx_intercambio_imp_w,0) ) then
								ds_motivo_saida_regra_w	:= 'Taxa intercâmbio';
								goto final;
							end if;
						/* Francisco - 30/08/2013 - OS 627834 - Tratar por valor ao invés de percentual */

						elsif (coalesce(ie_taxa_intercambio_w,'N')	= 'V') and (ie_tipo_conta_w = 'I') then
							if (coalesce(vl_taxa_intercambio_w,0) >= coalesce(vl_taxa_intercambio_imp_w,0)) or
								/* Se não tem valor calculado, também não deve gerar */

								((nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') and
								coalesce(vl_procedimento_w,0) = 0 and coalesce(vl_taxa_intercambio_w,0) = 0) or ((nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '')
								and coalesce(vl_item_w,0) = 0 and coalesce(vl_taxa_intercambio_w,0) = 0) then
								ds_motivo_saida_regra_w	:= 'Taxa intercâmbio';
								goto final;
							end if;
						end if;

						/*Quantidade do item fracionada*/

						if (coalesce(ie_qtd_item_fracionada_w,'N') <> 'N')	then
							ie_fracionado_w	:= 'N';

							if (coalesce(qt_procedimento_w,0) > 0 ) then
								if 	((qt_procedimento_w mod 1) > 0 ) then
									ie_fracionado_w := 'S';
								end if;
							elsif (coalesce(qt_material_w,0) > 0 ) then
								if	((qt_material_w mod 1) > 0) then
									ie_fracionado_w := 'S';
								end if;
							end if;

							if (coalesce(ie_fracionado_w,'N') = 'N')	then
								ds_motivo_saida_regra_w	:= 'Quantidade fracionada';
								goto final;
							end if;
						end if;

						/*Consiste se existe evento de pagamento  - askono OS */

						if (coalesce(ie_sem_evento_w,'N') = 'S') then
							if ( coalesce(nr_seq_evento_w,0) > 0) then
								ds_motivo_saida_regra_w	:= 'Sem evento pagamento';
								goto final;
							end if;
						end if;

						/*Regra valor custo operacional*/

						if (coalesce(ie_regra_valor_co_w,'N') = 'S') then
							if (coalesce(ie_co_preco_operadora_w,'N') <> 'N') then
								ds_motivo_saida_regra_w	:= 'Valor CO operadora';
								goto final;
							end if;
						end if;

						/*Regra para coparticipacao*/

						if	not	((ie_calculo_coparticipacao_w	= 'O' and ((coalesce(ie_regra_valor_copartic_w,'N') = 'N')
							or (coalesce(ie_regra_valor_copartic_w,'N') = 'S' and coalesce(ie_coparticipacao_ww,'N') = 'N')))
							or (ie_calculo_coparticipacao_w <> 'O')) then
							ds_motivo_saida_regra_w	:= 'Regra coparticipação';
							goto final;
						end if;

						/*material autorizado*/

						-- jjung - Alterado para que seja verificado apenas se o campo estiver marcado e separado para fazer uma comparação por vez.
						if (ie_mat_autorizacao_esp_w = 'S') then

							if (ie_autorizacao_especial_w = 'S') then
								-- jjung - Só realizar a contagem de autorização especial se o material tiver a restrição e a regra exigir a restrição e autorização.
								-- Tanto pela guia.
								select	count(1)
								into STRICT	qt_solic_lib_mat_med_w
								from	pls_solic_lib_mat_med
								where	nr_seq_segurado = nr_seq_segurado_p
								and	nr_seq_material = nr_seq_material_p
								and	nr_seq_guia	= nr_seq_guia_conta_w
								and	ie_status 	= 3;

								-- Se tiver já aborta.
								if (qt_solic_lib_mat_med_w > 0) then

									ds_motivo_saida_regra_w	:= 'Material especial tem autorização liberada.';
									goto final;

								-- Se não tiver verifica pela guia de referência.
								elsif (nr_seq_guia_referencia_w IS NOT NULL AND nr_seq_guia_referencia_w::text <> '') then

									select	count(1)
									into STRICT	qt_solic_lib_mat_med_w
									from	pls_solic_lib_mat_med
									where	nr_seq_segurado = nr_seq_segurado_p
									and	nr_seq_material = nr_seq_material_p
									and	nr_seq_guia	= nr_seq_guia_referencia_w
									and	ie_status 	= 3;

									-- se tiver não gera a ocorrencia
									if (qt_solic_lib_mat_med_w > 0) then

										ds_motivo_saida_regra_w	:= 'Material especial tem autorização liberada.';
										goto final;
									end if;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Material não necessita autorização especial';
								goto final;
							end if;
						end if;

						/*Autorizado mas não utilizado*/

						if (coalesce(ie_nao_utilizado_w,'N') = 'S') then
							/* Verifica se o item esta autorizado. Se não estiver, nem consiste a ocorrência. */

							if (coalesce(ie_exige_autorizacao_w,'N') != 'S')  then
								ie_autorizado_w := 'S';
							end if;

							if (ie_autorizado_w = 'S') then
								if (ie_tipo_item_w = 3)	then
									if (qt_item_solic_w >= qt_item_autorizado_w) or (coalesce(ie_exige_autorizacao_w,'N') = 'N') then
										ds_motivo_saida_regra_w	:= 'Quantidade autorizada - proc';
										goto final;
									end if;
									ds_observacao_w := 	ds_observacao_w || ' A quantidade de itens autorizados é maior que a quantidade realizada.'||chr(13)||chr(10)||
												chr(9)||'Qtd. autorizada: '||to_char(qt_item_autorizado_w)||' Qtd. realizada: '||to_char(qt_item_solic_w)||chr(13)||chr(10);
								elsif (ie_tipo_item_w = 4)	then
									if (coalesce(qt_item_conta_w,0) >= coalesce(qt_item_aut_mat_w,0)) or (coalesce(ie_exige_autorizacao_w,'N') = 'N') then
										ds_motivo_saida_regra_w	 := 'Quantidade autorizada - mat';
										goto final;
									end if;
									ds_observacao_w := 	ds_observacao_w || ' A quantidade de itens autorizados é maior que a quantidade realizada.'||chr(13)||chr(10)||
												chr(9)||'Qtd. autorizada: '||to_char(qt_item_aut_mat_w)||' Qtd. realizada: '||to_char(coalesce(qt_item_conta_w,0))||chr(13)||chr(10);
								else
									ds_motivo_saida_regra_w	:= 'Quantidade autorizada - conta';
									goto final;
								end if;
							else
								ds_motivo_saida_regra_w	:= 'Quantidade - não utilizado';
								goto final;
							end if;
						end if;

						if (coalesce(ie_pacote_honorario_w,'N') = 'S')  then
							if (ie_tipo_despesa_ww <> 4) or (coalesce(ie_gerar_oc_pacote_w,'N') = 'N') then
								ds_motivo_saida_regra_w	:= 'Pacote honorário';
								goto final;
							end if;
						end if;

						/*Consiste quantidade*/

						if (coalesce(ie_consiste_qtd_ww,'N')= 'S')  and (ie_consiste_qtd_ww = ie_consiste_qtd_w) then
							ds_motivo_saida_regra_w	:= 'Consiste quantidade';
							goto final;
						end if;

						/*Consiste idade*/

						if (coalesce(ie_consiste_idade_ww,'N') = 'S') and (ie_consiste_idade_ww = ie_consiste_idade_w) then
							ds_motivo_saida_regra_w	:= 'Consiste idade';
							goto final;
						end if;

						/*consiste sexo*/

						if (coalesce(ie_consiste_sexo_ww,'N') = 'S')  and (ie_consiste_sexo_ww = ie_consiste_sexo_w) then
							ds_motivo_saida_regra_w	:= 'Consiste sexo';
							goto final;
						end if;

						/*Bloqueio de material*/

						if	not ((coalesce(ie_bloqueio_mat_w::text, '') = '') or (ie_bloqueio_mat_w in (	ie_bloqueia_custo_op_w,
															ie_bloqueia_pre_pag_w,
															ie_bloqueia_intercambio_w,
															ie_bloqueia_prod_nao_reg_w,
															ie_bloqueia_prod_reg_w ))) then
							ds_motivo_saida_regra_w	 := 'Bloqueio material';
							goto final;
						end if;

						/*Se for complemento deverá verificar somente o médico participante do procedimento*/

						if (coalesce(ie_complemento_conta_w,'N') = 'S')	and (ie_tipo_item_w = 3)	then
							/*ie_existe_medico_w := 0;
							begin
							select	distinct 'S'
							into	ie_existe_medico_w
							from	pls_proc_participante
							where	nr_seq_conta_proc	= nr_seq_conta_proc_w
							and	(nvl(cd_medico,0)) <> 0;
							exception
							when others then
								ie_existe_medico_w	:= 'N';
							end;*/
							if (coalesce(ie_exige_medico_w, 'N') = 'S') and (ie_exige_medico_w = ie_existe_medico_w) then
								ds_motivo_saida_regra_w	:= 'Exige médico';
								goto final;
							end if;
						/*Exige médico*/

						elsif (coalesce(ie_exige_medico_w, 'N') = 'S') and (ie_exige_medico_w = ie_existe_medico_w) then

							ds_motivo_saida_regra_w	:= 'Exige médico';
							goto final;
						end if;

						/*Exiger fornecedor*/

						if (coalesce(ie_exige_fornecedor_w, 'N') = 'S')	then
							if (coalesce(ie_fornecedor_w, 'N') = 'S') then
								ds_motivo_saida_regra_w	 := 'Exige fornecedor';
								goto final;
							end if;
						end if;

						/*Exige NF
						(N,S,M)(Não exige,Depende do cadastro,Exige NF)*/
						if (ie_exige_nf_w <> 'N') then
							if (coalesce(ie_tipo_item_w,0) = 4) then
								if (ie_exige_nf_w = 'S') then
									if (ie_nota_fiscal_w = 'S') then
										if (coalesce(nr_nota_fiscal_mat_w,0) <> 0) then
											ds_motivo_saida_regra_w	 := 'Nota fiscal material';
											goto final;
										end if;
									elsif (ie_nota_fiscal_w = 'N') then
										/*Visto com o Analista Paulo que caso o cadastro não exija NF o sistema não gera a ocorrência independente de ter a NF informada ou Não.*/

										ds_motivo_saida_regra_w	 := 'Nota fiscal material';
										goto final;
									end if;
								elsif (ie_exige_nf_w = 'M') then
									if (coalesce(nr_nota_fiscal_mat_w,0) <> 0) then
										ds_motivo_saida_regra_w	 := 'Nota fiscal material';
										goto final;
									end if;
								end if;
							else
								ds_motivo_saida_regra_w	 := 'Nota fiscal material - não mat';
								goto final;
							end if;
						end if;

						---------------------------CONSISTE MATERIAL PARA O PRESTADOR--------------------------------
						if (coalesce(ie_consiste_mat_prestador_w,'N') = 'S') and (coalesce(nr_seq_material_w,0) <> 0)	then
							/*select	substr(pls_obter_se_internado(nr_sequencia,null),1,1)
							into	ie_internacao_w
							from	pls_conta
							where	nr_sequencia	= nr_seq_conta_p;*/
							ie_consiste_material_w	:= pls_obter_se_mat_prestador(	nr_seq_prestador_p,
														null,
														nr_seq_material_w,
														dt_atendimento_w,
														nr_seq_prestador_exec_w,
														ie_internacao_w,
														cd_estabelecimento_p,
														null);

							if (ie_consiste_material_w = 'S')	then
								ds_motivo_saida_regra_w	:= 'Consiste material prestador';
								goto final;
							end if;
						elsif (coalesce(ie_consiste_mat_prestador_w,'N') = 'S') and (coalesce(nr_seq_material_w,0) = 0) then
							ds_motivo_saida_regra_w	:= 'Consiste material prestador - sem mat';
							goto final;
						end if;

						if	((nr_seq_ops_congenere_w IS NOT NULL AND nr_seq_ops_congenere_w::text <> '') or (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '')) and (coalesce(ie_regra_cong_rec_fat_w,'N') = 'S') then
							ie_permite_w := pls_obter_restr_envio_fat_coop(	coalesce(nr_seq_congenere_w,nr_seq_ops_congenere_w), nr_seq_cooperativa_w, ie_tipo_intercambio_w, cd_estabelecimento_p, nm_usuario_p, ie_permite_w);

							if (coalesce(ie_permite_w,'S') = 'S') then
								ds_motivo_saida_regra_w	 := 'Operadora congênere - faturamento';
								goto final;
							end if;
						end if;

						if (nr_seq_regra_carteira_w IS NOT NULL AND nr_seq_regra_carteira_w::text <> '') then
							ie_glosar_cart_w := pls_consistir_regra_atend_cart(nr_seq_segurado_p, nr_seq_regra_carteira_w, ie_glosar_cart_w);

							if (ie_glosar_cart_w = 'N') then
								ds_motivo_saida_regra_w	:= 'Regra carteira';
								goto final;
							end if;
						end if;

						-- Consistência para contas que estiverem em uma guia de internação, conforme solicitado por Roni - USJRP.
						if (ie_internado_regra_w = 'S') and (ie_internado_regra_w IS NOT NULL AND ie_internado_regra_w::text <> '') then

							select	count(1)
							into STRICT	qt_guia_relacionada_inter_w
							from	pls_conta a
							where	((a.cd_guia = coalesce(cd_guia_referencia_w, cd_guia_w)) and ((coalesce(cd_guia_referencia_w, cd_guia_w) IS NOT NULL AND (coalesce(cd_guia_referencia_w, cd_guia_w))::text <> '')))
							and	a.ie_tipo_guia 	  = 5
							and	(a.nr_seq_segurado = nr_seq_segurado_p AND nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '')  LIMIT 1;

							if (coalesce(qt_guia_relacionada_inter_w,0) = 0) then
								ds_motivo_saida_regra_w := 'Atendimento em Internação';
								goto final;
							end if;
						end if;

						/* Francisco - 28/06/2012 - Validação complementar de prestador */

						if (nr_seq_prestador_regra_w > 0) and (qt_regra_prest_w > 0) then
							ie_validacao_compl_prest_w := pls_valida_compl_ocor_prest(	'PLS_OCORRENCIA_REGRA', nr_seq_regra_w, nr_seq_conta_p, nr_seq_prestador_p, dt_referencia_w, ie_validacao_compl_prest_w);
						end if;

						if (ie_validacao_compl_prest_w = 'N') then
							ds_motivo_saida_regra_w		:= 'Prestador dados complementares';
							goto final;
						end if;

						----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
						if (ie_gerar_oc_partic_ww = 'S') then
							open C03;
							loop
							fetch C03 into
								nr_seq_participante_ww;
							EXIT WHEN NOT FOUND; /* apply on C03 */
								begin
								select	count(1)
								into STRICT	qt_ocorrencia_partic_w
								from	pls_ocorrencia_benef
								where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
								and	nr_seq_conta		= nr_seq_conta_p
								and	nr_seq_proc		= nr_seq_conta_proc_w
								and	nr_seq_proc_partic	= nr_seq_participante_ww;

								if (coalesce(ie_reconsistencia_p,'N') = 'N') or (coalesce(qt_regra_w,0) = 0)or (coalesce(qt_ocorrencia_partic_w,0) = 0)then

									nr_seq_ocorrencia_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_w, null, null, nr_seq_conta_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_regra_w, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_w, ie_tipo_item_w, cd_estabelecimento_p, 'N', null, nr_seq_ocorrencia_benef_w, null, nr_seq_participante_ww, null, null);

									delete	FROM w_pls_ocorrencia_partic
									where	nr_seq_ocorrencia 	= nr_seq_ocorrencia_w
									and	nm_usuario		= nm_usuario_p
									and	nr_seq_participante 	= nr_seq_participante_ww;

									commit;
								else
									update	pls_ocorrencia_benef
									set	ie_situacao		= 'A',
										ie_forma_inativacao	 = NULL
									where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
									and	nr_seq_conta		= nr_seq_conta_p
									and	nr_seq_proc		= nr_seq_conta_proc_w
									and	nr_seq_proc_partic	= nr_seq_participante_ww
									and (coalesce(ie_forma_inativacao::text, '') = '' or ie_forma_inativacao = 'S')
									and (coalesce(ie_lib_manual::text, '') = '' or ie_lib_manual <> 'S');

									update	pls_conta_glosa
									set	ie_situacao	= 'A',
										ie_forma_inativacao 	 = NULL
									where	nr_seq_conta_proc	= nr_seq_conta_proc_w
									and	nr_seq_proc_partic	= nr_seq_participante_ww
									and (coalesce(ie_forma_inativacao::text, '') = '' or ie_forma_inativacao = 'S')
									and	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
									and	(nr_seq_ocorrencia_benef IS NOT NULL AND nr_seq_ocorrencia_benef::text <> '')
									and (coalesce(ie_lib_manual::text, '') = '' or ie_lib_manual <> 'S');

									update	pls_ocorrencia_benef
									set	ie_situacao		= 'I',
										ie_forma_inativacao	= 'U'
									where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
									and	nr_seq_conta		= nr_seq_conta_p
									and	nr_seq_proc		= nr_seq_conta_proc_w
									and	nr_seq_proc_partic	= nr_seq_participante_ww
									and (ie_forma_inativacao 	= 'US')
									and (coalesce(ie_lib_manual::text, '') = '' or ie_lib_manual <> 'S');

									update	pls_conta_glosa
									set	ie_situacao	= 'I',
										ie_forma_inativacao 	= 'U'
									where	nr_seq_conta_proc	= nr_seq_conta_proc_w
									and	nr_seq_proc_partic	= nr_seq_participante_ww
									and (ie_forma_inativacao 	= 'US')
									and	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
									and	(nr_seq_ocorrencia_benef IS NOT NULL AND nr_seq_ocorrencia_benef::text <> '')
									and (coalesce(ie_lib_manual::text, '') = '' or ie_lib_manual <> 'S');

									delete	FROM w_pls_ocorrencia_partic
									where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
									and	nm_usuario		= nm_usuario_p
									and	nr_seq_participante	= nr_seq_participante_ww;

									commit;
								end if;
								end;
							end loop;
							close C03;
						else

							if (coalesce(ie_reconsistencia_p,'N') = 'N') or (coalesce(qt_regra_w,0) = 0) then

									nr_seq_ocorrencia_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_w, null, null, nr_seq_conta_p, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_regra_w, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_w, ie_tipo_item_w, cd_estabelecimento_p, 'N', null, nr_seq_ocorrencia_benef_w, null, null, null, null);

							else

								if (ie_tipo_item_w = 3) then
									CALL pls_reativar_ocor_conta(nr_seq_ocorrencia_w,nr_seq_conta_p,nr_seq_conta_proc_w,null,nm_usuario_p);
								elsif (ie_tipo_item_w = 4) then
									CALL pls_reativar_ocor_conta(nr_seq_ocorrencia_w,nr_seq_conta_p,null,nr_seq_conta_mat_w,nm_usuario_p);
								elsif (ie_tipo_item_w = 8) then
									CALL pls_reativar_ocor_conta(nr_seq_ocorrencia_w,nr_seq_conta_p,null,null,nm_usuario_p);
								end if;
							end if;

							commit;
						end if;
						/*Caso tenha sido gerada a ocorrencia é enviado para o final2 para passar para a próxima ocorrência*/

						goto final2;

						<<final>>

						if (coalesce(ds_motivo_saida_regra_w::text, '') = '') then
							ds_motivo_saida_regra_w	:= '-----Não definido (Outros)-----';
						end if;
					end loop;
					close C02;

				end if; /* Excecao */
			end if;
		end if; /* Se for ocorrência de procedimento ou material */
		<<final2>>
		--Tratamento para fechar o cursor das regras caso tenha havido o goto para a regra
		if (C02%ISOPEN) then
			close C02;
		end if;
		end;
	end loop; /* Fim for das ocorrencias */
	if (ie_ocorrencia_item_w = 'S') then
		ie_gerado_ocorrencia_w	:= coalesce(ie_ocorrencia_item_w,'N');
		ie_ocorrencia_w		:= ie_ocorrencia_item_w;
	end if;

	/* OS  - 392534   Demitrius regra independente  dentro da rotina */

	if (ie_tipo_item_w in (3,8)) then
		select 	max(a.nr_sequencia)
		into STRICT	nr_seq_ocorrencia_ww
		from 	pls_ocorrencia		  	a,
			pls_oc_grau_partic_espec	b
		where	a.nr_sequencia 	= b.nr_seq_ocorrencia
		and 	a.ie_situacao	= 'A';

		ie_ocorrencia_w := pls_oc_gerar_grau_espec(nr_seq_conta_p, nr_seq_conta_proc_w, nr_seq_ocorrencia_ww, ie_reconsistencia_p, nm_usuario_p, cd_estabelecimento_p, ie_ocorrencia_w, ie_tipo_ocorrencia_w	);

		commit;
	end if;
end loop; /* For dos itens */
--Não é para commit em procedures intermediarias
--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_ocorrencia ( nr_seq_segurado_p pls_segurado.nr_sequencia%type, param1_p text, ie_toda_conta_p text, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, cd_procedimento_p procedimento.cd_procedimento%type, ie_origem_proced_p procedimento.ie_origem_proced%type, nr_seq_material_p pls_material.nr_sequencia%type, ie_tipo_guia_p text, nr_seq_plano_p bigint, ie_aplicacao_regra_p text, qt_dias_vencido_p bigint, ie_tipo_pagador_p text, nr_seq_prestador_p bigint, nr_seq_tipo_atendimento_p bigint, ie_tipo_ocorrencia_p text, dt_procedimento_p timestamp, ie_origem_ocorrencia_p text, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nr_seq_congenere_p bigint, ie_conta_intercambio_p text, ie_tipo_conta_web_p text, nr_seq_ocorrencia_p pls_ocorrencia.nr_sequencia%type, ie_reconsistencia_p text) FROM PUBLIC;

