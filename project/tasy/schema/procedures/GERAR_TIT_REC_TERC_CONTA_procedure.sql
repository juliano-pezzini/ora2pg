-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_tit_rec_terc_conta (nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_sequencia_w			bigint;
cd_estab_financeiro_w		bigint;
nr_seq_terceiro_w		bigint;
cd_moeda_padrao_w		bigint;
CD_TIPO_TAXA_JURO_w		bigint;
CD_TIPO_TAXA_MULTA_w		bigint;
nr_seq_trans_fin_baixa_cr_w	bigint;
cd_estabelecimento_w		integer;
cd_pessoa_fisica_w		varchar(20);
cd_cgc_w			varchar(20);
vl_total_w			double precision;
cd_portador_w			numeric(10,0)			:= 0;/* esta igual ao "gerar_titulo_receber"*/
cd_conta_financ_cre_w		numeric(10,0);
cd_tipo_portador_w		numeric(5,0)			:= 0;/* esta igual ao "gerar_titulo_receber"*/
ie_tipo_emissao_titulo_w	numeric(5)			:= 1;/* esta igual ao "gerar_titulo_receber"*/
ie_origem_titulo_w		varchar(10)			:= '2';/* esta igual ao "gerar_titulo_receber"*/
ie_tipo_inclusao_w		varchar(1)			:= '2';/* esta igual ao "gerar_titulo_receber"*/
dt_vencimento_w			timestamp;
DT_MESANO_REFERENCIA_w		timestamp;
nome_terceiro_w			varchar(100);
ie_gerar_tit_rec_w		varchar(2);

ie_forma_pagamento_w		smallint;
ie_acao_venc_nao_util_w		varchar(1);
tx_fracao_parcela_w		double precision;
tx_acrescimo_w			double precision;
dt_venc_cond_w			timestamp;
vl_vencimento_w			double precision;
dt_base_w			timestamp;
cd_condicao_pagamento_w		bigint;
nr_titulo_w			bigint;
ie_origem_tit_terc_w		parametro_contas_receber.ie_origem_tit_terc%type;
ie_tipo_acrescimo_w		varchar(2)	:= 'P';
vl_base_juros_w			double precision	:= 0;
ie_titulo_cancel_w		varchar(1);
qt_registro_w			bigint;
nr_seq_classe_tit_rec_w		bigint;
cd_conta_contabil_cr_w		varchar(20);
ie_titulo_conta_w		varchar(1);
nr_seq_trans_fin_contab_w	bigint;
ie_qt_operacao_w		varchar(1);
vl_tot_mat_proc_w		titulo_receber.vl_saldo_titulo%type;
vl_mat_proc_w			titulo_receber.vl_saldo_titulo%type;
cd_centro_custo_w		titulo_receber_classif.cd_centro_custo%type;

vl_total_ajuste_w		double precision;
vl_ajuste_w				double precision;

/* Condicao pagamento */

c01 CURSOR FOR
SELECT	/* A Prazo   */
	tx_fracao_parcela,
	coalesce(tx_acrescimo,0),
	Obter_data_vencimento(
		dt_base_w,
		qt_dias_parcela,
		cd_estabelecimento_w,
		ie_corrido_util,
		ie_acao_venc_nao_util_w),
	0
from 	parcela
where 	cd_condicao_pagamento 	= cd_condicao_pagamento_w
and 	ie_forma_pagamento_w	<> 1

union

SELECT 	100, 0,	/* A Vista   */
	
	dt_base_w, 0

where 	ie_forma_pagamento_w	= 1;

c02 CURSOR FOR
SELECT	round((sum(coalesce(c.vl_operacao,0) * coalesce(c.qt_operacao,1)))::numeric,2),
	a.nr_seq_terceiro,
	b.cd_estabelecimento,
	b.cd_pessoa_fisica,
	b.cd_cgc,
	a.dt_vencimento,
	a.cd_estabelecimento,
	a.DT_MESANO_REFERENCIA,
	coalesce(b.ie_gerar_tit_rec,'S'),
	a.cd_condicao_pagamento,
	b.cd_conta_financ_cre,
	CASE WHEN ie_titulo_conta_w='T' THEN d.nr_seq_trans_fin_baixa  ELSE b.nr_seq_trans_fin_baixa_cr END ,
	a.nr_seq_classe_tit_rec,
	b.cd_conta_contabil_cr,
	CASE WHEN ie_titulo_conta_w='T' THEN d.nr_seq_trans_fin  ELSE null END ,
	b.cd_centro_custo
from	operacao_terceiro d,
	terceiro b,
	terceiro_operacao c,
	terceiro_conta a
where	c.nr_seq_operacao	= d.nr_sequencia
and	a.ie_status_conta	= 'D'
and	b.nr_sequencia		= a.nr_seq_terceiro
and	c.nr_seq_conta		= a.nr_sequencia
and	c.nr_seq_terceiro	= b.nr_sequencia
and	a.nr_sequencia		= nr_sequencia_p
and	(a.dt_vencimento IS NOT NULL AND a.dt_vencimento::text <> '')
group 	by a.nr_seq_terceiro,
	b.cd_estabelecimento,
	b.cd_pessoa_fisica,
	b.cd_cgc,
	a.dt_vencimento,
	a.cd_estabelecimento,
	a.DT_MESANO_REFERENCIA,
	b.ie_gerar_tit_rec,
	a.cd_condicao_pagamento,
	b.cd_conta_financ_cre,
	CASE WHEN ie_titulo_conta_w='T' THEN d.nr_seq_trans_fin_baixa  ELSE b.nr_seq_trans_fin_baixa_cr END ,
	a.nr_seq_classe_tit_rec,
	b.cd_conta_contabil_cr,
	CASE WHEN ie_titulo_conta_w='T' THEN d.nr_seq_trans_fin  ELSE null END ,
	b.cd_centro_custo;
	
C03 CURSOR FOR
SELECT	round((coalesce(c.vl_operacao,0) * coalesce(c.qt_operacao,1))::numeric,2)
from	operacao_terceiro d,
	terceiro b,
	terceiro_operacao c,
	terceiro_conta a
where	c.nr_seq_operacao	= d.nr_sequencia
and	a.ie_status_conta	= 'D'
and	b.nr_sequencia		= a.nr_seq_terceiro
and	c.nr_seq_conta		= a.nr_sequencia
and	c.nr_seq_terceiro	= b.nr_sequencia
and	a.nr_sequencia		= nr_sequencia_p
and	(a.dt_vencimento IS NOT NULL AND a.dt_vencimento::text <> '');


BEGIN

select	substr(obter_nome_terceiro(a.nr_seq_terceiro),1,200),
	cd_estabelecimento
into STRICT	nome_terceiro_w,
	cd_estabelecimento_w
from	terceiro_conta a
where	a.nr_sequencia = nr_sequencia_p;		

ie_titulo_cancel_w := obter_param_usuario(907, 37, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_titulo_cancel_w);
ie_titulo_conta_w := obter_param_usuario(907, 68, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_titulo_conta_w);

select	count(*)
into STRICT	qt_registro_w
from	titulo_receber a
where	a.nr_seq_terc_conta	= nr_sequencia_p
and	a.ie_situacao		= '3';

begin

open	c02;
loop
fetch	c02 into
	vl_total_w,
	nr_seq_terceiro_w,
	cd_estabelecimento_w,
	cd_pessoa_fisica_w,
	cd_cgc_w,
	dt_vencimento_w,
	cd_estabelecimento_w,
	DT_MESANO_REFERENCIA_w,
	ie_gerar_tit_rec_w,
	cd_condicao_pagamento_w,
	cd_conta_financ_cre_w,
	nr_seq_trans_fin_baixa_cr_w,
	nr_seq_classe_tit_rec_w,
	cd_conta_contabil_cr_w,
	nr_seq_trans_fin_contab_w,
	cd_centro_custo_w;
EXIT WHEN NOT FOUND; /* apply on c02 */

	if (ie_gerar_tit_rec_w = 'S') and ((coalesce(ie_titulo_cancel_w,'S') = 'S') or (coalesce(qt_registro_w,0) = 0)) then
		begin
		
		/*open C03; OS 1462898 -> Retirei pois da problema qdo o param 68 esta como T, gerar titulo por TF das operacoes. Nesse caso o vl_total_w nao pode receber o valor total de todas as operacoes da conta...
		                                                 Isso aqui havia sido feito por motivos de arredondamento. Fiz outra tratativa de arredondamento mais abaixo.
		loop
		fetch C03 into	
			vl_mat_proc_w;
		exit when C03%notfound;
			begin
			
			vl_tot_mat_proc_w := nvl(vl_tot_mat_proc_w,0) + nvl(vl_mat_proc_w,0);
			
			end;
		end loop;
		close C03;
		
		if	(nvl(vl_tot_mat_proc_w,0) > 0) then
			vl_total_w	:= vl_tot_mat_proc_w;
		end if;*/
		select	max(cd_moeda_padrao),
			max(CD_TIPO_TAXA_JURO),
			max(CD_TIPO_TAXA_MULTA),
			max(ie_origem_tit_terc)
		into STRICT	cd_moeda_padrao_w,
			CD_TIPO_TAXA_JURO_w,
			CD_TIPO_TAXA_MULTA_w,
			ie_origem_tit_terc_w
		from	parametro_contas_receber
		where	cd_estabelecimento	= cd_estabelecimento_w;

		select	coalesce(cd_estab_financeiro, cd_estabelecimento)
		into STRICT	cd_estab_financeiro_w
		from	estabelecimento
		where	cd_estabelecimento	= cd_estabelecimento_w;

		ie_origem_titulo_w	:= coalesce(ie_origem_tit_terc_w,ie_origem_titulo_w);	

		if (cd_condicao_pagamento_w IS NOT NULL AND cd_condicao_pagamento_w::text <> '') then
			
			dt_base_w	:= coalesce(dt_vencimento_w,clock_timestamp());

			/* define data base para condicao pagamento */

			select coalesce(Obter_Data_Base_Venc(dt_base_w, ie_forma_pagamento_w), dt_base_w)
			into STRICT  dt_base_w
			;

			select 	coalesce(max(ie_forma_pagamento),3),
				coalesce(max(ie_acao_nao_util),'M'),
				coalesce(max(ie_tipo_acrescimo),'P')
			into STRICT 	ie_forma_pagamento_w,
				ie_acao_venc_nao_util_w,
				ie_tipo_acrescimo_w
			from 	condicao_pagamento
			where 	cd_condicao_pagamento = cd_condicao_pagamento_w
				and 	ie_situacao           = 'A';

			/* Francisco - OS 106247 - 19/03/2009 - Calcular juros pela base */

			if (ie_tipo_acrescimo_w = 'B') then
				vl_base_juros_w	:= obter_base_acresc_cond_pagto(cd_condicao_pagamento_w,trunc(vl_total_w,2));
			end if;

			vl_total_ajuste_w := 0;
			vl_ajuste_w := 0;
			
			open c01;
			loop
			fetch c01 into
				tx_fracao_parcela_w,
				tx_acrescimo_w,
				dt_venc_cond_w,
				vl_vencimento_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				if (vl_vencimento_w = 0) then

					if (coalesce(tx_fracao_parcela_w,0) > 0) then
						vl_vencimento_w 	:= ((trunc(vl_total_w,2) * tx_fracao_parcela_w) / 100);
					end if;

					vl_total_ajuste_w := coalesce(vl_total_ajuste_w,0) + coalesce(vl_vencimento_w,0);
					
				end if;
				if (tx_acrescimo_w <> 0) then
					if (ie_tipo_acrescimo_w = 'P') then
						vl_vencimento_w 	:= vl_vencimento_w + ((vl_vencimento_w * tx_acrescimo_w) / 100);
					elsif (ie_tipo_acrescimo_w = 'B') then
						vl_vencimento_w 	:= vl_vencimento_w + ((vl_base_juros_w * tx_acrescimo_w) / 100);	
					end if;
				end if;

				select	nextval('titulo_seq')
				into STRICT	nr_titulo_w
				;
		
				insert into titulo_receber(NR_TITULO,
						CD_ESTABELECIMENTO,
						DT_ATUALIZACAO,
						NM_USUARIO,
						DT_EMISSAO,
						DT_VENCIMENTO,
						DT_PAGAMENTO_PREVISTO,
						VL_TITULO,
						VL_SALDO_TITULO,
						VL_SALDO_JUROS,
						VL_SALDO_MULTA,
						CD_MOEDA,
						CD_PORTADOR,
						CD_TIPO_PORTADOR,
						TX_JUROS,
						TX_MULTA,
						CD_TIPO_TAXA_JURO,
						CD_TIPO_TAXA_MULTA,
						TX_DESC_ANTECIPACAO,
						IE_SITUACAO,
						IE_TIPO_EMISSAO_TITULO,
						IE_ORIGEM_TITULO,
						IE_TIPO_TITULO,
						IE_TIPO_INCLUSAO,
						CD_PESSOA_FISICA,
						CD_CGC,
						NR_SEQ_TERC_CONTA,
						DT_CONTABIL,
						cd_estab_financeiro,
						nr_seq_trans_fin_baixa,
						nm_usuario_orig,
						dt_inclusao,
						nr_seq_classe,
						nr_seq_trans_fin_contab)
				values (nr_titulo_w,
						cd_estabelecimento_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						dt_venc_cond_w,
						dt_venc_cond_w,
						trunc(vl_vencimento_w,2),
						trunc(vl_vencimento_w,2),
						0,
						0,
						cd_moeda_padrao_w,
						cd_portador_w,
						cd_tipo_portador_w,
						0,
						0,
						CD_TIPO_TAXA_JURO_w,
						CD_TIPO_TAXA_MULTA_w,
						0,
						1,
						ie_tipo_emissao_titulo_w,
						ie_origem_titulo_w,
						8,
						ie_tipo_inclusao_w,
						cd_pessoa_fisica_w,
						cd_cgc_w,
						nr_sequencia_p,
						DT_MESANO_REFERENCIA_w,
						cd_estab_financeiro_w,
						nr_seq_trans_fin_baixa_cr_w,
						nm_usuario_p,
						clock_timestamp(),
						nr_seq_classe_tit_rec_w,
						nr_seq_trans_fin_contab_w);

				if (cd_conta_financ_cre_w IS NOT NULL AND cd_conta_financ_cre_w::text <> '') then

					insert	into	titulo_receber_classif(nr_titulo,
						nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						cd_conta_financ,
						vl_classificacao,
						vl_desconto,
						vl_original,
						cd_conta_contabil,
						cd_centro_custo)
					values (nr_titulo_w,
						1,
						nm_usuario_p,
						clock_timestamp(),
						cd_conta_financ_cre_w,
						trunc(vl_vencimento_w,2),
						0,
						trunc(vl_vencimento_w,2),
						cd_conta_contabil_cr_w,
						cd_centro_custo_w);

				end if;

			end loop;
			close c01;

			/*Se o valor total dos vencimentos for dferente do valor total da fracao, ajustar. Igual faz na GERAR_TITULO_RECEBER*/
	
			if (vl_total_ajuste_w > 0) and (coalesce(vl_total_ajuste_w,0) <> coalesce(vl_total_w,0)) then	
				vl_ajuste_w := (coalesce(vl_total_w,0) - coalesce(vl_total_ajuste_w,0));
				/*Ajustar o ultimo titulo gerado*/

				update 	titulo_receber
				set 	vl_titulo		= vl_titulo + coalesce(vl_ajuste_w,0),
						vl_saldo_titulo	= vl_saldo_titulo + coalesce(vl_ajuste_w,0)
				where	nr_titulo		= nr_titulo_w;		
			end if;

		else
			select	nextval('titulo_seq')
			into STRICT	nr_titulo_w
			;

			insert into titulo_receber(NR_TITULO,
					CD_ESTABELECIMENTO,
					DT_ATUALIZACAO,
					NM_USUARIO,
					DT_EMISSAO,
					DT_VENCIMENTO,
					DT_PAGAMENTO_PREVISTO,
					VL_TITULO,
					VL_SALDO_TITULO,
					VL_SALDO_JUROS,
					VL_SALDO_MULTA,
					CD_MOEDA,
					CD_PORTADOR,
					CD_TIPO_PORTADOR,
					TX_JUROS,
					TX_MULTA,
					CD_TIPO_TAXA_JURO,
					CD_TIPO_TAXA_MULTA,
					TX_DESC_ANTECIPACAO,
					IE_SITUACAO,
					IE_TIPO_EMISSAO_TITULO,
					IE_ORIGEM_TITULO,
					IE_TIPO_TITULO,
					IE_TIPO_INCLUSAO,
					CD_PESSOA_FISICA,
					CD_CGC,
					NR_SEQ_TERC_CONTA,
					DT_CONTABIL,
					cd_estab_financeiro,
					nr_seq_trans_fin_baixa,
					nm_usuario_orig,
					dt_inclusao,
					nr_seq_classe,
					nr_seq_trans_fin_contab)
			values (nr_titulo_w,
					cd_estabelecimento_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					dt_vencimento_w,
					dt_vencimento_w,
					trunc(vl_total_w,2),
					trunc(vl_total_w,2),
					0,
					0,
					cd_moeda_padrao_w,
					cd_portador_w,
					cd_tipo_portador_w,
					0,
					0,
					CD_TIPO_TAXA_JURO_w,
					CD_TIPO_TAXA_MULTA_w,
					0,
					1,
					ie_tipo_emissao_titulo_w,
					ie_origem_titulo_w,
					8,
					ie_tipo_inclusao_w,
					cd_pessoa_fisica_w,
					cd_cgc_w,
					nr_sequencia_p,
					DT_MESANO_REFERENCIA_w,
					cd_estab_financeiro_w,
					nr_seq_trans_fin_baixa_cr_w,
					nm_usuario_p,
					clock_timestamp(),
					nr_seq_classe_tit_rec_w,
					nr_seq_trans_fin_contab_w);

			/* Francisco - OS 85621 - 10/03/2008 */

			if (cd_conta_financ_cre_w IS NOT NULL AND cd_conta_financ_cre_w::text <> '') then

				insert	into	titulo_receber_classif(nr_titulo,
					nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					cd_conta_financ,
					vl_classificacao,
					vl_desconto,
					vl_original,
					cd_conta_contabil,
					cd_centro_custo)
				values (nr_titulo_w,
					1,
					nm_usuario_p,
					clock_timestamp(),
					cd_conta_financ_cre_w,
					trunc(vl_total_w,2),
					0,
					trunc(vl_total_w,2),
					cd_conta_contabil_cr_w,
					cd_centro_custo_w);

			end if;
		end if;
		exception
			when others then
				/* Erro ao gerar titulo!
				Terceiro: obter_nome_pf_pj(cd_pessoa_fisica_w, cd_cgc_w)
				Conta: nr_sequencia_p
				sqlerrm */
				CALL wheb_mensagem_pck.exibir_mensagem_abort(262748,	'NM_TERCEIRO_W='||obter_nome_pf_pj(cd_pessoa_fisica_w, cd_cgc_w) || ';' ||
										'NR_SEQUENCIA_P=' || nr_sequencia_p || ';' ||
										'SQLERRM_W=' || sqlerrm);
		end;
	end if;

end	loop;
close	c02;

exception
	when others then
		/* Erro ao ler a conta: nr_sequencia_p - nome_terceiro_w
		Verifique se a conta possui itens lancados e se a data de vencimento esta informada.
		sqlerrm */
		CALL wheb_mensagem_pck.exibir_mensagem_abort(262749,	'NR_SEQUENCIA_P='||nr_sequencia_p || ';' ||
								'NOME_TERCEIRO_W=' || nome_terceiro_w || ';' ||
								'SQLERRM_W=' || sqlerrm);
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_tit_rec_terc_conta (nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

