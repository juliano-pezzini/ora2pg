-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gravar_longa_permanencia (NR_ATENDIMENTO_P bigint, NR_INTERNO_CONTA_P bigint, NM_USUARIO_P text) AS $body$
DECLARE

dt_entrada_unidade_w		timestamp;
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
nr_sequencia_w			bigint;
cd_setor_atendimento_w		integer;
qt_procedimento_w			bigint	:= 1;
nr_aih_w				bigint;
vl_procedimento_w			double precision	:= 0;
vl_medico_w				double precision	:= 0;
vl_anestesista_w			double precision	:= 0;
vl_materiais_w			double precision	:= 0;
dt_atualizacao_w			timestamp			:= clock_timestamp();
nm_usuario_w			varchar(15)	:= 'Tasy';
cd_medico_responsavel_w		varchar(10);
dt_emissao_w			timestamp;
nr_laudo_sus_w			bigint;
cd_procedimento_p			bigint;
cd_estabelecimento_w		integer;
cd_cgc_prestador_w		varchar(14);

qt_perm_sus_w			smallint;
qt_perm_real_w			smallint;
qt_longa_perm_w			smallint;
nr_aih_calc_w			bigint;
nr_seq_atepacu_w			bigint;
NR_SEQ_INTERNO_w              bigint;
nr_seq_laudo_w		bigint;
nr_seq_aih_w		bigint;
cd_pessoa_fisica_w	varchar(10);


BEGIN
/* Selecao das informacoes para geracao do procedimento Longa permanencia */

SELECT * FROM calcular_longa_permanencia(	nr_atendimento_p, nr_interno_conta_p, cd_procedimento_p, qt_perm_sus_w, qt_perm_real_w, qt_longa_perm_w, nr_aih_calc_w) INTO STRICT cd_procedimento_p, qt_perm_sus_w, qt_perm_real_w, qt_longa_perm_w, nr_aih_calc_w;

begin
update	sus_aih
set		qt_permanencia_sus	= qt_perm_sus_w,
		qt_permanencia_real 	= qt_perm_real_w,
		qt_longa_permanencia	= qt_longa_perm_w
where		nr_aih			= nr_aih_calc_w
and		nr_atendimento		= nr_atendimento_p
and		nr_interno_conta		= nr_interno_conta_p;
exception
		when others then
			qt_perm_sus_w := qt_perm_sus_w;
end;

if 	cd_procedimento_p	> 0 	then
	begin
	begin
	select dt_entrada_unidade,
		cd_convenio,
		cd_categoria,
		cd_setor_atendimento,
		cd_estabelecimento,
		nr_seq_atepacu
	into STRICT	dt_entrada_unidade_w,
		cd_convenio_w,
		cd_categoria_w,
		cd_setor_atendimento_w,
		cd_estabelecimento_w,
		nr_seq_atepacu_w
	from 	atendimento_paciente_v
	where	nr_atendimento	= nr_atendimento_p;
	end;

	/* selecionar ultimo setor de internação */

	select coalesce(obter_atepacu_paciente(nr_atendimento_p,'IA'),0)
	into STRICT	 nr_seq_interno_w
	;

	if (nr_seq_interno_w	> 0)				and (nr_seq_interno_w <> nr_seq_atepacu_w) 	then
		begin
		select dt_entrada_unidade,
			 cd_setor_atendimento,
		 	 nr_seq_interno
		into STRICT	 dt_entrada_unidade_w,
		 	 cd_setor_atendimento_w,
		 	 nr_seq_atepacu_w
		from	 atend_paciente_unidade
		where	 nr_atendimento	= nr_atendimento_p
		and	 nr_seq_interno	= nr_seq_interno_w;
		end;
	end if;

	/* Selecao para inclusao do sus_laudo_paciente de longa permanencia */

	begin
	select		nr_aih,
			cd_medico_responsavel,
			nr_sequencia
	into STRICT		nr_aih_w,
			cd_medico_responsavel_w,
			nr_seq_aih_w
	from		sus_aih
	where		nr_atendimento	= nr_atendimento_p
	and		nr_interno_conta	= nr_interno_conta_p;
	exception
		when others then
			--r.aise_application_error(-20011,'Verificar a existencia de mais de uma AIH para a mesma conta!');
			CALL wheb_mensagem_pck.exibir_mensagem_abort(263404);
	end;

	begin
	select 	cd_cgc
	into STRICT		cd_cgc_prestador_w
	from 		estabelecimento
	where 	cd_estabelecimento	= cd_estabelecimento_w;
	end;


	begin
	/* Delecao de longa permanecia caso exista alguma */

	delete	FROM procedimento_paciente
	where		nr_atendimento			= nr_atendimento_p
	and		nr_interno_conta			= nr_interno_conta_p
	and		ie_origem_Proced			= 2
	and		substr(cd_procedimento,1,5) 	= '99003'
	and		coalesce(cd_motivo_exc_conta::text, '') = '';
	end;
	begin
	delete	FROM sus_laudo_paciente
	where		nr_atendimento			= nr_atendimento_p
	and		nr_interno_conta			= nr_interno_conta_p
	and		substr(cd_procedimento_solic,1,5) 	= '99003';
	end;
	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

	begin
	select coalesce((max(nr_laudo_sus)+1),1)
	into STRICT 		nr_laudo_sus_w
	from 		sus_laudo_paciente
	where 	nr_atendimento	= nr_atendimento_p
	and		nr_interno_conta	= nr_interno_conta_p;
	end;

	begin
	SELECT nextval('procedimento_paciente_seq')
	INTO STRICT  NR_SEQUENCIA_W
	;
	end;

	begin
	insert into		procedimento_paciente(NR_ATENDIMENTO			,
 	DT_ENTRADA_UNIDADE		,
 	CD_PROCEDIMENTO			,
 	DT_PROCEDIMENTO			,
 	QT_PROCEDIMENTO			,
 	DT_ATUALIZACAO			,
 	NM_USUARIO				,
 	CD_CONVENIO				,
 	CD_CATEGORIA			,
 	DT_PRESCRICAO			,
 	CD_SETOR_ATENDIMENTO   		,
 	IE_ORIGEM_PROCED       		,
 	VL_PROCEDIMENTO			,
 	VL_MEDICO				,
 	VL_ANESTESISTA			,
 	VL_MATERIAIS			,
 	NR_AIH                 		,
 	TX_PROCEDIMENTO        		,
 	IE_VALOR_INFORMADO     		,
 	NR_SEQUENCIA                	,
	DT_INICIO_PROCEDIMENTO  	,
	IE_CLASSIF_SUS			,
	CD_CGC_PRESTADOR			,
	NR_INTERNO_CONTA			,
	nr_seq_atepacu,
	nr_seq_aih)
	values (NR_ATENDIMENTO_P	      	,
	DT_ENTRADA_UNIDADE_W         	,
 	CD_PROCEDIMENTO_P            	,
	DT_ENTRADA_UNIDADE_W	 	,	/*DT_PROCEDIMENTO*/
	1					,	/*QT_PROCEDIMENTO*/
	clock_timestamp()	 			,
 	'Tasy'	    			,
 	CD_CONVENIO_W   			,
 	CD_CATEGORIA_W  			,
 	DT_ENTRADA_UNIDADE_W		,	/*DT_PROCEDIMENTO_PRINC*/
 	CD_SETOR_ATENDIMENTO_W    	,
 	2			        	,	/*IE_ORIGEM_PROCED*/
 	VL_PROCEDIMENTO_W			,
 	VL_MEDICO_W				,
 	VL_ANESTESISTA_W			,
 	VL_MATERIAIS_W			,
 	NR_AIH_W                  	,
 	100			         	,	/*TX_PROCEDIMENTO*/
 	'N'					,	/*IE_VALOR_INFORMADO*/
 	NR_SEQUENCIA_W               	,
 	DT_ENTRADA_UNIDADE_W		,	/*DT_INICIO_PROCEDIMENTO*/
	4					,
	CD_CGC_PRESTADOR_W		,
	NR_INTERNO_CONTA_P		,
	nr_seq_atepacu_w,
	nr_seq_aih_w);
	end;
	begin
	select nextval('sus_laudo_paciente_seq')
	into STRICT nr_seq_laudo_w
	;

	insert into sus_laudo_paciente(nr_atendimento		,
	ie_tipo_laudo_sus		,
	nr_laudo_sus		,
	dt_emissao			,
 	cd_procedimento_solic	,
 	ie_origem_proced		,
 	qt_procedimento_solic	,
 	cd_medico_responsavel	,
 	dt_atualizacao		,
 	nm_usuario			,
 	nr_aih				,
	nr_seq_interno,
	nr_interno_conta,
	nr_seq_aih,
	ie_diaria_acomp)
	values (nr_atendimento_p		,
 	11				,
 	nr_laudo_sus_w		,
 	dt_entrada_unidade_w	,
 	cd_procedimento_p		,
 	2				,
 	1				,
 	cd_medico_responsavel_w	,
 	clock_timestamp()			,
 	nm_usuario_p		,
 	nr_aih_w			,
	nr_seq_laudo_w,
	nr_interno_conta_p,
	nr_seq_aih_w,
	'N');
  	end;

	begin
	CALL Atualiza_Preco_Procedimento(NR_SEQUENCIA_W,
		CD_CONVENIO_W,
		NM_USUARIO_W);
		exception
			when others then
			DT_ATUALIZACAO_W := clock_timestamp();
	end;
	end;
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gravar_longa_permanencia (NR_ATENDIMENTO_P bigint, NR_INTERNO_CONTA_P bigint, NM_USUARIO_P text) FROM PUBLIC;

