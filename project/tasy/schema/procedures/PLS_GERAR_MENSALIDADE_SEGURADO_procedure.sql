-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_mensalidade_segurado ( nr_seq_lote_p bigint, nr_seq_mensalidade_p bigint, nr_seq_segurado_p bigint, ie_tipo_mensalidade_p text, dt_mesano_referencia_p timestamp, ie_gerar_mensalidade_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_existe_mens_p INOUT text) AS $body$
DECLARE


dt_mesano_referencia_w		timestamp;
dt_final_w			timestamp;
dt_inicial_w			timestamp;
dt_final_ww			timestamp;
ie_tipo_contratacao_w		varchar(2);
ie_regulamentacao_lote_w	varchar(1);
ie_fator_moderador_w		varchar(1);
nr_contrato_w			bigint;
nr_seq_segurado_w		bigint;
nr_seq_contrato_w		bigint;
nr_seq_plano_w			bigint;
dt_rescisao_w			timestamp;
dt_adesao_w			timestamp;
nr_seq_mensalidade_seg_w	bigint;
vl_mensalidade_w		double precision	:= 0;
nr_seq_segurado_preco_w		bigint;
ie_preco_w			varchar(2);
dt_contrato_w			timestamp;
vl_preco_atual_w		double precision	:= 0;
qt_idade_w			bigint;
nr_seq_reajuste_w		bigint;
vl_preco_nao_subsid_desc_w	double precision;
dt_autorizacao_ans_w		timestamp;
nr_parcela_segurado_w		bigint;
qt_reg_mensalidade_w		integer;
nr_seq_pagador_w		bigint;
ie_calc_primeira_mens_w		varchar(1);
dt_vencimento_mens_w		timestamp;
qt_dias_w			bigint;
dt_contratacao_w		timestamp;
ie_calculo_proporcional_w	varchar(1);
dt_ultimo_dia_mes_w		varchar(2);
qt_reg_coparticipacao_w		integer := 0;
qt_mensalidade_segurado_w	integer	:= 0;
qt_registro_w			integer	:= 0;
nr_seq_contrato_pag_w		bigint;
ie_existe_mens_w		varchar(1)	:= 'N';
qt_regra_mens_limite_w		integer;
nr_parcela_contrato_w		bigint;
dt_ultima_mens_gerada_w		timestamp;
ie_gerar_mensalidade_w		varchar(1);
qt_regra_mens_futura_w		integer;
qt_regra_rescisao_w		bigint;
ie_coparticipacao_w		varchar(1);
nr_seq_lote_reajuste_w		bigint;
qt_lanc_prog_w			integer;
nr_seq_mens_seg_item_w		bigint;
dt_inicio_adesao_w		timestamp;
dt_fim_adesao_w			timestamp;
qt_lanc_prog_aut_w		integer;
ie_taxa_inscricao_w		varchar(1);
dt_nascimento_w			timestamp;
nr_seq_tabela_w			bigint;
nr_seq_preco_w			bigint;
vl_reajuste_faixa_etaria_w	double precision;
ie_tipo_pagador_w		varchar(1);
vl_reajuste_indice_w		double precision;
tx_reajuste_w			double precision;
ds_mensagem_reajuste_w		varchar(4000);
nr_seq_reajuste_fx_etaria_w	bigint;
nr_seq_preco_reaj_w		bigint;
tx_acrescimo_w			pls_plano_preco.tx_acrescimo%type;
dt_reajuste_w			timestamp;
nr_contrato_intercambio_w	bigint;
ie_tipo_contrato_w		varchar(2);
nr_seq_intercambio_w		bigint;
ie_tipo_preco_w			varchar(2);
ie_form_preco_w			varchar(2);
ds_observacao_w			varchar(4000);
nm_tabela_w			varchar(255);
ds_plano_w			varchar(80);
nr_seq_titular_w		bigint;
nr_seq_tabela_repasse_w		bigint;
nm_tabela_repasse_w		varchar(255);
qt_indicacao_w			bigint;
qt_repasse_mes_w		integer;
nr_seq_reaj_repasse_w		bigint;
dt_inicio_geracao_w		timestamp;
dt_fim_geracao_w		timestamp;
qt_segundos_geracao_w		bigint;
qt_tempo_geracao_w		varchar(15);
qt_horas_lote_w			bigint;
qt_minutos_lote_w		bigint;
qt_segundos_lote_w		bigint;
nr_seq_preco_atual_w		bigint;
qt_idade_atual_w		bigint;
cd_motivo_reajuste_w		varchar(2);
qt_idade_limite_reaj_w		bigint;
qt_anos_limite_reaj_w		bigint;
qt_idade_operadora_w		bigint;
dt_inclusao_operadora_w		timestamp;
tx_desconto_w			double precision;
nr_seq_regra_desconto_w		bigint;
ie_geracao_valores_w		varchar(1);
ie_regulamentacao_w		varchar(1);
dt_aniversario_w		timestamp;
ie_preco_vidas_contrato_w	varchar(1)	:= 'N';
ie_calculo_vidas_w		pls_tabela_preco.ie_calculo_vidas%type := null;
qt_vidas_w			bigint	:= 0;
nr_seq_grau_parent_w		bigint;
ie_grau_parentesco_w		varchar(2);
nr_seq_pagador_benef_w		bigint;
ie_pag_complementar_w		varchar(1);
cd_empresa_inicial_w		bigint;
cd_empresa_final_w		bigint;
dt_base_inclusao_w		timestamp;
nr_seq_mtvo_alteracao_w		bigint;
dt_adaptacao_w			timestamp;
vl_adaptacao_w			double precision	:= null;
vl_adaptacao_proporc_w		double precision	:= null;
vl_adaptacao_aux_w		double precision	:= null;
qt_cobranca_adap_w		integer;
dt_adaptacao_aux_w		timestamp;
cd_pf_estipulante_w		varchar(10);
qt_regra_resc_proporcional_w	varchar(1);
dt_periodo_resc_inicial_w	timestamp;
ie_rescisao_proporcional_w	varchar(1);
vl_preco_ant_w			double precision;
vl_desconto_w			double precision;
nr_seq_segurado_preco_fx_w	bigint;
dt_referencia_reajuste_fx_w	timestamp;
vl_preco_inicial_fx_w		double precision;
vl_preco_atual_fx_w		double precision;
vl_preco_nao_subsid_desc_fx_w	double precision;
vl_adaptacao_fx_w		double precision;
vl_minimo_fx_w			double precision;
qt_reaj_fx_gerado_w		integer;
nr_seq_processo_w		bigint;
ie_situacao_preco_w		varchar(1);
nr_seq_processo_reaj_w		bigint;
ie_tipo_repasse_w		varchar(1);
ie_mes_cobranca_reajuste_w	varchar(1);
qt_interv_aniver_ref_w		bigint;
ie_log_erro_w			varchar(10);
ie_mes_cobranca_reaj_cont_w	varchar(1);
ie_reajuste_fx_mens_w		varchar(2);
ie_mensalidade_mes_rescisao_w	varchar(10);
dt_montar_data_aux_w		timestamp;
qt_excecoes_w			integer;
tx_adaptacao_w			double precision;
ie_mensalidade_proporcional_w	varchar(1);
dt_inicio_cobertura_w		timestamp;
dt_fim_cobertura_w		timestamp;
nr_seq_segurado_preco_aux_w	bigint;
nr_seq_regra_resc_proporc_w	bigint;
nr_seq_seg_preco_ajust_w	bigint;
tx_proporcional_1a_mens_w	double precision := 0;
tx_proporcional_rescisao_w	double precision := 0;
nr_seq_classif_benef_w		pls_classificacao_benef.nr_sequencia%type;
ie_pagador_rescindido_w		varchar(1);
qt_idade_limite_reaj_benef_w	pls_segurado.qt_idade_limite_reaj%type;
qt_anos_limite_reaj_benef_w	pls_segurado.qt_anos_limite_reaj%type;
nr_seq_subestipulante_w		pls_segurado.nr_seq_subestipulante%type;
nr_seq_localizacao_benef_w	pls_segurado.nr_seq_localizacao_benef%type;
dt_reativacao_w			timestamp;
qt_meses_w			bigint;
nr_parcela_w			bigint;
ie_gerar_limite_w		varchar(1) := 'N';
dt_fim_pagador_w		pls_segurado_pagador.dt_fim_vigencia%type;
ie_grau_titularidade_ant_w	pls_plano_preco.ie_grau_titularidade%type;
ie_grau_titularidade_atual_w	pls_plano_preco.ie_grau_titularidade%type;
ie_gerar_fx_w			varchar(1);
nr_seq_item_mensalidade_w	pls_mensalidade_seg_item.nr_sequencia%type;
qt_seg_pagador_w		integer;
is_calculou_rescisao_prop_w	varchar(1);
qt_seg_pag_w			smallint;
nr_seq_pagador_mens_w		pls_contrato_pagador.nr_sequencia%type;
vl_reajuste_fx_w		pls_reajuste_preco.vl_reajustado%type;
nr_seq_reaj_preco_w		pls_reajuste_preco.nr_sequencia%type;
vl_base_w			pls_reajuste_preco.vl_base%type;
nr_seq_reajuste_preco_w		pls_reajuste_preco.nr_sequencia%type;
qt_idade_inicial_w		pls_plano_preco.qt_idade_inicial%type;

c01 CURSOR FOR
	SELECT	/*+ CHOOSE */		'N' ie_tipo_pagador,
		'N' ie_pag_complementar,
		a.nr_sequencia nr_seq_segurado,
		a.nr_seq_contrato nr_seq_contrato,
		a.nr_seq_plano nr_seq_plano,
		a.nr_seq_tabela nr_seq_tabela,
		coalesce(a.dt_rescisao,a.dt_cancelamento) dt_rescisao,
		a.dt_contratacao dt_adesao,
		a.ie_taxa_inscricao ie_taxa_inscricao,
		e.dt_nascimento dt_nascimento,
		null nr_seq_intercambio,
		a.nr_seq_titular,
		a.nr_seq_tabela_repasse,
		b.ds_plano,
		b.ie_preco,
		a.dt_inclusao_operadora,
		b.ie_regulamentacao,
		a.nr_seq_parentesco,
		a.dt_contratacao,
		c.cd_pf_estipulante,
		d.ie_calc_primeira_mens,
		d.ie_calculo_proporcional,
		null ie_tipo_repasse,
		c.ie_mes_cobranca_reaj,
		a.ie_mensalidade_proporcional,
		a.ie_acao_contrato,
		a.ie_situacao_trabalhista,
		a.cd_pessoa_fisica,
		a.dt_liberacao,
		a.qt_idade_limite_reaj,
		a.qt_anos_limite_reaj,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef,
		a.dt_reativacao,
		f.dt_fim_vigencia dt_fim_pagador
	from	pls_segurado		a,
		pls_plano 		b,
		pls_contrato		c,
		pls_contrato_pagador	d,
		pessoa_fisica		e,
		pls_segurado_pagador	f
	where	a.cd_pessoa_fisica	= e.cd_pessoa_fisica
	and	f.nr_seq_pagador 	= d.nr_sequencia
	and	f.nr_seq_segurado 	= a.nr_sequencia
	and	a.nr_seq_contrato	= c.nr_sequencia
	and	a.nr_seq_plano		= b.nr_sequencia
	and	d.nr_sequencia		= nr_seq_pagador_w
	and	f.dt_inicio_vigencia 	<= dt_inicial_w
	and	a.dt_contratacao	<= dt_final_w
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	c.cd_estabelecimento	= cd_estabelecimento_p
	and	((ie_tipo_contratacao_w	= 'T') or (b.ie_tipo_contratacao = ie_tipo_contratacao_w) or ((b.ie_tipo_contratacao in ('CA','CE')) and (ie_tipo_contratacao_w	= 'C')))
	and	((ie_regulamentacao_lote_w = 'T') or (b.ie_regulamentacao = ie_regulamentacao_lote_w))
	and	((ie_fator_moderador_w	= 'T')
	or	((((b.ie_franquia	= 'S')
	or (b.ie_coparticipacao	= 'S'))
	and (ie_fator_moderador_w	= 'C'))
	or	(b.ie_franquia	= 'N' AND b.ie_coparticipacao	= 'N' AND ie_fator_moderador_w	= 'S')))
	and	((a.nr_sequencia	= nr_seq_segurado_p) or (coalesce(nr_seq_segurado_p::text, '') = ''))
	and	(((c.nr_sequencia = nr_contrato_w or c.nr_contrato_principal = nr_contrato_w) AND nr_contrato_w IS NOT NULL AND nr_contrato_w::text <> '') or (coalesce(nr_contrato_w::text, '') = ''))
	and	((a.dt_contratacao >= dt_inicio_adesao_w and (dt_inicio_adesao_w IS NOT NULL AND dt_inicio_adesao_w::text <> '')) or (coalesce(dt_inicio_adesao_w::text, '') = ''))
	and	((a.dt_contratacao <= dt_fim_adesao_w and (dt_fim_adesao_w IS NOT NULL AND dt_fim_adesao_w::text <> '')) or (coalesce(dt_fim_adesao_w::text, '') = ''))
	and	((a.nr_seq_classificacao = nr_seq_classif_benef_w) or (coalesce(nr_seq_classif_benef_w::text, '') = ''))
	and	((b.ie_preco	= ie_form_preco_w) or (coalesce(ie_form_preco_w::text, '') = ''))
	and	((c.cd_operadora_empresa	>= cd_empresa_inicial_w and (cd_empresa_inicial_w IS NOT NULL AND cd_empresa_inicial_w::text <> '')) or (coalesce(cd_empresa_inicial_w::text, '') = ''))
	and	((c.cd_operadora_empresa	< cd_empresa_final_w and (cd_empresa_final_w IS NOT NULL AND cd_empresa_final_w::text <> '')) or (coalesce(cd_empresa_final_w::text, '') = ''))
	and	coalesce(nr_contrato_intercambio_w::text, '') = ''
	and	coalesce(a.dt_cancelamento::text, '') = ''
	group by
		a.nr_sequencia,
		a.nr_seq_tabela,
		a.nr_seq_contrato,
		a.nr_seq_plano,
		a.dt_rescisao,
		a.dt_cancelamento,
		a.dt_contratacao,
		a.ie_taxa_inscricao,
		e.dt_nascimento,
		c.cd_pf_estipulante,
		a.nr_seq_titular,
		a.nr_seq_tabela_repasse,
		b.ds_plano,
		b.ie_preco,
		a.dt_inclusao_operadora,
		b.ie_regulamentacao,
		a.nr_seq_parentesco,
		a.dt_contratacao,
		d.ie_calc_primeira_mens,
		d.ie_calculo_proporcional,
		c.ie_mes_cobranca_reaj,
		a.ie_mensalidade_proporcional,
		a.ie_acao_contrato,
		a.ie_situacao_trabalhista,
		a.cd_pessoa_fisica,
		a.dt_liberacao,
		a.qt_idade_limite_reaj,
		a.qt_anos_limite_reaj,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef,
		a.dt_reativacao,
		f.dt_fim_vigencia
	
union all

	--PAGADOR ITEM
	SELECT	/*+ CHOOSE */		'N' ie_tipo_pagador,
		'S' ie_pag_complementar,
		a.nr_sequencia nr_seq_segurado,
		a.nr_seq_contrato nr_seq_contrato,
		a.nr_seq_plano nr_seq_plano,
		a.nr_seq_tabela nr_seq_tabela,
		coalesce(a.dt_rescisao,a.dt_cancelamento) dt_rescisao,
		a.dt_contratacao dt_adesao,
		a.ie_taxa_inscricao ie_taxa_inscricao,
		e.dt_nascimento dt_nascimento,
		null nr_seq_intercambio,
		a.nr_seq_titular,
		a.nr_seq_tabela_repasse,
		b.ds_plano,
		b.ie_preco,
		a.dt_inclusao_operadora,
		b.ie_regulamentacao,
		a.nr_seq_parentesco,
		a.dt_contratacao,
		c.cd_pf_estipulante,
		d.ie_calc_primeira_mens,
		d.ie_calculo_proporcional,
		null ie_tipo_repasse,
		c.ie_mes_cobranca_reaj,
		a.ie_mensalidade_proporcional,
		a.ie_acao_contrato,
		a.ie_situacao_trabalhista,
		a.cd_pessoa_fisica,
		a.dt_liberacao,
		a.qt_idade_limite_reaj,
		a.qt_anos_limite_reaj,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef,
		a.dt_reativacao,
		g.dt_fim_vigencia dt_fim_pagador
	from	pessoa_fisica		e,
		pls_segurado		a,
		pls_pagador_item_mens	f,
		pls_contrato_pagador	d,
		pls_contrato		c,
		pls_plano 		b,
		pls_segurado_pagador 	g
	where	a.cd_pessoa_fisica	= e.cd_pessoa_fisica
	and	g.nr_seq_pagador	= f.nr_seq_pagador
	and	g.nr_seq_segurado	= a.nr_sequencia
	and	f.nr_seq_pagador_item	= d.nr_sequencia
	and	a.nr_seq_contrato	= c.nr_sequencia
	and	a.nr_seq_plano		= b.nr_sequencia
	and	d.nr_sequencia		= nr_seq_pagador_w
	and	g.dt_inicio_vigencia 	<= dt_inicial_w
	and	a.dt_contratacao	<= dt_final_w
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	c.cd_estabelecimento	= cd_estabelecimento_p
	and	((ie_tipo_contratacao_w	= 'T') or (b.ie_tipo_contratacao = ie_tipo_contratacao_w) or ((b.ie_tipo_contratacao in ('CA','CE')) and (ie_tipo_contratacao_w	= 'C')))
	and	((ie_regulamentacao_lote_w = 'T') or (b.ie_regulamentacao = ie_regulamentacao_lote_w))
	and	((ie_fator_moderador_w	= 'T')
	or	((((b.ie_franquia	= 'S')
	or (b.ie_coparticipacao	= 'S'))
	and (ie_fator_moderador_w	= 'C'))
	or	(b.ie_franquia	= 'N' AND b.ie_coparticipacao	= 'N' AND ie_fator_moderador_w	= 'S')))
	and	((a.nr_sequencia	= nr_seq_segurado_p) or (coalesce(nr_seq_segurado_p::text, '') = ''))
	and	(((c.nr_sequencia = nr_contrato_w or c.nr_contrato_principal = nr_contrato_w) AND nr_contrato_w IS NOT NULL AND nr_contrato_w::text <> '') or (coalesce(nr_contrato_w::text, '') = ''))
	and	((a.dt_contratacao >= dt_inicio_adesao_w and (dt_inicio_adesao_w IS NOT NULL AND dt_inicio_adesao_w::text <> '')) or (coalesce(dt_inicio_adesao_w::text, '') = ''))
	and	((a.dt_contratacao <= dt_fim_adesao_w and (dt_fim_adesao_w IS NOT NULL AND dt_fim_adesao_w::text <> '')) or (coalesce(dt_fim_adesao_w::text, '') = ''))
	and	((a.nr_seq_classificacao = nr_seq_classif_benef_w) or (coalesce(nr_seq_classif_benef_w::text, '') = ''))
	and	((b.ie_preco	= ie_form_preco_w) or (coalesce(ie_form_preco_w::text, '') = ''))
	and	((c.cd_operadora_empresa	>= cd_empresa_inicial_w and (cd_empresa_inicial_w IS NOT NULL AND cd_empresa_inicial_w::text <> '')) or (coalesce(cd_empresa_inicial_w::text, '') = ''))
	and	((c.cd_operadora_empresa	< cd_empresa_final_w and (cd_empresa_final_w IS NOT NULL AND cd_empresa_final_w::text <> '')) or (coalesce(cd_empresa_final_w::text, '') = ''))
	and	coalesce(nr_contrato_intercambio_w::text, '') = ''
	and	coalesce(a.dt_cancelamento::text, '') = ''
	group by
		a.nr_sequencia,
		a.nr_seq_tabela,
		a.nr_seq_contrato,
		a.nr_seq_plano,
		a.dt_rescisao,
		a.dt_cancelamento,
		a.dt_contratacao,
		a.ie_taxa_inscricao,
		e.dt_nascimento,
		c.cd_pf_estipulante,
		a.nr_seq_titular,
		a.nr_seq_tabela_repasse,
		b.ds_plano,
		b.ie_preco,
		a.dt_inclusao_operadora,
		b.ie_regulamentacao,
		a.nr_seq_parentesco,
		a.dt_contratacao,
		d.ie_calc_primeira_mens,
		d.ie_calculo_proporcional,
		c.ie_mes_cobranca_reaj,
		a.ie_mensalidade_proporcional,
		a.ie_acao_contrato,
		a.ie_situacao_trabalhista,
		a.cd_pessoa_fisica,
		a.dt_liberacao,
		a.qt_idade_limite_reaj,
		a.qt_anos_limite_reaj,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef,
		a.dt_reativacao,
		g.dt_fim_vigencia
	--PAGADOR ITEM FIM
	
union all

	select	/*+ CHOOSE */		'S',
		'N' ie_pag_complementar,
		a.nr_sequencia,
		a.nr_seq_contrato,
		a.nr_seq_plano,
		a.nr_seq_tabela,
		coalesce(a.dt_rescisao,a.dt_cancelamento),
		a.dt_contratacao,
		a.ie_taxa_inscricao,
		e.dt_nascimento,
		null nr_seq_intercambio,
		a.nr_seq_titular,
		a.nr_seq_tabela_repasse,
		b.ds_plano,
		b.ie_preco,
		a.dt_inclusao_operadora,
		b.ie_regulamentacao,
		a.nr_seq_parentesco,
		a.dt_contratacao,
		c.cd_pf_estipulante,
		d.ie_calc_primeira_mens,
		d.ie_calculo_proporcional,
		null ie_tipo_repasse,
		c.ie_mes_cobranca_reaj,
		a.ie_mensalidade_proporcional,
		a.ie_acao_contrato,
		a.ie_situacao_trabalhista,
		a.cd_pessoa_fisica,
		a.dt_liberacao,
		a.qt_idade_limite_reaj,
		a.qt_anos_limite_reaj,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef,
		a.dt_reativacao,
		null dt_fim_pagador
	from	pessoa_fisica		e,
		pls_segurado		a,
		pls_sca_vinculo		f,
		pls_contrato_pagador	d,
		pls_contrato		c,
		pls_plano 		b
	where	a.cd_pessoa_fisica	= e.cd_pessoa_fisica
	and	f.nr_seq_segurado	= a.nr_sequencia
	and	f.nr_seq_pagador	= d.nr_sequencia
	and	a.nr_seq_contrato	= c.nr_sequencia
	--and	d.nr_seq_contrato	= c.nr_sequencia Com essa linha não gera mensalidade para pagador adicional de SCA em contrato vinculado ao principal
	and	a.nr_seq_plano		= b.nr_sequencia
	and	f.nr_seq_pagador	<> a.nr_seq_pagador
	and	d.nr_sequencia		= nr_seq_pagador_w
	and	a.dt_contratacao	<= dt_final_w
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	c.cd_estabelecimento	= cd_estabelecimento_p
	and	((ie_tipo_contratacao_w	= 'T') or (b.ie_tipo_contratacao = ie_tipo_contratacao_w) or ((b.ie_tipo_contratacao in ('CA','CE')) and (ie_tipo_contratacao_w	= 'C')))
	and	((ie_regulamentacao_lote_w = 'T') or (b.ie_regulamentacao = ie_regulamentacao_lote_w))
	and	((ie_fator_moderador_w	= 'T')
	or	((((b.ie_franquia	= 'S')
	or (b.ie_coparticipacao	= 'S'))
	and (ie_fator_moderador_w	= 'C'))
	or	(b.ie_franquia	= 'N' AND b.ie_coparticipacao	= 'N' AND ie_fator_moderador_w	= 'S')))
	and	((a.nr_sequencia	= nr_seq_segurado_p) or (coalesce(nr_seq_segurado_p::text, '') = ''))
	and	((c.nr_sequencia = coalesce(nr_contrato_w,c.nr_sequencia)) or (c.nr_contrato_principal = coalesce(nr_contrato_w,c.nr_contrato_principal)))
	and	a.dt_contratacao between coalesce(dt_inicio_adesao_w,a.dt_contratacao) and coalesce(dt_fim_adesao_w,a.dt_contratacao + 86399/86400)
	and	((a.nr_seq_classificacao = nr_seq_classif_benef_w) or (coalesce(nr_seq_classif_benef_w::text, '') = ''))
	and	coalesce(nr_contrato_intercambio_w::text, '') = ''
	and	((b.ie_preco	= ie_form_preco_w) or (coalesce(ie_form_preco_w::text, '') = ''))
	and	((c.cd_operadora_empresa	>= cd_empresa_inicial_w and (cd_empresa_inicial_w IS NOT NULL AND cd_empresa_inicial_w::text <> '')) or (coalesce(cd_empresa_inicial_w::text, '') = ''))
	and	((c.cd_operadora_empresa	< cd_empresa_final_w and (cd_empresa_final_w IS NOT NULL AND cd_empresa_final_w::text <> '')) or (coalesce(cd_empresa_final_w::text, '') = ''))
	and	coalesce(a.dt_cancelamento::text, '') = ''
	group by
		a.nr_sequencia,
		a.nr_seq_tabela,
		a.nr_seq_contrato,
		a.nr_seq_plano,
		a.dt_rescisao,
		a.dt_cancelamento,
		a.dt_contratacao,
		a.ie_taxa_inscricao,
		e.dt_nascimento,
		c.cd_pf_estipulante,
		a.nr_seq_titular,
		a.nr_seq_tabela_repasse,
		b.ds_plano,
		b.ie_preco,
		a.dt_inclusao_operadora,
		b.ie_regulamentacao,
		a.nr_seq_parentesco,
		a.dt_contratacao,
		d.ie_calc_primeira_mens,
		d.ie_calculo_proporcional,
		c.ie_mes_cobranca_reaj,
		a.ie_mensalidade_proporcional,
		a.ie_acao_contrato,
		a.ie_situacao_trabalhista,
		a.cd_pessoa_fisica,
		a.dt_liberacao,
		a.qt_idade_limite_reaj,
		a.qt_anos_limite_reaj,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef,
		a.dt_reativacao
	
union all

	select	/*+ CHOOSE */		'I',
		'N' ie_pag_complementar,
		a.nr_sequencia,
		null,
		a.nr_seq_plano,
		a.nr_seq_tabela,
		coalesce(a.dt_rescisao,a.dt_cancelamento),
		a.dt_inclusao_operadora,
		a.ie_taxa_inscricao,
		e.dt_nascimento,
		a.nr_seq_intercambio,
		a.nr_seq_titular,
		a.nr_seq_tabela_repasse,
		b.ds_plano,
		b.ie_preco,
		a.dt_inclusao_operadora,
		b.ie_regulamentacao,
		a.nr_seq_parentesco,
		a.dt_contratacao,
		c.cd_pessoa_fisica cd_pf_estipulante,
		d.ie_calc_primeira_mens,
		d.ie_calculo_proporcional,
		a.ie_tipo_repasse,
		'R' ie_mes_cobranca_reaj,
		a.ie_mensalidade_proporcional,
		a.ie_acao_contrato,
		a.ie_situacao_trabalhista,
		a.cd_pessoa_fisica,
		a.dt_liberacao,
		a.qt_idade_limite_reaj,
		a.qt_anos_limite_reaj,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef,
		a.dt_reativacao,
		f.dt_fim_vigencia dt_fim_pagador
	from	pessoa_fisica		e,
		pls_segurado		a,
		pls_contrato_pagador	d,
		pls_intercambio		c,
		pls_plano 		b,
		pls_segurado_pagador	f
	where	a.cd_pessoa_fisica	= e.cd_pessoa_fisica
	and	f.nr_seq_segurado	= a.nr_sequencia
	and	f.nr_seq_pagador	= d.nr_sequencia
	and	a.nr_seq_intercambio	= c.nr_sequencia
	and	a.nr_seq_plano		= b.nr_sequencia
	and	d.nr_sequencia		= nr_seq_pagador_w
	and	f.dt_inicio_vigencia 	<= dt_inicial_w
	and	a.dt_inclusao_operadora	<= dt_final_w
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	((ie_tipo_contratacao_w	= 'T') or (b.ie_tipo_contratacao = ie_tipo_contratacao_w) or ((b.ie_tipo_contratacao in ('CA','CE')) and (ie_tipo_contratacao_w	= 'C')))
	and	((ie_regulamentacao_lote_w = 'T') or (b.ie_regulamentacao = ie_regulamentacao_lote_w))
	and	((ie_fator_moderador_w	= 'T')
	or	((((b.ie_franquia	= 'S')
	or (b.ie_coparticipacao	= 'S'))
	and (ie_fator_moderador_w	= 'C'))
	or	(b.ie_franquia	= 'N' AND b.ie_coparticipacao	= 'N' AND ie_fator_moderador_w	= 'S')))
	and	((a.nr_sequencia	= nr_seq_segurado_p) or (coalesce(nr_seq_segurado_p::text, '') = ''))
	and	((c.nr_sequencia = nr_contrato_intercambio_w) or (coalesce(nr_contrato_intercambio_w::text, '') = ''))
	and	a.dt_inclusao_operadora between coalesce(dt_inicio_adesao_w,a.dt_inclusao_operadora) and coalesce(dt_fim_adesao_w,a.dt_inclusao_operadora + 86399/86400)
	and	((a.nr_seq_classificacao = nr_seq_classif_benef_w) or (coalesce(nr_seq_classif_benef_w::text, '') = ''))
	and	coalesce(nr_contrato_w::text, '') = ''
	and	((a.ie_tipo_repasse	= ie_tipo_preco_w) or (coalesce(ie_tipo_preco_w::text, '') = ''))
	and	((c.cd_operadora_empresa	>= cd_empresa_inicial_w and (cd_empresa_inicial_w IS NOT NULL AND cd_empresa_inicial_w::text <> '')) or (coalesce(cd_empresa_inicial_w::text, '') = ''))
	and	((c.cd_operadora_empresa	< cd_empresa_final_w and (cd_empresa_final_w IS NOT NULL AND cd_empresa_final_w::text <> '')) or (coalesce(cd_empresa_final_w::text, '') = ''))
	and	coalesce(a.dt_cancelamento::text, '') = ''
	group by
		a.nr_sequencia,
		a.nr_seq_tabela,
		a.nr_seq_intercambio,
		a.nr_seq_plano,
		a.dt_rescisao,
		a.dt_cancelamento,
		a.dt_inclusao_operadora,
		a.ie_taxa_inscricao,
		e.dt_nascimento,
		c.cd_pessoa_fisica,
		a.nr_seq_titular,
		a.nr_seq_tabela_repasse,
		b.ds_plano,
		b.ie_preco,
		a.dt_inclusao_operadora,
		b.ie_regulamentacao,
		a.nr_seq_parentesco,
		a.dt_contratacao,
		d.ie_calc_primeira_mens,
		d.ie_calculo_proporcional,
		a.ie_tipo_repasse,
		a.ie_mensalidade_proporcional,
		a.ie_acao_contrato,
		a.ie_situacao_trabalhista,
		a.cd_pessoa_fisica,
		a.dt_liberacao,
		a.qt_idade_limite_reaj,
		a.qt_anos_limite_reaj,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef,
		a.dt_reativacao,
		f.dt_fim_vigencia
	order by nr_seq_titular desc; --Lepinski - OS 280292 - Para gerar a bonificação para cooperado, é necessário gerar primeiro todos os titulares
C03 CURSOR FOR
	SELECT	/*+ CHOOSE */		'P', --Beneficiários da função OPS - Contratos de Intercâmbio
		a.nr_sequencia,
		null,
		a.nr_seq_plano,
		a.dt_rescisao,
		a.dt_inclusao_operadora,
		a.ie_taxa_inscricao,
		e.dt_nascimento,
		a.nr_seq_intercambio,
		a.nr_seq_titular,
		a.nr_seq_parentesco,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef
	from	pessoa_fisica		e,
		pls_segurado		a,
		pls_contrato_pagador	d
	where	a.cd_pessoa_fisica	= e.cd_pessoa_fisica
	and	exists (	SELECT	1
				from	pls_segurado		u,
					pls_contrato_pagador	r,
					pls_intercambio		t
				where	u.nr_seq_intercambio		= t.nr_sequencia
				and	r.nr_seq_pagador_intercambio	= t.nr_sequencia
				and	((t.nr_sequencia = nr_contrato_intercambio_w) or (coalesce(nr_contrato_intercambio_w::text, '') = ''))
				and	u.nr_sequencia = a.nr_sequencia)
	and	d.nr_sequencia		= nr_seq_pagador_w
	and	a.dt_inclusao_operadora	<= dt_final_w
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	exists (	select	1
				from	pls_segurado		z,
					pls_contrato_pagador	x,
					pls_intercambio		y
				where	z.nr_seq_intercambio	= y.nr_sequencia
				and	x.nr_seq_pagador_intercambio	= y.nr_sequencia
				and	((y.nr_sequencia = nr_contrato_intercambio_w) or (coalesce(nr_contrato_intercambio_w::text, '') = ''))
				and	x.nr_sequencia	= d.nr_seq_pagador_compl)
	and	((a.nr_sequencia	= nr_seq_segurado_p and (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '')) or coalesce(nr_seq_segurado_p::text, '') = '')
	and	((a.dt_inclusao_operadora >= dt_inicio_adesao_w and (dt_inicio_adesao_w IS NOT NULL AND dt_inicio_adesao_w::text <> '')) or (coalesce(dt_inicio_adesao_w::text, '') = ''))
	and	((a.dt_inclusao_operadora <= dt_fim_adesao_w and (dt_fim_adesao_w IS NOT NULL AND dt_fim_adesao_w::text <> '')) or (coalesce(dt_fim_adesao_w::text, '') = ''))
	group by
		a.nr_sequencia,
		a.cd_pessoa_fisica,
		a.nr_seq_tabela,
		a.nr_seq_intercambio,
		a.nr_seq_plano,
		a.dt_rescisao,
		a.dt_inclusao_operadora,
		a.ie_taxa_inscricao,
		e.dt_nascimento,
		a.nr_seq_titular,
		a.nr_seq_parentesco,
		a.nr_seq_subestipulante,
		a.nr_seq_localizacao_benef;

C04 CURSOR FOR
	SELECT	nr_sequencia,
		vl_preco_inicial,
		vl_preco_atual,
		vl_preco_nao_subsid_atual,
		vl_adaptacao,
		vl_minimo,
		tx_acrescimo
	from	pls_plano_preco
	where	nr_seq_tabela		= nr_seq_tabela_w
	and	qt_idade_atual_w	>= qt_idade_inicial
	and	qt_idade_atual_w	<= qt_idade_final
	and	((ie_grau_titularidade = ie_grau_parentesco_w) or (coalesce(ie_grau_titularidade::text, '') = ''))
	and	qt_vidas_w between coalesce(qt_vidas_inicial,qt_vidas_w) and coalesce(qt_vidas_final,qt_vidas_w)
	order	by	coalesce(ie_grau_titularidade,' ');

C05 CURSOR FOR
	SELECT	nr_sequencia nr_seq_seg_preco,
		dt_reajuste,
		ds_observacao
	from	pls_segurado_preco
	where	nr_seq_segurado		= nr_seq_segurado_w
	and	cd_motivo_reajuste	= 'I'
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

TYPE 		fetch_array IS TABLE OF c01%ROWTYPE;
s_array 	fetch_array;
i		integer := 1;
type Vetor is table of fetch_array index by integer;
Vetor_c01_w			Vetor;

BEGIN
dt_inicio_geracao_w	:= clock_timestamp();
dt_mesano_referencia_w	:= trunc(dt_mesano_referencia_p,'month');

dt_inicial_w :=	trunc(dt_mesano_referencia_w,'month');
dt_final_ww  := (trunc(last_day(dt_mesano_referencia_w),'dd') + 86399/86400);

dt_final_w			:= pls_store_data_mens_pck.get_dt_final_lote;
ie_tipo_contratacao_w		:= pls_store_data_mens_pck.get_ie_tipo_contratacao_lote;
ie_regulamentacao_lote_w	:= pls_store_data_mens_pck.get_ie_regulamentacao_lote;
ie_fator_moderador_w		:= pls_store_data_mens_pck.get_ie_fator_moderador_lote;
nr_contrato_w			:= pls_store_data_mens_pck.get_nr_contrato_lote;
dt_inicio_adesao_w		:= pls_store_data_mens_pck.get_dt_inicio_adesao_lote;
dt_fim_adesao_w			:= pls_store_data_mens_pck.get_fim_adesao_lote;
nr_seq_classif_benef_w		:= pls_store_data_mens_pck.get_seq_classif_benef_lote;
nr_contrato_intercambio_w	:= pls_store_data_mens_pck.get_nr_contrato_inter_lote;
ie_tipo_preco_w			:= pls_store_data_mens_pck.get_ie_tipo_preco_lote;
cd_empresa_inicial_w		:= pls_store_data_mens_pck.get_cd_empresa_inicial_lote;
cd_empresa_final_w		:= pls_store_data_mens_pck.get_cd_empresa_final_lote;
nr_seq_pagador_w		:= pls_store_data_mens_pck.get_nr_seq_pagador;
nr_seq_contrato_pag_w		:= pls_store_data_mens_pck.get_nr_seq_contrato_pag;
nr_seq_intercambio_w		:= pls_store_data_mens_pck.get_nr_seq_pagador_intercambio;
ie_geracao_valores_w		:= pls_store_data_mens_pck.get_ie_geracao_valores;

--Busca as informações do grupo de regras
CALL pls_store_data_mens_pck.set_regra_grupo(pls_store_data_mens_pck.get_nr_seq_regra_grupo_lote, nr_seq_contrato_pag_w, nr_seq_intercambio_w);

--Se o tipo de preço não vier nulo, fará uma atribuição de número para que os campos ie_tipo_repasse e ie_preco sejam compatíveis
if (ie_tipo_preco_w IS NOT NULL AND ie_tipo_preco_w::text <> '') then
	if (ie_tipo_preco_w = 'P') then
		ie_form_preco_w := '1';
	elsif (ie_tipo_preco_w = 'C') then
		ie_form_preco_w := '3';
	end if;
else
	ie_form_preco_w	:= '';
end if;

if (pls_store_data_mens_pck.get_ie_tipo_contr_reg_serie_nf IS NOT NULL AND pls_store_data_mens_pck.get_ie_tipo_contr_reg_serie_nf::text <> '') then
	ie_tipo_contratacao_w	:= pls_store_data_mens_pck.get_ie_tipo_contr_reg_serie_nf;
end if;

if (pls_store_data_mens_pck.get_ie_preco_reg_serie_nf IS NOT NULL AND pls_store_data_mens_pck.get_ie_preco_reg_serie_nf::text <> '') then
	ie_form_preco_w	:= pls_store_data_mens_pck.get_ie_preco_reg_serie_nf;
end if;

CALL pls_store_data_mens_pck.set_ie_pag_complementar('N');
CALL pls_store_data_mens_pck.set_pagador_complementar(nr_seq_pagador_w, null);

if (coalesce(ie_geracao_valores_w::text, '') = '') then
	ie_geracao_valores_w	:= 'B';
end if;

open c01;
loop
FETCH C01 BULK COLLECT INTO s_array LIMIT 1000;
	Vetor_c01_w(i) := s_array;
	i := i + 1;
EXIT WHEN NOT FOUND; /* apply on C01 */
END LOOP;
CLOSE C01;

for i in 1..Vetor_c01_w.count loop
	s_array := Vetor_c01_w(i);
	for z in 1..s_array.count loop
		begin

		ie_tipo_pagador_w		:= s_array[z].ie_tipo_pagador;
		ie_pag_complementar_w		:= s_array[z].ie_pag_complementar;
		nr_seq_segurado_w		:= s_array[z].nr_seq_segurado;
		nr_seq_contrato_w		:= s_array[z].nr_seq_contrato;
		nr_seq_plano_w			:= s_array[z].nr_seq_plano;
		nr_seq_tabela_w			:= s_array[z].nr_seq_tabela;
		dt_rescisao_w			:= s_array[z].dt_rescisao;
		dt_adesao_w			:= s_array[z].dt_adesao;
		ie_taxa_inscricao_w		:= s_array[z].ie_taxa_inscricao;
		dt_nascimento_w			:= s_array[z].dt_nascimento;
		nr_seq_intercambio_w		:= s_array[z].nr_seq_intercambio;
		nr_seq_titular_w		:= s_array[z].nr_seq_titular;
		nr_seq_tabela_repasse_w		:= s_array[z].nr_seq_tabela_repasse;
		ds_plano_w			:= s_array[z].ds_plano;
		ie_preco_w			:= s_array[z].ie_preco;
		dt_inclusao_operadora_w		:= s_array[z].dt_inclusao_operadora;
		qt_idade_limite_reaj_benef_w	:= s_array[z].qt_idade_limite_reaj;
		qt_anos_limite_reaj_benef_w	:= s_array[z].qt_anos_limite_reaj;
		ie_regulamentacao_w		:= s_array[z].ie_regulamentacao;
		nr_seq_grau_parent_w		:= s_array[z].nr_seq_parentesco;
		dt_contratacao_w		:= s_array[z].dt_contratacao;
		cd_pf_estipulante_w		:= s_array[z].cd_pf_estipulante;
		ie_calc_primeira_mens_w		:= coalesce(s_array[z].ie_calc_primeira_mens,'I');
		ie_calculo_proporcional_w	:= s_array[z].ie_calculo_proporcional;
		ie_tipo_repasse_w		:= s_array[z].ie_tipo_repasse;
		ie_mes_cobranca_reaj_cont_w	:= s_array[z].ie_mes_cobranca_reaj;
		ie_mensalidade_proporcional_w	:= s_array[z].ie_mensalidade_proporcional;
		qt_idade_w			:= null;
		nr_seq_subestipulante_w		:= s_array[z].nr_seq_subestipulante;
		nr_seq_localizacao_benef_w	:= s_array[z].nr_seq_localizacao_benef;
		dt_reativacao_w			:= s_array[z].dt_reativacao;
		dt_fim_pagador_w		:= s_array[z].dt_fim_pagador;

		select	max(nr_seq_pagador)
		into STRICT	nr_seq_pagador_benef_w
		from	pls_segurado_pagador
		where	nr_seq_segurado	= nr_seq_segurado_w
		and	dt_inicial_w >= dt_inicio_vigencia
		and	dt_inicial_w <= coalesce(dt_fim_vigencia,dt_inicial_w);

		if (coalesce(nr_seq_pagador_benef_w::text, '') = '') then
			select	max(nr_seq_pagador)
			into STRICT	nr_seq_pagador_benef_w
			from	pls_segurado
			where	nr_sequencia = nr_seq_segurado_w;
		end if;

		if (ie_pag_complementar_w = 'S') then
			CALL pls_store_data_mens_pck.set_ie_pag_complementar('S');
		end if;
		CALL pls_store_data_mens_pck.set_pagador_complementar(nr_seq_pagador_w, nr_seq_pagador_benef_w);

		select	max(nr_seq_pagador)
		into STRICT	nr_seq_pagador_mens_w
		from	pls_pagador_item_mens
		where	nr_seq_pagador_item = nr_seq_pagador_w
		and	ie_tipo_item = '3';

		qt_seg_pag_w := 0;

		if (coalesce(nr_seq_pagador_mens_w::text, '') = '') then
			begin
			select	count(1)
			into STRICT	qt_seg_pag_w
			from	pls_segurado_pagador
			where	nr_seq_segurado = nr_seq_segurado_w
			and	nr_seq_pagador 	= nr_seq_pagador_w
			and	(dt_fim_vigencia IS NOT NULL AND dt_fim_vigencia::text <> '');
			exception
			when others then
				qt_seg_pag_w := 0;
			end;
		else
			qt_seg_pag_w := 1;
		end if;

		select	count(1)
		into STRICT	qt_excecoes_w
		
		where	exists (SELECT	1
				from	pls_lote_mens_restricao
				where	nr_seq_lote		= nr_seq_lote_p
				and	nr_seq_segurado		= nr_seq_segurado_w);

		if (qt_excecoes_w > 0) then
			goto final;
		end if;

		qt_idade_atual_w	:= trunc(months_between(dt_mesano_referencia_w, trunc(dt_nascimento_w,'month')) / 12);

		CALL pls_store_data_mens_pck.clear_pls_mensalidade_segurado();
		CALL pls_store_data_mens_pck.set_nr_seq_contrato(nr_seq_contrato_w);
		CALL pls_store_data_mens_pck.set_nr_seq_intercambio(nr_seq_intercambio_w);
		CALL pls_store_data_mens_pck.set_dt_contratacao(dt_contratacao_w);
		CALL pls_store_data_mens_pck.set_ie_taxa_inscricao(ie_taxa_inscricao_w);
		CALL pls_store_data_mens_pck.set_dt_rescisao(dt_rescisao_w);
		CALL pls_store_data_mens_pck.set_nr_seq_plano(nr_seq_plano_w);
		CALL pls_store_data_mens_pck.set_ie_acao_contrato(s_array[z].ie_acao_contrato);
		CALL pls_store_data_mens_pck.set_cd_estabelecimento(cd_estabelecimento_p);
		CALL pls_store_data_mens_pck.set_nr_seq_titular(nr_seq_titular_w);
		CALL pls_store_data_mens_pck.set_nr_seq_parentesco(nr_seq_grau_parent_w);
		CALL pls_store_data_mens_pck.set_qt_idade(qt_idade_atual_w);
		CALL pls_store_data_mens_pck.set_ie_situacao_trabalhista(s_array[z].ie_situacao_trabalhista);
		CALL pls_store_data_mens_pck.set_cd_pessoa_fisica(s_array[z].cd_pessoa_fisica);
		CALL pls_store_data_mens_pck.set_dt_liberacao(s_array[z].dt_liberacao);
		CALL pls_store_data_mens_pck.set_ie_mensalidade_proporc(s_array[z].ie_mensalidade_proporcional);
		CALL pls_store_data_mens_pck.set_nr_seq_pagador_benef(nr_seq_pagador_benef_w);
		CALL pls_store_data_mens_pck.set_nr_seq_mens_canc(nr_seq_pagador_benef_w, dt_mesano_referencia_p);
		CALL pls_store_data_mens_pck.set_nr_seq_subestipulante(nr_seq_subestipulante_w);
		CALL pls_store_data_mens_pck.set_nr_seq_localizacao_benef(nr_seq_localizacao_benef_w);
		CALL pls_store_data_mens_pck.set_dt_reativacao(dt_reativacao_w);

		if (coalesce(ie_tipo_pagador_w,'N') = 'I') then
			if (ie_tipo_repasse_w = 'P') then
				ie_preco_w	:= '1';
			elsif (ie_tipo_repasse_w = 'C') then
				ie_preco_w	:= '3';
			end if;
		end if;

		ie_reajuste_fx_mens_w		:= 'N';
		vl_mensalidade_w		:= 0;
		vl_reajuste_faixa_etaria_w	:= 0;
		vl_reajuste_indice_w		:= 0;
		tx_proporcional_1a_mens_w	:= 0;
		tx_proporcional_rescisao_w	:= 0;
		ds_mensagem_reajuste_w		:= '';
		nr_seq_segurado_preco_fx_w	:= null;
		nr_seq_processo_w		:= null;
		nr_seq_processo_reaj_w		:= null;
		ie_log_erro_w			:= 'N';
		ie_mensalidade_mes_rescisao_w	:= '';
		dt_adaptacao_w			:= null;
		nr_seq_mensalidade_seg_w	:= null;

		if (coalesce(ie_mensalidade_proporcional_w::text, '') = '') then
			if (ie_calc_primeira_mens_w = 'P') then
				ie_mensalidade_proporcional_w	:= 'S';
			else
				ie_mensalidade_proporcional_w	:= 'N';
			end if;

			begin
			update	pls_segurado
			set	ie_mensalidade_proporcional	= ie_mensalidade_proporcional_w
			where	nr_sequencia = nr_seq_segurado_w;
			exception
			when others then
				null;
			end;
		end if;

		begin
		select	nm_tabela,
			ie_preco_vidas_contrato,
			coalesce(ie_calculo_vidas,'A'),
			tx_adaptacao
		into STRICT	nm_tabela_w,
			ie_preco_vidas_contrato_w,
			ie_calculo_vidas_w,
			tx_adaptacao_w
		from	pls_tabela_preco
		where	nr_sequencia	= nr_seq_tabela_w;
		exception
		when others then
			nm_tabela_w	:= '';
			ie_preco_vidas_contrato_w := null;
			ie_calculo_vidas_w	:= null;
		end;

		ds_observacao_w	:= 'Valor gerado de acordo com a tabela de preço "'||nr_seq_tabela_w||' - '||nm_tabela_w||'", do produto "'||nr_seq_plano_w||' - '||ds_plano_w||'".';

		--Verifica se o estipulante é uma PF ou PJ
		select	CASE WHEN coalesce(cd_pf_estipulante_w::text, '') = '' THEN  'PJ'  ELSE 'PF' END
		into STRICT	ie_tipo_contrato_w
		;

		if (ie_tipo_pagador_w in ('N','S')) then
			select	dt_contrato,
				dt_ultima_mens_gerada
			into STRICT	dt_contrato_w,
				dt_ultima_mens_gerada_w
			from	pls_contrato
			where	nr_sequencia	= nr_seq_contrato_w;

			nr_parcela_contrato_w	:= (trunc(months_between(trunc(dt_mesano_referencia_p,'month'),trunc(dt_contrato_w,'month'))) + 1);
		elsif (ie_tipo_pagador_w = 'I') then
			select	dt_inclusao,
				add_months(dt_mesano_referencia_p,-1)
			into STRICT	dt_contrato_w,
				dt_ultima_mens_gerada_w
			from	pls_intercambio
			where	nr_sequencia	= nr_seq_intercambio_w;

			nr_parcela_contrato_w	:= (trunc(months_between(trunc(dt_mesano_referencia_p,'month'),trunc(dt_contrato_w,'month'))) + 1);
		end if;

		--Tratamento para limitar as mensalidades quando a geração for para vários meses
		if (ie_tipo_pagador_w <> 'I') then
			select	count(1)
			into STRICT	qt_regra_mens_futura_w
			
			where	exists (SELECT	1
					from	pls_regra_mens_contrato
					where	nr_seq_contrato	= nr_seq_contrato_w
					and	ie_tipo_regra		= 'F'
					and	coalesce(qt_interv_mes_mensalidade,0) <> 0);
		else
			select	count(1)
			into STRICT	qt_regra_mens_futura_w
			
			where	exists (SELECT	1
					from	pls_regra_mens_contrato
					where	nr_seq_intercambio	= nr_seq_intercambio_w
					and	ie_tipo_regra		= 'F'
					and	coalesce(qt_interv_mes_mensalidade,0) <> 0);
		end if;

		if (coalesce(qt_regra_mens_futura_w,0) = 0) then
			if (ie_tipo_contrato_w = 'PF') then
				if (pls_store_data_mens_pck.get_nr_seq_regra_contr_vm_pf IS NOT NULL AND pls_store_data_mens_pck.get_nr_seq_regra_contr_vm_pf::text <> '') then
					qt_regra_mens_futura_w	:= 1;
				else
					qt_regra_mens_futura_w	:= 0;
				end if;
			elsif (ie_tipo_contrato_w = 'PJ') then
				if (pls_store_data_mens_pck.get_nr_seq_regra_contr_vm_pj IS NOT NULL AND pls_store_data_mens_pck.get_nr_seq_regra_contr_vm_pj::text <> '') then
					qt_regra_mens_futura_w	:= 1;
				else
					qt_regra_mens_futura_w	:= 0;
				end if;
			end if;
		end if;

		ie_gerar_mensalidade_w	:= 'S';
		ie_coparticipacao_w	:= 'S';

		if (ie_gerar_mensalidade_p = 'N') and (qt_regra_mens_futura_w	> 0) then
			if (trunc(dt_mesano_referencia_p,'month') <= trunc(dt_ultima_mens_gerada_w,'month')) then
				ie_gerar_mensalidade_w	:= 'S';
				ie_coparticipacao_w	:= 'S';
			else
				ie_gerar_mensalidade_w	:= 'N';
				ie_coparticipacao_w	:= 'N';
			end if;
		end if;

		if (coalesce(ie_mes_cobranca_reaj_cont_w,'R') = 'R') then --Se no contrato estiver "Conforme regra", pega pela regulamentação
			if (ie_regulamentacao_w = 'R') then
				ie_mes_cobranca_reajuste_w	:= pls_store_data_mens_pck.get_ie_mes_cobranca_reaj;
			else
				ie_mes_cobranca_reajuste_w	:= pls_store_data_mens_pck.get_ie_mes_cobranca_reaj_reg;
			end if;
		else
			ie_mes_cobranca_reajuste_w	:= ie_mes_cobranca_reaj_cont_w;
		end if;

		nr_seq_segurado_preco_aux_w	:= null;

		--Verifica se tem reajuste de faixa etária no mês anterior
		if (ie_mes_cobranca_reajuste_w = 'P') and (to_char(add_months(dt_nascimento_w,1),'mm') = to_char(dt_mesano_referencia_w,'mm')) then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_segurado_preco_aux_w
			from	pls_segurado_preco	a
			where	a.nr_seq_segurado	= nr_seq_segurado_w
			and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
			and	coalesce(a.ie_situacao,'A')	= 'A'
			and	add_months(a.dt_reajuste,1) between dt_mesano_referencia_w and last_day(dt_mesano_referencia_w) + .99999
			and	a.cd_motivo_reajuste	= 'E';
		end if;

		--Verifica o preço a ser cobrado do beneficiário
		select	max(a.nr_sequencia)
		into STRICT	nr_seq_segurado_preco_w
		from	pls_segurado_preco	a
		where	a.nr_seq_segurado	= nr_seq_segurado_w
		and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
		and	coalesce(a.ie_situacao,'A')	= 'A'
		and	((((a.dt_reajuste between dt_mesano_referencia_w and dt_final_ww) or dt_mesano_referencia_w > a.dt_reajuste) and
			((a.cd_motivo_reajuste	<> 'E') or (ie_mes_cobranca_reajuste_w = 'M'))) or
			(((a.cd_motivo_reajuste	= 'E') and (dt_mesano_referencia_w >= trunc(add_months(a.dt_reajuste,1), 'month'))) and (ie_mes_cobranca_reajuste_w = 'P')));

		nr_parcela_segurado_w	:= pls_obter_parcela_segurado(nr_seq_segurado_w,dt_mesano_referencia_w,dt_mesano_referencia_w);

		--Obter a data de cobertura da mensalidade do beneficiário
		if (nr_parcela_segurado_w = 1) then
			dt_inicio_cobertura_w	:= dt_contratacao_w;

			if (ie_calc_primeira_mens_w = 'P') then
				dt_fim_cobertura_w	:= last_day(dt_contratacao_w);
			elsif (ie_calc_primeira_mens_w = 'I') then
				dt_fim_cobertura_w	:= add_months(dt_contratacao_w,1)-1;
			end if;

			if (dt_rescisao_w < dt_fim_cobertura_w) and (pls_obter_se_rescisao_proporc(nr_seq_contrato_w, nr_seq_intercambio_w, ie_tipo_contrato_w, dt_mesano_referencia_w, cd_estabelecimento_p) = 'S') then
				dt_fim_cobertura_w	:= dt_rescisao_w;
			end if;
		elsif (nr_parcela_segurado_w > 1) then
			if (ie_mensalidade_proporcional_w = 'S') then
				dt_inicio_cobertura_w	:= trunc(dt_mesano_referencia_w,'month');
				dt_fim_cobertura_w	:= last_day(dt_mesano_referencia_w);
			else
				begin
				dt_inicio_cobertura_w	:= to_date(to_char(dt_contratacao_w,'dd') || '/'|| to_char(dt_mesano_referencia_w,'mm/yyyy'));
				exception
				when others then
					dt_inicio_cobertura_w	:= last_day(dt_mesano_referencia_w);
				end;

				dt_fim_cobertura_w	:= add_months(dt_inicio_cobertura_w,1)-1;
			end if;
		end if;

		--Se existir preço gerado para o beneficiário, pega informações de preço
		if (coalesce(nr_seq_segurado_preco_w,0) > 0) then
			select	coalesce(vl_preco_atual,0) - coalesce(vl_desconto,0),
				qt_idade,
				nr_seq_reajuste,
				coalesce(vl_preco_nao_subsid_desc,0),
				nr_seq_lote_reajuste,
				nr_seq_preco,
				cd_motivo_reajuste,
				vl_adaptacao
			into STRICT	vl_preco_atual_w,
				qt_idade_w,
				nr_seq_reajuste_w,
				vl_preco_nao_subsid_desc_w,
				nr_seq_lote_reajuste_w,
				nr_seq_preco_w,
				cd_motivo_reajuste_w,
				vl_adaptacao_w
			from	pls_segurado_preco
			where	nr_sequencia	= nr_seq_segurado_preco_w;

			if	((coalesce(nr_seq_reajuste_w,0) = 0) and (cd_motivo_reajuste_w not in ('I', 'A','P'))) then
				select	max(a.nr_seq_reajuste)
				into STRICT	nr_seq_reajuste_w
				from	pls_segurado_preco	a
				where	a.nr_seq_segurado	= nr_seq_segurado_w
				and	a.dt_reajuste		<= dt_mesano_referencia_w
				and	a.nr_seq_tabela		= nr_seq_tabela_w
				and	coalesce(a.ie_situacao,'A')	= 'A';
			end if;

			if (coalesce(nr_seq_lote_reajuste_w,0) = 0) and (coalesce(nr_seq_reajuste_w,0) <> 0) then
				select	max(nr_seq_reajuste)
				into STRICT	nr_seq_lote_reajuste_w
				from	pls_reajuste_preco
				where	nr_sequencia	= nr_seq_reajuste_w;
			end if;

			--Lepinski - Reajustar faixa etária e gravar na PLS_SEGURADO_PRECO
			if (pls_store_data_mens_pck.get_ie_reajuste_faixa_etaria = 'S') and
				((ie_geracao_valores_w = 'T' and coalesce(nr_seq_titular_w::text, '') = '')
				or (ie_geracao_valores_w = 'D' and (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> ''))
				or (ie_geracao_valores_w = 'B')) and (qt_idade_atual_w <> qt_idade_w) then

				if (ie_regulamentacao_w = 'A') then
					if (pls_store_data_mens_pck.get_ie_data_ref_reaj_adaptado = 'A') then
						dt_base_inclusao_w	:= dt_contratacao_w;
					elsif (pls_store_data_mens_pck.get_ie_data_ref_reaj_adaptado = 'D') then
						select	max(nr_sequencia)
						into STRICT	nr_seq_mtvo_alteracao_w
						from	pls_motivo_alteracao_plano
						where	cd_ans	= '12';

						select	max(dt_alteracao)
						into STRICT	dt_adaptacao_w
						from	pls_segurado_alt_plano
						where	nr_seq_segurado		= nr_seq_segurado_p
						and	nr_seq_motivo_alt	= nr_seq_mtvo_alteracao_w;

						dt_base_inclusao_w	:= coalesce(dt_adaptacao_w,dt_inclusao_operadora_w);
					else
						dt_base_inclusao_w	:= dt_inclusao_operadora_w;
					end if;
				else
					dt_base_inclusao_w	:= dt_inclusao_operadora_w;
				end if;

				if (coalesce(qt_idade_limite_reaj_benef_w,0) > 0) or (coalesce(qt_anos_limite_reaj_benef_w,0) > 0) then
					qt_idade_limite_reaj_w	:= coalesce(qt_idade_limite_reaj_benef_w,0);
					qt_anos_limite_reaj_w	:= coalesce(qt_anos_limite_reaj_benef_w,0);
				elsif (coalesce(pls_store_data_mens_pck.get_qt_idade_limite_reaj_contr,0) > 0) or (coalesce(pls_store_data_mens_pck.get_qt_anos_limite_reaj_contr,0) > 0) then
					qt_idade_limite_reaj_w	:= coalesce(pls_store_data_mens_pck.get_qt_idade_limite_reaj_contr,0);
					qt_anos_limite_reaj_w	:= coalesce(pls_store_data_mens_pck.get_qt_anos_limite_reaj_contr,0);
				elsif (coalesce(pls_store_data_mens_pck.get_qt_idade_limite,0) > 0) or (coalesce(pls_store_data_mens_pck.get_qt_tempo_limite,0) > 0) then
					qt_idade_limite_reaj_w	:= coalesce(pls_store_data_mens_pck.get_qt_idade_limite,0);
					qt_anos_limite_reaj_w	:= coalesce(pls_store_data_mens_pck.get_qt_tempo_limite,0);
				else
					/* Se nenhum campo de idade e anos limite for preenchido o sistema sempre realiza o reajuste de mudança de faixa etária */

					qt_idade_limite_reaj_w	:= 999;
					qt_anos_limite_reaj_w	:= 999;
				end if;

				qt_idade_operadora_w	:= trunc(months_between(dt_mesano_referencia_w, dt_base_inclusao_w) / 12);

				ie_grau_parentesco_w	:= coalesce(pls_obter_garu_dependencia_seg(nr_seq_segurado_w,'C'),'X');

				select	max(qt_idade_inicial)
				into STRICT	qt_idade_inicial_w
				from	pls_plano_preco
				where	nr_seq_tabela		= nr_seq_tabela_w
				and	qt_idade_atual_w	>= qt_idade_inicial
				and	qt_idade_atual_w	<= qt_idade_final
				and	((ie_grau_titularidade = ie_grau_parentesco_w) or (coalesce(ie_grau_titularidade::text, '') = ''));

				if (qt_idade_atual_w > 999) or (qt_idade_atual_w < 0) then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w, nr_seq_mensalidade_p,
					'O beneficiário possuí '||qt_idade_atual_w|| ' anos. Favor verificar e corrigir a data de nascimento.', cd_estabelecimento_p,nm_usuario_p);
				elsif	((qt_idade_inicial_w >= qt_idade_limite_reaj_w) and (qt_idade_atual_w >= qt_idade_limite_reaj_w) and (qt_idade_operadora_w >= qt_anos_limite_reaj_w) and
					 ((ie_regulamentacao_w <> 'R') or (ie_regulamentacao_w = 'R' and pls_store_data_mens_pck.get_ie_reaj_idade_limite_pre = 'S'))) then
					null; -- Não reajusta o preço porque o beneficiário atingiu a idade limite para reajuste.
				else
					dt_aniversario_w	:= add_months(dt_nascimento_w,qt_idade_atual_w*12);

					if (ie_preco_vidas_contrato_w = 'S') then
						if (ie_calculo_vidas_w = 'A') then
							select	count(1)
							into STRICT	qt_vidas_w
							from	pls_segurado
							where	nr_seq_contrato = nr_seq_contrato_w
							and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
							and	((coalesce(dt_rescisao::text, '') = '') or (trunc(dt_rescisao,'month') >= dt_mesano_referencia_w));
						elsif (ie_calculo_vidas_w = 'T') then
							select	count(1)
							into STRICT	qt_vidas_w
							from	pls_segurado
							where	nr_seq_contrato = nr_seq_contrato_w
							and	coalesce(nr_seq_titular::text, '') = ''
							and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
							and	((coalesce(dt_rescisao::text, '') = '') or (trunc(dt_rescisao,'month') >= dt_mesano_referencia_w));
						elsif (ie_calculo_vidas_w = 'D') then
							select	count(1)
							into STRICT	qt_vidas_w
							from	pls_segurado
							where	nr_seq_contrato = nr_seq_contrato_w
							and	(nr_seq_titular IS NOT NULL AND nr_seq_titular::text <> '')
							and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
							and	((coalesce(dt_rescisao::text, '') = '') or (trunc(dt_rescisao,'month') >= dt_mesano_referencia_w));
						elsif (ie_calculo_vidas_w = 'TD') then
							select	count(1)
							into STRICT	qt_vidas_w
							from	pls_segurado a
							where	a.nr_seq_contrato = nr_seq_contrato_w
							and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
							and	((coalesce(a.dt_rescisao::text, '') = '') or (trunc(dt_rescisao,'month') >= dt_mesano_referencia_w))
							and	((coalesce(nr_seq_titular::text, '') = '') or ((nr_seq_titular IS NOT NULL AND nr_seq_titular::text <> '') and ((SELECT	count(1)
																from	grau_parentesco x
																where	x.nr_sequencia = a.nr_seq_parentesco
																and	x.ie_tipo_parentesco = '1') > 0)));
						elsif (ie_calculo_vidas_w = 'F') then
							qt_vidas_w	:= coalesce(pls_obter_qt_familia_benef(nr_seq_segurado_w,nr_seq_titular_w,'L',dt_mesano_referencia_w),0);
						else
							qt_vidas_w	:= 0;
						end if;
					else
						qt_vidas_w	:= 0;
					end if;

					vl_preco_ant_w	:= vl_preco_atual_w;

					select	count(1)
					into STRICT	qt_reaj_fx_gerado_w
					
					where	exists (SELECT	1
							from	pls_segurado_preco	a
							where	a.nr_seq_segurado	= nr_seq_segurado_w
							and	a.cd_motivo_reajuste	= 'E'
							and	a.dt_reajuste		= trunc(dt_aniversario_w,'month')
							and	a.nr_seq_tabela		= nr_seq_tabela_w
							and	a.ie_situacao 		= 'A');

					if (qt_reaj_fx_gerado_w = 0) then
						nr_seq_preco_atual_w 		:= null;
						vl_preco_inicial_fx_w 		:= null;
						vl_preco_atual_fx_w		:= null;
						vl_preco_nao_subsid_desc_fx_w	:= null;
						vl_adaptacao_fx_w		:= null;
						vl_minimo_fx_w			:= null;
						tx_acrescimo_w			:= null;

						open C04;
						loop
						fetch C04 into
							nr_seq_preco_atual_w,
							vl_preco_inicial_fx_w,
							vl_preco_atual_fx_w,
							vl_preco_nao_subsid_desc_fx_w,
							vl_adaptacao_fx_w,
							vl_minimo_fx_w,
							tx_acrescimo_w;
						EXIT WHEN NOT FOUND; /* apply on C04 */
						end loop;
						close C04;

						ie_gerar_fx_w	:= 'S';

						select	max(nr_sequencia)
						into STRICT	nr_seq_reaj_preco_w
						from	pls_reajuste_preco
						where	nr_seq_preco = nr_seq_preco_atual_w
						and	pr_reajustado > 0
						and	dt_reajuste  <= dt_mesano_referencia_w;

						select	max(vl_reajustado)
						into STRICT	vl_reajuste_fx_w
						from	pls_reajuste_preco
						where	nr_sequencia = nr_seq_reaj_preco_w;

						if (nr_seq_reaj_preco_w IS NOT NULL AND nr_seq_reaj_preco_w::text <> '') then
							vl_preco_atual_fx_w := vl_reajuste_fx_w;
						else
							select	max(nr_sequencia)
							into STRICT	nr_seq_reajuste_preco_w
							from	pls_reajuste_preco
							where	nr_seq_preco = nr_seq_preco_atual_w
							and	pr_reajustado > 0;

							select	max(vl_base)
							into STRICT	vl_base_w
							from	pls_reajuste_preco
							where	nr_sequencia = nr_seq_reajuste_preco_w
							and	pr_reajustado > 0;

							if (vl_base_w IS NOT NULL AND vl_base_w::text <> '') then
								vl_preco_atual_fx_w := vl_base_w;
							end if;
						end if;

						if (nr_seq_preco_w IS NOT NULL AND nr_seq_preco_w::text <> '') then
							select	coalesce(ie_grau_titularidade,'0')
							into STRICT	ie_grau_titularidade_ant_w
							from	pls_plano_preco
							where	nr_sequencia = nr_seq_preco_w;

							if (nr_seq_preco_atual_w IS NOT NULL AND nr_seq_preco_atual_w::text <> '') then
								select	coalesce(ie_grau_titularidade,'0')
								into STRICT	ie_grau_titularidade_atual_w
								from	pls_plano_preco
								where	nr_sequencia = nr_seq_preco_atual_w;

								if (ie_grau_titularidade_atual_w <> ie_grau_titularidade_ant_w) then
									ie_gerar_fx_w	:= 'N';
								else
									ie_gerar_fx_w	:= 'S';
								end if;
							end if;
						end if;

						if	(nr_seq_preco_atual_w <> nr_seq_preco_w AND ie_gerar_fx_w = 'S') then
							SELECT * FROM pls_obter_regra_desconto(nr_seq_segurado_w, 1, cd_estabelecimento_p, tx_desconto_w, nr_seq_regra_desconto_w) INTO STRICT tx_desconto_w, nr_seq_regra_desconto_w;
							if (coalesce(tx_desconto_w,0) <> 0) then
								vl_desconto_w		:= coalesce((coalesce(tx_desconto_w,0) * (coalesce(vl_preco_atual_fx_w,0) / 100)),0);
								vl_preco_atual_w	:= vl_preco_atual_w - vl_desconto_w;
							else
								vl_desconto_w		:= 0;
							end if;
							select	max(a.nr_sequencia)
							into STRICT	nr_seq_processo_reaj_w
							from	pls_processo_judicial_reaj	a,
								processo_judicial_liminar	b
							where	a.nr_seq_processo		= b.nr_sequencia
							and	((b.nr_seq_segurado	= nr_seq_segurado_w) or (coalesce(b.nr_seq_segurado::text, '') = ''))
							and	((b.nr_seq_contrato	= nr_seq_contrato_w) or (coalesce(b.nr_seq_contrato::text, '') = ''))
							and	b.ie_estagio			= 2
							and	a.ie_impedir_reaj_fx_etaria	= 'S'
							and	dt_aniversario_w	>= coalesce(b.dt_inicio_validade,dt_aniversario_w) --data do processo
							and	dt_aniversario_w	<= coalesce(b.dt_fim_validade,dt_aniversario_w)
							and	dt_aniversario_w	>= coalesce(a.dt_inicio_vigencia,dt_aniversario_w) --data regra
							and	dt_aniversario_w	<= coalesce(a.dt_fim_vigencia,dt_aniversario_w);

							ie_situacao_preco_w		:= 'A';
							if (coalesce(nr_seq_processo_reaj_w,0) <> 0) then
								ie_situacao_preco_w	:= 'I';

								select	max(nr_seq_processo)
								into STRICT	nr_seq_processo_w
								from	pls_processo_judicial_reaj
								where	nr_sequencia	= nr_seq_processo_reaj_w;
							end if;

							select	nextval('pls_segurado_preco_seq')
							into STRICT	nr_seq_segurado_preco_fx_w
							;

							begin
							insert	into	pls_segurado_preco(	nr_sequencia, dt_reajuste, nr_seq_segurado,
									vl_preco_atual, qt_idade, cd_motivo_reajuste,
									dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
									tx_reajuste, vl_reajuste, vl_preco_ant,
									ds_observacao, nr_seq_preco, dt_liberacao,
									nm_usuario_liberacao, vl_desconto, nr_seq_regra,
									vl_preco_nao_subsid_desc, nr_seq_tabela, vl_minimo_mensalidade,
									vl_adaptacao, nr_seq_processo, ie_situacao,
									nr_seq_processo_reaj, dt_aniversario, dt_referencia_mensalidade,
									dt_geracao_reajuste)
								values (	nr_seq_segurado_preco_fx_w, trunc(dt_aniversario_w,'month'), nr_seq_segurado_w,
									vl_preco_atual_fx_w, qt_idade_atual_w, 'E',
									clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
									0, (vl_preco_atual_fx_w - vl_preco_atual_w), vl_preco_ant_w,
									round((tx_acrescimo_w)::numeric,2) || '% de reajuste da faixa etária do beneficiário', nr_seq_preco_atual_w, clock_timestamp(),
									nm_usuario_p, vl_desconto_w, nr_seq_regra_desconto_w,
									vl_preco_nao_subsid_desc_fx_w, nr_seq_tabela_w, vl_minimo_fx_w,
									vl_adaptacao_fx_w, nr_seq_processo_w, ie_situacao_preco_w,
									nr_seq_processo_reaj_w, dt_aniversario_w, dt_mesano_referencia_w,
									clock_timestamp());
							exception
							when others then
								CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w, nr_seq_mensalidade_p,
								'Ocorreu um problema ao gerar o reajuste por faixa etária para o beneficiário. Verifique a tabela de preço.', cd_estabelecimento_p,nm_usuario_p);
							end;

							qt_interv_aniver_ref_w	:= months_between(dt_mesano_referencia_w,trunc(dt_aniversario_w,'month'));

							if	not(ie_mes_cobranca_reajuste_w = 'P' AND qt_interv_aniver_ref_w = 0) then --Lepinski - Stefanie - OS 469976 -  Se o mês  de cobrança do reajuste for no mês  posterior ao aniversário,  e o intervalo entre a data do contrato (aniverário) e a data de referência do lote de mensalidade for nula,  o reajuste não será aplicado.
								nr_seq_segurado_preco_w	:= nr_seq_segurado_preco_fx_w;
								nr_seq_segurado_preco_aux_w := null;
								vl_preco_atual_w	:= vl_preco_atual_fx_w - coalesce(vl_desconto_w,0);
								qt_idade_w		:= qt_idade_atual_w;
								vl_preco_nao_subsid_desc_w	:= coalesce(vl_preco_nao_subsid_desc_fx_w,0);

								nr_seq_preco_w		:= nr_seq_preco_atual_w;
								cd_motivo_reajuste_w	:= 'E';
								vl_adaptacao_w		:= coalesce(vl_adaptacao_fx_w,0);
								ie_reajuste_fx_mens_w	:= 'S';
							end if;

							select	count(1)
							into STRICT	qt_registro_w
							
							where	exists (SELECT	1
									from	pls_segurado_preco
									where	nr_seq_segurado	= nr_seq_segurado_w
									and	trunc(dt_reajuste,'Month') >  dt_mesano_referencia_w
									and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
									and	cd_motivo_reajuste	= 'I');

							--aaschlote 09/10/2013 OS - 655412 - Caso possuir reajuste futuro, então recalcular esses reajustes
							if (qt_registro_w	> 0) then
								for r_c05_w in C05 loop
									begin
									if (trunc(r_c05_w.dt_reajuste, 'mm') > dt_mesano_referencia_w) then
										CALL pls_recalcular_preco_benef(nr_seq_segurado_w,'I','S',r_c05_w.dt_reajuste,'N',nm_usuario_p,cd_estabelecimento_p);

										update	pls_segurado_preco
										set	ie_situacao	= 'I',
											nm_usuario	= nm_usuario_p,
											ds_observacao	= substr(ds_observacao || ' - Desativado ao incluir um novo índice de reajuste futuro',0,255)
										where	nr_sequencia	= r_c05_w.nr_seq_seg_preco;

										select	max(nr_sequencia)
										into STRICT	nr_seq_seg_preco_ajust_w
										from	pls_segurado_preco
										where	nr_seq_segurado	= nr_seq_segurado_w
										and	ie_situacao	= 'A';

										if (nr_seq_seg_preco_ajust_w IS NOT NULL AND nr_seq_seg_preco_ajust_w::text <> '') then
											update	pls_segurado_preco
											set	dt_referencia_mensalidade	= dt_mesano_referencia_w,
												dt_geracao_reajuste		= clock_timestamp(),
												ds_observacao			= substr(r_c05_w.ds_observacao || ' - Ajuste de preço ao gerar o reajuste de faixa etária automático',0,255)
											where	nr_sequencia			= nr_seq_seg_preco_ajust_w;
										end if;
									end if;
									end;
								end loop;
							end if;
						end if;
					end if;
				end if;
			end if;

			select	count(1)
			into STRICT	qt_repasse_mes_w
			
			where	exists (SELECT	/*+ CHOOSE*/						1
					from	pls_segurado_repasse
					where	nr_seq_segurado	= nr_seq_segurado_w
					and	((dt_mesano_referencia_w between dt_repasse and (coalesce(dt_fim_repasse,dt_mesano_referencia_w) + 86399/86400)) or
						coalesce(dt_repasse::text, '') = ''));

			--Se tiver reajuste por faixa etária no mês anterior
			if (nr_seq_segurado_preco_aux_w IS NOT NULL AND nr_seq_segurado_preco_aux_w::text <> '') and (nr_seq_segurado_preco_aux_w <> nr_seq_segurado_preco_w) and (coalesce(vl_reajuste_faixa_etaria_w,0) = 0)then
				cd_motivo_reajuste_w	:= 'E';
				ie_reajuste_fx_mens_w	:= 'S';
			end if;

			--Rotina para cálculo dos contratos que possuem data limite para movimentação
			if (coalesce(nr_seq_contrato_w,0) <> 0) then
				select	count(1)
				into STRICT	qt_regra_mens_limite_w
				
				where	exists (SELECT	/*+ CHOOSE */							1
						from	pls_regra_mens_contrato	a
						where	a.nr_seq_contrato	= nr_seq_contrato_w
						and	a.ie_tipo_regra		= 'L'
						and (a.dt_limite_movimentacao <> 0 or coalesce(a.dt_limite_movimentacao::text, '') = '')
						and	dt_mesano_referencia_w between trunc(a.dt_inicio_vigencia,'dd') and trunc(coalesce(a.dt_fim_vigencia,dt_mesano_referencia_w),'dd'));
			elsif (coalesce(nr_seq_intercambio_w,0) <> 0) then
				select	count(1)
				into STRICT	qt_regra_mens_limite_w
				
				where	exists (SELECT	/*+ CHOOSE */							1
						from	pls_regra_mens_contrato	a
						where	a.nr_seq_intercambio	= nr_seq_intercambio_w
						and	a.ie_tipo_regra		= 'L'
						and (a.dt_limite_movimentacao <> 0 or coalesce(a.dt_limite_movimentacao::text, '') = '')
						and	dt_mesano_referencia_w between trunc(a.dt_inicio_vigencia,'dd') and trunc(coalesce(a.dt_fim_vigencia,dt_mesano_referencia_w),'dd'));
			end if;

			if (coalesce(qt_regra_mens_limite_w,0) = 0) then
				select	count(1)
				into STRICT	qt_regra_mens_limite_w
				
				where	exists (SELECT	/*+ CHOOSE */							1
						from	pls_regra_mens_contrato
						where	coalesce(nr_seq_contrato::text, '') = ''
						and	coalesce(nr_seq_intercambio::text, '') = ''
						and	ie_tipo_regra		= 'L'
						and	cd_estabelecimento	= cd_estabelecimento_p
						and (dt_limite_movimentacao <> 0 or coalesce(dt_limite_movimentacao::text, '') = '')
						and	((coalesce(ie_pessoa_contrato,'A') = ie_tipo_contrato_w) or (ie_pessoa_contrato = 'A'))
						and	dt_mesano_referencia_w between trunc(dt_inicio_vigencia,'dd') and trunc(coalesce(dt_fim_vigencia,dt_mesano_referencia_w),'dd'));
			end if;

			if (dt_reativacao_w IS NOT NULL AND dt_reativacao_w::text <> '') then
				qt_meses_w	:= months_between(trunc(dt_mesano_referencia_w,'month'),trunc(dt_reativacao_w,'month'));
				nr_parcela_w	:= qt_meses_w + 1;

				if (nr_parcela_w < pls_store_data_mens_pck.get_qt_parcelas_meses_ant) then
					ie_gerar_limite_w := 'S';
				else
					ie_gerar_limite_w := 'N';
				end if;
			end if;

			--A parcela é somente a menor que a 4 nessa condição pois a quantidade máxima de gerações de mensalidades dessa rotina é 3, ou seja, após a terceira, as mensalidades são geradas normalmente
			if (ie_preco_w <> '2') and (qt_regra_mens_limite_w > 0) and
				((nr_parcela_segurado_w < pls_store_data_mens_pck.get_qt_parcelas_meses_ant) or (ie_tipo_mensalidade_p = 'MR') or (ie_gerar_limite_w = 'S')) then
				CALL pls_gerar_mensalidade_limite(nr_seq_segurado_w, nr_seq_mensalidade_p, nm_usuario_p, cd_estabelecimento_p);

				if (ie_mensalidade_proporcional_w = 'S') then
					if (nr_parcela_segurado_w > 1) then
						dt_inicio_cobertura_w    := trunc(dt_mesano_referencia_w,'month');
					end if;
					dt_fim_cobertura_w    := last_day(dt_mesano_referencia_w);
				else
					begin
					dt_inicio_cobertura_w    := to_date(to_char(dt_contratacao_w,'dd') || '/'|| to_char(dt_mesano_referencia_w,'mm/yyyy'));
					exception
					when others then
						dt_inicio_cobertura_w    := last_day(dt_mesano_referencia_w);
					end;

					dt_fim_cobertura_w    := add_months(dt_inicio_cobertura_w,1)-1;
				end if;
			end if;

			if	((qt_repasse_mes_w = 0) or (coalesce(nr_seq_tabela_repasse_w::text, '') = '')) then --Se o preço foi gerado a partir da tabela de repasse, não tem reajuste
				--Valor reajuste por faixa etária
				if (cd_motivo_reajuste_w = 'E') then
					if (ie_reajuste_fx_mens_w = 'N') then
						dt_aniversario_w	:= add_months(dt_nascimento_w,qt_idade_w*12);
						qt_interv_aniver_ref_w	:= months_between(dt_mesano_referencia_w,trunc(dt_aniversario_w,'month'));
						if	(ie_mes_cobranca_reajuste_w = 'P' AND qt_interv_aniver_ref_w = 1) or
							(ie_mes_cobranca_reajuste_w = 'M' AND qt_interv_aniver_ref_w = 0) then
							ie_reajuste_fx_mens_w	:= 'S';
						end if;
					end if;

					if (ie_reajuste_fx_mens_w = 'S') then
						begin
						select (vl_preco_atual - coalesce(vl_desconto,0)) - vl_preco_ant,
							nr_seq_lote,
							nr_seq_preco
						into STRICT	vl_reajuste_faixa_etaria_w,
							nr_seq_reajuste_fx_etaria_w,
							nr_seq_preco_reaj_w
						from	pls_segurado_preco
						where	nr_sequencia = coalesce(nr_seq_segurado_preco_aux_w,nr_seq_segurado_preco_w)
						and	cd_motivo_reajuste = 'E'
						and	nr_seq_segurado = nr_seq_segurado_w
						and	ie_situacao = 'A';
						exception
						when others then
							nr_seq_reajuste_fx_etaria_w	:= null;
							nr_seq_preco_reaj_w		:= null;
						end;

						--Busca o valor do reajuste por faixa etária do mês anterior
						if (nr_seq_segurado_preco_aux_w IS NOT NULL AND nr_seq_segurado_preco_aux_w::text <> '') and (nr_seq_segurado_preco_aux_w <> nr_seq_segurado_preco_w) and (coalesce(vl_reajuste_faixa_etaria_w,0) = 0)then
							select	coalesce(vl_preco_atual - vl_preco_ant, 0)
							into STRICT	vl_reajuste_faixa_etaria_w
							from	pls_segurado_preco
							where	nr_sequencia = nr_seq_segurado_preco_aux_w;
						end if;

						select	max(tx_acrescimo)
						into STRICT	tx_acrescimo_w
						from	pls_plano_preco
						where	nr_sequencia	= nr_seq_preco_reaj_w;

						ds_mensagem_reajuste_w	:= 'Percentual de reajuste '||tx_acrescimo_w||'%, devido a mudança de faixa etária.';

						if (coalesce(vl_reajuste_faixa_etaria_w,0) > 0) then
							vl_preco_atual_w	:= coalesce(vl_preco_atual_w,0) - coalesce(vl_reajuste_faixa_etaria_w,0);
						end if;
					end if;
				end if;

				CALL pls_store_data_mens_pck.set_nr_seq_segurado_preco(nr_seq_segurado_preco_w);
				CALL pls_store_data_mens_pck.calcular_vls_reajuste_indice(nr_seq_tabela_w,nr_seq_reajuste_w, nr_seq_segurado_w);
				vl_reajuste_indice_w := pls_store_data_mens_pck.get_vl_reajuste_indice;

				if (vl_reajuste_indice_w > 0) then
					vl_preco_atual_w	:= coalesce(vl_preco_atual_w,0) - coalesce(vl_reajuste_indice_w,0);
					nr_seq_reajuste_w 	:= pls_store_data_mens_pck.get_nr_seq_reajuste;
					ds_mensagem_reajuste_w  := pls_store_data_mens_pck.get_ds_mensagem_reajuste;
				end if;
			elsif	((qt_repasse_mes_w > 0) and (coalesce(nr_seq_tabela_repasse_w,0) <> 0)) then
				qt_idade_w	:= trunc(months_between(dt_mesano_referencia_w, dt_nascimento_w) / 12);

				if (qt_idade_w > 999) or (qt_idade_w < 0) then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w, nr_seq_mensalidade_p,
					'O beneficiário possuí '||qt_idade_w|| ' anos. Favor verificar e corrigir a data de nascimento.', cd_estabelecimento_p,nm_usuario_p);
				end if;

				begin
				select	vl_preco_atual,
					nr_sequencia
				into STRICT	vl_preco_atual_w,
					nr_seq_preco_w
				from	pls_plano_preco
				where	nr_seq_tabela	= nr_seq_tabela_repasse_w
				and	qt_idade_w between qt_idade_inicial and qt_idade_final;
				exception
				when others then
					ie_log_erro_w	:= 'S';
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w, nr_seq_mensalidade_p,
					'Não existe valor de faixa etária na tabela de repasse para esse beneficiário. Favor verificar!', cd_estabelecimento_p,nm_usuario_p);
				end;

				begin
				select	nm_tabela
				into STRICT	nm_tabela_repasse_w
				from	pls_tabela_preco
				where	nr_sequencia	= nr_seq_tabela_repasse_w;
				exception
				when others then
					nm_tabela_w	:= '';
				end;

				ds_observacao_w	:= 'Valor gerado de acordo com a tabela de preço "'||nr_seq_tabela_repasse_w||' - '||nm_tabela_repasse_w||'", para o beneficiário em repasse.';

				select	max(nr_sequencia)
				into STRICT	nr_seq_reaj_repasse_w
				from	pls_reajuste_preco
				where	nr_seq_preco	= nr_seq_preco_w
				and	trunc(dt_reajuste,'month') = dt_mesano_referencia_w;

				if (coalesce(nr_seq_reaj_repasse_w,0) <> 0) then
					select	vl_reajustado - vl_base
					into STRICT	vl_reajuste_indice_w
					from	pls_reajuste_preco
					where	nr_sequencia	= nr_seq_reaj_repasse_w;

					if (coalesce(vl_reajuste_indice_w,0) <> 0) then
						vl_preco_atual_w	:= vl_preco_atual_w - vl_reajuste_indice_w;

						select	max(b.tx_reajuste),
							max(b.dt_reajuste)
						into STRICT	tx_reajuste_w,
							dt_reajuste_w
						from	pls_reajuste_preco	a,
							pls_reajuste		b
						where	a.nr_seq_reajuste	= b.nr_sequencia
						and	a.nr_sequencia		= nr_seq_reaj_repasse_w;

						ds_mensagem_reajuste_w	:= 'Percentual de reajuste da tabela de repasse: '||tx_reajuste_w||'%, aplicado em '||to_char(dt_reajuste_w,'dd/mm/yyyy')||'.';
					end if;
				end if;
			end if;
		elsif (ie_preco_w in ('1','4')) then
			ie_log_erro_w	:= 'S';
			if	((ie_geracao_valores_w = 'T' and coalesce(nr_seq_titular_w::text, '') = '')
				or (ie_geracao_valores_w = 'D' and (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> ''))
				or (ie_geracao_valores_w = 'B')) then
				CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w, nr_seq_mensalidade_p,
						'Não foram gerados valores para o beneficiário na aprovação do contrato.', cd_estabelecimento_p,nm_usuario_p);
			end if;
		end if;

		/* Verificar somente se existem mensalidades dos tipos	1 = Pré-estabelecido
							6 = Preço pós-estabelecido por custo operacional
							7 = Preço pós-estabelecido por rateio
							8 = Preço misto
							12 = Preço pré-estabelecido não subsidiado (Dom 1930) */
		if	((ie_pag_complementar_w = 'S') or (ie_tipo_pagador_w = 'S')) then
			select	count(1)
			into STRICT	qt_reg_mensalidade_w
			from	pls_mensalidade_segurado b,
				pls_mensalidade_seg_item a,
				pls_mensalidade c
			where	b.nr_seq_segurado = nr_seq_segurado_w
			and	b.dt_mesano_referencia = dt_mesano_referencia_w
			and	a.nr_seq_mensalidade_seg = b.nr_sequencia
			and	a.ie_tipo_item in ('1', '6', '7', '8', '12')
			and	c.nr_sequencia = b.nr_seq_mensalidade
			and	c.nr_seq_pagador = nr_seq_pagador_w
			and	coalesce(c.ie_cancelamento::text, '') = '';
		else
			select	count(1)
			into STRICT	qt_reg_mensalidade_w
			from	pls_mensalidade_segurado b,
				pls_mensalidade_seg_item a,
				pls_mensalidade c
			where	b.nr_seq_segurado = nr_seq_segurado_w
			and	b.dt_mesano_referencia = dt_mesano_referencia_w
			and	a.nr_seq_mensalidade_seg = b.nr_sequencia
			and	a.ie_tipo_item in ('1', '6', '7', '8', '12')
			and	c.nr_sequencia = b.nr_seq_mensalidade
			and	coalesce(c.ie_cancelamento::text, '') = '';
		end if;

		--Verificar se possui coparticipação não gerada
		if (qt_reg_mensalidade_w <> 0) then
			if (coalesce(ie_existe_mens_w,'N') <> 'S') then
				ie_existe_mens_w	:= 'S';
			end if;
		end if;

		select	count(1)
		into STRICT	qt_seg_pagador_w
		from	pls_segurado_pagador a
		where	a.nr_seq_segurado 	= nr_seq_segurado_w
		and	a.nr_seq_pagador	= nr_seq_pagador_benef_w
		and 	a.dt_fim_vigencia 	< dt_final_w
		and	(a.dt_fim_vigencia IS NOT NULL AND a.dt_fim_vigencia::text <> '')
		and	not exists (SELECT	1
					from	pls_segurado_pagador b
					where	b.nr_seq_pagador = a.nr_seq_pagador
					and	b.nr_seq_segurado = a.nr_seq_segurado
					and	coalesce(b.dt_fim_vigencia::text, '') = '');

		if (qt_seg_pagador_w > 0 and ie_tipo_mensalidade_p <> 'MR') then
			ie_pagador_rescindido_w := 'S';
		else
			ie_pagador_rescindido_w := 'N';
		end if;

		if (ie_tipo_pagador_w <> 'I') then
			select	max(ie_mensalidade_mes_rescisao)
			into STRICT	ie_mensalidade_mes_rescisao_w
			from	pls_regra_mens_contrato	a
			where	a.nr_seq_contrato	= nr_seq_contrato_w
			and	a.ie_tipo_regra		= 'G'
			and	dt_mesano_referencia_w between trunc(a.dt_inicio_vigencia, 'dd') and trunc(coalesce(a.dt_fim_vigencia,dt_mesano_referencia_w), 'dd');
		else
			select	max(ie_mensalidade_mes_rescisao)
			into STRICT	ie_mensalidade_mes_rescisao_w
			from	pls_regra_mens_contrato	a
			where	a.nr_seq_intercambio	= nr_seq_intercambio_w
			and	a.ie_tipo_regra		= 'G'
			and	dt_mesano_referencia_w between trunc(a.dt_inicio_vigencia, 'dd') and trunc(coalesce(a.dt_fim_vigencia,dt_mesano_referencia_w), 'dd');
		end if;

		if (coalesce(ie_mensalidade_mes_rescisao_w::text, '') = '') then
			select	max(ie_mensalidade_mes_rescisao)
			into STRICT	ie_mensalidade_mes_rescisao_w
			from	pls_regra_mens_contrato
			where	coalesce(nr_seq_contrato::text, '') = ''
			and	coalesce(nr_seq_intercambio::text, '') = ''
			and	ie_tipo_regra		= 'G'
			and	cd_estabelecimento	= cd_estabelecimento_p
			and	dt_mesano_referencia_w between trunc(dt_inicio_vigencia, 'dd') and trunc(coalesce(dt_fim_vigencia,dt_mesano_referencia_w), 'dd')
			and	((ie_pessoa_contrato = ie_tipo_contrato_w) or (ie_pessoa_contrato = 'A'));
		end if;

		ie_mensalidade_mes_rescisao_w	:= coalesce(ie_mensalidade_mes_rescisao_w,'N');

		--Se não tiver mensalidade gerada no mês
		if (qt_reg_mensalidade_w = 0) and (ie_log_erro_w = 'N') and (ie_gerar_mensalidade_w	= 'S') then
			if (ie_pagador_rescindido_w = 'N')	then
				if (coalesce(ie_existe_mens_w,'N') <> 'S') then
					ie_existe_mens_w	:= 'N';
				end if;

				if (ie_preco_w <> '2') then
					if (coalesce(qt_idade_w::text, '') = '') then
						qt_idade_w	:= trunc(months_between(dt_mesano_referencia_w, dt_nascimento_w) / 12);

						if (qt_idade_w > 999) or (qt_idade_w < 0) then
							CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w, nr_seq_mensalidade_p,
							'O beneficiário possuí '||qt_idade_w|| ' anos. Favor verificar e corrigir a data de nascimento.', cd_estabelecimento_p,nm_usuario_p);
							goto final;
						end if;
					end if;

					--Insere o registro na tabela PLS_MENSALIDADE_SEGURADO
					CALL pls_store_data_mens_pck.insert_record_mensalidade(nm_usuario_p,nr_seq_segurado_w,nr_seq_mensalidade_p,qt_idade_w,
								dt_mesano_referencia_w,nr_parcela_segurado_w,nr_seq_plano_w,nr_seq_contrato_w,nr_parcela_contrato_w,
								nr_seq_reajuste_w,nr_seq_intercambio_w,nr_seq_segurado_preco_w,dt_inicio_cobertura_w,dt_fim_cobertura_w, nr_seq_titular_w,
								dt_rescisao_w,nr_seq_grau_parent_w,nr_seq_subestipulante_w,nr_seq_localizacao_benef_w);

					nr_seq_mensalidade_seg_w	:= pls_store_data_mens_pck.get_nr_seq_mensalidade_seg;
				end if;
				vl_mensalidade_w	:= coalesce(vl_preco_atual_w,0);

				is_calculou_rescisao_prop_w	:= 'N';
				--Calcular o valor proporcional da primeira mensalidade quando gerado pelo contrato
				if (nr_parcela_segurado_w = 1) and (ie_calc_primeira_mens_w = 'P') then

					if (coalesce(nr_seq_segurado_p,0) > 0) then
						nr_seq_segurado_w := nr_seq_segurado_p;
					end if;

					--Mês calendario adesão
					if (trunc(dt_rescisao_w,'mm') = trunc(dt_mesano_referencia_w,'mm')) and (pls_obter_se_rescisao_proporc(nr_seq_contrato_w, nr_seq_intercambio_w, ie_tipo_contrato_w, dt_mesano_referencia_w, cd_estabelecimento_p) = 'S') then
						dt_vencimento_mens_w	:= dt_rescisao_w;
						is_calculou_rescisao_prop_w	:= 'S';
					elsif (ie_calculo_proporcional_w	= 'A') then
						dt_vencimento_mens_w	:= last_day(dt_contratacao_w);
					else
						begin
						dt_vencimento_mens_w	:= to_date(to_char(pls_store_data_mens_pck.get_dt_dia_vencimento) || '/' || to_char(dt_contratacao_w,'mm/yyyy'));
						exception
						when others then
							dt_vencimento_mens_w	:= last_day(dt_contratacao_w);
						end;
					end if;

					if (dt_vencimento_mens_w < dt_contratacao_w) then
						dt_vencimento_mens_w	:= last_day(dt_vencimento_mens_w);
					end if;

					qt_dias_w	:= obter_dias_entre_datas(dt_contratacao_w,dt_vencimento_mens_w) + 1;
					if (pls_store_data_mens_pck.get_ie_data_base_proporcional = 'T') then
						dt_ultimo_dia_mes_w	:= 30;
						--Se o dia da contratação for o primeiro dia do mês, pega o valor total, (30 / 30 * valor)
						if (trunc(dt_contratacao_w,'dd') = trunc(dt_contratacao_w,'month')) then
							qt_dias_w		:= 30;
						end if;
					else
						dt_ultimo_dia_mes_w	:= to_char(last_day(dt_vencimento_mens_w),'dd');
					end if;

					tx_proporcional_1a_mens_w := (qt_dias_w/(dt_ultimo_dia_mes_w)::numeric );
					vl_mensalidade_w := (tx_proporcional_1a_mens_w * vl_mensalidade_w);
					vl_preco_nao_subsid_desc_w := (tx_proporcional_1a_mens_w * vl_preco_nao_subsid_desc_w);
					vl_reajuste_indice_w := tx_proporcional_1a_mens_w * vl_reajuste_indice_w;
				end if;

				ie_rescisao_proporcional_w	:= 'N';
				if (dt_rescisao_w IS NOT NULL AND dt_rescisao_w::text <> '') then
					begin
					dt_periodo_resc_inicial_w	:= to_char(dt_adesao_w,'dd') ||'/'|| to_char(dt_mesano_referencia_w,'mm/yyyy');
					exception
					when others then
						dt_periodo_resc_inicial_w	:= last_day(dt_mesano_referencia_w);
					end;

					--aaschlote 02/07/2012 - OS 456034 - Verificar se o pagador é proporcional a primeira mensalidade, caso for então paga conforme a sua data de rescisão, senão paga conforme sua data de adesão
					if	((((dt_rescisao_w > dt_periodo_resc_inicial_w) and (dt_rescisao_w < add_months(dt_periodo_resc_inicial_w,1))) or (ie_calc_primeira_mens_w = 'P')or (dt_rescisao_w < dt_periodo_resc_inicial_w)) and
						((trunc(dt_rescisao_w,'mm') = trunc(dt_mesano_referencia_w,'mm')) or
						((trunc(dt_rescisao_w, 'mm') = trunc(add_months(dt_mesano_referencia_w, 1),'mm')) and (ie_calc_primeira_mens_w = 'I')))) and (is_calculou_rescisao_prop_w = 'N') then

						ie_rescisao_proporcional_w := pls_obter_se_rescisao_proporc(nr_seq_contrato_w, nr_seq_intercambio_w, ie_tipo_contrato_w, dt_mesano_referencia_w, cd_estabelecimento_p);
						--Lepinski - OS 412665  Gerar a última mensalidade proporcional
						if (ie_rescisao_proporcional_w = 'S') then
							if (dt_rescisao_w > dt_periodo_resc_inicial_w) and (dt_rescisao_w < add_months(dt_periodo_resc_inicial_w,1)) and (ie_calc_primeira_mens_w = 'I') then

								--aaschlote 31/07/2012 - Criei essa variavel auxiliar para não ter problemas com os dias dos meses
								begin
								dt_montar_data_aux_w	:= to_date(to_char(dt_contratacao_w,'dd')||'/'||to_char(dt_mesano_referencia_w,'mm/yyyy'),'dd/mm/yyyy');
								exception
								when others then
									dt_montar_data_aux_w	:= last_day(dt_mesano_referencia_w);
								end;
								qt_dias_w	:= obter_dias_entre_datas(dt_montar_data_aux_w,dt_rescisao_w) + 1;
							elsif (ie_calc_primeira_mens_w = 'P') and (trunc(dt_rescisao_w,'mm') = trunc(dt_mesano_referencia_w,'mm')) then
								qt_dias_w	:= obter_dias_entre_datas(dt_mesano_referencia_w,dt_rescisao_w)+1;
							elsif (dt_rescisao_w < dt_periodo_resc_inicial_w) then
								qt_dias_w	:= 0;
							elsif	(dt_rescisao_w > (add_months(dt_periodo_resc_inicial_w,1)-1)) then
								qt_dias_w	:= -1;
							end if;

							if (qt_dias_w >= 0) then
								if (pls_store_data_mens_pck.get_ie_data_base_proporcional = 'T') then
									dt_ultimo_dia_mes_w	:= 30;
								else
									dt_ultimo_dia_mes_w	:= to_char(last_day(dt_mesano_referencia_w),'dd');
								end if;

								tx_proporcional_rescisao_w := (qt_dias_w/(dt_ultimo_dia_mes_w)::numeric );

								vl_mensalidade_w := (tx_proporcional_rescisao_w * vl_mensalidade_w);
								vl_preco_nao_subsid_desc_w := (tx_proporcional_rescisao_w * vl_preco_nao_subsid_desc_w);
								vl_reajuste_faixa_etaria_w := (tx_proporcional_rescisao_w * vl_reajuste_faixa_etaria_w);
								vl_reajuste_indice_w := (tx_proporcional_rescisao_w * vl_reajuste_indice_w);

								update	pls_mensalidade_segurado
								set	dt_fim_cobertura	= dt_rescisao_w
								where	nr_sequencia		= nr_seq_mensalidade_seg_w;
							end if;
						end if;
					end if;
				end if;

				CALL pls_store_data_mens_pck.set_ie_rescisao_proporcional(ie_rescisao_proporcional_w);

				--Se o beneficiário ou o contrato não estiverem rescindidos ou a data de rescisão for maior que o mês de geração da mensalidade então, gera a mensalidade
				if	((coalesce(dt_rescisao_w::text, '') = '') or 	(	(((ie_mensalidade_mes_rescisao_w = 'N') and (trunc(dt_rescisao_w,'month') > dt_mesano_referencia_w))  or
										((ie_mensalidade_mes_rescisao_w = 'S') and (trunc(dt_rescisao_w,'month') >= dt_mesano_referencia_w))) and (trunc(dt_rescisao_w,'dd') <> trunc(dt_adesao_w,'dd')) --OS 384170 - Não gerar mensalidade para beneficiário rescindido no mesmo dia da adesão
									)) then
					ie_gerar_mensalidade_w	:= 'S';
				else
					if (dt_rescisao_w IS NOT NULL AND dt_rescisao_w::text <> '') then
						ie_coparticipacao_w	:= 'S';
					else
						ie_coparticipacao_w	:= 'N';
					end if;
					ie_gerar_mensalidade_w	:= 'N';

					update	pls_mensalidade_segurado
					set	dt_inicio_cobertura	 = NULL,
						dt_fim_cobertura	 = NULL
					where	nr_sequencia		= nr_seq_mensalidade_seg_w;
				end if;

				--Obter valor da bonificação do beneficiario
				if (ie_gerar_mensalidade_w	= 'S') and (ie_tipo_pagador_w <> 'S') then
					if (ie_preco_w in ('1','4')) then
						if (vl_preco_nao_subsid_desc_w > 0) then
							vl_mensalidade_w	:= vl_mensalidade_w - vl_preco_nao_subsid_desc_w;

							if (vl_mensalidade_w	< 0) then
								vl_mensalidade_w	:= 0;
							end if;

							if (coalesce(pls_store_data_mens_pck.get_seq_pagador_subsid, nr_seq_pagador_benef_w) = nr_seq_pagador_w) then

								nr_seq_item_mensalidade_w := null;

								nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('12', nm_usuario_p, null, null, ds_observacao_w, null, null, null, null, 'N', null, null, null, null, null, null, null, nr_seq_mensalidade_seg_w, null, null, nr_seq_plano_w, null, null, null, null, null, null, null, null, null, null, vl_preco_nao_subsid_desc_w, nr_seq_item_mensalidade_w);

								if (nr_seq_item_mensalidade_w IS NOT NULL AND nr_seq_item_mensalidade_w::text <> '') then
									CALL pls_store_data_mens_pck.set_nr_seq_mens_item_pre(nr_seq_item_mensalidade_w);
									CALL pls_store_data_mens_pck.set_ds_observacao_item_pre(ds_observacao_w);
								end if;
							end if;
						end if;

						if (vl_mensalidade_w > 0) and (coalesce(pls_store_data_mens_pck.get_seq_pagador_preco_pre, nr_seq_pagador_benef_w) = nr_seq_pagador_w) then

							nr_seq_item_mensalidade_w := null;

							nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('1', nm_usuario_p, null, null, ds_observacao_w, null, null, null, ie_rescisao_proporcional_w, 'N', null, null, null, null, null, null, null, nr_seq_mensalidade_seg_w, null, null, nr_seq_plano_w, null, null, null, null, null, null, null, null, null, null, vl_mensalidade_w, nr_seq_item_mensalidade_w);

							if (nr_seq_item_mensalidade_w IS NOT NULL AND nr_seq_item_mensalidade_w::text <> '') then
								CALL pls_store_data_mens_pck.set_nr_seq_mens_item_pre(nr_seq_item_mensalidade_w);
								CALL pls_store_data_mens_pck.set_ds_observacao_item_pre(ds_observacao_w);

								CALL pls_inserir_apropriacao_preco('1', nr_seq_item_mensalidade_w, nr_seq_segurado_preco_w, vl_mensalidade_w,
											vl_reajuste_faixa_etaria_w + vl_reajuste_indice_w, tx_proporcional_1a_mens_w,
											tx_proporcional_rescisao_w, nm_usuario_p);
							end if;
						end if;

						if (coalesce(vl_reajuste_faixa_etaria_w,0) > 0) and (coalesce(pls_store_data_mens_pck.get_seq_pagador_fx_etaria, nr_seq_pagador_benef_w) = nr_seq_pagador_w) then

							nr_seq_item_mensalidade_w := null;

							nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('5', nm_usuario_p, null, ds_mensagem_reajuste_w, null, null, null, null, null, 'N', null, null, null, null, null, null, nr_seq_reajuste_fx_etaria_w, nr_seq_mensalidade_seg_w, null, null, nr_seq_plano_w, null, null, null, null, null, null, null, null, null, null, vl_reajuste_faixa_etaria_w, nr_seq_item_mensalidade_w);

							if (nr_seq_item_mensalidade_w IS NOT NULL AND nr_seq_item_mensalidade_w::text <> '') then
								CALL pls_inserir_apropriacao_preco('5', nr_seq_item_mensalidade_w, coalesce(nr_seq_segurado_preco_aux_w,nr_seq_segurado_preco_w), vl_reajuste_faixa_etaria_w,
												0, tx_proporcional_1a_mens_w, tx_proporcional_rescisao_w, nm_usuario_p);
							end if;
						end if;

						if (coalesce(vl_reajuste_indice_w,0)	> 0) and (coalesce(pls_store_data_mens_pck.get_seq_pagador_var_custo, nr_seq_pagador_benef_w) = nr_seq_pagador_w) then

							nr_seq_item_mensalidade_w := null;

							nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('25', nm_usuario_p, null, ds_mensagem_reajuste_w, null, null, null, null, null, 'N', null, null, null, null, null, null, null, nr_seq_mensalidade_seg_w, null, null, nr_seq_plano_w, null, nr_seq_reajuste_w, null, null, null, null, null, null, null, null, vl_reajuste_indice_w, nr_seq_item_mensalidade_w);

							if (nr_seq_item_mensalidade_w IS NOT NULL AND nr_seq_item_mensalidade_w::text <> '') then
								CALL pls_inserir_apropriacao_preco('25', nr_seq_item_mensalidade_w, nr_seq_segurado_preco_w, vl_reajuste_indice_w,
												0, tx_proporcional_1a_mens_w, tx_proporcional_rescisao_w, nm_usuario_p);
							end if;
						end if;

						if (coalesce(vl_adaptacao_w,0) > 0) and (coalesce(ie_pag_complementar_w, 'N') = 'N') and (nr_seq_pagador_w = nr_seq_pagador_benef_w) then

							nr_seq_item_mensalidade_w := null;

							nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('31', nm_usuario_p, null, ds_mensagem_reajuste_w, null, null, null, null, null, 'N', null, null, null, null, null, null, null, nr_seq_mensalidade_seg_w, null, null, nr_seq_plano_w, null, null, null, null, null, null, null, null, null, null, vl_adaptacao_w, nr_seq_item_mensalidade_w);

							--Verifica se o cálculo do pagador é proporcional
							if (ie_calc_primeira_mens_w = 'P') then
								if (coalesce(dt_adaptacao_w::text, '') = '') then
									select	max(nr_sequencia)
									into STRICT	nr_seq_mtvo_alteracao_w
									from	pls_motivo_alteracao_plano
									where	cd_ans	= '12';

									--Buscar a data em que o beneficiário adaptou o plano
									select	max(dt_alteracao)
									into STRICT	dt_adaptacao_w
									from	pls_segurado_alt_plano
									where	nr_seq_segurado		= nr_seq_segurado_w
									and	nr_seq_motivo_alt	= nr_seq_mtvo_alteracao_w;
								end if;

								if (dt_adaptacao_w IS NOT NULL AND dt_adaptacao_w::text <> '') then
									vl_adaptacao_proporc_w	:= 0;
									vl_adaptacao_aux_w	:= 0;
									dt_ultimo_dia_mes_w	:= to_char(last_day(dt_adaptacao_w),'dd');
									qt_dias_w		:= (dt_ultimo_dia_mes_w)::numeric  - (to_char(dt_adaptacao_w,'dd'))::numeric  + 1;
									--Gera um valor adaptado proporcional conforme os dias da adaptação
									vl_adaptacao_proporc_w	:= (vl_mensalidade_w * (qt_dias_w * (tx_adaptacao_w/30))/100);

									--Verifca se a mensalidade está até 2 meses da adaptação do plano
									if	((add_months(trunc(dt_adaptacao_w,'Month'),1)	= dt_mesano_referencia_w) or (add_months(trunc(dt_adaptacao_w,'Month'),2)	= dt_mesano_referencia_w)) then
										dt_adaptacao_aux_w	:= add_months(dt_mesano_referencia_w,-1);
										while(dt_adaptacao_aux_w >= trunc(dt_adaptacao_w,'Month')) loop
											--Verifica se existe mensalidade gerada para o mês
											select	count(1)
											into STRICT	qt_cobranca_adap_w
											
											where	exists (SELECT	1
													from	pls_mensalidade_seg_item a,
														pls_segurado		d,
														pls_mensalidade_segurado b,
														pls_mensalidade		c
													where	a.nr_seq_mensalidade_seg = b.nr_sequencia
													and	b.nr_seq_segurado	= d.nr_sequencia
													and	b.nr_seq_mensalidade	= c.nr_sequencia
													and	d.nr_sequencia		= nr_seq_segurado_w
													and	coalesce(c.ie_cancelamento::text, '') = ''
													and	b.dt_mesano_referencia	= dt_adaptacao_aux_w
													and	a.ie_tipo_item		= '31');

											--Caso não tiver, então gera um novo item, caso tiver então saí do cursor
											if (qt_cobranca_adap_w = 0) then
												if (dt_adaptacao_aux_w	= trunc(dt_adaptacao_w,'Month')) then
													vl_adaptacao_aux_w	:= vl_adaptacao_proporc_w;
													ds_mensagem_reajuste_w	:= 'Valor referente a Adaptação proporcional ao período ' || to_char(dt_adaptacao_w,'dd/mm/yyyy')||
																   ' a ' || to_char(last_day(dt_adaptacao_w),'dd/mm/yyyy') ||' = R$ ' || vl_adaptacao_aux_w;
												else
													vl_adaptacao_aux_w	:= vl_adaptacao_w;
													ds_mensagem_reajuste_w	:= 'Valor referente a Adaptação do mês ' || to_char(dt_adaptacao_aux_w,'mm/yyyy') || ' = R$ ' || vl_adaptacao_aux_w;
												end if;

												nr_seq_item_mensalidade_w := null;

												nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('31', nm_usuario_p, null, null, ds_mensagem_reajuste_w, null, null, null, null, 'N', null, null, null, null, null, null, null, nr_seq_mensalidade_seg_w, null, null, nr_seq_plano_w, null, null, null, null, null, null, null, null, null, null, vl_adaptacao_aux_w, nr_seq_item_mensalidade_w);

												dt_adaptacao_aux_w	:= add_months(dt_adaptacao_aux_w,-1);
											else
												exit;
											end if;
										end loop;
									end if;
								end if;
							end if;
						end if;
					end if;
				end if;

				if (pls_store_data_mens_pck.get_ie_cobrar_retroativo_lote = 'S') then
					if (coalesce(pls_store_data_mens_pck.get_seq_pagador_cobr_retro, nr_seq_pagador_benef_w) = nr_seq_pagador_w) then
						begin
						CALL pls_gerar_mensalidade_retro(nr_seq_mensalidade_seg_w, nm_usuario_p);
						exception
						when others then
							CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w, nr_seq_mensalidade_p,
										'Erro ao gerar os valores de retroativos da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
						end;
					end if;
				end if;
			end if;

			select	count(1)
			into STRICT	qt_mensalidade_segurado_w
			from	pls_mensalidade_segurado
			where	nr_sequencia	= nr_seq_mensalidade_seg_w;

			if (qt_mensalidade_segurado_w = 0) then
				CALL pls_store_data_mens_pck.insert_record_mensalidade(nm_usuario_p,nr_seq_segurado_w,nr_seq_mensalidade_p,qt_idade_w,
							dt_mesano_referencia_w,nr_parcela_segurado_w,nr_seq_plano_w,nr_seq_contrato_w,nr_parcela_contrato_w,
							nr_seq_reajuste_w,nr_seq_intercambio_w,nr_seq_segurado_preco_w,dt_inicio_cobertura_w,dt_fim_cobertura_w, nr_seq_titular_w,
							dt_rescisao_w,nr_seq_grau_parent_w,nr_seq_subestipulante_w,nr_seq_localizacao_benef_w);

				nr_seq_mensalidade_seg_w	:= pls_store_data_mens_pck.get_nr_seq_mensalidade_seg;

				select	count(1)
				into STRICT	qt_mensalidade_segurado_w
				from	pls_mensalidade_segurado
				where	nr_sequencia	= nr_seq_mensalidade_seg_w;
			end if;

			-- COPARTICIPAÇÃO
			if (ie_tipo_mensalidade_p <> 'MR') or (pls_store_data_mens_pck.get_ie_copartic_mens_mes_ant = 'S') then
				if	((qt_mensalidade_segurado_w <> 0) and
					((coalesce(pls_store_data_mens_pck.get_seq_pagador_copartic, nr_seq_pagador_benef_w) = nr_seq_pagador_w) or (qt_seg_pag_w > 0))) then
					begin
					CALL pls_gerar_mens_coparticipacao(nr_seq_mensalidade_seg_w, nm_usuario_p, cd_estabelecimento_p);
					exception
					when others then
						CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
									'Erro ao gerar os valores de coparticipação da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
					end;
				end if;
			end if;
			-- FIM COPARTICIPAÇÃO
			-- PÓS-ESTABELECIDO
			if (coalesce(pls_store_data_mens_pck.get_seq_pagador_pos, nr_seq_pagador_benef_w) = nr_seq_pagador_w) then
				begin
				CALL pls_gerar_mens_pos_estab(nr_seq_mensalidade_seg_w, null, 'A', nm_usuario_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar os valores de pós estabelecidos da mensalidade'||chr(13)||chr(10)||sqlerrm,
								cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;
			-- FIM PÓS-ESTABELECIDO
			--GUIA COM COBRANÇA PREVISTA
			if (coalesce(pls_store_data_mens_pck.get_seq_pagador_vl_n_coberto, nr_seq_pagador_benef_w) = nr_seq_pagador_w) then
				begin
				CALL pls_gerar_mens_co(nr_seq_mensalidade_seg_w, nm_usuario_p,cd_estabelecimento_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar os valores de custo operacional (Contratos pré) da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;

			--TAXA DE ATENDIMENTO
			begin
			CALL pls_gerar_mens_taxa_atend(nr_seq_mensalidade_seg_w, nm_usuario_p);
			exception
			when others then
				CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
							'Erro ao gerar os valores de taxa de atendimento da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
			end;
			-- FIM GUIA COM COBRANÇA PREVISTA
		--Quando a mensalidade no mês foi gerada mas existem co-participações que não foram geradas no mês
		elsif (qt_reg_mensalidade_w <> 0) then
			if (coalesce(ie_existe_mens_w,'N') <> 'S') then
				ie_existe_mens_w	:= 'S';
			end if;

			if	((pls_store_data_mens_pck.get_ie_gerar_coparticipacao = ie_tipo_contrato_w) or (pls_store_data_mens_pck.get_ie_gerar_coparticipacao = 'A')) then
				select	count(1)
				into STRICT	qt_reg_coparticipacao_w
				
				where	exists (SELECT	1
						from	pls_conta 		a,
							pls_protocolo_conta	b,
							pls_segurado		c
						where	a.nr_seq_protocolo	= b.nr_sequencia
						and	a.nr_seq_segurado	= c.nr_sequencia
						and	c.nr_sequencia		= nr_seq_segurado_w
						and	b.ie_tipo_protocolo in ('C','I')
						and	trunc(b.dt_mes_competencia,'month')	<= trunc(dt_mesano_referencia_w,'month')
						and	((a.nr_seq_prestador_exec = pls_store_data_mens_pck.get_seq_prestador_regra_exec) or (coalesce(pls_store_data_mens_pck.get_seq_prestador_regra_exec::text, '') = ''))
						and	((b.nr_seq_prestador = pls_store_data_mens_pck.get_seq_prestador_regra_atend) or (coalesce(pls_store_data_mens_pck.get_seq_prestador_regra_atend::text, '') = ''))
						and	((a.ie_tipo_guia = pls_store_data_mens_pck.get_ie_tipo_guia_regra) or (coalesce(pls_store_data_mens_pck.get_ie_tipo_guia_regra::text, '') = ''))
						and	((exists (select	1
								from	pls_prestador x
								where	x.nr_sequencia	= a.nr_seq_prestador_exec
								and	CASE WHEN coalesce(x.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END  = pls_store_data_mens_pck.get_tipo_prestador_exec_regra)) or (coalesce(pls_store_data_mens_pck.get_tipo_prestador_exec_regra,'A') = 'A'))
						and	((exists (select	1
								from	pls_prestador y
								where	y.nr_sequencia	= b.nr_seq_prestador
								and	CASE WHEN coalesce(y.cd_cgc::text, '') = '' THEN 'PF'  ELSE 'PJ' END  = pls_store_data_mens_pck.get_tipo_prestador_atend_regra)) or (coalesce(pls_store_data_mens_pck.get_tipo_prestador_atend_regra,'A') = 'A'))
						and	((exists (select	1
								from	pls_conta_coparticipacao z
								where	z.nr_seq_conta	= a.nr_sequencia
								and	coalesce(z.nr_seq_mensalidade_seg::text, '') = '')) or (exists (select	1
								from	pls_conta_pos_estabelecido z
								where	z.nr_seq_conta	= a.nr_sequencia
								and	coalesce(z.nr_seq_mensalidade_seg::text, '') = '')))
						and	((c.ie_tipo_segurado = pls_store_data_mens_pck.get_ie_tipo_segurado_regra) or (coalesce(pls_store_data_mens_pck.get_ie_tipo_segurado_regra::text, '') = ''))
						and	((ie_preco_w = pls_store_data_mens_pck.get_ie_preco_regra) or (coalesce(pls_store_data_mens_pck.get_ie_preco_regra::text, '') = '')));
			end if;

			if (qt_reg_coparticipacao_w > 0) then
				CALL pls_store_data_mens_pck.insert_record_mensalidade(nm_usuario_p,nr_seq_segurado_w,nr_seq_mensalidade_p,qt_idade_w,
							dt_mesano_referencia_w,nr_parcela_segurado_w,nr_seq_plano_w,nr_seq_contrato_w,nr_parcela_contrato_w,
							nr_seq_reajuste_w,nr_seq_intercambio_w,nr_seq_segurado_preco_w,dt_inicio_cobertura_w,dt_fim_cobertura_w, nr_seq_titular_w,
							dt_rescisao_w,nr_seq_grau_parent_w,nr_seq_subestipulante_w,nr_seq_localizacao_benef_w);

				nr_seq_mensalidade_seg_w	:= pls_store_data_mens_pck.get_nr_seq_mensalidade_seg;

				--COPARTICIPACAÇÃO
				if	(((ie_tipo_mensalidade_p <> 'MR') or (pls_store_data_mens_pck.get_ie_copartic_mens_mes_ant = 'S')) and
					((coalesce(pls_store_data_mens_pck.get_seq_pagador_copartic, nr_seq_pagador_benef_w) = nr_seq_pagador_w) or (qt_seg_pag_w > 0))) then
					begin
					CALL pls_gerar_mens_coparticipacao(nr_seq_mensalidade_seg_w, nm_usuario_p, cd_estabelecimento_p);
					exception
					when others then
						CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
									'Erro ao gerar os valores de coparticipação da mensalidade'||chr(13)||chr(10)||sqlerrm,
									cd_estabelecimento_p,nm_usuario_p);
					end;
				end if;
				--FIM COPARTICIPAÇÃO
				-- PÓS-ESTABELECIDO
				if (coalesce(pls_store_data_mens_pck.get_seq_pagador_pos, nr_seq_pagador_benef_w) = nr_seq_pagador_w) then
					begin
					CALL pls_gerar_mens_pos_estab(nr_seq_mensalidade_seg_w, null, 'A', nm_usuario_p);
					exception
					when others then
						CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
									'Erro ao gerar os valores de pós estabelecidos da mensalidade'||chr(13)||chr(10)||sqlerrm,
									cd_estabelecimento_p,nm_usuario_p);
					end;
				end if;
				-- FIM PÓS-ESTABELECIDO
				--GUIA COM COMBRANÇA PREVISTA
				if (coalesce(pls_store_data_mens_pck.get_seq_pagador_vl_n_coberto, nr_seq_pagador_benef_w) = nr_seq_pagador_w) then
					begin
					CALL pls_gerar_mens_co(nr_seq_mensalidade_seg_w, nm_usuario_p,cd_estabelecimento_p);
					exception
					when others then
						CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
									'Erro ao gerar os valores de custo operacional (Contratos pré) da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
					end;
				end if;

				--TAXA DE ATENDIMENTO
				begin
				CALL pls_gerar_mens_taxa_atend(nr_seq_mensalidade_seg_w, nm_usuario_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar os valores de taxa de atendimento da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;
		end if;

		if	((ie_gerar_mensalidade_w	= 'S') or (ie_tipo_pagador_w = 'S') and (ie_pagador_rescindido_w = 'N'))then
			--Verifica se existem mensalidades geradas para o beneficiário
			select	count(1)
			into STRICT	qt_mensalidade_segurado_w
			
			where	exists (SELECT	1
					from	pls_mensalidade_segurado
					where	nr_sequencia	= pls_store_data_mens_pck.get_nr_seq_mensalidade_seg);

			if (qt_mensalidade_segurado_w = 0) then
				--Insere o registro na tabela PLS_MENSALIDADE_SEGURADO
				CALL pls_store_data_mens_pck.insert_record_mensalidade(nm_usuario_p,nr_seq_segurado_w,nr_seq_mensalidade_p,qt_idade_w,
							dt_mesano_referencia_w,nr_parcela_segurado_w,nr_seq_plano_w,nr_seq_contrato_w,nr_parcela_contrato_w,
							nr_seq_reajuste_w,nr_seq_intercambio_w,nr_seq_segurado_preco_w,dt_inicio_cobertura_w,dt_fim_cobertura_w, nr_seq_titular_w,
							dt_rescisao_w,nr_seq_grau_parent_w,nr_seq_subestipulante_w,nr_seq_localizacao_benef_w);

				nr_seq_mensalidade_seg_w	:= pls_store_data_mens_pck.get_nr_seq_mensalidade_seg;
			end if;

			--BÔNUS POR INDICAÇÂO
			select	count(1)
			into STRICT	qt_indicacao_w
			
			where	exists (SELECT	1
					from	pls_indicacao_venda
					where	nr_seq_segurado	= nr_seq_segurado_p);

			if (qt_indicacao_w > 0) and (coalesce(ie_pag_complementar_w, 'N') = 'N') then
				begin
				CALL pls_gerar_lanc_indicacao_pp(nr_seq_segurado_w, dt_mesano_referencia_w, cd_estabelecimento_p, nm_usuario_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar bônus por indicação'||chr(13)||chr(10)||sqlerrm, cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;

			--VIA ADICIONAL
			if (ie_tipo_pagador_w <> 'S') and (nr_seq_pagador_w = nr_seq_pagador_benef_w) then
				begin
				CALL pls_gerar_mens_via_adicional(nr_seq_mensalidade_seg_w, nm_usuario_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar os valores adicionais da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;

			--TAXA DE INSCRIÇÃO
			if (coalesce(ie_taxa_inscricao_w,'N') = 'S') and (coalesce(ie_pag_complementar_w, 'N') = 'N') then
				begin
				CALL pls_gerar_mens_taxa_insc(nr_seq_mensalidade_seg_w,nm_usuario_p);
				exception
				when others then
				CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
							'Erro ao gerar os valores de taxa de inscrição da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
			end;
			end if;

			--PREÇO PÓS-ESTABELECIDO (VALOR COBRADO MENSALMENTE)
			if (coalesce(ie_pag_complementar_w, 'N') = 'N') then
				begin
				CALL pls_gerar_mens_pos_estab(nr_seq_mensalidade_seg_w, null, 'M', nm_usuario_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar os valores de pós estabelecidos da mensalidade'||chr(13)||chr(10)||sqlerrm,
								cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;

			--Gerar SCA
			begin
			CALL pls_gerar_mens_sca(nr_seq_mensalidade_seg_w,ie_mensalidade_mes_rescisao_w,nm_usuario_p);
			exception
			when others then
				CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
							'Erro ao gerar os valores de sca da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
			end;

			if (coalesce(ie_pag_complementar_w, 'N') = 'N') then
				--Gerar valor do agravo
				begin
				CALL pls_gerar_mens_agravo(nr_seq_mensalidade_seg_w, nm_usuario_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar os valores do agravo da mensalidade'||chr(13)||chr(10)||sqlerrm,	cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;

			if	((coalesce(ie_pag_complementar_w, 'N') = 'N') and (nr_seq_pagador_w = nr_seq_pagador_benef_w)) then
				--Gerar valor do acréscimo
				begin
				CALL pls_gerar_mens_acrescimo(null,nr_seq_mensalidade_seg_w, nm_usuario_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar os valores de acréscimo da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;

			if (coalesce(ie_pag_complementar_w, 'N') = 'N') then
				--Gerar valor do de manuetenção de intercâmbio
				if (coalesce(ie_tipo_pagador_w,'N') = 'I') then
					begin
					CALL pls_gerar_mens_manutenc_inter(nr_seq_mensalidade_seg_w,nr_seq_intercambio_w, nm_usuario_p);
					exception
					when others then
						CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
									'Erro ao gerar os valores do de manutenção de intercâmbio da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
					end;
				end if;
			end if;

			--AS ROTINAS DE BONIFICAÇÃO E LANÇAMENTOS PROGRAMADOS DEVEM SER AS ÚLTIMAS A SEREM EXECUTADAS, PARA GERAR A BONIFICAÇÃO, PRECISA DOS OUTROS ITEM JÁ GERADOS
			--LANÇAMENTOS PROGRAMADOS
			select	count(1)
			into STRICT	qt_lanc_prog_w
			
			where	exists (SELECT	1
					from	pls_lancamento_mensalidade	a,
						pls_segurado			b
					where	a.nr_seq_segurado	= b.nr_sequencia
					and	b.nr_sequencia		= nr_seq_segurado_w
					and	a.ie_situacao		= 'A'
					and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
					and	(a.nm_usuario_liberacao IS NOT NULL AND a.nm_usuario_liberacao::text <> '')
					and	trunc(a.dt_mes_competencia,'month')	= dt_mesano_referencia_w);

			select	count(1)
			into STRICT	qt_lanc_prog_aut_w
			
			where	exists (SELECT	1
					from	pls_segurado_mensalidade	a,
						pls_segurado			b
					where	a.nr_seq_segurado	= b.nr_sequencia
					and	b.nr_sequencia		= nr_seq_segurado_w
					and	a.ie_situacao	= 'A'
					and	trunc(a.dt_referencia,'month')	= dt_mesano_referencia_w);

			if	((qt_lanc_prog_w > 0) or (qt_lanc_prog_aut_w > 0)) then --Foi retirada a restrição do pagador pois deu problema no Marcio cunha que para 2 lançamentos deveriam ser gerados para 2 pagadores diferentes por causa do motivo do lançamento, se acontecer algum problema de não gerar para
							       --o pagador correto o lançamento deve ser tratado dentro da pls_gerar_mens_lanc_prog, da forma que estava sendo tratado o sistema so iria gerar para o pagador complementar de lançamento sem olhar o motivo do lançamento
				begin
				CALL pls_gerar_mens_lanc_prog(nr_seq_mensalidade_seg_w,null,nm_usuario_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar os valores de lançamentos programados da mensalidade'||chr(13)||chr(10)||sqlerrm,
								cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;

			begin
			CALL pls_gerar_mens_bonificacao(nr_seq_mensalidade_seg_w, nr_seq_intercambio_w, nr_seq_contrato_w, nr_seq_segurado_w, nm_usuario_p);
			exception
			when others then
				CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
							'Erro ao gerar as bonificação da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
			end;

			begin
			CALL pls_gerar_bonus_cobertura(nr_seq_mensalidade_seg_w, nr_seq_segurado_w, nr_seq_contrato_w, dt_mesano_referencia_p, cd_estabelecimento_p, nm_usuario_p);
			exception
			when others then
				CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
							'Erro ao gerar os valores de bônus de cobertura da mensalidade'||chr(13)||chr(10)||sqlerrm,
							cd_estabelecimento_p,nm_usuario_p);
			end;
		end if;

		if (pls_store_data_mens_pck.get_ie_cobrar_retroativo_lote = 'S') then
			begin
			CALL pls_gerar_mens_sca_retro(nr_seq_mensalidade_seg_w, nm_usuario_p);
			exception
			when others then
				CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
							'Erro ao gerar os valores de retroativos de SCA da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
			end;
		end if;

		--OS 216996 lepinski - Se o beneficiário for rescindido, pode ser gerado a mensalidade com lançamentos programados
		if (ie_gerar_mensalidade_w	= 'N') then
			select	count(1)
			into STRICT	qt_lanc_prog_w
			
			where	exists (SELECT	1
					from	pls_lancamento_mensalidade	a
					where	a.nr_seq_segurado	= nr_seq_segurado_w
					and	a.ie_situacao		= 'A'
					and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
					and	(a.nm_usuario_liberacao IS NOT NULL AND a.nm_usuario_liberacao::text <> '')
					and	trunc(a.dt_mes_competencia,'month')	= dt_mesano_referencia_w);

			if (qt_lanc_prog_w = 0) then
				select	count(1)
				into STRICT	qt_lanc_prog_w
				
				where	exists (SELECT	1
						from	pls_segurado_mensalidade	a
						where	a.nr_seq_segurado	= nr_seq_segurado_w
						and	a.ie_situacao		= 'A'
						and	coalesce(a.nr_seq_item_mensalidade::text, '') = ''
						and	trunc(a.dt_referencia,'month')	= dt_mesano_referencia_w);
			end if;

			if (qt_lanc_prog_w > 0) then
				begin
				CALL pls_gerar_mens_lanc_prog(nr_seq_mensalidade_seg_w,null,nm_usuario_p);
				exception
				when others then
					CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
								'Erro ao gerar os valores de lançamentos programados da mensalidade'||chr(13)||chr(10)||sqlerrm,
								cd_estabelecimento_p,nm_usuario_p);
				end;
			end if;
		end if;

		<<final>>
		nr_seq_segurado_w	:= nr_seq_segurado_w;
		CALL pls_store_data_mens_pck.clear_pls_mensalidade_segurado();
		end;
	end loop;
end loop;

open C03;
loop
fetch C03 into
	ie_tipo_pagador_w,
	nr_seq_segurado_w,
	nr_seq_contrato_w,
	nr_seq_plano_w,
	dt_rescisao_w,
	dt_adesao_w,
	ie_taxa_inscricao_w,
	dt_nascimento_w,
	nr_seq_intercambio_w,
	nr_seq_titular_w,
	nr_seq_grau_parent_w,
	nr_seq_subestipulante_w,
	nr_seq_localizacao_benef_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	nr_parcela_segurado_w		:= pls_obter_parcela_segurado(nr_seq_segurado_w,dt_mesano_referencia_w,dt_mesano_referencia_w);

	--Insere o registro na tabela PLS_MENSALIDADE_SEGURADO
	CALL pls_store_data_mens_pck.insert_record_mensalidade(nm_usuario_p,nr_seq_segurado_w,nr_seq_mensalidade_p,qt_idade_w,
				dt_mesano_referencia_w,nr_parcela_segurado_w,nr_seq_plano_w,nr_seq_contrato_w,nr_parcela_contrato_w,
				nr_seq_reajuste_w, nr_seq_intercambio_w, null, null, null, nr_seq_titular_w,
				dt_rescisao_w,nr_seq_grau_parent_w,nr_seq_subestipulante_w,nr_seq_localizacao_benef_w);

	nr_seq_mensalidade_seg_w	:= pls_store_data_mens_pck.get_nr_seq_mensalidade_seg;

	--TAXA DE INSCRIÇÃO
	if (coalesce(ie_taxa_inscricao_w,'N')	= 'S') then
		begin
		CALL pls_gerar_mens_taxa_insc(nr_seq_mensalidade_seg_w,nm_usuario_p);
		exception
		when others then
			CALL pls_gerar_mens_log_erro(nr_seq_lote_p,nr_seq_pagador_w,nr_seq_segurado_w,nr_seq_mensalidade_p,
						'Erro ao gerar os valores da taxa de inscrição da mensalidade'||chr(13)||chr(10)||sqlerrm,cd_estabelecimento_p,nm_usuario_p);
		end;
	end if;

	CALL pls_atualiza_valor_mens_seg(nr_seq_mensalidade_seg_w,nm_usuario_p);
	end;
end loop;
close C03;

dt_fim_geracao_w	:= clock_timestamp();

select (dt_fim_geracao_w - dt_inicio_geracao_w) * 86400
into STRICT	qt_segundos_geracao_w
;

if (qt_segundos_geracao_w <> 0) then
	qt_horas_lote_w		:= trunc((qt_segundos_geracao_w / 60) / 60);
	qt_segundos_geracao_w	:= qt_segundos_geracao_w - (qt_horas_lote_w * 60 * 60);

	qt_minutos_lote_w	:= trunc(qt_segundos_geracao_w / 60);
	qt_segundos_geracao_w	:= qt_segundos_geracao_w - (qt_minutos_lote_w * 60);

	qt_segundos_lote_w	:= qt_segundos_geracao_w;

	qt_tempo_geracao_w	:= lpad(qt_horas_lote_w,2,'0')||':'||lpad(qt_minutos_lote_w,2,'0')||':'||lpad(qt_segundos_lote_w,2,'0');
else
	qt_tempo_geracao_w	:= '00:00:00';
end if;

update	pls_mensalidade
set	dt_inicio_geracao	= dt_inicio_geracao_w,
	dt_fim_geracao		= dt_fim_geracao_w,
	qt_tempo_geracao	= qt_tempo_geracao_w
where	nr_sequencia		= nr_seq_mensalidade_p;

ie_existe_mens_p	:= ie_existe_mens_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_mensalidade_segurado ( nr_seq_lote_p bigint, nr_seq_mensalidade_p bigint, nr_seq_segurado_p bigint, ie_tipo_mensalidade_p text, dt_mesano_referencia_p timestamp, ie_gerar_mensalidade_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_existe_mens_p INOUT text) FROM PUBLIC;

