-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nota_fiscal_venc ( nr_sequencia_p bigint, dt_base_vencimento_p timestamp) AS $body$
DECLARE


dt_atualizacao_w        			timestamp 		:= clock_timestamp();
cd_estabelecimento_w			smallint;
cd_cgc_emitente_w			varchar(14);
cd_serie_nf_w				nota_fiscal.cd_serie_nf%type;
nr_nota_fiscal_w				varchar(255);
nr_sequencia_nf_w				bigint;
nm_usuario_w				varchar(15);
cd_condicao_pagamento_w			bigint	:= 0;
ie_erro_w					smallint	:= 0;
ie_forma_pagamento_w			smallint	:= 0;
nr_parcela_w				smallint	:= 0;
nr_ult_parcela_w				smallint	:= 0;
qt_dias_parcela_w				integer	:= 0;
tx_fracao_parcela_w			double precision	:= 0;
tx_acrescimo_w				double precision	:= 0;
dt_base_w        				timestamp		:= clock_timestamp();
vl_total_nota_w				double precision	:= 0;
dia_semana_w				smallint	:= 0;
dia_mes_w				smallint	:= 0;
dt_parcela_w     				timestamp		:= clock_timestamp();
dt_feriado_w     				timestamp		:= clock_timestamp();
vl_parcela_w				double precision	:= 0;
vl_total_w				double precision	:= 0;
cd_natureza_operacao_w			smallint	:= 0;
nr_sequencia_w				bigint;
dt_vencimento_w				timestamp;
nr_seq_protocolo_w			bigint;
ie_acao_nao_util_w				varchar(1);
qt_vencimentos_w				integer;
ie_tipo_acrescimo_w			varchar(2)	:= 'P';
vl_base_juros_w				double precision;
ie_dia_semana_w				varchar(2);

C01 CURSOR FOR
	SELECT	nr_parcela,
		qt_dias_parcela,
		tx_fracao_parcela,
		coalesce(tx_acrescimo,0),
		ie_dia_semana
	from	parcela
	where (cd_condicao_pagamento = cd_condicao_pagamento_w)
	and (cd_condicao_pagamento_w <> 1)
	order by nr_parcela;


BEGIN

/* Seleciona dados da nota fiscal - ERRO(1)*/

IE_ERRO_W := 0;
begin
select	cd_estabelecimento,
	cd_cgc_emitente,
	cd_serie_nf,
	nr_nota_fiscal,
	nr_sequencia_nf,
	nm_usuario,
	vl_total_nota,
	nr_seq_protocolo,
	coalesce(cd_condicao_pagamento,0),
	coalesce(cd_natureza_operacao,0)
INTO STRICT	cd_estabelecimento_w,
	cd_cgc_emitente_w,
	cd_serie_nf_w,
	nr_nota_fiscal_w,
	nr_sequencia_nf_w,
	nm_usuario_w,
	vl_total_nota_w,
	nr_seq_protocolo_w,
	cd_condicao_pagamento_w,
	cd_natureza_operacao_w
from	nota_fiscal
where	nr_sequencia     = nr_sequencia_p;
exception
     when others then
          IE_ERRO_W := 1;
end;

select	count(*)
into STRICT	qt_vencimentos_w
from	parcela
where (cd_condicao_pagamento = cd_condicao_pagamento_w)
and (cd_condicao_pagamento_w <> 1);

dt_base_w	:= dt_base_vencimento_p;

/* Verifica se nota possui condicao de pagamento - ERRO(2)*/

if (IE_ERRO_W = 0) and (cd_condicao_pagamento_w = 0) then
	IE_ERRO_W := 2;
end if;

/* Seleciona dados da condicao de pagamento - ERRO(3)*/

if (IE_ERRO_W = 0) then
	begin
	select	ie_forma_pagamento,
		ie_acao_nao_util,
		coalesce(ie_tipo_acrescimo,'P')
	into STRICT	ie_forma_pagamento_w,
		ie_acao_nao_util_w,
		ie_tipo_acrescimo_w
  	from	condicao_pagamento
	where	cd_condicao_pagamento = cd_condicao_pagamento_w
	and	ie_situacao           = 'A';
      	exception
		when others then
		IE_ERRO_W := 3;
	end;
end if;

/* Seleciona ultima parcela - ERRO(3)*/

if (IE_ERRO_W = 0) then
	begin
	select	max(nr_parcela)
	into STRICT	nr_ult_parcela_w
	from	parcela
	where	cd_condicao_pagamento = cd_condicao_pagamento_w;
      	exception
		when others then
		IE_ERRO_W := 3;
	end;
end if;

/* Elimina dados anteriores */

if (IE_ERRO_W = 0) then
	begin
  	delete from nota_fiscal_venc
 	where	nr_sequencia     = nr_sequencia_p;
	exception
		when others then
		IE_ERRO_W := 0;
	end;
end if;

/* Grava condição de pagamento (a vista)*/

if (IE_ERRO_W = 0)	and (ie_forma_pagamento_w = 1) then
	begin

	insert into nota_fiscal_venc(
					cd_estabelecimento,
					cd_cgc_emitente,
					cd_serie_nf,
					nr_nota_fiscal,
					nr_sequencia_nf,
					dt_vencimento,
					vl_vencimento,
					dt_atualizacao,
					nm_usuario,
					nr_sequencia,
					ie_origem)
			      values (	cd_estabelecimento_w,
					cd_cgc_emitente_w,
					cd_serie_nf_w,
					nr_nota_fiscal_w,
					nr_sequencia_nf_w,
					dt_base_w,
					vl_total_nota_w,
					dt_atualizacao_w,
					nm_usuario_w,
					nr_sequencia_p,
					'N');
	exception
		when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265337);
                	--FatVct01: Erro ao gravar vencimento da nota
	end;
end if;

/* Define Data Base para condicao (Fora Semana) */

if (IE_ERRO_W = 0) and (ie_forma_pagamento_w = 3) then
	begin
	dia_semana_w := PKG_DATE_UTILS.get_WeekDay(dt_base_w);
      	if (dia_semana_w > 1) then
           	dt_base_w := dt_base_w + (8 - dia_semana_w);
	end if;
	end;
end if;

/* Define Data Base para condicao (Fora Dezena) */

if (IE_ERRO_W = 0) and (ie_forma_pagamento_w = 4) then
	begin
	dia_mes_w := (pkg_date_utils.extract_field('DAY',dt_base_w,0))::numeric;

	if (dia_mes_w < 10) then
		dt_base_w := pkg_date_utils.get_date(10, dt_base_w, 0);
	else
      		if (dia_mes_w < 20) then
                	dt_base_w := pkg_date_utils.get_date(20,dt_base_w,0);
		else
			dt_base_w := pkg_date_utils.get_date(1, PKG_DATE_UTILS.ADD_MONTH(dt_base_w, 1,0), 0);
		end if;
	end if;
	end;
end if;

/* Define Data Base para condicao (Fora Quinzena) */

if (IE_ERRO_W = 0) and (ie_forma_pagamento_w = 5) then
	begin
	dia_mes_w := (pkg_date_utils.extract_field('DAY',dt_base_w,0))::numeric;
	if (dia_mes_w < 15) then
		dt_base_w := pkg_date_utils.get_date(15,dt_base_w,0);
	else
		dt_base_w := pkg_date_utils.get_date(1, PKG_DATE_UTILS.ADD_MONTH(dt_base_w, 1,0), 0);
	end if;
	end;
end if;

/* Define Data Base para condicao (Fora Mes) */

if (IE_ERRO_W = 0) and (ie_forma_pagamento_w = 6) then
	dt_base_w := pkg_date_utils.get_date(1, PKG_DATE_UTILS.ADD_MONTH(dt_base_w, 1,0), 0);
end if;

/* Grava condição de pagamento (a prazo) */

if (IE_ERRO_W = 0) and (ie_forma_pagamento_w > 1) then
	begin

	if (ie_tipo_acrescimo_w	= 'B') then
		vl_base_juros_w	:= obter_base_acresc_cond_pagto(cd_condicao_pagamento_w,vl_total_nota_w);
	end if;

	vl_total_w	:= 0;
	OPEN  C01;
	LOOP
	FETCH C01 into
		nr_parcela_w,
            	qt_dias_parcela_w,
            	tx_fracao_parcela_w,
            	tx_acrescimo_w,
		ie_dia_semana_w;
	if	C01%FOUND then
		begin
		DT_PARCELA_W := Define_Data_Parcela(DT_BASE_W, QT_DIAS_PARCELA_W, CD_ESTABELECIMENTO_W, DT_PARCELA_W, ie_acao_nao_util_w);

		vl_parcela_w 	:= ((vl_total_nota_w * tx_fracao_parcela_w) / 100);
            	vl_total_w 	:= vl_total_w + vl_parcela_w;

		if (nr_parcela_w = nr_ult_parcela_w) and (vl_total_w <> vl_total_nota_w) then
			vl_parcela_w := vl_parcela_w + (vl_total_nota_w - vl_total_w);
		end if;

		if (cd_natureza_operacao_w > 500) then
			if (ie_tipo_acrescimo_w = 'P') then
				vl_parcela_w := vl_parcela_w + ((vl_parcela_w * tx_acrescimo_w) / 100);
			elsif (ie_tipo_acrescimo_w = 'B') then
				vl_parcela_w := vl_parcela_w + ((vl_base_juros_w * tx_acrescimo_w) / 100);
			end if;
		end if;

		/* Dia fixo mês "baseado no campo dias da parcela"*/

		if (IE_ERRO_W = 0) and (ie_forma_pagamento_w = 7) and (qt_vencimentos_w = 1) then

			if (PKG_DATE_UTILS.extract_field('DAY', dt_base_w) < QT_DIAS_PARCELA_W) then
				dt_parcela_w := pkg_date_utils.get_date(qt_dias_parcela_w, dt_base_w, 0);
			else
				dt_parcela_w := pkg_date_utils.get_date(qt_dias_parcela_w, pkg_date_utils.add_month(dt_base_w, 1,0), 0);
			end if;

			/* Paulo - Tratar pelo dia da semana - OS 192176 - 08/02/2010 */

			if (coalesce(ie_dia_semana_w,'0') <> '0') then
				dt_parcela_w	:= obter_vencimento_dia_semana(dt_parcela_w,ie_dia_semana_w,cd_estabelecimento_w);
			end if;

		end if;

		/* (Ultimo dia do mes) */

		if (ie_forma_pagamento_w = 11) then
			dt_parcela_w := PKG_DATE_UTILS.GET_DATETIME(PKG_DATE_UTILS.END_OF(PKG_DATE_UTILS.ADD_MONTH(dt_base_w,nr_parcela_w-1,0), 'MONTH', 0),dt_base_w, 0);
		end if;
		/* Ultimo dia da quinzena do próximo mês - HDH Matheus OS 97866*/

		if (ie_forma_pagamento_w = 12) then
			dt_parcela_w	:= dt_base_vencimento_p;
			if ((pkg_date_utils.extract_field('DAY',dt_parcela_w,0))::numeric  <= 15) then
				dt_parcela_w	:= pkg_date_utils.get_date(15, PKG_DATE_UTILS.ADD_MONTH(dt_parcela_w,1,0), 0);
			else
			dt_parcela_w	:= PKG_DATE_UTILS.GET_DATETIME(PKG_DATE_UTILS.END_OF(PKG_DATE_UTILS.ADD_MONTH(dt_parcela_w,1,0), 'MONTH', 0),dt_parcela_w, 0);
			end if;
		end if;

          	insert into nota_fiscal_venc(
		cd_estabelecimento,
		cd_cgc_emitente,
		cd_serie_nf,
		nr_nota_fiscal,
		nr_sequencia_nf,
		dt_vencimento,
		vl_vencimento,
		dt_atualizacao,
		nm_usuario,
		nr_sequencia,
		ie_origem)
	values (	cd_estabelecimento_w,
		cd_cgc_emitente_w,
		cd_serie_nf_w,
		nr_nota_fiscal_w,
		nr_sequencia_nf_w,
		dt_parcela_w,
		vl_parcela_w,
		dt_atualizacao_w,
		nm_usuario_w,
		nr_sequencia_p,
		'N');
	exception when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(265337);
                	--FatVct01: Erro ao gravar vencimento da nota
		end;
	else
		begin
		ie_erro_w := 4;
		exit;
		end;
	end if;
	END LOOP;
	CLOSE C01;
	end;
end if;

if (ie_erro_w = 4) and (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') and (cd_condicao_pagamento_w = 1) then
	begin
	select	coalesce(max(dt_vencimento), DT_BASE_W)
	into STRICT	dt_vencimento_w
	from	protocolo_convenio
	where	nr_seq_protocolo = nr_seq_protocolo_w;


	if (dt_vencimento_w IS NOT NULL AND dt_vencimento_w::text <> '') and (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') then
		begin
		insert into nota_fiscal_venc(
						cd_estabelecimento,
						cd_cgc_emitente,
						cd_serie_nf,
						nr_nota_fiscal,
						nr_sequencia_nf,
						dt_vencimento,
						vl_vencimento,
						dt_atualizacao,
						nm_usuario,
						nr_sequencia,
						ie_origem)
				values (	cd_estabelecimento_w,
						cd_cgc_emitente_w,
						cd_serie_nf_w,
						nr_nota_fiscal_w,
						nr_sequencia_nf_w,
						dt_vencimento_w,
						vl_total_nota_w,
						dt_atualizacao_w,
						nm_usuario_w,
						nr_sequencia_p,
						'N');
		exception
			when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(265337);
                	--FatVct01: Erro ao gravar vencimento da nota
		end;
        end if;
	end;
end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nota_fiscal_venc ( nr_sequencia_p bigint, dt_base_vencimento_p timestamp) FROM PUBLIC;

