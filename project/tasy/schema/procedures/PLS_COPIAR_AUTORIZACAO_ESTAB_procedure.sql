-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_copiar_autorizacao_estab ( cd_estab_origem_p bigint, cd_estab_destino_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_guia_plano_w			bigint;
nr_seq_guia_plano_mat_w			bigint;
nr_seq_guia_plano_proc_w		bigint;
nr_seq_guia_plano_hist_w		bigint;
nr_seq_guia_plan_diag_w			bigint;
nr_seq_guia_plano_anexo_w		bigint;
nr_seq_guia_plano_glosa_w		bigint;
nr_seq_guia_glosa_proc_w		bigint;
nr_seq_guia_glosa_mat_w			bigint;
nr_seq_guia_plano_ant_w			bigint;
nr_seq_guia_plano_proc_ant_w		bigint;
nr_seq_guia_plano_mat_ant_w		bigint;
nr_seq_guia_glosa_w			bigint;
nr_seq_segurado_w			bigint;
nr_seq_segurado_ant_w			bigint;
qt_registro_w				bigint;
nr_seq_plano_ant_w			bigint;
nr_seq_plano_novo_w			bigint;
nr_seq_prest_novo_w			bigint;
nr_seq_prest_ant_w			bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_guia_plano
	where	cd_estabelecimento	= cd_estab_origem_p
	order by nr_sequencia;	

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_guia_plano_proc
	where	nr_seq_guia		= nr_seq_guia_plano_ant_w;

C03 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_guia_plano_mat
	where	nr_seq_guia 		= nr_seq_guia_plano_ant_w;
	
C04 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_guia_glosa
	where (nr_seq_guia 		= nr_seq_guia_glosa_w or coalesce(nr_seq_guia_glosa_w::text, '') = '')
	and (nr_seq_guia_proc	= nr_seq_guia_plano_proc_ant_w or coalesce(nr_seq_guia_plano_proc_ant_w::text, '') = '')
	and (nr_seq_guia_mat	=  nr_seq_guia_plano_mat_ant_w or coalesce(nr_seq_guia_plano_mat_ant_w::text, '') = '');

C05 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_guia_plano_historico
	where	nr_seq_guia		= nr_seq_guia_plano_ant_w;

C06 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_diagnostico
	where	nr_seq_guia		= nr_seq_guia_plano_ant_w;

C07 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_guia_plano_anexo
	where	nr_seq_guia		= nr_seq_guia_plano_ant_w;
					

BEGIN

open C01;
loop
fetch C01 into	
	nr_seq_guia_plano_ant_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	select	nr_seq_segurado,
		nr_seq_plano,
		nr_seq_prestador
	into STRICT	nr_seq_segurado_ant_w,
		nr_seq_plano_ant_w,
		nr_seq_prest_ant_w
	from	pls_guia_plano
	where	nr_sequencia	= nr_seq_guia_plano_ant_w;
	
	begin
	select	nr_sequencia
	into STRICT	nr_seq_segurado_w
	from	pls_segurado
	where	nr_seq_contrato_ant	= nr_seq_segurado_ant_w;
	exception
	when others then
		nr_seq_segurado_w	:= nr_seq_segurado_ant_w;
	end;
	
	begin
	select	nr_sequencia
	into STRICT	nr_seq_plano_novo_w
	from	pls_plano
	where	nr_seq_plano_ant	= nr_seq_plano_ant_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	exception
	when others then
		nr_seq_plano_novo_w	:= nr_seq_plano_ant_w;
	end;
	
	begin
	select	nr_sequencia
	into STRICT	nr_seq_prest_novo_w
	from	pls_prestador
	where	nr_seq_anterior        	= nr_seq_prest_ant_w
	and	cd_estabelecimento	= cd_estab_destino_p;
	exception
	when others then
		nr_seq_prest_novo_w	:= nr_seq_prest_ant_w;
	end;
	
	select	count(*)
	into STRICT	qt_registro_w
	from	pls_guia_plano
	where	cd_estabelecimento	= cd_estab_destino_p
	and	nr_seq_guia_plano_ant	= nr_seq_guia_plano_ant_w;
	
	if (qt_registro_w	= 0) then	
		select	nextval('pls_guia_plano_seq')
		into STRICT	nr_seq_guia_plano_w
		;

		insert	into pls_guia_plano(nr_sequencia, dt_atualizacao, nm_usuario,
			 dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_segurado,
			 cd_guia, ie_tipo_guia, ie_situacao,
			 cd_estabelecimento, ie_tipo_processo, ie_status,
			 dt_solicitacao, nr_seq_plano, ie_estagio,
			 dt_cancelamento, dt_autorizacao, cd_medico_solicitante, 
			 nr_seq_prestador,ie_carater_internacao, cd_guia_principal, 
			 cd_senha, dt_validade_senha, dt_emissao, 
			 ie_tipo_atend_tiss, nr_seq_motivo_cancel, nr_seq_motivo_lib, 
			 ds_indicacao_clinica, ds_observacao, nr_seq_guia_plano_ant, 
			 ie_saude_ocupacional, ie_regime_atendimento, ie_cobertura_especial)
		(SELECT	 nr_seq_guia_plano_w, clock_timestamp(), nm_usuario_p,
			 clock_timestamp(), nm_usuario_p, nr_seq_segurado_w,
			 cd_guia, ie_tipo_guia, ie_situacao,
			 cd_estab_destino_p,ie_tipo_processo, ie_status,
			 clock_timestamp(), nr_seq_plano_novo_w, ie_estagio,
			 dt_cancelamento, dt_autorizacao, cd_medico_solicitante, 
			 nr_seq_prest_novo_w,ie_carater_internacao, cd_guia_principal, 
			 cd_senha, dt_validade_senha, dt_emissao, 
			 ie_tipo_atend_tiss, nr_seq_motivo_cancel, nr_seq_motivo_lib, 
			 ds_indicacao_clinica, ds_observacao, nr_seq_guia_plano_ant_w, 
			 ie_saude_ocupacional, ie_regime_atendimento, ie_cobertura_especial
		from	 pls_guia_plano
		where	 nr_sequencia		= nr_seq_guia_plano_ant_w );
		
		open C02;
		loop
		fetch C02 into	
			nr_seq_guia_plano_proc_ant_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			nr_seq_guia_glosa_w		:= null;
			nr_seq_guia_plano_mat_ant_w	:= null;
			
			select	nextval('pls_guia_plano_proc_seq')
			into STRICT	nr_seq_guia_plano_proc_w
			;
			
			insert	into pls_guia_plano_proc(nr_sequencia, dt_atualizacao, nm_usuario,
				 dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_guia,
				 cd_procedimento, ie_origem_proced, qt_autorizada,
				 qt_solicitada, ie_status, dt_liberacao,
				 nm_usuario_liberacao, cd_procedimento_imp, ds_procedimento_imp,
				 qt_solicitada_imp, nr_seq_prorrog, cd_tipo_tabela_imp,
				 nr_seq_tipo_limitacao, nr_seq_regra_liberacao, nr_seq_motivo_exc,
				 ie_utilizado, qt_utilizado, ie_cobranca_prevista)
			(SELECT	 nr_seq_guia_plano_proc_w, clock_timestamp(), nm_usuario_p,
				 clock_timestamp(), nm_usuario_p, nr_seq_guia_plano_w,
				 cd_procedimento, ie_origem_proced, qt_autorizada,
				 qt_solicitada, ie_status, dt_liberacao,
				 nm_usuario_liberacao, cd_procedimento_imp, ds_procedimento_imp,
				 qt_solicitada_imp, nr_seq_prorrog, cd_tipo_tabela_imp,
				 nr_seq_tipo_limitacao, nr_seq_regra_liberacao, nr_seq_motivo_exc,
				 ie_utilizado, qt_utilizado, ie_cobranca_prevista
			from	 pls_guia_plano_proc
			where	 nr_sequencia 		= nr_seq_guia_plano_proc_ant_w);
			
			open C04;
			loop
			fetch C04 into	
				nr_seq_guia_glosa_proc_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin
				insert	into pls_guia_glosa(nr_sequencia, dt_atualizacao, nm_usuario,
					 dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_guia,
					 nr_seq_guia_proc, nr_seq_guia_mat, nr_seq_motivo_glosa,
					 ds_observacao, ie_origem, nr_seq_regra, ds_origem_glosa)
				(SELECT	 nextval('pls_guia_glosa_seq'), clock_timestamp(), nm_usuario_p,
					 clock_timestamp(), nm_usuario_p, null,
					 nr_seq_guia_plano_proc_w, null, nr_seq_motivo_glosa,
					 ds_observacao, ie_origem, nr_seq_regra, ds_origem_glosa
				from	 pls_guia_glosa
				where	 nr_sequencia	= nr_seq_guia_glosa_proc_w );

				end;
			end loop;
			close C04;
			end;
		end loop;
		close C02;

		open C03;
		loop
		fetch C03 into	
			nr_seq_guia_plano_mat_ant_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			nr_seq_guia_glosa_w		:= null;
			nr_seq_guia_plano_proc_ant_w	:= null;
			
			select	nextval('pls_guia_plano_mat_seq')
			into STRICT	nr_seq_guia_plano_mat_w
			;

			
			insert into pls_guia_plano_mat(nr_sequencia, dt_atualizacao, nm_usuario,
				 dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_guia,
				 qt_solicitada, qt_autorizada, ie_status,
				 dt_liberacao, nm_usuario_liberacao, cd_material_imp,
				 ds_material_imp, qt_solicitada_imp, nr_seq_prorrog,
				 cd_tipo_tabela_imp, nr_seq_motivo_exc, nr_seq_material,
				 ie_utilizado, qt_utilizado)
			(SELECT  nr_seq_guia_plano_mat_w, clock_timestamp(), nm_usuario_p,
				 clock_timestamp(), nm_usuario_p, nr_seq_guia_plano_w,
				 qt_solicitada,qt_autorizada, ie_status,
				 dt_liberacao, nm_usuario_liberacao, cd_material_imp,
				 ds_material_imp, qt_solicitada_imp, nr_seq_prorrog,
				 cd_tipo_tabela_imp, nr_seq_motivo_exc, nr_seq_material,
				 ie_utilizado, qt_utilizado
			from	 pls_guia_plano_mat
			where	 nr_sequencia		= nr_seq_guia_plano_mat_ant_w );
			
			open C04;
			loop
			fetch C04 into	
				nr_seq_guia_glosa_mat_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin
				insert	into pls_guia_glosa(nr_sequencia, dt_atualizacao, nm_usuario,
					 dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_guia,
					 nr_seq_guia_proc, nr_seq_guia_mat, nr_seq_motivo_glosa,
					 ds_observacao, ie_origem, nr_seq_regra, ds_origem_glosa)
				(SELECT	 nextval('pls_guia_glosa_seq'), clock_timestamp(), nm_usuario_p,
					 clock_timestamp(), nm_usuario_p, null,
					 null, nr_seq_guia_plano_mat_w, nr_seq_motivo_glosa,
					 ds_observacao, ie_origem, nr_seq_regra, ds_origem_glosa
				from	 pls_guia_glosa
				where	 nr_sequencia	= nr_seq_guia_glosa_mat_w);

				end;
			end loop;
			close C04;
			end;
		end loop;
		close C03;
		
		nr_seq_guia_plano_proc_ant_w	:= null;
		nr_seq_guia_plano_mat_ant_w	:= null;
		nr_seq_guia_glosa_w		:= nr_seq_guia_plano_ant_w;
		
		open C04;
		loop
		fetch C04 into	
			nr_seq_guia_plano_glosa_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin	
			insert	into pls_guia_glosa(nr_sequencia, dt_atualizacao, nm_usuario,
				 dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_guia,
				 nr_seq_guia_proc, nr_seq_guia_mat, nr_seq_motivo_glosa,
				 ds_observacao, ie_origem, nr_seq_regra, ds_origem_glosa)
			(SELECT	 nextval('pls_guia_glosa_seq'), clock_timestamp(), nm_usuario_p,
				 clock_timestamp(), nm_usuario_p, nr_seq_guia_plano_w,
				 null, null, nr_seq_motivo_glosa,
				 ds_observacao, ie_origem, nr_seq_regra, ds_origem_glosa
			from	 pls_guia_glosa
			where	 nr_sequencia		= nr_seq_guia_plano_glosa_w);
			end;
		end loop;
		close C04;

		open C05;
		loop
		fetch C05 into	
			nr_seq_guia_plano_hist_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin
			insert	into pls_guia_plano_historico(nr_sequencia, nr_seq_guia, ie_tipo_historico,
				 dt_historico, dt_atualizacao, nm_usuario,
				 ds_observacao, ie_origem_historico)
			(SELECT	 nextval('pls_guia_plano_historico_seq'), nr_seq_guia_plano_w, ie_tipo_historico,
				 dt_historico, clock_timestamp(), nm_usuario_p,
				 ds_observacao, ie_origem_historico
			from	 pls_guia_plano_historico
			where	 nr_sequencia		= nr_seq_guia_plano_hist_w);
			end;
		end loop;
		close C05;
		
		open C06;
		loop
		fetch C06 into	
			nr_seq_guia_plan_diag_w;
		EXIT WHEN NOT FOUND; /* apply on C06 */
			begin
			insert into pls_diagnostico(nr_sequencia,	cd_doenca, cd_doenca_imp, ds_diagnostico,
				 ds_diagnostico_imp, dt_atualizacao, dt_atualizacao_nrec,
				 ie_classificacao, ie_classificacao_imp, ie_indicacao_acidente,
				 ie_indicacao_acidente_imp, ie_tipo_doenca, ie_tipo_doenca_imp,
				 nm_tabela_imp, nm_usuario, nm_usuario_nrec, nr_seq_guia)
			(SELECT  nextval('pls_diagnostico_seq'),cd_doenca, cd_doenca_imp, ds_diagnostico,
				 ds_diagnostico_imp, clock_timestamp(), clock_timestamp(),
				 ie_classificacao, ie_classificacao_imp, ie_indicacao_acidente,
				 ie_indicacao_acidente_imp, ie_tipo_doenca, ie_tipo_doenca_imp,
				 nm_tabela_imp, nm_usuario_p, nm_usuario_p, nr_seq_guia_plano_w
			from	 pls_diagnostico
			where	 nr_sequencia		= nr_seq_guia_plan_diag_w);
			end;
		end loop;
		close C06;
		
		open C07;
		loop
		fetch C07 into	
			nr_seq_guia_plano_anexo_w;
		EXIT WHEN NOT FOUND; /* apply on C07 */
			begin
			insert	into pls_guia_plano_anexo(nr_sequencia, nr_seq_guia, dt_anexo,
				 ds_anexo, dt_atualizacao, nm_usuario,
				 dt_atualizacao_nrec, nm_usuario_nrec)
			(SELECT	 nextval('pls_guia_plano_anexo_seq'), nr_seq_guia_plano_w, dt_anexo,
				 ds_anexo, clock_timestamp(), nm_usuario_p,
				 clock_timestamp(), nm_usuario_p
			from	 pls_guia_plano_anexo
			where	 nr_sequencia		= nr_seq_guia_plano_anexo_w);
			end;
		end loop;
		close C07;
	end if;
	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_copiar_autorizacao_estab ( cd_estab_origem_p bigint, cd_estab_destino_p bigint, nm_usuario_p text) FROM PUBLIC;

