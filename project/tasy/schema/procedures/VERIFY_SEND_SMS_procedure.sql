-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE verify_send_sms ( nr_celular_p text, cd_pessoa_fisica_p text, cd_agenda_p bigint, nr_seq_agenda_p bigint, ie_return_p INOUT text) AS $body$
DECLARE


	cd_pessoa_fisica_w		varchar(20);
	cd_estabelecimento_w		bigint;
	nr_celular_w			varchar(50);
	ds_remetente_p			varchar(255);
	cd_estab_logado_w		bigint;
	cd_estab_agenda_w		bigint;
	nr_ddd_celular_w		varchar(50);
	nr_telefone_celular_w		varchar(50);
	ie_utiliza_DDD_w 		varchar(1);
	ie_consist_destinatario_w	varchar(1);
	ie_retorno_DDI_w		varchar(1);
	qt_dias_confirmacao_w		bigint;
	qt_dias_confirmacao_ww		bigint;
	nr_celular_new_w		varchar(50);
	ie_return_w			varchar(1) := 'S';
	cd_tipo_agenda_w		bigint;
	nr_seq_ageint_w			bigint;
	qt_existe_log_seq_w		bigint;
	ie_status_agenda_w 		varchar(3);
	dt_cancelamento_w  		timestamp;
	


BEGIN

	cd_estab_logado_w	:= coalesce(obter_estabelecimento_ativo,1);
	ds_remetente_p		:= Obter_Valor_Param_Usuario(0, 63, obter_perfil_ativo, obter_usuario_ativo, coalesce(cd_estab_agenda_w,cd_estab_logado_w));
	ie_utiliza_DDD_w := Obter_param_Usuario(821, 324, obter_perfil_ativo, obter_usuario_ativo, coalesce(cd_estab_agenda_w,cd_estab_logado_w), ie_utiliza_DDD_w);
	ie_retorno_DDI_w := Obter_param_Usuario(821, 501, obter_perfil_ativo, obter_usuario_ativo, coalesce(cd_estab_agenda_w,cd_estab_logado_w), ie_retorno_DDI_w);
	ie_consist_destinatario_w := Obter_Param_Usuario(0, 214, obter_perfil_ativo, obter_usuario_ativo, coalesce(cd_estab_agenda_w,cd_estab_logado_w), ie_consist_destinatario_w);
	
	nr_celular_w		:= trim(both nr_celular_p);
	nr_celular_new_w	:= nr_celular_w;	
	nr_ddd_celular_w	:= trim(both substr(nr_celular_w,3,2));
	nr_telefone_celular_w	:= trim(both substr(nr_celular_w,5,50));

	if (coalesce(ie_retorno_DDI_w,'S') = 'S') then
		if (substr(nr_celular_w,1,2) = '55') then		
			select 	substr(nr_celular_p,3,12)
			into STRICT 	nr_celular_w		
			;
		end if;
		nr_ddd_celular_w	:= trim(both substr(nr_celular_w,1,2));
		nr_telefone_celular_w	:= trim(both substr(nr_celular_w,3,50));
	else
		if (substr(nr_celular_w,1,2) <> '55') then
			nr_celular_w :=  '55'|| nr_celular_p;
			nr_ddd_celular_w	:= trim(both substr(nr_celular_w,3,2));
			nr_telefone_celular_w	:= trim(both substr(nr_celular_w,5,50));
		end if;
	end if;	
	if (ie_consist_destinatario_w = 'I') then
		nr_celular_w := nr_celular_new_w;
	else
		if ((ie_consist_destinatario_w <> 'N') and (substr(nr_celular_new_w,1,2) = '55') and ( Length(nr_celular_new_w) > 11))  then
			nr_celular_w := substr(nr_celular_new_w,3,length(nr_celular_new_w));
		else
			begin
				if(((substr(nr_celular_new_w,1,3) = '055') OR (substr(nr_celular_new_w,1,3) = '+55') OR (substr(nr_celular_new_w,1,2) = '55')) and (Length(nr_celular_new_w) > 11)) then

					  if ((substr(nr_celular_new_w,1,3) = '055') OR (substr(nr_celular_new_w,1,3) = '+55')) then
						nr_celular_w := substr(nr_celular_new_w, 4, Length(nr_celular_new_w));
					  else
						nr_celular_w := substr(nr_celular_new_w, 3, Length(nr_celular_new_w));
					  end if;				
				end if;
			end;
		end if;
		nr_telefone_celular_w	:= trim(both substr(nr_celular_w,3,50));
	end if;
	
	
	if coalesce(cd_pessoa_fisica_p::text, '') = '' then
	begin
		select 	a.cd_pessoa_fisica
		into STRICT 	cd_pessoa_fisica_w
		FROM pessoa_fisica a
LEFT OUTER JOIN person_permissions b ON (a.CD_PESSOA_FISICA = b.CD_PESSOA_FISICA)
WHERE (coalesce(b.ie_receive_sms, 'S') = 'N') and somente_numero(a.nr_telefone_celular) = somente_numero(nr_ddd_celular_w || nr_telefone_celular_w) and coalesce(dt_obito::text, '') = ''   LIMIT 1;

		exception
		when no_data_found then
		begin
			select 	a.cd_pessoa_fisica
			into STRICT 	cd_pessoa_fisica_w
			FROM pessoa_fisica a
LEFT OUTER JOIN person_permissions b ON (a.CD_PESSOA_FISICA = b.CD_PESSOA_FISICA)
WHERE (coalesce(b.ie_receive_sms, 'S') = 'N') and somente_numero(nr_telefone_celular) = somente_numero(nr_celular_w) and coalesce(dt_obito::text, '') = ''   LIMIT 1;
			
			exception
			when no_data_found then

			begin
				select	a.cd_pessoa_fisica
				into STRICT	cd_pessoa_fisica_w
				FROM pessoa_fisica a
LEFT OUTER JOIN person_permissions b ON (a.CD_PESSOA_FISICA = b.CD_PESSOA_FISICA)
WHERE (coalesce(b.ie_receive_sms, 'S') = 'N') and a.nr_telefone_celular	= nr_celular_w and coalesce(a.dt_obito::text, '') = ''   LIMIT 1;

			exception

			  when no_data_found then

				begin

					select	a.cd_pessoa_fisica
					into STRICT	cd_pessoa_fisica_w
					FROM pessoa_fisica a
LEFT OUTER JOIN person_permissions b ON (a.CD_PESSOA_FISICA = b.CD_PESSOA_FISICA)
WHERE (coalesce(b.ie_receive_sms, 'S') = 'N') and a.nr_ddd_celular	= nr_ddd_celular_w and a.nr_telefone_celular	= nr_telefone_celular_w and coalesce(a.dt_obito::text, '') = ''   LIMIT 1;

				exception

				when no_data_found then
					begin
						select 	a.cd_pessoa_fisica
						into STRICT	cd_pessoa_fisica_w
						FROM pessoa_fisica a
LEFT OUTER JOIN person_permissions b ON (a.CD_PESSOA_FISICA = b.CD_PESSOA_FISICA)
WHERE (coalesce(b.ie_receive_sms, 'S') = 'N') and somente_numero(a.nr_telefone_celular)	= somente_numero(nr_ddd_celular_w||nr_telefone_celular_w) and coalesce(a.dt_obito::text, '') = ''   LIMIT 1;
					exception
					when no_data_found then
					begin
						select	a.cd_pessoa_fisica
						into STRICT	cd_pessoa_fisica_w
						FROM pessoa_fisica a
LEFT OUTER JOIN person_permissions b ON (a.CD_PESSOA_FISICA = b.CD_PESSOA_FISICA)
WHERE (coalesce(b.ie_receive_sms, 'S') = 'N') and somente_numero(a.nr_telefone_celular)	= somente_numero(nr_celular_w) and coalesce(a.dt_obito::text, '') = '';

						exception
						when no_data_found then

						select	max(a.cd_pessoa_fisica)
						into STRICT 	cd_pessoa_fisica_w
						FROM pessoa_fisica a
LEFT OUTER JOIN person_permissions b ON (a.CD_PESSOA_FISICA = b.CD_PESSOA_FISICA)
WHERE (coalesce(b.ie_receive_sms, 'S') = 'N') and somente_numero(a.nr_ddi_celular || a.nr_telefone_celular)	= 	 somente_numero(nr_celular_w) and coalesce(a.dt_obito::text, '') = '';
					end;
				end;
			end;
		end;
	end;
	
	if 	(cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
		ie_return_w := 'N';
	end if;

	
end;

else
	select 	coalesce(max(ie_receive_sms), 'S') ie_receive_sms
	into STRICT 	ie_return_w
	from 	person_permissions
	where 	cd_pessoa_fisica = cd_pessoa_fisica_p;
end if;


if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') 	and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') then
	
	select 	coalesce(max(cd_tipo_agenda),0)
	into STRICT	cd_tipo_agenda_w
	from	agenda
	where	cd_agenda = cd_agenda_p;
	
	if (coalesce(cd_tipo_agenda_w,0) = 2) then

		select	coalesce(max(nr_seq_agenda_int),'')
		into STRICT	nr_seq_ageint_w
		from	agenda_integrada_item
		where 	nr_seq_agenda_exame = nr_seq_agenda_p;

		select 	coalesce(max(ie_status_agenda),''), coalesce(max(dt_cancelamento),clock_timestamp())
    		into STRICT 	ie_status_agenda_w, dt_cancelamento_w
    		from 	agenda_paciente
		where 	nr_sequencia = nr_seq_agenda_p;

	elsif (coalesce(cd_tipo_agenda_w,0) in (3,4,5)) then

		select	coalesce(max(nr_seq_agenda_int),'')
		into STRICT	nr_seq_ageint_w
		from	agenda_integrada_item
		where 	nr_seq_agenda_cons = nr_seq_agenda_p;

		select 	coalesce(max(ie_status_agenda),''), coalesce(max(dt_cancelamento),clock_timestamp())
    		into STRICT 	ie_status_agenda_w, dt_cancelamento_w
    		from 	agenda_consulta
    		where 	nr_sequencia = nr_seq_agenda_p;

	end if;
	
	/*Verificar se já não existe um log gravado para o NR_SEQ_AGENDA_P passado por parâmetro*/

	select	count(*)
	into STRICT	qt_existe_log_seq_w
	from	log_envio_sms
	where	nr_seq_agenda = nr_seq_agenda_p;

	if (qt_existe_log_seq_w > 0 and ie_status_agenda_w = 'C') then
	
    		select 	count(*)
    		into STRICT 	qt_existe_log_seq_w
    		from 	log_envio_sms
    		where 	nr_seq_agenda = nr_seq_agenda_p
  		and   	dt_envio between dt_cancelamento_w and clock_timestamp();
		
  	end if;
end if;


if (ie_return_w = 'N' and qt_existe_log_seq_w = 0 and (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '')) then	
	insert into log_envio_sms(
		nr_sequencia,
		dt_atualizacao_nrec,
		nm_usuario_nrec,	
		dt_atualizacao,
		nm_usuario,
		dt_envio,
		cd_agenda,
		nr_seq_agenda,
		nr_telefone,
		ds_mensagem,
		id_sms,
		nr_seq_ageint)
	values (
		nextval('log_envio_sms_seq'),
		clock_timestamp(), 	
		'Tasy',
		clock_timestamp(),
		'Tasy',
		clock_timestamp(),
		cd_agenda_p,
		nr_seq_agenda_p,
		nr_celular_p,
		wheb_mensagem_pck.GET_TEXTO(1103204,null), --'SMS not sent, as the patient has opted not to receive SMS',
		1,
		nr_seq_ageint_w);
	commit;
end if;
  ie_return_p := ie_return_w;
	
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE verify_send_sms ( nr_celular_p text, cd_pessoa_fisica_p text, cd_agenda_p bigint, nr_seq_agenda_p bigint, ie_return_p INOUT text) FROM PUBLIC;

