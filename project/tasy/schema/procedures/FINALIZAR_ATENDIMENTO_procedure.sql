-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE finalizar_atendimento ( nr_atendimento_p bigint, ie_fechar_contas_p text, nm_usuario_p text, ds_erro_p INOUT text) AS $body$
DECLARE


nr_interno_conta_w			bigint	:= 0;
ie_status_acerto_w			smallint	:= 0;
ds_inconsistencia_w		varchar(255)	:= 0;
ds_erro_w			varchar(255) 	:= '';
ie_fecha_atendimento_w		varchar(01)	:= 'S';
ie_fecha_conta_w			varchar(01)	:= 'S';
ie_fecha_conta_SUS_w		varchar(01)	:= 'S';
ie_fecha_geral_w			varchar(01)	:= 'S';
qt_processo_pendente_w		bigint	:= 0;
nr_contas_w			integer	:= 0;
ie_censo_diario_w			varchar(01)	:= 'S';
ie_fechar_cta_atend_w		varchar(2);
dt_alta_w				timestamp;
ie_tipo_convenio_w			smallint;
qt_reg_sus_inco_w			integer	:= 0;
qt_proc_sus_unif_w			integer	:= 0;
ie_gera_novo_atend_w		varchar(1);
ie_etapa_conta_w			varchar(200);
cd_estabelecimento_w		integer;
cd_estab_usuario_w		integer;
ie_recalcular_sus_w		varchar(10);
cd_convenio_w			bigint;
ie_insere_prot_bpa_w		varchar(15)	:= 'N';
ie_tipo_atendimento_w		smallint;
qt_apac_w			bigint;
ie_racalcular_fechar_w		varchar(1);
ds_erro_fpo_w			varchar(255) 	:= '';
ie_fechar_fat_tiss_w		varchar(1);
ie_recal_conta_w			varchar(15)	:= 'N';
qtd_conta_w			bigint;
ie_fechar_atend_rn_w		varchar(1);
ie_fecha_rn_sem_conta_w		varchar(1);
cd_convenio_parametro_w		bigint;
ie_recalc_fechar_convenio_w		varchar(1);

C010 CURSOR FOR
	SELECT	nr_interno_conta,
			ie_status_acerto,
			ds_inconsistencia,
			obter_tipo_convenio(cd_convenio_parametro),
			cd_estabelecimento,
			cd_convenio_parametro
	from	conta_paciente
	where	nr_atendimento	= nr_atendimento_p;


BEGIN

begin
cd_estab_usuario_w := coalesce(wheb_usuario_pck.get_cd_estabelecimento,0);
exception
when others then
	cd_estab_usuario_w := 0;
end;

select	count(*)
into STRICT	nr_contas_w
from	conta_paciente
where	nr_atendimento = nr_atendimento_p;

ie_recalcular_sus_w	:= coalesce(Obter_Valor_Param_Usuario(1123,42,Obter_Perfil_Ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_insere_prot_bpa_w	:= coalesce(Obter_Valor_Param_Usuario(1125,130,Obter_Perfil_Ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_racalcular_fechar_w	:= coalesce(Obter_Valor_Param_Usuario(67,327,Obter_Perfil_Ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_fechar_fat_tiss_w	:= coalesce(Obter_Valor_Param_Usuario(67,505,Obter_Perfil_Ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_fechar_atend_rn_w	:= coalesce(Obter_Valor_Param_Usuario(67,590,Obter_Perfil_Ativo,nm_usuario_p,cd_estab_usuario_w),'N');

select coalesce(max(b.ie_censo_diario),'S'),
	coalesce(max(a.dt_alta), null),
	coalesce(max(b.ie_gera_novo_atend),'N'),
	max(a.ie_tipo_atendimento)
into STRICT	ie_censo_diario_w,
	dt_alta_w,
	ie_gera_novo_atend_w,
	ie_tipo_atendimento_w
from	motivo_alta b,
	atendimento_paciente a
where	a.cd_motivo_alta = b.cd_motivo_alta
and	a.nr_atendimento = nr_atendimento_p;

ie_fecha_rn_sem_conta_w:= 'N';
if (nr_atendimento_p = 0) then
	ie_fecha_rn_sem_conta_w:= 'N';
elsif (ie_fechar_atend_rn_w = 'M') then
	ie_fecha_rn_sem_conta_w:= 'S';
end if;

if (nr_contas_w = 0) and (ie_fecha_rn_sem_conta_w = 'N') and (ie_censo_diario_w = 'S')	then
	ie_fecha_geral_w := 'N';
end if;

/* Elemar em 11/03/04 */

if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then
	update conta_paciente
	set ds_inconsistencia = retirar_inconsistencia_lista(ds_inconsistencia,'1')
	where nr_atendimento = nr_atendimento_p;
end if;

open c010;
loop
	fetch c010	into
			nr_interno_conta_w,
			ie_status_acerto_w,
			ds_inconsistencia_w,
			ie_tipo_convenio_w,
			cd_estabelecimento_w,
			cd_convenio_parametro_w;
	EXIT WHEN NOT FOUND; /* apply on c010 */
		begin

		if (ie_status_acerto_w = 1) then
			if (ie_tipo_convenio_w	= 3) then
				select	count(*)
				into STRICT	qt_proc_sus_unif_w
				from	procedimento_paciente
				where	nr_interno_conta	= nr_interno_conta_w
				and	ie_origem_proced	= 7;

				if (qt_proc_sus_unif_w	> 0) then
					CALL sus_consiste_conta(nr_interno_conta_w, nr_atendimento_p, nm_usuario_p);
				end if;

				select	count(*)
				into STRICT	qt_reg_sus_inco_w
				from 	sus_consistencia_conta s,
					sus_inconsistencia i
				where 	s.nr_interno_conta	= nr_interno_conta_w
				and	i.nr_sequencia		= s.nr_seq_inconsistencia
				and	coalesce(Sus_Obter_Se_Consiste_Estab(i.nr_sequencia, s.cd_estabelecimento,'C'),i.ie_consiste) = 'S'
				and	coalesce(Sus_Obter_Se_Consiste_Estab(i.nr_sequencia, s.cd_estabelecimento,'L'),i.ie_permite_liberar) = 'N';

				if (qt_reg_sus_inco_w	> 0) and (ie_gera_novo_atend_w = 'N') then /* Rafael em 8/2/7 OS82321 incluí o teste do "ie_gera_novo_atend_w" */
					ds_erro_w		:= WHEB_MENSAGEM_PCK.get_texto(281121) || to_char(nr_interno_conta_w) || WHEB_MENSAGEM_PCK.get_texto(281122);
					ie_fecha_conta_SUS_w 	:= 'N';
				end if;

			end if;
			SELECT * FROM consiste_conta_paciente(
				nr_interno_conta_w, nr_atendimento_p, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w;
		else	/* Edgar 17/12/2004, OS 13532, não estava retirando a inconsistencia 5 */
		SELECT * FROM consiste_conta_paciente(
				nr_interno_conta_w, nr_atendimento_p, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w;

			update	conta_paciente
			set	ds_inconsistencia	= retirar_inconsistencia_lista(ds_inconsistencia_w,'5')
			where	nr_interno_conta	= nr_interno_conta_w;
			ds_inconsistencia_w		:= retirar_inconsistencia_lista(ds_inconsistencia_w,'5');
		end if;

		/* Elemar em 11/03/04 incluí select e teste no if abaixo*/

		select OBTER_FECHAR_CTA_ATEND(nr_interno_conta_w)
		into STRICT ie_fechar_cta_atend_w
		;

		if (ie_fechar_contas_p = 'S') and (ie_status_acerto_w = 1) and (ie_fecha_conta_w = 'S') and (substr(ie_fechar_cta_atend_w,1,1) = 'S') and (ie_fecha_conta_SUS_w = 'S')	then


			ie_etapa_conta_w	:= Obter_Se_Conta_Exige_Etapa(nr_interno_conta_w,cd_estabelecimento_w);
			if (ie_etapa_conta_w	= 'S') and (obter_funcao_Ativa	= 67) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(191038,'NR_INTERNO_CONTA='||nr_interno_conta_w);
				/*Este convênio exige a informação de etapas da conta!.'||chr(13)||'Conta : '||nr_interno_conta_w */

			end if;


			if (ie_racalcular_fechar_w = 'R') then

				select 	coalesce(max(ie_recalcular_conta),'N')
				into STRICT	ie_recalc_fechar_convenio_w
				from 	convenio_estabelecimento
				where 	cd_convenio = cd_convenio_parametro_w
				and 	cd_estabelecimento = cd_estabelecimento_w;

				if (ie_recalc_fechar_convenio_w = 'S') then
					CALL recalcular_conta_paciente(nr_interno_conta_w,nm_usuario_p);
					ie_recal_conta_w := 'S';
				end if;

			end if;


			if (ie_racalcular_fechar_w = 'S') then
				CALL recalcular_conta_paciente(nr_interno_conta_w,nm_usuario_p);
				ie_recal_conta_w := 'S';
			end if;

			select	count(*)
			into STRICT	qtd_conta_w
			from	conta_paciente a
			where	a.nr_interno_conta	= nr_interno_conta_w;

			if (qtd_conta_w > 0) then
				if (ie_fechar_fat_tiss_w = 'S') then
					CALL atualizar_tipo_fatur_tiss(nr_interno_conta_w);
				end if;

				ds_inconsistencia_w := fechar_conta_paciente(
					nr_interno_conta_w, nr_atendimento_p, 2, nm_usuario_p, ds_inconsistencia_w);

				if (Obter_Funcao_Ativa	= 1123) and (ie_recalcular_sus_w	= 'S') and (coalesce(ie_recal_conta_w,'N') = 'N') then
					CALL recalcular_conta_paciente(nr_interno_conta_w,'Wheb');

					select	count(*)
					into STRICT	qtd_conta_w
					from	conta_paciente a
					where	a.nr_interno_conta 	= nr_interno_conta_w;
				end if;

				if (qtd_conta_w > 0) then

					select ie_status_acerto
					into STRICT	ie_status_acerto_w
					from conta_paciente
					where nr_interno_conta = nr_interno_conta_w;

					SELECT * FROM consiste_conta_paciente(
						nr_interno_conta_w, nr_atendimento_p, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w;

					if (ie_insere_prot_bpa_w = 'S') and (ie_tipo_convenio_w = 3) and (ie_tipo_atendimento_w <> 1) then
						begin

						select	count(*)
						into STRICT	qt_apac_w
						from	conta_paciente a
						where	a.nr_interno_conta = nr_interno_conta_w
						and (exists (SELECT	1
								from	sus_apac_unif s
								where	s.nr_interno_conta = a.nr_interno_conta) or
							exists (select	1
								from	procedimento_paciente p
								where	p.nr_interno_conta = a.nr_interno_conta
								and	sus_obter_tiporeg_proc(p.cd_procedimento,p.ie_origem_proced,'C',16) = 6));

						if (qt_apac_w = 0) then
							begin
							ds_erro_fpo_w := sus_insere_protocolo(nr_interno_conta_w, nm_usuario_p, cd_estabelecimento_w, 0, 'BPA', 'N', ds_erro_fpo_w);
							end;
						end if;

						end;
					end if;
				end if;
			end if;
		end if;

		if (ie_fecha_atendimento_w = 'N') or (ie_status_acerto_w = 1) or
			(ie_fecha_Conta_w = 'N' AND ie_status_acerto_w = 1) or (substr(ie_fechar_cta_atend_w,2,1) = 'N') or (ie_fecha_conta_SUS_w = 'N')	then
			ie_fecha_geral_w	:= 'N';
		end if;

		if (qt_reg_sus_inco_w	= 0) then
			ds_erro_w			:= substr(ds_erro_w || ds_inconsistencia_w,1,255);
		end if;

		end;
end loop;
close c010;

if (ie_fecha_geral_w = 'S') then
   	update 	atendimento_paciente
	set	dt_fim_conta 	= clock_timestamp(),
		ie_fim_conta	= 'F',
		nm_usuario	= nm_usuario_p
    	where 	nr_atendimento 	= nr_atendimento_p;

	CALL gerar_indic_clinico_atend(nr_atendimento_p, null, nm_usuario_p);
else
	update 	atendimento_paciente
	set	dt_fim_conta   	 = NULL,
		ie_fim_conta	= CASE WHEN qt_processo_pendente_w=0 THEN  'A'  ELSE 'P' END ,
		nm_usuario	= nm_usuario_p
	where 	nr_atendimento 	= nr_atendimento_p;
end if;

begin
CALL gerar_etapa_final_atendimento(nr_atendimento_p,nm_usuario_p);
exception
	when others then
	cd_convenio_w:= 0;
end;

ds_erro_p	 := ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE finalizar_atendimento ( nr_atendimento_p bigint, ie_fechar_contas_p text, nm_usuario_p text, ds_erro_p INOUT text) FROM PUBLIC;

