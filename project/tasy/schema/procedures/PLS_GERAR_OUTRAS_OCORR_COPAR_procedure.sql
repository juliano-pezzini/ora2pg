-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_outras_ocorr_copar ( nr_seq_regra_copart_p bigint, nr_seq_conta_proc_p bigint, nr_seq_segurado_p bigint, ie_outras_ocor_p INOUT text, qt_ocorrencias_p INOUT bigint) AS $body$
DECLARE


ie_outras_ocorrencias_w		varchar(1) := 'S';
qt_ocorrencia_grupo_serv_w	integer;
qt_periodo_ocor_w		integer;
ie_tipo_periodo_ocor_w		varchar(5);
nr_seq_grupo_serv_w		bigint;
qt_dias_regra_ocorrencias_w	bigint;
dt_regra_mes_w			timestamp;
qt_eventos_w			bigint;
qt_eventos_cobradas_w		bigint;
qt_total_eventos_w		bigint;
qt_liberados_w			bigint;
qt_ocorrencias_w		bigint;
nr_seq_conta_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_ano_calendario_out_ocor_w	varchar(10);
ie_consid_outra_ocor_regra_w	varchar(10);
dt_inicio_regra_w		timestamp;
dt_fim_regra_w			timestamp;
dt_item_w			timestamp;
cd_especialidade_w		bigint;
cd_grupo_w			bigint;
cd_area_w			bigint;
ie_origem_w			bigint;
nr_seq_tipo_coparticipacao_w	pls_regra_coparticipacao.nr_seq_tipo_coparticipacao%type;
ie_tipo_incidencia_w		pls_regra_coparticipacao.ie_tipo_incidencia%type;
nr_seq_titular_w		pls_segurado.nr_seq_titular%type;
nr_seq_segurado_w		pls_segurado.nr_seq_titular%type;
count_w				integer;
qt_procedimento_w		pls_conta_proc.qt_procedimento%type;
cd_estabelecimento_w		pls_conta.cd_estabelecimento%type;
ie_considerar_dt_lanc_cop_w	pls_parametros.ie_considerar_dt_lanc_copartc%type;
ie_forma_inicidencia_copart_w	pls_parametros.ie_forma_inicidencia_copart%type;

C01 CURSOR FOR
	--Tratamento somente para o beneficiário
	SELECT	a.cd_procedimento,
			a.ie_origem_proced,
		coalesce(a.qt_procedimento,0)
	from	pls_conta_proc		a,
		pls_conta		b,
		pls_segurado		c
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_segurado	= c.nr_sequencia
	and	c.nr_sequencia		= nr_seq_segurado_w
	and	ie_tipo_incidencia_w	= 'B'
	and	((b.ie_status		in ('S','F'))	or (a.nr_seq_conta	= nr_seq_conta_w and a.nr_sequencia < nr_seq_conta_proc_p))
	and	a.ie_status		!= 'D'
	and	a.nr_sequencia		<> nr_seq_conta_proc_p
	and	a.ie_tipo_despesa	<> '3'
	and	((a.dt_procedimento_referencia  <= dt_item_w) or (ie_considerar_dt_lanc_cop_w = 'N'))
	and  	coalesce(a.dt_procedimento,b.dt_atendimento_referencia) between dt_inicio_regra_w and dt_fim_regra_w
	
union all

	--Tratamento para titulares e dependentes
	SELECT	a.cd_procedimento,
			a.ie_origem_proced,
		coalesce(a.qt_procedimento,0)
	from	pls_conta_proc		a,
		pls_conta		b,
		pls_segurado		c
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_segurado	= c.nr_sequencia
	and	((c.nr_sequencia	= nr_seq_segurado_w) or (c.nr_seq_titular = nr_seq_titular_w))
	and	ie_tipo_incidencia_w	= 'T'
	and	((b.ie_status		in ('S','F'))	or (a.nr_seq_conta	= nr_seq_conta_w and a.nr_sequencia < nr_seq_conta_proc_p))
	and	a.ie_status		!= 'D'
	and	a.nr_sequencia		<> nr_seq_conta_proc_p
	and	a.ie_tipo_despesa	<> '3'
	and	((a.dt_procedimento_referencia  <= dt_item_w) or (ie_considerar_dt_lanc_cop_w = 'N'))
	and  	coalesce(a.dt_procedimento,b.dt_atendimento_referencia) between dt_inicio_regra_w and dt_fim_regra_w;

C02 CURSOR FOR
	SELECT	a.cd_procedimento,
			a.ie_origem_proced,
		coalesce(a.qt_procedimento,0)
	from	pls_conta_proc		a,
		pls_conta		b,
		pls_segurado		c
	where	a.nr_seq_conta		= b.nr_sequencia
	and	b.nr_seq_segurado	= c.nr_sequencia
	and	c.nr_sequencia		= nr_seq_segurado_p
	and	a.nr_sequencia		= nr_seq_conta_proc_p
	and	a.ie_tipo_despesa	<> '3'
	and  	coalesce(a.dt_procedimento,b.dt_atendimento_referencia) between dt_inicio_regra_w and dt_fim_regra_w;


BEGIN

begin
select	qt_ocorrencia_grupo_serv,
	qt_periodo_ocor,
	ie_tipo_periodo_ocor,
	nr_seq_grupo_serv,
	cd_procedimento,
	ie_origem_proced,
	coalesce(ie_ano_calendario_outras_ocor,'N'),
	coalesce(ie_considera_outra_ocor_regra,'N'),
	nr_seq_tipo_coparticipacao,
	coalesce(ie_tipo_incidencia,'B')
into STRICT	qt_ocorrencia_grupo_serv_w,
	qt_periodo_ocor_w,
	ie_tipo_periodo_ocor_w,
	nr_seq_grupo_serv_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	ie_ano_calendario_out_ocor_w,
	ie_consid_outra_ocor_regra_w,
	nr_seq_tipo_coparticipacao_w,
	ie_tipo_incidencia_w
from	pls_regra_coparticipacao
where	nr_sequencia	= nr_seq_regra_copart_p;
exception
when others then
	qt_ocorrencia_grupo_serv_w	:= null;
	qt_periodo_ocor_w		:= null;
	ie_tipo_periodo_ocor_w		:= null;
	nr_seq_grupo_serv_w		:= null;
	cd_procedimento_w		:= null;
	ie_origem_proced_w		:= null;
	ie_tipo_incidencia_w		:= 'B';
end;

if (ie_tipo_incidencia_w not in ('T','B')) then
	ie_tipo_incidencia_w	:= 'B';
end if;

select	a.nr_seq_conta,
	coalesce(a.dt_procedimento,b.dt_atendimento_referencia),
	b.cd_estabelecimento
into STRICT	nr_seq_conta_w,
	dt_item_w,
	cd_estabelecimento_w
from	pls_conta_proc	a,
	pls_conta	b
where	a.nr_seq_conta	= b.nr_sequencia
and	a.nr_sequencia	= nr_seq_conta_proc_p;

--max para evitar no data found(retornará no máximo um registro)
select	max(ie_considerar_dt_lanc_copartc),
	coalesce(max(ie_forma_inicidencia_copart),'N')
into STRICT	ie_considerar_dt_lanc_cop_w,
	ie_forma_inicidencia_copart_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(ie_considerar_dt_lanc_cop_w,'X') not in ('S','N')) then
	ie_considerar_dt_lanc_cop_w	:= 'N';
end if;

/*aaschlote 28/03/2011 os - 294117*/

if (qt_ocorrencia_grupo_serv_w IS NOT NULL AND qt_ocorrencia_grupo_serv_w::text <> '') and
	((qt_periodo_ocor_w IS NOT NULL AND qt_periodo_ocor_w::text <> '') and (ie_tipo_periodo_ocor_w IS NOT NULL AND ie_tipo_periodo_ocor_w::text <> '') or (ie_ano_calendario_out_ocor_w = 'S')) then

	if (ie_tipo_incidencia_w = 'T') then
		select	nr_seq_titular
		into STRICT	nr_seq_titular_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_p;

		--Caso o usuário for dependente, então o segurado assume a variavel do titular
		if (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then
			nr_seq_segurado_w	:= nr_seq_titular_w;
		else
			nr_seq_titular_w	:= nr_seq_segurado_p;
			nr_seq_segurado_w	:= nr_seq_segurado_p;
		end if;
	else
		nr_seq_segurado_w	:= nr_seq_segurado_p;
	end if;

	if (ie_ano_calendario_out_ocor_w = 'S') then
		dt_inicio_regra_w	:= trunc(to_date('01/01/'||to_char(dt_item_w,'yyyy')),'dd');
		dt_fim_regra_w		:= fim_dia(to_date('31/12/'||to_char(dt_item_w,'yyyy')));
	else
		dt_fim_regra_w			:= fim_dia(dt_item_w);
		/*montar a quantidade de dias da regra*/

		if (ie_tipo_periodo_ocor_w = 'D') then
			dt_inicio_regra_w		:= trunc(dt_item_w,'dd') - qt_periodo_ocor_w;
		elsif (ie_tipo_periodo_ocor_w = 'M') then
			qt_periodo_ocor_w		:= qt_periodo_ocor_w - 1;

			if (qt_periodo_ocor_w < 0) then
				qt_periodo_ocor_w	:= 0;
			end if;

			dt_inicio_regra_w		:= add_months(trunc(dt_item_w,'mm'),-qt_periodo_ocor_w);
			dt_fim_regra_w			:= fim_mes(dt_item_w);
		end if;
	end if;

	if 	((coalesce(nr_seq_grupo_serv_w::text, '') = '') and (coalesce(cd_procedimento_w::text, '') = '')) then
		qt_eventos_w := 0;
		qt_liberados_w := 0;
		open C01;
		loop
		fetch C01 into
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_proced_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w;
			count_w := 0;

			select	count(1)
			into STRICT	count_w
			from	pls_coparticipacao_proc
			where	nr_seq_tipo_coparticipacao = nr_seq_tipo_coparticipacao_w
			and 	(((cd_procedimento IS NOT NULL AND cd_procedimento::text <> '') and cd_procedimento = cd_procedimento_w) or (coalesce(cd_procedimento::text, '') = ''))
			and	(((cd_area_procedimento IS NOT NULL AND cd_area_procedimento::text <> '') and cd_area_procedimento = cd_area_w) or (coalesce(cd_area_procedimento::text, '') = ''))
			and	((cd_especialidade = cd_especialidade_w and (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '')) or (coalesce(cd_especialidade::text, '') = ''))
			and	((cd_grupo_proc = cd_grupo_w and (cd_grupo_w IS NOT NULL AND cd_grupo_w::text <> '')) or (coalesce(cd_grupo_proc::text, '') = ''))
			and	(((nr_seq_grupo_servico IS NOT NULL AND nr_seq_grupo_servico::text <> '') and (pls_se_grupo_preco_servico(nr_seq_grupo_servico,cd_procedimento_w,ie_origem_proced_w)	= 'S'))
				or (coalesce(nr_seq_grupo_servico::text, '') = ''));

			if (count_w > 0) then
				qt_eventos_w := qt_eventos_w + qt_procedimento_w;
			end if;
			end;
		end loop;
		close C01;

		open C02;
		loop
		fetch C02 into
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_proced_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_w;

			count_w := 0;

			select	count(1)
			into STRICT	count_w
			from	pls_coparticipacao_proc
			where	nr_seq_tipo_coparticipacao = nr_seq_tipo_coparticipacao_w
			and 	(((cd_procedimento IS NOT NULL AND cd_procedimento::text <> '') and cd_procedimento = cd_procedimento_w) or (coalesce(cd_procedimento::text, '') = ''))
			and	(((cd_area_procedimento IS NOT NULL AND cd_area_procedimento::text <> '') and cd_area_procedimento = cd_area_w) or (coalesce(cd_area_procedimento::text, '') = ''))
			and	((cd_especialidade = cd_especialidade_w and (cd_especialidade_w IS NOT NULL AND cd_especialidade_w::text <> '')) or (coalesce(cd_especialidade::text, '') = ''))
			and	((cd_grupo_proc = cd_grupo_w and (cd_grupo_w IS NOT NULL AND cd_grupo_w::text <> '')) or (coalesce(cd_grupo_proc::text, '') = ''))
			and	(((nr_seq_grupo_servico IS NOT NULL AND nr_seq_grupo_servico::text <> '') and (pls_se_grupo_preco_servico(nr_seq_grupo_servico,cd_procedimento_w,ie_origem_proced_w)	= 'S'))
				or (coalesce(nr_seq_grupo_servico::text, '') = ''));

			if (count_w > 0) then
				qt_liberados_w := qt_liberados_w + qt_procedimento_w;
			end if;
			end;
		end loop;
		close C02;
	else
		--Tratamento somente para o beneficiário
		if (ie_tipo_incidencia_w = 'B') then
			/*verificar a quantidade de  procedimentos que estão no grupo de serviços que já foram cobradas*/

			select	sum(a.qt_procedimento)
			into STRICT	qt_eventos_w
			from	pls_conta_proc		a,
				pls_conta		b,
				pls_segurado		c
			where	a.nr_seq_conta		= b.nr_sequencia
			and	b.nr_seq_segurado	= c.nr_sequencia
			and	c.nr_sequencia		= nr_seq_segurado_w
			and	((b.ie_status		in ('S','F'))	or (a.nr_seq_conta	= nr_seq_conta_w and a.nr_sequencia < nr_seq_conta_proc_p))
			and	a.nr_sequencia		<> nr_seq_conta_proc_p
			and	((a.dt_procedimento_referencia  <= dt_item_w) or (ie_considerar_dt_lanc_cop_w = 'N'))
			and	a.ie_status		!= 'D'
			and	a.ie_tipo_despesa	<> '3'
			and	(((nr_seq_grupo_serv_w IS NOT NULL AND nr_seq_grupo_serv_w::text <> '') and (pls_se_grupo_preco_servico(nr_seq_grupo_serv_w,a.cd_procedimento,a.ie_origem_proced)	= 'S'))
				or	((coalesce(nr_seq_grupo_serv_w::text, '') = '') and (a.cd_procedimento = cd_procedimento_w) and (a.ie_origem_proced = ie_origem_proced_w)))
			and  	coalesce(a.dt_procedimento,b.dt_atendimento_referencia) between dt_inicio_regra_w and dt_fim_regra_w;
		--Tratamento para titulares e dependentes
		elsif (ie_tipo_incidencia_w = 'T') then
			/*verificar a quantidade de  procedimentos que estão no grupo de serviços que já foram cobradas*/

			select	sum(a.qt_procedimento)
			into STRICT	qt_eventos_w
			from	pls_conta_proc		a,
				pls_conta		b,
				pls_segurado		c
			where	a.nr_seq_conta		= b.nr_sequencia
			and	b.nr_seq_segurado	= c.nr_sequencia
			and	((c.nr_sequencia	= nr_seq_segurado_w) or (c.nr_seq_titular = nr_seq_titular_w))
			and	((b.ie_status		in ('S','F'))	or (a.nr_seq_conta	= nr_seq_conta_w and a.nr_sequencia < nr_seq_conta_proc_p))
			and	a.nr_sequencia		<> nr_seq_conta_proc_p
			and	((a.dt_procedimento_referencia  <= dt_item_w) or (ie_considerar_dt_lanc_cop_w = 'N'))
			and	a.ie_status		!= 'D'
			and	a.ie_tipo_despesa	<> '3'
			and	(((nr_seq_grupo_serv_w IS NOT NULL AND nr_seq_grupo_serv_w::text <> '') and (pls_se_grupo_preco_servico(nr_seq_grupo_serv_w,a.cd_procedimento,a.ie_origem_proced)	= 'S'))
				or	((coalesce(nr_seq_grupo_serv_w::text, '') = '') and (a.cd_procedimento = cd_procedimento_w) and (a.ie_origem_proced = ie_origem_proced_w)))
			and  	coalesce(a.dt_procedimento,b.dt_atendimento_referencia) between dt_inicio_regra_w and dt_fim_regra_w;
		end if;


		/*verificar a quantidade de procedimentos que está sendo gerada a coparticipação*/

		select	sum(a.qt_procedimento)
		into STRICT	qt_liberados_w
		from	pls_conta_proc		a,
			pls_conta		b,
			pls_segurado		c
		where	a.nr_seq_conta		= b.nr_sequencia
		and	b.nr_seq_segurado	= c.nr_sequencia
		and	c.nr_sequencia		= nr_seq_segurado_p
		and	a.nr_sequencia		= nr_seq_conta_proc_p
		and	a.ie_tipo_despesa	<> '3'
		and	(((nr_seq_grupo_serv_w IS NOT NULL AND nr_seq_grupo_serv_w::text <> '') and (pls_se_grupo_preco_servico(nr_seq_grupo_serv_w,a.cd_procedimento,a.ie_origem_proced)	= 'S'))
			or	((coalesce(nr_seq_grupo_serv_w::text, '') = '') and (a.cd_procedimento = cd_procedimento_w) and (a.ie_origem_proced = ie_origem_proced_w)))
		and  	coalesce(a.dt_procedimento,b.dt_atendimento_referencia) between dt_inicio_regra_w and dt_fim_regra_w;
	end if;

	/*caso não existir procedimentos naquele grupo, não entra na regra*/

	if	((coalesce(qt_liberados_w,0)	<> 0) or (ie_consid_outra_ocor_regra_w = 'S')) then
		qt_total_eventos_w	:= coalesce(qt_eventos_w,0) + coalesce(qt_liberados_w,0);

		if (qt_total_eventos_w	< qt_ocorrencia_grupo_serv_w) then
			ie_outras_ocorrencias_w	:= 'N';
			qt_ocorrencias_w	:= 0;
		else
			--Se for 'N' deverá gerar a ocorrência ao superar a quantidade apontada na regra de coparticipação, caso contrário,
			--deverá gerar a ocorrência ao igualar a quantidade(Antes desse ajuste, a ocorrência era gerada ao superar a quantidade, porém as vezes
			--gerava ao igualar, por outras questões na pls_gerar_coparticipação, tendo um comportamento que dificultava a definição de quando a ocorrência seria gerada)
			--Com esse ajuste, é possível apontar que a ocorrência será gerada de fato ao atingir a quantidade especificada na regra.
			if (ie_forma_inicidencia_copart_w = 'N') then
				qt_ocorrencias_w	:= qt_total_eventos_w - qt_ocorrencia_grupo_serv_w;
			else
				qt_ocorrencias_w	:= 1 + qt_total_eventos_w - qt_ocorrencia_grupo_serv_w;
			end if;
		end if;
	end if;
end if;

ie_outras_ocor_p	:= ie_outras_ocorrencias_w;
qt_ocorrencias_p	:= qt_ocorrencias_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_outras_ocorr_copar ( nr_seq_regra_copart_p bigint, nr_seq_conta_proc_p bigint, nr_seq_segurado_p bigint, ie_outras_ocor_p INOUT text, qt_ocorrencias_p INOUT bigint) FROM PUBLIC;

