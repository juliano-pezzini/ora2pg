-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_0205_icmsipi ( nr_seq_controle_p bigint, cd_item_p bigint) AS $body$
DECLARE


/*REGISTRO 0205: ALTERAÇÃO DO ITEM*/



-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1) := 'N';
qt_cursor_w 			bigint := 0;
nr_vetor_w  			bigint := 0;

-- FIS_EFD_ICMSIPI_0205
nr_seq_icmsipi_0205_w 	fis_efd_icmsipi_0205.nr_sequencia%type;
dt_ini_w				fis_efd_icmsipi_0205.dt_ini%type;

-- FIS_EFD_ICMSIPI_ALTERACAO
nr_seq_alteracao_w		fis_efd_icmsipi_alteracao.nr_sequencia%type;
dt_anterior_w			fis_efd_icmsipi_alteracao.dt_atualizacao_nrec%type;

-- USUARIO
nm_usuario_w 			usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro 0205 restringindo pela sequencia da nota fiscal*/

c_reg_0205 CURSOR FOR
SELECT 	max('0205') cd_reg,
		max(b.ds_valor_anterior) ds_ant_item,
		to_char(b.dt_atualizacao_nrec, 'ddmmyyyy') dt_fim,
		max(null) cd_ant_item,
		max(b.nr_sequencia) nr_sequencia,
		max(b.dt_atualizacao_nrec) dt_atualizacao_nrec
from 	fis_efd_icmsipi_controle  a,
		fis_efd_icmsipi_alteracao b
where 	a.nr_sequencia = nr_seq_controle_p
and 	trunc(b.dt_atualizacao_nrec) between trunc(a.dt_inicio_apuracao) and trunc(a.dt_fim_apuracao)
and 	b.cd_material = cd_item_p
and		(b.ds_valor_anterior IS NOT NULL AND b.ds_valor_anterior::text <> '')
group by to_char(b.dt_atualizacao_nrec, 'ddmmyyyy')
order by nr_sequencia asc;

/*Criação do array com o tipo sendo do cursor eespecificado - c_reg_0205*/

type reg_c_reg_0205 is table of c_reg_0205%RowType;
vetReg0205 reg_c_reg_0205;

/*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_0205 */

type registro is table of fis_efd_icmsipi_0205%rowtype index by integer;
fis_registros_w registro;

BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_reg_0205;
loop
fetch c_reg_0205 bulk collect into vetReg0205 limit 1000;
	for i in 1 .. vetReg0205.Count loop
	begin

	/*Incrementa a variavel para o array*/

	qt_cursor_w:=  qt_cursor_w + 1;

	/* Código na proc original*/

	select	max(nr_sequencia),
			max(dt_atualizacao_nrec)
	into STRICT   	nr_seq_alteracao_w,
			dt_anterior_w
	from   	fis_efd_icmsipi_alteracao a
	where   a.nr_sequencia 			< vetReg0205[i].nr_sequencia
	and   	a.dt_atualizacao_nrec 	< vetReg0205[i].dt_atualizacao_nrec
	and		a.cd_material			= cd_item_p;

	if (nr_seq_alteracao_w IS NOT NULL AND nr_seq_alteracao_w::text <> '') then
		--dt_ini_w := dt_anterior_w + 1;
		dt_ini_w := dt_anterior_w;
	else
		select 	coalesce(to_char(max(dt_ini_item),'ddmmyyyy'),'01012000')
		into STRICT	dt_ini_w
		from 	fis_efd_icmsipi_reg_geral a,
				fis_efd_icmsipi_controle b
		where	b.nr_sequencia	= nr_seq_controle_p
		and		b.nr_seq_lote 	= a.nr_seq_lote;
	end if;

	if (ie_gerou_dados_bloco_w = 'N') then
	  ie_gerou_dados_bloco_w := 'S';
	end if;

	/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_0205 */

	select nextval('fis_efd_icmsipi_0205_seq') into STRICT nr_seq_icmsipi_0205_w;	

	/*Inserindo valores no array para realização do forall posteriormente*/

	fis_registros_w[qt_cursor_w].nr_sequencia     		:= nr_seq_icmsipi_0205_w;
	fis_registros_w[qt_cursor_w].dt_atualizacao     	:= clock_timestamp();
	fis_registros_w[qt_cursor_w].nm_usuario     		:= nm_usuario_w;
	fis_registros_w[qt_cursor_w].dt_atualizacao_nrec   	:= clock_timestamp();
	fis_registros_w[qt_cursor_w].nm_usuario_nrec     	:= nm_usuario_w;
	fis_registros_w[qt_cursor_w].cd_reg       			:= '0205';
	fis_registros_w[qt_cursor_w].ds_ant_item     		:= vetReg0205[i].ds_ant_item;
	fis_registros_w[qt_cursor_w].dt_ini                 := dt_ini_w;
	fis_registros_w[qt_cursor_w].dt_fim       			:= vetReg0205[i].dt_fim;
	fis_registros_w[qt_cursor_w].cd_item                := cd_item_p;
	fis_registros_w[qt_cursor_w].cd_ant_item     		:= vetReg0205[i].cd_ant_item;		
	fis_registros_w[qt_cursor_w].nr_seq_controle     	:= nr_seq_controle_p;

	if (nr_vetor_w >= 1000) then
		/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_0205 */

		forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_0205 values fis_registros_w(i);

		nr_vetor_w := 0;
		fis_registros_w.delete;

		commit;
	end if;

	/*incrementa variavel para realizar o forall quando chegar no valor limite*/

	nr_vetor_w := nr_vetor_w + 1;

	end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_0205 */
end loop;
close c_reg_0205;

if (fis_registros_w.count > 0) then
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
	insert into fis_efd_icmsipi_0205 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
update fis_efd_icmsipi_controle set ie_mov_0 = 'S' where nr_sequencia = nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_0205_icmsipi ( nr_seq_controle_p bigint, cd_item_p bigint) FROM PUBLIC;

