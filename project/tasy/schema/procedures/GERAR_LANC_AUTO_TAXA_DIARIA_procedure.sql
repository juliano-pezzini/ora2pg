-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_lanc_auto_taxa_diaria (nr_atendimento_p atendimento_paciente.nr_atendimento%type, qt_dias_pagamento_p pessoa_fisica_taxa.qt_dias_pagamento%type) AS $body$
DECLARE


  nm_usuario_c    constant usuario.nm_usuario%type := 'tasy';
  nr_seq_evento_c constant regra_lanc_automatico.nr_seq_evento%type := 593;

  dt_entrada_w		  atendimento_paciente_v.dt_entrada%type;
  ie_tipo_atendimento_w   atendimento_paciente_v.ie_tipo_atendimento%type;
  cd_estabelecimento_w    atendimento_paciente_v.cd_estabelecimento%type;
  cd_setor_atendimento_w  atendimento_paciente_v.cd_setor_atendimento%type;
  cd_convenio_w           atendimento_paciente_v.cd_convenio%type;
  cd_categoria_w	  atendimento_paciente_v.cd_categoria%type;
  ie_tipo_convenio_w      convenio.ie_tipo_convenio%type;
  dt_entrada_unidade_w    atendimento_paciente_v.dt_entrada_unidade%type;
  dt_alta_w               atendimento_paciente_v.dt_alta%type;
  nr_seq_atepacu_w        atendimento_paciente_v.nr_seq_atepacu%type;
  ie_clinica_w            atendimento_paciente_v.ie_clinica%type;
  cd_tipo_acomod_unid_w   atendimento_paciente_v.cd_tipo_acomod_unid%type;
  cd_tipo_acomod_conv_w   atendimento_paciente_v.cd_tipo_acomod_conv%type;
  nr_anos_w               atendimento_paciente_v.nr_anos%type;
  nr_seq_classificacao_w  atendimento_paciente_v.nr_seq_classificacao%type;
  cd_plano_convenio_w     atendimento_paciente_v.cd_plano_convenio%type;
  ie_tipo_guia_w          atendimento_paciente_v.ie_tipo_guia%type;
  cd_pessoa_fisica_w      atendimento_paciente_v.cd_pessoa_fisica%type;
  cd_procedencia_w        atendimento_paciente_v.cd_procedencia%type;
  ie_sexo_w               atendimento_paciente_v.ie_sexo%type;
  nr_seq_forma_chegada_w  atendimento_paciente_v.nr_seq_forma_chegada%type;
  nr_seq_classif_medico_w atendimento_paciente.nr_seq_classif_medico%type;
  nr_seq_queixa_w         atendimento_paciente.nr_seq_queixa%type;
  nr_seq_triagem_w        atendimento_paciente.nr_seq_triagem%type;
  nr_seq_forma_laudo_w    atendimento_paciente.nr_seq_forma_laudo%type;
  ie_carater_atend_w      regra_lanc_automatico.ie_carater_inter%type;
  ie_dia_internacao_rla_w parametro_faturamento.ie_dia_internacao_rla%type;
  nr_sequencia_w          procedimento_paciente.nr_sequencia%type;
  nr_seq_regra_w          regra_lanc_aut_pac.nr_seq_regra%type;

  qt_dias_internacao_w integer;
  dia_feriado_w        varchar(1);
  dia_semana_w         smallint;
  ie_data_vig_atual_w  varchar(1);
  dt_atual_trunc_w     timestamp := trunc(clock_timestamp());
  dt_execucao_w        timestamp := trunc(clock_timestamp());
  qt_idade_w           double precision;
  ie_dependente_w      varchar(1);
  nr_soma_dias_w       smallint;
  nr_seq_acao_regra_w  bigint 	:= 0;
  qt_procedimento_w    double precision	:= 0;
  ie_situacao_w        varchar(1);

  c01 CURSOR FOR
    SELECT a.nr_sequencia,
           a.cd_setor_atendimento,
           a.ie_periodo,
           a.qt_max_taxas
      from regra_lanc_automatico a
     where a.nr_seq_evento = nr_seq_evento_c
       and a.ie_situacao = 'A'
       and a.cd_estabelecimento = cd_estabelecimento_w
       and coalesce(a.cd_convenio, cd_convenio_w) = cd_convenio_w
       and coalesce(a.ie_tipo_convenio, ie_tipo_convenio_w) = ie_tipo_convenio_w
       and (coalesce(a.ie_tipo_atendimento, ie_tipo_atendimento_w) =
           ie_tipo_atendimento_w or coalesce(ie_tipo_atendimento_w::text, '') = '')
       and ((coalesce(ie_clinica::text, '') = '') or (ie_clinica = ie_clinica_w))
       and ((coalesce(cd_tipo_acomodacao::text, '') = '') or (coalesce(cd_tipo_acomod_unid_w::text, '') = '') or (cd_tipo_acomodacao =CASE WHEN coalesce(ie_origem_tipo_acomod, 1)=1 THEN                                       cd_tipo_acomod_unid_w  ELSE cd_tipo_acomod_conv_w END ))          
       and coalesce(nr_seq_classificacao, coalesce(nr_seq_classificacao_w, 0)) = coalesce(nr_seq_classificacao_w, 0)
       and coalesce(cd_plano_convenio, cd_plano_convenio_w) = cd_plano_convenio_w          
       and (coalesce(nr_seq_queixa, coalesce(nr_seq_queixa_w, 0)) = coalesce(nr_seq_queixa_w, 0))          
       and (coalesce(nr_seq_triagem, coalesce(nr_seq_triagem_w, 0)) = coalesce(nr_seq_triagem_w, 0)) 
       and (coalesce(cd_procedencia, cd_procedencia_w) = cd_procedencia_w)          
       and (coalesce(ie_feriado, 'N') = 'N' or coalesce(ie_feriado, 'N') = dia_feriado_w)          
       and ((coalesce(dt_dia_semana, dia_semana_w) = dia_semana_w) or (dt_dia_semana = 9))          
       and coalesce(ie_tipo_guia, coalesce(ie_tipo_guia_w, '0')) = coalesce(ie_tipo_guia_w, '0')          
       and dt_atual_trunc_w between coalesce(dt_inicio_vigencia, dt_atual_trunc_w) and fim_dia(coalesce(dt_final_vigencia, dt_atual_trunc_w))
       and coalesce(ie_sexo, coalesce(ie_sexo_w, 'I')) = coalesce(ie_sexo_w, 'I')          
       and (coalesce(nr_seq_classif_medico, coalesce(nr_seq_classif_medico_w, 0)) = coalesce(nr_seq_classif_medico_w, 0))          
       and qt_dias_internacao_w between coalesce(qt_dias_inter_inicio, qt_dias_internacao_w) and coalesce(qt_dias_inter_final, qt_dias_internacao_w)
       and ((coalesce(ie_primeiro_dia_mes, 'N') = 'N') or (pkg_date_utils.extract_field('DAY', dt_execucao_w) = '01'))          
       and (coalesce(dt_execucao_w, clock_timestamp()) between pkg_date_utils.get_datetime(coalesce(dt_execucao_w, clock_timestamp()),
                                                                            coalesce(hr_inicial,                                            
                                                                            pkg_date_utils.get_time(00, 00, 00))) and           
                                                                            pkg_date_utils.get_datetime(coalesce(dt_execucao_w, clock_timestamp()),                                        
                                                                            coalesce(hr_final,                                            
                                                                            pkg_date_utils.get_time(23,                                                                    
                                                                            59,                                                                    
                                                                            59))))          
       and coalesce(nr_seq_forma_chegada, coalesce(nr_seq_forma_chegada_w, 0)) = coalesce(nr_seq_forma_chegada_w, 0)          
       and coalesce(qt_idade_w, 1) between coalesce(obter_idade_lancto_auto(a.nr_sequencia, 'MIN'), 0) 
       and coalesce(obter_idade_lancto_auto(a.nr_sequencia, 'MAX'), 9999999)          
       and ((coalesce(a.ie_dependente, 'N') = 'N') or (a.ie_dependente = ie_dependente_w))          
       and (coalesce(nr_seq_forma_laudo, nr_seq_forma_laudo_w) = nr_seq_forma_laudo_w);

  c02 CURSOR FOR
    SELECT cd_procedimento, 
           ie_origem_proced,
	   nr_seq_lanc	   
      from regra_lanc_aut_pac    
     where nr_seq_regra = nr_seq_regra_w          
       and nr_seq_regra_w <> 0          
       and ((cd_procedimento IS NOT NULL AND cd_procedimento::text <> '' AND ie_origem_proced IS NOT NULL AND ie_origem_proced::text <> '') or (nr_seq_proc_interno IS NOT NULL AND nr_seq_proc_interno::text <> '') or (nr_seq_exame IS NOT NULL AND nr_seq_exame::text <> ''))          
       and ((nr_anos_w = 999) or (nr_anos_w between coalesce(qt_ano_min, 0) and coalesce(qt_ano_max, 999)));

  c01_rec c01%rowtype;
  c02_rec c02%rowtype;


BEGIN
  begin
     select a.dt_entrada,
	   a.ie_tipo_atendimento,           
           a.cd_estabelecimento,
	   a.cd_setor_atendimento,
           a.cd_convenio,
	   a.cd_categoria,
           c.ie_tipo_convenio,           
           a.dt_entrada_unidade,           
           a.dt_alta,           
           a.nr_seq_atepacu,           
           a.ie_clinica,           
           a.cd_tipo_acomod_unid,           
           a.cd_tipo_acomod_conv,           
           coalesce(nr_anos, 999),           
           a.nr_seq_classificacao,           
           coalesce(a.cd_plano_convenio, '0'),           
           ie_tipo_guia,           
           cd_pessoa_fisica,           
           ie_carater_inter_sus,           
           coalesce(cd_procedencia, 0),           
           coalesce(a.ie_sexo, 'I'),           
           coalesce(a.nr_seq_forma_chegada, 0)    
      into STRICT dt_entrada_w,
	   ie_tipo_atendimento_w,           
           cd_estabelecimento_w,       
	   cd_setor_atendimento_w,
           cd_convenio_w, 
	   cd_categoria_w,
           ie_tipo_convenio_w,           
           dt_entrada_unidade_w,           
           dt_alta_w,           
           nr_seq_atepacu_w,           
           ie_clinica_w,           
           cd_tipo_acomod_unid_w,           
           cd_tipo_acomod_conv_w,           
           nr_anos_w,           
           nr_seq_classificacao_w,           
           cd_plano_convenio_w,           
           ie_tipo_guia_w,           
           cd_pessoa_fisica_w,           
           ie_carater_atend_w,           
           cd_procedencia_w,           
           ie_sexo_w,           
           nr_seq_forma_chegada_w    
      from estabelecimento b, 
           convenio c, 
           atendimento_paciente_v a    
     where a.cd_estabelecimento = b.cd_estabelecimento          
       and c.cd_convenio = a.cd_convenio          
       and a.nr_atendimento = nr_atendimento_p;
  exception  
    when others then    
      return;
  end;

  begin
    select coalesce(max(nr_seq_classif_medico), 0),           
           CASE WHEN ie_dia_internacao_rla_w='S' THEN  trunc(max(trunc(coalesce(dt_alta, clock_timestamp())) - trunc(dt_entrada)))  ELSE trunc(max(coalesce(dt_alta, clock_timestamp()) - dt_entrada)) END  qt_dias_internacao,
           coalesce(max(nr_seq_queixa), 0),
           coalesce(max(nr_seq_triagem), 0),
           coalesce(max(nr_seq_forma_laudo), 0)    
      into STRICT nr_seq_classif_medico_w,           
           qt_dias_internacao_w,           
           nr_seq_queixa_w,           
           nr_seq_triagem_w,           
           nr_seq_forma_laudo_w    
      from atendimento_paciente    
     where nr_atendimento = nr_atendimento_p;
  exception  
    when others then    
      nr_seq_classif_medico_w := 0;
      qt_dias_internacao_w := 0;
      nr_seq_queixa_w := 0;
      nr_seq_triagem_w := 0;
      nr_seq_forma_laudo_w := 0;
  end;

  /* obter feriado */

  begin
    select 'S'    
      into STRICT dia_feriado_w    
      from feriado    
     where cd_estabelecimento = cd_estabelecimento_w          
       and to_char(dt_feriado, 'dd/mm/yyyy') = to_char(coalesce(dt_execucao_w, clock_timestamp()), 'dd/mm/yyyy');
  exception  
    when others then    
      dia_feriado_w := 'N';
  end;

  dia_semana_w := pkg_date_utils.get_weekday(coalesce(dt_execucao_w, clock_timestamp()));

  ie_data_vig_atual_w := coalesce(obter_valor_param_usuario(905, 9, obter_perfil_ativo, nm_usuario_c, cd_estabelecimento_w), 'S');

  if (ie_data_vig_atual_w = 'N') then
    dt_atual_trunc_w := trunc(dt_execucao_w);
  end if;

  begin
    select max(obter_idade(b.dt_nascimento, coalesce(b.dt_obito, clock_timestamp()), 'DIA')),           
           coalesce(max(b.ie_dependente), 'N')    
      into STRICT qt_idade_w, 
           ie_dependente_w    
      from pessoa_fisica b    
     where b.cd_pessoa_fisica = cd_pessoa_fisica_w;
  exception  
    when others then    
      qt_idade_w := 0;
      ie_dependente_w := 'N';
  end;

  select coalesce(max(ie_dia_internacao_rla), 'N')
    into STRICT ie_dia_internacao_rla_w  
    from parametro_faturamento  
   where cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

  nr_seq_atepacu_w := obter_atepacu_paciente(nr_atendimento_p, 'A');

  open c01;
  loop
  fetch c01 into 
        c01_rec;
  EXIT WHEN NOT FOUND; /* apply on c01 */
        begin    
        nr_seq_regra_w := c01_rec.nr_sequencia;

        open c02;
        loop      
        fetch c02 into 
              c02_rec;

        EXIT WHEN NOT FOUND; /* apply on c02 */

             begin

             if (c02_rec.cd_procedimento IS NOT NULL AND c02_rec.cd_procedimento::text <> '') then
                select 	coalesce(max(ie_situacao),'A')
                into STRICT	ie_situacao_w
                from	procedimento
                where	cd_procedimento	 = c02_rec.cd_procedimento
                and	ie_origem_proced = c02_rec.ie_origem_proced;
		
                if (ie_situacao_w = 'I') then
                  goto continue_loop;
                end if;
             end if;
             
             if c01_rec.ie_periodo = 'Y' then          
                select	count(pp.nr_sequencia)
		into STRICT	qt_procedimento_w            
		from	procedimento_paciente pp            
		where	pp.nr_atendimento = nr_atendimento_p  
		and	pp.cd_procedimento = c02_rec.cd_procedimento
		and	pp.ie_origem_proced = c02_rec.ie_origem_proced
		and	to_char(pp.dt_procedimento, 'yyyy') = to_char(clock_timestamp(), 'yyyy');
		
		nr_soma_dias_w	:= qt_procedimento_w + qt_dias_pagamento_p;

		if (c01_rec.qt_max_taxas > nr_soma_dias_w) then
			select nextval('procedimento_paciente_seq')
			into STRICT nr_sequencia_w
			;
			
			/* Se é a primeira vez que está sendo gerado o procedimento, gerar com a quantidade desde a entrada do paciente
			Casos OutPatient que foram transformados em InPatient */
			if (qt_procedimento_w = 0) then
				qt_procedimento_w	:= dt_execucao_w - dt_entrada_w;
			end if;

                      insert into procedimento_paciente(nr_sequencia,                 
                              nr_atendimento,                 
                              dt_entrada_unidade,                 
                              cd_procedimento,
                              ie_origem_proced,                 
                              dt_procedimento,                 
                              qt_procedimento,
                              dt_atualizacao,
                              nm_usuario,                 
                              nr_seq_atepacu,                 
                              cd_setor_atendimento,                 
                              cd_convenio,
			      cd_categoria,
			      nm_usuario_original,
			      ds_observacao,
			      nr_interno_conta,
			      nr_seq_regra_lanc,
			      nr_seq_lanc_acao)          
                      values (nr_sequencia_w,                 
                             nr_atendimento_p,
                             coalesce(dt_entrada_unidade_w, clock_timestamp()),                 
                             c02_rec.cd_procedimento,                 
                             c02_rec.ie_origem_proced,                 
                             coalesce(dt_execucao_w, coalesce(dt_alta_w, clock_timestamp())),                 
                             qt_procedimento_w,                 
                             dt_execucao_w,                 
                             nm_usuario_c,                 
                             nr_seq_atepacu_w,                 
                             cd_setor_atendimento_w,
                             cd_convenio_w,
			     cd_categoria_w,
			     nm_usuario_c,
			     obter_desc_expressao(346476) || ' ' || nr_seq_regra_w || ' ' || obter_desc_expressao(614660) || ' ' || 593,
			     null,
			     nr_seq_regra_w,
			     c02_rec.nr_seq_lanc); 			
                   end if;

             elsif c01_rec.ie_periodo = 'A' then
                   select count(pp.nr_sequencia)
                     into STRICT qt_procedimento_w            
                     from procedimento_paciente pp            
                    where pp.nr_atendimento = nr_atendimento_p;

		    nr_soma_dias_w	:= qt_procedimento_w + qt_dias_pagamento_p;		

                    if (c01_rec.qt_max_taxas > nr_soma_dias_w) then
                       select nextval('procedimento_paciente_seq')
                         into STRICT nr_sequencia_w
;		
			 
			 /* Se é a primeira vez que está sendo gerado o procedimento, gerar com a quantidade desde a entrada do paciente
			Casos OutPatient que foram transformados em InPatient */
			if (qt_procedimento_w = 0) then
				qt_procedimento_w	:= dt_execucao_w - dt_entrada_w;
			end if;
			
                       insert into procedimento_paciente(nr_sequencia,                 
                              nr_atendimento,                 
                              dt_entrada_unidade,                 
                              cd_procedimento,
                              ie_origem_proced,                 
                              dt_procedimento,                 
                              qt_procedimento,
                              dt_atualizacao,                 
                              nm_usuario,                 
                              nr_seq_atepacu,                 
                              cd_setor_atendimento,                 
                              cd_convenio,
			      cd_categoria,
			      nm_usuario_original,
			      ds_observacao,
			      nr_interno_conta,
			      nr_seq_regra_lanc,
			      nr_seq_lanc_acao)              
                       values (nr_sequencia_w,                 
                              nr_atendimento_p,                 
                              coalesce(dt_entrada_unidade_w, clock_timestamp()),                 
                              c02_rec.cd_procedimento,                 
                              c02_rec.ie_origem_proced,    
			      coalesce(dt_execucao_w, coalesce(dt_alta_w, clock_timestamp())),                 
                              qt_procedimento_w,                 
                              dt_execucao_w,                 
                              nm_usuario_c,                 
                              nr_seq_atepacu_w,                 
			      cd_setor_atendimento_w,
                              cd_convenio_w,
			      cd_categoria_w,
			      nm_usuario_c,
			      obter_desc_expressao(346476) || ' ' || nr_seq_regra_w || ' ' || obter_desc_expressao(614660) || ' ' || 593,
			      null,
			      nr_seq_regra_w,
			      c02_rec.nr_seq_lanc);
                    end if;
             end if;

             if (nr_sequencia_w > 0) then          
                CALL atualiza_preco_procedimento(nr_sequencia_w,
                                            cd_convenio_w,
                                            nm_usuario_c);
             end if;
             end;
	     <<continue_loop>>
	     ie_situacao_w := null;
       end loop;
       close c02;
       end;
  end loop;
  close c01;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_lanc_auto_taxa_diaria (nr_atendimento_p atendimento_paciente.nr_atendimento%type, qt_dias_pagamento_p pessoa_fisica_taxa.qt_dias_pagamento%type) FROM PUBLIC;

