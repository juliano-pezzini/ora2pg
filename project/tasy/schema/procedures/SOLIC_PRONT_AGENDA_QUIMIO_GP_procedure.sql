-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE solic_pront_agenda_quimio_gp ( cd_pessoa_fisica_p text, nr_seq_agequi_p bigint, nr_seq_local_p bigint, dt_agenda_p timestamp, nm_usuario_p text, cd_setor_agenda_p bigint) AS $body$
DECLARE

 
nr_seq_solic_w			bigint;
cd_setor_atendimento_w		bigint;
cd_estabelecimento_w		bigint;
cd_pessoa_solicitante_w		varchar(10);
nr_seq_prontuario_w		bigint;
ds_lista_informacao_w		varchar(255);
nr_seq_motivo_pront_w		bigint;
qt_dias_parametro_w		varchar(255);
dt_devolucao_w			timestamp;
nr_seq_motivo_lote_w		bigint;
dt_prevista_lote_w		timestamp;
dt_devolucao_lote_w		timestamp;
ie_setor_atendimento_w		varchar(1);
ie_setor_agrupamento_w		varchar(1);
cd_setor_sala_w			integer;
nr_seq_agrupamento_setor_w	integer;

 
C01 CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	same_prontuario a 
	where (cd_pessoa_fisica_p  = '' or a.cd_pessoa_fisica  = cd_pessoa_fisica_p) 
	and   coalesce(a.nr_seq_caixa::text, '') = '' 
	and   a.ie_status not in ('2','5','6','10') 
	and   a.nr_sequencia not in (	SELECT  b.nr_seq_prontuario 
					from   same_solic_pront_envelope b 
					where  b.nr_seq_prontuario  = a.nr_sequencia 
					and   b.nr_seq_solic     = nr_seq_solic_w) 
	--and   a.dt_periodo_final  is not null 
	and   (a.dt_periodo_inicial IS NOT NULL AND a.dt_periodo_inicial::text <> '');
	
 

BEGIN 
 
dt_devolucao_w := null;
 
/* Obter o número do atendimento e a pessoa solicitante */
 
select	substr(Obter_Pessoa_Fisica_Usuario(nm_usuario_p,'C'),1,10) 
into STRICT	cd_pessoa_solicitante_w
;
 
 
if (qt_dias_parametro_w > '0') and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') then 
	dt_devolucao_w := dt_agenda_p + obter_somente_numero(qt_dias_parametro_w);
end if;
	 
ds_lista_informacao_w	:= '';
 
 
cd_estabelecimento_w := obter_estabelecimento_ativo;
 
if (cd_setor_agenda_p > 0) and (cd_estabelecimento_w > 0) then 
	begin 
	 
	select	coalesce(max(nr_sequencia),0) 
	into STRICT	nr_seq_solic_w 
	from	same_solic_pront 
	where	cd_estabelecimento		= cd_estabelecimento_w 
	and	nr_seq_agequi			= nr_seq_agequi_p;
 
	if (nr_seq_solic_w = 0) then 
 
		/* Verifica se possui alguma solicitação existente para o estabelecimento, setor, data */
 
		select	coalesce(max(nr_sequencia),0) 
		into STRICT	nr_seq_solic_w 
		from	same_solic_pront 
		where	cd_estabelecimento		= cd_estabelecimento_w 
		and	cd_setor_solicitante		= cd_setor_agenda_p 
		and	trunc(dt_prevista, 'dd')	= trunc(dt_agenda_p, 'dd') 
		and	cd_pessoa_fisica		= cd_pessoa_fisica_p;
	else 
 
		update	same_solic_pront 
		set	cd_setor_solicitante 	= cd_setor_agenda_p 
		where	nr_seq_agequi		= nr_seq_agequi_p;
 
	end if;
 
	/*Se não possuir, cria uma solicitação */
 
	if (nr_seq_solic_w = 0) then 
		begin 
		 
		select	nextval('same_solic_pront_seq') 
		into STRICT	nr_seq_solic_w 
		;
		 
		insert into same_solic_pront( 
			nr_sequencia, 
			cd_estabelecimento, 
			dt_prevista, 
			dt_solicitacao, 
			dt_atualizacao, 
			nm_usuario, 
			ie_status, 
			cd_pessoa_fisica, 
			cd_pessoa_solicitante, 
			ie_tipo_solicitacao, 
			ie_urgente, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			cd_setor_solicitante, 
			nr_seq_agequi, 
			dt_liberacao, 
			nr_seq_motivo, 
			dt_devolucao_prevista) 
		values (	nr_seq_solic_w, 
			cd_estabelecimento_w, 
			dt_agenda_p, 
			clock_timestamp(), 
			clock_timestamp(), 
			nm_usuario_p, 
			'P', 
			cd_pessoa_fisica_p, 
			cd_pessoa_solicitante_w, 
			'O', 
			'N', 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_setor_agenda_p, 
			nr_seq_agequi_p, 
			clock_timestamp(), 
			nr_seq_motivo_pront_w, 
			dt_devolucao_w);
 
			open C01;
			loop 
			fetch C01 into	 
				nr_seq_prontuario_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin 
				ds_lista_informacao_w	:= nr_seq_prontuario_w || ',';		
				CALL Same_Inserir_Pront_Solic(nr_seq_solic_w, ds_lista_informacao_w, nm_usuario_p);
				end;
			end loop;
			close C01;
 
		end;
	end if;	
	 
	end;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE solic_pront_agenda_quimio_gp ( cd_pessoa_fisica_p text, nr_seq_agequi_p bigint, nr_seq_local_p bigint, dt_agenda_p timestamp, nm_usuario_p text, cd_setor_agenda_p bigint) FROM PUBLIC;

