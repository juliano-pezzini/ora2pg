-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE update_patient_tags (nr_atendimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, lista_tags_marc_p text, lista_tags_remov_p text) AS $body$
DECLARE


/*
lista_tags_marc_p > should be a sequence of number codes with ';' in between
Example: 1;2;3;4;5

lista_tags_remov_p > should be a sequence of number codes with ';' in between
Example: 1;2;3;4;5
*/
ds_arquivo_w	varchar(2000);
ie_qtd_w		smallint;

c01 CURSOR FOR
SELECT tag_seq.nr_sequencia_tag
from (WITH RECURSIVE cte AS (
select trim(both regexp_substr(lista_tags_marc_p,'[^;]+', 1, level)) nr_sequencia_tag
   (regexp_substr(lista_tags_marc_p, '[^;]+', 1, level) IS NOT NULL AND (regexp_substr(lista_tags_marc_p, '[^;]+', 1, level))::text <> '')  UNION ALL
select trim(both regexp_substr(lista_tags_marc_p,'[^;]+', 1, level)) nr_sequencia_tag
   (regexp_substr(lista_tags_marc_p, '[^;]+', 1, level) IS NOT NULL AND (regexp_substr(lista_tags_marc_p, '[^;]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
) tag_seq
where (tag_seq.nr_sequencia_tag IS NOT NULL AND tag_seq.nr_sequencia_tag::text <> '')
and not exists (
  SELECT apt.nr_sequencia_tag
  from atendimento_paciente_tag apt
  where apt.nr_atendimento = nr_atendimento_p
  and apt.cd_pessoa_fisica = cd_pessoa_fisica_p
  and apt.nr_sequencia_tag = tag_seq.nr_sequencia_tag
)
and exists (
  select pct.nr_sequencia
  from pan_configuracao_tag pct
  where pct.nr_sequencia = tag_seq.nr_sequencia_tag
)
;

array_insert_tag_seq dbms_utility.number_array;
array_insert_sequence dbms_utility.number_array;

BEGIN

if ((lista_tags_marc_p IS NOT NULL AND lista_tags_marc_p::text <> '') and length(lista_tags_marc_p) > 0) then
  begin

	for c01_row in c01 loop
	begin
    array_insert_tag_seq(array_insert_tag_seq.count() + 1) := c01_row.nr_sequencia_tag;
    select nextval('atendimento_paciente_tag_seq')
    into STRICT array_insert_sequence(array_insert_sequence.count() + 1)
;
  end;
  end loop;

  forall i in array_insert_tag_seq.first .. array_insert_tag_seq.last
    insert into atendimento_paciente_tag(nr_sequencia,
    nr_atendimento,
    nr_sequencia_tag,			
    cd_pessoa_fisica,
    dt_atualizacao,
    nm_usuario,
    dt_atualizacao_nrec,
    nm_usuario_nrec)
    values (array_insert_sequence(i),
    nr_atendimento_p,
    array_insert_tag_seq(i),
    cd_pessoa_fisica_p,
    clock_timestamp(),
    nm_usuario_p,
    clock_timestamp(),
    nm_usuario_p);

  exception
        when unique_violation then null;

	end;
end if;

if ((lista_tags_remov_p IS NOT NULL AND lista_tags_remov_p::text <> '') and length(lista_tags_remov_p) > 0) then

	delete from atendimento_paciente_tag apt
	where apt.nr_atendimento = nr_atendimento_p
	and apt.cd_pessoa_fisica = cd_pessoa_fisica_p
	and apt.nr_sequencia_tag in (
		SELECT tag_seq.nr_sequencia_tag
		from (WITH RECURSIVE cte AS (
SELECT trim(both regexp_substr(lista_tags_remov_p,'[^;]+', 1, level)) nr_sequencia_tag
		   (regexp_substr(lista_tags_remov_p, '[^;]+', 1, level) IS NOT NULL AND (regexp_substr(lista_tags_remov_p, '[^;]+', 1, level))::text <> '')  UNION ALL
SELECT trim(both regexp_substr(lista_tags_remov_p,'[^;]+', 1, level)) nr_sequencia_tag
		   (regexp_substr(lista_tags_remov_p, '[^;]+', 1, level) IS NOT NULL AND (regexp_substr(lista_tags_remov_p, '[^;]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
) tag_seq
		where (tag_seq.nr_sequencia_tag IS NOT NULL AND tag_seq.nr_sequencia_tag::text <> '')
		)
	;

end if;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE update_patient_tags (nr_atendimento_p bigint, cd_pessoa_fisica_p text, nm_usuario_p text, lista_tags_marc_p text, lista_tags_remov_p text) FROM PUBLIC;

