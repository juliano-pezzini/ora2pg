-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_prescr_dieta_hor (nr_prescricao_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_refeicao_w			varchar(15);
ds_horario_w			varchar(255);
nr_atendimento_w		bigint;
dt_inicio_prescr_w		timestamp;
dt_inicio_prescr_aux_w 		timestamp;
dt_validade_prescr_w		timestamp;
dt_horario_ref_w		timestamp;
ie_gerar_horario_w		varchar(1) := 'S';
qt_horario_w			bigint;
nr_seq_horario_w		bigint;
nr_seq_dieta_w			bigint;
ds_observacao_w			varchar(255);
ie_conforme_intervalo_w		varchar(1);
ie_selecionar_dieta_susp_w	varchar(1);
k				integer;
ds_horarios_padr_w		varchar(2000);
cd_dieta_w			bigint;
ie_contem_jejum_nut_w		varchar(1);
qt_jejum_w			bigint;
cd_estabelecimento_w		smallint;
ie_gerar_proc_gedipa_job_w	parametros_farmacia.ie_gerar_proc_gedipa_job%type;
ie_gerar_proc_dieta_w		parametros_farmacia.ie_gerar_proc_dieta%type;

c01 CURSOR FOR
SELECT	a.cd_refeicao,
	padroniza_horario(a.ds_horarios),
	b.nr_sequencia,
	substr(b.ds_observacao,1,255)
from	horario_refeicao_dieta a,
	prescr_dieta b,
	prescr_medica k
where	((b.cd_dieta = a.cd_dieta) or ((coalesce(a.cd_dieta::text, '') = '') and (obter_se_dieta_hor_excl_ref(b.cd_dieta,a.cd_refeicao) = 'N')))
and	k.nr_prescricao = nr_prescricao_p
and	k.nr_prescricao	= b.nr_prescricao
and	coalesce(k.dt_suspensao::text, '') = ''
and	coalesce(b.ie_suspenso,'N') <> 'S'
and	((ie_conforme_intervalo_w = 'N') or (exists (	SELECT	1
			from	horario_refeicao_dieta y
			where	y.cd_dieta = b.cd_dieta)) or (coalesce(b.ds_horarios::text, '') = ''))
order by
	a.nr_sequencia;

c02 CURSOR FOR	
SELECT	padroniza_horario_prescr(b.ds_horarios, CASE WHEN substr(Obter_Se_horario_hoje(a.dt_prescricao,a.dt_primeiro_horario,to_char(a.dt_inicio_prescr,'hh24:mi')),1,1)='N' THEN '01/01/2000 23:59:59'  ELSE to_char(coalesce(a.dt_primeiro_horario,a.dt_prescricao),'dd/mm/yyyy hh24:mi:ss') END ),
	b.nr_sequencia,
	substr(b.ds_observacao,1,255)
FROM prescr_medica a, prescr_dieta b
LEFT OUTER JOIN intervalo_prescricao c ON (b.cd_intervalo = c.cd_intervalo)
WHERE a.nr_prescricao	= b.nr_prescricao  and a.nr_prescricao	= nr_prescricao_p and (not exists (	SELECT	1
			from	horario_refeicao_dieta y
			where	y.cd_dieta = b.cd_dieta)) and (not exists (	select	1
			from	prescr_dieta_hor x
			where	x.nr_prescricao		= a.nr_prescricao
			and	x.nr_seq_dieta		= b.nr_sequencia
			and	coalesce(x.dt_suspensao::text, '') = ''
			and	Obter_se_horario_liberado(x.dt_lib_horario, x.dt_horario) = 'S')) and coalesce(b.ie_suspenso,'N') <> 'S' and coalesce(a.dt_suspensao::text, '') = '' and ie_conforme_intervalo_w = 'S' and (b.ds_horarios IS NOT NULL AND b.ds_horarios::text <> '') order by
	b.nr_sequencia;

c_diet_process CURSOR FOR
SELECT	a.nr_sequencia nr_seq_dieta_w
from	prescr_dieta a,
		prescr_dieta_hor b
where	a.nr_prescricao = b.nr_prescricao
and		a.nr_sequencia	= b.nr_seq_dieta
and		a.nr_prescricao	= nr_prescricao_p
and		b.nr_prescricao	= nr_prescricao_p
and		(b.dt_lib_horario IS NOT NULL AND b.dt_lib_horario::text <> '');	
	
BEGIN

ie_conforme_intervalo_w := obter_param_usuario(924, 710, obter_perfil_ativo, nm_usuario_p, 0, ie_conforme_intervalo_w);	
ie_selecionar_dieta_susp_w := obter_param_usuario(1113, 412, obter_perfil_ativo, nm_usuario_p, 0, ie_selecionar_dieta_susp_w);
ie_contem_jejum_nut_w := obter_param_usuario(924, 854, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_contem_jejum_nut_w);

select	coalesce(max(a.ie_gerar_proc_gedipa_job), 'N') ie_gerar_proc_gedipa_job,
		coalesce(max(a.ie_gerar_proc_dieta),'N') ie_gerar_proc_dieta
into STRICT	ie_gerar_proc_gedipa_job_w,
		ie_gerar_proc_dieta_w
from	parametros_farmacia a
where	a.cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

if (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') then
	/* obter dados prescricao */

	select	nr_atendimento,
		dt_inicio_prescr,
		dt_validade_prescr,
		cd_estabelecimento
	into STRICT	nr_atendimento_w,
		dt_inicio_prescr_w,
		dt_validade_prescr_w,
		cd_estabelecimento_w
	from	prescr_medica
	where	nr_prescricao = nr_prescricao_p;
	
	/* obter horarios */

	open c01;
	loop
	fetch c01 into	
		cd_refeicao_w,
		ds_horario_w,
		nr_seq_dieta_w,
		ds_observacao_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		dt_inicio_prescr_aux_w	:= dt_inicio_prescr_w;
		if (position('A' in ds_horario_w) > 0) then
			dt_inicio_prescr_aux_w := dt_inicio_prescr_w + 1;
			ds_horario_w	:= replace(ds_horario_w,'A','');
		end if;
		/* gerar horario refeicao */

		dt_horario_ref_w := trunc(ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_inicio_prescr_aux_w, coalesce(ds_horario_w, '00:00')), 'mi');
		
		/* validar data x data atual */

		if (dt_horario_ref_w < clock_timestamp()) and (dt_horario_ref_w+1<= dt_validade_prescr_w) then
			dt_horario_ref_w := dt_horario_ref_w + 1;
		elsif (dt_horario_ref_w < clock_timestamp()) then
			ie_gerar_horario_w := 'N';
		elsif (dt_horario_ref_w > clock_timestamp()) and (dt_horario_ref_w < dt_inicio_prescr_aux_w) then /* Rafael 6/6/8 OS94873  */
			dt_horario_ref_w 	:= dt_horario_ref_w + 1;
			ie_gerar_horario_w 	:= 'S';
		else
			ie_gerar_horario_w := 'S';
		end if;
		
		/* validar horario x horarios ja gerados */

		if (ie_selecionar_dieta_susp_w = 'N') then
			select	count(*)
			into STRICT	qt_horario_w
			from	prescr_dieta_hor a,
				prescr_medica b
			where	a.nr_prescricao	= b.nr_prescricao
			and	a.dt_horario = dt_horario_ref_w
			and	coalesce(a.dt_suspensao::text, '') = ''
			and	coalesce(b.dt_suspensao::text, '') = ''
			and	b.nr_prescricao		= nr_prescricao_p
			and	b.nr_atendimento	= nr_atendimento_w
			and	not exists (SELECT 1 from prescr_dieta x where x.nr_prescricao = b.nr_prescricao and (x.dt_suspensao IS NOT NULL AND x.dt_suspensao::text <> ''))
			and	Obter_se_horario_liberado(a.dt_lib_horario, a.dt_horario) = 'S';
		else		
			select	count(*)
			into STRICT	qt_horario_w
			from	prescr_dieta_hor a,
				prescr_medica b
			where	a.nr_prescricao	= b.nr_prescricao
			and	a.dt_horario = dt_horario_ref_w
			and	coalesce(a.dt_suspensao::text, '') = ''
			and	coalesce(b.dt_suspensao::text, '') = ''
			and	b.nr_prescricao		= nr_prescricao_p
			and	b.nr_atendimento	= nr_atendimento_w
			and	not exists (SELECT 1 from prescr_dieta x where x.nr_prescricao = b.nr_prescricao and (x.dt_suspensao IS NOT NULL AND x.dt_suspensao::text <> '') and x.nr_sequencia = a.nr_seq_dieta)
			and	Obter_se_horario_liberado(a.dt_lib_horario, a.dt_horario) = 'S';
		end if;
		
		/* gerar horario */

		if (ie_gerar_horario_w = 'S') and (qt_horario_w = 0) and (dt_horario_ref_w < dt_validade_prescr_w) and (dt_horario_ref_w >= dt_inicio_prescr_aux_w) then
			/* obter sequencia */

			select	nextval('prescr_dieta_hor_seq')
			into STRICT	nr_seq_horario_w
			;
			
			select	count(*)
			into STRICT	qt_jejum_w
			from	rep_jejum a,
				prescr_medica b
			where	dt_horario_ref_w between dt_inicio and dt_fim -1/1440
			and	a.nr_prescricao		= b.nr_prescricao
			and	coalesce(b.dt_suspensao::text, '') = ''
			and	coalesce(a.ie_suspenso,'N') <> 'S'
			and	b.nr_atendimento	= nr_atendimento_w;
			
			if (qt_jejum_w = 0) or (ie_contem_jejum_nut_w = 'S') then
				
				/* gerar registro */

				insert into prescr_dieta_hor(
					nr_sequencia,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					dt_atualizacao,
					nm_usuario,
					nr_prescricao,
					cd_refeicao,
					dt_horario,
					dt_fim_horario,
					dt_suspensao,
					nm_usuario_reaprazamento,
					qt_hor_reaprazamento,
					ie_aprazado,
					nr_seq_dieta,
					ds_observacao,
					dt_lib_horario
					)
				values (
					nr_seq_horario_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_prescricao_p,
					cd_refeicao_w,
					dt_horario_ref_w,
					null,
					null,
					null,
					null,
					'N',
					nr_seq_dieta_w,
					ds_observacao_w,
					clock_timestamp()
					);
			end if;
		end if;
		end;
	end loop;
	close c01;
	
	/* obter horarios */

	open c02;
	loop
	fetch c02 into	
		ds_horarios_padr_w,
		nr_seq_dieta_w,
		ds_observacao_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		dt_inicio_prescr_aux_w	:= dt_inicio_prescr_w;
		if (ds_horarios_padr_w IS NOT NULL AND ds_horarios_padr_w::text <> '') then
			while	(ds_horarios_padr_w IS NOT NULL AND ds_horarios_padr_w::text <> '') LOOP
				select	position(' ' in ds_horarios_padr_w)
				into STRICT	k
				;
	
				if (k > 1) and ((substr(ds_horarios_padr_w, 1, k -1) IS NOT NULL AND (substr(ds_horarios_padr_w, 1, k -1))::text <> '')) then
					ds_horario_w		:= substr(ds_horarios_padr_w, 1, k-1);
					ds_horario_w		:= replace(ds_horario_w, ' ','');
					ds_horarios_padr_w	:= substr(ds_horarios_padr_w, k + 1, 2000);
				elsif (ds_horarios_padr_w IS NOT NULL AND ds_horarios_padr_w::text <> '') then
					ds_horario_w 		:= replace(ds_horarios_padr_w,' ','');
					ds_horarios_padr_w	:= '';
				end if;		
		
				ds_horario_w	:= replace(ds_horario_w,'A','');

				/* gerar horario refeicao */

				dt_horario_ref_w := trunc(ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_inicio_prescr_aux_w, coalesce(ds_horario_w, '00:00')), 'mi');

				/* validar data x data atual */

				if (dt_horario_ref_w < clock_timestamp()) and (dt_horario_ref_w+1<= dt_validade_prescr_w) then
					dt_horario_ref_w := dt_horario_ref_w + 1;
				elsif (dt_horario_ref_w < clock_timestamp()) then
					ie_gerar_horario_w := 'N';
				elsif (dt_horario_ref_w > clock_timestamp()) and (dt_horario_ref_w < dt_inicio_prescr_aux_w) then /* Rafael 6/6/8 OS94873  */
					dt_horario_ref_w 	:= dt_horario_ref_w + 1;
					ie_gerar_horario_w 	:= 'S';
				else
					ie_gerar_horario_w := 'S';
				end if;

				/* validar horario x horarios ja gerados */

				select	count(*)
				into STRICT	qt_horario_w
				from	prescr_dieta_hor a,
					prescr_medica b
				where	a.nr_prescricao	= b.nr_prescricao
				and	a.dt_horario = dt_horario_ref_w
				and	coalesce(a.dt_suspensao::text, '') = ''
				and	coalesce(b.dt_suspensao::text, '') = ''
				and	b.nr_prescricao		= nr_prescricao_p
				and	b.nr_atendimento	= nr_Atendimento_w
				and	Obter_se_horario_liberado(a.dt_lib_horario, a.dt_horario) = 'S';

				/* gerar horario */

				if (ie_gerar_horario_w = 'S') and (qt_horario_w = 0) and (dt_horario_ref_w < dt_validade_prescr_w) and (dt_horario_ref_w >= dt_inicio_prescr_aux_w) then
					/* obter sequencia */

					select	nextval('prescr_dieta_hor_seq')
					into STRICT	nr_seq_horario_w
					;
					
					select	count(*)
					into STRICT	qt_jejum_w
					from	rep_jejum a,
						prescr_medica b
					where	dt_horario_ref_w between dt_inicio and dt_fim -1/1440
					and	a.nr_prescricao		= b.nr_prescricao
					and	coalesce(b.dt_suspensao::text, '') = ''
					and	coalesce(a.ie_suspenso,'N') <> 'S'
					and	b.nr_atendimento	= nr_atendimento_w;
			
					if (qt_jejum_w = 0) or (ie_contem_jejum_nut_w = 'S') then
					
						/* gerar registro */

						insert into prescr_dieta_hor(
							nr_sequencia,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							dt_atualizacao,
							nm_usuario,
							nr_prescricao,
							dt_horario,
							dt_fim_horario,
							dt_suspensao,
							nm_usuario_reaprazamento,
							qt_hor_reaprazamento,
							ie_aprazado,
							nr_seq_dieta,
							ds_observacao
							)
						values (
							nr_seq_horario_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_prescricao_p,
							dt_horario_ref_w,
							null,
							null,
							null,
							null,
							'N',
							nr_seq_dieta_w,
							ds_observacao_w
							);
					end if;
				end if;
			end loop;
		end if;	
		end;
	end loop;
	close c02;
	
	if (ie_gerar_proc_gedipa_job_w = 'N') and (ie_gerar_proc_dieta_w = 'S') then
		for c_diet_process_w in c_diet_process
		loop
			CALL Gedipa_Gerar_Proc_Instantaneo(	nr_prescricao_p 	=>	nr_prescricao_p,
											nr_sequencia_p 		=>	c_diet_process_w.nr_seq_dieta_w,
											nr_seq_solucao_p	=>	null,
											nr_seq_horario_p	=>	null);
		end loop;
	end if;
	
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_prescr_dieta_hor (nr_prescricao_p bigint, nm_usuario_p text) FROM PUBLIC;

