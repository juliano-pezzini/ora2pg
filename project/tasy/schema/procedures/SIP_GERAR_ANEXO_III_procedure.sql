-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sip_gerar_anexo_iii ( nr_seq_lote_sip_p bigint, nm_usuario_p text) AS $body$
DECLARE


dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
cd_estabelecimento_w		smallint;
nr_seq_protocolo_w		bigint;
dt_mes_competencia_w		timestamp;
nr_seq_conta_w			bigint;
dt_autorizacao_w		timestamp;
nr_seq_segurado_w		bigint;
nr_seq_conta_proc_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_area_procedimento_w		integer;
cd_especialidade_w		integer;
cd_grupo_proc_w			bigint;
nr_seq_estrutura_w		bigint;
nr_seq_estrutura_ww		bigint;
cd_estrutura_w			varchar(10);
cd_estrutura_ww			varchar(10);
ds_estrutura_w			varchar(80);
ds_estrutura_ww			varchar(80);
qt_procedimento_w		double precision;
ie_evento_w			varchar(1);
ie_evento_ww			varchar(1);
ie_estrutura_w			varchar(1);
ie_estrutura_ww			varchar(1);
nr_seq_cbo_saude_w		bigint;
nr_seq_clinica_w		bigint;
cd_tiss_w			varchar(10);
cd_estrut_w			varchar(10);
nr_eventos_w			bigint;
cd_estrutura_total_w		varchar(30);
cd_estrutura_total_ww		varchar(30);
k				bigint;
nr_eventos_ww			bigint;
ie_tipo_item_w			varchar(2);
cd_estrutura_sip_w		varchar(20);
vl_item_w			double precision;
ie_liberado_w			varchar(1);
qt_proc_anexo_iii_w		bigint	:= 0;

C01 CURSOR FOR
	/* Procedimento ambulatoriais */

	SELECT	'PA',
		coalesce(b.nr_seq_clinica,0),
		sip_obter_cbo_anexo_iii(c.nr_sequencia, 'C'),
		c.cd_procedimento,
		c.ie_origem_proced,
		coalesce(sum(c.qt_procedimento),0),
		coalesce(sum(c.vl_liberado + c.vl_glosa),0)
	from	pls_conta_proc		c,
		pls_conta		b,
		pls_protocolo_conta	a
	where	a.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= c.nr_seq_conta
	and	a.ie_status	= 3
	and	a.dt_mes_competencia between dt_periodo_inicial_w and dt_periodo_final_w
	and	pls_obter_se_internado(b.nr_sequencia, 'C')	= 'N'
	and	(c.cd_conta_deb IS NOT NULL AND c.cd_conta_deb::text <> '')
	and	coalesce(b.ie_tipo_segurado,'B')	= 'B'
	group by
		b.nr_seq_clinica,
		sip_obter_cbo_anexo_iii(c.nr_sequencia, 'C'),
		c.cd_procedimento,
		c.ie_origem_proced
	
union

	/* Internações */

	SELECT	'I',
		coalesce(c.nr_seq_clinica,999),
		0,
		0,
		0,
		sum(1),
		0
	from	pls_beneficiario_internado	c,
		pls_conta			b,
		pls_protocolo_conta		a
	where	a.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= c.nr_seq_conta
	and	a.ie_status		= 3
	and	a.dt_mes_competencia between dt_periodo_inicial_w and dt_periodo_final_w
	and	(c.nr_seq_segurado IS NOT NULL AND c.nr_seq_segurado::text <> '')
	and	coalesce(b.ie_tipo_segurado,'B')	= 'B'
	group by
		c.nr_seq_clinica
	
union

	/* Procedimento de internação */

	select	'D',
		0,
		0,
		c.cd_procedimento,
		c.ie_origem_proced,
		coalesce(sum(c.qt_procedimento),0),
		coalesce(sum(c.vl_liberado + c.vl_glosa),0)
	from	pls_conta_proc		c,
		pls_conta		b,
		pls_protocolo_conta	a
	where	a.nr_sequencia		= b.nr_seq_protocolo
	and	b.nr_sequencia		= c.nr_seq_conta
	and	a.ie_status	= 3
	and	a.dt_mes_competencia between dt_periodo_inicial_w and dt_periodo_final_w
	and	a.ie_situacao in ('D','T')
	and	(b.nr_seq_segurado IS NOT NULL AND b.nr_seq_segurado::text <> '')
	and	pls_obter_se_internado(b.nr_sequencia, 'C')	= 'S'
	and	c.qt_procedimento	> 0
	and	coalesce(b.ie_tipo_segurado,'B')	= 'B'
	group by
		b.nr_seq_clinica,
		sip_obter_cbo_anexo_iii(c.nr_sequencia, 'C'),
		c.cd_procedimento,
		c.ie_origem_proced;

C03 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_estrutura,
		a.ds_estrutura,
		a.ie_evento,
		a.ie_estrutura,
		a.cd_estrutura_total,
		b.ie_liberado
	from	sip_estrutura_anexo 	a,
		sip_estrut_anexo_regra	b
	where	a.nr_sequencia		= b.nr_seq_estrutura
	and	coalesce(b.cd_procedimento, coalesce(cd_procedimento_w,0))	= coalesce(cd_procedimento_w,0)
	and	coalesce(b.ie_origem_proced, coalesce(ie_origem_proced_w,0))	= coalesce(ie_origem_proced_w,0)
	and	coalesce(b.cd_grupo_proc, coalesce(cd_grupo_proc_w,0))		= coalesce(cd_grupo_proc_w,0)
	and	coalesce(b.cd_especialidade, coalesce(cd_especialidade_w,0))	= coalesce(cd_especialidade_w,0)
	and	coalesce(b.cd_area_procedimento, coalesce(cd_area_procedimento_w,0)) = coalesce(cd_area_procedimento_w,0)
	and	coalesce(a.nr_seq_cbo_saude, coalesce(nr_seq_cbo_saude_w,0)) 	= coalesce(nr_seq_cbo_saude_w,0)
	and	(((ie_tipo_item_w = 'D') and (substr(a.cd_estrutura,1,1) = '5')) or (ie_tipo_item_w <> 'D'))
	order by
		coalesce(CASE WHEN a.cd_estrutura='1.27' THEN '2' WHEN a.cd_estrutura='2.18' THEN '3' WHEN a.cd_estrutura='3.09' THEN '4'  ELSE a.cd_estrutura END ,-1) desc,
		coalesce(cd_procedimento,-1),
		coalesce(cd_grupo_proc,-1),
		coalesce(cd_especialidade,-1),
		coalesce(cd_area_procedimento,-1);

C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_estrutura,
		a.ds_estrutura,
		a.ie_evento,
		a.ie_estrutura,
		a.cd_estrutura_total
	from	sip_estrutura_anexo a
	where	not exists (SELECT	1
				from	w_sip_anexo x
				where	a.cd_estrutura		= x.cd_estrutura
				and	x.nr_seq_lote_sip	= nr_seq_lote_sip_p);


BEGIN

begin
select	dt_periodo_inicial,
	coalesce(dt_periodo_final, clock_timestamp()),
	cd_estabelecimento
into STRICT	dt_periodo_inicial_w,
	dt_periodo_final_w,
	cd_estabelecimento_w
from	pls_lote_sip
where	nr_sequencia	= nr_seq_lote_sip_p;
exception
	when others then
	/*Problema na leitura dos dados do lote SIP (#@NR_SEQ_LOTE_SIP_P#@)*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(305698,'NR_SEQ_LOTE_SIP_P=' || nr_seq_lote_sip_p);
end;

/*delete from logxxxx_tasy where cd_log = 2010;*/

open C01;
loop
fetch C01 into
	ie_tipo_item_w,
	nr_seq_clinica_w,
	nr_seq_cbo_saude_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	qt_procedimento_w,
	vl_item_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (nr_seq_clinica_w = 0) then
		nr_seq_estrutura_w	:= 0;
		cd_estrutura_w		:= '';
		ds_estrutura_w		:= '';
		ie_evento_w		:= '';
		ie_estrutura_w		:= '';
		cd_estrutura_total_w	:= '';

		/*	obter estrutura do procedimento */

		select 	coalesce(cd_grupo_proc,0),
			coalesce(cd_especialidade,0),
			coalesce(cd_area_procedimento,0)
		into STRICT	cd_grupo_proc_w,
			cd_especialidade_w,
			cd_area_procedimento_w
		from	estrutura_procedimento_v
		where	cd_procedimento 	= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w
		order by
			coalesce(cd_procedimento,-1),
			coalesce(cd_grupo_proc,-1),
			coalesce(cd_especialidade,-1),
			coalesce(cd_area_procedimento,-1);

		open C03;
		loop
		fetch C03 into
			nr_seq_estrutura_ww,
			cd_estrutura_ww,
			ds_estrutura_ww,
			ie_evento_ww,
			ie_estrutura_ww,
			cd_estrutura_total_ww,
			ie_liberado_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			if (ie_liberado_w	= 'S') then
				nr_seq_estrutura_w	:= nr_seq_estrutura_ww;
				cd_estrutura_w		:= cd_estrutura_ww;
				ds_estrutura_w		:= ds_estrutura_ww;
				ie_evento_w		:= ie_evento_ww;
				ie_estrutura_w		:= ie_estrutura_ww;
				cd_estrutura_total_w	:= cd_estrutura_total_ww;
			else
				nr_seq_estrutura_w	:= 0;
				cd_estrutura_w		:= '';
				ds_estrutura_w		:= '';
				ie_evento_w		:= '';
				ie_estrutura_w		:= '';
				cd_estrutura_total_w	:= '';
			end if;
			end;
		end loop;
		close C03;
	elsif (nr_seq_clinica_w <> 0) then
		if (nr_seq_clinica_w	= 999) then
			cd_estrutura_w := '4.02';
		else
			select	cd_tiss
			into STRICT	cd_tiss_w
			from	pls_clinica
			where	nr_sequencia	= nr_seq_clinica_w;

			cd_estrutura_w := '4.0' || cd_tiss_w;
		end if;

		select	ds_estrutura,
			ie_evento,
			ie_estrutura
		into STRICT	ds_estrutura_w,
			ie_evento_w,
			ie_estrutura_w
		from	sip_estrutura_anexo
		where	cd_estrutura = cd_estrutura_w;
	end if;

	/* Tratamento feito para verificar se o item não possui valor de despesa então não pode ter Nº de eventos, isso porque não encaixou em nenhuma regra do SIP  das contas comtábeis*/

	if (vl_item_w	= 0) and (nr_seq_clinica_w = 0) then
		qt_procedimento_w	:= 0;
	end if;

	select	count(*)
	into STRICT	qt_proc_anexo_iii_w
	from	sip_anexo_iii_procedimento
	where	nr_seq_lote_sip		= nr_seq_lote_sip_p
	and	cd_procedimento		= cd_procedimento_w
	and	ie_origem_proced	= ie_origem_proced_w;

	if (qt_proc_anexo_iii_w	= 0) and (cd_procedimento_w	> 0) and (ie_origem_proced_w	> 0) then
		begin
		insert into sip_anexo_iii_procedimento(nr_sequencia, nr_seq_lote_sip, cd_procedimento,
			ie_origem_proced, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, cd_estrutura_sip,
			qt_procedimento)
		values (	nextval('sip_anexo_ii_procedimento_seq'), nr_seq_lote_sip_p, cd_procedimento_w,
			ie_origem_proced_w, clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, cd_estrutura_w,
			qt_procedimento_w);
		exception
			when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(cd_procedimento_w || ' - ' || ie_origem_proced_w);
		end;
	end if;

	if (cd_estrutura_w IS NOT NULL AND cd_estrutura_w::text <> '') then
		insert into w_sip_anexo(
			nr_sequencia, cd_estabelecimento, nr_seq_lote_sip,
			cd_estrutura, ds_estrutura, qt_eventos,
			ie_evento, ie_estrutura, dt_atualizacao,
			nm_usuario)
		values (	nextval('w_sip_anexo_seq'), cd_estabelecimento_w, nr_seq_lote_sip_p,
			cd_estrutura_w, ds_estrutura_w, qt_procedimento_w,
			ie_evento_w, ie_estrutura_w, clock_timestamp(),
			nm_usuario_p);
	end if;

	/*insert into logxxx_tasy
		(dt_atualizacao, nm_usuario, cd_log,
		ds_log)
	values (sysdate, nm_usuario_p, 2010,
		nr_seq_clinica_w); */
	commit;
	CALL gravar_processo_longo('Cursor C01','SIP_GERAR_ANEXO_III',-1);
	end;
end loop;
close C01;

open C04;
loop
fetch C04 into
	nr_seq_estrutura_w,
	cd_estrutura_w,
	ds_estrutura_w,
	ie_evento_w,
	ie_estrutura_w,
	cd_estrutura_total_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	if (cd_estrutura_w	= '5') then
		select	sum(qt_eventos)
		into STRICT	nr_eventos_w
		from 	w_sip_anexo
		where 	nr_seq_lote_sip = nr_seq_lote_sip_p
		and	substr(cd_estrutura,1,1) = '5';
	else
		select	sum(nr_eventos)
		into STRICT	nr_eventos_w
		from 	w_sip_item_despesa
		where 	nr_seq_lote_sip = nr_seq_lote_sip_p
		and	substr(cd_estrutura,1,length(cd_estrutura_total_w)) = cd_estrutura_total_w;
	end if;

	insert into w_sip_anexo(
		nr_sequencia, cd_estabelecimento, nr_seq_lote_sip,
		cd_estrutura, ds_estrutura, qt_eventos,
		ie_evento, ie_estrutura, dt_atualizacao,
		nm_usuario)
	values (	nextval('w_sip_anexo_seq'), cd_estabelecimento_w, nr_seq_lote_sip_p,
		cd_estrutura_w, ds_estrutura_w, coalesce(nr_eventos_w,0),
		ie_evento_w, ie_estrutura_w, clock_timestamp(),
		nm_usuario_p);
end loop;
close C04;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sip_gerar_anexo_iii ( nr_seq_lote_sip_p bigint, nm_usuario_p text) FROM PUBLIC;

