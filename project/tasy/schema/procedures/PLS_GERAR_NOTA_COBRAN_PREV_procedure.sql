-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_nota_cobran_prev ( nr_seq_cobranca_prev_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_tipo_item_w		varchar(1);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_material_w	bigint;
nr_seq_nota_fiscal_w	bigint;
cd_cgc_emitente_w	varchar(14);
cd_serie_nf_w		nota_fiscal.cd_serie_nf%type;
nr_sequencia_nf_w	bigint;
dt_emissao_w		timestamp;
vl_mercadoria_w		double precision;
vl_total_nota_w		double precision;
dt_contabil_w		timestamp;
cd_condicao_pagamento_w	bigint;
cd_natureza_operacao_w	smallint;
cd_cgc_w		varchar(14);
cd_pessoa_fisica_w	varchar(10);
ie_tipo_nota_w		varchar(5);
nr_seq_pagador_w	bigint;
nr_seq_segurado_w	bigint;
nr_nota_fiscal_w	varchar(255);
cd_material_w		integer;
nr_seq_sit_trib_w	bigint;
vl_proc_mat_acum_w	double precision;
qt_item_calc_w		bigint;
qt_item_w		double precision;
vl_item_w		double precision;
cd_material_ops_w	varchar(30);
ds_material_w		varchar(255);
ie_numero_nota_w	varchar(3);
cd_operacao_nf_w	smallint;
ie_estab_serie_nf_w	parametro_compras.ie_estab_serie_nf%type;

/*Procedimentos e Materiais da Nota */

c01 CURSOR FOR
SELECT	'P' ie_tipo_item,
	a.cd_procedimento,
	a.ie_origem_proced,
	null nr_seq_material,
	a.qt_procedimento,
	a.vl_procedimento
from	pls_cobranca_previa_proc a
where	a.nr_seq_cob_previa	= nr_seq_cobranca_prev_p

union all

select	'M' ie_tipo_item,
	null cd_procedimento,
	null ie_origem_proced,
	a.nr_seq_material,
	a.qt_material,
	a.vl_material
from	pls_cobranca_previa_mat a
where	a.nr_seq_cob_previa	= nr_seq_cobranca_prev_p;


BEGIN

/* Verificar se ainda não foi gerada a nota fiscal */

select	max(a.nr_sequencia)
into STRICT	nr_seq_nota_fiscal_w
from	nota_fiscal a
where	a.nr_seq_cob_previa	= nr_seq_cobranca_prev_p;

if (coalesce(nr_seq_nota_fiscal_w::text, '') = '') then
	select	nextval('nota_fiscal_seq')
	into STRICT	nr_seq_nota_fiscal_w
	;

	select	cd_cgc
	into STRICT	cd_cgc_emitente_w
	from	estabelecimento a
	where	a.cd_estabelecimento	= cd_estabelecimento_p;

	/* obter se será considerado estabelecimento no parâmetro de compras */

	select	coalesce(max(ie_estab_serie_nf),'N')
	into STRICT	ie_estab_serie_nf_w
	from	parametro_compras
	where	cd_estabelecimento = cd_estabelecimento_p;


	/* Inicializações */

	vl_mercadoria_w	:= 0;
	vl_total_nota_w	:= 0;
	nr_sequencia_nf_w	:= 0;
	dt_contabil_w	:= trunc(clock_timestamp(),'dd');
	dt_emissao_w	:= clock_timestamp();
	nr_nota_fiscal_w	:= nr_seq_nota_fiscal_w + 800000;

	select	a.nr_seq_pagador,
		a.nr_seq_segurado,
		a.cd_pessoa_fisica
	into STRICT	nr_seq_pagador_w,
		nr_seq_segurado_w,
		cd_pessoa_fisica_w
	from	pls_cobranca_previa_serv a
	where	a.nr_sequencia	= nr_seq_cobranca_prev_p;

	if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
		if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
			select	a.cd_pessoa_fisica,
				a.cd_cgc
			into STRICT	cd_pessoa_fisica_w,
				cd_cgc_w
			from	pls_contrato_pagador a
			where	a.nr_sequencia	= nr_seq_pagador_w;
		else
			select	a.cd_pessoa_fisica
			into STRICT	cd_pessoa_fisica_w
			from	pls_segurado a
			where	a.nr_sequencia	= nr_seq_segurado_w;
		end if;
	end if;

	ie_tipo_nota_w		:= 'SF';

	if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
		ie_tipo_nota_w	:= 'SE';
	end if;

	/* Obter série, condição de pagamento  e natureza operação dos parâmetros */

	select	max(a.cd_condicao_pagamento),
		max(a.cd_serie_nf),
		max(a.cd_natureza_operacao),
		max(a.nr_seq_sit_trib),
		max(a.cd_operacao_nf)
	into STRICT	cd_condicao_pagamento_w,
		cd_serie_nf_w,
		cd_natureza_operacao_w,
		nr_seq_sit_trib_w,
		cd_operacao_nf_w
	from	pls_parametros_cob_previa a
	where	a.cd_estabelecimento	= cd_estabelecimento_p;

	if (coalesce(cd_condicao_pagamento_w::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(145036);
	end if;

	insert into nota_fiscal(nr_sequencia,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		nr_nota_fiscal,
		cd_estabelecimento,
		cd_cgc_emitente,
		cd_operacao_nf,
		cd_serie_nf,
		nr_sequencia_nf,
		dt_emissao,
		dt_entrada_saida,
		ie_acao_nf,
		ie_emissao_nf,
		ie_tipo_frete,
		vl_mercadoria,
		vl_total_nota,
		qt_peso_bruto,
		qt_peso_liquido,
		cd_condicao_pagamento,
		dt_contabil,
		nr_lote_contabil,
		cd_cgc,
		cd_pessoa_fisica,
		vl_ipi,
		vl_descontos,
		vl_frete,
		vl_seguro,
		vl_despesa_acessoria,
		cd_natureza_operacao,
		ie_situacao,
		ie_tipo_nota,
		nr_seq_cob_previa)
	values (nr_seq_nota_fiscal_w,
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nr_nota_fiscal_w,
		cd_estabelecimento_p,
		cd_cgc_emitente_w,
		cd_operacao_nf_w,
		cd_serie_nf_w,
		nr_sequencia_nf_w,
		dt_emissao_w,
		dt_emissao_w,
		'1',
		'0',
		'0',
		vl_mercadoria_w,
		vl_total_nota_w,
		0,
		0,
		cd_condicao_pagamento_w,
		dt_contabil_w,
		0,
		cd_cgc_w,
		cd_pessoa_fisica_w,
		0,
		0,
		0,
		0,
		0,
		cd_natureza_operacao_w,
		'1',
		ie_tipo_nota_w,
		nr_seq_cobranca_prev_p);

	/* Gerar itens */

	qt_item_calc_w		:= 0;
	vl_proc_mat_acum_w	:= 0;
	open c01;
	loop
	fetch c01 into
		ie_tipo_item_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_material_w,
		qt_item_w,
		vl_item_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		qt_item_calc_w	:= qt_item_calc_w + 1;

		cd_material_w	:= null;

		if (nr_seq_material_w IS NOT NULL AND nr_seq_material_w::text <> '') then
			select	a.cd_material,
				a.cd_material_ops,
				a.ds_material
			into STRICT	cd_material_w,
				cd_material_ops_w,
				ds_material_w
			from	pls_material a
			where	a.nr_sequencia	= nr_seq_material_w;

			if (coalesce(cd_material_w::text, '') = '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(145061,'DS_MATERIAL=' || cd_material_ops_w || ' - ' || ds_material_w);
			end if;
		end if;

		insert into nota_fiscal_item(nr_sequencia,
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_sequencia_nf,
			nr_item_nf,
			cd_natureza_operacao,
			qt_item_nf,
			vl_unitario_item_nf,
			vl_total_item_nf,
			nm_usuario,
			dt_atualizacao,
			vl_frete,
			vl_desconto,
			vl_despesa_acessoria,
			cd_material,
			cd_procedimento,
			ie_origem_proced,
			vl_desconto_rateio,
			vl_seguro,
			vl_liquido,
			pr_desconto,
			nr_nota_fiscal)
		values (nr_seq_nota_fiscal_w,
			cd_estabelecimento_p,
			cd_cgc_emitente_w,
			cd_serie_nf_w,
			nr_sequencia_nf_w,
			qt_item_calc_w,
			cd_natureza_operacao_w,
			coalesce(qt_item_w,1),
			vl_item_w,
			(qt_item_w * vl_item_w),
			nm_usuario_p,
			clock_timestamp(),
			0,
			0,
			0,
			cd_material_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			0,
			0,
			(qt_item_w * vl_item_w),
			0,
			nr_nota_fiscal_w);

		vl_proc_mat_acum_w	:= vl_proc_mat_acum_w + vl_item_w;
		end;
	end loop;
	close c01;

	/* Obter número correto de nota fiscal e atualizar totais */

	lock table serie_nota_fiscal in exclusive mode;

	select	nr_ultima_nf + 1,
		ie_numero_nota
	into STRICT	nr_nota_fiscal_w,
		ie_numero_nota_w
	from	serie_nota_fiscal
	where	cd_serie_nf 		= cd_serie_nf_w
	and	cd_estabelecimento 	= cd_estabelecimento_p;

	if (coalesce(ie_estab_serie_nf_w,'N') = 'S') then
		update	serie_nota_fiscal
		set	nr_ultima_nf 		= nr_nota_fiscal_w
		where	cd_serie_nf 		= cd_serie_nf_w
		and	cd_estabelecimento in (SELECT	z.cd_estabelecimento
						from	estabelecimento z
						where	z.cd_cgc = cd_cgc_emitente_w);
	else
		update	serie_nota_fiscal
		set	nr_ultima_nf 		= nr_nota_fiscal_w
		where	cd_serie_nf 		= cd_serie_nf_w
		and	cd_estabelecimento 	= cd_estabelecimento_p;
	end if;

	update	nota_fiscal
	set	vl_mercadoria	= vl_proc_mat_acum_w,
		vl_total_nota	= vl_proc_mat_acum_w,
		vl_descontos	= 0,
		vl_ipi		= 0,
		nr_nota_fiscal	= nr_nota_fiscal_w
	where	nr_sequencia 	= nr_seq_nota_fiscal_w;

	update	nota_fiscal_item
	set	nr_nota_fiscal	= nr_nota_fiscal_w
	where	nr_sequencia 	= nr_seq_nota_fiscal_w;

	CALL gerar_imposto_nf(nr_seq_nota_fiscal_w, nm_usuario_p, nr_seq_sit_trib_w, null);

	CALL atualiza_total_nota_fiscal(nr_seq_nota_fiscal_w,nm_usuario_p);

	/* Gerar vencimentos */

	CALL gerar_venc_nota_fiscal_Pac(nr_seq_nota_fiscal_w, dt_emissao_w);

	update	nota_fiscal
	set	dt_atualizacao_estoque = clock_timestamp()
	where	nr_sequencia = nr_seq_nota_fiscal_w;

	begin
	CALL gerar_conta_contabil_nf(nr_seq_nota_fiscal_w,nm_usuario_p);
	exception when others then
		null;
	end;
end if;

/* Commit na procedure externa */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_nota_cobran_prev ( nr_seq_cobranca_prev_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

