-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_baca_pos_estab_receb_cta () AS $body$
DECLARE

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Gera o pós estabelecido do recebimento de contas (Envio A520), para as contas remanecentes.

		Serão consideradas as contas médicas que:
			- possuem data de competencia do protocolo superior a 01/01/2019
			- não estiverem fechadas ou canceladas
			- congenere vinculado ao beneficiário é do tipo "Cooperativa médica"
			- não possuem nenhum pós estabelecido

		A data 01/01/2019 é a data de inicio de vigência do A520

-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/c01 CURSOR FOR
	SELECT	b.nr_sequencia nr_seq_conta,
		c.nr_sequencia nr_seq_conta_proc,
		null nr_seq_conta_mat,
		-- qualquer pós para o proc, independente do status
		sum((	SELECT	count(1) qt
			from	pls_conta_pos_estabelecido	x
			where	x.nr_seq_conta_proc		= c.nr_sequencia)
			+
			(select	count(1) qt
			from	pls_conta_pos_proc	x
			where	x.nr_seq_conta_proc	= c.nr_sequencia)) qt_pos_proc,
		0 qt_pos_mat
	from	pls_protocolo_conta	a,
		pls_conta		b,
		pls_conta_proc		c,
		pls_segurado		d,
		pls_congenere		e
	where	b.nr_seq_protocolo	= a.nr_sequencia
	and	c.nr_seq_conta		= b.nr_sequencia
	and	d.nr_sequencia		= b.nr_seq_segurado
	and	e.nr_sequencia		= d.nr_seq_congenere
	and	e.ie_tipo_congenere	= 'CO'
	and	a.dt_recebimento	>= to_date('01/01/2019')
	and	b.ie_status		not in ('C', 'F')
	group by b.nr_sequencia, c.nr_sequencia
	
union all

	select	b.nr_sequencia nr_seq_conta,
		null nr_seq_conta_proc,
		c.nr_sequencia nr_seq_conta_mat,

		0 qt_pos_proc,
		-- qualquer pós para o mat, independente do status
		sum((	select	count(1) qt
			from	pls_conta_pos_estabelecido	x
			where	x.nr_seq_conta_mat		= c.nr_sequencia)
			+
			(select	count(1) qt
			from	pls_conta_pos_mat	x
			where	x.nr_seq_conta_mat	= c.nr_sequencia)) qt_pos_mat
	from	pls_protocolo_conta	a,
		pls_conta		b,
		pls_conta_mat		c,
		pls_segurado		d,
		pls_congenere		e
	where	b.nr_seq_protocolo	= a.nr_sequencia
	and	c.nr_seq_conta		= b.nr_sequencia
	and	d.nr_sequencia		= b.nr_seq_segurado
	and	e.nr_sequencia		= d.nr_seq_congenere
	and	e.ie_tipo_congenere	= 'CO'
	and	a.dt_recebimento	>= to_date('01/01/2019')
	and	b.ie_status		not in ('C', 'F')
	group by b.nr_sequencia, c.nr_sequencia;
BEGIN

	-- carrega as contas e itens, com uma coluna indicando a quantidade de pós por item.
	for r_c01_w in C01() loop

		-- se NÃO tiver pós
		if (r_c01_w.qt_pos_proc = 0) and (r_c01_w.qt_pos_mat = 0) then

			CALL pls_gerar_valor_pos_estab(r_c01_w.nr_seq_conta, 'BACA', 'C', r_c01_w.nr_seq_conta_proc, r_c01_w.nr_seq_conta_mat, 'CA');

		end if; -- fim se não tiver pos
	end loop; -- fim itens
	commit;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_baca_pos_estab_receb_cta () FROM PUBLIC;

