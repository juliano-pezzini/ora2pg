-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_cancelar_lote ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
ap_lote_w				ap_lote%rowtype;
ap_lote_item_w			ap_lote_item%rowtype;
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w	intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w		intpd_eventos_sistema.nr_seq_sistema%type;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
ie_sistema_externo_w	varchar(15);
ds_erro_w				varchar(4000);
i						integer;
nr_seq_item_w			ap_lotE_item.nr_sequencia%type;
nr_novo_lote_w			ap_lote.nr_sequencia%type;
reg_integracao_p		gerar_int_padrao.reg_integracao;
cd_estabelecimento_w 	prescr_medica.cd_estabelecimento%type;
cd_local_estoque_w		ap_lote.cd_local_estoque%type;
cd_setor_atendimento_w	ap_lote.cd_setor_atendimento%type;
cd_perfil_w				perfil.cd_perfil%type;

c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/BATCH' passing xml_p columns
		NR_SEQ_LOTE				bigint		path	'NR_SEQUENCE',
		NR_SEQ_MOTIVO_CANCEL	bigint		path	'NR_SEQ_MOTIVO_CANCEL',
		DS_OBSERVACAO			varchar(255)	path	'DS_OBSERVACAO');

c01_w	c01%rowtype;

--begin
BEGIN
/*'Atualiza o status da fila para Em processamento'*/

update	intpd_fila_transmissao
set	ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

/*'Realiza o commit para nao alterar o status de processamento em caso de rollback por existir consistencia. 
Existe tratamento de excecao abaixo para colocar o status de erro em caso de falha'*/
commit;

/*'Busca os dados da regra do registro da fila que esta em processamento'*/

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w	:=	nr_seq_sistema_w;

/*'Alimenta as informacoes iniciais de controle e consistencia de cada atributo do XML'*/

reg_integracao_w.nr_seq_fila_transmissao:= nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:= 'R';
reg_integracao_w.ie_sistema_externo		:= ie_sistema_externo_w;
reg_integracao_w.ie_conversao			:= ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:= nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao	:= nr_seq_regra_w;
reg_integracao_w.qt_reg_log				:= 0;
reg_integracao_w.intpd_log_receb.delete;

open c01;
loop
fetch c01 into	
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	reg_integracao_w.nm_tabela		:=	'AP_LOTE';
	reg_integracao_w.nm_elemento	:=	'BATCH';
	reg_integracao_w.nr_seq_visao	:=	null;	
	
	/*'Consiste cada atributo do XML'*/
	
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_LOTE', c01_w.nr_seq_lote, 'N', ap_lote_w.nr_sequencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; ap_lote_w.nr_sequencia := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_MOTIVO_CANCEL', c01_w.nr_seq_motivo_cancel, 'N', ap_lote_w.nr_seq_motivo_cancel) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; ap_lote_w.nr_seq_motivo_cancel := _ora2pg_r.ds_valor_retorno_p;
	
	if (reg_integracao_w.qt_reg_log = 0) then
		begin
				
		CALL cancelar_lote_prescr(ap_lote_w.nr_sequencia, ap_lote_w.nr_seq_motivo_cancel, 'Brint', c01_w.ds_observacao, null);
		
		if (coalesce(ds_erro_w::text, '') = '') then
			update	intpd_fila_transmissao
			set	ie_status = 'S',
				nr_seq_documento = ap_lote_w.nr_sequencia
			where	nr_sequencia = nr_sequencia_p;
		else
			reg_integracao_w.intpd_log_receb[reg_integracao_w.qt_reg_log].ds_log	:=	substr(ds_erro_w,1,4000);
			reg_integracao_w.qt_reg_log												:=	reg_integracao_w.qt_reg_log + 1;
		end if;
		
		end;
	end if;
	end;
end loop;
close c01;

if (reg_integracao_w.qt_reg_log > 0) then
	begin
	rollback;
	
	update	intpd_fila_transmissao
	set	ie_status = 'E',
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;
	
	for i in 0..reg_integracao_w.qt_reg_log-1 loop
		intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
	end loop;
	end;
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_cancelar_lote ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

