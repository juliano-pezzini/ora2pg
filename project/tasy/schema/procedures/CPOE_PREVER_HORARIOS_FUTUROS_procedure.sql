-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_prever_horarios_futuros (( nr_atendimento_p atendimento_paciente.nr_atendimento%type, nr_prescricao_p prescr_medica.nr_prescricao%type, nr_seq_item_cpoe_p bigint, nm_rep_tabela_cpoe_p char, nm_rep_chave_cpoe_p char, nm_hor_tabela_rep_p char, nm_hor_chave_rep_p char, nm_cpoe_tabela_p char, dt_inicio_base_p timestamp, dt_inicio_p INOUT timestamp, dt_fim_p INOUT timestamp, cd_intervalo_p intervalo_prescricao.cd_intervalo%type, ds_horarios_p INOUT text, nr_ocorrencia_p INOUT bigint, hr_prim_horario_p INOUT text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_perfil_p perfil.cd_perfil%type, nm_usuario_p usuario.nm_usuario%type, qt_hora_intervalo_p bigint default null, qt_min_aplicacao_p bigint default null, cd_item_p text default null, cd_procedimento_p prescr_procedimento.cd_procedimento%type default null, nr_seq_proc_interno_p prescr_procedimento.nr_seq_proc_interno%type default null, ie_origem_proced_p prescr_procedimento.ie_origem_proced%type default null, nm_cpoe_ds_horarios_p char default 'ds_horarios', nm_cpoe_nr_ocorrencia_p char default 'nr_ocorrencia', nm_cpoe_hr_prim_horario_p char default 'hr_prim_horario', ie_continuo_p char default null, qt_tempo_aplicacao_p bigint default 24, qt_hora_fase_p bigint default null, nr_seq_pai_item_cpoe_p bigint default null, nm_rep_chave_pai_item_cpoe_p char default null, -- NR_SEQ_PROC_CPOE
 nm_rep_tabela_pai_item_rep_p char default null, -- PRESCR_PROCEDIMENTO
 nm_rep_chave_pai_item_rep_p char default null, -- NR_SEQUENCIA
 nm_rep_chave_item_pai_rep_p char default null, -- NR_SEQUENCIA_PROC
 ie_copia_diaria_p char default 'N') is type tcursor REFCURSOR) AS $body$
DECLARE

		ds_horarios_old_w		varchar(4000);
		ds_horarios_new_w		varchar(4000);
		ds_hora_aux_w			varchar(5);
		index_corte_w			integer;
	
BEGIN
		ds_horarios_new_w		:= replace(replace(ds_horarios_old_p || ' ',':00',''),'  ',' ');

		if (position(':' in ds_horarios_new_w) > 0) then
			begin
			ds_horarios_old_w	:= ds_horarios_new_w;
			ds_horarios_new_w	:= '';

			index_corte_w		:= position(' ' in ds_horarios_old_w);
			while(index_corte_w > 0) loop
				ds_hora_aux_w		:= substr(ds_horarios_old_w,1,index_corte_w-1);
				ds_horarios_old_w	:= substr(ds_horarios_old_w,index_corte_w+1);

				if (position(':' in ds_hora_aux_w) = 0) then
					ds_hora_aux_w	:= ds_hora_aux_w || ':00';
				end if;

				ds_horarios_new_w	:= ds_horarios_new_w || ds_hora_aux_w || ' ';

				index_corte_w		:= position(' ' in ds_horarios_old_w);
			end loop;
			end;
		end if;

		return;
	end;

	function Obter_etapas_formatadas(	ds_horarios_old_p		varchar2,
										ds_horarios_fim_old_p	varchar2 ) return;
		ds_horarios_new_w		varchar2(4000);
		ds_horarios_fim_new_w	varchar2(4000);
		ds_horarios_fim_old_w	varchar2(4000);
		ds_hora_aux_w			varchar2(5);
		index_corte_w			number(5);
		ds_mascara_w			varchar2(10) := 'hh24';
		ds_etapa_w				varchar2(30);
	begin
		ds_horarios_new_w		:= replace(replace(ds_horarios_old_p || ' ',':00',''),'  ',' ');
		ds_horarios_fim_new_w	:= replace(replace(ds_horarios_fim_old_p || ' ',':00',''),'  ',' ');

		-- das #@NR_PRIM_HOR#@ as
		ds_etapa_w	:= wheb_mensagem_pck.get_texto(307054);

		if (position(':' in ds_horarios_new_w || ds_horarios_fim_new_w) > 0) then
			begin
			ds_horarios_old_w	:= ds_horarios_new_w;
			ds_horarios_new_w	:= '';

			ds_horarios_fim_old_w	:= ds_horarios_fim_new_w;
			ds_horarios_fim_new_w	:= '';

			index_corte_w		:= position(' ' in ds_horarios_old_w);
			while(index_corte_w > 0) loop
				ds_hora_aux_w		:= substr(ds_horarios_old_w,1,index_corte_w-1);
				ds_horarios_old_w	:= substr(ds_horarios_old_w,index_corte_w+1);

				if (position(':' in ds_hora_aux_w) = 0) then
					ds_hora_aux_w	:= ds_hora_aux_w || ':00';
				end if;

				ds_horarios_new_w	:= ds_horarios_new_w || ds_hora_aux_w || ' ';

				index_corte_w			:= position(' ' in ds_horarios_fim_old_w);
				ds_hora_aux_w			:= substr(ds_horarios_fim_old_w,1,index_corte_w-1);
				ds_horarios_fim_old_w	:= substr(ds_horarios_fim_old_w,index_corte_w+1);

				if (position(':' in ds_hora_aux_w) = 0) then
					ds_hora_aux_w	:= ds_hora_aux_w || ':00';
				end if;

				ds_horarios_fim_new_w	:= ds_horarios_fim_new_w || ds_hora_aux_w || ' ';

				index_corte_w		:= position(' ' in ds_horarios_old_w);
			end loop;
			end;
		end if;

		ds_horarios_old_w	:= ds_horarios_new_w;
		ds_horarios_new_w	:= '';

		ds_horarios_fim_old_w	:= ds_horarios_fim_new_w;
		ds_horarios_fim_new_w	:= '';

		index_corte_w		:= position(' ' in ds_horarios_old_w);
		while(index_corte_w > 0) loop
			ds_hora_aux_w		:= substr(ds_horarios_old_w,1,index_corte_w-1);
			ds_horarios_old_w	:= substr(ds_horarios_old_w,index_corte_w+1);

			ds_horarios_new_w	:= ds_horarios_new_w || replace(ds_etapa_w,'#@NR_PRIM_HOR#@',ds_hora_aux_w) || ' ';

			ds_hora_aux_w			:= substr(ds_horarios_fim_old_w,1,index_corte_w-1);
			ds_horarios_fim_old_w	:= substr(ds_horarios_fim_old_w,index_corte_w+1);

			ds_horarios_new_w	:= ds_horarios_new_w || ds_hora_aux_w || '; ';

			index_corte_w		:= position(' ' in ds_horarios_old_w);
		end loop;

		return;
	end;

	procedure Buscar_horarios_item is
		ds_horarios_fim_w	varchar2(4000);
		dt_hora_fim_w		date;
	begin
		ds_horarios_p			:= null;
		nr_ocorrencia_p			:= 0;
		dt_inicio_w				:= null;

		open	cHorarios
		for EXECUTE		' select	horario.dt_horario ' ||
				ds_sql_where_horario_w ||
				' and		horario.nr_prescricao = :nr_prescricao ' ||
				' and		horario.' || nm_hor_chave_rep_p || ' = :nr_seq_item ' ||
				' and		horario.dt_horario < :dt_fim ' ||
				' order by	horario.dt_horario '
		using	nr_prescricao_w,
				nr_seq_item_w,
				coalesce(dt_fim_w,dt_inicio_base_p+2);

		if (nr_prescricao_p <> 9223372036854775807) then
			CALL gravar_log_tasy(10007,
					substr('CPOE_PREVER_HORARIOS_FUTUROS  187:'
											   ||' nm_hor_chave_rep_p :'	 || nm_hor_chave_rep_p
											   ||' ds_sql_where_horario_w:' || ds_sql_where_horario_w
											   ||' nr_prescricao_w:'		 || nr_prescricao_w
											   ||' nr_prescricao_p '      || nr_prescricao_p
											   ||' nr_seq_item_w:'		 || nr_seq_item_w
											   ||' dt_fim:'		 		 || to_char(coalesce(dt_fim_w,dt_inicio_base_p+2),'dd/mm/yyyy hh24:mi:ss'),1,2000),
							nm_usuario_p);
		end if;

		loop
		fetch cHorarios into
			dt_horario_w;
		EXIT WHEN NOT FOUND; /* apply on cHorarios */

			if (coalesce(dt_inicio_w::text, '') = '') then
				dt_inicio_w		:= dt_horario_w;
			end if;

			ds_horarios_p		:= substr(ds_horarios_p || to_char(dt_horario_w,'hh24:mi '),1,4000);
			
      if (ie_continuo_w IS NOT NULL AND ie_continuo_w::text <> '') then
        begin
          EXEC_W := 'CALL CPOE_Prev_hor_futuros_MD_PCK.OBTER_DT_HORA_FIM_MD(:1,:2,:3,:4) INTO :result';

          EXECUTE EXEC_W USING IN dt_horario_w,
                                         IN qt_tempo_horario_w,
                                         IN dt_fim_w,
                                         IN 0,
                                         OUT dt_hora_fim_w;
        exception
          when others then
            dt_hora_fim_w := null;
            ds_erro_w := sqlerrm;
            ds_parametro_w := 'nr_atendimento_p: ' || nr_atendimento_p || ' - nr_prescricao_p: ' || nr_prescricao_p || ' - ie_copia_diaria_p: ' || ie_copia_diaria_p || ' - ie_operacao_w: ' || ie_operacao_w || ' - nr_prescricao_w: ' || nr_prescricao_w || ' - ie_continuo_w: ' || ie_continuo_w;
            ds_parametro_w := ds_parametro_w || ' - dt_horario_w: ' || dt_horario_w || ' - qt_tempo_horario_w: ' || qt_tempo_horario_w || ' - dt_fim_w: ' || dt_fim_w || ' - nr_param_control_p: ' || 0 || ' - dt_hora_fim_w: ' || dt_hora_fim_w;
            CALL gravar_log_medical_device('CPOE_PREVER_HORARIOS_FUTUROS', 'CPOE_Prev_hor_futuros_MD_PCK.OBTER_DT_HORA_FIM_MD', ds_parametro_w, ds_erro_w, wheb_usuario_pck.get_nm_usuario, 'S');
        end;

				ds_horarios_fim_w	:= substr(ds_horarios_fim_w || to_char(dt_hora_fim_w,'hh24:mi '),1,4000);
			end if;

			nr_ocorrencia_p		:= nr_ocorrencia_p+1;
		end loop;
		close cHorarios;

		hr_prim_horario_p		:= to_char(dt_inicio_w,'hh24:mi');
		hr_prim_horario_w		:= hr_prim_horario_p;

		if (coalesce(ie_continuo_w::text, '') = '') then
			ds_horarios_p		:= Obter_horarios_formatados(ds_horarios_p);
		else
			ds_horarios_p		:= Obter_etapas_formatadas(ds_horarios_p, ds_horarios_fim_w);
		end if;
	end;

	procedure Gera_prox_adm_por_dias_espec is
		ds_dias_utilizacao_w	varchar2(30);
	begin
		-- Verificar os dias especificos para o intervalo
		select	CASE WHEN max(ie_domingo)='S' THEN '1,' END  ||
				CASE WHEN max(ie_segunda)='S' THEN '2,' END  ||
				CASE WHEN max(ie_terca)='S' THEN '3,' END  ||
				CASE WHEN max(ie_quarta)='S' THEN '4,' END  ||
				CASE WHEN max(ie_quinta)='S' THEN '5,' END  ||
				CASE WHEN max(ie_sexta)='S' THEN '6,' END  ||
				CASE WHEN max(ie_sabado)='S' THEN '7,' END
		into STRICT    ds_dias_utilizacao_w
		from    intervalo_prescricao
		where   cd_intervalo    = cd_intervalo_p;

    begin
      EXEC_W := 'BEGIN CPOE_Prev_hor_futuros_MD_PCK.CALCULA_DT_INICIO_TEMPO_HOR_MD(:1,:2,:3,:4); END;';

      EXECUTE EXEC_W USING IN ds_dias_utilizacao_w,
                                     IN OUT dt_inicio_w,
                                     IN OUT qt_tempo_horario_w,
                                     IN dt_inicio_ref_w;
    exception
      when others then
        dt_inicio_w        := null;
        qt_tempo_horario_w := null;
        ds_erro_w := sqlerrm;
        ds_parametro_w := 'nr_atendimento_p: ' || nr_atendimento_p || ' - nr_prescricao_p: ' || nr_prescricao_p || ' - ie_copia_diaria_p: ' || ie_copia_diaria_p || ' - ie_operacao_w: ' || ie_operacao_w || ' - nr_prescricao_w: ' || nr_prescricao_w || ' - ie_continuo_w: ' || ie_continuo_w;
        ds_parametro_w := ds_parametro_w || ' - ds_dias_utilizacao_w: ' || ds_dias_utilizacao_w || ' - dt_inicio_w: ' || dt_inicio_w || ' - qt_tempo_horario_w: ' || qt_tempo_horario_w || ' - dt_inicio_ref_w: ' || dt_inicio_ref_w;
        CALL gravar_log_medical_device('CPOE_PREVER_HORARIOS_FUTUROS', 'CPOE_Prev_hor_futuros_MD_PCK.CALCULA_DT_INICIO_TEMPO_HOR_MD', ds_parametro_w, ds_erro_w, wheb_usuario_pck.get_nm_usuario, 'S');
    end;
	end;

	procedure Gerar_prox_adm_por_horas is
		ds_dias_utilizacao_w	 varchar2(30);
    ocorrencia_intervalo_w number;
	begin
    ocorrencia_intervalo_w := Obter_ocorrencia_intervalo(cd_intervalo_p, 24, 'H');

    begin
      EXEC_W := 'BEGIN CPOE_Prev_hor_futuros_MD_PCK.CALCULA_PROX_ADM_POR_HORAS_MD(:1,:2,:3,:4,:5); END;';

      EXECUTE EXEC_W USING IN OUT dt_inicio_w,
                                     IN dt_inicio_ref_w,
                                     IN OUT qt_tempo_horario_w,
                                     IN ocorrencia_intervalo_w,
                                     IN OUT qt_horas_ref_w;
    exception
      when others then
        dt_inicio_w        := null;
        qt_tempo_horario_w := null;
        qt_horas_ref_w     := null;
        ds_erro_w := sqlerrm;
        ds_parametro_w := 'nr_atendimento_p: ' || nr_atendimento_p || ' - nr_prescricao_p: ' || nr_prescricao_p || ' - ie_copia_diaria_p: ' || ie_copia_diaria_p || ' - ie_operacao_w: ' || ie_operacao_w || ' - nr_prescricao_w: ' || nr_prescricao_w || ' - ie_continuo_w: ' || ie_continuo_w;
        ds_parametro_w := ds_parametro_w || ' - dt_inicio_w: ' || dt_inicio_w || ' - dt_inicio_ref_w: ' || dt_inicio_ref_w || ' - qt_tempo_horario_w: ' || qt_tempo_horario_w || ' - ocorrencia_intervalo_w: ' || ocorrencia_intervalo_w || ' - qt_horas_ref_w: ' || qt_horas_ref_w;
        CALL gravar_log_medical_device('CPOE_PREVER_HORARIOS_FUTUROS', 'CPOE_Prev_hor_futuros_MD_PCK.CALCULA_PROX_ADM_POR_HORAS_MD', ds_parametro_w, ds_erro_w, wheb_usuario_pck.get_nm_usuario, 'S');
    end;
	end;

	procedure Localizar_ultimo_item is
		ds_sql_where_item_w	varchar2(4000) := '';

		procedure Adicionar_sql_where_horario is
		begin
			ds_sql_adicional_w	:= '';

			-- Restricoes especificas
			if (upper(nm_rep_tabela_cpoe_p) = 'PRESCR_DIETA') then
				ds_sql_adicional_w	:= ' where	nvl(horario.ie_aprazado,''N'') = ''N'' ';
			else
				ds_sql_adicional_w	:= ' where	nvl(horario.ie_horario_especial,''N'') = ''N'' ';
			end if;

			-- Finalizar WHERE dos horarios
			ds_sql_where_horario_w	:=
				' from		' || nm_hor_tabela_rep_p || ' horario ' ||
				ds_sql_adicional_w;

			-- Adicionar no SQL do item
			ds_sql_where_item_w	:= ds_sql_where_item_w ||
				' and		exists(' ||
								' select	1 ' ||
								ds_sql_where_horario_w ||
								' and		horario.nr_prescricao = item.nr_prescricao ' ||
								' and		horario.' || nm_hor_chave_rep_p || ' = item.nr_sequencia ' ||
							') ';
		end;

		procedure Adicionar_sql_where_pai_item is
			ds_sql_where_pai_w	varchar2(4000);
		begin
			if (nr_seq_pai_item_cpoe_p IS NOT NULL AND nr_seq_pai_item_cpoe_p::text <> '') then
				-- Finalizar WHERE dos horarios
				ds_sql_where_pai_w	:=
					' from		' || nm_rep_tabela_pai_item_rep_p || ' horario ' ||
					' where		paiItem.' || nm_rep_chave_pai_item_cpoe_p || ' =  = :nr_seq_pai_item_cpoe ' ||
					' and		paiItem.' || nm_rep_chave_pai_item_rep_p || ' = item.' || nm_rep_chave_item_pai_rep_p;

				-- Adicionar no SQL do item
				ds_sql_where_item_w	:= ds_sql_where_item_w ||
					' and		exists(' ||
									' select	1 ' ||
									ds_sql_where_pai_w ||
									' and		paiItem.nr_prescricao = item.nr_prescricao ' ||
								') ';
			end if;

		end;

		procedure Monta_sql_where is
		begin
			ds_sql_adicional_w	:= '';

			-- Restricoes especifica
			if (upper(nm_rep_tabela_cpoe_p) in ('PRESCR_MATERIAL','PRESCR_PROCEDIMENTO')) then
				ds_sql_adicional_w	:= ' and	nvl(item.ie_administrar,''S'') = ''S'' ';
			end if;

			-- Adicionar restricao principal
			ds_sql_where_item_w	:=
				' from		' || nm_rep_tabela_cpoe_p || ' item ' ||
				' where		item.' || nm_rep_chave_cpoe_p || ' = :nr_seq_item_cpoe ' ||
				ds_sql_adicional_w;

			-- Adicionar restricao dos horarios
			Adicionar_sql_where_horario;

			-- Adicionar restricao do item pai da informacao da CPOE
			Adicionar_sql_where_pai_item;
		end;
	begin
		Monta_sql_where;

		-- Localizar ultima prescricao gerada pela CPOE, nao pode ser a prescricao que esta sendo gerada
		ds_sql_w :=
			' select	max(prescricao.nr_prescricao) ' ||
			' from		prescr_medica prescricao ' ||
			' where		prescricao.nr_atendimento = :nr_atendimento ' ||
			' and		prescricao.dt_inicio_prescr > :dt_inicio_busca ' ||
			' and		prescricao.nr_prescricao < :nr_prescricao ' ||
			' and		exists(' ||
							' select	1 ' ||
							ds_sql_where_item_w ||
							' and		item.nr_prescricao = prescricao.nr_prescricao ' ||
						') ';

			begin

			if (coalesce(nr_seq_pai_item_cpoe_p::text, '') = '') then
				EXECUTE ds_sql_w
				into STRICT	nr_prescricao_w
				using	nr_atendimento_p,
						coalesce(dt_inicio_base_p,clock_timestamp())-10,
						nr_prescricao_p,
						nr_seq_item_cpoe_p;
			else
				EXECUTE ds_sql_w
				into STRICT	nr_prescricao_w
				using	nr_atendimento_p,
						coalesce(dt_inicio_base_p,clock_timestamp())-10,
						nr_prescricao_p,
						nr_seq_item_cpoe_p,
						nr_seq_pai_item_cpoe_p;
			end if;

			exception when others then
					CALL gravar_log_tasy(10007,
							substr('CPOE_PREVER_HORARIOS_FUTUROS  400:'
													   ||'nr_prescricao_p :'	 || nr_prescricao_p
													   ||'nr_seq_item_cpoe_p '   ||  nr_seq_item_cpoe_p
													   ||'ds_sql_w:'			 || ds_sql_w
													   ||'nr_prescricao_w:'		 || nr_prescricao_w
													   ||'nr_seq_item_w:'		 || nr_seq_item_w
													   ||'dt_inicio_base_p:'     || to_char(coalesce(dt_inicio_base_p,clock_timestamp())-10,'dd/mm/yyyy hh24:mi:ss'),1,2000), nm_usuario_p);
			end;


			-- Localizar o medicamento principal da ultima prescricao gerada pela CPOE
			if (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') then

				ds_sql_w :=
					' select	min(item.nr_sequencia) ' ||
					ds_sql_where_item_w ||
					' and		item.nr_prescricao = :nr_prescricao ';

				begin

					EXECUTE ds_sql_w
					into STRICT	nr_seq_item_w
					using	nr_seq_item_cpoe_p,
							nr_prescricao_w;

				exception when others then
						CALL gravar_log_tasy(10007,
								substr('CPOE_PREVER_HORARIOS_FUTUROS  424:'
														   ||'nr_prescricao_p :'	 || nr_prescricao_p
														   ||'nr_seq_item_cpoe_p '   ||  nr_seq_item_cpoe_p
														   ||'ds_sql_w:'			 || ds_sql_w
														   ||'nr_prescricao_w:'		 || nr_prescricao_w
														   ||'nr_seq_item_w:'		 || nr_seq_item_w,1,2000),
										nm_usuario_p);
				end;
			end if;
	end;

	procedure Calcular_horarios is
	begin
		-- Realizo o recalculo conforme meu novo inicio de item
		if (coalesce(ie_continuo_w::text, '') = '') then
			if (coalesce(qt_min_intervalo_w::text, '') = '') then
				select	coalesce(max(qt_min_intervalo),0)
				into STRICT	qt_min_intervalo_w
				from	intervalo_prescricao
				where	cd_intervalo = cd_intervalo_p;
			end if;

			nr_ocorrencia_p	:= 0;

			if (nr_prescricao_p <> 9223372036854775807) then
			CALL gravar_log_tasy(10007,
					substr('CPOE_PREVER_HORARIOS_FUTUROS  452:'
											   ||'nr_atendimento_p :'	 || nr_atendimento_p
											   ||'cd_intervalo_p '   ||  cd_intervalo_p
											   ||'dt_inicio_w: '			 || dt_inicio_w
											   ||'cd_item_p: '		 || cd_item_p
											   ||' nr_prescricao_p ' || nr_prescricao_p
											   ||'qt_hora_intervalo_p: '		 || qt_hora_intervalo_p
											   ||'qt_min_intervalo_w ' || qt_min_intervalo_w
											   ||'ds_horarios_p ' || ds_horarios_p
											   ||'ie_continuo_w ' || ie_continuo_w
											   ||'ds_horarios_aux_w ' || ds_horarios_aux_w
											   ||'cd_procedimento_p ' || cd_procedimento_p
											   ||'ie_origem_proced_p ' || ie_origem_proced_p
											   ||' nr_seq_proc_interno_p ' || nr_seq_proc_interno_p
											   ||' ceil((dt_fim_w - dt_inicio_w)*24) ' || ceil((dt_fim_w - dt_inicio_w)*24),1,2000), nm_usuario_p);
			end if;

			begin
        begin
          EXEC_W := 'CALL CPOE_Prev_hor_futuros_MD_PCK.OBTER_DT_HORA_FIM_MD(:1,:2,:3,:4) INTO :result';

          EXECUTE EXEC_W USING IN dt_inicio_w,
                                         IN 0,
                                         IN dt_fim_w,
                                         IN 1,
                                         OUT dt_fim_w;
        exception
          when others then
            dt_fim_w := null;
            ds_erro_w := sqlerrm;
            ds_parametro_w := 'nr_atendimento_p: ' || nr_atendimento_p || ' - nr_prescricao_p: ' || nr_prescricao_p || ' - ie_copia_diaria_p: ' || ie_copia_diaria_p || ' - ie_operacao_w: ' || ie_operacao_w || ' - nr_prescricao_w: ' || nr_prescricao_w || ' - ie_continuo_w: ' || ie_continuo_w;
            ds_parametro_w := ds_parametro_w || ' - dt_inicio_w: ' || dt_inicio_w || ' - qt_tempo_horario_p: ' || 0 || ' - dt_fim_w: ' || dt_fim_w || ' - nr_param_control_p: ' || 1 || ' - dt_fim_w: ' || dt_fim_w;
            CALL gravar_log_medical_device('CPOE_PREVER_HORARIOS_FUTUROS', 'CPOE_Prev_hor_futuros_MD_PCK.OBTER_DT_HORA_FIM_MD', ds_parametro_w, ds_erro_w, wheb_usuario_pck.get_nm_usuario, 'S');
        end;

				CPOE_Calcular_horario_prescr(	nr_atendimento_p, cd_intervalo_p, cd_item_p, dt_inicio_w,
												qt_hora_intervalo_p, qt_min_intervalo_w, nr_ocorrencia_p, ds_horarios_p,
												ds_horarios_aux_w, nm_usuario_p, cd_estabelecimento_p, cd_perfil_p,
												null, null,
												cd_procedimento_p, ie_origem_proced_p, nr_seq_proc_interno_p,
												ceil((dt_fim_w - dt_inicio_w)*24) );
				ds_horarios_p	:= substr(ds_horarios_p || ds_horarios_aux_w,1,4000);
			exception when others then
				CALL gravar_log_tasy(10007,
						substr('ERRO CPOE_Prever_horarios_futuros Erro:' || substr(to_char(sqlerrm),1,2000)
													||'STACK ' || dbms_utility.format_call_stack
												   ||'ds_horarios_p : ' 	|| ds_horarios_p,1,2000),
								nm_usuario_p);
			end;

			if (nr_prescricao_p <> 9223372036854775807) then
				CALL gravar_log_tasy(10007,
					substr('CPOE_PREVER_HORARIOS_FUTUROS  476:'
											   ||'ds_horarios_p :'	 || ds_horarios_p
											   ||'nr_prescricao_p ' || nr_prescricao_p
											   ||'ds_horarios_aux_w '   ||  ds_horarios_aux_w,1,2000), nm_usuario_p);
			end if;

		else
			begin
				SELECT * FROM CPOE_Calcula_horarios_etapas(	nm_usuario_p, dt_inicio_w, ie_continuo_w, nr_ocorrencia_p, cd_intervalo_p, qt_tempo_aplicacao_p, qt_tempo_horario_w, null, 'N', null, dt_fim_w) INTO STRICT nr_ocorrencia_p, ds_horarios_p;
			exception when others then
				CALL gravar_log_tasy(10007,
						substr('ERRO CPOE_Prever_horarios_futuros Erro:' || substr(to_char(sqlerrm),1,2000)
													||'STACK ' || dbms_utility.format_call_stack
												   ||'ds_horarios_p : ' 	|| ds_horarios_p,1,2000),
								nm_usuario_p);
			end;
		end if;
	end;

	procedure atualizar_dt_inicio_adep is
	begin
			if (nr_seq_item_w IS NOT NULL AND nr_seq_item_w::text <> '') then
			begin

			ds_sql_w :=
				' select	nvl(min(horario.dt_horario), :dt_inicio) ' ||
				ds_sql_where_horario_w ||
				' and		horario.nr_prescricao = :nr_prescricao ' ||
				' and		horario.' || nm_hor_chave_rep_p || ' = :nr_seq_item '||
				' and		horario.dt_suspensao is null';
				--Buscar o ultimo horario valido para o item
				commit;

			begin

				EXECUTE ds_sql_w
				into STRICT	dt_inicio_w
				using	dt_inicio_w,
						nr_prescricao_w,
						nr_seq_item_w;
				end;

			exception when others then
				CALL gravar_log_tasy(10007,
					substr('CPOE_PREVER_HORARIOS_FUTUROS  574:'
											   ||'nr_prescricao_p :'	 || nr_prescricao_p
											   ||'nr_seq_item_cpoe_p '   ||  nr_seq_item_cpoe_p
											   ||'ds_sql_w:'			 || ds_sql_w
											   ||'nr_prescricao_w:'		 || nr_prescricao_w
											   ||'nr_seq_item_w:'		 || nr_seq_item_w,1,2000),
							nm_usuario_p);
			end;
		end if;

	end;

	procedure remover_horario_nao_vigentes is
	ds_horarios_vigente_w	varchar2(255);
	ds_horarios_ww			varchar2(255);
	ds_horario_w			varchar2(255);
	dt_horario_w			date;
	begin
		ds_horarios_ww := ds_horarios_p;

    begin
      EXEC_W := 'BEGIN CPOE_Prev_hor_futuros_MD_PCK.CALC_REMOV_HOR_NAO_VIGENT_MD(:1,:2,:3,:4,:5,:6,:7); END;';

      EXECUTE EXEC_W USING IN OUT ds_horarios_ww,
                                     IN OUT ds_horario_w, 
                                     IN dt_inicio_w,
                                     IN dt_fim_w,
                                     OUT dt_horario_w, 
                                     IN dt_inicio_base_p,
                                     IN OUT ds_horarios_vigente_w;
    exception
      when others then
        ds_horarios_ww         := null;
        ds_horario_w           := null;
        dt_horario_w           := null;
        ds_horarios_vigente_w  := null;
        ds_erro_w := sqlerrm;
        ds_parametro_w := 'nr_atendimento_p: ' || nr_atendimento_p || ' - nr_prescricao_p: ' || nr_prescricao_p || ' - ie_copia_diaria_p: ' || ie_copia_diaria_p || ' - ie_operacao_w: ' || ie_operacao_w || ' - nr_prescricao_w: ' || nr_prescricao_w || ' - ie_continuo_w: ' || ie_continuo_w;
        ds_parametro_w := ds_parametro_w || ' - ds_horarios_ww: ' || ds_horarios_ww || ' - ds_horario_w: ' || ds_horario_w || ' - dt_inicio_w: ' || dt_inicio_w || ' - dt_fim_w: ' || dt_fim_w || ' - dt_horario_w: ' || dt_horario_w || ' dt_inicio_base_p: ' || dt_inicio_base_p || ' - ds_horarios_vigente_w: ' || ds_horarios_vigente_w;
        CALL gravar_log_medical_device('CPOE_PREVER_HORARIOS_FUTUROS', 'CPOE_Prev_hor_futuros_MD_PCK.CALC_REMOV_HOR_NAO_VIGENT_MD', ds_parametro_w, ds_erro_w, wheb_usuario_pck.get_nm_usuario, 'S');
    end;
    RAISE NOTICE 'ds_horarios_vigente_w: %', ds_horarios_vigente_w;

		
		ds_horarios_p := trim(both ds_horarios_vigente_w);
	exception when others then
	CALL gravar_log_tasy(10007,
			substr('REMOVER_HORARIO_NAO_VIGENTES: ' || substr(to_char(sqlerrm),1,2000),1,2000),
					nm_usuario_p);
	end;

begin

	begin
		Localizar_ultimo_item;
	exception when others then
		CALL gravar_log_tasy(10007,
				substr('MEDIC Localizar_ultimo_item Erro:' || substr(to_char(sqlerrm),1,2000),1,2000),
						nm_usuario_p);
	end;

	-- Verificar se item continuo (Solucao, Nutricao Enteral, ou Gasoterapia)
	if (ie_continuo_p IS NOT NULL AND ie_continuo_p::text <> '') then
		if (ie_continuo_p = 'C') then
			ie_continuo_w		:= 'S';
		else
			ie_continuo_w		:= ie_continuo_p;
		end if;
	end if;

	-- Verificar o tipo de operacao do intervalo
	select	coalesce(max(ie_operacao),'X')
	into STRICT	ie_operacao_w
	from	intervalo_prescricao
	where	cd_intervalo = cd_intervalo_p;

	--- Inicio MD4  Verificar para fazer o mesmo.

	-- Definir uma data de fim padrao (caso nao definida pelo usuario) para realizacao de validacoes dos horarios.
  begin
    EXEC_W := 'CALL CPOE_Prev_hor_futuros_MD_PCK.OBTER_DT_HORA_FIM_MD(:1,:2,:3,:4) INTO :result';

    EXECUTE EXEC_W USING IN dt_inicio_w,
                                   IN 0,
                                   IN dt_fim_w,
                                   IN 2,
                                   OUT dt_fim_w;
  exception
    when others then
      dt_fim_w := null;
      ds_erro_w := sqlerrm;
      ds_parametro_w := 'nr_atendimento_p: ' || nr_atendimento_p || ' - nr_prescricao_p: ' || nr_prescricao_p || ' - ie_copia_diaria_p: ' || ie_copia_diaria_p || ' - ie_operacao_w: ' || ie_operacao_w || ' - nr_prescricao_w: ' || nr_prescricao_w || ' - ie_continuo_w: ' || ie_continuo_w;
      ds_parametro_w := ds_parametro_w || ' - dt_inicio_w: ' || dt_inicio_w || ' - qt_tempo_horario_p: ' || 0 || ' - dt_fim_w: ' || dt_fim_w || ' - nr_param_control_p: ' || 2 || ' - dt_fim_w: ' || dt_fim_w;
      CALL gravar_log_medical_device('CPOE_PREVER_HORARIOS_FUTUROS', 'CPOE_Prev_hor_futuros_MD_PCK.OBTER_DT_HORA_FIM_MD', ds_parametro_w, ds_erro_w, wheb_usuario_pck.get_nm_usuario, 'S');
  end;
	--- Fim MD4


	-- Para intervalos em horas (H) e por dias especificos (D), deve-se recalcular conforme o ultimo horario do item
	if (ie_operacao_w in ('H','D')) and (ie_copia_diaria_p = 'N') then
		begin

		atualizar_dt_inicio_adep();

		--Pode acontecer que os horarios sejam reaprazados para fora da valida da prescricao.

		--Desta forma, o primeiro horario da proxima prescricao, nao pode ser igual ao ulltimo horario do item

		-- OS 1149137


		--- Inicio MD6
    begin
      EXEC_W := 'CALL CPOE_Prev_hor_futuros_MD_PCK.OBTER_DT_INICIO_REF_MD(:1,:2) INTO :result';

      EXECUTE EXEC_W USING IN dt_inicio_base_p,
                                     IN dt_inicio_w,
                                     OUT dt_inicio_ref_w;
    exception
      when others then
        dt_inicio_ref_w := null;
        ds_erro_w := sqlerrm;
        ds_parametro_w := 'nr_atendimento_p: ' || nr_atendimento_p || ' - nr_prescricao_p: ' || nr_prescricao_p || ' - ie_copia_diaria_p: ' || ie_copia_diaria_p || ' - ie_operacao_w: ' || ie_operacao_w || ' - nr_prescricao_w: ' || nr_prescricao_w || ' - ie_continuo_w: ' || ie_continuo_w;
        ds_parametro_w := ds_parametro_w || ' - dt_inicio_base_p: ' || dt_inicio_base_p || ' - dt_inicio_w: ' || dt_inicio_w || ' - dt_inicio_ref_w: ' || dt_inicio_ref_w;
        CALL gravar_log_medical_device('CPOE_PREVER_HORARIOS_FUTUROS', 'CPOE_Prev_hor_futuros_MD_PCK.OBTER_DT_INICIO_REF_MD', ds_parametro_w, ds_erro_w, wheb_usuario_pck.get_nm_usuario, 'S');
    end;
		--- Fim MD6
		qt_tempo_horario_w		:= 0;
		-- Se intervalo liberado em dias especificos, verificar
		if (ie_operacao_w = 'D') then
			Gera_prox_adm_por_dias_espec;
		/*else
			Gerar_prox_adm_por_horas;*/
		end if;
		hr_prim_horario_p			:= to_char(dt_inicio_w,'hh24:mi');

		-- Somente caso a operacao nao seja em dias ou com intervalo de mais 24 horas, assumir o primeiro horario para o item
		if	((ie_operacao_w = 'D') or (qt_tempo_horario_w > 24)) then

			-- Caso intervalo em dias especificos ou maior de 24, e previsao para GRID (sem atualizar da CPOE), verificar se proximo inicio dentro da previsao solicitada
			if (coalesce(nm_cpoe_tabela_p::text, '') = '') and (dt_inicio_w not between dt_inicio_ref_w and dt_inicio_ref_w+1) then
				nr_ocorrencia_p		:= 0;
				ds_horarios_p		:= '';
				hr_prim_horario_p	:= '';
				return;
			end if;
		else
			hr_prim_horario_w	:= hr_prim_horario_p;
		end if;

		ds_horarios_p				:= null;

		end;

	-- Gasoterapia nao possui reaprazamento, atualmente
	elsif (upper(coalesce(nm_rep_tabela_cpoe_p,'X')) <> 'PRESCR_GASOTERAPIA') then

		if (nr_seq_item_w IS NOT NULL AND nr_seq_item_w::text <> '') then
			begin
			ds_sql_w :=
				' select	nvl(max(''N''),''S'') ' ||
				ds_sql_where_horario_w ||
				' and		horario.nr_prescricao = :nr_prescricao ' ||
				' and		horario.' || nm_hor_chave_rep_p || ' = :nr_sequencia ' ||
				' and		horario.nm_usuario_reaprazamento is null ';

			begin

				EXECUTE ds_sql_w
				into STRICT	ie_horarios_atualizados_w
				using	nr_prescricao_w,
						nr_seq_item_w;

			exception when others then
				CALL gravar_log_tasy(10007,
					substr('CPOE_PREVER_HORARIOS_FUTUROS  637:'
											   ||'ds_sql_w :'	 			 || ds_sql_w
											   ||'ie_horarios_atualizados_w:'|| ie_horarios_atualizados_w
											   ||'nr_prescricao_w:'		 	 || nr_prescricao_w
											   ||'nr_prescricao_p ' 		 || nr_prescricao_p
											   ||'nr_seq_item_w:'		 	 || nr_seq_item_w,1,2000),
							nm_usuario_p);
			end;

			-- Caso todos horarios reaprazados, assumir os mesmos para o item
			if	((ie_horarios_atualizados_w = 'S') or (ie_copia_diaria_p = 'S')) then
				Buscar_horarios_item;

				goto apos_atualizacao;
			else
				atualizar_dt_inicio_adep();
			end if;
			end;
		end if;
	end if;

	begin
		Calcular_horarios;
	exception when others then
		CALL gravar_log_tasy(10007,
				substr('MEDIC Calcular_horarios Erro:' || substr(to_char(sqlerrm),1,2000),1,2000),
						nm_usuario_p);
	end;

	if ((nm_rep_tabela_cpoe_p = 'PRESCR_PROCEDIMENTO') and (dt_inicio_base_p IS NOT NULL AND dt_inicio_base_p::text <> '') and (dt_fim_w IS NOT NULL AND dt_fim_w::text <> '') and (dt_fim_p IS NOT NULL AND dt_fim_p::text <> '')) then
		remover_horario_nao_vigentes();
	end if;

	if (nr_ocorrencia_p < 0) then
		nr_ocorrencia_p	:= 0;
	end if;

	if (nr_ocorrencia_p = 0) or (coalesce(nr_ocorrencia_p::text, '') = '') then
		nr_ocorrencia_p := 1;
	end if;

	dt_inicio_p		:= dt_inicio_w;
	dt_fim_p		:= dt_fim_w;

	<<apos_atualizacao>>

	null;-- Colocado para nao dar erro de copilacao.
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_prever_horarios_futuros (( nr_atendimento_p atendimento_paciente.nr_atendimento%type, nr_prescricao_p prescr_medica.nr_prescricao%type, nr_seq_item_cpoe_p bigint, nm_rep_tabela_cpoe_p char, nm_rep_chave_cpoe_p char, nm_hor_tabela_rep_p char, nm_hor_chave_rep_p char, nm_cpoe_tabela_p char, dt_inicio_base_p timestamp, dt_inicio_p INOUT timestamp, dt_fim_p INOUT timestamp, cd_intervalo_p intervalo_prescricao.cd_intervalo%type, ds_horarios_p INOUT text, nr_ocorrencia_p INOUT bigint, hr_prim_horario_p INOUT text, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, cd_perfil_p perfil.cd_perfil%type, nm_usuario_p usuario.nm_usuario%type, qt_hora_intervalo_p bigint default null, qt_min_aplicacao_p bigint default null, cd_item_p text default null, cd_procedimento_p prescr_procedimento.cd_procedimento%type default null, nr_seq_proc_interno_p prescr_procedimento.nr_seq_proc_interno%type default null, ie_origem_proced_p prescr_procedimento.ie_origem_proced%type default null, nm_cpoe_ds_horarios_p char default 'ds_horarios', nm_cpoe_nr_ocorrencia_p char default 'nr_ocorrencia', nm_cpoe_hr_prim_horario_p char default 'hr_prim_horario', ie_continuo_p char default null, qt_tempo_aplicacao_p bigint default 24, qt_hora_fase_p bigint default null, nr_seq_pai_item_cpoe_p bigint default null, nm_rep_chave_pai_item_cpoe_p char default null, nm_rep_tabela_pai_item_rep_p char default null, nm_rep_chave_pai_item_rep_p char default null, nm_rep_chave_item_pai_rep_p char default null, ie_copia_diaria_p char default 'N') is type tcursor REFCURSOR) FROM PUBLIC;

