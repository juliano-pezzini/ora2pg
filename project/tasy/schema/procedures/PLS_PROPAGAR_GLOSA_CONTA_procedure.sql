-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_propagar_glosa_conta ( nr_seq_analise_p bigint, nr_seq_conta_glosa_p bigint, nr_seq_grupo_atual_p bigint, nr_seq_mot_liberacao_p bigint, ds_parecer_p text, ie_finalizacao_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Ao confirmar uma glosa da conta (geral), carregar a mesma para todos os itens da conta. 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
cd_motivo_tiss_w		varchar(10);
ie_tipo_item_w			varchar(3);
ie_tipo_liberacao_w		varchar(3);
vl_apresentado_w		double precision;
vl_calculado_w			double precision;
vl_unitario_w			pls_conta_proc.vl_unitario%type;

vl_liberado_w			double precision;
vl_glosa_w			double precision;
vl_saldo_w			double precision;
vl_pag_medico_conta_w		double precision;
vl_unitario_calc_w		pls_conta_proc.vl_unitario%type;
vl_unitario_apres_w		pls_conta_proc.vl_unitario_imp%type;

vl_base_w			double precision;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_proc_partic_w		bigint;
nr_seq_conta_w			bigint;
nr_seq_prestador_w		bigint;
nr_seq_conta_glosa_w		bigint;
nr_seq_item_w			bigint;
qt_proc_w			bigint;
qt_proc_glosa_w			bigint;
qt_mat_w			bigint;
qt_mat_glosa_w			bigint;
ie_valor_base_w			integer;
nr_seq_fluxo_w			bigint;

C01 CURSOR FOR 
	SELECT	a.nr_sequencia nr_seq_proc, 
		null nr_seq_mat, 
		null nr_seq_partic 
	from	pls_conta_proc	a 
	where	a.nr_seq_conta	= nr_seq_conta_w 
	and (a.ie_status	not('D','M')) 
	
union all
 
	SELECT	null nr_seq_proc, 
		a.nr_sequencia nr_seq_mat, 
		null nr_seq_partic 
	from	pls_conta_mat	a 
	where	a.nr_seq_conta	= nr_seq_conta_w 
	and (a.ie_status	not in ('D','M')) 
	/* Honorário */
 
	
union all
 
	select	c.nr_sequencia nr_seq_proc, 
		null nr_seq_mat, 
		null nr_seq_partic 
	from	pls_conta	d, 
		pls_conta_proc	c, 
		pls_conta_proc	a 
	where	a.nr_sequencia	= c.nr_seq_proc_ref 
	and	a.nr_seq_conta	= nr_seq_conta_w 
	and	c.nr_seq_conta	= d.nr_sequencia 
	and	d.nr_seq_analise = nr_seq_analise_p 
	and	((coalesce(c.ie_glosa::text, '') = '') or (c.ie_glosa = 'N')) 
	and (c.ie_status	not in ('D','M'));


BEGIN 
if (nr_seq_conta_glosa_p IS NOT NULL AND nr_seq_conta_glosa_p::text <> '') then 
	begin 
	select	b.cd_motivo_tiss, 
		a.nr_seq_conta 
	into STRICT	cd_motivo_tiss_w, 
		nr_seq_conta_w 
	from	tiss_motivo_glosa	b, 
		pls_conta_glosa		a 
	where	a.nr_seq_motivo_glosa	= b.nr_sequencia 
	and	a.nr_sequencia		= nr_seq_conta_glosa_p;
	exception 
	when others then 
		cd_motivo_tiss_w	:= null;
	end;
 
	if (cd_motivo_tiss_w IS NOT NULL AND cd_motivo_tiss_w::text <> '') and (nr_seq_conta_w IS NOT NULL AND nr_seq_conta_w::text <> '') then 
		select	coalesce(a.nr_seq_prestador_exec,b.nr_seq_prestador) 
		into STRICT	nr_seq_prestador_w 
		from	pls_protocolo_conta	b, 
			pls_conta		a 
		where	a.nr_seq_protocolo	= b.nr_sequencia 
		and	a.nr_sequencia		= nr_seq_conta_w;
		 
		open C01;
		loop 
		fetch C01 into	 
			nr_seq_conta_proc_w, 
			nr_seq_conta_mat_w, 
			nr_seq_proc_partic_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin			 
			nr_seq_item_w	:= null;
 
			if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then 
				nr_seq_item_w	:= nr_seq_conta_proc_w;
				ie_tipo_item_w	:= 'P';
				 
				select	a.ie_valor_base, 
					a.vl_procedimento_imp, 
					a.vl_procedimento, 
					a.vl_pag_medico_conta, 
					a.vl_unitario_imp, 
					a.vl_unitario 
				into STRICT	ie_valor_base_w, 
					vl_apresentado_w, 
					vl_calculado_w, 
					vl_pag_medico_conta_w, 
					vl_unitario_apres_w, 
					vl_unitario_calc_w 
				from	pls_conta_proc	a 
				where	a.nr_sequencia	= nr_seq_conta_proc_w;
			elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then 
				nr_seq_item_w	:= nr_seq_conta_mat_w;
				ie_tipo_item_w	:= 'M';
				 
				select	a.ie_valor_base, 
					a.vl_material_imp, 
					a.vl_material, 
					a.vl_unitario_imp, 
					a.vl_unitario 
				into STRICT	ie_valor_base_w, 
					vl_apresentado_w, 
					vl_calculado_w, 
					vl_unitario_apres_w, 
					vl_unitario_calc_w 
				from	pls_conta_mat	a 
				where	a.nr_sequencia	= nr_seq_conta_mat_w;
			end if;
			 
			if (ie_valor_base_w = '1') or (vl_apresentado_w > 0) then 
				ie_tipo_liberacao_w	:= 'A';
				vl_base_w		:= vl_apresentado_w;
				vl_unitario_w		:= vl_unitario_apres_w;
			else 
				ie_tipo_liberacao_w	:= 'C';
				vl_base_w		:= vl_calculado_w;
				vl_unitario_w		:= vl_unitario_calc_w;
			end if;
			 
			vl_liberado_w	:= 0;
			vl_glosa_w	:= vl_base_w - vl_liberado_w;
			 
			if (vl_calculado_w > vl_liberado_w) then 
				vl_saldo_w	:= abs(vl_glosa_w);
			else 
				vl_saldo_w	:= 0;
			end if;
			 
			if (nr_seq_item_w IS NOT NULL AND nr_seq_item_w::text <> '') then		 
				vl_liberado_w := pls_atualiza_conta_item(	nr_seq_item_w, ie_tipo_item_w, null, /* Motivo de glosa */
 
							vl_unitario_w, vl_liberado_w, vl_glosa_w, vl_saldo_w, null /* vl prestador */
, 0, null, /* Observação da glosa */
 
							'A', /* Origem - Analise */
 
							cd_estabelecimento_p, nm_usuario_p, 'N' /* commit */
, vl_pag_medico_conta_w, 'N' /* conta inteira */
, ie_tipo_liberacao_w, 'S' /* Conta auditoria */
, null, null, null, null, null, null);
			end if;
			 
			if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then 
				select	max(nr_sequencia) 
				into STRICT	nr_seq_conta_glosa_w 
				from	pls_conta_glosa	a 
				where	a.nr_seq_conta_proc	= nr_seq_conta_proc_w;
			elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then 
				select	max(nr_sequencia) 
				into STRICT	nr_seq_conta_glosa_w 
				from	pls_conta_glosa	a 
				where	a.nr_seq_conta_mat	= nr_seq_conta_mat_w;
			elsif (nr_seq_proc_partic_w IS NOT NULL AND nr_seq_proc_partic_w::text <> '') then 
				select	max(nr_sequencia) 
				into STRICT	nr_seq_conta_glosa_w 
				from	pls_conta_glosa	a 
				where	a.nr_seq_proc_partic	= nr_seq_proc_partic_w;
			end if;
			 
			if (nr_seq_conta_glosa_w IS NOT NULL AND nr_seq_conta_glosa_w::text <> '') then 
				update	pls_conta_glosa 
				set	nr_seq_glosa_conta	= nr_seq_conta_glosa_p 
				where	nr_sequencia		= nr_seq_conta_glosa_w;
			end if;
			 
			/* Gravar fluxo de análise */
 
			nr_seq_fluxo_w := pls_gravar_fluxo_analise_item(	nr_seq_analise_p, nr_seq_conta_w, nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_proc_partic_w, null, nr_seq_grupo_atual_p, 'G', /* Glosa */
 
							nr_seq_mot_liberacao_p, ds_parecer_p, 'N', ie_finalizacao_p, nm_usuario_p, 'S', 'P', '8', nr_seq_fluxo_w);			
			end;
		end loop;
		close C01;
		 
		select	count(1), 
			sum(CASE WHEN a.ie_glosa='S' THEN  1  ELSE 0 END ) 
		into STRICT	qt_proc_w, 
			qt_proc_glosa_w 
		from	pls_conta_proc	a 
		where	a.nr_seq_conta	= nr_seq_conta_w;
		 
		select	count(1), 
			sum(CASE WHEN a.ie_glosa='S' THEN  1  ELSE 0 END ) 
		into STRICT	qt_mat_w, 
			qt_mat_glosa_w 
		from	pls_conta_mat	a 
		where	a.nr_seq_conta	= nr_seq_conta_w;
		 
		if (qt_proc_w = coalesce(qt_proc_glosa_w, 0)) and (qt_mat_w = coalesce(qt_mat_glosa_w, 0)) then 
			update	pls_conta 
			set	ie_glosa	= 'S' 
			where	nr_sequencia	= nr_seq_conta_w;
		end if;
 
	end if;
end if;
 
/* Não pode ter commit */
 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_propagar_glosa_conta ( nr_seq_analise_p bigint, nr_seq_conta_glosa_p bigint, nr_seq_grupo_atual_p bigint, nr_seq_mot_liberacao_p bigint, ds_parecer_p text, ie_finalizacao_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

