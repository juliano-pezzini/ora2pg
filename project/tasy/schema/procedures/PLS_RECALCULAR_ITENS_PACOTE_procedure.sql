-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_recalcular_itens_pacote ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_preco_pacote_p pls_pacote_tipo_acomodacao.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_origem_rec_p text, ie_abrir_lanc_p text) AS $body$
DECLARE

 
				 
/*Esta rotina tem como objetivo calcular o valor para os itens gerados 
na abertura dos pacotes nas funções de contas médicas.*/
 
 
nr_seq_conta_proc_w       bigint;
ie_tipo_despesa_w        varchar(10);
nr_seq_conta_mat_w       bigint;
nr_seq_protocolo_w       bigint;
ie_tipo_segurado_w       varchar(10);
cd_estabelecimento_w      bigint;
ie_calculo_pacote_w       varchar(2);
ie_atualiza_apresentado_w    varchar(1);
vl_procedimento_w        double precision;
ie_vinculo_direto_w       varchar(1);
vl_procedimento_imp_w      double precision;
cd_procedimento_w        bigint;
ie_origem_proced_w       bigint;
vl_liberado_w          double precision;
qt_procedimento_dif_w      bigint;
vl_calculado_w         double precision;
ie_geracao_pos_estab_w		varchar(1);
qt_conta_mat_w			bigint;
vl_tot_calc_w			double precision;
nr_seq_pacote_w			pls_pacote.nr_sequencia%type;
ie_composicao_w			varchar(1);

C01 CURSOR FOR 
    SELECT a.nr_sequencia, 
        a.ie_tipo_despesa, 
        'N' ie_vinculo_direto, 
        a.vl_procedimento, 
        a.vl_procedimento_imp, 
        a.cd_procedimento, 
        a.ie_origem_proced, 
        a.vl_liberado, 
        (coalesce(vl_custo_operacional,0)+ coalesce(vl_anestesista,0) + coalesce(vl_medico,0) + coalesce(vl_materiais,0) + coalesce(vl_auxiliares,0)) vl_proc, 
		a.vl_procedimento vl_calc, 
		a.nr_seq_pacote 
    from  pls_conta_proc a 
    where  nr_seq_conta  = nr_seq_conta_p 
	and	a.nr_seq_preco_pacote	= nr_seq_preco_pacote_p 
	and	ie_status not in ('M','D') 
    and   not exists (SELECT 1 
                from  pls_vinculo_direto x 
                where  x.cd_procedimento = a.cd_procedimento 
                and       x.ie_origem_proced = a.ie_origem_proced) 
	and	((ie_origem_rec_p	= 'C') or 
		((ie_origem_rec_p	= 'G') and 
		((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '' AND nr_seq_regra_qtde_exec <> 0) or (ie_glosa = 'S')))) 
    
union all
 
    select a.nr_sequencia, 
        a.ie_tipo_despesa, 
        'S' ie_vinculo_direto, 
        a.vl_procedimento, 
        a.vl_procedimento_imp, 
        a.cd_procedimento, 
        a.ie_origem_proced, 
        a.vl_liberado, 
        (coalesce(vl_custo_operacional,0)+ coalesce(vl_anestesista,0) + coalesce(vl_medico,0) + coalesce(vl_materiais,0) + coalesce(vl_auxiliares,0)) vl_proc, 
		a.vl_procedimento vl_calc, 
		a.nr_seq_pacote 
    from  pls_conta_proc a 
    where  nr_seq_conta  = nr_seq_conta_p 
	and	a.nr_seq_preco_pacote	= nr_seq_preco_pacote_p 
	and	ie_status not in ('M','D') 
    and   exists (select 1 
            from  pls_vinculo_direto x 
            where  x.cd_procedimento = a.cd_procedimento 
            and       x.ie_origem_proced = a.ie_origem_proced) 
	and	((ie_origem_rec_p	= 'C') or 
		((ie_origem_rec_p	= 'G') and 
		((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '' AND nr_seq_regra_qtde_exec <> 0) or (ie_glosa = 'S')))) 
    order by vl_proc desc, 
		 vl_calc desc, 
         vl_procedimento_imp desc, 
         ie_vinculo_direto, 
		 nr_sequencia, 
         cd_procedimento, 
         ie_origem_proced;

C02 CURSOR FOR 
    SELECT nr_sequencia, 
		nr_seq_material, 
		nr_seq_pacote, 
		nr_seq_conta 
    from  pls_conta_mat 
    where  nr_seq_conta  = nr_seq_conta_p 
	and	ie_status not in ('M','D') 
	and	nr_seq_preco_pacote	= nr_seq_preco_pacote_p;

C03 CURSOR FOR 
    SELECT a.nr_sequencia, 
        a.ie_tipo_despesa, 
        'N' ie_vinculo_direto, 
        a.vl_procedimento, 
        a.vl_procedimento_imp, 
        a.cd_procedimento, 
        a.ie_origem_proced, 
        a.vl_liberado, 
		a.nr_seq_pacote 
    from  pls_conta_proc a 
    where  nr_seq_conta  = nr_seq_conta_p 
    and	a.nr_seq_preco_pacote	= nr_seq_preco_pacote_p 
	and   coalesce(ie_glosa,'N') <> 'S' 
	and	ie_status != 'M' 
    and   coalesce(nr_seq_regra_qtde_exec,0) <> 0 
    and   not exists (SELECT 1 
                from  pls_vinculo_direto x 
                where  x.cd_procedimento = a.cd_procedimento 
                and       x.ie_origem_proced = a.ie_origem_proced) 
	and	((ie_origem_rec_p	= 'C') or 
		((ie_origem_rec_p	= 'G') and 
		((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '')))) 
    
union all
 
    select a.nr_sequencia, 
        a.ie_tipo_despesa, 
        'S' ie_vinculo_direto, 
        a.vl_procedimento, 
        a.vl_procedimento_imp, 
        a.cd_procedimento, 
        a.ie_origem_proced, 
        a.vl_liberado, 
		a.nr_seq_pacote 
    from  pls_conta_proc a 
    where  nr_seq_conta  = nr_seq_conta_p 
    and	a.nr_seq_preco_pacote	= nr_seq_preco_pacote_p 
	and   coalesce(ie_glosa,'N') <> 'S' 
	and	ie_status != 'M' 
    and   coalesce(nr_seq_regra_qtde_exec,0) <> 0 
    and   exists (select 1 
            from  pls_vinculo_direto x 
            where  x.cd_procedimento = a.cd_procedimento 
            and       x.ie_origem_proced = a.ie_origem_proced) 
	and	((ie_origem_rec_p	= 'C') or 
		((ie_origem_rec_p	= 'G') and 
		((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '')))) 
    order by vl_procedimento_imp desc, 
         ie_vinculo_direto, 
		 nr_sequencia, 
         cd_procedimento, 
         ie_origem_proced;
		
C04 CURSOR(nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR 
    SELECT nr_sequencia 
    from  pls_conta_proc 
    where  nr_seq_conta  = nr_seq_conta_pc 
	and	ie_status not in ('L','S','D','M');

BEGIN 
if (ie_abrir_lanc_p <> 'S') then 
	update pls_conta_proc 
	set   tx_medico             = NULL, 
		tx_custo_operacional       = NULL, 
		tx_material            = NULL, 
		vl_exame_coleta			= 0, 
		nr_seq_prest_pgto_coleta	 = NULL, 
		nr_seq_exame_coleta		 = NULL, 
		vl_unitario_imp         = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE vl_unitario_imp END , 
		vl_procedimento_imp       = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE vl_procedimento_imp END , 
		ie_vl_apresentado_sistema    = 'N' 
	where  nr_seq_conta          = nr_seq_conta_p 
	and	((ie_origem_rec_p	= 'C') or 
		((ie_origem_rec_p	= 'G') and 
		((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '')))) 
	and	nr_seq_preco_pacote	= nr_seq_preco_pacote_p;
else 
	update pls_conta_proc 
	set   tx_medico             = NULL, 
		tx_custo_operacional       = NULL, 
		tx_material            = NULL, 
	    nr_seq_regra_qtde_exec      = NULL, 
		nr_seq_regra_tx_proc		 = NULL, 
		ie_regra_qtde_execucao      = NULL, 
		vl_exame_coleta			= 0, 
		nr_seq_prest_pgto_coleta	 = NULL, 
		nr_seq_exame_coleta		 = NULL, 
		vl_unitario_imp         = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE vl_unitario_imp END , 
		vl_procedimento_imp       = CASE WHEN coalesce(ie_vl_apresentado_sistema,'N')='S' THEN  0  ELSE vl_procedimento_imp END , 
		ie_vl_apresentado_sistema    = 'N' 
	where  nr_seq_conta          = nr_seq_conta_p 
	and	((ie_origem_rec_p	= 'C') or 
		((ie_origem_rec_p	= 'G') and 
		((coalesce(ie_via_obrigatoria,'N') = 'S') or (nr_seq_regra_qtde_exec IS NOT NULL AND nr_seq_regra_qtde_exec::text <> '')))) 
	and	nr_seq_preco_pacote	= nr_seq_preco_pacote_p;
end if;
/* Obter dados da conta */
 
begin 
select nr_seq_protocolo, 
    ie_tipo_segurado, 
    cd_estabelecimento 
into STRICT  nr_seq_protocolo_w, 
    ie_tipo_segurado_w, 
    cd_estabelecimento_w 
from  pls_conta 
where  nr_sequencia  = nr_seq_conta_p;
exception 
when others then 
    nr_seq_protocolo_w   := null;
    cd_estabelecimento_w  := null;
end;
 
/*Atualizar o preco dos materiais*/
 
for r_C02 in C02 loop 
	/*Obter se o item está dentro da composição do pacote.*/
 
	ie_composicao_w	:= pls_obter_se_item_composicao(r_C02.nr_seq_pacote,r_C02.nr_seq_material,null,null);
	 
	if (ie_composicao_w	= 'S')	then 
		if (ie_origem_rec_p	= 'C')	then 
			CALL pls_atualiza_valor_mat(r_C02.nr_sequencia, 'N', nm_usuario_p,'S',null);
			CALL pls_obter_tx_qtde_mat_valor(r_C02.nr_sequencia,r_C02.nr_seq_conta, nm_usuario_p, cd_estabelecimento_w);
		end if;
	end if;
end loop;
 
select count(1) 
into STRICT  qt_procedimento_dif_w 
from  pls_conta_proc a 
where  a.nr_seq_conta = nr_seq_conta_p 
and   coalesce(a.nr_seq_regra_qtde_exec,0) <> 0 
and   exists (    SELECT 1 
            from  pls_conta_proc x 
            where  x.nr_seq_conta = a.nr_seq_conta 
            and   x.cd_procedimento    <> a.cd_procedimento 
            and   a.nr_seq_regra_qtde_exec = x.nr_seq_regra_qtde_exec );
 
 
 
if (coalesce(qt_procedimento_dif_w,0) <> 0) then 
    open C03;
    loop 
    fetch C03 into 
        nr_seq_conta_proc_w, 
        ie_tipo_despesa_w, 
        ie_vinculo_direto_w, 
        vl_procedimento_w, 
        vl_procedimento_imp_w, 
        cd_procedimento_w, 
        ie_origem_proced_w, 
        vl_liberado_w, 
		nr_seq_pacote_w;
    EXIT WHEN NOT FOUND; /* apply on C03 */
        begin 
		/*Obter se o item está dentro da composição do pacote.*/
 
		ie_composicao_w	:= pls_obter_se_item_composicao(nr_seq_pacote_w	,null,cd_procedimento_w,ie_origem_proced_w);
		 
		if (ie_composicao_w	= 'S')	then 
			if (ie_tipo_despesa_w = '1') then 
				CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N',ie_origem_rec_p,null);
			elsif (ie_tipo_despesa_w in ('2','3')) then 
				CALL pls_atualiza_valor_servico(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N');
			elsif (ie_tipo_despesa_w = '4') then 
				if (ie_calculo_pacote_w  = 'R') then 
					CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N',ie_origem_rec_p,null);
				else 
					CALL pls_atualiza_valor_pacote(nr_seq_conta_proc_w, 'C', nm_usuario_p, 'N', 'N');
				end if;
			else 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(182981);
			end if;
		end if;
        end;
    end loop;
    close C03;
end if;
 
open C01;
loop 
fetch C01 into 
    nr_seq_conta_proc_w, 
    ie_tipo_despesa_w, 
    ie_vinculo_direto_w, 
    vl_procedimento_w, 
    vl_procedimento_imp_w, 
    cd_procedimento_w, 
    ie_origem_proced_w, 
    vl_liberado_w, 
	vl_tot_calc_w, 
    vl_calculado_w, 
	nr_seq_pacote_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
    begin 
	/*Obter se o item está dentro da composição do pacote.*/
 
	ie_composicao_w	:= pls_obter_se_item_composicao(nr_seq_pacote_w	,null,cd_procedimento_w,ie_origem_proced_w);
		 
	if (ie_composicao_w	= 'S')	then 
		if (ie_tipo_despesa_w = '1') then 
			CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'N', nm_usuario_p,'S',ie_origem_rec_p,null);
		elsif (ie_tipo_despesa_w in ('2','3')) then 
			CALL pls_atualiza_valor_servico(nr_seq_conta_proc_w, 'N', nm_usuario_p,'S');
		elsif (ie_tipo_despesa_w = '4') then 
			if (ie_calculo_pacote_w  = 'R') then 
				CALL pls_atualiza_valor_proc(nr_seq_conta_proc_w, 'S', nm_usuario_p,'N',ie_origem_rec_p,null);
			else 
				CALL pls_atualiza_valor_pacote(nr_seq_conta_proc_w, 'C', nm_usuario_p, 'S', 'N');
			end if;
		else 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(182981);
		end if;
	end if;
	end;
end loop;
close C01;
 
for r_C04_w in C04(nr_seq_conta_p) loop 
	update	pls_conta_proc 
	set	ie_status 	= 'P' 
	where	nr_sequencia	= r_C04_w.nr_sequencia;
end loop;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_recalcular_itens_pacote ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_preco_pacote_p pls_pacote_tipo_acomodacao.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_origem_rec_p text, ie_abrir_lanc_p text) FROM PUBLIC;

