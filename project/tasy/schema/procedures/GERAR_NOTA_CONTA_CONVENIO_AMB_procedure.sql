-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nota_conta_convenio_amb ( nr_seq_protocolo_p protocolo_convenio.nr_seq_protocolo%type, cd_convenio_p convenio.cd_convenio%type, qt_linhas_p bigint, nm_usuario_p usuario.nm_usuario%type, nr_nota_inicial_p INOUT bigint) AS $body$
DECLARE

 
nr_conta_inicial_w	conta_convenio_atual.nr_conta_inicial%type;
nr_final_conta_w	conta_convenio_atual.nr_final_conta%type;
nr_conta_atual_w	conta_convenio_atual.nr_conta_atual%type;
nr_conta_novo_w		conta_convenio_atual.nr_conta_atual%type;
nr_nota_w		conta_convenio_atual.nr_conta_atual%type;
qt_conta_w		bigint := 0;
qt_nota_prot_w		bigint := 0;
nr_interno_conta_w	conta_paciente.nr_interno_conta%type := null;
nr_nota_conta_w		protocolo_conv_nota_conta.nr_nota_conta%type;
nr_nota_inicial_w	protocolo_conv_nota_conta.nr_nota_inicial%type := 0;
dt_mesano_referencia_w	protocolo_convenio.dt_mesano_referencia%type;	
nr_sequencia_w		protocolo_conv_nota_conta.nr_sequencia%type;

BEGIN 
 
select	dt_mesano_referencia 
into STRICT	dt_mesano_referencia_w 
from	protocolo_convenio 
where	nr_seq_protocolo = nr_seq_protocolo_p  LIMIT 1;
 
CALL gerar_conta_convenio_atual(cd_convenio_p,dt_mesano_referencia_w,nm_usuario_p);
 
qt_conta_w := coalesce(ceil(((qt_linhas_p+1)/20)),0);
 
begin 
select	count(nr_nota_conta) 
into STRICT	qt_nota_prot_w 
from	protocolo_conv_nota_conta 
where	nr_seq_protocolo = nr_seq_protocolo_p;
exception 
when others then 
	qt_nota_prot_w := 0;
end;
 
begin 
select	coalesce(nr_conta_inicial,1), 
	coalesce(nr_final_conta,0), 
	coalesce(nr_conta_atual,coalesce(nr_conta_inicial,1)) 
into STRICT	nr_conta_inicial_w, 
	nr_final_conta_w, 
	nr_conta_atual_w 
from	conta_convenio_atual 
where	cd_convenio = cd_convenio_p 
and	ie_situacao = 'A' 
and	trunc(dt_competencia,'month') = trunc(dt_mesano_referencia_w,'month')  
for update LIMIT 1;
exception 
when others then 
	commit;
	nr_conta_inicial_w	:= 1;
	nr_final_conta_w	:= 0;
	nr_conta_atual_w	:= null;
end;
 
nr_nota_inicial_p := nr_nota_inicial_w;
 
if (coalesce(nr_conta_atual_w,0) > 0) and (qt_conta_w > 0) and (qt_nota_prot_w = 0) then 
	begin 
	 
	nr_nota_w 		:= (nr_conta_atual_w - 1);
	nr_nota_inicial_w	:= nr_conta_atual_w;
 
	if	((nr_conta_atual_w + qt_conta_w) > nr_final_conta_w) then 
		begin 
		nr_conta_novo_w := nr_conta_inicial_w + ((nr_conta_atual_w + qt_conta_w) - nr_final_conta_w);
		end;
	else 
		nr_conta_novo_w := (nr_conta_atual_w + qt_conta_w);
	end if;
 
	update	conta_convenio_atual 
	set	nr_conta_atual 	= nr_conta_novo_w, 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp() 
	where 	cd_convenio = cd_convenio_p 
	and	trunc(dt_competencia,'month') = trunc(dt_mesano_referencia_w,'month');
	commit;
 
	for z in 1..qt_conta_w loop 
		begin 
 
		nr_nota_w := nr_nota_w + 1;
 
		if (nr_nota_w > nr_final_conta_w) then 
			nr_nota_w := nr_conta_inicial_w;
		end if;
 
		insert into protocolo_conv_nota_conta( 
			nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_protocolo, 
			nr_interno_conta, 
			nr_nota_conta, 
			nr_nota_inicial) 
		values (	nextval('protocolo_conv_nota_conta_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			nr_seq_protocolo_p, 
			nr_interno_conta_w, 
			nr_nota_w, 
			nr_nota_inicial_w);
 
		end;
	end loop;
		 
	update	protocolo_convenio 
	set 	nr_seq_doc_convenio = nr_nota_inicial_w, 
		dt_atualizacao	= clock_timestamp(), 
		nm_usuario 	= nm_usuario_p 
	where 	nr_seq_protocolo = nr_seq_protocolo_p;
 
	nr_nota_inicial_p := nr_nota_inicial_w;
	end;
elsif (coalesce(nr_conta_atual_w,0) > 0) and (qt_conta_w > 1) and (qt_nota_prot_w > 0) then 
	begin 
 
	if (qt_nota_prot_w < qt_conta_w) then 
		qt_conta_w := qt_conta_w - qt_nota_prot_w;
	else 
		qt_conta_w := 0;
	end if;
 
	if	((nr_conta_atual_w + qt_conta_w) > nr_final_conta_w) then 
		begin 
		nr_conta_novo_w := nr_conta_inicial_w + ((nr_conta_atual_w + qt_conta_w) - nr_final_conta_w);
		end;
	else 
		nr_conta_novo_w := (nr_conta_atual_w + qt_conta_w);
	end if;
 
	update	conta_convenio_atual 
	set	nr_conta_atual 	= nr_conta_novo_w, 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp() 
	where 	cd_convenio 	= cd_convenio_p 
	and	nr_conta_atual 	< nr_conta_novo_w 
	and	trunc(dt_competencia,'month') = trunc(dt_mesano_referencia_w,'month');
 
	commit;
																										 
	begin 
	select	coalesce(max(nr_nota_inicial),0) 
	into STRICT	nr_nota_inicial_w 
	from	protocolo_conv_nota_conta 
	where	nr_seq_protocolo = nr_seq_protocolo_p;
	exception 
	when others then 
		nr_nota_inicial_w := 0;
	end;
 
	nr_nota_w 		:= (nr_nota_inicial_w - 1);
	nr_nota_inicial_p 	:= nr_nota_inicial_w;
	 
	for z in 1..qt_conta_w loop 
		begin 
		 
		nr_nota_w := nr_nota_w + 1;
		 
		if (nr_nota_w > nr_final_conta_w) then 
			begin 
			nr_nota_w := nr_conta_inicial_w;
			end;
		end if;
		 
		select	count(1) 
		into STRICT	qt_nota_prot_w 
		from	protocolo_conv_nota_conta 
		where	nr_seq_protocolo = nr_seq_protocolo_p 
		and	nr_nota_conta = nr_nota_w;
 
		if (qt_nota_prot_w = 0) then 
			begin 
 
			insert into protocolo_conv_nota_conta( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo, 
				nr_interno_conta, 
				nr_nota_conta, 
				nr_nota_inicial) 
			values (	nextval('protocolo_conv_nota_conta_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_p, 
				nr_interno_conta_w, 
				nr_nota_w, 
				nr_nota_inicial_w);
 
				end;
			end if;			
 
		end;
	end loop;
	 
	update	protocolo_convenio 
	set 	nr_seq_doc_convenio = nr_nota_inicial_w, 
		dt_atualizacao	= clock_timestamp(), 
		nm_usuario 	= nm_usuario_p 
	where 	nr_seq_protocolo = nr_seq_protocolo_p;
	end;
elsif (coalesce(nr_conta_atual_w,0) > 0) and (qt_conta_w = 1) and (qt_nota_prot_w > 0) then 
	begin 
	if	((nr_conta_atual_w + qt_conta_w) > nr_final_conta_w) then 
		begin 
		nr_conta_novo_w := nr_conta_inicial_w + ((nr_conta_atual_w + qt_conta_w) - nr_final_conta_w);
		nr_nota_w := nr_conta_novo_w;
		end;
	else 
		nr_conta_novo_w := (nr_conta_atual_w + qt_conta_w);
		 
		select	max(nr_sequencia) 
		into STRICT	nr_sequencia_w 
		from	protocolo_conv_nota_conta 
		where	nr_seq_protocolo = nr_seq_protocolo_p;
		 
		begin 
		select	coalesce((nr_nota_conta + qt_conta_w),0), 
			coalesce(nr_nota_inicial,1) 
		into STRICT	nr_nota_w, 
			nr_nota_inicial_w 
		from	protocolo_conv_nota_conta 
		where	nr_sequencia = nr_sequencia_w 
		and	nr_seq_protocolo = nr_seq_protocolo_p  LIMIT 1;		
		exception 
		when others then 
			nr_nota_w := 0;
		end;
	end if;
 
	update	conta_convenio_atual 
	set	nr_conta_atual 	= nr_conta_novo_w, 
		nm_usuario	= nm_usuario_p, 
		dt_atualizacao	= clock_timestamp() 
	where 	cd_convenio 	= cd_convenio_p 
	and	nr_conta_atual 	< nr_conta_novo_w 
	and	trunc(dt_competencia,'month') = trunc(dt_mesano_referencia_w,'month');
 
	commit;
 
	if (nr_nota_w > 0) then 
		begin 
 
		insert into protocolo_conv_nota_conta( 
			nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_protocolo, 
			nr_interno_conta, 
			nr_nota_conta, 
			nr_nota_inicial) 
		values (	nextval('protocolo_conv_nota_conta_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			nr_seq_protocolo_p, 
			nr_interno_conta_w, 
			nr_nota_w, 
			nr_nota_inicial_w);
 
		end;
	end if;
	 
	update	protocolo_convenio 
	set 	nr_seq_doc_convenio = nr_nota_inicial_w, 
		dt_atualizacao	= clock_timestamp(), 
		nm_usuario 	= nm_usuario_p 
	where 	nr_seq_protocolo = nr_seq_protocolo_p;	
	 
	nr_nota_inicial_p := nr_nota_inicial_w;	
	end;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nota_conta_convenio_amb ( nr_seq_protocolo_p protocolo_convenio.nr_seq_protocolo%type, cd_convenio_p convenio.cd_convenio%type, qt_linhas_p bigint, nm_usuario_p usuario.nm_usuario%type, nr_nota_inicial_p INOUT bigint) FROM PUBLIC;

