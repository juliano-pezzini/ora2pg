-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS ( nm_sinal_vital      varchar(100),
                        vl_sinal_vital      varchar(100),
                        nm_codigo           varchar(100),
                        ds_unidade_medida   varchar(100),
                        ds_lista            varchar(255));


CREATE OR REPLACE PROCEDURE gerar_sinal_vital_bionet ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text) AS $body$
DECLARE


type Vetor is table of campos index by integer;
Vetor_w	                Vetor;

nr_atendimento_w        bigint;
dt_sinal_vital_w        timestamp;
nr_seq_sinal_vital_w    bigint      := 0;
ds_sep_w                varchar(100)   := ';';
nr_pos_separador_w      bigint;
qt_parametros_w         bigint;
qt_contador_w           bigint;
ds_parametros_w         varchar(32000);
i                       integer;
ds_lista_aux_w          varchar(255);
ds_sep_bv_w             varchar(30)    := obter_separador_bv;
nr_seq_monit_resp_w     bigint      := 0;
nr_seq_monit_hemo_w     bigint      := 0;
cd_modalidade_w         varchar(15);
ie_respiracao_w         varchar(7);
ds_erro_w               varchar(4000);
qt_minutos_w            bigint;
qt_min_philips_w        bigint;
qt_reg_w                bigint;
cd_estabelecimento_w    bigint;
nr_cirurgia_w           bigint;
nr_seq_pepo_w           bigint;
cd_profissional_w		varchar(10);

	procedure inserir_sv is
	;
BEGIN
    if (nr_seq_sinal_vital_w	= 0) then

		select	nextval('atendimento_sinal_vital_seq')
		into STRICT	nr_seq_sinal_vital_w
		;

		insert into atendimento_sinal_vital(	nr_sequencia,
							nr_atendimento,
							dt_sinal_vital,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							dt_liberacao,
							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao)
				values (	nr_seq_sinal_vital_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_p,
							null,
							clock_timestamp(),
							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S');
	end if;
	end;

	procedure inserir_resp is
	begin
	if (nr_seq_monit_resp_w	= 0) then

		select	nextval('atendimento_monit_resp_seq')
		into STRICT	nr_seq_monit_resp_w
		;

		insert into ATENDIMENTO_MONIT_RESP(	nr_sequencia,
							nr_atendimento,
							DT_MONITORIZACAO,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							dt_liberacao,
							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao)
				values (	nr_seq_monit_resp_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_p,
							null,
							clock_timestamp(),
							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S');
	end if;
	end;


	procedure inserir_hemo is
	begin
	if (nr_seq_monit_hemo_w	= 0) then

		select	nextval('atend_monit_hemod_seq')
		into STRICT	nr_seq_monit_hemo_w
		;

		insert into ATEND_MONIT_HEMOD(	nr_sequencia,
							nr_atendimento,
							DT_MONITORACAO,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							dt_liberacao,
							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao)
				values (	nr_seq_monit_hemo_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_p,
							null,
							clock_timestamp(),
							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S');
	end if;
	end;


	procedure atualizar_valor_sv(	nm_tabela_p	varchar2,
					nm_atributo_p	varchar2,
					vl_parametro_p	varchar2) is
	ds_comando_w	varchar2(2000);
	ds_parametros_w	varchar2(2000);
	vl_parametro_w	varchar2(2000);
	begin
	ds_comando_w	:= 	'	update	'||nm_tabela_p	||
				'	set	'||nm_atributo_p||' = :vl_parametro'||
				'	where	nr_sequencia	= :nr_sequencia ';
	begin
	vl_parametro_w	:= vl_parametro_p;
	if	((substr(nm_atributo_p,1,2)	= 'QT') or (substr(nm_atributo_p,1,2)	= 'PR') or (substr(nm_atributo_p,1,2)	= 'VL') or (substr(nm_atributo_p,1,2)	= 'TX')) then
		vl_parametro_w	:= replace(vl_parametro_w,'.',',');
	end if;

	if (nm_tabela_p	= 'ATENDIMENTO_SINAL_VITAL') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_sv;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_sinal_vital_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
	elsif (nm_tabela_p	= 'ATENDIMENTO_MONIT_RESP') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_resp;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_monit_resp_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
	elsif (nm_tabela_p	= 'ATEND_MONIT_HEMOD') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_hemo;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_monit_hemo_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
	end if;

	exception
		when others then
		ds_erro_w		:= sqlerrm(SQLSTATE);
		
	end;

	end;
begin

begin
dt_sinal_vital_w := to_date(dt_sinal_vital_p, 'yyyymmddhh24miss');
exception
	when others then
	dt_sinal_vital_w	:= clock_timestamp();
end;

select 	max(nr_atendimento)
into STRICT 	nr_atendimento_w
from 	atendimento_paciente
where 	cd_pessoa_fisica  = cd_pessoa_fisica_p;

select	max(nr_cirurgia),
		max(nr_seq_pepo)
into STRICT	nr_cirurgia_w,
		nr_seq_pepo_w
from	cirurgia
where	nr_atendimento = nr_atendimento_w
and		dt_sinal_vital_w between dt_inicio_real and coalesce(dt_termino, dt_sinal_vital_w);

if (coalesce(nr_cirurgia_w::text, '') = '') and (coalesce(nr_seq_pepo_w::text, '') = '') then
	select	max(nr_cirurgia),
			max(nr_seq_pepo)
	into STRICT	nr_cirurgia_w,
			nr_seq_pepo_w
	from	atend_paciente_unidade
	where	nr_atendimento = nr_atendimento_w
	and		dt_sinal_vital_w between dt_entrada_unidade and coalesce(dt_saida_unidade, dt_sinal_vital_w);
end if;

ds_parametros_w    := ds_lista_parametros_p||ds_lista_parametros2_p;
ds_parametros_w	   := replace(ds_parametros_w,'null','');
i	:= 0;

while(length(ds_parametros_w) > 0) loop
	begin
	i	:= i+1;
	if (position(';' in ds_parametros_w)	>0)  then
		Vetor_w[i].ds_lista	:= substr(ds_parametros_w,1,position(';' in ds_parametros_w)-1 );
		ds_parametros_w	:= substr(ds_parametros_w,position(';' in ds_parametros_w)+1,40000);

	else
		Vetor_w[i].ds_lista	:=substr(ds_parametros_w,1,length(ds_parametros_w) - 1);
		ds_parametros_w	:= null;
	end if;

	end;
end loop;

RAISE NOTICE '%', Vetor_w.count;


for j in 1..Vetor_w.count loop
	begin

	ds_lista_aux_w	:= Vetor_w[j].ds_lista;

	Vetor_w[j].nm_sinal_vital	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)-1 );
	RAISE NOTICE 'nm_sinal_vital = %', Vetor_w[j].nm_sinal_vital;
	
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
	Vetor_w[j].ds_unidade_medida	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
	
	Vetor_w[j].nm_codigo	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );
	
	RAISE NOTICE 'nm_codigo = %', Vetor_w[j].nm_codigo;
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
	
	Vetor_w[j].vl_sinal_vital	:= substr(ds_lista_aux_w,1,4000 );

	end;
end loop;

select	coalesce(max(cd_estabelecimento),1)
into STRICT	cd_estabelecimento_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_w;


if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then

	for i in 1..Vetor_w.count loop
		begin
		
        if REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'HR') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_CARDIACA',Vetor_w[i].vl_sinal_vital);

        elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'SPO2-%') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SATURACAO_O2',Vetor_w[i].vl_sinal_vital);

        elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'SPO2-R') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SPO2R',Vetor_w[i].vl_sinal_vital);
            
        elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'NIBP-S') or REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'IBP(1|2|3|4)-S'))then      
            
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_SISTOLICA',Vetor_w[i].vl_sinal_vital);

            if REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'NIBP-S') then            
                atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA ','E');--e - não invasio
            else
                atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA ','I');--i - invasivo
            end if;

        elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'NIBP-M') or REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'IBP(1|2|3|4)-M'))then      
            
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PAM',Vetor_w[i].vl_sinal_vital);

            if REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'NIBP-M') then            
                atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA ','E');--e - não invasio
            else
                atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA ','I');--i - invasivo
            end if;

        elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'NIBP-D') or REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'IBP(1|2|3|4)-D'))then      
            
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_DIASTOLICA',Vetor_w[i].vl_sinal_vital);

            if REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'NIBP-D') then            
                atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA ','E');--e - não invasio
            else
                atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA ','I');--i - invasivo
            end if;
        
        elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'IBP(1|2|3|4)-PR')then
            
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_CARDIACA',Vetor_w[i].vl_sinal_vital);

        elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TEMP(1|2)') or REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'BTEMP')) then
            
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
        
        end if;

		end;
	end loop;

end if;

select	max(cd_pessoa_fisica)
into STRICT	cd_profissional_w
from	usuario
where	nm_usuario = nm_usuario_p;

CALL GERAR_ESCALA_SEPSE(nr_atendimento_w, cd_profissional_w, nr_seq_sinal_vital_w, nm_usuario_p, null);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_sinal_vital_bionet ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text) FROM PUBLIC;

