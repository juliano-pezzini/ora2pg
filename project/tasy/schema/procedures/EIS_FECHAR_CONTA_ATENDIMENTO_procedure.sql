-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE eis_fechar_conta_atendimento ( nr_interno_conta_p bigint, nr_atendimento_p bigint, ie_status_acerto_p bigint, nm_usuario_p text, ds_erro_p INOUT text, ie_fecha_conta_p INOUT text) AS $body$
DECLARE


ds_erro_conta_w			varchar(255);
ie_fechar_conta_incons_w		varchar(255);
ie_fechar_atendimento_w		varchar(255);

nr_interno_conta_w			bigint	:= 0;
ie_status_acerto_w			smallint	:= 0;
ie_status_acerto_ww			smallint	:= 0;
ds_inconsistencia_w		varchar(255)	:= 0;
ds_erro_w			varchar(255) 	:= '';
ie_fecha_atendimento_w		varchar(01)	:= 'S';
ie_fecha_conta_w			varchar(01)	:= 'S';
ie_fecha_conta_SUS_w		varchar(01)	:= 'S';
ie_fecha_geral_w			varchar(01)	:= 'S';
qt_processo_pendente_w		bigint	:= 0;
nr_contas_w			integer	:= 0;
ie_censo_diario_w			varchar(01)	:= 'S';
ie_fechar_cta_atend_w		varchar(2);
dt_alta_w				timestamp;
ie_tipo_convenio_w			smallint;
qt_reg_sus_inco_w			integer	:= 0;
qt_proc_sus_unif_w			smallint	:= 0;
ie_gera_novo_atend_w		varchar(1);
ie_etapa_conta_w			varchar(200);
cd_estabelecimento_w		integer;
cd_estab_usuario_w		integer;
ie_recalcular_sus_w		varchar(10);
cd_convenio_w			bigint;
ie_insere_prot_bpa_w		varchar(15)	:= 'N';
ie_tipo_atendimento_w		smallint;
qt_apac_w			bigint;
ie_vincular_laudos_aih_w		varchar(10)	:= 'N';
ds_erro_fpo_w			varchar(255) 	:= '';
ie_fecha_conta_out_w			varchar(01)	:= 'S';
qt_conta_w			bigint := 1;
qt_regra_etapa_conta_w	bigint;

C01 CURSOR FOR
	SELECT	nr_interno_conta,
		ie_status_acerto,
		ds_inconsistencia,
		obter_tipo_convenio(cd_convenio_parametro),
		cd_estabelecimento
	from	conta_paciente
	where	nr_atendimento	= nr_atendimento_p;

	procedure eis_fechar_conta_paciente(
					nr_interno_conta_p 	bigint,
					nr_atendimento_p	bigint,
					ie_status_acerto_p	bigint,
					nm_usuario_p		text,
					ds_erro_p out		text,
					ie_fecha_conta_p out	text) is

	ds_erro_w			varchar(255) 	:= '';
	ie_tipo_convenio_w			smallint	:= 0;
	ie_fecha_atendimento_w		varchar(1)	:= '';
	ie_fecha_conta_w			varchar(1)	:= 'N';
	qt_processo_pendente_w		bigint	:= 0;
	ie_gera_longa_perm_w		varchar(1)	:= 'N';
	ie_tipo_atendimento_w		smallint		:= 0;
	nr_seq_apresent_w			bigint	:= 0;
	ie_complexidade_w			varchar(1)	:= 'B';
	cd_estabelecimento_w		integer	:= 0;
	ie_repasse_w			varchar(01)	:= 'N';
	vl_conta_w			double precision	:= 0;
	vl_desconto_w			double precision	:= 0;
	vl_item_w				double precision;
	vl_guia_w			double precision;
	ie_clinica_alta_w			varchar(03);
	qt_anos_w			integer;
	cd_convenio_w			integer;
	qt_aih_vinculada_w			integer;
	nr_aih_w				bigint;
	qt_aih_unif_w			bigint;
	ie_gera_longa_perm_unif_w		varchar(1)	:= 'N';
	ie_status_acerto_w			integer;
	ie_repasse_proc_conv_w		varchar(1);
	ie_repasse_mat_conv_w		varchar(1);
	ie_gerar_alta_tesouraria_w		varchar(1);
	ie_alta_w				varchar(1);

	qt_reg_w				bigint;
	qt_desc_conta_w			bigint;
	nr_seq_mat_desc_w		bigint;
	nr_seq_desc_w			bigint;
	qt_exclusao_w			bigint;
	cd_proc_long_perm_w		bigint;
	ie_orig_proc_long_perm_w		bigint;
	nr_seq_proc_desc_w		bigint;
	qt_erro_w				bigint;
	qt_contas_abertas_w		bigint;
	ie_recalcular_conta_w		varchar(255);
	ie_atualiza_conta_tiss_w		varchar(255);
	qt_reg_sus_inco_w			integer	:= 0;
	qt_conta_w			bigint := 1;


	c01 CURSOR FOR
		--OS  222371
		SELECT	count(*), b.nr_sequencia
		from	mat_atend_paciente_valor a,
			material_atend_paciente  b
		where	b.nr_sequencia = a.nr_seq_material
		and 	a.ie_tipo_valor	= 3
		and 	b.nr_interno_conta = nr_interno_conta_p
		group by b.nr_sequencia
		having count(*) > 1
		order by b.nr_sequencia;

	c02 CURSOR FOR
		SELECT	count(*), b.nr_sequencia
		from	proc_paciente_valor a,
			procedimento_paciente  b
		where	b.nr_sequencia = a.nr_seq_procedimento
		and 	a.ie_tipo_valor	= 3
		and 	b.nr_interno_conta = nr_interno_conta_p
		group by b.nr_sequencia
		having count(*) > 1
		order by b.nr_sequencia;

	
BEGIN

	begin
	CALL gerar_agrupamento_mat(nr_interno_conta_p,nm_usuario_p);
	exception
	when others then
		qt_erro_w:=1;
	end;


	begin
	ie_gerar_alta_tesouraria_w	:= coalesce(Obter_Valor_Param_Usuario(67,547,Obter_Perfil_Ativo,nm_usuario_p,0),'N');
	ie_recalcular_conta_w		:= coalesce(obter_valor_param_usuario(1121, 20, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');
	ie_atualiza_conta_tiss_w	:= coalesce(obter_valor_param_usuario(1121, 19, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');

	if (ie_recalcular_conta_w = 'S') then
		CALL recalcular_conta_paciente(nr_interno_conta_p, nm_usuario_p);
	end if;

	if (ie_atualiza_conta_tiss_w = 'S') then
		CALL tiss_atualizar_prot_conta(null, nr_interno_conta_p, null, null, 'N', wheb_usuario_pck.get_cd_estabelecimento, nm_usuario_p);
	end if;

	select	b.ie_tipo_convenio,
		c.ie_tipo_atendimento,
		ie_complexidade,
		c.cd_estabelecimento,
		a.cd_convenio_parametro
	into STRICT	ie_tipo_convenio_w,
		ie_tipo_atendimento_w,
		ie_complexidade_w,
		cd_estabelecimento_w,
		cd_convenio_w
	from	conta_paciente a,
		convenio b,
		atendimento_paciente c
	where	a.cd_convenio_parametro	= b.cd_convenio
	and	a.nr_interno_conta	= nr_interno_conta_p
	and	c.nr_atendimento	= a.nr_atendimento;
	exception
	when others then
		ie_tipo_convenio_w := 0;
	end;

	begin
	select	coalesce(cd_proc_long_perm,0),
		ie_orig_proc_long_perm
	into STRICT	cd_proc_long_perm_w,
		ie_orig_proc_long_perm_w
	from	convenio_estabelecimento
	where	cd_convenio 		= cd_convenio_w
	and	cd_estabelecimento	= cd_estabelecimento_w;
	exception
	when others then
		cd_proc_long_perm_w		:= 0;
		ie_orig_proc_long_perm_w	:= 0;
	end;

	qt_conta_w := 1;

	if (ie_recalcular_conta_w = 'S') then
		select	count(1)
		into STRICT	qt_conta_w
		from	conta_paciente
		where	nr_interno_conta = nr_interno_conta_p  LIMIT 1;
	end if;

	/* Gerar procedimento CIH(SUS) para internados de convênios */

	if (ie_tipo_convenio_w	<> 3) and (ie_tipo_atendimento_w	= 1) 	and (ie_status_acerto_p 	= 2) 	then
		begin
		CALL gerar_procedimento_cih(	nr_atendimento_p,
					cd_convenio_w,
					ie_tipo_atendimento_w,
					nr_interno_conta_p,
					nm_usuario_p);
		end;
	end if;

	/* Verificar se o atendimento é SUS AIH novo */

	select	count(*)
	into STRICT	qt_aih_unif_w
	from	sus_aih_unif
	where	nr_atendimento	= nr_atendimento_p;

	if (ie_tipo_convenio_w	= 3) and (ie_tipo_atendimento_w	= 1) and (ie_status_acerto_p = 2) then
		begin

		if (qt_aih_unif_w	= 0) then
			begin
			/* Rotina para vincular conta com AIH e laudos */

			select count(*)
			into STRICT	 qt_aih_vinculada_w
			from	 sus_aih
			where	 nr_atendimento	= nr_atendimento_p
			and	 nr_interno_conta	= nr_interno_conta_p;
			if (qt_aih_vinculada_w	= 0) then
				 begin
				 select	coalesce(min(nr_aih),0)
				 into STRICT		nr_aih_w
				 from		sus_aih
				 where	nr_atendimento	= nr_atendimento_p
				 and		coalesce(nr_interno_conta::text, '') = '';
				 if (nr_aih_w	> 0) then
					begin
					/* Laudos vincula por trigger */

					update sus_aih
					set	 nr_interno_conta	= nr_interno_conta_p
					where	 nr_atendimento	= nr_atendimento_p
					and	 nr_aih		= nr_aih_w;
					exception
						 when others then
						 nr_aih_w	:= nr_aih_w;
					commit;
					end;
				end if;
				 end;
			end if;

			ie_gera_longa_perm_w	:= 'N';
			/* Parâmetro que define se gera longa permanencia automatica */

			begin
			select	ie_gera_longa_perman
			into STRICT	ie_gera_longa_perm_w
			from	sus_parametros
			where	cd_estabelecimento	= cd_estabelecimento_w;
			exception
				when others then
				begin
				select	coalesce(vl_parametro,vl_parametro_padrao)
				into STRICT		ie_gera_longa_perm_w
				from		funcao_parametro
				where		cd_funcao		= 81
				and		nr_sequencia	= 22;
				exception
					when others then
						ie_gera_longa_perm_w := 'N';
				end;
			end;
			if (ie_gera_longa_perm_w = 'S') then
				CALL gravar_longa_permanencia(nr_atendimento_p,
							nr_interno_conta_p,
							nm_usuario_p);
			end if;

			CALL gerar_diaria_uti_sus(nr_atendimento_p, nr_interno_conta_p, nm_usuario_p);
			CALL sus_gerar_trat_psiq(nr_atendimento_p, nr_interno_conta_p, nm_usuario_p, cd_estabelecimento_w);
			end;
		elsif (qt_aih_unif_w	> 0) then
			begin
			select	coalesce(max(ie_gera_longa_perm),'N')
			into STRICT	ie_gera_longa_perm_unif_w
			from	sus_parametros_aih
			where	cd_estabelecimento	= cd_estabelecimento_w;

			select	max(ie_status_acerto)
			into STRICT	ie_status_acerto_w
			from	conta_paciente
			where	nr_interno_conta = nr_interno_conta_p;

			if (ie_gera_longa_perm_unif_w	= 'S') and (ie_status_acerto_w = 1) then
				CALL sus_gerar_longa_permanencia(nr_atendimento_p, nr_interno_conta_p, nm_usuario_p);
			end if;

			end;
		end if;

		if (qt_aih_unif_w	= 0 )  then /*Felipe Martini em 23/01/2008 OS80393*/
			CALL gravar_proc_adicional_sus(nr_interno_conta_p,
						  nr_atendimento_p,
						  nm_usuario_p);
		end if;

		end;
	end if;

	/*if	(nvl(cd_proc_long_perm_w,0)	<> 0) and
		(ie_tipo_convenio_w		<> 3) and
		(ie_tipo_atendimento_w		= 1) and
		(ie_status_acerto_p		= 2) then
		begin
		gerar_longa_permanencia_conv(nr_atendimento_p,nr_interno_conta_p,cd_proc_long_perm_w,ie_orig_proc_long_perm_w,nm_usuario_p);
		end;
	end if;*/
	if (ie_status_acerto_p = 2) then
		CALL acerta_diverg_convenio_conta(nr_interno_conta_p);
	end if;

	if (ie_tipo_convenio_w <> 3) then

		if (qt_conta_w > 0) then
			begin
			SELECT * FROM consiste_conta_paciente(nr_interno_conta_p, nr_atendimento_p, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_erro_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_erro_w;
			end;
		end if;
	elsif (ie_fechar_conta_incons_w = 'N') and (ie_tipo_convenio_w = 3) then
		CALL sus_consiste_conta(nr_interno_conta_p, nr_atendimento_p, nm_usuario_p);

		select	count(*)
		into STRICT	qt_reg_sus_inco_w
		from 	sus_consistencia_conta s,
			sus_inconsistencia i
		where 	s.nr_interno_conta	= nr_interno_conta_p
		and	i.nr_sequencia		= s.nr_seq_inconsistencia
		and	coalesce(Sus_Obter_Se_Consiste_Estab(i.nr_sequencia, s.cd_estabelecimento,'C'),i.ie_consiste) = 'S'
		and	coalesce(Sus_Obter_Se_Consiste_Estab(i.nr_sequencia, s.cd_estabelecimento,'L'),i.ie_permite_liberar) = 'N';

		if (qt_reg_sus_inco_w	> 0) then
			ds_erro_w := WHEB_MENSAGEM_PCK.get_texto(280693) || to_char(nr_interno_conta_p) || WHEB_MENSAGEM_PCK.get_texto(280694);
		end if;
	end if;

	if	((ie_fecha_conta_w = 'S') or (ie_fechar_conta_incons_w = 'S')) or (ie_status_acerto_p 	<> 2 ) or (ie_tipo_convenio_w	= 3  ) then

		if (qt_aih_unif_w		> 0) then
			begin
			select	coalesce(max(ie_gera_longa_perm),'N')
			into STRICT	ie_gera_longa_perm_unif_w
			from	sus_parametros_aih
			where	cd_estabelecimento	= cd_estabelecimento_w;

			select	max(ie_status_acerto)
			into STRICT	ie_status_acerto_w
			from	conta_paciente
			where	nr_interno_conta = nr_interno_conta_p;

			if (ie_gera_longa_perm_unif_w	= 'S') and (ie_status_acerto_w = 1) then
				CALL sus_gerar_longa_permanencia(nr_atendimento_p, nr_interno_conta_p, nm_usuario_p);
			end if;

			end;
		end if;

		select 	coalesce(sum(vl_item),0)
		into STRICT	vl_conta_w
		from	conta_paciente_consiste_v
		where	nr_interno_conta = nr_interno_conta_p
		and	coalesce(cd_motivo_exc_conta::text, '') = ''
		and	coalesce(nr_seq_proc_pacote,nr_sequencia) = nr_sequencia;

		update conta_paciente
		set 	ie_status_acerto	= ie_status_acerto_p,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p,
			vl_conta		= vl_conta_w
		where nr_interno_conta 		= nr_interno_conta_p
		and ie_status_acerto		<> ie_status_acerto_p;

		if (qt_conta_w > 0) then
			begin
			SELECT * FROM consiste_conta_paciente(nr_interno_conta_p, nr_atendimento_p, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_erro_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_erro_w;
			end;
		end if;

	end if;

	CALL gerar_conta_paciente_guia(nr_interno_conta_p, ie_status_acerto_p);

	/* Consiste valor dos itens com valor da conta_paciente_guia */

	select  coalesce(sum(vl_item),0)
	into STRICT 	vl_item_w
	from 	conta_paciente_consiste_v
	where 	nr_interno_conta	= nr_interno_conta_p
	and	nr_sequencia	<> coalesce(nr_seq_proc_pacote, 0)
	and	((ie_tipo_convenio_w <> 3) or (ie_proc_mat = 1))
	and	coalesce(cd_motivo_exc_conta::text, '') = '';

	select     coalesce(sum(vl_guia),0)
	into STRICT vl_guia_w
	from conta_paciente_guia
	where nr_interno_conta	= nr_interno_conta_p;

	if (vl_item_w <> vl_guia_w) then
		ds_erro_w		:= ds_erro_w || '8 ';
		ie_fecha_conta_w	:= 'N';
	end if;

	select	count(*)
	into STRICT	vl_guia_w
	from (
		SELECT	cd_autorizacao,
			coalesce(sum(vl_guia),0)
		from conta_paciente_guia
		where nr_interno_conta	= nr_interno_conta_p
		group by cd_autorizacao
		having coalesce(sum(vl_guia),0) < 0) alias5;

	if (vl_guia_w > 0) then
		ds_erro_w		:= ds_erro_w || '14 ';
		ie_fecha_conta_w	:= 'N';
	end if;

	if (ie_fecha_conta_w = 'S') and (ie_status_acerto_p = 2) then
		CALL atualizar_tabela_custo_conta(nr_interno_conta_p);
		CALL atualizar_espec_medic_conta(nr_interno_conta_p);
		CALL atualizar_especialidade_conta(nr_interno_conta_p);
		CALL atualizar_funcao_medic_conta(nr_interno_conta_p);
		CALL atualizar_espec_conta(nr_interno_conta_p);
		CALL atualiza_codigo_convenio(nr_interno_conta_p,null);
		CALL atualizar_conta_contabil_conta(nr_interno_conta_p, 'S');
		if (ie_tipo_convenio_w = 3) then
			CALL atualizar_classif_sus(nr_interno_conta_p);
		end if;

		if (coalesce(ie_complexidade_w::text, '') = '') then
			select obter_complexidade_conta(nr_interno_conta_p)
			into STRICT	ie_complexidade_w;
		end if;

		select nextval('conta_paciente_seq2')
		into STRICT nr_seq_apresent_w
		;

		select   obter_valor_conv_estab(cd_convenio_w,cd_estabelecimento_w,'IE_REPASSE_PROC'),
			 obter_valor_conv_estab(cd_convenio_w,cd_estabelecimento_w,'IE_REPASSE_MAT')
		into STRICT	 ie_repasse_proc_conv_w,
			 ie_repasse_mat_conv_w
		;

		ie_repasse_w := 'N';
		if ((ie_repasse_proc_conv_w = 'C') or (ie_repasse_mat_conv_w = 'C')) then
			ie_repasse_w := 'S';
		end if;

		if ((coalesce(ie_repasse_proc_conv_w::text, '') = '') or (coalesce(ie_repasse_mat_conv_w::text, '') = '')) then
			select coalesce(max('S'),'N')
			into STRICT ie_repasse_w
			from parametro_faturamento
			where cd_estabelecimento = cd_estabelecimento_w
			  and ((ie_repasse_mat = 'C') or (ie_repasse_proc = 'C'));
		end if;


		/* Atualizar total e desconto - Início */

		/*select 		nvl(sum(vl_item),0)
		into		vl_conta_w
		from		conta_paciente_v
		where		nr_interno_conta = nr_interno_conta_p
		and		cd_motivo_exc_conta is null
		and		nvl(nr_seq_proc_pacote,nr_sequencia) = nr_sequencia;*/
		/*select 	sum(vl_procedimento + vl_material)
		into	vl_conta_w
		from	conta_paciente_resumo
		where	nr_interno_conta	= nr_interno_conta_p;*/
		select	sum(vl_desconto)
		into STRICT		vl_desconto_w
		from (SELECT coalesce(sum(b.vl_procedimento),0) vl_desconto
			from proc_paciente_valor b,
			     procedimento_paciente a
			where a.nr_sequencia     = b.nr_seq_procedimento
			  and b.ie_tipo_valor    = 3
			  and a.nr_interno_conta = nr_interno_conta_p
			  and a.nr_sequencia <> coalesce(a.nr_seq_proc_pacote,0)
			
union all

			SELECT coalesce(sum(b.vl_material),0)
			from	mat_atend_paciente_valor b,
				material_atend_paciente a
			where a.nr_sequencia     = b.nr_seq_material
			  and b.ie_tipo_valor    = 3
			  and a.nr_interno_conta = nr_interno_conta_p) alias6;

		/* Fim */

		if (ie_repasse_w = 'S') then
			CALL gerar_conta_paciente_repasse(nr_interno_conta_p, nm_usuario_p);


		/* Elemar em 11/03/04 - retirar inconsistência 3,4 e 5 das contas fechadas */

		update conta_paciente
		set ds_inconsistencia =  retirar_inconsistencia(retirar_inconsistencia(retirar_inconsistencia(ds_inconsistencia,'3'),'4'),'5')
		where nr_atendimento = nr_atendimento_p
		  and not exists (	SELECT 1 from conta_paciente
					where nr_atendimento = nr_atendimento_p
					  and ie_status_acerto = 1);
		end if;
	end if;

	if (qt_conta_w > 0) then
		begin
		CALL atualiza_setor_receita(nr_interno_conta_p);
		end;
	end if;

	select	obter_clinica_alta(nr_atendimento_p)
	into STRICT	ie_clinica_alta_w
	;
	update	atendimento_paciente
	set ie_clinica_alta		= ie_clinica_alta_w
	where	nr_atendimento	= nr_atendimento_p;

	update conta_paciente
	set ds_inconsistencia 		= ds_erro_w,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		ie_complexidade		= ie_complexidade_w,
		nr_seq_apresent		= nr_seq_apresent_w,
		--vl_conta 		= vl_conta_w,
		vl_desconto 		= vl_desconto_w
	where nr_interno_conta = nr_interno_conta_p;

	-- Verificar se há  itens que estão duplicados na tabela mat_atend_paciente_valor com ie_tipo_valor = 3 (Desconto)
	select 	count(*)
	into STRICT	qt_desc_conta_w
	from 	conta_paciente_desconto
	where 	nr_interno_conta = nr_interno_conta_p;

	if (qt_desc_conta_w = 1) then

		open c01;
		loop
		fetch c01 into
			qt_reg_w,
			nr_seq_mat_desc_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin

			select 	max(nr_sequencia)
			into STRICT	nr_seq_desc_w
			from 	conta_paciente_desconto
			where 	nr_interno_conta = nr_interno_conta_p;

			select 	count(*)
			into STRICT	qt_exclusao_w
			from 	mat_atend_paciente_valor
			where 	nr_seq_material = nr_seq_mat_desc_w
			and 	coalesce(nr_seq_desconto,0) <> nr_seq_desc_w
			and 	ie_tipo_valor = 3;

			if (qt_reg_w <> qt_exclusao_w) then -- Verificar para não excluir todos os registros
				delete from mat_atend_paciente_valor
				where nr_seq_material = nr_seq_mat_desc_w
				and coalesce(nr_seq_desconto,0) <> nr_seq_desc_w
				and ie_tipo_valor = 3;

			end if;

			end;
		end loop;
		close c01;

		-- Verificar se há  itens que estão duplicados na tabela procedimento_paciente_valor com ie_tipo_valor = 3 (Desconto)
		qt_reg_w	:= '';
		open c02;
		loop
		fetch c02 into
			qt_reg_w,
			nr_seq_proc_desc_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin

			select 	max(nr_sequencia)
			into STRICT	nr_seq_desc_w
			from 	conta_paciente_desconto
			where 	nr_interno_conta = nr_interno_conta_p;

			select 	count(*)
			into STRICT	qt_exclusao_w
			from 	proc_paciente_valor
			where 	nr_seq_procedimento = nr_seq_proc_desc_w
			and 	coalesce(nr_seq_desconto,0) <> nr_seq_desc_w
			and 	ie_tipo_valor = 3;

			if (qt_reg_w <> qt_exclusao_w) then -- Verificar para não excluir todos os registros
				delete 	FROM proc_paciente_valor
				where 	nr_seq_procedimento = nr_seq_proc_desc_w
				and 	coalesce(nr_seq_desconto,0) <> nr_seq_desc_w
				and 	ie_tipo_valor = 3;

			end if;

			end;
		end loop;
		close c02;

	end if;

	if (qt_conta_w > 0) then
		begin
		CALL atualizar_resumo_conta(nr_interno_conta_p, ie_status_acerto_p);
		end;
	end if;

	select	max(ie_status_acerto)
	into STRICT	ie_status_acerto_w
	from	conta_paciente
	where	nr_interno_conta = nr_interno_conta_p;

	if (coalesce(ds_erro_w,'X') <> 'X') and (ie_status_acerto_w = 2) and (ie_fechar_conta_incons_w = 'N') and (ie_fecha_conta_w = 'N') then
		update	conta_paciente
		set	ie_status_acerto	= 1,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_interno_conta	= nr_interno_conta_p;
	end if;

	ds_erro_p 		:= ds_erro_w;
	ie_fecha_conta_p	:= ie_fecha_conta_w;

	commit;

	end;


begin
ie_fechar_conta_incons_w	:= coalesce(obter_valor_param_usuario(1121, 22, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');
ie_fechar_atendimento_w		:= coalesce(obter_valor_param_usuario(1121, 26, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),'N');

/*	Fechar conta	*/

eis_fechar_conta_paciente(nr_interno_conta_p, nr_atendimento_p, ie_status_acerto_p, nm_usuario_p, ds_erro_conta_w, ie_fecha_conta_out_w);

select 	count(*)
into STRICT	qt_regra_etapa_conta_w
from 	fatur_etapa_alta
where 	ie_situacao = 'A'
and 	ie_evento = 'C';

select	max(ie_status_acerto)
into STRICT	ie_status_acerto_ww
from	conta_paciente
where	nr_interno_conta = nr_interno_conta_p;

 if (qt_regra_etapa_conta_w > 0) and (ie_status_acerto_ww = 2)  then
		CALL gerar_etapa_fechamento_conta(nr_interno_conta_p, nm_usuario_p);
end if;

/*	Finalizar atendimento	*/

if (ie_fechar_atendimento_w = 'S') then
	begin

	begin
	cd_estab_usuario_w := coalesce(wheb_usuario_pck.get_cd_estabelecimento,0);
	exception
	when others then
		cd_estab_usuario_w := 0;
	end;

	select	count(*)
	into STRICT	nr_contas_w
	from	conta_paciente
	where	nr_atendimento = nr_atendimento_p;

	ie_recalcular_sus_w	:= coalesce(Obter_Valor_Param_Usuario(1123,42,Obter_Perfil_Ativo,nm_usuario_p,cd_estab_usuario_w),'N');
	ie_insere_prot_bpa_w	:= coalesce(Obter_Valor_Param_Usuario(1125,130,Obter_Perfil_Ativo,nm_usuario_p,cd_estab_usuario_w),'N');

	select coalesce(max(b.ie_censo_diario),'S'),
		coalesce(max(a.dt_alta), null),
		coalesce(max(b.ie_gera_novo_atend),'N'),
		max(a.ie_tipo_atendimento)
	into STRICT	ie_censo_diario_w,
		dt_alta_w,
		ie_gera_novo_atend_w,
		ie_tipo_atendimento_w
	from	motivo_alta b,
		atendimento_paciente a
	where	a.cd_motivo_alta = b.cd_motivo_alta
	and	a.nr_atendimento = nr_atendimento_p;

	if (nr_contas_w = 0)		and (ie_censo_diario_w = 'S')	then
		ie_fecha_geral_w	:= 'N';
	end if;

	/* Elemar em 11/03/04 */

	if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then
		update conta_paciente
		set ds_inconsistencia = retirar_inconsistencia_lista(ds_inconsistencia,'1')
		where nr_atendimento = nr_atendimento_p;
	end if;

	open C01;
	loop
	fetch C01 into
		nr_interno_conta_w,
		ie_status_acerto_w,
		ds_inconsistencia_w,
		ie_tipo_convenio_w,
		cd_estabelecimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		ie_fecha_conta_SUS_w := 'S';
		if (ie_status_acerto_w = 1) then
			if (ie_tipo_convenio_w	= 3) then
				select	count(*)
				into STRICT	qt_proc_sus_unif_w
				from	procedimento_paciente
				where	nr_interno_conta	= nr_interno_conta_w
				and	ie_origem_proced	= 7;

				if (qt_proc_sus_unif_w	> 0) then
					begin

					ie_vincular_laudos_aih_w := coalesce(obter_valor_param_usuario(1123,180,obter_perfil_ativo, nm_usuario_p, 0),'N');

					if (ie_vincular_laudos_aih_w = 'S') then
						CALL sus_vincular_laudo_conta(nr_interno_conta_w,nm_usuario_p);
					end if;

					end;
				end if;

				CALL sus_consiste_conta(nr_interno_conta_w, nr_atendimento_p, nm_usuario_p);

				select	count(*)
				into STRICT	qt_reg_sus_inco_w
				from 	sus_consistencia_conta s,
					sus_inconsistencia i
				where 	s.nr_interno_conta	= nr_interno_conta_w
				and	i.nr_sequencia		= s.nr_seq_inconsistencia
				and	coalesce(Sus_Obter_Se_Consiste_Estab(i.nr_sequencia, s.cd_estabelecimento,'C'),i.ie_consiste) = 'S'
				and	coalesce(Sus_Obter_Se_Consiste_Estab(i.nr_sequencia, s.cd_estabelecimento,'L'),i.ie_permite_liberar) = 'N';

				if (qt_reg_sus_inco_w	> 0) and (ie_gera_novo_atend_w = 'N') then /* Rafael em 8/2/7 OS82321 incluí o teste do "ie_gera_novo_atend_w" */
					ds_erro_w		:= WHEB_MENSAGEM_PCK.get_texto(280695) || to_char(nr_interno_conta_w) || WHEB_MENSAGEM_PCK.get_texto(280696);
					ie_fecha_conta_SUS_w 	:= 'N';
				end if;

			end if;
			SELECT * FROM consiste_conta_paciente(
				nr_interno_conta_w, nr_atendimento_p, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w;
		else	/* Edgar 17/12/2004, OS 13532, não estava retirando a inconsistencia 5 */
		SELECT * FROM consiste_conta_paciente(
				nr_interno_conta_w, nr_atendimento_p, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w;

			update	conta_paciente
			set	ds_inconsistencia	= retirar_inconsistencia_lista(ds_inconsistencia_w,'5')
			where	nr_interno_conta	= nr_interno_conta_w;
			ds_inconsistencia_w		:= retirar_inconsistencia_lista(ds_inconsistencia_w,'5');
		end if;

		/* Elemar em 11/03/04 incluí select e teste no if abaixo*/

		select OBTER_FECHAR_CTA_ATEND(nr_interno_conta_w)
		into STRICT ie_fechar_cta_atend_w
		;

		if	--(ie_fechar_contas_p = 'S') and
			(ie_status_acerto_w = 1) and
			(((ie_fecha_conta_w = 'S') and (substr(ie_fechar_cta_atend_w,1,1) = 'S') and (ie_fecha_conta_SUS_w = 'S')) or (ie_fechar_conta_incons_w = 'S')) then

			/*ie_etapa_conta_w	:= Obter_Se_Conta_Exige_Etapa(nr_interno_conta_w,cd_estabelecimento_w);
			if	(ie_etapa_conta_w	= 'S') and
				(obter_funcao_Ativa	= 67) then
				wheb_mensagem_pck.exibir_mensagem_abort(191038,'NR_INTERNO_CONTA='||nr_interno_conta_w);
				--Este convênio exige a informação de etapas da conta!.'||chr(13)||'Conta : '||nr_interno_conta_w
			end if;*/
			/*	Fechar conta	*/

			eis_fechar_conta_paciente(nr_interno_conta_w, nr_atendimento_p, 2, nm_usuario_p, ds_inconsistencia_w, ie_fecha_conta_out_w);

			/*if	(Obter_Funcao_Ativa	= 1123) and
				(ie_recalcular_sus_w	= 'S') then
				recalcular_conta_paciente(nr_interno_conta_w,'Wheb');
			end if;*/
			select	max(ie_status_acerto)
			into STRICT	ie_status_acerto_w
			from	conta_paciente
			where	nr_interno_conta = nr_interno_conta_w;

			 if (qt_regra_etapa_conta_w > 0) and (ie_status_acerto_w = 2)  then
					CALL gerar_etapa_fechamento_conta(nr_interno_conta_w, nm_usuario_p);
			end if;

			if (coalesce(ie_status_acerto_w,0) <> 0) then
				SELECT * FROM consiste_conta_paciente(
					nr_interno_conta_w, nr_atendimento_p, ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w) INTO STRICT ie_fecha_atendimento_w, ie_fecha_conta_w, qt_processo_pendente_w, ds_inconsistencia_w;

				if (ie_insere_prot_bpa_w = 'S') and (ie_tipo_convenio_w = 3) and (ie_tipo_atendimento_w <> 1) then
					begin

					select	count(*)
					into STRICT	qt_apac_w
					from	conta_paciente a
					where	a.nr_interno_conta = nr_interno_conta_w
					and (exists (SELECT	1
							from	sus_apac_unif s
							where	s.nr_interno_conta = a.nr_interno_conta) or
						exists (select	1
							from	procedimento_paciente p
							where	p.nr_interno_conta = a.nr_interno_conta
							and	sus_obter_tiporeg_proc(p.cd_procedimento,p.ie_origem_proced,'C',16) = 6));

					if (qt_apac_w = 0) then
						begin
						ds_erro_fpo_w := sus_insere_protocolo(nr_interno_conta_w, nm_usuario_p, cd_estabelecimento_w, 0, 'BPA', 'N', ds_erro_fpo_w);
						end;
					end if;

					end;
				end if;
			end if;
		end if;

		if (ie_status_acerto_w = 1) or
			(((ie_fecha_atendimento_w = 'N') or
			(ie_fecha_Conta_w = 'N' AND ie_status_acerto_w = 1) or (substr(ie_fechar_cta_atend_w,2,1) = 'N') or (ie_fecha_conta_SUS_w = 'N')) and (ie_fechar_conta_incons_w = 'N')) then
			ie_fecha_geral_w	:= 'N';
		end if;

		if (qt_reg_sus_inco_w	= 0) then
			ds_erro_w			:= substr(ds_erro_w || ds_inconsistencia_w,1,255);
		end if;

		end;
	end loop;
	close C01;

	if (ie_fecha_geral_w = 'S') then
		update 	atendimento_paciente
		set	dt_fim_conta 	= clock_timestamp(),
			ie_fim_conta	= 'F',
			nm_usuario	= nm_usuario_p
		where 	nr_atendimento 	= nr_atendimento_p;

		CALL gerar_indic_clinico_atend(nr_atendimento_p, null, nm_usuario_p);
	else
		update 	atendimento_paciente
		set	dt_fim_conta   	 = NULL,
			ie_fim_conta	= CASE WHEN qt_processo_pendente_w=0 THEN  'A'  ELSE 'P' END ,
			nm_usuario	= nm_usuario_p
		where 	nr_atendimento 	= nr_atendimento_p;
	end if;

	begin
	CALL gerar_etapa_final_atendimento(nr_atendimento_p,nm_usuario_p);
	exception
		when others then
		cd_convenio_w:= 0;
	end;

	end;
end if;

ds_erro_p 		:= ds_erro_conta_w;
ie_fecha_conta_p	:= ie_fecha_conta_out_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eis_fechar_conta_atendimento ( nr_interno_conta_p bigint, nr_atendimento_p bigint, ie_status_acerto_p bigint, nm_usuario_p text, ds_erro_p INOUT text, ie_fecha_conta_p INOUT text) FROM PUBLIC;

