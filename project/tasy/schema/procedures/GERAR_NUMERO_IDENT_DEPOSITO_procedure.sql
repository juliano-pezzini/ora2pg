-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_numero_ident_deposito ( nr_seq_deposito_p bigint, ie_commit_p text, nm_usuario_p text) AS $body$
DECLARE


peso_string_w			varchar(255);
nr_ident_w			varchar(30);
nr_identificacao_w		varchar(20)	:= null;
cd_conta_w			banco_estabelecimento.cd_conta%type;
nr_deposito_w			varchar(15);
cd_cgc_w			varchar(14);
ds_peso_w			varchar(10);
cd_pessoa_fisica_w		varchar(10);
ie_digito_w			varchar(2)	:= null;
ie_identificacao_geral_w	varchar(1);
qt_tamanho_w			bigint;
vl_soma_w			bigint;
resto_divisao_w			bigint;
nr_seq_conta_banco_w		bigint;
qt_soma_w			bigint	:= 0;
qt_resultado_w			bigint;
qt_pessoas_w			bigint	:= 0;
nr_sequencial_w			integer;
cd_banco_w			smallint;
mult_1_w			smallint;
mult_2_w			smallint;
vl_param_tipo_dominio_w varchar(255);
cd_tipo_portador_w titulo_receber.cd_tipo_portador%type;
ie_titulo_cobr_w		parametro_deposito_ident.ie_identifica_titulo_cobr%type;
ie_consistir_tipo_portador_w varchar(1);
cd_estabelecimento_w smallint;
nr_titulo_w  varchar(15);
lista_de_titulos_w varchar(4000);
qt_titulos_w			bigint;

C01 CURSOR FOR
	SELECT	a.cd_pessoa_fisica,
		a.cd_cgc,
		a.cd_tipo_portador,
		a.nr_titulo
	from	titulo_receber		a,
		deposito_ident_titulo	b
	where	b.nr_titulo		= a.nr_titulo
	and	b.nr_seq_deposito	= nr_seq_deposito_p
	group by
		a.cd_pessoa_fisica,
		a.cd_cgc,
		a.cd_tipo_portador,
		a.nr_titulo;
BEGIN


select cd_estabelecimento
into STRICT cd_estabelecimento_w
from deposito_identificado b
where b.nr_sequencia	= nr_seq_deposito_p;

vl_param_tipo_dominio_w := Obter_Param_Usuario(9054, 13, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, vl_param_tipo_dominio_w);

if (nr_seq_deposito_p IS NOT NULL AND nr_seq_deposito_p::text <> '') then
	CALL atualiza_valor_dep_ident(nr_seq_deposito_p, obter_estabelecimento_ativo, nm_usuario_p, ie_commit_p);
	select	b.cd_banco,
		a.nr_seq_conta_banco
	into STRICT	cd_banco_w,
		nr_seq_conta_banco_w
	from	banco_estabelecimento b,
		deposito_identificado a
	where	a.nr_seq_conta_banco	= b.nr_sequencia
	and	a.nr_sequencia		= nr_seq_deposito_p;

	begin
	select	coalesce(ie_identificacao_geral,'N')
	into STRICT	ie_identificacao_geral_w
	from	parametro_deposito_ident;
	exception
	when others then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(126354);
	end;

	/* Banco Santander */

	if (cd_banco_w in (33,34)) then
		if (ie_identificacao_geral_w = 'N') then
			select	max(a.nr_ident_numerico)
			into STRICT	nr_ident_w
			from	deposito_identificado a
			where	a.nr_seq_conta_banco	= nr_seq_conta_banco_w
			and	a.ie_status		<> 'C';
		else
			select	max(a.nr_ident_numerico)
			into STRICT	nr_ident_w
			from	deposito_identificado a
			where	a.ie_status		<> 'C';
		end if;

		nr_sequencial_w		:= coalesce(nr_ident_w,0) + 1;
		nr_identificacao_w	:= lpad(nr_sequencial_w,5,'0');

		/* Calcular digito */

		ds_peso_w	:= '65432';
		qt_tamanho_w	:= length(nr_identificacao_w);

		for i in 1..qt_tamanho_w loop
			mult_1_w	:= (substr(nr_identificacao_w,i,1))::numeric;
			mult_2_w	:= (substr(ds_peso_w,i,1))::numeric;
			qt_resultado_w	:= (mult_1_w * mult_2_w);
			qt_soma_w	:= qt_soma_w + qt_resultado_w;
		end loop;

		ie_digito_w	:= to_char(mod(qt_soma_w,11));

		if ((ie_digito_w)::numeric  > 9) then
			ie_digito_w	:= '0';
		end if;
	end if;

	/* Banco do Brasil */

	if (cd_banco_w = 1) then
		if (ie_identificacao_geral_w = 'N') then
			select	max(a.nr_ident_numerico)
			into STRICT	nr_ident_w
			from	deposito_identificado a
			where	a.nr_seq_conta_banco	= nr_seq_conta_banco_w
			and	a.ie_status		<> 'C';
		else
			select	max(a.nr_ident_numerico)
			into STRICT	nr_ident_w
			from	deposito_identificado a
			where	a.ie_status		<> 'C';
		end if;

		nr_sequencial_w		:= coalesce(nr_ident_w,0) + 1;
		nr_identificacao_w	:= lpad(nr_sequencial_w,7,'0');

		select	somente_numero(b.cd_conta)
		into STRICT	cd_conta_w
		from	banco_estabelecimento b,
			deposito_identificado a
		where	a.nr_seq_conta_banco	= b.nr_sequencia
		and	a.nr_sequencia		= nr_seq_deposito_p;

		cd_conta_w	:= substr(lpad(cd_conta_w,15,'0'),8,8);
		nr_deposito_w	:= nr_identificacao_w || cd_conta_w;
		ie_digito_w	:= lpad(((nr_deposito_w)::numeric  mod 97),2,'0');
	end if;

	/* Banco Bradesco */

	if (cd_banco_w = 237) then
		if (ie_identificacao_geral_w = 'N') then
			select	max(a.nr_ident_numerico)
			into STRICT	nr_ident_w
			from	deposito_identificado a
			where	a.nr_seq_conta_banco	= nr_seq_conta_banco_w
			and	a.ie_status		<> 'C';
		else
			select	max(a.nr_ident_numerico)
			into STRICT	nr_ident_w
			from	deposito_identificado a
			where	a.ie_status		<> 'C';
		end if;

		nr_sequencial_w		:= coalesce(nr_ident_w,0) + 1;
		nr_identificacao_w	:= lpad(nr_sequencial_w,12,'0');
		qt_tamanho_w		:= length(nr_identificacao_w);
		peso_string_w		:= '765432765432';
		vl_soma_w		:= 0;
		resto_divisao_w		:= 0;

		for i in 1..qt_tamanho_w loop
			vl_soma_w	:= vl_soma_w + ((substr(nr_identificacao_w,i,1))::numeric  * (substr(peso_string_w,i,1))::numeric );
		end loop;

		nr_identificacao_w	:= lpad(nr_sequencial_w,7,'0');
		resto_divisao_w		:= (vl_soma_w mod 11);

		if (resto_divisao_w = 10) then
			ie_digito_w	:= 1;
		elsif (resto_divisao_w = 0) or (resto_divisao_w = 1) then
			ie_digito_w	:= 0;
		else
			ie_digito_w	:= 11 - resto_divisao_w;
		end if;
	end if;

	/* Banco do Itaú */

	if (cd_banco_w = 341) then
		if (ie_identificacao_geral_w = 'N') then
			select	max(a.nr_ident_numerico)
			into STRICT	nr_ident_w
			from	deposito_identificado a
			where	a.nr_seq_conta_banco	= nr_seq_conta_banco_w
			and	a.ie_status		<> 'C';
		else
			select	max(a.nr_ident_numerico)
			into STRICT	nr_ident_w
			from	deposito_identificado a
			where	a.ie_status		<> 'C';
		end if;

		nr_sequencial_w		:= coalesce(nr_ident_w,0) + 1;
		nr_identificacao_w	:= lpad(nr_sequencial_w,7,'0');

		select	b.cd_conta
		into STRICT	cd_conta_w
		from	banco_estabelecimento b,
			deposito_identificado a
		where	a.nr_seq_conta_banco	= b.nr_sequencia
		and	a.nr_sequencia		= nr_seq_deposito_p;

		cd_conta_w	:= substr(lpad(cd_conta_w,15,'0'),8,8);
		nr_deposito_w	:= nr_identificacao_w || cd_conta_w;
		ie_digito_w	:= lpad(((nr_deposito_w)::numeric  mod 97),2,'0');
	end if;

	/* Faz update com o numero e digito de identificacao gerados */

	if (nr_identificacao_w IS NOT NULL AND nr_identificacao_w::text <> '') then
		qt_pessoas_w	:= 0;
		qt_titulos_w	:= 0;

		open C01;
		loop
		fetch C01 into
			cd_pessoa_fisica_w,
			cd_cgc_w,
			cd_tipo_portador_w,
			nr_titulo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			qt_pessoas_w	:= qt_pessoas_w	+ 1;
			end;


		select	max(a.IE_IDENTIFICA_TITULO_COBR)
		into STRICT	ie_titulo_cobr_w
		from	parametro_deposito_ident a
		where	cd_estabelecimento = cd_estabelecimento_w;


	if (coalesce(ie_titulo_cobr_w,'N') = 'S' ) then	--Verifica se o campo "Permitir identificar título em cobrança" esta checado.
		if (vl_param_tipo_dominio_w IS NOT NULL AND vl_param_tipo_dominio_w::text <> '') then --Verifica se o parametro 13 é nulo
			select 	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_consistir_tipo_portador_w
			from	valor_dominio a
			where (obter_se_contido_char(a.vl_dominio, Elimina_Caracter(vl_param_tipo_dominio_w,' ')) = 'S')
			and		a.cd_dominio	= 703
			and		a.vl_dominio	= cd_tipo_portador_w;

				if (coalesce(ie_consistir_tipo_portador_w,'N') = 'S') then --Verifica se o tipo portador do titulo esta no parametro 13, para não ser gerado
					lista_de_titulos_w := lista_de_titulos_w || nr_titulo_w || ',';
					qt_titulos_w := qt_titulos_w + 1;

				end if;

		end if;
	end if;

end loop;
	close C01;

		if (lista_de_titulos_w IS NOT NULL AND lista_de_titulos_w::text <> '') then
			if (qt_titulos_w = 1) then

				CALL wheb_mensagem_pck.exibir_mensagem_abort(396959, 'NM_TITULO=' || lista_de_titulos_w); --Se um dos titulos estiver em cobrança não gera o numero de identificação
			elsif (qt_titulos_w > 1) then

				CALL wheb_mensagem_pck.exibir_mensagem_abort(396976, 'NM_TITULO=' || lista_de_titulos_w);

			end if;

		end if;

		update	deposito_identificado
		set	ie_status		= 'AD',
			nr_identificacao	= nr_identificacao_w,
			nr_ident_numerico	= somente_numero(nr_identificacao_w),
			ie_digito_ident		= ie_digito_w,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			dt_identificacao	= clock_timestamp(),
			cd_pessoa_fisica	= CASE WHEN qt_pessoas_w=1 THEN  cd_pessoa_fisica_w  ELSE cd_pessoa_fisica END ,
			cd_cgc			= CASE WHEN qt_pessoas_w=1 THEN  cd_cgc_w  ELSE cd_cgc END
		where	nr_sequencia		= nr_seq_deposito_p;
	end if;
end if;

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_numero_ident_deposito ( nr_seq_deposito_p bigint, ie_commit_p text, nm_usuario_p text) FROM PUBLIC;

