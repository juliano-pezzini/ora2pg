-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE same_excluir_conta_pront ( nr_interno_conta_p conta_paciente.nr_interno_conta%type, nr_atendimento_p atendimento_paciente.nr_atendimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

 
ie_agrupar_volume_w	varchar(1);
nr_seq_volume_w		bigint;
nr_seq_prontuario_w	same_prontuario.nr_sequencia%type;
nr_seq_local_w		same_local.nr_sequencia%type;
nr_seq_caixa_w		same_caixa.nr_sequencia%type;
nr_seq_agrup_w		same_prontuario.nr_sequencia%type;
nr_seq_volume_ww	bigint;
qt_volume_atend_w	bigint;
qt_registro_w		bigint;

dt_inicio_origem_w	timestamp;
dt_fim_origem_w		timestamp;
dt_inicio_dest_w	timestamp;
dt_fim_dest_w		timestamp;


BEGIN 
 
select	count(*) 
into STRICT	qt_registro_w 
from	same_prontuario a 
where	a.nr_interno_conta = nr_interno_conta_p;
 
if (qt_registro_w > 0) then 
 
	/*[246] Agrupar volumes que possuem a conta paciente vinculada excluída*/
 
	ie_agrupar_volume_w := obter_param_usuario(941, 246, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_agrupar_volume_w);
	 
	/*Dasabilita o commit para o usuário logado pois essa procedure é chamda pela trigger conta_paciente_delete*/
 
	CALL wheb_usuario_pck.set_ie_commit('N');
	 
	select	count(1) 
	into STRICT	qt_volume_atend_w 
	from	same_prontuario a 
	where	a.nr_atendimento = nr_atendimento_p 
	and	a.ie_status not in (2, 6);
 
	select	max(a.nr_sequencia), 
		max(a.nr_seq_local), 
		max(a.nr_seq_caixa), 
		max(a.nr_seq_volume), 
		max(a.dt_periodo_inicial), 
		max(a.dt_periodo_final) 
	into STRICT	nr_seq_prontuario_w, 
		nr_seq_local_w, 
		nr_seq_caixa_w, 
		nr_seq_volume_w, 
		dt_inicio_origem_w, 
		dt_fim_origem_w 
	from	same_prontuario a 
	where	a.nr_interno_conta = nr_interno_conta_p;
	 
	if (qt_volume_atend_w > 1) and (ie_agrupar_volume_w = 'S') then 
		 
		/* Se não for o último volume agrupa busca próximo prontuário com volume maior para agrupar */
 
		nr_seq_volume_ww := nr_seq_volume_w + 1;
 
		while coalesce(nr_seq_agrup_w::text, '') = '' and nr_seq_volume_ww <= qt_volume_atend_w loop 
			begin 
 
			select	max(a.nr_sequencia), 
					max(a.dt_periodo_inicial), 
					max(a.dt_periodo_final) 
			into STRICT	nr_seq_agrup_w, 
					dt_inicio_dest_w, 
					dt_fim_dest_w 
			from	same_prontuario a 
			where	a.nr_sequencia <> nr_seq_prontuario_w 
			and (a.nr_seq_volume = nr_seq_volume_ww 
				or a.nr_seq_volume = nr_seq_volume_w) --Tratamento feito caso tenha um prontuário com o mesmo volume. 
			and	a.nr_atendimento = nr_atendimento_p 
			and	a.ie_status not in (2, 6);
 
			nr_seq_volume_ww := nr_seq_volume_ww + 1;
 
			end;
		end loop;
 
		/* Se não encontrou prontuário com volume maior buscar o prontuário anterior.*/
 
		if (coalesce(nr_seq_agrup_w::text, '') = '') then 
		 
			nr_seq_volume_ww := nr_seq_volume_w - 1;
 
			while coalesce(nr_seq_agrup_w::text, '') = '' and nr_seq_volume_ww >= 0 loop 
				begin 
		 
				select	max(a.nr_sequencia), 
						max(a.dt_periodo_inicial), 
						max(a.dt_periodo_final) 
				into STRICT	nr_seq_agrup_w, 
						dt_inicio_dest_w, 
						dt_fim_dest_w 
				from	same_prontuario a 
				where	a.nr_sequencia <> nr_seq_prontuario_w 
				and (a.nr_seq_volume = nr_seq_volume_ww 
					or a.nr_seq_volume = nr_seq_volume_w --Tratamento feito caso tenha um prontuário com o mesmo volume. 
					or coalesce(a.nr_seq_volume::text, '') = '') 
				and	a.nr_atendimento = nr_atendimento_p 
				and	a.ie_status not in (2, 6);
		 
				nr_seq_volume_ww := nr_seq_volume_ww - 1;
		 
				end;
			end loop;
			 
		end if;
 
		if (nr_seq_agrup_w IS NOT NULL AND nr_seq_agrup_w::text <> '') then 
		 
			CALL Gestao_Prontuario_Same(	nr_seq_prontuario_w, nm_usuario_p, null, 
						null, nr_seq_local_w, nr_seq_caixa_w, 
						nr_seq_agrup_w, null, 10, 
						null, null);
						 
			if (dt_inicio_origem_w < dt_inicio_dest_w) then 
				dt_inicio_dest_w := dt_inicio_origem_w;
			end if;
 
			if (dt_fim_origem_w > dt_fim_dest_w) then 
				dt_fim_dest_w := dt_fim_origem_w;
			end if;
						 
			update	same_prontuario 
			set		dt_periodo_inicial = dt_inicio_dest_w, 
					dt_periodo_final = dt_fim_dest_w 
			where	nr_sequencia = nr_seq_agrup_w;
						 
		end if;
	end if;
 
	if (nr_seq_prontuario_w > 0) then 
		/*Desvíncular o prontuário da conta excluída se tiver apenas um prontuário*/
 
		update	same_prontuario 
		set	nr_interno_conta  = NULL 
		where	nr_interno_conta = nr_interno_conta_p;
	end if;
 
	/*Nao pode ter commit pois essa procedure é chamada por uma trigger*/
 
	--commit; 
 
	CALL wheb_usuario_pck.set_ie_commit('S');
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE same_excluir_conta_pront ( nr_interno_conta_p conta_paciente.nr_interno_conta%type, nr_atendimento_p atendimento_paciente.nr_atendimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

