-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE insert_material_gen_mims ( productcode_p bigint, formcode_p bigint, packcode_p bigint, cd_estabelecimento_p bigint, cd_material_tasy_p INOUT bigint) AS $body$
DECLARE

  ds_generic_w            varchar(3000);
  ds_volume_w             varchar(30);
  ds_drug_name_w          varchar(3000);
  ds_mims_drug_key        varchar(3000);
  ds_mims_generic_key_w   varchar(3000);
  ds_unitsperpack_w       varchar(200);
  ds_unit_cons_w          varchar(2000);
  ds_unit_convers_w       varchar(200);
  qt_convers_w            double precision;
  pbsinfo_w               varchar(2000);
  cd_subgrupo_material_w  subgrupo_material.cd_subgrupo_material%TYPE;
  cd_classe_material_w    classe_material.cd_classe_material%TYPE;
  qt_sub_grupo_material_w bigint;
  qt_classe_material_w    bigint;
  cd_mat_exists_count_w   smallint := 0;
  cd_material_gen_w       material.cd_material%TYPE;
  ds_orientacao_usuario_w material.ds_orientacao_usuario%TYPE;
  nr_seq_mat_estab_w      material_estab.nr_sequencia%TYPE;
  nr_seq_mat_reacao_w     material_reacao.nr_sequencia%TYPE;
  ds_reacao_w             material_reacao.ds_reacao%TYPE;
  cd_prodcode_w           mims_generic_material.cd_prodcode%TYPE;
  ie_generate_gen_w       varchar(20) := 'N';
  qt_existe_mat_w         bigint;
  material_w              material%ROWTYPE;
  material_gen_w          material%ROWTYPE;
  material_estab_w        material_estab%ROWTYPE;
  material_reacao_w       material_reacao%ROWTYPE;
  mims_generic_material_w mims_generic_material%ROWTYPE;
  mat_conv_unidade_gen_w  material_conversao_unidade%ROWTYPE;
  mat_via_aplic_w         mat_via_aplic%ROWTYPE;
  nr_seq_mat_via_aplic_w  mat_via_aplic.nr_sequencia%TYPE;
  atccode_w               varchar(255);
  ds_use_w                proddat.USE%TYPE;
  ds_pr_w                 proddat.pr%TYPE;
  ds_pc_w                 proddat.pc%TYPE;
  ds_wa_w                 proddat.wa%TYPE;
  ds_ci_w                 proddat.ci%TYPE;
  ds_ar_w                 proddat.ar%TYPE;
  ds_form_w               formdat.FORM%TYPE;
  qt_reg_w                bigint;
  ds_category_a           varchar(1000) := 'Category A'
                                  || Chr(13) 
                                  || Chr(10) 
                                  || 
'Drugs which have been taken by a large number of pregnant women and women of childbearing age '
|| 
'without any proven increase in the frequency of malformations or other direct or indirect harmful '
|| 'effects on the fetus having been observed.';
ds_category_b1          varchar(1000) := 'Category B1'
                                 || Chr(13) 
                                 || Chr(10) 
                                 || 
'Drugs which have been taken by only a limited number of pregnant women and women of ' 
|| 
'childbearing age, without an increase in the frequency of malformation or other direct or indirect '
|| 'harmful effects on the human fetus having been observed.' 
|| Chr(13) 
|| Chr(10) 
|| 
'Studies in animals have not shown evidence of an increased occurrence of fetal damage.' 
;
ds_category_b2          varchar(1000) := 'Category B2'
                                 || Chr(13) 
                                 || Chr(10) 
                                 || 
'Drugs which have been taken by only a limited number of pregnant women and women of ' 
|| 
'childbearing age, without an increase in the frequency of malformation or other direct or indirect '
|| 'harmful effects on the human fetus having been observed.' 
|| Chr(13) 
|| Chr(10) 
|| 
'Studies in animals are inadequate or may be lacking, but available data show no evidence of an increased occurrence of fetal damage.'
;
ds_category_b3          varchar(1000) := 'Category B3'
                                 || Chr(13) 
                                 || Chr(10) 
                                 || 
'Drugs which have been taken by only a limited number of pregnant women and women of ' 
|| 
'childbearing age, without an increase in the frequency of malformation or other direct or indirect '
|| 'harmful effects on the human fetus having been observed.' 
|| Chr(13) 
|| Chr(10) 
|| 
'Studies in animals have shown evidence of an increased occurrence of fetal damage, the significance of which is considered uncertain in humans.'
;
ds_category_c           varchar(1000) := 'Category C'
                                || Chr(13) 
                                || Chr(10) 
                                || 
'Drugs which, owing to their pharmacological effects, have caused or may be suspected of causing, '
|| 
'harmful effects on the human fetus or neonate without causing malformations. These effects may be '
|| 'reversible. Accompanying texts should be consulted for further details.';
ds_category_d           varchar(1000) := 'Category D'
                                || Chr(13) 
                                || Chr(10) 
                                || 
'Drugs which have caused, are suspected to have caused or may be expected to cause, an increased '
|| 
'incidence of human fetal malformations or irreversible damage. These drugs may also have adverse '
|| 
'pharmacological effects. Accompanying texts should be consulted for further details.' 
;
ds_category_x           varchar(1000) := 'Category X'
                                || Chr(13) 
                                || Chr(10) 
                                || 
'Drugs which have such a high risk of causing permanent damage to the fetus that they should not be '
|| 'used in pregnancy or when there is a possibility of pregnancy.';
-- Generic 
c05 CURSOR(
  p_productcode bigint, 
  p_formcode    bigint, 
  p_packcode    bigint) FOR 
  SELECT c.GENERIC, 
         a.nominalstrength, 
         a.strengthunitcode, 
         d.FORM 
  FROM   activecomposition a, 
         proddat b, 
         gendat c, 
         formdat d 
  WHERE ( a.productcode, a.formcode, a.packcode ) IN (p_productcode, p_formcode, p_packcode) 
         AND a.productcode = b.prodcode 
         AND a.genericcode = c.gencode 
         AND d.prodcode = b.prodcode 
         AND d.formcode = a.formcode;
c06 CURSOR(
  p_cd_material bigint) FOR 
  SELECT * 
  FROM   material_conversao_unidade 
  WHERE  cd_material = p_cd_material;
c07 CURSOR(
  p_cd_material bigint) FOR 
  SELECT * 
  FROM   mat_via_aplic 
  WHERE  cd_material = p_cd_material;
c08 CURSOR FOR
  SELECT * 
  FROM   material 
  WHERE  cd_sistema_ant = productcode_p 
                          ||'.' 
                          ||formcode_p 
                          ||'.' 
                          ||packcode_p;
c09 CURSOR FOR
  SELECT x.cd_material 
  FROM   material x, 
         mims_generic_material y 
  WHERE  x.cd_material = y.cd_material_tasy 
         AND EXISTS (SELECT 1 
                     FROM   activecomposition a, 
                            proddat b, 
                            gendat c, 
                            formdat d 
                     WHERE ( a.productcode, a.formcode, a.packcode ) IN (productcode_p, formcode_p, packcode_p) 
                            AND a.productcode = b.prodcode 
                            AND a.genericcode = c.gencode 
                            AND d.prodcode = b.prodcode 
                            AND d.formcode = a.formcode 
                            AND c.GENERIC = y.ds_generic 
                            AND coalesce(a.nominalstrength, 'XPTO') = 
                                coalesce(y.ds_nominalstrength, 'XPTO') 
                            AND coalesce(a.strengthunitcode, 'XPTO') = 
                                coalesce(y.ds_strengthunitcode, 'XPTO'));
BEGIN
  ie_generate_gen_w := 'Y';

  cd_material_gen_w := NULL;

/*
README - Reason for drastic changes in the procedure logic on 13-Feb-2021. 
As per the existing logic, we were storing the generic details in mims_generic_material table.
For scenarios like ( a.productcode, a.formcode, a.packcode ) IN (( 3536, 6, 1 ), we should be storing 2 records for the same generic.cd_material in this table. Say if generic.cd_material = 12345
Record1: Amlodipine	10	mg	Tablets		cd_material_tasy=12345
record2: Atorvastatin	20	mg	Tablets cd_material_tasy=12345

However, as per the table definition, cd_material_tasy is primary key and till date either none or only 1st of the 2 records were stored here.
And therefore this table in SATH customer location has invalid data and for few scenarios, non-existing cd_material for cd_material_tasy column.

So, to avoid further junk records and duplicated generic materials in TASY.material table, we are commenting the logic and considering the generic materials based on ds_material 
*/


/*  FOR r_c09 IN c09 LOOP 
      BEGIN 
          SELECT Count(1) 
          INTO   qt_reg_w 
          FROM   (SELECT c.GENERIC, 
                         Nvl(a.nominalstrength, 'XPTO'), 
                         Nvl(a.strengthunitcode, 'XPTO'), 
                         Nvl(d.FORM, 'XPTO') 
                  FROM   activecomposition a, 
                         proddat b, 
                         gendat c, 
                         formdat d 
                  WHERE  ( a.productcode, a.formcode, a.packcode ) IN (( 
                                productcode_p, formcode_p, packcode_p )) 
                         AND a.productcode = b.prodcode 
                         AND a.genericcode = c.gencode 
                         AND d.prodcode = b.prodcode 
                         AND d.formcode = a.formcode 
                  MINUS 
                  SELECT ds_generic, 
                         Nvl(ds_nominalstrength, 'XPTO'), 
                         Nvl(ds_strengthunitcode, 'XPTO'), 
                         Nvl(ds_form, 'XPTO') 
                  FROM   mims_generic_material 
                  WHERE  cd_material_tasy = r_c09.cd_material); 

          IF ( qt_reg_w = 0 ) THEN 
            SELECT Count(1) 
            INTO   qt_reg_w 
            FROM   (SELECT ds_generic, 
                           Nvl(ds_nominalstrength, 'XPTO'), 
                           Nvl(ds_strengthunitcode, 'XPTO'), 
                           Nvl(ds_form, 'XPTO') 
                    FROM   mims_generic_material 
                    WHERE  cd_material_tasy = r_c09.cd_material 
                    MINUS 
                    SELECT c.GENERIC, 
                           Nvl(a.nominalstrength, 'XPTO'), 
                           Nvl(a.strengthunitcode, 'XPTO'), 
                           Nvl(d.FORM, 'XPTO') 
                    FROM   activecomposition a, 
                           proddat b, 
                           gendat c, 
                           formdat d 
                    WHERE  ( a.productcode, a.formcode, a.packcode ) IN (( 
                                  productcode_p, formcode_p, packcode_p )) 
                           AND a.productcode = b.prodcode 
                           AND a.genericcode = c.gencode 
                           AND d.prodcode = b.prodcode 
                           AND d.formcode = a.formcode); 

            IF ( qt_reg_w = 0 ) THEN 
              cd_material_gen_w := r_c09.cd_material; 

              ie_generate_gen_w := 'N'; 

              exit; 
            END IF; 
          END IF; 
      END; 
  END LOOP; */
  FOR r5 IN c05(productcode_p, formcode_p, packcode_p) LOOP 
      -- GENERIC MATERIAL 
      BEGIN 
	  
          ds_form_w := r5.FORM;

          ds_drug_name_w := Substr(ds_drug_name_w 
                                   || ' ' 
                                   ||r5.GENERIC 
                                   || ' ' 
                                   || r5.nominalstrength 
                                   || r5.strengthunitcode, 1, 255);
      END;
  END LOOP;

  ds_drug_name_w := Substr(ds_drug_name_w 
                           || ' ' 
                           || ds_form_w, 1, 255);


begin			
 select max(cd_material) into STRICT cd_material_gen_w from material
	where ie_tipo_material=3 and ds_material = Substr(trim(both ds_drug_name_w), 1, 255);
exception when others then
	cd_material_gen_w := null;
end;
				

if ( coalesce(cd_material_gen_w, 0) = 0 ) then 

	ie_generate_gen_w := 'Y';

    SELECT nextval('material_seq') 
    INTO STRICT   cd_material_gen_w 
;

/* begin

  FOR r5 IN c05 (productcode_p, formcode_p, packcode_p) LOOP 
      -- GENERIC MATERIAL 

      BEGIN 
          mims_generic_material_w.ds_generic := r5.GENERIC; 

          mims_generic_material_w.ds_nominalstrength := r5.nominalstrength; 

          mims_generic_material_w.ds_strengthunitcode := r5.strengthunitcode; 

          mims_generic_material_w.ds_form := r5.FORM; 

          mims_generic_material_w.cd_prodcode := productcode_p; 

          mims_generic_material_w.cd_formcodeprod := formcode_p; 

          mims_generic_material_w.cd_packcodeprod := packcode_p; 

          mims_generic_material_w.cd_material_tasy := cd_material_gen_w; 

          INSERT INTO mims_generic_material 
          VALUES mims_generic_material_w; 

      END; 
  END LOOP; 
 
exception when others then null;
end;  */
ELSE
	ie_generate_gen_w := 'N';
 
end if;
						
  IF ( ie_generate_gen_w = 'Y' ) THEN 
    -- GENERATE TO TASY THE GENERIC FROM MIMS 
    BEGIN 
        OPEN c08;

        LOOP 
            FETCH c08 INTO material_w;

            EXIT WHEN NOT FOUND; /* apply on c08 */
        END LOOP;

        CLOSE c08;

        ds_orientacao_usuario_w := NULL;

        SELECT Max(USE), 
               Max(pr), 
               Max(Upper(pc)), 
               Max(wa), 
               Max(ci), 
               Max(ar) 
        INTO STRICT   ds_use_w, ds_pr_w, ds_pc_w, ds_wa_w, 
        ds_ci_w, ds_ar_w 
        FROM   proddat 
        WHERE  prodcode = productcode_p;

        IF ( coalesce(ds_use_w, 'X') <> 'X' ) THEN 
          ds_orientacao_usuario_w := 'Use: ' 
                                     || Substr(ds_use_w, 1, 4000) 
                                     || Chr(13) 
                                     || Chr(10);
        END IF;

        IF ( coalesce(ds_pr_w, 'X') <> 'X' ) THEN 
          ds_orientacao_usuario_w := Substr(ds_orientacao_usuario_w 
                                            || 'Precautions: ' 
                                            || ds_pr_w 
                                            || Chr(13) 
                                            || Chr(10), 1, 4000);
        END IF;

        IF ( ds_pc_w = 'A' ) THEN 
          ds_orientacao_usuario_w := Substr(ds_orientacao_usuario_w 
                                            || 'ADEC Pregnancy Category: ' 
                                            || ds_category_a 
                                            || Chr(13) 
                                            || Chr(10), 1, 4000);
        ELSIF ( ds_pc_w = 'B1' ) THEN 
          ds_orientacao_usuario_w := Substr(ds_orientacao_usuario_w 
                                            || 'ADEC Pregnancy Category: ' 
                                            || ds_category_b1 
                                            || Chr(13) 
                                            || Chr(10), 1, 4000);
        ELSIF ( ds_pc_w = 'B2' ) THEN 
          ds_orientacao_usuario_w := Substr(ds_orientacao_usuario_w 
                                            || 'ADEC Pregnancy Category: ' 
                                            || ds_category_b2 
                                            || Chr(13) 
                                            || Chr(10), 1, 4000);
        ELSIF ( ds_pc_w = 'B3' ) THEN 
          ds_orientacao_usuario_w := Substr(ds_orientacao_usuario_w 
                                            || 'ADEC Pregnancy Category: ' 
                                            || ds_category_b3 
                                            || Chr(13) 
                                            || Chr(10), 1, 4000);
        ELSIF ( ds_pc_w = 'C' ) THEN 
          ds_orientacao_usuario_w := Substr(ds_orientacao_usuario_w 
                                            || 'ADEC Pregnancy Category: ' 
                                            || ds_category_c 
                                            || Chr(13) 
                                            || Chr(10), 1, 4000);
        ELSIF ( ds_pc_w = 'D' ) THEN 
          ds_orientacao_usuario_w := Substr(ds_orientacao_usuario_w 
                                            || 'ADEC Pregnancy Category: ' 
                                            || ds_category_d 
                                            || Chr(13) 
                                            || Chr(10), 1, 4000);
        ELSIF ( ds_pc_w = 'X' ) THEN 
          ds_orientacao_usuario_w := Substr(ds_orientacao_usuario_w 
                                            || 'ADEC Pregnancy Category: ' 
                                            || ds_category_x 
                                            || Chr(13) 
                                            || Chr(10), 1, 4000);
        END IF;

        IF ( coalesce(ds_wa_w, 'X') <> 'X' ) THEN 
          ds_orientacao_usuario_w := Substr(ds_orientacao_usuario_w 
                                            || 'Other Warnings: ' 
                                            || ds_wa_w, 1, 4000);
        END IF;

        material_gen_w := material_w;

        material_gen_w.cd_material := cd_material_gen_w;

        material_gen_w.cd_material_estoque := cd_material_gen_w;

        material_gen_w.ie_tipo_material := 3; -- GENERIC 
        material_gen_w.ds_material := Substr(trim(both ds_drug_name_w), 1, 255);

        material_gen_w.ds_reduzida := Substr(trim(both ds_drug_name_w), 1, 255);

        material_gen_w.ds_orientacao_usuario := ds_orientacao_usuario_w;

        material_gen_w.cd_sistema_ant := NULL;
		
		material_gen_w.IE_SITUACAO := 'I'; --Situation should always be Inactive
		
		material_gen_w.CD_MATERIAL_GENERICO := null; --else it is wrongly updating in update scenarios
		
		  material_gen_w.dt_atualizacao := clock_timestamp();

          material_gen_w.dt_atualizacao_nrec := clock_timestamp();

          material_gen_w.nm_usuario := 'MIMSIMPORT';

          material_gen_w.nm_usuario_nrec := 'MIMSIMPORT';


        INSERT INTO material 
        VALUES (material_gen_w.*);
        
        cd_material_tasy_p := cd_material_gen_w;

        FOR r6 IN c06(material_w.cd_material) LOOP -- CONVERSION UNIT 
            BEGIN 
                mat_conv_unidade_gen_w.cd_material := cd_material_gen_w;

                mat_conv_unidade_gen_w.cd_unidade_medida := 
                r6.cd_unidade_medida;

                mat_conv_unidade_gen_w.dt_atualizacao := clock_timestamp();

                mat_conv_unidade_gen_w.dt_atualizacao_nrec := clock_timestamp();

                mat_conv_unidade_gen_w.nm_usuario := 'MIMSIMPORT';

                mat_conv_unidade_gen_w.nm_usuario_nrec := 'MIMSIMPORT';

                mat_conv_unidade_gen_w.ie_prioridade := r6.ie_prioridade;

                mat_conv_unidade_gen_w.qt_conversao := r6.qt_conversao;

                INSERT INTO material_conversao_unidade 
                VALUES (mat_conv_unidade_gen_w.*);
            END;
        END LOOP;

        FOR r7 IN c07(material_w.cd_material) LOOP -- ROUTES 
            BEGIN 
                SELECT nextval('mat_via_aplic_seq') 
                INTO STRICT   nr_seq_mat_via_aplic_w 
;

                mat_via_aplic_w.nr_sequencia := nr_seq_mat_via_aplic_w;

                mat_via_aplic_w.cd_material := cd_material_gen_w;

                mat_via_aplic_w.dt_atualizacao := clock_timestamp();

                mat_via_aplic_w.dt_atualizacao_nrec := clock_timestamp();

                mat_via_aplic_w.nm_usuario := 'MIMSIMPORT';

                mat_via_aplic_w.nm_usuario_nrec := 'MIMSIMPORT';

                mat_via_aplic_w.ie_via_aplicacao := r7.ie_via_aplicacao;

                mat_via_aplic_w.ds_recomendacao := r7.ds_recomendacao;

                mat_via_aplic_w.ie_diluicao := r7.ie_diluicao;

                mat_via_aplic_w.cd_setor_atendimento := 
                r7.cd_setor_atendimento;

                mat_via_aplic_w.cd_setor_excluir := r7.cd_setor_excluir;

                mat_via_aplic_w.ie_recomendada := r7.ie_recomendada;

                mat_via_aplic_w.nr_seq_prioridade := r7.nr_seq_prioridade;

                mat_via_aplic_w.cd_estabelecimento := r7.cd_estabelecimento;

                INSERT INTO mat_via_aplic 
                VALUES (mat_via_aplic_w.*);
            END;
        END LOOP;

        SELECT nextval('material_estab_seq') 
        INTO STRICT   nr_seq_mat_estab_w 
;

        material_estab_w.nr_sequencia := nr_seq_mat_estab_w;

        material_estab_w.cd_estabelecimento := cd_estabelecimento_p;

        material_estab_w.cd_material := cd_material_gen_w;

        material_estab_w.dt_atualizacao := clock_timestamp();

        material_estab_w.nm_usuario := 'MIMSIMPORT';

        material_estab_w.ie_baixa_estoq_pac := 'N';

        material_estab_w.ie_material_estoque := 'N';

        material_estab_w.qt_estoque_minimo := 1;

        material_estab_w.qt_ponto_pedido := 1;

        material_estab_w.qt_estoque_maximo := 999;

        material_estab_w.nr_minimo_cotacao := 1;

        material_estab_w.ie_ressuprimento := 'N';

        material_estab_w.nm_usuario_nrec := 'MIMSIMPORT';

        material_estab_w.ie_classif_custo := 'B';

        material_estab_w.ie_prescricao := 'N';

        material_estab_w.ie_padronizado := 'S';

        material_estab_w.ie_estoque_lote := 'N';

        material_estab_w.ie_requisicao := 'N';

        material_estab_w.ie_controla_serie := 'N';

        material_estab_w.ie_unid_consumo_prescr := 'S';

        CALL wheb_usuario_pck.set_ie_executar_trigger('N');
        INSERT INTO material_estab
        VALUES (material_estab_w.*);
        CALL wheb_usuario_pck.set_ie_executar_trigger('S');

        SELECT nextval('material_reacao_seq')
        INTO STRICT   nr_seq_mat_reacao_w 
;

        IF ( coalesce(ds_ci_w, 'X') <> 'X' ) THEN 
          ds_reacao_w := Substr('Contraindications: ' 
                                || ds_ci_w 
                                || Chr(13) 
                                || Chr(10), 1, 4000);
        END IF;

        IF ( coalesce(ds_ar_w, 'X') <> 'X' ) THEN 
          ds_reacao_w := Substr(ds_reacao_w 
                                || 'Adverse reactions: ' 
                                || ds_ar_w, 1, 4000);
        END IF;

        IF (ds_reacao_w IS NOT NULL AND ds_reacao_w::text <> '') THEN 
          material_reacao_w.cd_material := cd_material_gen_w;

          material_reacao_w.ds_reacao := Substr(ds_reacao_w, 1, 4000);

          material_reacao_w.dt_atualizacao := clock_timestamp();

          material_reacao_w.dt_atualizacao_nrec := clock_timestamp();

          material_reacao_w.nm_usuario := 'MIMSIMPORT';

          material_reacao_w.nm_usuario_nrec := 'MIMSIMPORT';

          material_reacao_w.nr_sequencia := nr_seq_mat_reacao_w;

          INSERT INTO material_reacao 
          VALUES (material_reacao_w.*);
        END IF;
    exception when others then
      null;
    END;
  END IF;

  cd_material_tasy_p := cd_material_gen_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE insert_material_gen_mims ( productcode_p bigint, formcode_p bigint, packcode_p bigint, cd_estabelecimento_p bigint, cd_material_tasy_p INOUT bigint) FROM PUBLIC;

