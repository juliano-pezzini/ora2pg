-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS (		nm_sinal_vital	varchar(100),
				vl_sinal_vital	varchar(100),
				nm_codigo			varchar(100),
				ds_unidade_medida	varchar(100),
				ds_lista		varchar(255));


CREATE OR REPLACE PROCEDURE gerar_sinal_vital_ge ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, cd_setor_atendimento_p text default null, cd_unidade_compl_p text default null, cd_unidade_basica_p text default null, nr_atendimento_p bigint default null) AS $body$
DECLARE

type Vetor is table of campos index 	by integer;
Vetor_w			Vetor;

nr_atendimento_w	bigint;
dt_sinal_vital_w	timestamp;
nr_seq_sinal_vital_w	bigint	:= 0;
ds_sep_w		varchar(100)	:= ';';
nr_pos_separador_w	bigint;
qt_parametros_w		bigint;
qt_contador_w		bigint;
ds_parametros_w		varchar(32000);
i			integer;
ds_lista_aux_w		varchar(255);
ds_sep_bv_w		varchar(30)	:= obter_separador_bv;
nr_seq_monit_resp_w	bigint	:= 0;
nr_seq_monit_hemo_w	bigint	:= 0;
nr_seq_aval_analgesica_w bigint := 0;
cd_modalidade_w		varchar(15);
ie_respiracao_w		varchar(7);
ds_erro_w		varchar(4000);
qt_minutos_w		bigint;
qt_min_philips_w		bigint;
qt_reg_w			bigint;
cd_estabelecimento_w	bigint;
nr_cirurgia_w			bigint;
nr_seq_pepo_w			bigint;
qt_setor_integrado_w        bigint;
ie_nome_setor_philips_w	    varchar(3) := 'N';

ie_tipo_Halogenado_w		bigint	:= 0;
qt_Sevofl_halog_insp_w  	varchar(10);
qt_Sevofl_halog_exp_w   	varchar(10);
qt_Sevofl_utilizada_w   	varchar(10);
ie_inN2O_w 					varchar(1) := 'N';
ie_inO2_w 					varchar(1) := 'N';
qt_utilizada_w 				varchar(15);
qt_halog_insp_w				varchar(15);
vl_sinal_vital_inN2O_w		varchar(15);
vl_sinal_vital_inO2_w		varchar(15);
nr_cirurgia_ww		        bigint;
ie_sevo_w               	varchar(1) := 'N';
ie_tem_sv_periodo_w			varchar(1);
cd_setor_atendimento_w	    integer;
nls_numeric_characters_w	varchar(255);
qt_Isoflurano_halog_insp_w	varchar(10);
qt_Isoflurano_halog_exp_w   	varchar(10);
qt_Isoflurano_utilizada_w   	varchar(10);
qt_Halotano_halog_insp_w    	varchar(10);
qt_Halotano_halog_exp_w     	varchar(10);
qt_Halotano_utilizada_w     	varchar(10);
qt_Enfluorano_halog_insp_w  	varchar(10);
qt_Enfluorano_halog_exp_w   	varchar(10);
qt_Enfluorano_utilizada_w   	varchar(10);
qt_Desflurano_halog_insp_w  	varchar(10);
qt_Desflurano_halog_exp_w   	varchar(10);
qt_Desflurano_utilizada_w   	varchar(10);
ds_locale_w			varchar(20);
cd_estabelecimento_ww       bigint;
cd_pessoa_fisica_w          varchar(10):= cd_pessoa_fisica_p;
ie_momento_integracao_w     varchar(15);
nr_seq_interno_w            bigint;
nr_atendimento_cirur_w      bigint;
ds_param_integ_hl7_w        varchar(4000);
dt_inicia_integ_w           timestamp;
dt_finaliza_integ_w         timestamp;
ie_exige_aprovacao_w        varchar(2);
ie_retorno_valida_sv_w      varchar(10);
ds_retorno_valida_sv_w      varchar(2000);
ExigeAprovacaoNao           varchar(2)    := 'N';
ExigeAprovacaoSim           varchar(2)    := 'S';
ExigeAprovacaoForaFaixa     varchar(2)    := 'C';


/* 
1	Isofluorano
2	Sevofluorano
3	Halotano
4	Enfluorano
5	Desflurano
*/
	procedure inserir_sv is
	;
BEGIN

	if (nr_seq_sinal_vital_w	= 0) then

		select	nextval('atendimento_sinal_vital_seq')
		into STRICT	nr_seq_sinal_vital_w
		;
		
		insert into atendimento_sinal_vital(	nr_sequencia,
							nr_atendimento,
							dt_sinal_vital,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							dt_liberacao,
							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nm_usuario_nrec,
							nr_seq_pepo,
							--ie_valor_fora_faixa,
							ie_integracao)
				values (	nr_seq_sinal_vital_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_p,
							null,
							null,
							'S',
							'A',
							nr_cirurgia_w,
							nm_usuario_p,
							nr_seq_pepo_w,
							--ie_valor_fora_faixa_w,
							'S');
	end if;
	end;

	procedure inserir_resp is
	begin
	if (nr_seq_monit_resp_w	= 0) then

		select	nextval('atendimento_monit_resp_seq')
		into STRICT	nr_seq_monit_resp_w
		;

		insert into ATENDIMENTO_MONIT_RESP(	nr_sequencia,
							nr_atendimento,
							DT_MONITORIZACAO,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							dt_liberacao,
							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao)
				values (	nr_seq_monit_resp_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_p,
							null,
							null,
							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S');
	end if;
	end;


	procedure inserir_hemo is
	begin
	if (nr_seq_monit_hemo_w	= 0) then

		select	nextval('atend_monit_hemod_seq')
		into STRICT	nr_seq_monit_hemo_w
		;

		insert into ATEND_MONIT_HEMOD(	nr_sequencia,
							nr_atendimento,
							DT_MONITORACAO,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							dt_liberacao,
							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao)
				values (	nr_seq_monit_hemo_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_p,
							null,
							null,
							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S');
	end if;
	end;
	
	procedure inserir_analgesia is
	begin
	if (nr_seq_aval_analgesica_w = 0) then
		
		select 	nextval('atend_aval_analgesia_seq')
		into STRICT 	nr_seq_aval_analgesica_w
		;
		
		insert into ATEND_AVAL_ANALGESIA(	nr_sequencia,
									nr_atendimento,
									dt_avaliacao,
									dt_atualizacao,
									nm_usuario,
									dt_liberacao,
									ie_situacao,
									nr_seq_pepo,
									ie_integracao
									)
				values (	nr_seq_aval_analgesica_w,
									nr_atendimento_w,
									dt_sinal_vital_w,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									'A',
									nr_seq_pepo_w,
									'S');
	end if;								
	end;
	
	
	procedure atualizar_valor_fora_faixa(	nm_tabela_p			varchar2,
											nm_atributo_p		varchar2,
											vl_parametro_p		varchar2,
											nr_sequencia_sv_p	number) is
	ds_comando_ww			varchar2(2000);
	ds_parametros_w			varchar2(2000);
	vl_parametro_w			varchar2(2000);
	ds_retorno_w			varchar2(255);
	ie_retorno_w			varchar2(2);
	nr_seq_item_w			number(10);
	ie_valor_fora_faixa_w	varchar2(2);
	begin
	begin
	
	SELECT  coalesce(MAX(a.nr_sequencia),0)
	into STRICT	nr_seq_item_w
	FROM    sinal_vital a
	WHERE   a.nm_atributo = UPPER(nm_atributo_p);

	if (nr_seq_item_w > 0) then
		SELECT * FROM consiste_sinal_vital(cd_pessoa_fisica_p, vl_parametro_w, nr_seq_item_w, ds_retorno_w, ie_retorno_w, null, nr_atendimento_w, null, null) INTO STRICT ds_retorno_w, ie_retorno_w;

		if (coalesce(ds_retorno_w,'XPTO') <> 'XPTO') then
			ie_valor_fora_faixa_w := 'S';
			
			ds_comando_ww	:= 	'	update	'|| nm_tabela_p	||
			'	set	IE_VALOR_FORA_FAIXA = :vl_parametro'||
			'	where	nr_sequencia	= :nr_sequencia ';
		
			ds_parametros_w:=	'vl_parametro='|| ie_valor_fora_faixa_w ||ds_sep_bv_w||
				'nr_sequencia='||nr_sequencia_sv_p||ds_sep_bv_w;

			CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_ww,ds_parametros_w);

		end if;
	end if;

	
	
	exception
		when others then
		ds_erro_w		:= sqlerrm(SQLSTATE);
		
	end;
	
	end;

	procedure atualizar_valor_sv(	nm_tabela_p	varchar2,
					nm_atributo_p	varchar2,
					vl_parametro_p	varchar2) is
	ds_comando_w	varchar2(2000);
	ds_parametros_w	varchar2(2000);
	vl_parametro_w	varchar2(2000);
	begin
	ds_comando_w	:= 	'	update	'||nm_tabela_p	||
				'	set	'||nm_atributo_p||' = :vl_parametro'||
				'	where	nr_sequencia	= :nr_sequencia ';
	begin
	vl_parametro_w	:= vl_parametro_p;
	if (nls_numeric_characters_w <> '.,') and -- Avoing issues with customer outside Brasil
		((substr(nm_atributo_p,1,2)	= 'QT') or (substr(nm_atributo_p,1,2)	= 'PR') or (substr(nm_atributo_p,1,2)	= 'VL') or (substr(nm_atributo_p,1,2)	= 'TX')) then
		vl_parametro_w	:= replace(vl_parametro_w,'.',',');
	end if;

	if (nm_tabela_p	= 'ATENDIMENTO_SINAL_VITAL') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_sv;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_sinal_vital_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
		atualizar_valor_fora_faixa(nm_tabela_p, nm_atributo_p, vl_parametro_w, nr_seq_sinal_vital_w);
	elsif (nm_tabela_p	= 'ATENDIMENTO_MONIT_RESP') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_resp;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_monit_resp_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
		atualizar_valor_fora_faixa(nm_tabela_p, nm_atributo_p, vl_parametro_w, nr_seq_monit_resp_w);
	elsif (nm_tabela_p	= 'ATEND_MONIT_HEMOD') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_hemo;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_monit_hemo_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
		atualizar_valor_fora_faixa(nm_tabela_p, nm_atributo_p, vl_parametro_w, nr_seq_monit_hemo_w);
	elsif (nm_tabela_p	= 'ATEND_AVAL_ANALGESIA') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_analgesia;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_aval_analgesica_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
		atualizar_valor_fora_faixa(nm_tabela_p, nm_atributo_p, vl_parametro_w, nr_seq_aval_analgesica_w);
	end if;

	exception
		when others then
		ds_erro_w		:= sqlerrm(SQLSTATE);
		
	end;

	end;
		
	function obter_vl_agente_adm(ie_tipo_agente number, nr_cirurgia_param number) return;
	begin
	
	qt_velocidade_w	:= agente_anest_pck.obter_vl_agente_adm(	ie_tipo_agente,
									nr_cirurgia_param,
									cd_estabelecimento_w,
									ie_tipo_Halogenado_w);
	
	return;
	
	end;
	
	procedure inserir_adm_agente_anestesico(ie_tipo_agente number, nr_cirurgia_param number, qt_vel_p varchar2, qt_utilizada_p varchar2 , qt_halog_insp_p varchar2 	)  is
	
	nr_seq_agente_anest_w  		number(10);
	nr_sequencia_ww				number(10);
	nr_seq_agent_anest_ocor_w	number(10);
	ie_modo_registro_w			agente_anestesico.ie_modo_registro %type;
	cd_unid_med_w				cirurgia_agente_anest_ocor.cd_unid_med %type;

	begin

	CALL agente_anest_pck.inserir_adm_agente_anestesico(	ie_tipo_agente,
							nr_cirurgia_param,
							qt_vel_p,
							qt_utilizada_p,
							qt_halog_insp_p,
							cd_estabelecimento_w,
							nm_usuario_p,
							'S',
							ie_tipo_Halogenado_w,
							dt_sinal_vital_w);
	
	end;
	
	function obter_se_existe_agente(ie_tipo_agente number, nr_cirurgia_param number, cd_estabelecimento_pp number ) return;

	begin
	
	ie_possui_reg_w	:= agente_anest_pck.obter_se_existe_agente(ie_tipo_agente,nr_cirurgia_param,coalesce(cd_estabelecimento_pp,cd_estabelecimento_w),ie_tipo_Halogenado_w);
	
	return;
	
	end;
	
	function obter_se_agente_ja_adm(ie_tipo_agente number, nr_cirurgia_param number, cd_estabelecimento_param number ) return;
	begin
	
	ie_possui_reg_w		:= agente_anest_pck.obter_se_agente_ja_adm(ie_tipo_agente,nr_cirurgia_param,coalesce(cd_estabelecimento_param,cd_estabelecimento_w),ie_tipo_Halogenado_w);
	
	return;
	
	end;
	
	procedure 	inserir_cir_agente_anest(ie_tipo_agente number,
										 nr_cirurgia_param number, 
										 vl_velocidade varchar2,
										 cd_estabelecimento_param number)  is

	begin
	
	CALL agente_anest_pck.inserir_cir_agente_anest(	ie_tipo_agente,
							nr_cirurgia_param,
							vl_velocidade,
							cd_estabelecimento_param,
							nr_seq_pepo_w,
							nm_usuario_p,
							'S',
							ie_tipo_Halogenado_w);
	
	end;
	

	procedure atualizar_adm_agente_anest(ie_tipo_agente number, nr_cirurgia_param number)  is
	begin
	

	CALL AGENTE_ANEST_PCK.atualizar_adm_agente_anest(	ie_tipo_agente,
							nr_cirurgia_param,
							cd_estabelecimento_w,
							ie_tipo_Halogenado_w,
							dt_sinal_vital_w);
	
	end;
	
	
	procedure atualizar_registro_adm_sevo(ie_tipo_agente_p number, qt_utilizada_p number, nr_cirurgia_pp number)  is
	begin
		
	CALL agente_anest_pck.atualizar_registro_adm_sevo(	ie_tipo_agente_p,
							qt_utilizada_p,
							nr_cirurgia_pp,
							ie_tipo_Halogenado_w);
	
	
	end;

	procedure gerar_passagem_setor(nr_atendimento_param number, nr_seq_interno_param number, cd_setor_param_p number) is
	begin
		ds_param_integ_hl7_w := 'nr_atendimento=' || nr_atendimento_param || ds_sep_bv_w ||
								'nr_seq_interno=' || nr_seq_interno_param || ds_sep_bv_w||
								'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w;
		CALL gravar_agend_integracao(67, ds_param_integ_hl7_w, cd_setor_param_p);
		commit;
	end;
begin

begin
	select 	max(value)
	into STRICT	nls_numeric_characters_w
	from 	v$nls_parameters
	where	parameter = 'NLS_NUMERIC_CHARACTERS';
exception
when others then
	nls_numeric_characters_w	:= null;
end;

begin
	
dt_sinal_vital_w := to_date(dt_sinal_vital_p, 'yyyymmddhh24miss');
exception
	when others then
	dt_sinal_vital_w	:= clock_timestamp();
end;

select 	max(nr_atendimento)
into STRICT 	nr_atendimento_w
from 	atendimento_paciente
where 	cd_pessoa_fisica  = cd_pessoa_fisica_w
and	dt_alta_interno  = TO_DATE('30/12/2999','dd/mm/yyyy')
and	ie_tipo_atendimento in (1,3);

if (coalesce(nr_atendimento_w::text, '') = '') then
	select 	max(nr_atendimento)
	into STRICT 	nr_atendimento_w
	from 	atendimento_paciente
	where 	cd_pessoa_fisica  = cd_pessoa_fisica_p
	and	dt_alta_interno  = TO_DATE('30/12/2999','dd/mm/yyyy');
end if;

select  coalesce(max(cd_estabelecimento),1)
into STRICT  cd_estabelecimento_w
from  atendimento_paciente
where  nr_atendimento = nr_atendimento_w;

select			max(cd_setor_atendimento)
into STRICT			cd_setor_atendimento_w
from			setor_atendimento
where			ds_setor_atendimento = cd_setor_atendimento_p;

if (obter_classif_setor(cd_setor_atendimento_w)  = 2) then

  cd_estabelecimento_ww := coalesce(wheb_usuario_pck.get_cd_estabelecimento, cd_estabelecimento_w);

  if (coalesce(cd_estabelecimento_ww,0) <= 0) then

    select  max(b.cd_estabelecimento)
    into STRICT  cd_estabelecimento_ww
    from  atend_paciente_unidade a,
        cirurgia b
    where  a.nr_atendimento   = b.nr_atendimento
    and  a.dt_entrada_unidade   = b.dt_entrada_unidade
    and  a.cd_setor_atendimento   = cd_setor_atendimento_p
    and  a.cd_unidade_basica  = cd_unidade_basica_p
    and  a.cd_unidade_compl  = cd_unidade_compl_p
    and  a.DT_SAIDA_INTERNO  = to_date('30/12/2999','dd/mm/yyyy')
    and  b.dt_entrada_unidade between dt_sinal_vital_w - 2 and dt_sinal_vital_w;
  end if;

  select  max(ie_momento_integracao)
  into STRICT  ie_momento_integracao_w
  from  parametros_pepo
  where  cd_estabelecimento = cd_estabelecimento_ww;

  if (ie_momento_integracao_w = 'TM') then
    select  max(a.nr_atendimento)
    into STRICT  nr_atendimento_cirur_w
    from  atend_paciente_unidade a,
      cirurgia b,
      evento_cirurgia_paciente c,
      evento_cirurgia d
    where  a.nr_atendimento   = b.nr_atendimento
    and  a.dt_entrada_unidade   = b.dt_entrada_unidade
    and  b.nr_cirurgia    = c.nr_cirurgia
    and  c.nr_seq_evento    = d.nr_sequencia
    and  coalesce(c.ie_situacao,'A')  = 'A'
    and  coalesce(d.ie_situacao,'A')  = 'A'
    and  coalesce(ie_inicia_integracao,'N') = 'S'
    and  a.cd_setor_atendimento   = cd_setor_atendimento_p
    and  a.cd_unidade_basica  = cd_unidade_basica_p
    and  a.cd_unidade_compl  = cd_unidade_compl_p
    and  c.dt_registro     between dt_sinal_vital_w - 2 and dt_sinal_vital_w
    and  not exists (  SELECT  1
          from   evento_cirurgia_paciente x,
            evento_cirurgia y
          where   x.nr_seq_evento = y.nr_sequencia
          and  x.nr_cirurgia   = b.nr_cirurgia
          and  coalesce(ie_finaliza_integracao,'N') = 'S'
          and  coalesce(x.ie_situacao,'A')  = 'A'
          and  coalesce(y.ie_situacao,'A')  = 'A');
  else
    select  max(a.nr_atendimento)
    into STRICT  nr_atendimento_cirur_w
    from  atend_paciente_unidade a,
      cirurgia b
    where  a.nr_atendimento   = b.nr_atendimento
    and  a.dt_entrada_unidade   = b.dt_entrada_unidade
    and  a.cd_setor_atendimento   = cd_setor_atendimento_p
    and  a.cd_unidade_basica  = cd_unidade_basica_p
    and  a.cd_unidade_compl  = cd_unidade_compl_p
    and  a.DT_SAIDA_INTERNO  = to_date('30/12/2999','dd/mm/yyyy')
    and  b.dt_entrada_unidade between dt_sinal_vital_w - 2 and dt_sinal_vital_w;
  end if;

  if (nr_atendimento_cirur_w IS NOT NULL AND nr_atendimento_cirur_w::text <> '') and
    ((nr_atendimento_w  <> nr_atendimento_cirur_w) or (coalesce(nr_atendimento_w::text, '') = '')) then

    nr_atendimento_w  := nr_atendimento_cirur_w;
    nr_seq_interno_w  := obter_atepacu_paciente(nr_atendimento_cirur_w,'A');
    cd_pessoa_fisica_w  := obter_pessoa_atendimento(nr_atendimento_cirur_w,'C');

    gerar_passagem_setor(nr_atendimento_cirur_w,nr_seq_interno_w, cd_setor_atendimento_p);
  end if;
end if;

select  max(b.cd_estabelecimento)
into STRICT  cd_estabelecimento_ww
from  atend_paciente_unidade a,
    cirurgia b
where  a.nr_atendimento   = b.nr_atendimento
and  a.dt_entrada_unidade   = b.dt_entrada_unidade
and  b.nr_atendimento   = nr_atendimento_w;

select  max(ie_momento_integracao)
into STRICT  ie_momento_integracao_w
from  parametros_pepo
where  cd_estabelecimento = cd_estabelecimento_w;

if (ie_momento_integracao_w = 'TM') then
  select	max(c.dt_registro)
  into STRICT	dt_inicia_integ_w
  from	cirurgia b,
        evento_cirurgia_paciente c,
        evento_cirurgia d
  where	b.nr_atendimento = nr_atendimento_w
  and (b.nr_seq_pepo    = c.nr_seq_pepo
        or  b.nr_cirurgia    = c.nr_cirurgia)
  and  c.nr_seq_evento = d.nr_sequencia
  and  ie_inicia_integracao = 'S'
  and  coalesce(c.ie_situacao,'A')  = 'A'
  and  coalesce(d.ie_situacao,'A')  = 'A';

  select	max(c.dt_registro)
  into STRICT	dt_finaliza_integ_w
  from	cirurgia b,
        evento_cirurgia_paciente c,
        evento_cirurgia d
  where	b.nr_atendimento = nr_atendimento_w
  and (b.nr_seq_pepo    = c.nr_seq_pepo
        or  b.nr_cirurgia    = c.nr_cirurgia)
  and  c.nr_seq_evento    = d.nr_sequencia
  and  ie_finaliza_integracao = 'S'
  and  coalesce(c.ie_situacao,'A')  = 'A'
  and  coalesce(d.ie_situacao,'A')  = 'A';

  if (dt_inicia_integ_w > coalesce(dt_finaliza_integ_w, to_date('19700101000000', 'yyyymmddhh24miss'))) then
    select	max(b.nr_cirurgia),
        max(b.nr_seq_pepo)
    into STRICT	nr_cirurgia_w,
        nr_seq_pepo_w
    from	cirurgia b,
          evento_cirurgia_paciente c,
          evento_cirurgia d
    where	b.nr_atendimento = nr_atendimento_w
    and (b.nr_seq_pepo    = c.nr_seq_pepo
        or  b.nr_cirurgia    = c.nr_cirurgia)
    and  c.nr_seq_evento    = d.nr_sequencia
    and  coalesce(ie_inicia_integracao,'N') = 'S'
    and  coalesce(c.ie_situacao,'A')  = 'A'
    and  coalesce(d.ie_situacao,'A')  = 'A'
    and  not exists (  SELECT  1
              from   evento_cirurgia_paciente x,
                evento_cirurgia y
              where   x.nr_seq_evento = y.nr_sequencia
              and (x.nr_seq_pepo   = b.nr_seq_pepo
                    or x.nr_cirurgia   = b.nr_cirurgia)
              and  coalesce(ie_finaliza_integracao,'N') = 'S'
              and  coalesce(x.ie_situacao,'A')  = 'A'
              and  coalesce(y.ie_situacao,'A')  = 'A'
              and c.dt_registro > x.dt_registro);
  end if;
else
  select	max(nr_cirurgia),
      max(nr_seq_pepo)
  into STRICT	nr_cirurgia_w,
      nr_seq_pepo_w
  from	cirurgia
  where	nr_atendimento = nr_atendimento_w
  and		dt_sinal_vital_w between dt_inicio_real and coalesce(dt_termino, dt_sinal_vital_w);

  if (coalesce(nr_cirurgia_w::text, '') = '') and (coalesce(nr_seq_pepo_w::text, '') = '') then
    select	max(nr_cirurgia),
        max(nr_seq_pepo)
    into STRICT	nr_cirurgia_w,
        nr_seq_pepo_w
    from	atend_paciente_unidade
    where	nr_atendimento = nr_atendimento_w
    and		dt_sinal_vital_w between dt_entrada_unidade and coalesce(dt_saida_unidade, dt_sinal_vital_w);
  end if;

  if (coalesce(nr_seq_pepo_w::text, '') = '') then
    begin
      select	max(nr_sequencia)
      into STRICT	nr_seq_pepo_w
      from	PEPO_CIRURGIA
      where	nr_atendimento = nr_atendimento_w
      and		dt_sinal_vital_w between dt_inicio_proced  and coalesce(dt_fim_cirurgia, dt_sinal_vital_w);
    end;
  end if;
end if;

cd_setor_atendimento_w := obter_setor_atendimento(nr_atendimento_w);

select  coalesce(MAX(qt_min_philips),0)
into STRICT	qt_min_philips_w
from	setor_atendimento
where	cd_setor_atendimento = cd_setor_atendimento_w;

select	coalesce(max('S'), 'N')
into STRICT	ie_tem_sv_periodo_w
from	atendimento_sinal_vital a
where	a.nr_atendimento    = nr_atendimento_w
and	    coalesce(a.dt_inativacao::text, '') = ''
and	    a.dt_sinal_vital between dt_sinal_vital_w - ((1/24/60)* qt_min_philips_w) and dt_sinal_vital_w
and	    a.nm_usuario_nrec = nm_usuario_p
and	    coalesce(a.ie_integracao_mentor,'N') = 'N';

ds_parametros_w    := ds_lista_parametros_p||ds_lista_parametros2_p;
ds_parametros_w	   := replace(ds_parametros_w,'null','');
i	:= 0;

while(length(ds_parametros_w) > 0) loop
	begin
	i	:= i+1;
	if (position(';' in ds_parametros_w)	>0)  then
		Vetor_w[i].ds_lista	:= substr(ds_parametros_w,1,position(';' in ds_parametros_w)-1 );
		ds_parametros_w	:= substr(ds_parametros_w,position(';' in ds_parametros_w)+1,40000);

	else
		Vetor_w[i].ds_lista	:=substr(ds_parametros_w,1,length(ds_parametros_w) - 1);
		ds_parametros_w	:= null;
	end if;

	end;
end loop;

RAISE NOTICE '%', Vetor_w.count;




for j in 1..Vetor_w.count loop
	begin

	ds_lista_aux_w	:= Vetor_w[j].ds_lista;

	Vetor_w[j].nm_sinal_vital	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)-1 );
	RAISE NOTICE 'nm_sinal_vital = %', Vetor_w[j].nm_sinal_vital;
	
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
	Vetor_w[j].ds_unidade_medida	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
	
	Vetor_w[j].nm_codigo	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );
	
	RAISE NOTICE 'nm_codigo = %', Vetor_w[j].nm_codigo;
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);

	
	
	Vetor_w[j].vl_sinal_vital	:= substr(ds_lista_aux_w,1,4000 );
	
	
	
	end;
end loop;

select	coalesce(max(cd_estabelecimento),1)
into STRICT	cd_estabelecimento_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_w;

-- Criado consistencia para verificar se o paciente se encontra em um setor/leito monitorado.
if (ie_momento_integracao_w = 'TM') then
  select	count(*)
  into STRICT	qt_setor_integrado_w
  from	atend_paciente_unidade a,
      unidade_atendimento b,
      cirurgia c,
      evento_cirurgia_paciente d,
      evento_cirurgia e
  where	a.nr_atendimento = nr_atendimento_w
  and		a.nr_atendimento = c.nr_atendimento
  and		a.cd_setor_atendimento = b.cd_setor_atendimento
  and (c.nr_seq_pepo = d.nr_seq_pepo
          or c.nr_cirurgia = d.nr_cirurgia)
  and		d.nr_seq_evento    = e.nr_sequencia
  and		a.cd_unidade_basica = b.cd_unidade_basica
  and		coalesce(b.ie_leito_monitorado,'N') = 'S'
  and  coalesce(ie_inicia_integracao,'N') = 'S'
  and  coalesce(d.ie_situacao,'A')  = 'A'
  and  coalesce(e.ie_situacao,'A')  = 'A'
  and  not exists (  SELECT  1
            from   evento_cirurgia_paciente x,
              evento_cirurgia y
            where   x.nr_seq_evento = y.nr_sequencia
            and (x.nr_seq_pepo   = c.nr_seq_pepo
                  or x.nr_cirurgia   = c.nr_cirurgia)
            and  coalesce(ie_finaliza_integracao,'N') = 'S'
            and  coalesce(x.ie_situacao,'A')  = 'A'
            and  coalesce(y.ie_situacao,'A')  = 'A'
            and d.dt_registro > x.dt_registro);
else
  select	count(*)
    into STRICT	qt_setor_integrado_w
    from	atend_paciente_unidade a,
        unidade_atendimento b
    where	a.nr_atendimento = nr_atendimento_w
    and		a.cd_setor_atendimento = b.cd_setor_atendimento
    and		a.cd_unidade_basica = b.cd_unidade_basica
    and		coalesce(b.ie_leito_monitorado,'N') = 'S'
    and		dt_sinal_vital_w between a.dt_entrada_unidade and coalesce(a.dt_saida_unidade, dt_sinal_vital_w);
end if;

select	coalesce(max(IE_NOME_SETOR_PHILIPS),'N')
into STRICT	ie_nome_setor_philips_w
from	parametro_medico
where	cd_estabelecimento = cd_estabelecimento_w;

if (	qt_setor_integrado_w > 0) and (	ie_nome_setor_philips_w = 'S') then
  if (ie_momento_integracao_w = 'TM') then
    select	count(*)
    into STRICT	qt_setor_integrado_w
    from	atend_paciente_unidade a,
        unidade_atendimento b,
        cirurgia c,
        evento_cirurgia_paciente d,
        evento_cirurgia e
    where	a.nr_atendimento = nr_atendimento_w
    and		a.nr_atendimento = c.nr_atendimento
    and		a.cd_setor_atendimento = b.cd_setor_atendimento
    and (c.nr_seq_pepo = d.nr_seq_pepo
            or c.nr_cirurgia = d.nr_cirurgia)
    and		d.nr_seq_evento    = e.nr_sequencia
    and		a.cd_unidade_basica = b.cd_unidade_basica
    and		upper(b.nm_setor_integracao) = upper(cd_setor_atendimento_p)
    and		trim(both upper(b.nm_leito_integracao)) = trim(both upper(cd_unidade_compl_p))
    and		coalesce(b.ie_leito_monitorado,'N') = 'S'
    and  coalesce(ie_inicia_integracao,'N') = 'S'
    and  coalesce(d.ie_situacao,'A')  = 'A'
    and  coalesce(e.ie_situacao,'A')  = 'A'
    and  not exists (  SELECT  1
              from   evento_cirurgia_paciente x,
                evento_cirurgia y
              where   x.nr_seq_evento = y.nr_sequencia
              and (x.nr_seq_pepo   = c.nr_seq_pepo
                    or x.nr_cirurgia   = c.nr_cirurgia)
              and  coalesce(ie_finaliza_integracao,'N') = 'S'
              and  coalesce(x.ie_situacao,'A')  = 'A'
              and  coalesce(y.ie_situacao,'A')  = 'A'
              and d.dt_registro > x.dt_registro);
  else
    select	count(*)
      into STRICT	qt_setor_integrado_w
      from	atend_paciente_unidade a,
          unidade_atendimento b
      where	a.nr_atendimento = nr_atendimento_w
      and		a.cd_setor_atendimento = b.cd_setor_atendimento
      and		a.cd_unidade_basica = b.cd_unidade_basica
      and		upper(b.nm_setor_integracao) = upper(cd_setor_atendimento_p)
      and		trim(both upper(b.nm_leito_integracao)) = trim(both upper(cd_unidade_compl_p))
      and		coalesce(b.ie_leito_monitorado,'N') = 'S'
      and		dt_sinal_vital_w between a.dt_entrada_unidade and coalesce(a.dt_saida_unidade, dt_sinal_vital_w);
  end if;
end if;

select	max(nr_cirurgia)
into STRICT	nr_cirurgia_ww
from	cirurgia
where	nr_atendimento = nr_atendimento_w;

IF	(nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '' AND qt_setor_integrado_w >  0) and
	((coalesce(ie_tem_sv_periodo_w,'N') = 'N' and qt_min_philips_w > 0)
	or (qt_min_philips_w = 0)) then

	for i in 1..Vetor_w.count loop
		begin
		if	((REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'AR(1|2|3|4|5|6|7|8)-S')) or (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'ABP(1|2|3|4|5|6|7|8)-S')) or (Vetor_w[i].nm_sinal_vital	= 'NBP-S')) then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_SISTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_SIST',Vetor_w[i].vl_sinal_vital);
			if (Vetor_w[i].nm_sinal_vital	= 'NBP-S') then
				atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','E');
			else
				atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_APARELHO_PA','I');
			end if;
			
		elsif	((REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'AR(1|2|3|4|5|6|7|8)-D'))  or (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'ABP(1|2|3|4|5|6|7|8)-D')) or (Vetor_w[i].nm_sinal_vital	= 'NBP-D')) then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_DIASTOLICA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_DIAST',Vetor_w[i].vl_sinal_vital);

		elsif (Vetor_w[i].nm_sinal_vital	= 'SPO2-R') then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SPO2R',Vetor_w[i].vl_sinal_vital);

		elsif	((REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'AR(1|2|3|4|5|6|7|8)-M')) or (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'ABP(1|2|3|4|5|6|7|8)-M')) or (Vetor_w[i].nm_sinal_vital	= 'NBP-M')) then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PAM',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PAM',Vetor_w[i].vl_sinal_vital);
			
		elsif	((REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'AR(1|2|3|4|5|6|7|8)-R')) or (Vetor_w[i].nm_sinal_vital	= 'HR')) then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_CARDIACA',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_FC',Vetor_w[i].vl_sinal_vital);	
			
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-I') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D1');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-II') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D2');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-III') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','D3');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-V') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V1');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-V1') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V1');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-V2') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V2');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-V3') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V3');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-V4') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V4');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-V5') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V5');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-V6') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V6');
			
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-dV2') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V2');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-dV3') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V3');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-dV4') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V4');
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-dV6') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','V6');
						
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-AVR') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','aVR');		
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-AVL') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','aVL');	
		elsif (Vetor_w[i].nm_sinal_vital	= 'ST-AVF') then	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_DERIVACAO_SEG_ST','aVF');
				
		elsif (Vetor_w[i].nm_sinal_vital	= 'FiO2')  then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FIO2',Vetor_w[i].vl_sinal_vital);
			
		elsif (Vetor_w[i].nm_sinal_vital	= 'Temp') then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);

		elsif	((Vetor_w[i].nm_sinal_vital	= 'PEEP') or (Vetor_w[i].nm_sinal_vital	= 'rPEEP')) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_PEEP',Vetor_w[i].vl_sinal_vital);
			
		elsif (Vetor_w[i].nm_sinal_vital	= 'RR') then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_RESP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FREQ_RESP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_sinal_vital	= 'CO2-RR') then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FR_CO2',Vetor_w[i].vl_sinal_vital);

		elsif	((Vetor_w[i].nm_sinal_vital	= 'SaO2') or (Vetor_w[i].nm_sinal_vital	= 'SPO2-%')) then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SATURACAO_O2',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_SATURACAO_O2',Vetor_w[i].vl_sinal_vital);

		elsif	((Vetor_w[i].nm_sinal_vital	= 'PIP') or (Vetor_w[i].nm_sinal_vital	= 'rPIP')) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_PIP',Vetor_w[i].vl_sinal_vital);

		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP(1|6|8)-(1|2)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TMP-(1|2)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);		
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '(c)?BT'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_AWAY(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);

		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_AXIL(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO','1');	
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_FOLEY(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO','7');	
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_CORE(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);

		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP1-1'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);		
				
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_ESO(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO','2');	
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_MYO(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);			
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_NASAL(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);			
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_NASOPH(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO','6');	
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_RECT(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO','3');	
				
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_SKIN(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO','4');		
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_BODY(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);	
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO','4');		
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TP_TYMP(1|2|3|4)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_SITIO','5');
		
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'ICP(1|2|3|4|5|6|7|8)'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PRESSAO_INTRA_CRANIO',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'SRV'))  then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_RV_SISTEMICA',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'SVR'))  then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_RV_SISTEMICA',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'SRVI'))  then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','TX_RV_SISTEMICA',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'SVRI'))  then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','TX_RV_SISTEMICA',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'SvO2'))  then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_SAT_VENOSA_O2',Vetor_w[i].vl_sinal_vital);
			
	    elsif	((Vetor_w[i].nm_sinal_vital	= 'CI') or (Vetor_w[i].nm_sinal_vital	= 'cCCI')) then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','TX_INDICE_CARD',Vetor_w[i].vl_sinal_vital);
		
	    elsif	((Vetor_w[i].nm_sinal_vital	= 'CO') or (Vetor_w[i].nm_sinal_vital	= 'cCCo')) then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_DEBITO_CARD',Vetor_w[i].vl_sinal_vital);

		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'CO2-EX'))  then /*'MDC_CONC_AWAY_CO2_EXP,151712'*/
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_CO2',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'MAC'))  then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_CAM',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'CO2-IN'))  then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_ICO2',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'rMVs')) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_VMIN_PARCIAL',Vetor_w[i].vl_sinal_vital);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_VMIN',Vetor_w[i].vl_sinal_vital);
		
		elsif	((REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'rMV')) or (Vetor_w[i].nm_sinal_vital	= 'rMVm') or (Vetor_w[i].nm_sinal_vital	= 'SPO-MV')) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_VMIN',Vetor_w[i].vl_sinal_vital);
			if (Vetor_w[i].nm_sinal_vital	= 'SPO-MV') then
				atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_RESPIRACAO','ESPONT');
			end if;
						
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'CO2-RR')) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FR_CO2',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'rRAWe')) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_RSR',Vetor_w[i].vl_sinal_vital);

		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'INSP')) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_TI',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'PCP')) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_PC',Vetor_w[i].vl_sinal_vital);		
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'rTV')) /*era TV_INSP, alterado devido solicitacao na ordem 1487375*/
				or (UPPER(Vetor_w[i].nm_sinal_vital) = 'TV-IN') then /*'MDC_VENT_VOL_TIDAL_INSP,0' CO2_EX*/
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_VCI',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'rMAWP'))  then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_LIMITE_PA_MAX',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'rCDYN'))  then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_CDYN',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'TVset'))  then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_VC_PROG',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'VNT-RR'))  then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_FREQ_VENT',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'I:Eset'))  then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_TI_TE',Vetor_w[i].vl_sinal_vital);
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'PPLAT'))  then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_PPLATO',Vetor_w[i].vl_sinal_vital);	
		elsif (Vetor_w[i].nm_sinal_vital	= 'SEV-EX') then /*MDC_AWAY_SEVOFL_EXP,152308*/
			begin
			qt_Sevofl_halog_exp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 2; 			
			end if;
			end;			
		elsif (Vetor_w[i].nm_sinal_vital	= 'SEV-IN') then /*MDC_CONC_AWAY_SEVOFL_INSP_152180*/
			begin
			qt_Sevofl_halog_insp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 2; 			
			end if;
			end;
		elsif (Vetor_w[i].nm_sinal_vital	= 'O2-EX') then	/* inO2 MDC_AWAY_O2_EXP,151748*/
			begin
			ie_inO2_w := 'S';
			vl_sinal_vital_inO2_w := Vetor_w[i].vl_sinal_vital;
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_OXIG_EXP',Vetor_w[i].vl_sinal_vital);
			end;			
		elsif (Vetor_w[i].nm_sinal_vital	= 'O2-IN') then	/* inO2 MDC_AWAY_O2_EXP,151748*/
			begin
			ie_inO2_w := 'S';
			vl_sinal_vital_inO2_w := Vetor_w[i].vl_sinal_vital;
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_OXIG_INS',Vetor_w[i].vl_sinal_vital);	
			end;
		elsif (Vetor_w[i].nm_sinal_vital	= 'N2O-IN') then	/* inN2O MDC_CONC_AWAY_N2O_INSP,152192*/
			begin
			ie_inN2O_w := 'S';
			vl_sinal_vital_inN2O_w := Vetor_w[i].vl_sinal_vital;
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_OXIDO_NITROSO_INSP',Vetor_w[i].vl_sinal_vital);
			end;
		elsif (Vetor_w[i].nm_sinal_vital	= 'N2O-EX') then	/* inN2O MDC_CONC_AWAY_N2O_INSP,152192*/
			begin
			ie_inN2O_w	:= 'S';
			vl_sinal_vital_inN2O_w := Vetor_w[i].vl_sinal_vital;
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_OXIDO_NITROSO_EXP',Vetor_w[i].vl_sinal_vital);
			end;
		elsif (Vetor_w[i].nm_sinal_vital	= 'SEV-DLV') then /*MDC_VOL_DELIV_SEVOFL_LIQUID_CASE,0*/
			begin
			ie_sevo_w := 'S';
			qt_utilizada_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 2; 	
			end if;
			end;
			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'SR'))  then
			atualizar_valor_sv('ATEND_AVAL_ANALGESIA','QT_TX_SUPRESSAO',Vetor_w[i].vl_sinal_vital);			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'EMG'))   then
			atualizar_valor_sv('ATEND_AVAL_ANALGESIA','QT_POTENCIA_EMG',Vetor_w[i].vl_sinal_vital);	
		
		elsif (Vetor_w[i].nm_sinal_vital	= 'FE#-S') or (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'FE(1|2|3|4|5|6|7|8)-S')) then /*Pressao arterial sistolica - invasiva*/
			begin
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_SIST_FEM',Vetor_w[i].vl_sinal_vital);
			end;	
		elsif (Vetor_w[i].nm_sinal_vital	= 'FE#-D') or (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'FE(1|2|3|4|5|6|7|8)-D')) then /*Pressao arterial diastolica - invasiva*/
			begin
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_DIAST_FEM',Vetor_w[i].vl_sinal_vital);
			end;	
		elsif (Vetor_w[i].nm_sinal_vital	= 'FE#-M') or (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'FE(1|2|3|4|5|6|7|8)-M')) then /*Pressao arterial media - invasiva*/
			begin
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_MEDIA_FEM',Vetor_w[i].vl_sinal_vital);
			end;				
		elsif (Vetor_w[i].nm_sinal_vital =  'BIS')  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_MAEC',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_sinal_vital =  'TV')  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_VCI',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_sinal_vital =  'MAWP')  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PVA',Vetor_w[i].vl_sinal_vital);
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'CVP(1|2|3|4|5|6|7|8)') or (Vetor_w[i].nm_sinal_vital	= 'CVP'))  then
			atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PVC',Vetor_w[i].vl_sinal_vital);
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'PA(1|2|3|4|5|6|7|8)-S')) then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_SIST_AP',Vetor_w[i].vl_sinal_vital);			
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'PA(1|2|3|4|5|6|7|8)-D')) then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_DIAST_AP',Vetor_w[i].vl_sinal_vital);
		elsif (REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'PA(1|2|3|4|5|6|7|8)-M')) then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_MEDIA_AP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_sinal_vital	= 'PAW') then
			atualizar_valor_sv('ATEND_MONIT_HEMOD','QT_PA_OCLUIDA_AP',Vetor_w[i].vl_sinal_vital);
		elsif (Vetor_w[i].nm_sinal_vital	= 'ISO-IN') then
			qt_Isoflurano_halog_insp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 1;	
			end if;
		elsif (Vetor_w[i].nm_sinal_vital	= 'ISO-EX') then
			qt_Isoflurano_halog_exp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 1;		
			end if;
		elsif (Vetor_w[i].nm_sinal_vital	= 'ISO-DLV') then
			qt_Isoflurano_utilizada_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 1; 	
			end if;
		elsif (Vetor_w[i].nm_sinal_vital	= 'HAL-IN') then
			qt_Halotano_halog_insp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 3;	
			end if;
		elsif (Vetor_w[i].nm_sinal_vital	= 'HAL-EX') then
			qt_Halotano_halog_exp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 3;		
			end if;
		elsif (Vetor_w[i].nm_sinal_vital	= 'HAL-DLV') then
			begin
			qt_Halotano_utilizada_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 3; 	
			end if;
			end;	
		elsif (Vetor_w[i].nm_sinal_vital	= 'ENF-IN') then
			qt_Enfluorano_halog_insp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 4;	
			end if;
		elsif (Vetor_w[i].nm_sinal_vital	= 'ENF-EX') then
			qt_Enfluorano_halog_exp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 4;		
			end if;
		elsif (Vetor_w[i].nm_sinal_vital	= 'ENF-DLV') then
			begin
			qt_Enfluorano_utilizada_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 4; 	
			end if;
			end;	
		elsif (Vetor_w[i].nm_sinal_vital	= 'DES-IN') then
			qt_Desflurano_halog_insp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 5;	
			end if;
		elsif (Vetor_w[i].nm_sinal_vital	= 'DES-EX') then
			qt_Desflurano_halog_exp_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 5;		
			end if;
		elsif (Vetor_w[i].nm_sinal_vital	= 'DES-DLV') then
			begin
			qt_Desflurano_utilizada_w := Vetor_w[i].vl_sinal_vital;
			if (coalesce(somente_numero(Vetor_w[i].vl_sinal_vital),0) > 0 ) then
				ie_tipo_Halogenado_w := 5; 	
			end if;
			end;
			
		end if;	


		end;
	end loop;


	if (coalesce(ie_tipo_Halogenado_w,0) > 0) then
		begin
		
		if (coalesce(ie_tipo_Halogenado_w,0) = 1) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Isoflurano_halog_insp_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Isoflurano_halog_exp_w);
			qt_utilizada_w := qt_Isoflurano_utilizada_w;
			qt_halog_insp_w := qt_Isoflurano_halog_insp_w;
		elsif (coalesce(ie_tipo_Halogenado_w,0) = 2) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Sevofl_halog_insp_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Sevofl_halog_exp_w);
			qt_utilizada_w := qt_Sevofl_utilizada_w;
			qt_halog_insp_w := qt_Sevofl_halog_insp_w;
		elsif (coalesce(ie_tipo_Halogenado_w,0) = 3) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Halotano_halog_insp_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Halotano_halog_exp_w);
			qt_utilizada_w := qt_Halotano_utilizada_w;
			qt_halog_insp_w := qt_Halotano_halog_insp_w;
		elsif (coalesce(ie_tipo_Halogenado_w,0) = 4) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Enfluorano_halog_insp_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Enfluorano_halog_exp_w);
			qt_utilizada_w := qt_Enfluorano_utilizada_w;
			qt_halog_insp_w := qt_Enfluorano_halog_insp_w;
		elsif (coalesce(ie_tipo_Halogenado_w,0) = 5) then
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','IE_HALOG_TIPO', ie_tipo_Halogenado_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_INS', qt_Desflurano_halog_insp_w);
			atualizar_valor_sv('ATENDIMENTO_MONIT_RESP','QT_HALOG_EXP', qt_Desflurano_halog_exp_w);
			qt_utilizada_w := qt_Desflurano_utilizada_w;
			qt_halog_insp_w := qt_Desflurano_halog_insp_w;
		end if;
		
		
		if (ie_sevo_w = 'S') then
			begin
			
			if (coalesce(ie_tipo_Halogenado_w,0) = 2) then
				qt_utilizada_w := qt_Sevofl_utilizada_w;
				if (somente_numero(qt_Sevofl_halog_insp_w) = 0) then
				CALL atualizar_registro_adm_sevo(2, qt_utilizada_w, nr_cirurgia_ww);
					qt_utilizada_w:= 0;
				end if;
			end if;			

			if (somente_numero(qt_utilizada_w) > 0) and (obter_se_existe_agente(4,nr_cirurgia_ww) = 'S') and (obter_se_agente_ja_adm(4,nr_cirurgia_ww) = 'N') then
				CALL inserir_adm_agente_anestesico(4,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);
			elsif (somente_numero(qt_utilizada_w) > 0) and (obter_se_existe_agente(4,nr_cirurgia_ww) = 'S') and (obter_se_agente_ja_adm(4,nr_cirurgia_ww) = 'S') then
				CALL atualizar_adm_agente_anest(4,nr_cirurgia_ww);
				CALL inserir_adm_agente_anestesico(4,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);
			elsif (somente_numero(qt_utilizada_w) > 0) and (obter_se_existe_agente(4,nr_cirurgia_ww) = 'N') then
				CALL inserir_cir_agente_anest(4,	nr_cirurgia_ww,
								vl_sinal_vital_inO2_w,
								cd_estabelecimento_w);
				CALL inserir_adm_agente_anestesico(4,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);
			elsif (obter_se_existe_agente(4,nr_cirurgia_ww) = 'S') and (obter_se_agente_ja_adm(4,nr_cirurgia_ww) = 'S') then
				CALL atualizar_adm_agente_anest(4,nr_cirurgia_ww);	
			end if;	
			
			end;
		end if;


		
		select	count(1)
		into STRICT	qt_reg_w
		from	agente_anestesico
		where	ie_situacao = 'A'
		and	coalesce(cd_estabelecimento, cd_estabelecimento_w) =  cd_estabelecimento_w
		and	IE_HALOG_TIPO	= ie_tipo_Halogenado_w;
		
		if (qt_reg_w	> 0) then
			--Este if serve para definir caso tenha o registro individual do halogenado como agente anestesico.

			--Ele ira fazer todo o processo normal, passando o IE_TIPO_HALOGENADO, para os inserts

			-- No final a variavel e limpa, para que faca a busca dos gases Oxigenio e Nitrogenio nas proximas rotinas

			-- OS 2180756
		
				if (ie_inN2O_w = 'S') then
					begin
					if (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
						CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, qt_utilizada_w, qt_halog_insp_w);
					elsif (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (vl_sinal_vital_inN2O_w <> obter_vl_agente_adm(2,nr_cirurgia_ww)) then
						CALL atualizar_adm_agente_anest(2,nr_cirurgia_ww);
						CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, qt_utilizada_w, qt_halog_insp_w);
					elsif (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
						CALL inserir_cir_agente_anest(2,	nr_cirurgia_ww,
												 vl_sinal_vital_inN2O_w,
												 cd_estabelecimento_w);
						CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, qt_utilizada_w, qt_halog_insp_w);
					elsif (somente_numero(vl_sinal_vital_inN2O_w) = 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') then
						CALL atualizar_adm_agente_anest(2,nr_cirurgia_ww);	
					end if;			

					
					end;
					
				end if;
				if (ie_inO2_w = 'S') then
					begin
					if (somente_numero(vl_sinal_vital_inO2_w) > 0) and (obter_se_existe_agente(3,nr_cirurgia_ww) = 'S') and (obter_se_agente_ja_adm(3,nr_cirurgia_ww) = 'N') then
						CALL inserir_adm_agente_anestesico(3,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);
						
					elsif (somente_numero(vl_sinal_vital_inO2_w) > 0) and (obter_se_existe_agente(3,nr_cirurgia_ww) = 'S') and (obter_se_agente_ja_adm(3,nr_cirurgia_ww) = 'S') and (vl_sinal_vital_inO2_w <> obter_vl_agente_adm(3,nr_cirurgia_ww)) then
						CALL atualizar_adm_agente_anest(3,nr_cirurgia_ww);
						CALL inserir_adm_agente_anestesico(3,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);	
					elsif (somente_numero(vl_sinal_vital_inO2_w) > 0) and (obter_se_existe_agente(3,nr_cirurgia_ww) = 'N') then
						CALL inserir_cir_agente_anest(3,	nr_cirurgia_ww,
												vl_sinal_vital_inO2_w,
												cd_estabelecimento_w);
						CALL inserir_adm_agente_anestesico(3,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);	
					elsif (somente_numero(vl_sinal_vital_inO2_w) = 0) and (obter_se_existe_agente(3,nr_cirurgia_ww) = 'S') and (obter_se_agente_ja_adm(3,nr_cirurgia_ww) = 'S') then
						CALL atualizar_adm_agente_anest(3,nr_cirurgia_ww);
					end if;	
					
					end;
				end if;
				
			ie_tipo_Halogenado_w	:= null; --Aqui limpamos a variavel do halogenado, para que nas proximas rotinas, somente busque o Gas Oxigenio e Nitrogenio
		
		end if;
		
		
		if (ie_inN2O_w = 'S') then
			begin
			if (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, qt_utilizada_w, qt_halog_insp_w);
			elsif (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (vl_sinal_vital_inN2O_w <> obter_vl_agente_adm(2,nr_cirurgia_ww)) then
				CALL atualizar_adm_agente_anest(2,nr_cirurgia_ww);
				CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, qt_utilizada_w, qt_halog_insp_w);
			elsif (somente_numero(vl_sinal_vital_inN2O_w) > 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'N') then
				CALL inserir_cir_agente_anest(2,	nr_cirurgia_ww,
										 vl_sinal_vital_inN2O_w,
										 cd_estabelecimento_w);
				CALL inserir_adm_agente_anestesico(2,nr_cirurgia_ww, vl_sinal_vital_inN2O_w, qt_utilizada_w, qt_halog_insp_w);
			elsif (somente_numero(vl_sinal_vital_inN2O_w) = 0) and (obter_se_existe_agente(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') and (obter_se_agente_ja_adm(2,nr_cirurgia_ww, cd_estabelecimento_w) = 'S') then
				CALL atualizar_adm_agente_anest(2,nr_cirurgia_ww);	
			end if;			

			
			end;
			
		end if;
		if (ie_inO2_w = 'S') then
			begin
			if (somente_numero(vl_sinal_vital_inO2_w) > 0) and (obter_se_existe_agente(3,nr_cirurgia_ww) = 'S') and (obter_se_agente_ja_adm(3,nr_cirurgia_ww) = 'N') then
				CALL inserir_adm_agente_anestesico(3,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);
				
			elsif (somente_numero(vl_sinal_vital_inO2_w) > 0) and (obter_se_existe_agente(3,nr_cirurgia_ww) = 'S') and (obter_se_agente_ja_adm(3,nr_cirurgia_ww) = 'S') and (vl_sinal_vital_inO2_w <> obter_vl_agente_adm(3,nr_cirurgia_ww)) then
				CALL atualizar_adm_agente_anest(3,nr_cirurgia_ww);
				CALL inserir_adm_agente_anestesico(3,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);	
			elsif (somente_numero(vl_sinal_vital_inO2_w) > 0) and (obter_se_existe_agente(3,nr_cirurgia_ww) = 'N') then
				CALL inserir_cir_agente_anest(3,	nr_cirurgia_ww,
										vl_sinal_vital_inO2_w,
										cd_estabelecimento_w);
				CALL inserir_adm_agente_anestesico(3,nr_cirurgia_ww, vl_sinal_vital_inO2_w, qt_utilizada_w, qt_halog_insp_w);	
			elsif (somente_numero(vl_sinal_vital_inO2_w) = 0) and (obter_se_existe_agente(3,nr_cirurgia_ww) = 'S') and (obter_se_agente_ja_adm(3,nr_cirurgia_ww) = 'S') then
				CALL atualizar_adm_agente_anest(3,nr_cirurgia_ww);
			end if;	
			
			end;
		end if;
		

		
		end;
	end if;	
	
end if;

commit;

	if (coalesce(nr_seq_sinal_vital_w,0) > 0) then
		begin
		ie_exige_aprovacao_w := obter_param_usuario(281, 1493, 0, nm_usuario_p, cd_estabelecimento_w, ie_exige_aprovacao_w);

		case ie_exige_aprovacao_w

			when ExigeAprovacaoSim then
                null;

			when ExigeAprovacaoNao then

				update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
				update atendimento_monit_resp  set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_resp_w;
				update atend_monit_hemod       set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_hemo_w;
				commit;

			when ExigeAprovacaoForaFaixa then

				SELECT * FROM consiste_itens_sinal_vital(nr_seq_sinal_vital_w, ds_retorno_valida_sv_w, ie_retorno_valida_sv_w) INTO STRICT ds_retorno_valida_sv_w, ie_retorno_valida_sv_w;

				if (ie_retorno_valida_sv_w <> 'E' AND ie_retorno_valida_sv_w <> 'A')then

					update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
					update atendimento_monit_resp  set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_resp_w;
					update atend_monit_hemod       set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_hemo_w;
					commit;

				end if;
			else

				update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
				update atendimento_monit_resp  set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_resp_w;
				update atend_monit_hemod       set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_hemo_w;
				commit;

		end case;
		exception
		when others then
			update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
			update atendimento_monit_resp  set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_resp_w;
			update atend_monit_hemod       set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_hemo_w;
			commit;
		end;
	end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_sinal_vital_ge ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, cd_setor_atendimento_p text default null, cd_unidade_compl_p text default null, cd_unidade_basica_p text default null, nr_atendimento_p bigint default null) FROM PUBLIC;

