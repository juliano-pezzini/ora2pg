-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_eis_censo_sub_ind_setor ( cd_estabelecimento_p bigint, dt_inicial_param_p timestamp, dt_final_param_p timestamp, nm_usuario_p text, nr_dias_censo_p bigint, nr_seq_ind_gestao_p bigint, qt_dias_censo_p bigint, qt_meses_p bigint) AS $body$
DECLARE


/*
Indicador: CENSO
Sub-indicador: Subindicador setor
nr_seq_ind_gestao_p: 71
*/
qt_ocupacao_w		bigint;
qt_ocup_novo_w		bigint;
ocup_sem_temp_w		bigint;
ocup_novo_sem_temp_w	bigint;
ie_padroniza__censo_w	parametro_atendimento.ie_calculo_tx_ocup%type;

C01 CURSOR FOR
	SELECT	1 ordem,
			cd_setor cd_setor_atendimento,
			SUM(NR_U_TEMP) qt_temp,
			ds_setor ds_setor,
			obter_unidades_setor_dt(cd_setor, MAX(dt_ref)) nr_leitos,
			(SUM(nr_le_oc) / AVG(nr_dias_censo_p) / qt_meses_p) qt_media_pac,
			CASE WHEN SUM(nr_altas + nr_transf_saida + nr_obitos)=0 THEN  0  ELSE SUM(nr_le_oc) / SUM(nr_altas + nr_transf_saida + nr_obitos) END  qt_media_perm,
			CASE WHEN SUM(nr_altas + nr_obitos)=0 THEN  0  ELSE SUM(nr_le_oc) / SUM(nr_altas + nr_obitos) END  qt_media_perm_alta,
			CASE WHEN SUM((nr_le_oc + nr_lto_liv) - nr_u_int)=0 THEN  0  ELSE SUM(nr_altas + nr_transf_saida + nr_obitos) / (SUM(nr_le_oc + nr_lto_liv) / AVG(nr_dias_censo_p)) END  qt_giro,
				SUM((nr_le_oc + nr_lto_liv) - nr_u_int) qt_ocupacao,
				SUM(nr_le_oc + nr_lto_liv) qt_ocup_novo,
				(SUM((nr_le_oc + nr_lto_liv) - nr_u_int) - SUM(NR_U_TEMP)) ocup_sem_temp,
				(SUM(nr_le_oc + nr_lto_liv) - SUM(NR_U_TEMP)) ocup_novo_sem_temp,
			(SUM(nr_le_oc) / qt_meses_p) qt_pac_dia,
			(SUM((nr_lto_liv) - nr_u_int) / qt_meses_p) qt_lto_liv,
			(SUM(nr_altas + nr_transf_saida + nr_obitos) / qt_meses_p) qt_saidas,
			AVG(nr_dias_censo_p) qt_dias,
			(SUM((nr_le_oc + nr_lto_liv) - nr_u_int) / AVG(nr_dias_censo_p) / qt_meses_p) qt_media_leito,
			CASE WHEN SUM(nr_altas + nr_transf_saida + nr_obitos)=0 THEN  0  ELSE SUM(nr_obitos * 100) / SUM(nr_altas + nr_transf_saida + nr_obitos) END  qt_media_obito,
			(dividir(SUM(qt_disp), SUM(nr_u_setor)) * 100) qt_disp,
			((dividir((SUM(nr_u_setor) - SUM(qt_disp)), SUM(nr_u_setor)) * 100)) qt_ind,
			dividir(SUM(nr_u_ocup * 100), SUM(nr_u_setor - nr_u_temp)) pr_olf,
			dividir(SUM((nr_u_ocup + nr_u_t_ocup) * 100), SUM(((nr_u_setor - nr_u_temp) + nr_u_temp) - nr_u_int)) pr_ohr,
			SUM(NR_LE_OC) NR_LE_OC
	FROM 	eis_indicador_setor_v a
	WHERE 	dt_ref BETWEEN dt_inicial_param_p AND fim_dia(dt_final_param_p)
	AND 	ie_periodo  	= 'D'
	AND 	cd_estab    	= cd_estabelecimento_p
	AND 	ie_ocup_hosp	= 'S'
	GROUP BY	cd_setor,
				ds_setor
	HAVING(AVG(nr_dias_censo_p) > 0)
	AND			(SUM((nr_le_oc + NR_Lto_Liv) - nr_u_int) > 0)
	
UNION

	SELECT	2 ordem,
			0 cd_setor_atendimento,
			SUM(NR_U_TEMP) qt_temp,
			'   ' || wheb_mensagem_pck.get_texto(795206) ds_setor,
			x.NR_LEITOS nr_leitos,
			(SUM(nr_le_oc) / AVG(nr_dias_censo_p) / qt_meses_p) qt_media_pac,
			CASE WHEN SUM(nr_altas + nr_transf_saida + nr_obitos)=0 THEN  0  ELSE SUM(nr_le_oc) / SUM(nr_altas + nr_transf_saida + nr_obitos) END  qt_media_perm,
			CASE WHEN SUM(nr_altas + nr_obitos)=0 THEN  0  ELSE SUM(nr_le_oc) / SUM(nr_altas + nr_obitos) END  qt_media_perm_alta,
			CASE WHEN SUM((nr_le_oc + nr_lto_liv) - nr_u_int)=0 THEN  0  ELSE SUM(nr_altas + nr_transf_saida + nr_obitos) / (SUM(nr_le_oc + nr_lto_liv) / AVG(nr_dias_censo_p)) END  qt_giro,
			CASE WHEN ie_padroniza__censo_w='N' THEN  SUM((nr_le_oc + nr_lto_liv) - nr_u_int)  ELSE eis_obter_ocup_setor(NULL, dt_inicial_param_p, fim_dia(dt_final_param_p), cd_estabelecimento_p) END  qt_ocupacao,
			CASE WHEN ie_padroniza__censo_w='N' THEN  SUM(nr_le_oc + nr_lto_liv)  ELSE eis_obter_ocup_setor(NULL, dt_inicial_param_p, fim_dia(dt_final_param_p), cd_estabelecimento_p) END  qt_ocup_novo,
			(CASE WHEN ie_padroniza__censo_w='N' THEN  SUM((nr_le_oc + nr_lto_liv) - nr_u_int) - SUM(NR_U_TEMP)  ELSE eis_obter_ocup_setor(NULL, dt_inicial_param_p, fim_dia(dt_final_param_p), cd_estabelecimento_p,'OSTI') END ) ocup_sem_temp,
			(CASE WHEN ie_padroniza__censo_w='N' THEN  SUM(nr_le_oc + nr_lto_liv) - SUM(NR_U_TEMP)  ELSE eis_obter_ocup_setor(NULL, dt_inicial_param_p, fim_dia(dt_final_param_p), cd_estabelecimento_p,'OST') END ) ocup_novo_sem_temp,
			(SUM(nr_le_oc) / qt_meses_p) qt_pac_dia,
			(SUM(nr_lto_liv - nr_u_int) / qt_meses_p) qt_lto_liv,
			(SUM(nr_altas + nr_transf_saida + nr_obitos) / qt_meses_p) qt_saidas,
			AVG(nr_dias_censo_p) qt_dias,
			(SUM((nr_le_oc + nr_lto_liv) - nr_u_int) / AVG(nr_dias_censo_p) / qt_meses_p) qt_media_leito,
			CASE WHEN SUM(nr_altas + nr_transf_saida + nr_obitos)=0 THEN  0  ELSE SUM(nr_obitos * 100) / SUM(nr_altas + nr_transf_saida + nr_obitos) END  qt_media_obito,
			(SUM(qt_disp) / SUM(nr_u_setor) * 100) qt_disp,
			((dividir((SUM(nr_u_setor) - SUM(qt_disp)), SUM(nr_u_setor)) * 100)) qt_ind,
			dividir(SUM(nr_u_ocup * 100), SUM(nr_u_setor - nr_u_temp)) pr_olf,
			dividir(SUM((nr_u_ocup + nr_u_t_ocup) * 100), SUM(((nr_u_setor - nr_u_temp) + nr_u_temp) - nr_u_int)) pr_ohr,
			SUM(NR_LE_OC) NR_LE_OC
	FROM 	eis_indicador_setor_v a,
			(	SELECT 	SUM(OBTER_UNIDADES_SETOR_DT(cd_setor,MAX(DT_REF)))NR_LEITOS
				FROM 	eis_indicador_setor_v A
				WHERE 	DT_REF BETWEEN dt_inicial_param_p AND fim_dia(dt_final_param_p)
				AND 	IE_PERIODO 		= 'D'
				AND 	CD_ESTAB 		= cd_estabelecimento_p
				AND 	IE_OCUP_HOSP	= 'S'
				GROUP BY	cd_setor
				HAVING(AVG(nr_dias_censo_p) > 0)
				AND		(SUM((nr_le_oc + nr_lto_liv) - nr_u_int) > 0)
			)x
	WHERE 	dt_ref BETWEEN dt_inicial_param_p AND fim_dia(dt_final_param_p)
	AND 	ie_periodo  	= 'D'
	AND 	cd_estab    	= cd_estabelecimento_p
	AND 	ie_ocup_hosp	= 'S'
	GROUP BY	x.NR_LEITOS
	HAVING(AVG(nr_dias_censo_p) > 0)
	AND			(SUM((nr_le_oc + nr_lto_liv) - nr_u_int) > 0)
	ORDER BY 	1,
				2;

/*
Indicador: CENSO - Novo
Sub-indicador: Subindicador setor
nr_seq_ind_gestao_p: 1180
*/
C02 CURSOR FOR
	SELECT 	1 ordem,
			cd_setor_atendimento cd_setor_atendimento,
			sum(NR_UNIDADES_TEMPORARIAS) qt_temp,
			ds_setor_atendimento ds_setor_atendimento,
			obter_unidades_setor_dt(cd_setor_atendimento, max(dt_referencia)) nr_leitos,
			(sum(nr_le_oc) / avg(nr_dias_censo_p) / qt_meses_p) qt_media_pacientes,
			CASE WHEN sum(nr_altas + nr_transf_saida + nr_obitos)=0 THEN  0  ELSE sum(nr_le_oc) / sum(nr_altas + nr_transf_saida + nr_obitos) END  qt_media_perm,
			CASE WHEN sum(nr_altas + nr_obitos)=0 THEN  0  ELSE sum(nr_le_oc) / sum(nr_altas + nr_obitos) END  qt_media_perm_alta,
			CASE WHEN sum((nr_le_oc + nr_leitos_livres) - nr_un_int)=0 THEN  0  ELSE sum(nr_altas + nr_transf_saida + nr_obitos) / (sum(nr_le_oc + nr_leitos_livres) / avg(nr_dias_censo_p)) END  qt_giro,
			(sum(nr_le_oc) * 100) / sum((nr_le_oc + nr_leitos_livres) - nr_un_int) qt_ocupacao,
			(sum(nr_le_oc) / qt_meses_p) qt_pacientes_dia,
			(sum((nr_leitos_livres) - nr_un_int) / qt_meses_p) qt_leitos_livres,
			(sum(nr_altas + nr_transf_saida + nr_obitos) / qt_meses_p) qt_saidas,
			avg(nr_dias_censo_p) qt_dias_periodo,
			(sum((nr_le_oc + nr_leitos_livres) - nr_un_int) / avg(nr_dias_censo_p) / qt_meses_p) qt_media_leito,
			CASE WHEN sum(nr_altas + nr_transf_saida + nr_obitos)=0 THEN  0  ELSE sum(nr_obitos * 100) / sum(nr_altas + nr_transf_saida + nr_obitos) END  qt_media_obito,
			(dividir(SUM(qt_disponiveis), SUM(nr_unidades_setor)) * 100) qt_disp,
			((dividir((sum(nr_unidades_setor) - sum(qt_disponiveis)), sum(nr_unidades_setor)) * 100)) qt_ind,
			dividir(sum(nr_unidades_ocupadas * 100), sum(nr_unidades_setor - nr_unidades_temporarias)) pr_olf,
			dividir(sum((nr_unidades_ocupadas + nr_unid_temp_ocup) * 100), sum(((nr_unidades_setor - nr_unidades_temporarias) + nr_unidades_temporarias) - nr_un_int)) pr_ohr,
			sum(NR_LE_OC) NR_LE_OC
	from 	eis_ocupacao_setor_v a
	where 	dt_referencia between dt_inicial_param_p and fim_dia(dt_final_param_p)
	and 	ie_periodo        	= 'D'
	and 	cd_estabelecimento	= cd_estabelecimento_p
	and 	ie_ocup_hospitalar	= 'S'
	group by	cd_setor_atendimento,
				ds_setor_atendimento
	having(avg(nr_dias_censo_p) > 0)
	and		(sum((nr_le_oc + nr_leitos_livres) - nr_un_int) > 0)
	
union

	SELECT 	2 ordem,
			0 cd_setor_atendimento,
			sum(NR_UNIDADES_TEMPORARIAS) qt_temp,
			'   ' || wheb_mensagem_pck.get_texto(795206) ds_setor_atendimento,
			x.NR_LEITOS nr_leitos,
			(sum(nr_le_oc) / avg(nr_dias_censo_p) / qt_meses_p) qt_media_pacientes,
			CASE WHEN sum(nr_altas + nr_transf_saida + nr_obitos)=0 THEN  0  ELSE sum(nr_le_oc) / sum(nr_altas + nr_transf_saida + nr_obitos) END  qt_media_perm,
			CASE WHEN sum(nr_altas + nr_obitos)=0 THEN  0  ELSE sum(nr_le_oc) / sum(nr_altas + nr_obitos) END  qt_media_perm_alta,
			CASE WHEN sum((nr_le_oc+nr_leitos_livres) - nr_un_int)=0 THEN  0  ELSE sum(nr_altas + nr_transf_saida + nr_obitos) / (sum(nr_le_oc + nr_leitos_livres) / avg(nr_dias_censo_p)) END  qt_giro,
			CASE WHEN obter_dados_param_atend(cd_estabelecimento_p, 'TO')='N' THEN (sum(nr_le_oc) * 100) / sum((nr_le_oc + nr_leitos_livres) - nr_un_int)  ELSE eis_obter_ocup_setor(null, dt_inicial_param_p, fim_dia(dt_final_param_p), cd_estabelecimento_p) END  qt_ocupacao,
			(sum(nr_le_oc) / qt_meses_p) qt_pacientes_dia,
			(sum(nr_leitos_livres - nr_un_int) / qt_meses_p) qt_leitos_livres,
			(sum(nr_altas + nr_transf_saida + nr_obitos) / qt_meses_p) qt_saidas,
			avg(nr_dias_censo_p) qt_dias_periodo,
			(sum((nr_le_oc + nr_leitos_livres) - nr_un_int) / avg(nr_dias_censo_p) / qt_meses_p) qt_media_leito,
			CASE WHEN sum(nr_altas + nr_transf_saida + nr_obitos)=0 THEN  0  ELSE sum(nr_obitos * 100) / sum(nr_altas + nr_transf_saida + nr_obitos) END  qt_media_obito,
			(sum(qt_disponiveis) / sum(nr_unidades_setor) * 100) qt_disp,
			((dividir((sum(nr_unidades_setor) - sum(qt_disponiveis)), sum(nr_unidades_setor)) * 100)) qt_ind,
			dividir(sum(nr_unidades_ocupadas * 100), sum(nr_unidades_setor - nr_unidades_temporarias)) pr_olf,
			dividir(sum((nr_unidades_ocupadas + nr_unid_temp_ocup) * 100), sum(((nr_unidades_setor - nr_unidades_temporarias) + nr_unidades_temporarias) - nr_un_int)) pr_ohr,
			sum(NR_LE_OC) NR_LE_OC
	from 	eis_ocupacao_setor_v a,
			(	select	sum(OBTER_UNIDADES_SETOR_DT(cd_setor_atendimento, MAX(DT_REFERENCIA))) NR_LEITOS
				FROM 	EIS_OCUPACAO_SETOR_V A
				WHERE 	DT_REFERENCIA BETWEEN dt_inicial_param_p AND fim_dia(dt_final_param_p)
				AND 	IE_PERIODO 			= 'D'
				AND 	CD_ESTABELECIMENTO	= cd_estabelecimento_p
				AND 	IE_OCUP_HOSPITALAR	= 'S'
				GROUP BY	cd_setor_atendimento
			)x
	where 	dt_referencia between dt_inicial_param_p and fim_dia(dt_final_param_p)
	and 	ie_periodo        	= 'D'
	and 	cd_estabelecimento	= cd_estabelecimento_p
	and 	ie_ocup_hospitalar	= 'S'
	group by	x.NR_LEITOS
	having(avg(nr_dias_censo_p) > 0)
	and		(sum((nr_le_oc + nr_leitos_livres) - nr_un_int) > 0)
	order by 	1,
				2;

c01_w			c01%rowtype;
c02_w			c02%rowtype;


BEGIN

delete	FROM w_EIS_censo_sub_ind_setor
where	NR_SEQ_IND_GESTAO = nr_seq_ind_gestao_p;

--where	nm_usuario = nm_usuario_p; Fica apresentando incorretamente
commit;

if (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') and (dt_inicial_param_p IS NOT NULL AND dt_inicial_param_p::text <> '') and (dt_final_param_p IS NOT NULL AND dt_final_param_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') and (nr_dias_censo_p IS NOT NULL AND nr_dias_censo_p::text <> '') and (nr_seq_ind_gestao_p IS NOT NULL AND nr_seq_ind_gestao_p::text <> '') and (qt_dias_censo_p IS NOT NULL AND qt_dias_censo_p::text <> '') and (qt_meses_p IS NOT NULL AND qt_meses_p::text <> '')then

	if (nr_seq_ind_gestao_p = 71)then

		select obter_dados_param_atend(cd_estabelecimento_p,'TO')
		into STRICT ie_padroniza__censo_w
		;

		open C01;
		loop
		fetch C01 into
			c01_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			if (c01_w.ordem = 1) or (ie_padroniza__censo_w = 'N') then
				if (c01_w.qt_ocupacao > 0) then
					qt_ocupacao_w 	:= 	(c01_w.NR_LE_OC * 100) / c01_w.qt_ocupacao;
				else
					qt_ocupacao_w	:=	c01_w.NR_LE_OC;
				end if;
				if (c01_w.qt_ocup_novo > 0) then
					qt_ocup_novo_w 	:= 	(c01_w.NR_LE_OC * 100) / c01_w.qt_ocup_novo;
				else
					qt_ocup_novo_w	:=	c01_w.NR_LE_OC;
				end if;
				 if (c01_w.ocup_sem_temp > 0) then
					ocup_sem_temp_w := 	(c01_w.NR_LE_OC * 100) / c01_w.ocup_sem_temp;
				else
					ocup_sem_temp_w	:=	c01_w.NR_LE_OC;
				end if;
				 if (c01_w.ocup_novo_sem_temp > 0) then
					ocup_novo_sem_temp_w := (c01_w.NR_LE_OC * 100) / c01_w.ocup_novo_sem_temp;
				else
					ocup_novo_sem_temp_w	:=	c01_w.NR_LE_OC;
				end if;
			elsif (c01_w.ordem = 2)	then
				qt_ocupacao_w 	:= 	c01_w.qt_ocupacao;
				qt_ocup_novo_w 	:= 	c01_w.qt_ocup_novo;
				ocup_sem_temp_w := 	c01_w.ocup_sem_temp;
				ocup_novo_sem_temp_w :=  c01_w.ocup_novo_sem_temp;
			end if;

			insert into w_EIS_censo_sub_ind_setor(
													DS_SETOR,
													DT_REFERENCIA,
													NM_USUARIO,
													NR_LEITOS,
													NR_SEQ_IND_GESTAO,
													PR_OCUP_NOVO_SEM_TEMP,
													PR_OCUP_SEM_TEMP,
													PR_OHR,
													PR_OLF,
													QT_DIAS,
													QT_DISP,
													QT_GIRO,
													QT_IND,
													QT_LTO_LIV,
													QT_MEDIA_LEITO,
													QT_MEDIA_OBITO,
													QT_MEDIA_PAC,
													QT_MEDIA_PERM,
													QT_MEDIA_PERM_ALTA,
													QT_OCUPACAO,
													QT_OCUP_NOVO,
													QT_PAC_DIA,
													QT_SAIDAS,
													QT_TEMP,
													NR_LEITOS_OCUPADOS,
													CD_SETOR_ATENDIMENTO
													)
			values (
												c01_w.ds_setor,
												dt_inicial_param_p,
												nm_usuario_p,
												c01_w.nr_leitos,
												nr_seq_ind_gestao_p,
												ocup_novo_sem_temp_w,
												ocup_sem_temp_w,
												c01_w.pr_ohr,
												c01_w.pr_olf,
												qt_dias_censo_p,
												c01_w.qt_disp,
												c01_w.qt_giro,
												c01_w.qt_ind,
												c01_w.qt_lto_liv,
												c01_w.qt_media_leito,
												c01_w.qt_media_obito,
												c01_w.qt_media_pac,
												c01_w.qt_media_perm,
												c01_w.qt_media_perm_alta,
												qt_ocupacao_w,
												qt_ocup_novo_w,
												c01_w.qt_pac_dia,
												c01_w.qt_saidas,
												c01_w.qt_temp,
												c01_w.nr_le_oc,
												c01_w.cd_setor_atendimento
												);
			end;
		end loop;
		close C01;

	elsif (nr_seq_ind_gestao_p = 1180)then

		open C02;
		loop
		fetch C02 into
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			insert into w_EIS_censo_sub_ind_setor(
													DS_SETOR_ATENDIMENTO,
													DT_REFERENCIA,
													NM_USUARIO,
													NR_LEITOS,
													NR_SEQ_IND_GESTAO,
													PR_OHR,
													PR_OLF,
													QT_DIAS_PERIODO,
													QT_DISP,
													QT_GIRO,
													QT_IND,
													QT_LEITOS_LIVRES,
													QT_MEDIA_LEITO,
													QT_MEDIA_OBITO,
													QT_MEDIA_PACIENTES,
													QT_MEDIA_PERM,
													QT_MEDIA_PERM_ALTA,
													QT_OCUPACAO,
													QT_PACIENTES_DIA,
													QT_SAIDAS,
													QT_TEMP,
													NR_LEITOS_OCUPADOS,
													CD_SETOR_ATENDIMENTO
													)
			values (
												c02_w.ds_setor_atendimento,
												dt_inicial_param_p,
												nm_usuario_p,
												c02_w.nr_leitos,
												nr_seq_ind_gestao_p,
												c02_w.pr_ohr,
												c02_w.pr_olf,
												qt_dias_censo_p,
												c02_w.qt_disp,
												c02_w.qt_giro,
												c02_w.qt_ind,
												c02_w.qt_leitos_livres,
												c02_w.qt_media_leito,
												c02_w.qt_media_obito,
												c02_w.qt_media_pacientes,
												c02_w.qt_media_perm,
												c02_w.qt_media_perm_alta,
												c02_w.qt_ocupacao,
												c02_w.qt_pacientes_dia,
												c02_w.qt_saidas,
												c02_w.qt_temp,
												c02_w.nr_le_oc,
												c02_w.cd_setor_atendimento);
			end;
		end loop;
		close C02;

	end if;


end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_eis_censo_sub_ind_setor ( cd_estabelecimento_p bigint, dt_inicial_param_p timestamp, dt_final_param_p timestamp, nm_usuario_p text, nr_dias_censo_p bigint, nr_seq_ind_gestao_p bigint, qt_dias_censo_p bigint, qt_meses_p bigint) FROM PUBLIC;

