-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_retorno_sib ( nr_seq_lote_p bigint, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
cd_plano_ret_w		varchar(20);
dt_adesao_ret_w		timestamp;
ie_tipo_registro_w	smallint;
cd_plano_w		varchar(20);
dt_adesao_w		timestamp;
nr_seq_segurado_w	bigint;
ie_tasy_ans_w		varchar(1);
ie_enviar_ans_w		varchar(1);
ie_ativo_w		smallint;
ds_observacao_w		varchar(255);
cd_carteira_retorno_w	varchar(30);
nr_seq_retorno_sib_w	bigint;
nm_mae_w		varchar(255);
nm_mae_ans_w		varchar(255);
nm_segurado_w		varchar(255);
nm_segurado_ans_w	varchar(255);
nr_seq_tasy_ans_w	bigint;
cd_usuario_plano_w	varchar(30);
ie_status_w		varchar(10);

C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		cd_usuario_plano, 
		cd_plano_ans, 
		dt_adesao_plano, 
		ie_tipo_registro, 
		nm_mae, 
		nm_beneficiario 
	from	pls_retorno_sib 
	where	nr_seq_lote_sib	= nr_seq_lote_p;


BEGIN 
 
delete	from pls_retorno_consistencia a 
where	exists (SELECT	1 
		from	pls_sib_tasy_ans x 
		where	a.nr_seq_tasy_ans = x.nr_sequencia 
		and	x.nr_seq_lote = nr_seq_lote_p);
 
delete	from pls_sib_tasy_ans 
where	nr_seq_lote = nr_seq_lote_p;
 
if (ie_opcao_p = 'C') then 
	open C01;
	loop 
	fetch C01 into	 
		nr_seq_retorno_sib_w, 
		cd_carteira_retorno_w, 
		cd_plano_ret_w, 
		dt_adesao_ret_w, 
		ie_tipo_registro_w, 
		nm_mae_ans_w, 
		nm_segurado_ans_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		ds_observacao_w := '';
		ie_status_w := 'C';
		 
		select	distinct a.nr_sequencia, 
			a.dt_contratacao, 
			c.cd_plano, 
			'T', 
			'S', 
			CASE WHEN coalesce(dt_rescisao::text, '') = '' THEN 1  ELSE 3 END , 
			substr(obter_compl_pf(a.cd_pessoa_fisica, 5, 'N'),1,255), 
			substr(obter_nome_pf(a.cd_pessoa_fisica),1,255), 
			b.cd_usuario_plano 
		into STRICT	nr_seq_segurado_w, 
			dt_adesao_w, 
			cd_plano_w, 
			ie_enviar_ans_w, 
			ie_tasy_ans_w, 
			ie_ativo_w, 
			nm_mae_w, 
			nm_segurado_w, 
			cd_usuario_plano_w 
		FROM pls_plano c, pls_segurado_carteira b, pls_segurado a
LEFT OUTER JOIN pls_segurado_cart_ant d ON (a.nr_sequencia = d.nr_seq_segurado)
WHERE a.nr_sequencia	= b.nr_seq_segurado and a.nr_seq_plano	= c.nr_sequencia  and ((b.cd_usuario_plano = cd_carteira_retorno_w) or (d.cd_usuario_ant = cd_carteira_retorno_w and d.ie_sistema_anterior = 'S'));
		exception 
		when others then 
			ie_tasy_ans_w	:= 'N';
			ie_enviar_ans_w	:= 'A';
			ds_observacao_w	:= 'Código da carteira incompatível';
			ie_status_w	:= 'I';
		end;
		 
		select	nextval('pls_sib_tasy_ans_seq') 
		into STRICT	nr_seq_tasy_ans_w 
		;
		 
		insert into pls_sib_tasy_ans(	NR_SEQUENCIA, 
						CD_ESTABELECIMENTO, 
						IE_ENVIAR_ANS, 
						IE_TASY_ANS, 
						DT_ATUALIZACAO, 
						NM_USUARIO, 
						DT_ATUALIZACAO_NREC, 
						NM_USUARIO_NREC, 
						NR_SEQ_SEGURADO, 
						IE_TIPO_REGISTRO, 
						DT_ADESAO_PLANO_ANS, 
						CD_PLANO_ANS, 
						IE_SITUACAO_BENEF, 
						DT_CONTRATACAO, 
						CD_PLANO, 
						NR_SEQ_LOTE, 
						DS_OBSERVACAO, 
						CD_USUARIO_PLANO, 
						NR_SEQ_RETORNO_SIB, 
						CD_USUARIO_PLANO_ANS, 
						IE_STATUS) 
					values (	nr_seq_tasy_ans_w, 
						cd_estabelecimento_p, 
						ie_enviar_ans_w, 
						ie_tasy_ans_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_segurado_w, 
						ie_tipo_registro_w, 
						dt_adesao_ret_w, 
						cd_plano_ret_w, 
						ie_ativo_w, 
						dt_adesao_w, 
						cd_plano_w, 
						nr_seq_lote_p, 
						ds_observacao_w, 
						cd_usuario_plano_w, 
						nr_seq_retorno_sib_w, 
						cd_carteira_retorno_w, 
						ie_status_w);
		 
		if (ie_tasy_ans_w = 'S') then 
			CALL pls_consistir_vinculo_sib(nr_seq_tasy_ans_w, nm_usuario_p);
		end if;
		 
		/* 
		if (ie_tasy_ans_w = 'S') then 
			if (cd_plano_w <> cd_plano_ret_w) then 
				ie_tasy_ans_w	:= 'N'; 
				ie_enviar_ans_w	:= 'A'; 
				ds_observacao_w	:= ds_observacao_w || 'Código do plano incompatível, '; 
			end if; 
			 
			if (dt_adesao_w <> dt_adesao_ret_w) then 
				ie_tasy_ans_w	:= 'N'; 
				ie_enviar_ans_w	:= 'A'; 
				ds_observacao_w	:= ds_observacao_w || 'Data de adesão incompatível, '; 
			end if; 
			 
			if (ie_ativo_w <> ie_tipo_registro_w) then 
				ie_tasy_ans_w	:= 'N'; 
				ie_enviar_ans_w	:= 'A'; 
				ds_observacao_w	:= ds_observacao_w || 'Status do beneficiário incompatível, '; 
			end if; 
			 
			if (upper(nm_mae_ans_w) <> upper(nm_mae_w)) then 
				ie_tasy_ans_w	:= 'N'; 
				ie_enviar_ans_w	:= 'A'; 
				ds_observacao_w	:= ds_observacao_w || 'Nome da mãe incompatível, '; 
			end if; 
			 
			if (upper(nm_segurado_w) <> upper(nm_segurado_ans_w)) then 
				ie_tasy_ans_w	:= 'N'; 
				ie_enviar_ans_w	:= 'A'; 
				ds_observacao_w	:= ds_observacao_w || 'Nome do beneficiário incompatível, '; 
			end if; 
		end if; 
		ds_observacao_w := substr(ds_observacao_w,1,length(ds_observacao_w)-2); 
		*/
 
		 
	end loop;
	close C01;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_retorno_sib ( nr_seq_lote_p bigint, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

