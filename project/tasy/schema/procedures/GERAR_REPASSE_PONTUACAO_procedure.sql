-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE valor_centro_custo AS (	vl_repassar	procedimento_repasse.vl_repasse%type,
					cd_centro_custo	centro_custo.cd_centro_custo%type
				);


CREATE OR REPLACE PROCEDURE gerar_repasse_pontuacao ( nr_repasse_terceiro_p bigint, nm_usuario_p text) AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:   Gerar os repasses por pontuacao. Sistema calculara quantos pontos os medicos fizeram e ira gerar um valor a partir desta pontuacao.
----------------------------------------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[]  Objetos do dicionario [X] Tasy (Java/HTML5) [  ] Portal [  ] Relatorios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
 - Rotina executada dentro das aplicacoes JAVA e HTML5 atraves de opcao de botao direito do mouse.
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/qt_procedimento_w		bigint;
qt_material_w		bigint;
qt_pontos_w		double precision;
qt_pontos_sav_w		double precision;
vl_repasse_w		repasse_terceiro_item.vl_repasse%type;
nr_seq_item_w		repasse_terceiro_item.nr_sequencia_item%type;
cd_centro_custo_w		centro_custo.cd_centro_custo%type;
ds_observacao_w		repasse_terceiro_item.ds_observacao%type;
ds_enter_w		varchar(255)	:= chr(13)||chr(10);
vl_total_faturado_w	procedimento_repasse.vl_original_repasse%type;
qt_centro_custo_w		bigint;
vl_rentabilidade_w	double precision;
vl_desconto_w	double precision;
qt_ponto_cc_w		double precision;
pr_repassar_cc_w		double precision;
vl_custo_w		double precision;
ie_consignado_w		material.ie_consignado%type;
qt_custo_calc_mat_w	double precision;
qt_material_custo_w	material_atend_paciente.qt_material%type;
qt_total_pontos_w		double precision;
dt_periodo_inicial_w	timestamp;
dt_periodo_final_w	timestamp;
pr_repassar_w		regra_repasse_pont_item.pr_repassar%type;
qt_ponto_faixa_w		regra_repasse_pont_item.qt_ponto_faixa%type;
qt_ponto_item_w		regra_repasse_pont_item.qt_ponto_item%type;
qt_item_periodo_w		regra_repasse_pont_item.qt_item_periodo%type;
ie_tipo_data_item_w	regra_repasse_pont_item.ie_tipo_data_item%type;
vl_inicial_faixa_w	regra_repasse_pont_item.qt_item_periodo%type;
vl_final_faixa_w		regra_repasse_pont_item.ie_tipo_data_item%type;
regra_ponto_w		regra_repasse_pontuacao.nr_sequencia%type;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
ds_mes_w      		varchar(255);
vl_mult_regra_rep_mult_ponto_w	mat_crit_rep_regra_mult.vl_multiplo%type;
cd_pessoa_fisica_w varchar(10);

--Criacao do tipo da tabela que ira receber os dados do vetor para o calculo da rentabilidade
--Criando a tabela que ira receber as informacoes do calculo da rentabilidade				
TYPE	t_valor_centro_custo IS TABLE OF valor_centro_custo index by integer;
--vetor criado para armazenar as informacoes.
v_valor_centro_custo t_valor_centro_custo;

i	bigint := 1;

--Cursor que retorna todas as regras de pontuacao cadastradas na base do cliente
c_regra_pontuacao CURSOR(	dt_periodo_inicial_w	regra_repasse_pontuacao.dt_inicio_vigencia%type,
				dt_periodo_final_w	regra_repasse_pontuacao.dt_fim_vigencia%type) FOR
	SELECT	a.ds_regra_pontuacao,
		a.ie_tipo_pontuacao,
		a.nr_seq_trans_financ,
		a.nr_sequencia nr_sequencia,
		coalesce(a.pr_desconto_repasse,0) pr_desconto_repasse,
		coalesce(a.vl_unitario_ponto,0) vl_unitario_ponto,
		a.dt_inicio_vigencia,
		a.dt_fim_vigencia,
		a.ie_ordem_calc_custo
	from	regra_repasse_pontuacao a
	where	a.ie_situacao = 'A'
    and (((dt_periodo_inicial_w between inicio_dia(coalesce(a.dt_inicio_vigencia,dt_periodo_inicial_w)) and fim_dia(coalesce(a.dt_fim_vigencia,dt_periodo_final_w)))
	and		((coalesce(a.dt_fim_vigencia::text, '') = '') or (dt_periodo_final_w <= fim_dia(a.dt_fim_vigencia))))
    or (a.dt_fim_vigencia >= inicio_dia(coalesce(dt_periodo_inicial_w,a.dt_inicio_vigencia)) and a.dt_fim_vigencia <= fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia)))
    or (a.dt_inicio_vigencia < inicio_dia(coalesce(dt_periodo_inicial_w,a.dt_inicio_vigencia)) and coalesce(a.dt_fim_vigencia,fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia))) between inicio_dia(coalesce(dt_periodo_inicial_w,a.dt_inicio_vigencia)) and fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia)))
    or (a.dt_fim_vigencia > fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia)) and a.dt_inicio_vigencia between inicio_dia(coalesce(dt_periodo_inicial_w,a.dt_inicio_vigencia)) and fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia))))
	and (coalesce(a.cd_estabelecimento::text, '') = '' or a.cd_estabelecimento = cd_estabelecimento_w)
	order by a.nr_sequencia;
	
	
c_regra_pontuacao_item CURSOR(	dt_periodo_inicial_w	regra_repasse_pont_item.dt_inicio_vigencia%type,
				dt_periodo_final_w	regra_repasse_pont_item.dt_fim_vigencia%type,
				nr_seq_rep_ponto_w	regra_repasse_pont_item.nr_seq_regra_rep_ponto%type) FOR
	SELECT	a.nr_sequencia,
		a.qt_ponto_faixa,
		a.qt_ponto_item,
		a.qt_item_periodo,
		a.ie_tipo_data_item,
		a.pr_repassar,
		a.vl_inicial_faixa,
		a.vl_final_faixa,
		a.dt_inicio_vigencia,
		a.dt_fim_vigencia		
	from	regra_repasse_pont_item a
	where	a.nr_seq_regra_rep_ponto = nr_seq_rep_ponto_w
    and (((dt_periodo_inicial_w between inicio_dia(coalesce(a.dt_inicio_vigencia,dt_periodo_inicial_w)) and fim_dia(coalesce(a.dt_fim_vigencia,dt_periodo_final_w)))
	and	((coalesce(a.dt_fim_vigencia::text, '') = '') or (dt_periodo_final_w <= fim_dia(a.dt_fim_vigencia))))
    or (a.dt_fim_vigencia >= inicio_dia(coalesce(dt_periodo_inicial_w,a.dt_inicio_vigencia)) and a.dt_fim_vigencia <= fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia)))
    or (a.dt_inicio_vigencia < inicio_dia(coalesce(dt_periodo_inicial_w,a.dt_inicio_vigencia)) and coalesce(a.dt_fim_vigencia,fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia))) between inicio_dia(coalesce(dt_periodo_inicial_w,a.dt_inicio_vigencia)) and fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia)))
    or (a.dt_fim_vigencia > fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia)) and a.dt_inicio_vigencia between inicio_dia(coalesce(dt_periodo_inicial_w,a.dt_inicio_vigencia)) and fim_dia(coalesce(dt_periodo_final_w,a.dt_fim_vigencia))))
	order by a.nr_sequencia;
		

--Cursor que retorna os centro de custos dos itens lancados no repasse (para divisao do calculo do valor)	
c_centro_custo CURSOR(	nr_repasse_terceiro_pc	repasse_terceiro.nr_repasse_terceiro%type) FOR
	SELECT	x.cd_centro_custo
	from (SELECT	c.cd_centro_custo
		from	setor_atendimento c,
			procedimento_paciente b,
			procedimento_repasse a
		where	a.nr_seq_procedimento	= b.nr_sequencia
		and	b.cd_setor_atendimento  = c.cd_setor_atendimento
		and	a.nr_repasse_terceiro	= nr_repasse_terceiro_pc
		
union	all

		select	c.cd_centro_custo
		from	setor_atendimento c,
			material_atend_paciente b,
			material_repasse a
		where	a.nr_seq_material	= b.nr_sequencia
		and	b.cd_setor_atendimento  = c.cd_setor_atendimento
		and	a.nr_repasse_terceiro	= nr_repasse_terceiro_pc) x
	group by x.cd_centro_custo;

--Cursor que retorna os pacientes para validacao de quantas vezes eles executaram um procedimento, taxa e etc	
c_pessoa_fisica_rep CURSOR(	nr_repasse_terceiro_pc	repasse_terceiro.nr_repasse_terceiro%type) FOR
	SELECT	d.cd_pessoa_fisica
	from	atendimento_paciente d,
		conta_paciente c,
		procedimento_paciente b,
		procedimento_repasse a
	where	a.nr_seq_procedimento = b.nr_sequencia
	and	b.nr_interno_conta = c.nr_interno_conta
	and	c.nr_atendimento = d.nr_atendimento
	and	a.nr_repasse_terceiro = nr_repasse_terceiro_pc
	group by d.cd_pessoa_fisica;

--Cursor que retorna as datas do periodo onde o paciente deve ter executado os procedimentos
c_datas_periodo CURSOR(	nr_repasse_terceiro_pc	repasse_terceiro.nr_repasse_terceiro%type,
				ie_tipo_data_item_pc	regra_repasse_pont_item.ie_tipo_data_item%type) FOR
	SELECT	trunc(d.dt_entrada,'mm') dt_periodo
	from	atendimento_paciente d,
		conta_paciente c,
		procedimento_paciente b,
		procedimento_repasse a
	where	a.nr_seq_procedimento = b.nr_sequencia
	and	b.nr_interno_conta = c.nr_interno_conta
	and	c.nr_atendimento = d.nr_atendimento
	and	a.nr_repasse_terceiro = nr_repasse_terceiro_pc
	and	ie_tipo_data_item_pc = 'E'
	group by trunc(d.dt_entrada,'mm')
	
union	all

	PERFORM	trunc(b.dt_conta,'mm') dt_periodo
	from	procedimento_paciente b,
		procedimento_repasse a
	where	a.nr_seq_procedimento = b.nr_sequencia
	and	a.nr_repasse_terceiro = nr_repasse_terceiro_pc
	and	ie_tipo_data_item_pc = 'C'
	group by trunc(b.dt_conta,'mm');

--Retorna o valor Faturado menos o custo do item para calculo da rentabilidade	
c_valor_cc CURSOR(	nr_repasse_terceiro_pc	repasse_terceiro.nr_repasse_terceiro%type,
			nr_seq_regra_ponto_pc	regra_repasse_pontuacao.nr_sequencia%type,
			dt_periodo_inicial_w	regra_repasse_pont_item.dt_inicio_vigencia%type,
			dt_periodo_final_w	regra_repasse_pont_item.dt_fim_vigencia%type) FOR
	SELECT	sum(x.vl_original_repasse) vl_original_repasse,
	        sum(x.vl_custo_item) vl_custo_repasse,
		x.cd_centro_custo
	from (SELECT	a.vl_original_repasse,
			c.cd_centro_custo,
			coalesce(a.vl_custo_item,0) vl_custo_item
		from	setor_atendimento c,
			procedimento_paciente b,
			procedimento_repasse a
		where	a.nr_seq_procedimento = b.nr_sequencia
		and	b.cd_setor_atendimento = c.cd_setor_atendimento
		and	a.nr_repasse_terceiro = nr_repasse_terceiro_pc
		and 	b.dt_procedimento between coalesce(dt_periodo_inicial_w,b.dt_procedimento) and coalesce(dt_periodo_final_w,b.dt_procedimento)
		and	exists (	select	1
				from	proc_crit_rep_regra_ponto y,
					proc_criterio_repasse x
				where	x.nr_sequencia = y.nr_seq_proc_criterio
				and	x.nr_sequencia = a.nr_seq_criterio
				and	y.nr_seq_regra_rep_ponto = nr_seq_regra_ponto_pc)
		and	exists (	select	1
				from	terceiro_regra_pontuacao y,
					terceiro x
				where	x.nr_sequencia = y.nr_seq_terceiro
				and	x.nr_sequencia = a.nr_seq_terceiro
				and	y.nr_seq_regra_rep_pont = nr_seq_regra_ponto_pc)
		and (a.ie_status <> 'E'
			and	not exists (	select	1
						from	procedimento_repasse x
						where	x.nr_seq_origem = a.nr_sequencia
						and	x.ie_status = 'E'))
		
union	all

		select	a.vl_original_repasse,
			c.cd_centro_custo,
			coalesce(a.vl_custo_item,0) vl_custo_item
		from	setor_atendimento c,
			material_atend_paciente b,
			material_repasse a
		where	a.nr_seq_material = b.nr_sequencia
		and	b.cd_setor_atendimento = c.cd_setor_atendimento
		and	a.nr_repasse_terceiro = nr_repasse_terceiro_pc
		and 	b.dt_atendimento between coalesce(dt_periodo_inicial_w,b.dt_atendimento) and coalesce(dt_periodo_final_w,b.dt_atendimento)
		and	exists (	select	1
				from	mat_crit_rep_regra_ponto y,
					mat_criterio_repasse x
				where	x.nr_sequencia = y.nr_seq_mat_criterio
				and	x.nr_sequencia = a.nr_seq_criterio
				and	y.nr_seq_regra_rep_ponto = nr_seq_regra_ponto_pc)
		and	exists (	select	1
				from	terceiro_regra_pontuacao y,
					terceiro x
				where	x.nr_sequencia = y.nr_seq_terceiro
				and	x.nr_sequencia = a.nr_seq_terceiro
				and	y.nr_seq_regra_rep_pont = nr_seq_regra_ponto_pc)
		and (a.ie_status <> 'E'
			and	not exists (	select	1
						from	material_repasse x
						where	x.nr_seq_origem = a.nr_sequencia
						and	x.ie_status = 'E'))) x
	group by x.cd_centro_custo;

--Cursor para retornar todos os itens do repasse que devem ter o custo descontado.
c_repasses_proc_mat CURSOR(	nr_repasse_terceiro_pc	repasse_terceiro.nr_repasse_terceiro%type) FOR
	SELECT	a.nr_sequencia,
		b.cd_procedimento,
		b.ie_origem_proced,
		null cd_material,
		b.dt_procedimento dt_proc_mat,
		d.cd_estabelecimento,
		d.nr_atendimento,
		d.nr_interno_conta,
		b.cd_setor_atendimento,
		b.qt_procedimento qt_procmat,
		null nr_seq_lote_fornec
	from	conta_paciente d,
		proc_criterio_repasse c,
		procedimento_paciente b,
		procedimento_repasse a
	where	a.nr_seq_procedimento = b.nr_sequencia
	and	a.nr_seq_criterio = c.nr_sequencia
	and	b.nr_interno_conta = d.nr_interno_conta
	and	a.nr_repasse_terceiro = nr_repasse_terceiro_pc
	and	c.ie_considerar_custo_item = 'S'
	
union	all

	PERFORM	a.nr_sequencia,
		null,
		null,
		b.cd_material,
		b.dt_atendimento dt_proc_mat,
		d.cd_estabelecimento,
		d.nr_atendimento,
		d.nr_interno_conta,
		b.cd_setor_atendimento,
		b.qt_material qt_procmat,
		b.nr_seq_lote_fornec nr_seq_lote_fornec
	from	conta_paciente d,
		material_atend_paciente b,
		material_repasse a
	where	a.nr_seq_material = b.nr_sequencia
	and	b.nr_interno_conta = d.nr_interno_conta
	and	a.nr_repasse_terceiro = nr_repasse_terceiro_pc;
	
c_pessoa_fisica_ponto CURSOR(	
					nr_repasse_terceiro_pc	repasse_terceiro.nr_repasse_terceiro%type
				) FOR
SELECT  p.cd_pessoa_fisica 		cd_pessoa_fisica,
	trunc(b.dt_atendimento,'mm') 	dt_atendimento,
	a.cd_medico			cd_medico,
	b.cd_especialidade		cd_especialidade,
	y.nr_sequencia			nr_seq_regra_ponto
from	atendimento_paciente p,
	material_atend_paciente b,
	material_repasse a,
	mat_crit_rep_regra_ponto y,
	mat_criterio_repasse x,
	regra_repasse_pontuacao e,
	regra_repasse_pont_item t
where	a.nr_seq_material 		= b.nr_sequencia
and     p.nr_atendimento           	= b.nr_atendimento
and	a.nr_repasse_terceiro 		= nr_repasse_terceiro_pc
and 	(a.cd_protocolo IS NOT NULL AND a.cd_protocolo::text <> '')
and     x.nr_sequencia			= y.nr_seq_mat_criterio
and     t.nr_seq_regra_rep_ponto	= y.nr_seq_regra_rep_ponto
and	x.nr_sequencia 			= a.nr_seq_criterio
and     y.nr_seq_regra_rep_ponto   	= e.nr_sequencia
and	e.ie_tipo_pontuacao 		= 2
and 	coalesce(x.ie_tipo_criterio,0)  	= 1
and (trunc(b.dt_atendimento,'mm') between inicio_dia(coalesce(e.dt_inicio_vigencia,dt_periodo_inicial_w)) and fim_dia(coalesce(e.dt_fim_vigencia,dt_periodo_final_w)))
and exists (
		SELECT 	1
		from 	terceiro_regra_pontuacao z,
			terceiro w
		where w.nr_sequencia = z.nr_seq_terceiro
		and w.nr_sequencia = a.nr_seq_terceiro
		)
group by  	p.cd_pessoa_fisica,
		trunc(b.dt_atendimento,'mm'),
		a.cd_medico,
		b.cd_especialidade,
		y.nr_sequencia
order by p.cd_pessoa_fisica, y.nr_sequencia desc;

BEGIN

delete 	from repasse_terceiro_item
where 	nr_repasse_terceiro = nr_repasse_terceiro_p
and 	(nr_seq_regra_rep_ponto IS NOT NULL AND nr_seq_regra_rep_ponto::text <> '');
	
--Le todos os itens que devem ter o custo descontado e calcula os descontos armanzenadoos em um novo campo
for r_c_repasses_proc_mat in c_repasses_proc_mat(nr_repasse_terceiro_p) loop
	--gera o desconto do custo para os procedimentos
	if (r_c_repasses_proc_mat.cd_procedimento IS NOT NULL AND r_c_repasses_proc_mat.cd_procedimento::text <> '') then
		begin
		select	dividir_sem_round(a.vl_custo,a.qt_resumo)
		into STRICT	vl_custo_w
		from	conta_paciente_resumo a
		where	a.cd_procedimento = r_c_repasses_proc_mat.cd_procedimento
		and	a.ie_origem_proced = r_c_repasses_proc_mat.ie_origem_proced
		and	a.nr_interno_conta = r_c_repasses_proc_mat.nr_interno_conta
		and	a.cd_setor_paciente = r_c_repasses_proc_mat.cd_setor_atendimento;
		exception
		when others then
			vl_custo_w := 0;
		end;
		
		update	procedimento_repasse
		set	vl_custo_item = vl_custo_w
		where	nr_sequencia = r_c_repasses_proc_mat.nr_sequencia;
	--gera o desconto do custo para os materiais	
	elsif (r_c_repasses_proc_mat.cd_material IS NOT NULL AND r_c_repasses_proc_mat.cd_material::text <> '') then
		select	a.ie_consignado,
			Obter_conversao_Material(a.cd_material,'EC')
		into STRICT	ie_consignado_w,
			qt_material_custo_w
		from	material a
		where	a.cd_material = r_c_repasses_proc_mat.cd_material;
		
		qt_custo_calc_mat_w	:= dividir_sem_round(r_c_repasses_proc_mat.qt_procmat,qt_material_custo_w);
		
		--se nao for consignado busca da saldo_estoque, se for consignado, busca da ordem de compra.
		if (ie_consignado_w = 0) then
			select	obter_custo_medio_material(r_c_repasses_proc_mat.cd_estabelecimento,r_c_repasses_proc_mat.dt_proc_mat,r_c_repasses_proc_mat.cd_material)
			into STRICT	vl_custo_w
			;
		elsif (ie_consignado_w = 1) then
			begin
			select	dividir_sem_round(b.vl_total_item,b.qt_material)
			into STRICT	vl_custo_w
			from	ordem_compra_item b,
				ordem_compra a
			where	a.nr_ordem_compra = b.nr_ordem_compra
			and	a.nr_atendimento = r_c_repasses_proc_mat.nr_atendimento
			and	b.cd_material = r_c_repasses_proc_mat.cd_material
			and	b.nr_seq_lote_fornec = r_c_repasses_proc_mat.nr_seq_lote_fornec;
			exception
			when others then
				select	dividir_sem_round(sum(b.vl_total_item),sum(b.qt_material))
				into STRICT	vl_custo_w
				from	ordem_compra_item b,
					ordem_compra a
				where	a.nr_ordem_compra = b.nr_ordem_compra
				and	a.nr_atendimento = r_c_repasses_proc_mat.nr_atendimento
				and	b.cd_material = r_c_repasses_proc_mat.cd_material;
			end;
			
			if (vl_custo_w = 0) then
			
				select	obter_dados_ult_compra_data(r_c_repasses_proc_mat.cd_estabelecimento, r_c_repasses_proc_mat.cd_material, null, r_c_repasses_proc_mat.dt_proc_mat, 0, 'CM')
				into STRICT	vl_custo_w
				;
			
			end if;			
		end if;
		
		update	material_repasse
		set	vl_custo_item = (vl_custo_w * qt_custo_calc_mat_w)
		where	nr_sequencia = r_c_repasses_proc_mat.nr_sequencia;
		
	end if;
end loop;


select 	coalesce(dt_periodo_inicial,dt_mesano_referencia),
	coalesce(dt_periodo_final,dt_mesano_referencia),
	cd_estabelecimento
into STRICT	dt_periodo_inicial_w,
	dt_periodo_final_w,
	cd_estabelecimento_w
from     repasse_terceiro
where    nr_repasse_terceiro = nr_repasse_terceiro_p;

--Abre o cursor das regra de pontuacao e realiza os calculos dos pontos conforme o tipo de pontuacao.
for r_c_regra_pontuacao in c_regra_pontuacao(dt_periodo_inicial_w, dt_periodo_final_w) loop
	for r_c_regra_pontuacao_item in c_regra_pontuacao_item(dt_periodo_inicial_w , dt_periodo_final_w, r_c_regra_pontuacao.nr_sequencia) loop
		
		qt_ponto_faixa_w		:= r_c_regra_pontuacao_item.qt_ponto_faixa;
		qt_ponto_item_w		:= r_c_regra_pontuacao_item.qt_ponto_item;	
		qt_item_periodo_w		:= r_c_regra_pontuacao_item.qt_item_periodo;	
		ie_tipo_data_item_w	:= r_c_regra_pontuacao_item.ie_tipo_data_item;
		pr_repassar_w		:= r_c_regra_pontuacao_item.pr_repassar;
		vl_inicial_faixa_w	:= r_c_regra_pontuacao_item.vl_inicial_faixa;
		vl_final_faixa_w		:= r_c_regra_pontuacao_item.vl_final_faixa;
	
		if (r_c_regra_pontuacao.ie_tipo_pontuacao = 1) then --Repasse por rentabilidade (conforme a faixa).		
			vl_total_faturado_w	:= 0;
		
		for r_c_valor_cc in c_valor_cc(	nr_repasse_terceiro_p, r_c_regra_pontuacao.nr_sequencia, r_c_regra_pontuacao_item.dt_inicio_vigencia, r_c_regra_pontuacao_item.dt_fim_vigencia) loop
			
			if (coalesce(r_c_regra_pontuacao.ie_ordem_calc_custo, 'N') = 'N') then
				vl_rentabilidade_w := (r_c_valor_cc.vl_original_repasse -
									   r_c_valor_cc.vl_custo_repasse - 
									   dividir_sem_round((r_c_valor_cc.vl_original_repasse - r_c_valor_cc.vl_custo_repasse) * r_c_regra_pontuacao.pr_desconto_repasse, 100));
			else
				vl_rentabilidade_w := (r_c_valor_cc.vl_original_repasse -
									  r_c_valor_cc.vl_custo_repasse -
									  dividir_sem_round((r_c_valor_cc.vl_original_repasse * r_c_regra_pontuacao.pr_desconto_repasse)::numeric, 100));
			end if;						
			
			vl_total_faturado_w	:= vl_total_faturado_w + vl_rentabilidade_w;			
			v_valor_centro_custo[i].vl_repassar		:= vl_rentabilidade_w;
			v_valor_centro_custo[i].cd_centro_custo	:= r_c_valor_cc.cd_centro_custo;		
			i	:= i + 1;			
		end loop;
		i := v_valor_centro_custo.first;
				
		if (not(coalesce(vl_total_faturado_w,0) between coalesce(vl_inicial_faixa_w,0) and coalesce(vl_final_faixa_w,0)))then
			qt_ponto_faixa_w := 0;
		end if;
		
		--Abre vetor para calcular o valor de rentabilidade por centro de custo
		for i in 1..v_valor_centro_custo.count loop

			qt_ponto_cc_w := dividir_sem_round((qt_ponto_faixa_w * v_valor_centro_custo[i].vl_repassar),vl_total_faturado_w);
			qt_total_pontos_w	:= qt_total_pontos_w + qt_ponto_cc_w;
			--Quantidade de pontos obtidos atraves da faixa:
			ds_observacao_w	:= wheb_mensagem_pck.get_texto(918156)||'('||r_c_regra_pontuacao.nr_sequencia||'/'||r_c_regra_pontuacao_item.nr_sequencia||') '|| r_c_regra_pontuacao.ds_regra_pontuacao || ' ' ||ds_enter_w;
			ds_observacao_w	:= substr(ds_observacao_w || wheb_mensagem_pck.get_texto(918157) || qt_ponto_cc_w||'. '||ds_enter_w,1,400);
			
			if (qt_total_pontos_w > qt_ponto_faixa_w) then
				qt_ponto_cc_w	:= qt_ponto_cc_w - (qt_total_pontos_w - qt_ponto_faixa_w);
			elsif (qt_total_pontos_w < qt_ponto_faixa_w) and (i = v_valor_centro_custo.last) then
				qt_ponto_cc_w	:= qt_ponto_cc_w + (qt_ponto_faixa_w - qt_total_pontos_w);
			end if;
			
			vl_repasse_w	:= qt_ponto_cc_w * r_c_regra_pontuacao.vl_unitario_ponto;			
			--Valor calculado a partir do valor unitario dos pontos multiplicado pela quantidade de pontos:
			ds_observacao_w	:= substr(ds_observacao_w ||  wheb_mensagem_pck.get_texto(918158) ||vl_repasse_w||'.',1,400);
			
			if (vl_repasse_w <> 0) then
				select	coalesce(max(a.nr_sequencia_item),0) + 1
				into STRICT	nr_seq_item_w
				from	repasse_terceiro_item a
				where	a.nr_repasse_terceiro = nr_repasse_terceiro_p;

				insert	into	repasse_terceiro_item(	nr_sequencia,
									nr_sequencia_item,
									vl_repasse,
									nm_usuario_nrec,
									dt_atualizacao_nrec,
									nm_usuario,
									dt_atualizacao,
									nr_seq_trans_fin,
									cd_centro_custo,
									ds_observacao,
									nr_repasse_terceiro,
									qt_pontos_regra,
									nr_seq_regra_rep_ponto)
					values (	nextval('repasse_terceiro_item_seq'),
									nr_seq_item_w,
									vl_repasse_w,
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									r_c_regra_pontuacao.nr_seq_trans_financ,
									v_valor_centro_custo[i].cd_centro_custo,
									ds_observacao_w,
									nr_repasse_terceiro_p,
									qt_ponto_faixa_w,
									r_c_regra_pontuacao.nr_sequencia);
			end if;
		end loop;
		i := 1;
	elsif (r_c_regra_pontuacao.ie_tipo_pontuacao = 2) then --Repasse por quantidade (unitario/simples).
			
			
		for	r_c_centro_custo in c_centro_custo(nr_repasse_terceiro_p) loop
			--Regra de pontuacao:				

			--obtem a quantidade de procedimentos e materiais executados para a regra e que devem contar pontos.
			select	count(1)
			into STRICT	qt_procedimento_w
			from	setor_atendimento c,
				procedimento_paciente b,
				procedimento_repasse a
			where	a.nr_seq_procedimento 	= b.nr_sequencia
			and	b.cd_setor_atendimento 	= c.cd_setor_atendimento
			and	a.nr_repasse_terceiro 	= nr_repasse_terceiro_p
			and	c.cd_centro_custo 	= r_c_centro_custo.cd_centro_custo
			and 	b.dt_procedimento between  inicio_dia(coalesce(r_c_regra_pontuacao_item.dt_inicio_vigencia,b.dt_procedimento)) and fim_dia(coalesce(r_c_regra_pontuacao_item.dt_fim_vigencia,b.dt_procedimento))
			and	exists (	SELECT	1
					from	proc_crit_rep_regra_ponto y,
						proc_criterio_repasse x
					where	x.nr_sequencia 		= y.nr_seq_proc_criterio
					and	x.nr_sequencia 		= a.nr_seq_criterio
					and	y.nr_seq_regra_rep_ponto 	= r_c_regra_pontuacao.nr_sequencia)
			and	exists (	select	1
					from	terceiro_regra_pontuacao y,
						terceiro x
					where	x.nr_sequencia 		= y.nr_seq_terceiro
					and	x.nr_sequencia 		= a.nr_seq_terceiro
					and	y.nr_seq_regra_rep_pont 	= r_c_regra_pontuacao.nr_sequencia);
				
			select	count(1)
			into STRICT	qt_material_w
			from	setor_atendimento c,
				material_atend_paciente b,
				material_repasse a
			where	a.nr_seq_material 	= b.nr_sequencia
			and	b.cd_setor_atendimento 	= c.cd_setor_atendimento
			and	c.cd_centro_custo 	= r_c_centro_custo.cd_centro_custo
			and	a.nr_repasse_terceiro 	= nr_repasse_terceiro_p
			and 	b.dt_atendimento between 	inicio_dia(coalesce(r_c_regra_pontuacao_item.dt_inicio_vigencia,b.dt_atendimento)) and fim_dia(coalesce(r_c_regra_pontuacao_item.dt_fim_vigencia,b.dt_atendimento))
			and	exists (	SELECT	1
					from	mat_crit_rep_regra_ponto y,
						mat_criterio_repasse x
					where	x.nr_sequencia		= y.nr_seq_mat_criterio
					and	x.nr_sequencia 		= a.nr_seq_criterio
					and	y.nr_seq_regra_rep_ponto 	= r_c_regra_pontuacao.nr_sequencia
					and 	coalesce(x.ie_tipo_criterio,0) = 0)
			and	exists (	select	1
					from	terceiro_regra_pontuacao y,
						terceiro x
					where	x.nr_sequencia 		= y.nr_seq_terceiro
					and	x.nr_sequencia 		= a.nr_seq_terceiro
					and	y.nr_seq_regra_rep_pont 	= r_c_regra_pontuacao.nr_sequencia);
								
			qt_pontos_w	:= qt_procedimento_w + qt_material_w;
				
			--Quantidade de pontos obtidos:
			ds_observacao_w	:= wheb_mensagem_pck.get_texto(918156)||'('||r_c_regra_pontuacao.nr_sequencia||'/'||r_c_regra_pontuacao_item.nr_sequencia||') '|| r_c_regra_pontuacao.ds_regra_pontuacao || ' ' ||ds_enter_w;
			ds_observacao_w	:= substr(ds_observacao_w ||wheb_mensagem_pck.get_texto(919134)||qt_pontos_w||'. '||ds_enter_w,1,400);
				
			qt_pontos_w	:= qt_ponto_item_w * qt_pontos_w;
			
			vl_repasse_w	:= qt_pontos_w * r_c_regra_pontuacao.vl_unitario_ponto;
				
			--Valor calculado a partir do valor unitario dos pontos multiplicado pela quantidade de pontos:
			ds_observacao_w	:= substr(ds_observacao_w || wheb_mensagem_pck.get_texto(918158) ||vl_repasse_w||'. ',1,400);
		
			if (vl_repasse_w <> 0) then
				select	coalesce(max(a.nr_sequencia_item),0) + 1
				into STRICT	nr_seq_item_w
				from	repasse_terceiro_item a
				where	a.nr_repasse_terceiro = nr_repasse_terceiro_p;

				insert	into	repasse_terceiro_item(	nr_sequencia,
									nr_sequencia_item,
									vl_repasse,
									nm_usuario_nrec,
									dt_atualizacao_nrec,
									nm_usuario,
									dt_atualizacao,
									nr_seq_trans_fin,
									cd_centro_custo,
									ds_observacao,
									nr_repasse_terceiro,
									qt_pontos_regra,
									nr_seq_regra_rep_ponto)
					values (	nextval('repasse_terceiro_item_seq'),
									nr_seq_item_w,
									vl_repasse_w,
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									r_c_regra_pontuacao.nr_seq_trans_financ,
									r_c_centro_custo.cd_centro_custo,
									ds_observacao_w,
									nr_repasse_terceiro_p,
									qt_ponto_item_w,
									r_c_regra_pontuacao.nr_sequencia);
			end if;
		end loop;
		
		ds_mes_w  := '';
		cd_pessoa_fisica_w := '0';
		for	r_c_pessoa_fisica_ponto in c_pessoa_fisica_ponto(nr_repasse_terceiro_p) loop		
			
			select  regra_ponto
			into STRICT 	regra_ponto_w
			from 	(	
					SELECT	e.nr_sequencia regra_ponto,
						(e.vl_unitario_ponto * t.qt_ponto_item)						
					from	atendimento_paciente p,
						material_atend_paciente b,
						material_repasse a,
						mat_crit_rep_regra_ponto y,
						mat_criterio_repasse x,
						regra_repasse_pontuacao e,
						regra_repasse_pont_item t
					where	a.nr_seq_material 	= b.nr_sequencia
					and     p.nr_atendimento           = b.nr_atendimento
					and	a.nr_repasse_terceiro 	= nr_repasse_terceiro_p
					and 	(a.cd_protocolo IS NOT NULL AND a.cd_protocolo::text <> '')
					and     x.nr_sequencia		= y.nr_seq_mat_criterio
					and     t.nr_seq_regra_rep_ponto	= y.nr_seq_regra_rep_ponto
					and	x.nr_sequencia 		= a.nr_seq_criterio
					and     y.nr_seq_regra_rep_ponto   = e.nr_sequencia 
					and	e.ie_tipo_pontuacao 	= 2
					and	p.cd_pessoa_fisica         = r_c_pessoa_fisica_ponto.cd_pessoa_fisica
					and 	coalesce(x.ie_tipo_criterio,0)  = 1
					and (trunc(b.dt_atendimento,'mm') between inicio_dia(coalesce(e.dt_inicio_vigencia,dt_periodo_inicial_w)) and fim_dia(coalesce(e.dt_fim_vigencia,dt_periodo_final_w)))
					and 	trunc(b.dt_atendimento,'mm') = trunc(r_c_pessoa_fisica_ponto.dt_atendimento,'mm')
					group by  	e.nr_sequencia,
							(e.vl_unitario_ponto * t.qt_ponto_item)						 
					order by(e.vl_unitario_ponto * t.qt_ponto_item) desc
			) alias14 LIMIT 1;	
					
			ds_mes_w  := substr(ds_mes_w || wheb_mensagem_pck.get_texto(620794)||' '||trunc(r_c_pessoa_fisica_ponto.dt_atendimento,'mm')|| ' - ' || wheb_mensagem_pck.get_texto(300191) || ' = 1. ',1,255);

			if (regra_ponto_w = r_c_regra_pontuacao.nr_sequencia) and (cd_pessoa_fisica_w <> r_c_pessoa_fisica_ponto.cd_pessoa_fisica) then			
				cd_pessoa_fisica_w := r_c_pessoa_fisica_ponto.cd_pessoa_fisica;

				vl_mult_regra_rep_mult_ponto_w := obter_regra_rep_mult_ponto(
					r_c_pessoa_fisica_ponto.nr_seq_regra_ponto,
					cd_estabelecimento_w,
					obter_empresa_estab(cd_estabelecimento_w), 
					r_c_pessoa_fisica_ponto.cd_medico, 
					r_c_pessoa_fisica_ponto.cd_especialidade,
					r_c_pessoa_fisica_ponto.dt_atendimento
				);					

				qt_pontos_sav_w	:= qt_ponto_item_w * vl_mult_regra_rep_mult_ponto_w;
				qt_pontos_w := qt_pontos_w + qt_pontos_sav_w;				
			end if;	

		end loop;						

		if (coalesce(qt_pontos_w,0) > 0) then			
			ds_observacao_w	:= 	wheb_mensagem_pck.get_texto(918156)||'('||r_c_regra_pontuacao.nr_sequencia||'/'||r_c_regra_pontuacao_item.nr_sequencia||') '
						|| r_c_regra_pontuacao.ds_regra_pontuacao || ' ' ||ds_enter_w; 			
			ds_observacao_w := substr(ds_observacao_w || ds_mes_w,1,400);
			--Quantidade de pontos obtidos:
			ds_observacao_w	:= substr(ds_observacao_w || wheb_mensagem_pck.get_texto(919134) || qt_pontos_w || ' . '||ds_enter_w,1,400);	
			vl_repasse_w	:= qt_pontos_w * r_c_regra_pontuacao.vl_unitario_ponto;				
			--Valor calculado a partir do valor unitario dos pontos multiplicado pela quantidade de pontos:
			ds_observacao_w	:= substr(ds_observacao_w || wheb_mensagem_pck.get_texto(918158) ||vl_repasse_w||'. ',1,400);		
			
			if (coalesce(vl_repasse_w,0) <> 0) then
				select	coalesce(max(a.nr_sequencia_item),0) + 1
				into STRICT	nr_seq_item_w
				from	repasse_terceiro_item a
				where	a.nr_repasse_terceiro = nr_repasse_terceiro_p;

				insert	into	repasse_terceiro_item(	nr_sequencia,
									nr_sequencia_item,
									vl_repasse,
									nm_usuario_nrec,
									dt_atualizacao_nrec,
									nm_usuario,
									dt_atualizacao,
									nr_seq_trans_fin,
									cd_centro_custo,
									ds_observacao,
									nr_repasse_terceiro,
									qt_pontos_regra,
									nr_seq_regra_rep_ponto)
					values (	nextval('repasse_terceiro_item_seq'),
									nr_seq_item_w,
									vl_repasse_w,
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									r_c_regra_pontuacao.nr_seq_trans_financ,
									cd_centro_custo_w,
									ds_observacao_w,
									nr_repasse_terceiro_p,
									qt_ponto_item_w,
									r_c_regra_pontuacao.nr_sequencia);
			end if;
		end if;
					
	elsif (r_c_regra_pontuacao.ie_tipo_pontuacao = 3) then --Repasse por quantidade (por periodo/mes).
		for	r_c_pessoa_fisica_rep in c_pessoa_fisica_rep(nr_repasse_terceiro_p) loop
			for	r_c_datas_periodo in c_datas_periodo(nr_repasse_terceiro_p, ie_tipo_data_item_w) loop
				
				--obtem a quantidade de vezes que o paciente realizou o procedimento
				select	count(1),
					max(e.cd_centro_custo)
				into STRICT	qt_procedimento_w,
					cd_centro_custo_w
				from	setor_atendimento e,
					atendimento_paciente d,
					conta_paciente c,
					procedimento_paciente b,
					procedimento_repasse a
				where	a.nr_seq_procedimento 	= b.nr_sequencia
				and	b.nr_interno_conta 	= c.nr_interno_conta
				and	c.nr_atendimento 		= d.nr_atendimento
				and	b.cd_setor_atendimento 	= e.cd_setor_atendimento
				and	a.nr_repasse_terceiro 	= nr_repasse_terceiro_p
				and	d.cd_pessoa_fisica 	= r_c_pessoa_fisica_rep.cd_pessoa_fisica
				and	((ie_tipo_data_item_w = 'E' and (d.dt_entrada 	between trunc(r_c_datas_periodo.dt_periodo,'mm') and fim_mes(r_c_datas_periodo.dt_periodo)) and (d.dt_entrada 	between inicio_dia(coalesce(r_c_regra_pontuacao_item.dt_inicio_vigencia,b.dt_conta)) and fim_dia(coalesce(r_c_regra_pontuacao_item.dt_fim_vigencia,b.dt_conta)))) or (ie_tipo_data_item_w = 'C' and (b.dt_conta 	between trunc(r_c_datas_periodo.dt_periodo,'mm') and fim_mes(r_c_datas_periodo.dt_periodo)) and (b.dt_conta  	between inicio_dia(coalesce(r_c_regra_pontuacao_item.dt_inicio_vigencia,b.dt_conta)) and fim_dia(coalesce(r_c_regra_pontuacao_item.dt_fim_vigencia,b.dt_conta)))))		
				and	exists (	SELECT	1
						from	proc_crit_rep_regra_ponto y,
							proc_criterio_repasse x
						where	x.nr_sequencia 		= y.nr_seq_proc_criterio
						and	x.nr_sequencia 		= a.nr_seq_criterio
						and	y.nr_seq_regra_rep_ponto 	= r_c_regra_pontuacao.nr_sequencia)
				and	exists (	select	1
						from	terceiro_regra_pontuacao y,
							terceiro x
						where	x.nr_sequencia 		= y.nr_seq_terceiro
						and	x.nr_sequencia 		= a.nr_seq_terceiro
						and	y.nr_seq_regra_rep_pont 	= r_c_regra_pontuacao.nr_sequencia)  LIMIT 1 OFFSET -1;
				
			qt_pontos_w	:= qt_procedimento_w;
			
			--Quantidade de pontos obtidos:
			ds_observacao_w	:= wheb_mensagem_pck.get_texto(918156)||'('||r_c_regra_pontuacao.nr_sequencia||'/'||r_c_regra_pontuacao_item.nr_sequencia||') '|| r_c_regra_pontuacao.ds_regra_pontuacao || ' ' ||ds_enter_w;
			ds_observacao_w	:= substr(ds_observacao_w ||wheb_mensagem_pck.get_texto(919134)||qt_pontos_w||'. '||ds_enter_w,1,400);
			
			vl_repasse_w	:= qt_pontos_w * r_c_regra_pontuacao.vl_unitario_ponto;
			
			--Valor calculado a partir do valor unitario dos pontos multiplicado pela quantidade de pontos:
			ds_observacao_w	:= substr(ds_observacao_w ||wheb_mensagem_pck.get_texto(918158)||vl_repasse_w||'. ',1,400);		
			
			if (vl_repasse_w <> 0) then
				select	coalesce(max(a.nr_sequencia_item),0) + 1
				into STRICT	nr_seq_item_w
				from	repasse_terceiro_item a
				where	a.nr_repasse_terceiro = nr_repasse_terceiro_p;

				insert	into	repasse_terceiro_item(	nr_sequencia,
									nr_sequencia_item,
									vl_repasse,
									nm_usuario_nrec,
									dt_atualizacao_nrec,
									nm_usuario,
									dt_atualizacao,
									nr_seq_trans_fin,
									cd_centro_custo,
									ds_observacao,
									nr_repasse_terceiro,
									nr_seq_regra_rep_ponto)
					values (	nextval('repasse_terceiro_item_seq'),
									nr_seq_item_w,
									vl_repasse_w,
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									r_c_regra_pontuacao.nr_seq_trans_financ,
									cd_centro_custo_w,
									ds_observacao_w,
									nr_repasse_terceiro_p,
									r_c_regra_pontuacao.nr_sequencia);
			end if;
			
			end loop;
		end loop;
	elsif (r_c_regra_pontuacao.ie_tipo_pontuacao = 4) then --Repasse por rentabilidade (calculo percentual).
		
		for r_c_valor_cc in c_valor_cc(	nr_repasse_terceiro_p, r_c_regra_pontuacao.nr_sequencia, r_c_regra_pontuacao_item.dt_inicio_vigencia, r_c_regra_pontuacao_item.dt_fim_vigencia) loop

			if (coalesce(r_c_regra_pontuacao.ie_ordem_calc_custo, 'N') = 'N') then
				vl_rentabilidade_w := (r_c_valor_cc.vl_original_repasse -
									  r_c_valor_cc.vl_custo_repasse -
									  dividir_sem_round((r_c_valor_cc.vl_original_repasse - r_c_valor_cc.vl_custo_repasse) * r_c_regra_pontuacao.pr_desconto_repasse, 100));
			else
				vl_rentabilidade_w := (r_c_valor_cc.vl_original_repasse -
									  r_c_valor_cc.vl_custo_repasse -
									  dividir_sem_round((r_c_valor_cc.vl_original_repasse * r_c_regra_pontuacao.pr_desconto_repasse)::numeric, 100));
			end if;
			
			--A porcentagem a ser repassada para este calculo de rentabilidade e:
			ds_observacao_w	:= wheb_mensagem_pck.get_texto(918156)||'('||r_c_regra_pontuacao.nr_sequencia||'/'||r_c_regra_pontuacao_item.nr_sequencia||') '|| r_c_regra_pontuacao.ds_regra_pontuacao || ' ' ||ds_enter_w;
			ds_observacao_w	:= substr(ds_observacao_w ||wheb_mensagem_pck.get_texto(919143)||pr_repassar_w||'. '||ds_enter_w,1,400);
			
			vl_repasse_w	:= dividir_sem_round((pr_repassar_w * vl_rentabilidade_w)::numeric,100);
			
			--Valor calculado a partir da porcentagem a ser repassada sobre o total lancado no centro de custo:
			ds_observacao_w	:= substr(ds_observacao_w || wheb_mensagem_pck.get_texto(919355)||vl_repasse_w||'. ',1,400);
			
			if (vl_repasse_w <> 0) then
				select	coalesce(max(a.nr_sequencia_item),0) + 1
				into STRICT	nr_seq_item_w
				from	repasse_terceiro_item a
				where	a.nr_repasse_terceiro = nr_repasse_terceiro_p;

				insert	into	repasse_terceiro_item(	nr_sequencia,
									nr_sequencia_item,
									vl_repasse,
									nm_usuario_nrec,
									dt_atualizacao_nrec,
									nm_usuario,
									dt_atualizacao,
									nr_seq_trans_fin,
									cd_centro_custo,
									ds_observacao,
									nr_repasse_terceiro,
									nr_seq_regra_rep_ponto)
					values (	nextval('repasse_terceiro_item_seq'),
									nr_seq_item_w,
									vl_repasse_w,
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									r_c_regra_pontuacao.nr_seq_trans_financ,
									r_c_valor_cc.cd_centro_custo,
									ds_observacao_w,
									nr_repasse_terceiro_p,
									r_c_regra_pontuacao.nr_sequencia);
			end if;
		end loop;
		
	end if;
	
	end loop;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_repasse_pontuacao ( nr_repasse_terceiro_p bigint, nm_usuario_p text) FROM PUBLIC;

