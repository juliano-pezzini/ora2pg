-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE valida_new_case ( NR_SEQ_EPISODIO_P bigint --	,NR_ATENDIMENTO_P IN NUMBER 
--	,NR_SEQ_TIPO_EPISODIO_P IN NUMBER 
--	,NR_SEQ_SUBTIPO_EPISODIO_P IN NUMBER 
--	,IE_STATUS_P IN VARCHAR2 
 ,IE_CONSISTIU_P INOUT text ,IE_COMPORTAMENTO_P INOUT text ,DS_MSG_P INOUT text ) AS $body$
DECLARE

 
--	1 - Episódio sem CID 
 NR_ATENDIMENTO_c01_W bigint;
 NR_ATENDIMENTO_CID_W bigint := NULL;
 IE_POSSUI_CID_W varchar(2);

--	2 - Limite de atendimentos atingido	 
 QTD_ATENDIMENTO_EPISODIO_W bigint;
 QT_VISITAS_W bigint;

--	3 - Limite de dias ativo 
 QTD_DIAS_EPISODIO_W bigint;
 DT_EPISODIO_W timestamp;

--	4 - Limite de episódios simultâneos atingido 
 QTD_EPISODIO_SIMULTANEOS_W bigint;
 QTD_EPISODIO_MESMA_SITUACAO_W bigint;
 NR_SEQ_TIPO_EPISODIO_W bigint;
 NR_SEQ_SUBTIPO_EPISODIO_W bigint;
 IE_STATUS_W varchar(2);

 
-- CURSOR COM OS ATENDIMENTOS DO EPISODIO. 
 c01 CURSOR FOR 
  SELECT 
   NR_ATENDIMENTO 
  FROM ATENDIMENTO_PACIENTE 
  WHERE NR_SEQ_EPISODIO = NR_SEQ_EPISODIO_P;

 

BEGIN 
 
-- VALORES DA TABELA REGRA_TIPO_EPISODIO.    
	SELECT 
   IE_POSSUI_CID 
  ,QT_VISITAS 
  ,QT_DIAS_EPISODIO  
  ,QT_SIMULTANEO 
  ,NR_SEQ_TIPO_EPISODIO 
  ,NR_SEQ_SUBTIPO_EPISODIO 
  ,IE_STATUS 
  ,IE_COMPORTAMENTO 
  ,DS_MENSAGEM 
 INTO STRICT 
   IE_POSSUI_CID_W 
  ,QT_VISITAS_W 
  ,QTD_DIAS_EPISODIO_W 
  ,QTD_EPISODIO_SIMULTANEOS_W 
  ,NR_SEQ_TIPO_EPISODIO_W 
  ,NR_SEQ_SUBTIPO_EPISODIO_W 
  ,IE_STATUS_W 
  ,IE_COMPORTAMENTO_P 
  ,DS_MSG_P 
	FROM REGRA_TIPO_EPISODIO;
    
-- QUANTIDADE DE ATENDIMENTOS EM UM EPISODIO.    
	SELECT 
  COUNT(*) 
	INTO STRICT 
  QTD_ATENDIMENTO_EPISODIO_W 
	FROM ATENDIMENTO_PACIENTE 
	WHERE NR_SEQ_EPISODIO = NR_SEQ_EPISODIO_P;
     
-- DATA DO EPISODIO. 
 SELECT 
  coalesce(DT_EPISODIO, DT_ATUALIZACAO) 
 INTO STRICT 
  DT_EPISODIO_W 
 FROM EPISODIO_PACIENTE 
	WHERE NR_SEQUENCIA = NR_SEQ_EPISODIO_P;
  
-- QUANTIDADE DE EPISODIO COM A MESMA SITUACAO. 
 SELECT 
  COUNT(*) 
 INTO STRICT QTD_EPISODIO_MESMA_SITUACAO_W 
 	FROM EPISODIO_PACIENTE 
	WHERE CD_PESSOA_FISICA = (SELECT CD_PESSOA_FISICA FROM EPISODIO_PACIENTE WHERE NR_SEQUENCIA = NR_SEQ_EPISODIO_P) 
 AND NR_SEQ_TIPO_EPISODIO = NR_SEQ_TIPO_EPISODIO_W 
 AND NR_SEQ_SUBTIPO_EPISODIO = NR_SEQ_SUBTIPO_EPISODIO_W 
 AND IE_STATUS = IE_STATUS_W;
   
-- ***VALIDACOES*** 
   
 IE_CONSISTIU_P:= 'N';
   
--	1 - Episódio sem CID 
 IF (IE_POSSUI_CID_W = 'S') THEN 
      
  OPEN c01;
  LOOP 
  FETCH c01 INTO	NR_ATENDIMENTO_c01_W;
  EXIT WHEN NOT FOUND; /* apply on c01 */
   BEGIN 
        
    SELECT 
     DISTINCT NR_ATENDIMENTO 
    INTO STRICT NR_ATENDIMENTO_CID_W 
    FROM DIAGNOSTICO_DOENCA 
    WHERE NR_ATENDIMENTO = NR_ATENDIMENTO_c01_W;
     
    IF (NR_ATENDIMENTO_CID_W IS NOT NULL AND NR_ATENDIMENTO_CID_W::text <> '') THEN 
      
     INSERT INTO VALIDACAO_EPISODIO( 
       NR_SEQUENCIA 
      ,DT_ATUALIZACAO 
      ,NM_USUARIO 
      ,DT_ATUALIZACAO_NREC 
      ,NM_USUARIO_NREC 
      ,NR_SEQ_EPISODIO 
      ,NR_SEQ_CONSISTENCIA 
     ) 
     VALUES ( 
       nextval('validacao_episodio_seq') 
      ,clock_timestamp() 
      ,Obter_Usuario_Ativo 
      ,clock_timestamp() 
      ,Obter_Usuario_Ativo 
      ,NR_SEQ_EPISODIO_P 
      ,1 
     );
      
     IE_CONSISTIU_P:= 'S';
      
     EXIT;
      
    END IF;
     
   END;
  END LOOP;
  CLOSE c01;
   
 END IF;
  
  
--	2 - Limite de atendimentos atingido   
 IF ((QTD_ATENDIMENTO_EPISODIO_W) > QT_VISITAS_W) THEN 
  
  INSERT INTO VALIDACAO_EPISODIO( 
    NR_SEQUENCIA 
   ,DT_ATUALIZACAO 
   ,NM_USUARIO 
   ,DT_ATUALIZACAO_NREC 
   ,NM_USUARIO_NREC 
   ,NR_SEQ_EPISODIO 
   ,NR_SEQ_CONSISTENCIA 
  ) 
  VALUES ( 
    nextval('validacao_episodio_seq') 
   ,clock_timestamp() 
   ,Obter_Usuario_Ativo 
   ,clock_timestamp() 
   ,Obter_Usuario_Ativo 
   ,NR_SEQ_EPISODIO_P 
   ,2 
  );
   
  IE_CONSISTIU_P:= 'S';
   
 END IF;
 
--	3 - Limite de dias ativo  
 IF (Obter_Dias_Entre_Datas(DT_EPISODIO_W, clock_timestamp()) > QTD_DIAS_EPISODIO_W) THEN 
   
  INSERT INTO VALIDACAO_EPISODIO( 
    NR_SEQUENCIA 
   ,DT_ATUALIZACAO 
   ,NM_USUARIO 
   ,DT_ATUALIZACAO_NREC 
   ,NM_USUARIO_NREC 
   ,NR_SEQ_EPISODIO 
   ,NR_SEQ_CONSISTENCIA 
  ) 
  VALUES ( 
    nextval('validacao_episodio_seq') 
   ,clock_timestamp() 
   ,Obter_Usuario_Ativo 
   ,clock_timestamp() 
   ,Obter_Usuario_Ativo 
   ,NR_SEQ_EPISODIO_P 
   ,3 
  );
   
  IE_CONSISTIU_P:= 'S';
   
 END IF;
  
-- 4 - Limite de episódios simultâneos atingido 
 IF (QTD_EPISODIO_SIMULTANEOS_W >= QTD_EPISODIO_MESMA_SITUACAO_W) THEN 
     
  INSERT INTO VALIDACAO_EPISODIO( 
    NR_SEQUENCIA 
   ,DT_ATUALIZACAO 
   ,NM_USUARIO 
   ,DT_ATUALIZACAO_NREC 
   ,NM_USUARIO_NREC 
   ,NR_SEQ_EPISODIO 
   ,NR_SEQ_CONSISTENCIA 
  ) 
  VALUES ( 
    nextval('validacao_episodio_seq') 
   ,clock_timestamp() 
   ,Obter_Usuario_Ativo 
   ,clock_timestamp() 
   ,Obter_Usuario_Ativo 
   ,NR_SEQ_EPISODIO_P 
   ,4 
  );
   
  IE_CONSISTIU_P:= 'S';
     
 END IF;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE valida_new_case ( NR_SEQ_EPISODIO_P bigint  ,IE_CONSISTIU_P INOUT text ,IE_COMPORTAMENTO_P INOUT text ,DS_MSG_P INOUT text ) FROM PUBLIC;

