-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consist_evento_ocor_fin ( nr_seq_lote_p pls_evento_imp_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


ie_consistente_w	pls_evento_imp_ocor_fin.ie_consistente%type;
nr_seq_prestador_w	pls_prestador.nr_sequencia%type;

c01 CURSOR( nr_seq_lote_pc	pls_evento_imp_lote.nr_sequencia%type) FOR
	SELECT	a.cd_cgc_prest,
		a.nr_cpf_prest,
		coalesce(a.vl_lancamento, 0) vl_lancamento,
		a.nr_sequencia,
		a.ie_consistente,
		a.nr_seq_prestador
	from	pls_evento_imp_ocor_fin a
	where 	a.nr_seq_lote = nr_seq_lote_pc;

BEGIN

for r_c01_w in C01(nr_seq_lote_p) loop

	-- sempre começa como sendo consistente
	ie_consistente_w := 'S';

	-- verifica se é cpf ou cgc, se nenhum dos dois estiver preenchido já joga como inconsistente
	-- primeiro irá verificar os prestadores que existem na pls_pagamento_prestador, caso não exista ai pega o que encontrar
	if (r_c01_w.nr_cpf_prest IS NOT NULL AND r_c01_w.nr_cpf_prest::text <> '') then

		select 	max(a.nr_sequencia)
		into STRICT	nr_seq_prestador_w
		from	pls_prestador a,
			pessoa_fisica b
		where	b.nr_cpf = r_c01_w.nr_cpf_prest
		and	a.cd_pessoa_fisica = b.cd_pessoa_fisica
		and 	a.ie_situacao = 'A'
		and 	trunc(clock_timestamp()) between trunc(a.dt_cadastro) and fim_dia(coalesce(a.dt_exclusao,clock_timestamp()))
		and 	exists (	SELECT	1
				from 	pls_pagamento_prestador x
				where 	x.nr_seq_prestador = a.nr_sequencia);

		if (coalesce(nr_seq_prestador_w::text, '') = '') then

			select 	max(a.nr_sequencia)
			into STRICT	nr_seq_prestador_w
			from	pls_prestador a,
				pessoa_fisica b
			where	b.nr_cpf = r_c01_w.nr_cpf_prest
			and	a.cd_pessoa_fisica = b.cd_pessoa_fisica
			and 	a.ie_situacao = 'A'
			and 	trunc(clock_timestamp()) between trunc(a.dt_cadastro) and fim_dia(coalesce(a.dt_exclusao,clock_timestamp()));
		end if;

	elsif (r_c01_w.cd_cgc_prest IS NOT NULL AND r_c01_w.cd_cgc_prest::text <> '') then

		select	max(a.nr_sequencia)
		into STRICT	nr_seq_prestador_w
		from	pls_prestador a
		where	a.cd_cgc = r_c01_w.cd_cgc_prest
		and	a.ie_situacao = 'A'
		and 	trunc(clock_timestamp()) between trunc(a.dt_cadastro) and fim_dia(coalesce(a.dt_exclusao,clock_timestamp()))
		and 	exists (	SELECT	1
				from 	pls_pagamento_prestador x
				where 	x.nr_seq_prestador = a.nr_sequencia);

		if (coalesce(nr_seq_prestador_w::text, '') = '') then

			select 	max(a.nr_sequencia)
			into STRICT	nr_seq_prestador_w
			from	pls_prestador a
			where	a.cd_cgc = r_c01_w.cd_cgc_prest
			and 	a.ie_situacao = 'A'
			and 	trunc(clock_timestamp()) between trunc(a.dt_cadastro) and fim_dia(coalesce(a.dt_exclusao,clock_timestamp()));
		end if;
	end if;

	-- caso o usuário tenha ajustado o prestador ao invés do cpf/cgc
	if (coalesce(nr_seq_prestador_w::text, '') = '') and (r_c01_w.nr_seq_prestador IS NOT NULL AND r_c01_w.nr_seq_prestador::text <> '') then

		nr_seq_prestador_w := r_c01_w.nr_seq_prestador;

	-- se não identificou o prestador então não é válido
	elsif (coalesce(nr_seq_prestador_w::text, '') = '') then

		ie_consistente_w := 'N';
	end if;

	-- o valor deve ser positivo e maior que zero
	if (r_c01_w.vl_lancamento <= 0) then

		ie_consistente_w := 'N';
	end if;

	update	pls_evento_imp_ocor_fin
	set	ie_consistente = ie_consistente_w,
		nm_usuario = nm_usuario_p,
		dt_atualizacao = clock_timestamp(),
		nr_seq_prestador = nr_seq_prestador_w
	where	nr_sequencia = r_c01_w.nr_sequencia;

	commit;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consist_evento_ocor_fin ( nr_seq_lote_p pls_evento_imp_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

