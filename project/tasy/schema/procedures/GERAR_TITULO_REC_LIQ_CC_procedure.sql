-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_titulo_rec_liq_cc ( cd_estabelecimento_p bigint, nr_seq_ret_item_p bigint, nm_usuario_p text, nr_titulo_p bigint, nr_seq_baixa_p bigint) AS $body$
DECLARE


/*  NAO DAR COMMIT NESTA PROCEDURE - EDGAR  */

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[ X ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atencao:
    IE_ORIGEM_CLASSIF
        Dominio 6942 
-------------------------------------------------------------------------------------------------------------------
Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_cc_glosa_w           varchar(15);
cd_centro_custo_w           bigint;
cd_centro_custo_receita_w       bigint;
nr_guia_w           varchar(22);
vl_glosa_item_w         double precision;
vl_amaior_item_w            double precision;
vl_guia_w           double precision;
vl_glosa_acum_w         double precision;
vl_amaior_acum_w            double precision;
vl_glosa_w          double precision;
vl_amaior_w         double precision;
nr_titulo_w         bigint;
nr_sequencia_w          bigint;
nr_interno_conta_w          bigint;
vl_titulo_w         double precision;
vl_item_w               double precision;
vl_conta_w          double precision;
vl_glosa_liq_cc_w           double precision;
vl_amaior_liq_cc_w          double precision;
vl_rec_maior_w          double precision;
nr_seq_tit_rec_liq_cc_w     bigint;
vl_classificacao_w          double precision;
vl_recebido_w           double precision;
vl_tot_recebido_cc_w        double precision;
cd_convenio_w           bigint;
ie_tipo_atendimento_w       bigint;
ie_tipo_convenio_w          bigint;
cd_historico_pls_w          bigint;
cd_conta_contabil_w     varchar(100);
ie_cc_receita_glosa_w       varchar(100);
dt_recebimento_w            timestamp;
vl_item_mensalidade_w       double precision;
cd_conta_rec_w          varchar(100);
cd_conta_deb_w          varchar(100);
cd_conta_rec_antecip_w      varchar(20);
cd_conta_deb_antecip_w      varchar(20);
vl_antecipacao_w            double precision;
vl_pro_rata_dia_w           double precision;
cd_cgc_w            varchar(100);
cd_pessoa_fisica_glosa_w        varchar(100);
nr_seq_mens_seg_item_w      bigint;
nr_seq_mensalidade_w        bigint;
ie_tipo_protocolo_w         smallint;
nr_seq_conta_pls_w      bigint;
vl_tot_glosa_cc_w           double precision;
vl_tot_amaior_cc_w          double precision;
nr_seq_produto_w            bigint;
nr_seq_ret_item_w           bigint;
nr_seq_propaci_w            bigint;
nr_seq_matpaci_w            bigint;
cd_setor_atendimento_w      integer;
nr_seq_rec_liq_w            bigint;
vl_glosa_itens_w            double precision;
vl_amaior_itens_w           double precision;
qt_itens_glosados_w     bigint;
nr_seq_conpaci_ret_hist_w       bigint;
dt_mensalidade_w            timestamp;
cd_historico_antec_w        bigint;
cd_conta_antec_baixa_w      varchar(20);
dt_antecipacao_w            timestamp    := null;
ie_contab_baixas_pro_rata_w     varchar(1);
dt_antecipacao_baixa_w      timestamp;
dt_emissao_titulo_w         timestamp;
ie_tipo_w               varchar(2);
dt_referencia_lote_w        timestamp;
ie_consistir_glosa_w        varchar(255);
ie_acao_w           varchar(1);
vl_descontos_w          double precision;
ie_cc_glosa_motivo_w        varchar(1);
ie_pls_w                varchar(1);
cd_historico_w          bigint;
cd_historico_rev_baixa_w        bigint;
nr_seq_grupo_w          bigint;
vl_baixa_pls_w          double precision;
vl_baixa_pls_aux_w          double precision;
vl_saldo_pls_w          double precision;
ie_tributacao_pls_w         varchar(1) := 'F';
vl_proporcional_w           double precision;
vl_trib_mens_w          double precision;
qt_trib_mens_w          bigint;
vl_tot_antecipacao_cc_w     double precision;
vl_tot_pro_rata_cc_w        double precision;
cd_conta_contabil_rec_antec_w   varchar(20);
nr_seq_trans_financ_w       bigint;
nr_seq_fatura_w         pls_fatura.nr_sequencia%type;
cd_conta_contab_fatur_w     pls_fatura_proc.cd_conta_debito%type;
cd_historico_fatur_w        pls_fatura_proc.cd_historico%type;
vl_movimento_fatur_w        pls_fatura_proc.vl_faturado%type;
cd_estab_centro_custo_w     centro_custo.cd_estabelecimento%type;
vl_recebido_cc_w            double precision;
vl_total_pago_w         double precision;
vl_pago_total_w         double precision;
vl_recebido_acum_w      double precision;
vl_recebido_perdas_w        double precision;
vl_classificacao_perdas_w       double precision;
vl_perdas_w         double precision;
vl_perda_liq_w          double precision;
vl_tot_vl_perdas_w          double precision;
count_w             bigint  := 0;
nr_tot_tit_classif_w            bigint;
vl_dif_vl_perdas_w          double precision;
vl_soma_total_perdas_w      double precision;
ie_atualiza_vl_receb_cc_w   varchar(1) := 'N';
vl_tot_recebido_rat_w       double precision;
/* Projeto Multimoeda - Variaveis */

vl_recebido_estrang_w       double precision;
vl_cotacao_w            cotacao_moeda.vl_cotacao%type;
cd_moeda_w          integer;
vl_recebido_estrang_cc_w    double precision;
vl_complemento_cc_w     double precision;
vl_cotacao_cc_w         double precision;
cd_moeda_cc_w           integer;
vl_tot_receb_estrang_cc_w   double precision;
vl_desconto_liq_w       titulo_receber_liq.vl_descontos%type;
vl_juros_w              titulo_receber_liq.vl_juros%type;
vl_multa_w              titulo_receber_liq.vl_multa%type;
vl_recebido_arredonda_w titulo_rec_liq_cc.vl_recebido%type;
vl_desconto_cc_w        titulo_rec_liq_cc.vl_desconto%type;
nr_seq_baixa_cc_w       titulo_rec_liq_cc.nr_sequencia%type;
vl_juros_cc_w           titulo_rec_liq_cc.vl_juros%type;
vl_multa_cc_w           titulo_rec_liq_cc.vl_multa%type;
vl_baixa_glosa_w        titulo_rec_liq_cc.vl_baixa%type;
nr_seq_liq_cc_w         titulo_rec_liq_cc.nr_sequencia%type;
vl_tot_desconto_cc_w    titulo_rec_liq_cc.vl_desconto%type;
vl_desconto_calc_w      titulo_receber_liq.vl_descontos%type;
vl_tot_juros_w          titulo_rec_liq_cc.vl_juros%type;
vl_tot_multa_w          titulo_rec_liq_cc.vl_multa%type;
nr_seq_cc_w             titulo_rec_liq_cc.nr_sequencia%type;
vl_rec_maior_calc_w     titulo_rec_liq_cc.vl_amaior%type;
vl_perdas_baixa_w       double precision;
nr_seq_liq_origem_w     titulo_receber_liq.nr_seq_liq_origem%type;
ie_estorno_w            varchar(1);
ie_contab_classif_titulo_w  varchar(1);
vl_movimento_fatur_perda_w      double precision;

vl_movimento_fatur_orig_w       pls_fatura_proc.vl_faturado%type;
nr_seq_lote_hist_guia_w			titulo_receber_liq.nr_seq_lote_hist_guia%type;
ds_lista_centro_custo_w			varchar(4000);

vl_tot_classif_cc_glosa_w		titulo_receber_classif.vl_classificacao%type;
cd_centro_custo_cc_glosa_w		titulo_receber_classif.cd_centro_custo%type;
vl_glosa_cc_w					lote_audit_hist_item.vl_glosa_informada%type;
vl_perdas_cc_w				titulo_receber_liq.vl_perdas%type;
vl_tot_perdas_w				titulo_receber_liq.vl_perdas%type;

C01 CURSOR FOR
    SELECT  cd_centro_custo,
        sum(coalesce(vl_glosa,0)),
        sum(coalesce(vl_amaior,0)),
        ie_tipo_atendimento,
        ie_tipo_protocolo,
        cd_pessoa_fisica,
        sum(coalesce(vl_total_pago,0))
    from (SELECT coalesce(c.cd_centro_custo, cd_centro_custo_w) cd_centro_custo,
            sum(vl_glosa) vl_glosa,
            sum(vl_amaior) vl_amaior,
            d.ie_tipo_atendimento,
            obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta)) ie_tipo_protocolo,
            a.cd_pessoa_fisica,
            sum((obter_dados_ret_movto_glosa(a.nr_sequencia, 3))::numeric ) vl_total_pago
        from    atendimento_paciente d,
            setor_atendimento c,
            procedimento_paciente b,
            convenio_retorno_glosa a
        where   a.nr_seq_ret_item   = nr_seq_ret_item_p
        and a.nr_seq_propaci    = b.nr_sequencia
        and b.cd_setor_atendimento  = c.cd_setor_atendimento
        and b.nr_atendimento    = d.nr_atendimento
        group   by coalesce(c.cd_centro_custo, cd_centro_custo_w),
            d.ie_tipo_atendimento,
            obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta)),
            a.cd_pessoa_fisica

union   all

        select  coalesce(c.cd_centro_custo, cd_centro_custo_w),
            sum(vl_glosa),
            sum(vl_amaior) vl_amaior,
            d.ie_tipo_atendimento,
            obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta)) ie_tipo_protocolo,
            a.cd_pessoa_fisica,
            sum((obter_dados_ret_movto_glosa(a.nr_sequencia, 3))::numeric ) vl_total_pago
        from    atendimento_paciente d,
            setor_atendimento c,
            material_atend_paciente b,
            convenio_retorno_glosa a
        where   a.nr_seq_ret_item   = nr_seq_ret_item_p
        and a.nr_seq_matpaci    = b.nr_sequencia
        and b.cd_setor_atendimento  = c.cd_setor_atendimento
        and b.nr_atendimento    = d.nr_atendimento
        group   by
            coalesce(c.cd_centro_custo, cd_centro_custo_w),
            d.ie_tipo_atendimento,
            obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta)),
            a.cd_pessoa_fisica
        
union   all

        select  coalesce(b.cd_centro_custo, cd_centro_custo_w),
            sum(vl_glosa),
            sum(vl_amaior) vl_amaior,
            (null)::numeric  ie_tipo_atendimento,
            null ie_tipo_protocolo,
            a.cd_pessoa_fisica,
            sum((obter_dados_ret_movto_glosa(a.nr_sequencia, 3))::numeric ) vl_total_pago
        FROM convenio_retorno_glosa a
LEFT OUTER JOIN setor_atendimento b ON (a.cd_setor_atendimento = b.cd_setor_atendimento)
WHERE a.nr_seq_ret_item   = nr_seq_ret_item_p  and coalesce(a.nr_seq_propaci::text, '') = '' and coalesce(a.nr_seq_matpaci::text, '') = ''
        group   by
            coalesce(b.cd_centro_custo, cd_centro_custo_w),
            a.cd_pessoa_fisica ) alias38
    group   by
        cd_centro_custo,
        ie_tipo_atendimento,
        ie_tipo_protocolo,
        cd_pessoa_fisica;

C02 CURSOR FOR
    SELECT  cd_centro_custo,
        sum(vl_item),
        ie_tipo_atendimento,
        cd_centro_custo_receita,
        ie_tipo_protocolo
    from (SELECT coalesce(c.cd_centro_custo, cd_centro_custo_w) cd_centro_custo,
            coalesce(sum(b.vl_procedimento),0) vl_item,
            d.ie_tipo_atendimento,
            c.cd_centro_custo_receita,
            obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta)) ie_tipo_protocolo
        from    atendimento_paciente d,
            setor_atendimento c,
            procedimento_paciente b
        where   b.cd_setor_atendimento  = c.cd_setor_atendimento
        and b.nr_interno_conta  = nr_interno_conta_w
        and coalesce(b.nr_seq_proc_pacote, b.nr_sequencia) = b.nr_sequencia
        and b.nr_atendimento    = d.nr_atendimento
        and coalesce(b.cd_motivo_exc_conta::text, '') = ''
        group   by
            coalesce(c.cd_centro_custo, cd_centro_custo_w),
            d.ie_tipo_atendimento,
            c.cd_centro_custo_receita,
            obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta))

union   all

        select  coalesce(c.cd_centro_custo, cd_centro_custo_w),
            coalesce(sum(b.vl_material),0) vl_item,
            d.ie_tipo_atendimento,
            c.cd_centro_custo_receita,
            obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta)) ie_tipo_protocolo
        from    atendimento_paciente d,
            setor_atendimento c,
            material_atend_paciente b
        where   b.cd_setor_atendimento  = c.cd_setor_atendimento
        and b.nr_interno_conta  = nr_interno_conta_w
        and b.nr_atendimento    = d.nr_atendimento
        and coalesce(b.nr_seq_proc_pacote::text, '') = ''
        and coalesce(b.cd_motivo_exc_conta::text, '') = ''
        group   by
            coalesce(c.cd_centro_custo, cd_centro_custo_w),
            d.ie_tipo_atendimento,
            c.cd_centro_custo_receita,
            obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta))) alias21
    group   by
        cd_centro_custo,
        ie_tipo_atendimento,
        cd_centro_custo_receita,
        ie_tipo_protocolo;

C03 CURSOR FOR
    SELECT  a.vl_classificacao,
        a.cd_centro_custo,
        a.cd_conta_contabil,
        a.nr_seq_produto,
        a.cd_historico
    from    titulo_receber_classif a
    where   a.nr_titulo = nr_titulo_p
    and not exists (SELECT 1
                from    titulo_rec_liq_cc x 
                where   x.nr_titulo     = a.nr_titulo
                and x.nr_seq_baixa  = nr_seq_baixa_p)
    and coalesce(ie_contab_baixas_pro_rata_w,'N') <> 'A'
	and coalesce(ds_lista_centro_custo_w::text, '') = ''
    
union all

    select  sum(a.vl_classificacao),
        a.cd_centro_custo,
        a.cd_conta_contabil,
        a.nr_seq_produto,
        a.cd_historico
    from    titulo_receber_classif a
    where   a.nr_titulo = nr_titulo_p
    and not exists (select 1 
                from    titulo_rec_liq_cc x 
                where   x.nr_titulo     = a.nr_titulo
                and x.nr_seq_baixa  = nr_seq_baixa_p)
    and ie_contab_baixas_pro_rata_w = 'A'
	and coalesce(ds_lista_centro_custo_w::text, '') = ''
    group by
        a.cd_centro_custo,
        a.cd_conta_contabil,
        a.nr_seq_produto,
        a.cd_historico;
	
C06 CURSOR FOR
	SELECT 	coalesce(b.cd_centro_custo,
			   coalesce((SELECT	max(y.cd_centro_custo_receita)
					from	setor_atendimento y,
							procedimento_paciente x
					where	x.cd_setor_atendimento	= y.cd_setor_atendimento
					and		x.nr_sequencia			= a.nr_seq_propaci),
					(select	max(y.cd_centro_custo_receita)
					from	setor_atendimento y,
							material_atend_paciente x
					where	x.cd_setor_atendimento	= y.cd_setor_atendimento
					and		x.nr_sequencia			= a.nr_seq_matpaci)
				   )
				) cd_setor_atendimento
	FROM lote_audit_hist_item a
LEFT OUTER JOIN setor_atendimento b ON (a.cd_setor_atendimento = b.cd_setor_atendimento)
WHERE nr_seq_guia = nr_seq_lote_hist_guia_w  and a.vl_glosa > 0;
	
C07 CURSOR FOR
	SELECT	sum(a.vl_classificacao),
			a.cd_centro_custo
	from	titulo_receber_classif a
	where	a.nr_titulo = nr_titulo_p
	and		obter_se_contido(a.cd_centro_custo, ds_lista_centro_custo_w) = 'S'
	group by  a.cd_centro_custo;
	
C08 CURSOR FOR
	SELECT  a.vl_classificacao,
			a.cd_centro_custo,
			a.cd_conta_contabil,
			a.nr_seq_produto,
			a.cd_historico
    from    titulo_receber_classif a
    where   a.nr_titulo = nr_titulo_p
    and not exists (SELECT 1
                from    titulo_rec_liq_cc x 
                where   x.nr_titulo     = a.nr_titulo
                and 	x.nr_seq_baixa  = nr_seq_baixa_p
				and 	x.cd_centro_custo = cd_centro_custo_cc_glosa_w)
    and coalesce(ie_contab_baixas_pro_rata_w,'N') <> 'A'
	and (coalesce(nr_seq_lote_hist_guia_w,0) <> 0 and coalesce(vl_glosa_w,0) <> 0 and a.cd_centro_custo = cd_centro_custo_cc_glosa_w);	

C04 CURSOR FOR
    SELECT  b.vl_item,
        b.cd_conta_rec,
        b.cd_conta_deb,
        b.nr_sequencia,
        coalesce(b.cd_historico_baixa,b.cd_historico),
        (null)::numeric  nr_seq_conta,
        b.cd_conta_rec_antecip,
        b.cd_conta_deb_antecip,
        b.vl_antecipacao,
        b.vl_pro_rata_dia,
        coalesce(b.cd_historico_antec_baixa,b.cd_historico_antec),
        b.cd_conta_antec_baixa,
        b.dt_antecipacao,
        b.dt_antecipacao_baixa,
        'ME',
        d.dt_mesano_referencia,
        b.cd_historico_rev_antec_baixa,
        b.cd_conta_contabil_rec_antec
    from    pls_mensalidade_seg_item    b,
        pls_mensalidade_segurado    a,
        pls_mensalidade         c,
        pls_lote_mensalidade        d
    where   a.nr_sequencia      = b.nr_seq_mensalidade_seg
    and c.nr_sequencia      = a.nr_seq_mensalidade
    and d.nr_sequencia      = c.nr_seq_lote
    and b.ie_tipo_item      not in ('3','6','7')
    and c.nr_sequencia      = nr_seq_mensalidade_w

union all

    /* Pos-estabelecido */

    SELECT  b.vl_item,
        f.cd_conta_cred,
        f.cd_conta_deb,
        b.nr_sequencia,
        coalesce((   select  coalesce(max(x.cd_historico_baixa),max(x.cd_historico_padrao))
            from    pls_esquema_contabil x
            where   x.nr_sequencia  = f.nr_seq_esquema), f.cd_historico),
        (null)::numeric  nr_seq_conta,
        b.cd_conta_rec_antecip,
        b.cd_conta_deb_antecip,
        b.vl_antecipacao,
        b.vl_pro_rata_dia,
        coalesce(b.cd_historico_antec_baixa,b.cd_historico_antec),
        b.cd_conta_antec_baixa,
        b.dt_antecipacao,
        b.dt_antecipacao_baixa,
        'ME',
        d.dt_mesano_referencia,
        b.cd_historico_rev_antec_baixa,
        b.cd_conta_contabil_rec_antec
    from    pls_conta_pos_estabelecido  f,
        pls_conta           e,
        pls_mensalidade_seg_item    b,
        pls_mensalidade_segurado    a,
        pls_mensalidade         c,
        pls_lote_mensalidade        d
    where   e.nr_sequencia      = f.nr_seq_conta
    and b.nr_seq_conta      = e.nr_sequencia
    and a.nr_sequencia      = b.nr_seq_mensalidade_seg
    and c.nr_sequencia      = a.nr_seq_mensalidade
    and d.nr_sequencia      = c.nr_seq_lote
    and c.nr_sequencia      = nr_seq_mensalidade_w
    and f.ie_cobrar_mensalidade = 'S'
    --and   f.ie_preco_plano in ('2','3') retirado cfme OS 1258972
    and b.ie_tipo_item  in ('6','7')
    and coalesce(f.ie_situacao,'A') = 'A'
    
union all

    /* itens pagador */

    select  b.vl_item,
        b.cd_conta_rec,
        b.cd_conta_deb,
        b.nr_sequencia,
        coalesce(b.cd_historico_baixa,b.cd_historico),
        (null)::numeric  nr_seq_conta,
        b.cd_conta_rec_antecip,
        b.cd_conta_deb_antecip,
        b.vl_antecipacao,
        b.vl_pro_rata_dia,
        coalesce(b.cd_historico_antec_baixa,b.cd_historico_antec),
        b.cd_conta_antec_baixa,
        b.dt_antecipacao,
        b.dt_antecipacao_baixa,
        'ME',
        d.dt_mesano_referencia,
        b.cd_historico_rev_antec_baixa,
        b.cd_conta_contabil_rec_antec
    from    pls_mensalidade_seg_item    b,
        pls_mensalidade         c,
        pls_lote_mensalidade        d
    where   c.nr_sequencia      = b.nr_seq_mensalidade
    and d.nr_sequencia      = c.nr_seq_lote
    and c.nr_sequencia      = nr_seq_mensalidade_w
    and coalesce(b.nr_seq_mensalidade_seg::text, '') = ''
    and b.ie_tipo_item      not in ('3','6','7')
    
union

    select  coalesce(sum(coalesce(c.vl_copartic_mens,c.vl_coparticipacao)),0),
        c.cd_conta_cred,
        c.cd_conta_deb,
        (null)::numeric  nr_sequencia,
        coalesce(c.cd_historico_baixa,c.cd_historico),
        c.nr_seq_conta nr_seq_conta,
        c.cd_conta_cred_antecip cd_conta_rec_antecip,
        c.cd_conta_deb_antecip cd_conta_deb_antecip,
        (null)::numeric  vl_antecipacao,
        (null)::numeric  vl_pro_rata_dia,
        (null)::numeric  cd_historico_antec,
        c.cd_conta_antec_baixa cd_conta_antec_baixa,
        to_date(null) dt_antecipacao,
        to_date(null) dt_antecipacao_baixa,
        'CO',
        e.dt_mesano_referencia,
        null cd_historico_rev_antec_baixa,
        null cd_conta_contabil_rec_antec
    from    pls_mensalidade         a,
        pls_mensalidade_segurado    b,
        pls_mensalidade_seg_item    x,
        pls_conta_coparticipacao    c,
        pls_lote_mensalidade        e
    where   a.nr_sequencia      = b.nr_seq_mensalidade
    and     b.nr_sequencia      = x.nr_seq_mensalidade_seg
    and     c.nr_seq_conta      = x.nr_seq_conta
    and e.nr_sequencia      = a.nr_seq_lote
    and a.nr_sequencia      = nr_seq_mensalidade_w
    having  coalesce(sum(coalesce(c.vl_copartic_mens,c.vl_coparticipacao)),0) <> 0
    group by
        c.cd_conta_cred,
        c.cd_conta_deb,
        c.cd_conta_cred_antecip,
        c.cd_conta_deb_antecip,
        c.cd_conta_antec_baixa,
        coalesce(c.cd_historico_baixa,c.cd_historico),
        c.nr_seq_conta,
        e.dt_mesano_referencia;

C05 CURSOR FOR
    SELECT  a.nr_seq_propaci,
        a.nr_seq_matpaci,
        c.cd_setor_atendimento,
        e.ie_tipo_atendimento,
        obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta)) ie_tipo_protocolo,
        sum(a.vl_glosa),
        sum(coalesce(a.vl_amaior, 0)),
        coalesce(sum((obter_dados_ret_movto_glosa(a.nr_sequencia, 3))::numeric ),0)
    FROM atendimento_paciente e, conta_paciente d, convenio_retorno_item b, convenio_retorno_glosa a
LEFT OUTER JOIN setor_atendimento c ON (a.cd_setor_atendimento = c.cd_setor_atendimento)
LEFT OUTER JOIN motivo_glosa f ON (a.cd_motivo_glosa = f.cd_motivo_glosa)
WHERE a.nr_seq_ret_item   = b.nr_sequencia  and b.nr_interno_conta  = d.nr_interno_conta and d.nr_atendimento    = e.nr_atendimento  and (coalesce(coalesce(a.ie_acao_glosa,f.ie_acao_glosa),'A')  = 'A' or (a.nr_seq_conpaci_ret_hist IS NOT NULL AND a.nr_seq_conpaci_ret_hist::text <> '')) and a.nr_seq_ret_item   = nr_seq_ret_item_w and (a.nr_seq_conpaci_ret_hist = nr_seq_conpaci_ret_hist_w or coalesce(nr_seq_conpaci_ret_hist_w::text, '') = '') and coalesce(ie_cc_glosa_motivo_w,'S')   = 'S' /* Francisco - OS 175078 - 28/10/2009 - Inclui restricao por historico quando for pela auditoria */

 group by
        a.nr_seq_propaci,
        a.nr_seq_matpaci,
        c.cd_setor_atendimento,
        e.ie_tipo_atendimento,
        obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta))

union

    SELECT  a.nr_seq_propaci,
        a.nr_seq_matpaci,
        c.cd_setor_atendimento,
        e.ie_tipo_atendimento,
        obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta)) ie_tipo_protocolo,
        sum(a.vl_glosa),
        sum(coalesce(a.vl_amaior, 0)),
        coalesce(sum((obter_dados_ret_movto_glosa(a.nr_sequencia, 3))::numeric ),0)
    FROM atendimento_paciente e, conta_paciente d, convenio_retorno_item b, convenio_retorno_glosa a
LEFT OUTER JOIN setor_atendimento c ON (a.cd_setor_atendimento = c.cd_setor_atendimento)
LEFT OUTER JOIN motivo_glosa f ON (a.cd_motivo_glosa = f.cd_motivo_glosa)
WHERE a.nr_seq_ret_item   = b.nr_sequencia  and b.nr_interno_conta  = d.nr_interno_conta and d.nr_atendimento    = e.nr_atendimento  and (coalesce(coalesce(a.ie_acao_glosa,f.ie_acao_glosa),'A')  = 'A' or (a.nr_seq_conpaci_ret_hist IS NOT NULL AND a.nr_seq_conpaci_ret_hist::text <> '')) and a.nr_seq_ret_item   = nr_seq_ret_item_w and (a.nr_seq_conpaci_ret_hist = nr_seq_conpaci_ret_hist_w or coalesce(nr_seq_conpaci_ret_hist_w::text, '') = '') and coalesce(ie_cc_glosa_motivo_w,'S')   = 'N' /* Francisco - OS 175078 - 28/10/2009 - Inclui restricao por historico quando for pela auditoria */

 group by
        a.nr_seq_propaci,
        a.nr_seq_matpaci,
        c.cd_setor_atendimento,
        e.ie_tipo_atendimento,
        obter_tipo_protocolo(obter_protocolo_conpaci(b.nr_interno_conta));

c_faturamento CURSOR FOR
    SELECT  f.cd_conta_deb_taxa,
        f.cd_historico,
        sum(f.vl_administracao) vl_movimento
    from    pls_fatura_proc         a,
        pls_fatura_conta        b,
        pls_fatura_evento       c,
        pls_fatura          d,
        pls_conta_pos_estabelecido  e,
        pls_conta_pos_estab_contab  f
    where   d.nr_sequencia  = c.nr_seq_fatura
    and c.nr_sequencia  = b.nr_seq_fatura_evento
    and b.nr_sequencia  = a.nr_seq_fatura_conta
    and e.nr_sequencia  = a.nr_seq_conta_pos_estab
    and e.nr_sequencia  = f.nr_seq_conta_pos
    and (f.nr_sequencia  = a.nr_seq_conta_pos_contab or coalesce(a.nr_seq_conta_pos_contab, 0) = 0)
    and coalesce(d.ie_tit_fat_ndc,'N')   = 'S'
    and d.nr_titulo = nr_titulo_p
    group by
        f.cd_conta_deb_taxa,
        f.cd_historico
    
union all

    SELECT  f.cd_conta_deb_taxa,
        f.cd_historico,
        sum(f.vl_administracao) vl_movimento
    from    pls_fatura_mat          a,
        pls_fatura_conta        b,
        pls_fatura_evento       c,
        pls_fatura          d,
        pls_conta_pos_estabelecido  e,
        pls_conta_pos_estab_contab  f
    where   d.nr_sequencia  = c.nr_seq_fatura
    and c.nr_sequencia  = b.nr_seq_fatura_evento
    and b.nr_sequencia  = a.nr_seq_fatura_conta
    and e.nr_sequencia  = a.nr_seq_conta_pos_estab
    and e.nr_sequencia  = f.nr_seq_conta_pos
    and (f.nr_sequencia  = a.nr_seq_conta_pos_contab or coalesce(a.nr_seq_conta_pos_contab, 0) = 0)
    and coalesce(d.ie_tit_fat_ndc,'N')   = 'S'
    and d.nr_titulo = nr_titulo_p
    group by
        f.cd_conta_deb_taxa,
        f.cd_historico
    
union all

    /* Titulo geral */

    select  f.cd_conta_deb_taxa,
        f.cd_historico,
        sum(f.vl_administracao) vl_movimento
    from    pls_fatura_proc         a,
        pls_fatura_conta        b,
        pls_fatura_evento       c,
        pls_fatura          d,
        pls_conta_pos_estabelecido  e,
        pls_conta_pos_estab_contab  f
    where   d.nr_sequencia  = c.nr_seq_fatura
    and c.nr_sequencia  = b.nr_seq_fatura_evento
    and b.nr_sequencia  = a.nr_seq_fatura_conta
    and e.nr_sequencia  = a.nr_seq_conta_pos_estab
    and e.nr_sequencia  = f.nr_seq_conta_pos
    and (f.nr_sequencia  = a.nr_seq_conta_pos_contab or coalesce(a.nr_seq_conta_pos_contab, 0) = 0)
    and coalesce(d.ie_tit_fat_ndc,'N')   = 'N'
    and a.vl_faturado   > 0
    and d.nr_titulo = nr_titulo_p
    group by
        f.cd_conta_deb_taxa,
        f.cd_historico
    
union all

    select  f.cd_conta_deb_taxa,
        f.cd_historico,
        sum(f.vl_administracao) vl_movimento
    from    pls_fatura_mat          a,
        pls_fatura_conta        b,
        pls_fatura_evento       c,
        pls_fatura          d,
        pls_conta_pos_estabelecido  e,
        pls_conta_pos_estab_contab  f
    where   d.nr_sequencia  = c.nr_seq_fatura
    and c.nr_sequencia  = b.nr_seq_fatura_evento
    and b.nr_sequencia  = a.nr_seq_fatura_conta
    and e.nr_sequencia  = a.nr_seq_conta_pos_estab
    and e.nr_sequencia  = f.nr_seq_conta_pos
    and (f.nr_sequencia  = a.nr_seq_conta_pos_contab or coalesce(a.nr_seq_conta_pos_contab, 0) = 0)
    and coalesce(d.ie_tit_fat_ndc,'N')   = 'N'
    and a.vl_faturado   > 0
    and d.nr_titulo = nr_titulo_p
    group by
        f.cd_conta_deb_taxa,
        f.cd_historico
    
union all

    select  f.cd_conta_deb_ndc,
        f.cd_historico_ndc,
        sum(f.vl_custo_operacional - f.vl_administracao) vl_movimento
    from    pls_fatura_proc         a,
        pls_fatura_conta        b,
        pls_fatura_evento       c,
        pls_fatura          d,
        pls_conta_pos_estabelecido  e,
        pls_conta_pos_estab_contab  f,
        titulo_receber          t
    where   d.nr_sequencia  = c.nr_seq_fatura
    and c.nr_sequencia  = b.nr_seq_fatura_evento
    and b.nr_sequencia  = a.nr_seq_fatura_conta
    and e.nr_sequencia  = a.nr_seq_conta_pos_estab
    and e.nr_sequencia  = f.nr_seq_conta_pos
    and (f.nr_sequencia  = a.nr_seq_conta_pos_contab or coalesce(a.nr_seq_conta_pos_contab, 0) = 0)
    and t.nr_titulo = d.nr_titulo
    and coalesce(d.ie_tit_fat_ndc,'N')   = 'N'
    and a.ie_tipo_cobranca <> '3'
    and f.vl_custo_operacional - f.vl_administracao > 0
    and t.nr_titulo = nr_titulo_p
    group by
        f.cd_conta_deb_ndc,
        f.cd_historico_ndc
    
union all

    select  f.cd_conta_deb_ndc,
        f.cd_historico_ndc,
        sum(f.vl_custo_operacional - f.vl_administracao) vl_movimento
    from    pls_fatura_mat          a,
        pls_fatura_conta        b,
        pls_fatura_evento       c,
        pls_fatura          d,
        pls_conta_pos_estabelecido  e,
        pls_conta_pos_estab_contab  f,
        titulo_receber          t
    where   d.nr_sequencia  = c.nr_seq_fatura
    and c.nr_sequencia  = b.nr_seq_fatura_evento
    and b.nr_sequencia  = a.nr_seq_fatura_conta
    and e.nr_sequencia  = a.nr_seq_conta_pos_estab
    and e.nr_sequencia  = f.nr_seq_conta_pos
    and (f.nr_sequencia  = a.nr_seq_conta_pos_contab or coalesce(a.nr_seq_conta_pos_contab, 0) = 0)
    and t.nr_titulo = d.nr_titulo
    and coalesce(d.ie_tit_fat_ndc,'N')   = 'N'
    and a.ie_tipo_cobranca <> '3'
    and f.vl_custo_operacional - f.vl_administracao > 0
    and t.nr_titulo = nr_titulo_p
    group by
        f.cd_conta_deb_ndc,
        f.cd_historico_ndc
    
union all

    select  h.cd_conta_deb,
        h.cd_historico,
        sum(h.vl_taxa) vl_movimento
    from    pls_conta_pos_estabelecido  a,
        pls_fatura          f,
        pls_fatura_proc         p,
        pls_fatura_conta        c,
        pls_fatura_evento       d,
        pls_conta_pos_taxa_contab   h,
        titulo_receber          t
    where   a.nr_sequencia      = p.nr_seq_conta_pos_estab
    and c.nr_sequencia      = p.nr_seq_fatura_conta
    and d.nr_sequencia      = c.nr_seq_fatura_evento
    and f.nr_sequencia      = d.nr_seq_fatura
    and h.nr_sequencia      = p.nr_seq_pos_taxa_contab
    and t.nr_titulo     = f.nr_titulo
    and t.nr_titulo     = nr_titulo_p
    group by h.cd_conta_deb,
        h.cd_historico
    
union all

    select  h.cd_conta_deb,
        h.cd_historico,
        sum(h.vl_taxa) vl_movimento
    from    pls_conta_pos_estabelecido  a,
        pls_fatura          f,
        pls_fatura_mat      p,
        pls_fatura_conta        c,
        pls_fatura_evento       d,
        pls_conta_pos_taxa_contab   h,
        titulo_receber          t
    where   a.nr_sequencia      = p.nr_seq_conta_pos_estab
    and c.nr_sequencia      = p.nr_seq_fatura_conta
    and d.nr_sequencia      = c.nr_seq_fatura_evento
    and f.nr_sequencia      = d.nr_seq_fatura
    and h.nr_sequencia      = p.nr_seq_pos_taxa_contab
    and t.nr_titulo     = f.nr_titulo
    and t.nr_titulo     = nr_titulo_p
    group by h.cd_conta_deb,
        h.cd_historico;

c_faturamento_ndr CURSOR FOR
    SELECT  f.cd_conta_deb_ndc,
        f.cd_historico_ndc,
        sum(f.vl_custo_operacional) - sum(f.vl_administracao) vl_movimento

    from    pls_fatura_proc         a,
        pls_fatura_conta        b,
        pls_fatura_evento       c,
        pls_fatura          d,
        pls_conta_pos_estabelecido  e,
        pls_conta_pos_estab_contab  f
    where   d.nr_sequencia  = c.nr_seq_fatura
    and c.nr_sequencia  = b.nr_seq_fatura_evento
    and b.nr_sequencia  = a.nr_seq_fatura_conta
    and e.nr_sequencia  = a.nr_seq_conta_pos_estab
    and e.nr_sequencia  = f.nr_seq_conta_pos
    and coalesce(d.ie_tit_fat_ndc,'N')   = 'S'
    and d.nr_titulo_ndc = nr_titulo_p
    group by
        f.cd_conta_deb_ndc,
        f.cd_historico_ndc
    
union all

    SELECT  f.cd_conta_deb_ndc,
        f.cd_historico_ndc,
        sum(f.vl_custo_operacional) - sum(f.vl_administracao) vl_movimento

    from    pls_fatura_mat          a,
        pls_fatura_conta        b,
        pls_fatura_evento       c,
        pls_fatura          d,
        pls_conta_pos_estabelecido  e,
        pls_conta_pos_estab_contab  f
    where   d.nr_sequencia  = c.nr_seq_fatura
    and c.nr_sequencia  = b.nr_seq_fatura_evento
    and b.nr_sequencia  = a.nr_seq_fatura_conta
    and e.nr_sequencia  = a.nr_seq_conta_pos_estab
    and e.nr_sequencia  = f.nr_seq_conta_pos
    and d.ie_tit_fat_ndc    = 'S'
    and d.nr_titulo_ndc = nr_titulo_p
    group by
        f.cd_conta_deb_ndc,
        f.cd_historico_ndc;


BEGIN

select  ie_cc_glosa,
    cd_centro_custo_glosa,
    ie_cc_receita_glosa,
    ie_cc_glosa_motivo
into STRICT    ie_cc_glosa_w,
    cd_centro_custo_w,
    ie_cc_receita_glosa_w,
    ie_cc_glosa_motivo_w
from    parametro_contas_receber
where   cd_estabelecimento  = cd_estabelecimento_p;

select  max(coalesce(vl_perdas,0))
into STRICT    vl_perdas_baixa_w
from    titulo_receber_liq
where   nr_titulo = nr_titulo_p
and nr_sequencia = nr_seq_baixa_p;

/* Francisco - 28/05/2010 - OS  220155 */

select  coalesce(max(a.ie_contab_baixas_pro_rata),'N')
into STRICT    ie_contab_baixas_pro_rata_w
from    pls_parametros_cr a
where   a.cd_estabelecimento    = cd_estabelecimento_p;

select  max(coalesce(a.cd_convenio_conta, obter_convenio_tit_rec(a.nr_titulo)))
into STRICT    cd_convenio_w
from    titulo_receber a
where   nr_titulo   = nr_titulo_p;

select  max(cd_cgc),
    max(ie_tipo_convenio)
into STRICT    cd_cgc_w,
    ie_tipo_convenio_w
from    convenio
where   cd_convenio = cd_convenio_w;

select  max(nr_seq_trans_fin),
    max(vl_recebido),
    max(vl_recebido_estrang),
    max(vl_cotacao),
    max(cd_moeda)
into STRICT    nr_seq_trans_financ_w,
    vl_recebido_w,
    vl_recebido_estrang_w,
    vl_cotacao_w,
    cd_moeda_w
from    titulo_receber_liq
where   nr_titulo   = nr_titulo_p
and nr_sequencia    = nr_seq_baixa_p;

select  count(*)
into STRICT    nr_tot_tit_classif_w
from    titulo_receber_classif a
where   a.nr_titulo = nr_titulo_p;

ie_consistir_glosa_w := Obter_Param_Usuario(27, 122, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consistir_glosa_w);
ie_contab_classif_titulo_w := Obter_Param_Usuario(801, 212, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_contab_classif_titulo_w);

SELECT * FROM obter_produto_financeiro(cd_estabelecimento_p, cd_convenio_w, cd_cgc_w, nr_seq_produto_w, ie_tipo_convenio_w, null, nr_seq_grupo_w) INTO STRICT nr_seq_produto_w, nr_seq_grupo_w;

if (coalesce(nr_seq_ret_item_p,0) > 0) and (ie_cc_glosa_w <> 'SC')  then
    vl_amaior_w := 0;

    if (ie_cc_glosa_w <> 'N') then
        select  max(nr_titulo),
            max(nr_sequencia),
            max(nr_documento),
            max(dt_recebimento)
        into STRICT    nr_titulo_w,
            nr_sequencia_w,
            nr_guia_w,
            dt_recebimento_w
        from    titulo_receber_liq
        where   nr_seq_ret_item = nr_seq_ret_item_p;

        select  max(b.vl_guia),
            max(a.vl_glosado),
            max(a.vl_adicional),
            max(a.nr_interno_conta),
            max(c.cd_convenio)
        into STRICT    vl_guia_w,
            vl_glosa_item_w,
            vl_amaior_item_w,
            nr_interno_conta_w,
            cd_convenio_w
        from    convenio_retorno c,
            conta_paciente_guia b,
            convenio_retorno_item a
        where   a.nr_sequencia      = nr_seq_ret_item_p
        and a.nr_interno_conta  = b.nr_interno_conta
        and a.cd_autorizacao    = b.cd_autorizacao
        and a.nr_seq_retorno    = c.nr_sequencia;
        if (vl_glosa_item_w <> 0) or (vl_amaior_item_w <> 0) then
            vl_glosa_acum_w     := vl_glosa_item_w;
            vl_amaior_acum_w    := vl_amaior_item_w;

            select  coalesce(sum(vl_glosa),0),
                coalesce(sum(vl_amaior),0)
            into STRICT    vl_glosa_w,
                vl_amaior_w
            from    convenio_retorno_glosa
            where   nr_seq_ret_item = nr_seq_ret_item_p;

            if (ie_cc_glosa_w = 'IPF') then
                if (coalesce(cd_centro_custo_w::text, '') = '') then
                    CALL wheb_mensagem_pck.exibir_mensagem_abort(185476);
                end if;
                if (vl_glosa_w < vl_glosa_item_w) then
                    CALL wheb_mensagem_pck.exibir_mensagem_abort(185477,'NR_GUIA=' || nr_guia_w);
                end if;
                if (vl_amaior_w < vl_amaior_item_w) then
                    CALL wheb_mensagem_pck.exibir_mensagem_abort(185478,'NR_GUIA=' || nr_guia_w);
                end if;
            end if;


            if (ie_cc_glosa_w = 'IPF') then

                open c01;
                loop
                fetch c01 into
                    cd_centro_custo_w,
                    vl_glosa_w,
                    vl_amaior_w,
                    ie_tipo_atendimento_w,
                    ie_tipo_protocolo_w,
                    cd_pessoa_fisica_glosa_w,
                    vl_total_pago_w;
                EXIT WHEN NOT FOUND; /* apply on c01 */

                    cd_conta_contabil_w := OBTER_CONTA_CONVENIO(cd_estabelecimento_p,
                                            cd_convenio_w, 
                                            ie_tipo_atendimento_w,
                                            'G',
                                            dt_recebimento_w,
                                            ie_tipo_protocolo_w,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            nr_seq_trans_financ_w);

                    if (cd_centro_custo_w IS NOT NULL AND cd_centro_custo_w::text <> '') then

                        select  max(a.cd_estabelecimento)
                        into STRICT    cd_estab_centro_custo_w
                        from    centro_custo a
                        where   a.cd_centro_custo   = cd_centro_custo_w;

                        insert into titulo_rec_liq_cc(
                                nr_sequencia,
                                nr_titulo, 
                                nr_seq_baixa, 
                                dt_atualizacao,
                                nm_usuario, 
                                cd_centro_custo, 
                                vl_baixa, 
                                vl_amaior,
                                cd_conta_contabil,
                                cd_pessoa_fisica,
                                nr_seq_produto,
                                ie_origem_classif,
                                cd_estab_centro_custo,
                                vl_recebido)
                        values (   nextval('titulo_rec_liq_cc_seq'), 
                                nr_titulo_w, 
                                nr_sequencia_w, 
                                clock_timestamp(),
                                nm_usuario_p, 
                                cd_centro_custo_w, 
                                vl_glosa_w, 
                                vl_amaior_w,
                                cd_conta_contabil_w,
                                cd_pessoa_fisica_glosa_w,
                                nr_seq_produto_w,
                                'FP',
                                cd_estab_centro_custo_w,
                                vl_total_pago_w);

                        vl_glosa_acum_w     := vl_glosa_acum_w - vl_glosa_w;
                        vl_amaior_acum_w    := vl_amaior_acum_w - vl_amaior_w;
                    end if;
                end loop;
                close c01;
            elsif (ie_cc_glosa_w = 'IR') and
                ((vl_glosa_w <= vl_glosa_item_w) or (vl_amaior_w <= vl_amaior_item_w)) then
                CALL Ratear_titulo_rec_liq_cc(nr_titulo_w, nr_sequencia_w, nm_usuario_p);
            end if;
        end if;
    end if;

elsif (coalesce(nr_titulo_p,0) > 0) and -- Edgar 17/10/2006, inclui rotina abaixo
    (coalesce(nr_seq_baixa_p,0) > 0) then
    select  a.vl_titulo,
        a.nr_interno_conta,
        a.nr_seq_mensalidade,
        a.dt_emissao,
        a.ie_pls
    into STRICT    vl_titulo_w,
        nr_interno_conta_w,
        nr_seq_mensalidade_w,
        dt_emissao_titulo_w,
        ie_pls_w
    from    titulo_receber  a
    where   a.nr_titulo     = nr_titulo_p;

    select  max(x.nr_sequencia)
    into STRICT    nr_seq_fatura_w
    from    pls_fatura  x
    where   x.nr_titulo = nr_titulo_p;

    if (coalesce(nr_seq_fatura_w::text, '') = '') then
        select  max(x.nr_sequencia)
        into STRICT    nr_seq_fatura_w
        from    pls_fatura  x
        where   x.nr_titulo_ndc = nr_titulo_p;
    end if;

    if (coalesce(nr_interno_conta_w,0)  = 0) then
        select  coalesce(max(b.nr_interno_conta),0)
        into STRICT    nr_interno_conta_w
        from    convenio_retorno_item b,
            titulo_receber_liq a
        where   a.nr_sequencia  = nr_seq_baixa_p
        and a.nr_titulo     = nr_titulo_p
        and a.nr_seq_ret_item   = b.nr_sequencia;
    end if;

    /*OS 1339448 (Visita do Jonas ao hospital) - Mesmo quando tiver conta pac, protocolo, Mensalidade ou faturamento deve gerar a classif da baixa com base na classif do titulo e nao das informacoes provenientes do resumo da conta.*/

    if (coalesce(ie_contab_classif_titulo_w,'N') = 'S') then
        nr_interno_conta_w      := 0;
        nr_seq_mensalidade_w    := 0;
        nr_seq_fatura_w         := 0;
    end if;

    if (coalesce(nr_interno_conta_w, 0) > 0) then

        if (ie_cc_glosa_w <> 'N')  then
            delete  from titulo_rec_liq_cc
            where   nr_titulo   = nr_titulo_p
            and nr_seq_baixa    = nr_seq_baixa_p;

            select  vl_conta,
                cd_convenio_parametro
            into STRICT    vl_conta_w,
                cd_convenio_w
            from    conta_paciente
            where   nr_interno_conta    = nr_interno_conta_w;

            select  vl_glosa,
                vl_rec_maior,
                dt_recebimento,
                nr_seq_ret_item,
                nr_seq_conpaci_ret_hist,
                coalesce(vl_descontos,0),
                coalesce(vl_juros,0),
                coalesce(vl_multa,0),
		coalesce(vl_perdas,0)
            into STRICT    vl_glosa_w,
                vl_rec_maior_w,
                dt_recebimento_w,
                nr_seq_ret_item_w,
                nr_seq_conpaci_ret_hist_w,
                vl_desconto_liq_w,
                vl_juros_w,
                vl_multa_w,
		vl_perdas_w
            from    titulo_receber_liq
            where   nr_titulo       = nr_titulo_p
            and nr_sequencia        = nr_seq_baixa_p;

            vl_amaior_liq_cc_w          := 0;
            vl_amaior_acum_w            := 0;
            vl_glosa_liq_cc_w           := 0;
            vl_glosa_acum_w             := 0;


            select  count(*)
            into STRICT    qt_itens_glosados_w
            from    convenio_retorno_glosa
            where   nr_seq_ret_item = nr_seq_ret_item_w;

            if (coalesce(nr_seq_ret_item_w::text, '') = '') or (qt_itens_glosados_w =0) or (ie_cc_glosa_w = 'SC') then /* Francisco - OS 177768  - Inclui esse novo dominio para sempre ratear pela conta */
                begin
                open c02;
                loop
                fetch c02 into
                    cd_centro_custo_w,
                    vl_item_w,
                    ie_tipo_atendimento_w,
                    cd_centro_custo_receita_w,
                    ie_tipo_protocolo_w;
                EXIT WHEN NOT FOUND; /* apply on c02 */

                    vl_glosa_liq_cc_w       := (vl_item_w * dividir_sem_round(vl_titulo_w, vl_conta_w)) *
                                       (dividir_sem_round(vl_glosa_w, vl_titulo_w));

                    vl_amaior_liq_cc_w      := (vl_item_w * dividir_sem_round(vl_titulo_w, vl_conta_w)) *
                                       (dividir_sem_round(vl_rec_maior_w, vl_titulo_w));

                    vl_recebido_cc_w        := (vl_item_w * dividir_sem_round(vl_titulo_w, vl_conta_w)) *
                                       (dividir_sem_round(vl_recebido_w, vl_titulo_w));

                    vl_desconto_cc_w        := (vl_item_w * dividir_sem_round(vl_titulo_w, vl_conta_w)) * 
                                       (dividir_sem_round(vl_desconto_liq_w, vl_titulo_w));

                    vl_juros_cc_w       := (vl_item_w * dividir_sem_round(vl_titulo_w, vl_conta_w)) * 
                                       (dividir_sem_round(vl_juros_w, vl_titulo_w));

                    vl_multa_cc_w       := (vl_item_w * dividir_sem_round(vl_titulo_w, vl_conta_w)) * 
                                       (dividir_sem_round(vl_multa_w, vl_titulo_w));

		    vl_perdas_cc_w	:= (vl_item_w * dividir_sem_round(vl_titulo_w, vl_conta_w)) * 
                                       (dividir_sem_round(vl_perdas_w, vl_titulo_w));

                    cd_conta_contabil_w := OBTER_CONTA_CONVENIO(cd_estabelecimento_p, 
                                            cd_convenio_w, 
                                            ie_tipo_atendimento_w,
                                            'G',
                                            dt_recebimento_w,
                                            ie_tipo_protocolo_w,
                                            null,
                                            null,
                                            null,
                                            null,
                                            null,
                                            nr_seq_trans_financ_w);
                    if (ie_cc_receita_glosa_w = 'S') and (vl_glosa_liq_cc_w <> 0) then
                        cd_centro_custo_w       := coalesce(cd_centro_custo_receita_w, cd_centro_custo_w);
                    end if;


                    select  max(a.cd_estabelecimento)
                    into STRICT    cd_estab_centro_custo_w
                    from    centro_custo a
                    where   a.cd_centro_custo   = cd_centro_custo_w;

                    select  nextval('titulo_rec_liq_cc_seq')
                    into STRICT    nr_seq_tit_rec_liq_cc_w
;

                    insert  into titulo_rec_liq_cc(nr_sequencia,
                            nr_titulo,
                            nr_seq_baixa,
                            dt_atualizacao,
                            nm_usuario,
                            cd_centro_custo,
                            vl_baixa,
                            vl_amaior,
                            dt_atualizacao_nrec,
                            nm_usuario_nrec,
                            cd_conta_contabil,
                            nr_seq_produto,
                            ie_origem_classif,
                            cd_estab_centro_custo,
                            vl_recebido,
                            vl_desconto,
                            vl_juros,
                            vl_multa,
			    vl_perdas)
                    values (nr_seq_tit_rec_liq_cc_w,
                            nr_titulo_p,
                            nr_seq_baixa_p,
                            clock_timestamp(),
                            nm_usuario_p,
                            cd_centro_custo_w,
                            vl_glosa_liq_cc_w,
                            vl_amaior_liq_cc_w,
                            clock_timestamp(),
                            nm_usuario_p,
                            cd_conta_contabil_w,
                            nr_seq_produto_w,
                            'FP',
                            cd_estab_centro_custo_w,
                            vl_recebido_cc_w,
                            vl_desconto_cc_w,
                            vl_juros_cc_w,
                            vl_multa_cc_w,
			    vl_perdas_cc_w);

                    vl_glosa_acum_w     := vl_glosa_acum_w + vl_glosa_liq_cc_w;
                    vl_amaior_acum_w    := vl_amaior_acum_w + vl_amaior_liq_cc_w;
                end loop;
                close c02;
                exception
                    when others then
                        CALL wheb_mensagem_pck.exibir_mensagem_abort(185490,
                                            'DS_ERRO=' || sqlerrm || ';' ||
                                            'VL_ITEM=' || vl_item_w || ';' ||
                                            'VL_TITULO=' || vl_titulo_w || ';' ||
                                            'VL_CONTA=' || vl_conta_w || ';' ||
                                            'VL_REC_MAIOR=' || vl_rec_maior_w || ';' ||
                                            'VL_TITULOS=' || vl_titulo_w || ';'||
					    'VL_PERDAS=' || vl_perdas_cc_w);

                end;

                /*Retirei a validacao abaixo e substitui por essa OS 938383*/

                select  sum(a.vl_recebido),
                        max(a.nr_sequencia)
                into STRICT    vl_recebido_arredonda_w,
                        nr_seq_baixa_cc_w
                from    titulo_rec_liq_cc a
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p;

                if (vl_recebido_arredonda_w <> vl_recebido_w) then
                
                    /*Se o total rateado na liq_cc para vl_recebido for SUPERIOR ao vl_recebido da baixa titulo_rec_liq deve ajustar*/

                    if (vl_recebido_arredonda_w > vl_recebido_w) and (nr_seq_baixa_cc_w IS NOT NULL AND nr_seq_baixa_cc_w::text <> '') then
                        update  titulo_rec_liq_cc a 
                        set     a.vl_recebido   = vl_recebido - ( coalesce(vl_recebido_arredonda_w,0) - coalesce(vl_recebido_w,0) )
                        where   a.nr_titulo     = nr_titulo_p
                        and     a.nr_sequencia  = nr_seq_baixa_cc_w;

                    elsif (vl_recebido_arredonda_w < vl_recebido_w) and (nr_seq_baixa_cc_w IS NOT NULL AND nr_seq_baixa_cc_w::text <> '') then
                        update  titulo_rec_liq_cc a 
                        set     a.vl_recebido   = vl_recebido + ( coalesce(vl_recebido_w,0) - coalesce(vl_recebido_arredonda_w,0) )
                        where   a.nr_titulo     = nr_titulo_p
                        and     a.nr_sequencia  = nr_seq_baixa_cc_w;

                    end if;

                end if;
                
                /*if    (nvl(vl_tot_recebido_rat_w,0) < nvl(vl_recebido_w,0)) then
                    
                    vl_recebido_cc_w :=  nvl(vl_recebido_cc_w,0) + (nvl(vl_recebido_w,0) - nvl(vl_tot_recebido_rat_w,0));
                    ie_atualiza_vl_receb_cc_w   := 'S';
                
                elsif   (nvl(vl_tot_recebido_rat_w,0) > nvl(vl_recebido_w,0)) then
                
                    vl_recebido_cc_w :=  nvl(vl_recebido_cc_w,0) - (nvl(vl_tot_recebido_rat_w,0) - nvl(vl_recebido_w,0));
                    ie_atualiza_vl_receb_cc_w   := 'S';                 
                
                end if;
                
                if  (nvl(ie_atualiza_vl_receb_cc_w,'N') = 'S') then
                    
                    update  titulo_rec_liq_cc
                    set vl_recebido = vl_recebido_cc_w
                    where   nr_titulo   = nr_titulo_p
                    and nr_sequencia    = nr_seq_tit_rec_liq_cc_w;
                    --commit;
                    
                end if;*/
                
            else

                /* Quando a baixa for originaraia da auditoria tem que so considerar no calculo as glosas do historico */

                if (nr_seq_conpaci_ret_hist_w IS NOT NULL AND nr_seq_conpaci_ret_hist_w::text <> '') then
                    select  coalesce(sum(vl_glosa),0)
                    into STRICT    vl_glosa_w
                    FROM convenio_retorno_glosa a
LEFT OUTER JOIN motivo_glosa b ON (a.cd_motivo_glosa = b.cd_motivo_glosa)
WHERE (coalesce(coalesce(a.ie_acao_glosa,b.ie_acao_glosa),'A') = 'A' or (a.nr_seq_conpaci_ret_hist IS NOT NULL AND a.nr_seq_conpaci_ret_hist::text <> '')) and a.nr_seq_ret_item = nr_seq_ret_item_w and a.nr_seq_conpaci_ret_hist   = nr_seq_conpaci_ret_hist_w;

                    select  coalesce(sum(vl_amaior),0),
                        coalesce(sum((obter_dados_ret_movto_glosa(a.nr_sequencia, 3))::numeric ),0)
                    into STRICT    vl_amaior_w,
                        vl_pago_total_w
                    from    convenio_retorno_glosa a
                    where   nr_seq_ret_item         = nr_seq_ret_item_w
                    and a.nr_seq_conpaci_ret_hist   = nr_seq_conpaci_ret_hist_w;

                else

                    select  vl_glosado,
                        vl_adicional
                    into STRICT    vl_glosa_item_w,
                        vl_amaior_item_w
                    from    convenio_retorno_item
                    where   nr_sequencia    = nr_seq_ret_item_w;

                    select  coalesce(sum(vl_glosa),0)
                    into STRICT    vl_glosa_w
                    FROM convenio_retorno_glosa a
LEFT OUTER JOIN motivo_glosa b ON (a.cd_motivo_glosa = b.cd_motivo_glosa)
WHERE coalesce(coalesce(a.ie_acao_glosa,b.ie_acao_glosa),'A') in ('A', 'P') and a.nr_seq_ret_item = nr_seq_ret_item_w;

                    select  coalesce(sum(vl_amaior),0),
                        coalesce(sum((obter_dados_ret_movto_glosa(nr_sequencia, 3))::numeric ),0)
                    into STRICT    vl_amaior_w,
                        vl_pago_total_w
                    from    convenio_retorno_glosa
                    where   nr_seq_ret_item = nr_seq_ret_item_w;

                    if (coalesce(ie_consistir_glosa_w,'S') = 'S') then
                        if (vl_glosa_w < vl_glosa_item_w) then
                            CALL wheb_mensagem_pck.exibir_mensagem_abort(185491,
                                                'NR_CONTA=' || nr_interno_conta_w || ';' ||
                                                'NR_GUIA=' || nr_guia_w || ';' ||
                                                'VL_GLOSA=' || vl_glosa_w || ';' ||
                                                'VL_GLOSA_ITEM=' || vl_glosa_item_w);
                        end if;
                    end if;


                    if (vl_amaior_w < vl_amaior_item_w) then
                        CALL wheb_mensagem_pck.exibir_mensagem_abort(185492,
                                            'NR_CONTA=' || nr_interno_conta_w || ';' ||
                                            'NR_GUIA=' || nr_guia_w || ';' ||
                                            'VL_AMAIOR=' || vl_amaior_w || ';' ||
                                            'VL_AMAIOR_ITEM=' || vl_amaior_item_w);
                    end if;
                end if;

                open c05;
                loop
                fetch c05 into
                    nr_seq_propaci_w,
                    nr_seq_matpaci_w,
                    cd_setor_atendimento_w,
                    ie_tipo_atendimento_w,
                    ie_tipo_protocolo_w,
                    vl_glosa_itens_w,
                    vl_amaior_itens_w,
                    vl_total_pago_w;
                EXIT WHEN NOT FOUND; /* apply on c05 */

                    if (coalesce(cd_setor_atendimento_w::text, '') = '') then
                        if (nr_seq_propaci_w IS NOT NULL AND nr_seq_propaci_w::text <> '') then
                            select  cd_setor_atendimento
                            into STRICT    cd_setor_atendimento_w
                            from    procedimento_paciente
                            where   nr_sequencia    = nr_seq_propaci_w;
                        elsif (nr_seq_matpaci_w IS NOT NULL AND nr_seq_matpaci_w::text <> '') then
                            select  cd_setor_atendimento
                            into STRICT    cd_setor_atendimento_w
                            from    material_atend_paciente
                            where   nr_sequencia    = nr_seq_matpaci_w;
                        end if;
                    end if;

                    if (cd_setor_atendimento_w IS NOT NULL AND cd_setor_atendimento_w::text <> '') then
                        select  cd_centro_custo,
                            cd_centro_custo_receita
                        into STRICT    cd_centro_custo_w,
                            cd_centro_custo_receita_w
                        from    setor_atendimento
                        where   cd_setor_atendimento    = cd_setor_atendimento_w;
                    end if;

                    cd_conta_contabil_w := OBTER_CONTA_CONVENIO(cd_estabelecimento_p,
                                            cd_convenio_w, 
                                            ie_tipo_atendimento_w,
                                            'G',
                                            dt_recebimento_w,
                                            ie_tipo_protocolo_w,
                                            null,
                                            null,
                                            cd_setor_atendimento_w,
                                            null,
                                            null,
                                            nr_seq_trans_financ_w);
                    if (ie_cc_receita_glosa_w = 'S') and (vl_glosa_itens_w <> 0) then
                        cd_centro_custo_w       := coalesce(cd_centro_custo_receita_w, cd_centro_custo_w);
                    end if;

                    /* Obter se ja houve classificacao */

                    select  max(nr_sequencia)
                    into STRICT    nr_seq_rec_liq_w
                    from    titulo_rec_liq_cc
                    where   nr_titulo       = nr_titulo_p
                    and nr_seq_baixa        = nr_seq_baixa_p
                    and coalesce(cd_conta_contabil,coalesce(cd_conta_contabil_w,0))   = coalesce(cd_conta_contabil_w,0)
                    and coalesce(cd_centro_custo,coalesce(cd_centro_custo_w,0))       = coalesce(cd_centro_custo_w,0);

                    if (coalesce(nr_seq_rec_liq_w::text, '') = '') then

                        select  nextval('titulo_rec_liq_cc_seq')
                        into STRICT    nr_seq_tit_rec_liq_cc_w
;

                        select  coalesce(max(a.ie_acao),'I')
                        into STRICT    ie_acao_w
                        from    titulo_receber_liq a
                        where   a.nr_titulo = nr_titulo_p
                        and a.nr_sequencia  = nr_seq_baixa_p;

                        select  max(a.cd_estabelecimento)
                        into STRICT    cd_estab_centro_custo_w
                        from    centro_custo a
                        where   a.cd_centro_custo   = cd_centro_custo_w;

                        insert  into titulo_rec_liq_cc(nr_sequencia,
                                nr_titulo,
                                nr_seq_baixa,
                                dt_atualizacao,
                                nm_usuario,
                                cd_centro_custo,
                                vl_baixa,
                                vl_amaior,
                                dt_atualizacao_nrec,
                                nm_usuario_nrec,
                                cd_conta_contabil,
                                nr_seq_produto,
                                ie_origem_classif,
                                cd_estab_centro_custo,
                                vl_recebido)
                        values (nr_seq_tit_rec_liq_cc_w,
                                nr_titulo_p,
                                nr_seq_baixa_p,
                                clock_timestamp(),
                                nm_usuario_p,
                                cd_centro_custo_w,
                                coalesce(vl_glosa_itens_w,0) * CASE WHEN ie_acao_w='E' THEN -1  ELSE 1 END ,
                                coalesce(vl_amaior_itens_w, 0),
                                clock_timestamp(),
                                nm_usuario_p,
                                cd_conta_contabil_w,
                                nr_seq_produto_w,
                                'FP',
                                cd_estab_centro_custo_w,
                                vl_total_pago_w);
                    else

                        update  titulo_rec_liq_cc
                        set vl_baixa    = vl_baixa + (coalesce(vl_glosa_itens_w,0) * CASE WHEN ie_acao_w='E' THEN -1  ELSE 1 END ),
                            vl_amaior   = vl_amaior + coalesce(vl_amaior_itens_w, 0),
                            vl_recebido = coalesce(vl_recebido,0) + coalesce(vl_total_pago_w,0)
                        where   nr_titulo   = nr_titulo_p
                        and nr_seq_baixa    = nr_seq_baixa_p
                        and nr_sequencia    = nr_seq_rec_liq_w;
                    end if;

                    vl_glosa_acum_w     := vl_glosa_acum_w + vl_glosa_itens_w;
                    vl_amaior_acum_w    := vl_amaior_acum_w + vl_amaior_itens_w;
                    vl_recebido_acum_w  := coalesce(vl_recebido_acum_w,0) + coalesce(vl_total_pago_w,0);
                end loop;
                close c05;
            end if;

            if (vl_glosa_acum_w <> vl_glosa_w) then
                update  titulo_rec_liq_cc
                set vl_baixa    = vl_baixa + (vl_glosa_w - vl_glosa_acum_w)
                where   nr_sequencia    = nr_seq_tit_rec_liq_cc_w;
            end if;


            if (vl_amaior_acum_w <> vl_rec_maior_w) then
                update  titulo_rec_liq_cc
                set vl_amaior   = vl_amaior + (vl_rec_maior_w - vl_amaior_acum_w)
                where   nr_sequencia    = nr_seq_tit_rec_liq_cc_w;
            end if;

            if (vl_recebido_acum_w <> vl_pago_total_w) then
                update  titulo_rec_liq_cc
                set vl_recebido = coalesce(vl_recebido,0) + (coalesce(vl_pago_total_w,0) - coalesce(vl_recebido_acum_w,0))
                where   nr_sequencia    = nr_seq_tit_rec_liq_cc_w;
            end if;
        end if;



        /*Arredondamento de Desconto para todas as formas de gerar classif quando for titulo de conta paciente*/

        /*Pega o valor de desconto da baixa*/

        select  coalesce(max(a.vl_descontos),0),
                coalesce(max(a.vl_juros),0),
                coalesce(max(a.vl_multa),0),
                max(a.nr_seq_liq_origem),
		coalesce(max(a.vl_perdas),0)
        into STRICT    vl_desconto_calc_w,
                vl_juros_w,
                vl_multa_w,
                nr_seq_liq_origem_w,
		vl_perdas_w
        from    titulo_receber_liq a
        where   nr_titulo       = nr_titulo_p
        and     nr_sequencia    = nr_seq_baixa_p;

        /*Pega  a soma dos descontos da classif da baixa*/

        select  sum(a.vl_desconto),
                max(a.nr_sequencia),
                sum(a.vl_juros),
                sum(a.vl_multa),
		sum(a.vl_perdas)
        into STRICT    vl_tot_desconto_cc_w,
                nr_seq_liq_cc_w,
                vl_tot_juros_w,
                vl_tot_multa_w,
		vl_tot_perdas_w
        from    titulo_rec_liq_cc a
        where   a.nr_titulo     = nr_titulo_p
        and     a.nr_seq_baixa  = nr_seq_baixa_p
        and     coalesce(a.ie_lote_pro_rata::text, '') = '';


        if ( coalesce(vl_desconto_calc_w,0) > coalesce(vl_tot_desconto_cc_w,0) ) then
                update  titulo_rec_liq_cc a
                set     a.vl_desconto   = a.vl_desconto + (coalesce(vl_desconto_calc_w,0) - coalesce(vl_tot_desconto_cc_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_liq_cc_w;
        elsif ( coalesce(vl_desconto_calc_w,0) < coalesce(vl_tot_desconto_cc_w,0) ) then

            /*Buscar a sequencia que possui maior valor de juros para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de juros, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_desconto =  (SELECT max(x.vl_desconto) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_desconto   = a.vl_desconto - (coalesce(vl_tot_desconto_cc_w,0) - coalesce(vl_desconto_calc_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_desconto   <> 0;

            else
                update  titulo_rec_liq_cc a
                set     a.vl_desconto   = a.vl_desconto - (coalesce(vl_tot_desconto_cc_w,0) - coalesce(vl_desconto_calc_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_liq_cc_w;

            end if;
        end if;

        /*Arredondamento de juros*/

        if ( coalesce(vl_tot_juros_w,0) > coalesce(vl_juros_w,0) ) then
            
            /*Buscar a sequencia que possui maior valor de juros para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de juros, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_juros =  (SELECT max(x.vl_juros) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(vl_juros_w,0) < 0) and (nr_seq_liq_origem_w IS NOT NULL AND nr_seq_liq_origem_w::text <> '') then -- Ajuste OS 1244976, se o juros da baixa for negativo, provavel q seja estorno
                ie_estorno_w := 'S';
            else
                ie_estorno_w := 'N';
            end if;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_juros      = coalesce(a.vl_juros,0) - ( coalesce(vl_tot_juros_w,0) - coalesce(vl_juros_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and (a.vl_juros     <> 0 or (coalesce(ie_estorno_w,'N') = 'S') ); /*OS980777 atualizar apenas a baixa que possuir juros informado - OS 1244976 se a baixa for de estorno, atualizar tb*/
            else
                update  titulo_rec_liq_cc a
                set     a.vl_juros      = coalesce(a.vl_juros,0) - ( coalesce(vl_tot_juros_w,0) - coalesce(vl_juros_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and (a.vl_juros     <> 0 or (coalesce(ie_estorno_w,'N') = 'S') ) LIMIT 1; /*OS980777 atualizar apenas a baixa que possuir juros informado*/
            end if;
                
            
        elsif ( coalesce(vl_tot_juros_w,0) < coalesce(vl_juros_w,0) ) then
        
            update  titulo_rec_liq_cc a
            set     a.vl_juros      = coalesce(a.vl_juros,0) + (coalesce(vl_juros_w,0) - coalesce(vl_tot_juros_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;
            --and       a.vl_juros      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/ -- N precisa dessa restricao, pois a soma da classif da baixa e menor, entao vai somar a diferenca.
        end if;

        /*Arredondamento da multa*/

        if ( coalesce(vl_tot_multa_w,0) > coalesce(vl_multa_w,0) ) then
        
            /*Buscar a sequencia que possui maior valor de juros para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de juros, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_multa =  (SELECT max(x.vl_multa) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(vl_juros_w,0) < 0) and (nr_seq_liq_origem_w IS NOT NULL AND nr_seq_liq_origem_w::text <> '') then -- Ajuste OS 1244976, se o juros da baixa for negativo, provavel q seja estorno
                ie_estorno_w := 'S';
            else
                ie_estorno_w := 'N';
            end if;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_multa      = coalesce(a.vl_multa,0) - ( coalesce(vl_tot_multa_w,0) - coalesce(vl_multa_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and (a.vl_multa     <> 0 or (coalesce(ie_estorno_w,'N') = 'S') ); /*OS980777 atualizar apenas a baixa que possuir multa informado*/
            else
                update  titulo_rec_liq_cc a
                set     a.vl_multa      = coalesce(a.vl_multa,0) - ( coalesce(vl_tot_multa_w,0) - coalesce(vl_multa_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and (a.vl_multa     <> 0 or (coalesce(ie_estorno_w,'N') = 'S') ) LIMIT 1; /*OS980777 atualizar apenas a baixa que possuir multa informado*/
            end if;

        elsif ( coalesce(vl_tot_multa_w,0) < coalesce(vl_multa_w,0) ) then
        
            update  titulo_rec_liq_cc a
            set     a.vl_multa      = coalesce(a.vl_multa,0) + (coalesce(vl_multa_w,0) - coalesce(vl_tot_multa_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;
            --and       a.vl_multa      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/ -- N precisa dessa restricao, pois a soma da classif da baixa e menor, entao vai somar a diferenca.
        end if;
	
        /*Arredondamento das perdas*/

        if ( coalesce(vl_tot_perdas_w,0) > coalesce(vl_perdas_w,0) ) then

            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_perdas =  (SELECT max(x.vl_perdas) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(vl_perdas_w,0) < 0) and (nr_seq_liq_origem_w IS NOT NULL AND nr_seq_liq_origem_w::text <> '') then
                ie_estorno_w := 'S';
            else
                ie_estorno_w := 'N';
            end if;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_perdas      = coalesce(a.vl_perdas,0) - ( coalesce(vl_tot_perdas_w,0) - coalesce(vl_perdas_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and (a.vl_perdas     <> 0 or (coalesce(ie_estorno_w,'N') = 'S') );
            
            else
                update  titulo_rec_liq_cc a
                set     a.vl_perdas      = coalesce(a.vl_perdas,0) - ( coalesce(vl_tot_perdas_w,0) - coalesce(vl_perdas_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and (a.vl_perdas     <> 0 or (coalesce(ie_estorno_w,'N') = 'S') ) LIMIT 1;
                
            end if;

        elsif ( coalesce(vl_tot_perdas_w,0) < coalesce(vl_perdas_w,0) ) then
        
            update  titulo_rec_liq_cc a
            set     a.vl_perdas      = coalesce(a.vl_perdas,0) + (coalesce(vl_perdas_w,0) - coalesce(vl_tot_perdas_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;

        end if;
	

    elsif (coalesce(nr_seq_mensalidade_w,0) > 0) then
        select  a.vl_titulo,
            b.dt_recebimento,
            0,--nvl(b.vl_descontos,0),
            a.vl_saldo_titulo,
            coalesce(b.vl_descontos,0),
            coalesce(b.vl_juros,0),
            coalesce(b.vl_multa,0),
            coalesce(b.vl_rec_maior,0)
        into STRICT    vl_titulo_w,
            dt_recebimento_w,
            vl_descontos_w, /* OS 280271 considerar valor dos descontos*/
            vl_saldo_pls_w,
            vl_desconto_liq_w,
            vl_juros_w,
            vl_multa_w,
            vl_rec_maior_w
        from    titulo_receber_liq  b,
            titulo_receber      a
        where   a.nr_titulo     = nr_titulo_p
        and a.nr_titulo     = b.nr_titulo
        and b.nr_sequencia      = nr_seq_baixa_p;

        select  coalesce(sum(vl_recebido),0)
        into STRICT    vl_baixa_pls_w
        from    titulo_receber_liq
        where   nr_titulo   = nr_titulo_p
        and nr_sequencia    = nr_seq_baixa_p;

        if (ie_contab_baixas_pro_rata_w = 'A') then
            CALL pls_gerar_classif_bx_pro_rata(nr_titulo_p, nr_seq_baixa_p, nm_usuario_p);
        end if;

        select  count(*)
        into STRICT    qt_trib_mens_w
        from    pls_mensalidade_trib    a
        where   a.nr_seq_mensalidade    = nr_seq_mensalidade_w
        and a.ie_origem_tributo = 'CD';

        open C04;
        loop
        fetch C04 into
            vl_item_mensalidade_w,
            cd_conta_rec_w,
            cd_conta_deb_w,
            nr_seq_mens_seg_item_w,
            cd_historico_pls_w,
            nr_seq_conta_pls_w,
            cd_conta_rec_antecip_w,
            cd_conta_deb_antecip_w,
            vl_antecipacao_w,
            vl_pro_rata_dia_w,
            cd_historico_antec_w,
            cd_conta_antec_baixa_w,
            dt_antecipacao_w,
            dt_antecipacao_baixa_w,
            ie_tipo_w,
            dt_referencia_lote_w,
            cd_historico_rev_baixa_w,
            cd_conta_contabil_rec_antec_w;
        EXIT WHEN NOT FOUND; /* apply on C04 */
            begin

            if (vl_recebido_w = 0) then
                vl_recebido_w := coalesce(vl_perdas_baixa_w,0);
            end if;
            
            if (qt_trib_mens_w > 0) then
                if (ie_tipo_w = 'CO') then
                    select  sum(coalesce(a.vl_tributo,0))
                    into STRICT    vl_trib_mens_w
                    from    pls_mensalidade_seg_item    b,
                        pls_mensalidade_trib        a
                    where   b.nr_sequencia  = a.nr_seq_item_mens
                    and exists  (SELECT 1
                            from    pls_conta_coparticipacao    d,
                                pls_mensalidade_segurado    c
                            where   c.nr_sequencia  = b.nr_seq_mensalidade_seg
                            and c.nr_sequencia  = d.nr_seq_mensalidade_seg
                            and c.nr_seq_mensalidade = nr_seq_mensalidade_w
                            and ((d.cd_conta_cred   = cd_conta_rec_w) or (coalesce(d.cd_conta_cred::text, '') = ''))
                            and ((d.cd_conta_deb    = cd_conta_deb_w) or (coalesce(d.cd_conta_cred::text, '') = ''))
                            and d.nr_seq_conta      = nr_seq_conta_pls_w)
                    and a.ie_origem_tributo = 'CD';
                else
                    select  sum(coalesce(a.vl_tributo,0))
                    into STRICT    vl_trib_mens_w
                    from    pls_mensalidade_trib    a
                    where   a.nr_seq_item_mens  = nr_seq_mens_seg_item_w
                    and a.ie_origem_tributo = 'CD';
                end if;

                if (vl_trib_mens_w <> 0) then
                    ie_tributacao_pls_w := 'S';
                    vl_item_mensalidade_w   := vl_item_mensalidade_w - vl_trib_mens_w;
                else
                    ie_tributacao_pls_w := 'N';
                end if;

                if (ie_tributacao_pls_w = 'S') then
                    vl_proporcional_w   := (vl_recebido_w + vl_descontos_w);
                else
                    if (vl_saldo_pls_w = vl_recebido_w) then
                        vl_proporcional_w   := ((vl_recebido_w * dividir_sem_round(vl_titulo_w,vl_recebido_w)) + vl_descontos_w);
                    else
                        --vl_proporcional_w := ((vl_recebido_w * dividir_sem_round(vl_recebido_w,vl_titulo_w)) + vl_descontos_w);
                        vl_proporcional_w   := (vl_recebido_w + vl_descontos_w);
                    end if;
                end if;
            else
                vl_proporcional_w   := (vl_recebido_w + vl_descontos_w);
            end if;

            if  ((ie_contab_baixas_pro_rata_w = 'S') or /* Francisco - 31/03/2010 - OS 203923 - Tratar pro-rata e antecipacao */
                (ie_contab_baixas_pro_rata_w = 'A')) and (dt_referencia_lote_w >= to_date('01/01/2010','dd/mm/yyyy')) then
                
                if (PKG_DATE_UTILS.start_of(dt_recebimento_w,'month',0) < PKG_DATE_UTILS.start_of(dt_referencia_lote_w,'month',0)) then /* Se for recebido antes da referencia da mensalidade, e nao tiver valor pro-rata lancar como antecipacao total */
                    if (ie_tipo_w = 'CO') and /* Co-participacao */
                        ((coalesce(vl_pro_rata_dia_w,0) = 0) and (coalesce(vl_antecipacao_w,0) = 0)) then
                        if (coalesce(cd_conta_antec_baixa_w::text, '') = '') then /* Obter a conta de antecipacao quando nao houver - Co-participacao */
                            select  max(a.cd_conta_antec_baixa),
                                max(a.cd_historico_antec_baixa)
                            into STRICT    cd_conta_antec_baixa_w,
                                cd_historico_antec_w
                            from    pls_mensalidade_seg_item a,
                                pls_mensalidade_segurado b
                            where   a.nr_seq_mensalidade_seg = b.nr_sequencia
                            and b.nr_seq_mensalidade = nr_seq_mensalidade_w
                            and (a.cd_conta_antec_baixa IS NOT NULL AND a.cd_conta_antec_baixa::text <> '');

                            if (coalesce(cd_conta_antec_baixa_w::text, '') = '') then /* Se mesmo assim nao achar (so coparticipacao), buscar da parametrizacao */
                                select  max(cd_conta_contab_baixa),
                                    max(cd_historico_baixa),
                                    max(cd_historico_rev_baixa)
                                into STRICT    cd_conta_antec_baixa_w,
                                    cd_historico_antec_w,
                                    cd_historico_rev_baixa_w
                                from    pls_conta_receita_futura
                                where   cd_estabelecimento  = cd_estabelecimento_p
                                and PKG_DATE_UTILS.start_of(dt_recebimento_w,'dd',0) between PKG_DATE_UTILS.start_of(dt_vigencia_inicial,'dd',0) and 
                                        PKG_DATE_UTILS.start_of(coalesce(dt_vigencia_final,dt_recebimento_w),'dd',0);

                            end if;
                        end if;
                    end if;

                    insert  into titulo_rec_liq_cc(nr_sequencia,
                        nr_titulo,
                        nr_seq_baixa,
                        dt_atualizacao,
                        nm_usuario,
                        cd_centro_custo,
                        vl_baixa,
                        vl_amaior,
                        dt_atualizacao_nrec,
                        nm_usuario_nrec,
                        cd_cta_ctb_origem,
                        cd_conta_contabil,
                        vl_recebido,
                        cd_conta_deb_pls,
                        cd_conta_rec_pls,
                        nr_seq_mens_seg_item,
                        cd_historico_pls,
                        nr_seq_conta_pls,
                        nr_seq_produto,
                        vl_antecipacao_mens,
                        cd_conta_antec_pls,
                        cd_historico_antec_pls,
                        vl_pro_rata,
                        cd_historico_rev_antec,
                        cd_conta_deb_antecip,
                        cd_conta_rec_antecip,
                        ie_origem_classif,
                        vl_desconto,
                        vl_juros,
                        vl_multa)
                    SELECT  nextval('titulo_rec_liq_cc_seq'),
                        nr_titulo_p,
                        nr_seq_baixa_p,
                        clock_timestamp(),
                        nm_usuario_p,
                        null,
                        0,
                        coalesce(vl_rec_maior_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),

                        clock_timestamp(),
                        nm_usuario_p,
                        null,
                        null,
                        dividir_sem_round(vl_item_mensalidade_w, CASE WHEN ie_tributacao_pls_w='N' THEN vl_titulo_w  ELSE vl_proporcional_w END ) * vl_proporcional_w,
                        cd_conta_deb_w,
                        cd_conta_antec_baixa_w,
                        nr_seq_mens_seg_item_w,
                        cd_historico_antec_w,
                        nr_seq_conta_pls_w,
                        nr_seq_produto_w,
                        coalesce(vl_antecipacao_w,vl_item_mensalidade_w) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                        cd_conta_antec_baixa_w,
                        cd_historico_antec_w,
                        vl_pro_rata_dia_w * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                        cd_historico_rev_baixa_w,
                        cd_conta_deb_antecip_w,
                        cd_conta_contabil_rec_antec_w,

                        'MO',
                        coalesce(vl_desconto_liq_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                        coalesce(vl_juros_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                        coalesce(vl_multa_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w)

;


                    update  titulo_receber_liq
                    set dt_antecipacao_pls_mens = PKG_DATE_UTILS.ADD_MONTH(PKG_DATE_UTILS.start_of(dt_referencia_lote_w,'month',0),1,0)
                    where   nr_titulo       = nr_titulo_p
                    and nr_sequencia        = nr_seq_baixa_p
                    and coalesce(dt_antecipacao_pls_mens,clock_timestamp()) <> PKG_DATE_UTILS.ADD_MONTH(PKG_DATE_UTILS.start_of(dt_referencia_lote_w,'month',0),1,0);
                elsif (vl_antecipacao_w <> 0)  and (PKG_DATE_UTILS.start_of(dt_recebimento_w,'month',0) <= PKG_DATE_UTILS.start_of(dt_referencia_lote_w,'month',0)) then
                    insert  into titulo_rec_liq_cc /* Inserir classificacao com a antecipacao */
                        (nr_sequencia,
                        nr_titulo,
                        nr_seq_baixa,
                        dt_atualizacao,
                        nm_usuario,
                        cd_centro_custo,
                        vl_baixa,
                        vl_amaior,
                        dt_atualizacao_nrec,
                        nm_usuario_nrec,
                        cd_cta_ctb_origem,
                        cd_conta_contabil,
                        vl_recebido,
                        cd_conta_deb_pls,
                        cd_conta_rec_pls,
                        nr_seq_mens_seg_item,
                        cd_historico_pls,
                        nr_seq_conta_pls,
                        nr_seq_produto,
                        vl_antecipacao_mens,
                        cd_conta_antec_pls,
                        cd_historico_antec_pls,
                        vl_pro_rata,
                        cd_historico_rev_antec,
                        cd_conta_deb_antecip,
                        cd_conta_rec_antecip,
                        ie_origem_classif,
                        vl_desconto,
                        vl_juros,
                        vl_multa)
                    SELECT  nextval('titulo_rec_liq_cc_seq'),
                        nr_titulo_p,
                        nr_seq_baixa_p,
                        clock_timestamp(),
                        nm_usuario_p,
                        null,
                        0,
                        coalesce(vl_rec_maior_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),

                        clock_timestamp(),
                        nm_usuario_p,
                        null,
                        null,
                        dividir_sem_round(CASE WHEN coalesce(vl_antecipacao_w,0)=0 THEN  vl_pro_rata_dia_w  ELSE vl_antecipacao_w END ,
                                CASE WHEN ie_tributacao_pls_w='N' THEN vl_titulo_w  ELSE vl_proporcional_w END ) * vl_proporcional_w,
                        cd_conta_deb_w,
                        cd_conta_antec_baixa_w,
                        nr_seq_mens_seg_item_w,
                        cd_historico_antec_w,
                        nr_seq_conta_pls_w,
                        nr_seq_produto_w,
                        vl_antecipacao_w * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                        cd_conta_antec_baixa_w,
                        cd_historico_antec_w,
                        null,
                        cd_historico_rev_baixa_w,
                        cd_conta_deb_antecip_w,
                        cd_conta_contabil_rec_antec_w,

                        'MO',
                        coalesce(vl_desconto_liq_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                        coalesce(vl_juros_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                        coalesce(vl_multa_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w)

;

                    if (vl_pro_rata_dia_w <> 0) and (vl_antecipacao_w <> 0) then /* Inserir classificacao pro-rata , tratar se e antecipacao total */
                        insert into titulo_rec_liq_cc(nr_sequencia,
                            nr_titulo,
                            nr_seq_baixa,
                            dt_atualizacao,
                            nm_usuario,
                            cd_centro_custo,
                            vl_baixa,
                            vl_amaior,
                            dt_atualizacao_nrec,
                            nm_usuario_nrec,
                            cd_cta_ctb_origem,
                            cd_conta_contabil,
                            vl_recebido,
                            cd_conta_deb_pls,
                            cd_conta_rec_pls,
                            nr_seq_mens_seg_item,
                            cd_historico_pls,
                            nr_seq_conta_pls,
                            nr_seq_produto,
                            cd_conta_antec_pls,
                            cd_historico_antec_pls,
                            vl_pro_rata,
                            cd_historico_rev_antec,
                            cd_conta_deb_antecip,
                            cd_conta_rec_antecip,
                            ie_origem_classif,
                            vl_desconto,
                            vl_juros,
                            vl_multa)
                        SELECT  nextval('titulo_rec_liq_cc_seq'),
                            nr_titulo_p,
                            nr_seq_baixa_p,
                            clock_timestamp(),
                            nm_usuario_p,
                            null,
                            0,
                            coalesce(vl_rec_maior_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),

                            clock_timestamp(),
                            nm_usuario_p,
                            null,
                            null,
                            dividir_sem_round(vl_pro_rata_dia_w, CASE WHEN ie_tributacao_pls_w='N' THEN vl_titulo_w  ELSE vl_proporcional_w END ) * vl_proporcional_w,
                            cd_conta_deb_w,
                            cd_conta_rec_w,
                            nr_seq_mens_seg_item_w,
                            cd_historico_pls_w,
                            nr_seq_conta_pls_w,
                            nr_seq_produto_w,
                            cd_conta_antec_baixa_w,
                            cd_historico_antec_w,
                            vl_pro_rata_dia_w * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                            cd_historico_rev_baixa_w,
                            cd_conta_deb_antecip_w,
                            cd_conta_contabil_rec_antec_w,

                            'MO',
                            coalesce(vl_desconto_liq_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                            coalesce(vl_juros_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w),
                            coalesce(vl_multa_w,0) * dividir_sem_round(vl_proporcional_w,vl_titulo_w)

;
                    end if;
                else /* Se nao tiver valor de antecipacao insere normal */
                    insert  into titulo_rec_liq_cc(nr_sequencia,
                        nr_titulo,
                        nr_seq_baixa,
                        dt_atualizacao,
                        nm_usuario,
                        cd_centro_custo,
                        vl_baixa,
                        vl_amaior,
                        dt_atualizacao_nrec,
                        nm_usuario_nrec,
                        cd_cta_ctb_origem,
                        cd_conta_contabil,
                        vl_recebido,
                        cd_conta_deb_pls,
                        cd_conta_rec_pls,
                        nr_seq_mens_seg_item,
                        cd_historico_pls,
                        nr_seq_conta_pls,
                        nr_seq_produto,
                        cd_conta_antec_pls,
                        cd_historico_antec_pls,
                        vl_pro_rata,
                        cd_historico_rev_antec,
                        cd_conta_deb_antecip,
                        cd_conta_rec_antecip,
                        ie_origem_classif,
                        vl_desconto,
                        vl_juros,
                        vl_multa)
                    SELECT  nextval('titulo_rec_liq_cc_seq'),
                        nr_titulo_p,
                        nr_seq_baixa_p,
                        clock_timestamp(),
                        nm_usuario_p,
                        null,
                        0,
                        coalesce(vl_rec_maior_w,0) * (dividir_sem_round(vl_item_mensalidade_w, CASE WHEN ie_tributacao_pls_w='N' THEN vl_titulo_w  ELSE CASE WHEN vl_proporcional_w=0 THEN vl_titulo_w  ELSE vl_proporcional_w END  END ) * dividir_sem_round(CASE WHEN vl_proporcional_w=0 THEN vl_titulo_w  ELSE vl_proporcional_w END ,vl_titulo_w)),

                        clock_timestamp(),
                        nm_usuario_p,
                        null,
                        null,
                        dividir_sem_round(vl_item_mensalidade_w, CASE WHEN ie_tributacao_pls_w='N' THEN vl_titulo_w  ELSE vl_proporcional_w END ) * vl_proporcional_w,
                        cd_conta_deb_w,
                        cd_conta_rec_w,
                        nr_seq_mens_seg_item_w,
                        cd_historico_pls_w,
                        nr_seq_conta_pls_w,
                        nr_seq_produto_w,
                        cd_conta_antec_baixa_w,
                        cd_historico_antec_w,
                        vl_pro_rata_dia_w * dividir_sem_round(vl_recebido_w,vl_titulo_w),
                        cd_historico_rev_baixa_w,
                        cd_conta_deb_antecip_w,
                        cd_conta_contabil_rec_antec_w,
                        'MO',
                        coalesce(vl_desconto_liq_w,0) * dividir_sem_round(dividir_sem_round(vl_item_mensalidade_w, CASE WHEN ie_tributacao_pls_w='N' THEN vl_titulo_w  ELSE vl_proporcional_w END ) * vl_proporcional_w,vl_titulo_w),/* 980777*/
                        coalesce(vl_juros_w,0) * dividir_sem_round(dividir_sem_round(vl_item_mensalidade_w, CASE WHEN ie_tributacao_pls_w='N' THEN vl_titulo_w  ELSE vl_proporcional_w END ) * vl_proporcional_w,vl_titulo_w),/* 980777*/
                        coalesce(vl_multa_w,0) * dividir_sem_round(dividir_sem_round(vl_item_mensalidade_w, CASE WHEN ie_tributacao_pls_w='N' THEN vl_titulo_w  ELSE vl_proporcional_w END ) * vl_proporcional_w,vl_titulo_w)/* 980777*/
;
                end if;

                if (dt_antecipacao_baixa_w IS NOT NULL AND dt_antecipacao_baixa_w::text <> '') then /* Francisco - OS 203923 - Tratar data de antecipacao para contabilizacao */
                    update  titulo_receber_liq
                    set dt_antecipacao_pls_mens = dt_antecipacao_baixa_w
                    where   nr_titulo       = nr_titulo_p
                    and nr_sequencia        = nr_seq_baixa_p
                    and coalesce(dt_antecipacao_pls_mens,clock_timestamp()) <> dt_antecipacao_baixa_w;
                end if;

                if (dt_referencia_lote_w IS NOT NULL AND dt_referencia_lote_w::text <> '') then
                    update  titulo_receber_liq
                    set dt_referencia_pls_mens  = dt_referencia_lote_w
                    where   nr_titulo       = nr_titulo_p
                    and nr_sequencia        = nr_seq_baixa_p
                    and coalesce(dt_referencia_pls_mens,clock_timestamp()) <> dt_referencia_lote_w;
                end if;
            else /* Se nao tiver valor de antecipacao ou se ja passou a competencia insere somente o valor do item */
                select  vl_glosa,
                    vl_rec_maior
                into STRICT    vl_glosa_w,
                    vl_rec_maior_w
                from    titulo_receber_liq
                where   nr_titulo       = nr_titulo_p
                and nr_sequencia        = nr_seq_baixa_p;


                insert  into titulo_rec_liq_cc(nr_sequencia,
                    nr_titulo,
                    nr_seq_baixa,
                    dt_atualizacao,
                    nm_usuario,
                    cd_centro_custo,
                    vl_baixa,
                    vl_amaior,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    cd_cta_ctb_origem,
                    cd_conta_contabil,
                    vl_recebido,
                    cd_conta_deb_pls,
                    cd_conta_rec_pls,
                    nr_seq_mens_seg_item,
                    cd_historico_pls,
                    nr_seq_conta_pls,
                    nr_seq_produto,
                    cd_historico_rev_antec,
                    cd_conta_deb_antecip,
                    cd_conta_rec_antecip,
                    ie_origem_classif,
                    vl_desconto,
                    vl_juros,
                    vl_multa)
                SELECT  nextval('titulo_rec_liq_cc_seq'),
                    nr_titulo_p,
                    nr_seq_baixa_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    null,
                    dividir_sem_round(vl_item_mensalidade_w, vl_titulo_w) * (vl_glosa_w),
                    dividir_sem_round(vl_item_mensalidade_w, vl_titulo_w) * (vl_rec_maior_w),
                    clock_timestamp(),
                    nm_usuario_p,
                    null,
                    null,
                    dividir_sem_round(vl_item_mensalidade_w, vl_titulo_w) * (vl_recebido_w+vl_descontos_w),
                    cd_conta_deb_w,
                    cd_conta_rec_w,
                    nr_seq_mens_seg_item_w,
                    cd_historico_pls_w,
                    nr_seq_conta_pls_w,
                    nr_seq_produto_w,
                    cd_historico_rev_baixa_w,
                    cd_conta_deb_antecip_w,
                    cd_conta_contabil_rec_antec_w,
                    'MO',
                    (dividir_sem_round(vl_item_mensalidade_w, vl_titulo_w) * (vl_desconto_liq_w)),
                    (dividir_sem_round(vl_item_mensalidade_w, vl_titulo_w) * (vl_juros_w)),
                    (dividir_sem_round(vl_item_mensalidade_w, vl_titulo_w) * (vl_multa_w))

;
            end if;
            end;
        end loop;
        close C04;

        select  coalesce(sum(vl_recebido),0),
            coalesce(sum(vl_antecipacao_mens),0),
            coalesce(sum(vl_pro_rata),0),
            coalesce(sum(vl_desconto),0),
            max(nr_sequencia),
            coalesce(sum(vl_juros),0),
            coalesce(sum(vl_multa),0),
            coalesce(sum(vl_amaior),0),
            coalesce(sum(vl_baixa),0)
        into STRICT    vl_tot_recebido_cc_w,
            vl_tot_antecipacao_cc_w,
            vl_tot_pro_rata_cc_w,
            vl_tot_desconto_cc_w,
            nr_seq_liq_cc_w,
            vl_tot_juros_w,
            vl_tot_multa_w,
            vl_rec_maior_calc_w,
            vl_glosa_liq_cc_w
        from    titulo_rec_liq_cc
        where   nr_titulo       = nr_titulo_p
        and nr_seq_baixa        = nr_seq_baixa_p;

     /*Inicio Arredondamento vl a maior*/

        if (coalesce(vl_glosa_liq_cc_w,0) > coalesce(vl_glosa_w,0)) then 
                    
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_baixa =  (SELECT max(x.vl_baixa) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                
                update  titulo_rec_liq_cc a
                set     a.vl_baixa  = a.vl_baixa - (coalesce(vl_glosa_liq_cc_w,0) - coalesce(vl_glosa_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_baixa  <> 0;

            else
            
                update  titulo_rec_liq_cc a
                set     a.vl_baixa  = a.vl_baixa - (coalesce(vl_glosa_liq_cc_w,0) - coalesce(vl_glosa_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_liq_cc_w;

            end if;

        elsif (coalesce(vl_glosa_liq_cc_w,0) < coalesce(vl_glosa_w,0)) then /*Se a soma do rec a maior da classif da baixa for menor q o rec a maior da baixa, entao ajustar add a diferenca*/
        
            update  titulo_rec_liq_cc a
            set     a.vl_baixa  = a.vl_baixa + ( coalesce(vl_glosa_w,0) - coalesce(vl_glosa_liq_cc_w,0) )
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p
            and     a.nr_sequencia  = nr_seq_liq_cc_w;

        end if;

        /*Inicio Arredondamento vl a maior*/

        if (coalesce(vl_rec_maior_calc_w,0) > coalesce(vl_rec_maior_w,0)) then /*Se a soma do rec a maior da classif da baixa for maior q o rec a maior da baixa, entao ajustar diminuindo a diferenca */
        
            /*Buscar a sequencia que possui maior valor de rec a maior para arredondamento*/

            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_amaior =  (SELECT max(x.vl_amaior) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                
                update  titulo_rec_liq_cc a
                set     a.vl_amaior     = a.vl_amaior - (coalesce(vl_rec_maior_calc_w,0) - coalesce(vl_rec_maior_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_amaior <> 0;

            else
            
                update  titulo_rec_liq_cc a
                set     a.vl_amaior     = a.vl_amaior - (coalesce(vl_rec_maior_calc_w,0) - coalesce(vl_rec_maior_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_liq_cc_w;

            end if;

        elsif (coalesce(vl_rec_maior_calc_w,0) < coalesce(vl_rec_maior_w,0)) then /*Se a soma do rec a maior da classif da baixa for menor q o rec a maior da baixa, entao ajustar add a diferenca*/
        
            update  titulo_rec_liq_cc a
            set     a.vl_amaior = a.vl_amaior + ( coalesce(vl_rec_maior_w,0) - coalesce(vl_rec_maior_calc_w,0) )
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p
            and     a.nr_sequencia  = nr_seq_liq_cc_w;

        end if;
        /*Fim arredondamento vl a maior*/

        select  coalesce(max(a.vl_descontos),0)
        into STRICT    vl_desconto_calc_w
        from    titulo_receber_liq a
        where   nr_titulo       = nr_titulo_p
        and     nr_sequencia    = nr_seq_baixa_p;

        if ( coalesce(vl_desconto_calc_w,0) > coalesce(vl_tot_desconto_cc_w,0) ) then
                update  titulo_rec_liq_cc a
                set     a.vl_desconto   = a.vl_desconto + (coalesce(vl_desconto_calc_w,0) - coalesce(vl_tot_desconto_cc_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_liq_cc_w;
        elsif ( coalesce(vl_desconto_calc_w,0) < coalesce(vl_tot_desconto_cc_w,0) ) then

            /*Buscar a sequencia que possui maior valor de juros para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de juros, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_desconto =  (SELECT max(x.vl_desconto) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_desconto   = a.vl_desconto - (coalesce(vl_tot_desconto_cc_w,0) - coalesce(vl_desconto_calc_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_desconto   <> 0;

            else
                update  titulo_rec_liq_cc a
                set     a.vl_desconto   = a.vl_desconto - (coalesce(vl_tot_desconto_cc_w,0) - coalesce(vl_desconto_calc_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_liq_cc_w;

            end if;
        end if;


        /*Arredondamento dos juros*/

        if ( coalesce(vl_tot_juros_w,0) > coalesce(vl_juros_w,0) ) then
            
            /*Buscar a sequencia que possui maior valor de juros para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de juros, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_juros =  (SELECT max(x.vl_juros) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_juros      = coalesce(a.vl_juros,0) - ( coalesce(vl_tot_juros_w,0) - coalesce(vl_juros_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_juros      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/
            else
                update  titulo_rec_liq_cc a
                set     a.vl_juros      = coalesce(a.vl_juros,0) - ( coalesce(vl_tot_juros_w,0) - coalesce(vl_juros_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and     a.vl_juros      <> 0 LIMIT 1; /*OS980777 atualizar apenas a baixa que possuir juros informado*/
            end if;
                
            
        elsif ( coalesce(vl_tot_juros_w,0) < coalesce(vl_juros_w,0) ) then
        
            update  titulo_rec_liq_cc a
            set     a.vl_juros      = coalesce(a.vl_juros,0) + (coalesce(vl_juros_w,0) - coalesce(vl_tot_juros_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p
            and     coalesce(a.ie_lote_pro_rata::text, '') = ''  LIMIT 1;
            --and       a.vl_juros      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/ -- N precisa dessa restricao, pois a soma da classif da baixa e menor, entao vai somar a diferenca.
        end if;

        /*Arredondamento da multa*/

        if ( coalesce(vl_tot_multa_w,0) > coalesce(vl_multa_w,0) ) then
        
            /*Buscar a sequencia que possui maior valor de juros para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de juros, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_multa =  (SELECT max(x.vl_multa) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_multa      = coalesce(a.vl_multa,0) - ( coalesce(vl_tot_multa_w,0) - coalesce(vl_multa_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_multa      <> 0; /*OS980777 atualizar apenas a baixa que possuir multa informado*/
            else
                update  titulo_rec_liq_cc a
                set     a.vl_multa      = coalesce(a.vl_multa,0) - ( coalesce(vl_tot_multa_w,0) - coalesce(vl_multa_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and     a.vl_multa      <> 0 LIMIT 1; /*OS980777 atualizar apenas a baixa que possuir multa informado*/
            end if;

        elsif ( coalesce(vl_tot_multa_w,0) < coalesce(vl_multa_w,0) ) then
            update  titulo_rec_liq_cc a
            set     a.vl_multa      = coalesce(a.vl_multa,0) + (coalesce(vl_multa_w,0) - coalesce(vl_tot_multa_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p
            and     coalesce(a.ie_lote_pro_rata::text, '') = ''  LIMIT 1;
            --and       a.vl_multa      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/-- N precisa dessa restricao, pois a soma da classif da baixa e menor, entao vai somar a diferenca.
        end if;

        if  (vl_tot_recebido_cc_w > (coalesce(vl_recebido_w,0) + coalesce(vl_descontos_w,0))) then
            
            /*Buscar a sequencia que possui maior valor recebido para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor recebido, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_recebido =  (SELECT max(x.vl_recebido) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p
            and     a.vl_recebido <> 0;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a   
                set     a.vl_recebido       = coalesce(a.vl_recebido,0) - ( coalesce(vl_tot_recebido_cc_w,0) - coalesce(coalesce(vl_recebido_w,0) + coalesce(vl_descontos_w,0),0) )
                where   a.nr_titulo         = nr_titulo_p
                and     a.nr_seq_baixa      = nr_seq_baixa_p
                and     coalesce(a.ie_lote_pro_rata::text, '') = ''
                and     a.nr_sequencia      = nr_seq_cc_w;

            else
                update  titulo_rec_liq_cc a

                set     a.vl_recebido       = coalesce(a.vl_recebido,0) - ( coalesce(vl_tot_recebido_cc_w,0) - coalesce(coalesce(vl_recebido_w,0) + coalesce(vl_descontos_w,0),0) )
                where   a.nr_titulo         = nr_titulo_p
                and     a.nr_seq_baixa      = nr_seq_baixa_p
                and     coalesce(a.ie_lote_pro_rata::text, '') = ''  LIMIT 1;

            end if;

            update  titulo_rec_liq_cc a
            set a.vl_antecipacao_mens   = CASE WHEN a.vl_antecipacao_mens = NULL THEN                                 null  ELSE a.vl_antecipacao_mens END ,
                a.vl_pro_rata   = CASE WHEN a.vl_pro_rata = NULL THEN                             null  ELSE a.vl_recebido END 
            where   a.nr_titulo = nr_titulo_p
            and a.nr_seq_baixa  = nr_seq_baixa_p
            and coalesce(a.ie_lote_pro_rata::text, '') = ''  LIMIT 1;

        elsif (vl_tot_recebido_cc_w < (coalesce(vl_recebido_w,0) + coalesce(vl_descontos_w,0))) then
            
            update  titulo_rec_liq_cc a
            set     a.vl_recebido   = coalesce(a.vl_recebido,0) +  ( coalesce(coalesce(vl_recebido_w,0) + coalesce(vl_descontos_w,0),0) - coalesce(vl_tot_recebido_cc_w,0) )
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;

            update  titulo_rec_liq_cc a
            set a.vl_antecipacao_mens   = CASE WHEN a.vl_antecipacao_mens = NULL THEN                                 null  ELSE a.vl_antecipacao_mens END ,
                a.vl_pro_rata   = CASE WHEN a.vl_pro_rata = NULL THEN                             null  ELSE a.vl_recebido END 
            where   a.nr_titulo = nr_titulo_p
            and a.nr_seq_baixa  = nr_seq_baixa_p
            and coalesce(a.ie_lote_pro_rata::text, '') = ''  LIMIT 1;

        end if;

    elsif (coalesce(nr_seq_fatura_w,0) <> 0) then
        select  a.vl_titulo,
            b.dt_recebimento,

            coalesce(b.vl_descontos,0),
            a.vl_saldo_titulo,
            b.ie_acao,
            coalesce(b.vl_glosa,0),
            coalesce(b.vl_descontos,0),
            coalesce(b.vl_juros,0),
            coalesce(b.vl_multa,0)
        into STRICT    vl_titulo_w,
            dt_recebimento_w,
            vl_descontos_w, /* OS 280271 considerar valor dos descontos*/
            vl_saldo_pls_w,
            ie_acao_w,
            vl_glosa_w,
            vl_desconto_liq_w,
            vl_juros_w,
            vl_multa_w
        from    titulo_receber_liq  b,
            titulo_receber      a
        where   a.nr_titulo     = nr_titulo_p
        and a.nr_titulo     = b.nr_titulo
        and b.nr_sequencia      = nr_seq_baixa_p;


        vl_proporcional_w   := (vl_recebido_w + vl_descontos_w /*+ vl_perdas_baixa_w*/); --OS 1623874, tirei do vl_proporcional, pq tava gerando perdas do recebimento no vl_recebido da classif.. e deve gerar no vl_perdas da classif.
        if  ((vl_proporcional_w != 0) or (vl_perdas_baixa_w != 0)) then
            open c_faturamento;
            loop
            fetch c_faturamento into
                cd_conta_contab_fatur_w,
                cd_historico_fatur_w,
                vl_movimento_fatur_w;
            EXIT WHEN NOT FOUND; /* apply on c_faturamento */
                begin

                --OS 1623874 Criei esse especifico para perdas, que usa o vl_perdas_baixa_w no calculo e insere apenas no vl_perdas. N utilizei o vl_movimento_fatur para n impactar nos outros valores que ja geram e estao corretos.
                -- Coloquei esse if abaixo pois pode entrar aqui se o vl_proporcional_w for difernete de 0, ai nem precisa calcular o perdas,
                if (vl_perdas_baixa_w <> 0) then
                    vl_movimento_fatur_perda_w := coalesce(vl_movimento_fatur_w,0) * dividir_sem_round(coalesce(vl_perdas_baixa_w,0),vl_titulo_w);
                end if;

                vl_movimento_fatur_orig_w := vl_movimento_fatur_w;

                vl_movimento_fatur_w    := vl_movimento_fatur_w * dividir_sem_round(vl_recebido_w,vl_titulo_w);

                
                

                insert into titulo_rec_liq_cc(nr_sequencia,
                    nr_titulo,
                    nr_seq_baixa,
                    dt_atualizacao,
                    nm_usuario,
                    cd_centro_custo,
                    vl_baixa,
                    vl_recebido,
                    vl_amaior,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    cd_conta_contabil,
                    ie_origem_classif,
                    vl_desconto,
                    vl_juros,
                    vl_multa,
                    vl_perdas)
                values  (nextval('titulo_rec_liq_cc_seq'),
                    nr_titulo_p,
                    nr_seq_baixa_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    null,
                    0,
                    vl_movimento_fatur_w * CASE WHEN ie_acao_w='E' THEN -1  ELSE 1 END ,
                    0,
                    clock_timestamp(),
                    nm_usuario_p,
                    cd_conta_contab_fatur_w,

                    'FO',
                    (dividir_sem_round(vl_movimento_fatur_orig_w, vl_titulo_w) * (vl_desconto_liq_w)),
                    (dividir_sem_round(vl_movimento_fatur_orig_w, vl_titulo_w) * (vl_juros_w)),
                    (dividir_sem_round(vl_movimento_fatur_orig_w, vl_titulo_w) * (vl_multa_w)),
                    CASE WHEN coalesce(vl_perdas_baixa_w,0)=0 THEN  0  ELSE (dividir_sem_round(vl_movimento_fatur_perda_w, vl_titulo_w) * (vl_perdas_baixa_w)) END  );

                end;
            end loop;
            close c_faturamento;

            open c_faturamento_ndr;
            loop
            fetch c_faturamento_ndr into
                cd_conta_contab_fatur_w,
                cd_historico_fatur_w,
                vl_movimento_fatur_w;
            EXIT WHEN NOT FOUND; /* apply on c_faturamento_ndr */
                begin


                --OS 1623874 Criei esse especifico para perdas, que usa o vl_perdas_baixa_w no calculo e insere apenas no vl_perdas. N utilizei o vl_movimento_fatur para n impactar nos outros valores que ja geram e estao corretos.
                -- Coloquei esse if abaixo pois pode entrar aqui se o vl_proporcional_w for difernete de 0, ai nem precisa calcular o perdas,
                if (vl_perdas_baixa_w <> 0) then
                    vl_movimento_fatur_perda_w := coalesce(vl_movimento_fatur_w,0) * dividir_sem_round(coalesce(vl_perdas_baixa_w,0),vl_titulo_w);
                end if;
                vl_movimento_fatur_orig_w := vl_movimento_fatur_w;

                vl_movimento_fatur_w    := vl_movimento_fatur_w * dividir_sem_round(vl_proporcional_w,vl_titulo_w);


                insert into titulo_rec_liq_cc(nr_sequencia,
                    nr_titulo,
                    nr_seq_baixa,
                    dt_atualizacao,
                    nm_usuario,
                    cd_centro_custo,
                    vl_baixa,
                    vl_recebido,
                    vl_amaior,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    cd_conta_contabil,
                    ie_origem_classif,
                    vl_desconto,
                    vl_juros,
                    vl_multa,
                    vl_perdas)
                values  (nextval('titulo_rec_liq_cc_seq'),
                    nr_titulo_p,
                    nr_seq_baixa_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    null,
                    0,
                    vl_movimento_fatur_w * CASE WHEN ie_acao_w='E' THEN -1  ELSE 1 END ,
                    0,
                    clock_timestamp(),
                    nm_usuario_p,
                    cd_conta_contab_fatur_w,

                    'FO',
                    (dividir_sem_round(vl_movimento_fatur_orig_w, vl_titulo_w) * (vl_desconto_liq_w)),
                    (dividir_sem_round(vl_movimento_fatur_orig_w, vl_titulo_w) * (vl_juros_w)),
                    (dividir_sem_round(vl_movimento_fatur_orig_w, vl_titulo_w) * (vl_multa_w)),
                    CASE WHEN coalesce(vl_perdas_baixa_w,0)=0 THEN  0  ELSE (dividir_sem_round(vl_movimento_fatur_perda_w, vl_titulo_w) * (vl_perdas_baixa_w)) END  );

                end;
            end loop;
            close c_faturamento_ndr;
        end if;


        vl_proporcional_w   := vl_glosa_w;



        select  vl_rec_maior
        into STRICT    vl_rec_maior_w
        from    titulo_receber_liq
        where   nr_titulo       = nr_titulo_p
        and nr_sequencia        = nr_seq_baixa_p;

        if (vl_proporcional_w != 0) or (vl_rec_maior_w != 0)  then
            open c_faturamento;
            loop
            fetch c_faturamento into
                cd_conta_contab_fatur_w,
                cd_historico_fatur_w,
                vl_movimento_fatur_w;
            EXIT WHEN NOT FOUND; /* apply on c_faturamento */
                begin

                --OS 1623874 Criei esse especifico para perdas, que usa o vl_perdas_baixa_w no calculo e insere apenas no vl_perdas. N utilizei o vl_movimento_fatur para n impactar nos outros valores que ja geram e estao corretos.
                -- Coloquei esse if abaixo pois pode entrar aqui se o vl_proporcional_w for difernete de 0, ai nem precisa calcular o perdas,
                if (vl_perdas_baixa_w <> 0) then
                    vl_movimento_fatur_perda_w := coalesce(vl_movimento_fatur_w,0) * dividir_sem_round(coalesce(vl_perdas_baixa_w,0),vl_titulo_w);
                end if;
                vl_movimento_fatur_orig_w := vl_movimento_fatur_w;
                vl_movimento_fatur_w    := vl_movimento_fatur_w * dividir_sem_round(vl_proporcional_w,vl_titulo_w);


                insert into titulo_rec_liq_cc(nr_sequencia,
                    nr_titulo,
                    nr_seq_baixa,
                    dt_atualizacao,
                    nm_usuario,
                    cd_centro_custo,
                    vl_baixa,
                    vl_recebido,
                    vl_amaior,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    cd_conta_contabil,
                    ie_origem_classif,
                    vl_desconto,
                    vl_juros,
                    vl_multa,
                    vl_perdas)
                values  (nextval('titulo_rec_liq_cc_seq'),
                    nr_titulo_p,
                    nr_seq_baixa_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    null,
                    vl_movimento_fatur_w * CASE WHEN ie_acao_w='E' THEN -1  ELSE 1 END ,
                    0,
                    (dividir_sem_round(vl_movimento_fatur_orig_w, vl_titulo_w) * (vl_rec_maior_w)),


                    clock_timestamp(),
                    nm_usuario_p,
                    cd_conta_contab_fatur_w,

                    'FO',
                    (dividir_sem_round(vl_movimento_fatur_w, vl_titulo_w) * (vl_desconto_liq_w)),
                    (dividir_sem_round(vl_movimento_fatur_w, vl_titulo_w) * (vl_juros_w)),
                    (dividir_sem_round(vl_movimento_fatur_w, vl_titulo_w) * (vl_multa_w)),
                    CASE WHEN coalesce(vl_perdas_baixa_w,0)=0 THEN  0  ELSE (dividir_sem_round(vl_movimento_fatur_perda_w, vl_titulo_w) * (vl_perdas_baixa_w)) END  );

                end;

            end loop;
            close c_faturamento;

            begin
            select  coalesce(sum(a.vl_baixa),0),
                    max(a.nr_sequencia),
                    coalesce(sum(a.vl_amaior),0)
            into STRICT    vl_baixa_glosa_w,
                    nr_seq_liq_cc_w,
                    vl_rec_maior_calc_w
            from    titulo_rec_liq_cc a
            where   nr_titulo       = nr_titulo_p
            and     nr_seq_baixa    = nr_seq_baixa_p;

            if (vl_baixa_glosa_w <> vl_proporcional_w and vl_baixa_glosa_w > 0) then
	
                if (vl_baixa_glosa_w < vl_proporcional_w) then
                    update  titulo_rec_liq_cc
                    set     vl_baixa        = coalesce(vl_baixa,0) + (vl_proporcional_w - vl_baixa_glosa_w)
                    where   nr_titulo       = nr_titulo_p
                    and     nr_seq_baixa    = nr_seq_baixa_p
                    and     nr_sequencia    = nr_seq_liq_cc_w;

                elsif (vl_baixa_glosa_w > vl_proporcional_w) then
                    update  titulo_rec_liq_cc
                    set     vl_baixa        = coalesce(vl_baixa,0) - (vl_baixa_glosa_w - vl_proporcional_w)
                    where   nr_titulo       = nr_titulo_p
                    and     nr_seq_baixa    = nr_seq_baixa_p
                    and     nr_sequencia    = nr_seq_liq_cc_w;

                end if;

            end if;

	if (abs(vl_baixa_glosa_w) <> vl_proporcional_w and vl_baixa_glosa_w < 0) then
	
                if (abs(vl_baixa_glosa_w) < vl_proporcional_w) then
                    update  titulo_rec_liq_cc
                    set     vl_baixa        = coalesce(vl_baixa,0) - (vl_proporcional_w - abs(vl_baixa_glosa_w))
                    where   nr_titulo       = nr_titulo_p
                    and     nr_seq_baixa    = nr_seq_baixa_p
                    and     nr_sequencia    = nr_seq_liq_cc_w;

                elsif (abs(vl_baixa_glosa_w) > vl_proporcional_w) then
                    update  titulo_rec_liq_cc
                    set     vl_baixa        = coalesce(vl_baixa,0) + (abs(vl_baixa_glosa_w) - vl_proporcional_w)
                    where   nr_titulo       = nr_titulo_p
                    and     nr_seq_baixa    = nr_seq_baixa_p
                    and     nr_sequencia    = nr_seq_liq_cc_w;

                end if;

            end if;

            /*Arredondamento vl a maior*/

            if (vl_rec_maior_calc_w <> vl_rec_maior_w) then
            
                /*busca a sequencia que possui o maior valor de recebimento a maior para que o ajuste seja feito nela*/

                select  coalesce(max(a.nr_sequencia),nr_seq_liq_cc_w)
                into STRICT    nr_seq_liq_cc_w 
                from    titulo_rec_liq_cc a
                where   a.vl_amaior =  (SELECT max(x.vl_amaior) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
                and     a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p;

                if (vl_rec_maior_calc_w > vl_rec_maior_w) then
                    
                    update  titulo_rec_liq_cc
                    set     vl_amaior       = vl_amaior - (coalesce(vl_rec_maior_calc_w,0) - coalesce(vl_rec_maior_w,0))
                    where   nr_titulo       = nr_titulo_p
                    and     nr_seq_baixa    = nr_seq_baixa_p
                    and     nr_sequencia    = nr_seq_liq_cc_w;

                elsif (vl_rec_maior_calc_w < vl_rec_maior_w) then
                
                    update  titulo_rec_liq_cc
                    set     vl_amaior       = vl_amaior + ( coalesce(vl_rec_maior_w,0) - coalesce(vl_rec_maior_calc_w,0) )
                    where   nr_titulo       = nr_titulo_p
                    and     nr_seq_baixa    = nr_seq_baixa_p
                    and     nr_sequencia    = nr_seq_liq_cc_w;

                end if;

            end if;

            exception when others then
                null;
            end;
            
            open c_faturamento_ndr;
            loop
            fetch c_faturamento_ndr into
                cd_conta_contab_fatur_w,
                cd_historico_fatur_w,
                vl_movimento_fatur_w;
            EXIT WHEN NOT FOUND; /* apply on c_faturamento_ndr */
                begin


                --OS 1623874 Criei esse especifico para perdas, que usa o vl_perdas_baixa_w no calculo e insere apenas no vl_perdas. N utilizei o vl_movimento_fatur para n impactar nos outros valores que ja geram e estao corretos.
                -- Coloquei esse if abaixo pois pode entrar aqui se o vl_proporcional_w for difernete de 0, ai nem precisa calcular o perdas,
                if (vl_perdas_baixa_w <> 0) then
                    vl_movimento_fatur_perda_w := coalesce(vl_movimento_fatur_w,0) * dividir_sem_round(coalesce(vl_perdas_baixa_w,0),vl_titulo_w);
                end if;


                vl_movimento_fatur_w    := vl_movimento_fatur_w * dividir_sem_round(vl_proporcional_w,vl_titulo_w);


                insert into titulo_rec_liq_cc(nr_sequencia,
                    nr_titulo,
                    nr_seq_baixa,
                    dt_atualizacao,
                    nm_usuario,
                    cd_centro_custo,
                    vl_baixa,
                    vl_recebido,
                    vl_amaior,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    cd_conta_contabil,
                    ie_origem_classif,
                    vl_desconto,
                    vl_juros,
                    vl_multa,
                    vl_perdas)
                values  (nextval('titulo_rec_liq_cc_seq'),
                    nr_titulo_p,
                    nr_seq_baixa_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    null,
                    vl_movimento_fatur_w * CASE WHEN ie_acao_w='E' THEN -1  ELSE 1 END ,
                    0,
                    vl_rec_maior_w,
                    clock_timestamp(),
                    nm_usuario_p,
                    cd_conta_contab_fatur_w,

                    'FO',
                    (dividir_sem_round(vl_movimento_fatur_w, vl_titulo_w) * (vl_desconto_liq_w)),
                    (dividir_sem_round(vl_movimento_fatur_w, vl_titulo_w) * (vl_juros_w)),
                    (dividir_sem_round(vl_movimento_fatur_w, vl_titulo_w) * (vl_multa_w)),
                    CASE WHEN coalesce(vl_perdas_baixa_w,0)=0 THEN  0  ELSE (dividir_sem_round(vl_movimento_fatur_perda_w, vl_titulo_w) * (vl_perdas_baixa_w)) END  );

                end;
            end loop;
            close c_faturamento_ndr;
        end if;

        select  coalesce(sum(vl_recebido),0),
                coalesce(sum(vl_multa),0),
            coalesce(sum(vl_desconto),0)
        into STRICT    vl_tot_recebido_cc_w,
            vl_multa_cc_w,
            vl_desconto_cc_w
        from    titulo_rec_liq_cc
        where   nr_titulo       = nr_titulo_p
        and nr_seq_baixa        = nr_seq_baixa_p
        and ie_origem_classif   = 'FO';
        
        /*Arredondamento desconto*/

        if (vl_desconto_cc_w > vl_desconto_liq_w) then
            
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_desconto  =  (SELECT max(x.vl_desconto) from titulo_rec_liq_cc x where x.vl_desconto = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p
            and     a.ie_origem_classif = 'FO';

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set a.vl_desconto       = coalesce(a.vl_desconto,0) - ( coalesce(vl_desconto_cc_w,0) - coalesce(vl_desconto_liq_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_desconto       <> 0;

            else
                update  titulo_rec_liq_cc a
                set     a.vl_desconto       = coalesce(a.vl_desconto,0) - ( coalesce(vl_desconto_cc_w,0) - coalesce(vl_desconto_liq_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and     a.vl_desconto       <> 0 
                and     a.ie_origem_classif = 'FO' LIMIT 1;
            end if;

        elsif ( coalesce(vl_desconto_cc_w,0) < coalesce(vl_desconto_liq_w,0) ) then
        
            update  titulo_rec_liq_cc a 
            set     a.vl_desconto       = coalesce(a.vl_desconto,0) + (coalesce(vl_desconto_liq_w,0) - coalesce(vl_desconto_cc_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p 
            and     a.ie_origem_classif = 'FO' LIMIT 1;
        
        end if;

        
            /*Arredondamento recebido*/

        if (vl_tot_recebido_cc_w > vl_recebido_w) then
            
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_recebido  =  (SELECT max(x.vl_recebido) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p
            and     a.ie_origem_classif = 'FO';

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set a.vl_recebido       = coalesce(a.vl_recebido,0) - ( coalesce(vl_tot_recebido_cc_w,0) - coalesce(vl_recebido_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_recebido       <> 0;

            else
                update  titulo_rec_liq_cc a
                set     a.vl_recebido       = coalesce(a.vl_recebido,0) - ( coalesce(vl_tot_recebido_cc_w,0) - coalesce(vl_recebido_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and     a.vl_recebido       <> 0 
                and     a.ie_origem_classif = 'FO' LIMIT 1;
            end if;

        elsif ( coalesce(vl_tot_recebido_cc_w,0) < coalesce(vl_recebido_w,0) ) then
        
            update  titulo_rec_liq_cc a 
            set     a.vl_recebido       = coalesce(a.vl_recebido,0) + (coalesce(vl_recebido_w,0) - coalesce(vl_tot_recebido_cc_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p 
            and     a.ie_origem_classif = 'FO' LIMIT 1;
        
        end if;


        









        
        /*Arredondamento vl_multa*/

        if (vl_multa_cc_w > vl_multa_w) then
            
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_multa =  (SELECT max(x.vl_multa) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p
            and     a.ie_origem_classif = 'FO';

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_multa      = coalesce(a.vl_multa,0) - ( coalesce(vl_multa_cc_w,0) - coalesce(vl_multa_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_multa      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/
            else
                update  titulo_rec_liq_cc a
                set     a.vl_multa      = coalesce(a.vl_multa,0) - ( coalesce(vl_multa_cc_w,0) - coalesce(vl_multa_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and     a.vl_multa      <> 0 /*OS980777 atualizar apenas a baixa que possuir juros informado*/
                and     a.ie_origem_classif = 'FO' LIMIT 1;
            end if;

        elsif ( coalesce(vl_multa_cc_w,0) < coalesce(vl_multa_w,0) ) then
        
            update  titulo_rec_liq_cc a 
            set     a.vl_multa      = coalesce(a.vl_multa,0) + (coalesce(vl_multa_w,0) - coalesce(vl_multa_cc_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p 
            and     a.ie_origem_classif = 'FO' LIMIT 1;
        
        end if;

            
        /*Arredondamento da vl_perdas */

        select  coalesce(sum(a.vl_perdas),0) 
        into STRICT    vl_classificacao_perdas_w
        from    titulo_rec_liq_cc a
        where   nr_titulo               = nr_titulo_p
        and     nr_seq_baixa            = nr_seq_baixa_p
        and     ie_origem_classif       = 'FO';

        select  coalesce(sum(a.vl_perdas),0) 
        into STRICT    vl_recebido_perdas_w
        from    titulo_receber_liq a
        where   nr_titulo               = nr_titulo_p
        and     nr_sequencia            = nr_seq_baixa_p;

        if ( coalesce(vl_classificacao_perdas_w,0) > coalesce(vl_recebido_perdas_w,0) ) then
        
            /*Buscar a sequencia que possui maior valor de perdas para arredondamento. 
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de juros, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_perdas =  (SELECT max(x.vl_perdas) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_perdas     = coalesce(a.vl_perdas,0) - ( coalesce(vl_classificacao_perdas_w,0) - coalesce(vl_recebido_perdas_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_perdas     <> 0; /* atualizar apenas a baixa que possuir vl_perdas informado*/
            else
                update  titulo_rec_liq_cc a
                set     a.vl_perdas     = coalesce(a.vl_perdas,0) - ( coalesce(vl_classificacao_perdas_w,0) - coalesce(vl_recebido_perdas_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and     a.vl_perdas     <> 0 LIMIT 1; /* atualizar apenas a baixa que possuir perdas informado*/
            end if;

        elsif ( coalesce(vl_classificacao_perdas_w,0) < coalesce(vl_recebido_perdas_w,0) ) then
            update  titulo_rec_liq_cc a
            set     a.vl_perdas     = coalesce(a.vl_perdas,0) + (coalesce(vl_recebido_perdas_w,0) - coalesce(vl_classificacao_perdas_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p
            and     coalesce(a.ie_lote_pro_rata::text, '') = ''  LIMIT 1;

        end if;
        /*Fim arredondamento vl_perdas*/
        
    else
        select  a.vl_titulo, -- Edgar 18/03/2008, OS 82811, gerar a classificacao da baixa
            coalesce(b.vl_glosa, 0),
            coalesce(b.vl_rec_maior, 0),
            coalesce(b.vl_descontos,0),
            coalesce(b.vl_juros,0),
            coalesce(b.vl_multa,0),
			coalesce(b.nr_seq_lote_hist_guia,0)
        into STRICT    vl_titulo_w,
            vl_glosa_w,
            vl_amaior_w,
            vl_desconto_liq_w,
            vl_juros_w,
            vl_multa_w,
			nr_seq_lote_hist_guia_w
        from    titulo_receber_liq b,
            titulo_receber a
        where   a.nr_titulo     = nr_titulo_p
        and a.nr_titulo     = b.nr_titulo
        and b.nr_sequencia      = nr_seq_baixa_p;

		if (coalesce(nr_seq_lote_hist_guia_w,0) <> 0) and (coalesce(vl_glosa_w,0) <> 0) then
			open C06;
			loop
			fetch C06 into	
				cd_centro_custo_w;
			EXIT WHEN NOT FOUND; /* apply on C06 */
				begin
					if (coalesce(ds_lista_centro_custo_w::text, '') = '') then
						ds_lista_centro_custo_w := cd_centro_custo_w;
					else
						ds_lista_centro_custo_w := substr(ds_lista_centro_custo_w || ',' || cd_centro_custo_w,1,4000);
					end if;
				end;
			end loop;
			close C06;
		end if;

		/*No cliente a opcao esta como IR - Obtem do item da glosa ou rateia pelos setores existentes na conta*/

		if (ds_lista_centro_custo_w IS NOT NULL AND ds_lista_centro_custo_w::text <> '') then
		 open C07;
		 loop
		 fetch C07 into	
		 	vl_tot_classif_cc_glosa_w,
			cd_centro_custo_cc_glosa_w;
		 EXIT WHEN NOT FOUND; /* apply on C07 */
		 	begin
			/*Precisa pegar o valor total da glosa para o CC em questao, e nao o valor total de glosa na baixa do titulo*/
			
			select	sum(a.vl_glosa)
			into STRICT	vl_glosa_cc_w
			FROM lote_audit_hist_item a
LEFT OUTER JOIN setor_atendimento b ON (a.cd_setor_atendimento = b.cd_setor_atendimento)
WHERE a.nr_seq_guia = nr_seq_lote_hist_guia_w  and a.vl_glosa > 0 and coalesce(b.cd_centro_custo, coalesce((SELECT	max(y.cd_centro_custo_receita)
												from	setor_atendimento y,
														procedimento_paciente x
												where	x.cd_setor_atendimento	= y.cd_setor_atendimento
												and		x.nr_sequencia			= a.nr_seq_propaci),
												(select	max(y.cd_centro_custo_receita)
												from	setor_atendimento y,
														material_atend_paciente x
												where	x.cd_setor_atendimento	= y.cd_setor_atendimento
												and		x.nr_sequencia			= a.nr_seq_matpaci)
											   )
											) = cd_centro_custo_cc_glosa_w;	
			
			open C08;
			loop
			fetch C08 into	
				vl_classificacao_w,
				cd_centro_custo_w,
				cd_conta_contabil_w,
				nr_seq_produto_w,
				cd_historico_w;
			EXIT WHEN NOT FOUND; /* apply on C08 */
				begin

			
				select  max(a.cd_estabelecimento)
				into STRICT    cd_estab_centro_custo_w
				from    centro_custo a
				where   a.cd_centro_custo   = cd_centro_custo_w;
				
				select  nextval('titulo_rec_liq_cc_seq')
				into STRICT    nr_seq_tit_rec_liq_cc_w
				;				
				
				
				/* Projeto Multimoeda - Verifica se a baixa e em moeda estrangeira, caso positivo calcula os valores para gravar no rateio,
				caso negativo limpa as variaveis antes de gravar o registro. */
				if (coalesce(vl_recebido_estrang_w,0) <> 0 and coalesce(vl_cotacao_w,0) <> 0) then
					vl_recebido_estrang_cc_w := dividir_sem_round((vl_classificacao_w/vl_cotacao_w),(vl_titulo_w/vl_cotacao_w)) * vl_recebido_estrang_w;
					vl_complemento_cc_w := (dividir_sem_round(vl_classificacao_w,vl_titulo_w) * vl_recebido_w) - vl_recebido_estrang_cc_w;
					vl_cotacao_cc_w     := vl_cotacao_w;
					cd_moeda_cc_w       := cd_moeda_w;
				else
					vl_recebido_estrang_cc_w := null;
					vl_complemento_cc_w := null;
					vl_cotacao_cc_w     := null;
					cd_moeda_cc_w       := null;
				end if;	

				if (coalesce(ie_pls_w,'N') = 'N') then
					
					insert  into titulo_rec_liq_cc(nr_sequencia,
						nr_titulo,
						nr_seq_baixa,
						dt_atualizacao,
						nm_usuario,
						cd_centro_custo,
						vl_baixa,
						vl_amaior,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						cd_cta_ctb_origem,
						cd_conta_contabil,
						vl_recebido,
						nr_seq_produto,
						ie_origem_classif,
						cd_estab_centro_custo,
						vl_recebido_estrang,
						vl_complemento,
						vl_cotacao,
						cd_moeda,
						vl_desconto,
						vl_juros,
						vl_multa)
					SELECT  nr_seq_tit_rec_liq_cc_w,
						nr_titulo_p,
						nr_seq_baixa_p,
						clock_timestamp(),
						nm_usuario_p,
						cd_centro_custo_w,
						dividir_sem_round(vl_classificacao_w, vl_tot_classif_cc_glosa_w) * vl_glosa_cc_w,
						dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_amaior_w,
						clock_timestamp(),
						nm_usuario_p,
						null,
						cd_conta_contabil_w,
						dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_recebido_w,
						nr_seq_produto_w,
						'CT',
						cd_estab_centro_custo_w,
						vl_recebido_estrang_cc_w,
						vl_complemento_cc_w,
						vl_cotacao_cc_w,
						cd_moeda_cc_w,
						(dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_desconto_liq_w),
						(dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_juros_w),
						(dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_multa_w)
					;
				else
					insert  into titulo_rec_liq_cc(nr_sequencia,
						nr_titulo,
						nr_seq_baixa,
						dt_atualizacao,
						nm_usuario,
						cd_centro_custo,
						vl_baixa,
						vl_amaior,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						cd_cta_ctb_origem,
						cd_conta_deb_pls,
						cd_conta_rec_pls,
                        cd_conta_contabil,
						vl_recebido,
						nr_seq_produto,
						cd_historico_pls,
						ie_lote_pro_rata,
						vl_contab_pro_rata,
						ie_origem_classif,
						cd_estab_centro_custo,
						vl_recebido_estrang,
						vl_complemento,
						vl_cotacao,
						cd_moeda,
						vl_desconto,
						vl_juros,
						vl_multa)
					SELECT  nr_seq_tit_rec_liq_cc_w,
						nr_titulo_p,
						nr_seq_baixa_p,
						clock_timestamp(),
						nm_usuario_p,
						cd_centro_custo_w,
						dividir_sem_round(vl_classificacao_w, vl_tot_classif_cc_glosa_w) * vl_glosa_cc_w,
						dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_amaior_w,
						clock_timestamp(),
						nm_usuario_p,
						null,
						CASE WHEN ie_contab_baixas_pro_rata_w='A' THEN null  ELSE cd_conta_contabil_w END ,
						CASE WHEN ie_contab_baixas_pro_rata_w='A' THEN cd_conta_contabil_w  ELSE null END ,
                        cd_conta_contabil_w,
						dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_recebido_w,
						nr_seq_produto_w,
						cd_historico_w,
						CASE WHEN ie_contab_baixas_pro_rata_w='A' THEN 'BA'  ELSE null END ,
						CASE WHEN ie_contab_baixas_pro_rata_w='A' THEN dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_recebido_w  ELSE null END ,
						'CT',
						cd_estab_centro_custo_w,
						vl_recebido_estrang_cc_w,
						vl_complemento_cc_w,
						vl_cotacao_cc_w,
						cd_moeda_cc_w,
						(dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_desconto_liq_w),
						(dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_juros_w),
						(dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_multa_w)
					;
				end if;
				
				if  coalesce(vl_recebido_w, 0) = 0 then
				
					begin
					select  sum(vl_recebido),
						sum(vl_perdas)
					into STRICT    vl_recebido_perdas_w,
						vl_perdas_w 
					from    titulo_rec_liq_cc
					where   nr_titulo       = nr_titulo_p
					and cd_centro_custo     = cd_centro_custo_w;
					
					
					select  coalesce(vl_perdas,0)
					into STRICT    vl_perda_liq_w
					from    titulo_receber_liq
					where   nr_titulo   = nr_titulo_p
					and nr_sequencia    = nr_seq_baixa_p;
				
					
					if (coalesce(vl_perda_liq_w,0) > 0) then
					
						vl_classificacao_perdas_w   :=  (dividir_sem_round(coalesce(vl_titulo_w,0),coalesce(vl_classificacao_w,0)) * 100);
						
						if (coalesce(vl_classificacao_perdas_w,0) > 0) then
						
							vl_tot_vl_perdas_w      :=   (dividir_sem_round(coalesce(vl_perda_liq_w,0), coalesce(vl_classificacao_perdas_w,0)) * 100);
						
						end if;
						
						count_w     := count_w + 1;
						vl_soma_total_perdas_w  := coalesce(vl_soma_total_perdas_w,0) + coalesce(vl_tot_vl_perdas_w,0);
				
					end if;
					
					
					if (nr_tot_tit_classif_w   = count_w) then
					
					select  max(a.nr_sequencia)
					into STRICT    nr_seq_baixa_cc_w
					from    titulo_rec_liq_cc a
					where   a.nr_titulo     = nr_titulo_p
					and     a.nr_seq_baixa  = nr_seq_baixa_p
					and     a.vl_perdas = (SELECT max(b.vl_perdas) from titulo_rec_liq_cc b where   b.nr_titulo     = nr_titulo_p and       b.nr_seq_baixa  = nr_seq_baixa_p);
					
			
					
						if (vl_soma_total_perdas_w > vl_perda_liq_w) then
			
							update  titulo_rec_liq_cc a 

							set     a.vl_perdas     = vl_perdas - (coalesce(vl_soma_total_perdas_w,0) - coalesce(vl_perda_liq_w,0))
							where   a.nr_titulo     = nr_titulo_p
							and nr_seq_baixa    = nr_seq_baixa_p
							and     a.nr_sequencia  = nr_seq_baixa_cc_w;
							
							

						
						elsif (vl_perda_liq_w > vl_soma_total_perdas_w) then
						
							update  titulo_rec_liq_cc a
							set     a.vl_perdas     = vl_perdas +  (coalesce(vl_perda_liq_w,0) - coalesce(vl_soma_total_perdas_w,0))
							where   a.nr_titulo     = nr_titulo_p
							and nr_seq_baixa    = nr_seq_baixa_p
							and     a.nr_sequencia  = nr_seq_baixa_cc_w;

							
						end if;
						
					end if;
					
					if coalesce(vl_tot_vl_perdas_w, 0) > 0 then
						update  titulo_rec_liq_cc   
						set vl_perdas       = coalesce(vl_tot_vl_perdas_w,0)
						where   nr_titulo   = nr_titulo_p
						and nr_seq_baixa    = nr_seq_baixa_p
						and nr_sequencia    = nr_seq_tit_rec_liq_cc_w;
					end if;
					end;
				end if;				
	
				end;
			end loop;
			close C08;
		
		 	end;
		 end loop;
		 close C07;
		end if;
		 
        open C03;
        loop
        fetch C03 into
            vl_classificacao_w,
            cd_centro_custo_w,
            cd_conta_contabil_w,
            nr_seq_produto_w,
            cd_historico_w;
        EXIT WHEN NOT FOUND; /* apply on C03 */

            select  max(a.cd_estabelecimento)
            into STRICT    cd_estab_centro_custo_w
            from    centro_custo a
            where   a.cd_centro_custo   = cd_centro_custo_w;

            select  nextval('titulo_rec_liq_cc_seq')
            into STRICT    nr_seq_tit_rec_liq_cc_w
;

            /* Projeto Multimoeda - Verifica se a baixa eem moeda estrangeira, caso positivo calcula os valores para gravar no rateio,
                    caso negativo limpa as variaveis antes de gravar o registro. */
            if (coalesce(vl_recebido_estrang_w,0) <> 0 and coalesce(vl_cotacao_w,0) <> 0) then
                vl_recebido_estrang_cc_w := dividir_sem_round((vl_classificacao_w/vl_cotacao_w),(vl_titulo_w/vl_cotacao_w)) * vl_recebido_estrang_w;
                vl_complemento_cc_w := (dividir_sem_round(vl_classificacao_w,vl_titulo_w) * vl_recebido_w) - vl_recebido_estrang_cc_w;
                vl_cotacao_cc_w     := vl_cotacao_w;
                cd_moeda_cc_w       := cd_moeda_w;
            else
                vl_recebido_estrang_cc_w := null;
                vl_complemento_cc_w := null;
                vl_cotacao_cc_w     := null;
                cd_moeda_cc_w       := null;
            end if;

            if (coalesce(ie_pls_w,'N') = 'N') then
                insert  into titulo_rec_liq_cc(nr_sequencia,
                    nr_titulo,
                    nr_seq_baixa,
                    dt_atualizacao,
                    nm_usuario,
                    cd_centro_custo,
                    vl_baixa,
                    vl_amaior,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    cd_cta_ctb_origem,
                    cd_conta_contabil,
                    vl_recebido,
                    nr_seq_produto,
                    ie_origem_classif,
                    cd_estab_centro_custo,
                    vl_recebido_estrang,
                    vl_complemento,
                    vl_cotacao,
                    cd_moeda,
                    vl_desconto,
                    vl_juros,
                    vl_multa)
                SELECT  nr_seq_tit_rec_liq_cc_w,
                    nr_titulo_p,
                    nr_seq_baixa_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    cd_centro_custo_w,
                    dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_glosa_w,
                    dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_amaior_w,
                    clock_timestamp(),
                    nm_usuario_p,
                    null,
                    cd_conta_contabil_w,
                    dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_recebido_w,
                    nr_seq_produto_w,
                    'CT',
                    cd_estab_centro_custo_w,
                    vl_recebido_estrang_cc_w,
                    vl_complemento_cc_w,
                    vl_cotacao_cc_w,
                    cd_moeda_cc_w,
                    (dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_desconto_liq_w),
                    (dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_juros_w),
                    (dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_multa_w)
;
            else
                insert  into titulo_rec_liq_cc(nr_sequencia,
                    nr_titulo,
                    nr_seq_baixa,
                    dt_atualizacao,
                    nm_usuario,
                    cd_centro_custo,
                    vl_baixa,
                    vl_amaior,
                    dt_atualizacao_nrec,
                    nm_usuario_nrec,
                    cd_cta_ctb_origem,
                    cd_conta_deb_pls,
                    cd_conta_rec_pls,
                    cd_conta_contabil,
                    vl_recebido,
                    nr_seq_produto,
                    cd_historico_pls,
                    ie_lote_pro_rata,
                    vl_contab_pro_rata,
                    ie_origem_classif,
                    cd_estab_centro_custo,
                    vl_recebido_estrang,
                    vl_complemento,
                    vl_cotacao,
                    cd_moeda,
                    vl_desconto,
                    vl_juros,
                    vl_multa)
                SELECT  nr_seq_tit_rec_liq_cc_w,
                    nr_titulo_p,
                    nr_seq_baixa_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    cd_centro_custo_w,
                    dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_glosa_w,
                    dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_amaior_w,
                    clock_timestamp(),
                    nm_usuario_p,
                    null,
                    CASE WHEN ie_contab_baixas_pro_rata_w='A' THEN null  ELSE cd_conta_contabil_w END ,
                    CASE WHEN ie_contab_baixas_pro_rata_w='A' THEN cd_conta_contabil_w  ELSE null END ,
                    cd_conta_contabil_w,
                    dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_recebido_w,
                    nr_seq_produto_w,
                    cd_historico_w,
                    CASE WHEN ie_contab_baixas_pro_rata_w='A' THEN 'BA'  ELSE null END ,
                    CASE WHEN ie_contab_baixas_pro_rata_w='A' THEN dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_recebido_w  ELSE null END ,
                    'CT',
                    cd_estab_centro_custo_w,
                    vl_recebido_estrang_cc_w,
                    vl_complemento_cc_w,
                    vl_cotacao_cc_w,
                    cd_moeda_cc_w,
                    (dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_desconto_liq_w),
                    (dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_juros_w),
                    (dividir_sem_round(vl_classificacao_w, vl_titulo_w) * vl_multa_w)
;
            end if;

            if  coalesce(vl_recebido_w, 0) = 0 then
            
                begin                           
                select  sum(vl_recebido),
                    sum(vl_perdas)
                into STRICT    vl_recebido_perdas_w,
                    vl_perdas_w 
                from    titulo_rec_liq_cc
                where   nr_titulo       = nr_titulo_p
                and cd_centro_custo     = cd_centro_custo_w;

                
                select  coalesce(vl_perdas,0)
                into STRICT    vl_perda_liq_w
                from    titulo_receber_liq
                where   nr_titulo   = nr_titulo_p
                and nr_sequencia    = nr_seq_baixa_p;

                
                if (coalesce(vl_perda_liq_w,0) > 0) then
                
                    vl_classificacao_perdas_w   :=  (dividir_sem_round(coalesce(vl_titulo_w,0),coalesce(vl_classificacao_w,0)) * 100);

                    if (coalesce(vl_classificacao_perdas_w,0) > 0) then 
                    
                        vl_tot_vl_perdas_w      :=   (dividir_sem_round(coalesce(vl_perda_liq_w,0), coalesce(vl_classificacao_perdas_w,0)) * 100);
                    end if;

                    count_w     := count_w + 1;
                    vl_soma_total_perdas_w  := coalesce(vl_soma_total_perdas_w,0) + coalesce(vl_tot_vl_perdas_w,0);

                end if;

                
                if (nr_tot_tit_classif_w   = count_w) then
                
                select  max(a.nr_sequencia)
                into STRICT    nr_seq_baixa_cc_w
                from    titulo_rec_liq_cc a
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.vl_perdas = (SELECT max(b.vl_perdas) from titulo_rec_liq_cc b where   b.nr_titulo     = nr_titulo_p and       b.nr_seq_baixa  = nr_seq_baixa_p);

        
                 
                    if (vl_soma_total_perdas_w > vl_perda_liq_w) then
        
                        update  titulo_rec_liq_cc a 

                        set     a.vl_perdas     = vl_perdas - (coalesce(vl_soma_total_perdas_w,0) - coalesce(vl_perda_liq_w,0))
                        where   a.nr_titulo     = nr_titulo_p
                        and nr_seq_baixa    = nr_seq_baixa_p
                        and     a.nr_sequencia  = nr_seq_baixa_cc_w;

                        

                    
                    elsif (vl_perda_liq_w > vl_soma_total_perdas_w) then
                    
                        update  titulo_rec_liq_cc a 
                        set     a.vl_perdas     = vl_perdas +  (coalesce(vl_perda_liq_w,0) - coalesce(vl_soma_total_perdas_w,0))
                        where   a.nr_titulo     = nr_titulo_p
                        and nr_seq_baixa    = nr_seq_baixa_p
                        and     a.nr_sequencia  = nr_seq_baixa_cc_w;


                    end if;

                end if;
                
                if coalesce(vl_tot_vl_perdas_w, 0) > 0 then
                    update  titulo_rec_liq_cc   
                    set vl_perdas       = coalesce(vl_tot_vl_perdas_w,0)
                    where   nr_titulo   = nr_titulo_p
                    and nr_seq_baixa    = nr_seq_baixa_p
                    and nr_sequencia    = nr_seq_tit_rec_liq_cc_w;
                end if;
                end;
            end if;

        end loop;
        close C03;

        select  coalesce(sum(vl_recebido),0),
            coalesce(sum(vl_baixa),0),
            coalesce(sum(vl_amaior),0),
            coalesce(sum(vl_recebido_estrang),0),
            coalesce(sum(vl_juros),0),
            coalesce(sum(vl_multa),0),
            coalesce(sum(vl_desconto),0),
            max(nr_sequencia)
        into STRICT    vl_tot_recebido_cc_w,
            vl_tot_glosa_cc_w,
            vl_tot_amaior_cc_w,
            vl_tot_receb_estrang_cc_w,
            vl_tot_juros_w,
            vl_tot_multa_w,
            vl_tot_desconto_cc_w,
            nr_seq_liq_cc_w
        from    titulo_rec_liq_cc
        where   nr_titulo       = nr_titulo_p
        and nr_seq_baixa        = nr_seq_baixa_p;

        /*Arredondamento de descontos */

        select  coalesce(max(a.vl_descontos),0)
        into STRICT    vl_desconto_calc_w
        from    titulo_receber_liq a
        where   nr_titulo       = nr_titulo_p
        and     nr_sequencia    = nr_seq_baixa_p;

        if ( coalesce(vl_desconto_calc_w,0) > coalesce(vl_tot_desconto_cc_w,0) ) then
                update  titulo_rec_liq_cc a
                set     a.vl_desconto   = a.vl_desconto + (coalesce(vl_desconto_calc_w,0) - coalesce(vl_tot_desconto_cc_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_liq_cc_w;
        elsif ( coalesce(vl_desconto_calc_w,0) < coalesce(vl_tot_desconto_cc_w,0) ) then

            /*Buscar a sequencia que possui maior valor de desconto para arredondamento.
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de juros, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_desconto =  (SELECT max(x.vl_desconto) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_desconto   = a.vl_desconto - (coalesce(vl_tot_desconto_cc_w,0) - coalesce(vl_desconto_calc_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_desconto   <> 0;

            else
                update  titulo_rec_liq_cc a
                set     a.vl_desconto   = a.vl_desconto - (coalesce(vl_tot_desconto_cc_w,0) - coalesce(vl_desconto_calc_w,0))
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_liq_cc_w;

            end if;
        end if;

        /*Arredondamento dos juros*/

        if ( coalesce(vl_tot_juros_w,0) > coalesce(vl_juros_w,0) ) then
        
            /*Buscar a sequencia que possui maior valor de juros para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de juros, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_juros =  (SELECT max(x.vl_juros) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_juros      = coalesce(a.vl_juros,0) - ( coalesce(vl_tot_juros_w,0) - coalesce(vl_juros_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_juros      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/
            else
                update  titulo_rec_liq_cc a
                set     a.vl_juros      = coalesce(a.vl_juros,0) - ( coalesce(vl_tot_juros_w,0) - coalesce(vl_juros_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.vl_juros      <> 0 LIMIT 1; /*OS980777 atualizar apenas a baixa que possuir juros informado*/
            end if;

        elsif ( coalesce(vl_tot_juros_w,0) < coalesce(vl_juros_w,0) ) then
            update  titulo_rec_liq_cc a
            set     a.vl_juros      = coalesce(a.vl_juros,0) + (coalesce(vl_juros_w,0) - coalesce(vl_tot_juros_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;
            --and       a.vl_juros      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/-- N precisa dessa restricao, pois a soma da classif da baixa e menor, entao vai somar a diferenca.
            
        end if;

        /*Arredondamento da multa*/

        if ( coalesce(vl_tot_multa_w,0) > coalesce(vl_multa_w,0) ) then
        
            /*Buscar a sequencia que possui maior valor de juros para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor de multa, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_multa =  (SELECT max(x.vl_multa) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if (coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_multa      = coalesce(a.vl_multa,0) - ( coalesce(vl_tot_multa_w,0) - coalesce(vl_multa_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w
                and     a.vl_multa      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/
            else
                update  titulo_rec_liq_cc a
                set     a.vl_multa      = coalesce(a.vl_multa,0) - ( coalesce(vl_tot_multa_w,0) - coalesce(vl_multa_w,0) )
                where   a.nr_titulo     = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p 
                and     a.vl_multa      <> 0 LIMIT 1; /*OS980777 atualizar apenas a baixa que possuir juros informado*/
            end if;

        elsif ( coalesce(vl_tot_multa_w,0) < coalesce(vl_multa_w,0) ) then
            update  titulo_rec_liq_cc a 
            set     a.vl_multa      = coalesce(a.vl_multa,0) + (coalesce(vl_multa_w,0) - coalesce(vl_tot_multa_w,0))
            where   a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;
            --and       a.vl_multa      <> 0; /*OS980777 atualizar apenas a baixa que possuir juros informado*/-- N precisa dessa restricao, pois a soma da classif da baixa e menor, entao vai somar a diferenca.
        end if;


        if (vl_tot_recebido_cc_w <> 0) and (vl_tot_recebido_cc_w <> vl_recebido_w) then
            
            /*Buscar a sequencia que possui maior valor recebido para arredondamento. OS 1001222
            Isso pois da forma que estava, estava realizando o ajuste na linha 1  (else do if)  e o valor do ajuste e maior q o valor recebido, deixando um valor negativo que nao pode.*/
            select  max(a.nr_sequencia)
            into STRICT    nr_seq_cc_w 
            from    titulo_rec_liq_cc a
            where   a.vl_recebido =  (SELECT max(x.vl_recebido) from titulo_rec_liq_cc x where x.nr_titulo = nr_titulo_p and x.nr_seq_baixa = nr_seq_baixa_p)
            and     a.nr_titulo     = nr_titulo_p
            and     a.nr_seq_baixa  = nr_seq_baixa_p;

            if ( coalesce(nr_seq_cc_w,0) <> 0) then
                update  titulo_rec_liq_cc a
                set     a.vl_recebido   = a.vl_recebido + vl_recebido_w - vl_tot_recebido_cc_w
                where   a.nr_titulo = nr_titulo_p
                and     a.nr_seq_baixa  = nr_seq_baixa_p
                and     a.nr_sequencia  = nr_seq_cc_w;

            else
                update  titulo_rec_liq_cc a
                set a.vl_recebido   = a.vl_recebido + vl_recebido_w - vl_tot_recebido_cc_w
                where   a.nr_titulo = nr_titulo_p
                and a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;

            end if;
        end if;

        if (vl_tot_glosa_cc_w <> vl_glosa_w) then
            update  titulo_rec_liq_cc a
            set a.vl_baixa  = a.vl_baixa + vl_glosa_w - vl_tot_glosa_cc_w
            where   a.nr_titulo = nr_titulo_p
            and a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;
        end if;

        if (vl_tot_amaior_cc_w <> 0) and (vl_tot_amaior_cc_w <> vl_amaior_w) then
            update  titulo_rec_liq_cc a
            set a.vl_amaior = a.vl_amaior + vl_amaior_w - vl_tot_amaior_cc_w
            where   a.nr_titulo = nr_titulo_p
            and a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;
        end if;

        /* Projeto Multimoeda - Verifica se a baixa e em moeda estrangeira, caso positivo verifica se existe diferenca entre o total do rateio e o valor da baixa
                e atualiza a diferenca em um dos registros do rateio. */
        if (coalesce(vl_recebido_estrang_w,0) <> 0 and coalesce(vl_cotacao_w,0) <> 0) then
            if (vl_tot_receb_estrang_cc_w <> 0) and (vl_tot_receb_estrang_cc_w <> vl_recebido_estrang_w) then
                update  titulo_rec_liq_cc a
                set a.vl_recebido_estrang   = a.vl_recebido_estrang + vl_recebido_estrang_w - vl_tot_receb_estrang_cc_w
                where   a.nr_titulo = nr_titulo_p
                  and   a.nr_seq_baixa  = nr_seq_baixa_p  LIMIT 1;
            end if;
        end if;
    end if;
end if;


update  ctb_documento
set     ie_situacao_ctb     = 'P'
where   nr_documento        = nr_titulo_p
and nr_seq_doc_compl    	= nr_seq_baixa_p
and coalesce(nr_doc_analitico,0) = 0
and cd_estabelecimento  	= cd_estabelecimento_p
and ie_situacao_ctb     	= 'N';

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_titulo_rec_liq_cc ( cd_estabelecimento_p bigint, nr_seq_ret_item_p bigint, nm_usuario_p text, nr_titulo_p bigint, nr_seq_baixa_p bigint) FROM PUBLIC;

