-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_reg_ecf_l030 ( nr_seq_controle_p text, ds_separador_p text, cd_estabelecimento_p text, nm_usuario_p text, cd_empresa_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint, ie_scp_p text) AS $body$
DECLARE


nr_seq_registro_w		bigint := nr_sequencia_p;
nr_linha_w			bigint := qt_linha_p;
ds_arquivo_w			varchar(4000);
ds_arquivo_compl_w		varchar(4000);
ds_linha_w			varchar(4000);
sep_w				varchar(2) := ds_separador_p;

tp_registro			varchar(5);
dt_inicio_apuracao_w		timestamp;
dt_fim_apuracao_w		timestamp;
ie_tipo_aval_estoque_w		fis_regra_ecf_0020.ie_tipo_aval_estoque%type;
ie_forma_apuracao_w		fis_regra_ecf_0020.ie_forma_apuracao%type;
nr_seq_apuracao_w		bigint;
ie_tipo_apuracao_w		varchar(1);
dt_inicio_w			timestamp;
dt_fim_w			timestamp;
nr_seq_lote_w			fis_controle_ecf.nr_seq_lote%type;

-- Registro L030
c01 CURSOR FOR
	SELECT  b.dt_mes_apuracao,
			a.ie_anual_trimestral,
			a.ie_forma_apuracao
	from	fis_estrutura_calculo 	a,
			fis_lote_apuracao 		b
	where	a.nr_sequencia 		= b.nr_seq_estrutura
	and 	b.dt_mes_apuracao	between dt_inicio_apuracao_w and dt_fim_apuracao_w
	and 	a.ie_lalur_lacs		= 'LC'
	and 	b.ie_lote_anual 	= 'N'
	and		b.cd_empresa 		= cd_empresa_p
	and		(((ie_scp_p = 'S')
			and (coalesce(a.ie_scp, 'N') = 'S') 
			and (cd_estabelecimento_p = a.cd_estabelecimento_scp)
	or (ie_scp_p = 'N') 
			and (coalesce(a.ie_scp, 'N') = 'N') 
			and (coalesce(a.cd_estabelecimento_scp::text, '') = '')))
	order by 	b.dt_mes_apuracao;
vet01	c01%RowType;

-- Registro L210
c02 CURSOR FOR
	SELECT  max(b.cd_registro) cd_registro,
		max(b.ds_registro) ds_registro,
		coalesce(sum(b.vl_custo), 0) vl_custo
	from	fis_lote_ecf_210 	a,
		fis_reg_tabela_ecf_210	b
	where	a.nr_sequencia 		= b.nr_seq_lote
	and 	dt_referencia		between dt_inicio_w and dt_fim_w
	and 	vl_custo 		> 0
	and	a.nr_seq_lote		= nr_seq_lote_w
	group by 	cd_registro, ds_registro
	order by 	cd_registro;
vet02	c02%RowType;


BEGIN

select  max(dt_inicio_apuracao),
	max(dt_fim_apuracao),
	max(nr_seq_lote)
into STRICT	dt_inicio_apuracao_w,
	dt_fim_apuracao_w,
	nr_seq_lote_w
from	fis_controle_ecf
where	nr_sequencia = nr_seq_controle_p;

select  max(ie_tipo_aval_estoque),
	max(ie_forma_apuracao)
into STRICT	ie_tipo_aval_estoque_w,
	ie_forma_apuracao_w
from	fis_regra_ecf_0020
where	nr_seq_lote	= nr_seq_lote_w
and	cd_empresa 	= cd_empresa_p;

tp_registro	:= 'L001';
ds_linha_w  	:=  substr(	sep_w || tp_registro		|| -- Texto Fixo Contendo a Identificao do Registro.
				sep_w || 0 			|| -- Indicador de movimento: 0 - Bloco com dados informados; 1 - Bloco sem dados informados.
				sep_w,1,8000);

ds_arquivo_w		:= substr(ds_linha_w,1,4000);
ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
nr_seq_registro_w	:= nr_seq_registro_w + 1;
nr_linha_w		:= nr_linha_w + 1;

insert into fis_ecf_arquivo(
	nr_sequencia,
	nm_usuario,
	dt_atualizacao,
	nm_usuario_nrec,
	dt_atualizacao_nrec,
	nr_seq_controle_ecf,
	nr_linha,
	cd_registro,
	ds_arquivo,
	ds_arquivo_compl)
values (	nr_seq_registro_w,
	nm_usuario_p,
	clock_timestamp(),
	nm_usuario_p,
	clock_timestamp(),
	nr_seq_controle_p,
	nr_linha_w,
	tp_registro,
	ds_arquivo_w,
	ds_arquivo_compl_w);

if ie_forma_apuracao_w  = 'A' then

	tp_registro	:= 'L030'; --linha A00
	dt_inicio_w	:= dt_inicio_apuracao_w;
	dt_fim_w	:= dt_fim_apuracao_w;

	ds_linha_w  	:=  substr(	sep_w || tp_registro	 			|| -- Texto Fixo Contendo a Identificao do Registro
					sep_w || to_char(dt_inicio_w,'ddmmyyyy')	|| -- Data do Incio do Perodo
					sep_w || to_char(dt_fim_w,'ddmmyyyy')		|| -- Data do Fim do Perodo
					sep_w || 'A00' 					|| -- Perodo de Apurao
					sep_w,1,8000);

	ds_arquivo_w		:= substr(ds_linha_w,1,4000);
	ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
	nr_seq_registro_w	:= nr_seq_registro_w + 1;
	nr_linha_w		:= nr_linha_w + 1;

	insert into fis_ecf_arquivo(
		nr_sequencia,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		nr_seq_controle_ecf,
		nr_linha,
		cd_registro,
		ds_arquivo,
		ds_arquivo_compl)
	values (	nr_seq_registro_w,
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nr_seq_controle_p,
		nr_linha_w,
		tp_registro,
		ds_arquivo_w,
		ds_arquivo_compl_w);

	tp_registro	:= 'L200'; --da linha A00
	ds_linha_w  	:=  substr( 	sep_w || tp_registro	 			|| -- Texto Fixo Contendo a Identificao do Registro
					sep_w || to_char(ie_tipo_aval_estoque_w)	|| -- Mtodo de Avaliao do Estoque Final
					sep_w,1,8000);

	ds_arquivo_w		:= substr(ds_linha_w,1,4000);
	ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
	nr_seq_registro_w	:= nr_seq_registro_w + 1;
	nr_linha_w		:= nr_linha_w + 1;

	insert into fis_ecf_arquivo(
		nr_sequencia,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		nr_seq_controle_ecf,
		nr_linha,
		cd_registro,
		ds_arquivo,
		ds_arquivo_compl)
	values (	nr_seq_registro_w,
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nr_seq_controle_p,
		nr_linha_w,
		tp_registro,
		ds_arquivo_w,
		ds_arquivo_compl_w);	

	dt_inicio_w	:= dt_fim_apuracao_w; -- Buscar ltimo dia do ano
	open c02;
	loop
	fetch c02 into
		vet02;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		tp_registro	:= 'L210'; --da linha A00
		ds_linha_w  	:=  substr( 	sep_w || tp_registro	 		|| -- Texto Fixo Contendo a Identificao do Registro
						sep_w || to_char(vet02.cd_registro)	|| -- Cdigo da Conta de Custos (Analtica), conforme tabela dinmica do Sped.
						sep_w || to_char(vet02.ds_registro)	|| -- Descrio da Conta de Custos.
						sep_w || to_char(vet02.vl_custo)	|| -- Saldo Final da Conta de Custos Antes do Encerramento. O valor deve ser sempre positivo.
						sep_w,1,8000);

		ds_arquivo_w		:= substr(ds_linha_w,1,4000);
		ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
		nr_seq_registro_w	:= nr_seq_registro_w + 1;
		nr_linha_w		:= nr_linha_w + 1;

		insert into fis_ecf_arquivo(
			nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_controle_ecf,
			nr_linha,
			cd_registro,
			ds_arquivo,
			ds_arquivo_compl)
		values (	nr_seq_registro_w,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nr_seq_controle_p,
			nr_linha_w,
			tp_registro,
			ds_arquivo_w,
			ds_arquivo_compl_w);

		end;
	end loop;
	close c02;
end if;		

open c01;
loop
fetch c01 into
	vet01;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

		if (vet01.ie_forma_apuracao = 'B' AND vet01.ie_anual_trimestral = 'A') or (vet01.ie_anual_trimestral = 'T') then
			tp_registro	:= 'L030';

			if (vet01.ie_anual_trimestral = 'A') then
				dt_inicio_w 		:= dt_inicio_apuracao_w;
				dt_fim_w		:= fim_mes(vet01.dt_mes_apuracao);
				ie_tipo_apuracao_w 	:= 'A';
				nr_seq_apuracao_w 	:= to_char(dt_fim_w, 'mm');
			else
				dt_inicio_w 		:= trunc(add_months(vet01.dt_mes_apuracao, -2), 'month');
				dt_fim_w		:= vet01.dt_mes_apuracao;
				ie_tipo_apuracao_w 	:= 'T';
				nr_seq_apuracao_w 	:= (to_char(dt_fim_w, 'mm') / 3);
			end if;

			ds_linha_w := substr(	sep_w || tp_registro	 					|| -- Texto Fixo Contendo a Identificao do Registro
						sep_w || to_char(dt_inicio_w,'ddmmyyyy')			|| -- Data do Incio do Perodo
						sep_w || to_char(dt_fim_w ,'ddmmyyyy')				|| -- Data do Fim do Perodo
						sep_w || ie_tipo_apuracao_w || lpad(nr_seq_apuracao_w, 2, '0')	|| -- Perodo de Apurao
						sep_w,1,8000);

			ds_arquivo_w		:= substr(ds_linha_w,1,4000);
			ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
			nr_seq_registro_w	:= nr_seq_registro_w + 1;
			nr_linha_w		:= nr_linha_w + 1;

			insert into fis_ecf_arquivo(
				nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_controle_ecf,
				nr_linha,
				cd_registro,
				ds_arquivo,
				ds_arquivo_compl)
			values (	nr_seq_registro_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_controle_p,
				nr_linha_w,
				tp_registro,
				ds_arquivo_w,
				ds_arquivo_compl_w);

			tp_registro	:= 'L200';

			ds_linha_w  	:=  substr(	sep_w || tp_registro	 			|| -- Texto Fixo Contendo a Identificao do Registro
							sep_w || to_char(ie_tipo_aval_estoque_w)	|| -- Mtodo de Avaliao do Estoque Final
							sep_w,1,8000);

			ds_arquivo_w		:= substr(ds_linha_w,1,4000);
			ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
			nr_seq_registro_w	:= nr_seq_registro_w + 1;
			nr_linha_w		:= nr_linha_w + 1;

			insert into fis_ecf_arquivo(
				nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_controle_ecf,
				nr_linha,
				cd_registro,
				ds_arquivo,
				ds_arquivo_compl)
			values (	nr_seq_registro_w,
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_controle_p,
				nr_linha_w,
				tp_registro,
				ds_arquivo_w,
				ds_arquivo_compl_w);


			dt_inicio_w := trunc(vet01.dt_mes_apuracao, 'month');				
			if dt_fim_apuracao_w = trunc(dt_fim_w) then
				dt_fim_w := dt_fim_w - 1; -- para ignorar a linha A00
			end if;

			open c02;
			loop
			fetch c02 into
				vet02;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin

				tp_registro	:= 'L210';

				ds_linha_w  	:=  substr(	sep_w || tp_registro	 		|| -- Texto Fixo Contendo a Identificao do Registro
								sep_w || to_char(vet02.cd_registro)	|| -- Cdigo da Conta de Custos (Analtica), conforme tabela dinmica do Sped.
								sep_w || to_char(vet02.ds_registro)	|| -- Descrio da Conta de Custos.
								sep_w || to_char(vet02.vl_custo)	|| -- Saldo Final da Conta de Custos Antes do Encerramento. O valor deve ser sempre positivo.
								sep_w,1,8000);

				ds_arquivo_w		:= substr(ds_linha_w,1,4000);
				ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
				nr_seq_registro_w	:= nr_seq_registro_w + 1;
				nr_linha_w		:= nr_linha_w + 1;

				insert into fis_ecf_arquivo(
					nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					nr_seq_controle_ecf,
					nr_linha,
					cd_registro,
					ds_arquivo,
					ds_arquivo_compl)
				values (	nr_seq_registro_w,
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nr_seq_controle_p,
					nr_linha_w,
					tp_registro,
					ds_arquivo_w,
					ds_arquivo_compl_w);

				end;
			end loop;
			close c02;

		end if;
	end;
end loop;
close c01;

commit;

qt_linha_p	:= nr_linha_w;
nr_sequencia_p	:= nr_seq_registro_w;

SELECT * FROM fis_reg_ecf_L990(nr_seq_controle_p, ds_separador_p, cd_estabelecimento_p, nm_usuario_p, cd_empresa_p, qt_linha_p, nr_sequencia_p) INTO STRICT qt_linha_p, nr_sequencia_p;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_reg_ecf_l030 ( nr_seq_controle_p text, ds_separador_p text, cd_estabelecimento_p text, nm_usuario_p text, cd_empresa_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint, ie_scp_p text) FROM PUBLIC;

