-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_idade_agenda_pac (cd_agenda_p bigint, dt_agenda_p timestamp, qt_idade_p bigint, nr_seq_ageint_p bigint default null, ds_erro_p INOUT text DEFAULT NULL, ds_erro_turno_esp_p INOUT text DEFAULT NULL, nm_usuario_p text DEFAULT NULL, nr_seq_turno_p bigint default 0, nr_seq_turno_esp_p bigint default 0) AS $body$
DECLARE


ie_dia_semana_w		integer;
qt_idade_min_w		bigint;
qt_idade_max_w		bigint;
ds_erro_w		varchar(255) := '';
ds_erro_hor_especial_w	varchar(255) := '';
ds_erro_turno_normal_w	varchar(255) := '';
qt_idade_w		smallint;
dt_nascimento_w		timestamp;
nr_seq_agenda_int_w	agenda_integrada.nr_sequencia%type;
cd_pessoa_fisica_w	agenda_integrada.cd_pessoa_fisica%type;

ie_cons_idade_pac_zero_ag_w 	agenda.ie_cons_idade_pac_zero_ag%type;
ie_consiste_idademin_zero_w	varchar(1) := 'N';
ie_cons_idade_pac_zerada_w	varchar(1) := 'N';
/*ie_cons_idade_pac_zero_ag_w 	agenda.ie_cons_idade_pac_zero_ag%type;  */

qt_turno_especial_w	bigint;
cd_tipo_agendamento_w	agenda.cd_tipo_agenda%type;


BEGIN
-- caso mexer nessa procedure referente ao item de consulta verificar tambem consiste_idade_agenda_pac_pck na ageint_sugerir_horarios_pck
select max(CD_TIPO_AGENDA)
into STRICT cd_tipo_agendamento_w
from agenda
where cd_agenda = cd_agenda_p;

if (coalesce(cd_tipo_agendamento_w, 3) = 2) then	
	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	agenda_integrada
	where	nr_sequencia = nr_seq_ageint_p;
	ds_erro_w := Consiste_Idade_Pac_Agexame(	cd_agenda_p, dt_agenda_p, qt_idade_p, cd_pessoa_fisica_w, ds_erro_w, nm_usuario_p);
	ds_erro_p := ds_erro_w;
	ds_erro_turno_esp_p := null;
else	
	ie_consiste_idademin_zero_w := obter_param_usuario(821, 105, Obter_Perfil_Ativo, nm_usuario_p, 0, ie_consiste_idademin_zero_w);
	ie_cons_idade_pac_zerada_w := obter_param_usuario(821, 362, Obter_Perfil_Ativo, nm_usuario_p, 0, ie_cons_idade_pac_zerada_w);

  if (nr_seq_turno_p = 0 and nr_seq_turno_esp_p = 0) then
    select	pkg_date_utils.get_WeekDay(dt_agenda_p)
    into STRICT	ie_dia_semana_w
;
  end if;

	qt_idade_w := qt_idade_p;

	select 	coalesce(max(ie_cons_idade_pac_zero_ag),'N')
	into STRICT 	ie_cons_idade_pac_zero_ag_w
	from	agenda
	where	cd_agenda = cd_agenda_p;

	--INICIO - Buscar idade do paciente quando n?o informado c?d. de pessoa f?sica

	/*select	max(nr_sequencia)
	into	nr_seq_agenda_int_w
	from	agenda_integrada
	where	nr_sequencia = (select	max(y.nr_seq_ageint)
				from	ageint_horarios_usuario x,
					ageint_lib_usuario y
				where	x.nr_seq_ageint_lib = y.nr_sequencia
				and	x.cd_agenda = cd_agenda_p);*/
				
	if (nr_seq_ageint_p IS NOT NULL AND nr_seq_ageint_p::text <> '') then

		select	max(cd_pessoa_fisica)
		into STRICT	cd_pessoa_fisica_w
		from	agenda_integrada
		where	nr_sequencia = nr_seq_ageint_p;
		
		if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
			
			select	dt_nascimento
			into STRICT	dt_nascimento_w
			from	agenda_integrada
			where	nr_sequencia = nr_seq_ageint_p;
								
			select	obter_idade(dt_nascimento_w, clock_timestamp(), 'A')
			into STRICT	qt_idade_w
			;
		
		end if;

	end if;
	--FIM - Buscar idade do paciente quando n?o informado c?d. de pessoa f?sica
  if nr_seq_turno_p > 0 then
	begin
		select coalesce(qt_idade_min, 0),
			coalesce(qt_idade_max, 0)
		into STRICT	qt_idade_min_w,
			qt_idade_max_w
		from agenda_turno
		where nr_sequencia = nr_seq_turno_p;
	exception
		when no_data_found then null;
		when too_many_rows then null;
	end;

  else

    select	coalesce(max(qt_idade_min),0),
      coalesce(max(qt_idade_max),0)
    into STRICT	qt_idade_min_w,
      qt_idade_max_w
    from	agenda_turno
    where	cd_agenda	= cd_agenda_p
    and	((ie_dia_semana	= ie_dia_semana_w) or ((ie_dia_semana = 9) and (pkg_date_utils.is_business_day(dt_agenda_p) = 1)))
    and	to_date('01/01/1899 ' || to_char(hr_inicial, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <=
      to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
    and	to_date('01/01/1899 ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >= 
      to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
    and	((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_agenda_p)))
    and	((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_agenda_p)));
  end if;
		
	if	(((qt_idade_min_w > 0) or (ie_consiste_idademin_zero_w = 'S' AND qt_idade_min_w = 0)) or (qt_idade_max_w > 0) and
		((qt_idade_w > 0) or
		 (qt_idade_w = 0 AND ie_cons_idade_pac_zerada_w = 'S')) or (ie_cons_idade_pac_zero_ag_w = 'S')) and
		((qt_idade_min_w <> 0) or (qt_idade_max_w <> 0)) then 

		begin
		
		if (qt_idade_min_w > qt_idade_w) or
			(qt_idade_p = 0 AND qt_idade_min_w = 0) and (coalesce(ds_erro_w::text, '') = '') THEN
			ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277649,null);
		end if;		
		
		if 	(qt_idade_min_w <= qt_idade_max_w AND qt_idade_max_w < qt_idade_w) and (coalesce(ds_erro_w::text, '') = '') then
			ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277651,null);
		end if;		

		end;
	end if;	

	if (qt_idade_min_w = 0) and (qt_idade_max_w = 0) and (nr_seq_turno_p = 0 and nr_seq_turno_esp_p = 0) then
		begin

    select	coalesce(max(qt_idade_min),0),
      coalesce(max(qt_idade_max),0)
    into STRICT	qt_idade_min_w,
      qt_idade_max_w
    from	agenda_turno
    where	cd_agenda	= cd_agenda_p
    and	ie_dia_semana	= 9
    and	to_date('01/01/1899 ' || to_char(hr_inicial, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <= 
      to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
    and	to_date('01/01/1899 ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >= 
      to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
    and	((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_agenda_p)))
    and	((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_agenda_p)));		

		if	(((qt_idade_min_w > 0) or (ie_consiste_idademin_zero_w = 'S' AND qt_idade_min_w = 0)) or (qt_idade_max_w > 0) and
			((qt_idade_w > 0) or
			(qt_idade_w = 0 AND ie_cons_idade_pac_zerada_w = 'S')) or (ie_cons_idade_pac_zero_ag_w = 'S')) and
			((qt_idade_min_w <> 0) or (qt_idade_max_w <> 0)) then 
			begin

			if (qt_idade_min_w > qt_idade_w) or
				(qt_idade_p = 0 AND qt_idade_min_w = 0) and (coalesce(ds_erro_w::text, '') = '') then
				ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277649,null);
			end if;		
		
			if 	(qt_idade_min_w <= qt_idade_max_w AND qt_idade_max_w < qt_idade_w) and (coalesce(ds_erro_w::text, '') = '') then
				ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277651,null);
			end if;		

			end;
		end if;	

		end;
	end if;

	ds_erro_turno_normal_w := ds_erro_w;

	-- INiCIO - Consistir idade minima/maxima dos turnos especiais

	--if (ds_erro_w is null) then
		select 	count(1)
		into STRICT	qt_turno_especial_w
		from	agenda_turno_esp
		where	cd_agenda = cd_agenda_p  LIMIT 1;
		
		if (qt_turno_especial_w > 0) then
					
			ds_erro_w := null;

      if nr_seq_turno_esp_p > 0 then
		begin
			select coalesce(qt_idade_min, 0),
				coalesce(qt_idade_max, 0)
			into STRICT	qt_idade_min_w,
				qt_idade_max_w
			from agenda_turno_esp
			where nr_sequencia = nr_seq_turno_esp_p;
		exception
			when no_data_found then null;
			when too_many_rows then null;
		end;

      else 
		
        select	coalesce(max(qt_idade_min),0),
          coalesce(max(qt_idade_max),0)
        into STRICT	qt_idade_min_w,
          qt_idade_max_w
        from	agenda_turno_esp
        where	cd_agenda	= cd_agenda_p
        and	((ie_dia_semana	= ie_dia_semana_w) or ((ie_dia_semana = 9) and (pkg_date_utils.is_business_day(dt_agenda_p) = 1)))
        and	to_date('01/01/1899 ' || to_char(hr_inicial, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <= 
          to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
        and	to_date('01/01/1899 ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >= 
          to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
        and	((coalesce(dt_agenda::text, '') = '') or (trunc(dt_agenda) <= trunc(dt_agenda_p)))
        and	((coalesce(dt_agenda_fim::text, '') = '') or (trunc(dt_agenda_fim) >= trunc(dt_agenda_p)));
      end if;

			if	(((qt_idade_min_w > 0) or (ie_consiste_idademin_zero_w = 'S' AND qt_idade_min_w = 0)) or (qt_idade_max_w > 0) and
				((qt_idade_w > 0) or 
				 (qt_idade_w = 0 AND ie_cons_idade_pac_zerada_w = 'S')) or (ie_cons_idade_pac_zero_ag_w = 'S')) and
				((qt_idade_min_w <> 0) or (qt_idade_max_w <> 0)) then 

				begin
				
				if (qt_idade_min_w > qt_idade_w) or
					(qt_idade_p = 0 AND qt_idade_min_w = 0) and (coalesce(ds_erro_w::text, '') = '') THEN
					ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277649,null);
				end if;		
				
				if 	(qt_idade_min_w <= qt_idade_max_w AND qt_idade_max_w < qt_idade_w) and (coalesce(ds_erro_w::text, '') = '') then
					ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277651,null);
				end if;		

				end;
				
			end if;

			if (qt_idade_min_w = 0) and (qt_idade_max_w = 0) and (nr_seq_turno_p = 0 and nr_seq_turno_esp_p = 0) then
				begin
				
				select	coalesce(max(qt_idade_min),0),
					coalesce(max(qt_idade_max),0)
				into STRICT	qt_idade_min_w,
					qt_idade_max_w
				from	agenda_turno_esp
				where	cd_agenda	= cd_agenda_p
				and	ie_dia_semana	= 9
				and	to_date('01/01/1899 ' || to_char(hr_inicial, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <=
					to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
				and	to_date('01/01/1899 ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >= 
					to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
				and	((coalesce(dt_agenda::text, '') = '') or (trunc(dt_agenda) <= trunc(dt_agenda_p)))
				and	((coalesce(dt_agenda_fim::text, '') = '') or (trunc(dt_agenda_fim) >= trunc(dt_agenda_p)));


				if	(((qt_idade_min_w > 0) or (ie_consiste_idademin_zero_w = 'S' AND qt_idade_min_w = 0)) or (qt_idade_max_w > 0) and
					((qt_idade_w > 0) or
					(qt_idade_w = 0 AND ie_cons_idade_pac_zerada_w = 'S')) or (ie_cons_idade_pac_zero_ag_w = 'S')) and
					((qt_idade_min_w <> 0) or (qt_idade_max_w <> 0)) then 
					begin

					if (qt_idade_min_w > qt_idade_w) or
						(qt_idade_p = 0 AND qt_idade_min_w = 0) and (coalesce(ds_erro_w::text, '') = '') then
						ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277649,null);
					end if;		
				
					if 	(qt_idade_min_w <= qt_idade_max_w AND qt_idade_max_w < qt_idade_w) and (coalesce(ds_erro_w::text, '') = '') then
						ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277651,null);
					end if;		

					end;
				end if;	

				end;
			end if;		
		
			ds_erro_hor_especial_w := ds_erro_w;
		
		end if;

	--end if;

	-- FIM - Consistir idade m?nima/m?xima dos turnos especiais
	ds_erro_p		:= ds_erro_turno_normal_w;
	ds_erro_turno_esp_p	:= ds_erro_hor_especial_w;
end if;	

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_idade_agenda_pac (cd_agenda_p bigint, dt_agenda_p timestamp, qt_idade_p bigint, nr_seq_ageint_p bigint default null, ds_erro_p INOUT text DEFAULT NULL, ds_erro_turno_esp_p INOUT text DEFAULT NULL, nm_usuario_p text DEFAULT NULL, nr_seq_turno_p bigint default 0, nr_seq_turno_esp_p bigint default 0) FROM PUBLIC;

