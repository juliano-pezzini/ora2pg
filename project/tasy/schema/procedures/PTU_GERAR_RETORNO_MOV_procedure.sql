-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_retorno_mov ( nr_seq_intercambio_p bigint, ie_opcao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_mov_w			bigint;
nr_seq_segurado_w		bigint;
nr_seq_retorno_w		bigint;
nr_seq_intercambio_w		bigint;
cd_unimed_destino_w		varchar(10);
cd_unimed_origem_w		varchar(10);
ie_tipo_mov_w			varchar(1);
dt_mov_inicio_w			timestamp;
dt_mov_fim_w			timestamp;
nr_versao_transacao_w		smallint;
cd_inconsistencia_w		bigint;
ie_tipo_produto_w		varchar(10);
cd_usuario_plano_novo_w		varchar(13);
cd_unimed_novo_w		varchar(10);
ie_tipo_registro_w		varchar(2);
qt_registros_w			bigint;

C01 CURSOR FOR
	SELECT	lpad(a.cd_unimed, 4, '0') cd_unimed,
		lpad(a.cd_usuario_plano, 13, '0') cd_beneficiario,
		a.nr_sequencia nr_seq_benef_intercambio,
		null	nr_seq_benef_simp,
		substr(d.cd_usuario_plano,5,13) cd_usuario_plano_novo,
		substr(d.cd_usuario_plano,2,3) cd_unimed_novo,
		d.nr_via_solicitacao nr_via_carteira,
		d.dt_validade_carteira,
		a.ie_status,
		(	SELECT	max(x.cd_motivo)
			from	pls_motivo_rej_rec_benef x
			where	x.nr_sequencia = a.nr_seq_motivo_rejeicao) cd_motivo_rejeicao,
		a.nr_seq_segurado,
		a.dt_fim_repasse dt_fim_compartilhamento
	FROM ptu_intercambio_empresa b, ptu_intercambio_benef a
LEFT OUTER JOIN pls_segurado c ON (a.nr_seq_segurado = c.nr_sequencia)
LEFT OUTER JOIN pls_segurado_carteira d ON (c.nr_sequencia = d.nr_seq_segurado)
WHERE b.nr_sequencia		= a.nr_seq_empresa and b.nr_seq_intercambio	= nr_seq_intercambio_w
union all

	select	lpad(a.cd_unimed, 4, '0') cd_unimed,
		lpad(a.cd_beneficiario,13,'0') cd_beneficiario,
		null nr_seq_benef_intercambio,
		a.nr_sequencia	nr_seq_benef_simp,
		substr(d.cd_usuario_plano,5,13) cd_usuario_plano_novo,
		substr(d.cd_usuario_plano,2,3) cd_unimed_novo,
		d.nr_via_solicitacao nr_via_carteira,
		d.dt_validade_carteira,
		a.ie_status ie_status,
		(	select	max(x.cd_motivo)
			from	pls_motivo_rej_rec_benef x
			where	x.nr_sequencia = a.nr_seq_motivo_rejeicao) cd_motivo_rejeicao,
		a.nr_seq_segurado,
		a.dt_fim_compartilhamento
	FROM ptu_intercambio_benef_simp a
LEFT OUTER JOIN pls_segurado c ON (a.nr_seq_segurado = c.nr_sequencia)
LEFT OUTER JOIN pls_segurado_carteira d ON (c.nr_sequencia = d.nr_seq_segurado)
WHERE a.nr_seq_intercambio	= nr_seq_intercambio_w;

C02 CURSOR FOR
	SELECT	lpad(a.cd_unimed, 4, '0') cd_unimed,
		substr(coalesce(a.cd_usuario_plano, a.cd_usuario_plano_benef),1,13) cd_usuario_plano,
		ptu_obter_mensagem_benef_a200(nr_seq_segurado_w) cd_inconsistencia
	from	ptu_mov_produto_benef	a,
		ptu_mov_produto_empresa	b
	where	a.nr_seq_empresa	= b.nr_sequencia
	and	b.nr_seq_mov_produto	= nr_seq_mov_w;

BEGIN
if (ie_opcao_p	= 1) then
	select	nr_sequencia,
		cd_unimed_destino,
		cd_unimed_origem,
		ie_tipo_mov,
		dt_mov_inicio,
		dt_mov_fim,
		nr_versao_transacao
	into STRICT	nr_seq_intercambio_w,
		cd_unimed_destino_w,
		cd_unimed_origem_w,
		ie_tipo_mov_w,
		dt_mov_inicio_w,
		dt_mov_fim_w,
		nr_versao_transacao_w
	from	ptu_intercambio
	where	nr_sequencia	= nr_seq_intercambio_p;
	
	if (coalesce(dt_mov_fim_w::text, '') = '') then
		dt_mov_fim_w	:= fim_mes(dt_mov_inicio_w);
	end if;
	
	select	nextval('ptu_retorno_movimentacao_seq')
	into STRICT	nr_seq_retorno_w
	;
	
	insert into ptu_retorno_movimentacao(nr_sequencia, cd_unimed_destino, cd_unimed_origem,
		dt_geracao, ie_tipo_mov, dt_mov_inicio,
		dt_mov_fim, ie_operacao, dt_atualizacao,
		nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
		nr_versao_transacao, ie_tipo_produto, nr_seq_intercambio)
	values (nr_seq_retorno_w , cd_unimed_origem_w, cd_unimed_destino_w,
		clock_timestamp(), ie_tipo_mov_w, dt_mov_inicio_w,
		dt_mov_fim_w, 'E', clock_timestamp(),
		nm_usuario_p, clock_timestamp(), nm_usuario_p,
		04, 'A', nr_seq_intercambio_w);
	
	for r_c01_w in C01 loop
		begin
		cd_usuario_plano_novo_w	:= coalesce(r_c01_w.cd_usuario_plano_novo,r_c01_w.cd_beneficiario);
		cd_unimed_novo_w	:= coalesce(r_c01_w.cd_unimed_novo,r_c01_w.cd_unimed);
		
		begin
		select	CASE WHEN ie_status='C' THEN ie_tipo_registro  ELSE '' END
		into STRICT	ie_tipo_registro_w
		from	ptu_intercambio_benef
		where	nr_sequencia	= r_c01_w.nr_seq_benef_intercambio
		and	(nr_seq_segurado IS NOT NULL AND nr_seq_segurado::text <> '');
		exception
		when others then
			ie_tipo_registro_w := null;
		end;
		
		if (r_c01_w.nr_seq_benef_simp IS NOT NULL AND r_c01_w.nr_seq_benef_simp::text <> '') then
			
			if (r_c01_w.ie_status = 'N') and (r_c01_w.cd_motivo_rejeicao IS NOT NULL AND r_c01_w.cd_motivo_rejeicao::text <> '') then
				cd_inconsistencia_w	:= r_c01_w.cd_motivo_rejeicao;
			elsif (coalesce(r_c01_w.nr_seq_segurado::text, '') = '') then
				cd_inconsistencia_w	:= 3201;
			else
				if (coalesce(r_c01_w.dt_fim_compartilhamento::text, '') = '') then
					cd_inconsistencia_w	:= 3202;
				else
					cd_inconsistencia_w	:= 3203;
				end if;
			end if;
			
		elsif (ie_tipo_registro_w	= 'I') then
			cd_inconsistencia_w	:= 3201;
		elsif (ie_tipo_registro_w	= 'A') then
			cd_inconsistencia_w	:= 3202;
		elsif (ie_tipo_registro_w	= 'E') then
			cd_inconsistencia_w	:= 3203;
		elsif (ie_tipo_registro_w	= 'R') then
			cd_inconsistencia_w	:= 3207;
		elsif (r_c01_w.ie_status = 'N') and (r_c01_w.cd_motivo_rejeicao IS NOT NULL AND r_c01_w.cd_motivo_rejeicao::text <> '') then
			cd_inconsistencia_w	:= r_c01_w.cd_motivo_rejeicao;
		elsif (coalesce(ie_tipo_registro_w::text, '') = '') and (r_c01_w.nr_seq_benef_intercambio IS NOT NULL AND r_c01_w.nr_seq_benef_intercambio::text <> '') then
			
			select	count(1)
			into STRICT	qt_registros_w
			from	ptu_intercambio_consist	b,
				ptu_inconsistencia	a
			where	b.nr_seq_inconsistencia	= a.nr_sequencia
			and	b.nr_seq_inter_benef	= r_c01_w.nr_seq_benef_intercambio
			and	a.cd_inconsistencia	in (8005,8002)  LIMIT 1;
			
			if (qt_registros_w > 0) then
				cd_inconsistencia_w	:= 3211;
			else
				select	count(1)
				into STRICT	qt_registros_w
				from	ptu_intercambio_consist	b,
					ptu_inconsistencia	a
				where	b.nr_seq_inconsistencia	= a.nr_sequencia
				and	b.nr_seq_inter_benef	= r_c01_w.nr_seq_benef_intercambio
				and	a.cd_inconsistencia	in (3209)  LIMIT 1;
				
				if (qt_registros_w > 0) then
					cd_inconsistencia_w	:= 3209;
				else
					cd_inconsistencia_w	:= 3212;
				end if;
			end if;
		end if;
		
		insert into ptu_retorno_mov_benef(	nr_sequencia, nr_seq_retorno_mov, cd_unimed,
				cd_usuario_plano, cd_inconsistencia, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				cd_unimed_cad, cd_usuario_plano_cad, nr_seq_benef_intercambio,
				nr_seq_benef_simp, nr_via_carteira, dt_validade_carteira)
		values (	nextval('ptu_retorno_mov_benef_seq'), nr_seq_retorno_w, r_c01_w.cd_unimed,
				r_c01_w.cd_beneficiario, cd_inconsistencia_w, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				cd_unimed_novo_w, cd_usuario_plano_novo_w, r_c01_w.nr_seq_benef_intercambio,
				r_c01_w.nr_seq_benef_simp, r_c01_w.nr_via_carteira, r_c01_w.dt_validade_carteira);
		end;
	end loop; --C01
elsif (ie_opcao_p	= 2) then
	select	nr_sequencia,
		cd_unimed_destino,
		cd_unimed_origem,
		ie_tipo_mov,
		dt_mov_inicio,
		dt_mov_fim,
		nr_versao_transacao,
		ie_tipo_produto
	into STRICT	nr_seq_mov_w,
		cd_unimed_destino_w,
		cd_unimed_origem_w,
		ie_tipo_mov_w,
		dt_mov_inicio_w,
		dt_mov_fim_w,
		nr_versao_transacao_w,
		ie_tipo_produto_w
	from	ptu_movimentacao_produto
	where	nr_sequencia	= nr_seq_intercambio_p;
	
	select	nextval('ptu_retorno_movimentacao_seq')
	into STRICT	nr_seq_retorno_w
	;
	
	insert into ptu_retorno_movimentacao(nr_sequencia, cd_unimed_destino, cd_unimed_origem,
		dt_geracao, ie_tipo_mov, dt_mov_inicio,
		dt_mov_fim, ie_operacao, dt_atualizacao,
		nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
		nr_versao_transacao, ie_tipo_produto, nr_seq_intercambio,
		nr_seq_mov_produto)
	values (nr_seq_retorno_w , cd_unimed_destino_w, cd_unimed_origem_w,
		clock_timestamp(), ie_tipo_mov_w, dt_mov_inicio_w,
		dt_mov_fim_w, 'E', clock_timestamp(),
		nm_usuario_p, clock_timestamp(), nm_usuario_p,
		nr_versao_transacao_w, 'A', nr_seq_intercambio_w,
		nr_seq_mov_w);
	
	for r_c02_w in C02 loop
		begin
		select	nextval('ptu_retorno_mov_benef_seq')
		into STRICT	nr_seq_segurado_w
		;
		
		insert into ptu_retorno_mov_benef(nr_sequencia, nr_seq_retorno_mov, cd_unimed,
			cd_usuario_plano, cd_inconsistencia, dt_atualizacao,
			nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_unimed_cad, cd_usuario_plano_cad)
		values (nr_seq_segurado_w, nr_seq_retorno_w, r_c02_w.cd_unimed,
			r_c02_w.cd_usuario_plano, r_c02_w.cd_inconsistencia, clock_timestamp(),
			nm_usuario_p, clock_timestamp(), nm_usuario_p,
			r_c02_w.cd_unimed, r_c02_w.cd_usuario_plano);
		end;
	end loop; --C02
end if;
--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_retorno_mov ( nr_seq_intercambio_p bigint, ie_opcao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

