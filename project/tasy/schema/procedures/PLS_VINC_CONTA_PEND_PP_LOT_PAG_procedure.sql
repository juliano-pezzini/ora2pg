-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_vinc_conta_pend_pp_lot_pag ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_pp_lote_p pls_pp_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

						
nr_seq_lote_w			pls_pp_lote.nr_sequencia%type;
dt_fechamento_w			pls_pp_lote.dt_fechamento%type;
qt_registros_w			integer;
nr_seq_pp_prestador_w		pls_pp_prestador.nr_sequencia%type;
ie_origem_venc_titulo_w		pls_pp_prestador.ie_origem_venc_titulo%type;
nr_seq_regra_venc_titulo_w	pls_pp_prestador.nr_seq_regra_venc_titulo%type;
ie_origem_comp_pag_w		pls_pp_prestador.ie_origem_comp_pag%type;	
dt_comp_pag_w			pls_pp_prestador.dt_comp_pag%type;
dt_venc_titulo_w		pls_pp_prestador.dt_venc_titulo%type;
ie_acao_pgto_negativo_w		pls_pp_prestador.ie_acao_pgto_negativo%type;
qt_pag_negativo_max_w		pls_pp_prestador.qt_pag_negativo_max%type;
vl_minimo_tit_liq_w		pls_pp_prestador.vl_minimo_tit_liq%type;
nr_seq_pp_prest_evento_valor_w	pls_pp_prest_evento_valor.nr_sequencia%type;

C01 CURSOR(	nr_seq_pp_lote_pc	pls_pp_lote.nr_sequencia%type,
		nr_seq_conta_pc		pls_conta.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_resumo,
		nr_seq_prestador_pgto,
		nr_seq_pp_evento,
		nr_seq_conta,
		coalesce(vl_liberado,0) vl_liberado,
		coalesce(vl_glosa,0) vl_glosa,
		coalesce(vl_liberado,0) vl_liquido,
		dt_item,
		ie_tipo_contratacao
	from	pls_conta_medica_resumo
	where	nr_seq_conta = nr_seq_conta_pc
	and	nr_seq_pp_lote = nr_seq_pp_lote_pc
	and	(nr_seq_prestador_pgto IS NOT NULL AND nr_seq_prestador_pgto::text <> '')
	and	(nr_seq_pp_evento IS NOT NULL AND nr_seq_pp_evento::text <> '')
	and	ie_situacao = 'A';
		
BEGIN

if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	select	max(nr_sequencia),
		max(dt_fechamento)
	into STRICT	nr_seq_lote_w,
		dt_fechamento_w
	from	pls_pp_lote
	where	nr_sequencia = nr_seq_pp_lote_p;
	
	if (coalesce(nr_seq_lote_w::text, '') = '') then	
		CALL wheb_mensagem_pck.exibir_mensagem_abort(208549,'NR_SEQ_LOTE_PAG_P=' || nr_seq_pp_lote_p);
	end if;
	
	if (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(212300,'NR_SEQ_LOTE_PAG_P=' || nr_seq_pp_lote_p);
	end if;
	
	select	count(1)
	into STRICT	qt_registros_w
	from	pls_conta_medica_resumo
	where	nr_seq_conta = nr_seq_conta_p
	and	coalesce(nr_seq_lote_pgto::text, '') = ''
	and	coalesce(nr_seq_pp_lote::text, '') = ''
	and	(nr_seq_pp_evento IS NOT NULL AND nr_seq_pp_evento::text <> '')
	and	(nr_seq_prestador_pgto IS NOT NULL AND nr_seq_prestador_pgto::text <> '')
	and	ie_situacao = 'A'  LIMIT 1;
	
	if (qt_registros_w > 0) then
		update	pls_conta_medica_resumo
		set	nr_seq_pp_lote = nr_seq_pp_lote_p,
			nm_usuario = nm_usuario_p,
			dt_atualizacao = clock_timestamp()
		where	nr_seq_conta = nr_seq_conta_p
		and	coalesce(nr_seq_lote_pgto::text, '') = ''
		and	coalesce(nr_seq_pp_lote::text, '') = ''
		and	(nr_seq_pp_evento IS NOT NULL AND nr_seq_pp_evento::text <> '')
		and	(nr_seq_prestador_pgto IS NOT NULL AND nr_seq_prestador_pgto::text <> '')
		and	ie_situacao = 'A';
		
		for r_c01_w in c01(nr_seq_pp_lote_p, nr_seq_conta_p) loop
			select	max(nr_sequencia)
			into STRICT	nr_seq_pp_prestador_w
			from	pls_pp_prestador
			where	nr_seq_lote = nr_seq_pp_lote_p
			and	nr_seq_prestador = r_c01_w.nr_seq_prestador_pgto
			and	ie_cancelado = 'N';
			
			if (coalesce(nr_seq_pp_prestador_w::text, '') = '') then
				
				CALL pls_pp_lote_pagamento_pck.carrega_parametros(nr_seq_pp_lote_p, cd_estabelecimento_p);
				
				SELECT * FROM pls_pp_lote_pagamento_pck.obter_data_vencimento_prest(r_c01_w.nr_seq_prestador_pgto, cd_estabelecimento_p) INTO STRICT ie_origem_venc_titulo_w, nr_seq_regra_venc_titulo_w, dt_comp_pag_w, ie_origem_comp_pag_w;
				
				SELECT * FROM pls_pp_lote_pagamento_pck.obter_dados_forma_pgto_prest(r_c01_w.nr_seq_prestador_pgto, ie_acao_pgto_negativo_w, qt_pag_negativo_max_w, vl_minimo_tit_liq_w) INTO STRICT ie_acao_pgto_negativo_w, qt_pag_negativo_max_w, vl_minimo_tit_liq_w;
				
				insert into pls_pp_prestador(	nr_sequencia,				nr_seq_lote,				nr_seq_prestador,
								nm_usuario,				dt_atualizacao,				nm_usuario_nrec,
								dt_atualizacao_nrec,			ie_cancelado,				ie_exibe_portal,
								vl_apropriado,				vl_desconto,				vl_glosa,
								vl_liquido,				vl_provento,				vl_titulo_pagar,
								vl_titulo_receber,			vl_tributo,				ie_origem_venc_titulo,
								nr_seq_regra_venc_titulo,		ie_origem_comp_pag,			dt_comp_pag,
								dt_venc_titulo,				ie_acao_pgto_negativo,			qt_pag_negativo_max,
								vl_minimo_tit_liq)		
						values (	nextval('pls_pp_prestador_seq'),		nr_seq_pp_lote_p,			r_c01_w.nr_seq_prestador_pgto,
								nm_usuario_p,				clock_timestamp(),				nm_usuario_p,
								clock_timestamp(),				'N',					'N',
								0,					0,					0,
								0,					0,					0,
								0,					0,					ie_origem_venc_titulo_w,
								nr_seq_regra_venc_titulo_w,		ie_origem_comp_pag_w,			dt_comp_pag_w,
								dt_venc_titulo_w,			ie_acao_pgto_negativo_w,		qt_pag_negativo_max_w,
								vl_minimo_tit_liq_w) returning nr_sequencia into nr_seq_pp_prestador_w;
			end if;
			
			if (nr_seq_pp_prestador_w IS NOT NULL AND nr_seq_pp_prestador_w::text <> '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_pp_prest_evento_valor_w
				from	pls_pp_prest_evento_valor
				where	nr_seq_lote = nr_seq_pp_lote_p
				and	nr_seq_prestador = r_c01_w.nr_seq_prestador_pgto
				and	nr_seq_evento = r_c01_w.nr_seq_pp_evento
				and	ie_cancelado = 'N';
				
				if (coalesce(nr_seq_pp_prest_evento_valor_w::text, '') = '') then
					insert into pls_pp_prest_evento_valor(	nr_sequencia,				nr_seq_lote,				nr_seq_prestador,
										nr_seq_evento,				nm_usuario,				dt_atualizacao,
										nm_usuario_nrec,			dt_atualizacao_nrec,			ie_cancelado,
										vl_glosa,				vl_item,				vl_liquido,
										vl_tributo,				vl_acao_negativo)
								values (	nextval('pls_pp_prest_evento_valor_seq'),	nr_seq_pp_lote_p,			r_c01_w.nr_seq_prestador_pgto,
										r_c01_w.nr_seq_pp_evento,		nm_usuario_p,				clock_timestamp(),
										nm_usuario_p,				clock_timestamp(),				'N',
										0,					0,					0,
										0,					0) returning nr_sequencia into nr_seq_pp_prest_evento_valor_w;
										
				end if;
				
				select	count(1)
				into STRICT	qt_registros_w
				from	pls_pp_prest_event_prest
				where	nr_seq_pp_prest	= nr_seq_pp_prestador_w
				and	nr_seq_pp_prest_even_val = nr_seq_pp_prest_evento_valor_w;
				
				if (qt_registros_w = 0) then
					insert into pls_pp_prest_event_prest(	nr_sequencia,
										nr_seq_pp_prest,
										nr_seq_pp_prest_even_val)
								values (	nextval('pls_pp_prest_event_prest_seq'),
										nr_seq_pp_prestador_w,
										nr_seq_pp_prest_evento_valor_w);
				end if;
				
				if (nr_seq_pp_prest_evento_valor_w IS NOT NULL AND nr_seq_pp_prest_evento_valor_w::text <> '') then
					insert into pls_pp_item_lote(	nr_sequencia,				nr_seq_lote,				nr_seq_prestador,
									nr_seq_evento,				nm_usuario,				dt_atualizacao,
									nm_usuario_nrec,			dt_atualizacao_nrec,			ie_cancelado,
									ie_tipo_item,				nr_seq_prestador_origem,		vl_glosa,
									vl_item,				vl_liquido,				nr_seq_conta,
									nr_seq_resumo,				dt_item,				ie_tipo_contratacao,
									ie_acao_negativo, 			vl_desconto_tributo,			vl_acao_negativo)
							values (	nextval('pls_pp_item_lote_seq'),		nr_seq_pp_lote_p,			r_c01_w.nr_seq_prestador_pgto,
									r_c01_w.nr_seq_pp_evento,		nm_usuario_p,				clock_timestamp(),
									nm_usuario_p,				clock_timestamp(),				'N',
									'1',					r_c01_w.nr_seq_prestador_pgto,		r_c01_w.vl_glosa,
									r_c01_w.vl_liberado,			r_c01_w.vl_liquido,			r_c01_w.nr_seq_conta,
									r_c01_w.nr_seq_resumo,			r_c01_w.dt_item,			r_c01_w.ie_tipo_contratacao,
									'N',					0,					0);
									
					CALL pls_atualizar_valor_lote_pp(nr_seq_pp_prestador_w, nm_usuario_p);
				end if;
			end if;
		end loop;
	end if;
	
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_vinc_conta_pend_pp_lot_pag ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_pp_lote_p pls_pp_lote.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

