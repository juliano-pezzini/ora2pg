-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_importar_fornec_unimed ( nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


ds_linha_w			w_import_mat_unimed.ds_conteudo%type;
ds_valor_w			w_import_mat_unimed.ds_conteudo%type;
contador_w  			integer := 0;
ie_parametro_w			varchar(1);

cd_fornecedor_w			pls_fornec_mat_fed_sc.cd_fornecedor%type;
nm_fornecedor_w			pls_fornec_mat_fed_sc.nm_fornecedor%type;
nm_abreviado_w			pls_fornec_mat_fed_sc.nm_abreviado%type;
ds_endereco_w			pls_fornec_mat_fed_sc.ds_endereco%type;
ds_bairro_w			pls_fornec_mat_fed_sc.ds_bairro%type;
cd_localidade_w			pls_fornec_mat_fed_sc.cd_localidade%type;
cd_cep_w			pls_fornec_mat_fed_sc.cd_cep%type;
nr_telefone_w			pls_fornec_mat_fed_sc.nr_telefone%type;
nr_fax_w				pls_fornec_mat_fed_sc.nr_fax%type;
ds_email_w			pls_fornec_mat_fed_sc.ds_email%type;
ds_contato_w			pls_fornec_mat_fed_sc.ds_contato%type;
cd_cgc_w			pls_fornec_mat_fed_sc.cd_cgc%type;
nr_inscricao_estadual_w		pls_fornec_mat_fed_sc.nr_inscricao_estadual%type;
ds_especialidade_w		pls_fornec_mat_fed_sc.ds_especialidade%type;
cd_banco_w			pls_fornec_mat_fed_sc.cd_banco%type;
cd_agencia_w			pls_fornec_mat_fed_sc.cd_agencia%type;
cd_conta_w			pls_fornec_mat_fed_sc.cd_conta%type;
ie_situacao_w			pls_fornec_mat_fed_sc.ie_situacao%type;
ds_motivo_situacao_w		pls_fornec_mat_fed_sc.ds_motivo_situacao%type;
dt_situacao_w			pls_fornec_mat_fed_sc.dt_situacao%type;
dt_inclusao_w			pls_fornec_mat_fed_sc.dt_inclusao%type;
nr_seq_fornecedor_w		pls_fornec_mat_fed_sc.nr_sequencia%type;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	ds_conteudo
	from	w_import_mat_unimed
	order by	nr_sequencia;

C02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_mat_uni_fed_sc_preco b,
		pls_mat_unimed_fed_sc a
	where	b.nr_seq_mat_unimed	= a.nr_sequencia
	and	b.cd_fornecedor_fed_sc	= cd_fornecedor_w;


BEGIN
ie_parametro_w := obter_param_usuario(1211, 10, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_parametro_w);

open C01;
loop
fetch C01 into
	ds_linha_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	contador_w	:= 0;
	while(ds_linha_w IS NOT NULL AND ds_linha_w::text <> '') and (contador_w < 255) loop
		begin

		if (position('#' in ds_linha_w) = 0) then
			ds_valor_w	:= ds_linha_w;
			ds_linha_w	:= null;
		else
			ds_valor_w	:= substr(ds_linha_w,1,position('#' in ds_linha_w) - 1);
			ds_linha_w	:= substr(ds_linha_w,position('#' in ds_linha_w) + 1,length(ds_linha_w));
		end if;

		if (contador_w = 0) then
			cd_fornecedor_w		:= substr(trim(both ds_valor_w),1,10);

		elsif (contador_w = 1) then
			nm_fornecedor_w		:= substr(trim(both ds_valor_w),1,255);

		elsif (contador_w = 2) then
			nm_abreviado_w		:= substr(trim(both ds_valor_w),1,255);

		elsif (contador_w = 3) then
			ds_endereco_w		:= substr(trim(both ds_valor_w),1,255);

		elsif (contador_w = 4) then
			ds_bairro_w		:= substr(trim(both ds_valor_w),1,255);

		elsif (contador_w = 5) then
			cd_localidade_w		:= substr(trim(both ds_valor_w),1,10);

		elsif (contador_w = 6) then
			cd_cep_w		:= substr(trim(both ds_valor_w),1,15);

		elsif (contador_w = 7) then
			nr_telefone_w		:= substr(trim(both ds_valor_w),1,50);

		elsif (contador_w = 8) then
			nr_fax_w		:= substr(trim(both ds_valor_w),1,50);

		elsif (contador_w = 9) then
			ds_email_w		:= substr(trim(both ds_valor_w),1,255);

		--elsif	(contador_w = 10) then
		--	ds_contato_w		:= substr(trim(ds_valor_w),1,2000);
		elsif (contador_w = 10) then
			cd_cgc_w		:= substr(trim(both ds_valor_w),1,14);

		elsif (contador_w = 11) then
			nr_inscricao_estadual_w	:= substr(trim(both ds_valor_w),1,30);

		elsif (contador_w = 12) then
			ds_especialidade_w	:= substr(trim(both ds_valor_w),1,255);

		elsif (contador_w = 13) then
			cd_banco_w		:= substr(trim(both ds_valor_w),1,3);

		elsif (contador_w = 14) then
			cd_agencia_w		:= substr(trim(both ds_valor_w),1,10);

		elsif (contador_w = 15) then
			cd_conta_w		:= substr(trim(both ds_valor_w),1,20);

		elsif (contador_w = 16) then
			ie_situacao_w		:= substr(trim(both ds_valor_w),1,1);

		elsif (contador_w = 17) then
			ds_motivo_situacao_w	:= substr(trim(both ds_valor_w),1,255);

		elsif (contador_w = 18) then
			dt_situacao_w		:= to_date(ds_valor_w,'dd/mm/yy hh24:mi');

		elsif (contador_w = 19) then
			dt_inclusao_w		:= to_date(ds_valor_w,'dd/mm/yy hh24:mi');
		end if;

		contador_w := contador_w + 1;

		end;
	end loop;

	dt_inclusao_w := coalesce(dt_inclusao_w,clock_timestamp());

	-- Verifica se o Fornecedor já está cadastrado na tabela PLS_FORNEC_MAT_FED_SC
	select	max(nr_sequencia)
	into STRICT	nr_seq_fornecedor_w
	from	pls_fornec_mat_fed_sc
	where	cd_fornecedor	= cd_fornecedor_w;

	delete 	FROM pls_fornec_mat_fed_sc_inc
	where	nr_seq_fornecedor = nr_seq_fornecedor_w;

	-- Se não possuir cadastro, faz um Insert
	if (coalesce(nr_seq_fornecedor_w::text, '') = '') then

		insert into	pls_fornec_mat_fed_sc(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				cd_fornecedor,
				nm_fornecedor,
				nm_abreviado,
				ds_endereco,
				ds_bairro,
				cd_localidade,
				cd_cep,
				nr_telefone,
				nr_fax,
				ds_email,
				ds_contato,
				cd_cgc,
				nr_inscricao_estadual,
				ds_especialidade,
				cd_banco,
				cd_agencia,
				cd_conta,
				ie_situacao,
				ds_motivo_situacao,
				dt_situacao,
				dt_inclusao,
				ie_inconsistencia,
				cd_estabelecimento)
		values (	nextval('pls_fornec_mat_fed_sc_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				cd_fornecedor_w,
				nm_fornecedor_w,
				nm_abreviado_w,
				ds_endereco_w,
				ds_bairro_w,
				cd_localidade_w,
				cd_cep_w,
				nr_telefone_w,
				nr_fax_w,
				ds_email_w,
				ds_contato_w,
				cd_cgc_w,
				nr_inscricao_estadual_w,
				ds_especialidade_w,
				cd_banco_w,
				cd_agencia_w,
				cd_conta_w,
				ie_situacao_w,
				ds_motivo_situacao_w,
				dt_situacao_w,
				dt_inclusao_w,
				null,
				cd_estabelecimento_p);

	--Se possuir cadastro, faz Update
	else
		update	pls_fornec_mat_fed_sc
		set	nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			nm_abreviado		= nm_abreviado_w,
			ds_endereco		= ds_endereco_w,
			ds_bairro		= ds_bairro_w,
			cd_localidade		= cd_localidade_w,
			cd_cep			= cd_cep_w,
			nr_telefone		= nr_telefone_w,
			nr_fax			= nr_fax_w,
			ds_email		= ds_email_w,
			ds_contato		= ds_contato_w,
			nr_inscricao_estadual	= nr_inscricao_estadual_w,
			ds_especialidade	= ds_especialidade_w,
			cd_banco		= cd_banco_w,
			cd_agencia		= cd_agencia_w,
			cd_conta		= cd_conta_w,
			ie_situacao		= ie_situacao_w,
			ds_motivo_situacao	= ds_motivo_situacao_w,
			dt_situacao		= dt_situacao_w,
			dt_inclusao		= dt_inclusao_w,
			ie_inconsistencia	 = NULL,
			cd_cgc			= coalesce(trim(both cd_cgc),cd_cgc_w)
		where	cd_fornecedor		= cd_fornecedor_w;
	end if;

	-- Verifica se deve inativar os prestadores fornecedores
	if (ie_parametro_w = 'S') and (coalesce(ie_situacao_w,'I') <> 'A') and (nr_seq_fornecedor_w IS NOT NULL AND nr_seq_fornecedor_w::text <> '') then
		update	pls_prestador
		set	dt_exclusao		= clock_timestamp(),
			ie_situacao		= 'I',
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_seq_fornec_mat_fed 	= nr_seq_fornecedor_w;
	end if;

	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_importar_fornec_unimed ( nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

