-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE proj_atual_pr_previsto_etapa ( nr_seq_etapa_p bigint, nm_usuario_p text ) AS $body$
DECLARE


qt_total_horas_w		double precision := 0;
qt_horas_util_w			double precision := 0;
ie_etapa_fase_w			varchar(1);
pr_previsto_w			double precision := 0;
nr_seq_superior_w		bigint;
qt_horas_prev_fase_w	double precision := 0;
pr_prev_dia_w			double precision;
pr_por_dia_w			double precision;
qt_dias_trab_w			bigint;
dt_inicio_prev_w		proj_cron_etapa.dt_inicio_prev%type;
dt_fim_prev_w			proj_cron_etapa.dt_fim_prev%type;
qt_dias_uteis_w			proj_cron_etapa.qt_dias_uteis%type;
nr_seq_sub_proj_w		proj_cron_etapa.nr_seq_sub_proj%type;
nr_seq_cronograma_w		proj_cron_etapa.nr_seq_cronograma%type;

c01 CURSOR FOR
SELECT	pr_previsto,
		qt_hora_prev
from	proj_cron_etapa
where	nr_seq_superior = nr_seq_etapa_p;

c02 CURSOR FOR
SELECT	nr_sequencia
from	proj_cronograma
where	nr_seq_proj = nr_seq_sub_proj_w
and 	ie_situacao = 'A'
and 	(dt_aprovacao IS NOT NULL AND dt_aprovacao::text <> '');

c03 CURSOR FOR
SELECT	a.nr_sequencia
from	proj_cron_etapa a
where	a.nr_seq_cronograma = nr_seq_cronograma_w
and	not exists (	SELECT	1
			from	proj_cron_etapa b
			where	b.nr_seq_superior = a.nr_sequencia
		)
order by	a.nr_sequencia;

BEGIN
select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
into STRICT	ie_etapa_fase_w
from	proj_cron_etapa
where	nr_seq_superior = nr_seq_etapa_p;

if (ie_etapa_fase_w = 'S') then
	begin
		select	QT_HORA_PREV
		into STRICT	qt_horas_prev_fase_w
		from	proj_cron_etapa
		where	nr_sequencia = nr_seq_etapa_p;

		if (qt_horas_prev_fase_w <> 0) then
			for r_c01 in c01 loop
				-- Cálculo do % previsto das atividades fase, devem considerar o peso das atividade filhas em relação a ela, e não simplesmente a quantidade de atividades filhas
				pr_previsto_w := pr_previsto_w +  ((r_c01.qt_hora_prev / qt_horas_prev_fase_w) * r_c01.pr_previsto);
			end loop;
		end if;
	end;
else
	select	dt_inicio_prev,
			qt_dias_uteis,
			nr_seq_sub_proj
	into STRICT	dt_inicio_prev_w,
			qt_dias_uteis_w,
			nr_seq_sub_proj_w
	from	proj_cron_etapa
	where	nr_sequencia = nr_seq_etapa_p;

	if (nr_seq_sub_proj_w IS NOT NULL AND nr_seq_sub_proj_w::text <> '') then
		for r_c02 in c02 loop
			nr_seq_cronograma_w := r_c02.nr_sequencia;
			for r_c03 in c03 loop
				CALL proj_atual_pr_previsto_etapa(r_c03.nr_sequencia, nm_usuario_p);
			end loop;
		end loop;
		
		select obter_proj_atual_pr_previsto(nr_seq_sub_proj_w)
		into STRICT pr_previsto_w
		;
	else
		pr_por_dia_w := dividir(100, qt_dias_uteis_w);
		qt_dias_trab_w := obter_dias_uteis_periodo(coalesce(dt_inicio_prev_w, clock_timestamp()), clock_timestamp(), 1);
		pr_prev_dia_w := (pr_por_dia_w * coalesce(qt_dias_trab_w,1));

		pr_previsto_w := pr_prev_dia_w;
	end if;
end if;

if (pr_previsto_w < 0) then
	pr_previsto_w := 0;
elsif (pr_previsto_w > 100) then
	pr_previsto_w := 100;
end if;

select 	dt_fim_prev
into STRICT 	dt_fim_prev_w
from 	proj_cron_etapa
where 	nr_sequencia = nr_seq_etapa_p;

if (clock_timestamp() > dt_fim_prev_w) then
	pr_previsto_w := 100;
end if;

update	proj_cron_etapa
set	pr_previsto = pr_previsto_w,
	nm_usuario = nm_usuario_p,
	dt_atualizacao = clock_timestamp()
where	nr_sequencia = nr_seq_etapa_p;

select	nr_seq_superior
into STRICT	nr_seq_superior_w
from	proj_cron_etapa
where	nr_sequencia = nr_seq_etapa_p;

if (nr_seq_superior_w IS NOT NULL AND nr_seq_superior_w::text <> '') then
	CALL proj_atual_pr_previsto_etapa(nr_seq_superior_w, nm_usuario_p);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE proj_atual_pr_previsto_etapa ( nr_seq_etapa_p bigint, nm_usuario_p text ) FROM PUBLIC;

