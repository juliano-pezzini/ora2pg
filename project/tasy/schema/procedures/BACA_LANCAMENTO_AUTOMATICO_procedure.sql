-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baca_lancamento_automatico (dt_mes_param_p timestamp) AS $body$
DECLARE

 
/* 
Se evento for diferente de Evolução Médica (10) 
nr_sequencia_p - sequência do ProPaci; 
senão 
nr_sequencia_p - sequência da Evolução; 
*/
 
nr_atendimento_w		bigint;
nr_seq_interno_w		bigint;

ds_erro_w			varchar(255);
cd_estabelecimento_w  	smallint;
cd_convenio_w			integer;
cd_categoria_w		varchar(10);
cd_Local_Estoque_w		smallint;
ie_tipo_atendimento_w	smallint;
ie_Medico_atendimento_w	varchar(1);
ie_Local_Estoque_w		varchar(1);
cd_cgc_w			varchar(14);
nr_doc_convenio_w		varchar(20);
cd_procedimento_w     	bigint		:= 0;
ie_origem_proced_w		bigint		:= 0;
cd_material_w   		integer		:= 0;
nr_sequencia_w     	bigint		:= 0;
nr_seq_regra_w     	bigint		:= 0;
cd_unid_medida_w		varchar(30);
cd_medico_executor_w		varchar(10);
cd_medico_Resp_w		varchar(10);
cd_setor_regra_w		integer	:= 0;
cd_setor_atendimento_w	integer	:= 0;
qt_lancamento_w		double precision	:= 0;
dt_entrada_unidade_w		timestamp;
qt_registro_w			bigint	:= 0;
qt_passagem_setor_w		bigint	:= 0;
nr_atend_original_w		bigint;

nr_seq_propaci_w		integer;
cd_proc_propaci_w		bigint;
dt_proc_propaci_w		timestamp;
ie_origem_propaci_w		bigint;
cd_medico_propaci_w		varchar(10);
cd_area_proc_w		bigint;
cd_especial_proc_w		bigint;
cd_grupo_proc_w		bigint;
tx_proc_propaci_w		double precision	:= 100;
dt_execucao_w			timestamp;
dt_alta_w			timestamp;
qt_porte_anestesico_w	smallint;
nr_seq_atepacu_w		bigint;
cd_edicao_amb_w		integer;
qt_proc_alta_w		integer;
qt_mat_alta_w			integer;
qt_procedimento_w		double precision;
qt_reg_w			bigint;
ie_tipo_convenio_w		smallint;
ie_funcao_medico_w		smallint;
	
C03 CURSOR FOR 
SELECT nr_atendimento, 
	 nr_seq_interno, 
	 cd_setor_atendimento, 
	 dt_entrada_unidade 
from atend_paciente_unidade 
where dt_entrada_unidade between trunc(dt_mes_param_p,'month') and last_day(dt_mes_param_p) 
 and cd_setor_atendimento = 14 
 and nr_atendimento = 1151636 
order by 1;

C01 CURSOR FOR 
SELECT a.nr_sequencia, 
	a.cd_setor_atendimento 
from 	regra_Lanc_Automatico a 
where	a.cd_estabelecimento				= cd_estabelecimento_w 
and	coalesce(a.cd_convenio, cd_convenio_w)		= cd_convenio_w 
and (coalesce(a.ie_tipo_atendimento,ie_tipo_atendimento_w)= ie_tipo_atendimento_w or	coalesce(ie_tipo_atendimento_w::text, '') = '') 
and (coalesce(a.nr_seq_evento, 40)	= 40 or coalesce(40::text, '') = '') 
and (coalesce(a.cd_medico, cd_medico_executor_w)	= cd_medico_executor_w or coalesce(cd_medico_executor_w::text, '') = '') 
and (coalesce(a.cd_procedimento,cd_proc_propaci_w)	= cd_proc_propaci_w or coalesce(cd_proc_propaci_w::text, '') = '') 
and (coalesce(a.cd_area_procedimento,cd_area_proc_w)= cd_area_proc_w 	or coalesce(cd_area_proc_w::text, '') = '') 
and (coalesce(a.cd_especialidade_proc,cd_especial_proc_w) = cd_especial_proc_w or coalesce(cd_especial_proc_w::text, '') = '') 
and (coalesce(a.cd_grupo_proc,cd_grupo_proc_w)	= cd_grupo_proc_w or coalesce(cd_grupo_proc_w::text, '') = '') 
and	((coalesce(a.cd_edicao_amb,cd_edicao_amb_w)	= cd_edicao_amb_w) or (coalesce(cd_edicao_amb_w::text, '') = '')) 
and	((coalesce(a.ie_tipo_convenio,ie_tipo_convenio_w)	= ie_tipo_convenio_w) or (coalesce(ie_tipo_convenio_w::text, '') = '')) 
and	qt_reg_w					= 0 
order by 
	coalesce(a.cd_medico,0), 
	coalesce(a.cd_setor_atendimento,0), 
	coalesce(a.ie_tipo_atendimento,0), 
	coalesce(a.cd_convenio,0), 
	coalesce(a.ie_tipo_convenio,0), 
	coalesce(a.cd_edicao_amb,0), 
	coalesce(a.cd_procedimento,0), 
	coalesce(a.cd_grupo_proc,0), 
	coalesce(a.cd_especialidade_proc,0), 
	coalesce(a.cd_area_procedimento,0);

C02 CURSOR FOR 
	SELECT a.cd_procedimento, 
		a.ie_origem_proced, 
		a.cd_material, 
		substr(obter_dados_material_estab(b.cd_material,cd_estabelecimento_w,'UMS'),1,30) cd_unidade_medida_consumo, 
		CASE WHEN a.ie_quantidade='I' THEN  coalesce(qt_lancamento,1)  ELSE coalesce(qt_lancamento,1) * qt_procedimento_w END , 
		coalesce(ie_medico_atendimento,'N'), 
		coalesce(ie_local_estoque,'N'), 
		coalesce(a.ie_funcao_medico,0) 
	from 	material b, regra_Lanc_Aut_pac a 
	where	a.nr_seq_regra 	= nr_seq_regra_w 
	and	nr_seq_regra_w 	<> 0 
	and	b.ie_situacao 	= 'A' 
	and	(a.cd_material IS NOT NULL AND a.cd_material::text <> '') 
	and 	coalesce(a.ie_adic_orcamento,'N') = 'N' 
	and	a.cd_material 	= b.cd_material 
	and	((coalesce(ie_retorno,'N') = 'S') or (coalesce(nr_atend_original_w::text, '') = '')) 
	and	qt_reg_w		= 0 
	
union
 
	SELECT	cd_procedimento, 
		ie_origem_proced, 
		cd_material, 
		'XX', 
		CASE WHEN ie_quantidade='I' THEN  coalesce(qt_lancamento,1)  ELSE coalesce(qt_lancamento,1) * qt_procedimento_w END , 
		coalesce(ie_medico_atendimento,'N'), 
		coalesce(ie_local_estoque,'N'), 
		coalesce(ie_funcao_medico,0) 
	from 	regra_Lanc_Aut_pac 
	where	nr_seq_regra 	= nr_seq_regra_w 
	and	nr_seq_regra_w <> 0 
	and	((coalesce(ie_retorno,'N') = 'S') or (coalesce(nr_atend_original_w::text, '') = '')) 
	and	(cd_procedimento IS NOT NULL AND cd_procedimento::text <> '') 
	and 	coalesce(ie_adic_orcamento,'N') = 'N' 
	and	qt_reg_w		= 0 
	and	(ie_origem_proced IS NOT NULL AND ie_origem_proced::text <> '');


BEGIN 
 
open C03;
loop 
	fetch C03 into nr_atendimento_w, 
			  nr_seq_interno_w, 
			  cd_setor_atendimento_w, 
			  dt_entrada_unidade_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
 
	select count(*) 
	into STRICT qt_reg_w 
	from procedimento_paciente 
	where nr_atendimento = nr_atendimento_w 
	 and cd_setor_atendimento = '14' 
	 and cd_procedimento = 99910031;
 
	if (qt_reg_w = 0) then 
		nr_seq_propaci_w		:= 0;
		nr_seq_regra_w		:= 0;
 
		dt_execucao_w := null;
 
		begin 
		select 	 
			a.ie_tipo_atendimento, 
			a.nr_atend_original, 
			a.cd_estabelecimento, 
			b.cd_cgc, 
			a.cd_setor_atendimento, 
			a.cd_medico_resp, 
			a.cd_convenio, 
			a.cd_categoria, 
			a.dt_entrada_unidade, 
			a.nr_doc_convenio, 
			a.dt_alta, 
			a.nr_seq_atepacu, 
			a.ie_tipo_convenio 
		into STRICT	ie_tipo_atendimento_w, 
			nr_atend_original_w, 
			cd_estabelecimento_w, 
			cd_cgc_w, 
			cd_setor_atendimento_w, 
			cd_medico_Resp_w, 
			cd_convenio_w, 
			cd_categoria_w, 
			dt_entrada_unidade_w, 
			nr_doc_convenio_w, 
			dt_alta_w, 
			nr_seq_atepacu_w, 
			ie_tipo_convenio_w 
		from 	estabelecimento b, 
			atendimento_paciente_v a 
		where a.cd_estabelecimento	= b.cd_estabelecimento 
		 and a.nr_atendimento		= nr_atendimento_w;
		exception 
			when others then 
				cd_estabelecimento_w := 9999;
		end;
 
		dt_execucao_w := coalesce(dt_execucao_w, dt_entrada_unidade_w); /* Elemar 17/09/2002 - Gerar lançamento na entrada do paciente */
 
		select	max(cd_edicao_amb) 
		into STRICT	cd_edicao_amb_w 
		from	convenio_amb 
		where (cd_estabelecimento	= cd_estabelecimento_w) 
		 and (cd_convenio		= cd_convenio_w) 
		 and (cd_categoria		= cd_categoria_w) 
		 and (coalesce(ie_situacao,'A')	= 'A') 
		 and	(dt_inicio_vigencia	= 
			(SELECT max(dt_inicio_vigencia) 
			from	convenio_amb a 
			where (a.cd_estabelecimento	= cd_estabelecimento_w) 
			and (a.cd_convenio		= cd_convenio_w) 
			and (a.cd_categoria		= cd_categoria_w) 
			and (coalesce(a.ie_situacao,'A')	= 'A') 
			and (a.dt_inicio_vigencia	<= dt_execucao_w)));
 
		OPEN C01;
		LOOP 
		FETCH C01 into 
			nr_sequencia_w, 
			cd_setor_regra_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
			BEGIN 
			if (cd_setor_regra_w IS NOT NULL AND cd_setor_regra_w::text <> '') then 
				begin 
				if (cd_setor_regra_w = cd_setor_atendimento_w) then 
					nr_seq_regra_w	:= nr_sequencia_w;
				end if;
				end;
			else	 
				nr_seq_regra_w	:= nr_sequencia_w;
			end if;
			END;
		END LOOP;
		CLOSE C01;
 
		OPEN C02;
		LOOP 
			FETCH C02 into 
				cd_procedimento_w, 
				ie_origem_proced_w, 
				cd_material_w, 
				cd_unid_medida_w, 
				qt_lancamento_w, 
				ie_Medico_atendimento_w, 
				ie_Local_Estoque_w, 
				ie_funcao_medico_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
			BEGIN 
			cd_medico_executor_w		:= '';
			if (ie_medico_atendimento_w = 'S') then 
				begin 
				if (cd_medico_propaci_w IS NOT NULL AND cd_medico_propaci_w::text <> '') and (length(cd_medico_propaci_w) > 0) then 
					cd_medico_executor_w  := cd_medico_propaci_w;
				else	 
					cd_medico_executor_w  := cd_medico_resp_w;
				end if;
				end;
			end if;
 
 
			/* Verifica se procedimento de alta ja foi executado  Bola 08072002 */
 
			qt_proc_alta_w	:= 0;
 
			if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (qt_proc_alta_w	= 0) 		then 
				begin 
				RAISE NOTICE '%', cd_procedimento_w;
				select nextval('procedimento_paciente_seq') 
				into STRICT nr_sequencia_w;
 
				if (nr_seq_propaci_w = 0) then 
					dt_proc_propaci_w := null;
				end if;
 
				insert into procedimento_paciente( 
				NR_SEQUENCIA   		,        
				NR_ATENDIMENTO     ,    
				DT_ENTRADA_UNIDADE   ,    
				CD_PROCEDIMENTO     ,    
				DT_CONTA        ,    
				DT_PROCEDIMENTO     ,    
				QT_PROCEDIMENTO     ,    
				DT_ATUALIZACAO     ,    
				NM_USUARIO       ,    
				CD_MEDICO        ,    
				CD_CONVENIO       ,    
				CD_CATEGORIA      ,    
				TX_MEDICO        ,    
				TX_ANESTESIA      ,    
				TX_PROCEDIMENTO     ,    
				CD_ACAO         ,    
				CD_MEDICO_EXECUTOR   ,    
				CD_SETOR_ATENDIMENTO  ,    
				IE_ORIGEM_PROCED    ,    
				IE_VALOR_INFORMADO   ,    
				NM_USUARIO_ORIGINAL   ,    
				CD_SETOR_RECEITA		, 
				CD_SITUACAO_GLOSA		, 
				IE_FUNCAO_MEDICO		, 
				CD_CGC_PRESTADOR		, 
				NR_DOC_CONVENIO		, 
				NR_SEQ_PROC_PRINC		, 
				QT_PORTE_ANESTESICO	, 
				CD_PROCEDIMENTO_PRINC	, 
				DT_PROCEDIMENTO_PRINC, 
				nr_seq_atepacu, 
				ie_auditoria, 
				ds_observacao, 
				vl_procedimento, 
				vl_medico, 
				vl_anestesista, 
				vl_auxiliares, 
				vl_materiais, 
				vl_custo_operacional) 
				values ( 
				nr_sequencia_w 		,        
				nr_atendimento_w    ,    
				dt_entrada_unidade_w  ,    
				cd_procedimento_w    ,    
				coalesce(dt_execucao_w, coalesce(dt_alta_w,clock_timestamp())),    
				coalesce(dt_execucao_w, coalesce(dt_alta_w,clock_timestamp())),    
				qt_lancamento_w,    
				clock_timestamp()         ,    
				'Baca1908'      ,    
				cd_medico_executor_w  ,    
				cd_convenio_w      ,    
				cd_categoria_w     ,    
				100				, 
				100				, 
				tx_proc_propaci_w		, 
				'1'				,    
				cd_medico_executor_w  ,    
				cd_setor_atendimento_w ,    
				ie_origem_proced_w,    
				'N'				,    
				'Baca1908'      ,    
				cd_setor_atendimento_w , 
				0 				, 
				ie_funcao_medico_w		, 
				cd_cgc_w			, 
				nr_doc_convenio_w		, 
				null, 
				CASE WHEN nr_seq_propaci_w=0 THEN  null  ELSE qt_porte_anestesico_w END , 
				CASE WHEN nr_seq_propaci_w=0 THEN  null  ELSE cd_proc_propaci_w END , 
				dt_proc_propaci_w, 
				nr_seq_atepacu_w, 
				'N', 
				'LA Regra: ' || nr_seq_regra_w || ' Evento: ' || 40, 
				0,0,0,0,0,0);
				end;
			end if;
		END;
	END LOOP;
	CLOSE C02;
	end if;
end loop;
close C03;
commit;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baca_lancamento_automatico (dt_mes_param_p timestamp) FROM PUBLIC;

