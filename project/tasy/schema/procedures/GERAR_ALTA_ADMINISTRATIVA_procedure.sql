-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_alta_administrativa ( nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE



nr_seq_atendimento_w			bigint;
nr_seq_atecaco_w				bigint;
nr_seq_atepacu_w				bigint;
cd_unidade_basica_w			varchar(10);
cd_unidade_compl_w			varchar(10);
cd_setor_atendimento_w			integer;
dt_entrada_unidade_w			timestamp;
cd_classif_setor_w            			varchar(2);
cd_motivo_alta_w				smallint;
cd_convenio_w				integer;
cd_categoria_w				varchar(10);
ie_tipo_convenio_w				smallint;
ie_tipo_conv_w				smallint;
ie_tipo_conv_ww				smallint;
ie_tipo_guia_w				varchar(2);
ie_tipo_atendimento_w			smallint;
ie_tipo_atend_tiss_w			varchar(2);
ie_clinica_w				integer;
cd_convenio_atend_w			integer;
cd_categoria_atend_w			varchar(10);
ie_lib_desfecho_w			varchar(1);

ie_tipo_atend_w				smallint;
cd_estabelecimento_w			integer;
cd_estab_usuario_w			integer;
nr_doc_convenio_w			varchar(20);
ie_atualiza_guia_alta_adm_w		varchar(1);
ie_atualiza_senha_alta_adm_w		varchar(1);
ie_copia_evolucao_alta_pa_w		varchar(1);
cd_procedencia_w			bigint;
ie_copia_anamn_alta_pa_w		varchar(10);
ie_copiar_passagem_w			varchar(10)	:= 'S';
ie_tranf_nasc_pa_w		        varchar(10);
ie_copia_disp_alta_pa_w			varchar(10);
ds_erro_w				varchar(255);
ie_gerar_senha_w			varchar(1);
ie_gerar_isolamento_adm_w		varchar(1);
dt_registro_w				timestamp;
dt_liberacao_w				timestamp;
nr_seq_precaucao_w			bigint;
nr_seq_motivo_isol_w			bigint;
cd_medico_solic_w			varchar(10);
dt_inicio_w				timestamp;
ds_observacao_w				varchar(2000);
ie_isolado_w				varchar(1);
ie_lib_prec_gerar_isolam_w		varchar(10);
nr_seq_movito_iso_w			bigint;
ds_motivo_w				varchar(255);
ie_tipo_isolamento_w			varchar(10);
nr_seq_cih_tipo_isolamento_w  		bigint;
ie_trans_ped_parec_pend_pa_w		varchar(10);
dt_alta_w				timestamp;
qt_dia_novo_atend_w			bigint;
hr_novo_atend_w				varchar(20);
dt_entrada_novo_atend_w			timestamp;

ie_transf_gastos_atend_sus_w		varchar(10)	:= 'N';
ie_origem_proced_w			bigint;
cd_procedimento_w			bigint;
nr_sequencia_w				bigint;
ie_classificacao_w			varchar(5);
cd_cgc_prestador_w			varchar(14);
cd_medico_executor_w			varchar(10);
dt_procedimento_w			timestamp;
dt_atendimento_w			timestamp;
cd_setor_atendimento_ww			integer;
ie_gera_proc_w				varchar(10)	:= 'S';
ie_proc_incons_w			varchar(10);
ie_transf_pronto_socorro_w		varchar(10);
ie_cons_proc_tipo_atend_w		varchar(10);
ie_manter_setor_original_w		varchar(10);
ie_proc_excl_ambul_w			varchar(10);
nr_interno_conta_nova_w			bigint;
nr_interno_conta_ant_w			bigint;
qt_proc_bpa_w				bigint;
ie_gerar_conta_aih_w			varchar(10)	:= 'N';
ds_retorno_w				varchar(5);
ie_gerar_pagador_w			varchar(3);
ie_desfecho_pa_w			varchar(1)	:= 'N';
qt_regra_espec_clinica_w		bigint;
ie_atualiza_nr_gestante_w		varchar(1);
nr_gestante_pre_natal_w			bigint;
ie_atualiza_dieta_lib_w			varchar(1);
qt_mat_w				bigint := 0;
qt_proc_w				bigint := 0;
ie_manter_guia_original_w		varchar(1);
ie_alt_adm_nao_finalizada_w		varchar(1);
nr_seq_atend_precaucao_w		bigint;
dt_final_precaucao_w			timestamp;

cd_convenio_ww				integer;
cd_categoria_ww				varchar(10);
cd_plano_convenio_ww			varchar(10);
cd_pessoa_fisica_w			varchar(10);
nr_acompanhante_w			integer;
qt_dieta_acomp_w			integer;
ie_lib_dieta_w				varchar(10);
nr_seq_regra_acomp_w			integer;

C01 CURSOR FOR
	SELECT	a.cd_convenio,
		a.cd_categoria,
		b.ie_tipo_convenio,
		a.ie_tipo_guia,
		a.ie_tipo_atendimento,
		a.ie_tipo_atend_tiss,
		a.ie_clinica
	FROM motivo_alta_regra_conv a
LEFT OUTER JOIN convenio b ON (a.cd_convenio = b.cd_convenio)
WHERE a.cd_motivo_alta	= cd_motivo_alta_w;
	
c02 CURSOR FOR
	SELECT	dt_registro,
		dt_liberacao,
		nr_seq_precaucao,
		nr_seq_motivo_isol,
		cd_medico_solic,
		dt_inicio,
		ds_observacao,
		dt_final_precaucao_w
	from 	atendimento_precaucao
	where	nr_atendimento = nr_atendimento_p
	and	((ie_alt_adm_nao_finalizada_w = 'N') or (coalesce(dt_final_precaucao::text, '') = ''));
	
c03 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_procedimento,
		a.ie_origem_proced,
		b.ie_classificacao,
		a.cd_cgc_prestador,
		a.cd_medico_executor,
		a.dt_procedimento,
		a.cd_setor_atendimento
	from	procedimento b,
		procedimento_paciente a,
		conta_paciente c
	where	a.nr_atendimento	= nr_atendimento_p
	and	a.nr_interno_conta	= c.nr_interno_conta
	and	a.cd_procedimento	= b.cd_procedimento
	and	a.ie_origem_proced	= b.ie_origem_proced
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	(((ie_proc_excl_ambul_w = 'S') and not exists (	SELECT	1
								from	sus_regra_proc_troc_atend x
								where	x.cd_procedimento 	= a.cd_procedimento
								and	x.ie_origem_proced 	= a.ie_origem_proced
								and	x.ie_situacao		= 'A')) or (ie_proc_excl_ambul_w = 'N'))
	order by a.dt_procedimento;

c04 CURSOR FOR
	SELECT	m.nr_sequencia,
		cd_setor_atendimento,
		m.dt_atendimento
	from	material_atend_paciente m,
		conta_paciente c
	where	m.nr_atendimento		= nr_atendimento_p
	and	m.nr_interno_conta		= c.nr_interno_conta;	

	
C05 CURSOR FOR
	SELECT 	a.*
	from 	diagnostico_doenca a
	where 	a.nr_atendimento = nr_atendimento_p
	and	a.dt_diagnostico = (	SELECT  max(b.dt_diagnostico)
					from	diagnostico_doenca b
					where	b.nr_atendimento = nr_atendimento_p
					and	a.nr_atendimento = b.nr_atendimento
					and	coalesce(b.dt_inativacao::text, '') = '');
	

Vet05 C05%RowType;	
	

BEGIN


nr_seq_atepacu_w 	:= 0;
nr_seq_atendimento_w 	:= 0;
nr_seq_atecaco_w 	:= 0;
begin
cd_estab_usuario_w := coalesce(wheb_usuario_pck.get_cd_estabelecimento,0);
exception
when others then
	cd_estab_usuario_w := 0;
end;

ie_proc_excl_ambul_w			:= coalesce(obter_valor_param_usuario(1125,38,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_transf_pronto_socorro_w		:= coalesce(obter_valor_param_usuario(916,298,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_cons_proc_tipo_atend_w		:= coalesce(obter_valor_param_usuario(916,437,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_manter_setor_original_w		:= coalesce(obter_valor_param_usuario(916,325,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_transf_gastos_atend_sus_w		:= coalesce(obter_valor_param_usuario(935,176,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_gerar_conta_aih_w			:= coalesce(obter_valor_param_usuario(935,183,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_gerar_pagador_w			:= coalesce(obter_valor_param_usuario(916,394,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w),'N');
ie_manter_guia_original_w		:= coalesce(obter_valor_param_usuario(916,1133,obter_perfil_ativo,nm_usuario_p,cd_estab_usuario_w),'S');

ie_atualiza_nr_gestante_w := Obter_param_Usuario(916, 504, obter_perfil_ativo, nm_usuario_p, cd_estab_usuario_w, ie_atualiza_nr_gestante_w);

insert into log_mov(nm_usuario,
	dt_atualizacao, 
	cd_log, 
	ds_log) 
values (nm_usuario_p, 
	clock_timestamp(), 
	20124, 
	'Inicio Gerar_Alta_Administrativa Atendimento: '|| nr_atendimento_p);

select	max(cd_motivo_alta),
	max(dt_alta),
	max(nr_gestante_pre_natal)
into STRICT	cd_motivo_alta_w,
	dt_alta_w,
	nr_gestante_pre_natal_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_p;

open C01;
loop
fetch C01 into
	cd_convenio_w,
	cd_categoria_w,
	ie_tipo_convenio_w,
	ie_tipo_guia_w,		
	ie_tipo_atendimento_w,
	ie_tipo_atend_tiss_w,
	ie_clinica_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	cd_convenio_w		:= cd_convenio_w;
	cd_categoria_w		:= cd_categoria_w;
	ie_tipo_convenio_w	:= ie_tipo_convenio_w;
	ie_tipo_guia_w		:= ie_tipo_guia_w;
end loop;
close C01;

insert into log_mov(nm_usuario,
	dt_atualizacao, 
	cd_log, 
	ds_log) 
values (nm_usuario_p, 
	clock_timestamp(), 
	20124, 
	'Inicio Apos cursor C01 : ' || nr_atendimento_p || obter_desc_expressao(286193) || ' ' || cd_convenio_w);

select	coalesce(qt_dia_adicional_atend,0),
	to_char(dt_hora_padrao,'hh24:mi:ss')
into STRICT	qt_dia_novo_atend_w,
	hr_novo_atend_w	
from	motivo_alta
where	cd_motivo_alta = cd_motivo_alta_w;

if (qt_dia_novo_atend_w > 0) and (hr_novo_atend_w IS NOT NULL AND hr_novo_atend_w::text <> '') then
	dt_entrada_novo_atend_w := ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_alta_w + qt_dia_novo_atend_w, coalesce(hr_novo_atend_w, '00:00'));
else
	dt_entrada_novo_atend_w := clock_timestamp();	
end if;
/* Gerando o Atendimento */

begin
select 	nextval('atendimento_paciente_seq')
into STRICT	nr_seq_atendimento_w
;


cd_procedencia_w	:= null;
if (obter_funcao_ativa	= 935) or (obter_funcao_ativa	= 281) then
	ie_desfecho_pa_w	:= 'S';
	cd_procedencia_w	:= obter_valor_param_usuario(935, 115, Obter_perfil_ativo, nm_usuario_p, cd_estab_usuario_w);
	if (coalesce(cd_procedencia_w,0)	= 0) then
		cd_procedencia_w	:= null;
	end if;
end if;

select	coalesce(max(obter_valor_param_usuario(935,148,obter_perfil_ativo, nm_usuario_p, cd_estab_usuario_w)),'N')
into STRICT	ie_gerar_senha_w
;

select coalesce(max(ie_liberar_desfecho),'N')
into STRICT   ie_lib_desfecho_w
from   parametro_medico
where  cd_estabelecimento = cd_estab_usuario_w;

select	count(*)
into STRICT	qt_regra_espec_clinica_w
from	regra_espec_clinica
where	cd_especialidade = (SELECT max(x.cd_especialidade)
				from	atendimento_alta x
				where	x.nr_atendimento = nr_atendimento_p
				and     ((ie_tipo_orientacao <> 'P')
					or (ie_lib_desfecho_w = 'N')
					or ((dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') and coalesce(dt_inativacao::text, '') = '')));
				
if (qt_regra_espec_clinica_w > 0) then
	select	max(ie_clinica)
	into STRICT	ie_clinica_w
	from	regra_espec_clinica
	where	cd_especialidade = (SELECT max(x.cd_especialidade)
				from	atendimento_alta x
				where	x.nr_atendimento = nr_atendimento_p
				and     ((ie_tipo_orientacao <> 'P')
					or (ie_lib_desfecho_w = 'N')
					or ((dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') and coalesce(dt_inativacao::text, '') = '')));
end if;

insert	into atendimento_paciente(
	nr_atendimento,
	cd_pessoa_fisica,
	cd_estabelecimento,
	cd_procedencia,
	dt_entrada,
	ie_tipo_atendimento,
	dt_atualizacao,
	nm_usuario,
	cd_medico_resp,
	cd_motivo_alta,
	ds_sintoma_paciente,
	ds_observacao,
	dt_alta,
	ie_clinica,
	nm_usuario_atend,
	ie_responsavel,
	dt_fim_conta,
	ie_fim_conta,
	nr_cat,
	ds_causa_externa,
	cd_cgc_seguradora,
	nr_bilhete,
	nr_serie_bilhete,
	ie_carater_inter_sus,
	ie_vinculo_sus,
	ie_tipo_convenio,
	ie_tipo_atend_bpa,
	ie_grupo_atend_bpa,
	cd_medico_atendimento,
	dt_alta_interno,
	nr_seq_unid_atual,
	nr_seq_unid_int,
	nr_atend_original,
	qt_dia_longa_perm,
	dt_inicio_atendimento,
	ie_permite_visita,
	ie_status_atendimento,
	dt_previsto_alta,
	nm_usuario_alta,
	cd_pessoa_responsavel,
	dt_atend_medico,
	ie_boletim_inform,
	ie_permite_visita_rel,
	nr_atend_alta,
	ie_tipo_atend_tiss,
	nr_seq_indicacao,
	nr_seq_tipo_acidente,
	nr_seq_queixa,
	ds_senha,
	nr_atend_origem_pa,
	nr_gestante_pre_natal)
SELECT
	nr_seq_atendimento_w,
	b.cd_pessoa_fisica,
	b.cd_estabelecimento,
	coalesce(cd_procedencia_w,b.cd_procedencia),
	dt_entrada_novo_atend_w,--sysdate,
	coalesce(ie_tipo_atendimento_w,b.ie_tipo_atendimento),

	clock_timestamp(),
	nm_usuario_p,
	b.cd_medico_resp,
	null,
	b.ds_sintoma_paciente,
	b.ds_observacao,
	null,
	coalesce(ie_clinica_w,b.ie_clinica),
	nm_usuario_p,
	b.ie_responsavel,
	null,
	'A',
	b.nr_cat,
	b.ds_causa_externa,
	b.cd_cgc_seguradora,
	b.nr_bilhete,
	b.nr_serie_bilhete,
	b.ie_carater_inter_sus,
	b.ie_vinculo_sus,
	coalesce(ie_tipo_convenio_w,b.ie_tipo_convenio),
	b.ie_tipo_atend_bpa,
	b.ie_grupo_atend_bpa,
	b.cd_medico_atendimento,
	null,
	1,
	1,
	null,
	null,
	null,
	b.ie_permite_visita,
	'E',
	null,
	null,
	b.cd_pessoa_responsavel,
	null,
	b.ie_boletim_inform,
	b.ie_permite_visita_rel,
	nr_atendimento_p,
	coalesce(ie_tipo_atend_tiss_w,ie_tipo_atend_tiss),
	b.nr_seq_indicacao,
	b.nr_seq_tipo_acidente,
	b.nr_seq_queixa,
	CASE WHEN ie_gerar_senha_w='S' THEN substr(Gerar_Senha_Atendimento(coalesce(ie_tipo_atendimento_w,b.IE_TIPO_ATENDIMENTO),0,b.cd_pessoa_fisica, ''),1,20) WHEN ie_gerar_senha_w='N' THEN '' END ,
	CASE WHEN ie_desfecho_pa_w='S' THEN nr_atendimento_p WHEN ie_desfecho_pa_w='N' THEN null END ,
	CASE WHEN ie_atualiza_nr_gestante_w='S' THEN  nr_gestante_pre_natal_w  ELSE null END
from	atendimento_paciente b
where	nr_atendimento	= nr_atendimento_p;
exception
	when others then
	nr_seq_atendimento_w := 0;
end;

begin

	if (ie_gerar_pagador_w = 'S') then
	
		ds_retorno_w := gerar_atend_pagador(nr_seq_atendimento_w, coalesce(obter_valor_param_usuario(916, 149, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento),0), nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, obter_perfil_ativo, ds_retorno_w);
	end if;
	
	exception
		when others then
		ds_retorno_w := '';
end;

if (nr_seq_atendimento_w > 0) then
	/* Gerando o Atend Categoria Convenio */

	select 	nextval('atend_categoria_convenio_seq')
	into STRICT	nr_seq_atecaco_w
	;

	if (cd_convenio_w > 0) then

		insert	into atend_categoria_convenio(
			nr_seq_interno,
			nr_atendimento,
			cd_convenio,
			cd_categoria,
			dt_inicio_vigencia,
			dt_final_vigencia,
			dt_atualizacao,
			nm_usuario,
			ie_tipo_guia)
		values (nr_seq_atecaco_w,
			nr_seq_atendimento_w,
			cd_convenio_w,
			cd_categoria_w,
			dt_entrada_novo_atend_w,--sysdate,
			null,
			clock_timestamp(),
			nm_usuario_p,
			ie_tipo_guia_w);
			
			
	else
		begin

		/* Rafael em 15/1/2008 OS78958 -> Validar tipos de convenio atendimento x convenio */

		select	obter_tipo_convenio(cd_convenio)
		into STRICT	ie_tipo_conv_w
		from	atend_categoria_convenio b
		where	b.nr_atendimento	= nr_atendimento_p
		and	b.nr_seq_interno	=	(
							SELECT	max(x.nr_seq_interno)
							from	atend_categoria_convenio x
							where	x.nr_atendimento = nr_atendimento_p
							);

		select	coalesce(max(ie_tipo_convenio),-1)
		into STRICT	ie_tipo_conv_ww
		from	atendimento_paciente
		where	nr_atendimento = nr_seq_atendimento_w;

		if (ie_tipo_conv_w <> ie_tipo_conv_ww) then
			update	atendimento_paciente
			set	ie_tipo_convenio	= ie_tipo_conv_w
			where	nr_atendimento		= nr_seq_atendimento_w;
		end if;
		/* Fim Rafael em 15/1/2008 OS78958 -> Validar tipos de convenio atendimento x convenio */

		
		select  max(ie_tipo_atendimento),
			max(cd_estabelecimento)
		into STRICT	ie_tipo_atend_w,
			cd_estabelecimento_w
		from	atendimento_paciente
		where	nr_atendimento = nr_seq_atendimento_w;
		


		select 	max(ie_atualiza_doc_conv_alta_adm),
			coalesce(max(ie_atualiza_senha_alta_adm),'S'),
			coalesce(max(ie_gerar_isolamento_adm),'N'),
			coalesce(max(ie_Atualiza_dieta_lib),'N'),
			coalesce(max(ie_alt_adm_nao_finalizada), 'N')
		into STRICT	ie_atualiza_guia_alta_adm_w,
			ie_atualiza_senha_alta_adm_w,
			ie_gerar_isolamento_adm_w,
			ie_atualiza_dieta_lib_w,
			ie_alt_adm_nao_finalizada_w
		from	parametro_atendimento
		where	cd_estabelecimento = cd_estabelecimento_w;	


		select	max(ie_copia_evolucao_alta_pa),
			max(ie_copia_anamn_alta_pa),
			max(IE_TRANSF_NASC_PA),
			max(ie_copia_disp_alta_pa),
			max(IE_TRANS_PED_PAREC_PEND_PA)
		into STRICT	ie_copia_evolucao_alta_pa_w,
			ie_copia_anamn_alta_pa_w,
			ie_tranf_nasc_pa_w,
			ie_copia_disp_alta_pa_w,
			IE_TRANS_PED_PAREC_PEND_PA_w
		from	parametro_medico
		where	cd_estabelecimento = cd_estabelecimento_w;
		
		select  b.cd_convenio,
			b.cd_categoria,
			b.cd_plano_convenio
		into STRICT 	cd_convenio_ww,
			cd_categoria_ww,
			cd_plano_convenio_ww
		from atend_categoria_convenio b
		where b.nr_atendimento = nr_atendimento_p
		and b.nr_seq_interno = (SELECT max(x.nr_seq_interno)
			from atend_categoria_convenio x
			where x.nr_atendimento = nr_atendimento_p);
			
		select cd_pessoa_fisica
		into STRICT cd_pessoa_fisica_w
		from atendimento_paciente
		where nr_atendimento = nr_atendimento_p;
		
		SELECT * FROM Obter_Dados_Dieta_Categ_Conv(cd_convenio_ww, cd_categoria_ww, cd_plano_convenio_ww, cd_pessoa_fisica_w, nr_acompanhante_w, qt_dieta_acomp_w, ie_lib_dieta_w, nr_seq_regra_acomp_w, nr_atendimento_p) INTO STRICT nr_acompanhante_w, qt_dieta_acomp_w, ie_lib_dieta_w, nr_seq_regra_acomp_w;
		
		insert	into atend_categoria_convenio(
			nr_seq_interno,
			nr_atendimento,
			cd_convenio,
			cd_categoria,
			dt_inicio_vigencia,
			dt_final_vigencia,
			dt_atualizacao,
			cd_usuario_convenio,
			cd_empresa,
			nm_usuario,
			nr_doc_convenio,
			cd_tipo_acomodacao,
			cd_municipio_convenio,
			cd_convenio_glosa,
			cd_categoria_glosa,
			dt_validade_carteira,
			nr_acompanhante,
			cd_plano_convenio,
			cd_dependente,
			nr_seq_origem,
			cd_senha,
			ie_tipo_guia,
			ds_observacao,
			qt_dia_internacao,
			dt_ultimo_pagto,
			ie_lib_dieta,
			qt_dieta_acomp,
			nr_seq_regra_acomp)
		SELECT
			nr_seq_atecaco_w,
			nr_seq_atendimento_w,
			b.cd_convenio,
			b.cd_categoria,
			dt_entrada_novo_atend_w,--sysdate,
			null,
			clock_timestamp(),
			b.cd_usuario_convenio,
			b.cd_empresa,
			nm_usuario_p,
			CASE WHEN ie_manter_guia_original_w='S' THEN b.nr_doc_convenio  ELSE null END ,
			b.cd_tipo_acomodacao,
			b.cd_municipio_convenio,
			b.cd_convenio_glosa,
			b.cd_categoria_glosa,
			b.dt_validade_carteira,
			CASE WHEN ie_atualiza_dieta_lib_w='S' THEN nr_acompanhante_w  ELSE null END ,
			b.cd_plano_convenio,
			b.cd_dependente,
			null,
			CASE WHEN ie_atualiza_senha_alta_adm_w='S' THEN b.cd_senha  ELSE null END ,
			coalesce(ie_tipo_guia_w,b.ie_tipo_guia),
			b.ds_observacao,
			b.qt_dia_internacao,
			b.dt_ultimo_pagto,
			CASE WHEN ie_atualiza_dieta_lib_w='S' THEN ie_lib_dieta_w  ELSE null END ,
			CASE WHEN ie_atualiza_dieta_lib_w='S' THEN qt_dieta_acomp_w  ELSE null END ,
			CASE WHEN ie_atualiza_dieta_lib_w='S' THEN nr_seq_regra_acomp_w  ELSE null END
		from	atend_categoria_convenio b
		where	b.nr_atendimento	= nr_atendimento_p
		and	b.nr_seq_interno	= 
			(SELECT max(x.nr_seq_interno) 
			from 	atend_categoria_convenio x
			where	x.nr_atendimento = nr_atendimento_p);
		exception
			when others then
			nr_seq_atendimento_w := 0;
			ds_erro_w	:= substr(sqlerrm,1,255);
			
			insert into log_mov(nm_usuario,
					dt_atualizacao, 
					cd_log, 
					ds_log) 
				values (nm_usuario_p, 
					clock_timestamp(), 
					20124, 
					'Erro ao gerar convenio atend: '|| nr_atendimento_p || obter_desc_expressao(286193) || ' ' || cd_convenio_w || ' ' || ds_erro_w);
		
		end;
		
		begin
			select 	cd_convenio,
				cd_categoria
			into STRICT	cd_convenio_atend_w,
				cd_categoria_atend_w
			from	atend_categoria_convenio
			where	nr_atendimento = nr_seq_atendimento_w
			and	nr_seq_interno	=  obter_atecaco_atendimento(nr_seq_atendimento_w) LIMIT 1;			
		exception
		when others then
				cd_convenio_atend_w	:= 0;
				cd_categoria_atend_w	:= '';
		end;
		
		if (ie_atualiza_guia_alta_adm_w = 'S') and (coalesce(cd_convenio_atend_w,0) >0) then
		
			nr_doc_convenio_W := obter_guia_conv_atend(nr_seq_atendimento_w, cd_convenio_atend_w, cd_categoria_atend_w, ie_tipo_atend_w, cd_estabelecimento_w, null, nr_doc_convenio_W);
			
			if (nr_doc_convenio_W IS NOT NULL AND nr_doc_convenio_W::text <> '') then
			
				update 	atend_categoria_convenio
				set	nr_doc_convenio = nr_doc_convenio_w
				where	nr_atendimento = nr_seq_atendimento_w
				and	cd_convenio = cd_convenio_atend_w;
			
			end if;		
		end if;			
	end if;
end if;

if (Obter_Funcao_Ativa	= 935) or (Obter_Funcao_Ativa	= 281 )then
	ie_copiar_passagem_w	:= obter_valor_param_usuario(935, 121, Obter_perfil_ativo, nm_usuario_p, cd_estab_usuario_w);
end if;
	

if (nr_seq_atendimento_w > 0) and (ie_copiar_passagem_w	= 'S')then
	/* Gerando o Atend Paciente Unidade */

	begin
	select 	nextval('atend_paciente_unidade_seq')
	into STRICT	nr_seq_atepacu_w
	;

	insert	into atend_paciente_unidade(
		nr_seq_interno,
		nr_atendimento,
		nr_sequencia,
		cd_setor_atendimento,
		cd_unidade_basica,
		cd_unidade_compl,
		dt_entrada_unidade,
		dt_atualizacao,
		nm_usuario,
		cd_tipo_acomodacao,
		dt_saida_unidade,
		nr_atend_dia,
		ds_observacao,
		nm_usuario_original,
		dt_saida_interno,
		ie_passagem_setor,
		nr_acompanhante,
		ie_calcular_dif_diaria)
	SELECT
		nr_seq_atepacu_w,
		nr_seq_atendimento_w,
		1,
		b.cd_setor_atendimento,
		b.cd_unidade_basica,
		b.cd_unidade_compl,
		dt_entrada_novo_atend_w,--sysdate,
		clock_timestamp(),
		nm_usuario_p,
		b.cd_tipo_acomodacao,
		null,
		null,
		b.ds_observacao,
		nm_usuario_p,
		null,
		b.ie_passagem_setor,
		b.nr_acompanhante,
		'S'
	from	atend_paciente_unidade b
	where	b.nr_atendimento	= nr_atendimento_p
	and	b.nr_seq_interno	=
		(SELECT max(x.nr_seq_interno) 
		from 	atend_paciente_unidade x
		where	x.nr_atendimento	= nr_atendimento_p
		and	x.dt_saida_unidade 	= 		/* Edgar 10/11/2004, OS 12737, inclui estas linhas para pegar o setor atual*/
				(select	max(dt_saida_unidade)
				from	atend_paciente_unidade
				where	nr_atendimento	= nr_atendimento_p));
	exception
		when others then
		nr_seq_atepacu_w := 0;
	end;
end if;
if (nr_seq_atendimento_w > 0) then

	begin
	insert into atendimento_alerta(nr_sequencia,
					nr_atendimento,
					dt_alerta,
					dt_atualizacao,
					nm_usuario,
					ds_alerta,
					ie_situacao,
					dt_fim_alerta,
					dt_liberacao,
					dt_inativacao,
					nm_usuario_inativacao,
					ds_justificativa,
					cd_perfil_ativo)
		SELECT		nextval('atendimento_alerta_seq'),
				nr_seq_atendimento_w,
				dt_alerta,
				dt_atualizacao,
				nm_usuario,
				ds_alerta,
				ie_situacao,
				dt_fim_alerta,
				dt_liberacao,
				dt_inativacao,
				nm_usuario_inativacao,
				ds_justificativa,
				cd_perfil_ativo
	from	atendimento_alerta b
	where	b.nr_atendimento	= nr_atendimento_p;
	exception
		when others then
		nr_seq_atendimento_w := nr_seq_atendimento_w;
	end;			

				

end if;

if (nr_seq_atendimento_w > 0) then
	/* Gerando o Diagnostico Medico */

	begin

	insert	into diagnostico_medico(
		nr_atendimento,
		dt_diagnostico,
		ie_tipo_diagnostico,
		cd_medico,
		dt_atualizacao,
		nm_usuario,
		ds_diagnostico)
	SELECT
		nr_seq_atendimento_w,
		b.dt_diagnostico,
		2,
		b.cd_medico,
		clock_timestamp(),
		nm_usuario_p,
		b.ds_diagnostico
	from	diagnostico_medico b
	where	b.nr_atendimento	= nr_atendimento_p;	
	
	exception
		when others then
		nr_seq_atendimento_w := nr_seq_atendimento_w;
	end;
end if;

if (nr_seq_atendimento_w > 0) then
	/* Gerando o Diagnostico Doenca */

	begin
	
	open C05;
	loop
	fetch C05 into
		Vet05;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
	
		insert into diagnostico_doenca(
					nr_atendimento,
					dt_diagnostico,         
					cd_doenca,              
					dt_atualizacao,
					nm_usuario,
					ie_tipo_diagnostico,
					ie_classificacao_doenca,
					ie_tipo_doenca,
					nr_seq_etiologia,
					ie_lado,
					nr_recem_nato,
					ie_rn,
					dt_inicio,
					dt_fim,
					qt_tempo,
					ie_unidade_tempo,
					dt_manifestacao,
					ds_diagnostico,
					dt_cid,
					dt_liberacao,
					ie_situacao,
					cd_medico,
					cd_setor_atendimento) 
				values (
					nr_seq_atendimento_w,
					Vet05.dt_diagnostico,
					Vet05.cd_doenca,
					clock_timestamp(),
					nm_usuario_p,
					Vet05.ie_tipo_diagnostico,
					Vet05.ie_classificacao_doenca,
					Vet05.ie_tipo_doenca,
					Vet05.nr_seq_etiologia,
					Vet05.ie_lado,
					Vet05.nr_recem_nato,
					Vet05.ie_rn,
					Vet05.dt_inicio,
					Vet05.dt_fim,
					Vet05.qt_tempo,
					Vet05.ie_unidade_tempo,
					Vet05.dt_manifestacao,
					Vet05.ds_diagnostico,
					Vet05.dt_cid,
					Vet05.dt_liberacao,
					'A',
					Vet05.cd_medico,
					Vet05.cd_setor_atendimento);
	
		end;
	end loop;
	close c05;
	
		
	exception
		when others then
		nr_seq_atendimento_w := nr_seq_atendimento_w;
	end;
end if;
	

if (nr_seq_atendimento_w	> 0) and (ie_copia_evolucao_alta_pa_w	= 'S') then
	CALL copiar_evolucao_atendimento(nr_atendimento_p,nr_seq_atendimento_w);
end if;

if (nr_seq_atendimento_w	> 0)and (ie_copia_anamn_alta_pa_w	= 'S') then
	CALL copiar_anamnese_atendimento(nr_atendimento_p,nr_seq_atendimento_w);
end if;


	if (ie_tranf_nasc_pa_w	= 'S') and (nr_seq_atendimento_w	> 0) then
		update nascimento
		set	nr_atendimento	= nr_seq_atendimento_w
		where	nr_atendimento	= nr_atendimento_p;
		
		update parto
		set	nr_atendimento	= nr_seq_atendimento_w
		where	nr_atendimento	= nr_atendimento_p;
		/*
		update parto_prog_esp
		set	nr_atendimento	= nr_seq_atendimento_w
		where	nr_atendimento	= nr_atendimento_p;
		*/
		update parto_eventos
		set	nr_atendimento	= nr_seq_atendimento_w
		where	nr_atendimento	= nr_atendimento_p;
		/*
		update partograma
		set	nr_atendimento	= nr_seq_atendimento_w
		where	nr_atendimento	= nr_atendimento_p;
		*/
		
		insert into partograma(nr_sequencia,
					nr_atendimento,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					dt_registro,
					qt_dilatacao_cervical,
					cd_pessoa_fisica, 
					qt_bcf,
					ie_interv_contracoes,
					ie_aspecto_liquido,
					ie_bolsa,
					ie_hora,
					ie_plano_lee,
					ie_ocitocina,
					qt_ocitocina,
					ie_apresentacao,
					ds_observacao,
					ie_situacao,
					dt_liberacao,
					dt_inativacao,
					nm_usuario_inativacao,
					ds_justificativa)
		SELECT			nextval('partograma_seq'),          
					nr_seq_atendimento_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					dt_registro,
					qt_dilatacao_cervical,
					cd_pessoa_fisica, 
					qt_bcf,
					ie_interv_contracoes,
					ie_aspecto_liquido,
					ie_bolsa,
					ie_hora,
					ie_plano_lee,
					ie_ocitocina,
					qt_ocitocina,
					ie_apresentacao,
					ds_observacao,
					ie_situacao,
					dt_liberacao,
					dt_inativacao,
					nm_usuario_inativacao,
					ds_justificativa
		from	partograma
		where	nr_atendimento	= nr_atendimento_p;
		
		
		insert into parto_prog_esp(	NR_SEQUENCIA,
						DT_ATUALIZACAO,
						NM_USUARIO,
						NR_SEQ_PROGRAMA,
						NR_ATENDIMENTO,
						DT_ATUALIZACAO_NREC,
						NM_USUARIO_NREC        )
		SELECT	nextval('parto_prog_esp_seq'),
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_programa,
			nr_seq_atendimento_w,
			clock_timestamp(),
			nm_usuario_p
		from	parto_prog_esp
		where	nr_atendimento	= nr_atendimento_p;
		
		insert into pre_parto(	nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					nr_atendimento,
					qt_sem_ig_cronologica,
					qt_pa_diastolica,
					qt_pa_sistolica,
					qt_pulso,
					qt_temperatura,
					qt_bat_cardio_fetais,
					ie_apresentacao_fetal,
					ie_bolsa_amniotica,
					dt_bolsa_amniotica,
					ie_bolsa_rota_alta,
					ie_dinamica_uterina,
					ie_batim_fetais,
					ie_aspecto_liquido,
					qt_altura_uterina,
					ie_ritmo_bcf,
					ie_movimento_fetal,
					ie_genitalia_integra,
					ds_genitalia_alterada,
					qt_dilatacao_uterina,
					qt_contracoes,
					ie_colo_perveo,
					ie_colo_posicao,
					ie_colo_espessura,
					ie_colo_textura,
					ds_observacao,
					dt_registro,
					cd_profissional)
		SELECT	nextval('pre_parto_seq'),
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_atendimento_w,
			qt_sem_ig_cronologica,
			qt_pa_diastolica,
			qt_pa_sistolica,
			qt_pulso,
			qt_temperatura,
			qt_bat_cardio_fetais,
			ie_apresentacao_fetal,
			ie_bolsa_amniotica,
			dt_bolsa_amniotica,
			ie_bolsa_rota_alta,
			ie_dinamica_uterina,
			ie_batim_fetais,
			ie_aspecto_liquido,
			qt_altura_uterina,
			ie_ritmo_bcf,
			ie_movimento_fetal,
			ie_genitalia_integra,
			ds_genitalia_alterada,
			qt_dilatacao_uterina,
			qt_contracoes,
			ie_colo_perveo,
			ie_colo_posicao,
			ie_colo_espessura,
			ie_colo_textura,
			ds_observacao,
			dt_registro,
			cd_profissional
		from	PRE_PARTO
		where	nr_atendimento	= nr_atendimento_p;
		
		/*	
		update PRE_PARTO
		set	nr_atendimento	= nr_seq_atendimento_w
		where	nr_atendimento	= nr_atendimento_p;
		*/
		
		
		
		update nascimento_evento
		set	nr_atendimento	= nr_seq_atendimento_w
		where	nr_atendimento	= nr_atendimento_p;
		
		update atend_vacina_teste
		set	nr_atendimento	= nr_seq_atendimento_w
		where	nr_atendimento	= nr_atendimento_p;
	end if;

if (ie_copia_disp_alta_pa_w	= 'S') and (nr_seq_atendimento_w		> 0) then
	
	update	atend_pac_dispositivo
	set	nr_atendimento	=	nr_seq_atendimento_w
	where	nr_atendimento	=	nr_atendimento_p;
end if;


if (IE_TRANS_PED_PAREC_PEND_PA_w	= 'S') and (nr_seq_atendimento_w	> 0)then
	update	parecer_medico_req a
	set		nr_atendimento =	nr_seq_atendimento_w
	where		nr_atendimento	=	nr_atendimento_p
	and	not exists (	SELECT	1
						from	parecer_medico x
						where	x.nr_parecer = a.nr_parecer);
end if;


if (ie_gerar_isolamento_adm_w = 'S') then
	
	select	max(nr_seq_motivo_isol),
		substr(max(ds_motivo),1,255),
		max(ie_tipo_isolamento),
		max(nr_seq_cih_tipo_isolamento)
	into STRICT	nr_seq_movito_iso_w,
		ds_motivo_w,
		ie_tipo_isolamento_w,
		nr_seq_cih_tipo_isolamento_w
	from	motivo_isolamento_atend
	where	nr_atendimento = nr_atendimento_p;
	
	open C02;
	loop
	fetch C02 into
		dt_registro_w,
		dt_liberacao_w,
		nr_seq_precaucao_w,
		nr_seq_motivo_isol_w,
		cd_medico_solic_w,
		dt_inicio_w,
		ds_observacao_w,
		dt_final_precaucao_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin	
			
		select	nextval('atendimento_precaucao_seq')
		into STRICT	nr_seq_atend_precaucao_w
		;

		insert into 	atendimento_precaucao( nr_sequencia,
						nr_atendimento,
						dt_registro,
						dt_liberacao,
						nr_seq_precaucao,
						nr_seq_motivo_isol,
						cd_medico_solic,
						dt_inicio,
						ds_observacao,
						dt_atualizacao,
						dt_atualizacao_nrec,
						nm_usuario,
						nm_usuario_nrec,
						ie_situacao)
					values (nr_seq_atend_precaucao_w,
						nr_seq_atendimento_w,
						dt_registro_w,
						dt_liberacao_w,
						nr_seq_precaucao_w,
						nr_seq_motivo_isol_w,
						cd_medico_solic_w,
						dt_entrada_novo_atend_w,
						ds_observacao_w,
						clock_timestamp(),
						clock_timestamp(),
						nm_usuario_p,
						nm_usuario_p,
						'A');
			
			if (((ie_alt_adm_nao_finalizada_w = 'N') or (coalesce(dt_final_precaucao_w::text, '') = '')) and (nr_seq_movito_iso_w IS NOT NULL AND nr_seq_movito_iso_w::text <> '')) then				
				CALL gerar_motivo_isolamento(nr_seq_atendimento_w,nr_seq_movito_iso_w,nm_usuario_p,'I',ds_motivo_w,ie_tipo_isolamento_w,nr_seq_cih_tipo_isolamento_w,null,null,null, nr_seq_atend_precaucao_w);				
			end if;
		end;
	end loop;
	close C02;
	
	select  coalesce(max(ie_isolamento),'N')
	into STRICT	ie_isolado_w
	from	cih_precaucao
	where 	nr_sequencia = nr_seq_precaucao_w;
	
	if (ie_isolado_w = 'S') then
	
	update 	atendimento_paciente
        set   	ie_paciente_isolado = 'S',
		dt_atualizacao = clock_timestamp() 
        where nr_atendimento = nr_seq_atendimento_w;
	
	end if;
	
	select	max(nr_seq_motivo_isol),
		substr(max(ds_motivo),1,255),
		max(ie_tipo_isolamento),
		max(nr_seq_cih_tipo_isolamento)
	into STRICT	nr_seq_movito_iso_w,
		ds_motivo_w,
		ie_tipo_isolamento_w,
		nr_seq_cih_tipo_isolamento_w
	from	motivo_isolamento_atend
	where	nr_atendimento = nr_seq_atendimento_w;
	
	ie_lib_prec_gerar_isolam_w := coalesce(obter_valor_param_usuario(281,955,obter_perfil_ativo, nm_usuario_p, cd_estab_usuario_w),'N');
	
	if (ie_lib_prec_gerar_isolam_w = 'S') and (nr_seq_movito_iso_w IS NOT NULL AND nr_seq_movito_iso_w::text <> '')	then
	
	CALL gerar_motivo_isolamento(nr_seq_atendimento_w,nr_seq_movito_iso_w,nm_usuario_p,'I',ds_motivo_w,ie_tipo_isolamento_w,nr_seq_cih_tipo_isolamento_w);
	
	end if;
end if;

insert into log_mov(nm_usuario,
		dt_atualizacao, 
		cd_log, 
		ds_log) 
	values (nm_usuario_p, 
		clock_timestamp(), 
		20124, 
		'Antes da transferencia de gastos de: '|| nr_atendimento_p ||
			obter_desc_expressao(727816) || ' ' || nr_seq_atendimento_w ||
			obter_desc_expressao(286193) || ' ' || cd_convenio_atend_w ||
			' ie_transf: '|| ie_transf_gastos_atend_sus_w);
			
			

if (nr_seq_atendimento_w > 0) and (obter_tipo_convenio(cd_convenio_atend_w) = 3) and (ie_transf_gastos_atend_sus_w = 'S') then
	begin	
	insert into log_mov(nm_usuario,
		dt_atualizacao, 
		cd_log, 
		ds_log) 
	values (nm_usuario_p, 
		clock_timestamp(), 
		20124, 
		'Inicio transferencia de gastos de: '|| nr_atendimento_p ||
				obter_desc_expressao(727816) || ' ' || nr_seq_atendimento_w ||
				obter_desc_expressao(286193) || ' ' || cd_convenio_atend_w ||
				' ie_proc_excl_ambul_w: '|| ie_proc_excl_ambul_w);
	open c03;
	loop
	fetch c03 into
		nr_sequencia_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		ie_classificacao_w,
		cd_cgc_prestador_w,
		cd_medico_executor_w,
		dt_procedimento_w,
		cd_setor_atendimento_ww;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin
		
		insert into log_mov(nm_usuario,
			dt_atualizacao, 
			cd_log, 
			ds_log) 
		values (nm_usuario_p, 
			clock_timestamp(), 
			20124, 
			obter_desc_expressao(296422) || ' ' || cd_procedimento_w ||
			obter_desc_expressao(298311) || ' ' || nr_sequencia_w ||
			obter_desc_expressao(283863) || ' ' || nr_atendimento_p ||
			obter_desc_expressao(286193) || ' ' || cd_convenio_atend_w);
		
		ie_gera_proc_w		:= obter_se_gera_proc_inter_bpa(cd_procedimento_w, ie_origem_proced_w);
		ie_proc_incons_w	:= sus_consiste_proced_atend(nr_seq_atendimento_w, cd_procedimento_w, ie_origem_proced_w);
		
		if	((ie_transf_pronto_socorro_w			= 'N') or (obter_classif_setor(cd_setor_atendimento_ww)	<> 1)) and (ie_gera_proc_w	= 'S') and
			((ie_cons_proc_tipo_atend_w	= 'N') or
			(ie_cons_proc_tipo_atend_w	= 'S' AND ie_proc_incons_w	= 'S')) then
			begin
			
			if (dt_procedimento_w 	< dt_entrada_novo_atend_w) then
				dt_procedimento_w	:= dt_entrada_novo_atend_w;
			end if;
			
			if (ie_gerar_conta_aih_w = 'S') then
				begin
		
				select	count(*)
				into STRICT	qt_proc_bpa_w
				from	procedimento_paciente a,
					sus_procedimento_registro b
				where	a.cd_procedimento	= b.cd_procedimento
				and	a.ie_origem_proced	= a.ie_origem_proced
				and	b.cd_registro in (1,2,6,7)
				and	a.nr_atendimento 	= nr_atendimento_p;
				
				if (qt_proc_bpa_w > 0) then
					begin
					
					select	max(nr_interno_conta)
					into STRICT	nr_interno_conta_ant_w
					from	conta_paciente
					where	nr_atendimento = nr_atendimento_p
					and	ie_status_acerto = 1
					and	coalesce(ie_cancelamento::text, '') = ''
					and	obter_tipo_convenio(cd_convenio_parametro) = 3;
					
					select	nextval('conta_paciente_seq')
					into STRICT	nr_interno_conta_nova_w
					;
			
					begin
					insert into Conta_Paciente(
						nr_atendimento,
						dt_acerto_conta,
						ie_status_acerto,
						dt_periodo_inicial,
						dt_periodo_final,
						dt_atualizacao,
						nm_usuario,
						cd_convenio_parametro,
						nr_protocolo,
						dt_mesano_referencia,
						dt_mesano_contabil,
						cd_convenio_calculo,
						cd_categoria_calculo,
						nr_interno_conta,
						nr_seq_protocolo,
						cd_categoria_parametro,
						cd_estabelecimento)
					SELECT	a.nr_atendimento,
						a.dt_acerto_conta  + (2/86400),
						1,
						a.dt_periodo_inicial,
						a.dt_periodo_final,
						clock_timestamp(),
						nm_usuario_p,
						a.cd_convenio_parametro,
						'0',
						trunc(b.dt_ref_valida,'dd'),
						a.dt_mesano_contabil,
						a.cd_convenio_calculo,
						a.cd_categoria_calculo,
						nr_interno_conta_nova_w,
						null,
						a.cd_categoria_parametro,
						a.cd_estabelecimento
					from	Convenio b,
						conta_paciente a
					where	nr_interno_conta	= nr_interno_conta_ant_w
					and	b.cd_convenio		= a.cd_convenio_parametro;
					exception
					when others then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(185814);	
					end;			
					
					end;
				end if;		
		
				end;
			end if;
			insert into log_mov(nm_usuario,
				dt_atualizacao, 
				cd_log, 
				ds_log) 
			values (nm_usuario_p, 
				clock_timestamp(), 
				20124, 
				'ie_gerar_conta_aih_w: '|| ie_gerar_conta_aih_w ||
						' nr_interno_conta_nova_w: '|| nr_interno_conta_nova_w ||
						' nr_interno_conta_ant_w: '|| nr_interno_conta_ant_w ||
						' ie_proc_incons_w: '|| ie_proc_incons_w);
			if (ie_manter_setor_original_w	= 'S')	then
				begin
				
				update	procedimento_paciente
				set	dt_procedimento	= dt_procedimento_w
				where	nr_sequencia	= nr_sequencia_w;

				CALL transferir_gasto_atendimento(	nr_sequencia_w,
								1,
								nr_seq_atendimento_w,
								'S',
								'S',
								nm_usuario_p);
								
				end;
			else
				begin
				
				select	nr_seq_interno,
					cd_setor_atendimento
				into STRICT	nr_seq_atepacu_w,
					cd_setor_atendimento_w
				from	atend_paciente_unidade
				where	nr_seq_interno = (SELECT	max(nr_seq_interno)
							from	atend_paciente_unidade
							where	nr_atendimento	= nr_seq_atendimento_w);
				
				update	procedimento_paciente
				set	nr_atendimento	= nr_seq_atendimento_w,
					nr_interno_conta	 = NULL,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao	= clock_timestamp(),
					nr_seq_atepacu	= nr_seq_atepacu_w,
					cd_setor_atendimento = cd_setor_atendimento_w,
					dt_entrada_unidade	= dt_entrada_novo_atend_w,
					dt_procedimento		= dt_procedimento_w
				where	nr_sequencia		= nr_sequencia_w;

				if (ie_classificacao_w = 1) or (ie_classificacao_w = 3) then
					CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_atend_w, nm_usuario_p);
				elsif (ie_classificacao_w = 2) then
					CALL atualiza_preco_servico(nr_sequencia_w, nm_usuario_p);
				end if;

				/* transferir prescr_medica */

				update	prescr_medica
				set	nr_atendimento	= nr_seq_atendimento_w
				where	nr_atendimento	= nr_atendimento_p
				and	nr_prescricao 	= (	SELECT 	nr_prescricao
								from 	procedimento_paciente
								where	nr_atendimento = nr_seq_atendimento_w
								and	nr_sequencia = nr_sequencia_w);
						
								
				end;
			end if;
				
			if (ie_gerar_conta_aih_w = 'S') and (coalesce(nr_interno_conta_nova_w,0) <> 0) and (ie_proc_incons_w = 'S') then
				begin
			
				begin
				update	procedimento_paciente
				set	nr_interno_conta = nr_interno_conta_nova_w
				where	nr_sequencia	= nr_sequencia_w;
				exception
				when others then
					insert into log_mov(nm_usuario,
						dt_atualizacao, 
						cd_log, 
						ds_log) 
					values (nm_usuario_p, 
						clock_timestamp(), 
						20124, 
						'ie_gerar_conta_aih_w: '|| ie_gerar_conta_aih_w ||
							' nr_interno_conta_nova_w: '|| nr_interno_conta_nova_w ||
							' nr_sequencia_w: '|| nr_sequencia_w ||
							' ie_proc_incons_w: '|| ie_proc_incons_w);
				end;
							
				
				if (ie_classificacao_w = 1) or (ie_classificacao_w = 3) then
					CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_atend_w, nm_usuario_p);
				elsif (ie_classificacao_w = 2) then
					CALL atualiza_preco_servico(nr_sequencia_w, nm_usuario_p);
				end if;
			
				end;
			end if;
			
			commit;
			
			end;
		end if;
		
		end;
	end loop;
	close c03;

	open c04;
	loop
	fetch c04 into
		nr_sequencia_w,
		cd_setor_atendimento_ww,
		dt_atendimento_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		begin
		insert into log_mov(nm_usuario,
				dt_atualizacao, 
				cd_log, 
				ds_log) 
			values (nm_usuario_p, 
				clock_timestamp(), 
				20124, 
				'cd_setor_atendimento_ww : '|| cd_setor_atendimento_ww ||
					obter_desc_expressao(298311) || ' ' || nr_sequencia_w ||
					' nr_seq_atepacu_w: ' || nr_seq_atepacu_w ||
					' dt_entrada_novo_atend_w: '|| dt_entrada_novo_atend_w ||
					' nr_seq_atendimento_w: '|| nr_seq_atendimento_w);
					
		if (dt_atendimento_w 	< dt_entrada_novo_atend_w) then
			dt_atendimento_w	:= dt_entrada_novo_atend_w;
		end if;
		
		if (ie_manter_setor_original_w	= 'S') then
			begin
			update	material_atend_paciente
			set	dt_atendimento	= dt_atendimento_w
			where	nr_sequencia	= nr_sequencia_w;

			CALL transferir_gasto_atendimento(	nr_sequencia_w,
							2,
							nr_seq_atendimento_w,
							'S',
							'S',
							nm_usuario_p);
			end;
		else
			begin
			
			select	nr_seq_interno,
				cd_setor_atendimento
			into STRICT	nr_seq_atepacu_w,
				cd_setor_atendimento_w
			from	atend_paciente_unidade
			where	nr_seq_interno = (	SELECT	max(nr_seq_interno)
							from	atend_paciente_unidade
							where	nr_atendimento	= nr_seq_atendimento_w);
							
			update	material_atend_paciente
			set	nr_atendimento		= nr_seq_atendimento_w,
				nr_interno_conta	 = NULL,
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				nr_seq_atepacu		= nr_seq_atepacu_w,
				cd_setor_atendimento	= cd_setor_atendimento_w,
				dt_entrada_unidade	= dt_entrada_novo_atend_w,
				dt_atendimento		= dt_atendimento_w
			where	nr_sequencia		= nr_sequencia_w;
	
			CALL atualiza_preco_material(nr_sequencia_w, nm_usuario_p);
	
			/* transferir prescr_medica */

			update	prescr_medica
			set	nr_atendimento	= nr_seq_atendimento_w
			where	nr_atendimento	= nr_atendimento_p
			and	nr_prescricao 	= (	SELECT 	nr_prescricao
							from 	material_atend_paciente
							where	nr_atendimento = nr_seq_atendimento_w
							and	nr_sequencia = nr_sequencia_w);
			
			commit;
							
			end;
		end if;
						
		end;
	end loop;
	close c04;
	
	if (coalesce(nr_interno_conta_ant_w,0) <> 0) then
		begin
		ds_erro_w := fechar_conta_paciente(nr_interno_conta_ant_w, nr_atendimento_p, 2, nm_usuario_p, ds_erro_w);
		insert into log_mov(nm_usuario,
				dt_atualizacao, 
				cd_log, 
				ds_log) 
			values (nm_usuario_p, 
				clock_timestamp(), 
				20124, 
				'Problema ao fechar a conta: '||nr_interno_conta_ant_w||', no atendimento: '|| nr_atendimento_p ||'.' || obter_desc_expressao(487197) || ' ' || ds_erro_w);
		end;
	end if;
	
	end;
	begin
		select	count(1)
		into STRICT	qt_mat_w
		from	material_atend_paciente
		where 	nr_atendimento = nr_atendimento_p
		and	coalesce(cd_motivo_exc_conta::text, '') = '';
	
		select	count(1)
		into STRICT	qt_proc_w
		from	procedimento_paciente
		where 	nr_atendimento = nr_atendimento_p
		and	coalesce(cd_motivo_exc_conta::text, '') = '';
	
		if qt_mat_w  = 0 and qt_proc_w = 0 then	
			--excluir as contas zeradas
			CALL Recalcular_contas_atend(nr_atendimento_p, nm_usuario_p);
		end if;
	exception
	when others then
		qt_mat_w:=0;
	end;
	
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_alta_administrativa ( nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;

