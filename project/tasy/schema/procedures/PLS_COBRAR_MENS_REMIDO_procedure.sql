-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_cobrar_mens_remido ( nr_seq_analise_pos_p pls_conta_pos_estabelecido.nr_seq_analise%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Verifica os pós gerados, se o mesmo necessita ser cobrando em mensalidade,
	quando o beneficiário for remido
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
Alterações:
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
tb_nr_seq_pos_estab_w		dbms_sql.number_table;
tb_ie_cobrar_mens_w		dbms_sql.varchar2_table;
i				integer;

ie_controle_pos_estabelecido_w	pls_parametros.ie_controle_pos_estabelecido%type;
-- carrega o pós elegivel
c01 CURSOR(	nr_seq_analise_pos_pc	pls_conta_pos_estabelecido.nr_seq_analise%type,
		nr_seq_conta_pc		pls_conta.nr_sequencia%type,
		nr_seq_conta_proc_pc	pls_conta_proc.nr_sequencia%type,
		nr_seq_conta_mat_pc	pls_conta_mat.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		b.dt_atendimento_referencia,
		pls_obter_se_benef_remido(b.nr_seq_segurado, b.dt_atendimento_referencia) ie_remido,
		d.ie_preco,
		c.dt_rescisao,
		a.ie_cobrar_mensalidade		
	from	pls_conta_pos_estabelecido	a,
		pls_conta			b,
		pls_segurado			c,
		pls_plano			d
	where	b.nr_sequencia			= a.nr_seq_conta
	and	c.nr_sequencia			= b.nr_seq_segurado
	and	d.nr_sequencia			= c.nr_seq_plano
	and	a.nr_seq_analise		= nr_seq_analise_pos_pc
	and	coalesce(nr_seq_conta_pc::text, '') = ''
	and	coalesce(nr_seq_conta_proc_pc::text, '') = ''
	and	coalesce(nr_seq_conta_mat_pc::text, '') = ''
	and	a.ie_cobrar_mensalidade		in ('P', 'S')
	and	a.vl_beneficiario		> 0
	
union all

	SELECT	a.nr_sequencia,
		b.dt_atendimento_referencia,
		pls_obter_se_benef_remido(b.nr_seq_segurado, b.dt_atendimento_referencia) ie_remido,
		d.ie_preco,
		c.dt_rescisao,
		a.ie_cobrar_mensalidade
	from	pls_conta_pos_estabelecido	a,
		pls_conta			b,
		pls_segurado			c,
		pls_plano			d
	where	b.nr_sequencia			= a.nr_seq_conta
	and	c.nr_sequencia			= b.nr_seq_segurado
	and	d.nr_sequencia			= c.nr_seq_plano
	and	b.nr_sequencia			= nr_seq_conta_pc
	and	coalesce(nr_seq_conta_proc_pc::text, '') = ''
	and	coalesce(nr_seq_conta_mat_pc::text, '') = ''
	and	a.ie_cobrar_mensalidade		in ('P', 'S')
	and	a.vl_beneficiario		> 0
	
union all

	select	a.nr_sequencia,
		b.dt_atendimento_referencia,
		pls_obter_se_benef_remido(b.nr_seq_segurado, b.dt_atendimento_referencia) ie_remido,
		d.ie_preco,
		c.dt_rescisao,
		a.ie_cobrar_mensalidade
	from	pls_conta_pos_estabelecido	a,
		pls_conta			b,
		pls_segurado			c,
		pls_plano			d
	where	b.nr_sequencia			= a.nr_seq_conta
	and	c.nr_sequencia			= b.nr_seq_segurado
	and	d.nr_sequencia			= c.nr_seq_plano
	and	a.nr_seq_conta_proc		= nr_seq_conta_proc_pc
	and	coalesce(nr_seq_conta_mat_pc::text, '') = ''
	and	a.ie_cobrar_mensalidade		in ('P', 'S')
	and	a.vl_beneficiario		> 0
	
union all

	select	a.nr_sequencia,
		b.dt_atendimento_referencia,
		pls_obter_se_benef_remido(b.nr_seq_segurado, b.dt_atendimento_referencia) ie_remido,
		d.ie_preco,
		c.dt_rescisao,
		a.ie_cobrar_mensalidade
	from	pls_conta_pos_estabelecido	a,
		pls_conta			b,
		pls_segurado			c,
		pls_plano			d
	where	b.nr_sequencia			= a.nr_seq_conta
	and	c.nr_sequencia			= b.nr_seq_segurado
	and	d.nr_sequencia			= c.nr_seq_plano
	and	a.nr_seq_conta_mat		= nr_seq_conta_mat_pc
	and	coalesce(nr_seq_conta_proc_pc::text, '') = ''
	and	a.ie_cobrar_mensalidade		in ('P', 'S')
	and	a.vl_beneficiario		> 0;
	
	
BEGIN


-- levanta a parametrição de controle de pos
select  coalesce(max(ie_controle_pos_estabelecido),'N')
into STRICT  	ie_controle_pos_estabelecido_w
from  	pls_parametros
where  	cd_estabelecimento  = cd_estabelecimento_p;

i := 0;
-- carrega os pós elegiveis
for r_c01_w in c01(nr_seq_analise_pos_p, nr_seq_conta_p, nr_seq_conta_proc_p, nr_seq_conta_mat_p) loop

	-- somente prossegue se for beneficiario remido e pre estabelecido
	if (r_c01_w.ie_remido = 'S') and (r_c01_w.ie_preco = '1')  then
	
		-- agora valida se o beneficiario é ativo

		-- se for ativo, nao deve ir na mensalidade
		if	((coalesce(r_c01_w.dt_rescisao::text, '') = '') or (trunc(r_c01_w.dt_rescisao,'dd') > r_c01_w.dt_atendimento_referencia)) then
		
			tb_nr_seq_pos_estab_w(i) := r_c01_w.nr_sequencia;
			tb_ie_cobrar_mens_w(i) := 'N';
			i := i + 1;
		end if;
		
		-- se for inativo, deve entrar na mensalidade
		if	((r_c01_w.dt_rescisao IS NOT NULL AND r_c01_w.dt_rescisao::text <> '') and (trunc(r_c01_w.dt_rescisao,'dd') < r_c01_w.dt_atendimento_referencia)) then
	
			tb_nr_seq_pos_estab_w(i) := r_c01_w.nr_sequencia;
			
			-- se o parametro for para controlar o pos, e o pos atual está como P, então permanece como P
			if	(ie_controle_pos_estabelecido_w = 'S' AND r_c01_w.ie_cobrar_mensalidade = 'P') then
			
				tb_ie_cobrar_mens_w(i) := 'P';
			else
				tb_ie_cobrar_mens_w(i) := 'S';
			end if;
			
			i := i + 1;
		end if;
		
		if (tb_nr_seq_pos_estab_w.count >= pls_util_pck.qt_registro_transacao_w) then
		
			forall idx in tb_nr_seq_pos_estab_w.first..tb_nr_seq_pos_estab_w.last
				update	pls_conta_pos_estabelecido
				set	ie_cobrar_mensalidade	= tb_ie_cobrar_mens_w(idx),
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia		= tb_nr_seq_pos_estab_w(idx);
			
			i := 0;
			
			tb_nr_seq_pos_estab_w.delete;
			tb_ie_cobrar_mens_w.delete;
		end if;
	end if;
end loop;

-- caso ainda tenha um "resto", manda para o banco agora
if (tb_nr_seq_pos_estab_w.count > 0) then
		
	forall idx in tb_nr_seq_pos_estab_w.first..tb_nr_seq_pos_estab_w.last
		update	pls_conta_pos_estabelecido
		set	ie_cobrar_mensalidade	= tb_ie_cobrar_mens_w(idx),
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= tb_nr_seq_pos_estab_w(idx);
	
end if;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cobrar_mens_remido ( nr_seq_analise_pos_p pls_conta_pos_estabelecido.nr_seq_analise%type, nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

