-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_multitransferencia_item ( ds_lista_itens_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_ageint_p out bigint ) is TYPE ageint_anterior_row IS RECORD ( cd_categoria agenda_integrada.cd_categoria %type, cd_convenio agenda_integrada.cd_convenio %type, cd_empresa agenda_integrada.cd_empresa %type, cd_estabelecimento agenda_integrada.cd_estabelecimento %type, cd_pessoa_fisica agenda_integrada.cd_pessoa_fisica %type, cd_plano agenda_integrada.cd_plano %type, cd_profissional agenda_integrada.cd_profissional %type, cd_usuario_convenio agenda_integrada.cd_usuario_convenio %type, ds_observacao agenda_integrada.ds_observacao %type, dt_atualizacao agenda_integrada.dt_atualizacao %type, dt_atualizacao_nrec agenda_integrada.dt_atualizacao_nrec %type, dt_inicio_agendamento agenda_integrada.dt_inicio_agendamento %type, dt_nascimento agenda_integrada.dt_nascimento %type, dt_validade_carteira agenda_integrada.dt_validade_carteira %type, nm_contato agenda_integrada.nm_contato %type, nm_paciente agenda_integrada.nm_paciente %type, nm_usuario agenda_integrada.nm_usuario %type, nm_usuario_nrec agenda_integrada.nm_usuario_nrec %type, nr_doc_convenio agenda_integrada.nr_doc_convenio %type, nr_sequencia agenda_integrada.nr_sequencia %type, nr_seq_cobertura agenda_integrada.nr_seq_cobertura %type, nr_seq_status agenda_integrada.nr_seq_status %type, nr_telefone agenda_integrada.nr_telefone %type, qt_altura_cm agenda_integrada.qt_altura_cm %type, qt_peso agenda_integrada.qt_peso %type, ie_cod_usuario_mae_resp agenda_integrada.ie_cod_usuario_mae_resp %type, ie_tipo_atendimento agenda_integrada.ie_tipo_atendimento %type, qt_idade_pac agenda_integrada.qt_idade_pac %type ) AS $body$
DECLARE

	nr_seq_retorno_w	agenda_integrada_item.nr_sequencia%type;
	
  aux_agendamento RECORD;
  resp_ageint RECORD;
  resp_quest_item RECORD;
BEGIN
	tam_lista_w	 := length(ds_lista_w);
	ie_pos_virgula_w := position(',' in ds_lista_w);

	if (ie_pos_virgula_w <> 0) then
		nr_seq_retorno_w	:= (substr(ds_lista_w,1,(ie_pos_virgula_w - 1)))::numeric;
		ds_lista_w		:= substr(ds_lista_w,(ie_pos_virgula_w + 1),tam_lista_w);
	end if;
	return;
	end;

procedure tratar_inserir_itens is
	begin
	if (item_transf_w.count > 0) then
		for linha in item_transf_w.first..item_transf_w.last loop
			if (item_transf_w.exists(linha)) then
				select 	nextval('agenda_integrada_item_seq')
				into STRICT	nr_seq_item_novo_w
				;

				insert into agenda_integrada_item(	cd_anestesista,
					cd_doenca_cid,
					cd_especialidade,
					cd_estabelecimento,
					cd_medico,
					cd_medico_prev_laudo,
					cd_medico_req,
					cd_procedimento,
					cd_profissional_exame,
					crm_medico_externo,
					ds_observacao,
					dt_atualizacao,
					dt_atualizacao_nrec,
					dt_transferencia,
					ie_anestesia,
					ie_classif_agenda,
					ie_lado,
					ie_origem_proced,
					ie_regra,
					ie_tipo_agendamento,
					ie_tipo_exame_proc,
					ie_tipo_item,
					nm_medico_externo,
					nm_usuario,
					nm_usuario_nrec,
					nr_ciclo,
					nr_classificacao_agend,
					nr_doc_convenio,
					nr_minuto_duracao,
					nr_sequencia,
					nr_seq_ageint_item_transf,
					nr_seq_agenda_int,
					nr_seq_classif_agenda,
					nr_seq_grupo_proc,
					nr_seq_grupo_selec,
					nr_seq_proc_interno,
					nr_seq_regra,
					nr_seq_sala,
					nr_seq_transporte,
					vl_anestesista,
					vl_auxiliares,
					vl_custo_operacional,
					vl_item,
					vl_lanc_auto,
					vl_materiais,
					vl_medico
				)
				values (	item_transf_w[linha].cd_anestesista,
					item_transf_w[linha].cd_doenca_cid,
					item_transf_w[linha].cd_especialidade,
					item_transf_w[linha].cd_estabelecimento,
					item_transf_w[linha].cd_medico,
					item_transf_w[linha].cd_medico_prev_laudo,
					item_transf_w[linha].cd_medico_req,
					item_transf_w[linha].cd_procedimento,
					item_transf_w[linha].cd_profissional_exame,
					item_transf_w[linha].crm_medico_externo,
					item_transf_w[linha].ds_observacao,
					item_transf_w[linha].dt_atualizacao,
					item_transf_w[linha].dt_atualizacao_nrec,
					item_transf_w[linha].dt_transferencia,
					item_transf_w[linha].ie_anestesia,
					item_transf_w[linha].ie_classif_agenda,
					item_transf_w[linha].ie_lado,
					item_transf_w[linha].ie_origem_proced,
					item_transf_w[linha].ie_regra,
					item_transf_w[linha].ie_tipo_agendamento,
					item_transf_w[linha].ie_tipo_exame_proc,
					item_transf_w[linha].ie_tipo_item,
					item_transf_w[linha].nm_medico_externo,
					item_transf_w[linha].nm_usuario,
					item_transf_w[linha].nm_usuario_nrec,
					item_transf_w[linha].nr_ciclo,
					item_transf_w[linha].nr_classificacao_agend,
					item_transf_w[linha].nr_doc_convenio,
					item_transf_w[linha].nr_minuto_duracao,
					nr_seq_item_novo_w,
					item_transf_w[linha].nr_sequencia,
					nr_seq_ageint_w,
					item_transf_w[linha].nr_seq_classif_agenda,
					item_transf_w[linha].nr_seq_grupo_proc,
					item_transf_w[linha].nr_seq_grupo_selec,
					item_transf_w[linha].nr_seq_proc_interno,
					item_transf_w[linha].nr_seq_regra,
					item_transf_w[linha].nr_seq_sala,
					item_transf_w[linha].nr_seq_transporte,
					item_transf_w[linha].vl_anestesista,
					item_transf_w[linha].vl_auxiliares,
					item_transf_w[linha].vl_custo_operacional,
					item_transf_w[linha].vl_item,
					item_transf_w[linha].vl_lanc_auto,
					item_transf_w[linha].vl_materiais,
					item_transf_w[linha].vl_medico
				);

				item_transf_w[linha].nr_seq_item_novo_w := nr_seq_item_novo_w;

				select 	coalesce(max(1), 0)
				into STRICT 	qt_reg_conv_item_w
				from 	agenda_integrada_conv_item
				where	nr_seq_agenda_item = item_transf_w[linha].nr_sequencia;

				if (qt_reg_conv_item_w = 0) then
					if (ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).cd_convenio <> coalesce(cd_convenio_w,0)) or (ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).cd_categoria <> cd_categoria_w) or (ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).cd_plano <> cd_plano_w) then
						insert into agenda_integrada_conv_item(cd_categoria,
						cd_convenio,
						cd_plano,
						cd_usuario_convenio,
						dt_atualizacao,
						dt_atualizacao_nrec,
						dt_validade_carteira,
						ie_cod_usuario_mae_resp,
						nm_usuario,
						nm_usuario_nrec,
						nr_doc_convenio,
						nr_sequencia,
						nr_seq_agenda_item)
						values (ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).cd_categoria,
						ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).cd_convenio,
						ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).cd_plano,
						ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).cd_usuario_convenio,
						clock_timestamp(),
						clock_timestamp(),
						ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).dt_validade_carteira,
						ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).ie_cod_usuario_mae_resp,
						nm_usuario_p,
						nm_usuario_p,
						ageint_anterior_w(item_transf_w[linha].nr_seq_agenda_int).nr_doc_convenio,
						nextval('agenda_integrada_conv_item_seq'),
						nr_seq_item_novo_w);
					end if;
				else
					insert into agenda_integrada_conv_item(cd_categoria, cd_convenio, cd_plano, cd_usuario_convenio,
					dt_atualizacao, dt_atualizacao_nrec, dt_validade_carteira,
					ie_cod_usuario_mae_resp, nm_usuario, nm_usuario_nrec,
					nr_doc_convenio, nr_sequencia, nr_seq_agenda_item)
					(SELECT cd_categoria, cd_convenio, cd_plano, cd_usuario_convenio,
						dt_atualizacao, dt_atualizacao_nrec, dt_validade_carteira,
						ie_cod_usuario_mae_resp, nm_usuario, nm_usuario_nrec,
						nr_doc_convenio, nextval('agenda_integrada_conv_item_seq'), nr_seq_item_novo_w
					from agenda_integrada_conv_item
					where nr_seq_agenda_item = item_transf_w[linha].nr_sequencia);
				end if;

				insert into AGENDA_INTEGRADA_PROF_ITEM(cd_pessoa_fisica, dt_atualizacao, dt_atualizacao_nrec,
				ie_confirmado, nm_usuario, nm_usuario_nrec, nr_sequencia,
				nr_seq_agenda_item)
				(SELECT cd_pessoa_fisica, dt_atualizacao, dt_atualizacao_nrec,
					'N', nm_usuario, nm_usuario_nrec, nextval('agenda_integrada_prof_item_seq'),
					nr_seq_item_novo_w
				from AGENDA_INTEGRADA_PROF_ITEM
				where nr_seq_agenda_item = item_transf_w[linha].nr_sequencia);
				
				/* INSERIR ITENS ASSOCIADOS */

				insert into ageint_exame_associado(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_proc_interno,
				nr_seq_ageint_item,
				cd_procedimento,
				ie_origem_proced,
				ie_regra,
				ie_glosa,
				vl_exame,
				ie_autorizacao,
				vl_exame_particular)
				(SELECT nextval('ageint_exame_associado_seq'),
					    clock_timestamp(),
					    obter_usuario_ativo,
					    clock_timestamp(),
					    obter_usuario_ativo,
					    nr_seq_proc_interno,
					    nr_seq_item_novo_w,
					    cd_procedimento,
					    ie_origem_proced,
					    ie_regra,
					    ie_glosa,
					    vl_exame,
					    ie_autorizacao,
					    vl_exame_particular
				from ageint_exame_associado
				where nr_seq_ageint_item = item_transf_w[linha].nr_sequencia);
				
				/* INSERIR EXAMES ADICIONAIS */

				insert into AGEINT_EXAME_ADIC_ITEM(
							   NR_SEQUENCIA,
							   DT_ATUALIZACAO,
							   NM_USUARIO,
							   DT_ATUALIZACAO_NREC,
							   NR_SEQ_PROC_INTERNO,
							   NR_SEQ_ITEM,
							   NR_SEQ_GRUPO_SELEC,
							   IE_LADO,
							   IE_REGRA,
							   IE_GLOSA,
							   NR_SEQ_REGRA,
							   CD_PROCEDIMENTO,
							   IE_ORIGEM_PROCED,
							   IE_AUTORIZACAO,
							   VL_AUXILIARES,
							   VL_MATERIAIS,
							   VL_MEDICO,
							   VL_ANESTESISTA,
							   VL_CUSTO_OPERACIONAL,
							   VL_LANC_AUTO,
							   NR_SEQ_ORIGEM,
							   DS_CIRURGIA,
							   VL_ITEM,
							   VL_ITEM_PARTICULAR,
							   NR_SEQ_TOPOGRAFIA,
							   VL_COPARTICIPACAO)
						(SELECT nextval('ageint_exame_adic_item_seq'),
								clock_timestamp(),
								OBTER_USUARIO_ATIVO,
								clock_timestamp(),
							    nr_seq_proc_interno,
							    nr_seq_item_novo_w,
							    nr_seq_grupo_selec,
							    ie_lado,
							    ie_regra,
							    ie_glosa,
							    nr_seq_regra,
							    cd_procedimento,
							    ie_origem_proced,
							    ie_autorizacao,
							    vl_auxiliares,
							    vl_materiais,
							    vl_medico,
							    vl_anestesista,
							    vl_custo_operacional,
							    vl_lanc_auto,
							    nr_seq_origem,
							    ds_cirurgia,
							    vl_item,
							    vl_item_particular,
							    nr_seq_topografia,
							    vl_coparticipacao
						  FROM AGEINT_EXAME_ADIC_ITEM
						 where nr_seq_item = item_transf_w[linha].nr_sequencia);
				
				
			end if;
		end loop;
	end if;
	end;

procedure inserir_item_lista(nr_seq_ageint_item_l_p number) is
	begin
	if (coalesce(nr_seq_ageint_item_w,0) > 0) then
		nr_seq_vetor_w := nr_seq_ageint_item_l_p;
		select 	b.cd_anestesista,
			b.cd_doenca_cid,
			b.cd_especialidade,
			b.cd_estabelecimento,
			b.cd_medico,
			b.cd_medico_prev_laudo,
			b.cd_medico_req,
			b.cd_procedimento,
			b.cd_profissional_exame,
			b.crm_medico_externo,
			b.ds_observacao,
			b.dt_atualizacao,
			b.dt_atualizacao_nrec,
			b.dt_transferencia,
			b.ie_anestesia,
			b.ie_classif_agenda,
			b.ie_lado,
			b.ie_origem_proced,
			b.ie_regra,
			b.ie_tipo_agendamento,
			b.ie_tipo_exame_proc,
			b.ie_tipo_item,
			b.nm_medico_externo,
			b.nm_usuario,
			b.nm_usuario_nrec,
			b.nr_ciclo,
			b.nr_classificacao_agend,
			b.nr_doc_convenio,
			b.nr_minuto_duracao,
			b.nr_sequencia,
			b.nr_seq_agenda_int,
			b.nr_seq_classif_agenda,
			b.nr_seq_grupo_proc,
			b.nr_seq_grupo_selec,
			b.nr_seq_proc_interno,
			b.nr_seq_regra,
			b.nr_seq_sala,
			b.nr_seq_transporte,
			b.vl_anestesista,
			b.vl_auxiliares,
			b.vl_custo_operacional,
			b.vl_item,
			b.vl_lanc_auto,
			b.vl_materiais,
			b.vl_medico
		into STRICT	item_transf_w[nr_seq_vetor_w].cd_anestesista,
			item_transf_w[nr_seq_vetor_w].cd_doenca_cid,
			item_transf_w[nr_seq_vetor_w].cd_especialidade,
			item_transf_w[nr_seq_vetor_w].cd_estabelecimento,
			item_transf_w[nr_seq_vetor_w].cd_medico,
			item_transf_w[nr_seq_vetor_w].cd_medico_prev_laudo,
			item_transf_w[nr_seq_vetor_w].cd_medico_req,
			item_transf_w[nr_seq_vetor_w].cd_procedimento,
			item_transf_w[nr_seq_vetor_w].cd_profissional_exame,
			item_transf_w[nr_seq_vetor_w].crm_medico_externo,
			item_transf_w[nr_seq_vetor_w].ds_observacao,
			item_transf_w[nr_seq_vetor_w].dt_atualizacao,
			item_transf_w[nr_seq_vetor_w].dt_atualizacao_nrec,
			item_transf_w[nr_seq_vetor_w].dt_transferencia,
			item_transf_w[nr_seq_vetor_w].ie_anestesia,
			item_transf_w[nr_seq_vetor_w].ie_classif_agenda,
			item_transf_w[nr_seq_vetor_w].ie_lado,
			item_transf_w[nr_seq_vetor_w].ie_origem_proced,
			item_transf_w[nr_seq_vetor_w].ie_regra,
			item_transf_w[nr_seq_vetor_w].ie_tipo_agendamento,
			item_transf_w[nr_seq_vetor_w].ie_tipo_exame_proc,
			item_transf_w[nr_seq_vetor_w].ie_tipo_item,
			item_transf_w[nr_seq_vetor_w].nm_medico_externo,
			item_transf_w[nr_seq_vetor_w].nm_usuario,
			item_transf_w[nr_seq_vetor_w].nm_usuario_nrec,
			item_transf_w[nr_seq_vetor_w].nr_ciclo,
			item_transf_w[nr_seq_vetor_w].nr_classificacao_agend,
			item_transf_w[nr_seq_vetor_w].nr_doc_convenio,
			item_transf_w[nr_seq_vetor_w].nr_minuto_duracao,
			item_transf_w[nr_seq_vetor_w].nr_sequencia,
			item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int,
			item_transf_w[nr_seq_vetor_w].nr_seq_classif_agenda,
			item_transf_w[nr_seq_vetor_w].nr_seq_grupo_proc,
			item_transf_w[nr_seq_vetor_w].nr_seq_grupo_selec,
			item_transf_w[nr_seq_vetor_w].nr_seq_proc_interno,
			item_transf_w[nr_seq_vetor_w].nr_seq_regra,
			item_transf_w[nr_seq_vetor_w].nr_seq_sala,
			item_transf_w[nr_seq_vetor_w].nr_seq_transporte,
			item_transf_w[nr_seq_vetor_w].vl_anestesista,
			item_transf_w[nr_seq_vetor_w].vl_auxiliares,
			item_transf_w[nr_seq_vetor_w].vl_custo_operacional,
			item_transf_w[nr_seq_vetor_w].vl_item,
			item_transf_w[nr_seq_vetor_w].vl_lanc_auto,
			item_transf_w[nr_seq_vetor_w].vl_materiais,
			item_transf_w[nr_seq_vetor_w].vl_medico
		from 	agenda_integrada_item b
		where	b.nr_sequencia = nr_seq_ageint_item_l_p;

		if not(ageint_anterior_w.exists(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int)) then
			ds_seq_ageint_w := ds_seq_ageint_w || item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int || ',';
			select 	a.nr_sequencia,
				a.cd_categoria,
				a.cd_convenio,
				a.cd_plano,
				a.cd_usuario_convenio,
				a.dt_validade_carteira,
				a.nr_doc_convenio,
				a.ie_cod_usuario_mae_resp,
				a.IE_TIPO_ATENDIMENTO
			into STRICT	ageint_anterior_w(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int).nr_sequencia,
				ageint_anterior_w(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int).cd_categoria,
				ageint_anterior_w(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int).cd_convenio,
				ageint_anterior_w(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int).cd_plano,
				ageint_anterior_w(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int).cd_usuario_convenio,
				ageint_anterior_w(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int).dt_validade_carteira,
				ageint_anterior_w(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int).nr_doc_convenio,
				ageint_anterior_w(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int).ie_cod_usuario_mae_resp,
				ageint_anterior_w(item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int).IE_TIPO_ATENDIMENTO
			from 	agenda_integrada a
			where 	a.nr_sequencia = item_transf_w[nr_seq_vetor_w].nr_seq_agenda_int;
		end if;
	end if;
	exception when no_data_found then
		null;
	end;

procedure obter_info_agendamento is
	begin
		SELECT 	max(cd_convenio)
		into STRICT 	cd_convenio_w
		FROM (
			SELECT a.cd_convenio, Count(*) qt
			FROM agenda_integrada a, convenio b
			WHERE a.nr_sequencia in (WITH RECURSIVE cte AS (
SELECT regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level)  (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level))::text <> '')  UNION ALL
SELECT regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level) JOIN cte c ON ()

) SELECT * FROM cte;
)
			and a.cd_convenio = b.cd_convenio
			and b.ie_tipo_convenio <> 1
			GROUP BY a.cd_convenio
			ORDER BY qt desc
		) alias8 LIMIT 1;

		if (coalesce(cd_convenio_w::text, '') = '') then
			SELECT 	max(cd_convenio)
			into STRICT 	cd_convenio_w
			FROM (
				SELECT a.cd_convenio, Count(*) qt
				FROM agenda_integrada a, convenio b
				WHERE a.nr_sequencia in (WITH RECURSIVE cte AS (
SELECT regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level)  (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level))::text <> '')  UNION ALL
SELECT regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level) JOIN cte c ON ()

) SELECT * FROM cte;
)
				and a.cd_convenio = b.cd_convenio
				GROUP BY a.cd_convenio
				ORDER BY qt desc
			) alias10 LIMIT 1;
		end if;

		-- aux_agendamento para armazenar somente se as informacoes forem iguais nos agendamentos selecionados
		ie_armazena_aux_age_w := 0;

		for aux_agendamento in (SELECT   nr_seq_classificacao,
										 cd_tipo_acomodacao,
										 cd_medico_solicitante
								from     agenda_integrada
								where    nr_sequencia in (WITH RECURSIVE cte AS (
select regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level)  (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level))::text <> '')  UNION ALL
select regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level) JOIN cte c ON ()

) SELECT * FROM cte;
)) loop

			if (ie_armazena_aux_age_w = 0) then
				nr_seq_classificacao_w := aux_agendamento.nr_seq_classificacao;
				cd_tipo_acomodacao_w := aux_agendamento.cd_tipo_acomodacao;
				cd_medico_solicitante_w := aux_agendamento.cd_medico_solicitante;
				ie_armazena_aux_age_w := 1;
			end if;

			if (nr_seq_classificacao_w <> aux_agendamento.nr_seq_classificacao) then
				nr_seq_classificacao_w := null;
			end if;
			if (cd_tipo_acomodacao_w <> aux_agendamento.cd_tipo_acomodacao) then
				cd_tipo_acomodacao_w := null;
			end if;
			if (cd_medico_solicitante_w <> aux_agendamento.cd_medico_solicitante) then
				cd_medico_solicitante_w := null;
			end if;

		end loop;

		select 	max(nr_sequencia)
		into STRICT	nr_seq_ageint_ant_w
		from 	agenda_integrada
		WHERE 	nr_sequencia in (WITH RECURSIVE cte AS (
SELECT regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level)  (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level))::text <> '')  UNION ALL
SELECT regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level) JOIN cte c ON ()

) SELECT * FROM cte;
)
		and 	cd_convenio = cd_convenio_w;

		-- Retorno o IE_TIPO_ATENDIMENTO, se for diferente, retorna NULL
		SELECT CASE WHEN COUNT(DISTINCT ie_tipo_atendimento)=1 THEN  MAX(ie_tipo_atendimento)  ELSE NULL END 
		     INTO STRICT IE_TIPO_ATENDIMENTO_W
		   FROM agenda_integrada
	 	 WHERE nr_sequencia in (WITH RECURSIVE cte AS (
SELECT regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level)  (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_seq_ageint_w, '[^,]+', 1, level))::text <> '')  UNION ALL
SELECT regexp_substr(ds_seq_ageint_w,'[^,]+', 1, level) JOIN cte c ON ()

) SELECT * FROM cte;
);

		select 	max(cd_pessoa_fisica),
			max(cd_convenio),
			max(cd_categoria),
			max(cd_plano),
			max(nr_doc_convenio_w),
			max(dt_validade_carteira),
			max(cd_usuario_convenio),
			max(nm_contato),
			max(nr_telefone),
			max(cd_profissional),
			max(qt_altura_cm),
			max(nm_paciente),
			max(dt_nascimento),
			max(cd_empresa),
			max(nr_seq_cobertura),
			max(ds_observacao),
			max(qt_peso),
			max(ie_sexo),
			max(qt_idade_pac),
			coalesce(max(ie_turno),2)
		into STRICT	cd_pessoa_fisica_w,
			cd_convenio_w,
			cd_categoria_w,
			cd_plano_w,
			nr_doc_convenio_w,
			dt_validade_carteira_w,
			cd_usuario_convenio_w,
			nm_contato_w,
			nr_telefone_w,
			cd_profissional_w,
			qt_altura_cm_w,
			nm_paciente_w,
			dt_nascimento_w,
			cd_empresa_w,
			nr_seq_cobertura_w,
			ds_observacao_w,
			qt_peso_w,
			ie_sexo_w,
			qt_idade_pac_w,
			ie_turno_w
		from 	agenda_integrada
		where 	nr_sequencia = nr_seq_ageint_ant_w;

	exception when no_data_found then
		null;
	end;

procedure tratar_inserir_quest is
	begin
	if (ageint_anterior_w.count > 0) then
		for seq_ageint in 1..ageint_anterior_w.last loop
			if (ageint_anterior_w.exists(seq_ageint)) then
				for resp_ageint in (SELECT * from ageint_resp_quest a where nr_seq_ageint = seq_ageint
											/*and exists (select 1
													from ageint_resp_quest_item x
													where x.nr_seq_resp_quest = a.nr_sequencia
													and obter_se_contido(x.nr_seq_ageint_item,ds_lista_itens_p))*/
) loop
					ie_insere_resp_w := 'S';
					select 	coalesce(max(nr_sequencia),0)
					into STRICT	nr_seq_ageint_resp_quest_w
					from 	ageint_resp_quest
					where 	nr_seq_ageint = nr_seq_ageint_w
					and	nr_seq_estrutura = resp_ageint.nr_seq_estrutura
					and 	nr_seq_pergunta = resp_ageint.nr_seq_pergunta;
					if (nr_seq_ageint_resp_quest_w > 0) then
						ie_insere_resp_w := 'N';
						select 	coalesce(max(1),0)
						into STRICT	qt_resp_w
						from 	ageint_resp_quest
						where 	nr_sequencia = nr_seq_ageint_resp_quest_w
						and	nr_seq_resp = resp_ageint.nr_seq_resp;
						if (qt_resp_w = 0) then
							seq_resp_ageint_remove_w[nr_seq_ageint_resp_quest_w].nr_seq_estrutura := resp_ageint.nr_seq_estrutura;
							seq_resp_ageint_remove_w[nr_seq_ageint_resp_quest_w].nr_seq_pergunta := resp_ageint.nr_seq_pergunta;
						end if;
					end if;

					if (ie_insere_resp_w = 'S') then



						select 	coalesce(max(u.IE_QUESTIONAR_TRANS),'N')
						into STRICT		ie_questionar_trans_w
						from		AGEINT_QUEST_UTILIZACAO u,
										AGEINT_RESP_QUEST_ITEM b,
										ageint_resp_quest a
						where 	u.nr_sequencia = b.nr_seq_quest_utilizacao
						and			b.nr_seq_resp_quest = a.nr_sequencia
						and			a.nr_seq_estrutura = resp_ageint.nr_seq_estrutura
						and 		a.nr_seq_pergunta = resp_ageint.nr_seq_pergunta
						and			a.nr_seq_ageint = seq_ageint;

						if (ie_questionar_trans_w <> 'N') then

							select	nextval('ageint_resp_quest_seq')
							into STRICT	nr_seq_ageint_resp_quest_w
							;

							if (ie_questionar_trans_w = 'Q') then
								nr_seq_resp_w := null;
								ds_resposta_w := null;
							else
								nr_seq_resp_w := resp_ageint.nr_seq_resp;
								ds_resposta_w := resp_ageint.ds_resposta;
							end if;

							insert into ageint_resp_quest(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_ageint,
								nr_seq_estrutura,
								nr_seq_superior,
								nr_seq_pergunta,
								ds_pergunta,
								nr_seq_resp,
								ds_resposta,
								ie_tipo_quest,
								ie_obrigatorio
							) values (
								nr_seq_ageint_resp_quest_w,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_ageint_w,
								resp_ageint.nr_seq_estrutura,
								null,
								resp_ageint.nr_seq_pergunta,
								resp_ageint.ds_pergunta,
								nr_seq_resp_w,
								ds_resposta_w,
								'A',
								resp_ageint.ie_obrigatorio
							);
						end if;
					end if;
					
					select 	max(nr_sequencia)
					into STRICT 		seq_resp_quest_inse_w
					from 		ageint_resp_quest
					where 	nr_seq_estrutura = resp_ageint.nr_seq_estrutura
					and 		nr_seq_pergunta = resp_ageint.nr_seq_pergunta
					and 		nr_seq_ageint = nr_seq_ageint_w;
					
					if (seq_resp_quest_inse_w IS NOT NULL AND seq_resp_quest_inse_w::text <> '') then
					
						for resp_quest_item in (select	nextval('ageint_resp_quest_item_seq') seq,
																							b.nr_sequencia,
																							a.nr_seq_quest_utilizacao
																			from 	ageint_resp_quest_item a,
																						agenda_integrada_item b,
																						ageint_resp_quest c
																			where	a.nr_seq_ageint = seq_ageint
																			and	b.nr_seq_agenda_int = seq_ageint
																			and	b.nr_sequencia = a.nr_seq_item
																			and	b.nr_sequencia in (WITH RECURSIVE cte AS (
select regexp_substr(ds_lista_itens_p,'[^,]+', 1, level)  (regexp_substr(ds_lista_itens_p, '[^,]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_itens_p, '[^,]+', 1, level))::text <> '')  UNION ALL
select regexp_substr(ds_lista_itens_p,'[^,]+', 1, level) JOIN cte c ON ()

) SELECT * FROM cte;
)
																			and a.nr_seq_resp_quest = c.nr_sequencia
																			and			c.nr_seq_estrutura = resp_ageint.nr_seq_estrutura
																			and 		c.nr_seq_pergunta = resp_ageint.nr_seq_pergunta) loop
																			
																			
								insert into ageint_resp_quest_item(
									nr_sequencia,
									nr_seq_ageint,
									nr_seq_item,
									nr_seq_resp_quest,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									nr_seq_quest_utilizacao
								) values (
									resp_quest_item.seq,
									nr_seq_ageint_w,
									item_transf_w[resp_quest_item.nr_sequencia].nr_seq_item_novo_w,--b.nr_sequencia,
									seq_resp_quest_inse_w,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									resp_quest_item.nr_seq_quest_utilizacao
								);
							end loop;
						end if;
				end loop;
			end if;
		end loop;
		if (seq_resp_ageint_remove_w.count > 0) then
			for linha in 1..seq_resp_ageint_remove_w.last loop
				if (seq_resp_ageint_remove_w.exists(linha)) then
					update 	ageint_resp_quest
					set 	nr_seq_resp  = NULL,
						ds_resposta  = NULL
					where 	nr_sequencia = linha;
				end if;
			end loop;
		end if;
	end if;
	end;
begin

ds_lista_w := ds_lista_itens_p;
if (ds_lista_w IS NOT NULL AND ds_lista_w::text <> '') then

	while(ds_lista_w IS NOT NULL AND ds_lista_w::text <> '') loop
		nr_seq_ageint_item_w := atualizar_seq_item_lista;
		inserir_item_lista(nr_seq_ageint_item_w);
	end loop;

	obter_info_agendamento;

	select 	nextval('agenda_integrada_seq')
	into STRICT	nr_seq_ageint_w
	;

	select 	max(nr_sequencia)
	into STRICT 	nr_seq_status_w
	from 	agenda_integrada_status
	where 	ie_status_tasy = 'EA'
	and 	ie_situacao = 'A';

	insert into agenda_integrada(nr_sequencia,
                dt_atualizacao,
                nm_usuario,
                dt_atualizacao_nrec,
                nm_usuario_nrec,
                dt_inicio_agendamento,
                nr_seq_status,
                cd_pessoa_fisica,
                cd_convenio,
                cd_categoria,
                cd_plano,
                nr_doc_convenio,
                dt_validade_carteira,
                cd_usuario_convenio,
                nm_contato,
                nr_telefone,
                cd_profissional,
                cd_estabelecimento,
                qt_peso,
                qt_altura_cm,
                nm_paciente,
                dt_nascimento,
                cd_empresa,
                nr_seq_cobertura,
                ds_observacao,
				ie_sexo,
				nr_seq_classificacao,
				cd_tipo_acomodacao,
				cd_medico_solicitante,
                ie_tipo_atendimento,
				qt_idade_pac,
				ie_turno)
	values (nr_seq_ageint_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nr_seq_status_w,
		cd_pessoa_fisica_w,
		cd_convenio_w,
		cd_categoria_w,
		cd_plano_w,
		nr_doc_convenio_w,
		dt_validade_carteira_w,
		cd_usuario_convenio_w,
		nm_contato_w,
		nr_telefone_w,
		cd_profissional_w,
		cd_estabelecimento_p,
		qt_peso_w,
		qt_altura_cm_w,
		nm_paciente_w,
		dt_nascimento_w,
		cd_empresa_w,
		nr_seq_cobertura_w,
		ds_observacao_w,
		ie_sexo_w,
		nr_seq_classificacao_w,
		cd_tipo_acomodacao_w,
		cd_medico_solicitante_w,
		ie_tipo_atendimento_w,
		qt_idade_pac_w,
		ie_turno_w);

	tratar_inserir_itens;
	tratar_inserir_quest;
end if;

nr_seq_ageint_p := nr_seq_ageint_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_multitransferencia_item ( ds_lista_itens_p text, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_ageint_p out bigint ) is TYPE ageint_anterior_row IS RECORD ( cd_categoria agenda_integrada.cd_categoria %type, cd_convenio agenda_integrada.cd_convenio %type, cd_empresa agenda_integrada.cd_empresa %type, cd_estabelecimento agenda_integrada.cd_estabelecimento %type, cd_pessoa_fisica agenda_integrada.cd_pessoa_fisica %type, cd_plano agenda_integrada.cd_plano %type, cd_profissional agenda_integrada.cd_profissional %type, cd_usuario_convenio agenda_integrada.cd_usuario_convenio %type, ds_observacao agenda_integrada.ds_observacao %type, dt_atualizacao agenda_integrada.dt_atualizacao %type, dt_atualizacao_nrec agenda_integrada.dt_atualizacao_nrec %type, dt_inicio_agendamento agenda_integrada.dt_inicio_agendamento %type, dt_nascimento agenda_integrada.dt_nascimento %type, dt_validade_carteira agenda_integrada.dt_validade_carteira %type, nm_contato agenda_integrada.nm_contato %type, nm_paciente agenda_integrada.nm_paciente %type, nm_usuario agenda_integrada.nm_usuario %type, nm_usuario_nrec agenda_integrada.nm_usuario_nrec %type, nr_doc_convenio agenda_integrada.nr_doc_convenio %type, nr_sequencia agenda_integrada.nr_sequencia %type, nr_seq_cobertura agenda_integrada.nr_seq_cobertura %type, nr_seq_status agenda_integrada.nr_seq_status %type, nr_telefone agenda_integrada.nr_telefone %type, qt_altura_cm agenda_integrada.qt_altura_cm %type, qt_peso agenda_integrada.qt_peso %type, ie_cod_usuario_mae_resp agenda_integrada.ie_cod_usuario_mae_resp %type, ie_tipo_atendimento agenda_integrada.ie_tipo_atendimento %type, qt_idade_pac agenda_integrada.qt_idade_pac %type ) FROM PUBLIC;

