-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_fluxo_caixa_lote_agenda (nr_seq_lote_fluxo_p bigint, cd_empresa_p bigint, cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) AS $body$
DECLARE

 
/*--------------------------------------------------------------- ATENÇÃO ----------------------------------------------------------------*/
 
/* Cuidado ao realizar alterações no fluxo de caixa em lote. Toda e qualquer alteração realizada em qualquer uma */
 
/* das procedures do fluxo de caixa em lote deve ser cuidadosamente verificada e realizada no fluxo de caixa   */
 
/* convencional. Devemos garantir que os dois fluxos de caixa tragam os mesmos valores no resultado, evitando   */
 
/* assim que existam diferenças entre os fluxos de caixa.                                                */
 
/*--------------- AO ALTERAR O FLUXO DE CAIXA EM LOTE ALTERAR TAMBÉM O FLUXO DE CAIXA ---------------*/
 
 
cd_convenio_w			bigint;
cd_categoria_w			varchar(150);
cd_tipo_acomodacao_w		bigint;
cd_conta_financ_w		bigint;
tx_procedimento_w		double precision;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
vl_fluxo_w			double precision;
dt_agenda_w			timestamp;
ie_tipo_acomod_w		varchar(100);
ie_tipo_proc_w			varchar(100);
ie_operacao_w			varchar(10);
ie_conta_financ_ativa_w		varchar(1);
dt_inicio_w			timestamp;
dt_final_w			timestamp;
cd_agenda_w			agenda.cd_agenda%type;

c01 CURSOR FOR 
SELECT	'P' ie_tipo_proc, 
	coalesce(a.cd_convenio, 0), 
	coalesce(a.cd_categoria, '0'), 
	coalesce(a.cd_tipo_acomodacao, 0), 
	trunc(a.dt_agenda, 'dd'), 
	a.cd_procedimento, 
	a.ie_origem_proced, 
	b.cd_agenda 
from	agenda b, 
	agenda_paciente a 
where	a.cd_agenda		= b.cd_agenda 
and	b.cd_estabelecimento	= cd_estabelecimento_p 
and	a.dt_agenda		between dt_inicio_w and dt_final_w 
and	(a.cd_procedimento IS NOT NULL AND a.cd_procedimento::text <> '') 
and	coalesce(a.nr_atendimento::text, '') = '' 

union all
 
SELECT	'A' ie_tipo_proc, 
	coalesce(c.cd_convenio, coalesce(a.cd_convenio, 0)), 
	coalesce(c.cd_categoria, coalesce(a.cd_categoria, '0')), 
	coalesce(a.cd_tipo_acomodacao, 0), 
	trunc(a.dt_agenda, 'dd'), 
	c.cd_procedimento, 
	c.ie_origem_proced, 
	b.cd_agenda 
from	agenda_paciente_proc c, 
	agenda b, 
	agenda_paciente a 
where	a.cd_agenda		= b.cd_agenda 
and	b.cd_estabelecimento	= cd_estabelecimento_p 
and	a.dt_agenda		between dt_inicio_w and dt_final_w 
and	coalesce(a.nr_atendimento::text, '') = '' 
and	a.nr_sequencia		= c.nr_sequencia;

c02 CURSOR FOR 
SELECT	b.cd_conta_financ, 
	b.tx_procedimento 
from	conta_financ_regra_agenda b, 
	conta_financeira a 
where	a.cd_conta_financ				= b.cd_conta_financ 
and	a.cd_estabelecimento				= cd_estabelecimento_p 
and	coalesce(b.cd_convenio, cd_convenio_w) 		= cd_convenio_w 
and	coalesce(b.cd_categoria, cd_categoria_w)		= cd_categoria_w 
and	coalesce(b.cd_tipo_acomodacao, cd_tipo_acomodacao_w)	= cd_tipo_acomodacao_w 
and	((b.ie_tipo_proc	= 'T') or (b.ie_tipo_proc	= ie_tipo_proc_w)) 
and	a.ie_situacao					= 'A' 
order 	by coalesce(b.cd_convenio, 0), 
	coalesce(b.cd_categoria, 0), 
	coalesce(b.cd_tipo_acomodacao, 0);

c03 CURSOR FOR 
SELECT	a.vl_pacote 
from	pacote_tipo_acomodacao a, 
	pacote b 
where	b.nr_seq_pacote				= a.nr_seq_pacote 
and	b.cd_convenio				= cd_convenio_w 
and	b.cd_estabelecimento			= cd_estabelecimento_p 
and	((coalesce(a.cd_categoria, cd_categoria_w)	= cd_categoria_w) or (cd_categoria_w = '0')) 
and	((coalesce(a.ie_tipo_acomod, ie_tipo_acomod_w)= ie_tipo_acomod_w) or (ie_tipo_acomod_w = 0)) 
and	dt_agenda_w				between coalesce(a.dt_vigencia, dt_agenda_w - 1) and coalesce(a.dt_vigencia_final, dt_agenda_w + 1) 
and	a.cd_procedimento			= cd_procedimento_w 
and	a.ie_origem_proced			= ie_origem_proced_w 
order	by coalesce(a.cd_categoria,0), 
	coalesce(a.ie_tipo_acomod,0);


BEGIN 
 
dt_inicio_w	:= trunc(dt_inicial_p, 'dd');
dt_final_w	:= fim_dia(dt_final_p);
 
open c01;
loop 
fetch c01 into 
	ie_tipo_proc_w, 
	cd_convenio_w, 
	cd_categoria_w, 
	cd_tipo_acomodacao_w, 
	dt_agenda_w, 
	cd_procedimento_w, 
	ie_origem_proced_w, 
	cd_agenda_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
 
	cd_conta_financ_w		:= null;
	open c02;
	loop 
	fetch c02 into 
		cd_conta_financ_w, 
		tx_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
	end loop;
	close c02;
 
	if (cd_conta_financ_w IS NOT NULL AND cd_conta_financ_w::text <> '') then 
 
 
		select	max(ie_classificacao) 
		into STRICT	ie_tipo_acomod_w 
		from	tipo_acomodacao 
		where	cd_tipo_acomodacao	= cd_tipo_acomodacao_w;
 
		vl_fluxo_w		:= 0;
		open c03;
		loop 
		fetch c03 into 
			vl_fluxo_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
		end loop;
		close c03;
 
		if (vl_fluxo_w > 0) then 
		 
			CALL GERAR_FLUXO_CAIXA_LOTE(	dt_agenda_w, 
						cd_conta_financ_w, 
						'', 
						'15', 
						'AC', 
						nm_usuario_p, 
						cd_agenda_w, 
						null, 
						null, 
						null, 
						null, 
						null, 
						null, 
						null, 
						nr_seq_lote_fluxo_p, 
						null, 
						null, 
						null, 
						null, 
						null, 
						null, 
						null, 
						vl_fluxo_w * (tx_procedimento_w / 100));
		end if;
	end if;
 
end loop;
close c01;
 
/*NAO COLOCAR COMMIT NESTA PROCEDURE*/
 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_fluxo_caixa_lote_agenda (nr_seq_lote_fluxo_p bigint, cd_empresa_p bigint, cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) FROM PUBLIC;

