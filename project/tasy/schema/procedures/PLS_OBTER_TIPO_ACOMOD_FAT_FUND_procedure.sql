-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_obter_tipo_acomod_fat_fund ( nr_seq_pagador_p pls_conv_acomod_fat_fund.nr_seq_pagador%type, cd_procedimento_p pls_conv_acomod_fat_fund.cd_procedimento%type, ie_origem_proced_p pls_conv_acomod_fat_fund.ie_origem_proced%type, ie_tipo_acomodacao_conv_p INOUT pls_conv_acomod_fat_fund.ie_tipo_acomodacao_conv%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Busca regra de conversão de tipo de acomodação '2.0 SeSI' / '3.0 Fundação'
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
-------------------------------------------------------------------------------------------------------------------
Referências:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_tipo_acomodacao_conv_w	pls_conv_acomod_fat_fund.ie_tipo_acomodacao_conv%type;
cd_area_procedimento_w		especialidade_proc.cd_area_procedimento%type;
cd_especialidade_w		grupo_proc.cd_especialidade%type;
cd_grupo_proc_w			procedimento.cd_grupo_proc%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;

c01 CURSOR FOR
	SELECT	ie_tipo_acomodacao_conv
	from	pls_conv_acomod_fat_fund
	where	((nr_seq_pagador = nr_seq_pagador_p) or (coalesce(nr_seq_pagador::text, '') = ''))
	and	((coalesce(cd_procedimento::text, '') = '') or (cd_procedimento = cd_procedimento_p))
	and	((coalesce(cd_procedimento::text, '') = '') or (coalesce(ie_origem_proced::text, '') = '') or (ie_origem_proced = ie_origem_proced_w))
	and	dt_inicio_vigencia <= clock_timestamp()
	and	(( dt_fim_vigencia >= clock_timestamp() ) or ( coalesce(dt_fim_vigencia::text, '') = ''))
	order by coalesce(nr_seq_pagador,0),
		coalesce(cd_procedimento,0),
		ie_tipo_acomodacao_conv;


BEGIN
SELECT * FROM pls_obter_estrut_proc(	cd_procedimento_p, ie_origem_proced_p, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w ) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_proced_w;

open C01;
loop
fetch C01 into
	ie_tipo_acomodacao_conv_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
end loop;
close C01;

ie_tipo_acomodacao_conv_p	:= ie_tipo_acomodacao_conv_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obter_tipo_acomod_fat_fund ( nr_seq_pagador_p pls_conv_acomod_fat_fund.nr_seq_pagador%type, cd_procedimento_p pls_conv_acomod_fat_fund.cd_procedimento%type, ie_origem_proced_p pls_conv_acomod_fat_fund.ie_origem_proced%type, ie_tipo_acomodacao_conv_p INOUT pls_conv_acomod_fat_fund.ie_tipo_acomodacao_conv%type) FROM PUBLIC;

