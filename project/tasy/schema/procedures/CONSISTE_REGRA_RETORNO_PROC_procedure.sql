-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_regra_retorno_proc ( nr_seq_regra_p bigint, nr_atendimento_p bigint, ds_retorno_p INOUT text) AS $body$
DECLARE




cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
cd_grupo_proc_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
qt_existe_w			bigint	:=	0;
ie_todos_regras_w varchar(1);
ie_existe_regra_w bigint;

C01 CURSOR FOR
	SELECT	coalesce(cd_area_procedimento,0),
	coalesce(cd_especialidade,0),
	coalesce(cd_grupo_proc,0),	
	coalesce(cd_procedimento,0),
	coalesce(ie_origem_proced,0)
from	regra_atend_retorno_proc
where	nr_seq_regra	=    nr_seq_regra_p;


procedure validar_regra_proc(
		cd_area_procedimento_p bigint,
		cd_especialidade_p bigint,
		cd_grupo_proc_p bigint,
		cd_procedimento_p bigint,
		ie_origem_proced_p bigint) is

;
BEGIN


	if	((cd_area_procedimento_p > 0) or (cd_especialidade_p > 0) or (cd_grupo_proc_p > 0) or (cd_procedimento_p > 0)) then
		
		begin
		
		
		if (cd_area_procedimento_p > 0) then
		
		
			select	count(*)
			into STRICT	qt_existe_w
			from	procedimento_paciente a,
				estrutura_procedimento_v b
			where	a.nr_atendimento	= 	nr_atendimento_p
			and	a.cd_procedimento	=	b.cd_procedimento
			and	a.ie_origem_proced	=	b.ie_origem_proced
			and	coalesce(b.cd_area_procedimento, cd_area_procedimento_p)  =	cd_area_procedimento_p;
			
		elsif (cd_especialidade_p > 0) then
		
			select	count(*)
			into STRICT	qt_existe_w
			from	procedimento_paciente a,
				estrutura_procedimento_v b
			where	a.nr_atendimento	= 	nr_atendimento_p
			and	a.cd_procedimento	=	b.cd_procedimento
			and	a.ie_origem_proced	=	b.ie_origem_proced
			and	coalesce(b.cd_especialidade, cd_especialidade_p)  =	cd_especialidade_p;
				
			
		elsif (cd_grupo_proc_p > 0) then
		
			select	count(*)
			into STRICT	qt_existe_w
			from	procedimento_paciente a,
				estrutura_procedimento_v b
			where	a.nr_atendimento	= 	nr_atendimento_p
			and	a.cd_procedimento	=	b.cd_procedimento
			and	a.ie_origem_proced	=	b.ie_origem_proced
			and	coalesce(b.cd_grupo_proc, cd_grupo_proc_p)  =	cd_grupo_proc_p;
			
			
		elsif (cd_procedimento_p > 0) and (ie_origem_proced_p > 0) then
		
			select	count(*)
			into STRICT	qt_existe_w
			from	procedimento_paciente a,
				estrutura_procedimento_v b
			where	a.nr_atendimento	= 	nr_atendimento_p
			and	a.cd_procedimento	=	b.cd_procedimento
			and	a.ie_origem_proced	=	b.ie_origem_proced
			and	coalesce(b.cd_procedimento, cd_procedimento_p)  	=	cd_procedimento_p
			and	coalesce(b.ie_origem_proced, ie_origem_proced_p)	=	ie_origem_proced_p;
		
		end if;
		
		end;
	else	
		qt_existe_w	:=	999;	--Nao foi encontrado regra de procedimento para a regra de retorno, entao nao deve consisderar essa regra.
	end if;

end;

begin


select count(*)
into STRICT ie_existe_regra_w
from	regra_atend_retorno_proc
where	nr_seq_regra	=    nr_seq_regra_p
and (
	coalesce(cd_area_procedimento,0) > 0
	or coalesce(cd_especialidade,0)> 0
	or coalesce(cd_grupo_proc,0)> 0	
	or coalesce(cd_procedimento,0) > 0
);


if ( ie_existe_regra_w > 0) then

	ie_todos_regras_w := Obter_param_Usuario(916, 1228, obter_perfil_ativo, obter_usuario_ativo, obter_estabelecimento_ativo, ie_todos_regras_w);
	
	if (coalesce(ie_todos_regras_w,'N') = 'N') then --validar uma regra
		select	max(coalesce(cd_area_procedimento,0)),
			max(coalesce(cd_especialidade,0)),
			max(coalesce(cd_grupo_proc,0)),	
			max(coalesce(cd_procedimento,0)),
			max(coalesce(ie_origem_proced,0))
		into STRICT	cd_area_procedimento_w,
			cd_especialidade_w,
			cd_grupo_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w
		from	regra_atend_retorno_proc
		where	nr_seq_regra	=    nr_seq_regra_p;
		
		validar_regra_proc(
			cd_area_procedimento_w,
			cd_especialidade_w,
			cd_grupo_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w);

	else --validar todos
		open C01;
		loop
			fetch C01 into	
			cd_area_procedimento_w,
			cd_especialidade_w,
			cd_grupo_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w;
			EXIT WHEN NOT FOUND or ( qt_existe_w > 0);  /* apply on C01 */
			
			validar_regra_proc(
				cd_area_procedimento_w,
				cd_especialidade_w,
				cd_grupo_proc_w,
				cd_procedimento_w,
				ie_origem_proced_w);
			
		end loop;
		close C01;

	end if;

else
	qt_existe_w	:=	999; --Nao foi encontrado regra de procedimento para a regra de retorno, entao nao deve consisderar essa regra.
end if;	
	
	
if (qt_existe_w > 0) then
	ds_retorno_p	:=	'S';
else
	ds_retorno_p	:=	'N';
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_regra_retorno_proc ( nr_seq_regra_p bigint, nr_atendimento_p bigint, ds_retorno_p INOUT text) FROM PUBLIC;

