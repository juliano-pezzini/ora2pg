-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_proced_assoc_rec ( nr_prescricao_p bigint, cd_tipo_recomendacao_p bigint, nm_usuario_p text, ie_conta_rep_p text) AS $body$
DECLARE


cd_procedimento_w		bigint;
ie_orig_proced_w		bigint;
qt_procedimento_w		double precision;
nr_seq_exame_w			bigint;
ds_observacao_w			varchar(255);
cd_setor_atendimento_ww		integer;
nr_agrup_acum_w			bigint;
nr_seq_acum_w			bigint;
cd_estabelecimento_w		bigint;
nr_seq_proc_interno_w		bigint;
nr_atendimento_w		bigint;
cont_w				bigint;
nr_horas_validade_w		bigint;

dt_prescricao_w			timestamp;
cd_material_exame_w		varchar(20);
cd_intervalo_w			varchar(7);
ds_horarios_w			varchar(2000);
nr_ocorrencia_w			double precision;
cd_convenio_w			bigint;
ie_tipo_convenio_w			smallint;
ie_prescr_proc_sem_lib_w	varchar(1);
cd_perfil_w				integer	:= obter_perfil_ativo;
cd_setor_atendimento_w  setor_atendimento.cd_setor_atendimento%type;

c01 CURSOR FOR
SELECT	cd_procedimento,
	ie_origem_proced,
	qt_procedimento,
	nr_seq_exame,
	cd_material_exame,
	ds_observacao,
	cd_setor_atendimento,
	nr_seq_proc_interno,
	coalesce(cd_intervalo,cd_intervalo_w)
from	regra_proced_recomendacao a
where	a.cd_tipo_recomendacao	= cd_tipo_recomendacao_p
and	((coalesce(a.cd_convenio::text, '') = '') or (a.cd_convenio = cd_convenio_w))
and	((coalesce(a.ie_tipo_convenio::text, '') = '') or (a.ie_tipo_convenio = ie_tipo_convenio_w))
and	((coalesce(cd_estab::text, '') = '') or (cd_estab = cd_estabelecimento_w))
and	coalesce(a.ie_conta_rep,'P')	= coalesce(ie_conta_rep_p,'P')
and	((coalesce(a.cd_setor_regra::text, '') = '') or (a.cd_setor_regra = cd_setor_atendimento_w));


BEGIN

select	max(dt_prescricao),
	max(cd_estabelecimento),
	max(nr_atendimento),
	max(nr_horas_validade),
	max(obter_convenio_atendimento(nr_atendimento)),
	max(obter_tipo_convenio_atend(nr_atendimento)),
	max(cd_setor_atendimento)
into STRICT	dt_prescricao_w,
	cd_estabelecimento_w,
	nr_atendimento_w,
	nr_horas_validade_w,
	cd_convenio_w,
	ie_tipo_convenio_w,
	cd_setor_atendimento_w
from	prescr_medica
where	nr_prescricao	= nr_prescricao_p;

ie_prescr_proc_sem_lib_w := Obter_Param_Usuario(924, 530, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_prescr_proc_sem_lib_w);

select	max(cd_intervalo),
	max(ds_horarios)
into STRICT	cd_intervalo_w,
	ds_horarios_w
from	prescr_recomendacao
where	nr_prescricao	= nr_prescricao_p
and	cd_recomendacao	= cd_tipo_recomendacao_p;

open C01;
loop
fetch C01 into
	cd_procedimento_w,
	ie_orig_proced_w,
	qt_procedimento_w,
	nr_seq_exame_w,
	cd_material_exame_w,
	ds_observacao_w,
	cd_setor_atendimento_ww,
	nr_seq_proc_interno_w,
	cd_intervalo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */

	if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
		SELECT * FROM Obter_Proc_Tab_Interno(nr_seq_proc_interno_w, nr_prescricao_p, nr_atendimento_w, 0, cd_procedimento_w, ie_orig_proced_w, null, null) INTO STRICT cd_procedimento_w, ie_orig_proced_w;
	end if;

	select	count(*)
	into STRICT	cont_w
	from	prescr_procedimento
	where	nr_prescricao	= nr_prescricao_p
	and	cd_procedimento	= cd_procedimento_w
	and	ie_origem_proced = ie_orig_proced_w
	and	cd_intervalo	= cd_intervalo_w;

	nr_ocorrencia_w	:= obter_ocorrencia_intervalo(cd_intervalo_w, nr_horas_validade_w, 'O');

	if (cont_w = 0) and (cd_procedimento_w > 0) then

		select	coalesce(max(nr_sequencia),0) + 1,
				coalesce(max(nr_agrupamento),0) + 1
		into STRICT	nr_seq_acum_w,
				nr_agrup_acum_w
		from	prescr_procedimento
		where	nr_prescricao		= nr_prescricao_p;

		Insert	into Prescr_Procedimento(
			nr_prescricao,
			nr_sequencia,
			cd_procedimento,
			ie_origem_proced,
			qt_procedimento,
			dt_atualizacao,
			nm_usuario,
			cd_motivo_baixa,
			cd_intervalo,
			ie_urgencia,
			cd_setor_atendimento,
			ds_dado_clinico,
			dt_prev_execucao,
			ie_suspenso,
			cd_material_exame,
			nr_seq_exame,
			ie_amostra,
			ie_executar_leito,
			nr_agrupamento,
			ie_se_necessario,
			ie_acm,
			ds_horarios,
			nr_ocorrencia,
			nr_seq_interno,
			ie_avisar_result,
			ie_cobra_paciente,
			cd_medico_exec,
			ie_origem_inf,
			nr_seq_proc_interno,
			cd_tipo_recomendacao)
		values (nr_prescricao_p,
			nr_seq_acum_w,
			cd_procedimento_w,
			ie_orig_proced_w,
			qt_procedimento_w,
			clock_timestamp(),
			nm_usuario_p,
			0,
			cd_intervalo_w,
			'N',
			cd_setor_atendimento_ww,
			null,
			Obter_data_prev_exec(dt_prescricao_w,clock_timestamp(),Obter_setor_Atend_proc(cd_estabelecimento_w, cd_procedimento_w,ie_orig_proced_w, null, cd_setor_atendimento_ww, nm_usuario_p,null,nr_atendimento_w), nr_prescricao_p, 'A'),
			'N',
			cd_material_exame_w,
			nr_seq_exame_w,
			'N',
			'N',
			nr_agrup_acum_w,
			'N',
			'N',
			ds_horarios_w,
			nr_ocorrencia_w,
			nextval('prescr_procedimento_seq'),
			'N',
			'S',
			null,
			'S',
			nr_seq_proc_interno_w,
			cd_tipo_recomendacao_p
			);

			if (ie_prescr_proc_sem_lib_w = 'S') then
				CALL Gerar_prescr_proc_sem_dt_lib(nr_prescricao_p,nr_seq_acum_w,cd_perfil_w,'N',nm_usuario_p);
			end if;

	end if;

end loop;
close C01;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_proced_assoc_rec ( nr_prescricao_p bigint, cd_tipo_recomendacao_p bigint, nm_usuario_p text, ie_conta_rep_p text) FROM PUBLIC;

