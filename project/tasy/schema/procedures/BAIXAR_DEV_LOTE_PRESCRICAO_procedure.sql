-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baixar_dev_lote_prescricao ( nr_lote_p bigint, ie_opcao_p INOUT text, cd_estabelecimento_p bigint, nm_usuario_p text, cd_motivo_devolucao_p bigint) AS $body$
DECLARE


/*
ie_opcao_p
LT = Limpa tabela
GR = Gera registros tabela W
B = Baixa devolucao
*/
nr_lote_prescr_w		bigint;
nr_prescricao_w			bigint;
nr_atendimento_w		bigint;
nr_devolucao_w			bigint;
nr_devolucao_ant_w		bigint;
nr_seq_item_w			bigint;
qt_material_w			double precision;
cd_local_estoque_w		smallint;
dt_recebimento_w		timestamp;
cd_tipo_baixa_w			varchar(5);
cd_pessoa_fisica_devol_w	varchar(10) := '';
qt_existe_w			integer;
cd_perfil_ativo_w		integer;
ie_permite_baixa_w		varchar(1);
cd_motivo_devolucao_w		varchar(3);
ie_opcao_w			varchar(5) := 'LT';

C01 CURSOR FOR
	SELECT	distinct a.nr_seq_lote,
		b.nr_prescricao,
		obter_atendimento_prescr(b.nr_prescricao)
	from	w_ap_lote_baixa_devolucao a,
		ap_lote b
	where	a.nm_usuario = nm_usuario_p
	and	a.nr_seq_lote = b.nr_sequencia
	order by 3;

C02 CURSOR FOR
	SELECT	b.nr_devolucao,
		a.nr_sequencia,
		a.qt_material,
		a.cd_local_estoque,
		a.dt_recebimento
	from	item_devolucao_material_pac a,
		devolucao_material_pac b
	where	a.nr_seq_lote = nr_lote_prescr_w
	and	coalesce(a.dt_recebimento::text, '') = ''
	and	(b.dt_liberacao_baixa IS NOT NULL AND b.dt_liberacao_baixa::text <> '')
	and	a.nr_prescricao = nr_prescricao_w
	and	b.nr_devolucao = a.nr_devolucao;

C03 CURSOR FOR
	SELECT	a.nr_seq_lote
	from	w_ap_lote_sem_devolucao a,
		ap_lote b
	where	a.nm_usuario = nm_usuario_p
	and	a.nr_seq_lote = b.nr_sequencia
	order by 1;


BEGIN

cd_perfil_ativo_w := obter_perfil_ativo;

if	((ie_opcao_p = 'LT') or (ie_opcao_p = 'GR')) and (coalesce(nr_lote_p,0) > 0) then

	if (ie_opcao_p = 'LT') then
		delete	FROM w_ap_lote_baixa_devolucao
		where	nm_usuario = nm_usuario_p;
		
		delete FROM w_ap_lote_sem_devolucao
		where	nm_usuario = nm_usuario_p;
		commit;
	end if;
	
	ie_permite_baixa_w := obter_param_usuario(42, 99, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_p, ie_permite_baixa_w);
	
	if (ie_permite_baixa_w = 'S') then
		/* Verifica se existe devolucao para o lote informado. Caso nao exista grava o registro na tabela w_ap_lote_sem_devolucao */

		select	count(*)
		into STRICT	qt_existe_w
		from	item_devolucao_material_pac a,
			devolucao_material_pac b
		where	a.nr_seq_lote = nr_lote_p
		and	b.nr_devolucao = a.nr_devolucao;
		
		if (qt_existe_w = 0) then
			insert into w_ap_lote_sem_devolucao(nr_seq_lote,nm_usuario) values (nr_lote_p,nm_usuario_p);
		end if;
	end if;
	
	insert into w_ap_lote_baixa_devolucao(nr_seq_lote,nm_usuario) values (nr_lote_p,nm_usuario_p);

elsif (ie_opcao_p = 'B') and (coalesce(nr_lote_p,0) = 0) then

	/* Gera devolucao para os lotes gravados na tabela w_ap_lote_sem_devolucao */

	select	count(*)
	into STRICT	qt_existe_w
	from	w_ap_lote_sem_devolucao
	where	nm_usuario = nm_usuario_p;
	
	cd_motivo_devolucao_w := cd_motivo_devolucao_p;
	
	if (qt_existe_w > 0) then
		if (coalesce(cd_motivo_devolucao_w,0) = 0) then
			cd_motivo_devolucao_w := obter_param_usuario(42, 15, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_p, cd_motivo_devolucao_w);
		end if;
		/* Gerar os lote na tabela w_ap_lote_devolucao */

		open C03;
		loop
		fetch C03 into	
			nr_lote_prescr_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			
			ie_opcao_w := gerar_dev_lote_prescricao(
					nr_lote_prescr_w, 0, ie_opcao_w, cd_estabelecimento_p, nm_usuario_p);
			
			end;
		end loop;
		close C03;
		
		/* Gera a devolucao e libera */

		ie_opcao_w := 'D';
		
		ie_opcao_w := gerar_dev_lote_prescricao(
				0, cd_motivo_devolucao_w, ie_opcao_w, cd_estabelecimento_p, nm_usuario_p);
	end if;
	
	/* Baixa devolucao */

	cd_tipo_baixa_w := obter_param_usuario(42, 22, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, cd_tipo_baixa_w);

	cd_pessoa_fisica_devol_w := obter_pessoa_fisica_usuario(nm_usuario_p,'C');
	
	open C01;
	loop
	fetch C01 into	
		nr_lote_prescr_w,
		nr_prescricao_w,
		nr_atendimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		open C02;
		loop
		fetch C02 into	
			nr_devolucao_w,
			nr_seq_item_w,
			qt_material_w,
			cd_local_estoque_w,
			dt_recebimento_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			if (coalesce(dt_recebimento_w::text, '') = '') then
			
				CALL baixa_devolucao_med(	nr_devolucao_w,
							nr_seq_item_w,
							nm_usuario_p,
							cd_tipo_baixa_w,
							qt_material_w,
							cd_pessoa_fisica_devol_w,
							cd_local_estoque_w,
							'B',
							cd_estabelecimento_p);
			end if;
			
			end;
		end loop;
		close C02;
		
		select	count(*)
		into STRICT	qt_existe_w
		from	item_devolucao_material_pac
		where	nr_devolucao = nr_devolucao_w
		and	coalesce(dt_recebimento::text, '') = '';
		
		if (qt_existe_w = 0) then

			update	devolucao_material_pac
			set	dt_baixa_total = clock_timestamp(),
				nm_usuario_baixa = nm_usuario_p
			where	nr_devolucao = nr_devolucao_w;
			
		end if;
		
		end;
	end loop;
	close C01;
	
end if;

if (ie_opcao_p = 'LT') then
	ie_opcao_p := 'GR';
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baixar_dev_lote_prescricao ( nr_lote_p bigint, ie_opcao_p INOUT text, cd_estabelecimento_p bigint, nm_usuario_p text, cd_motivo_devolucao_p bigint) FROM PUBLIC;

