-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_nf_mens_pf ( nr_seq_lote_p bigint, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, nr_seq_classif_fiscal_p bigint, nr_seq_sit_trib_p bigint, cd_serie_nf_p text, dt_emissao_p timestamp, ds_complemento_p text, ds_observacao_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_sequencia_w			bigint;
nr_nota_fiscal_w		varchar(255);
nr_sequencia_nf_w		smallint;
vl_mercadoria_w			double precision;
vl_total_nota_w			double precision;
vl_ipi_w			double precision;
vl_descontos_w			double precision;
vl_frete_w			double precision;
vl_seguro_w			double precision;
vl_despesa_acessoria_w		double precision;
vl_desconto_rateio_w		double precision;
vl_desc_item_w			double precision;
vl_desc_acum_w			double precision;
ie_tipo_nota_w			varchar(3);
dt_vencimento_w			timestamp;
vl_unitario_item_w		double precision;
vl_total_item_w			double precision;
ie_tipo_item_w			varchar(3);
vl_item_mens_w			double precision;
cd_procedimento_w		bigint	:= null;
ie_origem_proced_w		bigint	:= null;
cd_condicao_pagamento_w		bigint;
nr_item_nf_w			integer;
nr_seq_tipo_lanc_w		bigint;
cd_operacao_nf_w		bigint;
ie_forma_pagamento_w		smallint;
cd_conta_financ_w		bigint;
vl_liquido_nota_w		double precision;
cd_conta_debito_w		varchar(20);
qt_nota_gerada_w		bigint;
ie_geracao_nota_titulo_w	varchar(2);
dt_referencia_w			timestamp;
cd_cgc_w			varchar(14);
vl_lote_w			double precision;
cd_material_w			varchar(6)	:= null;
ds_complemento_w		varchar(255);
ds_observacao_w			varchar(255);
cd_cgc_emissao_nf_w		varchar(14)	:= null;
ie_estab_serie_nf_w		parametro_compras.ie_estab_serie_nf%type;
cd_cgc_emitente_w		estabelecimento.cd_cgc%type;
nr_seq_contrato_w		pls_contrato.nr_sequencia%type;
nr_item_nf_ww			integer;
nr_seq_grupo_item_w		pls_grupo_item_mens.nr_sequencia%type;
vl_unitario_item_nf_w		nota_fiscal_item.vl_unitario_item_nf%type;

c02 CURSOR FOR 
	SELECT	a.ie_tipo_item, 
		(null)::numeric  nr_seq_tipo_lanc, 
		sum(vl_item), 
		a.cd_conta_deb 
	from	pls_mensalidade_seg_item a, 
		pls_mensalidade_segurado b, 
		pls_mensalidade c, 
		pls_lote_nf_mens_item d 
	where	d.nr_seq_mensalidade	= c.nr_sequencia 
	and	b.nr_seq_mensalidade	= c.nr_sequencia 
	and	a.nr_seq_mensalidade_seg = b.nr_sequencia 
	and	d.nr_seq_lote		= nr_seq_lote_p 
	group by 
		a.ie_tipo_item, 
		a.cd_conta_deb 
	
union all
 
	SELECT	to_char(null) ie_tipo_item, 
		a.nr_seq_tipo_lanc, 
		sum(vl_adicional), 
		null cd_conta_debito 
	from	pls_mensalidade_seg_adic a, 
		pls_mensalidade_segurado b, 
		pls_mensalidade c, 
		pls_lote_nf_mens_item d 
	where	d.nr_seq_mensalidade	= c.nr_sequencia 
	and	b.nr_seq_mensalidade	= c.nr_sequencia 
	and	a.nr_seq_mensalidade_seg = b.nr_sequencia 
	and	d.nr_seq_lote		= nr_seq_lote_p 
	group by 
		a.nr_seq_tipo_lanc;

C03 CURSOR FOR 
	SELECT	nr_seq_grupo_item, 
		sum(vl_item) vl_item, 
		count(1) qt_item, 
		cd_procedimento, 
		cd_material, 
		ie_origem_proced 
	from (SELECT	b.nr_sequencia nr_seq_grupo_item, 
			d.vl_item vl_item, 
			a.cd_procedimento, 
			a.cd_material, 
			a.ie_origem_proced 
		from	pls_tipo_item_mens a, 
			pls_grupo_item_mens b, 
			pls_item_grupo_tipo_mens c, 
			pls_mensalidade_seg_item d, 
			pls_mensalidade_segurado e, 
			pls_mensalidade f, 
			pls_lote_nf_mens_item g 
		where	b.nr_sequencia = a.nr_seq_grupo_item 
		and	b.nr_sequencia = c.nr_seq_grupo_item 
		and  	c.ie_tipo_item = d.ie_tipo_item 
		and  	e.nr_sequencia = d.nr_seq_Mensalidade_seg 
		and   f.nr_sequencia = e.nr_seq_mensalidade 
		and	f.nr_sequencia = g.nr_seq_mensalidade 
		and   g.nr_seq_lote = nr_seq_lote_p 
		and	d.ie_tipo_item <> 20 
		and   (a.nr_seq_grupo_item IS NOT NULL AND a.nr_seq_grupo_item::text <> '') 
		
union all
 
		select	b.nr_sequencia nr_seq_grupo_item, 
			d.vl_item vl_item, 
			a.cd_procedimento, 
			a.cd_material, 
			a.ie_origem_proced 
		from	pls_tipo_item_mens a, 
			pls_grupo_item_mens b, 
			pls_item_grupo_tipo_mens c, 
			pls_mensalidade_seg_item d, 
			pls_mensalidade_segurado e, 
			pls_mensalidade f, 
			pls_lote_nf_mens_item g 
		where	b.nr_sequencia = a.nr_seq_grupo_item 
		and	b.nr_sequencia = c.nr_seq_grupo_item 
		and  	c.ie_tipo_item = d.ie_tipo_item 
		and  	e.nr_sequencia = d.nr_seq_Mensalidade_seg 
		and   f.nr_sequencia = e.nr_seq_mensalidade 
		and	f.nr_sequencia = g.nr_seq_mensalidade 
		and   g.nr_seq_lote = nr_seq_lote_p 
		and  	d.nr_seq_tipo_lanc = c.nr_seq_tipo_lanc 
		and	d.ie_tipo_item = 20 
		and   (a.nr_seq_grupo_item IS NOT NULL AND a.nr_seq_grupo_item::text <> '') 
		
union all
 
		select	b.nr_sequencia nr_seq_grupo_item, 
			d.vl_item vl_item, 
			a.cd_procedimento, 
			a.cd_material, 
			a.ie_origem_proced 
		from	pls_tipo_item_mens a, 
			pls_grupo_item_mens b, 
			pls_item_grupo_tipo_mens c, 
			pls_mensalidade_seg_item d, 
			pls_mensalidade_segurado e, 
			pls_mensalidade f, 
			pls_lote_nf_mens_item g 
		where	b.nr_sequencia = a.nr_seq_grupo_item 
		and	b.nr_sequencia = c.nr_seq_grupo_item 
		and  	c.ie_tipo_item = d.ie_tipo_item 
		and  	e.nr_sequencia = d.nr_seq_Mensalidade_seg 
		and   f.nr_sequencia = e.nr_seq_mensalidade 
		and	f.nr_sequencia = g.nr_seq_mensalidade 
		and   g.nr_seq_lote = nr_seq_lote_p 
		and	d.ie_tipo_item = 20 
		and  	coalesce(c.nr_seq_tipo_lanc::text, '') = '' 
		and	not exists (	select 1 
					from  pls_mensalidade_seg_item x, 
						pls_item_grupo_tipo_mens y 
					where  x.ie_tipo_item = y.ie_tipo_item 
					and   x.nr_sequencia = d.nr_sequencia 
					and   x.nr_seq_tipo_lanc = y.nr_seq_tipo_lanc) 
		and   (a.nr_seq_grupo_item IS NOT NULL AND a.nr_seq_grupo_item::text <> '')) alias7 
		group by 
			nr_seq_grupo_item, 
			cd_procedimento, 
			cd_material, 
			ie_origem_proced;

BEGIN 
 
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then 
	dt_vencimento_w	:= dt_emissao_p;
	ds_complemento_w	:= substr(ds_complemento_p,1,255);
	ds_observacao_w		:= substr(ds_observacao_p,1,255);
	 
	select	max(nr_seq_contrato) 
	into STRICT	nr_seq_contrato_w 
	from	pls_lote_nf_mensalidade 
	where	nr_sequencia	= nr_seq_lote_p;
	 
	/* obter se será considerado estabelecimento no parâmetro de compras */
 
	select	coalesce(max(ie_estab_serie_nf),'N') 
	into STRICT	ie_estab_serie_nf_w 
	from	parametro_compras 
	where	cd_estabelecimento = cd_estabelecimento_p;
	 
	select	max(cd_cgc) 
	into STRICT	cd_cgc_emitente_w 
	from	estabelecimento 
	where	cd_estabelecimento = cd_estabelecimento_p;
	 
	select	max(cd_cgc_estipulante) 
	into STRICT	cd_cgc_emissao_nf_w 
	from	pls_contrato 
	where	nr_sequencia	= nr_seq_contrato_w;
	 
	if (coalesce(cd_cgc_emissao_nf_w::text, '') = '') then 
		select	max(cd_cgc_emissao_nf) 
		into STRICT	cd_cgc_emissao_nf_w 
		from	pls_parametros 
		where	cd_estabelecimento	= cd_estabelecimento_p;
	end if;
	 
	select	coalesce(sum(b.vl_mensalidade),0) 
	into STRICT	vl_lote_w 
	from	pls_mensalidade b, 
		pls_lote_nf_mens_item a 
	where	a.nr_seq_mensalidade	= b.nr_sequencia 
	and	a.nr_seq_lote		= nr_seq_lote_p;
	 
	if (coalesce(cd_condicao_pagamento_w,0) = 0) then 
		select	max(cd_condicao_pagamento) 
		into STRICT	cd_condicao_pagamento_w 
		from	pls_parametros 
		where	cd_estabelecimento	= cd_estabelecimento_p;
	end if;
	 
	select	nextval('nota_fiscal_seq') 
	into STRICT	nr_sequencia_w 
	;
	 
	/* francisco - definir valores padrão - fiz conforme a gerar_nf_paciente */
 
	nr_nota_fiscal_w	:= nr_sequencia_w + 800000;
	vl_ipi_w		:= 0;
	vl_descontos_w		:= 0;
	vl_frete_w		:= 0;
	vl_seguro_w		:= 0;
	vl_despesa_acessoria_w	:= 0;
	vl_desconto_rateio_w	:= 0;
	nr_sequencia_nf_w	:= 9;
	vl_desc_item_w		:= 0;
	vl_desc_acum_w		:= 0;
	 
	if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then 
		ie_tipo_nota_w		:= 'SE';
	else 
		ie_tipo_nota_w		:= 'SF';
	end if;
	 
	vl_mercadoria_w		:= vl_lote_w;
	vl_total_nota_w		:= vl_lote_w;
	vl_unitario_item_w	:= vl_lote_w;
	vl_total_item_w		:= vl_lote_w;
	 
	if (coalesce(cd_condicao_pagamento_w::text, '') = '') then /* Falta informar a condição do pagamento nos parâmetros da OPS!*/
 
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 241537, null );
	else 
		insert	into	nota_fiscal(nr_sequencia, 
			cd_estabelecimento, 
			cd_cgc_emitente, 
			cd_serie_nf, 
			nr_nota_fiscal, 
			nr_sequencia_nf, 
			cd_operacao_nf, 
			dt_emissao, 
			dt_entrada_saida, 
			ie_acao_nf, 
			ie_emissao_nf, 
			ie_tipo_frete, 
			vl_mercadoria, 
			vl_total_nota, 
			qt_peso_bruto, 
			qt_peso_liquido, 
			dt_atualizacao, 
			nm_usuario, --fim obrigatorios 
			ie_tipo_nota, 
			cd_condicao_pagamento, 
			cd_natureza_operacao, 
			nr_seq_classif_fiscal, 
			ds_observacao, 
			vl_ipi, 
			vl_descontos, 
			vl_frete, 
			vl_seguro, 
			vl_despesa_acessoria, 
			cd_pessoa_fisica, 
			cd_cgc, 
			nr_seq_mensalidade, 
			ie_situacao, 
			nr_lote_contabil, 
			ie_entregue_bloqueto) 
		values (nr_sequencia_w, 
			cd_estabelecimento_p, 
			obter_cgc_estabelecimento(cd_estabelecimento_p), 
			cd_serie_nf_p, 
			nr_nota_fiscal_w, 
			nr_sequencia_nf_w, 
			cd_operacao_nf_p, 
			trunc(dt_emissao_p,'dd'), 
			dt_emissao_p, 
			'1', 
			'0', 
			'0', 
			vl_mercadoria_w, 
			vl_total_nota_w, 
			0, 
			0, 
			clock_timestamp(), 
			nm_usuario_p, -- fim obirgatorios 
			ie_tipo_nota_w, 
			cd_condicao_pagamento_w, 
			cd_natureza_operacao_p, 
			null, --nr_seq_classif_fiscal_p 
			ds_observacao_w, 
			vl_ipi_w, 
			vl_descontos_w, 
			vl_frete_w, 
			vl_seguro_w, 
			vl_despesa_acessoria_w, 
			null, 
			coalesce(cd_cgc_emissao_nf_w,obter_cgc_estabelecimento(cd_estabelecimento_p)), 
			null, 
			'1', 
			0, 
			'N');
	end if;
	 
	open c02;
	loop 
	fetch c02 into 
		ie_tipo_item_w, 
		nr_seq_tipo_lanc_w, 
		vl_item_mens_w, 
		cd_conta_debito_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		SELECT * FROM pls_obter_tipo_item_nf_mens(	ie_tipo_item_w, nr_seq_tipo_lanc_w, cd_estabelecimento_p, cd_procedimento_w, ie_origem_proced_w, cd_material_w, nr_seq_grupo_item_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w, cd_material_w, nr_seq_grupo_item_w;
		 
		if (ie_tipo_item_w = '3') then /* co-participação */
 
			select	max(c.cd_conta_deb) 
			into STRICT	cd_conta_debito_w 
			from	pls_conta_coparticipacao c, 
				pls_mensalidade_seg_item b, 
				pls_mensalidade_segurado a, 
				pls_mensalidade d, 
				pls_lote_nf_mens_item e 
			where	e.nr_seq_mensalidade = d.nr_sequencia 
			and	a.nr_seq_mensalidade = d.nr_sequencia 
			and	a.nr_sequencia	= b.nr_seq_mensalidade_seg 
			and	b.nr_seq_conta	= c.nr_seq_conta 
			and	b.ie_tipo_item	= ie_tipo_item_w 
			and	d.nr_seq_lote	= nr_seq_lote_p;
		end if;
		 
		if	((coalesce(cd_procedimento_w::text, '') = '') or (coalesce(ie_origem_proced_w::text, '') = '')) and (coalesce(cd_material_w::text, '') = '') and (coalesce(nr_seq_grupo_item_w::text, '') = '') then 
			CALL wheb_mensagem_pck.exibir_mensagem_abort( 241538, 'DS_ITEM='||coalesce(substr(obter_valor_dominio(1930,ie_tipo_item_w),1,100),substr(obter_descricao_padrao('PLS_TIPO_LANC_ADIC','DS_TIPO_LANCAMENTO',nr_seq_tipo_lanc_w),1,100)) );
			/*Falta cadastrar o procedimento ou material a ser lançado na nota para o tipo de item "' || DS_ITEM|| '"' || chr(13) || chr(10) || 
				'Cadastros gerais do Tasy (Shift+F11)-> Plano de Saúde -> OPS - Mensalidades -> Itens de mensalidade X Nota fiscal#@#@'); */
 
		end if;
		 
		if (coalesce(nr_seq_grupo_item_w::text, '') = '') then 
			select	coalesce(max(nr_item_nf),0) + 1 
			into STRICT	nr_item_nf_w 
			from	nota_fiscal_item 
			where	nr_sequencia	= nr_sequencia_w;
			 
			insert	into	nota_fiscal_item(nr_sequencia, 
				cd_estabelecimento, 
				cd_cgc_emitente, 
				cd_serie_nf, 
				nr_nota_fiscal, 
				nr_sequencia_nf, 
				nr_item_nf, 
				cd_natureza_operacao, 
				qt_item_nf, 
				vl_unitario_item_nf, 
				vl_total_item_nf, 
				vl_liquido, 
				vl_frete, 
				vl_desconto, 
				vl_despesa_acessoria, 
				vl_desconto_rateio, 
				vl_seguro, 
				nm_usuario, 
				dt_atualizacao, -- fim obrigatorios 
				ds_complemento, 
				cd_procedimento, 
				ie_origem_proced, 
				nr_seq_conta_financ, 
				cd_conta_contabil, 
				cd_material) 
			values (nr_sequencia_w, 
				cd_estabelecimento_p, 
				obter_cgc_estabelecimento(cd_estabelecimento_p), 
				cd_serie_nf_p, 
				nr_nota_fiscal_w, 
				nr_sequencia_nf_w, 
				nr_item_nf_w, 
				cd_natureza_operacao_p, 
				1, 
				vl_item_mens_w, 
				vl_item_mens_w, 
				vl_item_mens_w, 
				vl_frete_w, 
				vl_descontos_w, 
				vl_despesa_acessoria_w, 
				0, 
				0, 
				nm_usuario_p, 
				clock_timestamp(), --fim obrigatorios 
				ds_complemento_w, 
				cd_procedimento_w, 
				ie_origem_proced_w, 
				CASE WHEN cd_conta_financ_w=0 THEN null  ELSE cd_conta_financ_w END , 
				cd_conta_debito_w, 
				cd_material_w);
		end if;
	end loop;
	close c02;
	 
	for r_c03_w in c03 loop 
		begin 
		 
		begin	 
		vl_unitario_item_nf_w := r_c03_w.vl_item / r_c03_w.qt_item;
		exception 
		when others then 
			vl_unitario_item_nf_w := 0;	
		end;
		 
		select	coalesce(max(nr_item_nf),0) + 1 
		into STRICT	nr_item_nf_ww 
		from	nota_fiscal_item 
		where	nr_sequencia	= nr_sequencia_w;
		 
		insert	into	nota_fiscal_item(nr_sequencia, 
			cd_estabelecimento, 
			cd_cgc_emitente, 
			cd_serie_nf, 
			nr_nota_fiscal, 
			nr_sequencia_nf, 
			nr_item_nf, 
			cd_natureza_operacao, 
			qt_item_nf, 
			vl_unitario_item_nf, 
			vl_total_item_nf, 
			vl_liquido, 
			vl_frete, 
			vl_desconto, 
			vl_despesa_acessoria, 
			vl_desconto_rateio, 
			vl_seguro, 
			nm_usuario, 
			dt_atualizacao, -- fim obrigatorios 
			ds_complemento, 
			cd_procedimento, 
			ie_origem_proced, 
			nr_seq_conta_financ, 
			cd_conta_contabil, 
			cd_material) 
		values (nr_sequencia_w, 
			cd_estabelecimento_p, 
			obter_cgc_estabelecimento(cd_estabelecimento_p), 
			cd_serie_nf_p, 
			nr_nota_fiscal_w, 
			nr_sequencia_nf_w, 
			nr_item_nf_ww, 
			cd_natureza_operacao_p, 
			r_c03_w.qt_item, 
			coalesce(vl_unitario_item_nf_w,0), 
			r_c03_w.vl_item, 
			r_c03_w.vl_item, 
			vl_frete_w, 
			vl_descontos_w, 
			vl_despesa_acessoria_w, 
			0, 
			0, 
			nm_usuario_p, 
			clock_timestamp(), --fim obrigatorios 
			ds_complemento_w, 
			r_c03_w.cd_procedimento, 
			r_c03_w.ie_origem_proced, 
			CASE WHEN cd_conta_financ_w=0 THEN null  ELSE cd_conta_financ_w END , 
			null, 
			r_c03_w.cd_material);
		end;
	end loop;
	 
	if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then 
		 
		CALL gerar_imposto_nf(nr_sequencia_w, nm_usuario_p, null, null); -- nr_seq_sit_trib_p 
		
		CALL atualiza_total_nota_fiscal(nr_sequencia_w,nm_usuario_p);
		 
		select	max(ie_forma_pagamento) 
		into STRICT	ie_forma_pagamento_w 
		from	condicao_pagamento 
		where	cd_condicao_pagamento	= cd_condicao_pagamento_w;
		 
		while(dt_vencimento_w < trunc(dt_emissao_p,'dd')) loop 
			begin 
			dt_vencimento_w	:= add_months(dt_vencimento_w,1);
			end;
		end loop;
		 
		/* conforme vencimentos */
 
		if (ie_forma_pagamento_w = 10) then 
			select	coalesce(vl_total_nota,0) 
			into STRICT	vl_liquido_nota_w 
			from	nota_fiscal 
			where	nr_sequencia	= nr_sequencia_w;
			 
			insert	into	nota_fiscal_venc(nr_sequencia, 
				nm_usuario, 
				dt_atualizacao, 
				cd_estabelecimento, 
				cd_cgc_emitente, 
				cd_serie_nf, 
				nr_nota_fiscal, 
				nr_sequencia_nf, 
				dt_vencimento, 
				vl_vencimento, 
				ie_origem) 
			values (nr_sequencia_w, 
				nm_usuario_p, 
				clock_timestamp(), 
				cd_estabelecimento_p, 
				obter_cgc_estabelecimento(cd_estabelecimento_p), 
				cd_serie_nf_p, 
				nr_nota_fiscal_w, 
				1, 
				dt_vencimento_w, 
				vl_liquido_nota_w, 
				'N');
		else 
			CALL gerar_nota_fiscal_venc(nr_sequencia_w, dt_vencimento_w);
		end if;
		 
		/* locar a tabela e obter o numero da nota fiscal */
 
		lock table serie_nota_fiscal in exclusive mode;
		select	coalesce(nr_ultima_nf,0) + 1 
		into STRICT	nr_nota_fiscal_w 
		from	serie_nota_fiscal 
		where	cd_serie_nf		= cd_serie_nf_p 
		and	cd_estabelecimento	= cd_estabelecimento_p;
		 
		if (coalesce(ie_estab_serie_nf_w,'N') = 'S') then 
			update	serie_nota_fiscal 
			set	nr_ultima_nf 		= nr_nota_fiscal_w 
			where	cd_serie_nf 		= cd_serie_nf_p 
			and	cd_estabelecimento in (SELECT	z.cd_estabelecimento 
							from	estabelecimento z 
							where	z.cd_cgc = cd_cgc_emitente_w);
		else 
			update	serie_nota_fiscal 
			set	nr_ultima_nf		= nr_nota_fiscal_w 
			where	cd_serie_nf		= cd_serie_nf_p 
			and	cd_estabelecimento	= cd_estabelecimento_p;
		end if;
		 
		/* atualizar os totais da nota fiscal */
 
		update	nota_fiscal 
		set	nr_nota_fiscal	= nr_nota_fiscal_w 
		where	nr_sequencia	= nr_sequencia_w;
		 
		update	nota_fiscal_item 
		set	nr_nota_fiscal	= nr_nota_fiscal_w 
		where	nr_sequencia	= nr_sequencia_w;
		 
		update	nota_fiscal 
		set	dt_atualizacao_estoque = clock_timestamp() 
		where	nr_sequencia	= nr_sequencia_w;
		 
		/* Vincular a nota com os títulos */
 
		 
		/* Atualizar número da nota no lote */
 
		update	pls_lote_nf_mensalidade 
		set	nr_seq_nota_fiscal = nr_sequencia_w, 
			dt_geracao_nf	= clock_timestamp() 
		where	nr_sequencia	= nr_seq_lote_p;
		 
		commit;
	end if;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_nf_mens_pf ( nr_seq_lote_p bigint, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, nr_seq_classif_fiscal_p bigint, nr_seq_sit_trib_p bigint, cd_serie_nf_p text, dt_emissao_p timestamp, ds_complemento_p text, ds_observacao_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

