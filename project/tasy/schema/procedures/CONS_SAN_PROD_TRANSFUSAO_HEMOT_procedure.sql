-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cons_san_prod_transfusao_hemot ( nr_seq_producao_p bigint, nr_seq_transfusao_p bigint, nr_transfusao_controle_p text, qt_volume_p bigint, qt_vol_transf_p bigint, dt_utilizacao_p timestamp, dt_utilizacao_old_p timestamp, dt_termino_util_p timestamp, dt_termino_util_old_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text) AS $body$
DECLARE


ie_perm_repetir_nr_controle_w	varchar(1);
nr_agrupamento_w		bigint;
ie_possui_san_producao_w	varchar(1);
ie_perm_data_futura_w		varchar(1);


BEGIN

ie_perm_data_futura_w := obter_param_usuario(450, 426, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_perm_data_futura_w);

if (ie_perm_data_futura_w = 'N') and (dt_utilizacao_p IS NOT NULL AND dt_utilizacao_p::text <> '') and (dt_utilizacao_p > clock_timestamp()) then
	ds_erro_p	:= obter_texto_tasy(202113, wheb_usuario_pck.get_nr_seq_idioma);
end if;

if (coalesce(qt_volume_p, 0) < coalesce(qt_vol_transf_p, 0)) then
	ds_erro_p	:= obter_texto_tasy(79375, wheb_usuario_pck.get_nr_seq_idioma);
end if;

if (dt_utilizacao_p > dt_termino_util_p) then
	ds_erro_p	:= obter_texto_tasy(363791, wheb_usuario_pck.get_nr_seq_idioma);
end if;

if (coalesce(ds_erro_p::text, '') = '') then
	begin
	select	coalesce(substr(san_obter_agrup_exame(nr_seq_transfusao, nr_seq_reserva, nr_sequencia), 1,10), 0)
	into STRICT	nr_agrupamento_w
	from	san_producao
	where	nr_sequencia = nr_seq_producao_p;

	if (nr_agrupamento_w > 0) then
		begin
		if (dt_utilizacao_p IS NOT NULL AND dt_utilizacao_p::text <> '') and (dt_utilizacao_p <> dt_utilizacao_old_p) then
			begin
			update	san_producao
			set	dt_utilizacao	= dt_utilizacao_p
			where	substr(san_obter_agrup_exame(nr_seq_transfusao, nr_seq_reserva, nr_sequencia), 1,10) = nr_agrupamento_w
			and	nr_seq_transfusao	= nr_seq_transfusao_p;
			end;
		end if;

		if (dt_termino_util_p IS NOT NULL AND dt_termino_util_p::text <> '') and (dt_termino_util_p <> dt_termino_util_old_p) then
			begin
			update	san_producao
			set	dt_termino_util	= dt_termino_util_p
			where	substr(san_obter_agrup_exame(nr_seq_transfusao, nr_seq_reserva, nr_sequencia), 1,10) = nr_agrupamento_w
			and	nr_seq_transfusao	= nr_seq_transfusao_p;
			end;
		end if;

		commit;
		end;
	end if;

	/* Hemoterapia - Parâmetro [84] - Permite informar o número de controle já informado anteriormente */

	ie_perm_repetir_nr_controle_w := obter_param_usuario(450, 84, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_perm_repetir_nr_controle_w);

	if (ie_perm_repetir_nr_controle_w = 'N') then
		begin
		select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
		into STRICT	ie_possui_san_producao_w
		from	san_producao
		where	nr_transfusao_controle = nr_transfusao_controle_p
		and	nr_sequencia	<> nr_seq_producao_p
		and	dt_producao	between trunc(clock_timestamp(), 'yyyy') and fim_dia(to_date('31/12/' || to_char(clock_timestamp(), 'yyyy'), 'dd/mm/yyyy'));

		if (ie_possui_san_producao_w = 'S') then
			ds_erro_p	:= obter_texto_dic_objeto(79429, wheb_usuario_pck.get_nr_seq_idioma, 'NR_TRANSFUSAO_CONTROLE=' || nr_transfusao_controle_p);
		end if;
		end;
	end if;
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cons_san_prod_transfusao_hemot ( nr_seq_producao_p bigint, nr_seq_transfusao_p bigint, nr_transfusao_controle_p text, qt_volume_p bigint, qt_vol_transf_p bigint, dt_utilizacao_p timestamp, dt_utilizacao_old_p timestamp, dt_termino_util_p timestamp, dt_termino_util_old_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text) FROM PUBLIC;

