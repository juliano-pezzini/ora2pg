-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE lic_renovar_licitacao (nr_sequencia_p bigint, nm_usuario_p text, nr_seq_fornecedor_p text) AS $body$
DECLARE


nr_seq_lic_nova_w	bigint;
nr_seq_lic_origem_w	bigint;
cont_w			integer;
vl_item_w		double precision;
ie_vencedor_w		varchar(10);
nr_seq_parecer_w	bigint;
nr_seq_estagio_w	bigint;
nr_seq_estagio_lic_w	bigint;
nr_seq_estagio_ww	bigint;
qt_lic_renov_w		bigint;


nr_seq_item_fornec_antigo_w	bigint;
nr_seq_item_antigo_w		bigint;

nr_seq_fornec_antigo_w	bigint;
cd_cgc_fornec_w		varchar(14);
dt_proposta_w		timestamp;

nr_seq_fornec_novo_w	bigint;
nr_seq_item_novo_w	bigint;


c01 CURSOR FOR			/* cursor dos fornecedores da licitação antiga */
SELECT	nr_sequencia,
	cd_cgc_fornec,
	dt_proposta
from	lic_fornec
where	nr_seq_licitacao	= nr_sequencia_p
and	nr_seq_fornecedor_p	like '% ' || to_char(nr_sequencia) || ' %';

c02 CURSOR FOR			/* cursor dos itens dos fornecedores da licitação antiga */
SELECT	a.nr_sequencia,
	b.nr_seq_item,
	a.vl_item,
	a.ie_vencedor,
	a.nr_seq_parecer
from	lic_item b,
	lic_item_fornec a
where	a.nr_seq_item		= b.nr_sequencia
and	a.nr_seq_fornec		= nr_seq_fornec_antigo_w;




BEGIN

select	nr_seq_estagio
into STRICT	nr_seq_estagio_lic_w
from	lic_licitacao
where	nr_sequencia	= nr_sequencia_p;

select	coalesce(max(obter_valor_param_usuario(918, 3, Obter_perfil_ativo, nm_usuario_p, null)), nr_seq_estagio_lic_w)
into STRICT	nr_seq_estagio_ww
;


select	count(*)
into STRICT	cont_w
from	ordem_compra b,
	ordem_compra_item a,
	lic_item c
where	c.nr_sequencia	= a.nr_seq_lic_item
and	a.nr_ordem_compra	= b.nr_ordem_compra
and	c.nr_seq_licitacao	= nr_sequencia_p
and	coalesce(b.dt_liberacao::text, '') = ''
and	coalesce(b.dt_baixa::text, '') = '';

if (cont_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(266233);
	--'Não é possível renovar uma licitação com ordens de compra pendentes!');
end if;


select	coalesce(nr_seq_lic_origem,0)
into STRICT	nr_seq_lic_origem_w
from	lic_licitacao
where	nr_sequencia	= nr_sequencia_p;

if (nr_seq_lic_origem_w <> 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(266234);
	--'Não é possível renovar uma licitação de renovação!');
end if;

select	count(*) + 1
into STRICT	qt_lic_renov_w
from	lic_licitacao
where	nr_seq_lic_origem	= nr_sequencia_p;

/* gerando nova licitação */

select	nextval('lic_licitacao_seq')
into STRICT	nr_seq_lic_nova_w
;

insert	into lic_licitacao(NR_SEQUENCIA,
	DT_ATUALIZACAO,
	NM_USUARIO,
	NR_SEQ_ESTAGIO,
	CD_PROCESSO,
	DT_EMISSAO,
	IE_MODALIDADE,
	IE_CRITERIO,
	QT_DIAS_PRAZO_ENTREGA,
	CD_CONDICAO_PAGTO,
	DS_OBJETO,
	DT_ABERTURA_PREV,
	DT_PUBLICACAO,
	DT_ABERTURA_REAL,
	DS_DECLARACAO,
	NR_SEQ_LIC_ORIGEM)
SELECT	nr_seq_lic_nova_w,
	clock_timestamp(),
	nm_usuario_p,
	coalesce(nr_seq_estagio_ww, nr_seq_estagio),
	substr(cd_processo, 1, 15) || ' - R' || to_char(qt_lic_renov_w),
	dt_emissao,
	ie_modalidade,
	ie_criterio,
	qt_dias_prazo_entrega,
	cd_condicao_pagto,
	ds_objeto,
	dt_abertura_prev,
	dt_publicacao,
	dt_abertura_real,
	ds_declaracao,
	nr_sequencia_p
from	lic_licitacao
where	nr_sequencia	= nr_sequencia_p;


/* gerando os itens da nova licitação */

insert into lic_item(NR_SEQUENCIA,
	NR_SEQ_LICITACAO,
	CD_MATERIAL,
	NR_SEQ_ITEM,
	DT_ATUALIZACAO,
	NM_USUARIO,
	QT_ITEM,
	DS_ADICIONAL,
	CD_UNID_MEDIDA)
SELECT	nextval('lic_item_seq'),
	nr_seq_lic_nova_w,
	cd_material,
	nr_seq_item,
	clock_timestamp(),
	nm_usuario_p,
	qt_item,
	ds_adicional,
	cd_unid_medida
from	lic_item
where	nr_seq_licitacao = nr_sequencia_p;


/* Gerando fornecedores da nova licitação  */

open c01;
loop
fetch c01 into
	nr_seq_fornec_antigo_w,
	cd_cgc_fornec_w,
	dt_proposta_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	select	nextval('lic_fornec_seq')
	into STRICT	nr_seq_fornec_novo_w
	;

	insert into lic_fornec(NR_SEQUENCIA,
		NR_SEQ_LICITACAO,
		DT_ATUALIZACAO,
		NM_USUARIO,
		CD_CGC_FORNEC,
		DT_PROPOSTA)
	values (	nr_seq_fornec_novo_w,
		nr_seq_lic_nova_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_cgc_fornec_w,
		dt_proposta_w);


	open c02;
	loop
	fetch c02 into
		nr_seq_item_fornec_antigo_w,
		nr_seq_item_antigo_w,
		vl_item_w,
		ie_vencedor_w,
		nr_seq_parecer_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */

		/* obtendo a sequencia do iten na nova licitação */

		select	nr_sequencia
		into STRICT	nr_seq_item_novo_w
		from	lic_item
		where	nr_seq_item	= nr_seq_item_antigo_w
		and	nr_seq_licitacao = nr_seq_lic_nova_w;

		/* gerando os itens da nova licitação para os novos fornecedores */

		insert	into lic_item_fornec(NR_SEQUENCIA,
			NR_SEQ_FORNEC,
			NR_SEQ_ITEM,
			DT_ATUALIZACAO,
			NM_USUARIO,
			VL_ITEM,
			IE_VENCEDOR,
			NR_SEQ_PARECER)
		values (	nextval('lic_item_fornec_seq'),
			nr_seq_fornec_novo_w,
			nr_seq_item_novo_w,
			clock_timestamp(),
			nm_usuario_p,
			vl_item_w,
			ie_vencedor_w,
			nr_seq_parecer_w);

	end loop;
	close c02;

end loop;
close c01;

/* Encerrar a licitação antiga */

begin
select	nr_sequencia
into STRICT	nr_seq_estagio_w
from	lic_estagio
where	IE_ENCERRADA	= 'S'
and	ie_cancelada	= 'N';
exception
	when no_data_found then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(266235);
		--'Não existe nenhum estágio de licitação encerrada!');
	when too_many_rows then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(338872);
		--'Existe mais de um cadastro de Estágio de Processo Licitatório com o campo Licitação Encerrada marcado e o campo Licitação Cancelada desmarcado.'
end;


update	lic_licitacao
set	nr_seq_estagio	= nr_seq_estagio_w,
	nm_usuario	= nm_usuario_p,
	dt_atualizacao	= clock_timestamp()
where	((nr_sequencia	= nr_sequencia_p) or (nr_seq_lic_origem = nr_sequencia_p AND nr_sequencia <> nr_seq_lic_nova_w));

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE lic_renovar_licitacao (nr_sequencia_p bigint, nm_usuario_p text, nr_seq_fornecedor_p text) FROM PUBLIC;

