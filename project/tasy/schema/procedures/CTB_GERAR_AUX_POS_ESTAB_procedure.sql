-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_gerar_aux_pos_estab ( nm_usuario_p text, cd_estabelecimento_p text, dt_referencia_p timestamp, ie_gerar_arquivo_p text) AS $body$
DECLARE


nr_contador_w		bigint := 0;
ds_erro_w		varchar(255);
ds_local_w		varchar(255);
arq_texto_w		utl_file.file_type;
nm_arquivo_w		varchar(255);
dt_final_w		timestamp;
dt_emissao_w		titulo_receber.dt_emissao%type;
dt_liquidacao_w		titulo_receber.dt_liquidacao%type;
dt_vencimento_w		titulo_receber.dt_vencimento%type;
nr_titulo_w		titulo_receber.nr_titulo%type;
dt_inicial_w		timestamp;

ds_nome_livro_w		varchar(255);
ds_periodo_w		varchar(255);
ds_rotulo_w 		varchar(4000) := 	'Beneficiário;Classif Crédito;Classif Débito;Conta Crédito;Conta Débito;'			||
						'CPF/CNPJ Beneficiário;CPF/CNPJ Pagador;Definição Operação;Ds Procedimento/Material;Dt Aviso;'	||
						'Dt Contabilização;Dt Emissão;Dt Pagamento;Dt Realização;Dt Vencimento;'			||
						'Grupo de despesas ANS;Modalidade;Nr Carteira;Nr Contrato;Nr Documento;'			||
						'Nr Protocolo;Nr Registro Produto;Nr Título;Prestador;Procedimento/Material;'			||
						'Regulamentação;Segmentação;Tipo de Ato;Tipo de Beneficiário;Tipo de Contratação;' 		||
						'Tipo de Documento;Tipo de Protocolo;Tipo vínculo;Usuário Principal;Vl Evento';

c_linha CURSOR FOR
	SELECT	a.nm_usuario_evento									|| ';' ||	--Beneficiário
		substr(ctb_obter_classif_conta(a.cd_conta_contrapartida, null, dt_final_w),1,255)	|| ';' ||	--Classif Crédit
		substr(ctb_obter_classif_conta(a.cd_conta_contabil, null, dt_final_w),1,255)		|| ';' ||	--Classif Débito
		a.cd_conta_contrapartida								|| ';' ||	--Conta Crédito
		a.cd_conta_contabil									|| ';' ||	--Conta Débito
		a.nr_cpf_cnpj_adic									|| ';' ||	--CPF/CNPJ Beneficiário
		a.nr_cpf_cnpj										|| ';' ||	--CPF/CNPJ Pagador
		a.ds_operacao										|| ';' ||	--Definição Operação
		a.ds_item_mat_proc									|| ';' ||	--Ds Procedimento/Material
		a.dt_conhecimento									|| ';' ||	--Dt Aviso
		a.dt_contabilizacao									|| ';' ||	--Dt Contabilização
		a.dt_emissao										|| ';' ||	--Dt Emissão
		a.dt_pagamento										|| ';' ||	--Dt Pagamento
		a.dt_ocorrencia										|| ';' ||	--Dt Realização
		a.dt_vencimento										|| ';' ||	--Dt Vencimento
		a.ds_grupo_ans										|| ';' ||	--Grupo de despesas ANS
		a.ds_modalidade_contrat									|| ';' ||	--Modalidade
		a.cd_beneficiario									|| ';' ||	--Nr Carteira
		a.nr_contrato										|| ';' ||	--Nr Contrato
		a.nr_documento										|| ';' ||	--Nr Documento
		a.nr_seq_protocolo									|| ';' ||	--Nr Protocolo
		a.nr_protocolo_ans									|| ';' ||	--Nr Registro Produto
		a.nr_titulo										|| ';' ||	--Nr Título
		a.nm_prestador										|| ';' ||	--Prestador
		coalesce(a.cd_procedimento,a.cd_material_ops)						|| ';' ||	--Procedimento/Material
		a.ds_tipo_regulamentacao								|| ';' ||	--Regulamentação
		a.ds_segmentacao									|| ';' ||	--Segmentação
		a.ds_ato_cooperado									|| ';' ||	--Tipo de Ato
		a.ds_tipo_segurado									|| ';' ||	--Tipo de Beneficiário
		a.ds_tipo_contratacao									|| ';' ||	--Tipo de Contratação
		a.ds_tipo_documento									|| ';' ||	--Tipo de Documento
		a.ds_tipo_protocolo									|| ';' ||	--Tipo de Protocolo
		a.ds_tipo_vinculo_operadora								|| ';' ||	--Tipo vínculo
		a.nm_usuario_princ									|| ';' ||	--Usuário Principal
		a.vl_evento										ds_linha 	--Vl Evento
	from	w_ctb_livro_aux_event_liq a
	where	a.nm_usuario						= nm_usuario_p
	and 	a.ie_tipo_livro 					= 4
	and	pkg_date_utils.start_of(a.dt_referencia,'MONTH',0)	= pkg_date_utils.start_of(dt_referencia_p,'MONTH',0)
	and 	coalesce(a.nr_seq_reg_auxiliar,0) 				= 0
	order by (a.nr_documento)::numeric;

c_conta CURSOR FOR
	SELECT	v.nm_beneficiario,
		v.cd_conta_cred_provisao,
		v.cd_conta_deb_provisao,
		v.nr_cpf_cnpj_benef,
		v.nr_cpf_cnpj_pagador,
		'Valores Pós-Estabelecidos' ds_operacao,
		v.ds_item_mat_proc,
		v.dt_mes_competencia_pos,
		v.ie_pos_novo,
		v.nr_seq_conta_pos_estab,
		v.dt_atendimento_referencia,
		v.ds_grupo_ans,
		v.ds_modalidade_contrat,
		v.cd_beneficiario,
		v.nr_contrato,
		v.nr_seq_conta,
		v.nr_seq_protocolo,
		v.nr_protocolo_ans,
		v.nm_prestador,
		v.cd_procedimento,
		v.nr_seq_material,
		substr(obter_valor_dominio(2157,v.ie_regulamentacao),1,255) ds_regulamentacao,
		v.ds_segmentacao,
		substr(obter_valor_dominio(3418,v.ie_ato_cooperado),1.255) ds_ato_cooperado,
		v.ds_tipo_segurado,
		v.ds_tipo_contratacao,
		'Conta Médica' ds_tipo_documento,
		v.ds_tipo_protocolo,
		v.ds_tipo_vinculo_operadora,
		v.nm_usuario_princ,
		v.vl_provisao
	from	pls_conta_pos_contab_v 	v
	where	v.ie_tipo_movto	in ('PROV','X')
	and	v.dt_mes_competencia between dt_inicial_w and dt_final_w
	and	coalesce(v.vl_provisao,0) <> 0
	and 	((v.cd_estabelecimento = cd_estabelecimento_p) or (coalesce(cd_estabelecimento_p,0) = 0))
        and     not exists (SELECT      1
                            from        pls_rec_glosa_conta c,
                                        pls_rec_glosa_protocolo p
                            where       v.nr_seq_conta          = c.nr_seq_conta
                            and         c.nr_seq_protocolo      = p.nr_sequencia)

union all

        select	v.nm_beneficiario,
		v.cd_conta_cred_provisao,
		v.cd_conta_deb_provisao,
		v.nr_cpf_cnpj_benef,
		v.nr_cpf_cnpj_pagador,
		'Valores Pós-Estabelecidos' ds_operacao,
		v.ds_item_mat_proc,
		v.dt_mes_competencia_pos,
		v.ie_pos_novo,
		v.nr_seq_conta_pos_estab,
		v.dt_atendimento_referencia,
		v.ds_grupo_ans,
		v.ds_modalidade_contrat,
		v.cd_beneficiario,
		v.nr_contrato,
		v.nr_seq_conta,
		v.nr_seq_protocolo,
		v.nr_protocolo_ans,
		v.nm_prestador,
		v.cd_procedimento,
		v.nr_seq_material,
		substr(obter_valor_dominio(2157,v.ie_regulamentacao),1,255) ds_regulamentacao,
		v.ds_segmentacao,
		substr(obter_valor_dominio(3418,v.ie_ato_cooperado),1.255) ds_ato_cooperado,
		v.ds_tipo_segurado,
		v.ds_tipo_contratacao,
		'Conta Médica' ds_tipo_documento,
		v.ds_tipo_protocolo,
		v.ds_tipo_vinculo_operadora,
		v.nm_usuario_princ,
		v.vl_provisao
	from	pls_conta_pos_contab_v 	v,
                pls_rec_glosa_conta     c,
                pls_rec_glosa_protocolo p
	where	v.nr_seq_conta = c.nr_seq_conta
        and     c.nr_seq_protocolo = p.nr_sequencia
        and     v.ie_tipo_movto	in ('PROV','X')
	and	p.dt_liberacao_pag between dt_inicial_w and dt_final_w
	and	coalesce(v.vl_provisao,0) <> 0
	and 	((v.cd_estabelecimento = cd_estabelecimento_p) or (coalesce(cd_estabelecimento_p,0) = 0))
	order by nr_seq_conta;
vet_conta c_conta%rowtype;

BEGIN

CALL wheb_usuario_pck.set_ie_executar_trigger('N');

dt_inicial_w	:= pkg_date_utils.start_of(dt_referencia_p,'MONTH',0);
dt_final_w 	:= pkg_date_utils.end_of(dt_referencia_p,'MONTH');



delete
from	w_ctb_livro_aux_event_liq a
where	a.nm_usuario						= nm_usuario_p
and	a.ie_tipo_livro 					= 4
and 	pkg_date_utils.start_of(a.dt_referencia,'MONTH',0)	= pkg_date_utils.start_of(dt_referencia_p,'MONTH',0)
and 	coalesce(nr_seq_reg_auxiliar,0) 				= 0;

commit;

open c_conta;
loop
fetch c_conta into
        vet_conta;
EXIT WHEN NOT FOUND; /* apply on c_conta */
        begin

        begin
        select	e.dt_emissao,
                e.dt_liquidacao,
                e.dt_vencimento,
                e.nr_titulo
        into STRICT	dt_emissao_w,
                dt_liquidacao_w,
                dt_vencimento_w,
                nr_titulo_w
        from	pls_mensalidade_item_conta	a,
                pls_mensalidade_seg_item	b,
                pls_mensalidade_segurado	c,
                pls_mensalidade			d,
                titulo_receber			e
        where	a.nr_Seq_item			= b.nr_Sequencia
        and 	b.nr_seq_mensalidade_seg	= c.nr_Sequencia
        and 	c.nr_seq_mensalidade		= d.nr_Sequencia
        and 	d.nr_sequencia 			= e.nr_seq_mensalidade
        and 	((vet_conta.ie_pos_novo 	= 'AA' AND a.nr_seq_conta_pos_estab 	= vet_conta.nr_seq_conta_pos_estab) or
                (vet_conta.ie_pos_novo 	= 'MN' AND a.nr_seq_pos_mat 		= vet_conta.nr_seq_conta_pos_estab) or
                (vet_conta.ie_pos_novo 	= 'PN' AND a.nr_seq_pos_proc 		= vet_conta.nr_seq_conta_pos_estab))  LIMIT 1;

        exception
        when others then
                dt_emissao_w	:=	null;
                dt_liquidacao_w	:=	null;
                dt_vencimento_w	:=	null;
                nr_titulo_w	:=	null;
        end;

        nr_contador_w		:= nr_contador_w + 1;

        insert into w_ctb_livro_aux_event_liq(
                nr_sequencia,
                dt_atualizacao,
                nm_usuario,
                nm_usuario_evento,
                cd_conta_contrapartida,
                cd_conta_contabil,
                nr_cpf_cnpj_adic,
                nr_cpf_cnpj,
                ds_operacao,
                ds_item_mat_proc,
                dt_conhecimento,
                dt_contabilizacao,
                dt_emissao,
                dt_pagamento,
                dt_ocorrencia,
                dt_vencimento,
                ds_grupo_ans,
                ds_modalidade_contrat,
                cd_beneficiario,
                nr_contrato,
                nr_documento,
                nr_seq_protocolo,
                nr_protocolo_ans,
                nr_titulo,
                nm_prestador,
                cd_procedimento,
                cd_material_ops,
                ds_tipo_regulamentacao,
                ds_segmentacao,
                ds_ato_cooperado,
                ds_tipo_segurado,
                ds_tipo_contratacao,
                ds_tipo_documento,
                ds_tipo_protocolo,
                ds_tipo_vinculo_operadora,
                nm_usuario_princ,
                vl_evento,
                ie_tipo_livro,
                dt_referencia,
                nr_seq_reg_auxiliar,
                nr_linha)
        values (	nextval('w_ctb_livro_aux_event_liq_seq'),
                clock_timestamp(),
                nm_usuario_p,
                vet_conta.nm_beneficiario,
                vet_conta.cd_conta_cred_provisao,
                vet_conta.cd_conta_deb_provisao,
                vet_conta.nr_cpf_cnpj_benef,
                vet_conta.nr_cpf_cnpj_pagador,
                vet_conta.ds_operacao,
                vet_conta.ds_item_mat_proc,
                vet_conta.dt_mes_competencia_pos,
                vet_conta.dt_mes_competencia_pos,
                dt_emissao_w,
                dt_liquidacao_w,
                vet_conta.dt_atendimento_referencia,
                dt_vencimento_w,
                vet_conta.ds_grupo_ans,
                vet_conta.ds_modalidade_contrat,
                vet_conta.cd_beneficiario,
                vet_conta.nr_contrato,
                vet_conta.nr_seq_conta,
                vet_conta.nr_seq_protocolo,
                vet_conta.nr_protocolo_ans,
                nr_titulo_w,
                vet_conta.nm_prestador,
                vet_conta.cd_procedimento,
                vet_conta.nr_seq_material,
                vet_conta.ds_regulamentacao,
                vet_conta.ds_segmentacao,
                vet_conta.ds_ato_cooperado,
                vet_conta.ds_tipo_segurado,
                vet_conta.ds_tipo_contratacao,
                vet_conta.ds_tipo_documento,
                vet_conta.ds_tipo_protocolo,
                vet_conta.ds_tipo_vinculo_operadora,
                vet_conta.nm_usuario_princ,
                vet_conta.vl_provisao,
                4,
                dt_referencia_p,
                0,
                nr_contador_w);

        if (mod(nr_contador_w, 1000) = 0) then
                commit;
        end if;

        end;
end loop;
close c_conta;

if (ie_gerar_arquivo_p = 'S') then
	begin
	nm_arquivo_w	:= 'RegAuxValoresPosEstab' || to_char(clock_timestamp(),'ddmmyyyyhh24miss') || nm_usuario_p || '.csv';
	ds_nome_livro_w	:= 'Registro Auxiliar de Valores Pós-estabelecidos';
	ds_periodo_w	:= 'Posição contábil: ' || dt_final_w || ';';

	SELECT * FROM obter_evento_utl_file(1, null, ds_local_w, ds_erro_w) INTO STRICT ds_local_w, ds_erro_w;

	arq_texto_w := utl_file.fopen(ds_local_w,nm_arquivo_w,'W');

	utl_file.put_line(arq_texto_w, ds_nome_livro_w);
	utl_file.put_line(arq_texto_w, ds_periodo_w);
	utl_file.put_line(arq_texto_w, ds_rotulo_w);
	utl_file.fflush(arq_texto_w);
	for vetl in c_linha loop
		begin
		utl_file.put_line(arq_texto_w,vetl.ds_linha);
		utl_file.fflush(arq_texto_w);
		end;
	end loop;
	end;
end if;

commit;

CALL wheb_usuario_pck.set_ie_executar_trigger('S');

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_gerar_aux_pos_estab ( nm_usuario_p text, cd_estabelecimento_p text, dt_referencia_p timestamp, ie_gerar_arquivo_p text) FROM PUBLIC;

