-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_proc_aih ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nr_aih_p bigint, ds_erro_p INOUT text) AS $body$
DECLARE


ds_erro_w         		varchar(4000)	:= '';
ds_erro_procedimento_w 	varchar(80) 	:= '';
qt_proc_exige_cert_w	smallint;
qt_proc_exige_gestan_w	smallint;
qt_partic_incorreto_w	bigint	:= 0;
cd_pessoa_partic_w	varchar(10)	:= 'X';
ie_tipo_serv_partic_w	smallint		:= null;
ie_tipo_ato_partic_w	smallint		:= null;
cd_grupo_sus_w		varchar(8);
nr_cpf_val_w		varchar(11);
qt_proced_errados_w	bigint	:= 0;
qt_proced_invalido_w	bigint	:= 0;
qt_partic_incompleto_w	bigint	:= 0;
cd_procedimento_w	bigint	:= null;
ie_origem_proced_w	bigint		:= null;
qt_procedimento_w		bigint	:= 0;
cd_convenio_w		integer		:= 0;
nr_nf_prestador_w		bigint	:= 0;
cd_medico_executor_w	varchar(10)	:= '';
nr_cert_nasc_w		bigint;
dt_autorizacao_w		timestamp;
nr_gestante_pre_natal_w	bigint;
qt_atos_duplos_w		bigint;
nr_seq_duplos_w		bigint;
ie_forma_apresentacao_w	smallint;
qt_diarias_w		bigint	:= 0;
dt_entrada_w		timestamp		:= null;
dt_alta_w			timestamp		:= null;
qt_reg_w			bigint;
cd_excludente_um_w	bigint;
cd_excludente_dois_w	bigint;
nr_seq_w			bigint;
nr_seq_sipac_w		bigint;
cd_estabelecimento_w	smallint;
qt_dias_uteis_w		smallint;
qt_regra_servico_ato_w	bigint;
qt_regra_servico_ato_erro_w	bigint;
qt_ajuste_w		smallint;
dt_alta_ww		timestamp;
qt_proc_obrig_w		integer	:= 0;
qt_proc_comp_w		integer	:= 0;

c03 CURSOR FOR
	SELECT	b.cd_pessoa_fisica,
		b.ie_tipo_servico_sus,
		b.ie_tipo_ato_sus,
		c.cd_grupo_sus
	from	procedimento c,
		procedimento_paciente a,
		procedimento_participante b
	where 	a.nr_atendimento		= nr_atendimento_p
	and	a.nr_interno_conta		= nr_interno_conta_p
	and	a.nr_sequencia		= b.nr_sequencia
	and 	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	a.cd_procedimento		= c.cd_procedimento
	and	a.ie_origem_proced		= c.ie_origem_proced;

c04 CURSOR FOR
	SELECT	a.cd_procedimento,
		a.ie_origem_proced,
		a.qt_procedimento,
		a.ie_tipo_servico_sus,
		a.ie_tipo_ato_sus,
		a.cd_convenio,
		a.nr_nf_prestador,
		a.cd_medico_executor,
		coalesce(b.ie_forma_apresentacao,0)
	from	procedimento b,
		procedimento_paciente a
	where 	a.nr_atendimento		= nr_atendimento_p
	and	a.nr_interno_conta		= nr_interno_conta_p
	and 	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	a.cd_procedimento		= b.cd_procedimento
	and	a.ie_origem_proced		= b.ie_origem_proced;

c05 CURSOR FOR
	SELECT      count(*),a.nr_sequencia
	from        procedimento_paciente a,
   		procedimento_participante b
	where       a.nr_atendimento		= nr_atendimento_p
	and         a.nr_interno_conta		= nr_interno_conta_p
	and         a.nr_sequencia		= b.nr_sequencia
	and         coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and         b.ie_tipo_ato_sus		= 6
	group by 	a.nr_sequencia
	having 	count(*) > 1;

c06 CURSOR FOR
	SELECT      cd_procedimento,
		cd_proc_excludente
	from        sus_aih_excludente;



BEGIN
ds_erro_w			:= '';

select 	coalesce(max(nr_gestante_pre_natal),0),
	max(dt_autorizacao_acomp)
into STRICT	nr_gestante_pre_natal_w,
	dt_autorizacao_w
from 	sus_aih
where 	nr_atendimento	= nr_atendimento_p
and	nr_interno_conta	= nr_interno_conta_p;

select 	coalesce(max(nr_registro),0)
into STRICT	nr_cert_nasc_w
from	sus_aih_reg_civil
where	nr_aih	= nr_aih_p;

select	count(*)
into STRICT	qt_regra_servico_ato_w
from	sus_regra_servico_ato;


/* consistencia procedimentos diferente de aih */

begin
select 	count(*)
into STRICT	qt_proced_errados_w
from	procedimento_paciente
where 	nr_atendimento		= nr_atendimento_p
and	nr_interno_conta		= nr_interno_conta_p
and	ie_origem_proced		<> 2
and	coalesce(cd_motivo_exc_conta::text, '') = '';
exception
	when others then
		qt_proced_errados_w := 0;
end;
if (qt_proced_errados_w > 0) 	and
	((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
	begin
	ds_erro_w			:= ds_erro_w || '720 ';
	end;
end if;


/* consistencia dos participantes da cirurgia */

open c03;
loop
fetch c03 into
	cd_pessoa_partic_w,
	ie_tipo_serv_partic_w,
	ie_tipo_ato_partic_w,
	cd_grupo_sus_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
	begin

	/* consiste tipo de serviço x tipo de ato */

	if (qt_regra_servico_ato_w	> 0)		and (ie_tipo_serv_partic_w IS NOT NULL AND ie_tipo_serv_partic_w::text <> '')		and (ie_tipo_ato_partic_w IS NOT NULL AND ie_tipo_ato_partic_w::text <> '')		then
		begin
		select	count(*)
		into STRICT	qt_regra_servico_ato_erro_w
		from	sus_regra_servico_ato
		where	ie_tipo_servico_sus		= ie_tipo_serv_partic_w
		and	ie_tipo_ato_sus		= ie_tipo_ato_partic_w;
		if (qt_regra_servico_ato_erro_w	= 0)	and
			((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
			ds_erro_w 	:=

ds_erro_w||'2228'||'('||'ser='||to_char(ie_tipo_serv_partic_w)||'ato='||to_char(ie_tipo_ato_partic_w)||') ';
		end if;
		end;
	end if;

	/* tipo de serviço inválido */

	if (ie_tipo_serv_partic_w	not in (21,22,39,4,45,7))	and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2130 ';
	end if;

	/* tipo de ato inválido */

	if (ie_tipo_ato_partic_w	not in (2,3,4,5,6,49))	and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2131 ';
	end if;

	/* tipo de serviço 7 exige médico executor com cpf os6694 */

	if (ie_tipo_serv_partic_w	= 7)		and (coalesce(cd_pessoa_partic_w::text, '') = '')		and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2109 ';
	end if;
	if (ie_tipo_serv_partic_w	= 7)		and (cd_pessoa_partic_w IS NOT NULL AND cd_pessoa_partic_w::text <> '')	then
		begin
		select coalesce(obter_cpf_pessoa_fisica(cd_pessoa_partic_w),'X')
		into STRICT	 nr_cpf_val_w
		;
		if (nr_cpf_val_w = 'X') and
			 ((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
			ds_erro_w	:= ds_erro_w || '2109 ';
		end if;
		end;
	end if;

	if (cd_grupo_sus_w in ('1','4','5','12','14','15','16','17','10','7')) then
		begin
		qt_partic_incorreto_w := qt_partic_incorreto_w + 1;
		end;
	end if;

	if (cd_pessoa_partic_w = '') 		or (coalesce(ie_tipo_serv_partic_w::text, '') = '') 	then
		qt_partic_incompleto_w	:= qt_partic_incompleto_w + 1;
	end if;
	if	ie_tipo_ato_partic_w not in (2,3,4,5,6) then
		qt_partic_incompleto_w	:= qt_partic_incompleto_w + 1;
	end if;
	end;
end loop;
close c03;

/* participante procedimento com erro */

if (qt_partic_incompleto_w > 0) 	and
	((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
	ds_erro_w	:= ds_erro_w || '716 ';
end if;

/* participante informado para procedimento que não permite participante */

if (qt_partic_incorreto_w > 0)	and
	((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
	ds_erro_w	:= ds_erro_w || '2124 ';
end if;


/* mais de um anestesista nos participantes */

qt_atos_duplos_w	:= 0;
open c05;
loop
fetch c05 	into
		qt_atos_duplos_w,
		nr_seq_duplos_w;
	EXIT WHEN NOT FOUND; /* apply on c05 */
	begin
	qt_atos_duplos_w	:= qt_atos_duplos_w;
	end;
end loop;
close c05;
if (qt_atos_duplos_w > 1) 		and
	((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
	ds_erro_w	:= ds_erro_w || '2155 ';
end if;
if (qt_atos_duplos_w	= 0) then
	begin
	select      count(*)
	into STRICT	qt_atos_duplos_w
	from        	procedimento_paciente a
	where      a.nr_atendimento            = nr_atendimento_p
	and         a.nr_interno_conta          = nr_interno_conta_p
	and         coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and         a.ie_tipo_ato_sus               = 6
	and exists (SELECT 1 from procedimento_participante x
			where x.nr_sequencia = a.nr_sequencia
			and x.ie_tipo_ato_sus = 6);
	if (qt_atos_duplos_w > 0) 		and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2155 ';
	end if;
	end;
end if;


/* consistencia de qtd de procedimento com qtd diarias */

select 	coalesce(c.dt_inicial,a.dt_entrada),
	coalesce(c.dt_final,a.dt_alta),
	a.cd_estabelecimento
into STRICT	dt_entrada_w,
	dt_alta_w,
	cd_estabelecimento_w
from	atendimento_paciente a,
	sus_aih c
where	c.nr_atendimento	= nr_atendimento_p
and	c.nr_interno_conta	= nr_interno_conta_p
and	c.nr_aih		= nr_aih_p
and	c.nr_atendimento	= a.nr_atendimento;
if (dt_entrada_w IS NOT NULL AND dt_entrada_w::text <> '') 	and (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '')	then
	qt_diarias_w	:= (trunc(dt_alta_w) - trunc(dt_entrada_w));
end if;

select	coalesce(max(dt_alta),'')
into STRICT	dt_alta_ww
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_p;

if (dt_alta_ww IS NOT NULL AND dt_alta_ww::text <> '') or (dt_alta_ww <> '') then
	qt_ajuste_w	:= 0;
else
	qt_ajuste_w	:= 1;
end if;

/* consistencia de procedimento que exige certidao de nascimento */

begin
qt_proc_exige_cert_w	:= 0;
select 	count(*)
into STRICT		qt_proc_exige_cert_w
from 		procedimento_paciente
where 	nr_atendimento		= nr_atendimento_p
and		nr_interno_conta		= nr_interno_conta_p
and		ie_origem_proced		= 2
and		cd_procedimento		= 99085011
and	coalesce(cd_motivo_exc_conta::text, '') = '';
exception
		when others then
			qt_proc_exige_cert_w := 0;
end;
if (qt_proc_exige_cert_w 	> 0) 	and (nr_cert_nasc_w		= 0) and
	((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
	ds_erro_w			:= ds_erro_w || '2097 ';
end if;

if (qt_proc_exige_cert_w 	= 0) 	and (nr_cert_nasc_w		> 0) 	and
	((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
	ds_erro_w			:= ds_erro_w || '2097 ';
end if;

/* consistencia de procedimento que exige data de autorizacao	*/

if (coalesce(dt_autorizacao_w::text, '') = '') then
	begin
	select count(*)
	into STRICT	qt_procedimento_w
	from 	procedimento b,
		procedimento_paciente a
	where	a.nr_atendimento		= nr_atendimento_p
	and	a.nr_interno_conta	= nr_interno_conta_p
	and	a.ie_origem_proced	= 2
	and	a.ie_origem_proced	= b.ie_origem_proced
	and	a.cd_procedimento		= b.cd_procedimento
	and	coalesce(b.ie_exige_autor_sus,'N') = 'S'
	and	coalesce(a.cd_motivo_exc_conta::text, '') = '';
	if (qt_procedimento_w 	> 0)	and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w			:= ds_erro_w || '2101 ';
	end if;
	end;
end if;

/* consistencia de procedimento que exige carteira de gestante os6796 */

begin
qt_proc_exige_gestan_w	:= 0;
select 	count(*)
into STRICT		qt_proc_exige_gestan_w
from 		procedimento_paciente
where 	nr_atendimento		= nr_atendimento_p
and		nr_interno_conta		= nr_interno_conta_p
and		ie_origem_proced		= 2
and		cd_procedimento		in (99002014,95002014)
and	coalesce(cd_motivo_exc_conta::text, '') = '';
exception
		when others then
			qt_proc_exige_gestan_w := 0;
end;
if (qt_proc_exige_gestan_w	> 0) 	and (nr_gestante_pre_natal_w = 0)	and
	((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
	ds_erro_w			:= ds_erro_w || '2098 ';
end if;

qt_partic_incorreto_w	:= 0;


/* consistencia de procedimentos excludentes  */

open c06;
loop
fetch c06 	into
		cd_excludente_um_w,
		cd_excludente_dois_w;
	EXIT WHEN NOT FOUND; /* apply on c06 */
	begin
	qt_reg_w	:= 0;

	select	count(*)
	into STRICT	qt_reg_w
	from	procedimento_paciente a
	where	a.nr_interno_conta		= nr_interno_conta_p
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	a.cd_procedimento		= cd_excludente_um_w
	and	a.ie_origem_proced		= 2;

	if (qt_reg_w		> 0) then
		begin
		qt_reg_w	:= 0;
		select	count(*)
		into STRICT	qt_reg_w
		from	procedimento_paciente a
		where	a.nr_interno_conta		= nr_interno_conta_p
		and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
		and	a.cd_procedimento		= cd_excludente_dois_w
		and	a.ie_origem_proced		= 2;
		if (qt_reg_w		> 0) 	and
			((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
			ds_erro_w := ds_erro_w

||'2200'||'('||to_char(cd_excludente_um_w)||'/'||to_char(cd_excludente_dois_w)||') ';
		end if;
		end;
	end if;
	end;
end loop;
close c06;


/* consistencia quantidade do procedimento */

begin
select 	count(*)
into STRICT 		qt_proced_invalido_w

where exists
(SELECT	a.nr_atendimento,
		a.cd_procedimento,
		a.ie_tipo_servico_sus,
		sum(a.qt_procedimento)
from   	procedimento_paciente a
where    	a.nr_atendimento 		= nr_atendimento_p
and		a.nr_interno_conta	= nr_interno_conta_p
and   	((a.cd_procedimento between 31000000 and 44999999) or (substr(a.cd_procedimento,1,5) = '76400'))
and     	coalesce(a.ie_tipo_servico_sus::text, '') = ''
and		coalesce(a.cd_motivo_exc_conta::text, '') = ''
group by
            a.nr_atendimento,
            a.cd_procedimento,
            a.ie_tipo_servico_sus
having 	sum(a.qt_procedimento) > 1

union

select 	a.nr_atendimento,
         	a.cd_procedimento,
            a.ie_tipo_servico_sus,
            sum(a.qt_procedimento)
from   	procedimento_paciente a
where    	a.nr_atendimento 		= nr_atendimento_p
and		a.nr_interno_conta	= nr_interno_conta_p
and (a.cd_procedimento between 31000000 and 44999999)
and      	(a.ie_tipo_servico_sus IS NOT NULL AND a.ie_tipo_servico_sus::text <> '')
and		coalesce(a.cd_motivo_exc_conta::text, '') = ''
group by
            a.nr_atendimento,
            a.cd_procedimento,
            a.ie_tipo_servico_sus
having 	sum(a.qt_procedimento) > 1);
exception
		when others then
			qt_proced_invalido_w := 0;
end;
if (qt_proced_invalido_w > 0) 	and
	((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
	begin
	ds_erro_w			:= ds_erro_w || '740 ';
	end;
end if;

/* consistencia do procedimento */

open c04;
loop
fetch c04 into
		cd_procedimento_w,
		ie_origem_proced_w,
		qt_procedimento_w,
		ie_tipo_serv_partic_w,
		ie_tipo_ato_partic_w,
		cd_convenio_w,
		nr_nf_prestador_w,
		cd_medico_executor_w,
		ie_forma_apresentacao_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
	begin

	/* consiste tipo de serviço x tipo de ato */

	if (qt_regra_servico_ato_w	> 0)		and (ie_tipo_serv_partic_w IS NOT NULL AND ie_tipo_serv_partic_w::text <> '')		and (ie_tipo_ato_partic_w IS NOT NULL AND ie_tipo_ato_partic_w::text <> '')		then
		begin
		select	count(*)
		into STRICT	qt_regra_servico_ato_erro_w
		from	sus_regra_servico_ato
		where	ie_tipo_servico_sus		= ie_tipo_serv_partic_w
		and	ie_tipo_ato_sus		= ie_tipo_ato_partic_w;
		if (qt_regra_servico_ato_erro_w	= 0) and
			((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
			ds_erro_w 	:=

ds_erro_w||'2228'||'('||'ser='||to_char(ie_tipo_serv_partic_w)||'ato='||to_char(ie_tipo_ato_partic_w)||') ';
		end if;
		end;
	end if;

	/* forma apresentacao 7-qtd do procedimento igual a qtd de dias úteis do atendimento */

	if (ie_forma_apresentacao_w	= 7)		then
		begin
		select	coalesce(obter_dias_uteis_periodo(dt_entrada_w,dt_alta_w,cd_estabelecimento_w),0)
		into STRICT	qt_dias_uteis_w
		;
		if	(qt_procedimento_w <> (qt_dias_uteis_w - 1)) and /* felipe - 05/06/06 - coloquei o - 1 os34728 */
			((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
			ds_erro_w 	:= ds_erro_w||'2210'||'('||to_char(qt_dias_uteis_w - 1)||') ';
		end if;
		end;
	end if;

	/* forma apresentacao 5-qtd do procedimento igual a qtd de diarias */

	if (ie_forma_apresentacao_w	= 5)		and
		(qt_procedimento_w	<> (qt_diarias_w + qt_ajuste_w)) and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2169 ';
	end if;

	/* forma apresentacao 6-qtd do procedimento limitado a qtd de diarias */

	if (ie_forma_apresentacao_w	= 6)		and (qt_procedimento_w	> qt_diarias_w)		and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2169 ';
	end if;

	/* tipo de serviço 7 exige médico executor com cpf os6694 */

	if (ie_tipo_serv_partic_w	= 7)		and (coalesce(cd_medico_executor_w::text, '') = '')		and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2109 ';
	end if;

	/* tipo de serviço 21-analgesia obstétrica pf exige médico os8271 */

	if (ie_tipo_serv_partic_w	= 21)		and (coalesce(cd_medico_executor_w::text, '') = '')		and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2119 ';
	end if;

	/* tipo de serviço 22-analgesia obstétrica pj não pode ter médico os8271 */

	if (ie_tipo_serv_partic_w	= 22)		and (cd_medico_executor_w IS NOT NULL AND cd_medico_executor_w::text <> '')	and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2120 ';
	end if;

	/* tipo de serviço 6-atendimento rn exige médico os8272 */

	if (ie_tipo_serv_partic_w	= 6)		and (coalesce(cd_medico_executor_w::text, '') = '')		and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2121 ';
	end if;

	/* tipo de serviço 23-pediatria primeira consulta exige médico os8272 */

	if (ie_tipo_serv_partic_w	= 23)		and (coalesce(cd_medico_executor_w::text, '') = '')		and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2122 ';
	end if;

	if (ie_tipo_serv_partic_w	= 7)		and (cd_medico_executor_w IS NOT NULL AND cd_medico_executor_w::text <> '')	then
		begin
		select coalesce(obter_cpf_pessoa_fisica(cd_medico_executor_w),'X')
		into STRICT	 nr_cpf_val_w
		;
		if (nr_cpf_val_w = 'X')	and
			 ((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
			ds_erro_w	:= ds_erro_w || '2109 ';
		end if;
		end;
	end if;

	/* procedimento com quantidade zerada */

	if (qt_procedimento_w	= 0)	and
		((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
		ds_erro_w	:= ds_erro_w || '2156 ';
	end if;

	/* consistencia sipac */

	select	count(*)
	into STRICT	qt_reg_w
	from	sus_sipac_credenciada;
	if (qt_reg_w	 >0) then
		begin
		select	coalesce(max(nr_seq_sipac),0)
		into STRICT	nr_seq_sipac_w
		from	sus_sipac_proc
		where	cd_procedimento	= cd_procedimento_w
		and	ie_origem_proced	= ie_origem_proced_w;

		if (nr_seq_sipac_w	> 0) then
			begin
			qt_reg_w	:= 0;
			select	count(*)
			into STRICT	qt_reg_w
			from	sus_sipac_credenciada
			where	nr_seq_sipac	= nr_seq_sipac_w;
			if (qt_reg_w		= 0) 	and
				((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
				begin
				ds_erro_w := ds_erro_w||'2204'||'('||to_char(cd_procedimento_w)||') ';
				end;
			end if;
			end;
		end if;
		end;
	end if;

	/* falta informar procedimento compatível */

	select	count(*)
	into STRICT	qt_proc_obrig_w
	from	sus_proc_compatibilidade
	where	cd_procedimento		= cd_procedimento_w
	and	ie_origem_proced	= ie_origem_proced_w;

	if (qt_proc_obrig_w	> 0) then
		select	count(*)
		into STRICT	qt_proc_comp_w
		from	sus_proc_compatibilidade	b,
			procedimento_paciente		a
		where	a.nr_atendimento	= nr_atendimento_p
		and	a.nr_interno_conta	= nr_interno_conta_p
		and	a.cd_procedimento	= b.cd_procedimento_comp
		and	a.ie_origem_proced	= b.ie_origem_proced_comp
		and	b.cd_procedimento	= cd_procedimento_w
		and	b.ie_origem_proced	= ie_origem_proced_w;

		if (qt_proc_comp_w		= 0) and
			((length(ds_erro_w)	< 3500) or (coalesce(ds_erro_w::text, '') = ''))	then
			begin
			ds_erro_w	:= ds_erro_w||'2208'||'('||to_char(cd_procedimento_w)||') ';
			end;
		end if;
	end if;

	/* 779 - tipo de serviço "45" para médico não conveniado ao sus */

	if (cd_medico_executor_w IS NOT NULL AND cd_medico_executor_w::text <> '') and (ie_tipo_serv_partic_w = 45) and (obter_se_medico_conveniado(cd_estabelecimento_w, cd_medico_executor_w, cd_convenio_w, null, null,null,null,null,null,null,null) = 'N') then
		/* ds_erro_w	:= ds_erro_w||'779'||'('||to_char(cd_medico_executor_w)||') '; */

		ds_erro_w	:= ds_erro_w||'779'||'('||cd_medico_executor_w||') ';
	end if;

	ds_erro_procedimento_w	:= '';
	ds_erro_procedimento_w := consiste_procedimento(nr_atendimento_p, cd_procedimento_w, ie_origem_proced_w, qt_procedimento_w, cd_convenio_w, ie_tipo_serv_partic_w, ie_tipo_ato_partic_w, nr_nf_prestador_w, cd_medico_executor_w, nr_interno_conta_p, ds_erro_procedimento_w);
	if	((length(coalesce(ds_erro_w,' ')) + length(ds_erro_procedimento_w)) < 80) then
		ds_erro_w 	:= ds_erro_w || ds_erro_procedimento_w;
	end if;
	end;
end loop;
close c04;

ds_erro_p	:= substr(ds_erro_w,1,254);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_proc_aih ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nr_aih_p bigint, ds_erro_p INOUT text) FROM PUBLIC;

