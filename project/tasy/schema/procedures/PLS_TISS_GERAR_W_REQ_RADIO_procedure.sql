-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE rc_cid AS (dt_diag_w		timestamp,
				cd_cid_w		varchar(4),
				cd_diag_imag_w		varchar(1),
				ie_est_tumor_w		varchar(1),
				ie_cap_func_w		varchar(1),
				cd_fin_trat_w		varchar(1),
				ds_diag_w		varchar(1000),
				ds_obs_w		varchar(4000));
CREATE TYPE rc_proc AS (dt_prev_w		timestamp,
				cd_tabela_w		varchar(2),
				cd_proc_w		varchar(10),
				ds_proc_w		varchar(150),
				qt_solic_w		real,
				nr_seq_apre_w	bigint);


CREATE OR REPLACE PROCEDURE pls_tiss_gerar_w_req_radio ( nr_seq_requisicao_p bigint, nr_seq_lote_guia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


type 	tb_cid is table of rc_cid index by integer;

type 	tb_proc is table of rc_proc index by integer;

tb_cid_w			tb_cid;

tb_proc_w			tb_proc;

cd_guia_prestador_w		varchar(20);
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type; -- OS - 1297426
cd_ans_w			varchar(6);
cd_guia_referencia_w		varchar(20);
cd_senha_w			varchar(20);
dt_autorizacao_w		timestamp;
cd_guia_w			varchar(20);
cd_usuario_plano_w		varchar(20);
nm_beneficiario_w		varchar(70);
qt_idade_benef_w		smallint;
ie_sexo_w			varchar(1);
nm_profissional_solic_w		varchar(70);
nr_telefone_w			varchar(15);
ds_email_w			varchar(255);
dt_diagnostico_w		timestamp;
cd_doenca_w			varchar(4);
cd_diagnostico_imagem_w		varchar(1);
ie_estadia_tumor_w		varchar(1);
ie_capacidade_funcional_w	varchar(1);
cd_finalidade_tratamento_w	varchar(1);
ds_diagnostico_w		varchar(1000);
ds_observacao_w			varchar(4000);
nr_seq_segurado_w		varchar(15);
dt_prev_realizacao_w		timestamp;
cd_tipo_tabela_w		varchar(2);
cd_procedimento_w		varchar(10);
ds_procedimento_w		varchar(150);
qt_solicitado_w			real;
cd_pessoa_fisica_w		varchar(10);
nr_seq_guia_w			bigint;
nr_seq_apresentacao_w		bigint;
nr_cid_w			bigint;
nr_proc_w			bigint;
i				bigint;

c01 CURSOR FOR 	--Procedimentos Complementares 1
	SELECT	a.dt_prev_realizacao,
		pls_obter_cod_tabela_tiss(c.cd_procedimento, c.ie_origem_proced, null) cd_tabela,
		substr(pls_obter_dados_proc_guia_req(null,a.nr_seq_req_proc,'CD'),1,255),
		substr(pls_obter_dados_proc_guia_req(null,a.nr_seq_req_proc,'DS'),1,255),
		c.qt_solicitado
	from	pls_lote_anexo_proc_aut		a,
		pls_lote_anexo_guias_aut	b,
		pls_requisicao_proc		c
	where	a.nr_seq_lote_anexo_guia = b.nr_sequencia
	and	c.nr_sequencia = a.nr_seq_req_proc
	and	b.nr_seq_requisicao = nr_seq_requisicao_p
	and (b.nr_sequencia = nr_seq_lote_guia_p
	or	0 = coalesce(nr_seq_lote_guia_p, 0))
	and	b.ie_tipo_anexo = 'RA';

c02 CURSOR FOR 	--Diagnóstico oncológico
	SELECT	b.dt_diagnostico,
		b.cd_doenca,
		b.cd_diagnostico_imagem,
		b.ie_estadia_tumor,
		b.ie_capacidade_funcional,
		b.cd_finalidade_tratamento,
		b.ds_diagnostico,
		b.ds_observacao
	from	pls_lote_anexo_diag_aut		b,
		pls_lote_anexo_guias_aut	a
	where	b.nr_seq_lote_anexo_guia = a.nr_sequencia
	and	a.nr_seq_requisicao = nr_seq_requisicao_p
	and (a.nr_sequencia = nr_seq_lote_guia_p
	or	0 = coalesce(nr_seq_lote_guia_p, 0))
	and	a.ie_tipo_anexo = 'RA'
	order by ie_tipo_diagnostico desc, b.nr_sequencia asc;
	/*Não mudar a ordenação, é necessário trazer primeiro os dados do atendimento e depois os diagnósticos */

BEGIN

delete	from w_tiss_guia
where	nm_usuario		= nm_usuario_p;

delete	from w_tiss_beneficiario
where	nm_usuario		= nm_usuario_p;

delete	from w_tiss_contratado_solic
where	nm_usuario		= nm_usuario_p;

delete	from w_tiss_solicitacao
where	nm_usuario		= nm_usuario_p;

delete	from w_tiss_proc_paciente
where	nm_usuario		= nm_usuario_p;

commit;

if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '')  then

	begin	--Dados da requisição	--Dados do beneficiário
		select	b.nr_seq_segurado,
			coalesce(b.cd_senha, b.cd_senha_externa),
			coalesce(dt_fim_processo_req, dt_requisicao),
			b.nr_seq_prestador,
			null,
			a.cd_guia_referencia,
			null,
			pls_obter_dados_segurado(b.nr_seq_segurado,'CR') cd_carteira,
			pls_obter_dados_segurado(b.nr_seq_segurado,'NS') nm_beneficiarionm_beneficiario ,
			coalesce(a.qt_idade_benef,  pls_obter_dados_segurado(nr_seq_segurado, 'ID')) qt_idade,
			coalesce(a.ie_sexo, pls_obter_dados_segurado(b.nr_seq_segurado,'SXS')) ie_sexo,
			b.cd_estabelecimento -- OS - 1297426
		into STRICT	nr_seq_segurado_w,
			cd_senha_w,
			dt_autorizacao_w,
			nr_seq_prestador_w,
			cd_guia_prestador_w,
			cd_guia_referencia_w,
			cd_guia_w,
			cd_usuario_plano_w,
			nm_beneficiario_w,
			qt_idade_benef_w,
			ie_sexo_w,
			cd_estabelecimento_w -- OS - 1297426
		from	pls_lote_anexo_guias_aut a,
			pls_requisicao b
		where	a.nr_seq_requisicao = b.nr_sequencia
		and	a.nr_seq_requisicao = nr_seq_requisicao_p
		and (a.nr_sequencia = nr_seq_lote_guia_p
		or	0 = coalesce(nr_seq_lote_guia_p, 0))
		and	a.ie_tipo_anexo = 'RA';



		if (ie_sexo_w = 'M') then
			ie_sexo_w := '1';
		elsif (ie_sexo_w = 'F') then
			ie_sexo_w := '3';
		elsif (ie_sexo_w not in ('1','3')) then
			ie_sexo_w := null;
		end if;
	exception
	when others then
		cd_guia_prestador_w		:= null;
		cd_guia_referencia_w		:= null;
		cd_senha_w			:= null;
		dt_autorizacao_w		:= null;
		cd_guia_w			:= null;
		cd_usuario_plano_w		:= null;
		nm_beneficiario_w		:= null;
		qt_idade_benef_w		:= null;
		ie_sexo_w			:= null;
		cd_estabelecimento_w		:= null;
	end;

	begin	--Dados do profissional solicitante
		select	c.nm_profissional_solic,
			c.nr_telef_prof_solic,
			c.ds_email_prof_solic
		into STRICT	nm_profissional_solic_w,
			nr_telefone_w,
			ds_email_w
		from	pls_lote_anexo_guias_aut 	c
		where	c.nr_seq_requisicao = nr_seq_requisicao_p
		and (c.nr_sequencia = nr_seq_lote_guia_p
		or	0 = coalesce(nr_seq_lote_guia_p, 0))
		and	c.ie_tipo_anexo = 'RA';
	exception
	when others then
		nm_profissional_solic_w		:= null;
		nr_telefone_w			:= null;
		ds_email_w			:= null;
	end;


	cd_ans_w	:= pls_obter_dados_outorgante(cd_estabelecimento_w,'ANS'); -- OS - 1297426
	if (coalesce(cd_ans_w::text, '') = '') then
		cd_ans_w := pls_obter_dados_outorgante(cd_estabelecimento_p,'ANS'); -- OS - 1297426
	end if;

	if (coalesce(cd_ans_w::text, '') = '') then		-- OS - 1297426
		select	max(cd_ans)
		into STRICT	cd_ans_w
		from	pls_outorgante
		where	(cd_ans IS NOT NULL AND cd_ans::text <> '');
	end if;

	select	nextval('w_tiss_guia_seq')
	into STRICT	nr_seq_guia_w
	;



	insert	into w_tiss_guia(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		nr_guia_prestador,
		cd_ans,
		cd_autorizacao_princ,		-- guarda CD_GUIA_REFERENCIA
		cd_senha,
		dt_autorizacao,
		nr_seq_guia,
		cd_autorizacao)			-- guarda CD_GUIA
	values (nr_seq_guia_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_guia_prestador_w,
		cd_ans_w,
		cd_guia_referencia_w,
		cd_senha_w,
		dt_autorizacao_w,
		nr_seq_requisicao_p,
		cd_guia_w);

	cd_pessoa_fisica_w := 0;

	insert	into w_tiss_beneficiario(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		cd_pessoa_fisica,
		cd_usuario_convenio,
		nm_pessoa_fisica,
		qt_idade,
		ie_sexo,
		nr_seq_guia)
	values (nextval('w_tiss_beneficiario_seq'),
		clock_timestamp(),
		nm_usuario_p,
		cd_pessoa_fisica_w,
		cd_usuario_plano_w,
		nm_beneficiario_w,
		qt_idade_benef_w,
		ie_sexo_w,
		nr_seq_guia_w);

	insert into w_tiss_contratado_solic(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		nm_solicitante,
		nr_telefone_contrat,
		ds_email_contrat,
		nr_seq_guia)
	values (nextval('w_tiss_contratado_solic_seq'),
		clock_timestamp(),
		nm_usuario_p,
		nm_profissional_solic_w,
		nr_telefone_w,
		ds_email_w,
		nr_seq_guia_w);

	nr_seq_apresentacao_w := 1;
	nr_proc_w := 1;

	open c01;
	loop
	fetch c01 into	dt_prev_realizacao_w,
			cd_tipo_tabela_w,
			cd_procedimento_w,
			ds_procedimento_w,
			qt_solicitado_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */

	begin
		tb_proc_w[nr_proc_w].dt_prev_w		:= dt_prev_realizacao_w;
		tb_proc_w[nr_proc_w].cd_tabela_w	:= cd_tipo_tabela_w;
		tb_proc_w[nr_proc_w].cd_proc_w		:= cd_procedimento_w;
		tb_proc_w[nr_proc_w].ds_proc_w		:= ds_procedimento_w;
		tb_proc_w[nr_proc_w].qt_solic_w		:= qt_solicitado_w;
		tb_proc_w[nr_proc_w].nr_seq_apre_w	:= nr_seq_apresentacao_w;
		nr_proc_w := nr_proc_w + 1;
		nr_seq_apresentacao_w := nr_seq_apresentacao_w + 1;
	end;
	end loop;
	close c01;

	if (nr_proc_w < 12) then
		for i in 1.. 12 loop
			begin
				if ( i = nr_proc_w ) then
					tb_proc_w[nr_proc_w].dt_prev_w		:= null;
					tb_proc_w[nr_proc_w].cd_tabela_w	:= ' ';
					tb_proc_w[nr_proc_w].cd_proc_w		:= ' ';
					tb_proc_w[nr_proc_w].ds_proc_w		:= ' ';
					tb_proc_w[nr_proc_w].qt_solic_w		:= null;
					tb_proc_w[nr_proc_w].nr_seq_apre_w	:= nr_seq_apresentacao_w;
					nr_proc_w := nr_proc_w + 1;
					nr_seq_apresentacao_w := nr_seq_apresentacao_w + 1;
				end if;
			end;
		end loop;
	end if;

	for i in 1.. 12  loop
		begin
		insert into w_tiss_proc_paciente(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_procedimento,	-- guarda DT_PREVISTA
				cd_edicao_amb,		-- guarda CD_TIPO_TABELA
				cd_procedimento,
				ds_procedimento,
				qt_procedimento,	-- guarda QT_SOLICITADA
				nr_seq_apresentacao,
				nr_seq_guia)
			values (nextval('w_tiss_proc_paciente_seq'),
				clock_timestamp(),
				nm_usuario_p,
				tb_proc_w[i].dt_prev_w,
				tb_proc_w[i].cd_tabela_w,
				tb_proc_w[i].cd_proc_w,
				tb_proc_w[i].ds_proc_w,
				tb_proc_w[i].qt_solic_w,
				tb_proc_w[i].nr_seq_apre_w,
				nr_seq_guia_w);
		end;
	end loop;

	nr_cid_w := 0;

	tb_cid_w.delete;

	open c02;
	loop
	fetch c02 into	dt_diagnostico_w,
			cd_doenca_w,
			cd_diagnostico_imagem_w,
			ie_estadia_tumor_w,
			ie_capacidade_funcional_w,
			cd_finalidade_tratamento_w,
			ds_diagnostico_w,
			ds_observacao_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
			tb_cid_w[nr_cid_w].dt_diag_w		:= dt_diagnostico_w;
			tb_cid_w[nr_cid_w].cd_cid_w		:= cd_doenca_w;
			tb_cid_w[nr_cid_w].cd_diag_imag_w	:= cd_diagnostico_imagem_w;
			tb_cid_w[nr_cid_w].ie_est_tumor_w	:= ie_estadia_tumor_w;
			tb_cid_w[nr_cid_w].ie_cap_func_w	:= ie_capacidade_funcional_w;
			tb_cid_w[nr_cid_w].cd_fin_trat_w	:= cd_finalidade_tratamento_w;
			tb_cid_w[nr_cid_w].ds_diag_w		:= ds_diagnostico_w;
			tb_cid_w[nr_cid_w].ds_obs_w		:= ds_observacao_w;
			nr_cid_w := nr_cid_w + 1;
		end;
	end loop;
	close c02;

	if (nr_cid_w = 1 )then
		insert into w_tiss_solicitacao(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_diagnostico,	cd_cid,	cd_diagnostico_imagem,
			cd_estadiamento_tumor,	ie_capacidade_funcional,cd_finalidade_tratamento,
			ds_diagnostico,	ds_observacao,nr_seq_guia)
		values (nextval('w_tiss_solicitacao_seq'), clock_timestamp(),nm_usuario_p,
			tb_cid_w[0].dt_diag_w,	tb_cid_w[0].cd_cid_w,	tb_cid_w[0].cd_diag_imag_w,
			tb_cid_w[0].ie_est_tumor_w, tb_cid_w[0].ie_cap_func_w, tb_cid_w[0].cd_fin_trat_w,
			tb_cid_w[0].ds_diag_w, tb_cid_w[0].ds_obs_w, nr_seq_guia_w);
	elsif (nr_cid_w = 2 )then
		insert into w_tiss_solicitacao(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_diagnostico, cd_cid,	cd_cid2,
			cd_diagnostico_imagem, cd_estadiamento_tumor, ie_capacidade_funcional,
			cd_finalidade_tratamento, ds_diagnostico, ds_observacao,
			nr_seq_guia)
		values (nextval('w_tiss_solicitacao_seq'), clock_timestamp(), nm_usuario_p,
			tb_cid_w[0].dt_diag_w,	tb_cid_w[1].cd_cid_w, tb_cid_w[0].cd_cid_w,
			tb_cid_w[0].cd_diag_imag_w, tb_cid_w[0].ie_est_tumor_w,	tb_cid_w[0].ie_cap_func_w,
			tb_cid_w[0].cd_fin_trat_w, tb_cid_w[0].ds_diag_w, tb_cid_w[0].ds_obs_w,
			nr_seq_guia_w);
	elsif (nr_cid_w = 3 )then
		insert into w_tiss_solicitacao(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_diagnostico, cd_cid, cd_cid2,
			cd_cid3, cd_diagnostico_imagem, cd_estadiamento_tumor,
			ie_capacidade_funcional, cd_finalidade_tratamento, ds_diagnostico,
			ds_observacao, nr_seq_guia)
		values (nextval('w_tiss_solicitacao_seq'), clock_timestamp(), nm_usuario_p,
			tb_cid_w[0].dt_diag_w, tb_cid_w[1].cd_cid_w, tb_cid_w[2].cd_cid_w,
			tb_cid_w[0].cd_cid_w, tb_cid_w[0].cd_diag_imag_w, tb_cid_w[0].ie_est_tumor_w,
			tb_cid_w[0].ie_cap_func_w, tb_cid_w[0].cd_fin_trat_w, tb_cid_w[0].ds_diag_w,
			tb_cid_w[0].ds_obs_w,nr_seq_guia_w);
	elsif (nr_cid_w = 4 )then
		insert into w_tiss_solicitacao(nr_sequencia, dt_atualizacao,nm_usuario,
			dt_diagnostico, cd_cid, cd_cid2,
			cd_cid3, cd_cid4, cd_diagnostico_imagem, cd_estadiamento_tumor,
			ie_capacidade_funcional, cd_finalidade_tratamento, ds_diagnostico,
			ds_observacao, nr_seq_guia)
		values (nextval('w_tiss_solicitacao_seq'), clock_timestamp(),
			nm_usuario_p, tb_cid_w[0].dt_diag_w, tb_cid_w[1].cd_cid_w,
			tb_cid_w[2].cd_cid_w, tb_cid_w[3].cd_cid_w, tb_cid_w[0].cd_cid_w,
			tb_cid_w[0].cd_diag_imag_w, tb_cid_w[0].ie_est_tumor_w,	tb_cid_w[0].ie_cap_func_w,
			tb_cid_w[0].cd_fin_trat_w, tb_cid_w[0].ds_diag_w, tb_cid_w[0].ds_obs_w,
			nr_seq_guia_w);
	elsif (nr_cid_w = 5 )then
		insert into w_tiss_solicitacao(nr_sequencia,dt_atualizacao,nm_usuario,
			dt_diagnostico,cd_cid,cd_cid2,
			cd_cid3,cd_cid4,cd_diagnostico_imagem,
			cd_estadiamento_tumor,ie_capacidade_funcional,cd_finalidade_tratamento,
			ds_diagnostico, ds_observacao, nr_seq_guia)
		values (nextval('w_tiss_solicitacao_seq'), clock_timestamp(),nm_usuario_p,
			tb_cid_w[0].dt_diag_w, tb_cid_w[1].cd_cid_w,tb_cid_w[2].cd_cid_w,
			tb_cid_w[3].cd_cid_w,tb_cid_w[4].cd_cid_w,tb_cid_w[0].cd_diag_imag_w,
			tb_cid_w[0].ie_est_tumor_w,tb_cid_w[0].ie_cap_func_w,tb_cid_w[0].cd_fin_trat_w,
			tb_cid_w[0].ds_diag_w,tb_cid_w[0].ds_obs_w,nr_seq_guia_w);
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_tiss_gerar_w_req_radio ( nr_seq_requisicao_p bigint, nr_seq_lote_guia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

