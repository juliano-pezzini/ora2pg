-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_pp_cta_des_fechar_lote_pag ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


ds_stack_w		pls_pp_lote_log_etapa.ds_erro%type;
nr_seq_log_etapa_w	pls_pp_lote_log_etapa.nr_sequencia%type;
ie_data_lote_prod_med_w	pls_parametro_contabil.ie_data_lote_prod_med%type;
ie_concil_contab_w	pls_visible_false.ie_concil_contab%type;



BEGIN

begin

	-- Estorno dos movimentos na contabilidade instantânea
	select 	coalesce(max(ie_concil_contab), 'N')
	into STRICT	ie_concil_contab_w
	from	pls_visible_false
	where	cd_estabelecimento = cd_estabelecimento_p;

	select	coalesce(max(ie_data_lote_prod_med),'C')
	into STRICT	ie_data_lote_prod_med_w
	from	pls_parametro_contabil
	where	cd_estabelecimento = cd_estabelecimento_p;

	if (ie_data_lote_prod_med_w = 'C' and ie_concil_contab_w = 'S') then
		CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_desf_fech_lote_pp(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	end if;

	-- faz o carregamento de parâmetros gerais e armazena em variáveis globais da package pls_pp_lote_pagamento_pck
	CALL pls_pp_lote_pagamento_pck.carrega_parametros(	nr_seq_lote_p, cd_estabelecimento_p);

	-- validação para verificar se a geração do lote pode ser desfeita
	CALL pls_pp_lote_pagamento_pck.valida_se_pode_des_fechar_lote(	nr_seq_lote_p, cd_estabelecimento_p);

	-- alimenta a tabela de prestador temp pois será utilizada no processo de atualização dos valores dos prestador
	CALL pls_pp_lote_pagamento_pck.alimenta_prestadores_tab_temp(pls_pp_lote_pagamento_pck.dt_referencia_lote_fim_w);

	-- limpa todos os registros de geração de um possível lote anterior
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(	nr_seq_lote_p, null, 'L', null, nr_seq_log_etapa_w, 'F', nm_usuario_p);

	-- limpa os regristros de apropriação, desfaz as possíveis baixas deste lote e atualiza as dividas
	CALL pls_pp_apropriacao_pck.desfazer_aprop_fec_lote_pgto(	nr_seq_lote_p, nm_usuario_p);

	-- estorna o vl_item da pls_pp_item_lote para o vl_divida da pls_pp_item_apropriacao
	CALL pls_pp_lote_pagamento_pck.estornar_vl_negativo_lote( nr_seq_lote_p );

	-- limpa os campos vl_acao_negativo e ie_acao_negativo da pls_pp_item_lote
	CALL pls_pp_lote_pagamento_pck.limpa_vl_negativo_lote( nr_seq_lote_p );

	-- exclui os registros dos tributos (pls_pp_valor_trib_pessoa, pls_pp_base_atual_trib e pls_pp_ba_acu_trib_pess)
	CALL pls_pp_tributacao_pck.desfazer_tributos_lote(	nr_seq_lote_p);

	-- exclui os itens de franquia 
	CALL pls_pp_lote_franquia_pck.desfazer_franquia_pgto(nr_seq_lote_p);

	-- limpa os lançamentos programados que foram lançados após a tributação
	CALL pls_pp_lote_pagamento_pck.desfazer_item_lanc_prog(	nr_seq_lote_p, 'FECHAR_LOTE');

	-- exclui todos os eventos do lote agrupados por prestador ( pls_pp_prest_event_prest e pls_pp_prestador )
	CALL pls_pp_lote_pagamento_pck.desfazer_item_prod_prest(	nr_seq_lote_p);

	-- exclui todos os eventos de produção médica do lote agrupados por evento e prestador  ( pls_pp_it_prest_event_val e pls_pp_prest_evento_valor )
	CALL pls_pp_lote_pagamento_pck.desfazer_item_prod_event_prest(	nr_seq_lote_p);	

	-- Faz um agrupamento por evento e prestador de todas as contas/itens que devem fazer parte do lote de pagamento de produção
	CALL pls_pp_lote_pagamento_pck.gerar_prestador_evento_lote(	nr_seq_lote_p, nm_usuario_p);

	-- Faz um agrupamento por prestador de todas as contas/itens que devem fazer parte do lote de pagamento de produção
	CALL pls_pp_lote_pagamento_pck.gerar_prestador_lote(	nr_seq_lote_p, nm_usuario_p);

	-- se o desfazer fechamento do lote for um sucesso muda o status do lote
	CALL pls_pp_lote_pagamento_pck.atualiza_desf_fec_lote_pgto(	nr_seq_lote_p, 'S', nm_usuario_p);

exception
when others then
	-- limpa os dados de pagamento

	-- para gerar novamente só desfazendo a geração do anterior
	CALL pls_pp_lote_pagamento_pck.atualiza_desf_fec_lote_pgto(nr_seq_lote_p, 'N', nm_usuario_p);
	
	ds_stack_w := dbms_utility.format_call_stack || pls_util_pck.enter_w ||
		      dbms_utility.format_error_backtrace || pls_util_pck.enter_w ||
		      sqlerrm;
	-- grava log se deu erro
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'E', null, nr_seq_log_etapa_w, 'F', nm_usuario_p, ds_stack_w);
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_cta_des_fechar_lote_pag ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

