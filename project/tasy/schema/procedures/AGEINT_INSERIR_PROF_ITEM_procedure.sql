-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ageint_inserir_prof_item ( nr_Seq_item_p bigint, ds_prof_itens_p text, ds_lista_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_erro_p INOUT text) AS $body$
DECLARE

 
 
ie_gerar_prof_protocolo_w	varchar(1);				
cd_profissional_w	varchar(10);
cd_medico_w		varchar(10);
ds_lista_w		varchar(2000);
tam_lista_w		numeric(20);
ie_pos_virgula_w	smallint;
nr_seq_ageint_item_w	bigint;
nr_seq_grupo_proc_w	bigint;
nr_seq_agenda_int_w	bigint;
ie_tipo_agendamento_w	varchar(15);
qt_medico_w		bigint;
ie_erro_w		varchar(1) := 'N';
qt_prof_w		bigint;
ie_tipo_agenda_item_w	varchar(1);

C01 CURSOR FOR 
	SELECT	nr_sequencia 
	from	agenda_integrada_item 
	where	nr_seq_item_princ = nr_Seq_item_p 
	order by 1;
	
C02 CURSOR FOR 
	SELECT	nr_sequencia, 
		ie_tipo_agendamento 
	from	agenda_integrada_item 
	where	nr_seq_agenda_int = nr_seq_agenda_int_w 
	and (nr_seq_grupo_proc = coalesce(nr_seq_grupo_proc_w,0) or Obter_Se_Contido(nr_sequencia,ds_lista_p) = 'S') 
	and	nr_sequencia <> nr_seq_item_p 
	order by 1;


BEGIN 
 
select	max(nr_seq_Agenda_int), 
	max(ie_tipo_agendamento) 
into STRICT	nr_seq_agenda_int_w, 
	ie_tipo_agenda_item_w 
from	agenda_integrada_item 
where	nr_sequencia	= nr_seq_item_p;
 
ie_gerar_prof_protocolo_w := obter_param_usuario(869, 252, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_prof_protocolo_w);
 
if (ie_gerar_prof_protocolo_w = 'S') then 
	select	max(nr_seq_grupo_proc), 
		max(nr_seq_agenda_int) 
	into STRICT	nr_seq_grupo_proc_w, 
		nr_seq_agenda_int_w 
	from	agenda_integrada_item 
	where 	nr_sequencia = nr_seq_item_p;
	 
	begin 
	select	count(*) 
	into STRICT	qt_prof_w 
	from	agenda_integrada_item a, 
		agenda_integrada_prof_item b 
	where	a.nr_seq_agenda_int = nr_seq_agenda_int_w 
	and	a.nr_seq_grupo_proc = nr_seq_grupo_proc_w 
	and	b.nr_seq_agenda_item = a.nr_sequencia 
	and	a.nr_sequencia <> nr_seq_item_p  LIMIT 1;
	exception 
	when no_data_found then 
		qt_prof_w	:= 0;
	end;
	 
end if;
 
ds_lista_w := ds_prof_itens_p;
 
while(ds_lista_w IS NOT NULL AND ds_lista_w::text <> '') loop 
	begin 
	tam_lista_w		:= length(ds_lista_w);
	ie_pos_virgula_w	:= position(',' in ds_lista_w);
	 
	if (ie_pos_virgula_w <> 0) then 
		cd_medico_w	:= substr(ds_lista_w,1,(ie_pos_virgula_w - 1));
		ds_lista_w	:= substr(ds_lista_w,(ie_pos_virgula_w + 1),tam_lista_w);
	end if;
	 
	select max(cd_pessoa_fisica) 
	into STRICT	cd_profissional_w 
	from  ageint_medico_item 
	where	cd_pessoa_fisica = cd_medico_w;
	 
	if (ie_tipo_agenda_item_w	= 'C') then 
		update	agenda_integrada_item 
		set	cd_medico	 = NULL 
		where	nr_sequencia	= nr_seq_item_p;
	end if;
	 
	if (cd_profissional_w IS NOT NULL AND cd_profissional_w::text <> '') then 
		insert into agenda_integrada_prof_item( 
			nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_agenda_item, 
			cd_pessoa_fisica, 
			ie_confirmado) 
		values ( 
			nextval('agenda_integrada_prof_item_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			nr_Seq_item_p, 
			cd_profissional_w, 
			'N');
	end if;
	 
	open C01;
	loop 
	fetch C01 into	 
		nr_seq_ageint_item_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		if (cd_profissional_w IS NOT NULL AND cd_profissional_w::text <> '') then 
			insert into agenda_integrada_prof_item( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_agenda_item, 
				cd_pessoa_fisica, 
				ie_confirmado) 
			values ( 
				nextval('agenda_integrada_prof_item_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_ageint_item_w, 
				cd_profissional_w, 
				'N');
		end if;
		end;
	end loop;
	close C01;
		 
	 
	if	(qt_prof_w = 0 AND ie_gerar_prof_protocolo_w = 'S') or (ds_lista_p IS NOT NULL AND ds_lista_p::text <> '') then 
		 
		open C02;
		loop 
		fetch C02 into	 
			nr_seq_ageint_item_w, 
			ie_tipo_agendamento_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin		 
			if (ie_tipo_agendamento_w = 'E') then 
				CALL ageint_gerar_medico_item(nr_seq_agenda_int_w,nr_seq_ageint_item_w,nm_usuario_p,cd_estabelecimento_p);
			elsif (ie_tipo_agendamento_w = 'C') then 
				CALL ageint_gerar_medico_cons_item(nr_seq_agenda_int_w,nr_seq_ageint_item_w,nm_usuario_p,cd_estabelecimento_p);
			end if;
			 
			begin 
			select	count(*) 
			into STRICT	qt_medico_w 
			from	ageint_medico_item 
			where	cd_pessoa_fisica = cd_profissional_w 
			and	nr_seq_item = nr_seq_ageint_item_w  LIMIT 1;
			exception 
			when no_data_found then 
				qt_medico_w	:= 0;
			end;
			 
			if (qt_medico_w > 0) then 
				insert into agenda_integrada_prof_item( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_agenda_item, 
						cd_pessoa_fisica, 
						ie_confirmado) 
					values ( 
						nextval('agenda_integrada_prof_item_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_ageint_item_w, 
						cd_profissional_w, 
						'N');
			else 
				ie_erro_w	:= 'S';
			end if;
			 
			 
			end;
		end loop;
		close C02;
	end if;
	 
	end;
end loop;
 
ie_erro_p := ie_erro_w;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ageint_inserir_prof_item ( nr_Seq_item_p bigint, ds_prof_itens_p text, ds_lista_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_erro_p INOUT text) FROM PUBLIC;

