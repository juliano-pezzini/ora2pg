-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualiza_lib_conta ( nr_seq_conta_p bigint, ie_origem_lib_p text, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Finalidade: Ajustar o VL_LIBERADO e VL_GLOSA dos itens que já estavam
 liberados ou glosados (usuário já tinha analisado) conforme novo valor calculado
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

ie_origem_lib_p
C - Consistência da análise
A - Atualiza conta item
Parâmetro criado para definir se será atualizado o valor liberado somente nos casos que o vl_calculado_ant
for difetente do vl_calculado ( consistência da análise) ou indiferente disto (atualiza conta item )
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_tipo_conta_w			varchar(10);
vl_calculado_w			double precision;
vl_calculado_ant_w		double precision;
vl_apresentado_w		double precision;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_proc_partic_w		bigint;
ds_ordem_w			integer;
vl_lib_proc_w			pls_conta_proc.vl_liberado%type;
vl_lib_partic_w			pls_proc_participante.vl_participante%type;
vl_tot_partic_w			pls_proc_participante.vl_participante%type;
vl_dif_partic_w			pls_proc_participante.vl_participante%type;

c01 CURSOR FOR
	SELECT	1 ds_ordem,
		a.nr_sequencia,
		null,
		null,
		a.vl_procedimento,
		a.vl_calculado_ant,
		b.ie_tipo_conta,
		coalesce(a.vl_procedimento_imp, 0) vl_apresentado,
		a.vl_liberado	vl_lib_proc,
		null	vl_lib_partic
	from	pls_conta_proc a,
		pls_conta b
	where	b.nr_sequencia = a.nr_seq_conta
	and	b.nr_sequencia	= nr_seq_conta_p
	and	((a.ie_tipo_liberacao	!= 'AV') or (coalesce(a.ie_tipo_liberacao::text, '') = ''))
	and	a.ie_status not in ('M','D')
	
union all

	SELECT	2 ds_ordem,
		null,
		a.nr_sequencia,
		null,
		a.vl_material,
		a.vl_calculado_ant,
		b.ie_tipo_conta,
		coalesce(a.vl_material_imp, 0) vl_apresentado,
		null	vl_lib_proc,
		null	vl_lib_partic
	from	pls_conta_mat a,
		pls_conta b
	where	b.nr_sequencia = a.nr_seq_conta
	and	b.nr_sequencia	= nr_seq_conta_p
	and	((a.ie_tipo_liberacao	!= 'AV') or (coalesce(a.ie_tipo_liberacao::text, '') = ''))
	and	a.ie_status not in ('M','D')
	
union all

	select	3 ds_ordem,
		null,
		null,
		b.nr_sequencia,
		b.vl_calculado,
		b.vl_calculado_ant,
		c.ie_tipo_conta,
		b.vl_apresentado,
		a.vl_liberado		vl_lib_proc,
		b.vl_participante	vl_lib_partic
	from	pls_proc_participante b,
		pls_conta_proc a,
		pls_conta c
	where	c.nr_sequencia = a.nr_seq_conta
	and	a.nr_sequencia	= b.nr_seq_conta_proc
	and	c.nr_sequencia	= nr_seq_conta_p
	and	((a.ie_tipo_liberacao	!= 'AV') or (coalesce(a.ie_tipo_liberacao::text, '') = ''))
	and	a.ie_status not in ('M','D')
	order by ds_ordem;

C02 CURSOR FOR
	SELECT	b.nr_sequencia nr_seq_proc_partic,
		a.nr_sequencia nr_seq_conta_proc,
		a.ie_status,
		b.ie_glosa,
		a.vl_liberado
	from	pls_proc_participante b,
		pls_conta_proc a,
		pls_conta c
	where	c.nr_sequencia = a.nr_seq_conta
	and	a.nr_sequencia	= b.nr_seq_conta_proc
	and	c.nr_sequencia	= nr_seq_conta_p
	and	((a.ie_tipo_liberacao	!= 'AV') or (coalesce(a.ie_tipo_liberacao::text, '') = ''))
	and	a.ie_status not in ('M','D');

BEGIN
if (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	open C01;
	loop
	fetch C01 into
		ds_ordem_w,
		nr_seq_conta_proc_w,
		nr_seq_conta_mat_w,
		nr_seq_proc_partic_w,
		vl_calculado_w,
		vl_calculado_ant_w,
		ie_tipo_conta_w,
		vl_apresentado_w,
		vl_lib_proc_w,
		vl_lib_partic_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		/* Francisco - 31/12/2012 - Ajuste para virada Rio Preto
		Falar com Adriano */
		if	(vl_calculado_w <> vl_calculado_ant_w AND vl_apresentado_w <= vl_calculado_w) or (vl_lib_proc_w	> 0 and vl_lib_partic_w	> 0) or
			(ie_origem_lib_p = 'A' AND ie_tipo_conta_w <> 'I') then
			CALL pls_ajustar_liberacao_item_cta(nr_seq_conta_proc_w, nr_seq_conta_mat_w, nr_seq_proc_partic_w, nm_usuario_p);
		end if;
		end;
	end loop;
	close C01;

	--Faz ajuste de valor dos participantes, para impedir que o valor total dos mesmos seja superior ao valor liberado do procedimento
	for r_c02_w in C02 loop

		if (r_c02_w.ie_status in ('L', 'S') and r_c02_w.ie_glosa = 'N') then
			select 	coalesce(sum(vl_participante),0)
			into STRICT	vl_tot_partic_w
			from	pls_proc_participante
			where	nr_seq_conta_proc 		= r_c02_w.nr_seq_conta_proc
			and	((coalesce(ie_status::text, '') = '') or (ie_status != 'C'))
			and 	((coalesce(ie_gerada_cta_honorario::text, '') = '') or (ie_gerada_cta_honorario != 'S'));

			if (vl_tot_partic_w > r_c02_w.vl_liberado) then
				vl_dif_partic_w	:= coalesce(vl_tot_partic_w,0) - coalesce(r_c02_w.vl_liberado,0);

				update	pls_proc_participante	a
				set	a.vl_participante	= a.vl_participante - vl_dif_partic_w
				where	a.nr_sequencia	= (	SELECT	max(x.nr_sequencia)
								from	pls_proc_participante	x
								where	x.nr_seq_conta_proc 		= r_c02_w.nr_seq_conta_proc
								and	((coalesce(x.ie_status::text, '') = '') or (x.ie_status != 'C'))
								and 	((coalesce(x.ie_gerada_cta_honorario::text, '') = '') or (x.ie_gerada_cta_honorario != 'S'))
								and	x.vl_participante >= vl_dif_partic_w );

			end if;
		end if;
	end loop;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualiza_lib_conta ( nr_seq_conta_p bigint, ie_origem_lib_p text, nm_usuario_p text) FROM PUBLIC;

