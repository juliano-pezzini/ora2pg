-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_incluir_proc_analise_pos ( nr_seq_analise_p bigint, nr_seq_segurado_p bigint, nr_seq_grupo_atual_p bigint, nr_seq_conta_p bigint, nr_seq_w_proc_p bigint, cd_guia_p text, ie_tipo_analise_p text, ie_commitar_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_item_gerado_p INOUT bigint) AS $body$
DECLARE


ds_observacao_w      		varchar(255);
ie_tipo_segurado_w   		varchar(10);
ie_valor_informado_w    	varchar(1)  := 'N';
ie_via_acesso_w      		varchar(1);
vl_total_apres_w    		double precision;
vl_uni_apres_w      		double precision;
cd_procedimento_w    		bigint;
qt_procedimento_w    		double precision;
nr_seq_proc_w      			bigint;
nr_seq_partic_w      		bigint;
nr_seq_item_criado_w   		bigint;
ie_origem_proced_w    		bigint;
nr_seq_tipo_taxa_w    		bigint;
tx_item_w      				double precision;
dt_procedimento_w    		timestamp;
dt_inicio_w      			timestamp;
dt_fim_w      				timestamp;
ie_geracao_pos_estab_w  	varchar(1);
nr_seq_segurado_w			pls_conta.nr_seq_segurado%type;
ie_medico_exec_coope_w		varchar(1);
cd_medico_exec_w			pls_conta.cd_medico_executor%type;
dt_atendimento_referencia_w 	pls_conta.dt_atendimento_referencia%type;
ie_medico_solic_coope_w		varchar(1);
cd_medico_solicitante_w		pls_conta.cd_medico_solicitante%type;
nr_seq_prestador_exec_w		pls_conta.nr_seq_prestador_exec%type;
nr_seq_prestador_w			pls_conta.nr_seq_prestador%type;
ie_tipo_despesa_w			pls_conta_proc.ie_tipo_despesa%type;
nr_seq_regra_cooperado_w	pls_conta_proc.nr_seq_regra_cooperado%type;
ie_ato_cooperado_w 			pls_conta_proc.ie_ato_cooperado%type;
ie_tipo_guia_w				pls_conta.ie_tipo_guia%type;
nr_seq_prestador_prot_w		pls_protocolo_conta.nr_seq_prestador%type;
ie_tipo_protocolo_w			pls_protocolo_conta.ie_tipo_protocolo%type;
uf_conselho_w 				pls_proc_participante.uf_conselho%type;
nr_seq_conselho_w			bigint;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atençao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
C01 CURSOR FOR
	SELECT	cd_medico,
			nr_seq_grau_partic
	from	w_pls_proc_participante
	where	nr_seq_analise	= nr_seq_analise_p
	and	nm_usuario	= nm_usuario_p;

BEGIN

select  nr_seq_tipo_taxa,
	cd_procedimento,
	ie_origem_proced,
	dt_inicio_proc,
	dt_fim_proc,
	coalesce(vl_uni_apres,0),
	coalesce(vl_apresentado,0),
	ie_via_acesso,
	dt_procedimento,
	qt_apresentada
into STRICT  	nr_seq_tipo_taxa_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	dt_inicio_w,
	dt_fim_w,
	vl_uni_apres_w,
	vl_total_apres_w,
	ie_via_acesso_w,
	dt_procedimento_w,
	qt_procedimento_w
from  	w_pls_conta_proc
where 	nr_sequencia  = nr_seq_w_proc_p;

select  max(tx_item)
into STRICT  	tx_item_w
from  	pls_taxa_item
where  	nr_sequencia  = nr_seq_tipo_taxa_w;

if (coalesce(nr_seq_tipo_taxa_w::text, '') = '' and (ie_via_acesso_w IS NOT NULL AND ie_via_acesso_w::text <> '')) then

	tx_item_w := obter_tx_proc_via_acesso(ie_via_acesso_w);
	
end if;

select  coalesce(dt_procedimento_w, dt_atendimento),
	ie_tipo_segurado,
	nr_seq_segurado,
	cd_medico_executor,
	cd_medico_solicitante,
	dt_atendimento,
	nr_seq_prestador_exec,
	nr_seq_prestador,
	nr_seq_prestador_prot,
	ie_tipo_protocolo
into STRICT  	dt_procedimento_w,
	ie_tipo_segurado_w,
	nr_seq_segurado_w,
	cd_medico_exec_w,
	cd_medico_solicitante_w,
	dt_atendimento_referencia_w,
	nr_seq_prestador_exec_w,
	nr_seq_prestador_w,
	nr_seq_prestador_prot_w,
	ie_tipo_protocolo_w
from  	pls_conta_v
where  	nr_sequencia  = nr_seq_conta_p;

if (coalesce(vl_total_apres_w,0) > 0) then
	ie_valor_informado_w  := 'S';
end if;

if (coalesce(vl_total_apres_w::text, '') = '') then
	vl_total_apres_w  := vl_uni_apres_w * qt_procedimento_w;
end if;

insert into pls_conta_proc(nr_sequencia, cd_procedimento, ie_origem_proced,
	qt_procedimento, dt_procedimento, ie_via_acesso,
	nr_seq_conta, nm_usuario, nm_usuario_nrec,
	dt_atualizacao, dt_atualizacao_nrec, ie_situacao,
	ie_status, qt_procedimento_imp, tx_item,
	dt_inicio_proc, dt_fim_proc, cd_procedimento_imp,
	ds_procedimento_imp, vl_unitario_imp, vl_procedimento_imp,
	ie_valor_informado, ie_vl_apresentado_sistema, ie_ato_cooperado,
	vl_apresentado_xml, ie_status_pagamento, ie_lanc_manual_pos)
values (nextval('pls_conta_proc_seq'), cd_procedimento_w, ie_origem_proced_w,
	0, dt_procedimento_w, ie_via_acesso_w,
	nr_seq_conta_p, nm_usuario_p, nm_usuario_p,
	clock_timestamp(), clock_timestamp(), 'D',
	'M', qt_procedimento_w, tx_item_w,
	dt_inicio_w, dt_fim_w, null,
	null, vl_uni_apres_w, vl_total_apres_w,
	ie_valor_informado_w, 'N', null,
	null,'G', 'S') returning nr_sequencia into nr_seq_proc_w;

CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_proc(nr_seq_proc_w, nm_usuario_p);
CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_proc(nr_seq_proc_w, null, null, nr_seq_conta_p, nm_usuario_p);

ds_observacao_w :=  'Procedimento inserido: ' || substr(cd_procedimento_w || '-' || pls_obter_desc_procedimento(cd_procedimento_w,ie_origem_proced_w),1,150) ||
        chr(13) || chr(10) || 'Quantidade inserida: ' || qt_procedimento_w;
/*Inserindo histórico*/

CALL pls_inserir_hist_analise(nr_seq_conta_p, nr_seq_analise_p, 19,
       nr_seq_proc_w, 'P', null,
       null,ds_observacao_w, nr_seq_grupo_atual_p,
       nm_usuario_p,cd_estabelecimento_p);


for r_c01_w in C01 loop

	if (r_c01_w.cd_medico> 0) then
		uf_conselho_w 		:= obter_dados_medico(r_C01_w.cd_medico, 'UFCRM');
		nr_seq_conselho_w 	:= pls_obter_seq_conselho_prof(r_c01_w.cd_medico);
	
		insert into pls_proc_participante(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_conta_proc,
			cd_medico,
			nr_seq_grau_partic,
			uf_conselho,
			nr_seq_cbo_saude,
			nr_seq_conselho,
			nr_seq_prestador,
			ie_status,
			ie_status_pagamento)
		values (nextval('pls_proc_participante_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_proc_w,
			r_c01_w.cd_medico,
			r_c01_w.nr_seq_grau_partic,
			uf_conselho_w,
			null,
			nr_seq_conselho_w,
			null,
			'A',
			'I');
	end if;

end loop;

	
nr_seq_item_criado_w  := nr_seq_proc_w;

ie_medico_exec_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_exec_w,dt_atendimento_referencia_w,null);

if (ie_medico_exec_coope_w = 'S') then
	ie_medico_exec_coope_w	:= 'C';
end if;

ie_medico_solic_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_solicitante_w,dt_atendimento_referencia_w,null);

if (ie_medico_solic_coope_w = 'S') then
	ie_medico_solic_coope_w	:= 'C';
end if;

select	max(ie_tipo_despesa)
into STRICT	ie_tipo_despesa_w
from	pls_conta_proc
where	nr_sequencia	= nr_seq_proc_w;
	
--Define o ato cooperado
SELECT * FROM pls_obter_tipo_ato_cooperado(	cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_w, 'P', nr_seq_prestador_exec_w, nr_seq_prestador_w, nr_seq_prestador_prot_w, null, ie_medico_solic_coope_w, ie_medico_exec_coope_w, null, ie_tipo_protocolo_w, ie_tipo_guia_w, ie_tipo_despesa_w, null, nr_seq_regra_cooperado_w, ie_ato_cooperado_w) INTO STRICT nr_seq_regra_cooperado_w, ie_ato_cooperado_w;

update 	pls_conta_proc
set	nr_seq_regra_cooperado	= nr_seq_regra_cooperado_w,
	ie_ato_cooperado	= ie_ato_cooperado_w
where	nr_sequencia 		= nr_seq_proc_w;
			
CALL pls_consistir_analise_pos(	nr_seq_analise_p, nr_seq_grupo_atual_p, cd_estabelecimento_p, nm_usuario_p, 'S', 'N', 'S');


nr_seq_item_gerado_p  := nr_seq_item_criado_w;

delete  from w_pls_conta_proc
where  nm_usuario  = nm_usuario_p;

if (coalesce(ie_commitar_p,'S') = 'S') then
  commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_incluir_proc_analise_pos ( nr_seq_analise_p bigint, nr_seq_segurado_p bigint, nr_seq_grupo_atual_p bigint, nr_seq_conta_p bigint, nr_seq_w_proc_p bigint, cd_guia_p text, ie_tipo_analise_p text, ie_commitar_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_item_gerado_p INOUT bigint) FROM PUBLIC;

