-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_horario_esp_alteracao (cd_estabelecimento_p bigint, cd_tipo_agenda_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text) AS $body$
DECLARE


ie_dia_semana_w		integer;
ie_feriado_w			varchar(1);
hr_inicial_intervalo_w	timestamp;
hr_final_intervalo_w		timestamp;
hr_inicial_w			timestamp;
hr_final_w			timestamp;
nr_minuto_duracao_w		bigint;
cd_medico_req_w		varchar(10);
nr_seq_medico_exec_w		bigint;
nr_seq_sala_w			bigint;
nr_seq_classif_w		bigint;
ds_observacao_w		varchar(4000);
nr_seq_especial_w		bigint;

nr_seq_proc_interno_w	agenda_horario.nr_seq_proc_interno%type;
cd_procedimento_w	agenda_horario.cd_procedimento%type;
ie_origem_proced_w	agenda_horario.ie_origem_proced%type;

c01 CURSOR FOR
SELECT	hr_inicio,
	hr_inicio + nr_minuto_duracao / 1440,
	nr_minuto_duracao,
	cd_medico,
	obter_reg_executor_agenda_med(cd_agenda_p, cd_medico_exec) nr_seq_medico_exec,
	nr_seq_sala,
	nr_seq_classif_agenda,
	ds_observacao
from	agenda_paciente
where	cd_agenda = cd_agenda_p
and	trunc(dt_agenda,'dd') = trunc(dt_agenda_p,'dd')
and	ie_status_agenda not in ('F','I','II','LF','C')
order by
	hr_inicio;


BEGIN
if (cd_tipo_agenda_p IS NOT NULL AND cd_tipo_agenda_p::text <> '') and (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	/* agenda exame */

	if (cd_tipo_agenda_p = 2) then
		/* obter dia semana */

		select	obter_cod_dia_semana(dt_agenda_p)
		into STRICT	ie_dia_semana_w
		;

		/* verificar feriado */

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_feriado_w
		from 	feriado a, 
			agenda b
		where 	a.cd_estabelecimento = cd_estabelecimento_p
		and	a.dt_feriado = dt_agenda_p
		and 	b.cd_agenda = cd_agenda_p;

		

		/* eliminar horarios gerados anteriormente */

		delete
		from	agenda_horario_esp
		where	cd_agenda = cd_agenda_p
		and	dt_agenda = dt_agenda_p
		and	ie_agendamento = 'S';

		/* gerar hor√°rios especiais agendamento */

		open c01;
		loop
		fetch c01 into	hr_inicial_w,
					hr_final_w,
					nr_minuto_duracao_w,
					cd_medico_req_w,
					nr_seq_medico_exec_w,
					nr_seq_sala_w,
					nr_seq_classif_w,
					ds_observacao_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			
			/* obter dados horarios agenda */

			select	max(hr_inicial_intervalo),
				max(hr_final_intervalo),
				max(nr_seq_proc_interno),
				max(cd_procedimento), 
				max(ie_origem_proced)
			into STRICT	hr_inicial_intervalo_w,
				hr_final_intervalo_w,
				nr_seq_proc_interno_w,
				cd_procedimento_w,
				ie_origem_proced_w
			from	agenda_horario
			where	cd_agenda = cd_agenda_p
			and		PKG_DATE_UTILS.get_DateTime(hr_inicial,hr_inicial_w) between hr_inicial and hr_final
			and	((coalesce(dt_inicio_vigencia::text, '') = '') or (dt_inicio_vigencia <= trunc(dt_agenda_p)))
			and	((coalesce(dt_final_vigencia::text, '') = '') or (dt_final_vigencia >= trunc(dt_agenda_p)))
			and		nr_minuto_intervalo > 0
			and	((dt_dia_semana = ie_dia_semana_w) or (dt_dia_semana = 9))
			and	((ie_feriado_w <> 'S') or (obter_se_agenda_feriado(cd_agenda_p) = 'S'));
		
			/* obter sequence */

			select	nextval('agenda_horario_esp_seq')
			into STRICT	nr_seq_especial_w
			;

			/* gerar horarios */

			insert into agenda_horario_esp(
								nr_sequencia,
								cd_agenda,
								dt_agenda,
								dt_atualizacao,
								nm_usuario,
								hr_inicial,
								hr_final,
								nr_minuto_intervalo,
								hr_inicial_intervalo,
								hr_final_intervalo,
								cd_medico,
								nr_seq_medico_exec,
								nr_seq_sala,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								ds_observacao,
								ie_horario_adicional,
								nr_seq_classif_agenda,
								ie_agendamento,
								nr_seq_proc_interno,
								cd_procedimento,
								ie_origem_proced
								)
			values (
								nr_seq_especial_w,
								cd_agenda_p,
								dt_agenda_p,
								clock_timestamp(),
								nm_usuario_p,
								hr_inicial_w,
								hr_final_w,
								nr_minuto_duracao_w,
								hr_inicial_intervalo_w,
								hr_final_intervalo_w,
								cd_medico_req_w,
								nr_seq_medico_exec_w,
								nr_seq_sala_w,
								clock_timestamp(),
								nm_usuario_p,
								substr(ds_observacao_w,1,255),
								'S',
								nr_seq_classif_w,
								'S',
								nr_seq_proc_interno_w,
								cd_procedimento_w,
								ie_origem_proced_w
								);
			end;
		end loop;
		close c01;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_horario_esp_alteracao (cd_estabelecimento_p bigint, cd_tipo_agenda_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text) FROM PUBLIC;

