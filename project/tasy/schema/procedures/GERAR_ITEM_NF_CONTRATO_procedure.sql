-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_item_nf_contrato ( nr_sequencia_nf_p bigint, nr_sequencia_regra_p bigint, vl_nota_p bigint, vl_ir_p bigint, vl_inss_p bigint, vl_issqn_p bigint, dt_vigencia_p timestamp, qt_item_nf_p bigint, qt_conversao_p bigint, nm_usuario_p text, cd_moeda_p bigint, vl_cotacao_p bigint, ie_tipo_regra_p text default 'M', vl_total_nota_p bigint default 0) AS $body$
DECLARE


cd_material_w				integer;
cd_material_estoque_w			integer;
cd_conta_contabil_w			varchar(20);
cd_centro_custo_w				integer;
nr_seq_crit_rateio_w			bigint;
nr_seq_conta_financ_w			bigint;
ds_complemento_w				varchar(255);
ds_observacao_w				varchar(255);
cd_estabelecimento_w			smallint;
cd_cgc_emitente_w			varchar(14);
cd_serie_nf_w				nota_fiscal.cd_serie_nf%type;
nr_nota_fiscal_w				varchar(255);
nr_sequencia_nf_w				bigint;
cd_natureza_operacao_w			smallint;
nm_usuario_w				varchar(15);
cd_contrato_w				bigint;
nr_item_nf_w				integer;
cd_unid_med_estoque_w			varchar(30);
cd_unid_med_compra_w			varchar(30);
ds_erro_w				varchar(2000);
cd_trib_ir_w				smallint;
cd_trib_inss_w				smallint;
cd_trib_iss_w				smallint;
cd_tributo_w				smallint;
vl_tributo_w				double precision;
cd_beneficiario_w				varchar(14);
pr_tributo_w				double precision;
cd_cond_pagto_w				integer;
cd_conta_financ_w				bigint;
cd_conta_financ_ww			bigint;
nr_seq_trans_reg_w			bigint;
nr_seq_trans_baixa_w			bigint;
CD_OPERACAO_NF_w			bigint;
cd_local_estoque_w			smallint;
cd_local_estoque_ww			smallint;
vl_pagto_w				double precision;
ie_gerou_itens_trib_w			boolean;
ie_corpo_item_w				varchar(1);
ie_corpo_item_ant_w			varchar(1);
tx_tributo_w				double precision;
qt_existe_w				smallint;
cd_cgc_w				varchar(20);
pr_aliquota_w				double precision;
cd_pessoa_fisica_w			varchar(10);
vl_minimo_base_w				double precision;
vl_minimo_tributo_w				double precision;
ie_acumulativo_w				varchar(1);
vl_teto_base_w				double precision;
cd_beneficiario_trib_w			varchar(20);
vl_desc_dependente_w			double precision;
ie_regra_trib_w				varchar(2);
ie_pagar_receber_w			varchar(2);
cd_darf_w				varchar(20);
cd_darf_contrato_w				varchar(10);
ie_entrada_saida_w				varchar(1);
ie_entrada_saida_ww			varchar(1);
dt_referencia_w				timestamp;
cd_variacao_w				varchar(2);
ie_periodicidade_w				varchar(1);
dt_entrada_saida_w			timestamp;
ie_tipo_conta_w				smallint;
vl_liquido_w				double precision;
ie_soma_diminui_w				varchar(01);
cd_condicao_pagamento_w			bigint;
ie_forma_pagamento_w			smallint;
dt_emissao_w				timestamp;
qt_existe_local_w				integer;
nr_seq_proj_rec_w				bigint;
cd_tipo_servico_w				varchar(100);
nr_seq_regra_w				bigint;
nr_seq_equipamento_w			bigint;
ie_origem_titulo_w				varchar(10);
nr_seq_classe_tit_rec_w			bigint;
nr_seq_classe_w				bigint;
cd_tipo_baixa_neg_w			integer;
ie_gera_trib_geral_w			varchar(15);
ie_passou_venc_trib_w			varchar(1) := 'N';
cd_procedimento_w			bigint;
ie_origem_proced_w			varchar(1);
ie_tipo_titulo_rec_w				titulo_receber.ie_tipo_titulo%type;
vl_unitario_item_nf_w			nota_fiscal_item.vl_unitario_item_nf%type;
vl_total_item_nf_w				nota_fiscal_item.vl_total_item_nf%type;
vl_unit_estrangeiro_w			nota_fiscal_item.vl_unit_estrangeiro%type	:= 0;
vl_total_estrangeiro_w			nota_fiscal_item.vl_total_estrangeiro%type	:= 0;
ie_gerar_trib_atualizar_nf_w 			varchar(2);
ie_tipo_tributo_w				tributo.ie_tipo_tributo%type;
vl_total_nota_w				nota_fiscal.vl_total_nota%type;
vl_base_calculo_w				nota_fiscal_trib.vl_base_calculo%type;
qt_item_estoque_w			nota_fiscal_item.qt_item_estoque%type;
vl_desconto_w				contrato_regra_nf.vl_desconto%type;
pr_desconto_w				contrato_regra_nf.pr_desconto%type;
vl_liquido_item_nf_w			nota_fiscal_item.vl_liquido%type;

c01 CURSOR FOR
SELECT	a.cd_tributo,
	a.vl_tributo,
	a.pr_tributo,
	a.cd_beneficiario,
	a.cd_cond_pagto,
	a.cd_conta_financ,
	a.nr_seq_trans_reg,
	a.nr_seq_trans_baixa,
	a.ie_corpo_item,
	a.ie_regra_trib,
	c.ie_pagar_receber,
	a.cd_darf,
	t.ie_tipo_tributo
from	contrato c,
	tributo t,
	contrato_regra_pagto_trib a,
	contrato_regra_nf b
where	a.nr_seq_regra_nf	= b.nr_sequencia
and	b.nr_seq_contrato	= c.nr_sequencia
and	t.cd_tributo = a.cd_tributo
and	b.nr_sequencia		= nr_sequencia_regra_p
order by	CASE WHEN t.ie_tipo_tributo='INSS' THEN 1  ELSE 2 END ,
	CASE WHEN a.ie_corpo_item='C' THEN  0  ELSE 1 END;


BEGIN

ie_gerou_itens_trib_w	:= false;

select (coalesce(max(nr_item_nf),0)+1)
into STRICT	nr_item_nf_w
from	nota_fiscal_item
where	nr_sequencia	 = nr_sequencia_nf_p;

select	cd_estabelecimento,
	cd_cgc,
	cd_cgc_emitente,
	cd_serie_nf,
	nr_nota_fiscal,
	nr_sequencia_nf,
	cd_natureza_operacao,
	nm_usuario,
	cd_pessoa_fisica,
	cd_operacao_nf_w,
	dt_entrada_saida,
	cd_condicao_pagamento,
	dt_emissao,
	cd_tipo_servico
into STRICT	cd_estabelecimento_w,
	cd_cgc_w,
	cd_cgc_emitente_w,
	cd_serie_nf_w,
	nr_nota_fiscal_w,
	nr_sequencia_nf_w,
	cd_natureza_operacao_w,
	nm_usuario_w,
	cd_pessoa_fisica_w,
	cd_operacao_nf_w,
	dt_entrada_saida_w,
	cd_condicao_pagamento_w,
	dt_emissao_w,
	cd_tipo_servico_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_nf_p;

select	coalesce(max(ie_gera_tributo_geral),'N')
into STRICT	ie_gera_trib_geral_w
from	parametro_compras
where	cd_estabelecimento = cd_estabelecimento_w;

select	max(a.ie_origem_titulo),
	max(a.nr_seq_classe),
	max(a.ie_tipo_titulo)
into STRICT	ie_origem_titulo_w,
	nr_seq_classe_tit_rec_w,
	ie_tipo_titulo_rec_w
from	titulo_receber a
where	a.nr_seq_nf_saida	= nr_sequencia_nf_p;

if (coalesce(cd_condicao_pagamento_w::text, '') = '') then
	/*Antigo R A I S E (-20011,'A condição de pagamento não foi informada, é necessário que selecione a condição de pagamento para criar esta nota!');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(183338);
end if;

select	ie_forma_pagamento
into STRICT	ie_forma_pagamento_w
from	condicao_pagamento
where	cd_condicao_pagamento = cd_condicao_pagamento_w;

if (ie_tipo_regra_p = 'M') then
	Select	a.cd_material,
		a.cd_conta_contabil,
		CASE WHEN coalesce(a.nr_seq_crit_rateio::text, '') = '' THEN  a.cd_centro_custo  ELSE null END  cd_centro_custo,
		a.nr_seq_crit_rateio,
		a.ds_complemento,
		a.ds_observacao,
		b.nr_sequencia,
		a.nr_seq_conta_financ,
		a.vl_pagto,
		a.nr_seq_proj_rec,
		a.nr_seq_equipamento,
		a.cd_local_estoque,
		a.vl_desconto,
		a.pr_desconto
	into STRICT	cd_material_w,
		cd_conta_contabil_w,
		cd_centro_custo_w,
		nr_seq_crit_rateio_w,
		ds_complemento_w,
		ds_observacao_w,
		cd_contrato_w,
		nr_seq_conta_financ_w,
		vl_pagto_w,
		nr_seq_proj_rec_w,
		nr_seq_equipamento_w,
		cd_local_estoque_ww,
		vl_desconto_w,
		pr_desconto_w
	from	contrato b,
		contrato_regra_nf a
	where	a.nr_sequencia = nr_sequencia_regra_p
	and	b.nr_sequencia = a.nr_seq_contrato;
else
	select	a.cd_procedimento,
		a.cd_conta_contabil,
		a.cd_centro_custo,
		a.ds_complemento,
		a.ds_observacao,
		b.nr_sequencia,
		a.nr_seq_conta_financ,
		a.vl_pagto,
		ie_origem_proced
	into STRICT	cd_procedimento_w,
		cd_conta_contabil_w,
		cd_centro_custo_w,
		ds_complemento_w,
		ds_observacao_w,
		cd_contrato_w,
		nr_seq_conta_financ_w,
		vl_pagto_w,
		ie_origem_proced_w
	from	contrato b,
		contrato_regra_nf_proc a
	where	a.nr_sequencia = nr_sequencia_regra_p
	and	b.nr_sequencia = a.nr_seq_contrato;
end if;

if (ie_tipo_regra_p = 'M') then
	Select	substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UME'),1,30) cd_unidade_medida_estoque,
		substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UMC'),1,30) cd_unidade_medida_compra,
		cd_material_estoque
	into STRICT  	cd_unid_med_estoque_w,
		cd_unid_med_compra_w,
		cd_material_estoque_w
	from	material
	where	cd_material = cd_material_w;
end if;

if (coalesce(cd_local_estoque_ww, 0) > 0) then
	cd_local_estoque_w	:= cd_local_estoque_ww;
else
	begin
	select	max(cd_local_estoque)
	into STRICT	cd_local_estoque_w
	from	local_estoque
	where	ie_tipo_local = 8
	and	ie_situacao = 'A'
	and	cd_estabelecimento = cd_estabelecimento_w;

	select	count(*)
	into STRICT	qt_existe_local_w
	from	funcao_parametro a,
		local_estoque b
	where	a.cd_funcao	= 1200
	and	a.nr_sequencia	= 1
	and	somente_numero(a.vl_parametro) = b.cd_local_estoque;

	if (qt_existe_local_w > 0) then
		select	coalesce(max(a.vl_parametro), cd_local_estoque_w)
		into STRICT	cd_local_estoque_w
		from	funcao_parametro a,
			local_estoque b
		where	a.cd_funcao	= 1200
		and	a.nr_sequencia	= 1
		and	somente_numero(a.vl_parametro) = b.cd_local_estoque;
	else
		select	coalesce(max(obter_valor_param_usuario(1200, 1, Obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)),cd_local_estoque_w)
		into STRICT	cd_local_estoque_w
		
		where	obter_valor_param_usuario(1200, 1, Obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w) <> 'X';
	end if;
	end;
end if;

select	obter_se_nota_entrada_saida(nr_sequencia_nf_p)
into STRICT	ie_entrada_saida_w
;

ie_entrada_saida_ww	:= 'S';

if (ie_entrada_saida_w = 'S') then
	ie_entrada_saida_ww	:= 'E';
end if;

if (coalesce(nr_seq_conta_financ_w::text, '') = '') then
	nr_seq_conta_financ_w := obter_conta_financeira(ie_entrada_saida_ww, cd_estabelecimento_w, cd_material_w, cd_procedimento_w, null, null, null, cd_cgc_w, cd_centro_custo_w, nr_seq_conta_financ_w, null, CD_OPERACAO_NF_w, null, null, null, null, null, cd_pessoa_fisica_w, ie_origem_titulo_w, null, nr_seq_classe_tit_rec_w, null, null, null, null, null, null, ie_tipo_titulo_rec_w, null);
end if;

vl_unitario_item_nf_w := vl_nota_p;
if (qt_conversao_p > 0) then
	vl_total_item_nf_w := (vl_unitario_item_nf_w * qt_conversao_p);
else
	vl_total_item_nf_w := (vl_unitario_item_nf_w * qt_item_nf_p);
end if;

if (2 = philips_param_pck.get_cd_pais) and (cd_moeda_p IS NOT NULL AND cd_moeda_p::text <> '') and (wheb_moeda_pck.get_moeda_padrao(cd_estabelecimento_w) <> cd_moeda_p) then -- México
	-- unitario
	vl_unit_estrangeiro_w	:= vl_nota_p;
	vl_unitario_item_nf_w 	:= vl_unitario_item_nf_w * vl_cotacao_p;
	-- total
	vl_total_estrangeiro_w	:= vl_total_item_nf_w;
	vl_total_item_nf_w 	:= vl_total_item_nf_w * vl_cotacao_p;

	update	nota_fiscal
	set	cd_moeda_estrangeira = cd_moeda_p,
		vl_conv_estrangeiro = vl_cotacao_p
	where	nr_sequencia = nr_sequencia_nf_p;
end if;

vl_liquido_item_nf_w := vl_total_item_nf_w;
if (vl_desconto_w > 0) then
	vl_liquido_item_nf_w := vl_liquido_item_nf_w - vl_desconto_w;
elsif (pr_desconto_w > 0) then
	vl_liquido_item_nf_w := vl_liquido_item_nf_w - dividir(pr_desconto_w,100) * vl_liquido_item_nf_w;
end if;

if (coalesce(cd_conta_contabil_w, 'X') = 'X') then
	begin
	ie_tipo_conta_w	:= 3;
	if (coalesce(cd_centro_custo_w::text, '') = '') then
		ie_tipo_conta_w	:= 2;
	end if;


	if (ie_tipo_regra_p = 'M') then
		SELECT * FROM define_conta_material(
			cd_estabelecimento_w, cd_material_w, ie_tipo_conta_w, 0, 0, 0, 0, 0, 0, 0, cd_local_estoque_w, cd_operacao_nf_w, trunc(clock_timestamp()), cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
	elsif (ie_tipo_regra_p = 'P') then
		SELECT * FROM Define_Conta_Procedimento(
			cd_estabelecimento_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_conta_w, null, null, null, null, null, null, null, trunc(clock_timestamp()), cd_conta_contabil_w, cd_centro_custo_w, null, null, null, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
	end if;
	end;
end if;

select 	coalesce(max(qt_conversao), qt_item_nf_p)
into STRICT	qt_item_estoque_w
from 	unidade_medida_adic_compra 
where 	cd_material = cd_material_w
and 	cd_unidade_medida = cd_unid_med_compra_w;

if qt_item_estoque_w = qt_item_nf_p then
	select 	coalesce(max(obter_qt_convertida_compra_est(cd_material_w,qt_item_nf_p,cd_unid_med_compra_w,null,cd_cgc_w,cd_estabelecimento_w)), qt_item_nf_p)
	into STRICT 	qt_item_estoque_w
	;
end if;

begin
insert into nota_fiscal_item(
	nr_sequencia,
	cd_estabelecimento,
	cd_cgc_emitente,
	cd_serie_nf,
	nr_nota_fiscal,
	nr_sequencia_nf,
	nr_item_nf,
	cd_natureza_operacao,
	qt_item_nf,
	qt_item_estoque,
	vl_unitario_item_nf,
	vl_total_item_nf,
	dt_atualizacao,
	nm_usuario,
	vl_frete,
	vl_desconto,
	vl_despesa_acessoria,
	cd_material,
	cd_material_estoque,
	cd_conta_contabil,
	vl_desconto_rateio,
	vl_seguro,
	cd_centro_custo,
	vl_liquido,
	nr_contrato,
	nr_seq_regra_contrato,
	ds_complemento,
	ds_observacao,
	pr_desconto,
	cd_unidade_medida_compra,
	cd_unidade_medida_estoque,
	nr_seq_conta_financ,
	cd_local_estoque,
	nr_seq_proj_rec,
	nr_seq_equipamento,
	cd_procedimento,
	ie_origem_proced,
	nr_seq_regra_prot_cont,
	vl_unit_estrangeiro,
	vl_total_estrangeiro,
	cd_sequencia_parametro)
values (	nr_sequencia_nf_p,
	cd_estabelecimento_w,
	cd_cgc_emitente_w,
	cd_serie_nf_w,
	nr_nota_fiscal_w,
	nr_sequencia_nf_w,
	nr_item_nf_w,
	cd_natureza_operacao_w,
	qt_item_nf_p,
	qt_item_estoque_w,
	vl_unitario_item_nf_w,
	vl_total_item_nf_w,
	clock_timestamp(),
	nm_usuario_w,
	0,
	coalesce(vl_desconto_w,0),
	0,
	cd_material_w,
	cd_material_estoque_w, /*Fabio - 30/06/2004 Não estava carregando o cd_material_estoque*/
	cd_conta_contabil_w,
	0,
	0,
	cd_centro_custo_w,
	vl_liquido_item_nf_w,
	cd_contrato_w,
	CASE WHEN ie_tipo_regra_p='M' THEN nr_sequencia_regra_p  ELSE null END ,
	ds_complemento_w,
	ds_observacao_w,
	coalesce(pr_desconto_w,0),
	cd_unid_med_compra_w,
	cd_unid_med_estoque_w,
	CASE WHEN nr_seq_conta_financ_w=0 THEN null  ELSE nr_seq_conta_financ_w END ,
	cd_local_estoque_w,
	nr_seq_proj_rec_w,
	nr_seq_equipamento_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	CASE WHEN ie_tipo_regra_p='P' THEN nr_sequencia_regra_p  ELSE null END ,
	vl_unit_estrangeiro_w,
	vl_total_estrangeiro_w,
	philips_contabil_pck.get_parametro_conta_contabil);
exception
when others then
	ds_erro_w	:= SQLERRM(SQLSTATE);
	/*Antigo R A I S E (-20011,'Erro Inclusão ' || chr(10) || ds_erro_w);*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(183339,'DS_ERRO=' || ds_erro_w);

end;

select	coalesce(max(obter_valor_param_usuario(40, 273, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)),'N')
into STRICT	ie_gerar_trib_atualizar_nf_w
;

if (ie_tipo_regra_p = 'M') then
	if (ie_gera_trib_geral_w <> 'C') then
		begin

		open c01;
		loop
		fetch c01 into
			cd_tributo_w,
			vl_tributo_w,
			pr_tributo_w,
			cd_beneficiario_w,
			cd_cond_pagto_w,
			cd_conta_financ_w,
			nr_seq_trans_reg_w,
			nr_seq_trans_baixa_w,
			ie_corpo_item_w,
			ie_regra_trib_w,
			ie_pagar_receber_w,
			cd_darf_contrato_w,
			ie_tipo_tributo_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
		
			
		if (philips_param_pck.get_cd_pais = 2) then
			vl_tributo_w := (vl_tributo_w * vl_cotacao_p);
		end if;	

		
			select	coalesce(ie_soma_diminui,'N')
			into STRICT	ie_soma_diminui_w
			from	tributo
			where	cd_tributo = cd_tributo_w;

			CALL atualiza_total_nota_fiscal(nr_sequencia_nf_p, nm_usuario_w);

			ie_gerou_itens_trib_w	:= true;

			cd_conta_financ_ww	:= cd_conta_financ_w;

			SELECT * FROM obter_dados_trib_tit_pagar(cd_tributo_w, cd_estabelecimento_w, cd_cgc_w, cd_pessoa_fisica_w, cd_beneficiario_trib_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, dt_referencia_w, cd_variacao_w, ie_periodicidade_w, null, null, null, cd_material_w, null, null, nr_seq_regra_w, null, 0, nr_seq_classe_w, cd_tipo_baixa_neg_w, vl_tributo_w, 'N', null, '0', null, null) INTO STRICT cd_beneficiario_trib_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, cd_variacao_w, ie_periodicidade_w, nr_seq_regra_w, nr_seq_classe_w, cd_tipo_baixa_neg_w;

			if (ie_regra_trib_w = 'N') and		/*Anderson 19/02/2007 - OS 50449*/
				(cd_conta_financ_ww > 0) and (ie_corpo_item_w = 'C') then
				cd_conta_financ_w := cd_conta_financ_ww;
			end if;

			-- Edgar 04/09/2006 OS 37101, coloquei tratamento "ie_regra_trib_w" para identificar se deve

			-- gerar tributos pelas regras dos tributos ou pela regra do contrato
			if (ie_regra_trib_w = 'N') then

				if (coalesce(vl_minimo_base_w,0) <= vl_total_item_nf_w) then

					if (ie_forma_pagamento_w <> 10) and
						((ie_corpo_item_w = 'V' and coalesce(ie_corpo_item_ant_w::text, '') = '') or (ie_corpo_item_ant_w = 'C' and ie_corpo_item_w = 'V')) then
						CALL gerar_vencimento_nota_fiscal(nr_sequencia_nf_p, nm_usuario_w);
					end if;
					ie_corpo_item_ant_w		:= ie_corpo_item_w;

					if (ie_corpo_item_w = 'I') then

						tx_tributo_w	:= pr_tributo_w;

						if (vl_tributo_w > 0) then
							tx_tributo_w	:= dividir(vl_tributo_w * 100, vl_total_item_nf_w);
						else
							vl_tributo_w	:= dividir((vl_total_item_nf_w * tx_tributo_w), 100);
						end if;

						insert into nota_fiscal_item_trib(
							nr_sequencia,
							cd_estabelecimento,
							cd_cgc_emitente,
							cd_serie_nf,
							nr_nota_fiscal,
							nr_sequencia_nf,
							nr_item_nf,
							cd_tributo,
							vl_tributo,
							dt_atualizacao,
							nm_usuario,
							vl_base_calculo,
							tx_tributo,
							vl_reducao_base,
							ie_rateio,
							vl_trib_nao_retido,
							vl_base_nao_retido,
							vl_trib_adic,
							vl_base_adic,
							nr_seq_regra_trib)
						values (	nr_sequencia_nf_p,
							cd_estabelecimento_w,
							cd_beneficiario_w,
							cd_serie_nf_w,
							nr_nota_fiscal_w,
							nr_sequencia_nf_w,
							nr_item_nf_w,
							cd_tributo_w,
							vl_tributo_w,
							clock_timestamp(),
							nm_usuario_w,
							vl_total_item_nf_w,
							tx_tributo_w,
							0,
							'N',
							0,
							0,
							0,
							0,
							nr_seq_regra_w);

					elsif (ie_corpo_item_w = 'C') and
							(((ie_gera_trib_geral_w = 'S') and (ie_gerar_trib_atualizar_nf_w <> 'N') and (coalesce(vl_total_item_nf_w, 0) > 0)) or
							(ie_gera_trib_geral_w = 'S' AND ie_gerar_trib_atualizar_nf_w = 'N') or (ie_gera_trib_geral_w <> 'S'))  then

						select	count(*)
						into STRICT	qt_existe_w
						from	nota_fiscal_trib
						where	nr_sequencia	= nr_sequencia_nf_p
						and	cd_tributo	= cd_tributo_w;

						if (qt_existe_w = 0) then

							tx_tributo_w	:= pr_tributo_w;
							
							if (vl_total_nota_p = 0) or (coalesce(vl_total_nota_p::text, '') = '') then
								vl_total_nota_w := vl_total_item_nf_w;
							else				
								vl_total_nota_w := vl_total_nota_p;
							end if;
							
							if (vl_tributo_w > 0) then
								tx_tributo_w	:= dividir(vl_tributo_w * 100, vl_total_nota_w);
							else
								vl_tributo_w	:= dividir((vl_total_nota_w * tx_tributo_w), 100);
							end if;									


							insert into nota_fiscal_trib(
								nr_sequencia,
								cd_tributo,
								vl_tributo,
								dt_atualizacao,
								nm_usuario,
								vl_base_calculo,
								tx_tributo,
								vl_reducao_base,
								vl_trib_nao_retido,
								vl_base_nao_retido,
								vl_trib_adic,
								vl_base_adic,
								cd_darf,
								cd_conta_financ,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_interno,
								nr_seq_regra_trib)
							values (	nr_sequencia_nf_p,
								cd_tributo_w,
								vl_tributo_w,
								clock_timestamp(),
								nm_usuario_w,
								vl_total_nota_w,
								tx_tributo_w,
								0,
								0,
								0,
								0,
								0,
								cd_darf_contrato_w,
								cd_conta_financ_w,
								clock_timestamp(),
								nm_usuario_w,
								nextval('nota_fiscal_trib_seq'),
								nr_seq_regra_w);
						else
						
							if (vl_total_nota_p = 0) or (coalesce(vl_total_nota_p::text, '') = '') then
							
								select	coalesce(max(vl_base_calculo),0)
								into STRICT	vl_base_calculo_w
								from	nota_fiscal_trib
								where	nr_sequencia	= nr_sequencia_nf_p
								and	cd_tributo	= cd_tributo_w;								
								
								vl_total_nota_w := vl_base_calculo_w + vl_total_item_nf_w;
							else				
								vl_total_nota_w := vl_total_nota_p;
							end if;							
						
							update	nota_fiscal_trib
							set	vl_base_calculo	= vl_total_nota_w,
								vl_tributo		= vl_tributo + vl_tributo_w,
								tx_tributo		= dividir(vl_tributo * 100, vl_base_calculo)
							where	nr_sequencia	= nr_sequencia_nf_p
							and	cd_tributo		= cd_tributo_w;
						end if;
					elsif (ie_corpo_item_w = 'V') then

						/* Verifica se existe o vencimento antes de gerar tributos */

						select	count(*)
						into STRICT	qt_existe_w
						from	nota_fiscal_venc
						where	nr_sequencia = nr_sequencia_nf_p
						and	dt_vencimento = dt_emissao_w
						and	ie_origem = 'N';
					
						if (qt_existe_w > 0) then
					
							select	count(*)
							into STRICT	qt_existe_w
							from	nota_fiscal_venc_trib
							where	nr_sequencia	= nr_sequencia_nf_p
							and	cd_tributo	= cd_tributo_w;

							if (qt_existe_w = 0) then

								tx_tributo_w	:= pr_tributo_w;

								if (vl_tributo_w > 0) then
									tx_tributo_w	:= dividir(vl_tributo_w * 100, vl_total_item_nf_w);
								else
									vl_tributo_w	:= dividir((vl_total_item_nf_w * tx_tributo_w), 100);
								end if;

								select	coalesce(sum(vl_liquido),0)
								into STRICT	vl_liquido_w
								from	nota_fiscal_item
								where	nr_sequencia = nr_sequencia_nf_p;

								insert	into nota_fiscal_venc_trib(nr_sequencia,
									dt_vencimento,
									cd_tributo,
									vl_tributo,
									dt_atualizacao,
									nm_usuario,
									vl_base_calculo,
									tx_tributo,
									vl_desc_base,
									VL_TRIB_NAO_RETIDO,
									VL_BASE_NAO_RETIDO,
									VL_TRIB_ADIC,
									VL_BASE_ADIC,
									vl_reducao,
									cd_darf,
									ie_origem,
									nr_seq_regra_trib)
								values (	nr_sequencia_nf_p,
									dt_emissao_w,
									cd_tributo_w,
									vl_tributo_w,
									clock_timestamp(),
									nm_usuario_w,
									vl_liquido_w,
									tx_tributo_w,
									coalesce(vl_desc_dependente_w,0),
									0,
									0,
									0,
									0,
									0,
									cd_darf_contrato_w,
									'N',
									nr_seq_regra_w);

								update	nota_fiscal_venc
								set	vl_vencimento	= vl_vencimento + (CASE WHEN ie_soma_diminui_w='S' THEN  vl_tributo_w WHEN ie_soma_diminui_w='D' THEN  vl_tributo_w * -1  ELSE 0 END )
								where	nr_sequencia	= nr_sequencia_nf_p
								and	dt_vencimento	= dt_emissao_w;
							else
								update	nota_fiscal_venc_trib
								set	vl_base_calculo	= vl_base_calculo + vl_total_item_nf_w,
									vl_tributo	= vl_tributo + vl_tributo_w,
									tx_tributo	= dividir(vl_tributo * 100, vl_base_calculo)
								where	nr_sequencia	= nr_sequencia_nf_p
								and	cd_tributo	= cd_tributo_w;
							end if;
						end if;
					ie_passou_venc_trib_w := 'S';
					end if;
				end if;
			else
				if (ie_pagar_receber_w = 'P') then
					CALL gerar_tributos_fornecedor(nr_sequencia_nf_p, cd_tributo_w, NM_USUARIO_W, dt_entrada_saida_w);
				else
					CALL gerar_imposto_nf(nr_sequencia_nf_p, NM_USUARIO_W, null, cd_tributo_w);
				end if;

			end if;
		end loop;
		close c01;

		end;
	end if;

	

	
	if 	((((ie_gera_trib_geral_w = 'S') or (ie_gera_trib_geral_w = 'C')) and (ie_gerar_trib_atualizar_nf_w <> 'N') and (coalesce(vl_total_item_nf_w, 0) > 0)) or
		(((ie_gera_trib_geral_w = 'S') or (ie_gera_trib_geral_w = 'C')) and (ie_gerar_trib_atualizar_nf_w = 'N'))) and
		((ie_gera_trib_geral_w = 'S' AND ie_gerou_itens_trib_w = false) or (ie_gera_trib_geral_w = 'C')) then
		begin
		CALL gerar_tributos_fornecedor(nr_sequencia_nf_p, null, NM_USUARIO_W, dt_entrada_saida_w);


		ie_gerou_itens_trib_w	:= TRUE;
		end;
	end if;

	/* Fabio 21/09/2004 - Coloquei o if abaixo, para gerar os tributos da nota */


	/* somente se não exixtir regra para os itens */

	if (ie_gerou_itens_trib_w = FALSE) then
		begin

		if (vl_ir_p <> 0) then
			begin
			select	min(cd_tributo)
			into STRICT	cd_trib_ir_w
			from	tributo
			where	ie_tipo_tributo	= 'IR';

			if (coalesce(cd_trib_ir_w::text, '') = '') then
				/*Antigo R A I S E (-20011, 'Não existe tributo Imposto de renda cadastrado!'||chr(10)||
							'Verifique o cadastro de tributos.');*/
				CALL wheb_mensagem_pck.exibir_mensagem_abort(183340);
			end if;

			select	count(*)
			into STRICT	qt_existe_w
			from	nota_fiscal_trib
			where	nr_sequencia	= nr_sequencia_nf_p
			and	cd_tributo	= cd_trib_ir_w;

			if (qt_existe_w = 0) then

				insert into nota_fiscal_trib(
					nr_sequencia,
					cd_tributo,
					vl_tributo,
					dt_atualizacao,
					nm_usuario,
					vl_base_calculo,
					tx_tributo,
					vl_reducao_base,
					VL_TRIB_NAO_RETIDO,
					VL_BASE_NAO_RETIDO,
					VL_TRIB_ADIC,
					VL_BASE_ADIC,
					cd_darf,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_Seq_interno)  /* Rafael. 15/01/07. OS48099 */
				values (nr_sequencia_nf_p,
					cd_trib_ir_w,
					vl_ir_p,
					clock_timestamp(),
					nm_usuario_w,
					vl_total_item_nf_w,
					dividir(vl_ir_p * 100, vl_total_item_nf_w),
					0,
					0,
					0,
					0,
					0,
					cd_darf_w,
					clock_timestamp(),
					nm_usuario_w,
					nextval('nota_fiscal_trib_seq'));
			else
				update	nota_fiscal_trib
				set	vl_base_calculo	= vl_base_calculo + vl_total_item_nf_w,
					vl_tributo		= vl_tributo + vl_ir_p,
					tx_tributo		= dividir(vl_tributo * 100, vl_total_item_nf_w)
				where	nr_sequencia	= nr_sequencia_nf_p
				and	cd_tributo		= cd_trib_ir_w;
			end if;
			end;
		end if;

		if (vl_issqn_p <> 0) then
			begin
			select	min(cd_tributo)
			into STRICT	cd_trib_iss_w
			from	tributo
			where	ie_tipo_tributo	= 'ISS';
			if (coalesce(cd_trib_iss_w::text, '') = '') then
				/*Antigo R A I S E (-20011, 'Não existe tributo de ISSQN cadastrado!' || chr(10) ||
								'Verifique o cadastro de tributos.');*/
				CALL wheb_mensagem_pck.exibir_mensagem_abort(183341);
			end if;

			select	count(*)
			into STRICT	qt_existe_w
			from	nota_fiscal_trib
			where	nr_sequencia	= nr_sequencia_nf_p
			and	cd_tributo	= cd_trib_iss_w;

			if (qt_existe_w = 0) then

				insert into nota_fiscal_trib(
					nr_sequencia,
					cd_tributo,
					vl_tributo,
					dt_atualizacao,
					nm_usuario,
					vl_base_calculo,
					tx_tributo,
					vl_reducao_base,
					VL_TRIB_NAO_RETIDO,
					VL_BASE_NAO_RETIDO,
					VL_TRIB_ADIC,
					VL_BASE_ADIC,
					cd_darf,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_Seq_interno)	    /* Rafael. 15/01/07. OS48099 */
				values (nr_sequencia_nf_p,
					cd_trib_iss_w,
					vl_issqn_p,
					clock_timestamp(),
					nm_usuario_w,
					vl_total_item_nf_w,
					dividir(vl_issqn_p * 100, vl_total_item_nf_w),
					0,
					0,
					0,
					0,
					0,
					cd_darf_w,
					clock_timestamp(),
					nm_usuario_w,
					nextval('nota_fiscal_trib_seq'));
			else
				update	nota_fiscal_trib
				set	vl_base_calculo	= vl_base_calculo + vl_total_item_nf_w,
					vl_tributo		= vl_tributo + vl_issqn_p,
					tx_tributo		= dividir(vl_tributo * 100, vl_total_item_nf_w)
				where	nr_sequencia	= nr_sequencia_nf_p
				and	cd_tributo		= cd_trib_iss_w;
			end if;
			end;
		end if;

		if (vl_inss_p <> 0) then
			begin
			select	min(cd_tributo)
			into STRICT	cd_trib_inss_w
			from	tributo
			where	ie_tipo_tributo	= 'INSS';
			if (coalesce(cd_trib_inss_w::text, '') = '') then
				/*Antigo R A I S E (-20011, 'Não existe tributo de INSS cadastrado!'|| chr(10) ||
								'Verifique o cadastro de tributos.');*/
				CALL wheb_mensagem_pck.exibir_mensagem_abort(183342);
			end if;

			select	count(*)
			into STRICT	qt_existe_w
			from	nota_fiscal_trib
			where	nr_sequencia	= nr_sequencia_nf_p
			and	cd_tributo	= cd_trib_inss_w;

			if (qt_existe_w = 0) then

				insert into nota_fiscal_trib(
					nr_sequencia,
					cd_tributo,
					vl_tributo,
					dt_atualizacao,
					nm_usuario,
					vl_base_calculo,
					tx_tributo,
					vl_reducao_base,
					VL_TRIB_NAO_RETIDO,
					VL_BASE_NAO_RETIDO,
					VL_TRIB_ADIC,
					VL_BASE_ADIC,
					cd_darf,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_interno)		/* Rafael. 15/01/07. OS48099 */
				values (	nr_sequencia_nf_p,
					cd_trib_inss_w,
					vl_inss_p,
					clock_timestamp(),
					nm_usuario_w,
					vl_total_item_nf_w,
					dividir(vl_inss_p * 100, vl_total_item_nf_w),
					0,
					0,
					0,
					0,
					0,
					cd_darf_w,
					clock_timestamp(),
					nm_usuario_w,
					nextval('nota_fiscal_trib_seq'));
			else
				update	nota_fiscal_trib
				set	vl_base_calculo	= vl_base_calculo + vl_total_item_nf_w,
					vl_tributo		= vl_tributo + vl_inss_p,
					tx_tributo		= dividir(vl_tributo * 100, vl_total_item_nf_w)
				where	nr_sequencia	= nr_sequencia_nf_p
				and	cd_tributo		= cd_trib_inss_w;

			end if;
			end;
		end if;
		end;
	end if;
end if;
commit;

CALL atualiza_total_nota_fiscal(nr_sequencia_nf_p, nm_usuario_w);

if (ie_tipo_regra_p = 'M') then
	CALL RATEAR_ITEM_NF(nr_sequencia_nf_p, nr_item_nf_w, nr_seq_crit_rateio_w, nm_usuario_w, dt_entrada_saida_w);
end if;

if (ie_passou_venc_trib_w = 'S') then
	begin
	
	delete	from nota_fiscal_venc
	where	nr_sequencia		= nr_sequencia_nf_p;
	
	CALL Gerar_vencimento_nota_fiscal(nr_sequencia_nf_p, nm_usuario_p);

	exception
	when others then
	vl_total_item_nf_w := vl_total_item_nf_w;
	end;
end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_item_nf_contrato ( nr_sequencia_nf_p bigint, nr_sequencia_regra_p bigint, vl_nota_p bigint, vl_ir_p bigint, vl_inss_p bigint, vl_issqn_p bigint, dt_vigencia_p timestamp, qt_item_nf_p bigint, qt_conversao_p bigint, nm_usuario_p text, cd_moeda_p bigint, vl_cotacao_p bigint, ie_tipo_regra_p text default 'M', vl_total_nota_p bigint default 0) FROM PUBLIC;

