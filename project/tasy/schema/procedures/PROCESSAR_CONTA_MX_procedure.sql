-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE processar_conta_mx ( nr_interno_conta_p bigint, ie_separacao_conta_p text, nm_usuario_p text) AS $body$
DECLARE


/* Dados da conta */

cd_convenio_parametro_w		conta_paciente.cd_convenio_parametro%type;
cd_estabelecimento_w		conta_paciente.cd_estabelecimento%type;
pr_coseg_hosp_conta_w		conta_paciente.pr_coseguro_hosp%type;
pr_coseg_honor_conta_w		conta_paciente.pr_coseguro_honor%type;
pr_coseg_nivel_hosp_conta_w	conta_paciente.pr_coseg_nivel_hosp%type;
vl_coseg_hosp_conta_w		conta_paciente.vl_coseguro_hosp%type;
vl_coseg_honor_conta_w		conta_paciente.vl_coseguro_honor%type;
vl_coseg_nivel_hosp_conta_w	conta_paciente.vl_coseg_nivel_hosp%type;
vl_deduzido_conta_w		conta_paciente.vl_deduzido%type;
vl_max_coseguro_conta_w		conta_paciente.vl_maximo_coseguro%type;
nr_atendimento_w		conta_paciente.nr_atendimento%type;
cd_categoria_parametro_w	conta_paciente.cd_categoria_parametro%type;

/* Dados da regra de calculo da conta */

qt_regras_w			bigint;
cd_proc_calculo_w		conv_regra_calculo_conta.cd_proc_calculo%type;
ie_orig_proc_calculo_w		conv_regra_calculo_conta.ie_orig_proc_calculo%type;
ie_tipo_calculo_w		conv_regra_calculo_conta.ie_tipo_calculo%type;
ds_calculo_w			conv_regra_calculo_conta.ds_calculo%type;
vl_desconto_deduzido_w		conv_regra_calculo_conta.vl_desconto_deduzido%type;
pr_imposto_w			conv_regra_calculo_conta.pr_imposto%type;

/* valores base e impostos */

vl_honorario_conta_w		double precision;
vl_base_com_imposto_w		double precision;
vl_base_sem_imposto_w		double precision;

/* Dados primeiro atendimento paciente unidade */

cd_setor_atendimento_w		atend_paciente_unidade.cd_setor_atendimento%type;
dt_entrada_unidade_w		atend_paciente_unidade.dt_entrada_unidade%type;
nr_seq_atepacu_w		atend_paciente_unidade.nr_seq_interno%type;

/* Dados do parâmetro faturamento*/

cd_convenio_partic_w		parametro_faturamento.cd_convenio_partic%type;
cd_categoria_partic_w		parametro_faturamento.cd_categoria_partic %type;

/* Sequências para lançamentos dos itens */

nr_seq_propaci_w		procedimento_paciente.nr_sequencia%type;
nr_seq_propaci_ww		procedimento_paciente.nr_sequencia%type;
nr_seq_conta_log_proc_w		conta_log_processamento.nr_sequencia%type;

/* Número da conta em que o item foi lançado */

nr_interno_conta_dest_w		procedimento_paciente.nr_interno_conta%type;

/* Data de inicio da conta */

dt_procedimento_w		procedimento_paciente.dt_procedimento%type;

/* Número da conta se separação */

nr_interno_conta_sep_w		conta_paciente.nr_interno_conta%type;

/*Número da conta particular que irá receber os itens, nos casos em que não for possível criar de forma automática*/

ie_possui_conta_item_w		varchar(1);
nr_interno_conta_partic_w	conta_paciente.nr_interno_conta%type;

/*Váriaveis utilizadas para o rateio, no caso do preenchimento do campo valor máximo do coseguro*/

vl_proced_hosp_w		procedimento_paciente.vl_procedimento%type;
vl_proced_honor_w		procedimento_paciente.vl_procedimento%type;
vl_proced_nivel_hosp_w		procedimento_paciente.vl_procedimento%type;
vl_total_coseguro_w		procedimento_paciente.vl_procedimento%type;
vl_proced_hosp_rat_w		procedimento_paciente.vl_procedimento%type;
vl_proced_honor_rat_w		procedimento_paciente.vl_procedimento%type;
vl_proced_nivel_hosp_rat_w	procedimento_paciente.vl_procedimento%type;
nr_seq_proc_hosp_w		procedimento_paciente.nr_sequencia%type;
nr_seq_proc_honor_w		procedimento_paciente.nr_sequencia%type;
nr_seq_proc_nivel_hosp_w	procedimento_paciente.nr_sequencia%type;
nr_seq_proc_hosp_partic_w	procedimento_paciente.nr_sequencia%type;
nr_seq_proc_honor_partic_w	procedimento_paciente.nr_sequencia%type;
nr_seq_proc_niv_hosp_part_w	procedimento_paciente.nr_sequencia%type;

/* Dominio 7408 - Tipo de regra 'Cálculo Conta'
	'D' - Deduzido (Franquia)
	'H' - Coseguro Hospital
	'N' - Coseguro Honorário
	'A' - Coseguro Nivel Hospital
*/
c01 CURSOR FOR
SELECT	cd_proc_calculo,
	ie_orig_proc_calculo,
	ie_tipo_calculo,
	ds_calculo,
	vl_desconto_deduzido,
	pr_imposto
from	conv_regra_calculo_conta
where	cd_convenio		= cd_convenio_parametro_w
and	cd_estabelecimento	= cd_estabelecimento_w
and	ie_situacao		= 'A'
and	ie_tipo_calculo in ('D', 'H', 'N', 'A')
and	clock_timestamp() between dt_inicio_vigencia and coalesce(dt_final_vigencia,clock_timestamp())
order by	dt_inicio_vigencia;


BEGIN

select	max(cd_convenio_parametro),
	max(cd_estabelecimento),
	max(coalesce(pr_coseguro_hosp,0)) / 100,
	max(coalesce(pr_coseguro_honor,0)) / 100,
	max(coalesce(pr_coseg_nivel_hosp,0)) / 100,
	max(coalesce(vl_coseguro_hosp,0)),
	max(coalesce(vl_coseguro_honor,0)),
	max(coalesce(vl_coseg_nivel_hosp,0)),
	max(vl_deduzido),
	max(coalesce(vl_maximo_coseguro,0)),
	max(nr_atendimento),
	max(cd_categoria_parametro)
into STRICT	cd_convenio_parametro_w,
	cd_estabelecimento_w,
	pr_coseg_hosp_conta_w,
	pr_coseg_honor_conta_w,
	pr_coseg_nivel_hosp_conta_w,
	vl_coseg_hosp_conta_w,
	vl_coseg_honor_conta_w,
	vl_coseg_nivel_hosp_conta_w,
	vl_deduzido_conta_w,
	vl_max_coseguro_conta_w,
	nr_atendimento_w,
	cd_categoria_parametro_w
from	conta_paciente
where	nr_interno_conta = nr_interno_conta_p;

select	sum(qt)
into STRICT	qt_regras_w
from (SELECT	1 qt
	from	conv_regra_calculo_conta
	where	cd_convenio		= cd_convenio_parametro_w
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_situacao		= 'A'
	and	ie_tipo_calculo = 'D'
	and	clock_timestamp() between dt_inicio_vigencia and coalesce(dt_final_vigencia,clock_timestamp())
	
union all

	SELECT	1 qt
	from	conv_regra_calculo_conta
	where	cd_convenio		= cd_convenio_parametro_w
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_situacao		= 'A'
	and	ie_tipo_calculo = 'H'
	and	clock_timestamp() between dt_inicio_vigencia and coalesce(dt_final_vigencia,clock_timestamp())
	
union all

	select	1 qt
	from	conv_regra_calculo_conta
	where	cd_convenio		= cd_convenio_parametro_w
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_situacao		= 'A'
	and	ie_tipo_calculo = 'N'
	and	clock_timestamp() between dt_inicio_vigencia and coalesce(dt_final_vigencia,clock_timestamp())) alias10;

if (qt_regras_w <> 3) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(310776);
end if;

select	coalesce(sum(coalesce(a.vl_medico,0)),0)
into STRICT	vl_honorario_conta_w
FROM procedimento b, procedimento_paciente a
LEFT OUTER JOIN regra_ajuste_proc c ON (a.nr_seq_ajuste_proc = c.nr_sequencia)
WHERE nr_interno_conta = nr_interno_conta_p and b.cd_procedimento = a.cd_procedimento and b.ie_origem_proced = a.ie_origem_proced and b.cd_tipo_procedimento = 135  -- 135 = Honorário Médico
;

select	coalesce(sum(coalesce(vl,0)),0)
into STRICT	vl_base_sem_imposto_w
from (SELECT	coalesce(a.vl_procedimento,0) vl
	from	procedimento_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	coalesce(a.nr_seq_proc_pacote::text, '') = ''
	and	not exists (	select	1
			from	propaci_imposto x
			where	x.nr_seq_propaci = a.nr_sequencia
			and	x.pr_imposto > 0)
	
union all

	SELECT	coalesce(a.vl_material,0) vl
	from	material_atend_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	coalesce(a.nr_seq_proc_pacote::text, '') = ''
	and	not exists (	select	1
			from	matpaci_imposto x
			where	x.nr_seq_matpaci = a.nr_sequencia
			and	x.pr_imposto > 0)) alias9;

select	coalesce(sum(coalesce(vl,0)),0)
into STRICT	vl_base_com_imposto_w
from (SELECT	coalesce(a.vl_procedimento,0) vl
	from	procedimento_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	exists (	select	1
			from	propaci_imposto y
			where	y.nr_seq_propaci = a.nr_sequencia
			and	y.pr_imposto > 0)
	
union all

	SELECT	coalesce(a.vl_material,0) vl
	from	material_atend_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	exists (	select	1
			from	matpaci_imposto x
			where	x.nr_seq_matpaci = a.nr_sequencia
			and	x.pr_imposto > 0)) alias7;

select	obter_atepacu_paciente(nr_atendimento_w,'P')
into STRICT	nr_seq_atepacu_w
;

select	max(cd_setor_atendimento),
	max(dt_entrada_unidade)
into STRICT	cd_setor_atendimento_w,
	dt_entrada_unidade_w
from	atend_paciente_unidade
where	nr_seq_interno = nr_seq_atepacu_w;

select	max(cd_convenio_partic),
	max(cd_categoria_partic)
into STRICT	cd_convenio_partic_w,
	cd_categoria_partic_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

dt_procedimento_w := clock_timestamp();
nr_interno_conta_sep_w := null;

select 	coalesce(min(dt_periodo_inicial),dt_procedimento_w)
into STRICT	dt_procedimento_w
from 	conta_paciente
where 	nr_interno_conta = nr_interno_conta_p;

if (ie_separacao_conta_p = 'S') then
	nr_interno_conta_sep_w := nr_interno_conta_p;
end if;

CALL processar_conta_pck.set_vl_honorario_conta(vl_honorario_conta_w);
CALL processar_conta_pck.set_vl_base_com_imposto(vl_base_com_imposto_w);
CALL processar_conta_pck.set_vl_base_sem_imposto(vl_base_sem_imposto_w);
CALL processar_conta_pck.set_vl_conta(vl_base_sem_imposto_w + vl_base_com_imposto_w);
CALL processar_conta_pck.set_pr_coseg_hosp_conta(pr_coseg_hosp_conta_w);
CALL processar_conta_pck.set_pr_coseg_honor_conta(pr_coseg_honor_conta_w);
CALL processar_conta_pck.set_pr_coseg_nivel_hosp_conta(pr_coseg_nivel_hosp_conta_w);
CALL processar_conta_pck.set_vl_coseg_hosp_conta(vl_coseg_hosp_conta_w);
CALL processar_conta_pck.set_vl_coseg_honor_conta(vl_coseg_honor_conta_w);
CALL processar_conta_pck.set_vl_coseg_nivel_hosp_conta(vl_coseg_nivel_hosp_conta_w);
CALL processar_conta_pck.set_vl_deduzido_conta(vl_deduzido_conta_w);
CALL processar_conta_pck.set_vl_max_coseguro_conta(vl_max_coseguro_conta_w);

-- Criar a conta que irá receber os itens
if (cd_convenio_partic_w IS NOT NULL AND cd_convenio_partic_w::text <> '') then

	select	nextval('conta_paciente_seq')
	into STRICT	nr_interno_conta_partic_w
	;

	insert into conta_paciente(nr_atendimento,
		dt_acerto_conta,
		ie_status_acerto,
		dt_periodo_inicial,
		dt_periodo_final,
		dt_atualizacao,
		nm_usuario,
		cd_convenio_parametro,
		cd_categoria_parametro,
		dt_mesano_referencia,
		dt_mesano_contabil,
		cd_convenio_calculo,
		cd_categoria_calculo,
		nr_interno_conta,
		cd_estabelecimento,
		nr_seq_pq_protocolo,
		cd_autorizacao,
		ie_tipo_atend_conta,
		ie_tipo_fatur_tiss,
		ie_tipo_guia)
	SELECT	nr_atendimento,
		dt_acerto_conta,
		1,
		dt_periodo_inicial,
		dt_periodo_final,
		clock_timestamp(),
		nm_usuario_p,
		cd_convenio_partic_w,
		cd_categoria_partic_w,
		dt_mesano_referencia,
		dt_mesano_referencia,
		cd_convenio_partic_w,
		cd_categoria_partic_w,
		nr_interno_conta_partic_w,
		cd_estabelecimento,
		nr_seq_pq_protocolo,
		cd_autorizacao,
		ie_tipo_atend_conta,
		ie_tipo_fatur_tiss,
		ie_tipo_guia
	from	conta_paciente
	where	nr_interno_conta = nr_interno_conta_p;

end if;

open c01;
loop
	fetch	c01
	into	cd_proc_calculo_w,
		ie_orig_proc_calculo_w,
		ie_tipo_calculo_w,
		ds_calculo_w,
		vl_desconto_deduzido_w,
		pr_imposto_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
		CALL processar_conta_pck.set_vl_imposto(vl_base_com_imposto_w * pr_imposto_w);
		CALL processar_conta_pck.set_vl_desconto_deduzido(vl_desconto_deduzido_w);
		CALL processar_conta_pck.set_pr_imposto(pr_imposto_w);
		CALL processar_conta_pck.set_ie_tipo_calculo(ie_tipo_calculo_w);

		CALL processar_conta_macro(ds_calculo_w, 'P');

		select	nextval('procedimento_paciente_seq')
		into STRICT	nr_seq_propaci_w
		;

		insert into procedimento_paciente(nr_sequencia,
			cd_procedimento,
			ie_origem_proced,
			qt_procedimento,
			ie_valor_informado,
			vl_procedimento,
			nr_seq_proc_princ,
			dt_entrada_unidade,
			cd_setor_atendimento,
			nr_seq_atepacu,
			nr_atendimento,
			dt_procedimento,
			dt_atualizacao,
			nm_usuario,
			cd_convenio,
			vl_medico,
			vl_anestesista,
			vl_materiais,
			vl_auxiliares,
			vl_custo_operacional,
			ie_auditoria,
			cd_categoria,
			nr_interno_conta)
		values (nr_seq_propaci_w,					-- nr_sequencia
			cd_proc_calculo_w,					-- cd_procedimento
			ie_orig_proc_calculo_w,					-- ie_origem_proced
			1,							-- qt_procedimento
			'S',							-- ie_valor_informado
			processar_conta_pck.get_vl_procedimento * -1,		-- vl_procedimento
			null,							-- nr_seq_proc_princ
			dt_entrada_unidade_w,					-- dt_entrada_unidade
			cd_setor_atendimento_w,					-- cd_setor_atendimento
			nr_seq_atepacu_w,					-- nr_seq_atepacu
			nr_atendimento_w,					-- nr_atendimento
			dt_procedimento_w,					-- dt_procedimento
			clock_timestamp(),						-- dt_atualizacao
			nm_usuario_p,						-- nm_usuario
			cd_convenio_parametro_w,				-- cd_convenio
			0,							-- vl_medico
			0,							-- vl_anestesista
			0,							-- vl_materiais
			0,							-- vl_auxiliares
			0,							-- vl_custo_operacional
			'N',							-- ie_auditoria
			cd_categoria_parametro_w,				-- cd_categoria
			nr_interno_conta_sep_w					-- nr_interno_conta
			);

		CALL atualiza_preco_procedimento(nr_seq_propaci_w,cd_convenio_parametro_w,nm_usuario_p);

		select	max(nr_interno_conta)
		into STRICT	nr_interno_conta_dest_w
		from	procedimento_paciente
		where	nr_sequencia = nr_seq_propaci_w;

		select	nextval('conta_log_processamento_seq')
		into STRICT	nr_seq_conta_log_proc_w
		;

		insert into conta_log_processamento(
			nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_atendimento,
			nr_seq_item,
			nr_interno_conta,
			nr_interno_conta_base)
		values (
			nr_seq_conta_log_proc_w,				-- nr_sequencia
			nm_usuario_p,						-- nm_usuario
			clock_timestamp(),						-- dt_atualizacao
			nm_usuario_p,						-- nm_usuario_nrec
			clock_timestamp(),						-- dt_atualizacao_nrec
			nr_atendimento_w,					-- nr_atendimento
			nr_seq_propaci_w,					-- nr_seq_item
			nr_interno_conta_dest_w,				-- nr_interno_conta
			nr_interno_conta_p					-- nr_interno_conta_base
			);

		select	nextval('procedimento_paciente_seq')
		into STRICT	nr_seq_propaci_ww
		;

		insert into procedimento_paciente(nr_sequencia,
			cd_procedimento,
			ie_origem_proced,
			qt_procedimento,
			ie_valor_informado,
			vl_procedimento,
			nr_seq_proc_princ,
			dt_entrada_unidade,
			cd_setor_atendimento,
			nr_seq_atepacu,
			nr_atendimento,
			dt_procedimento,
			dt_atualizacao,
			nm_usuario,
			cd_convenio,
			vl_medico,
			vl_anestesista,
			vl_materiais,
			vl_auxiliares,
			vl_custo_operacional,
			cd_categoria,
			ie_auditoria,
			nr_interno_conta)
		values (nr_seq_propaci_ww,					-- nr_sequencia
			cd_proc_calculo_w,					-- cd_procedimento
			ie_orig_proc_calculo_w,					-- ie_origem_proced
			1,							-- qt_procedimento
			'S',							-- ie_valor_informado
			processar_conta_pck.get_vl_procedimento,		-- vl_procedimento
			nr_seq_propaci_w,					-- nr_seq_proc_princ
			dt_entrada_unidade_w,					-- dt_entrada_unidade
			cd_setor_atendimento_w,					-- cd_setor_atendimento
			nr_seq_atepacu_w,					-- nr_seq_atepacu
			nr_atendimento_w,					-- nr_atendimento
			dt_procedimento_w,					-- dt_procedimento
			clock_timestamp(),						-- dt_atualizacao
			nm_usuario_p,						-- nm_usuario
			cd_convenio_partic_w,					-- cd_convenio
			0,							-- vl_medico
			0,							-- vl_anestesista
			0,							-- vl_materiais
			0,							-- vl_auxiliares
			0,							-- vl_custo_operacional
			cd_categoria_partic_w,					-- cd_categoria
			'N',							-- ie_auditoria
			nr_interno_conta_partic_w				-- nr_interno_conta
			);

		CALL atualiza_preco_procedimento(nr_seq_propaci_ww,cd_convenio_parametro_w,nm_usuario_p);

		select	max(nr_interno_conta)
		into STRICT	nr_interno_conta_dest_w
		from	procedimento_paciente
		where	nr_sequencia = nr_seq_propaci_ww;

		select	nextval('conta_log_processamento_seq')
		into STRICT	nr_seq_conta_log_proc_w
		;

		insert into conta_log_processamento(
			nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_atendimento,
			nr_seq_item,
			nr_interno_conta,
			nr_interno_conta_base)
		values (
			nr_seq_conta_log_proc_w,				-- nr_sequencia
			nm_usuario_p,						-- nm_usuario
			clock_timestamp(),						-- dt_atualizacao
			nm_usuario_p,						-- nm_usuario_nrec
			clock_timestamp(),						-- dt_atualizacao_nrec
			nr_atendimento_w,					-- nr_atendimento
			nr_seq_propaci_ww,					-- nr_seq_item
			nr_interno_conta_dest_w,				-- nr_interno_conta
			nr_interno_conta_p					-- nr_interno_conta_base
			);

		if (ie_tipo_calculo_w = 'H') then
			vl_proced_hosp_w		:= processar_conta_pck.get_vl_procedimento;
			nr_seq_proc_hosp_w		:= nr_seq_propaci_w;
			nr_seq_proc_hosp_partic_w	:= nr_seq_propaci_ww;
		elsif (ie_tipo_calculo_w = 'N') then
			vl_proced_honor_w		:= processar_conta_pck.get_vl_procedimento;
			nr_seq_proc_honor_w		:= nr_seq_propaci_w;
			nr_seq_proc_honor_partic_w	:= nr_seq_propaci_ww;
		elsif (ie_tipo_calculo_w = 'A') then
			vl_proced_nivel_hosp_w		:= processar_conta_pck.get_vl_procedimento;
			nr_seq_proc_nivel_hosp_w	:= nr_seq_propaci_w;
			nr_seq_proc_niv_hosp_part_w	:= nr_seq_propaci_ww;
		end if;

	end;
end loop;
close c01;

vl_total_coseguro_w	:= coalesce(vl_proced_hosp_w,0) + coalesce(vl_proced_honor_w,0) + coalesce(vl_proced_nivel_hosp_w,0);

if (coalesce(vl_max_coseguro_conta_w,0) > 0) and (coalesce(vl_max_coseguro_conta_w,0) < vl_total_coseguro_w) then

	vl_proced_hosp_rat_w		:= round((dividir(coalesce(vl_proced_hosp_w,0) * coalesce(vl_max_coseguro_conta_w,0), vl_total_coseguro_w))::numeric,2);
	vl_proced_honor_rat_w		:= round((dividir(coalesce(vl_proced_honor_w,0) * coalesce(vl_max_coseguro_conta_w,0), vl_total_coseguro_w))::numeric,2);
	vl_proced_nivel_hosp_rat_w	:= vl_max_coseguro_conta_w - vl_proced_hosp_rat_w - vl_proced_honor_rat_w;

	update	procedimento_paciente
	set	vl_procedimento = vl_proced_hosp_rat_w * -1
	where	nr_sequencia = nr_seq_proc_hosp_w;

	update	procedimento_paciente
	set	vl_procedimento = vl_proced_hosp_rat_w
	where	nr_sequencia = nr_seq_proc_hosp_partic_w;

	update	procedimento_paciente
	set	vl_procedimento = vl_proced_honor_rat_w * -1
	where	nr_sequencia = nr_seq_proc_honor_w;

	update	procedimento_paciente
	set	vl_procedimento = vl_proced_honor_rat_w
	where	nr_sequencia = nr_seq_proc_honor_partic_w;

	update	procedimento_paciente
	set	vl_procedimento = vl_proced_nivel_hosp_rat_w * -1
	where	nr_sequencia = nr_seq_proc_nivel_hosp_w;

	update	procedimento_paciente
	set	vl_procedimento = vl_proced_nivel_hosp_rat_w
	where	nr_sequencia = nr_seq_proc_niv_hosp_part_w;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE processar_conta_mx ( nr_interno_conta_p bigint, ie_separacao_conta_p text, nm_usuario_p text) FROM PUBLIC;

