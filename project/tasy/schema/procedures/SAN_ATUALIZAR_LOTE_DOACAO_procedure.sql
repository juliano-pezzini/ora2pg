-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE san_atualizar_lote_doacao ( nr_sequencia_p bigint, nr_seq_lote_p bigint, nm_usuario_p text, ie_opcao_p text default 'D') AS $body$
DECLARE


dt_fabricacao_w			timestamp;
dt_validade_w  			timestamp;
ds_lote_fornec_w		varchar(20);
qt_dias_param_w			bigint;
cd_material_w			bigint;
qt_bolsa_w     			bigint;
nr_seq_antic_w			smallint  := null;
qt_volume_antic_w		smallint  := null;
nr_sequencia_bolsa_w  		bigint := null;
ie_tipo_bolsa_w			san_marca_bolsa.ie_tipo_bolsa%type;
ie_atualiza_dados_bolsa_w	varchar(1);
ie_tipo_bolsa_cadastro_w	san_doacao.ie_tipo_bolsa%type;
ie_atualiza_kit_aferese_w	varchar(1);


BEGIN

qt_dias_param_w := Obter_Param_Usuario(450, 359, wheb_usuario_pck.get_cd_perfil, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, qt_dias_param_w);
--Permitir atualizações dos dados da bolsa, com materiais que não estão vinculados no cadastro "SAN - Marca Bolsa".
ie_atualiza_dados_bolsa_w := Obter_Param_Usuario(450, 481, wheb_usuario_pck.get_cd_perfil, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_atualiza_dados_bolsa_w);
--[296] - Permite atualizar o kit com as informações da bolsa na coleta do tipo aférese
ie_atualiza_kit_aferese_w := Obter_Param_Usuario(450, 296, wheb_usuario_pck.get_cd_perfil, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_atualiza_kit_aferese_w);

if (ie_opcao_p = 'D') then --Atualiza na san_doacao, forma como sempre foi utilizado
	if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then

		if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then

			select  max(dt_fabricacao),
				max(dt_validade),
				max(ds_lote_fornec),
				max(cd_material)
			into STRICT 	dt_fabricacao_w,
				dt_validade_w,
				ds_lote_fornec_w,
				cd_material_w
			from 	material_lote_fornec
			where 	nr_sequencia = nr_seq_lote_p;

		end if;

		select	max(ie_tipo_bolsa)
		into STRICT	ie_tipo_bolsa_cadastro_w
		from	san_doacao
		where	nr_sequencia = nr_sequencia_p;

		if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then

			select	count(nr_sequencia)
			into STRICT	qt_bolsa_w
			from	san_marca_bolsa
			where	cd_material = cd_material_w
			and	coalesce(ie_tipo_bolsa, 0) = coalesce(ie_tipo_bolsa_cadastro_w, 0)
			and		ie_situacao = 'A';

			if (qt_bolsa_w = 1) then
				select	nr_sequencia,
					nr_seq_antic,
					qt_volume_antic,
					ie_tipo_bolsa
				into STRICT	nr_sequencia_bolsa_w,
					nr_seq_antic_w,
					qt_volume_antic_w,
					ie_tipo_bolsa_w
				from	san_marca_bolsa
				where	cd_material = cd_material_w
				and		ie_situacao = 'A';
			end if;

		end if;

		--Se o parametro [481] estiver para 'N' , Se existir material e não existir bolsa vai abortar e Se n?o existir material não vai existir bolsa então vai abortar.
		if (coalesce(qt_bolsa_w,0) = 0) and (coalesce(ie_atualiza_dados_bolsa_w,'S') = 'N') then
			/*Não é possível atualizar os dados da bolsa com materiais que não estão vinculados
			no cadastro geral "Bolsas de sangue". Parâmetro [481].*/
			CALL wheb_mensagem_pck.exibir_mensagem_abort(453041);
		end if;

		if (coalesce(qt_dias_param_w::text, '') = '') then
			update	san_doacao
			set	dt_fabricacao_bolsa = dt_fabricacao_w,
				dt_validade_bolsa = dt_validade_w,
				nr_lote_bolsa = ds_lote_fornec_w,
				nr_marca_bolsa = coalesce(nr_sequencia_bolsa_w, nr_marca_bolsa),
				nr_seq_antic = coalesce(nr_seq_antic_w, nr_seq_antic),
				qt_volume_antic = coalesce(qt_volume_antic_w, qt_volume_antic),
				ie_tipo_bolsa = coalesce(ie_tipo_bolsa_w, ie_tipo_bolsa)
			where 	nr_sequencia = nr_sequencia_p;
		elsif (qt_dias_param_w >= 0) then
			update	san_doacao
			set	dt_fabricacao_bolsa = dt_fabricacao_w,
				dt_validade_bolsa = dt_fabricacao_w + qt_dias_param_w,
				nr_lote_bolsa = ds_lote_fornec_w,
				nr_marca_bolsa = coalesce(nr_sequencia_bolsa_w, nr_marca_bolsa),
				nr_seq_antic = coalesce(nr_seq_antic_w, nr_seq_antic),
				qt_volume_antic = coalesce(qt_volume_antic_w, qt_volume_antic),
				ie_tipo_bolsa = coalesce(ie_tipo_bolsa_w, ie_tipo_bolsa)
			where 	nr_sequencia = nr_sequencia_p;
		end if;

		--[296] - Permite atualizar o kit com as informações da bolsa na coleta do tipo aférese
		if (coalesce(ie_atualiza_kit_aferese_w,'N') = 'S') then
			update	san_doacao
			set	nr_lote_kit = coalesce(nr_lote_kit, nr_lote_bolsa),
				dt_fabricacao_kit = coalesce(dt_fabricacao_kit, dt_fabricacao_bolsa),
				dt_validade_kit_aferese = coalesce(dt_validade_kit_aferese, dt_validade_bolsa)
			where 	nr_sequencia = nr_sequencia_p;
		end if;
	end if;
end if;
if (ie_opcao_p = 'L') then
	CALL san_insere_lote_bolsa(nr_sequencia_p,nr_seq_lote_p,null,null,nm_usuario_p,'C');
end if;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE san_atualizar_lote_doacao ( nr_sequencia_p bigint, nr_seq_lote_p bigint, nm_usuario_p text, ie_opcao_p text default 'D') FROM PUBLIC;

