-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE vincular_agendamentos_futuros ( nr_atendimento_p text, cd_pessoa_fisica_p text, cd_convenio_p text, cd_plano_p text, nr_seq_agenda_p text, nr_atendimento_atual_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, ds_separador_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ds_retorno_p INOUT text) AS $body$
DECLARE


nr_atendimento_lista_w	varchar(2000);
cd_pessoa_fisica_lista_w	varchar(2000);
cd_convenio_lista_w	varchar(2000);
cd_plano_lista_w		varchar(2000);
nr_seq_agenda_lista_w	varchar(2000);

nr_atendimento_w		bigint;
cd_pessoa_fisica_w	varchar(10);
cd_convenio_w		integer;
cd_plano_w		varchar(10);
nr_seq_agenda_w		bigint;

nm_pessoa_fisica_w	varchar(60);
ie_existe_agenda_w	varchar(1);
cd_convenio_plano_w	varchar(10);
ie_gerar_prescr_age_serv_w	varchar(255);
ie_gerar_passagem_vincular	varchar(1);
ie_gerar_prescri_agendamen_w varchar(1);


BEGIN

ds_retorno_p		:= '';

nr_atendimento_lista_w	:= nr_atendimento_p;
cd_pessoa_fisica_lista_w	:= cd_pessoa_fisica_p;
cd_convenio_lista_w	:= cd_convenio_p;
cd_plano_lista_w		:= cd_plano_p;
nr_seq_agenda_lista_w	:= nr_seq_agenda_p;

ie_gerar_passagem_vincular := Obter_Param_Usuario(866, 127, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_passagem_vincular);
ie_gerar_prescri_agendamen_w := Obter_Param_Usuario(866, 285, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_prescri_agendamen_w);

if (nr_atendimento_lista_w IS NOT NULL AND nr_atendimento_lista_w::text <> '') and (position(',' in nr_atendimento_lista_w) = 0) then
	nr_atendimento_lista_w := nr_atendimento_lista_w || ',';
end if;
if (cd_pessoa_fisica_lista_w IS NOT NULL AND cd_pessoa_fisica_lista_w::text <> '') and (position(',' in cd_pessoa_fisica_lista_w) = 0) then
	cd_pessoa_fisica_lista_w := cd_pessoa_fisica_lista_w || ',';
end if;
if (cd_convenio_lista_w IS NOT NULL AND cd_convenio_lista_w::text <> '') and (position(',' in cd_convenio_lista_w) = 0) then
	cd_convenio_lista_w := cd_convenio_lista_w || ',';
end if;
if (cd_plano_lista_w IS NOT NULL AND cd_plano_lista_w::text <> '')  and (position(',' in cd_plano_lista_w) = 0) then
	cd_plano_lista_w := cd_plano_lista_w || ',';
end if;
if (nr_seq_agenda_lista_w IS NOT NULL AND nr_seq_agenda_lista_w::text <> '') and (position(',' in nr_seq_agenda_lista_w) = 0) then
	nr_seq_agenda_lista_w := nr_seq_agenda_lista_w || ',';
end if;

while (nr_seq_agenda_lista_w IS NOT NULL AND nr_seq_agenda_lista_w::text <> '') loop
	begin
	nr_atendimento_w		:= substr(nr_atendimento_lista_w, 1, position(',' in nr_atendimento_lista_w) - 1);
	cd_pessoa_fisica_w	:= substr(cd_pessoa_fisica_lista_w, 1, position(',' in cd_pessoa_fisica_lista_w) - 1);
	cd_convenio_w		:= substr(cd_convenio_lista_w, 1, position(',' in cd_convenio_lista_w) - 1);
	cd_plano_w		:= substr(cd_plano_lista_w, 1, position(',' in cd_plano_lista_w) - 1);
	nr_seq_agenda_w		:= substr(nr_seq_agenda_lista_w, 1, position(',' in nr_seq_agenda_lista_w) - 1);

	nr_atendimento_lista_w	:= substr(nr_atendimento_lista_w, position(',' in nr_atendimento_lista_w) + 1, length(nr_atendimento_lista_w));
	cd_pessoa_fisica_lista_w	:= substr(cd_pessoa_fisica_lista_w, position(',' in cd_pessoa_fisica_lista_w) + 1, length(cd_pessoa_fisica_lista_w));
	cd_convenio_lista_w	:= substr(cd_convenio_lista_w, position(',' in cd_convenio_lista_w) + 1, length(cd_convenio_lista_w));
	cd_plano_lista_w		:= substr(cd_plano_lista_w, position(',' in cd_plano_lista_w) + 1, length(cd_plano_lista_w));
	nr_seq_agenda_lista_w	:= substr(nr_seq_agenda_lista_w, position(',' in nr_seq_agenda_lista_w) + 1, length(nr_seq_agenda_lista_w));

	if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
		begin
		select	substr(obter_nome_pf(cd_pessoa_fisica),1,60)
		into STRICT	nm_pessoa_fisica_w
		from	pessoa_fisica
		where	cd_pessoa_fisica = cd_pessoa_fisica_w;
		end;
	end if;

	select	coalesce(max(cd_plano), '0')
	into STRICT	cd_convenio_plano_w
	from	convenio_plano
	where	cd_convenio	= cd_convenio_w
	and	cd_plano		= cd_plano_w;

	update	agenda_consulta
	set	nr_atendimento	= nr_atendimento_w,
		cd_pessoa_fisica	= cd_pessoa_fisica_w,
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp(),
		nm_paciente	= nm_pessoa_fisica_w,
		cd_convenio	= cd_convenio_w,
		ie_status_agenda	= 'O',
		nm_usuario_vinculo_atend = nm_usuario_p,
		cd_plano = CASE WHEN cd_convenio_plano_w='0' THEN null  ELSE cd_convenio_plano_w END
	where	nr_sequencia	= nr_seq_agenda_w;
	
	if (coalesce(ie_gerar_passagem_vincular,'N') = 'S') and (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
		begin
		CALL Gerar_passagem_ageserv(nr_atendimento_w, nr_seq_agenda_w, nm_usuario_p);
		end;
	end if;

	if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (coalesce(nr_atendimento_atual_p::text, '') = '') then
		begin
		select	substr(obter_se_existe_evento_agenda(cd_estabelecimento_p, 'VA', 'S'), 1,1)
		into STRICT	ie_existe_agenda_w
		;

		if (ie_existe_agenda_w = 'S') then
			CALL exec_evento_agenda('S', 'S', nr_seq_agenda_w, cd_estabelecimento_p, nm_usuario_p);
		end if;
		end;
	end if;

	select	substr(obter_se_gerar_prescr_age_serv(nr_seq_agenda_w), 1,255)
	into STRICT	ie_gerar_prescr_age_serv_w
	;

	if (ie_gerar_prescr_age_serv_w = 'S') then
		begin
		if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '') and (ie_gerar_prescri_agendamen_w = 'S') then
			CALL gerar_prescr_agenda_servico(nr_seq_agenda_w, nm_usuario_p);
		end if;
		end;
	else
		ds_retorno_p	:= ds_retorno_p || coalesce(ds_separador_p, '#') || substr(obter_texto_tasy(51882, wheb_usuario_pck.get_nr_seq_idioma),1,255) || ie_gerar_prescr_age_serv_w;
	end if;

	CALL gerar_lancamento_automatico(nr_atendimento_w, null, 342, nm_usuario_p, 0, null, null, null, null, null);
	
	end;
end loop;

if (ds_retorno_p IS NOT NULL AND ds_retorno_p::text <> '') then
	ds_retorno_p	:= substr(ds_retorno_p, 1, length(ds_retorno_p));
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE vincular_agendamentos_futuros ( nr_atendimento_p text, cd_pessoa_fisica_p text, cd_convenio_p text, cd_plano_p text, nr_seq_agenda_p text, nr_atendimento_atual_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, ds_separador_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ds_retorno_p INOUT text) FROM PUBLIC;

