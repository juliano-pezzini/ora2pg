-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_receber_blacklist ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w			intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w		varchar(15);
reg_integracao_w			gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
ds_erro_w			varchar(4000);
ie_erro_w				varchar(1) := 'N';
ie_exception_w			varchar(1) := 'N';
i				integer;
nr_atendimento_w			atendimento_paciente.nr_atendimento%type;
pessoa_classif_w			pessoa_classif%rowtype;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;

c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/PATIENT_BLACKLIST' passing xml_p columns
	ie_action			varchar(40)		path		'IE_ACTION',
	nr_seq_classif		varchar(10)		path		'CD_CLASSIFICATION',
	nr_atendimento		bigint		path		'NR_EPISODE',
	ie_paciente_devedor	varchar(1)		path		'IE_DEBTS_PATIENT',
	dt_inicio_vigencia		varchar(14)		path		'DT_START_VALIDITY',
	dt_final_vigencia		varchar(14)		path		'DT_END_VALIDITY',
	dt_atualizacao		varchar(14)		path		'DT_UPDATE',
	nm_usuario		varchar(15)		path		'NM_USER');

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT 	max(a.cd_pessoa_fisica) cd_paciente
from 	atendimento_paciente a
where 	a.nr_atendimento = nr_atendimento_w

union

select 	max(b.cd_pessoa_fisica) cd_pagador
from 	atendimento_pagador b
where 	b.nr_atendimento = nr_atendimento_w;


BEGIN

/*Atualiza o status da fila para Em processamento*/

update	intpd_fila_transmissao
set	ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

commit;

begin

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w			:=	nr_seq_sistema_w;
reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:=	'R';
reg_integracao_w.ie_sistema_externo		:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao		:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao	:=	nr_seq_regra_w;
reg_integracao_w.intpd_log_receb.delete;
reg_integracao_w.qt_reg_log			:=	0;

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	begin

	select 	max(nr_atendimento)
	into STRICT	nr_atendimento_w
	from 	atendimento_paciente
	where 	nr_atendimento = c01_w.nr_atendimento;

	if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then

		open c02;
		loop
		fetch c02 into
			cd_pessoa_fisica_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */

		begin
		/* A partir do número de atendimento enviado pelo sistema externo (Middleware), buscar o paciente e o responsavel da conta. Registrar ambos como "blacklist" no Cadastro Completo de Pessoas/ Infos adicionais/ Classificação (tabela PESSOA_CLASSIF) */

		ie_erro_w				:= 	'N';
		reg_integracao_w.nm_tabela		:=	'PESSOA_CLASSIF';
		reg_integracao_w.nm_elemento	:=	'PATIENT_BLACKLIST';
		reg_integracao_w.nr_seq_visao	:=	27021; /*HTML5 - Classificação - Cadastro Completo - Angula*/
		if (coalesce(upper(c01_w.ie_action),'INSERT') <> 'DELETE') then /*INSERT ou UPDATE*/
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_CLASSIF', c01_w.nr_seq_classif, 'S', pessoa_classif_w.nr_seq_classif) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_classif_w.nr_seq_classif := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_INICIO_VIGENCIA', c01_w.dt_inicio_vigencia, 'N', pessoa_classif_w.dt_inicio_vigencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_classif_w.dt_inicio_vigencia := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_FINAL_VIGENCIA', c01_w.dt_final_vigencia, 'N', pessoa_classif_w.dt_final_vigencia) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_classif_w.dt_final_vigencia := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c01_w.dt_atualizacao, 'N', pessoa_classif_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_classif_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.nm_usuario, 'N', pessoa_classif_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_classif_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;

			if (reg_integracao_w.qt_reg_log = 0) then

				pessoa_classif_w.ds_observacao := wheb_mensagem_pck.get_texto(1023689) || ' ' || nr_atendimento_w;
				pessoa_classif_w.cd_pessoa_fisica := cd_pessoa_fisica_w;

				select 	max(nr_sequencia)
				into STRICT	pessoa_classif_w.nr_sequencia
				from 	pessoa_classif
				where 	cd_pessoa_fisica = pessoa_classif_w.cd_pessoa_fisica
				and 	upper(ds_observacao) like '%' || nr_atendimento_w || '%';

				if (coalesce(pessoa_classif_w.nr_sequencia,0) > 0) then

					/*No update não é necessário salvar o atributo DT_INICIO_VIGENCIA. Por ser obrigatório no Tasy, já possuirá valor na atualização do registro*/

					if (coalesce(c01_w.ie_paciente_devedor,'X') = 'N') then
						pessoa_classif_w.dt_final_vigencia := coalesce(pessoa_classif_w.dt_final_vigencia, clock_timestamp());
					end if;

					update	pessoa_classif
					set	cd_pessoa_fisica = pessoa_classif_w.cd_pessoa_fisica,
						dt_final_vigencia = pessoa_classif_w.dt_final_vigencia,
						ds_observacao = pessoa_classif_w.ds_observacao,
						dt_atualizacao = pessoa_classif_w.dt_atualizacao,
						nm_usuario = pessoa_classif_w.nm_usuario
					where	nr_sequencia = pessoa_classif_w.nr_sequencia;
				else

					if (coalesce(c01_w.ie_paciente_devedor,'X') = 'S') then
						pessoa_classif_w.dt_inicio_vigencia := coalesce(pessoa_classif_w.dt_inicio_vigencia, clock_timestamp());
						pessoa_classif_w.dt_final_vigencia := null;
					end if;

					select 	nextval('pessoa_classif_seq')
					into STRICT	pessoa_classif_w.nr_sequencia
					;

					insert into pessoa_classif values (pessoa_classif_w.*);
				end if;
			end if;

		elsif (coalesce(upper(c01_w.ie_action),'INSERT') = 'DELETE') then /*DELETE*/
			select 	max(nr_sequencia)
			into STRICT	pessoa_classif_w.nr_sequencia
			from 	pessoa_classif
			where 	cd_pessoa_fisica = cd_pessoa_fisica_w
			and 	upper(ds_observacao) like '%' || nr_atendimento_w || '%';

			if (coalesce(pessoa_classif_w.nr_sequencia,0) > 0) then
				delete	FROM pessoa_classif
				where	nr_sequencia = pessoa_classif_w.nr_sequencia;
			else
				/*Registro não localizado no Tasy para exclusão.*/

				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1023761),'INTPDTASY','0004');
				ie_erro_w := 'S';
			end if;
		end if;

		end;
		end loop;
		close c02;
	else
		/*Atendimento não encontrado!*/

		intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1024247),'INTPDTASY','0004');
		ie_erro_w := 'S';
	end if;

	end;
end loop;
close c01;

exception
when others then
	begin
	ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
	rollback;

	update	intpd_fila_transmissao
	set	ie_status 	 	= 'E',
		cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
		ds_log 		= ds_erro_w
		--nr_doc_externo	= c01_w.nr_seq_episodio
	where	nr_sequencia 	= nr_sequencia_p;

	ie_exception_w := 'S';

	end;
end;

if (ie_exception_w = 'N') then

	if	((reg_integracao_w.qt_reg_log > 0) or (coalesce(ie_erro_w,'N') = 'S')) then
		begin
		rollback;

		update	intpd_fila_transmissao
		set	ie_status		= 'E',
			cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
			ds_log 		= ds_erro_w
			--nr_doc_externo	= c01_w.nr_seq_episodio
		where	nr_sequencia 	= nr_sequencia_p;

		for i in 0..reg_integracao_w.qt_reg_log-1 loop
			intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY',reg_integracao_w.intpd_log_receb[i].cd_default_message);
		end loop;
		end;
	else
		update	intpd_fila_transmissao
		set	ie_status		= 'S',
			cd_default_message	= '0000',
			nr_seq_documento	= pessoa_classif_w.nr_sequencia
			--nr_doc_externo	= c01_w.nr_seq_episodio
		where	nr_sequencia	= nr_sequencia_p;
	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_receber_blacklist ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

