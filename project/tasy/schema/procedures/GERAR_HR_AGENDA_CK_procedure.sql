-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_hr_agenda_ck ( dt_previsto_p timestamp, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_exite_hr_w     		 varchar(1);
qt_agenda       		 bigint;
nr_sequencia_p  		 bigint;
hr_agenda       		 timestamp;
dt_prev_hr      		 timestamp;
qt_reg_w				 bigint;
ds_erro_w				 varchar(255);
ie_dia_semana_w			 bigint;
ie_bloqueio_w			 varchar(10);
ie_bloqueio_dia_w		 varchar(10);
ie_permite_agend_feriado varchar(1);

C01 CURSOR FOR
	SELECT 	a.hr_referencia,
		a.qt_agendamento
	from	checkup_regra_agendamento a
	where	cd_estabelecimento	= cd_estabelecimento_p	
	and	((((coalesce(ie_dia_semana,ie_dia_semana_w)	= ie_dia_semana_w) or
		 (ie_dia_semana = 9 AND ie_dia_semana_w between 2 and 6)))
		 or exists (SELECT 1 from checkup_regra_dia where cd_estabelecimento = cd_estabelecimento_p and trunc(dt_referencia)	= trunc(dt_previsto_p)))
	order by 1;

procedure busca_hora_gerada is
	;
BEGIN
		select count(*)
			into STRICT   qt_reg_w
			from   checkup a
			where  a.dt_previsto = dt_prev_hr
			and    a.cd_setor_atendimento = cd_setor_atendimento_p
			and    a.cd_estabelecimento = cd_estabelecimento_p
			and	   coalesce(a.dt_cancelamento::text, '') = '';	
end;

begin

begin

ie_permite_agend_feriado := obter_valor_param_usuario(996, 25, obter_perfil_ativo, nm_usuario_p, 0);

if (dt_previsto_p IS NOT NULL AND dt_previsto_p::text <> '') and (cd_setor_atendimento_p IS NOT NULL AND cd_setor_atendimento_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	begin
	ie_dia_semana_w		:= pkg_date_utils.get_WeekDay(dt_previsto_p);
	begin
	select 'S'
	into STRICT	ie_bloqueio_w
	from	checkup_bloqueio
	where	trunc(dt_previsto_p) between dt_inicial and dt_final
	and	((cd_estabelecimento = cd_estabelecimento_p) or (coalesce(cd_estabelecimento::text, '') = ''))
	and	coalesce(ie_dia_semana::text, '') = '';
	exception
		when others then
			ie_bloqueio_w := 'N';
		end;
		
	begin
	-- bloqueio por dia
	select 'S'
	into STRICT	ie_bloqueio_dia_w
	from	CHECKUP_bloqueio
	where	trunc(dt_previsto_p) between dt_inicial and dt_final
	and	((ie_dia_semana = ie_dia_semana_w) or (ie_dia_semana = 9))
	and	((cd_Estabelecimento = cd_estabelecimento_p) or (coalesce(cd_estabelecimento::text, '') = ''))
	and	(ie_dia_semana IS NOT NULL AND ie_dia_semana::text <> '');
	exception
		when others then
			ie_bloqueio_dia_w := 'N';
	end;
	
	ie_exite_hr_w	:= 'N';

	if (ie_exite_hr_w = 'N') AND
		(ie_bloqueio_w	= 'N' AND ie_bloqueio_dia_w	= 'N') then
		begin
		open C01;
		loop
		fetch C01 into
			hr_agenda,
			qt_agenda;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			dt_prev_hr := to_date(to_char(dt_previsto_p,'dd/mm/yyyy') ||' '|| to_char(hr_agenda,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
		
			if (ie_permite_agend_feriado = 'N') and (obter_se_feriado(wheb_usuario_pck.get_cd_estabelecimento,dt_prev_hr) > 0) then
					-- Nao e permitido gerar agendamentos de Check-up para feriados! Parametro [25]
					CALL wheb_mensagem_pck.exibir_mensagem_abort(264635);
			End if;	
		 
			busca_hora_gerada;

			while(qt_reg_w < qt_agenda) loop
				 begin
						
				 	select nextval('checkup_seq')
				 	into STRICT   nr_sequencia_p
				 	;
				
				 	insert into checkup(nr_sequencia,
							cd_setor_atendimento,
							cd_estabelecimento,
							dt_atualizacao,
							dt_atualizacao_nrec,
							nm_usuario,
							nm_usuario_nrec,
							dt_previsto,
							ie_autorizado)
						values (nr_sequencia_p,
							cd_setor_atendimento_p,
							cd_estabelecimento_p,
							clock_timestamp(),
							clock_timestamp(),
							nm_usuario_p,
							nm_usuario_p,
							dt_prev_hr,
							'A');
				 		commit;
				 		busca_hora_gerada;
				 	 end;
			      end loop;
			    end;
			 end loop;
		  close C01;
	   end;
	end if;
  end;
end if;

exception
	when others then
	ds_erro_w := sqlerrm(SQLSTATE);
	end;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_hr_agenda_ck ( dt_previsto_p timestamp, cd_setor_atendimento_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

