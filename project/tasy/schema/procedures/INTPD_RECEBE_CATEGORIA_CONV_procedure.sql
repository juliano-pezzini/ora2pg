-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_categoria_conv ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
ie_conversao_w					intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w			intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w				intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w			varchar(15);
reg_integracao_w				gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w					conversao_meio_externo.nr_seq_regra%type;
ds_erro_w						varchar(4000);
ie_erro_w						varchar(1) := 'N';
ie_exception_w					varchar(1) := 'N';
qt_convenio_w					bigint := 0;
qt_categoria_conv_w				bigint := 0;
i								integer;
ie_fisrt_time_w					varchar(1) := 'S';
categoria_convenio_w			categoria_convenio%rowtype;
categoria_convenio_estab_w		categoria_convenio_estab%rowtype;
categoria_convenio_empresa_w	categoria_convenio_empresa%rowtype;
categoria_convenio_broker_w		categoria_convenio_broker%rowtype;
regra_agecons_convenio_w		regra_agecons_convenio%rowtype;
ie_ajustar_ins_upd_w			intpd_eventos_sistema.ie_ajustar_ins_upd%type;
ie_ajustar_upd_ins_w			intpd_eventos_sistema.ie_ajustar_upd_ins%type;

/*
Estrutura

open c01: CATEGORY
|	open C02: ESTABLISHMENT
|	|
|	close c02
|
|	open C03: COMPANY
|	|
|	close c03
|
|	open c04: BROKER
|	|
|	close c04

	open c05: RULE_CONSULT_SCHEDULE
	|
	close c05
close c01
*/
c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/CATEGORY' passing xml_p columns
	ie_action				varchar(40)		path		'IE_ACTION',
	cd_categoria			varchar(10)		path		'CD_CATEGORY',
	cd_convenio				varchar(40)		path		'CD_INSURANCE',
	cd_plano_padrao			varchar(40)		path		'CD_STANDARD_PLAN',
	ds_categoria			varchar(80)		path		'DS_CATEGORY',
	ds_senha_web			varchar(20)		path		'DS_PASSWORD',
	ds_reduzida				varchar(30)		path		'DS_SHORT_DESCRIPTION',
	dt_atualizacao			varchar(14)		path		'DT_UPDATE',
	cd_tipo_acomodacao		varchar(40)		path		'IE_ACCOMMODATION_TYPE',
	ie_idade_dieta			varchar(1)			path		'IE_AGE_DIET',
	ie_permite_gerar_pacote	varchar(1)			path		'IE_ALLOWS_PACKAGE_GENERATED',
	ie_lib_dieta			varchar(15)		path		'IE_COMPANION_DIET_TYPE',
	ie_empresa				varchar(1)			path		'IE_COMPANY',
	ie_ident_atend			varchar(1)			path		'IE_IDENTIFIED_ENCOUNTER',
	ie_preco_custo			varchar(1)			path		'IE_PRICE_COST',
	ie_situacao				varchar(1)			path		'IE_SITUATION',
	nm_usuario				varchar(15)		path		'NM_USER',
	nr_acompanhante			smallint			path		'NR_COMPANION_NUMBER',
	nr_seq_apresentacao		smallint			path		'NR_DISPLAY_SEQUENCE',
	cd_integracao			varchar(20)		path		'NR_EXTERNAL_DOCUMENT',
	qt_idade_menores		smallint			path		'QT_AGE_LESS_THAN',
	qt_idade_maiores		smallint			path		'QT_AGE_GREATER_THAN',
	qt_dieta_acomp			smallint			path		'QT_COMPANION_DIET',
	/*Transforma um subnível da estrutura XML num xmltype, que será utilizado posteriormente na consulta, transformando-o num tipo de tabela*/

	xml_establishments			xml			path		'ESTABLISHMENTS',
	xml_companies				xml			path		'COMPANIES',
	xml_brokers					xml			path		'BROKERS',
	xml_rules_consult_schedule	xml			path		'RULES_CONSULT_SCHEDULE');

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	*
from	xmltable('/ESTABLISHMENTS/ESTABLISHMENT' passing c01_w.xml_establishments columns
	ie_action				varchar(40)		path		'IE_ACTION',
	cd_estabelecimento		varchar(40)		path		'CD_ESTABLISHMENT',
	dt_atualizacao			varchar(14)     	path		'DT_UPDATE',
	nm_usuario				varchar(15)		path		'NM_USER');

c02_w	c02%rowtype;

c03 CURSOR FOR
SELECT	*
from	xmltable('/COMPANIES/COMPANY' passing c01_w.xml_companies columns
	ie_action			varchar(40)		path		'IE_ACTION',
	cd_empresa			varchar(40)		path		'CD_COMPANY',
	dt_atualizacao		varchar(14)		path		'DT_UPDATE',
	nm_usuario			varchar(15)		path		'NM_USER');

c03_w	c03%rowtype;

c04 CURSOR FOR
SELECT	*
from	xmltable('/BROKERS/BROKER' passing c01_w.xml_brokers columns
	ie_action				varchar(40)		path		'IE_ACTION',
	nr_seq_broker			varchar(40)		path		'CD_BROKER',
	dt_atualizacao			varchar(14)		path		'DT_UPDATE',
	nm_usuario				varchar(15)		path		'NM_USER');

c04_w	c04%rowtype;

c05 CURSOR FOR
SELECT	*
from	xmltable('/RULES_CONSULT_SCHEDULE/RULE_CONSULT_SCHEDULE' passing c01_w.xml_rules_consult_schedule columns
	CD_MEDICO				varchar(40)		path		'CD_PHYSICIAN',
	CD_AGENDA				varchar(40)		path		'CD_SCHEDULE',
	CD_ESPECIALIDADE		varchar(40)		path		'CD_SPECIALTY',
	CD_PLANO_CONVENIO		varchar(40)		path		'CD_PLAN',
	CD_ESTABELECIMENTO		varchar(40)		path		'CD_ESTABLISHMENT',
	CD_SETOR_ATENDIMENTO	varchar(40)		path		'CD_CARE_DEPARTMENT',
	IE_FORMA_CONSISTE_SETOR	varchar(40)		path		'IE_RULE_DEPART_VALIDATION',
	IE_PERMITE				varchar(40)		path		'IE_RULE_SCHEDULING',
	NM_USUARIO				varchar(40)		path		'NM_USER',
	DT_ATUALIZACAO			varchar(14)		path		'DT_UPDATE');
c05_w	c05%rowtype;


BEGIN

/*Atualiza o status da fila para Em processamento*/

update	intpd_fila_transmissao
set		ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

commit;

begin

select	coalesce(b.ie_conversao,'I'),
		nr_seq_sistema,
		nr_seq_projeto_xml,
		nr_seq_regra_conv,
		ie_ajustar_ins_upd,
		ie_ajustar_upd_ins
into STRICT	ie_conversao_w,
		nr_seq_sistema_w,
		nr_seq_projeto_xml_w,
		nr_seq_regra_w,
		ie_ajustar_ins_upd_w,
		ie_ajustar_upd_ins_w
from	intpd_fila_transmissao a,
		intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and		a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w						:=	nr_seq_sistema_w;
reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe			:=	'R';
reg_integracao_w.ie_sistema_externo			:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao				:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml			:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao		:=	nr_seq_regra_w;
reg_integracao_w.intpd_log_receb.delete;
reg_integracao_w.qt_reg_log					:=	0;

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	begin

	ie_erro_w						:= 'N';
	reg_integracao_w.nm_tabela		:= 'CATEGORIA_CONVENIO';
	reg_integracao_w.nm_elemento	:= 'CATEGORY';
	reg_integracao_w.nr_seq_visao	:= 27492; /*HTML5 - Swing - CorPes_FC - Categoria*/
	/*	Verificar se existe convênio para então criar, alterar ou excluir a categoria
		Se não localizar, ie_erro_w = 'N' para finalizar o processo*/
	select 	count(*)
	into STRICT	qt_convenio_w
	from 	convenio
	where 	cd_convenio  = c01_w.cd_convenio;

	if (qt_convenio_w = 0) then
		/*Código do convênio inválido ou inexistente no Tasy*/

		intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1009381),'INTPDTASY','0004');
		ie_erro_w := 'S';
	end if;

	if	((coalesce(upper(c01_w.ie_action),'INSERT') = 'DELETE') and (ie_erro_w = 'N')) THEN

		select 	count(*)
		into STRICT	qt_categoria_conv_w
		from 	categoria_convenio
		where 	cd_categoria = c01_w.cd_categoria
		and	cd_convenio  = c01_w.cd_convenio;

		if (qt_categoria_conv_w > 0) then

			begin
			delete	FROM categoria_convenio
			where 	cd_categoria = c01_w.cd_categoria
			and	cd_convenio  = c01_w.cd_convenio;
			exception
			when others then
				update	categoria_convenio
				set	ie_situacao = 'I'
				where 	cd_categoria = c01_w.cd_categoria
				and	cd_convenio  = c01_w.cd_convenio;
			end;
		else
			/*Código da categoria inválido ou inexistente no Tasy para exclusão ou alteração do registro*/

			intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1012147),'INTPDTASY','0004');
			ie_erro_w := 'S';
		end if;

	elsif ((coalesce(upper(c01_w.ie_action),'INSERT') <> 'DELETE') and (ie_erro_w = 'N')) then /*INSERT ou UPDATE*/
		if (coalesce(upper(c01_w.ie_action),'INSERT') = 'UPDATE') then

			select 	count(*)
			into STRICT	qt_categoria_conv_w
			from 	categoria_convenio
			where 	cd_categoria = c01_w.cd_categoria
			and		cd_convenio  = c01_w.cd_convenio;

			if (qt_categoria_conv_w = 0 and upper(ie_ajustar_upd_ins_w) = 'N') then
				/*Se o sistema externo mandar um UPDATE e o registro não existir no Tasy, tem que retornar uma mensagem e abortar o processo.*/

				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1050713),'INTPDTASY','0013');
				ie_erro_w := 'S';
			else
				begin
				/*'Busca o registro atual do Tasy pela PK'
				Esse tratamento foi necessário porque quando é update, o sistema externo só envia as informações alteradas e o restante dos campos eles mandam vazio. Então temos que buscar a informação que já está gravada na tabela.*/
				select	*
				into STRICT	categoria_convenio_w
				from	categoria_convenio
				where 	cd_categoria = c01_w.cd_categoria
				and	cd_convenio  = c01_w.cd_convenio  LIMIT 1;
				exception
				when others then
					null;
				end;
			end if;

		elsif (coalesce(c01_w.ie_action,'INSERT') = 'INSERT') then

			select 	count(*)
			into STRICT	qt_categoria_conv_w
			from 	categoria_convenio
			where 	cd_categoria = c01_w.cd_categoria
			and		cd_convenio  = c01_w.cd_convenio;

			if (qt_categoria_conv_w > 0 and upper(ie_ajustar_ins_upd_w) = 'N') then
				/* Se o sistema externo mandar um INSERT e o registro já existir, tem que retornar uma mensagem e abortar o processo.*/

				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1050712),'INTPDTASY','0014');
				ie_erro_w := 'S';
			end if;

		end if;

		if (ie_erro_w = 'N') then

			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CATEGORIA', c01_w.cd_categoria, 'N', categoria_convenio_w.cd_categoria) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.cd_categoria := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CONVENIO', c01_w.cd_convenio, 'S', categoria_convenio_w.cd_convenio) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.cd_convenio := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_PLANO_PADRAO', c01_w.cd_plano_padrao, 'S', categoria_convenio_w.cd_plano_padrao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.cd_plano_padrao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_CATEGORIA', c01_w.ds_categoria, 'N', categoria_convenio_w.ds_categoria) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ds_categoria := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_SENHA_WEB', c01_w.ds_senha_web, 'N', categoria_convenio_w.ds_senha_web) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ds_senha_web := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_REDUZIDA', c01_w.ds_reduzida, 'N', categoria_convenio_w.ds_reduzida) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ds_reduzida := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c01_w.dt_atualizacao, 'N', categoria_convenio_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_TIPO_ACOMODACAO', c01_w.cd_tipo_acomodacao, 'S', categoria_convenio_w.cd_tipo_acomodacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.cd_tipo_acomodacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_IDADE_DIETA', c01_w.ie_idade_dieta, 'N', categoria_convenio_w.ie_idade_dieta) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ie_idade_dieta := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_PERMITE_GERAR_PACOTE', c01_w.ie_permite_gerar_pacote, 'N', categoria_convenio_w.ie_permite_gerar_pacote) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ie_permite_gerar_pacote := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_LIB_DIETA', c01_w.ie_lib_dieta, 'N', categoria_convenio_w.ie_lib_dieta) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ie_lib_dieta := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_EMPRESA', c01_w.ie_empresa, 'N', categoria_convenio_w.ie_empresa) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ie_empresa := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_IDENT_ATEND', c01_w.ie_ident_atend, 'N', categoria_convenio_w.ie_ident_atend) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ie_ident_atend := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_PRECO_CUSTO', c01_w.ie_preco_custo, 'N', categoria_convenio_w.ie_preco_custo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ie_preco_custo := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_SITUACAO', c01_w.ie_situacao, 'N', categoria_convenio_w.ie_situacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.ie_situacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.nm_usuario, 'N', categoria_convenio_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_ACOMPANHANTE', c01_w.nr_acompanhante, 'N', categoria_convenio_w.nr_acompanhante) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.nr_acompanhante := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_APRESENTACAO', c01_w.nr_seq_apresentacao, 'N', categoria_convenio_w.nr_seq_apresentacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.nr_seq_apresentacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_INTEGRACAO', c01_w.cd_integracao, 'N', categoria_convenio_w.cd_integracao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.cd_integracao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'QT_IDADE_MENORES', c01_w.qt_idade_menores, 'N', categoria_convenio_w.qt_idade_menores) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.qt_idade_menores := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'QT_IDADE_MAIORES', c01_w.qt_idade_maiores, 'N', categoria_convenio_w.qt_idade_maiores) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.qt_idade_maiores := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'QT_DIETA_ACOMP', c01_w.qt_dieta_acomp, 'N', categoria_convenio_w.qt_dieta_acomp) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_w.qt_dieta_acomp := _ora2pg_r.ds_valor_retorno_p;

			if (reg_integracao_w.qt_reg_log = 0) then

				select 	count(*)
				into STRICT	qt_categoria_conv_w
				from 	categoria_convenio
				where 	cd_categoria = categoria_convenio_w.cd_categoria
				and	cd_convenio  = categoria_convenio_w.cd_convenio;

				if (qt_categoria_conv_w > 0) then
					categoria_convenio_w.dt_atualizacao 	:= coalesce(categoria_convenio_w.dt_atualizacao, clock_timestamp());

					update	categoria_convenio
					set	row = categoria_convenio_w
					where 	cd_categoria = categoria_convenio_w.cd_categoria
					and	cd_convenio  = categoria_convenio_w.cd_convenio;
				else

					select 	coalesce(max(somente_numero(cd_categoria)),0) + 1
					into STRICT	categoria_convenio_w.cd_categoria
					from 	categoria_convenio
					where 	cd_convenio  = categoria_convenio_w.cd_convenio;

					insert into categoria_convenio values (categoria_convenio_w.*);

				end if;

				open c02;
				loop
				fetch c02 into
					c02_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					begin
					reg_integracao_w.nm_tabela		:= 'CATEGORIA_CONVENIO_ESTAB';
					reg_integracao_w.nm_elemento	:= 'ESTABLISHMENT';
					reg_integracao_w.nr_seq_visao	:= 15866; /*Swing - CorPes_FC - Estabelecimentos*/
					if (coalesce(upper(c02_w.ie_action),'INSERT') <> 'DELETE') THEN

						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', c02_w.cd_estabelecimento, 'S', categoria_convenio_estab_w.cd_estabelecimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_estab_w.cd_estabelecimento := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c02_w.dt_atualizacao, 'N', categoria_convenio_estab_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_estab_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c02_w.nm_usuario, 'N', categoria_convenio_estab_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_estab_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;

						categoria_convenio_estab_w.cd_convenio	:= categoria_convenio_w.cd_convenio;
						categoria_convenio_estab_w.cd_categoria	:= categoria_convenio_w.cd_categoria;

						if (reg_integracao_w.qt_reg_log = 0) then

							select	max(nr_sequencia)
							into STRICT	categoria_convenio_estab_w.nr_sequencia
							from	categoria_convenio_estab
							where	cd_estabelecimento	= categoria_convenio_estab_w.cd_estabelecimento
							and	cd_categoria 		= categoria_convenio_estab_w.cd_categoria
							and 	cd_convenio  		= categoria_convenio_estab_w.cd_convenio;

							if (coalesce(categoria_convenio_estab_w.nr_sequencia,0) > 0) then
								categoria_convenio_estab_w.dt_atualizacao := coalesce(categoria_convenio_estab_w.dt_atualizacao, clock_timestamp());

								update	categoria_convenio_estab
								set	row		= categoria_convenio_estab_w
								where	nr_sequencia	= categoria_convenio_estab_w.nr_sequencia;
							else
								categoria_convenio_estab_w.nm_usuario_nrec	:= categoria_convenio_estab_w.nm_usuario;
								categoria_convenio_estab_w.dt_atualizacao_nrec	:= clock_timestamp();

								select	nextval('categoria_convenio_estab_seq')
								into STRICT	categoria_convenio_estab_w.nr_sequencia
								;

								insert into categoria_convenio_estab values (categoria_convenio_estab_w.*);
							end if;
						end if;
					else
						select	max(nr_sequencia)
						into STRICT	categoria_convenio_estab_w.nr_sequencia
						from	categoria_convenio_estab
						where	cd_estabelecimento 	= c02_w.cd_estabelecimento
						and	cd_categoria 		= c01_w.cd_categoria
						and 	cd_convenio  		= c01_w.cd_convenio;

						if (coalesce(categoria_convenio_estab_w.nr_sequencia,0) > 0) then
							delete	FROM categoria_convenio_estab
							where	nr_sequencia = categoria_convenio_estab_w.nr_sequencia;
						else
							/*Código do estabelecimento inválido ou inexistente no Tasy para exclusão do registro*/

							intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1012148),'INTPDTASY','0004');
							ie_erro_w := 'S';
						end if;

					end if;
					end;
				end loop;
				close c02;

				open c03;
				loop
				fetch c03 into
					c03_w;
				EXIT WHEN NOT FOUND; /* apply on c03 */
					begin
					reg_integracao_w.nm_tabela		:= 'CATEGORIA_CONVENIO_EMPRESA';
					reg_integracao_w.nm_elemento	:= 'COMPANY';
					reg_integracao_w.nr_seq_visao	:= 97586; /*HTML5 - CorPes_FC - Empresa referência*/
					if (coalesce(upper(c03_w.ie_action),'INSERT') <> 'DELETE') THEN

						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_EMPRESA', c03_w.cd_empresa, 'S', categoria_convenio_empresa_w.cd_empresa) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_empresa_w.cd_empresa := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c03_w.dt_atualizacao, 'N', categoria_convenio_empresa_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_empresa_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c03_w.nm_usuario, 'N', categoria_convenio_empresa_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_empresa_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;

						categoria_convenio_empresa_w.cd_convenio := categoria_convenio_w.cd_convenio;
						categoria_convenio_empresa_w.cd_categoria := categoria_convenio_w.cd_categoria;

						if (reg_integracao_w.qt_reg_log = 0) then

							select	max(nr_sequencia)
							into STRICT	categoria_convenio_empresa_w.nr_sequencia
							from	categoria_convenio_empresa
							where	cd_empresa	= categoria_convenio_empresa_w.cd_empresa
							and	cd_categoria 	= categoria_convenio_empresa_w.cd_categoria
							and 	cd_convenio  	= categoria_convenio_empresa_w.cd_convenio;

							if (coalesce(categoria_convenio_empresa_w.nr_sequencia, 0) > 0) then
								categoria_convenio_empresa_w.dt_atualizacao 	:= coalesce(categoria_convenio_empresa_w.dt_atualizacao, clock_timestamp());

								update	categoria_convenio_empresa
								set	row		= categoria_convenio_empresa_w
								where	nr_sequencia 	= categoria_convenio_empresa_w.nr_sequencia;
							else
								categoria_convenio_empresa_w.nm_usuario_nrec	 := categoria_convenio_empresa_w.nm_usuario;
								categoria_convenio_empresa_w.dt_atualizacao_nrec := clock_timestamp();

								select	nextval('categoria_convenio_empresa_seq')
								into STRICT	categoria_convenio_empresa_w.nr_sequencia
								;

								insert into categoria_convenio_empresa values (categoria_convenio_empresa_w.*);
							end if;
						end if;
					else

						select	max(nr_sequencia)
						into STRICT	categoria_convenio_empresa_w.nr_sequencia
						from	categoria_convenio_empresa
						where	cd_empresa	= c03_w.cd_empresa
						and	cd_categoria 	= c01_w.cd_categoria
						and 	cd_convenio  	= c01_w.cd_convenio;

						if (coalesce(categoria_convenio_empresa_w.nr_sequencia,0) > 0) then
							delete	FROM categoria_convenio_empresa
							where	nr_sequencia	= categoria_convenio_empresa_w.nr_sequencia;
						else
							/*Código da empresa inválido ou inexistente no Tasy para exclusão do registro*/

							intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1012149),'INTPDTASY','0004');
							ie_erro_w := 'S';
						end if;
					end if;

					end;
				end loop;
				close c03;

				open c04;
				loop
				fetch c04 into
					c04_w;
				EXIT WHEN NOT FOUND; /* apply on c04 */
					begin

					reg_integracao_w.nm_tabela		:= 'CATEGORIA_CONVENIO_BROKER';
					reg_integracao_w.nm_elemento	:= 'BROKER';
					reg_integracao_w.nr_seq_visao	:= 97589; /*HTML5 - CorPes_FC - Broker*/
					if (coalesce(upper(c04_w.ie_action),'INSERT') <> 'DELETE') THEN
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_BROKER', c04_w.nr_seq_broker, 'S', categoria_convenio_broker_w.nr_seq_broker) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_broker_w.nr_seq_broker := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c04_w.dt_atualizacao, 'N', categoria_convenio_broker_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_broker_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c04_w.nm_usuario, 'N', categoria_convenio_broker_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; categoria_convenio_broker_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;

						categoria_convenio_broker_w.cd_convenio	:= categoria_convenio_w.cd_convenio;
						categoria_convenio_broker_w.cd_categoria := categoria_convenio_w.cd_categoria;

						if (reg_integracao_w.qt_reg_log = 0) then

							select	max(nr_sequencia)
							into STRICT	categoria_convenio_broker_w.nr_sequencia
							from	categoria_convenio_broker
							where	nr_seq_broker	= categoria_convenio_broker_w.nr_seq_broker
							and	cd_categoria 	= categoria_convenio_broker_w.cd_categoria
							and 	cd_convenio  	= categoria_convenio_broker_w.cd_convenio;

							if (coalesce(categoria_convenio_broker_w.nr_sequencia, 0) > 0) then
								categoria_convenio_broker_w.dt_atualizacao := coalesce(categoria_convenio_broker_w.dt_atualizacao, clock_timestamp());

								update	categoria_convenio_broker
								set	row		= categoria_convenio_broker_w
								where	nr_sequencia 	= categoria_convenio_broker_w.nr_sequencia;
							else
								categoria_convenio_broker_w.nm_usuario_nrec	:= categoria_convenio_broker_w.nm_usuario;
								categoria_convenio_broker_w.dt_atualizacao_nrec	:= clock_timestamp();

								select	nextval('categoria_convenio_broker_seq')
								into STRICT	categoria_convenio_broker_w.nr_sequencia
								;

								insert into categoria_convenio_broker values (categoria_convenio_broker_w.*);
							end if;
						end if;
					else
						select	max(nr_sequencia)
						into STRICT	categoria_convenio_broker_w.nr_sequencia
						from	categoria_convenio_broker
						where	nr_seq_broker	= c04_w.nr_seq_broker
						and	cd_categoria 	= c01_w.cd_categoria
						and 	cd_convenio  	= c01_w.cd_convenio;

						if (coalesce(categoria_convenio_broker_w.nr_sequencia,0) > 0) then
							delete	FROM categoria_convenio_broker
							where	nr_sequencia = categoria_convenio_broker_w.nr_sequencia;
						else
							/*Código do broker inválido ou inexistente no Tasy para exclusão ou alteração do registro.*/

							intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1010175),'INTPDTASY','0004');
							ie_erro_w := 'S';
						end if;
					end if;

					end;
				end loop;
				close c04;


				ie_fisrt_time_w		:= 'S';
				open C05;
				loop
				fetch C05 into
					C05_w;
				EXIT WHEN NOT FOUND; /* apply on C05 */
					begin

					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', C05_w.cd_estabelecimento, 'S', regra_agecons_convenio_w.cd_estabelecimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.cd_estabelecimento := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', C05_w.nm_usuario, 'N', regra_agecons_convenio_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
					regra_agecons_convenio_w.cd_convenio			:= categoria_convenio_w.cd_convenio;
					regra_agecons_convenio_w.cd_categoria			:= categoria_convenio_w.cd_categoria;
					regra_agecons_convenio_w.nm_usuario_nrec		:= regra_agecons_convenio_w.nm_usuario;
					regra_agecons_convenio_w.dt_atualizacao_nrec		:= clock_timestamp();
					regra_agecons_convenio_w.dt_atualizacao			:= clock_timestamp();

					/*O sistema externo sempre vai mandar todas as regras do convenio. Entao deletamos as regras do convenio e criamos de novo.
					Sempre tem que criar uma regra GERAL com IE_PERMITE = N para depois criar as regras com IE_PERMITE = S*/
					if (reg_integracao_w.qt_reg_log = 0) and (ie_fisrt_time_w = 'S') then
						begin

						delete
						from	regra_agecons_conv_grupo
						where	nr_seq_regra_agecons in (
							SELECT	nr_sequencia
							from	regra_agecons_convenio
							where	cd_convenio = categoria_convenio_w.cd_convenio
							and	cd_categoria = categoria_convenio_w.cd_categoria);

						delete
						from	regra_agecons_convenio
						where	cd_convenio = categoria_convenio_w.cd_convenio
						and	cd_categoria = categoria_convenio_w.cd_categoria;

						regra_agecons_convenio_w.ie_forma_consiste_setor 	:= 'A';
						regra_agecons_convenio_w.ie_permite 			:= 'N';

						select	nextval('regra_agecons_convenio_seq')
						into STRICT	regra_agecons_convenio_w.nr_sequencia
						;

						insert into regra_agecons_convenio values (regra_agecons_convenio_w.*);

						ie_fisrt_time_w := 'N';
						end;
					end if;

					reg_integracao_w.nm_tabela		:=	'REGRA_AGECONS_CONVENIO';
					reg_integracao_w.nm_elemento		:=      'RULE_CONSULT_SCHEDULE';
					reg_integracao_w.nr_seq_visao		:=	27655;

					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_MEDICO', C05_w.cd_medico, 'S', regra_agecons_convenio_w.cd_medico) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.cd_medico := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_AGENDA', C05_w.cd_agenda, 'S', regra_agecons_convenio_w.cd_agenda) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.cd_agenda := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESPECIALIDADE', C05_w.cd_especialidade, 'S', regra_agecons_convenio_w.cd_especialidade) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.cd_especialidade := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_PLANO_CONVENIO', C05_w.cd_plano_convenio, 'S', regra_agecons_convenio_w.cd_plano_convenio) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.cd_plano_convenio := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', C05_w.cd_estabelecimento, 'S', regra_agecons_convenio_w.cd_estabelecimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.cd_estabelecimento := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_SETOR_ATENDIMENTO', C05_w.cd_setor_atendimento, 'S', regra_agecons_convenio_w.cd_setor_atendimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.cd_setor_atendimento := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_FORMA_CONSISTE_SETOR', C05_w.ie_forma_consiste_setor, 'N', regra_agecons_convenio_w.ie_forma_consiste_setor) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.ie_forma_consiste_setor := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_PERMITE', C05_w.ie_permite, 'N', regra_agecons_convenio_w.ie_permite) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.ie_permite := _ora2pg_r.ds_valor_retorno_p;
					SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', C05_w.nm_usuario, 'N', regra_agecons_convenio_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; regra_agecons_convenio_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;

					if (reg_integracao_w.qt_reg_log = 0) then
						begin
						select	nextval('regra_agecons_convenio_seq')
						into STRICT	regra_agecons_convenio_w.nr_sequencia
						;

						insert into regra_agecons_convenio values (regra_agecons_convenio_w.*);
						end;
					end if;
					end;
				end loop;
				close C05;

			end if;
		end if;
	end if;
	end;
end loop;
close c01;

exception
when others then
	begin
	ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
	rollback;

	update	intpd_fila_transmissao
	set	ie_status 	 	= 'E',
		cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
		ds_log 		= ds_erro_w,
		nr_doc_externo	= c01_w.cd_integracao
	where	nr_sequencia 	= nr_sequencia_p;

	ie_exception_w := 'S';

	end;
end;

if (ie_exception_w = 'N') then

	if	((reg_integracao_w.qt_reg_log > 0) or (coalesce(ie_erro_w,'N') = 'S')) then
		begin
		rollback;

		update	intpd_fila_transmissao
		set	ie_status 	 	= 'E',
			cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
			ds_log 		= ds_erro_w,
			nr_doc_externo	= c01_w.cd_integracao
		where	nr_sequencia 	= nr_sequencia_p;

		for i in 0..reg_integracao_w.qt_reg_log-1 loop
			intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY',reg_integracao_w.intpd_log_receb[i].cd_default_message);
		end loop;
		end;
	else
		update	intpd_fila_transmissao
		set	ie_status 	 		= 'S',
			cd_default_message 	= '0000',
			nr_seq_documento	 	= c01_w.cd_convenio,
			nr_seq_item_documento	= coalesce(categoria_convenio_w.cd_categoria, c01_w.cd_categoria),
			nr_doc_externo		= c01_w.cd_integracao
		where	nr_sequencia	 	= nr_sequencia_p;
	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_categoria_conv ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

