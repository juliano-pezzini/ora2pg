-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nf_paciente_pagador ( nr_interno_conta_p bigint, nr_seq_nf_pagador_p bigint, nr_atendimento_p bigint, cd_estabelecimento_p bigint, dt_emissao_p timestamp, dt_base_vencimento_p timestamp, cd_pessoa_fisica_p text, cd_serie_nf_p text, cd_nat_oper_nf_p text, cd_operacao_nf_p bigint, cd_condicao_pagamento_p bigint, ds_complemento_p text, nr_nota_fiscal_p text, ds_observacao_p text, nr_seq_classif_fiscal_p bigint, nr_seq_sit_trib_p bigint, cd_setor_atendimento_p bigint, nm_usuario_p text, nr_sequencia_p INOUT bigint) AS $body$
DECLARE


cd_procedimento_w		bigint;
cd_material_w			bigint;
qt_material_w			double precision;
vl_unitario_w			double precision;
vl_total_item_w			double precision;
ie_origem_proced_w		bigint;
cd_estab_nota_fiscal_w		bigint;
cd_serie_nf_w			nota_fiscal.cd_serie_nf%type;
cd_perfil_w			bigint;
cd_convenio_w			bigint;
nr_atendimento_w			bigint;
vl_mercadoria_w			double precision;
vl_total_nota_w			double precision;
nr_sequencia_nf_w			bigint;
ie_tipo_nota_w			varchar(3);
cd_cgc_emitente_w		varchar(14);
cd_cgc_w			varchar(14);
ie_tipo_atendimento_w		smallint;
qt_existe_w			bigint;
ie_nf_guia_partic_w			varchar(1);
ie_calcula_nf_w			varchar(1);
ie_conta_financ_nf_w		varchar(255);
ie_nf_conta_canc_w		varchar(5);
ie_tipo_convenio_w			bigint;
qt_conta_cancelada_w		bigint;
ie_calcula_nf_conv_w		varchar(1);
ie_atualiza_serie_nf_saida_w		varchar(15);
nr_sequencia_w			bigint;
dt_emissao_w			timestamp;
ds_erro_w			varchar(4000);
cd_evento_nf_w			bigint;
ds_historico_nf_w			varchar(255);
nr_contas_w			bigint;
cd_conta_financ_w			bigint;
ie_tipo_conta_w			bigint;
cd_conta_contabil_w		varchar(20);
cd_centro_custo_w			bigint;
cd_operacao_estoque_w		bigint;
cd_unidade_medida_compra_w	varchar(30);
cd_unidade_medida_estoque_w	varchar(30);
nr_item_nf_w			bigint;
ie_regra_calcula_nf_w		varchar(1);
nr_nota_fiscal_w			varchar(255);
ie_numero_nota_w			varchar(1);
qt_reg_w				bigint;
nr_sequencia_nf_ww		bigint;
ie_estab_serie_nf_w		parametro_compras.ie_estab_serie_nf%type;

c01 CURSOR FOR
SELECT	cd_procedimento,
	cd_material,
	qt_material,
	vl_unitario,
	vl_total_item,
	ie_origem_proced
from	conta_paciente_nf_pag_item
where	nr_seq_registro = nr_seq_nf_pagador_p;


BEGIN

cd_estab_nota_fiscal_w		:= cd_estabelecimento_p;
cd_serie_nf_w			:= cd_serie_nf_p;
cd_perfil_w			:= obter_perfil_ativo;
nr_atendimento_w			:= nr_atendimento_p;
vl_mercadoria_w			:= 0;
vl_total_nota_w			:= 0;
nr_sequencia_nf_w			:= 9;
ie_tipo_nota_w			:= 'SF';
nr_nota_fiscal_w			:= nr_nota_fiscal_p;

select	cd_cgc
into STRICT	cd_cgc_emitente_w
from	estabelecimento
where	cd_estabelecimento = cd_estab_nota_fiscal_w;

/* obter se será considerado estabelecimento no parâmetro de compras */

select	coalesce(max(ie_estab_serie_nf),'N')
into STRICT	ie_estab_serie_nf_w
from	parametro_compras
where	cd_estabelecimento = cd_estab_nota_fiscal_w;

select	cd_convenio_parametro
into STRICT	cd_convenio_w
from	conta_paciente
where	nr_interno_conta = nr_interno_conta_p;

select	coalesce(max(ie_tipo_atendimento),0)
into STRICT	ie_tipo_atendimento_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_w;

select	count(*)
into STRICT	qt_existe_w
from	convenio_estabelecimento
where	cd_estabelecimento = cd_estab_nota_fiscal_w
and	cd_convenio = cd_convenio_w
and	(cd_cnpj_conv_estab IS NOT NULL AND cd_cnpj_conv_estab::text <> '');


cd_cgc_w := cd_cgc_emitente_w;
if (qt_existe_w > 0) then
	select	coalesce(max(cd_cnpj_conv_estab),cd_cgc_w)
	into STRICT	cd_cgc_w
	from	convenio_estabelecimento
	where	cd_estabelecimento	= cd_estab_nota_fiscal_w
	and	cd_convenio		= cd_convenio_w;
end if;

select	coalesce(max(ie_nf_guia_partic),'S'),
	coalesce(max(ie_calcula_nf),'N'),
	coalesce(max(ie_conta_financ_nf), 'N'),
	coalesce(max(ie_nf_conta_canc),'S')
into STRICT	ie_nf_guia_partic_w,
	ie_calcula_nf_w,
	ie_conta_financ_nf_w,
	ie_nf_conta_canc_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estab_nota_fiscal_w;

if (trunc(dt_emissao_p) > trunc(clock_timestamp())) then
	--(-20011,'A data de emissão da nota não pode ser maior que a data atual!' || '#@#@');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173206);
end if;


begin
select	ie_tipo_convenio
into STRICT	ie_tipo_convenio_w	
from	convenio
where	cd_convenio = cd_convenio_w;
exception when others then
	--(-20011,	'Falta informar os parâmetros para geração da Nota Fiscal, para o convênio informado nesta conta paciente. ' ||

	--	'Esses parâmetros devem ser cadastrados na função Cadastro de Convênio Preços e Regras, pasta Regras, subpasta Nota Fiscal.');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173207);
end;

if (coalesce(nr_interno_conta_p, 0) <> 0) then

	select	count(*)
	into STRICT	qt_conta_cancelada_w
	from	conta_paciente
	where	nr_interno_conta	= nr_interno_conta_p
	and	ie_cancelamento	= 'C';

	if (coalesce(ie_nf_conta_canc_w,'S') = 'N') and (qt_conta_cancelada_w > 0) then
		---20011,'Esta conta está cancelada!');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173211);
	end if;	
end if;

select	coalesce(max(ie_calcular_nf),'N'),
	coalesce(max(ie_atualiza_serie_nf_saida),'S')
into STRICT	ie_calcula_nf_conv_w,
	ie_atualiza_serie_nf_saida_w
from	convenio_estabelecimento
where	cd_convenio		= cd_convenio_w
and	cd_estabelecimento	= cd_estab_nota_fiscal_w;

begin
select	nextval('nota_fiscal_seq')
into STRICT	nr_sequencia_w
;

dt_emissao_w	:= to_date(to_char(dt_emissao_p, 'dd/mm/yyyy') || ' ' || to_char(clock_timestamp(), 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');

insert into nota_fiscal(
	nr_sequencia,
	cd_estabelecimento,
	cd_cgc_emitente,
	cd_serie_nf,
	nr_nota_fiscal,
	nr_sequencia_nf,
	cd_operacao_nf,
	dt_emissao,
	dt_entrada_saida,
	ie_acao_nf,
	ie_emissao_nf,
	ie_tipo_frete,
	vl_mercadoria,
	vl_total_nota,
	qt_peso_bruto,
	qt_peso_liquido,
	dt_atualizacao,
	nm_usuario,
	cd_condicao_pagamento,
	cd_cgc,
	cd_pessoa_fisica,
	vl_ipi,
	vl_descontos,
	vl_frete,
	vl_seguro,
	vl_despesa_acessoria,
	ds_observacao,
	cd_natureza_operacao,
	vl_desconto_rateio,
	ie_situacao,
	nr_interno_conta,
	nr_seq_protocolo,
	nr_seq_classif_fiscal,
	ie_tipo_nota,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	cd_setor_digitacao,
	nr_seq_nf_pagador)
values (	nr_sequencia_w,
	cd_estab_nota_fiscal_w,
	cd_cgc_emitente_w,
	cd_serie_nf_w,
	nr_nota_fiscal_w,
	nr_sequencia_nf_w,
	cd_operacao_nf_p,
	dt_emissao_w,
	dt_emissao_p,
	'1',
	'0',
	'0',
	vl_mercadoria_w,
	vl_total_nota_w,
	0,
	0,
	clock_timestamp(),
	nm_usuario_p,
	cd_condicao_pagamento_p,
	null,
	cd_pessoa_fisica_p,
	0,
	0,
	0,
	0,
	0,
	ds_observacao_p,
	cd_nat_oper_nf_p,
	0,
	'1',
	nr_interno_conta_p,
	null,
	nr_seq_classif_fiscal_p,
	ie_tipo_nota_w,
	clock_timestamp(),
	nm_usuario_p,
	cd_setor_atendimento_p,
	nr_seq_nf_pagador_p);
exception
	when others then
		ds_erro_w	:= sqlerrm(SQLSTATE);
		/*(-20011,'Erro ao Gravar Corpo da Nota Fiscal' || chr(10) || 
		'estab: ' ||cd_estab_nota_fiscal_w||
		'cgc: '   || cd_cgc_emitente_w 	||
		'serie: ' || cd_serie_nf_w 	||
		'nota: '  || nr_nota_fiscal_w 	||
		'seq: '   || nr_sequencia_nf_w  || chr(10) ||
		ds_erro_w);*/
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173250,
							'CD_ESTAB_NOTA_FISCAL_W='||cd_estab_nota_fiscal_w||';'||
							'CD_CGC_EMITENTE_W='||cd_cgc_emitente_w||';'||
							'CD_SERIE_NF_W='||cd_serie_nf_w||';'||
							'NR_NOTA_FISCAL_W='||nr_nota_fiscal_w||';'||
							'NR_SEQUENCIA_NF_W='||nr_sequencia_nf_w||';'||
							'DS_ERRO_W='||ds_erro_w);
		
end;

cd_evento_nf_w		:= 15;
select	Wheb_mensagem_pck.get_Texto(307133, 'VL_CONTA_W='|| obter_valor_conta(nr_interno_conta_p,0)) /*'Digitação da nota. ' || 'Valor da conta: ' || obter_valor_conta(nr_interno_conta_p,0)*/
into STRICT	ds_historico_nf_w
;


CALL gerar_historico_nota_fiscal(nr_sequencia_w, nm_usuario_p, cd_evento_nf_w, ds_historico_nf_w);

insert into conta_paciente_nf(
	nr_interno_conta,
	nr_sequencia,
	dt_atualizacao,
	nm_usuario,
	cd_perfil)
	SELECT	nr_interno_conta,
		nr_sequencia_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_perfil_w
	from	conta_paciente
	where	nr_interno_conta = nr_interno_conta_p
	
union

	SELECT	a.nr_interno_conta,
		nr_sequencia_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_perfil_w
	from	conta_paciente a
	where	a.ie_status_acerto 	=  2
	and	a.nr_atendimento 	= nr_atendimento_w
	and	a.cd_convenio_parametro	= cd_convenio_w
	and	(nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '');

select	count(*)
into STRICT	nr_contas_w
from	conta_paciente_nf
where	nr_sequencia = nr_sequencia_w;
if (nr_contas_w = 0) then
	--(-20011,'Nenhuma conta foi associada');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173251);
end if;

open C01;
loop
fetch C01 into	
	cd_procedimento_w,
	cd_material_w,
	qt_material_w,
	vl_unitario_w,
	vl_total_item_w,
	ie_origem_proced_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	if (ie_conta_financ_nf_w = 'S') then
				
		cd_conta_financ_w := obter_conta_financeira(	'E', cd_estab_nota_fiscal_w, cd_material_w, cd_procedimento_w, ie_origem_proced_w, null, cd_convenio_w, cd_cgc_w, cd_centro_custo_w, cd_conta_financ_w, null, cd_operacao_nf_p, null, ie_tipo_atendimento_w, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
		end if;
	
	if (coalesce(cd_procedimento_w,0) <> 0) and (coalesce(ie_origem_proced_w,0) <> 0) then
		begin
					
		ie_tipo_conta_w		:= 2;					
		SELECT * FROM Define_Conta_Procedimento(	cd_estab_nota_fiscal_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_conta_w, null, cd_setor_atendimento_p, null, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, null, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null, 'N') INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
						
		end;
	end if;
	
	if (coalesce(cd_material_w,0) <> 0) then
		begin
		
		select	coalesce(max(cd_operacao_estoque),0)
		into STRICT	cd_operacao_estoque_w
		from	operacao_nota
		where	cd_operacao_nf = cd_operacao_nf_p;
		
		
		ie_tipo_conta_w		:= 2;					
		SELECT * FROM define_conta_material(
					cd_estab_nota_fiscal_w, cd_material_w, ie_tipo_conta_w, null, cd_setor_atendimento_p, 0, ie_tipo_atendimento_w, ie_tipo_convenio_w, cd_convenio_w, null, 0, cd_operacao_estoque_w, trunc(clock_timestamp()), cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
		end;
	end if;
	
	cd_unidade_medida_compra_w	:= '';
	cd_unidade_medida_estoque_w	:= '';
	if (cd_material_w > 0) then
		select	cd_unidade_medida_compra,			
			cd_unidade_medida_estoque
		into STRICT	cd_unidade_medida_compra_w,
			cd_unidade_medida_estoque_w
		from	material
		where	cd_material = cd_material_w;
	end if;
	
	if (cd_conta_financ_w = 0) then
		cd_conta_financ_w := null;
	end if;
	
	select 	coalesce(max(nr_item_nf),0)+1
	into STRICT	nr_item_nf_w
	from	nota_fiscal_item
	where 	nr_sequencia = nr_sequencia_w;
	
	insert into nota_fiscal_item(
		nr_sequencia,
		cd_estabelecimento,
		cd_cgc_emitente,
		cd_serie_nf,
		nr_nota_fiscal,
		nr_sequencia_nf,
		nr_item_nf,
		cd_natureza_operacao,
		dt_atualizacao,
		nm_usuario,
		qt_item_nf,
		vl_unitario_item_nf,
		vl_total_item_nf,
		vl_frete,
		vl_desconto,
		vl_despesa_acessoria,
		vl_desconto_rateio,
		vl_seguro,
		vl_liquido,
		cd_material,
		cd_procedimento,
		ie_origem_proced,
		cd_local_estoque,
		ds_observacao,
		nr_seq_conta_financ,
		ds_complemento,
		nr_atendimento,
		cd_conta_contabil,
		cd_centro_custo,
		cd_unidade_medida_compra,
		cd_unidade_medida_estoque,
		cd_sequencia_parametro)
	values (	nr_sequencia_w,
		cd_estab_nota_fiscal_w,
		cd_cgc_emitente_w,
		cd_serie_nf_w,
		nr_nota_fiscal_w,
		nr_sequencia_nf_w,
		nr_item_nf_w,
		cd_nat_oper_nf_p,
		clock_timestamp(),
		nm_usuario_p,
		qt_material_w,
		vl_unitario_w,
		vl_total_item_w,
		0,
		0,
		0,
		0,
		0,
		vl_total_item_w,
		cd_material_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		null,
		substr(ds_observacao_p,1,255),
		cd_conta_financ_w,
		ds_complemento_p,
		nr_atendimento_w,
		cd_conta_contabil_w,
		cd_centro_custo_w,
		cd_unidade_medida_compra_w,
		cd_unidade_medida_estoque_w,
		philips_contabil_pck.get_parametro_conta_contabil);
	
	end;
end loop;
close C01;



ie_regra_calcula_nf_w := obter_param_usuario(-80, 27, obter_perfil_ativo, nm_usuario_p, cd_estab_nota_fiscal_w, ie_regra_calcula_nf_w);

/* locar a tabela e obter o numero da nota fiscal */

lock table serie_nota_fiscal in exclusive mode;

select	nr_ultima_nf + 1,
	ie_numero_nota
into STRICT	nr_nota_fiscal_w,
	ie_numero_nota_w
from	serie_nota_fiscal
where	cd_serie_nf 		= cd_serie_nf_w
and	cd_estabelecimento 	= cd_estab_nota_fiscal_w;

if (nr_nota_fiscal_p <> '0') then
	nr_nota_fiscal_w	:= nr_nota_fiscal_p;
end if;

select	count(*)
into STRICT	qt_reg_w
from	nota_fiscal_aidf
where	cd_estabelecimento 	= cd_estab_nota_fiscal_w
and	cd_serie_nf 		= cd_serie_nf_w;

if (qt_reg_w > 0) then
	select	count(*)
	into STRICT	qt_reg_w
	from	nota_fiscal_aidf
	where	cd_estabelecimento 	= cd_estab_nota_fiscal_w
	and	cd_serie_nf 		= cd_serie_nf_w
	and	nr_nota_fiscal_w >= nr_nota_ini
	and 	nr_nota_fiscal_w <= nr_nota_fim;
	
	if (qt_reg_w = 0) then
		--(-20011,	'Sem autorização para informar este número de nota fiscal (' || nr_nota_fiscal_w || '), ' || chr(10) || chr(13) || 

		--	'verifique o cadastro de autorizações(AIDF) nos cadastros de estoque.');
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173255,'NR_NOTA_FISCAL_W='||nr_nota_fiscal_w);
	end if;
end if;

if (ie_atualiza_serie_nf_saida_w = 'S') then
	
	if (ie_numero_nota_w = 'T') and (cd_setor_atendimento_p > 0) then
			
		select	count(*)
		into STRICT	qt_reg_w
		from	serie_nota_fiscal_setor
		where	cd_serie_nf = cd_serie_nf_w
		and	cd_Estabelecimento = cd_estab_nota_fiscal_w
		and	cd_setor_atendimento = cd_setor_atendimento_p;
			
		if (qt_reg_w > 0) then				
			select	nr_ultima_nf +1
			into STRICT	nr_nota_fiscal_w
			from	serie_nota_fiscal_setor
			where	cd_serie_nf = cd_serie_nf_w
			and	cd_Estabelecimento = cd_estab_nota_fiscal_w
			and	cd_setor_atendimento = cd_setor_atendimento_p;
			
			
			if	((coalesce(ie_regra_calcula_nf_w,'D') = 'S') or
				((coalesce(ie_regra_calcula_nf_w,'D') = 'D') and (ie_calcula_nf_w = 'S')) or
				((coalesce(ie_regra_calcula_nf_w,'D') = 'C') and (ie_calcula_nf_conv_w = 'S'))) then
				update	serie_nota_fiscal_setor
				set	nr_ultima_nf 		= nr_nota_fiscal_w
				where	cd_serie_nf 		= cd_serie_nf_w
				and	cd_estabelecimento 	= cd_estab_nota_fiscal_w
				and	cd_setor_atendimento	= cd_setor_atendimento_p;
			end if;
		end if;	
	else	
		
		if (coalesce(ie_estab_serie_nf_w,'N') = 'S') then
			update	serie_nota_fiscal
			set	nr_ultima_nf 		= nr_nota_fiscal_w
			where	cd_serie_nf 		= cd_serie_nf_w
			and	cd_estabelecimento in (SELECT	z.cd_estabelecimento
							from	estabelecimento z
							where	z.cd_cgc = cd_cgc_emitente_w);
		else
			update	serie_nota_fiscal
			set	nr_ultima_nf 		= nr_nota_fiscal_w
			where	cd_serie_nf 		= cd_serie_nf_w
			and	cd_estabelecimento 	= cd_estab_nota_fiscal_w;
		end if;
	end if;
end if;

/* atualizar os totais da nota fiscal */

begin

select	sum(vl_total_item)
into STRICT	vl_total_item_w
from	conta_paciente_nf_pag_item
where	nr_Seq_registro = nr_seq_nf_pagador_p;

select 	coalesce(max(nr_sequencia_nf),0)+1
into STRICT	nr_sequencia_nf_ww
from 	nota_fiscal
where	nr_nota_fiscal 		= nr_nota_fiscal_w
and	cd_estabelecimento 	= cd_estab_nota_fiscal_w
and	cd_serie_nf 		= cd_serie_nf_w
and	cd_cgc_emitente		= cd_cgc_emitente_w;

update	nota_fiscal
set	vl_mercadoria	= vl_total_item_w,
	vl_total_nota	= vl_total_item_w,
	vl_descontos	= 0,
	vl_ipi		= 0,
	nr_nota_fiscal	= nr_nota_fiscal_w,
	nr_sequencia_nf	= nr_sequencia_nf_ww
where	nr_sequencia 	= nr_sequencia_w;

update	nota_fiscal_item
set	nr_nota_fiscal	= nr_nota_fiscal_w
where	nr_sequencia 	= nr_sequencia_w;
exception when others then
	/*(-20011,'Erro na atualização da NF. Verifique se não há nota gerada com os seguintes dados!' || chr(10) || 
		'Estab: ' ||cd_estab_nota_fiscal_w || chr(10) ||
		'Cgc: '   || cd_cgc_emitente_w || chr(10) ||
		'Serie: ' || cd_serie_nf_w || chr(10) ||
		'Nota: '  || nr_nota_fiscal_w || chr(10) ||
		'Seq: '   || nr_sequencia_nf_w);*/
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173256,
						'CD_ESTAB_NOTA_FISCAL_W='||cd_estab_nota_fiscal_w||';'||
						'CD_CGC_EMITENTE_W='||cd_cgc_emitente_w||';'||
						'CD_SERIE_NF_W='||cd_serie_nf_w||';'||
						'NR_NOTA_FISCAL_W='||nr_nota_fiscal_w||';'||
						'NR_SEQUENCIA_NF_W='||nr_sequencia_nf_w);
end;

/* atualizar a guia da conta */

if (ie_nf_guia_partic_w = 'S') and (nr_interno_conta_p IS NOT NULL AND nr_interno_conta_p::text <> '') then
	begin

	update	procedimento_paciente
	set	nr_doc_convenio		= substr(nr_nota_fiscal_w,1,20)
	where	nr_interno_conta	= nr_interno_conta_p;

	update	material_atend_paciente
	set	nr_doc_convenio		= substr(nr_nota_fiscal_w,1,20)
	where	nr_interno_conta	= nr_interno_conta_p;

	update	titulo_receber
	set	nr_documento		= substr(nr_nota_fiscal_w,1,20)
	where	nr_interno_conta	= nr_interno_conta_p;

	CALL gerar_conta_paciente_guia(nr_interno_conta_p, 2);
	end;
end if;

if (coalesce(nr_interno_conta_p,0) > 0) then
	update	titulo_receber
	set	nr_nota_fiscal		= nr_nota_fiscal_w,
		nr_seq_nf_saida		= nr_sequencia_w
	where	nr_interno_conta	= nr_interno_conta_p
	and	coalesce(nr_nota_fiscal, '0') = '0';	
end if;

CALL gerar_imposto_nf(nr_sequencia_w, nm_usuario_p, nr_seq_sit_trib_p, null);
CALL atualiza_total_nota_fiscal(nr_sequencia_w, nm_usuario_p);
CALL Gerar_Venc_Nota_Fiscal_Pac(nr_sequencia_w, dt_base_vencimento_p);

if	((coalesce(ie_regra_calcula_nf_w,'D') = 'S') or
	((coalesce(ie_regra_calcula_nf_w,'D') = 'D') and (ie_calcula_nf_w = 'S')) or
	((coalesce(ie_regra_calcula_nf_w,'D') = 'C') and (ie_calcula_nf_conv_w = 'S'))) then
	update	nota_fiscal
	set	dt_atualizacao_estoque = clock_timestamp()
	where	nr_sequencia = nr_sequencia_w;
end if;

begin
CALL gerar_conta_contabil_nf(nr_sequencia_w,nm_usuario_p);
exception when others then
	nr_sequencia_w	:= nr_sequencia_w;
end;

nr_sequencia_p		:= nr_sequencia_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nf_paciente_pagador ( nr_interno_conta_p bigint, nr_seq_nf_pagador_p bigint, nr_atendimento_p bigint, cd_estabelecimento_p bigint, dt_emissao_p timestamp, dt_base_vencimento_p timestamp, cd_pessoa_fisica_p text, cd_serie_nf_p text, cd_nat_oper_nf_p text, cd_operacao_nf_p bigint, cd_condicao_pagamento_p bigint, ds_complemento_p text, nr_nota_fiscal_p text, ds_observacao_p text, nr_seq_classif_fiscal_p bigint, nr_seq_sit_trib_p bigint, cd_setor_atendimento_p bigint, nm_usuario_p text, nr_sequencia_p INOUT bigint) FROM PUBLIC;

