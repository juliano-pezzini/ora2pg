-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE duv_integrar_retorno (nr_seq_lote_p duv_lote_retorno.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_mensagem_w	duv_mensagem.nr_sequencia%type;
qt_pendente_w		bigint;

c01 CURSOR FOR
SELECT	*
from	duv_retorno
where	nr_seq_lote			= nr_seq_lote_p
and		coalesce(dt_integracao_mens::text, '') = '';

c02 CURSOR(nr_seq_retorno_cp 	duv_retorno_erro.nr_seq_retorno%type) FOR
SELECT	*
from	duv_retorno_erro
where	nr_seq_retorno	= nr_seq_retorno_cp;
BEGIN

for r_c01_w in c01 loop

	select	max(b.nr_sequencia)
	into STRICT	nr_seq_mensagem_w
	from	duv_mensagem b,
		duv_arquivo a
	where	a.nr_sequencia	= b.nr_seq_arquivo
	and	lower(a.ds_arquivo)	like lower('%' || r_c01_w.ds_arquivo || '.xml%');

	if (nr_seq_mensagem_w IS NOT NULL AND nr_seq_mensagem_w::text <> '') then

		if (r_c01_w.ie_status = 0) then
			update	duv_mensagem
			set	ie_status		= '6'
			where	nr_sequencia		= nr_seq_mensagem_w;
		else
			update	duv_mensagem
			set	ie_status		= '5'
			where	nr_sequencia		= nr_seq_mensagem_w;

			insert	into duv_inconsistencia(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_tipo,
				cd_erro,
				ds_erro,
				nr_seq_mensagem,
				nr_seq_mens_seg)
			values (nextval('duv_inconsistencia_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				null,
				r_c01_w.ie_status,
				obter_valor_dominio(8727, r_c01_w.ie_status),
				nr_seq_mensagem_w,
				null);

			for	r_c02_w in c02(r_c01_w.nr_sequencia) loop

				insert	into duv_inconsistencia(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_tipo,
					cd_erro,
					ds_erro,
					nr_seq_mensagem,
					nr_seq_mens_seg)
				values (nextval('duv_inconsistencia_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					null,
					r_c02_w.cd_erro,
					substr(r_c02_w.ds_erro || chr(13) || r_c02_w.DS_TAG_ERRO || chr(13) || r_c02_w.DS_CAMPO_INCORRETO,1,4000),
					nr_seq_mensagem_w,
					null);

			end loop;

		end if;

		update	duv_mensagem
		set	nm_usuario		= nm_usuario_p,
			nr_seq_retorno		= r_c01_w.nr_sequencia,
			dt_retorno		= clock_timestamp()
		where	nr_sequencia		= nr_seq_mensagem_w;
	end if;

end loop;

select	count(*)
into STRICT	qt_pendente_w
from	duv_retorno a
where	a.nr_seq_lote			= nr_seq_lote_p
and		not exists (SELECT	1
					from	duv_mensagem x
					where	x.nr_seq_retorno		= a.nr_sequencia);

if (qt_pendente_w > 0) then
	update	duv_lote_retorno
	set	ie_status		= '2',
		nm_usuario		= nm_usuario_p
	where	nr_sequencia	= nr_seq_lote_p;
else
	update	duv_lote_retorno
	set	ie_status		= '3',
		nm_usuario		= nm_usuario_p
	where	nr_sequencia	= nr_seq_lote_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE duv_integrar_retorno (nr_seq_lote_p duv_lote_retorno.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

