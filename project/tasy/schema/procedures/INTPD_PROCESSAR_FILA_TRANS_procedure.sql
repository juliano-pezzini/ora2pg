-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE r_intpd_reg AS (
	nr_sequencia		intpd_fila_transmissao.nr_sequencia%type,
	nr_seq_servidor		intpd_fila_transmissao.nr_seq_servidor%type);


CREATE OR REPLACE PROCEDURE intpd_processar_fila_trans ( qt_reg_proc_p bigint default 0, ie_tipo_agrup_p text default 'D', nr_seq_agrupador_p bigint default null, ds_lista_servidores_p text default null, ds_lista_sistemas_p text default null) AS $body$
DECLARE


ds_param_integ_w		varchar(255);
qt_reg_proc_w		bigint;
qt_processando_w		bigint;
nr_seq_agrupador_w	intpd_fila_transmissao.nr_seq_agrupador%type;
nr_seq_documento_w	intpd_fila_transmissao.nr_seq_documento%type;
ie_operacao_w		intpd_fila_transmissao.ie_operacao%type;
qt_reg_pend_agrup_w	bigint := 0;
nr_seq_servidor_w		servidor_integracao.nr_sequencia%type;
nr_seq_projeto_xml_w	intpd_eventos_sistema.nr_seq_projeto_xml%type;
ds_xml_w			text;
nr_Seq_log_w		tasy_xml_banco.nr_sequencia%type;
ie_conversao_w		intpd_eventos_sistema.ie_conversao%type;
ds_parametros_w		varchar(4000);
ie_contem_superior_w	bigint;
ie_ish_w		varchar(1);

type t_intpd_reg is table of r_intpd_reg index by integer;

t_intpd_reg_w	t_intpd_reg;

i		integer;
ie_integrar_w	varchar(1);
qt_integrado_w	bigint;
qt_serv_pool_w	bigint	:=	0;
qt_sistemas_w	bigint	:=	0;

C00 CURSOR FOR
SELECT	a.nr_sequencia,
	a.nr_seq_servidor
from	intpd_fila_transmissao a
where	ie_envio_recebe in ('E', 'C')
and	ie_status in ('P','A','AP','AS','AEX')
and (coalesce(nr_seq_agrupador_w::text, '') = '' or nr_seq_agrupador = nr_seq_agrupador_w)
and	qt_sistemas_w = 0

union all

SELECT	a.nr_sequencia,
	a.nr_seq_servidor
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.ie_envio_recebe in ('E', 'C')
and	a.ie_status in ('P','A','AP','AS','AEX')
and (coalesce(nr_seq_agrupador_w::text, '') = '' or a.nr_seq_agrupador = nr_seq_agrupador_w)
and	substr(obter_se_contido(b.nr_seq_sistema, ds_lista_servidores_p), 1, 1) = 'S'
and	qt_sistemas_w > 0
order by nr_sequencia;

c00_w	c00%rowtype;

c06 CURSOR FOR
SELECT	a.nr_sequencia
from	intpd_fila_transmissao a,
	intpd_eventos_regra_auto b
where	a.nr_seq_evento_sistema = b.nr_seq_evento_sistema
and	a.ie_envio_recebe in ('E', 'C')
and	a.ie_tipo_erro = 'T'
and (coalesce(b.ie_without_generated_content,'N') = 'N' or (coalesce(b.ie_without_generated_content,'N') = 'S' and coalesce(a.ds_message::text, '') = '' and coalesce(a.ds_xml::text, '') = ''))
and	coalesce(a.qt_tentativa, 0) < b.qt_tentativas 
and	obter_dif_data(a.dt_status, clock_timestamp(), 'TMS')/60 >= b.qt_min_retransmissao
and	a.nr_seq_agrupador = coalesce(nr_seq_agrupador_w, a.nr_seq_agrupador);

c06_w	c06%rowtype;

c07 CURSOR FOR
SELECT	nr_sequencia
from	intpd_fila_transmissao b
where	b.ie_envio_recebe in ('E', 'C')
and	b.ie_status = 'R'
and	b.nr_seq_agrupador = coalesce(nr_seq_agrupador_w, b.nr_seq_agrupador)
and	b.nr_sequencia in (
	SELECT	somente_numero(a.ds_parametros)
	from	agendamento_integracao a
	where	a.nr_seq_evento = 614
	and	a.ie_status = 'E'
	and	a.nr_sequencia = (	select	max(x.nr_sequencia)
				from	agendamento_integracao x
				where	a.nr_seq_evento = x.nr_seq_evento
				and	a.ds_parametros = x.ds_parametros));
c07_w	c07%rowtype;

/*messages that have got deadlock error*/

C08 CURSOR FOR
SELECT	a.nr_sequencia
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.ie_status = 'E'
and	coalesce(a.qt_tentativa, 0) < 10
and	obter_se_integracao_ish(b.nr_seq_projeto_xml) = 'S'
and	a.ds_log like '%ORA-00060%'
order by a.nr_sequencia;

c08_w	c08%rowtype;
C10 CURSOR FOR
SELECT	nr_sequencia
from	servidor_integracao
where	ie_servidor = 'O'
and	substr(Obter_Se_Contido(nr_sequencia, ds_lista_servidores_p),1,1) = 'S';

c10_w	c10%rowtype;


BEGIN
CALL gerar_int_padrao.set_servidor(null, null, null, 'S');
	
--tratamento para atualizar os registros que ficaram 'Em processamento'
if (qt_reg_proc_p > 0) then
	CALL INTPD_ATUALIZAR_PROCESSAMENTO(qt_reg_proc_p);
end if;

if (nr_seq_agrupador_p > 0) then
	begin
	nr_seq_agrupador_w	:=	nr_seq_agrupador_p;
	
	begin
	select	1
	into STRICT	qt_reg_pend_agrup_w
	from	intpd_fila_transmissao
	where	ie_envio_recebe in ('E', 'C')
	and	nr_seq_agrupador = nr_seq_agrupador_w
	and	ie_status = 'AP'  LIMIT 1;	
	exception
	when others then
		qt_reg_pend_agrup_w	:=	0;
	end;
	end;
end if;

begin
select	count(1)
into STRICT	qt_sistemas_w
from	intpd_sistemas a
where	substr(Obter_Se_Contido(a.nr_sequencia, ds_lista_servidores_p),1,1) = 'S';
exception
when others then
	qt_sistemas_w	:=	0;
end;

begin
select	'S'
into STRICT	ie_ish_w
from	intpd_eventos_sistema a
where	substr(obter_se_integracao_ish(a.nr_seq_projeto_xml),1,1) = 'S'
and	a.ie_situacao = 'A'  LIMIT 1;
exception
when others then
	ie_ish_w	:=	'N';
end;
/*'Quando for executado a rotina com o agrupador, o objetivo e atualizar os dependentes, se nao ter dependente na fila aguardando predecessor, nao precisa atualizar nada!'*/

if (coalesce(nr_seq_agrupador_w::text, '') = '') or (nr_seq_agrupador_w IS NOT NULL AND nr_seq_agrupador_w::text <> '') and (qt_reg_pend_agrup_w > 0) then
	begin
	i	:=	0;
	
	open C00;
	loop
	fetch C00 into	
		c00_w;
	EXIT WHEN NOT FOUND; /* apply on C00 */
		begin
		t_intpd_reg_w[i].nr_sequencia		:=	c00_w.nr_sequencia;

		select	NR_SEQ_SERV_ORIGEM
		into STRICT	nr_seq_servidor_w
		from	intpd_fila_transmissao a,
			INTPD_EVENTOS_SISTEMA b,
			INTPD_EVENTOS c
		where	a.nr_seq_evento_sistema = b.nr_sequencia
		and	b.nr_seq_evento = c.nr_sequencia
		and	a.nr_sequencia = c00_w.nr_sequencia;
		
		t_intpd_reg_w[i].nr_seq_servidor	:=	nr_seq_servidor_w;
		
		if (nr_seq_servidor_w > 0) then
			CALL gerar_int_padrao.set_servidor(nr_seq_servidor_w, 'N', 'N', 'N');
		end if;
		
		i	:=	i + 1;
		end;
	
	end loop;
	close C00;

	qt_reg_proc_w	:=	null;

	if (qt_reg_proc_p > 0) then
		begin
		if (qt_sistemas_w > 0) then
			select	count(1)
			into STRICT	qt_processando_w
			from	intpd_fila_transmissao a,
				intpd_eventos_sistema b
			where	a.nr_seq_evento_sistema = b.nr_sequencia
			and	a.ie_envio_recebe in ('E', 'C')
			and	a.ie_status = 'R'
			and	substr(obter_se_contido(b.nr_seq_sistema, ds_lista_servidores_p), 1, 1) = 'S';
		else		
			select	count(1)
			into STRICT	qt_processando_w
			from	intpd_fila_transmissao
			where	ie_envio_recebe in ('E', 'C')
			and	ie_status = 'R';
		end if;
		
		qt_reg_proc_w	:=	qt_reg_proc_p - qt_processando_w;
		end;
	end if;
	
	open C10;
	loop
	fetch C10 into	
		C10_w;
	EXIT WHEN NOT FOUND; /* apply on C10 */
		begin
		CALL gerar_int_padrao.set_servidor(C10_w.nr_sequencia, 'S', 'N', 'N');
		qt_serv_pool_w	:=	qt_serv_pool_w + 1;
		end;
	end loop;
	close C10;	

	/*'Nao deve executar esse processamento quando receber o agrupador como parametro, pois nesse caso o unico objetivo e atualizar os dependentes com status aguardando predecessor'*/

	if (coalesce(nr_seq_agrupador_w::text, '') = '') then
		open c06;
		loop
		fetch c06 into	
			c06_w;
		EXIT WHEN NOT FOUND; /* apply on c06 */
			begin	
			update	intpd_fila_transmissao
			set	ie_status = 'P',
				qt_tentativa = coalesce(qt_tentativa, 0) + 1,
				dt_status	= clock_timestamp(),
				ds_log  = NULL
			where	nr_sequencia = c06_w.nr_sequencia;
			commit;
			end;
		end loop;
		close c06;
	end if;
	if (ie_ish_w = 'S') then
		open C08;
		loop
		fetch C08 into	
			c08_w;
		EXIT WHEN NOT FOUND; /* apply on C08 */
			begin
			update	intpd_fila_transmissao
			set	ie_status = 'P',
				qt_tentativa	= coalesce(qt_tentativa, 0) + 1,
				dt_status	= clock_timestamp(),
				ds_log  = NULL
			where	nr_sequencia	= c08_w.nr_sequencia;
			
			/*only one message.. to avoid a new deadlock*/

			exit;
			end;
		end loop;
		close C08;
	end if;

	/*'Retirado a atualizacao desses registros devido a pessima performance da query!'*/


	/*
	open c07;
	loop
	fetch c07 into	
		c07_w;
	exit when c07%notfound;
		begin
		update	intpd_fila_transmissao
		set	ie_status = 'P',
			dt_atualizacao = sysdate
		where	nr_sequencia = c07_w.nr_sequencia;
		end;
	end loop;
	close c07;
	*/
	
	select	count(*)
	into STRICT	ie_contem_superior_w
	from	intpd_evento_superior;
	
	if (ie_contem_superior_w > 0) then
		if (coalesce(ie_tipo_agrup_p,'D') = 'S') then
			CALL intpd_atualizar_agrup_seq(nr_seq_agrupador_w);
		end if;
	end if;
	
	qt_integrado_w	:=	0;	
	
	for i in 0..t_intpd_reg_w.count - 1 loop
		begin
		nr_seq_servidor_w	:=	t_intpd_reg_w[i].nr_seq_servidor;
		
		begin
		select	'S',
			a.nr_seq_documento,
			a.ie_operacao,
			b.nr_seq_projeto_xml,
			b.ie_conversao
		into STRICT	ie_integrar_w,
			nr_seq_documento_w,
			ie_operacao_w,			
			nr_seq_projeto_xml_w,
			ie_conversao_w
		from	intpd_fila_transmissao a,
			intpd_eventos_sistema b
		where	a.nr_seq_evento_sistema = b.nr_sequencia
		and	a.ie_status = 'P'
		and	a.ie_envio_recebe in ('E', 'C')
		and	a.nr_seq_agrupador = coalesce(nr_seq_agrupador_w, a.nr_seq_agrupador)
		and	a.nr_sequencia = t_intpd_reg_w[i].nr_sequencia;
		exception
		when others then
			ie_integrar_w	:=	'N';
		end;
		
		if (qt_serv_pool_w > 0) then			
			begin
			if (nr_seq_servidor_w > 0) then
				select	nr_seq_servidor,
					qt_processando
				into STRICT	nr_seq_servidor_w,
					qt_integrado_w
				from	table(gerar_int_padrao.get_servidores)
				where	nr_seq_servidor = nr_seq_servidor_w;			
			else			
				select	nr_seq_servidor,
					qt_processando
				into STRICT	nr_seq_servidor_w,
					qt_integrado_w
				from (	SELECT	nr_seq_servidor,
						qt_processando
					from	table(gerar_int_padrao.get_servidores)
					where	ie_pool = 'S'
					order by qt_processando asc) alias1 LIMIT 1;
			end if;
			exception
			when others then
				nr_seq_servidor_w	:=	null;
				qt_integrado_w		:=	null;
			end;
		end if;
		
		if (qt_serv_pool_w = 0) then
			if (qt_reg_proc_w IS NOT NULL AND qt_reg_proc_w::text <> '') and (qt_integrado_w >= qt_reg_proc_w) then
				begin
				ie_integrar_w	:=	'N';
				exit;
				end;
			end if;
		else	
			if (coalesce(nr_seq_servidor_w::text, '') = '') then
				ie_integrar_w	:=	'N';
			elsif (qt_reg_proc_p IS NOT NULL AND qt_reg_proc_p::text <> '') and (qt_integrado_w >= qt_reg_proc_p) then			
				ie_integrar_w	:=	'N';
			end if;			
		end if;
		
		if (ie_integrar_w = 'S') then
			begin
			if (coalesce(ie_tipo_agrup_p, 'D') <> 'S') then
				ie_integrar_w := intpd_verificar_superior(t_intpd_reg_w[i].nr_sequencia, ie_integrar_w);
			end if;			
			
			if (ie_integrar_w = 'S') then
				begin
				qt_integrado_w	:=	qt_integrado_w + 1;
				
				ds_param_integ_w := 'NR_SEQUENCIA=' || t_intpd_reg_w[i].nr_sequencia;
				
				ds_xml_w	:= null;				
				
				if (nr_seq_projeto_xml_w > 0) then
					begin
										
					ds_parametros_w	:=	'NR_SEQ_FILA=' || t_intpd_reg_w[i].nr_sequencia ||';'||
								'NR_SEQ_DOCUMENTO='|| nr_seq_documento_w || ';'||
								'IE_CONVERSAO=' || ie_conversao_w || ';'||
								'IE_OPERACAO=' || ie_operacao_w;
		
					select	nextval('tasy_xml_banco_seq')
					into STRICT 	nr_seq_log_w
					;

					begin						
						CALL wheb_exportar_xml(nr_seq_projeto_xml_w, nr_seq_log_w, '', ds_parametros_w);
						
						pls_convert_long_( 'TASY_XML_BANCO', 'DS_XML', 'WHERE NR_SEQUENCIA = :NR_SEQUENCIA', 'NR_SEQUENCIA='||nr_seq_log_w, ds_xml_w);						

						--Tratamento para remover o cabecalho da mesma forma que e feito no whebservidorIntegracao
						select	Replace_Clob(ds_xml_w,'<?xml version="1.0" encoding="ISO-8859-1"?>','')
						into STRICT	ds_xml_w
						;
						
						select	Replace_Clob(ds_xml_w,'<?xml version="1.0" encoding="UTF-8"?>','')
						into STRICT	ds_xml_w
						;
						
					exception
					when others then
						ds_xml_w	:= null;						
					end;
					
					begin
					select	'N'
					into STRICT	ie_integrar_w
					from	intpd_fila_transmissao
					where	nr_sequencia	= t_intpd_reg_w[i].nr_sequencia
					and	ie_status	= 'E'  LIMIT 1;
					exception
					when others then
						ie_integrar_w := 'S';
					end;

					end;
				end if;
	
				if (ie_integrar_w = 'S') then
					update	intpd_fila_transmissao
					set	ie_status = 'R',
						nr_seq_servidor = nr_seq_servidor_w,
						ds_xml	= ds_xml_w
					where	nr_sequencia = t_intpd_reg_w[i].nr_sequencia;
					
					CALL gerar_int_padrao.set_servidor(nr_seq_servidor_w, null, 'S', 'N');				
					CALL job_gravar_agend_integracao(614, ds_param_integ_w, 1, null, nr_seq_servidor_w);
				else
					update	intpd_fila_transmissao
					set	nr_seq_servidor = nr_seq_servidor_w,
						ds_xml		= ds_xml_w
					where	nr_sequencia 	= t_intpd_reg_w[i].nr_sequencia;
				end if;
								
				commit;
				end;
			else
				update	intpd_fila_transmissao
				set	nr_seq_servidor = nr_seq_servidor_w
				where	nr_sequencia = t_intpd_reg_w[i].nr_sequencia;	
			end if;

			end;
		end if;
		end;
	end loop;	
	end;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_processar_fila_trans ( qt_reg_proc_p bigint default 0, ie_tipo_agrup_p text default 'D', nr_seq_agrupador_p bigint default null, ds_lista_servidores_p text default null, ds_lista_sistemas_p text default null) FROM PUBLIC;

