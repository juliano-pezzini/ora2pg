-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sup_agrupar_lote_fornecedor ( nm_usuario_p text, nr_seq_lote_orig_p bigint, --Sequencia do lote original
 nr_seq_agrupamento_p INOUT bigint, --Sequencia do agrupamento gerado 
 nr_lote_fornec_p INOUT bigint, --Sequencia do lote gerado 
 ds_erro_p INOUT text) AS $body$
DECLARE

	
		
--MATERIAL_LOTE_FORNEC
nr_sequencia_w		material_lote_fornec.nr_sequencia%type;
cd_material_w		material_lote_fornec.cd_material%type;
ie_situacao_w		material_lote_fornec.ie_situacao%type;
ie_bloqueio_w		material_lote_fornec.ie_bloqueio%type;
dt_validade_w		material_lote_fornec.dt_validade%type;
cd_cgc_fornec_w		material_lote_fornec.cd_cgc_fornec%type;
qt_material_w		material_lote_fornec.qt_material%type;

--MATERIAL_LOTE_FORNEC_AGRUP
nr_seq_agrupamento_w	material_lote_fornec_agrup.nr_sequencia%type;

--MAT_LOTE_FORNEC_AGRUP_ITEM
nr_seq_item_w		mat_lote_fornec_agrup_item.nr_sequencia%type;

--Variaveis de controle
qt_existe_w		bigint;
			

BEGIN

select	cd_material,
	ie_situacao,
	ie_bloqueio,
	dt_validade,
	cd_cgc_fornec,
	qt_material
into STRICT	cd_material_w,
	ie_situacao_w,
	ie_bloqueio_w,
	dt_validade_w,
	cd_cgc_fornec_w,
	qt_material_w
from	material_lote_fornec
where	nr_sequencia = nr_seq_lote_orig_p;

if (coalesce(nr_seq_agrupamento_p::text, '') = '') then
	begin
	select	nextval('material_lote_fornec_seq')
	into STRICT	nr_sequencia_w
	;	

	insert into material_lote_fornec(
		cd_cgc_fornec,
		cd_estabelecimento,
		cd_material,
		ds_lote_fornec,
		ds_observacao,
		dt_atualizacao,
		dt_atualizacao_nrec,
		ie_origem_lote,
		ie_situacao,
		ie_validade_indeterminada,
		nm_usuario,
		nm_usuario_nrec,
		nr_digito_verif,
		nr_sequencia,
		qt_material)
	SELECT	cd_cgc_fornec,
		cd_estabelecimento,
		cd_material,
		'AGRUP' || nr_sequencia_w,
		WHEB_MENSAGEM_PCK.get_texto(280814),
		clock_timestamp(),
		clock_timestamp(),
		'G',
		'A',
		'S',
		nm_usuario_p,
		nm_usuario_p,
		calcula_digito('Modulo11',nr_sequencia_w),
		nr_sequencia_w,
		0
	from	material_lote_fornec
	where	nr_sequencia = nr_seq_lote_orig_p;
		
	select	nextval('mat_lote_fornec_agrup_item_seq')
	into STRICT	nr_seq_agrupamento_w
	;
		
	insert into material_lote_fornec_agrup(
		dt_atualizacao,
		dt_atualizacao_nrec,
		ie_situacao,
		nm_usuario,
		nm_usuario_nrec,
		nr_sequencia,
		nr_digito_verif,
		nr_seq_lote_fornec,
		qt_material)
	values (	clock_timestamp(),
		clock_timestamp(),
		'A',
		nm_usuario_p,
		nm_usuario_p,
		nr_seq_agrupamento_w,
		calcula_digito('Modulo11',nr_seq_agrupamento_w),
		nr_sequencia_w,
		0);
		
	nr_seq_agrupamento_p := nr_seq_agrupamento_w;
	end;
else
	begin
	
	select	count(*)
	into STRICT	qt_existe_w
	from	material_lote_fornec a,
		mat_lote_fornec_agrup_item b
	where	a.nr_sequencia = b.nr_seq_lote_fornec_orig
	and	b.nr_seq_agrupamento = nr_seq_agrupamento_p
	and	a.cd_material <> cd_material_w;
	
	if (qt_existe_w > 0) then
		--Nao e possivel agrupar lotes de materiais diferentes!
		ds_erro_p := substr(obter_texto_tasy(264783, null),1,255);
	end if;
	
	select	count(*)
	into STRICT	qt_existe_w
	from	material_lote_fornec a,
		mat_lote_fornec_agrup_item b
	where	a.nr_sequencia = b.nr_seq_lote_fornec_orig
	and	b.nr_seq_agrupamento = nr_seq_agrupamento_p
	and	a.cd_cgc_fornec <> cd_cgc_fornec_w;
	
	if (qt_existe_w > 0) then
		--Nao e possivel agrupar lotes de fornecedores diferentes!
		ds_erro_p := substr(obter_texto_tasy(1216241, null),1,255);
	end if;
	
	if (ie_situacao_w <> 'A') then
		--Nao e possivel agrupar lotes inativos!
		ds_erro_p := substr(obter_texto_tasy(264784, null),1,255);
	end if;
	
	if (ie_bloqueio_w = 'S') then
		--Nao e possivel agrupar lotes bloqueados!
		ds_erro_p := substr(obter_texto_tasy(264785, null),1,255);		
	end if;
	
	if (dt_validade_w IS NOT NULL AND dt_validade_w::text <> '') and (dt_validade_w < clock_timestamp()) then
		--Nao e possivel agrupar lotes fora do prazo de validade!
		ds_erro_p := substr(obter_texto_tasy(264786, null),1,255);		
	end if;
	
	end;
end if;

select	nextval('mat_lote_fornec_agrup_item_seq')
into STRICT	nr_seq_item_w
;

insert into mat_lote_fornec_agrup_item(
	dt_atualizacao,
	dt_atualizacao_nrec,
	nm_usuario,
	nm_usuario_nrec,
	nr_seq_agrupamento,
	nr_seq_lote_fornec_orig,
	nr_sequencia,
	qt_material)
SELECT	clock_timestamp(),
	clock_timestamp(),
	nm_usuario_p,
	nm_usuario_p,
	nr_seq_agrupamento_p,
	nr_seq_lote_orig_p,
	nr_seq_item_w,
	qt_material
from	material_lote_fornec
where	nr_sequencia = nr_seq_lote_orig_p;

select	nr_seq_lote_fornec
into STRICT	nr_lote_fornec_p
from	material_lote_fornec_agrup
where	nr_sequencia = nr_seq_agrupamento_p;

update	material_lote_fornec
set	qt_material = qt_material + qt_material_w
where	nr_sequencia = nr_lote_fornec_p;

update	material_lote_fornec_agrup
set	qt_material = qt_material + qt_material_w
where	nr_sequencia = nr_seq_agrupamento_p;

if (ds_erro_p IS NOT NULL AND ds_erro_p::text <> '') then
	delete	from mat_lote_fornec_agrup_item
	where	nr_seq_agrupamento = nr_seq_agrupamento_p;
	
	delete	from material_lote_fornec_agrup
	where	nr_sequencia = nr_seq_agrupamento_p;

	delete	from material_lote_fornec
	where	nr_sequencia = nr_lote_fornec_p;
	
	nr_lote_fornec_p := null;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sup_agrupar_lote_fornecedor ( nm_usuario_p text, nr_seq_lote_orig_p bigint, nr_seq_agrupamento_p INOUT bigint, nr_lote_fornec_p INOUT bigint, ds_erro_p INOUT text) FROM PUBLIC;

