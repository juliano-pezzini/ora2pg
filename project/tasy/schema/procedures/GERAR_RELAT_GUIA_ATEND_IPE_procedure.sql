-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_relat_guia_atend_ipe ( nr_interno_conta_p bigint) AS $body$
DECLARE

 
 
ds_comando_w		varchar(2000);
nr_count_w		bigint;
nr_sequencia_w 		integer		:= 0;
nr_seq_w		bigint;			
cd_procedimento_w	bigint;		
ds_procedimento_w	varchar(150);		
nr_crm_w 		varchar(20);
nm_medico_w 		varchar(60);
nr_cpf_cgc_w 		varchar(15);
dt_procedimento_w	timestamp;
ie_via_acesso_w		varchar(2);
ie_cir_principal_w	varchar(1);
ie_aux1_w		varchar(1);
ie_aux2_w		varchar(1);
vl_medico_w		double precision;
qt_ch_w			double precision;
qt_procedimento_w	double precision;

C01 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		somente_numero(coalesce(obter_proced_conversao_conv(a.cd_convenio,a.cd_procedimento,a.ie_origem_proced,'C'),a.cd_procedimento)) cd_procedimento, 
		substr(coalesce(obter_proced_conversao_conv(a.cd_convenio,a.cd_procedimento,a.ie_origem_proced,'D'), obter_descricao_procedimento(a.cd_procedimento, a.ie_origem_proced)),1,150) ds_procedimento, 
		substr(obter_crm_medico(a.cd_medico_executor),1,50) nr_crm, 
		substr(obter_nome_pf(a.cd_medico_executor),1,120) nm_medico, 
		coalesce(substr(obter_dados_pf(a.cd_medico_executor,'CPF'),1,80), substr(obter_dados_medico(a.cd_medico_executor,'CGC'),1,80)) nr_cpf_cgc,	 
		a.dt_procedimento, 
		CASE WHEN a.ie_via_acesso='B' THEN '33' WHEN a.ie_via_acesso='D' THEN '32' WHEN a.ie_via_acesso='M' THEN '31' WHEN a.ie_via_acesso='V' THEN '34' WHEN a.ie_via_acesso='C' THEN '35'  ELSE '00' END  ie_via_acesso, 
		CASE WHEN a.ie_funcao_medico='1' THEN 'X'  ELSE ' ' END  ie_cir_principal, 
		CASE WHEN a.ie_funcao_medico='2' THEN 'X'  ELSE ' ' END  ie_aux1, 
		CASE WHEN a.ie_funcao_medico='4' THEN 'X'  ELSE ' ' END  ie_aux2, 
		coalesce(a.vl_medico,0) vl_medico 
	from 	procedimento_paciente a 
	where	nr_interno_conta = nr_interno_conta_p 
	and	coalesce(substr(obter_dados_pf(a.cd_medico_executor,'CPF'),1,80), substr(obter_dados_medico(a.cd_medico_executor,'CGC'),1,80)) is not null 
	and 	obter_se_pasta_honorario(a.ie_responsavel_credito) = 'S' 
	order by a.dt_procedimento;

C02 CURSOR FOR 
	SELECT	somente_numero(coalesce(obter_proced_conversao_conv(a.cd_convenio,a.cd_procedimento,a.ie_origem_proced,'C'),a.cd_procedimento)) cd_procedimento, 
		substr(coalesce(obter_proced_conversao_conv(a.cd_convenio,a.cd_procedimento,a.ie_origem_proced,'D'), obter_descricao_procedimento(a.cd_procedimento, a.ie_origem_proced)),1,150) ds_procedimento, 
		substr(obter_crm_medico(b.cd_pessoa_fisica),1,50) nr_crm, 
		substr(obter_nome_pf(b.cd_pessoa_fisica),1,120) nm_medico, 
		coalesce(substr(obter_dados_pf(b.cd_pessoa_fisica,'CPF'),1,80), substr(obter_dados_medico(b.cd_pessoa_fisica,'CGC'),1,80)) nr_cpf_cgc, 
		a.dt_procedimento, 
		CASE WHEN a.ie_via_acesso='B' THEN '33' WHEN a.ie_via_acesso='D' THEN '32' WHEN a.ie_via_acesso='M' THEN '31' WHEN a.ie_via_acesso='V' THEN '34' WHEN a.ie_via_acesso='C' THEN '35'  ELSE '00' END  ie_via_acesso, 
		CASE WHEN b.ie_funcao='1' THEN 'X'  ELSE ' ' END  ie_cir_principal, 
		CASE WHEN b.ie_funcao='2' THEN 'X'  ELSE ' ' END  ie_aux1, 
		CASE WHEN b.ie_funcao='4' THEN 'X'  ELSE ' ' END  ie_aux2, 
		coalesce(b.vl_participante,0) vl_participante 
	from 	procedimento_paciente 	 a, 
		procedimento_participante b 
	where	a.nr_sequencia = b.nr_sequencia 
	and	coalesce(substr(obter_dados_pf(b.cd_pessoa_fisica,'CPF'),1,80), substr(obter_dados_medico(b.cd_pessoa_fisica,'CGC'),1,80)) is not null 
	and 	a.nr_interno_conta = nr_interno_conta_p 
	and 	a.nr_sequencia = nr_seq_w 
	and 	obter_se_pasta_honorario(a.ie_responsavel_credito) = 'S' 
	order by b.ie_funcao;
	
C03 CURSOR FOR 
	SELECT	coalesce(a.vl_medico,0), 
		b.qt_procedimento 
	from	procedimento_paciente b, 
		preco_amb a 
	where	b.nr_sequencia = nr_seq_w 
	and	b.cd_edicao_amb = a.cd_edicao_amb 
	and	b.cd_procedimento = a.cd_procedimento 
	and	b.ie_origem_proced = a.ie_origem_proced 
	order by dt_inicio_vigencia;


BEGIN 
 
/* Verifica a existÃªncia da tabela */
 
 
begin 
Select	count(table_name) 
into STRICT	nr_count_w 
from	user_tables 
where	upper(table_name) = 'GUIA_ATENDIMENTO_IPE_ERECHIM';
 
if (nr_count_w = 0) then 
	CALL EXEC_SQL_DINAMICO('TASY','create table GUIA_ATENDIMENTO_IPE_ERECHIM 
						(nr_sequencia 		number(5),						 
						cd_procedimento		number(15), 
						ds_procedimento		varchar2(150), 
						nr_crm 			varchar2(20), 
						nm_medico 		varchar2(60), 
						nr_cpf_cgc 		varchar2(15), 
						dt_procedimento		date, 
						ie_via_acesso		varchar2(2), 
						ie_cir_principal	varchar2(1), 
						ie_aux1			varchar2(1), 
						ie_aux2			varchar2(1), 
						qt_ch			number(15,4), 
						vl_medico 		number(15,4))');
else 
	CALL EXEC_SQL_DINAMICO('TASY','drop table GUIA_ATENDIMENTO_IPE_ERECHIM');
	CALL EXEC_SQL_DINAMICO('TASY','create table GUIA_ATENDIMENTO_IPE_ERECHIM 
						(nr_sequencia 		number(5), 
						cd_procedimento		number(15), 
						ds_procedimento		varchar2(150), 
						nr_crm 			varchar2(20), 
						nm_medico 		varchar2(60), 
						nr_cpf_cgc 		varchar2(15), 
						dt_procedimento		date, 
						ie_via_acesso		varchar2(2), 
						ie_cir_principal	varchar2(1), 
						ie_aux1			varchar2(1), 
						ie_aux2			varchar2(1), 
						qt_ch			number(15,4), 
						vl_medico 		number(15,4))');
end if;
 
commit;
end;
 
Open C01;
LOOP 
	Fetch C01 into	nr_seq_w, 
			cd_procedimento_w, 
			ds_procedimento_w, 
			nr_crm_w, 
			nm_medico_w, 
			nr_cpf_cgc_w, 
			dt_procedimento_w, 
			ie_via_acesso_w, 
			ie_cir_principal_w, 
			ie_aux1_w, 
			ie_aux2_w, 
			vl_medico_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	 
	nr_sequencia_w:= nr_sequencia_w + 1;
	 
	 
	qt_ch_w	:= 0;
	Open C03;
	LOOP 
		Fetch C03 into	 
			qt_ch_w, 
			qt_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		qt_ch_w			:= qt_ch_w;
		qt_procedimento_w	:= qt_procedimento_w;
		end;
	end loop;
	close C03;
	 
	 
	if (qt_ch_w <> 0) then 
		qt_ch_w:= 	qt_ch_w * qt_procedimento_w;
	end if;
		 
	ds_comando_w	:= 	'insert	into GUIA_ATENDIMENTO_IPE_ERECHIM values 
						(' || nr_sequencia_w || ', ' || cd_procedimento_w || ', ' || chr(39) || 
						ds_procedimento_w || chr(39) || ', ' || chr(39) || nr_crm_w ||chr(39) || 
						', ' || chr(39) || nm_medico_w || chr(39) || ', ' || chr(39) || 
						nr_cpf_cgc_w || chr(39) || ', to_date(' || chr(39) || dt_procedimento_w || 
						chr(39) || ') , ' || chr(39) || ie_via_acesso_w || chr(39) || ', ' || chr(39) 
						|| ie_cir_principal_w || chr(39) || ', ' || chr(39) || ie_aux1_w || chr(39) || 					 
						', ' || chr(39) || ie_aux2_w || chr(39) || ', ' || replace(to_char(qt_ch_w),',','.') || ', ' || 
						replace(to_char(vl_medico_w),',','.') ||')';
	 
	CALL EXEC_SQL_DINAMICO('TASY',ds_comando_w);
	 
	Open C02;
	LOOP 
		Fetch C02 into	cd_procedimento_w, 
				ds_procedimento_w, 
				nr_crm_w, 
				nm_medico_w, 
				nr_cpf_cgc_w, 
				dt_procedimento_w, 
				ie_via_acesso_w, 
				ie_cir_principal_w, 
				ie_aux1_w, 
				ie_aux2_w, 
				vl_medico_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
	 
		nr_sequencia_w:= nr_sequencia_w + 1;
	 
		ds_comando_w	:= 	'insert	into GUIA_ATENDIMENTO_IPE_ERECHIM 
						values (' || nr_sequencia_w || ', ' || cd_procedimento_w || ', ' || 
							chr(39) || ds_procedimento_w || chr(39) || ', ' || chr(39) || nr_crm_w || 
							chr(39) || ', ' || chr(39) || nm_medico_w || chr(39) || ', ' || chr(39) || 
							nr_cpf_cgc_w || chr(39) || ', to_date(' || chr(39) || dt_procedimento_w || 
							chr(39) || ') , ' || chr(39) || ie_via_acesso_w || chr(39) || ', ' || 
							chr(39) || ie_cir_principal_w || chr(39) || ', ' || chr(39) || ie_aux1_w 
							|| chr(39) || ', ' || chr(39) || ie_aux2_w || chr(39) || ', ' || 
							replace(to_char(qt_ch_w),',','.') || ', ' || replace(to_char(vl_medico_w),',','.') || ')';
 
		CALL EXEC_SQL_DINAMICO('TASY',ds_comando_w);		
	 
	end loop;
	close C02;
 
 
end loop;
close C01;
 
commit;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_relat_guia_atend_ipe ( nr_interno_conta_p bigint) FROM PUBLIC;

