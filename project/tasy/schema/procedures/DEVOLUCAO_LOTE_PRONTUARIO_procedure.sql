-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE devolucao_lote_prontuario ( nr_seq_lote_p bigint, nm_usuario_p text, ie_acao_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
cd_pessoa_fisica_w	varchar(10);
nr_atendimento_w	bigint;
nr_sequencia_w		bigint;
dt_periodo_inicial_w	timestamp;
dt_periodo_final_w	timestamp;
nr_seq_prontuario_w	bigint;
nr_seq_motivo_w		bigint;
nm_usuario_w		varchar(100);
qt_restante_w		bigint;
ds_parametro_w		varchar(10) := obter_valor_param_usuario(941,103,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p);
ie_status_dev_w		varchar(1);
ie_status_dev_desf_w	varchar(1);

ie_status_na_devolucao_w	varchar(10) := coalesce(obter_valor_param_usuario(941,82,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p),'D');
ie_armazena_na_devolucao_w	varchar(10) := coalesce(obter_valor_param_usuario(941,234,obter_perfil_ativo,nm_usuario_p,cd_estabelecimento_p),'S');

C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		cd_pessoa_fisica, 
		nr_atendimento, 
		dt_periodo_inicial, 
		dt_periodo_final 
	from	same_solic_pront 
	where	nr_seq_lote	= nr_seq_lote_p 
	and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p));

 

BEGIN 
 
select	coalesce(max(obter_valor_param_usuario(941, 82, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'D') 
into STRICT	ie_status_dev_w
;
 
ie_status_dev_desf_w := obter_param_usuario(941, 196, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_status_dev_desf_w);
 
if (ie_acao_p = 'D') then 
	begin 
	open	c01;
	loop 
	fetch	c01 into 
		nr_sequencia_w, 
		cd_pessoa_fisica_w, 
		nr_atendimento_w, 
		dt_periodo_inicial_w, 
		dt_periodo_final_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
 
		if (dt_periodo_inicial_w IS NOT NULL AND dt_periodo_inicial_w::text <> '') and (dt_periodo_final_w IS NOT NULL AND dt_periodo_final_w::text <> '') then 
 
			begin 
			select	max(nr_sequencia) 
			into STRICT	nr_seq_prontuario_w 
			from	same_prontuario 
			where	nr_atendimento		= nr_atendimento_w 
			and	dt_periodo_inicial_w	>= dt_periodo_inicial 
			and	dt_periodo_final_w	<= coalesce(dt_periodo_final,clock_timestamp()) 
			and	ie_status		<> '1' 
			and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p));
			exception 
				when others then 
				nr_seq_prontuario_w	:= 0;
			end;
 
			 
			 
			if (nr_seq_prontuario_w > 0) then 
				CALL Same_Devolver_Solic_Periodo(nr_seq_prontuario_w, nr_sequencia_w, nm_usuario_w, 'D');
			end if;
			 
 
		else 
			begin 
			 
			-- Não setar para 'Armazenado' se utiliza o status 'V = Em Devolução', setará para armazenado somente no status 'D = Devolvido' 
			if ((ie_status_na_devolucao_w <> 'V') or (ie_armazena_na_devolucao_w <> 'N')) then 
			 
				if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then 
					update	same_prontuario 
					set	ie_status	= '1' 
					where	nr_atendimento	= nr_atendimento_w 
					and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p));
				else 
					update	same_prontuario 
					set	ie_status	= '1' 
					where	cd_pessoa_fisica	= cd_pessoa_fisica_w 
					and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p));
				end if;
			end if;
 
			/* Ivan em 29/11/2007 OS74176 
			  Devolver os itens do prontuario quando manda devolver o lote todo */
 
			CALL same_entregar_solic_pront(nr_seq_lote_p, nr_sequencia_w, 'D', nm_usuario_p,null,null,cd_estabelecimento_p);
			end;
		end if;
 
	end loop;
	close c01;
	 
	update	same_solic_pront_lote 
	set	ie_status	= ie_status_dev_w 
	where	nr_sequencia	= nr_seq_lote_p;
	end;
 
elsif (ie_acao_p = 'E') then 
begin 
open	c01;
	loop 
	fetch	c01 into 
		nr_sequencia_w, 
		cd_pessoa_fisica_w, 
		nr_atendimento_w, 
		dt_periodo_inicial_w, 
		dt_periodo_final_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
 
		if (dt_periodo_inicial_w IS NOT NULL AND dt_periodo_inicial_w::text <> '') and (dt_periodo_final_w IS NOT NULL AND dt_periodo_final_w::text <> '') then 
 
			begin 
			select	max(nr_sequencia) 
			into STRICT	nr_seq_prontuario_w 
			from	same_prontuario 
			where	nr_atendimento		= nr_atendimento_w 
			and	dt_periodo_inicial_w	>= dt_periodo_inicial 
			and	dt_periodo_final_w	<= coalesce(dt_periodo_final,clock_timestamp()) 
			and	ie_status		= '1' 
			and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p));
			exception 
				when others then 
				nr_seq_prontuario_w	:= 0;
			end;
				 
			 
			if (nr_seq_prontuario_w > 0) then 
				CALL Same_Devolver_Solic_Periodo(nr_seq_prontuario_w, nr_sequencia_w, nm_usuario_w, 'E');
			end if;
						 
 
		else 
			begin			 
			if (ie_status_dev_desf_w = 'S') and (ie_status_dev_w = 'V') then 
				CALL same_desfazer_devolucao_lote(nr_sequencia_w,'N',nm_usuario_p);
			else	 
				/*if	(nr_atendimento_w is not null) then 
					update	same_prontuario 
					set	ie_status	= '8' 
					where	nr_atendimento	= nr_atendimento_w 
					and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p)); 
				else 
					update	same_prontuario 
					set	ie_status	= '8' 
					where	cd_pessoa_fisica	= cd_pessoa_fisica_w 
					and	((ds_parametro_w = 'N') or (cd_estabelecimento = cd_estabelecimento_p)); 
				end if;*/
 
				CALL same_entregar_solic_pront(nr_seq_lote_p, nr_sequencia_w, 'E', nm_usuario_p,null,null,cd_estabelecimento_p);
			end if;	
			end;
		end if;
 
	end loop;
	close c01;
 
	if (ie_status_dev_desf_w = 'S') and (ie_status_dev_w = 'V') then 
		update	same_solic_pront_lote 
		set	ie_status	= 'V' 
		where	nr_sequencia	= nr_seq_lote_p;
	else	 
		update	same_solic_pront_lote 
		set	ie_status	= 'E' 
		where	nr_sequencia	= nr_seq_lote_p;
	end if;	
end;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE devolucao_lote_prontuario ( nr_seq_lote_p bigint, nm_usuario_p text, ie_acao_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

