-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gen_walk_in_waiting_list ( nr_seq_waiting_list_p bigint, dt_agenda_p timestamp, cd_agenda_p bigint, cd_anestesista_p text, cd_convenio_p text, cd_medico_p text, cd_motivo_encaixe_p text, cd_pessoa_fisica_p text, cd_procedimento_p text, nr_seq_proc_interno_p bigint, ie_origem_proced_p bigint, ds_observacao_p text, ie_carater_cirurgia_p text, ie_lado_p text, ie_tipo_atendimento_p text, qt_duracao_p bigint, nr_seq_classif_agenda_p bigint, nr_telefone_p text, nm_pessoa_encaixe_p text, nm_pessoa_fisica_p text, ie_posicao_p agenda_lista_espera.ie_posicao%type, nr_seq_agenda_p INOUT bigint, ds_erro_p INOUT text, nr_seq_cpoe_procedimento_p bigint default null) AS $body$
DECLARE


cd_perfil_w				perfil.cd_perfil%type;
nm_usuario_w			usuario.nm_usuario%type;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;

-- parameters
ie_consiste_w			varchar(1);
ie_status_autor_w	agenda_paciente.ie_autorizacao%type;
ie_gerar_dias_prev_w	varchar(1);
ie_gerar_equip_w		varchar(1);
ie_gerar_cme_w			varchar(1);
ie_gerar_opme_w			varchar(1);
ie_gerar_servico_w		varchar(1);
ie_gerar_caixa_opme_w	varchar(1);
qt_dias_atend_w			integer;
ie_forma_convenio_w		varchar(2);
ie_gera_dados_conv_w	varchar(1);

-- other fields
nr_celular_w					pessoa_fisica.nr_telefone_celular%type;
nr_sequencia_w					agenda_paciente.nr_sequencia%type;
nr_sequencia_auxiliar_w   agenda_paciente_auxiliar.nr_sequencia%type;
qt_idade_paciente_w				smallint;
ds_agenda_w						varchar(50);
hr_inicio_w						varchar(21);
ie_erro_w						varchar(1);
ds_orientacoes_w 				varchar(4000);
ds_observacao_aux				varchar(4000);
cd_convenio_new_w				integer;
dt_validade_w					timestamp;
cd_tipo_acomodacao_w			smallint;
ds_erro_w						varchar(255);
ie_reserva_leito_w				varchar(3);
qt_agendas_w					integer;
qt_diaria_prev_w				smallint;
ds_status_agenda_w				varchar(100);
nr_telefone_w					varchar(255);
nr_doc_convenio_w				varchar(20);
cd_usuario_convenio_w			varchar(30);
cd_plano_w						varchar(10);
cd_categoria_w					varchar(10);
nr_seq_classif_w				bigint;
nm_pessoa_contato_w				varchar(50);
cd_tipo_anestesia_w				varchar(2);


BEGIN

cd_perfil_w := wheb_usuario_pck.get_cd_perfil;
nm_usuario_w := wheb_usuario_pck.get_nm_usuario;
cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;

ie_consiste_w := obter_param_usuario(871, 142, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_consiste_w);
ie_gerar_dias_prev_w := obter_param_usuario(871, 184, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_dias_prev_w);
ie_status_autor_w := obter_param_usuario(871, 33, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_status_autor_w);
ie_gerar_equip_w := obter_param_usuario(871, 40, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_equip_w);
ie_gerar_cme_w := obter_param_usuario(871, 200, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_cme_w);
ie_gerar_opme_w := obter_param_usuario(871, 201, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_opme_w);
ie_gerar_servico_w := obter_param_usuario(871, 202, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_servico_w);
ie_gerar_caixa_opme_w := obter_param_usuario(871, 203, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_gerar_caixa_opme_w);
qt_dias_atend_w := obter_param_usuario(871, 25, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, qt_dias_atend_w);
ie_forma_convenio_w := obter_param_usuario(871, 46, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_forma_convenio_w);
ie_Gera_dados_conv_w := obter_param_usuario(871, 156, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_Gera_dados_conv_w);

if (nr_seq_classif_agenda_p IS NOT NULL AND nr_seq_classif_agenda_p::text <> '') then
	nr_seq_classif_w := nr_seq_classif_agenda_p;
else
	nr_seq_classif_w := Obter_Classif_Encaixe_Agenda(nr_seq_classif_w);
end if;

begin
	select	obter_idade(dt_nascimento, clock_timestamp(), 'A')
	into STRICT	qt_idade_paciente_w	
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_p;
exception
	when no_data_found then
	qt_idade_paciente_w := null;
end;

select	obter_compl_pf(cd_pessoa_fisica_p, 1, 'T'),
		substr(nm_pessoa_encaixe_p,1,50)
into STRICT	nr_telefone_w,
		nm_pessoa_contato_w
;

if (coalesce(nr_telefone_p::text, '') = '') then
	select	obter_compl_pf(cd_pessoa_fisica_p, 1, 'T')
	into STRICT 	nr_telefone_w
	;
else
	nr_telefone_w := nr_telefone_p;
end if;

select	obter_dados_pf(cd_pessoa_fisica_p, 'TC')
into STRICT	nr_celular_w
;

if (nr_celular_w IS NOT NULL AND nr_celular_w::text <> '') then
	nr_telefone_w := nr_telefone_w || ' ' || nr_celular_w;
end if;

if (nr_seq_proc_interno_p IS NOT NULL AND nr_seq_proc_interno_p::text <> '') then
	select	ie_reserva_leito,
			cd_tipo_anestesia,
			qt_dias_prev_inter
	into STRICT	ie_reserva_leito_w,
			cd_tipo_anestesia_w,
			qt_diaria_prev_w
	from	proc_interno
	where	nr_sequencia = nr_seq_proc_interno_p;
end if;

begin						
	select	cd_usuario_convenio
	into STRICT	cd_usuario_convenio_w
	from	med_cliente
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
  and   PKG_DATE_UTILS.start_of(dt_ultima_consulta,'DAY') >= PKG_DATE_UTILS.start_of(clock_timestamp() - qt_dias_atend_w, 'DAY')
	and		cd_convenio	= cd_convenio_p;
exception
	when others then
	cd_usuario_convenio_w := null;
end;

if (coalesce(cd_usuario_convenio_w::text, '') = '') then
	begin
	select	max(cd_usuario_convenio)
	into STRICT	cd_usuario_convenio_w
	from    atendimento_paciente a,
			atend_categoria_convenio b
	where   a.nr_atendimento = b.nr_atendimento
	and     a.cd_pessoa_fisica = cd_pessoa_fisica_p
	and     b.cd_convenio = cd_convenio_p
	and     dt_entrada >= clock_timestamp() - qt_dias_atend_w;
	exception
		when others then
		cd_usuario_convenio_w	:= null;
	end;
end if;

select 	count(*)
into STRICT	qt_agendas_w
from 	agenda_paciente
where	cd_agenda = cd_agenda_p
and		dt_agenda = trunc(dt_agenda_p,'dd')
and		hr_inicio = trunc(dt_agenda_p,'mi')
and		(((ie_consiste_w = 'N') and (ie_status_agenda  = CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  'R'  ELSE 'N' END )) or
		((ie_consiste_w = 'S') and (ie_status_agenda not in ('C', 'L', 'B'))));

if (qt_agendas_w > 0) then
	ds_agenda_w := substr(obter_nome_agenda(cd_agenda_p),1,50);
	hr_inicio_w := substr(to_char(trunc(dt_agenda_p,'mi'),'dd/mm/yyyy hh24:mi'),1,21);

	select	substr(obter_valor_dominio(83, CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  'R'  ELSE 'N' END ),1,100)
	into STRICT	ds_status_agenda_w
	;
	
	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(182974, 'HR_INICIO_W='||to_char(hr_inicio_w)||';DS_AGENDA_W='||to_char(ds_agenda_w)||';DS_STATUS_AGENDA_W='||to_char(ds_status_agenda_w));
end if;

select 	coalesce(max('N'),'S')
into STRICT	ie_erro_w
from	procedimento
where	cd_procedimento = cd_procedimento_p
and		ie_origem_proced = ie_origem_proced_p;

if (ie_erro_w = 'S') then
	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(182975);
end if;

select	nextval('agenda_paciente_seq')
into STRICT	nr_sequencia_w
;

nr_seq_agenda_p	:= nr_sequencia_w; 	
	
insert into agenda_paciente(
	nr_sequencia,
	cd_agenda,
	dt_agenda,
	hr_inicio,
	ie_status_agenda,
	cd_anestesista,
	cd_medico,
	cd_pessoa_fisica,
	cd_procedimento,
	cd_tipo_anestesia,
	cd_usuario_convenio,
	ds_observacao,
	dt_agendamento,
	dt_atualizacao,
	ie_autorizacao,
	ie_lado,
	ie_origem_proced,
	nm_pessoa_contato,
	nm_paciente,
	nm_usuario,
	nr_minuto_duracao,
	nr_seq_classif_agenda,
	nr_seq_proc_interno,
	nr_seq_lista,
	nr_telefone,
	ie_reserva_leito,
	cd_convenio,
	ie_equipamento,
	dt_nascimento_pac,
	qt_idade_mes,
	qt_idade_paciente,
	nr_seq_motivo_encaixe,
	ie_carater_cirurgia,
	ie_tipo_atendimento,
	qt_diaria_prev
) values (
	nr_sequencia_w,
	cd_agenda_p,
	trunc(dt_agenda_p),
	dt_agenda_p,
	CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  'R'  ELSE 'N' END ,
	cd_anestesista_p,
	cd_medico_p,
	cd_pessoa_fisica_p,
	cd_procedimento_p,
	cd_tipo_anestesia_w,
	cd_usuario_convenio_w,
	ds_observacao_p,
	clock_timestamp(),
	clock_timestamp(),
	coalesce(ie_status_autor_w, 'PA'),
	ie_lado_p,
	ie_origem_proced_p,
	nm_pessoa_contato_w,
	nm_pessoa_fisica_p,
	nm_usuario_w,
	qt_duracao_p,
	nr_seq_classif_w,
	nr_seq_proc_interno_p,
	nr_seq_waiting_list_p,
	nr_telefone_w,
	ie_reserva_leito_w,
	cd_convenio_p,
	'N',
	to_date(obter_dados_pf(cd_pessoa_fisica_p, 'DN'),'DD/MM/YYYY'),
	obter_idade(obter_data_nascto_pf(cd_pessoa_fisica_p), clock_timestamp(), 'MM'),
	qt_idade_paciente_w,
	cd_motivo_encaixe_p,
	ie_carater_cirurgia_p,
	ie_tipo_atendimento_p,
	CASE WHEN ie_gerar_dias_prev_w='S' THEN  qt_diaria_prev_w  ELSE null END
);

select	nextval('agenda_paciente_auxiliar_seq')
into STRICT	nr_sequencia_auxiliar_w
;

insert into agenda_paciente_auxiliar(
    nr_sequencia,
    nr_seq_agenda,
		dt_atualizacao,
		nm_usuario,
    nr_seq_cpoe_procedimento
) values (
    nr_sequencia_auxiliar_w,
    nr_sequencia_w,
    clock_timestamp(),
    nm_usuario_w,
    nr_seq_cpoe_procedimento_p
);

commit;

CALL gravar_depto_setor_agenda_cir(nr_sequencia_w, null, null, nm_usuario_w, ie_posicao_p, null);

CALL transf_proc_waiting_list(nr_seq_agenda_p, nr_seq_waiting_list_p, 'W');
CALL transf_equip_waiting_list(nr_seq_agenda_p, nr_seq_waiting_list_p, 'W');
CALL transf_prof_waiting_list(nr_seq_agenda_p, nr_seq_waiting_list_p, 'W');

update	agenda_lista_espera
set		ie_status_espera	= 'E'
where	nr_sequencia		= nr_seq_waiting_list_p;

ds_orientacoes_w := gerar_orientacao(nr_seq_proc_interno_p, cd_convenio_new_w, nm_usuario_w, ds_orientacoes_w);

if (ie_gera_dados_conv_w = 'S') and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (ie_forma_convenio_w <> 'N') then
	
	SELECT * FROM gerar_convenio_agendamento(
		cd_pessoa_fisica_p, 1, nr_sequencia_w, ie_forma_convenio_w, cd_convenio_new_w, cd_categoria_w, cd_usuario_convenio_w, dt_validade_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w, nm_usuario_w, ds_observacao_aux
	) INTO STRICT cd_convenio_new_w, cd_categoria_w, cd_usuario_convenio_w, dt_validade_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w, ds_observacao_aux
	;
	
	if (cd_convenio_new_w IS NOT NULL AND cd_convenio_new_w::text <> '') and (cd_convenio_p = cd_convenio_new_w) then
		update	agenda_paciente
		set		cd_convenio				= cd_convenio_new_w,
				cd_categoria			= cd_categoria_w,
				cd_usuario_convenio		= cd_usuario_convenio_w,
				dt_validade_carteira 	= dt_validade_w,
				nr_doc_convenio			= nr_doc_convenio_w,
				cd_tipo_acomodacao		= cd_tipo_acomodacao_w,
				cd_plano 				= cd_plano_w
		where 	nr_sequencia 			= nr_sequencia_w;
	end if;
end if;

SELECT * FROM gerar_dados_pre_agenda(cd_procedimento_p, ie_origem_proced_p, nr_sequencia_w, nr_seq_proc_interno_p, cd_medico_p, cd_pessoa_fisica_p, nm_usuario_w, cd_convenio_p, null, ds_orientacoes_w, cd_estabelecimento_w, ie_gerar_equip_w, ie_gerar_cme_w, ie_gerar_opme_w, ie_gerar_servico_w, ie_gerar_caixa_opme_w, ds_erro_w, ds_erro_w) INTO STRICT ds_erro_w, ds_erro_w;
						
ds_erro_p := substr(ds_erro_w, 1, 255);

if (coalesce(nr_seq_proc_interno_p, 0) > 0) then
	CALL gerar_autor_regra(null, null, null, null, null, null, 'AP', nm_usuario_w, nr_sequencia_w, nr_seq_proc_interno_p, null, null, null, null, null, null, null);
end if;	


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gen_walk_in_waiting_list ( nr_seq_waiting_list_p bigint, dt_agenda_p timestamp, cd_agenda_p bigint, cd_anestesista_p text, cd_convenio_p text, cd_medico_p text, cd_motivo_encaixe_p text, cd_pessoa_fisica_p text, cd_procedimento_p text, nr_seq_proc_interno_p bigint, ie_origem_proced_p bigint, ds_observacao_p text, ie_carater_cirurgia_p text, ie_lado_p text, ie_tipo_atendimento_p text, qt_duracao_p bigint, nr_seq_classif_agenda_p bigint, nr_telefone_p text, nm_pessoa_encaixe_p text, nm_pessoa_fisica_p text, ie_posicao_p agenda_lista_espera.ie_posicao%type, nr_seq_agenda_p INOUT bigint, ds_erro_p INOUT text, nr_seq_cpoe_procedimento_p bigint default null) FROM PUBLIC;

