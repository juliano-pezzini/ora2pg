-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_liberar_solic_rescisao ( nr_seq_solicitacao_p bigint, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_commit_p text default 'S') AS $body$
DECLARE


ie_suspensao_atendimento_w	pls_regra_solic_rescisao.ie_suspensao_atendimento%type;
ie_exige_novo_titular_w		pls_regra_solic_rescisao.ie_exige_novo_titular%type;
dt_solicitacao_w		pls_solicitacao_rescisao.dt_solicitacao%type;
ie_forma_pedido_w		pls_solicitacao_rescisao.ie_forma_pedido%type;
qt_registro_w			integer;
nr_seq_protocolo_atend_w	pls_protocolo_atendimento.nr_sequencia%type;
nr_protocolo_atend_w		pls_protocolo_atendimento.nr_protocolo%type;
nr_seq_atendimento_w		pls_solicitacao_rescisao.nr_seq_atendimento%type;
ie_origem_solicitacao_w		pls_solicitacao_rescisao.ie_origem_solicitacao%type;
ie_exige_cpf_w			varchar(255) := 'N';
ie_iniciativa_beneficiario_w	pls_motivo_cancelamento.ie_iniciativa_beneficiario%type;
qt_exige_inf_fin_devolucao_w	bigint;
dt_solicitacao_ww		pls_solicitacao_rescisao.dt_solicitacao%type;
ie_forma_cobranca_w		pls_solicitacao_rescisao.ie_forma_cobranca%type;
nr_seq_notific_pagador_w	pls_notificacao_pagador.nr_sequencia%type;
ie_status_w			pls_solicitacao_rescisao.ie_status%type;
ie_atualizar_contato_pf_w	pls_regra_solic_rescisao.ie_atualizar_contato_pf%type;
qt_restricao_contato_w		integer;
qt_rest_contato_rescisao_w	integer;

C01 CURSOR FOR
	SELECT	a.nr_seq_segurado,
		b.nr_seq_titular,
		a.nr_seq_novo_titular
	from	pls_solic_rescisao_benef 	a,
		pls_segurado 			b
	where	b.nr_sequencia		= a.nr_seq_segurado
	and	a.nr_seq_solicitacao	= nr_seq_solicitacao_p;

C02 CURSOR FOR
	SELECT	b.nr_seq_pagador
	from	pls_solic_rescisao_benef a,
		pls_segurado b
	where	b.nr_sequencia		= a.nr_seq_segurado
	and	a.nr_seq_solicitacao	= nr_seq_solicitacao_p
	group by b.nr_seq_pagador;

C03 CURSOR FOR
	SELECT	a.nr_sequencia 	nr_seq_solic_resc_fin_hist
	from	pls_solic_resc_fin_hist a,
		pls_solic_rescisao_fin 	b
	where	b.nr_sequencia 		= a.nr_seq_solic_resc_fin
	and	b.nr_seq_solicitacao 	= nr_seq_solicitacao_p;

c04 CURSOR(	nr_seq_solicitacao_pc	pls_solicitacao_rescisao.nr_sequencia%type) FOR
	SELECT	a.ds_email,
		a.nr_ddi_celular,
		a.nr_ddd_celular,
		a.nr_telefone_celular,
		a.nr_ddi_telefone,
		a.nr_ddd_telefone,
		a.nr_telefone,
		a.cd_cep,
		a.ds_endereco,
		a.nr_endereco,
		a.ds_complemento,
		a.ds_bairro,
		a.cd_municipio_ibge,
		a.sg_estado,
		a.cd_pessoa_fisica,
		(SELECT	count(1)
		from	compl_pessoa_fisica x
		where	x.cd_pessoa_fisica = a.cd_pessoa_fisica
		and	x.ie_tipo_complemento = 1) qt_compl_residencial		
	from	pls_solic_resc_contato a
	where	a.nr_seq_solicitacao = nr_seq_solicitacao_pc
	and	(a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '');
	
c05 CURSOR(	nr_seq_solicitacao_pc	pls_solicitacao_rescisao.nr_sequencia%type) FOR
	SELECT	a.nr_seq_tipo_contato,
		a.ie_forma_envio,
		(SELECT	max(x.ds_tipo_contato)
		from	pls_tp_contato_solic_resc x
		where	x.nr_sequencia = a.nr_seq_tipo_contato) ds_tipo_contato,
		obter_valor_dominio(8291,a.ie_forma_envio) ds_forma_envio,
		a.nr_telefone,
		a.nr_telefone_celular,
		coalesce(b.ie_padrao,'N') ie_padrao
	from	pls_solic_resc_contato a,
		pls_tp_contato_solic_resc b
	where	b.nr_sequencia		= a.nr_seq_tipo_contato
	and	a.nr_seq_solicitacao	= nr_seq_solicitacao_pc
	group by
		a.nr_seq_tipo_contato,
		a.ie_forma_envio,
		a.nr_telefone,
		a.nr_telefone_celular,
		b.ie_padrao;

c06 CURSOR(	nr_seq_solicitacao_pc	pls_solicitacao_rescisao.nr_sequencia%type) FOR
	SELECT	b.nr_sequencia nr_seq_motivo_rescisao,
		b.ds_motivo_cancelamento
	from	pls_solic_rescisao_benef a,
		pls_motivo_cancelamento b
	where	b.nr_sequencia = a.nr_seq_motivo_rescisao
	and	a.nr_seq_solicitacao = nr_seq_solicitacao_pc
	and	exists (SELECT	1
			from	pls_motivo_cancel_contato x
			where	b.nr_sequencia = x.nr_seq_motivo_cancel)
	group by
		b.nr_sequencia,
		b.ds_motivo_cancelamento;
	
c07 CURSOR(	nr_seq_solicitacao_pc	pls_solicitacao_rescisao.nr_sequencia%type) FOR
	SELECT	coalesce(b.ie_obrigatoriedade_telefone, 'A') ie_obrigatoriedade_telefone,
		b.ds_motivo_cancelamento
	from	pls_solic_rescisao_benef a,
		pls_motivo_cancelamento b
	where	b.nr_sequencia = a.nr_seq_motivo_rescisao
	and	a.nr_seq_solicitacao = nr_seq_solicitacao_pc
	group by
		b.ds_motivo_cancelamento,
		b.ie_obrigatoriedade_telefone;

BEGIN

ie_exige_cpf_w := Obter_param_Usuario(268, 13, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_exige_cpf_w);

if (ie_opcao_p = 'L') then
	select	coalesce(max(ie_suspensao_atendimento),'1'),
		coalesce(max(ie_exige_novo_titular),'N'),
		coalesce(max(ie_atualizar_contato_pf),'N')
	into STRICT	ie_suspensao_atendimento_w,
		ie_exige_novo_titular_w,
		ie_atualizar_contato_pf_w
	from	pls_regra_solic_rescisao
	where	cd_estabelecimento	= cd_estabelecimento_p;
	
	select	dt_solicitacao,
		ie_forma_pedido,
		nr_seq_protocolo_atend,
		nr_seq_atendimento,
		ie_origem_solicitacao,
		ie_forma_cobranca,
		nr_seq_notific_pagador,
		ie_status
	into STRICT	dt_solicitacao_w,
		ie_forma_pedido_w,
		nr_seq_protocolo_atend_w,
		nr_seq_atendimento_w,
		ie_origem_solicitacao_w,
		ie_forma_cobranca_w,
		nr_seq_notific_pagador_w,
		ie_status_w
	from	pls_solicitacao_rescisao
	where	nr_sequencia	= nr_seq_solicitacao_p;
	
	if (ie_status_w = 2) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1126658); --Esta solicitacao ja foi liberada!
	else
		select	count(1)
		into STRICT	qt_exige_inf_fin_devolucao_w
		from	pls_solic_rescisao_benef a,
			pls_motivo_cancelamento b
		where	b.nr_sequencia		= a.nr_seq_motivo_rescisao
		and	coalesce(b.ie_exige_inf_fin_devolucao,'S') = 'S'
		and	a.nr_seq_solicitacao	= nr_seq_solicitacao_p;
		
		if (coalesce(ie_forma_pedido_w::text, '') = '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(778082); --Favor informar a forma da solicitacao!
		end if;
		
		if (coalesce(ie_forma_cobranca_w::text, '') = '') and (ie_origem_solicitacao_w <> 'P') and (qt_exige_inf_fin_devolucao_w > 0) and (coalesce(nr_seq_notific_pagador_w::text, '') = '') then -- Se a origem for notificacao de atraso, nao deve consistir a regra
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1060346);-- Favor informar a forma de devolucao.
		end if;
		
		select	count(*)
		into STRICT	qt_registro_w
		from	pls_solic_resc_contato
		where	nr_seq_solicitacao	= nr_seq_solicitacao_p;
		
		if (qt_registro_w = 0) and (coalesce(nr_seq_notific_pagador_w::text, '') = '') then -- Se a origem for notificacao de atraso, nao deve consistir a regra
			CALL wheb_mensagem_pck.exibir_mensagem_abort(779386); --Nao e possivel liberar a solicitacao sem informar ao menos um contato
		end if;
		
		select	count(*)
		into STRICT	qt_registro_w
		from	pls_solic_resc_contato
		where	nr_seq_solicitacao	= nr_seq_solicitacao_p
		and	coalesce(ie_forma_envio::text, '') = '';
		
		if (qt_registro_w > 0) and (coalesce(nr_seq_notific_pagador_w::text, '') = '') then -- Se a origem for notificacao de atraso, nao deve consistir a regra
			CALL wheb_mensagem_pck.exibir_mensagem_abort(820590); --Favor informar a forma de envio para todos os contatos da solicitacao. 
		end if;
		
		select	count(1)
		into STRICT	qt_restricao_contato_w
		from	pls_motivo_cancel_contato a,
			pls_motivo_cancelamento b,
			pls_solic_rescisao_benef c
		where	b.nr_sequencia = c.nr_seq_motivo_rescisao
		and	b.nr_sequencia = a.nr_seq_motivo_cancel
		and	c.nr_seq_solicitacao = nr_seq_solicitacao_p;
		
		for r_c05_w in c05(nr_seq_solicitacao_p) loop
			begin
			if (qt_restricao_contato_w > 0) then
				for r_c06_w in c06(nr_seq_solicitacao_p) loop
					begin
					select	count(1)
					into STRICT	qt_rest_contato_rescisao_w
					from	pls_motivo_cancel_contato
					where	nr_seq_motivo_cancel = r_c06_w.nr_seq_motivo_rescisao
					and	ie_forma_envio = r_c05_w.ie_forma_envio
					and	((coalesce(nr_seq_tipo_contato::text, '') = '') or (nr_seq_tipo_contato = r_c05_w.nr_seq_tipo_contato));
					
					if (qt_rest_contato_rescisao_w = 0) then
						if (r_c05_w.ds_tipo_contato IS NOT NULL AND r_c05_w.ds_tipo_contato::text <> '') then
							CALL wheb_mensagem_pck.exibir_mensagem_abort(1138377,'DS_MOTIVO_CANCELAMENTO='||r_c06_w.ds_motivo_cancelamento||
													';DS_TIPO_CONTATO='||r_c05_w.ds_tipo_contato||
													';DS_FORMA_ENVIO='||r_c05_w.ds_forma_envio);
						else
							CALL wheb_mensagem_pck.exibir_mensagem_abort(1138378,'DS_MOTIVO_CANCELAMENTO='||r_c06_w.ds_motivo_cancelamento||
													';DS_FORMA_ENVIO='||r_c05_w.ds_forma_envio);
						end if;
					end if;
					end;
				end loop;
			end if;
			
			if (r_c05_w.ie_padrao = 'S') and (ie_origem_solicitacao_w <> 'P') then --Validar telefone somente para contato padrao - Gerado pelo portal
				for r_c07_w in c07(nr_seq_solicitacao_p) loop
					begin
					if	((r_c07_w.ie_obrigatoriedade_telefone = 'A') and
						((coalesce(r_c05_w.nr_telefone::text, '') = '') or (coalesce(r_c05_w.nr_telefone_celular::text, '') = ''))) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(1138472,'DS_MOTIVO_RESCISAO='||r_c07_w.ds_motivo_cancelamento);
					elsif	((r_c07_w.ie_obrigatoriedade_telefone = 'X') and
						((coalesce(r_c05_w.nr_telefone::text, '') = '') and (coalesce(r_c05_w.nr_telefone_celular::text, '') = ''))) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(1140382,'DS_MOTIVO_RESCISAO='||r_c07_w.ds_motivo_cancelamento);
					elsif	((r_c07_w.ie_obrigatoriedade_telefone = 'T') and (coalesce(r_c05_w.nr_telefone::text, '') = '')) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(1138473,'DS_MOTIVO_RESCISAO='||r_c07_w.ds_motivo_cancelamento);
					elsif	((r_c07_w.ie_obrigatoriedade_telefone = 'C') and (coalesce(r_c05_w.nr_telefone_celular::text, '') = '')) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(1138474,'DS_MOTIVO_RESCISAO='||r_c07_w.ds_motivo_cancelamento);
					end if;
					end;
				end loop;
			end if;
			end;
		end loop;
		
		--Consisitir beneficiarios
		for r_c01_w in C01 loop
			begin
			if (r_c01_w.nr_seq_novo_titular IS NOT NULL AND r_c01_w.nr_seq_novo_titular::text <> '') and (ie_exige_cpf_w = 'S') and (coalesce(pls_obter_dados_segurado(r_c01_w.nr_seq_novo_titular,'CPF')::text, '') = '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1026608); --Nao e possivel realizar a troca para um titular sem CPF cadastrado. Parametro [13]
			end if;
			
			if (ie_exige_novo_titular_w = 'S') and (ie_origem_solicitacao_w <> 'P') and --Se for portal, nao deve consistir a regra
				(coalesce(nr_seq_notific_pagador_w::text, '') = '') then -- Se a origem for notificacao de atraso, nao deve consistir a regra
				if (coalesce(r_c01_w.nr_seq_titular::text, '') = '') and (coalesce(r_c01_w.nr_seq_novo_titular::text, '') = '') then
					select	count(1)
					into STRICT	qt_registro_w
					from	pls_segurado a
					where	a.nr_seq_titular = r_c01_w.nr_seq_segurado
					and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
					and (coalesce(a.dt_rescisao::text, '') = '' or a.dt_rescisao > fim_dia(dt_solicitacao_w))
					and	not exists (	SELECT	1
								from	pls_solic_rescisao_benef x
								where	x.nr_seq_segurado	= a.nr_sequencia
								and	x.nr_seq_solicitacao	= nr_seq_solicitacao_p);
					
					if (qt_registro_w > 0) then --Existem dependentes do beneficiario #@NM_BENEFICIARIO#@ que estao ativos e nao serao rescindidos. Favor informar o novo titular.
						CALL wheb_mensagem_pck.exibir_mensagem_abort(767233,'NM_BENEFICIARIO='||pls_obter_dados_segurado(r_c01_w.nr_seq_segurado,'N'));
					end if;
				end if;
			end if;
			
			--Caso nao exista protocolo de atendimento, gerar protocolo
			if (coalesce(nr_seq_atendimento_w::text, '') = '' and coalesce(nr_seq_protocolo_atend_w::text, '') = '') then
				SELECT * FROM pls_gravar_protocolo_atend('7', r_c01_w.nr_seq_segurado, null, null, null, null, nr_seq_solicitacao_p, null, null, null, cd_estabelecimento_p, nm_usuario_p, nr_seq_protocolo_atend_w, nr_protocolo_atend_w, 'N') INTO STRICT nr_seq_protocolo_atend_w, nr_protocolo_atend_w;
				
				update	pls_solicitacao_rescisao
				set	nr_seq_protocolo_atend = nr_seq_protocolo_atend_w
				where	nr_sequencia	= nr_seq_solicitacao_p;
			end if;
			
			end;
		end loop;
		
		if (ie_atualizar_contato_pf_w = 'S') then
			for r_c04_w in c04(nr_seq_solicitacao_p) loop
				begin
				if (r_c04_w.qt_compl_residencial > 0) then
					update	compl_pessoa_fisica
					set	ds_email = CASE WHEN r_c04_w.ds_email = NULL THEN  ds_email  ELSE r_c04_w.ds_email END ,						
						nr_ddi_telefone = CASE WHEN r_c04_w.nr_ddi_telefone = NULL THEN  nr_ddi_telefone  ELSE r_c04_w.nr_ddi_telefone END ,
						nr_ddd_telefone = CASE WHEN r_c04_w.nr_ddd_telefone = NULL THEN  nr_ddd_telefone  ELSE r_c04_w.nr_ddd_telefone END ,
						nr_telefone = CASE WHEN r_c04_w.nr_telefone = NULL THEN  nr_telefone  ELSE r_c04_w.nr_telefone END ,
						cd_cep = CASE WHEN r_c04_w.cd_cep = NULL THEN  cd_cep  ELSE r_c04_w.cd_cep END ,
						ds_endereco = CASE WHEN r_c04_w.ds_endereco = NULL THEN  ds_endereco  ELSE r_c04_w.ds_endereco END ,
						nr_endereco = CASE WHEN r_c04_w.nr_endereco = NULL THEN  nr_endereco  ELSE r_c04_w.nr_endereco END ,
						ds_complemento = CASE WHEN r_c04_w.ds_complemento = NULL THEN  ds_complemento  ELSE r_c04_w.ds_complemento END ,
						ds_bairro = CASE WHEN r_c04_w.ds_bairro = NULL THEN  ds_bairro  ELSE r_c04_w.ds_bairro END ,
						cd_municipio_ibge = CASE WHEN r_c04_w.cd_municipio_ibge = NULL THEN  cd_municipio_ibge  ELSE r_c04_w.cd_municipio_ibge END ,
						sg_estado = CASE WHEN r_c04_w.sg_estado = NULL THEN  sg_estado  ELSE r_c04_w.sg_estado END ,
						dt_atualizacao = clock_timestamp(),
						nm_usuario = nm_usuario_p
					where	cd_pessoa_fisica = r_c04_w.cd_pessoa_fisica
					and	ie_tipo_complemento = 1;					
				else
					insert into compl_pessoa_fisica(nr_sequencia, cd_pessoa_fisica, ie_tipo_complemento,
						dt_atualizacao, dt_atualizacao_nrec, nm_usuario,
						nm_usuario_nrec, ds_email,nr_ddi_telefone,
						nr_ddd_telefone, nr_telefone, cd_cep,
						ds_endereco, nr_endereco, ds_complemento,
						ds_bairro, cd_municipio_ibge, sg_estado)
					values (1, r_c04_w.cd_pessoa_fisica, 1,
						clock_timestamp(), clock_timestamp(), nm_usuario_p,
						nm_usuario_p, r_c04_w.ds_email,r_c04_w.nr_ddi_telefone,
						r_c04_w.nr_ddd_telefone, r_c04_w.nr_telefone, r_c04_w.cd_cep,
						r_c04_w.ds_endereco, r_c04_w.nr_endereco, r_c04_w.ds_complemento,
						r_c04_w.ds_bairro, r_c04_w.cd_municipio_ibge, r_c04_w.sg_estado);				
				end if;	
				
				update	pessoa_fisica
				set	nr_ddi_celular = CASE WHEN r_c04_w.nr_ddi_celular = NULL THEN  nr_ddi_celular  ELSE r_c04_w.nr_ddi_celular END ,
					nr_ddd_celular = CASE WHEN r_c04_w.nr_ddd_celular = NULL THEN  nr_ddd_celular  ELSE r_c04_w.nr_ddd_celular END ,
					nr_telefone_celular = CASE WHEN r_c04_w.nr_telefone_celular = NULL THEN  nr_telefone_celular  ELSE r_c04_w.nr_telefone_celular END ,						
					dt_atualizacao = clock_timestamp(),
					nm_usuario = nm_usuario_p
				where	cd_pessoa_fisica = r_c04_w.cd_pessoa_fisica;					
				end;
			end loop;
		end if;
		
		select	coalesce(max(b.ie_iniciativa_beneficiario),'N')
		into STRICT	ie_iniciativa_beneficiario_w
		from	pls_solic_rescisao_benef a,
			pls_motivo_cancelamento b
		where	b.nr_sequencia		= a.nr_seq_motivo_rescisao
		and	a.nr_seq_solicitacao	= nr_seq_solicitacao_p;
		
		dt_solicitacao_ww	:= clock_timestamp();
		
		if (ie_suspensao_atendimento_w = '2') then
			dt_solicitacao_ww	:= fim_dia(clock_timestamp());
		end if;
		
		update	pls_solicitacao_rescisao
		set	ie_status		= 2,
			dt_liberacao		= clock_timestamp(),
			dt_solicitacao		= CASE WHEN ie_origem_solicitacao='P' THEN CASE WHEN ie_iniciativa_beneficiario_w='S' THEN dt_solicitacao_ww  ELSE dt_solicitacao END   ELSE dt_solicitacao END , --Se a solicitacao for realizada no portal e for RN412, a data da solicitacao deve ser a data de liberacao
			nm_usuario_liberacao	= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_sequencia		= nr_seq_solicitacao_p;
		
		insert	into	pls_solicitacao_resc_hist(	nr_sequencia, nr_seq_solicitacao, dt_liberacao,
				nm_usuario, nm_usuario_nrec, dt_atualizacao, dt_atualizacao_nrec,
				ds_titulo, ds_historico)
			values (	nextval('pls_solicitacao_resc_hist_seq'), nr_seq_solicitacao_p, clock_timestamp(),
				nm_usuario_p, nm_usuario_p, clock_timestamp(), clock_timestamp(),
				wheb_mensagem_pck.get_texto(1120643), wheb_mensagem_pck.get_texto(1120646));
		
		if (ie_suspensao_atendimento_w = '1') then --Suspender no momento da solicitacao
			-- Se o ie_suspensao_atendimento_w for 2, a alteracao da situacao de atendimento sera realizada na rotina PLS_AJUSTAR_ATENDIMENTO_BENEF, chamada por JOB
			CALL pls_alt_sit_atend_solic_resc(nr_seq_solicitacao_p,'L','N',nm_usuario_p);
		end if;
		
		-- Inserir os pagadores na aba Financeiro
		for r_c02_w in C02 loop
			begin
			insert	into	pls_solic_rescisao_fin(	nr_sequencia, nr_seq_solicitacao, nr_seq_pagador, ie_status,
					dt_atualizacao, dt_atualizacao_nrec, nm_usuario, nm_usuario_nrec)
				values (	nextval('pls_solic_rescisao_fin_seq'), nr_seq_solicitacao_p, r_c02_w.nr_seq_pagador, 1,
					clock_timestamp(), clock_timestamp(), nm_usuario_p, nm_usuario_p);
			end;
		end loop;
		
		CALL pls_envio_email_solic_resc(nr_seq_solicitacao_p, 1, cd_estabelecimento_p, nm_usuario_p, 'N');
	end if;
elsif (ie_opcao_p = 'D') then
	select	ie_origem_solicitacao
	into STRICT	ie_origem_solicitacao_w
	from	pls_solicitacao_rescisao
	where	nr_sequencia	= nr_seq_solicitacao_p;
	
	if (ie_origem_solicitacao_w = 'P') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(874261); --Nao e possivel desfazer a liberacao de uma solicitacao realizada no portal web.
	end if;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_solic_resc_fin_item a,
		pls_solic_rescisao_fin b
	where	b.nr_sequencia		= a.nr_seq_solic_resc_fin
	and	b.nr_seq_solicitacao	= nr_seq_solicitacao_p;
	
	if (qt_registro_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(779411); --E necessario desfazer a analise financeira
	end if;
	
	update	pls_solicitacao_rescisao
	set	ie_status		= 1,
		dt_liberacao		 = NULL,
		nm_usuario_liberacao	 = NULL,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p
	where	nr_sequencia		= nr_seq_solicitacao_p;
	
	insert	into	pls_solicitacao_resc_hist(	nr_sequencia, nr_seq_solicitacao, dt_liberacao,
			nm_usuario, nm_usuario_nrec, dt_atualizacao, dt_atualizacao_nrec,
			ds_titulo, ds_historico)
		values (	nextval('pls_solicitacao_resc_hist_seq'), nr_seq_solicitacao_p, clock_timestamp(),
			nm_usuario_p, nm_usuario_p, clock_timestamp(), clock_timestamp(),
			wheb_mensagem_pck.get_texto(1120648), wheb_mensagem_pck.get_texto(1120650));
	
	CALL pls_alt_sit_atend_solic_resc(nr_seq_solicitacao_p,'D','N',nm_usuario_p);
	
	for r_c03_w in c03 loop
		begin
		
		delete from pls_solic_resc_fin_hist
		where	nr_sequencia = r_c03_w.nr_seq_solic_resc_fin_hist;
		
		end;
	end loop;
	
	delete	from	pls_solic_rescisao_fin
	where	nr_seq_solicitacao	= nr_seq_solicitacao_p;
end if;

if (coalesce(ie_commit_p, 'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_liberar_solic_rescisao ( nr_seq_solicitacao_p bigint, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, ie_commit_p text default 'S') FROM PUBLIC;

