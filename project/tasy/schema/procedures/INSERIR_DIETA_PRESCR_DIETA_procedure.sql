-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE inserir_dieta_prescr_dieta ( cd_dieta_p bigint, qt_parametro_p bigint, cd_intervalo_p text, nr_prescricao_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint, ds_observacao_p text) AS $body$
DECLARE

 
nr_sequencia_w			bigint;
cd_estabelecimento_w		bigint;
ie_permite_dieta_w		varchar(2);
IE_VIA_APLICACAO_w		varchar(20);
dt_prescricao_w			timestamp;
qt_dietas_w			bigint;
cont_w				bigint;
ie_prescr_dieta_sem_lib_w	varchar(30);
dt_primeiro_horario_w		timestamp;
dt_inicio_prescr_w		timestamp;
dt_validade_prescr_w		timestamp;
dt_inicio_medic_w		timestamp;
nr_horas_validade_w		integer;
nr_intervalo_w			bigint := 0;
ds_horarios1_w			varchar(2000);
ds_horarios2_w			varchar(2000);
hr_primeiro_horario_w	varchar(5);
ds_horarios_w			varchar(2000);
ds_erro_w			varchar(2000);
nr_atendimento_w		bigint;
ie_prescr_atual_w		varchar(1);
ds_tempo_w			varchar(50);
cd_funcao_w			integer;
ie_dose_espec_agora_w		varchar(1) := 'N';
hr_dose_especial_w		varchar(6) := '';	
ie_dose_esp_param_w		varchar(1);
cd_intervalo_w			dieta.cd_intervalo%type;
cd_setor_prescr_w		prescr_medica.cd_setor_atendimento%type;


BEGIN 
qt_dietas_w := obter_param_usuario(924, 298, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, qt_dietas_w);
ie_prescr_dieta_sem_lib_w := Obter_Param_Usuario(924, 530, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_prescr_dieta_sem_lib_w);
ie_prescr_atual_w := Obter_Param_Usuario(924, 1012, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_prescr_atual_w);
ie_dose_esp_param_w := Obter_Param_Usuario(950, 155, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_dose_esp_param_w);
nr_intervalo_w := 0;
 
if (nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') and (cd_dieta_p IS NOT NULL AND cd_dieta_p::text <> '') then 
	 
if (obter_valor_param_usuario(924,708,cd_perfil_p,nm_usuario_p,cd_estabelecimento_p) = 'S') and (Obter_se_prescr_pac_jejum(nr_prescricao_p) = 'S') then 
	-- O paciente está em jejum! Não é permitido prescrever dietas para o mesmo. Parâmetro [708]. 
	CALL Wheb_mensagem_pck.Exibir_mensagem_abort(178043);
end if;
	 
	select	coalesce(max(nr_sequencia),0)+1 
	into STRICT	nr_sequencia_w 
	from	prescr_dieta 
	where	nr_prescricao		= nr_prescricao_p;
	 
	 
	select	max(cd_estabelecimento), 
		max(dt_prescricao), 
		max(dt_primeiro_horario), 
		max(dt_inicio_prescr), 
		max(nr_horas_validade), 
		max(dt_validade_prescr), 
		max(nr_atendimento), 
		coalesce(max(cd_funcao_origem),obter_funcao_ativa) 
	into STRICT	cd_estabelecimento_w, 
		dt_prescricao_w, 
		dt_primeiro_horario_w, 
		dt_inicio_prescr_w, 
		nr_horas_validade_w, 
		dt_validade_prescr_w, 
		nr_atendimento_w, 
		cd_funcao_w 
	from	prescr_medica 
	where	nr_prescricao		= nr_prescricao_p;
	 
	select 	max(Obter_Se_dieta_valida(cd_dieta_p, cd_estabelecimento_w, dt_prescricao_w)) 
	into STRICT	ie_permite_dieta_w 
	;
 
	if (ie_permite_dieta_w = 'N') then 
		rollback;
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(178090, 'NM_DIETA=' || substr(obter_nome_dieta(cd_dieta_p),1,80));
	end if;
 
	select	count(*) 
	into STRICT	cont_w 
	from	prescr_dieta a, 
		prescr_medica b 
	where	obter_se_prescr_vig_adep(b.dt_inicio_prescr, b.dt_validade_prescr, dt_inicio_prescr_w, dt_validade_prescr_w) = 'S' 
	and	a.nr_prescricao		= b.nr_prescricao 
	and	coalesce(b.dt_suspensao::text, '') = '' 
	and	coalesce(a.dt_suspensao::text, '') = '' 
	and	((b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '') or (b.nr_prescricao	= nr_prescricao_p)) 
	and	b.nr_atendimento	= nr_atendimento_w 
	and	((ie_prescr_atual_w = 'N') or 
		 (ie_prescr_atual_w = 'S' AND b.nr_prescricao	= nr_prescricao_p));	
	 
	if (qt_dietas_w	> 0) and 
		((cont_w	= qt_dietas_w) or 
		 ((cont_w + 1)	> qt_dietas_w)) then 
		if (cd_funcao_w	= 950) then 
			ds_tempo_w	:= lower(wheb_mensagem_pck.get_texto(307506)); -- plano 
		elsif (ie_prescr_atual_w	= 'N') then
			ds_tempo_w	:= lower(wheb_mensagem_pck.get_texto(307505)); -- período de prescrições 
		else
			ds_tempo_w	:= lower(wheb_mensagem_pck.get_texto(307503)); -- prescrição 
		end if;	
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(178044, 'DS_TEMPO='|| ds_tempo_w ||';QT_DIETAS=' || qt_dietas_w);
	end if;	
	 
	select 	obter_primeiro_horario(cd_intervalo_p,nr_prescricao_p,null,null) 
	into STRICT		hr_primeiro_horario_w 
	;
	 
	select	converte_char_data(to_char(dt_primeiro_horario_w,'dd/mm/yyyy'),hr_primeiro_horario_w,dt_inicio_prescr_w) 
	into STRICT		dt_inicio_medic_w 
	;
 
	select	max(cd_intervalo) 
	into STRICT 	cd_intervalo_w 
	from	dieta 
	where	cd_dieta = cd_dieta_p;
	 
	if (obter_se_limpa_prim_hor(coalesce(cd_intervalo_p, cd_intervalo_w), cd_setor_prescr_w) = 'S') then	 
		ds_horarios_w		:= '';
		dt_inicio_medic_w	:= null;			
	end if;
		 
	SELECT * FROM Calcular_Horario_Prescricao(nr_prescricao_p, coalesce(cd_intervalo_p, cd_intervalo_w), dt_primeiro_horario_w, dt_inicio_medic_w, nr_horas_validade_w, null, null, null, nr_intervalo_w, ds_horarios1_w, ds_horarios2_w, 'N', null) INTO STRICT nr_intervalo_w, ds_horarios1_w, ds_horarios2_w;
	 
	 
	if (dt_inicio_medic_w IS NOT NULL AND dt_inicio_medic_w::text <> '') then 
		ds_horarios_w := substr(ds_horarios1_w||ds_horarios2_w,1,2000);
	end if;
	 
	select	max(IE_VIA_APLICACAO) 
	into STRICT	IE_VIA_APLICACAO_w 
	from	dieta 
	where	cd_dieta	= cd_dieta_p;
	 
	ie_dose_espec_agora_w := obter_se_marca_hor_esp(nr_atendimento_w,nr_prescricao_p,ie_dose_esp_param_w);
		 
	if (ie_dose_espec_agora_w = 'S') then 
		select	to_char(max(a.dt_fim + 1/1440),'hh24:mi') 
		into STRICT	hr_dose_especial_w 
		from	rep_jejum a, 
			prescr_medica b 
		where a.nr_prescricao = b.nr_prescricao 
        and	coalesce(b.dt_suspensao::text, '') = '' 
        and  coalesce(a.ie_suspenso,'N') <> 'S' 
        and  dt_fim > clock_timestamp()    
		and	b.nr_atendimento	= nr_atendimento_w;
		 
		if (coalesce(hr_dose_especial_w::text, '') = '') then 
			hr_dose_especial_w := to_char(clock_timestamp(),'hh24:mi');
		end if;
	end if;
 
 
 
	insert into prescr_dieta( 
		nr_prescricao, 
		nr_sequencia, 
		cd_dieta, 
		qt_parametro, 
		cd_intervalo, 
		dt_atualizacao, 
		nm_usuario, 
		ie_suspenso, 
		IE_VIA_APLICACAO, 
		ds_horarios, 
		hr_prim_horario, 
		ie_dose_espec_agora, 
		hr_dose_especial, 
		ds_observacao 
	) values ( 
		nr_prescricao_p, 
		nr_sequencia_w, 
		cd_dieta_p, 
		qt_parametro_p, 
		coalesce(cd_intervalo_p, cd_intervalo_w), 
		clock_timestamp(), 
		nm_usuario_p, 
		'N', 
		IE_VIA_APLICACAO_w, 
		ds_horarios_w, 
		hr_primeiro_horario_w, 
		ie_dose_espec_agora_w, 
		hr_dose_especial_w, 
		ds_observacao_p		 
	);
	 
	 
	ds_erro_w := Consistir_prescr_dieta(nr_prescricao_p, nr_sequencia_w, cd_estabelecimento_p, cd_perfil_p, nm_usuario_p, ds_erro_w);
	CALL gerar_suplementos_dieta(nr_prescricao_p,nr_sequencia_w,nm_usuario_p,cd_perfil_p);
	 
	if (ie_prescr_dieta_sem_lib_w = 'S') then 
		CALL Gerar_prescr_dieta_hor_sem_lib(nr_prescricao_p,nr_sequencia_w,cd_perfil_p,'N','','N',nm_usuario_p);
	end if;	
		 
	 
end if;
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE inserir_dieta_prescr_dieta ( cd_dieta_p bigint, qt_parametro_p bigint, cd_intervalo_p text, nr_prescricao_p bigint, nm_usuario_p text, cd_perfil_p bigint, cd_estabelecimento_p bigint, ds_observacao_p text) FROM PUBLIC;

