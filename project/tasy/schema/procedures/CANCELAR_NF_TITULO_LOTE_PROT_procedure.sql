-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cancelar_nf_titulo_lote_prot ( nr_seq_lote_prot_p bigint, nm_usuario_p text, ie_desvincular_p text, nr_seq_mot_cancel_p text, ds_motivo_estorno_p text, dt_estorno_cancel_p timestamp) AS $body$
DECLARE


nr_seq_protocolo_w		bigint;
nr_titulo_w			bigint;
nr_seq_nf_w			bigint;
nr_nota_fiscal_w			varchar(255);
qt_nf_w				integer;
qt_tit_w				integer;
qt_tit_lote_w			integer;
dt_atualizacao_estoque_w		timestamp;
cd_estabelecimento_w		bigint;
ie_forma_canc_tit_prot_w		varchar(4);
nr_seq_titulo_w			bigint;
cd_tipo_recebimento_w		bigint;
cd_moeda_w			bigint;
dt_emissao_w			timestamp;
vl_saldo_titulo_w			double precision;
nr_seq_trans_fin_w			bigint;
ds_mensagem_w			varchar(255)	:= null;
nr_titulo_contab_w			bigint;
ds_titulos_contab_w		varchar(4000);
ds_historico_w			varchar(255);
nr_sequencia_w                  titulo_pagar.nr_seq_nota_fiscal%type;
nr_titulo_pagar_w               titulo_pagar.nr_titulo%type;
ie_tit_tributo_paciente_w	varchar(1);
ds_erro_w			varchar(4000);
ie_status_envio_w		nota_fiscal.ie_status_envio%type;
ie_permite_cancelar_estornar_w	varchar(1) := 'N';
cd_convenio_w           protocolo_convenio.cd_convenio%type;
c01 CURSOR FOR
SELECT	nr_seq_protocolo,
        cd_convenio,
        cd_estabelecimento
from	protocolo_convenio
where	nr_seq_lote_protocolo = nr_seq_lote_prot_p;


c02 CURSOR FOR
SELECT	/*+ index (a titrece_proconv_fk_i) */	nr_titulo,
	cd_moeda,
	vl_saldo_titulo,
	dt_emissao
from	titulo_receber a
where	nr_seq_protocolo_w <> 0
and	nr_seq_protocolo = nr_seq_protocolo_w
and	coalesce(nr_seq_lote_prot::text, '') = ''

union

SELECT	nr_titulo,
	cd_moeda,
	vl_saldo_titulo,
	dt_emissao
from	titulo_receber a
where	a.nr_seq_lote_prot = nr_seq_lote_prot_p
order by 1;

c03 CURSOR FOR
SELECT	nr_sequencia,
	nr_nota_fiscal
from	nota_fiscal
where	nr_seq_lote_prot = nr_seq_lote_prot_p
and	ie_situacao = '1'
order by 1;

c04 CURSOR FOR
SELECT tp.nr_titulo 
from   titulo_pagar tp
where  tp.nr_seq_nota_fiscal = nr_seq_nf_w;


BEGIN

open C01;
loop
fetch C01 into	
	nr_seq_protocolo_w,
    cd_convenio_w,
    cd_estabelecimento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	select	count(*)
	into STRICT	qt_tit_lote_w
	from	titulo_receber
	where	nr_seq_lote_prot	= nr_seq_lote_prot_p;
	
	select	count(*)
	into STRICT	qt_tit_w
	from	titulo_receber a
	where	nr_seq_protocolo_w <> 0
	and	nr_seq_protocolo = nr_seq_protocolo_w
	order by 1;	

	select	count(*)
	into STRICT	qt_nf_w
	from	nota_fiscal
	where	nr_seq_lote_prot = nr_seq_lote_prot_p
	order by 1;
	
	Select	coalesce(max(ie_forma_canc_tit_prot), 'A')
	into STRICT	ie_forma_canc_tit_prot_w
	from	parametro_contas_receber
	where	cd_estabelecimento = cd_estabelecimento_w;

	select	coalesce(min(cd_tipo_recebimento),4)
	into STRICT	cd_tipo_recebimento_w
	from	tipo_recebimento
	where	ie_tipo_consistencia = 4
	and     ((cd_estabelecimento = cd_estabelecimento_w) or (coalesce(cd_estabelecimento::text, '') = ''));

	select	max(nr_seq_trans_fin)
	into STRICT	nr_seq_trans_fin_w
	from	tipo_recebimento
	where	cd_tipo_recebimento	= cd_tipo_recebimento_w;

	if (qt_tit_w = 0) and (qt_nf_w = 0) and (qt_tit_lote_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186195);
		/*Este lote de protocolo nao possui titulos ou notas a serem canceladas.*/

	end if;
	
	ds_titulos_contab_w	:= null;
	
	open C02;
	loop
	fetch C02 into	
		nr_titulo_w,
		cd_moeda_w,
		vl_saldo_titulo_w,
		dt_emissao_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		
		if (dt_emissao_w > dt_estorno_cancel_p) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(332740, 'NR_TITULO=' || nr_titulo_w);
		/*Data de estorno/cancelamento menor que a data de emissao do titulo. Titulo XXXXXX*/

		end if;

		if (ie_forma_canc_tit_prot_w = 'A') then
			CALL Cancelar_Titulo_Receber(nr_titulo_w, nm_usuario_p, 'N',dt_estorno_cancel_p);
		else
			Select	coalesce(max(nr_sequencia),0) + 1
			into STRICT	nr_seq_titulo_w
			from	titulo_receber_liq
			where	nr_titulo = nr_titulo_w;

			insert into Titulo_Receber_liq(nr_titulo,
				nr_sequencia, 		
				dt_recebimento,
				vl_recebido, 		
				vl_descontos,			
				vl_juros, 
				vl_multa, 		
				cd_moeda, 			
				dt_atualizacao, 
				nm_usuario,		
				cd_tipo_recebimento, 	
				ie_acao, 
				vl_rec_maior, 		
				vl_glosa,		
				ie_lib_caixa,
				nr_seq_trans_fin,
				nr_lote_contab_antecip,
				nr_lote_contab_pro_rata,
				nr_lote_contabil)
			values (nr_titulo_w, 		
				nr_seq_titulo_w, 		
				dt_estorno_cancel_p, 
				vl_saldo_titulo_w,		
				0,				
				0,
				0, 			
				cd_moeda_w, 			
				clock_timestamp(), 
				nm_usuario_p, 	
				cd_tipo_recebimento_w,	
				'I', 
				0, 			
				0,				
				'S',
				nr_seq_trans_fin_w,
				0,
				0,
				0);
				
				nr_titulo_contab_w	:= null;
				
				CALL gerar_titulo_rec_liq_cc(cd_estabelecimento_w, null, nm_usuario_p, nr_titulo_w, nr_seq_titulo_w);
				nr_titulo_contab_w := pls_gerar_tit_rec_liq_mens(nr_titulo_w, nr_seq_titulo_w, nm_usuario_p, nr_titulo_contab_w);
				CALL atualizar_saldo_tit_rec(nr_titulo_w,nm_usuario_p);

				update	titulo_receber
				set 	ie_situacao		= '3'
				where	nr_titulo			= nr_titulo_w
				and	vl_saldo_titulo		= 0
				and	ie_situacao		in ('2', '4');
				
				if (nr_titulo_contab_w IS NOT NULL AND nr_titulo_contab_w::text <> '') then
					ds_titulos_contab_w	:= substr(ds_titulos_contab_w || nr_titulo_contab_w || ', ',1,4000);
				end if;
		end if;		
		end;
         end loop;
	close C02;
	
	
	if (ds_titulos_contab_w IS NOT NULL AND ds_titulos_contab_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(236517, 'NR_TITULO=' || ds_titulos_contab_w);
	end if;
	

	if (ie_desvincular_p = 'S') then
	
		if (qt_tit_lote_w > 0) then
			ds_mensagem_w := desvincular_titulo_lote_prot(nr_seq_lote_prot_p, nm_usuario_p, ds_mensagem_w);
		else
			ds_mensagem_w := desvincular_titulo_protocolo(nr_seq_protocolo_w, nm_usuario_p, ds_mensagem_w);
		end if;
	end if;

	if (ctb_online_pck.get_modo_lote(6,cd_estabelecimento_w) = 'S') and (ctb_online_pck.get_geracao_lote_receita(cd_convenio_w, cd_estabelecimento_w, nm_usuario_p, obter_tipo_convenio(cd_convenio_w)) in ('ENF', 'ETR')) then
			CALL ctb_contab_onl_lote_receita(nr_seq_protocolo_w, null, nm_usuario_p, 2, 'N');
	end if;
		
	end;
end loop;
close C01;

ie_permite_cancelar_estornar_w := 'N';
open C03;
	loop
	fetch C03 into	
		nr_seq_nf_w,
		nr_nota_fiscal_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
	
		select	max(dt_atualizacao_estoque),
			max(ie_status_envio)
		into STRICT	dt_atualizacao_estoque_w,
			ie_status_envio_w
		from	nota_fiscal
		where	nr_sequencia = nr_seq_nf_w;
		
		if (ie_status_envio_w = 'E') then
			ie_permite_cancelar_estornar_w := obter_param_usuario(85, 177, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_permite_cancelar_estornar_w);
			
				
			if (coalesce(ie_permite_cancelar_estornar_w,'N') = 'N') then
				
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1016002, 'NR_NOTA=' || nr_nota_fiscal_w);
				
				
			end if;
		end if;	
		
		if (dt_atualizacao_estoque_w IS NOT NULL AND dt_atualizacao_estoque_w::text <> '') then
			CALL estornar_nota_fiscal(nr_seq_nf_w,nm_usuario_p);
		else
			CALL cancelar_nf(nr_seq_nf_w,nm_usuario_p);
		end if;

		ds_historico_w	:= wheb_mensagem_pck.get_texto(299534,'NR_SEQ_LOTE_PROT=' || nr_seq_lote_prot_p);
		
		CALL gerar_historico_nota_fiscal(nr_seq_nf_w, nm_usuario_p, '32', ds_historico_w);
		
		if (nr_seq_mot_cancel_p IS NOT NULL AND nr_seq_mot_cancel_p::text <> '') then
			CALL grava_motivo_estorno_nf(nr_seq_nf_w, nr_seq_mot_cancel_p, ds_motivo_estorno_p);
		end if;
		
		begin
		  ie_tit_tributo_paciente_w := obter_param_usuario(-80, 111, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_tit_tributo_paciente_w);
		  if (coalesce(ie_tit_tributo_paciente_w,'N') = 'S') then
		
	             if (nr_seq_nf_w > 0) Then
		     open c04;
		     loop
		     fetch c04 into	
		     	   nr_titulo_pagar_w;				
	  	     EXIT WHEN NOT FOUND; /* apply on c04 */
		  	  if (nr_titulo_pagar_w > 0) then			
			      CALL cancelar_titulo_pagar(nr_titulo_pagar_w, nm_usuario_p, clock_timestamp());
			      CALL atualizar_Saldo_Tit_Pagar(nr_titulo_pagar_w, nm_usuario_p);		
			  end if;				
		     end loop;
		     close c04;
	           end if;
		  end if;
		exception when others then
		  ds_erro_w := substr(sqlerrm(SQLSTATE),1,1000);
		  CALL gravar_log_tasy(6789,wheb_mensagem_pck.get_texto(794210,'DS_ERRO_W='||ds_erro_w), nm_usuario_p);
	        end;
		
		end;
	end loop;
	close C03;
	
update	nota_fiscal
set	nr_seq_lote_prot 	 = NULL,
	nm_usuario	= nm_usuario_p,
	dt_atualizacao	= clock_timestamp()
where	nr_seq_lote_prot	= nr_seq_lote_prot_p;	
	

update	lote_protocolo
set	dt_geracao_nota  = NULL
where	nr_sequencia = nr_seq_lote_prot_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cancelar_nf_titulo_lote_prot ( nr_seq_lote_prot_p bigint, nm_usuario_p text, ie_desvincular_p text, nr_seq_mot_cancel_p text, ds_motivo_estorno_p text, dt_estorno_cancel_p timestamp) FROM PUBLIC;

