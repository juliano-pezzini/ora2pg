-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE criar_relatorio_dinamico ( nr_seq_relatorio_p relatorio.nr_sequencia%type, nm_usuario_p text) AS $body$
DECLARE

  ie_tipo_banda_w               banda_relatorio.ie_tipo_banda%type;
  nr_tipo_banda_ultimo_w        relatorio_dinamico.nr_tipo_banda%type;
  nr_seq_banda_w                banda_relatorio.nr_sequencia%type;
  qt_relat_dinamico_w           bigint;
  ds_banda_w                    banda_relatorio.ds_banda%type;
  nr_seq_apresentacao_w         banda_relatorio.nr_seq_apresentacao%type;
  query_dominio_w               relatorio.ds_sql%type;
  nm_atributo_w                 banda_relat_campo.nm_atributo%type;
  qt_tamanho_banda_w            relatorio_dinamico.qt_tamanho_banda%type;
  qt_altura_banda_w             relatorio_dinamico.qt_altura_banda%type;
  ie_borda_dir_w                banda_relat_campo.ie_borda_dir%type;
  ie_tipo_campo_w               banda_relat_campo.ie_tipo_campo%type;
  doc_avaliacao_p               doc_relatorio_dinamico.nr_seq_avaliacao%type;
  doc_tabela_p                  doc_relatorio_dinamico.nr_seq_objeto%type;
  doc_template_p                doc_relatorio_dinamico.nr_seq_template%type;
  doc_documento_p               doc_relatorio_dinamico.nr_seq_schematic%type;
  ds_atributos_sql_w            relatorio.ds_sql%type;
  nm_tabela_w                   tabela_visao.nm_tabela%type;
  restricao_documento_w         tabela_sistema_ativacao.ds_sql%type;
  ds_conteudo_w                 banda_relat_campo.ds_conteudo%type;
  contador_w                    bigint;
  contador2_w                   bigint;
  qt_registros_relat_dinamico_w bigint;
  ie_altera_cor_de_fundo_w      banda_relatorio.ie_alterna_cor_fundo%type;
  nr_apres_banda_w              banda_relatorio.nr_seq_apresentacao%type;
  nr_apres_campo_w              banda_relat_campo.nr_seq_apresentacao%type;
  nr_seq_parametro_w            relatorio_parametro.nr_sequencia%type;
  ds_param_query_w              relatorio_parametro.cd_parametro%type;
  ds_param_query_fmt_w          relatorio.ds_sql%type;
  qt_altura_atual_banda_w       banda_relatorio.qt_altura%type;

  C01 CURSOR FOR
    SELECT d.*
      FROM relatorio r, relatorio_dinamico d
     WHERE d.nr_seq_relatorio = r.nr_sequencia
       AND r.nr_sequencia     = nr_seq_relatorio_p
     ORDER BY d.nr_tipo_banda, d.nr_seq_apres;
  type t_c01_w is table of C01%rowtype;
  r_c01_w t_c01_w;

  C02 CURSOR FOR
    SELECT a.*
      FROM relatorio_dinamico a
     WHERE a.nr_seq_relatorio = nr_seq_relatorio_p
       AND a.nr_tipo_banda    = 2;
  type t_c02_w is table of C02%rowtype;
  r_c02_w t_c02_w;

  C03 CURSOR FOR
    SELECT a.*
      FROM PARAMETRO_RELAT_DINAMICO a
     WHERE nr_seq_relatorio = nr_seq_relatorio_p
     and a.nm_atributo NOT IN (
          SELECT DISTINCT b.cd_parametro
            FROM RELATORIO_PARAMETRO b
           WHERE b.nr_seq_relatorio = nr_seq_relatorio_p
             AND b.cd_parametro = a.nm_atributo
       );
  type t_c03_w is table of C03%rowtype;
  r_c03_w t_c03_w;

BEGIN

  /*Raise_application_error(-20011,'Teste kevin - criar_relatorio_dinamico');*/

  CALL limpar_relatorio_dinamico(nr_seq_relatorio_p);

  ds_param_query_fmt_w := NULL;

  SELECT COUNT(nr_sequencia)
    INTO STRICT qt_registros_relat_dinamico_w
    FROM relatorio_dinamico
   WHERE nr_Seq_relatorio = nr_seq_relatorio_p;

  contador2_w := 0;
  nr_apres_banda_w := 1;
  nr_apres_campo_w := 1;

  IF (qt_registros_relat_dinamico_w > 0) THEN

    SELECT COUNT(1)
      INTO STRICT qt_relat_dinamico_w
      FROM relatorio r,
           relatorio_dinamico d
     WHERE d.nr_seq_relatorio = r.nr_sequencia
       AND r.nr_sequencia     = nr_seq_relatorio_p;

    IF (qt_relat_dinamico_w  = 0) THEN
      CALL wheb_mensagem_pck.exibir_mensagem_abort(1129138);
    END IF;

    OPEN C01;
    LOOP
      FETCH C01 BULK COLLECT INTO r_c01_w LIMIT 1000;
      EXIT WHEN r_c01_w.COUNT = 0;

      FOR x IN r_c01_w.FIRST..r_c01_w.LAST LOOP

      BEGIN
        nm_atributo_w := NULL;

        SELECT CASE WHEN                       r_c01_w[x].nr_tipo_banda=1 THEN  'C' WHEN                       r_c01_w[x].nr_tipo_banda=2 THEN  'D' WHEN                       r_c01_w[x].nr_tipo_banda=3 THEN  'S' WHEN                       r_c01_w[x].nr_tipo_banda=4 THEN  'R'                      END
          INTO STRICT ie_tipo_banda_w
;

        /*Tamanho da banda e altura da banda*/

        SELECT MAX(qt_tamanho_banda),
               CASE WHEN ie_tipo_banda_w='D' THEN  34  ELSE MAX(qt_altura_banda) END 
          INTO STRICT qt_tamanho_banda_w,
               qt_altura_banda_w
          FROM relatorio_dinamico
         WHERE nr_seq_relatorio = nr_seq_relatorio_p
           AND nr_tipo_banda = r_c01_w[x].nr_tipo_banda;

        /*Cor de fundo*/

        ie_altera_cor_de_fundo_w := 'N';
        IF (r_c01_w[x].nr_tipo_banda = 2) THEN
          ie_altera_cor_de_fundo_w := 'S';
        END IF;

        ie_borda_dir_w := 'N';

        IF (nr_tipo_banda_ultimo_w <> r_c01_w[x].nr_tipo_banda) THEN
          nr_seq_banda_w := NULL;
        END IF;

        IF (r_c01_w[x].nr_tipo_banda = 2) THEN

          SELECT a.nr_seq_avaliacao,
                 a.nr_seq_objeto,
                 a.nr_seq_template,
                 a.nr_seq_schematic
            INTO STRICT doc_avaliacao_p,
                 doc_tabela_p,
                 doc_template_p,
                 doc_documento_p
            FROM doc_relatorio_dinamico a,
                 relatorio_dinamico b
           WHERE a.NR_SEQUENCIA = b.NR_SEQ_DOC_RELAT_DINAMICO
             AND b.NR_SEQ_RELATORIO = nr_seq_relatorio_p  LIMIT 1;

          IF ((doc_template_p IS NOT NULL AND doc_template_p::text <> '') OR (doc_avaliacao_p IS NOT NULL AND doc_avaliacao_p::text <> '')) THEN
            contador2_w := contador2_w +1;
            nm_atributo_w := ' DS_CAMPO'||contador2_w;
          END IF;

        END IF;

        IF (coalesce(nr_seq_banda_w::text, '') = '') THEN

          query_dominio_w := 'select 1 from dual';

          SELECT CASE WHEN                         r_c01_w[x].nr_tipo_banda=1 THEN                         wheb_mensagem_pck.get_texto(307800) WHEN                         r_c01_w[x].nr_tipo_banda=2 THEN                         wheb_mensagem_pck.get_texto(1128827) WHEN                         r_c01_w[x].nr_tipo_banda=3 THEN                         wheb_mensagem_pck.get_texto(1128828) WHEN                         r_c01_w[x].nr_tipo_banda=4 THEN                         wheb_mensagem_pck.get_texto(307801)                        END ,
                 CASE WHEN                         r_c01_w[x].nr_tipo_banda=1 THEN  'C' WHEN                         r_c01_w[x].nr_tipo_banda=2 THEN  'D' WHEN                         r_c01_w[x].nr_tipo_banda=3 THEN  'S' WHEN                         r_c01_w[x].nr_tipo_banda=4 THEN  'R'                        END
            INTO STRICT ds_banda_w,
                 ie_tipo_banda_w
;

          nr_seq_apresentacao_w := r_c01_w[x].nr_tipo_banda;

          /*Nr_banda == 2: Corpo*/

          IF (r_c01_w[x].nr_tipo_banda = 2) THEN

            IF (doc_documento_p IS NOT NULL AND doc_documento_p::text <> '') THEN

              SELECT DISTINCT b.nm_tabela
                INTO STRICT nm_tabela_w
                FROM doc_relatorio_dinamico a,
                     tabela_visao b,
                     relatorio_dinamico c,
                     objeto_schematic d
               WHERE a.nr_seq_schematic = d.nr_sequencia
                 AND d.nr_Seq_visao       = b.nr_sequencia
                 AND a.nr_seq_relatorio   = nr_seq_relatorio_p
                 AND (a.nr_seq_schematic IS NOT NULL AND a.nr_seq_schematic::text <> '')
                 AND a.NR_SEQUENCIA       = c.NR_SEQ_DOC_RELAT_DINAMICO
                 AND c.nr_tipo_banda      = r_c01_w[x].nr_tipo_banda;

              ds_atributos_sql_w := '';

              OPEN C02;
              LOOP
                FETCH C02 BULK COLLECT INTO r_c02_w LIMIT 1000;
                EXIT WHEN r_c02_w.COUNT = 0;

                FOR y IN r_c02_w.FIRST..r_c02_w.LAST LOOP
                  BEGIN
                    ds_atributos_sql_w := ds_atributos_sql_w || r_c02_w[y].ds_label || ',';
                  END;
                END LOOP;
              END LOOP;
              CLOSE C02;

              SELECT MAX(ds_sql) ds_sql
                INTO STRICT restricao_documento_w
                FROM tabela_sistema_ativacao
               WHERE nr_sequencia = (
                                     SELECT nr_seq_ativacao
                                       FROM objeto_schematic
                                      WHERE nr_sequencia = doc_documento_p
                                    )
                  OR nr_seq_visao = (
                                     SELECT nr_seq_visao
                                       FROM objeto_schematic
                                      WHERE nr_sequencia = doc_documento_p
                                    );

              query_dominio_w := 'select ' || SUBSTR(ds_atributos_sql_w, 0, (LENGTH(ds_atributos_sql_w) -1)) || ' from ' || nm_tabela_w || ' where 1 = 1 ' || restricao_documento_w;

              nm_atributo_w := r_c01_w[x].ds_label;

            elsif (doc_tabela_p IS NOT NULL AND doc_tabela_p::text <> '') THEN

              ie_borda_dir_w := 'S';

              SELECT 'SELECT * FROM (' ||
                      replace(upper(ds_sql), '@RESTRICAO', NULL) ||
                      ') WHERE 1 = 1 '
                INTO STRICT query_dominio_w
                FROM dic_objeto
               WHERE nr_sequencia = (
                                     SELECT nr_seq_dic_objeto
                                       FROM objeto_schematic
                                      WHERE nr_sequencia = doc_tabela_p
                                    );

              nm_atributo_w := r_c01_w[x].ds_label;

            elsif (doc_template_p IS NOT NULL AND doc_template_p::text <> '') THEN

              contador_w := 0;

              OPEN C02;
              LOOP
                FETCH C02 BULK COLLECT INTO r_c02_w LIMIT 1000;
                EXIT WHEN r_c02_w.COUNT = 0;

                FOR y IN r_c02_w.FIRST..r_c02_w.LAST LOOP
                  BEGIN
                    contador_w := contador_w +1;
                    ds_atributos_sql_w := ds_atributos_sql_w || ' ehr_vlr( :NR_SEQ_REG_TEMPLATE' || ', ' || r_c01_w[x].nr_seq_temp_conteudo || ') DS_CAMPO' || contador_w || ',';
                  END;
                END LOOP;
              END LOOP;
              CLOSE C02;

              query_dominio_w := 'select ' || SUBSTR(ds_atributos_sql_w, 0, (LENGTH(ds_atributos_sql_w) -1)) || ' FROM DUAL ';

            elsif (doc_avaliacao_p IS NOT NULL AND doc_avaliacao_p::text <> '') THEN

              contador_w := 0;

              OPEN C02;
              LOOP
                FETCH C02 BULK COLLECT INTO r_c02_w LIMIT 1000;
                EXIT WHEN r_c02_w.COUNT = 0;

                FOR y IN r_c02_w.FIRST..r_c02_w.LAST LOOP
                  BEGIN
                    contador_w := contador_w +1;
                    ds_atributos_sql_w := ds_atributos_sql_w || ' aval( :NR_SEQ_REG_TEMPLATE' || ', ' || r_c01_w[x].ds_label || ') DS_CAMPO' || contador_w || ',';
                  END;
                END LOOP;
              END LOOP;
              CLOSE C02;

              query_dominio_w := 'select ' || SUBSTR(ds_atributos_sql_w, 0, (LENGTH(ds_atributos_sql_w) -1)) || ' FROM DUAL ';

            END IF;

            query_dominio_w := replace(query_dominio_w, '@restricao', '');

          END IF;

          /* Nr_banda == 3: dados demografico */

          IF (r_c01_w[x].nr_tipo_banda = 3 ) THEN

            query_dominio_w := 'SELECT pkg_vap_report.GET_PATIENT_NAME(ap.nr_atendimento) nm_paciente, ' || 'obter_data_nascto_atend(ap.nr_atendimento) dt_nascimento, ' || 'DECODE(obter_sexo_paciente(ap.nr_atendimento), ''M'', ''Male'', ''F'', ''Female'') ds_sexo, ' || 'ap.dt_entrada, ' || 'ap.cd_pessoa_fisica cd_med_record, ' || 'ap.nr_atendimento, ' || 'pkg_vap_report.GET_REFACTORY_PATIENT_NAME(obter_nome_pessoa_fisica(ap.cd_medico_resp, null)) nm_medico_resp, ' || 'obter_ds_convenio_atendimento(ap.nr_atendimento) ds_insurance, ' || 'TO_CHAR(ap.dt_entrada, ''MM/DD/YYYY'') || '' - '' || TO_CHAR(NVL(ap.dt_alta, SYSDATE), ''MM/DD/YYYY'') ds_periodo, ' || 'obter_diag_princ_atendimento(ap.nr_atendimento) ds_diag_principal ' || ' FROM atendimento_paciente ap ' || 'WHERE ap.nr_atendimento = :NR_ATENDIMENTO';

            ie_borda_dir_w := 'S';

          END IF;

          INSERT INTO banda_relatorio(
              nr_sequencia,             -- 1
              ds_banda,                 -- 2
              ie_tipo_banda,            -- 3
              nr_seq_apresentacao,      -- 4
              nm_usuario,               -- 5
              dt_atualizacao,           -- 6
              qt_altura,                -- 7
              ds_cor_fundo,             -- 8
              ie_quebra_pagina,         -- 9
              ie_reimprime_nova_pagina, -- 10
              ie_alterna_cor_fundo,     -- 11
              ie_imprime_vazio,         -- 12
              ie_imprime_primeiro,      -- 13
              ie_borda_sup,             -- 14
              ie_borda_inf,             -- 15
              ie_borda_esq,             -- 16
              ie_borda_dir,             -- 17
              nr_seq_relatorio,         -- 18
              nr_seq_banda_superior,    -- 19
              nm_tabela,                -- 20
              ds_sql,                   -- 21
              ds_expressao,             -- 22
              ds_cor_header,            -- 23
              ds_cor_footer,            -- 24
              ds_cor_quebra,            -- 25
              ds_regra,                 -- 26
              ie_banda_padrao,          -- 27
              qt_max_registro,          -- 28
              ds_observacao,            -- 29
              ie_direction,             -- 30
              ie_fundo_transparente     -- 31
            )
          VALUES (
              nextval('banda_relatorio_seq'),  -- 1
              ds_banda_w,                   -- 2
              ie_tipo_banda_w,              -- 3
              nr_apres_banda_w,             -- 4
              nm_usuario_p,                 -- 5
              clock_timestamp(),                      -- 6
              coalesce(qt_altura_banda_w,'500'), -- 7
              'clWhite',                    -- 8
              'N',                          -- 9
              'N',                          -- 10
              ie_altera_cor_de_fundo_w,     -- 11
              'N',                          -- 12
              'N',                          -- 13
              'N',                          -- 14
              'N',                          -- 15
              'N',                          -- 16
              ie_borda_dir_w,               -- 17
              nr_seq_relatorio_p,           -- 18
              NULL,                         -- 19
              NULL,                         -- 20
              CASE WHEN ie_tipo_banda_w='D' THEN  null  ELSE query_dominio_w END , -- 21
              NULL,                         -- 22
              'clSilver',                   -- 23
              'clWhite',                    -- 24
              '$00E5E5E5',                  -- 25
              NULL,                         -- 26
              'S',                          -- 27
              NULL,                         -- 28
              NULL,                         -- 29
              'N',                          -- 30
              'N'                           -- 31
            )

          RETURNING nr_sequencia
               INTO nr_seq_banda_w;

          nr_tipo_banda_ultimo_w := r_c01_w[x].nr_tipo_banda;
          nr_apres_banda_w := nr_apres_banda_w + 1;

        END IF;

        if (r_c01_w[x].nr_tipo_banda = 2) then
          if (query_dominio_w IS NOT NULL AND query_dominio_w::text <> '') then
              update relatorio set ds_sql = query_dominio_w where nr_sequencia = nr_seq_relatorio_p;
          end if;
        end if;

            
        /* insere banda subdetalhe */

        IF (r_c01_w[x].nr_tipo_banda = 3 ) THEN
                            
          SELECT CASE WHEN r_c01_w[x].cd_tipo='NP' THEN  'NM_PACIENTE' WHEN r_c01_w[x].cd_tipo='DN' THEN  'DT_NASCIMENTO' WHEN r_c01_w[x].cd_tipo='DS' THEN  'DS_SEXO' WHEN r_c01_w[x].cd_tipo='DE' THEN  'DT_ENTRADA' WHEN r_c01_w[x].cd_tipo='MR' THEN  'CD_MED_RECORD' WHEN r_c01_w[x].cd_tipo='NA' THEN  'NR_ATENDIMENTO' WHEN r_c01_w[x].cd_tipo='NM' THEN  'NM_MEDICO_RESP' WHEN r_c01_w[x].cd_tipo='DI' THEN  'DS_INSURANCE' WHEN r_c01_w[x].cd_tipo='DP' THEN  'DS_PERIODO' WHEN r_c01_w[x].cd_tipo='DD' THEN  'DS_DIAG_PRINCIPAL'                        END 
            INTO STRICT nm_atributo_w
;

        END IF;

        IF (r_c01_w[x].nr_tipo_banda = 2 ) THEN
          nm_atributo_w := r_c01_w[x].ds_label;
        END IF;

        IF (r_c01_w[x]coalesce(.ie_tipo_campo::text, '') = '') THEN
          IF (nm_atributo_w IS NOT NULL AND nm_atributo_w::text <> '') THEN
            ie_tipo_campo_w := 0;
          ELSE
            ie_tipo_campo_w := 1;
          END IF;
        ELSE
          ie_tipo_campo_w := r_c01_w[x].ie_tipo_campo;
        END IF;

        IF (coalesce(nm_atributo_w::text, '') = '' AND ie_tipo_campo_w = 1) THEN
          ds_conteudo_w := r_c01_w[x].ds_label;
        END IF;

        INSERT INTO banda_relat_campo(
            nr_sequencia,          -- 1
            nr_seq_banda,          -- 2
            ds_campo,              -- 3
            ds_label,              -- 4
            nr_seq_apresentacao,   -- 5
            ie_tipo_campo,         -- 6
            qt_altura,             -- 7
            qt_tamanho,            -- 8
            nm_atributo,           -- 9
            qt_topo,               -- 10
            qt_esquerda,           -- 11
            ds_tipo_fonte,         -- 12
            qt_tam_fonte,          -- 13
            ds_cor_label,          -- 14
            ds_conteudo,           -- 15
            nm_usuario,            -- 16
            dt_atualizacao,        -- 17
            ds_cor_fundo,          -- 18
            ie_ajustar_tamanho,    -- 19
            ie_borda_sup,          -- 20
            ie_borda_inf,          -- 21
            ie_borda_esq,          -- 22
            ie_borda_dir,          -- 23
            ie_totalizar,          -- 24
            ie_campo_quebra,       -- 25
            ie_quebra_pagina,      -- 26
            ie_zera_apos_imprimir, -- 27
            ie_transparente,       -- 28
            ie_alinhamento,        -- 29
            ie_estender,           -- 30
            ie_alinhar_banda,      -- 31
            ds_cor_fonte           -- 32
          )
        VALUES (
            nextval('banda_relat_campo_seq'),                   -- 1
            nr_seq_banda_w,                                  -- 2
            COALESCE(r_c01_w[x].nm_label, r_c01_w[x].ds_label),                             -- 3
            CASE WHEN r_c01_w[x].nr_tipo_banda <> 3 THEN r_c01_w[x].nm_label ELSE NULL END, -- 4
            nr_apres_campo_w,                                -- 5
            ie_tipo_campo_w,                                 -- 6
            coalesce(r_c01_w[x].nr_altura, 31),                   -- 7
            coalesce(r_c01_w[x].nr_comprimento, 150),             -- 8
            nm_atributo_w,                                   -- 9
            r_c01_w[x].nr_eixo_y,                            -- 10
            r_c01_w[x].nr_eixo_x,                            -- 11
            coalesce(r_c01_w[x].ie_tipo_fonte, 'Arial'),          -- 12
            coalesce(r_c01_w[x].nr_tam_fonte, 8),                 -- 13
            coalesce(r_c01_w[x].ds_cor_fundo_label, 'clWhite'),   -- 14
            ds_conteudo_w,                                   -- 15
            nm_usuario_p,                                    -- 16
            clock_timestamp(),                                         -- 17
            coalesce(r_c01_w[x].ds_cor_fundo_descricao, 'clWhite'),-- 18
            'N',                                             -- 19
            'N',                                             -- 20
            'N',                                             -- 21
            'N',                                             -- 22
            'N',                                             -- 23
            'N',                                             -- 24
            'N',                                             -- 25
            'N',                                             -- 26
            'N',                                             -- 27
            (CASE WHEN r_c01_w[x](.ds_cor_fundo_descricao IS NOT NULL AND .ds_cor_fundo_descricao::text <> '') THEN 'N' ELSE 'S' END),-- 28
            coalesce(r_c01_w[x].ie_alinhamento, 'C'),             -- 29
            'N',                                             -- 30
            'N',                                             -- 31
            'clBlack'                                        -- 32
          )

        RETURNING(qt_altura + qt_topo) 
             INTO qt_altura_banda_w;

        /*INICIO AJUSTAR ALTURA BANDA*/

        BEGIN
          SELECT br.qt_altura
            INTO STRICT qt_altura_atual_banda_w
            FROM banda_relatorio br 
           WHERE br.nr_sequencia = nr_seq_banda_w;
        EXCEPTION WHEN no_data_found THEN
          qt_altura_atual_banda_w := 0;
        END;

        IF (qt_altura_banda_w <> qt_altura_atual_banda_w) THEN 
          UPDATE banda_relatorio
             SET qt_altura = qt_altura_banda_w
           WHERE nr_sequencia = nr_seq_banda_w;
        END IF;

      END;

      nr_apres_campo_w := nr_apres_campo_w + 1;

      END LOOP;
    END LOOP;
    CLOSE C01;
  END IF;

  /*Parametros*/

  OPEN C03;
  LOOP
    FETCH C03 BULK COLLECT INTO r_c03_w LIMIT 1000;
    EXIT WHEN r_c03_w.COUNT = 0;

    FOR z IN r_c03_w.FIRST..r_c03_w.LAST LOOP

    BEGIN
      IF (r_c03_w[z](.nr_sequencia IS NOT NULL AND .nr_sequencia::text <> '')) THEN
        INSERT INTO relatorio_parametro(
            NR_SEQUENCIA,           -- 1
            CD_PARAMETRO,           -- 2
            DS_PARAMETRO,           -- 3
            IE_TIPO_ATRIBUTO,       -- 4
            NR_SEQ_RELATORIO,       -- 5
            IE_ORIGEM_INFORMACAO,   -- 6
            DT_ATUALIZACAO,         -- 7
            NM_USUARIO,             -- 8
            IE_MULTI_LINHA,         -- 9
            NR_SEQ_APRESENT,        -- 10
            CD_DOMINIO,             -- 11
            DS_SQL,                 -- 12
            VL_PADRAO,              -- 13
            IE_FORMA_APRESENT,      -- 14
            QT_TAMANHO_CAMPO,       -- 15
            DS_VALOR_PARAMETRO,     -- 16
            IE_FORMA_PASSAGEM,      -- 17
            DS_ALIAS,               -- 18
            DS_MASCARA,             -- 19
            QT_TAM_BYTE,            -- 20
            NR_SEQ_LOCALIZAR,       -- 21
            DS_OBSERVACAO,          -- 22
            QT_DESLOC_DIREITA,      -- 23
            IE_TIPO_IN,             -- 24
            IE_OBRIGATORIO,         -- 25
            QT_TAM_SPAN,            -- 26
            NR_LINHA,               -- 27
            QT_DESLOC_DIREITA_HTML, -- 28
            VL_PADRAO_TESTE         -- 29
          )
        VALUES (
            nextval('relatorio_parametro_seq'), -- 1
            r_c03_w[z].nm_atributo,          -- 2
            r_c03_w[z].ds_parametro,         -- 3
            r_c03_w[z].ie_tipo_atributo,     -- 4
            r_c03_w[z].nr_seq_relatorio,     -- 5
            'U',                             -- 6
            clock_timestamp(),                         -- 7
            nm_usuario_p,                    -- 8
            'N',                             -- 9
            1,                               -- 10
            null,                            -- 11
            null,                            -- 12
            null,                            -- 13
            'ed',                            -- 14
            coalesce(r_c03_w[z].nr_tamanho_obrigatorio, 200),-- 15
            null,                            -- 16
            'P',                             -- 17
            null,                            -- 18
            r_c03_w[z].ds_mascara,           -- 19
            null,                            -- 20
            null,                            -- 21
            null,                            -- 22
            null,                            -- 23
            'N',                             -- 24
            'N',                             -- 25
            null,                            -- 26
            null,                            -- 27
            null,                            -- 28
            r_c03_w[z].ds_valor_padrao       -- 29
          )
        
        RETURNING nr_sequencia,
                  cd_parametro
             INTO nr_seq_parametro_w,
                  ds_param_query_w;

        UPDATE parametro_relat_dinamico prd 
           SET prd.nr_seq_relatorio_parametro = nr_seq_parametro_w 
         WHERE prd.nr_sequencia = r_c03_w[z].nr_sequencia;

         IF coalesce(r_c03_w[z].ie_gerado_auto, 'N') = 'N' then
           IF (r_c03_w[z].ie_tipo_comparacao = 'IS NULL' or r_c03_w[z].ie_tipo_comparacao = 'IS NOT NULL') THEN
              ds_param_query_fmt_w := ds_param_query_fmt_w || ' and ' || ds_param_query_w || ' ' || r_c03_w[z].ie_tipo_comparacao;
           ELSE
              ds_param_query_fmt_w := ds_param_query_fmt_w || ' and ' || ds_param_query_w || ' ' || r_c03_w[z].ie_tipo_comparacao || ' :' || ds_param_query_w;
           END IF;
         END IF;
      END IF;
    END;
    END LOOP;
  END LOOP;
  CLOSE C03;

  /*INICIO GERAR PARAMS NA QUERY*/

  IF (ds_param_query_fmt_w IS NOT NULL AND ds_param_query_fmt_w::text <> '') THEN
    
    SELECT ds_sql
      INTO STRICT query_dominio_w
      FROM relatorio
     WHERE nr_sequencia = nr_seq_relatorio_p;

    IF (query_dominio_w IS NOT NULL AND query_dominio_w::text <> '') then
      UPDATE relatorio r
         SET r.ds_sql = r.ds_sql || ds_param_query_fmt_w
       WHERE r.nr_sequencia = nr_seq_relatorio_p;
    END IF;
  END IF;
  /*FIM GERAR PARAMS NA QUERY*/

  COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE criar_relatorio_dinamico ( nr_seq_relatorio_p relatorio.nr_sequencia%type, nm_usuario_p text) FROM PUBLIC;

