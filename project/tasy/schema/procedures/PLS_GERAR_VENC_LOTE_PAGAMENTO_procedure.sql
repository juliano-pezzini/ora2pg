-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_venc_lote_pagamento (nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

					 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Buscar os pagamentos de prestadores que não estejam, cancelados/estorados e 
chamar as rotinas que atualizam as contas contábeis 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: [ ] Objetos do dicionário [ X ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
------------------------------------------------------------------------------------------------------------------- 
Referências: 
	OPS - Pagamentos de Produção Médica 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
nr_seq_pagamento_w		pls_pagamento_prestador.nr_sequencia%type;
nm_prestador_w			varchar(4000);
nr_seq_atualizacao_w		bigint;
qt_vago_w			bigint := 0;
qt_movimento_w			bigint := 0;
dt_mes_competencia_w		timestamp;
dt_ref_inicial_w		timestamp;
dt_ref_final_w			timestamp;
dt_referencia_w			timestamp;
vl_liquido_w			pls_pag_prest_vencimento.vl_liquido%type;
nr_seq_lote_evento_w		pls_lote_evento.nr_sequencia%type;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
nr_seq_lote_pagamento_w		pls_lote_pagamento.nr_sequencia%type;
ie_data_lote_prod_med_w		pls_parametro_contabil.ie_data_lote_prod_med%type;
dt_referencia_month_w		timestamp;
qt_prest_pgto_w			bigint;
qt_outro_w			bigint;

C01 CURSOR FOR 
	SELECT	b.nr_sequencia, 
		a.dt_mes_competencia, 
		b.nr_seq_prestador, 
		substr(pls_obter_dados_prestador(b.nr_seq_prestador, 'N'), 1, 255) nm_prestador 
	from	pls_pagamento_prestador b, 
		pls_lote_pagamento a 
	where	a.nr_sequencia = b.nr_seq_lote 
	and	b.nr_seq_lote = nr_seq_lote_p 
	and	coalesce(b.ie_cancelamento::text, '') = '';
	
C02 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		b.vl_liquido 
	from	pls_pag_prest_vencimento b, 
		pls_pagamento_prestador a 
	where	a.nr_sequencia = b.nr_seq_pag_prestador 
	and	a.nr_seq_lote = nr_seq_lote_p;
	
c_contas_pagamento CURSOR FOR 
	SELECT	c.nr_sequencia nr_seq_conta 
	from	pls_conta_medica_resumo	r, 
		pls_conta		c 
	where	c.nr_sequencia		= r.nr_seq_conta 
	and	r.nr_seq_lote_pgto 	= nr_seq_lote_p 
	and	coalesce(c.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p 
	group by c.nr_sequencia;

c_rec_glosa_prot CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	pls_rec_glosa_protocolo a 
	where	a.dt_apresentacao_lote between dt_ref_inicial_w and dt_ref_final_w 
	and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p;

c_rec_glosa_prot_w c_rec_glosa_prot%rowtype;
	
/*cursor c_rec_glosa_conta is 
	select	a.nr_sequencia 
	from	pls_rec_glosa_conta a 
	where	a.nr_seq_protocolo	= c_rec_glosa_prot_w.nr_sequencia; 
 
c_rec_glosa_conta_w c_rec_glosa_conta%rowtype;*/
 
		 
BEGIN 
 
select	nextval('pls_atualizacao_contabil_seq') 
into STRICT	nr_seq_atualizacao_w
;
 
select	trunc(a.dt_mes_competencia,'month') 
into STRICT	dt_referencia_w 
from	pls_lote_pagamento	a 
where	a.nr_sequencia	= nr_seq_lote_p;
 
dt_ref_inicial_w	:= dt_referencia_w;
dt_ref_final_w		:= fim_dia(fim_mes(dt_referencia_w));
 
begin 
select	max(coalesce(ie_data_lote_prod_med,'C')) 
into STRICT	ie_data_lote_prod_med_w 
from	pls_parametro_contabil 
where	cd_estabelecimento	= cd_estabelecimento_p;
exception 
when others then 
	ie_data_lote_prod_med_w		:= 'C';
end;
 
dt_referencia_month_w	:= trunc( dt_referencia_w,'month');
 
select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto, 
	sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro 
into STRICT	qt_prest_pgto_w, 
	qt_outro_w 
from	pls_esquema_contabil 
where	ie_tipo_regra		= 'PM' 
and	cd_estabelecimento = cd_estabelecimento_p 
and	dt_referencia_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_referencia_month_w);
 
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then 
 
	-- jtonon - OS 837385 - Gera backup das tabelas / TRIBUTO para PLS_TRIBUTO_LOG / TRIBUTO_CONTA_PAGAR para PLS_TRIB_CONTA_PAGAR_LOG / REGRA_CALCULO_IRPF para PLS_REGRA_CALCULO_IRPF_LOG 
	CALL pls_gerar_log_trib_pagto( nr_seq_lote_p );
	 
	CALL gravar_processo_longo('Gerando vencimentos' ,'PLS_GERAR_VENC_LOTE_PAGAMENTO',0);
	 
	open C01;
	loop 
	fetch C01 into 
		nr_seq_pagamento_w, 
		dt_mes_competencia_w, 
		nr_seq_prestador_w, 
		nm_prestador_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		CALL gravar_processo_longo(nr_seq_prestador_w || ' - '||nm_prestador_w ,'PLS_GERAR_VENC_LOTE_PAGAMENTO',-1);
		 
		CALL pls_gerar_venc_pag_prest(	nr_seq_pagamento_w, 
						cd_estabelecimento_p, 
						nm_usuario_p);
						 
		CALL pls_gerar_even_mov_pos_tribut(	nr_seq_pagamento_w, 
						cd_estabelecimento_p, 
						nm_usuario_p);
						 
		CALL pls_gerar_item_pag_pos_tribut(	nr_seq_pagamento_w, 
						cd_estabelecimento_p, 
						nm_usuario_p);
	end loop;
	close C01;
	 
	CALL pls_gerar_evento_movto_aprop(nr_seq_lote_p, nm_usuario_p);
	 
	CALL pls_atualizar_codificacao_pck.pls_atualizar_codificacao(trunc(dt_mes_competencia_w, 'month'));
	 
	qt_vago_w := ctb_pls_atualizar_trib_pag_in(nr_seq_lote_p, null, null, nm_usuario_p, cd_estabelecimento_p, qt_vago_w);
end if;
 
for r_C02_w in C02 loop 
	update	pls_pagamento_prestador 
	set	vl_pagamento	= r_C02_w.vl_liquido 
	where	nr_sequencia	= r_c02_w.nr_sequencia;
end loop;
 
update	pls_lote_pagamento 
set	dt_geracao_vencimentos	= clock_timestamp() 
where	nr_sequencia		= nr_seq_lote_p;
 
select	max(nr_sequencia) 
into STRICT	nr_seq_lote_evento_w 
from	pls_lote_evento 
where	dt_competencia between dt_ref_inicial_w and dt_ref_final_w 
and	coalesce(cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p 
and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');
 
nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 41, 'G', qt_movimento_w, nr_seq_atualizacao_w);
 
if (coalesce(nr_seq_lote_evento_w, 0) <> 0) then 
	begin 
	qt_movimento_w := ctb_pls_atualizar_prod_eve_in(	nr_seq_lote_evento_w, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
	end;
end if;
 
				 
open c_contas_pagamento;
loop 
fetch c_contas_pagamento into	 
	nr_seq_conta_w;
EXIT WHEN NOT FOUND; /* apply on c_contas_pagamento */
	begin 
	if (qt_outro_w > 0) then 
		qt_movimento_w := ctb_pls_atualizar_prod_med_in(	nr_seq_conta_w, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
	end if;
	 
	if (qt_prest_pgto_w > 0) then 
		qt_movimento_w := ctb_pls_atualizar_prod_med_res(	nr_seq_conta_w, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w, dt_referencia_w);
	end if;
	 
	commit;
		 
	end;
end loop;
close c_contas_pagamento;
 
qt_movimento_w := ctb_pls_atualizar_trib_pag_in(	nr_seq_lote_p, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
				 
nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 41, 'A', qt_movimento_w, nr_seq_atualizacao_w);
					 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_venc_lote_pagamento (nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

