-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_prescr_medica_bp ( ie_prescr_emergencia_p text, ie_motivo_prescricao_p text, nm_usuario_original_p text, ie_prescritor_aux_p text, cd_medico_p text, cd_pessoa_fisica_p text, ie_alterar_prim_hor_p INOUT text, ie_alterar_horas_val_p INOUT text, dt_liberacao_p timestamp, dt_liberacao_medico_p timestamp, dt_primeiro_horario_p INOUT timestamp, dt_prescricao_p timestamp, ie_acao_p bigint, nr_atendimento_p bigint, cd_setor_atendimento_p bigint, nr_horas_validade_p INOUT bigint, nr_prescricao_p bigint, ie_hemodialise_p text, qt_prescricao_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_estabelecimento_w	smallint	:= wheb_usuario_pck.get_cd_estabelecimento;
cd_perfil_w				bigint	:= wheb_usuario_pck.get_cd_perfil;
nr_horas_validade_w		bigint;
qt_min_prescr_alta_w	varchar(10);
qt_horas_validade_w		varchar(10);
qt_horas_futuras_w		bigint;
qt_hor_fut_sem_atend_w	bigint;
qt_hor_fut_considerar_w	bigint;
ie_obriga_mot_retr_w	varchar(10);
ie_const_dt_futura_w	varchar(10);
ie_calcula_validade_w	varchar(10);
ie_estender_w			varchar(10);
ie_regra_w				varchar(10);
ie_consiste_dt_fut_w	varchar(10);
ie_permite_prescr_w		varchar(1)	:= 'S';
ie_alterar_prim_hor_w	varchar(1);
ie_alterar_horas_val_w	varchar(1);
ie_dia_seguinte_w		varchar(1);
ie_prim_prescr_atend_w  varchar(1);
dt_entrada_w			timestamp;
dt_alta_w				timestamp;
dt_inicio_validade_w	timestamp;
dt_primeiro_horario_w	timestamp;
ie_prescr_ant_entrada_w varchar(1) := 'S';


BEGIN
if (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	begin

	qt_min_prescr_alta_w := obter_param_usuario(924, 43, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, qt_min_prescr_alta_w);

	if (coalesce(qt_min_prescr_alta_w,'0') <> '0') and (ie_acao_p <> 3) and (ie_prescr_emergencia_p <> 'S') and (nr_atendimento_p <> 0) then
		begin

		select	max(dt_alta)
		into STRICT	dt_alta_w
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;

		if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then
			if	((dt_alta_w + (qt_min_prescr_alta_w)::numeric  /1440) < dt_prescricao_p) then
				begin
				-- Tempo de geração de prescrição, após alta do paciente, excedido! Parâmetro [43].
				CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(55855);
				end;
			end if;
		end if;
		end;
	end if;

	ie_obriga_mot_retr_w := obter_param_usuario(924, 567, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_obriga_mot_retr_w);

	if (ie_obriga_mot_retr_w = 'S') and (coalesce(ie_motivo_prescricao_p::text, '') = '') and (ie_prescr_emergencia_p = 'S') then
		begin
		--É necessário informar o campo motivo da prescrição ao fazer uma prescrição retrógrada!
		CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(55861);
		end;
	end if;

	if (cd_setor_atendimento_p IS NOT NULL AND cd_setor_atendimento_p::text <> '') then
		begin
		if (cd_setor_atendimento_p <> 0) then
			select	coalesce(ie_permite_prescricao,'S')
			into STRICT	ie_permite_prescr_w
			from	setor_atendimento
			where	cd_setor_atendimento	= cd_setor_atendimento_p;
		end if;

		if (ie_permite_prescr_w = 'N') then
			begin
			--Não é permitido fazer prescrições para este setor!
			CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(55863);
			end;
		else
			begin
			select	coalesce(max(ie_permite),'S')
			into STRICT	ie_permite_prescr_w
			from	regra_prescr_setor
			where	cd_setor_atendimento	= cd_setor_atendimento_p
			and	cd_perfil		= cd_perfil_w;

			if (ie_permite_prescr_w = 'N') then
				begin
				--Não é permitido fazer prescrições para este setor!
				CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(55863);
				end;
			end if;
			end;
		end if;
		end;
	end if;

	qt_horas_validade_w := obter_param_usuario(924, 154, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, qt_horas_validade_w);
	ie_prim_prescr_atend_w := obter_param_usuario(924, 960, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_prim_prescr_atend_w);

	nr_horas_validade_w := (qt_horas_validade_w)::numeric;

	if (nm_usuario_original_p = nm_usuario_p) and
		((coalesce(dt_liberacao_p::text, '') = '') and (coalesce(dt_liberacao_medico_p::text, '') = '')) and (nr_horas_validade_p > 0) and (nr_horas_validade_p > nr_horas_validade_w) and (ie_hemodialise_p <> 'O') and (coalesce(ie_prim_prescr_atend_w,'S') = 'S') and (coalesce(qt_prescricao_p,0) > 0) then
		begin
		--O número máximo de horas de validade da prescrição é #@NR_HORAS_VALIDADE#@. Parâmetro[154].
		CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(55886, 'NR_HORAS_VALIDADE='||nr_horas_validade_w);
		end;
	end if;

	ie_const_dt_futura_w := obter_param_usuario(924, 44, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_const_dt_futura_w);

	if	((ie_const_dt_futura_w	= 'S') or (coalesce(nr_atendimento_p::text, '') = '')) and (nr_horas_validade_w > 0) then
		begin

		if (coalesce(dt_primeiro_horario_p::text, '') = '') then
			dt_inicio_validade_w	:= dt_prescricao_p;
		else
			begin
			if	((dt_prescricao_p - trunc(dt_prescricao_p)) > (dt_primeiro_horario_p - trunc(dt_primeiro_horario_p))) then
				dt_inicio_validade_w	:= to_date(to_char(dt_prescricao_p + 1, 'dd/mm/yyyy'),'dd/mm/yyyy');
			else
				dt_inicio_validade_w	:= to_date(to_char(dt_prescricao_p, 'dd/mm/yyyy'),'dd/mm/yyyy');
			end if;

			dt_inicio_validade_w	:= to_date(to_char(dt_inicio_validade_w,'dd/mm/yyyy ') || to_char(dt_primeiro_horario_p,'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');
			end;
		end if;

		if	((clock_timestamp() + nr_horas_validade_w / 24) < coalesce(dt_inicio_validade_w, dt_primeiro_horario_p)) then
			begin
			--A data de início da validade da prescrição não pode ser superior a #@DT_INICIO#@ horas a partir deste momento !
			CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(55890, 'DT_INICIO='||nr_horas_validade_w);
			end;
		end if;
		end;
	end if;

	qt_horas_futuras_w := obter_param_usuario(924, 22, cd_perfil_w, nm_usuario_P, cd_estabelecimento_w, qt_horas_futuras_w);
	ie_consiste_dt_fut_w := obter_param_usuario(924, 44, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_consiste_dt_fut_w);
	ie_prescr_ant_entrada_w := obter_param_usuario(924, 990, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_prescr_ant_entrada_w);
	qt_hor_fut_sem_atend_w := obter_param_usuario(924, 1091, cd_perfil_w, nm_usuario_P, cd_estabelecimento_w, qt_hor_fut_sem_atend_w);

	if	((ie_consiste_dt_fut_w = 'S')	or (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '')) then

		if (coalesce(nr_atendimento_p,0) = 0) and (coalesce(qt_hor_fut_sem_atend_w,0) > 0) then
			qt_hor_fut_considerar_w := qt_hor_fut_sem_atend_w;
		else
			qt_hor_fut_considerar_w	:= coalesce(qt_horas_futuras_w,3);
		end if;

		if (qt_hor_fut_considerar_w > 0) then
			CALL consistir_data_prescricao(qt_hor_fut_considerar_w,dt_prescricao_p);
		end if;
	end if;

	if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
		begin
		select	dt_entrada
		into STRICT	dt_entrada_w
		from	atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;

		if (dt_entrada_w > dt_prescricao_p) and (ie_prescr_ant_entrada_w = 'N') then
			begin
			--A data da prescrição não pode ser menor que a entrada do atendimento!
			CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(55990);
			end;
		end if;
		end;
	end if;

	if	((ie_acao_p = 2) or (ie_acao_p = 1)) and
		--(ie_prescr_emergencia_p <> 'S') then
		(1 = 2) then
		begin
		select	to_date(to_char(dt_prescricao_p, 'dd/MM/yyyy') || ' ' || to_char(dt_primeiro_horario_p,'hh24:mm'),'dd/MM/yyyy hh24:mi')
		into STRICT	dt_primeiro_horario_w
		;

		if (dt_prescricao_p > dt_primeiro_horario_w) then
			begin

			dt_primeiro_horario_w	:= obter_prim_horario_prescricao(nr_atendimento_p,cd_setor_atendimento_p,dt_prescricao_p,nm_usuario_p,'R');
			ie_alterar_prim_hor_w	:= 'S';

			ie_calcula_validade_w := obter_param_usuario(924, 98, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_calcula_validade_w);

			if (ie_calcula_validade_w	= 'R') then
				ie_calcula_validade_w	:= obter_se_calcula_validade(cd_setor_atendimento_p);
			end if;

			if (ie_calcula_validade_w <> 'N') then
				begin

				ie_estender_w := obter_param_usuario(924, 249, cd_perfil_w, nm_usuario_p, cd_estabelecimento_w, ie_estender_w);

				ie_alterar_horas_val_w	:= 'S';
				nr_horas_validade_w	:= obter_horas_validade_prescr(
									dt_primeiro_horario_w,
									nr_atendimento_p,
									ie_estender_w,
									'A',
									dt_prescricao_p,
									nr_prescricao_p);
				end;
			end if;
			end;
		end if;
		end;
	end if;

	if	((ie_acao_p = 2) or (ie_acao_p = 1)) then
		begin
		if (ie_prescritor_aux_p = 'S') and (cd_pessoa_fisica_p = cd_medico_p) then
			begin
			--O profissional responsável pela prescrição não pode ser o auxiliar que está inserindo-a!
			CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(56048);
			end;
		end if;

		if (cd_setor_atendimento_p IS NOT NULL AND cd_setor_atendimento_p::text <> '') and (trunc(clock_timestamp()) < trunc(dt_prescricao_p)) then
			begin
			select	coalesce(ie_dia_seguinte,'S')
			into STRICT	ie_dia_seguinte_w
			from	setor_atendimento
			where	cd_setor_atendimento	= cd_setor_atendimento_p;

			if (ie_dia_seguinte_w = 'N') then
				begin
				--Neste setor não é permitido fazer prescrições para o dia seguinte!
				CALL WHEB_MENSAGEM_PCK.EXIBIR_MENSAGEM_ABORT(56051);
				end;
			end if;
			end;
		end if;
		end;
	end if;
	end;
end if;
ie_alterar_prim_hor_p	:= ie_alterar_prim_hor_w;
dt_primeiro_horario_p	:= dt_primeiro_horario_w;
ie_alterar_horas_val_p	:= ie_alterar_horas_val_w;
nr_horas_validade_p	:= nr_horas_validade_w;
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_prescr_medica_bp ( ie_prescr_emergencia_p text, ie_motivo_prescricao_p text, nm_usuario_original_p text, ie_prescritor_aux_p text, cd_medico_p text, cd_pessoa_fisica_p text, ie_alterar_prim_hor_p INOUT text, ie_alterar_horas_val_p INOUT text, dt_liberacao_p timestamp, dt_liberacao_medico_p timestamp, dt_primeiro_horario_p INOUT timestamp, dt_prescricao_p timestamp, ie_acao_p bigint, nr_atendimento_p bigint, cd_setor_atendimento_p bigint, nr_horas_validade_p INOUT bigint, nr_prescricao_p bigint, ie_hemodialise_p text, qt_prescricao_p bigint, nm_usuario_p text) FROM PUBLIC;

