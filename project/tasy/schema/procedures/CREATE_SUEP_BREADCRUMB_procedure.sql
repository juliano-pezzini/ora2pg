-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE create_suep_breadcrumb ( ds_lista_tipo_item_p text, nr_seq_suep_edit_p bigint, nr_seq_suep_p INOUT bigint, nr_seq_suep_temp_p INOUT bigint) AS $body$
DECLARE


	ds_lista_w			varchar(1000);
	nr_pos_virgula_w	integer;
	ie_tipo_item_w		item_suep.ie_tipo_item%type;
	nm_usuario_w		varchar(20);

	ie_tipo_item_c01_w	item_suep.ie_tipo_item%type;

	nr_seq_item_c02_w	w_suep_cad_item.nr_sequencia%type;

	c01 CURSOR FOR
		SELECT	ie_tipo_item
		from	item_suep
		where	nr_seq_suep = nr_seq_suep_p
		and		obter_se_contido_char(IE_TIPO_ITEM, ds_lista_w) = 'S';

	c02 CURSOR FOR
		SELECT	nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ie_tipo_item,
				nr_seq_suep,
				nr_seq_apres,
				ie_formato_busca,
				qt_dias_busca,
				qt_consultas,
				ie_restringir_tipo_atend,
				ie_tamanho_card
		from	item_suep
		where	nr_seq_suep = nr_seq_suep_p;

	c02_w			c02%rowtype;


BEGIN

	if (ds_lista_tipo_item_p IS NOT NULL AND ds_lista_tipo_item_p::text <> '') then

		nm_usuario_w	:= wheb_usuario_pck.get_nm_usuario;
		nr_seq_suep_p	:= nr_seq_suep_edit_p;

		if (coalesce(nr_seq_suep_p::text, '') = '') then
			select	nextval('suep_seq')
			into STRICT	nr_seq_suep_p
			;

			insert into SUEP(
					NR_SEQUENCIA,
					DT_ATUALIZACAO,
					NM_USUARIO,
					DT_ATUALIZACAO_NREC,
					NM_USUARIO_NREC,
					DS_TITULO,
					DS_SUEP,
					IE_SITUACAO,
					CD_ESTABELECIMENTO,
					NR_SEQ_APRES,
					IE_SUMARIO_EXCLUSIVO
					) values (
					nr_seq_suep_p,
					clock_timestamp(),
					nm_usuario_w,
					clock_timestamp(),
					nm_usuario_w,
					obter_desc_expressao(792188,'Meus sumários'),
					obter_desc_expressao(792188,'Meus sumários'),
					'A',
					wheb_usuario_pck.get_cd_estabelecimento,
					100,
					'S');

			insert into REGRA_LIBERACAO_SUEP(
					NR_SEQUENCIA,
					DT_ATUALIZACAO,
					NM_USUARIO,
					DT_ATUALIZACAO_NREC,
					NM_USUARIO_NREC,
					NR_SEQ_SUEP,
					CD_ESTABELECIMENTO,
					NM_USUARIO_EXCLUSIVO
					) values (
					nextval('regra_liberacao_suep_seq'),
					clock_timestamp(),
					nm_usuario_w,
					clock_timestamp(),
					nm_usuario_w,
					nr_seq_suep_p,
					wheb_usuario_pck.get_cd_estabelecimento,
					nm_usuario_w);
		else

			select	nextval('w_suep_cadastro_seq')
			into STRICT	nr_seq_suep_temp_p
			;

			insert into w_suep_cadastro(
				NR_SEQUENCIA,
				DT_ATUALIZACAO,
				NM_USUARIO,
				DT_ATUALIZACAO_NREC,
				NM_USUARIO_NREC,
				DS_TITULO,
				DS_SUEP,
				NR_SEQ_SUEP_ORIG
				) SELECT
				nr_seq_suep_temp_p,
				clock_timestamp(),
				nm_usuario_w,
				clock_timestamp(),
				nm_usuario_w,
				ds_titulo,
				ds_suep,
				nr_sequencia
				from suep where nr_sequencia = nr_seq_suep_p;

			open c02;
			loop
			fetch c02 into c02_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin

					select	nextval('w_suep_cad_item_seq')
					into STRICT	nr_seq_item_c02_w
					;

					insert into w_suep_cad_item(
						nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						ie_tipo_item,
						nr_seq_suep,
						nr_seq_apres,
						ie_formato_busca,
						qt_dias_busca,
						qt_consultas,
						ie_restringir_tipo_atend,
						ie_tamanho_card
						) values (
						nr_seq_item_c02_w,
						clock_timestamp(),
						nm_usuario_w,
						clock_timestamp(),
						nm_usuario_w,
						c02_w.ie_tipo_item,
						nr_seq_suep_temp_p,
						c02_w.nr_seq_apres,
						c02_w.ie_formato_busca,
						c02_w.qt_dias_busca,
						c02_w.qt_consultas,
						c02_w.ie_restringir_tipo_atend,
						c02_w.ie_tamanho_card
					);


					insert into w_suep_cad_informacao(
						nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						ie_tipo_diagnostico,
						ie_tipo_meta,
						ie_origem_glicemia,
						ie_result_exame,
						ie_classificacao_doenca,
						nr_seq_apres,
						nr_seq_inf,
						nr_seq_exame,
						nr_seq_item,
						cd_tipo_procedimento,
						ds_informacao_inst,
						ie_evolucao_clinica
						) SELECT
						nextval('w_suep_cad_informacao_seq'),
						clock_timestamp(),
						nm_usuario_w,
						clock_timestamp(),
						nm_usuario_w,
						ie_tipo_diagnostico,
						ie_tipo_meta,
						ie_origem_glicemia,
						ie_result_exame,
						ie_classificacao_doenca,
						nr_seq_apres,
						nr_seq_inf,
						nr_seq_exame,
						nr_seq_item_c02_w,
						cd_tipo_procedimento,
						ds_informacao_inst,
						ie_evolucao_clinica
					from informacao_suep
					where nr_seq_item = c02_w.nr_sequencia;


				end;
			end loop;

		end if;

		ds_lista_w		:= ds_lista_tipo_item_p;

		if (substr(ds_lista_w, length(ds_lista_w)) <> ',') then
			ds_lista_w := ds_lista_w ||',';
		end if;

		delete	FROM ITEM_SUEP
		where	nr_seq_suep = nr_seq_suep_p
		and		obter_se_contido_char(IE_TIPO_ITEM, ds_lista_w) = 'N';

		open c01;
		loop
		fetch c01 into
			ie_tipo_item_c01_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			select	replace(ds_lista_w, ie_tipo_item_c01_w||',', '')
			into STRICT	ds_lista_w
			;
		end	loop;
		close	c01;

		while(ds_lista_w IS NOT NULL AND ds_lista_w::text <> '') loop
			begin

				nr_pos_virgula_w := position(',' in ds_lista_w);

				if (nr_pos_virgula_w <> 0) then
					ie_tipo_item_w	:= substr(ds_lista_w, 1, (nr_pos_virgula_w - 1));
					ds_lista_w		:= substr(ds_lista_w, (nr_pos_virgula_w + 1), length(ds_lista_w));
				end if;

				if (ie_tipo_item_w IS NOT NULL AND ie_tipo_item_w::text <> '') then

					insert into ITEM_SUEP(
							NR_SEQUENCIA,
							DT_ATUALIZACAO,
							NM_USUARIO,
							DT_ATUALIZACAO_NREC,
							NM_USUARIO_NREC,
							IE_TIPO_ITEM,
							NR_SEQ_SUEP,
							NR_SEQ_APRES
							) values (
							nextval('item_suep_seq'),
							clock_timestamp()	,
							nm_usuario_w,
							clock_timestamp(),
							nm_usuario_w,
							ie_tipo_item_w,
							nr_seq_suep_p,
							100);

				end if;

			end;
		end loop;

		commit;

	end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE create_suep_breadcrumb ( ds_lista_tipo_item_p text, nr_seq_suep_edit_p bigint, nr_seq_suep_p INOUT bigint, nr_seq_suep_temp_p INOUT bigint) FROM PUBLIC;

