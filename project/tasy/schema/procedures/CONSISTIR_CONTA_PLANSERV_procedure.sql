-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_conta_planserv ( nr_interno_conta_p bigint, nm_usuario_p text, ie_consistencia_p INOUT text ) AS $body$
DECLARE

 
cd_procedimento_w    procedimento.cd_procedimento%type;
ie_origem_proced_w   procedimento.ie_origem_proced%type;
cd_material_w      material.cd_material%type;
dt_alta_w        timestamp;
ds_inconsistencia_w   varchar(4000);
nr_seq_item_w      bigint;

C01 CURSOR FOR     
    -- Contas com mais de um pacote, onde os períodos do pacote invadiam o perído um do outro: 
    SELECT b.cd_procedimento, 
        b.ie_origem_proced, 
        b.nr_sequencia 
    from  atendimento_pacote   a, 
        procedimento_paciente  b 
    where  a.nr_seq_procedimento  = b.nr_sequencia 
    and   b.nr_interno_conta   = NR_INTERNO_CONTA_P 
    and exists (  SELECT 1 
            from  atendimento_pacote   x, 
                procedimento_paciente  y 
            where  x.nr_seq_procedimento  = y.nr_sequencia 
            and   y.nr_interno_conta   = b.nr_interno_conta 
            and   ((a.dt_inicio_pacote > x.dt_inicio_pacote and a.dt_inicio_pacote < x.dt_final_pacote) or (a.dt_final_pacote > x.dt_inicio_pacote and dt_final_pacote < x.dt_final_pacote)) 
            and   a.nr_sequencia <> x.nr_sequencia);
c06 CURSOR FOR
    -- Pacotes onde o proc pacote (gatilho) estava fora do período do pacote: 
    SELECT b.cd_procedimento, 
        b.ie_origem_proced, 
        b.nr_sequencia 
    from  procedimento_paciente b 
    where  b.nr_interno_conta   = NR_INTERNO_CONTA_P 
    and   b.nr_seq_proc_pacote  = b.nr_sequencia 
    and not exists (    SELECT 1 
                from  atendimento_pacote x 
                where  x.nr_seq_procedimento = b.nr_sequencia 
                and   b.dt_conta between x.dt_inicio_pacote and x.dt_final_pacote);

c02 CURSOR FOR 
    ---- Lançamento após a alta: 
    SELECT cd_material, 
        nr_sequencia 
    from  material_atend_paciente 
    where  dt_conta > coalesce(dt_alta_w,dt_conta) 
    and   nr_interno_conta = NR_INTERNO_CONTA_P;

c03 CURSOR FOR 
    ---- Lançamento após a alta: 
    SELECT cd_procedimento, 
        ie_origem_proced, 
        nr_sequencia 
    from  procedimento_paciente 
    where  dt_conta > coalesce(dt_alta_w,dt_conta) 
    and   nr_interno_conta = NR_INTERNO_CONTA_P;

c04 CURSOR FOR 
    -- Itens com data fora da data da movimentação: 
    SELECT b.cd_procedimento, 
        b.ie_origem_proced, 
        b.nr_sequencia 
    from  procedimento_paciente b, 
		setor_atendimento s, 
		agrup_classif_setor a 
    where  b.nr_interno_conta = nr_interno_conta_p 
	and	b.cd_setor_atendimento = s.cd_setor_atendimento 
	and	s.nr_seq_agrup_classif  = a.nr_sequencia 
	and	(a.ie_tipo_agrup IS NOT NULL AND a.ie_tipo_agrup::text <> '') 
    and not exists (    SELECT 1 
                from  atend_paciente_unidade x 
                where  x.nr_seq_interno = b.nr_seq_atepacu 
                and   b.dt_conta between x.dt_entrada_unidade and coalesce(x.dt_saida_unidade,b.dt_conta));
c05 CURSOR FOR
    -- Itens com data fora da data da movimentação: 
    SELECT b.cd_material, 
        b.nr_sequencia 
    from  material_atend_paciente b, 
		setor_atendimento s, 
		agrup_classif_setor a 
    where  b.nr_interno_conta = nr_interno_conta_p 
	and	b.cd_setor_atendimento = s.cd_setor_atendimento 
	and	s.nr_seq_agrup_classif  = a.nr_sequencia 
	and	(a.ie_tipo_agrup IS NOT NULL AND a.ie_tipo_agrup::text <> '') 
    and not exists (    SELECT 1 
                from  atend_paciente_unidade x 
                where  x.nr_seq_interno = b.nr_seq_atepacu 
                and   b.dt_conta between x.dt_entrada_unidade and coalesce(x.dt_saida_unidade,b.dt_conta));


BEGIN 
 
delete from W_CONSISTE_CONTA_PLANSERV 
where  nr_interno_conta = nr_interno_conta_p;
     
     
    ds_inconsistencia_w := '';
    ie_consistencia_p := 'N';
     
    begin 
        select dt_alta 
        into STRICT  dt_alta_w 
        from  atendimento_paciente  a, 
            conta_paciente     b 
        where  a.nr_atendimento    = b.nr_interno_conta 
        and   b.nr_interno_conta   = NR_INTERNO_CONTA_P;
    exception 
    when others then 
      dt_alta_w := null;
    end;
 
/* Pacotes com períodos conflitantes*/
 
    open c01;
    loop 
    fetch c01 into 
        cd_procedimento_w, 
        ie_origem_proced_w, 
        nr_seq_item_w;
    EXIT WHEN NOT FOUND; /* apply on c01 */
    begin     
      if (coalesce(length(ds_inconsistencia_w),0) > 0) then 
        ds_inconsistencia_w := substr(ds_inconsistencia_w ||chr(13)||chr(10)|| 
            'Procedimento: '||cd_procedimento_w||'-'||obter_descricao_procedimento(cd_procedimento_w,ie_origem_proced_w) 
            ||' Seq:'||nr_seq_item_w,1,4000);
      else 
        ds_inconsistencia_w := 
            substr('Procedimento: '||cd_procedimento_w||'-'||obter_descricao_procedimento(cd_procedimento_w,ie_origem_proced_w) 
            ||' Seq:'||nr_seq_item_w,1,4000);
      end if;
    end;
    end loop;
    close c01;
     
    if ( coalesce(length(ds_inconsistencia_w),0) > 0) then         
        -- Contas com mais de um pacote, onde os períodos do pacote invadiam o perído um do outro: 
        CALL inserir_inconsist_planserv(nm_usuario_p, nr_interno_conta_p,1,ds_inconsistencia_w,'N');
        ie_consistencia_p := 'S';
    end if;
     
/*---------------------------------------------------------------------------------------------*/
 
/* Pacotes com gatilho fora do período do pacote */
 
    ds_inconsistencia_w := '';
 
    open c06;
    loop 
    fetch c06 into 
        cd_procedimento_w, 
        ie_origem_proced_w, 
        nr_seq_item_w;
    EXIT WHEN NOT FOUND; /* apply on c06 */
    begin 
      if (coalesce(length(ds_inconsistencia_w),0) > 0) then 
        ds_inconsistencia_w := substr(ds_inconsistencia_w ||chr(13)||chr(10)|| 
            'Procedimento: '||cd_procedimento_w||'-'||obter_descricao_procedimento(cd_procedimento_w,ie_origem_proced_w) 
            ||' Seq:'||nr_seq_item_w,1,4000);
      else 
        ds_inconsistencia_w := 
            substr('Procedimento: '||cd_procedimento_w||'-'||obter_descricao_procedimento(cd_procedimento_w,ie_origem_proced_w) 
            ||' Seq:'||nr_seq_item_w,1,4000);
      end if;
    end;
    end loop;
    close c06;
     
    if ( coalesce(length(ds_inconsistencia_w),0) > 0) then 
        -- Contas com mais de um pacote, onde os períodos do pacote invadiam o perído um do outro: 
        CALL inserir_inconsist_planserv(nm_usuario_p, nr_interno_conta_p,2,ds_inconsistencia_w,'N');
        ie_consistencia_p := 'S';
    end if;
/*---------------------------------------------------------------------------------------------*/
 
/* Itens lançados após alta */
 
    ds_inconsistencia_w := '';
         
    open c02;--material 
    loop
    fetch c02 into 
        cd_material_w, 
        nr_seq_item_w;
    EXIT WHEN NOT FOUND; /* apply on c02 */
    begin 
      if (coalesce(length(ds_inconsistencia_w),0) > 0) then 
        ds_inconsistencia_w := substr(ds_inconsistencia_w ||chr(13)||chr(10) 
            ||'Material: '||cd_material_w||'-'||obter_desc_material(cd_material_w)||' Seq:'||nr_seq_item_w,1,4000);
      else 
        ds_inconsistencia_w := substr('Material: '||cd_material_w||'-'||obter_desc_material(cd_material_w)||' Seq:'||nr_seq_item_w,1,4000);
      end if;
    end;
    end loop;
    close c02;
 
    open c03;
    loop 
    fetch c03 into 
        cd_procedimento_w, 
        ie_origem_proced_w, 
        nr_seq_item_w;
    EXIT WHEN NOT FOUND; /* apply on c03 */
    begin 
      if (coalesce(length(ds_inconsistencia_w),0) > 0) then 
        ds_inconsistencia_w := substr(ds_inconsistencia_w ||chr(13)||chr(10)|| 
            'Procedimento: '||cd_procedimento_w||'-'||obter_descricao_procedimento(cd_procedimento_w,ie_origem_proced_w) 
            ||' Seq:'||nr_seq_item_w,1,4000);
      else 
        ds_inconsistencia_w := 
            substr('Procedimento: '||cd_procedimento_w||'-'||obter_descricao_procedimento(cd_procedimento_w,ie_origem_proced_w) 
            ||' Seq:'||nr_seq_item_w,1,4000);
      end if;
    end;
    end loop;
    close c03;
 
    if ( coalesce(length(ds_inconsistencia_w),0) > 0) then 
        -- Contas com mais de um pacote, onde os períodos do pacote invadiam o perído um do outro: 
        CALL inserir_inconsist_planserv(nm_usuario_p, nr_interno_conta_p,3,ds_inconsistencia_w,'N');
        ie_consistencia_p := 'S';
    end if;
/*---------------------------------------------------------------------------------------------*/
 
/* Itens com datas incompatíveis com a data de entrada/saída da unidade */
 
 
    ds_inconsistencia_w := '';
     
    open c04;
    loop 
    fetch c04 into 
        cd_procedimento_w, 
        ie_origem_proced_w, 
        nr_seq_item_w;
    EXIT WHEN NOT FOUND; /* apply on c04 */
    begin 
      if (coalesce(length(ds_inconsistencia_w),0) > 0) then 
        ds_inconsistencia_w := substr(ds_inconsistencia_w ||chr(13)||chr(10)|| 
            'Procedimento: '||cd_procedimento_w||'-'||obter_descricao_procedimento(cd_procedimento_w,ie_origem_proced_w) 
            ||' Seq:'||nr_seq_item_w,1,4000);
      else 
        ds_inconsistencia_w := 
            substr('Procedimento: '||cd_procedimento_w||'-'||obter_descricao_procedimento(cd_procedimento_w,ie_origem_proced_w) 
            ||' Seq:'||nr_seq_item_w,1,4000);
      end if;
    end;
    end loop;
    close c04;
     
    open c05;
    loop 
    fetch c05 into 
        cd_material_w, 
        nr_seq_item_w;
    EXIT WHEN NOT FOUND; /* apply on c05 */
    begin     
        if (coalesce(length(ds_inconsistencia_w),0) > 0) then 
            ds_inconsistencia_w := substr(ds_inconsistencia_w ||chr(13)||chr(10) 
                ||'Material: '||cd_material_w||'-'||obter_desc_material(cd_material_w)||' Seq:'||nr_seq_item_w,1,4000);
          else 
            ds_inconsistencia_w := substr('Material: '||cd_material_w||'-'||obter_desc_material(cd_material_w)||' Seq:'||nr_seq_item_w,1,4000);
          end if;
        end;
    end loop;
    close c05;
     
    if ( coalesce(length(ds_inconsistencia_w),0) > 0) then         
        CALL inserir_inconsist_planserv(nm_usuario_p, nr_interno_conta_p,4,ds_inconsistencia_w,'N');
        ie_consistencia_p := 'S';
    end if;
     
    ds_inconsistencia_w :='';
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_conta_planserv ( nr_interno_conta_p bigint, nm_usuario_p text, ie_consistencia_p INOUT text ) FROM PUBLIC;

