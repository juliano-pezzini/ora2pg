-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mims_adjust_new_materials ( cd_imp_material_p imp_material.cd_material%TYPE, nr_seq_mims_number_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

	imp_mat_cd_sistema_ant_w	imp_material.cd_sistema_ant%type;
	imp_prodcode_p	packdat.prodcode%type;
	imp_formcode_p	packdat.formcode%type;
	imp_packcode_p	packdat.packcode%type;
	nr_count_w	bigint := 0;
	nr_count_excluding_miscpack_w bigint := -1;
	nr_count_including_miscpack_w bigint := -1;
	nr_sequencia_w	material_mims_mapping.nr_sequencia%type;
	
	previous_cd_sistema_ant_w imp_material.cd_sistema_ant%type := '0';
	cd_material_tasy_w	material.cd_material%type := null;
	ie_update_to_existing_mat_w varchar(1) := 'N';
	
	c01 CURSOR(p_prodcode bigint, p_formcode bigint, p_packcode bigint) FOR
	SELECT	g.prodcode,
			g.formcode,
			min(g.packcode) packcode,
			c.product product,
			--d.brand product,
			d.form,
			g.active || ' ' || g.active_units misc,
			g.misc miscpack,
			g.active,
			g.active_units,
			g.per_volume,
			g.per_vol_units,
			g.unit_volume,
			g.unit_vol_units,
			g.units_per_pack,
			--g.pbs_code,
			--g.pbs,
			c.subsection
	FROM   	proddat c,
			formdat d,
			packdat g
	WHERE  	c.prodcode = d.prodcode
	AND 	d.prodcode = g.prodcode
	AND 	d.formcode = g.formcode
	AND 	coalesce(c.deleted::text, '') = ''  --DO  NOT IMPORT DELETED
	AND 	g.prodcode = p_prodcode AND g.formcode = p_formcode AND g.packcode = p_packcode
	GROUP  	BY	g.prodcode,
				g.formcode,
				c.product,
				--d.brand,
				g.active,
				g.active_units,
				d.form,
				g.misc,
				g.per_volume,
				g.per_vol_units,
				g.unit_volume,
				g.unit_vol_units,
				g.units_per_pack,
				--g.pbs_code,
				--g.pbs,
				c.subsection
	ORDER  	BY prodcode;
	

BEGIN
	-- identify if it is update to existing material instead of new material.In case of update to existing material, set ie_update_to_existing_mat_w = 'Y'
	
	select cd_sistema_ant into STRICT imp_mat_cd_sistema_ant_w from imp_material where cd_material = cd_imp_material_p;
	
	SELECT * FROM MIMS_GET_PROD_FORM_PACK_CODES(imp_mat_cd_sistema_ant_w, imp_prodcode_p, imp_formcode_p, imp_packcode_p) INTO STRICT imp_prodcode_p, imp_formcode_p, imp_packcode_p;
	
	select count(1) into STRICT nr_count_w from MATERIAL_MIMS_MAPPING
		where prodcode = imp_prodcode_p and formcode = imp_formcode_p and IE_SITUACAO = 'A';
		
	if (nr_count_w != 0) then
		-- logic to map the record based on prodcode and formcode
		FOR r1 IN c01(imp_prodcode_p, imp_formcode_p, imp_packcode_p) LOOP
			
			select count(1) into STRICT nr_count_excluding_miscpack_w from MATERIAL_MIMS_MAPPING
			where prodcode = r1.prodcode and formcode = r1.formcode and IE_SITUACAO='A' and coalesce(units_per_pack,0) = coalesce(r1.units_per_pack,0)
			and coalesce(ACTIVE,'XX') = coalesce(r1.ACTIVE,'XX') and coalesce(ACTIVE_UNITS,'XX') = coalesce(r1.ACTIVE_UNITS,'XX') 
			and coalesce(PER_VOLUME,'XX') = coalesce(r1.PER_VOLUME,'XX') and coalesce(PER_VOL_UNITS,'XX') = coalesce(r1.PER_VOL_UNITS,'XX') 
			and coalesce(UNIT_VOLUME,'XX') = coalesce(r1.UNIT_VOLUME,'XX') and coalesce(UNIT_VOL_UNITS,'XX') = coalesce(r1.UNIT_VOL_UNITS,'XX');

			if (nr_count_excluding_miscpack_w > 1) then
				select count(1) into STRICT nr_count_including_miscpack_w from MATERIAL_MIMS_MAPPING
				where prodcode = r1.prodcode and formcode = r1.formcode and IE_SITUACAO='A' and coalesce(units_per_pack,0) = coalesce(r1.units_per_pack,0)
				and coalesce(ACTIVE,'XX') = coalesce(r1.ACTIVE,'XX') and coalesce(ACTIVE_UNITS,'XX') = coalesce(r1.ACTIVE_UNITS,'XX') 
				and coalesce(PER_VOLUME,'XX') = coalesce(r1.PER_VOLUME,'XX') and coalesce(PER_VOL_UNITS,'XX') = coalesce(r1.PER_VOL_UNITS,'XX') 
				and coalesce(UNIT_VOLUME,'XX') = coalesce(r1.UNIT_VOLUME,'XX') and coalesce(UNIT_VOL_UNITS,'XX') = coalesce(r1.UNIT_VOL_UNITS,'XX')
				and coalesce(MISCPACK,'XX') = coalesce(r1.MISCPACK,'XX');
			end if;
			
			if (nr_count_excluding_miscpack_w = 1) then
				select nr_sequencia into STRICT nr_sequencia_w from MATERIAL_MIMS_MAPPING
				where prodcode = r1.prodcode and formcode = r1.formcode and IE_SITUACAO='A' and coalesce(units_per_pack,0) = coalesce(r1.units_per_pack,0)
				and coalesce(ACTIVE,'XX') = coalesce(r1.ACTIVE,'XX') and coalesce(ACTIVE_UNITS,'XX') = coalesce(r1.ACTIVE_UNITS,'XX') 
				and coalesce(PER_VOLUME,'XX') = coalesce(r1.PER_VOLUME,'XX') and coalesce(PER_VOL_UNITS,'XX') = coalesce(r1.PER_VOL_UNITS,'XX') 
				and coalesce(UNIT_VOLUME,'XX') = coalesce(r1.UNIT_VOLUME,'XX') and coalesce(UNIT_VOL_UNITS,'XX') = coalesce(r1.UNIT_VOL_UNITS,'XX');
				
				ie_update_to_existing_mat_w := 'Y';
			end if;
			
			if (nr_count_excluding_miscpack_w > 1  and nr_count_including_miscpack_w >= 1 ) then
				select max(nr_sequencia) into STRICT nr_sequencia_w from MATERIAL_MIMS_MAPPING
				where prodcode = r1.prodcode and formcode = r1.formcode and IE_SITUACAO='A' and coalesce(units_per_pack,0) = coalesce(r1.units_per_pack,0)
				and coalesce(ACTIVE,'XX') = coalesce(r1.ACTIVE,'XX') and coalesce(ACTIVE_UNITS,'XX') = coalesce(r1.ACTIVE_UNITS,'XX') 
				and coalesce(PER_VOLUME,'XX') = coalesce(r1.PER_VOLUME,'XX') and coalesce(PER_VOL_UNITS,'XX') = coalesce(r1.PER_VOL_UNITS,'XX') 
				and coalesce(UNIT_VOLUME,'XX') = coalesce(r1.UNIT_VOLUME,'XX') and coalesce(UNIT_VOL_UNITS,'XX') = coalesce(r1.UNIT_VOL_UNITS,'XX')
				and coalesce(MISCPACK,'XX') = coalesce(r1.MISCPACK,'XX');
				
				ie_update_to_existing_mat_w := 'Y';
			end if;
			
			if (ie_update_to_existing_mat_w != 'Y') then
				-- As per the current logic, if per_volume and per_vol_units is not null, we do not consider miscpak in ds_drug_name. Refer: INSERT_MATERIAL_MIMS.PRC
				-- So, do not consider changes to miscpack as long as per_volume and per_vol_units is not null
				--Also let us ignore the scenarios where UNIT_VOLUME and UNIT_VOL_UNITS are null in either of the 2 versions
				if (r1.per_volume IS NOT NULL AND r1.per_volume::text <> '' AND r1.per_vol_units IS NOT NULL AND r1.per_vol_units::text <> '') then
					nr_count_w := 0; --reuse the same counter after resetting to ZERO
					
					select count(1) into STRICT nr_count_w from MATERIAL_MIMS_MAPPING
					where prodcode = r1.prodcode and formcode = r1.formcode and IE_SITUACAO='A' and coalesce(units_per_pack,0) = coalesce(r1.units_per_pack,0)
					and coalesce(ACTIVE,'XX') = coalesce(r1.ACTIVE,'XX') and coalesce(ACTIVE_UNITS,'XX') = coalesce(r1.ACTIVE_UNITS,'XX') 
					and coalesce(PER_VOLUME,'XX') = coalesce(r1.PER_VOLUME,'XX') and coalesce(PER_VOL_UNITS,'XX') = coalesce(r1.PER_VOL_UNITS,'XX') 
					and (	( coalesce(r1.UNIT_VOL_UNITS,'XX') = 'XX' or coalesce(UNIT_VOL_UNITS,'XX') = 'XX' ) 
							or ( (coalesce(UNIT_VOLUME,'XX') = coalesce(r1.UNIT_VOLUME,'XX')) and (coalesce(UNIT_VOL_UNITS,'XX') = coalesce(r1.UNIT_VOL_UNITS,'XX')) ) 
					);
					
					if (nr_count_w > 0) then
						select max(nr_sequencia) into STRICT nr_sequencia_w from MATERIAL_MIMS_MAPPING
						where prodcode = r1.prodcode and formcode = r1.formcode and IE_SITUACAO='A' and coalesce(units_per_pack,0) = coalesce(r1.units_per_pack,0)
						and coalesce(ACTIVE,'XX') = coalesce(r1.ACTIVE,'XX') and coalesce(ACTIVE_UNITS,'XX') = coalesce(r1.ACTIVE_UNITS,'XX')
						and coalesce(PER_VOLUME,'XX') = coalesce(r1.PER_VOLUME,'XX') and coalesce(PER_VOL_UNITS,'XX') = coalesce(r1.PER_VOL_UNITS,'XX') 
						and (	( coalesce(r1.UNIT_VOL_UNITS,'XX') = 'XX' or coalesce(UNIT_VOL_UNITS,'XX') = 'XX' ) 
							or ( (coalesce(UNIT_VOLUME,'XX') = coalesce(r1.UNIT_VOLUME,'XX')) and (coalesce(UNIT_VOL_UNITS,'XX') = coalesce(r1.UNIT_VOL_UNITS,'XX')) ) 
						);
						
						ie_update_to_existing_mat_w := 'Y';
						
					end if; --end of nr_count_w > 0 of if
				else
					nr_count_w := 0; --reuse the same counter after resetting to ZERO
					
					select count(1) into STRICT nr_count_w from MATERIAL_MIMS_MAPPING
					where prodcode = r1.prodcode and formcode = r1.formcode and IE_SITUACAO='A' and coalesce(units_per_pack,0) = coalesce(r1.units_per_pack,0)
					and coalesce(ACTIVE,'XX') = coalesce(r1.ACTIVE,'XX') and coalesce(ACTIVE_UNITS,'XX') = coalesce(r1.ACTIVE_UNITS,'XX') 
					and coalesce(PER_VOLUME,'XX') = coalesce(r1.PER_VOLUME,'XX') and coalesce(PER_VOL_UNITS,'XX') = coalesce(r1.PER_VOL_UNITS,'XX') 
					and (	( coalesce(r1.UNIT_VOL_UNITS,'XX') = 'XX' or coalesce(UNIT_VOL_UNITS,'XX') = 'XX' ) 
							or ( (coalesce(UNIT_VOLUME,'XX') = coalesce(r1.UNIT_VOLUME,'XX')) and (coalesce(UNIT_VOL_UNITS,'XX') = coalesce(r1.UNIT_VOL_UNITS,'XX')) ) 
					) and coalesce(MISCPACK,'XX') = coalesce(r1.MISCPACK,'XX');
					
					if (nr_count_w > 0) then
						select max(nr_sequencia) into STRICT nr_sequencia_w from MATERIAL_MIMS_MAPPING
						where prodcode = r1.prodcode and formcode = r1.formcode and IE_SITUACAO='A' and coalesce(units_per_pack,0) = coalesce(r1.units_per_pack,0)
						and coalesce(ACTIVE,'XX') = coalesce(r1.ACTIVE,'XX') and coalesce(ACTIVE_UNITS,'XX') = coalesce(r1.ACTIVE_UNITS,'XX')
						and coalesce(PER_VOLUME,'XX') = coalesce(r1.PER_VOLUME,'XX') and coalesce(PER_VOL_UNITS,'XX') = coalesce(r1.PER_VOL_UNITS,'XX') 
						and (	( coalesce(r1.UNIT_VOL_UNITS,'XX') = 'XX' or coalesce(UNIT_VOL_UNITS,'XX') = 'XX' ) 
							or ( (coalesce(UNIT_VOLUME,'XX') = coalesce(r1.UNIT_VOLUME,'XX')) and (coalesce(UNIT_VOL_UNITS,'XX') = coalesce(r1.UNIT_VOL_UNITS,'XX')) ) 
						) and coalesce(MISCPACK,'XX') = coalesce(r1.MISCPACK,'XX');
						
						ie_update_to_existing_mat_w := 'Y';
						
					end if; --end of nr_count_w > 0 of else
					
				end if; --end of r1.per_volume is not null and r1.per_vol_units is not null
			end if; -- end of ie_update_to_existing_mat_w != 'Y'
			
			
			
			
		end loop;
	
	end if;
	
	if ( ie_update_to_existing_mat_w = 'Y' and (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '')) then
		select cd_material into STRICT cd_material_tasy_w from MATERIAL_MIMS_MAPPING where nr_sequencia = nr_sequencia_w;
		select cd_sistema_ant into STRICT previous_cd_sistema_ant_w from material where cd_material = cd_material_tasy_w;

	
		update imp_material
		set IE_CD_SISTEMA_ANT_UPDATED = 1, PREVIOUS_CD_SISTEMA_ANT = previous_cd_sistema_ant_w, 
			ie_dirty_check  = NULL, IE_PBS_DIRTY_CHECK  = NULL, IE_MEDICINE_DIRTY_CHECK  = NULL
		where cd_material = cd_imp_material_p and ie_dirty_check = 2;
		
		update 	mims_material_tasy a
		set    	a.CD_MATERIAL_TASY = cd_material_tasy_w 
		where  	a.CD_IMP_MATERIAL = cd_imp_material_p;
		
		UPDATE imp_material_reacao a
		SET    a.ie_dirty_check  = NULL
		WHERE  a.cd_material = cd_imp_material_p;
		
		UPDATE imp_medic_controlado a
		SET    a.ie_dirty_check  = NULL
		WHERE  a.cd_material = cd_imp_material_p;
		
		UPDATE IMP_MATERIAL_ESTAB a
		SET    a.ie_dirty_check  = NULL
		WHERE  a.cd_material = cd_imp_material_p;
		
		UPDATE IMP_MATERIAL_PBS SET IE_DIRTY_CHECK  = NULL WHERE CD_MATERIAL = cd_imp_material_p;
		
		UPDATE imp_mat_via_aplic a
        SET    a.ie_dirty_check  = NULL
        WHERE  a.CD_MATERIAL = cd_imp_material_p;
		
		commit;	
	end if;
	
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mims_adjust_new_materials ( cd_imp_material_p imp_material.cd_material%TYPE, nr_seq_mims_number_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

