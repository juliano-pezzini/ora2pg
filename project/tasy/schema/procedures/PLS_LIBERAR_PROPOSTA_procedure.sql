-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_liberar_proposta ( nr_seq_proposta_p bigint, ie_acao_p bigint, ie_commit_p text, nm_usuario_p text, ds_erro_p INOUT text) AS $body$
DECLARE


/* IE_ACAO_P
	1 - Liberar
	2 - Desfazer liberacao
*/
ie_status_w			varchar(1);
ie_aprovar_proposta_w		varchar(1)	:= 'N';
ie_liberacao_especial_w		varchar(1);
qt_inconsistencia_proposta_w	bigint	:= 0;
qt_inconsistencia_doc_w		bigint	:= 0;
qt_inconsistencia_inadimp_w	bigint	:= 0;
ie_libera_proposta_w		varchar(1) 	:= 'S';
nr_seq_beneficiario_w		bigint;
ie_exige_historico_w		varchar(1)	:= 'N';
qt_historicos_w			bigint;
ds_erro_w			varchar(4000) 	:= null;
cd_estabelecimento_w		bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_proposta_beneficiario
	where	nr_seq_proposta	= nr_seq_proposta_p;


BEGIN

CALL pls_verificar_parecer_benef(nr_seq_proposta_p, nm_usuario_p);

cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;

--Leitura do parametro 23 da OPS - Proposta de adesao eletronica
ie_aprovar_proposta_w	:= coalesce(obter_valor_param_usuario(1232, 23, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

--aaschlote 01/11/2010 - OS 251067 - [45] - Permite liberar inconsistencia de inadimplencia
ie_liberacao_especial_w	:= coalesce(obter_valor_param_usuario(1232, 45, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

--sideker 05/09/2011 - OS 347732 - [63] - Exigir historico para liberar a proposta de adesao
ie_exige_historico_w	:= coalesce(obter_valor_param_usuario(1232, 63, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

if (ie_acao_p	= 1) then
	
	select	coalesce(max(ie_status),'C')
	into STRICT	ie_status_w
	from	pls_proposta_adesao
	where	nr_sequencia	= nr_seq_proposta_p;
	
	if (ie_status_w <> 'C') then
		ds_erro_w := wheb_mensagem_pck.get_texto(206706);
		/* Mensagem: Proposta de adesao nao esta consistida, utilize a opcao "Consistir proposta"! */

	end if;	
	
	if (coalesce(ds_erro_w::text, '') = '') then 	
		select	count(1)
		into STRICT	qt_inconsistencia_proposta_w
		from	pls_proposta_validacao
		where	nr_seq_proposta	= nr_seq_proposta_p
		and 	coalesce(dt_liberacao::text, '') = '';
		
		select	count(1)
		into STRICT	qt_inconsistencia_doc_w
		from	pls_proposta_inconsist_doc
		where	nr_seq_proposta = nr_seq_proposta_p
		and	coalesce(dt_liberacao::text, '') = '';
	
		if (qt_inconsistencia_proposta_w > 0) or (qt_inconsistencia_doc_w > 0) then
			ds_erro_w := wheb_mensagem_pck.get_texto(325972);		
			/* Mensagem: Nao sera possivel liberar esta proposta sem a liberacao de todas as inconsistencias. */

		end if;
	end if;	
	
	if (coalesce(ds_erro_w::text, '') = '') then
		select	count(1)
		into STRICT	qt_inconsistencia_inadimp_w
		from	pls_proposta_validacao	b,
			pls_proposta_inconsist	a
		where	b.nr_seq_inconsistencia	= a.nr_sequencia
		and	b.nr_seq_proposta	= nr_seq_proposta_p
		and	a.ie_inadimplente	= 'S';
	
		select	count(1)
		into STRICT	qt_historicos_w
		from	pls_proposta_historico
		where	nr_seq_proposta = nr_seq_proposta_p;
		
		if (qt_inconsistencia_inadimp_w = 0) and (ie_exige_historico_w = 'N') then
			ie_libera_proposta_w	:= 'S';
		elsif (qt_inconsistencia_inadimp_w = 0) and (ie_exige_historico_w = 'S') and (qt_historicos_w > 0) then
			ie_libera_proposta_w	:= 'S';
		elsif (qt_inconsistencia_inadimp_w > 0) and (ie_liberacao_especial_w = 'S') and (ie_exige_historico_w = 'N') then
			ie_libera_proposta_w	:= 'S';
		elsif (qt_inconsistencia_inadimp_w > 0) and (ie_liberacao_especial_w = 'S') and (ie_exige_historico_w = 'S') and (qt_historicos_w > 0) then
			ie_libera_proposta_w	:= 'S';	
		elsif (qt_inconsistencia_inadimp_w > 0) and (ie_liberacao_especial_w = 'N') then
			ie_libera_proposta_w	:= 'N';
		else	
			ie_libera_proposta_w	:= 'N';
		end if;
		
		if (ie_libera_proposta_w = 'S') then
			update	pls_proposta_adesao
			set	dt_fim_proposta	= clock_timestamp(),
				ie_status	= 'E',
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia	= nr_seq_proposta_p;
			
			/*aaschlote 02/05/2011 OS - 314422 - Gerar historico para o beneficiario*/

			open C01;
			loop
			fetch C01 into	
				nr_seq_beneficiario_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin
				CALL pls_gravar_histor_prop_benef(nr_seq_beneficiario_w,clock_timestamp(),'3', wheb_mensagem_pck.get_texto(1168529),nm_usuario_p);
				/*aaschlote 02/11/2011 - OS 378886*/

				CALL pls_vincular_tipo_benef_comer(nr_seq_beneficiario_w,nm_usuario_p);
				end;
			end loop;
			close C01;
			
			if (ie_aprovar_proposta_w = 'S') then
				CALL pls_aprovar_proposta(nr_seq_proposta_p,'N', nm_usuario_p);
			end if;
		elsif (ie_libera_proposta_w	= 'N') then
			if (ie_exige_historico_w = 'S') and (qt_historicos_w = 0) then
				ds_erro_w := wheb_mensagem_pck.get_texto(206707);
				/* Mensagem: Nao sera possivel liberar esta proposta sem o registro de pelo menos um historico. Parametro [63] */

			else
				ds_erro_w := wheb_mensagem_pck.get_texto(206711);
				/* Mensagem: Proposta de adesao possui inconsistencia por inadimplencia. e nao pode ser liberada.
					   Verifique o parametro [45] - Permite liberar inconsistencia de inadimplencia */
			end if;
		end if;
	end if;
elsif (ie_acao_p	= 2) then
	update	pls_proposta_adesao
	set	dt_fim_proposta	 = NULL,
		ie_status	= 'U',
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_proposta_p;
	
	/*aaschlote 02/05/2011 OS - 314422 - Gerar historico para o beneficiario*/

	open C01;
	loop
	fetch C01 into
		nr_seq_beneficiario_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		CALL pls_gravar_histor_prop_benef(nr_seq_beneficiario_w,clock_timestamp(),'4', wheb_mensagem_pck.get_texto(1168530),nm_usuario_p);
		end;
	end loop;
	close C01;
	
	select	count(1)
	into STRICT	qt_inconsistencia_proposta_w
	from	pls_proposta_validacao
	where	nr_seq_proposta	= nr_seq_proposta_p;
	
	--aaschlote 06/04/2011 OS - 303632
	if (qt_inconsistencia_proposta_w > 0) then
		delete	FROM pls_proposta_check_list
		where	nr_seq_validacao	in (	SELECT	nr_sequencia
							from	pls_proposta_validacao
							where	nr_seq_proposta	= nr_seq_proposta_p);
		
		delete	FROM pls_proposta_validacao
		where	nr_seq_proposta	= nr_seq_proposta_p;
	end if;
end if;

ds_erro_p := substr(ds_erro_w,1,255);

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_liberar_proposta ( nr_seq_proposta_p bigint, ie_acao_p bigint, ie_commit_p text, nm_usuario_p text, ds_erro_p INOUT text) FROM PUBLIC;

