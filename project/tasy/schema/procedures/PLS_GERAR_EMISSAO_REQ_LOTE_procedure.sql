-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_emissao_req_lote ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Atualizar os itens da guia conforme a geracao de ocorrencia combinada.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_lote_w			pls_lote_geracao_autor.nr_sequencia%type;
nr_seq_lote_aut_item_w		pls_lote_ger_autor_item.nr_sequencia%type;
nr_seq_regra_ger_aut_cab_w	pls_regra_ger_aut_cab.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_plano_w			pls_plano.nr_sequencia%type;
nr_seq_motivo_inclusao_w	pls_motivo_inc_requisicao.nr_sequencia%type;
nr_seq_uni_exec_w		pls_congenere.nr_sequencia%type;
nr_seq_requisicao_w		pls_requisicao.nr_sequencia%type;
cd_procedimento_w		procedimento.cd_procedimento%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;
nr_seq_material_w		pls_material.nr_sequencia%type;
qt_item_w			pls_requisicao_proc.qt_procedimento%type;
nr_seq_prestador_exec_w		pls_regra_ger_aut_cab.nr_seq_prestador_exec%type;
nr_seq_prestador_solic_w	pls_regra_ger_aut_cab.nr_seq_prestador_solic%type;
ie_tipo_guia_w			varchar(2);
ie_tipo_atendimento_w		varchar(2);
ie_tipo_processo_w		varchar(2);
dt_validade_senha_w		timestamp;
qt_registros_w			bigint;
ie_cobrar_copartic_w		varchar(2);
nr_seq_programa_w		pls_regra_geracao_autor.nr_seq_programa%type;
ie_regime_atendimento_w		pls_conta.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_conta.ie_saude_ocupacional%type;
cd_medico_solicitante_w		pls_requisicao.nr_seq_prestador%type;
nr_seq_cbo_saude_w		pls_requisicao.nr_seq_cbo_saude%type;			
ie_carater_atendimento_w	pls_requisicao.ie_carater_atendimento%type;	
ie_tipo_consulta_w		pls_requisicao.ie_tipo_consulta%type;
ie_indicacao_acidente_w		pls_requisicao_diagnostico.ie_indicacao_acidente%type;
ds_observacao_w			pls_requisicao.ds_observacao%type;
nr_sequencia_w         		pls_requisicao_diagnostico.nr_sequencia%type;
nr_seq_requisicao_ww     	pls_requisicao_diagnostico.nr_seq_requisicao%type;
dt_atualizacao_w        	timestamp := clock_timestamp();
nm_usuario_w            	usuario.nm_usuario%type	:= wheb_usuario_pck.get_nm_usuario;



C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_segurado,
		nr_seq_regra_ger_aut_cab
	from	pls_lote_ger_autor_item
	where	nr_seq_lote_geracao	= nr_seq_lote_p
	order by nr_sequencia;
	
C02 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		qt_item
	from	pls_regra_ger_autor_proc
	where	nr_seq_regra_ger_aut_cab	= nr_seq_regra_ger_aut_cab_w
	order by nr_sequencia;
	
C03 CURSOR FOR
	SELECT	nr_seq_material,
		qt_item
	from	pls_regra_ger_autor_mat
	where	nr_seq_regra_ger_aut_cab	= nr_seq_regra_ger_aut_cab_w
	order by nr_sequencia;


BEGIN

select	count(1)
into STRICT	qt_registros_w
from	pls_lote_geracao_autor
where	nr_sequencia	= nr_seq_lote_p
and	coalesce(dt_geracao::text, '') = '';

if (qt_registros_w	> 0) then
	--Este lote ainda nao possui data de geracao!
	CALL wheb_mensagem_pck.exibir_mensagem_abort(268474);
end if;

select	count(1)
into STRICT	qt_registros_w
from	pls_lote_geracao_autor
where	nr_sequencia	= nr_seq_lote_p
and	(dt_emissao IS NOT NULL AND dt_emissao::text <> '');

if (qt_registros_w	> 0) then
	--Este lote ja foi emitido!
	CALL wheb_mensagem_pck.exibir_mensagem_abort(268475);
end if;

open C01;
loop
fetch C01 into	
	nr_seq_lote_aut_item_w,
	nr_seq_segurado_w,
	nr_seq_regra_ger_aut_cab_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	max(a.ie_tipo_guia),
		max(a.ie_tipo_atendimento),
		max(a.nr_seq_motivo_inclusao),
		max(a.ie_tipo_processo),
		max(a.nr_seq_uni_exec),
		max(a.dt_validade_senha),
		max(a.ie_cobrar_copartic),
		max(a.nr_seq_prestador_exec),
		max(a.nr_seq_prestador_solic),
		max(b.nr_seq_programa),
		max(a.ie_regime_atendimento),
		max(a.ie_saude_ocupacional),
		max(a.cd_medico_solicitante),
		max(a.nr_seq_cbo_saude),		
		max(a.ie_carater_atendimento),
		max(a.ie_tipo_consulta),
		max(a.ie_indicacao_acidente),
		max(a.ds_observacao)
	into STRICT	ie_tipo_guia_w,
		ie_tipo_atendimento_w,
		nr_seq_motivo_inclusao_w,
		ie_tipo_processo_w,
		nr_seq_uni_exec_w,
		dt_validade_senha_w,
		ie_cobrar_copartic_w,
		nr_seq_prestador_exec_w,
		nr_seq_prestador_solic_w,
		nr_seq_programa_w,
		ie_regime_atendimento_w,
		ie_saude_ocupacional_w,
		cd_medico_solicitante_w,		
		nr_seq_cbo_saude_w,			
		ie_carater_atendimento_w,	
		ie_tipo_consulta_w,		
		ie_indicacao_acidente_w,		
		ds_observacao_w			
	from	pls_regra_ger_aut_cab a,
		pls_regra_geracao_autor b
	where	a.nr_sequencia = nr_seq_regra_ger_aut_cab_w
	and 	a.nr_seq_regra_geracao_aut = b.nr_sequencia;
	
	nr_seq_plano_w := pls_obter_produto_benef(nr_seq_segurado_w, clock_timestamp());
	
	if (coalesce(nr_seq_prestador_solic_w::text, '') = '' and (nr_seq_prestador_exec_w IS NOT NULL AND nr_seq_prestador_exec_w::text <> '')) then
		nr_seq_prestador_solic_w := nr_seq_prestador_exec_w;
	end if;

	select	nextval('pls_requisicao_seq')
	into STRICT	nr_seq_requisicao_w
	;

	select	nextval('pls_requisicao_diagnostico_seq')
	into STRICT	nr_sequencia_w            
	;
     
	insert	into pls_requisicao(	nr_sequencia,			dt_requisicao,			dt_atualizacao,
					nm_usuario,			dt_atualizacao_nrec,		nm_usuario_nrec,
					nr_seq_segurado,		nr_seq_plano,			cd_estabelecimento,
					ie_tipo_guia,			ie_estagio,			nr_seq_motivo_inclusao,
					ie_tipo_atendimento,		ie_tipo_processo,		nr_seq_uni_exec,
					ie_origem_solic,		nm_usuario_solic,		ie_tipo_intercambio,
					nr_seq_lote_ger_item,		ie_cobrar_copartic,		nr_seq_prestador,
					nr_seq_prestador_exec,		nr_seq_mprev_programa,		ie_regime_atendimento,
					ie_saude_ocupacional,		cd_medico_solicitante,		nr_seq_cbo_saude,
					ie_carater_atendimento,		ie_tipo_consulta,		ds_observacao)
			values (	nr_seq_requisicao_w,		clock_timestamp(),			clock_timestamp(),
					nm_usuario_p,			clock_timestamp(),			nm_usuario_p,
					nr_seq_segurado_w,		nr_seq_plano_w,			cd_estabelecimento_p,
					ie_tipo_guia_w,			2,				nr_seq_motivo_inclusao_w,
					ie_tipo_atendimento_w,		coalesce(ie_tipo_processo_w, 'M'),	nr_seq_uni_exec_w,
					'M',				nm_usuario_p,			CASE WHEN ie_tipo_processo_w='I' THEN  'I'  ELSE null END ,
					nr_seq_lote_aut_item_w,		ie_cobrar_copartic_w,		nr_seq_prestador_solic_w,
					nr_seq_prestador_exec_w,	nr_seq_programa_w,		ie_regime_atendimento_w,
					ie_saude_ocupacional_w,		cd_medico_solicitante_w,	nr_seq_cbo_saude_w,
					ie_carater_atendimento_w,	ie_tipo_consulta_w,		ds_observacao_w);
					
	insert into pls_requisicao_diagnostico( 	nr_sequencia,			nr_seq_requisicao,	ie_indicacao_acidente,
							dt_atualizacao,			nm_usuario)
			values ( 			nr_sequencia_w,			nr_seq_requisicao_w,	ie_indicacao_acidente_w,     	
							clock_timestamp(), 			nm_usuario_w);
	
	open C02;
	loop
	fetch C02 into	
		cd_procedimento_w,
		ie_origem_proced_w,
		qt_item_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		
		insert	into pls_requisicao_proc(nr_sequencia, nr_seq_requisicao, cd_procedimento,
			 ie_origem_proced, qt_procedimento, dt_atualizacao,
			 nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			 ie_status, qt_proc_executado, qt_solicitado,
			 ie_origem_inclusao, ie_estagio)
		values (nextval('pls_requisicao_proc_seq'), nr_seq_requisicao_w, cd_procedimento_w,
			 ie_origem_proced_w, qt_item_w, clock_timestamp(),
			 nm_usuario_p, clock_timestamp(), nm_usuario_p,
			 'S', 0, qt_item_w,
			 'T', 'AE');
		end;
	end loop;
	close C02;
	
	open C03;
	loop
	fetch C03 into	
		nr_seq_material_w,
		qt_item_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		insert	into pls_requisicao_mat(nr_sequencia, nr_seq_requisicao, nr_seq_material,
			 qt_material, dt_atualizacao, nm_usuario,
			 dt_atualizacao_nrec, nm_usuario_nrec, ie_status,
			 qt_mat_executado, qt_solicitado, ie_origem_inclusao,
			 ie_estagio)
		values (nextval('pls_requisicao_mat_seq'), nr_seq_requisicao_w, nr_seq_material_w,
			 qt_item_w, clock_timestamp(), nm_usuario_p,
			 clock_timestamp(), nm_usuario_p, 'S',
			 0, qt_item_w, 'T',
			 'AE');
		end;
	end loop;
	close C03;

	CALL pls_gerar_validade_senha_req(nr_seq_requisicao_w, nr_seq_segurado_w, clock_timestamp(), ie_tipo_guia_w, nm_usuario_p);
	
	if (dt_validade_senha_w IS NOT NULL AND dt_validade_senha_w::text <> '') then
		update	pls_requisicao
		set	dt_validade_senha	= dt_validade_senha_w
		where	nr_sequencia		= nr_seq_requisicao_w;
	end if;
	end;
end loop;
close C01;
	
update	pls_lote_geracao_autor
set	dt_emissao	= clock_timestamp(),
	nm_usuario	= nm_usuario_p,
	dt_atualizacao	= clock_timestamp()
where	nr_sequencia	= nr_seq_lote_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_emissao_req_lote ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

