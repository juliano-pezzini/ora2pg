-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_fatura_refat ( nr_seq_fatura_p bigint, cd_estabelecimento_p bigint, dt_vencimento_p timestamp, nr_seq_lote_gerado_p INOUT bigint, nm_usuario_p text, ie_commit_p text default 'S', dt_emissao_p timestamp DEFAULT NULL, dt_mesano_referencia_p timestamp DEFAULT NULL) AS $body$
DECLARE


nr_seq_lote_faturamento_w	bigint;
nr_seq_regra_fat_w		bigint;
nr_seq_evento_w			bigint;
nr_seq_conta_w			bigint;
nr_seq_lote_origem_w		bigint;
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type := 'N';

c01 CURSOR FOR
	SELECT	a.nr_seq_evento
	from	pls_fatura_evento 	a
	where	a.nr_seq_fatura		= nr_seq_fatura_p
	and	exists (SELECT	1
			from	pls_fatura_conta 	x
			where	x.nr_seq_fatura_evento	= a.nr_sequencia
			and	x.nr_seq_conta not(	select	y.nr_seq_conta 					-- Somente contas que nao necessitam de ajuste 
							from	w_pls_fatura_refat y));

C02 CURSOR FOR
	SELECT	a.nr_seq_conta
	from	pls_conta_pos_estabelecido 	a
	where	a.nr_seq_evento_fat		= nr_seq_evento_w
	and	a.nr_seq_lote_fat		= nr_seq_lote_origem_w
	and	a.nr_seq_conta	not in (	SELECT	x.nr_seq_conta 						-- Somente contas que nao necessitam de ajuste 
						from	w_pls_fatura_refat x)
	and	a.nr_seq_conta	in (	select	x.nr_seq_conta 						-- Contas de evento da fatura 
						from	pls_fatura_conta x
						where	x.nr_seq_fatura_evento	in (	select	z.nr_sequencia  	-- Eventos da fatura 
											from	pls_fatura_evento 	z
											where	z.nr_seq_fatura		= nr_seq_fatura_p))
	group by a.nr_seq_conta;
		

BEGIN

select	coalesce(max(ie_novo_pos_estab), 'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false
where	cd_estabelecimento = cd_estabelecimento_p;

if (ie_novo_pos_estab_w = 'S') then
	nr_seq_lote_gerado_p := pls_faturamento_pck.gerar_lote_fatura_refat(	nr_seq_fatura_p, cd_estabelecimento_p, dt_vencimento_p, nr_seq_lote_gerado_p, nm_usuario_p, ie_commit_p, dt_emissao_p, dt_mesano_referencia_p);
else
	-- jtonon - OS 1983435 - A chamada da rotina 'pls_cancelar_fatura' abaixo seguida pelo rollback se fez necessaria afim de que qualquer impedimento que a mesma venha a apresentar seja apresentada no inicio do processo 

	-- e nao no fim do processo, visto que a 'pls_cancelar_fatura' e chamada pelo Delphi no fim do processo e que algumas vezes para o processo depois que vinculos, desvinculos geracoes de lote ja ocorreram
	CALL pls_cancelar_fatura(nr_seq_fatura_p, null, nm_usuario_p, cd_estabelecimento_p, null, null, 'N');
	rollback;
	
	-- Obter dados para o refaturamento
	select	max(c.nr_seq_regra_fat),
		max(c.nr_sequencia)
	into STRICT	nr_seq_regra_fat_w,
		nr_seq_lote_origem_w
	from	pls_lote_faturamento	c,
		pls_fatura		a
	where	a.nr_seq_lote		= c.nr_sequencia
	and	a.nr_sequencia		= nr_seq_fatura_p;
		
	select	nextval('pls_lote_faturamento_seq')
	into STRICT	nr_seq_lote_faturamento_w
	;

	insert into pls_lote_faturamento(nr_sequencia,
		cd_estabelecimento,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		dt_mesano_referencia,
		nr_seq_lote_disc,
		nr_seq_regra_fat,
		dt_geracao,
		dt_fechamento,
		dt_vencimento,
		nr_seq_lote_origem,
		dt_emissao,
		ie_status,
		ie_tipo_lote)
	values (nr_seq_lote_faturamento_w,
		cd_estabelecimento_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		CASE WHEN coalesce(dt_mesano_referencia_p::text, '') = '' THEN clock_timestamp()  ELSE dt_mesano_referencia_p END ,
		null,
		nr_seq_regra_fat_w,
		clock_timestamp(),
		null,
		dt_vencimento_p,
		nr_seq_lote_origem_w,
		dt_emissao_p,
		1,
		'C');
		
	CALL pls_faturamento_pck.inicializa_geracao_lote(nr_seq_lote_faturamento_w, nm_usuario_p);
	
	CALL pls_gerar_fatura_log( nr_seq_lote_faturamento_w, null, null, 'PLS_GERAR_LOTE_FATURA_REFAT', 'GL', 'S', nm_usuario_p);

	open c01;
	loop
	fetch c01 into
		nr_seq_evento_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		open C02;
		loop
		fetch C02 into	
			nr_seq_conta_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			CALL pls_vincular_conta_lote_fat( nr_seq_lote_faturamento_w, null, nr_seq_conta_w, cd_estabelecimento_p, nm_usuario_p, 'S', 'RF', nr_seq_lote_origem_w );
			end;
		end loop;
		close C02;
		
	end loop;
	close C01;

	-- Acima e utilizada a rotina de contas vinculadas manualmente "M" (pasta contas pendentes), apos vincular, deve ser mudado para automatico "A"
	update	pls_fatura_conta
	set	ie_tipo_vinculacao = 'A'
	where	ie_tipo_vinculacao = 'M'
	and	nr_seq_fatura_evento in (SELECT	x.nr_sequencia
					from	pls_fatura_evento x,
						pls_fatura c
					where	c.nr_sequencia	= x.nr_seq_fatura
					and	c.nr_seq_lote	= nr_seq_lote_faturamento_w);

	CALL pls_atualizar_vl_lote_fatura(nr_seq_lote_faturamento_w, nm_usuario_p, 'N', 'N');

	nr_seq_lote_gerado_p	:= nr_seq_lote_faturamento_w;
	
	CALL pls_faturamento_pck.altera_status_gerado_lote(nr_seq_lote_faturamento_w, nm_usuario_p);

	if (coalesce(ie_commit_p, 'S') = 'S')then
		commit;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_fatura_refat ( nr_seq_fatura_p bigint, cd_estabelecimento_p bigint, dt_vencimento_p timestamp, nr_seq_lote_gerado_p INOUT bigint, nm_usuario_p text, ie_commit_p text default 'S', dt_emissao_p timestamp DEFAULT NULL, dt_mesano_referencia_p timestamp DEFAULT NULL) FROM PUBLIC;

