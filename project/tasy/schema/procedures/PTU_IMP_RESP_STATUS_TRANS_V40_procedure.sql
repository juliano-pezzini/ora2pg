-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_imp_resp_status_trans_v40 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Importar resposta status trans_v40

Rotina utilizada nas transações ptu via scs homologadas com a unimed brasil.
quando for alterar, favor verificar com o análista responsável para a realização de testes.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
Performance
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_transacao_w			varchar(255);
ie_tipo_cliente_w		varchar(255);
cd_unimed_exec_w		varchar(255);
cd_unimed_benef_w		varchar(255);
nr_seq_execucao_w		bigint;
nr_seq_origem_w			bigint;
nr_seq_pedido_w			bigint;
ds_conteudo_w			varchar(4000);
nr_seq_import_w			bigint;
dt_validade_ww			varchar(8);
dt_validade_w			timestamp;
ie_tipo_identif_w		bigint;
nr_seq_pedido_compl_w		bigint;
nr_seq_pedido_aut_w		bigint;
nr_seq_guia_w			bigint;
nr_seq_requisicao_w		bigint;
nr_seq_transacao_w		bigint;
ie_tipo_transacao_w		varchar(255);
nr_seq_pedido_status_w		bigint;
ie_tipo_tabela_w		varchar(255);
cd_servico_w			bigint;
ds_servico_w			varchar(255);
qt_autorizado_w			bigint;
ie_autorizado_w			bigint;
cd_mens_espec_1_w		bigint;
cd_mens_espec_2_w		bigint;
cd_mens_espec_3_w		bigint;
cd_mens_espec_4_w		bigint;
cd_mens_espec_5_w		bigint;
nr_seq_res_serv_staus_w		bigint;
ds_observacao_w			varchar(4000);
nr_seq_guia_mat_w		bigint;
nr_seq_guia_proc_w		bigint;
nr_seq_req_mat_w		bigint;
nr_seq_req_proc_w		bigint;

c01 CURSOR FOR
	SELECT	nr_seq_importacao,
		ds_valores
	from	w_scs_importacao
	where	nm_usuario	= nm_usuario_p
	order by nr_seq_importacao;


BEGIN

open C01;
loop
fetch C01 into
	nr_seq_import_w,
	ds_conteudo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (substr(ds_conteudo_w,1,4)	<> 'FIM$') then
		if (nr_seq_import_w	= 1) then
			cd_transacao_w		:= substr(ds_conteudo_w,1,5);
			ie_tipo_cliente_w	:= trim(both substr(ds_conteudo_w,6,15));
			cd_unimed_exec_w	:= trim(both substr(ds_conteudo_w,21,4));
			cd_unimed_benef_w	:= trim(both substr(ds_conteudo_w,25,4));
			nr_seq_execucao_w	:= (substr(ds_conteudo_w,29,10))::numeric;
			nr_seq_origem_w		:= (substr(ds_conteudo_w,39,10))::numeric;
			ie_tipo_identif_w	:= (substr(ds_conteudo_w,49,1))::numeric;
			dt_validade_ww		:= substr(ds_conteudo_w,56,2)||substr(ds_conteudo_w,54,2)||substr(ds_conteudo_w,50,4);
			begin
				dt_validade_w	:= to_date(dt_validade_ww, 'dd/mm/yyyy hh24:mi:ss');
			exception
			when others then
				dt_validade_w	:= clock_timestamp();
			end;


			begin
				select	coalesce(nr_seq_pedido_compl,0),
					coalesce(nr_seq_pedido_aut,0)
				into STRICT	nr_seq_pedido_compl_w,
					nr_seq_pedido_aut_w
				from	ptu_controle_execucao
				where	nr_sequencia	= nr_seq_execucao_w;
			exception
			when others then
				nr_seq_pedido_compl_w	:= 0;
				nr_seq_pedido_aut_w	:= 0;
			end;

			if (nr_seq_pedido_compl_w	<> 0) then
				begin
					select	nr_seq_guia,
						nr_seq_requisicao
					into STRICT	nr_seq_guia_w,
						nr_seq_requisicao_w
					from	ptu_pedido_compl_aut
					where	nr_sequencia	= nr_seq_pedido_compl_w;
				exception
				when others then
					nr_seq_guia_w		:= null;
					nr_seq_requisicao_w	:= null;
				end;
			elsif (nr_seq_pedido_aut_w	<> 0) then
				begin
					select	nr_seq_guia,
						nr_seq_requisicao
					into STRICT	nr_seq_guia_w,
						nr_seq_requisicao_w
					from	ptu_pedido_autorizacao
					where	nr_sequencia	= nr_seq_pedido_aut_w;
				exception
				when others then
					nr_seq_guia_w		:= null;
					nr_seq_requisicao_w	:= null;
				end;
			end if;

			if (coalesce(nr_seq_guia_w,0)	<> 0) then
				nr_seq_transacao_w	:= nr_seq_guia_w;
				ie_tipo_transacao_w	:= 'G';
			elsif (coalesce(nr_seq_requisicao_w,0)	<> 0) then
				nr_seq_transacao_w	:= nr_seq_requisicao_w;
				ie_tipo_transacao_w	:= 'R';
			end if;

			if (ie_tipo_cliente_w	= 'UNIMED') then
				ie_tipo_cliente_w	:= 'U';
			elsif (ie_tipo_cliente_w	= 'PORTAL') then
				ie_tipo_cliente_w	:= 'P';
			elsif (ie_tipo_cliente_w	= 'PRESTADOR') then
				ie_tipo_cliente_w	:= 'R';
			end if;

			if (cd_transacao_w	= '00361') then
				select	nextval('ptu_resp_pedido_status_seq')
				into STRICT	nr_seq_pedido_w
				;

				if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_pedido_status_w
					from	ptu_pedido_status
					where	nr_transacao_uni_exec	= nr_seq_execucao_w
					and	nr_seq_guia		= nr_seq_guia_w;
				elsif (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_pedido_status_w
					from	ptu_pedido_status
					where	nr_transacao_uni_exec	= nr_seq_execucao_w
					and	nr_seq_requisicao	= nr_seq_requisicao_w;
				end if;

				insert	into ptu_resp_pedido_status(nr_sequencia, cd_transacao, cd_unimed_beneficiario,
					 cd_unimed_executora, ds_arquivo_pedido, ds_observacao,
					 dt_atualizacao, dt_atualizacao_nrec, dt_validade,
					 ie_tipo_cliente, ie_tipo_identificador, nm_usuario,
					 nm_usuario_nrec, nr_seq_guia, nr_seq_pedido_status,
					 nr_seq_requisicao, nr_seq_origem, nr_seq_execucao)
				values (nr_seq_pedido_w, cd_transacao_w, cd_unimed_benef_w,
					 cd_unimed_exec_w, ds_arquivo_p, '',
					 clock_timestamp(), clock_timestamp(), dt_validade_w,
					 ie_tipo_cliente_w, ie_tipo_identif_w, nm_usuario_p,
					 nm_usuario_p, nr_seq_guia_w, nr_seq_pedido_status_w,
					 nr_seq_requisicao_w, nr_seq_origem_w, nr_seq_execucao_w);
			end if;
		elsif (nr_seq_import_w	= 2) then
			ds_observacao_w	:= trim(both substr(ds_conteudo_w,1,255));

			update	ptu_resp_pedido_status
			set	ds_observacao	= substr(ds_observacao_w,1,4000)
			where	nr_sequencia	= nr_seq_pedido_w;
		elsif (nr_seq_import_w	> 2) and (substr(ds_conteudo_w,1,1) in ('0','1','2','3','4'))  then
			ie_tipo_tabela_w	:= trim(both substr(ds_conteudo_w,1,1));
			cd_servico_w		:= (substr(ds_conteudo_w,2,8))::numeric;
			ds_servico_w		:= trim(both substr(ds_conteudo_w,10,80));
			qt_autorizado_w		:= (substr(ds_conteudo_w,90,8))::numeric;
			ie_autorizado_w		:= (substr(ds_conteudo_w,98,1))::numeric;
			cd_mens_espec_1_w	:= (substr(ds_conteudo_w,99,4))::numeric;
			cd_mens_espec_2_w	:= (substr(ds_conteudo_w,103,4))::numeric;
			cd_mens_espec_3_w	:= (substr(ds_conteudo_w,107,4))::numeric;
			cd_mens_espec_4_w	:= (substr(ds_conteudo_w,111,4))::numeric;
			cd_mens_espec_5_w	:= (substr(ds_conteudo_w,115,4))::numeric;

			if (nr_seq_pedido_aut_w IS NOT NULL AND nr_seq_pedido_aut_w::text <> '') then
				begin
					select	nr_seq_guia_mat,
						nr_seq_guia_proc,
						nr_seq_req_mat,
						nr_seq_req_proc
					into STRICT	nr_seq_guia_mat_w,
						nr_seq_guia_proc_w,
						nr_seq_req_mat_w,
						nr_seq_req_proc_w
					from	ptu_pedido_aut_servico
					where	nr_seq_pedido				= nr_seq_pedido_aut_w
					and	coalesce(cd_servico_consersao, cd_servico)	= cd_servico_w
					and	(((trim(both ds_opme) IS NOT NULL AND (trim(both ds_opme))::text <> '')
					and	trim(both upper(elimina_acentuacao(ds_opme)))	= upper(trim(both ds_servico_w)))
					or (coalesce(trim(both ds_opme)::text, '') = ''));
				exception
				when others then
					nr_seq_guia_mat_w	:= null;
					nr_seq_guia_proc_w	:= null;
					nr_seq_req_mat_w	:= null;
					nr_seq_req_proc_w	:= null;
				end;
			elsif (nr_seq_pedido_compl_w IS NOT NULL AND nr_seq_pedido_compl_w::text <> '') then
				begin
					select	nr_seq_guia_mat,
						nr_seq_guia_proc,
						nr_seq_req_mat,
						nr_seq_req_proc
					into STRICT	nr_seq_guia_mat_w,
						nr_seq_guia_proc_w,
						nr_seq_req_mat_w,
						nr_seq_req_proc_w
					from	ptu_pedido_compl_aut_serv
					where	nr_seq_pedido				= nr_seq_pedido_compl_w
					and	coalesce(cd_servico_conversao, cd_servico)	= cd_servico_w
					and	(((trim(both ds_opme) IS NOT NULL AND (trim(both ds_opme))::text <> '')
					and	trim(both upper(elimina_acentuacao(ds_opme)))	= upper(trim(both ds_servico_w)))
					or (coalesce(trim(both ds_opme)::text, '') = ''));
				exception
				when others then
					nr_seq_guia_mat_w	:= null;
					nr_seq_guia_proc_w	:= null;
					nr_seq_req_mat_w	:= null;
					nr_seq_req_proc_w	:= null;
				end;
			end if;

			select	nextval('ptu_resp_servico_status_seq')
			into STRICT	nr_seq_res_serv_staus_w
			;

			insert	into ptu_resp_servico_status(nr_sequencia, cd_servico, ds_servico,
				 dt_atualizacao, dt_atualizacao_nrec, ie_autorizado,
				 ie_tipo_tabela, nm_usuario, nm_usuario_nrec,
				 nr_seq_resp_ped_status, qt_autorizado, nr_seq_guia_mat,
				 nr_seq_guia_proc, nr_seq_req_mat, nr_seq_req_proc)
			values (nr_seq_res_serv_staus_w, cd_servico_w, ds_servico_w,
				 clock_timestamp(), clock_timestamp(), ie_autorizado_w,
				 ie_tipo_tabela_w, nm_usuario_p, nm_usuario_p,
				 nr_seq_pedido_w, qt_autorizado_w, nr_seq_guia_mat_w,
				 nr_seq_guia_proc_w, nr_seq_req_mat_w, nr_seq_req_proc_w);

			if (cd_mens_espec_1_w	<> 0) then
				CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_1_w,'',cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w,
								cd_transacao_w, nr_seq_res_serv_staus_w, null, null, nm_usuario_p);
			end if;

			if (cd_mens_espec_2_w	<> 0) then
				CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_2_w,'',cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w,
								cd_transacao_w, nr_seq_res_serv_staus_w, null, null, nm_usuario_p);
			end if;

			if (cd_mens_espec_3_w	<> 0) then
				CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_3_w,'',cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w,
								cd_transacao_w, nr_seq_res_serv_staus_w, null, null, nm_usuario_p);
			end if;

			if (cd_mens_espec_4_w	<> 0) then
				CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_4_w,'',cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w,
								cd_transacao_w, nr_seq_res_serv_staus_w, null, null, nm_usuario_p);
			end if;

			if (cd_mens_espec_5_w	<> 0) then
				CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_5_w,'',cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w,
								cd_transacao_w, nr_seq_res_serv_staus_w, null, null, nm_usuario_p);
			end if;
		end if;
	end if;
	end;
end loop;
close C01;

if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then
	CALL ptu_atualiza_req_status_trans(nr_seq_pedido_w, nr_seq_requisicao_w, nm_usuario_p);
elsif (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
	CALL ptu_atualiza_guia_status_trans(nr_seq_pedido_w, nr_seq_guia_w, nm_usuario_p);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_imp_resp_status_trans_v40 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

