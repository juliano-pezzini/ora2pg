-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE validate_business_rule ( nr_seq_privacy_rule_p bigint, nr_encounter_p bigint, cd_setor_usuario_p bigint, cd_pf_paciente_p text, nm_usuario_p text, dt_logon_p timestamp, ie_access_p INOUT text, ie_require_justify_p INOUT text, ie_require_reason_p INOUT text, ie_require_second_user_p INOUT text, ie_permission_p INOUT text, ie_release_access_encounter_p INOUT text, ie_release_access_med_record_p INOUT text, ds_msg_permission_p INOUT text, nr_episodio_p text default null) AS $body$
DECLARE

--Encounter information
dt_alta_w 					atendimento_paciente.dt_alta%type;
nr_last_encounter_w			atendimento_paciente.nr_atendimento%type;
cd_person_code_patient_w	pessoa_fisica.cd_pessoa_fisica%type;
dt_obito_w					pessoa_fisica.dt_obito%type;
nr_seq_perfil_w				pessoa_fisica.nr_seq_perfil%type;
cd_setor_atend_atual_w		atend_paciente_unidade.cd_setor_atendimento%type;
dt_entrada_setor_atual_w	atend_paciente_unidade.dt_entrada_unidade%type;
ie_existe_setor_ant_w		varchar(2);
ie_conta_fechada_w			varchar(2);
--Rule information
ie_encounter_discharge_w	privacy_rule.ie_encounter_discharge%type;
nr_adt_time_discharge_w		privacy_rule.nr_adt_time_discharge%type;
ie_encounter_deceased_w		privacy_rule.ie_encounter_deceased%type;
ie_encounter_closed_account_w	privacy_rule.ie_encounter_closed_account%type;
nr_adt_time_transfer_w		privacy_rule.nr_adt_time_transfer%type;
ie_encounter_previous_w		privacy_rule.ie_encounter_previous%type;
ie_add_log_message_w		privacy_rule.ie_add_log_message%type;
ie_exist_profile_rule_w		varchar(1);
nr_seq_reason_history_w		privacy_reason_history.nr_sequencia%type;
nr_seq_episodio_w		atendimento_paciente.nr_seq_episodio%type;
nr_seq_episodio_ww		atendimento_paciente.nr_seq_episodio%type;

BEGIN
if (coalesce(cd_pf_paciente_p::text, '') = '') and (nr_encounter_p IS NOT NULL AND nr_encounter_p::text <> '') then	
	begin
	select	max(cd_pessoa_fisica)
	into STRICT	cd_person_code_patient_w
	from	atendimento_paciente
	where	nr_atendimento = nr_encounter_p;
	end;
elsif (nr_episodio_p IS NOT NULL AND nr_episodio_p::text <> '') then	
	select max(cd_pessoa_fisica)
	into STRICT	cd_person_code_patient_w
	from (SELECT cd_pessoa_fisica
			from EPISODIO_PACIENTE
			Where NR_SEQUENCIA = somente_numero(nr_episodio_p)
			
UNION

			SELECT cd_pessoa_fisica
			from EPISODIO_PACIENTE
			Where NR_EPISODIO = nr_episodio_p) alias3;		
else
	cd_person_code_patient_w := cd_pf_paciente_p;
end if;

select 	max(a.dt_alta),
		max(b.dt_obito),
		CASE WHEN coalesce(max(a.dt_fim_conta)::text, '') = '' THEN  'N'  ELSE 'Y' END
into STRICT	dt_alta_w,
		dt_obito_w,
		ie_conta_fechada_w
from 	atendimento_paciente a,
		pessoa_fisica b
where 	a.nr_atendimento 	= nr_encounter_p
and 	b.cd_pessoa_fisica 	= a.cd_pessoa_fisica;

select 	max(a.ie_encounter_discharge),
	max(a.nr_adt_time_discharge),
	max(a.ie_encounter_deceased),
	max(a.ie_encounter_closed_account),
	max(a.nr_adt_time_transfer),
	max(a.ie_encounter_previous),
	max(a.ie_require_justify),
	max(a.ie_require_reason),
	max(a.ie_require_second_user),
	max(a.ie_permission),
	max(a.ie_release_access_encounter),
	max(a.ie_release_access_medical),
	max(b.ds_message),
	max(a.ie_add_log_message)
into STRICT 	ie_encounter_discharge_w,
	nr_adt_time_discharge_w,
	ie_encounter_deceased_w,
	ie_encounter_closed_account_w,
	nr_adt_time_transfer_w,
	ie_encounter_previous_w,
	ie_require_justify_p,
	ie_require_reason_p,
	ie_require_second_user_p,
	ie_permission_p,
	ie_release_access_encounter_p,
	ie_release_access_med_record_p,
	ds_msg_permission_p,
	ie_add_log_message_w
from 	privacy_rule a
	left join privacy_user_message b on b.nr_sequencia = a.nr_seq_message
where 	a.nr_sequencia = nr_seq_privacy_rule_p;

ie_access_p := 'Y'; --Yes
if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') and (ie_encounter_discharge_w = 'N') then --No
	begin
	if (nr_adt_time_discharge_w IS NOT NULL AND nr_adt_time_discharge_w::text <> '') then
		begin
		if	(clock_timestamp() > dt_alta_w + (nr_adt_time_discharge_w / 24)) then
			begin
			ie_access_p := 'N'; --No
			GOTO final;
			end;
		end if;
		end;
	else
		begin
		ie_access_p := 'N'; --No
		GOTO final;
		end;
	end if;
	end;
end if;

if (dt_obito_w IS NOT NULL AND dt_obito_w::text <> '') and (ie_encounter_deceased_w = 'N') then --No
	begin
	ie_access_p := 'N'; --No
	GOTO final;
	end;
end if;

if (ie_conta_fechada_w = 'Y') and --Yes
	(ie_encounter_closed_account_w = 'N') then --No
	begin
	ie_access_p := 'N'; --No
	GOTO final;
	end;
end if;

select 	CASE WHEN Obter_Atepacu_paciente(max(nr_atendimento),'UAA')=0 THEN  'N'  ELSE 'Y' END
into STRICT 	ie_existe_setor_ant_w
from	atendimento_paciente f
where	nr_atendimento = nr_encounter_p;

if (ie_existe_setor_ant_w = 'Y') and --Yes
	(coalesce(nr_adt_time_transfer_w,0) <> 0) then
	begin
	select 	max(cd_setor_atendimento),
		max(dt_entrada_unidade)
	into STRICT 	cd_setor_atend_atual_w, dt_entrada_setor_atual_w
	from 	atend_paciente_unidade 
	where 	nr_seq_interno = Obter_Atepacu_paciente(nr_encounter_p,'A');
	
	if (cd_setor_atend_atual_w <> cd_setor_usuario_p) and
		(clock_timestamp() > dt_entrada_setor_atual_w + (nr_adt_time_transfer_w / 24)) then
		begin
		ie_access_p := 'N'; --No
		GOTO final;		
		end;
	end if;
	end;
end if;
	
	
if (ie_encounter_previous_w = 'N') then --No
	
	select 	max(ep.nr_sequencia)
	into STRICT	nr_seq_episodio_ww
	from	episodio_paciente ep
		inner join atendimento_paciente ap on ep.nr_sequencia = ap.nr_seq_episodio
		left join pessoa_fisica pf on ep.cd_pessoa_fisica = pf.cd_pessoa_fisica
		left join atend_paciente_unidade au on ap.nr_atendimento = au.nr_atendimento
	where 	1 = 1
	and	coalesce(au.cd_departamento, 0) = coalesce(obter_ultimo_depto_medico(ap.nr_atendimento), 0)
	and	coalesce(ap.nr_atendimento, 0) = coalesce((SELECT max(b.nr_atendimento)
						 from	atendimento_paciente b
						 where b.nr_seq_episodio = ep.nr_sequencia),0)
	and     ep.cd_pessoa_fisica = cd_person_code_patient_w
	and	patient_already_deleted(pf.cd_pessoa_fisica) = 'N' 
	and	obter_se_acesso_paciente_lib(pf.cd_pessoa_fisica) = 'S'
	and	coalesce(ep.dt_fim_episodio::text, '') = '';
	
		
	if (nr_episodio_p IS NOT NULL AND nr_episodio_p::text <> '') then
	    if (nr_seq_episodio_ww <> nr_episodio_p) then
		begin
		ie_access_p := 'N'; --No
		GOTO final;
		end;
	    end if;
	else
	    select max(nr_seq_episodio)
	    into STRICT   nr_seq_episodio_w
	    from   atendimento_paciente
	    where  nr_atendimento = nr_encounter_p;
	
	    if (nr_seq_episodio_w IS NOT NULL AND nr_seq_episodio_w::text <> '') then
	        if (nr_seq_episodio_w <> nr_seq_episodio_ww) then
			ie_access_p := 'N'; --No
			GOTO final;
		end if;
	    else
		select 	max(nr_atendimento)
		into STRICT 	nr_last_encounter_w
		from 	atendimento_paciente
		where 	cd_pessoa_fisica = cd_person_code_patient_w;
		
		if (nr_last_encounter_w <> nr_encounter_p) then
			begin
			ie_access_p := 'N'; --No
			GOTO final;
			end;
		end if;
	    end if;
	end if;
end if;

select 	max(nr_seq_perfil)
into STRICT   	nr_seq_perfil_w
from 	pessoa_fisica
where 	cd_pessoa_fisica = cd_person_code_patient_w;

if (nr_seq_perfil_w IS NOT NULL AND nr_seq_perfil_w::text <> '') then
	begin
	select 	CASE WHEN coalesce(max(nr_sequencia)::text, '') = '' THEN  'N'  ELSE 'Y' END
	into STRICT 	ie_exist_profile_rule_w
	from 	privacy_rule_patient_profi
	where 	nr_seq_patient_profile = nr_seq_perfil_w
	and 	nr_seq_privacy_rule = nr_seq_privacy_rule_p;
	
	if (ie_exist_profile_rule_w = 'N') then --No
		begin
		ie_access_p := 'N'; --No
		GOTO final;
		end;
	end if;
	end;
end if;

<<final>>
if (ie_require_reason_p = 'O') then -- Only once
	begin
	if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then -- Required be in compliance with the actual behavor
		begin
		ie_require_reason_p := 'Y'; -- Yes
		end;
	else
		begin
		select 	max(nr_sequencia)
		into STRICT	nr_seq_reason_history_w
		from	privacy_reason_history
		where	nr_atendimento = nr_encounter_p
		and	nm_usuario_nrec = nm_usuario_p;
		
		if (nr_seq_reason_history_w IS NOT NULL AND nr_seq_reason_history_w::text <> '') then
			begin
			ie_require_reason_p := 'N'; -- No
			end;
		else
			begin
			ie_require_reason_p := 'Y'; -- Yes
			end;
		end if;
		end;
	end if;
	end;
elsif (ie_require_reason_p = 'S') then -- By session
	begin
	if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then -- Required be in compliance with the actual behavor
		begin
		ie_require_reason_p := 'Y'; --Yes
		end;
	else
		begin
		select 	max(nr_sequencia)
		into STRICT	nr_seq_reason_history_w
		from	privacy_reason_history
		where	nr_atendimento = nr_encounter_p
		and	nm_usuario_nrec = nm_usuario_p
		and	dt_atualizacao_nrec > dt_logon_p;
		
		if (nr_seq_reason_history_w IS NOT NULL AND nr_seq_reason_history_w::text <> '') then
			begin
			ie_require_reason_p := 'N'; -- No
			end;
		else
			begin
			ie_require_reason_p := 'Y'; -- Yes
			end;
		end if;
		end;
	end if;
	end;
elsif (ie_require_reason_p = 'A') then -- Always
	begin
	ie_require_reason_p := 'Y'; -- Yes
	end;
end if;

if (ie_add_log_message_w = 'Y') then -- Yes
	begin
	ds_msg_permission_p := ds_msg_permission_p || ' ' || obter_texto_tasy(950001, null);
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE validate_business_rule ( nr_seq_privacy_rule_p bigint, nr_encounter_p bigint, cd_setor_usuario_p bigint, cd_pf_paciente_p text, nm_usuario_p text, dt_logon_p timestamp, ie_access_p INOUT text, ie_require_justify_p INOUT text, ie_require_reason_p INOUT text, ie_require_second_user_p INOUT text, ie_permission_p INOUT text, ie_release_access_encounter_p INOUT text, ie_release_access_med_record_p INOUT text, ds_msg_permission_p INOUT text, nr_episodio_p text default null) FROM PUBLIC;

