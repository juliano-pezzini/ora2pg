-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_get_emergency_disp_rule (dt_reference_p timestamp, cd_estabelecimento_p bigint, cd_setor_atendimento_p bigint, ie_via_aplicacao_p text, nr_seq_order_unit_p bigint, nr_seq_cpoe_rp_p bigint, dt_start_p INOUT timestamp, dt_end_p INOUT timestamp, dt_deadline_p INOUT timestamp) AS $body$
DECLARE


dt_emerg_controle_w		varchar(1) := 'N';
dt_start_calc_normal_w	timestamp	:= null;
dt_start_calc_emerg_w	timestamp	:= null;
dt_end_calc_emerg_w		timestamp	:= null;

ie_via_aplicacao_w		varchar(5) := null;
cd_setor_atendimento_w	integer;
dt_current_date_w		timestamp;
current_weekday_w		smallint;
dt_limite_emerg_w		timestamp;


c04 CURSOR FOR
	SELECT	nr_sequencia,
			si_dispensation_day,
			hr_dispensation_time,
			coalesce(si_action,'1') si_action,
			coalesce(qt_dispensation_days, 0) qt_dispensation_days,
			si_limit_day,
			dt_fixed_start,
			dt_fixed_end,
			dt_fixed_limit,
			hr_limit_time,
			ie_via_aplicacao,
			cd_setor_atendimento,
			hr_business_day_start,
			hr_business_day_end,
			hr_saturday_start,
			hr_saturday_end,
			hr_sunday_start,
			hr_sunday_end,
			hr_holiday_start,
			hr_holiday_end
	from	cpoe_week_dispens_rule
	where	si_action = '4'
	and (cd_setor_atendimento = coalesce(cd_setor_atendimento_w,cd_setor_atendimento) or coalesce(cd_setor_atendimento::text, '') = '')
	and (ie_via_aplicacao = coalesce(ie_via_aplicacao_w, ie_via_aplicacao) or coalesce(ie_via_aplicacao::text, '') = '')
	-- and ((dt_reference_pc between dt_fixed_start and dt_fixed_end) )
	order by cd_setor_atendimento, ie_via_aplicacao, dt_fixed_start;

BEGIN
dt_current_date_w := clock_timestamp();

if (nr_seq_cpoe_rp_p IS NOT NULL AND nr_seq_cpoe_rp_p::text <> '') then
	begin
	select	a.ie_via_aplicacao,
			obter_setor_atendimento(b.nr_atendimento)
	into STRICT	ie_via_aplicacao_w,
			cd_setor_atendimento_w
	from	cpoe_order_unit b,
			cpoe_rp a
	where	b.nr_sequencia = a.nr_seq_cpoe_order_unit
	and		a.nr_seq_cpoe_order_unit = nr_seq_order_unit_p
	and 	a.nr_sequencia = nr_seq_cpoe_rp_p;

	exception
		when others then
		begin
		ie_via_aplicacao_w     := null;
		cd_setor_atendimento_w := null;
		end;
	end;
else
	ie_via_aplicacao_w		 := ie_via_aplicacao_p;
	cd_setor_atendimento_w := cd_setor_atendimento_p;
end if;

-- Search for specific rule
for r_c04 in c04 loop
	dt_start_calc_normal_w	:= trunc(dt_reference_p,'dd');
	-- dt_current_date_w       := sysdate;
	-- dt_current_date_w       := to_date('01/04/2021 19:00','dd/mm/yyyy hh24:mi');    
	-- dt_current_date_w       := to_date('31/03/2021 18:30','dd/mm/yyyy hh24:mi');        
	current_weekday_w	      := to_char(dt_current_date_w,'d');

	dt_emerg_controle_w := 'N';
	--> Dias Uteis. --> periodo 01
	if  (current_weekday_w between 2 and 6 AND r_c04.hr_business_day_start IS NOT NULL AND r_c04.hr_business_day_start::text <> '') then  --> Mon to Fri.
		dt_start_calc_emerg_w := pkg_date_utils.get_DateTime(dt_current_date_w, pkg_date_utils.get_Time(
						coalesce(pkg_date_utils.extract_field('HOUR', r_c04.hr_business_day_start, 0), 0),
						coalesce(pkg_date_utils.extract_field('MINUTE', r_c04.hr_business_day_start, 0), 0)));
		dt_end_calc_emerg_w := pkg_date_utils.end_of(dt_current_date_w,'DAY');

		if (dt_current_date_w >= dt_start_calc_emerg_w AND dt_current_date_w <= dt_end_calc_emerg_w) then
		  dt_emerg_controle_w := 'S';
		end if;
	end if;
	--> periodo 02
	if  (current_weekday_w between 2 and 6 AND r_c04.hr_business_day_end IS NOT NULL AND r_c04.hr_business_day_end::text <> '') then  --> Mon to Fri.
		dt_start_calc_emerg_w := pkg_date_utils.start_of(dt_current_date_w,'DAY');
		dt_end_calc_emerg_w := pkg_date_utils.get_DateTime(dt_current_date_w, pkg_date_utils.get_Time(
						coalesce(pkg_date_utils.extract_field('HOUR', r_c04.hr_business_day_end, 0), 0),
						coalesce(pkg_date_utils.extract_field('MINUTE', r_c04.hr_business_day_end, 0), 0)));

		if (dt_current_date_w >= dt_start_calc_emerg_w AND dt_current_date_w <= dt_end_calc_emerg_w) then
		  dt_emerg_controle_w := 'S';
		end if;
	end if;


	--> periodo 01  --> SATURDAY
	if  (current_weekday_w = 7 AND r_c04.hr_saturday_start IS NOT NULL AND r_c04.hr_saturday_start::text <> '') then
		dt_start_calc_emerg_w := pkg_date_utils.get_DateTime(dt_current_date_w, pkg_date_utils.get_Time(
						coalesce(pkg_date_utils.extract_field('HOUR', r_c04.hr_saturday_start, 0), 0),
						coalesce(pkg_date_utils.extract_field('MINUTE', r_c04.hr_saturday_start, 0), 0)));
		dt_end_calc_emerg_w := pkg_date_utils.end_of(dt_current_date_w,'DAY');

		if (dt_current_date_w >= dt_start_calc_emerg_w AND dt_current_date_w <= dt_end_calc_emerg_w) then
		  dt_emerg_controle_w := 'S';
		end if;

	end if;
	--> periodo 02
	if  (current_weekday_w = 7 AND r_c04.hr_saturday_end IS NOT NULL AND r_c04.hr_saturday_end::text <> '') then
		dt_start_calc_emerg_w := pkg_date_utils.start_of(dt_current_date_w,'DAY');
		dt_end_calc_emerg_w := pkg_date_utils.get_DateTime(dt_current_date_w, pkg_date_utils.get_Time(
						coalesce(pkg_date_utils.extract_field('HOUR', r_c04.hr_saturday_end, 0), 0),
						coalesce(pkg_date_utils.extract_field('MINUTE', r_c04.hr_saturday_end, 0), 0)));

		if (dt_current_date_w >= dt_start_calc_emerg_w AND dt_current_date_w <= dt_end_calc_emerg_w) then
		  dt_emerg_controle_w := 'S';
		end if;

	end if;

	--> periodo 01 --> SUNDAY
	if  (current_weekday_w = 1 AND r_c04.hr_sunday_start IS NOT NULL AND r_c04.hr_sunday_start::text <> '') then
		dt_start_calc_emerg_w := pkg_date_utils.get_DateTime(dt_current_date_w, pkg_date_utils.get_Time(
						coalesce(pkg_date_utils.extract_field('HOUR', r_c04.hr_sunday_start, 0), 0),
						coalesce(pkg_date_utils.extract_field('MINUTE', r_c04.hr_sunday_start, 0), 0)));
		dt_end_calc_emerg_w := pkg_date_utils.end_of(dt_current_date_w,'DAY');

		if (dt_current_date_w >= dt_start_calc_emerg_w AND dt_current_date_w <= dt_end_calc_emerg_w) then
		  dt_emerg_controle_w := 'S';
		end if;
	end if;
	--> periodo 02
	if  (current_weekday_w = 1 AND r_c04.hr_sunday_end IS NOT NULL AND r_c04.hr_sunday_end::text <> '') then
		dt_start_calc_emerg_w := pkg_date_utils.start_of(dt_current_date_w,'DAY');
		dt_end_calc_emerg_w := pkg_date_utils.get_DateTime(dt_current_date_w, pkg_date_utils.get_Time(
						coalesce(pkg_date_utils.extract_field('HOUR', r_c04.hr_sunday_end, 0), 0),
						coalesce(pkg_date_utils.extract_field('MINUTE', r_c04.hr_sunday_end, 0), 0)));

		if (dt_current_date_w >= dt_start_calc_emerg_w AND dt_current_date_w <= dt_end_calc_emerg_w) then
		  dt_emerg_controle_w := 'S';
		end if;
	end if;

	--> periodo 01 --> HOLIDAY
	if  ((obter_se_feriado(coalesce(cd_estabelecimento_p,1), dt_current_date_w) > 0) and (r_c04.hr_holiday_start IS NOT NULL AND r_c04.hr_holiday_start::text <> '')) then
		dt_start_calc_emerg_w := pkg_date_utils.get_DateTime(dt_current_date_w, pkg_date_utils.get_Time(
						coalesce(pkg_date_utils.extract_field('HOUR', r_c04.hr_holiday_start, 0), 0),
						coalesce(pkg_date_utils.extract_field('MINUTE', r_c04.hr_holiday_start, 0), 0)));
		dt_end_calc_emerg_w := pkg_date_utils.end_of(dt_current_date_w,'DAY');

		if (dt_current_date_w >= dt_start_calc_emerg_w AND dt_current_date_w <= dt_end_calc_emerg_w) then
		  dt_emerg_controle_w := 'S';
		end if;

	end if;
	--> periodo 02
	if  ((obter_se_feriado(coalesce(cd_estabelecimento_p,1), dt_current_date_w) > 0) and (r_c04.hr_holiday_end IS NOT NULL AND r_c04.hr_holiday_end::text <> '')) then
		dt_start_calc_emerg_w := pkg_date_utils.start_of(dt_current_date_w,'DAY');
		dt_end_calc_emerg_w := pkg_date_utils.get_DateTime(dt_current_date_w, pkg_date_utils.get_Time(
						coalesce(pkg_date_utils.extract_field('HOUR', r_c04.hr_holiday_end, 0), 0),
						coalesce(pkg_date_utils.extract_field('MINUTE', r_c04.hr_holiday_end, 0), 0)));

		if (dt_current_date_w >= dt_start_calc_emerg_w AND dt_current_date_w <= dt_end_calc_emerg_w) then
		  dt_emerg_controle_w := 'S';
		end if;

	end if;

	-- dt_limite_emerg_w   := pkg_date_utils.end_of( dt_current_date_w + r_c04.qt_dispensation_days, 'DAY' );
	dt_limite_emerg_w   := dt_current_date_w + r_c04.qt_dispensation_days;
  if (to_char(dt_limite_emerg_w,'d') >1) and (to_char(dt_limite_emerg_w,'d') <=5) then
     dt_limite_emerg_w   := dt_limite_emerg_w +1;
  end if;

	while ((position(to_char(dt_limite_emerg_w,'d') in '6|7|1') > 0) or (obter_se_feriado(cd_estabelecimento_p, dt_limite_emerg_w)>0)) loop
		dt_limite_emerg_w := dt_limite_emerg_w +1;
	end loop;

	--> DT reference within dispensation days.
	if dt_emerg_controle_w = 'S' then
		if (dt_reference_p >= dt_current_date_w) and (dt_reference_p <= dt_limite_emerg_w) then
			dt_start_p   	:= dt_reference_p;
      --dt_end_p	  	:= (dt_reference_p+1)-(1/(24*60));    --Funciona para TC1, TC2 e TC3   
      dt_end_p := pkg_date_utils.get_DateTime(trunc(dt_limite_emerg_w), pkg_date_utils.get_Time(
              coalesce(pkg_date_utils.extract_field('HOUR'  , dt_reference_p, 0), 0),
              coalesce(pkg_date_utils.extract_field('MINUTE', dt_reference_p, 0), 0)));
			dt_end_p	  	:= dt_end_p-(1/(24*60));

			dt_deadline_p	:= dt_start_calc_emerg_w-(1/(24*60));

		end if;
	else
		dt_emerg_controle_w := 'N';
		dt_start_p    := null;
		dt_end_p      := null;
		dt_deadline_p := null;
	end if;

	exit;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_get_emergency_disp_rule (dt_reference_p timestamp, cd_estabelecimento_p bigint, cd_setor_atendimento_p bigint, ie_via_aplicacao_p text, nr_seq_order_unit_p bigint, nr_seq_cpoe_rp_p bigint, dt_start_p INOUT timestamp, dt_end_p INOUT timestamp, dt_deadline_p INOUT timestamp) FROM PUBLIC;

