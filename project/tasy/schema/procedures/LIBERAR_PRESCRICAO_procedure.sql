-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE liberar_prescricao (nr_prescricao_p bigint, nr_atendimento_p bigint, ie_tipo_pessoa_p text, cd_perfil_p bigint, nm_usuario_p text, ie_prescricao_p text, ds_erro_p INOUT text, ie_gera_hor_copia_cpoe_p text default 'S') AS $body$
DECLARE


medico_libera_tudo_w         varchar(10);
dt_liberacao_medico_w      timestamp;
dt_liberacao_w          timestamp;
dt_urgente_w          timestamp;
ie_motivo_prescricao_w      varchar(03);
ie_lib_farm_w          varchar(03);
cd_profissional_w        varchar(50);
ie_isolamento_w          varchar(1);
ie_origem_inf_w          varchar(01);
ie_padronizado_w        varchar(01);
ie_prescr_nut_w          varchar(01);
cd_unidade_basica_w        varchar(10);
cd_unidade_compl_w        varchar(10);
ie_lib_medico_w          varchar(01);
ie_chamou_w            varchar(01);
VarPermiteLibAposalta_w      varchar(01);
ie_libera_se_proced_w      varchar(15);
ie_evolucao_clinica_w      varchar(15);
ie_solucao_especial_w      varchar(15);
ie_libera_rep_alta_w      varchar(5);
VarAlocarPacObservacao_w    varchar(5);
cd_doenca_cid_w          varchar(15);
ds_indicacao_w          varchar(2000);
ie_tipo_evolucao_w        varchar(15);
ie_interv_farm_w        varchar(15);
cd_item_w            varchar(50);
IE_FUNCAO_LIBERAR_W        varchar(50);
ds_horarios_2w          varchar(255);
ds_hora_npt_w          varchar(255);
ds_orientacao_w          varchar(4000);
ds_procedimento_w        varchar(255);
dt_prevista_w          timestamp;
dt_alta_w            timestamp;
dt_prim_setor_w          timestamp;
ie_bomba_infusao_w        varchar(15);
ie_lib_enfermagem_w        varchar(01);
ie_etapa_especial_w        varchar(01);
ds_comunicado_w          varchar(4000);
ds_justificativa_w        varchar(4000);
ds_material_w          varchar(4000);
ie_dias_util_medic_w      varchar(1);
qt_max_dia_aplic_w        smallint;
qt_w              bigint;
nr_seq_nut_w          bigint;
qt_dietas_orais_w        bigint;
qt_dietas_w            bigint;
nr_seq_nut_prot_w        bigint;
qt_peso_ideal_w          double precision;
dt_lib_CI_w            timestamp;
dt_liberacao_medico_CI_w    timestamp;
cd_setor_atendimento_w      integer;
cd_setor_atendimento_c01_w    integer;
qt_dias_tratamento_w      integer;
qt_dose_diaria_w        double precision;
cd_setor_atendimento_ww      integer;
ie_agrup_w            bigint;
dt_ambas_liberacoes_w      timestamp;
nr_seq_horario_w        bigint;
cd_motivo_baixa_ret_w      bigint;
cd_motivo_baixa_Param_w      bigint;
nr_seq_material_w        bigint;
qt_nao_agora_w          bigint;
nr_seq_item_w          bigint;
nr_agrupamento_w        bigint;
cd_protocolo_w          bigint;
nr_seq_gasoterapia_w      bigint;
nr_seq_protocolo_w        bigint;
nr_sequencia_www        bigint;
ie_regra_disp_www        varchar(255);
cd_setor_prescr_w        integer;
qt_exame_w            bigint;
cd_tipo_recomendacao_w      bigint;
nr_seq_recomendacao_w      bigint;
cd_setor_entrega_w          integer;
nr_dia_util_w          bigint;
qt_max_dia_aplic_ww        smallint;
qt_dia_terapeutico_w      smallint;
qt_dia_profilatico_w      smallint;
dt_prescricao_w          timestamp;
dt_prim_hor_prescr_w          timestamp;
dt_prescricao_ww        timestamp;
dt_prescricao_www        timestamp;
cd_setor_atend_w        integer;
nr_prescricao_mae_w        bigint;
ie_reserva_lib_medico_w      varchar(10);
qt_horas_passado_w        bigint;
ie_liberado_w          boolean := false;/* elemar - 12/02/04 - inclui esta variavel e seu tratamento */
ie_liberado_medico_w      boolean := false;
nr_sequencia_w          bigint;
dt_prim_horario_w        varchar(5);
dt_prim_horario_rec_w      varchar(5);
ie_setor_w            smallint;
qt_solic_w            bigint;
ie_emergencia_w          varchar(1);
ie_cartao_emergencia_w   prescr_medica.ie_cartao_emergencia%type;
qt_cito_w            smallint;
qt_histo_w            smallint;
ie_medico_lib_setor_w      varchar(3);
cd_estabelecimento_w      smallint;
ie_gera_reserva_prescr_w    varchar(1);
ie_gera_reserva_prescr_ww    varchar(1);
ie_gerar_result_prescr_w    varchar(1);
ie_gera_log_amostra_w      varchar(1);
ie_gerar_sequencia_w      varchar(1);
ie_gera_amostra_coleta_w    varchar(1);
ie_atualiza_dt_urgente_w    varchar(1);
ie_gerar_lote_setor_w      varchar(1);
ie_gravar_hor_w          varchar(1);
qt_unidade_atend_w        bigint;
ie_lib_w            smallint;
ie_lib_2w            bigint;
ie_regra_lib_w          varchar(10);
qt_quimio_w            bigint;
ie_tipo_convenio_w        smallint;
ie_laudo_w            varchar(1);
dt_validade_w          timestamp;
nr_seq_proc_interno_w      bigint;
nr_doc_conv_w          varchar(20);
cd_senha_w            prescr_medica.cd_senha%type;
nr_doc_convenio_w        varchar(20);
cd_convenio_w          integer;
cd_convenio_ww          atend_categoria_convenio.cd_convenio%type;
ie_tipo_atendimento_w      smallint;
qt_proced_w            bigint;
ie_prescr_emergencia_w      varchar(1);
nr_seq_solucao_w        integer;
nr_seq_solucao_2w        integer;
qt_comp_solucao_w        bigint;
varregraguia_w          varchar(10);
ie_tipo_guia_w          varchar(2);
nr_seq_prot_glic_w        bigint;
nr_seq_glic_w          bigint;
ie_passagem_lib_proc_w      varchar(1) := 'N' /* Rafael em 13/9/7 OS68015 */
;
qt_peso_w            real;
qt_altura_w            real;
qt_sinal_vital_w        bigint;
nr_sequencia_sinal_w      bigint;
cd_prescritor_w          varchar(10);
qt_hora_intervalo_w        double precision;
dt_horario_w          timestamp;
dt_inicio_prescr_w        timestamp;
dt_inicio_prescr_ww        timestamp;
dt_validade_prescr_w      timestamp;
dt_proxima_dose_w        timestamp;
dt_proxima_dose_orig_w      timestamp;
qt_medic_uso_w          bigint;
cd_pessoa_fisica_w        varchar(10);
ie_status_lote_ext_w      smallint;
ie_status_coleta_w        smallint;
ie_status_sem_coleta_w      smallint;
ie_status_autor_pend_w      smallint;
dt_entrada_antend_w        timestamp;
ds_diluicao_w          varchar(2000);
qt_solucao_total_w        double precision;
ie_acm_w            varchar(1);
ie_se_necessario_w        varchar(1);
ie_lib_com_sol_zero_w      varchar(1);
VarConsisteEstrutQuimio_w     varchar(10);/*david em 14/07/2008 - os 95252*/
qt_agora_w            bigint;/*david em 14/07/2008 - os 99092*/
ds_prescricao_w          varchar(255);
ie_status_pa_w          varchar(15);
ie_regra_w            varchar(15);
cd_material_w          bigint;
nr_seq_ficha_w          bigint;
nr_seq_transcricao_w      bigint;/*david em 01/09/2008 os 106867*/
ie_atual_status_lib_medico_w   varchar(1);
ie_lib_presc_autor_medico_w    varchar(1)  := 'N';
ds_erro_w            varchar(4000);
dt_inicio_item_w        timestamp;
nr_etapas_w            smallint;
qt_hora_fase_w          double precision;
ds_horarios_w          varchar(255);
ds_horarios_npt_w        varchar(255);
ds_horarios_padr_npt_w      varchar(255);
ie_urgencia_w          varchar(1);
ie_proc_ivc_w          varchar(15);
hr_prescricao_w          varchar(15);
hr_dose_especial_w        varchar(15);
dt_reavaliacao_medica_w      timestamp;
ie_regra_seq_prescr_w      varchar(15);
cd_intervalo_agora_w      varchar(7);
nr_seq_agora_w          bigint;
qt_min_agora_w          smallint;
dt_liberacao_medico_ww      timestamp;
ie_gerar_resumo_rep_w      varchar(15);
ie_gerar_sequencia_lab_w    varchar(1);
ie_ajustar_entrega_w      varchar(10);
nr_prescricao_ant_w        bigint;
ie_prescricao_identica_w    varchar(1);
ie_momento_lote_w        varchar(1) := 'E';
--ie_medic_lib_tudo_w        varchar2(1);
ie_prescr_lib_w          varchar(1);
ie_lib_individual_w        varchar(1);
cd_procedimento_w        bigint;
ie_origem_proced_w        bigint;
dt_prevista_onco_w        timestamp;
ie_lib_farmacia_w        varchar(1);
qt_dieta_w            bigint;
nr_seq_evento_w          bigint;
ie_gerar_evento_w        varchar(1);
ie_objetivo_uso_w        varchar(1);
ie_possui_regra_w        varchar(1);
dt_entrega_w          timestamp;
nr_atendimento_w        bigint;
nr_seq_entrega_atend_w      bigint;
dt_entrega_atendimento_w    timestamp;
qt_registros_w          bigint;
ie_lib_farm_prescr_interv_w    varchar(1);
ie_prescr_farm_w        varchar(1);
ie_tipo_hemodialise_w      varchar(15);
ie_tipo_peritoneal_w      varchar(15);
cd_mot_baixa_prescr_alta_w     smallint;
ie_prescr_alta_w        varchar(1);
ie_altera_dt_proxima_dose_w    varchar(1);
ie_checar_automatico_w      varchar(1);
ie_hemodialise_w        varchar(1);
nr_seq_dialise_w        bigint;
qt_tempo_aplicacao_w      double precision;
cd_setor_exame_w        integer;
nr_seq_gas_w          bigint;
dt_inicio_gas_w          timestamp;
dt_fim_gas_w          timestamp;
ie_solucao_pca_w        varchar(1);
ie_obriga_dados_clinicos_W    varchar(1);
ds_dado_clinico_w        varchar(255);
qt_min_intervalo_w        integer;
ie_classif_intervalo_w      varchar(10);
ie_sv_lib_w            varchar(10);
qt_minutos_agora_w        smallint;
qt_dose_espec_kit_w        double precision;
hr_dose_espec_kit_w        varchar(5);
nr_seq_kit_w          bigint;
ie_consiste_regra_lib_setor_w   varchar(1);
cd_categoria_w          varchar(10);
cd_plano_w            varchar(10);
nr_seq_classificacao_w      bigint;
ds_mensagem_w          varchar(255);
ie_bloq_atendimento_w      varchar(1);
ie_clinica_w          atendimento_paciente.ie_clinica%type;
cd_empresa_cat_w        bigint;
cd_procedencia_w        bigint;
nr_seq_cobertura_w        bigint;
nr_seq_tipo_acidente_w      bigint;
cd_tipo_acomodacao_w      bigint;
cd_medico_w            varchar(10);
cd_medico_prescr_w        pessoa_fisica.cd_pessoa_fisica%type;
qt_idade_w            bigint;
ie_tipo_convenio_ant_w      smallint;
nr_seq_queixa_w          bigint;
nr_seq_queixa_ant_w        bigint;
nr_sequencia_ww          bigint;
qt_existe_regra_proc_w      bigint;
qt_existe_regra_mat_w      bigint;
qt_existe_regra_dieta_w      bigint;
qt_existe_regra_rec_w      bigint;
ie_proc_mat_dieta_rec_w        varchar(1);
qt_regra_integracao_w      bigint;
ie_gerar_lote_unico_w      varchar(1);
ie_far_gera_lote_unico_w    varchar(1);
nr_regra_copia_w        bigint;
nr_prescricao_ww        bigint;
nr_prescricao_w1        bigint;
cont_dias_w            bigint := 1;
qt_dias_extensao_w        bigint := 1;
cd_tipo_recomendacao_ww      bigint;
nr_seq_classif_w        bigint;
nr_seq_topografia_w        bigint;
ds_complemento_w        varchar(4000);
cd_intervalo_w          varchar(7);
cd_intervalo_ww          varchar(7);
ie_prescricao_alta_w      varchar(1);
ie_lancar_recomendacao_w    varchar(1);
ie_duplica_proc_lado_w      varchar(1);
nr_seq_tipo_avaliacao_w      bigint;
nr_seq_avaliacao_w        bigint;
ds_aux_w            varchar(4000);
ie_gera_integracao_w      varchar(1);
nr_seq_precaucao_w        bigint;
ie_regra_liberacao_w      varchar(1);
ie_consiste_setor_prescr_w    varchar(1);
ie_permite_prescricao_w      varchar(1);
ie_lib_sem_interv_w        varchar(10);
ie_controle_duplicado_w      varchar(1);
nr_seq_interno_w        bigint;
nr_prescricao_original_w    bigint;
nr_sequencia_anterior_w      bigint;
ie_autor_w            varchar(3);
qt_dietas_prescr_w        bigint;
qt_dia_prim_hor_w        bigint;
hr_prim_horario_w        varchar(10);
dt_prev_exec_nsv_w        timestamp;
nr_prescr_proc_nsv_w      bigint;
nr_seq_procedimento_w      bigint;
ie_possui_medic_sem_apraz_w    varchar(1);
dt_lib_w            timestamp;
dt_lib_med_w          timestamp;
nr_horas_validade_w        prescr_medica.nr_horas_validade%type;
nr_ocorrencia_w          double precision;
ds_dose_diferenciada_w      varchar(50);
cd_unidade_medida_dose_w    varchar(30);
qt_dispensar_w          double precision;
ie_regra_disp_w          varchar(5);
qt_dose_w            double precision;
qt_dose_especial_w        double precision;
ie_via_aplicacao_w        varchar(5);
qt_paciente_homecare_w      integer;
qt_prescr_nutri_w        integer;
nr_seq_serv_dia_w        bigint;
nr_seq_serv_rep_w        bigint;
ie_lib_enf_hor_w        varchar(1);
ie_grava_historico_hor_w    varchar(1);
ie_funcao_prescritor_w      prescr_medica.ie_funcao_prescritor%type;
ds_itens_prescr_w        prescr_medica.ds_itens_prescr%type;
cd_funcao_origem_w        prescr_medica.cd_funcao_origem%type;
ie_consiste_w          boolean;
ie_consiste_ww          varchar(1);
ie_modificado_w          varchar(1);
ie_integracao_shift_w      varchar(1); --integracao shift
ie_prescricao_integra_shift_w  varchar(1);
ie_lib_setor_w          varchar(1);
ie_rep_cpoe_w          parametro_medico.ie_rep_cpoe%type;
dt_inicio_nut_w          timestamp;
hr_inicio_nut_w          varchar(5);
nr_sequencia_mat_w        prescr_material.nr_sequencia%type;
nr_sequencia_sug_w        prescr_material.nr_sequencia%type;
ie_gera_disp_acm_sn_w      varchar(1);
ie_quimio_w            varchar(1);
nr_seq_c34_w          prescr_material.nr_sequencia%type;
dt_horario_c34_w        prescr_mat_hor.dt_horario%type;
ds_horarios_c34_w        prescr_material.ds_horarios%type;
cont_c34_w            bigint;
DT_LIBERACAO_MEDICO_c34_w    prescr_medica.dt_liberacao_medico%type;
DT_LIBERACAO_c34_w        prescr_medica.dt_liberacao%type;
ie_existe_reg_amostra_w      varchar(1);
ie_gerou_nr_controle_w      varchar(1) := 'N';
ie_hemod_solucao_w        varchar(1);
k                integer;
qt_dia_adic_w          bigint := 0;
ie_gerar_npt_fases_w      varchar(1) := 'N';
dt_prev_execucao_w        timestamp;
ie_gerar_pass_setor_w      varchar(1) := 'N';
dt_suspensao_w          timestamp;
nr_seq_pend_pac_acao_w        bigint;
const_acao_liberada           constant bigint := 1;
ds_param_integ_hl7_w      varchar(4000) := '';

ds_titulo_w           varchar(255);
ie_duplic_proced_lado_w      varchar(1) := 'N';
ie_conduta_dietoterapica_w    varchar(1);
nr_prescricoes_w        prescr_medica.nr_prescricoes%type;
ie_prescr_conduta_w        varchar(1);
ie_libera_quimio_w        varchar(1);
ie_agora_medico_w        varchar(1) := 'N';
ie_integracao_matrix_249_WS_V   varchar(1);
qt_prescr_w            smallint;
qt_max_validade_w        bigint;
ie_nivel_atencao_w        varchar(1);
nr_prescricao_vig_w        prescr_medica.nr_prescricao%type;
ie_prescricao_duplicada_w    varchar(1);
ie_matrix_status_envio_integ_w  lab_parametro.ie_matrix_status_envio_integ%type;
qt_nao_checados_w        bigint;
ie_existe_regra_w        varchar(1);
dt_atual_w             timestamp;
Var_916_param_190_w        varchar(15);
cd_motivo_alta_medica_w      smallint;
ds_horarios_medic_w        varchar(255);
ie_dose_espec_agora_w      varchar(1);
ds_horarios_ww          varchar(255);
nr_seq_mat_cpoe_w        cpoe_material.nr_sequencia%type;
cd_funcao_w            bigint;
nr_seq_param_w          bigint;
nr_seq_interno_ww        prescr_procedimento.nr_seq_interno%type;
reg_integracao_w        gerar_int_padrao.reg_integracao;
qt_medic_w            smallint;
cont_w              smallint;
nr_seq_exame_w          prescr_procedimento.nr_seq_exame%type;
nr_seq_prescr_w     prescr_procedimento.nr_sequencia%type;
cd_material_exame_w prescr_procedimento.cd_material_exame%type;
dt_lib_temp_w          timestamp;
qt_convenio_w          bigint;
nr_seq_atecaco_w        bigint;
ie_consite_convenio_w      varchar(1);
ie_visualizar_conv_w      varchar(1);
dt_lib_horario_w        timestamp;
ie_leite_materno_w        prescr_leite_deriv.ie_leite_materno%type;
qt_jejum_w            rep_jejum.nr_sequencia%type;
nr_seq_proc_cpoe_w        cpoe_procedimento.nr_sequencia%type;
nr_seq_hemo_cpoe_w        cpoe_hemoterapia.nr_sequencia%type;
qt_volume_adep_w        prescr_solucao.qt_volume%type;
cd_perfil_enf_w         perfil.cd_perfil%type;
cd_funcao_ativa_enf_w       funcao.cd_funcao%type;
ie_prescricao_anestesica_w     prescr_medica_compl.ie_prescricao_anestesica%type;
ie_validar_guia_prescr_w    varchar(1);
ie_possui_jejum_w        varchar(1);
dt_inicio_w            rep_jejum.dt_inicio%type;
dt_fim_w            rep_jejum.dt_fim%type;
ie_esquema_alternado_w            prescr_solucao.ie_esquema_alternado%type;
nr_Prescricao_scc_w             prescr_procedimento.nr_prescricao%type;
nr_sequencia_scc_w              prescr_procedimento.nr_sequencia%type;
ds_param_integ_hl7_scc_w            varchar(4000);
ds_machine_name_w varchar(255);
ie_info_rastre_prescr_w      varchar(1);
ds_alteracao_rastre_w      varchar(4000);
nr_seq_procedimento_ww    prescr_proc_hor.nr_sequencia%type;
nr_prescricao_w       prescr_procedimento.nr_prescricao%type;
ie_param_11 varchar(1);
ie_rastre_prescr_libfarm_w    varchar(1);
ds_rastre_prescr_libfarm_w    varchar(4000);
ie_was_changed_w        prescr_material.ie_modificado%type;
ds_guampa_w            varchar(10)  := chr(39);
nr_seq_sistema_integ_w      integer;
nr_seq_proc_interno_ww prescr_procedimento.nr_seq_proc_interno%type;
nr_seq_proc_cpoe_ww prescr_procedimento.nr_seq_proc_cpoe%type;
dt_desired_start_w cpoe_procedimento.dt_desired_start%type;
qt_duration_w cpoe_procedimento.qt_duration%type;
cd_posicao_w cpoe_procedimento.cd_posicao%type;
nr_exame_sequence prescr_procedimento.nr_sequencia%type;
ie_transmit_special_order varchar(1);
ie_retrogrado_w cpoe_procedimento.ie_retrogrado%type;
ie_gerou_dieta_w  boolean := false;
type materials_table        is table of prescr_material.nr_sequencia%type index by integer;
vetor_lista_materiais_w        materials_table;
nr_contador_w        smallint;
qt_prescr_dieta_hor_w      bigint;
ds_param_integration_w varchar(20000);
json_data_w           text;
json_data_ww          text;
bacteria_count   numeric(20) :=0;
specimen_count   numeric(20) :=0;
ie_erro_dieta_w            varchar(1);
sql_w                      varchar(5000);
ie_update_um_w         varchar(1);
ie_update_dois_w       varchar(1);
ie_update_tres_w       varchar(1);
ie_update_quatro_w     varchar(1);
ie_update_cinco_w      varchar(1);
ie_lado_w cpoe_procedimento.ie_lado%type;
ie_sub_type_w        varchar(3) := 'ME';

IE_SCHEDULED_DIET_W cpoe_dieta.ie_duracao%type;
nr_seq_serv_dia_rep_w nut_atend_serv_dia_rep.nr_sequencia%type;
ie_record_execution_w varchar(1);
ie_exists_w smallint := 0;
ie_allow_execution_w    cpoe_rp.ie_allow_execution%type;
ie_gen_batch_per_order_unit_w      varchar(1);
nr_seq_complemento_w 	solicitacao_exame_compl.nr_sequencia%type;
nr_agenda_compl_w		prescr_medica.nr_seq_agenda%type;
nr_horas_apos_copia_w bigint;
ie_operacao_interv_w intervalo_prescricao.ie_operacao%type;
dt_inicio_medic_w prescr_material.dt_inicio_medic%type;
dt_prox_geracao_w cpoe_material.dt_prox_geracao%type;

-- NPT
ie_gerar_horario_npt_w		nut_pac.ie_gerar_horario%type;

c001 CURSOR FOR
   SELECT  a.nr_sequencia
from    cpoe_order_unit a,
        cpoe_material b,
        prescr_material c
where   a.nr_sequencia = b.nr_seq_cpoe_order_unit
and     c.nr_seq_mat_cpoe = b.nr_sequencia
and     c.nr_prescricao = nr_prescricao_p;

c01 CURSOR FOR
  SELECT  a.cd_setor_atendimento
  from  usuario_setor_v b,
    atend_paciente_unidade a
  where  a.cd_setor_atendimento  = b.cd_setor_atendimento
  and  b.nm_usuario    = nm_usuario_p
  and  a.nr_atendimento  = nr_atendimento_p
  order by
    a.dt_saida_unidade desc,
    a.dt_entrada_unidade desc;

c02 CURSOR FOR
  SELECT  a.nr_seq_solucao,
    coalesce(a.qt_solucao_total,0),
    coalesce(a.ie_acm,'N'),
    coalesce(a.ie_se_necessario,'N'),
    coalesce(a.nr_etapas,1),
    coalesce(qt_hora_fase,1),
    coalesce(a.ie_urgencia,'N'),
    coalesce(a.ie_bomba_infusao,'N'),
    coalesce(a.ie_etapa_especial,'N'),
    a.ie_solucao_especial,
    coalesce(a.qt_tempo_aplicacao,24),
    coalesce(a.ie_solucao_pca,'N'),
    a.ie_classif_agora,
    coalesce(a.ie_hemodialise,'N'),
    a.dt_suspensao,
    substr(a.nr_seq_solucao ||' - ' ||coalesce(a.ds_solucao,obter_prim_comp_sol(a.nr_prescricao,a.nr_seq_solucao)),1,240),
    coalesce(a.ie_esquema_alternado,'N')
  from  prescr_solucao a
  where  a.nr_prescricao  = nr_prescricao_p;

c04 CURSOR FOR
  SELECT  a.nr_sequencia,
    a.nr_seq_proc_interno,
    a.nr_seq_prot_glic,
    coalesce(obter_se_proc_ivc(a.nr_seq_proc_interno),'N'),
    a.cd_procedimento,
    a.ie_origem_proced,
    obter_orientacao_proc_rep(a.cd_procedimento, a.ie_origem_proced, cd_convenio_w, a.nr_seq_proc_interno, nr_atendimento_p, null),
    substr(obter_desc_prescr_proc(a.cd_procedimento,a.ie_origem_proced, a.nr_seq_proc_interno),1,240),
    a.dt_prev_execucao,
    coalesce(a.cd_medico_exec,cd_medico_prescr_w)
  from  prescr_procedimento a
  where  a.nr_prescricao  = nr_prescricao_p;

c12 CURSOR FOR
  SELECT  cd_intervalo,
    nr_sequencia
  from  prescr_material
  where  coalesce(ie_em_protocolo_vanco, 'N') = 'N'
  and  ie_urgencia  = 'S'
  and  nr_prescricao  = nr_prescricao_p;

/* Rafael em 13/9/7 OS68015 */

c06 CURSOR FOR
  SELECT  distinct(b.cd_setor_atendimento)
  from  prescr_procedimento b,
      prescr_medica a
  where  b.nr_prescricao    = a.nr_prescricao
  and  coalesce(b.nr_seq_solic_sangue::text, '') = ''
  and  coalesce(b.nr_seq_derivado::text, '') = ''
  and  (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
  and  a.nr_prescricao    = nr_prescricao_p;

c07 CURSOR FOR
  SELECT  b.nr_sequencia,
    obter_ocorrencia_intervalo(b.cd_intervalo,nr_horas_validade_w,'H'),
    b.dt_proxima_dose,
    b.nr_sequencia_anterior,
    coalesce(b.nr_prescricao_anterior,b.nr_prescricao_original),
    b.cd_material,
    b.cd_intervalo,
    b.hr_prim_horario,
    b.nr_seq_mat_cpoe,
    b.dt_inicio_medic
  from  prescr_material b
  where  Obter_se_interv_superior_24h(b.cd_intervalo, null) = 'S'
  and  b.ie_agrupador  in (1, 2)
  and  b.nr_prescricao  = nr_prescricao_p;

c08 CURSOR FOR
  SELECT  b.nr_sequencia,
    substr(obter_diluicao_medic(b.nr_sequencia,a.nr_prescricao),1,2000),
    b.cd_material,
    CASE WHEN c.ie_dias_util_medic='O' THEN  b.nr_dia_util+1  ELSE b.nr_dia_util END ,
    CASE WHEN c.ie_dias_util_medic='O' THEN  obter_qt_max_dia_aplic_mat(b.cd_material)  ELSE obter_qt_max_dia_aplic_mat(b.cd_material) END ,
    c.ie_dias_util_medic,
    CASE WHEN c.ie_dias_util_medic='O' THEN  coalesce(obter_dados_medic_atb_num(c.cd_material,cd_estabelecimento_w,c.qt_dia_terapeutico,'DT',ie_tipo_atendimento_w,a.cd_setor_atendimento,ie_clinica_w),0)  ELSE coalesce(obter_dados_medic_atb_num(c.cd_material,cd_estabelecimento_w,c.qt_dia_terapeutico,'DT',ie_tipo_atendimento_w,a.cd_setor_atendimento,ie_clinica_w),0) END ,
    CASE WHEN c.ie_dias_util_medic='O' THEN  coalesce(obter_dados_medic_atb_num(c.cd_material,cd_estabelecimento_w,c.qt_dia_profilatico,'DP',ie_tipo_atendimento_w,a.cd_setor_atendimento,ie_clinica_w),0)  ELSE coalesce(obter_dados_medic_atb_num(c.cd_material,cd_estabelecimento_w,c.qt_dia_profilatico,'DP',ie_tipo_atendimento_w,a.cd_setor_atendimento,ie_clinica_w),0) END ,
    b.ie_objetivo,
    b.ds_justificativa,
    coalesce(b.qt_dias_tratamento,0),
    b.qt_dose_diaria,
    b.cd_intervalo
  from  material c,
    prescr_material b,
    prescr_medica a
  where  a.nr_prescricao  = b.nr_prescricao
  and  c.cd_material  = b.cd_material
  and  b.ie_agrupador  in (1, 4, 8, 12, 17)
  and  coalesce(b.ie_origem_inf,'N')  <> 'K'
  and  a.nr_prescricao  = nr_prescricao_p;

c09 CURSOR FOR
  SELECT  ie_regra,
    cd_material,
    nr_seq_ficha
  from  apap_regra_medic
  where  coalesce(cd_setor_atendimento,cd_setor_prescr_w)    = cd_setor_prescr_w
  and  coalesce(cd_estabelecimento,cd_estabelecimento_w)  = cd_estabelecimento_w
  and  coalesce(cd_perfil,cd_perfil_p) = cd_perfil_p
  order by coalesce(nr_seq_ficha,0) desc,
    cd_material,
    coalesce(cd_setor_atendimento,0),
    coalesce(cd_perfil,0),
    coalesce(cd_estabelecimento,0);

c11 CURSOR FOR
  SELECT  b.nr_sequencia,
    to_char(a.dt_liberacao,'hh24:mi'),
    b.hr_dose_especial
  from  prescr_material b,
    prescr_medica a
  where  a.nr_prescricao  = b.nr_prescricao
  and  b.ie_agrupador  = 1
  and  b.ie_origem_inf  <> 'K'
  and  b.ie_dose_espec_agora = 'S'
  and  a.nr_prescricao  = nr_prescricao_p

union all

  SELECT  b.nr_sequencia,
    to_char(a.dt_liberacao,'hh24:mi'),
    b.hr_dose_especial
  from    prescr_material b,
    prescr_medica a
  where  a.nr_prescricao    = b.nr_prescricao
  and  a.nr_prescricao    = nr_prescricao_p
  and   b.nr_seq_kit in (
        select  b.nr_sequencia
        from    prescr_material b,
                prescr_medica a
        where  a.nr_prescricao    = b.nr_prescricao
        and     b.ie_agrupador    = 1
        and     b.ie_origem_inf    <> 'K'
        and     b.ie_dose_espec_agora = 'S'
        and     a.nr_prescricao    = nr_prescricao_p
    );

c13 CURSOR FOR
  SELECT  nr_sequencia,
    coalesce(ie_bomba_infusao,'N')
  from  prescr_material
  where  coalesce(nr_seq_kit::text, '') = ''
  and    nr_prescricao  = nr_prescricao_p
  and   coalesce(nr_sequencia_solucao,0) = 0;

c14 CURSOR FOR
  SELECT  ie_momento_lote,
      qt_minutos_agora,
      ie_agora_medico
  from  regra_disp_lote_farm
  where  ((ie_motivo_prescricao = ie_motivo_prescricao_w) or (coalesce(ie_motivo_prescricao::text, '') = ''))
  and  clock_timestamp() between ESTABLISHMENT_TIMEZONE_UTILS.todayAtTime(coalesce(dt_hora_inicio,clock_timestamp())) and
            ESTABLISHMENT_TIMEZONE_UTILS.todayAtTime(coalesce(dt_hora_fim,clock_timestamp()))
  and  coalesce(cd_setor_atendimento,cd_setor_prescr_w)  = cd_setor_prescr_w
  and  coalesce(cd_estabelecimento,cd_estabelecimento_w)  = cd_estabelecimento_w
  and  coalesce(ie_situacao,'A') = 'A'
  and   ((ie_quimio_w <> 'S' and coalesce(ie_quimioterapicas,'N') <> 'S') or (ie_quimio_w = 'S'))
  order by CASE WHEN ie_quimioterapicas='S' THEN 'Z'  ELSE CASE WHEN ie_quimioterapicas='N' THEN 'C'  ELSE 'B' END  END , coalesce(cd_setor_atendimento,0), coalesce(ie_motivo_prescricao,0);


c15 CURSOR FOR
  SELECT  cd_recomendacao,
    nr_sequencia
  from  prescr_recomendacao
  where  (cd_recomendacao IS NOT NULL AND cd_recomendacao::text <> '')
  and  nr_prescricao  = nr_prescricao_p;

c16 CURSOR FOR
  SELECT  a.nr_seq_evento
  from  regra_envio_sms a
  where  coalesce(a.ie_situacao,'A') = 'A'
  and  a.ie_evento_disp = 'ALPL';

c17 CURSOR FOR
  SELECT  a.nr_seq_evento,
      a.nr_sequencia
  from  regra_envio_sms a
  where  coalesce(a.ie_situacao,'A') = 'A'
  and  ((coalesce(a.cd_protocolo::text, '') = '') or (a.cd_protocolo = cd_protocolo_w))
  and  ((coalesce(a.nr_seq_protocolo::text, '') = '') or (a.nr_seq_protocolo = nr_seq_protocolo_w))
  and  ((coalesce(a.cd_setor_atendimento::text, '') = '') or (a.cd_setor_atendimento = cd_setor_prescr_w))
  and  a.ie_evento_disp = 'LPE'
  and  a.cd_estabelecimento = cd_estabelecimento_w;

c18 CURSOR FOR
  SELECT  cd_refeicao,
    nr_sequencia,
    1
  from  prescr_dieta_hor
  where  (dt_lib_horario IS NOT NULL AND dt_lib_horario::text <> '')
  and  nr_prescricao  = nr_prescricao_p

union all

  SELECT  to_char(b.cd_material),
    c.nr_sequencia,
    b.ie_agrupador
  from  prescr_material b,
    prescr_mat_hor c,
    prescr_medica a
  where  a.nr_prescricao = b.nr_prescricao
  and  c.nr_prescricao = a.nr_prescricao
  and  c.nr_seq_material = b.nr_sequencia
  and  b.ie_agrupador in (8,12)
  and  (c.dt_lib_horario IS NOT NULL AND c.dt_lib_horario::text <> '')
  and  a.nr_prescricao  = nr_prescricao_p;

c19 CURSOR FOR
  SELECT  cd_setor_atendimento
  from  prescr_procedimento a
  where   Obter_se_exibe_proced(a.nr_prescricao,a.nr_sequencia,a.ie_tipo_proced,'BSHE') = 'S'
  and  (a.nr_seq_solic_sangue IS NOT NULL AND a.nr_seq_solic_sangue::text <> '')
  and  coalesce(ie_gerar_pass_setor_w,'N') = 'S'
  and  nr_prescricao = nr_prescricao_p

union all

  SELECT  cd_setor_atendimento
  from  prescr_procedimento a
  where   coalesce(a.nr_seq_derivado::text, '') = ''
  and  coalesce(a.nr_seq_solic_sangue::text, '') = ''
  and  coalesce(a.nr_seq_exame::text, '') = ''
  and  coalesce(ie_gerar_pass_setor_w,'N') = 'P'
  and  nr_prescricao = nr_prescricao_p
  
union all

  select  cd_setor_atendimento
  from  prescr_procedimento a
  where   coalesce(ie_gerar_pass_setor_w,'N') = 'A'
  and  coalesce(a.nr_seq_exame::text, '') = ''
  and  nr_prescricao = nr_prescricao_p;

c20 CURSOR FOR
  SELECT  a.nr_seq_gas,
    coalesce(a.dt_prev_execucao, dt_inicio_prescr_w),
    dt_validade_prescr_w,
    a.nr_sequencia
  from  prescr_gasoterapia a
  where  coalesce(a.ie_suspenso,'N')  <> 'S'
  and  coalesce(a.dt_suspensao::text, '') = ''
  and  a.nr_prescricao  = nr_prescricao_p;

c21 CURSOR FOR
  SELECT  nr_sequencia
  from  prescr_material
  where  coalesce(nr_agrupamento::text, '') = ''
  and  nr_prescricao = nr_prescricao_p;

c22 CURSOR FOR
  SELECT  ds_dado_clinico
  from  prescr_procedimento
  where  nr_prescricao = nr_prescricao_p;

c23 CURSOR FOR
  SELECT  nr_sequencia,
    obter_dispensacao_anterior(nr_prescricao_original, cd_material, qt_dose)
  from  prescr_material
  where  ie_agrupador  = 5
  and  nr_prescricao   = nr_prescricao_p;

--Cursor para atualizar os itens de kit gerados antes das alteracoes realizadas pela enfermagem
c24 CURSOR FOR
  SELECT  a.qt_dose_especial,
    a.hr_dose_especial,
    a.nr_sequencia
  from  prescr_material a,
    prescr_medica b
  where  a.nr_prescricao  = b.nr_prescricao
  and  (a.qt_dose_especial IS NOT NULL AND a.qt_dose_especial::text <> '')
  and  (a.hr_dose_especial IS NOT NULL AND a.hr_dose_especial::text <> '')
  and  a.ie_kit_gerado = 'S'
  and  a.nr_prescricao  = nr_prescricao_p
  and  coalesce(b.dt_liberacao::text, '') = ''
  and  b.nr_prescricao  = nr_prescricao_p;

c26 CURSOR FOR
  SELECT  a.nr_seq_evento,
      a.nr_sequencia
  from  regra_envio_sms a
  where  coalesce(a.ie_situacao,'A') = 'A'
  and  ((coalesce(a.cd_protocolo::text, '') = '') or (a.cd_protocolo = cd_protocolo_w))
  and  ((coalesce(a.nr_seq_protocolo::text, '') = '') or (a.nr_seq_protocolo = nr_seq_protocolo_w))
  and  ((coalesce(a.cd_setor_atendimento::text, '') = '') or (a.cd_setor_atendimento = cd_setor_prescr_w))
  and  a.ie_evento_disp = 'LP'
  and  a.cd_estabelecimento = cd_estabelecimento_w;

C27 CURSOR FOR
  SELECT  b.nr_prescricao,
    b.nr_sequencia,
    b.cd_material,
    c.nr_sequencia,
    c.dt_horario
  from  prescr_mat_hor c,
    prescr_material b,
    prescr_medica a
  where  coalesce(coalesce(c.dt_inicio_horario, c.dt_suspensao, c.dt_recusa, c.dt_fim_horario)::text, '') = ''
  and  coalesce(c.ie_suspenso_adep, 'N') = 'N'
  and  c.cd_material = cd_material_w
  and  c.ie_agrupador = 1
  and  c.dt_horario >= dt_inicio_prescr_w
  and  b.nr_sequencia = c.nr_seq_material
  and  b.nr_prescricao = c.nr_prescricao
  and  obter_se_mat_vancomicina(b.cd_material) = 'S'
  and  coalesce(b.dt_suspensao::text, '') = ''
  and  coalesce(b.ie_suspenso, 'N') = 'N'
  and  b.ie_agrupador = 1
  and  a.nr_prescricao = b.nr_prescricao
  and  coalesce(a.nr_prescr_orig_fut, a.nr_prescricao) <> nr_prescricao_p
  and  a.nr_prescricao <> nr_prescricao_p
  and  a.dt_prescricao > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_prescricao_w)-2
  and  a.nr_atendimento = nr_atendimento_p;

C28 CURSOR FOR
  SELECT  nr_sequencia,
    qt_dose
  from  prescr_material a
  where  Obter_se_med_regra_disp(cd_estabelecimento_w,cd_material,cd_unidade_medida_dose,ie_via_aplicacao,cd_intervalo,nr_atendimento_p,nr_prescricao_p,nr_sequencia) = 'S'
  and  coalesce(dt_suspensao::text, '') = ''
  and  nr_prescricao = nr_prescricao_p
  order by nr_agrupamento;

C29 CURSOR FOR
  SELECT  a.nr_sequencia
  from  nut_atend_serv_dia a,
    prescr_medica b
  where  ((to_date(a.dt_servico) between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_inicio_prescr) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(b.dt_validade_prescr, clock_timestamp()))) or (coalesce(b.dt_validade_prescr::text, '') = ''))
  and  b.nr_prescricao  = nr_prescricao_p
  and  a.nr_atendimento = nr_atendimento_p
  and (not exists (  SELECT  1
        from  nut_atend_serv_dia_rep
        where  (coalesce(nr_prescr_oral,nr_prescr_jejum,nr_prescr_compl,nr_prescr_enteral,nr_prescr_npt_adulta,nr_prescr_npt_ped,nr_prescr_npt_neo,nr_prescr_leite_deriv) IS NOT NULL AND (coalesce(nr_prescr_oral,nr_prescr_jejum,nr_prescr_compl,nr_prescr_enteral,nr_prescr_npt_adulta,nr_prescr_npt_ped,nr_prescr_npt_neo,nr_prescr_leite_deriv))::text <> '')
        and  nr_seq_serv_dia  = a.nr_sequencia)
  or ( IE_SCHEDULED_DIET_W = 'S'  and Wheb_assist_pck.obterParametroFuncao(2314,44) = 'S'))
  order by 1;

c30 CURSOR FOR
SELECT  cd_doenca_cid
from  prescr_procedimento_cid
where  nr_prescricao = nr_prescricao_p;

C31 CURSOR FOR
SELECT  a.nr_sequencia
from  prescr_material a,
  prescr_medica b
where  a.nr_prescricao = b.nr_prescricao
and  coalesce(a.ie_acm,'N') = 'N'
and  coalesce(a.ie_se_necessario,'N') = 'N'
and  coalesce(a.ie_gerar_lote,'S') = 'N'
and  coalesce(coalesce(b.dt_liberacao_medico,b.dt_liberacao)::text, '') = ''
and  a.nr_prescricao = nr_prescricao_p
and  (coalesce(a.nr_prescricao_anterior,a.nr_prescricao_original) IS NOT NULL AND (coalesce(a.nr_prescricao_anterior,a.nr_prescricao_original))::text <> '')
and  a.ie_agrupador = 1
order by 1;

C32 CURSOR FOR
SELECT a.nr_sequencia
from  prescr_material a,
  material b
where  a.nr_prescricao = nr_prescricao_p
and  a.cd_material = b.cd_material
and  coalesce(b.ie_dias_util_medic,'N') <> 'N'
and  a.ie_agrupador = 1
order by 1;

c33 CURSOR FOR
  SELECT  nr_seq_solucao
  from  prescr_solucao
  where  (ds_horarios IS NOT NULL AND ds_horarios::text <> '')
  and  nr_prescricao  = nr_prescricao_p
  order by 1;

c34 CURSOR FOR
SELECT  a.nr_sequencia,
    a.nr_seq_mat_cpoe,
    a.hr_prim_horario
from  prescr_material  a,
  intervalo_prescricao b
where   a.cd_intervalo  = b.cd_intervalo
and  a.nr_prescricao = nr_prescricao_p
and  b.qt_operacao in (1,24)
and  a.ie_agrupador = 1;

C35 CURSOR FOR
  SELECT  nr_sequencia
  from  prescr_procedimento
  where  coalesce(ie_urgencia,'N')  = 'S'
  and   coalesce(obter_se_intervalo_agora(cd_intervalo),'N') = 'S'
  and  nr_prescricao = nr_prescricao_p;

c37 CURSOR FOR
  SELECT  b.nr_sequencia
  from  material c,
      prescr_material b,
      prescr_medica a
  where  a.nr_prescricao  = b.nr_prescricao
  and    c.cd_material  = b.cd_material
  and    b.ie_agrupador  in (1, 4, 8, 12, 17)
  and    coalesce(b.ie_origem_inf,'N')  <> 'K'
  and    a.nr_prescricao  = nr_prescricao_p;

c38 CURSOR FOR
  SELECT   nr_prescricao
  from  prescr_medica
  where  nr_atendimento = nr_atendimento_p
  and    nr_prescricao  <> nr_prescricao_p
  and    coalesce(dt_suspensao::text, '') = ''
  and    (dt_liberacao_medico IS NOT NULL AND dt_liberacao_medico::text <> '')
  and (dt_inicio_prescr_w between dt_inicio_prescr and dt_validade_prescr or
       dt_validade_prescr_w between dt_inicio_prescr and dt_validade_prescr);

c39 CURSOR FOR
  SELECT  a.nr_sequencia,
      a.cd_material
  from  prescr_material a,
      estrutura_material_v s
  where  nr_prescricao = nr_prescricao_p
     and    a.cd_material = s.cd_material
     and    ie_agrupador in (1,4)
  and    coalesce(dt_suspensao::text, '') = ''
     and exists (SELECT 1
        from regra_lib_hor_medic_rep x
          where ((x.cd_material   = s.cd_material) or (x.cd_grupo_material  = s.cd_grupo_material) or (x.cd_subgrupo_material = s.cd_subgrupo_material) or (x.cd_classe_material  = s.cd_classe_material) and (x.ie_situacao = 'A')));

C40 CURSOR FOR
  SELECT  nr_seq_interno,
    cd_procedimento,
    nr_seq_exame
  from  prescr_procedimento
  where  nr_prescricao = nr_prescricao_p
  and   coalesce(dt_suspensao::text, '') = '';

C41 CURSOR FOR
  SELECT  a.nr_seq_interno,
    a.cd_material
  from  prescr_material a,
      prescr_medica b
  where  a.nr_prescricao = nr_prescricao_p
  and    a.nr_prescricao = b.nr_prescricao
  and    a.ie_agrupador = 1
  and   coalesce(a.dt_suspensao::text, '') = ''
  and   not exists (SELECT  1
            from  prescr_material c
            where  obter_atendimento_prescr(c.nr_prescricao) = b.nr_atendimento
            and    a.cd_material = c.cd_material
            and    a.nr_prescricao <> c.nr_prescricao);

C43 CURSOR FOR
  SELECT a.nr_sequencia, a.nr_seq_exame, a.cd_material_exame  --inutilizada a consulta pois projeto foi interrompido
    from prescr_procedimento a,
     exame_laboratorio b
   where  a.nr_seq_exame = b.nr_seq_exame
   and   ((b.nr_seq_loinc IS NOT NULL AND b.nr_seq_loinc::text <> '') or (exists (SELECT max(nr_sequencia) from lab_loinc_dados LIMIT 1)))
   and    a.nr_prescricao = nr_prescricao_p
   and 1 = 2;

C44 CURSOR FOR
   SELECT  a.nr_seq_proc_cpoe
   from   prescr_procedimento a
   where    a.nr_prescricao = nr_prescricao_p
   and     (a.nr_seq_proc_cpoe IS NOT NULL AND a.nr_seq_proc_cpoe::text <> '')
   and      exists (SELECT  b.nr_sequencia
          from   med_avaliacao_paciente b
          where  b.nr_seq_proc_cpoe = a.nr_seq_proc_cpoe);

C45 CURSOR FOR
  SELECT   a.nr_prescricao,
      a.nr_sequencia
  from   rep_jejum a,
      prescr_medica b
  where   a.nr_prescricao = b.nr_prescricao
  and   b.nr_atendimento = nr_atendimento_p
  and   a.nr_prescricao <> nr_prescricao_p
  and   ((dt_inicio_w >= dt_inicio) or (dt_fim_w <= dt_fim))
  and    coalesce(ie_suspenso,'N') = 'N';

C47 CURSOR FOR
  SELECT  a.nr_sequencia,
    e.nr_sequencia
  from  prescr_procedimento a,
    proc_interno_integracao b,
    proc_interno c,
    procedimento d,
    prescr_proc_hor e
  where  a.nr_prescricao  = nr_prescricao_p
  and     c.nr_sequencia = a.nr_seq_proc_interno
  and  coalesce(b.nr_seq_proc_interno,a.nr_seq_proc_interno) = a.nr_seq_proc_interno
  and     c.cd_procedimento = d.cd_procedimento
  and     c.ie_origem_proced = d.ie_origem_proced
  and  coalesce(b.cd_estabelecimento, cd_estabelecimento_w) = coalesce(cd_estabelecimento_w,0)
  and  coalesce(b.CD_TIPO_PROCEDIMENTO,coalesce( d.cd_tipo_procedimento,0)) = coalesce(d.cd_tipo_procedimento,0)
  and  e.nr_prescricao = a.nr_prescricao
  and e.nr_seq_procedimento = a.nr_sequencia
  and  coalesce(a.nr_seq_exame::text, '') = '';

C48 CURSOR FOR
  SELECT  e.dt_horario,
          max(a.nr_prescricao)
  from  prescr_procedimento a,
    proc_interno_integracao b,
    proc_interno c,
    procedimento d,
    PRESCR_PROC_HOR e
  where  a.nr_prescricao  = nr_prescricao_p
  and     c.nr_sequencia = a.nr_seq_proc_interno
  and  coalesce(b.nr_seq_proc_interno,a.nr_seq_proc_interno) = a.nr_seq_proc_interno
  and     c.cd_procedimento = d.cd_procedimento
  and     c.ie_origem_proced = d.ie_origem_proced
  and  (c.nr_seq_exame_lab IS NOT NULL AND c.nr_seq_exame_lab::text <> '')
  and  coalesce(b.cd_estabelecimento,coalesce(cd_estabelecimento_w,0)) = coalesce(cd_estabelecimento_w,0)
  and  coalesce(b.CD_TIPO_PROCEDIMENTO,coalesce( d.cd_tipo_procedimento,0)) = coalesce(d.cd_tipo_procedimento,0)
    and  e.nr_prescricao = a.nr_prescricao
  and e.nr_seq_procedimento = a.nr_sequencia
  and  (a.nr_seq_exame IS NOT NULL AND a.nr_seq_exame::text <> '')
  group by e.dt_horario;

C50 CURSOR FOR
    SELECT
        a.nr_prescricao,
        a.nr_sequencia,
        coalesce(f.ie_retrogrado,'N'),
        e.nr_sequencia nr_seq_procedimento
    from    prescr_procedimento a,
            proc_interno_integracao b,
            proc_interno c,
            procedimento d,
            prescr_proc_hor e,
            cpoe_procedimento f
    where   a.nr_prescricao    = nr_prescricao_p
    and     c.nr_sequencia = a.nr_seq_proc_interno
    and     coalesce(b.nr_seq_proc_interno,a.nr_seq_proc_interno) = a.nr_seq_proc_interno
    and     c.cd_procedimento = d.cd_procedimento
    and     c.ie_origem_proced = d.ie_origem_proced
    and     coalesce(b.cd_estabelecimento, cd_estabelecimento_w) = coalesce(cd_estabelecimento_w,0)
    and     coalesce(b.cd_tipo_procedimento,coalesce( d.cd_tipo_procedimento,0)) = coalesce(d.cd_tipo_procedimento,0)
    and     b.nr_seq_sistema_integ = nr_seq_sistema_integ_w
    and     e.nr_prescricao = a.nr_prescricao
    and     e.nr_seq_procedimento = a.nr_sequencia
    and     coalesce(a.nr_seq_exame::text, '') = ''
    and     f.nr_sequencia = a.nr_seq_proc_cpoe;

    c51 CURSOR FOR
      SELECT   a.nr_seq_proc_interno,
        a.nr_seq_proc_cpoe,
        coalesce(b.dt_desired_start, clock_timestamp())  dt_desired_start,
        b.qt_duration,
                        b.cd_posicao,
						b.ie_lado
    from     prescr_procedimento a,
        cpoe_procedimento b,
        proc_interno c
    where    b.nr_sequencia = a.nr_seq_proc_cpoe
    and      a.nr_prescricao = nr_prescricao_p
    and      c.nr_sequencia = a.nr_seq_proc_interno
    and      c.ie_tipo_util = 'C';

C54 CURSOR FOR
   SELECT  a.nr_seq_hemo_cpoe
   from   prescr_solic_bco_sangue a
   where    a.nr_prescricao = nr_prescricao_p
   and     (a.nr_seq_hemo_cpoe IS NOT NULL AND a.nr_seq_hemo_cpoe::text <> '')
   and      exists (SELECT  b.nr_sequencia
          from   med_avaliacao_paciente b
          where  b.nr_seq_hemo_cpoe = a.nr_seq_hemo_cpoe);

c55 CURSOR FOR
SELECT  b.nr_seq_sub_grp
from    cpoe_order_unit a,
        cpoe_tipo_pedido b,
        prescr_procedimento d,
        cpoe_anatomia_patologica e
where   a.nr_seq_cpoe_tipo_pedido = b.nr_sequencia
and     a.nr_sequencia = e.nr_seq_cpoe_order_unit
and     e.nr_sequencia = d.nr_seq_proc_cpoe
and     d.nr_seq_interno = (select max(r.nr_seq_interno) from prescr_procedimento r where r.nr_prescricao = nr_prescricao_p)

union all

select  distinct b.nr_seq_sub_grp
from    cpoe_order_unit a,
        cpoe_tipo_pedido b,
        cpoe_procedimento c,
        prescr_procedimento d
where   a.nr_seq_cpoe_tipo_pedido = b.nr_sequencia
and     a.nr_sequencia = c.nr_seq_cpoe_order_unit
and     c.nr_sequencia = d.nr_seq_proc_cpoe
and     d.nr_seq_interno = (select max(r.nr_seq_interno) from prescr_procedimento r where r.nr_prescricao = nr_prescricao_p)

union all

select  distinct b.nr_seq_sub_grp
from    cpoe_hemoterapia a,
        cpoe_tipo_pedido b,
        cpoe_order_unit c,
        prescr_solic_bco_sangue e,
        prescr_medica f,
        atendimento_paciente g,
        prescr_procedimento i
where   e.nr_seq_hemo_cpoe            = a.nr_sequencia
        and     e.nr_prescricao           = f.nr_prescricao
        and     a.nr_seq_cpoe_order_unit  = c.nr_sequencia
        and     c.nr_seq_cpoe_tipo_pedido = b.nr_sequencia
        and     c.nr_atendimento          = g.nr_atendimento
        and     f.nr_prescricao           = i.nr_prescricao
        and     a.ie_reserva              = 'N'
        and     b.nr_seq_sub_grp          = 'BT'
        and     i.nr_seq_interno          = (select max(r.nr_seq_interno) from prescr_procedimento r where r.nr_prescricao = nr_prescricao_p)

union all

select  distinct h.nr_seq_sub_grp
from    cpoe_recomendacao a,
        prescr_recomendacao b,
        prescr_medica d,
        cpoe_order_unit g,
        cpoe_tipo_pedido h, 
        nut_orientacao_list j,
        atendimento_paciente y
where  b.nr_seq_rec_cpoe              = a.nr_sequencia 
        and j.nr_seq_recomendacao      = a.nr_sequencia
        and b.nr_prescricao            = d.nr_prescricao
        and a.nr_seq_cpoe_order_unit   = g.nr_sequencia
        and g.nr_seq_cpoe_tipo_pedido  = h.nr_sequencia
        and d.nr_atendimento 		   = y.nr_atendimento
        and h.nr_seq_sub_grp           = 'N' 
        and b.nr_seq_interno           = (select max(r.nr_seq_interno) from prescr_recomendacao r where r.nr_prescricao = nr_prescricao_p);

c56 CURSOR FOR
SELECT  distinct b.nr_seq_sub_grp
from    cpoe_order_unit a,
        cpoe_tipo_pedido b,
        cpoe_procedimento c,
        prescr_procedimento d
where   a.nr_seq_cpoe_tipo_pedido = b.nr_sequencia
and   a.nr_sequencia = c.nr_seq_cpoe_order_unit
and   c.nr_sequencia = d.nr_seq_proc_cpoe
and   d.nr_prescricao = nr_prescricao_p;

c57 CURSOR FOR
SELECT distinct ct.nr_seq_sub_grp
from        cpoe_gasoterapia a,
            prescr_gasoterapia b,                                   
            cpoe_order_unit co,
            cpoe_tipo_pedido ct
where       a.nr_sequencia = b.nr_seq_gas_cpoe
and         co.nr_seq_cpoe_tipo_pedido = ct.nr_sequencia 
and         co.nr_sequencia = a.nr_seq_cpoe_order_unit
and         b.nr_prescricao = nr_prescricao_p;
BEGIN

begin
  select  coalesce(obter_valor_param_usuario(2314,11, obter_perfil_ativo, WHEB_USUARIO_PCK.get_nm_usuario, obter_estabelecimento_ativo),'N')
  into STRICT  ie_param_11
;
exception when others then
  ie_param_11 := 'N';
end;

cd_funcao_w := 281;
nr_seq_param_w := 1512;

select   coalesce(max('S'),'N')
into STRICT  ie_quimio_w
from  paciente_atendimento
where  nr_prescricao = nr_prescricao_p;


CALL gravar_processo_longo(obter_desc_expressao(726286),'LIBERAR_PRESCRICAO',2); /* 726286 = Realizando a liberacao da prescricao*/
ie_lib_setor_w := Obter_param_Usuario(924, 125, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1), ie_lib_setor_w);
ie_gerar_npt_fases_w := Obter_param_Usuario(924, 1176, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1), ie_gerar_npt_fases_w);
ie_gerar_pass_setor_w := Obter_param_Usuario(924, 852, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1), ie_gerar_pass_setor_w);
ie_libera_quimio_w := Obter_param_Usuario(3130, 484, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1), ie_libera_quimio_w);
ie_duplic_proced_lado_w := Obter_param_usuario(924, 734, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1), ie_duplic_proced_lado_w);


select  coalesce(max(nr_agrupamento),0)
into STRICT  nr_agrupamento_w
from  prescr_material
where  nr_prescricao = nr_prescricao_p;

select  max(dt_liberacao_medico),
  max(dt_liberacao),
  max(ie_motivo_prescricao),
  max(ie_origem_inf),
  max(cd_setor_atendimento),
  max(dt_prescricao),
  max(nr_prescricao_mae),
  coalesce(max(ie_cartao_emergencia),'N'),
  coalesce(max(ie_emergencia),'N'),
  coalesce(max(ie_prescr_emergencia),'N'),
  coalesce(max(cd_estabelecimento),cd_estabelecimento_w),
  max(cd_setor_entrega),
  max(nr_doc_conv),
  max(cd_senha),
  max(qt_peso),
  max(qt_altura_cm),
  max(cd_prescritor),
  max(coalesce(dt_liberacao_medico,dt_liberacao)),
  max(cd_medico),
  coalesce(max(nr_horas_validade),24),
  max(dt_inicio_prescr),
  max(dt_validade_prescr),
  coalesce(max(ie_prescricao_alta),'N'),
  max(cd_pessoa_fisica),
  max(nr_seq_transcricao),
  max(nr_prescricao_anterior),
  coalesce(max(ie_prescr_farm),'N'),
  coalesce(max(ie_lib_farm),'S'),
  max(ie_hemodialise),
  max(dt_inicio_prescr),
  max(ie_funcao_prescritor),
  max(cd_funcao_origem),
  max(dt_primeiro_horario),
  max(nr_prescricoes),
  max(coalesce(dt_liberacao, dt_liberacao_medico)),
  coalesce(max(nr_seq_atecaco), 0)
into STRICT  dt_liberacao_medico_w,
  dt_liberacao_w,
  ie_motivo_prescricao_w,
  ie_origem_inf_w,
  cd_setor_atend_w,
  dt_prescricao_w,
  nr_prescricao_mae_w,
  ie_cartao_emergencia_w,
  ie_emergencia_w,
  ie_prescr_emergencia_w,
  cd_estabelecimento_w,
  cd_setor_entrega_w,
  nr_doc_conv_w,
  cd_senha_w,
  qt_peso_w,
  qt_altura_w,
  cd_prescritor_w,
  dt_ambas_liberacoes_w,
  cd_medico_prescr_w,
  nr_horas_validade_w,
  dt_inicio_prescr_w,
  dt_validade_prescr_w,
  ie_prescricao_alta_w,
  cd_pessoa_fisica_w,
  nr_seq_transcricao_w,
  nr_prescricao_ant_w,
  ie_prescr_farm_w,
  ie_lib_farm_w,
  ie_hemodialise_w,
  dt_inicio_prescr_ww,
  ie_funcao_prescritor_w,
  cd_funcao_origem_w,
  dt_prim_hor_prescr_w,
  nr_prescricoes_w,
  dt_lib_temp_w,
  nr_seq_atecaco_w
from   prescr_medica
where   nr_prescricao = nr_prescricao_p;

-- Inativado ate o tratamento da nova funcao 'AtePac_IR' ser criado referencia OS  1277646 e OS 939984
/* if  (ie_hemodialise_w = 'R') then
  rep_remover_horarios(nr_prescricao_p, nm_usuario_p);
end if;*/
if (obter_funcao_ativa = 916) then

  ie_consite_convenio_w := Obter_param_Usuario(916, 1193, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_consite_convenio_w);
  ie_visualizar_conv_w := Obter_param_Usuario(916, 564, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_visualizar_conv_w);

  select  count(*)
  into STRICT  qt_convenio_w
  from   atend_categoria_convenio
  where  nr_atendimento = nr_atendimento_p;

  if (ie_consite_convenio_w = 'S' and
  ie_visualizar_conv_w = 'S' and
  qt_convenio_w > 1 and
  nr_seq_atecaco_w = 0) then

    CALL Wheb_mensagem_pck.exibir_mensagem_abort(1027375);

  end if;
  ie_validar_guia_prescr_w := Obter_param_Usuario(916, 1199, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_validar_guia_prescr_w);
-- aqui --
  if (qt_convenio_w > 0) and (nr_doc_conv_w IS NOT NULL AND nr_doc_conv_w::text <> '') and (cd_senha_w IS NOT NULL AND cd_senha_w::text <> '') and (ie_validar_guia_prescr_w = 'S')then

    begin
      select   Obter_Convenio_Atendimento(nr_atendimento_p)
      into STRICT  cd_convenio_ww
;
    exception
    when others then
      cd_convenio_ww := 0;
    end;

    if (coalesce(cd_convenio_ww,0) > 0) then
      begin
        select 'S'
        into STRICT   ie_validar_guia_prescr_w
        from   atend_categoria_convenio a,
               atendimento_paciente b,
               prescr_medica c
        where  a.cd_convenio        = cd_convenio_ww
    and    upper(c.nr_doc_conv) = upper(nr_doc_conv_w)
    and    upper(c.cd_senha)    = upper(cd_senha_w)
    and    a.nr_atendimento     = b.nr_atendimento
    and    b.nr_atendimento     = c.nr_atendimento
    and    b.nr_atendimento     <> nr_atendimento_p
    and    coalesce(b.dt_cancelamento::text, '') = '' LIMIT 1;

      exception
      when others then
        ie_validar_guia_prescr_w := 'N';
      end;

      if (ie_validar_guia_prescr_w = 'S') then
        CALL Wheb_mensagem_pck.exibir_mensagem_abort(1058577);
      end if;

end if;
  end if;
-- aqui --
end if;

select  coalesce(max(ie_gerar_result_prescr),'N'),
  coalesce(max(ie_gerar_lote_setor),'N'),
  coalesce(max(ie_status_lote_ext),35),
  coalesce(max(ie_atual_status_lib_medico),'N'),
  max(ie_regra_seq_prescr),
  coalesce(max(ie_status_coleta),20),
  coalesce(max(ie_status_sem_coleta),0),
  coalesce(max(ie_atualiza_dt_urgente),'N'),
  coalesce(max(ie_gerar_sequencia),'P'),
  coalesce(max(ie_gera_amostra_coleta),'N'),
  coalesce(max(ie_status_autor_pend),0),
  coalesce(max(ie_gera_log_amostra),'N')
into STRICT  ie_gerar_result_prescr_w,
  ie_gerar_lote_setor_w,
  ie_status_lote_ext_w,
  ie_atual_status_lib_medico_w,
  ie_regra_seq_prescr_w,
  ie_status_coleta_w,
  ie_status_sem_coleta_w,
  ie_atualiza_dt_urgente_w,
  ie_gerar_sequencia_w,
  ie_gera_amostra_coleta_w,
  ie_status_autor_pend_w,
  ie_gera_log_amostra_w
from  lab_parametro
where  cd_estabelecimento  = cd_estabelecimento_w;

select
  coalesce(max(ie_gerar_lote_unico),'N'),
  coalesce(max(ie_gera_integracao),'N'),
  coalesce(max(ie_gera_disp_acm_sn),'N'),
  coalesce(max(ie_gen_batch_per_order_unit),'N')
into STRICT
  ie_far_gera_lote_unico_w,
  ie_gera_integracao_w,
  ie_gera_disp_acm_sn_w,
  ie_gen_batch_per_order_unit_w
from  parametros_farmacia
where  cd_estabelecimento = cd_estabelecimento_w;

if (cd_funcao_origem_w = 2314 or cd_funcao_origem_w = 281 or (obter_uso_case = 'S' and cd_funcao_origem_w = 916))  then
  ie_consiste_w := false;
else
  ie_consiste_w := true;
end if;

select  max(c.ds_indicacao)
into STRICT  ds_indicacao_w
from  prescr_solic_bco_sangue b,
  prescr_sol_bs_indicacao a,
  san_indicacao c
where  coalesce(c.ie_obriga_justif,'N')  = 'S'
and  c.nr_sequencia    = a.nr_seq_indicacao
and  coalesce(a.ds_justificativa::text, '') = ''
and  a.nr_seq_solic_bs  = b.nr_sequencia
and  b.nr_prescricao    = nr_prescricao_p;

if (ds_indicacao_w IS NOT NULL AND ds_indicacao_w::text <> '') and (ie_consiste_w) then
  --A indicacao clinica #@DS_INDICACAO#@ obriga que seja informada uma justificativa!
  CALL Wheb_mensagem_pck.exibir_mensagem_abort(175894,'DS_INDICACAO='||ds_indicacao_w);
end if;

if (ie_emergencia_w = 'S') then
  update  prescr_material
  set    ds_horarios  = to_char(coalesce(dt_atualizacao,clock_timestamp()),'hh24:mi')
  where  coalesce(ds_horarios::text, '') = ''
  and    nr_prescricao  = nr_prescricao_p;
end if;

if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31,'Eliminar_prescr_sug_cih '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then
    commit;
  end if;
end if;

open c01;
loop
fetch c01 into  cd_setor_atendimento_c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
  cd_setor_atendimento_w := cd_setor_atendimento_c01_w;
  exit;
end loop;
close c01;

open C32;
loop
fetch C32 into
  nr_sequencia_sug_w;
EXIT WHEN NOT FOUND; /* apply on C32 */
  begin
  CALL Eliminar_prescr_sug_cih(nr_prescricao_p, nr_sequencia_sug_w, 0);
  end;
end loop;
close C32;

if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31,'Alterar_dose_medic '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then
    commit;
  end if;
end if;

if (coalesce(dt_liberacao_w::text, '') = '') and (coalesce(dt_liberacao_medico_w::text, '') = '') and (ie_motivo_prescricao_w IS NOT NULL AND ie_motivo_prescricao_w::text <> '') then

  if (nr_atendimento_p > 0) then
    select  max(cd_estabelecimento)
    into STRICT  cd_estabelecimento_w
    from  atendimento_paciente
    where  nr_atendimento = nr_atendimento_p;
  end if;

  open C28;
  loop
  fetch C28 into
    nr_sequencia_w,
    qt_dose_w;
  EXIT WHEN NOT FOUND; /* apply on C28 */
    begin
    CALL Alterar_dose_medic(nr_prescricao_p,
      nr_sequencia_w,
      qt_dose_w,
      cd_estabelecimento_w,
      wheb_usuario_pck.get_cd_perfil,
      nm_usuario_p);
    end;
  end loop;
  close C28;
end if;

select  coalesce(max(ie_gerar_resumo_rep),'N'),
  coalesce(max(ie_libera_rep_alta),'N'),
  coalesce(max(ie_grava_historico_hor),'N'),
  coalesce(max(ie_rep_cpoe),'N')
into STRICT  ie_gerar_resumo_rep_w,
  ie_libera_rep_alta_w,
  ie_grava_historico_hor_w,
  ie_rep_cpoe_w
from  parametro_medico
where  cd_estabelecimento  = cd_estabelecimento_w;

open C24;
loop
fetch C24 into
  qt_dose_espec_kit_w,
  hr_dose_espec_kit_w,
  nr_seq_kit_w;
EXIT WHEN NOT FOUND; /* apply on C24 */
  begin
    update  prescr_material
    set  qt_dose_especial  = qt_dose,
      hr_dose_especial  = hr_dose_espec_kit_w
    where  nr_seq_kit      = nr_seq_kit_w
    and  nr_prescricao    = nr_prescricao_p
    and  coalesce(nr_seq_recomendacao::text, '') = '';
  end;
end loop;
close C24;

open c21;
loop
fetch c21 into
  nr_seq_item_w;
EXIT WHEN NOT FOUND; /* apply on c21 */
  nr_agrupamento_w  := nr_agrupamento_w + 1;
  update  prescr_material
  set  nr_agrupamento  = nr_agrupamento_w
  where  nr_prescricao   = nr_prescricao_p
  and  nr_sequencia  = nr_seq_item_w;
end loop;
close c21;

select  coalesce(max('S'),'N')
into STRICT  ie_checar_automatico_w
from  adep_medic_checagem
where  coalesce(cd_perfil,cd_perfil_p)  = cd_perfil_p  LIMIT 1;

ie_rastre_prescr_libfarm_w := obter_se_info_rastre_prescr('LF', wheb_usuario_pck.get_nm_usuario, obter_perfil_ativo, wheb_usuario_pck.get_cd_estabelecimento);

if (ie_rastre_prescr_libfarm_w = 'S') then
  ds_rastre_prescr_libfarm_w := substr(ds_rastre_prescr_libfarm_w || pls_util_pck.enter_w || $$plsql_unit || ':' || $$plsql_line ||
    ' ie_motivo_prescricao_w:'||ie_motivo_prescricao_w, 1, 4000);
end if;

if (ie_motivo_prescricao_w IS NOT NULL AND ie_motivo_prescricao_w::text <> '') then
  select  max(ie_interv_farm)
  into STRICT  ie_interv_farm_w
  from  regra_motivo_lib_prescr
  where  ie_motivo_prescricao  = ie_motivo_prescricao_w;

  if (ie_rastre_prescr_libfarm_w = 'S') then
    ds_rastre_prescr_libfarm_w := substr(ds_rastre_prescr_libfarm_w || pls_util_pck.enter_w || $$plsql_unit || ':' || $$plsql_line ||
      ' ie_interv_farm_w:'||ie_interv_farm_w, 1, 4000);
  end if;

  if (ie_interv_farm_w IS NOT NULL AND ie_interv_farm_w::text <> '') then
    update  prescr_medica
    set  ie_lib_farm  = ie_interv_farm_w
    where  nr_prescricao  = nr_prescricao_p;
  end if;
end if;

if (nr_atendimento_p > 0) then
  begin
  select  coalesce(ie_tipo_convenio,3),
    ie_tipo_atendimento,
    cd_estabelecimento,
    obter_convenio_atendimento(nr_atendimento),
    obter_tipo_guia_convenio(nr_atendimento),
    dt_entrada,
    dt_reavaliacao_medica
  into STRICT  ie_tipo_convenio_w,
    ie_tipo_atendimento_w,
    cd_estabelecimento_w,
    cd_convenio_w,
    ie_tipo_guia_w,
    dt_entrada_antend_w,
    dt_reavaliacao_medica_w
  from  atendimento_paciente
  where  nr_atendimento  = nr_atendimento_p;
  end;
end if;

-- ATENCAO ---- Este tratamento e obrigatorio para que seja verificado se houve alteracao nas informacoes do usuario e realize o carregamento dos parametros, caso necessario -------- ATENCAO --
CALL Wheb_assist_pck.set_informacoes_usuario(coalesce(wheb_usuario_pck.get_cd_estabelecimento, cd_estabelecimento_w), cd_perfil_p, nm_usuario_p);

select  coalesce(max(ie_leite_materno),'X')
into STRICT  ie_leite_materno_w
from  prescr_leite_deriv where    nr_prescricao = nr_prescricao_p LIMIT 1;

if (ie_leite_materno_w = 'S') then
  CALL Inserir_Leite_materno(nr_prescricao_p, nm_usuario_p, cd_perfil_p, cd_estabelecimento_w);
end if;

if (ie_leite_materno_w <> 'X') then
  update  prescr_material
  set    ie_via_aplicacao   = CASE WHEN ie_via_leite='S' THEN (obter_via_usuario('Ent')) WHEN ie_via_leite='O' THEN (upper(obter_via_usuario('VO')))  ELSE (upper(obter_via_usuario('OS'))) END
  where  nr_prescricao     = nr_prescricao_p
  and    (nr_seq_leite_deriv IS NOT NULL AND nr_seq_leite_deriv::text <> '')
  and    (ie_via_leite IS NOT NULL AND ie_via_leite::text <> '')
  and    coalesce(ie_via_aplicacao::text, '') = '';
end if;

select  count(*)
into STRICT  qt_dietas_prescr_w
from  prescr_dieta
where  nr_prescricao  = nr_prescricao_p  LIMIT 1;

if (qt_dietas_prescr_w  > 0) then
  qt_dietas_orais_w  := Wheb_assist_pck.obterParametroFuncao(924,298);

  if (qt_dietas_orais_w > 0) then
    qt_dietas_w  := obter_qt_dieta_prescr_data(nr_prescricao_p);
	
	
	 if (ie_consiste_w = true) then
        ie_consiste_ww:= 'S';
     else
        ie_consiste_ww:= 'N';
     end if;

      begin

      sql_w := 'CALL obter_mensagem_erro_dieta_md(:1, :2, :3) INTO :ie_erro_dieta_w';
      EXECUTE sql_w USING IN qt_dietas_w,
                                    IN qt_dietas_orais_w,
                                    IN ie_consiste_ww,
                                    OUT ie_erro_dieta_w;

      exception when others then
      ie_erro_dieta_w := null;
	
      end;

    if (ie_erro_dieta_w = 'S') then
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(227968, 'QT_DIETAS='||to_char(qt_dietas_orais_w));
    end if;
	
  end if;

end if;

cd_motivo_baixa_Param_w    := Wheb_assist_pck.obterParametroFuncao(924,194);
if (cd_motivo_baixa_Param_w > 0) then
  update  prescr_material
  set  cd_motivo_baixa  = cd_motivo_baixa_Param_w
  where  nr_prescricao  = nr_prescricao_p
  and  coalesce(cd_motivo_baixa,0) = 0
  and  coalesce(ie_regra_disp,'S')  = 'N';
end if;

select  max(cd_pessoa_fisica)
into STRICT  cd_profissional_w
from  usuario
where  nm_usuario  = nm_usuario_p;

VarPermiteLibAposalta_w    := Wheb_assist_pck.obterParametroFuncao(924,795);
if (VarPermiteLibAposalta_w in ('N','V')) then
  select  max(dt_alta)
  into STRICT  dt_alta_w
  from  atendimento_paciente
  where  nr_atendimento = nr_atendimento_p;

  if (VarPermiteLibAposalta_w = 'N') and (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') and (clock_timestamp() > dt_alta_w) and (ie_consiste_w) then
    --Nao e permitido liberar prescricoes apos a alta do paciente! Parametro [795].
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(175899);
  elsif (VarPermiteLibAposalta_w = 'V') and (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') and (dt_inicio_prescr_ww IS NOT NULL AND dt_inicio_prescr_ww::text <> '') and (dt_inicio_prescr_ww > dt_alta_w) and (ie_consiste_w) then
    --Nao, considerando se inicio da REP maior que a alta
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(254450);
  end if;
end if;

open c02;
loop
fetch c02 into
  nr_seq_solucao_w,
  qt_solucao_total_w,
  ie_acm_w,
  ie_se_necessario_w,
  nr_etapas_w,
  qt_hora_fase_w,
  ie_urgencia_w,
  ie_bomba_infusao_w,
  ie_etapa_especial_w,
  ie_solucao_especial_w,
  qt_tempo_aplicacao_w,
  ie_solucao_pca_w,
  ie_classif_intervalo_w,
  ie_hemod_solucao_w,
  dt_suspensao_w,
  ds_titulo_w,
  ie_esquema_alternado_w;
EXIT WHEN NOT FOUND; /* apply on c02 */
  BEGIN

  if (ie_hemod_solucao_w = 'N') then
    /*OS 266630. 1 etapa especial + 1 ACM. Ao aprazar no ADEP nao permitia porque ja existia uma etapa, soh que era a etapa especial*/

    /*if  (ie_acm_w = 'S') and
      (ie_etapa_especial_w = 'S') and
      (nr_etapas_w = 1) then
      update  prescr_solucao
      set  nr_etapas = 2
      where  nr_prescricao  = nr_prescricao_p
      and  nr_seq_solucao  = nr_seq_solucao_w;
    end if;
    */
    --OS 780283
    if (ie_etapa_especial_w = 'S') and (nr_etapas_w = 1) then
      update  prescr_solucao
      set  nr_etapas = 1
      where  nr_prescricao  = nr_prescricao_p
      and  nr_seq_solucao  = nr_seq_solucao_w;
    end if;


    if (coalesce(ie_bomba_infusao_w,'N') <> 'N') and (coalesce(dt_liberacao_medico_ww::text, '') = '') and (obter_funcao_ativa not in (950,924)) then
      CALL gerar_itens_assoc_dispositivo(ie_bomba_infusao_w, nr_prescricao_p, cd_perfil_p, cd_estabelecimento_w, null, nr_seq_solucao_w, nm_usuario_p, null);
    end if;

    if  (ie_urgencia_w = 'S' AND cd_funcao_origem_w <> 2314) then
      if (ie_classif_intervalo_w IS NOT NULL AND ie_classif_intervalo_w::text <> '') then
        select  max(coalesce(a.qt_min_agora,a.qt_min_intervalo))
        into STRICT  qt_min_intervalo_w
        from  intervalo_prescricao a
        where  a.cd_intervalo = ie_classif_intervalo_w;
      end if;

      if (qt_min_intervalo_w IS NOT NULL AND qt_min_intervalo_w::text <> '') then

     begin

          sql_w := 'CALL obter_dt_inicio_prescricao_md(:1) INTO :dt_inicio_item_w';
          EXECUTE sql_w USING IN qt_min_intervalo_w,
                                        OUT dt_inicio_item_w;

      exception
        when others then
          dt_inicio_item_w := null;
      end;

      else
        if (cd_funcao_origem_w = 2314) and (dt_inicio_prescr_w > clock_timestamp()) then
          dt_inicio_item_w := dt_inicio_prescr_w;
        else
          dt_inicio_item_w  := clock_timestamp();
        end if;
      end if;

      if (ie_etapa_especial_w = 'S')  then
        nr_etapas_w := nr_etapas_w + 1;
      end if;

      gravar_processo_longo(obter_desc_expressao(726290),'LIBERAR_PRESCRICAO',4);

      SELECT * FROM Calcula_Horarios_Etapas(dt_inicio_item_w, nr_etapas_w, qt_hora_fase_w, nm_usuario_p, 'N', qt_tempo_aplicacao_w, ds_horarios_w, ds_horarios_2w, 'N', 'N') INTO STRICT ds_horarios_w, ds_horarios_2w;

      update  prescr_solucao
      set  ds_horarios  = ds_horarios_w,
        hr_prim_horario  = to_char(dt_inicio_item_w,'hh24:mi')
      where  nr_prescricao  = nr_prescricao_p
      and  nr_seq_solucao  = nr_seq_solucao_w;

      if (ie_esquema_alternado_w = 'S') then
        CALL calcular_etapas_esquema(nr_prescricao_p,nr_seq_solucao_w);
      end if;

      if (qt_min_intervalo_w IS NOT NULL AND qt_min_intervalo_w::text <> '') then
        update   prescr_material
        set    ds_horarios       = to_char(clock_timestamp()+(qt_min_intervalo_w/1440),'hh24:mi'),
            hr_prim_horario      = to_char(clock_timestamp()+ (qt_min_intervalo_w/1440),'hh24:mi')
        where  nr_prescricao      = nr_prescricao_p
        and    nr_sequencia_solucao  = nr_seq_solucao_w;
      else
        dt_urgente_w := clock_timestamp();

        if (cd_funcao_origem_w = 2314) and (dt_urgente_w < dt_inicio_prescr_w) then
          dt_urgente_w := dt_inicio_prescr_w;
        end if;

        update   prescr_material
        set    ds_horarios       = to_char(dt_urgente_w,'hh24:mi'),
            hr_prim_horario      = to_char(dt_urgente_w,'hh24:mi')
        where  nr_prescricao      = nr_prescricao_p
        and    nr_sequencia_solucao  = nr_seq_solucao_w;
      end if;

      update  prescr_material a
      set    a.ds_horarios       = to_char(dt_urgente_w,'hh24:mi'),
          a.hr_prim_horario    = to_char(dt_urgente_w,'hh24:mi')
      where   a.nr_prescricao = nr_prescricao_p
      and   a.nr_seq_kit in (  SELECT  b.nr_sequencia
                    from   prescr_material b
                    where   b.nr_prescricao = nr_prescricao_p
                    and   b.nr_sequencia_solucao = nr_seq_solucao_w
                    and    b.ie_agrupador = 4);

    end if;

    ie_lib_com_sol_zero_w  := coalesce(ie_lib_com_sol_zero_w,Wheb_assist_pck.obterParametroFuncao(924,212));
    if (ie_lib_com_sol_zero_w = 'N') and (qt_solucao_total_w = 0) and (coalesce(ie_solucao_especial_w,'N') = 'N') and (ie_acm_w = 'N') and (ie_consiste_w) then
      begin
      --Existem solucoes sem a informacao do volume total.
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(494880,'DS_SOLUCAO='||ds_titulo_w);
      end;
    elsif (ie_lib_com_sol_zero_w = 'T') and (ie_acm_w = 'N') and (ie_solucao_pca_w = 'N') and (qt_solucao_total_w = 0) and (ie_consiste_w) then
      begin
      --Existem solucoes sem a informacao do volume total.
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(494880,'DS_SOLUCAO='||ds_titulo_w);
      end;
    elsif (ie_lib_com_sol_zero_w = 'O') and (ie_acm_w = 'N') and (ie_solucao_pca_w = 'N') and (ie_se_necessario_w = 'N') and (qt_solucao_total_w = 0) and (ie_consiste_w) then
      begin
      --Existem solucoes sem a informacao do volume total.
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(494880,'DS_SOLUCAO='||ds_titulo_w);
      end;
    end if;
  end if;

  if(nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '' AND nr_seq_solucao_w IS NOT NULL AND nr_seq_solucao_w::text <> '') then

      select  sum(coalesce(a.qt_solucao,0))
      into STRICT qt_volume_adep_w
      from  prescr_material a,
            prescr_solucao b
      where   a.nr_sequencia_solucao   = b.nr_seq_solucao
      and    a.nr_prescricao   = b.nr_prescricao
      and    b.nr_prescricao    = nr_prescricao_p
      and    b.nr_seq_solucao  = nr_seq_solucao_w;

      update  prescr_solucao
      set    qt_volume_adep  = CASE WHEN coalesce(qt_volume,0)=0 THEN  qt_volume_adep_w  ELSE qt_volume END
      where  nr_prescricao  = nr_prescricao_p
      and    nr_seq_solucao  = nr_seq_solucao_w;

    end if;

  select  count(nr_sequencia_solucao)
  into STRICT  qt_comp_solucao_w
  from  prescr_material where    nr_prescricao    = nr_prescricao_p
  and    nr_sequencia_solucao  = nr_seq_solucao_w LIMIT 1;

  if (qt_comp_solucao_w = 0) and (ie_consiste_w) and (coalesce(dt_suspensao_w::text, '') = '') then
    --Existem solucoes sem componentes informados.
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(175905);
  end if;
  end;
end loop;
close c02;


if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31,'Obter_se_medico_lib_tudo '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604) /*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

ie_lib_sem_interv_w  := coalesce(ie_lib_sem_interv_w,Wheb_assist_pck.obterParametroFuncao(924,11));
-- ###INICIO: Rotina para verificar as liberacoes que serao realizadas
medico_libera_tudo_w  := ie_lib_sem_interv_w;
if (medico_libera_tudo_w = 'D') then
  medico_libera_tudo_w := Obter_se_medico_lib_tudo(nr_prescricao_p, cd_setor_atend_w);
end if;

if (ie_libera_rep_alta_w = 'S') and (medico_libera_tudo_w = 'N') and (ie_prescricao_alta_w = 'S') then
  medico_libera_tudo_w  := 'S';
end if;

if (medico_libera_tudo_w = 'N') and (Wheb_assist_pck.obterParametroFuncao(924,231) <> 'N') then
  select  count(r.nr_prescricao)
  into STRICT  qt_agora_w
  from    prescr_material m,
      prescr_medica r where    coalesce(m.ie_urgencia,'N')   = 'S'
  and     m.ie_agrupador in (1,2,4)
  and    coalesce(m.nr_seq_kit::text, '') = ''
  and     m.nr_prescricao = r.nr_prescricao
  and     r.nr_prescricao = nr_prescricao_p LIMIT 1;

  if (qt_agora_w > 0) then
    qt_nao_agora_w  := 0;
    if (Wheb_assist_pck.obterParametroFuncao(924,231) = 'T') then
      select  count(r.nr_prescricao)
      into STRICT  qt_nao_agora_w
      from    prescr_material m,
          prescr_medica r where    coalesce(m.ie_urgencia,'N')   <> 'S'
      and     m.ie_agrupador in (1,2,4)
      and    coalesce(m.nr_seq_kit::text, '') = ''
      and     m.nr_prescricao = r.nr_prescricao
      and     r.nr_prescricao = nr_prescricao_p LIMIT 1;
    end if;

    if (qt_nao_agora_w = 0) then
      medico_libera_tudo_w := 'S';
    end if;
  end if;
end if;

if (medico_libera_tudo_w = 'N') then
  ie_libera_se_proced_w := coalesce(ie_libera_se_proced_w,Wheb_assist_pck.obterParametroFuncao(924,586));
  if (ie_libera_se_proced_w <> 'N') then
    select  count(*)
    into STRICT  qt_registros_w
    from    prescr_material m where    m.nr_prescricao = nr_prescricao_p
    and (ie_agrupador in (1,2,4,8,12) or (ie_agrupador in (1,2,4,8,12,5) and ie_libera_se_proced_w = 'AS'))
    and    not exists (  SELECT   p.nr_sequencia
              from  prescr_procedimento p
              where  p.nr_prescricao = m.nr_prescricao
              and    p.nr_sequencia = m.nr_sequencia_proc
              and    (p.nr_seq_solic_sangue IS NOT NULL AND p.nr_seq_solic_sangue::text <> '')) LIMIT 1;

    if (qt_registros_w = 0) then
      select  count(*)
      into STRICT  qt_registros_w
      from    prescr_recomendacao m where    m.nr_prescricao = nr_prescricao_p LIMIT 1;
    end if;

    if (ie_libera_se_proced_w = 'T') or (qt_registros_w = 0) then
      select  count(*)
      into STRICT  qt_exame_w
      from    prescr_procedimento m where    m.nr_prescricao = nr_prescricao_p
      and    (m.nr_seq_exame IS NOT NULL AND m.nr_seq_exame::text <> '') LIMIT 1;

      select  count(*)
      into STRICT  qt_proced_w
      from    prescr_procedimento m where    m.nr_prescricao = nr_prescricao_p
      and    coalesce(m.nr_seq_exame::text, '') = '' LIMIT 1;
    end if;

    if (qt_registros_w = 0) then
      if (ie_libera_se_proced_w = 'S') and (qt_exame_w = 0) and (qt_proced_w  > 0) THEN
        medico_libera_tudo_w := 'S';
      elsif (ie_libera_se_proced_w in ('A','AS','T')) and
          ((qt_exame_w > 0) or (qt_proced_w  > 0)) THEN
        medico_libera_tudo_w := 'S';
      elsif (ie_libera_se_proced_w = 'R') then
        medico_libera_tudo_w := coalesce(Obter_se_lib_tudo_proced(nr_prescricao_p),'N');
      end if;
    elsif (ie_libera_se_proced_w = 'T') and
        ((qt_exame_w > 0) or (qt_proced_w  > 0)) then
        medico_libera_tudo_w := 'S';
    end if;
  end if;
end if;

ie_lib_medico_w    := 'N';
ie_lib_enfermagem_w  := 'N';

if (ie_tipo_pessoa_p = 'S') or (Wheb_assist_pck.obterParametroFuncao(924,211) = 'S') then
  begin
  if (coalesce(dt_liberacao_medico_w::text, '') = '') then
    ie_lib_medico_w := 'S';
  end if;

  if (Medico_Libera_Tudo_w = 'S' or ie_prescricao_p <> 'S') and (coalesce(dt_liberacao_w::text, '') = '') then
    ie_lib_enfermagem_w  := 'S';
  end if;
  end;
end if;

if (ie_tipo_pessoa_p <> 'S') and (coalesce(dt_liberacao_w::text, '') = '') and (Wheb_assist_pck.obterParametroFuncao(924,211) = 'N' or obter_funcao_ativa = 252) then
  ie_lib_enf_hor_w := obter_param_usuario(7015, 33, cd_perfil_p, nm_usuario_p, coalesce(wheb_usuario_pck.get_cd_estabelecimento,1), ie_lib_enf_hor_w);
  if (ie_lib_enf_hor_w  = 'N') then
    ds_erro_w := consistir_liberacao_enfermagem(nr_prescricao_p, ds_erro_w);
    if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') and (ie_consiste_w) then
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(175911, 'DS_MENSAGEM='||ds_erro_w);
    end if;
  end if;
  if (cd_setor_atendimento_w IS NOT NULL AND cd_setor_atendimento_w::text <> '') or (ie_lib_setor_w = 'S') then
    ie_lib_enfermagem_w  := 'S';
  end if;
end if;

if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31,'prescr_sol_bs_indicacao '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604) /*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

IF (Wheb_assist_pck.obterParametroFuncao(924,65) = 'S') THEN
  select  count(*)
  into STRICT  qt_solic_w
  from  prescr_solic_bco_sangue where    nr_prescricao  = nr_prescricao_p LIMIT 1;

  if (qt_solic_w > 0) then
    select  count(*)
    into STRICT  qt_solic_w
    from  prescr_sol_bs_indicacao b,
        prescr_solic_bco_sangue a where    a.nr_prescricao = nr_prescricao_p
    and    a.nr_sequencia  = b.nr_seq_solic_bs
    and    (b.nr_seq_indicacao IS NOT NULL AND b.nr_seq_indicacao::text <> '') LIMIT 1;

    if (qt_solic_w = 0) and (ie_consiste_w) then
      --Essa prescricao nao pode ser liberada sem indicacoes clinicas na solicitacao ao banco de sangue. Parametro [65].
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(175914);
    end if;
  end if;
end if;

if (Wheb_assist_pck.obterParametroFuncao(924,221) = 'S') then
  begin
  select  count(*)
  into STRICT  qt_solic_w
  from  prescr_solic_bco_sangue where    nr_prescricao  = nr_prescricao_p LIMIT 1;

  if (qt_solic_w > 0) then
    select  count(*)
    into STRICT  qt_solic_w
    from  prescr_procedimento b,
        prescr_solic_bco_sangue a where    a.nr_prescricao = nr_prescricao_p
    and    a.nr_sequencia  = b.nr_seq_solic_sangue
    and    ((obter_se_exibe_proced(b.nr_prescricao,b.nr_sequencia,b.ie_tipo_proced,'BSHE') = 'S') or (Obter_tipo_proc_interno(nr_seq_proc_interno) = 'ST')) LIMIT 1;

    if (qt_solic_w = 0) and (ie_consiste_w) then
      --Essa prescricao nao pode ser liberada sem hemocomponentes na solicitacao ao banco de sangue. Parametro [221].
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(175915);
    end if;
  end if;
  end;
end if;

qt_max_validade_w := coalesce(Wheb_assist_pck.obterParametroFuncao(924,154),30);

if (qt_max_validade_w > 0) and (cd_funcao_origem_w = 950) and (nr_horas_validade_w > 0) and (coalesce(dt_liberacao_medico_w::text, '') = '') and (coalesce(dt_liberacao_w::text, '') = '') and (nr_horas_validade_w > qt_max_validade_w) and (coalesce(ie_hemodialise_w,'XPTO') <> 'O') then
  begin

  select   count(nr_prescricao)
  into STRICT   qt_prescr_w
  from  prescr_medica
  where   nr_atendimento = nr_atendimento_p  LIMIT 1;

  if  ((Wheb_assist_pck.obterParametroFuncao(924,960) = 'S') or (qt_prescr_w > 0)) then

    --O numero maximo de horas de validade da prescricao e  HORAS. Parametro[154].
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(6991,'HORAS='||qt_max_validade_w);
  end if;

  end;
end if;

--FIM: Rotina para verificar as liberacoes que serao realizadas
begin
gravar_processo_longo(obter_desc_expressao(726292),'LIBERAR_PRESCRICAO',5);
CALL define_local_disp_prescr(nr_prescricao_p, null, cd_perfil_p, nm_usuario_p);
exception when others then
  ds_erro_w  := sqlerrm(SQLSTATE);
end;

if (Wheb_assist_pck.obterParametroFuncao(924,771) = 'S') then
  select  max(b.ds_material)
  into STRICT  ds_material_w
  from  material b,
      prescr_material a
  where  a.cd_material  = b.cd_material
  and    a.nr_prescricao = nr_prescricao_p
  and    b.ie_controle_medico <> '0'
  and   a.ie_agrupador = 1
  and    not exists (  SELECT  1
              from  prescr_material_cid x
              where  x.nr_prescricao = a.nr_prescricao
              and    x.nr_sequencia_medic = a.nr_sequencia);
  if (ds_material_w IS NOT NULL AND ds_material_w::text <> '') and (ie_consiste_w) then
    --E necessario informar o CID do medicamento DS_MATERIAL.
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(175906, 'DS_MATERIAL='||ds_material_w);
  end if;
end if;

ds_erro_p    := '';

select  max(dt_liberacao_medico),
    max(coalesce(dt_liberacao_medico,dt_liberacao)),
    coalesce(MAX(cd_setor_atendimento),0)
into STRICT  dt_liberacao_medico_ww,
    dt_ambas_liberacoes_w,
    cd_setor_prescr_w
from   prescr_medica
where  nr_prescricao = nr_prescricao_p;

if (Wheb_assist_pck.obterParametroFuncao(924,536) = 'N') then

  begin
  select  coalesce(max(dt_prevista), clock_timestamp() - interval '30 days')
  into STRICT  dt_prevista_onco_w
  from  paciente_atendimento
  where  nr_prescricao =  nr_prescricao_p;
  exception
  when no_data_found then
    dt_prevista_onco_w := clock_timestamp() - interval '30 days';
  end;

  if (dt_prevista_onco_w > clock_timestamp()) and (ie_consiste_w) then
    --Nao e possivel liberar uma prescricao de ciclo de oncologia antes da data prevista! Parametro [536].
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(175909);
  end if;
end if;

if (Wheb_assist_pck.obterParametroFuncao(924,324) = 'N') and (dt_liberacao_medico_ww IS NOT NULL AND dt_liberacao_medico_ww::text <> '') then
  CALL Consistir_agrupamento_enf(nr_prescricao_p);
end if;

open c14;
loop
fetch c14 into
  ie_momento_lote_w,
  qt_minutos_agora_w,
  ie_agora_medico_w;
EXIT WHEN NOT FOUND; /* apply on c14 */
  begin
  ie_momento_lote_w  := ie_momento_lote_w;
  qt_minutos_agora_w  := qt_minutos_agora_w;
  ie_agora_medico_w  := ie_agora_medico_w;
  end;
end loop;
close c14;
gravar_processo_longo(obter_desc_expressao(726296),'LIBERAR_PRESCRICAO',7);
IF (cd_setor_prescr_w <> 0) and (Wheb_assist_pck.obterParametroFuncao(924,393) = 'S') and (coalesce(nr_atendimento_p,0) > 0) then

  select  count(*)
  into STRICT  ie_setor_w
  from  atend_paciente_unidade where    nr_atendimento    = nr_atendimento_p
  and    cd_setor_atendimento  = cd_setor_prescr_w LIMIT 1;

  if (obter_funcao_ativa = 916) then
    ie_consiste_regra_lib_setor_w := obter_param_usuario(916, 788, cd_perfil_p, nm_usuario_p, 0, ie_consiste_regra_lib_setor_w);
    if (ie_consiste_regra_lib_setor_w in ('S', 'T')) then
      select  max(cd_categoria),
          max(cd_plano_convenio),
          max(cd_empresa),
          max(nr_seq_cobertura),
          max(cd_tipo_acomodacao)
      into STRICT  cd_categoria_w,
          cd_plano_w,
          cd_empresa_cat_w,
          nr_seq_cobertura_w,
          cd_tipo_acomodacao_w
      from  atend_categoria_convenio
      where  nr_seq_interno = obter_atecaco_atendimento(nr_atendimento_p);

      select  max(nr_seq_classificacao),
          max(ie_clinica),
          max(cd_procedencia),
          max(nr_seq_tipo_acidente),
          max(nr_seq_queixa)
      into STRICT  nr_seq_classificacao_w,
          ie_clinica_w,
          cd_procedencia_w,
          nr_seq_tipo_acidente_w,
          nr_seq_queixa_w
      from  atendimento_paciente
      where  nr_atendimento = nr_atendimento_p;

      select  max(b.nr_atendimento)
      into STRICT  nr_atendimento_w
      from  atendimento_paciente b
      where  nr_atendimento < nr_atendimento_p;

      select  a.ie_tipo_convenio,
          a.nr_seq_queixa
      into STRICT  ie_tipo_convenio_ant_w,
          nr_seq_queixa_ant_w
      from  atendimento_paciente a
      where  a.nr_atendimento = nr_atendimento_w;

      qt_idade_w := substr(obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'A'), 1, 3);

      SELECT * FROM Obter_Se_Lib_Setor_Conv(
          cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, cd_setor_prescr_w, cd_plano_w, nr_seq_classificacao_w, ds_mensagem_w, ie_bloq_atendimento_w, ie_clinica_w, cd_empresa_cat_w, cd_procedencia_w, nr_seq_cobertura_w, nr_seq_tipo_acidente_w, cd_tipo_acomodacao_w, cd_medico_w, qt_idade_w, ie_tipo_convenio_ant_w, nr_seq_queixa_w, nr_seq_queixa_ant_w, clock_timestamp(), cd_pessoa_fisica_w) INTO STRICT ds_mensagem_w, ie_bloq_atendimento_w;

      if (ie_bloq_atendimento_w = 'B') and (ie_consiste_w) then
        if (coalesce(ds_mensagem_w::text, '') = '') then
          -- Atendimento bloqueado para o convenio! Verifique a regra "Liberacao Atendimento" do convenio.
          CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(150769);
        else
          --DS_MENSAGEM
          CALL Wheb_mensagem_pck.exibir_mensagem_abort(175911, 'DS_MENSAGEM='||ds_mensagem_w);
        end if;
      end if;
    end if;
  end if;

  if (ie_setor_w = 0) then
    CALL gerar_passagem_setor_atend(nr_atendimento_p, cd_setor_prescr_w, clock_timestamp(), 'N', nm_usuario_p);
  end if;
end if;

if (coalesce(ie_gerar_pass_setor_w,'N') <> 'N')  and (ie_prescricao_p = 'S') then
  begin
  open C19;
  loop
  fetch C19 into
    cd_setor_exame_w;
  EXIT WHEN NOT FOUND; /* apply on C19 */
    IF (cd_setor_exame_w <> 0) AND (coalesce(nr_atendimento_p,0) > 0) then
      select  count(*)
      into STRICT  ie_setor_w
      from  atend_paciente_unidade where    nr_atendimento    = nr_atendimento_p
      and    cd_setor_atendimento  = cd_setor_exame_w LIMIT 1;

      if (ie_setor_w = 0) then
        CALL gerar_passagem_setor_atend(nr_atendimento_p, cd_setor_exame_w, clock_timestamp(), 'N', nm_usuario_p);
      end if;
    end if;
  end loop;
  close C19;
  end;
end if;

qt_horas_passado_w    := coalesce(Wheb_assist_pck.obterParametroFuncao(924,29),24);
if  (dt_prescricao_w < clock_timestamp() - (qt_horas_passado_w/24)) and (ie_prescr_emergencia_w <> 'S') and (ie_consiste_w) then
  --A data da prescricao nao pode ser inferior a QT_HORAS_PASSADO horas.
  --Se desejar liberar essa prescricao faca uma copia com data atual.
  CALL Wheb_mensagem_pck.exibir_mensagem_abort(175921, 'QT_HORAS_PASSADO='||qt_horas_passado_w);
end if;

if (Wheb_assist_pck.obterParametroFuncao(924,514) = 'N') and (ie_prescr_emergencia_w <> 'S') and (dt_validade_prescr_w < clock_timestamp()) and (ie_consiste_w) then
  --A data final de validade desta prescricao eh menor que a data atual.
  --Se desejar liberar essa prescricao faca uma copia com data atual.
  CALL Wheb_mensagem_pck.exibir_mensagem_abort(175922);
end if;

if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31,'Executar_Material_Lib_Prescr '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

select  coalesce(max('S'),'N')
into STRICT  ie_regra_liberacao_w
from  regra_exec_lib_prescr_mat
where  coalesce(ie_liberacao,'P') <> 'P';

if (ie_regra_liberacao_w = 'S') or
  ((coalesce(dt_liberacao_medico_w::text, '') = '') and (coalesce(dt_liberacao_w::text, '') = '')) then

    if (cd_funcao_origem_w <> 2314) then
    CALL Executar_Material_Lib_Prescr( nr_prescricao_p, nm_usuario_p, ie_lib_medico_w, ie_lib_enfermagem_w);
  else
    begin
      CALL Executar_Material_Lib_Prescr( nr_prescricao_p, nm_usuario_p, ie_lib_medico_w, ie_lib_enfermagem_w);
    exception when others then
      ds_erro_w  := sqlerrm(SQLSTATE);
    end;
  end if;
end if;

if (coalesce(cd_setor_atend_w::text, '') = '') then
  cd_setor_atend_w  := coalesce(obter_unidade_atendimento(nr_atendimento_p, 'IA', 'CS'), obter_unidade_atendimento(nr_atendimento_p, 'A', 'CS'));

  update  prescr_medica
  set    cd_setor_atendimento = cd_setor_atend_w
  where  nr_prescricao = nr_prescricao_p;
end if;

if  ((ie_tipo_convenio_w = 3) or (coalesce(ie_tipo_convenio_w::text, '') = '')) then
  begin

  VarConsisteEstrutQuimio_w  := Wheb_assist_pck.obterParametroFuncao(924,230);
  If (coalesce(varconsisteestrutquimio_w,0) <> 0) then
    begin
    select  count(*)
    into STRICT  qt_quimio_w
    from    mat_estrutura_cadastro c,
        mat_estrutura e,
        prescr_material r where    c.cd_material        = r.cd_material
    and     c.nr_seq_estrutura   = e.nr_sequencia
    and     e.nr_sequencia     = varconsisteestrutquimio_w
    and     r.nr_prescricao   = nr_prescricao_p LIMIT 1;

    if (qt_quimio_w > 0) then
      begin

      select  substr(obter_se_laudo_vigente(cd_pessoa_fisica,clock_timestamp(),1),1,1)
      into STRICT  ie_laudo_w
      from  prescr_medica
      where  nr_prescricao  = nr_prescricao_p;

      if (ie_laudo_w = 'N') and (ie_consiste_w) then
        begin
        --E preciso registrar um Laudo SUS antes de liberar a prescricao. Parametro REP [230].
        CALL Wheb_mensagem_pck.exibir_mensagem_abort(175912);
        end;
      end if;
      end;
    end if;
    end;
  elsif (Wheb_assist_pck.obterParametroFuncao(924,131) = 'S') THEN
    begin
    select  count(*)
    into STRICT  qt_quimio_w
    from  material b,
      prescr_material a where    a.cd_material  = b.cd_material
    and    a.nr_prescricao  = nr_prescricao_p
    and    b.ie_mistura  <> 'N' LIMIT 1;

    if (qt_quimio_w > 0) then
      begin

      select  substr(obter_se_laudo_vigente(cd_pessoa_fisica,clock_timestamp(),1),1,1)
      into STRICT  ie_laudo_w
      from  prescr_medica
      where  nr_prescricao  = nr_prescricao_p;

      if (ie_laudo_w = 'N') and (ie_consiste_w) then
        begin
        --E preciso registrar um Laudo SUS antes de liberar a prescricao. Parametro REP [131].
        CALL Wheb_mensagem_pck.exibir_mensagem_abort(175913);
        end;
      end if;
      end;
    end if;
    end;
  end if;
  end;
end if;


if (Wheb_assist_pck.obterParametroFuncao(924,534) = 'N') THEN
  select  max(cd_procedimento),
      max(ie_origem_proced)
  into STRICT  cd_procedimento_w,
      ie_origem_proced_w
  from  prescr_procedimento
  where  nr_prescricao  = nr_prescricao_p
  and    (nr_seq_exame IS NOT NULL AND nr_seq_exame::text <> '')
  and    coalesce(cd_material_exame::text, '') = '';

  IF (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (ie_consiste_w) THEN
    --O material a ser coletado em relacao ao exame DS_EXAME deve ser informado!
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(175916, 'DS_EXAME='||Obter_Descricao_Procedimento(cd_procedimento_w, ie_origem_proced_w));
  END IF;
END IF;

IF (Wheb_assist_pck.obterParametroFuncao(924,67) = 'S') THEN
  select  count(*)
  into STRICT  qt_cito_w
  from  prescr_procedimento a where    a.nr_prescricao  = nr_prescricao_p
  and  obter_se_exibe_proced(a.nr_prescricao,a.nr_sequencia,a.ie_tipo_proced,'APC') = 'S'
  and not exists (  SELECT  1
        from  prescr_citopatologico b
        where  b.nr_prescricao = nr_prescricao_p) LIMIT 1;

  if (qt_cito_w = 0) then
    select  count(*)
    into STRICT  qt_cito_w
    from  prescr_procedimento a where    a.nr_prescricao  = nr_prescricao_p
    and  obter_se_exibe_proced(a.nr_prescricao,a.nr_sequencia,a.ie_tipo_proced,'APH') = 'S'
    and not exists (  SELECT  1
          from  prescr_histopatologico b
          where  b.nr_prescricao = nr_prescricao_p) LIMIT 1;
  end if;

  if (qt_cito_w > 0) and (ie_consiste_w) then
    --Essa prescricao nao pode ser liberada sem a informacao da avaliacao Cito ou Histopatologica do exame.
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(175917);
  end if;
end if;

if (Wheb_assist_pck.obterParametroFuncao(924,202) = 'S') then
  begin
  select  count(*)
  into STRICT  qt_medic_uso_w
  from  paciente_medic_uso where    cd_pessoa_fisica  = cd_pessoa_fisica_w
  and    dt_registro    >= dt_entrada_antend_w LIMIT 1;

  if (qt_medic_uso_w = 0) then
    begin
    --Para liberar a prescricao e obrigatorio informar os medicamentos em uso no historico de saude. Parametro REP [202].
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(175918);
    end;
  end if;

  end;
end if;

if (obter_funcao_ativa = 916) and (cd_setor_entrega_w IS NOT NULL AND cd_setor_entrega_w::text <> '') then
  ie_consiste_setor_prescr_w := obter_param_usuario(916, 553, cd_perfil_p, nm_usuario_p, 0, ie_consiste_setor_prescr_w);
  if (ie_consiste_setor_prescr_w = 'S') then
    select  coalesce(max(ie_permite_prescricao), 'S')
    into STRICT  ie_permite_prescricao_w
    from  setor_atendimento
    where  cd_setor_atendimento = cd_setor_entrega_w;

    if (ie_permite_prescricao_w = 'N') and (ie_consiste_w) then
      --'Nao e permitido fazer prescricoes para este setor!
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(221861);
    end if;
  end if;
end if;

ie_obriga_dados_clinicos_w := obter_param_usuario(916, 735, cd_perfil_p, nm_usuario_p, 0, ie_obriga_dados_clinicos_w);
if (coalesce(ie_obriga_dados_clinicos_w,'S') = 'N') then

  begin
  select  max(ds_dado_clinico)
  into STRICT  ds_dado_clinico_w
  from  prescr_procedimento
  where  nr_prescricao = nr_prescricao_p;
  exception
    when  others then
      ds_dado_clinico_w := '';
  end;

  if  ((coalesce(ds_dado_clinico_w::text, '') = '')  or (ds_dado_clinico_w = '')) and (ie_consiste_w) then
    --Para liberar a prescricao e obrigatorio informar os dados clinicos. Parametro EUP [735].
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(175919);
  end if;

  open c22;
  loop
  fetch  c22 into
    ds_dado_clinico_w;
  EXIT WHEN NOT FOUND; /* apply on c22 */
    if  ((coalesce(ds_dado_clinico_w::text, '') = '') or (ds_dado_clinico_w = '')) and (ie_consiste_w) then
      --Para liberar a prescricao eh obrigatorio informar os dados clinicos. Parametro EUP [735].
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(175919);
    end if;
  end loop;
  close c22;
end if;

cd_setor_atendimento_w := cd_setor_atendimento_c01_w;

select  max(dt_liberacao_medico),
    max(dt_liberacao),
    max(ie_motivo_prescricao),
    max(ie_origem_inf),
    max(cd_setor_atendimento),
    max(dt_prescricao),
    max(nr_prescricao_mae),
    coalesce(max(ie_emergencia),'N'),
    coalesce(max(ie_prescr_emergencia),'N'),
    coalesce(max(cd_estabelecimento),cd_estabelecimento_w),
    max(cd_setor_entrega),
    max(nr_doc_conv),
    max(qt_peso),
    max(qt_altura_cm),
    max(cd_prescritor),
    max(dt_inicio_prescr),
    max(dt_validade_prescr),
    max(cd_medico),
    coalesce(max(nr_horas_validade),24)
into STRICT  dt_liberacao_medico_w,
    dt_liberacao_w,
    ie_motivo_prescricao_w,
    ie_origem_inf_w,
    cd_setor_atend_w,
    dt_prescricao_w,
    nr_prescricao_mae_w,
    ie_emergencia_w,
    ie_prescr_emergencia_w,
    cd_estabelecimento_w,
    cd_setor_entrega_w,
    nr_doc_conv_w,
    qt_peso_w,
    qt_altura_w,
    cd_prescritor_w,
    dt_inicio_prescr_w,
    dt_validade_prescr_w,
    cd_medico_prescr_w,
    nr_horas_validade_w
from   prescr_medica
where   nr_prescricao = nr_prescricao_p;

select  coalesce(max(qt_peso_ideal),0)
into STRICT  qt_peso_ideal_w
from  hd_prescricao
where  nr_prescricao = nr_prescricao_p;

select	coalesce(max(ie_prescricao_anestesica),'N')
into STRICT	ie_prescricao_anestesica_w
from	prescr_medica_compl
where	nr_prescricao = nr_prescricao_p;

  --Atualizar estas informacoes somente para intervalos 'agora'
  open C35;
  loop
    fetch C35 into
      nr_seq_item_w;
    EXIT WHEN NOT FOUND; /* apply on C35 */
    begin
      dt_prev_execucao_w := clock_timestamp();

      select  coalesce(max(qt_min_agora),0)
      into STRICT  qt_min_agora_w
      from  intervalo_prescricao a,
          prescr_procedimento b
      where  a.cd_intervalo = b.cd_intervalo
      and    b.nr_prescricao = nr_prescricao_p;

      dt_prim_horario_w := to_char(clock_timestamp() + coalesce((qt_min_agora_w/1440),0),'hh24:mi');

      if (ie_atualiza_dt_urgente_w = 'N') then
        update  prescr_procedimento
        set    ds_horarios = dt_prim_horario_w
        where  ie_urgencia = 'S'
        and    nr_sequencia  = nr_seq_item_w
        and    nr_prescricao = nr_prescricao_p;

        update  prescr_procedimento
        set   dt_prev_execucao = dt_prev_execucao_w
        where  coalesce(nr_seq_exame::text, '') = ''
        and   ie_urgencia = 'S'
        and   nr_sequencia = nr_seq_item_w
        and   nr_prescricao = nr_prescricao_p;

      else
        update  prescr_procedimento
        set   ds_horarios = dt_prim_horario_w,
            dt_prev_execucao = dt_prev_execucao_w
        where  ie_urgencia = 'S'
        and    nr_sequencia = nr_seq_item_w
        and    nr_prescricao = nr_prescricao_p;

      end if;
    end;
  end loop;
  close C35;

gravar_processo_longo(obter_desc_expressao(726298),'LIBERAR_PRESCRICAO',6);
ds_erro_w := Liberar_item_Prescricao( nr_prescricao_p, null, nr_atendimento_p, ie_tipo_pessoa_p, cd_perfil_p, nm_usuario_p, ie_prescricao_p, 'N', 'A', ds_erro_w);

if (qt_peso_ideal_w > 0) then
  update  hd_pac_renal_cronico
  set    qt_peso_ideal    = qt_peso_ideal_w
  where  cd_pessoa_fisica  = cd_pessoa_fisica_w;
end if;

if (ie_prescr_emergencia_w = 'S') then
  cd_motivo_baixa_ret_w    := Wheb_assist_pck.obterParametroFuncao(924,814);

  if (cd_motivo_baixa_ret_w > 0) then
    update  prescr_material
    set    cd_motivo_baixa = cd_motivo_baixa_ret_w,
        dt_baixa = clock_timestamp()
    where  coalesce(cd_motivo_baixa,0) = 0
    and    nr_prescricao = nr_prescricao_p;
  end if;
end if;

ie_regra_lib_w  := Wheb_assist_pck.obterParametroFuncao(924,127); /* Rafael em 21/2/8 OS 83641 */
if (ie_regra_lib_w = 'S') then /* Rafael em 21/2/8 OS 83641 */
  update  prescr_medica
  set    ie_lib_farm  = 'S'
  where  nr_prescricao  = nr_prescricao_p;
end if;

if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31,'atendimento_sinal_vital '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

if (Wheb_assist_pck.obterParametroFuncao(924,1028) = 'S') then
  select  count(*)
  into STRICT  qt_sinal_vital_w
  from  atendimento_sinal_vital where    nr_atendimento  = coalesce(nr_atendimento_p,0)
  and    (qt_peso IS NOT NULL AND qt_peso::text <> '')
  and    (qt_altura_cm IS NOT NULL AND qt_altura_cm::text <> '') LIMIT 1;

  if (qt_sinal_vital_w = 0) and (nr_atendimento_p > 0) and (qt_peso_w > 0) and (qt_altura_w > 0) then

    begin

    gravar_processo_longo(obter_desc_expressao(726300),'LIBERAR_PRESCRICAO',8);

    ie_sv_lib_w := obter_param_usuario(924, 894, cd_perfil_p, nm_usuario_p, 0, ie_sv_lib_w);

    select  nextval('atendimento_sinal_vital_seq')
    into STRICT  nr_sequencia_sinal_w
;

    insert into atendimento_sinal_vital(
      nr_sequencia,
      nr_atendimento,
      dt_sinal_vital,
      dt_atualizacao,
      nm_usuario,
      cd_pessoa_fisica,
      ie_pressao,
      qt_peso,
      qt_altura_cm,
      ie_situacao,
      dt_liberacao,
      ie_aum_trab_resp)
    values (
      nr_sequencia_sinal_w,
      nr_atendimento_p,
      clock_timestamp(),
      clock_timestamp(),
      nm_usuario_p,
      cd_prescritor_w,
      'D',
      qt_peso_w,
      qt_altura_w,
      'A',
      CASE WHEN ie_sv_lib_w='S' THEN clock_timestamp()  ELSE null END ,
      'N');

    exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
    end;
  end if;
end if;

ie_lib_sem_interv_w  := coalesce(ie_lib_sem_interv_w,Wheb_assist_pck.obterParametroFuncao(924,11));
medico_libera_tudo_w  := ie_lib_sem_interv_w;

if (medico_libera_tudo_w = 'D') then
  medico_libera_tudo_w := Obter_se_medico_lib_tudo(nr_prescricao_p, cd_setor_atend_w);
END if;

if (ie_libera_rep_alta_w = 'S') and (Medico_Libera_Tudo_w = 'N') and (ie_prescricao_alta_w = 'S') then
  medico_libera_tudo_w  := 'S';
end if;

if (Wheb_assist_pck.obterParametroFuncao(924,231) <> 'N') and (medico_libera_tudo_w = 'N') then
  begin
  select  count(*)
  into STRICT  qt_agora_w
  from    prescr_material m,
      prescr_medica r where    coalesce(m.ie_urgencia,'N')   = 'S'
  and     m.ie_agrupador in (1,2,4)
  and    coalesce(m.nr_seq_kit::text, '') = ''
  and     m.nr_prescricao = r.nr_prescricao
  and     r.nr_prescricao = nr_prescricao_p LIMIT 1;

  if (qt_agora_w > 0) then
    qt_nao_agora_w  := 0;
    if (Wheb_assist_pck.obterParametroFuncao(924,231) = 'T') then
      select  count(*)
      into STRICT  qt_nao_agora_w
      from    prescr_material m,
          prescr_medica r where    coalesce(m.ie_urgencia,'N')   <> 'S'
      and     m.ie_agrupador in (1,2,4)
      and    coalesce(m.nr_seq_kit::text, '') = ''
      and     m.nr_prescricao = r.nr_prescricao
      and     r.nr_prescricao = nr_prescricao_p LIMIT 1;
    end if;

    if (qt_nao_agora_w = 0) then
      Medico_Libera_Tudo_w := 'S';
    end if;
  end if;

  end;
end if;

if (Medico_Libera_Tudo_w = 'N') then
  ie_libera_se_proced_w := coalesce(ie_libera_se_proced_w,Wheb_assist_pck.obterParametroFuncao(924,586));
  if (ie_libera_se_proced_w <> 'N') then
    select  count(*)
    into STRICT  qt_registros_w
    from    prescr_material m where (ie_agrupador in (1,2,4,8,12) or (ie_agrupador in (1,2,4,8,12,5) and ie_libera_se_proced_w = 'AS'))
    and    m.nr_prescricao = nr_prescricao_p
    and    not exists (  SELECT   p.nr_sequencia
              from  prescr_procedimento p
              where  p.nr_prescricao = m.nr_prescricao
              and    p.nr_sequencia = m.nr_sequencia_proc
              and    (p.nr_seq_solic_sangue IS NOT NULL AND p.nr_seq_solic_sangue::text <> '')) LIMIT 1;

    if (qt_registros_w = 0) then
      select  count(*)
      into STRICT  qt_registros_w
      from    prescr_recomendacao m where    m.nr_prescricao = nr_prescricao_p LIMIT 1;
    end if;

    if (ie_libera_se_proced_w = 'T') or (qt_registros_w = 0) then
      select  count(*)
      into STRICT  qt_exame_w
      from    prescr_procedimento m where    (m.nr_seq_exame IS NOT NULL AND m.nr_seq_exame::text <> '')
      and    m.nr_prescricao = nr_prescricao_p LIMIT 1;

      select  count(*)
      into STRICT  qt_proced_w
      from    prescr_procedimento m where    coalesce(m.nr_seq_exame::text, '') = ''
      and    m.nr_prescricao = nr_prescricao_p LIMIT 1;
    end if;

    IF (qt_registros_w = 0) then
      if (ie_libera_se_proced_w = 'S') and (qt_exame_w = 0) and (qt_proced_w > 0) then
        Medico_Libera_Tudo_w := 'S';
      elsif (ie_libera_se_proced_w in ('A','AS')) and
          ((qt_exame_w > 0) or (qt_proced_w > 0)) then
        Medico_Libera_Tudo_w := 'S';
      elsif (ie_libera_se_proced_w = 'R') then
        Medico_Libera_Tudo_w := coalesce(Obter_se_lib_tudo_proced(nr_prescricao_p),'N');
      end if;
    elsif (ie_libera_se_proced_w = 'T') and
        ((qt_exame_w > 0) or (qt_proced_w > 0)) then
        Medico_Libera_Tudo_w := 'S';
    end if;
  end if;
end if;

if (coalesce(cd_setor_atend_w::text, '') = '') then
  cd_setor_atend_w  := coalesce(obter_unidade_atendimento(nr_atendimento_p, 'IA', 'CS'), obter_unidade_atendimento(nr_atendimento_p, 'A', 'CS'));

  update  prescr_medica
  set    cd_setor_atendimento = cd_setor_atend_w
  where  nr_prescricao = nr_prescricao_p;
end if;

/* Francisco - OS 114247 - 27/10/2008 */

select  coalesce(max(ie_lib_presc_autor_medico),'N')
into STRICT  ie_lib_presc_autor_medico_w
from  parametro_faturamento
where  cd_estabelecimento  = cd_estabelecimento_w;


select  coalesce(max(ie_duplicar_proc_lado),'N')
into STRICT  ie_duplica_proc_lado_w
from  parametro_integracao_pacs;

select  max(dt_liberacao_medico),
    max(cd_protocolo),
    max(nr_seq_protocolo)
into STRICT  dt_liberacao_medico_ci_w,
    cd_protocolo_w,
    nr_seq_protocolo_w
from  prescr_medica
where  nr_prescricao = nr_prescricao_p;


if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31,'gerar_ordem_servico_proc '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

if (coalesce(ie_emergencia_w,'N') = 'S') or (ie_cartao_emergencia_w = 'S') or (coalesce(ie_prescricao_anestesica_w,'N') = 'S') then
	CALL baixar_prescr_emergencia(nr_prescricao_p,nm_usuario_p);
end if;

if (coalesce(dt_liberacao_medico_w::text, '') = '') then
  CALL REP_gerar_ordem_servico(nr_prescricao_p, nm_usuario_p);
  CALL gerar_ordem_servico_proc(nr_prescricao_p, nm_usuario_p);
end if;

if (ie_gera_disp_acm_sn_w = 'N') then
  open C31;
  loop
  fetch C31 into
    nr_sequencia_mat_w;
  EXIT WHEN NOT FOUND; /* apply on C31 */
  begin
  update   prescr_material
  set  ie_gerar_lote = 'S'
  where  nr_prescricao = nr_prescricao_p
  and  nr_sequencia  = nr_sequencia_mat_w;

  update   prescr_material
  set  ie_gerar_lote = 'S'
  where  nr_prescricao = nr_prescricao_p
  and  nr_sequencia_diluicao  = nr_sequencia_mat_w;
  end;
  end loop;
  close C31;
end if;

if (ie_tipo_pessoa_p = 'S') or (Wheb_assist_pck.obterParametroFuncao(924,211) = 'S') then
  begin

  ie_medico_lib_setor_w    := Wheb_assist_pck.obterParametroFuncao(924,87);
  IF (ie_medico_lib_setor_w = 'N') and (coalesce(dt_liberacao_w::text, '') = '') and (nr_atendimento_p > 0) and (coalesce(cd_setor_atendimento_w::text, '') = '') and (ie_consiste_w) then
    --O paciente nao tem passagem pelo setor do medico. Parametro [87].
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(175923);
  end if;

  if (coalesce(dt_liberacao_medico_w::text, '') = '') then
    ie_liberado_medico_w  := true;

    update  prescr_medica
    set    dt_liberacao_medico  = clock_timestamp(),
        nm_usuario    = nm_usuario_p
    where  nr_prescricao    = nr_prescricao_p;

    /* Rafael em 27/6/8 OS96612 - atualizar data liberacao medico */

    select  max(dt_liberacao_medico)
    into STRICT  dt_liberacao_medico_w
    from  prescr_medica
    where  nr_prescricao = nr_prescricao_p;

    select  coalesce(max(nr_seq_interno),0)
    into STRICT  nr_seq_interno_w
    from  unidade_atendimento
    where  nr_atendimento = nr_atendimento_p;

    if (coalesce(ie_prescricao_alta_w,'N') = 'S') and (Wheb_assist_pck.obterParametroFuncao(924,1102) = 'S')  then
      update  unidade_atendimento
      set    ie_status_unidade = 'A'
      where  nr_seq_interno = nr_seq_interno_w;
    end if;

    if (coalesce(ie_prescricao_alta_w,'N') = 'S') then
      SELECT  coalesce(MAX(pa.CD_MOTIVO_ALTA_MEDICA),0)
      INTO STRICT    cd_motivo_alta_medica_w
      FROM    parametro_atendimento pa
          WHERE   pa.cd_estabelecimento = cd_estabelecimento_w;
      IF     cd_motivo_alta_medica_w > 0 THEN
        CALL Gerar_estornar_alta_medica(nr_atendimento_p, 'A', cd_motivo_alta_medica_w, clock_timestamp(), obter_desc_expressao(783778), nm_usuario_p, 'S', obter_funcao_ativa);
      END IF;
    END IF;

    CALL rep_alterar_seq_proced(nr_prescricao_p,nm_usuario_p);

    if (ie_grava_historico_hor_w  = 'S') then
      CALL PLT_gravar_historico(nr_prescricao_p, nm_usuario_p, 'M');
    end if;

    if (Wheb_assist_pck.obterParametroFuncao(924,1126) = 'S') then
      CALL gerar_diagnostico_opm_prescr(nr_prescricao_p,nm_usuario_p);
    end if;

  end if;

  if (medico_libera_tudo_w = 'S' or ie_prescricao_p <> 'S') AND (coalesce(dt_liberacao_w::text, '') = '') then
    if (ie_lib_presc_autor_medico_w = 'N') then
      begin
      CALL gerar_autor_item_prescr(nr_prescricao_p,nm_usuario_p);
      CALL atualizar_autoriz_proced(nr_prescricao_p,nr_atendimento_p);
      exception when others then
        null;
      end;
    end if;

    -- Integracao iSite
     if (ie_duplica_proc_lado_w = 'S')  or (coalesce(ie_duplic_proced_lado_w, 'N') = 'S') 	then
      begin
      CALL duplicar_lado_procedimento(nr_prescricao_p);
      exception when others then
        null;
      end;
    end if;

    ie_liberado_w := true;  /* Elemar - 12/02/04 */
    update  prescr_medica
    set    dt_liberacao  = clock_timestamp(),
        nm_usuario  = nm_usuario_p
    where  nr_prescricao  = nr_prescricao_p;
	
	select nr_seq_agenda
    into STRICT nr_agenda_compl_w 
    from prescr_medica 
    where nr_prescricao = nr_prescricao_p;

    if (nr_agenda_compl_w IS NOT NULL AND nr_agenda_compl_w::text <> '') then
	begin
    	begin
		select nr_seq_solic_compl
		into STRICT nr_seq_complemento_w
		from agenda_integrada_item
		where nr_seq_agenda_exame = nr_agenda_compl_w  LIMIT 1;
	
		exception 
			when no_data_found then nr_seq_complemento_w := null;
        	when too_many_rows then raise;
		end;
		if (nr_seq_complemento_w IS NOT NULL AND nr_seq_complemento_w::text <> '') then
			update	solicitacao_exame_compl
			set	cd_status = 30, 
				nm_usuario = nm_usuario_p, 
				dt_atualizacao = clock_timestamp(), 
				dt_recepcionado = clock_timestamp() 
			where	nr_sequencia = nr_seq_complemento_w;
		end if;
	end;
	end if;

    update  prescr_material
    set    dt_lib_enfermagem = clock_timestamp(),
        nm_usuario  = nm_usuario_p
    where  nr_prescricao  = nr_prescricao_p;

  if (ie_rastre_prescr_libfarm_w = 'S') then
    ds_rastre_prescr_libfarm_w := substr(ds_rastre_prescr_libfarm_w || pls_util_pck.enter_w || $$plsql_unit || ':' || $$plsql_line
      || ' gerar_impr_adic_prescricao('
      || 'nr_prescricao_p => '  || nr_prescricao_p
      || ', ie_regra_lib_p => '  || ie_regra_lib_w
      || ', nm_usuario_p => '    || nm_usuario_p
      || ')', 1, 4000);
  end if;

    CALL Gerar_Impr_Adic_Prescricao(nr_prescricao_p, ie_regra_lib_w, nm_usuario_p); /* Rafael em 21/2/8 OS83641 */
    if (ie_grava_historico_hor_w = 'S') then
      CALL PLT_gravar_historico(nr_prescricao_p, nm_usuario_p, 'E');
    end if;
  end if;


  if (dt_liberacao_medico_w IS NOT NULL AND dt_liberacao_medico_w::text <> '') then
    begin
    CALL gerar_gerenciamento_risco(nr_atendimento_p,nr_prescricao_p,nm_usuario_p);
    exception when others then
      ds_erro_w  := sqlerrm(SQLSTATE);
    end;
  end if;


  if (dt_liberacao_medico_w IS NOT NULL AND dt_liberacao_medico_w::text <> '') then
    begin
    CALL envia_SMS_procedimento(nr_prescricao_p, nm_usuario_p);
    exception when others then
      ds_erro_w  := sqlerrm(SQLSTATE);
    end;
  end if;

  /*  Rotina criada para definir o campo IE_NIVEL_ATENCAO   da prescr_medica de acordo com o perfil de usuario;*/

  if (dt_liberacao_medico_w IS NOT NULL AND dt_liberacao_medico_w::text <> '') then
    select max(ie_nivel_atencao)
    into STRICT ie_nivel_atencao_w
    from prescr_medica
    where nr_prescricao = nr_prescricao_p;

    if (coalesce(ie_nivel_atencao_w::text, '') = '') then
      update prescr_medica
      set   ie_nivel_atencao = wheb_assist_pck.get_nivel_atencao_perfil
      where  nr_prescricao   = nr_prescricao_p;
    end if;

  end if;
  end;
end if;

select  count(*)
into STRICT  qt_unidade_atend_w
from  atend_paciente_unidade where    nr_atendimento  = nr_atendimento_p LIMIT 1;

  if (ie_rastre_prescr_libfarm_w = 'S') then
    ds_rastre_prescr_libfarm_w := substr(ds_rastre_prescr_libfarm_w || pls_util_pck.enter_w ||
                      $$plsql_unit || ':' || $$plsql_line ||
                      ' dt_liberacao_w: ' || to_char(dt_liberacao_w, 'dd/mm/yyyy hh24:mi:ss') ||
                      ' ie_tipo_pessoa_p: ' || ie_tipo_pessoa_p ||
                      ' parametro_211: ' || wheb_assist_pck.obterparametrofuncao(924,211) ||
                      ' obter_funcao_ativa: ' || obter_funcao_ativa ||
                      ' cd_setor_atendimento_w: ' || cd_setor_atendimento_w ||
                      ' nr_atendimento_p: ' || nr_atendimento_p ||
                      ' ie_lib_setor_w: ' || ie_lib_setor_w, 1, 4000);
  end if;

if (coalesce(dt_liberacao_w::text, '') = '') and
  ((ie_tipo_pessoa_p <> 'S') and (Wheb_assist_pck.obterParametroFuncao(924,211) = 'N' or  obter_funcao_ativa = 252) )then
  if (cd_setor_atendimento_w IS NOT NULL AND cd_setor_atendimento_w::text <> '') or
    ((coalesce(cd_setor_atendimento_w::text, '') = '') and (coalesce(nr_atendimento_p,0) = 0)) or (ie_lib_setor_w = 'S') then

    /* Francisco - 27/10/2008 - OS 114247 - Troquei do cursor para um nova procedure */

    if (ie_lib_presc_autor_medico_w = 'N') or (ie_lib_presc_autor_medico_w = 'S' and coalesce(dt_liberacao_medico_w::text, '') = '') then
      begin
      CALL gerar_autor_item_prescr(nr_prescricao_p,nm_usuario_p);
      CALL Atualizar_autoriz_proced(nr_prescricao_p,nr_atendimento_p);
      exception when others then
        null;
      end;
    end if;

    -- Integracao iSite
    if (ie_duplica_proc_lado_w = 'S')  or (coalesce(ie_duplic_proced_lado_w, 'N') = 'S') then
      begin
      CALL duplicar_lado_procedimento(nr_prescricao_p);
      exception when others then
        null;
      end;
    end if;

    ie_liberado_w := true;  /* Elemar - 12/02/04 */
    update  prescr_medica
    set  dt_liberacao  = clock_timestamp(),
      nm_usuario  = nm_usuario_p
    where  nr_prescricao  = nr_prescricao_p;

    update  prescr_material
    set    dt_lib_enfermagem = clock_timestamp(),
        nm_usuario  = nm_usuario_p
    where  nr_prescricao  = nr_prescricao_p;

  if (ie_rastre_prescr_libfarm_w = 'S') then
    ds_rastre_prescr_libfarm_w := substr(ds_rastre_prescr_libfarm_w || pls_util_pck.enter_w || $$plsql_unit || ':' || $$plsql_line
      || ' gerar_impr_adic_prescricao('
      || 'nr_prescricao_p => '  || nr_prescricao_p
      || ', ie_regra_lib_p => '  || ie_regra_lib_w
      || ', nm_usuario_p => '    || nm_usuario_p
      || ')', 1, 4000);
  end if;

    CALL Gerar_Impr_Adic_Prescricao(nr_prescricao_p, ie_regra_lib_w, nm_usuario_p); /* Rafael em 21/2/8 OS83641 */
    if (ie_grava_historico_hor_w  = 'S') then
      CALL PLT_gravar_historico(nr_prescricao_p, nm_usuario_p, 'E');
    end if;

    if (coalesce(dt_liberacao_medico_w::text, '') = '') then
      begin
      CALL envia_SMS_procedimento(nr_prescricao_p, nm_usuario_p);
      exception
      when others then
        ds_erro_w  := SQLERRM(SQLSTATE);
      end;
    end if;
     elsif (qt_unidade_atend_w > 0) THEN /* Ricardo 05/08/2006 - OS 38398 */
    ds_erro_p := wheb_mensagem_pck.get_texto(279123); --'O usuario nao tem o setor do paciente liberado!';
  elsif (qt_unidade_atend_w = 0) AND (coalesce(nr_atendimento_p,0) > 0) THEN /* Elemar 15/02/2007 */
    ds_erro_p := wheb_mensagem_pck.get_texto(279124); --'O atendimento nao possui setor. Verifique na funcao Entrada unica de paciente';
  end if;
end if;

CALL eup_data_resultado_liberacao(nr_prescricao_p, nm_usuario_p);

if (ds_rastre_prescr_libfarm_w IS NOT NULL AND ds_rastre_prescr_libfarm_w::text <> '') then
  CALL gerar_log_prescricao(
    nr_prescricao_p    => nr_prescricao_p,
    nr_seq_item_p    => null,
    ie_agrupador_p    => null,
    nr_seq_horario_p  => null,
    ie_tipo_item_p    => null,
    ds_log_p      => ds_rastre_prescr_libfarm_w,
    nm_usuario_p    => wheb_usuario_pck.get_nm_usuario,
    nr_seq_objeto_p    => 4016,
    ie_commit_p      => 'N');
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

if (nr_atendimento_p > 0) then
  begin
  gravar_processo_longo(obter_desc_expressao(726302),'LIBERAR_PRESCRICAO',9);

  if (ie_liberado_w) then
    open c16;
    loop
    fetch c16 into
      nr_seq_evento_w;
    EXIT WHEN NOT FOUND; /* apply on c16 */
      begin
      ie_gerar_evento_w := obter_se_gera_evento_prescr(nr_seq_evento_w,nr_prescricao_p,clock_timestamp());
      if (ie_gerar_evento_w = 'S') then
        CALL gerar_evento_liberar_prescr(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,nm_usuario_p,null, cd_setor_atend_w, nr_prescricao_p);
      end if;

      end;
    end loop;
    close c16;

    open C17;
    loop
    fetch C17 into
      nr_seq_evento_w,
      nr_sequencia_ww;
    EXIT WHEN NOT FOUND; /* apply on C17 */

      ie_proc_mat_dieta_rec_w  := null;

      select  count(*)
      into STRICT  qt_existe_regra_proc_w
      from  regra_envio_sms_proc where    nr_seq_regra = nr_sequencia_ww LIMIT 1;

      if (qt_existe_regra_proc_w > 0) then
        ie_proc_mat_dieta_rec_w  := 'P';
      else
        select  count(*)
        into STRICT  qt_existe_regra_mat_w
        from  regra_envio_sms_material where    nr_seq_regra = nr_sequencia_ww LIMIT 1;

        if (qt_existe_regra_mat_w > 0) then
          ie_proc_mat_dieta_rec_w  := 'M';
        else
          Select   count(*)
          into STRICT  qt_existe_regra_dieta_w
          from  regra_envio_sms_dieta where    nr_seq_regra = nr_sequencia_ww LIMIT 1;

          if (qt_existe_regra_dieta_w > 0) then
            ie_proc_mat_dieta_rec_w  := 'D';
          else
            Select   count(*)
            into STRICT  qt_existe_regra_rec_w
            from  regra_envio_sms_rec where    nr_seq_regra = nr_sequencia_ww LIMIT 1;

            if (qt_existe_regra_rec_w > 0) then
              ie_proc_mat_dieta_rec_w := 'R';

            end if;
          end if;
        end if;
      end if;

      ie_gerar_evento_w := obter_se_evento_prescr_lib(nr_seq_evento_w,nr_prescricao_p,clock_timestamp(),'LPE');

      if (ie_gerar_evento_w = 'S') then
        if (ie_proc_mat_dieta_rec_w IS NOT NULL AND ie_proc_mat_dieta_rec_w::text <> '') then
          if (Obter_se_pac_regra_evento(nr_prescricao_p,nr_sequencia_ww,ie_proc_mat_dieta_rec_w) = 'S') then
            CALL gerar_evento_liberar_prescr(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,nm_usuario_p,null, cd_setor_atend_w, nr_prescricao_p);
          end if;
        else

          CALL gerar_evento_liberar_prescr(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,nm_usuario_p,null, cd_setor_atend_w, nr_prescricao_p);
        end if;
      end if;

    end loop;
    close C17;
  end if;

  if (ie_liberado_medico_w) then

    open C26;
    loop
    fetch C26 into
      nr_seq_evento_w,
      nr_sequencia_ww;
    EXIT WHEN NOT FOUND; /* apply on C26 */

      ie_proc_mat_dieta_rec_w  := null;

      select  count(*)
      into STRICT  qt_existe_regra_proc_w
      from  regra_envio_sms_proc where    nr_seq_regra = nr_sequencia_ww LIMIT 1;

      if (qt_existe_regra_proc_w > 0) then
        ie_proc_mat_dieta_rec_w  := 'P';
      else
        select  count(*)
        into STRICT  qt_existe_regra_mat_w
        from  regra_envio_sms_material where    nr_seq_regra = nr_sequencia_ww LIMIT 1;

        if (qt_existe_regra_mat_w > 0) then
          ie_proc_mat_dieta_rec_w  := 'M';
        else
          Select   count(*)
          into STRICT  qt_existe_regra_dieta_w
          from  regra_envio_sms_dieta where    nr_seq_regra = nr_sequencia_ww LIMIT 1;

          if (qt_existe_regra_dieta_w > 0) then
            ie_proc_mat_dieta_rec_w := 'D';
          else
            Select   count(*)
            into STRICT  qt_existe_regra_rec_w
            from  regra_envio_sms_rec where    nr_seq_regra = nr_sequencia_ww LIMIT 1;

            if (qt_existe_regra_rec_w > 0) then
              ie_proc_mat_dieta_rec_w := 'R';

            end if;
          end if;
        end if;
      end if;

      ie_gerar_evento_w := obter_se_evento_prescr_lib(nr_seq_evento_w,nr_prescricao_p,clock_timestamp(),'LP');

      if (ie_gerar_evento_w = 'S') then

        if (ie_proc_mat_dieta_rec_w IS NOT NULL AND ie_proc_mat_dieta_rec_w::text <> '') then
          if (Obter_se_pac_regra_evento(nr_prescricao_p,nr_sequencia_ww,ie_proc_mat_dieta_rec_w) = 'S') then
            CALL gerar_evento_liberar_prescr(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,nm_usuario_p,null, cd_setor_atend_w, nr_prescricao_p);
          end if;
        else
          CALL gerar_evento_liberar_prescr(nr_seq_evento_w,nr_atendimento_p,cd_pessoa_fisica_w,nm_usuario_p,null, cd_setor_atend_w, nr_prescricao_p);
        end if;
      end if;
    end loop;
    close C26;
  end if;

  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
  end;
end if;



if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31,'if ie_liberado_w '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;


if  ((ie_liberado_w) and
   ((ie_atual_status_lib_medico_w = 'N') or ((not ie_liberado_medico_w) or (coalesce(dt_liberacao_medico_w::text, '') = '')))) or
  (ie_liberado_medico_w AND ie_atual_status_lib_medico_w = 'S')then
  begin
  ie_gerar_sequencia_lab_w  := 'S';

  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

  update  prescr_procedimento
  set    ie_status_atend = 10
  where  coalesce(ie_status_atend,0) < 10
  and    nr_prescricao  = nr_prescricao_p;

  update   prescr_procedimento
  set   ie_status_atend = ie_status_coleta_w
  where   ie_status_atend < ie_status_coleta_w
  and   coalesce(ie_amostra, 'N')  = 'S' /*Bruna - OS71659 dar update aqui para nao afetar trigger da prescr_procedimento */
  and    nr_prescricao  = nr_prescricao_p;

  if (ie_status_sem_coleta_w > 0) then

    update   prescr_procedimento
    set   ie_status_atend = ie_status_sem_coleta_w
    where   ie_status_atend < ie_status_sem_coleta_w
    and    coalesce(ie_amostra, 'N')  = 'N'
    and    nr_prescricao   = nr_prescricao_p;

  end if;

  if (ie_status_autor_pend_w > 0) then
    update   prescr_procedimento
    set   ie_status_atend = ie_status_autor_pend_w
    where   ie_autorizacao = 'PA'
    and    nr_prescricao   = nr_prescricao_p;
  end if;

  CALL gerar_exame_lab_dependente(nr_prescricao_p, NULL, 0, nr_atendimento_p, nm_usuario_p,null,null,null);

  update   prescr_procedimento
  set   dt_coleta = clock_timestamp()
  where   coalesce(dt_coleta::text, '') = ''
  and    ie_status_atend = ie_status_coleta_w
  and   coalesce(ie_amostra, 'N')  = 'S'
  and    nr_prescricao  = nr_prescricao_p;

  select  coalesce(max(cd_setor_atendimento),0)
  into STRICT  cd_setor_atendimento_w
  from  prescr_procedimento
  where  nr_prescricao = nr_prescricao_p;

  if (cd_setor_atendimento_w <> 0) and (coalesce(nr_atendimento_p,0) > 0)then
    select  count(*)
    into STRICT  ie_setor_w
    from  atend_paciente_unidade where    nr_atendimento = nr_atendimento_p LIMIT 1;
    if (ie_setor_w = 0) then
      CALL gravar_processo_longo(obter_desc_expressao(726296),'LIBERAR_PRESCRICAO',10);
      gerar_passagem_setor_atend(nr_atendimento_p, cd_setor_atendimento_w, clock_timestamp(), 'N', nm_usuario_p);
    end if;
  end if;

  if (ie_gerar_result_prescr_w = 'S') then
    CALL Gera_Exame_Result_Lab(nr_prescricao_p, null, 'N', 'N', 'N', nm_usuario_p, 'N', 'S');
  end if;

  if (ie_gerar_lote_setor_w = 'S') then
    CALL LAB_Atualizar_Lote_Exame(nr_prescricao_p, cd_setor_entrega_w, nm_usuario_p);
  end if;

  if (ie_status_lote_ext_w = 10) then
    Atualizar_LAB_Lote_Externo(nr_prescricao_p, null, nm_usuario_p);
  end if;

  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
    if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
  end;
end if;

select  coalesce(max(1),0)
into STRICT  ie_lib_w
from  prescr_medica
where  (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
and  nr_prescricao  = nr_prescricao_p;

select  max(cd_setor_atendimento)
into STRICT  cd_setor_atendimento_w
from  prescr_medica
where  nr_prescricao = nr_prescricao_p;

if (coalesce(dt_liberacao_medico_ww::text, '') = '') then
  begin

  select  coalesce(max(hr_inicio_prescricao),to_date('01/01/1900 00:00:01','dd/mm/yyyy hh24:mi:ss'))
  into STRICT  dt_prim_setor_w
  from  setor_atendimento
  where  cd_setor_atendimento = cd_setor_atendimento_w;

  dt_prim_setor_w  := ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_prescricao_w, dt_prim_setor_w);

  CALL Enviar_CI_prescr_procedimento(nr_prescricao_p, cd_estabelecimento_w, cd_perfil_p, nm_usuario_p);
  CALL Enviar_CI_prescr_dieta(nr_prescricao_p, nm_usuario_p,'L',null);

  if (Wheb_assist_pck.obterParametroFuncao(924,267) <> 'N') then
    CALL enviar_ci_internacao_sus(nm_usuario_p);
  end if;

  open c13;
  loop
  fetch c13 into
    nr_seq_material_w,
    ie_bomba_infusao_w;
  EXIT WHEN NOT FOUND; /* apply on c13 */
    if (coalesce(ie_bomba_infusao_w,'N') <> 'N') and (obter_funcao_ativa not in (950,924)) then
      CALL gerar_itens_assoc_dispositivo(ie_bomba_infusao_w, nr_prescricao_p, cd_perfil_p, cd_estabelecimento_w, nr_seq_material_w, null, nm_usuario_p, null);
    end if;

    if (coalesce(dt_liberacao_medico_ww::text, '') = '') then
      update  prescr_material
      set    ds_horarios_medico  = ds_horarios
      where  nr_sequencia    = nr_seq_material_w
      and    nr_prescricao    = nr_prescricao_p;
    end if;
  end loop;
  close c13;

  open c33;
  loop
  fetch c33 into
    nr_seq_solucao_2w;
  EXIT WHEN NOT FOUND; /* apply on c33 */
    if (coalesce(dt_liberacao_medico_ww::text, '') = '') then
      update  prescr_solucao
      set    ds_horarios_medico  = ds_horarios
      where  nr_prescricao    = nr_prescricao_p
      and    nr_seq_solucao    = nr_seq_solucao_2w;
    end if;
  end loop;
  close c33;

  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
  end;
end if;

if (ie_lib_w = 1) and (coalesce(dt_liberacao_w::text, '') = '') then
  begin
  CALL Gerar_medic_NPT(nr_prescricao_p);
  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
  end;
end if;

begin
CALL define_local_disp_prescr(nr_prescricao_p, NULL, cd_perfil_p, nm_usuario_p);
exception when others then
  ds_erro_w  := sqlerrm(SQLSTATE);
end;

if (Wheb_assist_pck.obterParametroFuncao(924,400) = 'M' and coalesce(dt_liberacao_w::text, '') = '')
    or (Wheb_assist_pck.obterParametroFuncao(924,400) <> 'N' and ((ie_lib_w = 1) and (coalesce(dt_liberacao_w::text, '') = ''))) then
  begin
  CALL gerar_prescr_proc_quant(nr_prescricao_p,cd_perfil_p,nm_usuario_p);
  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
  end;
end if;

if (dt_liberacao_medico_w IS NOT NULL AND dt_liberacao_medico_w::text <> '') and (ie_tipo_pessoa_p = 'S') then

  open C37;
  loop
  fetch C37 into
    nr_sequencia_w;
  EXIT WHEN NOT FOUND; /* apply on C37 */
    begin
      CALL Gerar_proced_assoc_mat(nr_prescricao_p, nr_sequencia_w, nm_usuario_p, 'S');
    end;
  end loop;
  close C37;
end if;

-- Consistir que a prescricao foi liberada nesse momento
if (ie_lib_w = 1) and (coalesce(dt_liberacao_w::text, '') = '') then
  begin
  ie_isolamento_w  := obter_se_prescr_proc_isola(nr_prescricao_p);

  if (coalesce(ie_isolamento_w,'N') = 'S') then
    select  max(obter_unidade_atendimento(nr_atendimento,'A','UB')),
        max(obter_unidade_atendimento(nr_atendimento,'A','UC')),
        max(cd_setor_atendimento)
    into STRICT  cd_unidade_basica_w,
        cd_unidade_compl_w,
        cd_setor_atendimento_ww
    from  prescr_medica
    where  nr_prescricao = nr_prescricao_p;


    select  coalesce(max(a.nr_seq_precaucao),0)
    into STRICT    nr_seq_precaucao_w
    from  proc_interno  a,
        prescr_procedimento b
    where  a.nr_sequencia = b.nr_seq_proc_interno
    and    coalesce(a.ie_gera_isolamento,'N') = 'S'
    and    (b.nr_seq_proc_interno IS NOT NULL AND b.nr_seq_proc_interno::text <> '')
    and    b.nr_prescricao  = nr_prescricao_p;
    gravar_processo_longo(obter_desc_expressao(726306),'LIBERAR_PRESCRICAO',11);
    CALL gerar_isolar_liberar_paciente(nr_atendimento_p,cd_setor_atendimento_ww,cd_unidade_basica_w,cd_unidade_compl_w,'S',nr_seq_precaucao_w,0,0,'P',null,null,null,0,wheb_usuario_pck.get_cd_estabelecimento,cd_perfil_p,nm_usuario_p,0, null, null, null, null,0);
  end if;

  open c09;
  loop
  fetch c09 into
    ie_regra_w,
    cd_material_w,
    nr_seq_ficha_w;
  EXIT WHEN NOT FOUND; /* apply on C09 */
    begin
    if (nr_seq_ficha_w > 0) then
      begin
      update  prescr_solucao a
      set    a.ie_apap  = ie_regra_w
      where  exists (SELECT  1
          from  material d,
              prescr_material c,
              prescr_medica b
          where  b.nr_prescricao    = nr_prescricao_p
          and    b.nr_prescricao    = c.nr_prescricao
          and    a.nr_seq_solucao  = c.nr_sequencia_solucao
          and    c.cd_material    = d.cd_material
          and    d.nr_seq_ficha_tecnica  = nr_seq_ficha_w)
      and    a.nr_prescricao  = nr_prescricao_p;
      end;
    elsif (cd_material_w > 0) then
      begin
      update  prescr_solucao a
      set    a.ie_apap  = ie_regra_w
      where  exists (SELECT  1
              from  prescr_material c,
                  prescr_medica b
              where  b.nr_prescricao    = nr_prescricao_p
              and    b.nr_prescricao    = c.nr_prescricao
              and    a.nr_seq_solucao  = c.nr_sequencia_solucao
              and    c.cd_material    = cd_material_w)
      and    a.nr_prescricao  = nr_prescricao_p;
      end;
    end if;
    end;
  end loop;
  close c09;

  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
  ie_chamou_w  := 'N';
  open C08;
  loop
  fetch c08 into
    nr_sequencia_w,
    ds_diluicao_w,
    cd_material_w,
    nr_dia_util_w,
    qt_max_dia_aplic_w,
    ie_dias_util_medic_w,
    qt_dia_terapeutico_w,
    qt_dia_profilatico_w,
    ie_objetivo_uso_w,
    ds_justificativa_w,
    qt_dias_tratamento_w,
    qt_dose_diaria_w,
    cd_intervalo_ww;
  EXIT WHEN NOT FOUND; /* apply on C08 */
    begin
    update  prescr_material
    set    ds_diluicao_edit  = ds_diluicao_w
    where  nr_sequencia    = nr_sequencia_w
    and    nr_prescricao    = nr_prescricao_p;

    CALL Gerar_proced_assoc_mat(nr_prescricao_p, nr_sequencia_w, nm_usuario_p, 'N');

    If (cd_material_w > 0) then
      begin

      select  coalesce(obter_dados_medic_atb_num(max(cd_material),wheb_usuario_pck.get_cd_estabelecimento,max(qt_max_dia_aplic),'DA',ie_tipo_atendimento_w,cd_setor_prescr_w,ie_clinica_w),0)
      into STRICT  qt_max_dia_aplic_ww
      from  rep_regra_dias_util
      where  cd_material = cd_material_w
      and  cd_pessoa_fisica = cd_pessoa_fisica_w;

      end;
    end if;

    if (ie_chamou_w  = 'N') and (ie_dias_util_medic_w <> 'N') and (coalesce(dt_liberacao_w::text, '') = '') then
      CALL Enviar_CI_Paciente_Medic(nr_prescricao_p,cd_estabelecimento_w, cd_perfil_p,nm_usuario_p,null,'L');
      ie_chamou_w  := 'S';
    end if;

    ie_padronizado_w  := substr(obter_se_material_padronizado(cd_estabelecimento_w, cd_material_w),1,1);
    if (ie_padronizado_w = 'N') and (Wheb_assist_pck.obterParametroFuncao(924,303) = 'L') and (qt_dias_tratamento_w > 0) and (cd_funcao_origem_w <> 2314) then
      begin
      CALL Gerar_liberacao_med_NaoPadrao(qt_dias_tratamento_w, cd_pessoa_fisica_w, cd_material_w, clock_timestamp(), qt_dose_diaria_w, nm_usuario_p, ds_justificativa_w, nr_prescricao_p, nr_sequencia_w,null,cd_intervalo_ww);
      exception when others then
        null;
      end;
    end if;
    end;
  end loop;
  close C08;

  CALL Enviar_CI_Paciente_SNE(nr_prescricao_p,cd_estabelecimento_w, cd_perfil_p,nm_usuario_p,null,'L');
  CALL Enviar_CI_recomendacao(nr_prescricao_p, cd_estabelecimento_w, nm_usuario_p);

  open c15;
  loop
  fetch c15 into
    cd_tipo_recomendacao_w,
    nr_seq_recomendacao_w;
  EXIT WHEN NOT FOUND; /* apply on c15 */
    CALL Gerar_proced_assoc_rec(nr_prescricao_p, cd_tipo_recomendacao_w, nm_usuario_p,'P');
    CALL Gerar_proced_assoc_rec_conta(nr_prescricao_p, nr_seq_recomendacao_w, cd_tipo_recomendacao_w, nm_usuario_p, null, 'G');

  end loop;
  close c15;

  if (ie_emergencia_w <> 'S') and (Wheb_assist_pck.obterParametroFuncao(924,519)  <> 'S') and (cd_funcao_origem_w  <> 2314) then
    open c12;
    loop
    fetch c12 into
      cd_intervalo_agora_w,
      nr_seq_agora_w;
    EXIT WHEN NOT FOUND; /* apply on c12 */

      select  coalesce(MAX(qt_min_agora),0)
      into STRICT  qt_min_agora_w
      from  intervalo_prescricao
      where  cd_intervalo = cd_intervalo_agora_w;

      dt_prim_horario_w  := to_char(clock_timestamp() + (qt_min_agora_w/1440),'hh24:mi');

      select  coalesce(max(a.hr_prim_horario),'')
      into STRICT  dt_prim_horario_rec_w
      from  prescr_material b,
          prescr_recomendacao a
      where  a.nr_prescricao = b.nr_prescricao
      and    a.nr_prescricao  = nr_prescricao_p
      and    b.nr_sequencia  = nr_seq_agora_w
      and    a.nr_sequencia  = b.nr_seq_recomendacao
      and    a.ie_urgencia   = 'S'
      and    (a.hr_prim_horario IS NOT NULL AND a.hr_prim_horario::text <> '');

      if (dt_prim_horario_rec_w IS NOT NULL AND dt_prim_horario_rec_w::text <> '') then

        update  prescr_material
        set    ds_horarios  = dt_prim_horario_rec_w,
            hr_prim_horario  = dt_prim_horario_rec_w
        where  ie_urgencia  = 'S'
        and    coalesce(ie_em_protocolo_vanco, 'N') = 'N'
        and    nr_sequencia  = nr_seq_agora_w
        and    nr_prescricao  = nr_prescricao_p;

      else
        update  prescr_material
        set    ds_horarios  = dt_prim_horario_w,
            hr_prim_horario  = dt_prim_horario_w
        where  coalesce(ie_em_protocolo_vanco, 'N') = 'N'
        and    ie_urgencia  = 'S'
        and    nr_sequencia  = nr_seq_agora_w
        and    nr_prescricao  = nr_prescricao_p
        and    not exists ( SELECT 1
                   from prescr_mat_hor
                   where nr_Prescricao = nr_prescricao_p
                   and   nr_seq_material = nr_seq_agora_w
                   and   (dt_lib_horario IS NOT NULL AND dt_lib_horario::text <> ''));
      end if;
    end loop;
    close c12;
  end if;

  CALL Gerar_Prescr_Proc_Controle(nr_prescricao_p);

  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

  if (ie_liberado_w) then
    ie_evolucao_clinica_w    := Wheb_assist_pck.obterParametroFuncao(924,974);

    open c04;
    loop
    fetch c04 into
      nr_sequencia_w,
      nr_seq_proc_interno_w,
      nr_seq_prot_glic_w,
      ie_proc_ivc_w,
      cd_procedimento_w,
      ie_origem_proced_w,
      ds_orientacao_w,
      ds_procedimento_w,
      dt_prevista_w,
      cd_medico_w;
    EXIT WHEN NOT FOUND; /* apply on c04 */

      if (ds_orientacao_w IS NOT NULL AND ds_orientacao_w::text <> '') and (ie_evolucao_clinica_w IS NOT NULL AND ie_evolucao_clinica_w::text <> '') then
        select  ie_tipo_evolucao
        into STRICT  ie_tipo_evolucao_w
        from  usuario
        where  nm_usuario = nm_usuario_p;
        CALL gerar_evolucao_proc_REP(cd_pessoa_fisica_w, nr_atendimento_p, nm_usuario_p, WHEB_MENSAGEM_PCK.get_texto(455566,'DS_PROCEDIMENTO='|| ds_procedimento_w ||';DT_PREPARO='|| PKG_DATE_FORMATERS.TO_VARCHAR(dt_prevista_w, 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p) || CHR(13) || ';DS_ORIENTACAO='|| ds_orientacao_w), ie_evolucao_clinica_w, ie_tipo_evolucao_w, cd_profissional_w);
      end if;

      if (coalesce(ie_proc_ivc_w,'N') = 'S') then
        CALL GERAR_ATEND_IVC(nr_prescricao_p, nr_sequencia_w, nm_usuario_p);
      end if;


      if (nr_atendimento_p > 0) and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and
        ((nr_seq_prot_glic_w IS NOT NULL AND nr_seq_prot_glic_w::text <> '') or (substr(obter_ctrl_glic_proc(nr_seq_proc_interno_w),1,3) = 'CIG')) then
        nr_seq_glic_w := gerar_atend_glicemia(nr_atendimento_p, nr_prescricao_p, nr_sequencia_w, nr_seq_prot_glic_w, nm_usuario_p, nr_seq_glic_w);
      end if;


      CALL Atualiza_Regra_baixa_exame(nr_atendimento_p, nr_prescricao_p, nr_sequencia_w, cd_procedimento_w, ie_origem_proced_w,nm_usuario_p);
    end loop;
    close c04;
    if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
  end if;

  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
  end;

  if  ((cd_funcao_origem_w = 2314) or (cd_funcao_origem_w = 3130) or (cd_funcao_origem_w = 281)) and
    ((obter_funcao_ativa = 7015) or (obter_funcao_ativa = 7010) or (obter_funcao_ativa = 3130) or (obter_funcao_ativa = 281) or (obter_funcao_ativa = 2314) or (obter_funcao_ativa = 924 and ie_lib_enfermagem_w = 'S')) then
    CALL cpoe_atualizar_enferm_farm(nr_prescricao_p, nm_usuario_p, 'ENFERMAGEM');
  end if;

  if (obter_funcao_ativa = 252 and coalesce(ds_erro_p::text, '') = '') then
    CALL gpt_atualizar_enferm_farm(nr_prescricao_p, nm_usuario_p, 'ENFERMAGEM');
  end if;

end if;


if (ie_gera_log_amostra_w = 'S') and (coalesce(pkg_i18n.get_user_locale, 'pt_BR') <> 'ja_JP') then
  CALL gravar_log_lab(31,'gerar_consentimento_proced '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

begin
  open c04;
  loop
  fetch c04 into
    nr_sequencia_w,
    nr_seq_proc_interno_w,
    nr_seq_prot_glic_w,
    ie_proc_ivc_w,
    cd_procedimento_w,
    ie_origem_proced_w,
    ds_orientacao_w,
    ds_procedimento_w,
    dt_prevista_w,
    cd_medico_w;
  EXIT WHEN NOT FOUND; /* apply on c04 */
  CALL gravar_processo_longo(obter_desc_expressao(726308),'LIBERAR_PRESCRICAO',12);

  /*Para o japao foi feito dentro da trigger cpoe_proc_insert_update_after. */

  if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') <> 'ja_JP') then
    CALL gerar_consentimento_proced( nr_atendimento_p,coalesce(cd_estabelecimento_w,0),nr_prescricao_p,cd_procedimento_w,nr_seq_proc_interno_w,ie_origem_proced_w,cd_perfil_p,cd_medico_w,nm_usuario_p);
  end if;

  end loop;
  close c04;
exception when others then
  ds_erro_w  := sqlerrm(SQLSTATE);
end;

if (Wheb_assist_pck.obterParametroFuncao(924,922) = 'N') then
  open C23;
  loop
  fetch C23 into
    nr_sequencia_www,
    ie_regra_disp_www;
  EXIT WHEN NOT FOUND; /* apply on C23 */
    update  prescr_material
    set   ie_regra_disp  = coalesce(ie_regra_disp_www, ie_regra_disp)
    where  ie_agrupador  = 5
    and    nr_sequencia  = nr_sequencia_www
    and    nr_prescricao   = nr_prescricao_p;
  end loop;
  close C23;

end if;

begin
  if (coalesce(dt_ambas_liberacoes_w::text, '') = '') then
    CALL gerar_recomendacao_solucao(nr_prescricao_p,cd_setor_prescr_w,nm_usuario_p);
  end if;
exception when others then
  ds_erro_w  := sqlerrm(SQLSTATE);
  --gerar_log_prescricao(nr_prescricao_p, null, null, null, null, substr('GERAR_RECOMENDACAO_SOLUCAO=' || ds_erro_w,1,4000), nm_usuario_p, 4016, 'S');
end;

ie_lib_individual_w      := coalesce(ie_lib_individual_w,Wheb_assist_pck.obterParametroFuncao(924,530));


if (ie_lib_w = 1) and (coalesce(dt_liberacao_w::text, '') = '') then
  begin
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

  if (coalesce(Wheb_assist_pck.obterParametroFuncao(924,301),'N')  = 'S') THEN
    open c11;
    loop
    fetch c11 into
      nr_sequencia_w,
      hr_prescricao_w,
      hr_dose_especial_w;
    EXIT WHEN NOT FOUND; /* apply on c11 */
      if (hr_dose_especial_w IS NOT NULL AND hr_dose_especial_w::text <> '') and (hr_prescricao_w IS NOT NULL AND hr_prescricao_w::text <> '') then
        if (hr_dose_especial_w < hr_prescricao_w) then
          update  prescr_material
          set    hr_dose_especial  = hr_prescricao_w
          where  nr_sequencia    = nr_sequencia_w
          and    nr_prescricao    = nr_prescricao_p;
        end if;
      end if;
    end loop;
  end if;

  if (ie_lib_individual_w = 'N') and (Wheb_assist_pck.obterParametroFuncao(924,116) = 'S') and (Wheb_assist_pck.obterParametroFuncao(924,768) = 'N') then
    begin
    CALL Gerar_prescr_hor(nr_prescricao_p,cd_perfil_p,nm_usuario_p); /*Dieta, recomentacoes*/
    CALL gerar_prescr_proc_hor(nr_prescricao_p, cd_perfil_p, nm_usuario_p); /* procedimentos */
    CALL Gerar_prescr_mat_hor(nr_prescricao_p,NULL,cd_perfil_p,nm_usuario_p,null,'N',null); /*Medicamentos, materiais*/
    CALL Gerar_prescr_gas_hor(nr_prescricao_p, nm_usuario_p, 'S');

    if (ie_checar_automatico_w = 'S' OR obter_parametro_funcao_padrao(cd_funcao_w, nr_seq_param_w, nm_usuario_p) = 'S') then
      CALL adep_checagem_automatica(nr_prescricao_p, nm_usuario_p, cd_perfil_p);
    end if;

    exception when others then
      ds_erro_w  := sqlerrm(SQLSTATE);
    end;
  end if;

  begin
  select  max(nr_sequencia),
      coalesce(max(hr_prim_horario), to_char(dt_inicio_prescr_w, 'hh24:mi'))
  into STRICT  nr_seq_nut_w,
      hr_inicio_nut_w
  from  nut_paciente
  where  nr_prescricao  = nr_prescricao_p;

  if (nr_seq_nut_w > 0) then

    dt_inicio_nut_w  := ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_inicio_prescr_w, hr_inicio_nut_w);


    begin
    sql_w := 'BEGIN obter_dt_ini_nut_prescricao_md(:1, :2, :3); END;';

    EXECUTE sql_w USING IN OUT dt_inicio_nut_w,
                                  IN dt_inicio_prescr_w,
                                  IN dt_validade_prescr_w;
    exception
      when others then
        dt_inicio_nut_w    := null;

    end;
        sql_w := null;

    CALL Gerar_nut_paciente_hor(nr_prescricao_p, nr_atendimento_p, nr_seq_nut_w, dt_inicio_nut_w, 'N', cd_estabelecimento_w, cd_perfil_p, nm_usuario_p);
  end if;

	select	max(a.nr_sequencia),
			coalesce(max(a.hr_prim_horario), to_char(dt_inicio_prescr_w, 'hh24:mi')),
			coalesce(max(a.ie_gerar_horario), 'S')
	into STRICT	nr_seq_nut_prot_w,
			hr_inicio_nut_w,
			ie_gerar_horario_npt_w
	from	nut_pac a
	where	nr_prescricao  = nr_prescricao_p;

  if (nr_seq_nut_prot_w > 0 and ie_gerar_horario_npt_w = 'S') then

    if (ie_gerar_npt_fases_w = 'N') then

      dt_inicio_nut_w  := ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_inicio_prescr_w, hr_inicio_nut_w);

     begin
        sql_w := 'BEGIN obter_dt_ini_nut_prescricao_md(:1, :2, :3); END;';

        EXECUTE sql_w USING IN OUT dt_inicio_nut_w,
                                      IN dt_inicio_prescr_w,
                                      IN dt_validade_prescr_w;
      exception
        when others then
          dt_inicio_nut_w    := null;

      end;
          sql_w := null;
      CALL Gerar_nut_paciente_hor_prot(nr_prescricao_p, nr_atendimento_p, nr_seq_nut_prot_w, dt_inicio_nut_w, 'N', cd_estabelecimento_w, cd_perfil_p, nm_usuario_p);
    else
      ds_horarios_npt_w  := substr(replace(padroniza_horario_prescr(calcula_hor_etapas_npt(nr_prescricao_p, ie_gerar_npt_fases_w),null),'A',''),1,4000);

      if (substr(Obter_Se_horario_hoje(dt_prescricao_w,dt_prim_hor_prescr_w,hr_inicio_nut_w),1,1) = 'N') then
        ds_horarios_padr_npt_w  := padroniza_horario_prescr(ds_horarios_npt_w, '01/01/2000 23:59:59');
      else
        ds_horarios_padr_npt_w  := padroniza_horario_prescr(ds_horarios_npt_w, to_char(coalesce(dt_prim_hor_prescr_w,dt_prescricao_w),'dd/mm/yyyy hh24:mi:ss'));
      end if;

      if (ds_horarios_padr_npt_w IS NOT NULL AND ds_horarios_padr_npt_w::text <> '') then
        while  (ds_horarios_padr_npt_w IS NOT NULL AND ds_horarios_padr_npt_w::text <> '') loop
          k  := position(' ' in ds_horarios_padr_npt_w);

          if (k > 1) and ((substr(ds_horarios_padr_npt_w, 1, k -1) IS NOT NULL AND (substr(ds_horarios_padr_npt_w, 1, k -1))::text <> '')) then
            ds_hora_npt_w    := substr(ds_horarios_padr_npt_w, 1, k-1);
            ds_hora_npt_w    := replace(ds_hora_npt_w, ' ','');
            ds_horarios_padr_npt_w  := substr(ds_horarios_padr_npt_w, k + 1, 2000);
          elsif (ds_horarios_padr_npt_w IS NOT NULL AND ds_horarios_padr_npt_w::text <> '') then
            ds_hora_npt_w     := replace(ds_horarios_padr_npt_w,' ','');
            ds_horarios_padr_npt_w  := '';
          end if;

          if (position('A' in ds_hora_npt_w) > 0) and (qt_dia_adic_w = 0) then
            qt_dia_adic_w  := 1;
          elsif (position('AA' in ds_hora_npt_w) > 0) then
            qt_dia_adic_w  := qt_dia_adic_w + 1;
          end if;

          ds_hora_npt_w  := replace(ds_hora_npt_w,'A','');
          ds_hora_npt_w  := replace(ds_hora_npt_w,'A','');

          dt_prescricao_www := coalesce(dt_inicio_prescr_w,dt_prescricao_w);

      begin

          sql_w := 'CALL obter_dt_horario_prescricao_md(:1, :2, :3) INTO :dt_horario_w';
          EXECUTE sql_w USING IN dt_prescricao_www,
                                        IN qt_dia_adic_w,
                                        IN ds_hora_npt_w,
                                        OUT dt_horario_w;

      exception
        when others then
          dt_horario_w := null;
      end;

          CALL Gerar_nut_paciente_hor_prot(nr_prescricao_p, nr_atendimento_p, nr_seq_nut_prot_w, dt_horario_w, 'N', cd_estabelecimento_w, cd_perfil_p, nm_usuario_p);
        end loop;
      end if;
    end if;
  end if;

  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
  end;

  if (Wheb_assist_pck.obterParametroFuncao(924,1084) = 'S') then
    begin
    CALL gerar_solic_compra_prescr(nr_prescricao_p,wheb_usuario_pck.get_cd_estabelecimento,nm_usuario_p);
    exception when others then
      ds_erro_w  := sqlerrm(SQLSTATE);
    end;
  end if;

  if (ie_hemodialise_w = 'E') or
    ((Wheb_assist_pck.obterParametroFuncao(924,102) = 'S') and (ie_hemodialise_w = 'S')) then

    select   max(nr_sequencia)
    into STRICT  nr_seq_dialise_w
    from   hd_dialise
    where  cd_pessoa_fisica = cd_pessoa_fisica_w
    and    coalesce(coalesce(dt_fim_dialise,dt_cancelamento)::text, '') = '';

    if (nr_seq_dialise_w IS NOT NULL AND nr_seq_dialise_w::text <> '') then
      begin
      CALL Gerar_prescr_mat_hor_dialise(nr_prescricao_p,nr_seq_dialise_w,cd_perfil_p,clock_timestamp(),nm_usuario_p);
      exception when others then
        ds_erro_w  := sqlerrm(SQLSTATE);
      end;
    end if;
  end if;

  begin
  CALL Gerar_Lanc_Auto_Prescricao(nr_prescricao_p, nm_usuario_p);
  CALL Gerar_Agenda_Prescricao(nr_prescricao_p, nm_usuario_p);
  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
  end;

  if (Wheb_assist_pck.obterParametroFuncao(924,153) = 'LP') and (coalesce(nr_doc_conv_w::text, '') = '') then
    begin
    select  count(*)
    into STRICT  qt_proced_w
    from  prescr_procedimento where    nr_prescricao  = nr_prescricao_p LIMIT 1;

    if (qt_proced_w > 0) then
      begin
      VarRegraGuia_w  := Wheb_assist_pck.obterParametroFuncao(924,164);

      if (varregraguia_w = 'A') then
        begin
        select  max(nr_doc_convenio)
        into STRICT  nr_doc_convenio_w
        from  atend_categoria_convenio
        where  nr_atendimento  = nr_atendimento_p
        and    cd_convenio  = cd_convenio_w;

        if (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '') then
          update  prescr_medica
          set    nr_doc_conv  = nr_doc_convenio_w
          where  nr_prescricao  = nr_prescricao_p;
        end if;
        end;
      end if;

      IF (VarRegraGuia_w = 'R') OR (coalesce(nr_doc_convenio_w::text, '') = '') then
        begin

        begin

        select  max(cd_categoria)
        into STRICT  cd_categoria_w
        from  atend_categoria_convenio
        where  nr_seq_interno = obter_atecaco_atendimento(nr_atendimento_p)
        and  cd_convenio = cd_convenio_w;

        nr_doc_convenio_w := obter_guia_conv_atend(nr_atendimento_p, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, cd_estabelecimento_w, ie_tipo_guia_w, nr_doc_convenio_w);
        exception when others then
          ds_erro_w  := sqlerrm(SQLSTATE);
        end;

        update  prescr_medica
        set    nr_doc_conv  = nr_doc_convenio_w
        where  nr_prescricao  = nr_prescricao_p;
        end;
      end if;
      end;
    end if;
    end;
  end if;

  open C20;
  loop
  fetch C20 into
    nr_seq_gas_w,
    dt_inicio_gas_w,
    dt_fim_gas_w,
    nr_seq_gasoterapia_w;
  EXIT WHEN NOT FOUND; /* apply on C20 */
    begin
    begin
    CALL Gerar_Med_Mat_Assoc_gas(nr_prescricao_p, nr_seq_gasoterapia_w, nm_usuario_p, 'S',null);
    CALL Gerar_cobranca_gasoterapia(nr_seq_gas_w,nr_prescricao_p, nr_seq_gasoterapia_w, dt_inicio_gas_w, dt_fim_gas_w, nm_usuario_p,'P');
    exception when others then
      null;
    end;
    end;
  end loop;
  close C20;

  begin
  CALL Gerar_laudo_sus_lib_prescr(nr_prescricao_p, nm_usuario_p);
  CALL Atualizar_MatMed_Assoc(nr_prescricao_p, nm_usuario_p);
  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
  end;
  end;
END IF;

if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31,'Gerar_prescr_gas_hor '||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

ie_lib_individual_w      := coalesce(ie_lib_individual_w,Wheb_assist_pck.obterParametroFuncao(924,530));


CALL gravar_log_tasy(10007,
  substr('cpoe_gerar_prescricao_rep line 470 LOG:' || substr(to_char(sqlerrm),1,2000)
                 || '//nr_prescricao_p : '       || nr_prescricao_p
                 || ' nr_atendimento_p: '   || nr_atendimento_p
                 || ' ie_tipo_pessoa_p: ' || ie_tipo_pessoa_p
                 || ' ie_gera_hor_copia_cpoe_p: ' || ie_gera_hor_copia_cpoe_p
                 || ' ie_momento_lote_w: ' || ie_momento_lote_w
                 || ' ie_hemodialise_w: ' || ie_hemodialise_w
                 || ' 7010, 127: ' || obter_param_usuario_padrao(7010, 127, cd_perfil_p, nm_usuario_p, 0),1,2000),nm_usuario_p);

if (ie_lib_individual_w = 'S') and (coalesce(ie_gera_hor_copia_cpoe_p,'S') = 'S') then

  -- Verificar se utiliza regra de geracao de lote definida por item
  if (Wheb_assist_pck.obterParametroFuncao(924,768) = 'S') then
    CALL liberar_prescricao_item(nr_prescricao_p,cd_setor_prescr_w, cd_perfil_p, nm_usuario_p);
    --Gerar_prescr_gas_hor(nr_prescricao_p, nm_usuario_p, 'S');
  select  count(*)
  into STRICT  qt_prescr_dieta_hor_w
  from   prescr_dieta_hor
  where nr_prescricao = nr_prescricao_p;

  if ( qt_prescr_dieta_hor_w > 0 ) then
    ie_gerou_dieta_w := true;
  end if;
  else
    select  coalesce(MAX('S'),'N')
    into STRICT  ie_lib_medico_w
    from  prescr_medica where    (dt_liberacao_medico IS NOT NULL AND dt_liberacao_medico::text <> '')
    and    nr_prescricao = nr_prescricao_p LIMIT 1;

    select  coalesce(max('S'),'N')
    into STRICT  ie_lib_enfermagem_w
    from  prescr_medica where    (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
    and    nr_prescricao = nr_prescricao_p LIMIT 1;

    select  coalesce(max('S'),'N')
    into STRICT  ie_lib_farmacia_w
    from  prescr_medica
    where  (dt_liberacao_farmacia IS NOT NULL AND dt_liberacao_farmacia::text <> '')
    and    nr_prescricao = nr_prescricao_p;

    select  coalesce(max(ie_lib_farm),'N')
    into STRICT  ie_lib_farm_w
    from  prescr_medica where    nr_prescricao  = nr_prescricao_p LIMIT 1;

    select  count(*)
    into STRICT  qt_dieta_w
    from  dieta b,
        prescr_dieta a,
        prescr_medica k where    b.ie_situacao = 'A'
    and    b.cd_dieta = a.cd_dieta
    and    k.nr_prescricao = nr_prescricao_p
    and    k.nr_prescricao  = a.nr_prescricao
    and    coalesce(a.ie_suspenso,'N') <> 'S'
    and    coalesce(k.dt_suspensao::text, '') = '' LIMIT 1;

    begin
        ds_machine_name_w := substr(wheb_usuario_pck.get_machine,1,255);
    exception
    when others then
        ds_machine_name_w := '';
    end;

    CALL gravar_log_tasy(10007,
      substr('cpoe_gerar_prescricao_rep line 470 LOG:' || substr(to_char(sqlerrm),1,2000)
                     || '//nr_prescricao_p : '       || nr_prescricao_p
                     || ' nr_atendimento_p: '   || nr_atendimento_p
                     || ' machine_name: ' || ds_machine_name_w
                     || ' ie_tipo_pessoa_p: ' || ie_tipo_pessoa_p
                     || ' ie_gera_hor_copia_cpoe_p: ' || ie_gera_hor_copia_cpoe_p
                     || ' ie_momento_lote_w: ' || ie_momento_lote_w
                     || ' ie_hemodialise_w: ' || ie_hemodialise_w
                     || ' ie_lib_enfermagem_w: ' || ie_lib_enfermagem_w
                     || ' ie_lib_farm_w: ' || ie_lib_farm_w
                     || ' ie_checar_automatico_w: ' || ie_checar_automatico_w
                     || ' ie_lib_farmacia_w: ' || ie_lib_farmacia_w
                     || ' ie_lib_medico_w: ' || ie_lib_medico_w
                     || ' qt_dieta_w: ' || qt_dieta_w
                     || ' 7010, 127: ' || obter_param_usuario_padrao(7010, 127, cd_perfil_p, nm_usuario_p, 0)
                     || ' ie_agora_medico_w: ' || ie_agora_medico_w,1,2000),nm_usuario_p);

    begin
    --Gerar_prescr_gas_hor(nr_prescricao_p, nm_usuario_p, 'S');
    if (ie_lib_enfermagem_w = 'S') and
      ((ie_momento_lote_w = 'E') or (coalesce(ie_lib_farm_w,'N') = 'N') or ((ie_hemodialise_w in ('E','S')) and (obter_param_usuario_padrao(7010, 127, cd_perfil_p, nm_usuario_p, 0) = 'N'))) then

      CALL Gerar_prescr_gas_hor(nr_prescricao_p, nm_usuario_p, 'S');
      CALL Gerar_prescr_mat_sem_dt_lib(nr_prescricao_p,null,cd_perfil_p, 'S' ,nm_usuario_p,null,null,0);
      if (ie_checar_automatico_w = 'S' OR obter_parametro_funcao_padrao(cd_funcao_w, nr_seq_param_w, nm_usuario_p) = 'S') then
        CALL adep_checagem_automatica(nr_prescricao_p, nm_usuario_p, cd_perfil_p);
      end if;
      CALL gerar_prescr_proc_sem_dt_lib(nr_prescricao_p, NULL,cd_perfil_p, 'S' ,nm_usuario_p);
      CALL Gerar_prescr_hor_sem_lib(nr_prescricao_p,null,cd_perfil_p, 'S' ,nm_usuario_p);
      if (qt_dieta_w > 0) then
        CALL gerar_prescr_dieta_hor_sem_lib(nr_prescricao_p,null, cd_perfil_p, 'S', null,'N',nm_usuario_p);
  ie_gerou_dieta_w  := true;
      end if;
    elsif (ie_lib_farmacia_w = 'S') and (ie_momento_lote_w = 'F') then
      CALL Gerar_prescr_gas_hor(nr_prescricao_p, nm_usuario_p, 'S');
      CALL Gerar_prescr_mat_sem_dt_lib(nr_prescricao_p,null,cd_perfil_p, 'S' ,nm_usuario_p,null, null, 0);
      if (ie_checar_automatico_w = 'S' OR obter_parametro_funcao_padrao(cd_funcao_w, nr_seq_param_w, nm_usuario_p) = 'S') then
        CALL adep_checagem_automatica(nr_prescricao_p, nm_usuario_p, cd_perfil_p);
      end if;
      CALL gerar_prescr_proc_sem_dt_lib(nr_prescricao_p,NULL,cd_perfil_p, 'S' ,nm_usuario_p);
      CALL Gerar_prescr_hor_sem_lib(nr_prescricao_p,null,cd_perfil_p, 'S' ,nm_usuario_p);
      if (qt_dieta_w > 0) then
        CALL gerar_prescr_dieta_hor_sem_lib(nr_prescricao_p,null, cd_perfil_p, 'S',null, 'N',nm_usuario_p);
  ie_gerou_dieta_w  := true;
      end if;
    elsif (ie_lib_medico_w   = 'S') and (ie_momento_lote_w   = 'M') and (ie_lib_farmacia_w  = 'N') then

      CALL Gerar_prescr_gas_hor(nr_prescricao_p, nm_usuario_p, 'S');
      CALL Gerar_prescr_mat_sem_dt_lib(nr_prescricao_p,null,cd_perfil_p, 'S' ,nm_usuario_p,null,null,0);
      if (ie_checar_automatico_w = 'S' OR obter_parametro_funcao_padrao(cd_funcao_w, nr_seq_param_w, nm_usuario_p) = 'S') then
        CALL adep_checagem_automatica(nr_prescricao_p, nm_usuario_p, cd_perfil_p);
      end if;
      CALL gerar_prescr_proc_sem_dt_lib(nr_prescricao_p,NULL,cd_perfil_p, 'S' ,nm_usuario_p);
      CALL Gerar_prescr_hor_sem_lib(nr_prescricao_p,null,cd_perfil_p, 'S' ,nm_usuario_p);
      if (qt_dieta_w > 0) then
        CALL gerar_prescr_dieta_hor_sem_lib(nr_prescricao_p,null, cd_perfil_p, 'S',null, 'N',nm_usuario_p);
  ie_gerou_dieta_w  := true;
      end if;
    elsif (ie_lib_medico_w  = 'S') and (ie_lib_enfermagem_w  = 'N') and (ie_lib_farmacia_w  = 'N') and (coalesce(ie_gera_hor_copia_cpoe_p,'S') = 'S') then

      CALL Gerar_prescr_gas_hor(nr_prescricao_p, nm_usuario_p, 'N');
      CALL Gerar_prescr_mat_sem_dt_lib(nr_prescricao_p,null,cd_perfil_p, 'N' ,nm_usuario_p,null, null, qt_minutos_agora_w);
      if (ie_checar_automatico_w = 'S' OR obter_parametro_funcao_padrao(cd_funcao_w, nr_seq_param_w, nm_usuario_p) = 'S') then
        CALL adep_checagem_automatica(nr_prescricao_p, nm_usuario_p, cd_perfil_p);
      end if;
      CALL gerar_prescr_proc_sem_dt_lib(nr_prescricao_p,null,cd_perfil_p, 'N' ,nm_usuario_p);
      CALL Gerar_prescr_hor_sem_lib(nr_prescricao_p,null,cd_perfil_p, 'N' ,nm_usuario_p);
      if (qt_dieta_w > 0) then
        CALL gerar_prescr_dieta_hor_sem_lib(nr_prescricao_p,null, cd_perfil_p, 'N',null, 'N',nm_usuario_p);
  ie_gerou_dieta_w  := true;
      end if;
    elsif (ie_lib_enfermagem_w  = 'S') and (ie_lib_farmacia_w  = 'N') and (ie_momento_lote_w  = 'F') and (coalesce(ie_gera_hor_copia_cpoe_p,'S') = 'S') then

      if (ie_agora_medico_w = 'S') and (ie_lib_medico_w = 'N') then
        qt_minutos_agora_w := 0;
      end if;

      CALL Gerar_prescr_gas_hor(nr_prescricao_p, nm_usuario_p, 'N');
      CALL Gerar_prescr_mat_sem_dt_lib(nr_prescricao_p,null,cd_perfil_p, 'N' ,nm_usuario_p,null, null, qt_minutos_agora_w);
      if (ie_checar_automatico_w = 'S' OR obter_parametro_funcao_padrao(cd_funcao_w, nr_seq_param_w, nm_usuario_p) = 'S') then
        CALL adep_checagem_automatica(nr_prescricao_p, nm_usuario_p, cd_perfil_p);
      end if;
      CALL gerar_prescr_proc_sem_dt_lib(nr_prescricao_p,null,cd_perfil_p, 'N' ,nm_usuario_p);
      CALL Gerar_prescr_hor_sem_lib(nr_prescricao_p,null,cd_perfil_p, 'N' ,nm_usuario_p);
      if (qt_dieta_w > 0) then
        CALL gerar_prescr_dieta_hor_sem_lib(nr_prescricao_p,null, cd_perfil_p, 'S',null, 'N', nm_usuario_p);
  ie_gerou_dieta_w  := true;
      end if;
    end if;

    select  coalesce(max('S'),'N')
    into STRICT  ie_possui_regra_w
    from  regra_gerar_hor_lib LIMIT 1;

    if (ie_possui_regra_w = 'S') then
      if (ie_lib_medico_w  = 'S') and (ie_lib_enfermagem_w  = 'N') then
        CALL gerar_presc_mat_lib_indiv(nr_prescricao_p, 'M', cd_perfil_p, nm_usuario_p, cd_estabelecimento_w);
      elsif (ie_lib_enfermagem_w  = 'S') and (ie_lib_farmacia_w  = 'N') then
        CALL gerar_presc_mat_lib_indiv(nr_prescricao_p, 'E', cd_perfil_p, nm_usuario_p, cd_estabelecimento_w);
      end if;
    end if;

    if  ((cd_funcao_origem_w = 2314) and (Wheb_assist_pck.obterParametroFuncao(924,854) = 'N')) then
      begin
        select  max(a.nr_sequencia)
        into STRICT  qt_jejum_w
        from  rep_jejum a,
          prescr_medica b
        where  a.nr_prescricao  = b.nr_prescricao
        and  b.nr_prescricao    = nr_prescricao_p;
      exception when others then
        qt_jejum_w := 0;
      end;

      if (coalesce(qt_jejum_w,0) > 0) then
        CALL REP_SUSPENDER_DIETA_VIGENTE(nr_atendimento_p, qt_jejum_w, nm_usuario_p);
      end if;
    end if;

    exception when others then
      ds_erro_w  := sqlerrm(SQLSTATE);
    end;

    if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
  end if;
end if;

if (coalesce(ie_emergencia_w,'N') = 'S') or (ie_cartao_emergencia_w = 'S') or (coalesce(ie_prescricao_anestesica_w,'N') = 'S') then

  select   count(nr_prescricao)
  into STRICT  qt_nao_checados_w
  from   prescr_mat_hor
  where  nr_prescricao  = nr_prescricao_p
  and    coalesce(dt_fim_horario::text, '') = ''
  and    coalesce(dt_suspensao::text, '') = '';

  if (coalesce(qt_nao_checados_w, 0) > 0) then
    CALL ADEP_CHECAGEM_AUTOM_MEDIC(nr_prescricao_p,nm_usuario_p);
  end if;
end if;

if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31, obter_desc_expressao(727918)/*'Liberar prescricao amostra'*/
||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

begin
IF (ie_gerar_sequencia_lab_w = 'S') then
  CALL Gerar_Prescr_Proc_Seq_LAB(nr_prescricao_p, nm_usuario_p, 'P'); --Bruna - OS 72237 - Coloquei no final apos gerar os horarios
  if ((ie_gerar_sequencia_w <> 'C') or (ie_gera_amostra_coleta_w <> 'S')) then
    CALL gerar_prescr_proc_mat_item(nr_prescricao_p, nm_usuario_p, cd_estabelecimento_w); -- Bruna 30/04/2008
  end if;

  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;


  /* Verifica regra de controle de exame da prescricao - lab_gerar_nr_controle_exame - OS427567 */

  select   count(*)
  into STRICT  qt_regra_integracao_w
  from  regra_controle_prescr where    cd_estabelecimento = cd_estabelecimento_w
  and    coalesce(ie_integracao,'N') = 'S' LIMIT 1;

  if (qt_regra_integracao_w > 0) then
    /* Verifica regra de controle de exame da prescricao - lab_gerar_nr_controle_exame -  para o equipamento 'LSFRANCO' - OS 458802 */

    select   count(*)
    into STRICT  qt_regra_integracao_w
    from  regra_controle_prescr where    cd_estabelecimento = cd_estabelecimento_w
    and    nr_seq_interf_equip = 2297
    and    coalesce(ie_integracao,'N') = 'S' LIMIT 1;

    if (qt_regra_integracao_w > 0) then
      ie_gerou_nr_controle_w := 'S';
      ie_controle_duplicado_w := lab_gerar_nr_controle_exame(nr_prescricao_p, cd_estabelecimento_w, 2, ie_controle_duplicado_w);
    else
      ie_gerou_nr_controle_w := 'S';
      ie_controle_duplicado_w := lab_gerar_nr_controle_exame(nr_prescricao_p, cd_estabelecimento_w, 1, ie_controle_duplicado_w);
      if (ie_controle_duplicado_w = 'S') then
        ie_controle_duplicado_w := lab_gerar_nr_controle_exame(nr_prescricao_p, cd_estabelecimento_w, 1, ie_controle_duplicado_w);
      end if;
    end if;
  end if;

end if;

exception
  when others then
    CALL gravar_log_lab(31, substr(obter_desc_expressao(727608)/*'Excecao ao liberar amostra '*/
||sqlerrm,1,2000),nm_usuario_p,nr_prescricao_p);
    if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end;

if (ie_gera_log_amostra_w = 'S') then
  CALL gravar_log_lab(31, obter_desc_expressao(727918)/*'Liberar prescricao amostra'*/
||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;


CALL gravar_processo_longo(obter_desc_expressao(726312),'LIBERAR_PRESCRICAO',13);

CALL gravar_log_tasy(10011, 'LIBERAR_PRESCRICAO ln ' || $$plsql_line
          || ' - nr_prescricao_p: ' || nr_prescricao_p
                    || ' dt_liberacao_medico_ww: ' || dt_liberacao_medico_ww
          || ' dt_liberacao_w: ' || dt_liberacao_w
          || ' ds_erro_p: ' || ds_erro_p, nm_usuario_p);
if (coalesce(dt_liberacao_medico_ww::text, '') = '') and (coalesce(dt_liberacao_w::text, '') = '') and (coalesce(ds_erro_p::text, '') = '') then
  begin

  -- Francisco - 27/10/2008 - OS 114247 - Troquei do cursor para um nova procedure
  if (ie_lib_presc_autor_medico_w = 'S') then
    CALL gerar_autor_item_prescr(nr_prescricao_p,nm_usuario_p);
    CALL Atualizar_autoriz_proced(nr_prescricao_p,nr_atendimento_p);
  end if;

  CALL Gerar_adep_controle(nr_atendimento_p, nm_usuario_p);
  CALL Executar_proced_lib_prescr(nr_prescricao_p, nm_usuario_p);
  exception when others then
    ds_erro_w  := sqlerrm(SQLSTATE);
  end;

end if;

ie_reserva_lib_medico_w    := Wheb_assist_pck.obterParametroFuncao(924,444);
if  (ie_reserva_lib_medico_w = 'N' AND ie_lib_w = 1) or
  (ie_reserva_lib_medico_w = 'S' AND dt_liberacao_medico_w IS NOT NULL AND dt_liberacao_medico_w::text <> '') and (coalesce(dt_liberacao_w::text, '') = '') then
  select  coalesce(max(ie_gera_reserva_prescr),'N')
  into STRICT  ie_gera_reserva_prescr_w
  from  san_parametro
  where  cd_estabelecimento  = cd_estabelecimento_w;

  if (ie_gera_reserva_prescr_w <> 'N') then
    select  coalesce(max('N'), 'S')
    into STRICT  ie_gera_reserva_prescr_ww
    from   san_reserva where    nr_prescricao = nr_prescricao_p LIMIT 1;

    if (ie_gera_reserva_prescr_ww = 'S') then
      CALL San_gerar_reserva_prescr(nr_prescricao_p, ie_gera_reserva_prescr_w, nm_usuario_p);
    end if;
  end if;
end if;

if ((dt_liberacao_medico_w IS NOT NULL AND dt_liberacao_medico_w::text <> '') or (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '')) then
        CALL gerar_san_sangria_terapeutica(nr_prescricao_p, nm_usuario_p);
end if;

if (ie_lib_w = 1) then
--INICIO - Gerar agendamento na Gestao de Home Care
  begin
  select  count(*)
  into STRICT  qt_paciente_homecare_w
  from  paciente_home_care where    cd_pessoa_fisica = cd_pessoa_fisica_w
  and    coalesce(dt_final::text, '') = '' LIMIT 1;

  if (qt_paciente_homecare_w <> 0) then
    CALL hc_gerar_agenda_paciente_presc( nr_prescricao_p, nm_usuario_p);
  end if;
  exception when others then
    ds_erro_w  := substr(sqlerrm(SQLSTATE),1,1500);
    CALL gravar_log_lab(100,obter_desc_expressao(727626)/*'Erro ao gerar home care: '*/
||ds_erro_w,'EXCECAO',nr_prescricao_p);
  end;
--FIM - Gerar agendamento na Gestao de Home Care
end if;

if (ie_lib_w = 1) and (coalesce(dt_liberacao_w::text, '') = '') then
  begin

  select  coalesce(MAX(ie_gerar_result_prescr),'N')
  into STRICT  ie_gerar_result_prescr_w
  from  lab_parametro
  where  cd_estabelecimento  = cd_estabelecimento_w;

  if (ie_gerar_result_prescr_w = 'S') then
    CALL Gera_Exame_Result_Lab(nr_prescricao_p, null, 'N', 'N', 'N', nm_usuario_p);
  end if;

  if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
    ds_prescricao_w  := Obter_qt_prescr_Atend(nr_atendimento_p);
  end if;

  if (dt_reavaliacao_medica_w IS NOT NULL AND dt_reavaliacao_medica_w::text <> '') then
    begin
    update  atendimento_paciente
    set    dt_reavaliacao_medica  = NULL
    where  nr_atendimento  = nr_atendimento_p;
    end;
  end if;

  /*Atualizar o status do atendimento no PA */

  if (position(obter_desc_expressao(293040) in ds_prescricao_w) > 0) or (position(obter_desc_expressao(726412) in ds_prescricao_w) > 0) then

    select   coalesce(max(ie_status_pa),'NA')
    into STRICT  ie_status_pa_w
    from  atendimento_paciente
    where  nr_atendimento  = nr_atendimento_p;

    if (ie_status_pa_w not in ('AL')) then
      update  atendimento_paciente
      set    ie_status_pa = 'PL'
      where  nr_atendimento  = nr_atendimento_p;

      CALL gravar_atend_status_pa(nr_atendimento_p,'PL',nm_usuario_p);
    end if;
  end if;
  end;
elsif (dt_liberacao_medico_w IS NOT NULL AND dt_liberacao_medico_w::text <> '') then
  if (Wheb_assist_pck.obterParametroFuncao(924,223) = 'S') and (Wheb_assist_pck.obterParametroFuncao(924,116) = 'S') then
    CALL gerar_prescr_proc_hor(nr_prescricao_p, cd_perfil_p, nm_usuario_p); /* procedimentos */
  end if;
end if;


select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
into STRICT  ie_existe_reg_amostra_w
from   prescr_proc_material
where   nr_prescricao = nr_prescricao_p;

if (ie_existe_reg_amostra_w = 'N') then
  if (ie_gera_log_amostra_w = 'S') then
    CALL gravar_log_lab(31,'1'||obter_desc_expressao(727918) /*'Liberar prescricao amostra'*/||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w, obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
    if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
  end if;

  IF (ie_gerar_sequencia_lab_w = 'S') then
    CALL Gerar_Prescr_Proc_Seq_LAB(nr_prescricao_p, nm_usuario_p, 'P'); --Bruna - OS 72237 - Coloquei no final apos gerar os horarios
    if ((ie_gerar_sequencia_w <> 'C') or (ie_gera_amostra_coleta_w <> 'S')) then
      CALL gerar_prescr_proc_mat_item(nr_prescricao_p, nm_usuario_p, cd_estabelecimento_w); -- Bruna 30/04/2008
    end if;

    if (ie_gera_log_amostra_w = 'S') then
      CALL gravar_log_lab(31, '1.5'|| obter_desc_expressao(727918) /*'Liberar prescricao amostra'*/||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
      if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
    end if;
    if (ie_gerou_nr_controle_w = 'N') then
      /* Verifica regra de controle de exame da prescricao - lab_gerar_nr_controle_exame - OS427567 */

      select   count(*)
      into STRICT  qt_regra_integracao_w
      from  regra_controle_prescr where    cd_estabelecimento = cd_estabelecimento_w
      and    coalesce(ie_integracao,'N') = 'S' LIMIT 1;

      if (qt_regra_integracao_w > 0) then
        /* Verifica regra de controle de exame da prescricao - lab_gerar_nr_controle_exame -  para o equipamento 'LSFRANCO' - OS 458802 */

        select   count(*)
        into STRICT  qt_regra_integracao_w
        from  regra_controle_prescr where    cd_estabelecimento = cd_estabelecimento_w
        and    nr_seq_interf_equip = 2297
        and    coalesce(ie_integracao,'N') = 'S' LIMIT 1;

        if (qt_regra_integracao_w > 0) then
          ie_controle_duplicado_w := lab_gerar_nr_controle_exame(nr_prescricao_p, cd_estabelecimento_w, 2, ie_controle_duplicado_w);
        else
          ie_controle_duplicado_w := lab_gerar_nr_controle_exame(nr_prescricao_p, cd_estabelecimento_w, 1, ie_controle_duplicado_w);
          if (ie_controle_duplicado_w = 'S') then
            ie_controle_duplicado_w := lab_gerar_nr_controle_exame(nr_prescricao_p, cd_estabelecimento_w, 1, ie_controle_duplicado_w);
          end if;
        end if;
      end if;
    end if;
  end if;
  if (ie_gera_log_amostra_w = 'S') then
    CALL gravar_log_lab(31,'2'||obter_desc_expressao(727918) /*'Liberar prescricao amostra'*/||ie_gerar_sequencia_lab_w||' '||ie_gerar_sequencia_w||' '||ie_gera_amostra_coleta_w||' '||cd_estabelecimento_w,obter_desc_expressao(727604)/*'Log liberacao'*/,nr_prescricao_p);
    if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
  end if;
end if;


if (ie_prescricao_p = 'N') and (coalesce(nr_atendimento_p,0) > 0) and (cd_funcao_origem_w <> 2314) then
  Var_916_param_190_w := obter_valor_param_usuario(916, 190, cd_perfil_p, nm_usuario_p, cd_estabelecimento_w);
  if (Var_916_param_190_w <> 'N') then

    if (Var_916_param_190_w = 'S') then
      dt_atual_w := clock_timestamp();
    else
      dt_atual_w := dt_prescricao_w;
    end if;

    open c06;
    loop
    fetch c06 into cd_setor_atendimento_w;
    EXIT WHEN NOT FOUND; /* apply on c06 */


      CALL gerar_passagem_setor_atend(nr_atendimento_p, cd_setor_atendimento_w, dt_atual_w, 'N', nm_usuario_p);

    end loop;
    close c06;
  end if;
end if;

if (ie_liberado_w) then
  begin
  CALL gerar_estabilidade_solucoes(nr_prescricao_p);
  exception when others then
    null;
  end;
end if;

if (Wheb_assist_pck.obterParametroFuncao(924,992) = 'S') then
  ie_altera_dt_proxima_dose_w := Wheb_assist_pck.obterParametroFuncao(924,694);

  ie_info_rastre_prescr_w := obter_se_info_rastre_prescr('DP', nm_usuario_p, cd_perfil_p, cd_estabelecimento_w);

  select  coalesce(max('S'), 'N')
  into STRICT  ie_possui_medic_sem_apraz_w
  from  prescr_material where    coalesce(ie_sem_aprazamento, 'N') = 'S'
  and    nr_prescricao = nr_prescricao_p LIMIT 1;

  if (ie_info_rastre_prescr_w = 'S') then
    ds_alteracao_rastre_w := substr('Gerar log Rastreabilidade Alteracoes / dt_proxima_dose = ' || chr(13)
                      || ' 01 -  linha: '
                      || ' nr_prescricao_p: '          || nr_prescricao_p
                      || ' ie_possui_medic_sem_apraz_w: '    || ie_possui_medic_sem_apraz_w
                      || ' dt_ambas_liberacoes_w: '        || to_char(dt_ambas_liberacoes_w,'dd/mm/yyyy hh24:mi:ss')
                      || ' ie_tipo_pessoa_p: '        || ie_tipo_pessoa_p
                      || ' ie_lib_enfermagem_w: '        || ie_lib_enfermagem_w
                      || ' nr_horas_validade_w: '        || nr_horas_validade_w
                      ,1,1800);

    CALL gerar_log_prescr_mat(nr_prescricao_p, nr_sequencia_w, ie_agrup_w, null, null, ds_alteracao_rastre_w, nm_usuario_p, 'N');
  end if;

  if (ie_possui_medic_sem_apraz_w = 'S') or (coalesce(dt_ambas_liberacoes_w::text, '') = '') or (ie_lib_enfermagem_w = 'S') then

    open c07;
    loop
    fetch c07 into
      nr_sequencia_w,
      qt_hora_intervalo_w,
      dt_proxima_dose_w,
      nr_sequencia_anterior_w,
      nr_prescricao_original_w,
      cd_material_w,
      cd_intervalo_w,
      hr_prim_horario_w,
      nr_seq_mat_cpoe_w,
      dt_inicio_medic_w;
    EXIT WHEN NOT FOUND; /* apply on c07 */
    begin
      dt_proxima_dose_orig_w := dt_proxima_dose_w;
      dt_horario_w := null;

      hr_prim_horario_w := coalesce(hr_prim_horario_w, to_char(dt_inicio_prescr_w, 'hh24:mi'));

      select  max(a.ie_operacao)
      into STRICT    ie_operacao_interv_w
      from    intervalo_prescricao a
      where   a.cd_intervalo = cd_intervalo_w;

      if ((nr_seq_mat_cpoe_w IS NOT NULL AND nr_seq_mat_cpoe_w::text <> '') and ie_operacao_interv_w = 'D') then
        nr_horas_apos_copia_w := get_qt_hours_after_copy_cpoe(cd_perfil_p => cd_perfil_p,
                                                                nm_usuario_p => nm_usuario_p,
                                                                cd_estabelecimento_p => cd_estabelecimento_w);
        select  max(a.dt_prox_geracao) + nr_horas_apos_copia_w
        into STRICT    dt_prox_geracao_w
        from    cpoe_material a
        where   a.nr_sequencia = nr_seq_mat_cpoe_w;

        qt_hora_intervalo_w := coalesce(obter_tempo_entre_datas(dt_inicio_medic_w, dt_prox_geracao_w, 'T'), qt_hora_intervalo_w);
      end if;

      if (ie_info_rastre_prescr_w = 'S') then
        ds_alteracao_rastre_w := substr(ds_alteracao_rastre_w  || chr(13)
                  || ' 02 - linha: '
                  || ' nr_sequencia_w: '        || nr_sequencia_w
                  || ' qt_hora_intervalo_w: '      || qt_hora_intervalo_w
                  || ' dt_proxima_dose_w: '      || to_char(dt_proxima_dose_w,'dd/mm/yyyy hh24:mi:ss')
                  || ' nr_sequencia_anterior_w: '    || nr_sequencia_anterior_w
                  || ' nr_prescricao_original_w: '  || nr_prescricao_original_w
                  || ' cd_material_w: '        || cd_material_w
                  || ' cd_intervalo_w: '        || cd_intervalo_w
                  || ' hr_prim_horario_w: '      || hr_prim_horario_w
                  || ' dt_proxima_dose_orig_w: '    || to_char(dt_proxima_dose_orig_w,'dd/mm/yyyy hh24:mi:ss')
                  || ' dt_inicio_prescr_w: '      || to_char(dt_inicio_prescr_w,'dd/mm/yyyy hh24:mi:ss')
                  || ' nr_horas_validade_w '      || nr_horas_validade_w
                  ,1,1800);
      end if;

      if (nr_sequencia_anterior_w IS NOT NULL AND nr_sequencia_anterior_w::text <> '') then

        select  coalesce(max('S'),'N')
        into STRICT  ie_was_changed_w
        from  prescr_material a
        where  a.nr_prescricao = nr_prescricao_p
        and    a.nr_sequencia = nr_sequencia_w
        and    (a.nr_prescricao_original IS NOT NULL AND a.nr_prescricao_original::text <> '')
        and    coalesce(a.ie_suspenso, 'N') <> 'S'
        and    coalesce(a.ie_administrar,'S') = 'S'
        and exists (  SELECT  1
              from  prescr_material b
              where  b.nr_prescricao = a.nr_prescricao_original
              and    b.nr_sequencia = a.nr_sequencia_anterior
              and    b.hr_prim_horario <> a.hr_prim_horario);

        select  max(dt_proxima_dose),
            coalesce(max(ie_modificado),'N')
        into STRICT  dt_proxima_dose_w,
            ie_modificado_w
        from  prescr_material
        where  ((coalesce(hr_prim_horario, hr_prim_horario_w) = hr_prim_horario_w) or (mod(qt_hora_intervalo_w,24) > 0))
        and    ((cd_intervalo = cd_intervalo_w) or ((coalesce(ie_administrar,'S') = 'S') and (ie_modificado = 'S')))
        and    cd_material = cd_material_w
        and    nr_sequencia = nr_sequencia_anterior_w
        and    nr_prescricao = nr_prescricao_original_w;

        if (ie_info_rastre_prescr_w = 'S') then
          ds_alteracao_rastre_w := substr(ds_alteracao_rastre_w      || chr(13)
                          || ' 03 - linha: '
                          || ' ie_modificado_w: '      || ie_modificado_w
                          || ' dt_proxima_dose_w: '    || to_char(dt_proxima_dose_w,'dd/mm/yyyy hh24:mi:ss')
                          ,1,1800);
        end if;

        if ((ie_modificado_w = 'S' or ie_was_changed_w = 'S') AND dt_proxima_dose_w IS NOT NULL AND dt_proxima_dose_w::text <> '') or (coalesce(dt_proxima_dose_w::text, '') = '')  then

          select  max(dt_horario)
          into STRICT  dt_horario_w
          from  prescr_mat_hor
          where  nr_seq_material  = nr_sequencia_w
          and    coalesce(ie_horario_especial,'N') <> 'S'
          and    nr_prescricao = nr_prescricao_p;

          if (ie_modificado_w = 'S' or ie_was_changed_w = 'S') then
            dt_proxima_dose_w := dt_horario_w;
          elsif (coalesce(dt_proxima_dose_w::text, '') = '') then
            dt_proxima_dose_w := dt_proxima_dose_orig_w;
          end if;

          if (ie_info_rastre_prescr_w = 'S') then
            ds_alteracao_rastre_w := substr(ds_alteracao_rastre_w    || chr(13)
                          || ' 04 - linha: '
                          || ' ie_modificado_w: '      || ie_modificado_w
                          || ' dt_proxima_dose_w: '    || to_char(dt_proxima_dose_w,'dd/mm/yyyy hh24:mi:ss')
                          || ' dt_horario_w: '      || to_char(dt_horario_w,'dd/mm/yyyy hh24:mi:ss')
                          || ' dt_proxima_dose_orig_w: '  || to_char(dt_proxima_dose_orig_w,'dd/mm/yyyy hh24:mi:ss')
                          ,1,1800);
          end if;
        else

          if (ie_info_rastre_prescr_w = 'S') then
            ds_alteracao_rastre_w := substr(ds_alteracao_rastre_w    || chr(13)
                            || ' 05 - linha: '
                            || ' ie_modificado_w: '    || ie_modificado_w
                            || ' dt_proxima_dose_w: '  || to_char(dt_proxima_dose_w,'dd/mm/yyyy hh24:mi:ss')
                            ,1,1800);
          end if;

          update  prescr_material
          set    dt_proxima_dose = dt_proxima_dose_w,
              dt_administrar = dt_proxima_dose_w
          where  nr_sequencia = nr_sequencia_w
          and    nr_prescricao = nr_prescricao_p;
        end if;
      else

        select  max(dt_horario)
        into STRICT  dt_horario_w
        from  prescr_mat_hor
        where  nr_seq_material  = nr_sequencia_w
        and    coalesce(ie_horario_especial,'N') <> 'S'
        and    nr_prescricao  = nr_prescricao_p;

        dt_proxima_dose_w := dt_horario_w;
      end if;

      select  max(ds_horarios),
          coalesce(max(ie_dose_espec_agora),'N'),
          max(ie_agrupador)
      into STRICT  ds_horarios_medic_w,
          ie_dose_espec_agora_w,
          ie_agrup_w
      from  prescr_material
      where  cd_material = cd_material_w
      and    nr_prescricao = nr_prescricao_p;



  begin
    sql_w := 'BEGIN obter_prox_data_dose_md(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19); END;';

    EXECUTE sql_w USING IN qt_hora_intervalo_w,
                                  IN OUT dt_proxima_dose_w,
                                  IN dt_inicio_prescr_w,
                                  IN dt_validade_prescr_w,
                                  OUT qt_dia_prim_hor_w,
                                  IN hr_prim_horario_w,
                                  IN dt_horario_w,
                                  IN ie_info_rastre_prescr_w,
                                  IN OUT ds_alteracao_rastre_w,
                                  IN ds_horarios_medic_w,
                                  IN ie_dose_espec_agora_w,
                                  IN nr_seq_kit_w,
                                  OUT ds_horarios_ww,
                                  IN ie_altera_dt_proxima_dose_w,
                                  OUT ie_update_um_w,
                                  OUT ie_update_dois_w,
                                  OUT ie_update_tres_w,
                                  OUT ie_update_quatro_w,
                                  OUT ie_update_cinco_w;
  exception
    when others then
      dt_proxima_dose_w    := null;
      qt_dia_prim_hor_w     := null;
      ds_alteracao_rastre_w     := null;
      ds_horarios_ww         := null;
      ie_update_um_w         := null;
      ie_update_dois_w       := null;
      ie_update_tres_w       := null;
      ie_update_quatro_w     := null;
      ie_update_cinco_w := null;
  end;
      sql_w := null;
                        if ie_update_um_w = 'S' then
                          update prescr_material
                             set dt_proxima_dose = dt_proxima_dose_w,
                                 ie_administrar   = NULL,
                                 qt_dia_prim_hor = qt_dia_prim_hor_w
                           where nr_sequencia = nr_sequencia_w
                             and nr_prescricao = nr_prescricao_p;
                        end if;

                        if ie_update_dois_w = 'S' then
                          update prescr_material
                             set hr_prim_horario = ds_horarios_ww,
                                 ds_horarios     = ds_horarios_ww,
                                 dt_proxima_dose = dt_proxima_dose_w,
                                 ie_administrar   = NULL,
                                 qt_dia_prim_hor = qt_dia_prim_hor_w
                           where nr_sequencia = nr_sequencia_w
                             and nr_prescricao = nr_prescricao_p;
                        end if;

                        if ie_update_tres_w = 'S' then
                          update prescr_material
                             set hr_prim_horario = ds_horarios_ww,
                                 dt_proxima_dose = dt_proxima_dose_w,
                                 dt_administrar  = dt_proxima_dose_w,
                                 ds_horarios     = ds_horarios_ww,
                                 qt_dia_prim_hor = qt_dia_prim_hor_w,
                                 ie_administrar   = NULL
                           where nr_sequencia = nr_sequencia_w
                             and nr_prescricao = nr_prescricao_p;
                        end if;

                        if ie_update_quatro_w = 'S' then
                          update prescr_material
                             set ie_administrar = 'N', ie_regra_disp = 'N'
                           where nr_sequencia = nr_sequencia_w
                             and nr_prescricao = nr_prescricao_p;

                          update prescr_material
                             set ie_administrar = 'N', ie_regra_disp = 'N'
                           where nr_sequencia_diluicao = nr_sequencia_w
                             and nr_prescricao = nr_prescricao_p;

                          update prescr_mat_hor
                             set ie_situacao = 'I'
                           where nr_seq_material = nr_sequencia_w
                             and nr_prescricao = nr_prescricao_p;

                          update prescr_mat_hor
                             set ie_situacao = 'I'
                           where nr_seq_superior = nr_sequencia_w
                             and nr_prescricao = nr_prescricao_p;
                        end if;

                        if ie_update_cinco_w = 'S' then
                          update prescr_material
                             set hr_prim_horario = ds_horarios_ww,
                                 dt_proxima_dose = dt_proxima_dose_w,
                                 dt_administrar  = dt_proxima_dose_w,
                                 ds_horarios     = ds_horarios_ww,
                                 qt_dia_prim_hor = qt_dia_prim_hor_w,
                                 ie_administrar   = NULL
                           where nr_sequencia = nr_sequencia_w
                             and nr_prescricao = nr_prescricao_p;
                        end if;
    end;
      if (ie_info_rastre_prescr_w = 'S') then
        CALL gerar_log_prescr_mat(nr_prescricao_p, nr_sequencia_w, ie_agrup_w, null, null, ds_alteracao_rastre_w, nm_usuario_p, 'N');
      end if;
    end loop;
    close c07;
  end if;
end if;

update  prescr_material
set    cd_motivo_baixa  = cd_motivo_baixa_Param_w
where  nr_prescricao  = nr_prescricao_p
and    coalesce(cd_motivo_baixa,0) = 0
and    ie_administrar  = 'N';

if (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then
  CALL gerar_evento_lib_prescricao(nr_prescricao_p,nm_usuario_p);
end if;
CALL gravar_processo_longo(obter_desc_expressao(726314),'LIBERAR_PRESCRICAO',14);
ie_ajustar_entrega_w    := Wheb_assist_pck.obterParametroFuncao(924,350);
if (ie_ajustar_entrega_w  = 'S') THEN
  CALL Ajustar_Data_Entrega_Prescr(nr_prescricao_p,nm_usuario_p,'N');
elsif (ie_ajustar_entrega_w  = 'M') then
  --Atualizar a Data de Entrega da Prescricao, pegando a maior entre a dt_prev_execucao e dt_resultado dos procedimentos (Bruno)
  CALL Ajustar_Data_Entrega_Maior( nr_prescricao_p,nm_usuario_p);
elsif (ie_ajustar_entrega_w  = 'R') then
  -- Guarda a data de entrega mais alta da prescricao na tabela de relacionamento com o atendimento (Bruno)
  CALL Ajustar_Data_Entr_Proc_Urgente( nr_prescricao_p,nm_usuario_p);
end if;

begin
  select   dt_entrega,
      coalesce(nr_atendimento,0)
  into STRICT  dt_entrega_w,
      nr_atendimento_w
  from  prescr_medica
  where  nr_prescricao = nr_prescricao_p;

  if (nr_atendimento_w > 0) then
    select   count(nr_sequencia)
    into STRICT  qt_registros_w
    from  atend_pac_data_entrega where    nr_atendimento = nr_atendimento_w LIMIT 1;

    if (qt_registros_w > 0 ) then
      select  nr_sequencia,
        dt_entrega_atendimento
      into STRICT  nr_seq_entrega_atend_w,
        dt_entrega_atendimento_w
      from  atend_pac_data_entrega
      where  nr_atendimento = nr_atendimento_w;

      if (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrega_w) > ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_entrega_atendimento_w)) then
        update  atend_pac_data_entrega
        set  dt_entrega_atendimento = dt_entrega_w,
          nm_usuario = nm_usuario_p,
          dt_atualizacao = clock_timestamp()
        where  nr_sequencia = nr_seq_entrega_atend_w;
      end if;
    elsif (dt_entrega_w IS NOT NULL AND dt_entrega_w::text <> '') then
      insert
      into  atend_pac_data_entrega(nr_sequencia,
        dt_atualizacao,
        nm_usuario,
        dt_atualizacao_nrec,
        nm_usuario_nrec,
        dt_entrega_atendimento,
        nr_atendimento)
      values (nextval('atend_pac_data_entrega_seq'),
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        dt_entrega_w,
        nr_atendimento_w);

    end if;


  end if;
exception when others then
  null;
end;

begin
delete  FROM prescr_mat_hor_copia
where  nr_prescricao  = nr_prescricao_p;
end;

IF (nr_seq_transcricao_w IS NOT NULL AND nr_seq_transcricao_w::text <> '') and
    ((ie_liberado_medico_w) or ((ie_lib_w = 1) and (coalesce(dt_liberacao_medico_w::text, '') = '')))  THEN    /*David em 01/09/2008 OS 106867*/
  CALL gravar_processo_longo(obter_desc_expressao(726318),'LIBERAR_PRESCRICAO',17);
  CALL atualiza_status_transcricao(nr_seq_transcricao_w,'T',nm_usuario_p);
END IF;

begin
CALL gerar_nut_prescricao(nr_prescricao_p, nm_usuario_p);
exception when others then
  null;
end;

begin
CALL gerar_regra_lib_acm_sn(nr_prescricao_p);
exception when others then
  null;
end;

begin
CALL baixa_mat_lib_prescr_retrogada(nr_prescricao_p);
exception when others then
  null;
end;

if (Wheb_assist_pck.obterParametroFuncao(924,498) = 'S') then
  CALL gerar_sp_prescr_proc(nr_prescricao_p, null, nm_usuario_p);
end if;

if (coalesce(dt_liberacao_w::text, '') = '') and (coalesce(dt_liberacao_medico_CI_w::text, '') = '') then
  CALL Enviar_CI_Prescr_Nao_padrao(nr_prescricao_p,cd_estabelecimento_w, ds_comunicado_w,cd_perfil_p,nm_usuario_p);
end if;
CALL gravar_processo_longo(obter_desc_expressao(726320),'LIBERAR_PRESCRICAO',20);
if (ie_gerar_resumo_rep_w <> 'N') then
  begin
  if (ie_gerar_resumo_rep_w = 'S') then
    begin
    CALL REP_Gerar_Resumo_PCK.Gerar_Resumo(nr_prescricao_p,'RTF',nm_usuario_p);
    end;
  else
    BEGIN
    CALL REP_Gerar_Resumo_PCK.Gerar_Resumo(nr_prescricao_p,ie_gerar_resumo_rep_w,nm_usuario_p);
    end;
  end if;
  end;
end if;

ie_prescr_nut_w  := coalesce(obter_se_prescr_nut(nr_prescricao_p),'N');

update  prescr_medica
set    ie_prescr_nutricao   = ie_prescr_nut_w
where  nr_prescricao  = nr_prescricao_p;

if (nr_prescricao_ant_w IS NOT NULL AND nr_prescricao_ant_w::text <> '') and (Wheb_assist_pck.obterParametroFuncao(924,524) = 'S') then
  ie_prescricao_identica_w := Obter_Se_Prescricao_Identica(nr_prescricao_ant_w,nr_prescricao_p);
  update  prescr_medica
  set    ie_prescricao_identica   = ie_prescricao_identica_w
  where  nr_prescricao    = nr_prescricao_p;
end if;

open c38;
loop
fetch c38 into
  nr_prescricao_vig_w;
EXIT WHEN NOT FOUND; /* apply on c38 */
  begin

    ie_prescricao_duplicada_w := Obter_Se_Prescricao_Identica(nr_prescricao_vig_w,nr_prescricao_p);

    if (coalesce(ie_prescricao_duplicada_w, 'N') = 'S') then

      update  prescr_medica
      set    ie_prescricao_duplicada   = ie_prescricao_duplicada_w
      where  nr_prescricao        = nr_prescricao_p;

      exit;

    end if;
  end;
end loop;
close c38;

if (ie_tipo_pessoa_p = 'S') and (Wheb_assist_pck.obterParametroFuncao(924,527) = 'S') then
  CALL gerar_alteracao_material(nr_prescricao_p,cd_perfil_p,nm_usuario_p,cd_estabelecimento_w);
end if;

CALL exec_external_integrations(cd_perfil_p, nm_usuario_p, cd_estabelecimento_w, nr_prescricao_p);

if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (Wheb_assist_pck.obterParametroFuncao(924,1128) = 'S') then

  select  max(nr_sequencia)
  into STRICT  nr_sequencia_ww
  from  prescr_material
  where  coalesce(nr_seq_kit::text, '') = ''
  and    coalesce(nr_sequencia_proc::text, '') = ''
  and    obter_se_mat_vancomicina(cd_material) = 'S'
  and    ie_urgencia = 'N'
  and    ie_agrupador = 1
  and    nr_prescricao = nr_prescricao_p;

  if (nr_sequencia_ww > 0) then

    -- Atualizar resultado utilizado
    -- Conforme acordado, sera atualizado o valor do resultado somente na liberacao da prescricao.
    update  rep_result_vanco
    set    nm_usuario = nm_usuario_p,
        ie_novo_resultado = 'N'
    where  (nr_seq_regra_resultado IS NOT NULL AND nr_seq_regra_resultado::text <> '')
    and    ie_novo_resultado = 'S'
    and    nr_atendimento = nr_atendimento_w;

    select  dt_inicio_prescr_w - round((coalesce(max(qt_horas_proced), 168) + 1)/24)
    into STRICT  dt_prev_exec_nsv_w
    from  rep_nivel_serico
    where   obter_se_somente_numero(qt_horas_proced) = 'S';

    select  max(a.nr_prescricao),
        max(b.nr_sequencia)
    into STRICT  nr_prescr_proc_nsv_w,
        nr_seq_procedimento_w
    from  prescr_procedimento b,
        prescr_medica a
    where  b.ie_em_protocolo_vanco = 'S'
    and    ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicio_prescr_w) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_prev_execucao)
    and    Obter_se_exame_vancocinemia(b.nr_seq_exame) = 'S'
    and    (b.nr_seq_exame IS NOT NULL AND b.nr_seq_exame::text <> '')
    and    a.nr_prescricao = b.nr_prescricao
    and    (coalesce(a.dt_liberacao, a.dt_liberacao_medico) IS NOT NULL AND (coalesce(a.dt_liberacao, a.dt_liberacao_medico))::text <> '')
    and    coalesce(a.dt_suspensao::text, '') = ''
    and    a.dt_inicio_prescr >= dt_prev_exec_nsv_w
    and    a.nr_prescricao <> nr_prescricao_p
    and    a.nr_atendimento = nr_atendimento_p;

      -- 113435 - 3 - 12/06 16:00 - 10/06/13 - 113531
    select  max(a.nr_prescricao)
    into STRICT  nr_prescr_proc_nsv_w
    from  prescr_procedimento b,
        prescr_medica a
    where  b.ie_em_protocolo_vanco = 'S'
    and    ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicio_prescr_w) = ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_prev_execucao)
    and    Obter_se_exame_vancocinemia(b.nr_seq_exame) = 'S'
    and    (b.nr_seq_exame IS NOT NULL AND b.nr_seq_exame::text <> '')
    and    a.nr_prescricao = b.nr_prescricao
    and    (coalesce(a.dt_liberacao, a.dt_liberacao_medico) IS NOT NULL AND (coalesce(a.dt_liberacao, a.dt_liberacao_medico))::text <> '')
    and    coalesce(a.dt_suspensao::text, '') = ''
    and    a.dt_inicio_prescr >= dt_prev_exec_nsv_w
    and    a.nr_prescricao <> nr_prescricao_p
    and    a.nr_atendimento = nr_atendimento_p;

    if (nr_prescr_proc_nsv_w IS NOT NULL AND nr_prescr_proc_nsv_w::text <> '') then

      delete from prescr_proc_hor a
      where  a.nr_seq_procedimento in (  SELECT  b.nr_sequencia
                        from  prescr_procedimento b
                        where  obter_se_exame_vancocinemia(b.nr_seq_exame) = 'S'
                        and    coalesce(b.ie_em_protocolo_vanco, 'N') = 'S'
                        and    a.nr_prescricao = b.nr_prescricao)
      and    a.nr_prescricao = nr_prescr_proc_nsv_w;

      if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

      update  prescr_procedimento
      set    dt_prev_execucao = dt_prev_execucao - 1/24,
          ds_horarios = to_char((dt_prev_execucao - 1/24), 'hh24:mi '),
          nr_ocorrencia = 1,
          ie_em_protocolo_vanco = 'N'
      where  obter_se_exame_vancocinemia(nr_seq_exame) = 'S'
      and    coalesce(ie_em_protocolo_vanco, 'N') = 'S'
      and    nr_prescricao = nr_prescr_proc_nsv_w;

      if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

      CALL gerar_prescr_proc_sem_dt_lib(nr_prescr_proc_nsv_w, null, cd_perfil_p, 'S', nm_usuario_p);

      if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
    end if;

    open C27;
    loop
    fetch C27 into
      nr_prescricao_ww,
      nr_sequencia_ww,
      cd_material_w,
      nr_seq_horario_w,
      dt_horario_w;
    EXIT WHEN NOT FOUND; /* apply on C27 */
      begin
      -- suspender horario
      CALL suspender_prescr_mat_hor(nr_seq_horario_w, nm_usuario_p, null, wheb_mensagem_pck.get_texto(279135),'N',null); --'Novo NSV de vancomicina'
      --  gerar evento ADEP
      CALL Gerar_Alter_Hor_Prescr_Adep(nr_atendimento_p, 'M', cd_material_w, nr_prescricao_ww, nr_sequencia_ww, nr_seq_horario_w, dt_horario_w, 12, wheb_mensagem_pck.get_texto(279135), null, null, nm_usuario_p);
      end;
    end loop;
    close C27;

  end if;
end if;
CALL gravar_processo_longo(obter_desc_expressao(726322),'LIBERAR_PRESCRICAO',22);
update  prescr_mat_hor
set    dt_lib_horario  = clock_timestamp()
where  coalesce(dt_lib_horario::text, '') = ''
and    (dt_suspensao IS NOT NULL AND dt_suspensao::text <> '')
and    nr_prescricao  = nr_prescricao_p;

update  prescr_dieta_hor
set    dt_lib_horario  = clock_timestamp()
where  coalesce(dt_lib_horario::text, '') = ''
and    (dt_suspensao IS NOT NULL AND dt_suspensao::text <> '')
and    nr_prescricao  = nr_prescricao_p;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

ie_lib_farm_prescr_interv_w  := Wheb_assist_pck.obterParametroFuncao(924,643);
if  (ie_lib_farm_prescr_interv_w = 'S' AND ie_prescr_farm_w = 'S') or (ie_lib_farm_prescr_interv_w = 'T') or
  (ie_lib_farm_prescr_interv_w = 'A' AND ie_prescr_emergencia_w = 'S') then
  CALL liberar_prescricao_farmacia(nr_prescricao_p,0,nm_usuario_p,'N');
end if;

select  max(ie_tipo_hemodialise),
  max(ie_tipo_peritoneal)
into STRICT  ie_tipo_hemodialise_w,
  ie_tipo_peritoneal_w
from  hd_prescricao
where  nr_prescricao = nr_prescricao_p;

CALL gravar_processo_longo(obter_desc_expressao(726326),'LIBERAR_PRESCRICAO',23);

if (ie_tipo_hemodialise_w IS NOT NULL AND ie_tipo_hemodialise_w::text <> '') and (coalesce(ie_tipo_peritoneal_w::text, '') = '') and (ie_lib_w = 1)then
  CALL gerar_cobranca_hemodialise(ie_tipo_hemodialise_w,nr_prescricao_p,nm_usuario_p);
end if;

if (ie_prescricao_alta_w = 'S') and (Wheb_assist_pck.obterParametroFuncao(924,692) > 0) then
  update  prescr_material
  set  cd_motivo_baixa = cd_mot_baixa_prescr_alta_w,
    dt_baixa   = clock_timestamp()
  where  nr_prescricao   = nr_prescricao_p;
  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

if (Wheb_assist_pck.obterParametroFuncao(924,762) = 'S') then


  if (cd_funcao_origem_w <> 2314) then
    update  med_avaliacao_paciente
    set    dt_liberacao  = clock_timestamp()
    where  coalesce(dt_liberacao::text, '') = ''
    and    nr_prescricao  = nr_prescricao_p;
  else
    open C44; -- Procedimento
    loop
    fetch C44 into
      nr_seq_proc_cpoe_w;
    EXIT WHEN NOT FOUND; /* apply on C44 */
      begin

      update  med_avaliacao_paciente
      set    dt_liberacao  = clock_timestamp(),
          nr_prescricao   = nr_prescricao_p
      where  coalesce(dt_liberacao::text, '') = ''
      and    nr_seq_proc_cpoe = nr_seq_proc_cpoe_w;

      end;
    end loop;
    close C44;

    open C54; -- Hemoterapia
    loop
    fetch C54 into
      nr_seq_hemo_cpoe_w;
    EXIT WHEN NOT FOUND; /* apply on C54 */
      begin

      update  med_avaliacao_paciente
      set    dt_liberacao  = clock_timestamp(),
          nr_prescricao   = nr_prescricao_p
      where  coalesce(dt_liberacao::text, '') = ''
      and    nr_seq_hemo_cpoe = nr_seq_hemo_cpoe_w;

      end;
    end loop;
    close C54;
  end if;

  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

  ds_aux_w := generat_evaluation_release_rep(nr_prescricao_p, nm_usuario_p, ds_aux_w);

end if;

if (Wheb_assist_pck.obterParametroFuncao(924,796) = 'S') then
  Update  paciente_justificativa
  set    dt_liberacao = clock_timestamp()
  where  nr_atendimento = nr_atendimento_p
  and    coalesce(dt_liberacao::text, '') = '';

end if;

-- Verificar se e possivel utilizar a function Wheb_assist_pck.obterParametroFuncao();
if (Obter_Valor_Param_Usuario(924, 880, cd_perfil_p, nm_usuario_p, cd_estabelecimento_w) = 'S') then
  CALL replica_obs_coleta_prescr(nm_usuario_p,nr_prescricao_p);
end if;

if (ie_funcao_prescritor_w IS NOT NULL AND ie_funcao_prescritor_w::text <> '') then
  ie_funcao_liberar_w      := Wheb_assist_pck.obterParametroFuncao(924,844);

  if (ie_funcao_liberar_w IS NOT NULL AND ie_funcao_liberar_w::text <> '') and (obter_se_contido_char(ie_funcao_prescritor_w, ie_funcao_liberar_w) = 'S') then
    open C18;
    loop
    fetch C18 into
      cd_item_w,
      nr_seq_horario_w,
      ie_agrup_w;
    EXIT WHEN NOT FOUND; /* apply on C18 */
      if (ie_agrup_w = 1) then
        CALL registrar_ciencia_dieta(nr_atendimento_p, 'D', cd_item_w, nr_prescricao_p, nr_prescricao_p, null, 34, null, null, null, nm_usuario_p, null, nr_seq_horario_w,'S');
      elsif (ie_agrup_w = 8) then
        CALL registrar_ciencia_dieta(nr_atendimento_p, 'SNE', cd_item_w, nr_prescricao_p, nr_prescricao_p, null, 34, null, null, null, nm_usuario_p, null, nr_seq_horario_w,'S');
      else
        CALL registrar_ciencia_dieta(nr_atendimento_p, 'S', cd_item_w, nr_prescricao_p, nr_prescricao_p, null, 34, null, null, null, nm_usuario_p, null, nr_seq_horario_w,'S');
      end if;
    end loop;
    close C18;
  end if;
end if;
CALL gravar_processo_longo(obter_desc_expressao(726330),'LIBERAR_PRESCRICAO',24);
select  max(ie_emergencia)
into STRICT  ie_emergencia_w
from   prescr_medica
where   nr_prescricao = nr_prescricao_p;

if (ie_emergencia_w = 'S') then
  update  prescr_material
  set  ds_horarios  = to_char(coalesce(dt_atualizacao_nrec,clock_timestamp()),'hh24:mi')
  where  nr_prescricao  = nr_prescricao_p;
end if;

if (((ie_liberado_medico_w) or ((ie_lib_w = 1) and (coalesce(dt_liberacao_w::text, '') = '') and (coalesce(dt_liberacao_medico_w::text, '') = '')) or (ie_gerou_dieta_w)) and (Wheb_assist_pck.obterParametroFuncao(924,545) = 'S')) then
  CALL gerar_servico_nut_pep(nr_prescricao_p,nm_usuario_p,cd_perfil_p);
end if;

if ((ie_liberado_medico_w) or ((ie_lib_w = 1) and (coalesce(dt_liberacao_medico_w::text, '') = '')) or (coalesce(ie_gera_hor_copia_cpoe_p,'S') = 'S')) then
  ie_conduta_dietoterapica_w := Wheb_assist_pck.obterParametroFuncao(924,1154);

  select  count(*)
  into STRICT  qt_prescr_nutri_w
  from  prescr_medica a where  a.nr_prescricao  = nr_prescricao_p
  and  nr_atendimento  = nr_atendimento_p
  and  (coalesce(dt_liberacao,dt_liberacao_medico) IS NOT NULL AND (coalesce(dt_liberacao,dt_liberacao_medico))::text <> '')
  and  ((ie_conduta_dietoterapica_w = 'S')
    or  ((ie_conduta_dietoterapica_w = 'C')
      and ((a.nr_prescricoes IS NOT NULL AND a.nr_prescricoes::text <> '')
      or  (a.nr_prescricao_anterior IS NOT NULL AND a.nr_prescricao_anterior::text <> ''))))
  and  ((exists (  SELECT  1
        from  prescr_dieta b
        where (a.nr_prescricao = b.nr_prescricao)))
    or (exists (SELECT  1
        from  rep_jejum c
        where (a.nr_prescricao = c.nr_prescricao)))
    or (exists (select  1
        from  prescr_material d
        where (a.nr_prescricao = d.nr_prescricao and d.ie_agrupador in (8,12))))
    or (exists (select  1
        from  nut_pac e
        where (a.nr_prescricao = e.nr_prescricao )))
    or (exists (select 1
        from  prescr_leite_deriv f
        where f.nr_prescricao = a.nr_prescricao))) LIMIT 1;
  -- verifica se existe prescicao de dieta do tipo programada
    select  coalesce(max('S'), 'N')
        into STRICT  IE_SCHEDULED_DIET_W
        FROM prescr_dieta a
LEFT OUTER JOIN cpoe_dieta e ON (a.nr_seq_dieta_cpoe = e.nr_sequencia)
WHERE a.nr_prescricao = nr_prescricao_p and e.ie_duracao = 'P' and e.ie_tipo_dieta = 'O' and (coalesce(a.ie_suspenso::text, '') = '' or a.ie_suspenso = 'N') and coalesce(e.dt_suspensao::text, '') = '' and coalesce(e.dt_lib_suspensao::text, '') = '';

  if (qt_prescr_nutri_w <> 0) then

    if (ie_conduta_dietoterapica_w = 'C') then
      -- Se parametro [1154] estiver para 'Somente prescricoes de copia', ira verificar nesse select se a prescricao de origem estava definida como conduta.
      select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
      into STRICT  ie_prescr_conduta_w
      from  nut_atend_serv_dia c
      where  c.nr_atendimento = nr_atendimento_p
      and  (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '')
      and  exists (  SELECT  1
          from  prescr_medica b
          where  b.nr_atendimento = nr_atendimento_p
          and    b.dt_prescricao > clock_timestamp() - interval '7 days'
          and (b.nr_prescricao = coalesce(nr_prescricao_ant_w,0)
          or  obter_se_contido(b.nr_prescricao,replace(nr_prescricoes_w,';',',')) = 'S')
          and  substr(obter_se_prescricao_nut_dia(b.nr_prescricao, c.nr_sequencia),1,2) = 'S');
    end if;

    if  ((ie_conduta_dietoterapica_w <> 'C') or (ie_prescr_conduta_w = 'S')) then
      open C29;
      loop
      fetch C29 into
        nr_seq_serv_dia_w;
      EXIT WHEN NOT FOUND; /* apply on C29 */
     select  max(coalesce(nr_sequencia,0))
    into STRICT  nr_seq_serv_dia_rep_w
    from  nut_atend_serv_dia_rep
    where  nr_seq_serv_dia = nr_seq_serv_dia_w
    and  coalesce(dt_liberacao::text, '') = '';
        CALL Definir_Prescricao_Nutricao(nr_prescricao_p, coalesce(nr_seq_serv_dia_rep_w,0), nr_seq_serv_dia_w, 'T', nm_usuario_p);
      end loop;
      close C29;
    end if;
  end if;
end if;

if ((ie_liberado_medico_w) or (ie_liberado_w)) then

  select   coalesce(max('S'),'N'),
      min(dt_inicio),
      max(dt_fim)
  into STRICT   ie_possui_jejum_w,
      dt_inicio_w,
      dt_fim_w
  from   rep_jejum
  where  nr_prescricao = nr_prescricao_p
  and   coalesce(ie_inicio,'N') = 'I'
  and   (dt_inicio IS NOT NULL AND dt_inicio::text <> '')
  and   (dt_fim IS NOT NULL AND dt_fim::text <> '')
  and    coalesce(ie_suspenso,'N') = 'N';

  if (ie_possui_jejum_w = 'S') then

    select   coalesce(max('S'),'N')
    into STRICT   ie_possui_jejum_w
    from   rep_jejum a,
        prescr_medica b
    where   a.nr_prescricao = b.nr_prescricao
    and   b.nr_atendimento = nr_atendimento_p
    and   a.nr_prescricao <> nr_prescricao_p
    and   ((dt_inicio_w >= dt_inicio) or (dt_fim_w <= dt_fim))
    and    coalesce(ie_suspenso,'N') = 'N';

    if (ie_possui_jejum_w = 'S') then

      open c45;
      loop
      fetch c45 into
        nr_prescricao_ww,
        nr_sequencia_w;
      EXIT WHEN NOT FOUND; /* apply on c45 */

        update   rep_jejum
        set    ie_suspenso = 'S'
        where   nr_prescricao = nr_prescricao_ww
        and    nr_sequencia = nr_sequencia_w;
      end loop;
      close c45;
    end if;
  end if;
end if;

/* Juan > Geracao de lote unico 17/05/2012 */

CALL gravar_processo_longo(obter_desc_expressao(726334),'LIBERAR_PRESCRICAO',25);
select  max(cd_setor_atendimento),
  max(cd_estabelecimento),
  coalesce(max(qt_dias_extensao),0)
into STRICT  cd_setor_atendimento_w,
  cd_estabelecimento_w,
  qt_dias_extensao_w
from  prescr_medica
where  nr_prescricao = nr_prescricao_p;

select  coalesce(max(ie_gerar_lote_unico),'N'),
  coalesce(max(ie_gera_integracao),'N')
into STRICT  ie_far_gera_lote_unico_w,
  ie_gera_integracao_w
from  parametros_farmacia
where  cd_estabelecimento = cd_estabelecimento_w;

if (ie_far_gera_lote_unico_w = 'S') then

  select  coalesce(max(ie_gerar_lote_unico),'N')
  into STRICT  ie_gerar_lote_unico_w
  from  setor_atendimento
  where  cd_setor_atendimento = cd_setor_atendimento_w
  and  cd_estabelecimento = cd_estabelecimento_w;

   if (ie_gerar_lote_unico_w = 'S' and ie_gen_batch_per_order_unit_w ='N') then
    CALL Gerar_Lote_Unico_Prescricao(nr_prescricao_p,0,0,'N',nm_usuario_p,'GPMH');
   elsif (ie_gerar_lote_unico_w = 'S' and ie_gen_batch_per_order_unit_w ='S')then
    for r001 in c001 loop
     CALL generate_batch_per_order_unit(nr_prescricao_p,r001.nr_sequencia,0,0,'N',nm_usuario_p,'GPMH');
    end loop;
  end if;

end if;

/*if  (ie_gera_integracao_w = 'S') then
  disp_prescr_mat_hor(nr_prescricao_p,0,nm_usuario_p);
end if;*/
begin
CALL gerar_ev_lembrete_rec(nr_prescricao_p,nm_usuario_p);
exception when others then
  null;
end;
CALL gravar_processo_longo(obter_desc_expressao(726338),'LIBERAR_PRESCRICAO',26);
ds_itens_prescr_w  := substr(obter_itens_prescr(nr_prescricao_p, null),1,255);
update  prescr_medica
set  ds_itens_prescr  = ds_itens_prescr_w
where  nr_prescricao  = nr_prescricao_p;

qt_dias_extensao_w := qt_dias_extensao_w - 1;
nr_prescricao_ww   := 0;
if (qt_dias_extensao_w > 0)  then
  nr_regra_copia_w      := Wheb_assist_pck.obterParametroFuncao(950,5);
  nr_prescricao_w1 := nr_prescricao_p;
  dt_prescricao_ww := dt_validade_prescr_w + 1/86400;
  for i in 1..qt_dias_extensao_w loop
    begin
    SELECT * FROM plt_estender_prescricao(nr_prescricao_w1, null, null, nr_atendimento_p, nr_regra_copia_w, cd_medico_prescr_w, dt_prescricao_ww, cd_perfil_p, nm_usuario_p, cd_estabelecimento_w, 'N', nr_prescricao_ww, ds_erro_p, 24) INTO STRICT nr_prescricao_ww, ds_erro_p;

    nr_prescricao_w1 := nr_prescricao_ww;
    nr_prescricao_ww := null;
    dt_prescricao_ww := dt_prescricao_ww + 1;
    ds_erro_p := Liberar_Prescricao(nr_prescricao_w1, nr_atendimento_p, ie_tipo_pessoa_p, cd_perfil_p, nm_usuario_p, 'S', ds_erro_p);
    CALL plt_ajustar_extensao_prescr(nr_prescricao_w1,nm_usuario_p);
    end;
  end loop;
end if;

if (wheb_usuario_pck.is_evento_ativo(249) = 'S') then
  CALL gravar_log_lab_pragma(  18258, 'Liberar_prescricao - 1', obter_usuario_ativo, nr_prescricao_p, ds_erro_p);
  CALL gravar_log_lab_pragma(  18258, 'Liberar_prescricao - 2', obter_usuario_ativo, nr_prescricao_p, dt_lib_temp_w);
end if;

  select IE_SITUACAO into STRICT ie_integracao_matrix_249_WS_V from integracao_matrix_249_WS_V;

if (coalesce(ds_erro_p::text, '') = '') and (coalesce(dt_lib_temp_w::text, '') = '') and
  ((ie_integracao_matrix_249_WS_V = 'A') or obter_se_integracao_ativa(885,53) = 'S') then

  select  max(a.IE_MATRIX_STATUS_ENVIO_INTEG)
  into STRICT  ie_matrix_status_envio_integ_w
  from  lab_parametro a
  where  a.cd_estabelecimento = cd_estabelecimento_w;
    if ie_integracao_matrix_249_WS_V = 'A' then
    CALL gravar_log_lab_pragma(  18258, 'Liberar_prescricao - 3', obter_usuario_ativo, nr_prescricao_p, ie_matrix_status_envio_integ_w);

    if (coalesce(ie_matrix_status_envio_integ_w::text, '') = '') then
      CALL integrar_matrix_ws(249, nr_prescricao_p, null, null, nm_usuario_p, 'S');
    end if;
  end if;

  if (obter_se_integracao_ativa(885,53) = 'S' and coalesce(ie_matrix_status_envio_integ_w::text, '') = '') then
     CALL integrar_matrix_ws_v7(nr_seq_evento_p => 885,nr_prescricao_p => nr_prescricao_p);
  end if;

end if;

if (coalesce(ds_erro_p::text, '') = '') and (wheb_usuario_pck.is_evento_ativo(675) = 'S') then
  CALL integrar_pardini_ws(675, nr_prescricao_p, cd_estabelecimento_w, nm_usuario_p);
end if;

if (coalesce(ds_erro_p::text, '') = '') and (wheb_usuario_pck.is_evento_ativo(639) = 'S') then
    CALL integrar_dasa_ws(639, nr_prescricao_p);
end if;

if (coalesce(ds_erro_p::text, '') = '') and (wheb_usuario_pck.is_evento_ativo(541) = 'S' or wheb_usuario_pck.is_evento_ativo(537) = 'S' or wheb_usuario_pck.is_evento_ativo(536) = 'S' or wheb_usuario_pck.is_evento_ativo(535) = 'S') then
  CALL integrar_agfa_ws(nr_atendimento_p, nr_prescricao_p, null, nm_usuario_p, 'N', 'S');
end if;

if (coalesce(ds_erro_p::text, '') = '') and (wheb_usuario_pck.is_evento_ativo(448) = 'S') then
   CALL eclipse_enviar_prescr_oml_o21(nr_prescricao_p, nr_atendimento_p, 'NW',0);
end if;

if (coalesce(ds_erro_p::text, '') = '') and (wheb_usuario_pck.is_evento_ativo(629) = 'S') then
   CALL ece_enviar_prescr_oml_o21(nr_prescricao_p, nr_atendimento_p, 'NW',0);
end if;

CALL gravar_processo_longo(obter_desc_expressao(726340),'LIBERAR_PRESCRICAO',27);
if (coalesce(ds_erro_p::text, '') = '') and (wheb_usuario_pck.is_evento_ativo(502) = 'S') then

  select  shift_integracao_pck.obter_se_convenio_integra(cd_convenio_w)
  into STRICT  ie_integracao_shift_w
;

  select  shift_integracao_pck.obter_se_prescricao_integra(nr_prescricao_p)
  into STRICT  ie_prescricao_integra_shift_w
;

  if (ie_integracao_shift_w = 'S' and ie_prescricao_integra_shift_w = 'S')
    and (coalesce(dt_lib_temp_w::text, '') = '') then
    CALL shift_integracao_pck.agendar_integracao(502, 'NR_PRESCRICAO=' ||nr_prescricao_p||';'||'CD_ESTABELECIMENTO='||cd_estabelecimento_w||';');
  end if;

end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

CALL Atualizar_plt_controle(null, nr_atendimento_p, cd_pessoa_fisica_w, 'TODOS', 'S', null);

if (Wheb_assist_pck.obterParametroFuncao(924,1142) = 'S') then
  nr_prescr_proc_nsv_w := Gerar_prescr_fut_exame_vanco(   nr_prescricao_p, nr_atendimento_p, ie_tipo_pessoa_p, cd_perfil_p, nm_usuario_p, nr_prescr_proc_nsv_w);

  if (nr_prescr_proc_nsv_w > 0) then
    ds_erro_w := Liberar_Prescricao(nr_prescr_proc_nsv_w, nr_atendimento_p, ie_tipo_pessoa_p, cd_perfil_p, nm_usuario_p, 'S', ds_erro_w);
  end if;

end if;
CALL gravar_processo_longo(obter_desc_expressao(726344),'LIBERAR_PRESCRICAO',28);
open C30;
loop
fetch C30 into
  cd_doenca_cid_w;
EXIT WHEN NOT FOUND; /* apply on C30 */
  CALL Gerar_diagnostico_Atend(nr_atendimento_p, cd_doenca_cid_w, cd_medico_prescr_w, nm_usuario_p, 2, 'S', clock_timestamp());
end loop;
close C30;

begin
CALL gerar_status_prescr_opm('L',nr_prescricao_p,'',cd_estabelecimento_w,nm_usuario_p);
exception when others then
  null;
end;

if (ie_tipo_atendimento_w = 3) then
  VarAlocarPacObservacao_w := obter_param_usuario(935, 218, cd_perfil_p, nm_usuario_p, 0, VarAlocarPacObservacao_w);

  if (VarAlocarPacObservacao_w in ('S','F')) then
    begin
    if (VarAlocarPacObservacao_w = 'S') then
      update  atendimento_paciente
      set    dt_inicio_observacao = clock_timestamp(),
          dt_fim_consulta     = clock_timestamp()
      where  nr_atendimento     = nr_atendimento_p;
    elsif (VarAlocarPacObservacao_w = 'F') then
      update  atendimento_paciente
      set    dt_fim_consulta     = clock_timestamp()
      where  nr_atendimento     = nr_atendimento_p;
    end if;
    CALL Atualizar_datas_pa(nr_atendimento_p, 'FC', nm_usuario_p);
    end;
  end if;

  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;

select  coalesce(max(dt_liberacao),max(dt_liberacao_medico))
into STRICT  dt_liberacao_w
from  prescr_medica
where  nr_prescricao = nr_prescricao_p;
CALL gravar_processo_longo(obter_desc_expressao(726346),'LIBERAR_PRESCRICAO',29);

if (cd_funcao_origem_w <> 2314) and (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') and (ie_rep_cpoe_w = 'S') then
  if (obter_se_prescr_CPOE(nr_prescricao_p) = 'N') then
    begin
    CALL cpoe_rep_gerar_itens( nr_prescricao_p, nr_atendimento_p, dt_inicio_prescr_w, dt_validade_prescr_w, dt_liberacao_w, nm_usuario_p, cd_pessoa_fisica_w, ie_tipo_pessoa_p);
    exception when others then
      ds_erro_w  := substr('ERRO: REP -> CPOE: ' || sqlerrm(SQLSTATE),1,4000);
      CALL gravar_log_tasy(10007, ds_erro_w, nm_usuario_p);
    end;
  else
    CALL cpoe_update_liberacao_rep(nr_prescricao_p);
  end if;
end if;

open c34;
loop
fetch c34 into
  nr_seq_c34_w,
  nr_seq_mat_cpoe_w,
  hr_prim_horario_w;
EXIT WHEN NOT FOUND; /* apply on c34 */

  select  count(*)
  into STRICT  cont_c34_w
  from  prescr_mat_hor
  where  nr_seq_material = nr_seq_c34_w
  and    nr_prescricao = nr_prescricao_p
  and    ie_horario_especial = 'N';

  select  max(dt_liberacao_medico),
      max(dt_liberacao)
  into STRICT  dt_liberacao_medico_c34_w,
      dt_liberacao_c34_w
  from  prescr_medica
  where  nr_prescricao = nr_prescricao_p;

  if   ((cont_c34_w = 1) and (dt_liberacao_medico_c34_w IS NOT NULL AND dt_liberacao_medico_c34_w::text <> '') and (dt_liberacao_c34_w IS NOT NULL AND dt_liberacao_c34_w::text <> '')) then

    select  max(dt_horario)
    into STRICT   dt_horario_c34_w
    from  prescr_mat_hor
    where  nr_seq_material = nr_seq_c34_w
    and    nr_prescricao = nr_prescricao_p
    and  ie_horario_especial = 'N';

    if (to_char(dt_horario_c34_w,'mi') = '00') then
      ds_horarios_c34_w      := to_char(dt_horario_c34_w,'hh24');
    else
      ds_horarios_c34_w      := to_char(dt_horario_c34_w,'hh24:mi');
    end if;

    update  prescr_material
    set ds_horarios = ds_horarios_c34_w
    where nr_prescricao = nr_prescricao_p
    and nr_sequencia = nr_seq_c34_w;

    if (nr_seq_mat_cpoe_w IS NOT NULL AND nr_seq_mat_cpoe_w::text <> '') and (nr_seq_mat_cpoe_w > 0) and (cd_funcao_origem_w = 2314) and (hr_prim_horario_w <> to_char(dt_horario_c34_w,'hh24:mi')) then
       update  cpoe_material
       set    hr_prim_horario = to_char(dt_horario_c34_w,'hh24:mi'),
        ds_horarios = to_char(dt_horario_c34_w,'hh24:mi')
       where   nr_sequencia = nr_seq_mat_cpoe_w;
    end if;

  end if;

end loop;
close c34;

if (ie_libera_quimio_w = 'S') then

  UPDATE paciente_atendimento
  SET dt_quimio_liberada = clock_timestamp()
  WHERE nr_prescricao = nr_prescricao_p
  AND (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '');

end if;

if  ((cd_funcao_origem_w = 2314) and (ie_rep_cpoe_w = 'S') and (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') and (obter_se_prescr_vazia(nr_prescricao_p) = 'S'))   then

  begin

    insert  into log_tasy(dt_atualizacao, nm_usuario, cd_log, ds_log) values (clock_timestamp(), nm_usuario_p, 999856, obter_desc_expressao(296208)/*'Prescricao='*/
||'= '||nr_prescricao_p||';Excluir prescricao inicio.'
                      ||';Stack='||substr(dbms_utility.format_call_stack,1,1500));

    delete  FROM prescr_medica
    where  nr_prescricao = nr_prescricao_p;

    if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

    insert  into log_tasy(dt_atualizacao, nm_usuario, cd_log, ds_log) values (clock_timestamp(), nm_usuario_p, 999856, obter_desc_expressao(296208)/*'Prescricao='*/
||'= '||nr_prescricao_p||';Excluir prescricao fim.'
                      ||';Stack='||substr(dbms_utility.format_call_stack,1,1500));

    if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

  exception
  when others then
    null;
  end;

end if;

CALL integracao_dispensario_pck.cubixx_admissao_paciente(nr_atendimento_p, nr_prescricao_p, cd_estabelecimento_w, cd_setor_atendimento_w);
CALL integracao_dispensario_pck.cubixx_enviar_prescricao(nr_atendimento_p, nr_prescricao_p, cd_estabelecimento_w, cd_setor_atendimento_w);

open c43;
  loop
  fetch c43 into
    nr_seq_prescr_w,
    nr_seq_exame_w,
    cd_material_exame_w;
  EXIT WHEN NOT FOUND; /* apply on c43 */
    begin
      CALL lab_vincular_loinc_prescr(nr_prescricao_p, nr_seq_prescr_w, nr_seq_exame_w, nm_usuario_p, cd_material_exame_w);
    end;
  end loop;
  close c43;

begin
    if cd_funcao_origem_w = 281 then
        CALL Ajustar_prescricao_SAE(nr_prescricao_p, nr_atendimento_p, nm_usuario_p);
    end if;


  select nr_seq_pend_pac_acao
    into STRICT   nr_seq_pend_pac_acao_w
    from   prescr_medica
    where  nr_prescricao = nr_prescricao_p;

    if nr_seq_pend_pac_acao_w > 0 then
      CALL pep_just_pendencias_mentor(nr_seq_pend_pac_acao_w, const_acao_liberada);
    end if;

  CALL inserir_prescr_mat_lib_aut(nr_prescricao_p,nm_usuario_p);
exception
when others then
  null;

end;

select  coalesce(MAX('S'),'N')
into STRICT  ie_lib_medico_w
from  prescr_medica
where  (dt_liberacao_medico IS NOT NULL AND dt_liberacao_medico::text <> '')
and    nr_prescricao = nr_prescricao_p;

select  coalesce(max('S'),'N')
into STRICT  ie_lib_enfermagem_w
from  prescr_medica
where  (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
and    nr_prescricao = nr_prescricao_p;

select  coalesce(max('S'),'N')
into STRICT  ie_lib_farmacia_w
from  prescr_medica
where  (dt_liberacao_farmacia IS NOT NULL AND dt_liberacao_farmacia::text <> '')
and    nr_prescricao = nr_prescricao_p;

if (ie_lib_medico_w = 'S') then
  ie_prescr_lib_w := 'M';
elsif (ie_lib_enfermagem_w = 'S') then
  ie_prescr_lib_w := 'E';
elsif (ie_lib_farmacia_w = 'S') then
  ie_prescr_lib_w := 'F';
end if;

select   count(nr_sequencia)
into STRICT   qt_w
from   regra_lib_hor_medic_rep
where   ie_situacao = 'A'
and    ie_momento_lib = ie_prescr_lib_w;

IF (wheb_usuario_pck.is_evento_ativo(774) = 'S') THEN
  select count(1)
    into STRICT qt_exame_w
  FROM  prescr_procedimento a,
    lab_exame_equip e,
        equipamento_lab f,
    prescr_medica b,
    exame_laboratorio c
  where  a.nr_seq_exame = c.nr_seq_exame
  AND e.cd_equipamento    = f.cd_equipamento
  AND f.Ds_Sigla          = 'SCC'
  and a.nr_seq_exame      = e.nr_seq_exame
  and a.nr_prescricao = nr_prescricao_p
  and a.nr_prescricao = b.nr_prescricao
  and coalesce(a.dt_cancelamento::text, '') = ''
  and coalesce(a.dt_suspensao::text, '') = ''
  AND (
      -- se parametro 11 nao ativado
      ((b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '') AND ie_param_11 = 'N' )
      OR
      -- se parametro 11 ativado
      ((b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '' AND b.dt_liberacao_medico IS NOT NULL AND b.dt_liberacao_medico::text <> '')  AND ie_param_11 = 'S')
      )
  and coalesce(a.dt_envio_integracao::text, '') = '';

  if (qt_exame_w > 0) then
    ds_param_integ_hl7_scc_w := 'NR_PRESCRICAO_P=' || nr_prescricao_p || '#@#@NR_PRESCR_SEQ_P=' || null || '#@#@';
    CALL gravar_agend_integracao(774, ds_param_integ_hl7_scc_w);
    update prescr_procedimento set dt_envio_integracao = clock_timestamp() where nr_prescricao = nr_prescricao_p;
    if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then
       commit;
    end if;
  end if;
end if;

if  ((coalesce(ds_erro_p::text, '') = '') and (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'es_DO') and (wheb_usuario_pck.is_evento_ativo(878) = 'S')) then
   CALL gravar_agend_integracao(878,'NR_PRESCRICAO=' || nr_prescricao_p || obter_separador_bv);
end if;
if (qt_w > 0) then
  dt_lib_horario_w  := clock_timestamp();
  nr_contador_w := 0;

  open c39;
    loop
      fetch c39 into
        nr_sequencia_w,
        cd_material_w;
      EXIT WHEN NOT FOUND; /* apply on c39 */

        if ((coalesce(nr_prescricao_p, 0) > 0) and (coalesce(nr_sequencia_w, 0) > 0)) then

          update  prescr_mat_hor
          set    dt_lib_horario  = dt_lib_horario_w
          where  nr_prescricao  = nr_prescricao_p
          and   nr_seq_material  = nr_sequencia_w
          and   coalesce(dt_lib_horario::text, '') = ''
          and    coalesce(dt_suspensao::text, '') = '';

          update  prescr_mat_hor
          set    dt_lib_horario  = dt_lib_horario_w
          where  coalesce(dt_lib_horario::text, '') = ''
          and    coalesce(dt_suspensao::text, '') = ''
          and    nr_seq_superior = nr_sequencia_w
          and   ie_agrupador in (2,3,7,9)
          and    nr_prescricao = nr_prescricao_p;

        vetor_lista_materiais_w(nr_contador_w)   := nr_sequencia_w;
        nr_contador_w     := nr_contador_w + 1;

                if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then
                  commit;
                end if;
        end if;

    end loop;
  close c39;
end if;

select  count(b.nr_sequencia)
into STRICT  cont_w
from  intpd_eventos a,
    intpd_eventos_sistema b
where  a.nr_sequencia = b.nr_seq_evento
and    a.ie_evento = 73
and    a.ie_situacao = 'A'
and    b.ie_situacao = 'A'  LIMIT 1;

select  max(cd_categoria)
into STRICT  cd_categoria_w
from  atend_categoria_convenio
where  nr_seq_interno = obter_atecaco_atendimento(nr_atendimento_p);

if (cont_w = 1) then

  select   count(nr_sequencia)
  into STRICT  qt_exame_w
  from   prescr_procedimento
  where  nr_prescricao = nr_prescricao_p
  and    coalesce(dt_suspensao::text, '') = ''  LIMIT 1;

  if (qt_exame_w > 0) and
     ((ie_liberado_medico_w) or (ie_liberado_w))  then
    open C40;
    loop
    fetch C40 into
      nr_seq_interno_ww,
      cd_procedimento_w,
      nr_seq_exame_w;
    EXIT WHEN NOT FOUND; /* apply on C40 */
      begin
        reg_integracao_w.cd_estab_documento := cd_estabelecimento_w;
        reg_integracao_w.cd_convenio := cd_convenio_w;
        reg_integracao_w.cd_categoria := cd_categoria_w;
        reg_integracao_w.cd_procedimento := cd_procedimento_w;
        reg_integracao_w.nr_seq_exame := nr_seq_exame_w;
        reg_integracao_w.ie_tipo_atendimento := ie_tipo_atendimento_w;
        reg_integracao_w := gerar_int_padrao.gravar_integracao('73', nr_seq_interno_ww, nm_usuario_p, reg_integracao_w);
      end;
    end loop;
    close C40;
  end if;
end if;

select  count(b.nr_sequencia)
into STRICT  cont_w
from  intpd_eventos a,
    intpd_eventos_sistema b
where  a.nr_sequencia = b.nr_seq_evento
and    a.ie_evento = 71
and    a.ie_situacao = 'A'
and    b.ie_situacao = 'A'  LIMIT 1;

if (cont_w = 1) then

  select  count(b.nr_seq_interno)
  into STRICT  qt_medic_w
  from  prescr_medica a,
      prescr_material b
  where  a.nr_prescricao = nr_prescricao_p
  and    b.nr_prescricao = a.nr_prescricao
  and    b.ie_agrupador = 1
  and   coalesce(b.dt_suspensao::text, '') = ''
  and   b.cd_material not in (
  SELECT  distinct y.cd_material
            from  prescr_medica x,
                prescr_material y
            where  x.nr_atendimento = a.nr_atendimento
            and    y.nr_prescricao = x.nr_prescricao
            and    x.nr_prescricao <> a.nr_prescricao)  LIMIT 1;

  if (qt_medic_w > 0) and
     ((ie_liberado_medico_w) or (ie_liberado_w)) then
    open C41;
    loop
    fetch C41 into
      nr_seq_interno_ww,
      cd_material_w;
    EXIT WHEN NOT FOUND; /* apply on C41 */
      begin
        reg_integracao_w.cd_estab_documento := cd_estabelecimento_w;
        reg_integracao_w.cd_convenio := cd_convenio_w;
        reg_integracao_w.cd_categoria := cd_categoria_w;
        reg_integracao_w.cd_material := cd_material_w;
        reg_integracao_w.ie_tipo_atendimento := ie_tipo_atendimento_w;
        reg_integracao_w := gerar_int_padrao.gravar_integracao('71', nr_seq_interno_ww, nm_usuario_p, reg_integracao_w);
      end;
    end loop;
    close C41;
  end if;
end if;

cont_w := 0;
select count(*)
into STRICT   cont_w
from   prescr_medica_compl
where  nr_prescricao = nr_prescricao_p;

select obter_perfil_ativo()
into STRICT   cd_perfil_enf_w
;

select obter_funcao_ativa()
into STRICT   cd_funcao_ativa_enf_w
;

if (cont_w = 0) then
  insert
  into prescr_medica_compl(
    dt_atualizacao_nrec,
    dt_atualizacao,
    ie_liberacao_cpoe,
    nm_usuario_nrec,
    nm_usuario,
    nr_prescricao)
  values (
    clock_timestamp(),
    clock_timestamp(),
    'N',
    nm_usuario_p,
    nm_usuario_p,
    nr_prescricao_p);
end if;

if (coalesce(ds_erro_p::text, '') = '') and (ie_liberado_w IS NOT NULL AND ie_liberado_w::text <> '') then

    open C47;
    loop
    fetch C47 into
        nr_seq_interno_ww,
        nr_seq_procedimento_ww;
    EXIT WHEN NOT FOUND; /* apply on C47 */
    begin
    CALL call_bifrost_content('prescription.image.order.request','prescription_json_pck.get_ris_message_clob('||nr_seq_procedimento_ww||')', nm_usuario_p);
    end;
    end loop;
    close C47;

        open C48;
    loop
    fetch C48 into
      dt_horario_w,
      nr_prescricao_w;
    EXIT WHEN NOT FOUND; /* apply on C48 */
    begin

    CALL call_bifrost_content('prescription.laboratory.order.request','prescription_json_pck.get_lis_message_clob('||nr_prescricao_p||
            ', to_date('||chr(39)||to_char(dt_horario_w,'dd/mm/yyyy hh24:mi:ss')||chr(39)||','||chr(39)||'dd/mm/yyyy hh24:mi:ss'|| chr(39)||' ) )', nm_usuario_p);


    end;
    end loop;
    close C48;

  --CareStream RIS integration
    nr_seq_sistema_integ_w:= 233;
    select  is_special_order_rule('RA','D',cd_estabelecimento_w) into STRICT ie_transmit_special_order;
    open c50;
    loop
    fetch c50 into
      nr_prescricao_w,
      nr_exame_sequence,
      ie_retrogrado_w,
      nr_seq_procedimento_ww;
    EXIT WHEN NOT FOUND; /* apply on c50 */
    begin
        CALL carestream_japan_l10n_pck.update_exam_execution_status(nr_prescricao_w, nr_exame_sequence, '1', nm_usuario_p);
        if (ie_retrogrado_w = 'N' or (ie_retrogrado_w = 'S' and ie_transmit_special_order = 'S')) then
            CALL call_interface_file(931, 'carestream_ris_japan_l10n_pck.patient_order_info ('|| nr_prescricao_w ||', '|| nr_exame_sequence || ',' ||nr_seq_procedimento_ww  ||', ''3E'' , 1, ''' || nm_usuario_p ||''' , 0, null, ' || cd_estabelecimento_w || ',''N''' ||' );' , nm_usuario_p);
        end if;
      end;
    end loop;
    close c50;

    --CareStream Physiology integration
    nr_seq_sistema_integ_w := 234;
     select  is_special_order_rule('FI','D',cd_estabelecimento_w) into STRICT ie_transmit_special_order;
    open c50;
    loop
    fetch c50 into
      nr_prescricao_w,
      nr_exame_sequence,
      ie_retrogrado_w,
      nr_seq_procedimento_ww;
    EXIT WHEN NOT FOUND; /* apply on c50 */
      begin
          CALL carestream_japan_l10n_pck.update_exam_execution_status(nr_prescricao_w, nr_exame_sequence, '1', nm_usuario_p);
          if (ie_retrogrado_w = 'N' or (ie_retrogrado_w = 'S' and ie_transmit_special_order = 'S')) then
              CALL call_interface_file(930, 'carestream_phys_japan_l10n_pck.patient_order_info ('|| nr_prescricao_w ||', '|| nr_exame_sequence ||', '||nr_seq_procedimento_ww || ', 1, ''' || nm_usuario_p || ''' , 0, null, ' || cd_estabelecimento_w || ');' , nm_usuario_p);
          end if;
      end;
    end loop;
    close c50;

end if;

if (ie_tipo_pessoa_p <> 'S' or (ie_tipo_pessoa_p = 'S' and ie_lib_sem_interv_w = 'S')) then
  update  prescr_medica_compl
  set  cd_perfil_enf = cd_perfil_enf_w,
    cd_funcao_ativa_enf = cd_funcao_ativa_enf_w
  where   nr_prescricao = nr_prescricao_p;
end if;

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then
    open c51;
    loop
    fetch c51 into
      nr_seq_proc_interno_ww,
      nr_seq_proc_cpoe_ww,
      dt_desired_start_w,
      qt_duration_w,
                        cd_posicao_w,
						ie_lado_w;
    EXIT WHEN NOT FOUND; /* apply on c51 */
    begin
      CALL insert_waiting_list_cpoe(nr_seq_proc_interno_ww, cd_pessoa_fisica_w, null, null, null, null, null, nm_usuario_p, nr_seq_proc_cpoe_ww, dt_desired_start_w, qt_duration_w,cd_posicao_w,ie_lado_w);
    end;
    end loop;
    close c51;
end if;
CALL adep_checagem_automatica_proc(nr_prescricao_p, nm_usuario_p, cd_perfil_p);

if (vetor_lista_materiais_w.count > 0) then

   nr_contador_w := 0;

   while(nr_contador_w < vetor_lista_materiais_w.count)
     loop

        nr_sequencia_w   := vetor_lista_materiais_w(nr_contador_w);
        CALL adep_gerar_area_prep(nr_prescricao_p, nr_sequencia_w, nm_usuario_p);
        nr_contador_w   := nr_contador_w + 1;

     end loop;

end if;

/*Treatment Interface CPOE Triggerpoint Starts*/

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then
    if (coalesce(ds_erro_p::text, '') = '') and (ie_liberado_w IS NOT NULL AND ie_liberado_w::text <> '') then
       for r_c56 in c56 loop
            begin
             if (r_c56.nr_seq_sub_grp = 'PC') then
                select    coalesce(max(c.ie_record_execution),'N')
                into STRICT      ie_record_execution_w
                from      cpoe_procedimento c,
                          prescr_procedimento p,
                          proc_interno pi,
                          proc_interno_classif fi
                where     c.nr_sequencia = p.nr_seq_proc_cpoe
                and       pi.nr_sequencia = c.nr_seq_proc_interno
                and       pi.nr_Seq_classif = fi.nr_sequencia
                and       pi.nr_Sequencia = c.nr_seq_proc_interno
                and       fi.ds_sigla ='P0'
                and       p.nr_prescricao = nr_prescricao_p;

                if (ie_record_execution_w = 'S') then
                    ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p|| '"' || '}';
                    json_data_w := bifrost.send_integration_content('nais.mla.treatment.emar', ds_param_integration_w, nm_usuario_p);
                end if;
                end if;
            end;
        end loop;
    end if;
end if;
/*Treatment Interface CPOE Triggerpoint Ends*/

/*UnexecutedOrder for Internal Procedure Treatment Interface CPOE Triggerpoint Starts*/

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then
 for r_c56 in c56 loop
 begin
 if (r_c56.nr_seq_sub_grp = 'PC')then
    select is_special_order_rule('PC','A',wheb_usuario_pck.get_cd_estabelecimento)
    into STRICT ie_transmit_special_order
;
    if (ie_transmit_special_order = 'S')then
        ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p || '"' || ', "typePrescription" : "' || 'PC' || '"}';
        json_data_w := bifrost.send_integration_content(nm_event =>'nais.unexecutedOrderPrescription.message', ds_content => ds_param_integration_w, nm_user => nm_usuario_p);
    end if;
 end if;
 end;
 end loop;
end if;
/*UnexecutedOrder for Internal Procedure Treatment Interface CPOE Triggerpoint Ends*/

/*UnexecutedOrder for Gas Therapy Treatment Interface CPOE Triggerpoint Starts*/

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then
 for r_c57 in c57 loop
 begin
 if (r_c57.nr_seq_sub_grp = 'PC')then
    select is_special_order_rule('PC','A',wheb_usuario_pck.get_cd_estabelecimento)
    into STRICT ie_transmit_special_order
;
    if (ie_transmit_special_order = 'S')then
        ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p || '"' || ', "typePrescription" : "' || 'PR' || '"}';
        json_data_w := bifrost.send_integration_content(nm_event =>'nais.unexecutedOrderPrescription.message', ds_content => ds_param_integration_w, nm_user => nm_usuario_p);
    end if;
 end if;
 end;
 end loop;
end if;
/*UnexecutedOrder for Gas Therapy Treatment Interface CPOE Triggerpoint Ends*/

/*Unexecuted order for prescripton Interface CPOE Triggerpoint Starts*/

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then

  select  is_special_order_rule('ME','A',cd_estabelecimento_w)
            into STRICT    ie_transmit_special_order
;
      
    if (coalesce(ds_erro_p::text, '') = '') and (ie_liberado_w IS NOT NULL AND ie_liberado_w::text <> '') and (ie_transmit_special_order = 'S') then
          ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p || '"' || ',
                         "typePrescription" : "' || ie_sub_type_w || '"}';

               json_data_w := bifrost.send_integration_content(nm_event =>'nais.unexecutedOrderRequestPrescription.message', ds_content => ds_param_integration_w, nm_user => nm_usuario_p);

    end if;
end if;
/*Unexecuted order for prescripton Interface CPOE Triggerpoint Ends*/

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then
    if (coalesce(ds_erro_p::text, '') = '') and (ie_liberado_w IS NOT NULL AND ie_liberado_w::text <> '') then
      for r_c55 in c55 loop
        begin
		if (r_c55.nr_seq_sub_grp != 'PC')then
          ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p || '"' || ',
                         "typePrescription" : "' || r_c55.nr_seq_sub_grp || '"}';
          json_data_w := bifrost.send_integration_content('nais.appointment.message', ds_param_integration_w, nm_usuario_p);
          json_data_ww := bifrost.send_integration_content('nais.unexecutedOrder.message', ds_param_integration_w, nm_usuario_p);
		end if;
        end;
      end loop;

        select  coalesce(max(1),0),
                coalesce(max(c.ie_retrogrado),'N')
        into STRICT    ie_exists_w,
                ie_retrogrado_w
        from    cpoe_order_unit a,
                cpoe_tipo_pedido b,
                cpoe_material c,
                prescr_material d,
                prescr_medica f
        where   b.nr_sequencia  = a.nr_seq_cpoe_tipo_pedido
        and     a.nr_sequencia  = c.nr_seq_cpoe_order_unit    
        and     c.nr_sequencia  = d.nr_seq_mat_cpoe
        and     d.nr_prescricao = f.nr_prescricao
        and     b.nr_seq_sub_grp    = 'ME'
        and     a.si_type_of_prescription in ('OPIHO','OPOOH')
        and     d.nr_prescricao = nr_prescricao_p;

        if (ie_exists_w = 1) then
            select  is_special_order_rule('PS','A',cd_estabelecimento_w)
            into STRICT    ie_transmit_special_order
;

            if (ie_retrogrado_w = 'S' and ie_transmit_special_order = 'S') then
                ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p || '"' || '}';
                CALL execute_bifrost_integration(262, ds_param_integration_w); -- OrderRequest
            end if;
        end if;

        ie_exists_w := 0;

        select  coalesce(max(1),0),
                coalesce(max(c.ie_retrogrado),'N'),
                coalesce(max(g.ie_allow_execution),'N')
        into STRICT    ie_exists_w,
                ie_retrogrado_w,
                ie_allow_execution_w
        from    cpoe_order_unit a,
                cpoe_tipo_pedido b,
                cpoe_material c,
                prescr_material d,
                prescr_medica f,
                cpoe_rp g
        where   b.nr_sequencia  = a.nr_seq_cpoe_tipo_pedido
        and     a.nr_sequencia  = c.nr_seq_cpoe_order_unit    
        and     c.nr_sequencia  = d.nr_seq_mat_cpoe
        and     d.nr_prescricao = f.nr_prescricao
        and     c.nr_seq_cpoe_rp = g.nr_sequencia
        and     b.nr_seq_sub_grp    = 'I'
		and     c.ie_controle_tempo = 'S'
        and     d.nr_prescricao = nr_prescricao_p;

         if (ie_exists_w = 1 and ie_allow_execution_w = 'Y') then
            select  is_special_order_rule('IN','A',cd_estabelecimento_w)
            into STRICT    ie_transmit_special_order
;

            if (ie_retrogrado_w = 'N' or (ie_retrogrado_w = 'S' and ie_transmit_special_order = 'S')) then -- Injection interface
                ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p || '"' || '}';
                json_data_w := bifrost.send_integration_content('nais.mla.cpoe.injection', ds_param_integration_w, wheb_usuario_pck.get_nm_usuario);
            end if;
        end if;

    end if;
end if;
if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'ja_JP') then
  if (coalesce(ds_erro_p::text, '') = '' and (ie_liberado_w IS NOT NULL AND ie_liberado_w::text <> '')) then

	select  is_special_order_rule('PS','A',cd_estabelecimento_w)
	into STRICT    ie_transmit_special_order
	;


  select      coalesce(max(c.ie_retrogrado),'N')
  into STRICT
	  ie_retrogrado_w
  from      prescr_material    p,
            cpoe_material      c,
            cpoe_order_unit    a,
            cpoe_tipo_pedido   cp,
            cpoe_rp            d
  where   p.nr_prescricao           =   nr_prescricao_p
  and   p.nr_seq_mat_cpoe           =   c.nr_sequencia
  and   a.nr_seq_cpoe_tipo_pedido   =   cp.nr_sequencia
  and   c.nr_seq_cpoe_order_unit    =   a.nr_sequencia
  and    d.nr_sequencia             =   c.nr_seq_cpoe_rp
  and   a.si_type_of_prescription in ('INPR','INPT','INPI','INPAT','INPDP','BRME')
  and   cp.nr_seq_sub_grp            =   'ME';

    if (  ie_retrogrado_w= 'S' and ie_transmit_special_order = 'S' ) then
        ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p || '"' || '}';
        CALL execute_bifrost_integration(277, ds_param_integration_w); -- Inpatient Prescription
    end if;
	
	
	---------End of Inpatient Prescription
	select count(case b.nr_seq_sub_grp  when 'B' then 1 end),
           count(case b.nr_seq_sub_grp  when 'L' then 1 end)
			into STRICT bacteria_count,
				 specimen_count
        from cpoe_procedimento c, 
             prescr_procedimento p ,
             cpoe_order_unit a,
             cpoe_tipo_pedido b,						
             prescr_medica m,
             exame_laboratorio e,
             proc_interno pi,
             bft_encounter_v v
        where   c.nr_sequencia=p.nr_seq_proc_cpoe 
                and p.nr_prescricao=m.nr_prescricao
                and m.nr_prescricao=p.nr_prescricao
				and p.nr_prescricao=nr_prescricao_p
                and p.nr_seq_exame = e.nr_seq_exame
                and a.nr_seq_cpoe_tipo_pedido   = b.nr_sequencia
                and a.nr_sequencia              = c.nr_seq_cpoe_order_unit
                and coalesce(e.ie_controla_pendente,'S') = 'S' 
                and c.nr_atendimento =  v.encounter_id
                and obter_conversao_externa_int(null,'PROC_INTERNO_CLASSIF','NR_SEQUENCIA', pi.nr_seq_classif, 'NAIS' ) in ( 'E8','E0')
                and b.nr_seq_sub_grp   in ('B' ,'L')           
                and pi.nr_sequencia	= c.nr_seq_proc_interno
				and c.ie_retrogrado ='S';
	
	select  is_special_order_rule('BA','A',cd_estabelecimento_w)
	into STRICT    ie_transmit_special_order
	;
	
	if  bacteria_count > 0 and ie_transmit_special_order = 'S' then
        ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p || '"' || '}';
       CALL execute_bifrost_integration(275,ds_param_integration_w);
    end if;
	
	select  is_special_order_rule('MA','A',cd_estabelecimento_w)
	into STRICT    ie_transmit_special_order
	;
	
	if  specimen_count > 0 and ie_transmit_special_order = 'S' then
        ds_param_integration_w := '{"recordId" : "' || nr_prescricao_p || '"' || '}';
       CALL execute_bifrost_integration(276,ds_param_integration_w);
    end if;
	
  end if;
end if;

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'es_CO') then
    CALL insert_prescr_mipres(nr_prescricao_p, nr_atendimento_p);

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE liberar_prescricao (nr_prescricao_p bigint, nr_atendimento_p bigint, ie_tipo_pessoa_p text, cd_perfil_p bigint, nm_usuario_p text, ie_prescricao_p text, ds_erro_p INOUT text, ie_gera_hor_copia_cpoe_p text default 'S') FROM PUBLIC;

