-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_notas_protocolo ( nr_seq_protocolo_p bigint, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, nr_seq_sit_trib_p bigint, cd_serie_nf_p text, dt_emissao_p timestamp, dt_base_venc_p timestamp, ds_complemento_p text, ds_observacao_p text, nm_usuario_p text, nr_seq_trans_financ_p bigint) AS $body$
DECLARE

 
nr_seq_prestador_w		bigint;
vl_resumo_w			double precision;
cd_pessoa_fisica_w		varchar(10);
cd_cgc_w			varchar(14);
ie_tipo_nota_w			varchar(3);
nr_seq_resumo_w			bigint;
qt_notas_w			integer;
cd_condicao_pagamento_w		bigint;
ds_observacao_w			varchar(255);
nr_seq_nota_fiscal_w		bigint;
vl_ipi_w			double precision;
vl_descontos_w			double precision;
vl_frete_w			double precision;
vl_seguro_w			double precision;
vl_despesa_acessoria_w		double precision;
vl_desconto_rateio_w		double precision;
nr_sequencia_nf_w		bigint;
vl_desc_Item_w			double precision;
vl_desc_Acum_w			double precision;
vl_mercadoria_w			double precision;
vl_total_nota_w			double precision;
vl_unitario_item_w		double precision;
vl_total_item_w			double precision;
cd_estabelecimento_w		bigint;
nr_nota_fiscal_w		bigint;
cd_conta_financ_w		bigint;
ie_tipo_despesa_w		varchar(1);
vl_liberado_w			double precision;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_item_nf_w			integer;
ie_forma_pagamento_w		smallint;
vl_liquido_nota_w		double precision;
ie_tipo_item_w			varchar(1);
cd_material_w			integer;
ds_tipo_despesa_w		varchar(255);
nr_nota_fiscal_serie_w		bigint;
nr_titulo_w			bigint;
ie_geracao_nota_titulo_w	varchar(2);
nr_seq_trans_fin_baixa_conta_w	bigint;

C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		nr_seq_prestador, 
		vl_titulo, 
		nr_nota_fiscal 
	from	pls_prot_conta_titulo 
	where	nr_seq_protocolo = nr_seq_protocolo_p;
	
C02 CURSOR FOR 
	SELECT	ie_tipo_item, 
		ie_tipo_despesa, 
		sum(vl_liberado) vl_liberado, 
		ds_tipo_despesa 
	from (	SELECT	'P' ie_tipo_item, 
			a.ie_tipo_despesa, 
			a.vl_liberado, 
			CASE WHEN ie_tipo_despesa=1 THEN 'Procedimentos' WHEN ie_tipo_despesa=2 THEN 'Taxas' WHEN ie_tipo_despesa=3 THEN 'Diárias'  ELSE '' END  ds_tipo_despesa 
		from	pls_conta_proc a, 
			pls_conta b 
		where	a.nr_seq_conta		= b.nr_sequencia 
		and	b.nr_seq_protocolo	= nr_seq_protocolo_p 
		
UNION ALL
 
		select	'M' ie_tipo_item, 
			a.ie_tipo_despesa, 
			a.vl_liberado, 
			CASE WHEN ie_tipo_despesa='1' THEN 'Gases Medicinais' WHEN ie_tipo_despesa='2' THEN 'Medicamentos' WHEN ie_tipo_despesa='3' THEN 'Materiais' WHEN ie_tipo_despesa='7' THEN 'OPM'  ELSE '' END  ds_tipo_despesa 
		from	pls_conta_mat a, 
			pls_conta b 
		where	a.nr_seq_conta		= b.nr_sequencia 
		and	b.nr_seq_protocolo	= nr_seq_protocolo_p) alias1 
	group by	ie_tipo_item, 
			ie_tipo_despesa, 
			ds_tipo_despesa;

C03 CURSOR FOR 
	SELECT	nr_titulo 
	from	titulo_pagar 
	where	nr_seq_prot_conta	= nr_seq_resumo_w;
	

BEGIN 
 
if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then 
	select	cd_estabelecimento 
	into STRICT	cd_estabelecimento_w 
	from	pls_protocolo_conta 
	where	nr_sequencia = nr_seq_protocolo_p;
		 
	select	nr_seq_trans_fin_baixa_conta 
	into STRICT	nr_seq_trans_fin_baixa_conta_w 
	from	pls_parametros 
	where	cd_estabelecimento = cd_estabelecimento_w;
		 
	open C01;
	loop 
	fetch C01 into 
		nr_seq_resumo_w, 
		nr_seq_prestador_w, 
		vl_resumo_w, 
		nr_nota_fiscal_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		select	count(*) 
		into STRICT	qt_notas_w 
		from	nota_fiscal 
		where	nr_seq_prot_res_pls	= nr_seq_resumo_w;
		 
		if (qt_notas_w > 0) then 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(267427);
		end if;
		 
		if (coalesce(nr_nota_fiscal_w::text, '') = '') then 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(267428);
		end if;
		 
		select	a.cd_pessoa_fisica, 
			a.cd_cgc 
		into STRICT	cd_pessoa_fisica_w, 
			cd_cgc_w 
		from	pls_prestador a 
		where	a.nr_sequencia = nr_seq_prestador_w;
		 
		select	max(cd_condicao_pagamento), 
			max(ie_geracao_nota_titulo) 
		into STRICT	cd_condicao_pagamento_w, 
			ie_geracao_nota_titulo_w 
		from	pls_prestador_pagto 
		where	nr_seq_prestador = nr_seq_prestador_w;
		 
		if (coalesce(cd_condicao_pagamento_w,0) = 0) then 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(267429);
		end if;
		 
		if (coalesce(cd_pessoa_fisica_w::text, '') = '') then 
			ie_tipo_nota_w := 'EN';
		else 
			ie_tipo_nota_w := 'EF';
		end if;
		 
		ds_observacao_w := '';
		 
		if (ie_geracao_nota_titulo_w = 'NT') then /* Gerar a nota e o título */
 
			select	nextval('nota_fiscal_seq') 
			into STRICT	nr_seq_nota_fiscal_w 
			;		
			 
			vl_ipi_w		:= 0;
			vl_descontos_w		:= 0;
			vl_frete_w		:= 0;
			vl_seguro_w		:= 0;
			vl_despesa_acessoria_w	:= 0;
			vl_desconto_rateio_w	:= 0;
			nr_sequencia_nf_w	:= 9;
			vl_desc_Item_w		:= 0;
			vl_desc_Acum_w		:= 0;		
			vl_mercadoria_w		:= vl_resumo_w;
			vl_total_nota_w		:= vl_resumo_w;
			vl_unitario_item_w	:= vl_resumo_w;
			vl_total_item_w		:= vl_resumo_w;
			 
			insert	into	nota_fiscal(nr_sequencia, 
				cd_estabelecimento, 
				cd_cgc_emitente, 
				cd_serie_nf, 
				nr_nota_fiscal, 
				nr_sequencia_nf, 
				cd_operacao_nf, 
				dt_emissao, 
				dt_entrada_saida, 
				ie_acao_nf, 
				ie_emissao_nf, 
				ie_tipo_frete, 
				vl_mercadoria, 
				vl_total_nota, 
				qt_peso_bruto, 
				qt_peso_liquido, 
				dt_atualizacao, 
				nm_usuario, 
				ie_tipo_nota,		 
				cd_condicao_pagamento, 
				cd_natureza_operacao, 
				nr_seq_classif_fiscal, 
				ds_observacao, 
				vl_ipi, 
				vl_descontos, 
				vl_frete, 
				vl_seguro, 
				vl_despesa_acessoria, 
				cd_pessoa_fisica, 
				cd_cgc, 
				nr_seq_prot_res_pls, 
				ie_situacao, 
				nr_lote_contabil, 
				ie_entregue_bloqueto) 
			values (nr_seq_nota_fiscal_w, 
				cd_estabelecimento_w, 
				obter_cgc_estabelecimento(cd_estabelecimento_w), 
				cd_serie_nf_p, 
				nr_nota_fiscal_w, 
				nr_sequencia_nf_w, 
				cd_operacao_nf_p, 
				trunc(dt_emissao_p,'dd'), 
				trunc(dt_emissao_p,'dd'), 
				'1', 
				'0', 
				'0', 
				vl_mercadoria_w, 
				vl_total_nota_w, 
				0, 
				0, 
				clock_timestamp(), 
				nm_usuario_p, 
				ie_tipo_nota_w, 
				cd_condicao_pagamento_w, 
				cd_natureza_operacao_p, 
				null, --nr_seq_classif_fiscal_p 
				ds_observacao_p, 
				vl_ipi_w, 
				vl_descontos_w, 
				vl_frete_w, 
				vl_seguro_w, 
				vl_despesa_acessoria_w, 
				cd_pessoa_fisica_w, 
				cd_cgc_w, 
				nr_seq_resumo_w, 
				'1', 
				0, 
				'N');
			 
			/*  obter itens da conta  */
			 
			open C02;
			loop 
			fetch C02 into	 
				ie_tipo_item_w, 
				ie_tipo_despesa_w, 
				vl_liberado_w, 
				ds_tipo_despesa_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				if (ie_tipo_despesa_w IS NOT NULL AND ie_tipo_despesa_w::text <> '') then 
					if (ie_tipo_item_w	= 'P') then 
						select	max(cd_procedimento), 
							max(ie_origem_proced) 
						into STRICT	cd_procedimento_w, 
							ie_origem_proced_w 
						from	pls_tipo_desp_proc 
						where	ie_tipo_despesa = ie_tipo_despesa_w 
						and	cd_estabelecimento	= cd_estabelecimento_w;
						 
						if (coalesce(cd_procedimento_w::text, '') = '') then 
							CALL wheb_mensagem_pck.exibir_mensagem_abort(267430, 
												'DS_TIPO_DESPESA_W=' || ds_tipo_despesa_w);
						end if;
						 
						cd_conta_financ_w := obter_conta_financeira(	'S', cd_estabelecimento_w, null, cd_procedimento_w, ie_origem_proced_w, null, null, null, null, cd_conta_financ_w, null, cd_operacao_nf_p, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
														 
					elsif (ie_tipo_item_w	= 'M') then 
						begin 
						select	max(b.cd_material) 
						into STRICT	cd_material_w 
						from	pls_tipo_desp_mat a, 
							pls_material b 
						where	a.nr_seq_material	= b.nr_sequencia 
						and	a.ie_tipo_despesa	= ie_tipo_despesa_w 
						and	a.cd_estabelecimento	= cd_estabelecimento_w;
						exception 
						when others then 
							CALL wheb_mensagem_pck.exibir_mensagem_abort(267431, 
												'DS_TIPO_DESPESA_W=' || ds_tipo_despesa_w);
						end;
						 
						cd_conta_financ_w := obter_conta_financeira(	'S', cd_estabelecimento_w, cd_material_w, null, null, null, null, null, null, cd_conta_financ_w, null, cd_operacao_nf_p, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
					end if;
					 
					select	coalesce(max(nr_item_nf),0) + 1 
					into STRICT		nr_item_nf_w 
					from		nota_fiscal_item 
					where		nr_sequencia	= nr_seq_nota_fiscal_w;
						 
					insert	into nota_fiscal_item(	nr_sequencia, 
							cd_estabelecimento, 
							cd_cgc_emitente, 
							cd_serie_nf, 
							nr_nota_fiscal, 
							nr_sequencia_nf, 
							nr_item_nf, 
							cd_natureza_operacao, 
							qt_item_nf, 
							vl_unitario_item_nf, 
							vl_total_item_nf, 
							vl_liquido, 
							vl_frete, 
							vl_desconto, 
							vl_despesa_acessoria, 
							vl_desconto_rateio, 
							vl_seguro, 
							nm_usuario, 
							dt_atualizacao, 
							ds_complemento, 
							cd_procedimento, 
							ie_origem_proced, 
							nr_seq_conta_financ, 
							cd_material) 
						values (nr_seq_nota_fiscal_w, 
							cd_estabelecimento_w, 
							obter_cgc_estabelecimento(cd_estabelecimento_w), 
							cd_serie_nf_p, 
							nr_nota_fiscal_w, 
							nr_sequencia_nf_w, 
							nr_item_nf_w, 
							cd_natureza_operacao_p, 
							1, 
							vl_liberado_w, 
							vl_liberado_w, 
							vl_liberado_w, 
							vl_frete_w, 
							vl_descontos_w, 
							vl_despesa_acessoria_w, 
							0, 
							0, 
							nm_usuario_p, 
							clock_timestamp(), 
							ds_complemento_p, 
							CASE WHEN ie_tipo_item_w='P' THEN cd_procedimento_w  ELSE null END , 
							CASE WHEN ie_tipo_item_w='P' THEN ie_origem_proced_w  ELSE null END , 
							CASE WHEN cd_conta_financ_w=0 THEN null  ELSE cd_conta_financ_w END , 
							CASE WHEN ie_tipo_item_w='M' THEN cd_material_w  ELSE null END );
					end if;
			end loop;
			close C02;
			 
			CALL Gerar_Imposto_NF(nr_seq_nota_fiscal_w, nm_usuario_p, null, null);
			 
			CALL atualiza_total_nota_fiscal(nr_seq_nota_fiscal_w,nm_usuario_p);
			 
			select	max(ie_forma_pagamento) 
			into STRICT	ie_forma_pagamento_w 
			from	condicao_pagamento 
			where	cd_condicao_pagamento	= cd_condicao_pagamento_w;
			 
			/* Conforme vencimentos */
 
			if (ie_forma_pagamento_w = 10) then 
				select	coalesce(vl_total_nota,0) 
				into STRICT	vl_liquido_nota_w 
				from	nota_fiscal 
				where	nr_sequencia	= nr_seq_nota_fiscal_w;
				 
				insert	into nota_fiscal_venc(nr_sequencia, 
					nm_usuario, 
					dt_atualizacao, 
					cd_estabelecimento, 
					cd_cgc_emitente, 
					cd_serie_nf, 
					nr_nota_fiscal, 
					nr_sequencia_nf, 
					dt_vencimento, 
					vl_vencimento, 
					ie_origem) 
				values (nr_seq_nota_fiscal_w, 
					nm_usuario_p, 
					clock_timestamp(), 
					cd_estabelecimento_w, 
					obter_cgc_estabelecimento(cd_estabelecimento_w), 
					cd_serie_nf_p, 
					nr_nota_fiscal_w, 
					1, 
					dt_base_venc_p, 
					vl_liquido_nota_w, 
					'N');
			else 
				CALL Gerar_Nota_Fiscal_Venc(nr_seq_nota_fiscal_w, dt_base_venc_p);		
			end if;
			 
			select	max(nr_titulo) 
			into STRICT	nr_titulo_w 
			from	titulo_pagar 
			where	nr_seq_prot_conta = nr_seq_resumo_w;
			 
			/* Se ainda não tem título gerado */
 
			if (coalesce(nr_titulo_w::text, '') = '') then 
				 
				CALL gerar_titulo_pagar_nf(nr_seq_nota_fiscal_w,nm_usuario_p);
				 
				select	max(nr_titulo) 
				into STRICT	nr_titulo_w 
				from	titulo_pagar 
				where	nr_seq_prot_conta = nr_seq_resumo_w;
				 
				if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then 
					CALL gerar_bloqueto_tit_rec(nr_titulo_w, 'OO');
				end if;
			else 
				update	titulo_pagar 
				set	nr_seq_nota_fiscal	= nr_seq_nota_fiscal_w 
				where	nr_titulo		= nr_titulo_w;
			end if;
		else /* gerar somente o título para pessoa física */
 
			CALL pls_gerar_titulo_protocolo(nr_seq_protocolo_p, nm_usuario_p, cd_estabelecimento_w);
		end if;
		 
		open C03;
		loop 
		fetch C03 into	 
			nr_titulo_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			update	titulo_pagar 
			set	nr_seq_trans_fin_baixa = nr_seq_trans_fin_baixa_conta_w 
			where	nr_titulo = nr_titulo_w;
		end loop;
		close C03;
		 
	end loop;
	close C01;	
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_notas_protocolo ( nr_seq_protocolo_p bigint, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, nr_seq_sit_trib_p bigint, cd_serie_nf_p text, dt_emissao_p timestamp, dt_base_venc_p timestamp, ds_complemento_p text, ds_observacao_p text, nm_usuario_p text, nr_seq_trans_financ_p bigint) FROM PUBLIC;

