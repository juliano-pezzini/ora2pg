-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE man_atribuir_story_sprint ( nr_story_p bigint, nr_sprint_p bigint, nr_sprint_atual_p bigint, nm_usuario_p text, ds_erro_p INOUT text) AS $body$
DECLARE


nr_sprint_planejado_w	desenv_sprint.nr_sequencia%type;
dt_sprint_planejado_w	desenv_sprint.dt_inicial%type;
dt_sprint_final_plan_w	desenv_sprint.dt_final%type;
cd_status_w		desenv_story.cd_status%type;
dt_final_w		desenv_sprint.dt_final%type;
qt_existe_w		bigint;
nr_ordem_servico_w	desenv_story_sprint.nr_ordem_servico%type;


BEGIN

select	fim_dia(max(dt_final))
into STRICT	dt_final_w
from	desenv_sprint
where	nr_sequencia = nr_sprint_p;

if (dt_final_w < clock_timestamp()) then
	ds_erro_p := wheb_mensagem_pck.get_texto(336091); --Este sprint já terminou.
	return;
end if;

select	count(*)
into STRICT	qt_existe_w
from	desenv_story_sprint a,
	desenv_sprint b
where	nr_story = nr_story_p
and	a.nr_sprint = b.nr_sequencia
and	((nr_sprint_p = a.nr_sprint) or ((not clock_timestamp() between b.dt_inicial and b.dt_final) and (not(clock_timestamp() > b.dt_final))))
and	coalesce(nr_sprint,0) <> coalesce(nr_sprint_atual_p,0);

if (qt_existe_w > 0) then
	ds_erro_p := wheb_mensagem_pck.get_texto(336113); --Esta Story já foi planejada para esse Sprint.
	return;
end if;

select	max(nr_ordem_servico)
into STRICT	nr_ordem_servico_w
from	desenv_story_sprint
where	nr_story = nr_story_p
and	nr_sprint = nr_sprint_atual_p;

select	max(a.nr_sprint),
	max(b.dt_inicial),
	max(b.dt_final),
	coalesce(max(a.cd_status),0)
into STRICT	nr_sprint_planejado_w,
	dt_sprint_planejado_w,
	dt_sprint_final_plan_w,
	cd_status_w
from	desenv_story_sprint a,
	desenv_sprint b
where	a.nr_sprint = b.nr_sequencia
and	a.nr_story = nr_story_p
and	a.nr_sprint = nr_sprint_atual_p;

if (cd_status_w = 4) then
	ds_erro_p := 'This story is already done. It can''t be moved to a new Sprint.';
	return;
end if;

if (coalesce(nr_sprint_atual_p::text, '') = '') then
	update	desenv_story_sprint
	set	nr_sprint = nr_sprint_p,
		nm_usuario = nm_usuario_p,
		dt_atualizacao = clock_timestamp(),
		dt_atualizacao_nrec = clock_timestamp(),
		ie_cancelado_sprint = 'N'
	where	coalesce(nr_sprint::text, '') = ''
	and	nr_story = nr_story_p;
end if;

if (nr_sprint_atual_p IS NOT NULL AND nr_sprint_atual_p::text <> '') or (NOT FOUND) then
	if (dt_sprint_planejado_w > clock_timestamp()) or
		((dt_sprint_planejado_w IS NOT NULL AND dt_sprint_planejado_w::text <> '') and (cd_status_w = 0) and (fim_dia(dt_sprint_final_plan_w) > clock_timestamp())) then
		update	desenv_story_sprint
		set	nr_sprint = nr_sprint_p,
			nm_usuario = nm_usuario_p,
			dt_atualizacao = clock_timestamp(),
			dt_atualizacao_nrec = clock_timestamp(),
			ie_cancelado_sprint = 'N'
		where	nr_sprint = nr_sprint_planejado_w
		and	nr_story = nr_story_p;
	else
		delete	from desenv_story_sprint
		where	nr_story = nr_story_p
		and	coalesce(nr_sprint::text, '') = '';

		insert	into desenv_story_sprint(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_story,
			nr_sprint,
			nr_ordem_servico,
			cd_status)
		values (	nextval('desenv_story_sprint_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_story_p,
			nr_sprint_p,
			nr_ordem_servico_w,
			cd_status_w);

		insert	into desenv_story_sprint(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_story,
			nr_sprint,
			nr_ordem_servico,
			cd_status)
		SELECT	nextval('desenv_story_sprint_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			a.nr_sequencia,
			nr_sprint_p,
			b.nr_ordem_servico,
			b.cd_status
		from	desenv_story a,
			desenv_story_sprint b
		where	a.nr_sequencia = b.nr_story
		and	a.nr_story = nr_story_p
		and	b.nr_sprint = nr_sprint_atual_p
		and	b.cd_status < 4
		and	not exists (	SELECT	1
					from	desenv_story_sprint
					where	nr_sprint = nr_sprint_p
					and	nr_story = a.nr_sequencia);

	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE man_atribuir_story_sprint ( nr_story_p bigint, nr_sprint_p bigint, nr_sprint_atual_p bigint, nm_usuario_p text, ds_erro_p INOUT text) FROM PUBLIC;

