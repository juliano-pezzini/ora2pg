-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_taxa_adm_pos_estab ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_contrato_p pls_contrato.nr_sequencia%type, nr_seq_intercambio_p pls_intercambio.nr_sequencia%type, nr_seq_plano_p pls_plano.nr_sequencia%type, dt_emissao_p pls_conta.dt_emissao%type, nr_seq_congenere_p pls_congenere.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text default 'S') AS $body$
DECLARE

			
vl_taxa_pos_w			pls_conta_pos_estab_taxa.vl_taxa_manutencao%type;
ie_tipo_taxa_w			pls_conta_pos_estab_taxa.ie_tipo_taxa%type;
nr_seq_lote_disc_w		pls_lote_discussao.nr_sequencia%type;
index_w					integer;
qt_grupo_proc_mat_w		integer;

tb_nr_seq_conta_pos_estab_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_regra_w			pls_util_cta_pck.t_number_table;
tb_vl_taxa_pos_w			pls_util_cta_pck.t_number_table;
tb_ie_tipo_taxa_w			pls_util_cta_pck.t_varchar2_table_2;
ie_excecao_regra_w		varchar(1) := 'N';
ie_regra_com_excecao_w	varchar(1) := 'N';
nr_seq_prestador_solic_w	pls_conta_proc_v.nr_seq_prestador_solic%type;
nr_seq_prestador_exec_w		pls_conta_proc_v.nr_seq_prestador_exec%type;
nr_seq_prestador_prot_w		pls_conta_proc_v.nr_seq_prestador_prot%type;
ie_origem_protocolo_w		pls_conta_proc_v.ie_origem_protocolo%type;
ie_tipo_guia_w				pls_conta_proc_v.ie_tipo_guia%type;
nr_seq_clinica_w			pls_conta_proc_v.nr_seq_clinica%type;
index_upd_w					integer := 0;
tb_nr_seq_conta_pos_upd_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_regra_upd_w	        pls_util_cta_pck.t_number_table;
tb_vl_taxa_pos_upd_w            pls_util_cta_pck.t_number_table;
tb_ie_tipo_taxa_upd_w	        pls_util_cta_pck.t_varchar2_table_2;


C01 CURSOR(	nr_seq_contrato_pc		pls_contrato.nr_sequencia%type,
		nr_seq_intercambio_pc		pls_intercambio.nr_sequencia%type,
		dt_mesano_referencia_pc		timestamp,
		nr_seq_plano_pc			pls_plano.nr_sequencia%type,
		nr_seq_conta_pc			pls_conta.nr_sequencia%type,
		nr_seq_congenere_pc		pls_congenere.nr_sequencia%type) FOR
		
	SELECT	a.tx_administracao,
		a.vl_informado,
		a.nr_seq_grupo_servico,
		a.nr_seq_grupo_material,
		a.nr_sequencia nr_seq_regra,
		null nr_seq_sca,
		coalesce(a.ie_repassa_medico, 'E') ie_repassa_medico
	from	pls_regra_pos_estabelecido	a,
		pls_contrato			b
	where	a.nr_seq_contrato	= b.nr_sequencia
	and	b.nr_sequencia		= nr_seq_contrato_pc
	and	dt_mesano_referencia_pc between trunc(coalesce(dt_vigencia_inicio,dt_mesano_referencia_pc)) and
								fim_dia(trunc(coalesce(dt_vigencia_fim,dt_mesano_referencia_pc)))
	and	coalesce(a.ie_cobranca,'A')	= 'A'
	
union all

	SELECT	a.tx_administracao,
		a.vl_informado,
		a.nr_seq_grupo_servico,
		a.nr_seq_grupo_material,
		a.nr_sequencia,
		null nr_seq_sca,
		coalesce(a.ie_repassa_medico, 'E') ie_repassa_medico
	from	pls_regra_pos_estabelecido	a,
		pls_intercambio			b
	where	a.nr_seq_intercambio	= b.nr_sequencia
	and	b.nr_sequencia		= nr_seq_intercambio_pc
	and	dt_mesano_referencia_pc between trunc(coalesce(dt_vigencia_inicio,dt_mesano_referencia_pc)) and 
								fim_dia(trunc(coalesce(dt_vigencia_fim,dt_mesano_referencia_pc)))
	and	coalesce(a.ie_cobranca,'A')	= 'A'
	
union all

	select	a.tx_administracao,
		a.vl_informado,
		a.nr_seq_grupo_servico,
		a.nr_seq_grupo_material,
		a.nr_sequencia,
		null nr_seq_sca,
		coalesce(a.ie_repassa_medico, 'E') ie_repassa_medico
	from	pls_regra_pos_estabelecido	a
	where	a.nr_seq_plano	= nr_seq_plano_pc
	and	trunc(dt_mesano_referencia_pc) between trunc(coalesce(dt_vigencia_inicio,dt_mesano_referencia_pc)) and 
								fim_dia(trunc(coalesce(dt_vigencia_fim,dt_mesano_referencia_pc)))
	and	not exists	(select	1
				from	pls_regra_pos_estabelecido x
				where	((x.nr_seq_contrato	= nr_seq_contrato_pc) or (x.nr_seq_intercambio = nr_seq_intercambio_pc)))
	and	coalesce(a.ie_cobranca,'A')	= 'A'
	
union all

	select	a.tx_administracao,
		a.vl_informado,
		a.nr_seq_grupo_servico,
		a.nr_seq_grupo_material,
		a.nr_sequencia,
		a.nr_seq_plano nr_seq_sca,
		coalesce(a.ie_repassa_medico, 'E') ie_repassa_medico
	from	pls_regra_pos_estabelecido	a
	where	trunc(dt_mesano_referencia_pc) between trunc(coalesce(dt_vigencia_inicio,dt_mesano_referencia_pc)) and 
								fim_dia(trunc(coalesce(dt_vigencia_fim,dt_mesano_referencia_pc)))
	and	not exists	(select	1
				from	pls_regra_pos_estabelecido x
				where	((x.nr_seq_contrato	= nr_seq_contrato_pc) or (x.nr_seq_intercambio = nr_seq_intercambio_pc)))	
	and	exists (select	1
			from	pls_conta_pos_estabelecido	x
			where	x.nr_seq_conta 	= nr_seq_conta_pc
			and	x.nr_seq_sca 	= a.nr_seq_plano)
	and	coalesce(a.ie_cobranca,'A')	= 'A'
	
union all

	select	a.tx_administracao,
		a.vl_informado,
		a.nr_seq_grupo_servico,
		a.nr_seq_grupo_material,
		a.nr_sequencia,
		null nr_seq_sca,
		coalesce(a.ie_repassa_medico, 'E') ie_repassa_medico
	from	pls_regra_pos_estabelecido	a
	where	a.nr_seq_congenere	= nr_seq_congenere_pc
	and	trunc(dt_mesano_referencia_pc) between trunc(coalesce(dt_vigencia_inicio,dt_mesano_referencia_pc)) and 
								fim_dia(trunc(coalesce(dt_vigencia_fim,dt_mesano_referencia_pc)))
	and	not exists	(select	1
				from	pls_regra_pos_estabelecido x
				where	((x.nr_seq_contrato = nr_seq_contrato_pc) or (x.nr_seq_intercambio = nr_seq_intercambio_pc) or (x.nr_seq_plano = nr_seq_plano_pc)))
	and	coalesce(a.ie_cobranca,'A')	= 'A';

C02 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type,
		nr_seq_sca_pc		pls_plano.nr_sequencia%type,
		ie_repassa_medico_pc	pls_regra_pos_estabelecido.ie_repassa_medico%type,
		nr_seq_lote_disc_pc	pls_lote_discussao.nr_sequencia%type) FOR
	SELECT	a.vl_beneficiario,
		a.nr_sequencia nr_seq_conta_pos_estab,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_seq_material,
		a.nr_seq_conta_proc,
		a.nr_seq_conta_mat,
		( 	SELECT count(1)
			from	w_pls_lote_fat_item x,
					pls_conta_pos_estab_taxa y
			where	x.nr_seq_pos_estab_taxa = y.nr_sequencia
			and 	y.nr_seq_conta_pos_estab = a.nr_sequencia) qt_lote_fat_item,
		( 	select count(1)
			from	pls_fatura_proc x,
					pls_conta_pos_estab_taxa y
			where	x.nr_seq_pos_estab_taxa = y.nr_sequencia
			and 	y.nr_seq_conta_pos_estab = a.nr_sequencia) qt_fatura_proc,
		( 	select count(1)
			from	pls_fatura_mat x,
					pls_conta_pos_estab_taxa y
			where	x.nr_seq_pos_estab_taxa = y.nr_sequencia
			and 	y.nr_seq_conta_pos_estab = a.nr_sequencia) qt_fatura_mat,
		(	select	count(1)
			from	pls_conta_pos_estab_taxa	z
			where	z.nr_seq_conta_pos_estab	= a.nr_sequencia) qt_reg_tx_existente
	from	pls_conta_pos_estabelecido	a
	where	a.nr_seq_conta = nr_seq_conta_pc
	and (a.nr_seq_sca = nr_seq_sca_pc or coalesce(nr_seq_sca_pc::text, '') = '')
	and (a.nr_seq_lote_disc	= nr_seq_lote_disc_pc or coalesce(nr_seq_lote_disc_pc::text, '') = '')
	and (exists (select	1
			from	pls_conta_proc x
			where	x.nr_sequencia = a.nr_seq_conta_proc
			and	x.ie_repassa_medico = ie_repassa_medico_pc) or ie_repassa_medico_pc = 'E')
	and	not exists (select 1
				from 	pls_regra_tx_opme r
				where	r.ie_aplica_tx_adm	= 'N'
				and	r.nr_sequencia		= a.nr_seq_regra_tx_opme);
	
BEGIN

select	max(nr_seq_lote_disc)
into STRICT	nr_seq_lote_disc_w
from	pls_conta_pos_estabelecido
where	nr_seq_conta	= nr_seq_conta_p;
						
for r_c01_w in C01( nr_seq_contrato_p, nr_seq_intercambio_p, trunc(dt_emissao_p), nr_seq_plano_p, nr_seq_conta_p, nr_seq_congenere_p) loop	

	for r_c02_w in C02(nr_seq_conta_p, r_c01_w.nr_seq_sca, r_c01_w.ie_repassa_medico, nr_seq_lote_disc_w) loop	
	
		-- antes não excluia esses registros envolvidos em lotes de faturamento, agora trata para que não sofram atualização.
		if ( r_c02_w.qt_lote_fat_item = 0 and r_c02_w.qt_fatura_proc = 0 and r_c02_w.qt_fatura_mat = 0 ) then
		
			vl_taxa_pos_w 		:= 0;
			qt_grupo_proc_mat_w 	:= 0;
			
			if (r_c01_w.nr_seq_grupo_servico IS NOT NULL AND r_c01_w.nr_seq_grupo_servico::text <> '') or (r_c01_w.nr_seq_grupo_material IS NOT NULL AND r_c01_w.nr_seq_grupo_material::text <> '') then
				if (r_c02_w.cd_procedimento IS NOT NULL AND r_c02_w.cd_procedimento::text <> '') and (r_c01_w.nr_seq_grupo_servico IS NOT NULL AND r_c01_w.nr_seq_grupo_servico::text <> '') then
					select	count(1)
					into STRICT	qt_grupo_proc_mat_w
					from	pls_proc_grup_serv_v a
					where	a.nr_seq_grupo 		= r_c01_w.nr_seq_grupo_servico
					and	a.ie_origem_proced 	= r_c02_w.ie_origem_proced
					and	a.cd_procedimento 	= r_c02_w.cd_procedimento;
				elsif (r_c02_w.nr_seq_material IS NOT NULL AND r_c02_w.nr_seq_material::text <> '') and (r_c01_w.nr_seq_grupo_material IS NOT NULL AND r_c01_w.nr_seq_grupo_material::text <> '') then
					select	count(1)
					into STRICT	qt_grupo_proc_mat_w
					from	pls_preco_grupo_mat_v a
					where	a.nr_seq_grupo 		= r_c01_w.nr_seq_grupo_material
					and	a.nr_seq_material 	= r_c02_w.nr_seq_material;
				end if;	
				
				if (qt_grupo_proc_mat_w > 0) then
					if (r_c01_w.vl_informado > 0) then
						vl_taxa_pos_w	:= r_c01_w.vl_informado;
						ie_tipo_taxa_w	:= '1';
					end if;

					if (r_c01_w.tx_administracao > 0) then
						vl_taxa_pos_w	:= (r_c02_w.vl_beneficiario * r_c01_w.tx_administracao) / 100;
						ie_tipo_taxa_w	:= '2';
					end if;
				end if;	
			else
				if (r_c01_w.vl_informado > 0) then
					vl_taxa_pos_w	:= r_c01_w.vl_informado;
					ie_tipo_taxa_w	:= '1';
				end if;

				if (r_c01_w.tx_administracao > 0) then
					vl_taxa_pos_w	:= (r_c02_w.vl_beneficiario * r_c01_w.tx_administracao) / 100;
					ie_tipo_taxa_w	:= '2';
				end if;
			end if;

			select 	CASE WHEN count(1)=0 THEN  'N'  ELSE 'S' END
			into STRICT	ie_regra_com_excecao_w
			from	pls_regra_pos_estab_exce
			where	nr_seq_regra = r_c01_w.nr_seq_regra;
				
			if (ie_regra_com_excecao_w = 'S') then
			
				if (r_c02_w.nr_seq_conta_proc is not  null) then
				
					select 	max(nr_seq_prestador_solic),
							max(nr_seq_prestador_exec),
							max(nr_seq_prestador_prot),
							max(ie_origem_protocolo),
							max(ie_tipo_guia),
							max(nr_seq_clinica)
					into STRICT	nr_seq_prestador_solic_w,
							nr_seq_prestador_exec_w,
							nr_seq_prestador_prot_w,
							ie_origem_protocolo_w,
							ie_tipo_guia_w,
							nr_seq_clinica_w
					from	pls_conta_proc_v
					where 	nr_sequencia = r_c02_w.nr_seq_conta_proc;
				else
					select 	max(nr_seq_prestador_solic),
							max(nr_seq_prestador_exec),
							max(nr_seq_prestador_prot),
							max(ie_origem_protocolo),
							max(ie_tipo_guia),
							max(nr_seq_clinica)
					into STRICT	nr_seq_prestador_solic_w,
							nr_seq_prestador_exec_w,
							nr_seq_prestador_prot_w,
							ie_origem_protocolo_w,
							ie_tipo_guia_w,
							nr_seq_clinica_w
					from	pls_conta_mat_v
					where 	nr_sequencia = r_c02_w.nr_seq_conta_mat;
				end if;					
						
				ie_excecao_regra_w := pls_obter_exce_regra_taxa_pos( r_c01_w.nr_seq_regra, r_c02_w.cd_procedimento, r_c02_w.ie_origem_proced,
																	ie_origem_protocolo_w, ie_tipo_guia_w, nr_seq_clinica_w,
																	nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prestador_prot_w);
																																											
			end if;
			
			if (ie_excecao_regra_w = 'N') then		
			
				if ( r_c02_w.qt_reg_tx_existente = 0) then
					if (vl_taxa_pos_w > 0) then
						index_w	:= tb_nr_seq_conta_pos_estab_w.count + 1;
						tb_nr_seq_conta_pos_estab_w(index_w) 	:= r_c02_w.nr_seq_conta_pos_estab;
						tb_nr_seq_regra_w(index_w)		:= r_c01_w.nr_seq_regra;
						tb_vl_taxa_pos_w(index_w) 		:= vl_taxa_pos_w;
						tb_ie_tipo_taxa_w(index_w)		:= ie_tipo_taxa_w;
					end if;
				else
					--Se for atualização, então não restrinjo por valor de taxa maor que zero, pois senão o valor ficará desatualizado
					index_upd_w	:= tb_nr_seq_conta_pos_upd_w.count + 1;
					tb_nr_seq_conta_pos_upd_w(index_upd_w) 	:= r_c02_w.nr_seq_conta_pos_estab;
					tb_nr_seq_regra_upd_w(index_upd_w)		:= r_c01_w.nr_seq_regra;
					tb_vl_taxa_pos_upd_w(index_upd_w) 		:= vl_taxa_pos_w;
					tb_ie_tipo_taxa_upd_w(index_upd_w)		:= ie_tipo_taxa_w;
				end if;
				
			end if;
			
		end if;
		
	end loop;
end loop;

forall i in tb_nr_seq_conta_pos_estab_w.first..tb_nr_seq_conta_pos_estab_w.last
	insert into pls_conta_pos_estab_taxa(nr_sequencia,
		dt_atualizacao,
		dt_atualizacao_nrec,
		nm_usuario,
		nm_usuario_nrec,
		nr_seq_conta_pos_estab,
		nr_seq_regra_pos_estab,
		vl_taxa_manutencao,
		ie_tipo_taxa)
	values (nextval('pls_conta_pos_estab_taxa_seq'),
		clock_timestamp(),
		clock_timestamp(),
		nm_usuario_p,
		nm_usuario_p,
		tb_nr_seq_conta_pos_estab_w(i),
		tb_nr_seq_regra_w(i),
		tb_vl_taxa_pos_w(i),
		tb_ie_tipo_taxa_w(i));
		
forall i in tb_nr_seq_conta_pos_upd_w.first..tb_nr_seq_conta_pos_upd_w.last
	update	pls_conta_pos_estab_taxa set
			dt_atualizacao = clock_timestamp(),
			nm_usuario = nm_usuario_p,
			nr_seq_regra_pos_estab = tb_nr_seq_regra_upd_w(i),
			vl_taxa_manutencao = tb_vl_taxa_pos_upd_w(i),
			ie_tipo_taxa = tb_ie_tipo_taxa_upd_w(i)
	where nr_seq_conta_pos_estab = tb_nr_seq_conta_pos_upd_w(i);
	

		
--Gerar os dados de contabilidade da taxa administrativa de pós-estabelecido
if (tb_nr_seq_conta_pos_estab_w.count > 0 or tb_nr_seq_conta_pos_upd_w.count > 0) then
	CALL pls_gerar_contab_taxa_val_adic(nr_seq_conta_p,nm_usuario_p);
end if;

delete 	FROM pls_conta_pos_estab_taxa a
where 	a.nr_seq_conta_pos_estab in (	SELECT	b.nr_sequencia
					from	pls_conta_pos_estabelecido b
					where	b.nr_seq_conta = nr_seq_conta_p)
and	not exists (select	1
			from	pls_conta_pos_taxa_contab x
			where	x.nr_seq_pos_estab_taxa	= a.nr_sequencia);
			
if (ie_commit_p = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_taxa_adm_pos_estab ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_contrato_p pls_contrato.nr_sequencia%type, nr_seq_intercambio_p pls_intercambio.nr_sequencia%type, nr_seq_plano_p pls_plano.nr_sequencia%type, dt_emissao_p pls_conta.dt_emissao%type, nr_seq_congenere_p pls_congenere.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text default 'S') FROM PUBLIC;

