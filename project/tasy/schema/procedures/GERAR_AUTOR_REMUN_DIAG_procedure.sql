-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_autor_remun_diag ( qt_dias_leitura_p bigint default 30, cd_estabelecimento_p bigint default null, nm_usuario_p text DEFAULT NULL, nr_seq_dados_clinicos_p bigint default null) AS $body$
DECLARE


nr_sequencia_w 			autorizacao_convenio.nr_sequencia%type;
dt_atualizacao_w 		timestamp;
nm_usuario_w 			usuario.nm_usuario%type;
dt_atualizacao_nrec_w 		timestamp;
nm_usuario_nrec_w 		usuario.nm_usuario%type;
nr_seq_dados_clinicos 		dados_clinicos_mod_remun.nr_sequencia%type;
nr_carteira_w 			dados_clinicos_mod_retorno.nr_carteira%type;
ds_rede_cliente_w 		dados_clinicos_mod_retorno.ds_rede_cliente%type;
ds_status_w 			dados_clinicos_mod_retorno.ds_status%type;
cd_prestador_w 			dados_clinicos_mod_retorno.cd_prestador%type;
ie_situacao_eleg_w 		dados_clinicos_mod_retorno.ie_situacao_eleg%type;
nr_sequencia_autor_w 		autorizacao_convenio.nr_sequencia%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
nr_seq_estagio_w		estagio_autorizacao.nr_sequencia%type;
cd_medico_w 			dados_clinicos_mod_remun.cd_medico%type;
ie_tipo_dia_w 			autorizacao_convenio.ie_tipo_dia%type := 'C';
cd_convenio_w 			dados_clinicos_mod_remun.cd_convenio%type;
nr_doc_convenio_w 		dados_clinicos_mod_remun.nr_doc_convenio%type;
ie_tipo_autor_remu_w    	constant autorizacao_convenio.ie_tipo_autorizacao%type := '7';
ie_tipo_autor_proc_w    	constant autorizacao_convenio.ie_tipo_autorizacao%type := '3';
cd_pessoa_fisica_w      	dados_clinicos_mod_remun.cd_pessoa_fisica%type;
ie_classificacao_w		dados_clin_mod_ret_classif.ie_classificacao%type;
cd_procedimento_w		procedimento.cd_procedimento%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;
nr_seq_proc_interno_w		proc_interno.nr_sequencia%type;
nr_seq_classif_w		classif_autorizacao.nr_sequencia%type;
ie_tipo_autorizacao_w   	autorizacao_convenio.ie_tipo_autorizacao%type;
nr_seq_proc_autor_w     	procedimento_autorizado.nr_sequencia%type;
qt_autorizada_w         	procedimento_autorizado.qt_autorizada%type := 1;
qt_solicitada_w         	procedimento_autorizado.qt_solicitada%type := 1;
dt_inicio_w			dados_clin_mod_ret_classif.dt_inicio%type;
dt_fim_w			dados_clin_mod_ret_classif.dt_fim%type;
nr_seq_autor_origem_w		autorizacao_convenio.nr_sequencia%type;


/*
UTILIZADA PARA GERAR A AUTORIZACAO PRINCIPAL DO TIPO 7
E A PRIMEIRA TAXA A SER COBRADA APOS O RETORNO DA PRIMEIRA ELEGIBILIDADE


*/
c01 CURSOR FOR

	SELECT 	b.nr_carteira,
		a.cd_convenio,
		a.cd_pessoa_fisica,
		a.cd_medico,
		a.nr_doc_convenio,
		a.cd_estabelecimento,
		a.nr_sequencia nr_seq_dados_mod_remun,
		c.ie_classificacao,
		c.dt_inicio,
		c.dt_fim
	from    dados_clinicos_mod_remun a,
		dados_clinicos_mod_retorno b,
		dados_clin_mod_ret_classif c,
		can_loco_regional r
	where   a.nr_sequencia = b.nr_seq_dados_clinicos
	and     b.nr_sequencia = c.nr_seq_dados_retorno
	and     a.nr_seq_loco_regional = r.nr_sequencia
	and     r.ie_situacao = 'A'
	and	c.id_classificacao > 0
	and (a.cd_estabelecimento = cd_estabelecimento_w or coalesce(cd_estabelecimento_w::text, '') = '')
	and     not exists (SELECT 1
			    from   autorizacao_convenio x
			    where   x.nr_seq_dados_mod_remun = a.nr_sequencia);


BEGIN

cd_estabelecimento_w	:= coalesce(wheb_usuario_pck.get_cd_estabelecimento,cd_estabelecimento_p);

<<generate_autorization>>
open c01;

loop

fetch c01 into
	nr_carteira_w,
	cd_convenio_w,
	cd_pessoa_fisica_w,
	cd_medico_w,
	nr_doc_convenio_w,
	cd_estabelecimento_w,
	nr_sequencia_w,
	ie_classificacao_w,
	dt_inicio_w,
	dt_fim_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	SELECT * FROM obter_regra_classif_proced(ie_classificacao_w, cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, nr_seq_estagio_w, nr_seq_classif_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, nr_seq_estagio_w, nr_seq_classif_w;

	if (coalesce(nr_seq_estagio_w::text, '') = '')then
	
		select 	max(nr_sequencia)
		into STRICT	nr_seq_estagio_w
		from 	estagio_autorizacao 
		where 	ie_interno = '10' 
		and 	ie_situacao = 'A'
		and	IE_UTILIZA_MODELO_REMUN = 'S';
		
	end if;

	if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') then

		select  coalesce(max(a.nr_sequencia),0)
		into STRICT    nr_seq_autor_origem_w
		from    autorizacao_convenio a
		where   a.nr_seq_dados_mod_remun    	= nr_sequencia_w
		and     a.dt_inicio_vigencia 		= dt_inicio_w
		and	a.ie_tipo_autorizacao		= ie_tipo_autor_remu_w
		and	a.nr_seq_estagio		= nr_seq_estagio_w
		and	coalesce(nr_seq_classif_w::text, '') = '' or	a.nr_seq_classif = nr_seq_classif_w
		and     coalesce(dt_fim_w::text, '') = '' or
			a.dt_fim_vigencia             = dt_fim_w;

	       if (nr_seq_autor_origem_w = 0) then

			select  nextval('autorizacao_convenio_seq')
			into STRICT    nr_seq_autor_origem_w
			;

			insert into autorizacao_convenio(nm_usuario,
				ie_tipo_dia,
				nr_sequencia,
				dt_atualizacao,
				cd_convenio,
				dt_autorizacao,
				cd_pessoa_fisica,
				cd_autorizacao,
				ie_tipo_autorizacao,
				nr_seq_estagio,
				cd_medico_solicitante,
				nr_seq_dados_mod_remun,
				nr_seq_classif,
				dt_inicio_vigencia,
				dt_fim_vigencia,
				cd_estabelecimento)
			    values (nm_usuario_p,
				ie_tipo_dia_w,
				nr_seq_autor_origem_w,
				clock_timestamp(),
				cd_convenio_w,
				clock_timestamp(),
				cd_pessoa_fisica_w,
				nr_doc_convenio_w,
				ie_tipo_autor_remu_w,
				nr_seq_estagio_w,
				cd_medico_w,
				nr_sequencia_w,
				nr_seq_classif_w,
				dt_inicio_w,
				dt_fim_w,
				cd_estabelecimento_w);
		end if;
		


		if	(nr_seq_autor_origem_w IS NOT NULL AND nr_seq_autor_origem_w::text <> '') then

			select  nextval('autorizacao_convenio_seq')
			into STRICT    nr_sequencia_autor_w
			;

			insert into autorizacao_convenio(nm_usuario,
				ie_tipo_dia,
				nr_sequencia,
				dt_atualizacao,
				cd_convenio,
				dt_autorizacao,
				cd_pessoa_fisica,
				cd_autorizacao,
				ie_tipo_autorizacao,
				nr_seq_estagio,
				cd_medico_solicitante,
				nr_seq_dados_mod_remun,
				nr_seq_classif,
				nr_seq_autor_origem,
				dt_inicio_vigencia,
				dt_fim_vigencia,
				cd_estabelecimento)
			values (nm_usuario_p,
				ie_tipo_dia_w,
				nr_sequencia_autor_w,
				clock_timestamp(),
				cd_convenio_w,
				clock_timestamp(),
				cd_pessoa_fisica_w,
				nr_doc_convenio_w,
				ie_tipo_autor_proc_w,
				nr_seq_estagio_w,
				cd_medico_w,
				nr_sequencia_w,
				nr_seq_classif_w,
				nr_seq_autor_origem_w,
				dt_inicio_w,
				dt_inicio_w + 30,
				cd_estabelecimento_w);

			select 	nextval('procedimento_autorizado_seq')
			into STRICT 	nr_seq_proc_autor_w 
			;

			insert into procedimento_autorizado(cd_procedimento,
				 ie_origem_proced,
				 dt_atualizacao,
				 nm_usuario,
				 nr_sequencia_autor,
				 nr_sequencia,
				 qt_autorizada,
				 qt_solicitada,
				 nr_seq_proc_interno)
			values (cd_procedimento_w,
				 ie_origem_proced_w,
				 clock_timestamp(),
				 nm_usuario_p,
				 nr_sequencia_autor_w,
				 nr_seq_proc_autor_w,
				 qt_autorizada_w,
				 qt_solicitada_w,
				 nr_seq_proc_interno_w);

		 end if;
    end if;
end;
end loop;
close c01;


commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_autor_remun_diag ( qt_dias_leitura_p bigint default 30, cd_estabelecimento_p bigint default null, nm_usuario_p text DEFAULT NULL, nr_seq_dados_clinicos_p bigint default null) FROM PUBLIC;

