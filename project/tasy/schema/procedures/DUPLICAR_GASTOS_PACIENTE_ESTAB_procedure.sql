-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE duplicar_gastos_paciente_estab ( nr_interno_conta_origem_p conta_paciente.nr_interno_conta%type, nr_interno_conta_destino_p conta_paciente.nr_interno_conta%type, nm_usuario_p usuario.nm_usuario%type, cd_setor_atendimento_p setor_atendimento.cd_setor_atendimento%type, dt_entrada_unidade_p atend_paciente_unidade.dt_entrada_unidade%type, nr_seq_interno_p procedimento_paciente.nr_seq_atepacu%type) AS $body$
DECLARE


nr_sequencia_w 			procedimento_paciente.nr_sequencia%type;
nr_seq_proc_pacote_w 		procedimento_paciente.nr_sequencia%type;
nr_seq_nova_pacote_w 		procedimento_paciente.nr_sequencia%type;
nr_seq_proc_origem_pac_w	procedimento_paciente.nr_sequencia%type;
nr_seq_proc_pac_w		procedimento_paciente.nr_sequencia%type;
nr_seq_atend_pacote_w		atendimento_pacote.nr_sequencia%type;
ie_gerou_pacote_w		varchar(1) := 'N';
ds_nls_territory_w		varchar(64);
nr_atendimento_w		conta_paciente.nr_atendimento%type;
cd_convenio_w			conta_paciente.cd_convenio_parametro%type;
cd_categoria_w			conta_paciente.cd_categoria_parametro%type;
cd_estabelecimento_w		conta_paciente.cd_estabelecimento%type;
nr_seq_proc_princ_w		procedimento_paciente.nr_seq_proc_princ%type;
nr_doc_convenio_w		procedimento_paciente.nr_doc_convenio%type;

c01 CURSOR FOR
	SELECT 	coalesce(nr_sequencia,0) nr_sequencia,
		coalesce(nr_seq_proc_princ,0) nr_seq_proc_princ
	from	procedimento_paciente
	where 	nr_interno_conta = nr_interno_conta_origem_p
	and	coalesce(nr_seq_proc_pacote,0) <> nr_sequencia
	and	coalesce(obter_se_proc_dupl_estab(cd_estabelecimento_w,cd_convenio_w,cd_procedimento,ie_origem_proced,nr_seq_proc_interno),'S') = 'S'
	order by nr_seq_proc_princ desc, nr_sequencia;

type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i			integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w	vetor;

c02 CURSOR FOR
	SELECT 	coalesce(nr_sequencia,0) nr_sequencia
	from	material_atend_paciente
	where 	nr_interno_conta = nr_interno_conta_origem_p;

type 		fetch_array2 is table of c02%rowtype;
s_array2 	fetch_array2;
type vetor2 is table of fetch_array2 index by integer;
vetor_c02_w	vetor2;

c03 CURSOR FOR
	SELECT 	nr_sequencia
	from	procedimento_paciente
	where	nr_interno_conta = nr_interno_conta_origem_p
	and	coalesce(nr_seq_proc_pacote,0) = nr_sequencia
	and	coalesce(obter_se_proc_dupl_estab(cd_estabelecimento_w,cd_convenio_w,cd_procedimento,ie_origem_proced,nr_seq_proc_interno),'S') = 'S'
	order by 1;

type 		fetch_array3 is table of c03%rowtype;
s_array3 	fetch_array3;
type vetor3 is table of fetch_array3 index by integer;
vetor_c03_w	vetor3;

c04 CURSOR FOR
	SELECT	a.*
	from	atendimento_pacote a
	where	a.nr_seq_proc_origem in (SELECT x.nr_sequencia
		from 	procedimento_paciente x
		where 	x.nr_interno_conta =  nr_interno_conta_origem_p
		and	coalesce(obter_se_proc_dupl_estab(cd_estabelecimento_w,cd_convenio_w,cd_procedimento,ie_origem_proced,nr_seq_proc_interno),'S') = 'S');

c04_w	c04%rowtype;
BEGIN

begin
	select	substr(value,1,64)
	into STRICT	ds_nls_territory_w
	from	v$nls_parameters
	where	parameter = 'NLS_TERRITORY';
exception
when others then
	ds_nls_territory_w:=null;
end;

select	nr_atendimento,
	cd_convenio_parametro,
	cd_categoria_parametro,
	cd_estabelecimento
into STRICT	nr_atendimento_w,
	cd_convenio_w,
	cd_categoria_w,
	cd_estabelecimento_w
from	conta_paciente
where	nr_interno_conta = nr_interno_conta_destino_p;

nr_doc_convenio_w	:= coalesce(obter_guia_atend(nr_atendimento_w,cd_convenio_w,cd_categoria_w),'');

open c01;
loop
fetch c01 bulk collect into s_array limit 100000;
	vetor_c01_w(i) := s_array;
	i := i + 1;
EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

for i in 1..vetor_c01_w.count loop
	begin
	s_array := vetor_c01_w(i);

	for z in 1..s_array.count loop
		begin
		nr_sequencia_w		:= s_array[z].nr_sequencia;
		nr_seq_proc_princ_w	:= s_array[z].nr_seq_proc_princ;

		CALL duplicar_proc_paciente_estab(nr_sequencia_w, cd_setor_atendimento_p, nr_interno_conta_destino_p, nm_usuario_p, dt_entrada_unidade_p, nr_seq_interno_p);
		end;
	end loop;
	end;
end loop;

i := 1;

open c02;
loop
fetch c02 bulk collect into s_array2 limit 100000;
	vetor_c02_w(i) := s_array2;
	i := i + 1;
EXIT WHEN NOT FOUND; /* apply on c02 */
end loop;
close c02;

for i in 1..vetor_c02_w.count loop
	begin
	s_array2 := vetor_c02_w(i);

	for x in 1..s_array2.count loop
		begin
		nr_sequencia_w		:= s_array2[x].nr_sequencia;

		CALL duplicar_mat_paciente_estab(nr_sequencia_w, cd_setor_atendimento_p, nr_interno_conta_destino_p, nm_usuario_p, dt_entrada_unidade_p, nr_seq_interno_p);
		end;
	end loop;
	end;
end loop;

i := 1;

open c03;
loop
fetch c03 bulk collect into s_array3 limit 10000;
	vetor_c03_w(i) := s_array3;
	i := i + 1;
EXIT WHEN NOT FOUND; /* apply on c03 */
end loop;
close c03;

for i in 1..vetor_c03_w.count loop
	begin
	s_array3 := vetor_c03_w(i);
	for w in 1..s_array3.count loop
		begin

		nr_seq_proc_pacote_w := s_array3[w].nr_sequencia;

		select	nextval('procedimento_paciente_seq')
		into STRICT	nr_seq_nova_pacote_w
		;

		insert into procedimento_paciente(
			nr_sequencia,			nr_atendimento, 		dt_entrada_unidade,
			cd_procedimento, 		nr_seq_proc_interno,		dt_procedimento,
			qt_procedimento,		dt_atualizacao,			nm_usuario,
			cd_medico,			cd_convenio,			cd_categoria,
			cd_pessoa_fisica,		dt_prescricao,			ds_observacao,
			vl_procedimento,		vl_medico,			vl_anestesista,
			vl_materiais,			cd_edicao_amb, 			cd_tabela_servico,
			dt_vigencia_preco,		cd_procedimento_princ,		dt_procedimento_princ,
			dt_acerto_conta, 		dt_acerto_convenio,		dt_acerto_medico,
			vl_auxiliares,			vl_custo_operacional,		tx_medico,
			tx_anestesia,			nr_prescricao,			nr_sequencia_prescricao,
			cd_motivo_exc_conta, 		ds_compl_motivo_excon, 		qt_devolvida,
			cd_motivo_devolucao, 		nr_cirurgia, 			nr_doc_convenio,
			cd_medico_executor,		ie_cobra_pf_pj, 		nr_laudo,
			dt_conta, 			cd_setor_atendimento,		cd_conta_contabil,
			cd_procedimento_aih, 		ie_origem_proced, 		nr_aih,
			ie_responsavel_credito,		tx_procedimento, 		cd_equipamento,
			ie_valor_informado,		cd_estabelecimento_custo, 	cd_tabela_custo,
			cd_situacao_glosa,		nr_lote_contabil, 		cd_procedimento_convenio,
			nr_seq_autorizacao,		ie_tipo_servico_sus, 		ie_tipo_ato_sus,
			cd_cgc_prestador, 		nr_nf_prestador,		cd_atividade_prof_bpa,
			nr_interno_conta, 		nr_seq_proc_princ, 		ie_guia_informada,
			dt_inicio_procedimento,		ie_emite_conta, 		ie_funcao_medico,
			ie_classif_sus,			cd_especialidade, 		nm_usuario_original,
			ie_tipo_proc_sus,		cd_setor_receita, 		vl_adic_plant,
			nr_seq_atepacu, 		ie_proc_princ_atend,		nr_seq_proc_pacote,
			cd_medico_req, 			ie_tipo_guia, 			ie_video,
			ie_auditoria,			nr_seq_exame,			nr_seq_aih,
			ie_doc_executor,		cd_cbo,				nr_seq_regra_doc,
			nr_seq_origem, 			ie_via_acesso,			nr_ato_ipasgo,
			nr_doc_honor_conv)
		SELECT	nr_seq_nova_pacote_w, 		nr_atendimento_w, 		dt_entrada_unidade,
			cd_procedimento,		nr_seq_proc_interno,		dt_procedimento,
			qt_procedimento,		clock_timestamp(), 			nm_usuario_p,
			cd_medico, 			cd_convenio, 			cd_categoria,
			cd_pessoa_fisica, 		dt_prescricao, 			ds_observacao,
			0,				vl_medico, 			vl_anestesista,
			vl_materiais, 			cd_edicao_amb, 			cd_tabela_servico,
			dt_vigencia_preco, 		cd_procedimento_princ, 		dt_procedimento_princ,
			dt_acerto_conta,		dt_acerto_convenio,		dt_acerto_medico,
			vl_auxiliares, 			vl_custo_operacional,		tx_medico,
			tx_anestesia, 			nr_prescricao, 			nr_sequencia_prescricao,
			cd_motivo_exc_conta, 		ds_compl_motivo_excon, 		qt_devolvida,
			cd_motivo_devolucao, 		nr_cirurgia, 			CASE WHEN coalesce(nr_doc_convenio,'X')='X' THEN ''  ELSE coalesce(nr_doc_convenio_w,'') END ,
			cd_medico_executor, 		ie_cobra_pf_pj, 		nr_laudo,
			dt_conta,			cd_setor_atendimento_p, 	cd_conta_contabil,
			cd_procedimento_aih,		ie_origem_proced, 		nr_aih,
			ie_responsavel_credito, 	tx_procedimento,		cd_equipamento,
			ie_valor_informado,		cd_estabelecimento_custo, 	cd_tabela_custo,
			cd_situacao_glosa, 		0,				cd_procedimento_convenio,
			nr_seq_autorizacao, 		ie_tipo_servico_sus,		ie_tipo_ato_sus,
			cd_cgc_prestador, 		nr_nf_prestador, 		cd_atividade_prof_bpa,
			nr_interno_conta_destino_p, 	nr_seq_proc_princ, 		ie_guia_informada,
			dt_inicio_procedimento,		ie_emite_conta, 		ie_funcao_medico,
			ie_classif_sus,			cd_especialidade, 		nm_usuario_original,
			ie_tipo_proc_sus,		cd_setor_atendimento_p, 	vl_adic_plant,
			nr_seq_interno_p, 		ie_proc_princ_atend,		nr_seq_proc_pacote,
			cd_medico_req, 			ie_tipo_guia, 			ie_video,
			ie_auditoria, 			nr_seq_exame,			nr_seq_aih,
			ie_doc_executor,		cd_cbo,				nr_seq_regra_doc,
			nr_seq_proc_pacote_w, 		ie_via_acesso,			nr_ato_ipasgo,
			nr_doc_honor_conv
		from	procedimento_paciente
		where	nr_sequencia = nr_seq_proc_pacote_w;


		insert into procedimento_participante(
			nr_sequencia,			nr_seq_partic, 			ie_funcao,
			dt_atualizacao,			nm_usuario,			cd_pessoa_fisica,
			cd_cgc, 			ie_valor_informado,		ie_emite_conta,
			vl_participante, 		vl_conta, 			nr_lote_contabil,
			nr_conta_medico, 		ie_tipo_servico_sus, 		ie_tipo_ato_sus,
			qt_ponto_sus, 			vl_ponto_sus, 			vl_original,
			ie_responsavel_credito,		pr_procedimento,		cd_cbo,
			ie_doc_executor,		ie_participou_sus,		nr_doc_honor_conv)
		SELECT	nr_seq_nova_pacote_w,		nr_seq_partic,			ie_funcao,
			clock_timestamp(),			nm_usuario_p, 			cd_pessoa_fisica,
			cd_cgc,				ie_valor_informado,		ie_emite_conta,
			vl_participante, 		vl_conta,			0,
			nr_conta_medico,		ie_tipo_servico_sus,		ie_tipo_ato_sus,
			qt_ponto_sus,			vl_ponto_sus, 			vl_original,
			ie_responsavel_credito,		pr_procedimento,		cd_cbo,
			ie_doc_executor,		ie_participou_sus,		nr_doc_honor_conv
		from	procedimento_participante
		where	nr_sequencia = nr_seq_proc_pacote_w;

		delete	from proc_paciente_valor
		where	nr_seq_procedimento = nr_seq_nova_pacote_w;

		Insert into proc_paciente_valor(
			nr_seq_procedimento, 		nr_sequencia, 			ie_tipo_valor,
			dt_atualizacao, 		nm_usuario, 			vl_procedimento,
			vl_medico, 			vl_anestesista, 		vl_materiais,
			vl_auxiliares,			vl_custo_operacional, 		cd_convenio,
			cd_categoria, 			pr_valor)
		SELECT	nr_seq_nova_pacote_w, 		nr_sequencia, 			ie_tipo_valor,
			clock_timestamp(), 			nm_usuario_p, 			vl_procedimento,
			vl_medico, 			vl_anestesista,			vl_materiais,
			vl_auxiliares,			vl_custo_operacional, 		cd_convenio,
			cd_categoria,			pr_valor
		from	proc_paciente_valor
		where	nr_seq_procedimento = nr_seq_proc_pacote_w;

		if	((2 = philips_param_pck.get_cd_pais) or (upper(ds_nls_territory_w) = 'MEXICO')) then -- 2 = México
			insert into propaci_imposto(
				nr_sequencia, nr_seq_propaci, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, cd_tributo, pr_imposto, vl_imposto, nr_seq_regra)
			SELECT
				nextval('propaci_imposto_seq'), nr_seq_nova_pacote_w, clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p, cd_tributo, pr_imposto, vl_imposto, nr_seq_regra
			from	propaci_imposto
			where	nr_seq_propaci = nr_seq_proc_pacote_w;
		end if;

		CALL atualiza_preco_procedimento(nr_seq_nova_pacote_w,cd_convenio_w,nm_usuario_p);

		end;
	end loop;
	end;
end loop;

open c04;
loop
fetch c04 into
	c04_w;
EXIT WHEN NOT FOUND; /* apply on c04 */
	begin

	select (coalesce(max(nr_sequencia),0) + 1)
	into STRICT	nr_seq_atend_pacote_w
	from	atendimento_pacote
	where	nr_atendimento	= nr_atendimento_w;

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_proc_origem_pac_w
	from	procedimento_paciente a
	where	a.nr_seq_origem = c04_w.nr_seq_proc_origem
	and	a.nr_interno_conta = nr_interno_conta_destino_p;

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_proc_pac_w
	from	procedimento_paciente a
	where	a.nr_seq_origem = c04_w.nr_seq_procedimento
	and	a.nr_interno_conta = nr_interno_conta_destino_p;

	if (coalesce(nr_seq_proc_origem_pac_w,0) > 0) and (coalesce(nr_seq_proc_pac_w,0) > 0) then

		ie_gerou_pacote_w	:= 'S';

		insert into atendimento_pacote(
			nr_atendimento, 		nr_sequencia,			nr_seq_pacote,
			cd_convenio,			dt_atualizacao,			nm_usuario,
			pr_afaturar,			ie_tipo_acomod,			qt_dias_pacote,
			qt_dias_hospital,		qt_dias_uti, 			ie_excedente,
			dt_inicio_pacote, 		nr_seq_procedimento,		nr_seq_proc_origem,
			dt_final_pacote,		cd_setor_exclusivo,		ie_classificacao,
			nr_seq_alocacao,		nr_seq_tipo_acomod,		ie_exige_gabarito,
			ie_ratear_repasse,		vl_original,			ie_rateado,
			vl_ajuste, 			ie_consiste_cirurgia, 		ds_observacao,
			ie_prioridade, 			nr_seq_regra_tx, 		cd_procedimento_tuss)
		values (nr_atendimento_w, 		nr_seq_atend_pacote_w, 		c04_w.nr_seq_pacote,
			c04_w.cd_convenio,		clock_timestamp(),			nm_usuario_p,
			c04_w.pr_afaturar, 		c04_w.ie_tipo_acomod, 		c04_w.qt_dias_pacote,
			c04_w.qt_dias_hospital,		c04_w.qt_dias_uti,		c04_w.ie_excedente,
			c04_w.dt_inicio_pacote, 	nr_seq_proc_pac_w,		nr_seq_proc_origem_pac_w,
			c04_w.dt_final_pacote,		cd_setor_atendimento_p, 	c04_w.ie_classificacao,
			c04_w.nr_seq_alocacao, 		c04_w.nr_seq_tipo_acomod, 	c04_w.ie_exige_gabarito,
			c04_w.ie_ratear_repasse,	c04_w.vl_original, 		c04_w.ie_rateado,
			c04_w.vl_ajuste, 		c04_w.ie_consiste_cirurgia, 	c04_w.ds_observacao,
			c04_w.ie_prioridade, 		c04_w.nr_seq_regra_tx, 		c04_w.cd_procedimento_tuss);

		update	procedimento_paciente
		set	nr_seq_proc_pacote = nr_seq_proc_pac_w
		where	nr_seq_proc_pacote = c04_w.nr_seq_procedimento
		and	nr_interno_conta = nr_interno_conta_destino_p;

		update	material_atend_paciente
		set	nr_seq_proc_pacote = nr_seq_proc_pac_w
		where	nr_seq_proc_pacote = c04_w.nr_seq_procedimento
		and	nr_interno_conta = nr_interno_conta_destino_p;

	end if;

	end;
end loop;
close c04;

if (ie_gerou_pacote_w = 'N') then

	update	procedimento_paciente
	set	nr_seq_proc_pacote  = NULL
	where	(nr_seq_proc_pacote IS NOT NULL AND nr_seq_proc_pacote::text <> '')
	and	nr_interno_conta = nr_interno_conta_destino_p;

	update	material_atend_paciente
	set	nr_seq_proc_pacote  = NULL
	where	(nr_seq_proc_pacote IS NOT NULL AND nr_seq_proc_pacote::text <> '')
	and	nr_interno_conta = nr_interno_conta_destino_p;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE duplicar_gastos_paciente_estab ( nr_interno_conta_origem_p conta_paciente.nr_interno_conta%type, nr_interno_conta_destino_p conta_paciente.nr_interno_conta%type, nm_usuario_p usuario.nm_usuario%type, cd_setor_atendimento_p setor_atendimento.cd_setor_atendimento%type, dt_entrada_unidade_p atend_paciente_unidade.dt_entrada_unidade%type, nr_seq_interno_p procedimento_paciente.nr_seq_atepacu%type) FROM PUBLIC;

