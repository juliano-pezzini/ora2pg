-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE adep_gerar_lancto_disp_medic ( nr_seq_proced_princ_p bigint, nr_seq_disp_proc_p bigint, nr_atendimento_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, nm_usuario_p text, nr_prescricao_p bigint, nr_seq_solucao_p bigint, nr_seq_material_p bigint) AS $body$
DECLARE


nr_sequencia_w				bigint;
cd_setor_atendimento_w		integer;
cd_setor_atendimento_ww		integer;
dt_entrada_unidade_w		timestamp;
cd_unidade_medida_w			varchar(30);
nr_seq_atepacu_w			bigint;
cd_convenio_w				integer;
cd_categoria_w				varchar(10);
nr_doc_convenio_w			varchar(20);
ie_regra_uso_w				varchar(20);
ie_tipo_guia_w				varchar(2);
cd_senha_w					varchar(20);
ie_consignado_w				varchar(1);
cd_material_estoque_w		integer;
qt_conv_estoque_consumo_w	double precision;
cd_unidade_medida_estoque_w	varchar(30);
cd_unidade_medida_consumo_w	varchar(30);
qt_estoque_w				double precision;
cd_estab_w					bigint;
dt_entrada_unidade_ww		timestamp;
cd_pessoa_fisica_w			varchar(10);
dt_inicio_real_w			timestamp;
cd_medico_cirurgiao_w		varchar(10);
cd_medico_anestesista_w		varchar(10);
nr_seq_interno_w			bigint;
ds_erro_w					varchar(255);
nr_seq_proc_w				bigint;
ie_classificacao_w			varchar(1);
cd_tipo_procedimento_w		smallint;
dt_retirada_w				timestamp;
qt_procedimento_w			double precision;
ie_forma_apresentacao_w		smallint;
nr_atendimento_w			bigint;
qt_lancamento_w				double precision;
dt_execucao_w				timestamp;
cd_medico_executor_w		varchar(255);
ie_acao_excesso_w			varchar(255);
nr_cirurgia_propaci_w		bigint;
nr_interno_conta_ww			bigint;
nr_seq_proc_interno_w		bigint;
qt_excedida_w				double precision;
cd_convenio_glosa_w			bigint;
cd_categoria_glosa_w		bigint;
cd_convenio_excesso_w		integer;
cd_categoria_excesso_w		varchar(10);
cd_setor_proc_w				integer;
ds_texto_aux_w				varchar(255);
cd_funcao_origem_w			prescr_medica.cd_funcao_origem%type;
nr_seq_excedido_w		procedimento_paciente.nr_sequencia%type;
nr_conta_w			conta_paciente.nr_interno_conta%type;
ds_texto_w			varchar(255);
cd_motivo_exc_conta_w		parametro_faturamento.cd_motivo_exc_conta%type;


BEGIN

SELECT * FROM obter_convenio_execucao(nr_atendimento_p, clock_timestamp(), cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w) INTO STRICT cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w;

select	cd_estabelecimento
into STRICT	cd_estab_w
from  	atendimento_paciente
where 	nr_atendimento = nr_atendimento_p;

select	max(cd_funcao_origem)
into STRICT	cd_funcao_origem_w
from	prescr_medica
where	nr_prescricao = nr_prescricao_p;

if (nr_seq_proced_princ_p IS NOT NULL AND nr_seq_proced_princ_p::text <> '') then
	if (nr_seq_disp_proc_p IS NOT NULL AND nr_seq_disp_proc_p::text <> '') then
		select	c.cd_pessoa_fisica,
				a.dt_instalacao,
				a.dt_retirada,
				b.cd_setor_atendimento
		into STRICT	cd_pessoa_fisica_w,
				dt_inicio_real_w,
				dt_retirada_w,
				cd_setor_atendimento_ww
		from	atendimento_paciente c,
				atend_pac_dispositivo a,
				atend_pac_disp_proc b
		where	b.nr_seq_disp_pac	= a.nr_sequencia
		and 	c.nr_atendimento 	= a.nr_atendimento
		and 	b.nr_sequencia		= nr_seq_disp_proc_p;
	else
		select	c.cd_pessoa_fisica,
				obter_setor_atendimento(nr_atendimento)
		into STRICT	cd_pessoa_fisica_w,
				cd_setor_atendimento_ww
		from	atendimento_paciente c
		where	c.nr_atendimento = nr_atendimento_p;
	end if;

	begin
	select	max(nr_seq_interno)
	into STRICT	nr_seq_interno_w
	from	atend_paciente_unidade
	where	nr_atendimento		= nr_atendimento_p
	and		cd_setor_atendimento	= cd_setor_atendimento_ww;

	select	dt_entrada_unidade
	into STRICT	dt_entrada_unidade_ww
	from	atend_paciente_unidade
	where	nr_atendimento	= nr_Atendimento_p
	and		nr_seq_interno	= nr_seq_interno_w;
	exception
	when no_data_found then
		if (coalesce(cd_funcao_origem_w,0) <> 2314) then
			--'Não foi gerado passagem para o setor '|| substr(Obter_nome_setor(cd_setor_atendimento_w),1,40)||'!');
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(183140,'LISTA='||substr(Obter_nome_setor(cd_setor_atendimento_w),1,40));
		end if;
	end;

	ds_erro_w := Consiste_Paciente_Proc(nr_seq_proced_princ_p, nr_atendimento_p, cd_pessoa_fisica_w, cd_procedimento_p, ie_origem_proced_p, ds_erro_w);

	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') and (coalesce(cd_funcao_origem_w,0) <> 2314) then
		--ds_erro_w);
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(183141,'ERRO='||ds_erro_w);
	end if;

	select	ie_forma_apresentacao
	into STRICT	ie_forma_apresentacao_w
	from	procedimento
	where	cd_procedimento		= cd_procedimento_p
	and	ie_origem_proced	= ie_origem_proced_p;

	qt_procedimento_w := qt_procedimento_p;

	select	nextval('procedimento_paciente_seq')
	into STRICT	nr_seq_proc_w
	;

	insert into procedimento_paciente(
		nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		qt_procedimento,
		cd_pessoa_fisica,
		ie_funcao_medico,
		cd_convenio,
		cd_categoria,
		ie_proc_princ_atend,
		ie_video,
		tx_medico,
		tx_anestesia,
		tx_procedimento,
		ie_valor_informado,
		ie_guia_informada,
		cd_situacao_glosa,
		nm_usuario_original,
		nr_atendimento,
		cd_setor_atendimento,
		dt_entrada_unidade,
		nr_seq_atepacu,
		cd_senha,
		ie_auditoria,
		ie_emite_conta,
		cd_cgc_prestador,
		nr_seq_proc_interno,
		dt_procedimento,
		dt_atualizacao,
		nm_usuario,
		nr_cirurgia,
		dt_conta,
		nr_doc_convenio,
		nr_prescricao,
		nr_seq_prescr_mat,
		nr_seq_solucao)
	values (
		nr_seq_proc_w,
		cd_procedimento_p,
		ie_origem_proced_p,
		coalesce(qt_procedimento_w,qt_procedimento_p),
		CASE WHEN ie_origem_proced_p=7 THEN null  ELSE obter_pessoa_fisica_usuario(nm_usuario_p,'C') END ,
		'1',
		cd_convenio_w,
		cd_categoria_w,
		'N',
		'N',
		100,
		100,
		100,
		'N',
		'N',
		0,
		nm_usuario_p,
		nr_atendimento_p,
		cd_setor_atendimento_ww,
		dt_entrada_unidade_ww,
		nr_seq_interno_w,
		cd_senha_w,
		'N',
		'N',
		obter_cgc_estabelecimento(cd_estab_w),
		nr_seq_proced_princ_p,
		clock_timestamp(),
		clock_timestamp(),
		nm_usuario_p,
		null,
		clock_timestamp(),
		nr_doc_convenio_w,
		nr_prescricao_p,
		nr_seq_material_p,
		nr_seq_solucao_p);

	CALL atualiza_preco_procedimento(nr_seq_proc_w, cd_convenio_w, nm_usuario_p);
	CALL gerar_autor_regra(nr_atendimento_p,null,nr_seq_proc_w,null,null,nr_seq_proced_princ_p,'EP',nm_usuario_p,null,null,null,null,null,null,'','','');

	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

	ie_regra_uso_w := obter_param_usuario(1113, 556, obter_perfil_ativo, nm_usuario_p, cd_estab_w, ie_regra_uso_w);

	if (ie_regra_uso_w = 'S') then

		select	max(nr_atendimento),
				max(qt_procedimento),
				max(dt_procedimento),
				max(cd_medico_executor),
				max(cd_categoria),
				max(nr_cirurgia),
				max(nr_interno_conta),
				max(cd_setor_atendimento)
		into STRICT	nr_atendimento_w,
				qt_lancamento_w,
				dt_execucao_w,
				cd_medico_executor_w,
				cd_categoria_w,
				nr_cirurgia_propaci_w,
				nr_interno_conta_ww,
				cd_setor_proc_w
		from	procedimento_paciente
		where	nr_sequencia = nr_seq_proc_w;

		SELECT * FROM obter_regra_qtde_proc_exec(nr_atendimento_w, cd_procedimento_p, ie_origem_proced_p, qt_lancamento_w, dt_execucao_w, cd_medico_executor_w, ie_acao_excesso_w, qt_excedida_w, ds_erro_w, cd_convenio_excesso_w, cd_categoria_excesso_w, nr_seq_proc_interno_w, cd_categoria_w, null, 0, nr_cirurgia_propaci_w, null, cd_setor_proc_w, null) INTO STRICT ie_acao_excesso_w, qt_excedida_w, ds_erro_w, cd_convenio_excesso_w, cd_categoria_excesso_w;

		if (ie_acao_excesso_w = 'E') then
			if (qt_excedida_w   > 0) then

				if 	((qt_lancamento_w - qt_excedida_w) >= 0) then

					nr_seq_excedido_w := inserir_procedimento_paciente(cd_procedimento_p, qt_excedida_w, null, nr_seq_proced_princ_p, ie_origem_proced_p, cd_setor_atendimento_ww, nr_atendimento_w, cd_estab_w, nm_usuario_p, null, 'S', cd_medico_executor_w, nr_seq_interno_w, dt_execucao_w, cd_convenio_w, cd_categoria_w, nr_seq_excedido_w);
					CALL atualiza_preco_procedimento(nr_seq_excedido_w, cd_convenio_w, nm_usuario_p);

					select 	max(nr_interno_conta)
					into STRICT	nr_conta_w
					from 	procedimento_paciente
					where 	nr_sequencia = nr_seq_excedido_w;

					--Excluído pela regra de uso da função Cadastro de Convênios
					ds_texto_aux_w := substr(wheb_mensagem_pck.get_texto(300556),1,255);

					select	max(cd_motivo_exc_conta)
					into STRICT	cd_motivo_exc_conta_w
					from	parametro_faturamento
					where	cd_estabelecimento = cd_estab_w;

					CALL excluir_matproc_conta(nr_seq_excedido_w, nr_conta_w, coalesce(cd_motivo_exc_conta_w, 12), ds_texto_aux_w, 'P', nm_usuario_p);

					if ((qt_lancamento_w - qt_excedida_w) = 0) then
						delete	from procedimento_paciente
						where	nr_sequencia = nr_seq_proc_w;
					else
						qt_lancamento_w := qt_lancamento_w - qt_excedida_w;

						update	procedimento_paciente
						set	qt_procedimento = qt_lancamento_w
						where	nr_sequencia = nr_seq_proc_w;
					end if;
				end if;

			end if;

		elsif (ie_acao_excesso_w = 'P') then
			if (qt_excedida_w   > 0) then

				 SELECT * FROM obter_convenio_particular_pf(cd_estab_w, cd_convenio_w, '', dt_execucao_w, cd_convenio_glosa_w, cd_categoria_glosa_w) INTO STRICT cd_convenio_glosa_w, cd_categoria_glosa_w;

				update	procedimento_paciente
				set	nr_interno_conta	 = NULL,
					cd_convenio		= cd_convenio_glosa_w,
					cd_categoria		= cd_categoria_glosa_w
				where	nr_sequencia 		= nr_sequencia_w;


				CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);

				CALL Ajustar_Conta_Vazia(nr_atendimento_w, nm_usuario_p);

			end if;

		elsif (ie_acao_excesso_w = 'Z') then
			if (qt_excedida_w   > 0) then

				update	procedimento_paciente
				set	vl_anestesista		= 0,
					vl_auxiliares		= 0,
					vl_custo_operacional	= 0,
					vl_materiais		= 0,
					vl_medico		= 0,
					vl_procedimento		= 0,
					ie_valor_informado	= 'S'
				where	nr_sequencia 		= nr_sequencia_w;


			end if;

		elsif (ie_acao_excesso_w = 'C') then

			if (qt_excedida_w   > 0) and
				(cd_convenio_excesso_w IS NOT NULL AND cd_convenio_excesso_w::text <> '' AND cd_categoria_excesso_w IS NOT NULL AND cd_categoria_excesso_w::text <> '') then
				update	procedimento_paciente
				set	nr_interno_conta	 = NULL,
					cd_convenio		= cd_convenio_excesso_w,
					cd_categoria		= cd_categoria_excesso_w
				where	nr_sequencia 		= nr_sequencia_w;


				CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_excesso_w, nm_usuario_p);

				CALL Ajustar_Conta_Vazia(nr_atendimento_w, nm_usuario_p);
			end if;

		end if;

	end if;

	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE adep_gerar_lancto_disp_medic ( nr_seq_proced_princ_p bigint, nr_seq_disp_proc_p bigint, nr_atendimento_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, nm_usuario_p text, nr_prescricao_p bigint, nr_seq_solucao_p bigint, nr_seq_material_p bigint) FROM PUBLIC;

