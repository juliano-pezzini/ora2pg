-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_solic_pagto_contrato (nr_seq_contrato_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE



nr_seq_contrato_w				bigint;
nr_seq_regra_w				bigint;
cd_centro_custo_w				integer;
dt_venc_pagto_w				timestamp;
cd_centro_custo_ww			integer	:= 0;
nr_seq_contrato_ww			bigint	:= 0;
dt_venc_pagto_ww				timestamp		:= clock_timestamp() - interval '9999 days';
cd_pessoa_resp_w				varchar(10);
cd_material_w				integer;
vl_pagto_w				double precision;
nr_solic_compra_w				bigint;
cd_pessoa_solic_padrao_w			varchar(10);
nr_item_solic_compra_w			integer;
cd_unidade_medida_compra_w		varchar(30);
cd_cgc_contratado_w			varchar(14);
ds_solic_compra_w				varchar(4000);
qt_existe_w				bigint;
ie_libera_solic_w				varchar(1);
cd_local_estoque_w			bigint;
cd_conta_contabil_w			varchar(20);
ie_tipo_conta_w				integer;
nr_seq_crit_rateio_w		bigint;

c01 CURSOR FOR
SELECT	b.cd_cgc_contratado,
	b.nr_sequencia nr_seq_contrato,
	a.nr_sequencia nr_seq_regra_contrato,
	a.cd_centro_custo,
	a.cd_local_estoque,
	a.cd_pessoa_solicitante,
	obter_data_valida(coalesce(dt_venc_pagto,0),trunc(clock_timestamp(),'mm')),
	b.cd_pessoa_resp,
	a.cd_material,
	a.vl_pagto,
	coalesce(a.ie_libera_solic,'N'),
	a.nr_seq_crit_rateio
from	contrato_regra_nf a,
	contrato b
where	a.nr_seq_contrato = b.nr_sequencia
and	b.cd_estabelecimento = cd_estabelecimento_p
and	((coalesce(a.cd_estab_regra::text, '') = '') or (a.cd_estab_regra = cd_estabelecimento_p) or (exists (	select	1
												from	contrato_regra_nf_estab x
												where	x.cd_estab_regra = cd_estabelecimento_p
												and	x.nr_seq_regra_nf = a.nr_sequencia)))
and	coalesce(b.ie_situacao,'A')		= 'A'
and	coalesce(a.ie_tipo_regra,'NF')	= 'SP'
and	nr_seq_contrato_p		= 0
and	coalesce(ie_gera_sc_automatico,'N') = 'S'
and	coalesce(a.vl_pagto,0)		> 0
and	(a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '')
and	(a.dt_venc_pagto IS NOT NULL AND a.dt_venc_pagto::text <> '')
and	(a.qt_dias_antes_gerar_sc IS NOT NULL AND a.qt_dias_antes_gerar_sc::text <> '')
and	((coalesce(a.dt_inicio_vigencia::text, '') = '') or (trunc(a.dt_inicio_vigencia,'dd') <= trunc(clock_timestamp(),'dd')))
and	((coalesce(a.dt_fim_vigencia::text, '') = '') or (trunc(a.dt_fim_vigencia,'dd') >= trunc(clock_timestamp(),'dd')))
and (coalesce(a.ie_situacao::text, '') = '' or a.ie_situacao = 'A')
and (obter_data_valida(coalesce(dt_venc_pagto,0),trunc(clock_timestamp(),'mm')) - qt_dias_antes_gerar_sc) = trunc(clock_timestamp(),'dd')

union

select	b.cd_cgc_contratado,
	b.nr_sequencia,
	a.nr_sequencia,
	a.cd_centro_custo,
	a.cd_local_estoque,
	a.cd_pessoa_solicitante,
	obter_data_valida(coalesce(dt_venc_pagto,0),trunc(clock_timestamp(),'mm')),
	b.cd_pessoa_resp,
	a.cd_material,
	a.vl_pagto,
	coalesce(a.ie_libera_solic,'N'),
	a.nr_seq_crit_rateio
from	contrato_regra_nf a,
	contrato b,
	w_itens_contrato_selec c
where	a.nr_seq_contrato	= b.nr_sequencia
and	a.nr_sequencia		= c.nr_seq_regra_contrato
and	b.nr_Sequencia		= c.nr_seq_contrato
and	b.cd_estabelecimento	= cd_estabelecimento_p
and	((coalesce(a.cd_estab_regra::text, '') = '') or (a.cd_estab_regra = cd_estabelecimento_p) or (exists (	select	1
												from	contrato_regra_nf_estab x
												where	x.cd_estab_regra = cd_estabelecimento_p
												and	x.nr_seq_regra_nf = a.nr_sequencia)))
and	coalesce(a.ie_tipo_regra,'NF')	= 'SP'
and	c.ie_utilizacao			= 'CO'
and	nr_seq_contrato_p		> 0
and	coalesce(a.vl_pagto,0)		> 0
and	(a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '')
and	(a.dt_venc_pagto IS NOT NULL AND a.dt_venc_pagto::text <> '')
and	(a.qt_dias_antes_gerar_sc IS NOT NULL AND a.qt_dias_antes_gerar_sc::text <> '')
and	((coalesce(a.dt_inicio_vigencia::text, '') = '') or (trunc(a.dt_inicio_vigencia,'dd') <= trunc(clock_timestamp(),'dd')))
and	((coalesce(a.dt_fim_vigencia::text, '') = '') or (trunc(a.dt_fim_vigencia,'dd') >= trunc(clock_timestamp(),'dd')))
and (coalesce(a.ie_situacao::text, '') = '' or a.ie_situacao = 'A')
order by 1,3,4;

c02 CURSOR FOR
SELECT	distinct
	nr_solic_compra
from	solic_compra
where	obter_se_contido(nr_solic_compra, ds_solic_compra_w) = 'S';
			

BEGIN

open C01;
loop
fetch C01 into	
	cd_cgc_contratado_w,
	nr_seq_contrato_w,
	nr_seq_regra_w,
	cd_centro_custo_w,
	cd_local_estoque_w,
	cd_pessoa_solic_padrao_w,
	dt_venc_pagto_w,
	cd_pessoa_resp_w,
	cd_material_w,
	vl_pagto_w,
	ie_libera_solic_w,
	nr_seq_crit_rateio_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	if	((nr_seq_contrato_w <> nr_seq_contrato_ww) or (cd_centro_custo_w <> cd_centro_custo_ww) or (dt_venc_pagto_w <> dt_venc_pagto_ww)) then
				
		select nextval('solic_compra_seq')
		into STRICT nr_solic_compra_w
		;
			
		insert into solic_compra(
			nr_solic_compra,
			cd_estabelecimento,
			dt_solicitacao_compra,
			dt_atualizacao,
			nm_usuario,
			ie_situacao,
			cd_pessoa_solicitante,
			cd_centro_custo,
			ds_observacao,
			ie_aviso_chegada,
			ie_aviso_aprov_oc,
			ie_urgente,
			ie_tipo_servico,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_fornec_sugerido)
		values (	nr_solic_compra_w,
			cd_estabelecimento_p,
			clock_timestamp(),
			clock_timestamp(),
			nm_usuario_p,
			'A',
			cd_pessoa_solic_padrao_w,
			cd_centro_custo_w,
			Wheb_mensagem_pck.get_Texto(302221, 'NR_SEQ_CONTRATO_W='|| NR_SEQ_CONTRATO_W),/*'Solicitacao gerada atraves das regras de solicitacao de pagamento do contrato ' || NR_SEQ_CONTRATO_W,*/			
			'N',
			'N',
			'N',
			'SP',
			clock_timestamp(),
			nm_usuario_p,
			cd_cgc_contratado_w);
	
	nr_seq_contrato_ww := nr_seq_contrato_w;
	cd_centro_custo_ww := cd_centro_custo_w;
	dt_venc_pagto_ww := dt_venc_pagto_w;
	end if;
		
	if (nr_solic_compra_w > 0) then
	
		select	coalesce(max(nr_item_solic_compra),0) + 1
		into STRICT	nr_item_solic_compra_w
		from	solic_compra_item
		where	nr_solic_compra = nr_solic_compra_w;
		
		select	cd_unidade_medida_compra
		into STRICT	cd_unidade_medida_compra_w
		from	material
		where	cd_material = cd_material_w;

		ie_tipo_conta_w := 3;

		if (coalesce(cd_centro_custo_w::text, '') = '') then
			ie_tipo_conta_w	:= 2;
		end if;

		SELECT * FROM define_conta_material(
			cd_estabelecimento_p, cd_material_w, ie_tipo_conta_w, 0, 0, 0, 0, 0, 0, 0, cd_local_estoque_w, 0, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null, 'N') INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;		
		
		insert into solic_compra_item(
			nr_solic_compra,
			nr_item_solic_compra,
			cd_material,
			cd_unidade_medida_compra,
			qt_material,
			dt_atualizacao,
			nm_usuario,
			ie_situacao,
			dt_solic_item,
			vl_unit_previsto,
			ie_geracao,
			nr_contrato,
			nr_seq_regra_contrato,
			cd_conta_contabil,
			qt_saldo_disp_estoque,
			nr_seq_criterio_rateio)
		values (	nr_solic_compra_w,
			nr_item_solic_compra_w,
			cd_material_w,
			cd_unidade_medida_compra_w,
			1,
			clock_timestamp(),
			nm_usuario_p,
			'A',
			dt_venc_pagto_w,
			vl_pagto_w,
			'A',
			nr_seq_contrato_w,
			nr_seq_regra_w,
			cd_conta_contabil_w,
			obter_saldo_disp_estoque(cd_estabelecimento_p, cd_material_w, cd_local_estoque_w, trunc(clock_timestamp(),'mm')),
			nr_seq_crit_rateio_w);
		
		insert into solic_compra_item_entrega(
			nr_solic_compra,
			nr_item_solic_compra,
			nr_item_solic_compra_entr,
			qt_entrega_solicitada,
			dt_entrega_solicitada,
			dt_atualizacao,
			nm_usuario)
		values (	nr_solic_compra_w,
			nr_item_solic_compra_w,
			1,
			1,
			dt_venc_pagto_w,
			clock_timestamp(),
			nm_usuario_p);
			
		if (ie_libera_solic_w = 'S') and (obter_se_contido(nr_solic_compra_w,ds_solic_compra_w) = 'N') then
			ds_solic_compra_w := substr(ds_solic_compra_w || nr_solic_compra_w || ',',1,4000);
		end if;
	end if;
	end;
end loop;
close C01;

open C02;
loop
fetch C02 into	
	nr_solic_compra_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin	
	CALL consistir_solic_compra(nr_solic_compra_w,nm_usuario_p);
	
	select	count(1)
	into STRICT	qt_existe_w
	from	solic_compra_consist
	where	nr_solic_compra = nr_solic_compra_w
	and	ie_forma_consistencia in ('C','S');
	
	if (qt_existe_w = 0) then
		CALL gerar_aprov_solic_compra(nr_solic_compra_w, null, nm_usuario_p, 90, 'S');
	end if;
	
	end;
end loop;
close C02;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_solic_pagto_contrato (nr_seq_contrato_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

