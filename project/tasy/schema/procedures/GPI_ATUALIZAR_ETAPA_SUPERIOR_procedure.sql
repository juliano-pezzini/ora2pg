-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gpi_atualizar_etapa_superior ( nr_sequencia_p bigint, nm_usuario_p text, nr_seq_superior_p bigint default null) AS $body$
DECLARE




dt_inicio_prev_w	timestamp;
dt_fim_prev_w		timestamp;
dt_inicio_real_w	timestamp;
dt_fim_real_w		timestamp;
nr_seq_superior_w	bigint;
nr_seq_superior_ww	bigint;
nr_seq_cronograma_w	bigint;
pr_etapa_w		double precision;
pr_etapa_ww		double precision;
pr_total_etapa_w	double precision;
qt_hora_prev_w		double precision;
qt_hora_prev_ww		double precision	:= 0;
qt_hora_real_w		double precision;
qt_registro_w		bigint;
pr_calculo_w		double precision;
ie_forma_calculo_w	varchar(3);
cd_estabelecimento_w	smallint;


c01 CURSOR FOR
SELECT	nr_sequencia,
	pr_etapa,
	abs(coalesce(CASE WHEN qt_hora_prev=0 THEN  obter_hora_entre_datas(trunc(dt_inicio_prev,'dd'), fim_dia(dt_fim_prev))  ELSE qt_hora_prev END ,0)) qt_hora_prev
from	gpi_cron_etapa
where	nr_seq_superior = nr_seq_superior_w;

vet01 c01%rowtype;



BEGIN

cd_estabelecimento_w	:= coalesce(wheb_usuario_pck.get_cd_estabelecimento,1);

select	substr(coalesce(max(obter_valor_param_usuario(7027, 93, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w)),'Q'),1,3)
into STRICT	ie_forma_calculo_w
;

if (coalesce(nr_seq_superior_p,0) <> 0) then
	nr_seq_superior_w	:= nr_seq_superior_p;
end if;

if (coalesce(nr_seq_superior_w::text, '') = '') then
	select	max(a.nr_seq_superior)
	into STRICT	nr_seq_superior_w
	from	gpi_cron_etapa a
	where	a.nr_sequencia	= nr_sequencia_p;
end if;

select	coalesce(sum(a.qt_hora_prev),0),
	coalesce(sum(a.qt_hora_real),0),
	coalesce(sum(a.pr_etapa),0),
	min(dt_inicio_real),
	max(dt_fim_real),
	min(dt_inicio_prev),
	max(dt_fim_prev)
into STRICT	qt_hora_prev_w,
	qt_hora_real_w,
	pr_etapa_w,
	dt_inicio_real_w,
	dt_fim_real_w,
	dt_inicio_prev_w,
	dt_fim_prev_w
from	gpi_cron_etapa a
where	a.nr_seq_superior		= nr_seq_superior_w;


if (ie_forma_calculo_w = 'P') then
	begin
	qt_hora_prev_ww	:= coalesce(qt_hora_prev_w,0);

	if (qt_hora_prev_ww = 0) then
		begin
		/*qt_hora_prev_ww	:= abs(obter_hora_entre_datas(trunc(dt_inicio_prev_w,'dd'), fim_dia(dt_fim_prev_w)));*/

		open c01;
		loop
		fetch c01 into
			vet01;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			qt_hora_prev_ww	:= qt_hora_prev_ww + vet01.qt_hora_prev;
			end;
		end loop;
		close c01;

		end;
	end if;



	open c01;
	loop
	fetch c01 into
		vet01;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		pr_calculo_w	:= dividir_sem_round(vet01.qt_hora_prev, qt_hora_prev_ww) * 100;
		pr_calculo_w	:= dividir_sem_round((pr_calculo_w * vet01.pr_etapa)::numeric, 100);
		pr_etapa_ww	:= coalesce(pr_etapa_ww,0) + pr_calculo_w;
		end;
	end loop;

	end;
elsif (ie_forma_calculo_w = 'Q') then
	begin

	qt_hora_prev_ww	:= coalesce(qt_hora_prev_w,0);

	select	count(*)
	into STRICT	qt_registro_w
	from	gpi_cron_etapa a
	where	a.nr_seq_superior	= nr_seq_superior_w
	and	coalesce(a.dt_fim_real::text, '') = '';

	select (count(*) *100) --corresponder√° ao 100%
	into STRICT	pr_total_etapa_w
	from	gpi_cron_etapa a
	where	a.nr_seq_superior	= nr_seq_superior_w;

	pr_etapa_ww	:= (dividir((pr_etapa_w * 100), pr_total_etapa_w));

	end;
end if;

if (coalesce(qt_registro_w,0) <> 0) then

	dt_fim_real_w	:= null;

end if;

if (pr_etapa_ww > 100) then
	begin
	pr_etapa_ww	:= 100;
	end;
end if;



if (qt_hora_prev_ww = 0) then
	qt_hora_prev_w	:= 0;
end if;



update	gpi_cron_etapa
set	qt_hora_prev		= qt_hora_prev_w,
	qt_hora_real		= qt_hora_real_w,
	dt_inicio_real		= dt_inicio_real_w,
	dt_fim_real		= dt_fim_real_w,
	dt_inicio_prev		= dt_inicio_prev_w,
	dt_fim_prev		= dt_fim_prev_w,
	dt_atualizacao		= clock_timestamp(),
	pr_etapa		= pr_etapa_ww,
	nm_usuario		= nm_usuario_p
where	nr_sequencia		= nr_seq_superior_w;

if (coalesce(nr_seq_superior_p,0) <> 0) and (nr_sequencia_p = nr_seq_superior_p) then
	select	max(a.nr_seq_superior)
	into STRICT	nr_seq_superior_w
	from	gpi_cron_etapa a
	where	a.nr_sequencia	= nr_sequencia_p;
end if;

if (coalesce(nr_seq_superior_w, 0) <> 0) then /*Enquanto houver superiores ...*/
	CALL gpi_atualizar_etapa_superior(	nr_seq_superior_w,
				nm_usuario_p,null);

end if;


select	max(nr_seq_cronograma)
into STRICT	nr_seq_cronograma_w
from	gpi_cron_etapa
where	nr_sequencia	= nr_sequencia_p;

CALL gpi_atualizar_cronograma(	nr_seq_cronograma_w,
			nm_usuario_p);

commit;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gpi_atualizar_etapa_superior ( nr_sequencia_p bigint, nm_usuario_p text, nr_seq_superior_p bigint default null) FROM PUBLIC;

