-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_111_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_seq_selecao_w		pls_util_cta_pck.t_number_table;
tb_valido_w			pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w			pls_util_cta_pck.t_varchar2_table_4000;
ie_gera_ocor_w			varchar(1);
qt_procedimento_w		integer;
nr_index_sel_w			integer;

-- Informações da validação guia principal autorização
C01 CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	a.ie_valida_qtde_diaria,
		a.ie_desconsidera_acompanhante
	from	pls_oc_cta_val_diaria_util a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_pc;

C02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	sel.nr_sequencia nr_seq_selecao,
		(Obter_Dias_Entre_Datas_hora(conta.dt_inicio_faturamento,conta.dt_fim_faturamento) + 1) qt_dias_internado,
		conta.nr_sequencia nr_seq_conta
	from	pls_oc_cta_selecao_imp sel,
		pls_conta_imp conta
	where	conta.nr_sequencia	= sel.nr_seq_conta
	and	sel.nr_id_transacao 	= nr_id_transacao_pc
	and	sel.ie_valido 		= 'S';

c02_w		c02%rowtype;

BEGIN
nr_index_sel_w:=0;
-- Deve existir informação da regra para aplicar a validação
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') then

	for	r_C01_w in C01(nr_seq_combinada_p) loop

		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_ocor_imp_pck.atualiza_campo_auxiliar(	'V',
								'N',
								nr_id_transacao_p,
								null);

		if (r_C01_w.ie_valida_qtde_diaria = 'S') then

			--limpa as variáveis
			SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;

			open c02(nr_id_transacao_p);
			loop
			fetch c02 into
				c02_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin

				ie_gera_ocor_w := 'N';

				if (r_c01_w.ie_desconsidera_acompanhante = 'S') then
					select	sum(proc.qt_executado)
					into STRICT	qt_procedimento_w
					from	pls_conta_proc_imp proc
					where	proc.nr_seq_conta	= c02_w.nr_seq_conta
					and 	proc.ie_tipo_despesa_conv 	= '3'
					and	not exists	(SELECT 1
								from 	pls_procedimento_vigencia	p
								where	p.ie_origem_proced 	= proc.ie_origem_proced_conv
								and	p.cd_procedimento	= proc.cd_procedimento_conv
								and	p.ie_diaria_acompanhante = 'S'
								and	p.dt_inicio_vigencia <= proc.dt_execucao_conv
								and	((coalesce(p.dt_fim_vigencia::text, '') = '') or (p.dt_fim_vigencia >= proc.dt_execucao_conv)));
				else
					select	sum(qt_executado)
					into STRICT	qt_procedimento_w
					from	pls_conta_proc_imp proc
					where	proc.nr_seq_conta		= c02_w.nr_seq_conta
					and 	proc.ie_tipo_despesa_conv 	= '3';
				end if;


				if (c02_w.qt_dias_internado < qt_procedimento_w) then
					begin
					 ie_gera_ocor_w := 'S';
					end;
				end if;

				if (ie_gera_ocor_w = 'S') then

					tb_seq_selecao_w(nr_index_sel_w) := c02_w.nr_seq_selecao;
					tb_observacao_w(nr_index_sel_w) := 'Quantidades de diárias é incompatível com a permanência hospitalar. Permanência '||c02_w.qt_dias_internado||' quantidade de diárias '||qt_procedimento_w;
					tb_valido_w(nr_index_sel_w) :=	'S';

					if (nr_index_sel_w >= pls_cta_consistir_pck.qt_registro_transacao_w ) then

						--Grava o que restar nas variáveis na tabela
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ');
						--limpa as variáveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;

						nr_index_sel_w		:= 0;
					else
						nr_index_sel_w := nr_index_sel_w + 1;
					end if;
				end if;


				end;
			end loop;
			close c02;


			if (tb_seq_selecao_w.count > 0) then
				--Grava o que restar nas variáveis na tabela
				CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
										tb_valido_w,
										tb_observacao_w,
										nr_id_transacao_p,
										'SEQ');

			end if;

		end if;

		-- seta os registros que serão válidos ou inválidos após o processamento
		CALL pls_ocor_imp_pck.atualiza_campo_valido('V',
							'N',
							ie_regra_excecao_p,
							null,
							nr_id_transacao_p,
							null);

	end loop;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_111_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

