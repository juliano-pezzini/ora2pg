-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_suep ( nr_seq_suep_p bigint, nr_atendimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) AS $body$
DECLARE


dt_inicial_w		timestamp;
dt_final_w		timestamp;
nm_tabela_w		varchar(50);
nm_atributo_data_w	varchar(50);
nm_atributo_inf_w	varchar(255);
ie_grupo_suep_w		varchar(255);
nr_seq_apres_w		bigint;
nr_seq_exame_w		bigint;
ie_result_exame_w	varchar(10);
ds_informacao_w		varchar(255);
ds_comando_w		varchar(4000);
qt_reg_w		bigint;
C04			integer;
dt_referencia_w		timestamp;
vl_informacao_w		double precision;
retorno_w		integer;
nr_seq_suep_w		bigint;
nr_seq_suep_item_w	bigint;
nr_seq_item_w		bigint;
qt_resultado_w		double precision;
pr_resultado_w		double precision;
ds_resultado_w		varchar(4000);
nm_pessoa_fisica_w	varchar(60);
dt_entrada_w		timestamp;
nr_prontuario_w		bigint;
ie_tipo_sangue_w	varchar(2);
ie_fator_rh_w		varchar(1);
cd_categoria_w		varchar(10);
cd_setor_atendimento_w	integer;
cd_unidade_basica_w	varchar(10);
cd_unidade_compl_w	varchar(10);
qt_peso_adm_w		double precision;
qt_dias_internacao_w	bigint;
qt_dias_po_w		bigint;
cd_convenio_w		integer;
cd_pessoa_fisica_w	varchar(10);
dt_alta_w		timestamp;
ds_convenio_w		varchar(255);
ds_categoria_w		varchar(80);
nr_atendimento_w	bigint;

ie_classif_doenca_w	varchar(1);
ie_tipo_diagnostico_w	smallint;
cd_doenca_w		varchar(10);
ds_doenca_w		varchar(255);
ds_lista_problemas_w	varchar(4000)	:= '';
cd_evolucao_w		bigint;
dt_diagnostico_w	timestamp;
ds_unid_med_w		varchar(15);

/*Regra Sinais vitais*/

qt_idade_w				double precision;
qt_idade_dia_w			double precision;
cd_escala_dor_w			varchar(5);
cd_perfil_w				bigint;
qt_minimo_per_w			double precision;
qt_minimo_w				double precision;
vl_maximo_per_w			double precision;
vl_maximo_w			double precision;
/*Regra Sinais Vitais*/

ie_sexo_w	varchar(1);
/*Escalas*/

qt_pont_min_w			integer;
qt_pont_max_w			integer;
qt_risco_min_w			integer;
qt_risco_max_w			integer;

C01 CURSOR FOR
	SELECT	d.nr_sequencia,
			c.ie_tipo_item,
			d.nr_seq_apres,
			d.nr_seq_exame,
			coalesce(d.ie_result_exame,'R'),
			e.nm_tabela,
			e.nm_atributo_data,
			e.nm_atributo_inf,
			substr(coalesce(coalesce(coalesce(d.ds_informacao_inst,e.ds_nome_instituicao),e.ds_informacao),obter_desc_exame(d.nr_seq_exame)),1,255) ds_informacao,
			e.ds_unid_med ds_unid_med,
			ie_classificacao_doenca,
			ie_tipo_diagnostico,
			f.qt_pont_min,
			f.qt_pont_max,
			f.qt_risco_min,
			f.qt_risco_max
	FROM item_suep c, suep_grupo b, suep a, informacao_suep d
LEFT OUTER JOIN pep_informacao e ON (d.nr_seq_inf = e.nr_sequencia)
LEFT OUTER JOIN escala_documentacao f ON (e.ie_escala = f.ie_escala)
WHERE b.nr_seq_suep	= a.nr_sequencia and c.nr_seq_grupo 	= b.nr_sequencia and d.nr_seq_item 	= c.nr_sequencia   and a.nr_sequencia 	= nr_seq_suep_p;



c02 CURSOR FOR
	SELECT	distinct
			a.dt_resultado,
			coalesce(b.qt_resultado,0),
			b.pr_resultado,
			b.ds_resultado
	from	exame_lab_result_item b,
			prescr_procedimento x,
			prescr_medica d,
			exame_lab_resultado a
	where	a.nr_seq_resultado	= b.nr_seq_resultado
	and		d.nr_prescricao 	= a.nr_prescricao
	and		d.nr_prescricao		= x.nr_prescricao
	and		x.nr_sequencia		= b.nr_seq_prescr
	and 	d.nr_atendimento = nr_atendimento_p
	and 	a.dt_resultado between dt_inicial_w and dt_final_w
	and		coalesce(d.dt_suspensao::text, '') = ''
	and		b.nr_seq_exame	= nr_seq_exame_w
	and		(d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> '');

c05 CURSOR FOR
	SELECT	b.qt_minimo,
		b.vl_maximo
	from	sinal_vital_regra b,
		sinal_vital a
	where	1 = 1 --a.nr_sequencia	= 13 --nr_seq_item_p
	and	a.nr_sequencia	= b.nr_seq_sinal
	and	((qt_idade_w  between b.qt_idade_min and b.qt_idade_max) or (qt_idade_dia_w between b.qt_idade_min_dias and b.qt_idade_max_dias))
	and	coalesce(b.cd_setor_Atendimento,cd_setor_Atendimento_w)	= cd_setor_Atendimento_w
	and (coalesce(b.cd_escala_dor::text, '') = '' or
		coalesce(cd_escala_dor_w::text, '') = '' or
		b.cd_escala_dor = cd_escala_dor_w)
	and	coalesce(b.cd_estabelecimento,Wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento
	and	coalesce(b.cd_perfil,cd_perfil_w) = cd_perfil_w
	and	nm_atributo = nm_atributo_inf_w
	and	(b.vl_maximo IS NOT NULL AND b.vl_maximo::text <> '')
	and	(b.qt_minimo IS NOT NULL AND b.qt_minimo::text <> '')
	order by coalesce(b.cd_setor_atendimento,0), coalesce(b.cd_escala_dor,'0') desc, coalesce(b.cd_estabelecimento,0);

	procedure	gerar_w_suep is
	;
BEGIN


		select	a.cd_pessoa_fisica,
			a.dt_entrada,
			c.cd_unidade_basica,
			c.cd_unidade_compl,
			c.cd_setor_atendimento,
			b.cd_convenio,
			b.cd_categoria,
			a.dt_alta,
			v.ds_convenio,
			t.ds_categoria,
			obter_idade_pf(a.cd_pessoa_fisica,clock_timestamp(),'A'),
			obter_idade_pf(a.cd_pessoa_fisica,clock_timestamp(),'DIA'),
			obter_sexo_pf(a.cd_pessoa_fisica,'C')
		into STRICT	cd_pessoa_fisica_w,
			dt_entrada_w,
			cd_unidade_basica_w,
			cd_unidade_compl_w,
			cd_setor_atendimento_w,
			cd_convenio_w,
			cd_categoria_w,
			dt_alta_w,
			ds_convenio_w,
			ds_categoria_w,
			qt_idade_w,
			qt_idade_dia_w,
			ie_sexo_w
		from	convenio v,
			categoria_convenio t,
			atend_paciente_unidade c,
			atend_categoria_convenio b,
			atendimento_paciente a
		where	a.nr_atendimento	 = nr_atendimento_p
		and	a.nr_atendimento = c.nr_atendimento
		and 	c.nr_seq_interno = obter_atepacu_paciente(a.nr_atendimento, 'A')
		and	a.nr_atendimento	= b.nr_atendimento
		and	b.nr_seq_interno	= obter_atecaco_atendimento(a.nr_atendimento)
		and	b.cd_convenio		= v.cd_convenio
		and	b.cd_convenio		= t.cd_convenio
		and	b.cd_categoria		= t.cd_categoria;


		select	nm_pessoa_fisica,
			nr_prontuario,
			ie_tipo_sangue,
			ie_fator_rh
		into STRICT	nm_pessoa_fisica_w,
			nr_prontuario_w,
			ie_tipo_sangue_w,
			ie_fator_rh_w
		from	pessoa_fisica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w;



		qt_dias_internacao_w	:= trunc(coalesce(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_alta_w), ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())) - dt_entrada_w) + 1;
		qt_dias_po_w			:= Obter_Dias_Pos_Operatorio(nr_atendimento_p);
		qt_peso_adm_w			:= obter_primeiro_sinal_vital(nr_atendimento_p,'Peso');

		select	nextval('w_suep_seq')
		into STRICT	nr_seq_suep_w
		;

		insert into w_suep( nr_sequencia,
							 dt_atualizacao,
							 nm_usuario,
							 dt_atualizacao_nrec,
							 nm_usuario_nrec,
							 nr_atendimento,
							 dt_entrada,
							 nm_pessoa_fisica,
							nr_prontuario,
							ie_tipo_sangue,
							ie_fator_rh,
							cd_unidade_basica,
							cd_unidade_compl,
							cd_setor_atendimento,
							cd_convenio,
							cd_categoria,
							qt_dias_internacao,
							qt_dias_po,
							qt_peso_adm,
							ds_convenio,
							ds_categoria)
		values (
							nr_seq_suep_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_atendimento_p,
							dt_entrada_w,
							nm_pessoa_fisica_w,
							nr_prontuario_w,
							ie_tipo_sangue_w,
							ie_fator_rh_w,
							cd_unidade_basica_w,
							cd_unidade_compl_w,
							cd_setor_atendimento_w,
							cd_convenio_w,
							cd_categoria_w,
							qt_dias_internacao_w,
							qt_dias_po_w,
							qt_peso_adm_w,
							ds_convenio_w,
							ds_categoria_w
			 );


	end;


	procedure gerar_w_suep_item(	ds_informacao_p	varchar2,
					ds_unid_med_p varchar2,
					nr_seq_item_p	number,
					nr_seq_apres_p	number,
					ie_grupo_suep_p varchar2,
					qt_minimo_p		number ,
					vl_maximo_p		number ) is
	begin
		if (ds_informacao_p IS NOT NULL AND ds_informacao_p::text <> '') then
			select	nextval('w_suep_item_seq')
			into STRICT	nr_seq_suep_item_w
			;

			insert into w_suep_item(
						 nr_sequencia,
						 dt_atualizacao,
						 nm_usuario,
						 dt_atualizacao_nrec,
						 nm_usuario_nrec,
						 nr_seq_suep,
						 nr_seq_inf,
						 ds_informacao,
						 ds_unid_med,
						 nr_seq_apres,
						 ie_grupo_suep,
						 vl_max_inf_sv,
						 vl_min_inf_sv,
						 qt_pont_min,
						 qt_pont_max,
						 qt_risco_min,
						 qt_risco_max)
					values (
						 nr_seq_suep_item_w,
						 clock_timestamp(),
						 nm_usuario_p,
						 clock_timestamp(),
						 nm_usuario_p,
						 nr_seq_suep_w,
						 nr_seq_item_p,
						 ds_informacao_p,
						 ds_unid_med_w,
						 nr_seq_apres_p,
						 ie_grupo_suep_p,
						 vl_maximo_p,
						 qt_minimo_p,
						 qt_pont_min_w,
						 qt_pont_max_w,
						 qt_risco_min_w,
						 qt_risco_max_w);
		end if;
	end;

	procedure gravar_w_suep_item_data(	DT_INFORMACAO_p	date,
						VL_INFORMACAO_p	number,
						DS_INFORMACAO_P	varchar2 ) is
	begin

		if (dt_informacao_p IS NOT NULL AND dt_informacao_p::text <> '') and (vl_informacao_p IS NOT NULL AND vl_informacao_p::text <> '') then
			insert into w_suep_item_data(
						 nr_sequencia,
						 dt_atualizacao,
						 nm_usuario,
						 dt_atualizacao_nrec,
						 nm_usuario_nrec,
						 nr_seq_suep_item,
						 dt_informacao,
						 vl_informacao,
						 ds_informacao)
					values (
						 nextval('w_suep_item_data_seq'),
						 clock_timestamp(),
						 nm_usuario_p,
						 clock_timestamp(),
						 nm_usuario_p,
						 nr_seq_suep_item_w,
						 dt_informacao_p,
						 vl_informacao_p,
						 ds_informacao_p);

		end if;
	end;

begin

cd_perfil_w	:= coalesce(obter_perfil_ativo,0);

select 	coalesce((	 select	nr_atendimento nr_atendimento
		 from	atendimento_paciente
		 where	nr_atendimento = nr_atendimento_p),0) nr_atendimento
into STRICT  	nr_atendimento_w
;

if (coalesce(nr_atendimento_w,0) > 0) then

	dt_inicial_w	:=  ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicial_p);
	dt_final_w		:=  ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_final_p,clock_timestamp()));


	delete	from w_suep
	where	dt_atualizacao < clock_timestamp() - interval '12 days'/24;

	delete	from w_suep
	where	nr_atendimento	= nr_atendimento_p
	and	nm_usuario	= nm_usuario_p;

	gerar_w_suep;

	open C01;
	loop
	fetch C01 into
		nr_seq_item_w,
		ie_grupo_suep_w,
		nr_seq_apres_w,
		nr_seq_exame_w,
		ie_result_exame_w,
		nm_tabela_w,
		nm_atributo_data_w,
		nm_atributo_inf_w,
		ds_informacao_w,
		ds_unid_med_w,
		ie_classif_doenca_w,
		ie_tipo_diagnostico_w,
		qt_pont_min_w,
		qt_pont_max_w,
		qt_risco_min_w,
		qt_risco_max_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		if (ie_grupo_suep_w = 'SV' and (nm_atributo_inf_w IS NOT NULL AND nm_atributo_inf_w::text <> '')) then
			open C05;
			loop
			fetch C05 into
				qt_minimo_per_w,
				vl_maximo_per_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin
					qt_minimo_w := qt_minimo_per_w;
					vl_maximo_w := vl_maximo_per_w;
				end;
			end loop;
			close C05;
		elsif (ie_grupo_suep_w = 'EX' and (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '')) then
			select 	max(qt_minima),
					max(qt_maxima)
			into STRICT	qt_minimo_w,
					vl_maximo_w
			from (	SELECT 	qt_minima,
							qt_maxima,
							qt_percent_min,
						qt_percent_max
				from 	exame_lab_padrao
				where 	((ie_sexo = ie_sexo_w) or (ie_sexo = '0'))
				and 	nr_seq_exame = nr_seq_exame_w
				and 	qt_idade_w between coalesce(qt_idade_min,0) and coalesce(qt_idade_max,99999)
				and coalesce(ie_situacao,'A') = 'A'
				order by coalesce(nr_seq_material, 9999999999), coalesce(nr_seq_metodo, 9999999999), ie_sexo, CASE WHEN ie_periodo='D' THEN 1 WHEN ie_periodo='M' THEN 2  ELSE 3 END ) alias12 LIMIT 1;
		end if;

		if (ie_grupo_suep_w = 'EX' or ie_grupo_suep_w = 'SV' or ie_grupo_suep_w = 'EI') then

			gerar_w_suep_item(	ds_informacao_w,
						ds_unid_med_w,
						nr_seq_item_w,
						nr_seq_apres_w,
						ie_grupo_suep_w,
						qt_minimo_w,
						vl_maximo_w);


		end if;


		qt_minimo_w := null;
		vl_maximo_w := null;

		if (ie_grupo_suep_w = 'SV') or (ie_grupo_suep_w = 'EI') then

			ds_comando_w	:= 			'select	     	'||nm_atributo_data_w||' dt_referencia ,'||
								'            	'||nm_atributo_inf_w ||' ds_informacao '||
								'from		'||nm_tabela_w	||' '||
								'where		nr_atendimento = :nr_atendimento '||
								'and		'||nm_atributo_data_w|| ' between :dt_inicial and :dt_final '||
								'and		'||nm_atributo_inf_w|| ' is not null';

			select	count(*)
			into STRICT	qt_reg_w
			from	tabela_atributo
			where	nm_tabela	= nm_tabela_w
			and		nm_atributo = 'DT_LIBERACAO';

			if (qt_reg_w	> 0) then
				ds_comando_w := ds_comando_w ||' and dt_liberacao is not null ';
			end if;

			select	count(*)
			into STRICT	qt_reg_w
			from	tabela_atributo
			where	nm_tabela	= nm_tabela_w
			and		nm_atributo = 'DT_INATIVACAO';

			if (qt_reg_w	> 0) then
				ds_comando_w := ds_comando_w ||' and DT_INATIVACAO is null ';
			end if;


			C04 := DBMS_SQL.OPEN_CURSOR;
			DBMS_SQL.PARSE(C04, ds_comando_w, dbms_sql.Native);

			DBMS_SQL.DEFINE_COLUMN(C04,1,dt_referencia_w);
			DBMS_SQL.DEFINE_COLUMN(C04,2,vl_informacao_w);

			DBMS_SQL.BIND_VARIABLE(C04,'NR_ATENDIMENTO', NR_ATENDIMENTO_P);
			DBMS_SQL.BIND_VARIABLE(C04,'DT_INICIAL', dt_inicial_w);
			DBMS_SQL.BIND_VARIABLE(C04,'DT_FINAL', dt_final_w);

			retorno_w := DBMS_SQL.execute(C04);


			while( DBMS_SQL.FETCH_ROWS(C04) > 0 ) loop
				begin
				DBMS_SQL.COLUMN_VALUE(C04,1,dt_referencia_w);
				DBMS_SQL.COLUMN_VALUE(C04,2,vl_informacao_w);

				gravar_w_suep_item_data(dt_referencia_w,
										vl_informacao_w);

				end;
			end loop;


			DBMS_SQL.CLOSE_CURSOR(C04);

		elsif (ie_grupo_suep_w	= 'EX') then

			open C02;
			loop
			fetch C02 into
				dt_referencia_w,
				qt_resultado_w,
				pr_resultado_w,
				ds_resultado_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin

				if (ie_result_exame_w	= 'P') then
					vl_informacao_w	:= pr_resultado_w;
				elsif (ie_result_exame_w	= 'R') then
					vl_informacao_w	:= qt_resultado_w;
				end if;

				gravar_w_suep_item_data(dt_referencia_w,
							vl_informacao_w,
							ds_resultado_w);

				end;
			end loop;
			close C02;


		end if;
		commit;
		end;
	end loop;
	close C01;

	delete	from w_suep_item a
	where	nr_seq_suep	= nr_seq_suep_w
	and		not exists (	SELECT	1
							from	w_suep_item_data x
							where	x.NR_SEQ_SUEP_ITEM = a.nr_sequencia
							);

	commit;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_suep ( nr_seq_suep_p bigint, nr_atendimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) FROM PUBLIC;

