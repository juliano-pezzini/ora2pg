-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_horario_agenda_global ( cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, dt_final_p timestamp, qt_minutos_p bigint, hr_inicial_p text, hr_final_p text, ds_restricao_p text, nm_usuario_p text, ie_grava_Livre_p text, cd_medico_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, ds_horarios_p INOUT text) AS $body$
DECLARE

 
ie_tipo_horario_w		varchar(1);
nr_seq_horario_w		bigint;
ie_feriado_w			varchar(0001)	:= 'N';
ie_dia_semana_w			smallint;
hr_inicial_w			timestamp;
hr_final_w			timestamp;
hr_inicial_intervalo_w		timestamp;
hr_final_intervalo_w		timestamp;
hr_atual_w			timestamp;
nr_minuto_intervalo_w		smallint;
ie_existe_agenda_w		varchar(0001);
ie_bloqueio_w			varchar(0001);
ie_bloqueio_hora_w		varchar(0001);
ie_bloqueio_dia_w		varchar(0001);
qt_horario_w			smallint  := 0;
nr_sequencia_w			bigint  := 0;
dt_agenda_w			timestamp;
ds_horarios_w			varchar(0255)	:= '';
Virgula_w			varchar(1)		:= '';
qt_min_duracao_w		bigint	:= 0;
hr_inicio_w			timestamp;
hr_fim_w			timestamp;
hr_inicial_par_w		timestamp;
hr_final_par_w			timestamp;
cd_turno_w			smallint	:= 0;
cd_medico_w			varchar(10);
nr_seq_agenda_medico_w		bigint;
cd_medico_exec_w		varchar(10);

qt_min_minimo_w			bigint;
qt_turno_w			bigint;
qt_intervalo_w			bigint;
HR_NADA_W			timestamp;
ie_sobra_horario_w		varchar(01);
ie_bloqueio_dia_hora_w		varchar(01);
ie_utilizar_hor_turno_w		varchar(1);
ds_observacao_horario_w		varchar(255);
ie_gerar_obs_horario_w		varchar(01);
ie_autorizacao_w		varchar(05);
ie_excluir_livres_w		varchar(01) 	:= 'N';
qt_agenda_w			bigint;
HR_QUEBRA_TURNO_W		varchar(05);
qt_min_QUEBRA_TURNO_W		varchar(05);
nr_seq_sala_w			bigint;
ie_anestesista_w		varchar(01)	:= 'N';
ie_gerar_forcado_w		varchar(01)	:= 'N';
ie_gerar_autorizacao_livres_w	varchar(01)	:= 'S';

dt_forcado_w			timestamp;
nr_min_forcado_w		bigint;
cd_agenda_forcado_w		bigint;

ie_tipo_atendimento_w		smallint;/* Rafael em 16/10/2006 OS 42479 */
ie_horario_adicional_w		varchar(1);/* Rafael em 09/11/2006 OS 43852 */
NR_SEQ_CLASSIF_AGENDA_w		bigint;

nr_seq_especial_w		bigint;
hr_inicial_dia_w		timestamp;
hr_final_dia_w			timestamp;
nr_minuto_duracao_w		bigint;
cd_procedencia_w		integer;
ie_origem_dados_w		varchar(10);
ie_horario_w			varchar(1);
ie_gerar_hor_bloq_w	varchar(1)	:= 'N';
nr_seq_agenda_w		bigint;

/* variaveis de controle sobra horário */
 
hr_horario_inicial_w		timestamp;
hr_horario_final_w		timestamp;
nr_minuto_horario_w		bigint;
hr_horario_sobra_w		timestamp;
nr_minuto_sobra_w		bigint;
qt_horario_sobra_w		bigint;
hr_horario_ant_sobra_w		timestamp;

 
ie_bloqueio_agenda_w	varchar(1);

 
C01 CURSOR FOR 
	SELECT 	'N' ie_horario, 
		nr_sequencia, 
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
			to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
		 	to_char(hr_final,'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
			to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
		 	to_char(coalesce(hr_Inicial_Intervalo,hr_final),'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
			to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
		 	to_char(coalesce(hr_final_Intervalo,hr_final),'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
			--decode(nvl(qt_minutos_p,0),0, nr_minuto_intervalo, qt_minutos_p), 
			CASE WHEN ie_utilizar_hor_turno_w='S' THEN nr_minuto_intervalo  ELSE CASE WHEN coalesce(obter_tempo_duracao_proced(cd_agenda_p, coalesce(cd_medico_p,obter_executor_agenda_exame(a.nr_seq_medico_exec)), cd_procedimento_p, ie_origem_proced_p,null, nr_seq_proc_interno_p,null,null,null,null,null,ie_dia_semana_w),0)=0 THEN  nr_minuto_intervalo  ELSE obter_tempo_duracao_proced(cd_agenda_p, coalesce(cd_medico_p,obter_executor_agenda_exame(a.nr_seq_medico_exec)), cd_procedimento_p, ie_origem_proced_p, null, nr_seq_proc_interno_p,null,null,null,null,null,ie_dia_semana_w) END  END , 
			a.cd_medico, 
			a.nr_seq_medico_exec, 
			a.ds_observacao, 
			a.nr_seq_sala, 
			a.NR_SEQ_CLASSIF_AGENDA 
	from 		agenda_Horario a 
	where 	cd_agenda   	= cd_agenda_p 
	 --and 	((dt_dia_semana	= ie_dia_Semana_w) or (dt_dia_semana = 9)) /* Rafael em 15/01/2007 OS48386 (9) */ 
	 and	((dt_dia_semana = ie_dia_semana_w) or ((dt_dia_semana = 9) and (ie_dia_Semana_w not in (7,1)))) 
	 and	((nr_seq_especial_w 	= 0) or (ie_horario_adicional_w = 'S')) 
	 and	((coalesce(dt_final_vigencia::text, '') = '') or (dt_final_vigencia >= trunc(dt_agenda_p))) 
	 and	((coalesce(dt_inicio_vigencia::text, '') = '') or (dt_inicio_vigencia <= trunc(dt_agenda_p))) 
	 and	to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss') 
	 and		coalesce(nr_minuto_intervalo,0) > 0 
	 and (ie_feriado_w <> 'S') 
	 and	((obter_executor_agenda_exame(a.nr_seq_medico_exec) = cd_medico_p) or (coalesce(cd_medico_p::text, '') = '') ) 
 	 and	((obter_se_contido((SELECT obter_executor_agenda_exame(a.nr_seq_medico_exec) ),(select obter_medicos_ag_global(cd_agenda_p,nr_seq_proc_interno_p)  )) = 'S') or (obter_medicos_ag_global(cd_agenda_p,nr_seq_proc_interno_p) = '0') or (coalesce(a.nr_seq_medico_exec::text, '') = '')) 
	and	((Obter_Semana_Dia_Agecons(dt_agenda_p,dt_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0)) 
	
union
 
	select 	'E' ie_horario, 
		nr_sequencia, 
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
			to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
			to_char(hr_final,'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
			to_char(coalesce(hr_Inicial_Intervalo,hr_final),'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
		to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
		 	to_char(coalesce(hr_final_Intervalo,hr_final),'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
			--nr_minuto_intervalo, 
		CASE WHEN ie_utilizar_hor_turno_w='S' THEN nr_minuto_intervalo  ELSE CASE WHEN coalesce(obter_tempo_duracao_proced(cd_agenda_p, coalesce(cd_medico_p,obter_executor_agenda_exame(a.nr_seq_medico_exec)), cd_procedimento_p, ie_origem_proced_p,null, nr_seq_proc_interno_p,null,null,null,null,null,ie_dia_semana_w),0)=0 THEN  nr_minuto_intervalo  ELSE obter_tempo_duracao_proced(cd_agenda_p, coalesce(cd_medico_p,obter_executor_agenda_exame(a.nr_seq_medico_exec)), cd_procedimento_p, ie_origem_proced_p, null, nr_seq_proc_interno_p,null,null,null,null,null,ie_dia_semana_w) END  END , 
		a.cd_medico, a.nr_seq_medico_exec, 
		a.ds_observacao, 
		a.nr_seq_sala, 
		a.NR_SEQ_CLASSIF_AGENDA 
	from 	agenda_Horario_esp a 
	where 	dt_agenda	= trunc(dt_agenda_p,'dd') 
	 and	to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss') 
	 and	coalesce(nr_minuto_intervalo,0) > 0 
	 and  cd_agenda	= cd_agenda_p 
	 and	((obter_executor_agenda_exame(a.nr_seq_medico_exec) = cd_medico_p) or (coalesce(cd_medico_p::text, '') = '')) 
	 and	((obter_se_contido((select obter_executor_agenda_exame(a.nr_seq_medico_exec) ),(select obter_medicos_ag_global(cd_agenda_p,nr_seq_proc_interno_p)  )) = 'S') or (obter_medicos_ag_global(cd_agenda_p,nr_seq_proc_interno_p) = '0') or (coalesce(a.nr_seq_medico_exec::text, '') = '')) 
	order by 1,2,5;

/*CURSOR C02 IS 
	select	hr_inicio, 
		(hr_inicio + (nr_minuto_duracao / 1440)) dt_final 
	from 	agenda_paciente 
	where 	cd_agenda	= cd_agenda_p 
    and	hr_inicio between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) 
	and	hr_inicio >= sysdate 
	and	ie_sobra_horario_w	= 'S' 
	order by 1;*/
 
	 
/* obter dados sobra horário */
 
c02 CURSOR FOR 
SELECT	to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'), 
	to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'), 
	nr_minuto_intervalo, 
	cd_procedencia, 
	'1' ie_origem_dados, 
	nr_seq_medico_exec 
from 	agenda_horario 
where 	cd_agenda = cd_agenda_p 
and	to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss') 
and	((coalesce(dt_inicio_vigencia::text, '') = '') or (dt_inicio_vigencia <= trunc(dt_agenda_p))) 
and	((coalesce(dt_final_vigencia::text, '') = '') or (dt_final_vigencia >= trunc(dt_agenda_p))) 
and	nr_minuto_intervalo > 0 
and	((dt_dia_semana = ie_dia_semana_w) or (dt_dia_semana = 9)) 
and	((ie_feriado_w <> 'S') or (obter_se_agenda_feriado(cd_agenda_p) = 'S')) 
and	((nr_seq_especial_w = 0) or (ie_horario_adicional_w = 'S')) 
and	obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_agenda_p) = 'S' 

union
 
SELECT	to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'), 
	to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'), 
	nr_minuto_intervalo, 
	null, 
	'2' ie_origem_dados, 
	nr_seq_medico_exec 
from 	agenda_horario_esp 
where 	cd_agenda = cd_agenda_p 
and	to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss') 
and	nr_minuto_intervalo > 0 
and	dt_agenda between trunc(dt_agenda_p) and trunc(dt_agenda_p) + 86399/86400 
order by 
	1,2;

	 
/* obter sobra horário */
 
c03 CURSOR FOR 
SELECT	/*+index(b AGEPACI_UK)*/ 
	b.hr_inicio hr_inicial, 
	b.hr_inicio + b.nr_minuto_duracao / 1440 hr_final, 
	((b.hr_inicio + b.nr_minuto_duracao / 1440) - b.hr_inicio) * 1440 nr_minuto_horario 
from	agenda a, 
	agenda_paciente b, 
	agenda_horario c 
where	a.cd_agenda = b.cd_agenda 
and	a.cd_agenda = c.cd_agenda 
and	b.cd_agenda = cd_agenda_p 
and	b.dt_agenda between trunc(dt_agenda_p) and trunc(dt_agenda_p) + 86399/86400 
and	a.ie_gerar_sobra_horario = 'S' 
and	b.ie_status_agenda not in ('C','LF') 
and	((obter_se_contido((SELECT obter_executor_agenda_exame(c.nr_seq_medico_exec) ),(select obter_medicos_ag_global(cd_agenda_p,nr_seq_proc_interno_p)  )) = 'S') or (obter_medicos_ag_global(cd_agenda_p,nr_seq_proc_interno_p) = '0') or (coalesce(c.nr_seq_medico_exec::text, '') = '')) 
order by 
	1,2;	
	 
c05 CURSOR FOR 
	SELECT	a.dt_agenda, 
		a.nr_minuto_duracao, 
		a.cd_agenda 
	from	agenda_livre_forcado a 
	where	a.cd_agenda	= cd_agenda_p 
	and	a.dt_agenda	between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) 
	and	a.dt_agenda > trunc(clock_timestamp() - interval '1 days', 'dd') 
	and	not exists (SELECT	1 
		from	agenda_paciente x 
		where	x.cd_agenda		= a.cd_agenda 
		and	x.hr_inicio		= a.dt_agenda 
		and	x.ie_status_agenda	in ('LF', 'N', 'E')) 
	group by a.dt_agenda, 
		 a.nr_minuto_duracao, 
		 a.cd_agenda;

BEGIN
 
select	coalesce(max(ie_gerar_hor_bloq),'N') 
into STRICT	ie_gerar_hor_bloq_w 
from	agenda 
where	cd_agenda	= cd_agenda_p;
 
select	coalesce(max(obter_valor_param_usuario(39, 60, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N') 
into STRICT	ie_excluir_livres_w
;
 
select	coalesce(max(obter_valor_param_usuario(39, 79, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N') 
into STRICT	ie_gerar_forcado_w
;
 
 
select	coalesce(max(obter_valor_param_usuario(-1007, 24, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N') 
into STRICT	ie_utilizar_hor_turno_w
;
 
select	coalesce(max(ie_gerar_sobra_horario), 'N'), 
	coalesce(max(HR_QUEBRA_TURNO), '12'), 
	coalesce(max(qt_min_quebra_turno), '00'), 
	coalesce(max(ie_anestesista), 'N'), 
	coalesce(max(ie_tipo_atendimento), 0) 
into STRICT	ie_sobra_horario_w, 
	HR_QUEBRA_TURNO_W,	 
	qt_min_QUEBRA_TURNO_W, 
	ie_anestesista_w, 
	ie_tipo_atendimento_w 
from	agenda 
where	cd_agenda	= cd_agenda_p;
 
 
if (coalesce(hr_inicial_p::text, '') = '') then 
	hr_inicial_par_w		:= trunc(dt_agenda_p,'dd');
else 
	hr_inicial_par_w		:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
					hr_inicial_p,'dd/mm/yyyy hh24:mi');
end if;
if (coalesce(hr_final_p::text, '') = '') then 
	hr_final_par_w			:= trunc(dt_agenda_p,'dd') + 86399/86400;
else 
	hr_final_par_w			:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
					hr_final_p,'dd/mm/yyyy hh24:mi');
end if;
dt_agenda_w				:= trunc(dt_agenda_p,'dd');
begin 
select 'S' 
into STRICT	ie_feriado_w 
from feriado a, agenda b 
where a.cd_estabelecimento 	= cd_estabelecimento_p 
 and a.dt_feriado		= dt_agenda_w 
 and b.cd_agenda			= cd_agenda_p 
 and ie_feriado			= 'N';
exception 
	when others then 
		ie_feriado_w := 'N';
end;
 
/* obter dados horário especial (se existir) */
 
select	coalesce(max(nr_sequencia),0), 
	coalesce(max(ie_horario_adicional),'N') 
into STRICT	nr_seq_especial_w, 
	ie_horario_adicional_w 
from	agenda_horario_esp 
where	cd_agenda = cd_agenda_p 
and	dt_agenda between trunc(dt_agenda_p) and trunc(dt_agenda_p) + 86399/86400;
 
select	coalesce(max(Obter_Valor_Param_Usuario(39, 56, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N') 
into STRICT	ie_gerar_obs_horario_w
;
 
 
select	coalesce(max(Obter_Valor_Param_Usuario(39, 112, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'S') 
into STRICT	ie_gerar_autorizacao_livres_w
;
 
select	coalesce(max(Obter_Valor_Param_Usuario(820, 114, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'L') 
into STRICT	ie_autorizacao_w
;
 
select	obter_cod_dia_semana(dt_agenda_p) 
into STRICT	ie_dia_semana_w
;
 
 
if (ie_excluir_livres_w = 'N') or (hr_inicial_p IS NOT NULL AND hr_inicial_p::text <> '') then 
	begin 
	 
	delete /*+ INDEX(A AGEPACI_UK) */ 
	from agenda_paciente a 
	where cd_agenda 	= cd_agenda_p 
	 and	dt_agenda 	= trunc(dt_agenda_p,'dd') 
	 and ie_status_agenda		= 'L';
 
	end;
else 
	begin 
	 
	delete /*+ INDEX(A AGEPACI_UK) */ 
	from agenda_paciente a 
	where 	cd_agenda 	= cd_agenda_p 
	and 	dt_agenda 	>= clock_timestamp() 
	and 	ie_status_agenda	= 'L';
 
	end;
end if;
 
 
OPEN C01;
LOOP 
FETCH C01 into 
	ie_tipo_horario_w, 
	nr_seq_horario_w, 
	hr_inicial_w, 
	hr_final_w, 
	hr_inicial_Intervalo_w, 
	hr_final_Intervalo_w, 
	nr_minuto_Intervalo_w, 
	cd_medico_w, 
	nr_seq_agenda_medico_w, 
	ds_observacao_horario_w, 
	nr_seq_sala_w, 
	NR_SEQ_CLASSIF_AGENDA_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
   	begin 
		 
		 
	if (NR_SEQ_CLASSIF_AGENDA_w = 0) then 
		NR_SEQ_CLASSIF_AGENDA_w := null;
	end if;
	hr_atual_w			:= hr_inicial_w;	
	 
	while(hr_atual_w	< hr_final_w) and 
		((hr_atual_W + (nr_minuto_intervalo_w / 1440)) 	<= hr_final_w) and (hr_atual_w	< hr_final_par_w) loop 
		BEGIN 
				 
		/* consistir horário gerado e já utilizado */
 
		select	/*+index(a AGEPACI_UK)*/ 
			CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END  
		into STRICT	ie_horario_w 
		from	agenda_paciente a 
		where	a.cd_agenda = cd_agenda_p 
		and	a.dt_agenda = trunc(dt_agenda_p,'dd') 
		and	a.hr_inicio = hr_atual_w 
		and	a.ie_status_agenda not in ('C','LF');
		 
		/* consistir horário gerado e já utilizado x minutos duracao alterado */
 
		if (ie_horario_w = 'S') then 
			select	/*+index(a AGEPACI_UK)*/ 
				CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END  
			into STRICT	ie_horario_w 
			from	agenda_paciente a 
			where	a.cd_agenda = cd_agenda_p 
			--and	a.dt_agenda = trunc(dt_agenda_p,'dd') 
			and	a.hr_inicio < hr_atual_w 
			and	a.hr_inicio + a.nr_minuto_duracao / 1440 > hr_atual_w 
			and	a.dt_agenda = trunc(hr_atual_w, 'dd') 
			and	a.ie_status_agenda not in ('C','LF');
			 
		elsif (ie_tipo_horario_w = 'E') then	 
			CALL gerar_horario_esp_agenda(cd_agenda_p, dt_agenda_p, hr_atual_w, nr_seq_horario_w,nm_usuario_p, cd_estabelecimento_p);
		end if;
		 
		begin		 
		select	/*+ INDEX(A AGEPACI_UK) */ 
			coalesce(max(nr_minuto_duracao),0) 
		into STRICT	qt_min_duracao_w			 
		from 	agenda_Paciente a 
		where 	cd_agenda			= cd_agenda_p 
		 and 	ie_status_agenda		<> 'C' 
		 and	dt_agenda			= trunc(hr_atual_w,'dd') 
		 and 	to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
			to_char(hr_inicio,'hh24:mi'),'dd/mm/yyyy hh24:mi') < 
			(hr_atual_w + (nr_minuto_intervalo_w / 1440)) 
	 	 and 	to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || 
			to_char(hr_inicio + ((nr_minuto_duracao -1) / 1440),'hh24:mi'), 
				'dd/mm/yyyy hh24:mi') >	hr_atual_w;
		exception 
			when others then	 
				qt_min_duracao_w		:= 0;
		end;
		 
		/* consistir bloqueio */
 
		ie_bloqueio_agenda_w := consistir_bloqueio_agenda(cd_agenda_p, hr_atual_w, ie_dia_semana_w, ie_bloqueio_agenda_w);		
		 
		 
		if (qt_min_duracao_w = 0) and (hr_atual_w >= clock_timestamp()) and (hr_atual_w >= hr_inicial_par_w) and 
			((ie_bloqueio_agenda_w = 'N') or (ie_gerar_hor_bloq_w = 'S')) then 
			begin 
			if (coalesce(length(ds_horarios_w),0) < 249) then 
				ds_horarios_w	:= ds_horarios_w || virgula_w || 
						to_char(hr_atual_w,'hh24:mi');
			end if;
			virgula_w		:= ',';
			if (ie_grava_livre_p = 'S') then 
				begin 
				cd_turno_w		:= 0;
			 
				if ((to_char(hr_atual_w,'hh24'))::numeric  > somente_numero(HR_QUEBRA_TURNO_W)) or 
					(((to_char(hr_atual_w,'hh24'))::numeric  = somente_numero(HR_QUEBRA_TURNO_W)) and ((to_char(hr_atual_w,'mi'))::numeric  >= somente_numero(qt_min_QUEBRA_TURNO_W))) then 
					cd_turno_w	:= 1;
				end if;
				select nextval('agenda_paciente_seq') 
				into STRICT nr_sequencia_w 
				;
 
				select	max(cd_medico) 
				into STRICT	cd_medico_exec_w 
				from	agenda_medico 
				where	nr_sequencia	= nr_seq_agenda_medico_w;
			 
				select	count(*) 
				into STRICT	qt_agenda_w 
				from	agenda_paciente 
				where	cd_agenda		= cd_agenda_p 
				and	dt_agenda		= trunc(dt_agenda_p,'dd') 
				and	hr_atual_w		between hr_inicio and hr_inicio + ((nr_minuto_duracao-1) / 1440) 
				and	ie_status_agenda not in ('L','C','B');
			 
 
				if (qt_agenda_w = 0) then 
					begin 
 
					insert into agenda_paciente(cd_agenda, dt_agenda, hr_inicio, 
						nr_minuto_duracao,nm_usuario, dt_atualizacao, 
						ie_status_agenda,ie_ortese_protese, ie_cdi, 
						ie_uti,ie_banco_sangue,	ie_serv_especial, 
						ie_leito, ie_anestesia, nr_sequencia, cd_turno, 
						ie_equipamento, ie_autorizacao, ie_video, ie_uc, 
						cd_medico, cd_medico_exec, nm_paciente, ie_biopsia, ie_congelacao, nr_seq_sala, 
						IE_CONSULTA_ANESTESICA, IE_PRE_INTERNACAO, ie_tipo_atendimento, ie_arco_c, NR_SEQ_CLASSIF_AGENDA, 
						ds_observacao, nr_seq_esp, nr_seq_horario) 
					values ( 
						cd_agenda_p, trunc(dt_agenda_p,'dd'), hr_atual_w, 
						nr_minuto_Intervalo_w, nm_usuario_p, clock_timestamp(), 
						CASE WHEN ie_bloqueio_agenda_w='S' THEN  'B'  ELSE 'L' END , 'N', 'N', 'N', 'N', 'N', 'S', ie_anestesista_w, 
						nr_sequencia_w, cd_turno_w, 'N', CASE WHEN ie_gerar_autorizacao_livres_w='S' THEN  ie_autorizacao_w  ELSE null END , 'N', 'N', cd_medico_w, cd_medico_exec_w, substr(CASE WHEN ie_gerar_obs_horario_w='S' THEN  ds_observacao_horario_w  ELSE null END ,1,60), 
						'N', 'N', nr_seq_sala_w, 'N', 'N', CASE WHEN ie_tipo_atendimento_w=0 THEN  null  ELSE ie_tipo_atendimento_w END ,'N', 
						NR_SEQ_CLASSIF_AGENDA_w, 
						substr(ds_observacao_horario_w,1,60), CASE WHEN ie_tipo_horario_w='E' THEN nr_seq_horario_w  ELSE null END , CASE WHEN ie_tipo_horario_w='E' THEN null  ELSE nr_seq_horario_w END );
					end;
				end if;
				end;
				end if;			
			end;
		end if;
		hr_atual_w		:= hr_atual_w + (nr_minuto_intervalo_w / 1440);
		qt_horario_w 	:= qt_horario_w + 1;
		if (hr_atual_w >= hr_inicial_intervalo_w) and (hr_atual_w < hr_final_intervalo_w) then 
			hr_atual_w	:= hr_final_intervalo_w;
		end if;
		if (qt_horario_w > 201 ) then 
			hr_atual_w	:= hr_final_w + 1;
		end if;
		END;
	END LOOP;
	end;
END LOOP;
CLOSE C01;
 
hr_nada_w	:= trunc(dt_agenda_p,'year');
hr_fim_w	:= hr_nada_w;
qt_min_minimo_w	:= 0;
 
 
/* gerar dados sobra horário */
 
open c02;
loop 
fetch c02 into	hr_inicial_dia_w, 
			hr_final_dia_w, 
			nr_minuto_duracao_w, 
			cd_procedencia_w, 
			ie_origem_dados_w, 
			nr_seq_agenda_medico_w;
EXIT WHEN NOT FOUND; /* apply on c02 */
	begin 
	/* gerar sobra horário */
 
	open c03;
	loop 
	fetch c03 into	hr_horario_inicial_w, 
			hr_horario_final_w, 
			nr_minuto_horario_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin 
		if (nr_minuto_horario_w = nr_minuto_duracao_w) and (hr_horario_ant_sobra_w IS NOT NULL AND hr_horario_ant_sobra_w::text <> '') and 
			((hr_horario_ant_sobra_w + nr_minuto_duracao_w / 1440) < hr_horario_final_w) then 
			hr_horario_final_w	:= hr_horario_final_w - ((hr_horario_final_w - hr_horario_ant_sobra_w) * 1440 / 1440);
			nr_minuto_horario_w	:= (hr_horario_final_w - hr_horario_ant_sobra_w) * 1440;
		end if;
 
		hr_horario_ant_sobra_w	:= hr_horario_final_w;
		 
		if (nr_minuto_horario_w <> nr_minuto_duracao_w) and 
			((ie_origem_dados_w = '1' AND hr_inicial_dia_w <= hr_horario_final_w) or (ie_origem_dados_w <> '1')) then 
			hr_horario_sobra_w := hr_horario_final_w;
			if (nr_minuto_horario_w < nr_minuto_duracao_w) then 
				nr_minuto_sobra_w := nr_minuto_duracao_w - nr_minuto_horario_w;
			else 
				select	trunc(dividir(nr_minuto_horario_w, nr_minuto_duracao_w)) 
				into STRICT	qt_horario_sobra_w 
				;
 
				select (qt_horario_sobra_w * nr_minuto_duracao_w) - (nr_minuto_horario_w - nr_minuto_duracao_w) 
				into STRICT	nr_minuto_sobra_w 
				;
			end if;
			 
			if	(((hr_horario_sobra_w < hr_inicial_intervalo_w) or (hr_horario_sobra_w >= hr_final_intervalo_w)) or 
				((coalesce(hr_inicial_intervalo_w::text, '') = '') and (coalesce(hr_final_intervalo_w::text, '') = ''))) and (hr_horario_sobra_w > clock_timestamp()) and 
				((hr_horario_sobra_w < hr_final_dia_w) or (hr_horario_sobra_w + nr_minuto_sobra_w / 1400 <= hr_final_dia_w + nr_minuto_duracao_w / 1440)) then 
				 
				/* consistir horário gerado e já utilizado */
 
				select	/*+index(a AGEPACI_UK)*/ 
					CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END  
				into STRICT	ie_horario_w 
				from	agenda_paciente a 
				where	a.cd_agenda = cd_agenda_p 
				and	a.dt_agenda = trunc(dt_agenda_p,'dd') 
				and	a.hr_inicio = hr_horario_sobra_w 
				and	a.ie_status_agenda not in ('C','LF');
 
				/* consistir horário gerado e já utilizado x minutos duracao alterado */
 
				if (ie_horario_w = 'S') then 
					select	/*+index(a AGEPACI_UK)*/ 
						CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END  
					into STRICT	ie_horario_w 
					from	agenda_paciente a 
					where	a.cd_agenda = cd_agenda_p 
					--and	a.dt_agenda = trunc(dt_agenda_p,'dd') 
					and	a.hr_inicio < hr_horario_sobra_w 
					and	a.hr_inicio + a.nr_minuto_duracao / 1440 > hr_horario_sobra_w 
					and	a.dt_agenda = trunc(hr_horario_sobra_w, 'dd') 
					and	a.ie_status_agenda not in ('C','LF');
			 
				end if;
				/* consistir bloqueio */
 
				ie_bloqueio_w := consistir_bloqueio_agenda(cd_agenda_p, hr_horario_sobra_w, ie_dia_semana_w, ie_bloqueio_w);
 
				if (ie_horario_w = 'S') and 
					((ie_bloqueio_w = 'N') or (ie_gerar_hor_bloq_w = 'S')) then 
					/* obter sequencia */
 
					select	nextval('agenda_paciente_seq') 
					into STRICT	nr_seq_agenda_w 
					;
 
					/* obter turno horário */
 
					select	obter_turno_horario_agenda(cd_agenda_p, to_char(hr_horario_sobra_w,'hh24:mi:ss')) 
					into STRICT	cd_turno_w 
					;
					 
					/* inserir registros */
 
					insert into agenda_paciente( 
									nr_sequencia, 
									cd_agenda, 
									nm_usuario, 
									dt_atualizacao, 
									dt_agenda, 
									hr_inicio, 
									nr_minuto_duracao, 
									ie_status_agenda, 
									ie_equipamento, 
									cd_turno, 
									ie_anestesia, 
									cd_medico_exec, 
									cd_medico, 
									nr_seq_classif_agenda, 
									nr_seq_sala, 
									cd_procedencia 
									) 
								values ( 
									nr_seq_agenda_w, 
									cd_agenda_p, 
									nm_usuario_p, 
									clock_timestamp(), 
									dt_agenda_p, 
									hr_horario_sobra_w, 
									nr_minuto_sobra_w, 
									CASE WHEN ie_bloqueio_w='S' THEN  'B'  ELSE 'L' END , 
									'N', 
									cd_turno_w, 
									'N', 
									obter_executor_agenda_exame(nr_seq_agenda_medico_w), 
									cd_medico_w, 
									nr_seq_classif_agenda_w, 
									nr_seq_sala_w, 
									cd_procedencia_w 
									);
				end if;
			end if;
		end if;
		end;
	end loop;
	close c03;
	end;
end loop;
close c02;
 
/*OPEN C02; 
LOOP 
FETCH C02 into 
	hr_inicial_w, 
	hr_final_w; 
exit 	when c02%notfound; 
	if	(hr_fim_w <> hr_nada_w) and 
		(hr_inicial_w > hr_fim_w) then 
		BEGIN 
 
		nr_minuto_intervalo_w	:= (hr_inicial_w - hr_fim_w) * 1440; 
		hr_atual_w		:= hr_fim_w; 
		if	(nr_minuto_intervalo_w >= qt_min_minimo_w) then 
			begin 
			select	count(*) 
			into	qt_turno_w			 
			from 	agenda_horario 
			where 	cd_agenda   	= cd_agenda_p 
	 		 and 	dt_dia_semana	= ie_dia_Semana_w 
			 and	hr_atual_w	between 
						to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
						to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi') 
						and 
						to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
						to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi'); 
 
			select	count(*) 
			into	qt_intervalo_w			 
			from 	agenda_horario 
			where 	cd_agenda   	= cd_agenda_p 
	 		 and 	dt_dia_semana	= ie_dia_Semana_w 
			 and  to_char(hr_inicial_intervalo,'hh24') <> '00' 
			 and	hr_atual_w	between 
						to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
						to_char(hr_inicial_intervalo,'hh24:mi'),'dd/mm/yyyy hh24:mi') 
						and 
						to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
						to_char(hr_final_intervalo - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi'); 
 
 
			if	(qt_turno_w	= 0) then 
				begin 
 
				select	count(*) 
				into	qt_turno_w			 
				from 	agenda_horario 
				where 	cd_agenda   	= cd_agenda_p 
		 		 and 	dt_dia_semana	= 9 
				 and	hr_atual_w	between 
							to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
							to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi') 
							and 
							to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
							to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi'); 
 
				select	count(*) 
				into	qt_intervalo_w			 
				from 	agenda_horario 
				where 	cd_agenda   	= cd_agenda_p 
		 		 and 	dt_dia_semana	= 9 
				 and  to_char(hr_inicial_intervalo,'hh24') <> '00' 
				 and	hr_atual_w	between 
							to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
							to_char(hr_inicial_intervalo,'hh24:mi'),'dd/mm/yyyy hh24:mi') 
							and 
							to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
							to_char(hr_final_intervalo - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi'); 
 
 
				end; 
			end if; 
 
			begin 
			 
			select 'S' 
			into	ie_bloqueio_dia_w 
			from	agenda_bloqueio 
			where	cd_agenda	= cd_agenda_p 
			and	trunc(hr_atual_w) between dt_inicial and dt_final 
			and	((ie_dia_semana = ie_dia_semana_w) or (ie_dia_semana = 9)) 
			and	ie_dia_semana is not null 
			and	HR_INICIO_BLOQUEIO is null 
			and	HR_FINAL_BLOQUEIO is null; 
			exception 
				when others then 
					ie_bloqueio_dia_w := 'N'; 
			end; 
 
 
 
			begin 
			 
			select 'S' 
			into	ie_bloqueio_dia_hora_w 
			from	agenda_bloqueio 
			where	cd_agenda	= cd_agenda_p 
			and	trunc(hr_atual_w) between dt_inicial and dt_final 
			and	hr_atual_w between to_date(to_char(hr_atual_w,'dd/mm/yyyy') ||' '|| to_char(hr_inicio_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') and to_date(to_char(hr_atual_w,'dd/mm/yyyy') ||' '|| to_char(hr_final_bloqueio,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') 
			and	ie_dia_semana is not null 
			and	((ie_dia_semana = ie_dia_semana_w) or (ie_dia_semana = 9)) 
			and	HR_INICIO_BLOQUEIO is not null 
			and	HR_FINAL_BLOQUEIO is not null 
			and	hr_inicio_bloqueio < hr_final_bloqueio; 
			exception 
				when others then 
					ie_bloqueio_dia_hora_w := 'N'; 
			end; 
 
 
			if	(ie_bloqueio_dia_w = 'N') and 
				(ie_bloqueio_dia_hora_w = 'N') and 
				(qt_turno_w > 0) and 
				(qt_intervalo_w = 0) then 
				begin 
				cd_turno_w		:= 0; 
 
				if	(To_Number(to_char(hr_atual_w,'hh24')) > somente_numero(HR_QUEBRA_TURNO_W)) or 
					((To_Number(to_char(hr_atual_w,'hh24')) = somente_numero(HR_QUEBRA_TURNO_W)) and 
					(To_Number(to_char(hr_atual_w,'mi')) >= somente_numero(qt_min_QUEBRA_TURNO_W))) then 
					cd_turno_w	:= 1; 
				end if; 
 
				select 	agenda_paciente_seq.nextval 
				into 	nr_sequencia_w 
				from 	dual; 
 
 
				insert into agenda_paciente 
					(cd_agenda, dt_agenda, hr_inicio, 
					nr_minuto_duracao,nm_usuario, dt_atualizacao, 
					ie_status_agenda,	ie_ortese_protese, ie_cdi, 
					ie_uti,ie_banco_sangue,	ie_serv_especial, 
					ie_leito, ie_anestesia, nr_sequencia, cd_turno, 
					ie_equipamento, ie_autorizacao, ie_video, ie_uc, cd_medico, cd_medico_exec, 
					nm_paciente, ie_biopsia, ie_congelacao, IE_CONSULTA_ANESTESICA,     
					IE_PRE_INTERNACAO, ie_tipo_atendimento, ie_arco_c,NR_SEQ_CLASSIF_AGENDA, 
					ds_observacao) 
				values( 
					cd_agenda_p, trunc(dt_agenda_p,'dd'), hr_atual_w, 
					nr_minuto_Intervalo_w, nm_usuario_p, sysdate, 
					'L', 'N', 'N', 'N', 'N', 'N', 'S', ie_anestesista_w, 
					nr_sequencia_w, cd_turno_w, 'N', decode(ie_gerar_autorizacao_livres_w, 'S', ie_autorizacao_w, null), 
'N', 'N', cd_medico_w, cd_medico_exec_w, 	substr(decode(ie_gerar_obs_horario_w, 'S', ds_observacao_horario_w, null),1,60), 'N', 'N', 'N', 'N', 
decode(ie_tipo_atendimento_w, 0, null, ie_tipo_atendimento_w), 'N',NR_SEQ_CLASSIF_AGENDA_w, 
					substr(ds_observacao_horario_w,1,60)); 
 
				end; 
			end if; 
			end; 
		end if; 
		END; 
	end if; 
	if	(hr_final_w > hr_fim_w) then 
		hr_fim_w	:= hr_final_w; 
	end if; 
END LOOP; 
CLOSE C02; 
*/
 
 
if (ie_gerar_forcado_w = 'S') then 
	begin 
	 
	open	c05;
	loop 
	fetch	c05 into 
		dt_forcado_w, 
		nr_min_forcado_w, 
		cd_agenda_forcado_w;
	EXIT WHEN NOT FOUND; /* apply on c05 */
		begin 
 
		select	count(*) 
		into STRICT	qt_horario_w 
		from	agenda_paciente 
		where	cd_agenda		= cd_agenda_forcado_w 
		and	dt_agenda		= trunc(dt_forcado_w, 'dd') 
		and	hr_inicio		= dt_forcado_w 
		and	ie_status_agenda	in ('LF', 'N', 'E');
 
	 
		if (qt_horario_w = 0) then 
			begin 
 
			select	nextval('agenda_paciente_seq') 
			into STRICT	nr_sequencia_w 
			;
 
			insert	into agenda_paciente(cd_agenda, 
				dt_agenda, 
				hr_inicio, 
				nr_minuto_duracao, 
				nm_usuario, 
				dt_atualizacao, 
				nr_sequencia, 
				ie_equipamento, 
				ie_status_agenda, 
				nm_paciente, 
				IE_CONSULTA_ANESTESICA,IE_PRE_INTERNACAO, ie_tipo_atendimento, 
				NR_SEQ_CLASSIF_AGENDA) 
			values (cd_agenda_forcado_w, 
				trunc(dt_forcado_w, 'dd'), 
				dt_forcado_w, 
				nr_min_forcado_w, 
				nm_usuario_p, 
				clock_timestamp(), 
				nr_sequencia_w, 
				'N', 'LF', null, 'N', 'N', CASE WHEN ie_tipo_atendimento_w=0 THEN  null  ELSE ie_tipo_atendimento_w END , 
				NR_SEQ_CLASSIF_AGENDA_w);
			delete	from agenda_livre_forcado 
			where	dt_agenda	= dt_forcado_w 
			and	cd_agenda	= cd_agenda_forcado_w;
			end;
		end if;
 
		end;
	end loop;
	close c05;
	end;
end if;
 
 
ds_horarios_p	:= ds_horarios_w;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_horario_agenda_global ( cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, dt_final_p timestamp, qt_minutos_p bigint, hr_inicial_p text, hr_final_p text, ds_restricao_p text, nm_usuario_p text, ie_grava_Livre_p text, cd_medico_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, ds_horarios_p INOUT text) FROM PUBLIC;

