-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_imp_grupo_estoque_unimed ( cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_produto_w		varchar(100);
ds_linha_w		varchar(4000);
qt_registros_w		integer;
ds_valor_w		varchar(2000);
contador_w  		integer := 0;

/* =================== CAMPOS ================== */

cd_classificacao_w	varchar(30);
cd_final_w		bigint;
cd_grupo_estoque_w	integer;
cd_inicial_w		bigint;
cd_pai_w		integer;
ds_grupo_estoque_w	varchar(255);
ie_grau_w		varchar(3);
ie_tipo_w		varchar(2);
nr_nivel_w		integer;
ie_layout_simples_w	varchar(2) := 'N';

C01 CURSOR FOR
	SELECT	ds_conteudo
	from	w_import_mat_unimed
	where	elimina_acentuacao(substr(ds_conteudo,1,67)) <>  elimina_acentuacao('Chave;Estrutura;Pai;Nível;Grau;Nome;Tipo;CódigoInicial;CódigoFinal')
	order by
		nr_sequencia;


BEGIN

--Validação de arquivo selecionado para a Importação
select	count(*)
into STRICT	ie_produto_w
from	w_import_mat_unimed
where	elimina_acentuacao(substr(ds_conteudo,1,67)) =  elimina_acentuacao('Chave;Estrutura;Pai;Nível;Grau;Nome;Tipo;CódigoInicial;CódigoFinal')  LIMIT 1;

if (ie_produto_w = 0) then
	select	count(*)
	into STRICT	ie_produto_w
	from	w_import_mat_unimed
	where	elimina_acentuacao(substr(ds_conteudo,1,2)) =  elimina_acentuacao('0;')  LIMIT 1;

	if (ie_produto_w > 0) then
		ie_layout_simples_w := 'S';
	end if;
end if;

if (ie_produto_w	= 0 ) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(265255,'');
	--Mensagem: Este arquivo não possui cadastros válidos de Grupo de Estoque. Verifique o arquivo.
else
	if (ie_layout_simples_w = 'N') then
		open C01;
		loop
		fetch C01 into
			ds_linha_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			contador_w	:= 0;
			while(ds_linha_w IS NOT NULL AND ds_linha_w::text <> '') and (contador_w < 255) loop
				begin

				if (position(';' in ds_linha_w) = 0) then
					ds_valor_w	:= ds_linha_w;
					ds_linha_w	:= null;
				else
					ds_valor_w	:= substr(ds_linha_w,1,position(';' in ds_linha_w) - 1);
					ds_linha_w	:= substr(ds_linha_w,position(';' in ds_linha_w) + 1,length(ds_linha_w));
				end if;


				if (contador_w = 0) then
				cd_grupo_estoque_w	:= ltrim(ds_valor_w);
				end if;
				if (contador_w = 1) then
				cd_classificacao_w	:= ltrim(ds_valor_w);
				end if;
				if (contador_w = 2) then
				cd_pai_w		:= ltrim(ds_valor_w);
				end if;
				if (contador_w = 3) then
				nr_nivel_w		:= ltrim(ds_valor_w);
				end if;
				if (contador_w = 4) then
				ie_grau_w		:= ltrim(ds_valor_w);
				end if;
				if (contador_w = 5) then
				ds_grupo_estoque_w	:= ltrim(ds_valor_w);
				end if;
				if (contador_w = 6) then
				ie_tipo_w		:= ltrim(ds_valor_w);
				end if;
				if (contador_w = 7) then
				cd_inicial_w		:= ltrim(ds_valor_w);
				end if;
				if (contador_w = 8) then
				cd_final_w		:= ltrim(ds_valor_w);
				end if;

				contador_w := contador_w + 1;

				end;
			end loop;

			-- Verifica se já existe o registro
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_grupo_est_fed_sc
			where	cd_grupo_estoque	= cd_grupo_estoque_w;

			--Se não existir, faz Insert
			if (qt_registros_w	= 0) then

				insert into pls_grupo_est_fed_sc(nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					cd_estabelecimento,
					cd_classificacao,
					cd_final,
					cd_grupo_estoque,
					cd_inicial,
					cd_pai,
					ds_grupo_estoque,
					ie_grau,
					ie_tipo,
					nr_nivel)
				values (nextval('pls_grupo_est_fed_sc_seq'),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					cd_estabelecimento_p,
					cd_classificacao_w,
					cd_final_w,
					cd_grupo_estoque_w,
					cd_inicial_w,
					cd_pai_w,
					ds_grupo_estoque_w,
					ie_grau_w,
					ie_tipo_w,
					nr_nivel_w);
			--Se existir, faz Update
			else

				update	pls_grupo_est_fed_sc
				set	nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					ds_grupo_estoque	= ds_grupo_estoque_w
				where	cd_grupo_estoque	= cd_grupo_estoque_w;

			end if;
			end;
		end loop;
		close C01;

	elsif (ie_layout_simples_w = 'S') then
		open C01;
		loop
		fetch C01 into
			ds_linha_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			cd_classificacao_w	:= null;
			cd_final_w		:= null;
			cd_grupo_estoque_w	:= null;
			cd_inicial_w		:= null;
			cd_pai_w		:= null;
			ds_grupo_estoque_w	:= null;
			ie_grau_w		:= null;
			ie_tipo_w		:= null;
			nr_nivel_w		:= null;
			contador_w		:= 0;

			while(ds_linha_w IS NOT NULL AND ds_linha_w::text <> '') and (contador_w < 255) loop
				begin

				if (position(';' in ds_linha_w) = 0) then
					ds_valor_w	:= ds_linha_w;
					ds_linha_w	:= null;
				else
					ds_valor_w	:= substr(ds_linha_w,1,position(';' in ds_linha_w) - 1);
					ds_linha_w	:= substr(ds_linha_w,position(';' in ds_linha_w) + 1,length(ds_linha_w));
				end if;


				if (contador_w = 0) then
					cd_grupo_estoque_w	:= ltrim(ds_valor_w);

				elsif (contador_w = 1) then
					ds_grupo_estoque_w	:= ltrim(ds_valor_w);
				end if;

				contador_w := contador_w + 1;

				end;
			end loop;

			-- Verifica se já existe o registro
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_grupo_est_fed_sc
			where	cd_grupo_estoque	= cd_grupo_estoque_w;

			--Se não existir, faz Insert
			if (qt_registros_w	= 0) then

				insert into pls_grupo_est_fed_sc(nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nm_usuario_nrec,
					dt_atualizacao_nrec,
					cd_estabelecimento,
					cd_classificacao,
					cd_final,
					cd_grupo_estoque,
					cd_inicial,
					cd_pai,
					ds_grupo_estoque,
					ie_grau,
					ie_tipo,
					nr_nivel)
				values (nextval('pls_grupo_est_fed_sc_seq'),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					cd_estabelecimento_p,
					cd_classificacao_w,
					cd_final_w,
					cd_grupo_estoque_w,
					cd_inicial_w,
					cd_pai_w,
					ds_grupo_estoque_w,
					ie_grau_w,
					ie_tipo_w,
					nr_nivel_w);
			--Se existir, faz Update
			else

				update	pls_grupo_est_fed_sc
				set	nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					ds_grupo_estoque	= ds_grupo_estoque_w
				where	cd_grupo_estoque	= cd_grupo_estoque_w;

			end if;
			end;
		end loop;
		close C01;
	end if;
end if;



commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_imp_grupo_estoque_unimed ( cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

