-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE prescr_proc_atexit_abort_eup ( nr_seq_proc_interno_p bigint, cd_convenio_p text, cd_categoria_p text, cd_tipo_acomodacao_p bigint, ie_tipo_atendimento_p text, cd_setor_atendimento_p text, dt_conta_p timestamp, cd_procedimento_p text, cd_medico_p text, nr_seq_exame_lab_p text, nr_seq_origem_p text, nr_prescricao_p text, ie_origem_proced_p text, ie_atrib_exit_p text, ie_tipo_convenio_p bigint, cd_medico_exec_p text, cd_profissional_p text, ie_clinica_p bigint, ie_tipo_atendimento_pac_p bigint, nr_atendimento_p bigint, nr_seq_classificacao_p bigint, ds_msg_erro_p INOUT text, ds_msg_aviso_p INOUT text, ie_consiste_edicao_p INOUT text, ie_apres_msg_proc_p INOUT text, ds_conteudo_p INOUT text, cd_cbo_p INOUT text, nm_usuario_p text) AS $body$
DECLARE

 
qt_pontos_w			preco_amb.qt_pontuacao%type;
ie_consiste_preco_w			varchar(1);
ie_glosa_proc_zerado_w		varchar(1);
ie_restringe_proc_w			varchar(1);
ie_consiste_w				varchar(1);
ie_exige_lado_w				varchar(1);
ie_consiste_cbo_w			varchar(1);
ie_proc_edicao_w			varchar(1);
ie_pacote_convenio_w		varchar(1);
ie_consiste_qt_proc_lado_p	varchar(1);
qt_proc_w					bigint;
vl_procedimento_w			double precision;
vl_aux_w					varchar(15);
cd_estabelecimento_w		bigint := obter_estabelecimento_ativo;


BEGIN 
 
ie_restringe_proc_w := Obter_param_Usuario(916, 23, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_restringe_proc_w);
ie_consiste_w := Obter_param_Usuario(916, 101, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_consiste_w);
ie_consiste_preco_w := Obter_param_Usuario(916, 182, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_consiste_preco_w);
ie_consiste_qt_proc_lado_p := obter_param_usuario(916, 285, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_consiste_qt_proc_lado_p);
ie_consiste_cbo_w := obter_param_usuario(916, 550, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_consiste_cbo_w);
 
ie_glosa_proc_zerado_w := Obter_param_Usuario(0, 17, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_glosa_proc_zerado_w);
 
if (nr_seq_proc_interno_p <> 0) then 
	begin 
	select	count(*) 
	into STRICT	qt_proc_w 
	from	proc_interno  
	where	nr_sequencia = nr_seq_proc_interno_p;
 
	if (qt_proc_w = 0) then 
			ds_msg_erro_p := wheb_mensagem_pck.get_texto(81200);
	end if;
	end;
end if;
 
if (coalesce(ds_msg_aviso_p::text, '') = '' and 
	ie_consiste_preco_w = 'S' and (ie_atrib_exit_p = 'NR_SEQ_PROC_INTERNO' or 
	ie_atrib_exit_p = 'CD_PROCEDIMENTO')) then 
	begin 
 
	SELECT * FROM Define_Preco_Procedimento(obter_estabelecimento_ativo, cd_convenio_p, cd_categoria_p, dt_conta_p, cd_procedimento_p, cd_tipo_acomodacao_p, ie_tipo_atendimento_p, cd_setor_atendimento_p, cd_medico_p, 0, 0, nr_seq_exame_lab_p, nr_seq_proc_interno_p, '', '', 0, 0, '', vl_procedimento_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, qt_pontos_w, vl_aux_w, vl_aux_w, vl_aux_w, 0, '', 0, '', '', '', '', 0, 0, 0, '', 0, 0, '', 0, 0, ie_origem_proced_p, nr_seq_origem_p, null, null) INTO STRICT vl_procedimento_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, qt_pontos_w, vl_aux_w, vl_aux_w, vl_aux_w;
			 
	if (vl_procedimento_w <= 0 and ((cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') or 
		(nr_seq_proc_interno_p IS NOT NULL AND nr_seq_proc_interno_p::text <> ''))) then 
		begin 
		if (ie_glosa_proc_zerado_w = 'S') then 
			ds_msg_aviso_p := wheb_mensagem_pck.get_texto(81246);
		else 
			ds_msg_aviso_p := wheb_mensagem_pck.get_texto(81247);
		end if;
		end;
	end if;
	end;
end if;
 
if ((coalesce(ds_msg_erro_p::text, '') = '' or 
	coalesce(ds_msg_aviso_p::text, '') = '') and (ie_atrib_exit_p = 'NR_SEQ_PROC_INTERNO' or 
	ie_atrib_exit_p = 'CD_PROCEDIMENTO')) then 
	 
	SELECT * FROM consistir_setor_prescr_js(cd_setor_atendimento_p, nr_atendimento_p, dt_conta_p, cd_convenio_p, cd_procedimento_p, ie_origem_proced_p, ie_tipo_atendimento_p, nr_seq_exame_lab_p, nr_seq_classificacao_p, cd_categoria_p, ie_tipo_atendimento_pac_p, obter_estabelecimento_ativo, obter_perfil_ativo, nm_usuario_p, null, vl_aux_w, vl_aux_w, vl_aux_w, ie_consiste_edicao_p, ie_proc_edicao_w, ie_pacote_convenio_w) INTO STRICT vl_aux_w, vl_aux_w, vl_aux_w, ie_consiste_edicao_p, ie_proc_edicao_w, ie_pacote_convenio_w;
 
	if (ie_proc_edicao_w = 'N' and 
		ie_pacote_convenio_w = 'N' and 
		ie_consiste_edicao_p = 'S') then 
		ds_msg_erro_p := wheb_mensagem_pck.get_texto(82030);
	else 
		begin 
		ds_msg_aviso_p := wheb_mensagem_pck.get_texto(82031);
		ie_apres_msg_proc_p := obter_param_usuario(916, 328, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_apres_msg_proc_p);
		select	wheb_mensagem_pck.get_texto(795138) ||' '|| substr(cd_procedimento_p,1,15) || ' - ' || 
					substr(obter_descricao_procedimento(cd_procedimento_p, ie_origem_proced_p),1,40) || 
				wheb_mensagem_pck.get_texto(795137)|| substr(obter_valor_proc_particular(cd_estabelecimento_w, 
										cd_procedimento_p,  
										ie_origem_proced_p, 
										ie_tipo_atendimento_p, 
										cd_medico_p, 
										ie_clinica_p, 
										nr_seq_proc_interno_p),1,20) ds_conteudo 
		into STRICT	ds_conteudo_p 
		;
		end;
	end if;
end if;
 
if (coalesce(ds_msg_erro_p::text, '') = '' and 
	ie_restringe_proc_w = 'S' and 
	ie_consiste_edicao_p = 'S') then 
	ds_msg_erro_p := Consiste_Setor_Prescr_Proc(nr_prescricao_p, 0, cd_procedimento_p, ie_origem_proced_p, cd_setor_atendimento_p, ie_consiste_w);
end if;
 
if ((nr_seq_proc_interno_p IS NOT NULL AND nr_seq_proc_interno_p::text <> '') and 
	coalesce(ds_msg_aviso_p::text, '') = '' and 
	ie_consiste_qt_proc_lado_p = 'S' and 
	ie_atrib_exit_p = 'QT_PROCEDIMENTO') then 
	begin 
	select 	ie_exige_lado 
	into STRICT	ie_exige_lado_w 
	from 	proc_interno 
	where 	nr_sequencia = nr_seq_proc_interno_p;
	if (ie_exige_lado_w = 'S') then 
		ds_msg_aviso_p := wheb_mensagem_pck.get_texto(82119);
	end if;
	end;
end if;
 
if (coalesce(ds_msg_erro_p::text, '') = '' and 
	ie_consiste_cbo_w = 'S' and 
	ie_tipo_convenio_p = 3 and 
	ie_atrib_exit_p = 'CD_MEDICO_EXEC' and 
	cd_medico_exec_p <> '' and 
	(cd_medico_exec_p IS NOT NULL AND cd_medico_exec_p::text <> '')) then 
	begin 
	select	max(a.cd_cbo) cd_cbo 
	into STRICT	cd_cbo_p 
	from	sus_cbo b, 
			sus_cbo_pessoa_fisica a 
	where	sus_obter_secbo_compativel(cd_medico_exec_p, cd_procedimento_p, ie_origem_proced_p, clock_timestamp(), a.cd_cbo, 0) = 'S' 
	and	cd_pessoa_fisica = cd_medico_exec_p 
	and	a.cd_cbo	 = b.cd_cbo;
	if (cd_cbo_p <> '') then 
		ds_msg_erro_p := wheb_mensagem_pck.get_texto(82172);
	end if;
	end;
end if;
 
if (coalesce(ds_msg_erro_p::text, '') = '' and 
	ie_consiste_cbo_w = 'S' and 
	ie_tipo_convenio_p = 3 and 
	ie_atrib_exit_p = 'CD_PROFISSIONAL' and 
	cd_profissional_p <> '' and 
	(cd_profissional_p IS NOT NULL AND cd_profissional_p::text <> '')) then 
	begin 
	select	max(a.cd_cbo) cd_cbo 
	into STRICT	cd_cbo_p 
	from	sus_cbo b, 
			sus_cbo_pessoa_fisica a 
	where	sus_obter_secbo_compativel(cd_profissional_p, cd_procedimento_p, ie_origem_proced_p, clock_timestamp(), a.cd_cbo, 0) = 'S' 
	and	cd_pessoa_fisica = cd_profissional_p 
	and	a.cd_cbo	 = b.cd_cbo;
	if (cd_cbo_p <> '') then 
		ds_msg_erro_p := wheb_mensagem_pck.get_texto(82172);
	end if;
	end;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE prescr_proc_atexit_abort_eup ( nr_seq_proc_interno_p bigint, cd_convenio_p text, cd_categoria_p text, cd_tipo_acomodacao_p bigint, ie_tipo_atendimento_p text, cd_setor_atendimento_p text, dt_conta_p timestamp, cd_procedimento_p text, cd_medico_p text, nr_seq_exame_lab_p text, nr_seq_origem_p text, nr_prescricao_p text, ie_origem_proced_p text, ie_atrib_exit_p text, ie_tipo_convenio_p bigint, cd_medico_exec_p text, cd_profissional_p text, ie_clinica_p bigint, ie_tipo_atendimento_pac_p bigint, nr_atendimento_p bigint, nr_seq_classificacao_p bigint, ds_msg_erro_p INOUT text, ds_msg_aviso_p INOUT text, ie_consiste_edicao_p INOUT text, ie_apres_msg_proc_p INOUT text, ds_conteudo_p INOUT text, cd_cbo_p INOUT text, nm_usuario_p text) FROM PUBLIC;

