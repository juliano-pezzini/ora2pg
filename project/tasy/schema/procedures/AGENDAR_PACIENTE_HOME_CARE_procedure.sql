-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE agendar_paciente_home_care (cd_pessoa_fisica_p text, ie_frequencia_p text, ie_considera_fim_sem_p text, dt_inicio_p timestamp, dt_fim_p timestamp, qt_intervalo_p bigint, hr_agenda_p text, ds_dias_p text, nm_usuario_p text, nr_seq_pac_hc_p bigint, ie_somente_validar_bloqueio_p text default 'N', ds_retorno_p INOUT text DEFAULT NULL, nr_minuto_duracao_p bigint DEFAULT NULL) AS $body$
DECLARE

				
qt_dias_w		bigint;
dt_dias_atual_w		timestamp;
cd_agenda_w		bigint;
nr_seq_servico_w	bigint;
nr_seq_prof_w		bigint;
nr_seq_equipe_w		bigint;
nr_seq_agenda_w		bigint;
nr_seq_agenda_prof_w	bigint;
nr_seq_resp_serv_pac_w	bigint;
qt_tempo_minuto_w	bigint;
dt_agenda_w		timestamp;
ie_situacao_w		varchar(2);
ds_retorno_w		varchar(4000) := null;
ds_nome_w		varchar(255);
ds_nome_resp_w		varchar(255);
cd_pessoa_fisica_w	varchar(10);
qt_erro_w		integer := 0;
cd_dia_semana_w		varchar(1);
qt_intervalo_w		integer;
qt_intervalo_ww		integer;
ie_gerar_dia_w		varchar(1);
ds_dias_w		varchar(255);
dt_dia_semana_w		smallint;
qt_dias_final_semana_w	integer;
ds_observacao_w		varchar(255) := '';
ie_copia_obs_w		varchar(1);
ie_agenda_hor_w		varchar(1);
ds_bloqueio_w		varchar(255);
qt_bloqueio_w		integer := 0;
ds_observacao_prof_hc_w	varchar(255);
ie_retorno_func_hc_w	varchar(1);
ie_escala_plantao_w	varchar(1);
nr_seq_incons_agen_w	bigint;
nr_seq_regulacao_w  regulacao_atend.nr_sequencia%TYPE;

c01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_servico,
		ie_agenda_hor
	from	agenda_home_care a
	where	exists (SELECT	1
			from	agenda_hc_controle b
			where	a.nr_sequencia = b.nr_seq_agenda
			and	b.nm_usuario = nm_usuario_p  LIMIT 1);

c02 CURSOR FOR
	SELECT	b.nr_sequencia,
		c.nr_sequencia,
		b.nr_seq_equipe,
		a.qt_tempo_minuto,
		c.cd_pessoa_fisica
	FROM hc_paciente_servico a, hc_resp_servico_paciente b
LEFT OUTER JOIN hc_profissional c ON (b.cd_pessoa_fisica = c.cd_pessoa_fisica)
WHERE b.nr_seq_pac_servico	= a.nr_sequencia  and a.nr_seq_servico	= nr_seq_servico_w and exists (SELECT	1
			from	hc_resp_serv_pac_controle d
			where	b.nr_sequencia = d.nr_seq_resp_serv_pac
			and	d.nm_usuario = nm_usuario_p  LIMIT 1);
	
	procedure validar_bloqueios_agenda is
	;
BEGIN
		if (qt_bloqueio_w <= 0) then
			SELECT	hc_consulta_bloqueio(cd_agenda_w, dt_agenda_w, 'M')
			into STRICT	ds_bloqueio_w
			;
							
			if (not(coalesce(ds_bloqueio_w,'X') = 'X')) then
				qt_bloqueio_w := qt_bloqueio_w + 1;
			end if;
		end if;
	end;
	
	procedure consistir_hr_profissional is
	begin
				
		if (ie_escala_plantao_w = 'S') then
							
			open c02;
			loop
			fetch c02 into
				nr_seq_resp_serv_pac_w,
				nr_seq_prof_w,
				nr_seq_equipe_w,
				qt_tempo_minuto_w,
				cd_pessoa_fisica_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				ie_retorno_func_hc_w := coalesce(hc_consistir_dispon_func(cd_pessoa_fisica_w,dt_agenda_w,nr_minuto_duracao_p),'N');
				if (ie_retorno_func_hc_w <> 'N') then
					if (ie_retorno_func_hc_w = 'E') then --Profissional fora da Escala
						ds_observacao_prof_hc_w := wheb_mensagem_pck.get_texto(302045);
					elsif (ie_retorno_func_hc_w = 'A') then --Profissional ausente
						ds_observacao_prof_hc_w := wheb_mensagem_pck.get_texto(302047);
					elsif (ie_retorno_func_hc_w = 'H') then --Profissional alocado em outro paciente
						ds_observacao_prof_hc_w := wheb_mensagem_pck.get_texto(302048);
					end if;
					
					select	nextval('hc_inconsistencia_agen_seq')
					into STRICT	nr_seq_incons_agen_w
					;
					
					insert into hc_inconsistencia_agen(
						nr_sequencia,
						nr_seq_hc_paciente,
						dt_agenda,
						ds_observacao,
						ie_tipo,
						cd_pessoa_fisica
					) values (
						nr_seq_incons_agen_w,
						nr_seq_pac_hc_p,
						dt_agenda_w,
						ds_observacao_prof_hc_w,
						ie_retorno_func_hc_w,
						cd_pessoa_fisica_w					
					);
				end if;
				end;
			end loop;
			close c02;
			
		end if;
		commit;
	end;
				
	procedure gravar_agendamento_paciente is
	begin
		qt_bloqueio_w := 0;
		
		validar_bloqueios_agenda;
		
		if (qt_bloqueio_w = 0) then  --Gravar registro de agendamento somente se não houver bloqueio do horário na agenda:
				
			select	nextval('agenda_hc_paciente_seq')
			into STRICT	nr_seq_agenda_w
			;

			insert into agenda_hc_paciente(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_pessoa_fisica,
				dt_agenda,
				ie_status_agenda,
				nr_seq_agenda,
				nr_seq_paciente_hc,
				ds_observacao,
				nr_minuto_duracao
			) values (
				nr_seq_agenda_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_pessoa_fisica_p,
				dt_agenda_w,
				'A',
				cd_agenda_w,
				nr_seq_pac_hc_p,
				ds_observacao_w,
				nr_minuto_duracao_p);

			open c02;
			loop
			fetch c02 into
				nr_seq_resp_serv_pac_w,
				nr_seq_prof_w,
				nr_seq_equipe_w,
				qt_tempo_minuto_w,
				cd_pessoa_fisica_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */

			select	CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
			into STRICT	ie_situacao_w
			FROM agenda_hc_paciente b, hc_agenda_prof a
LEFT OUTER JOIN hc_profissional c ON (a.nr_seq_prof_hc = c.nr_sequencia)
WHERE a.nr_seq_agenda = b.nr_sequencia  and ((c.nr_sequencia = nr_seq_prof_w) or (nr_seq_prof_w = 0)) and trunc(b.dt_agenda) = trunc(dt_dias_atual_w) and ((to_date(to_char(dt_dias_atual_w,'dd/mm/yyyy')||' '||hr_agenda_p,'dd/mm/yyyy hh24:mi:ss') >= b.dt_agenda and
				to_date(to_char(dt_dias_atual_w,'dd/mm/yyyy')||' '||hr_agenda_p,'dd/mm/yyyy hh24:mi:ss') <= b.dt_agenda+qt_tempo_minuto_w/1440)
			or (to_date(to_char(dt_dias_atual_w,'dd/mm/yyyy')||' '||hr_agenda_p,'dd/mm/yyyy hh24:mi:ss')+qt_tempo_minuto_w/1440 >= b.dt_agenda and
				to_date(to_char(dt_dias_atual_w,'dd/mm/yyyy')||' '||hr_agenda_p,'dd/mm/yyyy hh24:mi:ss')+qt_tempo_minuto_w/1440 <= b.dt_agenda+ qt_tempo_minuto_w/1440)) and coalesce(ie_agenda_hor_w,'S') = 'N' and ie_escala_plantao_w = 'N';

			if (ie_situacao_w = 'S') then
		
				select	nextval('hc_agenda_prof_seq')
				into STRICT	nr_seq_agenda_prof_w
				;
				

				insert into hc_agenda_prof(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_agenda,
					nr_seq_prof_hc,
					nr_seq_equipe_hc
				) values (
					nr_seq_agenda_prof_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_agenda_w,
					nr_seq_prof_w,
					nr_seq_equipe_w);
			else
				qt_erro_w := qt_erro_w +1;

				select  obter_nome_pf(cd_pessoa_fisica_p),
					obter_nome_pf(cd_pessoa_fisica_w)
				into STRICT	ds_nome_w,
					ds_nome_resp_w
				;

				ds_retorno_w := ds_retorno_w || Wheb_mensagem_pck.get_texto(307614, 'DS_NOME_W='||ds_nome_w ||';DS_NOME_RESP_W='||ds_nome_resp_w) || chr(13) || chr(10);
				
				/*'Agendamento do paciente ' || ds_nome_w ||
								' não foi gerado! Responsável ' || ds_nome_resp_w || ' já possui um agendamento para este horário' ||	chr(13) || chr(10);*/
			end if;

			end loop;
			close c02;					
		end if;
	end;

begin

ie_copia_obs_w := obter_param_usuario(867, 39, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_copia_obs_w);

begin
	select 	coalesce(ie_utiliza_escala_plantao,'N')
	into STRICT	ie_escala_plantao_w
	from 	hc_parametro
	where 	cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

exception
when others then
	ie_escala_plantao_w := 'N';
end;

if (ie_somente_validar_bloqueio_p = 'S') then
	--antes de gerar a inconsistência, exclui qualquer registro de inconsistência que esteja vinculado a agenda.
	delete	from hc_inconsistencia_agen
	where	nr_seq_hc_paciente = nr_seq_pac_hc_p;
	commit;
end if;

select	OBTER_DIAS_ENTRE_DATAS(dt_inicio_p, dt_fim_p)
into STRICT	qt_dias_w
;

if (qt_dias_w = 0) then
	qt_dias_w := 1;
end if;

if (ie_frequencia_p = 'D') then
	qt_dias_w := qt_dias_w *  31;
else
	qt_dias_w := (qt_dias_w * qt_intervalo_p) + 1;
end if;

dt_dias_atual_w	:= dt_inicio_p;
qt_intervalo_w  := qt_intervalo_p;
qt_intervalo_ww := qt_intervalo_p;

if (ie_copia_obs_w = 'S') then
	select	max(ds_observacao)
	into STRICT	ds_observacao_w
	from	paciente_home_care
	where	nr_sequencia = nr_seq_pac_hc_p;
end if;

if (ie_frequencia_p = 'D') then

	qt_intervalo_w := 0;

	while(qt_dias_w > 0) loop
		begin
		if (qt_intervalo_w = 0) then -- Final do intervalo de XX dias, irá gerar o registo
			select	obter_cod_dia_semana(dt_dias_atual_w)
			into STRICT	cd_dia_semana_w
			;

			if (ie_considera_fim_sem_p = 'N') then  -- Se não considerar o final de semana somente pode gerar de 2ª a 6ª
				-- Ver se é sábado ou domingo
				if (cd_dia_semana_w = 1)  then
					dt_dias_atual_w	:= dt_dias_atual_w + 1;
				elsif (cd_dia_semana_w = 7)  then
					dt_dias_atual_w	:= dt_dias_atual_w + 2;

				end if;
			end if;

			select	to_date(to_char(dt_dias_atual_w,'dd/mm/yyyy')||' '||hr_agenda_p,'dd/mm/yyyy hh24:mi:ss')
			into STRICT	dt_agenda_w
			;

			if (trunc(dt_dias_atual_w) <= trunc(dt_fim_p)) then
				open c01;
				loop
				fetch c01 into
					cd_agenda_w,
					nr_seq_servico_w,
					ie_agenda_hor_w;
				EXIT WHEN NOT FOUND; /* apply on c01 */

					if ie_somente_validar_bloqueio_p = 'S' then	-- Apenas validar os bloqueios sem gravar registro de agendamento
						consistir_hr_profissional;
						validar_bloqueios_agenda;
					else				
						gravar_agendamento_paciente;		-- Gravar registro de agendamento
					end if;

				end loop;
				close c01;
			end if;

			dt_dias_atual_w 	:= dt_dias_atual_w + qt_intervalo_p;
			qt_intervalo_w  	:= qt_intervalo_p;
		else

			qt_intervalo_w  := qt_intervalo_w -1;

		end if;

		qt_dias_w := qt_dias_w - 1;
		end;
	end loop;
elsif (ie_frequencia_p <> 'D') then

	while(qt_dias_w > 0) loop
		begin

		select	to_date(to_char(dt_dias_atual_w,'dd/mm/yyyy')||' '||hr_agenda_p,'dd/mm/yyyy hh24:mi:ss')
			into STRICT	dt_agenda_w
			;

		ie_gerar_dia_w	:= 'S';
			
		if (ie_frequencia_p = 'S') then
			begin
			/* obter dia semana */

			select	obter_cod_dia_semana(dt_dias_atual_w)
			into STRICT	dt_dia_semana_w
			;
	
			if (ds_dias_p IS NOT NULL AND ds_dias_p::text <> '') then
				select	substr(ds_dias_p,1,length(ds_dias_p) -2)
				into STRICT	ds_dias_w
				;
	
			ie_gerar_dia_w	:=  obter_se_contido(dt_dia_semana_w,ds_dias_w);
			end if;
			end;
		end if;
		
		if (ie_gerar_dia_w = 'S') then
			open c01;
			loop
			fetch c01 into
				cd_agenda_w,
				nr_seq_servico_w,
				ie_agenda_hor_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
			
				if ie_somente_validar_bloqueio_p = 'S' then	-- Apenas validar os bloqueios sem gravar registro de agendamento
					consistir_hr_profissional;
					validar_bloqueios_agenda;
				else
					gravar_agendamento_paciente;		-- Gravar registro de agendamento
				end if;

			end loop;
			close c01;
		end if;
		end;
	if (ie_frequencia_p = 'S') then	
		begin
		qt_dias_w := qt_dias_w - 1;
		dt_dias_atual_w := dt_dias_atual_w + 1;
		end;
	elsif (ie_frequencia_p = 'Q') then
		begin
		qt_dias_w := qt_dias_w - 15;
		dt_dias_atual_w := dt_dias_atual_w + 15;
		end;
	elsif (ie_frequencia_p = 'M') then
		begin
		qt_dias_w := qt_dias_w - 30;
		dt_dias_atual_w := dt_dias_atual_w + 30;
		end;
	elsif (ie_frequencia_p = 'SE') then
		begin
		qt_dias_w := qt_dias_w - 180;
		dt_dias_atual_w := dt_dias_atual_w + 180;
		end;
	end if;
	end loop;
end if;

if (ie_somente_validar_bloqueio_p = 'S') then	-- Se está apenas validando bloqueios e nao localizou bloqueio, retornar vazio
	if (qt_bloqueio_w = 0) then  	
		ds_retorno_p := '';
	else
		ds_retorno_p := Wheb_mensagem_pck.get_texto(307619); --'BLOQUEIO DE HORARIO NA AGENDA HOME CARE';
	end if;
else
	if (qt_erro_w = 0) then			-- Se está gravando agendamento	
						Select  max(a.nr_sequencia)
						into STRICT nr_seq_regulacao_w
				from	regulacao_atend a,
						paciente_home_care b
				where	a.nr_seq_home_care = b.nr_sequencia
				and		b.nr_sequencia = nr_seq_pac_hc_p;
				
				if (nr_seq_regulacao_w IS NOT NULL AND nr_seq_regulacao_w::text <> '') then
				
					CALL Alterar_status_regulacao(nr_seq_regulacao_w, 'AG', '');
				
				end if;
				
				
		ds_retorno_p := Wheb_mensagem_pck.get_texto(307620); --'Agendamento gerado com sucesso!';
	else
		ds_retorno_p := ds_retorno_w;
	end if;
	
	commit;					-- Se não estiver validando bloqueios, então efetuar commit nos registros inseridos;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE agendar_paciente_home_care (cd_pessoa_fisica_p text, ie_frequencia_p text, ie_considera_fim_sem_p text, dt_inicio_p timestamp, dt_fim_p timestamp, qt_intervalo_p bigint, hr_agenda_p text, ds_dias_p text, nm_usuario_p text, nr_seq_pac_hc_p bigint, ie_somente_validar_bloqueio_p text default 'N', ds_retorno_p INOUT text DEFAULT NULL, nr_minuto_duracao_p bigint DEFAULT NULL) FROM PUBLIC;

