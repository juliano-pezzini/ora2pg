-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_procedimento_tab_interna ( nr_seq_interno_p bigint, cd_convenio_p bigint, cd_estabelecimento_p bigint, dt_vigencia_p timestamp, cd_procedimento_p INOUT bigint, ie_origem_proced_p INOUT bigint) AS $body$
DECLARE

					

cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
cd_edicao_amb_w		integer;
ie_tipo_convenio_w		smallint;
cd_categoria_w		varchar(10);
vl_retorno_w		double precision;
ie_preco_informado_w	varchar(10);
ie_glosa_w		varchar(10);
cd_edicao_ajuste_w	integer;

cd_proced_conv_w		bigint;
ie_origem_proced_conv_w	bigint;
ie_autor_particular_w	varchar(1);
cd_convenio_glosa_ww	integer;
cd_categoria_glosa_ww	varchar(10);
nr_seq_ajuste_proc_ww	bigint;
dt_vigencia_w		timestamp;


c01 CURSOR FOR
SELECT	cd_procedimento,
	ie_origem_proced
from	proc_interno_conv
where	nr_seq_proc_interno		= nr_seq_interno_p
and (cd_convenio			= cd_convenio_p 		or coalesce(cd_convenio::text, '') = '')
and (cd_edicao_amb			= cd_edicao_amb_w 		or coalesce(cd_edicao_amb::text, '') = '')
and	dt_vigencia_w between coalesce(dt_inicio_vigencia, dt_vigencia_w) and coalesce(dt_final_vigencia, dt_vigencia_w)
order by
	coalesce(cd_edicao_amb,0),
	coalesce(cd_convenio,0),
	coalesce(ie_tipo_atendimento,0);

c02 CURSOR FOR
	SELECT	cd_categoria
	from	categoria_convenio
	where	cd_convenio	= cd_convenio_p;


BEGIN

dt_vigencia_w	:= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(dt_vigencia_p, clock_timestamp()));

select	max(cd_procedimento),
	max(ie_origem_proced)
into STRICT	cd_procedimento_w,
	ie_origem_proced_w
from	proc_interno
where	nr_sequencia = nr_seq_interno_p;

if (cd_convenio_p > 0) then
	begin
	
	select	max(ie_tipo_convenio)
	into STRICT	ie_tipo_convenio_w
	from	convenio
	where	cd_convenio = cd_convenio_p;

	SELECT	coalesce(max(CD_EDICAO_AMB),0)
	INTO STRICT	CD_EDICAO_AMB_W
	FROM 	CONVENIO_AMB
	WHERE (CD_ESTABELECIMENTO     = cd_estabelecimento_p)
	AND (CD_CONVENIO            = cd_convenio_p)
  	AND (coalesce(IE_SITUACAO,'A')   = 'A')
  	AND 	(DT_INICIO_VIGENCIA     =
			(SELECT	MAX(DT_INICIO_VIGENCIA)
			FROM 	CONVENIO_AMB A	
			WHERE (A.CD_ESTABELECIMENTO  	= cd_estabelecimento_p)
			AND (A.CD_CONVENIO         	= CD_CONVENIO_p)
			AND (coalesce(A.IE_SITUACAO,'A')	= 'A')
			AND (A.DT_INICIO_VIGENCIA 	<=  clock_timestamp())));

	
	cd_edicao_ajuste_w	:= 0;

	open	c02;
	loop
	fetch	c02 into cd_categoria_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin

		if (cd_edicao_ajuste_w = 0) then
			begin
			SELECT * FROM obter_regra_ajuste_proc(cd_estabelecimento_p, cd_convenio_p, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, null, clock_timestamp(), 0, 0, 0, null, 0, 0, null, 0, null, null, null, null, null, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, ie_preco_informado_w, ie_glosa_w, vl_retorno_w, vl_retorno_w, cd_edicao_ajuste_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, null, 0, ie_autor_particular_w, cd_convenio_glosa_ww, cd_categoria_glosa_ww, nr_seq_ajuste_proc_ww, null, null, null, null, null, null, null, null, vl_retorno_w, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, ie_preco_informado_w, ie_glosa_w, vl_retorno_w, vl_retorno_w, cd_edicao_ajuste_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, vl_retorno_w, ie_autor_particular_w, cd_convenio_glosa_ww, cd_categoria_glosa_ww, nr_seq_ajuste_proc_ww, vl_retorno_w;	
			exception
				when others then
				cd_edicao_ajuste_w	:= 0;
			end;
		end if;
		end;
	end loop;
	close	c02;
		
	if (cd_edicao_ajuste_w IS NOT NULL AND cd_edicao_ajuste_w::text <> '') and (cd_edicao_ajuste_w <> 0) then
		cd_edicao_amb_w		:= cd_edicao_ajuste_w;
	end if;

	if (cd_convenio_p IS NOT NULL AND cd_convenio_p::text <> '') or (cd_edicao_amb_w IS NOT NULL AND cd_edicao_amb_w::text <> '') then
		open c01;
		loop
		fetch c01 into	cd_proced_conv_w,
					ie_origem_proced_conv_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			cd_procedimento_w	:= cd_proced_conv_w;
			ie_origem_proced_w	:= ie_origem_proced_conv_w;
			end;
		end loop;
		close c01;
	end if;
	end;
end if;

cd_procedimento_p	:= cd_procedimento_w;
ie_origem_proced_p	:= ie_origem_proced_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_procedimento_tab_interna ( nr_seq_interno_p bigint, cd_convenio_p bigint, cd_estabelecimento_p bigint, dt_vigencia_p timestamp, cd_procedimento_p INOUT bigint, ie_origem_proced_p INOUT bigint) FROM PUBLIC;

