-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_dividir_faturas_prest ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_operadora_empresa_w		varchar(4000);
cd_cgc_w			varchar(4000);
ie_tipo_relacao_w		varchar(2);
ie_tipo_relacao_ant_w		varchar(2);
ie_tipo_relacao_prest_w		varchar(2);
vl_faturado_w			double precision;
nr_seq_fatura_w			bigint;
nr_seq_pagador_w		bigint;
nr_seq_congenere_w		bigint;
nr_seq_conta_w			bigint;
nr_seq_fatura_nova_w		bigint	:= null;
nr_seq_fatura_evento_w		bigint;
nr_seq_evento_fatura_w		bigint;
nr_seq_evento_w			bigint;
nr_seq_segurado_w		bigint;
nr_seq_conta_prest_w		bigint;
nr_seq_evento_prest_w		bigint;
nr_seq_fatura_conta_w		bigint;
nr_seq_prestador_exec_w		bigint;
nr_seq_grupo_prestador_w	bigint;
nr_seq_regra_w			bigint;
dt_mes_competencia_w		timestamp;
qt_registro_w			integer;
	
C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_tipo_relacao,
		a.nr_seq_grupo_prestador
	from	pls_regra_divisao_prest a
	where	a.cd_estabelecimento	= cd_estabelecimento_p
	and	trunc(clock_timestamp(),'dd') between trunc(a.dt_inicio_vigencia,'dd') and fim_dia(a.dt_fim_vigencia)
	and	((a.ie_tipo_relacao	= ie_tipo_relacao_prest_w) or (coalesce(a.ie_tipo_relacao::text, '') = ''))
	and	((pls_obter_se_prestador_grupo(a.nr_seq_grupo_prestador, nr_seq_prestador_exec_w) = 'S') or (coalesce(a.nr_seq_grupo_prestador::text, '') = ''))
	order by
		coalesce(a.ie_tipo_relacao, ' '),
		coalesce(a.nr_seq_grupo_prestador, 0),
		coalesce(a.dt_inicio_vigencia,clock_timestamp()) desc;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_pagador,
		a.nr_seq_congenere
	from	pls_fatura		a		
	where	a.nr_seq_lote	= nr_seq_lote_p
	and	coalesce(a.ie_impedimento_cobranca::text, '') = ''
	order by
		3;

C03 CURSOR FOR
	SELECT	b.nr_seq_conta,
		a.nr_seq_evento,
		a.nr_sequencia,
		b.nr_sequencia,
		d.ie_tipo_relacao,
		d.nr_sequencia
	from	pls_prestador		d,
		pls_conta		c,
		pls_fatura_conta 	b,
		pls_fatura_evento 	a
	where	a.nr_seq_fatura = nr_seq_fatura_w	
	and	a.nr_sequencia	= b.nr_seq_fatura_evento
	and	c.nr_sequencia	= b.nr_seq_conta
	and	d.nr_sequencia	= c.nr_seq_prestador_exec
	order by
		d.ie_tipo_relacao;


BEGIN
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then	
	select	a.dt_mesano_referencia
	into STRICT	dt_mes_competencia_w
	from	pls_lote_faturamento a
	where	a.nr_sequencia = nr_seq_lote_p;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_regra_divisao_prest
	where	cd_estabelecimento	= cd_estabelecimento_p;

	if (qt_registro_w > 0) then
		open C02;
		loop
		fetch C02 into	
			nr_seq_fatura_w,
			nr_seq_pagador_w,
			nr_seq_congenere_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			nr_seq_fatura_nova_w	:= null;
			ie_tipo_relacao_ant_w	:= null;
			
			open C03;
			loop
			fetch C03 into	
				nr_seq_conta_w,
				nr_seq_evento_w,
				nr_seq_fatura_evento_w,
				nr_seq_fatura_conta_w,
				ie_tipo_relacao_prest_w,
				nr_seq_prestador_exec_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				ie_tipo_relacao_w		:= null;
				nr_seq_grupo_prestador_w	:= null;
				nr_seq_regra_w			:= null;
				
				open C01;
				loop
				fetch C01 into	
					nr_seq_regra_w,
					ie_tipo_relacao_w,
					nr_seq_grupo_prestador_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
				end loop;
				close C01;
				
				if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
					ie_tipo_relacao_w	:= coalesce(ie_tipo_relacao_prest_w, ie_tipo_relacao_w);
					
					/*Verifica se existe uma fatura com estas informaes */

					select	max(a.nr_sequencia)
					into STRICT	nr_seq_evento_prest_w
					from	pls_fatura_conta 	b,
						pls_fatura_evento 	a,
						pls_fatura		f
					where	f.nr_sequencia			= a.nr_seq_fatura
					and	a.nr_sequencia			= b.nr_seq_fatura_evento
					and	f.nr_sequencia			<> nr_seq_fatura_w
					and	f.nr_seq_pagador 		= nr_seq_pagador_w
					and	f.ie_tipo_relacao 		= ie_tipo_relacao_w
					and	((f.nr_seq_grupo_prestador	= nr_seq_grupo_prestador_w) or (coalesce(nr_seq_grupo_prestador_w::text, '') = ''))
					and	a.nr_seq_evento			= nr_seq_evento_w
					and	f.nr_seq_lote  			= nr_seq_lote_p;			
					
					if (coalesce(nr_seq_evento_prest_w::text, '') = '') then								
						/*Cria uma nova fatura */

						select	nextval('pls_fatura_seq')
						into STRICT	nr_seq_fatura_nova_w
						;
						
						insert into pls_fatura(nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_pagador,
							nr_seq_lote,
							dt_vencimento,
							nr_seq_congenere,
							dt_mes_competencia,
							vl_fatura,
							dt_vencimento_ndc,
							vl_total_ndc,
							ie_tipo_relacao,
							nr_seq_grupo_prestador,
							nr_fatura,
							nr_seq_fat_divisao,
							ie_tipo_fatura)
						SELECT	nr_seq_fatura_nova_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_pagador,
							nr_seq_lote,
							dt_vencimento,
							nr_seq_congenere,
							dt_mes_competencia,
							0,
							dt_vencimento_ndc,
							0,
							ie_tipo_relacao_prest_w,
							nr_seq_grupo_prestador_w,
							nr_seq_fatura_nova_w,
							nr_seq_fatura_w,
							ie_tipo_fatura
						from	pls_fatura
						where	nr_sequencia = nr_seq_fatura_w;
					else
						nr_seq_fatura_nova_w	:= null;
					end if;
					
					if (nr_seq_fatura_nova_w IS NOT NULL AND nr_seq_fatura_nova_w::text <> '') then
						select	max(nr_sequencia)
						into STRICT	nr_seq_evento_fatura_w
						from 	pls_fatura_evento
						where	nr_seq_fatura = nr_seq_fatura_nova_w
						and	nr_seq_evento = nr_seq_evento_w;
						
						if (coalesce(nr_seq_evento_fatura_w::text, '') = '') then
							select	nextval('pls_fatura_evento_seq')
							into STRICT	nr_seq_evento_fatura_w
							;
							
							insert into pls_fatura_evento(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_evento,
								nr_seq_fatura,
								vl_evento)
							values (nr_seq_evento_fatura_w,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_evento_w,
								nr_seq_fatura_nova_w,
								0);
						end if;				
						
						/* Atualizar a conta para a fatura nova */

						update	pls_fatura_conta
						set	nr_seq_fatura_evento 	= nr_seq_evento_fatura_w
						where	nr_seq_conta 		= nr_seq_conta_w
						and	nr_seq_fatura_evento 	= nr_seq_fatura_evento_w;
						
					elsif (nr_seq_evento_prest_w IS NOT NULL AND nr_seq_evento_prest_w::text <> '') then
						update	pls_fatura_conta
						set	nr_seq_fatura_evento 	= nr_seq_evento_prest_w
						where	nr_seq_conta 		= nr_seq_conta_w
						and	nr_seq_fatura_evento 	= nr_seq_fatura_evento_w;
					end if;
				end if;
				end;
			end loop;
			close C03;
			end;
			commit;
		end loop;
		close C02;
		commit;
	end if;
		
	if (nr_seq_fatura_nova_w IS NOT NULL AND nr_seq_fatura_nova_w::text <> '') then	
		CALL pls_atualizar_vl_lote_fatura(	nr_seq_lote_p, nm_usuario_p, 'N', 'S');
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_dividir_faturas_prest ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

