-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_agenda_pac_ageserv (nr_seq_agenda_p bigint, cd_agenda_dest_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, ie_manter_duracao_p text, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_gerado_p INOUT bigint) AS $body$
DECLARE


cd_medico_agenda_w		varchar(10);
dt_agenda_w			timestamp;
ie_status_agenda_w		varchar(3);
ie_status_agenda_ww		varchar(3);
ie_status_agenda_www	varchar(3);
ie_classif_agenda_w		varchar(5);
cd_pessoa_fisica_w		varchar(10);
nm_paciente_w			varchar(60);
dt_nascimento_pac_w		timestamp;
qt_idade_pac_w			smallint;
nr_telefone_w			varchar(80);
nm_pessoa_contato_w		varchar(50);
ie_status_paciente_w		varchar(3);
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
cd_plano_w			varchar(10);
cd_usuario_convenio_w		varchar(30);
dt_validade_carteira_w		timestamp;
nr_doc_convenio_w		varchar(20);
cd_tipo_acomodacao_w		smallint;
nr_seq_sala_w			bigint;
cd_medico_req_w			varchar(10);
ds_confirmacao_w			varchar(80);
cd_setor_atendimento_w		integer;
nr_atendimento_w			bigint;

dt_dia_semana_w			smallint;
ie_feriado_w			varchar(1);
nr_seq_esp_w			bigint;
ie_hor_adic_w			varchar(1);
ie_final_semana_w			varchar(1);
ie_valido_w			varchar(1);
qt_horario_w			bigint;
qt_horario_livre_w			bigint;
nr_sequencia_w			agenda_consulta.nr_sequencia%type;
nr_minuto_agenda_w		bigint;
ds_consistencia_w			varchar(255);
ie_agenda_sem_horario_w		varchar(1);

nr_seq_hora_w			bigint    := 0;
ds_agendado_w			varchar(255) := 'N';
cd_agenda_w			bigint;
ie_consistir_duplicidade_w	varchar(1);
cd_funcao_ativa_w		bigint;


BEGIN

ie_status_agenda_ww := obter_param_usuario(281, 999, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_status_agenda_ww);
ie_agenda_sem_horario_w := obter_param_usuario(821, 185, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_agenda_sem_horario_w);
ie_consistir_duplicidade_w := obter_param_usuario(821, 430, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consistir_duplicidade_w);
ie_status_agenda_www := obter_param_usuario(821, 455, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_status_agenda_www);

cd_funcao_ativa_w	:=	obter_funcao_ativa;

if (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (cd_agenda_dest_p IS NOT NULL AND cd_agenda_dest_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then

	/* obter dados agenda consulta */

	select	a.cd_pessoa_fisica,
		b.dt_agenda,
		b.ie_status_agenda,
		b.ie_classif_agenda,
		b.cd_pessoa_fisica,
		substr(b.nm_paciente,1,60),
		b.dt_nascimento_pac,
		b.qt_idade_pac,
		b.nr_telefone,
		b.nm_pessoa_contato,
		b.ie_status_paciente,
		b.cd_convenio,
		b.cd_categoria,
		b.cd_plano,
		b.cd_usuario_convenio,
		b.dt_validade_carteira,
		b.nr_doc_convenio,
		b.cd_tipo_acomodacao,
		b.nr_seq_sala,
		b.cd_medico_req,
		b.ds_confirmacao,
		b.cd_setor_atendimento,
		b.nr_atendimento,
		b.cd_agenda
	into STRICT	cd_medico_agenda_w,
		dt_agenda_w,
		ie_status_agenda_w,
		ie_classif_agenda_w,
		cd_pessoa_fisica_w,
		nm_paciente_w,
		dt_nascimento_pac_w,
		qt_idade_pac_w,
		nr_telefone_w,
		nm_pessoa_contato_w,
		ie_status_paciente_w,
		cd_convenio_w,
		cd_categoria_w,
		cd_plano_w,
		cd_usuario_convenio_w,
		dt_validade_carteira_w,
		nr_doc_convenio_w,
		cd_tipo_acomodacao_w,
		nr_seq_sala_w,
		cd_medico_req_w,
		ds_confirmacao_w,
		cd_setor_atendimento_w,
		nr_atendimento_w,
		cd_agenda_w
	from	agenda a,
		agenda_consulta b
	where	a.cd_agenda		= b.cd_agenda
	and	b.nr_sequencia 	= nr_seq_agenda_p;	
	
	/* Consistir sobreposicao de horarios */

	ds_consistencia_w := consistir_horario_agecons(cd_agenda_dest_p, dt_agenda_w, null, 'E', ds_consistencia_w);
	if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(210487,'DS_CONSISTENCIA=' || ds_consistencia_w);
	end if;

	/* obter dia semana */

	select	obter_cod_dia_semana(dt_agenda_w)
	into STRICT	dt_dia_semana_w
	;

	/* obter se feriado */

	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_feriado_w
	from 	feriado a,
		agenda b
	where 	a.cd_estabelecimento = obter_estab_agenda(cd_agenda_dest_p)
	and	a.dt_feriado = trunc(dt_agenda_w)
	and 	b.cd_agenda = cd_agenda_dest_p;

	/* obter se horario especial */

	select	coalesce(max(nr_sequencia),0),
		coalesce(max(ie_horario_adicional),'N')
	into STRICT	nr_seq_esp_w,
		ie_hor_adic_w
	from	agenda_horario_esp
	where	cd_agenda = cd_agenda_dest_p
	and	((ie_dia_semana = dt_dia_semana_w) or ((ie_dia_semana = 9) and (dt_dia_Semana_w not in (1,7))) or (coalesce(ie_dia_semana::text, '') = ''))
	and dt_agenda_w between pkg_date_utils.start_of(dt_agenda,'DAY') and pkg_date_utils.end_of(coalesce(dt_agenda_fim,dt_agenda),'DAY');

	/* obter se final semana */

	if (dt_dia_semana_w in (7,1)) then
		ie_final_semana_w := 'S';
	else
		ie_final_semana_w := 'N';
	end if;

	/* validar horario x cadastro */

	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
	into STRICT	ie_valido_w
	from	agenda_turno
	where	cd_agenda = cd_agenda_dest_p
	and	((ie_dia_semana = dt_dia_semana_w) or (ie_dia_semana = 9))
	and	((nr_seq_esp_w = 0) or (ie_hor_adic_w = 'S'))
	and	((coalesce(dt_final_vigencia::text, '') = '') or (dt_final_vigencia >= trunc(dt_agenda_w)))
	and	((coalesce(dt_inicio_vigencia::text, '') = '') or (dt_inicio_vigencia <= trunc(dt_agenda_w)))
	and 	hr_inicial < hr_final
	and	dt_agenda_w between to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || coalesce(to_char(hr_inicial,'hh24:mi:ss'),'00:00:00'),'dd/mm/yyyy hh24:mi:ss') and
				    to_date(to_char(dt_agenda_w,'dd/mm/yyyy') || ' ' || coalesce(to_char(hr_inicial,'hh24:mi:ss'),'00:00:00'),'dd/mm/yyyy hh24:mi:ss')
	--and	nvl(nr_minuto_intervalo,0) > 0
	and	ie_feriado_w <> 'S';

	/* validar horario gerado */

	select	count(*)
	into STRICT	qt_horario_w
	from	agenda_consulta
	where	cd_agenda = cd_agenda_dest_p
	and	to_char(dt_agenda,'hh24:mi:ss') = to_char(dt_agenda_w,'hh24:mi:ss');

	/* validar horario livre */

	select	count(*)
	into STRICT	qt_horario_livre_w
	from	agenda_consulta
	where	cd_agenda = cd_agenda_dest_p
	and	to_char(dt_agenda,'hh24:mi:ss') = to_char(dt_agenda_w,'hh24:mi:ss')
	and	ie_status_agenda = 'L'
	and	obter_se_feriado(obter_estab_agenda(cd_agenda_dest_p), dt_agenda_w) = 0;
	
	select	coalesce(max(nr_seq_hora),0) + 1
	into STRICT	nr_seq_hora_w
	from	agenda_consulta
	where	cd_agenda	= cd_agenda_dest_p
	and	to_char(dt_agenda,'hh24:mi:ss') = to_char(dt_agenda_w,'hh24:mi:ss');
	
	if	((ie_valido_w = 'S' AND qt_horario_w = 0) or
		(ie_valido_w = 'S' AND qt_horario_livre_w > 0)) or (ie_agenda_sem_horario_w = 'S') then

				
		if (ie_consistir_duplicidade_w = 'S') then
		
			select 	obter_se_paciente_agendado(cd_pessoa_fisica_w,cd_agenda_w,dt_agenda_w,'C','N')
			into STRICT	ds_agendado_w
			;
		
		end if;
		
		if ( ds_agendado_w <> 'N') then
		
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(210460,'DS_AGENDADO=' || ds_agendado_w);		
			
		else
			--if	(ie_final_semana_p = 'S') or
			if ('S' = 'S') or (ie_final_semana_w = 'N') then

				
				/* obter sequencia */

				select	nextval('agenda_consulta_seq')
				into STRICT	nr_sequencia_w
				;				
				
				/* gerar agenda */

				insert into agenda_consulta(
								nr_sequencia,
								cd_agenda,
								cd_procedimento,
								ie_origem_proced,
								nr_seq_proc_interno,
								cd_turno,
								dt_atualizacao,
								nm_usuario,
								dt_agenda,
								nr_minuto_duracao,
								ie_status_agenda,
								ie_classif_agenda,
								cd_pessoa_fisica,
								nm_paciente,
								dt_nascimento_pac,
								qt_idade_pac,
								nr_telefone,
								nm_pessoa_contato,
								ie_status_paciente,
								cd_convenio,
								cd_categoria,
								cd_plano,
								cd_usuario_convenio,
								dt_validade_carteira,
								nr_doc_convenio,
								cd_tipo_acomodacao,
								nr_seq_sala,
								cd_medico_solic,
								ds_confirmacao,
								cd_setor_atendimento,
								--nr_atendimento,
								dt_agendamento,
								nr_seq_hora,
								ds_observacao
								)
							values (
								nr_sequencia_w,
								cd_agenda_dest_p,
								CASE WHEN cd_procedimento_p=0 THEN null  ELSE cd_procedimento_p END ,
								CASE WHEN ie_origem_proced_p=0 THEN null  ELSE ie_origem_proced_p END ,
								CASE WHEN nr_seq_proc_interno_p=0 THEN null  ELSE nr_seq_proc_interno_p END ,
								obter_turno_horario_agenda(cd_agenda_dest_p,dt_agenda_w),
								clock_timestamp(),
								nm_usuario_p,
								dt_agenda_w,
								0,
								coalesce(CASE WHEN cd_funcao_ativa_w=281 THEN  ie_status_agenda_ww WHEN cd_funcao_ativa_w=821 THEN  ie_status_agenda_www END ,ie_status_agenda_w),
								ie_classif_agenda_w,
								cd_pessoa_fisica_w,
								nm_paciente_w,
								dt_nascimento_pac_w,
								qt_idade_pac_w,
								nr_telefone_w,
								nm_pessoa_contato_w,
								ie_status_paciente_w,
								cd_convenio_w,
								cd_categoria_w,
								cd_plano_w,
								cd_usuario_convenio_w,
								dt_validade_carteira_w,
								nr_doc_convenio_w,
								cd_tipo_acomodacao_w,
								nr_seq_sala_w,
								cd_medico_agenda_w, --cd_medico_req_w, comentado OS175398
								ds_confirmacao_w,
								cd_setor_atendimento_w,
								--nr_atendimento_w,
								clock_timestamp(),
								nr_seq_hora_w,
								substr(ds_observacao_p,1,2000)
								);

			end if;
		
		end if;

	else
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(210456);
	end if;

else
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(210457);
end if;

nr_seq_gerado_p	:= nr_sequencia_w;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_agenda_pac_ageserv (nr_seq_agenda_p bigint, cd_agenda_dest_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, ie_manter_duracao_p text, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_gerado_p INOUT bigint) FROM PUBLIC;

