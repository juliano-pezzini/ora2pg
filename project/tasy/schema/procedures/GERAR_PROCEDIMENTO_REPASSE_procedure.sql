-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_procedimento_repasse ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, cd_medico_atend_p text, nm_usuario_p text, cd_edicao_amb_p bigint, cd_convenio_p bigint, ie_tipo_atendimento_p bigint, cd_regra_p bigint, nr_seq_criterio_p bigint, nr_seq_partic_p bigint default null) AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:   Gerar repasses de procedimentos conforme os procedimentos lancados na conta paciente e de acordo com os criterios de procedimentos.
----------------------------------------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[X]  Objetos do dicionario [] Tasy (Delphi/Java) [  ] Portal [  ] Relatorios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
 - Rotina executada atraves dos objetos GERAR_CONTA_PACIENTE_REPASSE,  GERAR_PROTOCOLO_CONV_REPASSE,  GERAR_PROTOCOLO_LOTE_REPASSE,
 REATUALIZAR_PROC_REP_RETORNO,  REATUALIZAR_REPASSE_RETORNO,  RECALC PROC_REPASSE_PERIODO,  RECALCULAR_CONTA_REPASSE,  RECALCULAR_REPASSE_PERIODO
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/qt_pontos_w      preco_amb.qt_pontuacao%type;
nr_atendimento_w    bigint;
nr_seq_proc_princ_w    bigint;
cd_tabela_preco_w    bigint;
cd_convenio_calc_w    bigint;
cd_edicao_amb_w      bigint;
ie_tipo_atend_calc_w    bigint;
cd_categoria_calc_w    varchar(100);

cd_medico_aux_laudo_w    varchar(100);
cd_pessoa_func_w    varchar(255);
ie_terc_estab_w      varchar(255);
cd_setor_w      bigint;
nr_seq_trans_fin_rep_maior_w  bigint;
cd_estab_terc_w      bigint;
cd_procedimento_w    bigint;
ie_origem_proced_w    bigint;
cd_regra_w      bigint  := 0;
vl_repassar_w      double precision;
vl_repasse_w      double precision;
vl_tabela_w      double precision;
vl_repasse_terc_w    double precision;
vl_participante_w    double precision;
vl_medico_princ_w    double precision;
vl_repasse_princ_w    double precision;
vl_anestesista_princ_w    double precision;
vl_materiais_princ_w    double precision;
vl_auxiliares_princ_w    double precision;
vl_custo_oper_princ_w    double precision;
vl_anestesistas_pacote_w  double precision;
vl_sh_w        double precision;
vl_sp_w        double precision;
vl_sadt_w      double precision;
vl_total_amb_w      double precision;
vl_sa_w        double precision;
vl_total_hospitalar_w    double precision;
vl_matmed_w      double precision;
qt_pontos_ato_w      double precision;
vl_honorario_medico_w    double precision;
vl_repasse_fixo_w    double precision;
ie_classif_proc_w    varchar(100);
nr_seq_terceiro_w    bigint;
cd_medico_prescr_w    varchar(100);
cd_medico_cir_w      varchar(100);

cd_medico_w      varchar(100);
cd_medico_ww      varchar(100);
cd_medico_rep_w      varchar(100);
cd_medico_referido_w    varchar(100);
vl_procedimento_w    double precision;
vl_medico_w      double precision;
vl_anestesista_w    double precision;
vl_materiais_w      double precision;
vl_auxiliares_w      double precision;
vl_custo_operacional_w    double precision;
vl_proc_princ_w      double precision;
vl_mat_princ_w      double precision;
tx_procedimento_w    double precision;
tx_medico_w      double precision;
tx_anestesista_w    double precision;
tx_materiais_w      double precision;
tx_auxiliares_w      double precision;
tx_custo_operacional_w    double precision;
vl_anestesistas_partic_w  double precision;
dt_conta_w      timestamp;
nr_seq_repasse_w      bigint;
nr_sequencia_w      bigint;
nr_prescricao_w      bigint;
ie_forma_calculo_w      proc_criterio_repasse.ie_forma_calculo%type;
ie_forma_pagto_w      varchar(100);
nr_cirurgia_w      bigint;
nr_seq_proc_pacote_w    bigint;
cd_tipo_acomodacao_w    bigint  := 0;
vl_pto_procedimento_w    double precision   := 0;
vl_pto_custo_operac_w    double precision   := 0;
vl_pto_anestesista_w     double precision   := 0;
vl_pto_medico_w      double precision   := 0;
vl_pto_auxiliares_w      double precision   := 0;
vl_pto_materiais_w      double precision   := 0;
qt_porte_anestesico_w    double precision   := 0;
vl_medico_orig_w      double precision   := 0;
vl_anestesista_orig_w    double precision   := 0;
vl_materiais_orig_w      double precision   := 0;
vl_auxiliares_orig_w      double precision   := 0;
vl_custo_operacional_orig_w    double precision   := 0;
vl_procedimento_orig_w    double precision   := 0;
ie_status_w      varchar(100);
nr_seq_trans_fin_w      bigint;

qt_registro_w      bigint;
cd_edicao_amb_calc_w    bigint;
qt_porte_w      bigint;
qt_idade_w      bigint;

vl_limite_w      double precision;
cd_equipamento_w      bigint;
nr_seq_terc_equip_w    bigint;

ie_tipo_convenio_w      bigint;
ie_honorario_w      varchar(100);
cd_medico_resp_w    varchar(100);
cd_medico_atendimento_w  varchar(100);
cd_medico_laudo_w    varchar(100);
cd_usuario_convenio_w    varchar(100);
cd_plano_w      varchar(100);
ie_med_exec_conveniado_w    varchar(100);
ie_clinica_w      bigint;
cd_empresa_ref_w      bigint;
cd_convenio_w      bigint;
cd_categoria_w      varchar(100);
cd_pessoa_indic_w      varchar(100);
ie_tipo_servico_sus_w    bigint;
ie_tipo_ato_sus_w      bigint;
dt_procedimento_w      timestamp;
qt_procedimento_w      double precision;
nr_repasse_origem_w    bigint;
nr_seq_terc_origem_w    bigint;
nr_repasse_terceiro_w    bigint;
nr_seq_proc_origem_w    bigint;
nr_seq_criterio_w      bigint;
ie_repasse_estorno_w    varchar(100);
ie_sexo_w      varchar(100);
ie_preco_informado_w    varchar(100);
ie_repasse_calc_w      varchar(255);
ie_atend_retorno_w      varchar(100);
ie_perc_pacote_w      varchar(100);
tx_ajuste_geral_w     double precision;
vl_ch_custo_oper_w    double precision;
vl_ch_honorarios_w    double precision;
vl_filme_w              double precision;
ie_prioridade_w      bigint;

ie_repasse_zerado_w    varchar(100);
nr_interno_conta_w      bigint;
nr_seq_proc_interno_w    bigint;
nr_lote_contabil_origem_w    bigint;
ie_status_origem_w      varchar(255);
ie_cancelamento_origem_w    varchar(255);
cd_medico_tratamento_w    varchar(255);
cd_estabelecimento_adic_w    smallint;
vl_tx_repasse_w      double precision;
vl_tx_medico_w      double precision;
vl_tx_anestesista_w      double precision;
vl_tx_materiais_w      double precision;
vl_tx_auxiliares_w      double precision;
vl_tx_custo_operacional_w    double precision;
nr_interno_conta_rep_w    bigint;
nr_seq_etapa_checkup_w    bigint;
cd_cgc_terceiro_w      varchar(14);
cd_pessoa_fisica_terceiro_w    varchar(10);
ie_data_liberacao_w    varchar(10);
cd_empresa_w      smallint;
qt_medico_indicacao_w    bigint;
cd_medico_indicacao_w    varchar(10);
ie_estornar_rep_desdob_w    varchar(1);
cd_usuario_original_w    varchar(100);
dt_liberacao_w      timestamp;
nr_SeQ_protocolo_w    bigint;
ie_status_protocolo_w    bigint;
dt_mesano_referencia_w    timestamp;
ie_data_lib_prod_w    varchar(255);
vl_sp_rat_w      double precision;
vl_sus_sp_w      double precision;
vl_rep_lib_w      double precision;
ie_status_rep_w      varchar(1);
ie_libera_repasse_estornado_w  varchar(1);
qt_audit_w      double precision;
qt_proced_w      double precision;
ie_repasse_audit_w    varchar(1);
ie_gerar_repasse_sh_diaria_w  varchar(1);
nr_seq_regra_prior_repasse_w  bigint;
cd_edicao_amb_regra_w    integer;
nr_seq_calculo_w    smallint;
qt_regra_w      bigint;
vl_minimo_w      double precision;
qt_pessoa_terceiro_w    bigint;

ie_origem_amb_w      bigint;
cd_proc_amb_w      bigint;
cd_setor_internacao_w    integer;
cd_setor_atendimento_w    integer;
ie_origem_c08_w      bigint;
ie_limite_qtdade_w    varchar(1);

nr_seq_ajuste_proc_w    bigint;

ie_auditar_repasse_w    parametro_repasse.ie_auditar_repasse%type;
nr_seq_origem_w      bigint;
vl_partic_tot_w      procedimento_participante.vl_participante%type;
vl_medico_tot_w      procedimento_paciente.vl_medico%type;
nr_laudo_w      procedimento_paciente.nr_laudo%type;
nr_seq_categoria_w    medico.nr_seq_categoria%type;
ie_tipo_terceiro_forma_w  regra_repasse_terc_item.ie_tipo_terceiro%type;
ie_tipo_terceiro_w    varchar(1);
ie_gerar_repasse_w    varchar(1);
cd_resp_seg_aprov_w    laudo_paciente.cd_resp_seg_aprov%type;
nm_usuario_seg_aprov_w    laudo_paciente.nm_usuario_seg_aprov%type;
ds_log_repasse_w    varchar(4000) := '';
ds_enter_w      varchar(255) := chr(13)||chr(10);
ie_gera_log_w      varchar(1) := 'N';
ds_log_insercao_w    varchar(4000) := '';
nr_seq_classif_medico_w    atendimento_paciente.nr_seq_classif_medico%type;
vl_original_repasse_w    procedimento_repasse.vl_original_repasse%type;
qt_pont_terc_w      bigint;
qt_pont_crit_w      bigint;
ie_campo_base_vl_repasse_w  proc_criterio_repasse.ie_campo_base_vl_repasse%type;
nr_seq_particip_w      bigint;
ie_forma_pagto_terc_w    varchar(100);
vl_rateio_w          conta_pac_ded_conv_item.vl_rateio%type;
ie_gravar_log_proc_w    parametro_repasse.ie_gravar_log_proc%type;
ie_gravar_log_mat_w    parametro_repasse.ie_gravar_log_mat%type;
nr_atendimento_mae_w    atendimento_paciente.nr_atendimento_mae%type;
dt_alta_w      timestamp;
ds_procedimento_w    procedimento.ds_procedimento%type;
ds_status_w      varchar(255);
nm_medico_w      varchar(255);
nm_medico_executor_w    varchar(255);
nr_atendimento_repasse_w  atendimento_paciente.nr_atendimento%type;
nm_pessoa_fisica_w    varchar(255);
ds_transacao_w      transacao_financeira.ds_transacao%type;
ds_convenio_w      convenio.ds_convenio%type;
ds_regra_w      regra_repasse_terceiro.ds_regra%type;
ds_tipo_atendimento_w    varchar(255);
dt_mesano_ref_conta_w    timestamp;
cd_centro_custo_w    setor_atendimento.cd_centro_custo%type;
ds_centro_custo_w    centro_custo.ds_centro_custo%type;
dt_entrada_atend_w    timestamp;
ds_conta_contabil_w    varchar(255);
ds_obs_forma_repasse_w    varchar(255);
ds_setor_atendimento_w    setor_atendimento.ds_setor_atendimento%type;
ds_funcao_medico_w    varchar(255);
nm_medico_req_w      varchar(255);
ds_observacao_criterio_w  proc_criterio_repasse.ds_observacao%type;
ds_categoria_w      varchar(255);
ds_classif_atua_medico_w  varchar(60);
ds_via_acesso_w      varchar(255);
ie_via_acesso_w      procedimento_paciente.ie_via_acesso%type;
ds_medico_resp_w    varchar(255);
ds_carater_w      varchar(255);
ie_carater_inter_sus_w    atendimento_paciente.ie_carater_inter_sus%type;
ds_medico_laudo_w    varchar(255);
cd_pessoa_fisica_w    pessoa_fisica.cd_pessoa_fisica%type;
cd_categoria_parametro_w  conta_paciente.cd_categoria_parametro%type;
ie_lib_laudo_proc_w    proc_criterio_repasse.ie_lib_laudo_proc%type;
ie_excluir_w      varchar(1);
cont_w        bigint;
ds_tipo_conv_w varchar(255);
ie_tipo_conv_w convenio.ie_tipo_convenio%type;
ie_alta_complexidade_w procedimento.ie_alta_complexidade%type;
dt_entrega_convenio_w timestamp;
ds_log_w	procedimento_repasse_log.ds_log%type := '';
qt_tem_prec_amb_w preco_amb.qt_pontuacao%type;

c_procedimentos CURSOR(  nr_sequencia_pc    procedimento_paciente.nr_sequencia%type,
      nr_seq_partic_pc  procedimento_participante.nr_seq_partic%type,
      ie_repasse_audit_pc  parametro_repasse.ie_repasse_item_audit%type) FOR
  SELECT  a.nr_sequencia nr_seq_propaci,
    0 nr_seq_particip,
    coalesce(a.cd_medico_exec_conta, a.cd_medico_executor) cd_medico_exec,
    coalesce(ie_funcao_medico,'0') ie_funcao,
    a.vl_medico vl_participante,
    a.vl_procedimento vl_procedimento,
    a.vl_medico vl_medico,
    coalesce(a.vl_anestesista,0) vl_anestesista,
    coalesce(a.vl_materiais,0) vl_materiais,
    coalesce(a.vl_auxiliares,0) vl_auxiliares,
    coalesce(a.vl_custo_operacional,0) vl_custo_operacional,
    a.ie_responsavel_credito ie_responsavel_credito,
    a.cd_cgc_prestador cd_cgc_prestador,
    coalesce(a.ie_tipo_servico_sus,0) ie_tipo_servico_sus,
    coalesce(a.ie_tipo_ato_sus,0) ie_tipo_ato_sus,
    a.cd_medico_req cd_medico_req,
    'A' ie_participou_sus,
    a.nm_usuario_original nm_usuario_original,
    a.nr_seq_grupo_rec nr_seq_grupo_rec,
    a.tx_procedimento tx_procedimento,
    a.ie_auditoria ie_auditoria,
    a.cd_medico_executor
  from   conta_paciente b,
    procedimento_paciente a
  where  a.nr_sequencia         = nr_sequencia_pc
  and  a.nr_interno_conta    = b.nr_interno_conta
  and  coalesce(nr_seq_partic_pc,0)    = 0
  and (coalesce(b.ie_cancelamento::text, '') = ''  or (b.nr_seq_ret_glosa IS NOT NULL AND b.nr_seq_ret_glosa::text <> ''))
  and  ((ie_repasse_audit_pc = 'S') or (ie_repasse_audit_pc = 'N' and (a.ie_auditoria <> 'S' or coalesce(a.ie_auditoria::text, '') = '') and not exists (SELECT 1 from auditoria_propaci x where x.nr_seq_propaci = a.nr_sequencia)))
  and  not exists (select  1
		  from   procedimento_repasse z
		  where  z.nr_seq_procedimento = nr_sequencia_pc
		  and  	 z.ie_bloq_laudo_liberado = 'S')

union

  select  a.nr_sequencia nr_seq_propaci,
    0 nr_seq_particip,
    coalesce(a.cd_medico_exec_conta, a.cd_medico_executor),
    coalesce(ie_funcao_medico,'0') ie_funcao,
    a.vl_medico vl_participante,
    a.vl_procedimento,
    a.vl_medico,
    coalesce(a.vl_anestesista,0),
    coalesce(a.vl_materiais,0),
    coalesce(a.vl_auxiliares,0),
    coalesce(a.vl_custo_operacional,0),
    a.ie_responsavel_credito,
    a.cd_cgc_prestador,
    coalesce(a.ie_tipo_servico_sus,0),
    coalesce(a.ie_tipo_ato_sus,0),
    a.cd_medico_req,
    'A' ie_participou_sus,
    a.nm_usuario_original nm_usuario_original,
    a.nr_seq_grupo_rec,
    a.tx_procedimento,
    a.ie_auditoria,
    a.cd_medico_executor
  from   conta_paciente b,
    procedimento_paciente a
  where  a.nr_sequencia         = nr_sequencia_pc
  and  a.nr_interno_conta    = b.nr_interno_conta
  and (coalesce(b.ie_cancelamento::text, '') = ''  or (b.nr_seq_ret_glosa IS NOT NULL AND b.nr_seq_ret_glosa::text <> ''))
  and  coalesce(nr_seq_partic_pc,0)    = 0
  and  (ie_repasse_audit_pc = 'N' and ((a.ie_auditoria = 'S' and coalesce(a.nr_seq_orig_audit::text, '') = '') or exists (select 1 from auditoria_matpaci x where x.nr_seq_matpaci = a.nr_sequencia)))
  and  coalesce(OBTER_VALOR_ITEM_AUDIT(a.nr_interno_conta,a.nr_sequencia,null,'Q'),0) > 0
  and  not exists (select  1
		  from   procedimento_repasse z
		  where  z.nr_seq_procedimento = nr_sequencia_pc
		  and  	 z.ie_bloq_laudo_liberado = 'S')
  
union

  select  x.nr_sequencia,
    x.nr_seq_partic,
    coalesce(x.cd_medico_exec_conta, x.cd_pessoa_fisica),
    x.ie_funcao,
    coalesce(x.vl_participante,0) vl_participante,
    y.vl_procedimento vl_procedimento,
    0 vl_medico,
    0 vl_anestesista,
    0 vl_materiais,
    0 vl_auxiliares,
    0 vl_custo_operacional,
    x.ie_responsavel_credito,
    coalesce(x.cd_cgc,'0'),
    coalesce(x.ie_tipo_servico_sus,0),
    coalesce(x.ie_tipo_ato_sus,0),
    '' cd_medico_req,
    ie_participou_sus,
    '' nm_usuario_original,
    0 nr_seq_grupo_rec,
    y.tx_procedimento,
    y.ie_auditoria,
    y.cd_medico_executor
  from   conta_paciente z,
    procedimento_paciente y,
    procedimento_participante x
  where   x.nr_sequencia         = nr_sequencia_pc
  and  x.nr_sequencia    = y.nr_sequencia
  and  x.nr_seq_partic    = coalesce(nr_seq_partic_pc,x.nr_seq_partic)
  and  y.nr_interno_conta  = z.nr_interno_conta
  and (coalesce(z.ie_cancelamento::text, '') = ''  or (z.nr_seq_ret_glosa IS NOT NULL AND z.nr_seq_ret_glosa::text <> ''))
  and  not exists (select  1
		  from   procedimento_repasse z
		  where  z.nr_seq_procedimento = nr_sequencia_pc
		  and	 z.nr_seq_partic = x.nr_seq_partic
		  and  	 z.ie_bloq_laudo_liberado = 'S')
  order by 4;

c_forma_repasse CURSOR(  cd_regra_pc    regra_repasse_terceiro.cd_regra%type,
        ie_funcao_pc    procedimento_paciente.ie_funcao_medico%type,
        nr_seq_categoria_pc  medico.nr_seq_categoria%type,
        cd_medico_pc    medico.cd_pessoa_fisica%type,
        dt_conta_pc    timestamp) FOR
  SELECT  ie_beneficiario,
    tx_repasse,
    nr_seq_terceiro,
    cd_conta_contabil,
    vl_repasse,
    coalesce(ie_perc_saldo,'S') ie_perc_saldo,
    coalesce(ie_restricao_medico,0) ie_restricao_medico,
    coalesce(ie_gravacao_medico,'S') ie_gravacao_medico,
    coalesce(ie_regra_saldo, 'N') ie_regra_saldo,
    cd_pessoa_fisica,
    coalesce(tx_anestesista, 0) tx_anestesista,
    coalesce(tx_auxiliares, 0) tx_auxiliares,
    coalesce(tx_custo_operacional, 0) tx_custo_operacional,
    coalesce(tx_materiais, 0) tx_materiais,
    coalesce(tx_medico, 0) tx_medico,
    nr_seq_item,
    coalesce(ie_por_unidade, 'N') ie_por_unidade,
    coalesce(ie_perc_executor,'N') ie_perc_executor,
    ie_tipo_terceiro,
    coalesce(ie_gera_item_zerado,'N') ie_gera_item_zerado,
    coalesce(ie_recebe_regra_pontuacao,'N') ie_recebe_regra_pontuacao,
    coalesce(ie_valida_terceiro_forma,'N') ie_valida_terceiro_forma
  from   regra_repasse_terc_item
  where  cd_regra  = cd_regra_pc
  and  coalesce(ie_funcao_medico,coalesce(ie_funcao_pc,'X')) = coalesce(ie_funcao_pc,'X')
  and  ((coalesce(nr_seq_categoria::text, '') = '') or (nr_seq_categoria = nr_seq_categoria_pc))
  and  ((ie_gravacao_medico = 'F') or (coalesce(cd_pessoa_fisica,coalesce(cd_medico_pc,'0')) = coalesce(cd_medico_pc,'0')))
  and  dt_conta_pc between coalesce(dt_inicio_vigencia,dt_conta_pc) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_fim_vigencia,dt_conta_pc,clock_timestamp()))
  order  by nr_seq_item;

C04 CURSOR FOR
SELECT  vl_servico
from  preco_servico
where  cd_estabelecimento  = cd_estabelecimento_p
and  cd_tabela_servico  = cd_tabela_preco_w
and  cd_procedimento    = cd_procedimento_w
and  dt_inicio_vigencia  <= dt_conta_w
order  by
  dt_inicio_vigencia desc,
  vl_servico desc;

C05 CURSOR FOR
SELECT  a.nr_sequencia,
  a.nr_seq_partic,
  a.nr_repasse_terceiro,
  a.nr_seq_terceiro,
  a.nr_seq_procedimento,
  a.nr_lote_contabil,
  a.ie_status,
  c.ie_cancelamento,
  b.nr_interno_conta
from  conta_paciente c,
  procedimento_paciente b,
  Procedimento_repasse a
where  a.nr_seq_procedimento  = nr_sequencia_p
and  a.nr_seq_procedimento  = b.nr_sequencia
and  b.nr_interno_conta  = c.nr_interno_conta
and   coalesce(a.ie_bloq_laudo_liberado,'N') = 'N'
and (coalesce(a.nr_seq_partic,0)    = nr_seq_partic_p or coalesce(nr_seq_partic_p::text, '') = '')
and  ((coalesce(ie_estornar_rep_desdob_w,'N') = 'N' and coalesce(a.nr_seq_origem::text, '') = '') or (coalesce(ie_estornar_rep_desdob_w,'N') = 'S'/* and coalesce(a.ie_estorno,'N') = 'N')*/))
and  not exists (SELECT  1
  from   Procedimento_Repasse x
  where (coalesce(ie_estornar_rep_desdob_w,'N') = 'N' or coalesce(x.ie_estorno,'N') = 'S')
  and  x.nr_seq_origem  = a.nr_sequencia);

C06 CURSOR FOR
SELECT  cd_medico
from  atendimento_indicacao
where  nr_atendimento  = nr_atendimento_w
order by   nr_sequencia; --tem que ordenar pela sequencia
c07 CURSOR FOR
SELECT  a.cd_edicao_amb
from  REGRA_PRIOR_EDICAO_REPASSE b,
  REGRA_PRIOR_EDICAO_ITEM a
where  b.nr_sequencia  = a.NR_SEQ_REGRA_PRIOR_REPASSE
and  b.nr_sequencia  = NR_SEQ_REGRA_PRIOR_REPASSE_w
order by  a.nr_seq_calculo;

c08 CURSOR FOR
SELECT  cd_procedimento,
  ie_origem_proced
from  proc_interno_conv
where  nr_seq_proc_interno  = nr_seq_proc_interno_w
and (cd_convenio    = cd_convenio_w OR coalesce(cd_convenio::text, '') = '')
and (cd_edicao_amb    = cd_edicao_amb_calc_w OR coalesce(cd_edicao_amb::text, '') = '')
and (ie_tipo_atendimento  = ie_tipo_atendimento_p OR coalesce(ie_tipo_atendimento::text, '') = '')
and   ((ie_origem_proc_filtro = ie_origem_amb_w) or (coalesce(ie_origem_proc_filtro::text, '') = ''))
and   (((cd_setor_atendimento  = coalesce(cd_setor_atendimento_w,0) and coalesce(ie_tipo_setor,'P') = 'P') or (cd_setor_atendimento  = coalesce(cd_setor_w,0)  and  coalesce(ie_tipo_setor,'P') = 'L') or (cd_setor_atendimento  = coalesce((cd_setor_internacao_w)::numeric ,0)  and  coalesce(ie_tipo_setor,'P') = 'I')) or (coalesce(cd_setor_atendimento::text, '') = ''))
and   ((cd_estabelecimento   = cd_estabelecimento_p) or (coalesce(cd_estabelecimento::text, '') = ''))
and (coalesce(cd_categoria,coalesce(cd_categoria_w,'0')) =  coalesce(cd_categoria_w,'0'))
and (coalesce(cd_tipo_acomodacao, coalesce(cd_tipo_acomodacao_w,0)) = coalesce(cd_tipo_acomodacao_w,0))
and  dt_conta_w between coalesce(dt_inicio_vigencia, dt_conta_w) and coalesce(dt_final_vigencia, dt_conta_w)
and  coalesce(ie_situacao,'A') = 'A'
order by
  coalesce(ie_origem_proc_filtro,0),
  coalesce(cd_edicao_amb,0),
  coalesce(nr_seq_cbhpm_edicao,0),
  coalesce(cd_convenio,0),
  coalesce(ie_tipo_atendimento,0),
  coalesce(cd_setor_atendimento,0),
  coalesce(cd_estabelecimento,0),
  coalesce(ie_tipo_setor,'P'),
  coalesce(cd_categoria,'0'),
  coalesce(cd_tipo_acomodacao,0);
BEGIN

select  coalesce(max(ie_repasse_estorno),'N'),
  coalesce(max(ie_repasse_zerado), 'N')
into STRICT  ie_repasse_estorno_w,
  ie_repasse_zerado_w
from   Parametro_faturamento
where  cd_estabelecimento  = cd_estabelecimento_p;

ie_data_liberacao_w  := obter_valor_param_usuario(87, 89, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
ie_excluir_w    := obter_valor_param_usuario(87, 6, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);

select   coalesce(max(ie_estornar_rep_desdob),'N'),
  coalesce(max(ie_data_lib_prod),'N'),
  coalesce(max(ie_terc_estab),'L'),
  coalesce(max(ie_libera_repasse_estornado),'N'),
  coalesce(max(ie_repasse_item_audit),'S'),
  coalesce(max(ie_custo_oper_proc),'S'),
  coalesce(max(ie_auditar_repasse),'N'),
  coalesce(max(ie_gravar_log_proc),'N'),
  coalesce(max(ie_gravar_log_mat),'N')
into STRICT  ie_estornar_rep_desdob_w,
  ie_data_lib_prod_w,
  ie_terc_estab_w,
  ie_libera_repasse_estornado_w,
  ie_repasse_audit_w,
  ie_gerar_repasse_sh_diaria_w,
  ie_auditar_repasse_w,
  ie_gravar_log_proc_w,
  ie_gravar_log_mat_w
from  parametro_repasse
where  cd_estabelecimento  = cd_estabelecimento_p;

if (nr_seq_partic_p = 0) then
  delete   from procedimento_repasse a
  where  nr_seq_procedimento  = nr_sequencia_p
  and  coalesce(nr_lote_contabil,0)  = 0
  and  coalesce(nr_seq_item_retorno::text, '') = ''
  and  ie_status    in ('A','S')
  and  coalesce(nr_seq_origem::text, '') = ''
  and  coalesce(nr_seq_partic::text, '') = ''
  and   coalesce(ie_bloq_laudo_liberado,'N') = 'N'
  and  not exists (SELECT 1
    from repasse_terceiro b
    where coalesce(a.nr_repasse_terceiro,0)  = b.nr_repasse_terceiro
    and  b.nr_repasse_terceiro <> 0)
  and  not exists (select 1
    from Procedimento_Repasse c
    where c.nr_seq_origem  = a.nr_sequencia);

  if (coalesce(ie_estornar_rep_desdob_w,'N') = 'S') and (ie_excluir_w = 'S') then
    delete   from procedimento_repasse a
    where  nr_seq_procedimento  = nr_sequencia_p
    and  coalesce(nr_lote_contabil,0)  = 0
    and  coalesce(nr_seq_item_retorno::text, '') = ''
    and  ie_status    = 'E'
    and  coalesce(ie_estorno,'N')  = 'S'
    and  (nr_seq_origem IS NOT NULL AND nr_seq_origem::text <> '')
    and  coalesce(nr_seq_partic::text, '') = ''
    and   coalesce(ie_bloq_laudo_liberado,'N') = 'N'
    and  not exists (SELECT 1
      from repasse_terceiro b
      where coalesce(a.nr_repasse_terceiro,0)  = b.nr_repasse_terceiro
      and  b.nr_repasse_terceiro <> 0)
    and  not exists (select 1
      from Procedimento_Repasse c
      where c.nr_seq_origem  = a.nr_sequencia);
  end if;

  if (ie_gravar_log_proc_w = 'S') then
    delete  FROM procedimento_repasse_log
    where  nr_seq_procedimento = nr_sequencia_p
    and  coalesce(nr_seq_participante,0) = 0;
  end if;
else
  delete   from procedimento_repasse a
  where  nr_seq_procedimento  = nr_sequencia_p
  and  coalesce(nr_lote_contabil,0)  = 0
  and  coalesce(nr_seq_item_retorno::text, '') = ''
  and  ie_status    in ('A','S')
  and  coalesce(nr_seq_origem::text, '') = ''
  and   coalesce(ie_bloq_laudo_liberado,'N') = 'N'
  and (nr_seq_partic = nr_seq_partic_p or coalesce(nr_seq_partic_p,0) = 0)
  and  not exists (SELECT 1
    from repasse_terceiro b
    where coalesce(a.nr_repasse_terceiro,0)  = b.nr_repasse_terceiro
    and  b.nr_repasse_terceiro <> 0)
  and  not exists (select 1
    from Procedimento_Repasse c
    where c.nr_seq_origem  = a.nr_sequencia);

  if (ie_gravar_log_proc_w = 'S') then
    delete  FROM procedimento_repasse_log
    where  nr_seq_procedimento = nr_sequencia_p
    and  nr_seq_participante = nr_seq_partic_p;
  end if;
end if;

OPEN C05;
LOOP
FETCH C05 into
  nr_sequencia_w,
  nr_seq_particip_w,
  nr_repasse_origem_w,
  nr_seq_terc_origem_w,
  nr_seq_proc_origem_w,
  nr_lote_contabil_origem_w,
  ie_status_origem_w,
  ie_cancelamento_origem_w,
  nr_interno_conta_rep_w;
EXIT WHEN NOT FOUND; /* apply on c05 */

 if (obter_valor_repasse_item(nr_seq_proc_origem_w,'P') <> 0) then

  select  nextval('procedimento_repasse_seq')
  into STRICT  nr_seq_repasse_w
;

  select  ie_status,
    vl_repasse
  into STRICT  ie_status_rep_w,
    vl_rep_lib_w
  from  procedimento_repasse
  where  nr_sequencia  = nr_sequencia_w;

  if (coalesce(IE_LIBERA_REPASSE_ESTORNADO_W,'N') = 'S') and (ie_status_rep_w = 'A') then
    update  procedimento_repasse
    set  nm_usuario_lib = nm_usuario_p,
      dt_liberacao = clock_timestamp(),
      vl_liberado = vl_rep_lib_w,
      ie_status = 'S'
    where  nr_sequencia  = nr_sequencia_w;
  end if;

  insert into procedimento_repasse(
    nr_sequencia,
    nr_seq_procedimento,
    vl_repasse,
    dt_atualizacao,
    nm_usuario,
    nr_seq_terceiro,
    nr_lote_contabil,
    nr_repasse_terceiro,
    cd_conta_contabil,
    nr_seq_trans_fin,
    vl_liberado,
    nr_seq_item_retorno,
    ie_status,
    nr_seq_origem,
    cd_regra,
    DT_CONTABIL_TITULO,
    DT_CONTABIL,
    cd_medico,
    nr_seq_partic,
    nr_seq_criterio,
    NR_SEQ_TRANS_FIN_REP_MAIOR,
    ie_estorno,
    ie_repasse_calc,
    dt_liberacao,
    nr_seq_motivo_des,
    vl_original_repasse,
    dt_entrega_convenio)
  SELECT  nr_seq_repasse_w,
    nr_seq_procedimento,
    vl_repasse  * -1,
    clock_timestamp(),
    nm_usuario_p,
    nr_seq_terceiro,
    0,
    null,
    cd_conta_contabil,
    nr_seq_trans_fin,
    CASE WHEN vl_liberado=0 THEN  CASE WHEN ie_status='G' THEN 0  ELSE vl_repasse END   ELSE vl_liberado END  * -1,
    nr_seq_item_retorno,
    'E',
    nr_sequencia_w,
    cd_regra,
    to_date('01/01/2999','dd/mm/yyyy'),
    to_date('01/01/2999','dd/mm/yyyy'),
    cd_medico,
    CASE WHEN coalesce(nr_seq_particip_w,0)=0 THEN null  ELSE nr_seq_particip_w END ,
    nr_seq_criterio,
    NR_SEQ_TRANS_FIN_REP_MAIOR,
    'S',
    ie_repasse_calc,
    CASE WHEN ie_data_liberacao_w='S' THEN  clock_timestamp()  ELSE null END ,
    nr_seq_motivo_des,
    vl_original_repasse,
    dt_entrega_convenio
  from  Procedimento_repasse
  where  nr_sequencia  = nr_sequencia_w;

  if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

  -- Edgar 04/10/2006 OS 41952 , inclui rotina abaixo para vincular ao repasse automaticamente
  if (coalesce(nr_repasse_origem_w, 0) > 0) and (ie_repasse_estorno_w = 'S') then

    nr_repasse_terceiro_w := obter_repasse_terceiro(
      clock_timestamp(), nr_seq_terc_origem_w, nm_usuario_p, nr_seq_proc_origem_w, 'P', nr_repasse_terceiro_w, null, null);

    if (coalesce(nr_repasse_terceiro_w,0) > 0) then

      update  procedimento_repasse
      set  dt_atualizacao    = clock_timestamp(),
        nm_usuario    = nm_usuario_p,
        nr_repasse_terceiro  = nr_repasse_terceiro_w,
        ie_estorno    = 'S'
      where  nr_sequencia    = nr_seq_repasse_w;

    end if;

  end if;

  /* ahoffelder - OS 321335 - 10/06/2011 */

  update  procedimento_repasse
  set  dt_atualizacao    = clock_timestamp(),
    nm_usuario    = nm_usuario_p,
    ie_estorno    = 'S'
  where  nr_sequencia    = nr_sequencia_w;

  -- Edgar 26/03/2009, OS 128439, Colocar o repasse de conta cancelada que originou o estorno como "Usuario (Aguardando Acao)"
  if (coalesce(nr_lote_contabil_origem_w,0) > 0) and (ie_status_origem_w = 'A') and (ie_cancelamento_origem_w = 'C') and (coalesce(IE_LIBERA_REPASSE_ESTORNADO_W,'N') = 'N') then
    update  procedimento_repasse
    set  dt_atualizacao    = clock_timestamp(),
      nm_usuario    = nm_usuario_p,
      ie_status    = 'U'
    where  nr_sequencia    = nr_sequencia_w;
  end if;
 end if;
END LOOP;

CLOSE C05;

begin
select   coalesce(a.dt_conta, a.dt_procedimento),
  a.cd_setor_atendimento,
  a.cd_procedimento,
  a.ie_origem_proced,
  a.nr_prescricao,
  coalesce(a.nr_cirurgia,0),
  a.nr_seq_proc_pacote,
  a.nr_atendimento,
  a.cd_equipamento,
  c.cd_medico_resp,
  c.cd_medico_atendimento,
  a.cd_convenio,
  coalesce(a.cd_categoria, f.cd_categoria_parametro),
  c.cd_pessoa_indic,
  coalesce(a.ie_tipo_servico_sus,0),
  coalesce(a.ie_tipo_ato_sus,0),
  a.dt_procedimento,
  a.qt_procedimento,
  e.ie_sexo,
  CASE WHEN coalesce(c.nr_atend_original::text, '') = '' THEN  'N'  ELSE 'S' END  ie_atend_retorno,
  obter_medico_laudo_sequencia(a.nr_laudo,'C'),
  a.nr_interno_conta,
  coalesce(a.nr_seq_proc_interno, 0),
  e.cd_medico,
  a.nr_seq_proc_princ,
  coalesce(a.qt_porte_anestesico, -1),
  coalesce(a.cd_pessoa_fisica, 0),
  a.vl_medico,
  a.vl_anestesista,
  a.vl_materiais,
  a.vl_auxiliares,
  a.vl_custo_operacional,
  a.vl_procedimento,
  c.cd_estabelecimento,
  obter_tipo_acomod_data(a.nr_atendimento, a.dt_procedimento),
  Sus_Obter_Valor_Item_Proc(a.nr_sequencia, 4) vl_sp_rat,
  Sus_Obter_Valor_Item_Proc(nr_sequencia, 2) vl_sp,
  c.cd_medico_referido,
  a.nr_laudo,
  c.ie_clinica,
  coalesce(c.nr_seq_classif_medico,0),
  c.nr_atendimento_mae,
  c.dt_alta,
  f.dt_mesano_referencia,
  c.dt_entrada,
  a.ie_via_acesso,
  c.ie_carater_inter_sus,
  f.nr_seq_protocolo,
  c.cd_pessoa_fisica,
  f.cd_categoria_parametro,
  g.ie_tipo_convenio,
  a.cd_setor_atendimento
into STRICT  dt_conta_w,
  cd_setor_w,
  cd_procedimento_w,
  ie_origem_proced_w,
  nr_prescricao_w,
  nr_cirurgia_w,
  nr_seq_proc_pacote_w,
  nr_atendimento_w,
  cd_equipamento_w,
  cd_medico_resp_w,
  cd_medico_atendimento_w,
  cd_convenio_w,
  cd_categoria_w,
  cd_pessoa_indic_w,
  ie_tipo_servico_sus_w,
  ie_tipo_ato_sus_w,
  dt_procedimento_w,
  qt_procedimento_w,
  ie_sexo_w,
  ie_atend_retorno_w,
  cd_medico_laudo_w,
  nr_interno_conta_w,
  nr_seq_proc_interno_w,
  cd_medico_tratamento_w,
  nr_seq_proc_princ_w,
  qt_porte_anestesico_w,
  cd_pessoa_func_w,
  vl_medico_orig_w,
  vl_anestesista_orig_w,
  vl_materiais_orig_w,
  vl_auxiliares_orig_w,
  vl_custo_operacional_orig_w,
  vl_procedimento_orig_w,
  cd_estabelecimento_adic_w,
  cd_tipo_acomodacao_w,
  vl_sp_rat_w,
  vl_sus_sp_w,
  cd_medico_referido_w,
  nr_laudo_w,
  ie_clinica_w,
  nr_seq_classif_medico_w,
  nr_atendimento_mae_w,
  dt_alta_w,
  dt_mesano_ref_conta_w,
  dt_entrada_atend_w,
  ie_via_acesso_w,
  ie_carater_inter_sus_w,
  nr_seq_protocolo_w,
  cd_pessoa_fisica_w,
  cd_categoria_parametro_w,
  ie_tipo_conv_w,
  cd_setor_atendimento_w
from  pessoa_fisica e,
  atendimento_paciente c,
  conta_paciente f,
   procedimento_paciente a,
   convenio g
where  a.nr_sequencia       = nr_sequencia_p
and  a.nr_atendimento  = c.nr_atendimento
and  c.cd_pessoa_fisica  = e.cd_pessoa_fisica
and  a.nr_interno_conta  = f.nr_interno_conta
and  a.cd_convenio       = g.cd_convenio;
exception
when others then

	begin
	select	a.nr_atendimento,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_interno_conta
	into STRICT	nr_atendimento_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_interno_conta_w
	from	procedimento_paciente a
	where 	a.nr_sequencia = nr_sequencia_p;
	
	ds_log_w := wheb_mensagem_pck.get_texto(1185769) || ds_enter_w || substr(dbms_utility.format_call_stack,1,4000);
	
	CALL grava_log_geracao_repasse(	nr_atendimento_w,
					nr_interno_conta_w,
					nr_sequencia_p,
					nr_seq_partic_p,
					cd_procedimento_w,
					ie_origem_proced_w,
					null,
					null,
					ds_log_w,
					nm_usuario_p,
					null);
	end;
	
	CALL wheb_mensagem_pck.exibir_mensagem_abort(wheb_mensagem_pck.get_texto(1185759, 'NR_SEQ_PROCEDIMENTO='||nr_sequencia_p||';NR_INTERNO_CONTA='||nr_interno_conta_w||';'));
end;

cd_setor_internacao_w  := Obter_Unidade_Atendimento(nr_atendimento_w,'IA','CS');

begin
ds_convenio_w  := substr(obter_nome_convenio(cd_convenio_w),1,40);
exception
when others then
  ds_convenio_w  := '';
end;

select  coalesce(sum(CASE WHEN b.ie_classificacao=1 THEN  0  ELSE a.vl_procedimento END ), 0),
  coalesce(sum(a.vl_medico),0),
  coalesce(sum(a.vl_anestesista),0),
  coalesce(sum(a.vl_materiais),0),
  coalesce(sum(a.vl_auxiliares),0),
  coalesce(sum(a.vl_custo_operacional),0)
into STRICT  vl_proc_princ_w,
  vl_medico_princ_w,
  vl_anestesista_princ_w,
  vl_materiais_princ_w,
  vl_auxiliares_princ_w,
  vl_custo_oper_princ_w
from  procedimento b,
  procedimento_paciente a
where  coalesce(a.cd_motivo_exc_conta::text, '') = ''
and  a.cd_procedimento  = b.cd_procedimento
and  a.ie_origem_proced  = b.ie_origem_proced
and  a.nr_seq_proc_princ  = nr_sequencia_p;

select  coalesce(sum(vl_material),0)
into STRICT  vl_mat_princ_w
from  material_atend_paciente
where  coalesce(cd_motivo_exc_conta::text, '') = ''
and  nr_seq_proc_princ  = nr_sequencia_p;

select  coalesce(sum(b.vl_participante),0)
into STRICT  vl_anestesistas_pacote_w
from  funcao_medico c,
  procedimento_participante b,
  procedimento_paciente a
where  a.nr_seq_proc_pacote  = nr_sequencia_p
and  a.nr_sequencia    = b.nr_sequencia
and  b.ie_funcao    = c.cd_funcao
and  c.IE_IND_EQUIPE_SUS  = 6;

select  coalesce(sum(b.vl_participante),0)
into STRICT  vl_anestesistas_partic_w
from  funcao_medico c,
  procedimento_participante b,
  procedimento_paciente a
where  a.nr_sequencia    = nr_sequencia_p
and  a.nr_sequencia    = b.nr_sequencia
and  b.ie_funcao    = c.cd_funcao
and  c.IE_IND_EQUIPE_SUS  = 6;

cd_empresa_ref_w  := obter_dado_atend_cat_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, cd_categoria_w, 'E');
cd_plano_w    := obter_dado_atend_cat_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, cd_categoria_w, 'P');
cd_usuario_convenio_w  := obter_dado_atend_cat_conv(nr_atendimento_w, dt_conta_w, cd_convenio_w, cd_categoria_w, 'U');
nr_seq_origem_w    := coalesce((obter_dados_categ_conv(nr_atendimento_w,'OC'))::numeric ,0);

select  max(ie_tipo_convenio)
into STRICT  ie_tipo_convenio_w
from  convenio
where  cd_convenio    = cd_convenio_p;

if (cd_equipamento_w IS NOT NULL AND cd_equipamento_w::text <> '') then
  select  nr_seq_terceiro
  into STRICT  nr_seq_terc_equip_w
  from  equipamento
  where  cd_equipamento  = cd_equipamento_w;
end if;

select  ie_classificacao,
  ds_procedimento,
  ie_alta_complexidade
into STRICT  ie_classif_proc_w,
  ds_procedimento_w,
  ie_alta_complexidade_w
from  Procedimento
where  cd_procedimento    = cd_procedimento_w
and  ie_origem_proced  = ie_origem_proced_w;

if (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') then
  select  max(cd_medico)
  into STRICT  cd_medico_prescr_w
  from  prescr_medica
  where  nr_prescricao  = nr_prescricao_w;
end if;

if (nr_cirurgia_w > 0) then
  select  max(cd_medico_cirurgiao)
  into STRICT  cd_medico_cir_w
  from  cirurgia
  where  nr_cirurgia  = nr_cirurgia_w;
end if;

select  max(cd_medico)
into STRICT  cd_medico_aux_laudo_w
from  laudo_paciente_medico b,
  laudo_paciente a
where  a.nr_seq_proc    = nr_sequencia_p
and  a.nr_sequencia    = b.nr_seq_laudo
and  b.ie_funcao_medico  = 2;

if (coalesce(cd_medico_aux_laudo_w::text, '') = '') and (nr_laudo_w IS NOT NULL AND nr_laudo_w::text <> '') then
  select  max(cd_medico)
  into STRICT  cd_medico_aux_laudo_w
  from  laudo_paciente_medico b,
    laudo_paciente a
  where  a.nr_sequencia    = nr_laudo_w
  and  a.nr_sequencia    = b.nr_seq_laudo
  and  b.ie_funcao_medico  = 2;
end if;

begin
select  cd_centro_custo,
  ds_setor_atendimento
into STRICT  cd_centro_custo_w,
  ds_setor_atendimento_w
from  setor_atendimento
where  cd_setor_atendimento = cd_setor_atendimento_w;
exception
when others then
  cd_centro_custo_w  := null;
  ds_setor_atendimento_w  := '';
end;

begin
nr_atendimento_repasse_w  := substr(obter_atendimento_rn(nr_atendimento_w,nr_sequencia_p, null, nr_atendimento_mae_w, dt_alta_w),1,50);
exception
when others then
  nr_atendimento_repasse_w  := null;
end;

begin
nm_pessoa_fisica_w    := substr(OBTER_PACIENE_RN(nr_atendimento_w,nr_sequencia_p, null, nr_atendimento_mae_w, dt_alta_w, cd_pessoa_fisica_w),1,255);
exception
when others then
  nm_pessoa_fisica_w  := '';
end;

begin
ds_tipo_atendimento_w    := substr(obter_nome_tipo_atend(ie_tipo_atendimento_p),1,100);
exception
when others then
  ds_tipo_atendimento_w  := '';
end;

begin
ds_centro_custo_w    := substr(obter_desc_centro_custo(cd_centro_custo_w),1,254);
exception
when others then
  ds_centro_custo_w  := '';
end;

begin
ds_categoria_w      := substr(OBTER_CATEGORIA_CONVENIO(cd_convenio_p,cd_categoria_parametro_w),1,255);
exception
when others then
  ds_categoria_w  := '';
end;

begin
ds_classif_atua_medico_w  := substr(obter_classif_atuacao_medico(nr_atendimento_w),1,60);
exception
when others then
  ds_classif_atua_medico_w  := '';
end;

begin
ds_via_acesso_w      := substr(obter_valor_dominio(1268, ie_via_acesso_w),1,254);
exception
when others then
  ds_via_acesso_w  := '';
end;

begin
ds_medico_resp_w    := substr(obter_nome_pessoa_fisica(cd_medico_resp_w, null),1,40);
exception
when others then
  ds_medico_resp_w  := '';
end;

begin
ds_carater_w      := substr(sus_obter_desc_carater_atend(ie_carater_inter_sus_w),1,255);
exception
when others then
  ds_carater_w  := '';
end;

if (coalesce(cd_medico_laudo_w,'X') <> 'X') then
  ds_medico_laudo_w    := substr(obter_dados_medico(cd_medico_laudo_w,'NM'),1,255);
elsif (coalesce(Obter_Medico_Laudo_Repasse(nr_sequencia_p),'X') <> 'X') then
  ds_medico_laudo_w    := substr(obter_dados_medico(Obter_Medico_Laudo_Repasse(nr_sequencia_p),'NM'),1,255);
end if;

begin
    ds_tipo_conv_w := substr(obter_valor_dominio(11,ie_tipo_conv_w),1,255);
exception
when others then
  ds_tipo_conv_w  := '';
end;

--Retorna os procedimetnos que serao processados para a geracao do repasse
for  r_c_procedimentos in c_procedimentos(nr_sequencia_p, nr_seq_partic_p, ie_repasse_audit_w) loop

  cd_usuario_original_w  := obter_dados_usuario_opcao(r_c_procedimentos.nm_usuario_original, 'C');
  nr_seq_etapa_checkup_w  := obter_etapa_checkup_proc(r_c_procedimentos.nr_seq_propaci);

  vl_participante_w  := r_c_procedimentos.vl_participante;
  vl_procedimento_w   := r_c_procedimentos.vl_procedimento;
  vl_medico_w    := r_c_procedimentos.vl_medico;
  vl_anestesista_w  := r_c_procedimentos.vl_anestesista;
  vl_materiais_w    := r_c_procedimentos.vl_materiais;
  vl_auxiliares_w    := r_c_procedimentos.vl_auxiliares;
  vl_custo_operacional_w  := r_c_procedimentos.vl_custo_operacional;

  begin
  nm_medico_executor_w  := substr(obter_nome_pf_pj(r_c_procedimentos.cd_medico_executor, null),1,100);
  exception
  when others then
    nm_medico_executor_w  := '';
  end;

  begin
  ds_funcao_medico_w  := substr(obter_funcao_medico(r_c_procedimentos.ie_funcao),1,255);
  exception
  when others then
    ds_funcao_medico_w  := '';
  end;

  begin
  nm_medico_req_w    := substr(obter_nome_pf_pj(r_c_procedimentos.cd_medico_req, null),1,100);
  exception
  when others then
    nm_medico_req_w  := '';
  end;

  ie_gera_log_w  := 'N';
  ds_log_repasse_w := '';

  begin
  if (coalesce(ie_repasse_audit_w,'S')  = 'N') then

    select  coalesce(max(OBTER_VALOR_ITEM_AUDIT(a.nr_interno_conta,a.nr_sequencia,null,'Q')),0),
      coalesce(MAX(a.qt_procedimento),0)
    into STRICT  qt_audit_w,
      qt_proced_w
    from  procedimento_paciente a
    where  a.nr_sequencia  = r_c_procedimentos.nr_seq_propaci;

    if (qt_proced_w <> 0) then
      ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794788)||ds_enter_w;
      ie_gera_log_w  := 'S';

      vl_participante_w  := dividir_sem_round((r_c_procedimentos.vl_participante * qt_audit_w),qt_proced_w);
      vl_procedimento_w   := dividir_sem_round((r_c_procedimentos.vl_procedimento * qt_audit_w),qt_proced_w);
      vl_medico_w    := dividir_sem_round((r_c_procedimentos.vl_medico * qt_audit_w),qt_proced_w);
      vl_anestesista_w  := dividir_sem_round((r_c_procedimentos.vl_anestesista * qt_audit_w),qt_proced_w);
      vl_materiais_w    := dividir_sem_round((r_c_procedimentos.vl_materiais * qt_audit_w),qt_proced_w);
      vl_auxiliares_w    := dividir_sem_round((r_c_procedimentos.vl_auxiliares * qt_audit_w),qt_proced_w);
      vl_custo_operacional_w  := dividir_sem_round((r_c_procedimentos.vl_custo_operacional * qt_audit_w),qt_proced_w);
    end if;
  end if;

  nr_seq_criterio_w  := null;
  cd_regra_w    := 0;
  vl_repasse_w    := 0;
  cd_medico_w    := coalesce(r_c_procedimentos.cd_medico_exec, cd_medico_cir_w);
  cd_medico_w    := coalesce(cd_medico_w, cd_medico_prescr_w);
  cd_medico_w    := coalesce(cd_medico_w, cd_medico_atend_p);
  cd_medico_ww    := cd_medico_w;

  select  coalesce(max(ie_conveniado), 'N')
  into STRICT  ie_med_exec_conveniado_w
  from  medico_convenio
  where  cd_pessoa_fisica  = r_c_procedimentos.cd_medico_exec
  and  cd_convenio    = cd_convenio_p;

  if (coalesce(nr_seq_criterio_p::text, '') = '') then

    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794789,'r_c_procedimentos.cd_medico_exec=' ||r_c_procedimentos.cd_medico_exec)||ds_enter_w;
    ie_gera_log_w  := 'S';
    /* ahoffelder - OS 414610 - 22/05/2012 - substitui o antigo cursor por esta procedure porque a mesma rotina precisa ser chamada em outro objeto */

    SELECT * FROM obter_regra_proc_repasse(  cd_convenio_p, cd_edicao_amb_p, cd_estabelecimento_p, cd_medico_atend_p, r_c_procedimentos.cd_medico_exec, r_c_procedimentos.cd_cgc_prestador, r_c_procedimentos.ie_funcao, r_c_procedimentos.ie_participou_sus, r_c_procedimentos.ie_responsavel_credito, ie_tipo_atendimento_p, r_c_procedimentos.ie_tipo_ato_sus, r_c_procedimentos.ie_tipo_servico_sus, nm_usuario_p, nr_seq_etapa_checkup_w, r_c_procedimentos.nr_seq_particip, r_c_procedimentos.nr_seq_propaci, cd_regra_w, nr_seq_criterio_w) INTO STRICT cd_regra_w, nr_seq_criterio_w;

  else

    cd_regra_w    := cd_regra_p;
    nr_seq_criterio_w  := nr_seq_criterio_p;

  end if;

  if  (((coalesce(vl_participante_w::text, '') = '' and coalesce(nr_seq_proc_pacote_w::text, '') = '') or coalesce(vl_procedimento_w::text, '') = '' or coalesce(vl_medico_w::text, '') = '') and (nr_seq_criterio_w IS NOT NULL AND nr_seq_criterio_w::text <> ''))  then

    CALL wheb_mensagem_pck.exibir_mensagem_abort(wheb_mensagem_pck.get_texto(1044075, 'NR_ATENDIMENTO_W='||nr_atendimento_w||';NR_INTERNO_CONTA_W='||nr_interno_conta_w||';NR_SEQUENCIA_P='||nr_sequencia_p||';'));
  end if;

  ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794224,'CD_REGRA_W=' ||cd_regra_w||';NR_SEQ_CRITERIO_W=' ||nr_seq_criterio_w)||ds_enter_w;
  ie_gera_log_w  := 'S';



  select  max(b.ie_forma_calculo),
    max(b.tx_medico),
    max(b.tx_anestesista),
    max(b.tx_materiais),
    max(b.tx_auxiliares),
    max(b.tx_custo_operacional),
    max(b.vl_repasse),
    max(b.cd_tabela_preco),
    max(b.cd_convenio_calc),
    max(b.cd_categoria_calc),
    max(a.ie_pagto),
    max(b.cd_edicao_amb_calc),
    coalesce(max(vl_limite),0),
    coalesce(max(b.ie_honorario),'N'),
    max(b.tx_procedimento),
    coalesce(max(b.ie_perc_pacote), 'N'),
    coalesce(max(b.ie_repasse_calc), 'S'),
    max(b.ie_tipo_atend_calc),
    max(b.vl_repasse),
    max(NR_SEQ_REGRA_PRIOR_REPASSE),
    max(b.vl_minimo),
    coalesce(max(b.ie_limite_qtdade),'N'),
    max(ie_campo_base_vl_repasse),
    max(a.ds_regra),
    max(b.ds_observacao),
    coalesce(max(ie_lib_laudo_proc),'N')
  into STRICT  ie_forma_calculo_w,
    tx_medico_w,
    tx_anestesista_w,
    tx_materiais_w,
    tx_auxiliares_w,
    tx_custo_operacional_w,
    vl_repasse_w,
    cd_tabela_preco_w,
    cd_convenio_calc_w,
    cd_categoria_calc_w,
    ie_forma_pagto_w,
    cd_edicao_amb_calc_w,
    vl_limite_w,
    ie_honorario_w,
    tx_procedimento_w,
    ie_perc_pacote_w,
    ie_repasse_calc_w,
    ie_tipo_atend_calc_w,
    vl_repasse_fixo_w,
    NR_SEQ_REGRA_PRIOR_REPASSE_w,
    vl_minimo_w,
    ie_limite_qtdade_w,
    ie_campo_base_vl_repasse_w,
    ds_regra_w,
    ds_observacao_criterio_w,
    ie_lib_laudo_proc_w
        from   proc_criterio_repasse b,
    regra_repasse_terceiro a
  where  b.nr_sequencia  = nr_seq_criterio_w
  and  a.cd_regra  = b.cd_regra
  and  a.cd_regra  = cd_regra_w;

  -- Edgar 13/05/2010, OS 215260, criar forma de repasse com tx sobre valores do procedimento
  vl_tx_medico_w      := vl_medico_w * (tx_medico_w / 100);
  vl_tx_anestesista_w    := vl_anestesista_w * (tx_anestesista_w / 100);
  vl_tx_materiais_w    := vl_materiais_w * (tx_materiais_w / 100);
  vl_tx_auxiliares_w    := vl_auxiliares_w * (tx_auxiliares_w / 100);
  vl_tx_custo_operacional_w  := vl_custo_operacional_w * (tx_custo_operacional_w / 100);

  ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794225,'TX_MEDICO_W=' ||TX_MEDICO_W||';TX_ANESTESISTA_W=' ||TX_ANESTESISTA_W||';TX_MATERIAIS_W='||TX_MATERIAIS_W||';TX_AUXILIARES_W='||TX_AUXILIARES_W||';TX_CUSTO_OPERACIONAL_W='||TX_CUSTO_OPERACIONAL_W||';VL_REPASSE_W='||VL_REPASSE_W||';IE_FORMA_CALCULO_W='||IE_FORMA_CALCULO_W)||ds_enter_w;
  ie_gera_log_w  := 'S';

  cd_edicao_amb_w    := cd_edicao_amb_p;

  -- Edgar 29/09/2009, OS 166824, tratar Tx procedimento sobre o valor do procedimento - valor fixo
  if (ie_forma_calculo_w = 'M') then

    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794790,'VL_PROCEDIMENTO_W=' ||VL_PROCEDIMENTO_W||';VL_REPASSE_W=' ||VL_REPASSE_W||';TX_PROCEDIMENTO_W='||TX_PROCEDIMENTO_W)||ds_enter_w;
    ie_gera_log_w  := 'S';

    vl_repasse_w  := (vl_procedimento_w - vl_repasse_w) * (tx_procedimento_w / 100);

  -- Edgar 17/03/2006 OS 30706, criei Valor fixo por unidade
  elsif (ie_forma_calculo_w = 'U') then
    if (qt_procedimento_w < 0) and (vl_repasse_w < 0) then
      ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794791)||ds_enter_w;
      ie_gera_log_w  := 'S';

      qt_procedimento_w := qt_procedimento_w * -1;
    end if;

    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794792,'QT_PROCEDIMENTO_W=' ||QT_PROCEDIMENTO_W||';VL_REPASSE_W=' ||VL_REPASSE_W)||ds_enter_w;
    ie_gera_log_w  := 'S';

    vl_repasse_w  := (qt_procedimento_w  * vl_repasse_w);

  -- Edgar 11/08/2009 OS 153090, calcular tx sobre o procedimentos e mat/med vinculados
  elsif (ie_forma_calculo_w = 'I') then

    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(795114,'VL_MEDICO_ORIG_W=' ||VL_MEDICO_ORIG_W||';VL_MEDICO_PRINC_W=' ||VL_MEDICO_PRINC_W||';VL_ANESTESISTA_ORIG_W='||VL_ANESTESISTA_ORIG_W||';VL_ANESTESISTA_PRINC_W='||VL_ANESTESISTA_PRINC_W||';VL_MATERIAIS_ORIG_W='||VL_MATERIAIS_ORIG_W||
                      ';VL_MATERIAIS_PRINC_W='||VL_MATERIAIS_PRINC_W||';VL_MAT_PRINC_W='||VL_MAT_PRINC_W||';VL_AUXILIARES_ORIG_W='||VL_AUXILIARES_ORIG_W||';VL_AUXILIARES_PRINC_W='||VL_AUXILIARES_PRINC_W||';VL_CUSTO_OPERACIONAL_ORIG_W='||VL_CUSTO_OPERACIONAL_ORIG_W||
                      ';VL_CUSTO_OPER_PRINC_W='||VL_CUSTO_OPER_PRINC_W||';VL_PROC_PRINC_W='||VL_PROC_PRINC_W)||ds_enter_w;
    ie_gera_log_w  := 'S';

    vl_repasse_w  := ((vl_medico_orig_w + vl_medico_princ_w)     * tx_medico_w / 100) +
           ((vl_anestesista_orig_w + vl_anestesista_princ_w)   * tx_anestesista_w / 100) +
           ((vl_materiais_orig_w + vl_materiais_princ_w + vl_mat_princ_w)     * tx_materiais_w / 100) +
           ((vl_auxiliares_orig_w + vl_auxiliares_princ_w)     * tx_auxiliares_w / 100) +
           ((vl_custo_operacional_orig_w + vl_custo_oper_princ_w)   * tx_custo_operacional_w / 100) +
           (vl_proc_princ_w           * tx_procedimento_w / 100);

  -- Edgar 11/08/2009 OS 153092, calcular tx sobre o procedimento menos os anestesitas
  elsif (ie_forma_calculo_w = 'J') then

    if (ie_perc_pacote_w = 'S') and (nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '') then
      select  coalesce(max(vl_procedimento),0),
        coalesce(max(vl_medico),0),
        coalesce(max(vl_anestesista),0),
        coalesce(max(vl_materiais),0),
        coalesce(max(vl_auxiliares),0),
        coalesce(max(vl_custo_operacional),0)
      into STRICT  vl_procedimento_w,
        vl_participante_w,
        vl_anestesista_w,
        vl_materiais_w,
        vl_auxiliares_w,
        vl_custo_operacional_w
      from  proc_paciente_valor
      where  nr_seq_procedimento  = r_c_procedimentos.nr_seq_propaci
      and  ie_tipo_valor    = 1;

      ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794226,'VL_PROCEDIMENTO_W=' ||VL_PROCEDIMENTO_W||';VL_PARTICIPANTE_W=' ||VL_PARTICIPANTE_W||';VL_ANESTESISTA_W='||VL_ANESTESISTA_W||';VL_MATERIAIS_W='||VL_MATERIAIS_W||';VL_AUXILIARES_W='||VL_AUXILIARES_W||';VL_CUSTO_OPERACIONAL_W='||VL_CUSTO_OPERACIONAL_W)||ds_enter_w;
      ie_gera_log_w  := 'S';
    end if;

    if (coalesce(r_c_procedimentos.nr_seq_particip,0) = 0) then
      vl_repasse_w    := ((vl_procedimento_w - vl_anestesistas_pacote_w) * tx_procedimento_w / 100);

      ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794793,'VL_PROCEDIMENTO_W=' ||VL_PROCEDIMENTO_W||';VL_ANESTESISTAS_PACOTE_W=' ||VL_ANESTESISTAS_PACOTE_W||';TX_PROCEDIMENTO_W='||TX_PROCEDIMENTO_W)||ds_enter_w;
      ie_gera_log_w  := 'S';
    end if;

  --Tabela de Precos (Mat ou Proc)
  elsif (ie_forma_calculo_w = 'T') then

    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(795115,'CD_ESTABELECIMENTO_P=' ||CD_ESTABELECIMENTO_P||';CD_TABELA_PRECO_W=' ||CD_TABELA_PRECO_W||';CD_PROCEDIMENTO_W='||CD_PROCEDIMENTO_W||';DT_CONTA_W='||DT_CONTA_W)||ds_enter_w;
    ie_gera_log_w  := 'S';

    begin
    OPEN C04;
    LOOP
    FETCH C04 into vl_tabela_w;
    EXIT WHEN NOT FOUND; /* apply on c04 */
      vl_tabela_w  := vl_tabela_w;
    END LOOP;
    CLOSE C04;

    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(795116,'VL_TABELA_W='||VL_TABELA_W)||ds_enter_w;

    if (tx_custo_operacional_w = 0) then
      vl_repasse_w  := vl_tabela_w;

      ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(795117)||ds_enter_w;
    else
      ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(795118,'VL_TABELA_W=' ||VL_TABELA_W||';TX_CUSTO_OPERACIONAL_W=' ||TX_CUSTO_OPERACIONAL_W)||ds_enter_w;

      vl_repasse_w  := ((vl_tabela_w * tx_custo_operacional_w) / 100);
    end if;
    end;

  --Calculado pelo CH do procedimento

  --Calculado pelo CH Edicao especifica

  --Calculado pelo CH Edicao especifica, valor Ch do Convenio

  --Calculado pelo CH Edicao especifica, por quantidade do procedimento

  --Tx procedimento sobre o CH Edicao especifica

  --Calculado pelo CH Edicao especifica, valor Ch do Convenio, por unidade
  elsif (ie_forma_calculo_w in ('H','E','G','Q','2','3')) then
    begin

    if (r_c_procedimentos.nr_seq_particip  = 0) then
      begin
      if (ie_forma_calculo_w  = 'H') then
        begin
        select
          coalesce(max(vl_procedimento),0),
          coalesce(max(vl_medico),0),
          coalesce(max(vl_anestesista),0),
          coalesce(max(vl_materiais),0),
          coalesce(max(vl_auxiliares),0),
          coalesce(max(vl_custo_operacional),0)
        into STRICT  vl_procedimento_w,
          vl_medico_w,
          vl_anestesista_w,
          vl_materiais_w,
          vl_auxiliares_w,
          vl_custo_operacional_w
        from  proc_paciente_valor
        where  nr_seq_procedimento  = r_c_procedimentos.nr_seq_propaci
        and  ie_tipo_valor    = 2;
        end;
      end if;

      if (ie_forma_calculo_w  in ('E','G','Q','2','3')) then
        BEGIN

        if (NR_SEQ_REGRA_PRIOR_REPASSE_w IS NOT NULL AND NR_SEQ_REGRA_PRIOR_REPASSE_w::text <> '') then

          qt_regra_w  := 0;
          open c07;
          loop
          fetch c07 into
            cd_edicao_amb_regra_w;
          EXIT WHEN NOT FOUND; /* apply on c07 */
            begin
            if (coalesce(qt_regra_w,0) = 0) then
              select  count(*)
              into STRICT  qt_regra_w
              from  preco_amb a
              where  a.cd_edicao_amb  = cd_edicao_amb_regra_w
              and  a.cd_procedimento  = cd_procedimento_w
              and  a.ie_origem_proced  = ie_origem_proced_w
              and coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  =
                  (SELECT max(coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days'))
                    from preco_amb b
                    where b.cd_edicao_amb    = cd_edicao_amb_regra_w
                    and  b.cd_procedimento    = cd_procedimento_w
                    and  b.ie_origem_proced  = ie_origem_proced_w
                    and  coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  <= dt_conta_w);
              if (coalesce(qt_regra_w,0) <> 0) then
                cd_edicao_amb_calc_w  := cd_edicao_amb_regra_w;
              end if;
            end if;
            end;
          end loop;
          close c07;
        end if;

        cd_proc_amb_w  := null;
        ie_origem_amb_w  := null;
        ie_origem_c08_w  := null;
	    qt_tem_prec_amb_w := 0;
		
        if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') and (cd_edicao_amb_calc_w IS NOT NULL AND cd_edicao_amb_calc_w::text <> '') and (ie_forma_calculo_w in ('E','Q')) then

          select  max(a.ie_origem_proced)
          into STRICT  ie_origem_amb_w
          from  edicao_amb a
          where  a.cd_edicao_amb  = cd_edicao_amb_calc_w;

          if (ie_origem_amb_w IS NOT NULL AND ie_origem_amb_w::text <> '') then

            open c08;
            Loop
            fetch c08 into
              cd_proc_amb_w,
              ie_origem_c08_w;
            EXIT WHEN NOT FOUND; /* apply on c08 */
              begin
              cd_proc_amb_w  := cd_proc_amb_w;
              ie_origem_c08_w  := ie_origem_c08_w;
              end;
            end loop;
            close c08;
          end if;

          if (coalesce(ie_origem_c08_w::text, '') = '') or (coalesce(cd_proc_amb_w::text, '') = '') then
			
			select	max(cd_procedimento),
					max(ie_origem_proced)
			into STRICT	cd_proc_amb_w,
					ie_origem_c08_w
			from	proc_interno
			where	nr_sequencia		= nr_seq_proc_interno_w;

			select count(*),
			  0,
			  coalesce(max(a.vl_medico),0),
			  coalesce(max(a.qt_porte_anestesico),0),
			  coalesce(max(a.qt_filme),0),
			  0,
			  coalesce(max(a.vl_custo_operacional),0)
			into STRICT  qt_tem_prec_amb_w,
			vl_procedimento_w,
			  vl_medico_w,
			  qt_porte_w,
			  vl_materiais_w,
			  vl_auxiliares_w,
			  vl_custo_operacional_w
			from  preco_amb a
			where  a.cd_edicao_amb  = cd_edicao_amb_calc_w
			and  a.cd_procedimento  = coalesce(cd_proc_amb_w,0)
			and  a.ie_origem_proced  = coalesce(ie_origem_c08_w,0)
			  and coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  =
				(SELECT max(coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days'))
				  from preco_amb b
				  where b.cd_edicao_amb    = cd_edicao_amb_calc_w
				  and  b.cd_procedimento    = coalesce(cd_proc_amb_w,0)
				  and  b.ie_origem_proced  = coalesce(ie_origem_c08_w,0)
				  and  coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  <= dt_conta_w);
				
			if qt_tem_prec_amb_w = 0 then
			 	cd_proc_amb_w := null;
				ie_origem_c08_w := null;			
			end if;
          end if;
        end if;

        if qt_tem_prec_amb_w = 0 then
			select
			  0,
			  coalesce(max(a.vl_medico),0),
			  coalesce(max(a.qt_porte_anestesico),0),
			  coalesce(max(a.qt_filme),0),
			  0,
			  coalesce(max(a.vl_custo_operacional),0)
			into STRICT  vl_procedimento_w,
			  vl_medico_w,
			  qt_porte_w,
			  vl_materiais_w,
			  vl_auxiliares_w,
			  vl_custo_operacional_w
			from  preco_amb a
			where  a.cd_edicao_amb  = cd_edicao_amb_calc_w
			and  a.cd_procedimento  = coalesce(cd_proc_amb_w,cd_procedimento_w)
			and  a.ie_origem_proced  = coalesce(ie_origem_c08_w,ie_origem_proced_w)
			  and coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  =
				(SELECT max(coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days'))
				  from preco_amb b
				  where b.cd_edicao_amb    = cd_edicao_amb_calc_w
				  and  b.cd_procedimento    = coalesce(cd_proc_amb_w,cd_procedimento_w)
				  and  b.ie_origem_proced  = coalesce(ie_origem_c08_w,ie_origem_proced_w)
				  and  coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  <= dt_conta_w);
        end if;

        select coalesce(max(a.vl_porte_anestesico),0)
        into STRICT   vl_anestesista_w
        from   porte_anestesico a
        where   a.cd_edicao_amb    = cd_edicao_amb_calc_w
        and   a.nr_porte_anestesico  = qt_porte_w
        and   a.dt_inicio_vigencia  =
           (SELECT coalesce(max(b.dt_inicio_vigencia),clock_timestamp())
            from  porte_anestesico b
            where  b.cd_edicao_amb     = cd_edicao_amb_calc_w
            and  b.nr_porte_anestesico  = qt_porte_w);

        if (ie_forma_calculo_w in ('G','3')) then

          begin

          if (vl_medico_w = 0) then
            select
              coalesce(max(vl_procedimento),0),
              coalesce(max(vl_medico),0),
              coalesce(max(vl_anestesista),0),
              coalesce(max(vl_materiais),0),
              coalesce(max(vl_auxiliares),0),
              coalesce(max(vl_custo_operacional),0)
            into STRICT  vl_procedimento_w,
              vl_medico_w,
              vl_anestesista_w,
              vl_materiais_w,
              vl_auxiliares_w,
              vl_custo_operacional_w
            from  proc_paciente_valor
            where  nr_seq_procedimento  = r_c_procedimentos.nr_seq_propaci
            and  ie_tipo_valor    = 2;

          end if;

          SELECT   CASE WHEN coalesce(VL_CH_HONORARIOS::text, '') = '' THEN 1 WHEN VL_CH_HONORARIOS=0 THEN 1  ELSE VL_CH_HONORARIOS END ,
                   CASE WHEN coalesce(VL_CH_CUSTO_OPER::text, '') = '' THEN 1 WHEN VL_CH_CUSTO_OPER=0 THEN 1  ELSE VL_CH_CUSTO_OPER END ,
                   coalesce(VL_FILME,0),
            coalesce(TX_AJUSTE_GERAL, 1),
            ie_prioridade
          into STRICT  VL_CH_HONORARIOS_w,
            VL_CH_CUSTO_OPER_w,
            VL_FILME_w,
            TX_AJUSTE_GERAL_w,
            ie_prioridade_w
          FROM  CONVENIO_AMB a
          WHERE (CD_ESTABELECIMENTO     = CD_ESTABELECIMENTO_P)
          AND (CD_CONVENIO            = CD_CONVENIO_P)
          AND (CD_CATEGORIA           = cd_categoria_w)
          and  cd_edicao_amb  = cd_edicao_amb_p
          AND (coalesce(IE_SITUACAO,'A')  = 'A')
          and exists (SELECT 1 from preco_amb b
              where  b.cd_edicao_amb    = a.cd_edicao_amb
              and  b.cd_procedimento  = cd_procedimento_w
              and  b.ie_origem_proced  = ie_origem_proced_w)
          AND   (DT_INICIO_VIGENCIA     =
                  (SELECT MAX(DT_INICIO_VIGENCIA)
                   FROM   CONVENIO_AMB c
                   WHERE (c.CD_ESTABELECIMENTO  = cd_estabelecimento_p)
                  AND (c.CD_CONVENIO         = CD_CONVENIO_P)
                  AND (c.CD_CATEGORIA        = cd_categoria_w)
            AND (coalesce(c.IE_SITUACAO,'A')= 'A')
                  AND (c.DT_INICIO_VIGENCIA <=  DT_CONTA_W)))
          and   (coalesce(ie_prioridade,0) =
                  (SELECT coalesce(Min(ie_prioridade),0)
                   FROM   CONVENIO_AMB c
                   WHERE (c.CD_ESTABELECIMENTO  = cd_estabelecimento_p)
                  AND (c.CD_CONVENIO         = CD_CONVENIO_P)
                  AND (c.CD_CATEGORIA        = cd_categoria_w)
            AND (coalesce(c.IE_SITUACAO,'A')= 'A')
                  AND (c.DT_INICIO_VIGENCIA <=  DT_CONTA_W)))
          order by ie_prioridade;


          exception
            when   others then
            begin

            TX_AJUSTE_GERAL_w := 0;
            VL_CH_CUSTO_OPER_w  := 0;
            VL_CH_HONORARIOS_w  := 0;
            VL_FILME_w := 0;

            end;
          end;

        end if;

        END;
      end if;

      if (ie_forma_calculo_w in ('G','3')) then
        begin
        if (ie_forma_calculo_w = 'G') then
          vl_repasse_w  :=
            ((((coalesce(vl_medico_w,0) * VL_CH_HONORARIOS_w) * TX_AJUSTE_GERAL_w) * tx_medico_w)/100) +
            (((coalesce(vl_anestesista_w,0)* TX_AJUSTE_GERAL_w) * tx_anestesista_w)/100) +
            (((coalesce(vl_materiais_w,0)* TX_AJUSTE_GERAL_w) * tx_materiais_w)/100) +
            (((coalesce(vl_auxiliares_w,0)* TX_AJUSTE_GERAL_w) * tx_auxiliares_w)/100) +
            ((((coalesce(vl_custo_operacional_w,0)* TX_AJUSTE_GERAL_w) *VL_CH_CUSTO_OPER_w) * tx_custo_operacional_w)/100);
        else
          vl_repasse_w  :=
            ((((coalesce(vl_medico_w,0) * VL_CH_HONORARIOS_w) * qt_procedimento_w) * tx_medico_w)/100) +
            (((coalesce(vl_anestesista_w,0)* TX_AJUSTE_GERAL_w) * tx_anestesista_w)/100) +
            (((coalesce(vl_materiais_w,0)* TX_AJUSTE_GERAL_w) * tx_materiais_w)/100) +
            (((coalesce(vl_auxiliares_w,0)* TX_AJUSTE_GERAL_w) * tx_auxiliares_w)/100) +
            ((((coalesce(vl_custo_operacional_w,0)* TX_AJUSTE_GERAL_w) *VL_CH_CUSTO_OPER_w) * tx_custo_operacional_w)/100);
        end if;
        end;
      elsif (ie_forma_calculo_w = 'Q') then

        vl_repasse_w  :=
          ((coalesce(vl_medico_w,0) * tx_medico_w / 100) +
          (coalesce(vl_anestesista_w,0) * tx_anestesista_w / 100) +
          (coalesce(vl_materiais_w,0) * tx_materiais_w / 100) +
          (coalesce(vl_auxiliares_w,0) * tx_auxiliares_w / 100) +
          (coalesce(vl_custo_operacional_w,0) * tx_custo_operacional_w / 100)) * qt_procedimento_w;

      else

        vl_repasse_w  :=
          (coalesce(vl_medico_w,0) * tx_medico_w / 100) +
          (coalesce(vl_anestesista_w,0) * tx_anestesista_w / 100) +
          (coalesce(vl_materiais_w,0) * tx_materiais_w / 100) +
          (coalesce(vl_auxiliares_w,0) * tx_auxiliares_w / 100) +
          (coalesce(vl_custo_operacional_w,0) * tx_custo_operacional_w / 100);
      end if;

      end;
    else  begin

      if (ie_forma_calculo_w  = 'H') then
        begin
        select 0,
           (coalesce(max(a.vl_medico),0) * coalesce(max(b.pr_procedimento),0)),
           0, 0, 0, 0
        into STRICT  vl_procedimento_w,
          vl_medico_w,
          vl_anestesista_w,
          vl_materiais_w,
          vl_auxiliares_w,
          vl_custo_operacional_w
        from  procedimento_participante b,
          proc_paciente_valor a
        where  a.nr_seq_procedimento  = b.nr_sequencia
        and  b.nr_sequencia    = r_c_procedimentos.nr_seq_propaci
        and  b.nr_seq_partic    = r_c_procedimentos.nr_seq_particip
        and  a.ie_tipo_valor    = 2;
        end;
      end if;


      if (ie_forma_calculo_w  in ('E','G', 'Q', '2','3')) then
        BEGIN

        if (NR_SEQ_REGRA_PRIOR_REPASSE_w IS NOT NULL AND NR_SEQ_REGRA_PRIOR_REPASSE_w::text <> '') then
          qt_regra_w  := 0;
          open c07;
          loop
          fetch c07 into
            cd_edicao_amb_regra_w;
          EXIT WHEN NOT FOUND; /* apply on c07 */
            begin
            if (coalesce(qt_regra_w,0) = 0) then
              select  count(*)
              into STRICT  qt_regra_w
              from  preco_amb a
              where  a.cd_edicao_amb  = cd_edicao_amb_regra_w
              and  a.cd_procedimento  = cd_procedimento_w
              and  a.ie_origem_proced  = ie_origem_proced_w
              and coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  =
                  (SELECT max(coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days'))
                    from preco_amb b
                    where b.cd_edicao_amb    = cd_edicao_amb_regra_w
                    and  b.cd_procedimento    = cd_procedimento_w
                    and  b.ie_origem_proced  = ie_origem_proced_w
                    and  coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  <= dt_conta_w);
              if (coalesce(qt_regra_w,0) <> 0) then
                cd_edicao_amb_calc_w  := cd_edicao_amb_regra_w;
              end if;
            end if;
            end;
          end loop;
          close c07;
        end if;

        cd_proc_amb_w  := null;
        ie_origem_amb_w  := null;
        ie_origem_c08_w  := null;

        if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') and (cd_edicao_amb_calc_w IS NOT NULL AND cd_edicao_amb_calc_w::text <> '') and (ie_forma_calculo_w in ('E','Q')) then

          select  max(a.ie_origem_proced)
          into STRICT  ie_origem_amb_w
          from  edicao_amb a
          where  a.cd_edicao_amb  = cd_edicao_amb_calc_w;

          if (ie_origem_amb_w IS NOT NULL AND ie_origem_amb_w::text <> '') then
            open c08;
            Loop
            fetch c08 into
              cd_proc_amb_w,
              ie_origem_c08_w;
            EXIT WHEN NOT FOUND; /* apply on c08 */
              begin
              cd_proc_amb_w  := cd_proc_amb_w;
              ie_origem_c08_w  := ie_origem_c08_w;
              end;
            end loop;
            close c08;
          end if;

          if (coalesce(ie_origem_c08_w::text, '') = '') or (coalesce(cd_proc_amb_w::text, '') = '') then
            select	max(cd_procedimento),
					max(ie_origem_proced)
			into STRICT	cd_proc_amb_w,
					ie_origem_c08_w
			from	proc_interno
			where	nr_sequencia		= nr_seq_proc_interno_w;
          end if;
        end if;

        begin
        select coalesce(max(a.vl_medico),0)
        into STRICT   vl_medico_w
        from   preco_amb a
        where   a.cd_edicao_amb  = cd_edicao_amb_calc_w
        and   a.cd_procedimento  = coalesce(cd_proc_amb_w,cd_procedimento_w)
        and   a.ie_origem_proced  = coalesce(ie_origem_c08_w,ie_origem_proced_w)
          and coalesce(a.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  =
            (SELECT max(coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days'))
              from preco_amb b
              where b.cd_edicao_amb    = cd_edicao_amb_calc_w
              and  b.cd_procedimento    = coalesce(cd_proc_amb_w,cd_procedimento_w)
              and  b.ie_origem_proced  = coalesce(ie_origem_c08_w,ie_origem_proced_w)
              and  coalesce(b.dt_inicio_vigencia,clock_timestamp() - interval '3650 days')  <= dt_conta_w);

        end;

        select coalesce(max(a.vl_porte_anestesico),0)
        into STRICT   vl_anestesista_w
        from   porte_anestesico a
        where   a.cd_edicao_amb  = cd_edicao_amb_calc_w
        and   a.nr_porte_anestesico  = qt_porte_w
        and   a.dt_inicio_vigencia  =
           (SELECT coalesce(max(b.dt_inicio_vigencia),clock_timestamp())
            from  porte_anestesico b
            where  b.cd_edicao_amb   = cd_edicao_amb_calc_w
            and  b.nr_porte_anestesico  = qt_porte_w);


        if (ie_forma_calculo_w in ('G','3')) then

          if (vl_medico_w = 0) then
            select
              coalesce(max(vl_medico),0)
            into STRICT  vl_medico_w
            from  proc_paciente_valor
            where  nr_seq_procedimento  = r_c_procedimentos.nr_seq_propaci
            and  ie_tipo_valor    = 2;
          end if;

          begin

          select   CASE WHEN coalesce(vl_ch_honorarios::text, '') = '' THEN 1 WHEN vl_ch_honorarios=0 THEN 1  ELSE vl_ch_honorarios END ,
            coalesce(tx_ajuste_geral, 1),
            ie_prioridade
          into STRICT  vl_ch_honorarios_w,
            tx_ajuste_geral_w,
            ie_prioridade_w
          from  convenio_amb a
          where (cd_estabelecimento     = cd_estabelecimento_p)
          and (cd_convenio            = cd_convenio_p)
          and (cd_categoria           = cd_categoria_w)
          and  cd_edicao_amb  = cd_edicao_amb_p
          and (coalesce(ie_situacao,'A')  = 'A')
          and exists (SELECT 1 from preco_amb b
              where  b.cd_edicao_amb    = a.cd_edicao_amb
              and  b.cd_procedimento  = cd_procedimento_w
              and  b.ie_origem_proced  = ie_origem_proced_w)
          and   (dt_inicio_vigencia     =
                  (select max(dt_inicio_vigencia)
                   from   convenio_amb c
                   where (c.cd_estabelecimento  = cd_estabelecimento_p)
                  and (c.cd_convenio         = cd_convenio_p)
                  and (c.cd_categoria        = cd_categoria_w)
            and (coalesce(c.ie_situacao,'A')= 'A')
                  and (c.dt_inicio_vigencia <=  dt_conta_w)))
          and   (coalesce(ie_prioridade,0) =
                  (select coalesce(min(ie_prioridade),0)
                   from   convenio_amb c
                   where (c.cd_estabelecimento  = cd_estabelecimento_p)
                  and (c.cd_convenio         = cd_convenio_p)
                  and (c.cd_categoria        = cd_categoria_w)
            and (coalesce(c.ie_situacao,'A')= 'A')
                  and (c.dt_inicio_vigencia <=  dt_conta_w)))
          order by ie_prioridade;


          exception
            when   others then
            begin

            tx_ajuste_geral_w := 0;
            vl_ch_custo_oper_w  := 0;
            vl_ch_honorarios_w  := 0;
            vl_filme_w := 0;

            end;
          end;
        end if;

        begin
        select 0,
           (vl_medico_w * coalesce(coalesce(max(b.pr_procedimento),0), (coalesce(max(b.pr_faturar),0)/100))),
           vl_anestesista_w, 0, 0, 0
        into STRICT  vl_procedimento_w,
          vl_medico_w,
          vl_anestesista_w,
          vl_materiais_w,
          vl_auxiliares_w,
          vl_custo_operacional_w
        from  procedimento_participante b
        where  b.nr_sequencia    = r_c_procedimentos.nr_seq_propaci
        and  b.nr_seq_partic    = r_c_procedimentos.nr_seq_particip;



        end;

        END;
      end if;


      if (ie_forma_calculo_w  in ('G','3')) then
        begin
        if (ie_forma_calculo_w = 'G') then
          vl_repasse_w  :=  ((((coalesce(vl_medico_w,0) * VL_CH_HONORARIOS_w) * TX_AJUSTE_GERAL_w) * tx_medico_w)/100);
        else
          vl_repasse_w  :=  ((((coalesce(vl_medico_w,0) * VL_CH_HONORARIOS_w) * qt_procedimento_w) * tx_medico_w)/100);
        end if;
        end;

      elsif (ie_forma_calculo_w = 'Q') then

        vl_repasse_w  :=
          ((coalesce(vl_medico_w,0) * tx_medico_w / 100) +
          (coalesce(vl_anestesista_w,0) * tx_anestesista_w / 100) +
          (coalesce(vl_materiais_w,0) * tx_materiais_w / 100) +
          (coalesce(vl_auxiliares_w,0) * tx_auxiliares_w / 100) +
          (coalesce(vl_custo_operacional_w,0) * tx_custo_operacional_w / 100)) * qt_procedimento_w;
      else
        vl_repasse_w  :=
          (coalesce(vl_medico_w,0) * tx_medico_w / 100) +
          (coalesce(vl_anestesista_w,0) * tx_anestesista_w / 100) +
          (coalesce(vl_materiais_w,0) * tx_materiais_w / 100) +
          (coalesce(vl_auxiliares_w,0) * tx_auxiliares_w / 100) +
          (coalesce(vl_custo_operacional_w,0) * tx_custo_operacional_w / 100);

      end if;

      end;
    end if;



    if (qt_procedimento_w  < 0) and (ie_forma_calculo_w  not in ('Q','3')) then
      vl_repasse_w  := vl_repasse_w * qt_procedimento_w;
    end if;

    if (ie_forma_calculo_w = '2') then
      vl_repasse_w  := coalesce(vl_repasse_w,0) * (coalesce(r_c_procedimentos.tx_procedimento,0)/100);
      if (qt_procedimento_w  < 0) then
        vl_repasse_w := (vl_repasse_w * -1);
      end if;
    end if;
    end;

  --Tabela de um convenio

  --Tabela de um convenio por unidade executada

  --Tx procedimento sobre a tabela de um convenio por un. executada.
  elsif (ie_forma_calculo_w in ('C', 'A', '1')) then

    if (ie_tipo_convenio_w = 3) then
      -- Edgar 14/09/2009, OS 164251, copiado o fonte abaixo da SUS_ATUALIZA_VALOR_PROC
      SELECT * FROM Sus_Define_Preco_Proced(dt_procedimento_w, cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_p, coalesce(ie_tipo_atend_calc_w, ie_tipo_atendimento_p), vl_sa_w, vl_sh_w, vl_sp_w, vl_sadt_w, vl_total_hospitalar_w, vl_total_amb_w, qt_pontos_ato_w, vl_honorario_medico_w, vl_matmed_w, vl_anestesista_w, dt_procedimento_w) INTO STRICT vl_sa_w, vl_sh_w, vl_sp_w, vl_sadt_w, vl_total_hospitalar_w, vl_total_amb_w, qt_pontos_ato_w, vl_honorario_medico_w, vl_matmed_w, vl_anestesista_w, dt_procedimento_w;
      if (coalesce(ie_tipo_atend_calc_w, ie_tipo_atendimento_p)  = 1) then
        vl_procedimento_w  := vl_sh_w + vl_sp_w + vl_sadt_w;
        vl_anestesista_w  := 0;
      else
        vl_sadt_w    := (vl_total_amb_w - (vl_honorario_medico_w + vl_matmed_w + vl_anestesista_w));
        if (vl_sadt_w < 0) then
          vl_sadt_w  := 0;
        end if;
        vl_sp_w      := vl_honorario_medico_w;
        vl_sh_w      := vl_matmed_w;
        vl_procedimento_w  := vl_total_amb_w;
      end if;
      if (coalesce(tx_custo_operacional_w,0) > 0) then
        vl_repasse_w  := (coalesce(vl_participante_w,0) * tx_medico_w / 100) +
               (coalesce(vl_anestesista_w,0) * tx_anestesista_w / 100) +
               (coalesce(vl_materiais_w,0) * tx_materiais_w / 100) +
               (coalesce(vl_auxiliares_w,0) * tx_auxiliares_w / 100) +
               (coalesce(vl_custo_operacional_w,0) * tx_custo_operacional_w / 100);
      else
        vl_repasse_w  := (coalesce(vl_procedimento_w,0) * tx_procedimento_w / 100);
      end if;
      -- Edgar 14/09/2009, OS 164251, fim alteracao
    else

      if (ie_classif_proc_w = 1) then
        begin
        SELECT * FROM define_preco_procedimento(
          cd_estabelecimento_p, cd_convenio_calc_w, cd_categoria_calc_w, dt_conta_w, cd_procedimento_w, cd_tipo_acomodacao_w, ie_tipo_atendimento_p, cd_setor_w, r_c_procedimentos.cd_medico_exec, null, qt_idade_w, null, null, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, ie_sexo_w, vl_procedimento_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w, 0, ie_atend_retorno_w, 0, null, null, NULL, NULL, null, null, null, null, null, null, null, null, r_c_procedimentos.nr_seq_grupo_rec, null, nr_seq_origem_w, nr_seq_classif_medico_w, null) INTO STRICT vl_procedimento_w, vl_custo_operacional_w, vl_anestesista_w, vl_medico_w, vl_auxiliares_w, vl_materiais_w, vl_pto_procedimento_w, vl_pto_custo_operac_w, vl_pto_anestesista_w, vl_pto_medico_w, vl_pto_auxiliares_w, vl_pto_materiais_w, qt_porte_anestesico_w, qt_pontos_w, cd_edicao_amb_w, ie_preco_informado_w, nr_seq_ajuste_proc_w;

        if (coalesce(tx_procedimento_w, 0) <> 0) then
          vl_repasse_w  := (coalesce(vl_procedimento_w,0) * tx_procedimento_w / 100);
        else
          vl_repasse_w  :=
            (coalesce(vl_medico_w,0) * tx_medico_w / 100) +
            (coalesce(vl_anestesista_w,0) * tx_anestesista_w / 100) +
            (coalesce(vl_materiais_w,0) * tx_materiais_w / 100) +
            (coalesce(vl_auxiliares_w,0) * tx_auxiliares_w / 100) +
            (coalesce(vl_custo_operacional_w,0) * tx_custo_operacional_w / 100);
        end if;
        end;
      elsif (ie_classif_proc_w in ('2','3')) then
        begin
        SELECT * FROM define_preco_servico(
            cd_estabelecimento_p, cd_convenio_calc_w, cd_categoria_calc_w, dt_conta_w, cd_procedimento_w, cd_setor_w, ie_tipo_atendimento_p, cd_tipo_acomodacao_w, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, ie_sexo_w, vl_tabela_w, nr_seq_ajuste_proc_w, ie_atend_retorno_w, 0, null, nr_seq_proc_interno_w, null, null, null, null, null, null, r_c_procedimentos.nr_seq_grupo_rec, nr_seq_origem_w, r_c_procedimentos.cd_medico_exec, nr_seq_classif_medico_w) INTO STRICT vl_tabela_w, nr_seq_ajuste_proc_w;
        if (tx_custo_operacional_w = 0) then
          vl_repasse_w  := vl_tabela_w;
        else
          vl_repasse_w  := ((vl_tabela_w * tx_custo_operacional_w) / 100);
        end if;
        end;
      end if;
    end if;
    if  (ie_forma_calculo_w = 'A') then    -- Edgar 06/01/2010 OS 185340, criada nova forma de calculo 'A' - "Tabela de um convenio por unidade executada"
      vl_repasse_w    := vl_repasse_w * qt_procedimento_w;
    elsif (ie_forma_calculo_w  = '1') then  -- Gerar valor do repasse com base na taxa lancada no procedimento na conta paciente.
      vl_repasse_w  := coalesce(vl_repasse_w,0) * (coalesce(r_c_procedimentos.tx_procedimento,0)/100);
      if (qt_procedimento_w  < 0) then
        vl_repasse_w  := (vl_repasse_w * -1);
      end if;
    end if;

  --Percentual sobre o valor Faturado
  elsif (ie_forma_calculo_w = 'P') then
    begin

    -- Edgar 03/08/2007, a pedido do Marcus, criado parametro para ver se deve gerar repasse baseado no valor original do proc

    -- Solicitacao do Evandro do Pro-Cardiaco
    if (ie_perc_pacote_w = 'S') and (nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '') then
      select  coalesce(max(vl_procedimento),0),
        coalesce(max(vl_medico),0),
        coalesce(max(vl_anestesista),0),
        coalesce(max(vl_materiais),0),
        coalesce(max(vl_auxiliares),0),
        coalesce(max(vl_custo_operacional),0)
      into STRICT  vl_procedimento_w,
        vl_participante_w,
        vl_anestesista_w,
        vl_materiais_w,
        vl_auxiliares_w,
        vl_custo_operacional_w
      from  proc_paciente_valor
      where  nr_seq_procedimento  = r_c_procedimentos.nr_seq_propaci
      and  ie_tipo_valor    = 1;

      ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794226,'VL_PROCEDIMENTO_W=' ||VL_PROCEDIMENTO_W||';VL_PARTICIPANTE_W=' ||VL_PARTICIPANTE_W||';VL_ANESTESISTA_W='||VL_ANESTESISTA_W||';VL_MATERIAIS_W='||VL_MATERIAIS_W||';VL_AUXILIARES_W='||VL_AUXILIARES_W||';VL_CUSTO_OPERACIONAL_W='||VL_CUSTO_OPERACIONAL_W)||ds_enter_w;
      ie_gera_log_w  := 'S';

    end if;

    if (coalesce(tx_procedimento_w,0) = 0) then

      if (coalesce(ie_gerar_repasse_sh_diaria_w,'S') = 'S') and (vl_custo_operacional_w = 0) and (tx_custo_operacional_w <> 0) and (vl_procedimento_w  <> 0) and (ie_classif_proc_w in ('2','3')) then
        vl_custo_operacional_w  := vl_procedimento_w;

        ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794227)||ds_enter_w;
        ie_gera_log_w  := 'S';
      end if;

      vl_repasse_w  :=
        (vl_participante_w * tx_medico_w / 100) +
        (vl_anestesista_w * tx_anestesista_w / 100) +
        (vl_materiais_w * tx_materiais_w / 100) +
        (vl_auxiliares_w * tx_auxiliares_w / 100) +
        (vl_custo_operacional_w * tx_custo_operacional_w / 100);
    else
      vl_repasse_w  := (vl_procedimento_w * tx_procedimento_w / 100); -- Edgar 29/06/2007, OS 61096, gerar repasse p/ vl_procedimento
    end if;

    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794228,'VL_PROCEDIMENTO_W=' ||VL_PROCEDIMENTO_W||';VL_PARTICIPANTE_W=' ||VL_PARTICIPANTE_W||';VL_ANESTESISTA_W='||VL_ANESTESISTA_W||';VL_MATERIAIS_W='||VL_MATERIAIS_W||';VL_AUXILIARES_W='||VL_AUXILIARES_W||';VL_CUSTO_OPERACIONAL_W='||VL_CUSTO_OPERACIONAL_W)||ds_enter_w;
    ie_gera_log_w  := 'S';
    end;
  -- Edgar 09/02/2010, OS 184749, tratar valor com base nos participantes anestesistas
  elsif (ie_forma_calculo_w = 'N') then
    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(795119,'VL_ANESTESISTAS_PARTIC_W=' ||VL_ANESTESISTAS_PARTIC_W||';TX_ANESTESISTA_W=' ||TX_ANESTESISTA_W)||ds_enter_w;

    vl_repasse_w    := (vl_anestesistas_partic_w * tx_anestesista_w / 100);

  --Calculado pelo SP do procedimento SUS
  elsif (ie_forma_calculo_w  = 'S') then
    select  0,
      coalesce(max(vl_sp_unif),0),
      0, 0, 0, 0
    into STRICT  vl_procedimento_w,
      vl_medico_w,
      vl_anestesista_w,
      vl_materiais_w,
      vl_auxiliares_w,
      vl_custo_operacional_w
    from  sus_valor_proc_paciente
    where  nr_sequencia  = r_c_procedimentos.nr_seq_propaci;

    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(795120,'VL_MEDICO_W=' ||VL_MEDICO_W)||ds_enter_w;
    ie_gera_log_w  := 'S';
    vl_repasse_w    := (vl_medico_w * tx_medico_w / 100);

  --Calculado pelo SP Rat do procedimento SUS
  elsif (ie_forma_calculo_w  = 'B') then
    ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(795121,'VL_SP_RAT_W=' ||VL_SP_RAT_W)||ds_enter_w;

    vl_repasse_w    := (vl_sp_rat_w * tx_medico_w / 100);

  --SP Rat + Percentual do SP do procedimento
  elsif (ie_forma_calculo_w  = 'X') then

    vl_repasse_w    := coalesce(vl_sp_rat_w,0) + coalesce((vl_sus_sp_w * tx_medico_w / 100),0);

  --SP + Percentual do SP Rat do procedimento
  elsif (ie_forma_calculo_w  = 'Y') then

    vl_repasse_w    := coalesce(vl_sus_sp_w,0) + coalesce((vl_sp_rat_w * tx_medico_w / 100),0);

  --Percentual sobre o valor do procedimento principal ao qual o procedimento/material esta vinculado
  elsif (ie_forma_calculo_w  = 'F') then
    select  coalesce(max(a.vl_procedimento),0)
    into STRICT  vl_procedimento_w
    from  procedimento_paciente a
    where  a.nr_sequencia  = nr_seq_proc_princ_w;

    vl_repasse_w  := (coalesce(vl_procedimento_w,0) * coalesce(tx_procedimento_w,0)) / 100;

  --Percentual sobre o valor do procedimento
  elsif (ie_forma_calculo_w  = 'K') then
    vl_repasse_w  := (coalesce(vl_procedimento_orig_w,0) * coalesce(tx_procedimento_w,0)) / 100;

  --Percentual sobre o valor unitario faturado
  elsif (ie_forma_calculo_w  = 'Z') then

    if (qt_procedimento_w < 0) then
      qt_procedimento_w := qt_procedimento_w * -1;
    end if;

    vl_repasse_w  := (((dividir_sem_round(coalesce(vl_procedimento_orig_w,0),qt_procedimento_w)) * coalesce(tx_procedimento_w,0)) / 100) +
      (((dividir_sem_round(coalesce(vl_medico_orig_w,0),qt_procedimento_w)) * coalesce(tx_medico_w,0)) / 100) +
      (((dividir_sem_round(coalesce(vl_anestesista_orig_w,0),qt_procedimento_w)) * coalesce(tx_anestesista_w,0)) / 100) +
      (((dividir_sem_round(coalesce(vl_materiais_orig_w,0),qt_procedimento_w)) * coalesce(tx_materiais_w,0)) / 100) +
      (((dividir_sem_round(coalesce(vl_auxiliares_orig_w,0),qt_procedimento_w)) * coalesce(tx_auxiliares_w,0)) / 100) +
      (((dividir_sem_round(coalesce(vl_custo_operacional_orig_w,0),qt_procedimento_w)) * coalesce(tx_custo_operacional_w,0)) / 100);

  --Regra especial
  elsif (ie_forma_calculo_w = 'R') then
    vl_repasse_w  := obter_vl_repasse_adic(nr_seq_criterio_w, r_c_procedimentos.nr_seq_propaci);

  --Percentual + Valor fixo
  elsif (ie_forma_calculo_w = 'W') then

    if (coalesce(tx_procedimento_w,0) = 0) then
      vl_repasse_w  :=
        (vl_participante_w * tx_medico_w / 100) +
        (vl_anestesista_w * tx_anestesista_w / 100) +
        (vl_materiais_w * tx_materiais_w / 100) +
        (vl_auxiliares_w * tx_auxiliares_w / 100) +
        (vl_custo_operacional_w * tx_custo_operacional_w / 100);
    else
      vl_repasse_w  := (vl_procedimento_w * tx_procedimento_w / 100);
    end if;

    vl_repasse_w    := vl_repasse_w + coalesce(vl_repasse_fixo_w,0);

  --Valor fixo
  elsif (ie_forma_calculo_w = 'V') then
    if (qt_procedimento_w < 0) and (vl_repasse_w  > 0) then
      vl_repasse_w  := vl_repasse_w * -1;
    end if;

  --Percentual sobre o valor total dos medicos
  elsif (ie_forma_calculo_w = '4') then
    select  coalesce(sum(a.vl_medico),0)
    into STRICT  vl_medico_tot_w
    from  procedimento_paciente a
    where  nr_sequencia  = r_c_procedimentos.nr_seq_propaci;

    select  coalesce(sum(a.vl_participante),0)
    into STRICT  vl_partic_tot_w
    from  procedimento_participante a
    where  nr_sequencia  = r_c_procedimentos.nr_seq_propaci;

    vl_repasse_w  := vl_medico_tot_w + vl_partic_tot_w;
    vl_repasse_w  := (vl_repasse_w * (tx_medico_w/100));

  --  Percentual sobre o valor faturado (sem Coparticipacao/Descontos)
  elsif (ie_forma_calculo_w = '12') then
    select  sum(coalesce(a.vl_rateio, 0))
    into STRICT  vl_rateio_w
    from  conta_pac_ded_conv_item a
    where  a.nr_seq_propaci_origem = r_c_procedimentos.nr_seq_propaci;

    vl_repasse_w  := coalesce(vl_rateio_w,0) + vl_procedimento_w;
    vl_repasse_w  := (vl_repasse_w * (coalesce(tx_procedimento_w,0)/100));

  end if;

  if (cd_regra_w > 0) then
    begin

    update  procedimento_paciente
    set  vl_repasse_calc	 = NULL
    where  nr_sequencia		= nr_sequencia_p;

    select  nr_seq_trans_fin_prod,
      NR_SEQ_TRANS_FIN_REP_MAIOR
    into STRICT  nr_seq_trans_fin_w,
      NR_SEQ_TRANS_FIN_REP_MAIOR_w
    from  regra_repasse_terceiro
    where  cd_regra  = cd_regra_w;

    begin
    ds_transacao_w  := substr(obter_desc_trans_financ(nr_seq_trans_fin_w),1,100);
    exception
    when others then
      ds_transacao_w  := '';
    end;

    /* Rotina incluida por Marcus em 15/04/2005 OS15510 */

    if (vl_limite_w > 0) and (vl_limite_w < vl_repasse_w) then
      vl_repasse_w  := vl_limite_w;
      if (ie_limite_qtdade_w = 'S') then
        vl_repasse_w  := vl_repasse_w * coalesce(qt_procedimento_w,1);
      end if;
    elsif (vl_minimo_w IS NOT NULL AND vl_minimo_w::text <> '') and (vl_minimo_w > vl_repasse_w) then
      vl_repasse_w  := vl_minimo_w;
    end if;

    vl_repassar_w    := vl_repasse_w;

    select  max(nr_seq_categoria)
    into STRICT  nr_seq_categoria_w
    from  medico
    where  cd_pessoa_fisica  = r_c_procedimentos.cd_medico_exec;

    ie_forma_pagto_terc_w  := ie_forma_pagto_w;

    --abre cursor c_forma_repasse
    for  r_c_forma_repasse in c_forma_repasse(cd_regra_w, r_c_procedimentos.ie_funcao, nr_seq_categoria_w, cd_medico_ww, dt_conta_w) loop
      begin

      nr_seq_terceiro_w := null;
      if (r_c_forma_repasse.ie_beneficiario = 'T') then
        nr_seq_terceiro_w  := r_c_forma_repasse.nr_seq_terceiro;
      end if;

      ie_tipo_terceiro_forma_w  := r_c_forma_repasse.ie_tipo_terceiro;
      ds_log_insercao_w  := '';
      ie_forma_pagto_w  := ie_forma_pagto_terc_w;

      begin
      ds_conta_contabil_w  := substr(obter_dados_regra_terc_item(cd_regra_w, r_c_forma_repasse.nr_seq_item, 'DCC'), 1, 255);
      exception
      when others then
        ds_conta_contabil_w  := '';
      end;

      begin
      ds_obs_forma_repasse_w  := substr(obter_dados_regra_terc_item(cd_regra_w, r_c_forma_repasse.nr_seq_item, 'O'), 1, 255);
      exception
      when others then
        ds_obs_forma_repasse_w  := '';
      end;

      -- Edgar 13/05/2010, OS 215260, criar forma de repasse com tx sobre valores do procedimento
      vl_tx_repasse_w    := (vl_tx_medico_w * (r_c_forma_repasse.tx_medico / 100)) +
               (vl_tx_anestesista_w * (r_c_forma_repasse.tx_anestesista / 100)) +
               (vl_tx_materiais_w * (r_c_forma_repasse.tx_materiais / 100)) +
               (vl_tx_auxiliares_w * (r_c_forma_repasse.tx_auxiliares / 100)) +
               (vl_tx_custo_operacional_w * (r_c_forma_repasse.tx_custo_operacional / 100));

      if (coalesce(vl_tx_repasse_w, 0) = 0) then

        if (r_c_forma_repasse.vl_repasse <> 0) then
          vl_repasse_terc_w  := r_c_forma_repasse.vl_repasse;
        elsif (r_c_forma_repasse.ie_perc_saldo = 'S') then
          vl_repasse_terc_w  := vl_repasse_w * r_c_forma_repasse.tx_repasse / 100;
        else
          vl_repasse_terc_w  := vl_repassar_w * r_c_forma_repasse.tx_repasse / 100;
        end if;

        vl_repasse_w      := vl_repasse_w - vl_repasse_terc_w;

      else
        vl_repasse_terc_w    := vl_tx_repasse_w;
      end if;

      if (coalesce(r_c_forma_repasse.ie_por_unidade, 'N') = 'S') and (ie_forma_calculo_w not in ('Q')) then

        if (qt_procedimento_w < 0) then
          vl_repasse_terc_w  := (vl_repasse_terc_w * (qt_procedimento_w*-1));
        else
          vl_repasse_terc_w  := (vl_repasse_terc_w * qt_procedimento_w);
        end if;
      end if;

      if (coalesce(r_c_forma_repasse.ie_perc_executor,'N') = 'S') and (coalesce(r_c_procedimentos.nr_seq_particip,0) <> 0) then

        select  sum(a.vl_repasse)
        into STRICT  vl_repasse_princ_w
        from  procedimento_repasse a
        where  a.nr_seq_procedimento  = r_c_procedimentos.nr_seq_propaci
        and  coalesce(a.nr_seq_partic::text, '') = '';

        vl_repasse_terc_w  := vl_repasse_princ_w * r_c_forma_repasse.tx_repasse / 100;
      end if;

      cd_medico_w      := '';

      if (r_c_forma_repasse.ie_beneficiario = 'C') then
        cd_medico_w    := cd_medico_cir_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'P') then
        cd_medico_w    := cd_medico_prescr_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'E') then
        cd_medico_w    := r_c_procedimentos.cd_medico_exec;
      elsif (r_c_forma_repasse.ie_beneficiario = 'X') then
        cd_medico_w    := cd_medico_referido_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'A') then        -- Edgar 21/06/2005, OS 19588
        cd_medico_w    := cd_medico_resp_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'I') then
        cd_medico_w    := cd_medico_atendimento_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'O') then
        cd_medico_w    := cd_pessoa_indic_w;    -- Marcus 2/11/2005
      elsif (r_c_forma_repasse.ie_beneficiario = 'R') then
        cd_medico_w    := r_c_procedimentos.cd_medico_req;
      elsif (r_c_forma_repasse.ie_beneficiario = 'L') then
        cd_medico_w    := cd_medico_laudo_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'M') then
        cd_medico_w    := cd_medico_tratamento_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'U') then
        cd_medico_w    := cd_medico_aux_laudo_w;  -- Edgar 17/04/2010, OS 203939
      elsif (r_c_forma_repasse.ie_beneficiario = 'H') then
        select  max(a.CD_MEDICO_RESP)
        into STRICT  cd_medico_w
        from  paciente_setor a,
          paciente_atendimento b,
          prescr_medica c
        where  a.nr_seq_paciente  = b.nr_seq_paciente
        and  b.nr_prescricao    = c.nr_prescricao
        and  c.nr_prescricao    = nr_prescricao_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'D') then
        select  coalesce(max(cd_medico_executor), r_c_procedimentos.cd_medico_exec)
        into STRICT  cd_medico_w
        from  procedimento_paciente
        where  nr_sequencia = nr_seq_proc_princ_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'N') then
        select  max(cd_medico_executor)
        into STRICT  cd_medico_w
        from  procedimento_paciente
        where  nr_sequencia = nr_seq_proc_princ_w;
      elsif (r_c_forma_repasse.ie_beneficiario = 'B') then
        select  max(a.cd_medico_responsavel)
        into STRICT  cd_medico_w
        from  sus_aih_unif a
        where  a.nr_interno_conta  = nr_interno_conta_w;
      elsif (r_c_forma_repasse.ie_beneficiario = '1') then
        qt_medico_indicacao_w  := 1;
        open c06;
        loop
        fetch c06 into
          cd_medico_indicacao_w;
        EXIT WHEN NOT FOUND; /* apply on c06 */
          if (qt_medico_indicacao_w = 1) then
            cd_medico_w  := cd_medico_indicacao_w;
          end if;
          qt_medico_indicacao_w  := qt_medico_indicacao_w + 1;
        end loop;
        close c06;
      elsif (r_c_forma_repasse.ie_beneficiario = '2') then
        qt_medico_indicacao_w  := 1;
        open c06;
        loop
        fetch c06 into
          cd_medico_indicacao_w;
        EXIT WHEN NOT FOUND; /* apply on c06 */
          if (qt_medico_indicacao_w = 2) then
            cd_medico_w  := cd_medico_indicacao_w;
          end if;
          qt_medico_indicacao_w  := qt_medico_indicacao_w + 1;
        end loop;
        close c06;
      elsif (r_c_forma_repasse.ie_beneficiario = '3') then
        qt_medico_indicacao_w  := 1;
        open c06;
        loop
        fetch c06 into
          cd_medico_indicacao_w;
        EXIT WHEN NOT FOUND; /* apply on c06 */
          if (qt_medico_indicacao_w = 3) then
            cd_medico_w  := cd_medico_indicacao_w;
          end if;
          qt_medico_indicacao_w  := qt_medico_indicacao_w + 1;
        end loop;
        close c06;
      elsif (r_c_forma_repasse.ie_beneficiario = '4') then
        select  max(cd_medico)
        into STRICT  cd_medico_w
        from  med_avaliacao_paciente
        where  nr_atendimento    = nr_atendimento_w;
      elsif (r_c_forma_repasse.ie_beneficiario = '5') then
        cd_medico_w      := cd_usuario_original_w;
      elsif (r_c_forma_repasse.ie_beneficiario = '6') then

        if (coalesce(nr_cirurgia_w, 0) > 0) then

          select  max(cd_medico)
          into STRICT  cd_medico_w
          from (
            SELECT  max(cd_medico) cd_medico
            from  procedimento_paciente a,
              funcao_medico b
            where  a.ie_funcao_medico  = b.cd_funcao
            and  a.nr_sequencia    = nr_sequencia_p
            and  b.IE_IND_EQUIPE_SUS  = 2
            and  a.nr_cirurgia    = nr_cirurgia_w

union

            SELECT  max(c.cd_pessoa_fisica)
            from  procedimento_paciente a,
              procedimento_participante c,
              funcao_medico b
            where  c.ie_funcao    = b.cd_funcao
            and  a.nr_sequencia    = nr_sequencia_p
            and  a.nr_Sequencia    = c.nr_sequencia
            and  b.IE_IND_EQUIPE_SUS  = 2
            and  a.nr_cirurgia    = nr_cirurgia_w
            ) alias6;
        elsif (coalesce(r_c_procedimentos.nr_seq_particip,0) > 0) then
          cd_medico_w  := cd_medico_ww;
        end if;

      elsif (r_c_forma_repasse.ie_beneficiario = '7') then

        if (coalesce(nr_cirurgia_w, 0) > 0) then

          select  max(cd_medico)
          into STRICT  cd_medico_w
          from (
            SELECT  max(cd_medico) cd_medico
            from  procedimento_paciente a,
              funcao_medico b
            where  a.ie_funcao_medico  = b.cd_funcao
            and  a.nr_sequencia    = nr_sequencia_p
            and  a.nr_cirurgia    = nr_cirurgia_w
            and  b.IE_IND_EQUIPE_SUS  = 3

union

            SELECT  max(cd_medico)
            from  procedimento_paciente a,
              procedimento_participante c,
              funcao_medico b
            where  c.ie_funcao    = b.cd_funcao
            and  a.nr_sequencia    = nr_sequencia_p
            and  a.nr_Sequencia    = c.nr_sequencia
            and  a.nr_cirurgia    = nr_cirurgia_w
            and  b.IE_IND_EQUIPE_SUS  = 3
            ) alias6;

        end if;

      elsif (r_c_forma_repasse.ie_beneficiario = '8') then

        if (coalesce(nr_cirurgia_w, 0) > 0) then

          select  max(cd_medico)
          into STRICT  cd_medico_w
          from (
            SELECT  max(cd_medico) cd_medico
            from  procedimento_paciente a,
              funcao_medico b
            where  a.ie_funcao_medico  = b.cd_funcao
            and  a.nr_sequencia    = nr_sequencia_p
            and  a.nr_cirurgia    = nr_cirurgia_w
            and  b.IE_IND_EQUIPE_SUS  = 6

union

            SELECT  max(cd_medico)
            from  procedimento_paciente a,
              procedimento_participante c,
              funcao_medico b
            where  c.ie_funcao    = b.cd_funcao
            and  a.nr_sequencia    = nr_sequencia_p
            and  a.nr_Sequencia    = c.nr_sequencia
            and  a.nr_cirurgia    = nr_cirurgia_w
            and  b.IE_IND_EQUIPE_SUS  = 6
            ) alias6;
        elsif (coalesce(r_c_procedimentos.nr_seq_particip,0) > 0) then
          cd_medico_w  := cd_medico_ww;
        end if;

      elsif (r_c_forma_repasse.ie_beneficiario = 'V') then

        if (coalesce(nr_cirurgia_w, 0) > 0) then

          select  max(cd_medico)
          into STRICT  cd_medico_w
          from (
            SELECT  max(cd_medico) cd_medico
            from  procedimento_paciente a,
              funcao_medico b
            where  a.ie_funcao_medico  = b.cd_funcao
            and  a.nr_sequencia    = nr_sequencia_p
            and  b.ie_instrumentador  = 'S'
            and  a.nr_cirurgia    = nr_cirurgia_w

union

            SELECT  max(c.cd_pessoa_fisica)
            from  procedimento_paciente a,
              procedimento_participante c,
              funcao_medico b
            where  c.ie_funcao    = b.cd_funcao
            and  a.nr_sequencia    = nr_sequencia_p
            and  a.nr_Sequencia    = c.nr_sequencia
            and  b.ie_instrumentador  = 'S'
            and  a.nr_cirurgia    = nr_cirurgia_w
            ) alias6;

        end if;
      elsif (r_c_forma_repasse.ie_beneficiario = 'G') then
        cd_medico_w    := cd_pessoa_func_w;

      elsif (r_c_forma_repasse.ie_beneficiario = 'K') then
          begin
                    select	l.cd_resp_seg_aprov,
                              l.nm_usuario_seg_aprov
                    into STRICT	cd_medico_w,
                              nm_usuario_seg_aprov_w
                    from	laudo_paciente l
                    where	l.nr_seq_proc = r_c_procedimentos.nr_seq_propaci
                    and coalesce(l.dt_cancelamento::text, '') = '';
          exception
          when others then
                    cd_medico_w := null;
                    nm_usuario_seg_aprov_w := null;
          end;

          if (coalesce(cd_medico_w::text, '') = '') and (nm_usuario_seg_aprov_w IS NOT NULL AND nm_usuario_seg_aprov_w::text <> '') then
                    select	a.cd_pessoa_fisica
                    into STRICT	cd_medico_w
                    from	pessoa_fisica a,
                              usuario b
                    where	a.cd_pessoa_fisica = b.cd_pessoa_fisica
                    and	upper(b.nm_usuario) = upper(nm_usuario_seg_aprov_w);
          end if;
      end if;

      if (r_c_forma_repasse.ie_beneficiario <> 'T') and (coalesce(cd_medico_w,0) > 0) then
        begin
        cd_estab_terc_w      := cd_estabelecimento_p;
        if (IE_TERC_ESTAB_w <> 'L') then
          cd_estab_terc_w    := cd_estabelecimento_adic_w;
        end if;

        cd_medico_ww    := cd_medico_w;
        select  coalesce(min(nr_sequencia),0)
        into STRICT  nr_seq_terceiro_w
        from   terceiro
        where  cd_pessoa_fisica  = cd_medico_w
        and  cd_estabelecimento  = cd_estab_terc_w
        and  coalesce(ie_utilizacao,'A') in ('A','R')
        and  ie_situacao    = 'A'
        and  dt_procedimento_w  between
          coalesce(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_inicio_vigencia), dt_procedimento_w - 1) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_fim_vigencia, dt_procedimento_w + 1, clock_timestamp()));

        if (coalesce(nr_seq_terceiro_w,0) = 0) then

          select  count(*)
          into STRICT  cont_w
          from  terceiro_pf_conv;

          if (cont_w = 0) then
            select  min(a.nr_seq_terceiro)
            into STRICT  nr_seq_terceiro_w
            from  terceiro b,
              terceiro_pessoa_fisica a
            where  a.cd_pessoa_fisica  = cd_medico_w
            and  a.nr_seq_terceiro  = b.nr_sequencia
            and  b.cd_estabelecimento  = cd_estab_terc_w
            and  b.ie_situacao    = 'A'
            and  coalesce(b.ie_utilizacao,'A') in ('A','R')
            and  dt_procedimento_w  between coalesce(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_inicio_vigencia), dt_procedimento_w - 1) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(b.dt_fim_vigencia, dt_procedimento_w + 1, clock_timestamp()))
            and  dt_procedimento_w  between coalesce(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.dt_inicio_vigencia), dt_procedimento_w - 1) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(a.dt_fim_vigencia, dt_procedimento_w + 1, clock_timestamp()))
            and  coalesce(a.ie_repasse,'S') = 'S';
          else
            select  min(a.nr_seq_terceiro)
            into STRICT  nr_seq_terceiro_w
            from  terceiro b,
              terceiro_pessoa_fisica a
            where  a.cd_pessoa_fisica  = cd_medico_w
            and  a.nr_seq_terceiro  = b.nr_sequencia
            and  b.cd_estabelecimento  = cd_estab_terc_w
            and  b.ie_situacao    = 'A'
            and  coalesce(b.ie_utilizacao,'A') in ('A','R')
            and  dt_procedimento_w  between coalesce(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(b.dt_inicio_vigencia), dt_procedimento_w - 1) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(b.dt_fim_vigencia, dt_procedimento_w + 1, clock_timestamp()))
            and  dt_procedimento_w  between coalesce(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.dt_inicio_vigencia), dt_procedimento_w - 1) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(a.dt_fim_vigencia, dt_procedimento_w + 1, clock_timestamp()))
            and  coalesce(a.ie_repasse,'S') = 'S'
            and  OBTER_SE_TERC_PF_CONV(a.nr_seq_terceiro, a.cd_pessoa_fisica, cd_convenio_p) = 'S';
          end if;
        else  /* conferir se a PF do terceiro esta em vigencia */
          select  count(*)
          into STRICT  qt_pessoa_terceiro_w
          from  terceiro_pessoa_fisica a
          where  substr(OBTER_SE_TERC_PF_CONV(a.nr_seq_terceiro, a.cd_pessoa_fisica, cd_convenio_p),1,1) = 'S'
          and  a.cd_pessoa_fisica  = cd_medico_w
          and  a.nr_seq_terceiro  = nr_seq_terceiro_w;

          if (qt_pessoa_terceiro_w  > 0) then

            select  coalesce(min(a.nr_seq_terceiro),0)
            into STRICT  nr_seq_terceiro_w
            from  terceiro_pessoa_fisica a
            where  substr(OBTER_SE_TERC_PF_CONV(a.nr_seq_terceiro, a.cd_pessoa_fisica, cd_convenio_p),1,1) = 'S'
            and  coalesce(a.ie_repasse,'S')  = 'S'
            and  dt_procedimento_w  between coalesce(ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(a.dt_inicio_vigencia), dt_procedimento_w - 1) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(a.dt_fim_vigencia, dt_procedimento_w + 1, clock_timestamp()))
            and  a.cd_pessoa_fisica  = cd_medico_w
            and  a.nr_seq_terceiro  = nr_seq_terceiro_w;

          end if;

        end if;

        if (coalesce(nr_seq_terceiro_w,0) = 0) then
          select  coalesce(min(nr_seq_terceiro),0)
          into STRICT  nr_seq_terceiro_w
          from   Parametro_faturamento
          where  cd_estabelecimento  = cd_estabelecimento_p;
        end if;

        end;
      end if;

      /* Incluido em 03/09/2003 para tratar restricao de medicos socios -Inicio*/

      if (r_c_forma_repasse.ie_restricao_medico > 0) then
        begin
        qt_registro_w  := 0;

        select  coalesce(max(cd_empresa),0)
        into STRICT  cd_empresa_w
        from  estabelecimento
        where  cd_estabelecimento = cd_estabelecimento_p;

        if (r_c_forma_repasse.ie_restricao_medico = 1) then
          begin
          /* Medicos socios */

          select count(*)
          into STRICT   qt_registro_w
          from   medico_estabelecimento
          where   coalesce(cd_estabelecimento, cd_estabelecimento_p)  = cd_estabelecimento_p
          and   coalesce(cd_empresa, cd_empresa_w)      = cd_empresa_w
          and   cd_pessoa_fisica        = cd_medico_w
          and   ie_socio          = 'S';
          if (qt_registro_w  = 0) then
             nr_seq_terceiro_w := 0;
          end if;
          end;
        end if;
        if (r_c_forma_repasse.ie_restricao_medico = 2) then
          begin
          /* Medicos nao socios */

          select count(*)
          into STRICT   qt_registro_w
          from   medico_estabelecimento
          where   coalesce(cd_estabelecimento, cd_estabelecimento_p)  = cd_estabelecimento_p
          and   coalesce(cd_empresa, cd_empresa_w)      = cd_empresa_w
          and   cd_pessoa_fisica        = cd_medico_w
          and   ie_socio          = 'S';
          if (qt_registro_w  > 0) then
             nr_seq_terceiro_w := 0;
          end if;
          end;
        end if;
        if (r_c_forma_repasse.ie_restricao_medico = 3) then
          begin
          /* Medicos do corpo clinico */

          select  count(*)
          into STRICT  qt_registro_w
          from  medico
          where  cd_pessoa_fisica    = cd_medico_w
          and  coalesce(ie_corpo_clinico,'N')  = 'S';
          if (qt_registro_w  = 0) then
            nr_seq_terceiro_w := 0;
          end if;
          end;
        end if;
        if (r_c_forma_repasse.ie_restricao_medico = 4) then
          begin
          /* Medicos fora do corpo clinico */

          select  count(*)
          into STRICT  qt_registro_w
          from  medico
          where  cd_pessoa_fisica    = cd_medico_w
          and  coalesce(ie_corpo_clinico,'N')  = 'N';
          if (qt_registro_w  = 0) then
            nr_seq_terceiro_w := 0;
          end if;
          end;
        end if;

        if (r_c_forma_repasse.ie_restricao_medico = 5) then -- Somente se o medico for o executor do procedimento
          select  count(*)
          into STRICT  qt_registro_w
          from  procedimento_paciente
          where  nr_sequencia    = nr_sequencia_p
          and  cd_medico_executor  = cd_medico_w;
          if (qt_registro_w = 0) then
            nr_seq_terceiro_w := 0;
          end if;
        end if;

        if (r_c_forma_repasse.ie_restricao_medico = 6) then -- Somente se medico for o primeiro auxiliar auxiliar
          select  count(*)
          into STRICT  qt_registro_w
          from  funcao_medico b,
            procedimento_participante a
          where  a.nr_sequencia    = nr_sequencia_p
          and  a.ie_funcao    = b.cd_funcao
          and  b.IE_IND_EQUIPE_SUS  = 2
          and  a.cd_pessoa_fisica    = cd_medico_w;
          if (qt_registro_w = 0) then
            nr_seq_terceiro_w := 0;
          end if;
        end if;

        if (r_c_forma_repasse.ie_restricao_medico = 7) then    -- Edgar 31/08/2009, OS 162443, Somente se medico for o segundo auxiliar auxiliar
          select  count(*)
          into STRICT  qt_registro_w
          from  funcao_medico b,
            procedimento_participante a
          where  a.nr_sequencia    = nr_sequencia_p
          and  a.ie_funcao    = b.cd_funcao
          and  b.IE_IND_EQUIPE_SUS  = 3
          and  a.cd_pessoa_fisica  = cd_medico_w;
          if (qt_registro_w = 0) then
            nr_seq_terceiro_w := 0;
          end if;
        end if;

        if (r_c_forma_repasse.ie_restricao_medico = 9) then    --dsantos em 23/02/2011 - somente se o medico for PF
          select  max(cd_cgc)
          into STRICT    cd_cgc_terceiro_w
          from  terceiro
          where  nr_sequencia  = nr_seq_terceiro_w
          and    coalesce(ie_situacao,'A')  = 'A';

          if (coalesce(cd_cgc_terceiro_w, 'X') = 'X') then
            nr_seq_terceiro_w := 0;
          end if;
        end if;

        if (r_c_forma_repasse.ie_restricao_medico = 10) then    --dsantos em 01/12/2011 - somente se medico conveniado
          select  coalesce(max(ie_conveniado), 'N')
          into STRICT  ie_med_exec_conveniado_w
          from  medico_convenio
          where  cd_pessoa_fisica  = cd_medico_w
          and  cd_convenio  = cd_convenio_p;

          if (coalesce(ie_med_exec_conveniado_w, 'N')  = 'N') then
            nr_seq_terceiro_w    := 0;
          end if;
        end if;

        if (r_c_forma_repasse.ie_restricao_medico = 11) then    --dsantos em 01/12/2011 - somente se medico nao conveniado
          select  coalesce(max(ie_conveniado), 'N')
          into STRICT  ie_med_exec_conveniado_w
          from  medico_convenio
          where  cd_pessoa_fisica  = cd_medico_w
          and  cd_convenio  = cd_convenio_p;

          if (coalesce(ie_med_exec_conveniado_w, 'N')  = 'S') then
            nr_seq_terceiro_w    := 0;
          end if;
        end if;

        if (r_c_forma_repasse.ie_restricao_medico = 8) then     --dsantos em 23/02/2011 - somente se o medico for PF
          select  max(cd_pessoa_fisica)
          into STRICT  cd_pessoa_fisica_terceiro_w
          from  terceiro
          where  nr_sequencia  = nr_seq_terceiro_w
          and    coalesce(ie_situacao,'A')  = 'A';

          if (coalesce(cd_pessoa_fisica_terceiro_w, 'X') = 'X') then
            nr_seq_terceiro_w := 0;
          end if;
        end if;

        if (vl_repasse_terc_w = 0) then
          nr_seq_terceiro_w := 0;
        end if;
        end;
      end if;

      /* OS 17417 Marcus 27/4/2005  - Beneficiario Dono do equipamento - Se nao existir utilizar do parametro */

      if (r_c_forma_repasse.ie_beneficiario = 'Q') then
        if (nr_seq_terc_equip_w IS NOT NULL AND nr_seq_terc_equip_w::text <> '') then
          nr_seq_terceiro_w    := nr_seq_terc_equip_w;
        else
          select  coalesce(min(nr_seq_terceiro),0)
          into STRICT  nr_seq_terceiro_w
          from   Parametro_faturamento
          where  cd_estabelecimento  = cd_estabelecimento_p;
        end if;
      end if;

      if (r_c_forma_repasse.ie_beneficiario = 'S') then

        select   coalesce(max(nr_sequencia),0)
        into STRICT  nr_seq_terceiro_w
        from   terceiro
        where  cd_cgc = r_c_procedimentos.cd_cgc_prestador
        and  dt_procedimento_w  between coalesce(trunc(dt_inicio_vigencia,'dd'), dt_procedimento_w - 1) and coalesce(ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_fim_vigencia,clock_timestamp())), dt_procedimento_w + 1)
        and  coalesce(ie_situacao, 'A')  = 'A'
        and  cd_estabelecimento  = cd_estabelecimento_p;

        if (nr_seq_terceiro_w = 0) then
          select  coalesce(max(nr_seq_terceiro),0)
          into STRICT  nr_seq_terceiro_w
          from   Parametro_faturamento
          where  cd_estabelecimento  = cd_estabelecimento_p;
        end if;
      end if;

      --Se existe terceiro informado para gerar o repasse, segue para a geracao.
      if (coalesce(nr_seq_terceiro_w,0) > 0) then
        begin

        select  nextval('procedimento_repasse_seq')
        into STRICT  nr_seq_repasse_w
;

        --Verifica as formas de pagamento do repasse. (Cadastro do Terceiro ou Producao ou Fechamento Protocolo)
        if (ie_forma_pagto_w = 'T') then
          select  coalesce(max(ie_forma_pagto),'R')
          into STRICT  ie_forma_pagto_w
          from  terceiro
          where  nr_sequencia  = nr_seq_terceiro_w
          and    coalesce(ie_situacao,'A')  = 'A';
        end if;

        if (ie_forma_pagto_w = 'P') then
          ie_status_w  := 'S';

          dt_liberacao_w  := clock_timestamp();

        elsif (ie_forma_pagto_w = 'F') then

          select  max(ie_status_protocolo),
            max(dt_mesano_referencia),
            max(dt_entrega_convenio)
          into STRICT  ie_status_protocolo_w,
            dt_mesano_referencia_w,
            dt_entrega_convenio_w
          from  protocolo_convenio
          where  nr_seq_protocolo  = nr_seq_protocolo_w;

          if (ie_status_protocolo_w = 2) then
            ie_status_w  := 'S';
            dt_liberacao_w  := clock_timestamp();
          else
            ie_status_w  := 'A';
          end if;
        else
          ie_status_w  := 'A';
        end if;

        ds_status_w  := substr(obter_valor_dominio(1129, ie_status_w),1,50);

        if  ((ie_forma_pagto_w = 'P') or
          (ie_forma_pagto_w = 'F' AND ie_status_w = 'S')) then
          if (coalesce(ie_data_lib_prod_w,'N') = 'S') then

            if (coalesce(nr_seq_protocolo_w::text, '') = '') then
              select  max(nr_seq_protocolo)
              into STRICT  nr_seq_protocolo_w
              from  conta_paciente
              where  nr_interno_conta   = nr_interno_conta_w;
            end if;

            if (coalesce(nr_seq_protocolo_w,0) > 0) then

              select  max(ie_status_protocolo),
                max(dt_mesano_referencia)
              into STRICT  ie_status_protocolo_w,
                dt_mesano_referencia_w
              from  protocolo_convenio
              where  nr_seq_protocolo  = nr_seq_protocolo_w;

              if (ie_status_protocolo_w = 2) then

                dt_liberacao_w    := dt_mesano_referencia_w;

              end if;

            end if;

            if (coalesce(dt_liberacao_w::text, '') = '') then

              select  max(dt_acerto_conta)
              into STRICT  dt_liberacao_w
              from  conta_paciente
              where  nr_interno_conta  = nr_interno_conta_w;

            end if;

          end if;
        end if;

        cd_medico_rep_w  := null;
        /* Marcus 20/07/2004 Gravar o medico somente quando a regra exige */

        if (r_c_forma_repasse.ie_gravacao_medico = 'S') then
          cd_medico_rep_w  := cd_medico_ww;
        elsif (r_c_forma_repasse.ie_gravacao_medico = 'P') then
          cd_medico_rep_w  := cd_medico_Prescr_w;
        elsif (r_c_forma_repasse.ie_gravacao_medico = 'E') then
          cd_medico_rep_w  := r_c_procedimentos.cd_medico_exec;
        elsif (r_c_forma_repasse.ie_gravacao_medico = 'C') then
          cd_medico_rep_w  := cd_medico_Cir_w;
        elsif (r_c_forma_repasse.ie_gravacao_medico = 'L') then
          cd_medico_rep_w  := cd_medico_laudo_w;
        elsif (r_c_forma_repasse.ie_gravacao_medico = 'F') then
          cd_medico_rep_w  := r_c_forma_repasse.cd_pessoa_fisica;
        end if;

        ie_gerar_repasse_w  := 'S';

        nm_medico_w  := substr(obter_nome_pf_pj(cd_medico_rep_w, null),1,100);

        if (ie_tipo_terceiro_forma_w IS NOT NULL AND ie_tipo_terceiro_forma_w::text <> '') then
          select  obter_tipo_pessoa_terceiro(cd_medico_rep_w,dt_conta_w,ie_tipo_terceiro_forma_w)
          into STRICT  ie_tipo_terceiro_w
;

          if (ie_tipo_terceiro_forma_w <> coalesce(ie_tipo_terceiro_w,'X')) then
            ie_gerar_repasse_w := 'N';
          end if;
        end if;

        --Verifica o campo que gera o valor base do repasse. Cliente selecionara qual campo indica a base para a geracao, caso o valor de repasse calculado nao alcance o valor do campo, repassa o maior.
        if (ie_campo_base_vl_repasse_w IS NOT NULL AND ie_campo_base_vl_repasse_w::text <> '') then
          if (ie_campo_base_vl_repasse_w = 'ME') then
            if (vl_repasse_terc_w <= vl_medico_orig_w) then
              vl_repasse_terc_w  := vl_medico_orig_w;
            end if;
          elsif (ie_campo_base_vl_repasse_w = 'AN') then
            if (vl_repasse_terc_w <= vl_anestesista_orig_w) then
              vl_repasse_terc_w  := vl_anestesista_orig_w;
            end if;
          elsif (ie_campo_base_vl_repasse_w = 'MA') then
            if (vl_repasse_terc_w <= vl_materiais_orig_w) then
              vl_repasse_terc_w  := vl_materiais_orig_w;
            end if;
          elsif (ie_campo_base_vl_repasse_w = 'AX') then
            if (vl_repasse_terc_w <= vl_auxiliares_orig_w) then
              vl_repasse_terc_w  := vl_auxiliares_orig_w;
            end if;
          elsif (ie_campo_base_vl_repasse_w = 'CO') then
            if (vl_repasse_terc_w <= vl_custo_operacional_orig_w) then
              vl_repasse_terc_w  := vl_custo_operacional_orig_w;
            end if;
          elsif (ie_campo_base_vl_repasse_w = 'PR') then
            if (vl_repasse_terc_w <= vl_procedimento_orig_w) then
              vl_repasse_terc_w  := vl_procedimento_orig_w;
            end if;
          end if;
        end if;

        --TODO CaLCULO DO VALOR DE REPASSE DEVE SER REALIZADO ANTES DESTA LINHA;
        vl_original_repasse_w  := vl_repasse_terc_w;

        if (r_c_forma_repasse.ie_recebe_regra_pontuacao = 'S') then
          select  count(1)
          into STRICT  qt_pont_crit_w
          from  proc_crit_rep_regra_ponto a
          where  a.nr_seq_proc_criterio = nr_seq_criterio_w;

          select  count(1)
          into STRICT  qt_pont_terc_w
          from  terceiro_regra_pontuacao a
          where  a.nr_seq_terceiro = nr_seq_terceiro_w;

          if (qt_pont_terc_w <> 0) and (qt_pont_crit_w <> 0) then
            vl_repasse_terc_w  := 0;
          end if;
        end if;

        if (r_c_forma_repasse.ie_beneficiario <> 'T') and (r_c_forma_repasse.ie_valida_terceiro_forma = 'S') and (nr_seq_terceiro_w <> r_c_forma_repasse.nr_seq_terceiro) then
          ie_gerar_repasse_w  := 'N';
        end if;

        if  (((vl_repasse_terc_w <> 0) or (coalesce(ie_repasse_zerado_w,'N') = 'S')) or (r_c_forma_repasse.ie_gera_item_zerado = 'S')) and (coalesce(ie_gerar_repasse_w,'S') = 'S') then

          insert  into procedimento_repasse(nr_sequencia,
            nr_seq_procedimento,
            vl_repasse,
            dt_atualizacao,
            nm_usuario,
            nr_seq_terceiro,
            nr_lote_contabil,
            nr_repasse_terceiro,
            cd_conta_contabil,
            nr_seq_trans_fin,
            nr_seq_item_retorno,
            ie_status,
            vl_liberado,
            cd_regra,
            cd_medico,
            dt_contabil_titulo,
            dt_contabil,
            nr_seq_partic,
            nr_seq_criterio,
            NR_SEQ_TRANS_FIN_REP_MAIOR,
            ie_estorno,
            ie_repasse_calc,
            NR_SEQ_REGRA_ITEM,
            vl_original_repasse,
            dt_liberacao,
            nr_atendimento,
            nm_pessoa_fisica,
            ds_procedimento,
            ds_status,
            nm_medico,
            nm_medico_executor,
            ds_transacao,
            ds_convenio,
            ds_regra,
            dt_procedimento,
            ds_tipo_atendimento,
            dt_mesano_referencia,
            cd_procedimento,
            nr_interno_conta,
            ds_centro_custo,
            nm_usuario_original,
            dt_entrada_atend,
            ds_conta_contabil,
            ds_obs_forma_repasse,
            ds_setor_atendimento,
            ds_funcao_med,
            nm_medico_req,
            ds_observacao_criterio,
            ds_categoria,
            nr_prescricao,
            ds_via_acesso,
            ds_medico_resp,
            ds_carater,
            ds_medico_laudo,
            qt_procedimento,
            ie_origem_proced,
            cd_pessoa_fisica,
            nr_seq_proc_crit_repasse,
            cd_convenio,
            ie_tipo_convenio,
            ie_tipo_atendimento,
            cd_medico_laudo,
            ds_classif_atua_medico,
            nr_laudo,
            ds_tipo_conv,
            ie_alta_complexidade,
            dt_entrega_convenio)
          values (nr_seq_repasse_w,
            nr_sequencia_p,
            vl_repasse_terc_w,
            clock_timestamp(),
            nm_usuario_p,
            nr_seq_terceiro_w,
            0,
            null,
            r_c_forma_repasse.cd_conta_contabil,
            nr_seq_trans_fin_w,
            null,
            'A',
            CASE WHEN ie_status_w='S' THEN  vl_repasse_terc_w  ELSE 0 END ,
            cd_regra_w,
            cd_medico_rep_w,
            to_date('01/01/2999','dd/mm/yyyy'),
            to_date('01/01/2999','dd/mm/yyyy'),
            CASE WHEN coalesce(r_c_procedimentos.nr_seq_particip,0)=0 THEN null  ELSE r_c_procedimentos.nr_seq_particip END ,
            nr_seq_criterio_w,
            nr_seq_trans_fin_rep_maior_w,
            'N',
            ie_repasse_calc_w,
            r_c_forma_repasse.nr_seq_item,
            vl_original_repasse_w,
            dt_liberacao_w,
            nr_atendimento_repasse_w,
            nm_pessoa_fisica_w,
            ds_procedimento_w,
            ds_status_w,
            nm_medico_w,
            nm_medico_executor_w,
            ds_transacao_w,
            ds_convenio_w,
            ds_regra_w,
            dt_procedimento_w,
            ds_tipo_atendimento_w,
            dt_mesano_ref_conta_w,
            cd_procedimento_w,
            nr_interno_conta_w,
            ds_centro_custo_w,
            r_c_procedimentos.nm_usuario_original,
            dt_entrada_atend_w,
            ds_conta_contabil_w,
            ds_obs_forma_repasse_w,
            ds_setor_atendimento_w,
            ds_funcao_medico_w,
            nm_medico_req_w,
            ds_observacao_criterio_w,
            ds_categoria_w,
            nr_prescricao_w,
            ds_via_acesso_w,
            ds_medico_resp_w,
            ds_carater_w,
            ds_medico_laudo_w,
            qt_procedimento_w,
            ie_origem_proced_w,
            cd_pessoa_fisica_w,
            nr_seq_criterio_w,
            cd_convenio_p,
            ie_tipo_convenio_w,
            ie_tipo_atendimento_p,
            cd_medico_laudo_w,
            ds_classif_atua_medico_w,
            CASE WHEN ie_lib_laudo_proc_w='S' THEN nr_laudo_w  ELSE null END ,
            ds_tipo_conv_w,
            ie_alta_complexidade_w,
            dt_entrega_convenio_w);
          /* Nao retirar este UPDATE, pois a trigger PROCEDIMENTO_REPASSE_ATUAL e disparada somente nos UPDATES. O Repasse LIBERADO PELO SISTEMA gerado por producao
          nao caia na trigger pois  esta so atuava  nos updates.*/
          if (ie_status_w IS NOT NULL AND ie_status_w::text <> '') then
            update  procedimento_repasse
            set  ie_status  = ie_status_w
            where  nr_sequencia  = nr_seq_repasse_w;
          end if;

          if (vl_repasse_terc_w   < 0) and (r_c_procedimentos.ie_auditoria    = 'S') and (ie_auditar_repasse_w  = 'S') then

            update  procedimento_repasse
            set  ie_status  = 'D'
            where  nr_sequencia  = nr_seq_repasse_w;

          end if;

          if (r_c_procedimentos.nr_seq_particip > 0) then
            update  procedimento_participante
            set  vl_repasse_calc      = coalesce(vl_repasse_calc,0) + vl_repasse_terc_w,
              nr_seq_proc_crit_repasse  = nr_seq_criterio_w,
              cd_regra_repasse    = cd_regra_w
            where  nr_seq_partic      = r_c_procedimentos.nr_seq_particip
            and  nr_sequencia      = r_c_procedimentos.nr_seq_propaci;
          else
            update  procedimento_paciente
            set  vl_repasse_calc      = coalesce(vl_repasse_calc,0) + vl_repasse_terc_w,
              nr_seq_proc_crit_repasse  = nr_seq_criterio_w,
              cd_regra_repasse    = cd_regra_w
            where  nr_sequencia      = r_c_procedimentos.nr_seq_propaci;
          end if;

          if (ie_gravar_log_proc_w = 'S') then
            delete  FROM procedimento_repasse_log
            where  nr_seq_procedimento = nr_sequencia_p
            and  nr_seq_participante = r_c_procedimentos.nr_seq_particip;
          end if;

          ie_gera_log_w  := 'N';

        else
          ds_log_insercao_w  := ds_log_insercao_w||wheb_mensagem_pck.get_texto(794229,'VL_REPASSE_TERC_W=' ||VL_REPASSE_TERC_W||';IE_REPASSE_ZERADO_W=' ||IE_REPASSE_ZERADO_W||';IE_GERAR_REPASSE_W='||IE_GERAR_REPASSE_W)||ds_enter_w;
          ie_gera_log_w  := 'S';
          vl_repasse_w      := vl_repasse_w + vl_repasse_terc_w;
          vl_repasse_terc_w    := 0;
        end if;

        end;
      elsif (r_c_forma_repasse.ie_regra_saldo = 'S') then
        vl_repasse_w      := vl_repasse_w + vl_repasse_terc_w;
        vl_repasse_terc_w    := 0;
      end if;
      end;

    if (ie_gera_log_w = 'S') and (ie_gravar_log_proc_w = 'S') then
      CALL grava_log_geracao_repasse(nr_atendimento_w, nr_interno_conta_w, nr_sequencia_p, coalesce(r_c_procedimentos.nr_seq_particip,0), cd_procedimento_w, ie_origem_proced_w, null, null, ds_log_repasse_w||ds_log_insercao_w, nm_usuario_p,nr_seq_protocolo_w);
    end if;

    --Fim c_forma_repasse
    end loop;
    end;
  else
    if (ie_gravar_log_proc_w = 'S') then
      ds_log_repasse_w  := ds_log_repasse_w||wheb_mensagem_pck.get_texto(794230,'VL_REPASSE_W=' ||VL_REPASSE_W||';IE_REPASSE_ZERADO_W=' ||IE_REPASSE_ZERADO_W)||ds_enter_w;
      CALL grava_log_geracao_repasse(nr_atendimento_w, nr_interno_conta_w, nr_sequencia_p, coalesce(r_c_procedimentos.nr_seq_particip,0), cd_procedimento_w, ie_origem_proced_w, null, null, ds_log_repasse_w, nm_usuario_p,nr_seq_protocolo_w);
    end if;
  end if;
  end;
--Fim c_procedimentos
end loop;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_procedimento_repasse ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, cd_medico_atend_p text, nm_usuario_p text, cd_edicao_amb_p bigint, cd_convenio_p bigint, ie_tipo_atendimento_p bigint, cd_regra_p bigint, nr_seq_criterio_p bigint, nr_seq_partic_p bigint default null) FROM PUBLIC;

