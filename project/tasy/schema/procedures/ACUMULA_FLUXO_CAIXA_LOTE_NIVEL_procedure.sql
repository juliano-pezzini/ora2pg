-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE acumula_fluxo_caixa_lote_nivel ( nr_seq_lote_fluxo_p bigint, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_empresa_p bigint) AS $body$
DECLARE


/*--------------------------------------------------------------- ATENÇÃO ----------------------------------------------------------------*/


/* Cuidado ao realizar alterações no fluxo de caixa em lote. Toda e qualquer alteração realizada em qualquer uma */


/* das procedures do fluxo de caixa em lote deve ser cuidadosamente verificada e realizada no fluxo de caixa      */


/* convencional. Devemos garantir que os dois fluxos de caixa tragam os mesmos valores no resultado, evitando     */


/* assim que existam diferenças entre os fluxos de caixa.                                                                                                */


/*--------------- AO ALTERAR O FLUXO DE CAIXA EM LOTE ALTERAR TAMBÉM O FLUXO DE CAIXA ---------------*/

vl_fluxo_w			fluxo_caixa_item.vl_fluxo%type;
cd_conta_financ_w		bigint;
dt_referencia_w			timestamp;
cd_conta_superior_w		bigint;
cd_conta_anterior_w		bigint;
ie_origem_w			varchar(01) := 'C';
dt_inicio_calculo_w		timestamp;
ds_conta_w			varchar(2000);
qt_repeticao_w			bigint;
ds_conta_financ_w		varchar(255);
dt_inicio_w			timestamp;
dt_final_w			timestamp;
ie_classif_fluxo_w		fluxo_caixa_lote.ie_classif_fluxo%type;
/* Projeto Multimoeda -Variáveis */

cd_moeda_empresa_w		integer;
cd_moeda_estrang_w		integer;

C01 CURSOR FOR
SELECT	b.dt_referencia,
	b.cd_conta_financ,
	CASE WHEN c.ie_oper_fluxo='S' THEN b.vl_fluxo WHEN c.ie_oper_fluxo='D' THEN b.vl_fluxo * -1  ELSE 0 END ,
	c.cd_conta_superior
from	fluxo_caixa_lote a,
	fluxo_caixa_item b,
	conta_financeira c
where	a.nr_sequencia		= b.nr_seq_lote_fluxo
and	b.cd_conta_financ	= c.cd_conta_financ
and	a.cd_empresa		= cd_empresa_p
and	coalesce(a.cd_estabelecimento,cd_estabelecimento_p) = cd_estabelecimento_p
and	c.ie_oper_fluxo		<> 'I'
and	coalesce(b.cd_moeda,cd_moeda_empresa_w) = coalesce(cd_moeda_estrang_w,cd_moeda_empresa_w)  --Projeto Multimoeda - Busca apenas os registros da moeda relacionada
and	a.ie_classif_fluxo	= ie_classif_fluxo_w
and	b.dt_referencia		between dt_inicio_w and dt_final_w
and 	coalesce(a.ie_situacao_fluxo_data,'A') = CASE WHEN coalesce(a.ie_situacao_fluxo_data,'A')='T' THEN a.ie_situacao_fluxo_data  ELSE c.ie_situacao END; -- Necessário para trazer somente as contas de acordo com a situação escolhida
BEGIN

dt_inicio_w		:= dt_inicio_p;
dt_final_w		:= dt_final_p;

select	max(cd_moeda)
into STRICT	cd_moeda_estrang_w
from 	fluxo_caixa_lote
where	nr_sequencia = nr_seq_lote_fluxo_p;
/* Projeto Multimoeda - Busca a moeda padrão da empresa e verifica a moeda cadastrada no fluxo em lote. Ele será a base da busca dos dados
		em moeda estrangeira. Caso a moeda do fluxo seja nula, deverá ser considerada a moeda padrão da empresa nas consultas,
		caso contrário irá buscar somente os dados na moeda selecionada.*/
select obter_moeda_padrao_empresa(cd_estabelecimento_p,'E')
into STRICT cd_moeda_empresa_w
;
if (coalesce(cd_moeda_estrang_w::text, '') = '') then
	cd_moeda_estrang_w := cd_moeda_empresa_w;
end if;

select	ie_classif_fluxo
into STRICT	ie_classif_fluxo_w
from	fluxo_caixa_lote
where	nr_sequencia = nr_seq_lote_fluxo_p;

open c01;
loop
fetch c01 into
	dt_referencia_w,
	cd_conta_Financ_w,
	vl_fluxo_w,
	cd_conta_superior_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	cd_conta_anterior_w		:= 9999999999;
	qt_repeticao_w			:= 0;


	while(cd_conta_superior_w IS NOT NULL AND cd_conta_superior_w::text <> '') and (cd_conta_anterior_w	<> cd_conta_superior_w) LOOP

		cd_conta_anterior_w	:= cd_conta_superior_w;
		qt_repeticao_w	:= qt_repeticao_w + 1;

		if (length(ds_conta_w) < 1980) then
			ds_conta_w	:= ds_conta_w + cd_conta_superior_w || ',';
		end if;

		if (qt_repeticao_w > 150) then

			select 	ds_conta_financ
			into STRICT	ds_conta_financ_w
			from	conta_financeira
			where	cd_conta_financ	= cd_conta_Financ_w;

			/* A estrutura da conta financeira está recursiva
			ds_conta_financ_w */
			CALL wheb_mensagem_pck.exibir_mensagem_abort(262735,'DS_CONTA_FINANC_W='||ds_conta_financ_w);
		end if;
		
		CALL gerar_fluxo_caixa_lote(	dt_referencia_w,
					cd_conta_superior_w,
					'',
					'23',
					'SI',
					nm_usuario_p,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					nr_seq_lote_fluxo_p,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					vl_fluxo_w);

		select	cd_conta_superior
		into STRICT	cd_conta_superior_w
		from	conta_financeira
		where	cd_conta_financ	= cd_conta_superior_w;

	end loop;

end loop;
close c01;

/*NAO COLOCAR COMMIT NESTA PROCEDURE*/

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE acumula_fluxo_caixa_lote_nivel ( nr_seq_lote_fluxo_p bigint, cd_estabelecimento_p bigint, dt_inicio_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_empresa_p bigint) FROM PUBLIC;

