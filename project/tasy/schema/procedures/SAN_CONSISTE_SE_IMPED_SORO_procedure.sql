-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE san_consiste_se_imped_soro ( nr_seq_doacao_p bigint, nr_seq_lote_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_verifica_se_impede_w		varchar(1);
ie_existe_inpatidao_w		varchar(1)	:= 'N';
nr_seq_exame_w			bigint;

ds_resultado_w		varchar(255);
qt_amostra_w		smallint;
nr_seq_doacao_w		bigint;
ie_acao_w		varchar(1);
qt_dias_inaptidao_w	integer;
ie_amostra_inapta_w	varchar(1);

C01 CURSOR FOR
	SELECT 	b.nr_seq_exame
	from	san_exame_lote a,
		san_exame_realizado b,
		san_exame c
	where	a.nr_sequencia 	= b.nr_seq_exame_lote
	and	c.nr_sequencia	= b.nr_seq_exame
	and	a.nr_seq_doacao	= nr_seq_doacao_p
	and (san_obter_se_exame_auxiliar(b.nr_seq_exame_lote,b.nr_seq_exame,1,'O') = 'S'
	or 	san_obter_se_exame_auxiliar(b.nr_seq_exame_lote,b.nr_seq_exame,1,'S') = 'S')
	and	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
	and	a.nr_sequencia  = nr_seq_lote_p;


BEGIN

ie_amostra_inapta_w := obter_valor_param_usuario(450,390,obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento);

select 	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
into STRICT	ie_verifica_se_impede_w
from	san_doacao d
where (d.ie_status in (2,6) or (ie_amostra_inapta_w = 'S' and (nr_seq_doacao_amostra IS NOT NULL AND nr_seq_doacao_amostra::text <> '')))
and	coalesce(d.ie_apto_amostra,'N') = 'N'
and	d.nr_sequencia = nr_seq_doacao_p
and	not exists ( 	SELECT 1
			from	san_exame_lote a,
				san_exame_realizado b
			where	a.nr_sequencia 	= b.nr_seq_exame_lote
			and	a.nr_seq_doacao	= d.nr_sequencia
			and (san_obter_se_exame_auxiliar(b.nr_seq_exame_lote,b.nr_seq_exame,1,'O') = 'S'
			or 	san_obter_se_exame_auxiliar(b.nr_seq_exame_lote,b.nr_seq_exame,1,'S') = 'S')
			and	coalesce(b.dt_liberacao::text, '') = ''
			and	a.nr_sequencia  = nr_seq_lote_p);

if (ie_verifica_se_impede_w = 'S') then

	open C01;
	loop
	fetch C01 into
		nr_seq_exame_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		CALL San_Atualiza_Imped_Sorologia(nr_seq_exame_w,nr_seq_lote_p,nm_usuario_p);

		select	upper(max(ds_resultado))
		into STRICT	ds_resultado_w
		from	san_exame_realizado
		where	nr_seq_exame = nr_seq_exame_w
		and	nr_seq_exame_lote = nr_seq_lote_p;

		select	coalesce(max(a.qt_amostra),1),
			max(b.nr_seq_doacao)
		into STRICT	qt_amostra_w,
			nr_seq_doacao_w
		from	san_doacao a,
			san_exame_lote b
		where	b.nr_seq_doacao = a.nr_sequencia
		and	b.nr_sequencia = nr_seq_lote_p;

		if (ds_resultado_w IS NOT NULL AND ds_resultado_w::text <> '') and ((ds_resultado_w = 'POSITIVO') or (ds_resultado_w = 'REAGENTE') or (ds_resultado_w = 'INDETERMINADO') or (ds_resultado_w = 'ANDAMENTO')) then

			select	max(ie_acao),
				coalesce(max(qt_dias_inaptidao),0)
			into STRICT	ie_acao_w,
				qt_dias_inaptidao_w
			from	san_regra_exame_sorologia
			where	nr_seq_exame = nr_seq_exame_w
			and 	ie_situacao = 'A'
			and	ie_amostra = qt_amostra_w
			and	((ie_resultado = 'P' and (ds_resultado_w in ('POSITIVO','REAGENTE')))
			or (ie_resultado = 'I' and ds_resultado_w = 'INDETERMINADO')
			or (ie_resultado = 'A' and ds_resultado_w = 'ANDAMENTO'));

			if (ie_acao_w in ('D','T','A')) then
				ie_existe_inpatidao_w	:= 'S';
			end if;

		end if;
		end;
	end loop;
	close C01;

	if (ie_existe_inpatidao_w <> 'S') then
		update	san_doacao
		set	ie_avaliacao_final = 'A',
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where 	nr_sequencia 	= nr_seq_doacao_p;
	end if;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE san_consiste_se_imped_soro ( nr_seq_doacao_p bigint, nr_seq_lote_p bigint, nm_usuario_p text) FROM PUBLIC;

