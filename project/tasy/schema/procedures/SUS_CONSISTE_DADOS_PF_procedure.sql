-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_dados_pf (nr_interno_conta_p bigint, nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE



ds_detalhe_w		varchar(255)	:= '';
cd_estabelecimento_w	smallint;
cd_pessoa_fisica_w	varchar(10);
nr_cartao_nac_sus_w	varchar(20);
dt_nascimento_w		timestamp;
ie_sexo_w		varchar(1);
nr_seq_cor_pele_w		bigint;
nm_pessoa_w		varchar(60);
cd_municipio_ibge_w	varchar(6);
cd_mun_ibge_natal_pf_w	varchar(6);
cd_mun_ibge_tabela_w	varchar(6);
nm_mae_w		varchar(60);
dt_entrada_w		timestamp;
nr_cep_cidade_nasc_w	varchar(15);
qt_cidade_nasc_w		integer;
cd_tipo_logradouro_w	varchar(3);
ie_tipo_atendimento_w	smallint;
qt_proc_cns_w		integer		:= 0;
qt_apac_w		integer		:= 0;
qt_aih_w			integer		:= 0;
qt_bpa_i_w			integer		:= 0;
nm_responsavel_w		varchar(60);
cd_raca_cor_sus_w	smallint;
cd_cep_w		varchar(15);
ds_endereco_w		varchar(80);
nr_endereco_w		varchar(10);
sg_estado_w		compl_pessoa_fisica.sg_estado%type;
cd_proc_real_aih_w	bigint;
nm_resp_atend_w		varchar(60);
ie_exporta_resp_apac_w	varchar(1);
ie_exporta_resp_aih_w	varchar(1);
cd_carater_internacao_w	varchar(2);
varceplocalidade_w		varchar(1)	:= 'L';
qt_reg_sus_cep_w		integer		:= 0;
cd_nacionalidade_w	varchar(8);
qt_cns_duplic_w		varchar(5)	:= 0;
nr_idade_w		bigint;
qt_cep_sus_w		bigint	:= 0;
ie_cns_inconsistente_w	varchar(1)	:= 'N';
ie_ibge_inconsistente_w	varchar(1)	:= 'N';
qt_proc_bpa_cns_w	integer		:= 0;
qt_proc_bpa_w		integer		:= 0;
ie_regra_tipo_atend_w	varchar(1)	:= 'A';
cd_procedimento_w	bigint;
ie_grau_instrucao_w	bigint	:= 0;
nr_pis_pasep_w		varchar(11);
nr_identidade_w		varchar(11);
nr_cert_nasc_w		varchar(11);
nr_cpf_w			varchar(11);
nr_matricula_nasc_w     	varchar(32);
nr_ddd_fone_pac_w		varchar(3);
nr_telefone_pac_w		varchar(11);
ie_codigo_autorizacao_w		smallint	:= 0;
qt_dados_aih_conta_w		bigint;
sg_estado_estab_w		compl_pessoa_fisica.sg_estado%type;
cd_cor_pele_sus_w		varchar(10);
cd_etnia_w			varchar(4);
ds_bairro_w			compl_pessoa_fisica.ds_bairro%type;
dt_procedimento_w	procedimento_paciente.dt_procedimento%type;
dt_competencia_sus_w		parametro_faturamento.dt_competencia_sus%type;		
ds_justificativa_cns_w      sus_aih_unif.ds_justificativa_cns%type;

ie_ordem_telefone_pac_w     sus_parametros_aih.ie_ordem_telefone_pac%type;
nr_ddd_celular_w		pessoa_fisica.nr_ddd_celular%type;	
nr_telefone_celular_w		pessoa_fisica.nr_telefone_celular%type;
nr_ddd_telefone_compl_w		compl_pessoa_fisica.nr_ddd_telefone%type;	
nr_fone_celular_compl_w		compl_pessoa_fisica.ds_fone_adic%type;

c01 CURSOR FOR
	SELECT	cd_procedimento,
			dt_procedimento
	from	procedimento_paciente
	where	nr_interno_conta        = nr_interno_conta_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	ie_origem_proced = 7
	and	sus_obter_tiporeg_proc(cd_procedimento, ie_origem_proced,'C',1) <> 1;
	
type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w			vetor;

BEGIN

/* Obter dados paciente */

begin
select	b.cd_pessoa_fisica,
	b.nr_cartao_nac_sus,
	b.dt_nascimento,
	b.ie_sexo,
	b.nr_seq_cor_pele,
	upper(b.nm_pessoa_fisica),
	a.cd_estabelecimento,
	substr(obter_compl_pf(b.cd_pessoa_fisica, 1, 'CDM'),1,6),
	upper(coalesce(substr(obter_compl_pf(b.cd_pessoa_fisica, 5, 'N'),1,60),substr(obter_nome_pf(b.cd_pessoa_mae),1,60))),
	a.dt_entrada,
	b.nr_cep_cidade_nasc,
	coalesce(substr(obter_compl_pf(b.cd_pessoa_fisica, 1, 'TLS'),1,3),''),
	a.ie_tipo_atendimento,
	upper(substr(obter_compl_pf(b.cd_pessoa_fisica, 3, 'N'),1,60)),
	substr(obter_compl_pf(b.cd_pessoa_fisica, 1, 'CEP'),1,15),
	substr(obter_compl_pf(b.cd_pessoa_fisica, 1, 'EN'),1,80),
	substr(obter_compl_pf(b.cd_pessoa_fisica, 1, 'NR'),1,10),
	substr(obter_compl_pf(b.cd_pessoa_fisica, 1, 'UF'),1,5),
	upper(substr(obter_nome_pf(a.cd_pessoa_responsavel),1,60)),
	b.cd_municipio_ibge,
	b.cd_nacionalidade,
	substr(obter_dados_pf(b.cd_pessoa_fisica,'I'),1,5),
	b.ie_grau_instrucao,
	b.nr_pis_pasep,
	substr(somente_numero(b.nr_identidade),1,11),
	substr(b.nr_cert_nasc,1,11) nr_cert_nasc,
	substr(b.nr_matricula_nasc,1,32) nr_matricula_nasc,
	b.nr_cpf,
	coalesce(Sus_Obter_Cor_Pele(b.cd_pessoa_fisica, 'C'),'0') cd_cor_pele_sus,
	coalesce(sus_obter_etnia(b.cd_pessoa_fisica, 'C'),'0000') cd_etnia,
	substr(obter_compl_pf(b.cd_pessoa_fisica,1,'B'),1,255),
	b.nr_ddd_celular,
	b.nr_telefone_celular,
	obter_compl_pf(b.cd_pessoa_fisica, 1, 'DDT') nr_ddd_compl,
	obter_compl_pf(b.cd_pessoa_fisica, 1, 'T')nr_telefone_compl
into STRICT	cd_pessoa_fisica_w,
	nr_cartao_nac_sus_w,
	dt_nascimento_w,
	ie_sexo_w,
	nr_seq_cor_pele_w,
	nm_pessoa_w,
	cd_estabelecimento_w,
	cd_municipio_ibge_w,
	nm_mae_w,
	dt_entrada_w,
	nr_cep_cidade_nasc_w,
	cd_tipo_logradouro_w,
	ie_tipo_atendimento_w,
	nm_responsavel_w,
	cd_cep_w,
	ds_endereco_w,
	nr_endereco_w,
	sg_estado_w	,
	nm_resp_atend_w,
	cd_mun_ibge_natal_pf_w,
	cd_nacionalidade_w,
	nr_idade_w,
	ie_grau_instrucao_w,
	nr_pis_pasep_w,
	nr_identidade_w,
	nr_cert_nasc_w,
	nr_matricula_nasc_w,
	nr_cpf_w,
	cd_cor_pele_sus_w,
	cd_etnia_w,
	ds_bairro_w,
	nr_ddd_celular_w,
	nr_telefone_celular_w,
	nr_ddd_telefone_compl_w,
	nr_fone_celular_compl_w
from	atendimento_paciente a,
	pessoa_fisica b
where	b.cd_pessoa_fisica	= a.cd_pessoa_fisica
and	a.nr_atendimento	= nr_atendimento_p;
exception
	when others then
	nr_cartao_nac_sus_w	:= null;
	dt_nascimento_w		:= null;
	ie_sexo_w		:= null;
	nr_seq_cor_pele_w		:= null;
	cd_municipio_ibge_w	:= null;
end;

/*Obter parametros de Faturamento*/

begin
select	coalesce(ie_regra_tipo_atend,'A'),
		coalesce(dt_competencia_sus, null)
into STRICT	ie_regra_tipo_atend_w,
		dt_competencia_sus_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w  LIMIT 1;
exception
when others then
	ie_regra_tipo_atend_w := 'A';
end;

if (coalesce(ie_regra_tipo_atend_w,'A') = 'C') then
	begin
	select	coalesce(max(ie_tipo_atend_conta),ie_tipo_atendimento_w)
	into STRICT	ie_tipo_atendimento_w
	from 	conta_paciente
	where 	nr_interno_conta = nr_interno_conta_p;
	exception
		when others then
		ie_tipo_atendimento_w:= ie_tipo_atendimento_w;
	end;
end if;

if (ie_tipo_atendimento_w	= 1) then
	cd_proc_real_aih_w	:= sus_obter_proced_aih_unif(nr_interno_conta_p, 2, 'C');
	if (sus_validar_regra(nr_seq_regra_p => 32,cd_procedimento_p => cd_proc_real_aih_w,ie_origem_proced_p => 7,dt_competencia_p => dt_competencia_sus_w) > 0) then
		qt_proc_cns_w	:= 1;
	end if;
elsif (ie_tipo_atendimento_w	<> 1) then
	select	count(1)
	into STRICT	qt_proc_cns_w
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_conta_p
	and	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	((sus_validar_regra(32, cd_procedimento, ie_origem_proced, dt_procedimento) > 0) or (sus_obter_se_consiste_cns(cd_procedimento, ie_origem_proced) = 'S'))  LIMIT 1;
end if;

select	count(1)
into STRICT	qt_apac_w
from	procedimento_paciente
where	nr_interno_conta	= nr_interno_conta_p
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	sus_obter_se_proc_apac(nr_sequencia, cd_procedimento) = 'S'  LIMIT 1;

select	count(1)
into STRICT	qt_aih_w
from	procedimento_paciente
where	nr_interno_conta	= nr_interno_conta_p
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	sus_obter_se_proc_aih(nr_sequencia, cd_procedimento) = 'S'  LIMIT 1;

select	count(1)
into STRICT	qt_bpa_i_w
from	procedimento_paciente
where	nr_interno_conta	= nr_interno_conta_p
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	coalesce(sus_obter_tiporeg_bpa(cd_procedimento,ie_origem_proced,'C',dt_procedimento),'0') = '2'  LIMIT 1;

begin
select	coalesce(ie_exporta_resp,'C'),
        coalesce(ie_ordem_telefone_pac,'TC')
into STRICT	ie_exporta_resp_aih_w,
        ie_ordem_telefone_pac_w
from	sus_parametros_aih
where	cd_estabelecimento	= cd_estabelecimento_w  LIMIT 1;
exception
when no_data_found then
        ie_exporta_resp_aih_w := 'C';
        ie_ordem_telefone_pac_w := 'TC';
when too_many_rows then
	ie_exporta_resp_aih_w := 'C';
        ie_ordem_telefone_pac_w := 'TC';
end;

nr_ddd_fone_pac_w := '0';
nr_telefone_pac_w := '0';


if	ie_ordem_telefone_pac_w = 'TC' then

	nr_ddd_fone_pac_w := substr(somente_numero(trim(both coalesce(nr_ddd_telefone_compl_w,nr_ddd_celular_w))),1,3);
	nr_telefone_pac_w := substr(somente_numero(trim(both coalesce(nr_fone_celular_compl_w,nr_telefone_celular_w))),1,11);
else
	nr_ddd_fone_pac_w := substr(somente_numero(trim(both coalesce(nr_ddd_celular_w,nr_ddd_telefone_compl_w))),1,3);
	nr_telefone_pac_w := substr(somente_numero(trim(both coalesce(nr_telefone_celular_w,nr_fone_celular_compl_w))),1,11);
end if;


begin
select	coalesce(ie_exporta_resp,'C')
into STRICT	ie_exporta_resp_apac_w
from	sus_parametros_apac
where	cd_estabelecimento	= cd_estabelecimento_w  LIMIT 1;
exception
when others then
	ie_exporta_resp_apac_w := 'C';	
end;

begin
select	cd_raca_cor_sus
into STRICT	cd_raca_cor_sus_w
from	cor_pele
where	nr_sequencia	= nr_seq_cor_pele_w;
exception
	when others then
	cd_raca_cor_sus_w	:= null;
end;

/* Ler o parametro 86 - Forma de cadastramento da cidade natal das pessoas fisicas do Menu do Sistema */

varceplocalidade_w := obter_param_usuario(0, 86, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, varceplocalidade_w);
/* 13 - Nome da mae igual ao nome do paciente */

if (sus_obter_inco_atv_conta(13,nr_interno_conta_p,null)) and (nm_pessoa_w	= nm_mae_w) then
	--ds_detalhe_w	:= substr('Nome paciente: ' || nm_pessoa_w || ';  Nome mae: ' || nm_mae_w || '; Atend: ' || nr_atendimento_p,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299696, 'NM_PESSOA=' || nm_pessoa_w || ';NM_MAE=' || nm_mae_w || ';NR_ATENDIMENTO=' || nr_atendimento_p),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 13, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;

/* 14 - Municipio IBGE nao informado */

if (sus_obter_inco_atv_conta(14,nr_interno_conta_p,null)) and
	((cd_municipio_ibge_w = '') or (coalesce(cd_municipio_ibge_w::text, '') = '')) then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 14, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;

if (sus_obter_inco_atv_conta(17,nr_interno_conta_p,null)) and (dt_nascimento_w IS NOT NULL AND dt_nascimento_w::text <> '') then
	/* 17 - Data de nascimento maior que a data da internacao */

	if (dt_nascimento_w	> dt_entrada_w) then
		--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nascimento: '|| dt_nascimento_w || ' ; Entrada: ' || dt_entrada_w,1,255);
		ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299726, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';DT_NASCIMENTO=' || dt_nascimento_w || ';DT_ENTRADA=' || dt_entrada_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 17, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
elsif (sus_obter_inco_atv_conta(18,nr_interno_conta_p,null)) and (coalesce(dt_nascimento_w::text, '') = '') then
	/* 18 - Data de nascimento do paciente nao informada */


	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nascimento: ' || dt_nascimento_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299729, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';DT_NASCIMENTO=' || dt_nascimento_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 18, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;
/* 24 - CNS do paciente nao informado */

if (ie_tipo_atendimento_w = 1) then
	begin
	select	max(cd_carater_internacao),
		coalesce(max(ie_codigo_autorizacao),0),
                max(ds_justificativa_cns)
        into STRICT	cd_carater_internacao_w,
		ie_codigo_autorizacao_w,
                ds_justificativa_cns_w
	from	sus_aih_unif
	where	nr_interno_conta	= nr_interno_conta_p
	and	nr_atendimento		= nr_atendimento_p;
	exception
		when others then
		cd_carater_internacao_w	:= null;
		ie_codigo_autorizacao_w := 0;
                ds_justificativa_cns_w  := null;
	end;
	
	if (ie_codigo_autorizacao_w = 0) then
		begin
		
		select	count(1)
		into STRICT	qt_dados_aih_conta_w
		from	sus_dados_aih_conta
		where	nr_interno_conta = nr_interno_conta_p  LIMIT 1;
		
		if (qt_dados_aih_conta_w > 0) then
			begin
			
			select	coalesce(ie_codigo_autorizacao,0)
			into STRICT	ie_codigo_autorizacao_w
			from	sus_dados_aih_conta
			where	nr_interno_conta = nr_interno_conta_p;
			
			end;
		end if;
		end;
	end if;
	
else
	begin
	select	max(cd_carater_internacao)
	into STRICT	cd_carater_internacao_w
	from	sus_apac_unif
	where	nr_interno_conta	= nr_interno_conta_p
	and	nr_atendimento		= nr_atendimento_p;
	exception
		when others then
		cd_carater_internacao_w	:= null;
	end;
end if;
if (sus_obter_inco_atv_conta(24,nr_interno_conta_p,null)) and (coalesce(sus_verificar_codigo_autor(coalesce(ie_codigo_autorizacao_w,0),'CNS'),'N') = 'N') and (qt_proc_cns_w > 0) and
	((coalesce(nr_cartao_nac_sus_w::text, '') = '') or (nr_cartao_nac_sus_w = '')) and
	((cd_carater_internacao_w <> '02') or (coalesce(cd_carater_internacao_w::text, '') = '')) then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 24, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;
/* 25 - Sexo do paciente nao informado */

if (sus_obter_inco_atv_conta(25,nr_interno_conta_p,null)) and
	((coalesce(ie_sexo_w::text, '') = '') or (ie_sexo_w = '')) then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 25, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;
/* 26 - Raca/cor do paciente nao informado */

if (sus_obter_inco_atv_conta(26,nr_interno_conta_p,null)) and
	((coalesce(nr_seq_cor_pele_w::text, '') = '') or (nr_seq_cor_pele_w = '')) then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 26, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;
/* 28 - Cidade natal do paciente incorreta */

if (sus_obter_inco_atv_conta(28,nr_interno_conta_p,null)) then
	if (varceplocalidade_w = 'L') then
	
		begin
		select	count(1)
		into STRICT	qt_cidade_nasc_w
		from	cep_localidade_v
		where	cd_cep	= somente_numero(nr_cep_cidade_nasc_w)  LIMIT 1;
		exception
		when others then
			select	count(1)
			into STRICT	qt_cidade_nasc_w
			from	cep_localidade_v
			where	cd_cep	= nr_cep_cidade_nasc_w  LIMIT 1;
		end;	
	elsif (varceplocalidade_w = 'I') then
		nr_cep_cidade_nasc_w	:= cd_mun_ibge_natal_pf_w;
		select	count(1)
		into STRICT	qt_cidade_nasc_w
		from	sus_municipio
		where	cd_municipio_ibge = nr_cep_cidade_nasc_w  LIMIT 1;
	end if;
	if	((qt_cidade_nasc_w = 0) or (coalesce(nr_cep_cidade_nasc_w::text, '') = '')) then
		--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
		ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 28, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
end if;
/* 35 - Tipo do logradouro do paciente nao informado */


/*Retirei restricao para consistir somente para internado Ronaldo 01/08 */

if (sus_obter_inco_atv_conta(35,nr_interno_conta_p,null))  and
	((coalesce(cd_tipo_logradouro_w::text, '') = '') or (cd_tipo_logradouro_w = '')) then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 35, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;

if	(qt_aih_w	> 0 AND ie_exporta_resp_aih_w = 'A') or
	(qt_apac_w	> 0 AND ie_exporta_resp_apac_w = 'A') then
	nm_responsavel_w	:= nm_resp_atend_w;
end if;
/* 39 - Responsavel do paciente nao informado, atendimento AIH e APAC */

if (sus_obter_inco_atv_conta(39,nr_interno_conta_p,null)) and
	((qt_aih_w > 0) or (qt_apac_w > 0)) and
	((coalesce(nm_responsavel_w::text, '') = '') or (nm_responsavel_w = '')) and
	((nr_idade_w < 18) or (nr_idade_w > 65))  then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 39, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;
/* 42 - Cadastro de cor da pele sem relacionamento com codigo SUS */

if (sus_obter_inco_atv_conta(42,nr_interno_conta_p,null)) and (coalesce(cd_raca_cor_sus_w::text, '') = '') then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 42, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;
/* 46 - CEP do paciente nao informado*/

if (sus_obter_inco_atv_conta(46,nr_interno_conta_p,null)) then
	begin	
	if (coalesce(cd_cep_w,'X') = 'X') then
		begin
		--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
		ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 46, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;
	end;
end if;
/* 47 - Endereco do paciente nao informado*/

if (sus_obter_inco_atv_conta(47,nr_interno_conta_p,null)) and (coalesce(ds_endereco_w::text, '') = '') and
	((qt_aih_w > 0) or (qt_apac_w > 0) or (qt_bpa_i_w > 0)) then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 47, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;
/* 48 - Numero residencial do paciente nao informado*/

if (sus_obter_inco_atv_conta(48,nr_interno_conta_p,null)) and (coalesce(nr_endereco_w::text, '') = '') then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 48, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;
/* 76 - CEP municipio e UF incompativeis */

if (sus_obter_inco_atv_conta(76,nr_interno_conta_p,null)) then
	begin
	
	begin
	select	coalesce(cd_municipio_ibge,'0')
	into STRICT	cd_mun_ibge_tabela_w
	from	sus_cep
	where	cd_cep	= cd_cep_w  LIMIT 1;	
	exception
	when others then
		cd_mun_ibge_tabela_w := '0';		
	end;

	if (cd_mun_ibge_tabela_w <> '0') and (cd_mun_ibge_tabela_w <> cd_municipio_ibge_w) then
		--ds_detalhe_w	:= substr('CEP: ' || cd_cep_w || '; Mun. IBGE CEP: ' || cd_mun_ibge_tabela_w || '; Mun. IBGE paciente: ' || cd_municipio_ibge_w,1,255);
		ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299730, 'CD_CEP=' || cd_cep_w || ';CD_MUN_IBGE_TABELA=' || cd_mun_ibge_tabela_w || ';CD_MUNICIPIO_IBGE=' ||cd_municipio_ibge_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 76, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end if;
	end;
end if;
/* 82 - Nome da mae do paciente nao informado */

if (sus_obter_inco_atv_conta(82,nr_interno_conta_p,null)) then
	begin
	if (coalesce(nm_mae_w,'X') = 'X') then
		begin
		--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
		ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 82, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;
	end;
end if;
/* 101 - Nacionalidade do paciente nao informado */

if (sus_obter_inco_atv_conta(101,nr_interno_conta_p,null)) then
	begin
	if (coalesce(cd_nacionalidade_w::text, '') = '') then
		begin
		--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
		ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 101, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;
	end;
end if;

open c01;
loop
fetch c01 bulk collect into s_array limit 100000;
	vetor_c01_w(i) := s_array;
	i := i + 1;
EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

for i in 1..vetor_c01_w.count loop
	begin
	s_array := vetor_c01_w(i);
	for z in 1..s_array.count loop
		begin
		
		cd_procedimento_w := s_array[z].cd_procedimento;
		dt_procedimento_w := s_array[z].dt_procedimento;
			
		if (sus_obter_inco_ativa_proc(111,cd_procedimento_w)) then
			qt_proc_bpa_cns_w := qt_proc_bpa_cns_w + 1;
		end if;
		
		if      ((sus_obter_inco_ativa_proc(168,cd_procedimento_w)) and (Sus_Obter_Se_Detalhe_Proc(cd_procedimento_w,7,'034',dt_procedimento_w) = 0) and (Sus_Obter_Se_Detalhe_Proc(cd_procedimento_w,7,'34',dt_procedimento_w) = 0)) then
			begin
			if (sus_obter_tiporeg_proc(cd_procedimento_w, 7,'C',1) = 2) then
				if (Sus_Obter_Se_Detalhe_Proc(cd_procedimento_w,7,'009',dt_procedimento_w) > 0) then
					qt_proc_bpa_w := qt_proc_bpa_w + 1;				
				end if;
			else
				qt_proc_bpa_w := qt_proc_bpa_w + 1;
			end if;		
			end;
		end if;	
		end;
	end loop;
	end;
end loop;

/* 111 - CNS do paciente duplicado */

if (qt_proc_bpa_cns_w	> 0) then
	begin

	select	count(nr_cartao_nac_sus)
	into STRICT	qt_cns_duplic_w
	from	pessoa_fisica
	where	nr_cartao_nac_sus	= nr_cartao_nac_sus_w;

	if (qt_cns_duplic_w > 1) then
		begin
		--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
		ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 111, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;

	end;
end if;

if (sus_obter_inco_atv_conta(120,nr_interno_conta_p,null)) then
	begin
	select	count(1)
	into STRICT	qt_cep_sus_w
	from	sus_cep
	where	cd_cep	= lpad(cd_cep_w,8,'0')  LIMIT 1;

	if (qt_cep_sus_w = 0) then
		begin
		--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w || '; Cep: ' || cd_cep_w,1,255);
		ds_detalhe_w	:= substr(wheb_mensagem_pck.get_texto(299732, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w || ';CD_CEP=' || cd_cep_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 120, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;
	end;
end if;

if (sus_obter_inco_atv_conta(135,nr_interno_conta_p,null)) and (coalesce(sus_verificar_codigo_autor(coalesce(ie_codigo_autorizacao_w,0),'CNS'),'N') = 'N') then
	begin
	if (nr_cartao_nac_sus_w IS NOT NULL AND nr_cartao_nac_sus_w::text <> '') then
		begin	
		
		begin		
		ie_cns_inconsistente_w	:= consistir_digito('CARTAOSUS', nr_cartao_nac_sus_w);
		exception
		when others then
			ie_cns_inconsistente_w := 'N';	
		end;
		
		if (ie_cns_inconsistente_w	<> 'S') then
			begin
			--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w || '; CNS: ' || nr_cartao_nac_sus_w,1,255);
			ds_detalhe_w	:= substr(wheb_mensagem_pck.get_texto(299733, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w || ';NR_CARTAO_NAC_SUS=' || nr_cartao_nac_sus_w),1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 135, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
		end;
	end if;
	end;
end if;

if (sus_obter_inco_atv_conta(136,nr_interno_conta_p,null)) then
	begin
	if (cd_municipio_ibge_w IS NOT NULL AND cd_municipio_ibge_w::text <> '') then
		begin
		select	coalesce(max(ie_importacao_sus),'N')
		into STRICT	ie_ibge_inconsistente_w
		from	sus_municipio
		where	cd_municipio_ibge = cd_municipio_ibge_w;
		if (ie_ibge_inconsistente_w <> 'S') then
			begin
			--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w || '; CD IBGE: ' || cd_municipio_ibge_w,1,255);
			ds_detalhe_w	:= substr(wheb_mensagem_pck.get_texto(299739, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w || ';CD_MUNICIPIO_IBGE=' || cd_municipio_ibge_w),1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 136, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end;
		end if;
		end;
	end if;
	end;
end if;

if (sus_obter_inco_atv_conta(156,nr_interno_conta_p,null)) then
	begin
	if (coalesce(sg_estado_w,'X') = 'X') then
		begin
		--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
		ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 156, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end;
	end if;
	end;
end if;

if (qt_proc_bpa_w > 0) and
	((coalesce(nr_cartao_nac_sus_w::text, '') = '') or (nr_cartao_nac_sus_w = '')) and (coalesce(sus_verificar_codigo_autor(coalesce(ie_codigo_autorizacao_w,0),'CNS'),'N') = 'N') then
	begin
	--ds_detalhe_w    := substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 168, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
	end;
end if;

if (sus_obter_inco_atv_conta(181,nr_interno_conta_p,null)) and (nm_pessoa_w	= nm_responsavel_w) and (obter_idade(dt_nascimento_w,clock_timestamp(),'A') < 18) then
	--ds_detalhe_w	:= substr('Nome paciente: ' || nm_pessoa_w || ';  Nome Responsavel: ' || nm_responsavel_w || '; Atend: ' || nr_atendimento_p,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299748, 'NM_PESSOA=' || nm_pessoa_w || ';NM_RESPONSAVEL=' || nm_responsavel_w || ';NR_ATENDIMENTO=' ||nr_atendimento_p ),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 181, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;

if (sus_obter_inco_atv_conta(199,nr_interno_conta_p,null)) and (coalesce(ie_grau_instrucao_w,0) = 0) and (coalesce(sus_validar_regra(nr_seq_regra_p => 6,cd_procedimento_p => sus_obter_proced_aih_unif(nr_interno_conta_p, 2, 'C'),ie_origem_proced_p => 7,dt_competencia_p  => dt_competencia_sus_w),0) > 0) then
	--ds_detalhe_w    := substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 199, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;
/*206 - Documentos do paciente nao informados*/

if (sus_obter_inco_atv_conta(206,nr_interno_conta_p,null)) and (nr_idade_w >= 18) and (coalesce(nr_pis_pasep_w,'X') = 'X') and (coalesce(nr_identidade_w,'0') = '0') and (coalesce(nr_cert_nasc_w,'X') = 'X') and (coalesce(nr_matricula_nasc_w,'X') = 'X') and (coalesce(nr_cpf_w,'X') = 'X') then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p ||'; Paciente: ' || substr(nm_pessoa_w,1,60)||'; Conta:'|| nr_interno_conta_p,1,255); 
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299752, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' ||  substr(nm_pessoa_w,1,60) || ';NR_INTERNO_CONTA=' || nr_interno_conta_p),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 206, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);	
end if;
/*216 - Falta a informacao do telefone do paciente*/
if (sus_obter_inco_atv_conta(216,nr_interno_conta_p,null)) and (coalesce(sus_verificar_codigo_autor(coalesce(ie_codigo_autorizacao_w,0),'TEL'),'N') = 'N') and
	(((length(nr_telefone_pac_w) < 10) and (coalesce(nr_ddd_fone_pac_w,'0') = '0')) or (coalesce(nr_telefone_pac_w,'0') = '0')) then
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299755, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' ||  substr(nm_pessoa_w,1,60) || ';NR_DDD_FONE_PAC=' || nr_ddd_fone_pac_w || ';NR_TELEFONE_PAC=' || nr_telefone_pac_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 216, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);	
end if;
/*223 - UF de residencia do paciente diferente da do estabelecimento*/

if (sus_obter_inco_atv_conta(223,nr_interno_conta_p,null)) then
	begin
	
	sg_estado_estab_w := obter_dados_pf_pj(null,obter_cgc_estabelecimento(cd_estabelecimento_w),'UF');	
	
	if (coalesce(sg_estado_estab_w,'X') <> 'X') and (coalesce(sg_estado_w,'X') <> 'X') and (sg_estado_estab_w <> sg_estado_w) then
		begin
		--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p ||'; Paciente: ' || substr(nm_pessoa_w,1,60)||'; UF Resid:'|| sg_estado_w ||'; UF Estab:'|| sg_estado_estab_w,1,255); 
		ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299765, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' ||  substr(nm_pessoa_w,1,60) || ';SG_ESTADO=' || sg_estado_w || ';SG_ESTADO_ESTAB=' || sg_estado_estab_w),1,255);
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 223, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);	
		end;
	end if;
	
	end;
end if;

if (sus_obter_inco_atv_conta(233,nr_interno_conta_p,null)) and
        ((coalesce(nr_cartao_nac_sus_w::text, '') = '') or (coalesce(nr_cartao_nac_sus_w,'X') = 'X')) and
        ((coalesce(sus_verificar_codigo_autor(coalesce(ie_codigo_autorizacao_w,0),'CNS'),'N') = 'N') or (coalesce(trim(both ds_justificativa_cns_w)::text, '') = '')) then
	begin
	--ds_detalhe_w    := substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 233, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);	
	end;
end if;

/* 243 - Sexo do paciente esta informado como 'Indeterminado' */

if (sus_obter_inco_atv_conta(243,nr_interno_conta_p,null)) and (coalesce(ie_sexo_w,'X') <> 'X') and (ie_sexo_w = 'I') then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w,1,255);
	ds_detalhe_w	:= SUBSTR(wheb_mensagem_pck.get_texto(299700, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 243, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;

/* 249 - Etnia nao informada no cadastro do paciente */

if (sus_obter_inco_atv_conta(249,nr_interno_conta_p,null)) and (coalesce(cd_cor_pele_sus_w,'0') = '5') and (coalesce(cd_etnia_w,'0000') = '0000') then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w ||'; Codigo: '|| cd_pessoa_fisica_w,1,255);
	ds_detalhe_w	:= substr(wheb_mensagem_pck.get_texto(299760, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w || ';CD_PESSOA_FISICA=' || cd_pessoa_fisica_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 249, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;

if (sus_obter_inco_atv_conta(258,nr_interno_conta_p,null)) and (coalesce(ds_bairro_w,'X') = 'X') then
	--ds_detalhe_w	:= substr('Atendimento: ' || nr_atendimento_p || '; Nome paciente: ' || nm_pessoa_w ||'; Codigo: '|| cd_pessoa_fisica_w,1,255);
	ds_detalhe_w	:= substr(wheb_mensagem_pck.get_texto(299760, 'NR_ATENDIMENTO=' || nr_atendimento_p || ';NM_PESSOA=' || nm_pessoa_w || ';CD_PESSOA_FISICA=' || cd_pessoa_fisica_w),1,255);
	CALL sus_gravar_inconsistencia(nr_interno_conta_p, 258, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_dados_pf (nr_interno_conta_p bigint, nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;

