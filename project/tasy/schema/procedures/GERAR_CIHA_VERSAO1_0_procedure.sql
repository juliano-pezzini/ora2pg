-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_ciha_versao1_0 (nr_seq_lote_p bigint, ie_consiste_municipio_ibge_p text, ie_gerar_atend_sem_alta_uti_p text, ie_restringer_estab_atend_p text, ie_gerar_pac_cronico_p text, ds_motivo_alta_p text, ie_gera_atend_lote_p text, ds_versao_p text, ds_tipo_atend_gera_p text default '', cd_convenio_gera_p bigint default 0, cd_categoria_gera_p bigint default 0, ds_plano_gera_p text default '', cd_estabelecimento_p bigint DEFAULT NULL, nm_usuario_p text DEFAULT NULL, cd_fonte_remuner_cih_p text DEFAULT NULL) AS $body$
DECLARE


ie_somente_internado_w		varchar(1);
ie_gerar_consistentes_w		varchar(1);
ie_retirar_dia_uti_w		varchar(1);
dt_inicio_internacao_w		timestamp;
dt_fim_internacao_w		timestamp;
cd_estabelecimento_w		integer;
qt_horas_internados_w		smallint;
ie_consolidado_w		varchar(1) := 'N';
ie_tipo_reg_interface_w		numeric(22);
nm_paciente_w			varchar(60);
nm_logradouro_w			varchar(25);
nr_endereco_w			varchar(5);
ds_complemento_w		varchar(15);
cd_municipio_ibge_w		varchar(6);
sg_estado_paciente_w		compl_pessoa_fisica.sg_estado%type;
cd_cep_w			varchar(8);
dt_nascimento_w			timestamp;
ie_sexo_w			varchar(1);
cd_cns_w			varchar(20);
cd_procedimento_w		bigint;
cd_cid_primario_w		varchar(10);
cd_cid_secundario_w		varchar(10);
cd_cid_primario_conv_w		varchar(10);
cd_cid_secundario_conv_w	varchar(10);
dt_entrada_w			timestamp;
dt_alta_w			timestamp;
cd_motivo_alta_w		numeric(22);
cd_motivo_alta_ww		numeric(22);
ie_fonte_remuner2_w		varchar(10);
ds_procedimento_w		varchar(40);
cd_doenca_cid_w			varchar(10);
cd_ans_w			varchar(6);
cd_cnpj_conv_w			varchar(14);
cd_usuario_convenio_w		varchar(30);
nr_declaracao_obito_w		varchar(10);
qt_filhos_vivos_w		smallint;
doc_nasc1_w			varchar(11);
doc_nasc2_w			varchar(11);
doc_nasc3_w			varchar(11);
doc_nasc4_w			varchar(11);
doc_nasc5_w			varchar(11);
qt_dias_int_uti_w		smallint;
qt_dias_uti_w			bigint;
nr_prontuario_w			bigint;
nr_atendimento_w		bigint;
dt_competencia_w		timestamp;
dt_competencia_consolidado_w	timestamp;
dt_competencia_lote_w		timestamp;
cd_cnes_w			integer;
ie_tipo_convenio_w		smallint;
ie_consistente_w		varchar(1);
qtd_atendimento_w		bigint;
cd_modalidade_w			smallint;
ie_somente_ambulatorial_w	varchar(1);
cd_proc_atendimento_w		bigint;
ie_origem_proced_atend_w	bigint;
ie_origem_proced_w		bigint;
cd_proc_convertido_sus_w	bigint;
ie_origem_proced_sus_w		bigint;
cd_proc_generico_sus_w		bigint;
ds_proc_generico_sus_w		varchar(40);
qt_proc_cih_existe_w		bigint;
nr_seq_lote_item_w		bigint;
nr_seq_lote_item_amb_w		bigint;
nr_seq_lote_item_int_w		bigint;
ds_tipo_atend_gera_w		varchar(255);
ds_plano_gera_w			varchar(255);
ie_origem_proced_consolid_w	bigint;
cd_pessoa_fisica_w		varchar(20);
nr_seq_proc_cih_w		bigint;
cd_cnpj_w			varchar(14);
ie_bloqueio_inconsistente_w	varchar(1);
cd_convenio_gera_w		bigint;
cd_categoria_gera_w		bigint;
ie_tipo_atendimento_w		smallint;
nr_prontuario_estab_w		bigint;
cd_cid_primario_cih_w		varchar(10);
cd_cid_secundario_cih_w		varchar(10);
cd_convenio_w			varchar(10);
cd_proc_cih_generico_w		bigint;
ds_proc_cih_generico_w		varchar(40);
ie_generico_w			varchar(1) := 'N';
dt_alta_conta_w			timestamp;
cd_motivo_alta_conta_w		bigint;
cd_ans_consolidado_w		varchar(6);
ie_fonte_rem2_consol_w		varchar(10);
nr_doc_convenio_w		varchar(20);
nr_guia_tiss_w			varchar(20);


ie_opcao_cid_w			varchar(10);
var_ignorar_clinicas_w		varchar(255);
ie_zeros_esq_cep_w		varchar(1);
var_tipo_convenio_w		varchar(255);
ie_gera_atend_sem_conta_w	varchar(1);
ie_gera_amb_consolidados_w	varchar(1);
ie_gera_cid_4_caracteres_w	varchar(1);
ie_gera_proced_conta_w		varchar(1);
ie_consiste_tipo_reg_proc_w	varchar(1);
ie_tratar_externos_mod_proc_w	varchar(1);
ie_forma_define_tipo_atend_w	varchar(1);
ie_bloquear_reg_sem_proced_w	varchar(1);
ie_gerar_cid_diag_atend_w	varchar(1);
ie_gerar_log_consolidados_w	varchar(1);
ie_exclui_proc_cih_w		varchar(1);
ie_prontuario_estab_w		varchar(1);
ds_classif_ignorar_w		varchar(255);
ds_tipo_at_exclui_proc_cih_w	varchar(255);
ie_considera_proc_cih_amb_w	varchar(1);
ie_busca_cid_proc_cih_w		varchar(1);
ie_limpa_cid_generico_w		varchar(1);
ie_permite_cid_preliminar_w	varchar(1);
ie_considera_proc_cih_w		varchar(1);
ie_considera_rn_w		varchar(1);
ie_atend_amb_entrada_w		varchar(1);
ie_clinica_w			integer;
ie_gerar_nr_conta_guia_tiss_w	varchar(1);
qtd_procedimento_w		procedimento_paciente.cd_procedimento%type;
cd_estabs_a_gerar_w		varchar(255);
ie_alta_sus_w			varchar(1);
nr_seq_proc_interno_w	procedimento_paciente.nr_seq_proc_interno%type;
NR_SEQ_SUS_PROC_INT_GEN_w	PROC_INTERNO_CONV_SUS.NR_SEQ_SUS_PROC_INT_GEN%type;
nr_seq_interno_w		atend_categoria_convenio.nr_seq_interno%type;
qt_sus_dias_uti_w		bigint;
nr_decl_obito_c02_w		varchar(10);
qt_int_dias_uti_c02_w		bigint;
C02 CURSOR FOR
	SELECT	a.nr_atendimento,
		a.cd_pessoa_fisica,
		a.ie_tipo_atendimento,
		t.cd_convenio,
		coalesce(a.ie_clinica,0),
		t.nr_seq_interno,
		sus_obter_dias_uti(a.nr_atendimento),
		lpad(substr(Obter_Declaracao_Obito(a.nr_atendimento),1,8),8,'0'),
		obter_dias_internacao_uti(a.nr_atendimento)
	FROM atend_categoria_convenio t, convenio f, atendimento_paciente a, pessoa_fisica b
LEFT OUTER JOIN compl_pessoa_fisica c ON (b.cd_pessoa_fisica = c.cd_pessoa_fisica AND 1 = c.ie_tipo_complemento)
WHERE a.cd_pessoa_fisica 		= b.cd_pessoa_fisica  and t.cd_convenio = f.cd_convenio and coalesce(a.dt_cancelamento::text, '') = ''  and coalesce(a.ie_tipo_convenio,1)	<> 3 and t.nr_seq_interno = (SELECT	coalesce(max(z.nr_seq_interno),0) from atend_categoria_convenio z where z.nr_atendimento = a.nr_atendimento  and z.dt_inicio_vigencia = 	
									(select max(y.dt_inicio_vigencia)	from atend_categoria_convenio y	where y.nr_atendimento 		= a.nr_atendimento)) and coalesce(c.cd_municipio_ibge,1)	<>  '999999' and (a.ie_tipo_atendimento = 1 or ie_somente_internado_w = 'N') and (((a.ie_tipo_atendimento = 8) or ((a.ie_tipo_atendimento in (3,7,8)) and (ie_forma_define_tipo_atend_w = 1)) ) or coalesce(ie_somente_ambulatorial_w,'N') = 'N') and ((ds_tipo_atend_gera_w = 'X') or (coalesce(a.ie_tipo_atendimento,-1) in (select m.cd_registro from table(lista_pck.obter_lista_char(ds_tipo_atend_gera_p)) m ))) and ((ie_atend_amb_entrada_w = 'N' and a.dt_alta_interno between dt_inicio_internacao_w and dt_fim_internacao_w + 86399/86400) or		
		(ie_atend_amb_entrada_w	= 'S' and (	(a.ie_tipo_atendimento = 1 and a.dt_alta_interno between dt_inicio_internacao_w and dt_fim_internacao_w + 86399/86400) or (a.ie_tipo_atendimento <> 1 and a.dt_entrada between dt_inicio_internacao_w and dt_fim_internacao_w + 86399/86400))) or (ie_atend_amb_entrada_w = 'T' and a.dt_entrada between dt_inicio_internacao_w and dt_fim_internacao_w + 86399/86400)) and ((qt_horas_internados_w = 0) or ((trunc((coalesce(a.dt_alta, clock_timestamp()) - a.dt_entrada) * 24) > qt_horas_internados_w) or (obter_se_motivo_alta_obito(a.cd_motivo_alta)= 'S'))) and ((substr(obter_se_alta_uti(a.nr_atendimento), 1,1) = 'N') or (ie_gerar_atend_sem_alta_uti_p = 'N')) and ((ie_restringer_estab_atend_p	= 'N') or (a.cd_estabelecimento	= cd_estabelecimento_p)) and (coalesce(cd_estabs_a_gerar_w::text, '') = '' or (coalesce(a.cd_estabelecimento,-1) in (select l.cd_registro from table(lista_pck.obter_lista_char(cd_estabs_a_gerar_w)) l ))) and ((ie_consiste_municipio_ibge_p = 'N') or (c.cd_municipio_ibge IS NOT NULL AND c.cd_municipio_ibge::text <> '')) and ((coalesce(ds_motivo_alta_p::text, '') = '') or (coalesce(a.cd_motivo_alta,-1) not in (select h.cd_registro from table(lista_pck.obter_lista_char(ds_motivo_alta_p)) h ))) and ((ie_gera_atend_lote_p = 'S') or (not exists (select 1 from lote_cih_item x where x.nr_atendimento = a.nr_atendimento))) and ((var_ignorar_clinicas_w = '0') or (coalesce(a.ie_clinica,-1) not in (select j.cd_registro from table(lista_pck.obter_lista_char(var_ignorar_clinicas_w)) j ))) and ((var_tipo_convenio_w = '0') or (coalesce(f.ie_tipo_convenio,-1) not in (select coalesce(r.cd_registro,-1) from table(lista_pck.obter_lista_char(var_tipo_convenio_w)) r ))) and ((coalesce(ds_classif_ignorar_w::text, '') = '') or (coalesce(a.nr_seq_classificacao,-1) not in (select k.cd_registro from table(lista_pck.obter_lista_char(ds_classif_ignorar_w)) k ))) and (cih_obter_se_atend_regra(a.nr_atendimento, t.cd_convenio) = 'S') and ((coalesce(ie_tipo_convenio_w::text, '') = '') or (f.ie_tipo_convenio = ie_tipo_convenio_w)) and (((ie_tipo_atendimento = 1) or (cd_convenio_gera_p = 0)) or (t.cd_convenio = cd_convenio_gera_p)) and (((ie_tipo_atendimento = 1) or (cd_categoria_gera_p = 0)) or (t.cd_categoria = cd_categoria_gera_p)) and (((ie_tipo_atendimento = 1) or (ds_plano_gera_w = 'X')) or (coalesce(t.cd_plano_convenio,-1) in (select l.cd_registro from table(lista_pck.obter_lista_char(ds_plano_gera_p)) l ))) and ((ie_considera_rn_w = 'S') or (coalesce(nr_atendimento_mae::text, '') = ''));

C03 CURSOR FOR
	SELECT	distinct a.cd_procedimento,
		a.ie_origem_proced,
		substr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,40),
		a.cd_doenca_cid,
		sum(a.qt_procedimento),
		a.nr_seq_proc_interno
	from	procedimento_paciente a
	where	a.nr_atendimento = nr_atendimento_w
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	((a.ie_origem_proced in (2, 3, 7))  or ( exists (	SELECT	1
				from	procedimento_conv_sus b
				where	b.cd_procedimento  = a.cd_procedimento
				and	b.ie_origem_proced = a.ie_origem_proced
				and	ie_tipo_atendimento_w = CASE WHEN coalesce(b.ie_tipo_atendimento::text, '') = '' THEN  ie_tipo_atendimento_w  ELSE b.ie_tipo_atendimento END
				and	coalesce(b.ie_clinica,ie_clinica_w) = ie_clinica_w
				
union

				select	1
				from	conversao_proc_ciha c
				where	c.cd_procedimento  = a.cd_procedimento
				and	c.ie_origem_proced = a.ie_origem_proced
				and	c.cd_estabelecimento = cd_estabelecimento_p
				and coalesce(c.ie_tipo_atend,ie_tipo_atendimento_w) = ie_tipo_atendimento_w
				
union

				select	1
				from	procedimento_conv_gen_sus c
				where	c.cd_procedimento  = a.cd_procedimento
				and	c.ie_origem_proced = a.ie_origem_proced
				and	coalesce(c.ie_clinica,ie_clinica_w) = ie_clinica_w
				
union

				select 1
				from	proc_interno_conv_sus d
				where	d.nr_seq_proc_interno = a.nr_seq_proc_interno
				and	ie_origem_proced_sus   = a.ie_origem_proced
				and	coalesce(ie_tipo_atendimento,ie_tipo_atendimento_w)  = ie_tipo_atendimento_w
				and	coalesce(ie_clinica,ie_clinica_w) = ie_clinica_w	
				
union

				select 1
				from	proc_interno_conv_sus d
				where	d.nr_seq_proc_interno = a.nr_seq_proc_interno								
				and	coalesce(ie_clinica,ie_clinica_w) = ie_clinica_w
				AND 	(d.NR_SEQ_SUS_PROC_INT_GEN IS NOT NULL AND d.NR_SEQ_SUS_PROC_INT_GEN::text <> '')
				)))
	group by	a.cd_procedimento,
			a.ie_origem_proced,
			a.cd_doenca_cid,
			a.nr_atendimento,
			a.nr_seq_proc_interno
	having	sum(a.qt_procedimento) > 0;

BEGIN

delete 	FROM lote_cih_item
where 	nr_seq_lote = nr_seq_lote_p;

delete 	FROM ciha_consolidado
where	nr_seq_lote = nr_seq_lote_p;
commit;

ie_opcao_cid_w := Obter_param_Usuario(8009, 15, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_opcao_cid_w);
var_ignorar_clinicas_w := Obter_param_Usuario(8009, 16, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, var_ignorar_clinicas_w);
ie_zeros_esq_cep_w := Obter_param_Usuario(8009, 17, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_zeros_esq_cep_w);
var_tipo_convenio_w := Obter_param_Usuario(8009, 18, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, var_tipo_convenio_w);
ie_gera_atend_sem_conta_w := Obter_param_Usuario(8009, 23, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gera_atend_sem_conta_w);
ie_gera_amb_consolidados_w := Obter_param_Usuario(8009, 24, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gera_amb_consolidados_w);
ie_gera_cid_4_caracteres_w := Obter_param_Usuario(8009, 26, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gera_cid_4_caracteres_w);
ie_consiste_tipo_reg_proc_w := Obter_param_Usuario(8009, 27, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_tipo_reg_proc_w);
ie_tratar_externos_mod_proc_w := Obter_param_Usuario(8009, 28, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_tratar_externos_mod_proc_w);
ie_bloquear_reg_sem_proced_w := Obter_param_Usuario(8009, 29, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_bloquear_reg_sem_proced_w);
ie_gerar_cid_diag_atend_w := Obter_param_Usuario(8009, 30, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_cid_diag_atend_w);
ie_gerar_log_consolidados_w := Obter_param_Usuario(8009, 31, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_log_consolidados_w);
ie_exclui_proc_cih_w := Obter_param_Usuario(8009, 32, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_exclui_proc_cih_w);
ie_prontuario_estab_w := Obter_param_Usuario(8009, 33, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_prontuario_estab_w);
ds_classif_ignorar_w := Obter_param_Usuario(8009, 35, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ds_classif_ignorar_w);
ds_tipo_at_exclui_proc_cih_w := Obter_param_Usuario(8009, 36, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ds_tipo_at_exclui_proc_cih_w);
ie_considera_proc_cih_amb_w := Obter_param_Usuario(8009, 37, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_considera_proc_cih_amb_w);
ie_busca_cid_proc_cih_w := Obter_param_Usuario(8009, 38, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_busca_cid_proc_cih_w);
ie_limpa_cid_generico_w := Obter_param_Usuario(8009, 39, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_limpa_cid_generico_w);
ie_permite_cid_preliminar_w := Obter_param_Usuario(8009, 40, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_permite_cid_preliminar_w);
ie_considera_proc_cih_w := Obter_param_Usuario(8009, 41, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_considera_proc_cih_w);
ie_considera_rn_w := Obter_param_Usuario(8009, 42, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_considera_rn_w);
ie_atend_amb_entrada_w := Obter_param_Usuario(8009, 43, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_atend_amb_entrada_w);
ie_gerar_nr_conta_guia_tiss_w := Obter_param_Usuario(8009, 44, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_nr_conta_guia_tiss_w);
cd_estabs_a_gerar_w := Obter_param_Usuario(8009, 45, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, cd_estabs_a_gerar_w);
ie_alta_sus_w := Obter_param_Usuario(8009, 46, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_alta_sus_w);

ie_gera_proced_conta_w := substr(coalesce(obter_dados_param_atend(cd_estabelecimento_p, 'PC'),'N'),1,1);
ie_forma_define_tipo_atend_w := substr(coalesce(obter_dados_param_atend(cd_estabelecimento_p, 'TA'),2),1,1);

select	max(ie_somente_internado),
	max(ie_somente_ambulatorial),
	max(ie_gerar_consistentes),
	max(ie_retirar_dia_uti),
	max(dt_inicio_internacao),
	max(dt_fim_internacao),
	max(cd_estabelecimento),
	max(qt_horas_internados),
	max(ie_tipo_convenio),
	max(dt_mesano_referencia)
into STRICT	ie_somente_internado_w,
	ie_somente_ambulatorial_w,
	ie_gerar_consistentes_w,
	ie_retirar_dia_uti_w,
	dt_inicio_internacao_w,
	dt_fim_internacao_w,
	cd_estabelecimento_w,
	qt_horas_internados_w,
	ie_tipo_convenio_w,
	dt_competencia_lote_w
from 	lote_cih
where	nr_sequencia = nr_seq_lote_p;

select 	coalesce(max(somente_numero(substr(cd_cns,1,7))),0)
into STRICT	CD_CNES_w
from 	estabelecimento a
where 	a.cd_estabelecimento =  cd_estabelecimento_p;

insert 	into LOTE_CIH_ITEM(nr_sequencia,
		nr_seq_lote,
		ie_tipo_reg_interface,
		ds_versao_interface,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		cd_cnes)
	values (nextval('lote_cih_item_seq'),
		nr_seq_lote_p,
		1,
		'1.0.0.0',
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		cd_cnes_w);

if (coalesce(ds_tipo_atend_gera_p::text, '') = '')
or (ds_tipo_atend_gera_p = '') then
	ds_tipo_atend_gera_w := 'X';
else
	ds_tipo_atend_gera_w := ds_tipo_atend_gera_p;
end if;

if (coalesce(ds_plano_gera_p::text, '') = '')
or (ds_plano_gera_p = '') then
	ds_plano_gera_w := 'X';
else
	ds_plano_gera_w := ds_plano_gera_p;
end if;

if (coalesce(ds_tipo_at_exclui_proc_cih_w::text, '') = '')
or (ds_tipo_at_exclui_proc_cih_w = '') then
	ds_tipo_at_exclui_proc_cih_w := 'X';
end if;

open c02;
loop
fetch c02 into
	nr_atendimento_w,
	cd_pessoa_fisica_w,
	ie_tipo_atendimento_w,
	cd_convenio_w,
	ie_clinica_w,
	nr_seq_interno_w,
	qt_sus_dias_uti_w,
	nr_decl_obito_c02_w,
	qt_int_dias_uti_c02_w;
EXIT WHEN NOT FOUND; /* apply on c02 */

	If (obter_valor_conv_estab(cd_convenio_w, cd_estabelecimento_p, 'IE_GERAR_CIHA') = 'S') then

		If (ie_exclui_proc_cih_w = 'S') then
			If (ds_tipo_at_exclui_proc_cih_w <> 'X')
			and (obter_se_contido(ie_tipo_atendimento_w, ds_tipo_at_exclui_proc_cih_w) = 'S')  then

				delete	FROM procedimento_paciente_cih
				where	nr_atendimento = nr_atendimento_w;
				commit;
			end if;
		end if;

		qtd_atendimento_w := null;
		If (ie_forma_define_tipo_atend_w in (1, 3, 4)) then
			/* Se o Tipo Atendimento na EUP for Internado, o registro CIHA e Internado, se nao, e Ambulatorial */

			If (ie_tipo_atendimento_w = 1) then
				ie_tipo_reg_interface_w := 2;
				cd_modalidade_w := 2;
			Else
				ie_tipo_reg_interface_w := 4;
				cd_modalidade_w := 1;
			End if;
		Elsif (ie_forma_define_tipo_atend_w = 2) then
			/* Se tiver passagem por setor de classificacao UTI / Centro Cirurgico / Unidade de Internacao / Home Care,  o registro CIHA e Internado, se nao, e Ambulatorial */

			select	CASE WHEN(select	coalesce(max(1),0)					from	setor_atendimento y,						atend_paciente_unidade z					where	z.cd_setor_atendimento = y.cd_setor_atendimento					and	z.nr_atendimento       = nr_atendimento_w					and	y.cd_classif_setor in (2,3,4,8))=1 THEN  2  ELSE 4 END
			into STRICT	ie_tipo_reg_interface_w
			;

			If (ie_tipo_reg_interface_w = 2) then
				cd_modalidade_w := 2;
			else
				cd_modalidade_w := 1;
			end if;
		End if;

		/* Verifica se ha Proc. CIH cadastrado para o atendimento */

		begin
			select	nr_sequencia
			into STRICT	qt_proc_cih_existe_w
			from	procedimento_paciente_cih
			where	nr_atendimento = nr_atendimento_w;
		exception
			when 	others then
				qt_proc_cih_existe_w := 0;
		end;

		select	substr(a.nm_pessoa_fisica,1,60),
			substr(c.ds_endereco,1,25),
			substr(c.nr_endereco,1,5),
			substr(c.ds_complemento,1,15),
			substr(c.cd_municipio_ibge,1,6),
			substr(c.sg_estado,1,2),
			substr(c.cd_cep,1,8),
			a.dt_nascimento,
			a.ie_sexo,
			coalesce(a.nr_prontuario,(obter_prontuario_pf(cd_estabelecimento_p, cd_pessoa_fisica_w))::numeric ),
			a.nr_cartao_nac_sus
		into STRICT	nm_paciente_w,
			nm_logradouro_w,
			nr_endereco_w,
			ds_complemento_w,
			cd_municipio_ibge_w,
			sg_estado_paciente_w,
			cd_cep_w,
			dt_nascimento_w,
			ie_sexo_w,
			nr_prontuario_w,
			cd_cns_w
		FROM pessoa_fisica a
LEFT OUTER JOIN compl_pessoa_fisica c ON (a.cd_pessoa_fisica = c.cd_pessoa_fisica AND 1 = c.ie_tipo_complemento)
WHERE a.cd_pessoa_fisica = cd_pessoa_fisica_w;	
		
		If ( ie_gera_proced_conta_w = 'S')
		And ( ie_tipo_reg_interface_w = 4)
		And	((ie_considera_proc_cih_amb_w = 'N') or (qt_proc_cih_existe_w = 0)) then

			nr_prontuario_estab_w := null;
			if (ie_prontuario_estab_w = '1') then
				nr_prontuario_estab_w := coalesce(atualizar_nr_pront_estab(cd_pessoa_fisica_w),nr_prontuario_w);
			elsif (ie_prontuario_estab_w = '2') then
				nr_prontuario_estab_w := cd_pessoa_fisica_w;
			elsif (ie_prontuario_estab_w = '3') then
				if (coalesce(nr_prontuario_w,0) = 0) then
					nr_prontuario_estab_w := cd_pessoa_fisica_w;
				end if;
			end if;

			if (nr_prontuario_estab_w IS NOT NULL AND nr_prontuario_estab_w::text <> '') then
				nr_prontuario_w := nr_prontuario_estab_w;
			end if;
			
			if (qt_sus_dias_uti_w = 0) then
				qt_dias_uti_w 		:= qt_int_dias_uti_c02_w;
			else
				qt_dias_uti_w 		:= qt_sus_dias_uti_w;				
			end if;
			nr_declaracao_obito_w   := nr_decl_obito_c02_w;
			
			select
				v.cd_fonte_remuner_cih,
				CASE WHEN V.IE_TIPO_CONVENIO=1 THEN  CASE WHEN v.cd_fonte_remuner_cih=9 THEN  v.cd_cgc  ELSE '' END   ELSE v.cd_cgc END ,
				CASE WHEN coalesce(v.cd_fonte_remuner_cih, CASE WHEN v.ie_tipo_convenio=1 THEN '2'  ELSE CASE WHEN v.ie_tipo_convenio=4 THEN '3' WHEN v.ie_tipo_convenio=6 THEN '6' WHEN v.ie_tipo_convenio=9 THEN '9'  ELSE '1' END  END )=1 THEN  lpad(substr(e.cd_ans,1,6),6,'0')  ELSE null END
			into STRICT	ie_fonte_remuner2_w,
				cd_cnpj_w,
				cd_ans_w
			from	convenio v,
				atend_categoria_convenio t,
				pessoa_juridica e
			where	v.cd_convenio = t.cd_convenio
			and	v.cd_cgc = e.cd_cgc
			and	nr_seq_interno_w = t.nr_seq_interno;

			select	a.dt_entrada,
				a.dt_alta,
				CASE WHEN ie_alta_sus_w='S' THEN  coalesce(OBTER_MOTIVO_ALTA_SUS(a.nr_atendimento), a.cd_motivo_alta)  ELSE a.cd_motivo_alta END ,
				CASE WHEN ie_fonte_remuner2_w=2 THEN  null WHEN ie_fonte_remuner2_w=3 THEN  null  ELSE CASE WHEN coalesce(e.cd_internacional::text, '') = '' THEN  CASE WHEN Obter_Valor_Conv_Estab(t.cd_convenio,a.cd_estabelecimento,'IE_CGC_CIH')='S' THEN cd_cnpj_w  ELSE null END   ELSE substr(obter_cgc_estabelecimento(a.cd_estabelecimento),1,14) END  END  cd_cnpj_conv,
				CASE WHEN ie_fonte_remuner2_w=2 THEN  null WHEN ie_fonte_remuner2_w=3 THEN  null WHEN ie_fonte_remuner2_w=9 THEN  null  ELSE coalesce(substr(t.cd_usuario_convenio,1,30), '000000000000000000000000000000') END ,
				CASE WHEN ie_retirar_dia_uti_w='S' THEN cih_obter_dias_internacao_uti(a.dt_entrada, a.dt_alta, qt_dias_uti_w)  ELSE qt_dias_uti_w END  qt_dias_int_uti,
				dt_alta_interno,
				1 qtd_atendimento,
				CASE WHEN ie_tipo_reg_interface_w=2 THEN  2  ELSE 1 END  cd_modalidade,
				nr_doc_convenio
			into STRICT	dt_entrada_w,
				dt_alta_w,
				cd_motivo_alta_w,
				cd_cnpj_conv_w,
				cd_usuario_convenio_w,
				qt_dias_int_uti_w,
				dt_competencia_w,
				qtd_atendimento_w,
				cd_modalidade_w,
				nr_doc_convenio_w
			from	estabelecimento d,
				pessoa_juridica e,
				atendimento_paciente a,
				atend_categoria_convenio t
			where	a.nr_atendimento		= nr_atendimento_w
			and	coalesce(a.ie_tipo_convenio,1)	<> 3
			and	a.cd_estabelecimento		= d.cd_estabelecimento
			and	d.cd_cgc			= e.cd_cgc
			and	nr_seq_interno_w = 		t.nr_seq_interno; -- bruna, os61446;
			If (coalesce(nr_doc_convenio_w::text, '') = '') or (coalesce(trim(both nr_doc_convenio_w)::text, '') = '') or (trim(both nr_doc_convenio_w) = '') then
				select	max(substr(a.NR_GUIA_PRESTADOR, 1, 20))
				into STRICT	nr_doc_convenio_w
				from	TISS_CONTA_GUIA a,
					conta_paciente b
				where	a.nr_interno_conta = b.nr_interno_conta
				and	b.nr_atendimento = nr_atendimento_w;
			end if;

			If (ie_gerar_nr_conta_guia_tiss_w = 'S') and
				((coalesce(nr_doc_convenio_w::text, '') = '') or (coalesce(trim(both nr_doc_convenio_w)::text, '') = '') or (trim(both nr_doc_convenio_w) = '')) then
				select	max(nr_interno_conta)
				into STRICT	nr_doc_convenio_w
				from	conta_paciente
				where	nr_atendimento = nr_atendimento_w;
			end if;

			if (ie_alta_sus_w = 'S') then
				select	coalesce(max(m.cd_motivo_alta_sus), coalesce(max(p.cd_motivo_alta),0))
				into STRICT	cd_motivo_alta_ww
				from	procedimento_paciente_cih p,
					motivo_alta m
				where	nr_atendimento = nr_atendimento_w
				and	m.cd_motivo_alta = p.cd_motivo_alta;
			else
				select	coalesce(max(cd_motivo_alta),0)
				into STRICT	cd_motivo_alta_ww
				from	procedimento_paciente_cih
				where	nr_atendimento = nr_atendimento_w;
			end if;
			
			If (cd_motivo_alta_ww <> 0) then
				cd_motivo_alta_w := cd_motivo_alta_ww;
			End if;

			open c03;
			loop
			fetch c03 into
				cd_procedimento_w,
				ie_origem_proced_w,
				ds_procedimento_w,
				cd_doenca_cid_w,
				qtd_procedimento_w,
				nr_seq_proc_interno_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */

				dt_alta_conta_w := dt_alta_w;
				cd_motivo_alta_conta_w := cd_motivo_alta_w;
				ie_consolidado_w := 'N';
				ie_generico_w := 'N';
				ie_tipo_reg_interface_w := 4;
				cd_proc_convertido_SUS_w := null;
				cd_proc_generico_SUS_w := 0;
				ie_origem_proced_sus_w := null;

				If (ciha_obter_se_proc_parto(cd_procedimento_w) = 'N') then
					qt_filhos_vivos_w	:= 0;
					doc_nasc1_w		:= 0;
					doc_nasc2_w		:= 0;
					doc_nasc3_w		:= 0;
					doc_nasc4_w		:= 0;
					doc_nasc5_w		:= 0;
				else
					select	obter_qt_nascidos_cih(cd_procedimento_w,nr_atendimento_w),
						somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,1,nr_atendimento_w),1,11),'+',''))),
						somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,2,nr_atendimento_w),1,11),'+',''))),
						somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,3,nr_atendimento_W),1,11),'+',''))),
						somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,4,nr_atendimento_w),1,11),'+',''))),
						somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,5,nr_atendimento_w),1,11),'+','')))
					into STRICT	qt_filhos_vivos_w,
						doc_nasc1_w,
						doc_nasc2_w,
						doc_nasc3_w,
						doc_nasc4_w,
						doc_nasc5_w
					;
				end if;

				if (ie_origem_proced_w in (2, 3, 7)) then
					cd_proc_convertido_SUS_w := cd_procedimento_w;
					ie_origem_proced_sus_w   := ie_origem_proced_w;
				else
				
					select	coalesce(max(cd_procedimento_sus),0),
						coalesce(max(ie_origem_proced_sus),0),
						coalesce(max(NR_SEQ_SUS_PROC_INT_GEN),0)
					into STRICT	cd_proc_convertido_SUS_w,
						ie_origem_proced_sus_w,
						NR_SEQ_SUS_PROC_INT_GEN_w
					from	proc_interno_conv_sus
					where	nr_seq_proc_interno = nr_seq_proc_interno_w
					and	coalesce(ie_tipo_atendimento, ie_tipo_atendimento_w)  = ie_tipo_atendimento_w
					and	coalesce(ie_clinica, ie_clinica_w) = ie_clinica_w;
				
					if (cd_proc_convertido_SUS_w = 0) then
						select  coalesce(max(substr(sus_obter_dados_proc_generico(NR_SEQ_SUS_PROC_INT_GEN_w,null,'C'),1,15)),0),
							coalesce(max(substr(sus_obter_dados_proc_generico(NR_SEQ_SUS_PROC_INT_GEN_w,null,'D'),1,40)),'')
						into STRICT	cd_proc_generico_SUS_w,
							ds_proc_generico_SUS_w
						;
					end if;
				
					if (cd_proc_generico_SUS_w = 0) and (cd_proc_convertido_SUS_w = 0) then
						/* Cadastro de conversao de procedimentos por estabelecimento */

						select  coalesce(max(cd_procedimento_sus),0),
							coalesce(max(ie_origem_proced_sus),0)
						into STRICT	cd_proc_convertido_SUS_w,
							ie_origem_proced_sus_w
						from	conversao_proc_ciha
						where	cd_procedimento    = cd_procedimento_w
						and	ie_origem_proced   = ie_origem_proced_w
						and	cd_estabelecimento = cd_estabelecimento_p
						and	coalesce(ie_tipo_atend,ie_tipo_atendimento_w)  = ie_tipo_atendimento_w;															
					end if;
					
					If (cd_proc_generico_SUS_w = 0) and (cd_proc_convertido_SUS_w = 0) then
						select  coalesce(max(cd_procedimento_sus),0),
							coalesce(max(ie_origem_proced_sus),0)
						into STRICT	cd_proc_convertido_SUS_w,
							ie_origem_proced_sus_w
						from	procedimento_conv_sus
						where	cd_procedimento  = cd_procedimento_w
						and	ie_origem_proced = ie_origem_proced_w
						and	ie_tipo_atendimento_w = CASE WHEN coalesce(ie_tipo_atendimento::text, '') = '' THEN  ie_tipo_atendimento_w  ELSE ie_tipo_atendimento END
						and	coalesce(ie_clinica,ie_clinica_w) = ie_clinica_w;
					End if;

					If (cd_proc_generico_SUS_w = 0) and (cd_proc_convertido_SUS_w = 0) then
						select  coalesce(max(substr(sus_obter_dados_proc_generico(nr_seq_sus_proc_gen,null,'C'),1,15)),''),
							coalesce(max(substr(sus_obter_dados_proc_generico(nr_seq_sus_proc_gen,null,'D'),1,40)),'')
						into STRICT	cd_proc_generico_SUS_w,
							ds_proc_generico_SUS_w
						from	procedimento_conv_gen_sus
						where	cd_procedimento  = cd_procedimento_w
						and	ie_origem_proced = ie_origem_proced_w;
					End if;
				end if;

				If (cd_proc_convertido_SUS_w <> 0)
				And (ie_origem_proced_sus_w <> 0) then
					cd_procedimento_w  := cd_proc_convertido_SUS_w;
					ie_origem_proced_w := ie_origem_proced_SUS_w;
				Elsif (cd_proc_generico_SUS_w <> 0) then
					cd_procedimento_w  := cd_proc_generico_SUS_w;
					ds_procedimento_w  := ds_proc_generico_SUS_w;
					ie_generico_w := 'S';
				End if;

				If	((cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and ((ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') or (cd_proc_generico_SUS_w <> 0)))
				And	(((Sus_Obter_Estrut_Proc(cd_procedimento_w, ie_origem_proced_w, 'C', 'G') in (2,3,4,5))
				Or (Sus_Obter_Estrut_Proc(cd_procedimento_w, ie_origem_proced_w, 'C', 'S') in (101,701)))
				Or (cd_proc_generico_SUS_w <> 0))
				And (obter_se_proc_lib_CIHA(cd_procedimento_w, ie_origem_proced_w) = 'S') Then

					If (ie_forma_define_tipo_atend_w = 3) then
						/* Se o procedimento for Internado (AIH), o registro no CIHA sera considerado Internado */

						If (ie_tipo_reg_interface_w = 4) and (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_w, 'C', 2) in (3)) and (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_w, 'C', 1) not in (1, 2)) then
							ie_tipo_reg_interface_w := 2;
						end if;
					end if;

					If (ie_tipo_reg_interface_w = 4) then
						dt_alta_conta_w := null;
						cd_motivo_alta_conta_w := null;
						nr_declaracao_obito_w := null;
					end if;

					If (ie_tipo_reg_interface_w in (4,5))
					And (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_w, 'C', 1) = 1)
					Or	(ie_gera_amb_consolidados_w = 'S' AND ie_tipo_reg_interface_w = 4) then
						ie_consolidado_w := 'S';
						ie_tipo_reg_interface_w := 5;
						cd_modalidade_w := 1;
					End if;

					If (ie_consolidado_w = 'S') and
						((ie_fonte_remuner2_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = ''))then
						nr_seq_lote_item_w := 0;
						qtd_atendimento_w := 1;

						If (ie_gerar_log_consolidados_w = 'S') then
							insert	into ciha_consolidado(nr_sequencia,
								 nr_seq_lote,
								 nr_atendimento,
								 cd_procedimento,								
								 nr_endereco,
								 ds_complemento,
								 cd_cns,
								 cd_municipio_ibge,
								 sg_estado_paciente,
								 cd_cep,
								 dt_nascimento,
								 ie_sexo,
								 cd_cid_primario,
								 cd_cid_secundario,
								 dt_entrada,
								 dt_alta,
								 cd_motivo_alta,
								 ds_procedimento,
								 ie_fonte_remuner2,
								 nm_paciente,
								 nm_logradouro,
								 cd_ans,
								 cd_cnpj_conv,
								 cd_usuario_convenio,
								 nr_declaracao_obito,
								 qt_filhos_vivos,
								 doc_nasc1,
								 doc_nasc2,
								 doc_nasc3,
								 doc_nasc4,
								 doc_nasc5,
								 qt_dias_int_uti,
								 nr_prontuario,
								 dt_competencia,
								 ie_consistente,
								 cd_modalidade,
								 nr_guia_tiss)
							values (nextval('ciha_consolidado_seq'),
								 nr_seq_lote_p,
								 nr_atendimento_w,
								 cd_procedimento_w,								 
								 nr_endereco_w,
								 ds_complemento_w,
								 cd_cns_w,
								 cd_municipio_ibge_w,
								 sg_estado_paciente_w,
								 cd_cep_w,
								 dt_nascimento_w,
								 ie_sexo_w,
								 cd_cid_primario_w,
								 cd_cid_secundario_w,
								 dt_entrada_w,
								 dt_alta_w,
								 cd_motivo_alta_w,
								 ds_procedimento_w,
								 ie_fonte_remuner2_w,
								 nm_paciente_w,
								 nm_logradouro_w,
								 cd_ans_w,
								 cd_cnpj_conv_w,
								 cd_usuario_convenio_w,
								 nr_declaracao_obito_w,
								 qt_filhos_vivos_w,
								 doc_nasc1_w,
								 doc_nasc2_w,
								 doc_nasc3_w,
								 doc_nasc4_w,
								 doc_nasc5_w,
								 qt_dias_int_uti_w,
								 nr_prontuario_w,
								 dt_competencia_w,
								 ie_consistente_w,
								 cd_modalidade_w,
								 nr_guia_tiss_w);
							commit;
						end if;

						/* Codigo ANS somente e obrigatorio para Planos privados */

						If (coalesce(ie_fonte_remuner2_w, '0') = 1) then

							If (cd_ans_w IS NOT NULL AND cd_ans_w::text <> '') and (ie_fonte_remuner2_w IS NOT NULL AND ie_fonte_remuner2_w::text <> '') then
								cd_ans_consolidado_w := cd_ans_w;
								ie_fonte_rem2_consol_w := ie_fonte_remuner2_w;
							else
								cd_ans_consolidado_w := null;
								ie_fonte_rem2_consol_w := null;
							end if;

							If (cd_ans_consolidado_w IS NOT NULL AND cd_ans_consolidado_w::text <> '') then
								select	max(a.nr_sequencia)
								into STRICT	nr_seq_lote_item_w
								from	lote_cih_item a
								where	a.ie_tipo_reg_interface in (5)
								and	a.cd_procedimento = cd_procedimento_w
								and	nr_seq_lote = nr_seq_lote_p
								and	coalesce(cd_ans, coalesce(cd_ans_consolidado_w, '0')) = coalesce(cd_ans_consolidado_w, '0')
								and	ie_fonte_remuner2 = 1;
							end if;

							If (coalesce(nr_seq_lote_item_w, 0) > 0) and
								((ie_fonte_rem2_consol_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = '')) then
								update	lote_cih_item
								set	qtd_atendimento = coalesce(qtd_atendimento,0) + qtd_procedimento_w,
									cd_ans = coalesce(cd_ans_consolidado_w, cd_ans),
									ie_fonte_remuner2  = coalesce(ie_fonte_rem2_consol_w, ie_fonte_remuner2)
								where	nr_sequencia = nr_seq_lote_item_w;
							end if;
						Else
							cd_ans_consolidado_w := null;
							ie_fonte_rem2_consol_w := ie_fonte_remuner2_w;

							select	max(a.nr_sequencia)
							into STRICT	nr_seq_lote_item_w
							from	lote_cih_item a
							where	a.ie_tipo_reg_interface in (5)
							and	a.cd_procedimento = cd_procedimento_w
							and	nr_seq_lote = nr_seq_lote_p
							and	coalesce(ie_fonte_remuner2, coalesce(ie_fonte_rem2_consol_w, '0')) = coalesce(ie_fonte_rem2_consol_w, '0');

							If (coalesce(nr_seq_lote_item_w, 0) > 0) and
								((ie_fonte_rem2_consol_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = '')) then
								update	lote_cih_item
								set	qtd_atendimento = coalesce(qtd_atendimento,0) + qtd_procedimento_w,
									cd_ans  = NULL,
									ie_fonte_remuner2  = coalesce(ie_fonte_rem2_consol_w, ie_fonte_remuner2)
								where	nr_sequencia = nr_seq_lote_item_w;
							end if;
						End if;

						qtd_atendimento_w	:= qtd_procedimento_w;

						If (coalesce(nr_seq_lote_item_w, 0) <= 0) and
							((ie_fonte_rem2_consol_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = '')) then
							insert into lote_cih_item(
								nr_sequencia,
								nr_seq_lote,
								ie_tipo_reg_interface,
								cd_procedimento,
								ds_procedimento,
								cd_ans,
								ie_fonte_remuner2,
								dt_competencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								qtd_atendimento,
								cd_modalidade)
							values ( nextval('lote_cih_item_seq'),
								nr_seq_lote_p,
								ie_tipo_reg_interface_w,
								cd_procedimento_w,
								ds_procedimento_w,
								cd_ans_consolidado_w,
								ie_fonte_rem2_consol_w,
								dt_competencia_lote_w,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								coalesce(qtd_atendimento_w, 1),
								CASE WHEN ie_tipo_reg_interface_w=2 THEN  2  ELSE 1 END );
							commit;
						end if;
					Else

						/* Verifica se tem CID definido no cadastro de procedimento */

						select	max(cd_doenca_cid),
							max(cd_cid_secundario)
						into STRICT	cd_cid_primario_conv_w,
							cd_cid_secundario_conv_w
						from	procedimento
						where	cd_procedimento = cd_procedimento_w
						and	ie_origem_proced = ie_origem_proced_w;

						If (cd_cid_primario_conv_w IS NOT NULL AND cd_cid_primario_conv_w::text <> '') then
							cd_cid_primario_w := cd_cid_primario_conv_w;
						Else
							If (ie_permite_cid_preliminar_w = 'S') then
								cd_cid_primario_w := Obter_cid_atendimento(nr_atendimento_w, 'P');
							Else
								cd_cid_primario_w := Obter_cid_princ_atendimento(nr_atendimento_w);
							End if;
						End if;

						If (cd_cid_secundario_conv_w IS NOT NULL AND cd_cid_secundario_conv_w::text <> '') then
							cd_cid_secundario_w := cd_cid_secundario_conv_w;
						Else
							cd_cid_secundario_w := obter_cid_secun_atendimento(nr_atendimento_w);
						End if;

						/* Param [30] - Gerar o CID de acordo com os diagnosticos do atendimento */

						If (ie_gerar_cid_diag_atend_w = 'S') then
							If (ie_permite_cid_preliminar_w = 'S') then
								cd_cid_primario_w := Obter_cid_atendimento(nr_atendimento_w, 'P');
							Else
								cd_cid_primario_w := Obter_cid_princ_atendimento(nr_atendimento_w);
							End if;
							cd_cid_secundario_w := obter_cid_secun_atendimento(nr_atendimento_w);
						End if;

						/* Param [38] - Gerar o CID de acordo com o Proc. CIH da funcao Entrada Unica de Pacientes */

						if (ie_busca_cid_proc_cih_w = 'S') then
							select	max(cd_cid_primario),
								max(cd_cid_secundario)
							into STRICT	cd_cid_primario_cih_w,
								cd_cid_secundario_cih_w
							from	procedimento_paciente_cih
							where	nr_atendimento = nr_atendimento_w;

							if (cd_cid_primario_cih_w IS NOT NULL AND cd_cid_primario_cih_w::text <> '') then
								cd_cid_primario_w := cd_cid_primario_cih_w;
							end if;

							if (cd_cid_secundario_cih_w IS NOT NULL AND cd_cid_secundario_cih_w::text <> '') then
								cd_cid_secundario_w := cd_cid_secundario_cih_w;
							end if;
						end if;

						/* Param [26] - Gerar somente os CIDs com 4 Caracteres */

						If (ie_gera_cid_4_caracteres_w = 'S')
						And (length(cd_cid_primario_w) = 3) then
							cd_cid_primario_w := null;
						end if;

						If (ie_generico_w = 'S') and (ie_limpa_cid_generico_w = 'S') then
							cd_cid_primario_w := null;
							cd_cid_secundario_w := null;
						end if;

						nr_seq_lote_item_amb_w := 0;

						If (qt_filhos_vivos_w > 9) then
							CALL wheb_mensagem_pck.exibir_mensagem_abort(176979, 'NR_ATENDIMENTO='|| nr_atendimento_w || ';QT_FILHOS='|| qt_filhos_vivos_w);
						End if;

						select	max(nr_sequencia)
						into STRICT	nr_seq_lote_item_amb_w
						from	lote_cih_item
						where	ie_tipo_reg_interface  = ie_tipo_reg_interface_w
						and	cd_procedimento = cd_procedimento_w
						and	nr_seq_lote = nr_seq_lote_p
						and	nr_Atendimento = nr_Atendimento_w;

						If (nr_seq_lote_item_amb_w > 0) then
							update	LOTE_CIH_ITEM
							set	qtd_atendimento = coalesce(qtd_atendimento,0) + coalesce(qtd_procedimento_w,1)
							where	nr_sequencia = nr_seq_lote_item_amb_w;
						Else
							Begin
							if (cd_doenca_cid_w IS NOT NULL AND cd_doenca_cid_w::text <> '') then
								cd_cid_primario_w := cd_doenca_cid_w;
							end if;

							/* Param [26] - Gerar somente os CIDs com 4 Caracteres */

							If (ie_gera_cid_4_caracteres_w = 'S')
							And (length(cd_cid_primario_w) = 3) then
								cd_cid_primario_w := null;
							end if;

							qtd_atendimento_w	:= qtd_procedimento_w;
							
							if (ie_fonte_remuner2_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = '') then

								insert into LOTE_CIH_ITEM(
									nr_sequencia,
									nr_seq_lote,
									IE_TIPO_REG_INTERFACE,
									nm_paciente,
									nm_logradouro,
									nr_endereco,
									ds_complemento,
									cd_municipio_ibge,
									sg_estado_paciente,
									cd_cep,
									dt_nascimento,
									ie_sexo,
									cd_cns,
									cd_procedimento,
									cd_cid_primario,
									cd_cid_secundario,
									dt_entrada,
									dt_alta,
									cd_motivo_alta,
									ie_fonte_remuner2,
									ds_procedimento,
									cd_ans,
									cd_cnpj_conv,
									cd_usuario_convenio,
									nr_declaracao_obito,
									qt_filhos_vivos,
									doc_nasc1,
									doc_nasc2,
									doc_nasc3,
									doc_nasc4,
									doc_nasc5,
									qt_dias_int_uti,
									nr_prontuario,
									dt_competencia,
									DT_ATUALIZACAO,
									NM_USUARIO,
									DT_ATUALIZACAO_NREC,
									NM_USUARIO_NREC,
									nr_atendimento,
									ie_consistente,
									qtd_atendimento,
									cd_modalidade,
									nr_guia_tiss)
								values ( nextval('lote_cih_item_seq'),
									nr_seq_lote_p,
									ie_tipo_reg_interface_w,
									nm_paciente_w,
									nm_logradouro_w,
									nr_endereco_w,
									ds_complemento_w,
									CASE WHEN ie_tipo_reg_interface_w=2 THEN  coalesce(cd_municipio_ibge_w,'999999') WHEN ie_tipo_reg_interface_w=4 THEN  coalesce(cd_municipio_ibge_w,'999999')  ELSE cd_municipio_ibge_w END ,
									sg_estado_paciente_w,
									cd_cep_w,
									dt_nascimento_w,
									ie_sexo_w,
									cd_cns_w,
									cd_procedimento_w,
									cd_cid_primario_w,
									cd_cid_secundario_w,
									dt_entrada_w,
									dt_alta_conta_w,
									cd_motivo_alta_conta_w,
									ie_fonte_remuner2_w,
									ds_procedimento_w,
									cd_ans_w,
									cd_cnpj_conv_w,
									cd_usuario_convenio_w,
									nr_declaracao_obito_w,
									qt_filhos_vivos_w,
									elimina_caracteres_especiais(doc_nasc1_w),
									elimina_caracteres_especiais(doc_nasc2_w),
									elimina_caracteres_especiais(doc_nasc3_w),
									elimina_caracteres_especiais(doc_nasc4_w),
									elimina_caracteres_especiais(doc_nasc5_w),
									qt_dias_int_uti_w,
									nr_prontuario_w,
									dt_competencia_lote_w,
									clock_timestamp(),
									NM_USUARIO_p,
									clock_timestamp(),
									NM_USUARIO_p,
									nr_atendimento_w,
									ie_consistente_w,
									coalesce(qtd_atendimento_w, 1),
									CASE WHEN ie_tipo_reg_interface_w=2 THEN  2  ELSE 1 END ,
									nr_doc_convenio_w);
									
							end if;

							commit;
							end;
						End if;
					End if;
				End if;

			end loop;
			close c03;
		Else
			begin
				select	nr_sequencia
				into STRICT	nr_seq_proc_cih_w
				from	procedimento_paciente_cih
				where	nr_atendimento = nr_atendimento_w  LIMIT 1;
			exception
				when	others then
					nr_seq_proc_cih_w := 0;
			end;

			ie_generico_w := 'N';

			if ( nr_seq_proc_cih_w > 0) and ( ie_considera_proc_cih_w = 'S') then
				select	g.cd_procedimento,
					substr(h.ds_procedimento,1,40),
					g.ie_origem_proced,
					g.cd_cid_primario,
					g.cd_cid_secundario,
					cih_obter_se_cid_comp_opcao(g.cd_procedimento, g.ie_origem_proced, g.cd_cid_primario, ie_opcao_cid_w),
					coalesce(substr(sus_obter_dados_proc_generico(nr_seq_sus_proc_gen,null,'C'),1,15), 0),
					coalesce(substr(sus_obter_dados_proc_generico(nr_seq_sus_proc_gen,null,'D'),1,40), 0)
				into STRICT	cd_procedimento_w,
					ds_procedimento_w,
					ie_origem_proced_w,
					cd_cid_primario_w,
					cd_cid_secundario_w,
					ie_consistente_w,
					cd_proc_cih_generico_w,
					ds_proc_cih_generico_w
				FROM procedimento_paciente_cih g
LEFT OUTER JOIN procedimento h ON (g.cd_procedimento = h.cd_procedimento AND g.ie_origem_proced = h.ie_origem_proced)
WHERE g.nr_atendimento = nr_atendimento_w;

				If (qt_filhos_vivos_w > 9) then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(176979, 'NR_ATENDIMENTO='|| nr_atendimento_w || ';QT_FILHOS='|| qt_filhos_vivos_w);
				End if;
			else
				cd_procedimento_w 	:= null;
				ds_procedimento_w 	:= null;
				ie_origem_proced_w 	:= null;
				cd_cid_primario_w 	:= null;
				cd_cid_secundario_w 	:= null;
				ie_consistente_w 	:= null;
				cd_proc_cih_generico_w	:= null;
				ds_proc_cih_generico_w	:= null;
			end if;

			If (cd_proc_cih_generico_w <> 0) then
				cd_procedimento_w := cd_proc_cih_generico_w;
				ds_procedimento_w := ds_proc_cih_generico_w;
				ie_origem_proced_w := 0;
				ie_generico_w := 'S';
			End if;

			/* Param [26] - Gerar somente os CIDs com 4 Caracteres */

			If (ie_gera_cid_4_caracteres_w = 'S')
			And (length(cd_cid_primario_w) = 3) then
				cd_cid_primario_w := null;
			end if;

		/* Anderson Ramos - Geracao Automatica do Proc. CIH de acordo com a converao SUS do procedimento principal do atendimento - Inicio */


			/* Verifica se ha Proc. CIH cadastrado para o atendimento */

			begin
				select	nr_sequencia
				into STRICT	qt_proc_cih_existe_w
				from	procedimento_paciente_cih
				where	nr_atendimento = nr_atendimento_w;
			exception
				when 	others then
					qt_proc_cih_existe_w := 0;
			end;

			if (qt_proc_cih_existe_w = 0) or (ie_considera_proc_cih_w = 'N') then
				/* Obtem o codigo e origem do procedimento principal do atendimento */

				cd_proc_atendimento_w 	 := obter_proc_principal(nr_atendimento_w, obter_convenio_atendimento(nr_atendimento_w),
										 obter_tipo_Atendimento(nr_atendimento_w), null, 'CP');
				ie_origem_proced_atend_w := obter_proc_principal(nr_atendimento_w, obter_convenio_atendimento(nr_atendimento_w),
										 obter_tipo_Atendimento(nr_atendimento_w), null, 'IP');
				cd_proc_convertido_SUS_w := 0;
				If (ie_permite_cid_preliminar_w = 'S') then
					cd_cid_primario_w := Obter_cid_atendimento(nr_atendimento_w, 'P');
				Else
					cd_cid_primario_w := Obter_cid_princ_atendimento(nr_atendimento_w);
				End if;
				cd_cid_secundario_w 	 := obter_cid_secun_atendimento(nr_atendimento_w);

				if (ie_origem_proced_atend_w in (2, 3, 7)) then
					/* Se o procedimento principal ja for tabela SUS, gera Proc. CIH com este */

					cd_proc_convertido_SUS_w := cd_proc_atendimento_w;
					ie_origem_proced_sus_w   := ie_origem_proced_atend_w;
				else
							
					select	coalesce(max(cd_procedimento_sus),0),
							coalesce(max(ie_origem_proced_sus),0)
					into STRICT	cd_proc_convertido_SUS_w,
							ie_origem_proced_sus_w
					from	proc_interno_conv_sus
					where	nr_seq_proc_interno = nr_seq_proc_interno_w
					and	coalesce(ie_tipo_atendimento, ie_tipo_atendimento_w)  = ie_tipo_atendimento_w
					and	coalesce(ie_clinica, ie_clinica_w) = ie_clinica_w;					
				
					if (cd_proc_convertido_SUS_w = 0) then
						/* Cadastro de conversao de procedimentos por estabelecimento */

						select  coalesce(max(cd_procedimento_sus),0),
							coalesce(max(ie_origem_proced_sus),0)
						into STRICT	cd_proc_convertido_SUS_w,
							ie_origem_proced_sus_w
						from	conversao_proc_ciha
						where	cd_procedimento    = cd_proc_atendimento_w
						and	ie_origem_proced   = ie_origem_proced_atend_w
						and	cd_estabelecimento = cd_estabelecimento_p
						and coalesce(ie_tipo_atend,ie_tipo_atendimento_w)  = ie_tipo_atendimento_w;
					end if;
	
					If (cd_proc_convertido_SUS_w = 0) then
						select  coalesce(max(cd_procedimento_sus),0),
							coalesce(max(ie_origem_proced_sus),0)
						into STRICT	cd_proc_convertido_SUS_w,
							ie_origem_proced_sus_w
						from	procedimento_conv_sus
						where	cd_procedimento  = cd_proc_atendimento_w
						and	ie_origem_proced = ie_origem_proced_atend_w
						and	ie_tipo_atendimento_w = CASE WHEN coalesce(ie_tipo_atendimento::text, '') = '' THEN  ie_tipo_atendimento_w  ELSE ie_tipo_atendimento END
						and	coalesce(ie_clinica,ie_clinica_w) = ie_clinica_w;
					End if;

					If (cd_proc_convertido_SUS_w = 0)
					And (ie_origem_proced_sus_w = 0) then
						select  coalesce(max(substr(sus_obter_dados_proc_generico(nr_seq_sus_proc_gen,null,'C'),1,15)),''),
							coalesce(max(substr(sus_obter_dados_proc_generico(nr_seq_sus_proc_gen,null,'D'),1,40)),'')
						into STRICT	cd_proc_generico_SUS_w,
							ds_proc_generico_SUS_w
						from	procedimento_conv_gen_sus
						where	cd_procedimento  = cd_proc_atendimento_w
						and	ie_origem_proced = ie_origem_proced_atend_w;
					End if;

				end if;

				if (cd_proc_convertido_SUS_w <> 0) then

					/* Verifica se tem CID definido no cadastro de procedimento */

					select	max(cd_doenca_cid),
						max(cd_cid_secundario)
					into STRICT	cd_cid_primario_conv_w,
						cd_cid_secundario_conv_w
					from	procedimento
					where	cd_procedimento = cd_proc_convertido_SUS_w
					and	ie_origem_proced = ie_origem_proced_sus_w;

					If (cd_cid_primario_conv_w IS NOT NULL AND cd_cid_primario_conv_w::text <> '') then
						cd_cid_primario_w := cd_cid_primario_conv_w;
					End if;

					If (cd_cid_secundario_conv_w IS NOT NULL AND cd_cid_secundario_conv_w::text <> '') then
						cd_cid_secundario_w := cd_cid_secundario_conv_w;
					End if;

					/* Consiste se o procedimento SUS equivalente ao procedimento principal do atendimento coincide com a modalidade do atendimento */

					If (cd_proc_convertido_SUS_w <> 0 and ie_origem_proced_sus_w <> 0)
					and	((ie_consiste_tipo_reg_proc_w = 'N')
					Or (CIHA_obter_se_proc_tipo_reg(cd_proc_convertido_SUS_w, ie_origem_proced_sus_w, ie_tipo_reg_interface_w) = 'S')) then

						If (qt_proc_cih_existe_w = 0) then
							/* Insere Proc. CIH */

							insert into procedimento_paciente_cih(	nr_atendimento,
										nr_sequencia,
										cd_procedimento,
										ie_origem_proced,
										dt_atualizacao,
										nm_usuario,
										cd_cid_primario,
										cd_cid_secundario)
							values (	nr_atendimento_w,
										1,
										cd_proc_convertido_SUS_w,
										ie_origem_proced_sus_w,
										clock_timestamp(),
										nm_usuario_p,
										cd_cid_primario_w,
										cd_cid_secundario_w);
							commit;
						End if;

						cd_procedimento_w  := cd_proc_convertido_SUS_w;
						ie_origem_proced_w := ie_origem_proced_sus_w;
						ds_procedimento_w  := substr(obter_desc_procedimento(cd_procedimento_w, ie_origem_proced_w),1,40);
					End if;
				Elsif (cd_proc_generico_SUS_w <> 0) then
					cd_procedimento_w  := cd_proc_generico_SUS_w;
					ds_procedimento_w  := ds_proc_generico_SUS_w;
					ie_generico_w := 'S';
				end if;
			end if;
		/* Anderson Ramos - Geracao Automatica do Proc. CIH de acordo com a converao SUS do procedimento principal do atendimento - Fim  */



			/* Anderson Ramos - Tratar atendimento consolidado (Procedimento BPAC) - Inicio */

			ie_consolidado_w := 'N';

			select	coalesce(max(ie_origem_proced),0)
			into STRICT	ie_origem_proced_consolid_w
			from	procedimento_paciente_cih
			where	nr_atendimento = nr_atendimento_w;

			If (ie_tratar_externos_mod_proc_w = 'S')
			And (obter_tipo_Atendimento(nr_atendimento_w) = 7) then
				If (ciha_obter_se_proc_internado(cd_procedimento_w, ie_origem_proced_consolid_w) = 'S') then
					ie_tipo_reg_interface_w := 2;
					cd_modalidade_w := 2;
				Else
					ie_tipo_reg_interface_w := 4;
					cd_modalidade_w := 1;
				End if;
			End if;

			If (ie_tipo_reg_interface_w in (4,5))
			And (ie_origem_proced_consolid_w in (2, 3, 7))
			And (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_consolid_w, 'C', 1) = 1) then
				ie_consolidado_w := 'S';
				ie_tipo_reg_interface_w := 5;
				cd_modalidade_w := 1;
			End if;

			If (ie_gera_amb_consolidados_w = 'S')
			And (ie_tipo_reg_interface_w = 4) then
				ie_consolidado_w := 'S';
				ie_tipo_reg_interface_w := 5;
				cd_modalidade_w := 1;
			End if;

			select	substr(a.nm_pessoa_fisica,1,60),
				substr(c.ds_endereco,1,25),
				substr(c.nr_endereco,1,5),
				substr(c.ds_complemento,1,15),
				substr(c.cd_municipio_ibge,1,6),
				substr(c.sg_estado,1,2),
				CASE WHEN ie_zeros_esq_cep_w='S' THEN  substr(lpad(replace(cd_cep,' ',''),8,'0'),1,8)  ELSE substr(cd_cep,1,8) END ,
				a.dt_nascimento,
				a.ie_sexo,
				coalesce(a.nr_prontuario,(obter_prontuario_pf(cd_estabelecimento_p, cd_pessoa_fisica_w))::numeric ),
				a.nr_cartao_nac_sus
			into STRICT	nm_paciente_w,
				nm_logradouro_w,
				nr_endereco_w,
				ds_complemento_w,
				cd_municipio_ibge_w,
				sg_estado_paciente_w,
				cd_cep_w,
				dt_nascimento_w,
				ie_sexo_w,
				nr_prontuario_w,
				cd_cns_w
			FROM pessoa_fisica a
LEFT OUTER JOIN compl_pessoa_fisica c ON (a.cd_pessoa_fisica = c.cd_pessoa_fisica AND 1 = c.ie_tipo_complemento)
WHERE a.cd_pessoa_fisica = cd_pessoa_fisica_w;

			nr_prontuario_estab_w := null;
			if (ie_prontuario_estab_w = '1') then
				nr_prontuario_estab_w := coalesce(atualizar_nr_pront_estab(cd_pessoa_fisica_w),nr_prontuario_w);
			elsif (ie_prontuario_estab_w = '2') then
				nr_prontuario_estab_w := cd_pessoa_fisica_w;
			elsif (ie_prontuario_estab_w = '3') then
				if (coalesce(nr_prontuario_w,0) = 0) then
					nr_prontuario_estab_w := cd_pessoa_fisica_w;
				end if;
			end if;

			if (nr_prontuario_estab_w IS NOT NULL AND nr_prontuario_estab_w::text <> '') then
				nr_prontuario_w := nr_prontuario_estab_w;
			end if;

			ie_bloqueio_inconsistente_w := 'N';
			If (ie_consolidado_w = 'N') then
				If	((ie_gerar_consistentes_w = 'N') or
					 ( (dt_nascimento_w IS NOT NULL AND dt_nascimento_w::text <> '') and (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (cd_cid_primario_w IS NOT NULL AND cd_cid_primario_w::text <> '') and (cd_municipio_ibge_w IS NOT NULL AND cd_municipio_ibge_w::text <> '') and (nm_logradouro_w IS NOT NULL AND nm_logradouro_w::text <> '') and (sg_estado_paciente_w IS NOT NULL AND sg_estado_paciente_w::text <> '') and (ie_sexo_w IS NOT NULL AND ie_sexo_w::text <> '') and (length(coalesce(cd_cep_w,'X')) >= 8) and (cih_obter_se_cid_comp_opcao(cd_procedimento_w, ie_origem_proced_consolid_w, cd_cid_primario_w, ie_opcao_cid_w) = 'S'))) then
					ie_bloqueio_inconsistente_w := 'N';
				Else
					ie_bloqueio_inconsistente_w := 'S';
				End If;
			Else
				If (ie_gerar_consistentes_w = 'N')
				Or (cih_obter_se_cid_comp_opcao(cd_procedimento_w, ie_origem_proced_consolid_w, cd_cid_primario_w, ie_opcao_cid_w) = 'S') Then
					ie_bloqueio_inconsistente_w := 'N';
				Else
					ie_bloqueio_inconsistente_w := 'S';
				End If;
			End if;

			/* Param [30] - Gerar o CID de acordo com os diagnosticos do atendimento */

			If (ie_gerar_cid_diag_atend_w = 'S') then
				If (ie_permite_cid_preliminar_w = 'S') then
					cd_cid_primario_w := Obter_cid_atendimento(nr_atendimento_w, 'P');
				Else
					cd_cid_primario_w := Obter_cid_princ_atendimento(nr_atendimento_w);
				End if;
				cd_cid_secundario_w := obter_cid_secun_atendimento(nr_atendimento_w);
			End if;

			/* Param [38] - Gerar o CID de acordo com o Proc. CIH da funcao Entrada Unica de Pacientes */

			if (ie_busca_cid_proc_cih_w = 'S') then
				select	max(cd_cid_primario),
					max(cd_cid_secundario)
				into STRICT	cd_cid_primario_cih_w,
					cd_cid_secundario_cih_w
				from	procedimento_paciente_cih
				where	nr_atendimento = nr_atendimento_w;

				if (cd_cid_primario_cih_w IS NOT NULL AND cd_cid_primario_cih_w::text <> '') then
					cd_cid_primario_w := cd_cid_primario_cih_w;
				end if;

				if (cd_cid_secundario_cih_w IS NOT NULL AND cd_cid_secundario_cih_w::text <> '') then
					cd_cid_secundario_w := cd_cid_secundario_cih_w;
				end if;
			end if;

			If (ciha_obter_se_proc_parto(cd_procedimento_w) = 'N') then
				qt_filhos_vivos_w	:= 0;
				doc_nasc1_w		:= 0;
				doc_nasc2_w		:= 0;
				doc_nasc3_w		:= 0;
				doc_nasc4_w		:= 0;
				doc_nasc5_w		:= 0;
			else
				select	obter_qt_nascidos_cih(cd_procedimento_w,nr_atendimento_w),
					somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,1,nr_atendimento_w),1,11),'+',''))),
					somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,2,nr_atendimento_w),1,11),'+',''))),
					somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,3,nr_atendimento_W),1,11),'+',''))),
					somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,4,nr_atendimento_w),1,11),'+',''))),
					somente_numero(elimina_aspas(replace(substr(obter_dnv_nascidos_cih(cd_procedimento_w,5,nr_atendimento_w),1,11),'+','')))
				into STRICT	qt_filhos_vivos_w,
					doc_nasc1_w,
					doc_nasc2_w,
					doc_nasc3_w,
					doc_nasc4_w,
					doc_nasc5_w
				;
			end if;

			If	((ie_gera_atend_sem_conta_w = 'S') or (obter_se_atend_possui_conta(nr_atendimento_w, 'T', ie_gera_atend_sem_conta_w, cd_estabelecimento_p) = 'S'))
			And	((cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') or
				 ((ie_bloquear_reg_sem_proced_w = 'N') or
				  (ie_bloquear_reg_sem_proced_w = 'I' AND ie_tipo_reg_interface_w <> 2) or
				  ((ie_bloquear_reg_sem_proced_w = 'A') and (ie_tipo_reg_interface_w not in (4,5)))))
			And (ie_bloqueio_inconsistente_w = 'N')
			And (obter_se_proc_lib_CIHA(cd_procedimento_w, ie_origem_proced_consolid_w) = 'S') then /*  Se nao passar nesse if nao gera o registro */
				select	a.dt_entrada,
						a.dt_alta
				into STRICT	dt_entrada_w,
						dt_alta_w
				from	estabelecimento d,
						pessoa_juridica e,
						atendimento_paciente a,
						atend_categoria_convenio t
				where	a.nr_atendimento		= nr_atendimento_w
				and		coalesce(a.ie_tipo_convenio,1)	<> 3
				and		a.cd_estabelecimento		= d.cd_estabelecimento
				and		d.cd_cgc			= e.cd_cgc
				and		nr_seq_interno_w = t.nr_seq_interno;

				If (ie_forma_define_tipo_atend_w = 3) then
					/* Considerar o registro do procedimento no SUS */

					If (ie_tipo_reg_interface_w = 4) then
						If (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_consolid_w, 'C', 2) in (3)) and (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_consolid_w, 'C', 1) not in (1, 2)) then
							/* Se o procedimento for Internado (AIH), o registro no CIHA sera considerado Internado */

							ie_tipo_reg_interface_w := 2;
						End if;
					Else
						If	((Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_consolid_w, 'C', 1) in (1, 2)) or (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_consolid_w, 'C', 2) in (4, 5))) and (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_consolid_w, 'C', 2) not in (3)) then
							/* Se o procedimento for Ambulatorial (BPA, APAC), o registro no CIHA sera considerado Ambulatorial */

							If (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_consolid_w, 'C', 1) = 1) then
								ie_tipo_reg_interface_w := 5;
								ie_consolidado_w := 'S';
							Else
								ie_tipo_reg_interface_w := 4;
							End if;
						End if;
					End if;
				Elsif (ie_forma_define_tipo_atend_w = 4) then
					/* Considerar Portaria 312 */

					If (ie_tipo_reg_interface_w = 2) and
						(trunc(trunc((coalesce(dt_alta_w, clock_timestamp()) - dt_entrada_w) * 86400) / 3600) <= 24) then
						/* Se o atendimento for do tipo internado, mas durou menos de 24h, e considerado ambulatorial */

						If (Sus_Obter_TipoReg_Proc(cd_procedimento_w, ie_origem_proced_consolid_w, 'C', 1) = 1) then
							ie_tipo_reg_interface_w := 5;
							ie_consolidado_w := 'S';
						Else
							ie_tipo_reg_interface_w := 4;
						End if;
					End if;
				End if;

				select	v.cd_fonte_remuner_cih,
					CASE WHEN v.ie_tipo_convenio=1 THEN  CASE WHEN v.cd_fonte_remuner_cih=9 THEN  v.cd_cgc  ELSE '' END   ELSE v.cd_cgc END ,
					CASE WHEN coalesce(v.cd_fonte_remuner_cih, CASE WHEN v.ie_tipo_convenio=1 THEN '2'  ELSE CASE WHEN v.ie_tipo_convenio=4 THEN '3' WHEN v.ie_tipo_convenio=6 THEN '6' WHEN v.ie_tipo_convenio=9 THEN '9'  ELSE '1' END  END )=1 THEN  lpad(substr(e.cd_ans,1,6),6,'0')  ELSE null END
				into STRICT	ie_fonte_remuner2_w,
					cd_cnpj_w,
					cd_ans_w
				from	convenio v,
					atend_categoria_convenio t,
					pessoa_juridica e
				where	v.cd_convenio = t.cd_convenio
				and	v.cd_cgc = e.cd_cgc
				and	nr_seq_interno_w = t.nr_seq_interno;

				if (qt_sus_dias_uti_w = 0) then
					qt_dias_uti_w 		:= qt_int_dias_uti_c02_w;
				else
					qt_dias_uti_w 		:= qt_sus_dias_uti_w;				
				end if;
				
				if (ie_tipo_reg_interface_w = 4) then
					nr_declaracao_obito_w   := null;
				else
					nr_declaracao_obito_w   := nr_decl_obito_c02_w;
				end if;
				
				
				select	a.dt_entrada,
					a.dt_alta,
					CASE WHEN ie_alta_sus_w='S' THEN  coalesce(OBTER_MOTIVO_ALTA_SUS(a.nr_atendimento), a.cd_motivo_alta)  ELSE a.cd_motivo_alta END ,
					CASE WHEN ie_fonte_remuner2_w=2 THEN  null WHEN ie_fonte_remuner2_w=3 THEN  null  ELSE CASE WHEN coalesce(e.cd_internacional::text, '') = '' THEN  CASE WHEN Obter_Valor_Conv_Estab(t.cd_convenio,a.cd_estabelecimento,'IE_CGC_CIH')='S' THEN cd_cnpj_w  ELSE null END   ELSE substr(obter_cgc_estabelecimento(a.cd_estabelecimento),1,14) END  END  cd_cnpj_conv,
					CASE WHEN ie_fonte_remuner2_w=2 THEN  null WHEN ie_fonte_remuner2_w=3 THEN  null WHEN ie_fonte_remuner2_w=9 THEN  null  ELSE coalesce(substr(t.cd_usuario_convenio,1,30), '000000000000000000000000000000') END ,
					CASE WHEN ie_retirar_dia_uti_w='S' THEN cih_obter_dias_internacao_uti(a.dt_entrada, a.dt_alta, qt_dias_uti_w)  ELSE qt_dias_uti_w END  qt_dias_int_uti,
					dt_alta_interno,
					1 qtd_atendimento,
					CASE WHEN ie_tipo_reg_interface_w=2 THEN  2  ELSE 1 END  cd_modalidade,
					nr_doc_convenio
				into STRICT	dt_entrada_w,
					dt_alta_w,
					cd_motivo_alta_w,
					cd_cnpj_conv_w,
					cd_usuario_convenio_w,
					qt_dias_int_uti_w,
					dt_competencia_w,
					qtd_atendimento_w,
					cd_modalidade_w,
					nr_doc_convenio_w
				from	estabelecimento d,
					pessoa_juridica e,
					atendimento_paciente a,
					atend_categoria_convenio t
				where	a.nr_atendimento		= nr_atendimento_w
				and	coalesce(a.ie_tipo_convenio,1)	<> 3
				and	a.cd_estabelecimento		= d.cd_estabelecimento
				and	d.cd_cgc			= e.cd_cgc
				and	nr_seq_interno_w = t.nr_seq_interno;

				If (coalesce(nr_doc_convenio_w::text, '') = '') or (coalesce(trim(both nr_doc_convenio_w)::text, '') = '') or (trim(both nr_doc_convenio_w) = '') then
					select	max(substr(a.NR_GUIA_PRESTADOR, 1, 20))
					into STRICT	nr_doc_convenio_w
					from	TISS_CONTA_GUIA a,
						conta_paciente b
					where	a.nr_interno_conta = b.nr_interno_conta
					and	b.nr_atendimento = nr_atendimento_w;
				end if;

				If (ie_gerar_nr_conta_guia_tiss_w = 'S') and
					((coalesce(nr_doc_convenio_w::text, '') = '') or (coalesce(trim(both nr_doc_convenio_w)::text, '') = '') or (trim(both nr_doc_convenio_w) = '')) then
					select	max(nr_interno_conta)
					into STRICT	nr_doc_convenio_w
					from	conta_paciente
					where	nr_atendimento = nr_atendimento_w;
				end if;

				If (ie_consolidado_w = 'S')
				And (ie_tipo_reg_interface_w = 5) then

					nr_seq_lote_item_w := 0;
					qtd_atendimento_w := 1;

					If (ie_gerar_log_consolidados_w = 'S') and
						((ie_fonte_remuner2_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = '')) then
						insert	into ciha_consolidado(nr_sequencia,
								 nr_seq_lote,
								 nr_atendimento,
								 cd_procedimento,								 
								 nr_endereco,
								 ds_complemento,
								 cd_cns,
								 cd_municipio_ibge,
								 sg_estado_paciente,
								 cd_cep,
								 dt_nascimento,
								 ie_sexo,
								 cd_cid_primario,
								 cd_cid_secundario,
								 dt_entrada,
								 dt_alta,
								 cd_motivo_alta,
								 ds_procedimento,
								 ie_fonte_remuner2,
								 nm_paciente,
								 nm_logradouro,
								 cd_ans,
								 cd_cnpj_conv,
								 cd_usuario_convenio,
								 nr_declaracao_obito,
								 qt_filhos_vivos,
								 doc_nasc1,
								 doc_nasc2,
								 doc_nasc3,
								 doc_nasc4,
								 doc_nasc5,
								 qt_dias_int_uti,
								 nr_prontuario,
								 dt_competencia,
								 ie_consistente,
								 cd_modalidade,
								 nr_guia_tiss)
							values (nextval('ciha_consolidado_seq'),
								 nr_seq_lote_p,
								 nr_atendimento_w,
								 cd_procedimento_w,								 
								 nr_endereco_w,
								 ds_complemento_w,
								 cd_cns_w,
								 cd_municipio_ibge_w,
								 sg_estado_paciente_w,
								 cd_cep_w,
								 dt_nascimento_w,
								 ie_sexo_w,
								 cd_cid_primario_w,
								 cd_cid_secundario_w,
								 dt_entrada_w,
								 dt_alta_w,
								 cd_motivo_alta_w,
								 ds_procedimento_w,
								 ie_fonte_remuner2_w,
								 nm_paciente_w,
								 nm_logradouro_w,
								 cd_ans_w,
								 cd_cnpj_conv_w,
								 cd_usuario_convenio_w,
								 nr_declaracao_obito_w,
								 qt_filhos_vivos_w,
								 doc_nasc1_w,
								 doc_nasc2_w,
								 doc_nasc3_w,
								 doc_nasc4_w,
								 doc_nasc5_w,
								 qt_dias_int_uti_w,
								 nr_prontuario_w,
								 dt_competencia_w,
								 ie_consistente_w,
								 cd_modalidade_w,
								 nr_guia_tiss_w);
							commit;
					end if;

					/* Codigo ANS somente e obrigatorio para Planos privados */

					If (coalesce(ie_fonte_remuner2_w, '0') = 1) then

						If (cd_ans_w IS NOT NULL AND cd_ans_w::text <> '') and (ie_fonte_remuner2_w IS NOT NULL AND ie_fonte_remuner2_w::text <> '') then
							cd_ans_consolidado_w := cd_ans_w;
							ie_fonte_rem2_consol_w := ie_fonte_remuner2_w;
						else
							cd_ans_consolidado_w := null;
							ie_fonte_rem2_consol_w := null;
						end if;

						If (cd_ans_consolidado_w IS NOT NULL AND cd_ans_consolidado_w::text <> '') then
							select	max(a.nr_sequencia)
							into STRICT	nr_seq_lote_item_w
							from	lote_cih_item a
							where	a.ie_tipo_reg_interface in (5)
							and	a.cd_procedimento = cd_procedimento_w
							and	nr_seq_lote = nr_seq_lote_p
							and	coalesce(cd_ans, coalesce(cd_ans_consolidado_w, '0')) = coalesce(cd_ans_consolidado_w, '0')
							and	coalesce(ie_fonte_remuner2, coalesce(ie_fonte_rem2_consol_w, '0')) = coalesce(ie_fonte_rem2_consol_w, '0');
						end if;

						If (coalesce(nr_seq_lote_item_w, 0) > 0) and
							((ie_fonte_rem2_consol_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = '')) then
							update	lote_cih_item
							set	qtd_atendimento = coalesce(qtd_atendimento,0) + 1,
								cd_ans = coalesce(cd_ans_consolidado_w, cd_ans),
								ie_fonte_remuner2  = coalesce(ie_fonte_rem2_consol_w, ie_fonte_remuner2)
							where	nr_sequencia = nr_seq_lote_item_w;
						end if;
					Else
						cd_ans_consolidado_w := null;
						ie_fonte_rem2_consol_w := ie_fonte_remuner2_w;

						select	max(a.nr_sequencia)
						into STRICT	nr_seq_lote_item_w
						from	lote_cih_item a
						where	a.ie_tipo_reg_interface in (5)
						and	a.cd_procedimento = cd_procedimento_w
						and	nr_seq_lote = nr_seq_lote_p
						and	coalesce(ie_fonte_remuner2, coalesce(ie_fonte_rem2_consol_w, '0')) = coalesce(ie_fonte_rem2_consol_w, '0');

						If (coalesce(nr_seq_lote_item_w, 0) > 0) and
							((ie_fonte_rem2_consol_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = '')) then
							update	lote_cih_item
							set	qtd_atendimento = coalesce(qtd_atendimento,0) + 1,
								cd_ans  = NULL,
								ie_fonte_remuner2  = coalesce(ie_fonte_rem2_consol_w, ie_fonte_remuner2)
							where	nr_sequencia = nr_seq_lote_item_w;
						end if;
					End if;

					If (coalesce(nr_seq_lote_item_w, 0) <= 0) and
						((ie_fonte_rem2_consol_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = '')) then
						insert into LOTE_CIH_ITEM(
							nr_sequencia,
							nr_seq_lote,
							IE_TIPO_REG_INTERFACE,
							cd_procedimento,
							ds_procedimento,
							cd_ans,
							ie_fonte_remuner2,
							dt_competencia,
							DT_ATUALIZACAO,
							NM_USUARIO,
							DT_ATUALIZACAO_NREC,
							NM_USUARIO_NREC,
							qtd_atendimento,
							cd_modalidade)
						values ( nextval('lote_cih_item_seq'),
							nr_seq_lote_p,
							ie_tipo_reg_interface_w,
							cd_procedimento_w,
							ds_procedimento_w,
							cd_ans_consolidado_w,
							ie_fonte_rem2_consol_w,
							dt_competencia_lote_w,
							clock_timestamp(),
							NM_USUARIO_p,
							clock_timestamp(),
							NM_USUARIO_p,
							coalesce(qtd_atendimento_w, 1),
							CASE WHEN ie_tipo_reg_interface_w=2 THEN  2  ELSE 1 END );
						commit;
					End if;
			/* Anderson Ramos - Tratar atendimento consolidado (Procedimento BPAC) - Fim */

				Else

					/* Motivo de alta no Proc. CIH  - Inicio*/

					if (ie_alta_sus_w = 'S') then
						select	coalesce(max(m.cd_motivo_alta_sus), coalesce(max(p.cd_motivo_alta),0))
						into STRICT	cd_motivo_alta_ww
						from	procedimento_paciente_cih p,
							motivo_alta m
						where	nr_atendimento = nr_atendimento_w
						and	m.cd_motivo_alta = p.cd_motivo_alta;
					else
						select	coalesce(max(cd_motivo_alta),0)
						into STRICT	cd_motivo_alta_ww
						from	procedimento_paciente_cih
						where	nr_atendimento = nr_atendimento_w;
					end if;

					If (cd_motivo_alta_ww <> 0) then
						cd_motivo_alta_w := cd_motivo_alta_ww;
					End if;
					/* Motivo de alta no Proc. CIH  - Fim*/



					/* Nao gerar data e motivo de alta para atendimentos do tipo ambulatorial */

					If (ie_tipo_reg_interface_w = 4) then
						dt_alta_w := null;
						cd_motivo_alta_w := null;
						nr_declaracao_obito_w := null;
					end if;

					If (ie_generico_w = 'S') and (ie_limpa_cid_generico_w = 'S') then
						cd_cid_primario_w := null;
						cd_cid_secundario_w := null;
					end if;

					nr_seq_lote_item_amb_w := 0;
					nr_seq_lote_item_int_w := 0;

					select	max(nr_sequencia)
					into STRICT	nr_seq_lote_item_amb_w
					from	lote_cih_item
					where	ie_tipo_reg_interface  = ie_tipo_reg_interface_w
					and	ie_tipo_reg_interface_w in (4)
					and	trunc(dt_entrada_w) = trunc(dt_entrada)
					and	nm_paciente = nm_paciente_w
					and	cd_procedimento = cd_procedimento_w
					and	nr_seq_lote = nr_seq_lote_p;

				If (qt_filhos_vivos_w > 9) then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(176979, 'NR_ATENDIMENTO='|| nr_atendimento_w || ';QT_FILHOS='|| qt_filhos_vivos_w);
				End if;


					If (nr_seq_lote_item_amb_w > 0) then
						update	LOTE_CIH_ITEM
						set	qtd_atendimento = coalesce(qtd_atendimento,0) + 1
						where	nr_sequencia = nr_seq_lote_item_amb_w;
					Else
						Begin

						/* Param [26] - Gerar somente os CIDs com 4 Caracteres */

						If (ie_gera_cid_4_caracteres_w = 'S')
						And (length(cd_cid_primario_w) = 3) then
							cd_cid_primario_w := null;
						end if;
						
						if (ie_fonte_remuner2_w = cd_fonte_remuner_cih_p) or (coalesce(cd_fonte_remuner_cih_p::text, '') = '') then

							insert into LOTE_CIH_ITEM(
								nr_sequencia,
								nr_seq_lote,
								IE_TIPO_REG_INTERFACE,
								nm_paciente,
								nm_logradouro,
								nr_endereco,
								ds_complemento,
								cd_municipio_ibge,
								sg_estado_paciente,
								cd_cep,
								dt_nascimento,
								ie_sexo,
								cd_cns,
								cd_procedimento,
								cd_cid_primario,
								cd_cid_secundario,
								dt_entrada,
								dt_alta,
								cd_motivo_alta,
								ie_fonte_remuner2,
								ds_procedimento,
								cd_ans,
								cd_cnpj_conv,
								cd_usuario_convenio,
								nr_declaracao_obito,
								qt_filhos_vivos,
								doc_nasc1,
								doc_nasc2,
								doc_nasc3,
								doc_nasc4,
								doc_nasc5,
								qt_dias_int_uti,
								nr_prontuario,
								dt_competencia,
								DT_ATUALIZACAO,
								NM_USUARIO,
								DT_ATUALIZACAO_NREC,
								NM_USUARIO_NREC,
								nr_atendimento,
								ie_consistente,
								qtd_atendimento,
								cd_modalidade,
								nr_guia_tiss)
							values ( nextval('lote_cih_item_seq'),
								nr_seq_lote_p,
								ie_tipo_reg_interface_w,
								nm_paciente_w,
								nm_logradouro_w,
								nr_endereco_w,
								ds_complemento_w,
								CASE WHEN ie_tipo_reg_interface_w=2 THEN  coalesce(cd_municipio_ibge_w,'999999') WHEN ie_tipo_reg_interface_w=4 THEN  coalesce(cd_municipio_ibge_w,'999999')  ELSE cd_municipio_ibge_w END ,
								sg_estado_paciente_w,
								cd_cep_w,
								dt_nascimento_w,
								ie_sexo_w,
								cd_cns_w,
								cd_procedimento_w,
								cd_cid_primario_w,
								cd_cid_secundario_w,
								dt_entrada_w,
								dt_alta_w,
								cd_motivo_alta_w,
								ie_fonte_remuner2_w,
								ds_procedimento_w,
								cd_ans_w,
								cd_cnpj_conv_w,
								cd_usuario_convenio_w,
								nr_declaracao_obito_w,
								qt_filhos_vivos_w,
								elimina_caracteres_especiais(doc_nasc1_w),
								elimina_caracteres_especiais(doc_nasc2_w),
								elimina_caracteres_especiais(doc_nasc3_w),
								elimina_caracteres_especiais(doc_nasc4_w),
								elimina_caracteres_especiais(doc_nasc5_w),
								qt_dias_int_uti_w,
								nr_prontuario_w,
								dt_competencia_lote_w,
								clock_timestamp(),
								NM_USUARIO_p,
								clock_timestamp(),
								NM_USUARIO_p,
								nr_atendimento_w,
								ie_consistente_w,
								coalesce(qtd_atendimento_w, 1),
								CASE WHEN ie_tipo_reg_interface_w=2 THEN  2  ELSE 1 END ,
								nr_doc_convenio_w);
						end if;
						commit;
						end;
					End if; -- Sobreposicao
				End if; -- Consolidado
			End if;	-- Gera linha no arquivo
		End if;	--  Proced da Conta
	End if; -- Convenio Gera CIHA
end loop;
close c02;

update 	lote_cih
set 	dt_geracao = clock_timestamp()
where	nr_sequencia = nr_seq_lote_p;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_ciha_versao1_0 (nr_seq_lote_p bigint, ie_consiste_municipio_ibge_p text, ie_gerar_atend_sem_alta_uti_p text, ie_restringer_estab_atend_p text, ie_gerar_pac_cronico_p text, ds_motivo_alta_p text, ie_gera_atend_lote_p text, ds_versao_p text, ds_tipo_atend_gera_p text default '', cd_convenio_gera_p bigint default 0, cd_categoria_gera_p bigint default 0, ds_plano_gera_p text default '', cd_estabelecimento_p bigint DEFAULT NULL, nm_usuario_p text DEFAULT NULL, cd_fonte_remuner_cih_p text DEFAULT NULL) FROM PUBLIC;

