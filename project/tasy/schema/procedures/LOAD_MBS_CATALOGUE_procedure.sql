-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE load_mbs_catalogue () AS $body$
DECLARE


  qt_area_procedimento_w bigint;

	qt_especialidade_proc_w bigint;

	qt_grupo_proc_w bigint;

	qt_procedimento_w bigint;

	qt_procedimento_versao_w bigint;



	cd_area_procedimento_w bigint;

	cd_especialidade_proc_w bigint;

	cd_grupo_proc_w bigint;

	cd_procedimento_w bigint;

	cd_procedimento_versao_w bigint;



	cd_area_procedimento_seq_w bigint;

	cd_especialidade_proc_seq_w bigint;

	cd_grupo_proc_seq_w bigint;

	cd_procedimento_seq_w bigint;

	cd_procedimento_versao_seq_w bigint;

	ds_error_w varchar(4000);

	cd_mapped_item_subgroup_ww varchar(5);

	ds_mapped_item_subgroup_ww varchar(255);

	cd_procedimento_exist_w bigint;

	qt_proc_versao_exist_w smallint;

	qt_proc_versao_exist_map_w smallint;





  c01 CURSOR FOR

	SELECT * from w_mbsload_proc;

  r1 c01%rowtype;


BEGIN

open c01;

loop

fetch c01 into r1;



  if c01%notfound then

      update mbs_import_log

      set dt_end = clock_timestamp()

      where ie_status = 'IMBS'

      and coalesce(dt_end::text, '') = '';

      exit;

  end if;

	begin

    CALL gravar_processo_longo('Importing item '||r1.cd_item||' - '||substr(r1.ds_mapped_item_desc,1,255),'INSERT_PROCEDIMENTO',null);

	   select count(*)

	   into STRICT qt_area_procedimento_w

	   from area_procedimento

	   where cd_sistema_ant=r1.cd_mapped_item_category

	   and ie_origem_proced=20;





		if (qt_area_procedimento_w=0) then



		  select max(cd_area_procedimento)+1

		  into STRICT cd_area_procedimento_seq_w

		  from area_procedimento;



			 begin

				insert into area_procedimento(

				cd_area_procedimento,

				cd_original,

				cd_sistema_ant,

				ds_area_procedimento,

				dt_atualizacao,

				dt_atualizacao_nrec,

				ie_origem_proced,

				nm_usuario,

				nm_usuario_nrec

				)

				values (

				cd_area_procedimento_seq_w,

				cd_area_procedimento_seq_w,

				r1.cd_mapped_item_category,

				substr(r1.ds_category_desc,1,40),

				clock_timestamp(),

				clock_timestamp(),

				20,

				r1.nm_usuario,

				r1.nm_usuario

				);



			end;



		else



			update area_procedimento

			set ds_area_procedimento=substr(r1.ds_category_desc,1,40),

			dt_atualizacao=clock_timestamp(),

			nm_usuario=r1.nm_usuario

			where cd_sistema_ant=r1.cd_mapped_item_category

		    and ie_origem_proced=20;



		end if;

  exception

	when others then

      ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,coalesce(wheb_usuario_pck.get_nr_seq_idioma,9),'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || r1.cd_item) || chr(10);

	end;



	begin



		select count(*)

		into STRICT qt_especialidade_proc_w

		from especialidade_proc

		where cd_sistema_ant=r1.cd_mapped_item_group

		and ie_origem_proced=20;







		if (qt_especialidade_proc_w=0) then



		  select max(cd_especialidade)+1

		  into STRICT cd_especialidade_proc_seq_w

		  from especialidade_proc;



		  select cd_area_procedimento

		  into STRICT cd_area_procedimento_w

		  from area_procedimento

		  where cd_sistema_ant=r1.cd_mapped_item_category;



			 begin

				insert into especialidade_proc(

				cd_area_procedimento,

				cd_especialidade,

				cd_especialidade_medica,

				cd_original,

				cd_sistema_ant,

				ds_especialidade,

				dt_atualizacao,

				dt_atualizacao_nrec,

				ie_origem_proced,

				nm_usuario,

				nm_usuario_nrec

				)

				values (

				cd_area_procedimento_w,

				cd_especialidade_proc_seq_w,

				null,

				cd_especialidade_proc_seq_w,

				r1.cd_mapped_item_group,

				substr(r1.ds_group_desc,1,240),

				clock_timestamp(),

				clock_timestamp(),

				20,

				r1.nm_usuario,

				r1.nm_usuario

				);



			end;



		else



			update  especialidade_proc

			set 	ds_especialidade=substr(r1.ds_group_desc,1,240),

					dt_atualizacao=clock_timestamp(),

					nm_usuario=r1.nm_usuario

			where   cd_sistema_ant=r1.cd_mapped_item_group

			and     ie_origem_proced=20;



		end if;

  exception

	when others then

	    ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,coalesce(wheb_usuario_pck.get_nr_seq_idioma,9),'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || r1.cd_item) || chr(10);

	end;



	begin



		cd_mapped_item_subgroup_ww:= coalesce(r1.cd_mapped_item_subgroup,r1.cd_mapped_item_group||'00');

		ds_mapped_item_subgroup_ww := coalesce(r1.ds_subgroup_desc,obter_desc_exp_idioma(928067,coalesce(wheb_usuario_pck.get_nr_seq_idioma,9),'SUBGRPID=' ||r1.cd_mapped_item_group));



		select count(*)

		into STRICT qt_grupo_proc_w

		from grupo_proc

		where cd_sistema_ant=cd_mapped_item_subgroup_ww

        and ie_origem_proced=20;







		if (qt_grupo_proc_w=0) then



		   select max(cd_grupo_proc)+1

		   into STRICT cd_grupo_proc_seq_w

		   from grupo_proc;



		   select cd_especialidade

           into STRICT cd_especialidade_proc_w

           from especialidade_proc

           where cd_sistema_ant=r1.cd_mapped_item_group;



			begin

				insert into grupo_proc(

				cd_especialidade,

				cd_grupo_proc,

				cd_original,

				cd_sistema_ant,

				ds_grupo_proc,

				ds_observacao,

				dt_atualizacao,

				ie_origem_proced,

				ie_situacao,

				nm_usuario

				)

				values (

				cd_especialidade_proc_w,

				cd_grupo_proc_seq_w,

				cd_grupo_proc_seq_w,

				cd_mapped_item_subgroup_ww,

				substr(ds_mapped_item_subgroup_ww,1,240),

				null,

				clock_timestamp(),

				20,

				'A',

				r1.nm_usuario

				);



			end;



		else



			update  grupo_proc

			set  	ds_grupo_proc=substr(ds_mapped_item_subgroup_ww,1,240),

					dt_atualizacao=clock_timestamp(),

					nm_usuario=r1.nm_usuario

			where   cd_sistema_ant=cd_mapped_item_subgroup_ww

			and     ie_origem_proced=20;



		end if;

  exception

	when others then

	    ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,coalesce(wheb_usuario_pck.get_nr_seq_idioma,9),'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || r1.cd_item) || chr(10);

	end;



	begin

		select count(*)

		into STRICT qt_procedimento_w

		from procedimento

		where cd_procedimento_loc= r1.cd_mapped_item

		and ie_origem_proced=20;



		if (qt_procedimento_w=0) then



			select nextval('procedimento_seq')

			into STRICT cd_procedimento_seq_w

			;



        	select cd_grupo_proc

			into STRICT cd_grupo_proc_w

			from grupo_proc

			where cd_sistema_ant=cd_mapped_item_subgroup_ww

			and ie_origem_proced=20;



			insert into procedimento(

					cd_procedimento,

					cd_procedimento_loc,

					cd_grupo_proc,

					ds_procedimento,

					ie_situacao,

					ie_sexo_sus,

					qt_idade_minima_sus,

					qt_idade_maxima_sus,

					ie_alta_complexidade,

					ie_ativ_prof_bpa,

					ie_localizador,

					ie_classificacao,

					ie_origem_proced,

					dt_atualizacao,

					nm_usuario,

					ie_gera_associado,

					ie_assoc_adep,

					ie_classif_custo,

					qt_exec_barra,

					ie_cobra_adep,

					ie_ignora_origem,

					ie_exige_autor_sus

					)

					values (

					cd_procedimento_seq_w,

					r1.cd_mapped_item,

					cd_grupo_proc_w,

					substr(r1.ds_mapped_item_desc,1,255),

					CASE WHEN sign(clock_timestamp() - r1.dt_item_end_date)=1 THEN  'I' WHEN sign(clock_timestamp() - r1.dt_item_end_date)=-1 THEN 'A'  ELSE 'I' END ,

					null,

					null,

					null,

					'N',

					'N',

					'S',

					1,

					20,

					clock_timestamp(),

					r1.nm_usuario,

					'S',

					'S',

					'B',

					1,

					'S',

					'N',

					'N'

					);



			insert into procedimento_versao(

					  nr_sequencia,

					  dt_versao,

					  dt_atualizacao,

					  nm_usuario,

					  dt_atualizacao_nrec,

					  nm_usuario_nrec,

					  dt_vigencia_inicial,

					  dt_vigencia_final,

					  cd_procedimento,

					  ie_origem_proced,

					  cd_versao,

					  cd_proc_previous

					  )

					  values (

					  nextval('procedimento_versao_seq'),

					  null,

					  clock_timestamp(),

					  r1.nm_usuario,

					  clock_timestamp(),

					  r1.nm_usuario,

					  r1.dt_item_start_date,

					  r1.dt_item_end_date,

					  cd_procedimento_seq_w,

					  20,

					  null,

					  r1.cd_item

					  );



		else



			select count(*)

			into STRICT qt_proc_versao_exist_w

			from procedimento_versao

			where ie_origem_proced=20

			and cd_proc_previous = r1.cd_item;



        if (qt_proc_versao_exist_w=0  ) then



			select cd_procedimento

			into STRICT cd_procedimento_exist_w

			from procedimento

			where cd_procedimento_loc = r1.cd_mapped_item;



         insert into procedimento_versao(

					  nr_sequencia,

					  dt_versao,

					  dt_atualizacao,

					  nm_usuario,

					  dt_atualizacao_nrec,

					  nm_usuario_nrec,

					  dt_vigencia_inicial,

					  dt_vigencia_final,

					  cd_procedimento,

					  ie_origem_proced,

					  cd_versao,

					  cd_proc_previous

					  )

					  values (

					  nextval('procedimento_versao_seq'),

					  null,

					  clock_timestamp(),

					  r1.nm_usuario,

					  clock_timestamp(),

					  r1.nm_usuario,

					  r1.dt_item_start_date,

					  r1.dt_item_end_date,

					  cd_procedimento_exist_w,

					  20,

					  null,

					  r1.cd_item

					  );



          else

            update 	procedimento_versao

            set 	dt_vigencia_inicial = r1.dt_item_start_date,

					dt_vigencia_final= r1.dt_item_end_date

            where 	ie_origem_proced=20

			and 	cd_proc_previous = r1.cd_item;



          end if;



				if (sign(clock_timestamp()-r1.dt_item_end_date)<0) then

					update 	procedimento

					set 	ie_situacao= 'A',

                			nm_usuario=r1.nm_usuario,

                			dt_atualizacao=clock_timestamp(),

                			ds_procedimento=substr(r1.ds_mapped_item_desc,1,255)

                	where 	cd_procedimento_loc= r1.cd_mapped_item

                	and 	ie_origem_proced=20;



				end if;



		end if;

  exception

	when others then

		ds_error_w:= ds_error_w || obter_desc_exp_idioma(928065,coalesce(wheb_usuario_pck.get_nr_seq_idioma,9),'ERR=' || sqlerrm(SQLSTATE)||' ;CODEID=' || r1.cd_item) || chr(10);

  end;



if (ds_error_w IS NOT NULL AND ds_error_w::text <> '') then

	insert into mbs_import_log(dt_start,ie_status,ds_error) values (clock_timestamp(),'EMBS',ds_error_w);

	ds_error_w := null;

end if;

end loop;

delete FROM w_mbsload_proc;

close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE load_mbs_catalogue () FROM PUBLIC;

