-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_imp_resp_ordem_serv_v50 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Importar resposta ordem serv_v40

Rotina utilizada nas transações ptu via scs homologadas com a unimed brasil.
quando for alterar, favor verificar com o análista responsável para a realização de testes.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
Performance
---------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_transacao_w			varchar(5);
ie_tipo_cliente_w		varchar(15);
cd_unimed_exec_w		smallint;
cd_unimed_benef_w		smallint;
nr_seq_execucao_w		bigint;
nr_seq_origem_w			bigint;
cd_unimed_w			smallint;
cd_usuario_plano_w		bigint;
nm_prestador_w			varchar(25);
nr_seq_guia_w			bigint;
nr_seq_requisicao_w		bigint;
nr_seq_resposta_w		bigint;
ds_observacao_w			varchar(999);
ie_tipo_tabela_w		varchar(2);
cd_servico_w			integer;
qt_autorizada_w			varchar(8);
qt_autorizada_ww		double precision;
ie_status_req_w			smallint;
cd_mens_erro_1			smallint;
cd_mens_erro_2			smallint;
cd_mens_erro_3			smallint;
cd_mens_erro_4			smallint;
cd_mens_erro_5			smallint;
nr_seq_transacao_w		bigint;
ie_tipo_transacao_w		varchar(2);
qt_registro_w			smallint;
qt_registro_ww			smallint;
nr_seq_importacao_w		bigint;
ds_conteudo_w			varchar(4000);
nr_seq_material_w		bigint;
nr_seq_procedimento_w		bigint;
cd_servico_consersao_w		bigint;
nr_versao_w			varchar(3);
ds_mens_erro_w			varchar(999);
cd_unimed_solic_w		smallint;
nr_seq_resp_req_ser_w		bigint;
qt_registros_w			integer;
qt_registros_aprov_w		integer;
qt_registros_neg_w		integer;

c01 CURSOR FOR
	SELECT	nr_seq_importacao,
		ds_valores
	from	w_scs_importacao
	where	nm_usuario	= nm_usuario_p
	order by nr_seq_importacao;


BEGIN

open c01;
loop
fetch c01 into
	nr_seq_importacao_w,
	ds_conteudo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	if (substr(ds_conteudo_w,1,4)	<> 'FIM$') then
		if (nr_seq_importacao_w	= 1) then
			cd_transacao_w		:= substr(ds_conteudo_w,1,5);
			ie_tipo_cliente_w	:= trim(both substr(ds_conteudo_w,6,15));
			cd_unimed_benef_w	:= (substr(ds_conteudo_w,21,4))::numeric;
			cd_unimed_exec_w	:= (substr(ds_conteudo_w,25,4))::numeric;
			cd_unimed_solic_w	:= (substr(ds_conteudo_w,29,4))::numeric;
			nr_seq_origem_w		:= (substr(ds_conteudo_w,33,10))::numeric;
			nr_seq_execucao_w	:= (substr(ds_conteudo_w,43,10))::numeric;
			cd_unimed_w		:= (substr(ds_conteudo_w,53,4))::numeric;
			cd_usuario_plano_w	:= trim(both substr(ds_conteudo_w,57,13));
			nm_prestador_w		:= trim(both substr(ds_conteudo_w,70,25));
			nr_versao_w		:= trim(both substr(ds_conteudo_w,95,3));

			select	count(1)
			into STRICT	qt_registros_w
			from	ptu_requisicao_ordem_serv
			where	nr_transacao_solicitante	= nr_seq_origem_w
			and	cd_unimed_solicitante		= cd_unimed_solic_w;

			if (qt_registros_w	> 0) then
				select	nextval('ptu_resposta_req_ord_serv_seq')
				into STRICT	nr_seq_resposta_w
				;

				if (ie_tipo_cliente_w	= 'UNIMED') then
					ie_tipo_cliente_w	:= 'U';
				elsif (ie_tipo_cliente_w	= 'PORTAL') then
					ie_tipo_cliente_w	:= 'P';
				elsif (ie_tipo_cliente_w	= 'PRESTADOR') then
					ie_tipo_cliente_w	:= 'R';
				end if;

				insert	into ptu_resposta_req_ord_serv(nr_sequencia, cd_transacao, ie_tipo_cliente,
					 cd_unimed_executora, cd_unimed_beneficiario, nr_seq_execucao,
					 cd_unimed, cd_usuario_plano, nr_seq_origem,
					 nm_prest_alto_custo, nr_seq_requisicao, nr_seq_guia,
					 nm_usuario, dt_atualizacao, ds_arquivo_pedido,
					 nm_usuario_nrec, dt_atualizacao_nrec, nr_versao,
					 cd_unimed_solicitante)
				values (nr_seq_resposta_w, cd_transacao_w, ie_tipo_cliente_w,
					 cd_unimed_exec_w, cd_unimed_benef_w, nr_seq_execucao_w,
					 cd_unimed_w, cd_usuario_plano_w, nr_seq_origem_w,
					 nm_prestador_w, nr_seq_requisicao_w, nr_seq_guia_w,
					 nm_usuario_p, clock_timestamp(), ds_arquivo_p,
					 nm_usuario_p, clock_timestamp(), nr_versao_w,
					 cd_unimed_solic_w);
			end if;
		elsif (nr_seq_importacao_w	= 2) then
			select	trim(both substr(ds_conteudo_w,1,999))
				into STRICT	ds_observacao_w
				;

				update	ptu_requisicao_ordem_serv
				set	ds_observacao	= ds_observacao_w
				where	nr_sequencia	= nr_seq_resposta_w;
		elsif (nr_seq_importacao_w	> 2)  then
			ie_tipo_tabela_w	:= substr(ds_conteudo_w,1,1);
			cd_servico_w		:= (substr(ds_conteudo_w,2,8))::numeric;
			qt_autorizada_w		:= substr(ds_conteudo_w,10,8);
			ie_status_req_w		:= (substr(ds_conteudo_w,18,1))::numeric;
			cd_mens_erro_1		:= (substr(ds_conteudo_w,19,4))::numeric;
			cd_mens_erro_2		:= (substr(ds_conteudo_w,23,4))::numeric;
			cd_mens_erro_3		:= (substr(ds_conteudo_w,27,4))::numeric;
			cd_mens_erro_4		:= (substr(ds_conteudo_w,31,4))::numeric;
			cd_mens_erro_5		:= (substr(ds_conteudo_w,35,4))::numeric;
			ds_mens_erro_w		:= substr(ds_conteudo_w,39,300);

			begin
				qt_autorizada_ww  := (ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w, 'R'))::numeric;
			exception
			when others then
				qt_autorizada_ww   := (replace(ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w, 'R'),',','.'))::numeric;
			end;

			select	nextval('ptu_resposta_req_servico_seq')
			into STRICT	nr_seq_resp_req_ser_w
			;

			insert	into ptu_resposta_req_servico(nr_sequencia, nr_seq_resp_req_ord, cd_servico,
				 qt_servico_aut, ie_status_requisicao, ie_tipo_tabela,
				 nm_usuario, dt_atualizacao, nm_usuario_nrec,
				 dt_atualizacao_nrec)
			values (nr_seq_resp_req_ser_w, nr_seq_resposta_w, cd_servico_w,
				 qt_autorizada_ww, ie_status_req_w, ie_tipo_tabela_w,
				 nm_usuario_p, clock_timestamp(), nm_usuario_p,
				 clock_timestamp());

			if (ie_tipo_tabela_w	in ('0','1','4')) then
				if (cd_mens_erro_1	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_1,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, nr_seq_resp_req_ser_w, null, null, nm_usuario_p);
				end if;

				if (cd_mens_erro_2	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_2,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, nr_seq_resp_req_ser_w, null, null, nm_usuario_p);
				end if;

				if (cd_mens_erro_3	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_3,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, nr_seq_resp_req_ser_w, null, null, nm_usuario_p);
				end if;

				if (cd_mens_erro_4	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_4,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, nr_seq_resp_req_ser_w, null, null, nm_usuario_p);
				end if;

				if (cd_mens_erro_5	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_5,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, nr_seq_resp_req_ser_w, null, null, nm_usuario_p);
				end if;
			elsif (ie_tipo_tabela_w	in ('2','3')) then
				if (cd_mens_erro_1	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_1,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, null, nr_seq_resp_req_ser_w, null, nm_usuario_p);
				end if;

				if (cd_mens_erro_2	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_2,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, null, nr_seq_resp_req_ser_w, null, nm_usuario_p);
				end if;

				if (cd_mens_erro_3	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_3,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, null, nr_seq_resp_req_ser_w, null, nm_usuario_p);
				end if;

				if (cd_mens_erro_4	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_4,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, null, nr_seq_resp_req_ser_w, null, nm_usuario_p);
				end if;

				if (cd_mens_erro_5	<> 0) then
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_erro_5,ds_mens_erro_w,cd_estabelecimento_p, nr_seq_resposta_w, ie_tipo_transacao_w,
									cd_transacao_w, null, nr_seq_resp_req_ser_w, null, nm_usuario_p);
				end if;
			end if;
		end if;
	end if;
	end;
end loop;
close c01;

select	count(1)
into STRICT	qt_registros_neg_w
from	ptu_resposta_req_servico
where	nr_seq_resp_req_ord	= nr_seq_resposta_w
and	ie_status_requisicao	= 1;

select	count(1)
into STRICT	qt_registros_aprov_w
from	ptu_resposta_req_servico
where	nr_seq_resp_req_ord	= nr_seq_resposta_w
and	ie_status_requisicao	= 2;

-- Se a operadora de origem do beneficiário for diferente da operadora solicitante da ordem de serviço, é caracterizada uma Triangulação
if (cd_unimed_benef_w	<> cd_unimed_solic_w) then
	if (qt_registros_neg_w	> 0)	and (qt_registros_aprov_w	= 0) then
		-- Se a resposta da ordem de serviço vier totalmente recusada, se encerra o processo
		update	ptu_requisicao_ordem_serv
		set	ie_estagio			= 4
		where	nr_transacao_solicitante	= nr_seq_origem_w
		and	cd_unimed_solicitante		= cd_unimed_solic_w;
	else
		-- Se pelo menos um item for aceito, a ordem de serviço fica aguardando a transação de autorização
		update	ptu_requisicao_ordem_serv
		set	ie_estagio			= 2
		where	nr_transacao_solicitante	= nr_seq_origem_w
		and	cd_unimed_solicitante		= cd_unimed_solic_w;
	end if;
-- Se a operadora de origem do beneficiário for igual a operadora solicitante da ordem de serviço, é caracterizada uma transação ponto-a-ponto
elsif (cd_unimed_benef_w	= cd_unimed_solic_w) then
	if (qt_registros_neg_w	> 0)	and (qt_registros_aprov_w	= 0) then
		-- Se a resposta da ordem de serviço vier totalmente recusada, se encerra o processo
		update	ptu_requisicao_ordem_serv
		set	ie_estagio			= 4
		where	nr_transacao_solicitante	= nr_seq_origem_w
		and	cd_unimed_solicitante		= cd_unimed_solic_w;
	elsif (qt_registros_neg_w	> 0)	and (qt_registros_aprov_w	> 0) then
		-- Se a resposta da ordem de serviço vier com serviços recusados e aceitos, a ordem de serviço fica Parcialmente aceita
		update	ptu_requisicao_ordem_serv
		set	ie_estagio			= 5
		where	nr_transacao_solicitante	= nr_seq_origem_w
		and	cd_unimed_solicitante		= cd_unimed_solic_w;
	elsif (qt_registros_neg_w	= 0)	and (qt_registros_aprov_w	> 0) then
		-- Se a resposta da ordem de serviço vier totalmente aceita, o estágio da ordem de serviço fica Aceita e se encerra o processo
		update	ptu_requisicao_ordem_serv
		set	ie_estagio			= 3
		where	nr_transacao_solicitante	= nr_seq_origem_w
		and	cd_unimed_solicitante		= cd_unimed_solic_w;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_imp_resp_ordem_serv_v50 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

