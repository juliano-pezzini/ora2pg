-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_classif_benef ( dt_atualizacao_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint ) AS $body$
DECLARE


qt_limite_registros_w		integer := 1000;

nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
tb_nr_seq_segurado_w		pls_util_cta_pck.t_number_table;
tb_nr_seq_segurado_upd_w	pls_util_cta_pck.t_number_table;
tb_nr_seq_classif_upd_w		pls_util_cta_pck.t_number_table;
qt_contratacao_w		bigint;
qt_judicial_w			bigint;
qt_regra_contratacao_w		bigint := 0;
qt_regra_resultado_w		bigint := 0;
qt_regra_judicial_w		bigint := 0;
index_w				bigint;
ie_salvar_w			boolean;
tx_sinistralidade_w		double precision;
dt_referencia_apuracao_w	timestamp;
vl_saldo_juros_w		titulo_receber.vl_saldo_juros%type;
vl_saldo_multa_w		titulo_receber.vl_saldo_multa%type;
cd_pagador_pf_pj_w		varchar(14);
nr_seq_grupo_w			pls_contrato_grupo.nr_seq_grupo%type;
nr_seq_pagador_w		pls_segurado.nr_seq_pagador%type;
nr_seq_contrato_seg_w		pls_segurado.nr_seq_contrato%type;

nr_seq_regra_w			pls_regra_classif_benef.nr_sequencia%type;
nr_seq_classificacao_w  	pls_regra_classif_benef.nr_seq_classificacao%type;
qt_meses_apuracao_w		pls_regra_classif_benef.qt_meses_apuracao%type;
ie_tipo_apuracao_w		pls_regra_classif_benef.ie_tipo_apuracao%type;
ie_contratacao_w		pls_regra_classif_benef.ie_contratacao%type;
ie_resultado_w			pls_regra_classif_benef.ie_resultado%type;
ie_processo_judicial_w		pls_regra_classif_benef.ie_processo_judicial%type;

nr_seq_contrato_w		pls_classif_benef_contrato.nr_seq_contrato%type;
nr_seq_plano_w			pls_classif_benef_contrato.nr_seq_plano%type;
ie_segmentacao_w		pls_classif_benef_contrato.ie_segmentacao%type;
ie_tipo_estipulante_w		pls_classif_benef_contrato.ie_tipo_estipulante%type;
ie_tipo_contratacao_w		pls_classif_benef_contrato.ie_tipo_contratacao%type;
dt_contratacao_inicial_w	pls_classif_benef_contrato.dt_contratacao_inicial%type;
dt_contratacao_final_w		pls_classif_benef_contrato.dt_contratacao_final%type;
ie_somente_situacao_trab_w	pls_classif_benef_contrato.ie_somente_situacao_trab%type;

tx_sinistralidade_inicial_w	pls_classif_benef_result.tx_sinistralidade_inicial%type;
tx_sinistralidade_final_w	pls_classif_benef_result.tx_sinistralidade_final%type;
vl_juros_multa_inicial_w	pls_classif_benef_result.vl_juros_multa_inicial%type;
vl_juros_multa_final_w		pls_classif_benef_result.vl_juros_multa_final%type;

ie_possui_processo_w		pls_classif_benef_processo.ie_possui_processo%type;

C01 CURSOR(dt_atualizacao_pc 	timestamp) FOR /* Beneficiários */
	SELECT	a.nr_sequencia
	from	pls_segurado a
	where	((a.dt_rescisao >= dt_atualizacao_pc) or (coalesce(a.dt_rescisao::text, '') = ''));

C02 CURSOR FOR /* Regra */
	SELECT	nr_sequencia,
		nr_seq_classificacao,
		qt_meses_apuracao,
		ie_tipo_apuracao,
		coalesce(ie_contratacao,'N'),
		coalesce(ie_resultado,'N'),
		coalesce(ie_processo_judicial,'N')
	from	pls_regra_classif_benef
	where	dt_atualizacao_p between coalesce(dt_inicio_vigencia, dt_atualizacao_p) and coalesce(dt_fim_vigencia,last_day(dt_atualizacao_p) + 0.99999)
	order by coalesce(ie_contratacao,'N') desc,
		 coalesce(ie_resultado,'N') desc,
		 coalesce(ie_processo_judicial,'N') desc;

C03 CURSOR FOR /* Contratação */
	SELECT	nr_seq_contrato,
		nr_seq_plano,
		ie_segmentacao,
		ie_tipo_estipulante,
		ie_tipo_contratacao,
		dt_contratacao_inicial,
		dt_contratacao_final,
		ie_somente_situacao_trab
	from	pls_classif_benef_contrato
	where	nr_seq_regra = nr_seq_regra_w
	and	ie_contratacao_w = 'S';

C04 CURSOR FOR /* Resultado */
	SELECT	tx_sinistralidade_inicial,
		tx_sinistralidade_final,
		vl_juros_multa_inicial,
		vl_juros_multa_final
	from	pls_classif_benef_result
	where	nr_seq_regra = nr_seq_regra_w
	and	ie_resultado_w = 'S';

C05 CURSOR FOR /* Processo Judicial */
	SELECT	ie_possui_processo
	from	pls_classif_benef_processo
	where	nr_seq_regra = nr_seq_regra_w
	and	ie_processo_judicial_w = 'S';

procedure update_registros is;
BEGIN
	forall x in tb_nr_seq_segurado_upd_w.first..tb_nr_seq_segurado_upd_w.last
		update	pls_segurado
		set	nr_seq_classificacao = tb_nr_seq_classif_upd_w(x)
		where	nr_sequencia = tb_nr_seq_segurado_upd_w(x);
	commit;
	forall y in tb_nr_seq_segurado_upd_w.first..tb_nr_seq_segurado_upd_w.last
		insert into pls_segurado_historico(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				dt_historico, nr_seq_segurado, ds_historico, ie_historico_situacao,
				ds_observacao, ie_tipo_historico, dt_ocorrencia_sib, ie_situacao_compartilhamento)
		values (	nextval('pls_segurado_historico_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
				clock_timestamp(), tb_nr_seq_segurado_upd_w(y), 'Alteração de classificação', 'S',
				'Alteração da classificação do beneficiário para classif. '||tb_nr_seq_classif_upd_w(y), '84', clock_timestamp(), 'I');
	commit;
	tb_nr_seq_segurado_upd_w.delete;
	tb_nr_seq_classif_upd_w.delete;
end;

begin

open C01(dt_atualizacao_p);
loop
	tb_nr_seq_segurado_w.delete;
fetch C01 bulk collect into
	tb_nr_seq_segurado_w limit qt_limite_registros_w;
exit when tb_nr_seq_segurado_w.count = 0;
	begin
	for i in tb_nr_seq_segurado_w.first..tb_nr_seq_segurado_w.last loop
		open C02;
		loop
		fetch C02 into
			nr_seq_regra_w,
			nr_seq_classificacao_w,
			qt_meses_apuracao_w,
			ie_tipo_apuracao_w,
			ie_contratacao_w,
			ie_resultado_w,
			ie_processo_judicial_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			qt_meses_apuracao_w := qt_meses_apuracao_w * -1;
			dt_referencia_apuracao_w := add_months(dt_atualizacao_p, qt_meses_apuracao_w);
			
			begin
			select	coalesce(pls_dados_grupo_relac_contr(a.nr_seq_contrato,'S'),0),
				coalesce(a.nr_seq_pagador,0),
				coalesce(a.nr_seq_contrato,0)
			into STRICT	nr_seq_grupo_w,
				nr_seq_pagador_w,
				nr_seq_contrato_seg_w
			from	pls_segurado a
			where	a.nr_sequencia = tb_nr_seq_segurado_w(i);
			exception
			when others then
				nr_seq_grupo_w := 0;
				nr_seq_pagador_w := 0;
				nr_seq_contrato_seg_w := 0;
			end;
			
			open C03; /* CONTRATACAO */
			loop
			fetch C03 into
				nr_seq_contrato_w,
				nr_seq_plano_w,
				ie_segmentacao_w,
				ie_tipo_estipulante_w,
				ie_tipo_contratacao_w,
				dt_contratacao_inicial_w,
				dt_contratacao_final_w,
				ie_somente_situacao_trab_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				select	count(1)
				into STRICT	qt_contratacao_w
				
				where	exists ( SELECT	1
						from	pls_plano    c,
							pls_contrato b,
							pls_segurado a
						where	a.nr_sequencia		= tb_nr_seq_segurado_w(i)
						and	b.nr_sequencia		= a.nr_seq_contrato
						and	c.nr_sequencia		= a.nr_seq_plano
						and	((a.nr_seq_contrato	= nr_seq_contrato_w)	or (coalesce(nr_seq_contrato_w::text, '') = ''))
						and	((a.nr_seq_plano	= nr_seq_plano_w)	or (coalesce(nr_seq_plano_w::text, '') = ''))
						and	((c.ie_segmentacao	= ie_segmentacao_w)	or (coalesce(ie_segmentacao_w::text, '') = ''))
						and	((c.ie_tipo_contratacao = ie_tipo_contratacao_w) or (coalesce(ie_tipo_contratacao_w::text, '') = ''))
						and	((ie_tipo_estipulante_w = 'A') or (ie_tipo_estipulante_w = 'PF' and (b.cd_pf_estipulante IS NOT NULL AND b.cd_pf_estipulante::text <> '')) and (ie_tipo_estipulante_w = 'PJ' and (b.cd_cgc_estipulante IS NOT NULL AND b.cd_cgc_estipulante::text <> '')))
						and	((a.dt_contratacao between dt_contratacao_inicial_w and last_day(dt_contratacao_final_w) + 0.99999) or (coalesce(dt_contratacao_inicial_w::text, '') = ''))
						and	((ie_somente_situacao_trab_w = 'S' and (a.ie_situacao_trabalhista IS NOT NULL AND a.ie_situacao_trabalhista::text <> '')) or (ie_somente_situacao_trab_w = 'N')));
				
				qt_regra_contratacao_w := qt_regra_contratacao_w + qt_contratacao_w;
				end;
			end loop;
			close C03;
			
			open C04; /* RESULTADO */
			loop
			fetch C04 into
				tx_sinistralidade_inicial_w,
				tx_sinistralidade_final_w,
				vl_juros_multa_inicial_w,
				vl_juros_multa_final_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin
				if (tx_sinistralidade_inicial_w > 0 and tx_sinistralidade_final_w > 0) then
					select	count(1)
					into STRICT	qt_regra_resultado_w
					
					where	exists (SELECT	1
							from	pls_ar_dados_v a
							where	((a.nr_seq_segurado = tb_nr_seq_segurado_w(i)	and ie_tipo_apuracao_w = 'B') or (a.nr_seq_contrato = nr_seq_contrato_seg_w	and ie_tipo_apuracao_w = 'C') or (a.nr_seq_pagador  = nr_seq_pagador_w		and ie_tipo_apuracao_w = 'P') or (ie_tipo_apuracao_w = 'GR' and  exists ( 	SELECT 	1
														from 	pls_ar_grupo_contrato x
														where 	x.ds_tabela = a.ds_tabela 
														and	x.nr_seq_reg_tabela = a.nr_sequencia
														and 	x.nr_seq_grupo_contrato = nr_seq_grupo_w))
								 ) 
							and 	a.dt_mes_competencia between trunc(dt_referencia_apuracao_w,'month') and trunc(last_day(dt_atualizacao_p)+ 0.99999,'month')
							and	a.pr_sinistralidade between tx_sinistralidade_inicial_w and tx_sinistralidade_final_w);
				end if;
				
				if (vl_juros_multa_inicial_w > 0 and vl_juros_multa_final_w > 0) then
					select	coalesce(sum(a.vl_saldo_juros),0),
						coalesce(sum(a.vl_saldo_multa),0)
					into STRICT	vl_saldo_juros_w,
						vl_saldo_multa_w
					from	titulo_receber a
					where   (a.nr_seq_mensalidade IS NOT NULL AND a.nr_seq_mensalidade::text <> '')
					and 	a.dt_emissao between trunc(dt_referencia_apuracao_w,'month') and trunc(last_day(dt_atualizacao_p)+ 0.99999,'month')
					and	a.nr_seq_pagador = nr_seq_pagador_w;
					
					if	(vl_saldo_juros_w >= vl_juros_multa_inicial_w AND vl_saldo_juros_w <= vl_juros_multa_final_w) then
						qt_regra_resultado_w := qt_regra_resultado_w + 1;
					end if;
					if	(vl_saldo_multa_w >= vl_juros_multa_inicial_w AND vl_saldo_multa_w <= vl_juros_multa_final_w) then
						qt_regra_resultado_w := qt_regra_resultado_w + 1;
					end if;
				end if;
				end;
			end loop;
			close C04;
			
			open C05; /* PROCESSO JUDICIAL */
			loop
			fetch C05 into
				ie_possui_processo_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin
				select	count(1)
				into STRICT	qt_judicial_w
				
				where	exists(	SELECT 	1
						from	processo_judicial_liminar a
						where	((((a.nr_seq_segurado = tb_nr_seq_segurado_w(i)) or (a.nr_seq_contrato = nr_seq_contrato_seg_w)) and ie_tipo_apuracao_w <> 'GR') or
							 ((exists ( 	SELECT	1
									from	pls_contrato_grupo
									where	nr_seq_grupo = nr_seq_grupo_w 
									and	nr_seq_contrato = a.nr_seq_contrato)) or (exists ( 	select	1 
									from	pls_contrato_grupo x, 
										pls_segurado y 
									where	x.nr_seq_grupo = nr_seq_grupo_w 
									and	x.nr_seq_contrato = y. nr_seq_contrato 
									and	y.nr_sequencia = a.nr_seq_segurado
									and	y.nr_sequencia = tb_nr_seq_segurado_w(i))) ))
						and 	dt_inicio_validade between trunc(dt_referencia_apuracao_w,'month') and trunc(last_day(dt_atualizacao_p)+ 0.99999,'month'));
				
				if (ie_possui_processo_w = 'S') then
					if (qt_judicial_w > 0) then
						qt_regra_judicial_w := qt_judicial_w;
					else
						qt_regra_judicial_w := 0;
					end if;
				else
					if (qt_judicial_w > 0) then
						qt_regra_judicial_w := 0;
					else
						qt_regra_judicial_w := 1;
					end if;
				end if;
				end;
			end loop;
			close C05;
			
			if	((ie_contratacao_w = 'S' AND qt_regra_contratacao_w > 0) or (ie_contratacao_w = 'N'))  then
				ie_salvar_w := true;
			else
				ie_salvar_w := false;
			end if;
			if	((ie_resultado_w = 'S' AND qt_regra_resultado_w > 0) or (ie_resultado_w = 'N')) and (ie_salvar_w = true)  then
				ie_salvar_w := true;
			else
				ie_salvar_w := false;
			end if;
			if	((ie_processo_judicial_w = 'S' AND qt_regra_judicial_w > 0) or (ie_processo_judicial_w = 'N')) and (ie_salvar_w = true) then
				ie_salvar_w := true;
			else
				ie_salvar_w := false;
			end if;
			
			if 	((ie_contratacao_w = 'N') and (ie_resultado_w = 'N') and (ie_processo_judicial_w = 'N')) and (ie_salvar_w = true) then
				ie_salvar_w := false;
			end if;
			
			if (ie_salvar_w = true) then
				index_w := tb_nr_seq_segurado_upd_w.count + 1;
				tb_nr_seq_segurado_upd_w(index_w) := tb_nr_seq_segurado_w(i);
				tb_nr_seq_classif_upd_w(index_w) := nr_seq_classificacao_w;
				
				if (tb_nr_seq_segurado_upd_w.count >= 1000) then
					update_registros;
				end if;
			end if;
			end;
		end loop;
		close C02;
	end loop;
	end;
end loop;
close C01;

update_registros;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_classif_benef ( dt_atualizacao_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint ) FROM PUBLIC;

