-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function aghos_atualiza_solicitacoes as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE PROCEDURE aghos_atualiza_solicitacoes (cd_estabelecimento_p bigint default 1) AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

BEGIN
	v_query := 'CALL aghos_atualiza_solicitacoes_atx ( ' || quote_nullable(cd_estabelecimento_p) || ' )';
	PERFORM * FROM dblink(v_conn_str, v_query) AS p (ret boolean);

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE PROCEDURE aghos_atualiza_solicitacoes_atx (cd_estabelecimento_p bigint default 1) AS $body$
DECLARE


nr_internacao_w	bigint;
ds_sep_bv_w	varchar(50);
ds_comando_w	varchar(2000);
ie_situacao_w	varchar(2);
ie_integracao_aghos_w	varchar(1);
BEGIN
ie_integracao_aghos_w := obter_dados_param_atend(cd_estabelecimento_p, 'AG');

If (ie_integracao_aghos_w = 'S') then

	ds_sep_bv_w  := obter_separador_bv;


	/* Verifica solicitações canceladas */

	ds_comando_w :=	'declare '||
			'	cancel_sai gsh_i_pkg_integra_sai.cancel_sai@tasy_aghos; '||
			'	ds_erro_ww	varchar2(500); '||
			'	nr_sequencia_w	number(10); '||
			'begin '||
			'  begin ' ||
			'	nr_sequencia_w := :nr_internacao; '||
			' '||
			'	gsh_i_pkg_integra_sai.gsh_i_prc_intern_cancel_sai@tasy_aghos(cancel_sai); '||
			' '||
			'	if	(cancel_sai.first is not null) then '||
			'		for i in cancel_sai.first..cancel_sai.last loop '||
			' '||
			'			select	max(nr_sequencia) '||
			'			into	nr_sequencia_w '||
			'			from	solicitacao_tasy_aghos '||
			'			where	nr_internacao = cancel_sai(i).idf_internacao; '||
			' '||
			'			if	(nr_sequencia_w is not null) then '||
			' '||
			'				update	solicitacao_tasy_aghos '||
			'				set	ie_situacao = ''C'', '||
			'					ds_motivo_situacao = ''Solicitação cancelada'' '||
			'				where	nr_internacao = cancel_sai(i).idf_internacao; '||
			' 				commit;'||
			'				gsh_i_prc_intern_cancel_s_u@tasy_aghos(	cancel_sai(i).idf_gsh_i_intern_cancel_sai,  '||
			'									''P'', '||
			'									ds_erro_ww); '||
			' '||
			'				commit; '||
			' '||
			'			end if; '||
			'		end loop; '||
			'	end if; '||
			' commit; '||
			' DBMS_SESSION.CLOSE_DATABASE_LINK(''tasy_aghos''); ' ||
			'   exception '||
			'   when others then '||
			'      rollback; ' ||
			'      DBMS_SESSION.CLOSE_DATABASE_LINK(''tasy_aghos''); ' ||
			'   end; '||
			' '||
			'end;';

	CALL exec_sql_dinamico_bv('AGHOS', ds_comando_w, 'nr_internacao='|| nr_internacao_w);

	/* Verifica solicitações rejeitadas */

	ds_comando_w :=	'declare '||
			'	rejsol_sai gsh_i_pkg_integra_sai.rejsol_sai@tasy_aghos; '||
			'	ds_erro_ww	varchar2(500); '||
			'	nr_sequencia_w	number(10); '||
			'begin '||
			'begin '||
			'	nr_sequencia_w := :nr_internacao; '||
			' '||
			'	gsh_i_pkg_integra_sai.gsh_i_prc_intern_rejsol_sai@tasy_aghos(rejsol_sai); '||
			' '||
			'	if	(rejsol_sai.first is not null) then '||
			'		for i in rejsol_sai.first..rejsol_sai.last loop '||
			' '||
			'			select	max(nr_sequencia) '||
			'			into	nr_sequencia_w '||
			'			from	solicitacao_tasy_aghos '||
			'			where	nr_internacao = rejsol_sai(i).idf_internacao; '||
			' '||
			'			if	(nr_sequencia_w is not null) then '||
			' '||
			'				update	solicitacao_tasy_aghos '||
			'				set	ie_situacao = ''R'', '||
			'					ie_motivo_rejeicao = rejsol_sai(i).idf_motivo_rejeicao, '||
			'					ds_motivo_situacao = substr(obter_valor_dominio(5060, rejsol_sai(i).idf_motivo_rejeicao), 1, 100) '||
			'				where	nr_internacao = rejsol_sai(i).idf_internacao; '||
			' 				commit;'||
			'				gsh_i_prc_intern_rejsol_s_u@tasy_aghos(	rejsol_sai(i).idf_gsh_i_intern_rejsol_sai,  '||
			'									''P'', '||
			'									ds_erro_ww); '||
			' '||
			'				commit; '||
			' '||
			'			end if; '||
			'		end loop; '||
			'	end if; '||
			' commit; '||
			' DBMS_SESSION.CLOSE_DATABASE_LINK(''tasy_aghos''); ' ||
			'   exception '||
			'   when others then '||
			'      rollback; ' ||
			'      DBMS_SESSION.CLOSE_DATABASE_LINK(''tasy_aghos''); ' ||
			'   end; '||
			' '||
			'end;';

	CALL exec_sql_dinamico_bv('AGHOS', ds_comando_w, 'nr_internacao='|| nr_internacao_w);

	/* Verifica solicitações autorizadas clinicamente */

	ds_comando_w :=	'declare '||
			'	autcli_sai gsh_i_pkg_integra_sai.autcli_sai@tasy_aghos; '||
			'	ds_erro_ww	varchar2(500); '||
			'	nr_sequencia_w	number(10); '||
			'begin '||
			'begin '||
			'	nr_sequencia_w := :nr_internacao; '||
			' '||
			'	gsh_i_pkg_integra_sai.gsh_i_prc_intern_autcli_sai@tasy_aghos(autcli_sai); '||
			' '||
			'	if	(autcli_sai.first is not null) then '||
			'		for i in autcli_sai.first..autcli_sai.last loop '||
			' '||
			'			select	max(nr_sequencia) '||
			'			into	nr_sequencia_w '||
			'			from	solicitacao_tasy_aghos '||
			'			where	nr_internacao = autcli_sai(i).idf_internacao; '||
			' '||
			'			if	(nr_sequencia_w is not null) then '||
			' '||
			'				update	solicitacao_tasy_aghos '||
			'				set	ie_situacao = ''AC'', '||
			'					ds_motivo_situacao = ''Solicitação autorizada clinicamente no Aghos'' '||
			'				where	nr_internacao = autcli_sai(i).idf_internacao; '||
			' 				commit;'||
			'				gsh_i_prc_intern_autcli_s_u@tasy_aghos(	autcli_sai(i).idf_gsh_i_intern_autcli_sai, '||
			'									''P'', '||
			'									ds_erro_ww); '||
			' '||
			'				commit; '||
			' '||
			'			end if; '||
			'		end loop; '||
			'	end if; '||
			' commit; '||
			' DBMS_SESSION.CLOSE_DATABASE_LINK(''tasy_aghos''); ' ||
			'   exception '||
			'   when others then '||
			'      rollback; ' ||
			'      DBMS_SESSION.CLOSE_DATABASE_LINK(''tasy_aghos''); ' ||
			'   end; '||
			' '||
			'end;';
	CALL exec_sql_dinamico_bv('AGHOS', ds_comando_w, 'nr_internacao='|| nr_internacao_w);


	/* Verifica solicitações autorizadas */

	ds_comando_w :=	'declare '||
			'	autori_sai gsh_i_pkg_integra_sai.autori_sai@tasy_aghos; '||
			'	ds_erro_ww	varchar2(500); '||
			'	nr_sequencia_w	number(10); '||
			'begin '||
			'begin '||
			'	nr_sequencia_w := :nr_internacao; '||
			' '||
			'	gsh_i_pkg_integra_sai.gsh_i_prc_intern_autori_sai@tasy_aghos(autori_sai); '||
			' '||
			'	if	(autori_sai.first is not null) then '||
			'		for i in autori_sai.first..autori_sai.last loop '||
			' '||
			'			select	max(nr_sequencia) '||
			'			into	nr_sequencia_w '||
			'			from	solicitacao_tasy_aghos '||
			'			where	nr_internacao = autori_sai(i).idf_internacao; '||
			' '||
			'			if	(nr_sequencia_w is not null) then '||
			' '||
			'				update	solicitacao_tasy_aghos '||
			'				set	ie_situacao = ''AU'', '||
			'					ds_motivo_situacao = ''Solicitação autorizada no Aghos'' '||
			'				where	nr_internacao = autori_sai(i).idf_internacao; '||
			' 				commit;'||
			'				gsh_i_prc_intern_autori_s_u@tasy_aghos(	autori_sai(i).idf_gsh_i_intern_autori_sai, '||
			'									''P'', '||
			'									ds_erro_ww); '||
			' 				commit;	'||
			'				Aghos_ajusta_leito(	nr_sequencia_w, '||
			'							autori_sai(i).COD_POSTO_ENFERMAGEM, '||
			'							autori_sai(i).COD_ENFERMARIA, '||
			'							autori_sai(i).COD_LEITO, '||
			'							autori_sai(i).COD_DIGITO_LEITO, ''S''); '||
			' '||
			'				commit; '||
			' '||
			'			end if; '||
			'		end loop; '||
			'	end if; '||
			' commit; '||
			' DBMS_SESSION.CLOSE_DATABASE_LINK(''tasy_aghos''); ' ||
			'   exception '||
			'   when others then '||
			'      rollback; ' ||
			'      DBMS_SESSION.CLOSE_DATABASE_LINK(''tasy_aghos''); ' ||
			'   end; '||
			' '||
			'end;';

	CALL exec_sql_dinamico_bv('AGHOS', ds_comando_w, 'nr_internacao='|| nr_internacao_w);

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE aghos_atualiza_solicitacoes (cd_estabelecimento_p bigint default 1) FROM PUBLIC; -- REVOKE ALL ON PROCEDURE aghos_atualiza_solicitacoes_atx (cd_estabelecimento_p bigint default 1) FROM PUBLIC;

