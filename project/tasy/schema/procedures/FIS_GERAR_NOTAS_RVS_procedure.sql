-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_notas_rvs ( nm_usuario_p text, ie_tipo_data_p text, dt_inicial_p timestamp, dt_final_p timestamp, nr_seq_lote_p bigint ) AS $body$
DECLARE

 
nr_sequencia_w		bigint;
qt_insert_w		bigint;
dt_inicial_w		timestamp;
dt_final_w		timestamp;

C01 CURSOR FOR 
	SELECT	d.dt_entrada, 
		d.nr_atendimento, 
		a.nr_sequencia nr_seq_nota_fiscal, 
		a.nr_nota_fiscal, 
		a.dt_emissao, 
		a.vl_total_nota, 
		a.dt_atualizacao_estoque, 
		a.cd_pessoa_fisica, 
		e.nr_sequencia nr_seq_rvs, 
		e.nr_seq_lote 
	from	fis_siscoserv_lote f, 
		siscoserv_rvs e, 
		atendimento_paciente d, 
		conta_paciente c, 
		conta_paciente_nf b, 
		nota_fiscal a 
	where	b.nr_interno_conta	= a.nr_interno_conta 
	and	b.nr_sequencia		= a.nr_sequencia 
	and	b.nr_interno_conta	= c.nr_interno_conta 
	and	d.nr_atendimento	= c.nr_atendimento 
	and	d.nr_atendimento	= e.nr_atendimento 
	and	f.nr_sequencia		= nr_seq_lote_p 
	and	a.dt_atualizacao_estoque between dt_inicial_w and dt_final_w 
	and	(a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '') 
	and	not exists (	SELECT	1 
				from	siscoserv_fatura x 
				where	x.nr_seq_nota_fiscal = a.nr_sequencia) 
	order by 
		a.dt_emissao;

c01_w		C01%rowtype;


BEGIN 
 
dt_inicial_w		:= trunc(dt_inicial_p,'dd');
dt_final_w		:= fim_dia(coalesce(dt_final_p, clock_timestamp()));
 
qt_insert_w := 0;
 
if (coalesce(ie_tipo_data_p,'1') = '1') then 
	begin 
	 
	open C01;
	loop 
	fetch C01 into	 
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		 
		select	nextval('siscoserv_fatura_seq') 
		into STRICT	nr_sequencia_w 
		;
		 
		insert into siscoserv_fatura( 
					nr_sequencia, 
					dt_atualizacao, 
					dt_atualizacao_nrec, 
					nm_usuario, 
					nm_usuario_nrec, 
					nr_seq_nota_fiscal, 
					nr_seq_rvs, 
					vl_total_fatura, 
					dt_fatura, 
					nr_seq_lote) 
		values (		nr_sequencia_w, 
					clock_timestamp(), 
					clock_timestamp(), 
					nm_usuario_p, 
					nm_usuario_p, 
					c01_w.nr_seq_nota_fiscal, 
					c01_w.nr_seq_rvs, 
					c01_w.vl_total_nota, 
					c01_w.dt_atualizacao_estoque, 
					c01_w.nr_seq_lote);
					 
		CALL fis_gerar_itens_nota_rvs(nm_usuario_p,nr_sequencia_w, c01_w.nr_seq_nota_fiscal, c01_w.nr_seq_rvs);
 
		qt_insert_w := qt_insert_w + 1;
		if (qt_insert_w > 100) then 
			begin 
			commit;
			qt_insert_w := 0;
			end;
		end if;
		 
		end;
	end loop;
	close C01;
	 
	end;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_notas_rvs ( nm_usuario_p text, ie_tipo_data_p text, dt_inicial_p timestamp, dt_final_p timestamp, nr_seq_lote_p bigint ) FROM PUBLIC;

