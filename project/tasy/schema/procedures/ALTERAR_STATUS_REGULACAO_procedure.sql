-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE alterar_status_regulacao ( nr_seq_regulacao_p bigint, ie_status_p text, ds_observacao_p text, ds_profissional_p text default null, ie_tipo_profissional_p text default 'S', nr_seq_motivo_p bigint default null, nr_seq_pls_requisicao_p bigint default null, ie_integracao_p text default 'N') AS $body$
DECLARE








dt_status_atual_w			timestamp;

dt_status_ant_w				timestamp;

qt_intervalo_status_w   	regulacao_status.qt_intervalo_status%type;

nm_usuario_w				usuario.nm_usuario%type;

ds_resposta_w				text;



ds_profissional_w			regulacao_status.ds_profissional%type;



cd_evolucao_ori_w			regulacao_atend.cd_evolucao_ori%type;



ie_integracao_w				varchar(1);



ie_status_w					varchar(10);



ds_retorno_integracao_w 	varchar(4000);



cd_pessoa_fisica_w			varchar(10);



ie_lista_espera_w			varchar(1);



qt_solicitado_w				bigint;



cd_procedimento_w			bigint;



ie_origem_proced_w			bigint;



nr_seq_regulacao_w			bigint;



cd_material_w				integer;



cd_material_envio_w			varchar(255);



cd_cnpj_origem_w agenda_lista_espera.cnpj_origem%type;



ds_estabelecimento_origem_w agenda_lista_espera.nm_estabelecimento_origem%type;



ie_tipo_w  varchar(3);



nr_atendimento_w    regulacao_atend.nr_atendimento%type;

qt_procedimento_w   agenda_lista_espera.qt_procedimento%type;

nr_seq_receita_w    cpoe_material.nr_seq_receita_amb%type;

cd_medico_w         fa_receita_farmacia.cd_medico%type;

nr_receita_w        fa_receita_farmacia.nr_receita%type;

dt_receita_w        fa_receita_farmacia.dt_receita%type;

nr_dias_receita_w   fa_receita_farmacia.nr_dias_receita%type;

dt_inicio_receita_w fa_receita_farmacia.dt_inicio_receita%type;

ie_tipo_receita_w   fa_receita_farmacia.ie_tipo_receita%type;

ie_nivel_atencao_w  fa_receita_farmacia.ie_nivel_atencao%type;

	




BEGIN







nm_usuario_w := coalesce(wheb_usuario_pck.get_nm_usuario,'integracao');







select  coalesce(max(ie_integracao),'N'),



		max(nr_seq_regulacao)



into STRICT 	ie_integracao_w,



		nr_seq_regulacao_w



from 	pls_requisicao



where 	(nr_seq_regulacao IS NOT NULL AND nr_seq_regulacao::text <> '')



and 	nr_sequencia = nr_seq_pls_requisicao_p;

















if (nr_seq_pls_requisicao_p IS NOT NULL AND nr_seq_pls_requisicao_p::text <> '' AND (ie_integracao_w = 'S' or ie_integracao_p ='S')) then



		



		select converte_status_regulacao(ie_status_p,'REG')



		into STRICT ie_status_w



		;





		



		update pls_requisicao



		set    ie_estagio_regulacao = ie_status_w



		where  nr_sequencia = nr_seq_pls_requisicao_p;





		



		commit;



	



		select BIFROST.SEND_INTEGRATION(



		'regulation.statuspls',



		'com.philips.tasy.integration.atepac.regulation.regulationStatusPlsRequest.RegulationStatusPlsRequest', 



		'{"nrSeqPlsRequisicao" : '||nr_seq_pls_requisicao_p||'}',



		nm_usuario_w)



		into STRICT ds_retorno_integracao_w



		;









elsif ( (nr_seq_pls_requisicao_p IS NOT NULL AND nr_seq_pls_requisicao_p::text <> '') and ie_integracao_w = 'N' and (nr_seq_regulacao_w IS NOT NULL AND nr_seq_regulacao_w::text <> '')) then	



		select converte_status_regulacao(ie_status_p,'REG')



		into STRICT   ie_status_w



		;





		



		update pls_requisicao



		set    ie_estagio_regulacao = ie_status_w



		where  nr_sequencia = nr_seq_pls_requisicao_p;





		



		commit;







		dt_status_atual_w := clock_timestamp();



	



		update	regulacao_atend



		set		ie_status = ie_status_w,



				nm_usuario_status = nm_usuario_w,



				dt_usuario_status = dt_status_atual_w



		where	nr_sequencia = nr_seq_regulacao_w;





	



    



		select  coalesce(max(x.dt_atualizacao),dt_status_atual_w)



		into STRICT    dt_status_ant_w   



		from    regulacao_status x



		where   x.nr_seq_regulacao_atend = nr_seq_regulacao_w;





		



		qt_intervalo_status_w := (round((dt_status_atual_w - dt_status_ant_w)::numeric, 4)*24*60);



		



		insert into



			regulacao_status(



				nr_sequencia, 



				ie_status, 



				dt_atualizacao, 



				nm_usuario, 



				dt_atualizacao_nrec, 



				nm_usuario_nrec, 



				qt_intervalo_status, 



				nr_seq_regulacao_atend, 



				dt_revisao,

				ds_resposta,

				ds_profissional



				) values (



				nextval('regulacao_status_seq'),



				ie_status_w,



				dt_status_atual_w,



				nm_usuario_w,



				dt_status_atual_w,



				nm_usuario_w,



				qt_intervalo_status_w,



				nr_seq_regulacao_w,



				dt_status_atual_w,

				ds_observacao_p,

				ds_profissional_p);





	



		commit;



		



		if ( ie_status_w = 'AT' ) then

    

			Select  coalesce(max('S'),'N')



			into STRICT	ie_lista_espera_w	



			from    agenda_lista_espera



			where	nr_seq_regulacao = nr_seq_regulacao_w;





			



			if ( ie_lista_espera_w = 'N') then



			



					select  max(cd_pessoa_fisica),



							max(cd_procedimento),



							max(ie_origem_proced),



							max(qt_solicitado),



							max(cd_material),



							max(cd_material_envio),



              max(ie_tipo)



					into STRICT 	cd_pessoa_fisica_w,



							cd_procedimento_w,



							ie_origem_proced_w,



							qt_solicitado_w,



							cd_material_w,



							cd_material_envio_w,



              ie_tipo_w



					from 	regulacao_atend

					where 	nr_sequencia = nr_seq_regulacao_w;





         SELECT coalesce(max('S'),'N')

           INTO STRICT ie_integracao_w

         FROM REGRA_INTEGRA_REGULACAO R

         WHERE R.IE_TIPO_SERVICO = ie_tipo_w

           AND R.IE_ENVIO = 'L'

		   AND	R.IE_INTEGRACAO = 'S'

           AND R.IE_SITUACAO  = 'A';

		

         

         IF (ie_integracao_w = 'S') THEN

           select BIFROST.SEND_INTEGRATION(

             'regulation.waitingList', 

             'com.philips.tasy.integration.atepac.waitingList.WaitingListRequest', 	

             '{"nrSeqRegulacao" : '||nr_seq_regulacao_w ||

             ', "nmUsuario" : "' || nm_usuario_w ||'"' ||

             ', "cdPessoaFisica" :' || cd_pessoa_fisica_w  ||

             (CASE WHEN (cd_material_w IS NOT NULL AND cd_material_w::text <> '') THEN ', "cdMaterial" :' ||cd_material_w  ELSE '' END) ||

             (CASE WHEN (cd_material_envio_w IS NOT NULL AND cd_material_envio_w::text <> '') THEN ', "cdMaterialEnvio" :' ||cd_material_envio_w ELSE '' END) ||

             (CASE WHEN (qt_solicitado_w IS NOT NULL AND qt_solicitado_w::text <> '') THEN ', "qtSolicitado" :'||qt_solicitado_w ELSE '' END) ||

             (CASE WHEN (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') THEN ', "origemProcedimento" :' || ie_origem_proced_w   ELSE '' END) ||

             (CASE WHEN (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') THEN ', "cdProcedimento":'|| cd_procedimento_w ELSE '' END) ||'}',

            nm_usuario_w)

            into STRICT ds_retorno_integracao_w

;



         ELSE

					insert into agenda_lista_espera(



						nr_sequencia,



						cd_procedimento,



						ie_origem_proced,



						qt_procedimento,



						cd_pessoa_fisica,



						dt_agendamento,



						dt_atualizacao,



						dt_atualizacao_nrec,



						dt_periodo_inicial,						



						ie_status_espera,



						nm_usuario_agenda,



						nm_usuario,



						nm_usuario_nrec,



						nr_seq_regulacao,



						cd_material,



						cd_material_envio,



						dt_entrada_lista)



					values (



						nextval('agenda_lista_espera_seq'),



						cd_procedimento_w,



						ie_origem_proced_w,



						qt_solicitado_w,



						cd_pessoa_fisica_w,



						clock_timestamp(),



						clock_timestamp(),



						clock_timestamp(),



						clock_timestamp(),



						'A',



						nm_usuario_w,



						nm_usuario_w,



						nm_usuario_w,



						nr_seq_regulacao_w,



						cd_material_w,



						cd_material_envio_w,



						clock_timestamp());





						



						commit;



				END IF;



					dt_status_atual_w := clock_timestamp();



	



					update	regulacao_atend



					set		ie_status = 'LE',



							nm_usuario_status = nm_usuario_w,



							dt_usuario_status = dt_status_atual_w



					where	nr_sequencia = nr_seq_regulacao_w;





					



				



					select  coalesce(max(x.dt_atualizacao),dt_status_atual_w)



					into STRICT    dt_status_ant_w



					from    regulacao_status x



					where   x.nr_seq_regulacao_atend = nr_seq_regulacao_w;





					



					qt_intervalo_status_w := (round((dt_status_atual_w - dt_status_ant_w)::numeric, 4)*24*60);	



					



					



					Insert into



							regulacao_status(



								nr_sequencia, 



								ie_status, 



								dt_atualizacao, 



								nm_usuario, 



								dt_atualizacao_nrec, 



								nm_usuario_nrec, 



								ds_observacao, 



								qt_intervalo_status, 



								nr_seq_regulacao_atend, 



								dt_revisao) values (



								nextval('regulacao_status_seq'),



								'LE',



								dt_status_atual_w,



								nm_usuario_w,



								dt_status_atual_w,



								nm_usuario_w,



								'',



								qt_intervalo_status_w,



								nr_seq_regulacao_w,



								dt_status_atual_w);





					



						commit;



			end if;



		end if;



else

	

  select coalesce(max(ie_integracao),'N')

	into STRICT ie_integracao_w

	from regulacao_atend

	where nr_sequencia = nr_seq_regulacao_p;





	if ((nr_seq_regulacao_p IS NOT NULL AND nr_seq_regulacao_p::text <> '') and ie_integracao_w = 'S') then



		



		update regulacao_atend



		set    ie_status = ie_status_p



		where nr_sequencia = nr_seq_regulacao_p;





		



		commit;



		



		select BIFROST.SEND_INTEGRATION(



		'regulation.status',



		'com.philips.tasy.integration.atepac.regulation.regulationStatusRequest.RegulationStatusRequest', 	



		'{"nrSeqRegulacao" : '||nr_seq_regulacao_p||'}',



		nm_usuario_w)



		into STRICT ds_retorno_integracao_w



		;	



	



	end if;









end if;









	if ((nr_seq_regulacao_p IS NOT NULL AND nr_seq_regulacao_p::text <> '') and coalesce(nr_seq_pls_requisicao_p::text, '') = '') then



		



		dt_status_atual_w := clock_timestamp();



	



		update	regulacao_atend



		set		ie_status = ie_status_p,



				nm_usuario_status = nm_usuario_w,



				dt_usuario_status = dt_status_atual_w



		where	nr_sequencia = nr_seq_regulacao_p;





	



    



		select  coalesce(max(x.dt_atualizacao),dt_status_atual_w)



		into STRICT    dt_status_ant_w   



		from    regulacao_status x



		where   x.nr_seq_regulacao_atend = nr_seq_regulacao_p;





		



		qt_intervalo_status_w := (round((dt_status_atual_w - dt_status_ant_w)::numeric, 4)*24*60);







		if (ie_status_p = 'EN') then



			Select  obter_nome_usuario(nm_usuario),



					CD_EVOLUCAO_ORI					



			into STRICT	ds_profissional_w,



					 CD_EVOLUCAO_ORI_w



			from	regulacao_atend



			where 	nr_sequencia = nr_seq_regulacao_p;





			if (coalesce(CD_EVOLUCAO_ORI_w,0) > 0) then



				Select 	ds_evolucao



				into STRICT	ds_resposta_w



				from	evolucao_paciente



				where	cd_Evolucao = CD_EVOLUCAO_ORI_w;





			end if;	



		end if;





		insert into



			regulacao_status(



				nr_sequencia, 



				ie_status, 



				dt_atualizacao, 



				nm_usuario, 



				dt_atualizacao_nrec, 



				nm_usuario_nrec, 



				ds_observacao, 



				qt_intervalo_status, 



				nr_seq_regulacao_atend, 



				dt_revisao,



				ds_resposta,



				ds_profissional,



				ie_tipo_profissional,



				nr_seq_motivo



				) values (



				nextval('regulacao_status_seq'),



				ie_status_p,



				dt_status_atual_w,



				nm_usuario_w,



				dt_status_atual_w,



				nm_usuario_w,



				ds_observacao_p,



				qt_intervalo_status_w,



				nr_seq_regulacao_p,



				dt_status_atual_w,



				ds_resposta_w,



				coalesce(ds_profissional_w,ds_profissional_p),



				ie_tipo_profissional_p,



				nr_seq_motivo_p);





	



		commit;



		



		if ( ie_status_p = 'AT' ) then



			Select  coalesce(max('S'),'N')



			into STRICT	ie_lista_espera_w	



			from    agenda_lista_espera



			where	nr_seq_regulacao = nr_seq_regulacao_p;





			



			if (ie_lista_espera_w = 'N') then



					select  max(cd_pessoa_fisica),



							max(cd_procedimento),



							max(ie_origem_proced),



							max(qt_solicitado)



					into STRICT 	cd_pessoa_fisica_w,



							cd_procedimento_w,



							ie_origem_proced_w,



							qt_solicitado_w



					from 	regulacao_atend



					where 	nr_sequencia = nr_seq_regulacao_p;





					insert into agenda_lista_espera(



						nr_sequencia,



						cd_procedimento,



						ie_origem_proced,



						qt_procedimento,



						cd_pessoa_fisica,



						dt_agendamento,



						dt_atualizacao,



						dt_atualizacao_nrec,



						dt_periodo_inicial,						



						ie_status_espera,



						nm_usuario_agenda,



						nm_usuario,



						nm_usuario_nrec,



						nr_seq_regulacao,



						dt_entrada_lista)



					values (



						nextval('agenda_lista_espera_seq'),



						cd_procedimento_w,



						ie_origem_proced_w,



						qt_solicitado_w,



						cd_pessoa_fisica_w,



						clock_timestamp(),



						clock_timestamp(),



						clock_timestamp(),



						clock_timestamp(),



						'A',



						nm_usuario_w,



						nm_usuario_w,



						nm_usuario_w,



						nr_seq_regulacao_p,



						clock_timestamp());





						



						commit;



						



					dt_status_atual_w := clock_timestamp();



	



					update	regulacao_atend



					set		ie_status = 'LE',



							nm_usuario_status = nm_usuario_w,



							dt_usuario_status = dt_status_atual_w



					where	nr_sequencia = nr_seq_regulacao_p;





					



				



					select  coalesce(max(x.dt_atualizacao),dt_status_atual_w)



					into STRICT    dt_status_ant_w



					from    regulacao_status x



					where   x.nr_seq_regulacao_atend = nr_seq_regulacao_p;





					



					qt_intervalo_status_w := (round((dt_status_atual_w - dt_status_ant_w)::numeric, 4)*24*60);	



					



					



					Insert into



							regulacao_status(



								nr_sequencia, 



								ie_status, 



								dt_atualizacao, 



								nm_usuario, 



								dt_atualizacao_nrec, 



								nm_usuario_nrec, 



								ds_observacao, 



								qt_intervalo_status, 



								nr_seq_regulacao_atend, 



								dt_revisao,



								ds_resposta,



								ds_profissional,



								ie_tipo_profissional



								) values (



								nextval('regulacao_status_seq'),



								'LE',



								dt_status_atual_w,



								nm_usuario_w,



								dt_status_atual_w,



								nm_usuario_w,



								'',



								qt_intervalo_status_w,



								nr_seq_regulacao_p,



								dt_status_atual_w,



								ds_resposta_w,



								coalesce(ds_profissional_w,ds_profissional_p),



								ie_tipo_profissional_p);





					



						commit;



			end if;



		end if;





    if (ie_status_p = 'AG') then

      select  max(a.ie_tipo),

        max(a.nr_atendimento)

        into STRICT ie_tipo_w,

        nr_atendimento_w

			from 	regulacao_atend a

			where 	nr_sequencia = nr_seq_regulacao_p;





      select max(cd_material),

             max(qt_procedimento),

             max(ie_origem_proced)

      into STRICT cd_material_w,

           qt_procedimento_w,

           ie_origem_proced_w

      from agenda_lista_espera

      where  nr_seq_regulacao = nr_seq_regulacao_p;





      if (cd_material_w IS NOT NULL AND cd_material_w::text <> '' AND nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then

        select max(m.nr_seq_receita_amb)

          into STRICT nr_seq_receita_w

        from cpoe_material m 

        where 

          m.qt_dose= qt_procedimento_w

          and m.cd_material = cd_material_w 

          and m.nr_atendimento= nr_atendimento_w  LIMIT 1;





       if (nr_seq_receita_w IS NOT NULL AND nr_seq_receita_w::text <> '') then

         select max(cd_medico),

                 max(nr_receita),

                 max(dt_receita),

                 max(nr_dias_receita),

                 max(dt_inicio_receita),

                 max(cd_pessoa_fisica),

                 max(ie_tipo_receita),

                 max(ie_nivel_atencao)

         into STRICT  cd_medico_w,

               nr_receita_w,

               dt_receita_w,

               nr_dias_receita_w,

               dt_inicio_receita_w,

               cd_pessoa_fisica_w,

               ie_tipo_receita_w,

               ie_nivel_atencao_w

         from fa_receita_farmacia

         where nr_sequencia = nr_seq_receita_w;





         cd_cnpj_origem_w := obter_cnpj_estabelecimento(obter_estabelecimento_ativo);

         ds_estabelecimento_origem_w := obter_nome_estabelecimento(obter_estabelecimento_ativo);



         

         

         select coalesce(max('S'),'N') 

           into STRICT ie_integracao_w

         from regra_integra_regulacao r

         where r.ie_tipo_servico = ie_tipo_w

           and r.ie_envio = 'F'

           and r.ie_situacao  = 'A';

           

         if (ie_integracao_w = 'S') then

          select BIFROST.SEND_INTEGRATION(

              'regulation.pharmacy', 

              'com.philips.tasy.integration.atepac.pharmacy.PharmacyRequest', 	

              '{"nrSeqRegulation" : '||nr_seq_regulacao_p ||

              (CASE WHEN (cd_medico_w IS NOT NULL AND cd_medico_w::text <> '') THEN ', "cdPhysician" : "' || cd_medico_w ||'"'  ELSE '' END) ||

              (CASE WHEN (nr_receita_w IS NOT NULL AND nr_receita_w::text <> '') THEN ', "nrPrescription" : "' || nr_seq_receita_w ||'"'  ELSE '' END) ||

              (CASE WHEN (dt_receita_w IS NOT NULL AND dt_receita_w::text <> '') THEN ', "dtPrescription" : "' || to_char(dt_receita_w , 'YYYY-MM-DD') ||'"'  ELSE '' END) ||

              (CASE WHEN (nr_dias_receita_w IS NOT NULL AND nr_dias_receita_w::text <> '') THEN ', "nrDayPrescriptions" : "' || nr_dias_receita_w ||'"'  ELSE '' END) ||

              (CASE WHEN (dt_inicio_receita_w IS NOT NULL AND dt_inicio_receita_w::text <> '') THEN ', "dtPrescriptionStart" : "' ||  to_char(dt_inicio_receita_w , 'YYYY-MM-DD')||'"'  ELSE '' END) ||

              (CASE WHEN (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') THEN ', "cdPerson" : "' || cd_pessoa_fisica_w ||'"'  ELSE '' END) ||

              (CASE WHEN (ie_tipo_receita_w IS NOT NULL AND ie_tipo_receita_w::text <> '') THEN ', "prescriptionType" : "' || ie_tipo_receita_w ||'"'  ELSE '' END) ||

              (CASE WHEN (ie_nivel_atencao_w IS NOT NULL AND ie_nivel_atencao_w::text <> '') THEN ', "attentionLevel" : "' || ie_nivel_atencao_w ||'"'  ELSE '' END) ||

              (CASE WHEN (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') THEN ', "originProcedure" : "' || ie_origem_proced_w ||'"'  ELSE '' END) ||

              (CASE WHEN (cd_cnpj_origem_w IS NOT NULL AND cd_cnpj_origem_w::text <> '') THEN ', "cdCNPJOrigin" :"' ||cd_cnpj_origem_w || '"' ELSE '' END) ||

              (CASE WHEN (ds_estabelecimento_origem_w IS NOT NULL AND ds_estabelecimento_origem_w::text <> '') THEN ', "dsEstablishmentOrigin" : "' ||ds_estabelecimento_origem_w ||'"' ELSE '' END) || '}',

             nm_usuario_w)

             into STRICT ds_retorno_integracao_w

;



         end if;



       end if;

      end if;

	  end if;



  end if;



END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE alterar_status_regulacao ( nr_seq_regulacao_p bigint, ie_status_p text, ds_observacao_p text, ds_profissional_p text default null, ie_tipo_profissional_p text default 'S', nr_seq_motivo_p bigint default null, nr_seq_pls_requisicao_p bigint default null, ie_integracao_p text default 'N') FROM PUBLIC;

