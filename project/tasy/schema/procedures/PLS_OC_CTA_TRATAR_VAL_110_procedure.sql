-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_110 (dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


tb_seq_selecao_w	dbms_sql.number_table;
tb_observacao_w		dbms_sql.varchar2_table;
tb_valido_w		dbms_sql.varchar2_table;
nr_indice_w		integer;
ie_gerar_ocorrencia_w	varchar(1);

-- Informações da validação guia principal autorização
C01 CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	coalesce(a.ie_atend_ant_benef,'N') ie_atend_ant_benef,
		coalesce(a.ie_benef_nao_ident,'N') ie_benef_nao_ident,
		a.ie_tipo_repasse
	from	pls_oc_cta_val_benef a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_pc;


c02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type,
		ie_benef_nao_ident_pc	pls_oc_cta_val_benef.ie_benef_nao_ident%type,
		ie_atend_ant_benef_pc	pls_oc_cta_val_benef.ie_atend_ant_benef%type,
		ie_tipo_repasse_pc	pls_oc_cta_val_benef.ie_tipo_repasse%type) FOR
	SELECT	'P' 			ie_tipo_item,
		sel.nr_sequencia 	nr_seq_selecao,
		proc.dt_procedimento 	dt_execucao_conv,
		seg.dt_contratacao,
		(SELECT count(1)
		from	pls_segurado_carteira
		where	nr_seq_segurado = seg.nr_sequencia
		and 	(cd_usuario_plano IS NOT NULL AND cd_usuario_plano::text <> '')) qt_benef_localizado,
		(select count(1)
		from	pls_segurado_repasse	r
		where	r.nr_seq_segurado	= conta.nr_seq_segurado
		and	r.ie_tipo_repasse	= ie_tipo_repasse_pc
		and	conta.dt_atendimento_referencia between trunc(coalesce(r.dt_repasse,conta.dt_atendimento_referencia)) and fim_dia(coalesce(r.dt_fim_repasse,conta.dt_atendimento_referencia))) qt_repasse
	from	pls_oc_cta_selecao_ocor_v 	sel,
		pls_conta_proc	 		proc,
		pls_conta			conta,
		pls_segurado			seg
	where	sel.nr_id_transacao 	= nr_id_transacao_pc
	and	sel.ie_valido 		= 'S'
	and	conta.nr_sequencia 	= sel.nr_seq_conta
	and	proc.nr_seq_conta	= conta.nr_sequencia
	and 	conta.nr_seq_segurado 	= seg.nr_sequencia
	and 	ie_atend_ant_benef_pc	= 'S'
	
union all

	select	'M'			ie_tipo_item,
		sel.nr_sequencia 	nr_seq_selecao,
		mat.dt_atendimento 	dt_execucao_conv,
		seg.dt_contratacao,
		(select count(1)
		from	pls_segurado_carteira
		where	nr_seq_segurado = seg.nr_sequencia
		and 	(cd_usuario_plano IS NOT NULL AND cd_usuario_plano::text <> '')) qt_benef_localizado,
		(select count(1)
		from	pls_segurado_repasse	r
		where	r.nr_seq_segurado	= conta.nr_seq_segurado
		and	r.ie_tipo_repasse	= ie_tipo_repasse_pc
		and	conta.dt_atendimento_referencia between trunc(coalesce(r.dt_repasse,conta.dt_atendimento_referencia)) and fim_dia(coalesce(r.dt_fim_repasse,conta.dt_atendimento_referencia))) qt_repasse
	from	pls_oc_cta_selecao_ocor_v	sel,
		pls_conta			conta,
		pls_conta_mat			mat,
		pls_segurado			seg
	where	sel.nr_id_transacao 	= nr_id_transacao_pc
	and	sel.ie_valido 		= 'S'
	and	conta.nr_sequencia   	= sel.nr_seq_conta
	and	mat.nr_seq_conta	= conta.nr_sequencia
	and 	conta.nr_seq_segurado	= seg.nr_sequencia
	and	ie_atend_ant_benef_pc	= 'S'
	
union all

	select	'C'			ie_tipo_item,
		sel.nr_sequencia 	nr_seq_selecao,
		null 			dt_execucao_conv,
		null			dt_contratacao,
		null			qt_benef_localizado,
		(select count(1)
		from	pls_segurado_repasse	r
		where	r.nr_seq_segurado	= conta.nr_seq_segurado
		and	r.ie_tipo_repasse	= ie_tipo_repasse_pc
		and	conta.dt_atendimento_referencia between trunc(coalesce(r.dt_repasse,conta.dt_atendimento_referencia)) and fim_dia(coalesce(r.dt_fim_repasse,conta.dt_atendimento_referencia))) qt_repasse
	from	pls_oc_cta_selecao_ocor_v 	sel,
		pls_conta			conta
	where	sel.nr_id_transacao 	= nr_id_transacao_pc
	and	sel.ie_valido 		= 'S'
	and	conta.nr_sequencia 	= sel.nr_seq_conta
	and	ie_benef_nao_ident_pc	= 'S'
	and 	coalesce(conta.nr_seq_segurado::text, '') = '';
BEGIN

if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then
	begin

	for	C01_w in C01(dados_regra_p.nr_sequencia) loop
		begin

		if (c01_w.ie_atend_ant_benef = 'S' or c01_w.ie_benef_nao_ident = 'S') then
			begin

			-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
			CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar(	'V',
									nr_id_transacao_p,
									null,
									dados_regra_p);

			tb_seq_selecao_w.delete;
			tb_observacao_w.delete;
			tb_valido_w.delete;
			nr_indice_w := 0;

			for	C02_w in C02(nr_id_transacao_p, c01_w.ie_benef_nao_ident, c01_w.ie_atend_ant_benef,c01_w.ie_tipo_repasse) loop

				ie_gerar_ocorrencia_w:= 'N';

				/*
					Se ie_tipo_item = 'C', então quer dizer que não há informação do nr_seq_segurado. Nesse caso, apenas deverá validar o beneficiário
					não identificado, caso esse campo estiver checado na validação.
				*/
				if (c02_w.ie_tipo_item = 'C') then

					tb_valido_w(nr_indice_w)      	:= 'S';
					tb_observacao_w(nr_indice_w)	:= 'Beneficiário não informado.';
					ie_gerar_ocorrencia_w		:= 'S';

				elsif (c02_w.qt_repasse > 0) then

					tb_valido_w(nr_indice_w)      	:= 'S';
					tb_observacao_w(nr_indice_w)	:= 'Beneficiário em repasse.';
					ie_gerar_ocorrencia_w		:= 'S';

				else
					/*
						Se chegar aqui, quer dizer que existe informação de nr_seq_segurado na conta, então validará ainda se atendimento anterior a inclusão do
						beneficiário, caso o respectivo campo estiver marcado e também
					*/
					if (c02_w.dt_execucao_conv	< c02_w.dt_contratacao) then
						begin

						tb_valido_w(nr_indice_w)      	:= 'S';
						tb_observacao_w(nr_indice_w)	:= 'Data de realização ' || c02_w.dt_execucao_conv || ' anterior a inclusão do beneficiário no plano ' || c02_w.dt_contratacao;
						ie_gerar_ocorrencia_w		:= 'S';

						end;
					end if;

					if (ie_gerar_ocorrencia_w = 'N') and (c02_w.qt_benef_localizado = 0) then
						begin

						--Verificação extra, onde caso o nr_seq_segurado presente na conta não foi identificado no sistema(Valida por cd_usuario_plano null na pls_segurado_carteira )
						tb_valido_w(nr_indice_w)      	:= 'S';
						tb_observacao_w(nr_indice_w)	:= 'Beneficiário não identificado';
						ie_gerar_ocorrencia_w		:= 'S';

						end;
					end if;
				end if;

				if (ie_gerar_ocorrencia_w = 'S') then
					begin

					tb_seq_selecao_w(nr_indice_w) := c02_w.nr_seq_selecao;

					--Verifica o número de registros armazenados, caso tenha atingido limite grava os mesmos na tablela
					if (nr_indice_w >= pls_cta_consistir_pck.qt_registro_transacao_w ) then

						CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
												pls_tipos_ocor_pck.clob_table_vazia,
												'SEQ',
												tb_observacao_w,
												tb_valido_w,
												nm_usuario_p);
						tb_seq_selecao_w.delete;
						tb_observacao_w.delete;
						tb_valido_w.delete;
						nr_indice_w		:= 0;
					else
						nr_indice_w := nr_indice_w + 1;
					end if;
					end;
				end if;

			end loop;

			if (tb_seq_selecao_w.count > 0) then
				--Grava o que restar nas variáveis na tabela
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
										pls_tipos_ocor_pck.clob_table_vazia,
										'SEQ',
										tb_observacao_w,
										tb_valido_w,
										nm_usuario_p);

			end if;

			end;
		end if;

		tb_seq_selecao_w.delete;
		tb_observacao_w.delete;
		tb_valido_w.delete;

		-- seta os registros que serão válidos ou inválidos após o processamento
		CALL pls_tipos_ocor_pck.atualiza_campo_valido(	'V',
								nr_id_transacao_p,
								null,
								dados_regra_p);

		end;
	end loop;

	end;
end if;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_110 (dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

