-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE qt_forcar_agendamento ( hr_agendamento_p text, nr_Seq_local_p bigint, qt_tempo_medic_p bigint, dt_agendamento_p timestamp, nr_seq_pendencia_p bigint, nr_Seq_prof_p bigint, nm_usuario_p text, ds_observacao_p text, cd_estabelecimento_p bigint, nm_usuario_confirm_p text) AS $body$
DECLARE


dt_Agenda_w			timestamp;
dt_maior_w			timestamp;
dt_menor_w			timestamp;
dt_maior_marc_w			timestamp;
dt_menor_marc_w			timestamp;
qt_horas_entre_dias_w		bigint;
qt_pendencia_marcada_w		bigint;

qt_regra_w			bigint;
nr_seq_regra_w			bigint;
nr_seq_classif_w		bigint;
qt_encaixe_w			bigint;
ie_forma_consistencia_w		varchar(1);
hr_inicial_w			timestamp;
hr_final_w			timestamp;
qt_enc_marcado_w		bigint;
qt_marc_dia_agenda_w		bigint;
ie_horario_bloq_w		varchar(1);
ie_consiste_bloq_w		varchar(1);
nr_seq_grupo_quimio_w		bigint;
nr_seq_local_regra_w		bigint;
nr_seq_grupo_quimio_regra_w	bigint;
nr_seq_atendimento_w		bigint;
ie_permite_dia_nao_prev_w	varchar(1);
cd_setor_atendimento_w		paciente_setor.cd_setor_atendimento%type;
CD_PROTOCOLO_W			PACIENTE_SETOR.CD_PROTOCOLO%TYPE;
NR_SEQ_MEDICACAO_W		PACIENTE_SETOR.NR_SEQ_MEDICACAO%TYPE;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	qt_regra_perm_encaixe
	where	coalesce(nr_seq_local, nr_seq_local_p) = nr_seq_local_p
	and		coalesce(nr_seq_grupo_quimio, nr_seq_grupo_quimio_w)	= nr_seq_grupo_quimio_w
	and		((nr_seq_classif = nr_seq_classif_w) or (coalesce(nr_seq_classif::text, '') = ''))
	and		dt_agenda_w between to_date(to_char(dt_Agendamento_p,'dd/mm/yyyy')|| ' ' ||coalesce(to_char(hr_inicial,'hh24:mi:ss'),'00:00:00'),'dd/mm/yyyy hh24:mi:ss')
						and to_date(to_char(dt_Agendamento_p,'dd/mm/yyyy')|| ' ' ||coalesce(to_char(hr_final,'hh24:mi:ss'),'23:59:59'),'dd/mm/yyyy hh24:mi:ss')
	and		((cd_setor_atendimento = cd_setor_atendimento_w) or (coalesce(cd_setor_atendimento::text, '') = ''))
	order by coalesce(nr_seq_classif,0);			

BEGIN

if (coalesce(nr_seq_local_p::text, '') = '') then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(265457);
end if;

qt_horas_entre_dias_w := obter_param_usuario(865, 62, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, qt_horas_entre_dias_w);
ie_consiste_bloq_w := obter_param_usuario(865, 97, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_bloq_w);
ie_permite_dia_nao_prev_w := obter_param_usuario(865, 232, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_permite_dia_nao_prev_w);

dt_agenda_w	:= to_date(to_char(dt_Agendamento_p,'dd/mm/yyyy') || ' ' || hr_agendamento_p||':00','dd/mm/yyyy hh24:mi:ss');

select	count(*)
into STRICT	qt_regra_w
from	qt_regra_perm_encaixe
where	coalesce(nr_seq_local, nr_seq_local_p) = nr_seq_local_p;

if (qt_regra_w > 0) then

	select	max(nr_sequencia)
	into STRICT	nr_seq_classif_w
	from	qt_classif_duracao
	where	nr_minuto_duracao = qt_tempo_medic_p;
	
	select	max(nr_seq_grupo_quimio)
	into STRICT	nr_seq_grupo_quimio_w
	from	qt_local
	where	nr_sequencia	= nr_seq_local_p;
	
	select	max(b.cd_setor_atendimento)
	into STRICT	cd_setor_atendimento_w
	from	paciente_setor b,
			paciente_atendimento c
	where	b.nr_seq_paciente	= c.nr_seq_paciente
	and		c.nr_seq_pend_Agenda	= nr_seq_pendencia_p;
	
	open C01;
	loop
	fetch C01 into	
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		nr_seq_regra_w := nr_seq_regra_w;
		end;
	end loop;
	close C01;
		
	select	max(qt_encaixe),
		max(ie_forma_consistencia),
		max(hr_inicial),
		max(hr_final),
		max(nr_seq_local),
		max(nr_seq_grupo_quimio)
	into STRICT	qt_encaixe_w,
		ie_forma_consistencia_w,
		hr_inicial_w,
		hr_final_w,
		nr_seq_local_regra_w,
		nr_seq_grupo_quimio_regra_w
	from	qt_regra_perm_encaixe
	where	nr_sequencia = nr_seq_regra_w;
	
	if (ie_forma_consistencia_w = 'D') then
		select	count(*) + 1
		into STRICT	qt_enc_marcado_w
		from	agenda_quimio
		where (nr_seq_local = nr_seq_local_regra_w or coalesce(nr_seq_local_regra_w::text, '') = '')
		and (coalesce(qt_obter_seq_grupo_local(nr_seq_local),0)	= nr_seq_grupo_quimio_regra_w or coalesce(nr_seq_grupo_quimio_regra_w::text, '') = '')
		and	dt_agenda between to_date(to_char(dt_Agendamento_p,'dd/mm/yyyy')|| ' ' ||coalesce(to_char(hr_inicial_w,'hh24:mi:ss'),'00:00:00'),'dd/mm/yyyy hh24:mi:ss') and
					  to_date(to_char(dt_Agendamento_p,'dd/mm/yyyy')|| ' ' ||coalesce(to_char(hr_final_w,'hh24:mi:ss'),'23:59:59'),'dd/mm/yyyy hh24:mi:ss')
		and	coalesce(ie_encaixe,'N') = 'S'
		and	ie_status_agenda not in ('C','F');
		
		if (qt_enc_marcado_w > qt_encaixe_w) then
			--'Não é possível forçar agendamento! A quantidade permitida já chegou ao limite!'
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(238907);
		end if;
	else
		select	count(*) + 1
		into STRICT	qt_enc_marcado_w
		from	agenda_quimio
		where (nr_seq_local = nr_seq_local_regra_w or coalesce(nr_seq_local_regra_w::text, '') = '')
		and (coalesce(qt_obter_seq_grupo_local(nr_seq_local),0)	= nr_seq_grupo_quimio_regra_w or coalesce(nr_seq_grupo_quimio_regra_w::text, '') = '')
		and	dt_agenda between to_date(to_char(dt_Agendamento_p,'dd/mm/yyyy')|| ' ' ||coalesce(to_char(hr_inicial_w,'hh24:mi:ss'),'00:00:00'),'dd/mm/yyyy hh24:mi:ss') and
					  to_date(to_char(dt_Agendamento_p+30,'dd/mm/yyyy')|| ' ' ||coalesce(to_char(hr_final_w,'hh24:mi:ss'),'23:59:59'),'dd/mm/yyyy hh24:mi:ss')
		and	coalesce(ie_encaixe,'N') = 'S'
		and	ie_status_agenda not in ('C','F');
		
		if (qt_enc_marcado_w > qt_encaixe_w) then
			--'Não é possível forçar agendamento! A quantidade permitida já chegou ao limite!'
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(238908);
		end if;
	end if;
	
end if;

if (qt_horas_entre_dias_w > 0) then
	select	max(coalesce(b.dt_prevista_agenda, coalesce(b.dt_real,b.dt_prevista)))
	into STRICT	dt_menor_w
	from	paciente_atendimento b
	where	b.nr_seq_pend_agenda	= nr_seq_pendencia_p
	and	coalesce(b.dt_cancelamento::text, '') = ''
	and	coalesce(qt_obter_data_status('F',b.nr_seq_atendimento)::text, '') = ''
	and	trunc(coalesce(b.dt_prevista_agenda,coalesce(b.dt_real, b.dt_prevista)))	< trunc(dt_agenda_w);

	select	min(coalesce(b.dt_prevista_agenda, coalesce(b.dt_real,b.dt_prevista)))
	into STRICT	dt_maior_w
	from	paciente_atendimento b
	where	b.nr_seq_pend_agenda	= nr_seq_pendencia_p
	and	coalesce(b.dt_cancelamento::text, '') = ''
	and	coalesce(qt_obter_data_status('F',b.nr_seq_atendimento)::text, '') = ''
	and	trunc(coalesce(b.dt_prevista_agenda,coalesce(b.dt_real, b.dt_prevista)))	> trunc(dt_agenda_w);

	select	max(dt_agenda)
	into STRICT	dt_maior_marc_w
	from	agenda_quimio_marcacao
	where	nr_seq_pend_agenda	= nr_seq_pendencia_p
	and	trunc(dt_agenda)	= trunc(dt_maior_w);

	select	max(dt_agenda)
	into STRICT	dt_menor_marc_w
	from	agenda_quimio_marcacao
	where	nr_seq_pend_agenda	= nr_seq_pendencia_p
	and	trunc(dt_agenda)	= trunc(dt_menor_w);
	
	if	((((dt_agenda_w - dt_menor_marc_w) * 24) <= qt_horas_entre_dias_w) or (((dt_maior_marc_w - dt_agenda_w) * 24) <= qt_horas_entre_dias_w)) then
		--'Não foi possível realizar a marcação devido o parâmetro de tempo entre dias de tratamento! Parâmetro [62].'
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(238909);
	end if;	
end if;

select	count(*)
into STRICT	qt_pendencia_marcada_w
from	agenda_quimio_marcacao
where	nr_seq_pend_agenda	= nr_seq_pendencia_p
and	trunc(dt_agenda)	= trunc(dt_agendamento_p)
and	coalesce(ie_Gerado,'N')	= 'N';

/*
--select	nvl(max(qt_marc_dia_agenda),0)

select	count(*)
into	qt_marc_dia_agenda_w
from	paciente_setor b,
	paciente_atendimento c
where	b.nr_seq_paciente	= c.nr_seq_paciente
and	c.nr_seq_pend_Agenda	= nr_seq_pendencia_p;
*/
SELECT	MAX(CD_PROTOCOLO),
	MAX(NR_SEQ_MEDICACAO)
INTO STRICT	CD_PROTOCOLO_W,
	NR_SEQ_MEDICACAO_W
FROM	PACIENTE_SETOR B,
	PACIENTE_ATENDIMENTO C
WHERE	B.NR_SEQ_PACIENTE	= C.NR_SEQ_PACIENTE
AND	C.NR_SEQ_PEND_AGENDA	= NR_SEQ_PENDENCIA_P;

SELECT	coalesce(MAX(QT_MARC_DIA_AGENDA),1)
INTO STRICT	QT_MARC_DIA_AGENDA_W
FROM	PROTOCOLO_MEDICACAO
WHERE	1 = 1
AND	CD_PROTOCOLO = CD_PROTOCOLO_w
AND	NR_SEQUENCIA = NR_SEQ_MEDICACAO_W;

if (qt_pendencia_marcada_w >= qt_marc_dia_agenda_w) then
	--'Esse dia de tratamento já foi agendado!'
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(238910);	
end if;

if (ie_consiste_bloq_w	= 'S') then
	select	coalesce(obter_agend_quimio_bloq(trunc(dt_agendamento_p), dt_agenda_w, (dt_agenda_w + (qt_tempo_medic_p / 1440)), nr_seq_local_p),'N')
	into STRICT	ie_horario_bloq_w
	;

	if (ie_horario_bloq_w       = 'S') then
	        --'Não é possivel forçar agendamento em um local bloqueado'
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(238911);
	end if;
end if;

select	max(a.nr_seq_atendimento)
into STRICT	nr_seq_atendimento_w
from	paciente_atendimento a
where	a.nr_seq_pend_agenda 			= nr_seq_pendencia_p
and	trunc(coalesce(a.dt_real, a.dt_prevista))	= trunc(dt_agenda_w)
and	coalesce(dt_interrompido::text, '') = ''
AND	coalesce(dt_cancelamento::text, '') = ''
and	coalesce(dt_suspensao::text, '') = ''
and 	coalesce(dt_fim_adm::text, '') = '';

if (coalesce(nr_seq_atendimento_w,0) = 0) and (ie_permite_dia_nao_prev_w = 'N') then
	--'Somente é possível forçar o agendamento para um dia previsto'
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(238912);
end if;

insert into agenda_quimio_marcacao(nr_sequencia,
	dt_agenda,
	nm_usuario,
	nr_seq_local,
	nr_duracao,
	nr_seq_pend_agenda,
	dt_atualizacao,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	ie_gerado,
	ie_transferencia,
	nr_seq_prof,
	ie_tipo_agendamento,
	ds_observacao,
	ie_encaixe,
	nm_usuario_confirm_forc,
	nr_seq_atendimento)
values (nextval('agenda_quimio_marcacao_seq'),
	dt_agenda_w,
	nm_usuario_p,
	nr_seq_local_p,
	qt_tempo_medic_p,
	nr_seq_pendencia_p,
	clock_timestamp(),
	clock_timestamp(),
	nm_usuario_p,
	'N',
	'N',
	nr_seq_prof_p,
	'P',
	ds_observacao_p,
	'S',
	nm_usuario_confirm_p,
	nr_seq_atendimento_w);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE qt_forcar_agendamento ( hr_agendamento_p text, nr_Seq_local_p bigint, qt_tempo_medic_p bigint, dt_agendamento_p timestamp, nr_seq_pendencia_p bigint, nr_Seq_prof_p bigint, nm_usuario_p text, ds_observacao_p text, cd_estabelecimento_p bigint, nm_usuario_confirm_p text) FROM PUBLIC;

