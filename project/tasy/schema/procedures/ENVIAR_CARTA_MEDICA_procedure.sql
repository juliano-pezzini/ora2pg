-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE enviar_carta_medica ( nr_seq_carta_p bigint, nm_usuario_p text, cd_pessoa_usuario_p text, cd_medico_p text, cd_pessoa_fisica_p text, ds_mensagem_p text, cd_medico_destinatario_p text, ie_liberar_p text default 'N', ie_definitiva_p text default 'N', ie_signature_process_p text default 'N', nr_seq_carta_out_w INOUT bigint DEFAULT NULL) AS $body$
DECLARE


nr_seq_nova_carta_w				carta_medica.nr_sequencia%type;
qt_regra_carta_w				bigint;
nr_seq_carta_definitiva_w		bigint;
qt_horas_liberar_carta_w		wl_regra_item.qt_tempo_normal%type;
nr_seq_regra_w					wl_regra_item.nr_sequencia%type;
qt_tarefa_w						bigint;
nr_atendimento_w				carta_medica.nr_atendimento%type;
cd_pessoa_fisica_w				carta_medica.cd_pessoa_fisica%type;
nr_seq_carta_mae_w				carta_medica.nr_sequencia%type;
ie_preliminar_w					carta_medica.ie_preliminar%type;
ie_definitiva_w					carta_medica.ie_preliminar%type;
nm_usuario_w                    varchar(15);
ie_aprovacao_dupla_w            varchar(2) := 'S';
nr_seq_tipo_adm_fat_atd_w		atendimento_paciente.nr_seq_tipo_admissao_fat%type;
ie_tipo_atendimento_w			atendimento_paciente.ie_tipo_atendimento%type;
nr_seq_episodio_w				atendimento_paciente.nr_seq_episodio%type;
ie_gerar_pendencia_tl_w			subtipo_episodio.ie_gerar_pendencia%type;
cd_pessoa_usuario_w             carta_medica.cd_pessoa_fisica%type;
CONST_ML_TASK_LIST_W			constant varchar(2) := 'ML';
const_doc_medical_letter_w		constant varchar(2) := 'E';
const_sign_medical_letter_w		constant varchar(2) := 'A';

C01 CURSOR FOR
	SELECT	coalesce(b.qt_tempo_normal, 0),
			coalesce(b.nr_sequencia, 0)
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	SELECT	max(x.nr_sequencia)
								from	wl_item x
								where	x.nr_sequencia = a.nr_seq_item
								and		x.cd_categoria = 'ML'
								and		x.ie_situacao = 'A')
	and		coalesce(b.ie_tipo_pend_carta,const_doc_medical_letter_w) = const_doc_medical_letter_w;

C02 CURSOR FOR
	SELECT	nm_usuario
	from	usuario
	where	cd_pessoa_fisica = cd_medico_destinatario_p
	and	ie_situacao = 'A';
	
C03 CURSOR FOR
	SELECT	coalesce(b.qt_tempo_normal, 0) qt_tempo_normal,
			coalesce(b.nr_sequencia, 0) nr_sequencia
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	SELECT	max(x.nr_sequencia)
								from	wl_item x
								where	x.nr_sequencia = a.nr_seq_item
								and		x.cd_categoria = CONST_ML_TASK_LIST_W
								and		x.ie_situacao = 'A')
	and		coalesce(b.ie_tipo_pend_carta,const_sign_medical_letter_w) = const_sign_medical_letter_w;

C04 CURSOR FOR
	SELECT  a.nm_usuario_resp nm_usuario
    from    PARTICIPANTE_CARTA_MEDICA a
    where   NR_SEQ_CARTA_MAE = nr_seq_carta_mae_w
    and     a.IE_DEVE_ASSINAR = 'S'
	and		coalesce(a.DT_ASSINATURA::text, '') = '';
	
C05 CURSOR FOR
    SELECT  a.nm_usuario_resp nm_usuario
    from    PARTICIPANTE_CARTA_MEDICA a
    where   NR_SEQ_CARTA_MAE = nr_seq_carta_mae_w
	and     a.IE_DEVE_ASSINAR = 'S'
    and     nr_seq_assinatura =   (   SELECT  min(nr_seq_assinatura)
                                    from    PARTICIPANTE_CARTA_MEDICA b
                                    where   b.NR_SEQ_CARTA_MAE = a.NR_SEQ_CARTA
                                    and     b.IE_DEVE_ASSINAR = 'S'
									and		coalesce(b.DT_ASSINATURA::text, '') = '');
									
C06 CURSOR FOR
	SELECT  b.cd_medico, coalesce(b.ie_aprovacao_dupla, 'N') ie_aprovacao_dupla
	from    MEDICO_CARTA_MEDICA a,
			MEDICO_CARTA_MEDICA_PERMIT b
	where   a.nr_sequencia = b.nr_seq_medico_carta_medica
	and     a.cd_medico = cd_pessoa_usuario_w
	and		b.ie_situacao = 'A'
	and 	(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
	and    	(((dt_inicio IS NOT NULL AND dt_inicio::text <> '') and (dt_fim IS NOT NULL AND dt_fim::text <> '') and clock_timestamp() between dt_inicio and dt_fim) or coalesce(dt_inicio::text, '') = '' and coalesce(dt_fim::text, '') = '');

BEGIN

select	max(nr_atendimento),
		max(cd_pessoa_fisica),
		coalesce(max(nr_seq_carta_mae),max(nr_sequencia)),
		max(ie_preliminar)
into STRICT	nr_atendimento_w,
		cd_pessoa_fisica_w,
		nr_seq_carta_mae_w,
		ie_preliminar_w
from	carta_medica
where	nr_sequencia = nr_seq_carta_p;

select	CASE WHEN ie_definitiva_p='S' THEN 'N'  ELSE 'S' END
into STRICT	ie_definitiva_w
;

nr_seq_nova_carta_w := gerar_log_carta_medica(nr_seq_carta_p, nm_usuario_p, nr_seq_nova_carta_w, cd_medico_p, ie_definitiva_w);

if (ie_liberar_p = 'S') then

	if (ie_definitiva_p = 'S') then
		CALL liberar_carta_medica(nr_seq_carta_p, cd_pessoa_usuario_p);
	else
		CALL liberar_carta_medica(nr_seq_nova_carta_w, cd_pessoa_usuario_p);
	end if;

end if;

CALL Enviar_CI_carta_medica(cd_pessoa_fisica_p,cd_pessoa_usuario_p,cd_medico_p,nm_usuario_p);

if (ds_mensagem_p IS NOT NULL AND ds_mensagem_p::text <> '') then
    if (coalesce(cd_medico_destinatario_p::text, '') = '') then
        CALL GERAR_MENSAGEM_CARTA_MEDICA(nr_seq_nova_carta_w, nm_usuario_p, ds_mensagem_p, obter_usuario_pf(cd_medico_destinatario_p));
    else
        open C02;
        loop
        fetch C02 into
            nm_usuario_w;
        EXIT WHEN NOT FOUND; /* apply on C02 */
            begin
                CALL GERAR_MENSAGEM_CARTA_MEDICA(nr_seq_nova_carta_w, nm_usuario_p, ds_mensagem_p, nm_usuario_w);
            end;
        end loop;
    end if;
end if;

select	max(a.nr_seq_regra)
into STRICT	nr_seq_regra_w
from	wl_worklist a,
		wl_item b,
		wl_regra_item c
where	a.nr_seq_carta_mae = nr_seq_carta_mae_w
and		b.nr_sequencia = a.nr_seq_item
and		c.nr_sequencia = a.nr_seq_regra
and		coalesce(a.dt_final_real::text, '') = ''
and		b.cd_categoria = CONST_ML_TASK_LIST_W
and		c.ie_tipo_pend_carta = const_doc_medical_letter_w
and		b.ie_situacao = 'A'
and		c.ie_situacao = 'A';

CALL wl_gerar_finalizar_tarefa(CONST_ML_TASK_LIST_W,'F',null,null,wheb_usuario_pck.get_nm_usuario,null,'S',null,null,null,null,null,nr_seq_carta_mae_w,null,null,null,nr_seq_regra_w,
							null,null,null,null,null,null,null,clock_timestamp(),null,null,cd_pessoa_usuario_p);

select	count(*)
into STRICT	qt_tarefa_w
from	wl_worklist a,
		wl_item b,
		wl_regra_item c
where	a.nr_seq_carta_mae = nr_seq_carta_mae_w
and		b.nr_sequencia = a.nr_seq_item
and		c.nr_sequencia = a.nr_seq_regra
and		coalesce(a.dt_final_real::text, '') = ''
and		b.cd_categoria = CONST_ML_TASK_LIST_W
and		c.ie_tipo_pend_carta = const_doc_medical_letter_w
and		b.ie_situacao = 'A'
and		c.ie_situacao = 'A';

select	max(nr_seq_tipo_admissao_fat),
		max(nr_seq_episodio)
into STRICT	nr_seq_tipo_adm_fat_atd_w,
		nr_seq_episodio_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_w;

if (qt_tarefa_w = 0) then
	open C01;
	loop
	fetch C01 into
		qt_horas_liberar_carta_w,
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
			if (qt_horas_liberar_carta_w > 0 and obter_se_regra_geracao(nr_seq_regra_w,nr_seq_episodio_w,nr_seq_tipo_adm_fat_atd_w) = 'S') then
				CALL wl_gerar_finalizar_tarefa(CONST_ML_TASK_LIST_W,'I',nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_p,(clock_timestamp()+(qt_horas_liberar_carta_w/24)),'S',
				null,null,null,null,null,nr_seq_carta_mae_w,null,null,null,nr_seq_regra_w,null,null,null,null,null,null,null,clock_timestamp(),nr_seq_episodio_w,null,cd_medico_destinatario_p);
			end if;
		end;
	end loop;
	close C01;

end if;

if (ie_signature_process_p = 'S') then
	for c03_w in C03 loop
		begin
		
		CALL wl_gerar_finalizar_tarefa(	CONST_ML_TASK_LIST_W,
									'F',
									null,
									null,
									wheb_usuario_pck.get_nm_usuario,
									null,
									'S',
									null,
									null,
									null,
									null,
									null,
									nr_seq_carta_mae_w,
									null,
									null,
									null,
									c03_w.nr_sequencia,
									null,
									null,
									null,
									null,
									null,
									null,
									null,
									clock_timestamp(),
									null,
									null,
									null);

			select	count(*)
			into STRICT	qt_tarefa_w
			from	wl_worklist a,
					wl_item b,
					wl_regra_item c
			where	a.nr_seq_carta_mae = nr_seq_carta_mae_w
			and		b.nr_sequencia = a.nr_seq_item
			and		c.nr_sequencia = a.nr_seq_regra
			and		coalesce(a.dt_final_real::text, '') = ''
			and		b.cd_categoria = CONST_ML_TASK_LIST_W
			and		c.ie_tipo_pend_carta = const_sign_medical_letter_w
			and		b.ie_situacao = 'A'
			and		c.ie_situacao = 'A';
			
			if (c03_w.qt_tempo_normal > 0 and obter_se_regra_geracao(c03_w.nr_sequencia, nr_seq_episodio_w, nr_seq_tipo_adm_fat_atd_w) = 'S' and qt_tarefa_w = 0) then
				for c05_w in C05 loop
					cd_pessoa_usuario_w := OBTER_PESSOA_FISICA_USUARIO(c05_w.nm_usuario, 'C');
					ie_aprovacao_dupla_w := 'S';
					for c06_w in C06 loop
						if (c06_w.ie_aprovacao_dupla = 'N') then
							ie_aprovacao_dupla_w := 'N';
						end if;
						CALL wl_gerar_finalizar_tarefa(	CONST_ML_TASK_LIST_W,
													'I',
													nr_atendimento_w,
													cd_pessoa_fisica_w,
													nm_usuario_p,
													(clock_timestamp()+(c03_w.qt_tempo_normal/24)),
													'S',
													null,
													null,
													null,
													null,
													null,
													nr_seq_carta_mae_w,
													null,
													null,
													null,
													c03_w.nr_sequencia,
													null,
													null,
													null,
													null,
													null,
													null,
													null,
													clock_timestamp(),
													nr_seq_episodio_w,
													null,
													c06_w.cd_medico);
					end loop;
					if (ie_aprovacao_dupla_w = 'N' or ml_obter_permissao_ass_substit(c05_w.nm_usuario, obter_usuario_pf(cd_medico_destinatario_p)) = 'S') then
						CALL wl_gerar_finalizar_tarefa(	CONST_ML_TASK_LIST_W,
													'I',
													nr_atendimento_w,
													cd_pessoa_fisica_w,
													nm_usuario_p,
													(clock_timestamp()+(c03_w.qt_tempo_normal/24)),
													'S',
													null,
													null,
													null,
													null,
													null,
													nr_seq_carta_mae_w,
													null,
													null,
													null,
													c03_w.nr_sequencia,
													null,
													null,
													null,
													null,
													null,
													null,
													null,
													clock_timestamp(),
													nr_seq_episodio_w,
													null,
													cd_pessoa_usuario_w);
					end if;
					CALL atualizar_status_aprovacao(nr_seq_carta_mae_w, 'EE');
				end loop;
			end if;
		end;
	end loop;
end if;

if (nr_seq_nova_carta_w IS NOT NULL AND nr_seq_nova_carta_w::text <> '') then
	nr_seq_carta_out_w := nr_seq_nova_carta_w;
else
	nr_seq_carta_out_w := nr_seq_carta_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enviar_carta_medica ( nr_seq_carta_p bigint, nm_usuario_p text, cd_pessoa_usuario_p text, cd_medico_p text, cd_pessoa_fisica_p text, ds_mensagem_p text, cd_medico_destinatario_p text, ie_liberar_p text default 'N', ie_definitiva_p text default 'N', ie_signature_process_p text default 'N', nr_seq_carta_out_w INOUT bigint DEFAULT NULL) FROM PUBLIC;

