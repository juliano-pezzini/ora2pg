-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_regra_obrig_escrit ( nr_seq_cobr_escrit_p bigint, nr_seq_pag_escrit_p bigint, dt_consistencia_p timestamp, nm_usuario_p text, ie_tipo_mensagem_p INOUT text, ds_mensagem_p INOUT text) AS $body$
DECLARE


/* ie_tipo_mensagem_p
I - Informativa
A - Abortiva
*/
nm_tabela_w		varchar(50);
nm_atributo_w		varchar(50);
cd_banco_w		banco_estabelecimento.cd_banco%type;
nr_seq_conta_banco_w	bigint;
nr_seq_carteira_cobr_w	bigint;
cd_estabelecimento_w	smallint;
qt_regra_w		bigint;
ds_inconsistencia_w	varchar(4000);
ie_obrigatorio_w	varchar(1);
cd_pessoa_fisica_w	varchar(10);
cd_cgc_w		varchar(14);
ds_comando_w		varchar(2000);
vl_atributo_w		varchar(4000);
ds_parametro_w		varchar(255);
nr_seq_regra_w		bigint;
qt_registro_w		bigint;
ie_menor_idade_w	varchar(1);
qt_idade_pessoa_w	smallint;
ie_consistir_w		varchar(1)	:= 'S';
qt_maxima_caracter_w	integer;
ie_caracteres_w		varchar(1);
qt_caracter_w		bigint;
cd_agencia_bancaria_w 	titulo_pagar_escrit.cd_agencia_bancaria%type;
ie_digito_agencia_w 	titulo_pagar_escrit.ie_digito_agencia%type;
nr_conta_w 	titulo_pagar_escrit.nr_conta%type;
ie_digito_conta_w 	titulo_pagar_escrit.ie_digito_conta%type;

/* Regra */

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.nm_tabela,
	a.nm_atributo,
	a.ds_inconsistencia,
	a.ie_obrigatorio,
	a.ie_menor_idade,
	a.qt_maxima_caracter
from	regra_obrig_envio_escrit a
where	a.cd_estabelecimento						= cd_estabelecimento_w
and	coalesce(a.cd_banco,cd_banco_w)					= cd_banco_w
and	coalesce(a.nr_seq_conta_banco,nr_seq_conta_banco_w)			= nr_seq_conta_banco_w
and	coalesce(a.nr_seq_carteira_cobr,coalesce(nr_seq_carteira_cobr_w,0))	= coalesce(nr_seq_carteira_cobr_w,0)
and	coalesce(dt_consistencia_p,clock_timestamp()) between a.dt_inicio_vigencia and coalesce(fim_dia(a.dt_fim_vigencia),to_date('31/12/2100','dd/mm/yyyy'))
and	((a.nm_tabela in ('PESSOA_FISICA','COMPL_PESSOA_FISICA','PESSOA_FISICA_CONTA') and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '')) or (a.nm_tabela in ('PESSOA_JURIDICA','PESSOA_JURIDICA_ESTAB','PESSOA_JURIDICA_CONTA','PESSOA_JURIDICA_COMPL') and (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '')))
order by
	coalesce(a.nr_seq_carteira_cobr,0),
	coalesce(a.nr_seq_conta_banco,0),
	coalesce(a.cd_banco,0);

/* Pessoas - Cobranca */

c02 CURSOR FOR
SELECT	distinct
	b.cd_pessoa_fisica,
	b.cd_cgc
from	titulo_receber b,
	titulo_receber_cobr a
where	a.nr_titulo		= b.nr_titulo
and	a.nr_seq_cobranca	= nr_seq_cobr_escrit_p;	

C03 CURSOR FOR
SELECT	distinct
	b.cd_pessoa_fisica,
	b.cd_cgc
from	titulo_pagar b,
	titulo_pagar_escrit a
where	a.nr_titulo		= b.nr_titulo
and	a.nr_seq_escrit		= nr_seq_pag_escrit_p;

C04 CURSOR FOR
SELECT distinct
	a.cd_banco,
	a.cd_agencia_bancaria,
	a.ie_digito_agencia,
	a.nr_conta,
	a.ie_digito_conta
from titulo_pagar_escrit a
where a.nr_seq_escrit = nr_seq_pag_escrit_p;


BEGIN

ds_mensagem_p		:= null;
ie_tipo_mensagem_p	:= null;

if (nr_seq_cobr_escrit_p IS NOT NULL AND nr_seq_cobr_escrit_p::text <> '') then
	select	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	cobranca_escritural
	where	nr_sequencia	= nr_seq_cobr_escrit_p;

	select	count(*)
	into STRICT	qt_regra_w
	from	regra_obrig_envio_escrit
	where	cd_estabelecimento	= cd_estabelecimento_w;

	if (qt_regra_w > 0) then
		delete	from	inconsistencia_rem_escrit
		where	nr_seq_cobr_escrit	= nr_seq_cobr_escrit_p;

		
		select	b.cd_banco,
			a.nr_seq_conta_banco,
			a.nr_seq_carteira_cobr
		into STRICT	cd_banco_w,
			nr_seq_conta_banco_w,
			nr_seq_carteira_cobr_w
		from	banco_estabelecimento b,
			cobranca_escritural a
		where	a.nr_seq_conta_banco	= b.nr_sequencia
		and	a.nr_sequencia		= nr_seq_cobr_escrit_p;

		open c02;
		loop
		fetch c02 into
			cd_pessoa_fisica_w,
			cd_cgc_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */

			open c01;
			loop
			fetch c01 into
				nr_seq_regra_w,
				nm_tabela_w,
				nm_atributo_w,
				ds_inconsistencia_w,
				ie_obrigatorio_w,
				ie_menor_idade_w,
				qt_maxima_caracter_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				ie_consistir_w	:= 'S';
				ie_caracteres_w	:= 'N';
				
				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					if (ie_menor_idade_w = 'N') then
						select	round(months_between(clock_timestamp(), a.dt_nascimento)/12)
						into STRICT	qt_idade_pessoa_w
						from	pessoa_fisica a
						where 	cd_pessoa_fisica = cd_pessoa_fisica_w;
						
						if (qt_idade_pessoa_w < 18) then
							ie_consistir_w	:= 'N';
						end if;
					end if;
					
					if (nm_tabela_w	= 'PESSOA_FISICA') then
						ds_comando_w	:= 'select ' || nm_atributo_w || ' from ' || nm_tabela_w ||
									' where cd_pessoa_fisica = :cd_pessoa_fisica';
					elsif (nm_tabela_w	= 'COMPL_PESSOA_FISICA') then
						ds_comando_w	:= 'select ' || nm_atributo_w || ' from ' || nm_tabela_w ||
									' where cd_pessoa_fisica = :cd_pessoa_fisica' ||
									' and ie_tipo_complemento = 1 ';
					elsif (nm_tabela_w	= 'PESSOA_FISICA_CONTA') then
						ds_comando_w	:= 'select max(' || nm_atributo_w || ') from ' || nm_tabela_w ||
									' where cd_pessoa_fisica = :cd_pessoa_fisica';
					end if;

					ds_parametro_w	:= 'cd_pessoa_fisica=' || cd_pessoa_fisica_w;
				else
					if (nm_tabela_w	= 'PESSOA_JURIDICA') then
						ds_comando_w	:= 'select ' || nm_atributo_w || ' from ' || nm_tabela_w ||
									' where cd_cgc = :cd_cgc';
					elsif (nm_tabela_w	= 'PESSOA_JURIDICA_COMPL') then
						ds_comando_w	:= 'select ' || nm_atributo_w || ' from ' || nm_tabela_w ||
									' where cd_cgc = :cd_cgc ' ||
									' and ie_tipo_complemento = 1 ';
					elsif (nm_tabela_w	= 'PESSOA_JURIDICA_CONTA') then
						ds_comando_w	:= 'select max(' || nm_atributo_w || ') from ' || nm_tabela_w ||
									' where cd_cgc = :cd_cgc ';
					end if;	

					ds_parametro_w	:= 'cd_cgc=' || cd_cgc_w;	
				end if;

				vl_atributo_w := obter_valor_dinamico_char_bv(ds_comando_w, ds_parametro_w, vl_atributo_w);

				if (coalesce(qt_maxima_caracter_w,0) > 0) and (ie_consistir_w = 'S') then
					qt_caracter_w	:= length(vl_atributo_w);
					
					if (qt_caracter_w > qt_maxima_caracter_w) then
						ie_caracteres_w	:= 'S';
					end if;
				end if;
				
				if (ie_consistir_w = 'S') and
					((coalesce(vl_atributo_w::text, '') = '') or (ie_caracteres_w = 'S')) then
					insert	into	inconsistencia_rem_escrit(nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						nr_seq_cobr_escrit,
						cd_pessoa_fisica,
						cd_cgc,
						ds_inconsistencia,
						ie_permite_remessa,
						nr_seq_regra)
					values (nextval('inconsistencia_rem_escrit_seq'),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nr_seq_cobr_escrit_p,
						cd_pessoa_fisica_w,
						cd_cgc_w,
						ds_inconsistencia_w,
						CASE WHEN ie_obrigatorio_w='S' THEN 'N'  ELSE 'S' END ,
						nr_seq_regra_w);
				end if;
			end loop;
			close c01;
		end loop;
		close c02;
	end if;

	select	count(*)
	into STRICT	qt_registro_w
	from	inconsistencia_rem_escrit a
	where	a.nr_seq_cobr_escrit	= nr_seq_cobr_escrit_p
	and	a.ie_permite_remessa	= 'N';

	if (qt_registro_w > 0) then
		/*Existem pessoas com inconsistencias cadastrais que impedem a remessa do arquivo.
		Favor verificar na aba Inconsistencias.*/
		ds_mensagem_p		:= wheb_mensagem_pck.get_texto(305665);
		ie_tipo_mensagem_p	:= 'A';
	else
		select	count(*)
		into STRICT	qt_registro_w
		from	inconsistencia_rem_escrit a
		where	a.nr_seq_cobr_escrit	= nr_seq_cobr_escrit_p;

		if (qt_registro_w > 0) then
			/*Foram encontradas inconsistencias cadastrais de pessoas para a remessa.
			Deseja continuar?*/
			ds_mensagem_p		:= wheb_mensagem_pck.get_texto(305666);
			ie_tipo_mensagem_p	:= 'I';
		end if;		
	end if;

else if (nr_seq_pag_escrit_p IS NOT NULL AND nr_seq_pag_escrit_p::text <> '')	then
	select	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	banco_escritural
	where	nr_sequencia	= nr_seq_pag_escrit_p;

	select	count(*)
	into STRICT	qt_regra_w
	from	regra_obrig_envio_escrit
	where	cd_estabelecimento	= cd_estabelecimento_w;
	
	if (qt_regra_w > 0) then
		delete	from	inconsistencia_rem_escrit
		where	nr_seq_banco_escrit	= nr_seq_pag_escrit_p;

		select	max(a.cd_banco),
			max(a.nr_seq_conta_banco)
		into STRICT	cd_banco_w,
			nr_seq_conta_banco_w
		from	banco_escritural a
		where	a.nr_sequencia		= nr_seq_pag_escrit_p;
		
		open c03;
		loop
		fetch c03 into
			cd_pessoa_fisica_w,
			cd_cgc_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */

			open c01;
			loop
			fetch c01 into
				nr_seq_regra_w,
				nm_tabela_w,
				nm_atributo_w,
				ds_inconsistencia_w,
				ie_obrigatorio_w,
				ie_menor_idade_w,
				qt_maxima_caracter_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */

				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then

					if (nm_tabela_w	= 'PESSOA_FISICA') then
						ds_comando_w	:= 'select ' || nm_atributo_w || ' from ' || nm_tabela_w ||
									' where cd_pessoa_fisica = :cd_pessoa_fisica';
					elsif (nm_tabela_w	= 'COMPL_PESSOA_FISICA') then
						ds_comando_w	:= 'select ' || nm_atributo_w || ' from ' || nm_tabela_w ||
									' where cd_pessoa_fisica = :cd_pessoa_fisica' ||
									' and ie_tipo_complemento = 1 ';
					elsif (nm_tabela_w	= 'PESSOA_FISICA_CONTA') then
						ds_comando_w	:= 'select max(' || nm_atributo_w || ') from ' || nm_tabela_w ||
									' where cd_pessoa_fisica = :cd_pessoa_fisica';
					end if;
					
					ds_parametro_w	:= 'cd_pessoa_fisica=' || cd_pessoa_fisica_w;
				else
					if (nm_tabela_w	= 'PESSOA_JURIDICA') then
						ds_comando_w	:= 'select ' || nm_atributo_w || ' from ' || nm_tabela_w ||
									' where cd_cgc = :cd_cgc';
					elsif (nm_tabela_w	= 'PESSOA_JURIDICA_COMPL') then
						ds_comando_w	:= 'select ' || nm_atributo_w || ' from ' || nm_tabela_w ||
									' where cd_cgc = :cd_cgc ' ||
									' and ie_tipo_complemento = 1 ';
					elsif (nm_tabela_w	= 'PESSOA_JURIDICA_CONTA') then
						ds_comando_w	:= 'select max(' || nm_atributo_w || ') from ' || nm_tabela_w ||
									' where cd_cgc = :cd_cgc ';
					end if;	

					ds_parametro_w	:= 'cd_cgc=' || cd_cgc_w;	
				end if;

				vl_atributo_w := obter_valor_dinamico_char_bv(ds_comando_w, ds_parametro_w, vl_atributo_w);
				
				if (coalesce(qt_maxima_caracter_w,0) > 0) and (ie_consistir_w = 'S') then
					qt_caracter_w	:= length(vl_atributo_w);
					
					if (qt_caracter_w > qt_maxima_caracter_w) then
						ie_caracteres_w	:= 'S';
					end if;
				end if;
				
				if	((coalesce(vl_atributo_w::text, '') = '') or (ie_caracteres_w = 'S')) then
					insert	into	inconsistencia_rem_escrit(nr_sequencia,
						nm_usuario,
						dt_atualizacao,
						nm_usuario_nrec,
						dt_atualizacao_nrec,
						nr_seq_banco_escrit,
						cd_pessoa_fisica,
						cd_cgc,
						ds_inconsistencia,
						ie_permite_remessa,
						nr_seq_regra)
					values (nextval('inconsistencia_rem_escrit_seq'),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nr_seq_pag_escrit_p,
						cd_pessoa_fisica_w,
						cd_cgc_w,
						ds_inconsistencia_w,
						CASE WHEN ie_obrigatorio_w='S' THEN 'N'  ELSE 'S' END ,
						nr_seq_regra_w);
				end if;
			end loop;
			close c01;
		end loop;
		close c03;
	end if;
	end if;
	
	select	count(*)
	into STRICT	qt_registro_w
	from	inconsistencia_rem_escrit a
	where	a.nr_seq_banco_escrit	= nr_seq_pag_escrit_p
	and	a.ie_permite_remessa	= 'N';

	if (qt_registro_w > 0) then
		/*Existem pessoas com inconsistencias cadastrais que impedem a remessa do arquivo.
		Favor verificar na aba Inconsistencias.*/
		ds_mensagem_p		:= wheb_mensagem_pck.get_texto(305665);
		ie_tipo_mensagem_p	:= 'A';
	else
		select	count(*)
		into STRICT	qt_registro_w
		from	inconsistencia_rem_escrit a
		where	a.nr_seq_banco_escrit	= nr_seq_pag_escrit_p;

		if (qt_registro_w > 0) then
			/*Foram encontradas inconsistencias cadastrais de pessoas para a remessa.
			Deseja continuar?*/
			ds_mensagem_p		:= wheb_mensagem_pck.get_texto(305666);
			ie_tipo_mensagem_p	:= 'I';
		end if;		
	end if;	
	
	if (coalesce(ds_mensagem_p::text, '') = '') then
		/* somente uma conta por fornecedor */

		open c04;
		loop
		fetch c04 into
			cd_banco_w,
			cd_agencia_bancaria_w,
			ie_digito_agencia_w,
			nr_conta_w,
			ie_digito_conta_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */	
					
			select 	count(*)
			into STRICT 	qt_registro_w
			from (SELECT distinct
					b.cd_pessoa_fisica,
					b.cd_cgc	
				from   titulo_pagar_escrit a,
					   titulo_pagar b
				where  a.nr_titulo = b.nr_titulo
				and	   a.nr_seq_escrit = nr_seq_pag_escrit_p
				and    a.cd_banco = cd_banco_w
				and	   a.cd_agencia_bancaria = cd_agencia_bancaria_w
				and	   a.ie_digito_agencia = ie_digito_agencia_w
				and	   a.nr_conta = nr_conta_w
				and	   a.ie_digito_conta = ie_digito_conta_w) alias1;  	
				
			if (qt_registro_w > 1) then
				ds_mensagem_p := wheb_mensagem_pck.get_texto(458734);
				ie_tipo_mensagem_p := 'I';		
			end if;
	
		end loop;
		close c04;
			
	end if;
	
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_regra_obrig_escrit ( nr_seq_cobr_escrit_p bigint, nr_seq_pag_escrit_p bigint, dt_consistencia_p timestamp, nm_usuario_p text, ie_tipo_mensagem_p INOUT text, ds_mensagem_p INOUT text) FROM PUBLIC;

