-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gedipa_baixar_prescr_mat ( nr_sequencia_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_etapa_hor_p gedipa_etapa_hor.nr_sequencia%type default null) AS $body$
DECLARE

			 
cd_material_w				material.cd_material%type;
qt_material_w 				double precision;
cd_unidade_medida_w 		unidade_medida.cd_unidade_medida%type;
nr_seq_lote_fornec_w		material_lote_fornec.nr_sequencia%type;
cd_pessoa_fisica_w			pessoa_fisica.cd_pessoa_fisica%type;
cd_local_estoque_w			local_estoque.cd_local_estoque%type;
nr_atendimento_w			atendimento_paciente.nr_atendimento%type;
cd_convenio_w				convenio.cd_convenio%type;
cd_categoria_w				categoria_convenio.cd_categoria%type;
cd_setor_atendimento_w		setor_atendimento.cd_setor_atendimento%type;
nr_sequencia_w				material_atend_paciente.nr_sequencia%type;
nr_seq_atepacu_w			atend_paciente_unidade.nr_seq_interno%type;
dt_entrada_unidade_w		timestamp;
dt_prescricao_w				timestamp;
nr_prescricao_w				prescr_medica.nr_prescricao%type;
nr_seq_etapa_prod_disp_w	gedipa_etapa_prod_disp.nr_sequencia%type;
cd_senha_w					varchar(20);
ie_tipo_guia_w				atend_categoria_convenio.ie_tipo_guia%type;
nr_doc_convenio_w			varchar(30);
ie_doc_convenio_w			convenio.ie_doc_convenio%type;
nr_seq_processo_w			adep_processo.nr_sequencia%type;
ds_erro_w					varchar(4000);
Var_LocEstOrigemTransf_w  	local_estoque.cd_local_estoque%type;
Var_LocEstDestinoTransf_w 	local_estoque.cd_local_estoque%type;
var_operaesttranf_w       	operacao_estoque.cd_operacao_estoque%type;
var_motivobaixatransf_w   	tipo_baixa_prescricao.cd_tipo_baixa%type;
ie_lanca_conta_w			varchar(1);
nr_seq_material_w			prescr_mat_hor.nr_seq_material%type;
qt_baixa_estoque_w			material_atend_paciente.qt_estoque%type;
qt_unitaria_w				prescr_material.qt_unitaria%type;
cd_unid_med_consumo_w		prescr_material.cd_unidade_medida%type;		
ie_existe_regra_w			varchar(1);
ie_tipo_item_w              material.ie_tipo_material%type;
ie_gedipa_frac_w            varchar(1);
cd_material_orig_w          gedipa_etapa_hor.cd_material%type;

c01 CURSOR FOR
	SELECT	cd_material,
			qt_material, 
			cd_unidade_medida, 
			nr_seq_lote_fornec,
			nr_sequencia
	from	gedipa_etapa_prod_disp
	where	nr_seq_gedipa_hor	=	nr_sequencia_p
	and		coalesce(dt_conta::text, '') = '';	


BEGIN
ie_gedipa_frac_w := obter_param_usuario(3112, 63, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gedipa_frac_w);
Var_LocEstOrigemTransf_w := obter_param_usuario(3112, 75, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, Var_LocEstOrigemTransf_w);
Var_LocEstDestinoTransf_w := obter_param_usuario(3112, 76, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, Var_LocEstDestinoTransf_w);
Var_OperaEstTranf_w := obter_param_usuario(3112, 77, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, Var_OperaEstTranf_w);
Var_MotivoBaixaTransf_w := obter_param_usuario(3112, 78, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, Var_MotivoBaixaTransf_w);
ie_lanca_conta_w := obter_param_usuario(3112, 85, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_lanca_conta_w);

if (nr_seq_etapa_hor_p IS NOT NULL AND nr_seq_etapa_hor_p::text <> '') then
	CALL update_status_frac_adep( nr_seq_etapa_hor_p => nr_seq_etapa_hor_p,
							 ie_status_p 		=> 'P', 
							 nm_usuario_p 		=> nm_usuario_p);
else
	CALL update_status_frac_adep( nr_seq_etapa_hor_p => nr_sequencia_p,
							 ie_status_p 		=> 'P', 
							 nm_usuario_p 		=> nm_usuario_p);
end if;

begin
	
	select 	a.cd_pessoa_fisica,
			a.nr_atendimento,
			a.cd_setor_atendimento,
			a.nr_prescricao,
			a.dt_prescricao,
			b.nr_seq_processo,
			b.nr_seq_material,
			d.qt_unitaria,
			d.cd_unidade_medida,
            c.cd_material
	into STRICT	cd_pessoa_fisica_w,
			nr_atendimento_w,
			cd_setor_atendimento_w,
			nr_prescricao_w,
			dt_prescricao_w,
			nr_seq_processo_w,
			nr_seq_material_w,
			qt_unitaria_w,
			cd_unid_med_consumo_w,
            cd_material_orig_w
	from	prescr_medica 	a,
			prescr_mat_hor	b,
			gedipa_etapa_hor c,
			prescr_material d
	where	a.nr_prescricao	=	b.nr_prescricao
	and		b.nr_sequencia	=	c.nr_seq_horario
	and		a.nr_prescricao = 	d.nr_prescricao
	and		b.nr_prescricao =	d.nr_prescricao
	and		b.nr_seq_material = d.nr_sequencia
	and		c.nr_sequencia	=	nr_sequencia_p;
	
exception when others then
	null;
end;

	SELECT * FROM obter_convenio_execucao(nr_atendimento_w, clock_timestamp(), cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w) INTO STRICT cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w;

	ie_doc_convenio_w	:= obter_valor_conv_estab(cd_convenio_w, cd_estabelecimento_p, 'IE_DOC_CONVENIO');

	if (ie_doc_convenio_w = 'S') then
		nr_doc_convenio_w := coalesce(cd_senha_w, nr_doc_convenio_w);
	elsif (ie_doc_convenio_w in ('N','T')) then
		nr_doc_convenio_w := null;
	end if;

	if (ie_doc_convenio_w	<> 'A') then
		cd_senha_w		:= null;
	end if;

	begin
	select 	cd_local_estoque
	into STRICT 	cd_local_estoque_w
	from 	adep_processo
	where 	nr_sequencia = nr_seq_processo_w;
	exception when others then
		null;
	end;

	if (Var_LocEstOrigemTransf_w IS NOT NULL AND Var_LocEstOrigemTransf_w::text <> '') and (Var_LocEstDestinoTransf_w IS NOT NULL AND Var_LocEstDestinoTransf_w::text <> '') and (Var_OperaEstTranf_w IS NOT NULL AND Var_OperaEstTranf_w::text <> '') and (Var_MotivoBaixaTransf_w IS NOT NULL AND Var_MotivoBaixaTransf_w::text <> '') then
	   cd_local_estoque_w := Var_LocEstDestinoTransf_w;
	end if;

	nr_seq_atepacu_w	:=	obter_atepacu_paciente(nr_atendimento_w,'A');
									
	select	max(dt_entrada_unidade)
	into STRICT	dt_entrada_unidade_w
	from 	atend_paciente_unidade
	where 	nr_seq_interno = nr_seq_atepacu_w;

	open C01;
	loop
	fetch C01 into	
		cd_material_w,
		qt_material_w, 
		cd_unidade_medida_w, 
		nr_seq_lote_fornec_w,
		nr_seq_etapa_prod_disp_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		if (ie_lanca_conta_w = 'S') then

            select  max(a.ie_tipo_material)
            into STRICT    ie_tipo_item_w
            from    estrutura_material_v a
            where   a.cd_material = cd_material_w;

            select	coalesce(max('S'),'N')
			into STRICT	ie_existe_regra_w
			from	regra_disp_gedipa
			where	cd_estabelecimento	= cd_estabelecimento_p;
				
			if (ie_existe_regra_w = 'S') then
				SELECT * FROM obter_quant_gedipa(	cd_estabelecimento_p => cd_estabelecimento_p, cd_setor_atendimento_p => cd_setor_atendimento_w, cd_local_estoque_p => cd_local_estoque_w, cd_material_p => cd_material_w, qt_unitaria_p => qt_material_w, cd_unidade_medida_p => cd_unidade_medida_w, nr_prescricao_p => nr_prescricao_w, nr_sequencia_p => nr_seq_material_w, qt_lanca_conta_p => qt_material_w, qt_baixa_estoque_p => qt_baixa_estoque_w) INTO STRICT qt_lanca_conta_p => qt_material_w, qt_baixa_estoque_p => qt_baixa_estoque_w;
			end if;
		
		
			select 	nextval('material_atend_paciente_seq')
			into STRICT	nr_sequencia_w
			;
				
			ds_erro_w := null;
				
			begin
			insert 	into material_atend_paciente(
					nr_sequencia,
					nr_atendimento, 
					dt_entrada_unidade, 
					dt_atendimento, 
					cd_unidade_medida, 
					qt_material, 
					dt_atualizacao, 
					nm_usuario, 
					cd_acao, 
					cd_setor_atendimento, 
					nr_seq_atepacu, 
					cd_material,
					cd_convenio,
					cd_categoria,
					dt_prescricao,
					nr_prescricao,
					cd_local_estoque,
					vl_unitario,
					qt_ajuste_conta,
					ie_valor_informado,
					ie_guia_informada,
					ie_auditoria,
					nm_usuario_original,
					cd_situacao_glosa,
					nr_seq_lote_fornec,
					dt_conta,
					cd_funcao,
					cd_senha,
					ie_tipo_guia,
					nr_doc_convenio,
					nr_seq_gedipa_etapa_disp,
					nr_seq_processo,
					nr_sequencia_prescricao,
					qt_estoque,
					cd_material_prescricao)
				values (nr_sequencia_w,
					nr_atendimento_w,
					dt_entrada_unidade_w,
					clock_timestamp(),
					cd_unidade_medida_w,
					qt_material_w,
					clock_timestamp(),
					nm_usuario_p,
					'1',
					cd_setor_atendimento_w,
					nr_seq_atepacu_w,
					cd_material_w,
					cd_convenio_w,
					cd_categoria_w,
					dt_prescricao_w,
					nr_prescricao_w,
					cd_local_estoque_w,
					0,
					0,
					'N',
					'N',
					'N',
					nm_usuario_p,
					0,
					nr_seq_lote_fornec_w,
					clock_timestamp(),
					3112,
					cd_senha_w,
					ie_tipo_guia_w,
					nr_doc_convenio_w,
					nr_seq_etapa_prod_disp_w,
					nr_seq_processo_w,
					nr_seq_material_w,
					qt_baixa_estoque_w,
					cd_material_orig_w);
					
			exception when others then
				ds_erro_w 	:= substr(SQLERRM(SQLSTATE),1,255);
				CALL gravar_log_tasy(1212,ds_erro_w,nm_usuario_p);
			end;
			
			if (coalesce(ds_erro_w::text, '') = '') then
				CALL atualiza_preco_material(nr_sequencia_w , nm_usuario_p);
			end if;
							
			update 	gedipa_etapa_prod_disp
			set		dt_conta			=	clock_timestamp(),
					nm_usuario_conta	=	nm_usuario_p
			where	nr_sequencia		=	nr_seq_etapa_prod_disp_w;
		
		elsif (ie_lanca_conta_w = 'M') then
		
			CALL Gerar_Prescricao_Estoque(   cd_estabelecimento_p => cd_estabelecimento_p,
                                        nr_atendimento_p => nr_atendimento_w,
                                        dt_entrada_Unidade_p => null,
                                        cd_material_p => cd_material_w,
                                        dt_atendimento_p => clock_timestamp(),
                                        cd_acao_p => 2,
                                        cd_local_estoque_p => cd_local_estoque_w,
                                        qt_material_p => qt_material_w,
                                        cd_setor_atendimento_p => cd_setor_atendimento_w,
                                        cd_unidade_medida_p => cd_unidade_medida_w,
                                        nm_usuario_p => nm_usuario_p,
                                        ie_inserir_excluir_p => 'E',
                                        nr_prescricao_p => nr_prescricao_w,
                                        nr_seq_prescricao_p => null,
                                        nr_seq_proc_princ_p => null,
                                        nr_sequencia_p => null,
                                        cd_cgc_fornecedor_p => null,
                                        ds_observacao_p => null,
                                        nr_seq_lote_fornec_p => nr_seq_lote_fornec_w,
                                        nr_receita_p => null,
                                        nr_serie_material_p => null,
                                        nr_lote_ap_p => null,
                                        ie_vago1_p => null,
                                        ie_vago2_p => null,
                                        ie_vago3_p => null);
		end if;
		
		
		end;
	end loop;
	close C01;

commit;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gedipa_baixar_prescr_mat ( nr_sequencia_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_etapa_hor_p gedipa_etapa_hor.nr_sequencia%type default null) FROM PUBLIC;

