-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_ocorrencia_aut ( nr_seq_segurado_p bigint, nr_seq_requisicao_p bigint, nr_seq_guia_plano_p bigint, nr_seq_conta_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_material_p bigint, ie_tipo_guia_p text, nr_seq_plano_p bigint, qt_dias_vencido_p bigint, ie_tipo_pagador_p text, nr_seq_prestador_p bigint, nr_seq_tipo_atendimento_p bigint, ie_tipo_ocorrencia_p text, dt_procedimento_p timestamp, ie_origem_ocorrencia_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_congenere_p bigint, ie_cheque_devolvido_p text, ds_parametro2_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Realiza as consistências das regras cadastradas na função OPS - Glosas e Ocorrências > Ocorrências, exceto as ocorrências que estejam com o campo "Regra combinada" marcado.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: Muita atenção com a performance e nas alterações realizadas, para não influenciar em outrar regras que já estão funcionando.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
/* IE_APLICACAO_REGRA_P
	A - Autorização
	C - Conta médica
*/
ie_tipo_segurado_w		varchar(3);
ie_preco_w			varchar(10);
ie_estrutura_w			varchar(1)	:= 'S';
ie_qtde_liberacao_w		varchar(1)	:= 'S';
ie_ocorrencia_w			varchar(1)	:= 'N';
ie_sexo_w			varchar(2);
qt_idade_w			varchar(5);
ie_cid_w			varchar(1)	:= 'S';
ie_simultaneo_w			varchar(1);
cd_guia_referencia_w		varchar(20);
ie_tipo_feriado_w 		varchar(1);
dia_feriado_w 			varchar(1) := 'N';
ie_auditoria_w			varchar(1);
ie_grupo_prest_w		varchar(1)	:= 'S';
ie_glosa_w			varchar(1)	:= 'N';
ie_tipo_prest_prot_w		varchar(10);
cd_medico_protocolo_w		varchar(10);
ie_tipo_contrato_inter_w	varchar(2);
ie_regime_internacao_w		varchar(2);
ie_regulamentacao_w		varchar(1);
ds_observacao_w			varchar(400);
ie_diarias_permitida_w		varchar(1)	:= 'S';
ie_tipo_processo_w		varchar(1);
ie_carater_internacao_w		varchar(1);
ie_existe_medico_w		varchar(10)	:= 'N';
ie_valor_minimo_w		varchar(1);
sg_estado_operadora_w		pessoa_juridica.sg_estado%type;
ie_autorizacao_w		varchar(1)	:= 'N';
ie_conta_w			varchar(1)	:= 'N';
ie_gerar_oc_concorrente_w	varchar(1);
ie_tipo_atend_tiss_w		varchar(2);
ie_excecao_w			varchar(1);
ie_gera_ocorr_cid_intern_w	varchar(1);
ie_gerar_ocorr_cpt_w		varchar(2);
cd_tiss_atendimento_w		varchar(20);
ie_grua_partic_proced_w		varchar(1)	:= 'S';
ie_grupo_servico_w		varchar(1)	:= 'S';
ie_dias_cobranca_prec_w		varchar(1)	:= 'N';
ie_situacao_prest_w		varchar(1)	:= 'S';
ie_diaria_permitida_w		varchar(1)	:= 'N';
sg_estado_w			pessoa_juridica.sg_estado%type;
ie_tipo_intercambio_w		varchar(1);
ie_regra_senha_estip_w		varchar(1);
ie_gera_analise_estip_ext_w	varchar(2);
ie_obstetrico_informado_w	varchar(1)	:= 'N';
cd_categoria_w			varchar(10);
ie_ocorrencia_item_w		varchar(1)	:= 'N';
ie_consulta_urgencia_w		varchar(2);
ie_restringe_estab_w		varchar(2);
ie_tipo_gat_w			varchar(2);
ie_hora_periodo_w		varchar(1);
ie_define_se_gera_analise_w	varchar(1);
cd_prestador_w			varchar(30);
ie_regra_qt_dias_prest_w	varchar(1);
ie_analise_sistema_ant_w	varchar(1)	:= 'N';
ie_tipo_repasse_w		varchar(2)	:= 'X';
ie_origem_analise_w		varchar(1);
ie_pcmso_w			varchar(1);
ie_ocorr_recem_nasc_w		varchar(1);
ie_origem_inclusao_w		varchar(2);
ie_tipo_solicitacao_int_w	varchar(2)	:= 'X';
ie_grupo_material_w		varchar(2)	:= 'X';
ie_pagador_isento_w		varchar(1)	:= 'N';
ie_origem_solic_w		varchar(2);
ie_se_medico_cooperado_w	varchar(1)	:= 'A';
cd_medico_solicitante_w		varchar(10);
cd_cgc_w			varchar(14);
ie_titularidade_w		varchar(1);
dt_item_w			timestamp;
dt_emissao_w			timestamp;
cd_estabelecimento_w		bigint;
ie_tipo_valid_digital_w		smallint;
nr_seq_tipo_acomodacao_w	bigint;
qt_proc_util_opme_w		bigint;
qt_mat_util_opme_w		bigint;
cd_convenio_w			integer;
qt_dia_solicitado_w		bigint;
qt_idade_meses_w		integer;
cd_especialidade_w		bigint;
nr_seq_ocorrencia_w		bigint;
nr_seq_contrato_w		bigint;
nr_seq_classificacao_w		bigint;
qt_excecao_w			integer;
qt_item_w			double precision;
vl_item_w			double precision;
qt_indicacao_clinica_w		bigint;
vl_procedimento_w		double precision;
nr_seq_tipo_prestador_w		bigint;
nr_seq_congenere_w		bigint;
qt_existe_grupo_w		bigint;
qt_ocorrencia_w			integer	:= 0;
nr_contrato_w			bigint;
nr_seq_item_w			bigint;
ie_tipo_item_w			bigint;
nr_seq_motivo_glosa_w		bigint;
nr_seq_ocorrencia_benef_w	bigint;
dia_semana_w			smallint	:= 0;
qt_registro_w			bigint	:= 0;
nr_seq_intercambio_w		bigint;
nr_seq_pagador_w		bigint;
nr_seq_uni_exec_w		bigint;
nr_seq_guia_req_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_motivo_inclusao_w	bigint	:= 0;
nr_seq_conselho_w		bigint;
nr_seq_titular_w		bigint;
qt_registros_w			bigint;
ie_glosar_cart_w		varchar(1);
nr_seq_grupo_contrato_w		bigint;
ie_status_w			varchar(1)	:= 'X';

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_motivo_glosa,
		ie_auditoria,
		cd_estabelecimento
	from	pls_ocorrencia
	where	ie_situacao		= 'A'
	and (coalesce(ie_regra_combinada::text, '') = '' or ie_regra_combinada	= 'N')
	and	((ie_restringe_estab_w	= 'N')
	or	(ie_restringe_estab_w	= 'S' AND cd_estabelecimento = cd_estabelecimento_p));

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_estrutura,
		a.qt_liberada,
		a.ie_tipo_qtde,
		a.qt_tipo_quantidade,
		a.cd_doenca_cid,
		a.nr_seq_simultaneo,
		a.ie_guia_referencia,
		a.ie_exige_procedimento,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.nr_seq_grupo_prestador,
		a.ie_tipo_pessoa_qtde,
		a.ie_relacao_prest_pf,
		a.ie_regime_internacao,
		a.ie_afastamento_cooperado,
		a.ie_regra_qtde,
		a.ie_exige_indicacao_clinica,
		a.qt_diarias_permitida,
		a.vl_minimo,
		a.nr_seq_grupo_contrato,
		a.nr_seq_prestador,
		a.nr_seq_tipo_prestador,
		a.nr_seq_classificacao,
		a.ie_somar_estrutura,
		a.nr_seq_concorrente,
		a.nr_seq_regra_cid_int,
		a.ie_qt_lib_posterior,
		a.cd_especialidade_medica,
		a.ie_validacao_cpt,
		a.qt_idade_min,
		a.qt_idade_max,
		a.ie_unid_tempo_idade,
		a.qt_dias_cobranca_prev,
		a.ie_prestador_inativo,
		a.ie_consiste_qt_diaria,
		a.ie_exige_senha_estipulante,
		a.ie_restringe_pacote,
		a.nr_contrato,
		a.ie_possui_liminar,
		a.ie_internacao_obstetrica,
		a.ie_utiliza_opme,
		a.nr_seq_material,
		a.ie_autorizacao_previa_estip,
		a.nr_seq_intercambio,
		a.ie_valida_execucao,
		a.ie_digital_invalida,
		a.ie_digital_obrigatoria,
		a.ie_digital_cadastrada,
		a.ie_concorrente_anterior,
		a.ie_tipo_gat,
		a.nr_seq_grupo_servico,
		a.hr_inicial,
		a.hr_final,
		a.ie_somente_solicitacao,
		a.cd_prestador,
		a.ie_valida_cod_prestador,
		a.qt_dias_regra_prest,
		a.ie_valida_ano_contratual,
		a.ie_tipo_guia,
		a.ie_valida_migracao,
		a.ie_valida_local_atend,
		a.ie_recem_nascido,
		a.qt_dias_recem_nasc,
		a.nr_seq_grupo_material,
		a.nr_seq_plano,
		a.nr_seq_regra_atend_cart
	from	pls_ocorrencia_regra	a
	where	a.nr_seq_ocorrencia	= nr_seq_ocorrencia_w
	and	a.ie_aplicacao_regra	= 'A'
	and	a.ie_situacao		= 'A'
	and	a.ie_tipo_ocorrencia	= ie_tipo_ocorrencia_p
	and	((coalesce(a.cd_procedimento::text, '') = '') or (a.cd_procedimento	= cd_procedimento_p and a.ie_origem_proced = ie_origem_proced_p))
	and	((coalesce(a.ie_tipo_guia::text, '') = '') or (a.ie_tipo_guia = ie_tipo_guia_p))
	and	((coalesce(a.ie_preco::text, '') = '') or (a.ie_preco = ie_preco_w))
	and	((coalesce(a.ie_tipo_segurado::text, '') = '') or (a.ie_tipo_segurado = ie_tipo_segurado_w))
	and	((coalesce(a.nr_contrato::text, '') = '') or (a.nr_contrato = nr_contrato_w))
	and	((coalesce(a.ie_sexo::text, '') = '') or (a.ie_sexo = ie_sexo_w))
	and	((coalesce(a.qt_dias_mensal_vencido,0) = 0) or ((coalesce(qt_dias_vencido_p,0) >= coalesce(a.qt_dias_mensal_vencido,0)) and (coalesce(ie_pagador_isento_w,'N') = 'N')) )
	and	((ie_tipo_pagador = 'A') or (ie_tipo_pagador = ie_tipo_pagador_p))
	and	((coalesce(a.dt_dia_semana::text, '') = '') or ((a.dt_dia_semana = dia_semana_w) or ((a.dt_dia_semana = 9) and (dia_semana_w not in (1,7)))))
	and 	((a.ie_feriado = 'N') or (a.ie_feriado = dia_feriado_w AND a.ie_feriado IS NOT NULL AND a.ie_feriado::text <> ''))
	and 	((coalesce(a.ie_tipo_feriado::text, '') = '') or (a.ie_tipo_feriado= ie_tipo_feriado_w))
	and	((coalesce(a.nr_seq_congenere::text, '') = '') or (a.nr_seq_congenere = nr_seq_congenere_p))
	and	trunc(dt_emissao_w) between trunc(a.dt_inicio_vigencia)	and fim_dia(coalesce(a.dt_fim_vigencia,dt_emissao_w))
	and	((coalesce(a.nr_seq_intercambio::text, '') = '') or (a.nr_seq_intercambio = nr_seq_intercambio_w))
	and	((coalesce(a.ie_tipo_contrato_intercambio::text, '') = '') or (a.ie_tipo_contrato_intercambio = ie_tipo_contrato_inter_w))
	and	((coalesce(a.ie_regulamentacao::text, '') = '') or (a.ie_regulamentacao = ie_regulamentacao_w))
	and	((coalesce(a.ie_tipo_processo_autor::text, '') = '') or (a.ie_tipo_processo_autor = ie_tipo_processo_w AND a.ie_tipo_processo_autor IS NOT NULL AND a.ie_tipo_processo_autor::text <> ''))
	and	((coalesce(a.ie_origem_solic_guia::text, '') = '') or (a.ie_origem_solic_guia = ie_origem_solic_w AND a.ie_origem_solic_guia IS NOT NULL AND a.ie_origem_solic_guia::text <> ''))
	and	((coalesce(a.ie_carater_internacao::text, '') = '') or (a.ie_carater_internacao = ie_carater_internacao_w AND a.ie_carater_internacao IS NOT NULL AND a.ie_carater_internacao::text <> ''))
	and	((coalesce(a.ie_consulta_urgencia::text, '') = '') or (a.ie_consulta_urgencia = 'N') or (a.ie_consulta_urgencia = ie_consulta_urgencia_w AND a.ie_consulta_urgencia IS NOT NULL AND a.ie_consulta_urgencia::text <> ''))
	and	((coalesce(a.sg_estado_operadora::text, '') = '') or (a.sg_estado_operadora = sg_estado_operadora_w))
	and	((coalesce(a.ie_relacao_prest_pf::text, '') = '') or (ie_tipo_prest_prot_w = 'PF' and (a.ie_relacao_prest_pf IS NOT NULL AND a.ie_relacao_prest_pf::text <> '')))
	and	((coalesce(a.ie_tipo_atend_tiss::text, '') = '') or (a.ie_tipo_atend_tiss = ie_tipo_atend_tiss_w))
	and	((coalesce(a.ie_origem_conta::text, '') = '') 	or (a.ie_origem_conta = coalesce(ie_origem_ocorrencia_p,'D')))
	and	((coalesce(a.cd_convenio::text, '') = '') 	or (a.cd_convenio = cd_convenio_w))
	and	((coalesce(a.cd_categoria::text, '') = '') 	or (a.cd_categoria = cd_categoria_w))
	and	(((a.ie_tipo_intercambio	= 'A') or (coalesce(a.ie_tipo_intercambio::text, '') = ''))	or (ie_tipo_intercambio	= ie_tipo_intercambio_w))
	and	((coalesce(a.ie_tipo_repasse::text, '') = '')	or (a.ie_tipo_repasse		= ie_tipo_repasse_w))
	and	((coalesce(a.nr_seq_uni_exec::text, '') = '')	or (a.nr_seq_uni_exec		= nr_seq_uni_exec_w))
	and	((coalesce(a.ie_tipo_solicitacao_int::text, '') = '') or (a.ie_tipo_solicitacao_int = 'A') or
		 (ie_tipo_solicitacao_int_w IS NOT NULL AND ie_tipo_solicitacao_int_w::text <> '' AND a.ie_tipo_solicitacao_int = ie_tipo_solicitacao_int_w))
	and	((coalesce(a.nr_seq_tipo_acomodacao::text, '') = '') or (a.nr_seq_tipo_acomodacao = nr_seq_tipo_acomodacao_w))
	and 	((a.ie_cheque_devolvido = 'N') or ((a.ie_cheque_devolvido = ie_cheque_devolvido_p) or (coalesce(a.ie_cheque_devolvido::text, '') = '')))
	and	((coalesce(a.ie_pcmso::text, '') = '') or (a.ie_pcmso = 'N') or (a.ie_pcmso = ie_pcmso_w))
	and	((coalesce(a.nr_seq_motivo_inclusao::text, '') = '') or (a.nr_seq_motivo_inclusao = nr_seq_motivo_inclusao_w))
	and	((coalesce(a.ie_origem_inclusao::text, '') = '') or (a.ie_origem_inclusao = 'A') or (a.ie_origem_inclusao = ie_origem_inclusao_w))
	and	((coalesce(a.nr_seq_conselho_solic::text, '') = '') or (a.nr_seq_conselho_solic = nr_seq_conselho_w))
	and	((coalesce(a.cd_medico_executor_solic::text, '') = '') or (a.cd_medico_executor_solic = cd_medico_solicitante_w))
	and	((coalesce(a.ie_medico_cooperado_solic::text, '') = '') or (a.ie_medico_cooperado_solic = 'A') or (a.ie_medico_cooperado_solic = ie_se_medico_cooperado_w))
	and	(((nr_seq_congenere_p IS NOT NULL AND nr_seq_congenere_p::text <> '') and a.ie_cooperativa = 'S') or (a.ie_cooperativa = 'N' or coalesce(a.ie_cooperativa::text, '') = ''))
	and	((coalesce(a.ie_titularidade::text, '') = '') or (a.ie_titularidade = ie_titularidade_w))
	order by coalesce(a.ie_tipo_guia,'0'),
		coalesce(a.cd_procedimento,999999999999999);

BEGIN

/* Parâmetro para definir o tipo de conta digitada no portal
C - Complemento de contas web
D - Digitação de contas web
*/
/* Obter dados do segurado */

begin
ie_restringe_estab_w	:= pls_obter_se_controle_estab('GO');

select	b.nr_seq_contrato,
	b.ie_tipo_segurado,
	a.ie_sexo,
	substr(obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'A'),1,10),
	substr(obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'M'),1,10),
	pls_obter_conv_cat_segurado(b.nr_sequencia, 1),
	pls_obter_conv_cat_segurado(b.nr_sequencia, 2),
	b.nr_seq_pagador,
	b.ie_pcmso,
	b.nr_seq_plano,
	b.nr_seq_titular
into STRICT	nr_seq_contrato_w,
	ie_tipo_segurado_w,
	ie_sexo_w,
	qt_idade_w,
	qt_idade_meses_w,
	cd_convenio_w,
	cd_categoria_w,
	nr_seq_pagador_w,
	ie_pcmso_w,
	nr_seq_plano_w,
	nr_seq_titular_w
from	pls_segurado	b,
	pessoa_fisica	a
where	b.nr_sequencia		= nr_seq_segurado_p
and	b.cd_pessoa_fisica	= a.cd_pessoa_fisica;

select	CASE WHEN coalesce(nr_seq_titular_w::text, '') = '' THEN  'T'  ELSE 'D' END
into STRICT	ie_titularidade_w
;
exception
when others then
	nr_seq_contrato_w 	:= 0;
	ie_tipo_segurado_w	:= '0';
	cd_convenio_w		:= 0;
	cd_categoria_w		:= '0';
	ie_titularidade_w	:= null;
end;

if (ie_tipo_segurado_w in ('I', 'C', 'T', 'H')) then /* Se responsabilidade assumida, verifica o tipo de repasse do beneficiário */
	begin
	select	ie_tipo_repasse
	into STRICT	ie_tipo_repasse_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_p;
	exception
	when others then
		ie_tipo_repasse_w	:= 'X';
	end;
else /* Se a responsabilidade não for assumida, significa que o beneficiário é da própria operadora, então verifica o tipo de repasse que o beneficiário foi transferido */
	begin
	select	ie_tipo_repasse
	into STRICT	ie_tipo_repasse_w
	from	pls_segurado_repasse
	where	nr_seq_segurado	= nr_seq_segurado_p
	and	clock_timestamp()	between	dt_repasse and fim_dia(dt_fim_repasse)
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');
	exception
	when others then
		ie_tipo_repasse_w	:= 'X';
	end;
end if;

if (coalesce(ie_tipo_repasse_w::text, '') = '') then
	ie_tipo_repasse_w	:= 'X';
end if;

if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
	select	max(cd_cgc)
	into STRICT	cd_cgc_w
	from	pls_contrato_pagador
	where	nr_sequencia = nr_seq_pagador_w;

	ie_pagador_isento_w	:= pls_obter_se_pagador_isento(nr_seq_pagador_w,cd_cgc_w,dt_emissao_w);
end if;

/*Se o beneficiário não tiver um contrato verificamos se este é um beneficiário de intercâmbio*/

begin
select	coalesce(nr_seq_intercambio, 0)
into STRICT	nr_seq_intercambio_w
from	pls_segurado
where	nr_sequencia	= nr_seq_segurado_p;

select	coalesce(ie_tipo_contrato, '0')
into STRICT	ie_tipo_contrato_inter_w
from	pls_intercambio
where	nr_sequencia	= nr_seq_intercambio_w;
exception
when others then
	nr_seq_intercambio_w		:= 0;
	ie_tipo_contrato_inter_w	:= '0';
end;

/* Obter o código TISS do tipo de atendimento */

select	coalesce(max(cd_tiss), '01')
into STRICT	cd_tiss_atendimento_w
from	pls_tipo_atendimento
where	nr_sequencia	= nr_seq_tipo_atendimento_p;

/*Obter Feriado */

begin
select	'S',
	ie_tipo_feriado
into STRICT	dia_feriado_w,
	ie_tipo_feriado_w
from	feriado
where cd_estabelecimento= cd_estabelecimento_p
and to_char(dt_feriado,'dd/mm/yyyy')= to_char(clock_timestamp(),'dd/mm/yyyy')
group by ie_tipo_feriado;
exception
when others then
	dia_feriado_w := 'N';
	ie_tipo_feriado_w := '';
end;

/* Obter dados do contrato */

begin
select	nr_contrato
into STRICT	nr_contrato_w
from	pls_contrato
where	nr_sequencia	= nr_seq_contrato_w;
exception
when others then
	nr_contrato_w	:= 0;
end;

/* Obter dados do produto */

begin
select	ie_preco,
	ie_regulamentacao
into STRICT	ie_preco_w,
	ie_regulamentacao_w
from	pls_plano
where	nr_sequencia	= nr_seq_plano_p;
exception
when others then
	ie_preco_w	:= '0';
end;

/* Obter dados do prestador */

begin
select	nr_seq_tipo_prestador,
	nr_seq_classificacao,
	cd_prestador
into STRICT	nr_seq_tipo_prestador_w,
	nr_seq_classificacao_w,
	cd_prestador_w
from	pls_prestador
where	nr_sequencia	= nr_seq_prestador_p;
exception
when others then
	nr_seq_tipo_prestador_w	:= 0;
	nr_seq_classificacao_w	:= 0;
	cd_prestador_w		:= 'X';
end;

/*
ie_tipo_item_w
1 - Procedimento da guia
2 - Material da guia
3 - Procedimento da conta
4 - Material da conta
5 - Procedimento da requisição
6 - Material da requisição
7 - Guia
8 - Contas Médica
9 - Requisições para Autorização
*/
if (coalesce(nr_seq_proc_p,0) > 0) then
	nr_seq_item_w	:= nr_seq_proc_p;

	if (coalesce(nr_seq_guia_plano_p, 0) > 0) then
		ie_tipo_item_w	:= 1;
		begin
		select	coalesce(ie_tipo_processo, 'X'),
			ie_tipo_atend_tiss,
			qt_dia_solicitado,
			ie_carater_internacao,
			coalesce(dt_solicitacao,clock_timestamp()),
			nr_seq_uni_exec,
			ie_tipo_intercambio,
			nr_seq_tipo_acomodacao,
			ie_origem_solic,
			cd_medico_solicitante,
			nr_seq_plano
		into STRICT	ie_tipo_processo_w,
			ie_tipo_atend_tiss_w,
			qt_dia_solicitado_w,
			ie_carater_internacao_w,
			dt_emissao_w,
			nr_seq_uni_exec_w,
			ie_tipo_solicitacao_int_w,
			nr_seq_tipo_acomodacao_w,
			ie_origem_solic_w,
			cd_medico_solicitante_w,
			nr_seq_plano_w
		from	pls_guia_plano
		where	nr_sequencia	= nr_seq_guia_plano_p;
		exception
		when others then
			ie_tipo_processo_w	:= 'X';
		end;

		begin
		select	ie_origem_inclusao
		into STRICT	ie_origem_inclusao_w
		from	pls_guia_plano_proc
		where	nr_sequencia	= nr_seq_proc_p;
		exception
		when others then
			ie_origem_inclusao_w	:= 'A';
		end;
	elsif (coalesce(nr_seq_requisicao_p, 0) > 0) then
		ie_tipo_item_w	:= 5;

		begin
		select	coalesce(a.dt_requisicao,clock_timestamp()),
			a.ie_carater_atendimento,
			a.ie_consulta_urgencia,
			a.ie_tipo_atendimento,
			a.ie_tipo_processo,
			a.ie_tipo_gat,
			a.nr_seq_uni_exec,
			a.ie_tipo_intercambio,
			a.nr_seq_tipo_acomodacao,
			a.ie_origem_solic,
			a.nr_seq_motivo_inclusao,
			b.ie_origem_inclusao,
			a.cd_medico_solicitante,
			a.nr_seq_plano
		into STRICT	dt_emissao_w,
			ie_carater_internacao_w,
			ie_consulta_urgencia_w,
			ie_tipo_atend_tiss_w,
			ie_tipo_processo_w,
			ie_tipo_gat_w,
			nr_seq_uni_exec_w,
			ie_tipo_solicitacao_int_w,
			nr_seq_tipo_acomodacao_w,
			ie_origem_solic_w,
			nr_seq_motivo_inclusao_w,
			ie_origem_inclusao_w,
			cd_medico_solicitante_w,
			nr_seq_plano_w
		from	pls_requisicao a,
			pls_requisicao_proc b
		where	a.nr_sequencia = b.nr_seq_requisicao
		and	b.nr_sequencia = nr_seq_proc_p;
		exception
		when others then
			dt_emissao_w := clock_timestamp();
		end;

	end if;
elsif (coalesce(nr_seq_mat_p, 0) > 0) then
	nr_seq_item_w	:= nr_seq_mat_p;

	if (coalesce(nr_seq_guia_plano_p, 0) > 0) then
		ie_tipo_item_w	:= 2;

		begin
		select	coalesce(ie_tipo_processo, 'X'),
			ie_carater_internacao,
			coalesce(dt_solicitacao,clock_timestamp()),
			nr_seq_uni_exec,
			ie_tipo_intercambio,
			nr_seq_tipo_acomodacao,
			ie_origem_solic,
			cd_medico_solicitante,
			nr_seq_plano
		into STRICT	ie_tipo_processo_w,
			ie_carater_internacao_w,
			dt_emissao_w,
			nr_seq_uni_exec_w,
			ie_tipo_solicitacao_int_w,
			nr_seq_tipo_acomodacao_w,
			ie_origem_solic_w,
			cd_medico_solicitante_w,
			nr_seq_plano_w
		from	pls_guia_plano
		where	nr_sequencia	= nr_seq_guia_plano_p;
		exception
		when others then
			ie_tipo_processo_w	:= 'X';
		end;

		begin
			select	ie_origem_inclusao
			into STRICT	ie_origem_inclusao_w
			from	pls_guia_plano_mat
			where	nr_sequencia = nr_seq_mat_p;
		exception
		when others then
			ie_origem_inclusao_w	:= 'A';
		end;

	elsif (coalesce(nr_seq_requisicao_p, 0) > 0) then
		ie_tipo_item_w	:= 6;

		begin
		select	coalesce(a.dt_requisicao, clock_timestamp()),
			a.ie_carater_atendimento,
			a.ie_consulta_urgencia,
			a.ie_tipo_atendimento,
			a.ie_tipo_processo,
			a.ie_tipo_gat,
			a.nr_seq_uni_exec,
			a.ie_tipo_intercambio,
			a.nr_seq_tipo_acomodacao,
			a.ie_origem_solic,
			a.nr_seq_motivo_inclusao,
			b.ie_origem_inclusao,
			a.cd_medico_solicitante,
			a.nr_seq_plano
		into STRICT	dt_emissao_w,
			ie_carater_internacao_w,
			ie_consulta_urgencia_w,
			ie_tipo_atend_tiss_w,
			ie_tipo_processo_w,
			ie_tipo_gat_w,
			nr_seq_uni_exec_w,
			ie_tipo_solicitacao_int_w,
			nr_seq_tipo_acomodacao_w,
			ie_origem_solic_w,
			nr_seq_motivo_inclusao_w,
			ie_origem_inclusao_w,
			cd_medico_solicitante_w,
			nr_seq_plano_w
		from	pls_requisicao a,
			pls_requisicao_mat b
		where	a.nr_sequencia = b.nr_seq_requisicao
		and	b.nr_sequencia = nr_seq_mat_p;
		exception
		when others then
			dt_emissao_w	:= clock_timestamp();
		end;
	end if;
elsif (coalesce(nr_seq_guia_plano_p, 0) > 0) then
	ie_tipo_item_w := 7;

	begin
	select	cd_guia_principal,
		coalesce(dt_solicitacao,clock_timestamp()),
		cd_medico_solicitante,
		ie_tipo_processo,
		ie_tipo_atend_tiss,
		qt_dia_solicitado,
		ie_carater_internacao,
		nr_seq_uni_exec,
		ie_tipo_intercambio,
		nr_seq_tipo_acomodacao,
		ie_origem_solic,
		nr_seq_plano
	into STRICT	cd_guia_referencia_w,
		dt_emissao_w,
		cd_medico_solicitante_w,
		ie_tipo_processo_w,
		ie_tipo_atend_tiss_w,
		qt_dia_solicitado_w,
		ie_carater_internacao_w,
		nr_seq_uni_exec_w,
		ie_tipo_solicitacao_int_w,
		nr_seq_tipo_acomodacao_w,
		ie_origem_solic_w,
		nr_seq_plano_w
	from	pls_guia_plano
	where	nr_sequencia	= nr_seq_guia_plano_p;
	exception
	when others then
		dt_emissao_w := clock_timestamp();
		cd_guia_referencia_w	:= '';
	end;
elsif (coalesce(nr_seq_requisicao_p, 0) > 0) then
	ie_tipo_item_w	:= 9;

	begin
	select	coalesce(dt_requisicao,clock_timestamp()),
		cd_medico_solicitante,
		ie_tipo_processo,
		ie_tipo_atendimento,
		ie_tipo_validacao_digital,
		ie_tipo_gat,
		ie_analise_sistema_ant,
		nr_seq_uni_exec,
		ie_tipo_intercambio,
		nr_seq_tipo_acomodacao,
		ie_origem_solic,
		nr_seq_motivo_inclusao,
		ie_carater_atendimento,
		nr_seq_plano,
		cd_guia_principal
	into STRICT	dt_emissao_w,
		cd_medico_solicitante_w,
		ie_tipo_processo_w,
		ie_tipo_atend_tiss_w,
		ie_tipo_valid_digital_w,
		ie_tipo_gat_w,
		ie_analise_sistema_ant_w,
		nr_seq_uni_exec_w,
		ie_tipo_solicitacao_int_w,
		nr_seq_tipo_acomodacao_w,
		ie_origem_solic_w,
		nr_seq_motivo_inclusao_w,
		ie_carater_internacao_w,
		nr_seq_plano_w,
		cd_guia_referencia_w
	from	pls_requisicao
	where	nr_sequencia	= nr_seq_requisicao_p;
	exception
	when others then
		dt_emissao_w	:= clock_timestamp();
		cd_guia_referencia_w	:= '';
	end;
end if;
/* Obter dados do médico solicitante */

begin
select	nr_seq_conselho
into STRICT	nr_seq_conselho_w
from	pessoa_fisica
where	cd_pessoa_fisica = cd_medico_solicitante_w;

select	CASE WHEN pls_obter_se_cooperado_ativo(cd_medico_solicitante_w,dt_emissao_w,null)='S' THEN  'C'  ELSE 'N' END
into STRICT	ie_se_medico_cooperado_w
;
exception
when others then
	nr_seq_conselho_w := null;
end;

-- Obter a UF da operadora  - Tasy
begin
	select	sg_estado
	into STRICT	sg_estado_w
	from	pessoa_juridica
	where	cd_cgc	=	(SELECT	cd_cgc_outorgante
				from	pls_outorgante
				where	cd_estabelecimento	= cd_estabelecimento_p);
exception
when others then
	sg_estado_w	:= 'X';
end;

-- Obter estado da operadora executora
begin
	select	sg_estado
	into STRICT	sg_estado_operadora_w
	from	pls_congenere	a,
		pessoa_juridica	b
	where	b.cd_cgc	= a.cd_cgc
	and	a.nr_sequencia	= nr_seq_uni_exec_w;
exception
when others then
	sg_estado_operadora_w	:= 'X';
end;

if (coalesce(sg_estado_w, 'X') <> 'X') and (coalesce(sg_estado_operadora_w, 'X') <> 'X') and (coalesce(ie_tipo_processo_w, 'X') = 'I')	then
	if (sg_estado_w = sg_estado_operadora_w) then
		ie_tipo_intercambio_w	:= 'E';
	else
		ie_tipo_intercambio_w	:= 'N';
	end if;
else
	ie_tipo_intercambio_w	:= 'A';
end if;

/* Obter o dia da semana*/

dia_semana_w		:= (to_char(dt_emissao_w,'d'))::numeric;

if (ie_tipo_item_w in (1, 2, 7)) then
	ie_origem_analise_w := 'A';
	nr_seq_guia_req_w := nr_seq_guia_plano_p;
elsif (ie_tipo_item_w in (5, 6, 9)) then
	ie_origem_analise_w := 'R';
	nr_seq_guia_req_w := nr_seq_requisicao_p;
end if;

ie_define_se_gera_analise_w	:= pls_obter_define_gera_analise(cd_estabelecimento_p, ie_origem_analise_w);

open C01;
loop
fetch C01 into
	nr_seq_ocorrencia_w,
	nr_seq_motivo_glosa_w,
	ie_auditoria_w,
	cd_estabelecimento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (ie_tipo_item_w	in (7, 9)) then
		select	count(1)
		into STRICT	qt_registros_w
		from	pls_ocorrencia_regra
		where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
		and	ie_tipo_ocorrencia	= 'AC'
		and	ie_aplicacao_regra	= 'A'
		and	ie_situacao		= 'A';
	elsif (ie_tipo_item_w	in (1, 2, 5, 6)) then
		select	count(1)
		into STRICT	qt_registros_w
		from	pls_ocorrencia_regra
		where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
		and	ie_tipo_ocorrencia	= 'I'
		and	ie_aplicacao_regra	= 'A'
		and	ie_situacao		= 'A';
	end if;

	if (qt_registros_w	> 0) then
		/* Verificar se existem regras de exceção para a ocorrência da regra*/

		select	count(1)
		into STRICT	qt_excecao_w
		from	pls_excecao_ocorrencia
		where	nr_seq_ocorrencia = nr_seq_ocorrencia_w
		and	ie_autorizacao = 'S'
		and	ie_tipo_item_w in (1, 2, 5, 6, 7, 9);

		if (qt_excecao_w > 0) then
			/*Na rotina pls_obter_se_regra_excecao, irá retornar "S" se caiu em alguam regra de exceção, então NÃO irá gerar a ocorrência. Se retornar "N" então não caiu em nenhuma regra*/

			if (ie_tipo_item_w in (1, 2, 5, 6, 7, 9)) then
				ie_excecao_w := pls_obter_se_regra_excecao_aut(	nr_seq_ocorrencia_w, nr_seq_requisicao_p, nr_seq_guia_plano_p,
										nr_seq_proc_p, nr_seq_mat_p, dt_emissao_w,
										ie_tipo_item_w, nr_seq_prestador_p, cd_procedimento_p,
										ie_origem_proced_p, nr_seq_material_p, nr_seq_segurado_p,
										ie_tipo_guia_p, nr_seq_plano_p, nm_usuario_p,
										qt_dias_vencido_p, nr_seq_uni_exec_w, ie_tipo_repasse_w,
										ie_carater_internacao_w);
			end if;
			if (ie_excecao_w = 'S') then
				goto final2;
			end if;
		end if;

		for r_C02_w in C02 loop
			------------------------------------------------------------------------------------------------------------VALIDAÇÕES DE PRESTADOR--------------------------------------------------------------------------------------------
			/*Se for regra de prestador inativo*/

			if (coalesce(r_C02_w.ie_prestador_inativo, 'N') = 'S') then
				if (coalesce(nr_seq_prestador_p, 0) > 0) then
					select	coalesce(max('S'), 'N')
					into STRICT	ie_situacao_prest_w
					from	pls_prestador
					where	nr_sequencia  = nr_seq_prestador_p
					and	dt_emissao_w between dt_cadastro and coalesce(dt_exclusao, dt_emissao_w);

					if (ie_situacao_prest_w = 'S') then
						goto final;
					end if;
				else
					goto final; -- Diego OS 315636 - Caso não haja um prestador informado (Como pode haver em intercambios) o sistema não considera a regra como válida.
				end if;
			end if;

			/*Obter se a regra é para uma classificacao do prestador*/

			if (coalesce(r_C02_w.nr_seq_classificacao, 0) > 0) then
				if (r_C02_w.nr_seq_classificacao <> coalesce(nr_seq_classificacao_w, 0)) then
					goto final;
				end if;
			end if;

			/*Obter se a regra é para um prestador especifico*/

			if (coalesce(r_C02_w.nr_seq_prestador, 0) > 0) then
				if (r_C02_w.nr_seq_prestador <> coalesce(nr_seq_prestador_p, 0)) then
					goto final;
				end if;
			end if;

			/*Obter se a regra é para o prestador especificado referente ao campo código*/

			if (coalesce(r_C02_w.cd_prestador, 0) > 0) then
				if (r_C02_w.cd_prestador	<> coalesce(cd_prestador_w, 'X')) then
					goto final;
				end if;
			end if;

			/*Se for uma regra para o tipo do prestador*/

			if (coalesce(r_C02_w.nr_seq_tipo_prestador, 0) > 0) then
				/*Se for é verificado se o prestador é do tipo do prestador da regra*/

				if (r_C02_w.nr_seq_tipo_prestador <> coalesce(nr_seq_tipo_prestador_w,0)) then
					goto final;
				end if;
			end if;

			/*Verificar se o prestador pertence ao grupo dos prestador*/

			if (coalesce(r_C02_w.nr_seq_grupo_prestador, 0) > 0) then
				ie_grupo_prest_w	:= pls_se_grupo_preco_prestador(r_C02_w.nr_seq_grupo_prestador, nr_seq_prestador_p, nr_seq_classificacao_w);

				if (ie_grupo_prest_w = 'N') then
					goto final;
				end if;
			end if;

			/* Tipo de relação do prestador pessoa jurídica, a qual o profissional do prestador pessoa física do PROTOCOLO está vinculado. */

			if (coalesce(r_C02_w.ie_relacao_prest_pf, 'X') <> 'X') and (ie_tipo_prest_prot_w = 'PF') then
				select	count(1)
				into STRICT	qt_registro_w
				from	pls_prestador		b,
					pls_prestador_medico	a
				where	a.nr_seq_prestador	= b.nr_sequencia
				and	a.cd_medico		= cd_medico_protocolo_w
				and	b.ie_tipo_relacao	= r_C02_w.ie_relacao_prest_pf
				and	a.ie_situacao	= 'A'
				and	trunc(coalesce(dt_emissao_w,clock_timestamp()),'dd') between trunc(coalesce(a.dt_inclusao,coalesce(dt_emissao_w,clock_timestamp())),'dd') and  fim_dia(coalesce(a.dt_exclusao,coalesce(dt_emissao_w,clock_timestamp())));

				if (qt_registro_w	= 0) then
					goto final;
				end if;
			end if;

			/*Grupo serviço*/

			if (coalesce(r_C02_w.nr_seq_grupo_servico, 0) > 0) then
				ie_grupo_servico_w	:= pls_se_grupo_preco_servico(r_C02_w.nr_seq_grupo_servico, cd_procedimento_p, ie_origem_proced_p);
				if (ie_grupo_servico_w	= 'N') then
					goto final;
				end if;
			end if;

			/* Greupo de material */

			if (coalesce(r_C02_w.nr_seq_grupo_material, 0) > 0) then
				ie_grupo_material_w	:= pls_se_grupo_preco_material(r_C02_w.nr_seq_grupo_material, nr_seq_material_p);
				if (ie_grupo_material_w	= 'N') then
					goto final;
				end if;
			end if;

			/*Verificar se a ocorrencia possui regra cadastradade exigencia de procedimento. */

			/*Caso seja Autorização / Conta*/

			if (ie_tipo_item_w in (1, 2, 3, 4, 7, 8)) then
				if (coalesce(r_C02_w.ie_exige_procedimento,'N') <> 'N') then
					/*Exige ao menos um dos procedimentos da estrutura ou o procedimento informado.*/

					if (r_C02_w.ie_exige_procedimento = 'U') then
						if (coalesce(r_C02_w.nr_seq_estrutura,0) > 0) then
							ie_estrutura_w	:= pls_obter_estrut_ao_menos_um(r_C02_w.nr_seq_estrutura, nr_seq_guia_plano_p, nr_seq_conta_p, r_C02_w.cd_procedimento, r_C02_w.ie_origem_proced, cd_procedimento_p, ie_origem_proced_p);
							/*Retorna S se deve-se gerar ocorrencia
							Retorna N se não é necessario*/
						end if;

						/*Se não é nencessário criar ocorrência*/

						if (ie_estrutura_w = 'N') then
							goto final;
						end if;
					/*Exige todos os procedimentos da estrutura, mais o procedimento se existir*/

					elsif (r_C02_w.ie_exige_procedimento = 'T') then
						ie_estrutura_w	:= 'N';

						if (coalesce(r_C02_w.nr_seq_estrutura, 0) > 0) then
							/*Se há estrutura cadastrada verifica-se se todos os procedimentos da regra estão na conta/guia*/

							ie_estrutura_w	:= pls_obter_se_estrut_ocor_todos(r_C02_w.nr_seq_estrutura, nr_seq_guia_plano_p, nr_seq_conta_p, r_C02_w.cd_procedimento, r_C02_w.ie_origem_proced, cd_procedimento_p, ie_origem_proced_p, nr_seq_material_p);
							/*Retorna S se deve-se gerar ocorrencia
							Retorna N se não é necessario*/
						end if;

						/*Não gera ocorrencia se todos os procedimentos da estrutura , mais o procedimento se existir, estiver na regra.*/

						if (ie_estrutura_w = 'N') then
							goto final;
						end if;
					/*Exige todos os procedimentos da estrutura, mais o procedimento se existir e nenhum procedimento além.*/

					elsif (r_C02_w.ie_exige_procedimento = 'S') then
						/*Verifica-se se todos os procedimentos da regra estão na conta/guia e nenhum outro procedimento*/

						ie_estrutura_w	:= pls_obter_estrut_somente_itens(r_C02_w.nr_seq_estrutura, nr_seq_guia_plano_p, nr_seq_conta_p, nr_seq_proc_p, nr_seq_mat_p, r_C02_w.cd_procedimento, r_C02_w.ie_origem_proced);
						/*Retorna S se deve-se gerar ocorrencia
						Retorna N se não é necessario*/
						if (ie_estrutura_w = 'N') then
							goto final;
						end if;
					end if;
				end if;
			end if;

			/*Verificar as regras do campos de procedimento, material e estrutura, quando o valor do campo "Exigencia de procedimento" for nunhum */

			if (coalesce(r_C02_w.ie_exige_procedimento, 'N') = 'N') then
				/*Se for regra de itens com estrutura ou procedimento informado*/

				if (ie_tipo_item_w in (1, 2, 3, 4, 5, 6)) then
					/*Se for uma regra de procedimento*/

					if (r_C02_w.cd_procedimento > 0) and (coalesce(r_C02_w.nr_seq_estrutura,0) = 0) then
						/*Verifica se o procedimento da regra consiste com o do procedimento da conta / guia*/

						if (r_C02_w.cd_procedimento <> coalesce(cd_procedimento_p,0)) or (r_C02_w.ie_origem_proced <> coalesce(ie_origem_proced_p,0)) or (coalesce(r_C02_w.nr_seq_material,0) > 0) then
							goto final;
						end if;
					/*Se for uma regra de material*/

					elsif (coalesce(r_C02_w.nr_seq_material,0) > 0) and (coalesce(r_C02_w.nr_seq_estrutura, 0) = 0)  then
						if (r_C02_w.nr_seq_material <> coalesce(nr_seq_material_p,0)) or (coalesce(r_C02_w.cd_procedimento,0) > 0) then
							goto final;
						end if;
					/*Se for regra de estrutura*/

					elsif (r_C02_w.nr_seq_estrutura > 0) and
						((coalesce(r_C02_w.cd_procedimento, 0) = 0) and (coalesce(r_C02_w.nr_seq_material, 0) = 0)) then
						/*Verifica-se se algum dos procedimentos daestrutura existe na conta / guia*/

						ie_estrutura_w	:= pls_obter_se_estrut_ocorrencia(r_C02_w.nr_seq_estrutura, cd_procedimento_p, ie_origem_proced_p, nr_seq_material_p);
						if (ie_estrutura_w = 'N') then
							/*Se não existe */

							goto final;
						end if;
					/*Se for regra de estrutura e procedimento verifica-se os dois*/

					elsif (r_C02_w.cd_procedimento > 0) and (r_C02_w.nr_seq_estrutura > 0) then
						/*Se na regra já coincidiu o procedimento com o da conta já é gerado ocorrencia sem necessidadse de verificar a estrutura.	*/

						if	(((r_C02_w.cd_procedimento <> cd_procedimento_p) or (r_C02_w.ie_origem_proced <> ie_origem_proced_p)) or (coalesce(cd_procedimento_p, 0) = 0)) then
							/*Se for regar de material ou o procedimento não consistir com a regra é verificado a estrutura.*/

							if (pls_obter_se_estrut_ocorrencia(r_C02_w.nr_seq_estrutura, cd_procedimento_p, ie_origem_proced_p, nr_seq_material_p) = 'N') then
								goto final;
							end if;
						end if;
					/*Se for regra de estrutura e material verifica-se os dois */

					elsif (coalesce(r_C02_w.nr_seq_material, 0) > 0)and (coalesce(r_C02_w.nr_seq_estrutura, 0) > 0) then
						/* Se a regra já coincidiu com o material, já é gerado a ocorrência */

						if	((r_C02_w.nr_seq_material <> nr_seq_material_p) or (coalesce(nr_seq_material_p, 0) = 0))  then
							if (pls_obter_se_estrut_ocorrencia(r_C02_w.nr_seq_estrutura, cd_procedimento_p, ie_origem_proced_p, nr_seq_material_p) = 'N') then
								goto final;
							end if;
						end if;
					end if;
				end if;
			end if;

			/* Verificar se for regra de quantidade de idade minima ou maxima da regra, sendo "A" por ano e "M" por meses*/

			if (coalesce(r_C02_w.ie_unid_tempo_idade, 'A') = 'A') then
				if	(r_C02_w.qt_idade_min IS NOT NULL AND r_C02_w.qt_idade_min::text <> '' AND r_C02_w.qt_idade_min > qt_idade_w) or
					(r_C02_w.qt_idade_max IS NOT NULL AND r_C02_w.qt_idade_max::text <> '' AND r_C02_w.qt_idade_max < qt_idade_w) then
					goto final;
				end if;
			elsif (coalesce(r_C02_w.ie_unid_tempo_idade, 'A') = 'M') then
				if	(r_C02_w.qt_idade_min IS NOT NULL AND r_C02_w.qt_idade_min::text <> '' AND r_C02_w.qt_idade_min > qt_idade_meses_w) or
					(r_C02_w.qt_idade_max IS NOT NULL AND r_C02_w.qt_idade_max::text <> '' AND r_C02_w.qt_idade_max < qt_idade_meses_w) then
					goto final;
				end if;
			end if;

			/* Verificar ser for regra de grupo de contrato, na qual se o contrato do beneficiario está dentro do grupo da regra */

			if (coalesce(r_C02_w.nr_seq_grupo_contrato, 0) <> 0) then
				select	count(1)
				into STRICT	qt_existe_grupo_w
				from	pls_preco_contrato	a
				where	a.nr_seq_grupo	= r_C02_w.nr_seq_grupo_contrato
				and (nr_seq_contrato	= nr_seq_contrato_w
				or	nr_seq_intercambio	= nr_seq_intercambio_w);
				if (qt_existe_grupo_w = 0) then
					goto final;
				end if;
			end if;

			/*Verificar se existe procedimentos simulteneo */

			if (coalesce(r_C02_w.nr_seq_simultaneo, 0) > 0) then
				if (ie_tipo_item_w in (1, 2, 7)) then
					ie_simultaneo_w := pls_obter_se_simultaneo_aut(r_C02_w.nr_seq_simultaneo, nr_seq_guia_plano_p, cd_procedimento_p,
											ie_origem_proced_p, nr_seq_material_p, nr_seq_item_w, ie_tipo_item_w,
											cd_estabelecimento_w, nm_usuario_p);
					if (ie_simultaneo_w = 'N') then
						goto final;
					end if;
				elsif (ie_tipo_item_w in (5, 6, 9)) then
					ie_simultaneo_w := pls_obter_se_simultaneo_req(r_C02_w.nr_seq_simultaneo, nr_seq_requisicao_p, cd_procedimento_p,
											ie_origem_proced_p, nr_seq_material_p, nr_seq_item_w, ie_tipo_item_w,
											cd_estabelecimento_w, nm_usuario_p);

					if (ie_simultaneo_w = 'N') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/* Verificar se a regra por quantidade liberada */

			if (coalesce(r_C02_w.qt_liberada, 0) > 0) then
				if (ie_tipo_item_w	= 9) then
					SELECT * FROM pls_obter_qtd_ocorrencia_req(	nr_seq_requisicao_p, r_C02_w.qt_tipo_quantidade, r_C02_w.ie_tipo_qtde, r_C02_w.qt_liberada, ie_qtde_liberacao_w, ds_observacao_w) INTO STRICT ie_qtde_liberacao_w, ds_observacao_w;
				else
					if (coalesce(r_C02_w.ie_valida_execucao, 'N') = 'N') then
						SELECT * FROM pls_obter_qtd_ocorrencia(	nr_seq_item_w, ie_tipo_item_w, r_C02_w.qt_liberada, r_C02_w.ie_tipo_qtde, r_C02_w.qt_tipo_quantidade, coalesce(r_C02_w.ie_tipo_pessoa_qtde,'B'), coalesce(r_C02_w.ie_regra_qtde,'N'), coalesce(r_C02_w.ie_somar_estrutura,'N'), r_C02_w.nr_seq_estrutura, nr_seq_ocorrencia_w, r_C02_w.ie_qt_lib_posterior, coalesce(r_C02_w.ie_somente_solicitacao,'N'), coalesce(r_C02_w.ie_valida_ano_contratual,'N'), coalesce(r_C02_w.ie_valida_cod_prestador,'N'), r_C02_w.ie_tipo_guia, coalesce(r_C02_w.ie_valida_local_atend,'N'), cd_estabelecimento_w, r_C02_w.nr_seq_grupo_servico, null, null, ie_qtde_liberacao_w, ds_observacao_w) INTO STRICT ie_qtde_liberacao_w, ds_observacao_w;
					else
						SELECT * FROM pls_obter_se_qtd_ocor_exec(	nr_seq_item_w, ie_tipo_item_w, r_C02_w.qt_liberada, r_C02_w.ie_tipo_qtde, r_C02_w.qt_tipo_quantidade, coalesce(r_C02_w.ie_tipo_pessoa_qtde,'B'), coalesce(r_C02_w.ie_regra_qtde,'N'), coalesce(r_C02_w.ie_somar_estrutura,'N'), r_C02_w.nr_seq_estrutura, nr_seq_ocorrencia_w, r_C02_w.ie_qt_lib_posterior, coalesce(r_C02_w.ie_somente_solicitacao,'N'), coalesce(r_C02_w.ie_valida_ano_contratual,'N'), coalesce(r_C02_w.ie_valida_cod_prestador,'N'), r_C02_w.ie_tipo_guia, coalesce(r_C02_w.ie_valida_local_atend,'N'), cd_estabelecimento_w, ie_qtde_liberacao_w, ds_observacao_w) INTO STRICT ie_qtde_liberacao_w, ds_observacao_w;
					end if;
				end if;

				if (ie_qtde_liberacao_w = 'S') then
					goto final;
				end if;
			end if;

			/* Verificar se o CID se encaixa na regra */

			if (coalesce(r_C02_w.cd_doenca_cid, 'X') <> 'X') then
				ie_cid_w 	:= pls_obter_se_cid_ocorrencia(nr_seq_requisicao_p,nr_seq_guia_plano_p,nr_seq_conta_p,r_C02_w.cd_doenca_cid);
				if (ie_cid_w = 'N') then
					goto final;
				end if;
			end if;

			/* Verificar se exige guia referência e a mesma não foi informada */

			if (coalesce(r_C02_w.ie_guia_referencia,'N') = 'S') then
				if (coalesce(cd_guia_referencia_w,'X') <> 'X') then
					goto final;
				end if;
			end if;

			/* Francisco - 07/12/2010 -OS 266305 */

			if (r_C02_w.ie_afastamento_cooperado = 'S') then
				if (ie_tipo_item_w in (7, 9)) then
					select	count(1)
					into STRICT	qt_registro_w
					from	pls_cooperado_ausencia a,
						pls_cooperado b
					where	a.nr_seq_cooperado	= b.nr_sequencia
					and	b.cd_pessoa_fisica	= cd_medico_solicitante_w
					and	dt_emissao_w between a.dt_inicio and coalesce(a.dt_fim,dt_emissao_w);

					if (qt_registro_w = 0) then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/*Verificar se é uma regra de exigência de indicação clinica*/

			if (coalesce(r_C02_w.ie_exige_indicacao_clinica, 'N') = 'S') then
				if (ie_tipo_item_w in (1, 2, 3, 4, 7, 8)) then
					if (ie_tipo_item_w in (1, 2, 7)) then
						select	count(1)
						into STRICT	qt_indicacao_clinica_w
						from	pls_guia_plano
						where	nr_sequencia = nr_seq_guia_plano_p
						and	coalesce(ds_indicacao_clinica::text, '') = '';
					end if;
					/*Se haver uma indicação clinica não é gerado ocorrência*/

					if (qt_indicacao_clinica_w = 0) then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/*Regra para verificar a quantidade maxima de diarias que a guia de autorização podera ter */

			if (coalesce(r_C02_w.qt_diarias_permitida,0) > 0) and (ie_tipo_item_w = 1) then
				ie_diarias_permitida_w	:= pls_obter_se_diarias_permitida(nr_seq_guia_plano_p,null,null,r_C02_w.qt_diarias_permitida);
				if (ie_diarias_permitida_w = 'S') then
					goto final;
				end if;
			end if;

			/*Se for uma regra de valor minimo e do tipo Autorização/Conta */

			if (coalesce(r_C02_w.vl_minimo, 0) > 0) then
				if (ie_tipo_item_w	= 7) then
					/*A rotina irá verificar se a soma dos valores calculados é maior que a regra de valor minimo  e entçao irá retornar 'S'*/

					ie_valor_minimo_w := pls_obter_se_valor_calculado(null, nr_seq_guia_plano_p, r_C02_w.vl_minimo, null);
					if (ie_valor_minimo_w = 'N') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/*Se for regra de concorrente*/

			if (coalesce(r_C02_w.nr_seq_concorrente, 0) > 0) then
				if (ie_tipo_item_w	in (5, 9, 1, 7)) then
					if (ie_tipo_item_w	in (5, 9)) then
						ie_gerar_oc_concorrente_w := pls_gerar_oc_concorrente_req(r_C02_w.nr_seq_concorrente, cd_procedimento_p, ie_origem_proced_p, nr_seq_requisicao_p, coalesce(r_C02_w.ie_concorrente_anterior,'N'), cd_estabelecimento_w, nm_usuario_p, ie_gerar_oc_concorrente_w);
					elsif (ie_tipo_item_w	in (1, 7)) then
						ie_gerar_oc_concorrente_w := pls_gerar_oc_concorrente_guia(r_C02_w.nr_seq_concorrente, cd_procedimento_p, ie_origem_proced_p, nr_seq_guia_plano_p, coalesce(r_C02_w.ie_concorrente_anterior,'N'), cd_estabelecimento_w, nm_usuario_p, ie_gerar_oc_concorrente_w);
					end if;

					if (coalesce(ie_gerar_oc_concorrente_w, 'N') = 'N') then
						goto final;
					end if;

					ie_gerar_oc_concorrente_w	:= '';
				else
					goto final;
				end if;
			end if;

			/*Se for regra com Regra CID X Tipo internação informado*/

			if (r_C02_w.nr_seq_regra_cid_int IS NOT NULL AND r_C02_w.nr_seq_regra_cid_int::text <> '')  then
				if (ie_tipo_item_w = 7) then
					ie_gera_ocorr_cid_intern_w	:= pls_obter_se_regra_cid_intern(nr_seq_guia_plano_p, r_C02_w.nr_seq_regra_cid_int,null );
				else
					goto final;
				end if;
				if (ie_gera_ocorr_cid_intern_w = 'N') then
					goto final;
				end if;
			end if;

			/*Se for uma regra de quantidades de dias da regra de prestador */

			if (coalesce(r_C02_w.qt_dias_regra_prest,0) = 0) then
				/*Se for uma regra com Especialidade médica informada*/

				if (r_C02_w.cd_especialidade_medica IS NOT NULL AND r_C02_w.cd_especialidade_medica::text <> '') then
					if (ie_tipo_item_w	in (1, 2, 7))  then
						select	coalesce(cd_especialidade,0)
						into STRICT	cd_especialidade_w
						from	pls_guia_plano
						where	nr_sequencia	= nr_seq_guia_plano_p;

						if (r_C02_w.cd_especialidade_medica	<> cd_especialidade_w) then
							goto final;
						end if;
					elsif (ie_tipo_item_w	in (5, 6, 9))  then
						select	coalesce(cd_especialidade,0)
						into STRICT	cd_especialidade_w
						from	pls_requisicao
						where	nr_sequencia	= nr_seq_requisicao_p;

						if (r_C02_w.cd_especialidade_medica	<> cd_especialidade_w) then
							goto final;
						end if;
					else
						goto final;
					end if;
				end if;
			else
				ie_regra_qt_dias_prest_w := pls_obter_se_dias_regra_prest(	nr_seq_requisicao_p, null, null, nr_seq_item_w, ie_tipo_item_w, r_C02_w.cd_especialidade_medica, r_C02_w.qt_dias_regra_prest, coalesce(r_C02_w.ie_valida_execucao,'N'), null, null, nm_usuario_p, ie_regra_qt_dias_prest_w);

				if (ie_regra_qt_dias_prest_w = 'N') then
					goto final;
				end if;
			end if;

			/*Se for regra com Condições CPT informada*/

			if (r_C02_w.ie_validacao_cpt IS NOT NULL AND r_C02_w.ie_validacao_cpt::text <> '') then
				if (ie_tipo_item_w	= 1) then
					ie_gerar_ocorr_cpt_w	:= pls_obter_se_ocorrencia_cpt(nr_seq_item_w, r_C02_w.ie_validacao_cpt, null, null);

					if (ie_gerar_ocorr_cpt_w = 'N') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/*Regra de dias de cobrança prevista */

			if (coalesce(r_C02_w.qt_dias_cobranca_prev,0) > 0) then
				if (ie_tipo_item_w = 7) then
					ie_dias_cobranca_prec_w := pls_obter_se_guia_cobra_prev(nr_seq_guia_plano_p, nr_seq_segurado_p, r_C02_w.qt_dias_cobranca_prev);

					if (ie_dias_cobranca_prec_w = 'N') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			if (coalesce(r_C02_w.ie_consiste_qt_diaria, 'N') = 'S') then
				if (ie_tipo_item_w = 1) and  /*Alexandre 14/06/2011*/
					(ie_tipo_guia_p in ('1', '8')) then
					ie_diaria_permitida_w := pls_obter_se_diarias_permitida(nr_seq_guia_plano_p,null,null,coalesce(qt_dia_solicitado_w,0));
					if (ie_diaria_permitida_w = 'S') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			if (coalesce(r_C02_w.ie_internacao_obstetrica,'N') = 'S') then
				if (ie_obstetrico_informado_w = 'S') then
					goto final;
				end if;
			end if;

			/*Se for uma regra com o campo 'Exige senha estipulante' informado*/

			if (coalesce(r_C02_w.ie_exige_senha_estipulante, 'N') = 'S') then
				if (ie_tipo_item_w	in (1, 2, 5, 6, 7, 9)) then
					ie_regra_senha_estip_w := pls_verifica_regra_senha_estip(	nr_seq_guia_plano_p, nr_seq_requisicao_p, nr_seq_segurado_p, nr_contrato_w, nm_usuario_p, ie_regra_senha_estip_w);

					if (ie_regra_senha_estip_w	= 'N') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/*Se for uma regra com o campo 'Possuí liminar' informado, o tratamento é feito após a consistência da requisição no Delphi*/

			if (coalesce(r_C02_w.ie_possui_liminar, 'N') = 'S')  then
				goto final;
			end if;

			/*Se for uma regra com o contrato informado, para gerar análise dos contratantes do mesmo (Caso excluiso da Unimed Rio Preto)*/

			if	((coalesce(r_C02_w.nr_contrato, 0) <> 0) or (coalesce(r_C02_w.nr_seq_intercambio, 0) <> 0) or (coalesce(r_C02_w.nr_seq_grupo_contrato, 0) <> 0)) and (coalesce(r_C02_w.ie_autorizacao_previa_estip, 'N') = 'S') then
				if (ie_tipo_item_w	in (5, 6, 9)) then
					if (coalesce(r_C02_w.nr_seq_grupo_contrato, 0) <> 0) then
						select	count(1)
						into STRICT	qt_existe_grupo_w
						from	pls_preco_contrato	a
						where	a.nr_seq_grupo		= r_C02_w.nr_seq_grupo_contrato
						and (nr_seq_contrato	= pls_obter_seq_contrato(nr_contrato_w)
						or	nr_seq_intercambio	= nr_seq_intercambio_w);
					end if;

					if	((nr_contrato_w	= r_C02_w.nr_contrato) or (nr_seq_intercambio_w = r_C02_w.nr_seq_intercambio) or (qt_existe_grupo_w > 0))then
						ie_gera_analise_estip_ext_w := pls_gerar_analise_extern_estip(	nr_seq_ocorrencia_w, nr_seq_requisicao_p, r_C02_w.nr_contrato, r_C02_w.nr_seq_intercambio, r_C02_w.nr_seq_grupo_contrato, nm_usuario_p, ie_gera_analise_estip_ext_w);

						if (ie_gera_analise_estip_ext_w	= 'N') then
							goto final;
						end if;
					else
						goto final;
					end if;
				else

					goto final;
				end if;
			end if;
			/*Fim*/

			/*Se for uma regra com o campo "Exige procedimento liberado para pacotes" informado*/

			if (coalesce(r_C02_w.ie_restringe_pacote, 'N')	= 'S') then
				if (ie_tipo_item_w	= 7) then
					if (pls_verifica_se_exige_proc_lib(nr_seq_guia_plano_p,null,null) = 'N') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/* Caso for uma regra com o campo "Utiliza OPME" informado, será verificado item por item por item para que seja gerada uma ocorrência para cada item*/

			if (coalesce(r_C02_w.ie_utiliza_opme , 'N') = 'S') then
				if (ie_tipo_item_w	= 5) then
					select	count(1)
					into STRICT	qt_proc_util_opme_w
					from	pls_requisicao_proc
					where	nr_sequencia	= nr_seq_proc_p
					and	ie_utiliza_opme	= 'S';

					if (qt_proc_util_opme_w = 0) then
						goto final;
					end if;
				elsif (ie_tipo_item_w	= 6) then
					select	count(1)
					into STRICT	qt_mat_util_opme_w
					from	pls_requisicao_mat
					where	nr_sequencia	= nr_seq_mat_p
					and	ie_utiliza_opme	= 'S';

					if (qt_mat_util_opme_w = 0) then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/* Caso seja uma regra com um dos campos Digital inválida ou Digital não informada ou Digital não cadastrada, informados */

			if (coalesce(r_C02_w.ie_digital_invalida, 'N') = 'S') then
				if (ie_tipo_item_w	= 9) then
					if (coalesce(ie_tipo_valid_digital_w, 0)	<> 1) then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			if (coalesce(r_C02_w.ie_digital_obrigatoria, 'N') = 'S') then
				if (ie_tipo_item_w	= 9) then
					if (coalesce(ie_tipo_valid_digital_w, 0)	<> 2) then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			if (coalesce(r_C02_w.ie_digital_cadastrada, 'N') = 'S') then
				if (ie_tipo_item_w	= 9) then
					if (coalesce(ie_tipo_valid_digital_w, 0)	<> 3) then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;
			/* Fim */

			/*Caso seja uma regra com o campo GAT setado*/

			if (coalesce(r_C02_w.ie_tipo_gat, 'N') = 'S') then
				if (ie_tipo_item_w	in (5, 6, 9)) then
					if (coalesce(ie_tipo_gat_w, 'N') <> 'S') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/*Se for uma regra de horas inicial/final , irá verificar se a data de solicitação (guia), ou data de requsição (requisição), está dentro do horario da regra  */

			if	((r_C02_w.hr_inicial IS NOT NULL AND r_C02_w.hr_inicial::text <> '') or (r_C02_w.hr_final IS NOT NULL AND r_C02_w.hr_final::text <> ''))then
				if (r_C02_w.hr_inicial IS NOT NULL AND r_C02_w.hr_inicial::text <> '') and (r_C02_w.hr_final IS NOT NULL AND r_C02_w.hr_final::text <> '') then
					ie_hora_periodo_w := obter_se_datas_entre_periodo(to_date(to_char(r_C02_w.hr_inicial,'hh24:mi:ss'),'hh24:mi:ss'),
									to_date(to_char(r_C02_w.hr_final,'hh24:mi:ss'),'hh24:mi:ss'),
									to_date(to_char(dt_emissao_w,'hh24:mi:ss'),'hh24:mi:ss'),
									to_date(to_char(dt_emissao_w,'hh24:mi:ss'),'hh24:mi:ss'));
					if (ie_hora_periodo_w = 'N') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			/* Regra de migração da Rio Preto */

			if (coalesce(r_C02_w.ie_valida_migracao, 'N') = 'S') then
				if (ie_tipo_item_w	= 9) then
					if (coalesce(ie_analise_sistema_ant_w, 'N') = 'N') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;
			/* */

			/* Regra para recém nascido */

			if (coalesce(r_C02_w.ie_recem_nascido, 'N') = 'S') or (coalesce(r_C02_w.qt_dias_recem_nasc,0) <> 0) then
				if (ie_tipo_item_w	in (1, 2, 5, 6, 7, 9)) then
					ie_ocorr_recem_nasc_w	:= pls_obter_se_ocorr_recem_nasc(nr_seq_guia_plano_p, nr_seq_requisicao_p, null, r_C02_w.ie_recem_nascido, r_C02_w.qt_dias_recem_nasc);
					if (ie_ocorr_recem_nasc_w	= 'N') then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;
			/* */

			/* Se for uma regra pelo produto do beneficiário */

			if (coalesce(r_C02_w.nr_seq_plano, 0) <> 0) then
				if (ie_tipo_item_w	in (7, 9)) then
					if (nr_seq_plano_w	<> r_C02_w.nr_seq_plano) then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;

			if (r_C02_w.nr_seq_regra_atend_cart IS NOT NULL AND r_C02_w.nr_seq_regra_atend_cart::text <> '') then
				ie_glosar_cart_w := pls_consistir_regra_atend_cart(nr_seq_segurado_p, r_C02_w.nr_seq_regra_atend_cart, ie_glosar_cart_w);

				if (ie_glosar_cart_w = 'N') then
					goto final;
				end if;
			end if;

			if (coalesce(ie_auditoria_w, 'S') = 'S') then
				ie_ocorrencia_w	:= 'S';
			end if;

			nr_seq_ocorrencia_benef_w := pls_inserir_ocorrencia(nr_seq_segurado_p, nr_seq_ocorrencia_w, nr_seq_requisicao_p, nr_seq_guia_plano_p, nr_seq_conta_p, nr_seq_proc_p, nr_seq_mat_p, r_C02_w.nr_sequencia, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_w, ie_tipo_item_w, cd_estabelecimento_w, 'N', null, nr_seq_ocorrencia_benef_w, null, null, null, null);

			nr_seq_grupo_contrato_w := r_C02_w.nr_seq_grupo_contrato;
			exit;

			<<final>>
			qt_ocorrencia_w	:= 0; /* Deve existir uma linha após o <<Final>> */
		end loop;
	end if;
	<<final2>>
	qt_ocorrencia_w	:= 0;
	end;
end loop;
close C01;
/*item*/

if (ie_tipo_item_w in (1, 2, 3, 4, 5, 6)) then
	/* Se for 1 ou 2 é de guia - autorização */

	if (ie_tipo_item_w in (1, 2)) then
		ie_autorizacao_w	:= 'S';

		if (coalesce(nr_seq_proc_p, 0) <> 0) then
			select	a.vl_procedimento,
				'N',
				coalesce(a.dt_liberacao, a.dt_atualizacao),
				a.qt_solicitada
			into STRICT	vl_procedimento_w,
				ie_existe_medico_w,
				dt_item_w,
				qt_item_w
			from	pls_guia_plano_proc a
			where	a.nr_sequencia	= nr_seq_proc_p;
		elsif (coalesce(nr_seq_mat_p, 0) <> 0) then
			select	a.vl_material,
				'N',
				coalesce(a.dt_liberacao,a.dt_atualizacao),
				a.qt_solicitada
			into STRICT	vl_item_w,
				ie_existe_medico_w,
				dt_item_w,
				qt_item_w
			from	pls_guia_plano_mat	a
			where	a.nr_sequencia	= nr_seq_mat_p;
		end if;
	elsif (ie_tipo_item_w in (5, 6)) then
		ie_autorizacao_w	:= 'S';

		if (coalesce(nr_seq_proc_p, 0) <> 0) then
			select	a.vl_procedimento,
				'N',
				a.dt_atualizacao,
				a.qt_solicitado
			into STRICT	vl_procedimento_w,
				ie_existe_medico_w,
				dt_item_w,
				qt_item_w
			from	pls_requisicao_proc a
			where	a.nr_sequencia	= nr_seq_proc_p;
		elsif (coalesce(nr_seq_mat_p, 0) <> 0) then
			select	a.vl_material,
				'N',
				a.dt_atualizacao,
				a.qt_solicitado
			into STRICT	vl_item_w,
				ie_existe_medico_w,
				dt_item_w,
				qt_item_w
			from	pls_requisicao_mat	a
			where	a.nr_sequencia	= nr_seq_mat_p;
		end if;
	end if;

	ie_ocorrencia_item_w := pls_gerar_ocorrencia_item_aut(ie_tipo_item_w, ie_conta_w, cd_procedimento_p, ie_origem_proced_p, nr_seq_material_p, null, ie_autorizacao_w, 'N', nr_seq_segurado_p, nr_seq_requisicao_p, nr_seq_guia_plano_p, null, nr_seq_proc_p, nr_seq_mat_p, ie_existe_medico_w, nr_seq_grupo_contrato_w, dt_item_w, qt_item_w, cd_estabelecimento_p, nm_usuario_p, ie_ocorrencia_item_w, null, null);

	if (ie_ocorrencia_item_w = 'S') then
		ie_ocorrencia_w	:= ie_ocorrencia_item_w;
	end if;
end if;

if (ie_ocorrencia_w = 'N') and (ie_tipo_item_w in (1, 2, 5, 6)) then
	ie_ocorrencia_w := pls_obter_se_item_glosa_ocorr(nr_seq_guia_plano_p, nr_seq_requisicao_p, nr_seq_item_w, ie_tipo_item_w);
end if;

if (ie_ocorrencia_w = 'N') then
	ie_glosa_w	:= pls_obter_se_item_glosa(nr_seq_item_w,ie_tipo_item_w);
else
	/* Se a veriavel "ie_define_se_gera_analise_w", estiver com o valor "N", então irá verificar se para o item existe glosa definitiva, e se existir  então irá negar o item*/

	if (ie_define_se_gera_analise_w = 'N') and (ie_tipo_item_w in (1, 2, 5, 6)) then
		ie_ocorrencia_w := pls_obter_se_gerar_analise(nr_seq_guia_req_w,  nr_seq_item_w, ie_tipo_item_w);
		--ie_glosa_w := decode(ie_ocorrencia_w,'N','S','N');
		select	CASE WHEN ie_ocorrencia_w='N' THEN  'S'  ELSE 'N' END
		into STRICT	ie_glosa_w
		;
	end if;
end if;

if (ie_ocorrencia_w = 'S') then
	ie_status_w := 'A';
elsif (ie_ocorrencia_w = 'N') and (ie_glosa_w = 'S') then
	ie_status_w := 'N';
end if;

if (ie_status_w	<> 'X') then
	if (ie_tipo_item_w	= 1) then
		update	pls_guia_plano_proc
		set	ie_status	= ie_status_w,
			qt_autorizada	= CASE WHEN ie_status_w='N' THEN 0  ELSE qt_autorizada END ,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_proc_p;
	elsif (ie_tipo_item_w	= 2) then
		update	pls_guia_plano_mat
		set	ie_status	= ie_status_w,
			qt_autorizada	= CASE WHEN ie_status_w='N' THEN 0  ELSE qt_autorizada END ,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_mat_p;
	elsif (ie_tipo_item_w	= 5) then
		update	pls_requisicao_proc
		set	ie_status	= ie_status_w,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_proc_p;
	elsif (ie_tipo_item_w	= 6) then
		update	pls_requisicao_mat
		set	ie_status	= ie_status_w,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_seq_mat_p;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_ocorrencia_aut ( nr_seq_segurado_p bigint, nr_seq_requisicao_p bigint, nr_seq_guia_plano_p bigint, nr_seq_conta_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_material_p bigint, ie_tipo_guia_p text, nr_seq_plano_p bigint, qt_dias_vencido_p bigint, ie_tipo_pagador_p text, nr_seq_prestador_p bigint, nr_seq_tipo_atendimento_p bigint, ie_tipo_ocorrencia_p text, dt_procedimento_p timestamp, ie_origem_ocorrencia_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_congenere_p bigint, ie_cheque_devolvido_p text, ds_parametro2_p text) FROM PUBLIC;

