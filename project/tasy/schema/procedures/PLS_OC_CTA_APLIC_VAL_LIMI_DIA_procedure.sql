-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_aplic_val_limi_dia ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Aplicar a validação com relação a quantidade de dias em internação a qual a
	limitação permite ao beneficiário executar.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_sql_w			varchar(4000);
ds_observacao_w			varchar(4000);
ds_itens_util_w			varchar(4000);

dados_limitacao_w		pls_tipos_ocor_pck.dados_limitacao;
dados_restricao_w		pls_tipos_ocor_pck.dados_restricao_select;
dados_segurado_w		pls_tipos_ocor_pck.dados_benef;
dados_periodo_exec_w		pls_tipos_ocor_pck.t_datas_periodo_limit_row;

cursor_w			sql_pck.t_cursor;
dado_bind_w			sql_pck.t_dado_bind;

dados_tabela_aux_w		pls_tipos_ocor_pck.dados_tabela_aux_val_limit;
dados_conta_proc_w		pls_tipos_ocor_pck.dados_conta_proc;
dados_tb_selecao_w		pls_tipos_ocor_pck.dados_table_selecao_ocor;

qt_proc_util_total_w		pls_conta_proc_v.qt_procedimento%type;
qt_proc_selecao_w		integer;
i				integer;

-- Obter os beneficiários e seus dados das contas que estão na tabela de seleção. Está sendo utilizado o distinct para que seja passado uma vez apenas para cada beneficiário pois o processo
-- da validação é caro e quanto menos for executado melhor
c_selecao CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type) FOR
	SELECT	distinct
		b.nr_seq_segurado,
		c.nr_seq_plano,
		c.nr_seq_contrato,
		c.nr_seq_intercambio,
		d.dt_procedimento,
		c.dt_contrato,
		c.dt_contratacao,
		c.dt_primeira_utilizacao,
		c.nr_seq_titular
	from	pls_oc_cta_selecao_ocor_v	a,
		pls_conta_ocor_v		b,
		pls_segurado_conta_v		c,
		pls_conta_proc_ocor_v		d
	where	a.nr_id_transacao	= nr_id_transacao_pc
	and	a.ie_valido		= 'S'
	and	a.ie_tipo_registro	= 'P'
	and	b.nr_sequencia		= a.nr_seq_conta
	and	b.ie_tipo_guia		= '5'
	and	c.nr_sequencia		= b.nr_seq_segurado
	and	d.nr_seq_conta		= a.nr_seq_conta
	and	d.nr_sequencia		= a.nr_seq_conta_proc
	and	d.ie_tipo_despesa	= '3';

-- Obter as limitações a qual o beneficiário está atrelado, seja pelo plano ou pelo contrato de intercâmbio.
-- Está sendo utilizado o union e buscado todas as limitações do beneficiário para evitar replicação de código
-- e para que passe e verifique cada limitação apenas uma vez.
c_limitacao CURSOR(	nr_seq_contrato_pc	pls_segurado_conta_v.nr_seq_contrato%type,
		nr_seq_plano_pc		pls_segurado_conta_v.nr_seq_plano%type,
		nr_seq_intercambio_pc	pls_segurado_conta_v.nr_seq_intercambio%type) FOR
	SELECT	a.nr_sequencia	nr_seq_limitacao,
		a.nr_seq_tipo_limitacao,
		a.qt_dia_internacao,
		a.ie_periodo,
		a.qt_meses_intervalo,
		a.ie_tipo_periodo,
		b.ie_tipo_incidencia
	from	pls_limitacao		a,
		pls_tipo_limitacao	b
	where	a.nr_seq_contrato	= nr_seq_contrato_pc
	and	((coalesce(a.nr_seq_plano_contrato::text, '') = '') or (a.nr_seq_plano_contrato = nr_seq_plano_pc))
	and	(a.qt_dia_internacao IS NOT NULL AND a.qt_dia_internacao::text <> '')
	and	b.nr_sequencia		= a.nr_seq_tipo_limitacao
	and	b.ie_situacao		= 'A'
	
union

	SELECT	a.nr_sequencia	nr_seq_limitacao,
		a.nr_seq_tipo_limitacao,
		a.qt_dia_internacao,
		a.ie_periodo,
		a.qt_meses_intervalo,
		a.ie_tipo_periodo,
		b.ie_tipo_incidencia
	from	pls_limitacao		a,
		pls_tipo_limitacao	b
	where	a.nr_seq_plano		= nr_seq_plano_pc
	and	(a.qt_dia_internacao IS NOT NULL AND a.qt_dia_internacao::text <> '')
	and	b.nr_sequencia		= a.nr_seq_tipo_limitacao
	and	b.ie_situacao		= 'A'
	
union

	select	a.nr_sequencia	nr_seq_limitacao,
		a.nr_seq_tipo_limitacao,
		a.qt_dia_internacao,
		a.ie_periodo,
		a.qt_meses_intervalo,
		a.ie_tipo_periodo,
		b.ie_tipo_incidencia
	from	pls_limitacao		a,
		pls_tipo_limitacao	b
	where	a.nr_seq_intercambio	= nr_seq_intercambio_pc
	and	(a.qt_dia_internacao IS NOT NULL AND a.qt_dia_internacao::text <> '')
	and	b.nr_sequencia		= a.nr_seq_tipo_limitacao
	and	b.ie_situacao		= 'A';

-- Obter os itens que estão na tabela auxiliar. Será passado por último para os itens que estão na tabela de seleção para que seja inserida ocorrência apenas para estes itens.
c_tabela_aux CURSOR(	nr_id_transacao_pc		pls_oc_cta_val_limit_aux.nr_id_transacao%type,
			nr_seq_segurado_pc		pls_oc_cta_val_limit_aux.nr_seq_segurado%type,
			nr_seq_tipo_limitacao_pc	pls_oc_cta_val_limit_aux.nr_seq_tipo_limitacao%type) FOR
	SELECT	a.nr_seq_conta,
		a.nr_seq_conta_proc,
		a.qt_item,
		a.ie_selecao,
		pls_tipos_ocor_pck.obter_sequencia_selecao(a.nr_seq_conta_proc, null, a.nr_seq_conta,
					nr_id_transacao_p, null, null, dados_regra_p.ie_excecao, 'V') nr_seq_selecao
	from	pls_oc_cta_val_limit_aux	a
	where	a.nr_id_transacao	= nr_id_transacao_pc
	and	a.nr_seq_segurado	= nr_seq_segurado_pc
	and	a.nr_seq_tipo_limitacao	= nr_seq_tipo_limitacao_pc
	order by a.ie_selecao;
BEGIN

-- Aqui serão buscados os beneficiários das contas que estão na tabela de seleção.
for	r_c_selecao_w in c_selecao(nr_id_transacao_p) loop

	-- Atualizar os dados do beneficiário atual.
	dados_segurado_w.nr_sequencia		:= r_c_selecao_w.nr_seq_segurado;
	dados_segurado_w.nr_seq_contrato	:= r_c_selecao_w.nr_seq_contrato;
	dados_segurado_w.nr_seq_plano		:= r_c_selecao_w.nr_seq_plano;
	dados_segurado_w.nr_seq_intercambio	:= r_c_selecao_w.nr_seq_intercambio;
	dados_segurado_w.dt_adesao		:= r_c_selecao_w.dt_contratacao;
	dados_segurado_w.dt_contrato		:= r_c_selecao_w.dt_contrato;
	dados_segurado_w.dt_primeira_utilizacao	:= r_c_selecao_w.dt_primeira_utilizacao;
	dados_segurado_w.nr_seq_titular		:= r_c_selecao_w.nr_seq_titular;

	-- Para cada beneficiário serão buscadas as limitações contratuais do plano e do contrato do beneficiário que for beneficiário da operadora, para intercâmbio
	-- será feito de outra forma pois devido ao campo ser diferente então temos mais facilidade buscando o intercâmbio em outro momento, apenas quando ele for
	-- informado.
	for	r_c_limitacao_w in c_limitacao(r_c_selecao_w.nr_seq_contrato, r_c_selecao_w.nr_seq_plano, r_c_selecao_w.nr_seq_intercambio) loop

		pls_tipos_ocor_pck.gerencia_tabela_aux_val_limit( 'T', null, nr_id_transacao_p, dados_tabela_aux_w, nm_usuario_p);

		-- Obter os dados da limitação atual para realizar as consistências devidas.
		dados_limitacao_w.nr_sequencia		:= r_c_limitacao_w.nr_seq_limitacao;
		dados_limitacao_w.nr_seq_tipo_limitacao	:= r_c_limitacao_w.nr_seq_tipo_limitacao;
		dados_limitacao_w.qt_permitida		:= r_c_limitacao_w.qt_dia_internacao;
		dados_limitacao_w.ie_periodo		:= r_c_limitacao_w.ie_periodo;
		dados_limitacao_w.qt_meses_intervalo	:= r_c_limitacao_w.qt_meses_intervalo;
		dados_limitacao_w.ie_tipo_periodo	:= r_c_limitacao_w.ie_tipo_periodo;
		dados_limitacao_w.ie_tipo_incidencia	:= r_c_limitacao_w.ie_tipo_incidencia;

		-- Verificar se o tipo de período informado é referente a datas.
		if (dados_limitacao_w.ie_tipo_periodo in ('D','S','M')) then

			-- Verificar o tipo de período informado na regra para obter o período de verificação da regra. Através das datas obtidas nesta seção serão buscados os
			-- procedimentos executados pelo benenficiário para verificar se ultrapassa a quantidade permitida pelo contrato.
			dados_periodo_exec_w := pls_tipos_ocor_pck.obter_periodo_exec_limit(	dados_limitacao_w,
												dados_segurado_w,
												r_c_selecao_w.dt_procedimento,
												nm_usuario_p);

			-- Atualiza os dados da limitacao com a informação de começo e fim de período.
			dados_limitacao_w.dt_inicio_periodo	:= dados_periodo_exec_w.dt_inicio;
			dados_limitacao_w.dt_fim_periodo	:= dados_periodo_exec_w.dt_fim;

			-- Se não tiver encontrado as datas verifica procedimentos apenas na mesma data do procedimento.
			if (coalesce(dados_limitacao_w.dt_inicio_periodo::text, '') = '') then

				dados_limitacao_w.dt_inicio_periodo := trunc(r_c_selecao_w.dt_procedimento);
			end if;

			if (coalesce(dados_limitacao_w.dt_fim_periodo::text, '') = '') then

				dados_limitacao_w.dt_fim_periodo := fim_dia(r_c_selecao_w.dt_procedimento);
			end if;
		end if;

		dado_bind_w.delete;

		dado_bind_w := pls_oc_cta_obter_restr_val_lim(dados_segurado_w, nr_id_transacao_p, dados_regra_p, dados_limitacao_w, 'P', null, null, dado_bind_w);

		-- Montar o select que busca os procedimentos executados.
		ds_sql_w :=	'select	conta.nr_sequencia, ' || pls_tipos_ocor_pck.enter_w ||
				'	proc.nr_sequencia, ' || pls_tipos_ocor_pck.enter_w ||
				'	proc.qt_ok, ' || pls_tipos_ocor_pck.enter_w ||
				'	proc.nr_seq_proc_ref, ' || pls_tipos_ocor_pck.enter_w ||
				'	proc.ie_status ' || pls_tipos_ocor_pck.enter_w ||
				'from	pls_conta_ocor_v	conta, ' || pls_tipos_ocor_pck.enter_w ||
				'	pls_conta_proc_ocor_v	proc ' || pls_tipos_ocor_pck.enter_w ||
				'where	1 = 1 ' ||
				dados_restricao_w.ds_restricao_conta || pls_tipos_ocor_pck.enter_w ||
				'and	proc.nr_seq_conta	= conta.nr_sequencia ' || pls_tipos_ocor_pck.enter_w ||
				'and	proc.ie_tipo_despesa	= ''3'' ' ||
				dados_restricao_w.ds_restricao_proc || pls_tipos_ocor_pck.enter_w ||
				'order by proc.dt_procedimento ';
		begin
			-- Abrir um novo cursor
			dado_bind_w := sql_pck.executa_sql_cursor(ds_sql_w, dado_bind_w);

			loop
				fetch cursor_w into
					dados_conta_proc_w.nr_seq_conta, dados_conta_proc_w.nr_seq_conta_proc,
					dados_conta_proc_w.qt_procedimento, dados_conta_proc_w.nr_seq_proc_ref,
					dados_conta_proc_w.ie_status;
				EXIT WHEN NOT FOUND; /* apply on cursor_w */

				-- Aqui está sendo verificado se o procedimento está na tabela de seleção. Caso esteja então flega o campo
				-- IE_SELECAO da tabela auxiliar para S para que após este processo seja ordenado e verificado se
				-- pode ser lançada a ocorrência para este procedimento ou não.
				select	count(1)
				into STRICT	qt_proc_selecao_w
				from	pls_oc_cta_selecao_ocor_v
				where	nr_id_transacao		= nr_id_transacao_p
				and	ie_valido		= 'S'
				and	ie_tipo_registro	= 'P'
				and	nr_seq_conta		= dados_conta_proc_w.nr_seq_conta
				and	nr_seq_conta_proc	= dados_conta_proc_w.nr_seq_conta_proc;

				-- Verificar se está na tabela de selecao para atualizar o campo IE_SELECAO da tabela auxiliar.
				if (qt_proc_selecao_w = 0) then

					dados_tabela_aux_w.ie_selecao := 'N';
				else
					dados_tabela_aux_w.ie_selecao := 'S';
				end if;

				-- Gravar os dados selecionados para gravar na tabela auxiliar. Todo o processo de gravação ou atualização será feito na procedure
				-- GERENCIA_TABELA_AUX_VAL_LIMIT da PLS_TIPOS_OCOR_PCK.
				dados_tabela_aux_w.nr_seq_segurado		:= r_c_selecao_w.nr_seq_segurado;
				dados_tabela_aux_w.nr_seq_tipo_limitacao	:= dados_limitacao_w.nr_seq_tipo_limitacao;
				dados_tabela_aux_w.nr_id_transacao		:= nr_id_transacao_p;
				dados_tabela_aux_w.ie_liberado			:= 'S';
				dados_tabela_aux_w.qt_item			:= dados_conta_proc_w.qt_procedimento;
				dados_tabela_aux_w.nr_seq_conta			:= dados_conta_proc_w.nr_seq_conta;
				dados_tabela_aux_w.nr_seq_conta_proc		:= dados_conta_proc_w.nr_seq_conta_proc;

				pls_tipos_ocor_pck.gerencia_tabela_aux_val_limit( 'I', 'P', nr_id_transacao_p, dados_tabela_aux_w, nm_usuario_p);
			end loop; -- Contas filtradas
			close cursor_w;
		exception
		when others then
			if (cursor_w%isopen) then
				-- Fechar os cursores que continuam abertos, os cursores que utilizam FOR - LOOP não necessitam serem fechados, serão fechados automaticamente.
				close cursor_w;
			end if;
			-- Insere o log na tabela e aborta a operação
			CALL pls_tipos_ocor_pck.trata_erro_sql_dinamico(dados_regra_p, ds_sql_w, nr_id_transacao_p, nm_usuario_p);
		end;

		-- Zerar o totalizador para executar a soma dos procedimentos que foram executados pelo beneficiário.
		qt_proc_util_total_w := 0;
		ds_itens_util_w := '';
		pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_selecao_w);
		i := 0;
		for	r_c_tabela_aux_w in c_tabela_aux(	nr_id_transacao_p, r_c_selecao_w.nr_seq_segurado,
								dados_limitacao_w.nr_seq_tipo_limitacao) loop

			qt_proc_util_total_w := qt_proc_util_total_w + r_c_tabela_aux_w.qt_item;

			ds_itens_util_w	:= substr(ds_itens_util_w || pls_tipos_ocor_pck.enter_w || 'Conta: ' || r_c_tabela_aux_w.nr_seq_conta || ' | ' || 'Procedimento: ' || r_c_tabela_aux_w.nr_seq_conta_proc || ' | ' || 'Quantidade: ' || r_c_tabela_aux_w.qt_item, 1, 4000);

			-- Irá gerar a ocorrência apenas quando a quantidade utilizada ultrapassar a permitida e quando o procedimento estiver na tabela de
			-- seleção.
			if (qt_proc_util_total_w > dados_limitacao_w.qt_permitida) and (r_c_tabela_aux_w.ie_selecao = 'S') then

				ds_observacao_w	:= substr(	'A diária ultrapassa a quantidade permitida pelas limitações contratuais do beneficiário. ' || pls_tipos_ocor_pck.enter_w ||
								'Este beneficiário possui liberação para estar apenas '
								|| dados_limitacao_w.qt_permitida || ' dia(s) internado neste mesmo contexto em um período de ' || dados_limitacao_w.qt_meses_intervalo || ' ' ||
								obter_valor_dominio(4171, dados_limitacao_w.ie_tipo_periodo) || pls_tipos_ocor_pck.enter_w || pls_tipos_ocor_pck.enter_w ||
								'Diárias utilizadas no período: ' || pls_tipos_ocor_pck.enter_w ||
								ds_itens_util_w, 1, 4000);

				dados_tb_selecao_w.ds_seqs_selecao(i)	:= r_c_tabela_aux_w.nr_seq_selecao;
				dados_tb_selecao_w.ds_observacao(i)	:= ds_observacao_w;
				dados_tb_selecao_w.ie_valido(i)		:= 'S';

				-- Gravar na tabela de seleção as contas selecionadas
				if (i = pls_cta_consistir_pck.qt_registro_transacao_w) then

					CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(dados_tb_selecao_w.nr_seq_selecao,
						dados_tb_selecao_w.ds_seqs_selecao, 'LISTA',
						dados_tb_selecao_w.ds_observacao, dados_tb_selecao_w.ie_valido,
						nm_usuario_p);

					pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_selecao_w);

					i := 0;
				else
					i := i + 1;
				end if;
			end if;
		end loop; -- c_tabela_aux
		-- Se sobrou ainda algo manda para o banco.
		if (dados_tb_selecao_w.ds_seqs_selecao.count > 0) then

			CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(dados_tb_selecao_w.nr_seq_selecao,
						dados_tb_selecao_w.ds_seqs_selecao, 'LISTA',
						dados_tb_selecao_w.ds_observacao, dados_tb_selecao_w.ie_valido,
						nm_usuario_p);

			pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_selecao_w);
		end if;

	end loop; -- c_limitacao
end loop; -- c_selecao
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_aplic_val_limi_dia ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

