-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE copiar_cadastro_agenda_exame (cd_agenda_destino_p bigint, cd_agenda_copia_p bigint, cd_estabelecimento_p bigint, ie_horario_p text, ie_bloqueio_p text, ie_regra_p text, ie_permissao_p text, nm_usuario_p text, ds_erro_p INOUT text, ie_tempo_proced_p text, ie_reportar_erro_p text default null, ie_medico_exame_p text default null, ie_turno_exame_ageint_p text default null) AS $body$
DECLARE


/* globais */

qt_cadastro_w			bigint;
ie_horario_w			varchar(1) := 'S';
ie_horario_esp_w		varchar(1) := 'S';
ie_bloqueio_w			varchar(1) := 'S';
ds_cadastro_w			varchar(4000);
ie_regra_w			varchar(1) := 'S';
ie_executor_w			varchar(1) := 'S';
ie_permissao_w			varchar(1) := 'S';
ie_tempo_proced_w		varchar(1) := 'S';
ds_erro_w			varchar(4000);
ie_medico_exame_w		varchar(1) := 'S';
ie_turno_exame_ageint_w		varchar(1) := 'S';
ie_situacao_regra_w		varchar(1);

/* horarios */

nr_seq_horario_w		bigint;
dt_dia_semana_w			bigint;
hr_inicial_w			timestamp;
hr_final_w			timestamp;
hr_inicial_intervalo_w		timestamp;
hr_final_intervalo_w		timestamp;
nr_minuto_intervalo_w		bigint;
dt_inicio_vigencia_w		timestamp;
dt_final_vigencia_w		timestamp;
cd_medico_w			varchar(10);
nr_seq_classif_w		bigint;
nr_seq_sala_w			bigint;
ds_observacao_w			varchar(255);
nr_sequencia_hora_w	bigint;

/* horarios especiais */

dt_agenda_w			timestamp;
dt_agenda_fim_w			timestamp;
ie_horario_adicional_w		varchar(1);

/* bloqueios */

nr_seq_bloqueio_w		bigint;
dt_inicial_bloq_w		timestamp;
dt_final_bloq_w			timestamp;
hr_inicio_bloq_w		timestamp;
hr_final_bloq_w			timestamp;
ie_dia_semana_w			integer;
ie_motivo_bloqueio_w		varchar(15);

/* regras exame x convenio */

nr_seq_regra_w			bigint;
cd_convenio_w			integer;
cd_area_proc_w			bigint;
cd_especialidade_w		bigint;
cd_grupo_proc_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w		bigint;
ie_permite_w			varchar(1);
nr_seq_regra_ww			bigint;
cd_plano_convenio_w		varchar(10);

nr_seq_grupo_w			bigint;
nr_seq_subgrupo_w		bigint;
nr_seq_forma_org_w		bigint;
nr_seq_agenda_regra_w	agenda_regra.nr_sequencia%type;

/* regras exame x convenio turno*/

nr_sequencia_turn_w				agenda_regra.nr_sequencia%type;


/*Regras de permissoes*/

nr_seq_permissao_w		bigint;
ie_permite_cancelar_agenda_w    varchar(1);
cd_pessoa_fisica_w              varchar(10);
ie_permite_encaixe_agenda_w     varchar(1);
ie_situacao_w                   varchar(1);
ie_permite_alterar_agenda_w     varchar(1);
cd_perfil_w                     integer;
ie_permite_confirmar_encaixe_w  varchar(1);
ie_permite_visualizar_w         varchar(1);
ie_permite_vincular_atend_w     varchar(1);
ie_permite_status_w             varchar(1);
ie_ignora_regra_agend_fut_w	varchar(1);

/*Tempo proced*/

qt_minuto_w				tempo_procedimento.qt_minuto%type;
qt_idade_minima_w		tempo_procedimento.qt_idade_minima%type;
qt_idade_maxima_w		tempo_procedimento.qt_idade_maxima%type;
qt_minuto_adic_w		tempo_procedimento.qt_minuto_adic%type;
ie_lado_w				tempo_procedimento.ie_lado%type;
cd_plano_w				tempo_procedimento.cd_plano%type;
cd_categoria_w			tempo_procedimento.cd_categoria%type;
cd_estab_temp_w			tempo_procedimento.cd_estabelecimento%type;

ie_agenda_w			agenda_regra.ie_agenda%type;

/* obter horarios */

c01 CURSOR FOR
SELECT	dt_dia_semana,
	hr_inicial,
	hr_final,
	hr_inicial_intervalo,
	hr_final_intervalo,
	nr_minuto_intervalo,
	dt_inicio_vigencia,
	dt_final_vigencia,
	cd_medico,
	nr_seq_classif_agenda,
	nr_seq_sala,
	ds_observacao,
	nr_sequencia
from	agenda_horario
where	cd_agenda = cd_agenda_copia_p
order by
	dt_dia_semana;

/* obter horarios especiais */

c02 CURSOR FOR
SELECT	dt_agenda,
	ie_horario_adicional,
	hr_inicial,
	hr_final,
	hr_inicial_intervalo,
	hr_final_intervalo,
	nr_minuto_intervalo,
	cd_medico,
	nr_seq_classif_agenda,
	ds_observacao,
	nr_sequencia,
	ie_dia_semana,
	dt_agenda_fim
from	agenda_horario_esp
where	cd_agenda = cd_agenda_copia_p
order by
	dt_agenda;

/* obter bloqueios */

c03 CURSOR FOR
SELECT	dt_inicial,
	dt_final,
	hr_inicio_bloqueio,
	hr_final_bloqueio,
	ie_dia_semana,
	ie_motivo_bloqueio,
	ds_observacao
from	agenda_bloqueio
where	cd_agenda = cd_agenda_copia_p
order by
	dt_inicial,
	dt_final;

/* obter regras exame x convenio */

c04 CURSOR FOR
SELECT	cd_convenio,
	cd_area_proc,
	cd_especialidade,
	cd_grupo_proc,
	cd_procedimento,
	ie_origem_proced,
	nr_seq_proc_interno,
	cd_medico,
	ie_permite,
	nr_seq_regra,
	nr_seq_grupo,
	nr_seq_subgrupo,
	nr_seq_forma_org,
	cd_plano_convenio,
	ie_agenda,
	ie_situacao,
	nr_sequencia
from	agenda_regra
where	cd_agenda = cd_agenda_copia_p
and 	coalesce(nr_seq_turno::text, '') = ''
and 	coalesce(nr_seq_hor_esp::text, '') = '';

/* obter regras executor */

c05 CURSOR FOR
SELECT	cd_medico
from	agenda_medico
where	cd_agenda = cd_agenda_copia_p;


c06 CURSOR FOR
SELECT	ie_permite_cancelar_agenda,
	cd_pessoa_fisica,               
	ie_permite_encaixe_agenda,                        
	ie_situacao,                    
	ie_permite_alterar_agenda,      
	cd_perfil,                      
	ie_permite_confirmar_encaixe,   
	ie_permite_visualizar,          
	ie_permite_vincular_atend,      
	ie_permite_status,              
	ie_dia_semana,                  
	ie_ignora_regra_agend_fut
from	agenda_regra_permissao
where	cd_agenda = cd_agenda_copia_p;

C07 CURSOR FOR
	SELECT	qt_minuto,
			nr_seq_proc_interno, 
			cd_procedimento, 
			ie_origem_proced, 
			cd_pessoa_fisica, 
			qt_idade_minima, 
			qt_idade_maxima, 
			qt_minuto_adic, 
			ie_lado, 
			cd_convenio, 
			cd_categoria, 
			cd_plano, 
			cd_estabelecimento, 
			ie_dia_semana
	from	tempo_procedimento
	where	cd_agenda = cd_agenda_copia_p;
	
c08 CURSOR FOR
	SELECT	cd_estabelecimento,
		ie_tipo_convenio,
		cd_convenio,
		cd_categoria,
		cd_plano_convenio,
		cd_area_proc,
		cd_especialidade,
		cd_grupo_proc,
		cd_procedimento,
		nr_seq_proc_interno,
		cd_medico,
		cd_perfil,
		ie_permite,
		ie_medico,
		ie_forma_consistencia,
		cd_municipio_ibge,
		qt_regra,
		ds_mensagem,
		ie_consiste_qtd_hora,
		ie_convenio_qtd,
		ie_estrutura_qtd,
		ie_somente_anestesia,
		ie_consiste_final,
		cd_empresa_ref,
		cd_agenda,
		hr_inicio,
		hr_fim,
		ie_origem_proced,
		ie_agenda,
		ie_situacao
	from	agenda_regra
	where	nr_seq_turno = nr_sequencia_hora_w;
	
c09 CURSOR FOR
	SELECT	cd_estabelecimento,
		ie_tipo_convenio,
		cd_convenio,
		cd_categoria,
		cd_plano_convenio,
		cd_area_proc,
		cd_especialidade,
		cd_grupo_proc,
		cd_procedimento,
		nr_seq_proc_interno,
		cd_medico,
		cd_perfil,
		ie_permite,
		ie_medico,
		ie_forma_consistencia,
		cd_municipio_ibge,
		qt_regra,
		ds_mensagem,
		ie_consiste_qtd_hora,
		ie_convenio_qtd,
		ie_estrutura_qtd,
		ie_somente_anestesia,
		ie_consiste_final,
		cd_empresa_ref,
		cd_agenda,
		hr_inicio,
		hr_fim,
		ie_origem_proced,
		ie_agenda,
		ie_situacao
	from	agenda_regra
	where	nr_seq_hor_esp = nr_sequencia_hora_w;
BEGIN
if (cd_agenda_destino_p IS NOT NULL AND cd_agenda_destino_p::text <> '') and (cd_agenda_copia_p IS NOT NULL AND cd_agenda_copia_p::text <> '') and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') and
	((ie_horario_p = 'S') or (ie_bloqueio_p = 'S') or (ie_regra_p = 'S') or (ie_permissao_p = 'S') or (ie_medico_exame_p = 'S') or (ie_turno_exame_ageint_p = 'S')) then
	/* gerar horarios */

	if (ie_horario_p = 'S') then
		/* validar horarios normais */

		select	count(*)
		into STRICT	qt_cadastro_w
		from	agenda_horario
		where	cd_agenda = cd_agenda_destino_p;

		/* horarios normais */

		if (qt_cadastro_w = 0) then
			open c01;
			loop
			fetch c01 into	dt_dia_semana_w,
				hr_inicial_w,
				hr_final_w,
				hr_inicial_intervalo_w,
				hr_final_intervalo_w,
				nr_minuto_intervalo_w,
				dt_inicio_vigencia_w,
				dt_final_vigencia_w,
				cd_medico_w,
				nr_seq_classif_w,
				nr_seq_sala_w,
				ds_observacao_w,
				nr_sequencia_hora_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin
				select	nextval('agenda_horario_seq')
				into STRICT	nr_seq_horario_w
				;

				insert into agenda_horario(
					cd_agenda,
					dt_dia_semana,
					hr_inicial,
					hr_final,
					nr_minuto_intervalo,
					nm_usuario,
					dt_atualizacao,
					hr_inicial_intervalo,
					hr_final_intervalo,
					ds_observacao,
					dt_final_vigencia,
					cd_medico,
					nr_seq_medico_exec,
					nr_seq_sala,
					dt_inicio_vigencia,
					nr_sequencia,
					nr_seq_classif_agenda
				) values (
					cd_agenda_destino_p,
					dt_dia_semana_w,
					hr_inicial_w,
					hr_final_w,
					nr_minuto_intervalo_w,
					nm_usuario_p,
					clock_timestamp(),
					hr_inicial_intervalo_w,
					hr_final_intervalo_w,
					ds_observacao_w,
					dt_final_vigencia_w,
					cd_medico_w,
					null,
					nr_seq_sala_w,
					dt_inicio_vigencia_w,
					nr_seq_horario_w,
					nr_seq_classif_w
				);
					
				if (ie_regra_p = 'S') then
					/* validar regras exame x convenio na parte do turno*/

					for regras_turno in c08 loop
					
						select	nextval('agenda_regra_seq')
						into STRICT	nr_sequencia_turn_w
						;
						
						insert into agenda_regra(
							cd_estabelecimento,
							ie_tipo_convenio,
							cd_convenio,
							cd_categoria,
							cd_plano_convenio,
							cd_area_proc,
							cd_especialidade,
							cd_grupo_proc,
							cd_procedimento,
							nr_seq_proc_interno,
							cd_medico,
							cd_perfil,
							ie_permite,
							ie_medico,
							ie_forma_consistencia,
							cd_municipio_ibge,
							qt_regra,
							ds_mensagem,
							ie_consiste_qtd_hora,
							ie_convenio_qtd,
							ie_estrutura_qtd,
							ie_somente_anestesia,
							ie_consiste_final,
							cd_empresa_ref,
							cd_agenda,
							nr_sequencia,
							nr_seq_turno,
							dt_atualizacao,
							nm_usuario,
							hr_inicio,
							hr_fim,
							ie_origem_proced,
							ie_agenda,
							ie_situacao
						) values (
							regras_turno.cd_estabelecimento,
							regras_turno.ie_tipo_convenio,
							regras_turno.cd_convenio,
							regras_turno.cd_categoria,
							regras_turno.cd_plano_convenio,
							regras_turno.cd_area_proc,
							regras_turno.cd_especialidade,
							regras_turno.cd_grupo_proc,
							regras_turno.cd_procedimento,
							regras_turno.nr_seq_proc_interno,
							regras_turno.cd_medico,
							regras_turno.cd_perfil,
							regras_turno.ie_permite,
							regras_turno.ie_medico,
							regras_turno.ie_forma_consistencia,
							regras_turno.cd_municipio_ibge,
							regras_turno.qt_regra,
							regras_turno.ds_mensagem,
							regras_turno.ie_consiste_qtd_hora,
							regras_turno.ie_convenio_qtd,
							regras_turno.ie_estrutura_qtd,
							regras_turno.ie_somente_anestesia,
							regras_turno.ie_consiste_final,
							regras_turno.cd_empresa_ref,
							cd_agenda_destino_p,
							nr_sequencia_turn_w,
							nr_seq_horario_w,
							clock_timestamp(),
							nm_usuario_p,
							regras_turno.hr_inicio,
							regras_turno.hr_fim,
							regras_turno.ie_origem_proced,
							regras_turno.ie_agenda,
							regras_turno.ie_situacao
						);
					end loop;
				end if;
					
				end;
			end loop;
			close c01;
		else
			ie_horario_w := 'N';
		end if;

		/* validar horarios especiais */

		select	count(*)
		into STRICT	qt_cadastro_w
		from	agenda_horario_esp
		where	cd_agenda = cd_agenda_destino_p;

		/* horarios especiais */

		if (qt_cadastro_w = 0) then
			open c02;
			loop
			fetch c02 into	dt_agenda_w,
					ie_horario_adicional_w,
					hr_inicial_w,
					hr_final_w,
					hr_inicial_intervalo_w,
					hr_final_intervalo_w,
					nr_minuto_intervalo_w,
					cd_medico_w,
					nr_seq_classif_w,
					ds_observacao_w,
					nr_sequencia_hora_w,
					ie_dia_semana_w,
					dt_agenda_fim_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				select	nextval('agenda_horario_esp_seq')
				into STRICT	nr_seq_horario_w
				;
	
				insert into agenda_horario_esp(
					nr_sequencia,
					cd_agenda,
					dt_agenda,
					dt_atualizacao,
					nm_usuario,
					hr_inicial,
					hr_final,
					nr_minuto_intervalo,
					hr_inicial_intervalo,
					hr_final_intervalo,
					cd_medico,
					nr_seq_medico_exec,
					nr_seq_sala,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ds_observacao,
					ie_horario_adicional,
					nr_seq_classif_agenda,
					ie_dia_semana,
					dt_agenda_fim
				) values (
					nr_seq_horario_w,
					cd_agenda_destino_p,
					dt_agenda_w,
					clock_timestamp(),
					nm_usuario_p,
					hr_inicial_w,
					hr_final_w,
					nr_minuto_intervalo_w,
					hr_inicial_intervalo_w,
					hr_final_intervalo_w,
					cd_medico_w,
					null,
					null,
					clock_timestamp(),
					nm_usuario_p,
					ds_observacao_w,
					ie_horario_adicional_w,
					nr_seq_classif_w,
					ie_dia_semana_w,
					dt_agenda_fim_w
				);
				if (ie_regra_p = 'S') then
					/* validar regras exame x convenio na parte do turno especial*/

					for regras_turno in c09 loop
						select	nextval('agenda_regra_seq')
						into STRICT	nr_sequencia_turn_w
						;
						
						insert into agenda_regra(
							cd_estabelecimento,
							ie_tipo_convenio,
							cd_convenio,
							cd_categoria,
							cd_plano_convenio,
							cd_area_proc,
							cd_especialidade,
							cd_grupo_proc,
							cd_procedimento,
							nr_seq_proc_interno,
							cd_medico,
							cd_perfil,
							ie_permite,
							ie_medico,
							ie_forma_consistencia,
							cd_municipio_ibge,
							qt_regra,
							ds_mensagem,
							ie_consiste_qtd_hora,
							ie_convenio_qtd,
							ie_estrutura_qtd,
							ie_somente_anestesia,
							ie_consiste_final,
							cd_empresa_ref,
							cd_agenda,
							nr_sequencia,
							nr_seq_hor_esp,
							dt_atualizacao,
							nm_usuario,
							hr_inicio,
							hr_fim,
							ie_origem_proced,
							ie_agenda,
							ie_situacao
						) values (
							regras_turno.cd_estabelecimento,
							regras_turno.ie_tipo_convenio,
							regras_turno.cd_convenio,
							regras_turno.cd_categoria,
							regras_turno.cd_plano_convenio,
							regras_turno.cd_area_proc,
							regras_turno.cd_especialidade,
							regras_turno.cd_grupo_proc,
							regras_turno.cd_procedimento,
							regras_turno.nr_seq_proc_interno,
							regras_turno.cd_medico,
							regras_turno.cd_perfil,
							regras_turno.ie_permite,
							regras_turno.ie_medico,
							regras_turno.ie_forma_consistencia,
							regras_turno.cd_municipio_ibge,
							regras_turno.qt_regra,
							regras_turno.ds_mensagem,
							regras_turno.ie_consiste_qtd_hora,
							regras_turno.ie_convenio_qtd,
							regras_turno.ie_estrutura_qtd,
							regras_turno.ie_somente_anestesia,
							regras_turno.ie_consiste_final,
							regras_turno.cd_empresa_ref,
							cd_agenda_destino_p,
							nr_sequencia_turn_w,
							nr_seq_horario_w,
							clock_timestamp(),
							nm_usuario_p,
							regras_turno.hr_inicio,
							regras_turno.hr_fim,
							regras_turno.ie_origem_proced,
							regras_turno.ie_agenda,
							regras_turno.ie_situacao
						);
					end loop;
				end if;
				end;
			end loop;
			close c02;
		else
			ie_horario_esp_w := 'N';
		end if;
	end if;

	/* gerar bloqueios */

	if (ie_bloqueio_p = 'S') then
		/* validar bloqueios */

		select	count(*)
		into STRICT	qt_cadastro_w
		from	agenda_bloqueio
		where	cd_agenda = cd_agenda_destino_p;

		if (qt_cadastro_w = 0) then
			open c03;
			loop
			fetch c03 into	dt_inicial_bloq_w,
					dt_final_bloq_w,
					hr_inicio_bloq_w,
					hr_final_bloq_w,
					ie_dia_semana_w,
					ie_motivo_bloqueio_w,
					ds_observacao_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				begin
				select	nextval('agenda_bloqueio_seq')
				into STRICT	nr_seq_bloqueio_w
				;
	
				insert into agenda_bloqueio(
								cd_agenda,
								dt_inicial,
								dt_final,
								ie_motivo_bloqueio,
								dt_atualizacao,
								nm_usuario,
								ds_observacao,
								ie_dia_semana,
								hr_inicio_bloqueio,
								hr_final_bloqueio,
								nr_sequencia,
								ie_classif_bloqueio
								)
				values (
								cd_agenda_destino_p,
								dt_inicial_bloq_w,
								dt_final_bloq_w,
								ie_motivo_bloqueio_w,
								clock_timestamp(),
								nm_usuario_p,
								ds_observacao_w,
								ie_dia_semana_w,
								hr_inicio_bloq_w,
								hr_final_bloq_w,
								nr_seq_bloqueio_w,
								null
								);
				end;
			end loop;
			close c03;
		else
			ie_bloqueio_w := 'N';
		end if;
	end if;

	/* gerar regras */

	if (ie_regra_p = 'S') then
		/* validar regras exame x convenio */

		select	count(*)
		into STRICT	qt_cadastro_w
		from	agenda_regra
		where	cd_agenda = cd_agenda_destino_p
		and		coalesce(nr_seq_turno::text, '') = '';

		/* regras exame x convenio */

		if (qt_cadastro_w = 0) then
			open c04;
			loop
			fetch c04 into	cd_convenio_w,
					cd_area_proc_w,
					cd_especialidade_w,
					cd_grupo_proc_w,
					cd_procedimento_w,
					ie_origem_proced_w,
					nr_seq_proc_interno_w,
					cd_medico_w,
					ie_permite_w,
					nr_seq_regra_ww,
					nr_seq_grupo_w,
					nr_seq_subgrupo_w,
					nr_seq_forma_org_w,
					cd_plano_convenio_w,
					ie_agenda_w,
					ie_situacao_regra_w,
					nr_seq_agenda_regra_w;
			EXIT WHEN NOT FOUND; /* apply on c04 */
				begin
				select	nextval('agenda_regra_seq')
				into STRICT	nr_seq_regra_w
				;

				insert into agenda_regra(
								nr_sequencia,
								cd_estabelecimento,
								cd_agenda,
								dt_atualizacao,
								nm_usuario,
								ie_permite,
								cd_convenio,
								cd_area_proc,
								cd_especialidade,
								cd_grupo_proc,
								cd_procedimento,
								ie_origem_proced,
								cd_medico,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_proc_interno,
								nr_seq_regra,
								nr_seq_grupo,
								nr_seq_subgrupo,
								nr_seq_forma_org,
								cd_plano_convenio,
								ie_agenda,
								ie_situacao
								)
				values (
								nr_seq_regra_w,
								cd_estabelecimento_p,
								cd_agenda_destino_p,
								clock_timestamp(),
								nm_usuario_p,
								ie_permite_w,
								cd_convenio_w,
								cd_area_proc_w,
								cd_especialidade_w,
								cd_grupo_proc_w,
								cd_procedimento_w,
								ie_origem_proced_w,
								cd_medico_w,
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_proc_interno_w,
								nr_seq_regra_ww,
								nr_seq_grupo_w,
								nr_seq_subgrupo_w,
								nr_seq_forma_org_w,
								cd_plano_convenio_w,
								ie_agenda_w,
								ie_situacao_regra_w
								);
								
				if (nr_seq_agenda_regra_w IS NOT NULL AND nr_seq_agenda_regra_w::text <> '') and (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
					CALL ageint_gerar_info_tabela('AGENDA_REGRA_PROC', nr_seq_agenda_regra_w, nr_seq_regra_w);
				end if;
			
				end;
			end loop;
			close c04;
		else
			ie_regra_w := 'N';
		end if;
		
		/* validar regras x executor */

		select	count(*)
		into STRICT	qt_cadastro_w
		from	agenda_medico
		where	cd_agenda = cd_agenda_destino_p;

		/* regras executor */

		if (qt_cadastro_w = 0) then
			open c05;
			loop
			fetch c05 into cd_medico_w;
			EXIT WHEN NOT FOUND; /* apply on c05 */
				begin
				select	nextval('agenda_medico_seq')
				into STRICT	nr_seq_regra_w
				;
			
				insert into agenda_medico(
								nr_sequencia,
								cd_agenda,
								cd_medico,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								ie_situacao
								)
				values (
								nr_seq_regra_w,
								cd_agenda_destino_p,
								cd_medico_w,
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								'A'
								);
				end;	
			end loop;
			close c05;
		else
			ie_executor_w := 'N';
		end if;
	end if;
	
	/* Regra de permissoes de agendamento*/

	if (ie_permissao_p = 'S') then
		/* validar Regra de permissoes de agendamento*/

		select	count(*)
		into STRICT	qt_cadastro_w
		from	agenda_regra_permissao
		where	cd_agenda = cd_agenda_destino_p;
		

		/* Regra de permissoes de agendamento */

		if (qt_cadastro_w = 0) then
			open c06;
			loop
			fetch c06 into	ie_permite_cancelar_agenda_w,
						cd_pessoa_fisica_w,               
						ie_permite_encaixe_agenda_w,                         
						ie_situacao_w,                    
						ie_permite_alterar_agenda_w,      
						cd_perfil_w,                      
						ie_permite_confirmar_encaixe_w,   
						ie_permite_visualizar_w,          
						ie_permite_vincular_atend_w,      
						ie_permite_status_w,              
						ie_dia_semana_w,                  
						ie_ignora_regra_agend_fut_w;
			EXIT WHEN NOT FOUND; /* apply on c06 */
				begin
				select	nextval('agenda_regra_permissao_seq')
				into STRICT	nr_seq_permissao_w
				;

				insert into agenda_regra_permissao(
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,                     
								dt_atualizacao_nrec,
								nm_usuario_nrec,                
								ie_permite_cancelar_agenda,     
								cd_pessoa_fisica,               
								ie_permite_encaixe_agenda,      
								cd_agenda,                      
								ie_situacao,                    
								ie_permite_alterar_agenda,      
								cd_perfil,                      
								ie_permite_confirmar_encaixe,   
								ie_permite_visualizar,          
								ie_permite_vincular_atend,      
								ie_permite_status,              
								ie_dia_semana,                  
								ie_ignora_regra_agend_fut      
								)
				values (
								nr_seq_permissao_w,                 
								clock_timestamp(),
								nm_usuario_p,                     
								clock_timestamp(),
								nm_usuario_p,                
								ie_permite_cancelar_agenda_w,     
								cd_pessoa_fisica_w,               
								ie_permite_encaixe_agenda_w,      
								cd_agenda_destino_p,                      
								ie_situacao_w,                    
								ie_permite_alterar_agenda_w,      
								cd_perfil_w,                      
								ie_permite_confirmar_encaixe_w,   
								ie_permite_visualizar_w,          
								ie_permite_vincular_atend_w,      
								ie_permite_status_w,              
								ie_dia_semana_w,                  
								ie_ignora_regra_agend_fut_w
								);
				end;
			end loop;
			close c06;
		else
			ie_permissao_w := 'N';
		end if;
	end if;
	/* Regra de permissoes de agendamento*/

	if (ie_tempo_proced_p = 'S') then
		/* validar Regra de permissoes de agendamento*/

		select	count(*)
		into STRICT	qt_cadastro_w
		from	tempo_procedimento
		where	cd_agenda = cd_agenda_destino_p;
		

		/* Regra de permissoes de agendamento */

		if (qt_cadastro_w = 0) then
			open c07;
			loop
			fetch c07 into		qt_minuto_w,
								nr_seq_proc_interno_w, 
								cd_procedimento_w, 
								ie_origem_proced_w, 
								cd_pessoa_fisica_w, 
								qt_idade_minima_w, 
								qt_idade_maxima_w, 
								qt_minuto_adic_w, 
								ie_lado_w, 
								cd_convenio_w, 
								cd_categoria_w, 
								cd_plano_w, 
								cd_estab_temp_w, 
								ie_dia_semana_w;
			EXIT WHEN NOT FOUND; /* apply on c07 */
				begin
				insert into tempo_procedimento(
					nr_sequencia,
					dt_atualizacao, 
					nm_usuario, 
					qt_minuto, 
					nr_seq_proc_interno, 
					cd_procedimento, 
					ie_origem_proced, 
					cd_pessoa_fisica, 
					cd_agenda, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					qt_idade_minima, 
					qt_idade_maxima, 
					qt_minuto_adic, 
					ie_lado, 
					cd_convenio, 
					cd_categoria, 
					cd_plano, 
					cd_estabelecimento, 
					ie_dia_semana
				) values (
					nextval('tempo_procedimento_seq'),
					clock_timestamp(),
					nm_usuario_p,
					qt_minuto_w, 
					nr_seq_proc_interno_w, 
					cd_procedimento_w, 
					ie_origem_proced_w, 
					cd_pessoa_fisica_w, 
					cd_agenda_destino_p,
					clock_timestamp(),
					nm_usuario_p,
					qt_idade_minima_w, 
					qt_idade_maxima_w, 
					qt_minuto_adic_w, 
					ie_lado_w, 
					cd_convenio_w, 
					cd_categoria_w, 
					cd_plano_w, 
					cd_estab_temp_w, 
					ie_dia_semana_w);
				end;
			end loop;
			close c07;
		else
			ie_tempo_proced_w := 'N';
		end if;
	end if;

	if (ie_medico_exame_p = 'S') then
		select	count(*)
		into STRICT	qt_cadastro_w
		from	agenda_medico_proced
		where	cd_agenda = cd_agenda_destino_p;
	
		if (qt_cadastro_w = 0) then
			begin		
			INSERT INTO agenda_medico_proced(
  				nr_sequencia,
  				dt_atualizacao,
  				nm_usuario,
  				dt_atualizacao_nrec,
  				nm_usuario_nrec,
  				cd_agenda,
  				nr_seq_proc_interno,
  				cd_medico,
  				cd_procedimento,
  				ie_origem_proced,
  				cd_area_procedimento,
  				cd_especialidade,
  				cd_grupo_proc
  				)
			SELECT
  				nextval('agenda_medico_proced_seq') AS nr_sequencia,
  				clock_timestamp() AS dt_atualizacao,
  				nm_usuario_p AS nm_usuario,
  				clock_timestamp() AS dt_atualizacao_nrec,
  				nm_usuario_p AS nm_usuario_nrec,
  				cd_agenda_destino_p AS cd_agenda,
  				nr_seq_proc_interno,
  				cd_medico,
  				cd_procedimento,
  				ie_origem_proced,
  				cd_area_procedimento,
  				cd_especialidade,
  				cd_grupo_proc
			FROM
				agenda_medico_proced
			WHERE
  				cd_agenda = cd_agenda_copia_p;		
			end;
		else
			ie_medico_exame_w := 'N';
	        end if;		
	end if;	
	
	if (ie_turno_exame_ageint_p = 'S') then
		select	count(*)
		into STRICT	qt_cadastro_w
		from	ageint_turno_exame
		where	cd_agenda = cd_agenda_destino_p;
	
		if (qt_cadastro_w = 0) then
			begin		
			INSERT INTO ageint_turno_exame(
  				nr_sequencia, 
				dt_atualizacao,
  				nm_usuario,
  				dt_atualizacao_nrec,
				nm_usuario_nrec,
  				nr_seq_proc_interno,
  				dt_inicial_vigencia,
				dt_final_vigencia,
  				hr_inicial,
  				hr_final,
				dt_dia_semana,
  				cd_pessoa_fisica,
  				cd_agenda,
  				cd_estabelecimento,
  				ie_consiste_marcacao,
  				nr_seq_grupo_ageint,
  				ds_observacao,
  				qt_idade_min,
  				qt_idade_max,
  				ie_sexo,
  				qt_dias_validade
				)
			SELECT 
  				nextval('ageint_turno_exame_seq') as nr_sequencia,
  				clock_timestamp() 	as dt_atualizacao,
  				nm_usuario_p 	as nm_usuario,
  				clock_timestamp() 	as dt_atualizacao_nrec,
  				nm_usuario_p 	as nm_usuario_nrec,
  				nr_seq_proc_interno,
  				dt_inicial_vigencia,
  				dt_final_vigencia,
  				hr_inicial,
  				hr_final,
  				dt_dia_semana,
  				cd_pessoa_fisica,
  				cd_agenda_destino_p as cd_agenda,
  				cd_estabelecimento,
  				ie_consiste_marcacao,
  				nr_seq_grupo_ageint,
  				ds_observacao,
  				qt_idade_min,
  				qt_idade_max,
  				ie_sexo,
				qt_dias_validade
			FROM 
				ageint_turno_exame 
			WHERE
				cd_agenda = cd_agenda_copia_p;		
			end;
		else
			ie_turno_exame_ageint_w := 'N';	
	        end if;		
	end if;		
elsif (ie_horario_p = 'N') and (ie_bloqueio_p = 'N') and (ie_regra_p = 'N') then
	ds_erro_w := WHEB_MENSAGEM_PCK.get_texto(278563,null);
end if;

if (ie_horario_w = 'N') or (ie_horario_esp_w = 'N') or (ie_bloqueio_w = 'N') or (ie_regra_w = 'N') or (ie_executor_w = 'N') or (ie_permissao_w = 'N') or (ie_tempo_proced_w = 'N') or (ie_medico_exame_w = 'N') or (ie_turno_exame_ageint_w = 'N') then
	if (ie_horario_w = 'N') then
		ds_cadastro_w := ds_cadastro_w || WHEB_MENSAGEM_PCK.get_texto(278571,null);
	end if;
	if (ie_horario_esp_w = 'N') then
		ds_cadastro_w := ds_cadastro_w || WHEB_MENSAGEM_PCK.get_texto(278572, null);
	end if;
	if (ie_bloqueio_w = 'N') then
		ds_cadastro_w := ds_cadastro_w || WHEB_MENSAGEM_PCK.get_texto(278575, null);
	end if;
	if (ie_regra_w = 'N') then
		ds_cadastro_w := ds_cadastro_w || WHEB_MENSAGEM_PCK.get_texto(278578, null);
	end if;
	if (ie_executor_w = 'N') then
		ds_cadastro_w := ds_cadastro_w || WHEB_MENSAGEM_PCK.get_texto(278579, null);
	end if;
	if (ie_permissao_w = 'N') then
		ds_cadastro_w := ds_cadastro_w || WHEB_MENSAGEM_PCK.get_texto(278580, null);
	end if;
	if (ie_tempo_proced_w = 'N') then
		ds_cadastro_w := ds_cadastro_w || WHEB_MENSAGEM_PCK.get_texto(496935, null) || ',';
	end if;
	if (ie_medico_exame_w = 'N') then
	 	ds_cadastro_w := ds_cadastro_w || WHEB_MENSAGEM_PCK.get_texto(1059037, null) || ',';
	end if;	
	if (ie_turno_exame_ageint_w = 'N') then
	 	ds_cadastro_w := ds_cadastro_w || WHEB_MENSAGEM_PCK.get_texto(1059032, null) || ',';
	end if;

	ds_cadastro_w := Substr(ds_cadastro_w,1,Length(ds_cadastro_w)-1);	
	
	ds_erro_w := WHEB_MENSAGEM_PCK.get_texto(278583, 'DS_CADASTRO='||ds_cadastro_w);
end if;

ds_erro_p := ds_erro_w;

if (ie_reportar_erro_p	= 'S') and (ds_erro_p IS NOT NULL AND ds_erro_p::text <> '') then
	CALL wheb_mensagem_pck.EXIBIR_MENSAGEM_ABORT(ds_erro_p);
end if;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE copiar_cadastro_agenda_exame (cd_agenda_destino_p bigint, cd_agenda_copia_p bigint, cd_estabelecimento_p bigint, ie_horario_p text, ie_bloqueio_p text, ie_regra_p text, ie_permissao_p text, nm_usuario_p text, ds_erro_p INOUT text, ie_tempo_proced_p text, ie_reportar_erro_p text default null, ie_medico_exame_p text default null, ie_turno_exame_ageint_p text default null) FROM PUBLIC;

