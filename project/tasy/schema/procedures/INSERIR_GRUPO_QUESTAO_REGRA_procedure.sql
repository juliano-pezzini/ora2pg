-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE inserir_grupo_questao_regra ( nr_seq_laudo_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_sequencia_w		bigint;
nr_seq_item_grupo_w	bigint;
nr_seq_questao_w	bigint;
cd_grupo_w		bigint;
cd_especialidade_w	bigint;
cd_area_w		bigint;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_Proc_w		bigint;
nr_seq_regra_w		bigint;
nr_seq_grupo_w		bigint;
ds_texto_padrao_w	varchar(2000);
nr_prescricao_w		bigint;
nr_seq_prescr_w		bigint;
nr_seq_peca_w		bigint;
ie_laudo_compl_w	varchar(10);
ie_existe_grupo_w	bigint;
nr_seq_exame_compl_w	bigint;
ie_laudo_adendo_peca_w	varchar(2);

c01 CURSOR FOR
	SELECT	nr_sequencia,
		ds_texto_padrao
	from	item_questao_laudo
	where	nr_seq_grupo	= nr_seq_grupo_w
	and	ie_situacao = 'A';

c02 CURSOR FOR
	SELECT	nr_seq_grupo
	from	regra_laudo_grupo
	where	nr_seq_regra_grupo	= nr_seq_regra_w;

c03 CURSOR FOR
	SELECT	a.nr_sequencia
	from	regra_laudo_grupo_proc a
	where 	not(exists (SELECT 1 from regra_laudo_grupo_ex_com where nr_seq_regra_laudo = a.nr_sequencia)) --Não possui exames complementares na regra
	and	coalesce(a.cd_grupo_proc, coalesce(cd_grupo_w,0)) 	   = coalesce(cd_grupo_w,0)
	and	coalesce(a.cd_especialidade, coalesce(cd_especialidade_w,0)) = coalesce(cd_especialidade_w,0)
	and	coalesce(a.cd_area_procedimento, coalesce(cd_area_w,0))	   = coalesce(cd_area_w,0)
	and	coalesce(a.cd_procedimento, coalesce(cd_procedimento_w,0))   = coalesce(cd_procedimento_w,0)
	and	((coalesce(a.cd_procedimento::text, '') = '')  or (a.ie_origem_proced	= ie_origem_proced_w))
	order 	by   	coalesce(a.cd_procedimento,0),
			coalesce(a.ie_origem_proced,ie_origem_proced_w),
			coalesce(a.cd_grupo_proc,0),
			coalesce(a.cd_especialidade,0),
			coalesce(a.cd_area_procedimento,0);

C04 CURSOR FOR
	SELECT 	c.nr_sequencia nr_seq_peca
	from  	prescr_proc_peca c
	where 	nr_prescricao  	= nr_prescricao_w
	and	nr_seq_prescr 	= nr_seq_prescr_w
	and   	coalesce(nr_seq_peca::text, '') = ''
	and	ie_laudo_adendo_peca_w 	= 'N'
	and	coalesce(c.ie_situacao,'A') = 'A'
	and	not exists (SELECT 1 from laudo_grupo_questao l where l.nr_seq_laudo = nr_seq_laudo_p and l.nr_seq_peca = c.nr_sequencia)
	
union

	select 	d.nr_seq_peca
	from  	prescr_proc_peca_laudo d
	where 	d.nr_seq_laudo  	= nr_seq_laudo_p
	and	ie_laudo_adendo_peca_w 	= 'S'
	and	not exists (select 1 from laudo_grupo_questao g where g.nr_seq_laudo = nr_seq_laudo_p and g.nr_seq_peca = d.nr_seq_peca)
	;


C05 CURSOR FOR
	SELECT	nr_sequencia
	from	regra_laudo_grupo_proc
	where	coalesce(cd_grupo_proc, coalesce(cd_grupo_w,0)) 		 = coalesce(cd_grupo_w,0)
	and	coalesce(cd_especialidade, coalesce(cd_especialidade_w,0)) = coalesce(cd_especialidade_w,0)
	and	coalesce(cd_area_procedimento, coalesce(cd_area_w,0))	 = coalesce(cd_area_w,0)
	and	coalesce(cd_procedimento, coalesce(cd_procedimento_w,0))	 = coalesce(cd_procedimento_w,0)
	and	((coalesce(cd_procedimento::text, '') = '') or (ie_origem_proced	= ie_origem_proced_w))
	AND	nr_sequencia IN (SELECT nr_seq_regra_laudo
				 FROM   regra_laudo_grupo_ex_com t
				 WHERE	t.nr_seq_exame_compl IN (SELECT nr_seq_pato_exame
								 FROM 	prescr_proc_exame_compl x,
									laudo_pac_exame_compl z
								 WHERE	x.nr_sequencia = z.nr_seq_exame_compl
								 AND	z.nr_seq_exame_compl = nr_seq_exame_compl_w
								 AND	z.nr_seq_laudo = nr_seq_laudo_p))
	order by coalesce(cd_procedimento,0),
		coalesce(ie_origem_proced,ie_origem_proced_w),
		coalesce(cd_grupo_proc,0),
		coalesce(cd_especialidade,0),
		coalesce(cd_area_procedimento,0);

C06 CURSOR FOR
	SELECT 	distinct nr_seq_exame_compl
	from   	laudo_pac_exame_compl x
	where  	nr_seq_laudo = nr_seq_laudo_p;

C07 CURSOR FOR
	SELECT 	distinct c.nr_seq_peca
	from  	prescr_proc_peca c,
		prescr_proc_exame_compl p
	where	c.nr_sequencia = p.nr_seq_prescr_proc_peca
	and	coalesce(c.ie_situacao,'A') = 'A'
	and	p.nr_sequencia = nr_seq_exame_compl_w
	and	c.nr_prescricao = nr_prescricao_w
	and	c.nr_seq_prescr = nr_seq_prescr_w
	and	not exists (SELECT 1 from laudo_grupo_questao g where g.nr_seq_laudo = nr_seq_laudo_p and g.nr_seq_peca = c.nr_seq_peca);



BEGIN

begin

select	max(nr_seq_Proc),
	max(nr_prescricao),
	max(nr_seq_prescricao),
	max(CASE WHEN coalesce(nr_seq_superior,0)=0 THEN 'N'  ELSE 'S' END ),
	substr(obter_se_laudo_adendo_peca(max(nr_sequencia)),1,1)
into STRICT	nr_seq_Proc_w,
	nr_prescricao_w,
	nr_seq_prescr_w,
	ie_laudo_compl_w,
	ie_laudo_adendo_peca_w
from	laudo_paciente
where	nr_sequencia = nr_seq_laudo_p;

select	cd_procedimento,
	ie_origem_proced
into STRICT	cd_procedimento_w,
	ie_origem_proced_w
from	procedimento_paciente
where	nr_sequencia	= nr_seq_Proc_w;

select 	cd_grupo_proc,
	cd_especialidade,
	cd_area_procedimento
into STRICT	cd_grupo_w,
	cd_especialidade_w,
	cd_area_w
from	estrutura_procedimento_v
where	cd_procedimento 	= coalesce(cd_procedimento_w,0)
and	ie_origem_proced	= coalesce(ie_origem_proced_w,0);
exception
     	when others then
	begin
	cd_grupo_w		:= 0;
	cd_especialidade_w	:= 0;
	cd_area_w		:= 0;
	end;
end;

if (ie_laudo_compl_w = 'N') or (ie_laudo_adendo_peca_w = 'S') then
	open C03; -- Procura a regra de questoes
	loop
	fetch C03 into
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		nr_seq_regra_w	:= nr_seq_regra_w;
	end loop;
	close C03;


	open C04; -- Peças laudo / adendo
	loop
	fetch C04 into
		nr_seq_peca_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */


		open C02; -- Questões da regra
		loop
		fetch C02 into
			nr_seq_grupo_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */



			select	nextval('laudo_grupo_questao_seq')
			into STRICT	nr_sequencia_w
			;

			insert into laudo_grupo_questao(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_laudo,
				nr_seq_grupo_questao,
				nr_seq_peca)
			values (nr_sequencia_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_laudo_p,
				nr_seq_grupo_w,
				nr_seq_peca_w);

			open C01; -- Item questão
			loop
			fetch C01 into
				nr_seq_item_grupo_w,
				ds_texto_padrao_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */


				select	nextval('laudo_questao_item_seq')
				into STRICT	nr_seq_questao_w
				;


				if (ie_laudo_adendo_peca_w = 'S') then
					ds_texto_padrao_w := '';
				end if;


				insert into laudo_questao_item(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_laudo_grupo,
					nr_seq_item_questao,
					ds_texto)
				values (nr_seq_questao_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_sequencia_w,
					nr_seq_item_grupo_w,
					ds_texto_padrao_w);

			end loop;
			close C01;

		end loop;
		close C02;


	end loop;
	close C04;

elsif (ie_laudo_compl_w = 'S') then
	open C06;  --Exames complementares do laudo
	loop
	fetch C06 into
		nr_seq_exame_compl_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		open C05; --Busca regra de questão para o laudo / exame complementar
		loop
		fetch C05 into
			nr_seq_regra_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			nr_seq_regra_w := nr_seq_regra_w;
		end loop;
		close c05;

		open C07; -- Peças do exame complementar
		loop
		fetch C07 into
			nr_seq_peca_w;
		EXIT WHEN NOT FOUND; /* apply on C07 */


			open C02; -- Questões da regra
			loop
			fetch C02 into
				nr_seq_grupo_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */


				select 	count(*)
				into STRICT	ie_existe_grupo_w
				from	laudo_grupo_questao
				where	nr_seq_grupo_questao = nr_seq_grupo_w
				and	nr_seq_peca = nr_seq_peca_w
				and	nr_seq_laudo = nr_seq_laudo_p;

				select	nextval('laudo_grupo_questao_seq')
				into STRICT	nr_sequencia_w
				;

				if (ie_existe_grupo_w = 0 ) then

					insert into laudo_grupo_questao(nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_laudo,
						nr_seq_grupo_questao,
						nr_seq_peca)
					values (nr_sequencia_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_laudo_p,
						nr_seq_grupo_w,
						nr_seq_peca_w);

					open C01;-- Item questão
					loop
					fetch C01 into
						nr_seq_item_grupo_w,
						ds_texto_padrao_w;
					EXIT WHEN NOT FOUND; /* apply on C01 */

						select	nextval('laudo_questao_item_seq')
						into STRICT	nr_seq_questao_w
						;

						insert into laudo_questao_item(nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_laudo_grupo,
							nr_seq_item_questao,
							ds_texto)
						values (nr_seq_questao_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_sequencia_w,
							nr_seq_item_grupo_w,
							ds_texto_padrao_w);

					end loop;
					close C01;
				end if;

			end loop;
			close C02;

		end loop;
		close C07;

	end loop;
	close C06;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE inserir_grupo_questao_regra ( nr_seq_laudo_p bigint, nm_usuario_p text) FROM PUBLIC;

