-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_desfazer_venc_pag_prest ( nr_seq_pagamento_p bigint, nm_usuario_p text, cd_tributo_erro_p INOUT pls_pag_prest_venc_trib.cd_tributo%type, ds_lista_titulos_p INOUT text, ds_lista_repasses_p INOUT text, ds_lista_notas_p INOUT text, ds_listas_pag_prest_p INOUT text) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Desfazer os vencimentos gerados do prestador, desvincula os resumos da conta, 
elimina os tributos e os registros dos vencimentos 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
	Consistir se não há título gerados que não esteja cancelado 
------------------------------------------------------------------------------------------------------------------- 
Referências: 
	PLS_DESFAZER_VENC_LOTE_PAG 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
C01 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		a.cd_tributo 
	from	pls_pag_prest_vencimento	b, 
		pls_pag_prest_venc_trib		a 
	where	a.nr_seq_vencimento		= b.nr_sequencia 
	and	b.nr_seq_pag_prestador		= nr_seq_pagamento_p;
	
nr_titulo_w			bigint;
nr_seq_lote_evento_w		bigint;
nr_seq_evento_movto_w		bigint;
nr_seq_lote_pgto_w		bigint;
nr_seq_evento_w			pls_evento.nr_sequencia%type;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
nr_seq_pag_prestador_w		bigint;
cd_tributo_w			pls_pag_prest_venc_trib.cd_tributo%type;
ds_lista_titulos_w		varchar(255);
ds_lista_repasses_w		varchar(255);
ds_lista_notas_w		varchar(255);
ds_listas_pag_prest_w		varchar(255);
ie_possui_trib_ant_w		boolean;
cd_estabelecimento_w		pls_lote_pagamento.cd_estabelecimento%type;
nr_seq_lote_w			pls_lote_pagamento.nr_sequencia%type;


BEGIN 
if (nr_seq_pagamento_p IS NOT NULL AND nr_seq_pagamento_p::text <> '') then 
 
	select	max(b.cd_estabelecimento), 
		max(b.nr_sequencia) 
	into STRICT	cd_estabelecimento_w, 
		nr_seq_lote_w 
	from	pls_lote_pagamento 	b, 
		pls_pagamento_prestador a 
	where	a.nr_seq_lote		= b.nr_sequencia 
	and	a.nr_sequencia		= nr_seq_pagamento_p;
	 
	select	max(nr_titulo) 
	into STRICT	nr_titulo_w 
	from (SELECT	max(a.nr_titulo) nr_titulo 
		from 	pls_pag_prest_vencimento	a, 
			titulo_pagar			b 
		where	a.nr_seq_pag_prestador	= nr_seq_pagamento_p 
		and	b.nr_titulo		= a.nr_titulo 
		and	b.ie_situacao <> 'C' 
		
union all
 
		SELECT	max(a.nr_titulo) nr_titulo 
		from 	pls_pag_prest_vencimento	a, 
			titulo_receber			b 
		where	a.nr_seq_pag_prestador	= nr_seq_pagamento_p 
		and	b.nr_titulo		= a.nr_titulo_receber 
		and	b.ie_situacao <> '3') alias3;
		 
	if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(236362,'NR_TITULO_W=' || nr_titulo_w);
	else 
		ie_possui_trib_ant_w	:= false;
		 
		open C01;
		loop 
		fetch C01 into	 
			nr_seq_pag_prestador_w, 
			cd_tributo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			 
			ds_lista_titulos_w	:= '';
			ds_lista_repasses_w	:= '';
			ds_lista_notas_w	:= '';
			ds_listas_pag_prest_w	:= '';
			 
			SELECT * FROM obter_tributos_posteriores(	null, null, null, nr_seq_pag_prestador_w, cd_tributo_w, ds_lista_titulos_w, ds_lista_repasses_w, ds_lista_notas_w, ds_listas_pag_prest_w) INTO STRICT ds_lista_titulos_w, ds_lista_repasses_w, ds_lista_notas_w, ds_listas_pag_prest_w;
						 
			if (ds_listas_pag_prest_w IS NOT NULL AND ds_listas_pag_prest_w::text <> '') or (ds_lista_titulos_w IS NOT NULL AND ds_lista_titulos_w::text <> '') or (ds_lista_repasses_w IS NOT NULL AND ds_lista_repasses_w::text <> '') or (ds_lista_notas_w IS NOT NULL AND ds_lista_notas_w::text <> '') then 
				ie_possui_trib_ant_w	:= true;
				exit;
			end if;
			 
			end;
		end loop;
		close C01;
		 
		if (not ie_possui_trib_ant_w) then 
			select	max(b.nr_seq_lote), 
				max(b.nr_sequencia), 
				max(b.nr_seq_lote_pgto), 
				max(b.nr_seq_evento), 
				max(b.nr_seq_prestador) 
			into STRICT	nr_seq_lote_evento_w, 
				nr_seq_evento_movto_w, 
				nr_seq_lote_pgto_w, 
				nr_seq_evento_w, 
				nr_seq_prestador_w 
			from	pls_evento_movimento		b, 
				pls_pag_prest_vencimento 	a 
			where	b.nr_sequencia		= a.nr_seq_evento_movto 
			and	a.nr_seq_pag_prestador	= nr_seq_pagamento_p 
			and	(b.nr_seq_lote_pgto IS NOT NULL AND b.nr_seq_lote_pgto::text <> '');
			 
			if (nr_seq_evento_movto_w IS NOT NULL AND nr_seq_evento_movto_w::text <> '') then 
				CALL wheb_mensagem_pck.exibir_mensagem_abort(282959,	'NR_SEQ_EVENTO_MOVTO=' || nr_seq_evento_movto_w || 
										';NR_SEQ_LOTE_EVENTO=' || nr_seq_lote_evento_w || 
										';NR_SEQ_PRESTADOR=' || nr_seq_prestador_w || 
										';NR_SEQ_EVENTO=' || nr_seq_evento_w || 
										';NR_SEQ_LOTE_PGTO='  || nr_seq_lote_pgto_w || 
										';NR_SEQ_PAGAMENTO=' || nr_seq_pagamento_p);
			end if;
			 
			-- Desfaz os itens de pagamento e as movimentações geradas pelos lançamentos programados pós tributação 
			CALL pls_desfa_iten_even_pos_tribut(nr_seq_lote_w);
			 
			update	pls_conta_medica_resumo	a 
			set	nr_seq_prest_venc_trib	 = NULL 
			where	exists (SELECT	1 
					from	pls_pag_prest_vencimento	y, 
						pls_pag_prest_venc_trib		x 
					where	y.nr_sequencia		= x.nr_seq_vencimento 
					and	y.nr_seq_pag_prestador	= nr_seq_pagamento_p 
					and	x.nr_sequencia		= a.nr_seq_prest_venc_trib) 
			and	a.ie_situacao = 'A';
			 
			update	titulo_pagar_imposto 
			set	nr_seq_pls_venc_trib	 = NULL 
			where	nr_seq_pls_venc_trib	in (SELECT	a.nr_sequencia 
				from	pls_pag_prest_venc_trib	a 
				where	exists (select	1 
						from	pls_pag_prest_vencimento	x 
						where	x.nr_sequencia		= a.nr_seq_vencimento 
						and	x.nr_seq_pag_prestador	= nr_seq_pagamento_p));
						 
			delete	from pls_pag_prest_venc_trib	a 
			where	exists (SELECT	1 
					from	pls_pag_prest_vencimento	x 
					where	x.nr_sequencia		= a.nr_seq_vencimento 
					and	x.nr_seq_pag_prestador	= nr_seq_pagamento_p);
					 
			delete	from pls_pag_venc_trib_prev	a 
			where	exists (SELECT	1 
					from	pls_pag_prest_vencimento	x 
					where	x.nr_sequencia		= a.nr_seq_vencimento 
					and	x.nr_seq_pag_prestador	= nr_seq_pagamento_p);
					 
			delete	from pls_pag_prest_venc_valor	a 
			where	exists (SELECT	1 
					from	pls_pag_prest_vencimento	x 
					where	x.nr_sequencia		= a.nr_seq_vencimento 
					and	x.nr_seq_pag_prestador	= nr_seq_pagamento_p);
					 
			delete	from pls_pag_prest_vencimento a 
			where	a.nr_seq_pag_prestador	= nr_seq_pagamento_p;
			 
			update	pls_pagamento_item 
			set	vl_item			= vl_item - coalesce(vl_desc_trib,0), 
				vl_desc_trib		= 0 
			where	nr_seq_pagamento	= nr_seq_pagamento_p;
			 
			update	pls_evento_movimento	b 
			set	b.vl_movimento	= b.vl_movimento + coalesce(b.vl_desc_trib,0), 
				b.vl_desc_trib	= 0 
			where exists (	SELECT	1 
					from	pls_pagamento_item	a 
					where	a.nr_sequencia		= b.nr_seq_pagamento_item 
					and	a.nr_seq_pagamento 	= nr_seq_pagamento_p);
					 
			update	pessoa_fisica_trib 
			set	nr_seq_lote_pgto	 = NULL 
			where	nr_seq_lote_pgto	= nr_seq_lote_w;
			 
			/* Desvincula o pagamento do prestador da nota fiscal */
 
			update	nota_fiscal a 
			set	nr_seq_pgto_prest  = NULL 
			where	(nr_seq_pgto_prest IS NOT NULL AND nr_seq_pgto_prest::text <> '') 
			and	exists (SELECT	1 
					from	pls_pagamento_nota x 
					where	x.nr_seq_nota_fiscal 	= a.nr_sequencia 
					and	x.nr_seq_pagamento	= nr_seq_pagamento_p);
		else 
			ds_lista_titulos_p	:= ds_lista_titulos_w;
			ds_lista_repasses_p	:= ds_lista_repasses_w;
			ds_lista_notas_p	:= ds_lista_notas_w;
			ds_listas_pag_prest_p	:= ds_listas_pag_prest_w;
			cd_tributo_erro_p	:= cd_tributo_w;
		end if;
	end if;
	CALL pls_atualizar_valor_pag_prest(	nr_seq_pagamento_p, nm_usuario_p, cd_estabelecimento_w);
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_desfazer_venc_pag_prest ( nr_seq_pagamento_p bigint, nm_usuario_p text, cd_tributo_erro_p INOUT pls_pag_prest_venc_trib.cd_tributo%type, ds_lista_titulos_p INOUT text, ds_lista_repasses_p INOUT text, ds_lista_notas_p INOUT text, ds_listas_pag_prest_p INOUT text) FROM PUBLIC;

