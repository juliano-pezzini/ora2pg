-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE transferir_agend_radioterapia ( nr_seq_tratamento_p bigint, dt_agendamento_p timestamp, nm_usuario_p text, dt_prevista_p timestamp, cd_estabelecimento_p bigint, nr_seq_equipamento_p bigint, ie_acao_p text) AS $body$
DECLARE


dt_prevista_w			timestamp;
dt_prevista_ant_w		timestamp;
qt_dias_diferenca_w		bigint;
nr_prescricao_w			bigint;
dt_prevista_ww			timestamp;
ie_dia_util_w			varchar(25);
dt_atualizacao_w		timestamp;

nr_seq_agenda_w			bigint;
dt_agenda_w			timestamp;
nr_seq_exist_w			bigint;
ie_permite_w			varchar(1);
ie_existe_w			varchar(1);
nr_seq_agendamento_w		bigint;
nr_seq_exist_livre_w		bigint;
dt_agenda_proxima_w		timestamp;
ie_horario_agenda_futura_w      varchar(1);
dt_agendada_futura_w  		timestamp;
dt_referencia_w			timestamp;
ie_final_de_semana_w		varchar(1);
qt_maxima_loop			smallint;
ds_msg_abort_w			varchar(255);

C01 CURSOR FOR
	SELECT	nr_sequencia,
		dt_agenda
	from	rxt_agenda
	where	nr_seq_tratamento = nr_seq_tratamento_p
	and	dt_agenda	>= dt_referencia_w
	and	ie_status_agenda	<> 'C'
	order by dt_agenda;


BEGIN
if (dt_prevista_p >= dt_agendamento_p) then
	dt_referencia_w := dt_agendamento_p;
else
	dt_referencia_w := dt_prevista_p;
end if;

ie_horario_agenda_futura_w := Obter_Param_Usuario(3030, 53, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, obter_estabelecimento_ativo, ie_horario_agenda_futura_w);

qt_dias_diferenca_w	:= 0;
dt_prevista_ant_w	:= null;
dt_atualizacao_w	:= clock_timestamp();
qt_maxima_loop		:= 1;

insert into rxt_agenda_temp(NR_SEQUENCIA,NR_SEQ_RXT_AGENDA,IE_TIPO,NM_USUARIO,DT_AGENDA)
SELECT	nextval('rxt_agenda_temp_seq'),nr_sequencia, null, nm_usuario_p, dt_agenda
from	rxt_agenda
where	nr_seq_tratamento = nr_seq_tratamento_p
and	dt_agenda	>= dt_referencia_w;

update	rxt_agenda
set	ie_transferencia	= 'S'
where	nr_seq_tratamento	= nr_seq_tratamento_p
and	dt_agenda		>= dt_referencia_w
and	ie_status_agenda	<> 'C';
commit;

open	c01;
loop
fetch	c01 into
	nr_seq_agenda_w,
	dt_agenda_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	if (coalesce(dt_prevista_ant_w::text, '') = '') then
		begin

		dt_prevista_ww	:= dt_prevista_p;

		ie_dia_util_w	:= Obter_Se_Dia_Valido_Radio(nr_seq_equipamento_p, dt_prevista_ww, cd_estabelecimento_p);

		while(ie_dia_util_w	= 'N') loop
			begin
			dt_prevista_ww	:= dt_prevista_ww + 1;
			ie_dia_util_w	:= Obter_Se_Dia_Valido_Radio(nr_seq_equipamento_p, dt_prevista_ww, cd_estabelecimento_p);

			end;
		end loop;

		select	max(nr_sequencia)
		into STRICT	nr_seq_exist_w
		from	rxt_agenda
		where	nr_seq_tratamento 	= nr_seq_tratamento_p
		and	nr_seq_equipamento	= nr_seq_equipamento_p
		and	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) 	= PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0);

		if (nr_seq_exist_w > 0) then

			begin

			update	rxt_agenda
			set	dt_agenda	= PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0) + 1/86400,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= dt_atualizacao_w
			where	nr_sequencia	= nr_seq_exist_w;

			select	nextval('rxt_agenda_seq')
			into STRICT	nr_seq_agendamento_w
			;

			insert into rxt_agenda(	nr_sequencia		       ,
					        dt_agenda		       ,
						dt_atualizacao_nrec            ,
						nm_usuario_nrec                ,
						dt_atualizacao                 ,
						nm_usuario                     ,
						nr_seq_tratamento              ,
						nr_seq_equipamento             ,
						nr_minuto_duracao              ,
						ie_status_agenda               ,
						dt_agendamento                 ,
						nm_usuario_agenda              ,
						nr_seq_classif                 ,
						dt_confirmacao                 ,
						nm_usuario_confirmacao         ,
						dt_chegada                     ,
						nm_usuario_chegada             ,
						dt_tratamento                  ,
						nm_usuario_tratamento          ,
						dt_execucao                    ,
						nm_usuario_execucao            ,
						nm_usuario_acesso              ,
						nr_seq_fase                    ,
						nr_seq_dia                     ,
						nr_seq_dia_fase                ,
						ie_tipo_agenda                 ,
						cd_pessoa_fisica               ,
						dt_simulacao                   ,
						nm_usuario_simulacao           ,
						dt_exec_simulacao              ,
						nm_usuario_exec_simulacao      ,
						nr_atendimento                 ,
						nr_seq_campo_roentgen)
				        (SELECT nr_seq_agendamento_w	       ,
						PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)     ,
						dt_atualizacao_nrec            ,
						nm_usuario_nrec                ,
						dt_atualizacao                 ,
						nm_usuario                     ,
						nr_seq_tratamento              ,
						nr_seq_equipamento             ,
						nr_minuto_duracao              ,
						ie_status_agenda               ,
						dt_agendamento                 ,
						nm_usuario_agenda              ,
						nr_seq_classif                 ,
						dt_confirmacao                 ,
						nm_usuario_confirmacao         ,
						dt_chegada                     ,
						nm_usuario_chegada             ,
						dt_tratamento                  ,
						nm_usuario_tratamento          ,
						dt_execucao                    ,
						nm_usuario_execucao            ,
						nm_usuario_acesso              ,
						nr_seq_fase                    ,
						nr_seq_dia                     ,
						nr_seq_dia_fase                ,
						ie_tipo_agenda                 ,
						cd_pessoa_fisica               ,
						dt_simulacao                   ,
						nm_usuario_simulacao           ,
						dt_exec_simulacao              ,
						nm_usuario_exec_simulacao      ,
						nr_atendimento                 ,
						nr_seq_campo_roentgen
					from	rxt_agenda
					where	nr_sequencia = nr_seq_agenda_w);

			insert	into rxt_agenda_fase( nr_sequencia,
							dt_atualizacao         ,
							nm_usuario             ,
							dt_atualizacao_nrec    ,
							nm_usuario_nrec        ,
							nr_seq_agenda_rxt      ,
							nr_seq_fase            ,
							nr_seq_dia             ,
							nr_seq_dia_fase        ,
							nr_seq_volume          ,
							nr_seq_campo_roentgen  	)
					(SELECT		nextval('rxt_agenda_fase_seq'),
							dt_atualizacao         ,
							nm_usuario             ,
							dt_atualizacao_nrec    ,
							nm_usuario_nrec        ,
							nr_seq_agendamento_w   ,
							nr_seq_fase            ,
							nr_seq_dia             ,
							nr_seq_dia_fase        ,
							nr_seq_volume          ,
							nr_seq_campo_roentgen
					from	rxt_agenda_fase
					where	nr_seq_agenda_rxt = nr_seq_agenda_w);

			delete	FROM rxt_agenda_fase
			where	nr_seq_agenda_rxt = nr_seq_agenda_w;

			delete	FROM rxt_agenda
			where	nr_sequencia	= nr_seq_agenda_w;

			end;

		else
			begin
			CALL rxt_gerar_agenda_equip(	nr_seq_equipamento_p,
					pkg_date_utils.get_time(dt_prevista_ww,0,0,0),
					'S',
					nm_usuario_p);

			select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_existe_w
			from	rxt_agenda
			where	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) = PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)
			and	nr_seq_equipamento	= nr_seq_equipamento_p
			and	ie_status_agenda = 'L';

			if (ie_existe_w = 'N') then

				--Não é possível transferir todos os agendamentos para esta data. Verfique as regras de horário do equipamento! #@DT_PREVISTA#@
				ds_msg_abort_w := substr(obter_texto_dic_objeto(264179, wheb_usuario_pck.get_nr_seq_idioma, 'DT_PREVISTA=' || dt_prevista_ww),1,255);
				goto FinalizarTransf;
			end if;

			update	rxt_agenda
			set	dt_agenda	= PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= dt_atualizacao_w
			where	nr_sequencia	= nr_seq_agenda_w;

			end;
		end if;

		end;
	else
		begin

		qt_dias_diferenca_w	:= qt_dias_diferenca_w + 1;
		qt_maxima_loop          := 1;

		if (ie_horario_agenda_futura_w = 'S') and (ie_acao_p <> 'B') then --parametro 53
			dt_prevista_ww := dt_prevista_p + qt_dias_diferenca_w;
		        dt_agendada_futura_w := Rxt_Ret_Hor_Prox_Agenda(nr_seq_tratamento_p, nr_seq_equipamento_p, dt_prevista_ww, nm_usuario_p);
			dt_prevista_ww  := pkg_date_utils.get_time(dt_prevista_ww, TO_CHAR(dt_agendada_futura_w,'hh24:mi')); --- e for o parametro 53 :dt_prevista_p + horas da dt_agenda_w;
		else
			dt_prevista_ww	:= dt_prevista_p + qt_dias_diferenca_w;
		end if;

		ie_dia_util_w	:= Obter_Se_Dia_Valido_Radio(nr_seq_equipamento_p, dt_prevista_ww, cd_estabelecimento_p);

		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_exist_w
		from	rxt_agenda a
		where	nr_seq_tratamento 	= nr_seq_tratamento_p
		and	nr_seq_equipamento	= nr_seq_equipamento_p
		and	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) = PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)
		and	ie_status_agenda not in ('L','C')
		and	exists (SELECT 1
				from 	rxt_agenda_temp w
				where 	nm_usuario = nm_usuario_p
				and 	ie_tipo = 'S'
				and 	a.nr_sequencia = w.NR_SEQ_RXT_AGENDA);

		if (nr_seq_exist_w > 0) then
			ie_dia_util_w	:= 'N';
		end if;

		select coalesce(max(ie_final_semana), 'N')
		into STRICT ie_final_de_semana_w
		from rxt_fase_tratamento
		where nr_sequencia = rxt_obter_fase_trat_agenda(nr_seq_tratamento_p, dt_prevista_ww);

		if (ie_final_de_semana_w = 'N' and (Obter_Se_Dia_Util(dt_prevista_ww, cd_estabelecimento_p) = 'N')) then
			ie_dia_util_w	:= 'N';
		end if;


		while (ie_dia_util_w	= 'N' AND qt_maxima_loop < 500) loop
			begin

			qt_maxima_loop := qt_maxima_loop + 1;

			if (ie_horario_agenda_futura_w = 'S') and (ie_acao_p <> 'B') then --parametro 53
				dt_prevista_ww := Rxt_Ret_Hor_Prox_Agenda(nr_seq_tratamento_p, nr_seq_equipamento_p, dt_prevista_ww + 1, nm_usuario_p);
				qt_dias_diferenca_w	:= qt_dias_diferenca_w + 1;
			else
				dt_prevista_ww	:= dt_prevista_ww + 1;
				qt_dias_diferenca_w	:= qt_dias_diferenca_w + 1;
			end if;

			ie_dia_util_w	:= Obter_Se_Dia_Valido_Radio(nr_seq_equipamento_p, dt_prevista_ww, cd_estabelecimento_p);

			select coalesce(max(ie_final_semana), 'N')
			into STRICT ie_final_de_semana_w
			from rxt_fase_tratamento
			where nr_sequencia = rxt_obter_fase_trat_agenda(nr_seq_tratamento_p, dt_prevista_ww);

			if (ie_final_de_semana_w = 'N' and (Obter_Se_Dia_Util(dt_prevista_ww, cd_estabelecimento_p) = 'N')) then
				ie_dia_util_w	:= 'N';
			end if;

			if (ie_dia_util_w = 'S') then

				select	coalesce(max(nr_sequencia),0)
				into STRICT	nr_seq_exist_w
				from	rxt_agenda a
				where	nr_seq_tratamento 	= nr_seq_tratamento_p
				and	nr_seq_equipamento	= nr_seq_equipamento_p
				and	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) = PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)
				and	ie_status_agenda not in ('L','C')
				and	exists (SELECT 1
						from 	rxt_agenda_temp w
						where 	nm_usuario = nm_usuario_p
						and 	ie_tipo = 'S'
						and 	a.nr_sequencia = w.NR_SEQ_RXT_AGENDA);

				if (nr_seq_exist_w > 0) then
					ie_dia_util_w	:= 'N';
				end if;

			end if;

			end;
		end loop;

		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_exist_w
		from	rxt_agenda
		where	nr_seq_tratamento 	= nr_seq_tratamento_p
		and	nr_seq_equipamento	= nr_seq_equipamento_p
		and	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) = PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)
		and	ie_status_agenda <> 'L';

		delete	FROM rxt_agenda
		where	nr_seq_equipamento	= nr_seq_equipamento_p
		and	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) = PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)
		and	ie_status_agenda = 'L';

		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_exist_livre_w
		from	rxt_agenda
		where	nr_seq_equipamento	= nr_seq_equipamento_p
		and	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) = PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)
		and	ie_status_agenda = 'L';

		if (nr_seq_exist_livre_w > 0) then


			select 	max(dt_agenda)
			into STRICT	dt_agenda_proxima_w
			from	rxt_agenda
			where	nr_sequencia 	= nr_seq_exist_livre_w;

			delete	FROM rxt_agenda
			where	nr_sequencia	= nr_seq_exist_livre_w;

			update	rxt_agenda
			set	dt_agenda	= dt_agenda_proxima_w,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= dt_atualizacao_w
			where	nr_sequencia	= nr_seq_agenda_w;

		elsif (nr_seq_exist_w > 0) then

			begin

			select 	max(dt_agenda)
			into STRICT	dt_agenda_proxima_w
			from	rxt_agenda
			where	nr_seq_tratamento 	= nr_seq_tratamento_p
			and	nr_seq_equipamento	= nr_seq_equipamento_p
			and	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) = PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)
			and	ie_status_agenda <> 'L';

			update	rxt_agenda
			set	dt_agenda	= dt_agenda_proxima_w + rownum/86400,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= dt_atualizacao_w
			where	nr_seq_tratamento 	= nr_seq_tratamento_p
			and	nr_seq_equipamento	= nr_seq_equipamento_p
			and	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) = PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)
			and	ie_status_agenda <> 'L';

			select	nextval('rxt_agenda_seq')
			into STRICT	nr_seq_agendamento_w
			;

			begin
			insert into rxt_agenda(	nr_sequencia		       ,
					        dt_agenda		       ,
						dt_atualizacao_nrec            ,
						nm_usuario_nrec                ,
						dt_atualizacao                 ,
						nm_usuario                     ,
						nr_seq_tratamento              ,
						nr_seq_equipamento             ,
						nr_minuto_duracao              ,
						ie_status_agenda               ,
						dt_agendamento                 ,
						nm_usuario_agenda              ,
						nr_seq_classif                 ,
						dt_confirmacao                 ,
						nm_usuario_confirmacao         ,
						dt_chegada                     ,
						nm_usuario_chegada             ,
						dt_tratamento                  ,
						nm_usuario_tratamento          ,
						dt_execucao                    ,
						nm_usuario_execucao            ,
						nm_usuario_acesso              ,
						nr_seq_fase                    ,
						nr_seq_dia                     ,
						nr_seq_dia_fase                ,
						ie_tipo_agenda                 ,
						cd_pessoa_fisica               ,
						dt_simulacao                   ,
						nm_usuario_simulacao           ,
						dt_exec_simulacao              ,
						nm_usuario_exec_simulacao      ,
						nr_atendimento                 ,
						nr_seq_campo_roentgen)
				        (SELECT nr_seq_agendamento_w	       ,
						PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)     ,
						dt_atualizacao_nrec            ,
						nm_usuario_nrec                ,
						dt_atualizacao                 ,
						nm_usuario                     ,
						nr_seq_tratamento              ,
						nr_seq_equipamento             ,
						nr_minuto_duracao              ,
						ie_status_agenda               ,
						dt_agendamento                 ,
						nm_usuario_agenda              ,
						nr_seq_classif                 ,
						dt_confirmacao                 ,
						nm_usuario_confirmacao         ,
						dt_chegada                     ,
						nm_usuario_chegada             ,
						dt_tratamento                  ,
						nm_usuario_tratamento          ,
						dt_execucao                    ,
						nm_usuario_execucao            ,
						nm_usuario_acesso              ,
						nr_seq_fase                    ,
						nr_seq_dia                     ,
						nr_seq_dia_fase                ,
						ie_tipo_agenda                 ,
						cd_pessoa_fisica               ,
						dt_simulacao                   ,
						nm_usuario_simulacao           ,
						dt_exec_simulacao              ,
						nm_usuario_exec_simulacao      ,
						nr_atendimento                 ,
						nr_seq_campo_roentgen
					from	rxt_agenda
					where	nr_sequencia = nr_seq_agenda_w);
			exception
				when others then
				--#@DS_ERRO#@ #@NR_SEQ_TRATAMENTO#@ #@NR_SEQ_EQUIPAMENTO#@ #@DT_PREVISTA#@ #@DT_AGENDA#@
				ds_msg_abort_w := substr(obter_texto_dic_objeto(264206, wheb_usuario_pck.get_nr_seq_idioma, 'DS_ERRO='||sqlerrm(SQLSTATE) || ';' ||
										'NR_SEQ_TRATAMENTO='||nr_seq_tratamento_p || ';' ||
										'NR_SEQ_EQUIPAMENTO='||nr_seq_equipamento_p || ';' ||
										'DT_PREVISTA='||PKG_DATE_FORMATERS.to_varchar(dt_prevista_ww, 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p) || ';' ||
										'DT_AGENDA=' || PKG_DATE_FORMATERS.to_varchar(dt_agenda_w, 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p)),1,255);
				goto FinalizarTransf;
			end;

			insert into rxt_agenda_temp(NR_SEQUENCIA,NR_SEQ_RXT_AGENDA,IE_TIPO,NM_USUARIO)
			SELECT	nextval('rxt_agenda_temp_seq'),nr_seq_agendamento_w, 'S', nm_usuario_p
			;

			insert	into rxt_agenda_fase( nr_sequencia,
							dt_atualizacao         ,
							nm_usuario             ,
							dt_atualizacao_nrec    ,
							nm_usuario_nrec        ,
							nr_seq_agenda_rxt      ,
							nr_seq_fase            ,
							nr_seq_dia             ,
							nr_seq_dia_fase        ,
							nr_seq_volume          ,
							nr_seq_campo_roentgen  	)
					(SELECT		nextval('rxt_agenda_fase_seq'),
							dt_atualizacao         ,
							nm_usuario             ,
							dt_atualizacao_nrec    ,
							nm_usuario_nrec        ,
							nr_seq_agendamento_w   ,
							nr_seq_fase            ,
							nr_seq_dia             ,
							nr_seq_dia_fase        ,
							nr_seq_volume          ,
							nr_seq_campo_roentgen
					from	rxt_agenda_fase
					where	nr_seq_agenda_rxt = nr_seq_agenda_w);

			delete	FROM rxt_agenda_fase
			where	nr_seq_agenda_rxt = nr_seq_agenda_w;

			delete	FROM rxt_agenda
			where	nr_sequencia	= nr_seq_agenda_w;

			end;

		else
			begin
			CALL rxt_gerar_agenda_equip(	nr_seq_equipamento_p,
					pkg_date_utils.get_time(dt_prevista_ww,0,0,0),
					'S',
					nm_usuario_p);

			select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_existe_w
			from	rxt_agenda
			where	PKG_DATE_UTILS.start_of(dt_agenda,'mi',0) = PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0)
			and	nr_seq_equipamento	= nr_seq_equipamento_p
			and	ie_status_agenda = 'L';

			if (ie_existe_w = 'N') then
				--Não é possível transferir todos os agendamentos para esta data. Verfique as regras de horário do equipamento! #@DT_PREVISTA#@
				ds_msg_abort_w := substr(obter_texto_dic_objeto(264179, wheb_usuario_pck.get_nr_seq_idioma, 'DT_PREVISTA=' || dt_prevista_ww),1,255);
				goto FinalizarTransf;
			end if;

			update	rxt_agenda
			set	dt_agenda	= PKG_DATE_UTILS.start_of(dt_prevista_ww,'mi',0),
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= dt_atualizacao_w
			where	nr_sequencia	= nr_seq_agenda_w;

			end;
		end if;

		end;
	end if;

	dt_prevista_ant_w	:= PKG_DATE_UTILS.start_of(dt_agenda_w,'mi',0);

	update	rxt_agenda_temp
	set	ie_tipo = 'S'
	where	NR_SEQ_RXT_AGENDA = nr_seq_agenda_w;

	end;
end loop;
close c01;

commit;
goto FinalizarTransf;

<<FinalizarTransf>>
rollback;
delete 	FROM rxt_agenda_temp
where 	nm_usuario = nm_usuario_p;

update	rxt_agenda
set	ie_transferencia	= 'N'
where	nr_seq_tratamento	= nr_seq_tratamento_p
and	dt_agenda		>= dt_referencia_w
and	ie_status_agenda	<> 'C';
commit;

if (ds_msg_abort_w IS NOT NULL AND ds_msg_abort_w::text <> '') then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(ds_msg_abort_w);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE transferir_agend_radioterapia ( nr_seq_tratamento_p bigint, dt_agendamento_p timestamp, nm_usuario_p text, dt_prevista_p timestamp, cd_estabelecimento_p bigint, nr_seq_equipamento_p bigint, ie_acao_p text) FROM PUBLIC;

