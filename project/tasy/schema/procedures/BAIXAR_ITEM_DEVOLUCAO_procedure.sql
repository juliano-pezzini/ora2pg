-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baixar_item_devolucao ( nr_devolucao_p bigint, nr_sequencia_p bigint, qt_baixar_p bigint, cd_tipo_baixa_p bigint, cd_local_estoque_p bigint, nr_seq_lote_fornec_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
cd_cgc_fornec_w			varchar(14);
cd_estabelecimento_w		bigint;
cd_material_w			integer;
cd_motivo_devolucao_w		varchar(03);
cd_pessoa_usuario_w		varchar(10);
cd_setor_atendimento_w		integer;
cd_unidade_medida_w		varchar(30);
ds_erro_w			varchar(500);
ds_material_w			varchar(255);
dt_atendimento_w			timestamp;
dt_entrada_unidade_w		timestamp;
dt_entrada_unidade_dev_w		timestamp;
dt_recebimento_w			timestamp;
ie_atualiza_estoque_w		varchar(1);
ie_baixa_estoque_pac_w		varchar(01);
ie_consignado_w			varchar(01);
ie_conta_paciente_w		varchar(1);
ie_fim_conta_w			varchar(1);
nr_atendimento_w			bigint;
nr_prescricao_w			bigint;
nr_sequencia_w			bigint;
nr_seq_atendimento_w		bigint;
nr_seq_lote_fornec_w		bigint;
nr_seq_prescricao_w		bigint;
qt_baixar_w			double precision;
qt_material_w			double precision;
qt_material_disp_w			double precision	:= 0;
qt_mat_atend_w			bigint;


BEGIN 
 
qt_baixar_w			:= qt_baixar_p;
 
/* obter ações do tipo de baixa */
 
 
select	coalesce(max(a.ie_conta_paciente),'N'), 
	coalesce(max(a.ie_atualiza_estoque),'N') 
into STRICT	ie_conta_paciente_w, 
	ie_atualiza_estoque_w 
from	tipo_baixa_prescricao a 
where	a.ie_prescricao_devolucao = 'D' 
and	a.cd_tipo_baixa = cd_tipo_baixa_p;
 
/* obter dados da devolução */
 
 
select	max(a.nr_atendimento), 
	max(a.cd_setor_atendimento), 
	max(a.dt_entrada_unidade) 
into STRICT	nr_atendimento_w, 
	cd_setor_atendimento_w,	 
	dt_entrada_unidade_dev_w 
from	devolucao_material_pac a 
where	a.nr_devolucao	= nr_devolucao_p;
 
/* obter dados do item */
 
begin 
select	coalesce(max(b.dt_entrada_unidade), dt_entrada_unidade_dev_w) dt_entrada_unidade, 
	max(b.cd_material), 
	max(b.qt_material), 
	max(b.dt_atendimento), 
	max(b.cd_unidade_medida), 
	max(b.nr_prescricao), 
	CASE WHEN max(b.nr_sequencia_prescricao)=0 THEN  null  ELSE max(b.nr_sequencia_prescricao) END , 
	max(b.cd_motivo_devolucao), 
	max(b.cd_cgc_fornec), 
	max(b.nr_seq_atendimento), 
	substr(obter_desc_material(max(b.cd_material)),1,255), 
	max(b.nr_seq_lote_fornec) 
into STRICT	dt_entrada_unidade_w, 
	cd_material_w, 
	qt_material_w, 
	dt_atendimento_w, 
	cd_unidade_medida_w, 
	nr_prescricao_w, 
	nr_seq_prescricao_w, 
	cd_motivo_devolucao_w, 
	cd_cgc_fornec_w, 
	nr_seq_atendimento_w, 
	ds_material_w, 
	nr_seq_lote_fornec_w 
from	item_devolucao_material_pac b 
where	b.nr_devolucao	= nr_devolucao_p 
and	b.nr_sequencia = nr_sequencia_p 
and	coalesce(b.dt_recebimento::text, '') = '';
exception when others then 
	ds_erro_w	:= sqlerrm(SQLSTATE);
	-- Erro ao obter os dados do item a devolver:	Sequencia:	#@NR_SEQUENCIA#@	#@DS_ERRO#@ 
	CALL Wheb_mensagem_pck.exibir_mensagem_abort( 261363 , 'NR_SEQUENCIA='||nr_sequencia_p||';DS_ERRO='||ds_erro_w);
end;	
 
if (coalesce(nr_seq_lote_fornec_p,0) <> nr_seq_lote_fornec_w) then 
	-- O lote fornecedor lido é diferente do registrado na Devolução! 
	CALL Wheb_mensagem_pck.exibir_mensagem_abort( 261364 );
end if;
 
/* obter dados do material e pessoa do usuário*/
 
select	obter_se_baixa_estoque_pac(cd_setor_atendimento_w, cd_material_w,0,null), 
	obter_se_mat_consignado(cd_material_w), 
	obter_pessoa_fisica_usuario(nm_usuario_p,'C') 
into STRICT	ie_baixa_estoque_pac_w, 
	ie_consignado_w, 
	cd_pessoa_usuario_w
;
 
if (coalesce(nr_prescricao_w,0) > 0) and (coalesce(nr_seq_prescricao_w,0) > 0) then 
 
	select	count(*) 
	into STRICT	qt_mat_atend_w 
	from	material_atend_paciente 
	where	nr_prescricao		= nr_prescricao_w 
	and	nr_sequencia_prescricao	= nr_seq_prescricao_w;
	 
	if (qt_mat_atend_w = 0) then 
		-- O material #@DS_MATERIAL_W#@ não pode ser devolvido porque não foi executado! 
		CALL Wheb_mensagem_pck.exibir_mensagem_abort( 196044 , 'DS_MATERIAL_W='||ds_material_w);
	end if;
 
	select	coalesce(sum(qt_material),0) 
	into STRICT	qt_material_disp_w 
	from	material_atend_paciente 
	where	nr_prescricao		= nr_prescricao_w 
	and	nr_sequencia_prescricao	= nr_seq_prescricao_w;
 
	if (qt_baixar_w > qt_material_disp_w) then 
		select	sum(b.qt_material) 
		into STRICT	qt_material_disp_w 
		from	devolucao_material_pac a, 
    			item_devolucao_material_pac b 
		where	a.nr_devolucao = nr_devolucao_p 
		and	b.nr_devolucao = a.nr_devolucao 
		and	b.cd_material	= cd_material_w 
		and	coalesce(b.dt_recebimento::text, '') = '';
 
		if (qt_baixar_w < qt_material_disp_w) and (ie_conta_paciente_w = 'S') then 
			-- O saldo: #@QT_MATERIAL_DISP_W#@ é menor que a quantidade a devolver: #@QT_MATERIAL_ESTOQUE_P#@. 
			CALL Wheb_mensagem_pck.exibir_mensagem_abort( 196043 , 'QT_MATERIAL_DISP_W='||qt_material_disp_w||';QT_MATERIAL_ESTOQUE_P='||qt_baixar_w);
		end if;
	end if;
end if;
 
/*  se paciente já teve o fim atendimento não gerar nova conta */
 
 
select	coalesce(max(ie_fim_conta),'F'), 
	coalesce(max(dt_alta), clock_timestamp()), 
	max(cd_estabelecimento) 
into STRICT	ie_fim_conta_w, 
	dt_recebimento_w, 
	cd_estabelecimento_w 
from	atendimento_paciente 
where	nr_atendimento	= nr_atendimento_w;
 
if (ie_fim_conta_w = 'F') and (ie_conta_paciente_w = 'S') then 
	ie_conta_paciente_w	:= 'N';
end if;
 
/*  inserir dados do material */
 
/* inicio gravar na conta paciente */
	 
if (ie_conta_paciente_w = 'S') then 
 
	select	nextval('material_atend_paciente_seq') 
	into STRICT	nr_sequencia_w         
   	;
	insert into material_atend_paciente( 
		nr_sequencia, 
		nr_atendimento, 
 		dt_entrada_unidade, 
		cd_material, 
		dt_atendimento, 
		cd_unidade_medida, 
		qt_material, 
		dt_atualizacao, 
		nm_usuario, 
		cd_convenio, 
		cd_categoria, 
		dt_prescricao, 
		cd_material_prescricao, 
		ie_via_aplicacao, 
		vl_material, 
		cd_tab_preco_material, 
		dt_vigencia_tabela, 
		nr_prescricao, 
		nr_sequencia_prescricao, 
		cd_acao, 
		cd_setor_atendimento, 
		qt_devolvida, 
		cd_motivo_devolucao, 
		nr_cirurgia, 
		nr_doc_convenio, 
		qt_executada, 
		dt_conta, 
		vl_unitario, 
		cd_proced_referencia, 
		nr_aih, 
		ie_valor_informado, 
		nr_seq_autorizacao, 
		cd_material_exec, 
		nr_seq_atepacu, 
		cd_cgc_fornecedor, 
		ie_auditoria, 
		cd_local_estoque, 
		nr_seq_cor_exec, 
		nr_seq_aih, 
		nr_seq_lote_fornec) 
	SELECT	nr_sequencia_w, 
		nr_atendimento_w, 
 		dt_entrada_unidade_w, 
		cd_material_w, 
		dt_recebimento_w, 
		cd_unidade_medida_w, 
		(0 - qt_baixar_w), 
		clock_timestamp(), 
		nm_usuario_p, 
		cd_convenio, 
		cd_categoria, 
		dt_prescricao, 
		cd_material_prescricao, 
		ie_via_aplicacao, 
		(qt_baixar_w * vl_unitario * -1), 
		cd_tab_preco_material, 
		dt_vigencia_tabela, 
		nr_prescricao_w, 
		coalesce(nr_seq_prescricao_w, nr_sequencia_prescricao) , 
		2, 
		cd_setor_atendimento, 
		qt_baixar_w, 
		cd_motivo_devolucao_w, 
		nr_cirurgia, 
		nr_doc_convenio, 
		0, 
		dt_conta, 
		vl_unitario, 
		cd_proced_referencia, 
		nr_aih, 
		'N', 
		nr_seq_autorizacao, 
		cd_material_w, 
		nr_seq_atepacu, 
		cd_cgc_fornec_w, 
		ie_auditoria, 
		null, 
		100, 
		nr_seq_aih, 
		nr_seq_lote_fornec_w 
  	from	material_atend_paciente 
	where	nr_sequencia = nr_seq_atendimento_w;
	 
	update	material_atend_paciente 
	set	cd_local_estoque	= cd_local_estoque_p 
	where	nr_sequencia	= nr_sequencia_w;
end if;
 
/*  recalcular o valor do material/conta devido alteracao da quantidade */
 
 
if (nr_atendimento_w > 0) and (ie_conta_paciente_w = 'S')then 
	CALL atualiza_preco_material(nr_sequencia_w, nm_usuario_p);
end if;
 
/*  Gerar movimento de estoque */
 
if (coalesce(cd_local_estoque_p,0) <> 0) and (ie_baixa_estoque_pac_w = 'S') and (ie_atualiza_estoque_w = 'S') then 
 
	CALL gerar_consumo_paciente(	nr_atendimento_w, 
				cd_material_w, 
				dt_recebimento_w, 
				'2', 
				cd_local_estoque_p,				 
				qt_baixar_w, 
				cd_setor_atendimento_w, 
				cd_unidade_medida_w, 
				nm_usuario_p, 
				'I', 
				nr_prescricao_w, 
				nr_seq_prescricao_w, 
				cd_cgc_fornec_w, 
				nr_devolucao_p, 
				nr_seq_lote_fornec_w);
end if;
 
/* Atualiza item devolução baixado */
 
update	item_devolucao_material_pac 
set	dt_recebimento		= clock_timestamp(), 
	nm_usuario_receb 		= nm_usuario_p, 
	ie_tipo_baixa_estoque	= cd_tipo_baixa_p, 
	cd_pessoa_fisica_receb	= cd_pessoa_usuario_w, 
	qt_material_estoque		= qt_baixar_w, 
	nm_usuario		= nm_usuario_p, 
	dt_atualizacao		= clock_timestamp() 
where	nr_devolucao		= nr_devolucao_p 
and	nr_sequencia		= nr_sequencia_p;
 
/* Atualizar OC/Comunic interna consignado*/
 
if (ie_consignado_w <> '0') then 
	CALL atualizar_ordem_compra_consig(	cd_estabelecimento_w, 
					nr_atendimento_w, 
					nr_prescricao_w, 
					cd_material_w, 
					qt_baixar_w, 
					cd_local_estoque_p, 
					cd_cgc_fornec_w, 
					nm_usuario_p);
end if;
 
commit;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baixar_item_devolucao ( nr_devolucao_p bigint, nr_sequencia_p bigint, qt_baixar_p bigint, cd_tipo_baixa_p bigint, cd_local_estoque_p bigint, nr_seq_lote_fornec_p bigint, nm_usuario_p text) FROM PUBLIC;

