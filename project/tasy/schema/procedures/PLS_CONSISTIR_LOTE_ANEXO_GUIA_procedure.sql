-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_lote_anexo_guia (nr_seq_lote_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Consistir as guias enviadas no pedido de Lote Anexo Guias 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ x ] Tasy (Delphi/Java) [ x ] Portal [ ] Relatórios [ ] Outros: 
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
Pontos de atenção:  
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/ 
					 
cd_guia_referencia_w	varchar(20);
cd_guia_prestador_w	varchar(20);
nr_seq_lote_guia_imp_w	bigint;
qt_registros_w		bigint;
qt_registros_glosa_w	bigint;
nr_seq_guia_plano_w	bigint;
ie_status_w		varchar(1);
ie_status_lote_w	varchar(2) := 'CS';
cd_usuario_plano_w	pls_lote_anexo_guias_imp.cd_usuario_plano%type;
nr_seq_segurado_w	pls_segurado.nr_sequencia%type;
cd_guia_ww		varchar(20);
ie_tipo_anexo_w		pls_lote_anexo_guias_imp.ie_tipo_anexo%type;
ds_tipo_anexo_w		varchar(60);

 
C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		cd_guia_referencia, 
		cd_guia_prestador, 
		nr_seq_guia, 
		cd_usuario_plano, 
		ie_tipo_anexo, 
		obter_valor_dominio(5688, ie_tipo_anexo) ds_tipo 
	from	pls_lote_anexo_guias_imp 
	where	nr_seq_lote_anexo = nr_seq_lote_p;


BEGIN 
 
open c01;
loop 
fetch c01 into	nr_seq_lote_guia_imp_w, 
		cd_guia_referencia_w, 
		cd_guia_prestador_w, 
		nr_seq_guia_plano_w, 
		cd_usuario_plano_w, 
		ie_tipo_anexo_w, 
		ds_tipo_anexo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	qt_registros_glosa_w	:= 0;
	 
	--Verifica se o beneficiário existe beneficiário na base	 
	nr_seq_segurado_w := pls_obter_dados_carteira(null,cd_usuario_plano_w,'S');
	 
	if ( coalesce(nr_seq_segurado_w::text, '') = '' ) then 
		-- 1001 - Número da carteira inválido 
		CALL pls_inserir_anexo_glosa_aut(1001, nr_seq_lote_guia_imp_w, null, null, 'Não foi encontrado o benficiário na base', nm_usuario_p);
		qt_registros_glosa_w	:= 1;
	elsif ( coalesce(cd_guia_referencia_w::text, '') = '' ) then 
		/* jtonon - 05/06/13 - Consiste a glosa '1303' - Não existe o Número Guia Principal informado */
 
		CALL pls_inserir_anexo_glosa_aut(1303, nr_seq_lote_guia_imp_w, null, null, 'Não foi informado o campo: Guia referência, no arquivo XML', nm_usuario_p);
		qt_registros_glosa_w	:= 1;
	else 
		cd_guia_ww := cd_guia_referencia_w;
		 
		--Sequência da guia preenchida ao realizar a importação do arquivo na procedure PLS_SALVAR_LOTE_AX_GUIAS_AUT 
		if ( coalesce(nr_seq_guia_plano_w::text, '') = '' ) then 
			/* jtonon - 05/06/13 - Consiste a glosa '1306' - Não existe Número Guia Principal e/ou Código Guia Principal */
 
			CALL pls_inserir_anexo_glosa_aut(1306, nr_seq_lote_guia_imp_w, null, null, 'Guia não existe na base ou já foi autorizada', nm_usuario_p);
			qt_registros_glosa_w	:= 1;
		else 
			select	count(1) 
			into STRICT	qt_registros_w 
			from	pls_lote_anexo_guias_aut 
			where	nr_seq_guia	= nr_seq_guia_plano_w 
			and	ie_tipo_anexo 	= ie_tipo_anexo_w;
			 
			if ( qt_registros_w > 0 ) then			 
				/* 1308 - Guia já apresentada */
 
				CALL pls_inserir_anexo_glosa_aut(1308, nr_seq_lote_guia_imp_w, null, null, 'Guia já possui o tipo de anexo: '||ds_tipo_anexo_w||' gerado no sistema' , nm_usuario_p);
				qt_registros_glosa_w	:= 1;			
			else			 
				select	count(1) 
				into STRICT	qt_registros_w 
				from 	pls_conta 
				where	cd_guia = cd_guia_ww 
				and	nr_seq_segurado = nr_seq_segurado_w;
 
				if (qt_registros_w > 0) then 
					/* 1308 - Guia já apresentada */
 
					CALL pls_inserir_anexo_glosa_aut(1308, nr_seq_lote_guia_imp_w, null, null, 'Já foi gerada conta médica para a guia', nm_usuario_p);
					qt_registros_glosa_w	:= 1;
				end if;
			 
			end if;
		end if;
	end if;
 
	--Se não gerou nenhuma glosa no cabeçalho, será verificado os itens	 
	if (qt_registros_glosa_w = 0) then 
		--Consiste se o procedimento existe na base 
		CALL pls_lag_consistir_guia_proc(nr_seq_lote_guia_imp_w, nm_usuario_p);
 
		--Consiste se o procedimento existe na base 
		CALL pls_lag_consistir_guia_mat(nr_seq_lote_guia_imp_w, nr_seq_guia_plano_w, nm_usuario_p);
	end if;
 
	select	count(1) 
	into STRICT	qt_registros_glosa_w 
	from	pls_lote_anexo_glosa_aut 
	where	nr_seq_lote_guia_imp = nr_seq_lote_guia_imp_w;
 
	ie_status_w := '1';
	if ( qt_registros_glosa_w > 0 ) then 
		ie_status_w := '3';
	end if;
 
	update	pls_lote_anexo_guias_imp 
	set	ie_status = ie_status_w 
	where	nr_sequencia = nr_seq_lote_guia_imp_w;
 
end loop;
close c01;
 
select	count(1) 
into STRICT	qt_registros_glosa_w 
from	pls_lote_anexo_guias_imp 
where	nr_seq_lote_anexo = nr_seq_lote_p 
and	ie_status = '3';
 
if ( qt_registros_glosa_w > 0 ) then 
	ie_status_lote_w := 'CG';
end if;
 
update	pls_lote_anexo_aut 
set	ie_status_lote = ie_status_lote_w 
where	nr_sequencia = nr_seq_lote_p;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_lote_anexo_guia (nr_seq_lote_p bigint, nm_usuario_p text) FROM PUBLIC;

