-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_98 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Aplicar a validação na guia vinculada.
------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
i			integer;
dados_tb_sel_w		pls_tipos_ocor_pck.dados_table_selecao_ocor;
ie_gera_ocorrencia_w	varchar(1);

-- Dados  da regra
C01 CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
	SELECT	coalesce(ie_protocolo_distinto,'N') ie_protocolo_distinto,
		coalesce(ie_faturamento,'N') ie_faturamento
	from	pls_oc_cta_val_guia_vinc
	where	nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p
	-- tem que ter pelo menos uma validação marcada na regra
	and ((coalesce(ie_protocolo_distinto,'N') = 'S') or (coalesce(ie_faturamento,'N') = 'S'));

-- Dados da guia
C02 CURSOR(	nr_id_transacao_pc		pls_oc_cta_selecao_ocor_v.nr_id_transacao%type,
		ie_protocolo_distinto_pc	pls_oc_cta_val_guia_vinc.ie_protocolo_distinto%type,
		ie_faturamento_pc		pls_oc_cta_val_guia_vinc.ie_faturamento%type) FOR
	SELECT	b.nr_sequencia nr_seq_conta,
		b.cd_guia_ok,
		b.nr_seq_protocolo,
		c.cd_guia cd_guia_vinculada,
		c.nr_seq_protocolo nr_seq_protocolo_vinc,
		c.ie_status_fat
	from	pls_selecao_ocor_cta	a,
		pls_conta		b,
		pls_conta		c
	where	b.nr_sequencia		= a.nr_seq_conta
	and	c.cd_guia_referencia	= b.cd_guia_referencia
	and	c.nr_seq_segurado	= b.nr_seq_segurado
	and	c.ie_status		!= 'C'
	and	b.ie_status		!= 'C'
	and	coalesce(b.ie_glosa,'N')	= 'N'
	and	coalesce(c.ie_glosa,'N')	= 'N'
	-- se foi marcado para validar os protocolos, verifica se os protocolo são diferentes, senão não aplica a validaçao
	and	((ie_protocolo_distinto_pc = 'S' AND b.nr_seq_protocolo <> c.nr_seq_protocolo) or (ie_protocolo_distinto_pc = 'N'))
	-- se foi marcado para validar o stauts de faturamento, verifica se está liberado para fat (ie_status = L) , senão não aplica a validação
	and	((ie_faturamento_pc = 'S' AND c.ie_status_fat ='L') or (ie_faturamento_pc = 'N'))
	and	a.nr_id_transacao	= nr_id_transacao_pc
	and	a.ie_valido 		= 'S';
BEGIN

-- somente executa se tem regra
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '')  then
	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);
	pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);
	i := 0;
	dados_tb_sel_w.ds_observacao(i) := null;

	-- carrega a regra
	for	r_C01_w in C01( dados_regra_p.nr_sequencia) loop

		-- se existe regra valida, carrega as contas
		for	r_C02_w in C02(	nr_id_transacao_p,
					r_C01_w.ie_protocolo_distinto,
					r_C01_w.ie_faturamento) loop

			ie_gera_ocorrencia_w := 'N';

			-- se é para validar o protocolo, e são diferentes
			if (r_C01_w.ie_protocolo_distinto = 'S') and (r_C02_w.nr_seq_protocolo <> r_C02_w.nr_seq_protocolo_vinc) then

				ie_gera_ocorrencia_w			:= 'S';
				dados_tb_sel_w.nr_seq_selecao(i)	:= r_C02_w.nr_seq_conta;
				dados_tb_sel_w.ds_observacao(i)		:= 'O protocolo da conta vinculada '||r_c02_w.nr_seq_protocolo||' é diferente do protocolo da conta '||r_C02_w.nr_seq_protocolo_vinc;
				dados_tb_sel_w.ie_valido(i) 		:= 'S';
			end if;

			-- se é para validar o status da conta vinculada, e ela está faturada
			if (r_C01_w.ie_faturamento = 'S') and (r_C02_w.ie_status_fat = 'L') then

				ie_gera_ocorrencia_w			:= 'S';
				dados_tb_sel_w.nr_seq_selecao(i)	:= r_C02_w.nr_seq_conta;
				dados_tb_sel_w.ds_observacao(i)		:= 	case	when coalesce(dados_tb_sel_w.ds_observacao(i)::text, '') = ''
												then 'A conta vinculada já está faturada'
											else dados_tb_sel_w.ds_observacao(i) || ', ' || pls_util_pck.enter_w || 'A conta vinculada já está faturada'
										end;
				dados_tb_sel_w.ie_valido(i) 		:= 'S';
			end if;


			if (ie_gera_ocorrencia_w = 'S') then
				if ( i >= pls_util_pck.qt_registro_transacao_w) then

					CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_sel_w.nr_seq_selecao, pls_util_cta_pck.clob_table_vazia_w,
											'SEQ_CONTA', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p, nr_id_transacao_p);
					pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);
					i := 0;
				else
					i := i + 1;
				end if;
			end if;

		end loop; -- loop contas
	end loop; -- loop da regra
CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_sel_w.nr_seq_selecao, pls_util_cta_pck.clob_table_vazia_w,
						'SEQ_CONTA', dados_tb_sel_w.ds_observacao, dados_tb_sel_w.ie_valido, nm_usuario_p, nr_id_transacao_p);
-- seta os registros que serão válidos ou inválidos após o processamento
CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);

end if; -- end executa se tem regra
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_98 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

