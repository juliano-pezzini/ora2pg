-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE rxt_gerar_trat_prot_html ((nr_seq_tumor_p bigint, ds_seq_protocolo_p text, dt_inicio_trat_p timestamp, nm_usuario_p text, nr_seq_tratamento_p INOUT text) IS  -----------------------------------------------------------------------------------------------------------------------------------------------------------
 -- Ao alterar esta procedure, verificar se a alteracao nao e necessaria tambem na procedure RXT_GERAR_PROT_PEP
 -----------------------------------------------------------------------------------------------------------------------------------------------------------
 /* protocolo */
 qt_dose_total_w bigint) AS $body$
DECLARE

PERFORM nr_sequencia,
       nm_fase,
       nr_seq_decubito,
       qt_dia_trat,
       qt_dose_fase,
       qt_dose_dia,
       ie_final_semana,
       nr_seq_volume_protocolo,
       qt_intervalo
FROM rxt_fase_protocolo
WHERE nr_seq_protocolo = nr_seq_protocolo_w
  AND coalesce(nr_seq_volume_protocolo::text, '') = ''
  AND ie_tratamento_volume_w = 'N'
ORDER BY nr_sequencia;

/* obter campos fases */

c02 CURSOR FOR
SELECT qt_dose_total,
       qt_dose_fracao,
       nr_seq_campo
FROM rxt_campo_fase_prot
WHERE nr_seq_fase = nr_seq_fase_protocolo_w
ORDER BY nr_seq_apres;

/* obter acessorios do protocolo */

c03 CURSOR FOR
SELECT nr_seq_acessorio
FROM rxt_protocolo_acessorio
WHERE nr_seq_protocolo = nr_seq_protocolo_w
  AND (SUBSTR(rxt_obter_dados_acessorio(nr_seq_acessorio, 'T'), 1, 1) = 'I')
ORDER BY nr_sequencia;

/* obter acessorios do campo */

c04 CURSOR FOR
SELECT nr_seq_acessorio
FROM rxt_protocolo_acessorio
WHERE nr_seq_protocolo = nr_seq_protocolo_w
  AND nr_seq_campo = nr_seq_campo_protoc_w
  AND (SUBSTR(rxt_obter_dados_acessorio(nr_seq_acessorio, 'T'), 1, 1) = 'C')
ORDER BY nr_sequencia;


c05 CURSOR FOR
SELECT nr_sequencia,
       nr_seq_volume,
       ds_volume
FROM rxt_volume_protocolo
WHERE nr_seq_protocolo = nr_seq_protocolo_w
  AND ie_tratamento_volume_w = 'S'
ORDER BY nr_sequencia;

/* obter fases  do volume*/

c06 CURSOR FOR
SELECT nr_sequencia,
       nm_fase,
       nr_seq_decubito,
       qt_dia_trat,
       qt_dose_fase,
       qt_dose_dia,
       ie_final_semana,
       qt_intervalo
FROM rxt_fase_protocolo
WHERE nr_seq_protocolo = nr_seq_protocolo_w
  AND nr_seq_volume_protocolo = nr_seq_volume_protocolo_w
ORDER BY nr_sequencia;


c07 CURSOR FOR
SELECT nr_sequencia,
       nm_campo,
       qt_dia_trat,
       qt_dose_campo,
       qt_dose_dia,
       nr_seq_volume_protocolo
FROM rxt_campo_prot_roentgen
WHERE nr_seq_protocolo = nr_seq_protocolo_w
  AND coalesce(nr_seq_volume_protocolo::text, '') = ''
  AND ie_tratamento_volume_w = 'N'
ORDER BY nr_sequencia;


c08 CURSOR FOR
SELECT nr_seq_kvp,
       nr_seq_ma,
       nr_seq_aplicador,
       qt_tamanho_x,
       qt_tamanho_y,
       nr_minuto_duracao,
       nr_seq_campo_prot,
       nr_segundo_duracao
FROM rxt_aplic_campo_prot_roent
WHERE nr_seq_campo_prot = nr_seq_campo_prot_roentgen_w;


c09 CURSOR FOR
SELECT nr_sequencia,
       nr_seq_volume,
       ds_volume
FROM rxt_volume_protocolo
WHERE nr_seq_protocolo = nr_seq_protocolo_w
  AND ie_tratamento_volume_w = 'S'
ORDER BY nr_sequencia;


c10 CURSOR FOR
SELECT nr_sequencia,
       nm_campo,
       qt_dia_trat,
       qt_dose_campo,
       qt_dose_dia
FROM rxt_campo_prot_roentgen
WHERE nr_seq_protocolo = nr_seq_protocolo_w
  AND nr_seq_volume_protocolo = nr_seq_volume_protocolo_w
ORDER BY nr_sequencia;


c11 CURSOR FOR
SELECT nr_sequencia,
       nr_seq_aplicador,
       nr_insercao,
       qt_dose_total,
       qt_dose_insercao,
       qt_insercao_semana,
       qt_intervalo_insercoes,
       nr_ordem_execucao_aplic
FROM rxt_braq_aplic_prot
WHERE nr_seq_protocolo = nr_seq_protocolo_w
ORDER BY nr_sequencia;


c12 CURSOR FOR
SELECT nr_insercao,
       ds_resultado,
       qt_resultado,
       nr_seq_campo
FROM rxt_braq_campo_aplic_prot
WHERE nr_seq_aplic_prot = nr_seq_aplic_prot_w;

BEGIN

ie_gerar_autorizacao_w := obter_valor_param_usuario(3030, 64, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento);


SELECT coalesce(max(ie_considera_tratamento_volume), 'N') INTO STRICT ie_tratamento_volume_w
FROM rxt_parametro;

lista_protocolos_w := obter_lista_string(ds_seq_protocolo_p, ',');

IF lista_protocolos_w.count > 0 THEN
BEGIN
FOR i IN lista_protocolos_w.first..lista_protocolos_w.last LOOP BEGIN nr_seq_protocolo_w := lista_protocolos_w(i);

IF (nr_seq_tumor_p IS NOT NULL AND nr_seq_tumor_p::text <> '')
AND (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '')
AND (dt_inicio_trat_p IS NOT NULL AND dt_inicio_trat_p::text <> '')
AND (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') THEN
SELECT coalesce(max(rxt_obter_tipo_trat_prot(nr_seq_protocolo_w)), 'X') INTO STRICT ie_tipo_trat_w
;

IF (ie_tipo_trat_w <> 'R')
AND (ie_tipo_trat_w <> 'B') THEN /* obter valores protocolo */
SELECT MAX(qt_dose_total),
       MAX(QT_CHECK_FILM),
       MAX(ie_necessita_bloco),
       MAX(ie_necessita_qa) INTO STRICT qt_dose_total_w,
                               QT_CHECK_FILM_W,
                               ie_necessita_bloco_w,
                               ie_necessita_qa_w
FROM rxt_protocolo
WHERE nr_sequencia = nr_seq_protocolo_w;


SELECT coalesce(SUM(coalesce(qt_dia_trat, 0)), 0) INTO STRICT qt_duracao_trat_w
FROM rxt_fase_protocolo
WHERE nr_seq_protocolo = nr_seq_protocolo_w;

/* obter sequence */

SELECT nextval('rxt_tratamento_seq') INTO STRICT nr_seq_tratamento_w
;

/* gerar tratamento */

INSERT INTO rxt_tratamento(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tumor, qt_duracao_trat, dt_inicio_trat, qt_dose_total, nr_seq_protocolo, QT_CHECK_FILM, ie_necessita_bloco, ie_necessita_qa)
VALUES (nr_seq_tratamento_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tumor_p,
        qt_duracao_trat_w,
        dt_inicio_trat_p,
        qt_dose_total_w,
        nr_seq_protocolo_w,
        QT_CHECK_FILM_W,
        ie_necessita_bloco_w,
        ie_necessita_qa_w);

OPEN c05;

LOOP FETCH c05 INTO nr_seq_volume_protocolo_w,
                    nr_seq_volume_w,
                    ds_volume_w;

EXIT WHEN NOT FOUND; /* apply on c05 */

BEGIN
SELECT SUM(qt_dia_trat),
       SUM(qt_dose_fase),
       SUM(qt_dose_dia) INTO STRICT qt_duracao_trat_ww,
                             qt_dose_total_ww,
                             qt_dose_fase_ww
FROM rxt_fase_protocolo
WHERE nr_seq_volume_protocolo = nr_seq_volume_protocolo_w;


SELECT nextval('rxt_volume_tratamento_seq') INTO STRICT nr_seq_volume_tratamento_w
;


INSERT INTO rxt_volume_tratamento(nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tratamento, nr_seq_volume_protocolo, nr_seq_volume, ds_volume, qt_duracao_trat, qt_dose_total, qt_dose_fase)
VALUES (nr_seq_volume_tratamento_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nr_seq_volume_protocolo_w,
        nr_seq_volume_w,
        ds_volume_w,
        qt_duracao_trat_ww,
        qt_dose_total_ww,
        qt_dose_fase_ww);

/* obter fases  do volume*/
 OPEN c06;

LOOP FETCH c06 INTO nr_seq_fase_protocolo_w,
                    nm_fase_w,
                    nr_seq_decubito_w,
                    qt_dia_trat_w,
                    qt_dose_fase_w,
                    qt_dose_dia_w,
                    ie_final_semana_w,
                    qt_intervalo_w;

EXIT WHEN NOT FOUND; /* apply on c06 */

BEGIN /* obter sequence */
SELECT nextval('rxt_fase_tratamento_seq') INTO STRICT nr_seq_fase_tratamento_w
;

/* gerar fases */

INSERT INTO rxt_fase_tratamento(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tratamento, nm_fase, qt_duracao_trat, qt_dose_total, qt_dose_fase, ie_final_semana, nr_seq_decubito, nr_seq_fase_prot, nr_seq_volume_tratamento, qt_intervalo)
VALUES (nr_seq_fase_tratamento_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nm_fase_w,
        qt_dia_trat_w,
        qt_dose_fase_w,
        qt_dose_dia_w,
        ie_final_semana_w,
        nr_seq_decubito_w,
        nr_seq_fase_protocolo_w,
        nr_seq_volume_tratamento_w,
        qt_intervalo_w);

/* obter campos fase */
 OPEN c02;

LOOP FETCH c02 INTO qt_dose_total_fase_w,
                    qt_dose_fracao_w,
                    nr_seq_campo_protoc_w;

EXIT WHEN NOT FOUND; /* apply on c02 */

BEGIN /* obter sequence */
SELECT nextval('rxt_campo_seq') INTO STRICT nr_seq_campo_w
;

/* gerar campos fase */

INSERT INTO rxt_campo(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_fase, nr_seq_campo, nr_aplicacoes, qt_dose_total, qt_dose_diaria, ie_situacao)
VALUES (nr_seq_campo_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_fase_tratamento_w,
        nr_seq_campo_protoc_w,
        qt_dia_trat_w,
        qt_dose_total_fase_w,
        qt_dose_fracao_w,
        'A');

/* obter acessorios dos campos */
 OPEN c04;

LOOP FETCH c04 INTO nr_seq_acess_prot_campo_w;

EXIT WHEN NOT FOUND; /* apply on c04 */

BEGIN /* obter sequence */
SELECT nextval('rxt_acessorio_pac_seq') INTO STRICT nr_seq_acessorio_campo_w
;

/* gerar acessorios do campo */

INSERT INTO rxt_acessorio_pac(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tratamento, nr_seq_campo, nr_seq_acessorio)
VALUES (nr_seq_acessorio_campo_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nr_seq_campo_w,
        nr_seq_acess_prot_campo_w);

END;

END LOOP;

CLOSE c04;

END;

END LOOP;

CLOSE c02;

END;

END LOOP;

CLOSE c06;

END;

END LOOP;

CLOSE c05;

/* obter fases */
 OPEN c01;

LOOP FETCH c01 INTO nr_seq_fase_protocolo_w,
                    nm_fase_w,
                    nr_seq_decubito_w,
                    qt_dia_trat_w,
                    qt_dose_fase_w,
                    qt_dose_dia_w,
                    ie_final_semana_w,
                    nr_seq_volume_protocolo_w,
                    qt_intervalo_w;

EXIT WHEN NOT FOUND; /* apply on c01 */

BEGIN /* obter sequence */
SELECT nextval('rxt_fase_tratamento_seq') INTO STRICT nr_seq_fase_tratamento_w
;

/* gerar fases */

INSERT INTO rxt_fase_tratamento(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tratamento, nm_fase, qt_duracao_trat, qt_dose_total, qt_dose_fase, ie_final_semana, nr_seq_decubito, nr_seq_fase_prot, qt_intervalo)
VALUES (nr_seq_fase_tratamento_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nm_fase_w,
        qt_dia_trat_w,
        qt_dose_fase_w,
        qt_dose_dia_w,
        ie_final_semana_w,
        nr_seq_decubito_w,
        nr_seq_fase_protocolo_w,
        qt_intervalo_w);

/* obter campos fase */
 OPEN c02;

LOOP FETCH c02 INTO qt_dose_total_fase_w,
                    qt_dose_fracao_w,
                    nr_seq_campo_protoc_w;

EXIT WHEN NOT FOUND; /* apply on c02 */

BEGIN /* obter sequence */
SELECT nextval('rxt_campo_seq') INTO STRICT nr_seq_campo_w
;

/* gerar campos fase */

INSERT INTO rxt_campo(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_fase, nr_seq_campo, nr_aplicacoes, qt_dose_total, qt_dose_diaria, ie_situacao)
VALUES (nr_seq_campo_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_fase_tratamento_w,
        nr_seq_campo_protoc_w,
        qt_dia_trat_w,
        qt_dose_total_fase_w,
        qt_dose_fracao_w,
        'A');

/* obter acessorios dos campos */
 OPEN c04;

LOOP FETCH c04 INTO nr_seq_acess_prot_campo_w;

EXIT WHEN NOT FOUND; /* apply on c04 */

BEGIN /* obter sequence */
SELECT nextval('rxt_acessorio_pac_seq') INTO STRICT nr_seq_acessorio_campo_w
;

/* gerar acessorios do campo */

INSERT INTO rxt_acessorio_pac(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tratamento, nr_seq_campo, nr_seq_acessorio)
VALUES (nr_seq_acessorio_campo_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nr_seq_campo_w,
        nr_seq_acess_prot_campo_w);

END;

END LOOP;

CLOSE c04;

END;

END LOOP;

CLOSE c02;

END;

END LOOP;

CLOSE c01;

OPEN c03;

LOOP FETCH c03 INTO nr_seq_acessorio_prot_w;

EXIT WHEN NOT FOUND; /* apply on c03 */

BEGIN /* obter sequence */
SELECT nextval('rxt_acessorio_pac_seq') INTO STRICT nr_seq_acessorio_w
;

/* gerar acessorios */

INSERT INTO rxt_acessorio_pac(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tratamento, nr_seq_acessorio)
VALUES (nr_seq_acessorio_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nr_seq_acessorio_prot_w);

END;

END LOOP;

CLOSE c03;

elsif (ie_tipo_trat_w = 'R') THEN /* obter valores protocolo */
SELECT max(qt_dose_total),
       max(QT_CHECK_FILM),
       MAX(ie_necessita_bloco),
       MAX(ie_necessita_qa) INTO STRICT qt_dose_total_w,
                               QT_CHECK_FILM_W,
                               ie_necessita_bloco_w,
                               ie_necessita_qa_w
FROM rxt_protocolo
WHERE nr_sequencia = nr_seq_protocolo_w;


SELECT coalesce(sum(coalesce(qt_dia_trat, 0)), 0) INTO STRICT qt_duracao_trat_w
FROM rxt_campo_prot_roentgen
WHERE nr_seq_protocolo = nr_seq_protocolo_w;

/* obter sequence */

SELECT nextval('rxt_tratamento_seq') INTO STRICT nr_seq_tratamento_w
;

/* gerar tratamento */

INSERT INTO rxt_tratamento(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tumor, qt_duracao_trat, dt_inicio_trat, qt_dose_total, nr_seq_protocolo, QT_CHECK_FILM, ie_necessita_bloco, ie_necessita_qa)
VALUES (nr_seq_tratamento_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tumor_p,
        qt_duracao_trat_w,
        dt_inicio_trat_p,
        qt_dose_total_w,
        nr_seq_protocolo_w,
        QT_CHECK_FILM_W,
        ie_necessita_bloco_w,
        ie_necessita_qa_w);

OPEN c09;

LOOP FETCH c09 INTO nr_seq_volume_protocolo_w,
                    nr_seq_volume_w,
                    ds_volume_w;

EXIT WHEN NOT FOUND; /* apply on c09 */

BEGIN
SELECT sum(qt_dia_trat),
       sum(qt_dose_campo),
       sum(qt_dose_dia) INTO STRICT qt_duracao_trat_ww,
                             qt_dose_total_ww,
                             qt_dose_campo_ww
FROM rxt_campo_prot_roentgen
WHERE nr_seq_volume_protocolo = nr_seq_volume_protocolo_w;


SELECT nextval('rxt_volume_tratamento_seq') INTO STRICT nr_seq_volume_tratamento_w
;


INSERT INTO rxt_volume_tratamento(nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tratamento, nr_seq_volume_protocolo, nr_seq_volume, ds_volume, qt_duracao_trat, qt_dose_total, qt_dose_fase)
VALUES (nr_seq_volume_tratamento_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nr_seq_volume_protocolo_w,
        nr_seq_volume_w,
        ds_volume_w,
        qt_duracao_trat_ww,
        qt_dose_total_ww,
        qt_dose_campo_ww);

/* obter fases  do volume*/
 OPEN c10;

LOOP FETCH c10 INTO nr_seq_campo_prot_roentgen_w,
                    nm_campo_w,
                    qt_dia_trat_w,
                    qt_dose_campo_w,
                    qt_dose_dia_w;

EXIT WHEN NOT FOUND; /* apply on c10 */

BEGIN /* obter sequence */
SELECT nextval('rxt_campo_trat_roentgen_seq') INTO STRICT nr_seq_campo_trat_roentgen_w
;

/* gerar fases */

INSERT INTO rxt_campo_trat_roentgen(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tratamento, nm_campo, qt_dia_trat, qt_dose_campo, qt_dose_dia, nr_seq_campo_prot, nr_seq_volume_tratamento)
VALUES (nr_seq_campo_trat_roentgen_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nm_campo_w,
        qt_dia_trat_w,
        qt_dose_campo_w,
        qt_dose_dia_w,
        nr_seq_campo_prot_roentgen_w,
        nr_seq_volume_tratamento_w);

/* obter campos fase */
 OPEN c08;

LOOP FETCH c08 INTO nr_seq_kvp_w,
                    nr_seq_ma_w,
                    nr_seq_aplicador_w,
                    qt_tamanho_x_w,
                    qt_tamanho_y_w,
                    nr_minuto_duracao_w,
                    nr_seq_campo_prot_w,
                    nr_segundo_duracao_w;

EXIT WHEN NOT FOUND; /* apply on c08 */

BEGIN /* obter sequence */
SELECT nextval('rxt_aplic_trat_roentgen_seq') INTO STRICT nr_seq_aplic_trat_w
;

/* gerar campos fase */

INSERT INTO rxt_aplic_trat_roentgen(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_campo_trat, nr_seq_kvp, nr_seq_ma, nr_seq_aplicador, qt_tamanho_x, qt_tamanho_y, nr_minuto_duracao, nr_segundo_duracao)
VALUES (nr_seq_aplic_trat_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_campo_trat_roentgen_w,
        nr_seq_kvp_w,
        nr_seq_ma_w,
        nr_seq_aplicador_w,
        qt_tamanho_x_w,
        qt_tamanho_y_w,
        nr_minuto_duracao_w,
        nr_segundo_duracao_w);

END;

END LOOP;

CLOSE c08;

END;

END LOOP;

CLOSE c10;

END;

END LOOP;

CLOSE c09;

/* obter fases */
 OPEN c07;

LOOP FETCH c07 INTO nr_seq_campo_prot_roentgen_w,
                    nm_campo_w,
                    qt_dia_trat_w,
                    qt_dose_campo_w,
                    qt_dose_dia_w,
                    nr_seq_volume_protocolo_w;

EXIT WHEN NOT FOUND; /* apply on c07 */

BEGIN /* obter sequence */
SELECT nextval('rxt_campo_trat_roentgen_seq') INTO STRICT nr_seq_campo_trat_roentgen_w
;

/* gerar fases */

INSERT INTO rxt_campo_trat_roentgen(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tratamento, nm_campo, qt_dia_trat, qt_dose_campo, qt_dose_dia, nr_seq_campo_prot)
VALUES (nr_seq_campo_trat_roentgen_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nm_campo_w,
        qt_dia_trat_w,
        qt_dose_campo_w,
        qt_dose_dia_w,
        nr_seq_campo_prot_roentgen_w);

/* obter campos fase */
 OPEN c08;

LOOP FETCH c08 INTO nr_seq_kvp_w,
                    nr_seq_ma_w,
                    nr_seq_aplicador_w,
                    qt_tamanho_x_w,
                    qt_tamanho_y_w,
                    nr_minuto_duracao_w,
                    nr_seq_campo_prot_w,
                    nr_segundo_duracao_w;

EXIT WHEN NOT FOUND; /* apply on c08 */

BEGIN /* obter sequence */
SELECT nextval('rxt_aplic_trat_roentgen_seq') INTO STRICT nr_seq_aplic_trat_w
;

/* gerar campos fase */

INSERT INTO rxt_aplic_trat_roentgen(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_campo_trat, nr_seq_kvp, nr_seq_ma, nr_seq_aplicador, qt_tamanho_x, qt_tamanho_y, nr_minuto_duracao, nr_segundo_duracao)
VALUES (nr_seq_aplic_trat_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_campo_trat_roentgen_w,
        nr_seq_kvp_w,
        nr_seq_ma_w,
        nr_seq_aplicador_w,
        qt_tamanho_x_w,
        qt_tamanho_y_w,
        nr_minuto_duracao_w,
        nr_segundo_duracao_w);

END;

END LOOP;

CLOSE c08;

END;

END LOOP;

CLOSE c07;

elsif (ie_tipo_trat_w = 'B') THEN /* obter valores protocolo */
SELECT MAX(qt_dose_total),
       MAX(qt_check_film),
       MAX(ie_necessita_bloco),
       MAX(ie_necessita_qa) INTO STRICT qt_dose_total_w,
                               qt_check_film_w,
                               ie_necessita_bloco_w,
                               ie_necessita_qa_w
FROM rxt_protocolo
WHERE nr_sequencia = nr_seq_protocolo_w;


SELECT coalesce(SUM(coalesce(ie_frequencia, 0)), 0) INTO STRICT qt_duracao_trat_w
FROM rxt_protocolo
WHERE nr_sequencia = nr_seq_protocolo_w;

/*SELECT  NVL(SUM(NVL(qt_dia_trat,0)),0)
    INTO  qt_duracao_trat_w
    FROM  rxt_fase_protocolo
    WHERE  nr_seq_protocolo = nr_seq_protocolo_w;*/
 /* obter sequence */
SELECT nextval('rxt_tratamento_seq') INTO STRICT nr_seq_tratamento_w
;

/* gerar tratamento */

INSERT INTO rxt_tratamento(nr_sequencia, dt_atualizacao_nrec, nm_usuario_nrec, dt_atualizacao, nm_usuario, nr_seq_tumor, qt_duracao_trat, dt_inicio_trat, qt_dose_total, nr_seq_protocolo, QT_CHECK_FILM, ie_necessita_bloco, ie_necessita_qa)
VALUES (nr_seq_tratamento_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tumor_p,
        qt_duracao_trat_w,
        dt_inicio_trat_p,
        qt_dose_total_w,
        nr_seq_protocolo_w,
        qt_check_film_w,
        ie_necessita_bloco_w,
        ie_necessita_qa_w);

/* Obter aplicadores */
 OPEN C11;

LOOP FETCH C11 INTO nr_seq_aplic_prot_w,
                    nr_seq_aplicador_w,
                    nr_insercao_w,
                    qt_dose_total_aplic_prot_w,
                    qt_dose_insercao_w,
                    qt_insercao_semana_w,
                    qt_intervalo_ins_w,
                    nr_ordem_exec_aplic_w;

EXIT WHEN NOT FOUND; /* apply on C11 */

BEGIN /* obter sequence */
SELECT nextval('rxt_braq_aplic_trat_seq') INTO STRICT nr_seq_braq_aplic_trat_w
;

/* gerar aplicadores */

INSERT INTO rxt_braq_aplic_trat(nr_sequencia, cd_estabelecimento, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tratamento, nr_insercao, qt_dose_total, qt_dose_insercao, qt_insercao_semana, ie_situacao, nr_seq_aplicador, qt_intervalo_insercoes, nr_ordem_execucao_aplic)
VALUES (nr_seq_braq_aplic_trat_w,
        coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1),
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_tratamento_w,
        nr_insercao_w,
        qt_dose_total_aplic_prot_w,
        qt_dose_insercao_w,
        qt_insercao_semana_w,
        'A',
        nr_seq_aplicador_w,
        qt_intervalo_ins_w,
        nr_ordem_exec_aplic_w);

/* Ober campos do aplicador */
 OPEN C12;

LOOP FETCH C12 INTO nr_insercao_campo_w,
                    ds_resultado_w,
                    qt_resultado_w,
                    nr_seq_campo_braq_w;

EXIT WHEN NOT FOUND; /* apply on C12 */

BEGIN /* gerar aplicadores */
INSERT INTO rxt_braq_campo_aplic_trat(nr_sequencia, cd_estabelecimento, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_aplic_trat, qt_resultado, ds_resultado, nr_insercao, nr_seq_campo, ie_situacao)
VALUES (nextval('rxt_braq_campo_aplic_trat_seq'),
        coalesce(wheb_usuario_pck.get_cd_estabelecimento, 1),
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_braq_aplic_trat_w,
        qt_resultado_w,
        ds_resultado_w,
        nr_insercao_campo_w,
        nr_seq_campo_braq_w,
        'A');

END;

END LOOP;

CLOSE C12;

END;

END LOOP;

CLOSE C11;

END IF;

-- validar regra para gerar autorizacao e chamar procedure gerar_autor_radio
SELECT cd_convenio INTO STRICT cd_convenio_w
FROM rxt_tumor
WHERE nr_sequencia = nr_seq_tumor_p;

IF (nr_seq_tratamento_w IS NOT NULL AND nr_seq_tratamento_w::text <> '') AND (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') AND (cd_convenio_w IS NOT NULL AND cd_convenio_w::text <> '')
AND (ie_gerar_autorizacao_w = 'S')THEN CALL GERAR_AUTOR_RADIO(nr_seq_tratamento_w, nm_usuario_p);

END IF;

END IF;

END;

END LOOP;
END;
END IF;

nr_seq_tratamento_p := coalesce(nr_seq_tratamento_w, 0);


COMMIT;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE rxt_gerar_trat_prot_html ((nr_seq_tumor_p bigint, ds_seq_protocolo_p text, dt_inicio_trat_p timestamp, nm_usuario_p text, nr_seq_tratamento_p INOUT text) IS  qt_dose_total_w bigint) FROM PUBLIC;

