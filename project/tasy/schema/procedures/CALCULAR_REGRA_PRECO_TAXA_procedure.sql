-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_regra_preco_taxa ( nr_interno_conta_p bigint, nr_sequencia_p bigint, ie_proc_mat_p bigint, nm_usuario_p text) AS $body$
DECLARE



nr_sequencia_w			bigint;
nr_seq_regra_preco_w		bigint;
VL_SERVICO_W			double precision := 0;
pr_total_w			double precision;
cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
cd_grupo_proc_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_grupo_material_w		bigint;
cd_subgrupo_material_w		bigint;
cd_classe_material_w		bigint;
cd_material_w			bigint;
nr_seq_regra_taxa_w		bigint;
vl_item_w			double precision;
vl_ajuste_w			double precision;
nr_atendimento_w		bigint;
nr_seq_item_w			bigint;
nr_seq_proc_pacote_w		bigint;
nr_seq_proc_interno_w		bigint;
nr_seq_mat_proc_w		bigint;
ie_proc_mat_w			smallint;
cd_motivo_exc_conta_w		bigint;
ie_pacote_w			varchar(1);
nr_seq_pacote_w			bigint;
nr_interno_conta_resumo_w	bigint;

--Essas variáveis _ww são apenas para a ordenação do cursor c09
cd_area_procedimento_ww		bigint;
cd_especialidade_ww		bigint;
cd_grupo_proc_ww		bigint;
cd_procedimento_ww		bigint;
ie_origem_proced_ww		bigint;
cd_grupo_material_ww		bigint;
cd_subgrupo_material_ww		bigint;
cd_classe_material_ww		bigint;
cd_material_ww			bigint;

cd_area_procedimento_orig_w	bigint;
cd_especialidade_orig_w		bigint;
cd_grupo_proc_orig_w		bigint;
cd_procedimento_orig_w		bigint;
ie_origem_proced_orig_w 	bigint;
cd_grupo_material_orig_w 	bigint;
cd_subgrupo_material_orig_w	bigint;
cd_classe_material_orig_w	bigint;
cd_material_orig_w		bigint;
vl_item_orig_w			double precision;
nr_atendimento_orig_w		bigint;
nr_seq_proc_pacote_orig_w	bigint;
nr_seq_proc_interno_orig_w	bigint;

nr_seq_aux_w			bigint;

nr_seq_aux_item_w		bigint;

ie_consignado_w			varchar(1);
ie_consignado_ww		varchar(1);

cd_estabelecimento_w		smallint;
ie_regra_valor_unit_mat_w 	varchar(1);
ie_responsavel_credito_w	varchar(5);
ie_responsavel_credito_ww	varchar(5);
ie_responsavel_credito_orig_ww	varchar(5);
vl_limite_w			regra_preco_proc_crit.vl_limite%type;
cd_convenio_w			regra_preco_proc_crit.cd_convenio%type;
ie_somente_item_setor_w		regra_preco_proc.ie_somente_item_setor%type :='N';
cd_setor_atendimento_w		procedimento_paciente.cd_setor_atendimento%type;
cd_setor_atendimento_ww		procedimento_paciente.cd_setor_atendimento%type;

c01 CURSOR FOR
	SELECT  a.nr_sequencia,
		a.nr_seq_regra_preco,
		a.cd_convenio,
		a.cd_setor_atendimento
	from  	procedimento_paciente a
	where 	a.nr_interno_conta  = nr_interno_conta_p
	and	coalesce(a.nr_seq_regra_preco,0) > 0
	order by a.nr_seq_regra_preco,
		 a.nr_sequencia;
		
		 
c02 CURSOR FOR
	SELECT 	nr_sequencia,
		ie_proc_mat
	from 	conta_paciente_v
	where	nr_interno_conta = nr_interno_conta_p
	and 	coalesce(cd_motivo_exc_conta::text, '') = ''
	and 	nr_sequencia <> nr_seq_aux_w
	and	((ie_somente_item_setor_w ='N') or (cd_setor_atendimento = cd_setor_atendimento_w))
	order by ie_proc_mat, -- Todos os procedimentos seguidos de todos os materiais
		nr_sequencia; -- Ordenados na sua sequencia		
C04 CURSOR FOR
	SELECT	nr_seq_mat_proc,
		ie_proc_mat
	from	taxa_resumo_conta
	where	nr_interno_conta = nr_interno_conta_p
	order by 2,1;
	

c05 CURSOR FOR
	SELECT  a.nr_sequencia,
		a.nr_seq_regra_preco,
		a.cd_convenio,
		a.cd_setor_atendimento
	from  	procedimento_paciente a
	where 	a.nr_interno_conta  = nr_interno_conta_p
	and	coalesce(a.nr_seq_regra_preco,0) > 0
	order by a.nr_seq_regra_preco,
		 a.nr_sequencia;
		

-- Para melhor performance, este select deverá ser criado dinamicamente
c09 CURSOR FOR
	SELECT 	pr_total,
		coalesce(cd_area_procedimento,0) cd_area_procedimento,
		coalesce(cd_especialidade, 0) cd_especialidade,
		coalesce(cd_grupo_proc, 0) cd_grupo_proc,
		coalesce(cd_procedimento, 0) cd_procedimento,
		coalesce(ie_origem_proced, 0) ie_origem_proced,
		coalesce(cd_grupo_material, 0) cd_grupo_material,
		coalesce(cd_subgrupo_material, 0) cd_subgrupo_material,
		coalesce(cd_classe_material, 0) cd_classe_material,
		coalesce(cd_material, 0) cd_material,
		'2' ie_consignado,
		coalesce(ie_responsavel_credito,'0') ie_responsavel_credito,
		coalesce(a.vl_limite,0) vl_limite
	from  	regra_preco_proc_crit a
	where 	nr_seq_regra = nr_seq_regra_preco_w
	and	coalesce(cd_area_procedimento, cd_area_procedimento_w) = cd_area_procedimento_w
	and	coalesce(cd_especialidade, cd_especialidade_w) = cd_especialidade_w
	and	coalesce(cd_grupo_proc, cd_grupo_proc_w) = cd_grupo_proc_w
	and	coalesce(cd_procedimento, cd_procedimento_w, 0) = coalesce(cd_procedimento_w,0)
	and	((coalesce(cd_procedimento::text, '') = '') or (coalesce(ie_origem_proced, ie_origem_proced_w) = ie_origem_proced_w))
	and	coalesce(nr_seq_proc_interno, nr_seq_proc_interno_w,0) = coalesce(nr_seq_proc_interno_w,0)
	and 	coalesce(vl_item_w,0) between coalesce(a.vl_inicial, vl_item_w,0) and coalesce(a.vl_final, vl_item_w,0)	
	and	(((coalesce(a.ie_consignado,'2') = '0') and (ie_consignado_w = '0')) or
		((coalesce(a.ie_consignado,'2') = '1') and (ie_consignado_w = '1')) or
		((coalesce(a.ie_consignado,'2') = '3') and (ie_consignado_w = '2')) or  --Criada nova opcao OS821589
		(coalesce(a.ie_consignado,'2') = '2'))
	and	coalesce(cd_area_procedimento,cd_especialidade,cd_grupo_proc,cd_procedimento,nr_seq_proc_interno,0) <> 0
	and	(cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '')
	and	coalesce(cd_estabelecimento, cd_estabelecimento_w, 0) = coalesce(cd_estabelecimento_w,0)
	and		coalesce(a.ie_responsavel_credito, ie_responsavel_credito_w, '0') = coalesce(ie_responsavel_credito_w,'0')
	and	vl_item_w <> 0
	and	((a.ie_pacote = 'A') or
		(a.ie_pacote = 'S' AND nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '') or
		--((a.ie_pacote		= 'N') and (nr_seq_proc_pacote_w is null)))
		((a.ie_pacote = 'N') and (coalesce(nr_seq_proc_pacote_w, nr_seq_aux_item_w) = nr_seq_aux_item_w)))
	and	a.ie_situacao = 'A'
	and	coalesce(a.cd_convenio, coalesce(cd_convenio_w, 0)) = coalesce(cd_convenio_w, 0)
	
union

	SELECT 	pr_total,
		coalesce(cd_area_procedimento,0) 	cd_area_procedimento,
		coalesce(cd_especialidade, 0) 	cd_especialidade,
		coalesce(cd_grupo_proc, 0) 		cd_grupo_proc,
		coalesce(cd_procedimento, 0) 	cd_procedimento,
		coalesce(ie_origem_proced, 0) 	ie_origem_proced,
		coalesce(cd_grupo_material, 0) 	cd_grupo_material,
		coalesce(cd_subgrupo_material, 0) 	cd_subgrupo_material,
		coalesce(cd_classe_material, 0) 	cd_classe_material,
		coalesce(cd_material, 0) 		cd_material,
		coalesce(ie_consignado,'2')		ie_consignado,
		coalesce(ie_responsavel_credito,'0') ie_responsavel_credito,
		coalesce(a.vl_limite,0) vl_limite
	from  	regra_preco_proc_crit a
	where 	nr_seq_regra 						= nr_seq_regra_preco_w
	and	coalesce(cd_grupo_material, cd_grupo_material_w)		= cd_grupo_material_w
	and	coalesce(cd_subgrupo_material, cd_subgrupo_material_w)	= cd_subgrupo_material_w
	and	coalesce(cd_classe_material, cd_classe_material_w)		= cd_classe_material_w
	and 	coalesce(cd_material, cd_material_w,0)			= coalesce(cd_material_w,0)
	and 	coalesce(vl_item_w,0) between coalesce(a.vl_inicial, vl_item_w,0) and coalesce(a.vl_final, vl_item_w,0)
	and	(((coalesce(a.ie_consignado,'2') = '0') and (ie_consignado_w = '0')) or
		((coalesce(a.ie_consignado,'2') = '1') and (ie_consignado_w = '1')) or
		((coalesce(a.ie_consignado,'2') = '3') and (ie_consignado_w = '2')) or  --Criada nova opcao OS821589		
		(coalesce(a.ie_consignado,'2') = '2'))
	and	coalesce(cd_grupo_material,cd_subgrupo_material,cd_classe_material,cd_material,0) <> 0
	and	(cd_material_w IS NOT NULL AND cd_material_w::text <> '')
	and	coalesce(cd_estabelecimento, cd_estabelecimento_w,0) = coalesce(cd_estabelecimento_w,0)
	and 	coalesce(a.ie_responsavel_credito, ie_responsavel_credito_w,'0') = coalesce(ie_responsavel_credito_w,'0')
	and	vl_item_w <> 0
	and	((a.ie_pacote		= 'A') or
		(a.ie_pacote		= 'S' AND nr_seq_proc_pacote_w IS NOT NULL AND nr_seq_proc_pacote_w::text <> '') or
		--((a.ie_pacote		= 'N') and (nr_seq_proc_pacote_w is null)))
		((a.ie_pacote		= 'N') and (coalesce(nr_seq_proc_pacote_w, nr_seq_aux_item_w) = nr_seq_aux_item_w)))
	and	a.ie_situacao = 'A'
	and	coalesce(a.cd_convenio, coalesce(cd_convenio_w, 0)) = coalesce(cd_convenio_w, 0)
	order by	cd_material,
		cd_classe_material,
		cd_subgrupo_material,
		cd_grupo_material,
		cd_procedimento,
		ie_origem_proced,
		cd_grupo_proc,
		cd_especialidade,
		cd_area_procedimento,
		ie_consignado,
		ie_responsavel_credito;
	

BEGIN

if (Calcula_regra_tx_pck.get_calcula_regra_tx = 'S') then

	select	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	conta_paciente
	where	nr_interno_conta = nr_interno_conta_p;
	
	ie_regra_valor_unit_mat_w	:= coalesce(obter_valor_param_usuario(67,684, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N');

	-- (1)  Buscar a estrutura do procedimento ou do material pela sequencia do item que está sendo calculado (nr_sequencia_p)
	if (ie_proc_mat_p	= 1) then
		select	coalesce(max(b.cd_area_procedimento),0),
			coalesce(max(b.cd_especialidade),0),
			coalesce(max(b.cd_grupo_proc),0),
			max(b.cd_procedimento),
			coalesce(max(b.ie_origem_proced),0),
			coalesce(sum(a.vl_procedimento),0),
			coalesce(max(nr_atendimento),0),
			max(nr_seq_proc_pacote),
			max(nr_seq_proc_interno),
			'2',
			max(ie_responsavel_credito),
			max(a.cd_setor_atendimento)
		into STRICT	cd_area_procedimento_w,
			cd_especialidade_w,
			cd_grupo_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			vl_item_w,
			nr_atendimento_w,
			nr_seq_proc_pacote_w,
			nr_seq_proc_interno_w,
			ie_consignado_w,
			ie_responsavel_credito_w,
			cd_setor_atendimento_ww
		from	estrutura_procedimento_v b,
			procedimento_paciente a
		where	a.cd_procedimento	= b.cd_procedimento
		and	a.ie_origem_proced	= b.ie_origem_proced
		and	a.nr_sequencia		= nr_sequencia_p
		and 	a.nr_interno_conta	= nr_interno_conta_p
		and 	coalesce(a.cd_motivo_exc_conta::text, '') = '';
	else
		select	coalesce(max(b.cd_grupo_material),0),
			coalesce(max(b.cd_subgrupo_material),0),
			coalesce(max(b.cd_classe_material),0),
			max(b.cd_material),
			coalesce(CASE WHEN ie_regra_valor_unit_mat_w='N' THEN  sum(a.vl_material)  ELSE sum(a.vl_unitario * a.qt_material) END ,0),
			coalesce(max(nr_atendimento),0),
			max(nr_seq_proc_pacote),
			coalesce(max(ie_consignado),'2'),
			max(ie_responsavel_credito),
			max(a.cd_setor_atendimento)
		into STRICT	cd_grupo_material_w,
			cd_subgrupo_material_w,
			cd_classe_material_w,
			cd_material_w,
			vl_item_w,
			nr_atendimento_w,
			nr_seq_proc_pacote_w,
			ie_consignado_w,
			ie_responsavel_credito_w,
			cd_setor_atendimento_ww
		from	estrutura_material_v b,
			material_atend_paciente a
		where	a.cd_material		= b.cd_material
		and	a.nr_sequencia		= nr_sequencia_p
		and 	a.nr_interno_conta 	= nr_interno_conta_p
		and 	coalesce(a.cd_motivo_exc_conta::text, '') = '';
	end if;

	nr_seq_aux_w:= nr_sequencia_p;

	-- Verificar se algum item foi excluído da conta e atualizar a tabela de resumo caso o item ainda esteja nessa tabela de resumo

	-- Verificar se algum item está na tabela de resumo com uma conta 'X' porém por algum motivo ele foi transferido para uma conta 'Y' e ajustar a tabela de resumo.
	
	open C04;
	loop
	fetch C04 into	
		nr_seq_mat_proc_w,
		ie_proc_mat_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		
		if (ie_proc_mat_w = 1) then
			--Procedimento
			begin
			select 	cd_motivo_exc_conta,
				nr_interno_conta
			into STRICT	cd_motivo_exc_conta_w,
				nr_interno_conta_resumo_w
			from 	procedimento_paciente
			where 	nr_sequencia = nr_seq_mat_proc_w;
			exception
				when others then
				delete	from TAXA_RESUMO_CONTA
				where	nr_interno_conta = nr_interno_conta_p
				and	nr_seq_mat_proc	= nr_seq_mat_proc_w;
			end;
			
			if (cd_motivo_exc_conta_w IS NOT NULL AND cd_motivo_exc_conta_w::text <> '') then
				delete	from TAXA_RESUMO_CONTA
				where	nr_interno_conta = nr_interno_conta_p
				and	nr_seq_mat_proc	 = nr_seq_mat_proc_w;
			end if;		
			
			if (coalesce(nr_interno_conta_resumo_w,0) <> nr_interno_conta_p) then
				delete	from TAXA_RESUMO_CONTA
				where	nr_interno_conta = nr_interno_conta_p
				and	nr_seq_mat_proc	 = nr_seq_mat_proc_w;
			end if;
		else
			--Material
			begin
			select 	cd_motivo_exc_conta,
				nr_interno_conta
			into STRICT	cd_motivo_exc_conta_w,
				nr_interno_conta_resumo_w
			from 	material_atend_paciente
			where 	nr_sequencia = nr_seq_mat_proc_w;
			exception
				when others then
				delete	from TAXA_RESUMO_CONTA
				where	nr_interno_conta = nr_interno_conta_p
				and	nr_seq_mat_proc	= nr_seq_mat_proc_w;
			end;
			
			if (cd_motivo_exc_conta_w IS NOT NULL AND cd_motivo_exc_conta_w::text <> '') then
				delete	from TAXA_RESUMO_CONTA
				where	nr_interno_conta = nr_interno_conta_p
				and	nr_seq_mat_proc	= nr_seq_mat_proc_w;
			end if;
			
			if (coalesce(nr_interno_conta_resumo_w,0) <> nr_interno_conta_p) then
				delete	from TAXA_RESUMO_CONTA
				where	nr_interno_conta = nr_interno_conta_p
				and	nr_seq_mat_proc	 = nr_seq_mat_proc_w;
			end if;
			
		end if;
		
		end;	
	end loop;
	close C04;

	--Guardando as informações originais do procedimento que está sendo calculado
	cd_area_procedimento_orig_w	:= cd_area_procedimento_w;
	cd_especialidade_orig_w	 	:= cd_especialidade_w;
	cd_grupo_proc_orig_w		:= cd_grupo_proc_w;
	cd_procedimento_orig_w		:= cd_procedimento_w;
	ie_origem_proced_orig_w 	:= ie_origem_proced_w;
	cd_grupo_material_orig_w 	:= cd_grupo_material_w;
	cd_subgrupo_material_orig_w	:= cd_subgrupo_material_w;
	cd_classe_material_orig_w	:= cd_classe_material_w;
	cd_material_orig_w		:= cd_material_w;
	vl_item_orig_w			:= vl_item_w;
	nr_atendimento_orig_w		:= nr_atendimento_w;
	nr_seq_proc_pacote_orig_w	:= nr_seq_proc_pacote_w;
	nr_seq_proc_interno_orig_w	:= nr_seq_proc_interno_w;
	ie_responsavel_credito_orig_ww	:= ie_responsavel_credito_w;

	-- (2) Abrir o cursor com todos os procedimentos que receberão o valor % preço taxa	
	open 	c01;
	loop
	fetch	c01 into
		nr_sequencia_w,
		nr_seq_regra_preco_w,
		cd_convenio_w,
		cd_setor_atendimento_w;
		begin
		EXIT WHEN NOT FOUND; /* apply on C01 */	
		
		select	coalesce(max(ie_somente_item_setor),'N')
		into STRICT	ie_somente_item_setor_w
		from	regra_preco_proc	
		where	nr_sequencia = nr_seq_regra_preco_w;
		
		-- (3) se o procedimento não for o procedimento TAXA (Ele mesmo)	
		if (nr_sequencia_w <> nr_sequencia_p) then
			begin	

			-- (4) delete o registro da tabela de resumo
			delete	from TAXA_RESUMO_CONTA
			where	nr_seq_servico	= nr_sequencia_w
			and	nr_seq_mat_proc	= nr_sequencia_p;
			
			if	((ie_somente_item_setor_w = 'N') or (cd_setor_atendimento_w = cd_setor_atendimento_ww)) then

				pr_total_w:= null;
				
				-- Voltando os valores originais das variáveis (necessário pois quando o sistema entra no else ele sobrecolova os valores originais das variáveis abaixo
				cd_area_procedimento_w		:= cd_area_procedimento_orig_w;
				cd_especialidade_w	 	:= cd_especialidade_orig_w;
				cd_grupo_proc_w			:= cd_grupo_proc_orig_w;
				cd_procedimento_w		:= cd_procedimento_orig_w;
				ie_origem_proced_w		:= ie_origem_proced_orig_w;
				cd_grupo_material_w		:= cd_grupo_material_orig_w;
				cd_subgrupo_material_w		:= cd_subgrupo_material_orig_w;
				cd_classe_material_w		:= cd_classe_material_orig_w;
				cd_material_w			:= cd_material_orig_w;
				vl_item_w			:= vl_item_orig_w;
				nr_atendimento_w		:= nr_atendimento_orig_w;
				nr_seq_proc_pacote_w		:= nr_seq_proc_pacote_orig_w;
				nr_seq_proc_interno_w		:= nr_seq_proc_interno_orig_w;
				nr_seq_aux_item_w		:= nr_sequencia_w;
				ie_responsavel_credito_w	:= ie_responsavel_credito_orig_ww;			
				
				-- (5) verifica o % à ser aplicado conforme a regra (por sua estrutura)
				open	c09;
				loop
				fetch	c09 into
					pr_total_w,
					cd_area_procedimento_ww,
					cd_especialidade_ww,
					cd_grupo_proc_ww,
					cd_procedimento_ww,
					ie_origem_proced_ww,
					cd_grupo_material_ww,
					cd_subgrupo_material_ww,
					cd_classe_material_ww,
					cd_material_ww,
					ie_consignado_ww,
					ie_responsavel_credito_ww,
					vl_limite_w;
				EXIT WHEN NOT FOUND; /* apply on c09 */
					begin
				
					pr_total_w	:= pr_total_w;				
					vl_limite_w	:= vl_limite_w;
					end;
				end loop;
				close c09;
				
				-- (6) após definido o % , o mesmo é aplicado sobre o valor do item e gravado na tabela de resumo
				if (pr_total_w IS NOT NULL AND pr_total_w::text <> '') then

					select	nextval('taxa_resumo_conta_seq')
					into STRICT	nr_seq_regra_taxa_w
					;

					vl_ajuste_w	:=  (vl_item_w * pr_total_w / 100);
					
					if (coalesce(vl_limite_w,0) > 0) and (vl_ajuste_w > vl_limite_w) then
						vl_ajuste_w := vl_limite_w;
					end if;
					
					insert	into TAXA_RESUMO_CONTA(NR_SEQUENCIA,
						NR_atendimento,
						NR_SEQ_MAT_PROC,
						DT_ATUALIZACAO,
						NM_USUARIO,
						DT_ATUALIZACAO_NREC,
						NM_USUARIO_NREC,
						NR_SEQ_REGRA,
						PR_TAXA,
						IE_PROC_MAT,
						vl_item,
						vl_ajuste,	
						nr_seq_servico,
						nr_interno_conta)
					values (nr_seq_regra_taxa_w,
						NR_atendimento_w,
						nr_sequencia_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_regra_preco_w,
						pr_total_w,
						ie_proc_mat_p,
						vl_item_w,
						vl_ajuste_w,
						nr_sequencia_w,
						nr_interno_conta_p);
				end if;
			end if;
			end;
		
		-- se o procedimento for ele mesmo (Própria taxa) é necessário verificar toda a conta, pois pode acontecer de ter itens na conta que foram lançados antes da taxa e que deveriam entrar no cálculo do preço %
		elsif (nr_sequencia_w = nr_sequencia_p) then
		
			open C02;
			loop
			fetch C02 into	
				nr_seq_item_w,
				ie_proc_mat_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin					
				cd_area_procedimento_w		:= null;
				cd_especialidade_w	 	:= null;
				cd_grupo_proc_w			:= null;
				cd_procedimento_w		:= null;
				ie_origem_proced_w		:= null;
				cd_grupo_material_w		:= null;
				cd_subgrupo_material_w		:= null;
				cd_classe_material_w		:= null;
				cd_material_w			:= null;
				vl_item_w			:= null;
				nr_atendimento_w		:= null;
				nr_seq_proc_pacote_w		:= null;
				nr_seq_proc_interno_w		:= null;
				nr_seq_aux_item_w		:= nr_seq_item_w;
				ie_responsavel_credito_w	:= null;
				
				if (ie_proc_mat_w	= 1) then
					select	coalesce(max(b.cd_area_procedimento),0),
						coalesce(max(b.cd_especialidade),0),
						coalesce(max(b.cd_grupo_proc),0),
						max(b.cd_procedimento),
						coalesce(max(b.ie_origem_proced),0),
						coalesce(sum(a.vl_procedimento),0),
						coalesce(max(nr_atendimento),0),
						max(nr_seq_proc_pacote),
						max(nr_seq_proc_interno),
						'2',
						max(ie_responsavel_credito)
					into STRICT	cd_area_procedimento_w,
						cd_especialidade_w,
						cd_grupo_proc_w,
						cd_procedimento_w,
						ie_origem_proced_w,
						vl_item_w,
						nr_atendimento_w,
						nr_seq_proc_pacote_w,
						nr_seq_proc_interno_w,
						ie_consignado_w,
						ie_responsavel_credito_w
					from	estrutura_procedimento_v b,
						procedimento_paciente a
					where	a.cd_procedimento	= b.cd_procedimento
					and	a.ie_origem_proced	= b.ie_origem_proced
					and	a.nr_sequencia		= nr_seq_item_w
					and 	a.nr_interno_conta	= nr_interno_conta_p
					and 	coalesce(a.cd_motivo_exc_conta::text, '') = '';
				else
					select	coalesce(max(b.cd_grupo_material),0),
						coalesce(max(b.cd_subgrupo_material),0),
						coalesce(max(b.cd_classe_material),0),
						max(b.cd_material),
						CASE WHEN ie_regra_valor_unit_mat_w='N' THEN  coalesce(sum(a.vl_material),0)  ELSE coalesce(sum(a.vl_unitario * a.qt_material),0) END ,
						coalesce(max(nr_atendimento),0),
						max(nr_seq_proc_pacote),
						coalesce(max(ie_consignado),'2'),
						max(ie_responsavel_credito)
					into STRICT	cd_grupo_material_w,
						cd_subgrupo_material_w,
						cd_classe_material_w,
						cd_material_w,
						vl_item_w,
						nr_atendimento_w,
						nr_seq_proc_pacote_w,
						ie_consignado_w,
						ie_responsavel_credito_w
					from	estrutura_material_v b,
						material_atend_paciente a
					where	a.cd_material		= b.cd_material
					and	a.nr_sequencia		= nr_seq_item_w
					and 	a.nr_interno_conta 	= nr_interno_conta_p
					and 	coalesce(a.cd_motivo_exc_conta::text, '') = '';
				end if;
							
				-- deleta o registro da tabela de resumo
				delete	from TAXA_RESUMO_CONTA
				where	nr_seq_servico	= nr_sequencia_w
				and	nr_seq_mat_proc	= nr_seq_item_w;

				pr_total_w:= null;
			
				-- verifica o % à ser aplicado conforme a regra (por sua estrutura)
				open	c09;
				loop
				fetch	c09 into
					pr_total_w,
					cd_area_procedimento_ww,
					cd_especialidade_ww,
					cd_grupo_proc_ww,
					cd_procedimento_ww,
					ie_origem_proced_ww,
					cd_grupo_material_ww,
					cd_subgrupo_material_ww,
					cd_classe_material_ww,
					cd_material_ww,
					ie_consignado_ww,
					ie_responsavel_credito_ww,
					vl_limite_w;
				EXIT WHEN NOT FOUND; /* apply on c09 */
					begin
			
					pr_total_w	:= pr_total_w;
					vl_limite_w	:= vl_limite_w;
					end;
				end loop;
				close c09;
			
				-- após definido o % , o mesmo é aplicado sobre o valor do item e gravado na tabela de resumo
				if (pr_total_w IS NOT NULL AND pr_total_w::text <> '') then

					select	nextval('taxa_resumo_conta_seq')
					into STRICT	nr_seq_regra_taxa_w
					;

					vl_ajuste_w	:=  (vl_item_w * pr_total_w / 100);
					
					if (coalesce(vl_limite_w,0) > 0) and (vl_ajuste_w > vl_limite_w) then
						vl_ajuste_w := vl_limite_w;
					end if;

					insert	into TAXA_RESUMO_CONTA(NR_SEQUENCIA,
						NR_atendimento,
						NR_SEQ_MAT_PROC,
						DT_ATUALIZACAO,
						NM_USUARIO,
						DT_ATUALIZACAO_NREC,
						NM_USUARIO_NREC,
						NR_SEQ_REGRA,
						PR_TAXA,
						IE_PROC_MAT,
						vl_item,
						vl_ajuste,	
						nr_seq_servico,
						nr_interno_conta)
					values (nr_seq_regra_taxa_w,
						NR_atendimento_w,
						nr_seq_item_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_regra_preco_w,
						pr_total_w,
						ie_proc_mat_w,
						vl_item_w,
						vl_ajuste_w,
						nr_sequencia_w,
						nr_interno_conta_p);
				end if;
				
				
				end;
			end loop;
			close C02;
		
		end if;
		
		-- soma todos os ajustes da tabela de resumo para a taxa que está sendo verificada no cursor c01
		select	coalesce(sum(vl_ajuste),0)
		into STRICT	vl_servico_w
		from	TAXA_RESUMO_CONTA
		where	nr_seq_servico		= nr_sequencia_w
		and 	nr_interno_conta	= nr_interno_conta_p;
		
		begin
		update	procedimento_paciente
		set	vl_procedimento		= vl_servico_w
		where	nr_sequencia		= nr_sequencia_w;
		exception
			when others then	
				vl_servico_w	:= vl_servico_w;
		end;
			
		end;
	end loop;
	close c01;


	-- ATUALIZAÇÃO DOS PROCEDIMENTOS TAXAS

	-- É necessário essa rotina pois pode acontecer de uma taxa depender da outra para ser atualizada

	-- Ex: Uma taxa de administração (10%) sobre às diárias

	--        Uma taxa de serviço (4%) sobre tudo que tem na conta, inclusive sobre a taxa de administração.

	--       Se excluir uma diária, por exemplo alé de atualizar a tabela de resumo excluindo a taxa deve ser atualizado o valor da taxa de administração no cálculo da taxa de serviço
	open C05;
	loop
	fetch C05 into	
		nr_sequencia_w,
		nr_seq_regra_preco_w,
		cd_convenio_w,
		cd_setor_atendimento_w;
	EXIT WHEN NOT FOUND; /* apply on C05 */
		begin
		
		nr_seq_aux_w:= nr_sequencia_w;
		
		select	coalesce(max(ie_somente_item_setor),'N')
		into STRICT	ie_somente_item_setor_w
		from	regra_preco_proc	
		where	nr_sequencia = nr_seq_regra_preco_w;
		
		open C02;
			loop
			fetch C02 into	
				nr_seq_item_w,
				ie_proc_mat_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
					
				cd_area_procedimento_w		:= null;
				cd_especialidade_w	 	:= null;
				cd_grupo_proc_w			:= null;
				cd_procedimento_w		:= null;
				ie_origem_proced_w		:= null;
				cd_grupo_material_w		:= null;
				cd_subgrupo_material_w		:= null;
				cd_classe_material_w		:= null;
				cd_material_w			:= null;
				vl_item_w			:= null;
				nr_atendimento_w		:= null;
				nr_seq_proc_pacote_w		:= null;
				nr_seq_proc_interno_w		:= null;
				nr_seq_aux_item_w		:= nr_seq_item_w;
				ie_responsavel_credito_w	:= null;
				
				if (ie_proc_mat_w	= 1) then
					select	coalesce(max(b.cd_area_procedimento),0),
						coalesce(max(b.cd_especialidade),0),
						coalesce(max(b.cd_grupo_proc),0),
						max(b.cd_procedimento),
						coalesce(max(b.ie_origem_proced),0),
						coalesce(sum(a.vl_procedimento),0),
						coalesce(max(nr_atendimento),0),
						max(nr_seq_proc_pacote),
						max(nr_seq_proc_interno),
						'2',
						max(ie_responsavel_credito)
					into STRICT	cd_area_procedimento_w,
						cd_especialidade_w,
						cd_grupo_proc_w,
						cd_procedimento_w,
						ie_origem_proced_w,
						vl_item_w,
						nr_atendimento_w,
						nr_seq_proc_pacote_w,
						nr_seq_proc_interno_w,
						ie_consignado_w,
						ie_responsavel_credito_w
					from	estrutura_procedimento_v b,
						procedimento_paciente a
					where	a.cd_procedimento	= b.cd_procedimento
					and	a.ie_origem_proced	= b.ie_origem_proced
					and	a.nr_sequencia		= nr_seq_item_w
					and 	a.nr_interno_conta	= nr_interno_conta_p
					and 	coalesce(a.cd_motivo_exc_conta::text, '') = '';
				else
					select	coalesce(max(b.cd_grupo_material),0),
						coalesce(max(b.cd_subgrupo_material),0),
						coalesce(max(b.cd_classe_material),0),
						max(b.cd_material),
						coalesce(CASE WHEN ie_regra_valor_unit_mat_w='N' THEN  sum(a.vl_material)  ELSE sum(a.vl_unitario * a.qt_material) END ,0),
						coalesce(max(nr_atendimento),0),
						max(nr_seq_proc_pacote),
						coalesce(max(ie_consignado),'2'),
						max(ie_responsavel_credito)
					into STRICT	cd_grupo_material_w,
						cd_subgrupo_material_w,
						cd_classe_material_w,
						cd_material_w,
						vl_item_w,
						nr_atendimento_w,
						nr_seq_proc_pacote_w,
						ie_consignado_w,
						ie_responsavel_credito_w
					from	estrutura_material_v b,
						material_atend_paciente a
					where	a.cd_material		= b.cd_material
					and	a.nr_sequencia		= nr_seq_item_w
					and 	a.nr_interno_conta 	= nr_interno_conta_p
					and 	coalesce(a.cd_motivo_exc_conta::text, '') = '';
				end if;
							
				-- deleta o registro da tabela de resumo
				delete	from TAXA_RESUMO_CONTA
				where	nr_seq_servico	= nr_sequencia_w
				and	nr_seq_mat_proc	= nr_seq_item_w;

				pr_total_w:= null;
			
				-- verifica o % à ser aplicado conforme a regra (por sua estrutura)
				open	c09;
				loop
				fetch	c09 into
					pr_total_w,
					cd_area_procedimento_ww,
					cd_especialidade_ww,
					cd_grupo_proc_ww,
					cd_procedimento_ww,
					ie_origem_proced_ww,
					cd_grupo_material_ww,
					cd_subgrupo_material_ww,
					cd_classe_material_ww,
					cd_material_ww,
					ie_consignado_ww,
					ie_responsavel_credito_ww,
					vl_limite_w;
				EXIT WHEN NOT FOUND; /* apply on c09 */
					begin
			
					pr_total_w	:= pr_total_w;
					vl_limite_w	:= vl_limite_w;
					end;
				end loop;
				close c09;
			
				-- após definido o % , o mesmo é aplicado sobre o valor do item e gravado na tabela de resumo
				if (pr_total_w IS NOT NULL AND pr_total_w::text <> '') then

					select	nextval('taxa_resumo_conta_seq')
					into STRICT	nr_seq_regra_taxa_w
					;

					vl_ajuste_w	:=  (vl_item_w * pr_total_w / 100);
					
					if (coalesce(vl_limite_w,0) > 0) and (vl_ajuste_w > vl_limite_w) then
						vl_ajuste_w := vl_limite_w;
					end if;

					insert	into TAXA_RESUMO_CONTA(NR_SEQUENCIA,
						NR_atendimento,
						NR_SEQ_MAT_PROC,
						DT_ATUALIZACAO,
						NM_USUARIO,
						DT_ATUALIZACAO_NREC,
						NM_USUARIO_NREC,
						NR_SEQ_REGRA,
						PR_TAXA,
						IE_PROC_MAT,
						vl_item,
						vl_ajuste,	
						nr_seq_servico,
						nr_interno_conta)
					values (nr_seq_regra_taxa_w,
						NR_atendimento_w,
						nr_seq_item_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_regra_preco_w,
						pr_total_w,
						ie_proc_mat_w,
						vl_item_w,
						vl_ajuste_w,
						nr_sequencia_w,
						nr_interno_conta_p);
				end if;
				
				
				end;
			end loop;
			close C02;
		
		-- soma todos os ajustes da tabela de resumo para a taxa que está sendo verificada
		select	coalesce(sum(vl_ajuste),0)
		into STRICT	vl_servico_w
		from	TAXA_RESUMO_CONTA
		where	nr_seq_servico		= nr_sequencia_w
		and 	nr_interno_conta	= nr_interno_conta_p;
		
		begin
		update	procedimento_paciente
		set	vl_procedimento		= vl_servico_w
		where	nr_sequencia		= nr_sequencia_w;
		exception
			when others then	
				vl_servico_w	:= vl_servico_w;
		end;
		
		
		end;
	end loop;
	close C05;
	
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_regra_preco_taxa ( nr_interno_conta_p bigint, nr_sequencia_p bigint, ie_proc_mat_p bigint, nm_usuario_p text) FROM PUBLIC;

