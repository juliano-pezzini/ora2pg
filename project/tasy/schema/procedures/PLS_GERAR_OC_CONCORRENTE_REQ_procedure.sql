-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_oc_concorrente_req ( nr_seq_regra_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_requisicao_p bigint, ie_concorrente_anterior_p text, cd_estabelecimento_p bigint, nm_usuario_p text, ie_gerar_ocorrencia_p INOUT text) AS $body$
DECLARE


qt_procedimentos_principal_w	bigint;
qt_procedimentos_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_gera_ocorrencia_w		varchar(1);
nr_seq_segurado_w		bigint;
dt_requisicao_w			timestamp;
nr_seq_req_proc_w		bigint;
qt_reg_w			bigint;
nr_seq_proc_w			bigint;
nr_seq_proc_min_w		bigint;
cd_proc_req_w			varchar(10);
qt_proc_req_w			bigint;

C01 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced
	from	pls_proc_concorrente
	where	nr_seq_regra 		= nr_seq_regra_p
	and	ie_ocorrencia		= 'S'
	and	ie_situacao		= 'A';

C02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_requisicao_proc a,
		pls_requisicao b
	where	a.nr_seq_requisicao	= b.nr_sequencia
	and	a.nr_seq_requisicao	<> nr_seq_requisicao_p
	and	b.nr_seq_segurado	= nr_seq_segurado_w
	and	a.cd_procedimento 	= cd_procedimento_w
	and	a.ie_origem_proced	= ie_origem_proced_w
	and	a.ie_status		= 'S'
	and	trunc(b.dt_requisicao)	= trunc(fim_dia(dt_requisicao_w));


BEGIN

/*Obter quantos procedimentos principais existem*/

select	count(a.nr_sequencia)
into STRICT	qt_procedimentos_principal_w
from	pls_proc_concorrente a
where	a.nr_seq_regra 	= nr_seq_regra_p
and	a.ie_principal	= 'S'
and	a.ie_situacao	= 'A'
and	exists (SELECT		1
		 from		pls_requisicao_proc x
		 where		x.nr_seq_requisicao	= nr_seq_requisicao_p
		 and		x.cd_procedimento 	= a.cd_procedimento
		 and		x.ie_origem_proced	= a.ie_origem_proced);

/*Se existir ao menos um procedimento principal na conta*/

if (qt_procedimentos_principal_w > 0) then

	select	count(a.nr_sequencia)
	into STRICT	qt_procedimentos_w
	from	pls_proc_concorrente a
	where	a.nr_seq_regra 	= nr_seq_regra_p
	and	a.ie_principal	= 'N'
	and	a.ie_situacao	= 'A'
	and	exists (SELECT		1
			 from		pls_requisicao_proc x
			 where		x.nr_seq_requisicao	= nr_seq_requisicao_p
			 and		x.cd_procedimento 	= a.cd_procedimento
			 and		x.ie_origem_proced	= a.ie_origem_proced);

	/*Se haver ao menor um procedimento principal com um não principal  é gerado ocorrencia*/

	if (qt_procedimentos_w > 0) then
		ie_gera_ocorrencia_w := 'S';

		/*Se for uma verificação de itens é verificado se deve gerar ocorrencia naquele item*/

		if (coalesce(cd_procedimento_p,0) > 0) then

			select	CASE WHEN count(a.nr_sequencia)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_gera_ocorrencia_w
			from	pls_proc_concorrente a
			where	a.nr_seq_regra  = nr_seq_regra_p
			and	a.ie_ocorrencia = 'S'
			and	a.ie_situacao	= 'A'
			and	a.cd_procedimento	= cd_procedimento_p
			and	a.ie_origem_proced	= ie_origem_proced_p;
		end if;
	end if;
else
	if (ie_concorrente_anterior_p	= 'N') then
		select	count(a.nr_sequencia)
		into STRICT	qt_procedimentos_w
		from	pls_proc_concorrente a
		where	a.nr_seq_regra 	= nr_seq_regra_p
		and	a.ie_ocorrencia	= 'S'
		and	a.ie_situacao	= 'A'
		and	exists (SELECT		1
				 from		pls_requisicao_proc x
				 where		x.nr_seq_requisicao	= nr_seq_requisicao_p
				 and		x.cd_procedimento 	= a.cd_procedimento
				 and		x.ie_origem_proced	= a.ie_origem_proced);

		if (qt_procedimentos_w > 1) then
			ie_gera_ocorrencia_w := 'S';

			/*Se for uma verificação de itens é verificado se deve gerar ocorrencia naquele item*/

			if (coalesce(cd_procedimento_p,0) > 0) then

				select	count(1)
				into STRICT	qt_reg_w
				from	pls_proc_concorrente a
				where	a.nr_seq_regra  = nr_seq_regra_p
				and	a.ie_ocorrencia = 'S'
				and	a.ie_situacao	= 'A'
				and	a.cd_procedimento	= cd_procedimento_p
				and	a.ie_origem_proced	= ie_origem_proced_p;

				nr_seq_proc_min_w	:= pls_obter_seq_proc_min_concorr(nr_seq_regra_p, null, nr_seq_requisicao_p, null);

				begin
					select	cd_procedimento,
						sum(qt_procedimento),
						max(nr_sequencia)
					into STRICT	cd_proc_req_w,
						qt_proc_req_w,
						nr_seq_proc_w
					from	pls_requisicao_proc
					where	nr_seq_requisicao = nr_seq_requisicao_p
					group by
						cd_procedimento;
				exception
				when others then
					cd_proc_req_w	:= null;
					qt_proc_req_w	:= null;
					nr_seq_proc_w	:= null;
				end;

				if (qt_reg_w > 0) then
					ie_gera_ocorrencia_w := 'S';
				else
					ie_gera_ocorrencia_w := 'N';
				end if;

				if (nr_seq_proc_min_w = nr_seq_proc_w) then
					ie_gera_ocorrencia_w := 'N';
				end if;
			end if;
		end if;

	elsif (ie_concorrente_anterior_p	= 'S') then
		begin
		select	nr_seq_segurado,
			dt_requisicao
		into STRICT	nr_seq_segurado_w,
			dt_requisicao_w
		from	pls_requisicao
		where	nr_sequencia	= nr_seq_requisicao_p;
		exception
		when others then
			nr_seq_segurado_w	:= 0;
		end;

		select	count(a.nr_sequencia)
		into STRICT	qt_procedimentos_w
		from	pls_proc_concorrente a
		where	a.nr_seq_regra 		= nr_seq_regra_p
		and	a.ie_ocorrencia		= 'S'
		and	a.ie_situacao		= 'A'
		and	a.cd_procedimento 	= cd_procedimento_p
		and	a.ie_origem_proced	= ie_origem_proced_p;

		if (qt_procedimentos_w	> 0) then
			qt_procedimentos_w	:= 0;
			open C01;
			loop
			fetch C01 into
				cd_procedimento_w,
				ie_origem_proced_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin
				open C02;
				loop
				fetch C02 into
					nr_seq_req_proc_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					select	count(1)
					into STRICT	qt_procedimentos_w
					from	pls_requisicao_proc
					where	nr_sequencia		= nr_seq_req_proc_w
					and	cd_procedimento 	= cd_procedimento_p
					and	ie_origem_proced	= ie_origem_proced_p;

					if (qt_procedimentos_w = 0)/* and (cd_procedimento_w = cd_procedimento_p) and (ie_origem_proced_w = ie_origem_proced_p)*/
 then
						ie_gera_ocorrencia_w := 'S';
					end if;
					end;
				end loop;
				close C02;
				end;
			end loop;
			close C01;
		end if;

/*		select	count(a.nr_sequencia)
		into	qt_procedimentos_w
		from	pls_proc_concorrente a
		where	a.nr_seq_regra 		= nr_seq_regra_p
		and	a.ie_ocorrencia		= 'S'
		and	a.ie_situacao		= 'A'
		and	a.cd_procedimento 	= cd_procedimento_p
		and	a.ie_origem_proced	= ie_origem_proced_p
		and	exists	(select	1
				 from	pls_requisicao_proc x,
					pls_requisicao y
				 where	x.nr_seq_requisicao	= y.nr_sequencia
				 and	x.nr_seq_requisicao	<> nr_seq_requisicao_p
				 and	y.nr_seq_segurado	= nr_seq_segurado_w
				 and	x.cd_procedimento 	= a.cd_procedimento
				 and	x.ie_origem_proced	= a.ie_origem_proced
				 and	x.ie_status		= 'S'
				 and	trunc(y.dt_requisicao)	= trunc(fim_dia(dt_requisicao_w)));

		if	(qt_procedimentos_w > 0) then
			ie_gera_ocorrencia_w := 'S';
		end if;*/
	end if;
end if;

ie_gerar_ocorrencia_p := ie_gera_ocorrencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_oc_concorrente_req ( nr_seq_regra_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_requisicao_p bigint, ie_concorrente_anterior_p text, cd_estabelecimento_p bigint, nm_usuario_p text, ie_gerar_ocorrencia_p INOUT text) FROM PUBLIC;

