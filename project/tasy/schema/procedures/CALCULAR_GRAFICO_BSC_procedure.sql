-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_grafico_bsc ( ie_percentual_p text, vl_limite_p bigint, vl_meta_p bigint, vl_real_p INOUT bigint, vl_vermelho_p INOUT bigint, vl_amarelo_p INOUT bigint, vl_verde_p INOUT bigint, vl_ext_esquerda_p INOUT bigint, vl_ext_direita_p INOUT bigint, ds_mascara_p INOUT text, ds_medida_p INOUT text, ie_forma_calc_p text) AS $body$
DECLARE


vl_total_p		double precision;
vl_divisor_p		bigint;
vl_auxiliar_p		double precision;
qte			integer;
vl_diferenca_w		double precision;
vl_angulo_verde_w	double precision;
vl_angulo_amarelo_w 	double precision;
vl_angulo_vermelho_w	double precision;
pr_angulo_verde_w	double precision;
pr_angulo_amarelo_w 	double precision;
pr_angulo_vermelho_w	double precision;


BEGIN
ds_medida_p	:= '';

if (ie_percentual_p = 'S') and
	((coalesce(ie_forma_calc_p::text, '') = '') or (ie_forma_calc_p = 'P')) then
	vl_ext_esquerda_p	:= 0;
	vl_ext_direita_p	:= 100;

	if (vl_real_p > 100) then
		vl_ext_direita_p	:= vl_real_p;
	elsif (vl_real_p < 0) then
		vl_ext_esquerda_p	:= vl_real_p;
	end if;

	/* Maior melhor */

	if (vl_meta_p > vl_limite_p) then
		vl_verde_p	:= vl_limite_p;
		vl_amarelo_p	:= vl_meta_p - vl_limite_p;
		vl_vermelho_p	:= vl_ext_direita_p - (vl_verde_p + vl_amarelo_p);
	else
		vl_verde_p	:= vl_meta_p;
		vl_amarelo_p	:= vl_limite_p - vl_meta_p;
		vl_vermelho_p	:= vl_ext_direita_p - (vl_verde_p + vl_amarelo_p);
	end	if;

	if (vl_meta_p > vl_limite_p) then
		vl_ext_esquerda_p	:= vl_limite_p - abs(vl_amarelo_p);
		vl_ext_direita_p	:= vl_meta_p + abs(vl_amarelo_p);
		vl_total_p		:= vl_ext_direita_p - vl_ext_esquerda_p;
		if (vl_real_p > vl_ext_direita_p) then
			vl_ext_direita_p	:= vl_real_p + (abs(vl_real_p) * 0.1);
		elsif (vl_real_p < vl_ext_esquerda_p) then
			vl_ext_esquerda_p	:= vl_real_p - (abs(vl_real_p) * 0.1);
		end	if;
		vl_verde_p		:= dividir((100 * (vl_limite_p - vl_ext_esquerda_p)) , vl_total_p);
		vl_amarelo_p		:= dividir((100 * (vl_meta_p - vl_limite_p)) , vl_total_p);
		vl_vermelho_p		:= dividir((100 * (vl_meta_p - vl_limite_p)) , vl_total_p);
	else
		vl_ext_esquerda_p	:= vl_meta_p - abs(vl_amarelo_p);
		vl_ext_direita_p	:= vl_limite_p + abs(vl_amarelo_p);
		vl_total_p		:= vl_ext_direita_p - vl_ext_esquerda_p;
		if (vl_real_p > vl_ext_direita_p) then
			vl_ext_direita_p	:= vl_real_p + (abs(vl_real_p) * 0.1);
		elsif (vl_real_p < vl_ext_esquerda_p) then
			vl_ext_esquerda_p	:= vl_real_p - (abs(vl_real_p) * 0.1);
		end	if;
		vl_verde_p		:= dividir((100 * (vl_meta_p - vl_ext_esquerda_p)) , vl_total_p);
		vl_amarelo_p		:= dividir((100 * (vl_limite_p - vl_meta_p)) , vl_total_p);
		vl_vermelho_p		:= dividir((100 * (vl_ext_direita_p - vl_limite_p)) , vl_total_p);

	end	if;
elsif (ie_forma_calc_p = 'L') then
	begin
	vl_ext_esquerda_p	:= coalesce(vl_ext_esquerda_p,0);
	vl_ext_direita_p	:= coalesce(vl_ext_direita_p,100);
	vl_total_p			:= vl_ext_direita_p - vl_ext_esquerda_p;
	vl_verde_p			:= 0;
	vl_amarelo_p		:= 0;
	vl_vermelho_p		:= 0;
	if (vl_meta_p > vl_limite_p) and (vl_total_p <> 0) then
		if (vl_limite_p <> 0) then
			vl_verde_p		:= vl_limite_p;
		end if;
		if	((vl_meta_p - vl_limite_p) <> 0) then
			vl_amarelo_p	:= ((vl_meta_p - vl_limite_p) * vl_ext_direita_p) / vl_total_p;
		end if;
		if	((vl_ext_direita_p - (vl_verde_p + vl_amarelo_p)) <> 0) then
			vl_vermelho_p	:= vl_ext_direita_p - (vl_verde_p + vl_amarelo_p);
		end if;
	elsif (vl_total_p <> 0) then
		if	((vl_meta_p - vl_ext_esquerda_p) <> 0) then
			vl_verde_p		:= ((vl_meta_p - vl_ext_esquerda_p) * vl_ext_direita_p) / vl_total_p;
		end if;
		if	((vl_limite_p - vl_meta_p) <> 0) then
			vl_amarelo_p	:= ((vl_limite_p - vl_meta_p) * vl_ext_direita_p) / vl_total_p;
		end if;
		if	(( vl_ext_direita_p - vl_limite_p) <> 0) then
			vl_vermelho_p	:= (( vl_ext_direita_p - vl_limite_p) * vl_ext_direita_p) / vl_total_p;
		end if;
	end if;
	end;
else
	if (vl_meta_p > vl_limite_p) then
		vl_amarelo_p		:= vl_meta_p - vl_limite_p;
		vl_ext_esquerda_p	:= vl_limite_p - abs(vl_amarelo_p);
		vl_ext_direita_p	:= vl_meta_p + abs(vl_amarelo_p);
		if (vl_real_p > vl_ext_direita_p) then
			if (vl_real_p < 0) then
				vl_ext_direita_p	:= vl_real_p + abs(vl_real_p * 0.1); -- Acrescenta 10%
			else
				vl_ext_direita_p	:= vl_real_p + (vl_real_p * 0.1); -- Acrescenta 10%
			end	if;
		elsif (vl_real_p < vl_ext_esquerda_p) then
			vl_ext_esquerda_p	:= vl_real_p - abs(vl_real_p * 0.1); -- Acrescenta 10%
		end	if;
		vl_total_p		:= vl_ext_direita_p - vl_ext_esquerda_p;
		vl_verde_p		:= dividir((100 * (vl_limite_p - vl_ext_esquerda_p)) , vl_total_p); -- Incluido o dividir devido ao erro de divis達o por zero
		vl_amarelo_p		:= dividir((100 * (vl_meta_p - vl_limite_p)) , vl_total_p); -- Incluido o dividir devido ao erro de divis達o por zero
		vl_vermelho_p		:= dividir((100 * (vl_ext_direita_p - vl_meta_p)) , vl_total_p); -- Incluido o dividir devido ao erro de divis達o por zero
	else
		vl_amarelo_p		:= vl_limite_p - vl_meta_p;
		vl_ext_esquerda_p	:= vl_meta_p - abs(vl_amarelo_p);
		vl_ext_direita_p	:= vl_limite_p + abs(vl_amarelo_p);
		if (vl_real_p > vl_ext_direita_p) then
			vl_ext_direita_p	:= vl_real_p + (abs(vl_real_p) * 0.1); -- Acrescenta 10%
		elsif (vl_real_p < vl_ext_esquerda_p) then
			vl_ext_esquerda_p	:= vl_real_p - (abs(vl_real_p) * 0.1); -- Acrescenta 10%
		end	if;
		vl_total_p		:= vl_ext_direita_p - vl_ext_esquerda_p;
		vl_verde_p		:= dividir((100 * (vl_meta_p - vl_ext_esquerda_p)) , vl_total_p);
		vl_amarelo_p		:= dividir((100 * (vl_limite_p - vl_meta_p)) , vl_total_p);
		vl_vermelho_p		:= dividir((100 * (vl_ext_direita_p - vl_limite_p)) , vl_total_p);
	end if;

/*	vl_divisor_p	:= 1;
	if	(vl_real_p < 1000) then
		vl_divisor_p	:= 1;
	elsif	(vl_ext_direita_p > 999) and
		(vl_ext_direita_p < 1000000) then
		vl_divisor_p	:= 1000;
		--ds_medida_p	:= 'mil';
	elsif	(vl_ext_direita_p >= 1000000) then
		vl_divisor_p	:= 1000000;
		--ds_medida_p	:= 'milh達o';
	end	if;*/
vl_divisor_p	:= 1;
	vl_ext_esquerda_p	:= vl_ext_esquerda_p / vl_divisor_p;
	vl_ext_direita_p	:= vl_ext_direita_p / vl_divisor_p;
	vl_verde_p		:= vl_verde_p / vl_divisor_p;
	vl_amarelo_p		:= vl_amarelo_p / vl_divisor_p;
	vl_vermelho_p		:= vl_vermelho_p / vl_divisor_p;
	vl_real_p		:= vl_real_p / vl_divisor_p;

end if;
ds_medida_p := '';

vl_diferenca_w	:= abs(vl_ext_esquerda_p - vl_ext_direita_p);
if (vl_diferenca_w > 11) then
	ds_mascara_p	:= '###,##0';
else
	ds_mascara_p	:= '##0.0';
end if;

end	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_grafico_bsc ( ie_percentual_p text, vl_limite_p bigint, vl_meta_p bigint, vl_real_p INOUT bigint, vl_vermelho_p INOUT bigint, vl_amarelo_p INOUT bigint, vl_verde_p INOUT bigint, vl_ext_esquerda_p INOUT bigint, vl_ext_direita_p INOUT bigint, ds_mascara_p INOUT text, ds_medida_p INOUT text, ie_forma_calc_p text) FROM PUBLIC;

