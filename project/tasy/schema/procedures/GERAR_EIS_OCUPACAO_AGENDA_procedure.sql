-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_eis_ocupacao_agenda ( dt_agenda_p timestamp, nm_usuario_p text) AS $body$
DECLARE

 
ie_feriado_w			varchar(0001) := 'N';
ie_dia_semana_w			smallint;
hr_inicial_w			timestamp;
hr_final_w				timestamp;
hr_fim_w				timestamp;
hr_atual_w				timestamp;
hr_nada_w				timestamp;
hr_inicial_intervalo_w	timestamp;
hr_final_intervalo_w	timestamp;
ie_utiliza_ageweb_w		varchar(1);
nr_minuto_intervalo_w	bigint;
ie_classif_Agenda_w		varchar(0005);
qt_existe_agenda_w		smallint := 0;
qt_horario_w			integer := 0;
nr_sequencia_w			bigint := 0;
ds_observacao_w			varchar(255);
qt_min_minimo_w			integer;
ds_horario_w			varchar(255);
qt_turno_w				integer;
qt_turno_diario_w		integer;
nr_seq_esp_w			bigint := 0;
nr_seq_classif_med_w	bigint;
nr_seq_sala_w			bigint;
cd_convenio_padrao_w	bigint;
cd_categoria_padrao_w	varchar(10);
ie_excluir_livres_w		varchar(01) := 'N';
ie_excluir_livres_novo_w varchar(02) := 'N';
ie_excluir_livres_fut_w	 varchar(01) := 'S';
cd_turno_w				varchar(01) := 0;
HR_QUEBRA_TURNO_W		varchar(05);
qt_min_QUEBRA_TURNO_W	varchar(05);
ie_horario_adicional_w 	varchar(01) := 'S';
nr_seq_hora_w			bigint;
ie_bloqueio_w			varchar(1);
ie_turno_w				smallint;
nr_seq_turno_w			bigint;
nr_seq_turno_esp_w		bigint;
ie_gerar_nome_w			varchar(1);
cd_setor_agenda_w		bigint;
nr_seq_hor_bloq_w		bigint;
ie_gerar_hor_bloq_w		varchar(1) := 'N';
cd_medico_req_w			varchar(10);
nr_seq_motivo_transf_w	bigint;
ie_status_autor_w		varchar(15);
ie_gerar_hor_falta_w	varchar(1);
ie_gerar_hor_w			varchar(1);

qt_gera_horario_w		bigint;
ie_manter_livres_w		varchar(1);
ie_util_prof_ag_med_req_w varchar(1);
cd_prof_agenda_w		varchar(10);

 
 
cd_especialidade_w			integer;
cd_medico_w					varchar(10);
cd_setor_exclusivo_w 		integer;
ie_clinica_agenda_w 		integer;
cd_estabelecimento_w 		bigint;
ie_gerar_sobra_horario_w	varchar(1);

 
dt_agenda_w			timestamp;
ie_status_agenda_w	varchar(2);
cd_tipo_agenda_w	bigint;
cd_agenda_w			bigint;
ie_encaixe_w		varchar(1);
ie_transferido_w	agenda_consulta.ie_transferido%type;
qt_horario_livre_w	bigint;
dt_parametro_fim_w		timestamp;
dt_parametro_w			timestamp;

C01 CURSOR FOR 
	SELECT 	1 ie_turno, 
			0 nr_seq_turno, 
			nr_sequencia nr_seq_turno_esp, 
			to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
			to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
			to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
			to_char(hr_final,'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
			nr_minuto_intervalo, 
			ie_classif_agenda, 
			0, 
			ds_observacao, 
			nr_seq_sala, 
			0 cd_convenio_padrao, 
			null cd_categoria_padrao, 
			cd_medico_req, 
			null hr_inicial_intervalo, 
			null hr_final_intervalo, 
			'S' ie_utiliza_ageweb 
	from 	agenda_Turno_Esp a 
	where 	cd_agenda   	= cd_agenda_w 
	and		((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (7,1))) or (coalesce(ie_dia_semana::text, '') = '')) 
	--and	dt_agenda		= trunc(dt_agenda_p,'dd') 
	and		obter_se_turno_esp_agecons_vig(dt_agenda,dt_agenda_fim,dt_agenda_p) = 'S' 
	--and 	hr_inicial 		< hr_final 
	and		to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss') 
	and		nr_minuto_intervalo	> 0 
	and		nr_seq_esp_w		> 0 
	and		trunc(dt_agenda_p)	> trunc(clock_timestamp()) 
	and		qt_horario_livre_w = 0 
	
union
 
	SELECT 	2 ie_turno, 
			nr_sequencia nr_seq_turno, 
			0 nr_seq_turno_esp, 
			to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
			to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
			to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
			to_char(hr_final,'hh24:mi'),'dd/mm/yyyy hh24:mi'), 
			nr_minuto_intervalo, 
			ie_classif_agenda, 
			nr_seq_classif_med, 
			ds_observacao, 
			nr_seq_sala, 
			cd_convenio_padrao, 
			cd_categoria_padrao, 
			cd_medico_req, 
			hr_inicial_intervalo, 
			hr_final_intervalo, 
			coalesce(a.ie_utiliza_ageweb,'S') 
	from 	agenda_Turno a 
	where 	cd_agenda   		= cd_agenda_w 
	and		((ie_dia_semana = ie_dia_semana_w) or ((ie_dia_semana = 9) and (ie_dia_Semana_w not in (7,1)))) 
	--and 	hr_inicial 			< hr_final 
	and		to_char(hr_inicial,'hh24:mi:ss') < to_char(hr_final,'hh24:mi:ss') 
	and		((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_agenda_p))) 
	and		((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_agenda_p))) 
	and		coalesce(nr_minuto_intervalo,0) > 0 
	and		((((ie_feriado_w <> 'S') and (coalesce(ie_feriado,'X') <> 'F')) or (coalesce(ie_feriado,obter_se_agenda_feriado(cd_agenda_w)) = 'S')) or (ie_feriado = 'F' AND ie_feriado_w = 'S')) 
	and (nr_seq_esp_w			= 0 or ie_horario_adicional_w = 'S') 
	and		obter_se_gerar_turno_agecons(dt_inicio_vigencia,ie_frequencia,dt_agenda_p) = 'S' 
	and		((Obter_Semana_Dia_Agecons(dt_agenda_p,ie_dia_semana) = coalesce(ie_semana,0)) or (coalesce(ie_semana,0) = 0)) 
	and		trunc(dt_agenda_p)	> trunc(clock_timestamp()) 
	and		qt_horario_livre_w = 0 
	order by 1,2,3,4;

C02 CURSOR FOR 
	SELECT	a.dt_agenda, 
			(a.dt_agenda + (a.nr_minuto_duracao / 1440)) dt_final 
	from 	agenda b, 
			agenda_consulta a 
	where 	a.cd_agenda	= b.cd_agenda 
	and		a.cd_agenda	= cd_agenda_w 
  --and  	a.dt_agenda between trunc(dt_agenda_p,'dd') and (trunc(dt_agenda_p,'dd') + (86399/86400)) 
	and  	trunc(a.dt_agenda) = trunc(dt_agenda_p) 
	and		a.dt_agenda >= clock_timestamp() 
	and		ie_gerar_sobra_horario_w	= 'S' 
	and		b.ie_gerar_sobra_horario = 'S' 
	order by 1;
	
C03 CURSOR FOR 
	SELECT	dt_agenda, 
			ie_status_agenda, 
			nr_seq_turno, 
			nr_seq_turno_esp, 
			cd_turno, 
			nr_seq_sala, 
			ie_classif_agenda, 
			coalesce(ie_encaixe,'N'), 
			coalesce(ie_transferido,'N') 
	from	agenda_consulta 
	where	dt_agenda between dt_parametro_w and dt_parametro_fim_w	 
	and		cd_agenda = cd_agenda_w 
	order by 1;
	
	 
C04 CURSOR FOR 
	SELECT	distinct 
			a.cd_agenda 
	from	agenda a, 
			agenda_turno b 
	where	a.cd_agenda = b.cd_agenda 
	and		a.cd_tipo_agenda = 3 
	and		a.ie_situacao = 'A'			 
	order by 1;
	

BEGIN 
dt_parametro_fim_w	:= (last_day(trunc(dt_agenda_p, 'dd')) + 1) - (1/86400);
dt_parametro_w		:= trunc(dt_agenda_p,'month');
 
open C04;
loop 
fetch C04 into	 
	cd_agenda_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin 
	 
	--Deletar registros antigos 
	delete	FROM eis_ocupacao_agenda 
	where	cd_agenda = cd_agenda_w 
	and		dt_agenda between dt_parametro_w and dt_parametro_fim_w;
 
	select	coalesce(max(HR_QUEBRA_TURNO), '12'), 
			coalesce(max(qt_min_quebra_turno), '00'), 
			coalesce(max(ie_gerar_hor_bloq),'N'), 
			max(cd_especialidade), 
			max(cd_pessoa_fisica), 
			max(cd_setor_exclusivo), 
			max(ie_clinica), 
			max(cd_estabelecimento), 
			max(ie_gerar_sobra_horario), 
			max(cd_tipo_agenda) 
	into STRICT	HR_QUEBRA_TURNO_W, 
			qt_min_QUEBRA_TURNO_W, 
			ie_gerar_hor_bloq_w, 
			cd_especialidade_w, 
			cd_medico_w, 
			cd_setor_exclusivo_w, 
			ie_clinica_agenda_w, 
			cd_estabelecimento_w, 
			ie_gerar_sobra_horario_w, 
			cd_tipo_agenda_w 
	from	agenda 
	where 	cd_agenda	= cd_agenda_w;
	 
	hr_nada_w	:= trunc(dt_agenda_p,'year');
	ie_gerar_hor_falta_w := obter_param_usuario(821, 189, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_gerar_hor_falta_w);
 
	/* verificar feriado */
 
	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END  
	into STRICT	ie_feriado_w 
	from 	feriado a, 
			agenda b 
	where 	a.cd_estabelecimento = cd_estabelecimento_w 
	and		a.dt_feriado = dt_agenda_p 
	and 	b.cd_agenda = cd_agenda_w;
 
	select	coalesce(max(nr_sequencia),0), 
			coalesce(max(ie_horario_adicional), 'N') 
	into STRICT	nr_seq_esp_w, 
			ie_horario_adicional_w 
	from	agenda_turno_esp 
	where	cd_agenda	= cd_agenda_w 
	and		obter_se_turno_esp_agecons_vig(dt_agenda,dt_agenda_fim,dt_agenda_p) = 'S';	
 
	select	max(coalesce(ie_utiliza_prof_horario,'N')), 
			max(cd_pessoa_fisica) 
	into STRICT	ie_util_prof_ag_med_req_w, 
			cd_prof_agenda_w 
	from	agenda 
	where	cd_agenda = cd_agenda_w;
 
	select max(cd_pessoa_fisica) 
	into STRICT	cd_prof_agenda_w 
	from	medico 
	where	cd_pessoa_fisica = cd_prof_agenda_w;
	 
	--Validar se deve gerar novos horários livres 
	SELECT	/*+ index (a AGECONS_UK) */			 
			coalesce(SUM(CASE WHEN ie_status_agenda='L' THEN 1  ELSE CASE WHEN ie_status_agenda='LF' THEN 1  ELSE 0 END  END ),0) 
	INTO STRICT	qt_horario_livre_w			 
	FROM 	agenda_consulta 
	WHERE 	cd_agenda				= cd_agenda_w 
	AND		TRUNC(dt_agenda,'dd')	= TRUNC(dt_agenda_p,'dd') 
	AND		ie_status_agenda		<> 'C';
					 
	IF (nr_sequencia_w = 0) then 
		select pkg_date_utils.get_WeekDay(dt_agenda_p) 
		into STRICT	ie_dia_semana_w 
		;
	END IF;
 
	qt_min_minimo_w		:= 5;
	ds_horario_w		:= '';
 
	--Insere os horários já gerados da AGENDA_CONSULTA na EIS_OCUPACAO_AGENDA 
	open C03;
	loop 
	fetch C03 into	 
		dt_agenda_w, 
		ie_status_agenda_w, 
		nr_seq_turno_w, 
		nr_seq_turno_esp_w, 
		cd_turno_w, 
		nr_seq_sala_w, 
		ie_classif_agenda_w, 
		ie_encaixe_w, 
		ie_transferido_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		/*if	(cd_agenda_w = 8910)then 
			insert into log_agenda (	 
			ds_dados) 
			values('01 - '|| to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi') ||' - '||ie_status_agenda_w || ' - ' || to_char(dt_agenda_p,'dd/mm/yyyy hh24:mi'));		 
			commit; 
		end if;*/
 
		 
		 
		insert into eis_ocupacao_agenda(	 
				cd_agenda, 
				cd_especialidade,    
				cd_medico, 
				dt_agenda, 
				nr_seq_turno, 
				nr_seq_turno_esp, 
				nr_seq_sala, 
				cd_setor_exclusivo, 
				ie_status_agenda, 
				ie_clinica_agenda, 
				cd_turno, 
				ie_classif_agenda, 
				ie_encaixe, 
				ie_transferido, 
				cd_tipo_agenda) 
			values (	cd_agenda_w, 
				cd_especialidade_w, 
				cd_medico_w, 
				dt_agenda_w, 
				nr_seq_turno_w, 
				nr_seq_turno_esp_w, 
				nr_seq_sala_w, 
				cd_setor_exclusivo_w, 
				ie_status_agenda_w, 
				ie_clinica_agenda_w, 
				cd_turno_w, 
				ie_classif_agenda_w, 
				ie_encaixe_w, 
				ie_transferido_w, 
				cd_tipo_agenda_w);
		end;
	end loop;
	close C03;
 
	--Gera novos horários se for necessário 
	OPEN C01;
	LOOP 
	FETCH C01 into 
		ie_turno_w, 
		nr_seq_turno_w, 
		nr_seq_turno_esp_w, 
		hr_inicial_w, 
		hr_final_w, 
		nr_minuto_Intervalo_w, 
		ie_classif_agenda_w, 
		nr_seq_classif_med_w, 
		ds_observacao_w, 
		nr_seq_sala_w, 
		cd_convenio_padrao_w, 
		cd_categoria_padrao_w, 
		cd_medico_req_w, 
		hr_inicial_intervalo_w, 
		hr_final_intervalo_w, 
		ie_utiliza_ageweb_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		BEGIN	 
				 
		IF (nr_minuto_intervalo_w < qt_min_minimo_w) then 
			qt_min_minimo_w	:= nr_minuto_intervalo_w;
		END IF;
 
		hr_atual_w			:= hr_inicial_w;
		hr_inicial_intervalo_w 		:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_inicial_intervalo_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
		hr_final_intervalo_w 		:= to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || to_char(hr_final_intervalo_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
		 
		WHILE(hr_atual_w	< hr_final_w) LOOP 
			BEGIN 
			hr_fim_w		:= hr_atual_w + (nr_minuto_Intervalo_w - 1) /1440;
			if	(((hr_atual_w < hr_inicial_intervalo_w) or (hr_atual_w >= hr_final_intervalo_w)) or 
				((coalesce(hr_inicial_intervalo_w::text, '') = '') and (coalesce(hr_final_intervalo_w::text, '') = ''))) then 
				--(hr_atual_w >= sysdate) then 
				BEGIN 
				 
				select	count(*) 
				into STRICT	qt_existe_agenda_w 
				from	eis_ocupacao_agenda 
				where	cd_agenda = cd_agenda_w 
				and		to_char(dt_agenda,'dd/mm/yyyy hh24:mi') = to_char(hr_atual_w,'dd/mm/yyyy hh24:mi');
		 
				IF (qt_existe_agenda_w = 0) then 
					BEGIN 
							 
					nr_seq_motivo_transf_w := Obter_motivo_bloqueio_agenda(cd_agenda_w, hr_atual_w, ie_dia_semana_w, nr_seq_motivo_transf_w);
					ie_bloqueio_w := consistir_bloqueio_agenda(cd_agenda_w, hr_atual_w, ie_dia_semana_w, ie_bloqueio_w);
 
					IF (ie_bloqueio_w 		= 'N') or (ie_gerar_hor_bloq_w	= 'S') then 
 
						cd_turno_w		:= 0;
 
							IF ((to_char(hr_atual_w,'hh24'))::numeric  > somente_numero(HR_QUEBRA_TURNO_W)) or 
								(((to_char(hr_atual_w,'hh24'))::numeric  = somente_numero(HR_QUEBRA_TURNO_W)) and ((to_char(hr_atual_w,'mi'))::numeric  >= somente_numero(qt_min_QUEBRA_TURNO_W))) then 
								cd_turno_w	:= 1;
							END IF;
							 
							/*if	(cd_agenda_w = 2551)then 
								insert into log_agenda (	 
								ds_dados) 
								values('02 - '||to_char(dt_agenda_w,'dd/mm/yyyy hh24:mi')||' - '||ie_status_agenda_w||' - '||to_char(hr_atual_w,'dd/mm/yyyy hh24:mi')||' - '||qt_existe_agenda_w 
								||' - '||to_char(hr_fim_w,'dd/mm/yyyy hh24:mi'));		 
							end if;*/
 
 
							insert into eis_ocupacao_agenda(	 
									cd_agenda,        
									cd_especialidade, 
									cd_medico, 
									dt_agenda, 
									nr_seq_turno, 
									nr_seq_turno_esp, 
									nr_seq_sala, 
									cd_setor_exclusivo, 
									ie_status_agenda, 
									ie_clinica_agenda, 
									cd_turno, 
									ie_classif_agenda, 
									cd_tipo_agenda) 
								values (	cd_agenda_w, 
									cd_especialidade_w, 
									cd_medico_w, 
									hr_atual_w, 
									nr_seq_turno_w, 
									nr_seq_turno_esp_w, 
									nr_seq_sala_w, 
									cd_setor_exclusivo_w, 
									CASE WHEN ie_bloqueio_w='S' THEN 'B'  ELSE 'L' END , 
									ie_clinica_agenda_w, 
									cd_turno_w, 
									ie_classif_agenda_w, 
									cd_tipo_agenda_w);		
					END IF;
					END;
				END IF;
				END;
			END IF;
		 
			/* atualizar horário a ser gerado */
 
			if	((hr_atual_w + nr_minuto_intervalo_w / 1440) >= hr_inicial_intervalo_w) and 
				((hr_atual_w + nr_minuto_intervalo_w / 1440) < hr_final_intervalo_w) then 
				hr_atual_w := hr_final_intervalo_w;
			else 
				hr_atual_w := hr_atual_w + nr_minuto_intervalo_w / 1440;
			end if;
			qt_horario_w 	:= qt_horario_w + 1;
			END;
		END LOOP;
		END;
	END LOOP;
	CLOSE C01;
 
	hr_fim_w		:= hr_nada_w;
	ds_observacao_w		:= '';
	ie_classif_agenda_w	:= 'L';
 
	--Gerar sobra de horários 
	OPEN C02;
	LOOP 
	FETCH C02 into 
		hr_inicial_w, 
		hr_final_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		IF (hr_fim_w <> hr_nada_w) and (hr_inicial_w > hr_fim_w) then 
			BEGIN			 
			nr_minuto_intervalo_w	:= (hr_inicial_w - hr_fim_w) * 1440;
			hr_atual_w				:= hr_fim_w;
 
			IF (nr_minuto_intervalo_w >= qt_min_minimo_w) then 
				BEGIN 
 
				select	count(*) 
				into STRICT	qt_turno_w 
				from 	agenda_Turno 
				where 	cd_agenda   	= cd_agenda_w 
				 and 	ie_dia_semana	= ie_dia_Semana_w 
				 and	hr_atual_w	between 
							to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
							to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi') 
							and 
							to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
							to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi');
 
				select	count(*) 
				into STRICT	qt_turno_diario_w 
				from 	agenda_Turno 
				where 	cd_agenda   	= cd_agenda_w 
				 and 	ie_dia_semana	= 9 
				 and	hr_atual_w	between 
							to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
							to_char(hr_inicial,'hh24:mi'),'dd/mm/yyyy hh24:mi') 
							and 
							to_date(to_char(dt_agenda_p,'dd/mm/yyyy') || ' ' || 
							to_char(hr_final - 1/1440,'hh24:mi'),'dd/mm/yyyy hh24:mi') 
				 and	qt_turno_w	= 0;
 
 
 
				IF	((qt_turno_w > 0) OR (qt_turno_diario_w > 0)) then 
					 
 
					select	coalesce(max(ie_classif_agenda), 'L') 
					into STRICT	ie_classif_agenda_w 
					from	agenda_consulta 
					where	cd_agenda   		= cd_agenda_w 
					and 	trunc(dt_agenda, 'dd')	= trunc(dt_agenda_p, 'dd');
 
					cd_turno_w		:= 0;
 
					IF ((to_char(hr_atual_w,'hh24'))::numeric  > somente_numero(HR_QUEBRA_TURNO_W)) or 
						(((to_char(hr_atual_w,'hh24'))::numeric  = somente_numero(HR_QUEBRA_TURNO_W)) and ((to_char(hr_atual_w,'mi'))::numeric  >= somente_numero(qt_min_QUEBRA_TURNO_W))) then 
						cd_turno_w	:= 1;
					END IF;
 
					 
					insert into eis_ocupacao_agenda(	 
							cd_agenda, 
							cd_especialidade,    
							cd_medico, 
							dt_agenda, 
							nr_seq_turno, 
							nr_seq_turno_esp, 
							nr_seq_sala, 
							cd_setor_exclusivo, 
							ie_status_agenda, 
							ie_clinica_agenda, 
							cd_turno, 
							ie_classif_agenda, 
							cd_tipo_agenda) 
						values (	cd_agenda_w, 
							cd_especialidade_w, 
							cd_medico_w, 
							hr_atual_w, 
							nr_seq_turno_w, 
							nr_seq_turno_esp_w, 
							nr_seq_sala_w, 
							cd_setor_exclusivo_w, 
							'L', 
							ie_clinica_agenda_w, 
							cd_turno_w, 
							ie_classif_agenda_w, 
							cd_tipo_agenda_w);
				END IF;
				END;
			END IF;
			END;
		END IF;
		IF (hr_final_w > hr_fim_w) then 
			hr_fim_w	:= hr_final_w;
		END IF;
	END LOOP;
	CLOSE C02;
	end;
end loop;
close C04;
 
commit;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_eis_ocupacao_agenda ( dt_agenda_p timestamp, nm_usuario_p text) FROM PUBLIC;

