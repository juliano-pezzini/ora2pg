-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_gerar_autor_agrup ( nr_seq_agenda_p bigint, ie_evento_p text, nm_usuario_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


ie_valor_w		varchar(2);
qt_ponto_min_w		double precision;
vl_procedimento_w	double precision;
qt_acumulada_w		double precision	:= 0;
cd_estabelecimento_w	smallint;
cd_convenio_w		integer;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
cd_categoria_w		varchar(10);
cd_plano_w		varchar(10);
cd_tipo_acomodacao_w	smallint;
ie_tipo_atendimento_w	smallint;
cd_pessoa_fisica_w	varchar(10);
nr_sequencia_autor_w	bigint;
nr_seq_estagio_w	bigint;
nr_seq_agenda_w		        agenda_paciente.nr_sequencia%type;
ie_forma_periodo_w	varchar(1);
dt_agenda_w		timestamp;
nr_seq_proc_autor_w	bigint;

/* Regra */

c01 CURSOR FOR
SELECT	ie_valor,
	qt_ponto_min,
	coalesce(ie_forma_periodo,'D')
from	regra_gerar_autor_agrup
where	ie_evento	= ie_evento_p
and	clock_timestamp() between dt_inicio_vigencia and coalesce(dt_fim_vigencia,to_date('30/12/2099','dd/mm/yyyy'));

/* Agendamentos */

c02 CURSOR FOR
/* Procedimento principal do agendamento */

SELECT	a.cd_procedimento,
	a.ie_origem_proced,
	a.cd_convenio,
	a.cd_categoria,
	a.cd_tipo_acomodacao,
	a.ie_tipo_atendimento,
	a.cd_plano,
	b.cd_estabelecimento,
	a.nr_sequencia
from	agenda b,
	agenda_paciente a
where	a.cd_agenda		= b.cd_agenda
and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
and	((ie_forma_periodo_w = 'D' and trunc(a.dt_agenda,'dd') = trunc(dt_agenda_w,'dd')) or (ie_forma_periodo_w = 'S' and trunc(a.dt_agenda,'dd') >= trunc(dt_agenda_w,'dd') - 7))
and	a.ie_status_agenda	<> 'C'
and	not exists (SELECT	1
			from	procedimento_autorizado x
			where	x.nr_seq_agenda		= a.nr_sequencia
			and	x.cd_procedimento	= a.cd_procedimento
			and	x.ie_origem_proced	= a.ie_origem_proced)

union all

/* Procedimentos adicionais do agendamento */

select	b.cd_procedimento,
	b.ie_origem_proced,
	coalesce(b.cd_convenio,a.cd_convenio),
	coalesce(b.cd_categoria,a.cd_categoria),
	a.cd_tipo_acomodacao,
	a.ie_tipo_atendimento,
	a.cd_plano,
	c.cd_estabelecimento,
	a.nr_sequencia
from	agenda c,
	agenda_paciente_proc b,
	agenda_paciente a
where	a.cd_agenda		= c.cd_agenda
and	a.nr_sequencia		= b.nr_sequencia
and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
and	trunc(a.dt_agenda,'dd') >= trunc(clock_timestamp(),'dd') - 3
and	not exists (select	1
			from	procedimento_autorizado x
			where	x.nr_seq_agenda		= a.nr_sequencia
			and	x.cd_procedimento	= b.cd_procedimento
			and	x.ie_origem_proced	= b.ie_origem_proced);



BEGIN


ds_retorno_p	:= null;

if (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') then
	select	max(cd_pessoa_fisica),
		max(dt_agenda)
	into STRICT	cd_pessoa_fisica_w,
		dt_agenda_w
	from	agenda_paciente
	where	nr_sequencia	= nr_seq_agenda_p;
end if;

open c01;
loop
fetch c01 into
	ie_valor_w,
	qt_ponto_min_w,
	ie_forma_periodo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	RAISE NOTICE '1 CURSOR';

	open c02;
	loop
	fetch c02 into
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_convenio_w,
		cd_categoria_w,
		cd_tipo_acomodacao_w,
		ie_tipo_atendimento_w,
		cd_plano_w,
		cd_estabelecimento_w,
		nr_seq_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		RAISE NOTICE '2 CURSOR';

		if (ie_origem_proced_w = 1) then 	-- se eh amb
			if (ie_valor_w = 'PP') then

				vl_procedimento_w	:= obter_preco_procedimento(cd_estabelecimento_w,
									cd_convenio_w,
									cd_categoria_w,
									clock_timestamp(),
									cd_procedimento_w,
									ie_origem_proced_w,
									cd_tipo_acomodacao_w,
									ie_tipo_atendimento_w,
									null/*cd_setor_atendimento_p*/
,
									null,
									null,
									null,
									cd_plano_w,
									null,
									null,
									ie_valor_w);

				qt_acumulada_w	:= qt_acumulada_w + vl_procedimento_w;

			else
				

				vl_procedimento_w	:= obter_preco_amb(cd_procedimento_w,
									cd_convenio_w, 
									cd_categoria_w, 
									cd_estabelecimento_w, 
									ie_valor_w);

				qt_acumulada_w	:= qt_acumulada_w + vl_procedimento_w;
			end if;
		else
			if (ie_valor_w = 'CO') then
				ie_valor_w	:= 'C';
			end if;	

			vl_procedimento_w	:= obter_preco_procedimento(cd_estabelecimento_w,
									cd_convenio_w,
									cd_categoria_w,
									clock_timestamp(),
									cd_procedimento_w,
									ie_origem_proced_w,
									cd_tipo_acomodacao_w,
									ie_tipo_atendimento_w,
									null/*cd_setor_atendimento_p*/
,
									null,
									null,
									null,
									cd_plano_w,
									null,
									null,
									ie_valor_w);

			qt_acumulada_w	:= qt_acumulada_w + vl_procedimento_w;

		end if;

		RAISE NOTICE 'cd_procedimento= % vl_proc= %', cd_procedimento_w, vl_procedimento_w;
	end loop;
	close c02;

	/* Se passou do limite, deve retornar mensagem e gerar autorizacao */

	if (qt_acumulada_w >= qt_ponto_min_w) then
		
		ds_retorno_p	:= wheb_mensagem_pck.get_texto(313593);

		select	nextval('autorizacao_convenio_seq')
		into STRICT	nr_sequencia_autor_w
		;

		select	min(nr_sequencia)
		into STRICT	nr_seq_estagio_w
		from	estagio_autorizacao
		where	ie_situacao	= 'A'
		and	ie_interno	= '1'
		and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
		
		insert	into	autorizacao_convenio(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			dt_autorizacao,
			cd_convenio,
			ie_tipo_dia,
			dt_inicio_vigencia,
			nr_seq_agenda,
			nr_seq_estagio,
			ie_tipo_autorizacao,
      dt_atualizacao_nrec,
      nm_usuario_nrec)
		values (nr_sequencia_autor_w,
			nm_usuario_p,
			clock_timestamp(),
			clock_timestamp(),
			cd_convenio_w,
			'C',
			trunc(clock_timestamp(),'dd'),
			nr_seq_agenda_p,
			nr_seq_estagio_w,
			'3',
      clock_timestamp(),
      nm_usuario_p);

		/* Abrir cursor denovo para gerar procedimentos */

		open c02;
		loop
		fetch c02 into
			cd_procedimento_w,
			ie_origem_proced_w,
			cd_convenio_w,
			cd_categoria_w,
			cd_tipo_acomodacao_w,
			ie_tipo_atendimento_w,
			cd_plano_w,
			cd_estabelecimento_w,
			nr_seq_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */

			select	max(nr_sequencia)
			into STRICT	nr_seq_proc_autor_w
			from	procedimento_autorizado
			where	nr_sequencia_autor	= nr_sequencia_autor_w
			and	cd_procedimento		= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w;

			if (coalesce(nr_seq_proc_autor_w::text, '') = '') then
		
				insert	into	procedimento_autorizado(nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					cd_procedimento,
					ie_origem_proced,
					qt_solicitada,
					qt_autorizada,
					nr_sequencia_autor,
					nr_seq_agenda)
				values (nextval('procedimento_autorizado_seq'),
					nm_usuario_p,
					clock_timestamp(),
					cd_procedimento_w,
					ie_origem_proced_w,
					1,
					0,
					nr_sequencia_autor_w,
					nr_seq_agenda_w);
			else
				update	procedimento_autorizado
				set	qt_solicitada	= qt_solicitada + 1
				where	nr_sequencia	= nr_seq_proc_autor_w;
			end if;
		end loop;
		close c02;
	end if;
end loop;
close c01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_gerar_autor_agrup ( nr_seq_agenda_p bigint, ie_evento_p text, nm_usuario_p text, ds_retorno_p INOUT text) FROM PUBLIC;

