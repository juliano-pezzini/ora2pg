-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_imp_tabela_preco_mat ( dt_vigencia_p timestamp, ie_brasindece_simpro_p text, ie_tipo_valor_p text, nr_seq_material_preco_p pls_material_preco.nr_sequencia%type, nr_seq_regra_p pls_lote_regra_tab_propria.nr_sequencia%type, cd_moeda_p moeda.cd_moeda%type, nm_usuario_p usuario.nm_usuario%type, ie_atualiza_inativo_p text default 'N', tx_ajuste_p bigint default 1, ie_aplica_tx_p text default 'T') AS $body$
DECLARE


ie_brasindece_simpro_w		varchar(1);
vl_preco_medicamento_w		double precision;
vl_preco_fabrica_w		double precision;
vl_preco_venda_w		double precision;
dt_vigencia_w			timestamp;
tx_negativa_w			pls_regra_aliquota.tx_negativa%type;
tx_neutra_w			pls_regra_aliquota.tx_neutra%type;
tx_positiva_w			pls_regra_aliquota.tx_positiva%type;
tx_pis_cofins_w			double precision;
tx_pis_cofins_fab_w		double precision;
ie_tipo_preco_brasindice_w	pls_regra_tabela_propria.ie_tipo_preco_brasindice%type;
ie_tipo_preco_simpro_w		pls_regra_tabela_propria.ie_tipo_preco_simpro%type;
ie_tipo_valor_w			varchar(10);
ie_estrutura_mat_w		varchar(10);
qt_brasindice_valido_w		bigint;
qt_simpro_valido_w		bigint;
vl_mat_inserir_w		double precision;
ie_criado_atual_w		varchar(1);
ie_simpro_bras_regra_w		varchar(1);
ie_nao_regra_w			varchar(1);
nr_seq_valor_item_w		pls_material_valor_item.nr_sequencia%type;
ie_gera_w			varchar(1);
ie_atualiza_inativo_w		varchar(1);
dt_exclusao_mat_w		pls_material.dt_exclusao%type;
ie_situacao_mat_w		pls_material.ie_situacao%type;
tx_ajuste_w			double precision;
ie_aplica_tx_w			varchar(1);
ie_generico_w			brasindice_preco.ie_generico%type;

C02 CURSOR(	nr_seq_regra_p		pls_lote_regra_tab_propria.nr_sequencia%type,
		nr_seq_material_p	pls_regra_tabela_propria.nr_seq_material%type,
		ie_tipo_despesa_pc	pls_material.ie_tipo_despesa%type) FOR
	SELECT	b.ie_tipo_tabela ie_tipo_tabela,
		b.ie_tipo_preco_brasindice ie_tipo_preco_brasindice,
		b.ie_tipo_preco_simpro ie_tipo_preco_simpro,
		b.nr_seq_estrutura nr_seq_estrutura
	from	pls_lote_regra_tab_propria	a,
		pls_regra_tabela_propria	b
	where	a.nr_sequencia	= nr_seq_regra_p
	and	b.nr_seq_lote	= a.nr_sequencia
	and	((coalesce(b.nr_seq_material::text, '') = '') or (b.nr_seq_material = nr_seq_material_p))
	and	((coalesce(a.ie_tipo_despesa::text, '') = '') or (ie_tipo_despesa	= ie_tipo_despesa_pc))
	order by	nr_seq_material desc,
			nr_seq_estrutura desc;

C03 CURSOR FOR

	SELECT	nr_sequencia nr_seq_material,
		cd_tiss_brasindice cd_tiss_brasindice,
		cd_simpro cd_simpro,
		coalesce(qt_conversao,1) qt_conversao,
		coalesce(qt_conversao_simpro,1) qt_conversao_simpro,
		ie_pis_cofins ie_pis_cofins,
		coalesce(ie_nao_gera_brasindice,'N') ie_nao_gera_brasindice,
		coalesce(ie_nao_gera_simpro,'N') ie_nao_gera_simpro,
		ie_tipo_despesa,
		dt_exclusao,
		ie_situacao
	from	pls_material
	where	((cd_simpro IS NOT NULL AND cd_simpro::text <> '') or (cd_tiss_brasindice IS NOT NULL AND cd_tiss_brasindice::text <> ''));

C04 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_material
	from	pls_material_preco_item	a
	where	a.nr_seq_material_preco = nr_seq_material_preco_p
	and	exists (SELECT	1
			from	pls_material_valor_item b
			where	a.nr_sequencia = b.nr_seq_preco_item)
	and	not exists (select	1
			from	pls_material_valor_item b
			where	a.nr_sequencia = b.nr_seq_preco_item
			and	trunc(b.dt_inicio_vigencia) = trunc(dt_vigencia_p));
BEGIN
-- Tratar os valores passados pela função OPS - Tabelas de Preços.
ie_atualiza_inativo_w		:= coalesce(ie_atualiza_inativo_p,'N');
ie_brasindece_simpro_w		:= substr(ie_brasindece_simpro_p,1,1);
dt_vigencia_w			:= trunc(dt_vigencia_p);
ie_tipo_valor_w			:= substr(ie_tipo_valor_p,1,1);
tx_ajuste_w			:= coalesce(tx_ajuste_p,1);
ie_aplica_tx_w			:= coalesce(ie_aplica_tx_p,'T');

if (dt_vigencia_w IS NOT NULL AND dt_vigencia_w::text <> '') and (cd_moeda_p IS NOT NULL AND cd_moeda_p::text <> '') then

	for	r_C03_w in C03 loop
		ie_tipo_preco_simpro_w	:= null;
		ie_tipo_preco_brasindice_w	:= null;
		ie_nao_regra_w := 'N';
		tx_pis_cofins_w	:= 0; --tratamento para zerar a taxa e recalcular a mesma para cada material
		ie_gera_w := 'S';

		if (ie_atualiza_inativo_w = 'N') and
			((trunc(r_C03_w.dt_exclusao) < dt_vigencia_w) or (r_C03_w.ie_situacao = 'I')) then
			ie_gera_w := 'N';
		end if;

		if (ie_gera_w = 'S') then
			-- se for para buscar da regra
			if (ie_tipo_valor_w = 'R') then

				if (r_C03_w.cd_simpro IS NOT NULL AND r_C03_w.cd_simpro::text <> '') or (r_C03_w.cd_tiss_brasindice IS NOT NULL AND r_C03_w.cd_tiss_brasindice::text <> '') then

					for	r_C02_w in C02(nr_seq_regra_p,r_C03_w.nr_seq_material, r_c03_w.ie_tipo_despesa) loop

						ie_estrutura_mat_w	:= 'S';
						if (r_C02_w.nr_seq_estrutura IS NOT NULL AND r_C02_w.nr_seq_estrutura::text <> '') then

							ie_estrutura_mat_w := pls_obter_se_estruturas_mat(r_C02_w.nr_seq_estrutura, r_C03_w.nr_seq_material);
						end if;

						if (ie_estrutura_mat_w	= 'S') then
							ie_nao_regra_w	:= 'S';
							ie_simpro_bras_regra_w := r_c02_w.ie_tipo_tabela;
							if (coalesce(ie_brasindece_simpro_w, ie_simpro_bras_regra_w) = 'S') then

								ie_tipo_valor_w	:= r_C02_w.ie_tipo_preco_simpro;
								ie_tipo_preco_simpro_w := r_C02_w.ie_tipo_preco_simpro;
							elsif (coalesce(ie_brasindece_simpro_w,ie_simpro_bras_regra_w)	= 'B') then

								ie_tipo_valor_w	:= r_C02_w.ie_tipo_preco_brasindice;
								ie_tipo_preco_brasindice_w := r_C02_w.ie_tipo_preco_brasindice;
							end if;
						end if;
					end loop;
				end if;

			end if;

			if (ie_nao_regra_w = 'S') then
				SELECT * FROM pls_obter_tx_aliquota_mat(r_C03_w.nr_seq_material, dt_vigencia_w, tx_positiva_w, tx_negativa_w, tx_neutra_w) INTO STRICT tx_positiva_w, tx_negativa_w, tx_neutra_w;

				/*Negativa (não beneficiado)*/

				if (r_C03_w.ie_pis_cofins	= 'N') then

					tx_pis_cofins_w		:= coalesce(tx_negativa_w,1);
				/*Positiva (com redução)*/

				elsif (r_C03_w.ie_pis_cofins	= 'S') then

					tx_pis_cofins_w		:= coalesce(tx_positiva_w,1);
				/*Neutro (Preço nacional)*/

				elsif (r_C03_w.ie_pis_cofins	= 'T') then

					tx_pis_cofins_w		:= coalesce(tx_neutra_w,1);
				end if;

				tx_pis_cofins_fab_w	:= tx_pis_cofins_w;
				/*OS - 359220 Demitrius - se selecionadas essas opções o sistema não aplciará regra de alíquota*/

				if (ie_tipo_preco_brasindice_w	= 'PFB') or (ie_tipo_preco_simpro_w 	= 'F')	then
					tx_pis_cofins_w	:= 1;
				end if;

				/*Tratamento realizado para sempre gerar o material, se o mesmo não tiver alíquota também deve ser gerado.*/

				if (tx_pis_cofins_w = 0)	then
					tx_pis_cofins_w	:= 1;
				end if;

				if (coalesce(ie_brasindece_simpro_w, ie_simpro_bras_regra_w) = 'B') and (r_C03_w.ie_nao_gera_brasindice = 'N')	then

					if (r_C03_w.cd_tiss_brasindice IS NOT NULL AND r_C03_w.cd_tiss_brasindice::text <> '') then

						select	max(a.vl_preco_medicamento)
						into STRICT	vl_preco_medicamento_w
						from	brasindice_preco	a
						where	a.cd_tiss		= r_C03_w.cd_tiss_brasindice
						and	a.ie_tipo_preco		= ie_tipo_valor_w
						and	a.dt_inicio_vigencia	= (	SELECT	max(b.dt_inicio_vigencia)
											from	brasindice_preco	b
											where	b.cd_tiss		= r_C03_w.cd_tiss_brasindice
											and	b.ie_tipo_preco		= ie_tipo_valor_w
											and	b.dt_inicio_vigencia	< dt_vigencia_w);

						if (vl_preco_medicamento_w IS NOT NULL AND vl_preco_medicamento_w::text <> '') then

							vl_preco_medicamento_w	:= dividir(vl_preco_medicamento_w,r_C03_w.qt_conversao);
							vl_preco_medicamento_w	:= (vl_preco_medicamento_w * tx_pis_cofins_w);

							select	coalesce(max(a.ie_generico),'N')
							into STRICT	ie_generico_w
							from	brasindice_preco	a
							where	a.cd_tiss		= r_C03_w.cd_tiss_brasindice
							and	a.ie_tipo_preco		= ie_tipo_valor_w
							and	a.dt_inicio_vigencia	= (	SELECT	max(b.dt_inicio_vigencia)
												from	brasindice_preco	b
												where	b.cd_tiss		= r_C03_w.cd_tiss_brasindice
												and	b.ie_tipo_preco		= ie_tipo_valor_w
												and	b.dt_inicio_vigencia	< dt_vigencia_w);

							/*	ie_aplica_tx_w
								- T = Aplica a todos
								- G = Aplica somente a itens genéricos
								- N = Aplica a todos exceto itens genéricos	*/
							if (ie_aplica_tx_w = 'T') or
								(ie_aplica_tx_w = 'G' AND ie_generico_w = 'S') or
								(ie_aplica_tx_w = 'N' AND ie_generico_w = 'N') then
								vl_preco_medicamento_w := vl_preco_medicamento_w * tx_ajuste_w;
							end if;

							ie_criado_atual_w := pls_inserir_valor_tab_mat(
									nr_seq_material_preco_p, r_C03_w.nr_seq_material, vl_preco_medicamento_w, dt_vigencia_w, 'S', cd_moeda_p, ie_criado_atual_w, nm_usuario_p, ie_tipo_valor_w, null);
						end if;
					end if;

				end if;

				if (coalesce(ie_brasindece_simpro_w, ie_simpro_bras_regra_w) = 'S') and (r_C03_w.ie_nao_gera_simpro = 'N') then

					if (r_C03_w.cd_simpro IS NOT NULL AND r_C03_w.cd_simpro::text <> '') then

						select	max(vl_preco_fabrica),
							max(vl_preco_venda)
						into STRICT	vl_preco_fabrica_w,
							vl_preco_venda_w
						from	simpro_preco
						where	cd_simpro	= r_C03_w.cd_simpro
						and	dt_vigencia = (	SELECT	max(dt_vigencia)
									from	simpro_preco
									where	cd_simpro	= r_C03_w.cd_simpro
									and	trunc(dt_vigencia,'month')<= trunc(dt_vigencia_w,'month'));


						-- Se o valor for nulo, ao executar os cálculos pemanecerá nulo, então não é necessário calcular.
						if (vl_preco_fabrica_w IS NOT NULL AND vl_preco_fabrica_w::text <> '') then

							vl_preco_fabrica_w	:= dividir(vl_preco_fabrica_w,r_C03_w.qt_conversao_simpro);

							if (ie_tipo_valor_w = 'V') and (r_c03_w.ie_tipo_despesa = '2') then
								vl_preco_fabrica_w	:= (vl_preco_fabrica_w * tx_pis_cofins_fab_w);
							end if;
						end if;


						-- Se o valor for nulo, ao executar os cálculos pemanecerá nulo, então não é necessário calcular.
						if (vl_preco_venda_w IS NOT NULL AND vl_preco_venda_w::text <> '') then

							vl_preco_venda_w	:= dividir(vl_preco_venda_w,r_C03_w.qt_conversao_simpro);
							vl_preco_venda_w	:= vl_preco_venda_w;
						end if;

						/*Se um dos valores estiver nulo o mesmo recebe o outro valor*/

						if (coalesce(vl_preco_fabrica_w::text, '') = '') and (vl_preco_venda_w > 0) then

							vl_preco_fabrica_w	:= vl_preco_venda_w;
						elsif (coalesce(vl_preco_venda_w::text, '') = '') and (vl_preco_fabrica_w > 0) then

							vl_preco_venda_w	:= vl_preco_fabrica_w;
						end if;

						-- Se for preco de Fábrica, então o mesmo não deve estar nulo para ser inserido na tabela.
						if (ie_tipo_valor_w = 'F') and (vl_preco_fabrica_w IS NOT NULL AND vl_preco_fabrica_w::text <> '') then

							vl_mat_inserir_w := vl_preco_fabrica_w;

						-- Se for preco de venda, o mesmo não deve estar nulo para ser inserido na tabela
						elsif (ie_tipo_valor_w = 'V')  then

							vl_mat_inserir_w := vl_preco_venda_w;

							if (coalesce(vl_mat_inserir_w,0) = 0) then
								begin
								vl_mat_inserir_w	:= vl_preco_fabrica_w;
								end;
							end if;

						end if;

						if (vl_mat_inserir_w > 0) then

							select	coalesce(max(ie_generico),'N')
							into STRICT	ie_generico_w
							from	simpro_preco
							where	cd_simpro	= r_C03_w.cd_simpro
							and	dt_vigencia = (	SELECT	max(dt_vigencia)
										from	simpro_preco
										where	cd_simpro	= r_C03_w.cd_simpro
										and	trunc(dt_vigencia,'month')<= trunc(dt_vigencia_w,'month'));

							/*	ie_aplica_tx_w
								- T = Aplica a todos
								- G = Aplica somente a itens genéricos
								- N = Aplica a todos exceto itens genéricos	*/
							if (ie_aplica_tx_w = 'T') or
								(ie_aplica_tx_w = 'G' AND ie_generico_w = 'S') or
								(ie_aplica_tx_w = 'N' AND ie_generico_w = 'N') then
								vl_mat_inserir_w := vl_mat_inserir_w * tx_ajuste_w;
							end if;


							ie_criado_atual_w := pls_inserir_valor_tab_mat(
									nr_seq_material_preco_p, r_C03_w.nr_seq_material, vl_mat_inserir_w, dt_vigencia_w, 'S', cd_moeda_p, ie_criado_atual_w, nm_usuario_p, null, null);
						end if;
					end if;
				end if;
			end if;
			ie_tipo_valor_w	:= 'R';
		end if;
	end loop;

	for r_c04_w in C04() loop
		begin
		ie_gera_w := 'S';
		select	trunc(dt_exclusao),
			ie_situacao
		into STRICT	dt_exclusao_mat_w,
			ie_situacao_mat_w
		from	pls_material
		where	nr_sequencia = r_c04_w.nr_seq_material;

		if (ie_atualiza_inativo_w = 'N') and
			((dt_exclusao_mat_w < dt_vigencia_w) or (ie_situacao_mat_w = 'I')) then
			ie_gera_w := 'N';
		end if;

		if (ie_gera_w = 'S') then
			select  max(nr_sequencia)
			into STRICT	nr_seq_valor_item_w
			from	pls_material_valor_item
			where	nr_seq_preco_item = r_c04_w.nr_sequencia
			and	trunc(dt_inicio_vigencia) = (SELECT	max(trunc(dt_inicio_vigencia))
							     from	pls_material_valor_item
							     where	nr_seq_preco_item = r_c04_w.nr_sequencia);

			insert into pls_material_valor_item(	nr_sequencia, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, cd_moeda,
						vl_material, nr_seq_preco_item, dt_inicio_vigencia,
						ie_tipo_preco, qt_convercao )
				SELECT		nextval('pls_material_valor_item_seq'), clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, cd_moeda,
						vl_material, nr_seq_preco_item, trunc(dt_vigencia_p),
						ie_tipo_preco, qt_convercao
				from	pls_material_valor_item
				where	nr_sequencia = nr_seq_valor_item_w;
		end if;
		end;
	end loop;
end if;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_imp_tabela_preco_mat ( dt_vigencia_p timestamp, ie_brasindece_simpro_p text, ie_tipo_valor_p text, nr_seq_material_preco_p pls_material_preco.nr_sequencia%type, nr_seq_regra_p pls_lote_regra_tab_propria.nr_sequencia%type, cd_moeda_p moeda.cd_moeda%type, nm_usuario_p usuario.nm_usuario%type, ie_atualiza_inativo_p text default 'N', tx_ajuste_p bigint default 1, ie_aplica_tx_p text default 'T') FROM PUBLIC;

