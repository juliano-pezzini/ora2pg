-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_notas_lote_mens ( nr_seq_lote_p bigint, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, nr_seq_classif_fiscal_p bigint, nr_seq_sit_trib_p bigint, cd_serie_nf_p text, dt_emissao_p timestamp, ds_complemento_p text, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_sequencia_w			bigint;
nr_nota_fiscal_w		varchar(255);
dt_emissao_w			timestamp;
nr_sequencia_nf_w		bigint;
vl_mercadoria_w			double precision;
vl_total_nota_w			double precision;
vl_ipi_w			double precision;
vl_descontos_w			double precision;
vl_frete_w			double precision;
vl_seguro_w			double precision;
vl_despesa_acessoria_w		double precision;
ie_tipo_nota_w			varchar(3);
nr_seq_mensalidade_w		bigint;
nr_seq_pagador_w		bigint;
nr_seq_contrato_w		bigint;
vl_mensalidade_w		double precision;
dt_vencimento_w			timestamp;
cd_pessoa_fisica_w		varchar(10);
cd_cgc_w			varchar(14);
ie_tipo_item_w			varchar(3);
vl_item_mens_w			double precision;
cd_procedimento_w		bigint	:= null;
ie_origem_proced_w		bigint	:= null;
cd_condicao_pagamento_w		bigint;
nr_item_nf_w			integer;
nr_titulo_w			bigint;
nr_seq_tipo_lanc_w		bigint;
ie_forma_pagamento_w		smallint;
cd_conta_financ_w		bigint;
nr_seq_lote_w			bigint;
nr_seq_reajuste_w		bigint;
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
tx_reajuste_w			double precision;
ie_indice_reajuste_w		varchar(1);
ds_oficio_ans_w			varchar(255);
nr_protocolo_ans_w		varchar(60);
ds_observacao_w			varchar(255);
dt_inicial_w			timestamp;
nr_seq_segurado_w		bigint;
dt_final_w			timestamp;
vl_liquido_nota_w		double precision;
cd_conta_debito_w		varchar(20);
qt_nota_gerada_w		bigint;
ie_mes_fechado_w		varchar(1);
nm_pagador_w			varchar(255);
dt_referencia_w			timestamp;
nr_seq_forma_cobranca_w		varchar(2);
ie_tipo_titulo_w		varchar(2);
ie_baixar_mens_adiant_w		varchar(1)	:= 'N';
ie_geracao_nota_titulo_w	varchar(2);
ie_geracao_nota_param_w		varchar(2);
ie_nota_titulo_w		varchar(2);
cd_conta_financ_item_w		bigint;
ie_tipo_contrato_w		varchar(5);
nr_seq_plano_w			bigint;
ie_tipo_contratacao_w		varchar(2);
ie_preco_w			varchar(2);
nr_seq_intercambio_w		bigint;
cd_serie_nf_w			nota_fiscal.cd_serie_nf%type;
nr_sequencia_nf_ww		smallint;
qt_nota_fiscal_w		bigint;
cd_material_w			varchar(6)	:= null;
nr_seq_regra_serie_nf_w		bigint;
nr_ultima_nf_regra_w		varchar(20);
qt_regra_serie_nf_w		bigint;
nr_serie_nf_w			varchar(30);
ds_observacao_nota_w		varchar(4000)	:= null;
ie_tipo_estipulante_w		varchar(10);
nr_seq_pagador_fin_w		bigint;
ie_regra_serie_nf_w		varchar(1);
cd_condicao_pagamento_param_w	bigint;
qt_titulos_gerados_w		bigint;
nr_rps_w			bigint;
ie_tipo_repasse_w		varchar(10);
vl_titulo_w			double precision;
ie_geracao_nota_pf_w		varchar(2);
ie_geracao_nota_pj_w		varchar(2);
ie_primeira_mensalidade_w	varchar(10);
nr_seq_classif_itens_w		bigint;
nr_seq_nat_juridica_w		bigint;
ie_situacao_trabalhista_w	varchar(10);
cd_natureza_operacao_w		pls_regra_serie_nf.cd_natureza_operacao%type;
cd_municipio_ibge_w		pls_regra_serie_nf_compl.cd_municipio_ibge%type;
ie_lancar_desconto_nota_mens_w	pls_parametros.ie_lancar_desconto_nota_mens%type;
ie_gerou_parcelas_nota_fisc_w	bigint;
ds_condicao_pagamento_w		condicao_pagamento.ds_condicao_pagamento%type;
ie_estab_serie_nf_w		parametro_compras.ie_estab_serie_nf%type;
cd_cgc_emitente_w		estabelecimento.cd_cgc%type;
ie_bloqueto_deb_auto_w		pls_parametros.ie_bloqueto_deb_auto%type;
qt_nota_w			bigint;
dt_geracao_titulos_w		pls_lote_mensalidade.dt_geracao_titulos%type;
nr_seq_grupo_item_w		pls_grupo_item_mens.nr_sequencia%type;
nr_item_nf_ww			integer;
ie_gerar_tributo_nf_mens_w	pls_parametros.ie_gerar_tributo_nf_mens%type;
ie_data_referencia_nf_w		pls_contrato_pagador_fin.ie_data_referencia_nf%type;
ie_linha_digitavel_w		varchar(10);
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;
qt_dias_venc_mens_w		pls_parametros.qt_dias_venc_mens%type;
nr_seq_log_nf_w			bigint;
ds_erro_w			varchar(5000);


/* Cursor C04 */

pr_tributo_w			double precision;
vl_tributo_w			double precision;
vl_base_calculo_w		double precision;
cd_tributo_w			bigint;
vl_reducao_w			pls_mensalidade_trib.vl_reducao_base%type;
ie_retencao_w			pls_mensalidade_trib.ie_retencao%type;
vl_base_adic_w			pls_mensalidade_trib.vl_base_adic%type;
vl_trib_adic_w			pls_mensalidade_trib.vl_trib_adic%type;
ie_origem_tributo_w		pls_mensalidade_trib.ie_origem_tributo%type;
ds_complemento_w		pls_mensalidade.ds_complemento%type;
nr_seq_log_w			pls_mens_log_geracao.nr_sequencia%type;


erro_abortar exception;


c01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_pagador,
		b.nr_seq_contrato,
		a.vl_mensalidade,
		trunc(a.dt_vencimento,'dd'),
		b.cd_pessoa_fisica,
		b.cd_cgc,
		substr(obter_nome_pf_pj(b.cd_pessoa_fisica,b.cd_cgc),1,255) nm_pagador,
		a.dt_referencia,
		a.ie_nota_titulo,
		b.nr_seq_pagador_intercambio,
		a.nr_seq_pagador_fin,
		a.nr_rps,
		b.nr_seq_classif_itens,
		b.ie_situacao_trabalhista,
		obter_dados_pf_pj(b.cd_pessoa_fisica,b.cd_cgc,'CDM') cd_municipio_ibge,
		a.ds_complemento,
		coalesce(c.ie_linha_digitavel, 'S')
	from	pls_mensalidade			a,
		pls_contrato_pagador		b,
		pls_contrato_pagador_fin	c
	where	a.nr_seq_pagador	= b.nr_sequencia
	and	b.nr_sequencia		= c.nr_seq_pagador
	and	c.nr_sequencia		= a.nr_seq_pagador_fin
	and	a.nr_seq_lote		= nr_seq_lote_p
	and	coalesce(a.ie_cancelamento::text, '') = ''
	and	not exists (	SELECT	1
				from	nota_fiscal	x
				where	x.nr_seq_mensalidade = a.nr_sequencia)
	order by
		nm_pagador;

c02 CURSOR FOR
	SELECT	a.ie_tipo_item,
		(null)::numeric  nr_seq_tipo_lanc,
		sum(vl_item),
		a.cd_conta_deb,
		a.cd_conta_financ
	from	pls_mensalidade_seg_item	a,
		pls_mensalidade_segurado	b
	where	a.nr_seq_mensalidade_seg	= b.nr_sequencia
	and	b.nr_seq_mensalidade		= nr_seq_mensalidade_w
	and	a.ie_tipo_item <> '20'
	group by
		a.ie_tipo_item,
		a.cd_conta_deb,
		a.cd_conta_financ
	
union all

	SELECT	to_char(null) ie_tipo_item,
		a.nr_seq_tipo_lanc,
		sum(vl_adicional),
		null cd_conta_debito,
		null cd_conta_financ
	from	pls_mensalidade_seg_adic	a,
		pls_mensalidade_segurado	b
	where	a.nr_seq_mensalidade_seg	= b.nr_sequencia
	and	b.nr_seq_mensalidade		= nr_seq_mensalidade_w
	group by
		a.nr_seq_tipo_lanc
	
union all

	select	a.ie_tipo_item,
		a.nr_seq_tipo_lanc nr_seq_tipo_lanc,
		sum(vl_item) vl_item,
		a.cd_conta_deb,
		a.cd_conta_financ
	from	pls_mensalidade_seg_item	a,
		pls_mensalidade_segurado	b
	where	a.nr_seq_mensalidade_seg	= b.nr_sequencia
	and	b.nr_seq_mensalidade		= nr_seq_mensalidade_w
	and	a.ie_tipo_item = '20'
	group by a.ie_tipo_item,
		a.nr_seq_tipo_lanc,
		a.cd_conta_deb,
		a.cd_conta_financ;

c03 CURSOR FOR
	SELECT	nr_seq_segurado
	from	pls_mensalidade_segurado
	where	nr_seq_mensalidade	= nr_seq_mensalidade_w;

C04 CURSOR FOR
	SELECT	coalesce(sum(a.vl_tributo),0),
		coalesce(sum(a.vl_base_calculo),0),
		max(a.tx_tributo),
		a.cd_tributo,
		coalesce(sum(a.vl_reducao_base),0), --este valor deve ser gravado no campo nota_fiscal_trib.vl_reducao,
		max(a.ie_retencao),
		coalesce(sum(a.vl_trib_adic),0),
		coalesce(sum(a.vl_base_adic),0),
		a.ie_origem_tributo
	from	pls_mensalidade_trib		a,
		pls_mensalidade_seg_item	b,
		pls_mensalidade_segurado	c,
		tributo				d
	where	a.nr_seq_item_mens	= b.nr_sequencia
	and	b.nr_seq_mensalidade_seg = c.nr_sequencia
	and	a.cd_tributo		= d.cd_tributo
	and	d.ie_corpo_item		= 'C'
	and	c.nr_seq_mensalidade	= nr_seq_mensalidade_w
	group by a.cd_tributo, a.ie_origem_tributo;

C05 CURSOR FOR
	SELECT	b.nr_sequencia
	from	pls_regra_serie_nf		b,
		pls_regra_serie_nf_compl	a
	where	a.nr_seq_regra		= b.nr_sequencia
	and	b.ie_situacao		= 'A'
	and	((a.ie_tipo_contrato	= ie_tipo_contrato_w) or (coalesce(a.ie_tipo_contrato::text, '') = ''))
	and	((a.ie_tipo_contratacao	= ie_tipo_contratacao_w) or (coalesce(a.ie_tipo_contratacao::text, '') = ''))
	and	((a.ie_preco		= ie_preco_w) or (coalesce(a.ie_preco::text, '') = ''))
	and	((a.ie_situacao_trabalhista = ie_situacao_trabalhista_w) or (coalesce(a.ie_situacao_trabalhista::text, '') = ''))
	and	((a.ie_primeira_mensalidade = 'S' AND ie_primeira_mensalidade_w = 'S') or (coalesce(a.ie_primeira_mensalidade,'N') = 'N'))
	and	((a.nr_seq_classif_itens = nr_seq_classif_itens_w) or (coalesce(a.nr_seq_classif_itens::text, '') = ''))
	and	((a.cd_municipio_ibge = cd_municipio_ibge_w) or (coalesce(a.cd_municipio_ibge::text, '') = ''))
	order by coalesce(a.ie_primeira_mensalidade,'N'),
		coalesce(a.ie_tipo_contratacao,'A'),
		coalesce(a.nr_seq_classif_itens,-1),
		coalesce(a.ie_preco,'-1'),
		coalesce(a.ie_situacao_trabalhista,'A'),
		coalesce(a.cd_municipio_ibge,'0');

C06 CURSOR FOR
	SELECT	nr_titulo,
		ie_tipo_titulo,
		vl_titulo
	from	titulo_receber
	where	nr_seq_mensalidade = nr_seq_mensalidade_w
	order by 1;

C07 CURSOR FOR
	SELECT	count(1) qt_item,
		sum(vl_item) vl_item,
		cd_procedimento,
		cd_material,
		ie_origem_proced,
		nr_seq_grupo_item
	from (SELECT d.vl_item vl_item,
			a.cd_procedimento,
			a.cd_material,
			a.ie_origem_proced,
			b.nr_sequencia nr_seq_grupo_item
		from	pls_tipo_item_mens a,
			pls_grupo_item_mens b,
			pls_item_grupo_tipo_mens c,
			pls_mensalidade_seg_item d,
			pls_mensalidade_segurado e,
			pls_mensalidade f
		where	b.nr_sequencia = a.nr_seq_grupo_item
		and	b.nr_sequencia = c.nr_seq_grupo_item
		and	c.ie_tipo_item = d.ie_tipo_item
		and	e.nr_sequencia = d.nr_seq_mensalidade_seg
		and	f.nr_sequencia = e.nr_seq_mensalidade
		and	d.ie_tipo_item <> 20
		and	f.nr_sequencia = nr_seq_mensalidade_w
		and	(a.nr_seq_grupo_item IS NOT NULL AND a.nr_seq_grupo_item::text <> '')
		
union all

		select	d.vl_item vl_item,
			a.cd_procedimento,
			a.cd_material,
			a.ie_origem_proced,
			b.nr_sequencia nr_seq_grupo_item
		from	pls_tipo_item_mens a,
			pls_grupo_item_mens b,
			pls_item_grupo_tipo_mens c,
			pls_mensalidade_seg_item d,
			pls_mensalidade_segurado e,
			pls_mensalidade f
		where	b.nr_sequencia = a.nr_seq_grupo_item
		and	b.nr_sequencia = c.nr_seq_grupo_item
		and	c.ie_tipo_item = d.ie_tipo_item
		and	e.nr_sequencia = d.nr_seq_mensalidade_seg
		and	f.nr_sequencia = e.nr_seq_mensalidade
		and	d.ie_tipo_item = 20
		and	d.nr_seq_tipo_lanc = c.nr_seq_tipo_lanc
		and	f.nr_sequencia = nr_seq_mensalidade_w
		and	(a.nr_seq_grupo_item IS NOT NULL AND a.nr_seq_grupo_item::text <> '')
		
union all

		select	d.vl_item vl_item,
			a.cd_procedimento,
			a.cd_material,
			a.ie_origem_proced,
			b.nr_sequencia nr_seq_grupo_item
		from	pls_tipo_item_mens a,
			pls_grupo_item_mens b,
			pls_item_grupo_tipo_mens c,
			pls_mensalidade_seg_item d,
			pls_mensalidade_segurado e,
			pls_mensalidade f
		where	b.nr_sequencia = a.nr_seq_grupo_item
		and	b.nr_sequencia = c.nr_seq_grupo_item
		and	c.ie_tipo_item = d.ie_tipo_item
		and	e.nr_sequencia = d.nr_seq_mensalidade_seg
		and	f.nr_sequencia = e.nr_seq_mensalidade
		and	d.ie_tipo_item = 20
		and	coalesce(c.nr_seq_tipo_lanc::text, '') = ''
		and	not exists (	select 1
					from	pls_mensalidade_seg_item x,
						pls_item_grupo_tipo_mens y
					where	x.ie_tipo_item = y.ie_tipo_item
					and	x.nr_sequencia = d.nr_sequencia
					and	x.nr_seq_tipo_lanc = y.nr_seq_tipo_lanc)
		and	f.nr_sequencia = nr_seq_mensalidade_w
		and	(a.nr_seq_grupo_item IS NOT NULL AND a.nr_seq_grupo_item::text <> '')) alias7
	group by
		cd_procedimento,
		cd_material,
		ie_origem_proced,
		nr_seq_grupo_item;

BEGIN

select	max(a.nr_sequencia)
into STRICT	nr_seq_log_nf_w
from	pls_mens_log_geracao	a
where	a.ie_etapa	= '510'
and	(a.dt_inicio_geracao IS NOT NULL AND a.dt_inicio_geracao::text <> '')
and	a.nr_seq_lote	= nr_seq_lote_p;

if (nr_seq_log_nf_w IS NOT NULL AND nr_seq_log_nf_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1197671);
end if;

begin
	CALL pls_verificar_lib_lote_mens(nr_seq_lote_p);

	nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '510', 'I', nm_usuario_p, nr_seq_log_w);

	cd_serie_nf_w	:= null;
	cd_natureza_operacao_w	:= null;

	if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
		select	trunc(dt_mesano_referencia,'month'),
			last_day(dt_mesano_referencia),
			pls_obter_se_mes_fechado(coalesce(dt_contabilizacao,dt_mesano_referencia),'T', cd_estabelecimento_p),
			coalesce(ie_primeira_mensalidade,'N'),
			dt_geracao_titulos
		into STRICT	dt_inicial_w,
			dt_final_w,
			ie_mes_fechado_w,
			ie_primeira_mensalidade_w,
			dt_geracao_titulos_w
		from	pls_lote_mensalidade
		where	nr_sequencia	= nr_seq_lote_p;
		
		if (coalesce(dt_geracao_titulos_w::text, '') = '') then
			CALL pls_gravar_historico_lote_mens(nr_seq_lote_p, 5, null, nm_usuario_p, 'N');
		else
			CALL pls_gravar_historico_lote_mens(nr_seq_lote_p, 7, null, nm_usuario_p, 'N');
		end if;
		
		/* obter se sera considerado estabelecimento no parametro de compras */

		select	coalesce(max(ie_estab_serie_nf),'N')
		into STRICT	ie_estab_serie_nf_w
		from	parametro_compras
		where	cd_estabelecimento = cd_estabelecimento_p;

		select	max(cd_cgc)
		into STRICT	cd_cgc_emitente_w
		from	estabelecimento
		where	cd_estabelecimento = cd_estabelecimento_p;

		if (ie_mes_fechado_w	= 'S') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(191588);
		end if;

		select	coalesce(max(ie_baixar_mens_adiant),'N')
		into STRICT	ie_baixar_mens_adiant_w
		from	pls_parametros_cr a
		where	a.cd_estabelecimento	= cd_estabelecimento_p;

		/* Verificar se existe regra para geracao da serie da nota fiscal, caso existir alguma regra, todas mensalidades devem ser geradas por regra */

		select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_regra_serie_nf_w
		from	pls_regra_serie_nf
		where	cd_estabelecimento	= cd_estabelecimento_p
		and	ie_situacao		= 'A';

		select	max(ie_geracao_nota_titulo),
			max(ie_geracao_nota_titulo_pf),
			max(cd_condicao_pagamento),
			max(ie_bloqueto_deb_auto),
			max(ie_lancar_desconto_nota_mens),
			max(ie_gerar_tributo_nf_mens),
			max(coalesce(qt_dias_venc_mens, 0))
		into STRICT	ie_geracao_nota_pj_w,
			ie_geracao_nota_pf_w,
			cd_condicao_pagamento_param_w,
			ie_bloqueto_deb_auto_w,
			ie_lancar_desconto_nota_mens_w,
			ie_gerar_tributo_nf_mens_w,
			qt_dias_venc_mens_w
		from	pls_parametros
		where	cd_estabelecimento = cd_estabelecimento_p;

		open c01;
		loop
		fetch c01 into
			nr_seq_mensalidade_w,
			nr_seq_pagador_w,
			nr_seq_contrato_w,
			vl_mensalidade_w,
			dt_vencimento_w,
			cd_pessoa_fisica_w,
			cd_cgc_w,
			nm_pagador_w,
			dt_referencia_w,
			ie_nota_titulo_w,
			nr_seq_intercambio_w,
			nr_seq_pagador_fin_w,
			nr_rps_w,
			nr_seq_classif_itens_w,
			ie_situacao_trabalhista_w,
			cd_municipio_ibge_w,
			ds_complemento_w,
			ie_linha_digitavel_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			ds_observacao_w := '';
			nr_seq_nat_juridica_w	:= null;

			if (ie_nota_titulo_w IS NOT NULL AND ie_nota_titulo_w::text <> '') then
				ie_geracao_nota_titulo_w	:= ie_nota_titulo_w;
			else
				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					ie_geracao_nota_param_w	:= ie_geracao_nota_pf_w;
				else
					ie_geracao_nota_param_w	:= ie_geracao_nota_pj_w;
				end if;		
			
				begin
				select	coalesce(coalesce(ie_geracao_nota_titulo,ie_geracao_nota_param_w),'NT')
				into STRICT	ie_geracao_nota_titulo_w
				from	pls_contrato_pagador_fin
				where	nr_seq_pagador	= nr_seq_pagador_w
				and	dt_referencia_w between trunc(dt_inicio_vigencia,'dd') and fim_dia(coalesce(dt_fim_vigencia,dt_referencia_w));
				exception
				when others then
					ie_geracao_nota_titulo_w	:= 'N';
				end;
			end if;		

			if (coalesce(dt_geracao_titulos_w::text, '') = '') and
				((coalesce(ie_geracao_nota_titulo_w,'NT') = 'T') or (coalesce(nr_rps_w,0) <> 0) or (vl_mensalidade_w = 0)) then
				CALL pls_gerar_titulo_receber_mens(nr_seq_mensalidade_w,dt_emissao_p, cd_estabelecimento_p, nm_usuario_p);			
			elsif	((coalesce(ie_geracao_nota_titulo_w,'NT') = 'NT') and (vl_mensalidade_w <> 0)) then
				select	max(cd_condicao_pagamento),
					max(nr_seq_forma_cobranca),
					coalesce(max(ie_data_referencia_nf), 'P')
				into STRICT	cd_condicao_pagamento_w,
					nr_seq_forma_cobranca_w,
					ie_data_referencia_nf_w
				from	pls_contrato_pagador_fin
				where	nr_seq_pagador	= nr_seq_pagador_w
				and	dt_referencia_w	between trunc(coalesce(dt_inicio_vigencia,dt_referencia_w),'month')
				and	fim_dia(coalesce(dt_fim_vigencia,dt_referencia_w));			

				if (coalesce(nr_seq_forma_cobranca_w,'0') = '0') then
					select	max(nr_seq_forma_cobranca)
					into STRICT	nr_seq_forma_cobranca_w
					from	pls_contrato_pagador_fin
					where	nr_sequencia	= nr_seq_pagador_fin_w;
				end if;

				if (coalesce(cd_condicao_pagamento_w,0) = 0) then
					cd_condicao_pagamento_w	:= cd_condicao_pagamento_param_w;
				end if;

				select	count(1)
				into STRICT	qt_nota_gerada_w
				from	pls_mensalidade	a,
					nota_fiscal	b
				where	a.nr_sequencia	= b.nr_seq_mensalidade
				and	a.nr_sequencia	= nr_seq_mensalidade_w  LIMIT 1;

				/* Buscar serie da nota fiscal pela regra */

				ie_tipo_contratacao_w	:= null;
				ie_preco_w		:= null;
				ie_tipo_contrato_w	:= null;

				if (coalesce(nr_seq_contrato_w,0) <> 0) then
					ie_tipo_contrato_w	:= 'O';

					select	max(b.nr_seq_plano),
						CASE WHEN coalesce(max(a.cd_cgc_estipulante)::text, '') = '' THEN 'PF'  ELSE 'PJ' END
					into STRICT	nr_seq_plano_w,
						ie_tipo_estipulante_w
					from	pls_contrato		a,
						pls_contrato_plano	b
					where	b.nr_seq_contrato	= a.nr_sequencia
					--and	b.ie_situacao		= 'A' 
					and	a.nr_sequencia		= nr_seq_contrato_w;
				elsif (coalesce(nr_seq_intercambio_w,0) <> 0) then
					select	max(b.nr_seq_plano),
						CASE WHEN max(a.ie_tipo_contrato)='I' THEN 'I'  ELSE 'A' END ,
						CASE WHEN coalesce(max(a.cd_cgc)::text, '') = '' THEN 'PF'  ELSE 'PJ' END
					into STRICT	nr_seq_plano_w,
						ie_tipo_contrato_w,
						ie_tipo_estipulante_w
					from	pls_intercambio		a,
						pls_intercambio_plano	b
					where	b.nr_seq_intercambio	= a.nr_sequencia
					and	a.nr_sequencia		= nr_seq_intercambio_w;
				end if;

				begin
				select	ie_tipo_contratacao,
					ie_preco
				into STRICT	ie_tipo_contratacao_w,
					ie_preco_w
				from	pls_plano
				where	nr_sequencia	= nr_seq_plano_w;
				exception
				when others then
					ie_tipo_contratacao_w	:= null;
					ie_preco_w		:= null;
				end;

				/*Tratar o tipo de preco pelo repasse do beneficiario*/

				if (coalesce(nr_seq_intercambio_w,0) <> 0) then
					begin
					select	max(ie_tipo_repasse)
					into STRICT	ie_tipo_repasse_w
					from	pls_segurado
					where	nr_seq_intercambio	= nr_seq_intercambio_w;
					exception
					when others then
						ie_tipo_repasse_w	:= 'X';
					end;

					if (ie_tipo_repasse_w = 'P') then
						ie_preco_w	:= '1';
					elsif (ie_tipo_repasse_w = 'C') then
						ie_preco_w	:= '3';
					end if;
				end if;

				cd_serie_nf_w			:= null;
				cd_natureza_operacao_w		:= null;
				nr_seq_regra_serie_nf_w		:= null;

				select	count(1)
				into STRICT	qt_regra_serie_nf_w
				
				where	exists (SELECT	1
						from	pls_regra_serie_nf		a,
							pls_regra_serie_nf_compl	b
						where	b.nr_seq_regra		= a.nr_sequencia
						and	a.ie_situacao		= 'A'
						and	((b.ie_tipo_contrato	= ie_tipo_contrato_w) or (coalesce(b.ie_tipo_contrato::text, '') = ''))
						and	((b.ie_tipo_contratacao	= ie_tipo_contratacao_w) or (coalesce(b.ie_tipo_contratacao::text, '') = ''))
						and	((b.ie_preco		= ie_preco_w) or (coalesce(b.ie_preco::text, '') = ''))
						and	((b.cd_municipio_ibge	= cd_municipio_ibge_w) or (coalesce(b.cd_municipio_ibge::text, '') = '')));

				if (qt_regra_serie_nf_w > 0) then
					open c05;
					loop
					fetch c05 into
						nr_seq_regra_serie_nf_w;
					EXIT WHEN NOT FOUND; /* apply on c05 */
					end loop;
					close c05;

					if (coalesce(nr_seq_regra_serie_nf_w,0) = 0) then
						CALL wheb_mensagem_pck.exibir_mensagem_abort(191589);
						-- Mensagem: A serie da nota fiscal ultrapassou o numero permitido. Favor verifique!
					else
						select	max(cd_serie_nf),
							max(cd_natureza_operacao)
						into STRICT	cd_serie_nf_w,
							cd_natureza_operacao_w
						from	pls_regra_serie_nf
						where	nr_sequencia	= nr_seq_regra_serie_nf_w;
					end if;
				elsif (ie_regra_serie_nf_w = 'S') then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(191592,'NM_PAGADOR='||nm_pagador_w);
					-- Mensagem: A mensalidade do pagador #@NM_PAGADOR#@ , nao se encaixa em nenhuma regra de emissao de nota fiscal! (OPS - Cadastro de Regras -> OPS - Mensalidades -> Serie nota fiscal)
				end if;
				/* FIM - regra nota fiscal */

				if (qt_nota_gerada_w = 0) then
					select	nextval('nota_fiscal_seq')
					into STRICT	nr_sequencia_w
					;

					/*definir valores padrao - fiz conforme a gerar_nf_paciente */

					nr_nota_fiscal_w	:= nr_sequencia_w + 800000;

					select count(*)
					into STRICT	qt_nota_w
					from	nota_fiscal
					where	nr_nota_fiscal = nr_nota_fiscal_w;

					while(qt_nota_w > 0) loop
						select	nextval('nota_fiscal_seq')
						into STRICT	nr_sequencia_w
						;

						nr_nota_fiscal_w	:= nr_sequencia_w + 800000;

						select count(*)
						into STRICT	qt_nota_w
						from	nota_fiscal
						where	nr_nota_fiscal = nr_nota_fiscal_w;
					end loop;
					
					vl_ipi_w		:= 0;
					vl_descontos_w		:= 0;
					vl_frete_w		:= 0;
					vl_seguro_w		:= 0;
					vl_despesa_acessoria_w	:= 0;
					nr_sequencia_nf_w	:= 1;
					
					if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
						ie_tipo_nota_w	:= 'SE';
					else
						ie_tipo_nota_w	:= 'SF';
					end if;
					
					vl_mercadoria_w		:= vl_mensalidade_w;
					vl_total_nota_w		:= vl_mensalidade_w;
					
					if (coalesce(cd_condicao_pagamento_w::text, '') = '') then --Falta informar a condicao do pagamento nas informacoes do financeiras do pagador #@NR_SEQ_PAGADOR#@
						CALL wheb_mensagem_pck.exibir_mensagem_abort(191590,'NR_SEQ_PAGADOR='||nr_seq_pagador_w);
					elsif (coalesce(cd_operacao_nf_p,0) = 0) then --Falta informar a operacao da nota fiscal. O cadastro deve ser realizado na funcao OPS - Gestao de Operadoras / Parametros da OPS / Mensalidade, campo "Operacao nota"
						CALL wheb_mensagem_pck.exibir_mensagem_abort(1030750);
					else
						if (ie_data_referencia_nf_w = 'M') then
							dt_emissao_w := trunc(dt_referencia_w,'dd');
						elsif (ie_data_referencia_nf_w in ('G','P')) then
							if (ie_data_referencia_nf_w = 'G') then
								dt_emissao_w := clock_timestamp();
							elsif (ie_data_referencia_nf_w = 'P') then
								dt_emissao_w := dt_emissao_p;
							end if;
							
							dt_emissao_w	:= to_date(to_char(dt_emissao_w, 'dd/mm/yyyy') || ' ' || to_char(clock_timestamp(), 'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
						end if;
						
						insert	into	nota_fiscal(nr_sequencia,
							cd_estabelecimento,
							cd_cgc_emitente,
							cd_serie_nf,
							nr_nota_fiscal,
							nr_sequencia_nf,
							cd_operacao_nf,
							dt_emissao,
							dt_entrada_saida,
							ie_acao_nf,
							ie_emissao_nf,
							ie_tipo_frete,
							vl_mercadoria,
							vl_total_nota,
							qt_peso_bruto,
							qt_peso_liquido,
							dt_atualizacao,
							nm_usuario, --fim obrigatorios
							ie_tipo_nota,
							cd_condicao_pagamento,
							cd_natureza_operacao,
							nr_seq_classif_fiscal,
							ds_observacao,
							vl_ipi,
							vl_descontos,
							vl_frete,
							vl_seguro,
							vl_despesa_acessoria,
							cd_pessoa_fisica,
							cd_cgc,
							nr_seq_mensalidade,
							ie_situacao,
							nr_lote_contabil,
							ie_entregue_bloqueto,
							dt_competencia)
						values (nr_sequencia_w, --nr_sequencia
							cd_estabelecimento_p, --cd_estabelecimento
							obter_cgc_estabelecimento(cd_estabelecimento_p), --cd_cgc_emitente
							coalesce(cd_serie_nf_w,cd_serie_nf_p), --cd_serie_nf
							nr_nota_fiscal_w, --nr_nota_fiscal
							nr_sequencia_nf_w, --nr_sequencia_nf
							cd_operacao_nf_p, --cd_operacao_nf
							dt_emissao_w, --dt_emissao
							dt_emissao_w, --dt_entrada_saida
							'1', --ie_acao_nf
							'0', --ie_emissao_nf
							'0', --ie_tipo_frete
							vl_mercadoria_w, --vl_mercadoria
							vl_total_nota_w, --vl_total_nota
							0, --qt_peso_bruto
							0, --qt_peso_liquido
							clock_timestamp(),
							nm_usuario_p, -- fim obirgatorios
							ie_tipo_nota_w, --ie_tipo_nota
							cd_condicao_pagamento_w, --cd_condicao_pagamento
							coalesce(cd_natureza_operacao_w,cd_natureza_operacao_p), --cd_natureza_operacao
							null, --nr_seq_classif_fiscal_p  --nr_seq_classif_fiscal
							ds_observacao_nota_w, --ds_observacao
							vl_ipi_w, --vl_ipi
							vl_descontos_w, --vl_descontos
							vl_frete_w, --vl_frete
							vl_seguro_w, --vl_seguro
							vl_despesa_acessoria_w, --vl_despesa_acessoria
							cd_pessoa_fisica_w, --cd_pessoa_fisica
							cd_cgc_w, --cd_cgc
							nr_seq_mensalidade_w, --nr_seq_mensalidade
							'1', --ie_situacao
							0, --nr_lote_contabil
							'N', --ie_entregue_bloqueto
							dt_referencia_w --dt_competencia
							);
					end if;
					
					open c02;
					loop
					fetch c02 into
						ie_tipo_item_w,
						nr_seq_tipo_lanc_w,
						vl_item_mens_w,
						cd_conta_debito_w,
						cd_conta_financ_item_w;
					EXIT WHEN NOT FOUND; /* apply on c02 */
						if (coalesce(cd_conta_financ_item_w::text, '') = '') then
							cd_conta_financ_w := pls_obter_conta_financ_regra(	'M', nr_seq_mensalidade_w, cd_estabelecimento_p, ie_tipo_item_w, nr_seq_tipo_lanc_w, null, null, null, null, null, null, null, null, null, null, null, null, cd_conta_financ_w);
						else
							cd_conta_financ_w	:= cd_conta_financ_item_w;
						end if;
						
						SELECT * FROM pls_obter_tipo_item_nf_mens(	ie_tipo_item_w, nr_seq_tipo_lanc_w, cd_estabelecimento_p, cd_procedimento_w, ie_origem_proced_w, cd_material_w, nr_seq_grupo_item_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w, cd_material_w, nr_seq_grupo_item_w;
						
						if (ie_tipo_item_w = '3') then /* co-participacao */
							select	max(c.cd_conta_deb)
							into STRICT	cd_conta_debito_w
							from	pls_mensalidade_segurado a,
								pls_mensalidade_seg_item b,
								pls_conta_coparticipacao c
							where	a.nr_sequencia	= b.nr_seq_mensalidade_seg
							and	b.nr_seq_conta	= c.nr_seq_conta
							and	a.nr_seq_mensalidade	= nr_seq_mensalidade_w
							and	b.ie_tipo_item	= ie_tipo_item_w;
						end if;
						
						if	((coalesce(cd_procedimento_w::text, '') = '') or (coalesce(ie_origem_proced_w::text, '') = '')) and (coalesce(cd_material_w::text, '') = '') and (coalesce(nr_seq_grupo_item_w::text, '') = '') then
							CALL wheb_mensagem_pck.exibir_mensagem_abort(191593,'DS_ITEM='||coalesce(substr(obter_valor_dominio(1930,ie_tipo_item_w),1,100),
								substr(obter_descricao_padrao('PLS_TIPO_LANC_ADIC','DS_TIPO_LANCAMENTO',nr_seq_tipo_lanc_w),1,100)));
						end if;
						
						if	(((coalesce(ie_lancar_desconto_nota_mens_w,'N') = 'N') and (coalesce(vl_item_mens_w,0) <> 0)) or
							((coalesce(vl_item_mens_w,0) > 0) and (coalesce(ie_lancar_desconto_nota_mens_w,'N') = 'S'))) and (coalesce(nr_seq_grupo_item_w::text, '') = '') then
							
							select	coalesce(max(nr_item_nf),0) + 1
							into STRICT	nr_item_nf_w
							from	nota_fiscal_item
							where	nr_sequencia	= nr_sequencia_w;
							
							insert	into	nota_fiscal_item(nr_sequencia,
								cd_estabelecimento,
								cd_cgc_emitente,
								cd_serie_nf,
								nr_nota_fiscal,
								nr_sequencia_nf,
								nr_item_nf,
								cd_natureza_operacao,
								qt_item_nf,
								vl_unitario_item_nf,
								vl_total_item_nf,
								vl_liquido,
								vl_frete,
								vl_desconto,
								vl_despesa_acessoria,
								vl_desconto_rateio,
								vl_seguro,
								nm_usuario,
								dt_atualizacao, -- fim obrigatorios
								ds_complemento,
								cd_procedimento,
								ie_origem_proced,
								nr_seq_conta_financ,
								cd_conta_contabil,
								cd_material)
							values (nr_sequencia_w,
								cd_estabelecimento_p,
								obter_cgc_estabelecimento(cd_estabelecimento_p),
								coalesce(cd_serie_nf_w,cd_serie_nf_p),
								nr_nota_fiscal_w,
								nr_sequencia_nf_w,
								nr_item_nf_w,
								coalesce(cd_natureza_operacao_w,cd_natureza_operacao_p),
								1,
								vl_item_mens_w,
								vl_item_mens_w,
								vl_item_mens_w,
								vl_frete_w,
								vl_descontos_w,
								vl_despesa_acessoria_w,
								0,
								0,
								nm_usuario_p,
								clock_timestamp(), --fim obrigatorios
								coalesce(ds_complemento_w, ds_complemento_p),
								cd_procedimento_w,
								ie_origem_proced_w,
								CASE WHEN cd_conta_financ_w=0 THEN null  ELSE cd_conta_financ_w END ,
								cd_conta_debito_w,
								cd_material_w);
						end if;
						
						if (coalesce(vl_item_mens_w,0) < 0) and (coalesce(ie_lancar_desconto_nota_mens_w,'N') = 'S') then
							update	nota_fiscal
							set	vl_descontos = vl_descontos + abs(vl_item_mens_w)
							where	nr_nota_fiscal = nr_nota_fiscal_w;
						end if;
					end loop;
					close c02;
					
					for r_c07_w in c07 loop
						begin
						if	(((coalesce(ie_lancar_desconto_nota_mens_w,'N') = 'N') and (coalesce(r_c07_w.vl_item,0) <> 0)) or
							((coalesce(r_c07_w.vl_item,0) > 0) and (coalesce(ie_lancar_desconto_nota_mens_w,'N') = 'S'))) then

							cd_conta_financ_w := pls_obter_conta_financ_regra(	'M', nr_seq_mensalidade_w, cd_estabelecimento_p, null, null, null, null, null, null, null, null, null, null, null, null, r_c07_w.nr_seq_grupo_item, null, cd_conta_financ_w);

							select	coalesce(max(nr_item_nf),0) + 1
							into STRICT	nr_item_nf_ww
							from	nota_fiscal_item
							where	nr_sequencia	= nr_sequencia_w;
							
							insert	into	nota_fiscal_item(nr_sequencia,
								cd_estabelecimento,
								cd_cgc_emitente,
								cd_serie_nf,
								nr_nota_fiscal,
								nr_sequencia_nf,
								nr_item_nf,
								cd_natureza_operacao,
								qt_item_nf,
								vl_unitario_item_nf,
								vl_total_item_nf,
								vl_liquido,
								vl_frete,
								vl_desconto,
								vl_despesa_acessoria,
								vl_desconto_rateio,
								vl_seguro,
								nm_usuario,
								dt_atualizacao, -- fim obrigatorios
								ds_complemento,
								cd_procedimento,
								ie_origem_proced,
								nr_seq_conta_financ,
								cd_conta_contabil,
								cd_material)
							values (nr_sequencia_w,
								cd_estabelecimento_p,
								obter_cgc_estabelecimento(cd_estabelecimento_p),
								coalesce(cd_serie_nf_w,cd_serie_nf_p),
								nr_nota_fiscal_w,
								nr_sequencia_nf_w,
								nr_item_nf_ww,
								coalesce(cd_natureza_operacao_w,cd_natureza_operacao_p),
								1,
								coalesce(r_c07_w.vl_item,0),
								coalesce(r_c07_w.vl_item,0),
								r_c07_w.vl_item,
								vl_frete_w,
								vl_descontos_w,
								vl_despesa_acessoria_w,
								0,
								0,
								nm_usuario_p,
								clock_timestamp(), --fim obrigatorios
								coalesce(ds_complemento_w, ds_complemento_p),
								r_c07_w.cd_procedimento,
								r_c07_w.ie_origem_proced,
								cd_conta_financ_w,
								null,
								r_c07_w.cd_material);
						end if;
						
						if (coalesce(r_c07_w.vl_item,0) < 0) and (coalesce(ie_lancar_desconto_nota_mens_w,'N') = 'S') then
							update	nota_fiscal
							set	vl_descontos = vl_descontos + abs(r_c07_w.vl_item)
							where	nr_nota_fiscal = nr_nota_fiscal_w;
						end if;
						end;
					end loop;
					
					open C04;
					loop
					fetch C04 into
						vl_tributo_w,
						vl_base_calculo_w,
						pr_tributo_w,
						cd_tributo_w,
						vl_reducao_w,
						ie_retencao_w,
						vl_base_adic_w,
						vl_trib_adic_w,
						ie_origem_tributo_w;
					EXIT WHEN NOT FOUND; /* apply on C04 */
						begin
						insert	into	nota_fiscal_trib(nr_seq_interno,
							nr_sequencia,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							cd_tributo,
							vl_tributo,
							vl_base_calculo,
							tx_tributo,
							vl_trib_nao_retido,
							vl_base_nao_retido,
							vl_trib_adic,
							vl_base_adic,
							vl_reducao,
							ie_retencao,
							ie_origem_trib)
						values (nextval('nota_fiscal_trib_seq'),
							nr_sequencia_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							cd_tributo_w,
							vl_tributo_w,
							vl_base_calculo_w,
							pr_tributo_w,
							0,
							0,
							vl_trib_adic_w,
							vl_base_adic_w,
							vl_reducao_w,
							ie_retencao_w,
							ie_origem_tributo_w);
						end;
					end loop;
					close C04;
					
					if (coalesce(ie_gerar_tributo_nf_mens_w, 'N') = 'N') then
						CALL gerar_imposto_nf(nr_sequencia_w, nm_usuario_p, null, null); -- nr_seq_sit_trib_p
					end if;
					
					CALL atualiza_total_nota_fiscal(nr_sequencia_w,nm_usuario_p);
					
					select	max(ie_forma_pagamento),
						max(ds_condicao_pagamento)
					into STRICT	ie_forma_pagamento_w,
						ds_condicao_pagamento_w
					from	condicao_pagamento
					where	cd_condicao_pagamento	= cd_condicao_pagamento_w;
					
					if (qt_dias_venc_mens_w > 0) then
						if	(trunc(dt_vencimento_w,'dd') <= (trunc(clock_timestamp(),'dd') + qt_dias_venc_mens_w)) then
							dt_vencimento_w	:= clock_timestamp() + qt_dias_venc_mens_w;
						end if;
					end if;

					while(dt_vencimento_w < trunc(dt_emissao_p,'dd')) loop
						begin
						dt_vencimento_w	:= add_months(dt_vencimento_w,1);
						end;
					end loop;			
					
					-- conforme vencimentos
					if (ie_forma_pagamento_w = 10) then
						select	coalesce(vl_total_nota,0)
						into STRICT	vl_liquido_nota_w
						from	nota_fiscal
						where	nr_sequencia	= nr_sequencia_w;			

						
						insert	into	nota_fiscal_venc(nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							cd_estabelecimento,
							cd_cgc_emitente,
							cd_serie_nf,
							nr_nota_fiscal,
							nr_sequencia_nf,
							dt_vencimento,
							vl_vencimento,
							ie_origem)
						values (nr_sequencia_w,
							nm_usuario_p,
							clock_timestamp(),
							cd_estabelecimento_p,
							obter_cgc_estabelecimento(cd_estabelecimento_p),
							coalesce(cd_serie_nf_w,cd_serie_nf_p),
							nr_nota_fiscal_w,
							1,
							dt_vencimento_w,
							vl_liquido_nota_w,
							'N');
					else
						CALL gerar_nota_fiscal_venc(nr_sequencia_w, dt_vencimento_w);

						
						select	count(1)
						into STRICT	ie_gerou_parcelas_nota_fisc_w
						from	nota_fiscal_venc
						where	nr_sequencia	= nr_sequencia_w;
						--Se nao gerou registro na nota_fiscal_venc e a forma de pagamento for "A prazo" e porque nao haviam parcelas cadastradas para a forma de pagamento.
						if (	ie_gerou_parcelas_nota_fisc_w = 0 and
							ie_forma_pagamento_w = 2) then
							/*Processo interrompido, para continuar efetue o cadastro das parcelas para a condicao de pagamento "#@CD_CONDICAO_PAGAMENTO#@ - #@DS_CONDICAO_PAGAMENTO#@"
							em Shift + F11 > Suprimentos > Compras > Condicao de Pagamento > Parcelas.*/
							CALL wheb_mensagem_pck.exibir_mensagem_abort(295491,	'CD_CONDICAO_PAGAMENTO=' || to_char(cd_condicao_pagamento_w) || ';' ||
													'DS_CONDICAO_PAGAMENTO=' || to_char(ds_condicao_pagamento_w), -20012);
						end if;
					end if;

					/* locar a tabela e obter o numero da nota fiscal */

					lock table pls_regra_serie_nf in exclusive mode;

					select	max(nr_ultima_nf)
					into STRICT	nr_ultima_nf_regra_w
					from	pls_regra_serie_nf
					where	nr_sequencia	= nr_seq_regra_serie_nf_w;

					if (coalesce(nr_ultima_nf_regra_w,0) <> 0) then
						nr_nota_fiscal_w	:= nr_ultima_nf_regra_w + 1;

						update	pls_regra_serie_nf
						set	nr_ultima_nf	= nr_nota_fiscal_w
						where	nr_sequencia	= nr_seq_regra_serie_nf_w;
					else
						lock table serie_nota_fiscal in exclusive mode;
						select	coalesce(nr_ultima_nf,0) + 1
						into STRICT	nr_nota_fiscal_w
						from	serie_nota_fiscal
						where	cd_serie_nf		= coalesce(cd_serie_nf_w,cd_serie_nf_p)
						and	cd_estabelecimento	= cd_estabelecimento_p;

						if (coalesce(ie_estab_serie_nf_w,'N') = 'S') then
							update	serie_nota_fiscal
							set	nr_ultima_nf		= nr_nota_fiscal_w
							where	cd_serie_nf		= coalesce(cd_serie_nf_w,cd_serie_nf_p)
							and	cd_estabelecimento in (SELECT	z.cd_estabelecimento
											from	estabelecimento z
											where	z.cd_cgc = cd_cgc_emitente_w);
						else
							update	serie_nota_fiscal
							set	nr_ultima_nf		= nr_nota_fiscal_w
							where	cd_serie_nf		= coalesce(cd_serie_nf_w,cd_serie_nf_p)
							and	cd_estabelecimento	= cd_estabelecimento_p;
						end if;
					end if;

					select	count(1)
					into STRICT	qt_nota_fiscal_w
					from	nota_fiscal
					where	nr_nota_fiscal		= nr_nota_fiscal_w
					and	cd_serie_nf		= coalesce(cd_serie_nf_w,cd_serie_nf_p)
					and	cd_estabelecimento	= cd_estabelecimento_p
					and	nr_sequencia_nf		= 1  LIMIT 1;

					if (qt_nota_fiscal_w > 0) then
						select	max(nr_sequencia_nf) + 1
						into STRICT	nr_sequencia_nf_ww
						from	nota_fiscal
						where	nr_nota_fiscal		= nr_nota_fiscal_w
						and	cd_serie_nf		= coalesce(cd_serie_nf_w,cd_serie_nf_p)
						and	cd_estabelecimento	= cd_estabelecimento_p;

						update	nota_fiscal
						set	nr_sequencia_nf	= nr_sequencia_nf_ww
						where	nr_sequencia	= nr_sequencia_w;
					end if;

					/* atualizar os totais da nota fiscal */

					update	nota_fiscal
					set	nr_nota_fiscal		= nr_nota_fiscal_w,
						dt_atualizacao_estoque	= clock_timestamp()
					where	nr_sequencia		= nr_sequencia_w;

					update	nota_fiscal_item
					set	nr_nota_fiscal	= nr_nota_fiscal_w
					where	nr_sequencia	= nr_sequencia_w;

					select	max(nr_titulo)
					into STRICT	nr_titulo_w
					from	titulo_receber
					where	nr_seq_mensalidade	= nr_seq_mensalidade_w;

					/* se ainda nao tem titulo gerado */

					if (coalesce(nr_titulo_w::text, '') = '') then
						CALL gerar_titulo_receber_nfs(nr_sequencia_w,nm_usuario_p);

						ie_tipo_titulo_w	:= null;
						if (nr_seq_forma_cobranca_w = '1') then
							ie_tipo_titulo_w := '1';
						elsif (nr_seq_forma_cobranca_w = '2') then
							ie_tipo_titulo_w := '10';
						elsif (nr_seq_forma_cobranca_w = '3') then
							ie_tipo_titulo_w := '11';
						elsif (nr_seq_forma_cobranca_w = '4') then
							ie_tipo_titulo_w := '9';
						else
							CALL wheb_mensagem_pck.exibir_mensagem_abort(191591,'NM_PAGADOR='||nm_pagador_w);
						end if;

						select	max(nr_titulo)
						into STRICT	nr_titulo_w
						from	titulo_receber
						where	nr_seq_mensalidade	= nr_seq_mensalidade_w;

						/*Gerar mensagens para os itens pagos da mensalidade que nao possuem coparticipacao. - ebcabral - 20/06/2014*/

						CALL pls_gerar_tit_rec_mens_pag(nr_titulo_w, nr_seq_mensalidade_w, nm_usuario_p);

						CALL atualizar_saldo_tit_rec(nr_titulo_w, nm_usuario_p);

						update	titulo_receber
						set	ie_tipo_titulo	= coalesce(ie_tipo_titulo_w,ie_tipo_titulo)
						where	nr_titulo	= nr_titulo_w;
					else
						update	titulo_receber
						set	nr_seq_nf_saida	= nr_sequencia_w,
							cd_serie	= coalesce(cd_serie_nf_w,cd_serie_nf_p)
						where	nr_titulo	= nr_titulo_w;
					end if;

					/* reajuste */

					open c03;
					loop
					fetch c03 into
						nr_seq_segurado_w;
					EXIT WHEN NOT FOUND; /* apply on c03 */

						select	max(nr_seq_reajuste)
						into STRICT	nr_seq_reajuste_w
						from	pls_segurado_preco
						where	nr_seq_segurado	= nr_seq_segurado_w
						and	dt_reajuste between dt_inicial_w and fim_dia(dt_final_w)
						and	cd_motivo_reajuste = 'I';

						if (coalesce(nr_seq_reajuste_w,0) <> 0) and (coalesce(ds_observacao_w,'0') = '0') then
							select	nr_seq_reajuste
							into STRICT	nr_seq_lote_w
							from	pls_reajuste_preco
							where	nr_sequencia	= nr_seq_reajuste_w;

							select	dt_periodo_inicial,
								dt_periodo_final,
								tx_reajuste,
								ie_indice_reajuste,
								ds_oficio_ans,
								nr_protocolo_ans
							into STRICT	dt_periodo_inicial_w,
								dt_periodo_final_w,
								tx_reajuste_w,
								ie_indice_reajuste_w,
								ds_oficio_ans_w,
								nr_protocolo_ans_w
							from	pls_reajuste
							where	nr_sequencia	= nr_seq_lote_w;

							ds_observacao_w := wheb_mensagem_pck.get_texto(1115578, 'TX_REAJUSTE_W='|| tx_reajuste_w || ';IE_INDICE_REAJUSTE_W='||
											pls_obter_desc_indice_reaj(ie_indice_reajuste_w));	
							if (ie_indice_reajuste_w = '1') then
								ds_observacao_w := wheb_mensagem_pck.get_texto(1115579, 'DS_OBSERVACAO_W='|| ds_observacao_w || ';DS_OFICIO_ANS_W='|| ds_oficio_ans_w ||
													';NR_PROTOCOLO_ANS_W='|| nr_protocolo_ans_w || ';DT_PERIODO_INICIAL_W='|| obter_data_extenso(dt_periodo_inicial_w,1) || ';DT_PERIODO_FINAL_W='|| obter_data_extenso(dt_periodo_final_w,1));
							end if;

							update	titulo_receber
							set	ds_observacao_titulo = ds_observacao_w
							where	nr_titulo = nr_titulo_w;
						end if;
					end loop;
					close c03;
				end if;

				if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
					select	max(nr_seq_nat_juridica)
					into STRICT	nr_seq_nat_juridica_w
					from	pessoa_juridica
					where	cd_cgc	= cd_cgc_w;
				end if;

				/*Geracao de mensagem na nota fiscal*/

				CALL pls_gerar_mensagem_nota_mensal(nr_seq_mensalidade_w,nr_sequencia_w,ie_tipo_estipulante_w,dt_inicial_w,nr_seq_nat_juridica_w, nr_seq_contrato_w, cd_estabelecimento_p,nm_usuario_p);

				qt_titulos_gerados_w	:= 0;
				open C06;
				loop
				fetch C06 into
					nr_titulo_w,
					ie_tipo_titulo_w,
					vl_titulo_w;
				EXIT WHEN NOT FOUND; /* apply on C06 */
					begin
					qt_titulos_gerados_w	:= qt_titulos_gerados_w + 1;

					if (vl_titulo_w = 0) then
						update	titulo_receber
						set	dt_liquidacao	= dt_vencimento
						where	nr_titulo	= nr_titulo_w;
					end if;

					CALL pls_baixar_mens_adiant(	nr_titulo_w,cd_pessoa_fisica_w,cd_cgc_w,nr_seq_contrato_w,ie_baixar_mens_adiant_w,cd_estabelecimento_p,nr_seq_mensalidade_w,nm_usuario_p);

					if	(ie_linha_digitavel_w = 'S' and
						((ie_tipo_titulo_w = '1') or
						(ie_tipo_titulo_w = '10' AND ie_bloqueto_deb_auto_w = 'S'))) then
						CALL gerar_bloqueto_tit_rec(nr_titulo_w, 'OPSMS');
					end if;
					end;
				end loop;
				close C06;

				if (qt_titulos_gerados_w > 1) then
					update	pls_mensalidade
					set	ie_varios_titulos	= 'S'
					where	nr_sequencia		= nr_seq_mensalidade_w;
				end if;
			end if;

			commit;
		end loop;
		close c01;

		update	pls_lote_mensalidade
		set	dt_geracao_nf		= clock_timestamp(),
			dt_geracao_titulos	= CASE WHEN dt_geracao_titulos = NULL THEN clock_timestamp()  ELSE dt_geracao_titulos END  --Se os titulos ja foram gerados, mantem a data de geracao
		where	nr_sequencia		= nr_seq_lote_p;

		select	coalesce(max(ie_concil_contab), 'N')
		into STRICT	ie_concil_contab_w
		from	pls_visible_false;

		if (ie_concil_contab_w = 'S') then
			CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_gerar_nf_mens(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
		end if;
	end if;

	nr_seq_log_w := pls_mens_gravar_log_geracao(nr_seq_lote_p, '510', 'F', nm_usuario_p, nr_seq_log_w);

exception
when erro_abortar then

	delete	FROM pls_mens_log_geracao
	where	ie_etapa = '510'
	and	nr_seq_lote = nr_seq_lote_p;

	commit;

	ds_erro_w	:= substr(SQLSTATE||' - '||SQLERRM,1,2000);
	CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
end;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_notas_lote_mens ( nr_seq_lote_p bigint, cd_operacao_nf_p bigint, cd_natureza_operacao_p bigint, nr_seq_classif_fiscal_p bigint, nr_seq_sit_trib_p bigint, cd_serie_nf_p text, dt_emissao_p timestamp, ds_complemento_p text, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

