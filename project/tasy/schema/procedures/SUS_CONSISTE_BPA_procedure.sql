-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_bpa ( nr_interno_conta_p bigint, nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE



ds_detalhe_w		varchar(255)	:= '';
cd_estabelecimento_w	smallint;
ie_bpa_w			varchar(1)	:= 'S';
nr_bpa_w			varchar(13);
nr_seq_bpa_w		bigint;
ds_erro_w		varchar(255);
dt_entrada_w		timestamp;
dt_alta_w			timestamp;
count_w			bigint;

c01 CURSOR FOR
SELECT 	cd_procedimento,
	ie_origem_proced
from	procedimento_paciente
where	nr_interno_conta	= nr_interno_conta_p
and	coalesce(cd_motivo_exc_conta::text, '') = ''
and	sus_obter_tiporeg_proc(cd_procedimento,ie_origem_proced,'C',1) in ('1','2')
and	sus_obter_se_proc_bpa_duplo(cd_procedimento,ie_origem_proced) = 'S'
group by cd_procedimento,
	ie_origem_proced
order by cd_procedimento;

c01_w	c01%rowtype;


BEGIN

/* Obter dados da conta e do procedimento */

select	coalesce(max(cd_estabelecimento),1)
into STRICT	cd_estabelecimento_w
from	conta_Paciente
where	nr_interno_conta	= nr_interno_conta_p;

/*Obter dados do Atendimento*/

select	max(dt_entrada),
	coalesce(max(dt_alta),clock_timestamp())
into STRICT	dt_entrada_w,
	dt_alta_w
from	atendimento_paciente
where	nr_atendimento		= nr_atendimento_p;


/* Obter dados da AIH */

begin
select	to_char(nr_bpa),
	nr_sequencia
into STRICT	nr_bpa_w,
	nr_seq_bpa_w
from	sus_bpa_unif
where	nr_interno_conta	= nr_interno_conta_p
and	nr_atendimento		= nr_atendimento_p;
exception
	when others then
	begin
	select	a.nr_doc_convenio,
		0
	into STRICT	nr_bpa_w,
		nr_seq_bpa_w
	from    procedimento_paciente a,
		conta_paciente b
	where   a.nr_interno_conta = b.nr_interno_conta
	and	b.nr_interno_conta = nr_interno_conta_p
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and     coalesce(a.nr_doc_convenio,'0') <> '0'  LIMIT 1;
	exception
	when others then
		ie_bpa_w	:= 'N';
	end;
end;

ds_detalhe_w	:= 'BPA: ' || nr_bpa_w || ' - ' || nr_seq_bpa_w;

if (ie_bpa_w	= 'S') then
	ds_erro_w := Sus_Consiste_Numero_BPA(nr_interno_conta_p, nr_bpa_w, nr_seq_bpa_w, nm_usuario_p, 1, ds_erro_w);
end if;

open C01;
loop
fetch C01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */

	if (sus_obter_inco_ativa(290)) then
		--Verficar os procedimentos sem registro BPA
		select	count(*)
		into STRICT	count_w
		from	sus_proc_registro_bpa
		where	cd_procedimento 	= c01_w.cd_procedimento
		and	ie_origem_proced 	= c01_w.ie_origem_proced
		and	cd_estabelecimento	= cd_estabelecimento_w; --Primeiro verifica para o estab da conta.
		if (count_w = 0) then --Se não existe para o da conta, busca sem estabelecimento
			select	count(*)
			into STRICT	count_w
			from	sus_proc_registro_bpa
			where	cd_procedimento 	= c01_w.cd_procedimento
			and	ie_origem_proced 	= c01_w.ie_origem_proced
			and	coalesce(cd_estabelecimento::text, '') = '';

			if (count_w = 0) then --Se aidna não existir, consiste.
				ds_detalhe_w	:= substr(	wheb_mensagem_pck.Get_texto(280625) || ' ' || nr_interno_conta_p ||';'||
								wheb_mensagem_pck.get_texto(317671) || c01_w.cd_procedimento,1,255);
				CALL sus_gravar_inconsistencia(nr_interno_conta_p, 290, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end if;

		end if;
	end if;

	if (sus_obter_inco_ativa(291)) then

		--Verificar os procedimentos com registros BPA duplicados.
		begin
		select	x.qt
		into STRICT	count_w
		from (SELECT	count(*) qt,
				cd_registro,
				cd_estabelecimento
			from	sus_proc_registro_bpa
			where	cd_procedimento 	= c01_w.cd_procedimento
			and	ie_origem_proced 	= c01_w.ie_origem_proced
			and	coalesce(cd_estabelecimento,cd_estabelecimento_w) = cd_estabelecimento_w
			group by cd_registro,
				cd_estabelecimento
			having count(*) > 1) x;
		exception
		when others then
			count_w	:= 0;
		end;

		if (count_w > 0) then
			ds_detalhe_w	:= substr(	wheb_mensagem_pck.Get_texto(280625) || ' ' || nr_interno_conta_p ||';'||
							wheb_mensagem_pck.get_texto(317671) || c01_w.cd_procedimento,1,255);
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 291, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
		end if;
	end if;

end loop;
close C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_bpa ( nr_interno_conta_p bigint, nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;

