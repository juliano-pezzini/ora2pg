-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baca_ajuste_vl_movto_nf_transf ( cd_estabelecimento_p bigint, dt_mesano_referencia_p timestamp, ie_tipo_ajuste_p text, nm_usuario_p text) AS $body$
DECLARE


/*
ie_tipo_ajuste_p
M - Movimento pela nota fiscal
C - Nota fiscal pelo custo m√©dio
*/
cd_operacao_estoque_w	smallint;
nr_movimento_estoque_w	bigint;
nr_seq_tab_orig_w		bigint;
nr_sequencia_item_docto_w	integer;
vl_liquido_w		double precision;
vl_movimento_w		double precision;
qt_estoque_w		double precision;

nr_nota_fiscal_w		varchar(255);
cd_serie_nf_w		nota_fiscal.cd_serie_nf%type;

nr_sequencia_w		bigint;
nr_sequencia_ww		bigint;

nr_item_nf_w			integer;
cd_material_w			integer;
cd_unidade_medida_compra_w	varchar(30);
cd_unidade_medida_estoque_w	varchar(30);
qt_item_nf_w			double precision;
qt_item_estoque_w			double precision;
ie_unidade_medida_w		varchar(3);
vl_custo_medio_w			double precision;
vl_unitario_w			double precision;
aux_w				varchar(1);

c01 CURSOR FOR
SELECT	a.nr_movimento_estoque,
	a.nr_seq_tab_orig,
	a.nr_sequencia_item_docto,
	a.qt_estoque
from	movimento_estoque a,
	nota_fiscal c,
	operacao_nota d
where	a.ie_origem_documento = 1
and	a.nr_seq_tab_orig = c.nr_sequencia
and	c.cd_operacao_nf = d.cd_operacao_nf
and	a.cd_operacao_estoque = d.cd_operacao_estoque
and	d.ie_transferencia_estab = 'S'
and	a.cd_estabelecimento = cd_estabelecimento_p
and	a.dt_mesano_referencia = dt_mesano_referencia_p;

c02 CURSOR FOR
SELECT	c.nr_sequencia,
	c.nr_nota_fiscal,
	c.cd_serie_nf
FROM	movimento_estoque a,
	nota_fiscal c,
	operacao_nota d
WHERE	a.ie_origem_documento = 1
AND	a.nr_seq_tab_orig = c.nr_sequencia
AND	c.cd_operacao_nf = d.cd_operacao_nf
AND	a.cd_operacao_estoque = d.cd_operacao_estoque
and	c.ie_situacao = 1
AND	SUBSTR(obter_se_nota_entrada_saida(c.nr_sequencia),1,1) = 'S'
AND	d.ie_transferencia_estab = 'S'
AND	a.cd_estabelecimento = cd_estabelecimento_p
AND	a.dt_mesano_referencia = dt_mesano_referencia_p
GROUP BY c.nr_sequencia,
	c.nr_nota_fiscal,
	c.cd_serie_nf;

C03 CURSOR FOR
SELECT	nr_item_nf,
	cd_material,
	qt_item_estoque,
	qt_item_nf
FROM	nota_fiscal_item
WHERE	nr_sequencia = nr_seq_tab_orig_w;

C04 CURSOR FOR
SELECT	c.nr_sequencia,
	b.nr_item_nf,
	b.cd_material,
	b.qt_item_estoque,
	b.qt_item_nf
FROM	operacao_nota d,
	nota_fiscal c,
	nota_fiscal_item b
WHERE	c.nr_sequencia = b.nr_sequencia
and	c.cd_operacao_nf = d.cd_operacao_nf
AND	substr(obter_se_nota_entrada_saida(c.nr_sequencia),1,1) = 'E'
AND	d.ie_transferencia_estab = 'S'
AND	c.cd_serie_nf = cd_serie_nf_w
AND	c.nr_nota_fiscal = nr_nota_fiscal_w
and	exists (	select	1
		from	nota_fiscal_item x
		where	x.nr_sequencia = c.nr_sequencia
		and	exists (	select	1
				from	nota_fiscal_item z
				where	z.nr_sequencia = nr_seq_tab_orig_w
				and	x.nr_ordem_compra = z.nr_ordem_compra
				and	(z.nr_ordem_compra IS NOT NULL AND z.nr_ordem_compra::text <> '')));


BEGIN
if (coalesce(ie_tipo_ajuste_p,'M') = 'M') then
	begin
	open c01;
	loop
	fetch c01 into
		nr_movimento_estoque_w,
		nr_seq_tab_orig_w,
		nr_sequencia_item_docto_w,
		qt_estoque_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		select	coalesce(max(vl_liquido / qt_item_estoque),0)
		into STRICT	vl_liquido_w
		from	nota_fiscal_item
		where	nr_sequencia = nr_seq_tab_orig_w
		and	nr_item_nf = nr_sequencia_item_docto_w;

		if (vl_liquido_w <> 0) then
			begin
			delete	FROM movimento_estoque_valor
			where	nr_movimento_estoque = nr_movimento_estoque_w;

			vl_movimento_w := vl_liquido_w * qt_estoque_w;

			insert into movimento_estoque_valor(
				nr_movimento_estoque,
				cd_tipo_valor,
				vl_movimento,
				dt_atualizacao,
				nm_usuario)
			values (	nr_movimento_estoque_w,
				1,
				vl_movimento_w,
				clock_timestamp(),
				nm_usuario_p);
			end;
		end if;
		end;
	end loop;
	close c01;
	end;
elsif (coalesce(ie_tipo_ajuste_p,'M') = 'C') then
	begin
	CALL valorizar_estoque(dt_mesano_referencia_p,cd_estabelecimento_p,'N',nm_usuario_p);
	CALL gerar_resumo_movto_estoque(dt_mesano_referencia_p,cd_estabelecimento_p,nm_usuario_p);
	open C02;
	loop
	fetch C02 into
		nr_seq_tab_orig_w,
		nr_nota_fiscal_w,
		cd_serie_nf_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		open C03;
		loop
		fetch C03 into
			nr_item_nf_w,
			cd_material_w,
			qt_item_estoque_w,
			qt_item_nf_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			vl_custo_medio_w := obter_custo_medio_material(cd_estabelecimento_p,dt_mesano_referencia_p,cd_material_w);

			if (vl_custo_medio_w > 0) then
				begin
				vl_liquido_w	:= qt_item_estoque_w * vl_custo_medio_w;
				vl_unitario_w	:= dividir(vl_liquido_w, qt_item_nf_w);

				update	nota_fiscal_item
				set	vl_unitario_item_nf = vl_unitario_w,
					vl_total_item_nf = vl_liquido_w,
					vl_liquido = vl_liquido_w
				where	nr_sequencia = nr_seq_tab_orig_w
				and	nr_item_nf = nr_item_nf_w;
				end;
			end if;
			end;
		end loop;
		close C03;

		begin
		delete	FROM NOTA_FISCAL_VENC
		where	nr_sequencia = nr_seq_tab_orig_w;

		CALL atualiza_total_nota_fiscal(nr_seq_tab_orig_w,nm_usuario_p);
		CALL Gerar_vencimento_nota_fiscal(nr_seq_tab_orig_w, nm_usuario_p);
		exception
		when others then
			aux_w := null;
		end;

		nr_sequencia_ww := null;
		nr_sequencia_w	:= null;

		open C04;
		loop
		fetch C04 into
			nr_sequencia_w,
			nr_item_nf_w,
			cd_material_w,
			qt_item_estoque_w,
			qt_item_nf_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			if (nr_sequencia_ww IS NOT NULL AND nr_sequencia_ww::text <> '') and (nr_sequencia_ww <> nr_sequencia_w) then
				begin
				delete	FROM NOTA_FISCAL_VENC
				where	nr_sequencia = nr_sequencia_ww;

				CALL atualiza_total_nota_fiscal(nr_sequencia_ww, nm_usuario_p);
				CALL Gerar_vencimento_nota_fiscal(nr_sequencia_ww, nm_usuario_p);
				exception
				when others then
					aux_w := null;
				end;
			end if;
			nr_sequencia_ww	:= nr_sequencia_w;

			select	coalesce(dividir(sum(vl_total_item_nf),sum(qt_item_estoque)),0)
			into STRICT	vl_custo_medio_w
			from	nota_fiscal_item
			where	nr_sequencia = nr_seq_tab_orig_w
			and	cd_material = cd_material_w;

			if (vl_custo_medio_w > 0) then
				begin
				vl_liquido_w	:= vl_custo_medio_w * qt_item_estoque_w;
				vl_unitario_w	:= dividir(vl_liquido_w, qt_item_nf_w);

				update	nota_fiscal_item
				set	vl_unitario_item_nf = vl_unitario_w,
					vl_total_item_nf = vl_liquido_w,
					vl_liquido = vl_liquido_w
				where	nr_sequencia = nr_sequencia_w
				and	nr_item_nf = nr_item_nf_w;
				end;
			end if;
			end;
		end loop;
		close C04;

		begin
		delete	FROM NOTA_FISCAL_VENC
		where	nr_sequencia = nr_sequencia_ww;
		CALL atualiza_total_nota_fiscal(nr_sequencia_ww,nm_usuario_p);
		CALL Gerar_vencimento_nota_fiscal(nr_sequencia_ww, nm_usuario_p);
		exception
		when others then
			aux_w := null;
		end;

		end;
	end loop;
	close C02;
	end;
end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baca_ajuste_vl_movto_nf_transf ( cd_estabelecimento_p bigint, dt_mesano_referencia_p timestamp, ie_tipo_ajuste_p text, nm_usuario_p text) FROM PUBLIC;

