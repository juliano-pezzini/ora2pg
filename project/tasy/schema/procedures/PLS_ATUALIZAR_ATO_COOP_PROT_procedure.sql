-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE dados_regra AS (	nr_seq_regra		pls_ato_cooperado.nr_sequencia%type,
			ie_origem_ato		pls_ato_cooperado.ie_origem_ato%type,
			ie_ato_cooperado	pls_ato_cooperado.ie_ato_cooperado%type,
			nr_seq_estrutura_mat	pls_ato_cooperado.nr_seq_estrutura_mat%type,
			cd_procedimento		pls_ato_cooperado.cd_procedimento%type,
			ie_origem_proced	pls_ato_cooperado.ie_origem_proced%type,
			cd_grupo_proc		pls_ato_cooperado.cd_grupo_proc%type,
			cd_especialidade	pls_ato_cooperado.cd_especialidade%type,
			cd_area_procedimento	pls_ato_cooperado.cd_area_procedimento%type,
			nr_seq_tipo_prest_exec	pls_ato_cooperado.nr_seq_tipo_prest_exec%type,
			nr_seq_tipo_prest_prot	pls_ato_cooperado.nr_seq_tipo_prest_prot%type,			
			nr_seq_tipo_prest_pgto	pls_ato_cooperado.nr_seq_tipo_prest_pgto%type,
			ie_prestador_solic	pls_ato_cooperado.ie_prestador_solic%type,
			ie_prestador_exec	pls_ato_cooperado.ie_prestador_exec%type,
			ie_prestador_atend	pls_ato_cooperado.ie_prestador_atend%type,
			nr_seq_grupo_rec	pls_ato_cooperado.nr_seq_grupo_rec%type,	
			ie_prestador_pgto	pls_ato_cooperado.ie_prestador_pgto%type,
			nr_seq_material		pls_ato_cooperado.nr_seq_material%type,
			ie_tipo_protocolo	pls_ato_cooperado.ie_tipo_protocolo%type,
			ie_tipo_guia		pls_ato_cooperado.ie_tipo_guia%type,
			ie_tipo_desp_proc	pls_ato_cooperado.ie_tipo_desp_proc%type,			
			ie_tipo_desp_mat	pls_ato_cooperado.ie_tipo_desp_mat%type,
			nr_seq_prestador_pgto	pls_ato_cooperado.nr_seq_prestador_pgto%type,
			ie_medico_solic		pls_ato_cooperado.ie_medico_solic%type,
			ie_medico_executor	pls_ato_cooperado.ie_medico_executor%type,
			ie_tipo_contrato	pls_ato_cooperado.ie_tipo_contrato%type,
			ie_tipo_segurado	pls_ato_cooperado.ie_tipo_segurado%type	);


CREATE OR REPLACE PROCEDURE pls_atualizar_ato_coop_prot ( nr_seq_protocolo_p bigint, dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text) AS $body$
DECLARE


-- Campos do SQL dinâmico			
ie_proc_mat_w			varchar(2);
nr_seq_item_w			bigint;
nr_seq_material_w		pls_conta_mat.nr_seq_material%type;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
nr_seq_conta_resumo_w		pls_conta_medica_resumo.nr_sequencia%type;
dt_material_w			timestamp;
dt_conta_w			timestamp;
dt_protocolo_w			timestamp;
cd_estabelecimento_w		pls_conta.cd_estabelecimento%type;
cd_medico_solicitante_w		pls_conta.cd_medico_solicitante%type;
cd_guia_w			pls_conta.cd_guia%type;
nr_seq_segurado_w		pls_conta.nr_seq_segurado%type;
cd_medico_conta_w		pls_conta.cd_medico_executor%type;
ie_regra_data_preco_mat_w	pls_prestador.ie_regra_data_preco_mat%type;

-- Type
dados_regra_w			dados_regra;

-- Campos envolvidos nos UPDATES
nr_seq_regra_cooperado_w	pls_ato_cooperado.nr_sequencia%type;
ie_origem_ato_w			pls_ato_cooperado.ie_origem_ato%type;
ie_ato_cooperado_w		pls_ato_cooperado.ie_ato_cooperado%type;
p				integer; -- procedimento
m				integer; -- material
r				integer; -- resumo de conta médica
qt_reg_transacao_w		integer;
p_ie_ato_cooperado_table_w	pls_util_cta_pck.t_varchar2_table_1;
p_nr_seq_regra_coop_table_w	pls_util_cta_pck.t_number_table;	
p_nr_seq_conta_table_w		pls_util_cta_pck.t_number_table;	
p_nr_seq_item_table_w		pls_util_cta_pck.t_number_table;	
m_ie_ato_cooperado_table_w	pls_util_cta_pck.t_varchar2_table_1;
m_nr_seq_regra_coop_table_w	pls_util_cta_pck.t_number_table;	
m_nr_seq_conta_table_w		pls_util_cta_pck.t_number_table;	
m_nr_seq_item_table_w		pls_util_cta_pck.t_number_table;	
r_ie_ato_cooperado_table_w	pls_util_cta_pck.t_varchar2_table_1;
r_nr_seq_regra_coop_table_w	pls_util_cta_pck.t_number_table;	
r_nr_seq_conta_table_w		pls_util_cta_pck.t_number_table;	
r_nr_seq_item_table_w		pls_util_cta_pck.t_number_table;	

-- Restrições
ds_restricao_w			varchar(5000);
ds_restricao_data_i_w		varchar(2000);
ds_restricao_data_r_w		varchar(2000);
ds_restricao_proc_w		varchar(2000);
ds_restricao_mat_w		varchar(2000);
ds_restricao_res_w		varchar(2000);

-- Outros
ds_tipo_lote_contabil_w		varchar(40);
dt_referencia_w			pls_protocolo_conta.dt_mes_competencia%type;
dt_ref_inicial_w		timestamp;
dt_ref_final_w			timestamp;
qt_esquema_pagamento_w		bigint;
nr_seq_prestador_solic_w	pls_prestador.nr_sequencia%type;
dt_preco_w			timestamp := clock_timestamp();
cd_solic_w			pls_guia_plano.cd_medico_solicitante%type;
ie_medico_solic_coope_w		varchar(10);
ie_medico_exec_coope_w		varchar(10);
ie_cooperado_solic_w		pls_prestador.ie_tipo_relacao%type;
ie_estrut_mat_w			varchar(1);
cursor_w			sql_pck.t_cursor;
valor_bind_w			sql_pck.t_dado_bind;
ds_sql_w			varchar(9000);

ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;
ie_tipo_contrato_w		pls_intercambio.ie_tipo_contrato%type;

C01 CURSOR( cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type) FOR
	SELECT	a.nr_sequencia nr_seq_regra,
		a.ie_origem_ato,
		a.ie_ato_cooperado,
		a.nr_seq_estrutura_mat,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.cd_grupo_proc,
		a.cd_especialidade,
		a.cd_area_procedimento,
		a.nr_seq_tipo_prest_exec,
		a.nr_seq_tipo_prest_prot,
		a.nr_seq_tipo_prest_pgto,
		a.ie_prestador_solic,
		a.ie_prestador_exec,
		a.ie_prestador_atend,
		a.ie_prestador_pgto,
		a.nr_seq_grupo_rec,
		a.nr_seq_material,
		a.ie_tipo_protocolo,
		a.ie_tipo_guia,
		a.ie_tipo_desp_proc,
		a.ie_tipo_desp_mat,
		a.nr_seq_prestador_pgto,
		a.ie_medico_solic,
		a.ie_medico_executor,
		a.ie_tipo_contrato,
		a.ie_tipo_segurado
	from	pls_ato_cooperado	   a
	where	a.ie_situacao = 'A'
	and	a.cd_estabelecimento = cd_estabelecimento_pc
	order 	by coalesce(a.nr_seq_material,0),
		coalesce(a.nr_seq_estrutura_mat,0),
		coalesce(a.ie_prestador_pgto,0),
		coalesce(a.ie_prestador_exec,0),
		coalesce(a.cd_procedimento,0),
		coalesce(a.cd_grupo_proc,0),
		coalesce(a.cd_especialidade,0),
		coalesce(a.cd_area_procedimento,0),
		coalesce(a.nr_seq_tipo_prest_pgto,0),
		coalesce(a.nr_seq_tipo_prest_exec,0);

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

	
procedure pls_atualiza_tabela(	ie_ato_cooperado_table_p	pls_util_cta_pck.t_varchar2_table_1,
			nr_seq_regra_coop_table_p	pls_util_cta_pck.t_number_table,
			nr_seq_conta_table_p		pls_util_cta_pck.t_number_table,
			nr_seq_item_table_p		pls_util_cta_pck.t_number_table,
			ie_registro_p			text) is

/* ie_registro_p:
	P = atualiza os registros da tabela PLS_CONTA_PROC
	M = atualiza os registros da tabela PLS_CONTA_MAT
	R = atualiza os registros da tabela PLS_CONTA_MEDICA_RESUMO
*/
			
BEGIN

if (nr_seq_item_table_p.count > 0) then
	if (ie_registro_p = 'P') then	
		forall i in nr_seq_item_table_p.first..nr_seq_item_table_p.last
			update	pls_conta_proc
			set	ie_ato_cooperado	= ie_ato_cooperado_table_p(i),
				nr_seq_regra_cooperado	= nr_seq_regra_coop_table_p(i)
			where	nr_seq_conta		= nr_seq_conta_table_p(i)
			and	nr_sequencia		= nr_seq_item_table_p(i);
			
		commit;	
	elsif (ie_registro_p = 'M') then	
		forall i in nr_seq_item_table_p.first..nr_seq_item_table_p.last
			update	pls_conta_mat
			set	ie_ato_cooperado	= ie_ato_cooperado_table_p(i),
				nr_seq_regra_cooperado	= nr_seq_regra_coop_table_p(i)
			where	nr_seq_conta		= nr_seq_conta_table_p(i)
			and	nr_sequencia		= nr_seq_item_table_p(i);
			
		commit;	
	elsif (ie_registro_p = 'R') then	
		forall i in nr_seq_item_table_p.first..nr_seq_item_table_p.last
			update	pls_conta_medica_resumo
			set	ie_ato_cooperado	= ie_ato_cooperado_table_p(i),
				nr_seq_regra_cooperado	= nr_seq_regra_coop_table_p(i)
			where	nr_seq_conta		= nr_seq_conta_table_p(i)
			and	nr_sequencia		= nr_seq_item_table_p(i);
			
		commit;	
	end if;
end if;

end;

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

	
function pls_obter_restricao(	dados_regra_p		in dados_regra,			
			valor_bind_p		in out sql_pck.t_dado_bind)
			return;

begin

ds_restricao_w := null;

-- Protocolo
if (coalesce(nr_seq_protocolo_p,0) > 0) then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.nr_seq_protocolo = :nr_seq_protocolo ';	
	valor_bind_p := sql_pck.bind_variable(':nr_seq_protocolo', nr_seq_protocolo_p, valor_bind_p);
end if;

-- Tipo prestador executante (da conta)
if (dados_regra_p.nr_seq_tipo_prest_exec IS NOT NULL AND dados_regra_p.nr_seq_tipo_prest_exec::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.nr_seq_tipo_prest_exec = :nr_seq_tipo_prest_exec ';
	valor_bind_p := sql_pck.bind_variable(':nr_seq_tipo_prest_exec', dados_regra_p.nr_seq_tipo_prest_exec, valor_bind_p);
end if;

-- Tipo prestador atendente (do protocolo)
if (dados_regra_p.nr_seq_tipo_prest_prot IS NOT NULL AND dados_regra_p.nr_seq_tipo_prest_prot::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.nr_seq_tipo_prest_prot = :nr_seq_tipo_prest_prot ';
	valor_bind_p := sql_pck.bind_variable(':nr_seq_tipo_prest_prot', dados_regra_p.nr_seq_tipo_prest_prot, valor_bind_p);
end if;

-- Tipo cooperado executante (da conta)
if (dados_regra_p.ie_prestador_exec IS NOT NULL AND dados_regra_p.ie_prestador_exec::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and decode(a.ie_tipo_relacao_prest_exec,''C'',1,''I'',3,''D'',3,''F'',3,''P'',2) = :ie_prestador_exec ';
	valor_bind_p := sql_pck.bind_variable(':ie_prestador_exec', dados_regra_p.ie_prestador_exec, valor_bind_p);
end if;

-- Tipo cooperado atendente (do protocolo)
if (dados_regra_p.ie_prestador_atend IS NOT NULL AND dados_regra_p.ie_prestador_atend::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and decode(a.ie_tipo_relacao_prest_prot,''C'',1,''I'',3,''D'',3,''F'',3,''P'',2) = :ie_prestador_atend ';
	valor_bind_p := sql_pck.bind_variable(':ie_prestador_atend', dados_regra_p.ie_prestador_atend, valor_bind_p);
end if;

-- Grupo de receita
if (dados_regra_p.nr_seq_grupo_rec IS NOT NULL AND dados_regra_p.nr_seq_grupo_rec::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.nr_seq_grupo_rec = :nr_seq_grupo_rec ';
	valor_bind_p := sql_pck.bind_variable(':nr_seq_grupo_rec', dados_regra_p.nr_seq_grupo_rec, valor_bind_p);
end if;

-- Tipo do protocolo
if (dados_regra_p.ie_tipo_protocolo IS NOT NULL AND dados_regra_p.ie_tipo_protocolo::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and nvl(a.ie_tipo_protocolo,''C'') = :ie_tipo_protocolo ';
	valor_bind_p := sql_pck.bind_variable(':ie_tipo_protocolo', dados_regra_p.ie_tipo_protocolo, valor_bind_p);
end if;

-- Tipo de guia
if (dados_regra_p.ie_tipo_guia IS NOT NULL AND dados_regra_p.ie_tipo_guia::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.ie_tipo_guia = :ie_tipo_guia ';
	valor_bind_p := sql_pck.bind_variable(':ie_tipo_guia', dados_regra_p.ie_tipo_guia, valor_bind_p);
end if;

return;

end;

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

	
function pls_obter_restricao_data_comp(	dados_regra_p		in dados_regra,
			dt_ref_inicial_p	in date,
			dt_ref_final_p		in date,
			ie_data_p		in varchar2,
			valor_bind_p		in out sql_pck.t_dado_bind)
			return;

begin

ds_restricao_w := null;

-- Data mês competência
if (ie_data_p = 'I') then
	if (dt_ref_inicial_p IS NOT NULL AND dt_ref_inicial_p::text <> '' AND dt_ref_final_p IS NOT NULL AND dt_ref_final_p::text <> '') then
		ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w ||
				' and a.dt_mes_competencia between :dt_ref_inicial and :dt_ref_final ';			
		valor_bind_p := sql_pck.bind_variable(':dt_ref_inicial', dt_ref_inicial_p, valor_bind_p);
		valor_bind_p := sql_pck.bind_variable(':dt_ref_final', dt_ref_final_p, valor_bind_p);
	else
		-- Tratamento apenas para o início de vigência
		if (dt_ref_inicial_p IS NOT NULL AND dt_ref_inicial_p::text <> '') then
			ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.dt_mes_competencia >= :dt_ref_inicial ';		
			valor_bind_p := sql_pck.bind_variable(':dt_ref_inicial', dt_ref_inicial_p, valor_bind_p);
		-- Tratamento apenas para o fim de vigência
		elsif (dt_ref_final_p IS NOT NULL AND dt_ref_final_p::text <> '') then
			ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.dt_mes_competencia <= :dt_ref_final ';		
			valor_bind_p := sql_pck.bind_variable(':dt_ref_final', dt_ref_final_p, valor_bind_p);
		end if;
	end if;
elsif (ie_data_p = 'R') then	
	if (dt_ref_inicial_p IS NOT NULL AND dt_ref_inicial_p::text <> '' AND dt_ref_final_p IS NOT NULL AND dt_ref_final_p::text <> '') then
		ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w ||
				' and (a.dt_mes_competencia between :dt_ref_inicial and :dt_ref_final ' || 
				' or c.dt_mes_competencia between :dt_ref_inicial and :dt_ref_final ) ';			
		valor_bind_p := sql_pck.bind_variable(':dt_ref_inicial', dt_ref_inicial_p, valor_bind_p);
		valor_bind_p := sql_pck.bind_variable(':dt_ref_final', dt_ref_final_p, valor_bind_p);
	else
		-- Tratamento apenas para o início de vigência
		if (dt_ref_inicial_p IS NOT NULL AND dt_ref_inicial_p::text <> '') then
			ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w ||
					' and (a.dt_mes_competencia >= :dt_ref_inicial ' || 
					' or c.dt_mes_competencia >= :dt_ref_inicial ) ';		
					valor_bind_p := sql_pck.bind_variable(':dt_ref_inicial', dt_ref_inicial_p, valor_bind_p);
		-- Tratamento apenas para o fim de vigência
		elsif (dt_ref_final_p IS NOT NULL AND dt_ref_final_p::text <> '') then
			ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w ||
					' and (a.dt_mes_competencia <= :dt_ref_inicial ' || 
					' and c.dt_mes_competencia <= :dt_ref_final ) ';		
			valor_bind_p := sql_pck.bind_variable(':dt_ref_final', dt_ref_final_p, valor_bind_p);
		end if;
	end if;
end if;

return;

end;

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

function pls_obter_restricao_proc(	dados_regra_p		in dados_regra,
			valor_bind_p		in out sql_pck.t_dado_bind)
			return;

begin

ds_restricao_w := null;

-- Procedimento
if (dados_regra_p.cd_procedimento IS NOT NULL AND dados_regra_p.cd_procedimento::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.ie_origem_proced 	= :ie_origem_proced ' || pls_util_pck.enter_w ||
								    ' and a.cd_procedimento 	= :cd_procedimento ';	
	valor_bind_p := sql_pck.bind_variable(':ie_origem_proced', dados_regra_p.ie_origem_proced, valor_bind_p);
	valor_bind_p := sql_pck.bind_variable(':cd_procedimento', dados_regra_p.cd_procedimento, valor_bind_p);
end if;

-- Grupo de procedimento
if (dados_regra_p.cd_grupo_proc IS NOT NULL AND dados_regra_p.cd_grupo_proc::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.cd_grupo_proc = :cd_grupo_proc ';	
	valor_bind_p := sql_pck.bind_variable(':cd_grupo_proc', dados_regra_p.cd_grupo_proc, valor_bind_p);
end if;

-- Especialidade do procedimento
if (dados_regra_p.cd_especialidade IS NOT NULL AND dados_regra_p.cd_especialidade::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.cd_especialidade = :cd_especialidade ';
	valor_bind_p := sql_pck.bind_variable(':cd_especialidade', dados_regra_p.cd_especialidade, valor_bind_p);
end if;

-- Área do procedimento
if (dados_regra_p.cd_area_procedimento IS NOT NULL AND dados_regra_p.cd_area_procedimento::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.cd_area_procedimento = :cd_area_procedimento ';
	valor_bind_p := sql_pck.bind_variable(':cd_area_procedimento', dados_regra_p.cd_area_procedimento, valor_bind_p);
end if;

-- Tipo de despesa (do procedimento)
if (dados_regra_p.ie_tipo_desp_proc IS NOT NULL AND dados_regra_p.ie_tipo_desp_proc::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.ie_tipo_despesa = :ie_tipo_desp_proc ';
	valor_bind_p := sql_pck.bind_variable(':ie_tipo_desp_proc', dados_regra_p.ie_tipo_desp_proc, valor_bind_p);
end if;

return;

end;

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

function pls_obter_restricao_mat(	dados_regra_p		in dados_regra,
			valor_bind_p		in out sql_pck.t_dado_bind)
			return;

begin

ds_restricao_w := null;

-- Seq material
if (dados_regra_p.nr_seq_material IS NOT NULL AND dados_regra_p.nr_seq_material::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.nr_seq_material = :nr_seq_material ';
	valor_bind_p := sql_pck.bind_variable(':nr_seq_material', dados_regra_p.nr_seq_material, valor_bind_p);
end if;

-- Tipo de despesa (do material)
if (dados_regra_p.ie_tipo_desp_mat IS NOT NULL AND dados_regra_p.ie_tipo_desp_mat::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and a.ie_tipo_despesa = :ie_tipo_desp_mat ';
	valor_bind_p := sql_pck.bind_variable(':ie_tipo_desp_mat', dados_regra_p.ie_tipo_desp_mat, valor_bind_p);
end if;

return;

end;

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

function pls_obter_restricao_res(	dados_regra_p		in dados_regra,
			valor_bind_p		in out sql_pck.t_dado_bind)
			return;

begin

ds_restricao_w := null;

-- Prestador de pagamento
if (dados_regra_p.nr_seq_prestador_pgto IS NOT NULL AND dados_regra_p.nr_seq_prestador_pgto::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w || ' and b.nr_seq_prestador_pgto = :nr_seq_prestador_pgto ';
	valor_bind_p := sql_pck.bind_variable(':nr_seq_prestador_pgto', dados_regra_p.nr_seq_prestador_pgto, valor_bind_p);
end if;

-- Cooperado de pagamento
if (dados_regra_p.ie_prestador_pgto IS NOT NULL AND dados_regra_p.ie_prestador_pgto::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w ||
				' and exists (	select	1									' || pls_util_pck.enter_w ||
				'		from	pls_prestador	x							' || pls_util_pck.enter_w ||
				'		where	x.nr_sequencia 	= b.nr_seq_prestador_pgto 				' || pls_util_pck.enter_w ||
				'		and	decode(x.ie_tipo_relacao,''C'',1,''I'',3,''D'',3,''F'',3,''P'',2) = :ie_prestador_pgto ) ';
	valor_bind_p := sql_pck.bind_variable(':ie_prestador_pgto', dados_regra_p.ie_prestador_pgto, valor_bind_p);
end if;

-- Tipo do prestador de pagamento
if (dados_regra_p.nr_seq_tipo_prest_pgto IS NOT NULL AND dados_regra_p.nr_seq_tipo_prest_pgto::text <> '') then
	ds_restricao_w := ds_restricao_w || pls_util_pck.enter_w ||
				' and exists (	select	1									' || pls_util_pck.enter_w ||
				'		from	pls_prestador	x							' || pls_util_pck.enter_w ||
				'		where	x.nr_sequencia 	= b.nr_seq_prestador_pgto 				' || pls_util_pck.enter_w ||
				'		and	x.nr_seq_tipo_prestador = :nr_seq_tipo_prest_pgto ) ';
	valor_bind_p := sql_pck.bind_variable(':nr_seq_tipo_prest_pgto', dados_regra_p.nr_seq_tipo_prest_pgto, valor_bind_p);
end if;

return;

end;

/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

begin

ds_restricao_w 		:= null;
ds_restricao_data_i_w 	:= null;
ds_restricao_data_r_w 	:= null;
ds_restricao_proc_w 	:= null;
ds_restricao_mat_w 	:= null;
ds_restricao_res_w 	:= null;
dt_referencia_w		:= trunc(dt_referencia_p,'month');
dt_ref_inicial_w	:= trunc(trunc(dt_referencia_p,'month'),'dd');
dt_ref_final_w		:= fim_dia(fim_mes(dt_ref_inicial_w));
p			:= 0;
m			:= 0;
r			:= 0;

select	max(b.ds_tipo_lote_contabil)
into STRICT	ds_tipo_lote_contabil_w
from	lote_contabil		a,
	tipo_lote_contabil	b
where	a.cd_tipo_lote_contabil	= b.cd_tipo_lote_contabil
and	b.cd_tipo_lote_contabil	in (22,33,40,41,42,43) -- OPS Despesas - Contas Médicas / OPS Despesas - Contas Intercâmbio / OPS Despesas-Provisão de produção médica / OPS Desp - Pagamento de produção médica / OPS - Provisão de coparticipação / OPS - Provisão de Faturamento 
and	a.dt_referencia between dt_ref_inicial_w and dt_ref_final_w
and	coalesce(a.cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p
and	(a.dt_geracao_lote IS NOT NULL AND a.dt_geracao_lote::text <> '');

if (ds_tipo_lote_contabil_w IS NOT NULL AND ds_tipo_lote_contabil_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(221408, 'DS_TIPO_LOTE_CONTABIL=' || ds_tipo_lote_contabil_w || ';' || 'DT_REFERENCIA=' || to_char(dt_referencia_p,'mm/yyyy'));
end if;

select	count(1)
into STRICT	qt_esquema_pagamento_w
from	pls_esquema_contabil
where	ie_tipo_regra			= 'PM'
and	ie_prestador_codificacao	= 'P'
and	cd_estabelecimento		= cd_estabelecimento_p
and	dt_referencia_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia,dt_referencia_w)  LIMIT 1;

-- Obtém o controle padrão da quantidade de registros que será enviada a cada vez para o banco de dados
qt_reg_transacao_w := pls_util_cta_pck.qt_registro_transacao_w;

for r_C01_w in C01(cd_estabelecimento_p) loop

	-- Atribuição dos valores para os campos do type DADOS_REGRA
	dados_regra_w.nr_seq_regra		:= r_C01_w.nr_seq_regra;
	dados_regra_w.ie_origem_ato		:= r_C01_w.ie_origem_ato;
	dados_regra_w.ie_ato_cooperado		:= r_C01_w.ie_ato_cooperado;
	dados_regra_w.nr_seq_estrutura_mat	:= r_C01_w.nr_seq_estrutura_mat;	
	dados_regra_w.cd_procedimento		:= r_C01_w.cd_procedimento;
	dados_regra_w.ie_origem_proced		:= r_C01_w.ie_origem_proced;
	dados_regra_w.cd_grupo_proc		:= r_C01_w.cd_grupo_proc;
	dados_regra_w.cd_especialidade		:= r_C01_w.cd_especialidade;
	dados_regra_w.cd_area_procedimento	:= r_C01_w.cd_area_procedimento;
	dados_regra_w.nr_seq_tipo_prest_exec	:= r_C01_w.nr_seq_tipo_prest_exec;
	dados_regra_w.nr_seq_tipo_prest_prot	:= r_C01_w.nr_seq_tipo_prest_prot;
	dados_regra_w.nr_seq_tipo_prest_pgto	:= r_C01_w.nr_seq_tipo_prest_pgto;
	dados_regra_w.ie_prestador_solic	:= r_C01_w.ie_prestador_solic;
	dados_regra_w.ie_prestador_exec		:= r_C01_w.ie_prestador_exec;	
	dados_regra_w.ie_prestador_atend	:= r_C01_w.ie_prestador_atend;
	dados_regra_w.ie_prestador_pgto		:= r_C01_w.ie_prestador_pgto;
	dados_regra_w.nr_seq_grupo_rec		:= r_C01_w.nr_seq_grupo_rec;
	dados_regra_w.nr_seq_material		:= r_C01_w.nr_seq_material;
	dados_regra_w.ie_tipo_protocolo		:= r_C01_w.ie_tipo_protocolo;
	dados_regra_w.ie_tipo_guia		:= r_C01_w.ie_tipo_guia;
	dados_regra_w.ie_tipo_desp_proc		:= r_C01_w.ie_tipo_desp_proc;
	dados_regra_w.ie_tipo_desp_mat		:= r_C01_w.ie_tipo_desp_mat;
	dados_regra_w.nr_seq_prestador_pgto	:= r_C01_w.nr_seq_prestador_pgto;
	dados_regra_w.ie_medico_solic		:= r_C01_w.ie_medico_solic;
	dados_regra_w.ie_medico_executor	:= r_C01_w.ie_medico_executor;
	dados_regra_w.ie_tipo_contrato		:= r_C01_w.ie_tipo_contrato;
	dados_regra_w.ie_tipo_segurado		:= r_C01_w.ie_tipo_segurado;
	
	-- Obter restrições 
	ds_restricao_w 		:= pls_obter_restricao(dados_regra_w, valor_bind_w);
	--ds_restricao_data_i_w	:= pls_obter_restricao_data_comp(dados_regra_w, dt_ref_inicial_w, dt_ref_final_w, 'I', valor_bind_w);	-- Restringe pela data de competência do protocolo

	--ds_restricao_data_r_w	:= pls_obter_restricao_data_comp(dados_regra_w, dt_ref_inicial_w, dt_ref_final_w, 'R', valor_bind_w);	-- Restringe pela data de competência do protocolo e do lote de pagamento
	ds_restricao_proc_w 	:= pls_obter_restricao_proc(dados_regra_w, valor_bind_w);
	ds_restricao_mat_w 	:= pls_obter_restricao_mat(dados_regra_w, valor_bind_w);
	ds_restricao_res_w 	:= pls_obter_restricao_res(dados_regra_w, valor_bind_w);
	
	-- Select dinâmico
	ds_sql_w :=	'	select	''P'' ie_proc_mat,											' || pls_util_pck.enter_w ||
			'		a.nr_sequencia nr_seq_item,										' || pls_util_pck.enter_w ||
			'		null nr_seq_material,											' || pls_util_pck.enter_w ||
			'		a.nr_seq_conta,												' || pls_util_pck.enter_w ||
			'		null nr_seq_conta_resumo,										' || pls_util_pck.enter_w ||
			'		nvl(a.dt_procedimento_real, sysdate) dt_material,							' || pls_util_pck.enter_w ||
			'		nvl(a.dt_emissao_conta, nvl(a.dt_autorizacao_conta, nvl(a.dt_entrada_conta, sysdate))) dt_conta,	' || pls_util_pck.enter_w ||
			'		a.dt_mes_competencia dt_protocolo,									' || pls_util_pck.enter_w ||
			'		a.cd_estabelecimento,											' || pls_util_pck.enter_w ||
			'		a.cd_medico_solicitante,										' || pls_util_pck.enter_w ||
			'		nvl(a.cd_guia,0) cd_guia,										' || pls_util_pck.enter_w ||
			'		a.nr_seq_segurado,											' || pls_util_pck.enter_w ||
			'		a.cd_medico_executor cd_medico_conta,									' || pls_util_pck.enter_w ||
			'		a.ie_regra_data_preco_mat_exec ie_regra_data_preco_mat,							' || pls_util_pck.enter_w ||
			'		a.ie_tipo_segurado							' || pls_util_pck.enter_w ||
			'	from	pls_conta_proc_v	a										' || pls_util_pck.enter_w ||
			'	where	1 = 1													' ||
				ds_restricao_w													  ||
			--	ds_restricao_data_i_w												  || 
				ds_restricao_proc_w												  || pls_util_pck.enter_w ||
			'	union all													' || pls_util_pck.enter_w ||
			'	select	''M'' ie_proc_mat,											' || pls_util_pck.enter_w ||
			'		a.nr_sequencia nr_seq_item,										' || pls_util_pck.enter_w ||
			'		a.nr_seq_material,											' || pls_util_pck.enter_w ||
			'		a.nr_seq_conta,												' || pls_util_pck.enter_w ||
			'		null nr_seq_conta_resumo,										' || pls_util_pck.enter_w ||
			'		nvl(a.dt_atendimento_real, sysdate) dt_material,							' || pls_util_pck.enter_w ||
			'		nvl(a.dt_emissao_conta, nvl(a.dt_autorizacao_conta, nvl(a.dt_entrada_conta, sysdate))) dt_conta,	' || pls_util_pck.enter_w ||
			'		a.dt_mes_competencia dt_protocolo,									' || pls_util_pck.enter_w ||
			'		a.cd_estabelecimento,											' || pls_util_pck.enter_w ||
			'		a.cd_medico_solicitante,										' || pls_util_pck.enter_w ||
			'		nvl(a.cd_guia,0) cd_guia,										' || pls_util_pck.enter_w ||
			'		a.nr_seq_segurado,											' || pls_util_pck.enter_w ||
			'		a.cd_medico_executor cd_medico_conta,									' || pls_util_pck.enter_w ||
			'		a.ie_regra_data_preco_mat_exec ie_regra_data_preco_mat,							' || pls_util_pck.enter_w ||
			'		a.ie_tipo_segurado							' || pls_util_pck.enter_w ||
			'	from	pls_conta_mat_v	a											' || pls_util_pck.enter_w ||
			'	where	1 = 1													' || 
				ds_restricao_w													  || 
			--	ds_restricao_data_i_w												  || 
				ds_restricao_mat_w												  || pls_util_pck.enter_w ||
			'	union all													' || pls_util_pck.enter_w ||
			'	select	''RP'' ie_proc_mat,											' || pls_util_pck.enter_w ||
			'		a.nr_sequencia nr_seq_item,										' || pls_util_pck.enter_w ||
			'		null nr_seq_material,											' || pls_util_pck.enter_w ||
			'		a.nr_seq_conta,												' || pls_util_pck.enter_w ||
			'		b.nr_sequencia nr_seq_conta_resumo,									' || pls_util_pck.enter_w ||
			'		nvl(a.dt_procedimento_real, sysdate) dt_material,							' || pls_util_pck.enter_w ||
			'		nvl(a.dt_emissao_conta, nvl(a.dt_autorizacao_conta, nvl(a.dt_entrada_conta, sysdate))) dt_conta,	' || pls_util_pck.enter_w ||
			'		a.dt_mes_competencia dt_protocolo,									' || pls_util_pck.enter_w ||
			'		a.cd_estabelecimento,											' || pls_util_pck.enter_w ||
			'		a.cd_medico_solicitante,										' || pls_util_pck.enter_w ||
			'		nvl(a.cd_guia,0) cd_guia,										' || pls_util_pck.enter_w ||
			'		a.nr_seq_segurado,											' || pls_util_pck.enter_w ||
			'		a.cd_medico_executor cd_medico_conta,									' || pls_util_pck.enter_w ||
			'		a.ie_regra_data_preco_mat_exec ie_regra_data_preco_mat,							' || pls_util_pck.enter_w ||
			'		a.ie_tipo_segurado											' || pls_util_pck.enter_w ||
			'	from	pls_conta_proc_v		a,									' || pls_util_pck.enter_w ||
			'		pls_conta_medica_resumo		b,									' || pls_util_pck.enter_w ||
			'		pls_lote_pagamento		c									' || pls_util_pck.enter_w ||
			'	where	a.nr_seq_conta	= b.nr_seq_conta									' || pls_util_pck.enter_w ||
			'	and	a.nr_sequencia 	= b.nr_seq_conta_proc									' || pls_util_pck.enter_w ||
			'	and	c.nr_sequencia	= b.nr_seq_lote_pgto									' || pls_util_pck.enter_w ||
			'	and	b.ie_situacao	= ''A''											' || pls_util_pck.enter_w ||
			'	and	b.ie_tipo_item	!= ''I''										' ||  
				ds_restricao_w													  || 
			--	ds_restricao_data_r_w												  || 				
				ds_restricao_proc_w												  || 
				ds_restricao_res_w												  || pls_util_pck.enter_w ||
			'	union all													' || pls_util_pck.enter_w ||
			'	select	''RM'' ie_proc_mat,											' || pls_util_pck.enter_w ||
			'		a.nr_sequencia nr_seq_item,										' || pls_util_pck.enter_w ||
			'		a.nr_seq_material,											' || pls_util_pck.enter_w ||
			'		a.nr_seq_conta,												' || pls_util_pck.enter_w ||
			'		b.nr_sequencia nr_seq_conta_resumo,									' || pls_util_pck.enter_w ||
			'		nvl(a.dt_atendimento_real, sysdate) dt_material,							' || pls_util_pck.enter_w ||
			'		nvl(a.dt_emissao_conta, nvl(a.dt_autorizacao_conta, nvl(a.dt_entrada_conta, sysdate))) dt_conta,	' || pls_util_pck.enter_w ||
			'		a.dt_mes_competencia dt_protocolo,									' || pls_util_pck.enter_w ||
			'		a.cd_estabelecimento,											' || pls_util_pck.enter_w ||
			'		a.cd_medico_solicitante,										' || pls_util_pck.enter_w ||
			'		nvl(a.cd_guia,0) cd_guia,										' || pls_util_pck.enter_w ||
			'		a.nr_seq_segurado,											' || pls_util_pck.enter_w ||
			'		a.cd_medico_executor cd_medico_conta,									' || pls_util_pck.enter_w ||
			'		a.ie_regra_data_preco_mat_exec ie_regra_data_preco_mat,							' || pls_util_pck.enter_w ||
			'		a.ie_tipo_segurado											' || pls_util_pck.enter_w ||
			'	from	pls_conta_mat_v			a,									' || pls_util_pck.enter_w ||
			'		pls_conta_medica_resumo		b,									' || pls_util_pck.enter_w ||
			'		pls_lote_pagamento		c									' || pls_util_pck.enter_w ||
			'	where	a.nr_seq_conta	= b.nr_seq_conta									' || pls_util_pck.enter_w ||
			'	and	a.nr_sequencia 	= b.nr_seq_conta_mat									' || pls_util_pck.enter_w ||
			'	and	c.nr_sequencia	= b.nr_seq_lote_pgto									' || pls_util_pck.enter_w ||
			'	and	b.ie_situacao	= ''A''											' || pls_util_pck.enter_w ||
			'	and	b.ie_tipo_item	!= ''I''										' || 
				ds_restricao_w													  || 
			--	ds_restricao_data_r_w												  || 
				ds_restricao_mat_w												  ||
				ds_restricao_res_w;	
	
	valor_bind_w := sql_pck.executa_sql_cursor(ds_sql_w, valor_bind_w);
	loop
		fetch 	cursor_w
		into 	ie_proc_mat_w, nr_seq_item_w, nr_seq_material_w, nr_seq_conta_w, nr_seq_conta_resumo_w, dt_material_w, dt_conta_w, dt_protocolo_w, 
			cd_estabelecimento_w, cd_medico_solicitante_w, cd_guia_w, nr_seq_segurado_w, cd_medico_conta_w, ie_regra_data_preco_mat_w;
		EXIT WHEN NOT FOUND; /* apply on cursor_w */	
		
		ie_estrut_mat_w	:= 'S';
		
		if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then
			select	max(ie_tipo_segurado)
			into STRICT	ie_tipo_segurado_w
			from	pls_segurado
			where	nr_sequencia	= nr_seq_segurado_w;
			
			if (dados_regra_w.ie_tipo_segurado <> ie_tipo_segurado_w) then
				goto final;
			end if;

			select	max(i.ie_tipo_contrato)
			into STRICT	ie_tipo_contrato_w
			from	pls_intercambio		i,
				pls_contrato_pagador	c,
				pls_segurado		s
			where	i.nr_sequencia	= c.nr_seq_pagador_intercambio
			and	c.nr_sequencia	= s.nr_seq_pagador
			and	s.nr_sequencia	= nr_seq_segurado_w;
			
			if (dados_regra_w.ie_tipo_contrato <> ie_tipo_contrato_w) then
				goto final;
			end if;
		end if;		
	
		if (dados_regra_w.ie_prestador_solic IS NOT NULL AND dados_regra_w.ie_prestador_solic::text <> '') then				
			if (ie_proc_mat_w in ('P','RP')) then -- Procedimentos 				
				select	max(b.nr_seq_prestador)
				into STRICT	nr_seq_prestador_solic_w
				from	pls_conta_proc_v	a,
					pls_prestador_medico	b,
					pls_prestador		c
				where	a.cd_medico_solicitante	= b.cd_medico
				and	b.nr_seq_prestador	= c.nr_sequencia
				and	c.cd_estabelecimento	= cd_estabelecimento_w
				and	a.nr_sequencia		= nr_seq_item_w
				and	b.ie_situacao		= 'A'
				and	trunc(a.dt_procedimento,'dd') between trunc(coalesce(b.dt_inclusao,a.dt_procedimento),'dd') and trunc(coalesce(b.dt_exclusao,a.dt_procedimento),'dd');
			
			elsif (ie_proc_mat_w in ('M','RM')) then -- Materiais 
				if (ie_regra_data_preco_mat_w	= 'E') then
					dt_preco_w	:= dt_material_w;
				elsif (ie_regra_data_preco_mat_w	= 'X') then
					dt_preco_w	:= dt_conta_w;
				elsif (ie_regra_data_preco_mat_w	= 'P') then
					dt_preco_w	:= dt_protocolo_w;
				end if;
				
				begin
				select	b.nr_seq_prestador
				into STRICT	nr_seq_prestador_solic_w
				from	pls_prestador_medico	b,
					pls_prestador		c
				where	b.nr_seq_prestador	= c.nr_sequencia
				and	c.cd_estabelecimento	= cd_estabelecimento_w
				and	b.cd_medico		= cd_medico_solicitante_w
				and	b.ie_situacao		= 'A'
				and	trunc(dt_preco_w,'dd') between trunc(coalesce(b.dt_inclusao,dt_preco_w),'dd') and trunc(coalesce(b.dt_exclusao,dt_preco_w),'dd');
				exception
				when others then
					nr_seq_prestador_solic_w := null;
				end;
				
				if (coalesce(nr_seq_prestador_solic_w,0) = 0) then
					begin
					select	cd_medico_solicitante
					into STRICT	cd_solic_w
					from	pls_guia_plano
					where	cd_guia		= cd_guia_w
					and	nr_seq_segurado = nr_seq_segurado_w;
					exception
					when others then
						cd_solic_w := null;
					end;
				
					begin
					select	nr_seq_prestador
					into STRICT	nr_seq_prestador_solic_w
					from	pls_prestador_medico	a
					where	ie_situacao		= 'A'
					and	cd_medico		= cd_solic_w
					and	trunc(dt_preco_w,'dd') between trunc(coalesce(dt_inclusao,dt_preco_w),'dd') and trunc(coalesce(dt_exclusao,dt_preco_w),'dd');
					exception
					when others then
						nr_seq_prestador_solic_w := null;
					end;
				end if;
			end if;
			
			if (coalesce(nr_seq_prestador_solic_w,0) > 0) then			
				begin
				select	CASE WHEN ie_tipo_relacao='C' THEN 1 WHEN ie_tipo_relacao='I' THEN 3 WHEN ie_tipo_relacao='D' THEN 3 WHEN ie_tipo_relacao='F' THEN 3 WHEN ie_tipo_relacao='P' THEN 2 END
				into STRICT	ie_cooperado_solic_w
				from	pls_prestador
				where	nr_sequencia  = nr_seq_prestador_solic_w;
				exception
				when others then
					ie_cooperado_solic_w	:= '';
				end;
				
				if (dados_regra_w.ie_prestador_solic <> ie_cooperado_solic_w) then
					goto final;
				end if;
			end if;			
		end if;		
		
		if (dados_regra_w.ie_medico_solic IS NOT NULL AND dados_regra_w.ie_medico_solic::text <> '') then		
			-- aaschlote 10/07/2012 - Verificar se o cooperado está ativo pela data do procedimento e não a regra do prestador
			ie_medico_solic_coope_w	:= 'N';
			
			if (cd_medico_solicitante_w IS NOT NULL AND cd_medico_solicitante_w::text <> '') then
				ie_medico_solic_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_solicitante_w, dt_material_w, null);
			end if;
			
			if (ie_medico_solic_coope_w = 'S') then
				ie_medico_solic_coope_w	:= 'C'; -- Caso ele não for cooperado a function já retorna N
			end if;
			
			if (dados_regra_w.ie_medico_solic <> ie_medico_solic_coope_w) then
				goto final;
			end if;
		end if;
			
		if (dados_regra_w.ie_medico_executor IS NOT NULL AND dados_regra_w.ie_medico_executor::text <> '') then					
			-- aaschlote 10/07/2012 - Verificar se o cooperado está ativo pela data do procedimento e não a regra do prestador

			-- aedemuth 10/02/2016 - Utilizada function para obter o médico executor da conta pois deve ser verificado nos participantes (TISS 3.02.00)
			cd_medico_conta_w := pls_obter_medico_executor(nr_seq_item_w, ie_proc_mat_w);
			
			ie_medico_exec_coope_w := 'N';
			
			if (cd_medico_conta_w IS NOT NULL AND cd_medico_conta_w::text <> '') then
				ie_medico_exec_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_conta_w, dt_material_w, null);
			end if;
			
			if (ie_medico_exec_coope_w = 'S') then
				ie_medico_exec_coope_w := 'C'; -- Caso ele não for cooperado a function já retorna N
			end if;
			
			if (dados_regra_w.ie_medico_executor <> ie_medico_exec_coope_w) then
				goto final;
			end if;		
		end if;			
		
		if (dados_regra_w.nr_seq_estrutura_mat IS NOT NULL AND dados_regra_w.nr_seq_estrutura_mat::text <> '') then
			ie_estrut_mat_w	:= pls_obter_se_mat_estrutura(nr_seq_material_w, dados_regra_w.nr_seq_estrutura_mat);
		end if;
		
		if (ie_estrut_mat_w = 'S') then
			nr_seq_regra_cooperado_w	:= dados_regra_w.nr_seq_regra;
			ie_origem_ato_w			:= dados_regra_w.ie_origem_ato;
			ie_ato_cooperado_w		:= dados_regra_w.ie_ato_cooperado;
		end if;
		
		if (ie_origem_ato_w = 'P') then		
			select	max(x.cd_ato)
			into STRICT	ie_ato_cooperado_w
			from (SELECT	cd_ato
				from	ptu_nota_servico
				where	nr_seq_conta_proc = nr_seq_item_w
				and	ie_proc_mat_w = 'P'
				
union all

				SELECT	cd_ato
				from	ptu_nota_servico
				where	nr_seq_conta_mat = nr_seq_item_w
				and	ie_proc_mat_w = 'M') x;	
		end if;
		
		if (ie_proc_mat_w in ('P','RP')) then
			p_ie_ato_cooperado_table_w(p)	:= ie_ato_cooperado_w;
			p_nr_seq_regra_coop_table_w(p)	:= nr_seq_regra_cooperado_w;
			p_nr_seq_conta_table_w(p)	:= nr_seq_conta_w;	
			p_nr_seq_item_table_w(p)	:= nr_seq_item_w;
			
			if (p >= qt_reg_transacao_w) then
				-- Atualiza as informações de ato cooperado dos procedimentos
				pls_atualiza_tabela(	p_ie_ato_cooperado_table_w,
							p_nr_seq_regra_coop_table_w,
							p_nr_seq_conta_table_w,
							p_nr_seq_item_table_w,
							'P');			
				
				-- Limpa as variáveis table
				p_ie_ato_cooperado_table_w.delete;
				p_nr_seq_regra_coop_table_w.delete;
				p_nr_seq_conta_table_w.delete;
				p_nr_seq_item_table_w.delete;
				
				p := 0;
			else
				p := p + 1;
			end if;
		elsif (ie_proc_mat_w in ('M','RM')) then		
			m_ie_ato_cooperado_table_w(m)	:= ie_ato_cooperado_w;
			m_nr_seq_regra_coop_table_w(m)	:= nr_seq_regra_cooperado_w;
			m_nr_seq_conta_table_w(m)	:= nr_seq_conta_w;	
			m_nr_seq_item_table_w(m)	:= nr_seq_item_w;
			
			if (m >= qt_reg_transacao_w) then
				-- Atualiza as informações de ato cooperado dos materiais
				pls_atualiza_tabela(	m_ie_ato_cooperado_table_w,
							m_nr_seq_regra_coop_table_w,
							m_nr_seq_conta_table_w,
							m_nr_seq_item_table_w,
							'M');			
				
				-- Limpa as variáveis table
				m_ie_ato_cooperado_table_w.delete;
				m_nr_seq_regra_coop_table_w.delete;
				m_nr_seq_conta_table_w.delete;
				m_nr_seq_item_table_w.delete;
				
				m := 0;
			else
				m := m + 1;
			end if;	
		end if;
		
		if (ie_proc_mat_w in ('RP','RM')) then
			if (qt_esquema_pagamento_w > 0) then
				r_ie_ato_cooperado_table_w(r)	:= ie_ato_cooperado_w;
				r_nr_seq_regra_coop_table_w(r)	:= nr_seq_regra_cooperado_w;
				r_nr_seq_conta_table_w(r)	:= nr_seq_conta_w;	
				r_nr_seq_item_table_w(r)	:= nr_seq_conta_resumo_w;
				
				if (r >= qt_reg_transacao_w) then
					-- Atualiza as informações de ato cooperado na conta médica resumo
					pls_atualiza_tabela(	r_ie_ato_cooperado_table_w,
								r_nr_seq_regra_coop_table_w,
								r_nr_seq_conta_table_w,
								r_nr_seq_item_table_w,
								'R');			
					
					-- Limpa as variáveis table
					r_ie_ato_cooperado_table_w.delete;
					r_nr_seq_regra_coop_table_w.delete;
					r_nr_seq_conta_table_w.delete;
					r_nr_seq_item_table_w.delete;
					
					r	:= 0;
				else
					r	:= r + 1;
				end if;
			end if;
		end if;
		
		<<final>>
		null;	
		
	end loop;
	close cursor_w;	
end loop;

-- Caso sobre algum registro dentro das tables, estes também devem ser atualizados
pls_atualiza_tabela(p_ie_ato_cooperado_table_w, p_nr_seq_regra_coop_table_w, p_nr_seq_conta_table_w, p_nr_seq_item_table_w, 'P');	
pls_atualiza_tabela(m_ie_ato_cooperado_table_w, m_nr_seq_regra_coop_table_w, m_nr_seq_conta_table_w, m_nr_seq_item_table_w, 'M');	
pls_atualiza_tabela(r_ie_ato_cooperado_table_w, r_nr_seq_regra_coop_table_w, r_nr_seq_conta_table_w, r_nr_seq_item_table_w, 'R');			

-- Limpa as variáveis table
p_ie_ato_cooperado_table_w.delete;
p_nr_seq_regra_coop_table_w.delete;
p_nr_seq_conta_table_w.delete;
p_nr_seq_item_table_w.delete;
m_ie_ato_cooperado_table_w.delete;
m_nr_seq_regra_coop_table_w.delete;
m_nr_seq_conta_table_w.delete;
m_nr_seq_item_table_w.delete;
r_ie_ato_cooperado_table_w.delete;
r_nr_seq_regra_coop_table_w.delete;
r_nr_seq_conta_table_w.delete;
r_nr_seq_item_table_w.delete;

ds_erro_p := null;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_ato_coop_prot ( nr_seq_protocolo_p bigint, dt_referencia_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text) FROM PUBLIC;

