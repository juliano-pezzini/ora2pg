-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gercon_api_solic_consulta (ds_json_p text) AS $body$
DECLARE


    json_lista_w philips_json_list;
    registro_w   philips_json;

    nr_seq_id_integracao_w      GERCON_SOLIC_CONSULTA.NR_SEQ_ID_INTEGRACAO%TYPE;
    nr_sequencia_w              GERCON_SOLIC_CONSULTA. NR_SEQUENCIA%TYPE;
    nm_pessoa_fisica_w          GERCON_SOLIC_CONSULTA.NM_PESSOA_FISICA%TYPE;
    nr_cartao_nac_sus_w         GERCON_SOLIC_CONSULTA.NR_CARTAO_NAC_SUS%TYPE;
    nr_telefone_paciente_w      GERCON_SOLIC_CONSULTA.NR_TELEFONE_PACIENTE%TYPE;
    nr_cpf_w                    GERCON_SOLIC_CONSULTA.NR_CPF%TYPE;
    dt_nascimento_w             GERCON_SOLIC_CONSULTA.DT_NASCIMENTO%TYPE;
    ie_sexo_w                   GERCON_SOLIC_CONSULTA.IE_SEXO%TYPE;
    ie_estado_civil_w           GERCON_SOLIC_CONSULTA.IE_ESTADO_CIVIL%TYPE;
    nr_seq_cor_pele_w           GERCON_SOLIC_CONSULTA.NR_SEQ_COR_PELE%TYPE;
    cd_nacionalidade_w          GERCON_SOLIC_CONSULTA.CD_NACIONALIDADE%TYPE;
    ds_bairro_w                 GERCON_SOLIC_CONSULTA.DS_BAIRRO%TYPE;
    cd_cep_w                    GERCON_SOLIC_CONSULTA.CD_CEP%TYPE;
    ds_endereco_w               GERCON_SOLIC_CONSULTA.DS_ENDERECO%TYPE;
    nr_endereco_w               GERCON_SOLIC_CONSULTA.NR_ENDERECO%TYPE;
    ds_complemento_w            GERCON_SOLIC_CONSULTA.DS_COMPLEMENTO%TYPE;
    ds_municipio_w              GERCON_SOLIC_CONSULTA.DS_MUNICIPIO%TYPE;
    nm_contato_w                GERCON_SOLIC_CONSULTA.NM_CONTATO%TYPE;
    cd_agenda_externa_w         GERCON_SOLIC_CONSULTA.CD_AGENDA_EXTERNA%TYPE;
    nr_seq_sistema_integracao_w GERCON_SOLIC_CONSULTA.NR_SEQ_SISTEMA_INTEGRACAO%TYPE;
    ie_classif_agenda_w         GERCON_SOLIC_CONSULTA.IE_CLASSIF_AGENDA%TYPE;
    dt_agenda_w                 GERCON_SOLIC_CONSULTA.DT_AGENDA%TYPE;
    nr_minuto_duracao_w         GERCON_SOLIC_CONSULTA.NR_MINUTO_DURACAO%TYPE;
    cd_medico_w                 GERCON_SOLIC_CONSULTA.CD_MEDICO%TYPE;
    nr_seq_sala_w               GERCON_SOLIC_CONSULTA.NR_SEQ_SALA%TYPE;
    cd_cid_w                    GERCON_SOLIC_CONSULTA.CD_CID%TYPE;
    nm_medico_w                 GERCON_SOLIC_CONSULTA.NM_MEDICO%TYPE;
    cd_cns_w                    GERCON_SOLIC_CONSULTA.CD_CNS%TYPE;
    nm_fantasia_estab_w         GERCON_SOLIC_CONSULTA.NM_FANTASIA_ESTAB%TYPE;
    cd_especialidade_w          GERCON_SOLIC_CONSULTA.CD_ESPECIALIDADE%TYPE;
    ds_especialidade_w          GERCON_SOLIC_CONSULTA.DS_ESPECIALIDADE%TYPE;
    ds_doenca_cid_w             GERCON_SOLIC_CONSULTA.DS_DOENCA_CID%TYPE;
    nr_seq_gercon_w             GERCON_SOLIC_CONSULTA.NR_SEQ_GERCON%TYPE;
    ie_situacao_agenda_w        GERCON_SOLIC_CONSULTA.IE_SITUACAO_AGENDA%TYPE;

    -----
    nr_secondsday_w      bigint;
    dt_fim_agenda_w      timestamp;
    cd_cpf_medico_w      varchar(11);
    ds_seq_cor_pele_w    varchar(2000);
    ds_nacionalidade_w   varchar(2000);
    ds_estado_civil_w    varchar(255);
    ds_sexo_w            varchar(255);
    ds_situacao_agenda_w varchar(255);
    ie_existe            bigint;
    ds_classif_agenda_w  varchar(255);
    ds_seq_sala_w        varchar(2000);
    nr_insert_w          bigint := 0;

BEGIN
    json_lista_w := philips_json_list(ds_json_p);
    FOR i IN 1 .. json_lista_w.count LOOP
        nm_pessoa_fisica_w          := NULL;
        nr_cartao_nac_sus_w         := NULL;
        nr_telefone_paciente_w      := NULL;
        nr_cpf_w                    := NULL;
        dt_nascimento_w             := NULL;
        ie_sexo_w                   := NULL;
        ie_estado_civil_w           := NULL;
        nr_seq_cor_pele_w           := NULL;
        cd_nacionalidade_w          := NULL;
        ds_bairro_w                 := NULL;
        cd_cep_w                    := NULL;
        ds_endereco_w               := NULL;
        nr_endereco_w               := NULL;
        ds_complemento_w            := NULL;
        ds_municipio_w              := NULL;
        nm_contato_w                := NULL;
        cd_agenda_externa_w         := NULL;
        nr_seq_sistema_integracao_w := NULL;
        ie_classif_agenda_w         := NULL;
        dt_agenda_w                 := NULL;
        nr_minuto_duracao_w         := NULL;
        cd_medico_w                 := NULL;
        nr_seq_sala_w               := NULL;
        cd_cid_w                    := NULL;
        nm_medico_w                 := NULL;
        cd_cns_w                    := NULL;
        nm_fantasia_estab_w         := NULL;
        cd_especialidade_w          := NULL;
        ds_especialidade_w          := NULL;
        ds_doenca_cid_w             := NULL;
        nr_seq_gercon_w             := NULL;
        ie_situacao_agenda_w        := NULL;

        registro_w := philips_json(json_lista_w.get(i));
        -------------------------------------
        IF registro_w.exist('id') THEN
            nr_seq_id_integracao_w := registro_w.get['id'].get_number;
            SELECT COUNT(*)
              INTO STRICT ie_existe
              FROM gercon_solic_consulta gsc
             WHERE gsc.nr_seq_id_integracao = nr_seq_id_integracao_w;
        END IF;

        IF ie_existe = 0 THEN

            IF registro_w.exist('numeroCMCE') THEN
                nr_seq_sistema_integracao_w := registro_w.get['numeroCMCE'].get_string;
            END IF;

            IF registro_w.exist('idAgenda') THEN
                cd_agenda_externa_w := registro_w.get['idAgenda'].get_string;
            END IF;

            IF registro_w.exist('tipoConsulta') THEN
                ds_classif_agenda_w := registro_w.get['tipoConsulta'].get_string;
                ie_classif_agenda_w := substr(ds_classif_agenda_w, 1, 1);

            END IF;
            IF registro_w.exist('dataHoraInicio') THEN
                BEGIN
                    nr_secondsday_w     := trunc((registro_w.get['dataHoraInicio'].get_number)::numeric  / 1000);
                    dt_agenda_w := to_date('1970-01-01', 'YYYY-MM-DD') + numtodsinterval(nr_secondsday_w, 'SECOND');
                EXCEPTION
                    WHEN OTHERS THEN
                        dt_agenda_w := NULL;
                        RAISE EXCEPTION '%', ' - dataHoraInicio - Retorno: ' || registro_w.get('dataHoraInicio')
                                                .get_number || '   ID: ' || nr_seq_sistema_integracao_w || ' Erro:' ||
                                                 SQLERRM USING ERRCODE = '45150';

                END;

            END IF;
            IF registro_w.exist('dataHoraFim') THEN
                BEGIN
                    nr_secondsday_w     := trunc((registro_w.get['dataHoraFim'].get_number)::numeric  / 1000);
                    dt_fim_agenda_w     := to_date('1970-01-01', 'YYYY-MM-DD') + numtodsinterval(nr_secondsday_w, 'SECOND');
                    nr_minuto_duracao_w := dt_fim_agenda_w - dt_agenda_w;
                EXCEPTION
                    WHEN OTHERS THEN
                        nr_minuto_duracao_w := NULL;
                        RAISE EXCEPTION '%', ' - dataHoraFim - Retorno: ' || registro_w.get('dataHoraFim')
                                                .get_number || '   ID: ' || nr_seq_sistema_integracao_w || ' Erro:' ||
                                                 SQLERRM USING ERRCODE = '45150';
                END;
            END IF;
            /*        IF registro_w.exist('sequencia') THEN
                        nr_sequencia_w := registro_w.get('sequencia').get_string;
                    END IF;
            */
            IF registro_w.exist('nomeMedico') THEN
                nm_medico_w := registro_w.get['nomeMedico'].get_string;

            END IF;
            IF registro_w.exist('cpf') THEN
                cd_cpf_medico_w := registro_w.get['cpf'].get_string;
                SELECT MAX(pf.cd_pessoa_fisica)
                  INTO STRICT cd_medico_w
                  FROM pessoa_fisica pf
                 WHERE pf.nr_cpf = cd_cpf_medico_w;
            END IF;
            IF registro_w.exist('sala') THEN
                ds_seq_sala_w := upper(registro_w.get['sala'].get_string);

                SELECT MAX(nr_sequencia)
                  INTO STRICT nr_seq_sala_w
                  FROM agenda_sala_consulta ac
                 WHERE upper(ac.ds_sala) = ds_seq_sala_w;

            END IF;
            IF registro_w.exist('cartaoSUS') THEN
                nr_cartao_nac_sus_w := registro_w.get['cartaoSUS'].get_string;
            END IF;
            IF registro_w.exist('cpfPaciente') THEN
                nr_cpf_w := registro_w.get['cpfPaciente'].get_string;
            END IF;
            IF registro_w.exist('dataNascimentoPaciente') THEN
                nr_secondsday_w := trunc((registro_w.get['dataNascimentoPaciente'].get_number)::numeric  / 1000);
                dt_nascimento_w := to_date('1970-01-01', 'YYYY-MM-DD') + numtodsinterval(nr_secondsday_w, 'SECOND');
            END IF;
            IF registro_w.exist('nomeMaePaciente') THEN
                nm_contato_w := registro_w.get['nomeMaePaciente'].get_string;
            END IF;
            IF registro_w.exist('bairroPaciente') THEN
                ds_bairro_w := registro_w.get['bairroPaciente'].get_string;
            END IF;
            IF registro_w.exist('cepPaciente') THEN
                cd_cep_w := registro_w.get['cepPaciente'].get_string;
            END IF;
            IF registro_w.exist('sexoPaciente') THEN
                ds_sexo_w := registro_w.get['sexoPaciente'].get_string;

                ie_sexo_w := substr(ds_sexo_w, 1, 1);
            END IF;

            IF registro_w.exist('estadoCivilPaciente') THEN
                ds_estado_civil_w := registro_w.get['estadoCivilPaciente'].get_string;

                ie_estado_civil_w := substr(ds_estado_civil_w, 1, 1);

            END IF;
            IF registro_w.exist('racaCorPaciente') THEN
                ds_seq_cor_pele_w := registro_w.get['racaCorPaciente'].get_string;

                SELECT MAX(c.nr_sequencia)
                  INTO STRICT nr_seq_cor_pele_w
                  FROM cor_pele c
                 WHERE upper(c.ds_cor_pele) = upper(ds_seq_cor_pele_w)
                   AND c.ie_situacao = 'A';
            END IF;

            IF registro_w.exist('nacionalidadePaciente') THEN
                ds_nacionalidade_w := registro_w.get['nacionalidadePaciente'].get_string;
                SELECT MAX(n.cd_nacionalidade)
                  INTO STRICT cd_nacionalidade_w
                  FROM nacionalidade n
                 WHERE upper(n.ds_nacionalidade) = upper(ds_nacionalidade_w);
            END IF;

            IF registro_w.exist('telefonesPaciente') THEN
                nr_telefone_paciente_w := substr(registro_w.get['telefonesPaciente'].get_string, 1, 40);
            END IF;

            IF registro_w.exist('logradouro') THEN
                ds_endereco_w := registro_w.get['logradouro'].get_string;
            END IF;

            IF registro_w.exist('numero') THEN
                BEGIN
                    nr_endereco_w := registro_w.get['numero'].get_string;
                EXCEPTION
                    WHEN OTHERS THEN
                        nr_endereco_w := NULL;
                END;
            END IF;

            IF registro_w.exist('complemento') THEN
                ds_complemento_w := registro_w.get['complemento'].get_string;
            END IF;

            IF registro_w.exist('municipio') THEN
                ds_municipio_w := registro_w.get['municipio'].get_string;
            END IF;

            IF registro_w.exist('codigoCnesEstabelecimentoSaude') THEN
                cd_cns_w := registro_w.get['codigoCnesEstabelecimentoSaude'].get_string;
            END IF;

            IF registro_w.exist('nomeEstabelecimentoSaude') THEN
                nm_fantasia_estab_w := registro_w.get['nomeEstabelecimentoSaude'].get_string;
            END IF;

            IF registro_w.exist('codigoEspecialidade') THEN
                cd_especialidade_w := registro_w.get['codigoEspecialidade'].get_string;
            END IF;

            IF registro_w.exist('descricaoEspecialidade') THEN
                ds_especialidade_w := registro_w.get['descricaoEspecialidade'].get_string;
            END IF;

            IF registro_w.exist('codigoCidPrincipal') THEN
                cd_cid_w := registro_w.get['codigoCidPrincipal'].get_string;
            END IF;

            IF registro_w.exist('descricaoCidPrincipal') THEN
                ds_doenca_cid_w := registro_w.get['descricaoCidPrincipal'].get_string;
            END IF;

            IF registro_w.exist('situacaoAgenda') THEN
                ds_situacao_agenda_w := registro_w.get['situacaoAgenda'].get_string;
                ie_situacao_agenda_w := substr(ds_situacao_agenda_w, 1, 1);
            END IF;

            IF registro_w.exist('nomePaciente') THEN
                nm_pessoa_fisica_w := registro_w.get['nomePaciente'].get_string;
            END IF;

            ------
            SELECT nextval('gercon_solic_consulta_seq') INTO STRICT nr_sequencia_w;

            INSERT INTO gercon_solic_consulta(nr_sequencia,
                 nm_pessoa_fisica,
                 nr_cartao_nac_sus,
                 nr_telefone_paciente,
                 nr_cpf,
                 dt_nascimento,
                 ie_sexo,
                 ie_estado_civil,
                 nr_seq_cor_pele,
                 cd_nacionalidade,
                 ds_bairro,
                 cd_cep,
                 ds_endereco,
                 nr_endereco,
                 ds_complemento,
                 ds_municipio,
                 nm_contato,
                 cd_agenda_externa,
                 nr_seq_sistema_integracao,
                 ie_classif_agenda,
                 dt_agenda,
                 nr_minuto_duracao,
                 cd_medico,
                 nr_seq_sala,
                 cd_cid,
                 nm_medico,
                 cd_cns,
                 nm_fantasia_estab,
                 cd_especialidade,
                 ds_especialidade,
                 ds_doenca_cid,
                 nr_seq_gercon,
                 ie_situacao_agenda,
                 nr_seq_id_integracao)

            VALUES (nr_sequencia_w,
                 nm_pessoa_fisica_w,
                 nr_cartao_nac_sus_w,
                 nr_telefone_paciente_w,
                 nr_cpf_w,
                 dt_nascimento_w,
                 ie_sexo_w,
                 ie_estado_civil_w,
                 nr_seq_cor_pele_w,
                 cd_nacionalidade_w,
                 ds_bairro_w,
                 cd_cep_w,
                 ds_endereco_w,
                 nr_endereco_w,
                 ds_complemento_w,
                 ds_municipio_w,
                 nm_contato_w,
                 cd_agenda_externa_w,
                 nr_seq_sistema_integracao_w,
                 ie_classif_agenda_w,
                 dt_agenda_w,
                 nr_minuto_duracao_w,
                 cd_medico_w,
                 nr_seq_sala_w,
                 cd_cid_w,
                 nm_medico_w,
                 cd_cns_w,
                 nm_fantasia_estab_w,
                 cd_especialidade_w,
                 ds_especialidade_w,
                 ds_doenca_cid_w,
                 nr_seq_gercon_w,
                 ie_situacao_agenda_w,
                 nr_seq_id_integracao_w);
      nr_insert_w := nr_insert_w +1;
        END IF;
        IF nr_insert_w >= 100 THEN
             COMMIT;
            nr_insert_w := 0;
        END IF;
    END LOOP;
    COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gercon_api_solic_consulta (ds_json_p text) FROM PUBLIC;

