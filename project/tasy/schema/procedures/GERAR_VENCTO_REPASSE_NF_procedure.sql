-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_vencto_repasse_nf ( nr_sequencia_p bigint, nr_repasse_terceiro_p text, ie_gerar_vencimento_p text, nm_usuario_p text) AS $body$
DECLARE


cd_estabelecimento_w		smallint;
dt_emissao_w			timestamp;
dt_entrada_saida_w		timestamp;
cd_cgc_emitente_w		varchar(14);
cd_serie_nf_w			nota_fiscal.cd_serie_nf%type;
nr_nota_fiscal_w		varchar(255);
nr_sequencia_nf_w		bigint;
vl_total_nota_w			double precision;
vl_mercadoria_w			double precision;
qt_venc_w			integer;
cd_condicao_pagamento_w		bigint;
ie_forma_pagamento_w		smallint;
qt_vencimentos_w		integer;
ds_vencimentos_w		varchar(2000);
tx_fracao_parcela_w		double precision;
dt_vencimento_w			timestamp;
vl_vencimento_w			double precision	:= 0;
vl_base_venc_w			double precision;
ie_data_base_venc_nota_w	varchar(1);
dt_venc_repasse_w		timestamp;
ie_nf_consignada_w		varchar(1);
ie_data_base_venc_nf_consig_w	varchar(1);

C01 CURSOR FOR
SELECT	tx_fracao_parcela
from	parcela
where	cd_condicao_pagamento = cd_condicao_pagamento_w;

C02 CURSOR FOR
	SELECT	dt_vencimento
	from	repasse_terceiro_venc
	where	nr_repasse_terceiro = nr_repasse_terceiro_p;


BEGIN

select	cd_estabelecimento,
	dt_emissao,
	dt_entrada_saida,
	cd_cgc_emitente,
	cd_serie_nf,
	nr_nota_fiscal,
	nr_sequencia_nf,
	vl_total_nota,
	vl_mercadoria,
	obter_se_nota_consignada(nr_sequencia)
into STRICT	cd_estabelecimento_w,
	dt_emissao_w,
	dt_entrada_saida_w,
	cd_cgc_emitente_w,
	cd_serie_nf_w,
	nr_nota_fiscal_w,
	nr_sequencia_nf_w,
	vl_total_nota_w,
	vl_mercadoria_w,
	ie_nf_consignada_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

select	coalesce(max(ie_data_base_venc_nota),'E'),
	coalesce(max(ie_data_base_venc_nf_consig),'E')
into STRICT	ie_data_base_venc_nota_w,
	ie_data_base_venc_nf_consig_w
from	parametro_compras
where	cd_estabelecimento = cd_estabelecimento_w;

select	count(*)
into STRICT	qt_venc_w
from	nota_fiscal_venc
where	cd_estabelecimento = cd_estabelecimento_w
and	cd_cgc_emitente    = cd_cgc_emitente_w
and	cd_serie_nf        = cd_serie_nf_w
and	nr_nota_fiscal     = nr_nota_fiscal_w
and	nr_sequencia_nf    = nr_sequencia_nf_w;

if	(ie_data_base_venc_nota_w = 'N' AND ie_nf_consignada_w = 'N') or
	(ie_nf_consignada_w = 'S' AND ie_data_base_venc_nf_consig_w = 'N') then
	dt_emissao_w := dt_entrada_saida_w;
end if;

if (ie_gerar_vencimento_p = 'CR') then
	begin
	select	cd_condicao_pagamento
	into STRICT	cd_condicao_pagamento_w
	from	Repasse_Terceiro
	where	nr_repasse_terceiro = nr_repasse_terceiro_p;
	if (coalesce(cd_condicao_pagamento_w::text, '') = '') then
		/*(-20011, 'O repasse ' || nr_repasse_terceiro_p || ' não possui condição de pagamento informada !');*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(239250,'NR_REPASSE_TERCEIRO=' || nr_repasse_terceiro_p);
	end if;

	select	ie_forma_pagamento
	into STRICT	ie_forma_pagamento_w
	from	condicao_pagamento
	where	cd_condicao_pagamento = cd_condicao_pagamento_w;

	update	nota_fiscal
	set	cd_condicao_pagamento = cd_condicao_pagamento_w
	where	nr_sequencia = nr_sequencia_p;

	if (qt_venc_w = 0) then
		begin
		delete	from nota_fiscal_venc
		where	nr_sequencia = nr_sequencia_p;

		if (ie_forma_pagamento_w = 1) then
			insert into nota_fiscal_venc(
				nr_sequencia,
				cd_estabelecimento,
				cd_cgc_emitente,
				cd_serie_nf,
				nr_nota_fiscal,
				nr_sequencia_nf,
				dt_vencimento,
				vl_vencimento,
				dt_atualizacao,
				nm_usuario,
				vl_base_venc,
				ie_origem)
			Values (nr_sequencia_p,
				cd_estabelecimento_w,
				cd_cgc_emitente_w,
				cd_serie_nf_w,
				nr_nota_fiscal_w,
				nr_sequencia_nf_w,
				dt_emissao_w,
				vl_total_nota_w,
				clock_timestamp(),
				nm_usuario_p,
				vl_mercadoria_w,
				'N');
		else
			SELECT * FROM Calcular_Vencimento(
				cd_estabelecimento_w, cd_condicao_pagamento_w, dt_emissao_w, qt_vencimentos_w, ds_vencimentos_w) INTO STRICT qt_vencimentos_w, ds_vencimentos_w;

			OPEN C01;
			LOOP
			FETCH C01 INTO
				tx_fracao_parcela_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin
				dt_vencimento_w	 := To_Date(substr(ds_vencimentos_w,1,10),'dd/mm/yyyy');
				ds_vencimentos_w := substr(ds_vencimentos_w,12, length(ds_vencimentos_w));
				vl_vencimento_w	 := dividir((vl_total_nota_w * tx_fracao_parcela_w),100);
				vl_base_venc_w	 := dividir((vl_mercadoria_w * tx_fracao_parcela_w),100);

				insert into nota_fiscal_venc(
					nr_sequencia,
					cd_estabelecimento,
					cd_cgc_emitente,
					cd_serie_nf,
					nr_nota_fiscal,
					nr_sequencia_nf,
					dt_vencimento,
					vl_vencimento,
					dt_atualizacao,
					nm_usuario,
					vl_base_venc,
					ie_origem)
				Values (nr_sequencia_p,
					cd_estabelecimento_w,
					cd_cgc_emitente_w,
					cd_serie_nf_w,
					nr_nota_fiscal_w,
					nr_sequencia_nf_w,
					dt_vencimento_w,
					vl_vencimento_w,
					clock_timestamp(),
					nm_usuario_p,
					vl_base_venc_w,
					'N');
				commit;
				end;
			END LOOP;
			close c01;
		end if;
		end;
	end if;
	end;
elsif (ie_gerar_vencimento_p = 'VR') then
	begin

	update	nota_fiscal
	set	cd_condicao_pagamento = 1
	where	nr_sequencia = nr_sequencia_p;

	if (qt_venc_w = 0) then
		begin
		delete	from nota_fiscal_venc
		where	nr_sequencia = nr_sequencia_p;

		OPEN C02;
		LOOP
		FETCH C02 INTO
			dt_venc_repasse_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
			insert into nota_fiscal_venc(
				nr_sequencia,
				cd_estabelecimento,
				cd_cgc_emitente,
				cd_serie_nf,
				nr_nota_fiscal,
				nr_sequencia_nf,
				dt_vencimento,
				vl_vencimento,
				dt_atualizacao,
				nm_usuario,
				vl_base_venc,
				ie_origem)
			Values (nr_sequencia_p,
				cd_estabelecimento_w,
				cd_cgc_emitente_w,
				cd_serie_nf_w,
				nr_nota_fiscal_w,
				nr_sequencia_nf_w,
				dt_venc_repasse_w,
				vl_total_nota_w,
				clock_timestamp(),
				nm_usuario_p,
				vl_mercadoria_w,
				'N');
			commit;
			end;
		END LOOP;
		close c02;
		end;
	end if;
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_vencto_repasse_nf ( nr_sequencia_p bigint, nr_repasse_terceiro_p text, ie_gerar_vencimento_p text, nm_usuario_p text) FROM PUBLIC;

