-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_dados_demonst_pag ( nr_seq_lote_p pls_lote_pagamento.nr_sequencia%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Gerar registros para a geração do relatório de demonstrativo de pagamento.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [X]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
BEGIN
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then
	delete	FROM w_relat_demonstrativo_pgto
	where	dt_atualizacao_nrec < clock_timestamp() - interval '1 days';

	delete  FROM w_relat_demonstrativo_pgto
	where	nm_usuario = nm_usuario_p;

	insert into w_relat_demonstrativo_pgto(nr_sequencia,
		nr_documento,
		dt_emissao,
		dt_atualizacao,
		nm_beneficiario,
		cd_usuario_plano,
		nr_quantidade,
		cd_procedimento,
		ds_descricao,
		ds_atividade,
		vl_honorario,
		vl_custo_operacional,
		vl_filme,
		nr_opm,
		vl_glosa,
		nr_seq_evento,
		nr_seq_protocolo,
		nr_seq_prestador_pgto,
		cd_pessoa_fisica,
		ie_tipo_item,
		nr_seq_prestador_exec,
		nr_seq_lote_pgto,
		nr_seq_pag_item,
		vl_taxas,
		vl_apresentado,
		nr_seq_resumo,
		nr_seq_conta,
		vl_liberado,
		ie_tipo_despesa,
		pr_liberado,
		vl_co_original,
		vl_medico,
		vl_materiais,
		vl_taxa_adm,
		nr_seq_item,
		vl_unitario,
		vl_hm,
		vl_total,
		nm_usuario,
		ie_glosa,
		nm_usuario_nrec,
		dt_atualizacao_nrec)
	SELECT	nextval('w_relat_demonstrativo_pgto_seq'),
		nr_documento,
		dt_emissao,
		clock_timestamp(),
		nm_beneficiario,
		cd_usuario_plano,
		nr_quantidade,
		cd_procedimento,
		ds_descricao,
		ds_atividade,
		vl_honorario,
		vl_custo_operacional,
		vl_filme,
		nr_opm,
		vl_glosa,
		nr_seq_evento,
		nr_seq_protocolo,
		nr_seq_prestador_pgto,
		cd_pessoa_fisica,
		ie_tipo_item,
		nr_seq_prestador_exec,
		nr_seq_lote_pgto,
		nr_seq_pag_item,
		vl_taxas,
		vl_apresentado,
		nr_seq_resumo,
		nr_seq_conta,
		vl_liberado,
		ie_tipo_despesa,
		pr_liberado,
		vl_co_original,
		vl_medico,
		vl_materiais,
		vl_taxa_adm,
		nr_seq_item,
		vl_unitario,
		vl_hm,
		vl_total,
		nm_usuario_p,
		'N',
		nm_usuario_p,
		clock_timestamp()
	from	pls_demonstrativo_pag_v
	where	nr_seq_lote_pgto 	= nr_seq_lote_p
	and (nr_seq_prestador_pgto	= nr_seq_prestador_p or coalesce(nr_seq_prestador_p,0) = 0)
	and (vl_honorario > 0 or
		vl_custo_operacional > 0 or
		vl_filme > 0);

	insert into w_relat_demonstrativo_pgto(nr_sequencia,
		nr_documento,
		dt_emissao,
		dt_atualizacao,
		nm_beneficiario,
		cd_usuario_plano,
		nr_quantidade,
		cd_procedimento,
		ds_descricao,
		ds_atividade,
		nr_opm,
		vl_glosa,
		nr_seq_evento,
		nr_seq_protocolo,
		nr_seq_prestador_pgto,
		cd_pessoa_fisica,
		ie_tipo_item,
		nr_seq_prestador_exec,
		nr_seq_lote_pgto,
		nr_seq_pag_item,
		vl_taxas,
		vl_apresentado,
		nr_seq_resumo,
		nr_seq_conta,
		nr_seq_conta_proc,
		ie_glosa,
		nm_usuario,
		qt_procedimento,
		qt_procedimento_imp,
		nm_usuario_nrec,
		dt_atualizacao_nrec)
	SELECT	nextval('w_relat_demonstrativo_pgto_seq'),
		nr_documento,
		dt_emissao,
		clock_timestamp(),
		nm_beneficiario,
		cd_usuario_plano,
		nr_quantidade,
		cd_procedimento,
		ds_descricao,
		ds_atividade,
		nr_opm,
		vl_glosa,
		nr_seq_evento,
		nr_seq_protocolo,
		nr_seq_prestador_pgto,
		cd_pessoa_fisica,
		ie_tipo_item,
		nr_seq_prestador_exec,
		nr_seq_lote_pgto,
		nr_seq_pag_item,
		vl_taxas,
		vl_apresentado,
		nr_seq_resumo,
		nr_seq_conta,
		nr_seq_conta_proc,
		'S',
		nm_usuario_p,
		qt_procedimento,
		qt_procedimento_imp,
		nm_usuario_p,
		clock_timestamp()
	from	pls_demonst_pagamento_glosa_v
	where	nr_seq_lote_pgto 	= nr_seq_lote_p
	and (nr_seq_prestador_pgto	= nr_seq_prestador_p or coalesce(nr_seq_prestador_p,0) = 0);

	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_dados_demonst_pag ( nr_seq_lote_p pls_lote_pagamento.nr_sequencia%type, nr_seq_prestador_p pls_prestador.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

