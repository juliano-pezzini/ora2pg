-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE registrar_sv_pepo ( nr_cirurgia_p bigint, nr_atendimento_p bigint, dt_sinal_vital_p timestamp, nr_seq_sinal_vital_p bigint, nr_seq_monit_resp_p bigint, nr_seq_analisador_p bigint, nr_seq_item_p bigint, ds_valor_item_p text, nm_usuario_p text, nr_seq_pepo_p bigint, nm_tabela_p INOUT text, nr_sequencia_p INOUT bigint, dt_valor_item_p timestamp default null, ie_liberar_html_p text default 'N', nr_atend_monit_hemod_p bigint default 0, nr_atend_analgesia_p bigint default 0) AS $body$
DECLARE


				
nm_tabela_w		varchar(50);
nm_atributo_w		varchar(50);
ie_tipo_atributo_w	varchar(10);
qt_registro_w		bigint;
ds_comando_w		varchar(2000);
ds_atrib_insert_w	varchar(2000);
cd_pessoa_fisica_w	varchar(10);
cd_estabelecimento_w	smallint;
ie_liberar_sv_w		varchar(1);
dt_monitorizacao_w	timestamp;
ie_pam_w		varchar(1);
nr_sequencia_w		bigint	:= 0;
valor_bind_w	sql_pck.t_dado_bind;


BEGIN
begin
select	max(cd_estabelecimento)
into STRICT	cd_estabelecimento_w
from 	cirurgia
where	nr_cirurgia	=	nr_cirurgia_p;

/* OS 128118
select	nvl(max(ie_lib_sinal_vital),'N')  
into	ie_liberar_sv_w
from 	parametro_medico 
where 	cd_estabelecimento = cd_estabelecimento_w;*/
ie_liberar_sv_w := obter_param_usuario(872, 72, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_liberar_sv_w);
ie_pam_w := obter_param_usuario(872, 215, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_pam_w);

select	nm_tabela,
	nm_atributo
into STRICT	nm_tabela_w,
	nm_atributo_w
from	pepo_sv
where	nr_sequencia	=	nr_seq_item_p;

select	ie_tipo_atributo
into STRICT	ie_tipo_atributo_w
from	tabela_atributo
where	nm_tabela	=	nm_tabela_w
and	nm_atributo	=	nm_atributo_w;

select	Obter_Dados_Usuario_Opcao(nm_usuario_p,'C')
into STRICT	cd_pessoa_fisica_w
;

if (nm_tabela_w = 'ATENDIMENTO_SINAL_VITAL') and ((ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') or (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> '')) then

	select	count(*)
	into STRICT	qt_registro_w
	from	atendimento_sinal_vital
	where	nr_sequencia	=	nr_seq_sinal_vital_p;

	if (qt_registro_w = 0) then
		nr_sequencia_w := nr_seq_sinal_vital_p;
		insert into atendimento_sinal_vital(
			nr_sequencia,
			nr_atendimento,
			dt_sinal_vital,
			dt_atualizacao,
			nm_usuario,
			ie_pressao,
			nr_cirurgia,
			cd_pessoa_fisica,
			dt_liberacao,
			ie_situacao,
			nr_seq_pepo)
		values (
			nr_seq_sinal_vital_p,
			nr_atendimento_p,
			coalesce(dt_sinal_vital_p,clock_timestamp()),
			clock_timestamp(),
			nm_usuario_p,
			'D',
			nr_cirurgia_p,
			cd_pessoa_fisica_w,
			CASE WHEN ie_liberar_sv_w='S' THEN clock_timestamp()  ELSE null END ,
			'A',
			nr_seq_pepo_p);
			
		commit;
	end if;

	if (ie_tipo_atributo_w = 'NUMBER') then
		--ds_atrib_insert_w := replace(ds_valor_item_p,',','.');
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,2000);
	elsif (ie_tipo_atributo_w = 'DATE') then
		--ds_atrib_insert_w := ' to_date('||chr(39)||ds_valor_item_p||chr(39)||','||chr(39)||'dd/mm/yyyy hh24:mi:ss'||chr(39)||')' ;
		ds_atrib_insert_w := substr(ds_valor_item_p,1,2000);
	elsif (ie_tipo_atributo_w = 'VARCHAR2') then
		ds_atrib_insert_w := substr(ds_valor_item_P,1,2000);
	end if;
 
	/*
	ds_comando_w	:=	' update atendimento_sinal_vital set ' || nm_atributo_w || ' = '  || ds_atrib_insert_w ||
				' where nr_sequencia = ' || to_char(nr_seq_sinal_vital_p);
					
	Exec_sql_Dinamico(nm_usuario_p, ds_comando_w);
	
	SUBSTITUI ESTAS LINHAS PELAS ABAIXO - DALCASTAGNE EM 31/03/2010
	*/

	
	--Ra ise_application_error(-20011,nm_atributo_w || '  ' || ds_atrib_insert_w);
	
	if (ie_tipo_atributo_w = 'DATE') then
		if (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> '') then
			ds_comando_w	:=	' update atendimento_sinal_vital set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
						' where nr_sequencia = :nr_sequencia ';
						
			valor_bind_w := sql_pck.bind_variable(	':nr_sequencia', nr_seq_sinal_vital_p, valor_bind_w);
			valor_bind_w := sql_pck.bind_variable(	':dt_atrib_insert_w', dt_valor_item_p, valor_bind_w, sql_pck.b_data_hora);

			valor_bind_w := sql_pck.executa_sql(ds_comando_w, valor_bind_w);
		else
			ds_comando_w	:=	' update atendimento_sinal_vital set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
						' where nr_sequencia = :nr_sequencia ';
			CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_p)||';dt_atrib_insert_w=' || ds_atrib_insert_w);
		end if;
	elsif (nm_atributo_w = 'QT_TEMP') then
		ds_atrib_insert_w := replace(ds_valor_item_p,',','.');/*A virgula deve ser somente visual, na base deve ser gravado com ponto*/
		ds_atrib_insert_w := SUBSTR(ds_atrib_insert_w,1,2000);/*porem em um update com um valor numerico sendo passado dentro de uma variavel varchar2 nao e possivel fazer isso*/
		update atendimento_sinal_vital
		set qt_temp = TO_NUMBER(ds_atrib_insert_w, '9999.99')
		where nr_sequencia = nr_seq_sinal_vital_p;
	else
		ds_comando_w	:=	' update atendimento_sinal_vital set ' || nm_atributo_w || ' = :ds_atrib_insert_w ' ||
					' where nr_sequencia = :nr_sequencia ';
		CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='||to_char(nr_seq_sinal_vital_p)||';ds_atrib_insert_w=' || ds_atrib_insert_w);		
	end if;
	
	commit;
	
	if (nr_seq_sinal_vital_p > 0) and (ie_pam_w = 'S') then
		update	atendimento_sinal_vital
		set	qt_pam = ((qt_pa_sistolica + (qt_pa_diastolica * 2)) / 3)
		where	nr_sequencia = nr_seq_sinal_vital_p
		and	coalesce(qt_pam::text, '') = ''
		and	(qt_pa_sistolica IS NOT NULL AND qt_pa_sistolica::text <> '')
		and	(qt_pa_diastolica IS NOT NULL AND qt_pa_diastolica::text <> '');
		commit;
	end if;
	
	if (ie_liberar_html_p = 'S') then	
			CALL liberar_sinal_vital(nr_seq_sinal_vital_p, 'ATENDIMENTO_SINAL_VITAL', nm_usuario_p);
	end if;
	
elsif (nm_tabela_w = 'ATENDIMENTO_MONIT_RESP') and ((ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') or (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> '')) then

	select	count(*)
	into STRICT	qt_registro_w
	from	atendimento_monit_resp
	where	nr_sequencia	=	nr_seq_monit_resp_p;	

	if (qt_registro_w = 0) then
		nr_sequencia_w := nr_seq_monit_resp_p;
		select	max(dt_sinal_vital)
		into STRICT	dt_monitorizacao_w
		from	atendimento_sinal_vital
		where	(((nr_cirurgia	=	nr_cirurgia_p) and (coalesce(nr_cirurgia_p,0) > 0)) or
			 ((nr_seq_pepo	=	nr_seq_pepo_p) and (coalesce(nr_seq_pepo_p,0) > 0)))
		and	dt_atualizacao > (clock_timestamp() - (2/86400));
			
		insert into atendimento_monit_resp(
			nr_sequencia,
			nr_atendimento,
			dt_monitorizacao,
			dt_atualizacao,
			nm_usuario,
			nr_cirurgia,
			cd_pessoa_fisica,
			dt_liberacao,
			ie_situacao,
			nr_seq_pepo)
		values (
			nr_seq_monit_resp_p,
			nr_atendimento_p,
			coalesce(coalesce(dt_monitorizacao_w,dt_sinal_vital_p),clock_timestamp()),
			clock_timestamp(),
			nm_usuario_p,
			nr_cirurgia_p,
			cd_pessoa_fisica_w,
			CASE WHEN ie_liberar_sv_w='S' THEN clock_timestamp()  ELSE null END ,
			'A',
			nr_seq_pepo_p);
			
		commit;
		
		if (ie_liberar_html_p = 'S') then	
			CALL liberar_sinal_vital(nr_seq_sinal_vital_p, 'ATENDIMENTO_MONIT_RESP', nm_usuario_p);
		end if;
	end if;

	if (ie_tipo_atributo_w = 'NUMBER') then
		--ds_atrib_insert_w := replace(ds_valor_item_p,',','.');
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,255);
	elsif (ie_tipo_atributo_w = 'DATE') then
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,255);
	elsif (ie_tipo_atributo_w = 'VARCHAR2') then
		ds_atrib_insert_w := SUBSTR(ds_valor_item_P,1,255);
	end if;
 
	/*
	ds_comando_w	:=	' update atendimento_monit_resp set ' || nm_atributo_w || ' = '  || ds_atrib_insert_w ||
				' where nr_sequencia = ' || to_char(nr_seq_monit_resp_p);
	Exec_sql_Dinamico(nm_usuario_p, ds_comando_w);*/
	
	if (ie_tipo_atributo_w = 'DATE') then

		if (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> '') then
			ds_comando_w	:=	' update atendimento_monit_resp set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
						' where nr_sequencia = :nr_sequencia ';
						
			valor_bind_w := sql_pck.bind_variable(	':nr_sequencia', nr_seq_monit_resp_p, valor_bind_w);
			valor_bind_w := sql_pck.bind_variable(	':dt_atrib_insert_w', dt_valor_item_p, valor_bind_w, sql_pck.b_data_hora);

			valor_bind_w := sql_pck.executa_sql(ds_comando_w, valor_bind_w);
		else
			ds_comando_w	:=	' update atendimento_monit_resp set ' || nm_atributo_w || ' = :dt_atrib_insert_w '||
					' where nr_sequencia = :nr_sequencia ';
			CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_monit_resp_p) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);	
		end if;
	else
		ds_comando_w	:=	' update atendimento_monit_resp set ' || nm_atributo_w || ' = :ds_atrib_insert_w '||
					' where nr_sequencia = :nr_sequencia ';
		CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia='|| to_char(nr_seq_monit_resp_p) || ';ds_atrib_insert_w=' || ds_atrib_insert_w);
	end if;
	
	
	commit;

elsif (nm_tabela_w = 'ATEND_ANAL_BIOQ_PORT') and ((ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') or (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> '')) then

	select	count(*)
	into STRICT	qt_registro_w
	from	atend_anal_bioq_port
	where	nr_sequencia	=	nr_seq_analisador_p;	

	if (qt_registro_w = 0) then
		nr_sequencia_w := nr_seq_analisador_p;
		insert into atend_anal_bioq_port(
			nr_sequencia,
			nr_atendimento,
			dt_analise,
			dt_atualizacao,
			nm_usuario,
			nr_cirurgia,
			cd_pessoa_fisica,
			dt_liberacao,
			ie_situacao,
			nr_seq_pepo)
		values (
			nr_seq_analisador_p,
			nr_atendimento_p,
			coalesce(dt_sinal_vital_p,clock_timestamp()),
			clock_timestamp(),
			nm_usuario_p,
			nr_cirurgia_p,
			cd_pessoa_fisica_w,
			CASE WHEN ie_liberar_sv_w='S' THEN clock_timestamp()  ELSE null END ,
			'A',
			nr_seq_pepo_p);
			
		commit;
		
		if (ie_liberar_html_p = 'S') then	
			CALL liberar_sinal_vital(nr_seq_sinal_vital_p, 'ATEND_ANAL_BIOQ_PORT', nm_usuario_p);
		end if;
	end if;

	if (ie_tipo_atributo_w = 'NUMBER') then
		--ds_atrib_insert_w := replace(ds_valor_item_p,',','.');
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,255);
	elsif (ie_tipo_atributo_w = 'DATE') then
		ds_atrib_insert_w := substr(ds_valor_item_p,1,2000);
	elsif (ie_tipo_atributo_w = 'VARCHAR2') then
		ds_atrib_insert_w := SUBSTR(ds_valor_item_P,1,255);
	end if;
	
	/*
	ds_comando_w	:=	' update atend_anal_bioq_port set ' || nm_atributo_w || ' = '  || ds_atrib_insert_w ||
				' where nr_sequencia = ' || to_char(nr_seq_analisador_p);
	Exec_sql_Dinamico(nm_usuario_p, ds_comando_w);
	*/
	
	if (ie_tipo_atributo_w = 'DATE') then

		if (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> '') then
			ds_comando_w	:=	' update atend_anal_bioq_port set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
						' where nr_sequencia = :nr_sequencia ';
						
			valor_bind_w := sql_pck.bind_variable(	':nr_sequencia', nr_seq_analisador_p, valor_bind_w);
			valor_bind_w := sql_pck.bind_variable(	':dt_atrib_insert_w', dt_valor_item_p, valor_bind_w, sql_pck.b_data_hora);

			valor_bind_w := sql_pck.executa_sql(ds_comando_w, valor_bind_w);
		else
			ds_comando_w	:=	' update atend_anal_bioq_port set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
					' where nr_sequencia = :nr_sequencia';
			CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia=' || to_char(nr_seq_analisador_p) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);
		end if;
	else
		ds_comando_w	:=	' update atend_anal_bioq_port set ' || nm_atributo_w || ' = :ds_atrib_insert_w ' ||
					' where nr_sequencia = :nr_sequencia';
		CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia=' || to_char(nr_seq_analisador_p) || ';ds_atrib_insert_w=' || ds_atrib_insert_w);
	end if;
	
	
	commit;
elsif	((nm_tabela_w = 'ATEND_MONIT_HEMOD')
		and ((ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') or (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> ''))
		and coalesce(nr_atend_monit_hemod_p, 0) > 0)then

	select	count(*)
	INTO STRICT	qt_registro_w
	from	atend_monit_hemod
	where	nr_sequencia	=	nr_atend_monit_hemod_p;

	if (qt_registro_w = 0) then
		nr_sequencia_w := nr_atend_monit_hemod_p;
		INSERT INTO ATEND_MONIT_HEMOD(
			nr_sequencia,
			nr_atendimento,
			dt_monitoracao,
			dt_atualizacao,
			nm_usuario,
			nr_cirurgia,
			cd_pessoa_fisica,
			dt_liberacao,
			ie_situacao,
			nr_seq_pepo)
		VALUES (
			nr_atend_monit_hemod_p,
			nr_atendimento_p,
			coalesce(dt_sinal_vital_p,clock_timestamp()),
			clock_timestamp(),
			nm_usuario_p,
			nr_cirurgia_p,
			cd_pessoa_fisica_w,
			CASE WHEN ie_liberar_sv_w='S' THEN clock_timestamp()  ELSE NULL END ,
			'A',
			nr_seq_pepo_p);

		COMMIT;

		IF (ie_liberar_html_p = 'S') THEN
			CALL liberar_sinal_vital(nr_seq_sinal_vital_p, 'ATEND_MONIT_HEMOD', nm_usuario_p);
		END IF;
	END IF;

	IF (ie_tipo_atributo_w = 'NUMBER') THEN
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,255);
	ELSIF (ie_tipo_atributo_w = 'DATE') THEN
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,2000);
	ELSIF (ie_tipo_atributo_w = 'VARCHAR2') THEN
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,255);
	END IF;

	if (ie_tipo_atributo_w = 'DATE') then

		if (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> '') then
			ds_comando_w	:=	' update ATEND_MONIT_HEMOD set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
						' where nr_sequencia = :nr_sequencia ';

			valor_bind_w := sql_pck.bind_variable(	':nr_sequencia', nr_atend_monit_hemod_p, valor_bind_w);
			valor_bind_w := sql_pck.bind_variable(	':dt_atrib_insert_w', dt_valor_item_p, valor_bind_w, sql_pck.b_data_hora);

			valor_bind_w := sql_pck.executa_sql(ds_comando_w, valor_bind_w);
		ELSE
			ds_comando_w	:=	' update ATEND_MONIT_HEMOD set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
					' where nr_sequencia = :nr_sequencia';
			CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia=' || TO_CHAR(nr_atend_monit_hemod_p) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);
		END IF;
	ELSE
		ds_comando_w	:=	' update ATEND_MONIT_HEMOD set ' || nm_atributo_w || ' = :ds_atrib_insert_w ' ||
					' where nr_sequencia = :nr_sequencia';
		CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia=' || TO_CHAR(nr_atend_monit_hemod_p) || ';ds_atrib_insert_w=' || ds_atrib_insert_w);
	end if;

	commit;
elsif	((nm_tabela_w = 'ATEND_AVAL_ANALGESIA')
		and ((ds_valor_item_p IS NOT NULL AND ds_valor_item_p::text <> '') or (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> ''))
		and coalesce(nr_atend_analgesia_p, 0) > 0)then


	
	nr_sequencia_w := nr_atend_analgesia_p;
	
	begin
      INSERT INTO ATEND_AVAL_ANALGESIA(
			nr_sequencia,
			nr_atendimento,
			dt_avaliacao,
			dt_atualizacao,
			nm_usuario,
			dt_liberacao,
			ie_situacao,
			nr_seq_pepo)
		VALUES (
			nr_atend_analgesia_p,
			nr_atendimento_p,
			coalesce(dt_sinal_vital_p,clock_timestamp()),
			clock_timestamp(),
			nm_usuario_p,
			CASE WHEN ie_liberar_sv_w='S' THEN clock_timestamp()  ELSE NULL END ,
			'A',
			nr_seq_pepo_p);
    exception
      when unique_violation then null;
	end;
	
	COMMIT;

	select	count(*)
	INTO STRICT	qt_registro_w
	from	ATEND_AVAL_ANALGESIA
	where	nr_sequencia	=	nr_atend_analgesia_p
	and coalesce(dt_liberacao::text, '') = '';
	
	if (qt_registro_w > 0 and ie_liberar_html_p = 'S') then
		CALL liberar_sinal_vital(nr_atend_analgesia_p, 'ATEND_AVAL_ANALGESIA', nm_usuario_p);
	END IF;

	IF (ie_tipo_atributo_w = 'NUMBER') THEN
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,255);
	ELSIF (ie_tipo_atributo_w = 'DATE') THEN
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,2000);
	ELSIF (ie_tipo_atributo_w = 'VARCHAR2') THEN
		ds_atrib_insert_w := SUBSTR(ds_valor_item_p,1,255);
	END IF;

	if (ie_tipo_atributo_w = 'DATE') then

		if (dt_valor_item_p IS NOT NULL AND dt_valor_item_p::text <> '') then
			ds_comando_w	:=	' update ATEND_AVAL_ANALGESIA set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
						' where nr_sequencia = :nr_sequencia ';

			valor_bind_w := sql_pck.bind_variable(	':nr_sequencia', nr_atend_analgesia_p, valor_bind_w);
			valor_bind_w := sql_pck.bind_variable(	':dt_atrib_insert_w', dt_valor_item_p, valor_bind_w, sql_pck.b_data_hora);

			valor_bind_w := sql_pck.executa_sql(ds_comando_w, valor_bind_w);
		ELSE
			ds_comando_w	:=	' update ATEND_AVAL_ANALGESIA set ' || nm_atributo_w || ' = :dt_atrib_insert_w ' ||
					' where nr_sequencia = :nr_sequencia';
			CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia=' || TO_CHAR(nr_atend_analgesia_p) || ';dt_atrib_insert_w=' || ds_atrib_insert_w);
		END IF;
	ELSE
		ds_comando_w	:=	' update ATEND_AVAL_ANALGESIA set ' || nm_atributo_w || ' = :ds_atrib_insert_w ' ||
					' where nr_sequencia = :nr_sequencia';
		CALL Exec_sql_Dinamico_bv(nm_usuario_p, ds_comando_w,'nr_sequencia=' || TO_CHAR(nr_atend_analgesia_p) || ';ds_atrib_insert_w=' || ds_atrib_insert_w);
	end if;

	commit;
	
end if;

nm_tabela_p	:= nm_tabela_w;
nr_sequencia_p	:= nr_sequencia_w;

exception
when others then
	rollback;

    CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(237719);
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE registrar_sv_pepo ( nr_cirurgia_p bigint, nr_atendimento_p bigint, dt_sinal_vital_p timestamp, nr_seq_sinal_vital_p bigint, nr_seq_monit_resp_p bigint, nr_seq_analisador_p bigint, nr_seq_item_p bigint, ds_valor_item_p text, nm_usuario_p text, nr_seq_pepo_p bigint, nm_tabela_p INOUT text, nr_sequencia_p INOUT bigint, dt_valor_item_p timestamp default null, ie_liberar_html_p text default 'N', nr_atend_monit_hemod_p bigint default 0, nr_atend_analgesia_p bigint default 0) FROM PUBLIC;

