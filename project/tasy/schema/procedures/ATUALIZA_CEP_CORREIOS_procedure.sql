-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualiza_cep_correios (nm_usuario_p text) AS $body$
DECLARE


cd_cep_w		varchar(8);
nr_seq_loc_w		varchar(10);
nr_sequencia_w		varchar(10);
nm_logradouro_w		varchar(125);
ds_uf_w			valor_dominio.vl_dominio%type;
ds_complemento_w	varchar(100);
cd_bairro_inicial_w	varchar(5);
cd_bairro_final_w	varchar(5);
ds_tipo_logradouro_w	varchar(125);
ds_preposicao_w		varchar(3);
ie_log_ativo_w		varchar(1);
nm_localidade_w		varchar(60);
ie_tipo_w		varchar(1);
nr_seq_superior_w	varchar(6);
ds_bairro_w		varchar(80);
c01			integer;
c02			integer;
c03			integer;
Ignore			integer;
ret_w			integer;
ds_sql_c01		varchar(2000);
ds_sql_c02		varchar(2000);
ds_sql_c03		varchar(2000);
ie_existe_w		integer;


BEGIN

ds_sql_c01 := 	' select cd_cep,		' ||
		'	 nr_seq_loc,		' ||
		'  	 nr_sequencia, 		' ||
		'	 nm_logradouro,		' ||
		' 	 ds_uf, 		' ||
		' 	 ds_complemento, 	' ||
		' 	 cd_bairro_inicial, 	' ||
		' 	 cd_bairro_final,	' ||
		' 	 ds_tipo_logradouro,	' ||
		' 	 ds_preposicao, 	' ||
		' 	 ie_log_ativo 		' ||
		' from	 w_cep_log		';
		
ds_sql_c02 := 	' select cd_cep,		' ||
		' 	 ds_uf,			' ||
		' 	 nr_sequencia, 		' ||
		' 	 nm_localidade, 	' ||
		' 	 ie_tipo, 		' ||
		' 	 nr_seq_superior 	' ||
		' from	 w_cep_loc		';
		
ds_sql_c03 :=  	' select ds_bairro,		' ||
		' 	 nr_seq_loc,		' ||
		' 	 nr_sequencia,		' ||
		' 	 ds_uf			' ||
		' from	 w_cep_bairro		';

c01 := dbms_sql.open_cursor;
dbms_sql.parse(c01, ds_sql_c01, dbms_sql.native);
dbms_sql.define_column(c01, 1, cd_cep_w, 8);
dbms_sql.define_column(c01, 2, nr_seq_loc_w, 10);
dbms_sql.define_column(c01, 3, nr_sequencia_w, 10);
dbms_sql.define_column(c01, 4, nm_logradouro_w, 125);
dbms_sql.define_column(c01, 5, ds_uf_w, 10);
dbms_sql.define_column(c01, 6, ds_complemento_w, 100);
dbms_sql.define_column(c01, 7, cd_bairro_inicial_w, 5);	
dbms_sql.define_column(c01, 8, cd_bairro_final_w, 5);
dbms_sql.define_column(c01, 9, ds_tipo_logradouro_w, 125);
dbms_sql.define_column(c01, 10, ds_preposicao_w, 3);
dbms_sql.define_column(c01, 11, ie_log_ativo_w, 1);
ret_w := dbms_sql.execute(c01);
		
loop
	if (dbms_sql.fetch_rows(c01) > 0) then
		begin
			dbms_sql.column_value(c01, 1, cd_cep_w);
		exception
		when others then
			cd_cep_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 2, nr_seq_loc_w);
		exception
		when others then
			nr_seq_loc_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 3, nr_sequencia_w);
		exception
		when others then
			nr_sequencia_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 4, nm_logradouro_w);
		exception
		when others then
			nm_logradouro_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 5, ds_uf_w);
		exception
		when others then
			ds_uf_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 6, ds_complemento_w);
		exception
		when others then
			ds_complemento_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 7, cd_bairro_inicial_w);
		exception
		when others then
			cd_bairro_inicial_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 8, cd_bairro_final_w);
		exception
		when others then
			cd_bairro_final_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 9, ds_tipo_logradouro_w);
		exception
		when others then
			ds_tipo_logradouro_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 10, ds_preposicao_w);
		exception
		when others then
			ds_preposicao_w := '';
		end;
		begin
			dbms_sql.column_value(c01, 11, ie_log_ativo_w);
		exception
		when others then
			ie_log_ativo_w := '';
		end;
	else
		exit;
	end if;
	
	
	
	select 	count(*)
	into STRICT	ie_existe_w
	from	cep_log
	where	nr_sequencia = nr_sequencia_w
	and	cd_cep = cd_cep_w
	and	nr_seq_loc = nr_seq_loc_w;


	if (ie_existe_w = 0) then
			
			Insert into cep_log(
				nr_sequencia,
				nm_logradouro, 
				nr_seq_loc, 
				cd_cep,
				ds_uf, 
				ds_complemento, 
				cd_bairro_inicial, 
				cd_bairro_final,
				ds_tipo_logradouro, 
				ds_preposicao, 
				ie_log_ativo, 
				dt_atualizacao, 
				nm_usuario
				)	
				values (
				nr_sequencia_w, 
				substr(trim(both nm_logradouro_w),1,125), 
				nr_seq_loc_w, 
				cd_cep_w,
				ds_uf_w, 
				ds_complemento_w, 
				cd_bairro_inicial_w, 
				cd_bairro_final_w,
				ds_tipo_logradouro_w, 
				ds_preposicao_w, 
				ie_log_ativo_w,
				clock_timestamp(),
				nm_usuario_p
				);
		
	else
		
		update  cep_log
		set	nm_logradouro		= substr(trim(both nm_logradouro_w),1,125),
			nr_seq_loc		= nr_seq_loc_w, 
			cd_cep			= cd_cep_w,
			ds_uf			= ds_uf_w, 
			ds_complemento		= ds_complemento_w, 
			cd_bairro_inicial	= cd_bairro_inicial_w, 
			cd_bairro_final		= cd_bairro_final_w,
			ds_tipo_logradouro	= ds_tipo_logradouro_w, 
			ds_preposicao		= ds_preposicao_w, 
			ie_log_ativo		= ie_log_ativo_w,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_sequencia = nr_sequencia_w
		and	cd_cep = cd_cep_w
		and	nr_seq_loc = nr_seq_loc_w;
		
	end if;
	
end loop;

dbms_sql.close_cursor(c01);

c02 := dbms_sql.open_cursor;
dbms_sql.parse(c02, ds_sql_c02, dbms_sql.native);
dbms_sql.define_column(c02, 1, cd_cep_w, 8);
dbms_sql.define_column(c02, 2, ds_uf_w, 2);
dbms_sql.define_column(c02, 3, nr_sequencia_w, 10);
dbms_sql.define_column(c02, 4, nm_localidade_w, 60);
dbms_sql.define_column(c02, 5, ie_tipo_w, 1);
dbms_sql.define_column(c02, 6, nr_seq_superior_w, 6);	
ignore := dbms_sql.execute(c02);

loop
	if (dbms_sql.fetch_rows(c02) > 0) then
	
		begin
			dbms_sql.column_value(c02, 1, cd_cep_w);
		exception
		when others then
			cd_cep_w := '0';
		end;
		begin
			dbms_sql.column_value(c02, 2, ds_uf_w);
		exception
		when others then
			ds_uf_w := '';
		end;
		begin
			dbms_sql.column_value(c02, 3, nr_sequencia_w);
		exception
		when others then
			nr_sequencia_w := 0;
		end;
		begin
			dbms_sql.column_value(c02, 4, nm_localidade_w);
		exception
		when others then
			nm_localidade_w := '';
		end;
		begin
			dbms_sql.column_value(c02, 5, ie_tipo_w);
		exception
		when others then
			ie_tipo_w := '';
		end;
		begin
			dbms_sql.column_value(c02, 6, nr_seq_superior_w);
		exception
		when others then
			nr_seq_superior_w := 0;
		end;
	else
		exit;	
	end if;

	
	select 	count(*)
	into STRICT	ie_existe_w
	from	cep_loc
	where	nr_sequencia = nr_sequencia_w;
	
	if (ie_existe_w = 0) then
		
		Insert into cep_loc(
			nr_sequencia,
			nm_localidade, 
			cd_cep, 
			ds_uf, 
			ie_tipo, 
			nr_seq_superior, 
			dt_atualizacao, 
			nm_usuario
			) 
			values (
			nr_sequencia_w, 
			nm_localidade_w, 
			coalesce(cd_cep_w,0), 
			ds_uf_w, 
			ie_tipo_w, 
			nr_seq_superior_w, 
			clock_timestamp(), 
			nm_usuario_p
			);
			
	else
	
		update  cep_loc
		set	nm_localidade		= nm_localidade_w,
			cd_cep			= cd_cep_w, 
			ds_uf			= ds_uf_w, 
			ie_tipo			= ie_tipo_w, 
			nr_seq_superior		= nr_seq_superior_w, 
			dt_atualizacao		= clock_timestamp(), 
			nm_usuario		= nm_usuario_p
		where	nr_sequencia = nr_sequencia_w;
		
	end if;	
end loop;

dbms_sql.close_cursor(c02);

c03 := dbms_sql.open_cursor;
dbms_sql.parse(c03, ds_sql_c03, dbms_sql.native);
dbms_sql.define_column(c03, 1, ds_bairro_w, 80);
dbms_sql.define_column(c03, 2, nr_seq_loc_w, 10);
dbms_sql.define_column(c03, 3, nr_sequencia_w, 10);
dbms_sql.define_column(c03, 4, ds_uf_w, 2);
ignore := dbms_sql.execute(c03);

loop
	if (dbms_sql.fetch_rows(c03) > 0) then	
		begin
			dbms_sql.column_value(c03, 1, ds_bairro_w);
		exception
		when others then
			cd_cep_w := '';
		end;
		begin
			dbms_sql.column_value(c03, 2, nr_seq_loc_w);
		exception
		when others then
			nr_seq_loc_w := 0;
		end;
		begin
			dbms_sql.column_value(c03, 3, nr_sequencia_w);
		exception
		when others then
			nr_sequencia_w := 0;
		end;
		begin
			dbms_sql.column_value(c03, 4, ds_uf_w);
		exception
		when others then
			ds_uf_w := '';
		end;
	else
		exit;
	end if;
		
	select 	count(*)
	into STRICT	ie_existe_w
	from	cep_bairro
	where	nr_sequencia = nr_sequencia_w
	and	nr_seq_loc = nr_seq_loc_w;		
		
	if (ie_existe_w = 0) then
		
	 Insert into cep_bairro(
			nr_sequencia,
			ds_bairro, 
			nr_seq_loc, 
			ds_uf, 
			dt_atualizacao, 
			nm_usuario
			) 
			values (
			nr_sequencia_w, 
			ds_bairro_w, 
			nr_seq_loc_w, 
			ds_uf_w,
			clock_timestamp(), 
			nm_usuario_p
			);
	
	else

	update	cep_bairro
	set	ds_bairro	= ds_bairro_w,
		nr_seq_loc	= nr_seq_loc_w, 
		ds_uf		= ds_uf_w,
		dt_atualizacao	= clock_timestamp(), 
		nm_usuario	= nm_usuario_p
	where	nr_sequencia = nr_sequencia_w
	and	nr_seq_loc = nr_seq_loc_w;		
	
	end if;	
end loop;
	
dbms_sql.close_cursor(c03);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualiza_cep_correios (nm_usuario_p text) FROM PUBLIC;

