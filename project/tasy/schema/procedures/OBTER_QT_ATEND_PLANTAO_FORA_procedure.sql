-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_qt_atend_plantao_fora ( cd_medico_p text, cd_estabelecimento_p bigint, nr_seq_regra_esp_p bigint, nr_seq_categoria_p bigint, dt_periodo_inicial_p timestamp, dt_periodo_final_p timestamp, dt_inicio_vigencia_p timestamp, dt_fim_vigencia_p timestamp, ie_plantao_previsto_p text, ie_tipo_convenio_p bigint, qt_total_atend_p INOUT bigint, qt_total_min_p INOUT bigint) AS $body$
DECLARE


cd_medico_w		medico_plantao.cd_medico%type;
qt_minuto_w		medico_plantao.qt_minuto%type;
dt_inicial_w		varchar(255);
dt_final_w		varchar(255);
qt_atend_w		bigint;
qt_total_atend_w	bigint;
qt_total_min_w		bigint;

c01 CURSOR FOR
SELECT	cd_medico,
	sum(CASE WHEN ie_plantao_previsto_p='S' THEN obter_tempo_plantao_medico(nr_sequencia,'M')  ELSE qt_minuto END ) qt_minuto,
	to_char(dt_inicial,'dd/mm/yyyy hh24:mi:ss'),
	to_char(dt_final,'dd/mm/yyyy hh24:mi:ss')
from	medico_plantao a
where	substr(OBTER_SE_REGRA_ESP_DIA(CASE WHEN obter_se_feriado(cd_estabelecimento_p,CASE WHEN ie_plantao_previsto_p='S' THEN coalesce(dt_inicial,dt_inicial_prev)  ELSE dt_inicial END )=0 THEN pkg_date_utils.get_weekday(CASE WHEN ie_plantao_previsto_p='S' THEN coalesce(dt_inicial,dt_inicial_prev)  ELSE dt_inicial END )  ELSE 0 END , nr_seq_regra_esp_p, CASE WHEN ie_plantao_previsto_p='S' THEN coalesce(dt_inicial,dt_inicial_prev)  ELSE dt_inicial END , CASE WHEN ie_plantao_previsto_p='S' THEN coalesce(dt_final,dt_final_prev)  ELSE dt_final END ),1,255) = 'S'
and (cd_medico = cd_medico_p or coalesce(cd_medico_p,'X') = 'X')
--and	substr(obter_dados_medico(cd_medico,'CAT'),1,10) = nvl(nr_seq_categoria_p,substr(obter_dados_medico(cd_medico,'CAT'),1,10))
and (coalesce(nr_seq_categoria_p,0) = 0
	or
	exists (	select	1
			from	medico x
			where	x.cd_pessoa_fisica	= a.cd_medico
			and		x.nr_seq_categoria	= nr_seq_categoria_p))
and	cd_estabelecimento	= cd_estabelecimento_p
and	substr(OBTER_SE_TIPO_PLANTAO_REGRA(nr_seq_regra_esp_p,nr_seq_tipo_plantao),1,1) = 'N'
and	CASE WHEN ie_plantao_previsto_p='S' THEN coalesce(dt_inicial,dt_inicial_prev)  ELSE dt_inicial END 		between dt_periodo_inicial_p and dt_periodo_final_p
and	CASE WHEN ie_plantao_previsto_p='S' THEN coalesce(dt_inicial,dt_inicial_prev)  ELSE dt_inicial END 		between dt_inicio_vigencia_p and coalesce(dt_fim_vigencia_p, CASE WHEN ie_plantao_previsto_p='S' THEN coalesce(dt_inicial,dt_inicial_prev)  ELSE dt_inicial END )
group by	cd_medico,
		dt_inicial,
		dt_final;


BEGIN

qt_total_atend_w	:= 0;
qt_atend_w		:= 0;
qt_total_min_w		:= 0;

open c01;
loop
fetch c01 into
	cd_medico_w,
	qt_minuto_w,
	dt_inicial_w,
	dt_final_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	select	count(*)
	into STRICT	qt_atend_w
	from	atendimento_alta b,
		atendimento_paciente a,
		parametro_medico p
	where	a.nr_atendimento	= b.nr_atendimento
	and	b.dt_desfecho		between to_date(dt_inicial_w,'dd/mm/yyyy hh24:mi:ss') and to_date(dt_final_w,'dd/mm/yyyy hh24:mi:ss')
	and	substr(obter_dados_usuario_opcao(b.nm_usuario,'C'),1,255) 	= cd_medico_w
	and	a.cd_estabelecimento	= coalesce(cd_estabelecimento_p,a.cd_estabelecimento)
	and p.cd_estabelecimento = cd_estabelecimento_p
	and ((b.ie_tipo_orientacao <> 'P')
	or (coalesce(p.ie_liberar_desfecho,'N')  = 'N')
	or  ((b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '') and (coalesce(b.dt_inativacao::text, '') = '')));

	qt_total_atend_w	:= qt_total_atend_w + qt_atend_w;

end loop;
close c01;

qt_total_atend_p	:= qt_total_atend_w;
qt_total_min_p		:= qt_total_min_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_qt_atend_plantao_fora ( cd_medico_p text, cd_estabelecimento_p bigint, nr_seq_regra_esp_p bigint, nr_seq_categoria_p bigint, dt_periodo_inicial_p timestamp, dt_periodo_final_p timestamp, dt_inicio_vigencia_p timestamp, dt_fim_vigencia_p timestamp, ie_plantao_previsto_p text, ie_tipo_convenio_p bigint, qt_total_atend_p INOUT bigint, qt_total_min_p INOUT bigint) FROM PUBLIC;

