-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_cig_hdh (nr_atendimento_p bigint, nr_prescricao_p bigint, nr_seq_proced_p bigint, nr_seq_horario_p bigint, nr_seq_glicemia_p bigint, dt_hgt_p timestamp, qt_hgt_p bigint, ie_sintomatico_p text, cd_material_p bigint, qt_material_p bigint, nm_usuario_p text, nr_seq_cig_p INOUT bigint) AS $body$
DECLARE


nr_seq_anterior_w		bigint;
nr_seq_hipo_w			bigint;
nr_sequencia_w		bigint;
nr_cig_atend_w		bigint;
nr_cig_w			bigint;
dt_cig_w			timestamp;
dt_proximo_controle_w	timestamp;
dt_prev_controle_w		timestamp;
dt_controle_ant_w		timestamp;
dt_atualizacao_w		timestamp		:= clock_timestamp();
qt_variacao_hgt_w		integer	:= 0;
qt_var_hgt_ref_w		integer	:= 0;
qt_min_variacao_w		bigint	:= 0;
qt_min_interv_fut_w		smallint	:= 60;
qt_variacao_hor_w		smallint	:= 1;
qt_bolus_calc_w		double precision	:= 0;
qt_bolus_adm_w		double precision	:= 0;
qt_veloc_calc_w		real	:= 0;
qt_veloc_adm_w		real	:= 0;
qt_glicose_calc_w		real	:= 0;
qt_glicose_adm_w		real	:= 0;
ds_sugestao_w			varchar(2000):= '';
ds_observacao_w		varchar(255)	:= '';

ie_status_cig_w		varchar(1);
ds_erro_w		varchar(255);
ie_bolus_w			varchar(1)	:= 'N';
qt_hgt_ant_w			integer	:= 0;
qt_hgt_hipo_w			real	:= 0;
qt_veloc_atual_w		real	:= 0;
qt_veloc_hipo_w		real	:= 0;
qt_glicose_atual_w		real	:= 0;
qt_minuto_w			smallint	:= 60;

ie_estavel_w			varchar(1)	:= 'N';
qt_min_glic_w			integer;

nr_seq_glicemia_w		bigint;

cd_material_w			integer 	:= null;
qt_material_w			double precision 	:= null;

ie_registrar_sv_w			varchar(1);
nr_seq_assinatura_w			bigint;
ie_gera_adm_w				varchar(1);
qt_glicose_w				double precision;


BEGIN

ie_registrar_sv_w := obter_param_usuario(1113, 478, Obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_registrar_sv_w);

if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (qt_hgt_p IS NOT NULL AND qt_hgt_p::text <> '') then
	/* obter parametros */

	select	coalesce(max(obter_valor_param_usuario(1113, 21, obter_perfil_ativo, nm_usuario_p, obter_estab_atend(nr_atendimento_p))), 10)
	into STRICT	qt_min_glic_w
	;

	/* validar data cig */

	if (dt_hgt_p IS NOT NULL AND dt_hgt_p::text <> '') then
		dt_cig_w := dt_hgt_p;
	else
		dt_cig_w := dt_atualizacao_w;
	end if;

	/* consistir data medição cig */

	CALL consistir_data_medicao_cig(nr_atendimento_p, nr_seq_glicemia_p, dt_cig_w);

	/* validar situações específicas hgt */

	if (qt_hgt_p < 50) then
		qt_glicose_calc_w	:= 25;
		ds_sugestao_w		:=	WHEB_MENSAGEM_PCK.get_texto(817927, 'QT_DOSE=' || qt_glicose_calc_w);
								--Parar a infusão. Aplicar #@qt_dose#@ml de glicose a 50% EV. Verificar HGT a cada 15 minutos. Quando HGT > 140mg%, esperar 1 hora e reiniciar a infusão de insulina com 50% do valor anterior.
		qt_minuto_w		:= 15;
	elsif (qt_hgt_p >= 50) and (qt_hgt_p <= 74) then
		if (ie_sintomatico_p = 'S') then
			qt_glicose_calc_w	:= 25;
			ds_sugestao_w		:=	WHEB_MENSAGEM_PCK.get_texto(817927, 'QT_DOSE=' || qt_glicose_calc_w);
									--Parar a infusão. Aplicar #@qt_dose#@ml de glicose a 50% EV. Verificar HGT a cada 15 minutos. Quando HGT > 140mg%, esperar 1 hora e reiniciar a infusão de insulina com 50% do valor anterior.
			qt_minuto_w		:= 15;
		else
			qt_glicose_calc_w	:= 12.5;
			ds_sugestao_w		:=	WHEB_MENSAGEM_PCK.get_texto(817927, 'QT_DOSE=' || qt_glicose_calc_w);
									--Parar a infusão. Aplicar #@qt_dose#@ml de glicose a 50% EV. Verificar HGT a cada 15 minutos. Quando HGT > 140mg%, esperar 1 hora e reiniciar a infusão de insulina com 50% do valor anterior.
			qt_minuto_w		:= 30;
		end if;
	elsif (qt_hgt_p >= 75) and (qt_hgt_p <= 139) then
			qt_glicose_calc_w	:= 0;
			ds_sugestao_w		:= 	obter_desc_expressao(781555);
									--Parar a infusão. Verificar HGT de 30 em 30 minutos. Quando HGT > 140mg%, esperar 1 hora e reiniciar a infusão de insulina com 50% do valor anterior.
			qt_minuto_w		:= 60;
	end if;

	/* obter registros cadastrados */

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_anterior_w
	from	atendimento_cig
	where	nr_atendimento = nr_atendimento_p
	and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia);
	--and	ie_status_cig <> 'T';
	/* obter cig atendimento */

	if (nr_seq_anterior_w = 0) then
		select	coalesce(max(nr_cig_atend),0) + 1
		into STRICT	nr_cig_atend_w
		from	atendimento_cig
		where	nr_atendimento = nr_atendimento_p
		and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia);
	else
		select	max(nr_cig_atend)
		into STRICT	nr_cig_atend_w
		from	atendimento_cig
		where	nr_atendimento = nr_atendimento_p
		and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia);
		--and	ie_status_cig <> 'T';
	end if;

	/* obter cig */

	select	coalesce(max(nr_cig),0) + 1
	into STRICT	nr_cig_w
	from	atendimento_cig
	where	nr_atendimento = nr_atendimento_p
	and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia)
	and	ie_status_cig <> 'T';

	/* validar material */

	if (cd_material_p > 0) and (qt_material_p > 0) then
		cd_material_w	:= cd_material_p;
		qt_material_w := qt_material_p;
	end if;

	/* calcular e gerar valores */

	if (nr_seq_anterior_w = 0) then
		/* gerar glicemia atendimento */

		if (coalesce(nr_seq_glicemia_p,0) = 0) then
			nr_seq_glicemia_w := gerar_atend_glicemia(nr_atendimento_p, null, null, null, nm_usuario_p, nr_seq_glicemia_w);

		elsif (coalesce(nr_seq_glicemia_p,0) > 0) then
			nr_seq_glicemia_w := nr_seq_glicemia_p;
		end if;

		/* atualizar glicemia atendimento */

		if (coalesce(nr_seq_glicemia_w,0) > 0) then
			update	atend_glicemia
			set	ie_status_glic	= 'N',
				dt_inicio_glic	= clock_timestamp(),
				cd_pf_inic_glic	= substr(obter_dados_usuario_opcao(nm_usuario_p,'C'),1,10)
			where	nr_sequencia		= nr_seq_glicemia_w;
		end if;

		/* calcular bolus */

		qt_bolus_calc_w := dividir(qt_hgt_p,100);
		if (mod(qt_bolus_calc_w,trunc(qt_bolus_calc_w)) > 0.5) then
			qt_bolus_calc_w	:= round(qt_bolus_calc_w);
		else
			qt_bolus_calc_w	:= trunc(qt_bolus_calc_w);
		end if;

		if (qt_hgt_p >= 150) then
			ie_bolus_w := 'S';
		end if;

		/* calcular próximo controle */

		dt_proximo_controle_w := dt_cig_w + qt_minuto_w/1440;

		/* obter sequência */

		select	nextval('atendimento_cig_seq')
		into STRICT	nr_sequencia_w
		;

		insert into atendimento_cig(
						nr_sequencia,
						nr_cig,
						dt_proximo_controle,
						nr_atendimento,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						dt_controle,
						qt_hgt,
						qt_variacao_hgt,
						qt_var_hgt_ref,
						qt_min_var,
						qt_min_interv_fut,
						qt_bolus_calc,
						qt_bolus_adm,
						qt_veloc_calc,
						qt_veloc_adm,
						qt_glicose_calc,
						qt_glicose_adm,
						ds_sugestao,
						ds_observacao,
						dt_prev_controle,
						dt_limite_ant,
						dt_limite_pos,
						ie_status_cig,
						nr_cig_atend,
						nr_seq_glicemia,
						nr_seq_horario,
						cd_material,
						qt_material
						)
					values (
						nr_sequencia_w,
						nr_cig_w,
						dt_proximo_controle_w,
						nr_atendimento_p,
						dt_atualizacao_w,
						nm_usuario_p,
						dt_atualizacao_w,
						nm_usuario_p,
						dt_cig_w,
						qt_hgt_p,
						qt_variacao_hgt_w,
						CASE WHEN qt_var_hgt_ref_w=0 THEN  null  ELSE qt_var_hgt_ref_w END ,
						CASE WHEN qt_min_variacao_w=0 THEN  null  ELSE qt_min_variacao_w END ,
						qt_minuto_w,
						CASE WHEN ie_bolus_w='S' THEN  qt_bolus_calc_w  ELSE 0 END ,
						CASE WHEN ie_bolus_w='S' THEN  qt_bolus_calc_w  ELSE 0 END ,
						qt_bolus_calc_w,
						qt_bolus_calc_w,
						qt_glicose_calc_w,
						qt_glicose_calc_w,
						ds_sugestao_w,
						ds_observacao_w,
						null,
						null,
						null,
						'N',
						nr_cig_atend_w,
						nr_seq_glicemia_w,
						nr_seq_horario_p,
						cd_material_w,
						qt_material_w
						);
	else
		/* consistir intervalo medicoes CIG */

--		consistir_interv_medicao_cig(nr_atendimento_p, dt_cig_w);
		/* obter dados medição anterior */

		select	coalesce(max(ie_status_cig),'N'),
			coalesce(max(qt_hgt),0),
			coalesce(max(qt_veloc_calc),0),
			coalesce(max(qt_glicose_calc),0),
			max(dt_proximo_controle),
			max(dt_controle),
			coalesce(max(qt_min_interv_fut),0),
			coalesce(max(nr_seq_glicemia),0)
		into STRICT	ie_status_cig_w,
			qt_hgt_ant_w,
			qt_veloc_atual_w,
			qt_glicose_atual_w,
			dt_prev_controle_w,
			dt_controle_ant_w,
			qt_min_interv_fut_w,
			nr_seq_glicemia_w
		from	atendimento_cig
		where	nr_sequencia = nr_seq_anterior_w;

		if (ie_status_cig_w not in ('N','R')) then
			qt_bolus_calc_w := arredondar_valores_cig(dividir(qt_hgt_p,100));
			if (qt_hgt_p >= 150) then
				ie_bolus_w := 'S';
			end if;
		end if;

		/* calcular variação hgt */

		qt_variacao_hgt_w := qt_hgt_p - qt_hgt_ant_w;

		/* calcular variação hgt horaria */

		qt_min_variacao_w := trunc((dt_cig_w - dt_controle_ant_w) * 1440);
		if (qt_min_variacao_w <= 119) then
			qt_variacao_hor_w := 1;
		elsif (qt_min_variacao_w <= 179) then
			qt_variacao_hor_w := 2;
		elsif (qt_min_variacao_w <= 239) then
			qt_variacao_hor_w := 3;
		else
			qt_variacao_hor_w := 4;
		end if;
		qt_var_hgt_ref_w := dividir(qt_variacao_hgt_w, qt_variacao_hor_w);

		if (qt_hgt_p <= 139) then
			--Infusão parada! Deve manter zero na velocidade de infusão. Ocorria problema quando já era zero.
			--Desta forma setar para -1 se parado pois antes de inserir, se qt_veloc_atual_w < 0 então qt_veloc_atual_w recebe 0;
			qt_veloc_calc_w := -1;
		end if;


		/* obter faixa hgt */

		if (qt_hgt_ant_w <= 69) and (qt_hgt_p >= 90) then
			/* hipoglicemia */

			qt_veloc_calc_w := 0;
			qt_glicose_calc_w := 0;

		elsif (qt_hgt_p >= 90) and (qt_hgt_ant_w >= 90) and (qt_glicose_atual_w = 0) and (qt_veloc_atual_w = 0) then
			/* transicao hipoglicemia x cig / obter dose recente */

			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_hipo_w
			from	atendimento_cig
			where	nr_atendimento = nr_atendimento_p
			and	coalesce(nr_seq_glicemia,0) = coalesce(nr_seq_glicemia_p,nr_seq_glicemia)
			and	qt_veloc_calc > 0;

			/* transicao hipoglicemia x cig / obter dados dose recente */

			if (nr_seq_hipo_w > 0) then
				select	qt_hgt,
					qt_veloc_calc
				into STRICT	qt_hgt_hipo_w,
					qt_veloc_hipo_w
				from	atendimento_cig
				where	nr_sequencia = nr_seq_hipo_w;

				/* transicao hipoglicemia x cig / gerar dosagem atual */

				if (qt_hgt_p	>= 140) then
					qt_veloc_calc_w := dividir(qt_veloc_hipo_w,2);
					if (mod(qt_veloc_calc_w,trunc(qt_veloc_calc_w)) >= 0.5) then
						qt_veloc_calc_w	:= round(qt_veloc_calc_w);
					else
						qt_veloc_calc_w	:= trunc(qt_veloc_calc_w);
					end if;
				end if;
			end if;
		elsif (qt_hgt_p >= 140) and (qt_hgt_p <= 179) then
			/* obter variação hgt */

			if (qt_var_hgt_ref_w > 25) then
				/* obter variação 2delta (incremento) */

				if (qt_veloc_atual_w < 3) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif (qt_veloc_atual_w >= 7) and (qt_veloc_atual_w <= 10) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif (qt_veloc_atual_w >= 11) and (qt_veloc_atual_w <= 15) then
					qt_veloc_calc_w := qt_veloc_atual_w + 2;
				elsif (qt_veloc_atual_w >= 16) and (qt_veloc_atual_w <= 20) then
					qt_veloc_calc_w := qt_veloc_atual_w + 3;
				elsif (qt_veloc_atual_w >= 21) and (qt_veloc_atual_w <= 25) then
					qt_veloc_calc_w := qt_veloc_atual_w + 4;
				end if;

			elsif (qt_var_hgt_ref_w = 25) or (qt_hgt_p = qt_hgt_ant_w) or
				(qt_var_hgt_ref_w <= -1 AND qt_var_hgt_ref_w >= -25) then
				qt_veloc_calc_w	:= qt_veloc_atual_w;
				ds_sugestao_w :=  obter_desc_expressao(346696); --'Não alterar a velocidade de infusão.';
			/*	if	(qt_veloc_atual_w < 3) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif	(qt_veloc_atual_w >= 3) and
					(qt_veloc_atual_w <= 6) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif	(qt_veloc_atual_w >= 7) and
					(qt_veloc_atual_w <= 10) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif	(qt_veloc_atual_w >= 11) and
					(qt_veloc_atual_w <= 15) then
					qt_veloc_calc_w := qt_veloc_atual_w + 2;
				elsif	(qt_veloc_atual_w >= 16) and
					(qt_veloc_atual_w <= 20) then
					qt_veloc_calc_w := qt_veloc_atual_w + 3;
				elsif	(qt_veloc_atual_w >= 21) and
					(qt_veloc_atual_w <= 25) then
					qt_veloc_calc_w := qt_veloc_atual_w + 4;
				elsif	(qt_veloc_atual_w >= 26) then
					qt_veloc_calc_w := qt_veloc_atual_w + 5;
				end if;*/
			elsif (qt_var_hgt_ref_w <= -26) and (qt_var_hgt_ref_w >= -50) then
				/* obter variação delta (decremento) */

				if (qt_veloc_atual_w < 3) then
					qt_veloc_calc_w := qt_veloc_atual_w - 1;
				elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
					qt_veloc_calc_w := qt_veloc_atual_w - 1;
				elsif (qt_veloc_atual_w >= 7) and (qt_veloc_atual_w <= 10) then
					qt_veloc_calc_w := qt_veloc_atual_w - 1;
				elsif (qt_veloc_atual_w >= 11) and (qt_veloc_atual_w <= 15) then
					qt_veloc_calc_w := qt_veloc_atual_w - 2;
				elsif (qt_veloc_atual_w >= 16) and (qt_veloc_atual_w <= 20) then
					qt_veloc_calc_w := qt_veloc_atual_w - 3;
				elsif (qt_veloc_atual_w >= 21) and (qt_veloc_atual_w <= 25) then
					qt_veloc_calc_w := qt_veloc_atual_w - 4;
				end if;

			elsif (qt_var_hgt_ref_w < -51) then
				ds_sugestao_w := obter_desc_expressao(346698)/*'Pausar a infusão durante 30 minutos e, após, reiniciar de acordo com o valor sugerido.'*/
;
				qt_minuto_w := 30;
				/* obter variação 2delta (decremento) */

				if (qt_veloc_atual_w < 3) then
					qt_veloc_calc_w := qt_veloc_atual_w - 1;
				elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
					qt_veloc_calc_w := qt_veloc_atual_w - 2;
				elsif (qt_veloc_atual_w >= 7) and (qt_veloc_atual_w <= 10) then
					qt_veloc_calc_w := qt_veloc_atual_w - 3;
				elsif (qt_veloc_atual_w >= 11) and (qt_veloc_atual_w <= 15) then
					qt_veloc_calc_w := qt_veloc_atual_w - 4;
				elsif (qt_veloc_atual_w >= 16) and (qt_veloc_atual_w <= 20) then
					qt_veloc_calc_w := qt_veloc_atual_w - 6;
				elsif (qt_veloc_atual_w >= 21) and (qt_veloc_atual_w <= 25) then
					qt_veloc_calc_w := qt_veloc_atual_w - 8;
				end if;
			end if;

		elsif (qt_hgt_p >= 180) then
			/* obter variação hgt */

			if (qt_var_hgt_ref_w > 50) then
				/* obter variação 2delta (incremento) */

				if (qt_veloc_atual_w < 3) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
					qt_veloc_calc_w := qt_veloc_atual_w + 2;
				elsif (qt_veloc_atual_w >= 7) and (qt_veloc_atual_w <= 10) then
					qt_veloc_calc_w := qt_veloc_atual_w + 3;
				elsif (qt_veloc_atual_w >= 11) and (qt_veloc_atual_w <= 15) then
					qt_veloc_calc_w := qt_veloc_atual_w + 4;
				elsif (qt_veloc_atual_w >= 16) and (qt_veloc_atual_w <= 20) then
					qt_veloc_calc_w := qt_veloc_atual_w + 6;
				elsif (qt_veloc_atual_w >= 21) and (qt_veloc_atual_w <= 25) then
					qt_veloc_calc_w := qt_veloc_atual_w + 8;
				end if;

			elsif (qt_var_hgt_ref_w >= 0) and (qt_var_hgt_ref_w <= 50) then
				/* obter variação delta (incremento) */

				if (qt_veloc_atual_w < 3) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif (qt_veloc_atual_w >= 7) and (qt_veloc_atual_w <= 10) then
					qt_veloc_calc_w := qt_veloc_atual_w + 1;
				elsif (qt_veloc_atual_w >= 11) and (qt_veloc_atual_w <= 15) then
					qt_veloc_calc_w := qt_veloc_atual_w + 2;
				elsif (qt_veloc_atual_w >= 16) and (qt_veloc_atual_w <= 20) then
					qt_veloc_calc_w := qt_veloc_atual_w + 3;
				elsif (qt_veloc_atual_w >= 21) and (qt_veloc_atual_w <= 25) then
					qt_veloc_calc_w := qt_veloc_atual_w + 4;
				end if;

			elsif (qt_var_hgt_ref_w <= -1) and (qt_var_hgt_ref_w >= -50) then
				qt_veloc_calc_w := qt_veloc_atual_w;
				ds_sugestao_w := obter_desc_expressao(346696); --'Não alterar a velocidade de infusão.';
			elsif (qt_var_hgt_ref_w <= -51) and (qt_var_hgt_ref_w >= -75) then
				/* obter variação delta (decremento) */

				--ds_sugestao_w	:= 'Pausar a infusão durante 30 minutos e, após, reiniciar de acordo com o valor sugerido.';
				if (qt_veloc_atual_w < 3) then
					qt_veloc_calc_w := qt_veloc_atual_w - 1;
				elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
					qt_veloc_calc_w := qt_veloc_atual_w - 1;
				elsif (qt_veloc_atual_w >= 7) and (qt_veloc_atual_w <= 10) then
					qt_veloc_calc_w := qt_veloc_atual_w - 1;
				elsif (qt_veloc_atual_w >= 11) and (qt_veloc_atual_w <= 15) then
					qt_veloc_calc_w := qt_veloc_atual_w - 2;
				elsif (qt_veloc_atual_w >= 16) and (qt_veloc_atual_w <= 20) then
					qt_veloc_calc_w := qt_veloc_atual_w - 3;
				elsif (qt_veloc_atual_w >= 21) and (qt_veloc_atual_w <= 25) then
					qt_veloc_calc_w := qt_veloc_atual_w - 4;
				end if;

			elsif (qt_var_hgt_ref_w < -75) then
				ds_sugestao_w	:= obter_desc_expressao(346698)/*'Pausar a infusão durante 30 minutos e, após, reiniciar de acordo com o valor sugerido.'*/
;
				qt_minuto_w := 30;
				/* obter variação 2delta (decremento) */

				if (qt_veloc_atual_w < 3) then
					qt_veloc_calc_w := qt_veloc_atual_w - 1;
				elsif (qt_veloc_atual_w >= 3) and (qt_veloc_atual_w <= 6) then
					qt_veloc_calc_w := qt_veloc_atual_w - 2;
				elsif (qt_veloc_atual_w >= 7) and (qt_veloc_atual_w <= 10) then
					qt_veloc_calc_w := qt_veloc_atual_w - 3;
				elsif (qt_veloc_atual_w >= 11) and (qt_veloc_atual_w <= 15) then
					qt_veloc_calc_w := qt_veloc_atual_w - 4;
				elsif (qt_veloc_atual_w >= 16) and (qt_veloc_atual_w <= 20) then
					qt_veloc_calc_w := qt_veloc_atual_w - 6;
				elsif (qt_veloc_atual_w >= 21) and (qt_veloc_atual_w <= 25) then
					qt_veloc_calc_w := qt_veloc_atual_w - 8;
				end if;
			end if;
		end if;

	/* obter sequência */

	select	nextval('atendimento_cig_seq')
	into STRICT	nr_sequencia_w
	;

	/* validar velocidade calculada */

	if (qt_veloc_calc_w < 0) then
		qt_veloc_calc_w := 0;
	else

		begin
		qt_veloc_calc_w := arredondar_valores_cig(qt_veloc_calc_w);
		exception when others then
		ds_erro_w	:= ds_erro_w;
		end;
		/*if	(qt_hgt_p >= 70) and
			(qt_veloc_calc_w = 0) then
			ds_sugestao_w	:= null;
		end if;*/
	end if;

	/* calcular próximo controle */

	if (qt_minuto_w >= 60) and (qt_min_interv_fut_w > qt_minuto_w) then
		qt_minuto_w := qt_min_interv_fut_w;
	end if;
	dt_proximo_controle_w := dt_cig_w + qt_minuto_w/1440;

	insert into atendimento_cig(
					nr_sequencia,
					nr_cig,
					dt_proximo_controle,
					nr_atendimento,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					dt_controle,
					qt_hgt,
					qt_variacao_hgt,
					qt_var_hgt_ref,
					qt_min_var,
					qt_min_interv_fut,
					qt_bolus_calc,
					qt_bolus_adm,
					qt_veloc_calc,
					qt_veloc_adm,
					qt_glicose_calc,
					qt_glicose_adm,
					ds_sugestao,
					ds_observacao,
					dt_prev_controle,
					dt_limite_ant,
					dt_limite_pos,
					ie_status_cig,
					nr_cig_atend,
					nr_seq_glicemia,
					nr_seq_horario,
					cd_material,
					qt_material
					)
				values (
					nr_sequencia_w,
					nr_cig_w,
					dt_proximo_controle_w,
					nr_atendimento_p,
					dt_atualizacao_w,
					nm_usuario_p,
					dt_atualizacao_w,
					nm_usuario_p,
					dt_cig_w,
					qt_hgt_p,
					qt_variacao_hgt_w,
					qt_var_hgt_ref_w,
					qt_min_variacao_w,
					qt_minuto_w,
					CASE WHEN ie_bolus_w='S' THEN  qt_bolus_calc_w  ELSE 0 END ,
					CASE WHEN ie_bolus_w='S' THEN  qt_bolus_calc_w  ELSE 0 END ,
					qt_veloc_calc_w,
					qt_veloc_calc_w,
					qt_glicose_calc_w,
					qt_glicose_calc_w,
					ds_sugestao_w,
					ds_observacao_w,
					dt_prev_controle_w,
					dt_prev_controle_w - qt_min_glic_w / 1440,
					dt_prev_controle_w + qt_min_glic_w / 1440,
					CASE WHEN ie_status_cig_w='R' THEN  ie_status_cig_w  ELSE 'N' END ,
					nr_cig_atend_w,
					CASE WHEN nr_seq_glicemia_w=0 THEN null  ELSE nr_seq_glicemia_w END ,
					nr_seq_horario_p,
					cd_material_w,
					qt_material_w
					);

	/* consistir glicemia estavel */

	ie_estavel_w := consistir_glicemia_estavel(nr_atendimento_p, nr_seq_glicemia_w, nr_cig_atend_w, ie_estavel_w);
	if (ie_estavel_w = 'S') then
		select	ds_sugestao
		into STRICT	ds_sugestao_w
		from	atendimento_cig
		where	nr_sequencia = nr_sequencia_w;

		if (coalesce(ds_sugestao_w::text, '') = '') then
			update	atendimento_cig
			set	ds_sugestao = obter_desc_expressao(346700)/*'O valor da glicemia encontra-se estável há três medidas consecutivas.' || chr(10) ||
						'Considerar um aumento no intervalo de tempo entre as medidas de glicemia.'*/
			where	nr_sequencia = nr_sequencia_w;
		else
			update	atendimento_cig
			set	ds_sugestao = ds_sugestao || chr(10) || chr(10) || obter_desc_expressao(346704)/*'Atenção: O valor da glicemia encontra-se estável há três medidas consecutivas.' || chr(10) ||
										'Considerar um aumento no intervalo de tempo entre as medidas de glicemia*/
			where	nr_sequencia = nr_sequencia_w;
		end if;
	end if;
	end if;
	/* gerar evento */

	CALL gerar_alteracao_cig(nr_sequencia_w, 3, ' ', nm_usuario_p);

	/* gerar horario */

	CALL gerar_horario_cig(nr_seq_glicemia_w, nr_sequencia_w, nm_usuario_p);

	if (ie_registrar_sv_w = 'S') then

		select	max(nr_seq_assinatura)
		into STRICT	nr_seq_assinatura_w
		from	prescr_mat_alteracao
		where	nr_prescricao 		= nr_prescricao_p
		and		nr_seq_procedimento = nr_seq_proced_p
		and		nr_seq_horario_proc	= nr_seq_horario_p;

		if (ie_gera_adm_w = 'S') then
			qt_glicose_adm_w :=  qt_glicose_w;
		else
			qt_glicose_adm_w := null;
		end if;

		CALL ADEP_gerar_SV_Glicemia(nr_atendimento_p, qt_hgt_p, nm_usuario_p, qt_glicose_calc_w, dt_cig_w, nr_seq_assinatura_w, null, null, qt_glicose_adm_w);
	end if;

end if;

nr_seq_cig_p := nr_sequencia_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_cig_hdh (nr_atendimento_p bigint, nr_prescricao_p bigint, nr_seq_proced_p bigint, nr_seq_horario_p bigint, nr_seq_glicemia_p bigint, dt_hgt_p timestamp, qt_hgt_p bigint, ie_sintomatico_p text, cd_material_p bigint, qt_material_p bigint, nm_usuario_p text, nr_seq_cig_p INOUT bigint) FROM PUBLIC;

