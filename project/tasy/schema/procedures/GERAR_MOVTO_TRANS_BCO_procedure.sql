-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_movto_trans_bco ( nr_seq_escrit_p bigint, dt_transacao_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text, ie_acao_p text) AS $body$
DECLARE



cd_tipo_baixa_w             parametros_contas_pagar.cd_tipo_baixa_padrao%type;
cd_tipo_baixa_tf_w          transacao_financeira.cd_tipo_baixa%type;
nr_seq_movto_w              movto_trans_financ.nr_sequencia%type;
nr_seq_banco_escrit_w       banco_escritural.nr_sequencia%type;
nr_seq_trans_escrit_w       banco_escritural.nr_seq_trans_financ%type;
nr_seq_conta_banco_w        banco_escritural.nr_seq_conta_banco%type;
vl_liquidacao_w             titulo_pagar_escrit.vl_escritural%type;
nr_tit_alterado_w           titulo_pagar_escrit.nr_titulo%type;

vl_tributo_w                w_titulo_pagar_imposto.vl_imposto%type;
vl_saldo_titulo_w           titulo_pagar_escrit.vl_escritural%type;
vl_escritural_w             titulo_pagar_escrit.vl_escritural%type;
ie_liquidacao_w             varchar(1);

nr_seq_baixa_est_w          titulo_pagar_baixa.nr_sequencia%type;
nr_seq_baixa_orig_w         titulo_pagar_baixa.nr_sequencia%type;
nr_seq_movto_trans_fin_w    titulo_pagar_baixa.nr_seq_movto_trans_fin%type;
nr_seq_movto_estorno_w      movto_trans_financ.nr_sequencia%type;
ie_movto_bco_pag_escrit_w   parametros_contas_pagar.ie_movto_bco_pag_escrit%type;
ie_bloquear_titulo_w        erro_escritural.ie_bloquear_titulo%type;
ie_excluir_titulo_w         erro_escritural.ie_excluir_titulo%type;

c01 CURSOR FOR
SELECT  a.nr_titulo
from  titulo_pagar_escrit a
where  a.nr_seq_escrit  = nr_seq_escrit_p;

c02 CURSOR FOR
SELECT  a.nr_titulo nr_titulo,
        coalesce(coalesce(a.vl_escritural,0) + coalesce(a.vl_juros,0) + coalesce(a.vl_multa,0) + coalesce(a.vl_acrescimo,0) - coalesce(a.vl_desconto,0) + coalesce(a.vl_despesa,0), 0) vl_liquidacao,
        a.ds_erro,
        b.cd_banco  
from  titulo_pagar_escrit a,
    banco_escritural b
where ('N' = coalesce(ie_liquidacao_w,'N') or
  exists (SELECT  1
  from  banco_retorno_cp x
  where  x.cd_retorno_liq  = a.ds_erro
  and  x.cd_banco    = b.cd_banco))
and  a.nr_seq_escrit = nr_seq_escrit_p
and  a.nr_seq_escrit  = b.nr_sequencia;

c03 CURSOR FOR
SELECT  c.cd_cgc,
        c.cd_pessoa_fisica,
        rtrim(xmlagg(XMLELEMENT(name e, a.nr_titulo, ',')).extract['//text()'].getclobval(), ',') lista_titulos,
        sum(coalesce(coalesce(a.vl_escritural,0) + coalesce(a.vl_juros,0) + coalesce(a.vl_multa,0) + coalesce(a.vl_acrescimo,0) - coalesce(a.vl_desconto,0) + coalesce(a.vl_despesa,0), 0)) vl_liquidacao
from  titulo_pagar_escrit a,
    banco_escritural b,
    titulo_pagar c
where  not exists (SELECT  1
  from  erro_escritural x
  where (x.ie_bloquear_titulo  = 'S' or x.ie_excluir_titulo = 'S')
  and  x.cd_erro    = a.ds_erro)
and ('N' = coalesce(ie_liquidacao_w,'N') or
  exists (select  1
  from  banco_retorno_cp x
  where  x.cd_retorno_liq  = a.ds_erro
  and  x.cd_banco    = b.cd_banco))
and  a.nr_seq_escrit = nr_seq_escrit_p
and  a.nr_titulo = c.nr_titulo
and  a.nr_seq_escrit  = b.nr_sequencia
group by c.cd_cgc, c.cd_pessoa_fisica;

c04 CURSOR FOR
SELECT  a.nr_sequencia,
        a.cd_pessoa_fisica,
        a.cd_cgc,
        a.vl_transacao
from  movto_trans_financ a
where  a.nr_seq_banco_escrit  = nr_seq_escrit_p
and coalesce(ie_estorno::text, '') = ''
and not exists (SELECT x.nr_sequencia from movto_trans_financ x where a.nr_sequencia = x.nr_seq_movto_orig);

BEGIN


select  coalesce(max(nr_seq_trans_financ),0)
into STRICT  nr_seq_trans_escrit_w
from  banco_escritural
where  nr_sequencia = nr_seq_escrit_p;

if (nr_seq_trans_escrit_w = 0) then
  select  coalesce(max(nr_seq_trans_escrit),0)
  into STRICT  nr_seq_trans_escrit_w
  from  parametro_tesouraria
  where  cd_estabelecimento = cd_estabelecimento_p;
end if;

if (nr_seq_trans_escrit_w = 0) then
  -- A transacao de pagamento escritural nao esta cadastrada! Verifique os parametros da tesouraria. 
  CALL wheb_mensagem_pck.exibir_mensagem_abort(nr_seq_mensagem_p => 215718);

end if;

select  coalesce(max(cd_tipo_baixa_padrao), 0),
  coalesce(max(ie_movto_bco_pag_escrit),'T') -- OS 1847261  - Jean 
into STRICT  cd_tipo_baixa_w,
  ie_movto_bco_pag_escrit_w -- OS 1847261  - Jean 
from  parametros_contas_pagar
where  cd_estabelecimento = cd_estabelecimento_p;

select  max(cd_tipo_baixa)
into STRICT  cd_tipo_baixa_tf_w
from  transacao_financeira
where  nr_sequencia  = nr_seq_trans_escrit_w;

cd_tipo_baixa_w    := coalesce(cd_tipo_baixa_tf_w ,cd_tipo_baixa_w);

if (cd_tipo_baixa_w = 0) then
  -- O tipo baixa padrao nao esta cadastrado! Verifique os parametros do contas a pagar. 
  CALL wheb_mensagem_pck.exibir_mensagem_abort(nr_seq_mensagem_p => 215719);
end if;

-- obter os parametros para gerar a movimentacao bancaria
select  coalesce(sum(coalesce(a.vl_escritural,0) + coalesce(a.vl_juros,0) + coalesce(a.vl_multa,0) + coalesce(a.vl_acrescimo,0) - coalesce(a.vl_desconto,0) + coalesce(a.vl_despesa,0)), 0),
  max(b.nr_seq_conta_banco),
  max(b.nr_sequencia)
into STRICT  vl_liquidacao_w,
  nr_seq_conta_banco_w,
  nr_seq_banco_escrit_w
from  titulo_pagar_escrit a,
  banco_escritural b
where  not exists (SELECT  1
  from  erro_escritural x
  where (x.ie_bloquear_titulo  = 'S' or x.ie_excluir_titulo  = 'S')
  and  x.cd_erro    = a.ds_erro)
and ('N' = coalesce(ie_liquidacao_w,'N') or
  exists (select  1
  from  banco_retorno_cp x
  where  x.cd_retorno_liq  = a.ds_erro
  and  x.cd_banco    = b.cd_banco))
and  a.nr_seq_escrit = nr_seq_escrit_p
and  a.nr_seq_escrit = b.nr_sequencia
and  ((coalesce(a.dt_liquidacao::text, '') = '' and ie_acao_p = 'I') or ie_acao_p = 'E');

select  coalesce(max(a.nr_titulo), 0)
into STRICT  nr_tit_alterado_w
from  titulo_pagar a,
  titulo_pagar_escrit b
where  a.nr_titulo = b.nr_titulo
and  a.vl_saldo_titulo <> b.vl_escritural
and  coalesce(b.dt_liquidacao::text, '') = ''
and  b.nr_seq_escrit = nr_seq_escrit_p;

if (nr_tit_alterado_w <> 0) and (vl_liquidacao_w > 0) then

  select  coalesce(max(obter_saldo_titulo_pagar(a.nr_titulo,clock_timestamp())),0),
    coalesce(max(a.vl_escritural),0)
  into STRICT  vl_saldo_titulo_w,
    vl_escritural_w
  from  titulo_pagar_escrit a
  where  a.nr_titulo  = nr_tit_alterado_w
  and  a.nr_seq_escrit  = nr_seq_escrit_p;

  select  coalesce(sum(vl_imposto),0)
  into STRICT  vl_tributo_w
  from  w_titulo_pagar_imposto
  where  nr_titulo  = nr_tit_alterado_w;

  if (vl_saldo_titulo_w - vl_tributo_w <> vl_escritural_w) then
    -- Nao e possivel fazer a baixa! O titulo nr_tit_alterado_w teve o valor alterado apos a vinculacao do pagamento escritural. 
    CALL wheb_mensagem_pck.exibir_mensagem_abort(nr_seq_mensagem_p => 215720, vl_macros_p => 'NR_TIT_ALTERADO_W='||to_char(nr_tit_alterado_w));
  end if;
end if;

ie_liquidacao_w := obter_param_usuario(857, 30, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_liquidacao_w);

if (vl_liquidacao_w <> 0) then

  if (ie_movto_bco_pag_escrit_w = 'T')  then
  -- OS 1847261  - Jean   -   Gerar movto  para cada titulo caso  ie_movto_bco_pag_escrit = 'T'
    <<reg_titulos_w>>
    for reg_titulos_w in c02
    loop
      
      SELECT * FROM consistir_erro_escritural(reg_titulos_w.ds_erro, nr_seq_banco_escrit_w, reg_titulos_w.cd_banco, reg_titulos_w.nr_titulo, cd_estabelecimento_p, nm_usuario_p, ie_bloquear_titulo_w, ie_excluir_titulo_w) INTO STRICT ie_bloquear_titulo_w, ie_excluir_titulo_w;

      if (coalesce(ie_bloquear_titulo_w,'N')  <> 'S') and (coalesce(ie_excluir_titulo_w,'N')	<> 'S') then

      select  nextval('movto_trans_financ_seq')
      into STRICT  nr_seq_movto_w
;

      insert into movto_trans_financ(nr_sequencia,
        dt_atualizacao,
        nm_usuario,
        vl_transacao,
        dt_transacao,
        nr_seq_trans_financ,
        nr_seq_banco,
        dt_referencia_saldo,
        nr_seq_banco_escrit,
        nr_lote_contabil,
        CD_TIPO_BAIXA_CPA,
        ie_conciliacao,
        nr_documento,
        nr_seq_titulo_pagar)
      values (nr_seq_movto_w,
        clock_timestamp(),
        nm_usuario_p,
        CASE WHEN ie_acao_p='E' THEN reg_titulos_w.vl_liquidacao * -1  ELSE reg_titulos_w.vl_liquidacao END ,
        dt_transacao_p,
        nr_seq_trans_escrit_w,
        nr_seq_conta_banco_w,
        dt_transacao_p,
        nr_seq_banco_escrit_w,
        0,
        cd_tipo_baixa_w,
        'N',
        nr_seq_escrit_p,
        reg_titulos_w.nr_titulo);

      if (ie_acao_p  = 'I') then

        CALL Atualizar_Transacao_Financeira(cd_estabelecimento_p, nr_seq_movto_w, nm_usuario_p, 'I');

      end if;

      end if;

    end loop reg_titulos_w;

  elsif (ie_movto_bco_pag_escrit_w = 'F')  then  

    if (ie_acao_p  = 'I') then

      <<reg_fornecedores_w>>
      for reg_fornecedores_w in c03
      loop

        select  nextval('movto_trans_financ_seq')
        into STRICT  nr_seq_movto_w
;        insert into movto_trans_financ(nr_sequencia,
          dt_atualizacao,
          nm_usuario,
          vl_transacao,
          dt_transacao,
          cd_pessoa_fisica,
          cd_cgc,
          nr_seq_trans_financ,
          nr_seq_banco,
          dt_referencia_saldo,
          nr_seq_banco_escrit,
          nr_lote_contabil,
          CD_TIPO_BAIXA_CPA,
          ie_conciliacao,
          nr_documento,
          ds_observacao)
        values (nr_seq_movto_w,
          clock_timestamp(),
          nm_usuario_p,
          reg_fornecedores_w.vl_liquidacao,
          dt_transacao_p,
          reg_fornecedores_w.cd_pessoa_fisica,
          reg_fornecedores_w.cd_cgc,
          nr_seq_trans_escrit_w,
          nr_seq_conta_banco_w,
          dt_transacao_p,
          nr_seq_banco_escrit_w,
          0,
          cd_tipo_baixa_w,
          'N',
          nr_seq_escrit_p,
          reg_fornecedores_w.lista_titulos);

          CALL Atualizar_Transacao_Financeira(cd_estabelecimento_p, nr_seq_movto_w, nm_usuario_p, 'I');

      end loop reg_fornecedores_w;

    else
      
      <<reg_movimentos_w>>
      for reg_movimentos_w in c04
      loop
        
        select  nextval('movto_trans_financ_seq')
        into STRICT  nr_seq_movto_w
;

        insert into movto_trans_financ(nr_sequencia,
          dt_atualizacao,
          cd_pessoa_fisica,
          cd_cgc,
          nm_usuario,
          vl_transacao,
          dt_transacao,
          nr_seq_trans_financ,
          nr_seq_banco,
          nr_seq_movto_orig,
          ie_estorno,
          dt_referencia_saldo,
          nr_seq_banco_escrit,
          nr_lote_contabil,
          CD_TIPO_BAIXA_CPA,
          ie_conciliacao,
          nr_documento)
        values (nr_seq_movto_w,
          clock_timestamp(),
          reg_movimentos_w.cd_pessoa_fisica,
          reg_movimentos_w.cd_cgc,
          nm_usuario_p,
          reg_movimentos_w.vl_transacao * -1,
          dt_transacao_p,
          nr_seq_trans_escrit_w,
          nr_seq_conta_banco_w,
          reg_movimentos_w.nr_sequencia,
          'E',
          dt_transacao_p,
          nr_seq_banco_escrit_w,
          0,
          cd_tipo_baixa_w,
          'N',
          nr_seq_escrit_p);

        update  titulo_pagar_baixa a
        set  a.nr_seq_movto_trans_fin  = nr_seq_movto_w
        where  coalesce(a.nr_seq_movto_trans_fin::text, '') = ''
        and  a.nr_seq_escrit    = nr_seq_banco_escrit_w
        and  a.nr_titulo in (SELECT x.nr_titulo 
            from titulo_pagar x, titulo_pagar_escrit y 
            where x.nr_titulo = y.nr_titulo
            and y.nr_seq_escrit = nr_seq_banco_escrit_w 
            and (x.cd_pessoa_fisica = reg_movimentos_w.cd_pessoa_fisica or x.cd_cgc = reg_movimentos_w.cd_cgc));

      end loop reg_movimentos_w;

    end if;

  else

    select  nextval('movto_trans_financ_seq')
    into STRICT  nr_seq_movto_w
;

    insert into movto_trans_financ(nr_sequencia,
      dt_atualizacao,
      nm_usuario,
      vl_transacao,
      dt_transacao,
      nr_seq_trans_financ,
      nr_seq_banco,
      dt_referencia_saldo,
      nr_seq_banco_escrit,
      nr_lote_contabil,
      CD_TIPO_BAIXA_CPA,
      ie_conciliacao,
      nr_documento)
    values (nr_seq_movto_w,
      clock_timestamp(),
      nm_usuario_p,
      CASE WHEN ie_acao_p='E' THEN vl_liquidacao_w * -1  ELSE vl_liquidacao_w END ,
      dt_transacao_p,
      nr_seq_trans_escrit_w,
      nr_seq_conta_banco_w,
      dt_transacao_p,
      nr_seq_banco_escrit_w,
      0,
      cd_tipo_baixa_w,
      'N',
      nr_seq_escrit_p);
  end if;

  update  banco_escritural
  set  dt_baixa  = CASE WHEN ie_acao_p='E' THEN null  ELSE dt_transacao_p END ,
    dt_baixa_orig  = CASE WHEN dt_baixa_orig = NULL THEN CASE WHEN ie_acao_p='I' THEN clock_timestamp() END   ELSE dt_baixa_orig END ,
    dt_atualizacao  = clock_timestamp(),
    nm_usuario  = nm_usuario_p
  where  nr_sequencia  = nr_seq_escrit_p;

  if (ie_acao_p  = 'I') then
    if (ie_movto_bco_pag_escrit_w = 'L')  then
    
      CALL Atualizar_Transacao_Financeira(cd_estabelecimento_p, nr_seq_movto_w, nm_usuario_p, 'I');

    end if;

  elsif (ie_acao_p  = 'E' and ie_movto_bco_pag_escrit_w <> 'F') then

    <<reg_titulo_w>>
    for reg_titulo_w in c01
    loop

      -- obter a baixa de estorno 
      select  max(a.nr_sequencia)
      into STRICT  nr_seq_baixa_est_w
      from  titulo_pagar_baixa a
      where  a.nr_titulo  = reg_titulo_w.nr_titulo
      and  a.nr_seq_escrit  = nr_seq_escrit_p;

      -- obter a baixa que originou o estorno 
      select  max(a.nr_seq_baixa_origem)
      into STRICT  nr_seq_baixa_orig_w
      from  titulo_pagar_baixa a
      where  a.nr_sequencia  = nr_seq_baixa_est_w
      and  a.nr_titulo  = reg_titulo_w.nr_titulo;

      -- conferir se a baixa de origem gerou movimentacao bancaria 
      select  max(a.nr_seq_movto_trans_fin)
      into STRICT  nr_seq_movto_trans_fin_w
      from  titulo_pagar_baixa a
      where  a.nr_sequencia  = nr_seq_baixa_orig_w
      and  a.nr_titulo  = reg_titulo_w.nr_titulo;

      if (nr_seq_movto_trans_fin_w IS NOT NULL AND nr_seq_movto_trans_fin_w::text <> '') then

        -- obter a movimentacao bancaria do estorno 
        select  max(x.nr_sequencia)
        into STRICT  nr_seq_movto_estorno_w
        from  movto_trans_financ x
        where  x.nr_seq_titulo_pagar  = reg_titulo_w.nr_titulo
        and  x.nr_seq_banco_escrit  = nr_seq_escrit_p
        and  x.nr_sequencia    > nr_seq_movto_trans_fin_w;

        if (coalesce(nr_seq_movto_estorno_w::text, '') = '') then

          select  max(x.nr_sequencia)
          into STRICT  nr_seq_movto_estorno_w
          from  movto_trans_financ x
          where  coalesce(x.nr_seq_titulo_pagar::text, '') = ''
          and  x.nr_seq_banco_escrit  = nr_seq_escrit_p
          and  x.nr_sequencia    > nr_seq_movto_trans_fin_w;

        end if;

        update  titulo_pagar_baixa
        set  nr_seq_movto_trans_fin  = nr_seq_movto_estorno_w
        where  coalesce(nr_seq_movto_trans_fin::text, '') = ''
        and  nr_sequencia    = nr_seq_baixa_est_w
        and  nr_titulo    = reg_titulo_w.nr_titulo;

        update  movto_trans_financ
        set  nr_seq_movto_orig  = nr_seq_movto_trans_fin_w,
          ie_estorno    = 'E'
        where  coalesce(nr_seq_movto_orig::text, '') = ''
        and  nr_sequencia    = nr_seq_movto_estorno_w;

      end if;

    end loop reg_titulo_w;

  end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_movto_trans_bco ( nr_seq_escrit_p bigint, dt_transacao_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text, ie_acao_p text) FROM PUBLIC;

