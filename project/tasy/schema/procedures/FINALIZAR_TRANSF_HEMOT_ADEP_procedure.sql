-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE finalizar_transf_hemot_adep ( ie_opcao_p text, nr_seq_exame_lote_p bigint, nr_seq_transfusao_p bigint, cd_estabelecimento_p bigint, cd_perfil_p bigint, nm_usuario_p text ) AS $body$
DECLARE


/*	ie_opcao_p
	F - Finalizar
	D - Desfazer	*/
ie_consistir_exames_nao_lib_w	varchar(1);
ie_consistir_data_transf_w		varchar(1);
ie_atualiza_data_utilizacao_w	varchar(1);
ie_possuir_exames_nao_lib_w		varchar(1);
ie_data_utilizacao_w			varchar(1);
ie_desf_dt_fim_transf_w			varchar(1);
ie_dt_fim_ADEP_w				varchar(1);
qt_horas_consistir_w			bigint;
nr_seq_prescr_w					bigint;
nr_prescricao_w					bigint;
nr_atendimento_w				bigint;
nr_seq_reserva_w				bigint;
ds_erro_w						varchar(255);

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	prescr_procedimento
	where	coalesce(dt_suspensao::text, '') = ''
	and		(nr_seq_solic_sangue IS NOT NULL AND nr_seq_solic_sangue::text <> '')
	and		nr_prescricao = nr_prescricao_w
	order by 1;


BEGIN

if (ie_opcao_p = 'F') then
	begin
	ie_consistir_exames_nao_lib_w := obter_param_usuario(450, 93, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_consistir_exames_nao_lib_w);
	qt_horas_consistir_w := obter_param_usuario(450, 442, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, qt_horas_consistir_w);

	if (ie_consistir_exames_nao_lib_w = 'S') then
		begin
		select 	CASE WHEN sum(qt_exames_nao_lib)=0 THEN  'N'  ELSE 'S' END
		into STRICT	ie_possuir_exames_nao_lib_w
		from   (SELECT 	COUNT(1) qt_exames_nao_lib
			FROM 	san_exame_realizado a,
				san_exame_lote b,
				san_transfusao d
			WHERE 	a.nr_seq_exame_lote = b.nr_sequencia
			AND	b.nr_seq_transfusao = d.nr_sequencia
			and	d.nr_sequencia = nr_seq_transfusao_p
			AND	coalesce(a.dt_liberacao::text, '') = ''
			and not exists(	select	1
					from	san_transfusao g
					where	g.nr_atendimento = d.nr_atendimento
					and	g.nr_sequencia <> d.nr_sequencia
					and	g.ie_status = 'F'
					and	g.dt_transfusao between d.dt_transfusao-(coalesce(qt_horas_consistir_w,0)/24) and d.dt_transfusao)
			
UNION

			SELECT 	COUNT(1) qt_exames_nao_lib
			FROM 	san_exame_realizado a,
				san_exame_lote b,
				san_producao c,
				san_transfusao d
			WHERE 	a.nr_seq_exame_lote = b.nr_sequencia
			AND	b.nr_seq_producao = c.nr_sequencia
			AND	b.ie_origem = 'T'
			AND	c.nr_seq_transfusao = d.nr_sequencia
			and	d.nr_sequencia = nr_seq_transfusao_p
			AND	coalesce(a.dt_liberacao::text, '') = ''
			and not exists(	select	1
					from	san_transfusao g
					where	g.nr_atendimento = d.nr_atendimento
					and	g.nr_sequencia <> d.nr_sequencia
					and	g.ie_status = 'F'
					and	g.dt_transfusao between d.dt_transfusao-(coalesce(qt_horas_consistir_w,0)/24) and d.dt_transfusao)) alias12;

		if (ie_possuir_exames_nao_lib_w = 'S') then
			ds_erro_w	:= obter_texto_tasy(83474, wheb_usuario_pck.get_nr_seq_idioma);
		end if;
		end;
	end if;

	if (coalesce(ds_erro_w::text, '') = '') then
		begin
		ie_consistir_data_transf_w := obter_param_usuario(450, 61, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consistir_data_transf_w);

		if (ie_consistir_data_transf_w = 'S') then
			begin
			select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
			into STRICT	ie_data_utilizacao_w
			from	san_producao
			where	nr_seq_transfusao	= nr_seq_transfusao_p
			and (coalesce(dt_utilizacao::text, '') = '' or coalesce(dt_termino_util::text, '') = '');

			if (ie_data_utilizacao_w = 'S') then
				ds_erro_w	:= obter_texto_tasy(83475, wheb_usuario_pck.get_nr_seq_idioma);
			end if;
			end;
		end if;
		end;
	end if;

	if (coalesce(ds_erro_w::text, '') = '') then
		begin
		update	san_transfusao
		set	ie_status		= 'F',
			dt_fim_transfusao	= clock_timestamp()
		where	nr_sequencia	= nr_seq_transfusao_p;

		ie_atualiza_data_utilizacao_w := obter_param_usuario(450, 31, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_atualiza_data_utilizacao_w);

		if (ie_atualiza_data_utilizacao_w = 'S') then
			begin
			update	san_producao
			set	dt_termino_util	= clock_timestamp()
			where	nr_seq_transfusao	= nr_seq_transfusao_p
			and	coalesce(dt_termino_util::text, '') = '';
			end;
		end if;

		select	max(a.nr_prescricao)
		into STRICT	nr_prescricao_w
		from	san_transfusao a
		where	a.nr_sequencia = nr_seq_transfusao_p;

		if (coalesce(nr_prescricao_w::text, '') = '') then
			select	max(c.nr_prescricao),
					max(c.nr_seq_prescr)
			into STRICT	nr_prescricao_w,
					nr_seq_prescr_w
			from	san_reserva_item c,
					san_reserva b,
					san_transfusao a
			where	c.nr_seq_reserva = b.nr_sequencia
			and		b.nr_sequencia = a.nr_seq_reserva
			and		a.nr_sequencia = nr_seq_transfusao_p;
		end if;

		ie_dt_fim_ADEP_w := obter_param_usuario(450, 452, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_dt_fim_ADEP_w);

		if (ie_dt_fim_ADEP_w = 'S') and (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') then

			select	max(nr_atendimento)
			into STRICT	nr_atendimento_w
			from	prescr_medica
			where	nr_prescricao = nr_prescricao_w;

			if (coalesce(nr_seq_prescr_w::text, '') = '') then
				select	max(c.nr_seq_prescr)
				into STRICT	nr_seq_prescr_w
				from	san_reserva_item c,
						san_reserva b,
						san_transfusao a
				where	c.nr_seq_reserva = b.nr_sequencia
				and		b.nr_sequencia = a.nr_seq_reserva
				and		a.nr_sequencia = nr_seq_transfusao_p;
			end if;

			if (nr_seq_prescr_w IS NOT NULL AND nr_seq_prescr_w::text <> '') then
				update	prescr_proc_hor
				set		dt_fim_horario = clock_timestamp(),
						nm_usuario_adm = nm_usuario_p
				where	coalesce(dt_fim_horario::text, '') = ''
				and		nr_seq_procedimento = nr_seq_prescr_w
				and		nr_prescricao		= nr_prescricao_w;

			else
				open C01;
				loop
				fetch C01 into
					nr_seq_prescr_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					begin
					update	prescr_proc_hor
					set		dt_fim_horario = clock_timestamp(),
							nm_usuario_adm = nm_usuario_p
					where	coalesce(dt_fim_horario::text, '') = ''
					and		nr_seq_procedimento = nr_seq_prescr_w
					and		nr_prescricao		= nr_prescricao_w;

					end;
				end loop;
				close C01;
			end if;
		end if;
		end;
	end if;

    if (pkg_i18n.get_user_locale = 'es_BO') then
		CALL gerar_sangue_pend_pac(nr_seq_transfusao_p,null);
	end if;
	end;

elsif (ie_opcao_p = 'D') then
	begin
	update	san_transfusao
	set	ie_status		= 'A'
	where	nr_sequencia	=  nr_seq_transfusao_p;

	ie_desf_dt_fim_transf_w := obter_param_usuario(450, 95, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_desf_dt_fim_transf_w);

	if (ie_desf_dt_fim_transf_w = 'S') then
		begin
		update	san_producao
		set	dt_termino_util	 = NULL
		where	nr_seq_transfusao	= nr_seq_transfusao_p
		and	(dt_termino_util IS NOT NULL AND dt_termino_util::text <> '');
		end;
	end if;

	select	max(a.nr_prescricao)
	into STRICT	nr_prescricao_w
	from	san_transfusao a
	where	a.nr_sequencia = nr_seq_transfusao_p;

	if (coalesce(nr_prescricao_w::text, '') = '') then
		select	max(c.nr_prescricao),
				max(c.nr_seq_prescr)
		into STRICT	nr_prescricao_w,
				nr_seq_prescr_w
		from	san_reserva_item c,
				san_reserva b,
				san_transfusao a
		where	c.nr_seq_reserva = b.nr_sequencia
		and		b.nr_sequencia = a.nr_seq_reserva
		and		a.nr_sequencia = nr_seq_transfusao_p;
	end if;

	ie_dt_fim_ADEP_w := obter_param_usuario(450, 452, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_dt_fim_ADEP_w);

	if (ie_dt_fim_ADEP_w = 'S') and (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') then

		select	max(nr_atendimento)
		into STRICT	nr_atendimento_w
		from	prescr_medica
		where	nr_prescricao = nr_prescricao_w;

		if (coalesce(nr_seq_prescr_w::text, '') = '') then
			select	max(c.nr_seq_prescr),
					max(a.nr_seq_reserva)
			into STRICT	nr_seq_prescr_w,
					nr_seq_reserva_w
			from	san_reserva_item c,
					san_reserva b,
					san_transfusao a
			where	c.nr_seq_reserva = b.nr_sequencia
			and		b.nr_sequencia = a.nr_seq_reserva
			and		a.nr_sequencia = nr_seq_transfusao_p;

		end if;

		if (nr_seq_prescr_w IS NOT NULL AND nr_seq_prescr_w::text <> '') then
			update	prescr_proc_hor
			set		dt_fim_horario  = NULL,
					nm_usuario_adm  = NULL
			where	(dt_fim_horario IS NOT NULL AND dt_fim_horario::text <> '')
			and		nr_seq_procedimento = nr_seq_prescr_w
			and		nr_prescricao		= nr_prescricao_w;

		--	reverter_alteracao_solucao(cd_estabelecimento_p, nr_atendimento_w, 3, nr_prescricao_w, nr_seq_prescr_w, null, null, nm_usuario_p, nr_seq_reserva_w, null, null);
		else
			open C01;
			loop
			fetch C01 into
				nr_seq_prescr_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin
				update	prescr_proc_hor
				set		dt_fim_horario  = NULL,
						nm_usuario_adm  = NULL
				where	(dt_fim_horario IS NOT NULL AND dt_fim_horario::text <> '')
				and		nr_seq_procedimento = nr_seq_prescr_w
				and		nr_prescricao		= nr_prescricao_w;

--				reverter_alteracao_solucao(cd_estabelecimento_p, nr_atendimento_w, 3, nr_prescricao_w, nr_seq_prescr_w, null, null, nm_usuario_p, nr_seq_reserva_w, null, null);
				end;
			end loop;
			close C01;
		end if;
	end if;
	end;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE finalizar_transf_hemot_adep ( ie_opcao_p text, nr_seq_exame_lote_p bigint, nr_seq_transfusao_p bigint, cd_estabelecimento_p bigint, cd_perfil_p bigint, nm_usuario_p text ) FROM PUBLIC;

