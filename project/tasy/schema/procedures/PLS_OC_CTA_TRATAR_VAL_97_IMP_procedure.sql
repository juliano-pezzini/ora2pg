-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_97_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Aplicar a comparação entre prestadores. A combinação pode ser entre os prestadores do protocolo,
conta ou procedimento, Para cada  combinação, pode-se selecionar o tipo do prestador a ser comparado.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/nr_cont_w		integer;
tb_seq_selecao_w	pls_util_cta_pck.t_number_table;
tb_valido_w		pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w		pls_util_cta_pck.t_varchar2_table_4000;
ie_gera_ocorrencia_w	varchar(1);
qt_registro_w		integer;
nr_seq_prest_w		pls_prestador.nr_sequencia%type;
nr_seq_prest_comp_w	pls_prestador.nr_sequencia%type;
cd_prestador_w		pls_prestador.cd_prestador%type;
cd_prestador_comp_w	pls_prestador.cd_prestador%type;
ie_prestador_solic_util_w	pls_parametros.ie_prestador_solic_util%type;

-- Informações sobre a Regra
c01 CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	ie_valida_prest_info,
		ie_valida_prest_info_comp,
		ie_tipo_prestador,
		ie_tipo_prestador_comp,
		ie_comparacao,
		ie_campo
	from	pls_oc_cta_val_prest_dif
	where	nr_seq_oc_cta_comb = nr_seq_oc_cta_comb_pc;

-- Carrega os dados do prestador
c02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	a.nr_sequencia nr_seq_selecao,
		c.nr_sequencia nr_seq_protocolo,
		b.nr_seq_prest_solic_conv nr_seq_prestador,
		b.cd_prest_solic_conv cd_prestador,
		b.nr_seq_prest_exec_conv nr_seq_prestador_exec,
		b.cd_prest_exec_conv cd_prestador_exec,
		c.nr_seq_prestador_conv nr_seq_prest_prot,
		c.cd_prestador_conv cd_prestador_prot,
		b.nr_seq_guia_conv nr_seq_guia
	from	pls_oc_cta_selecao_imp a,
		pls_conta_imp b,
		pls_protocolo_conta_imp c
	where	a.nr_id_transacao = nr_id_transacao_pc
	and	a.ie_valido = 'S'
	and	b.nr_sequencia = a.nr_seq_conta
	and	c.nr_sequencia = b.nr_seq_protocolo;
BEGIN

if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') then
	nr_cont_w := 0;
	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', ie_regra_excecao_p, nr_id_transacao_p, null);
	-- Incializar as listas para cada regra.
	SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;

	-- Carrega as regras
	for r_c01_w in c01(nr_seq_combinada_p) loop

		-- Só executa a regra se ela não for de tipos de prestadores iguais
		if (r_c01_w.ie_tipo_prestador <> r_c01_w.ie_tipo_prestador_comp) then

			--Somente se a regra está para comparar com o prestador requisitante, então nesse caso, faz as buscas
			--baseado no que ocorre na população dessa informação na tabela quente(lá ocorre via pls_conta_atual, porém
			--aqui apenas buscará na exeução da regra).
			if (r_c01_w.ie_tipo_prestador_comp = 'R') then
				select	max(ie_prestador_solic_util)
				into STRICT	ie_prestador_solic_util_w
				from	table(pls_parametros_pck.f_retorna_param(wheb_usuario_pck.get_cd_estabelecimento));
			end if;

			-- abre o cursor com os prestadores a serem comparados
			for r_c02_w in c02(nr_id_transacao_p) loop

				-- inicia como não gera ocorrência
				ie_gera_ocorrencia_w := 'N';
				tb_observacao_w(nr_cont_w) := null;

				-- define qual é o prestador que precisa verificar
				case(r_c01_w.ie_tipo_prestador)
					-- atendimento
					when 'A' then
						nr_seq_prest_w := r_c02_w.nr_seq_prest_prot;
						cd_prestador_w := r_c02_w.cd_prestador_prot;
					-- solicitante
					when 'S' then
						nr_seq_prest_w := r_c02_w.nr_seq_prestador;
						cd_prestador_w := r_c02_w.cd_prestador;
					-- executor
					when 'E' then
						nr_seq_prest_w := r_c02_w.nr_seq_prestador_exec;
						cd_prestador_w := r_c02_w.cd_prestador_exec;
					else
						nr_seq_prest_w := null;
						cd_prestador_w := null;
				end case;

				-- define qual prestador de comparação
				case(r_c01_w.ie_tipo_prestador_comp)
					-- atendimento
					when 'A' then
						nr_seq_prest_comp_w := r_c02_w.nr_seq_prest_prot;
						cd_prestador_comp_w := r_c02_w.cd_prestador_prot;

					-- solicitante
					when 'S' then
						nr_seq_prest_comp_w := r_c02_w.nr_seq_prestador;
						cd_prestador_comp_w := r_c02_w.cd_prestador;
					-- executor
					when 'E' then
						nr_seq_prest_comp_w := r_c02_w.nr_seq_prestador_exec;
						cd_prestador_comp_w := r_c02_w.cd_prestador_exec;
					-- Requisitante
					when 'R' then

						if ( ie_prestador_solic_util_w	= 'R') then
							select	max(c.nr_seq_prestador)
							into STRICT	nr_seq_prest_comp_w
							from	pls_requisicao c,
								pls_execucao_req_item a
							where	a.nr_seq_requisicao	= c.nr_sequencia
							and	a.nr_seq_guia		= r_c02_w.nr_seq_guia;
						end if;
						if (ie_prestador_solic_util_w	= 'G') or
							((ie_prestador_solic_util_w	= 'R') and (coalesce(nr_seq_prest_comp_w::text, '') = ''))then
							select	max(nr_seq_prestador)
							into STRICT	nr_seq_prest_comp_w
							from	pls_guia_plano
							where	nr_sequencia	= r_c02_w.nr_seq_guia;
						end if;
						if (ie_prestador_solic_util_w		= 'C') or
							((ie_prestador_solic_util_w		in ('G','R')) and (coalesce(nr_seq_prest_comp_w::text, '') = '')) then
							nr_seq_prest_comp_w:= r_c02_w.nr_seq_prestador;
						end if;
						cd_prestador_comp_w := pls_obter_cod_prestador(nr_seq_prest_comp_w, null);
					when 'G' then --executor da guia
						select	max(nr_seq_prestador)
						into STRICT	nr_seq_prest_comp_w
						from	pls_guia_plano
						where	nr_sequencia	= r_c02_w.nr_seq_guia;

						cd_prestador_comp_w := pls_obter_cod_prestador(nr_seq_prest_comp_w, null);
					else
						nr_seq_prest_comp_w := null;
						cd_prestador_comp_w := null;
				end case;

				-- se obriga o prestador, e o mesmo não está informado...
				if (r_c01_w.ie_valida_prest_info = 'S') and (coalesce(nr_seq_prest_w::text, '') = '') then

					ie_gera_ocorrencia_w := 'S';
				end if;

				-- caso seja para validar o participante a validação é feita de uma outra forma
				if (r_c01_w.ie_tipo_prestador_comp = 'P') and (ie_gera_ocorrencia_w = 'N') then

					-- se for para verificar a igualdade
					if (r_c01_w.ie_comparacao = 'I') then

						-- verifica se existe algum participante diferente do prestador que precisa ser verificado
						select	sum(qt)
						into STRICT	qt_registro_w
						from (
							-- aqui retorna os que devem verificar a sequência
							SELECT	count(1) qt
							FROM pls_protocolo_conta_imp e, pls_conta_imp b, pls_oc_cta_selecao_imp a, pls_conta_proc_imp c
LEFT OUTER JOIN pls_conta_item_equipe_imp d ON (c.nr_sequencia = d.nr_seq_conta_proc)
WHERE r_c01_w.ie_campo = 'S' and a.nr_id_transacao = nr_id_transacao_p and a.ie_valido = 'S' and b.nr_sequencia = a.nr_seq_conta and c.nr_seq_conta = b.nr_sequencia  and e.nr_sequencia = b.nr_seq_protocolo and e.nr_sequencia = r_c02_w.nr_seq_protocolo and d.nr_seq_prestador_conv = nr_seq_prest_w
							
union all

							-- aqui retorna caso tenha que validar nulos
							SELECT	count(1) qt
							FROM pls_protocolo_conta_imp e, pls_conta_imp b, pls_oc_cta_selecao_imp a, pls_conta_proc_imp c
LEFT OUTER JOIN pls_conta_item_equipe_imp d ON (c.nr_sequencia = d.nr_seq_conta_proc)
WHERE a.nr_id_transacao = nr_id_transacao_p and a.ie_valido = 'S' and b.nr_sequencia = a.nr_seq_conta and c.nr_seq_conta = b.nr_sequencia  and e.nr_sequencia = b.nr_seq_protocolo and e.nr_sequencia = r_c02_w.nr_seq_protocolo and coalesce(d.nr_seq_prestador_conv::text, '') = '' and r_c01_w.ie_valida_prest_info_comp = 'S'
							 
union all

							-- aqui retorna quando deve validar o código do prestador
							select	count(1) qt
							FROM pls_prestador f, pls_protocolo_conta_imp e, pls_conta_imp b, pls_oc_cta_selecao_imp a, pls_conta_proc_imp c
LEFT OUTER JOIN pls_conta_item_equipe_imp d ON (c.nr_sequencia = d.nr_seq_conta_proc)
WHERE r_c01_w.ie_campo = 'C' and a.nr_id_transacao = nr_id_transacao_p and a.ie_valido = 'S' and b.nr_sequencia = a.nr_seq_conta and c.nr_seq_conta = b.nr_sequencia  and e.nr_sequencia = b.nr_seq_protocolo and e.nr_sequencia = r_c02_w.nr_seq_protocolo and f.nr_sequencia = d.nr_seq_prestador_conv and f.cd_prestador = cd_prestador_w
						 ) alias8;
					else
						-- verifica se existe algum participante diferente do prestador que precisa ser verificado
						select	sum(qt)
						into STRICT	qt_registro_w
						from (
							-- aqui retorna os que devem verificar a sequência
							SELECT	count(1) qt
							FROM pls_protocolo_conta_imp e, pls_conta_imp b, pls_oc_cta_selecao_imp a, pls_conta_proc_imp c
LEFT OUTER JOIN pls_conta_item_equipe_imp d ON (c.nr_sequencia = d.nr_seq_conta_proc)
WHERE r_c01_w.ie_campo = 'S' and a.nr_id_transacao = nr_id_transacao_p and a.ie_valido = 'S' and b.nr_sequencia = a.nr_seq_conta and c.nr_seq_conta = b.nr_sequencia  and e.nr_sequencia = b.nr_seq_protocolo and e.nr_sequencia = r_c02_w.nr_seq_protocolo and d.nr_seq_prestador_conv != nr_seq_prest_w
							
union all

							-- aqui retorna caso tenha que validar nulos
							SELECT	count(1) qt
							FROM pls_protocolo_conta_imp e, pls_conta_imp b, pls_oc_cta_selecao_imp a, pls_conta_proc_imp c
LEFT OUTER JOIN pls_conta_item_equipe_imp d ON (c.nr_sequencia = d.nr_seq_conta_proc)
WHERE a.nr_id_transacao = nr_id_transacao_p and a.ie_valido = 'S' and b.nr_sequencia = a.nr_seq_conta and c.nr_seq_conta = b.nr_sequencia  and e.nr_sequencia = b.nr_seq_protocolo and e.nr_sequencia = r_c02_w.nr_seq_protocolo and coalesce(d.nr_seq_prestador_conv::text, '') = '' and r_c01_w.ie_valida_prest_info_comp = 'S'
							 
union all

							-- aqui retorna quando deve validar o código do prestador
							select	count(1) qt
							FROM pls_prestador f, pls_protocolo_conta_imp e, pls_conta_imp b, pls_oc_cta_selecao_imp a, pls_conta_proc_imp c
LEFT OUTER JOIN pls_conta_item_equipe_imp d ON (c.nr_sequencia = d.nr_seq_conta_proc)
WHERE r_c01_w.ie_campo = 'C' and a.nr_id_transacao = nr_id_transacao_p and a.ie_valido = 'S' and b.nr_sequencia = a.nr_seq_conta and c.nr_seq_conta = b.nr_sequencia  and e.nr_sequencia = b.nr_seq_protocolo and e.nr_sequencia = r_c02_w.nr_seq_protocolo and f.nr_sequencia = d.nr_seq_prestador_conv and f.cd_prestador != cd_prestador_w
						 ) alias5;
					end if;

					 -- se encontrou, registra a ocorrencia
					if (qt_registro_w > 0) then
						ie_gera_ocorrencia_w := 'S';
					end if;
				-- Validação por prestador fornecedor
				elsif (r_c01_w.ie_tipo_prestador_comp = 'F') and (ie_gera_ocorrencia_w = 'N') then

					-- se for para verificar a igualdade
					if (r_c01_w.ie_comparacao = 'I') then
						select	sum(qt)
						into STRICT	qt_registro_w
						from (
								-- aqui retorna os que devem verificar a sequência
								SELECT	count(1) qt
								from	pls_oc_cta_selecao_imp a,
										pls_conta_imp b,
										pls_conta_mat_imp c,
										pls_protocolo_conta_imp d
								where	r_c01_w.ie_campo = 'S'
								and	a.nr_id_transacao = nr_id_transacao_p
								and	a.ie_valido = 'S'
								and	b.nr_sequencia = a.nr_seq_conta
								and	c.nr_seq_conta = b.nr_sequencia
								and	d.nr_sequencia = b.nr_seq_protocolo
								and	d.nr_sequencia = r_c02_w.nr_seq_protocolo
								and	c.nr_seq_fornec_mat_conv = nr_seq_prest_w
								
union all

								-- aqui retorna caso tenha que validar nulos
								SELECT	count(1) qt
								from	pls_oc_cta_selecao_imp a,
										pls_conta_imp b,
										pls_conta_mat_imp c,
										pls_protocolo_conta_imp d
								where	a.nr_id_transacao = nr_id_transacao_p
								and	a.ie_valido = 'S'
								and	b.nr_sequencia = a.nr_seq_conta
								and	c.nr_seq_conta = b.nr_sequencia
								and	d.nr_sequencia = b.nr_seq_protocolo
								and	d.nr_sequencia = r_c02_w.nr_seq_protocolo
								and	coalesce(c.nr_seq_fornec_mat_conv::text, '') = ''
								and	r_c01_w.ie_valida_prest_info_comp = 'S'
								
union all

								-- aqui retorna quando deve validar o código do prestador
								select	count(1) qt
								from	pls_oc_cta_selecao_imp a,
										pls_conta_imp b,
										pls_conta_mat_imp c,
										pls_protocolo_conta_imp d,
										pls_prestador e
								where	r_c01_w.ie_campo = 'C'
								and	a.nr_id_transacao = nr_id_transacao_p
								and	a.ie_valido = 'S'
								and	b.nr_sequencia = a.nr_seq_conta
								and	c.nr_seq_conta = b.nr_sequencia
								and	d.nr_sequencia = b.nr_seq_protocolo
								and	d.nr_sequencia = r_c02_w.nr_seq_protocolo
								and	e.nr_sequencia = c.nr_seq_fornec_mat_conv
								and	e.cd_prestador = cd_prestador_w
						) alias8;
					else
						select	sum(qt)
							into STRICT	qt_registro_w
							from (
									-- aqui retorna os que devem verificar a sequência
									SELECT	count(1) qt
									from	pls_oc_cta_selecao_imp a,
											pls_conta_imp b,
											pls_conta_mat_imp c,
											pls_protocolo_conta_imp d
									where	r_c01_w.ie_campo = 'S'
									and		a.nr_id_transacao = nr_id_transacao_p
									and		a.ie_valido = 'S'
									and		b.nr_sequencia = a.nr_seq_conta
									and		c.nr_seq_conta = b.nr_sequencia
									and		d.nr_sequencia = b.nr_seq_protocolo
									and		d.nr_sequencia = r_c02_w.nr_seq_protocolo
									and		c.nr_seq_fornec_mat_conv != nr_seq_prest_w
									
union all

									-- aqui retorna caso tenha que validar nulos
									SELECT	count(1) qt
									from	pls_oc_cta_selecao_imp a,
											pls_conta_imp b,
											pls_conta_mat_imp c,
											pls_protocolo_conta_imp d
									where	a.nr_id_transacao = nr_id_transacao_p
									and		a.ie_valido = 'S'
									and		b.nr_sequencia = a.nr_seq_conta
									and		c.nr_seq_conta = b.nr_sequencia
									and		d.nr_sequencia = b.nr_seq_protocolo
									and		d.nr_sequencia = r_c02_w.nr_seq_protocolo
									and		coalesce(c.nr_seq_fornec_mat_conv::text, '') = ''
									and		r_c01_w.ie_valida_prest_info_comp = 'S'
									
union all

									-- aqui retorna quando deve validar o código do prestador
									select	count(1) qt
									from	pls_oc_cta_selecao_imp a,
											pls_conta_imp b,
											pls_conta_mat_imp c,
											pls_protocolo_conta_imp d,
											pls_prestador e
									where	r_c01_w.ie_campo = 'C'
									and		a.nr_id_transacao = nr_id_transacao_p
									and		a.ie_valido = 'S'
									and		b.nr_sequencia = a.nr_seq_conta
									and		c.nr_seq_conta = b.nr_sequencia
									and		d.nr_sequencia = b.nr_seq_protocolo
									and		d.nr_sequencia = r_c02_w.nr_seq_protocolo
									and		e.nr_sequencia = c.nr_seq_fornec_mat_conv
									and		e.cd_prestador != cd_prestador_w
							) alias5;
					end if;

					 -- se encontrou, registra a ocorrencia
					if (qt_registro_w > 0) then
						ie_gera_ocorrencia_w := 'S';
					end if;

				elsif (ie_gera_ocorrencia_w = 'N') then
					-- se obriga o prestador, e o mesmo não está informado... Prestador da comparação
					if (r_c01_w.ie_valida_prest_info_comp = 'S') and (coalesce(nr_seq_prest_comp_w::text, '') = '') then

						ie_gera_ocorrencia_w := 'S';
					end if;

					-- se for para validar a sequência
					if (r_c01_w.ie_campo = 'C') then

						-- se for para validar igualdade
						if (r_c01_w.ie_comparacao = 'I') then

							-- se os prestadores forem iguais gera a ocorrência
							-- caso não seja para verificar se o prestador está informado corretamente e algum deles for nulo,
							-- não deve gerar a ocorrência, para tratar os prestadores nulos deve ser marcado algum ou ambos os checkbox
							if (cd_prestador_comp_w = cd_prestador_w) then

								ie_gera_ocorrencia_w := 'S';
							end if;
						else
							-- se os prestadores forem diferentes gera a ocorrência
							if (cd_prestador_comp_w != cd_prestador_w) then

								ie_gera_ocorrencia_w := 'S';
							end if;
						end if;
					else
						-- se for para validar igualdade
						if (r_c01_w.ie_comparacao = 'I') then

							-- se os prestadores forem iguais gera a ocorrência
							-- caso não seja para verificar se o prestador está informado corretamente e algum deles for nulo,
							-- não deve gerar a ocorrência, para tratar os prestadores nulos deve ser marcado algum ou ambos os checkbox
							if (nr_seq_prest_comp_w = nr_seq_prest_w) then

								ie_gera_ocorrencia_w := 'S';
							end if;
						else
							-- se os prestadores forem diferentes gera a ocorrência
							if (nr_seq_prest_comp_w != nr_seq_prest_w) then

								ie_gera_ocorrencia_w := 'S';
							end if;
						end if;
					end if;
				end if;

				if (ie_gera_ocorrencia_w = 'S') then

					tb_valido_w(nr_cont_w) := 'S';
					tb_seq_selecao_w(nr_cont_w) := r_C02_w.nr_seq_selecao;

					tb_observacao_w(nr_cont_w) := 'O prestador ' ||
											case 	r_c01_w.ie_tipo_prestador
												when 'A' then 'do protocolo '
												when 'S' then 'solicitante '
												when 'E' then 'executor '
												when 'P' then 'participante '
											end
											|| '(' ||
											case r_c01_w.ie_campo
												when 'S' then 'seq. ' || nr_seq_prest_w
												when 'C' then 'cód. ' || cd_prestador_w
											end
											|| ') ' ||
											case r_c01_w.ie_comparacao
												when 'I' then 'é igual ao prestador '
												when 'D' then 'é diferente do prestador '
											end ||
											case 	r_c01_w.ie_tipo_prestador_comp
												when 'A' then 'do protocolo '
												when 'S' then 'solicitante '
												when 'E' then 'executor '
												when 'P' then 'participante '
												when 'R' then 'requisitante '
												when 'F' then 'Fornecedor '
												when 'G' then 'da guia'
											end
											|| '(' ||
											case r_c01_w.ie_campo
												when 'S' then 'seq. ' || nr_seq_prest_comp_w
												when 'C' then 'cód. ' || cd_prestador_comp_w
											end || ')';

					if (nr_cont_w >= pls_util_pck.qt_registro_transacao_w) then

						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w, nr_id_transacao_p,'SEQ');

							nr_cont_w := 0;
							-- Incializar as listas para cada regra.
							SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
					else
						nr_cont_w := nr_cont_w + 1;
					end if;
				end if;
			end loop; -- Prestadores a serem comparados por regra
			/*Lança as glosas caso existir registros que não foram gerados*/

			if (nr_cont_w > 0)	then
				CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w, nr_id_transacao_p,'SEQ');
			end if;
		end if; -- fim tipo prestador diferente
	end loop; -- regras
	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_ocor_imp_pck.atualiza_campo_valido('V', 'N', ie_regra_excecao_p, null, nr_id_transacao_p, null);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_97_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

