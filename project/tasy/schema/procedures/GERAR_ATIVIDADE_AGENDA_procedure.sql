-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_atividade_agenda ( nm_usuario_p text, qt_agenda_p bigint, ds_atividades_p text, dt_inicial_p timestamp, dt_final_p timestamp) AS $body$
DECLARE



qt_agendas_w		bigint;
dt_inicial_w		timestamp;
hr_inicial_w		timestamp;
qt_intervalos_w		bigint;
nr_seq_agenda_w		bigint;
ie_hora_vazia_w		varchar(1);
ie_funcao_na_agenda_w	varchar(1);
ie_existe_funcao_grande_dia_w	varchar(1);
ie_existe_atividade_w	boolean;
qt_tempo_total_w		bigint;
ie_insere_atividade_fixa_w	varchar(1);
ie_existe_horario_livre_w	varchar(1);
qt_intervalos_preenchimento_w	bigint;
qt_intervalos_restantes_w	bigint;

dt_inicio_prim_semana_w		timestamp;
dt_fim_prim_semana_w		timestamp;
dt_inicio_seg_semana_w		timestamp;
dt_fim_seg_semana_w		timestamp;
ie_preencheu_w			varchar(1);

nr_coluna_w			bigint;

nr_seq_thiago_w			bigint;

--c01
ds_atividade_ww			varchar(255);
ie_tipo_atividade_w		varchar(3);
nr_prioridade_w			bigint;
cd_funcao_w			bigint;
qt_tempo_atividade_w		bigint;
ie_frequencia_w			varchar(1);
ie_dia_semana_w			smallint;
nr_seq_atividade_ww		bigint;
ie_semana_w			smallint;

--c02
nr_seq_consulta_agenda_w	bigint;
nr_seq_atividade_w		bigint;
dt_agenda_w			timestamp;
hr_atividade_w			timestamp;
nr_seq_agenda_ww		bigint;
ds_atividade_w			varchar(255);





C01 CURSOR FOR
SELECT	distinct
	a.ds_atividade,
	a.ie_tipo_atividade,
	a.nr_prioridade,
	a.cd_funcao,
	a.qt_tempo_atividade,
	a.ie_frequencia,
	a.ie_dia_semana,
	a.nr_sequencia
from  	atividade_agenda a
where	ie_tipo_atividade in ('D','J','P')
and	a.ie_situacao = 'A'
--and	obter_se_contido(a.nr_sequencia,ds_atividades_p) = 'S'
and	a.nr_sequencia in (3,6,20,32,7,8,9,48,16,24,29,30,23,4,5,37,45,49,17,10,39,47,22,40,38,41,28,11,18,15,21,31,51,12,34,25,46,13,19,14,43,44,26,27,36,33,42,59,76,73,79,61,68,90,86,93,66,72,75,82,83,84,65,87,102,104,117,119,120,122,124,100,182,181,180,179,178)
--and	a.nr_sequencia in (50,53, 97, 98, 54, 58, 60, 99, 62, 101, 103, 105, 106, 77, 107, 81, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 121, 123, 125, 126, 127, 74, 85, 88, 89, 91, 92, 128, 129, 130, 131, 55, 132, 133, 57, 134, 135, 136, 64, 137, 159, 138, 139, 71, 140, 141, 121, 95, 96, 142, 154, 146, 162, 145, 183, 148, 170, 158, 175)
order by	coalesce(nr_prioridade,0) desc,
	  		qt_tempo_atividade desc;


C02 CURSOR FOR
SELECT	nr_sequencia,
	nr_seq_atividade,
	dt_agenda,
	hr_atividade,
	nr_seq_agenda,
	ds_atividade
from	consulta_agenda a
where	hr_atividade  between to_date('07:30:00','hh24:mi:ss') and to_date('16:30:00','hh24:mi:ss')
and	hr_atividade not between to_date('12:00:00','hh24:mi:ss') and to_date('13:00:00','hh24:mi:ss')
and	Obter_Cod_Dia_Semana(dt_agenda) not in (1,7)
and	coalesce(a.nr_seq_atividade::text, '') = ''
and	coalesce(a.dt_cancelamento::text, '') = ''
order by  dt_agenda, hr_atividade, nr_seq_agenda;


C03 CURSOR FOR
SELECT	distinct
	a.ds_atividade,
	a.ie_tipo_atividade,
	a.nr_prioridade,
	a.cd_funcao,
	a.qt_tempo_atividade,
	a.ie_frequencia,
	a.ie_dia_semana,
	a.nr_sequencia,
	a.ie_semana
from  	atividade_agenda a
where	a.ie_situacao = 'A'
and	(a.IE_DIA_SEMANA IS NOT NULL AND a.IE_DIA_SEMANA::text <> '');


C04 CURSOR FOR
SELECT	nr_sequencia,
	nr_seq_atividade,
	dt_agenda,
	hr_atividade,
	nr_seq_agenda,
	ds_atividade
from	consulta_agenda a
where	hr_atividade  between to_date('07:30:00','hh24:mi:ss') and to_date('16:30:00','hh24:mi:ss')
and	hr_atividade not between to_date('12:00:00','hh24:mi:ss') and to_date('13:00:00','hh24:mi:ss')
and	Obter_Cod_Dia_Semana(dt_agenda) = ie_dia_semana_w
and	coalesce(a.nr_seq_atividade::text, '') = ''
and	coalesce(a.dt_cancelamento::text, '') = ''
order by dt_agenda, nr_seq_agenda, hr_atividade, nr_seq_agenda;



BEGIN



if (Obter_Cod_Dia_Semana(dt_inicial_p) <> 5) then
	begin
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(239672);
	--'A data de início da agenda deve ser uma Quinta-Feira. Respeitando assim o início do calendário de Teste. #@#@');
	end;
end if;


ie_existe_atividade_w	:=	true;

delete FROM consulta_agenda;
commit;

qt_agendas_w	:=	0;
dt_inicial_w	:=	dt_inicial_p;
hr_inicial_w	:= 	to_date('07:00:00','hh24:mi:ss');
qt_intervalos_w	:=	0;

dt_inicio_prim_semana_w		:=	dt_inicial_w;
dt_fim_prim_semana_w		:=	dt_inicial_w + 6;
dt_inicio_seg_semana_w		:=	dt_fim_prim_semana_w + 1;
dt_fim_seg_semana_w		:= 	dt_inicio_seg_semana_w + 6;


while qt_agendas_w < qt_agenda_p loop
	begin

	select	coalesce(max(nr_seq_agenda),0) + 1
	into STRICT	nr_seq_agenda_w
	from 	consulta_agenda;


	while dt_inicial_w <=  dt_final_p loop
		begin

		while qt_intervalos_w < 21 loop
			begin


			if (trunc(dt_inicial_w) >= dt_inicio_prim_semana_w) and (trunc(dt_inicial_w) <= dt_fim_prim_semana_w) then
				begin
				nr_coluna_w := 1;
				end;
			end if;


			if (trunc(dt_inicial_w) >= dt_inicio_seg_semana_w) and (trunc(dt_inicial_w) <= dt_fim_seg_semana_w) then
				begin
				nr_coluna_w := 2;
				end;
			end if;



			insert into consulta_agenda(
					nr_sequencia,
					nr_seq_atividade,
					ds_agenda,
					ds_atividade,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					dt_agenda,
					hr_atividade,
					nr_seq_agenda,
					nr_coluna
					) values (
					nextval('consulta_agenda_seq'),
					null,
					wheb_mensagem_pck.get_texto(799621) || ' ' || nr_seq_agenda_w,
					null,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					dt_inicial_w,
					hr_inicial_w,
					nr_seq_agenda_w,
					nr_coluna_w);

			hr_inicial_w		:=	hr_inicial_w + 01/24/2;
			qt_intervalos_w 	:=	qt_intervalos_w  + 1;
			end;
		end loop;
		commit;
		hr_inicial_w	:=	to_date('07:00:00','hh24:mi:ss');
		qt_intervalos_w	:= 0;

		dt_inicial_w 	:= dt_inicial_w + 1;
		end;
	end loop;
	dt_inicial_w	:=	dt_inicial_p;
	commit;


	qt_agendas_w	:=	qt_agendas_w + 1;
	nr_seq_agenda_w	:= 	0;
	end;
end loop;

open C03;
loop
fetch C03 into
	ds_atividade_ww,
	ie_tipo_atividade_w,
	nr_prioridade_w,
	cd_funcao_w,
	qt_tempo_atividade_w,
	ie_frequencia_w,
	ie_dia_semana_w,
	nr_seq_atividade_ww,
	ie_semana_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin


	open C04;
	loop
	fetch C04 into
		nr_seq_consulta_agenda_w,
		nr_seq_atividade_w,
		dt_agenda_w,
		hr_atividade_w,
		nr_seq_agenda_ww,
		ds_atividade_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin

		select	CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
		into STRICT	ie_hora_vazia_w
		from	consulta_agenda a
		where	a.nr_sequencia = nr_seq_consulta_agenda_w
		and	coalesce(a.dt_cancelamento::text, '') = ''
		and	(a.nr_seq_atividade IS NOT NULL AND a.nr_seq_atividade::text <> '');


		case	ie_semana_w
			when	0 then

			select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_insere_atividade_fixa_w
			
			where	dt_agenda_w between dt_inicio_prim_semana_w and dt_fim_seg_semana_w;

			when	1 then

			select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_insere_atividade_fixa_w
			
			where	dt_agenda_w between dt_inicio_prim_semana_w and dt_fim_prim_semana_w;

			when	2 then

			select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_insere_atividade_fixa_w
			
			where	dt_agenda_w between dt_inicio_seg_semana_w and dt_fim_seg_semana_w;

		end case;


		if (ie_hora_vazia_w = 'S') and (ie_insere_atividade_fixa_w = 'S') then
			begin
			ie_preencheu_w := preencher_atividade_agenda(qt_tempo_atividade_w, nr_seq_atividade_ww, nr_seq_agenda_ww, dt_agenda_w, hr_atividade_w, ie_frequencia_w, ie_tipo_atividade_w, ie_preencheu_w);
			end;
		end if;


		end;
	end loop;
	close C04;


	end;
end loop;
close C03;

dt_inicial_w	:=	dt_inicial_p;
open C02;
loop
fetch C02 into
	nr_seq_consulta_agenda_w,
	nr_seq_atividade_w,
	dt_agenda_w,
	hr_atividade_w,
	nr_seq_agenda_ww,
	ds_atividade_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin

	-- VErificar se o horario nao possui atividade
	select	CASE WHEN count(*)=0 THEN 'S'  ELSE 'N' END
	into STRICT	ie_hora_vazia_w
	from	consulta_agenda a
	where	a.nr_sequencia = nr_seq_consulta_agenda_w
	and	(a.nr_seq_atividade IS NOT NULL AND a.nr_seq_atividade::text <> '');



	if (ie_hora_vazia_w = 'S') then
		begin

		open C01;
		loop
		fetch C01 into
			ds_atividade_ww,
			ie_tipo_atividade_w,
			nr_prioridade_w,
			cd_funcao_w,
			qt_tempo_atividade_w,
			ie_frequencia_w,
			ie_dia_semana_w,
			nr_seq_atividade_ww;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			-- Verifica se a atividade está em alguma agenda		MELHORAR, pois delphi repete
			select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
			into STRICT	ie_funcao_na_agenda_w
			from	consulta_agenda a
			where	a.nr_seq_atividade = nr_seq_atividade_ww
			and	coalesce(a.dt_cancelamento::text, '') = '';

			-- Verificar se existe função grande para o dia   / superior a 120 miutos
			if (qt_tempo_atividade_w >= 120) and (ie_tipo_atividade_w = 'D') then
				begin
				select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
				into STRICT	ie_existe_funcao_grande_dia_w
				from	consulta_agenda a,
					atividade_agenda b
				where	a.dt_agenda		=	dt_agenda_w
				and	a.nr_seq_agenda		=	nr_seq_agenda_ww
				and	a.nr_seq_atividade	= 	b.nr_sequencia
				and	a.nr_seq_atividade	<> 	nr_seq_atividade_ww
				and	(b.ie_tipo_atividade IS NOT NULL AND b.ie_tipo_atividade::text <> '')
				and	coalesce(a.dt_cancelamento::text, '') = ''
				and	(b.qt_tempo_atividade    >= 120 AND b.qt_tempo_atividade    < 200);


				end;
			else
				ie_existe_funcao_grande_dia_w := 'N';
			end if;



			if (ie_funcao_na_agenda_w = 'N') and (ie_existe_funcao_grande_dia_w = 'N') then
				ie_preencheu_w := preencher_atividade_agenda(qt_tempo_atividade_w, nr_seq_atividade_ww, nr_seq_agenda_ww, dt_agenda_w, hr_atividade_w, ie_frequencia_w, ie_tipo_atividade_w, ie_preencheu_w);
				if (ie_preencheu_w = 'S') then
					exit;
				end if;
			end if;

			end;
		end loop;
		close C01;

		end;
	end if;

	end;
end loop;
close C02;


commit;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_atividade_agenda ( nm_usuario_p text, qt_agenda_p bigint, ds_atividades_p text, dt_inicial_p timestamp, dt_final_p timestamp) FROM PUBLIC;

