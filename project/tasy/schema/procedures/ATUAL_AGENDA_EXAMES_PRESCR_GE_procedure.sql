-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atual_agenda_exames_prescr_ge ( nr_prescricao_p bigint, nr_seq_prescr_p bigint, nr_seq_agenda_p bigint, nm_usuario_p text, ds_lista_procedimentos_p text default null) AS $body$
DECLARE


nr_atendimento_w	bigint;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_proc_interno_w	bigint;
cd_pessoa_fisica_w	varchar(10);
cd_medico_w		varchar(10);
cd_setor_atendimento_w	integer;
ie_lado_w		varchar(1);
cd_medico_solicitante_w	varchar(10);
cd_convenio_w		integer;
dt_nascimento_w		timestamp;
qt_idade_w		smallint;
cd_medico_resp_w		varchar(10);
cd_categoria_w		varchar(20);
cd_tipo_acomodacao_w	smallint;
cd_usuario_convenio_w	varchar(30);
dt_validade_carteira_w	timestamp;
ie_tipo_atendimento_w	bigint;
qt_idade_mes_w		smallint;
cd_plano_w		varchar(10);
nr_sequencia_proc_w	bigint;
tam_lista_w		bigint;
ie_pos_virgula_w	smallint;
ie_principal_w	varchar(1) := 'N';	
ie_primeiro_w   varchar(1) := 'S';

nr_sequencia_w  prescr_procedimento.nr_sequencia%TYPE;
ds_lista_procedimentos_w varchar(4000) := ds_lista_procedimentos_p;	

C01 CURSOR FOR
	SELECT  nr_seq_proc_interno,
            cd_procedimento,
            ie_origem_proced,
            ie_lado,
            cd_medico_solicitante
    from    prescr_procedimento
    where   nr_prescricao = nr_prescricao_p
    and		nr_sequencia <> nr_seq_prescr_p
    and	    coalesce(nr_seq_exame::text, '') = ''
    order by nr_sequencia;

   PROCEDURE processa_agendamento_presc(nr_seq_prescricao_p bigint) IS
   
;
BEGIN
   
    select  max(a.cd_pessoa_fisica),
			max(a.cd_medico),
			max(a.cd_setor_atendimento),
			max(a.nr_atendimento),
			max(b.cd_procedimento),
			max(b.ie_origem_proced),
			max(b.nr_seq_proc_interno)
	into STRICT	cd_pessoa_fisica_w,
			cd_medico_w,
			cd_setor_atendimento_w,
			nr_atendimento_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_proc_interno_w
    from    prescr_medica a, prescr_procedimento b
    where   a.nr_prescricao = nr_prescricao_p
	and		a.nr_prescricao = b.nr_prescricao
	and     b.nr_sequencia  = nr_seq_prescricao_p;

	if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then

		select	b.cd_convenio,
				to_date(obter_dados_pf(a.cd_pessoa_fisica,'DN'),'dd/mm/yyyy'),
				(obter_dados_pf(a.cd_pessoa_fisica,'I'))::numeric ,
				campo_numerico(obter_idade(obter_data_nascto_pf(a.cd_pessoa_fisica),clock_timestamp(),'MM')),
				a.cd_medico_resp,
				b.cd_categoria,
				b.cd_tipo_acomodacao,
				b.cd_usuario_convenio,
				b.dt_validade_carteira,
				a.ie_tipo_atendimento,
				b.cd_plano_convenio
		into STRICT 	cd_convenio_w,
				dt_nascimento_w,
				qt_idade_w,
				qt_idade_mes_w,
				cd_medico_resp_w,
				cd_categoria_w,
				cd_tipo_acomodacao_w,
				cd_usuario_convenio_w,
				dt_validade_carteira_w,
				ie_tipo_atendimento_w,
				cd_plano_w
		FROM atendimento_paciente a
LEFT OUTER JOIN atend_categoria_convenio b ON (a.nr_atendimento = b.nr_atendimento)
, obter_atecaco_atendimento(a
LEFT OUTER JOIN atend_categoria_convenio b ON (obter_atecaco_atendimento(a.nr_atendimento) = b.nr_seq_interno)
WHERE a.nr_atendimento = nr_atendimento_w;

	end if;

	update	agenda_paciente
	set		cd_pessoa_fisica 		= cd_pessoa_fisica_w,
			cd_medico				= cd_medico_w,
			cd_setor_atendimento	= cd_setor_atendimento_w,
			nm_paciente				= obter_nome_pf(cd_pessoa_fisica_w),
			cd_medico_exec			= cd_medico_w,
			dt_nascimento_pac		= dt_nascimento_w,
			qt_idade_paciente		= qt_idade_w,
			qt_idade_mes			= qt_idade_mes_w,
			nr_telefone				= obter_fone_pac_agenda(cd_pessoa_fisica_w),
			cd_convenio				= cd_convenio_w,
			cd_categoria			= cd_categoria_w,
			cd_usuario_convenio		= cd_usuario_convenio_w,
			dt_validade_carteira	= dt_validade_carteira_w,
			cd_tipo_acomodacao		= cd_tipo_acomodacao_w,
			ie_status_agenda		= 'N',
			nm_usuario_orig			= nm_usuario_p,
			dt_agendamento			= clock_timestamp(),
			dt_atualizacao			= clock_timestamp(),
			nr_atendimento			= nr_atendimento_w,
			ie_tipo_atendimento		= ie_tipo_atendimento_w,
			cd_plano				= cd_plano_w,
			cd_procedimento			= cd_procedimento_w,
			ie_origem_proced		= ie_origem_proced_w,
			nr_seq_proc_interno		= nr_seq_proc_interno_w
	where	nr_sequencia			= nr_seq_agenda_p;

	commit;

  end;

  PROCEDURE inserir_agenda_paciente_proc(nr_sequencia_proc_p varchar2) IS 
  
  begin
	  
  insert into agenda_paciente_proc(nr_sequencia, nr_seq_agenda, nr_seq_proc_interno, cd_procedimento, ie_origem_proced, ie_lado, cd_medico, dt_atualizacao,nm_usuario)
					values (nr_seq_agenda_p, nr_sequencia_proc_p, nr_seq_proc_interno_w,cd_procedimento_w,ie_origem_proced_w,ie_lado_w,cd_medico_solicitante_w, clock_timestamp(), nm_usuario_p);
  commit;

  end;

 PROCEDURE update_prescr_procedimento(nr_sequencia_p varchar2) is
 
 begin
	 
	update	prescr_procedimento
	set		nr_seq_agenda	= nr_seq_agenda_p
	where	nr_prescricao	= nr_prescricao_p
	and     nr_sequencia    = nr_sequencia_p;
	
 end;

BEGIN
	
if 	((nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (ds_lista_procedimentos_p IS NOT NULL AND ds_lista_procedimentos_p::text <> '')) then
	
	if (ds_lista_procedimentos_w IS NOT NULL AND ds_lista_procedimentos_w::text <> '') and (coalesce(cd_procedimento_w::text, '') = '')
		and (substr(ds_lista_procedimentos_w, length(ds_lista_procedimentos_w) - 1, length(ds_lista_procedimentos_w)) = ',') then
		nr_sequencia_w := (replace(ds_lista_procedimentos_w, ',', ''))::numeric;
		processa_agendamento_presc(nr_sequencia_w);
		update_prescr_procedimento(nr_sequencia_w);
		ie_principal_w := 'S';
	end if;

	if (ds_lista_procedimentos_w IS NOT NULL AND ds_lista_procedimentos_w::text <> '') then

		if (ie_principal_w <> 'S') then

			while(ds_lista_procedimentos_w IS NOT NULL AND ds_lista_procedimentos_w::text <> '') loop 

				begin

				ie_pos_virgula_w := position(',' in ds_lista_procedimentos_w);
				tam_lista_w	:= length(ds_lista_procedimentos_w);

				if (ie_pos_virgula_w <> 0) then
					 nr_sequencia_w := (substr(ds_lista_procedimentos_w, 1, (ie_pos_virgula_w - 1)))::numeric;
			 	 	 ds_lista_procedimentos_w := substr(ds_lista_procedimentos_w, (ie_pos_virgula_w + 1), tam_lista_w);
			 	
					if (ie_primeiro_w = 'S') then
			 			processa_agendamento_presc(nr_sequencia_w);
			 			update_prescr_procedimento(nr_sequencia_w);
			 			ie_primeiro_w := 'N';
			 		
			 		else
	
						select	coalesce(max(nr_seq_agenda), 0) + 1
						into STRICT	nr_sequencia_proc_w
						from	agenda_paciente_proc
						where	nr_sequencia = nr_seq_agenda_p;
	
						select  max(nr_seq_proc_interno),
            					max(ie_origem_proced),
            					max(ie_lado),
           	 					max(cd_medico_solicitante),
           	 					max(cd_procedimento)
    					into STRICT 	nr_seq_proc_interno_w,
								ie_origem_proced_w,
								ie_lado_w,
								cd_medico_solicitante_w,
								cd_procedimento_w
    					from    prescr_procedimento
    					where   nr_prescricao = nr_prescricao_p
    					and		nr_sequencia = nr_sequencia_w
    					and	    coalesce(nr_seq_exame::text, '') = '';
	
					inserir_agenda_paciente_proc(nr_sequencia_proc_w);
										
					update_prescr_procedimento(nr_sequencia_w);
				
					end if;
			else
				ds_lista_procedimentos_w := null;
			end if;
			end;
		end loop;
	end if;
end if;

else

if 	((nr_prescricao_p IS NOT NULL AND nr_prescricao_p::text <> '') and (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (nr_seq_prescr_p IS NOT NULL AND nr_seq_prescr_p::text <> '')) then

    processa_agendamento_presc(nr_seq_prescr_p);

	update	prescr_medica
	set		nr_seq_agenda	= nr_seq_agenda_p
	where	nr_prescricao	= nr_prescricao_p;

 	commit;

	open C01;
	loop
	fetch C01 into
		nr_seq_proc_interno_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		ie_lado_w,
		cd_medico_solicitante_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		select	coalesce(max(nr_seq_agenda),0) + 1
		into STRICT	nr_sequencia_proc_w
		from	agenda_paciente_proc
		where	nr_sequencia = nr_seq_agenda_p;

		inserir_agenda_paciente_proc(nr_sequencia_proc_w);
		
		end;
	 end loop;
	 close C01;
  end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atual_agenda_exames_prescr_ge ( nr_prescricao_p bigint, nr_seq_prescr_p bigint, nr_seq_agenda_p bigint, nm_usuario_p text, ds_lista_procedimentos_p text default null) FROM PUBLIC;

