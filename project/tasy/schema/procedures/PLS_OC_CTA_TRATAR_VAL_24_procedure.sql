-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_24 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: 	Consistir a regra da glosa 9919, verificando se existe regra de preço para o procedimento,
porém seu valor está zerado. Também foi tratada a situação aonde deverá desconsiderar a regra de liberação
"Valor calculado zerado", para que a mesma não seja considerada.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção: A valicação é feita sobre a regra de valor obtida, o processo deve verificar o tipo de despesa
Se o tipo de despesa for 1,2 ou 3 deve possuir o campo NR_SEQ_REGRA gerado
Se o tipo despesa for 1 deve ser verificado a regra de honorário para saber qual valor validar
Se o tipo de despesa for 4 deve possuir o campo NR_SEQ_PRECO_PACOTE gerado

Alterações:
------------------------------------------------------------------------------------------------------------------
dlehmkuhl OS 688483 - 14/04/2014 -

Alteração:	Modificada a forma de trabalho em relação a atualização dos campos de controle
	que basicamente decidem se a ocorrência será ou não gerada. Foi feita também a
	substituição da rotina obterX_seX_geraX.

Motivo:	Necessário realizar essas alterações para corrigir bugs principalmente no que se
	refere a questão de aplicação de filtros (passo anterior ao da validação). Também
	tivemos um foco especial em performance, visto que a mesma precisou ser melhorada
	para não inviabilizar a nova solicitação que diz que a exceção deve verificar todo
	o atendimento.
------------------------------------------------------------------------------------------------------------------
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
dados_filtro_w			pls_tipos_ocor_pck.dados_filtro;
dados_valor_glosa_9919_w	pls_tipos_ocor_pck.dados_valor_glosa_9919;
ie_partic_zero_w		varchar(1);
ie_gerar_ocorrencia_w		varchar(1);
vl_repasse_glosa_w		double precision;
ie_regra_preco_comb_w		varchar(1);

-- Campos para validar regra de preço de procedimento, pacote e tipo de despesa
nr_seq_regra_w			pls_conta_proc.nr_seq_regra%type;
nr_seq_preco_pacote_w		bigint;
ie_tipo_despesa_w		pls_conta_proc.ie_tipo_despesa%type;

tb_nr_seq_selecao_w	dbms_sql.number_table;
tb_ie_valido_w		dbms_sql.varchar2_table;
tb_ds_observacao_w	dbms_sql.varchar2_table;

qt_cnt_w		integer;
i			integer;

-- Informações da validação de valor calculado zero e regra de preço informada
C01 CURSOR(	nr_seq_oc_cta_comb_p dados_regra_p.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_validacao,
		a.ie_valida_valorizacao,
		a.ie_ng_sem_vl_calc_aceita_apres
	from	pls_oc_cta_val_item_apres a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;

C02 CURSOR(	nr_id_transacao_pc	pls_selecao_ocor_cta.nr_id_transacao%type) FOR
	SELECT	'P'	ie_tipo_item,
		a.nr_sequencia,
		a.nr_seq_conta,
		a.nr_seq_regra_valor,
		a.nr_seq_honorario_crit,
		CASE WHEN coalesce(a.nr_seq_hon_crit_medico::text, '') = '' THEN a.nr_seq_honorario_crit  ELSE a.nr_seq_hon_crit_medico END  nr_seq_hon_crit_medico,
		a.vl_procedimento,
		a.vl_total_partic,
		a.vl_materiais,
		a.vl_custo_operacional,
		a.nr_seq_regra,
		(SELECT	max(x.nr_seq_cp_comb_filtro)
		from	pls_conta_proc_regra x
		where	x.nr_sequencia = a.nr_sequencia) nr_seq_cp_comb_filtro,
		a.nr_seq_preco_pacote,
		a.ie_tipo_despesa,
		pls_util_cta_pck.pls_obter_regr_lib_it(a.nr_seq_regra_valor) ie_regra_liberacao,
		x.nr_sequencia nr_seq_selecao,
		a.cd_estabelecimento
	from	pls_oc_cta_selecao_ocor_v	x,
		pls_conta_proc_ocor_v		a
	where 	x.nr_id_transacao	= nr_id_transacao_pc
	and	x.ie_valido		= 'S'
	and	a.nr_sequencia		= x.nr_seq_conta_proc;

C03 CURSOR(	nr_id_transacao_pc	pls_selecao_ocor_cta.nr_id_transacao%type) FOR
	SELECT	'M'	ie_tipo_item,
		a.nr_sequencia,
		a.nr_seq_conta,
		a.nr_seq_regra,
		(SELECT	max(x.nr_seq_cp_comb_filtro)
		from 	pls_conta_mat_regra x
		where	x.nr_sequencia = a.nr_sequencia) nr_seq_cp_comb_filtro,
		a.nr_seq_regra_valor,
		a.vl_material,
		pls_util_cta_pck.pls_obter_regr_lib_it(a.nr_seq_regra_valor) ie_regra_liberacao,
		x.nr_sequencia nr_seq_selecao,
		a.cd_estabelecimento
	from	pls_oc_cta_selecao_ocor_v	x,
		pls_conta_mat_ocor_v		a
	where	x.nr_id_transacao	= nr_id_transacao_pc
	and	x.ie_valido		= 'S'
	and 	a.nr_sequencia		= x.nr_seq_conta_mat;
BEGIN
-- Deve haver infromação da regra para que seja aplicada a validação
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);
	ie_regra_preco_comb_w	:= pls_filtro_regra_preco_cta_pck.usar_nova_regra_crit_preco(dados_regra_p.cd_estabelecimento);

	for	r_C01_w in C01(dados_regra_p.nr_sequencia) loop

		--  verificar a informação de valor
		if (r_C01_w.ie_valida_valorizacao = 'S')	then

			-- Incializar as listas para cada regra.
			tb_ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
			tb_ds_observacao_w	:= pls_tipos_ocor_pck.vchr2_table_vazia;
			tb_nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;
			i := 0;

			for r_C02_w in C02(nr_id_transacao_p) loop

				ie_gerar_ocorrencia_w	:= 'N';

				-- Inicializar os valores que serão atualizados na tabela de seleção.
				tb_ds_observacao_w(i) := null;
				tb_nr_seq_selecao_w(i) := r_C02_w.nr_seq_selecao;
				nr_seq_regra_w := null;

				/*Se o campo para não considerar a regra de liberação estiver checado, não irá gerar a ocorrência quando a regra de liberação for 3
				"Valor calculado zerado"*/
				if	((r_C01_w.ie_ng_sem_vl_calc_aceita_apres = 'S')	and (coalesce(r_C02_w.ie_regra_liberacao, 0) <> 3)) or (r_C01_w.ie_ng_sem_vl_calc_aceita_apres = 'N') then

					ie_partic_zero_w	:=	pls_obter_se_partic_cancelado(r_C02_w.nr_sequencia);

					tb_ds_observacao_w(i)	:= 	'O sistema obteve uma regra de valorização adequada, mas não foi possível realizar o cálculo do item.'||pls_tipos_ocor_pck.enter_w||
									'1)Não existe o material cadastrado na tabela de preços apontada pela regra.'||pls_tipos_ocor_pck.enter_w||
									'2)Não existem regras de honorário médico adequadas ao item, cadastradas na função OPS - Cadastro de Regras > OPS - Contas médicas > Regra honorário.'||pls_tipos_ocor_pck.enter_w;

					-- verifica se é para utilizar o campo da regra de preço combinada ou campo nr_seq_regra
					-- não é aplicada esta validação aos pacotes pois os mesmo não possuem valorização pelas regras combinadas
					if (ie_regra_preco_comb_w = 'S') and (r_C02_w.ie_tipo_despesa != 4) then

						nr_seq_regra_w := r_C02_w.nr_seq_cp_comb_filtro;
					else
						nr_seq_regra_w := r_C02_w.nr_seq_regra;
					end if;

					-- Quando o tipo de despesa for 1 - Procedimento, deve existir uma regra de preço NR_SEQ_REGRA
					-- Quando for despesa 1 - Procedimento deve ser verificado o honorário para saber que valor validar na regra
					if ( r_C02_w.ie_tipo_despesa = 1 and (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') ) then

						dados_valor_glosa_9919_w :=  pls_obter_val_honor_ocor(	r_C02_w.nr_seq_honorario_crit,r_C02_w.vl_procedimento, r_C02_w.vl_total_partic,
													r_C02_w.vl_materiais, r_C02_w.vl_custo_operacional);

						tb_ds_observacao_w(i) := tb_ds_observacao_w(i) || dados_valor_glosa_9919_w.ds_observacao;

						-- Se o valor gerado estiver zerado gera a ocorrência
						if (coalesce(dados_valor_glosa_9919_w.vl_glosa,0) = 0) then
							ie_gerar_ocorrencia_w := 'S';
						end if;

					-- Quando o tipo de despesa for,  2 -  Taxas, 3 - Diárias, 4 - Pacotes, deve ser verificado o campo VL_PROCEDIMENTO, se o mesmo estiver zerado gera a ocorrência
					elsif	( ( r_C02_w.ie_tipo_despesa in (2,3) and (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '')) or ( r_C02_w.ie_tipo_despesa = 4 and (r_C02_w.nr_seq_preco_pacote IS NOT NULL AND r_C02_w.nr_seq_preco_pacote::text <> '')) ) then

						if ( coalesce(r_C02_w.vl_procedimento,0) = 0 ) then
							ie_gerar_ocorrencia_w := 'S';
						end if;
					end if;
				end if;

				-- Verificar se o registro atual é válido ou não conforme as parametrizações de regras e regras de exceção.
				tb_ie_valido_w(i) := ie_gerar_ocorrencia_w;

				if (i = pls_cta_consistir_pck.qt_registro_transacao_w) then

					CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
											'SEQ', tb_ds_observacao_w, tb_ie_valido_w, nm_usuario_p);
					-- Zerar o índice
					i := 0;

					-- Zerar as listas.
					tb_ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
					tb_ds_observacao_w	:= pls_tipos_ocor_pck.vchr2_table_vazia;
					tb_nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;

				-- Enquanto os registros não tiverem atingido a carga para gravar na seleção incrementa o índice para armazenar os próximos registros.
				else
					i := i + 1;
				end if;
			end loop;

			-- Quando tiver sobrado algo na lista irá gravar o que restou após a execução do loop.
			if (tb_nr_seq_selecao_w.count > 0) then

				-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
				-- conforme passado por parâmetro,
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
										'SEQ', tb_ds_observacao_w, tb_ie_valido_w, nm_usuario_p);
			end if;

			-- Incializar as listas para cada regra.
			tb_ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
			tb_ds_observacao_w	:= pls_tipos_ocor_pck.vchr2_table_vazia;
			tb_nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;
			i:= 0;

			for r_C03_w in C03(nr_id_transacao_p) loop

				-- limpa a variável
				nr_seq_regra_w := null;

				-- verifica se é para utilizar o campo da regra de preço combinada ou campo nr_seq_regra
				if (ie_regra_preco_comb_w = 'S') then

					nr_seq_regra_w := r_C03_w.nr_seq_cp_comb_filtro;
				else
					nr_seq_regra_w := r_C03_w.nr_seq_regra;
				end if;

				if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
					ie_gerar_ocorrencia_w	:= 'N';

					-- Inicializar os valores que serão atualizados na tabela de seleção.
					tb_ds_observacao_w(i) := null;
					tb_nr_seq_selecao_w(i) := r_C03_w.nr_seq_selecao;

					if	((r_C01_w.ie_ng_sem_vl_calc_aceita_apres = 'S')	and (coalesce(r_C03_w.ie_regra_liberacao, 0) <> 3))	or (r_C01_w.ie_ng_sem_vl_calc_aceita_apres = 'N')	then

						if (coalesce(r_C03_w.vl_material,0) = 0)	then
							tb_ds_observacao_w(i) := 	'O sistema obteve uma regra de valorização adequada, mas não foi possível realizar o cálculo do item.'||pls_tipos_ocor_pck.enter_w||
											'Possíveis motivos: '||pls_tipos_ocor_pck.enter_w||
											'1)Não existe o material cadastrado na tabela de preços apontada pela regra.';
							ie_gerar_ocorrencia_w := 'S';
						end if;
					end if;

					-- Verificar se o registro atual é válido ou não conforme as parametrizações de regras e regras de exceção.
					tb_ie_valido_w(i) := ie_gerar_ocorrencia_w;

					if (i = pls_cta_consistir_pck.qt_registro_transacao_w) then

						CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
												'SEQ', tb_ds_observacao_w, tb_ie_valido_w, nm_usuario_p);
						-- Zerar o índice
						i := 0;

						-- Zerar as listas.
						tb_ie_valido_w		:= pls_tipos_ocor_pck.vchr2_table_vazia;
						tb_ds_observacao_w	:= pls_tipos_ocor_pck.vchr2_table_vazia;
						tb_nr_seq_selecao_w	:= pls_tipos_ocor_pck.num_table_vazia;

					-- Enquanto os registros não tiverem atingido a carga para gravar na seleção incrementa o índice para armazenar os próximos registros.
					else
						i := i + 1;
					end if;
				end if;
			end loop;

			-- Quando tiver sobrado algo na lista irá gravar o que restou após a execução do loop.
			if (tb_nr_seq_selecao_w.count > 0) then

				-- Será passado uma lista com todas a sequencias da seleção para a conta e para seus itens, estas sequências serão atualizadas com os mesmos dados da conta,
				-- conforme passado por parâmetro,
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	tb_nr_seq_selecao_w, pls_tipos_ocor_pck.clob_table_vazia,
										'SEQ', tb_ds_observacao_w, tb_ie_valido_w, nm_usuario_p);
			end if;
		end if;
	end loop;

	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_24 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_selecao_ocor_cta.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

