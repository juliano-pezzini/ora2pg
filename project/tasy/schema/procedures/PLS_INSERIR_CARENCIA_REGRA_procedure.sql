-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_inserir_carencia_regra ( nr_seq_benef_proposta_p bigint, nr_seq_segurado_p bigint, nr_seq_plano_p bigint, nr_seq_contrato_p bigint, nr_seq_regra_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_grupo_carencia_w		bigint;
nr_sequencia_w			bigint;
nr_seq_tipo_carencia_w		bigint;
qt_dias_padrao_w		integer;
dt_inclusao_operadora_w		timestamp;
dt_fim_vigencia_w		timestamp;
qt_registros_w			bigint;
ie_carencia_plano_w		varchar(10);
ie_copiar_carencia_grupo_w	varchar(10);
qt_reg_prod_w			bigint;
nr_seq_plano_benef_w		bigint;
nr_seq_tipo_carencia_aux_w	bigint;
ds_regra_w			pls_regra_carencia.ds_regra%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_grupo_carencia,
		nr_seq_tipo_carencia,
		coalesce(qt_dias_padrao,0),
		ie_carencia_plano,
		ie_copiar_carencia_grupo
	from	pls_regra_carencia_padrao
	where	nr_seq_regra	= nr_seq_regra_p;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_tipo_carencia
	where	nr_seq_grupo	= nr_seq_grupo_carencia_w
	and	ie_cpt		= 'N';


BEGIN

select	max(ds_regra)
into STRICT	ds_regra_w
from	pls_regra_carencia
where	nr_sequencia	= nr_seq_regra_p;

if (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then
	select	dt_inclusao_operadora,
		nr_seq_plano
	into STRICT	dt_inclusao_operadora_w,
		nr_seq_plano_benef_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_p;
else
	dt_inclusao_operadora_w	:= null;
end if;

if (nr_seq_benef_proposta_p IS NOT NULL AND nr_seq_benef_proposta_p::text <> '') then
	select	nr_seq_plano
	into STRICT	nr_seq_plano_benef_w
	from	pls_proposta_beneficiario
	where	nr_sequencia	= nr_seq_benef_proposta_p;
end if;

open C01;
loop
fetch C01 into
	nr_sequencia_w,
	nr_seq_grupo_carencia_w,
	nr_seq_tipo_carencia_w,
	qt_dias_padrao_w,
	ie_carencia_plano_w,
	ie_copiar_carencia_grupo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	qt_reg_prod_w	:= 1;

	if (dt_inclusao_operadora_w IS NOT NULL AND dt_inclusao_operadora_w::text <> '') then
		dt_fim_vigencia_w	:= dt_inclusao_operadora_w + qt_dias_padrao_w;
	end if;

	if (nr_seq_benef_proposta_p IS NOT NULL AND nr_seq_benef_proposta_p::text <> '') then
		if (nr_seq_tipo_carencia_w IS NOT NULL AND nr_seq_tipo_carencia_w::text <> '') then
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_carencia
			where	nr_seq_pessoa_proposta	= nr_seq_benef_proposta_p
			and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_w;

			/*Consiste se carência está no produto*/

			if (ie_carencia_plano_w = 'S') then
				select	count(1)
				into STRICT	qt_reg_prod_w
				from	pls_carencia	b,
					pls_plano	a
				where	b.nr_seq_plano		= a.nr_sequencia
				and	a.nr_sequencia		= nr_seq_plano_benef_w
				and	b.nr_seq_tipo_carencia	= nr_seq_tipo_carencia_w;
			end if;

		elsif (nr_seq_grupo_carencia_w IS NOT NULL AND nr_seq_grupo_carencia_w::text <> '') then
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_carencia
			where	nr_seq_pessoa_proposta	= nr_seq_benef_proposta_p
			and	nr_seq_grupo_carencia	= nr_seq_grupo_carencia_w;
		end if;
	elsif (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then
		if (nr_seq_tipo_carencia_w IS NOT NULL AND nr_seq_tipo_carencia_w::text <> '') then
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_carencia
			where	nr_seq_segurado		= nr_seq_segurado_p
			and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_w;

			/*Consiste se carência está no produto*/

			if (ie_carencia_plano_w = 'S') then
				select	count(1)
				into STRICT	qt_reg_prod_w
				from	pls_carencia	b,
					pls_plano	a
				where	b.nr_seq_plano		= a.nr_sequencia
				and	a.nr_sequencia		= nr_seq_plano_benef_w
				and	b.nr_seq_tipo_carencia	= nr_seq_tipo_carencia_w;
			end if;

		elsif (nr_seq_grupo_carencia_w IS NOT NULL AND nr_seq_grupo_carencia_w::text <> '') then
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_carencia
			where	nr_seq_segurado		= nr_seq_segurado_p
			and	nr_seq_grupo_carencia	= nr_seq_grupo_carencia_w;
		end if;
	elsif (nr_seq_plano_p IS NOT NULL AND nr_seq_plano_p::text <> '') then
		if (nr_seq_tipo_carencia_w IS NOT NULL AND nr_seq_tipo_carencia_w::text <> '') then
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_carencia
			where	nr_seq_plano	= nr_seq_plano_p
			and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_w;
		elsif (nr_seq_grupo_carencia_w IS NOT NULL AND nr_seq_grupo_carencia_w::text <> '') then
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_carencia
			where	nr_seq_plano	= nr_seq_plano_p
			and	nr_seq_grupo_carencia	= nr_seq_grupo_carencia_w;
		end if;
	elsif (nr_seq_contrato_p IS NOT NULL AND nr_seq_contrato_p::text <> '') then
		if (nr_seq_tipo_carencia_w IS NOT NULL AND nr_seq_tipo_carencia_w::text <> '') then
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_carencia
			where	nr_seq_contrato		= nr_seq_contrato_p
			and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_w;
		elsif (nr_seq_grupo_carencia_w IS NOT NULL AND nr_seq_grupo_carencia_w::text <> '') then
			select	count(*)
			into STRICT	qt_registros_w
			from	pls_carencia
			where	nr_seq_contrato		= nr_seq_contrato_p
			and	nr_seq_grupo_carencia	= nr_seq_grupo_carencia_w;
		end if;
	end if;

	if (qt_registros_w = 0) and (qt_reg_prod_w > 0) then

		/*Verifica se copia todas as carências que estão no grupo*/

		if (ie_copiar_carencia_grupo_w = 'S') and (nr_seq_grupo_carencia_w IS NOT NULL AND nr_seq_grupo_carencia_w::text <> '') then

			open C02;
			loop
			fetch C02 into
				nr_seq_tipo_carencia_aux_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin

				qt_reg_prod_w	:= 1;

				if (ie_carencia_plano_w = 'S') and (nr_seq_plano_benef_w IS NOT NULL AND nr_seq_plano_benef_w::text <> '') then
					select	count(1)
					into STRICT	qt_reg_prod_w
					from	pls_carencia	b,
						pls_plano	a
					where	b.nr_seq_plano		= a.nr_sequencia
					and	a.nr_sequencia		= nr_seq_plano_benef_w
					and	b.nr_seq_tipo_carencia	= nr_seq_tipo_carencia_aux_w;
				end if;

				if (nr_seq_benef_proposta_p IS NOT NULL AND nr_seq_benef_proposta_p::text <> '') then
					select	count(*)
					into STRICT	qt_registros_w
					from	pls_carencia
					where	nr_seq_pessoa_proposta	= nr_seq_benef_proposta_p
					and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_aux_w;
				elsif (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then
					select	count(*)
					into STRICT	qt_registros_w
					from	pls_carencia
					where	nr_seq_segurado		= nr_seq_segurado_p
					and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_aux_w;
				elsif (nr_seq_plano_p IS NOT NULL AND nr_seq_plano_p::text <> '') then
					select	count(*)
					into STRICT	qt_registros_w
					from	pls_carencia
					where	nr_seq_contrato		= nr_seq_contrato_p
					and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_aux_w;
				elsif (nr_seq_contrato_p IS NOT NULL AND nr_seq_contrato_p::text <> '') then
					select	count(*)
					into STRICT	qt_registros_w
					from	pls_carencia
					where	nr_seq_contrato		= nr_seq_contrato_p
					and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_aux_w;
				end if;

				if (qt_reg_prod_w > 0) and (qt_registros_w = 0) then
					insert into pls_carencia(nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
							nr_seq_tipo_carencia, qt_dias, dt_inicio_vigencia, dt_fim_vigencia, nr_seq_pessoa_proposta,
							nr_seq_grupo_carencia, ie_cpt, ie_origem_carencia_benef, nr_seq_segurado,nr_seq_plano,
							nr_seq_contrato, nr_seq_regra_padrao)
						values (	nextval('pls_carencia_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
							nr_seq_tipo_carencia_aux_w, qt_dias_padrao_w, dt_inclusao_operadora_w, dt_fim_vigencia_w, nr_seq_benef_proposta_p,
							null, 'N', 'P', nr_seq_segurado_p,nr_seq_plano_p,
							nr_seq_contrato_p, nr_sequencia_w);
				end if;

				end;
			end loop;
			close C02;
		/*Senao, faz o procedimento normal*/

		else
			insert into pls_carencia(nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
						nr_seq_tipo_carencia, qt_dias, dt_inicio_vigencia, dt_fim_vigencia, nr_seq_pessoa_proposta,
						nr_seq_grupo_carencia, ie_cpt, ie_origem_carencia_benef, nr_seq_segurado,nr_seq_plano,
						nr_seq_contrato, nr_seq_regra_padrao)
					values (	nextval('pls_carencia_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
						nr_seq_tipo_carencia_w, qt_dias_padrao_w, dt_inclusao_operadora_w, dt_fim_vigencia_w, nr_seq_benef_proposta_p,
						nr_seq_grupo_carencia_w, 'N', 'P', nr_seq_segurado_p,nr_seq_plano_p,
						nr_seq_contrato_p, nr_sequencia_w);
		end if;
	end if;
	end;
end loop;
close C01;

if (nr_seq_segurado_p IS NOT NULL AND nr_seq_segurado_p::text <> '') then
	CALL pls_gerar_segurado_historico(	nr_seq_segurado_p, '78', clock_timestamp(), 'Carregada carência padrão '||nr_seq_regra_p||'-'||ds_regra_w,
					'pls_inserir_carencia_regra', null, null, null,
					null, null, null, null,
					null, null, null, null,
					nm_usuario_p, 'N');
elsif (nr_seq_contrato_p IS NOT NULL AND nr_seq_contrato_p::text <> '') then
	insert	into	pls_contrato_historico(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			cd_estabelecimento, nr_seq_contrato, dt_historico, ie_tipo_historico, ds_historico,
			ds_observacao)
	values (	nextval('pls_contrato_historico_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
			wheb_usuario_pck.get_cd_estabelecimento, nr_seq_contrato_p, clock_timestamp(), '78', 'Carregada carência padrão '||nr_seq_regra_p||'-'||ds_regra_w,
			'pls_inserir_carencia_regra');
elsif (nr_seq_benef_proposta_p IS NOT NULL AND nr_seq_benef_proposta_p::text <> '') then
	insert	into	pls_proposta_benef_hist(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			nr_seq_benef_proposta, dt_historico, ds_historico, ie_tipo_historico)
	values (	nextval('pls_proposta_benef_hist_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
			nr_seq_benef_proposta_p, clock_timestamp(), 'Carregada carência padrão '||nr_seq_regra_p||'-'||ds_regra_w, 16);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_inserir_carencia_regra ( nr_seq_benef_proposta_p bigint, nr_seq_segurado_p bigint, nr_seq_plano_p bigint, nr_seq_contrato_p bigint, nr_seq_regra_p bigint, nm_usuario_p text) FROM PUBLIC;

