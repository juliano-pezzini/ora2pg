-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_nota_fiscal (nr_sequencia_p bigint, ie_acao_p text, nm_usuario_p text, ie_tipo_nota_p bigint, ie_commit_p text default 'S') AS $body$
DECLARE


reg_integracao_p		gerar_int_padrao.reg_integracao;				
vl_total_item_desc_w		double precision;
vl_total_item_w			double precision;
pr_desc_financ_w			double precision;				
qt_itens_nf_w			bigint;				
nr_item_nf_w			integer;
ds_erro_w			varchar(1000);
cd_estabelecimento_w		smallint;
cd_serie_nf_w			nota_fiscal.cd_serie_nf%type;
nr_nota_fiscal_w			varchar(255);
nr_nota_orig_w			varchar(255);
nr_ultima_nf_w			varchar(255);
ds_retorno_p			varchar(250) := '';
ie_aviso_chegada_w		varchar(001);
ie_titulo_nf_saida_w		varchar(1);
ie_tipo_requisicao_w		varchar(5);
ie_atualiza_nf_conta_opme_w	varchar(1);
vl_tributos_w			double precision;
ie_contas_receber_w		varchar(1);
cd_oper_ent_pass_direta_w		smallint;
qt_tributo_w			bigint;
cd_oper_cons_pass_direta_w		smallint;
qt_item_direto_w			bigint;
qt_calculada_w			bigint;
ie_diverg_oc_nf_w			varchar(1);
qt_titulo_pagar_w			bigint;
ie_tipo_nota_w			varchar(3);
ie_tipo_nota_ww			integer;
ie_numero_nota_w			varchar(1);
qt_count_titulo_w			bigint;
i				integer;
nr_nota_titulo_w			varchar(20);
nr_nota_fiscal_atual_w		varchar(20);
qt_registro_w			bigint;
cd_operacao_nf_w			smallint;
qt_existe_w			smallint;
ie_gerar_sempre_titulo_w		varchar(01);
ie_gerou_tit_nf_w			varchar(01) := 'N';
nr_seq_agenda_pac_w		nota_fiscal.nr_seq_agenda_pac%type;
ie_ultima_compra_w		varchar(01);
ie_gera_titulo_nf_repasse_w		varchar(01);
ie_gerar_tit_w			varchar(01);
ie_compl_tributo_w			varchar(01) := 'N';
nr_interno_conta_w			bigint;
cd_setor_digitacao_w		integer;
qt_item_nf_w			double precision;
nr_emprestimo_w			bigint;
nr_seq_item_emprestimo_w		bigint;
qt_ops_w				bigint;
ie_forma_desc_fin_w		varchar(1);
vl_desc_financ_w			double precision;
nr_seq_baixa_w			bigint;
nr_ordem_compra_w		bigint;
cd_moeda_w			bigint;
ie_moeda_w			varchar(255);
cd_moeda_cp_w			bigint;
cd_tipo_baixa_financ_w		integer;
nr_seq_trans_fin_desc_w		bigint;
nr_titulo_w			bigint;
ie_altera_mat_oc_w			varchar(1);
nr_solic_compra_w			bigint;
ie_tipo_servico_w			varchar(15);
ie_entrada_saida_w			varchar(1);
ie_devolucao_w			varchar(1);
ie_inativa_lote_devol_w		varchar(1);
nr_seq_lote_transf_w		bigint;
cd_setor_destino_w			smallint;
nr_seq_conjunto_w			bigint;
nr_sequencia_ref_w		bigint;
nr_ordem_compra_ww		bigint;
ie_integracao_nota_w		varchar(15);
ie_transferencia_estab_w		varchar(1);
cd_local_estoque_w		smallint;
ie_status_conjunto_w		smallint;
nr_seq_nf_ref_w			bigint;
qt_existe_imob_w			bigint;
qt_existe_nf_contrato_w		bigint;
ds_erro_ww			varchar(10);
qt_existe_regra_val_w		bigint;
qt_existe_regra_chegada_mat_w	bigint;
ie_bonificacao_w			varchar(3);
ie_empenho_orcamento_w		varchar(1);
qt_existe_lanc_conta_w		bigint;
ie_pend_tab_preco_w		varchar(1);
ie_envia_nf_integracao_w		varchar(1);
ie_gerar_oc_nf_faturamento_w	varchar(1);
ie_deduzir_ordem_adiant_w		varchar(1) := 'S';
nr_adiantamento_w			bigint;
ie_baixa_patrimonio_w		varchar(1);
cd_perfil_ativo_w			bigint;
nr_seq_bem_w			bigint;
vl_venda_w			double precision;
nr_seq_tipo_w			bigint;
ds_observacao_w			varchar(255);
ds_razao_tomador_orig_w		varchar(255);
ds_razao_emitente_orig_w		varchar(255);
ds_tributo_w			varchar(40);			
tx_tributo_w			double precision;
vl_tributo_w			double precision;
ds_observacao_nota_w		varchar(4000);
ds_texto_w			varchar(4000);
ie_desc_trib_nota_w		varchar(1);
ie_operacao_entrada_saida_w	varchar(1);
ie_lib_emprestimo_calc_nf_w	parametro_estoque.ie_lib_emprestimo_calc_nf%type;
dt_liberacao_w			emprestimo.dt_liberacao%type;
ds_consistencia_w		varchar(255);
nr_sequencia_nf_dev_w		nota_fiscal.nr_sequencia%type;
ie_estab_serie_nf_w		parametro_compras.ie_estab_serie_nf%type;
cd_cgc_emitente_w		estabelecimento.cd_cgc%type;
nr_item_solic_compra_w		solic_compra_item.nr_item_solic_compra%type;
dt_baixa_w			timestamp;
nr_seq_emprest_mat_w 	emprestimo_material.nr_sequencia%type;
qt_saldo_emprest_mat_w 	emprestimo_material.qt_nota_fiscal%type;
qt_tot_item_nf_emprest_w 	emprestimo_material.qt_nota_fiscal%type;
qt_baixa_emprest_mat_w emprestimo_material.qt_nota_fiscal%type;
qt_regra_w			bigint;
qt_venc_vinc_w			bigint;
ie_atualiza_estoque_w		varchar(1);
ie_sistema_origem_w		nota_fiscal.ie_sistema_origem%type;

ie_devolucao_baixa_tit_nf_w     varchar(1);
cd_tipo_baixa_w                 tipo_baixa_cpa.cd_tipo_baixa%type;
nr_seq_trans_fin_w              tipo_baixa_cpa.nr_seq_trans_fin%type;
cd_moeda_padrao_w               parametros_contas_pagar.cd_moeda_padrao%type;
vl_total_nota_w			nota_fiscal.vl_total_nota%type;
vl_rateio_tit_pagar_w		titulo_pagar.vl_titulo%type;
qt_tit_pagar_w			bigint;
pr_rateio_tit_pagar_w		double precision;
--vl_acumulado_w			titulo_pagar.vl_titulo%type;
vl_diferencia_w			nota_fiscal.vl_total_nota%type;	
vl_titulo_w			titulo_pagar.vl_titulo%type;
vl_titulos_w			titulo_pagar.vl_titulo%type;
ie_ctb_online_w			ctb_param_lote_nf.ie_ctb_online%type;
cd_moeda_estrangeira_w          nota_fiscal.cd_moeda_estrangeira%type;
vl_conv_estrangeiro_w           nota_fiscal.vl_conv_estrangeiro%type;
ie_gerou_tit_pagar_w			varchar(1) := 'N';
ie_gerar_trib_sem_tit_w         parametros_contas_pagar.ie_gerar_trib_sem_tit%type;
nr_seq_protocolo_w              nota_fiscal.nr_seq_protocolo%type;
ie_origem_imp_w			ordem_compra.ie_origem_imp%type;
nr_seq_lote_prot_w              nota_fiscal.nr_seq_lote_prot%type;
nr_seq_eme_fatura_w		nota_fiscal.nr_seq_eme_fatura%type;
ie_possue_adiant_w		nota_fiscal.nr_seq_adiantamento%type;
ie_utilizar_cfdi_w		nfe_senha_conexao.ie_utilizar_cfdi%type;
qt_anticipo_w                   bigint := 0;
ie_sistema_origem_ww            nota_fiscal.ie_sistema_origem%type;
qt_imp_nota_w			bigint;
ds_erro_vinculo_w		varchar(2000);
ds_lista_repasse_w		repasse_nota_fiscal.nr_repasse_terceiro%type;
vl_liquido_repasse_w    repasse_terceiro_venc.vl_liquido%type;
nr_titulo_repasse_w		bigint;
vl_tit_liquidado_w		double precision;
dt_liquidacao_w			titulo_pagar.dt_liquidacao%type;
vl_tit_devolucao_w		double precision;
vl_saldo_tit_w			titulo_pagar.vl_saldo_titulo%type;	
qt_titulos_not_liq_w		bigint;
ie_vinc_adiant_nf_dev_w		parametros_contas_pagar.ie_vinc_adiant_nf_dev%type;
vl_tit_liquidados_w		titulo_pagar.vl_titulo%type;
ie_gerou_tit_adiant_w		varchar(1) := 'N';
qt_tit_adiant_w			bigint;
seq_nf_credito_w		nf_credito.nr_sequencia%type;
nr_seq_proj_gpi_w		titulo_pagar.nr_seq_proj_gpi%type;
nr_seq_etapa_gpi_w		titulo_pagar.nr_seq_etapa_gpi%type;
nr_seq_conta_gpi_w		titulo_pagar.nr_seq_conta_gpi%type;
nr_seq_orc_item_gpi_w		titulo_pagar.nr_seq_orc_item_gpi%type;
ie_vincular_proj_gpi_w		varchar(1);
nr_seq_classif_w		titulo_pagar_classif.nr_sequencia%type;
ie_integra_finnegans_w  parametro_faturamento.ie_integra_finnegans%type;
dt_entrada_saida_w      nota_fiscal.dt_entrada_saida%type;
qt_reg_w                ordem_compra_item.nr_atendimento%type;
data_w		            text;
concat_str_w constant integration_call_log.ie_message_type%type := null;
nm_event_w constant integration_call_log.nm_interface%type := 'purchase.order.invoice.update';
nm_javaclass_w constant integration_call_log.nm_interface%type := 'com.philips.tasy.integration.purchaseorder.outbound.PurchaseOrderCallback';

c01 CURSOR FOR
SELECT	b.nr_item_nf,
	coalesce(b.ie_pend_tab_preco,'N')
from	material c,
	natureza_operacao d,
	nota_fiscal_item b,
	nota_fiscal a
where	a.nr_sequencia 		  = nr_sequencia_p
and	a.nr_sequencia		  = b.nr_sequencia
and	a.cd_natureza_operacao 	  = d.cd_natureza_operacao
and	b.cd_material		  = c.cd_material
and	d.ie_entrada_saida	  = 'E'
and	c.ie_preco_compra	  = 'S'
and	ie_acao_p		  = 'I'
and	coalesce(ie_compl_tributo,'N') = 'N';

c02 CURSOR FOR
SELECT	qt_item_nf,
	nr_emprestimo,
	nr_seq_item_emprestimo
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_p
and	nr_emprestimo > 0
and	nr_seq_item_emprestimo > 0;

c03 CURSOR FOR
SELECT	distinct nr_solic_compra,
	nr_item_solic_compra
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_p
and	(nr_solic_compra IS NOT NULL AND nr_solic_compra::text <> '');

c04 CURSOR FOR
SELECT	nr_seq_conjunto
from	cm_lote_transf_conj
where	nr_seq_lote_transf = nr_seq_lote_transf_w;

c05 CURSOR FOR /*aamfirmo  os 576529 16/04/2013*/
SELECT	nr_adiantamento
from	ordem_compra_adiant_pago a,
	nota_fiscal_item b
where	a.nr_ordem_compra	= b.nr_ordem_compra
and	b.nr_sequencia = nr_sequencia_p
group by	nr_adiantamento

union

SELECT	nr_adiantamento
from	nota_fiscal_adiant_pago
where	nr_sequencia_nf	= nr_sequencia_p
group by	nr_adiantamento;

c06 CURSOR FOR
SELECT	b.nr_sequencia,
	a.vl_liquido,
	a.ds_observacao
from	nota_fiscal_item a,
	pat_bem b
where	a.nr_sequencia = nr_sequencia_p
and	b.cd_bem = a.cd_imobilizado
and	(a.cd_imobilizado IS NOT NULL AND a.cd_imobilizado::text <> '');

c07 CURSOR FOR
	SELECT	a.ds_tributo,
		b.tx_tributo,
		b.vl_tributo
	from	tributo a,
		nota_fiscal_trib b
	where	a.cd_tributo = b.cd_tributo
	and	b.nr_sequencia = nr_sequencia_p;

/* OS-935330 - Emprestimo / devolucao Lote */

c08 CURSOR FOR
SELECT	nr_sequencia,
	( qt_emprestimo - coalesce(qt_nota_fiscal,0) )
from 	emprestimo_material
where ( qt_emprestimo - coalesce(qt_nota_fiscal,0) ) > 0
and 	nr_emprestimo = nr_emprestimo_w
and	cd_material = (
		SELECT	cd_material
		from 	emprestimo_material
		where	nr_emprestimo = nr_emprestimo_w
		and	nr_sequencia = nr_seq_item_emprestimo_w )
order by nr_sequencia;

c09 CURSOR FOR
SELECT  t.nr_titulo,
	t.vl_titulo,
	t.vl_saldo_titulo,
	t.dt_liquidacao
from    titulo_pagar t
where   nr_seq_nota_fiscal = nr_sequencia_ref_w;

C10 CURSOR FOR
SELECT	nr_titulo,
		vl_liquido
from	repasse_terceiro_venc
where	' ' || ds_lista_repasse_w || ' ' like '% ' || nr_repasse_terceiro || ' %'
and	(nr_titulo IS NOT NULL AND nr_titulo::text <> '')
order by nr_titulo desc;

C11 CURSOR FOR
SELECT	a.nr_repasse_terceiro
from	nota_fiscal b,
	repasse_nota_fiscal a
where a.nr_seq_nota_fiscal	= b.nr_sequencia
and b.nr_sequencia  = nr_sequencia_p;

c12 CURSOR FOR
SELECT	nr_titulo
from	titulo_pagar
where	nr_seq_nota_fiscal = nr_sequencia_p;

c13 CURSOR FOR
SELECT	nr_sequencia
from	titulo_pagar_classif
where	nr_titulo = nr_titulo_w;


BEGIN


select	count(*)
into STRICT	qt_existe_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p
and	coalesce(nr_nota_fiscal::text, '') = '';
if (qt_existe_w > 0) then
	/*(-20011, 'Para ser calculada, a nota fiscal deve possuir um numero.');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(195288);
end if;

/*lock table nota_fiscal in exclusive mode;*/

select	1
into STRICT	i
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p
for update;

begin
select	coalesce(max(ie_tipo_nota),'X')
into STRICT	ie_tipo_nota_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;
if (ie_tipo_nota_w = 'X') then
	/*(-20011,'Deve ser informado o tipo da Nota fiscal');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(195290);
end if;
end;

select	count(*)
into STRICT	qt_calculada_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p
and	(dt_atualizacao_estoque IS NOT NULL AND dt_atualizacao_estoque::text <> '');
if (qt_calculada_w > 0) then
	/*(-20011,'Esta nota ja esta calculada, ou esta sendo calculada por outro usuario.');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(195291);
end if;

select	cd_estabelecimento,
	cd_serie_nf,
	nr_seq_agenda_pac,
	coalesce(ie_compl_tributo,'N'),
	cd_setor_digitacao,
	nr_ordem_compra,
	nr_sequencia_ref,
	nr_seq_nf_ref,
	substr(obter_nome_pf_pj(null,cd_cgc),1,255),
	substr(obter_nome_pf_pj(null,cd_cgc_emitente),1,255),
	nr_nota_fiscal,
	coalesce(vl_conv_estrangeiro,0),
	cd_moeda_estrangeira,
	ie_sistema_origem,
	dt_entrada_saida
into STRICT	cd_estabelecimento_w,
	cd_serie_nf_w,
	nr_seq_agenda_pac_w,
	ie_compl_tributo_w,
	cd_setor_digitacao_w,
	nr_ordem_compra_w,
	nr_sequencia_ref_w,
	nr_seq_nf_ref_w,
	ds_razao_tomador_orig_w,
	ds_razao_emitente_orig_w,
	nr_nota_orig_w,
	vl_conv_estrangeiro_w,
	cd_moeda_estrangeira_w,
	ie_sistema_origem_ww,
	dt_entrada_saida_w
from	nota_fiscal
where	nr_sequencia	= nr_sequencia_p;

select	coalesce(max(ie_empenho_orcamento),'N')
into STRICT	ie_empenho_orcamento_w
from	parametro_estoque
where	cd_estabelecimento	= cd_estabelecimento_w;


if (nr_sequencia_ref_w > 0) then

	select	coalesce(max(nr_ordem_compra),0),
		max(ie_sistema_origem)
	into STRICT	nr_ordem_compra_ww,
		ie_sistema_origem_w
	from	nota_fiscal
	where	nr_sequencia = nr_sequencia_ref_w;
	
	select count(*)
	into STRICT   qt_anticipo_w
	from   fis_tipo_relacao
	where  nr_seq_nota = nr_sequencia_p
	and    cd_tipo_relacao = '07';
	
end if;

select	max(a.cd_moeda),
	max(ie_origem_imp)
into STRICT	cd_moeda_w,
	ie_origem_imp_w
from	ordem_compra a
where	a.nr_ordem_compra	= nr_ordem_compra_w;

cd_perfil_ativo_w := obter_perfil_ativo;

ie_moeda_w := obter_param_usuario(40, 208, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w, ie_moeda_w);
ie_altera_mat_oc_w := obter_param_usuario(40, 271, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w, ie_altera_mat_oc_w);
ie_inativa_lote_devol_w := obter_param_usuario(40, 303, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w, ie_inativa_lote_devol_w);

if (coalesce(ie_altera_mat_oc_w,'N') = 'S') then
	CALL alterar_material_oc_nf(nr_sequencia_p, nm_usuario_p);
end if;

select	max(a.cd_moeda_padrao),
	max(a.ie_gerar_trib_sem_tit)
into STRICT	cd_moeda_cp_w,
        ie_gerar_trib_sem_tit_w
from	parametros_contas_pagar a
where	a.cd_estabelecimento	= cd_estabelecimento_w;

if (ie_moeda_w = 'S') or (coalesce(cd_moeda_w::text, '') = '') then
	cd_moeda_w	:= coalesce(cd_moeda_cp_w,cd_moeda_w);
end if;

select	max(cd_cgc)
into STRICT	cd_cgc_emitente_w
from	estabelecimento
where	cd_estabelecimento = cd_estabelecimento_w;

select	coalesce(max(ie_aviso_chegada),'N'),
	coalesce(max(ie_diverg_oc_nf),'N'),
	coalesce(max(ie_atualiza_nf_conta_opme),'N'),
	coalesce(max(ie_forma_desc_fin),'A'),
	coalesce(max(cd_tipo_baixa_financ),0),
	coalesce(max(nr_seq_trans_fin_desc),0),
	coalesce(max(ie_gerar_oc_nf_faturamento),'N'),
	max(ie_integracao_nota),
	coalesce(max(ie_estab_serie_nf),'N')
into STRICT	ie_aviso_chegada_w,
	ie_diverg_oc_nf_w,
	ie_atualiza_nf_conta_opme_w,
	ie_forma_desc_fin_w,
	cd_tipo_baixa_financ_w,
	nr_seq_trans_fin_desc_w,
	ie_gerar_oc_nf_faturamento_w,
	ie_integracao_nota_w,
	ie_estab_serie_nf_w
from	parametro_compras
where	cd_estabelecimento	= cd_estabelecimento_w;

select	coalesce(max(cd_oper_ent_pass_direta),0),
	coalesce(max(cd_oper_cons_pass_direta),0),
	coalesce(max(ie_lib_emprestimo_calc_nf),'N')
into STRICT	cd_oper_ent_pass_direta_w,
	cd_oper_cons_pass_direta_w,
	ie_lib_emprestimo_calc_nf_w
from	parametro_estoque
where	cd_estabelecimento = cd_estabelecimento_w;

select	count(*)
into STRICT	qt_item_direto_w
from	nota_fiscal_item
where	nr_sequencia		= nr_sequencia_p
and	(cd_material IS NOT NULL AND cd_material::text <> '')
and (obter_se_local_direto(cd_local_estoque) = 'S');

begin
select	coalesce(ie_titulo_nf_saida, 'N')
into STRICT	ie_titulo_nf_saida_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;
exception
	when no_data_found then
		/*(-20011, 'N?o existe parametro de faturamento para o estabelecimento: ' || cd_estabelecimento_w);*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(195292,'CD_ESTABELECIMENTO_W='||cd_estabelecimento_w);		
end;

select	coalesce(max(o.ie_contas_receber),'S'),
	coalesce(max(o.ie_ultima_compra), 'S'),
	coalesce(max(ie_transferencia_estab),'N'),
	coalesce(max(ie_bonificacao),'N')
into STRICT	ie_contas_receber_w,
	ie_ultima_compra_w,
	ie_transferencia_estab_w,
	ie_bonificacao_w
from	operacao_nota o,
	nota_fiscal a
where	a.nr_sequencia = nr_sequencia_p
and	a.cd_operacao_nf = o.cd_operacao_nf;

select	count(*)
into STRICT	qt_count_titulo_w
from	titulo_receber
where	nr_seq_nf_saida = nr_sequencia_p;

if (ie_compl_tributo_w = 'S') then
	begin
	select	count(*)
	into STRICT	qt_tributo_w
	from	nota_fiscal_item_trib b,
		tributo c
	where	b.cd_tributo = c.cd_tributo
	and	c.ie_tipo_tributo in ('IPI','ICMS')
	and	nr_sequencia = nr_sequencia_p;
	
	if (qt_tributo_w = 0) then
		/*(-20011,'Nota n?o possui os tributos de IPI ou ICMS');*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(195293);
	end if;
	end;
end if;

/*matheus os 49689 em 05/02/07 incluido tipo nota 3 no in abaixo*/

if 	((ie_tipo_nota_p = 3) and (ie_titulo_nf_saida_w = 'S') and (ie_contas_receber_w = 'S')) or
	((ie_tipo_nota_p in (1,3,4)) and (ie_titulo_nf_saida_w = 'T') and (ie_contas_receber_w = 'S')) and (qt_count_titulo_w = 0) and (ie_compl_tributo_w = 'N') then
	CALL gerar_titulo_receber_nfs(nr_sequencia_p ,nm_usuario_p);  /* edgar 19/08/2003 */
end if;

if (ie_compl_tributo_w = 'N') then
	begin
	if	((philips_param_pck.get_cd_pais = 2) and ((ie_tipo_nota_w = 'EN') or (ie_tipo_nota_w = 'EF')))  then
	        CALL ratear_valores_nf(nr_sequencia_p, nm_usuario_p, cd_moeda_estrangeira_w, vl_conv_estrangeiro_w);
		else
		CALL ratear_valores_nf(nr_sequencia_p, nm_usuario_p);
	end if;
		
	exception
		when others then
			/*(-20011,'Erro no Rateio dos Valores');*/

			CALL wheb_mensagem_pck.exibir_mensagem_abort(195294);
	end;
end if;

/*
Gerar os registros de rateio de tributos pelo centro de custo, para contabilidade.
*/
CALL fis_ratear_trib_item(nm_usuario_p, cd_estabelecimento_w, nr_sequencia_p);

if (ie_atualiza_nf_conta_opme_w = 'S') then /* matheus os 96425 18/07/2008*/
	CALL atualizar_nota_conta_opme(nr_sequencia_p, nm_usuario_p);
end if;

select	a.ie_operacao_fiscal,
	coalesce(a.ie_devolucao,'N')
into STRICT	ie_entrada_saida_w,
	ie_devolucao_w
from	operacao_nota a,
	nota_fiscal b
where	a.cd_operacao_nf = b.cd_operacao_nf
and	b.nr_sequencia = nr_sequencia_p;

if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'es_MX' and ie_entrada_saida_w = 'E') then
    CALL update_rfc_envio_xml(nr_sequencia_p, 'N');
end if;

if (ie_inativa_lote_devol_w = 'S') and (ie_entrada_saida_w = 'S') and (ie_devolucao_w = 'S') then
	CALL inativar_lote_fornec_devol_nf(nr_sequencia_p,nm_usuario_p);
end if;


if (ie_compl_tributo_w = 'N') then
	begin
	CALL gerar_movto_estoque_nf( nr_sequencia_p, nm_usuario_p);
	end;
end if;

/*gerar movimentac?o para itens de passagem direta
movimentac?o de entrada e movimentac?o de consumo*/
if (cd_oper_ent_pass_direta_w > 0) and (cd_oper_cons_pass_direta_w > 0) and (qt_item_direto_w > 0) and (ie_compl_tributo_w = 'N') then
	begin
	CALL gerar_movto_estoque_direto_nf( nr_sequencia_p, nm_usuario_p);
	exception
	when others then
		ds_erro_w	:= sqlerrm(SQLSTATE);
		/*(-20011,'Erro na movimentac?o de passagem direta' || chr(10) || ds_erro_w);*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(195296,'DS_ERRO_W='||ds_erro_w);
	end;
end if;	

select	substr(coalesce(obter_valor_param_usuario(40, 122, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 147, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 416, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 477, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1),
	substr(coalesce(obter_valor_param_usuario(40, 503, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w),'N'),1,1)
into STRICT	ie_gerar_sempre_titulo_w,
	ie_gera_titulo_nf_repasse_w,
	ie_baixa_patrimonio_w,
	ie_devolucao_baixa_tit_nf_w,
	ie_vincular_proj_gpi_w
;


ie_gerar_tit_w	:= 'S';
select	count(*)
into STRICT	qt_existe_w
from	repasse_nota_fiscal
where	nr_seq_nota_fiscal	= nr_sequencia_p;
if (qt_existe_w > 0) then
	ie_gerar_tit_w	:= ie_gera_titulo_nf_repasse_w;
end if;


if (ie_gerar_tit_w = 'S') and (ie_gerar_sempre_titulo_w = 'S') and (ie_compl_tributo_w = 'N') then
	select	count(*)
	into STRICT	qt_existe_w
	from	nota_fiscal_venc
	where	nr_sequencia 	= nr_sequencia_p
	and	(nr_titulo_pagar IS NOT NULL AND nr_titulo_pagar::text <> '');

	if (qt_existe_w > 0) then
		select	count(*)
		into STRICT	qt_existe_w
		from	nota_fiscal_venc
		where	coalesce(nr_titulo_pagar::text, '') = ''
		and	nr_sequencia 	= nr_sequencia_p;

		if (qt_existe_w > 0) then
			ie_gerou_tit_nf_w := gerar_titulo_pagar_nf_venc( nr_sequencia_p, nm_usuario_p, ie_gerou_tit_nf_w);
			ie_gerou_tit_pagar_w := 'S';
		end if;
	end if;
end if;

/* gerar titulo somente se n?o existir nenhum titulo para a nota fiscal */

select	count(*)
into STRICT	qt_titulo_pagar_w
from	titulo_pagar
where	nr_seq_nota_fiscal = nr_sequencia_p;

if (ie_gerar_tit_w = 'S') and (qt_titulo_pagar_w = 0) and (ie_gerou_tit_nf_w = 'N') and (ie_compl_tributo_w = 'N') and (qt_anticipo_w = 0) then
	begin
	CALL gerar_titulo_pagar_nf( nr_sequencia_p, nm_usuario_p);
	ie_gerou_tit_pagar_w := 'S';
	exception
		when others then
			ds_erro_w	:= sqlerrm(SQLSTATE);
			/*(-20011,'Erro na gerac?o do Titulo a Pagar' || chr(10) || ds_erro_w);*/

			CALL wheb_mensagem_pck.exibir_mensagem_abort(195297,'DS_ERRO_W='||ds_erro_w);
	end;
end if;


if (ie_gerar_tit_w = 'S') and (qt_titulo_pagar_w = 1) and (ie_gerou_tit_nf_w = 'N') and (ie_compl_tributo_w = 'N') and (ie_gerar_trib_sem_tit_w = 'S')	then
	begin
	CALL gerar_titulo_trib_pagar(nr_sequencia_p, nm_usuario_p);
	ie_gerou_tit_pagar_w := 'S';
	exception
		when others then
			ds_erro_w	:= sqlerrm(SQLSTATE);
			/*(-20011,'Erro na gerac?o do Titulo a Pagar' || chr(10) || ds_erro_w);*/

			CALL wheb_mensagem_pck.exibir_mensagem_abort(195297,'DS_ERRO_W='||ds_erro_w);
	end;
end if;

/*OS 1383220 - Se nao gerou titulo pela NF, mas se tiver titulo vinculado na NF, chamar a integracao MXM*/

if (ie_gerou_tit_pagar_w = 'N') and (qt_titulo_pagar_w > 0) then
	CALL gravar_agend_integracao(560,'NR_SEQUENCIA='||nr_sequencia_p||';');
end if;

select count(*)
into STRICT   qt_venc_vinc_w
from   nota_fiscal_venc
where  nr_sequencia = nr_sequencia_p
and    coalesce(nr_titulo_vinc,0) <> 0;

if (qt_titulo_pagar_w > 0)and (ie_gerar_tit_w = 'S')and (ie_compl_tributo_w = 'N')and (ie_gerou_tit_pagar_w = 'N') and (qt_venc_vinc_w > 0)then
	begin
	CALL gerar_titulo_pagar_trib_nf(nr_sequencia_p, nm_usuario_p, 'N');
	exception
		when others then
			ds_erro_w	:= sqlerrm(SQLSTATE);
			/*(-20011,'Erro na gerac?o do Titulo a Pagar' || chr(10) || ds_erro_w);*/

			CALL wheb_mensagem_pck.exibir_mensagem_abort(195297,'DS_ERRO_W='||ds_erro_w);
	end;
end if;

CALL gravar_agend_integracao(352, 'NR_SEQ_NOTA_FISCAL=' || nr_sequencia_p || ';');

/* ahoffelder - os 275824 - 21/01/2011 */

select	max(a.nr_titulo)
into STRICT	nr_titulo_w
from	titulo_pagar a
where	a.nr_seq_nota_fiscal	= nr_sequencia_p;

if (qt_titulo_pagar_w > 0) and (ie_gerou_tit_nf_w = 'N') then

	select	coalesce(sum(a.vl_desc_financ),0)
	into STRICT	vl_desc_financ_w
	from	nota_fiscal_venc a
	where	a.nr_sequencia	= nr_sequencia_p;

	if	(ie_forma_desc_fin_w = 'A' AND vl_desc_financ_w <> 0) or (ie_forma_desc_fin_w = 'T') then
		
		update	titulo_pagar
		set	vl_dia_antecipacao	= vl_desc_financ_w
		where	nr_titulo		= nr_titulo_w;
		
		if (ie_forma_desc_fin_w = 'T') then
			select 	count(*)
			into STRICT	qt_itens_nf_w
			from	nota_fiscal_item
			where	nr_sequencia = nr_sequencia_p;
			
			if (qt_itens_nf_w > 0) then
				select	sum(vl_liquido - (vl_liquido * pr_desc_financ/100)),
					sum(vl_liquido)
				into STRICT	vl_total_item_desc_w,
					vl_total_item_w
				from	nota_fiscal_item
				where	nr_sequencia = nr_sequencia_p;
			
				pr_desc_financ_w := round((vl_total_item_w - vl_total_item_desc_w)/vl_total_item_w * 100,2);
			
				update	titulo_pagar
				set	tx_desc_antecipacao	= pr_desc_financ_w
				where	nr_titulo			= nr_titulo_w;
				
			end if;
		end if;
	elsif (ie_forma_desc_fin_w = 'B') and (vl_desc_financ_w <> 0) and (nr_seq_trans_fin_desc_w <> 0) and (cd_tipo_baixa_financ_w <> 0) then

		select (coalesce(max(nr_sequencia),0) + 1)
		into STRICT	nr_seq_baixa_w
		from	titulo_pagar_baixa
		where	nr_titulo	= nr_titulo_w;

		insert	into titulo_pagar_baixa(
			nr_titulo,
			nr_sequencia,
			dt_baixa,
			cd_moeda,
			dt_atualizacao,
			nm_usuario,
			cd_tipo_baixa,
			ie_acao,
			vl_descontos,
			vl_outras_deducoes,
			vl_juros,
			vl_multa,
			vl_outros_acrescimos,
			vl_pago,
			vl_baixa,
			vl_devolucao,
			nr_seq_devolucao,
			nr_seq_trans_fin,
			vl_ir,
			vl_imposto_munic,
			vl_inss,
			nr_lote_contabil,
			ds_observacao)
		values (	nr_titulo_w,
			nr_seq_baixa_w,
			clock_timestamp(),
			cd_moeda_w,
			clock_timestamp(),
			nm_usuario_p,
			cd_tipo_baixa_financ_w,
			'I',
			vl_desc_financ_w,
			0,
			0,
			0,
			0,
			0,
			vl_desc_financ_w,
			0,
			nr_sequencia_p,
			nr_seq_trans_fin_desc_w,
			0,
			0,
			0,
			0,
			WHEB_MENSAGEM_PCK.get_texto(297519));

		CALL atualizar_tit_pagar_baixa(nr_titulo_w,nr_seq_baixa_w,nm_usuario_p,'N');
		
		CALL gerar_alerta_baixa_tit_pagar(nr_titulo_w,nr_seq_baixa_w,cd_estabelecimento_w,nm_usuario_p);

	end if;

end if;

select	max(nr_seq_proj_gpi),
	max(nr_seq_etapa_gpi),
	max(nr_seq_conta_gpi),
	max(nr_seq_orc_item_gpi)
into STRICT	nr_seq_proj_gpi_w,
	nr_seq_etapa_gpi_w,
	nr_seq_conta_gpi_w,
	nr_seq_orc_item_gpi_w
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_p;

if	ie_vincular_proj_gpi_w = 'S' then
	open C12;
	loop
	fetch C12 into	
		nr_titulo_w;
	EXIT WHEN NOT FOUND; /* apply on C12 */
		begin
		
			CALL gpi_vincular_titulo_pagar(	nr_titulo_w,
							nr_seq_proj_gpi_w,
							nr_seq_etapa_gpi_w,
							nr_seq_conta_gpi_w,
							'V',
							nm_usuario_p,
							nr_seq_orc_item_gpi_w,
							0,
							0);
		
		open C13;
		loop
		fetch C13 into	
			nr_seq_classif_w;
		EXIT WHEN NOT FOUND; /* apply on C13 */
			begin
			CALL gpi_vincular_titulo_pagar(	nr_titulo_w,
							nr_seq_proj_gpi_w,
							nr_seq_etapa_gpi_w,
							nr_seq_conta_gpi_w,
							'V',
							nm_usuario_p,
							nr_seq_orc_item_gpi_w,
							nr_seq_classif_w,
							1);
			end;
		end loop;
		close C13;
		
		end;
	end loop;
	close C12;
end if;

select	count(*)
into STRICT	qt_existe_w
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_p
and	(nr_sequencia_vinc_consig IS NOT NULL AND nr_sequencia_vinc_consig::text <> '');

if (ie_gerar_oc_nf_faturamento_w = 'S') and (qt_existe_w > 0) then
	CALL gerar_ordem_compra_consig_nf(nr_sequencia_p,nm_usuario_p);
end if;

/*se for saida de transferencia - n?o atualiza a ordem, somente gravar log para identificac?o*/

if (ie_compl_tributo_w = 'N') then
	begin
	if (ie_tipo_nota_w = 'ST') then
		CALL atualizar_ordem_nota_transf(nr_sequencia_p,nm_usuario_p);
		CALL atualizar_oc_nf_transf_quimio(nr_sequencia_p,nm_usuario_p);
	else
		begin
		CALL atualizar_ordem_compra_nf( nr_sequencia_p,nm_usuario_p, ie_acao_p);
		CALL envia_comunic_falta_entrega_oc(nr_sequencia_p, nm_usuario_p);
		exception
			when others then
				ds_erro_w	:= sqlerrm(SQLSTATE);
				/*(-20011,'Erro ao Atualizar a ordem de Compra' || chr(10) || ds_erro_w);*/

				CALL wheb_mensagem_pck.exibir_mensagem_abort(195298,'DS_ERRO_W='||ds_erro_w);
		end;
	end if;
	end;
end if;

/*gravar os dados de ultima compra*/

if	((ie_entrada_saida_w <> 'S') or (ie_devolucao_w = 'S')) and /*alterado para gravar apenas quando for entrada ou devoluc?o */
	(ie_ultima_compra_w = 'S') then
	begin
	CALL grava_dados_ultima_compra(nr_sequencia_p, 1, nm_usuario_p);
	exception when others then
		ds_erro_w	:= sqlerrm(SQLSTATE);
		/*(-20011,'Erro ao gravar os dados de ultima compra dos materiais da nota' || chr(10) || ds_erro_w);*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(195300,'DS_ERRO_W='||ds_erro_w);
	end;
end if;

/*gera os precos de venda*/

begin
open c01;
loop
fetch c01 into
       	nr_item_nf_w,
	ie_pend_tab_preco_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	select 	count(1)		-- tratamento realizado para operadoras de plano de saude
	into STRICT	qt_ops_w
	from	pls_outorgante
	where	cd_estabelecimento = cd_estabelecimento_w;
	if (qt_ops_w > 0) then
		begin
		CALL pls_gerar_preco_venda(nr_sequencia_p, nr_item_nf_w,nm_usuario_p);
		exception
		when others then
			ds_erro_ww := ' ';
		end;
		
	end if;
	
	if (ie_pend_tab_preco_w = 'N') then
		CALL gerar_preco_venda(nr_sequencia_p, nr_item_nf_w, nm_usuario_p);
	end if;
	
end loop;
close c01;
exception
	when others then
		ds_erro_w	:= sqlerrm(SQLSTATE);
		/*(-20011,'Erro ao gerar preco de venda' || chr(10) || ds_erro_w);*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(195301,'DS_ERRO_W='||ds_erro_w);
end;

begin

if (ie_diverg_oc_nf_w = 'S') or (ie_diverg_oc_nf_w = 'C') then
	CALL avisar_justificativa_nf(nr_sequencia_p, nm_usuario_p);
	CALL avisar_justif_email_nf_oc(nr_sequencia_p, nm_usuario_p);
end if;
exception
	when others then
		ds_erro_w	:= sqlerrm(SQLSTATE);
		/*(-20011,'Erro ao avisar a justificativa do material' || chr(10) || ds_erro_w);*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(195303,'DS_ERRO_W='||ds_erro_w);
end;
	
begin
select	c.ie_tipo_requisicao,
	c.ie_atualiza_estoque
into STRICT	ie_tipo_requisicao_w,
	ie_atualiza_estoque_w
from	operacao_estoque c,
	operacao_nota b,
	nota_fiscal a
where	a.nr_sequencia	= nr_sequencia_p
and	a.cd_operacao_nf	= b.cd_operacao_nf
and	b.cd_operacao_estoque = c.cd_operacao_estoque;
exception
	when others then
	/*(-20011,'A operac?o da nota n?o esta vinculada com uma de estoque');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(195304);
end;

/*faz a baixa dos emprestimos vinculados a nota fiscal*/

begin
CALL baixar_emprestimo_nf( nr_sequencia_p, nm_usuario_p);
exception
	when others then
	ds_erro_w	:= sqlerrm(SQLSTATE);
	/*(-20011,'Erro ao fazer a baixa do emprestimo vinculados ao item da nota.' || chr(10) || ds_erro_w);*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(195305,'DS_ERRO_W='||ds_erro_w);
end;

/*se for nota de integrac?o com opme - faz os ajustes da integrac?o*/

if (coalesce(nr_seq_agenda_pac_w,0) > 0) then
	begin
	ie_envia_nf_integracao_w := obter_param_usuario(1750, 56, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w, ie_envia_nf_integracao_w);
	
	if (coalesce(ie_envia_nf_integracao_w,'S') = 'S') then
	
		select	count(*)
		into STRICT	qt_existe_w
		from	agenda_pac_opme a,
			agenda_paciente b
		where	b.nr_sequencia		= a.nr_seq_agenda
		and	b.nr_sequencia		= nr_seq_agenda_pac_w
		and	(b.ie_opme_integracao IS NOT NULL AND b.ie_opme_integracao::text <> '')
		and (obter_regra_int_opme_material(a.cd_material,'01') = 'S')
		and	a.qt_material		> (
			SELECT	coalesce(sum(n.qt_item_nf), 0)
			from	nota_fiscal_item n
			where	n.nr_seq_ag_pac_opme	= a.nr_sequencia
			and	n.nr_seq_agenda_pac	= b.nr_sequencia);
		if (ie_tipo_nota_w = 'EN') then
			begin
			CALL gravar_agend_integracao(45,'nr_sequencia=' || nr_seq_agenda_pac_w || ';' || 'nr_seq_nota=' || nr_sequencia_p || ';' );

			if (qt_existe_w > 0) then
				CALL ajusta_status_agenda_int_opme(nr_seq_agenda_pac_w, 48, null, nm_usuario_p,'N');
			else
				CALL ajusta_status_agenda_int_opme(nr_seq_agenda_pac_w, 49, null, nm_usuario_p,'N');
			end if;
			end;
		end if;
	end if;
	end;	
end if;

CALL gerar_historico_nota_fiscal(nr_sequencia_p, nm_usuario_p, '4', WHEB_MENSAGEM_PCK.get_texto(297521));

select	max(nr_seq_protocolo),
	max(nr_interno_conta),
	max(nr_seq_lote_prot),
	max(nr_seq_eme_fatura)
into STRICT   	nr_seq_protocolo_w,
	nr_interno_conta_w,
	nr_seq_lote_prot_w,
	nr_seq_eme_fatura_w
from   	nota_fiscal n
where  	n.nr_sequencia = nr_sequencia_p;

/*OS 2135077 - deve atualizar a serie da nota de credito*/

SELECT 	MAX(nr_sequencia)
INTO STRICT	seq_nf_credito_w
FROM 	NF_CREDITO
WHERE	NR_SEQ_NF_GERADA = NR_SEQUENCIA_P;

if (ie_tipo_nota_p in (1, 3, 4, 5) and ((seq_nf_credito_w IS NOT NULL AND seq_nf_credito_w::text <> '')  or (coalesce(nr_seq_protocolo_w::text, '') = '') and (coalesce(nr_interno_conta_w::text, '') = '') and (coalesce(nr_seq_lote_prot_w::text, '') = '') and (coalesce(nr_seq_eme_fatura_w::text, '') = ''))) then
	CALL atualizar_serie_nf(nr_sequencia_p, nm_usuario_p);
end if;

/* francisco - os 100965 - 19/07/2008 evitar que o titulo fique com o numero da nota incorreto*/

if 	((ie_tipo_nota_p = 3) and (ie_titulo_nf_saida_w = 'S') and (ie_contas_receber_w = 'S')) or
	((ie_tipo_nota_p in (1,3,4)) and (ie_titulo_nf_saida_w = 'T') and (ie_contas_receber_w = 'S')) then

	select	max(somente_numero(nr_nota_fiscal))
	into STRICT	nr_nota_titulo_w
	from	titulo_receber
	where	nr_seq_nf_saida		= nr_sequencia_p;

	select	max(somente_numero(nr_nota_fiscal))
	into STRICT	nr_nota_fiscal_atual_w
	from	nota_fiscal
	where	nr_sequencia		= nr_sequencia_p;
	
	if (nr_nota_titulo_w IS NOT NULL AND nr_nota_titulo_w::text <> '') and (nr_nota_titulo_w <> nr_nota_fiscal_atual_w) then
		update	titulo_receber
		set	nr_nota_fiscal	= nr_nota_fiscal_atual_w
		where	nr_seq_nf_saida	= nr_sequencia_p;
	end if;
end if;
/* fim francisco 19/07/2008 */



/* marcus 01/09/2004 para evitar que os itens fiquem com numero diferente na nota */

select	nr_nota_fiscal
into STRICT	nr_nota_fiscal_w
from	nota_fiscal
where	nr_sequencia		= nr_sequencia_p;


/*atualizar movimento de estoque da nota fiscal de saida - numero do documento - thlima 11/06*/
if (ie_tipo_nota_p in (1,3,4)) then
	begin
	update	movimento_estoque
	set	nr_documento 	 	= nr_nota_fiscal_w
	where	nr_seq_tab_orig		= nr_sequencia_p
	and	ie_origem_documento	= '1'
	and	nr_documento		<> nr_nota_fiscal_w;
	end;
end if;

open c02;
loop
fetch c02 into	
	qt_item_nf_w,
	nr_emprestimo_w,
	nr_seq_item_emprestimo_w;
EXIT WHEN NOT FOUND; /* apply on c02 */
	begin
	
	if (ie_lib_emprestimo_calc_nf_w = 'S') then
		
		select	dt_liberacao
		into STRICT	dt_liberacao_w
		from	emprestimo
		where	nr_emprestimo = nr_emprestimo_w;

		if (coalesce(dt_liberacao_w::text, '') = '') then
			CALL consistir_nf_emprestimo(nr_sequencia_p);
		
			CALL liberar_emprestimo(nr_emprestimo_w, nm_usuario_p, 'N');
		end if;
	end if;
	
	/* OS-935330 - Emprestimo / devolucao Lote */

	qt_tot_item_nf_emprest_w := qt_item_nf_w;
	
	open c08;
	loop
	fetch c08 into	
		nr_seq_emprest_mat_w,
		qt_saldo_emprest_mat_w;
	EXIT WHEN NOT FOUND; /* apply on C08 */
		begin
		
		if (( qt_tot_item_nf_emprest_w - qt_saldo_emprest_mat_w ) >= 0 ) then
			qt_baixa_emprest_mat_w := qt_saldo_emprest_mat_w;
			qt_tot_item_nf_emprest_w := qt_tot_item_nf_emprest_w - qt_saldo_emprest_mat_w;
		else
			qt_baixa_emprest_mat_w := qt_tot_item_nf_emprest_w;
		end if;
		
		if ( qt_baixa_emprest_mat_w > 0 ) then
			update	emprestimo_material
			set	qt_nota_fiscal = qt_baixa_emprest_mat_w
			where	nr_emprestimo = nr_emprestimo_w 
			and	nr_sequencia = nr_seq_emprest_mat_w;
		end if;
		
		end;
	end loop;
	close C08;
	
	update	emprestimo_material
	set	ie_atualiza_estoque = ie_atualiza_estoque_w
	where	nr_emprestimo = nr_emprestimo_w
	and	nr_sequencia = nr_seq_item_emprestimo_w;
	end;
end loop;
close c02;

open c03;
loop
fetch c03 into	
	nr_solic_compra_w,
	nr_item_solic_compra_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
	begin
	
	select	dt_baixa
	into STRICT	dt_baixa_w
	from	solic_compra_item
	where	nr_solic_compra = nr_solic_compra_w
	and	nr_item_solic_compra = nr_item_solic_compra_w;
	
	select	ie_tipo_servico
	into STRICT	ie_tipo_servico_w
	from	solic_compra
	where	nr_solic_compra = nr_solic_compra_w;
	
	if (coalesce(dt_baixa_w::text, '') = '') and (ie_tipo_servico_w in ('SP','CD','SR','SN','SI')) then
		CALL baixar_solic_compra_item(
			nr_solic_compra_w,


			nr_item_solic_compra_w,
			nm_usuario_p,		

			1,
			WHEB_MENSAGEM_PCK.get_texto(297523));
	
	end if;
	
	end;
end loop;
close c03;

/* verifica se e transferencia de cme e executa as ac?es necessarias */

select	coalesce(max(nr_seq_transf_cme),0)
into STRICT	nr_seq_lote_transf_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

if (nr_seq_lote_transf_w > 0) and (ie_tipo_nota_w = 'EN') then
	begin
	ie_status_conjunto_w := obter_param_usuario(406, 164, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w, ie_status_conjunto_w);
		
	select	cd_setor_destino
	into STRICT	cd_setor_destino_w
	from	cm_lote_transferencia
	where	nr_sequencia = nr_seq_lote_transf_w;

	select	coalesce(max(cd_local_estoque),0)
	into STRICT	cd_local_estoque_w
	from	nota_fiscal_item
	where	nr_sequencia = nr_sequencia_p;
	
	open c04;
	loop
	fetch c04 into
		nr_seq_conjunto_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		begin
	
		CALL cm_atualiza_movto_conj(nr_seq_conjunto_w,cd_estabelecimento_w,nm_usuario_p);

		update	cm_conjunto_cont
		set	cd_setor_atendimento = cd_setor_destino_w,
			cd_local_estoque = cd_local_estoque_w,
			ie_status_conjunto = CASE WHEN coalesce(ie_status_conjunto_w,0)=0 THEN ie_status_conjunto  ELSE ie_status_conjunto_w END
		where	nr_sequencia = nr_seq_conjunto_w;

		end;
	end loop;
	close c04;

	update	cm_lote_transferencia
	set	dt_baixa 		= clock_timestamp()
	where	nr_sequencia 	= nr_seq_lote_transf_w;

	end;
end if;	

/*verifica se existe material para lancar diretamente na conta paciente*/

select	count(*)
into STRICT	qt_existe_lanc_conta_w
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_p
and	(nr_atend_lancamento IS NOT NULL AND nr_atend_lancamento::text <> '');

if (qt_existe_lanc_conta_w > 0) then
	CALL lancar_material_nf_conta(nr_sequencia_p,nm_usuario_p,'N');
end if;

if	(((ie_integracao_nota_w = 'P') and (ie_tipo_nota_w = 'EN') and (nr_ordem_compra_w > 0) and (ie_transferencia_estab_w = 'N')) or
	 ((ie_integracao_nota_w = 'P') and (ie_tipo_nota_w = 'EN') and (ie_bonificacao_w = 'S'))) then
	
	delete from erros_integracao_piramide
	where	cd_estabelecimento = cd_estabelecimento_w
	and	nm_usuario = nm_usuario_p
	and	ie_funcao in ('NFE');
				
	CALL exec_sql_dinamico('Tasy','begin pir_envia_nota_fiscal_entrada('
			|| nr_sequencia_p || ','
			|| 0 || ','
			|| chr(39) || nm_usuario_p || chr(39) || '); end;');

	select	max(ds_erro)
	into STRICT	ds_erro_w
	from	erros_integracao_piramide
	where	cd_estabelecimento = cd_estabelecimento_w
	and	nm_usuario = nm_usuario_p
	and	ie_funcao in ('NFE');

	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(195308,'DS_ERRO_W='||ds_erro_w);
	end if;
end if;

 if (ie_integracao_nota_w = 'P') and (ie_tipo_nota_w = 'SD') and (ie_devolucao_w = 'S') and (nr_ordem_compra_ww > 0) and (ie_transferencia_estab_w = 'N') then
	
	delete from erros_integracao_piramide
	where	cd_estabelecimento = cd_estabelecimento_w
	and	nm_usuario = nm_usuario_p
	and	ie_funcao in ('NFS');
				
	CALL exec_sql_dinamico('Tasy','begin pir_envia_nota_fiscal_devol('
			|| nr_sequencia_p || ','
			|| 0 || ','
			|| chr(39) || nm_usuario_p || chr(39) || '); end;');

	select	max(ds_erro)
	into STRICT	ds_erro_w
	from	erros_integracao_piramide
	where	cd_estabelecimento = cd_estabelecimento_w
	and	nm_usuario = nm_usuario_p
	and	ie_funcao in ('NFS');

	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(195308,'DS_ERRO_W='||ds_erro_w);
	end if;
end if;

update	nota_fiscal_item
set	nr_nota_fiscal		= nr_nota_fiscal_w
where	nr_sequencia		= nr_sequencia_p;

update	nota_fiscal_item_trib
set	nr_nota_fiscal		= nr_nota_fiscal_w
where	nr_sequencia		= nr_sequencia_p;

update	nota_fiscal
set	vl_total_nota		= vl_total_nota + coalesce(vl_tributos_w,0)
where	nr_sequencia		= nr_sequencia_p;

update	nota_fiscal
set	dt_atualizacao_estoque	= clock_timestamp(),
	nm_usuario_calc		= nm_usuario_p,
	ds_razao_tomador_orig	= ds_razao_tomador_orig_w,	
	ds_razao_emitente_orig	= ds_razao_emitente_orig_w	
where	nr_sequencia		= nr_sequencia_p;

/*avisa se existe algum item imobilizado*/

select	count(*)
into STRICT	qt_existe_imob_w
from	regra_envio_comunic_compra a,
	regra_envio_comunic_evento b
where	a.nr_sequencia = b.nr_seq_regra
and	a.cd_funcao = 40
and	b.cd_evento = 60
and	b.ie_situacao = 'A'
and	cd_estabelecimento = cd_estabelecimento_w;

if (qt_existe_imob_w > 0) then
	CALL envia_comunic_nota_imob(nr_sequencia_p,nm_usuario_p,cd_estabelecimento_w);
end if;	

select	count(*)
into STRICT	qt_existe_nf_contrato_w
from	regra_envio_comunic_compra a,
	regra_envio_comunic_evento b
where	a.nr_sequencia = b.nr_seq_regra
and	a.cd_funcao = 40
and	b.cd_evento = 84
and	b.ie_situacao = 'A'
and	cd_estabelecimento = cd_estabelecimento_w;

if (qt_existe_nf_contrato_w > 0) then
	CALL envia_comunic_cont_vinc(nr_sequencia_p,nm_usuario_p,cd_estabelecimento_w);
end if;

/*avisar chegada dos materiais*/

if (ie_tipo_nota_w <> 'ST') then
	begin
	ie_operacao_entrada_saida_w := substr(coalesce(obter_se_nota_entrada_saida(nr_sequencia_p),'E'),1,1);
	
	if (ie_operacao_entrada_saida_w = 'E') then
		begin
		avisar_chegada_material(nr_sequencia_p, nm_usuario_p);
		if (ie_aviso_chegada_w = 'S') then
			CALL avisar_chegada_ordem_compra(nr_sequencia_p, nm_usuario_p);
		end if;
		CALL enviar_email_calc_nf_oc(nm_usuario_p, cd_estabelecimento_w, nr_sequencia_p,'N');
		
		select	count(*)
		into STRICT	qt_existe_regra_val_w
		from	regra_envio_email_compra
		where	ie_tipo_mensagem = 69
		and	ie_situacao = 'A'
		and	cd_estabelecimento = cd_estabelecimento_w;

		if (qt_existe_regra_val_w > 0) then
			CALL enviar_email_calc_nf_oc_valid(nm_usuario_p, cd_estabelecimento_w, nr_sequencia_p);
		end if;
		
		select	count(*)
		into STRICT	qt_existe_regra_chegada_mat_w
		from	regra_envio_email_compra
		where	ie_tipo_mensagem = 100
		and	ie_situacao = 'A'
		and	cd_estabelecimento = cd_estabelecimento_w;

		if (qt_existe_regra_chegada_mat_w > 0) then
			CALL enviar_email_aviso_chegada_mat(nm_usuario_p, cd_estabelecimento_w, nr_sequencia_p);
		end if;
		
		end;
	end if;

	exception
		when others then
			ds_erro_w	:= sqlerrm(SQLSTATE);
			/*(-20011,'Erro ao avisar a chegada do material' || chr(10) || ds_erro_w);*/

			CALL wheb_mensagem_pck.exibir_mensagem_abort(195299,'DS_ERRO_W='||ds_erro_w);
	end;
end if;

if (ie_devolucao_w = 'S') and (ie_sistema_origem_w IS NOT NULL AND ie_sistema_origem_w::text <> '') and (nr_sequencia_ref_w > 0) then

	update	nota_fiscal
	set	ie_sistema_origem	= ie_sistema_origem_w
	where	nr_sequencia		= nr_sequencia_p;

end if;

/*aamfirmo os 576529 16/04/2013 */

select	coalesce(max(ie_deduzir_ordem_adiant),'S')
into STRICT	ie_deduzir_ordem_adiant_w
from	parametros_contas_pagar
where	cd_estabelecimento	= cd_estabelecimento_w;

if ( coalesce(ie_deduzir_ordem_adiant_w,'S') in ('F', 'V')) then
	open c05;
	loop
	fetch c05 into
		nr_adiantamento_w;
	EXIT WHEN NOT FOUND; /* apply on c05 */
	begin
	CALL atualizar_saldo_adiant_pago(nr_adiantamento_w, nm_usuario_p);
	end;
	end loop;
	close c05;
end if;

select	max(a.nr_interno_conta)
into STRICT	nr_interno_conta_w
from	nota_fiscal a
where	a.nr_sequencia		= nr_sequencia_p;

if (ie_empenho_orcamento_w = 'S') then
	begin
	CALL gerar_empenho_nota_fiscal(nr_sequencia_p, ie_acao_p, nm_usuario_p);
	exception when others then
		ds_erro_w	:= substr(sqlerrm(SQLSTATE),1,1000);
		CALL wheb_mensagem_pck.exibir_mensagem_abort(195308,'DS_ERRO_W='||ds_erro_w);
	end;
end if;


if (nr_interno_conta_w IS NOT NULL AND nr_interno_conta_w::text <> '') then
	CALL gerar_procmat_repasse_nf(nr_interno_conta_w, nm_usuario_p, 'S');
end if;

if (ie_tipo_nota_w = 'NC') and (nr_seq_nf_ref_w > 0) then
	CALL atualizar_movto_estoque_nf(nr_seq_nf_ref_w, nm_usuario_p);
end if;

CALL gerar_nr_sequencial_nf_item(nr_sequencia_p);

CALL enviar_email_pend_tab_preco_nf(nm_usuario_p, cd_estabelecimento_w, nr_sequencia_p);
CALL enviar_email_diver_nf_contrato(nm_usuario_p, cd_estabelecimento_w, nr_sequencia_p);
CALL enviar_email_diver_nf_oc(nm_usuario_p, cd_estabelecimento_w, nr_sequencia_p);

/* Conforme a OS 699786 esse processo foi colocado mais pra cima, pois ele precisa ficar antes de atualizar_ordem_compra_nf
select	count(*)
into	qt_existe_w
from	nota_fiscal_item
where	nr_sequencia = nr_sequencia_p
and	nr_sequencia_vinc_consig is not null;

if	(ie_gerar_oc_nf_faturamento_w = 'S') and
	(qt_existe_w > 0) then
	gerar_ordem_compra_consig_nf(nr_sequencia_p,nm_usuario_p);
end if;
*/
if (ie_baixa_patrimonio_w = 'S') and (ie_devolucao_w = 'S') then
	open c06;
	loop
	fetch c06 into	
		nr_seq_bem_w,
		vl_venda_w,
		ds_observacao_w;
	EXIT WHEN NOT FOUND; /* apply on c06 */
		begin
		pat_gerar_baixa_bem_nf(	nr_seq_bem_w,
					vl_venda_w,
					nr_sequencia_p,
					nr_nota_orig_w,
					nm_usuario_p,
					cd_estabelecimento_w);
		end;
	end loop;
	close c06;
end if;

ie_desc_trib_nota_w := obter_param_usuario(40, 421, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w, ie_desc_trib_nota_w);

if (ie_desc_trib_nota_w = 'S') then
	select	ds_observacao
	into STRICT	ds_observacao_nota_w
	from	nota_fiscal
	where	nr_sequencia = nr_sequencia_p;

	open c07;
	loop
	fetch c07 into	
		ds_tributo_w,
		tx_tributo_w,
		vl_tributo_w;
	EXIT WHEN NOT FOUND; /* apply on c07 */
		begin
			
		ds_texto_w := ds_texto_w || ds_tributo_w || '  ' || tx_tributo_w || '% - ' || campo_mascara_virgula_casas(trunc(vl_tributo_w,2),2) || chr(13) || chr(10);
		
		end;
	end loop;
	close c07;

	if (ds_texto_w IS NOT NULL AND ds_texto_w::text <> '') then
		update	nota_fiscal
		set	ds_observacao =  substr(CASE WHEN ds_observacao_nota_w='' THEN ds_texto_w  ELSE ds_observacao_nota_w || chr(13) || chr(10) ||ds_texto_w END ,1,4000)
		where	nr_sequencia = nr_sequencia_p;
	end if;
end if;

select  count(*)
into STRICT	qt_regra_w
from	regra_obs_nf
where	cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(qt_regra_w,0) > 0)then
	CALL atualizar_obs_nota(nr_sequencia_p,cd_estabelecimento_w);
end if;

select	count(*)
into STRICT	qt_existe_w
from	inspecao_registro a,
	inspecao_divergencia b
where	a.nr_sequencia = b.nr_seq_registro
and	a.nr_seq_nf = nr_sequencia_p
and	a.ie_origem = 'NF'
and	b.ie_motivo_aceite = 'D';

if (qt_existe_w > 0) then
	nr_sequencia_nf_dev_w := gerar_nf_devolucao_inspecao(nr_sequencia_p, nm_usuario_p, nr_sequencia_nf_dev_w);	
end if;

/*select 	nvl(max(b.nr_adiantamento),0)
into 	ie_possue_adiant_w
from 	titulo_receber a,
	titulo_receber_liq b
where   a.nr_titulo = b.nr_titulo
and	b.nr_adiantamento is not null		
and	a.nr_seq_nf_saida = (select max(nr_sequencia_ref) from nota_fiscal where nr_sequencia = nr_sequencia_p);

select 	nvl(max(ie_utilizar_cfdi), 'N')
into	ie_utilizar_cfdi_w 
from   	nfe_senha_conexao
where  	cd_estabelecimento = cd_estabelecimento_w
and	ie_tipo_nota = 'NFSE';

if ((ie_possue_adiant_w = 0) and (ie_utilizar_cfdi_w = 'S')) or (ie_utilizar_cfdi_w = 'N') then*/
CALL baixar_enc_contas_abat_nc(clock_timestamp(),nm_usuario_p,nr_sequencia_p);
--end if;
if (ie_devolucao_w = 'S') then
	CALL sup_atualizar_opm_nf(nr_sequencia_p, 'E', nm_usuario_p);
else
	CALL sup_atualizar_opm_nf(nr_sequencia_p, 'I', nm_usuario_p);
end if;

if (ie_tipo_nota_w = 'SD') and (ie_devolucao_w = 'S') and (ie_devolucao_baixa_tit_nf_w = 'S') and (nr_sequencia_ref_w > 0) then
	
	select 	coalesce(max(cd_tipo_baixa), 0),
	       	max(nr_seq_trans_fin)
	into STRICT   	cd_tipo_baixa_w,
	      	 nr_seq_trans_fin_w
	from   	tipo_baixa_cpa
	where 	 ie_devolucao = 'S';	
	
	select	coalesce(max(cd_moeda_padrao), 0)
	into STRICT	cd_moeda_padrao_w
	from    	parametros_contas_pagar
	where	cd_estabelecimento = cd_estabelecimento_w;
	
	select	coalesce(max(vl_total_nota), 0)
	into STRICT	vl_total_nota_w
	from	nota_fiscal
	where	nr_sequencia = nr_sequencia_p;
	
	select  	count(1),
		coalesce(sum(vl_titulo), 0)
	into STRICT	qt_tit_pagar_w,
		vl_titulos_w		
	from   	 titulo_pagar t
	where  	 t.nr_seq_nota_fiscal = nr_sequencia_ref_w;
	
	select	qt_tit_pagar_w - count(*),
		coalesce(sum(t.vl_titulo),0)
	into STRICT	qt_titulos_not_liq_w,
		vl_tit_liquidados_w
	from   	titulo_pagar t
	where  	t.nr_seq_nota_fiscal = nr_sequencia_ref_w
	and	(t.dt_liquidacao IS NOT NULL AND t.dt_liquidacao::text <> '');
	
	select	count(1)
	into STRICT	qt_tit_adiant_w
	from	titulo_pagar_adiant t,
		adiantamento_pago a
	where	t.nr_adiantamento = a.nr_adiantamento
	and	a.nr_seq_nf = nr_sequencia_p;

	vl_tit_liquidado_w := 0;
	
	if (cd_tipo_baixa_w > 0) and (cd_moeda_padrao_w > 0) and (vl_total_nota_w > 0) and (vl_titulos_w > 0) and (qt_tit_adiant_w = 0) then	
		
		open C09;
		loop
		fetch C09 into
			nr_titulo_w,
			vl_titulo_w,
			vl_saldo_tit_w,
			dt_liquidacao_w;
		EXIT WHEN NOT FOUND; /* apply on C09 */
			begin
			
			if (vl_titulos_w = vl_total_nota_w) then			
				vl_rateio_tit_pagar_w := vl_titulo_w;
			else
				
				pr_rateio_tit_pagar_w := trunc(vl_total_nota_w / vl_titulos_w, 6);
				
				vl_rateio_tit_pagar_w	:= trunc(round((pr_rateio_tit_pagar_w * vl_titulo_w)::numeric, 2),2);
				
			end if;
			
			if (dt_liquidacao_w IS NOT NULL AND dt_liquidacao_w::text <> '') then
				vl_tit_liquidado_w := vl_tit_liquidado_w + vl_rateio_tit_pagar_w;
			else
				vl_rateio_tit_pagar_w := vl_rateio_tit_pagar_w + round((vl_tit_liquidado_w / qt_titulos_not_liq_w)::numeric, 2);
			
				if	vl_saldo_tit_w < vl_rateio_tit_pagar_w then
					vl_tit_liquidado_w := vl_tit_liquidado_w + (vl_rateio_tit_pagar_w - vl_saldo_tit_w);
					vl_rateio_tit_pagar_w := vl_saldo_tit_w;
					qt_titulos_not_liq_w := qt_titulos_not_liq_w - 1;
				end if;
				
				if (vl_rateio_tit_pagar_w >  vl_titulo_w) then
					vl_rateio_tit_pagar_w := vl_titulo_w;
				end if;
							
				select	coalesce(max(nr_sequencia),0) + 1
				into STRICT	nr_seq_baixa_w
				from	titulo_pagar_baixa
				where	nr_titulo = nr_titulo_w;
			
				insert into titulo_pagar_baixa(
					cd_tipo_baixa,
					dt_atualizacao,
					cd_moeda,
					dt_baixa,
					ie_acao,
					nm_usuario,
					nr_sequencia,
					nr_titulo,
					vl_baixa,
					vl_descontos,
					vl_devolucao,
					vl_juros,
					vl_multa,
					vl_pago,
					nr_seq_trans_fin,
					nr_seq_devolucao,
					nr_lote_contabil)
				values (
					cd_tipo_baixa_w,
					clock_timestamp(),
					cd_moeda_padrao_w,
					clock_timestamp(),
					'I',
					nm_usuario_p,
					nr_seq_baixa_w,
					nr_titulo_w,
					vl_rateio_tit_pagar_w,
					0,
					vl_rateio_tit_pagar_w,
					0,
					0,
					vl_rateio_tit_pagar_w,
					nr_seq_trans_fin_w,
					nr_sequencia_p,
					0);
				
				CALL Atualizar_Saldo_Tit_Pagar(nr_titulo_w, nm_usuario_p);
			end if;
			end;
		end loop;
		close C09;
	end if;
end if;

open c11;
loop
fetch c11 into	
	ds_lista_repasse_w;
EXIT WHEN NOT FOUND; /* apply on c11 */
	begin			
		if (ds_lista_repasse_w > 0 and ie_tipo_nota_w = 'EN') then
			open c10;
			loop
			fetch c10 into	
				nr_titulo_repasse_w,
				vl_liquido_repasse_w;
			EXIT WHEN NOT FOUND; /* apply on c10 */
				begin			
					if (vl_liquido_repasse_w > 0) then
						CALL atualizar_saldo_tit_pagar(nr_titulo_repasse_w, nm_usuario_p);
					end if;	
				end;
			end loop;
			close c10;
		end if;
	end;
end loop;
close c11;

ie_ctb_online_w := ctb_online_pck.get_modo_lote(2, cd_estabelecimento_w);

if (ie_ctb_online_w = 'S') then

        CALL PHILIPS_CONTABIL_PCK.VALIDA_SE_DIA_FECHADO(OBTER_EMPRESA_ESTAB(cd_estabelecimento_w),
                      dt_entrada_saida_w);
end if;

if (nr_sequencia_nf_dev_w > 0) then
		
	select	CASE WHEN ie_tipo_nota='SF' THEN 4  ELSE 1 END
	into STRICT	ie_tipo_nota_ww
	from	nota_fiscal
	where	nr_sequencia = nr_sequencia_nf_dev_w;
		
	CALL atualizar_nota_fiscal(nr_sequencia_nf_dev_w, 'I', nm_usuario_p, ie_tipo_nota_ww);
else
	if (coalesce(ie_commit_p,'S') = 'S') then
		commit;
	end if;
end if;

if (ie_ctb_online_w = 'S') then
	begin
	CALL ctb_contab_onl_lote_nf_pck.ctb_contabiliza_nota_fiscal(	nr_sequencia_p,
								cd_estabelecimento_w,
								nm_usuario_p);
	end;
end if;

select	count(1)
into STRICT	qt_imp_nota_w
from	nf_imp_nota a LIMIT 1;

if (qt_imp_nota_w > 0) then
	ds_erro_vinculo_w := mx_cfdi_vincular_nf(null, nr_sequencia_p, 'N', 'N', ds_erro_vinculo_w, 'N');
end if;
if (coalesce(ie_sistema_origem_ww,'X') <> 'INTEGRACAO') then

reg_integracao_p.ie_operacao		:=	'I';
reg_integracao_p.ds_id_origin		:=	ie_origem_imp_w;
reg_integracao_p := gerar_int_padrao.gravar_integracao('3', nr_sequencia_p, nm_usuario_p, reg_integracao_p);
end if;

select  coalesce(max(a.ie_integra_finnegans),'N')
into STRICT    ie_integra_finnegans_w
from	parametro_faturamento a, nota_fiscal b
where	b.nr_sequencia = nr_sequencia_p
and     b.cd_estabelecimento = a.cd_estabelecimento;

if (coalesce(ie_integra_finnegans_w,'N') = 'S') then
    CALL send_invoice_tie(nr_sequencia_p, nm_usuario_p, 'I', 'E');
end if;

if (pkg_i18n.get_user_locale = 'es_CO') and (nr_ordem_compra_w IS NOT NULL AND nr_ordem_compra_w::text <> '') then

    <<VALIDA_QT_REGISTROS>>
    begin
        select 	count(1)
        into STRICT 	qt_reg_w
        from    ordem_compra_item
        where   nr_ordem_compra = nr_ordem_compra_w
        and	coalesce(qt_material_entregue,0) <> coalesce(qt_material,0);
    exception
        when no_data_found then
            qt_reg_w := 0;
    end;

    if (qt_reg_w > 0) then

        commit;

        data_w := bifrost.send_integration(
                  nm_event => nm_event_w,
                  nm_javaclass => nm_javaclass_w,
                  ds_arguments => concat_str_w||nr_ordem_compra_w||concat_str_w,
                  nm_user => nm_usuario_p);

    end if;
end if;

if (obter_se_integr_nf_ext(nr_sequencia_p, 'LG') = 'S') then
   CALL send_invoice_omint_tie(nr_sequencia_p, nm_usuario_p, 'I', 1);
end if;

if (obter_se_integr_nf_ext(nr_sequencia_p,'MW') = 'S') then
   CALL send_invoice_omint_tie(nr_sequencia_p, nm_usuario_p, 'I', 2);
end if;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_nota_fiscal (nr_sequencia_p bigint, ie_acao_p text, nm_usuario_p text, ie_tipo_nota_p bigint, ie_commit_p text default 'S') FROM PUBLIC;

