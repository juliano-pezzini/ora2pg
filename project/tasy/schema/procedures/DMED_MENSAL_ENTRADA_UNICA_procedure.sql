-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dmed_mensal_entrada_unica ( nr_seq_dmed_mensal_p bigint, cd_estabelecimento_p bigint, dt_referencia_p timestamp, ie_nota_fiscal_p text, ie_conta_paciente_p text, ie_cpf_p text, ie_idade_p text, ie_estrangeiro_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
-------------------------------------------------------------------------------------------------------------------
Referências:
	GERAR_DMED_MENSAL_PRESTADOR
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_pessoa_responsavel_w		varchar(10);
cd_pessoa_beneficiario_w	varchar(10);
nr_documento_w			bigint;
vl_documento_w			double precision;
dt_documento_w			timestamp;
contador_w			bigint	:= 0;
nr_cpf_resp_w			varchar(11);
nr_cpf_benef_w			varchar(11);
cd_pessoa_titular_w		varchar(14);
cd_pessoa_benef_w		varchar(14);
vl_total_titulo_w		double precision;
nr_atendimento_w		bigint;
nr_nota_fiscal_w		varchar(255);
nr_seq_nf_saida_w 		bigint;
cpf_w				varchar(11);
cd_convenio_parametro_w		integer;
ie_tipo_convenio_w		smallint;
ie_convenio_part_w		varchar(1);
nr_interno_conta_w		bigint;
dt_ref_inicial_w		timestamp;
dt_ref_final_w			timestamp;
qt_classe_w			bigint;

c_entrada CURSOR FOR
	SELECT  p.cd_pessoa_fisica cd_responsavel,
		a.cd_pessoa_fisica cd_beneficiario,
		r.nr_titulo,
		coalesce(l.dt_recebimento,r.dt_emissao) dt_documento,
		coalesce(l.vl_recebido,0) vl_total_titulo,
		a.nr_atendimento,
		coalesce(r.nr_interno_conta,0) nr_interno_conta,
		coalesce(r.nr_seq_nf_saida,0) nr_seq_nf_saida,
		coalesce(r.nr_nota_fiscal,0) nr_nota_fiscal
	FROM atendimento_pagador p, atendimento_paciente a, titulo_receber r
LEFT OUTER JOIN titulo_receber_liq l ON (r.nr_titulo = l.nr_titulo)
, pessoa_fisica f
LEFT OUTER JOIN nacionalidade n ON (f.cd_nacionalidade = n.cd_nacionalidade)
WHERE a.nr_atendimento	= r.nr_atendimento  and a.nr_atendimento	= p.nr_atendimento and f.cd_pessoa_fisica	= p.cd_pessoa_fisica  --and	r.vl_saldo_titulo	= 0
  and (r.ie_situacao not in ('3','5') or (r.ie_situacao = '5' and
		exists (SELECT	1
			from	titulo_receber_liq k
			where	k.nr_titulo = r.nr_titulo
			and 	vl_recebido > 0
			and 	not exists (select 1 from titulo_receber_liq x where x.nr_titulo = k.nr_titulo and x.nr_seq_liq_origem = k.nr_sequencia  LIMIT 1)))) and r.ie_origem_titulo in (2,1) and coalesce(l.dt_recebimento,r.dt_emissao) between dt_ref_inicial_w and dt_ref_final_w and exists (select	 1
			from	dmed_regra_tipo_tit	w
			where	w.ie_tipo_receber	= l.cd_tipo_recebimento) and ((ie_cpf_p = 'AM') or
		((ie_cpf_p = 'SC') and (coalesce(f.nr_cpf::text, '') = '') 	and (pkg_date_utils.add_month(f.dt_nascimento, ie_idade_p * 12,0) <= Fim_Mes(dt_ref_inicial_w))) or
		((ie_cpf_p = 'CC') and (((f.nr_cpf IS NOT NULL AND f.nr_cpf::text <> '') and (pkg_date_utils.add_month(f.dt_nascimento, ie_idade_p * 12,0) <= Fim_Mes(dt_ref_inicial_w))) or (pkg_date_utils.add_month(f.dt_nascimento, ie_idade_p * 12,0) >= Fim_Mes(dt_ref_inicial_w))))) and (((coalesce(n.ie_brasileiro,'S') = 'S') and (ie_estrangeiro_p = '2'))  or
		((coalesce(ie_brasileiro,'S') = 'N') and (ie_estrangeiro_p = '1')) or (ie_estrangeiro_p = '3')) and ((a.cd_estabelecimento = coalesce( cd_estabelecimento_p ,a.cd_estabelecimento)) or
	   	((coalesce(a.cd_estabelecimento::text, '') = '') and (coalesce(cd_estabelecimento_p::text, '') = ''))) and ((coalesce(r.nr_seq_classe::text, '') = '') or (exists (select 1
			from 	 dmed_regra_classe_tit t
			where	 t.nr_seq_classe = r.nr_seq_classe))) and ((exists (select	1
			from	atend_paciente_unidade c,
				dmed_regra_setor_atend b
			where	c.cd_setor_atendimento	= b.cd_setor_atendimento
			and 	c.nr_atendimento	= a.nr_atendimento)) or (not exists (	select 1
				from 	 dmed_regra_setor_atend LIMIT 1)))
	
union all

	select  r.cd_pessoa_fisica cd_responsavel,
		a.cd_pessoa_fisica cd_beneficiario,
		r.nr_titulo,
		coalesce(l.dt_recebimento,r.dt_emissao) dt_documento,
		coalesce(l.vl_recebido, r.vl_titulo) vl_total_titulo,
		a.nr_atendimento,
		coalesce(r.nr_interno_conta,0) nr_interno_conta,
		coalesce(r.nr_seq_nf_saida,0) nr_seq_nf_saida,
		coalesce(r.nr_nota_fiscal,0) nr_nota_fiscal
	FROM atendimento_paciente a, titulo_receber r
LEFT OUTER JOIN titulo_receber_liq l ON (r.nr_titulo = l.nr_titulo)
, pessoa_fisica f
LEFT OUTER JOIN nacionalidade n ON (f.cd_nacionalidade = n.cd_nacionalidade)
WHERE a.cd_pessoa_fisica	= f.cd_pessoa_fisica and a.nr_atendimento	= r.nr_atendimento   --and	r.vl_saldo_titulo	= 0
  and (r.cd_pessoa_fisica IS NOT NULL AND r.cd_pessoa_fisica::text <> '')  -- trazer apenas títulos de pessoas físicas
  and r.ie_situacao <> '5' and r.ie_situacao <> '3' and r.ie_origem_titulo in (2,1) and coalesce(l.dt_recebimento,r.dt_emissao) between dt_ref_inicial_w and dt_ref_final_w and exists (select	 1
			from	dmed_regra_tipo_tit	w
			where	w.ie_tipo_receber	= l.cd_tipo_recebimento) and ((((coalesce(n.ie_brasileiro,'S') = 'S') or (f.nr_cpf IS NOT NULL AND f.nr_cpf::text <> '')) and (ie_estrangeiro_p = '4')) or
		((coalesce(n.ie_brasileiro,'S') = 'S') and (ie_estrangeiro_p = '2')) or
		((coalesce(ie_brasileiro,'S') = 'N') and (ie_estrangeiro_p = '1')) or (ie_estrangeiro_p = '3')) and not exists (select	1
				from	atendimento_pagador	p
				where	p.nr_atendimento	= a.nr_atendimento) and ((a.cd_estabelecimento = coalesce( cd_estabelecimento_p ,a.cd_estabelecimento)) or
	   	((coalesce(a.cd_estabelecimento::text, '') = '') and (coalesce(cd_estabelecimento_p::text, '') = ''))) and ((coalesce(r.nr_seq_classe::text, '') = '') or (qt_classe_w = 0) or (exists (select 1
			from 	 dmed_regra_classe_tit t
			where	 t.nr_seq_classe = r.nr_seq_classe))) and ((exists (select	1
			from	atend_paciente_unidade c,
				dmed_regra_setor_atend b
			where	c.cd_setor_atendimento	= b.cd_setor_atendimento
			and 	c.nr_atendimento	= a.nr_atendimento)) or (not exists (	select 1
				from 	 dmed_regra_setor_atend LIMIT 1)));

type 		fetch_array is table of c_entrada%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_movimentacao_w	vetor;

BEGIN
dt_ref_inicial_w	:= pkg_date_utils.start_of(dt_referencia_p,'MONTH',0);
dt_ref_final_w		:= fim_dia(fim_mes(dt_referencia_p));

select	count(1)
into STRICT	qt_classe_w
from	dmed_regra_classe_tit LIMIT 1;

open c_entrada;
loop
fetch c_entrada bulk collect into s_array limit 1000;
	vetor_movimentacao_w(i)	:= s_array;
	i			:= i + 1;
EXIT WHEN NOT FOUND; /* apply on c_entrada */
end loop;
close c_entrada;

for i in 1..vetor_movimentacao_w.count loop
	begin
	s_array := vetor_movimentacao_w(i);
	for z in 1..s_array.count loop
		cd_pessoa_responsavel_w		:= s_array[z].cd_responsavel;
		cd_pessoa_beneficiario_w	:= s_array[z].cd_beneficiario;
		nr_documento_w			:= s_array[z].nr_titulo;
		dt_documento_w			:= s_array[z].dt_documento;
		vl_total_titulo_w		:= s_array[z].vl_total_titulo;
		nr_atendimento_w		:= s_array[z].nr_atendimento;
		nr_interno_conta_w		:= s_array[z].nr_interno_conta;
		nr_seq_nf_saida_w		:= s_array[z].nr_seq_nf_saida;
		nr_nota_fiscal_w		:= s_array[z].nr_nota_fiscal;

		begin
		ie_tipo_convenio_w	:= 0;

		if (coalesce(nr_interno_conta_w,0) <> 0)  then
			begin
			select	cd_convenio_parametro
			into STRICT	cd_convenio_parametro_w
			from	conta_paciente
			where	nr_interno_conta	= nr_interno_conta_w;
			exception when others then
				cd_convenio_parametro_w	:= null;
			end;

			select	max(ie_tipo_convenio)
			into STRICT 	ie_tipo_convenio_w
			from 	convenio
			where  	cd_convenio	= cd_convenio_parametro_w;
		elsif (coalesce(nr_atendimento_w,0) <> 0) then
			select	max(ie_tipo_convenio)
			into STRICT	ie_tipo_convenio_w
			from	atendimento_paciente
			where	nr_atendimento	= nr_atendimento_w;
		end if;

		select 	max(coalesce(ie_convenio_part, 'S'))
		into STRICT 	ie_convenio_part_w
		from 	dmed_regra_geral;

		cpf_w	:= trim(both obter_cpf_pessoa_fisica(cd_pessoa_responsavel_w));

		if cpf_w = ' ' then
			cpf_w	:= null;
		end if;

		if 	((ie_convenio_part_w = 'S') and
			((ie_tipo_convenio_w = 1) or (ie_tipo_convenio_w = 0))) or (ie_convenio_part_w = 'N') then
			if	(((ie_cpf_p = 'SC') and (coalesce(cpf_w::text, '') = '')) or
				(ie_cpf_p = 'CC' AND cpf_w IS NOT NULL AND cpf_w::text <> '') or (ie_cpf_p = 'AM')) then
				if	(((ie_nota_fiscal_p = 'S') and
					((nr_seq_nf_saida_w <> 0) or (nr_nota_fiscal_w <> '0'))) or (ie_nota_fiscal_p = 'N')) then
					insert into dmed_titulos_mensal(nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_dmed_mensal,
						nr_documento,
						ie_tipo_documento,
						cd_pessoa_titular,
						cd_pessoa_beneficiario,
						vl_pago,
						dt_liquidacao,
						ie_prestadora_ops,
						nr_atendimento)
					values (nextval('dmed_titulos_mensal_seq'),
						clock_timestamp(),
						'Tasy4',
						clock_timestamp(),
						'Tasy4',
						nr_seq_dmed_mensal_p,
						nr_documento_w,
						'TI',
						cd_pessoa_responsavel_w,
						cd_pessoa_beneficiario_w,
						vl_total_titulo_w,
						dt_documento_w,
						'P',
						nr_atendimento_w);

					contador_w	:= contador_w + 1;

					if (mod(contador_w,100) = 0) then
						commit;
					end if;
				end if;
			end if;
		end if;
		end;
	end loop;
	end;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dmed_mensal_entrada_unica ( nr_seq_dmed_mensal_p bigint, cd_estabelecimento_p bigint, dt_referencia_p timestamp, ie_nota_fiscal_p text, ie_conta_paciente_p text, ie_cpf_p text, ie_idade_p text, ie_estrangeiro_p text) FROM PUBLIC;

