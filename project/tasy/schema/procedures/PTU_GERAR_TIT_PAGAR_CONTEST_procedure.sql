-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_tit_pagar_contest ( nr_seq_lote_contest_p bigint, nr_seq_acao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_titulo_w			bigint;
cd_moeda_cp_w			integer;
cd_tipo_taxa_juro_cp_w		bigint;
cd_tipo_taxa_multa_cp_w		bigint;
tx_juros_cp_w			double precision;
tx_multa_cp_w			double precision;
cd_conta_financ_cp_w		bigint;
nr_seq_camara_w			bigint;
vl_titulo_w			double precision;
dt_emissao_fatura_w		timestamp;
dt_vencimento_w			timestamp;
nr_seq_classif_w		integer;
cd_cgc_w			varchar(14);
cd_unimed_origem_w		varchar(20);
nr_seq_congenere_w		bigint;
nr_seq_trans_fin_baixa_w	bigint;
nr_seq_trans_fin_contab_w	bigint;
nr_seq_fatura_w			bigint;
ie_tipo_titulo_pagar_w		varchar(5);
ie_envio_recebimento_w		varchar(3);
ie_status_tit_pagar_w		varchar(3);
ie_tit_pagar_lib_pagamento_w	varchar(1);
nr_documento_w			numeric(20);
nr_fatura_w			bigint;
nr_seq_pagador_w		bigint;
ie_tipo_congenere_w		pls_congenere.ie_tipo_congenere%type;
sg_estado_orig_w		pessoa_juridica.sg_estado%type;
sg_estado_dest_w		pessoa_juridica.sg_estado%type;
ie_tipo_intercambio_w		varchar(1) := 'T';


BEGIN
if (nr_seq_lote_contest_p IS NOT NULL AND nr_seq_lote_contest_p::text <> '') then
	select	ie_envio_recebimento
	into STRICT	ie_envio_recebimento_w
	from	pls_lote_contestacao a
	where	a.nr_sequencia	= nr_seq_lote_contest_p;

	-- Só quando estou recebendo uma contestação que deve ser gerado título a pagar
	if (ie_envio_recebimento_w = 'R') then

		select	sum(vl_contestado),
			max(nr_seq_pls_fatura),
			max(nr_nota_credito_debito)
		into STRICT	vl_titulo_w,
			nr_seq_fatura_w,
			nr_documento_w
		from (SELECT	sum(c.vl_contestado) vl_contestado,
				a.nr_seq_pls_fatura nr_seq_pls_fatura,
				a.nr_nota_credito_debito
			from	pls_conta d,
				pls_contestacao_proc c,
				pls_contestacao b,
				pls_lote_contestacao a
			where	a.nr_sequencia	= b.nr_seq_lote
			and	a.nr_sequencia	= nr_seq_lote_contest_p
			and	b.nr_sequencia	= c.nr_seq_contestacao
			and	d.nr_sequencia	= b.nr_seq_conta
			group by a.nr_seq_pls_fatura,a.nr_nota_credito_debito
			
union all

			SELECT	sum(c.vl_contestado) vl_contestado,
				a.nr_seq_pls_fatura nr_seq_pls_fatura,
				a.nr_nota_credito_debito
			from	pls_conta d,
				pls_contestacao_mat c,
				pls_contestacao b,
				pls_lote_contestacao a
			where	a.nr_sequencia	= b.nr_seq_lote
			and	a.nr_sequencia	= nr_seq_lote_contest_p
			and	b.nr_sequencia	= c.nr_seq_contestacao
			and	d.nr_sequencia	= b.nr_seq_conta
			group by a.nr_seq_pls_fatura,a.nr_nota_credito_debito) alias6;

		if (nr_documento_w IS NOT NULL AND nr_documento_w::text <> '') then
			nr_documento_w := somente_numero(nr_documento_w);
		end if;

		-- Faturamento
		if (nr_seq_fatura_w IS NOT NULL AND nr_seq_fatura_w::text <> '') then
			select	max(a.cd_cgc),
				max(a.cd_cooperativa),
				max(b.nr_titulo),
				max(b.nr_seq_pagador)
			into STRICT	cd_cgc_w,
				cd_unimed_origem_w,
				nr_fatura_w,
				nr_seq_pagador_w
			from	pls_congenere	a,
				pls_fatura	b
			where	a.nr_sequencia	= b.nr_seq_congenere
			and	b.nr_sequencia	= nr_seq_fatura_w;
		end if;

		select	max(dt_emissao)
		into STRICT	dt_emissao_fatura_w
		from	titulo_receber
		where	nr_titulo = nr_fatura_w;

		select	max(a.cd_cgc),
			max(a.nr_sequencia)
		into STRICT	cd_cgc_w,
			nr_seq_congenere_w
		from	pls_congenere a
		where	a.cd_cooperativa = cd_unimed_origem_w;

		-- Fundação
		if (coalesce(cd_cgc_w::text, '') = '') and (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
			select	max(a.cd_cgc)
			into STRICT	cd_cgc_w
			from	pls_contrato_pagador	a
			where	a.nr_sequencia	= nr_seq_pagador_w;
		end if;

		-- Obter câmara
		select	max(a.nr_seq_camara)
		into STRICT	nr_seq_camara_w
		from	pls_congenere_camara a
		where	a.nr_seq_congenere = nr_seq_congenere_w
		and	dt_emissao_fatura_w between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref;

		if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
			select	max(ie_tipo_congenere)
			into STRICT	ie_tipo_congenere_w
			from	pls_congenere
			where	nr_sequencia = nr_seq_congenere_w;

			-- Obtém se o tipo do congenere é operadora (fundação)
			if (ie_tipo_congenere_w = 'OP') then
				ie_tipo_intercambio_w := 'F'; -- Fundação
			else
				-- Obter a UF da Unimed de origem
				select	coalesce(max(sg_estado),'X')
				into STRICT	sg_estado_orig_w
				from	pessoa_juridica
				where	cd_cgc	= (	SELECT	cd_cgc_outorgante
							from	pls_outorgante
							where	cd_estabelecimento = cd_estabelecimento_p);

				-- Obter a UF do plano beneficiário
				select	coalesce(max(a.sg_estado),'X')
				into STRICT	sg_estado_dest_w
				from	pessoa_juridica	a,
					pls_congenere	b
				where	a.cd_cgc	= b.cd_cgc
				and	b.nr_sequencia	= nr_seq_congenere_w;

				if (sg_estado_orig_w <> 'X') and (sg_estado_dest_w <> 'X') then
					if (sg_estado_orig_w = sg_estado_dest_w) then
						ie_tipo_intercambio_w := 'E'; -- Estadual
					else
						ie_tipo_intercambio_w := 'N'; -- Nacional
					end if;
				end if;
			end if;
		end if;

		begin
		select	a.cd_moeda_padrao,
			a.cd_tipo_taxa_juro,
			a.cd_tipo_taxa_multa,
			a.pr_juro_padrao,
			a.pr_multa_padrao
		into STRICT	cd_moeda_cp_w,
			cd_tipo_taxa_juro_cp_w,
			cd_tipo_taxa_multa_cp_w,
			tx_juros_cp_w,
			tx_multa_cp_w
		from	parametros_contas_pagar a
		where	a.cd_estabelecimento	= cd_estabelecimento_p;
		exception
			when no_data_found then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(175677);
		end;

		if (nr_seq_acao_p IS NOT NULL AND nr_seq_acao_p::text <> '') then
			select 	nr_seq_trans_fin_baixa,
				nr_seq_trans_fin_contab,
				coalesce(ie_tipo_titulo_pagar,'23'),
				ie_status_tit_pagar,
				ie_tit_pagar_lib_pagamento
			into STRICT	nr_seq_trans_fin_baixa_w,
				nr_seq_trans_fin_contab_w,
				ie_tipo_titulo_pagar_w,
				ie_status_tit_pagar_w,
				ie_tit_pagar_lib_pagamento_w
			from	pls_processo_interc_acao
			where	nr_sequencia = nr_seq_acao_p;
		else
			nr_seq_trans_fin_baixa_w	:= null;
			nr_seq_trans_fin_contab_w	:= null;
			ie_tipo_titulo_pagar_w 		:= '23';  --23 - Fatura
		end if;

		if (ie_status_tit_pagar_w = 'P') then
			ie_tit_pagar_lib_pagamento_w := 'N';
		end if;

		dt_vencimento_w := trunc(clock_timestamp(),'dd'); -- + qt_dias_vencimento_w;
		select	nextval('titulo_pagar_seq')
		into STRICT	nr_titulo_w
		;

		insert into titulo_pagar(nr_titulo,
			nm_usuario,
			dt_atualizacao,
			cd_estabelecimento,
			vl_titulo,
			vl_saldo_titulo,
			dt_emissao,
			dt_contabil,
			dt_vencimento_original,
			dt_vencimento_atual,
			vl_saldo_juros,
			vl_saldo_multa,
			cd_moeda,
			cd_tipo_taxa_juro,
			cd_tipo_taxa_multa,
			tx_juros,
			tx_multa,
			ie_origem_titulo,
			ie_tipo_titulo,
			ie_situacao,
			cd_pessoa_fisica,
			cd_cgc,
			ie_pls,
			nr_lote_contabil,
			ds_observacao_titulo,
			nr_seq_trans_fin_baixa,
			nr_seq_trans_fin_contab,
			ie_desconto_dia,
			ie_bloqueto,
			ie_status,
			dt_liberacao,
			nm_usuario_lib,
			nr_documento)
		values (nr_titulo_w,
			nm_usuario_p,
			clock_timestamp(),
			cd_estabelecimento_p,
			coalesce(vl_titulo_w,0),
			coalesce(vl_titulo_w,0),
			clock_timestamp(),
			clock_timestamp(),
			dt_vencimento_w,
			dt_vencimento_w,
			0,
			0,
			cd_moeda_cp_w,
			cd_tipo_taxa_juro_cp_w,
			cd_tipo_taxa_multa_cp_w,
			tx_juros_cp_w,
			tx_multa_cp_w,
			'16', -- OPS -  Intercâmbio
			ie_tipo_titulo_pagar_w,
			'A',
			null,
			cd_cgc_w,
			'S',
			0,
			'Título gerado à partir de lote de contestação',
			nr_seq_trans_fin_baixa_w,
			nr_seq_trans_fin_contab_w,
			'N',
			'N',
			ie_status_tit_pagar_w,
			CASE WHEN ie_tit_pagar_lib_pagamento_w='S' THEN clock_timestamp()  ELSE null END ,
			CASE WHEN ie_tit_pagar_lib_pagamento_w='S' THEN 'Tasy'  ELSE null END ,
			nr_documento_w);

		CALL atualizar_inclusao_tit_pagar(nr_titulo_w, nm_usuario_p);

		-- Intercâmbio pagar
		cd_conta_financ_cp_w := pls_obter_conta_financ_regra(	'ICP', null, cd_estabelecimento_p, null, null, nr_seq_camara_w, null, null, null, null, null, null, null, null, ie_tipo_intercambio_w, null, null, cd_conta_financ_cp_w);

		if (cd_conta_financ_cp_w IS NOT NULL AND cd_conta_financ_cp_w::text <> '') then
			select	coalesce(max(nr_sequencia),0) + 1
			into STRICT	nr_seq_classif_w
			from	titulo_pagar_classif
			where	nr_titulo	= nr_titulo_w;

			insert into titulo_pagar_classif(nr_titulo,
				nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nr_seq_conta_financ,
				vl_original,
				vl_titulo,
				vl_desconto,
				vl_acrescimo)
			values (nr_titulo_w,
				nr_seq_classif_w,
				nm_usuario_p,
				clock_timestamp(),
				cd_conta_financ_cp_w,
				vl_titulo_w,
				vl_titulo_w,
				0,
				0);
		end if;

		update	pls_lote_discussao
		set	nr_titulo_pagar		= nr_titulo_w
		where	nr_seq_lote_contest	= nr_seq_lote_contest_p
		and	ie_primeira_discussao	= 'S';
	end if;
end if;

-- Não pode commitar
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_tit_pagar_contest ( nr_seq_lote_contest_p bigint, nr_seq_acao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

