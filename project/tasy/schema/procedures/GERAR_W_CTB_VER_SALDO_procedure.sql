-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_ctb_ver_saldo ( cd_empresa_p bigint, dt_mesano_referencia_p timestamp, nm_usuario_p text) AS $body$
DECLARE

 
cd_estabelecimento_w		smallint;
cd_conta_contabil_w		varchar(20);
nr_seq_mes_ref_w		bigint;
nr_seq_mes_ref_ant_w		bigint;
dt_referencia_w		timestamp;
vl_movimento_w		double precision := 0;
vl_saldo_w			double precision := 0;
vl_saldo_ant_w		double precision := 0;
vl_saldo_ver_w		double precision := 0;
vl_diferenca_w		double precision := 0;
nr_sequencia_w		bigint;

c01 CURSOR FOR 
SELECT	a.nr_seq_mes_ref, 
	a.cd_estabelecimento, 
	a.cd_conta_contabil, 
	sum(coalesce(a.vl_movimento,0)), 
	sum(coalesce(a.vl_saldo,0)), 
	ctb_obter_mes_ref(a.nr_seq_mes_ref), 
	sum(coalesce(a.vl_saldo_ant,0)) 
from	ctb_balancete_v a 
where	CTB_Obter_Nivel_Classif_Conta(substr(obter_dados_conta_contabil(a.cd_conta_contabil, a.cd_estabelecimento, 'CL'),1,40)) = 1 
and	nr_seq_mes_ref in (	SELECT	nr_sequencia 
				from	ctb_mes_ref 
				where	trunc(dt_referencia,'year') = trunc(coalesce(dt_mesano_referencia_p,clock_timestamp()),'year') 
				and	cd_empresa = cd_empresa_p) 
and	obter_empresa_estab(a.cd_estabelecimento) = cd_empresa_p 
and	a.ie_normal_encerramento = 'N' 
group by cd_conta_contabil, 
	 cd_estabelecimento, 
	 nr_seq_mes_ref;

c02 CURSOR FOR 
SELECT	cd_conta_contabil, 
	nr_seq_mes_ref, 
	sum(coalesce(vl_saldo,0)), 
	sum(coalesce(vl_movimento,0)), 
	sum(coalesce(vl_saldo_anterior,0)), 
	sum(coalesce(vl_saldo_ver,0)), 
	sum(coalesce(vl_diferenca,0)) 
from	w_ctb_ver_saldo 
where	obter_empresa_estab(cd_estabelecimento) = cd_empresa_p 
and	nm_usuario = nm_usuario_p 
and	nr_seq_mes_ref > 0 
group by cd_conta_contabil, 
	nr_seq_mes_ref;


BEGIN 
 
delete from w_ctb_ver_saldo 
where	nm_usuario = nm_usuario_p;
 
commit;
 
open c01;
loop 
	fetch c01 into 
		nr_seq_mes_ref_w, 
		cd_estabelecimento_w, 
		cd_conta_contabil_w, 
		vl_movimento_w, 
		vl_saldo_w, 
		dt_referencia_w, 
		vl_saldo_ant_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
 
		begin 
 
		vl_saldo_ver_w	:= coalesce(vl_saldo_ant_w,0) + coalesce(vl_movimento_w,0);
		vl_diferenca_w	:= coalesce(vl_saldo_ver_w,0) - coalesce(vl_saldo_w,0);
 
		if (cd_conta_contabil_w IS NOT NULL AND cd_conta_contabil_w::text <> '') then 
			begin 
			insert into w_ctb_ver_saldo( 
					nr_sequencia, 
					cd_empresa, 
					cd_estabelecimento, 
					nr_seq_mes_ref, 
					cd_conta_contabil, 
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					vl_saldo, 
					vl_movimento, 
					vl_saldo_anterior, 
					vl_saldo_ver, 
					vl_diferenca) 
				values (nextval('w_ctb_ver_saldo_seq'), 
					cd_empresa_p, 
					cd_estabelecimento_w, 
					nr_seq_mes_ref_w, 
					cd_conta_contabil_w, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					vl_saldo_w, 
					vl_movimento_w, 
					vl_saldo_ant_w, 
					vl_saldo_ver_w, 
					vl_diferenca_w);
			end;
		end if;
		end;
		 
end loop;
close c01;
 
COMMIT;
 
/*Gravar o resumo para a empresa*/
 
open c02;
loop 
	fetch c02 into 
		cd_conta_contabil_w, 
		nr_seq_mes_ref_w, 
		vl_saldo_w, 
		vl_movimento_w, 
		vl_saldo_ant_w, 
		vl_saldo_ver_w, 
		vl_diferenca_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
 
	begin 
 
	if (cd_conta_contabil_w IS NOT NULL AND cd_conta_contabil_w::text <> '') then 
		begin 
 
		select	nextval('w_ctb_ver_saldo_seq') 
		into STRICT	nr_sequencia_w 
		;
 
		insert into w_ctb_ver_saldo( 
				nr_sequencia, 
				cd_empresa, 
				cd_estabelecimento, 
				nr_seq_mes_ref, 
				cd_conta_contabil, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				vl_saldo, 
				vl_movimento, 
				vl_saldo_anterior, 
				vl_saldo_ver, 
				vl_diferenca) 
			values (nr_sequencia_w, 
				cd_empresa_p, 
				0, 
				nr_seq_mes_ref_w, 
				cd_conta_contabil_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				vl_saldo_w, 
				vl_movimento_w, 
				vl_saldo_ant_w, 
				vl_saldo_ver_w, 
				vl_diferenca_w);
		end;
	end if;
	end;	
end loop;
close c02;
 
COMMIT;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_ctb_ver_saldo ( cd_empresa_p bigint, dt_mesano_referencia_p timestamp, nm_usuario_p text) FROM PUBLIC;

