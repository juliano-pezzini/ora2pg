-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE before_post_agenda_consulta ( dt_referencia_p timestamp, dt_validade_carteira_p timestamp, cd_agenda_p bigint, nr_sequencia_p bigint, cd_convenio_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, nr_seq_turno_p bigint, nr_seq_turno_esp_p bigint, nr_seq_indicacao_p bigint, nr_seq_sala_p bigint, nr_minuto_duracao_p bigint, ie_tipo_atendimento_p bigint, cd_estabelecimento_p bigint, qt_idade_p bigint, ie_classif_agenda_p text, cd_cid_p text, cd_categoria_p text, cd_plano_p text, cd_senha_p text, cd_guia_p text, cd_pessoa_fisica_p text, cd_usuario_convenio_p text, ie_consistir_regra_guia_p text, ie_consiste_idade_pac_p text, nm_usuario_p text, cd_empresa_ref_p bigint, cd_medico_agenda_p text, ds_erro_p INOUT text, ds_mensagem_setor_p INOUT text, ds_mensagem_guia_p INOUT text, ie_perm_pf_classif_p INOUT text, ie_solic_pessoa_p INOUT text, ds_consiste_idade_pac_p INOUT text, ds_consiste_agenda_p INOUT text, ds_msg_regra_liber_cidade_p INOUT text, ds_msg_restringe_empresa_p INOUT text) AS $body$
DECLARE


ie_obito_w		varchar(1);
ie_solic_pessoa_w	varchar(1);
ie_permite_pac_hor_w	varchar(1);
ie_agenda_w		varchar(3) := 'S';
ie_consistencia_w	varchar(255);
ds_consistencia_w	varchar(255);
ds_mensagem_w		varchar(255);
ds_erro_w		varchar(255);
ds_erro_ww		varchar(255);
qt_empresa_w		bigint;
ie_conv_nao_lib_agenda_w varchar(1);


BEGIN

CALL consiste_convenio_agecons(0, cd_agenda_p, cd_convenio_p, dt_referencia_p, '');

ie_conv_nao_lib_agenda_w := obter_se_conv_lib_agenda(cd_agenda_p, cd_convenio_p);
if (ie_conv_nao_lib_agenda_w = 'N') then
	ds_erro_p := obter_texto_dic_objeto(1103002, wheb_usuario_pck.get_nr_seq_idioma, null);
	return;
end if;

SELECT * FROM consistir_classif_agecon(	cd_estabelecimento_p, cd_pessoa_fisica_p, dt_referencia_p, cd_agenda_p, cd_convenio_p, cd_procedimento_p, ie_origem_proced_p, nr_seq_proc_interno_p, ie_classif_agenda_p, nr_sequencia_p, ie_consistencia_w, ie_agenda_w) INTO STRICT ie_consistencia_w, ie_agenda_w;

if (ie_agenda_w = 'N') then
	ds_erro_p	:= ie_consistencia_w;
	return; -- Abort
end if;

ie_obito_w	:= obter_se_paciente_obito(cd_pessoa_fisica_p);

if (ie_obito_w = 'A') then
	ds_erro_p	:= obter_texto_dic_objeto(69547, wheb_usuario_pck.get_nr_seq_idioma, null);
	return; -- Abort
	--wheb_mensagem_pck.exibir_mensagem_abort(69547);
elsif (ie_obito_w = 'C') then
	ds_erro_p	:= obter_texto_dic_objeto(69548, wheb_usuario_pck.get_nr_seq_idioma, null);
	return; -- Abort
	--wheb_mensagem_pck.exibir_mensagem_abort(69548);
end if;

ds_mensagem_w := consistir_prazo_convenio_agend(	cd_pessoa_fisica_p, dt_referencia_p, cd_convenio_p, nm_usuario_p, cd_estabelecimento_p, ds_mensagem_w);

if (ds_mensagem_w IS NOT NULL AND ds_mensagem_w::text <> '') then
	ds_erro_p	:= ds_mensagem_w;
	return; -- Abort
end if;

ie_perm_pf_classif_p	:= obter_se_perm_pf_classif(821, cd_agenda_p, cd_pessoa_fisica_p, dt_referencia_p,'DS');

if (ie_perm_pf_classif_p = 'N') then
	return;
end if;

if (nr_seq_indicacao_p IS NOT NULL AND nr_seq_indicacao_p::text <> '') then
	ie_solic_pessoa_p	:= coalesce(substr(obter_dados_indicacao(nr_seq_indicacao_p, 'P'),1,1),'N');
	if (ie_solic_pessoa_p = 'S') then
		return;
	end if;
end if;

ie_consistencia_w := Consistir_regra_setor_agenda(	cd_pessoa_fisica_p, cd_agenda_p, dt_referencia_p, cd_estabelecimento_p, nm_usuario_p, ie_consistencia_w);

if (ie_consistencia_w IS NOT NULL AND ie_consistencia_w::text <> '') then
	if (ie_consistencia_w = 'B') then
		ds_erro_p	:= obter_texto_dic_objeto(188921, wheb_usuario_pck.get_nr_seq_idioma, null);
		return; -- Abort
	elsif (ie_consistencia_w = 'A') then
		ds_mensagem_setor_p	:= obter_texto_dic_objeto(188920, wheb_usuario_pck.get_nr_seq_idioma, null);
	end if;
end if;

if (cd_cid_p IS NOT NULL AND cd_cid_p::text <> '') then
	ds_erro_w := consistir_cid_especialidade(cd_agenda_p, cd_cid_p, ds_erro_w);

	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		ds_erro_p	:= ds_erro_w;
		return; -- Abort
	end if;
end if;

ds_erro_w := consistir_turno_conv_agecons(	cd_agenda_p, nr_sequencia_p, dt_referencia_p, nr_seq_turno_p, nr_seq_turno_esp_p, cd_convenio_p, ds_erro_w, nm_usuario_p, cd_estabelecimento_p, cd_categoria_p);

if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
	ds_erro_p	:= ds_erro_w;
	return; -- Abort
end if;

ie_permite_pac_hor_w := obter_param_usuario(821, 48, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_permite_pac_hor_w);

if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (ie_permite_pac_hor_w <> 'S')then
	ds_erro_w  := consistir_agenda_consulta(	cd_agenda_p, nr_sequencia_p, dt_referencia_p, cd_pessoa_fisica_p, nm_usuario_p, cd_estabelecimento_p, ds_erro_w );
					
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		if (ie_permite_pac_hor_w = 'N') then
			ds_erro_p	:= ds_erro_w;
			return; -- Abort
		elsif (ie_permite_pac_hor_w = 'Q') then
			ds_consiste_agenda_p := ds_erro_w;
		end if;
	end if;
end if;

if (ie_classif_agenda_p IS NOT NULL AND ie_classif_agenda_p::text <> '') then
	ds_erro_w := consistir_classif_agecons(	cd_pessoa_fisica_p, cd_agenda_p, ie_classif_agenda_p, dt_referencia_P, ds_erro_w);

	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		ds_erro_p	:= ds_erro_w;
		return; -- Abort
	end if;
end if;

if (nr_seq_sala_p IS NOT NULL AND nr_seq_sala_p::text <> '') then
	CALL consistir_sala_agecons(	nr_seq_sala_p,
				dt_referencia_p,
				nr_minuto_duracao_p,
				cd_estabelecimento_p,
				nm_usuario_p,
				nr_sequencia_p);
end if;

if (ie_consistir_regra_guia_p = 'S') then
	SELECT * FROM consiste_categoria_conv_agenda(	cd_convenio_p, cd_plano_p, cd_senha_p, cd_guia_p, dt_validade_carteira_p, cd_usuario_convenio_p, ds_erro_w, ds_consistencia_w, cd_categoria_p, ie_tipo_atendimento_p, 821, cd_estabelecimento_p, nm_usuario_p) INTO STRICT ds_erro_w, ds_consistencia_w;
					
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		ds_erro_p	:= ds_erro_w;
		return; -- Abort
	elsif (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
		ds_mensagem_guia_p	:= ds_consistencia_w;
	end if;
end if;

if (ie_consiste_idade_pac_p <> 'N') then
	Consiste_Idade_Pac_Agecons(	cd_agenda_p,
					dt_referencia_p,
					qt_idade_p,
					cd_pessoa_fisica_p	,
					ds_consiste_idade_pac_p ,
					nm_usuario_p);
	if (ie_consiste_idade_pac_p = 'B') and (ds_consiste_idade_pac_p IS NOT NULL AND ds_consiste_idade_pac_p::text <> '') then
		ds_erro_p	:= ds_consiste_idade_pac_p;
		return;
	end if;
end if;

ds_msg_regra_liber_cidade_p := regra_agenda_liber_cidade(	cd_pessoa_fisica_p, cd_agenda_p, ds_msg_regra_liber_cidade_p);
				
if (cd_empresa_ref_p IS NOT NULL AND cd_empresa_ref_p::text <> '') then
	--verifica se existe convenios cadastrados para a empresa.
	select	count(*) qt_empresa
	into STRICT	qt_empresa_w
	from 	empresa_referencia_conv
	where 	(cd_convenio IS NOT NULL AND cd_convenio::text <> '')
	and 	cd_empr_ref = cd_empresa_ref_p;
	--valida convenio x empresa.
	if (qt_empresa_w > 0) then
		select	count(*) qt_empresa
		into STRICT	qt_empresa_w
		from 	empresa_referencia_conv
		where 	cd_empr_ref = cd_empresa_ref_p
		and 	cd_convenio = cd_convenio_p;
		
		if (qt_empresa_w = 0) then
			ds_msg_restringe_empresa_p := obter_texto_dic_objeto(296486, wheb_usuario_pck.get_nr_seq_idioma, null);
		end if;
	end if;	
end if;
	
SELECT * FROM consistir_qtd_conv_regra_cons(	nr_sequencia_p, cd_convenio_p, dt_referencia_p, cd_agenda_p, cd_pessoa_fisica_p, cd_categoria_p, cd_plano_p, cd_estabelecimento_p, nm_usuario_p, cd_medico_agenda_p, nr_seq_proc_interno_p, ie_tipo_atendimento_p, ds_erro_ww, ds_erro_ww, ds_erro_ww) INTO STRICT ds_erro_ww, ds_erro_ww, ds_erro_ww;
							
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE before_post_agenda_consulta ( dt_referencia_p timestamp, dt_validade_carteira_p timestamp, cd_agenda_p bigint, nr_sequencia_p bigint, cd_convenio_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, nr_seq_turno_p bigint, nr_seq_turno_esp_p bigint, nr_seq_indicacao_p bigint, nr_seq_sala_p bigint, nr_minuto_duracao_p bigint, ie_tipo_atendimento_p bigint, cd_estabelecimento_p bigint, qt_idade_p bigint, ie_classif_agenda_p text, cd_cid_p text, cd_categoria_p text, cd_plano_p text, cd_senha_p text, cd_guia_p text, cd_pessoa_fisica_p text, cd_usuario_convenio_p text, ie_consistir_regra_guia_p text, ie_consiste_idade_pac_p text, nm_usuario_p text, cd_empresa_ref_p bigint, cd_medico_agenda_p text, ds_erro_p INOUT text, ds_mensagem_setor_p INOUT text, ds_mensagem_guia_p INOUT text, ie_perm_pf_classif_p INOUT text, ie_solic_pessoa_p INOUT text, ds_consiste_idade_pac_p INOUT text, ds_consiste_agenda_p INOUT text, ds_msg_regra_liber_cidade_p INOUT text, ds_msg_restringe_empresa_p INOUT text) FROM PUBLIC;

