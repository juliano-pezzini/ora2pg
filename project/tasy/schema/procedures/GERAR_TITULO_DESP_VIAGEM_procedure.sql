-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_titulo_desp_viagem ( nr_sequencia_p bigint, cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, vl_despesa_p bigint, nm_usuario_p text, dt_mes_p timestamp, nr_titulo_p INOUT bigint) AS $body$
DECLARE


cd_moeda_w			integer;
cd_tipo_taxa_juro_w		bigint;
cd_tipo_taxa_multa_w		bigint;
ie_situacao_w			varchar(1);
nr_adiantamento_w			bigint;
nr_titulo_w			bigint;
nr_seq_adiant_tit_w			bigint;
vl_adiantamento_w			double precision;
vl_total_adiantamentos_w		double precision;
vl_titulo_w			double precision;
vl_saldo_w			double precision;
vl_saldo_adiant_w			double precision;
vl_pagar_aux_w			double precision;
contador_w			bigint := 0;
ie_fim_w				varchar(1) := 'F';
qt_reg_w			bigint;
cd_empresa_w			empresa.cd_empresa%type;
nr_seq_classif_w		titulo_pagar_classif.nr_sequencia%type	:= 0;

c01 CURSOR FOR
	SELECT	nr_adiantamento,
		vl_adiantamento,
		vl_saldo
	from	adiantamento_pago
	where	cd_pessoa_fisica = cd_pessoa_fisica_p
	and	coalesce(dt_baixa::text, '') = ''
	and	vl_saldo > 0
	order by dt_adiantamento asc;

c02 CURSOR FOR
SELECT	y.cd_centro_custo,
	y.cd_conta_contabil,
	coalesce(sum(y.vl_despesa),0) vl_despesa
from (
select	a.nr_seq_viagem,
	b.ie_responsavel_custo,
	b.nr_seq_classif_desp,
	b.cd_centro_custo,
	ctb_obter_conta_desp_viagem(cd_empresa_w, 'P', b.nr_seq_classif_desp, b.ie_responsavel_custo, 'RV', clock_timestamp()) cd_conta_contabil,
	coalesce(b.vl_despesa,0) vl_despesa
from	via_relat_desp a,
	via_despesa b
where	a.nr_sequencia		= b.nr_seq_relat
and	a.nr_seq_fech_proj 	= nr_sequencia_p
and	b.ie_tipo_despesa	= 'V'
order by a.nr_seq_viagem) y
where	1 = 1
group by y.cd_centro_custo,
	y.cd_conta_contabil;

BEGIN

cd_empresa_w	:= obter_empresa_estab(cd_estabelecimento_p);

select  count(*)
into STRICT	qt_reg_w
from    via_relat_desp a
where   a.nr_seq_fech_proj = nr_sequencia_p
and ( coalesce(obter_valor_desp_viagem(nr_sequencia,'4'),0) = 0 OR
          coalesce(a.ie_pago_terceiro,'N') = 'S' OR
		  coalesce(a.ie_antigo, 'N') = 'S' );

if (qt_reg_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(882936);
end if;

vl_total_adiantamentos_w := coalesce(obter_adiantamento_aberto_pf(cd_pessoa_fisica_p,vl_despesa_p,null, 'VA'),0);

if (vl_despesa_p - vl_total_adiantamentos_w > 0) then
	ie_situacao_w := 'A';
else
	ie_situacao_w := 'L';
end if;

select	max(a.cd_moeda_padrao),
	max(a.cd_tipo_taxa_juro),
	max(a.cd_tipo_taxa_multa)
into STRICT	cd_moeda_w,
	cd_tipo_taxa_juro_w,
	cd_tipo_taxa_multa_w
from	parametros_contas_pagar a
where	a.cd_estabelecimento	= cd_estabelecimento_p;

/* Gerar o título */

select	nextval('titulo_pagar_seq')
into STRICT	nr_titulo_w
;

insert	into titulo_pagar(	nr_titulo,
				nm_usuario,
				dt_atualizacao,
				cd_estabelecimento,
				dt_emissao,
				dt_vencimento_original,
				dt_vencimento_atual,
				vl_titulo,
				vl_saldo_titulo,
				vl_saldo_juros,
				vl_saldo_multa,
				cd_moeda,
				tx_juros,
				tx_multa,
				cd_tipo_taxa_juro,
				cd_tipo_taxa_multa,
				ie_situacao,
				ie_origem_titulo,
				ie_tipo_titulo,
				cd_pessoa_fisica,
				ds_observacao_titulo)
		values (	nr_titulo_w,
				nm_usuario_p,
				clock_timestamp(),
				cd_estabelecimento_p,
				trunc(clock_timestamp(),'dd'),
				fim_mes(clock_timestamp()),
				fim_mes(clock_timestamp()),
				vl_despesa_p,
				vl_despesa_p,
				0,
				0,
				cd_moeda_w,
				0,
				0,
				cd_tipo_taxa_juro_w,
				cd_tipo_taxa_multa_w,
				ie_situacao_w,
				2,
				10,
				cd_pessoa_fisica_p,
				substr(wheb_mensagem_pck.get_texto(302866,'NM_PESSOA_FISICA=' || obter_nome_pf(cd_pessoa_fisica_p) || ';DT_MES=' || dt_mes_p),1,4000));
		CALL ATUALIZAR_INCLUSAO_TIT_PAGAR(nr_titulo_w, nm_usuario_p);
commit;

nr_titulo_p	:= nr_titulo_w;

select	vl_titulo
into STRICT	vl_titulo_w
from	titulo_pagar
where	nr_titulo = nr_titulo_w;

for vet in c02 loop
	begin
	nr_seq_classif_w	:= nr_seq_classif_w + 1;
	insert into titulo_pagar_classif(
		nr_titulo,
		nr_sequencia,
		cd_centro_custo,
		cd_conta_contabil,
		vl_titulo,
		nm_usuario,
		dt_atualizacao)
	values (	nr_titulo_w,
		nr_seq_classif_w,
		vet.cd_centro_custo,
		vet.cd_conta_contabil,
		vet.vl_despesa,
		nm_usuario_p,
		clock_timestamp());
	end;
end loop;

commit;



vl_pagar_aux_w := (vl_despesa_p - vl_total_adiantamentos_w);
/* Vincula adiantamentos da pessoa ao título */

if (vl_pagar_aux_w > 0) then
open c01;
loop
fetch c01 into
	nr_adiantamento_w,
	vl_adiantamento_w,
	vl_saldo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	contador_w := contador_w + 1;

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_adiant_tit_w
	from	titulo_pagar_adiant
	where	nr_titulo = nr_titulo_w;

	if (vl_saldo_w > vl_titulo_w) then
		vl_saldo_adiant_w := vl_titulo_w;
	else
		vl_saldo_adiant_w := vl_saldo_w;
	end if;

	insert into	titulo_pagar_adiant(	nr_titulo,
					nr_sequencia,
					nr_adiantamento,
					vl_adiantamento,
					dt_atualizacao,
					nm_usuario,
					nr_seq_trans_fin)
			values (	nr_titulo_w,
					nr_seq_adiant_tit_w + 1,
					nr_adiantamento_w,
					vl_saldo_adiant_w,
					clock_timestamp(),
					'Tasy',
					153);

	commit;

	update adiantamento_pago set vl_saldo = 0, dt_baixa = clock_timestamp() where nr_adiantamento = nr_adiantamento_w;

	end;
end loop;
close c01;

else

	vl_pagar_aux_w := vl_titulo_w;

	open c01;
	loop
	fetch c01 into
		nr_adiantamento_w,
		vl_adiantamento_w,
		vl_saldo_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		contador_w := contador_w + 1;

		if (contador_w = 1) then		-- O primeiro adiantameno (o mais antigo) é sempre vinculado.
			select	coalesce(max(nr_sequencia),0)
			into STRICT	nr_seq_adiant_tit_w
			from	titulo_pagar_adiant
			where	nr_titulo = nr_titulo_w;

			if (vl_saldo_w > vl_pagar_aux_w) then
				vl_saldo_adiant_w := vl_pagar_aux_w;
				update adiantamento_pago set vl_saldo = (vl_saldo_w - vl_pagar_aux_w) where nr_adiantamento = nr_adiantamento_w;
				ie_fim_w := 'S';
			else
				vl_saldo_adiant_w := vl_saldo_w;
				vl_pagar_aux_w := vl_pagar_aux_w - vl_saldo_w;
				update adiantamento_pago set vl_saldo = 0, dt_baixa = clock_timestamp() where nr_adiantamento = nr_adiantamento_w;
				ie_fim_w := 'N';
			end if;

			insert into	titulo_pagar_adiant(	nr_titulo,
							nr_sequencia,
							nr_adiantamento,
							vl_adiantamento,
							dt_atualizacao,
							nm_usuario)
					values (	nr_titulo_w,
							nr_seq_adiant_tit_w + 1,
							nr_adiantamento_w,
							vl_saldo_adiant_w,
							clock_timestamp(),
							'Tasy');

			commit;

			if (ie_fim_w = 'S') then
				exit;
			end if;

		else

			if (vl_saldo_w > vl_pagar_aux_w) then			-- Se o valor do adiantamento for maior do que o do título, apenas atualiza o saldo do adiantamento
				update adiantamento_pago set vl_saldo = (vl_saldo_w - vl_pagar_aux_w) where nr_adiantamento = nr_adiantamento_w;
				exit;

			else											-- Se o valor do adiantamento for menor, vincula no título e atualiza o saldo.
				select	coalesce(max(nr_sequencia),0)
				into STRICT	nr_seq_adiant_tit_w
				from	titulo_pagar_adiant
				where	nr_titulo = nr_titulo_w;

				insert into	titulo_pagar_adiant(	nr_titulo,
								nr_sequencia,
								nr_adiantamento,
								vl_adiantamento,
								dt_atualizacao,
								nm_usuario)
						values (	nr_titulo_w,
								nr_seq_adiant_tit_w + 1,
								nr_adiantamento_w,
								vl_saldo_w,
								clock_timestamp(),
								'Tasy');

				commit;

				update adiantamento_pago set vl_saldo = 0, dt_baixa = clock_timestamp() where nr_adiantamento = nr_adiantamento_w;

				vl_pagar_aux_w := vl_pagar_aux_w - vl_saldo_w;
			end if;
		end if;
		end;
	end loop;
	close c01;
end if;

commit;

/* Atualiza saldo do título */

CALL atualizar_saldo_tit_pagar(nr_titulo_w, nm_usuario_p);
CALL Gerar_W_Tit_Pag_imposto(nr_titulo_w, nm_usuario_p);

/* Inserir o número do título na tabela proj_desp_viagem_mes */

update proj_desp_viagem_mes set nr_titulo = nr_titulo_w where nr_sequencia = nr_sequencia_p;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_titulo_desp_viagem ( nr_sequencia_p bigint, cd_pessoa_fisica_p text, cd_estabelecimento_p bigint, vl_despesa_p bigint, nm_usuario_p text, dt_mes_p timestamp, nr_titulo_p INOUT bigint) FROM PUBLIC;

