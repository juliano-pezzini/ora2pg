-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pfcs_discharge_post_anesthetic ( nr_seq_indicator_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


pfcs_panel_detail_seq_w			pfcs_panel_detail.nr_sequencia%type;
nr_seq_operational_level_w		pfcs_operational_level.nr_sequencia%type;
nr_seq_panel_w				pfcs_panel.nr_sequencia%type;


qt_entry_rpa_w			bigint := 0;
qt_discharge_rpa_w		bigint := 0;
qt_time_rule_w			bigint := 0;
qt_avg_time_rpa_w		bigint := 0;
hr_actual_w			bigint := 0;
hr_rpa_w			bigint := 0;
qt_execucao_w 			bigint;
dt_reference_w			timestamp;

-- EVENT
-- AE -> Actual entry
-- SE -> Scheduled entry
-- AD -> Actual departure   
-- SD -> Scheduled departure
c01 CURSOR(hr_rpa_p text) FOR  -- Cursor referente a entrada no RPA
	SELECT	'AE' ie_type, -- Transferencia
		a.cd_pessoa_fisica id_patient,
		coalesce(get_formatted_person_name(a.cd_pessoa_fisica, 'list'), obter_nome_pf(a.cd_pessoa_fisica) ) nm_patient,
		pfcs_obter_lista_dados_classif(a.cd_pessoa_fisica) ds_classification,
		obter_sexo_pf(a.cd_pessoa_fisica, 'D') ds_gender,
		pf.dt_nascimento dt_birthdate,
		obter_dados_pf(pf.cd_pessoa_fisica, 'I') qt_idade_paciente,
		a.nr_atendimento nr_encounter,
		b.dt_entrada_unidade dt_event,
		d.cd_setor_atendimento cd_department,
		d.ds_setor_atendimento ds_department,
		c.cd_unidade_basica || ' ' || c.cd_unidade_compl ds_location
	from	setor_atendimento	d,
		unidade_atendimento	c,
		atend_paciente_unidade	b,
		atendimento_paciente	a,
		pessoa_fisica		pf
	where	c.cd_setor_atendimento	= d.cd_setor_atendimento
	and	a.nr_atendimento	= b.nr_atendimento
	and	c.cd_setor_atendimento	= b.cd_setor_atendimento
	and	c.cd_unidade_basica	= b.cd_unidade_basica
	and	c.cd_unidade_compl	= b.cd_unidade_compl
	and	a.cd_pessoa_fisica	= pf.cd_pessoa_fisica
	and	c.ie_situacao		= 'A'
	and	d.ie_situacao		= 'A'
	and	d.ie_rpa = 'S'
	and	b.dt_entrada_unidade >= clock_timestamp() - ((1/24)*23)
	and	coalesce(b.dt_saida_unidade::text, '') = ''
	and	(to_char(b.dt_entrada_unidade,'hh24'))::numeric  = CASE WHEN hr_rpa_p=24 THEN  0 WHEN hr_rpa_p=25 THEN  1 WHEN hr_rpa_p=26 THEN  2 WHEN hr_rpa_p=27 THEN  3 WHEN hr_rpa_p=28 THEN  4 WHEN hr_rpa_p=29 THEN  5  ELSE hr_rpa_p END
	and	d.cd_estabelecimento_base = cd_estabelecimento_p
	
union all

	SELECT	'SE' ie_type, -- Previsao Transferencia
		a.cd_pessoa_fisica id_patient,
		coalesce(get_formatted_person_name(a.cd_pessoa_fisica, 'list'), obter_nome_pf(a.cd_pessoa_fisica) ) nm_patient,
		pfcs_obter_lista_dados_classif(a.cd_pessoa_fisica) ds_classification,
		obter_sexo_pf(a.cd_pessoa_fisica, 'D') ds_gender,
		c.dt_nascimento dt_birthdate,
		obter_dados_pf(a.cd_pessoa_fisica, 'I') qt_idade_paciente,
		a.nr_atendimento nr_encounter,
		(coalesce(cir.dt_inicio_real, a.hr_inicio) + (1/1440 * a.nr_minuto_duracao)) dt_event,
		null cd_department,
		null ds_department,
		null ds_location
	from 	agenda_paciente a,
		agenda	b,
		pessoa_fisica c,
		cirurgia cir
	where	a.cd_agenda		= b.cd_agenda
	and	a.cd_pessoa_fisica	= c.cd_pessoa_fisica
	and 	a.nr_cirurgia = cir.nr_cirurgia
	and 	coalesce(a.dt_cancelamento::text, '') = ''
	and	b.cd_tipo_agenda = 1
	and 	cir.ie_status_cirurgia not in ('3')
	and	round(to_char((coalesce(cir.dt_inicio_real, a.hr_inicio) + (1/1440 * a.nr_minuto_duracao)), 'hh24')) = CASE WHEN hr_rpa_p=24 THEN  0 WHEN hr_rpa_p=25 THEN  1 WHEN hr_rpa_p=26 THEN  2 WHEN hr_rpa_p=27 THEN  3 WHEN hr_rpa_p=28 THEN  4 WHEN hr_rpa_p=29 THEN  5  ELSE hr_rpa_p END 
	and	(coalesce(cir.dt_inicio_real, a.hr_inicio) + (1/1440 * a.nr_minuto_duracao)) BETWEEN  trunc(clock_timestamp() - interval '1 days'/24,'hh24') and trunc(clock_timestamp() + interval '5 days'/24,'hh24')
	and not exists (select 1
			from atend_paciente_unidade	apu,
			    setor_atendimento	sa
			where apu.cd_setor_atendimento = sa.cd_setor_atendimento
			    and apu.nr_atendimento = a.nr_atendimento
			    and apu.dt_entrada_unidade > coalesce(cir.dt_inicio_real, a.hr_inicio)
			    and sa.ie_rpa = 'S'
			    and sa.ie_situacao = 'A')
	and	b.cd_estabelecimento = cd_estabelecimento_p;


c02 CURSOR(hr_rpa_p text) FOR
	SELECT	'AD' ie_type, -- Alta
		a.cd_pessoa_fisica id_patient,
		coalesce(get_formatted_person_name(a.cd_pessoa_fisica, 'list'), obter_nome_pf(a.cd_pessoa_fisica) ) nm_patient,
		pfcs_obter_lista_dados_classif(a.cd_pessoa_fisica) ds_classification,
		obter_sexo_pf(a.cd_pessoa_fisica, 'D') ds_gender,
		pf.dt_nascimento dt_birthdate,
		obter_dados_pf(pf.cd_pessoa_fisica, 'I') qt_idade_paciente,
		a.nr_atendimento nr_encounter,
		coalesce(b.dt_saida_unidade, a.dt_saida_real) dt_event,
		d.cd_setor_atendimento cd_department,
		d.ds_setor_atendimento ds_department,
		c.cd_unidade_basica || ' ' || c.cd_unidade_compl ds_location
	from	setor_atendimento	d,
		unidade_atendimento	c,
		atend_paciente_unidade	b,
		atendimento_paciente	a,
		pessoa_fisica		pf
	where	c.cd_setor_atendimento	= d.cd_setor_atendimento
	and	a.nr_atendimento	= b.nr_atendimento
	and	c.cd_setor_atendimento	= b.cd_setor_atendimento
	and	c.cd_unidade_basica	= b.cd_unidade_basica
	and	c.cd_unidade_compl	= b.cd_unidade_compl
	and	a.cd_pessoa_fisica	= pf.cd_pessoa_fisica
	and	c.ie_situacao		= 'A'
	and	d.ie_situacao		= 'A'
	and	d.ie_rpa = 'S'
	and 	coalesce(b.dt_saida_unidade, a.dt_saida_real)  BETWEEN trunc(clock_timestamp() - interval '1 days'/24,'hh24') and trunc(clock_timestamp() + interval '5 days'/24,'hh24')
	and ((a.dt_saida_real IS NOT NULL AND a.dt_saida_real::text <> '') or (b.dt_saida_unidade IS NOT NULL AND b.dt_saida_unidade::text <> ''))
	and	(to_char(coalesce(b.dt_saida_unidade, a.dt_saida_real),'hh24'))::numeric  = CASE WHEN hr_rpa_p=24 THEN  0 WHEN hr_rpa_p=25 THEN  1 WHEN hr_rpa_p=26 THEN  2 WHEN hr_rpa_p=27 THEN  3 WHEN hr_rpa_p=28 THEN  4 WHEN hr_rpa_p=29 THEN  5  ELSE hr_rpa_p END
	and	d.cd_estabelecimento_base = cd_estabelecimento_p
	
union all

	SELECT	'SD' ie_type, -- previsao de alta
		a.cd_pessoa_fisica id_patient,
		coalesce(get_formatted_person_name(a.cd_pessoa_fisica, 'list'), obter_nome_pf(a.cd_pessoa_fisica) ) nm_patient,
		pfcs_obter_lista_dados_classif(a.cd_pessoa_fisica) ds_classification,
		obter_sexo_pf(a.cd_pessoa_fisica, 'D') ds_gender,
		c.dt_nascimento dt_birthdate,
		obter_dados_pf(a.cd_pessoa_fisica, 'I') qt_idade_paciente,
		a.nr_atendimento nr_encounter,
		(coalesce(cir.dt_inicio_real, a.hr_inicio) + (1/1440 * (a.nr_minuto_duracao +  qt_avg_time_rpa_w))) dt_event,
		null cd_department,
		null ds_department,
		null ds_location
	from	pessoa_fisica	c,
		agenda_paciente	a,
		agenda		b,
		cirurgia cir
	where	a.cd_agenda		= b.cd_agenda
	and	a.cd_pessoa_fisica	= c.cd_pessoa_fisica
	and	b.cd_tipo_agenda	= 1
	and 	coalesce(a.dt_cancelamento::text, '') = ''
	and 	cir.nr_cirurgia = a.nr_cirurgia
	and 	cir.ie_status_cirurgia not in ('3')
	and	coalesce(cir.dt_inicio_real, a.hr_inicio) + (1/1440 * (a.nr_minuto_duracao +  qt_avg_time_rpa_w)) BETWEEN trunc(clock_timestamp() - interval '1 days'/24,'hh24') and trunc(clock_timestamp() + interval '5 days'/24,'hh24')
	and 	not exists (	select	1
				from 	atend_paciente_unidade	apu,
					setor_atendimento	sa
				where	apu.cd_setor_atendimento = sa.cd_setor_atendimento
				and 	apu.nr_atendimento = a.nr_atendimento
				and 	(apu.dt_saida_unidade IS NOT NULL AND apu.dt_saida_unidade::text <> '')
				and 	apu.dt_entrada_unidade > coalesce(cir.dt_inicio_real, a.hr_inicio)
				and 	sa.ie_rpa = 'S'
				and 	sa.ie_situacao = 'A')
	and 	round(to_char(coalesce(cir.dt_inicio_real, a.hr_inicio),'hh24') + (a.nr_minuto_duracao / 60) + (qt_avg_time_rpa_w / 60)) = hr_rpa_p
	and	b.cd_estabelecimento	= cd_estabelecimento_p;

BEGIN

nr_seq_operational_level_w := pfcs_get_structure_level(
	cd_establishment_p => cd_estabelecimento_p,
	ie_level_p => 'O',
	ie_info_p => 'C');

select	max(qt_time)
into STRICT	qt_time_rule_w
from	pfcs_time_surgery_rpa;

select	to_char(clock_timestamp(),'hh24')
into STRICT	hr_actual_w
;

select (sum(dt_saida_unidade - dt_entrada_unidade) / count(*)) * 1440
into STRICT	qt_avg_time_rpa_w
from	atend_paciente_unidade apu,
        setor_atendimento	sa
where 	apu.cd_setor_atendimento = sa.cd_setor_atendimento
and 	sa.ie_rpa = 'S'
and	sa.ie_situacao = 'A'
and	(apu.dt_saida_unidade IS NOT NULL AND apu.dt_saida_unidade::text <> '')
and	apu.dt_entrada_unidade >= clock_timestamp() - qt_time_rule_w;

if (hr_actual_w = 0) then
	hr_actual_w := 23;
else
	hr_actual_w := hr_actual_w - 1;
end if;

hr_rpa_w := hr_actual_w;

for hr_rpa_w in hr_actual_w..hr_actual_w + 5 loop

	qt_entry_rpa_w		:= 0;
	qt_discharge_rpa_w	:= 0;

	for c01_w in c01(hr_rpa_w) loop
		qt_entry_rpa_w	:= qt_entry_rpa_w + 1;

		select	nextval('pfcs_panel_detail_seq')
		into STRICT	pfcs_panel_detail_seq_w
		;

		insert into pfcs_panel_detail(
			nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			ie_situation,
			nr_seq_indicator,
			nr_seq_operational_level)
		values (
			pfcs_panel_detail_seq_w,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			'T',
			nr_seq_indicator_p,
			nr_seq_operational_level_w);

		if (c01_w.ie_type = 'AE') then
			insert into pfcs_detail_bed(
				nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_detail,
				ds_location,
				cd_department,
				ds_department)
			values (
				nextval('pfcs_detail_bed_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				pfcs_panel_detail_seq_w,
				c01_w.ds_location,
				c01_w.cd_department,
				c01_w.ds_department);
		end if;

		insert into pfcs_detail_patient(
			nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_detail,
			nr_encounter,
			dt_entrance,
			id_patient,
			nm_patient,
			ds_gender,
			ds_classification,
			dt_birthdate,
			ds_age_range,
			ie_stage_pa)
		values (
			nextval('pfcs_detail_patient_seq'),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			pfcs_panel_detail_seq_w,
			c01_w.nr_encounter,
			c01_w.dt_event,
			c01_w.id_patient,
			c01_w.nm_patient,
			c01_w.ds_gender,
			c01_w.ds_classification,
			c01_w.dt_birthdate,
			c01_w.qt_idade_paciente,
			c01_w.ie_type);
	end loop;

	 := pfcs_pck.pfcs_generate_results(
		vl_indicator_p => qt_entry_rpa_w, vl_indicator_aux_p => hr_rpa_w, ds_reference_value_p => 'E', nr_seq_indicator_p => nr_seq_indicator_p, nr_seq_operational_level_p => nr_seq_operational_level_w, nm_usuario_p => nm_usuario_p, nr_seq_panel_p => nr_seq_panel_w);

	CALL pfcs_pck.pfcs_update_detail(
		nr_seq_indicator_p => nr_seq_indicator_p,
		nr_seq_panel_p => nr_seq_panel_w,
		nr_seq_operational_level_p => nr_seq_operational_level_w,
		nm_usuario_p => nm_usuario_p);

	for c02_w in c02(hr_rpa_w) loop
		qt_discharge_rpa_w	:= qt_discharge_rpa_w + 1;

		select	nextval('pfcs_panel_detail_seq')
		into STRICT	pfcs_panel_detail_seq_w
		;

		insert into pfcs_panel_detail(
			nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			ie_situation,
			nr_seq_indicator,
			nr_seq_operational_level)
		values (
			pfcs_panel_detail_seq_w,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			'T',
			nr_seq_indicator_p,
			nr_seq_operational_level_w);

		if (c02_w.ie_type = 'AD') then
			insert into pfcs_detail_bed(
				nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_detail,
				ds_location,
				cd_department,
				ds_department)
			values (
				nextval('pfcs_detail_bed_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				pfcs_panel_detail_seq_w,
				c02_w.ds_location,
				c02_w.cd_department,
				c02_w.ds_department);
		end if;

		insert into pfcs_detail_patient(
			nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_detail,
			nr_encounter,
			dt_entrance,
			id_patient,
			nm_patient,
			ds_gender,
			ds_classification,
			dt_birthdate,
			ds_age_range,
			ie_stage_pa)
		values (
			nextval('pfcs_detail_patient_seq'),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			pfcs_panel_detail_seq_w,
			c02_w.nr_encounter,
			c02_w.dt_event,
			c02_w.id_patient,
			c02_w.nm_patient,
			c02_w.ds_gender,
			c02_w.ds_classification,
			c02_w.dt_birthdate,
			c02_w.qt_idade_paciente,
			c02_w.ie_type);
	end loop;

	 := pfcs_pck.pfcs_generate_results(
		vl_indicator_p => qt_discharge_rpa_w, vl_indicator_aux_p => hr_rpa_w, ds_reference_value_p => 'D', nr_seq_indicator_p => nr_seq_indicator_p, nr_seq_operational_level_p => nr_seq_operational_level_w, nm_usuario_p => nm_usuario_p, nr_seq_panel_p => nr_seq_panel_w);

	CALL pfcs_pck.pfcs_update_detail(
		nr_seq_indicator_p => nr_seq_indicator_p,
		nr_seq_panel_p => nr_seq_panel_w,
		nr_seq_operational_level_p => nr_seq_operational_level_w,
		nm_usuario_p => nm_usuario_p);

end loop;

CALL pfcs_pck.pfcs_activate_records(
	nr_seq_indicator_p => nr_seq_indicator_p,
	nr_seq_operational_level_p => nr_seq_operational_level_w,
	nm_usuario_p => nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_discharge_post_anesthetic ( nr_seq_indicator_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

