-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baixa_titulo_receber_dep_ident ( cd_estabelecimento_p bigint, cd_tipo_recebimento_p bigint, nr_titulo_p bigint, nr_seq_trans_financ_p bigint, vl_baixa_p bigint, dt_recebimento_p timestamp, nm_usuario_p text, nr_seq_deposito_p bigint, vl_devolver_p bigint, vl_juros_p bigint, vl_multa_p bigint, ie_tipo_baixa_p text) AS $body$
DECLARE


ie_acao_w			varchar(5);
ie_acao_baixa_w			varchar(5);
vl_juros_w			double precision	:= 0;
vl_multa_w			double precision	:= 0;
vl_baixa_w			double precision	:= 0;
vl_rec_maior_w			double precision	:= 0;
nr_seq_conta_banco_w		bigint;
cd_centro_custo_desc_w		bigint;
nr_seq_motivo_desc_w		bigint;
nr_seq_solic_desc_w		bigint 	:= null;
nr_seq_regra_w			bigint;
cd_moeda_padrao_w		integer	:= 0;
nr_seq_baixa_w			integer	:= 0;
vl_saldo_titulo_w		titulo_receber.vl_saldo_titulo%type;
/* Projeto Multimoeda - Variáveis */

vl_baixa_estrang_w		double precision;
vl_complemento_w		double precision;
vl_cotacao_w			cotacao_moeda.vl_cotacao%type;
cd_moeda_w			integer;
ie_data_base_calc_w		varchar(1) := 'P';
vl_cotacao_tit_w		cotacao_moeda.vl_cotacao%type;
cd_moeda_tit_w			integer;
vl_var_cambial_w		double precision;
vl_cambial_ativo_w		double precision := 0;
vl_cambial_passivo_w		double precision := 0;
ie_baixa_titulo_cobr_w		parametro_deposito_ident.ie_baixa_titulo_cobr%type;
qt_tit_cobranca_w			bigint;


BEGIN
select	cd_moeda_padrao
into STRICT	cd_moeda_padrao_w
from	parametro_contas_receber
where	cd_estabelecimento	= cd_estabelecimento_p;

select	coalesce(max(nr_sequencia), 0) + 1
into STRICT	nr_seq_baixa_w
from	titulo_receber_liq
where	nr_titulo	= nr_titulo_p;

select	max(a.ie_baixa_titulo_cobr)
into STRICT	ie_baixa_titulo_cobr_w
from	parametro_deposito_ident a
where	cd_estabelecimento = cd_estabelecimento_p;

if ( coalesce(ie_baixa_titulo_cobr_w,'S') = 'N' ) then

	select	count(*)
	into STRICT	qt_tit_cobranca_w
	from	cobranca
	where	nr_titulo	= nr_titulo_p;

	if (qt_tit_cobranca_w > 0) then
		/*O nr_titulo_p não pode ser baixa pois está em cobrança. Verifique os parâmetro do controle de depósitos*/

		CALL wheb_mensagem_pck.exibir_mensagem_abort(368120, 'NR_TITULO_P=' || nr_titulo_p);
	end if;

end if;

ie_data_base_calc_w := Obter_Param_Usuario(9054, 12, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_data_base_calc_w);

select	coalesce(a.vl_depositar,0),
	coalesce(vl_juros_p,coalesce((obter_juros_multa_titulo(a.nr_titulo, CASE WHEN  coalesce(ie_data_base_calc_w,'P')='D' THEN  dt_recebimento_p   ELSE c.dt_pagamento_previsto END , 'R', 'J'))::numeric , 0)),
	coalesce(vl_multa_p,coalesce((obter_juros_multa_titulo(a.nr_titulo, CASE WHEN  coalesce(ie_data_base_calc_w,'P')='D' THEN  dt_recebimento_p   ELSE c.dt_pagamento_previsto END , 'R', 'M'))::numeric , 0)),
	b.nr_seq_conta_banco,
	coalesce(c.vl_saldo_titulo,0),
	a.vl_depositar_estrang,
	a.vl_cotacao,
	b.cd_moeda
into STRICT	vl_baixa_w,
	vl_juros_w,
	vl_multa_w,
	nr_seq_conta_banco_w,
	vl_saldo_titulo_w,
	vl_baixa_estrang_w,
	vl_cotacao_w,
	cd_moeda_w
from	titulo_receber		c,
	deposito_identificado	b,
	deposito_ident_titulo	a
where	a.nr_seq_deposito	= b.nr_sequencia
and	a.nr_seq_deposito	= nr_seq_deposito_p
and	c.nr_titulo		= a.nr_titulo
and	a.nr_titulo		= nr_titulo_p;


if (ie_tipo_baixa_p	= 'BXM') then
	vl_baixa_w	:= coalesce(vl_baixa_p,0);
	vl_juros_w	:= coalesce(vl_juros_p,0);
	vl_multa_w	:= coalesce(vl_multa_p,0);

	if (vl_devolver_p > 0) then

		vl_juros_w	:= coalesce(vl_juros_p,(obter_juros_multa_titulo(nr_titulo_p,obter_data_limite_dep_ident(nr_seq_deposito_p),'R','J'))::numeric );
		vl_multa_w	:= coalesce(vl_multa_p,(obter_juros_multa_titulo(nr_titulo_p,obter_data_limite_dep_ident(nr_seq_deposito_p),'R','M'))::numeric );

			if (vl_devolver_p >= vl_juros_w + vl_multa_w) then

				vl_baixa_w	:= coalesce(vl_baixa_p,0);
				vl_rec_maior_w	:= coalesce(vl_devolver_p,0) - (coalesce(vl_juros_w,0) + coalesce(vl_multa_w,0));
			end if;
	end if;

else
	if	((vl_baixa_p + vl_devolver_p) <= (vl_baixa_w - vl_juros_w - vl_multa_w)) then

		vl_baixa_w	:= vl_baixa_p;

		if	((vl_baixa_p + vl_devolver_p) < (vl_baixa_w + vl_juros_w + vl_multa_w)) then
			vl_juros_w	:= 0;
			vl_juros_w	:= 0;

		elsif (vl_devolver_p > 0) then

			vl_juros_w	:= (obter_juros_multa_titulo(nr_titulo_p,obter_data_limite_dep_ident(nr_seq_deposito_p),'R','J'))::numeric;
			vl_multa_w	:= (obter_juros_multa_titulo(nr_titulo_p,obter_data_limite_dep_ident(nr_seq_deposito_p),'R','M'))::numeric;
		end if;

	elsif (vl_devolver_p >= vl_juros_w + vl_multa_w) then

		vl_baixa_w	:= vl_baixa_p;
		vl_rec_maior_w	:= coalesce(vl_devolver_p,0) - (coalesce(vl_juros_w,0) + coalesce(vl_multa_w,0));

	end if;
end if;

if (vl_rec_maior_w = 0) and (vl_devolver_p > 0) then /*Somente se nao tiver calculado valor a maior ainda e possuir valor a maior. OS 835187*/
	vl_rec_maior_w	:= coalesce(vl_devolver_p,0) - (coalesce(vl_juros_w,0) + coalesce(vl_multa_w,0));
end if;

if (vl_baixa_w > vl_saldo_titulo_w) then
	vl_baixa_w := vl_saldo_titulo_w;
end if;

/* Projeto Multimoeda - Verifica se o depósito é moeda estrangeira, caso positivo calcula os valores para gravar na baixa.*/

if (coalesce(vl_baixa_estrang_w,0) <> 0 and coalesce(vl_cotacao_w,0) <> 0) then
	vl_baixa_estrang_w := vl_baixa_w / vl_cotacao_w;
	vl_complemento_w := vl_baixa_w - vl_baixa_estrang_w;
else
	vl_baixa_estrang_w := null;
	vl_complemento_w := null;
	vl_cotacao_w := null;
	cd_moeda_w := null;
end if;

/* Projeto Multimoeda - Busca os dados do título para verificar a existência de variação cambial para títulos em moeda estrangeira quando a baixa for realizada na mesma moeda do título.
	Caso seja a mesma moeda e exista cotação no título e na baixa, calcula a variação entre a emissão do título e a baixa a ser realizada para gravar a variação passiva caso o
	valor seja negativo ou a variação passiva caso seja positivo. */
select	max(cd_moeda),
	max(vl_cotacao)
into STRICT	cd_moeda_tit_w,
	vl_cotacao_tit_w
from 	titulo_receber
where	nr_titulo = nr_titulo_p;
if (coalesce(cd_moeda_tit_w,0) <> 0 and coalesce(vl_cotacao_tit_w,0) <> 0
	and coalesce(cd_moeda_w,0) <> 0 and coalesce(vl_cotacao_w,0) <> 0) then
	if (cd_moeda_tit_w = cd_moeda_w) then
		vl_var_cambial_w := (coalesce(vl_baixa_estrang_w,0) * vl_cotacao_tit_w) - (coalesce(vl_baixa_estrang_w,0) * vl_cotacao_w);
		if (vl_var_cambial_w < 0) then
			vl_cambial_passivo_w := vl_var_cambial_w * -1;
			vl_cambial_ativo_w := 0;
		else
			vl_cambial_passivo_w := 0;
			vl_cambial_ativo_w := vl_var_cambial_w;
		end if;
	end if;
end if;

insert	into titulo_receber_liq(nr_titulo,
	nr_sequencia,
	dt_recebimento,
	vl_recebido,
	vl_descontos,
	vl_juros,
	vl_multa,
	vl_rec_maior,
	cd_moeda,
	dt_atualizacao,
	nm_usuario,
	cd_tipo_recebimento,
	ie_acao,
	cd_serie_nf_devol,
	nr_nota_fiscal_devol,
	cd_banco,
	cd_agencia_bancaria,
	nr_documento,
	nr_lote_banco,
	cd_cgc_emp_cred,
	nr_cartao_cred,
	nr_adiantamento,
	nr_lote_contabil,
	nr_seq_trans_fin,
	ie_lib_caixa,
	nr_seq_conta_banco,
	cd_centro_custo_desc,
	nr_seq_motivo_desc,
	vl_perdas,
	vl_nota_credito,
	nr_lote_contab_antecip,
	nr_lote_contab_pro_rata,
	vl_glosa,
	vl_recebido_estrang,
	vl_complemento,
	vl_cotacao,
	vl_cambial_passivo,
	vl_cambial_ativo)
values (nr_titulo_p,
	nr_seq_baixa_w,
	coalesce(dt_recebimento_p, trunc(clock_timestamp(),'dd')),
	coalesce(vl_baixa_w,0),
	0,
	coalesce(vl_juros_w,0),
	coalesce(vl_multa_w,0),
	coalesce(vl_rec_maior_w,0),
	coalesce(cd_moeda_w,cd_moeda_padrao_w),  -- Projeto Multimoeda - grava a moeda do depósito, caso não tenha grava a moeda padrão
	clock_timestamp(),
	nm_usuario_p,
	cd_tipo_recebimento_p,
	'I',
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	null,
	0,
	nr_seq_trans_financ_p,
	'S',
	nr_seq_conta_banco_w,
	cd_centro_custo_desc_w,
	nr_seq_motivo_desc_w,
	0,
	0,
	0,
	0,
	0,
	vl_baixa_estrang_w,
	vl_complemento_w,
	vl_cotacao_w,
	vl_cambial_passivo_w,
	vl_cambial_ativo_w);

CALL pls_gerar_amortizacao_regra(nr_titulo_p, nr_seq_baixa_w, nm_usuario_p, 'N');

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baixa_titulo_receber_dep_ident ( cd_estabelecimento_p bigint, cd_tipo_recebimento_p bigint, nr_titulo_p bigint, nr_seq_trans_financ_p bigint, vl_baixa_p bigint, dt_recebimento_p timestamp, nm_usuario_p text, nr_seq_deposito_p bigint, vl_devolver_p bigint, vl_juros_p bigint, vl_multa_p bigint, ie_tipo_baixa_p text) FROM PUBLIC;

