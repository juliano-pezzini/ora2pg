-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE processar_deducao_conv_conta ( nr_interno_conta_p bigint, ie_separacao_conta_p text, nm_usuario_p text) AS $body$
DECLARE


/* Dados da conta */

cd_convenio_parametro_w		conta_paciente.cd_convenio_parametro%type;
cd_estabelecimento_w		conta_paciente.cd_estabelecimento%type;
vl_deduzido_conta_w		conta_paciente.vl_deduzido%type;
vl_max_coseguro_conta_w		conta_paciente.vl_maximo_coseguro%type := 0;
vl_calc_maximo_coseguro_w	conta_paciente.vl_maximo_coseguro%type := 0;
nr_atendimento_w		conta_paciente.nr_atendimento%type;
cd_categoria_parametro_w	conta_paciente.cd_categoria_parametro%type;

/* Dados da regra de calculo da conta */

qt_regras_w			bigint;
cd_proc_calculo_w		conv_regra_calculo_conta.cd_proc_calculo%type;
ie_orig_proc_calculo_w		conv_regra_calculo_conta.ie_orig_proc_calculo%type;
ie_tipo_calculo_w		conv_regra_calculo_conta.ie_tipo_calculo%type;
ds_calculo_w			conv_regra_calculo_conta.ds_calculo%type;
vl_desconto_deduzido_w		conv_regra_calculo_conta.vl_desconto_deduzido%type;
pr_imposto_w			conv_regra_calculo_conta.pr_imposto%type;
ie_base_imposto_w			conv_regra_calculo_conta.ie_base_imposto%type;
ie_considera_maximo_w		conv_regra_calculo_conta.ie_considera_maximo%type;


/* valores base e impostos */

vl_honorario_conta_w		double precision;
vl_base_com_imposto_w		double precision;
vl_base_sem_imposto_w		double precision;

/* Dados primeiro atendimento paciente unidade */

cd_setor_atendimento_w		atend_paciente_unidade.cd_setor_atendimento%type;
dt_entrada_unidade_w		atend_paciente_unidade.dt_entrada_unidade%type;
nr_seq_atepacu_w		atend_paciente_unidade.nr_seq_interno%type;

/* Dados do parâmetro faturamento*/

cd_convenio_partic_w		parametro_faturamento.cd_convenio_partic%type;
cd_categoria_partic_w		parametro_faturamento.cd_categoria_partic %type;

/* Sequências para lançamentos dos itens */

nr_seq_propaci_w		procedimento_paciente.nr_sequencia%type;
nr_seq_propaci_ww		procedimento_paciente.nr_sequencia%type;
nr_seq_conta_log_proc_w		conta_log_processamento.nr_sequencia%type;

/* Número da conta em que o item foi lançado */

nr_interno_conta_dest_w		procedimento_paciente.nr_interno_conta%type;

/* Data de inicio da conta */

dt_procedimento_w		procedimento_paciente.dt_procedimento%type;

/* Número da conta se separação */

nr_interno_conta_sep_w		conta_paciente.nr_interno_conta%type;

/*Número da conta particular que irá receber os itens, nos casos em que não for possível criar de forma automática*/

ie_possui_conta_item_w		varchar(1);
nr_interno_conta_partic_w	conta_paciente.nr_interno_conta%type;

/*Váriaveis utilizadas para o rateio, no caso do preenchimento do campo valor máximo do coseguro*/

vl_proced_hosp_w		procedimento_paciente.vl_procedimento%type;
vl_proced_honor_w		procedimento_paciente.vl_procedimento%type;
vl_proced_nivel_hosp_w		procedimento_paciente.vl_procedimento%type;
vl_total_coseguro_w		procedimento_paciente.vl_procedimento%type;
vl_proced_hosp_rat_w		procedimento_paciente.vl_procedimento%type;
vl_proced_honor_rat_w		procedimento_paciente.vl_procedimento%type;
vl_proced_nivel_hosp_rat_w	procedimento_paciente.vl_procedimento%type;

/*Informações dos valores do processsamento informados na opção definir valores conta*/

ie_tipo_calculo_inf_w		conta_pac_deducao_conv.ie_tipo_calculo%type;
pr_informado_calculo_w		conta_pac_deducao_conv.pr_informado_calculo%type;
vl_informado_calculo_w		conta_pac_deducao_conv.vl_informado_calculo%type;
vl_informado_desconto_w		conta_pac_deducao_conv.vl_informado_desconto%type;
nr_seq_deducao_conv_w		conta_pac_deducao_conv.nr_sequencia%type;
nr_seq_inf_desconto_w		conta_pac_deducao_conv.nr_sequencia%type;
nr_seq_inf_hosp_w		conta_pac_deducao_conv.nr_sequencia%type;
nr_seq_inf_honor_w		conta_pac_deducao_conv.nr_sequencia%type;
nr_seq_inf_nivel_hosp_w		conta_pac_deducao_conv.nr_sequencia%type;
vl_maximo_informado_w		conta_pac_deducao_conv.vl_informado_calculo%type;
vl_total_maximo_w			conta_pac_deducao_conv.vl_calculado%type;

pr_imposto_total_w	double precision	:= 0;
pr_imposto_calc_w	double precision	:= 0;
qt_imposto_w	integer	:= 0;
ie_coseguro_max_w	varchar(1)	:= 'N';
vl_sem_imposto_w	double precision;
vl_com_imposto_w	double precision;
ie_ordem_w			integer;
ds_lista_deducao_w	varchar(255);
nr_seq_deducao_w	conta_pac_deducao_conv.nr_sequencia%type;

/* Dominio 7408 - Tipo de regra 'Cálculo Conta'
	'D' - Deduzido (Franquia)
	'H' - Coseguro Hospital
	'N' - Coseguro Honorário
	'A' - Coseguro Nivel Hospital
	'T' - Coaseguro topado
*/
c01 CURSOR FOR
SELECT	1 ie_ordem,
		(select	max(x.nr_sequencia)
		from	conta_pac_deducao_conv x
		where	x.nr_seq_conta_orig = nr_interno_conta_p
		and		x.ie_tipo_calculo = a.ie_tipo_calculo) nr_seq_deducao,
		cd_proc_calculo,
		ie_orig_proc_calculo,
		ie_tipo_calculo,
		ds_calculo,
		vl_desconto_deduzido,
		pr_imposto,
		ie_base_imposto,
		null vl_maximo,
		ie_considera_maximo
from	conv_regra_calculo_conta a
where	cd_convenio		= cd_convenio_parametro_w
and		cd_estabelecimento	= cd_estabelecimento_w
and		ie_situacao		= 'A'
and		ie_tipo_calculo in ('D', 'H', 'N', 'A')
and		dt_procedimento_w between dt_inicio_vigencia and coalesce(dt_final_vigencia,clock_timestamp())
and (exists (select	1
				from	conta_pac_deducao_conv x
				where	x.ie_tipo_calculo	= a.ie_tipo_calculo
				and		x.nr_seq_conta_orig = nr_interno_conta_p) or
		not exists (select	1
					from	conta_pac_deducao_conv x
					where	x.nr_seq_conta_orig = nr_interno_conta_p))

union all

/* Default - With no rule */

select	1 ie_ordem,
		a.nr_sequencia nr_seq_deducao,
		null cd_proc_calculo,
		null ie_orig_proc,
		ie_tipo_calculo,
		'NO_RULE' ds_calculo,
		null vl_desconto_deduzido,
		(100 + coalesce(c.pr_imposto,0)) / 100 pr_imposto,
		CASE WHEN c.pr_imposto=0 THEN 'BSI'  ELSE 'BCI' END  ie_base_imposto,
		a.vl_informado_calculo,
		CASE WHEN a.ie_tipo_calculo='H' THEN 'N' WHEN a.ie_tipo_calculo='S' THEN 'N' END  ie_considera_maximo
FROM conta_pac_deducao_conv a, procedimento_paciente b
LEFT OUTER JOIN propaci_imposto c ON (b.nr_sequencia = c.nr_seq_propaci)
WHERE a.nr_seq_conta_orig = nr_interno_conta_p and b.nr_interno_conta = a.nr_seq_conta_orig  and ie_tipo_calculo <> 'T' and not exists (select	1
					from	conv_regra_calculo_conta x
					where	x.cd_convenio = cd_convenio_parametro_w
					and		cd_estabelecimento	= cd_estabelecimento_w
					and		x.ie_situacao = 'A'
					and		x.ie_tipo_calculo = a.ie_tipo_calculo) group by
		a.nr_sequencia,
		a.vl_informado_calculo,
		a.ie_tipo_calculo,
		c.pr_imposto

union all

select	1 ie_ordem,
		a.nr_sequencia nr_seq_deducao,
		null cd_proc_calculo,
		null ie_orig_proc,
		ie_tipo_calculo,
		'NO_RULE' ds_calculo,
		null vl_desconto_deduzido,
		(100 + coalesce(c.pr_imposto,0)) / 100 pr_imposto,
		CASE WHEN c.pr_imposto=0 THEN 'BSI'  ELSE 'BCI' END  ie_base_imposto,
		a.vl_informado_calculo,
		CASE WHEN a.ie_tipo_calculo='H' THEN 'N' WHEN a.ie_tipo_calculo='S' THEN 'N' END  ie_considera_maximo
FROM conta_pac_deducao_conv a, material_atend_paciente b
LEFT OUTER JOIN matpaci_imposto c ON (b.nr_sequencia = c.nr_seq_matpaci)
WHERE a.nr_seq_conta_orig = nr_interno_conta_p and b.nr_interno_conta = a.nr_seq_conta_orig  and ie_tipo_calculo <> 'T' and not exists (select	1
					from	conv_regra_calculo_conta x
					where	x.cd_convenio = cd_convenio_parametro_w
					and		cd_estabelecimento	= cd_estabelecimento_w
					and		x.ie_situacao = 'A'
					and		x.ie_tipo_calculo = a.ie_tipo_calculo) group by
		a.nr_sequencia,
		a.vl_informado_calculo,
		a.ie_tipo_calculo,
		c.pr_imposto

union all

/* Maximum value - No macro necessary */

select	2 ie_ordem,
		nr_sequencia nr_seq_deducao,
		null cd_proc_calculo,
		null ie_orig_proc,
		ie_tipo_calculo,
		null ds_calculo,
		null vl_desconto_deduzido,
		null pr_imposto,
		null ie_base_imposto,
		vl_informado_calculo,
		null ie_considera_maximo
from	conta_pac_deducao_conv
where	nr_seq_conta_orig = nr_interno_conta_p
and		ie_tipo_calculo = 'T'
order by	ie_ordem;

c02 CURSOR FOR
SELECT	ie_tipo_calculo,
		nr_sequencia,
		coalesce(pr_informado_calculo,0) / 100,
		coalesce(vl_informado_calculo,0)
from	conta_pac_deducao_conv
where	nr_seq_conta_orig = nr_interno_conta_p;


BEGIN

select	max(cd_convenio_parametro),
	max(cd_estabelecimento),
	max(vl_deduzido),
	max(nr_atendimento),
	max(cd_categoria_parametro),
	max(coalesce(vl_maximo_coseguro,0))
into STRICT	cd_convenio_parametro_w,
	cd_estabelecimento_w,
	vl_deduzido_conta_w,
	nr_atendimento_w,
	cd_categoria_parametro_w,
	vl_max_coseguro_conta_w
from	conta_paciente
where	nr_interno_conta = nr_interno_conta_p;

/*select	sum(qt)
into	qt_regras_w
from	(select	1 qt
	from	conv_regra_calculo_conta
	where	cd_convenio		= cd_convenio_parametro_w
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_situacao		= 'A'
	and	ie_tipo_calculo = 'D'
	and	sysdate between dt_inicio_vigencia and nvl(dt_final_vigencia,sysdate)
	union all
	select	1 qt
	from	conv_regra_calculo_conta
	where	cd_convenio		= cd_convenio_parametro_w
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_situacao		= 'A'
	and	ie_tipo_calculo = 'H'
	and	sysdate between dt_inicio_vigencia and nvl(dt_final_vigencia,sysdate)
	union all
	select	1 qt
	from	conv_regra_calculo_conta
	where	cd_convenio		= cd_convenio_parametro_w
	and	cd_estabelecimento	= cd_estabelecimento_w
	and	ie_situacao		= 'A'
	and	ie_tipo_calculo = 'N'
	and	sysdate between dt_inicio_vigencia and nvl(dt_final_vigencia,sysdate));

if	(qt_regras_w <> 6) and
	(qt_regras_w <> 3)then
	wheb_mensagem_pck.exibir_mensagem_abort(310776);
end if;*/
select	coalesce(sum(coalesce(a.vl_medico,0)),0)
into STRICT	vl_honorario_conta_w
from	procedimento_paciente a,
		procedimento b
where	nr_interno_conta = nr_interno_conta_p
and		b.cd_procedimento = a.cd_procedimento
and		b.ie_origem_proced = a.ie_origem_proced
and		b.cd_tipo_procedimento = 135; -- 135 = Honorário Médico
select	coalesce(sum(coalesce(vl,0)),0)
into STRICT	vl_base_sem_imposto_w
from (SELECT	coalesce(a.vl_procedimento,0) vl
	from	procedimento_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	coalesce(a.nr_seq_proc_pacote::text, '') = ''
	and	not exists (	select	1
			from	propaci_imposto x
			where	x.nr_seq_propaci = a.nr_sequencia
			and	x.pr_imposto > 0)
	
union all

	SELECT	coalesce(a.vl_material,0) vl
	from	material_atend_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	coalesce(a.nr_seq_proc_pacote::text, '') = ''
	and	not exists (	select	1
			from	matpaci_imposto x
			where	x.nr_seq_matpaci = a.nr_sequencia
			and	x.pr_imposto > 0)) alias9;

select	coalesce(sum(coalesce(vl,0)),0)
into STRICT	vl_base_com_imposto_w
from (SELECT	coalesce(a.vl_procedimento,0) vl
	from	procedimento_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	exists (	select	1
			from	propaci_imposto y
			where	y.nr_seq_propaci = a.nr_sequencia
			and	y.pr_imposto > 0)
	
union all

	SELECT	coalesce(a.vl_material,0) vl
	from	material_atend_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	exists (	select	1
			from	matpaci_imposto x
			where	x.nr_seq_matpaci = a.nr_sequencia
			and	x.pr_imposto > 0)) alias7;

select	obter_atepacu_paciente(nr_atendimento_w,'P')
into STRICT	nr_seq_atepacu_w
;

select	max(cd_setor_atendimento),
	max(dt_entrada_unidade)
into STRICT	cd_setor_atendimento_w,
	dt_entrada_unidade_w
from	atend_paciente_unidade
where	nr_seq_interno = nr_seq_atepacu_w;

select	max(cd_convenio_partic),
	max(cd_categoria_partic)
into STRICT	cd_convenio_partic_w,
	cd_categoria_partic_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

dt_procedimento_w := clock_timestamp();
nr_interno_conta_sep_w := null;

select 	coalesce(min(dt_periodo_inicial),dt_procedimento_w)
into STRICT	dt_procedimento_w
from 	conta_paciente
where 	nr_interno_conta = nr_interno_conta_p;

if (ie_separacao_conta_p = 'S') then
	nr_interno_conta_sep_w := nr_interno_conta_p;
end if;

CALL processar_conta_pck.set_vl_honorario_conta(vl_honorario_conta_w);
CALL processar_conta_pck.set_vl_base_com_imposto(vl_base_com_imposto_w);
CALL processar_conta_pck.set_vl_base_sem_imposto(vl_base_sem_imposto_w);
CALL processar_conta_pck.set_vl_conta(vl_base_sem_imposto_w + vl_base_com_imposto_w);

CALL processar_conta_pck.set_vl_deduzido_conta(0);

open c02;
loop
	fetch	c02
	into	ie_tipo_calculo_inf_w,
		nr_seq_deducao_conv_w,
		pr_informado_calculo_w,
		vl_informado_calculo_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
	begin

	if (ie_tipo_calculo_inf_w = 'D') then
		nr_seq_inf_desconto_w	:= nr_seq_deducao_conv_w;

		CALL processar_conta_pck.set_vl_deduzido_conta(vl_informado_calculo_w);
	elsif (ie_tipo_calculo_inf_w = 'H') then
		nr_seq_inf_hosp_w	:= nr_seq_deducao_conv_w;

		CALL processar_conta_pck.set_pr_coseg_hosp_conta(pr_informado_calculo_w);
		CALL processar_conta_pck.set_vl_coseg_hosp_conta(vl_informado_calculo_w);
	elsif (ie_tipo_calculo_inf_w = 'N') then
		nr_seq_inf_honor_w	:= nr_seq_deducao_conv_w;

		CALL processar_conta_pck.set_pr_coseg_honor_conta(pr_informado_calculo_w);
		CALL processar_conta_pck.set_vl_coseg_honor_conta(vl_informado_calculo_w);
	elsif (ie_tipo_calculo_inf_w = 'A') then
		nr_seq_inf_nivel_hosp_w	:= nr_seq_deducao_conv_w;

		CALL processar_conta_pck.set_pr_coseg_nivel_hosp_conta(pr_informado_calculo_w);
		CALL processar_conta_pck.set_vl_coseg_nivel_hosp_conta(vl_informado_calculo_w);
	end if;
	end;
end loop;
close c02;

CALL processar_conta_pck.set_vl_max_coseguro_conta(vl_max_coseguro_conta_w);

-- Criar a conta que irá receber os itens
if (cd_convenio_partic_w IS NOT NULL AND cd_convenio_partic_w::text <> '') then
	select	max(a.nr_interno_conta)
	into STRICT	nr_interno_conta_partic_w
	from	conta_paciente a
	where	a.nr_atendimento	= nr_atendimento_w
	and		a.ie_status_acerto	= 1
	and		a.cd_convenio_parametro	= cd_convenio_partic_w;

	if (coalesce(nr_interno_conta_partic_w::text, '') = '') then
		select	nextval('conta_paciente_seq')
		into STRICT	nr_interno_conta_partic_w
		;

		insert into conta_paciente(nr_atendimento,
			dt_acerto_conta,
			ie_status_acerto,
			dt_periodo_inicial,
			dt_periodo_final,
			dt_atualizacao,
			nm_usuario,
			cd_convenio_parametro,
			cd_categoria_parametro,
			dt_mesano_referencia,
			dt_mesano_contabil,
			cd_convenio_calculo,
			cd_categoria_calculo,
			nr_interno_conta,
			cd_estabelecimento,
			nr_seq_pq_protocolo,
			cd_autorizacao,
			ie_tipo_atend_conta,
			ie_tipo_fatur_tiss,
			ie_tipo_guia)
		SELECT	nr_atendimento,
			dt_acerto_conta,
			1,
			dt_periodo_inicial,
			dt_periodo_final,
			clock_timestamp(),
			nm_usuario_p,
			cd_convenio_partic_w,
			cd_categoria_partic_w,
			dt_mesano_referencia,
			dt_mesano_referencia,
			cd_convenio_partic_w,
			cd_categoria_partic_w,
			nr_interno_conta_partic_w,
			cd_estabelecimento,
			nr_seq_pq_protocolo,
			cd_autorizacao,
			ie_tipo_atend_conta,
			ie_tipo_fatur_tiss,
			ie_tipo_guia
		from	conta_paciente
		where	nr_interno_conta = nr_interno_conta_p;
	end if;
end if;

/*Gerar os valores de coaseguro e deducible na tabela nova*/

vl_total_maximo_w	:= 0;
ds_lista_deducao_w	:= null;
open c01;
loop
	fetch	c01
	into
		ie_ordem_w,
		nr_seq_deducao_w,
		cd_proc_calculo_w,
		ie_orig_proc_calculo_w,
		ie_tipo_calculo_w,
		ds_calculo_w,
		vl_desconto_deduzido_w,
		pr_imposto_w,
		ie_base_imposto_w,
		vl_maximo_informado_w,
		ie_considera_maximo_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	if (ie_ordem_w = 1) then
		CALL processar_conta_pck.set_vl_imposto(vl_base_com_imposto_w * pr_imposto_w);
		CALL processar_conta_pck.set_vl_desconto_deduzido(vl_desconto_deduzido_w);
		CALL processar_conta_pck.set_pr_imposto(pr_imposto_w);
		CALL processar_conta_pck.set_ie_tipo_calculo(ie_tipo_calculo_w);

		/* When no rule */

		if (ds_calculo_w = 'NO_RULE') then
			if (ie_tipo_calculo_w = 'H') then
				if (ie_base_imposto_w = 'BCI') then
					ds_calculo_w	:= '((@VL_ITEM_IMPOSTO - ((@VL_DEDUZIDO * ((@VL_ITEM_IMPOSTO/@VL_CONTA))) / @PR_IMPOSTO) ) * @PR_COSEG_HOSP_CONTA)';
				else
					ds_calculo_w	:= '((@VL_ITEM_SEM_IMPOSTO - (@VL_DEDUZIDO * (@VL_ITEM_SEM_IMPOSTO/@VL_CONTA))) * @PR_COSEG_HOSP_CONTA)';
				end if;
			elsif (ie_tipo_calculo_w = 'N') then
				if (ie_base_imposto_w = 'BCI') then
					ds_calculo_w	:= '(@VL_MEDICO * @PR_COSEG_HONOR_CONTA) * (@VL_ITEM_IMPOSTO/@VL_CONTA) / @PR_IMPOSTO';
				else
					ds_calculo_w	:= '(@VL_MEDICO * @PR_COSEG_HONOR_CONTA) * (@VL_ITEM_SEM_IMPOSTO/@VL_CONTA)';
				end if;
			elsif (ie_tipo_calculo_w = 'A') then
				if (ie_base_imposto_w = 'BCI') then
					ds_calculo_w	:= '@VL_ITEM_IMPOSTO * @PR_COSEG_NIVEL_HOSP_CONTA';
				else
					ds_calculo_w	:= '@VL_ITEM_SEM_IMPOSTO * @PR_COSEG_NIVEL_HOSP_CONTA';
				end if;
			elsif (ie_tipo_calculo_w = 'D') then
				if (ie_base_imposto_w = 'BCI') then
					ds_calculo_w	:= '((@VL_DEDUZIDO * ((@VL_ITEM_IMPOSTO/@VL_CONTA))) / @PR_IMPOSTO)';
				else
					ds_calculo_w	:= '(@VL_DEDUZIDO * (@VL_ITEM_SEM_IMPOSTO/@VL_CONTA))';
				end if;
			end if;
		end if;

		CALL processar_conta_macro(ds_calculo_w, 'P');

		if (ie_tipo_calculo_w = 'D') then
			CALL atualizar_deducao_conv_conta(nr_seq_inf_desconto_w, processar_conta_pck.get_vl_procedimento,ie_base_imposto_w, nr_interno_conta_partic_w, nm_usuario_p);
		elsif (ie_tipo_calculo_w = 'H') then
			CALL atualizar_deducao_conv_conta(nr_seq_inf_hosp_w, processar_conta_pck.get_vl_procedimento,ie_base_imposto_w, nr_interno_conta_partic_w, nm_usuario_p);
			vl_proced_hosp_w		:= processar_conta_pck.get_vl_procedimento;
		elsif (ie_tipo_calculo_w = 'N') then
			CALL atualizar_deducao_conv_conta(nr_seq_inf_honor_w, processar_conta_pck.get_vl_procedimento,ie_base_imposto_w, nr_interno_conta_partic_w, nm_usuario_p);
			vl_proced_honor_w		:= processar_conta_pck.get_vl_procedimento;
		elsif (ie_tipo_calculo_w = 'A') then
			CALL atualizar_deducao_conv_conta(nr_seq_inf_nivel_hosp_w, processar_conta_pck.get_vl_procedimento,ie_base_imposto_w, nr_interno_conta_partic_w, nm_usuario_p);
			vl_proced_nivel_hosp_w		:= processar_conta_pck.get_vl_procedimento;
		end if;

		if (ie_considera_maximo_w = 'S') then
			if (ie_base_imposto_w = 'BCI') and (pr_imposto_w > 0) then
				vl_total_maximo_w	:= vl_total_maximo_w + (processar_conta_pck.get_vl_procedimento * pr_imposto_w);
			else
				vl_total_maximo_w	:= vl_total_maximo_w + processar_conta_pck.get_vl_procedimento;
			end if;

			ds_lista_deducao_w	:= ds_lista_deducao_w || ',' || nr_seq_deducao_w || ',';
		end if;

		if (pr_imposto_w > 0) then
			pr_imposto_total_w	:= pr_imposto_total_w + pr_imposto_w;
			qt_imposto_w		:= qt_imposto_w + 1;
		end if;
	/* Valor topado - coaseguro máximo */

	elsif (ie_ordem_w = 2) then

		if (vl_total_maximo_w > vl_maximo_informado_w) then
			pr_imposto_calc_w	:= dividir_sem_round(pr_imposto_total_w,qt_imposto_w);


			update	conta_pac_deducao_conv
			set		nm_usuario		= nm_usuario_p,
					dt_atualizacao	= clock_timestamp(),
					vl_calculado_com_imp = dividir_sem_round(vl_maximo_informado_w * dividir_sem_round(vl_base_com_imposto_w,vl_base_sem_imposto_w + vl_base_com_imposto_w),pr_imposto_calc_w),
					vl_calculado_sem_imp = vl_maximo_informado_w * dividir_sem_round(vl_base_sem_imposto_w,vl_base_sem_imposto_w + vl_base_com_imposto_w),
					nr_seq_conta_des = nr_interno_conta_partic_w,
					dt_processamento	= clock_timestamp()
			where	nr_sequencia	= nr_seq_deducao_w;

			update	conta_pac_deducao_conv
			set		vl_calculado = vl_calculado_com_imp + vl_calculado_sem_imp
			where	nr_sequencia	= nr_seq_deducao_w;

			/* Zerar os valores calculados, porque será considerado o topado */

			update	conta_pac_deducao_conv
			set		vl_calculado = 0,
					vl_calculado_com_imp = 0,
					vl_calculado_sem_imp = 0
			where	nr_seq_conta_des = nr_interno_conta_partic_w
			and		ds_lista_deducao_w like ',%' || nr_sequencia || ',%';
		else
			update	conta_pac_deducao_conv
			set		nm_usuario		= nm_usuario_p,
					dt_atualizacao	= clock_timestamp(),
					vl_calculado	= 0,
					vl_calculado_com_imp = 0,
					vl_calculado_sem_imp = 0,
					dt_processamento	= clock_timestamp()
			where	nr_sequencia	= nr_seq_deducao_w;
		end if;
	end if;
	end;
end loop;
close c01;

/*Ratear os valores de coaseguro e deducible entre os itens, e armazenar na tabela nova*/

CALL ratear_deducao_conv_conta(nr_interno_conta_p,
					nr_interno_conta_partic_w,
					vl_base_com_imposto_w,
					vl_base_sem_imposto_w,
					vl_honorario_conta_w,
					ie_coseguro_max_w,
					pr_imposto_total_w,
					nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE processar_deducao_conv_conta ( nr_interno_conta_p bigint, ie_separacao_conta_p text, nm_usuario_p text) FROM PUBLIC;

