-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE nut_gerar_servicos_horario ( nr_atendimento_p bigint, cd_setor_atendimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) AS $body$
DECLARE

 
nr_seq_dieta_w		bigint;
nr_seq_atend_serv_dia_w	bigint;
nr_seq_atend_dia_orig_w	bigint;
nr_seq_servico_orig_w	bigint;
nr_seq_serv_dieta_w	bigint;
ds_horarios_w		varchar(2000);
ie_tipo_nutricao_w	varchar(15);
dt_servico_orig_w	timestamp;
dt_servico_w		timestamp;
dt_servico_ant_w	timestamp;
lista_informacao_w	varchar(1000);
ie_contador_w		bigint	:= 0;
tam_lista_w		bigint;
ie_pos_espaco_w		smallint;
ds_hora_w		varchar(10);
hr_prim_horario_w	varchar(5);
ie_data_atualizada_w	varchar(1);
qt_atend_serv_dia_w	bigint;
ds_observacao_w		varchar(4000);
ie_servico_horarios_w	varchar(1);
ie_libera_servicos_w	varchar(1);
nr_prescricao_w		bigint;
nr_seq_serv_rep_w	bigint;
nr_seq_servico_w	bigint;
					
C01 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		a.ds_horarios, 
		a.ie_tipo_nutricao, 
		coalesce(a.hr_prim_horario,'00:00'), 
		a.ds_observacao 
	from	nut_atend_serv_dia_dieta a 
	where	coalesce(a.dt_liberacao::text, '') = '' 
	and	exists (SELECT	1 
			from	nut_atend_serv_dieta b,           
				nut_atend_serv_dia c 
			where	b.nr_seq_servico = c.nr_sequencia        
			and	a.nr_sequencia = b.nr_seq_dieta 
			and	c.nr_atendimento = nr_atendimento_p 		     
			and	c.dt_servico between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) 		     
			and	c.cd_setor_atendimento = cd_setor_atendimento_p) 
	order by 1;
	
C02 CURSOR FOR 
	SELECT	c.nr_sequencia 
	from	nut_atend_serv_dia c, 
		nut_atend_serv_dieta b 
	where	b.nr_seq_servico = c.nr_sequencia 
	and	b.nr_seq_dieta = nr_seq_dieta_w 
	order by 1;
	
C03 CURSOR FOR 
	SELECT	b.nr_sequencia 
	from	nut_atend_serv_dia c, 
		nut_atend_serv_dieta b 
	where	b.nr_seq_servico = c.nr_sequencia 
	and	b.nr_seq_dieta = nr_seq_dieta_w 
	and	c.ie_data_atualizada = 'S' 
	and	c.nr_atendimento = nr_atendimento_p 
	and	c.dt_servico between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) 
	and	c.cd_setor_atendimento = cd_setor_atendimento_p 
	and	(b.nr_sequencia <> (	SELECT	max(e.nr_sequencia) 
					from	nut_atend_serv_dieta e 
					where	e.nr_seq_servico = c.nr_sequencia) 
	or 	exists (select	1 
			from	nut_atend_serv_dia_dieta f, 
				nut_atend_serv_dieta g 
			where	f.nr_sequencia = g.nr_seq_dieta 
			and	g.nr_seq_servico = c.nr_sequencia 
			and	(f.dt_liberacao IS NOT NULL AND f.dt_liberacao::text <> '') 
			and	g.nr_sequencia <> b.nr_sequencia)) 
	and not exists (select	1 
			from	nut_atend_serv_dia_dieta d 
			where	d.nr_sequencia = b.nr_seq_dieta 
			and	(d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> '')) 
	order by 1;
	
	 
C04 CURSOR FOR 
	SELECT	a.nr_prescricao 
	from	prescr_medica a, 
		nut_atend_serv_dia_rep b 
	where	a.nr_prescricao in (	b.nr_prescr_oral,	b.nr_prescr_jejum, 
					b.nr_prescr_compl,	b.nr_prescr_enteral, 
					b.nr_prescr_npt_adulta,	b.nr_prescr_npt_ped, 
					b.nr_prescr_npt_neo,	b.nr_prescr_leite_deriv) 
	and	b.nr_seq_serv_dia = nr_seq_atend_dia_orig_w;
			

BEGIN 
 
ie_servico_horarios_w	:= Obter_Valor_Param_Usuario(1003, 91, Obter_perfil_Ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento);
ie_libera_servicos_w	:= Obter_Valor_Param_Usuario(1003, 105, Obter_perfil_Ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento);
 
open C01;
loop 
fetch C01 into	 
	nr_seq_dieta_w, 
	ds_horarios_w, 
	ie_tipo_nutricao_w, 
	hr_prim_horario_w, 
	ds_observacao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	 
	if (ie_tipo_nutricao_w <> 'O') and (ie_tipo_nutricao_w <> 'L') and (ds_horarios_w IS NOT NULL AND ds_horarios_w::text <> '') and (ie_servico_horarios_w = 'S') then 
	 
		open C02;
		loop 
		fetch C02 into	 
			nr_seq_atend_dia_orig_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin 
			 
			select	nr_seq_servico, 
				dt_servico, 
				coalesce(ie_data_atualizada,'N') 
			into STRICT	nr_seq_servico_orig_w, 
				dt_servico_orig_w, 
				ie_data_atualizada_w 
			from	nut_atend_serv_dia 
			where	nr_sequencia = nr_seq_atend_dia_orig_w;
			 
			lista_informacao_w 	:= Padroniza_horario_prescr(ds_horarios_w,to_char(to_date(to_char(dt_servico_orig_w,'dd/mm/yyyy ')||hr_prim_horario_w,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss'));
			ie_contador_w		:= 0;
			 
			while	(lista_informacao_w IS NOT NULL AND lista_informacao_w::text <> '') and 
				ie_contador_w < 200 loop 
				begin 
				ie_pos_espaco_w	:= position(' ' in lista_informacao_w);
				if (ie_pos_espaco_w > 1) then 
					ds_hora_w		:= substr(lista_informacao_w,1,ie_pos_espaco_w-1);
					lista_informacao_w	:= substr(lista_informacao_w,ie_pos_espaco_w + 1,2000);
				elsif (lista_informacao_w IS NOT NULL AND lista_informacao_w::text <> '') then 
					ds_hora_w 		:= replace(lista_informacao_w,' ','');
					lista_informacao_w	:= '';
				end if;
 
				if (substr(upper(ds_hora_w),1,2) = 'AA') then 
					dt_servico_w	:= To_date(to_char(dt_servico_orig_w + 2,'dd/mm/yyyy ')||substr(ds_hora_w,3,6),'dd/mm/yyyy hh24:mi');
				elsif (substr(upper(ds_hora_w),1,1) = 'A') then 
					dt_servico_w	:= To_date(to_char(dt_servico_orig_w + 1,'dd/mm/yyyy ')||substr(ds_hora_w,2,5),'dd/mm/yyyy hh24:mi');
				else 
					dt_servico_w	:= To_date(to_char(dt_servico_orig_w,'dd/mm/yyyy ')||ds_hora_w,'dd/mm/yyyy hh24:mi');
				end if;
				 
				if (ie_contador_w = 0) and (ie_data_atualizada_w = 'N') then 
					 
					update	nut_atend_serv_dia 
					set	dt_servico = dt_servico_w, 
						dt_atualizacao = clock_timestamp(), 
						nm_usuario = nm_usuario_p, 
						ie_data_atualizada = 'S', 
						ds_observacao = ds_observacao_w 
					where	nr_sequencia = nr_seq_atend_dia_orig_w;
										 
					insert into nut_atend_serv_dieta(	 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_servico, 
						nr_seq_dieta) 
					values (	nextval('nut_atend_serv_dieta_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_atend_dia_orig_w, 
						nr_seq_dieta_w);
					 
				else 
				 
					select	count(*) 
					into STRICT	qt_atend_serv_dia_w 
					from	nut_atend_serv_dia a 
					where	a.nr_seq_servico = nr_seq_servico_orig_w 
					and	a.dt_servico = dt_servico_w 
					and	a.cd_setor_atendimento = cd_setor_atendimento_p 
					and	a.nr_atendimento = nr_atendimento_p 
					and 	exists (SELECT	1 
							from	nut_atend_serv_dieta b 
							where	b.nr_seq_servico = a.nr_sequencia 
							and	b.nr_seq_dieta = nr_seq_dieta_w) 
					and not exists (select	1 
							from	nut_atend_serv_dieta c, 
								nut_atend_serv_dia_dieta d 
							where	c.nr_seq_dieta = d.nr_sequencia 
							and	c.nr_seq_servico = a.nr_sequencia 
							and	c.nr_seq_dieta <> nr_seq_dieta_w 
							and	(d.dt_liberacao IS NOT NULL AND d.dt_liberacao::text <> ''));
				 
					if (qt_atend_serv_dia_w = 0) then 
						select	nextval('nut_atend_serv_dia_seq') 
						into STRICT	nr_seq_atend_serv_dia_w 
						;
						 
						insert into nut_atend_serv_dia(	 
							nr_sequencia, 
							dt_atualizacao, 
							nm_usuario, 
							dt_atualizacao_nrec, 
							nm_usuario_nrec, 
							nr_seq_servico, 
							dt_servico, 
							cd_setor_atendimento, 
							nr_atendimento, 
							ie_data_atualizada, 
							ds_observacao) 
						values (	nr_seq_atend_serv_dia_w, 
							clock_timestamp(), 
							nm_usuario_p, 
							clock_timestamp(), 
							nm_usuario_p, 
							nr_seq_servico_orig_w, 
							dt_servico_w, 
							cd_setor_atendimento_p, 
							nr_atendimento_p, 
							'S', 
							ds_observacao_w);						
				 
						insert into nut_atend_serv_dieta(	 
							nr_sequencia, 
							dt_atualizacao, 
							nm_usuario, 
							dt_atualizacao_nrec, 
							nm_usuario_nrec, 
							nr_seq_servico, 
							nr_seq_dieta) 
						values (	nextval('nut_atend_serv_dieta_seq'), 
							clock_timestamp(), 
							nm_usuario_p, 
							clock_timestamp(), 
							nm_usuario_p, 
							nr_seq_atend_serv_dia_w, 
							nr_seq_dieta_w);
					 
						select	coalesce(max(nr_sequencia),0) 
						into STRICT	nr_seq_serv_rep_w 
						from	nut_atend_serv_dia_rep 
						where	nr_seq_serv_dia = nr_seq_atend_serv_dia_w 
						and	coalesce(dt_liberacao::text, '') = '';
						 
						open C04;
						loop 
						fetch C04 into 
							nr_prescricao_w;
						EXIT WHEN NOT FOUND; /* apply on C04 */
							begin 
							 
							CALL Definir_Prescricao_Nutricao(nr_prescricao_w, nr_seq_serv_rep_w, nr_seq_atend_serv_dia_w, 'T', nm_usuario_p);
							 
							end;
						end loop;
						close C04;	
					end if;
					 
				end if;		
				 
				ie_contador_w	:= ie_contador_w + 1;
				 
				end;
			end loop;
				 
		 
			end;
		end loop;
		close C02;
		 
		open C03;
		loop 
		fetch C03 into	 
			nr_seq_serv_dieta_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin 
			 
			delete	from nut_atend_serv_dieta 
			where	nr_sequencia = nr_seq_serv_dieta_w;
			 
			end;
		end loop;
		close C03;
 
	end if;	
	 
	update	nut_atend_serv_dia_dieta 
	set	dt_liberacao = clock_timestamp(), 
		nm_usuario_lib = nm_usuario_p 
	where	nr_sequencia = nr_seq_dieta_w;
	 
	if (ie_libera_servicos_w = 'S') then 
		open C02;
		loop 
		fetch C02 into	 
			nr_seq_atend_dia_orig_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin 
			CALL Liberar_Servico_Nutricao(nr_seq_atend_dia_orig_w, nm_usuario_p, 'L');
			end;
		end loop;
		close C02;
	end if;
	 
	end;
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nut_gerar_servicos_horario ( nr_atendimento_p bigint, cd_setor_atendimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text) FROM PUBLIC;

