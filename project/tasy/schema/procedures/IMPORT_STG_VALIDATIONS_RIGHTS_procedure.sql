-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE import_stg_validations_rights ( imp_id_p w_expression_import_stg.import_id%type, userid_p w_expression_import_log.nm_usuario%type ) AS $body$
DECLARE


    curs_imp_stg CURSOR FOR
    SELECT
        cd_expressao,
        ds_locale_new,
        ds_idioma,
        ds_expressao_new,
        dt_atualizacao,
        nm_usuario,
        nr_sequencia
    FROM
        w_expression_import_stg
    WHERE
        import_id = imp_id_p
        AND (ds_locale_new IS NOT NULL AND ds_locale_new::text <> '')
    ORDER BY
        cd_expressao,
        ds_idioma,
        ds_locale_new;

    cur_imp_stg           curs_imp_stg%rowtype;

    error_code_w          w_expression_import_stg.error_code%type := null;
    error_desc_w          w_expression_import_stg.error_desc%type := null;
    expr_cnt_w            dic_expressao_idioma.nr_sequencia%type := 0;
    locale_cnt_w          dic_expressao_idioma.nr_sequencia%type := 0;
    idioma_cnt_w          dic_expressao_idioma.nr_sequencia%type := 0;
    err_cnt_w             dic_expressao_idioma.nr_sequencia%type := 0;
    qt_total_w            dic_expressao_idioma.nr_sequencia%type := 0;
    new_expr_dup_cnt1_w   dic_expressao_idioma.nr_sequencia%type := 0;
    new_expr_dup_cnt2_w   dic_expressao_idioma.nr_sequencia%type := 0;
    dup_cnt_idioma_w      dic_expressao_idioma.nr_sequencia%type := 0;

    
    

BEGIN
    CALL log_expression_import_stg(imp_id_p, NULL, userid_p, 'Validation started', NULL, NULL);
    if (coalesce(imp_id_p::text, '') = '') then
        RAISE EXCEPTION 'invalid_param_e' USING ERRCODE = '50007';
    elsif (coalesce(userid_p::text, '') = '') then
        RAISE EXCEPTION 'invalid_param_e' USING ERRCODE = '50007';
    end if;

    delete from w_expression_import_stg where nm_usuario = userid_p and import_id <> imp_id_p;

    OPEN curs_imp_stg;
    LOOP BEGIN
        FETCH curs_imp_stg INTO cur_imp_stg;
        EXIT WHEN NOT FOUND; /* apply on curs_imp_stg */

        SELECT CASE WHEN EXISTS (
            SELECT cd_expressao
            FROM
                dic_expressao
            WHERE
                cd_expressao = cur_imp_stg.cd_expressao
        ) THEN 1 ELSE 0 END as cd_expr
        INTO STRICT expr_cnt_w
;

        SELECT CASE WHEN EXISTS (
            SELECT vl_dominio
            FROM
                valor_dominio_v
            WHERE
                cd_dominio = 8031
                AND vl_dominio = cur_imp_stg.ds_locale_new
                AND substr(vl_dominio, 1, 2) = cur_imp_stg.ds_idioma
        ) THEN 1 ELSE 0 END as vl_dominio
        INTO STRICT locale_cnt_w
;

        SELECT CASE WHEN EXISTS (
            SELECT ds_locale
            FROM
                dic_expressao_idioma
            WHERE
                cd_expressao = cur_imp_stg.cd_expressao
                AND ds_idioma = cur_imp_stg.ds_idioma
                AND ds_locale = cur_imp_stg.ds_locale_new
        ) THEN 1 ELSE 0 END as ds_locale
        INTO STRICT dup_cnt_idioma_w
;

        SELECT CASE WHEN EXISTS (
            SELECT cd_expressao
            FROM w_expression_import_stg
            WHERE import_id = imp_id_p
                AND cd_expressao = cur_imp_stg.cd_expressao
                AND ds_idioma = cur_imp_stg.ds_idioma
                AND ds_locale_new = cur_imp_stg.ds_locale_new
        ) THEN (SELECT count(cd_expressao)
                FROM w_expression_import_stg
                WHERE import_id = imp_id_p
                    AND cd_expressao = cur_imp_stg.cd_expressao
                    AND ds_idioma = cur_imp_stg.ds_idioma
                    AND ds_locale_new = cur_imp_stg.ds_locale_new)
            ELSE 0 END as u
        INTO STRICT new_expr_dup_cnt1_w
;

        SELECT CASE WHEN EXISTS (
            SELECT cd_expressao
            FROM w_expression_import_stg
            WHERE import_id = imp_id_p
                AND cd_expressao = cur_imp_stg.cd_expressao
                AND ds_idioma = cur_imp_stg.ds_idioma
                AND ds_locale_new = cur_imp_stg.ds_locale_new
                AND ds_expressao_new = cur_imp_stg.ds_expressao_new
        ) THEN 1 ELSE 0 END as u
        INTO STRICT new_expr_dup_cnt2_w
;

        IF ( coalesce(cur_imp_stg.cd_expressao::text, '') = '' OR coalesce(expr_cnt_w, 0) = 0 ) THEN
            error_code_w := 'E';
            error_desc_w := '1073409';
        END IF;

        IF ( coalesce(cur_imp_stg.ds_locale_new::text, '') = '' OR coalesce(locale_cnt_w, 0) = 0 ) THEN
            error_code_w := 'E';
            IF ( length(error_desc_w) > 0 ) THEN
                error_desc_w := error_desc_w || ',1073411';
            ELSE
                error_desc_w := '1073411';
            END IF;
        END IF;

        IF ( coalesce(cur_imp_stg.ds_expressao_new::text, '') = '' ) THEN
            error_code_w := 'E';
            IF ( length(error_desc_w) > 0 ) THEN
                error_desc_w := error_desc_w || ',1073419';
            ELSE
                error_desc_w := '1073419';
            END IF;
        END IF;

        IF ( new_expr_dup_cnt1_w > 1 AND new_expr_dup_cnt2_w = 1 ) THEN       /* where new expression are different, locale new are same */
            error_code_w := 'E';
            IF ( length(error_desc_w) > 0 ) THEN
                error_desc_w := error_desc_w || ',1071841';
            ELSE
                error_desc_w := '1071841';
            END IF;
        END IF;

        IF ( dup_cnt_idioma_w > 0 and coalesce(error_code_w, 'x') <> 'E' ) THEN                    /* Mark 'update' those exists in Idioma table  */
            error_code_w := 'U';
            error_desc_w := NULL;
        END IF;

        IF ( coalesce(error_code_w::text, '') = '' ) THEN
            error_code_w := 'I';
            error_desc_w := NULL;
        END IF;

        UPDATE w_expression_import_stg
        SET
            error_code = error_code_w,
            error_desc = error_desc_w
        WHERE
            import_id = imp_id_p
            AND nr_sequencia = cur_imp_stg.nr_sequencia;

        if NOT FOUND then
            RAISE EXCEPTION 'invalid_imp_id_e' USING ERRCODE = '50010';
        end if;

        error_code_w := NULL;
        error_desc_w := NULL;
    EXCEPTION
        WHEN SQLSTATE '50010' THEN
            CALL log_expression_import_stg(imp_id_p, cur_imp_stg.cd_expressao, userid_p, 'Validation stuck', SQLSTATE,
                                      sqlerrm);
        WHEN OTHERS THEN
            CALL log_expression_import_stg(imp_id_p, cur_imp_stg.cd_expressao, userid_p, 'Validation stuck', SQLSTATE,
                                      sqlerrm);
    END;
    END LOOP;

    CALL log_expression_import_stg(imp_id_p, NULL, userid_p, 'Validation successful', NULL, NULL);
    COMMIT;
    CLOSE curs_imp_stg;
EXCEPTION
    WHEN SQLSTATE '50007' THEN
        CALL log_expression_import_stg(imp_id_p, NULL, userid_p, 'Validation stopped', NULL, '1073413');
    WHEN OTHERS THEN
        CALL log_expression_import_stg(imp_id_p, NULL, userid_p, 'Validation stopped', SQLSTATE, sqlerrm);
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE import_stg_validations_rights ( imp_id_p w_expression_import_stg.import_id%type, userid_p w_expression_import_log.nm_usuario%type ) FROM PUBLIC;

