-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE validar_w_ctb_movimento_imp (nm_usuario_p text) AS $body$
DECLARE


    cd_empresa_w        w_ctb_movimento_imp.cd_empresa%type;
    cd_conta_credito_w  w_ctb_movimento_imp.cd_conta_credito%type;
    cd_conta_debito_w   w_ctb_movimento_imp.cd_conta_debito%type;
    cd_centro_custo_w   w_ctb_movimento_imp.cd_centro_custo%type;
    ie_status_w         w_ctb_movimento_imp.ie_status%type;
    ds_observacao_w     w_ctb_movimento_imp.ds_observacao%type;
    cd_historico_w      w_ctb_movimento_imp.cd_historico%type;

    c_registros CURSOR FOR
    SELECT *
    from W_CTB_MOVIMENTO_IMP
    where nm_usuario = nm_usuario_p
    and   ie_status <> 'V'
    order by nm_usuario, nr_sequencia;

    r_registros c_registros%rowtype;


BEGIN
        open c_registros;
        loop
        fetch c_registros into r_registros;
            EXIT WHEN NOT FOUND; /* apply on c_registros */
            begin
                cd_conta_credito_w  := null;
                cd_conta_debito_w   := null;
                cd_centro_custo_w   := null;
                ie_status_w         := 'V';
                ds_observacao_w     := null;
                cd_historico_w      := null;
                cd_empresa_w        := holding_pck.get_emp_controladora_grupo(0, r_registros.cd_empresa);

                --Validacao da Conta Contabil
                if ((r_registros.cd_empresa IS NOT NULL AND r_registros.cd_empresa::text <> '') and r_registros.cd_empresa = cd_empresa_w) then --Empresa Controladora
                    if (r_registros.cd_conta_imp_credito IS NOT NULL AND r_registros.cd_conta_imp_credito::text <> '') then --Conta Contabil Credito
                        begin
                            select cd_conta_contabil into STRICT cd_conta_credito_w from conta_contabil where cd_conta_contabil = r_registros.cd_conta_imp_credito and ie_situacao = 'A' and cd_empresa = r_registros.cd_empresa order by cd_conta_contabil;
                        exception
                            when no_data_found then
                                cd_conta_credito_w := null;
                        end;
                    end if;

                    if (r_registros.cd_conta_imp_debito IS NOT NULL AND r_registros.cd_conta_imp_debito::text <> '') then --Conta Contabil Debito
                        begin
                            select cd_conta_contabil into STRICT cd_conta_debito_w from conta_contabil where cd_conta_contabil = r_registros.cd_conta_imp_debito and ie_situacao = 'A' and cd_empresa = r_registros.cd_empresa order by cd_conta_contabil;
                        exception
                            when no_data_found then
                                cd_conta_debito_w := null;
                        end;
                    end if;
                elsif ((r_registros.cd_empresa IS NOT NULL AND r_registros.cd_empresa::text <> '') and r_registros.cd_empresa <> cd_empresa_w) then --Empresa Controlada
                    if (r_registros.cd_conta_imp_credito IS NOT NULL AND r_registros.cd_conta_imp_credito::text <> '') then --Conta Contabil Credito                
                        begin
                            select cd_conta_contabil into STRICT cd_conta_credito_w from conta_contabil where cd_conta_referencia = r_registros.cd_conta_imp_credito and ie_situacao = 'A' and cd_empresa = r_registros.cd_empresa order by cd_conta_referencia;
                        exception
                            when no_data_found then
                                cd_conta_credito_w := null;
                        end;
                    end if;

                    if (r_registros.cd_conta_imp_debito IS NOT NULL AND r_registros.cd_conta_imp_debito::text <> '') then --Conta Contabil Debito
                        begin
                            select cd_conta_contabil into STRICT cd_conta_debito_w from conta_contabil where cd_conta_referencia = r_registros.cd_conta_imp_debito  and ie_situacao = 'A' and cd_empresa = r_registros.cd_empresa order by cd_conta_referencia;
                        exception
                            when no_data_found then
                                cd_conta_debito_w := null;
                        end;
                    end if;
                end if;

                if (r_registros.cd_empresa IS NOT NULL AND r_registros.cd_empresa::text <> '') and coalesce(cd_conta_credito_w::text, '') = '' and coalesce(cd_conta_debito_w::text, '') = '' then
                    ie_status_w := 'N';
                    ds_observacao_w := obter_desc_expressao(1056852); --Conta contabil inativa ou inexistente
                end if;
                

                --Validacao do Centro de Custo
                if coalesce(ds_observacao_w::text, '') = '' then
                    if (r_registros.cd_cc_imp_credito = r_registros.cd_cc_imp_debito) or (coalesce(r_registros.cd_cc_imp_credito::text, '') = '' and coalesce(r_registros.cd_cc_imp_debito::text, '') = '') or ((r_registros.cd_cc_imp_credito IS NOT NULL AND r_registros.cd_cc_imp_credito::text <> '') and coalesce(r_registros.cd_cc_imp_debito::text, '') = '') then
                        begin
                            select max(cd_centro_custo)
                            into STRICT cd_centro_custo_w
                            from CENTRO_CUSTO
                            where cd_classificacao = r_registros.cd_cc_imp_credito 
                            and   cd_estabelecimento = r_registros.cd_estabelecimento
                            and   ie_situacao = 'A';
                        exception
                            when no_data_found then
                                cd_centro_custo_w := null;
                                ie_status_w := 'N';
                                ds_observacao_w := obter_desc_expressao(618938); --Centro de custo inativo ou inexistente
                        end;
                    elsif (coalesce(r_registros.cd_cc_imp_credito::text, '') = '' and (r_registros.cd_cc_imp_debito IS NOT NULL AND r_registros.cd_cc_imp_debito::text <> '')) then
                        begin
                            select max(cd_centro_custo)
                            into STRICT cd_centro_custo_w
                            from CENTRO_CUSTO
                            where cd_classificacao = r_registros.cd_cc_imp_debito 
                            and   cd_estabelecimento = r_registros.cd_estabelecimento
                            and   ie_situacao = 'A';
                        exception
                            when no_data_found then
                                cd_centro_custo_w := null;
                        end;
                    elsif coalesce(ds_observacao_w::text, '') = '' then
                        ie_status_w := 'N';
                        ds_observacao_w :=  obter_desc_expressao(1056856); --Contas do Centro de Custo nao podem possuir codigos diferentes!
                    end if;
                end if;

                --validacao do historico
                if coalesce(ds_observacao_w::text, '') = '' then
                    begin
                        select cd_historico
                        into STRICT cd_historico_w
                        from historico_padrao_empresa_v
                        where cd_historico = r_registros.cd_historico
                        and   ie_situacao = 'A'
                        and   cd_empresa = r_registros.cd_empresa;
                    exception
                        when no_data_found then
                            ie_status_w := 'N';
                            ds_observacao_w := obter_desc_expressao(1056854); --Codigo do historico inativo ou inexistente
                    end;
                end if;

               update w_ctb_movimento_imp set
                cd_conta_credito    = cd_conta_credito_w,
                cd_conta_debito     = cd_conta_debito_w,
                cd_centro_custo     = cd_centro_custo_w,
                ie_status           = ie_status_w,
                ds_observacao       = ds_observacao_w
                where nr_sequencia  = r_registros.nr_sequencia
                and   nm_usuario    = nm_usuario_p;

                commit;
            end;
        end loop;
		close c_registros;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE validar_w_ctb_movimento_imp (nm_usuario_p text) FROM PUBLIC;

