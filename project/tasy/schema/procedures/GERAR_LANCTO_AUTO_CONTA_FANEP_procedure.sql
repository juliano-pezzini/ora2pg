-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_lancto_auto_conta_fanep ( nr_atendimento_p bigint, nr_seq_pepo_p bigint, cd_material_p bigint, qt_material_p bigint, cd_local_estoque_p bigint, nr_seq_proced_princ_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_sequencia_w		bigint;
cd_setor_atendimento_w	integer;
cd_setor_atendimento_ww	integer;
dt_entrada_unidade_w	timestamp;
cd_unidade_medida_w	varchar(30);
nr_seq_atepacu_w		bigint;
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
nr_doc_convenio_w	varchar(20);
ie_tipo_guia_w		varchar(2);
cd_senha_w		varchar(20);
ie_consignado_w		varchar(1);
cd_material_estoque_w	integer;
qt_conv_estoque_consumo_w	double precision;
cd_unidade_medida_estoque_w	varchar(30);
cd_unidade_medida_consumo_w	varchar(30);
qt_estoque_w			double precision;
cd_estab_w			bigint;
dt_entrada_unidade_ww		timestamp;
cd_pessoa_fisica_w		varchar(10);
dt_inicio_real_w			timestamp;
cd_medico_cirurgiao_w		varchar(10);
cd_medico_anestesista_w		varchar(10);
nr_seq_interno_w			bigint;
ds_erro_w			varchar(255);
nr_seq_proc_w			bigint;
ie_classificacao_w			varchar(1);
cd_tipo_procedimento_w		smallint;

ie_acao_excesso_w		varchar(10);
qt_excedida_w			double precision;
qt_procedimento_w		double precision;
ds_erro_uso_w			varchar(255);
ie_regra_uso_w			varchar(1):= 'N';
nr_seq_excedido_w		bigint;
nr_conta_w			bigint;

 

BEGIN 
 
ie_regra_uso_w := Obter_Param_Usuario(872, 332, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_regra_uso_w);
 
select	nr_seq_atepacu 
into STRICT	nr_seq_atepacu_w 
from	pepo_cirurgia 
where	nr_sequencia = nr_seq_pepo_p;
if (coalesce(nr_seq_atepacu_w::text, '') = '') then 
	nr_seq_atepacu_w := Obter_Atepacu_paciente(nr_atendimento_p,'A');
end if;	
 
SELECT * FROM obter_convenio_execucao(nr_atendimento_p, clock_timestamp(), cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w) INTO STRICT cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w;
 
SELECT	cd_estabelecimento 
INTO STRICT	cd_estab_w 
FROM 	atendimento_paciente 
WHERE 	nr_atendimento = nr_atendimento_p;
 
SELECT	cd_pessoa_fisica, 
	dt_inicio_proced, 
	cd_medico_anestesista, 
	cd_medico_anestesista, 
	dt_cirurgia 
INTO STRICT	cd_pessoa_fisica_w, 
	dt_inicio_real_w, 
	cd_medico_cirurgiao_w, 
	cd_medico_anestesista_w, 
	dt_entrada_unidade_ww 
FROM	pepo_cirurgia 
WHERE	nr_sequencia	=	nr_seq_pepo_p;
 
IF (nr_seq_proced_princ_p IS NOT NULL AND nr_seq_proced_princ_p::text <> '') THEN 
 
	BEGIN 
	SELECT	cd_setor_atendimento 
	INTO STRICT	cd_setor_atendimento_ww 
	FROM	atend_paciente_unidade 
	WHERE	nr_seq_interno = nr_seq_atepacu_w;
	EXCEPTION 
	WHEN OTHERS THEN 
		--R A I S E _APPLICATION_ERROR(-20011,'NÃ£o foi gerado passagem de setor para esta cirurgia!'); 
		CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(209843);
	END;
 
	ds_erro_w := Consiste_Paciente_Proc(nr_seq_proced_princ_p, nr_atendimento_p, cd_pessoa_fisica_w, cd_procedimento_p, ie_origem_proced_p, ds_erro_w);
 
	IF (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') THEN 
	  --R A I S E _APPLICATION_ERROR(-20011,ds_erro_w); 
		CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(209844,'DS_ERRO_P=' || ds_erro_w );
	END IF;
 
	SELECT	nextval('procedimento_paciente_seq') 
	INTO STRICT	nr_seq_proc_w 
	;
 
	qt_procedimento_w := qt_procedimento_p;
 
	IF (qt_procedimento_w > 0) THEN 
		INSERT INTO procedimento_paciente( 
			nr_sequencia, 
			cd_procedimento, 
			ie_origem_proced, 
			qt_procedimento, 
			cd_pessoa_fisica, 
			ie_funcao_medico, 
			cd_convenio, 
			cd_categoria, 
			ie_proc_princ_atend, 
			ie_video, 
			tx_medico, 
			tx_anestesia, 
			tx_procedimento, 
			ie_valor_informado, 
			ie_guia_informada, 
			cd_situacao_glosa, 
			nm_usuario_original, 
			nr_atendimento, 
			cd_setor_atendimento, 
			dt_entrada_unidade, 
			nr_seq_atepacu, 
			cd_senha, 
			ie_auditoria, 
			ie_emite_conta, 
			cd_cgc_prestador, 
			nr_seq_proc_interno, 
			dt_procedimento, 
			dt_atualizacao, 
			nm_usuario, 
			nr_seq_pepo, 
			cd_medico_executor, 
			cd_medico_req, 
			dt_conta, 
			nr_doc_convenio) 
		VALUES ( 
			nr_seq_proc_w, 
			cd_procedimento_p, 
			ie_origem_proced_p, 
			qt_procedimento_w, 
			CASE WHEN ie_origem_proced_p=7 THEN NULL  ELSE obter_pessoa_fisica_usuario(nm_usuario_p,'C') END , 
			'1', 
			cd_convenio_w, 
			cd_categoria_w, 
			'N', 
			'N', 
			100, 
			100, 
			100, 
			'N', 
			'N', 
			0, 
			nm_usuario_p, 
			nr_atendimento_p, 
			cd_setor_atendimento_ww, 
			dt_entrada_unidade_ww, 
			nr_seq_interno_w, 
			cd_senha_w, 
			'N', 
			'N', 
			obter_cgc_estabelecimento(cd_estab_w), 
			nr_seq_proced_princ_p, 
			dt_inicio_real_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			nr_seq_pepo_p, 
			cd_medico_cirurgiao_w, 
			cd_medico_cirurgiao_w, 
			clock_timestamp(), 
			nr_doc_convenio_w);
 
	END IF;
 
	SELECT	MAX(ie_classificacao), 
		MAX(cd_tipo_procedimento) 
	INTO STRICT	ie_classificacao_w, 
		cd_tipo_procedimento_w 
	FROM	procedimento 
	WHERE	cd_procedimento		= cd_procedimento_p 
	AND	ie_origem_proced	= ie_origem_proced_p;
 
 
 
	IF (ie_classificacao_w IN (1,8)) THEN 
		CALL atualiza_preco_procedimento(nr_seq_proc_w,cd_convenio_w,nm_usuario_p);
		CALL gerar_taxa_sala_porte(nr_atendimento_p,dt_entrada_unidade_ww,clock_timestamp(),cd_procedimento_p,nr_seq_proced_princ_p,nm_usuario_p);
	ELSE 
		CALL atualiza_preco_servico(nr_seq_proc_w,nm_usuario_p);
	END IF;
 
	CALL Gerar_Lancamento_automatico(nr_atendimento_p,NULL,34,nm_usuario_p,nr_seq_proc_w,NULL,NULL,NULL,NULL,NULL);
 
	CALL gerar_autor_regra(nr_atendimento_p,NULL,nr_seq_proc_w,NULL,NULL,nr_seq_proced_princ_p,'EP',nm_usuario_p,NULL,NULL,NULL,NULL,NULL,NULL,'','','');
 
END IF;
 
IF (cd_material_p IS NOT NULL AND cd_material_p::text <> '') THEN 
 
	IF (nr_seq_atepacu_w IS NOT NULL AND nr_seq_atepacu_w::text <> '') THEN 
 
		SELECT	max(cd_setor_Atendimento), 
			max(dt_entrada_unidade) 
		INTO STRICT	cd_setor_atendimento_w, 
			dt_entrada_unidade_w 
		FROM	atend_paciente_unidade 
		WHERE	nr_seq_interno = nr_seq_atepacu_w;
 
		SELECT	nextval('material_atend_paciente_seq') 
		INTO STRICT	nr_sequencia_w 
		;
 
		SELECT	SUBSTR(obter_dados_material_estab(cd_material,cd_estab_w,'UMS'),1,30) cd_unidade_medida_consumo 
		INTO STRICT	cd_unidade_medida_w 
		FROM	material 
		WHERE	cd_material = cd_material_p;
		 
		INSERT INTO material_atend_paciente( 
				nr_sequencia, 
				cd_material, 
				dt_atendimento, 
				cd_senha, 
				cd_convenio, 
				nr_doc_convenio, 
				ie_tipo_guia, 
				cd_categoria, 
				nr_seq_atepacu, 
				cd_setor_atendimento, 
				cd_material_exec, 
				qt_executada, 
				vl_unitario, 
				qt_ajuste_conta, 
				cd_situacao_glosa, 
				ie_valor_informado, 
				ie_guia_informada, 
				ie_auditoria, 
				dt_entrada_unidade, 
				qt_material, 
				cd_local_estoque, 
				dt_Atualizacao, 
				nm_usuario, 
				nm_usuario_original, 
				nr_atendimento, 
				cd_unidade_medida, 
				cd_acao, 
				nr_seq_pepo) 
		VALUES (	nr_sequencia_w, 
				cd_material_p, 
				dt_inicio_real_w, 
				cd_senha_w, 
				cd_convenio_w, 
				nr_doc_convenio_w, 
				ie_tipo_guia_w, 
				cd_categoria_w, 
				nr_seq_atepacu_w, 
				cd_setor_atendimento_w, 
				cd_material_p, 
				qt_material_p, 
				0, 
				0, 
				0, 
				'N', 
				'N', 
				'N', 
				dt_entrada_unidade_w, 
				qt_material_p, 
				cd_local_estoque_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nm_usuario_p, 
				nr_atendimento_p, 
				cd_unidade_medida_w, 
				'1', 
				nr_seq_pepo_p);
 
		CALL atualiza_preco_material(nr_sequencia_w, nm_usuario_p);
 
	END IF;
 
	COMMIT;
 
END IF;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_lancto_auto_conta_fanep ( nr_atendimento_p bigint, nr_seq_pepo_p bigint, cd_material_p bigint, qt_material_p bigint, cd_local_estoque_p bigint, nr_seq_proced_princ_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, nm_usuario_p text) FROM PUBLIC;

