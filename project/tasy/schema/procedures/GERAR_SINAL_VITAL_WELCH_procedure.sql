-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS ( nm_sinal_vital      varchar(100),
                        vl_sinal_vital      varchar(100),
                        nm_codigo           varchar(100),
                        ds_unidade_medida   varchar(100),
                        ds_lista            varchar(255));


CREATE OR REPLACE PROCEDURE gerar_sinal_vital_welch ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, cd_professional_p text default null, nr_atendimento_p bigint default null, cd_barras_p text default null) AS $body$
DECLARE


type Vetor is table of campos index by integer;
Vetor_w	                Vetor;

nr_atendimento_w        bigint;
dt_sinal_vital_w        timestamp;
nr_seq_sinal_vital_w    bigint      := 0;
ds_sep_w                varchar(100)   := ';';
nr_pos_separador_w      bigint;
qt_parametros_w         bigint;
qt_contador_w           bigint;
ds_parametros_w         varchar(32000);
i                       integer;
ds_lista_aux_w          varchar(255);
ds_sep_bv_w             varchar(30)    := obter_separador_bv;
nr_seq_monit_resp_w     bigint      := 0;
nr_seq_monit_hemo_w     bigint      := 0;
cd_modalidade_w         varchar(15);
ie_respiracao_w         varchar(7);
ds_erro_w               varchar(4000);
qt_minutos_w            bigint;
qt_min_philips_w        bigint;
qt_reg_w                bigint;
cd_estabelecimento_w    bigint;
nr_cirurgia_w           bigint;
nr_seq_pepo_w           bigint;
nls_numeric_characters_w	varchar(255);
db_timezone_w			      varchar(255);
cd_professional_w       varchar(100);
nm_usuario_w            varchar(100);
cd_escala_dor_w         varchar(100);
qt_pont_w varchar(255) := 'N';
qt_nivel_con_w bigint := 0;


	procedure atualizar_valor_fora_faixa(	nm_tabela_p			text,
											nm_atributo_p		text,
											vl_parametro_p		text,
											nr_sequencia_sv_p	bigint) is
	ds_comando_ww			varchar(2000);
	ds_parametros_w			varchar(2000);
	vl_parametro_w			varchar(2000);
	ds_retorno_w			varchar(255);
	ie_retorno_w			varchar(2);
	nr_seq_item_w			bigint;
	ie_valor_fora_faixa_w	varchar(2);

	
BEGIN
	begin

	SELECT  coalesce(MAX(a.nr_sequencia),0)
	into STRICT	nr_seq_item_w
	FROM    sinal_vital a
	WHERE   a.nm_atributo = UPPER(nm_atributo_p);

	if (nr_seq_item_w > 0) then
		SELECT * FROM consiste_sinal_vital(cd_pessoa_fisica_p, vl_parametro_w, nr_seq_item_w, ds_retorno_w, ie_retorno_w, null, nr_atendimento_w, null, null) INTO STRICT ds_retorno_w, ie_retorno_w;

		if (coalesce(ds_retorno_w,'XPTO') <> 'XPTO') then
			ie_valor_fora_faixa_w := 'S';

			ds_comando_ww	:= 	'	update	'|| nm_tabela_p	||
			'	set	IE_VALOR_FORA_FAIXA = :vl_parametro'||
			'	where	nr_sequencia	= :nr_sequencia ';

			ds_parametros_w:=	'vl_parametro='|| ie_valor_fora_faixa_w ||ds_sep_bv_w||
				'nr_sequencia='||nr_sequencia_sv_p||ds_sep_bv_w;

			CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_ww,ds_parametros_w);

		end if;
	end if;



	exception
		when others then
		ds_erro_w		:= sqlerrm(SQLSTATE);

	end;

	end;

	procedure inserir_sv is
	begin
    if (nr_seq_sinal_vital_w	= 0) then

		select	nextval('atendimento_sinal_vital_seq')
		into STRICT	nr_seq_sinal_vital_w
		;

		insert into atendimento_sinal_vital(	nr_sequencia,
							nr_atendimento,
							dt_sinal_vital,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							dt_liberacao,
							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao)
				values (	nr_seq_sinal_vital_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_w,
							cd_professional_w,
							clock_timestamp(),
							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S');
	end if;
	exception
		when others then
		ds_erro_w		:= sqlerrm(SQLSTATE);
	end;

	procedure inserir_resp is
	begin
	if (nr_seq_monit_resp_w	= 0) then

		select	nextval('atendimento_monit_resp_seq')
		into STRICT	nr_seq_monit_resp_w
		;

		insert into ATENDIMENTO_MONIT_RESP(	nr_sequencia,
							nr_atendimento,
							DT_MONITORIZACAO,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							dt_liberacao,
							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao)
				values (	nr_seq_monit_resp_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_w,
							cd_professional_w,
							clock_timestamp(),
							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S');
	end if;
	end;


	procedure inserir_hemo is
	begin
	if (nr_seq_monit_hemo_w	= 0) then

		select	nextval('atend_monit_hemod_seq')
		into STRICT	nr_seq_monit_hemo_w
		;

		insert into ATEND_MONIT_HEMOD(	nr_sequencia,
							nr_atendimento,
							DT_MONITORACAO,
							dt_atualizacao,
							nm_usuario,
							CD_PESSOA_FISICA,
							dt_liberacao,
							ie_importado,
							ie_situacao,
							nr_cirurgia,
							nr_seq_pepo,
							ie_integracao)
				values (	nr_seq_monit_hemo_w,
							nr_atendimento_w,
							dt_sinal_vital_w,
							clock_timestamp(),
							nm_usuario_w,
							cd_professional_w,
							clock_timestamp(),
							'S',
							'A',
							nr_cirurgia_w,
							nr_seq_pepo_w,
							'S');
	end if;
	end;


	procedure atualizar_valor_sv(	nm_tabela_p	varchar2,
					nm_atributo_p	varchar2,
					vl_parametro_p	varchar2) is
	ds_comando_w	varchar2(2000);
	ds_parametros_w	varchar2(2000);
	vl_parametro_w	varchar2(2000);
	begin

	ds_comando_w	:= 	'	update	'||nm_tabela_p	||
				'	set	'||nm_atributo_p||' = :vl_parametro'||
				'	where	nr_sequencia	= :nr_sequencia ';
	begin
	vl_parametro_w	:= vl_parametro_p;
	
	if (nls_numeric_characters_w <> '.,') and -- Avoing issues with customer outside Brasil
		((substr(nm_atributo_p,1,2)	= 'QT') or (substr(nm_atributo_p,1,2)	= 'PR') or (substr(nm_atributo_p,1,2)	= 'VL') or (substr(nm_atributo_p,1,2)	= 'TX')) then
		vl_parametro_w	:= replace(vl_parametro_w,'.',',');
	end if;

	if (nm_tabela_p	= 'ATENDIMENTO_SINAL_VITAL') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_sv;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_sinal_vital_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
		atualizar_valor_fora_faixa(nm_tabela_p, nm_atributo_p, vl_parametro_w, nr_seq_sinal_vital_w);
	elsif (nm_tabela_p	= 'ATENDIMENTO_MONIT_RESP') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_resp;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_monit_resp_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
		atualizar_valor_fora_faixa(nm_tabela_p, nm_atributo_p, vl_parametro_w, nr_seq_sinal_vital_w);
	elsif (nm_tabela_p	= 'ATEND_MONIT_HEMOD') and (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') and (lower(vl_parametro_p)	<> 'null')then
		inserir_hemo;
		ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
					'nr_sequencia='||nr_seq_monit_hemo_w||ds_sep_bv_w;

		CALL Exec_sql_Dinamico_bv(nm_usuario_p,ds_comando_w,ds_parametros_w);
		atualizar_valor_fora_faixa(nm_tabela_p, nm_atributo_p, vl_parametro_w, nr_seq_sinal_vital_w);
	end if;

	exception
		when others then
		ds_erro_w		:= sqlerrm(SQLSTATE);

	end;

	end;
begin

begin
	select 	max(value)
	into STRICT	nls_numeric_characters_w
	from 	v$nls_parameters
	where	parameter = 'NLS_NUMERIC_CHARACTERS';
exception
when others then
	nls_numeric_characters_w	:= null;
end;


begin

Select  max(dbtimezone)
into STRICT	db_timezone_w
;

select coalesce(max(NM_ATRIBUTO),'N')
into STRICT qt_pont_w
from CONVERSAO_MEIO_EXTERNO
where NM_TABELA= 'ATENDIMENTO_SINAL_VITAL'
and CD_EXTERNO = 'qt_pont'
and cd_interno = 'qt_pont';


if (position('+' in dt_sinal_vital_p)	> 0 and db_timezone_w <> '+00:00') then --converter timezone para data local
	dt_sinal_vital_w	:= hl7_convert_timezone_date(dt_sinal_vital_p);
else
	dt_sinal_vital_w := to_date(dt_sinal_vital_p, 'yyyymmddhh24miss');
end if;

exception
	when others then
	dt_sinal_vital_w	:= clock_timestamp();
end;

if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
  nr_atendimento_w := nr_atendimento_p;
elsif (nm_usuario_p = 'Welch Allyn At') then
	nr_atendimento_w := (cd_pessoa_fisica_p)::numeric;
else
	select 	max(nr_atendimento)
	into STRICT 	nr_atendimento_w
	from 	atendimento_paciente
	where 	cd_pessoa_fisica  = cd_pessoa_fisica_p;
end if;

select	max(nr_cirurgia),
		max(nr_seq_pepo)
into STRICT	nr_cirurgia_w,
		nr_seq_pepo_w
from	cirurgia
where	nr_atendimento = nr_atendimento_w
and		dt_sinal_vital_w between dt_inicio_real and coalesce(dt_termino, dt_sinal_vital_w);

if (cd_barras_p IS NOT NULL AND cd_barras_p::text <> '') then
  Select  max(nm_usuario),
          max(cd_pessoa_fisica)
  into STRICT	  nm_usuario_w,
          cd_professional_w
  from    usuario
  where   CD_BARRAS =  cd_barras_p;
end if;

nm_usuario_w := coalesce(nm_usuario_w,nm_usuario_p);
cd_professional_w := coalesce(cd_professional_w,cd_professional_p);

if (coalesce(nr_cirurgia_w::text, '') = '') and (coalesce(nr_seq_pepo_w::text, '') = '') then
	select	max(nr_cirurgia),
			max(nr_seq_pepo)
	into STRICT	nr_cirurgia_w,
			nr_seq_pepo_w
	from	atend_paciente_unidade
	where	nr_atendimento = nr_atendimento_w
	and		dt_sinal_vital_w between dt_entrada_unidade and coalesce(dt_saida_unidade, dt_sinal_vital_w);
end if;

ds_parametros_w    := ds_lista_parametros_p||ds_lista_parametros2_p;
ds_parametros_w	   := replace(ds_parametros_w,'null','');
i	:= 0;

while(length(ds_parametros_w) > 0) loop
	begin
	i	:= i+1;
	if (position(';' in ds_parametros_w)	>0)  then
		Vetor_w[i].ds_lista	:= substr(ds_parametros_w,1,position(';' in ds_parametros_w)-1 );
		ds_parametros_w	:= substr(ds_parametros_w,position(';' in ds_parametros_w)+1,40000);

	else
		Vetor_w[i].ds_lista	:=substr(ds_parametros_w,1,length(ds_parametros_w) - 1);
		ds_parametros_w	:= null;
	end if;

	end;
end loop;

RAISE NOTICE '%', Vetor_w.count;


for j in 1..Vetor_w.count loop
	begin

	ds_lista_aux_w	:= Vetor_w[j].ds_lista;

	Vetor_w[j].nm_sinal_vital	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)-1 );
	RAISE NOTICE 'nm_sinal_vital = %', Vetor_w[j].nm_sinal_vital;

	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
	Vetor_w[j].ds_unidade_medida	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);

	Vetor_w[j].nm_codigo	:= substr(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );

	RAISE NOTICE 'nm_codigo = %', Vetor_w[j].nm_codigo;
	ds_lista_aux_w	:= substr(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);

	Vetor_w[j].vl_sinal_vital	:= substr(ds_lista_aux_w,1,4000 );

	end;
end loop;

select	coalesce(max(cd_estabelecimento),1)
into STRICT	cd_estabelecimento_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_w;

if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then

	for i in 1..Vetor_w.count loop
		begin	

		atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','CD_ESCALA_DOR','NV');
    if REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'PAINCODE', 'i') then
            Select     coalesce(max(VL_DOMINIO),'NV')
            into STRICT      cd_escala_dor_w
            from     valor_dominio
            where    cd_dominio  = 1298
            and      VL_DOMINIO = Vetor_w[i].vl_sinal_vital;
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','CD_ESCALA_DOR',cd_escala_dor_w);

        elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '149546', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_CARDIACA',Vetor_w[i].vl_sinal_vital);

        elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '150456', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_SATURACAO_O2',Vetor_w[i].vl_sinal_vital);

        elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '150021', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_SISTOLICA',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '150022', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PA_DIASTOLICA',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '150023', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PAM',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '150344', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_TEMP',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '68063', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PESO',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '68060', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_ALTURA_CM',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, '151562', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_FREQ_RESP',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'PAIN', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_ESCALA_DOR',Vetor_w[i].vl_sinal_vital);


		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'BMI', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_IMC',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'LOC.Name', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','IE_NIVEL_CONSCIENCIA',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'CR', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_ENCHIMENTO_CAPILAR',Vetor_w[i].vl_sinal_vital);

		elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'ResE', 'i') then
		        atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','NR_DISTRESS',Vetor_w[i].vl_sinal_vital);
    elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'AIRVO II', 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','NR_SEQ_EQUIPAMENTO_RESP',Vetor_w[i].vl_sinal_vital);
    elsif REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, 'SO2', 'i') then
		        atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_O2_SUPLEMENTAR',Vetor_w[i].vl_sinal_vital);
    elsif qt_pont_w <>'N' and REGEXP_LIKE(Vetor_w[i].nm_sinal_vital, qt_pont_w, 'i') then
            atualizar_valor_sv('ATENDIMENTO_SINAL_VITAL','QT_PONTO_DETERIZACAO',Vetor_w[i].vl_sinal_vital);
    end if;
		
    end;

	end loop;


end if;

commit;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_sinal_vital_welch ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, cd_professional_p text default null, nr_atendimento_p bigint default null, cd_barras_p text default null) FROM PUBLIC;

