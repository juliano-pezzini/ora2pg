-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_taxa_qtde_exec_mat (cd_estabelecimento_p bigint, nr_sequencia_p bigint, cd_convenio_p bigint, cd_categoria_p text, dt_atendimento_p timestamp, cd_material_p bigint, qt_material_p bigint, tx_material_p INOUT bigint) AS $body$
DECLARE


tx_mat_w			double precision;
tx_material_w			double precision;
cd_grupo_material_w		bigint;
cd_subgrupo_material_w		bigint;
cd_classe_material_w		bigint;
nr_atendimento_w		bigint;
nr_interno_conta_w		bigint;
ie_regra_execucao_w		varchar(01);
qt_exec_max_w			double precision;
qt_exec_min_w			double precision;
qt_exec_w			double precision;
ie_regra_w			varchar(01)	:= 'N';
dt_atendimento_w		timestamp;
nr_sequencia_w			bigint;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;


c01 CURSOR FOR
	SELECT	ie_regra_execucao,
		nr_sequencia
	from	mat_convenio_regra_qtde a
	where	a.cd_estabelecimento					= cd_estabelecimento_p
	and	a.cd_convenio						= cd_convenio_p
	and	coalesce(a.cd_categoria, cd_categoria_p)			= cd_categoria_p
	and	coalesce(a.cd_grupo_material, cd_grupo_material_w)		= cd_grupo_material_w
	and	coalesce(a.cd_subgrupo_material, cd_subgrupo_material_w)	= cd_subgrupo_material_w
	and	coalesce(a.cd_classe_material, cd_classe_material_w)		= cd_classe_material_w
	and	coalesce(a.cd_material, cd_material_p)			= cd_material_p
	and	a.dt_vigencia						=
			(SELECT		max(b.dt_vigencia)
			from	mat_convenio_regra_qtde b
			where	b.cd_estabelecimento					= cd_estabelecimento_p
			and	b.cd_convenio						= cd_convenio_p
			and	coalesce(b.cd_categoria, cd_categoria_p)			= cd_categoria_p
			and	coalesce(b.cd_grupo_material, cd_grupo_material_w)		= cd_grupo_material_w
			and	coalesce(b.cd_subgrupo_material, cd_subgrupo_material_w)	= cd_subgrupo_material_w
			and	coalesce(b.cd_classe_material, cd_classe_material_w)		= cd_classe_material_w
			and	coalesce(b.cd_material, cd_material_p)			= cd_material_p);

c02 CURSOR FOR
	SELECT	qt_exec_min,
		qt_exec_max,
		tx_material
	from	mat_convenio_regra_qtde_tx
	where	nr_seq_regra	= nr_sequencia_w;



BEGIN

tx_material_w	:= tx_material_p;

begin
select 	cd_grupo_material,
	cd_subgrupo_material,
	cd_classe_material
into STRICT	cd_grupo_material_w,
	cd_subgrupo_material_w,
	cd_classe_material_w
from	estrutura_material_v
where	cd_material			= cd_material_p;
exception
     	 when others then
	 begin
	 cd_grupo_material_w		:= 0;
	 cd_subgrupo_material_w		:= 0;
	 cd_classe_material_w		:= 0;
	 end;
end;

begin
select	nr_atendimento,
	nr_interno_conta,
	dt_atendimento
into STRICT	nr_atendimento_w,
	nr_interno_conta_w,
	dt_atendimento_w
from	material_atend_paciente
where	nr_sequencia	= nr_sequencia_p;
exception
     	 when others then
	 begin
	 nr_atendimento_w		:= 0;
	 nr_interno_conta_w		:= 0;
	 end;
end;

if (nr_atendimento_w <> 0) then
	begin
	
	Begin
		cd_pessoa_fisica_w := obter_pessoa_atendimento(nr_atendimento_w, 'C');
	Exception
		When Others Then
		cd_pessoa_fisica_w:='';
	End;

	open	c01;
	loop
	fetch	c01 into
		ie_regra_execucao_w,
		nr_sequencia_w;		
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		ie_regra_w			:= 'N';
		open	c02;
		loop
		fetch	c02 into
			qt_exec_min_w,
			qt_exec_max_w,
			tx_mat_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin

			if (ie_regra_w	= 'N') then

				begin

				if (ie_regra_execucao_w 	= 'A') then
					select	coalesce(sum(qt_material),0)
					into STRICT	qt_exec_w
					from	material_atend_paciente
					where	cd_material		= cd_material_p
					and	coalesce(CD_MOTIVO_EXC_CONTA::text, '') = ''
					and	nr_atendimento		= nr_atendimento_w
					and	dt_atendimento		<= dt_atendimento_w;
				elsif (ie_regra_execucao_w 	= 'D') then
					select	coalesce(sum(qt_material),0)
					into STRICT	qt_exec_w
					from	material_atend_paciente
					where	cd_material		= cd_material_p
					and	nr_atendimento		= nr_atendimento_w
					and	coalesce(CD_MOTIVO_EXC_CONTA::text, '') = ''
					and	dt_atendimento		<= dt_atendimento_w
					and	dt_atendimento		between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atendimento_p) and
									                      ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_atendimento_p,clock_timestamp()));
				elsif (ie_regra_execucao_w 	= 'M') then
					select	coalesce(sum(qt_material),0)
					into STRICT	qt_exec_w
					from	material_atend_paciente
					where	cd_material		= cd_material_p
					and	nr_atendimento		= nr_atendimento_w
					and	coalesce(CD_MOTIVO_EXC_CONTA::text, '') = ''
					and	dt_atendimento		<= dt_atendimento_w
					and	dt_atendimento		between PKG_DATE_UTILS.start_of(dt_atendimento_p, 'month', 0) and
									PKG_DATE_UTILS.END_OF(dt_atendimento_p, 'MONTH', 0);
				
				
				elsif (ie_regra_execucao_w 	= 'I') then -- Dia (Por paciente)
					
					
					select	coalesce(sum(a.qt_material),0)
					into STRICT	qt_exec_w
					from	material_atend_paciente a, conta_paciente b
					where	a.cd_material		= cd_material_p
					and	a.nr_interno_conta = b.nr_interno_conta
					and 	somente_numero(coalesce(obter_pessoa_atendimento(b.nr_atendimento,'C'),'0')) = somente_numero(coalesce(cd_pessoa_fisica_w,'0'))
					and	coalesce(a.CD_MOTIVO_EXC_CONTA::text, '') = ''
					and	a.nr_sequencia		<= nr_sequencia_p
					and	a.dt_atendimento		between ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atendimento_p) and
												ESTABLISHMENT_TIMEZONE_UTILS.endOfMonth(dt_atendimento_p);
				end if;

				if (qt_exec_w	between qt_exec_min_w and coalesce(qt_exec_max_w, qt_exec_w)) then
					tx_material_w	:= tx_mat_w;
					ie_regra_w	:= 'S';
				end if;

				end;
				end if;
			end;
		end loop;
		close c02;
		end;
	end loop;
	close c01;
	end;
end if;

tx_material_p	:= tx_material_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_taxa_qtde_exec_mat (cd_estabelecimento_p bigint, nr_sequencia_p bigint, cd_convenio_p bigint, cd_categoria_p text, dt_atendimento_p timestamp, cd_material_p bigint, qt_material_p bigint, tx_material_p INOUT bigint) FROM PUBLIC;

