-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_k100_icmsipi (nr_seq_controle_p bigint) AS $body$
DECLARE


/*REGISTRO K100: PERÍODO DA APURAÇÃO DO ICMS.*/

-- VARIABLES
ie_gerou_dados_bloco_w varchar(1) := 'N';

nr_seq_icmsipi_K100_w fis_efd_icmsipi_K100.nr_sequencia%type;

qt_cursor_w bigint := 0;
nr_vetor_w  bigint := 0;

-- USUARIO
nm_usuario_w usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro K100 restringindo pela sequencia da nota fiscal*/
c_reg_K100 CURSOR FOR
	SELECT	trunc(a.dt_inicio_apuracao) dt_ini,
		trunc(a.dt_fim_apuracao) dt_fin
	from	fis_efd_icmsipi_controle 	a
	where	a.nr_sequencia 	= nr_seq_controle_p;

/*Criação do array com o tipo sendo do cursor eespecificado - c_reg_K100*/

type reg_c_reg_K100 is table of c_reg_K100%RowType;
vetRegK100 reg_c_reg_K100;

/*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_K100 */

type registro is table of fis_efd_icmsipi_K100%rowtype index by integer;
fis_registros_w registro;

BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_reg_K100;
loop
fetch c_reg_K100 bulk collect into vetRegK100 limit 1000;
	for i in 1 .. vetRegK100.Count loop
	begin

	/*Incrementa a variavel para o array*/

	qt_cursor_w:=	qt_cursor_w + 1;

	if (ie_gerou_dados_bloco_w = 'N') then
	  ie_gerou_dados_bloco_w := 'S';
	end if;

	/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_K100 */

	select nextval('fis_efd_icmsipi_k100_seq')	  into STRICT nr_seq_icmsipi_K100_w	;

	/*Inserindo valores no array para realização do forall posteriormente*/
	fis_registros_w[qt_cursor_w].nr_sequencia 		:= nr_seq_icmsipi_K100_w;
	fis_registros_w[qt_cursor_w].dt_atualizacao 		:= clock_timestamp();
	fis_registros_w[qt_cursor_w].nm_usuario 		:= nm_usuario_w;
	fis_registros_w[qt_cursor_w].dt_atualizacao_nrec 	:= clock_timestamp();
	fis_registros_w[qt_cursor_w].nm_usuario_nrec 		:= nm_usuario_w;
	fis_registros_w[qt_cursor_w].cd_reg 			:= 'K100';
	fis_registros_w[qt_cursor_w].dt_ini 			:= vetRegK100[i].dt_ini;	
	fis_registros_w[qt_cursor_w].dt_fin 			:= vetRegK100[i].dt_fin;	
	fis_registros_w[qt_cursor_w].nr_seq_controle 		:= nr_seq_controle_p;
	
	/* Chama o inventario de estoque*/

	CALL fis_gerar_reg_K200_icmsipi(nr_seq_controle_p);

	if (nr_vetor_w >= 1000) then
	begin
	/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_K100 */

	forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_K100 values fis_registros_w(i);

		nr_vetor_w := 0;
		fis_registros_w.delete;

		commit;

	end;
	end if;

	/*incrementa variavel para realizar o forall quando chegar no valor limite*/

	nr_vetor_w := nr_vetor_w + 1;

	end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_K100 */
end loop;
close c_reg_K100;

if (fis_registros_w.count > 0) then
begin
/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

forall i in fis_registros_w.first .. fis_registros_w.last
	insert into fis_efd_icmsipi_K100 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/* Chama o acerto de inventario*/

CALL fis_gerar_reg_K280_icmsipi(nr_seq_controle_p,nr_seq_icmsipi_K100_w );

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update fis_efd_icmsipi_controle
	set ie_mov_K = 'S'
	where nr_sequencia = nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_k100_icmsipi (nr_seq_controle_p bigint) FROM PUBLIC;

