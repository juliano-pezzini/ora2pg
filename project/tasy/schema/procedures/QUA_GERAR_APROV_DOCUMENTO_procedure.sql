-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE qua_gerar_aprov_documento ( nr_seq_docto_p bigint, cd_pessoa_aprov_p text, dt_aprovacao_p timestamp, nm_usuario_p text) AS $body$
DECLARE


qt_existe_w			integer;
nr_seq_aprov_w			bigint;
cd_pessoa_doc_w			varchar(10);
cd_estabelecimento_w		smallint;
cd_cargo_w			bigint;
nm_usuario_partic_w		varchar(15);
ie_doc_lido_partic_w		varchar(1);
cd_setor_atendimento_w		bigint;

C01 CURSOR FOR
	SELECT	distinct
		b.nm_usuario
	from	usuario b,
		qua_doc_participante a
	where	b.cd_pessoa_fisica = a.cd_participante
	and	a.nr_seq_doc = nr_seq_docto_p;


BEGIN
cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;
ie_doc_lido_partic_w := obter_param_usuario(4000, 228, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_w, ie_doc_lido_partic_w);

select	count(*)
into STRICT	qt_existe_w
from	qua_doc_aprov
where	nr_seq_doc	= nr_seq_docto_p
and	coalesce(dt_aprovacao::text, '') = '';

select	cd_setor_atendimento
into STRICT	cd_setor_atendimento_w
from 	usuario 
where nm_usuario = nm_usuario_p;

select	max(a.cd_cargo)
into STRICT	cd_cargo_w
from	pessoa_fisica a,
	usuario b
where	a.cd_pessoa_fisica 	= b.cd_pessoa_fisica
and	b.nm_usuario 	= nm_usuario_p;


/*Se no existir mais de um aprovador faz o processo normal*/

if (qt_existe_w = 0) then
	begin
	update	qua_documento
	set	dt_atualizacao		= clock_timestamp(), 
		nm_usuario		= nm_usuario_p, 
		dt_aprovacao		= dt_aprovacao_p,
		ie_status			= 'D',
		nm_usuario_aprov		= nm_usuario_p,
		dt_reprovacao		 = NULL
	where	nr_sequencia 		= nr_seq_docto_p;
	
	if (coalesce(ie_doc_lido_partic_w,'N') = 'S') then
		open C01;
		loop
		fetch C01 into	
			nm_usuario_partic_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			insert into qua_doc_log_acesso(
				nr_sequencia,
				nr_seq_doc,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				dt_atualizacao,
				nm_usuario,
				dt_acesso,
				dt_leitura,
				ie_log,
				cd_estabelecimento,
				cd_funcao)
			values (	nextval('qua_doc_log_acesso_seq'),
				nr_seq_docto_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_partic_w,
				clock_timestamp(),
				clock_timestamp(),
				'C',
				cd_estabelecimento_w,
				wheb_usuario_pck.get_cd_funcao);
		end loop;
		close C01;
	end if;
	end;
else
	begin
	/*Se existir mais de um aprovador, busca a sequencia de aprovao da pessoa que est aprovando*/

	select	count(*),
		max(nr_sequencia)
	into STRICT	qt_existe_w,
		nr_seq_aprov_w
	from	qua_doc_aprov
	where	nr_seq_doc		= nr_seq_docto_p
	and	((cd_pessoa_aprov	= cd_pessoa_aprov_p) or (cd_cargo		= cd_cargo_w) or (cd_setor_atendimento   = cd_setor_atendimento_w))
	and	coalesce(dt_aprovacao::text, '') = '';
	
	if (qt_existe_w > 0) and (coalesce(nr_seq_aprov_w,0) > 0) then
		update	qua_doc_aprov
		set	dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p, 
			dt_aprovacao	= dt_aprovacao_p
		where	nr_sequencia 	= nr_seq_aprov_w;
		
		select	count(*)
		into STRICT	qt_existe_w
		from	qua_doc_aprov
		where	nr_seq_doc = nr_seq_docto_p
		and	(dt_aprovacao IS NOT NULL AND dt_aprovacao::text <> '')
		and	nr_sequencia <> nr_seq_aprov_w;
		
		if (qt_existe_w = 0) then
			CALL qua_gerar_envio_comunicacao(nr_seq_docto_p, '0', nm_usuario_p, '27', cd_estabelecimento_w, null, null, 'N');
		end if;		
		
		/*V se existe alguma aprovao pendente ainda, seno, aprova o documento*/

		select	count(*)
		into STRICT	qt_existe_w
		from	qua_doc_aprov
		where	nr_seq_doc	= nr_seq_docto_p
		and	coalesce(dt_aprovacao::text, '') = '';

		if (qt_existe_w = 0) then
			begin
			update	qua_documento
			set	dt_atualizacao	= clock_timestamp(), 
				nm_usuario	= nm_usuario_p, 
				dt_aprovacao	= dt_aprovacao_p,
				ie_status		= 'D',
				nm_usuario_aprov	= nm_usuario_p,
				dt_reprovacao		 = NULL
			where	nr_sequencia 	= nr_seq_docto_p;
			
			if (coalesce(ie_doc_lido_partic_w,'N') = 'S') then
				open C01;
				loop
				fetch C01 into	
					nm_usuario_partic_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
					insert into qua_doc_log_acesso(
						nr_sequencia,
						nr_seq_doc,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						dt_atualizacao,
						nm_usuario,
						dt_acesso,
						dt_leitura,
						ie_log,
						cd_estabelecimento,
						cd_funcao)
					values (	nextval('qua_doc_log_acesso_seq'),
						nr_seq_docto_p,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_partic_w,
						clock_timestamp(),
						clock_timestamp(),
						'C',
						cd_estabelecimento_w,
						wheb_usuario_pck.get_cd_funcao);
				end loop;
				close C01;
			end if;

			CALL qua_gerar_envio_comunicacao(nr_seq_docto_p, '0', nm_usuario_p, '10', cd_estabelecimento_w, null, null, 'N');
			CALL qua_gerar_envio_comunicacao(nr_seq_docto_p, '0', nm_usuario_p, '19', cd_estabelecimento_w, null, null, 'N');
			end;
		end if;
	end if;	
	end;	
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE qua_gerar_aprov_documento ( nr_seq_docto_p bigint, cd_pessoa_aprov_p text, dt_aprovacao_p timestamp, nm_usuario_p text) FROM PUBLIC;

