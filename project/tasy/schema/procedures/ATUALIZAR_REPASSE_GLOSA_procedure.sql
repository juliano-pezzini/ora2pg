-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_repasse_glosa ( NR_SEQ_RET_GLOSA_P bigint, NR_SEQ_REPASSE_P bigint, IE_ATUAL_PROPOR_REP_P text, NM_USUARIO_P text) AS $body$
DECLARE

 
cd_material_w		integer;
cd_proced_w		bigint;
ie_acao_glosa_w		varchar(1);
ie_status_w		varchar(1);
nr_seq_matpaci_w		bigint;
nr_seq_mat_rep_novo_w	bigint := NULL;
nr_seq_propaci_w		bigint;
nr_seq_proc_rep_novo_w	bigint := NULL;
nr_seq_ret_item_w		bigint;
vl_amaior_w		double precision;
vl_glosa_w		double precision;
vl_material_w		double precision;
vl_Procedimento_w		double precision;
vl_repasse_w		double precision;
vl_repasse_novo_w		double precision;
vl_vinculado_w		double precision;


BEGIN 
 
SELECT	a.nr_seq_ret_item, 
	a.vl_glosa, 
	a.cd_procedimento, 
	a.cd_material, 
	coalesce(a.ie_acao_glosa,b.ie_acao_glosa), 
	nr_seq_propaci, 
	nr_seq_matpaci, 
	a.vl_amaior 
INTO STRICT	nr_seq_ret_item_w, 
	vl_glosa_w, 
	cd_proced_w, 
	cd_material_w, 
	ie_acao_glosa_w, 
	nr_seq_propaci_w, 
	nr_seq_matpaci_w, 
	vl_amaior_w 
FROM convenio_retorno_glosa a
LEFT OUTER JOIN motivo_glosa b ON (a.cd_motivo_glosa = b.cd_motivo_glosa)
WHERE a.nr_sequencia = nr_seq_ret_glosa_p;
 
IF (cd_proced_w IS NOT NULL AND cd_proced_w::text <> '') THEN 
 
	if (vl_amaior_w > 0) then 
	 
		SELECT	vl_repasse, 
			ie_status 
		INTO STRICT	vl_repasse_w, 
			ie_status_w 
		FROM	procedimento_repasse 
		WHERE	nr_sequencia	= nr_seq_repasse_p;
 
		if (coalesce(nr_seq_propaci_w::text, '') = '') then 
 
			SELECT	max(nr_seq_procedimento) 
			INTO STRICT	nr_seq_propaci_w 
			FROM	procedimento_repasse 
			WHERE	nr_sequencia	= nr_seq_repasse_p;
 
		end if;
 
		SELECT 	coalesce(max(vl_Procedimento),0) 
		INTO STRICT	vl_Procedimento_w 
		FROM 	procedimento_paciente 
		WHERE	nr_sequencia	= nr_seq_propaci_w;
 
		IF (IE_ATUAL_PROPOR_REP_P = 'S') THEN 
			vl_repasse_novo_w := ((vl_repasse_w) + (vl_amaior_w * (dividir(vl_repasse_w,vl_Procedimento_w))));
--			vl_repasse_novo_w := ((vl_repasse_w) * (dividir((vl_amaior_w + vl_repasse_w),vl_Procedimento_w)));		 
		ELSE 
			vl_repasse_novo_w := vl_amaior_w + vl_repasse_w;
		END IF;
		 
		UPDATE	procedimento_repasse 
		SET	nr_seq_item_retorno	= nr_seq_ret_item_w, 
			nr_seq_ret_glosa	= nr_seq_ret_glosa_p, 
			vl_repasse		= vl_repasse_w, 
			vl_liberado		= vl_repasse_novo_w, 
			ie_status		= 'R', 
			dt_liberacao		= CASE WHEN ie_acao_glosa_w='R' THEN NULL  ELSE clock_timestamp() END , 
			nm_usuario		= nm_usuario_p, 
			dt_atualizacao		= clock_timestamp() 
		WHERE	nr_sequencia		= nr_seq_repasse_p;
 
	elsif (vl_glosa_w > 0) then 
 
		SELECT	coalesce(SUM(vl_repasse),0) 
		INTO STRICT	vl_vinculado_w 
		FROM	procedimento_repasse 
		WHERE	nr_seq_ret_glosa = nr_seq_ret_glosa_p;
 
		SELECT 	coalesce(max(vl_Procedimento),0) 
		INTO STRICT	vl_Procedimento_w 
		FROM 	procedimento_paciente 
		WHERE	nr_sequencia = nr_seq_propaci_w;
 
		IF (vl_vinculado_w < vl_glosa_w) THEN 
	 
			SELECT	vl_repasse, 
				ie_status 
			INTO STRICT	vl_repasse_w, 
				ie_status_w 
			FROM	procedimento_repasse 
			WHERE	nr_sequencia = nr_seq_repasse_p;
	 
			IF (IE_ATUAL_PROPOR_REP_P = 'S') THEN 
				vl_repasse_novo_w := (vl_repasse_w) * (dividir((vl_glosa_w - vl_vinculado_w),vl_Procedimento_w));
			ELSE 
				vl_repasse_novo_w := vl_glosa_w - vl_vinculado_w;
			END IF;
	 
			UPDATE procedimento_repasse 
			SET	nr_seq_item_retorno = nr_seq_ret_item_w, 
				nr_seq_ret_glosa = nr_seq_ret_glosa_p, 
				vl_repasse = vl_repasse_novo_w, 
				vl_liberado = 0, 
				ie_status = CASE WHEN ie_acao_glosa_w='R' THEN 'D'  ELSE 'G' END , 
				dt_liberacao = CASE WHEN ie_acao_glosa_w='R' THEN NULL  ELSE clock_timestamp() END , 
				nm_usuario = nm_usuario_p, 
				dt_atualizacao = clock_timestamp() 
			WHERE nr_sequencia = nr_seq_repasse_p;
	 
			IF	(vl_repasse_w > (vl_repasse_novo_w)) THEN 
				Desdobrar_ProcMat_Repasse(nr_seq_repasse_p, NULL, ie_status_w, (vl_repasse_w - (vl_repasse_novo_w)), nm_usuario_p, nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w);
				if (ie_status_w = 'R') then	-- Edgar 27/06/2008, OS 97204, desdobrar o valor liberado 
					update	procedimento_repasse 
					set	vl_liberado	= vl_repasse 
					where	nr_sequencia	= nr_seq_proc_rep_novo_w;
				end if;
			END IF;
 
		END IF;
	end if;
ELSE 
	if (vl_amaior_w > 0) then	 
 
		SELECT	vl_repasse, 
			ie_status 
		INTO STRICT	vl_repasse_w, 
			ie_status_w 
		FROM	material_repasse 
		WHERE	nr_sequencia = nr_seq_repasse_p;
 
		if (coalesce(nr_seq_matpaci_w::text, '') = '') then 
 
			SELECT	max(nr_seq_material) 
			INTO STRICT	nr_seq_matpaci_w 
			FROM	material_repasse 
			WHERE	nr_sequencia = nr_seq_repasse_p;
 
		end if;
	 
		SELECT 	coalesce(max(vl_material),0) 
		INTO STRICT	vl_material_w 
		FROM 	material_atend_paciente 
		WHERE	nr_sequencia = nr_seq_matpaci_w;
	 
		IF (IE_ATUAL_PROPOR_REP_P = 'S') THEN 
			vl_repasse_novo_w := ((vl_repasse_w) * (dividir((vl_amaior_w + vl_repasse_w),vl_material_w)));
		ELSE 
			vl_repasse_novo_w := vl_amaior_w + vl_repasse_w;
		END IF;
 
		UPDATE	material_repasse 
		SET	nr_seq_item_retorno	= nr_seq_ret_item_w, 
			nr_seq_ret_glosa	= nr_seq_ret_glosa_p, 
			vl_repasse		= vl_repasse_w, 
			vl_liberado		= vl_repasse_novo_w, 
			ie_status		= 'R', 
			dt_liberacao		= CASE WHEN ie_acao_glosa_w='R' THEN NULL  ELSE clock_timestamp() END , 
			nm_usuario		= nm_usuario_p, 
			dt_atualizacao		= clock_timestamp() 
		WHERE nr_sequencia		= nr_seq_repasse_p;
 
	elsif (vl_glosa_w > 0) then 
		 
		SELECT	coalesce(SUM(vl_repasse),0) 
		INTO STRICT	vl_vinculado_w 
		FROM	material_repasse 
		WHERE	nr_seq_ret_glosa = nr_seq_ret_glosa_p;
	 
		IF (vl_vinculado_w < vl_glosa_w) THEN 
		 
			if (coalesce(nr_seq_matpaci_w::text, '') = '') then 
 
				SELECT	max(nr_seq_material) 
				INTO STRICT	nr_seq_matpaci_w 
				FROM	material_repasse 
				WHERE	nr_sequencia = nr_seq_repasse_p;
 
			end if;
	 
			SELECT 	coalesce(max(vl_material),0) 
			INTO STRICT	vl_material_w 
			FROM 	material_atend_paciente 
			WHERE	nr_sequencia = nr_seq_matpaci_w;
	 
			SELECT	vl_repasse, 
				ie_status 
			INTO STRICT	vl_repasse_w, 
				ie_status_w 
			FROM	material_repasse 
			WHERE	nr_sequencia = nr_seq_repasse_p;
	 
			IF (IE_ATUAL_PROPOR_REP_P = 'S') THEN 
				vl_repasse_novo_w := (vl_repasse_w) * (dividir((vl_glosa_w - vl_vinculado_w),vl_material_w));
			ELSE 
				vl_repasse_novo_w := vl_glosa_w - vl_vinculado_w;
			END IF;
	 
			UPDATE material_repasse 
			SET	nr_seq_item_retorno = nr_seq_ret_item_w, 
				nr_seq_ret_glosa = nr_seq_ret_glosa_p, 
				vl_repasse = (vl_repasse_novo_w), 
				vl_liberado = 0, 
				ie_status = CASE WHEN ie_acao_glosa_w='R' THEN 'D'  ELSE 'G' END , 
				dt_liberacao = CASE WHEN ie_acao_glosa_w='R' THEN NULL  ELSE clock_timestamp() END , 
				nm_usuario = nm_usuario_p, 
				dt_atualizacao = clock_timestamp() 
			WHERE nr_sequencia = nr_seq_repasse_p;
	 
			IF	(vl_repasse_w > (vl_repasse_novo_w)) THEN 
				Desdobrar_ProcMat_Repasse(NULL, nr_seq_repasse_p, ie_status_w, (vl_repasse_w - (vl_repasse_novo_w)), nm_usuario_p, nr_seq_proc_rep_novo_w, nr_seq_mat_rep_novo_w);
			END IF;
		END IF;
	END IF;
end if;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_repasse_glosa ( NR_SEQ_RET_GLOSA_P bigint, NR_SEQ_REPASSE_P bigint, IE_ATUAL_PROPOR_REP_P text, NM_USUARIO_P text) FROM PUBLIC;

