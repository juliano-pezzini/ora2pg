-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE html_alterar_estagio_autmatesp ( nr_sequencia_autor_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_opcao_p text) AS $body$
DECLARE


/*
ie_opcao_p:
L 	- Liberar
DL	- Desfazer liberacao
AUT  	- Autorizar
DA  	- Desfazer autorizacao
*/
cd_procedimento_w    	bigint;
ds_erro_w      		varchar(4000);
ieTipoPrecoLiberacao_w    	varchar(10);
ieAutorizarSemSenha_w    	varchar(10);
ieAtualOpmeSomenteAutor_w  varchar(10);
ieAtualizaQtdAprov_w    	varchar(10);
ieAtualizarAutorConv_w    	varchar(10);
nr_seq_estagio_w    	bigint;
nr_seq_estagio_param_w    	varchar(10);
nr_sequencia_Estagios_w    varchar(255);
nr_seq_estagio_novo_w    	varchar(255);
nr_seq_autor_cirurgia_W    varchar(10);
ie_estagio_autor_w      	varchar(10);
ie_seq_estagio_novo_w    	varchar(255);
cd_senha_w      		autorizacao_cirurgia.cd_senha%type;
nr_seq_agenda_w      	autorizacao_cirurgia.nr_seq_agenda%type;
nr_seq_autor_conv_w    	autorizacao_cirurgia.nr_seq_autor_conv%type;
aux_w 			varchar(255);
aux2_w 			varchar(255);
valor_corrente_w 		varchar(10);
qtd_loop_w 		bigint;
pos_ini_w 		bigint;
pos_fim_w 		bigint;
length_w 		bigint;


BEGIN

ieTipoPrecoLiberacao_w  := obter_param_usuario(39, 44, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p, ieTipoPrecoLiberacao_w );
ieAutorizarSemSenha_w  := obter_param_usuario(3006, 53, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p, ieAutorizarSemSenha_w );
ieAtualOpmeSomenteAutor_w  := obter_param_usuario(3006, 29, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p, ieAtualOpmeSomenteAutor_w );
ieAtualizaQtdAprov_w  := obter_param_usuario(3006, 25, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p, ieAtualizaQtdAprov_w );
ieAtualizarAutorConv_w  := obter_param_usuario(3006, 39, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p, ieAtualizarAutorConv_w );
nr_seq_estagio_param_w  := obter_param_usuario(3006, 51, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p, nr_seq_estagio_param_w );
nr_sequencia_Estagios_w  := obter_param_usuario(3006, 17, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p, nr_sequencia_Estagios_w );

select  max(cd_procedimento),
  max(cd_senha),
  max(nr_seq_agenda),
  max(nr_seq_autor_conv)
into STRICT  cd_procedimento_w,
  cd_senha_w,
  nr_seq_agenda_w,
  nr_seq_autor_conv_w
from  autorizacao_cirurgia
where  nr_sequencia  = nr_sequencia_autor_p;

if (ie_opcao_p = 'L') then
	if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') then
	    ds_erro_w := consistir_autor_cirurgia(nr_sequencia_autor_p, cd_estabelecimento_p, ds_erro_w);
    		if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
    		end if;
  	end if;
	
	ds_erro_w  := null;
	ds_erro_w := consistir_material_autor_cir(nr_sequencia_autor_p, cd_estabelecimento_p, nm_usuario_p, ds_erro_w);

	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		--Quantidade de fornecedores menor que a quantidade minima exigida.
		CALL wheb_mensagem_pck.exibir_mensagem_abort(373123,'ds_erro_p='||ds_erro_w);
	end if;

	select  max(nr_seq_autor_cirurgia)
	into STRICT  nr_seq_autor_cirurgia_W
	from  autorizacao_convenio
	where  nr_seq_autor_cirurgia  = nr_sequencia_autor_p;

	select  max(ie_estagio_autor)
	into STRICT  ie_estagio_autor_w
	from  autorizacao_cirurgia
	where  nr_sequencia  = nr_sequencia_autor_p;

	if (position(',' in nr_sequencia_Estagios_w) > 0) then
		nr_seq_estagio_novo_w := '';
		aux_w:=','||nr_sequencia_Estagios_w||',';
		aux2_w:= replace(aux_w, ',', '');
		qtd_loop_w := length(aux_w) - length(aux2_w);

		for i in 1..qtd_loop_w loop
			pos_ini_w := instr(aux_w,',',1,i) +1;
			pos_fim_w := instr(aux_w,',',2,i);
			length_w := pos_fim_w - pos_ini_w;
			valor_corrente_w:=substr(aux_w,pos_ini_w,length_w);

			if (valor_corrente_w = ie_estagio_autor_w) then
				nr_seq_estagio_novo_w := substr(nr_sequencia_Estagios_w, position(valor_corrente_w in nr_sequencia_Estagios_w) + length(valor_corrente_w) + 1,length(nr_sequencia_Estagios_w));
				if (position(',' in nr_seq_estagio_novo_w) > 0) then
					nr_seq_estagio_novo_w := substr(nr_seq_estagio_novo_w,1,position(',' in nr_seq_estagio_novo_w)-1);
				end if;
			exit;
			end if;
		end loop;
	end if;

	ie_seq_estagio_novo_w := '';
	if (nr_seq_estagio_novo_w IS NOT NULL AND nr_seq_estagio_novo_w::text <> '') then
	
		select coalesce(substr(obter_valor_dominio(3116,nr_seq_estagio_novo_w),1,255),null)
		into STRICT ie_seq_estagio_novo_w
		;
		
		if (ie_seq_estagio_novo_w IS NOT NULL AND ie_seq_estagio_novo_w::text <> '') then
			CALL atualizar_estagio_autor_cir(nr_seq_estagio_novo_w,nr_seq_autor_cirurgia_W,nm_usuario_p);
		end if;
	end if;

	ieTipoPrecoLiberacao_w := obter_param_usuario(39, 44, obter_perfil_Ativo, nm_usuario_p, cd_estabelecimento_p, ieTipoPrecoLiberacao_w);
	CALL Atualizar_autor_cir_emissao(nr_sequencia_autor_p,cd_estabelecimento_p,nm_usuario_p,ieTipoPrecoLiberacao_w);

elsif (ie_opcao_p = 'DL') then

	select  max(nr_seq_autor_cirurgia)
	into STRICT  nr_seq_autor_cirurgia_W
	from  autorizacao_convenio
	where  nr_seq_autor_cirurgia  = nr_sequencia_autor_p;

	select  max(ie_estagio_autor)
	into STRICT  ie_estagio_autor_w
	from  autorizacao_cirurgia
	where  nr_sequencia  = nr_sequencia_autor_p;

	CALL Desfazer_Liberacao_autor(nr_sequencia_autor_p,nm_usuario_p);
	
elsif (ie_opcao_p = 'AUT') then
	if (ieAutorizarSemSenha_w = 'N') and (coalesce(cd_senha_w::text, '') = '') then
		--Para autorizar e necessario informar a senha!'
		CALL wheb_mensagem_pck.exibir_mensagem_abort(266670);
	end if;

	CALL atualizar_dt_autorizacao_cir(1,nr_sequencia_autor_p,nm_usuario_p);

	if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then
		if (ieAtualOpmeSomenteAutor_w = 'S') or (ieAtualOpmeSomenteAutor_w = 'A') then
			CALL ATUALIZAR_AGENDA_PAC_OPME(nr_sequencia_autor_p,nr_seq_agenda_w,nm_usuario_p);
		else
			CALL ATUALIZAR_IE_AGENDA_PAC_OPME(nr_seq_agenda_w,'A',nm_usuario_p);
		end if;
	end if;

	if (ieAtualizaQtdAprov_w = 'S') then
		CALL ATUALIZAR_QT_MAT_AUTOR_CIR(nr_sequencia_autor_p,nm_usuario_p);
	end if;

	if (ieAtualizarAutorConv_w = 'S') then
		if (coalesce(nr_seq_autor_conv_w::text, '') = '') then

			select  max(nr_sequencia),
			max(nr_seq_estagio)
			into STRICT  nr_seq_autor_conv_w,
			nr_seq_estagio_w
			from  autorizacao_convenio
			where  nr_seq_autor_cirurgia  = nr_sequencia_autor_p;
		else
			select  max(nr_sequencia),
			max(nr_seq_estagio)
			into STRICT  nr_seq_autor_conv_w,
			nr_seq_estagio_w
			from  autorizacao_convenio
			where  nr_sequencia    = nr_seq_autor_conv_w;
		end if;

		if (somente_numero(nr_seq_estagio_param_w) > 0) then
			nr_seq_estagio_w  := somente_numero(nr_seq_estagio_param_w);
		end if;
		
		if (nr_seq_autor_conv_w IS NOT NULL AND nr_seq_autor_conv_w::text <> '') then
			CALL atualizar_autorizacao_convenio(nr_seq_autor_conv_w,nm_usuario_p,nr_seq_estagio_w,'N','N','S');
		end if;
	end if;
	CALL gerar_evento_autor_mat_espec(nr_sequencia_autor_p,nm_usuario_p);

elsif (ie_opcao_p = 'DA') then
	CALL atualizar_dt_autorizacao_cir(2,nr_sequencia_autor_p,nm_usuario_p);
	CALL gerar_evento_autor_mat_espec(nr_sequencia_autor_p,nm_usuario_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE html_alterar_estagio_autmatesp ( nr_sequencia_autor_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_opcao_p text) FROM PUBLIC;

