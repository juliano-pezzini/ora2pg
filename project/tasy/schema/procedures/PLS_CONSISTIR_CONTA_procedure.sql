-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE mat AS (  nr_seq_conta_mat  bigint,
      nr_seq_material    bigint);


CREATE OR REPLACE PROCEDURE pls_consistir_conta ( nr_seq_conta_p pls_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text, ie_protocolo_inteiro_p text, ie_xml_p text, ie_origem_regra_p text, ie_atualiza_agrup_p text, ie_estagio_geracao_p text default 'T', ie_analise_p text default 'N') AS $body$
DECLARE

/*
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
********* SE FOR ALTERAR ALGUMA COISA NESTA ROTINA, FAVOR VERIFICAR A pls_consiste_glosa_proc. ELA e UTILIZADA NO NOVO PROCESSO DE CONTAS MEDICAS E  ************************
********* FOI CRIADA COM BASE NESTA ROTINA. HOUVE DUPLICACAO DE CODIGO PARA MANTERMOS AS GLOSAS FUNCIONANDO NOS DOIS MODELOS ****************************************
**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************************
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*/


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Realizar a consistencia de informacoes relacionadas a conta apresentada pelo prestador.
*/
nr_seq_tipo_acomodacao_w  	pls_conta.nr_seq_tipo_acomodacao%type;
nr_seq_protocolo_w    		pls_protocolo_conta.nr_sequencia%type;
nr_seq_segurado_w    		pls_segurado.nr_sequencia%type;
nr_seq_prestador_w    		pls_prestador.nr_sequencia%type;
nr_seq_plano_w      		pls_guia_plano.nr_sequencia%type;
cd_guia_w      			pls_conta.cd_guia%type;
cd_guia_referencia_w    	pls_conta.cd_guia_referencia%type;
cd_guia_conta_w     	 	varchar(20);
nr_seq_guia_w      		pls_guia_plano.nr_sequencia%type;
ie_status_guia_w    		pls_guia_plano.ie_status%type;
ie_tipo_guia_w      		pls_conta.ie_tipo_guia%type;
nr_seq_guia_ref_w   	 	pls_guia_plano.nr_sequencia%type;
nr_seq_segurado_guia_w    	pls_segurado.nr_sequencia%type;
nr_seq_prestador_exec_w    	pls_prestador.nr_sequencia%type;
cd_medico_executor_w    	pessoa_fisica.cd_pessoa_fisica%type;
qt_itens_w      		integer;
qt_diagnostico_w   	 	integer;
ie_regime_internacao_w    	pls_conta.ie_regime_internacao%type;
ie_consistir_guia_w    		pls_conta.ie_exige_autorizacao%type;
nr_seq_tipo_atendimento_w  	pls_tipo_atendimento.nr_sequencia%type;
nr_seq_saida_spsadt_w    	pls_conta.nr_seq_saida_spsadt%type;
cd_tiss_tipo_atendimento_w  	pls_tipo_atendimento.cd_tiss%type;
nr_seq_cbo_saude_w    		cbo_saude.nr_sequencia%type;
nr_seq_conselho_exec_w    	bigint;
ie_tipo_segurado_w    		pls_segurado.ie_tipo_segurado%type;
ie_situacao_atend_w   	 	varchar(1);
nr_seq_conta_mat_w    		bigint;
dt_ref_atendimento_w      	timestamp;
dt_envio_contas_w    		timestamp;
dt_validade_carteira_w    	varchar(30);
ie_origem_conta_w    		pls_conta.ie_origem_conta%type;
ie_tipo_conta_w      		varchar(10);
cd_unimed_origem_w   	 	bigint;
cd_unimed_destino_w    		bigint;
nr_seq_congenere_w    		pls_congenere.nr_sequencia%type;
qt_cbo_ativo_w      		integer;
cd_cooperativa_w    		pls_congenere.cd_cooperativa%type;
cd_usuario_plano_w    		varchar(30);
dt_inicio_vigencia_w   	 	timestamp;
dt_contratacao_w    		timestamp;
dt_rescisao_w      		timestamp;
dt_limite_utilizacao_w    	timestamp;
dt_recebimento_fatura_w    	timestamp;
nr_seq_regra_w      		bigint;
ie_permite_w      		varchar(1);
nr_seq_material_w    		pls_material.nr_sequencia%type;
nr_seq_prest_guia_execu_w  	pls_prestador.nr_sequencia%type;
ie_tipo_guia_prot_w    		varchar(10);
ds_obs_glosa_w      		varchar(255);
ie_tipo_acomodacao_guia_w  	varchar(2);
dt_protocolo_w      		timestamp;
ie_tipo_acomodacao_ptu_w  	varchar(2);
nr_seq_fatura_w     	 	bigint;
nr_seq_cbo_saude_med_w    	bigint;
nm_prestador_w      		varchar(255);
nr_seq_conta_ref_w    		bigint;
nr_seq_prestador_dif_w    	bigint;
qt_dias_envio_contas_w    	integer;
nr_seq_contrato_w      		bigint;
ie_tipo_beneficiario_w    	varchar(5);
ie_tipo_plano_w      		varchar(5);
ie_tipo_contratacao_w    	varchar(2);
ie_participacao_w    		varchar(1);
ie_preco_plano_w    		varchar(2);
dt_ref_glosa_w      		timestamp;
dt_max_item_w      		timestamp;
dt_max_proc_w      		timestamp;
dt_max_mat_w      		timestamp;
nr_seq_analise_w    		bigint;
ie_reconsistencia_w     	varchar(1) := 'N';
ie_internacao_w      		varchar(1) := 'N';
ds_tipo_guia_ref_w   	 	varchar(100);
ie_tipo_guia_ref_w    		varchar(2);
ie_evento_w      		varchar(2);
ie_tipo_gat_w      		varchar(10);
dt_validade_senha_w    		timestamp;
cd_senha_externa_w    		varchar(30);
ie_tipo_pagador_w    		varchar(2);
qt_dias_vencido_w    		bigint;
qt_existe_fat_w      		bigint;
nr_seq_clinica_guia_w    	bigint;
nr_seq_clinica_w    		bigint;
nr_seq_guia_ww      		bigint;
cd_senha_externa_ww    		varchar(30);
ie_atualiza_apresentado_w  	varchar(1);
ie_prioridade_tx_item_w    	varchar(2);
ie_status_item_analise_w  	varchar(2);
nr_seq_diagostico_w    		bigint;
cd_doenca_alta_w    		varchar(10);
cd_doenca_imp_w      		varchar(10);
qt_regra_abert_w    		bigint;
ie_utilizar_regra_mat_w    	varchar(1)  := 'N';
ie_obriga_vinc_mat_w    	varchar(255);
nr_seq_regra_intercambio_w  	bigint;
qt_dias_envio_conta_w    	bigint;
dt_atendimento_w    		timestamp;
dt_permitida_w      		timestamp;
dados_conta_w      		pls_cta_valorizacao_pck.dados_conta;
dados_prestador_exec_w    	pls_cta_valorizacao_pck.dados_prestador_exec;
dados_prestador_prot_w    	pls_cta_valorizacao_pck.dados_prestador_prot;
dados_prestador_solic_w    	pls_cta_valorizacao_pck.dados_prestador_solic;
nr_seq_prestador_conta_w  	pls_conta.nr_seq_prestador%type;
nr_seq_log_exec_w    		pls_cta_log_exec.nr_sequencia%type;
qt_glosa_ativa_w    		integer;
qt_pls_resumo_w      		integer;
qt_qtde_exec_w      		integer;
qt_procedimento_w    		integer;
qt_via_acesso_w      		integer;
cd_versao_tiss_w    		pls_protocolo_conta.cd_versao_tiss%type;
nr_seq_saida_int_w		pls_conta.nr_seq_saida_int%type;
ds_motivo_saida_w		pls_conta.ds_motivo_saida%type;
ie_tipo_internado_w		pls_conta.ie_tipo_internado%type;

ie_origem_filtro_w		varchar(1);
nr_seq_guia_cta_w		pls_guia_plano.nr_sequencia%type;
cd_guia_ok_w			pls_conta.cd_guia_ok%type;
qt_reg_w			integer;
nr_seq_tipo_acomodacao_guia_w	pls_guia_plano.nr_seq_tipo_acomodacao%type;
nr_seq_guia_principal_w		pls_guia_plano.nr_sequencia%type;
ie_gestao_conta_medica_w	pls_controle_estab.ie_gestao_conta_medica%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
nr_seq_atualizacao_w		pls_atualizacao_contabil.nr_sequencia%type;
qt_movimento_w			bigint;
qt_mov_ppsc_w			bigint;
qt_mov_ppsc_item_w		bigint;
dt_referencia_month_w		timestamp;
dt_referencia_w			timestamp;
ie_data_lote_desp_conta_w	pls_parametro_contabil.ie_data_lote_desp_conta%type;
ie_prestador_codificacao_w	pls_esquema_contabil.ie_prestador_codificacao%type;
qt_prest_pgto_w			bigint;
qt_outro_w			bigint;
cd_empresa_w			estabelecimento.cd_empresa%type;
ie_status_prov_pagto_w		pls_parametro_contabil.ie_status_prov_pagto%type;
ie_lote_ajuste_prod_w		pls_parametro_contabil.ie_status_prov_pagto%type;
ds_observacao_data_w		pls_conta_glosa.ds_observacao%type;
ie_consist_comp_fechada_w	pls_parametros.ie_consist_comp_fechada%type;
dt_mes_competencia_w		pls_protocolo_conta.dt_mes_competencia%type;
dt_fechamento_w			pls_competencia.dt_fechamento%type;
ie_status_w			pls_conta.ie_status%type;
dt_valid_senha_pror_w		pls_guia_plano.dt_validade_senha%type;
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;
dt_alta_conta_ref_w		pls_conta.dt_atendimento%type;
dt_comparar_w			timestamp;
ie_validar_prazo_env_princ_w	pls_parametros.ie_validar_prazo_env_princ%type;	
ie_gerar_Previa_pos_w		pls_parametros.ie_gerar_previa_pos%type;
ie_geracao_pos_estab_w		pls_parametros.ie_geracao_pos_estabelecido%type;
qt_reg_prev_w			integer := 0;
nr_seq_tipo_conta_w		pls_conta.nr_seq_tipo_conta%type;
ie_obter_tipo_conta_req_w	pls_parametros.ie_obter_tipo_conta_req%type := 'N';
ie_regime_atendimento_w		pls_conta.ie_regime_atendimento%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_procedimento,
		a.ie_tipo_despesa
	from  	pls_conta_proc a,
		pls_conta b
	where  	a.nr_seq_conta  = b.nr_sequencia
	and	b.nr_sequencia  = nr_seq_conta_p
	and  	a.ie_status  	not in ( 'D','M')
	order by a.vl_procedimento desc;

C02 CURSOR FOR
	SELECT  nr_sequencia,
		nr_seq_material
	from  	pls_conta_mat
	where  	nr_seq_conta  = nr_seq_conta_p
	and  ie_status  not in ( 'D','M')
	order by vl_material desc;

type vetor_mat is table of mat index by integer;

/* Vetores */

vetor_mat_w    vetor_mat;
total_mat    bigint  := 1;
ind_mat      bigint  := 1;

BEGIN

select	ie_status
into STRICT	ie_status_w
from	pls_conta
where	nr_sequencia = nr_seq_conta_p;

if (ie_status_w = 'F') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(991083,'NR_SEQ_CONTA=' ||nr_seq_conta_p);
end if;

-- atualizacao de alguns campos que tem valor nulo
CALL pls_cta_consistir_pck.atualiza_dados_null(nr_seq_conta_p);
-- gerencia a atualizacao da tabela TM para estrutura de materiais
CALL pls_gerencia_upd_obj_pck.atualizar_objetos('tasy', 'PLS_CONSISTIR_CONTA', 'PLS_ESTRUTURA_MATERIAL_TM');
-- gerencia a atualizacao da tabela TM para grupos de servico
CALL pls_gerencia_upd_obj_pck.atualizar_objetos('tasy', 'PLS_CONSISTIR_CONTA', 'PLS_GRUPO_SERVICO_TM');
-- gerencia a atualizacao da tabela TM para grupos de meteriais
CALL pls_gerencia_upd_obj_pck.atualizar_objetos(nm_usuario_p, 'PLS_CONSISTIR_CONTA', 'PLS_GRUPO_MATERIAL_TM');

CALL pls_grava_log_execucao_temp('Inicio updates e lancamentos diversos conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);

CALL pls_alimenta_tb_proc_regra(nr_seq_conta_p,nm_usuario_p);
CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_conta_proc(nr_seq_conta_p,nm_usuario_p);
CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_conta_mat(nr_seq_conta_p,nm_usuario_p);

nr_seq_atualizacao_w := 0;

qt_movimento_w 		:= 0;

select 	max(a.dt_mes_competencia)
into STRICT	dt_referencia_w
from	pls_protocolo_conta	a,
	pls_conta		b
where 	a.nr_sequencia = b.nr_seq_protocolo
and	b.nr_sequencia = nr_seq_conta_p;

dt_referencia_month_w	:= trunc(dt_referencia_w,'month');

select	max(coalesce(ie_data_lote_desp_conta,'CO'))
into STRICT	ie_data_lote_desp_conta_w
from	pls_parametro_contabil
where	cd_estabelecimento	= cd_estabelecimento_w;

--necessario verificar se existe regra para o estabelecimento, evitando assim que ao continuar o processo(consistir mat e proc) nao de erro 
select 	sum(qt)
into STRICT	qt_reg_w
from (	SELECT	count(1) qt
		from	pls_parametros
		where	(ie_gerar_glosa_valor_zerado IS NOT NULL AND ie_gerar_glosa_valor_zerado::text <> '')
		and	cd_estabelecimento  = cd_estabelecimento_p
		
union all

		SELECT	count(1) qt
		from	pls_parametros
		where	(ie_carencia_abrangencia_ant IS NOT NULL AND ie_carencia_abrangencia_ant::text <> '')
		and	cd_estabelecimento  = cd_estabelecimento_p) alias5;
		
if (qt_reg_w = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(460336);
end if;		

select	sum(CASE WHEN ie_prestador_codificacao='P' THEN  1  ELSE 0 END ) qt_prest_pgto,
	sum(CASE WHEN ie_prestador_codificacao='P' THEN  0  ELSE 1 END ) qt_outro
into STRICT	qt_prest_pgto_w,
	qt_outro_w
from	pls_esquema_contabil
where	ie_tipo_regra		= 'PP'
and	cd_estabelecimento = cd_estabelecimento_p
and	dt_referencia_month_w between dt_inicio_vigencia and coalesce(dt_fim_vigencia, dt_referencia_month_w);

select	max(cd_empresa)
into STRICT	cd_empresa_w
from	estabelecimento
where	cd_estabelecimento	= cd_estabelecimento_p;

select	max(coalesce(ie_status_prov_pagto,'NC')),
	max(coalesce(ie_lote_ajuste_prod,'R'))
into STRICT	ie_status_prov_pagto_w,
	ie_lote_ajuste_prod_w
from	pls_parametro_contabil
where	cd_estabelecimento	= cd_estabelecimento_p;

/* Obriga vinculo entre material da operadora e hospital */

select  coalesce(max(ie_obriga_vinc_mat),'N'),
	coalesce(max(ie_atualizar_valor_apresent),'N'),
	coalesce(max(ie_prioridade_tx_item),'VA'),
	coalesce(max(ie_consist_comp_fechada),'N'),
	coalesce(max(ie_validar_prazo_env_princ),'N'),
	coalesce(max(ie_gerar_Previa_pos), 'N'),
	coalesce(max(ie_geracao_pos_estabelecido),'F'),
	coalesce(max(ie_obter_tipo_conta_req),'N')
into STRICT  	ie_obriga_vinc_mat_w,
	ie_atualiza_apresentado_w,
	ie_prioridade_tx_item_w,
	ie_consist_comp_fechada_w,
	ie_validar_prazo_env_princ_w,
	ie_gerar_Previa_pos_w,
	ie_geracao_pos_estab_w,
	ie_obter_tipo_conta_req_w
from  	pls_parametros
where  	cd_estabelecimento  = cd_estabelecimento_p;

/*Diego 18/03/2012 - Na consistencia da conta, ate ser verificado a criacao de pos, a conta nao possui faturamento.*/

update  pls_conta
set  	ie_status_fat    = 'N',
	dt_inicio_consistencia  = clock_timestamp()
where  	nr_sequencia  	= nr_seq_conta_p;

/* Executar a regra de itens de lancamento automatico que estao  para consistencia de conta */

CALL pls_lanc_auto_item_consist(nr_seq_conta_p,cd_estabelecimento_p,nm_usuario_p);

if (coalesce(ie_atualiza_agrup_p,'S') = 'S') then
	update  pls_conta_proc
	set  	ie_regra_qtde_execucao  = 'N',
		nr_seq_regra_qtde_exec   = NULL
	where  	nr_seq_conta    = nr_seq_conta_p;
end if;
/* Francisco - 31/10/2012 - OS 513343 */

update	pls_conta_proc
set	ie_status_pagamento  = 'I'
where	nr_seq_conta = nr_seq_conta_p
and	coalesce(ie_status_pagamento::text, '') = '';

update	pls_conta_mat
set	ie_status_pagamento  = 'I'
where	nr_seq_conta = nr_seq_conta_p
and	coalesce(ie_status_pagamento::text, '') = '';

update	pls_proc_participante a
set	ie_status_pagamento  = 'I'
where	coalesce(ie_status_pagamento::text, '') = ''
and 	exists (	SELECT  1
			from  pls_conta_proc x
			where  x.nr_sequencia = a.nr_seq_conta_proc
			and  x.nr_seq_conta  = nr_seq_conta_p);
			
/* Fim Francisco - 31/10/2012 - OS 513343 */

CALL pls_grava_log_execucao_temp('Fim updates e lancamentos diversos conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);

CALL pls_grava_log_execucao_temp('Inicio Regra Caracteristicas conta X Caracteristicas do item conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
-- Regra Caracteristicas conta X Caracteristicas do item.
CALL pls_cta_consist_carac_item_pck.gerencia_liberacao_itens(null, null, nr_seq_conta_p, null, cd_estabelecimento_p, nm_usuario_p);
CALL pls_grava_log_execucao_temp('Fim Regra Caracteristicas conta X Caracteristicas do item conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);

if (coalesce(ie_protocolo_inteiro_p,'N') = 'N') then
  /*atualiza a view responsavel por ordenar as regras de preco quando existir regra de ordenacao*/

	CALL pls_grava_log_execucao_temp('Inicio geracao views regra de preco conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	CALL pls_cta_consistir_pck.gera_views_valorizacao();
	CALL pls_grava_log_execucao_temp('Fim geracao views regra de preco conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
end if;

ie_evento_w  := 'CC';

CALL pls_grava_log_execucao_temp('Inicio obtencao de dados conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
/* Obter dados da conta */

select  cd_guia,
	cd_guia_referencia,
	coalesce(cd_guia_referencia, cd_guia),
	nr_seq_tipo_acomodacao,
	nr_seq_protocolo,
	nr_seq_segurado,
	coalesce(ie_tipo_guia,'X'),
	coalesce(nr_seq_prestador_exec,0),
	cd_medico_executor,
	ie_regime_internacao,
	nr_seq_tipo_atendimento,
	nr_seq_saida_spsadt,
	nr_seq_cbo_saude,
	nr_seq_conselho_exec,
	ie_origem_conta,
	nr_seq_fatura,
	nr_seq_analise,
	cd_senha_externa,
	dt_atendimento_referencia,
	ie_tipo_acomodacao_ptu,
	nr_seq_guia,
	nr_seq_prestador,
	nr_seq_prestador_solic_ref,
	nr_seq_saida_int,
	CASE WHEN pls_obter_se_internado(nr_sequencia,null, ie_tipo_guia, nr_seq_tipo_atendimento, null, cd_estabelecimento_p, 'N',		ie_regime_atendimento, ie_saude_ocupacional, dt_atendimento_referencia)='S' THEN 'I'  ELSE 'A' END  ie_tipo_internado,
	nr_seq_clinica,
	cd_estabelecimento,
	ie_tipo_segurado,
	ie_regime_atendimento
into STRICT	cd_guia_w,
	cd_guia_referencia_w,
	cd_guia_conta_w,
	nr_seq_tipo_acomodacao_w,
	nr_seq_protocolo_w,
	nr_seq_segurado_w,
	ie_tipo_guia_w,
	nr_seq_prestador_exec_w,
	cd_medico_executor_w,
	ie_regime_internacao_w,
	nr_seq_tipo_atendimento_w,
	nr_seq_saida_spsadt_w,
	nr_seq_cbo_saude_w,
	nr_seq_conselho_exec_w,
	ie_origem_conta_w,
	nr_seq_fatura_w,
	nr_seq_analise_w,
	cd_senha_externa_ww,
	dt_ref_atendimento_w,
	ie_tipo_acomodacao_ptu_w,
	nr_seq_guia_w,
	nr_seq_prestador_conta_w,
	dados_prestador_solic_w.nr_seq_prestador,
	nr_seq_saida_int_w,
	ie_tipo_internado_w,
	nr_seq_clinica_w,
	cd_estabelecimento_w,
	ie_tipo_segurado_w,
	ie_regime_atendimento_w
from	pls_conta
where	nr_sequencia  = nr_seq_conta_p;


if (ie_origem_conta_w = 'A' and ie_tipo_guia_w = '4') then
	--obtem os dados de identificacao do profissional principal da equipe participante(contidos 

	--na ptu_nota_servico_equipe ) e popula da pls_conta_proc_regra
	CALL pls_def_dados_part_priori_ptu(nr_seq_conta_p, nm_usuario_p);

end if;

select  count(1)
into STRICT	qt_reg_w
from    pls_lote_protocolo_conta l,
	pls_protocolo_conta a
where   l.nr_sequencia 	= a.nr_seq_lote_conta
and     a.nr_sequencia 	= nr_seq_protocolo_w
and	l.ie_status 	= 'X';
		
if (qt_reg_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(779640);
end if;	

ie_gestao_conta_medica_w := pls_obter_se_controle_estab('GCM');
if (coalesce(ie_gestao_conta_medica_w,'N') = 'S') then

	if (cd_estabelecimento_w <> cd_estabelecimento_p) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(786746);
	end if;
end if;

select	substr(max(ds_motivo_saida),1,255)
into STRICT	ds_motivo_saida_w
from	pls_motivo_saida
where	nr_sequencia	= nr_seq_saida_int_w;

if (ie_origem_conta_w = 'A') then
	CALL pls_alimenta_ptu_redundancia(nr_seq_conta_p);
end if;

-- se nao for chamado pelo lote de analise entao precisa chamar para alimentar o campo nr_seq_conta_princ

-- incluido para gerar os registros na conta_mat_regra e conta_proc_regra
if (coalesce(ie_protocolo_inteiro_p,'N') = 'N') and (coalesce(ie_atualiza_agrup_p,'S') = 'S') then

	CALL pls_insere_conta_princ(null, null, nr_seq_conta_p);
	CALL pls_filtro_regra_preco_cta_pck.cria_registro_regra(	'P', null, null,
								null, nr_seq_conta_p, null,
								null, null, cd_estabelecimento_p,
								nm_usuario_p);
	CALL pls_insere_guia_proc_mat( nr_seq_conta_p, nm_usuario_p);
end if;

/* Obter dados do protocolo */

select	ie_tipo_guia,
	nr_seq_prestador,
	trunc(a.dt_protocolo),
	cd_versao_tiss,
	trunc(dt_mes_competencia, 'mm')
into STRICT	ie_tipo_guia_prot_w,
	nr_seq_prestador_w,
	dt_protocolo_w,
	cd_versao_tiss_w,
	dt_mes_competencia_w
from	pls_protocolo_conta a
where	a.nr_sequencia  = nr_seq_protocolo_w;

if (ie_consist_comp_fechada_w = 'S') then
	
	select	max(dt_fechamento)
	into STRICT	dt_fechamento_w
	from	pls_competencia
	where	dt_mes_competencia = dt_mes_competencia_w;
	
	if (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(obter_desc_expressao_idioma(786797, null, null));
	end if;
end if;

dados_conta_w.nr_sequencia := nr_seq_conta_p;

dados_prestador_exec_w.nr_seq_prestador := nr_seq_prestador_exec_w;
dados_prestador_prot_w.nr_seq_prestador := nr_seq_prestador_w;

if (coalesce(dados_prestador_solic_w.nr_seq_prestador::text, '') = '') then
  /* Edgar 11/09/2013, OS 643699, conforme autorizado pelo Adriano, podemos tratar fixo para obter o prestador da requisicao como solicitante quando existir*/

	select	max(c.nr_seq_prestador)
	into STRICT	dados_prestador_solic_w.nr_seq_prestador
	from	pls_requisicao c,
		pls_execucao_req_item a
	where	a.nr_seq_requisicao  = c.nr_sequencia
	and	a.nr_seq_guia    = nr_seq_guia_w;

	if (coalesce(dados_prestador_solic_w.nr_seq_prestador::text, '') = '') then
		select	max(nr_seq_prestador)
		into STRICT	dados_prestador_solic_w.nr_seq_prestador
		from	pls_guia_plano
		where	nr_sequencia  = nr_seq_guia_w;

		if (coalesce(dados_prestador_solic_w.nr_seq_prestador::text, '') = '') then
			dados_prestador_solic_w.nr_seq_prestador := coalesce(nr_seq_prestador_conta_w,0);
		end if;
	end if;
end if;

CALL pls_grava_log_execucao_temp('Fim obtencao de dados conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);

/* Definir o tipo de conta medica:
  O - Contas medicas recebidas da rede da Operadora
  I - Contas de intercambio, recebidas de outras Operadoras
  C - Contas a serem faturadas para outra Operadora */
if (coalesce(nr_seq_segurado_w,0) > 0) then
	select	max(dt_rescisao),
		max(fim_dia(dt_limite_utilizacao)),
		max(dt_contratacao),
		max(pls_obter_produto_benef(a.nr_sequencia, dt_ref_atendimento_w)),

		coalesce(max(ie_situacao_atend),'A'),
		max(a.nr_seq_contrato),
		max(a.nr_seq_congenere)
	into STRICT	dt_rescisao_w,
		dt_limite_utilizacao_w,
		dt_contratacao_w,
		nr_seq_plano_w,
		ie_situacao_atend_w,
		nr_seq_contrato_w,
		nr_seq_congenere_w
	from	pls_segurado  a
	where	nr_sequencia  = nr_seq_segurado_w;

  /* Se a origem da conta for de A500, e recebida de outras operadoras */

	if (ie_origem_conta_w = 'A') then
		ie_tipo_conta_w  := 'I';
	/* Se o tipo de beneficiario for Usuario eventual (Resp. Assumida), Intercambio entre OPS congeneres (Resp. Assumida) ou
	Intercambio entre cooperativas (Resp. Assumida) o tipo de conta e para ser faturado para outra operadora*/
	elsif (ie_tipo_segurado_w in ('I','C','T','H')) then
		ie_tipo_conta_w  := 'C';
	else
		ie_tipo_conta_w  := 'O';
	end if;
end if;

/*Se a conta vier sem segurado e for A500*/

if (ie_origem_conta_w = 'A') then
	ie_tipo_conta_w  := 'I';
end if;

begin
select	coalesce(max(cd_usuario_plano), '0')
into STRICT	cd_usuario_plano_w
from	pls_segurado_carteira a,
	pls_segurado b
where	a.nr_seq_segurado  = b.nr_sequencia
and	b.nr_sequencia    = nr_seq_segurado_w;
exception
when others then
	cd_usuario_plano_w  := '0';
end;

if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
	select	max(nr_seq_segurado),
		max(trunc(dt_validade_senha))
	into STRICT	nr_seq_segurado_guia_w,
		dt_validade_senha_w
	from	pls_guia_plano
	where	nr_sequencia  = nr_seq_guia_w;
else
	select	max(nr_sequencia),
		max(nr_seq_segurado),
		max(trunc(dt_validade_senha))
	into STRICT	nr_seq_guia_w,
		nr_seq_segurado_guia_w,
		dt_validade_senha_w
	from	pls_guia_plano
	where	cd_guia		= cd_guia_conta_w
	and	nr_seq_segurado	= nr_seq_segurado_w;
end if;
if (ie_estagio_geracao_p  in ('T','P')) or (coalesce(ie_estagio_geracao_p::text, '') = '') then
	if (coalesce(ie_protocolo_inteiro_p,'N') = 'N') and (coalesce(ie_atualiza_agrup_p,'S') = 'S') then
		CALL pls_grava_log_execucao_temp('Inicio processamento autogerado conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
		CALL pls_gerencia_autogerado_pck.pls_define_se_autogerado(  null, null, null,nr_seq_conta_p,  nm_usuario_p, cd_estabelecimento_p);
		CALL pls_grava_log_execucao_temp('Fim processamento autogerado conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	end if;
	--Abrir os lancamentos dos procedimentos conforme as regras por quantidade de execucao
	if (pls_util_cta_pck.pls_usa_rn_qtde_exec_regra = 'S') then
		if (coalesce(ie_protocolo_inteiro_p,'N') = 'N') and (coalesce(ie_atualiza_agrup_p,'S') = 'S') then
			CALL pls_grava_log_execucao_temp('Inicio quantidade execucao regras nova conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
			nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(  null, null, null, nr_seq_conta_p, null, null, null, null, '14,', null, nm_usuario_p, cd_estabelecimento_p, null, nr_seq_log_exec_w);
			CALL pls_grava_log_execucao_temp('Fim quantidade execucao regras nova conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
		end if;

	else
		CALL pls_grava_log_execucao_temp('Inicio quantidade execucao regras antiga conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
		--Abrir os lancamentos dos procedimentos conforme as regras por quantidade de execucao
		CALL pls_abrir_proc_qtde_proc_valor(  nr_seq_conta_p, null, nm_usuario_p,cd_estabelecimento_p);
		CALL pls_grava_log_execucao_temp('Fim quantidade execucao regras antiga conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	end if;

	if (ie_origem_conta_w = 'E')  then
		select	max(nr_sequencia)
		into STRICT	nr_seq_diagostico_w
		from	pls_diagnostico_conta
		where	ie_classificacao  = 'P'
		and	nr_seq_conta    = nr_seq_conta_p;

		select	max(cd_doenca),
			max(cd_doenca_imp)
		into STRICT	cd_doenca_alta_w,
			cd_doenca_imp_w
		from	pls_diagnostico_conta
		where	nr_sequencia    = nr_seq_diagostico_w;

		if (coalesce(nr_seq_diagostico_w,0) > 0) and (coalesce(cd_doenca_alta_w,'X') = 'X')then
			CALL pls_gravar_conta_glosa('1509', nr_seq_conta_p, null,null, 'N', 'Codigo informado: '||cd_doenca_imp_w,nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		end if;
	end if;

	ie_internacao_w  := pls_obter_se_internado(nr_seq_conta_p, 'C');

	select	max(dt_procedimento)
	into STRICT	dt_max_proc_w
	from	pls_conta_proc
	where	nr_seq_conta  = nr_seq_conta_p;

	select	coalesce(max(dt_atendimento),dt_max_proc_w)
	into STRICT	dt_max_mat_w
	from	pls_conta_mat
	where	nr_seq_conta  = nr_seq_conta_p;

	if (dt_max_proc_w  >= dt_max_mat_w) then
		dt_max_item_w  := dt_max_proc_w;
	else
		dt_max_item_w  := dt_max_mat_w;
	end if;

	/*Diego OPS - OS 286822 - Se o parametro 39 da Gestao  de Contas Medicas for 'N' ou seja nao e permitido datas da conta superior a do protocolo  e
		     Se existir as duas datas informadas e a da conta for superior a do protocolo*/
	if (coalesce(obter_valor_param_usuario(1208, 39, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'S') = 'N') then
		if	((dt_protocolo_w IS NOT NULL AND dt_protocolo_w::text <> '') and (dt_ref_atendimento_w IS NOT NULL AND dt_ref_atendimento_w::text <> '') and (trunc(dt_ref_atendimento_w) > trunc(dt_protocolo_w)))   then
			
			if (cd_versao_tiss_w > '3.01.00') and (ie_tipo_guia_w	= '6')  then
				/*'A data de referencia da conta '||nr_seq_conta_p||' e superior a data do protocolo. Verifique.'*/

				CALL wheb_mensagem_pck.exibir_mensagem_abort(176423,'NR_SEQ_CONTA=' ||nr_seq_conta_p);
			end if;
		end if;
	end if;
	
	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_conta_ref_w
	from	pls_conta
	where	cd_guia		= cd_guia_referencia_w
	and	    nr_seq_segurado = nr_seq_segurado_w;
	
	select	max(dt_alta) dt_atendimento			
	into STRICT	dt_alta_conta_ref_w
	from	pls_conta
	where	nr_sequencia = nr_seq_conta_ref_w
	and		ie_tipo_guia = 5;
		
	if (ie_validar_prazo_env_princ_w = 'S') then
	
		dt_comparar_w := dt_alta_conta_ref_w;
		if (coalesce(dt_comparar_w::text, '') = '') then
			
			if (dt_atendimento_w IS NOT NULL AND dt_atendimento_w::text <> '') then
				dt_comparar_w 	:= dt_atendimento_w;
			else
				dt_comparar_w	:= dt_ref_atendimento_w;
			end if;
		end if;
	else
		if (dt_atendimento_w IS NOT NULL AND dt_atendimento_w::text <> '') then
				dt_comparar_w 	:= dt_atendimento_w;
			else
				dt_comparar_w	:= dt_ref_atendimento_w;
			end if;
	end if;

	if (ie_tipo_conta_w = 'I') then

		ie_evento_w  := 'I5';

		begin
			select	a.cd_unimed_origem,
				a.cd_unimed_destino,
				b.nr_seq_segurado,
				b.dt_atendimento_referencia,
				substr(coalesce(b.nr_seq_prestador_exec_imp,0),1,10),
				b.ie_tipo_guia,
				c.nr_seq_congenere,
				a.dt_recebimento_fatura,
				b.dt_atendimento
			into STRICT	cd_unimed_origem_w,
				cd_unimed_destino_w,
				nr_seq_segurado_w,
				dt_ref_atendimento_w,
				nr_seq_prestador_w,
				ie_tipo_guia_w,
				nr_seq_congenere_w,
				dt_recebimento_fatura_w,
				dt_atendimento_w
			from	ptu_fatura	a,
				pls_conta	b,
				pls_protocolo_conta c
			where	c.nr_sequencia	= b.nr_seq_protocolo
			and	a.nr_sequencia	= b.nr_seq_fatura
			and	b.nr_sequencia	= nr_seq_conta_p;
		exception
			when others then
				nr_seq_segurado_w	:= null;
				cd_usuario_plano_w	:= '0';
		end;

		if (cd_usuario_plano_w <> '0') then
			begin
				cd_usuario_plano_w  := substr(pls_obter_dados_segurado(nr_seq_segurado_w,'C'),1,30);
			exception
				when others then
					cd_usuario_plano_w  := '0';
			end;
		end if;

		if (coalesce(nr_seq_segurado_w,0) = 0) then /*2004 -   Cadastrao Beneficiario com problemas.*/
			CALL ptu_inserir_inconsistencia(null, null, 2004,'', cd_estabelecimento_p, nr_seq_conta_p,'CM', 'A500', null,null, null, nm_usuario_p);
		else
		
			if (cd_unimed_origem_w = cd_unimed_destino_w) then /*2001 - Unimed solic e requer. sao a iguais*/
				CALL ptu_inserir_inconsistencia(null, null, 2001,'', cd_estabelecimento_p, nr_seq_conta_p,'CM', 'A500', null,null, null, nm_usuario_p);
			end if;
			
			if (ie_situacao_atend_w = 'S') then
				CALL ptu_inserir_inconsistencia(null, null, 2008,'', cd_estabelecimento_p, nr_seq_conta_p,'CM', 'A500', null,null, null, nm_usuario_p);
			end if;

			select	max(dt_validade_carteira), /*2017 - Data Validade da carteira vencida*/
				max(dt_inicio_vigencia)
			into STRICT	dt_validade_carteira_w,
				dt_inicio_vigencia_w
			from	pls_segurado_carteira
			where	cd_usuario_plano	= cd_usuario_plano_w
			and	nr_seq_segurado		= nr_seq_segurado_w;

			if	((fim_dia(dt_validade_carteira_w) < dt_ref_atendimento_w) and (dt_validade_carteira_w IS NOT NULL AND dt_validade_carteira_w::text <> '')) then
				CALL ptu_inserir_inconsistencia(null, null, 2017,'', cd_estabelecimento_p, nr_seq_conta_p,'CM', 'A500', null,null, null, nm_usuario_p);
			end if;

			if (nr_seq_prestador_w = 0) then /*2021 Hospital nao informado*/
				CALL ptu_inserir_inconsistencia(null, null, 2021,'', cd_estabelecimento_p, nr_seq_conta_p,'CM', 'A500', null,null, null, nm_usuario_p);
			end if;

			if (trunc(dt_inicio_vigencia_w) > trunc(dt_ref_atendimento_w)) then
				CALL ptu_inserir_inconsistencia(null, null, 2028,'', cd_estabelecimento_p, nr_seq_conta_p,'CM', 'A500', null,null, null, nm_usuario_p);
			end if;

			if (trunc(dt_contratacao_w) > trunc(dt_ref_atendimento_w)) then
				CALL ptu_inserir_inconsistencia(null, null, 2038,'', cd_estabelecimento_p, nr_seq_conta_p,'CM', 'A500', null,null, null, nm_usuario_p);
			end if;

			if (ie_situacao_atend_w = 'I') then
				CALL ptu_inserir_inconsistencia(null, null, 2044,'', cd_estabelecimento_p, nr_seq_conta_p,'CM', 'A500', null,null, null, nm_usuario_p);
			end if;

			if (ie_tipo_guia_w = 5) then /*Ocorrencias com relevancia somente para internacao*/

				/*2023 - acomodacao nao informada*/

				if (coalesce(nr_seq_tipo_acomodacao_w,0) = 0) then /*Se nao for informado a acomodacao gera-se a glosa 2023*/
					CALL ptu_inserir_inconsistencia(null, null, 2023,'', cd_estabelecimento_p, nr_seq_conta_p,'CM', 'A500', null,null, null, nm_usuario_p);
				end if;
			end if;
		end if;
	end if;

	/* Francisco - 09/10/2012 - OS 502111 - Tratar quantidade de dias de envio da conta */

	nr_seq_regra_intercambio_w  := pls_obter_regra_intercambio(nr_seq_conta_p,'P');

	if (nr_seq_regra_intercambio_w IS NOT NULL AND nr_seq_regra_intercambio_w::text <> '') then
		select	a.qt_dias_envio_conta
		into STRICT	qt_dias_envio_conta_w
		from	pls_regra_intercambio a
		where	a.nr_sequencia  = nr_seq_regra_intercambio_w;

		if (qt_dias_envio_conta_w > 0) and (trunc(dt_recebimento_fatura_w - coalesce(dt_atendimento_w,dt_ref_atendimento_w)) > qt_dias_envio_conta_w) then
		   		
			dt_permitida_w  := coalesce(dt_atendimento_w,dt_ref_atendimento_w) + qt_dias_envio_conta_w;
			CALL pls_gravar_conta_glosa('1701', nr_seq_conta_p, null,null, 'N','Data referencia: ' || coalesce(dt_atendimento_w,dt_ref_atendimento_w) ||
				' / Data permitida: ' || dt_permitida_w,nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		end if;
	end if;
	
	ds_observacao_data_w := pls_valida_regra_data_conta(dt_ref_atendimento_w);
	
	if (ds_observacao_data_w IS NOT NULL AND ds_observacao_data_w::text <> '') then
	
		CALL pls_gravar_conta_glosa(	'1701', nr_seq_conta_p, null,
					null, 'N', ds_observacao_data_w,
					nm_usuario_p, 'A', ie_evento_w,
					nr_seq_prestador_exec_w, cd_estabelecimento_p, '', 
					null);
	end if;
	
	CALL pls_consistir_elegibilidade(nr_seq_segurado_w, ie_evento_w, nr_seq_conta_p,'C', nr_seq_prestador_exec_w, null,'', nm_usuario_p, cd_estabelecimento_p);

	--select que ira retornar se algumas das glosas esta ativa caso contrario nem executa a procedure
	select	count(1)
	into STRICT	qt_glosa_ativa_w
	from	tiss_motivo_glosa  tiss
	where	cd_motivo_tiss  in ('1308','1312','1321','1317','1304')
	and	pls_obter_se_evento_glosa(tiss.nr_sequencia, null, cd_estabelecimento_p) = 'S';
							
	if (qt_glosa_ativa_w > 0) then
		CALL pls_tiss_consistir_guia(nr_seq_conta_p, 'C', ie_evento_w,nr_seq_prestador_exec_w, null, '',nm_usuario_p, cd_estabelecimento_p);
	end if;

	CALL pls_tiss_consistir_prestador(nr_seq_conta_p, 'C', ie_evento_w,nr_seq_prestador_exec_w, null, '',nm_usuario_p, cd_estabelecimento_p);

	CALL pls_tiss_consistir_autorizacao(nr_seq_conta_p, 'C', ie_evento_w,nr_seq_prestador_exec_w, null, '',nm_usuario_p, cd_estabelecimento_p,null);

	CALL pls_tiss_consistir_atendimento(nr_seq_conta_p, 'C', ie_evento_w,nr_seq_prestador_exec_w, null, '',nm_usuario_p, cd_estabelecimento_p,null);

	CALL pls_tiss_consistir_diagnostico(nr_seq_conta_p, 'C', ie_evento_w,nr_seq_prestador_exec_w, null, '',nm_usuario_p, cd_estabelecimento_p);

	--select que ira retornar se algumas das glosas esta ativa caso contrario nem executa a procedure
	select	count(1)
	into STRICT	qt_glosa_ativa_w
	from	tiss_motivo_glosa  tiss
	where	cd_motivo_tiss  = '1101'
	and	pls_obter_se_evento_glosa(tiss.nr_sequencia, null, cd_estabelecimento_p) = 'S';
							
	if (qt_glosa_ativa_w > 0) then
		CALL pls_tiss_consistir_protocolo(nr_seq_conta_p, 'C', ie_evento_w,nr_seq_prestador_exec_w, null, '',nm_usuario_p, cd_estabelecimento_p);
	end if;

	--select que ira retornar se algumas das glosas esta ativa caso contrario nem executa a procedure
	select  count(1)
	into STRICT	qt_glosa_ativa_w
	from	tiss_motivo_glosa  tiss
	where	cd_motivo_tiss  in ('2601','2699','2604')
	and	pls_obter_se_evento_glosa(tiss.nr_sequencia, null, cd_estabelecimento_p) = 'S';
						
	if (qt_glosa_ativa_w > 0) then
		if	(ie_tipo_guia_w in ('6','5') or
			((ie_tipo_guia_w = 4) and
			((ie_regime_atendimento_w <> '03') or (pls_obter_dados_tipo_atend(nr_seq_tipo_atendimento_w,'T') <> '07') ))) then
			CALL pls_tiss_consistir_honorario(  nr_seq_conta_p, 'C', ie_evento_w,null, null, '',nm_usuario_p, cd_estabelecimento_p,null);
		end if;
	end if;

	select	count(1)
	into STRICT	qt_glosa_ativa_w
	from	tiss_motivo_glosa  tiss
	where	cd_motivo_tiss  in ('1914','1906','1909','1401')
	and	pls_obter_se_evento_glosa(tiss.nr_sequencia, null, cd_estabelecimento_p) = 'S';
						
	if (qt_glosa_ativa_w > 0) then
		if (ie_internacao_w = 'S') then
			CALL pls_tiss_consistir_diaria(nr_seq_conta_p, 'C', ie_evento_w,nr_seq_prestador_exec_w, null, '',nm_usuario_p, cd_estabelecimento_p);
		end if;
	end if;

	if (coalesce(nr_seq_cbo_saude_w,0) = 0) and (coalesce(cd_medico_executor_w,'X') <> 'X') then
		begin
		select  max(nr_seq_cbo_saude)
		into STRICT  nr_seq_cbo_saude_med_w
		from  medico_especialidade
		where  cd_pessoa_fisica  = cd_medico_executor_w
		and  nr_seq_prioridade =   (	SELECT  min(nr_seq_prioridade)
						from	medico_especialidade
						where  cd_pessoa_fisica  = cd_medico_executor_w)
						and  (nr_seq_cbo_saude IS NOT NULL AND nr_seq_cbo_saude::text <> '');
		exception
		when others then
			nr_seq_cbo_saude_med_w := null;
		end;
	else
		nr_seq_cbo_saude_med_w  := nr_seq_cbo_saude_w;
	end if;

	if (coalesce(nr_seq_segurado_w::text, '') = '') then

		nr_seq_plano_w    := null;
		CALL pls_gravar_conta_glosa('1013',nr_seq_conta_p,null,null,'N','Beneficiario nao informado',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
	end if;

	if (coalesce(nr_seq_plano_w,0) = 0) then /* Felipe - 13/06/2011 - OS 324801 */
		CALL pls_gravar_conta_glosa('1024', nr_seq_conta_p, null,null, 'N', 'Beneficiario sem produto informado no seu cadastro',nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
	end if;

	if (cd_usuario_plano_w = '0') or (coalesce(cd_usuario_plano_w::text, '') = '') then
		CALL pls_gravar_conta_glosa('1001',nr_seq_conta_p,null,null,'N','Beneficiario nao informado',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
	end if;

	begin
		select	nr_seq_prestador,
			ie_tipo_gat
		into STRICT	nr_seq_prest_guia_execu_w,
			ie_tipo_gat_w
		from	pls_guia_plano
		where	cd_guia		= cd_guia_conta_w
		and	nr_seq_segurado	= nr_seq_segurado_w;
	exception
	when others then
		nr_seq_prest_guia_execu_w  := nr_seq_prestador_exec_w;
		ie_tipo_gat_w      := null;
	end;

	/* 1213 - CBOS(especialidade)invalido */

	select  max(cd_tiss)
	into STRICT  cd_tiss_tipo_atendimento_w
	from  pls_tipo_atendimento
	where  nr_sequencia  = nr_seq_tipo_atendimento_w;

	nr_seq_prestador_dif_w  := nr_seq_prestador_exec_w;

	if (ie_tipo_guia_w  = '4') and
		(( cd_tiss_tipo_atendimento_w = '07' ) or ( ie_regime_atendimento_w = '03')) then
		nr_seq_prestador_dif_w  := nr_seq_prestador_w;
	end if;

	if	((ie_tipo_guia_w = '5') or ((ie_tipo_guia_w = '4') and (coalesce(cd_guia_referencia_w,'X') = 'X'))) and (coalesce(nr_seq_prestador_dif_w,0) > 0) and (coalesce(nr_seq_prest_guia_execu_w,0) > 0) and (coalesce(pls_obter_se_prestador_guia(nr_seq_prestador_dif_w,nr_seq_prest_guia_execu_w,nr_seq_conta_p),'N') = 'N') then
		nm_prestador_w  := pls_obter_dados_prestador(nr_seq_prest_guia_execu_w,'N');
		/*Diego OS 293646 - Visto com o Sr. Felipe Ambrasio que o executor em uma guia de honorario nunca sera o mesmo da guia de solicitacao*/

		CALL pls_gravar_conta_glosa('9914',nr_seq_conta_p,null,null,'N','Prestador executor diferente do prestador da guia. Prestador da guia: '||nr_seq_prest_guia_execu_w||' :'|| nm_prestador_w,
					nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_dif_w, cd_estabelecimento_p, '',null);
	end if;

	select	sum(qt_itens)
	into STRICT	qt_itens_w
	from (	SELECT	count(1) qt_itens
		from	pls_conta_proc
		where	nr_seq_conta  = nr_seq_conta_p
		
union

		SELECT	count(1) qt_itens
		from	pls_conta_mat
		where	nr_seq_conta  = nr_seq_conta_p) alias3;

	if (qt_itens_w = 0) then
		CALL pls_gravar_conta_glosa('1199', nr_seq_conta_p, null, null,'N','Nenhum item foi lancado para esta conta. Verifique!', nm_usuario_p,'A', ie_evento_w, nr_seq_prestador_w,cd_estabelecimento_p, '', null);
	end if;
	
	if (ie_tipo_conta_w <> 'I') then
		if (nr_seq_prestador_exec_w = 0) then
			CALL pls_gravar_conta_glosa('1311',nr_seq_conta_p,null,null,'N','Nao ha a informacao do prestador executor dessa conta',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_w,cd_estabelecimento_p, '', null);
			nr_seq_prestador_exec_w  := nr_seq_prestador_w;
		else
			select	dt_protocolo_w - coalesce(qt_dias_envio_contas,0),
				coalesce(qt_dias_envio_contas,0)
			into STRICT	dt_envio_contas_w,
				qt_dias_envio_contas_w
			from	pls_prestador
			where	nr_sequencia  = nr_seq_prestador_exec_w;
			
			if ( qt_dias_envio_contas_w > 0) and ( dt_comparar_w < dt_envio_contas_w) then
																
				CALL pls_gravar_conta_glosa('1701', nr_seq_conta_p, null,null, 'N', 'Data referencia: ' || dt_comparar_w || ' / Data permitida: ' || dt_envio_contas_w,
							nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
			end if;
		end if;

		if (coalesce(nr_seq_prestador_w::text, '') = '') then
			CALL pls_gravar_conta_glosa('1203',nr_seq_conta_p,null,null,'N','',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		end if;
	end if;

	if (ie_tipo_guia_w = 'X') then
		ds_obs_glosa_w  := 'Nao foi informado o tipo de guia da conta';
	elsif (ie_tipo_guia_w <> ie_tipo_guia_prot_w) then
		ds_obs_glosa_w  := 'Tipo de guia da conta diferente do tipo de guia do protocolo';
	else
		ds_obs_glosa_w  := 'X';
	end if;

	if (ds_obs_glosa_w  <> 'X') then
		CALL pls_gravar_conta_glosa('1301',nr_seq_conta_p,null,null,'N',ds_obs_glosa_w,nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_w, cd_estabelecimento_p, '',null);
	end if;

	select	count(1)
	into STRICT	qt_cbo_ativo_w
	from	cbo_saude
	where	nr_sequencia = nr_seq_cbo_saude_w
	and	ie_situacao  = 'A';

	if (ie_tipo_guia_w  = '4') then /* SP/SADT */

		/* 1602 - Tipo de atendimento invalido ou nao informado */

		if (coalesce(nr_seq_tipo_atendimento_w,0) = 0) then
			CALL pls_gravar_conta_glosa('1602', nr_seq_conta_p, null,null, 'N', 'Tipo de atendimento: ' || nr_seq_tipo_atendimento_w,nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		end if;

	    /* 1604 - Tipo de saida invalido */

		if (pls_obter_se_glosa_versao_tiss(cd_versao_tiss_w, '1604', null) = 'S') then
			if (coalesce(nr_seq_saida_spsadt_w,0) = 0) then
				CALL pls_gravar_conta_glosa('1604', nr_seq_conta_p, null,null, 'N', 'Tipo saida: ' || nr_seq_saida_spsadt_w,nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
			end if;
		end if;
		
		if (cd_tiss_tipo_atendimento_w = '04')  then
			if (coalesce(cd_medico_executor_w,'0') <> '0') and (coalesce(nr_seq_cbo_saude_w::text, '') = '') then
				CALL pls_gravar_conta_glosa('1213', nr_seq_conta_p, null,null, 'N', 'Tipo atendimento: ' || nr_seq_tipo_atendimento_w ||' / Codigo TISS: ' || cd_tiss_tipo_atendimento_w || ' / CBO: ' || nr_seq_cbo_saude_w,
							nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
			end if;
		elsif (nr_seq_cbo_saude_w IS NOT NULL AND nr_seq_cbo_saude_w::text <> '')  then

			/*Realizado o tratamento dentro das consistencia de tipo de guia SP/SADT e tipo de atendimento consulta.
			Em conversa com o Decio, verificamos a possibilidade de este tratamento ser realizado fora dessa consistencia,	
			porem o mesmo nao foi realizado pois iria validar informacaes que nao estavam sendo validadas para outros clientes.
			Demitrius - OS 557307
			*/

			/*Verificar se o CBO informado esta nulo ou nao*/

			if (qt_cbo_ativo_w = 0)  then
				CALL pls_gravar_conta_glosa('1213', nr_seq_conta_p, null,null, 'N', 'Tipo atendimento: ' || nr_seq_tipo_atendimento_w ||' / Codigo TISS: ' || cd_tiss_tipo_atendimento_w || ' / CBO nulo: ' || nr_seq_cbo_saude_w,
							nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
			end if;
		end if;

		if (coalesce(cd_medico_executor_w,'0') = '0') then /* 9916 - Profissional executante complementar nao informado */
			CALL pls_gravar_conta_glosa('9916', nr_seq_conta_p, null,null, 'N','Para guia de SP/SADT com tipo de atendimento Consulta, o profissional executor e obrigaterio',
							nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		end if;
	elsif (ie_tipo_guia_w  = '5') then /* Resumo de internacao */
		select	count(1)
		into STRICT	qt_diagnostico_w
		from	pls_diagnostico_conta
		where	nr_seq_conta  = nr_seq_conta_p  LIMIT 1;

		if (qt_diagnostico_w = 0) then
			CALL pls_gravar_conta_glosa('9912', nr_seq_conta_p, null,null, 'N', 'Verificar na pasta Diagnostico',nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '',null);
		end if;

		if (coalesce(ie_regime_internacao_w,'X') = 'X') then
			CALL pls_gravar_conta_glosa('1505', nr_seq_conta_p, null,null, 'N', '',nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '',null);
		end if;
	
		if (coalesce(cd_guia_conta_w,'#@') <>'#@') then
			nr_seq_guia_ww  := nr_seq_guia_w;
			if (coalesce(nr_seq_guia_ww,0) > 0 ) then
				select	max(nr_seq_clinica)	
				into STRICT	nr_seq_clinica_guia_w
				from	pls_guia_plano
				where	nr_sequencia = nr_seq_guia_ww;

				if (nr_seq_clinica_guia_w IS NOT NULL AND nr_seq_clinica_guia_w::text <> '') and (nr_seq_clinica_w IS NOT NULL AND nr_seq_clinica_w::text <> '') then
					/* VERIFICA SE O TIPO INTERNACAO DA CONTA e O MESMO DA GUIA DE AUTORIZACAO.*/

					if (nr_seq_clinica_w <> nr_seq_clinica_guia_w) then
						CALL pls_gravar_conta_glosa('1506', nr_seq_conta_p, null,null, 'N', 'Tipo de internacao diferente da autorizada.',nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '',null);
					end if;
				end if;
			end if;
		end if;
	end if;

	if 	((coalesce(nr_seq_cbo_saude_w::text, '') = '') or (qt_cbo_ativo_w = 0)) and
		(not(cd_tiss_tipo_atendimento_w  = '04' AND ie_tipo_guia_w = '4')) then
		if (pls_obter_se_regra_cbo(ie_tipo_guia_w,nr_seq_prestador_exec_w,nr_seq_tipo_atendimento_w) = 'S') then
			CALL pls_gravar_conta_glosa('1213', nr_seq_conta_p, null,null, 'N', 'Tipo atendimento: ' || nr_seq_tipo_atendimento_w ||' / Codigo TISS: ' || cd_tiss_tipo_atendimento_w || ' / CBO: ' || nr_seq_cbo_saude_w,
						nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		end if;
	end if;

	CALL pls_grava_log_execucao_temp('inicio obtencao dados guia', 'geracao_analise_consistir_conta', nm_usuario_p);
	if (ie_tipo_guia_w  in ('4','6')) then
		if (coalesce(cd_medico_executor_w,'X') <> 'X') then
		/* 9915 - Dados do conselho profissional nao informado */

			if (coalesce(nr_seq_conselho_exec_w,0) = 0) then
				CALL pls_gravar_conta_glosa(  '9915', nr_seq_conta_p, null,null, 'N', null,nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
			end if;
		end if;
	end if;

	select  count(1)
	into STRICT  qt_glosa_ativa_w
	from  tiss_motivo_glosa  tiss
	where  cd_motivo_tiss  = '1401'
	and	pls_obter_se_evento_glosa(tiss.nr_sequencia, null, cd_estabelecimento_p) = 'S';

	if (qt_glosa_ativa_w > 0) then
		if (coalesce(nr_seq_tipo_acomodacao_w,0) > 0) then

			if (coalesce(cd_guia_conta_w,'X') <> 'X') then
				/*Se houver uma guia informada na conta e esta tiver sua ORIGEM NA AUTORIZACOES*/

				if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then

					select	max(nr_seq_tipo_acomodacao)
					into STRICT	nr_seq_tipo_acomodacao_guia_w
					from	pls_guia_plano
					where	cd_guia     		= cd_guia_conta_w
					and	nr_seq_segurado		= nr_seq_segurado_w
					and	nr_seq_prestador	= nr_seq_prestador_exec_w;

				/*Se nao consistir a acomodacao informada na conta com a autorizada e gardo a glosa 1909 -> alterado para 1401 OS  757971*/

					if (nr_seq_tipo_acomodacao_guia_w <> nr_seq_tipo_acomodacao_w) then
						CALL pls_gravar_conta_glosa('1401', nr_seq_conta_p, null,null, 'N', 'O tipo de acomodacao nao consiste com o tipo de acomodacao autorizado na guia.',
										nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
					end if;
				end if;
			end if;
		end if;
	elsif (ie_tipo_conta_w = 'I')    then --Intercambio A500
		if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
		
			select	max(nr_seq_tipo_acomodacao)
			into STRICT	nr_seq_tipo_acomodacao_guia_w
			from	pls_guia_plano
			where	cd_guia     = cd_guia_conta_w
			and	nr_seq_segurado    = nr_seq_segurado_w
			and	ie_status    = 1
			and	((nr_seq_prestador  = nr_seq_prestador_exec_w) or (coalesce(nr_seq_prestador::text, '') = ''));
			
			if (nr_seq_tipo_acomodacao_guia_w IS NOT NULL AND nr_seq_tipo_acomodacao_guia_w::text <> '')  then

				select	max(ie_tipo_acomodacao_ptu)
				into STRICT	ie_tipo_acomodacao_guia_w
				from	pls_tipo_acomodacao
				where	nr_sequencia = nr_seq_tipo_acomodacao_guia_w;

				--Alterado de 1909 para 1401 OS 757971
				if (ie_tipo_acomodacao_guia_w <> ie_tipo_acomodacao_ptu_w)  then
					CALL pls_gravar_conta_glosa('1401', nr_seq_conta_p, null,null, 'N', 'O tipo de acomodacao nao consiste com o tipo de acomodacao autorizado na guia.',
								nm_usuario_p, 'A', ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
				end if;
			end if;
		end if;
	end if;

	CALL pls_grava_log_execucao_temp('fim obtencao dados guia', 'geracao_analise_consistir_conta', nm_usuario_p);

	if (coalesce(nr_seq_segurado_guia_w::text, '') = '' ) then
		nr_seq_segurado_guia_w  := 0;
	end if;

	/* Francisco - OS 194256 - 08/02/2010 - Criei o else pois precisa tratar glosa de suspensao, quando exige guia ja trata na suspensao */

	select	count(1)
	into STRICT	qt_glosa_ativa_w
	from	tiss_motivo_glosa  tiss
	where	cd_motivo_tiss  in ('1306','1399')
	and	pls_obter_se_evento_glosa(tiss.nr_sequencia, null, cd_estabelecimento_p) = 'S';
						
	if (cd_guia_referencia_w IS NOT NULL AND cd_guia_referencia_w::text <> '') and (cd_guia_referencia_w <> '0') and (ie_tipo_guia_w in ('4','5')) and (qt_glosa_ativa_w > 0) then
	    /* Paulo - OS 488768 -Alterado para funcionar independente do tipo de atendimento das guias de SP/SADT */

	    select	coalesce(max(nr_sequencia),0)
	    into STRICT	nr_seq_guia_ref_w
	    from	pls_guia_plano
	    where	cd_guia    	= cd_guia_referencia_w
	    and		nr_seq_segurado	= nr_seq_segurado_w;

	    /* Felipe - 10/03/2011 - OS 284547
		A glosa deve ser gerada quando:
		SP/SADT - for digitada no campo guia referencia um numero de guia que nao existe para o mesmo beneficiario.
		INTERNACAO -  quando for digitada no campo guia referencia um numero que e diferente da solicitacao  de internacao do mesmo beneficiario. */
		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_seq_conta_ref_w
		from	pls_conta
		where	cd_guia		= cd_guia_referencia_w
		and	nr_seq_segurado = nr_seq_segurado_w;

		if (cd_guia_referencia_w <> cd_guia_w) then
			if (nr_seq_guia_ref_w = 0) and (nr_seq_conta_ref_w = 0) then
				CALL pls_gravar_conta_glosa('1306',nr_seq_conta_p,null,null,'N','',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
			elsif (nr_seq_conta_ref_w = 0) then
				select	ie_status
				into STRICT	ie_status_guia_w
				from	pls_guia_plano
				where	nr_sequencia  = nr_seq_guia_ref_w;
				
				if (ie_status_guia_w <> '1') then
					CALL pls_gravar_conta_glosa('1399',nr_seq_conta_p,null,null,'N','Guia nao autorizada [2] - ' || cd_guia_referencia_w || ' - ' || nr_seq_segurado_w,
								nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
				end if;
			end if;
		end if;
	end if;


	select	count(1)
	into STRICT	qt_glosa_ativa_w
	from	tiss_motivo_glosa  tiss
	where	cd_motivo_tiss  = '2514'
	and	pls_obter_se_evento_glosa(tiss.nr_sequencia, null, cd_estabelecimento_p) = 'S';

	if (qt_glosa_ativa_w > 0) then
		-- Alex 01/03/2010 - OS - 196232, Verificar se o prestador esta cadastrado com o produto da conta
		CALL pls_consistir_prest_plano(	ie_evento_w, nr_seq_prestador_exec_w, nr_seq_conta_p,
						null, null, null, null, null, cd_estabelecimento_p,
						nm_usuario_p);
	end if;

	CALL pls_grava_log_execucao_temp('Inicio consistencia item', 'geracao_analise_consistir_conta', nm_usuario_p);

	/*Diether - OS - 266284 */

	SELECT * FROM pls_consiste_rede_atend(	nr_seq_conta_p, null, null, null, null, null, null, null, nm_usuario_p, cd_estabelecimento_p, nr_seq_regra_w, ie_permite_w) INTO STRICT nr_seq_regra_w, ie_permite_w;

	CALL pls_consiste_procedimento(nr_seq_conta_p, ie_evento_w, nm_usuario_p, cd_estabelecimento_p);
	CALL pls_grava_log_execucao_temp('Fim consistencia item', 'geracao_analise_consistir_conta', nm_usuario_p);

	select	count(1)
	into STRICT	qt_qtde_exec_w
	from 	pls_regra_tipo_execucao
	where	ie_situacao  = 'A';

	select	count(1)
	into STRICT	qt_via_acesso_w
	from	pls_regra_via_acesso a
	where	a.ie_situacao = 'A'
	and not exists (	SELECT	1
			from	pls_excecao_via_acesso x
			where	x.nr_seq_regra_via_acesso = a.nr_sequencia
			and	x.ie_origem_conta = ie_origem_conta_w);

	if (coalesce(ie_analise_p,'N') = 'N') then
		/*Colocamos antes para poder calcular a taxa alterada, apos consistir procedimento nao iria calcular a taxa alterada (Robson da Silvca  OS - 266019)*/

		if (ie_prioridade_tx_item_w = 'QE') then -- se for QE, entao executa regra de quantidade de execucao por ultimo para priorizar

		-- tem que ser executado depois da valorizacao
			if	(((coalesce(ie_protocolo_inteiro_p,'N') = 'N') and (pls_util_cta_pck.ie_atualiza_proc_ref_w	= 'S'))or (qt_via_acesso_w > 0)) then
				CALL pls_grava_log_execucao_temp('Inicio via de acesso', 'valorizacao', nm_usuario_p);
				CALL pls_util_cta_pck.pls_gerencia_via_acesso(   null, null, null,
									    nr_seq_conta_p, null,null,
									    null, nm_usuario_p, cd_estabelecimento_p);
				commit;
				CALL pls_grava_log_execucao_temp('Fim via de acesso', 'valorizacao', nm_usuario_p);
				pls_util_cta_pck.ie_atualiza_proc_ref_w	:= 'N';
			end if;

			if (qt_qtde_exec_w > 0) then
				CALL pls_qtde_execucao_pck.pls_gerencia_qtde_execucao(nr_seq_conta_p, null, null,
										null, null, nm_usuario_p, cd_estabelecimento_p);
			end if;
		elsif (ie_prioridade_tx_item_w = 'VA') then
			
			CALL pls_grava_log_execucao_temp('Inicio via de acesso', 'valorizacao', nm_usuario_p);

			select	count(1)
			into STRICT	qt_procedimento_w
			from	pls_conta_proc
			where	nr_seq_conta  = nr_seq_conta_p
			and	ie_tipo_despesa  = '1';

			if (qt_procedimento_w  > 0) and
				(((coalesce(ie_protocolo_inteiro_p,'N') = 'N') and (pls_util_cta_pck.ie_atualiza_proc_ref_w	= 'S'))or (qt_via_acesso_w > 0)) then
				-- tem que ser executado depois da valorizacao
				pls_util_cta_pck.ie_atualiza_proc_ref_w	:= 'N';
				CALL pls_util_cta_pck.pls_gerencia_via_acesso(   null, null, null,
									    nr_seq_conta_p, null,null,
									    null,nm_usuario_p, cd_estabelecimento_p );
				commit;
			end if;
			
			if (qt_qtde_exec_w > 0) and (coalesce(ie_analise_p,'N') = 'N') and (coalesce(ie_protocolo_inteiro_p,'N') = 'N') then
				CALL pls_qtde_execucao_pck.pls_gerencia_qtde_execucao(nr_seq_conta_p, null, null,
										null,null, nm_usuario_p,
										cd_estabelecimento_p);
			end if;
			
		CALL pls_grava_log_execucao_temp('Fim via de acesso', 'valorizacao', nm_usuario_p);
		end if;
	end if;
	
	if (ie_tipo_guia_w in ('4','5')) and (ie_tipo_conta_w <> 'I') then
		
		--Le as regras de abertura de contas, desconsiderando execucao cirurgica.
		select	count(1)
		into STRICT	qt_regra_abert_w
		from	pls_regra_conta_autom  a
		where	a.cd_estabelecimento   = cd_estabelecimento_p
		and	a.ie_tipo_guia     = ie_tipo_guia_w
		and (coalesce(a.ie_exec_cirurgica::text, '') = '' or a.ie_exec_cirurgica	= 'N' )  LIMIT 1;

		if (coalesce(qt_regra_abert_w,0) > 0) then
			--Diego - Diogo - Inserido em lugar da pls_conta_gerar_hi. Toda a verificacao quanto a necessidade da criacao das contas ja existe dentro da rotina.
			CALL pls_grava_log_execucao_temp('Inicio geracao contas de honorario', 'geracao_analise_consistir_conta', nm_usuario_p);
			-- Gera as contas de honorario individual de acordo com o cadastro de regras em OPS - Cadastro de Regras, OPS - Contas medicas -> Abertura automatica de contas
			CALL pls_cta_gera_hono_indiv_pck.gera_conta_hono_indiv(  null, null, null,nr_seq_conta_p, null, nm_usuario_p,cd_estabelecimento_p);
			--Abertura de materiais conforme a regra de abertura automatica de contas
			CALL pls_cta_gera_hono_indiv_pck.gera_conta_material(  null, null, null,nr_seq_conta_p, null, nm_usuario_p,cd_estabelecimento_p);
			
			CALL pls_grava_log_execucao_temp('Fim geracao contas de honorario', 'geracao_analise_consistir_conta', nm_usuario_p);
			
		end if;

		--aqui le as regras para abertura de contas da execucao cirurgica. 
		select	count(1)
		into STRICT	qt_regra_abert_w
		from	pls_regra_conta_autom  a
		where	a.cd_estabelecimento   = cd_estabelecimento_p
		and	a.ie_tipo_guia     = ie_tipo_guia_w
		and 	a.ie_exec_cirurgica 	= 'S'  LIMIT 1;

		if (coalesce(qt_regra_abert_w,0) > 0) then
			
			CALL pls_grava_log_execucao_temp('Inicio geracao contas de honorario cirurgico', 'geracao_analise_consistir_conta', nm_usuario_p);			
			CALL pls_cta_gera_hono_cirurgia_pck.gera_conta_hono_indiv(  null, null, nr_seq_conta_p, nm_usuario_p,cd_estabelecimento_p);			
			CALL pls_grava_log_execucao_temp('Fim geracao contas de honorario cirurgico', 'geracao_analise_consistir_conta', nm_usuario_p);
			
		end if;
		
		
	end if;

	CALL pls_gerar_glosa_via_acesso( nr_seq_conta_p, ie_evento_w, nr_seq_prestador_w, cd_estabelecimento_p, nm_usuario_p);

	select	nr_seq_guia,
		cd_guia_ok
	into STRICT	nr_seq_guia_cta_w,
		cd_guia_ok_w
	from	pls_conta
	where	nr_sequencia = nr_seq_conta_p;
	
	/*Robson da silva - OS 241699 - Data de Validade da Senha e anterior a Data do Atendimento*/

	if (cd_guia_w IS NOT NULL AND cd_guia_w::text <> '') then
	
		select	max(dt_validade_senha)
		into STRICT	dt_valid_senha_pror_w
		from	pls_guia_plano
		where	nr_seq_guia_principal = nr_seq_guia_cta_w
		and	ie_status = '1';
	
		if (dt_valid_senha_pror_w > dt_validade_senha_w) then
			dt_validade_senha_w := dt_valid_senha_pror_w;
		end if;
		if (dt_validade_senha_w IS NOT NULL AND dt_validade_senha_w::text <> '') and (fim_dia(dt_validade_senha_w) < dt_ref_atendimento_w) then
			CALL pls_gravar_conta_glosa('1405',nr_seq_conta_p,null,null,'N','',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		end if;
	end if;
	if (coalesce(nr_seq_segurado_w,0) > 0) then		
		if (coalesce(nr_seq_guia_cta_w::text, '') = '') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_guia_cta_w
			from	pls_guia_plano
			where	cd_guia = cd_guia_ok_w
			and	nr_seq_segurado = nr_seq_segurado_w
			and	ie_status = '1';
		end if;
		
		if (coalesce(nr_seq_guia_cta_w::text, '') = '') then
			dt_ref_glosa_w  := coalesce(pls_obter_regra_glosa_tiss('1014', 'D', dt_ref_atendimento_w, dt_max_item_w), dt_ref_atendimento_w);
			
			if (dt_rescisao_w IS NOT NULL AND dt_rescisao_w::text <> '') and (dt_ref_glosa_w > dt_limite_utilizacao_w) then
				CALL pls_gravar_conta_glosa('1014',nr_seq_conta_p,null,null,'N','',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
			end if;
		end if;
	end if;

	if (ie_tipo_segurado_w =  'B') then
		/*Verificacao da glosa 1004 - Solicitacao Anterior a Inclusao do Beneficiario*/

		if (trunc(dt_contratacao_w,'dd') > trunc(dt_ref_atendimento_w,'dd')) then
			CALL pls_gravar_conta_glosa('1004',nr_seq_conta_p,null,null,'N','',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		end if;
	end if;

	select	count(1)
	into STRICT	qt_glosa_ativa_w
	from	tiss_motivo_glosa  tiss
	where	cd_motivo_tiss  in ('9907','1601')
	and	pls_obter_se_evento_glosa(tiss.nr_sequencia, null, cd_estabelecimento_p) = 'S';

	if (qt_glosa_ativa_w > 0) then
		CALL pls_grava_log_execucao_temp('Inicio pls_define_regra_retorno conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
		CALL pls_define_regra_retorno(null, null, nr_seq_conta_p, 'CC', nm_usuario_p); /* Alexandre 09/09/2010 - OS 245499 - Verificar as regras de retorno */
		CALL pls_grava_log_execucao_temp('Fim pls_define_regra_retorno conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	end if;

	/* Obter dados do produto */

	if (coalesce(nr_seq_plano_w,0) > 0) then
		select  a.ie_tipo_contratacao,
			a.ie_participacao,
			a.ie_preco
		into STRICT	ie_tipo_contratacao_w,
			ie_participacao_w,
			ie_preco_plano_w
		from	pls_plano  a
		where	a.nr_sequencia  = nr_seq_plano_w;
	end if;

	if (ie_tipo_segurado_w = 'B') then
		begin
			select  ie_tipo_beneficiario,
				coalesce(ie_participacao,ie_participacao_w)
			into STRICT  	ie_tipo_beneficiario_w,
				ie_participacao_w
			from  	pls_contrato
			where  	nr_sequencia  = nr_seq_contrato_w;
		exception
		when others then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(176427,'NR_SEQ_CONTRATO=' ||nr_seq_contrato_w);/*'[2] Problema na leitura dos dados do contrato ' || nr_seq_contrato_w ||*/
		end;
	end if;

	/* Obter o tipo do plano do beneficiario - Dominio 2213 */

	if (ie_tipo_contratacao_w = 'I') then
		ie_tipo_plano_w  := 'IF';
	elsif (ie_participacao_w = 'S') then
		ie_tipo_plano_w  := 'CSP';
	elsif (ie_participacao_w = 'C') then
		ie_tipo_plano_w  := 'CCP';
	end if;


	select	max(a.cd_cooperativa)
	into STRICT	cd_cooperativa_w
	from	pls_congenere  a
	where	a.nr_sequencia  = nr_seq_congenere_w;

	CALL pls_grava_log_execucao_temp('Inicio update pls_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	
	if ( ie_obter_tipo_conta_req_w = 'S') then
		nr_seq_tipo_conta_w := pls_obter_tp_conta_prog(nr_seq_conta_p, dt_ref_atendimento_w);
	end if;
	
	update	pls_conta
	set	nr_seq_cbo_saude	= nr_seq_cbo_saude_med_w,
		cd_cooperativa		= cd_cooperativa_w,
		ie_tipo_conta		= ie_tipo_conta_w,
		nr_seq_plano		= nr_seq_plano_w,
		ie_tipo_plano		= ie_tipo_plano_w,
		ie_tipo_beneficiario	= ie_tipo_beneficiario_w,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		ie_tipo_gat		= ie_tipo_gat_w,
		ds_motivo_saida		= ds_motivo_saida_w,
		ie_tipo_internado	= ie_tipo_internado_w,
		nr_seq_tipo_conta	= coalesce(nr_seq_tipo_conta_w, nr_seq_tipo_conta)		
	where  nr_sequencia		= nr_seq_conta_p;

	CALL pls_grava_log_execucao_temp('Fim update pls_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	if (coalesce(ie_protocolo_inteiro_p,'N') = 'S') or
		((coalesce(ie_atualiza_agrup_p,'S') = 'S') and (coalesce(ie_protocolo_inteiro_p,'N') = 'N'))then
		CALL pls_grava_log_execucao_temp('Inicio pls_cta_gerar_val_dif conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
		--OS 643040 Ira gerar a regra de pagamento diferenciado para os itens da conta
		CALL pls_cta_gerar_val_dif(  null, null, null, nr_seq_conta_p, null, cd_estabelecimento_p, nm_usuario_p);
		CALL pls_grava_log_execucao_temp('Fim pls_cta_gerar_val_dif conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	end if;
	CALL pls_grava_log_execucao_temp('Inicio pls_lanc_consiste_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	CALL pls_lanc_consiste_conta(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p);
	CALL pls_grava_log_execucao_temp('Fim pls_lanc_consiste_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);

	/*Diego - OS 351451 - Cancelar solicitacao de mat/med especiais que nao estao  liberados*/

	CALL pls_grava_log_execucao_temp('Inicio pls_canc_solic_matmed_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	CALL pls_canc_solic_matmed_conta(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p);
	CALL pls_grava_log_execucao_temp('Fim pls_canc_solic_matmed_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
end if;

if (coalesce(nr_seq_guia_w::text, '') = '') then
	nr_seq_guia_w  := 0;
end if;
if (ie_estagio_geracao_p  in ('T','R')) or (coalesce(ie_estagio_geracao_p::text, '') = '') then
	
	if (ie_origem_conta_w	= 'A') then
		ie_origem_filtro_w	:= 'I';
	else
		ie_origem_filtro_w	:= 'P';
	end if;
	CALL pls_cp_cta_gerar_combinada(	ie_origem_filtro_w, null, null,
					null, nr_seq_conta_p, null,
					null, null, null,
					cd_estabelecimento_p, nm_usuario_p);
								

	CALL pls_grava_log_execucao_temp('Inicio pls_recalcular_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	/* Felipe - OS 293898 - Todas as rotinas de valores serao chamadas na rotina abaixo */

	CALL pls_recalcular_conta(nr_seq_conta_p, nm_usuario_p,'C','N','N', null,null);
	CALL pls_grava_log_execucao_temp('Fim pls_recalcular_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	
	if (ie_commit_p = 'S') then
		commit;
	end if;
end if;

if (ie_estagio_geracao_p  in ('T','Q')) or (coalesce(ie_estagio_geracao_p::text, '') = '') then
	/*Diego - OS 336653 - Geracao de procedimentos e materiais automaticos.*/


	

	/*Diego 403186 - Hist. 20/04/2012 10:18:11 - Caso ja tenha uma senha nao e atualiado. */

	if (coalesce(cd_senha_externa_ww,'X') = 'X') then
		select  max(cd_senha_externa)
		into STRICT  cd_senha_externa_w
		from  pls_guia_plano
		where  nr_sequencia    = nr_seq_guia_w;

		update	pls_conta
		set	cd_senha_externa	= cd_senha_externa_w
		where	nr_sequencia		= nr_seq_conta_p;
	end if;

	select	ie_exige_autorizacao
	into STRICT	ie_consistir_guia_w
	from	pls_conta
	where	nr_sequencia  = nr_seq_conta_p;

	if (coalesce(ie_consistir_guia_w,'N') = 'N')  then
		ie_consistir_guia_w  := pls_obter_se_exige_guia(nr_seq_conta_p,null);
	end if;

	if (coalesce(ie_consistir_guia_w,'N') = 'S') then
		if (nr_seq_guia_w = 0) or (nr_seq_segurado_w <> nr_seq_segurado_guia_w) then
			CALL pls_gravar_conta_glosa('1307',nr_seq_conta_p,null,null,'N','Operadora exige autorizacao para esta conta (CC)',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		else
			select	ie_status
			into STRICT	ie_status_guia_w
			from	pls_guia_plano
			where	nr_sequencia  = nr_seq_guia_w;

			if (ie_status_guia_w <> '1') then
				CALL pls_gravar_conta_glosa('1399',nr_seq_conta_p,null,null,'N','Guia nao autorizada [1] - ' || nr_seq_guia_w || ' - ' || nr_seq_segurado_w,nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
			end if;
		end if;
	end if;

	if (ie_internacao_w = 'S') then
		
		select	coalesce(max(nr_seq_guia_principal),'1')
		into STRICT	nr_seq_guia_principal_w
		from	pls_guia_plano
		where	nr_sequencia = nr_seq_guia_w
		and	ie_status <> '3'; -- 3 = Negado
		
		if (nr_seq_guia_principal_w IS NOT NULL AND nr_seq_guia_principal_w::text <> '') then
			select	coalesce(max(ie_tipo_guia),'1')
			into STRICT	ie_tipo_guia_ref_w
			from	pls_guia_plano
			where	nr_sequencia = nr_seq_guia_principal_w
			and	ie_status <> '3';
		else
			select	coalesce(max(ie_tipo_guia),'1')
			into STRICT	ie_tipo_guia_ref_w
			from	pls_guia_plano
			where	nr_sequencia = nr_seq_guia_w
			and	ie_status <> '3'; -- 3 = Negado
		end if;
		
		-- precisa ser solicitacao ou prorrogacao de internacao
		if (coalesce(ie_tipo_guia_ref_w,'1')	not in ('1', '8')) then
			ds_tipo_guia_ref_w  := obter_valor_dominio(1746, ie_tipo_guia_ref_w) || ' (' || ie_tipo_guia_ref_w || ')';
			CALL pls_gravar_conta_glosa('1302', nr_seq_conta_p, null,null, 'N', 'Tipo guia referencia: ' || ds_tipo_guia_ref_w,nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_exec_w, cd_estabelecimento_p, '', null);
		end if;
	end if;

	if (coalesce(nr_seq_analise_w,0) > 0) then
		ie_reconsistencia_w  := 'S';
	end if;

	  /*Qtde de dias em que o beneficiario esta inadimplenete - pagador*/

	qt_dias_vencido_w  := pls_obter_dias_inadimplencia(nr_seq_segurado_w);

	/* Obtem se o pagador do beneficiario e PF ou PJ */

	begin
	select	CASE WHEN b.cd_cgc='' THEN 'PF'  ELSE 'PJ' END
	into STRICT	ie_tipo_pagador_w
	from	pls_contrato_pagador	b,
		pls_segurado    	a
	where	a.nr_sequencia    	= nr_seq_segurado_w
	and	a.nr_seq_pagador  	= b.nr_sequencia;
	exception
	when others then
		ie_tipo_pagador_w  := 'A';
	end;

	CALL pls_grava_log_execucao_temp('Inicio pls_gerar_ocorrencia conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	CALL pls_gerar_ocorrencia(	nr_seq_segurado_w, 'P', 'S',nr_seq_conta_p, null, null,null, null, null,ie_tipo_guia_w, nr_seq_plano_w, 'C',
				qt_dias_vencido_w,ie_tipo_pagador_w, nr_seq_prestador_exec_w,nr_seq_tipo_atendimento_w,'AC','',ie_origem_conta_w,nm_usuario_p, cd_estabelecimento_p,
				nr_seq_congenere_w,ie_tipo_conta_w, null,null, ie_reconsistencia_w);
				
	CALL pls_grava_log_execucao_temp('Fim pls_gerar_ocorrencia conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);

	/* Fazer a verificacao se o item sera liberado pelo sistema quando os valores nao estao  de acordo
	  Utiliza a funcao OPS - Cadastro de Regras / Contas medicas / Liberacao de valores na conta */
	CALL pls_grava_log_execucao_temp('Inicio pls_obter_regra_valor_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	CALL pls_obter_regra_valor_conta(nr_seq_conta_p,null,null,ie_origem_regra_p,nm_usuario_p);
	CALL pls_grava_log_execucao_temp('Fim pls_obter_regra_valor_conta conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	/*INSERIDOS OS CURSORES ABAIXO PARA QUE SEJA POSSIVEL O ITEM OBTER REGRA DE VALOR ANTES DE GERAR GLOSA 9919 - OS 406815 */

end if;

if (ie_estagio_geracao_p   in ('T','S')) or (coalesce(ie_estagio_geracao_p::text, '') = '') then
	/* Francisco - 13/05/2013 - Chamada das ocorrencias combinadas */

	CALL pls_grava_log_execucao_temp('Inicio pls_oc_cta_gerar_combinada conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	CALL pls_oc_cta_gerar_combinada(  'CC', 'A', null, null, null, nr_seq_conta_p, null, null, null, null, null,null, null, null, cd_estabelecimento_p, nm_usuario_p);
	CALL pls_grava_log_execucao_temp('Fim pls_oc_cta_gerar_combinada conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	if (ie_commit_p = 'S') then
		commit;
	end if;
end if;

if (ie_estagio_geracao_p   in ('T','U')) or (coalesce(ie_estagio_geracao_p::text, '') = '') then
	select	count(1)
	into STRICT	qt_pls_resumo_w
	from	w_pls_resumo_conta
	where	nr_seq_analise  = nr_seq_analise_w;

	 for r_c01_w in C01() loop
		begin
		ie_status_item_analise_w := '';

		if (coalesce(nr_seq_analise_w,0) > 0) and (qt_pls_resumo_w  > 0)then
			select  max(ie_status)
			into STRICT  ie_status_item_analise_w
			from  w_pls_resumo_conta
			where  nr_seq_conta_proc = r_c01_w.nr_sequencia
			and  nr_seq_analise    = nr_seq_analise_w;
		end if;

		if (coalesce(ie_status_item_analise_w,'X') <> 'C') then
			if (coalesce(r_c01_w.cd_procedimento,0) <> 0) then
				CALL pls_grava_log_execucao_temp('Inicio pls_consistir_conta_proc proc ' || r_c01_w.nr_sequencia, 'geracao_analise_consistir_conta', nm_usuario_p);
				CALL pls_consistir_conta_proc(r_c01_w.nr_sequencia, cd_estabelecimento_p,'S', nm_usuario_p);
				CALL pls_grava_log_execucao_temp('Fim pls_consistir_conta_proc proc ' || r_c01_w.nr_sequencia, 'geracao_analise_consistir_conta', nm_usuario_p);
			else
				if (r_c01_w.ie_tipo_despesa = '4') then
				CALL pls_gravar_conta_glosa('2801',null,r_c01_w.nr_sequencia,
					null,'N', 'Servico invalido.',
					nm_usuario_p,'A',ie_evento_w,
					nr_seq_prestador_w, cd_estabelecimento_p, '', null);
				else
					CALL pls_gravar_conta_glosa('1801',null,r_c01_w.nr_sequencia,
					null,'N', 'Servico invalido.',
					nm_usuario_p,'A',ie_evento_w,
					nr_seq_prestador_w, cd_estabelecimento_p, '', null);
				end if;
			end if;
		end if;

	    if (ie_commit_p = 'S')then
		commit;
	    end if;
	    end;
	  end loop;

	if (ie_tipo_guia_w  <> '3') then
		/*Obter o valor do parametro 10 */

		ind_mat  := 1;
		for r_c02_w in C02 loop
			begin
			vetor_mat_w[ind_mat].nr_seq_conta_mat  := r_c02_w.nr_sequencia;
			vetor_mat_w[ind_mat].nr_seq_material  := r_c02_w.nr_seq_material;
			ind_mat  := ind_mat + 1;
			end;
		end loop;

		total_mat := vetor_mat_w.count;
		for ind_mat in 1.. total_mat loop
			begin
			nr_seq_conta_mat_w  := vetor_mat_w[ind_mat].nr_seq_conta_mat;
			nr_seq_material_w  := vetor_mat_w[ind_mat].nr_seq_material;
			ie_status_item_analise_w := '';

			if (coalesce(nr_seq_analise_w,0) > 0) and (qt_pls_resumo_w  > 0 )then
				
				select  max(ie_status)
				into STRICT	ie_status_item_analise_w
				from	w_pls_resumo_conta
				where	nr_seq_conta_mat  = nr_seq_conta_mat_w
				and	nr_seq_analise	= nr_seq_analise_w;
			end if;
	      /* Diego OS 449989 - Para que os itens cancelados nao sejam consistidos novamente. */

			if (coalesce(ie_status_item_analise_w,'X') != 'C') then
				if (coalesce(nr_seq_material_w,0) != 0) or (ie_obriga_vinc_mat_w = 'N' and
					coalesce(nr_seq_material_w::text, '') = '') then
					CALL pls_grava_log_execucao_temp('Inicio pls_consistir_conta_mat mat ' || nr_seq_conta_mat_w, 'geracao_analise_consistir_conta', nm_usuario_p);
					CALL pls_consistir_conta_mat(nr_seq_conta_mat_w, cd_estabelecimento_p,'S', nm_usuario_p,ie_utilizar_regra_mat_w);
					CALL pls_grava_log_execucao_temp('Fim pls_consistir_conta_mat mat ' || nr_seq_conta_mat_w, 'geracao_analise_consistir_conta', nm_usuario_p);
				else
					CALL pls_gravar_conta_glosa('2003',null,null,nr_seq_conta_mat_w,'N', 'Material invalido.',nm_usuario_p,'A',ie_evento_w,nr_seq_prestador_w, cd_estabelecimento_p, '', null);
				end if;
			end if;
			
			if (ie_commit_p = 'S') then
				commit;
			end if;
			end;
		end loop;
		
		-- verifica se gerou alguma glosa 2009 ou 2206, se gerou precisamos alterar o ie_exige_autorizacao da pls_conta

		-- esse update era feito uma vez para cada material, passamos a fazer 1 vez por conta
		select	count(1)
		into STRICT	qt_itens_w
		from	pls_conta_mat a
		where	a.nr_seq_conta = nr_seq_conta_p
		and	exists (	SELECT	1
				from	pls_conta_glosa x
				where	x.nr_seq_conta = nr_seq_conta_p
				and	x.nr_seq_conta_mat = a.nr_sequencia
				and	x.nr_seq_motivo_glosa in (	select	nr_sequencia
									from	tiss_motivo_glosa
									where	cd_motivo_tiss in ('2009', '2206')
									and	coalesce(cd_convenio::text, '') = ''));

		if (qt_itens_w > 0) then

			update	pls_conta
			set	ie_exige_autorizacao = 'S'
			where	nr_sequencia = nr_seq_conta_p;
		end if;
	end if;

	if (coalesce(ie_atualiza_apresentado_w,'N') <> 'N') then
		CALL pls_grava_log_execucao_temp('Inicio pls_atualiza_valor_apresentado conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
		CALL pls_atualiza_valor_apresentado( null, null, null, nr_seq_conta_p, null, cd_estabelecimento_p, nm_usuario_p);
		CALL pls_grava_log_execucao_temp('Fim pls_atualiza_valor_apresentado conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	end if;

	CALL pls_grava_log_execucao_temp('Inicio pls_liberar_item_automatic conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	CALL pls_liberar_item_automatic(nr_seq_conta_p,null,null,nm_usuario_p);
	CALL pls_grava_log_execucao_temp('Fim pls_liberar_item_automatic conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);

	if (ie_commit_p = 'S') then
		commit;
	end if;

	CALL pls_grava_log_execucao_temp('Inicio Updates finais conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	/* Atualizar a tabela de resumo de pagamento da conta */

	CALL pls_atualizar_conta_resumo(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p);

	/* Atualizar os valores da conta */

	CALL pls_atualiza_valor_conta(nr_seq_conta_p,nm_usuario_p); /* Rotina chamada na PLS_FECHAR_CONTA */
if (coalesce(ie_analise_p,'N') = 'N') then
	/* Atualizar a tabela de resumo dos valores da conta */

	CALL pls_cta_consistir_pck.gerar_resumo_conta(null, null, null, nr_seq_conta_p, nm_usuario_p, cd_estabelecimento_p, null);

end if;
	if (ie_commit_p = 'S') then
		commit;
	end if;

	/* Atualizar os valores do protocolo  da conta */

	if (coalesce(ie_protocolo_inteiro_p,'N') = 'N') then
		CALL pls_gerar_valores_protocolo(nr_seq_protocolo_w, nm_usuario_p);
	end if;
	
	if (pls_util_cta_pck.ie_atualiza_util_guia_w = 'S') then
		CALL pls_atualizar_utilizacao_guia(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p, ie_analise_p);
	end if;

	/*Robson da Silva, 373957 */

	if (coalesce(ie_protocolo_inteiro_p,'N') = 'N') then
		CALL pls_altera_status_protocolo( nr_seq_protocolo_w, 'X', 'N', cd_estabelecimento_p, nm_usuario_p);
	end if;

	if (ie_commit_p = 'S') then
		commit;
	end if;
	
	/* Paulo - Gerar conta de honorario individual */


	/*Diego - Substituida a PLS_CONTA_GERAR_HI pela PLS_GERAR_CONTA_PARTIC*/



	/* Lepinski - OS 381715 Atualizar o valor de provisao do procedimento/material
	Atualizado em 29/12/2012 - Conforme Adriano, se o valor apresentado veio na conta (Nao foi atualizado pelo sistema), deve considerar o apresentado 
	Se houver informacao de lote contabil gravado, ira atualizar o valor apenas se for um lote originado na contabilidade instantanea */
	
	update	pls_conta_proc
	set	vl_provisao	= CASE WHEN coalesce(vl_procedimento_imp,0)=0 THEN  vl_procedimento  ELSE vl_procedimento_imp END ,	
		ie_origem_provisao  = CASE WHEN coalesce(vl_procedimento_imp,0)=0 THEN  'C'  ELSE 'A' END 
	where	nr_seq_conta    = nr_seq_conta_p
	and	((coalesce(nr_lote_contabil_prov,0) = 0) --acrescentado o nvl pois quando realiza a exclusao do lote contabil o nr_lote_contabil_prov recebe 0 e nao null, fazendo com que o vl_provisao fique nulo caso reconsistido
	or (coalesce(nr_lote_contabil_prov, 0) <> 0
	and (SELECT coalesce(max(b.ie_status_origem), 'M')
		 from	lote_contabil b
		 where	b.nr_lote_contabil = nr_lote_contabil_prov) = 'SO'));

	update	pls_conta_mat
	set	vl_provisao		= CASE WHEN coalesce(vl_material_imp,0)=0 THEN  vl_material  ELSE vl_material_imp END ,
		ie_origem_provisao	= CASE WHEN coalesce(vl_material_imp,0)=0 THEN  'C'  ELSE 'A' END 
	where	nr_seq_conta    = nr_seq_conta_p
	and	((coalesce(nr_lote_contabil_prov,0) = 0) --acrescentado o nvl pois quando realiza a exclusao do lote contabil o nr_lote_contabil_prov recebe 0 e nao null, fazendo com que o vl_provisao fique nulo caso reconsistido
	or (coalesce(nr_lote_contabil_prov, 0) <> 0
	and (SELECT coalesce(max(b.ie_status_origem), 'M')
		 from	lote_contabil b
		 where	b.nr_lote_contabil = nr_lote_contabil_prov) = 'SO'));

	if (coalesce(ie_commit_p,'S') = 'S') then
		commit;
	end if;

	if (coalesce(ie_atualiza_agrup_p,'S') = 'S') then
		CALL pls_atualizar_agrup_analise(nr_seq_conta_p,nm_usuario_p,'C',ie_commit_p);
		CALL pls_analise_atualizar_id_itens(nr_seq_conta_p, nm_usuario_p, cd_estabelecimento_p, ie_commit_p);
	end if;

	  /*Diego - Ao finalizar a consistencia da conta a verificado se existe itens a faturar.  Se existir seta-se para pendente de faturamento,*/

	select	count(1)
	into STRICT	qt_existe_fat_w
	from	pls_conta_pos_estabelecido  a
	where	a.nr_seq_conta  = nr_seq_conta_p
	and	((ie_situacao		= 'A') or (coalesce(ie_situacao::text, '') = ''));

	if (qt_existe_fat_w > 0) then
		update	pls_conta
		set	ie_status_fat  = 'P'
		where	nr_sequencia  = nr_seq_conta_p;
	end if;

	update  pls_conta
	set	dt_fim_consistencia  = clock_timestamp()
	where	nr_sequencia    = nr_seq_conta_p;

	-- verifica se a funcao do pagamento de producao medica e a nova, caso seja faz o vinculo dos eventos
	if (coalesce(ie_analise_p, 'N') = 'N') and (coalesce(ie_estagio_geracao_p, 'T') = 'T') then
		CALL pls_grava_log_execucao_temp('Inicio vinculo dos eventos do pagamento ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
		CALL pls_pp_cta_evento_combinada(null, nr_seq_conta_p, null, cd_estabelecimento_p, nm_usuario_p);
		CALL pls_grava_log_execucao_temp('Fim vinculo dos eventos do pagamento ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	end if;

	-- Faz a abertura de pacotes para o faturamento
	if (coalesce(ie_analise_p, 'N') = 'N') and (coalesce(ie_estagio_geracao_p, 'T') = 'T') then
		
		CALL pls_grava_log_execucao_temp('Inicio abertura pacotes do faturamento ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
		CALL pls_tratar_abertura_pct_fat(nr_seq_conta_p, null, null, null, cd_estabelecimento_p, nm_usuario_p);
		CALL pls_grava_log_execucao_temp('Inicio abertura pacotes do faturamento ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);
	end if;
	
	CALL pls_grava_log_execucao_temp('Fim Updates finais conta ' || nr_seq_conta_p, 'geracao_analise_consistir_conta', nm_usuario_p);

	--pls_atualizar_codificacao_pck.pls_atualizar_codificacao(dt_referencia_month_w);
	

	if (qt_outro_w > 0) then
	
		nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 40, 'G', qt_movimento_w, nr_seq_atualizacao_w);
			
		qt_movimento_w := ctb_pls_atualizar_prov_prod_in( nr_seq_conta_p, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w);
						
		nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 40, 'A', qt_movimento_w, nr_seq_atualizacao_w);
	end if;	
		
	if (qt_prest_pgto_w > 0) then
	
		nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 40, 'G', qt_movimento_w, nr_seq_atualizacao_w);
			
		qt_movimento_w := ctb_pls_atualiza_prov_prod_res( nr_seq_conta_p, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, cd_empresa_w, ie_status_prov_pagto_w, ie_lote_ajuste_prod_w, qt_movimento_w, dt_referencia_w);
						
		nr_seq_atualizacao_w := pls_gerar_atualizacao_contabil(	dt_referencia_w, nm_usuario_p, cd_estabelecimento_p, 40, 'A', qt_movimento_w, nr_seq_atualizacao_w);
	end if;
	
	if (coalesce(ie_commit_p,'S') = 'S') then
		commit;
	end if;
end if;

if ( ie_estagio_geracao_p = 'U') then

	if ( ie_gerar_Previa_pos_w = 'S') then
	
		select 	count(1)
		into STRICT	qt_reg_prev_w
		from	pls_conta_pos_estab_prev
		where	nr_seq_conta = nr_seq_conta_p
		and 	(nr_lote_contabil_prov IS NOT NULL AND nr_lote_contabil_prov::text <> '');	
		
		if ( qt_reg_prev_w = 0) then
			CALL pls_gerar_valor_pos_estab( nr_seq_conta_p, nm_usuario_p, ie_geracao_pos_estab_w,null,null,'P');
		end if;
		
	end if;   -- do if do parametro da previa do pos
end if;

select	coalesce(max(ie_concil_contab), 'N')
into STRICT	ie_concil_contab_w
from 	pls_visible_false;

if (ie_concil_contab_w = 'S') then

	CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_consistir_conta(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p);
end if;
	
if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_conta ( nr_seq_conta_p pls_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text, ie_protocolo_inteiro_p text, ie_xml_p text, ie_origem_regra_p text, ie_atualiza_agrup_p text, ie_estagio_geracao_p text default 'T', ie_analise_p text default 'N') FROM PUBLIC;

