-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_b500_icmsipi ( nr_seq_controle_p bigint) AS $body$
DECLARE


-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1)	:= 'N';
nr_vetor_w		bigint	:= 0;
qt_cursor_w		bigint	:= 0;
vl_total_despesa_w	bigint	:= 0;	

-- FIS_EFD_ICMSIPI_B500
nr_seq_icmsipi_B500_w	fis_efd_icmsipi_B500.nr_sequencia%type;
qt_prof_w		fis_efd_icmsipi_B500.qt_prof%type;
cd_ver_w                fis_efd_icmsipi_controle.cd_ver%type;
			
-- USUARIO
nm_usuario_w			usuario.nm_usuario%type;

/*Cursor que retorna as informacoes para o registro B500 restringindo pela sequencia da nota fiscal e sendo agrupado pelos campos de Codigo da Situacao Tributaria, Codigo Fiscal de Operacao e Prestacao e  Aliquota do ICMS*/

c_movimentos_B500 CURSOR FOR
SELECT c.vl_or
  from fis_efd_icmsipi_controle  a,
       fis_efd_icmsipi_lote      b,
       fis_efd_icmsipi_reg_geral c
 where a.nr_seq_lote = b.nr_sequencia
   and b.nr_sequencia = c.nr_seq_lote
   and a.nr_sequencia = nr_seq_controle_p;
	
	
/*Criacao do array com o tipo sendo do cursor eespecificado - C_MOVIMENTOS_B500 */
	
type reg_c_movimentos_B500 is table of c_movimentos_B500%RowType;
vetmovimentos_B500	reg_c_movimentos_B500;

/*Criacao do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_B500 */

type registro is table of fis_efd_icmsipi_B500%rowtype index by integer;
fis_registros_w		registro;
		
BEGIN
/*Obter o usuario ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

select  a.cd_ver
into STRICT 	cd_ver_w
from  	fis_efd_icmsipi_controle   a
where  	a.nr_sequencia 		= nr_seq_controle_p;

if ((cd_ver_w)::numeric  >= 13) then
	open c_movimentos_B500;
	loop
	fetch c_movimentos_B500 bulk collect into vetmovimentos_B500 limit 1000;
		for i in 1..vetmovimentos_B500.Count loop
			begin
			
			/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_B500 */

			select	nextval('fis_efd_icmsipi_b500_seq')
			into STRICT	nr_seq_icmsipi_B500_w
			;
			
			/*fis_gerar_reg_B510_icmsipi(	nr_seq_controle_p,
							nr_seq_icmsipi_B500_w);*/

			
			/*Incrementa a variavel para o array*/

			qt_cursor_w:=	qt_cursor_w + 1;
			
			qt_prof_w := 0;
			
			/*select 	count(a.ie_ind_prof) 
			into 	qt_prof_w
			from 	fis_efd_icmsipi_b510 a
			where 	a.nr_seq_controle = nr_seq_controle_p
			and 	a.ie_ind_prof = '0';*/
			select	count(c.ie_ind_prof)
			into STRICT 	qt_prof_w
			FROM fis_efd_icmsipi_lote b, fis_efd_icmsipi_controle a, fis_efd_icmsipi_regra_b510 c
LEFT OUTER JOIN pessoa_fisica d ON (c.cd_pessoa_fisica = d.cd_pessoa_fisica)
WHERE a.nr_seq_lote = b.nr_sequencia and b.nr_sequencia = c.nr_seq_lote  and a.nr_sequencia = nr_seq_controle_p and c.ie_ind_prof = '0';
					
			if (ie_gerou_dados_bloco_w = 'N') then
				ie_gerou_dados_bloco_w:=	'S';
			end if;
			
			/*Inserindo valores no array para realizacao do forall posteriormente*/

			fis_registros_w[qt_cursor_w].nr_sequencia		:= nr_seq_icmsipi_B500_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao		:= clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario			:= nm_usuario_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao_nrec	:= clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario_nrec		:= nm_usuario_w;
			fis_registros_w[qt_cursor_w].cd_reg             	:= 'B500';
			fis_registros_w[qt_cursor_w].vl_rec        		:= null;
			fis_registros_w[qt_cursor_w].qt_prof            	:= qt_prof_w;
			fis_registros_w[qt_cursor_w].vl_or			:= vetmovimentos_B500[i].vl_or * qt_prof_w;
			fis_registros_w[qt_cursor_w].nr_seq_controle    	:= nr_seq_controle_p;
			
			if (nr_vetor_w >= 1000) then
				begin
				/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_B500 */

				forall j in fis_registros_w.first..fis_registros_w.last
					insert into fis_efd_icmsipi_B500 values fis_registros_w(j);

				nr_vetor_w	:= 0;
				fis_registros_w.delete;

				commit;

				end;
			end if;
			
			/*incrementa variavel para realizar o forall quando chegar no valor limite*/

			nr_vetor_w	:= nr_vetor_w 	+ 1;
			
			end;
		end loop;
	EXIT WHEN NOT FOUND; /* apply on c_movimentos_B500 */
	end loop;
	close c_movimentos_B500;
end if;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que nao entraram outro for all devido a quantidade de registros no vetor*/

	forall l in fis_registros_w.first..fis_registros_w.last
		insert into fis_efd_icmsipi_B500 values fis_registros_w(l);
		
	fis_registros_w.delete;

	commit;
	
	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualizacao informacao no controle de geracao de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update 	fis_efd_icmsipi_controle
	set	ie_mov_B 	= 'S'
	where 	nr_sequencia 	= nr_seq_controle_p;
end if;

CALL fis_gerar_reg_B510_icmsipi(	nr_seq_controle_p,
				nr_seq_icmsipi_B500_w);
				
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_b500_icmsipi ( nr_seq_controle_p bigint) FROM PUBLIC;

