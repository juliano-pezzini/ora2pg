-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualizar_info_prest_pgto ( dt_referencia_p timestamp, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, cd_tipo_lote_contabil_p bigint) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Agrupar a chamada de rotinas que atualizam as informações contábeis das 
funcionalidades do plano de saúde. 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ X ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
------------------------------------------------------------------------------------------------------------------- 
Referências: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
hr_atualizacao_w		varchar(15);
ie_esquema_contabil_w		varchar(1);
ie_lote_contabil_gerado_w	varchar(1)	:= 'N';
nr_seq_protocolo_w		bigint;
nr_seq_conta_w			bigint;
nr_seq_conta_faturamento_w	bigint;
nr_seq_movimento_w		bigint;
nr_seq_lote_ppsc_w		bigint;
nr_seq_fatura_w			bigint;
qt_segundos_geracao_w		bigint;
qt_horas_att_w			bigint;
qt_minutos_att_w		bigint;
qt_segundos_att_w		bigint;
nr_seq_lote_w			bigint;
qt_lote_gerado_mes_w		bigint;
nr_seq_atualizacao_w		bigint;
qt_conta_proc_w			bigint;
qt_conta_mat_w			bigint;
qt_mov_ppsc_w			bigint;
qt_mov_ppsc_item_w		bigint;
qt_movimento_w			bigint;
qt_fatura_proc_w		bigint;
qt_fatura_mat_w			bigint;
nr_seq_lote_cancel_w		bigint;
nr_seq_lote_evento_w		bigint;
nr_seq_lote_pagamento_w		bigint;
qt_mov_tributos_w		bigint;
qt_mov_evento_w			bigint;
nr_vetor_w			bigint	:= 0;
w				bigint	:= 0;
dt_referencia_month_w		timestamp;
dt_inicio_atualizacao_w		timestamp;
dt_fim_atualizacao_w		timestamp;
dt_ref_inicial_w		timestamp;
dt_ref_final_w			timestamp;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;

c_consistencia CURSOR FOR 
	SELECT	nr_sequencia 
	from	pls_movimento_contabil 
	where	nr_seq_atualizacao	= nr_seq_atualizacao_w;

c_contas_pagamento CURSOR FOR 
	SELECT	a.nr_seq_conta 
	from	pls_conta_medica_resumo          a 
	where	a.dt_competencia between dt_ref_inicial_w and dt_ref_final_w 
	and	a.ie_situacao = 'A' 
	and	(a.nr_seq_prestador_pgto IS NOT NULL AND a.nr_seq_prestador_pgto::text <> '') 
	and	(a.nr_seq_lote_pgto IS NOT NULL AND a.nr_seq_lote_pgto::text <> '') 
	and	exists (SELECT 1 
			from	pls_lote_pagamento	y 
			where	y.nr_sequencia	= a.nr_seq_lote_pgto 
			and	y.ie_status	= 'D' 
			and	y.dt_mes_competencia between dt_ref_inicial_w and dt_ref_final_w) 
	group by a.nr_seq_conta;

type 		fetch_array is table of c_contas_pagamento%rowtype;
s_array 	fetch_array;
i		integer	:= 1;
type vetor is table of fetch_array index by integer;
vetor_contas_w	vetor;

c_contas_despesa CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	pls_protocolo_conta	a 
	where	trunc(a.dt_mes_competencia,'month') = dt_referencia_month_w 
	and	coalesce(a.ie_tipo_protocolo,'C')	= 'C';

BEGIN 
qt_movimento_w		:= 0;
dt_inicio_atualizacao_w	:= clock_timestamp();
 
select	nextval('pls_atualizacao_contabil_seq') 
into STRICT	nr_seq_atualizacao_w
;
 
insert into pls_atualizacao_contabil(nr_sequencia, 
	cd_tipo_lote_contabil, 
	dt_mes_competencia, 
	nm_usuario_atualizacao, 
	dt_atualizacao_contas, 
	dt_atualizacao, 
	nm_usuario, 
	dt_atualizacao_nrec, 
	nm_usuario_nrec, 
	dt_inicio_atualizacao, 
	cd_estabelecimento) 
values (nr_seq_atualizacao_w, 
	cd_tipo_lote_contabil_p, 
	dt_referencia_p, 
	nm_usuario_p, 
	clock_timestamp(), 
	clock_timestamp(), 
	nm_usuario_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	dt_inicio_atualizacao_w, 
	cd_estabelecimento_p);
 
dt_referencia_month_w	:= trunc(dt_referencia_p,'month');
 
dt_ref_inicial_w	:= trunc(dt_inicial_p,'dd');
dt_ref_final_w		:= fim_dia(dt_final_p);
 
/* Consistir se já existe lote contábil gerado para o mês */
 
ie_lote_contabil_gerado_w	:= obter_se_lote_contabil_gerado(cd_tipo_lote_contabil_p,dt_referencia_month_w);
 
if (ie_lote_contabil_gerado_w = 'S') then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort( 188714, 'DT_REFERENCIA=' || to_char(dt_referencia_month_w,'mm/yyyy') );
end if;
 
CALL pls_atualizar_codificacao_pck.pls_atualizar_codificacao(dt_referencia_month_w);
 
CALL wheb_usuario_pck.set_ie_lote_contabil('S');
 
/* Contas do lote de pagamento */
 
open c_contas_pagamento;
loop 
fetch c_contas_pagamento bulk collect into s_array limit 1000;
	vetor_contas_w(i)	:= s_array;
	i			:= i + 1;
EXIT WHEN NOT FOUND; /* apply on c_contas_pagamento */
end loop;
close c_contas_pagamento;
 
for i in 1..vetor_contas_w.count loop 
	begin 
	s_array := vetor_contas_w(i);
	for z in 1..s_array.count loop 
		begin 
		qt_movimento_w := ctb_pls_atualizar_prod_med_res(	s_array[z].nr_seq_conta, null, null, nr_seq_atualizacao_w, nm_usuario_p, cd_estabelecimento_p, qt_movimento_w, dt_referencia_p);
		end;
	end loop;
	end;
end loop;
 
CALL wheb_usuario_pck.set_ie_lote_contabil('N');
 
open c_consistencia;
loop 
fetch c_consistencia into 
	nr_seq_movimento_w;
EXIT WHEN NOT FOUND; /* apply on c_consistencia */
	begin 
	CALL pls_consistir_mov_contab(	nr_seq_movimento_w, 
					nm_usuario_p);
	end;
end loop;
close c_consistencia;
 
dt_fim_atualizacao_w	:= clock_timestamp();
 
select (dt_fim_atualizacao_w - dt_inicio_atualizacao_w) * 86400 
into STRICT	qt_segundos_geracao_w
;
 
if (qt_segundos_geracao_w <> 0) then 
	qt_horas_att_w		:= trunc((qt_segundos_geracao_w / 60) / 60);
	qt_segundos_geracao_w	:= qt_segundos_geracao_w - (qt_horas_att_w * 60 * 60);
 
	qt_minutos_att_w	:= trunc(qt_segundos_geracao_w / 60);
	qt_segundos_geracao_w	:= qt_segundos_geracao_w - (qt_minutos_att_w * 60);
 
	qt_segundos_att_w	:= qt_segundos_geracao_w;
 
	hr_atualizacao_w	:= lpad(qt_horas_att_w,2,'0')||':'||lpad(qt_minutos_att_w,2,'0')||':'||lpad(qt_segundos_att_w,2,'0');
else 
	hr_atualizacao_w	:= '00:00:00';
end if;
 
update	pls_atualizacao_contabil 
set	dt_fim_atualizacao	= dt_fim_atualizacao_w, 
	hr_atualizacao		= hr_atualizacao_w, 
	qt_movimento		= qt_movimento_w 
where	nr_sequencia		= nr_seq_atualizacao_w;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualizar_info_prest_pgto ( dt_referencia_p timestamp, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, cd_tipo_lote_contabil_p bigint) FROM PUBLIC;

