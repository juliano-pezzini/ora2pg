-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_dados_pessoa ( cd_pessoa_fisica_p text, cd_cgc_p text, nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
qt_inconsist_espec_w		integer;
cd_inconsistencia_w		integer;
nr_cpf_w			varchar(11);
dt_nascimento_w			timestamp;
nm_mae_w			varchar(60);
cd_cep_w			varchar(15);
cd_ans_w			varchar(20)	:= null;
cd_cnes_w			varchar(20)	:= null;
nr_seq_tipo_doc_pf_w		bigint;
nr_seq_tipo_doc_pj_w		bigint;
ie_consiste_data_doc_w		varchar(1);
qt_documento_w			bigint;
nr_seq_prestador_w		bigint;
qt_resultados_w			integer	:= 0;
ie_tipo_endereco_w		varchar(5);
nr_seq_compl_pf_tel_adic_w	bigint;
ie_idade_pf_w			integer;
ie_consiste_cpf_w		varchar(2);
dt_atualizacao_w		timestamp;
qt_dias_revisao_w		bigint;
nr_identidade_w			varchar(15);
cd_nacionalidade_w		varchar(8);
nr_cartao_nac_sus_w		pessoa_fisica.nr_cartao_nac_sus%type;
cd_declaracao_nasc_vivo_w	pessoa_fisica.cd_declaracao_nasc_vivo%type;
qt_idade_inicial_w		pls_lote_pes_inc_espec.qt_idade_inicial%type;
qt_idade_final_w		pls_lote_pes_inc_espec.qt_idade_final%type;
qt_idade_w			bigint;

c01 CURSOR FOR 
	SELECT	b.cd_inconsistencia, 
		a.nr_seq_tipo_doc, 
		a.nr_seq_pls_tipo_doc, 
		a.ie_consiste_data_doc, 
		a.qt_idade_inicial, 
		a.qt_idade_final 
	from	pls_lote_pes_inc_espec		a, 
		pls_cad_inconsist_pessoa	b 
	where	a.cd_inconsistencia		= b.nr_sequencia 
	and	a.nr_seq_lote			= nr_seq_lote_p 
	order by	cd_inconsistencia;


BEGIN 
 
-- francisco - 25/02/2010 - iniciei todas as variáveis para não gerar conflito 
-- entre inconsistências que não existem pra física/jurídica 
nr_cpf_w			:= '0';
dt_nascimento_w			:= clock_timestamp();
nm_mae_w			:= '0';
cd_cep_w			:= '0';
cd_ans_w			:= '0';
cd_cnes_w			:= '0';
nr_identidade_w			:= '0';
cd_nacionalidade_w		:= '0';
nr_cartao_nac_sus_w		:= '0';
cd_declaracao_nasc_vivo_w	:= '0';
qt_idade_w			:= 0;
 
if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then 
	delete	FROM pls_inconsistencia_pessoa 
	where	cd_pessoa_fisica	= cd_pessoa_fisica_p;
	 
	begin 
	select	nr_cpf, 
		dt_nascimento, 
		obter_compl_pf(cd_pessoa_fisica_p, 5, 'N') nm_mae, 
		obter_compl_pf(cd_pessoa_fisica_p, 1, 'CEP') cd_cep, 
		dt_atualizacao, 
		nr_identidade, 
		cd_nacionalidade, 
		nr_cartao_nac_sus, 
		cd_declaracao_nasc_vivo, 
		substr(obter_idade(dt_nascimento, clock_timestamp(), 'A'),1,10) qt_idade 
	into STRICT	nr_cpf_w, 
		dt_nascimento_w, 
		nm_mae_w, 
		cd_cep_w, 
		dt_atualizacao_w, 
		nr_identidade_w, 
		cd_nacionalidade_w, 
		nr_cartao_nac_sus_w, 
		cd_declaracao_nasc_vivo_w, 
		qt_idade_w 
	from	pessoa_fisica 
	where	cd_pessoa_fisica	= cd_pessoa_fisica_p;
	exception 
	when others then 
		nr_cpf_w			:= null;
		dt_nascimento_w			:= null;
		nm_mae_w			:= null;
		cd_cep_w			:= null;
		nr_identidade_w			:= null;
		cd_nacionalidade_w		:= null;
		nr_cartao_nac_sus_w		:= null;
		cd_declaracao_nasc_vivo_w	:= null;
		qt_idade_w			:= null;
	end;
	 
	select	max(a.nr_sequencia) 
	into STRICT	nr_seq_prestador_w 
	from	pls_prestador a 
	where	a.cd_pessoa_fisica	= cd_pessoa_fisica_p;
elsif (cd_cgc_p IS NOT NULL AND cd_cgc_p::text <> '') then 
	delete	FROM pls_inconsistencia_pessoa 
	where	cd_cgc	= cd_cgc_p;
	 
	begin 
	select	cd_cep, 
		cd_ans, 
		cd_cnes 
	into STRICT	cd_cep_w, 
		cd_ans_w, 
		cd_cnes_w 
	from	pessoa_juridica 
	where	cd_cgc	= cd_cgc_p;
	exception 
	when others then 
		cd_cep_w	:= null;
		cd_ans_w	:= null;
		cd_cnes_w	:= null;
	end;
	 
	select	max(a.nr_sequencia) 
	into STRICT	nr_seq_prestador_w 
	from	pls_prestador a 
	where	((a.cd_cgc	= cd_cgc_p) or (a.cd_pessoa_fisica	= cd_pessoa_fisica_p)) 
	and	a.cd_estabelecimento	= cd_estabelecimento_p;
end if;
 
if (nr_seq_prestador_w IS NOT NULL AND nr_seq_prestador_w::text <> '') then 
	--inicializar com 1 para verificar no final se houve alteração para 0 
	qt_resultados_w	:= 1;
	 
	-- se for um prestador, verifica qual o tipo de endereço, para fazer a consistência. 
	select	ie_tipo_endereco 
	into STRICT	ie_tipo_endereco_w 
	from	pls_prestador 
	where	nr_sequencia	= nr_seq_prestador_w;
	 
	if (ie_tipo_endereco_w = 'PFC' ) then 
		-- verificar se está preenchido o comercial adicional 
		select	nr_seq_compl_pf_tel_adic 
		into STRICT	nr_seq_compl_pf_tel_adic_w 
		from	pls_prestador a 
		where	nr_sequencia	= nr_seq_prestador_w;
		 
		if (nr_seq_compl_pf_tel_adic_w IS NOT NULL AND nr_seq_compl_pf_tel_adic_w::text <> '') then 
			select	count(1) 
			into STRICT	qt_resultados_w 
			from	compl_pf_tel_adic a 
			where	a.cd_pessoa_fisica	= cd_pessoa_fisica_p 
			and	a.nr_sequencia		= nr_seq_compl_pf_tel_adic_w  LIMIT 1;
		else 
			-- se não tiver busca o complemento comercial 
			select	count(1) 
			into STRICT	qt_resultados_w 
			from	compl_pessoa_fisica 
			where	cd_pessoa_fisica	= cd_pessoa_fisica_p 
			and	(cd_cep IS NOT NULL AND cd_cep::text <> '') 
			and	ie_tipo_complemento = 2 -- 2 = comercial 
  LIMIT 1;
		end if;
	elsif (ie_tipo_endereco_w = 'PFR' ) then 
		select	count(1) 
		into STRICT	qt_resultados_w 
		from	compl_pessoa_fisica 
		where	cd_pessoa_fisica	= cd_pessoa_fisica_p 
		and	(cd_cep IS NOT NULL AND cd_cep::text <> '') 
		and	ie_tipo_complemento	= 1 -- 1 = residencial 
  LIMIT 1;
	elsif (ie_tipo_endereco_w = 'PJ' ) then 
		select	count(1) 
		into STRICT	qt_resultados_w 
		from	pessoa_juridica 
		where	cd_cgc	= cd_cgc_p 
		and	(cd_cep IS NOT NULL AND cd_cep::text <> '')  LIMIT 1;
	elsif (ie_tipo_endereco_w = 'PJC' ) then 
		select	count(1) 
		into STRICT	qt_resultados_w 
		from	pessoa_juridica_compl 
		where	cd_cgc	= cd_cgc_p 
		and	(cd_cep IS NOT NULL AND cd_cep::text <> '') 
		and	ie_tipo_complemento = 1 -- 1 = correspondencia 
  LIMIT 1;
	elsif (ie_tipo_endereco_w = 'PJF' ) then 
		select	count(1) 
		into STRICT	qt_resultados_w 
		from	pessoa_juridica_compl 
		where	cd_cgc	= cd_cgc_p 
		and	(cd_cep IS NOT NULL AND cd_cep::text <> '') 
		and	ie_tipo_complemento = 2 -- 2 = financeiro 
  LIMIT 1;
	end if;
	 
	if (qt_resultados_w = 0) then 
		cd_cep_w	:= null;
	end if;
	 
	-- verificar cnes do prestador 
	select	pls_obter_cnes_prestador(nr_seq_prestador_w) 
	into STRICT	cd_cnes_w 
	;
end if;
 
-- buscar quantidade de inconsistências específicas 
select	count(1) 
into STRICT	qt_inconsist_espec_w 
from	pls_lote_pes_inc_espec 
where	nr_seq_lote	= nr_seq_lote_p  LIMIT 1;
 
-- caso não houver inconsistência específica, continua normalmente, caso tenha, vai para o else 
if (qt_inconsist_espec_w = 0) then 
	-- 1 - cpf não informado 
	if (coalesce(nr_cpf_w::text, '') = '') then 
		ie_consiste_cpf_w	:= 'S';
		if (dt_nascimento_w IS NOT NULL AND dt_nascimento_w::text <> '') then 
			select	obter_idade_pf(cd_pessoa_fisica_p,clock_timestamp(),'A') 
			into STRICT	ie_idade_pf_w 
			;
			 
			if (ie_idade_pf_w <= 18) then 
				ie_consiste_cpf_w	:= 'N';
			end if;
		end if;
		 
		if (ie_consiste_cpf_w = 'S') then 
			CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 1, null, null, nm_usuario_p);
		end if;
	end if;
	 
	-- 2 - data de nascimento não informada 
	if (coalesce(dt_nascimento_w::text, '') = '') then 
		CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 2, null, null, nm_usuario_p);
	end if;
	 
	-- 3 - nome da mãe não informado 
	if (coalesce(nm_mae_w::text, '') = '') then 
		CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 3, null, null, nm_usuario_p);
	end if;
	 
	-- 4 - cep não informado 
	if (coalesce(cd_cep_w::text, '') = '') then 
		CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 4, null, null, nm_usuario_p);
	end if;
	 
	-- 5 - código ans não informado 
	if (coalesce(cd_ans_w::text, '') = '') then 
		CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 5, null, null, nm_usuario_p);
	end if;
	 
	-- 6 - código cnes não informado 
	if (coalesce(cd_cnes_w::text, '') = '') then 
		CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 6, null, null, nm_usuario_p);
	end if;
	 
	if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then 
		select	max(qt_dias_revisao) 
		into STRICT	qt_dias_revisao_w 
		from	pls_cad_inconsist_pessoa 
		where	cd_inconsistencia = 10;
		 
		if (coalesce(qt_dias_revisao_w,0) > 0) and 
			((clock_timestamp() - dt_atualizacao_w) >= qt_dias_revisao_w) then 
			CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 10, null, null, nm_usuario_p);
		end if;
	end if;
	 
	-- 13 - CNS não informado 
	if (coalesce(nr_cartao_nac_sus_w::text, '') = '') then 
		CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 13, null, null, nm_usuario_p);
	end if;
	 
	-- 14 - Número da declaração de nascido vivo não informado (Nascimento após 01/01/2010) 
	if	((coalesce(cd_declaracao_nasc_vivo_w::text, '') = '')	and (dt_nascimento_w > to_date('01/01/2010'))) then 
		CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 14, null, null, nm_usuario_p);
	end if;	
else 
	-- passa por todas as inconsistências espefíficas conforme o lote 
	open c01;
	loop 
	fetch c01 into 
		cd_inconsistencia_w, 
		nr_seq_tipo_doc_pf_w, 
		nr_seq_tipo_doc_pj_w, 
		ie_consiste_data_doc_w, 
		qt_idade_inicial_w, 
		qt_idade_final_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin 
		 
		if (qt_idade_w between coalesce(qt_idade_inicial_w,qt_idade_w) and coalesce(qt_idade_final_w,qt_idade_w)) then 
			-- 1 - cpf não informado 
			if (coalesce(nr_cpf_w::text, '') = '') and (cd_inconsistencia_w	= 1) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 1, null, null, nm_usuario_p);
			end if;
			 
			--2 - data de nascimento não informada 
			if (coalesce(dt_nascimento_w::text, '') = '') and (cd_inconsistencia_w	= 2) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 2, null, null, nm_usuario_p);
			end if;
			 
			-- 3 - nome da mãe não informado 
			if (coalesce(nm_mae_w::text, '') = '') and (cd_inconsistencia_w	= 3) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 3, null, null, nm_usuario_p);
			end if;
			 
			-- 4 - cep não informado 
			if (coalesce(cd_cep_w::text, '') = '') and (cd_inconsistencia_w	= 4) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 4, null, null, nm_usuario_p);
			end if;
			 
			-- 5 - código ans não informado 
			if (coalesce(cd_ans_w::text, '') = '') and (cd_inconsistencia_w	= 5) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 5, null, null, nm_usuario_p);
			end if;
			 
			-- 6 - código cnes não informado 
			if (coalesce(cd_cnes_w::text, '') = '') and (cd_inconsistencia_w	= 6) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 6, null, null, nm_usuario_p);
			end if;	
			 
			-- 7 - consistência de documentos da pessoa fisica 
			if (cd_inconsistencia_w	= 7) then 
				select	count(1) 
				into STRICT	qt_documento_w 
				from	pessoa_fisica			a, 
					pls_tipo_documento_pf		b 
				where	a.cd_pessoa_fisica			= b.cd_pessoa_fisica 
				and	a.cd_pessoa_fisica			= cd_pessoa_fisica_p 
				and	b.nr_seq_tipo_documento		= nr_seq_tipo_doc_pf_w 
				and	(((ie_consiste_data_doc_w	= 'S') and (trunc(coalesce(b.dt_validade,clock_timestamp())) >= trunc(clock_timestamp()))) 
				or (ie_consiste_data_doc_w 	= 'N'))  LIMIT 1;
				 
				if (qt_documento_w = 0) then 
					CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 7, nr_seq_tipo_doc_pf_w, null, nm_usuario_p);
				end if;
			end if;
			 
			-- 8 - consistência de documentos do prestador 
			if (cd_inconsistencia_w	= 8) then 
				select	count(1) 
				into STRICT	qt_documento_w 
				from	pls_prestador			a, 
					pls_prestador_tipo_doc		b 
				where	b.nr_seq_prestador			= a.nr_sequencia 
				and	((a.cd_cgc			= cd_cgc_p) or (a.cd_pessoa_fisica		= cd_pessoa_fisica_p)) 
				and	b.nr_seq_tipo_documento		= nr_seq_tipo_doc_pj_w 
				and	(((ie_consiste_data_doc_w	= 'S') and (trunc(coalesce(b.dt_fim_vigencia,clock_timestamp())) >= trunc(clock_timestamp()))) or (ie_consiste_data_doc_w		= 'N')) 
				and	a.cd_estabelecimento		= cd_estabelecimento_p  LIMIT 1;
				 
				if (qt_documento_w = 0) then 
					CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 8, null, nr_seq_tipo_doc_pj_w, nm_usuario_p);
				end if;
			end if;
			 
			-- 9 - consistência de cpf 
			if (nr_cpf_w IS NOT NULL AND nr_cpf_w::text <> '') and (cd_inconsistencia_w	= 9) then 
				if (obter_se_cpf_valido(nr_cpf_w) = 'N') then 
					CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 9, null, null, nm_usuario_p);
				end if;
			end if;
			 
			-- 10 - consistência 
			if (cd_inconsistencia_w = 10) then 
				select	max(qt_dias_revisao) 
				into STRICT	qt_dias_revisao_w 
				from	pls_cad_inconsist_pessoa 
				where	cd_inconsistencia = cd_inconsistencia_w;
				 
				if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (coalesce(qt_dias_revisao_w,0) > 0) and 
					((clock_timestamp() - dt_atualizacao_w) >= qt_dias_revisao_w) then 
					CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 10, null, null, nm_usuario_p);
				end if;
			end if;
			 
			-- 11 - RG não informado 
			if (coalesce(nr_identidade_w::text, '') = '') and (cd_inconsistencia_w	= 11) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 11, null, null, nm_usuario_p);
			end if;
			 
			-- 12 - Nacionalidade não informada 
			if (coalesce(cd_nacionalidade_w::text, '') = '') and (cd_inconsistencia_w	= 12) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 12, null, null, nm_usuario_p);
			end if;
			 
			-- 13 - CNS não informado 
			if (coalesce(nr_cartao_nac_sus_w::text, '') = '') and (cd_inconsistencia_w	= 13) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 13, null, null, nm_usuario_p);
			end if;
			 
			-- 14 - Número da declaração de nascido vivo não informado (Nascimento após 01/01/2010) 
			if (coalesce(cd_declaracao_nasc_vivo_w::text, '') = '') and (dt_nascimento_w >= to_date('01/01/2010')) and (cd_inconsistencia_w = 14) then 
				CALL pls_gravar_inconsist_pessoa(cd_pessoa_fisica_p, cd_cgc_p, 14, null, null, nm_usuario_p);
			end if;
		end if;
		end;
	end loop;
	close c01;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_dados_pessoa ( cd_pessoa_fisica_p text, cd_cgc_p text, nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

