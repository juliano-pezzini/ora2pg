-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE populate_cdx_table ( dt_exportar_de_p timestamp , dt_exportar_ate_p timestamp , nm_usuario_p text , returned_value_p INOUT bigint , other_exception_p INOUT text ) AS $body$
DECLARE

  dt_exportar_de_w  timestamp;
  dt_exportar_ate_w timestamp;
  returned_value_w  bigint;
  /*--CDX table columns*/

  nr_patient_identifier_w    varchar(8 );
  nr_admission_number_w      varchar(12 );
  nr_multiple_primary_site_w varchar(2 );
  cd_reason_clinical_diag_w  varchar(2 );
  ds_reason_clinical_diag_w  varchar(50 );
  line_count_w               bigint:=0;
  downloaded_report_count_w  bigint:=0;
  v_errm                     varchar(100 );
  exc_raised_in_cdx_tab		exception;
  								   																					
  error_result text:=null;
  c01 CURSOR FOR
    SELECT   adiciona_zeros_esquerda(pf.nr_prontuario,8) ,
        adiciona_zeros_esquerda(ap.nr_atendimento,12),
        obter_count_primary_site( rc.nr_atendimento , rc.nr_sequencia ) ,
        rcr.ie_razao ,
        (CASE WHEN (rcr.ds_razao IS NOT NULL AND rcr.ds_razao::text <> '') THEN chr( 34 )||substr( remove_formatacao_rtf_html( rcr.ds_razao ) , 1 , 48 )||chr( 34 )  ELSE null  END)
      from registro_cancer rc ,
        registro_cancer_razao rcr ,
        atendimento_paciente ap ,
        pessoa_fisica pf
      where ap.nr_atendimento =rc.nr_atendimento
      and ap.cd_pessoa_fisica =pf.cd_pessoa_fisica
      and rc.nr_sequencia     = rcr.nr_seq_registro
      and (rc.dt_liberacao IS NOT NULL AND rc.dt_liberacao::text <> '')
      and rc.dt_diagnostico between dt_exportar_de_w and dt_exportar_ate_w;

BEGIN
  dt_exportar_de_w :=dt_exportar_de_p;
  dt_exportar_ate_w:=dt_exportar_ate_p;
  if (dt_exportar_de_w IS NOT NULL AND dt_exportar_de_w::text <> '' AND dt_exportar_ate_w IS NOT NULL AND dt_exportar_ate_w::text <> '') then
    open c01;
    loop
      begin
        line_count_w:=line_count_w+1;
        fetch c01
          into nr_patient_identifier_w ,
            nr_admission_number_w ,
            nr_multiple_primary_site_w ,
            cd_reason_clinical_diag_w ,
            ds_reason_clinical_diag_w;
        EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
        insert into clinical_diagosis_detail(
              nr_sequencia ,
              dt_atualizacao ,
              nm_usuario ,
              dt_atualizacao_nrec ,
              nm_usuario_nrec ,
              nr_patient_identifier ,
              nr_admission_number ,
              nr_multiple_primary_site ,
              cd_reason_clinical_diagnosis ,
              ds_reason_clinical_diagnosis ,
              dt_export_from ,
              dt_export_to ,
              nr_report_sequence
            )
            values (
              nextval('clinical_diagosis_detail_seq') ,
              clock_timestamp() ,
              nm_usuario_p ,
              clock_timestamp() ,
              nm_usuario_p ,
              nr_patient_identifier_w ,
              nr_admission_number_w ,
              nr_multiple_primary_site_w ,
              cd_reason_clinical_diag_w ,
              ds_reason_clinical_diag_w ,
              dt_exportar_de_w ,
              dt_exportar_ate_w ,
              null
            );
		exception when others then
			v_errm      := substr( sqlerrm , 1 , 100 );
			error_result:= error_result || ' '|| v_errm||' . error happened at line '||line_count_w||' for encounter '|| nr_admission_number_w ||chr( 13 )||chr( 10 );
		end;							
	exception
	when data_exception or unique_violation or invalid_cursor_state then
		v_errm      := substr( sqlerrm , 1 , 100 );
		error_result:= error_result || ' '|| v_errm||' . error happened at line '||line_count_w||chr( 13 )||chr( 10 );
	end;
	end loop;
    returned_value_w :=1;
    other_exception_p:=null;
    if (error_result IS NOT NULL AND error_result::text <> '')then
      returned_value_w :=0;
      other_exception_p:=error_result;
	  raise exc_raised_in_cdx_tab;							
    end if;
    close c01;
  end if;
  returned_value_p:=returned_value_w;
exception
when others then
  returned_value_p :=2;
  other_exception_p:=other_exception_p||wheb_mensagem_pck.get_texto( 1073278 , 'DS_ERROR='||'populate_cdx_table. Error:'|| sqlerrm );
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE populate_cdx_table ( dt_exportar_de_p timestamp , dt_exportar_ate_p timestamp , nm_usuario_p text , returned_value_p INOUT bigint , other_exception_p INOUT text ) FROM PUBLIC;

