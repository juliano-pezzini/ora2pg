-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_replicar_event_cont_estab (nr_sequencia_p evento_contabil_param_estab.nr_sequencia%type, cd_evento_p evento_contabil_param_estab.cd_evento%type, cd_tipo_lote_contabil_p evento_contabil_param_estab.cd_tipo_lote_contabil%type, nm_usuario_p evento_contabil_param_estab.nm_usuario%type, cd_estab_origem_p evento_contabil_param_estab.cd_estabelecimento%type, ie_operacao_p bigint) AS $body$
DECLARE


cd_empresa_origem_w		estabelecimento.cd_empresa%type;
nr_seq_grupo_w			grupo_emp_estrutura.nr_seq_grupo%type;
cd_empresa_w			estabelecimento.cd_empresa%type;

cd_tipo_lote_contabil_w		evento_contabil_param_estab.cd_tipo_lote_contabil%type;
cd_evento_w		        evento_contabil_param_estab.cd_evento%type;
nr_sequencia_w			evento_contabil_param_estab.nr_sequencia%type;
ie_origem_conta_w		evento_contabil_param_estab.ie_origem_conta%type;
cd_conta_contabil_w		evento_contabil_param_estab.cd_conta_contabil%type;
cd_conta_contabil_dest_w	evento_contabil_param_estab.cd_conta_contabil%type;
cd_centro_custo_w		evento_contabil_param_estab.cd_centro_custo%type;
cd_centro_custo_dest_w		evento_contabil_param_estab.cd_centro_custo%type;
cd_historico_w			evento_contabil_param_estab.cd_historico%type;
ie_origem_centro_w		evento_contabil_param_estab.ie_origem_centro%type;
nr_seq_classif_movto_w		evento_contabil_param_estab.nr_seq_classif_movto%type;
nr_seq_classif_movto_dest_w	evento_contabil_param_estab.nr_seq_classif_movto%type;

qt_registro_w			integer;

c01 CURSOR FOR
	SELECT	a.cd_empresa
	from	grupo_emp_estrutura a
	where	a.nr_seq_grupo	= holding_pck.GET_GRUPO_EMP_USUARIO(cd_empresa_origem_w)
	and	a.cd_empresa <> cd_empresa_origem_w
	and	obter_se_periodo_vigente(a.dt_inicio_vigencia,a.dt_fim_vigencia,clock_timestamp()) = 'S'
	order by a.cd_empresa;

c01_w		c01%rowtype;

c02 CURSOR FOR
	SELECT	a.cd_estabelecimento
	from	estabelecimento a
	where	a.cd_empresa = cd_empresa_w
	order by a.cd_estabelecimento;

c02_w		c02%rowtype;


BEGIN

cd_empresa_origem_w		:= obter_empresa_estab(cd_estab_origem_p);
nr_seq_grupo_w			:= holding_pck.get_grupo_emp_estrut_vigente(cd_empresa_origem_w);

select	cd_tipo_lote_contabil,
	cd_evento,
	nr_sequencia,
	ie_origem_conta,
	cd_conta_contabil,
	cd_centro_custo,
	cd_historico,
	ie_origem_centro,
	nr_seq_classif_movto
into STRICT	cd_tipo_lote_contabil_w,
        cd_evento_w,
        nr_sequencia_w,
        ie_origem_conta_w,
        cd_conta_contabil_w,
        cd_centro_custo_w,
        cd_historico_w,
        ie_origem_centro_w,
        nr_seq_classif_movto_w
from	evento_contabil_param_estab
where	cd_estabelecimento = cd_estab_origem_p
and	cd_tipo_lote_contabil = cd_tipo_lote_contabil_p
and	cd_evento = cd_evento_p
and	nr_sequencia = nr_sequencia_p;

open c01;
loop
fetch c01 into	
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	cd_empresa_w := c01_w.cd_empresa;

	open c02;
	loop
	fetch c02 into	
		c02_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin

		begin
		select	cd_centro_custo
		into STRICT	cd_centro_custo_dest_w
		from	centro_custo
		where	cd_centro_custo_ref = cd_centro_custo_w
		and	ie_situacao = 'A'
		and	cd_estabelecimento = c02_w.cd_estabelecimento;
		exception
		when no_data_found then
			cd_centro_custo_dest_w := null;
		end;

		begin
		select	a.cd_conta_contabil
		into STRICT	cd_conta_contabil_dest_w
		from	conta_contabil a,
			estabelecimento b
		where	a.cd_empresa = b.cd_empresa
		and	b.cd_estabelecimento = c02_w.cd_estabelecimento
		and	a.cd_conta_referencia = cd_conta_contabil_w
		and	a.ie_situacao = 'A';
		exception
		when no_data_found then
			cd_conta_contabil_dest_w := null;
		end;

		begin
		select	a.nr_sequencia
		into STRICT	nr_seq_classif_movto_dest_w
		from	ctb_classif_movimento a,
			estabelecimento b
		where	a.cd_empresa = b.cd_empresa
		and	b.cd_estabelecimento = c02_w.cd_estabelecimento
		and	nr_seq_grupo_emp = nr_seq_grupo_w
		and	nr_sequencia = nr_seq_classif_movto_w;
		exception
		when no_data_found then
			nr_seq_classif_movto_dest_w := null;
		end;

		select	count(1)
		into STRICT	qt_registro_w
		from	evento_contabil_param_estab a
		where	cd_estabelecimento = c02_w.cd_estabelecimento
		and	cd_tipo_lote_contabil = cd_tipo_lote_contabil_w
		and	cd_evento = cd_evento_w
		and	nr_sequencia = nr_sequencia_w;

		if	(ie_operacao_p = 3 AND qt_registro_w > 0) then
			begin

			delete
			from	evento_contabil_param_estab a
			where	cd_estabelecimento = c02_w.cd_estabelecimento
			and	cd_tipo_lote_contabil = cd_tipo_lote_contabil_w
			and	cd_evento = cd_evento_w
			and	nr_sequencia = nr_sequencia_w;
			
			commit;
			
			end;

		elsif ((ie_operacao_p = 1) or (ie_operacao_p = 2)) then
			begin

			if (qt_registro_w = 0) then
				begin

				insert into evento_contabil_param_estab(cd_estabelecimento,
								cd_tipo_lote_contabil,
								cd_evento,
								nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								ie_origem_conta,
								cd_conta_contabil,
								cd_centro_custo,
								cd_historico,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								ie_origem_centro,
								nr_seq_classif_movto)
							values (c02_w.cd_estabelecimento,
								cd_tipo_lote_contabil_w,
								cd_evento_w,
								nr_sequencia_w,
								clock_timestamp(),
								nm_usuario_p,
								ie_origem_conta_w,
								cd_conta_contabil_dest_w,
								cd_centro_custo_dest_w,
								cd_historico_w,
								clock_timestamp(),
								nm_usuario_p,
								ie_origem_centro_w,
								nr_seq_classif_movto_dest_w);

				commit;
				
				end;
			elsif (qt_registro_w > 0) then
				begin

				update	evento_contabil_param_estab
				set	cd_estabelecimento	= c02_w.cd_estabelecimento,
					cd_tipo_lote_contabil	= cd_tipo_lote_contabil_w,
					cd_evento		= cd_evento_w,
					nr_sequencia		= nr_sequencia_w,
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p,
					ie_origem_conta		= ie_origem_conta_w,
					cd_conta_contabil	= cd_conta_contabil_dest_w,
					cd_centro_custo		= cd_centro_custo_dest_w,
					cd_historico		= cd_historico_w,
					ie_origem_centro	= ie_origem_centro_w,
					nr_seq_classif_movto	= nr_seq_classif_movto_dest_w
				where	cd_estabelecimento = c02_w.cd_estabelecimento
				and	cd_tipo_lote_contabil = cd_tipo_lote_contabil_w
				and	cd_evento = cd_evento_w
				and	nr_sequencia = nr_sequencia_w;
				
				commit;
				
				end;
			end if;

			end;
		end if;

		end;
	end loop;
	close c02;

	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_replicar_event_cont_estab (nr_sequencia_p evento_contabil_param_estab.nr_sequencia%type, cd_evento_p evento_contabil_param_estab.cd_evento%type, cd_tipo_lote_contabil_p evento_contabil_param_estab.cd_tipo_lote_contabil%type, nm_usuario_p evento_contabil_param_estab.nm_usuario%type, cd_estab_origem_p evento_contabil_param_estab.cd_estabelecimento%type, ie_operacao_p bigint) FROM PUBLIC;

