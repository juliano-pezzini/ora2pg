-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_pag_prest_desc_prior ( nr_seq_pagamento_p bigint, vl_retorno_p INOUT bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Gerar os vencimentos para descontos com prioridade. 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[X] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 	 
 
ds_vencimentos_w		varchar(4000);
ds_erro_w			varchar(255)	:= null;
nm_prestador_w			varchar(80);
ie_parametro_21_w		varchar(2) 	:= null;
ie_saldo_negativo_w		varchar(2)	:= null;
ie_acao_venc_nao_util_w		varchar(1)	:= 'M';
ie_gera_titulo_w		varchar(1)	:= 'N';
ie_proximo_pgto_w		varchar(1);
vl_eventos_w			double precision	:= 0;
vl_prestador_w			double precision;
vl_vencimento_w			double precision;
vl_glosa_w			double precision;
vl_glosado_w			double precision;
vl_vencimentos_w		double precision;
vl_eventos_positivos_w		double precision;
vl_evento_priorizados_w		double precision;
nr_seq_evento_w			bigint;
nr_seq_pag_item_w		bigint;
qt_vencimentos_w		bigint;
cd_condicao_pagamento_w		bigint;
nr_seq_vencimento_w		bigint;
nr_parcela_w			bigint;
nr_seq_prestador_w		bigint;
nr_seq_periodo_w		bigint;
cd_cond_pagamento_periodo_w	bigint;
tx_fracao_parcela_w		double precision;
tx_acrescimo_w			double precision;
qt_dia_vencimento_w		integer;
ie_forma_pagamento_w		integer;
dt_base_venc_w			timestamp;
dt_vencimento_w			timestamp;
dt_venc_fixo_w			timestamp;
dt_venc_lote_w			timestamp;
dt_vencimento_lote_w		timestamp;

C01 CURSOR FOR 
	SELECT	sum(a.vl_item), 
		b.nr_sequencia, 
		a.nr_sequencia 
	from	pls_evento		b, 
		pls_pagamento_item 	a 
	where	b.nr_sequencia 		= a.nr_seq_evento 
	and	b.ie_saldo_negativo	<> 'CP' 
	and	a.nr_seq_pagamento 	= nr_seq_pagamento_p 
	group by b.nr_sequencia, 
		a.nr_sequencia;
	
C02 CURSOR FOR 
	SELECT	tx_fracao_parcela, /* A Prazo  */
 
		coalesce(tx_acrescimo,0), 
		null, 
		nr_parcela 
	from	parcela 
	where	cd_condicao_pagamento = cd_condicao_pagamento_w 
	and 	ie_forma_pagamento_w	not in (1,10) 
	
union
 
	SELECT 	100, /* A Vista  */
 
		0, 
		dt_base_venc_w, 
		1 nr_parcela 
	 
	where 	ie_forma_pagamento_w	= 1 
	
union
 
	select	100, /* Conforme Vencimentos */
 
		0, 
		to_date((to_char(qt_dia_vencimento_w) || '/' || to_char(add_months(dt_base_venc_w,1),'mm/yyyy')),'dd/mm/yyyy'), 
		1 nr_parcela 
	 
	where	ie_forma_pagamento_w	= 10 
	and	(qt_dia_vencimento_w IS NOT NULL AND qt_dia_vencimento_w::text <> '') 
	
union
 
	select	100, /* Conforme Vencimentos */
 
		0, 
		dt_venc_lote_w, 
		1 nr_parcela 
	 
	where	ie_forma_pagamento_w	= 10 
	and	coalesce(qt_dia_vencimento_w::text, '') = '' 
	order by nr_parcela;		
 

BEGIN 
if (nr_seq_pagamento_p IS NOT NULL AND nr_seq_pagamento_p::text <> '') then 
	select	a.nr_seq_prestador, 
		a.vl_pagamento, 
		coalesce(b.dt_ref_tributo,b.dt_mes_competencia), 
		b.dt_venc_lote, 
		b.nr_seq_periodo, 
		(select	sum(x.vl_glosa) 
		from	pls_pagamento_item	x 
		where	x.nr_seq_pagamento	= a.nr_sequencia) 
	into STRICT	nr_seq_prestador_w, 
		vl_prestador_w, 
		dt_base_venc_w, 
		dt_venc_lote_w, 
		nr_seq_periodo_w, 
		vl_glosa_w 
	from	pls_lote_pagamento	b, 
		pls_pagamento_prestador	a 
	where	a.nr_seq_lote	= b.nr_sequencia 
	and	a.nr_sequencia	= nr_seq_pagamento_p;
 
	dt_vencimento_lote_w := dt_venc_lote_w;
	 
	select	max(a.cd_condicao_pagamento) 
	into STRICT	cd_cond_pagamento_periodo_w 
	from	pls_periodo_pagamento	a 
	where	a.nr_sequencia	= nr_seq_periodo_w;	
	 
	begin 
	select	max(a.cd_condicao_pagamento), 
		max(a.qt_dia_vencimento), 
		substr(obter_nome_pf_pj(max(b.cd_pessoa_fisica), max(b.cd_cgc)),1,255) 
	into STRICT	cd_condicao_pagamento_w, 
		qt_dia_vencimento_w, 
		nm_prestador_w 
	FROM pls_prestador b
LEFT OUTER JOIN pls_prestador_pagto a ON (b.nr_sequencia = a.nr_seq_prestador)
WHERE b.nr_sequencia		= nr_seq_prestador_w;	
	exception 
	when others then 
		cd_condicao_pagamento_w := null;
	end;
	 
	if (cd_cond_pagamento_periodo_w IS NOT NULL AND cd_cond_pagamento_periodo_w::text <> '') then 
		cd_condicao_pagamento_w	:= cd_cond_pagamento_periodo_w;
	end if;
	 
	if (to_char(add_months(dt_base_venc_w,1),'mm') = '02') then /* Tratar fevereiro */
 
		if (qt_dia_vencimento_w >= 29) then 
			select	to_number(to_char(last_day(to_date(('01/' || to_char(add_months(dt_base_venc_w,1),'mm/yyyy')),'dd/mm/yyyy')),'dd')) 
			into STRICT	qt_dia_vencimento_w 
			;
		end if;
	end if;
	 
	if (coalesce(cd_condicao_pagamento_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180490,'NR_SEQ_PRESTADOR=' || nr_seq_prestador_w || ';' || 'NM_PRESTADOR=' || nm_prestador_w);
	end if;
	 
	select 	coalesce(max(ie_forma_pagamento),3), 
		coalesce(max(ie_acao_nao_util),'M') 
	into STRICT 	ie_forma_pagamento_w, 
		ie_acao_venc_nao_util_w 
	from 	condicao_pagamento 
	where 	cd_condicao_pagamento	= cd_condicao_pagamento_w 
	and 	ie_situacao      	= 'A';
	 
	if (ie_forma_pagamento_w	= 10) and (coalesce(qt_dia_vencimento_w,0) = 0) and (coalesce(dt_venc_lote_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(180491,'NR_SEQ_PRESTADOR=' || nr_seq_prestador_w || ';' || 'NM_PRESTADOR=' || nm_prestador_w);
	end if;
	 
	if (cd_condicao_pagamento_w IS NOT NULL AND cd_condicao_pagamento_w::text <> '') and 
		((qt_dia_vencimento_w IS NOT NULL AND qt_dia_vencimento_w::text <> '') or (coalesce(dt_venc_lote_w::text, '') = '')) then 
		SELECT * FROM Calcular_Vencimento(	cd_estabelecimento_p, cd_condicao_pagamento_w, dt_base_venc_w, qt_vencimentos_w, ds_vencimentos_w) INTO STRICT qt_vencimentos_w, ds_vencimentos_w;
	end if;
 
	select	coalesce(sum(a.vl_item),0) 
	into STRICT	vl_eventos_positivos_w 
	from	pls_pagamento_item a 
	where	a.nr_seq_pagamento = nr_seq_pagamento_p 
	and	vl_item > 0;
	 
	-- parâmetro [21] - Considerar condição de pagamento do prestador mesmo com a data de vencimento do lote informada 
	ie_parametro_21_w := obter_param_usuario(1282, 21, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_parametro_21_w);
	 
	open C01;
	loop 
	fetch C01 into	 
		vl_evento_priorizados_w, 
		nr_seq_evento_w, 
		nr_seq_pag_item_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		vl_eventos_w := vl_eventos_positivos_w - abs(vl_evento_priorizados_w);
 
		select	a.ie_saldo_negativo 
		into STRICT	ie_saldo_negativo_w 
		from	pls_evento a 
		where	a.nr_sequencia = nr_seq_evento_w;
		 
		if (ie_saldo_negativo_w = 'PP') then 
			ie_proximo_pgto_w := 'S';
		else 
			ie_proximo_pgto_w := 'N';
		end if;
		 
		open C02;
		loop 
		fetch C02 into	 
			tx_fracao_parcela_w, 
			tx_acrescimo_w, 
			dt_venc_fixo_w, 
			nr_parcela_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin 
			dt_vencimento_w		:= to_date(substr(ds_vencimentos_w,1,10),'dd/mm/yyyy');
			ds_vencimentos_w	:= substr(ds_vencimentos_w,12,length(ds_vencimentos_w));
			 
			if (coalesce(dt_vencimento_w::text, '') = '') or (qt_dia_vencimento_w IS NOT NULL AND qt_dia_vencimento_w::text <> '' AND ie_forma_pagamento_w = 10) then 
				dt_vencimento_w	:= dt_venc_fixo_w;
			end if;
			 
			-- Considerar parâmetro [21] se tiver data de vencimento informada no lote 
			if (coalesce(ie_parametro_21_w,'S') = 'N') and (dt_vencimento_lote_w IS NOT NULL AND dt_vencimento_lote_w::text <> '') then 
				dt_vencimento_w := dt_vencimento_lote_w;
			end if;
				 
			if (coalesce(tx_fracao_parcela_w,0) > 0) then 
				vl_vencimento_w	:= ((vl_eventos_w * tx_fracao_parcela_w) / 100);
				vl_glosado_w	:= ((vl_glosa_w * tx_fracao_parcela_w) / 100);
			end if;
 
			if (tx_acrescimo_w <> 0) then 
				vl_vencimento_w	:= vl_vencimento_w + ((vl_vencimento_w * tx_acrescimo_w) / 100);
				vl_glosado_w	:= vl_glosado_w + ((vl_glosado_w * tx_acrescimo_w) / 100);
			end if;
			 
			if (vl_vencimento_w <= 0) then			 
				select	nextval('pls_pag_prest_vencimento_seq') 
				into STRICT	nr_seq_vencimento_w 
				;
 
				insert into pls_pag_prest_vencimento(nr_sequencia, 
					nm_usuario, 
					dt_atualizacao, 
					nm_usuario_nrec, 
					dt_atualizacao_nrec, 
					nr_seq_pag_prestador, 
					dt_vencimento, 
					vl_vencimento, 
					vl_liquido, 
					vl_ir, 
					vl_imposto_munic, 
					dt_venc_original, 
					vl_glosa, 
					ie_saldo_negativo, 
					ie_proximo_pgto, 
					nr_seq_pag_item) 
				values (nr_seq_vencimento_w, 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nr_seq_pagamento_p, 
					dt_vencimento_w, 
					vl_vencimento_w, 
					vl_vencimento_w, 
					0, 
					0, 
					dt_vencimento_w, 
					vl_glosado_w, 
					ie_saldo_negativo_w, 
					ie_proximo_pgto_w, 
					nr_seq_pag_item_w);
					 
				CALL pls_gerar_trib_prest_venc(nr_seq_vencimento_w,nm_usuario_p);
			end if;
			end;
		end loop;
		close C02;
		end;
	end loop;
	close C01;
	 
	select	sum(a.vl_vencimento) 
	into STRICT	vl_vencimentos_w 
	from	pls_pag_prest_vencimento a 
	where	a.nr_seq_pag_prestador = nr_seq_pagamento_p;
	 
	if (vl_vencimentos_w < 0) then 
		vl_retorno_p		:= vl_vencimentos_w;
	else 
		vl_retorno_p		:= 0;
	end if;	
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pag_prest_desc_prior ( nr_seq_pagamento_p bigint, vl_retorno_p INOUT bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

