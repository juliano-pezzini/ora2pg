-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_e110_icmsipi (nr_seq_controle_p bigint) AS $body$
DECLARE


/*REGISTRO E110: APURAO DO ICMS  OPERAES PRPRIAS.*/



-- VARIABLES
ie_gerou_dados_bloco_w varchar(1) := 'N';

nr_seq_icmsipi_E110_w fis_efd_icmsipi_E110.nr_sequencia%type;

qt_cursor_w bigint := 0;
nr_vetor_w  bigint := 0;

-- Totalizadores
vl_sld_apurado_w            double precision := 0;
vl_icms_recolher_w          double precision := 0;
vl_sld_credor_transportar_w double precision := 0;
vl_tot_debitos_w            double precision := 0;
vl_tot_creditos_w           double precision := 0;
vl_sld_credor_ant_w         double precision := 0;

-- USUARIO
nm_usuario_w usuario.nm_usuario%type;

/*Cursor que retorna a totalizao dos debitos de ICMS*/

c_vl_tot_debitos CURSOR FOR
	SELECT coalesce(sum(vl_icms),0) vl_tot_debitos
	from (SELECT 	sum(a.vl_icms) vl_icms
		FROM fis_efd_icmsipi_c190 a, fis_efd_icmsipi_c100 b
LEFT OUTER JOIN fis_efd_icmsipi_c170 c ON (b.nr_seq_nota = c.nr_seq_nota AND b.nr_seq_controle = c.nr_seq_controle)
WHERE a.nr_seq_controle = nr_seq_controle_p and a.nr_seq_nota = b.nr_seq_nota and a.nr_seq_controle = b.nr_seq_controle   and b.cd_ind_oper = '1' and b.cd_sit not in ('01', '07') and a.cd_cfop not in ('5605') group by a.nr_seq_controle
		
union

		select 	sum(vl_icms) vl_icms
		from 	fis_efd_icmsipi_c490
		where 	nr_seq_controle = nr_seq_controle_p
		group by nr_seq_controle
		
union

		select 	sum(a.vl_icms) vl_icms
		from 	fis_efd_icmsipi_c590 a, fis_efd_icmsipi_c500 b
		where 	a.nr_seq_controle = nr_seq_controle_p
		and 	a.nr_seq_nota = b.nr_seq_nota
		and 	a.nr_seq_controle = b.nr_seq_controle
		and 	b.cd_ind_oper = '1'
		and 	b.cd_sit not in ('01', '07')
		group by a.nr_seq_controle
		
union

		select 	sum(a.vl_icms) vl_icms
		from 	fis_efd_icmsipi_c850 a, fis_efd_icmsipi_c800 b
		where 	a.nr_seq_controle = nr_seq_controle_p
		and 	a.nr_seq_nota = b.nr_seq_nota
		and 	a.nr_seq_controle = b.nr_seq_controle
		and 	b.cd_sit not in ('01', '07')
		group by a.nr_seq_controle
		
union

		select 	sum(a.vl_icms) vl_icms
		from 	fis_efd_icmsipi_c890 a
		where 	a.nr_seq_controle = nr_seq_controle_p
		group by a.nr_seq_controle
		
union

		select 	sum(a.vl_icms) vl_icms
		from 	fis_efd_icmsipi_d590 a, fis_efd_icmsipi_d500 b
		where 	a.nr_seq_controle = nr_seq_controle_p
		and 	a.nr_seq_nota = b.nr_seq_nota
		and 	a.nr_seq_controle = b.nr_seq_controle
		and 	a.cd_cfop not in ('5605')
		and 	b.cd_sit not in ('01', '07')
		group by a.nr_seq_controle) alias14;

/*Cursor que retorna a totalizao dos Creditos de ICMS*/

c_vl_tot_creditos CURSOR FOR
	SELECT coalesce(sum(vl_icms),0) vl_tot_creditos
	from (SELECT 	a.vl_icms vl_icms
		from 	fis_efd_icmsipi_c190 a,
			fis_efd_icmsipi_c100 b,
			fis_efd_icmsipi_c170 c
		where 	a.nr_seq_controle = nr_seq_controle_p
		and 	a.nr_seq_nota = b.nr_seq_nota
		and 	a.nr_seq_controle = b.nr_seq_controle
		and 	b.nr_seq_nota = c.nr_seq_nota
		and 	c.nr_seq_controle = b.nr_seq_controle
		and 	b.cd_ind_oper = '0'
		and 	b.cd_sit not in ('01', '07')
		and 	c.cd_cfop not in ('1605')
		
union

		select 	sum(a.vl_icms) vl_icms
		from 	fis_efd_icmsipi_c590 a, fis_efd_icmsipi_c500 b
		where 	a.nr_seq_controle = nr_seq_controle_p
		and 	a.nr_seq_nota = b.nr_seq_nota
		and 	a.nr_seq_controle = b.nr_seq_controle
		and 	b.cd_ind_oper = '0'
		and 	b.cd_sit not in ('01', '07')
		group by a.nr_seq_controle
		
union

		select 	sum(a.vl_icms) vl_icms
		from 	fis_efd_icmsipi_d590 a, fis_efd_icmsipi_d500 b
		where 	a.nr_seq_controle = nr_seq_controle_p
		and 	a.nr_seq_nota = b.nr_seq_nota
		and 	a.nr_seq_controle = b.nr_seq_controle
		and 	a.cd_cfop not in ('1605')
		and 	b.cd_sit not in ('01', '07')
		group by a.nr_seq_controle) alias9;

/*Cursor que retorna a totalizao dos Creditos de ICMS*/

c_vl_sld_credor_ant CURSOR FOR
	SELECT 	a.vl_sld_credor_transportar
	from 	fis_efd_icmsipi_e110 a ,
		fis_efd_icmsipi_controle b
	where 	a.nr_seq_controle = b.nr_seq_anterior
	and 	b.nr_sequencia = nr_seq_controle_p;

/*Cursor que retorna as informaes para o registro E110 restringindo pela sequencia da nota fiscal*/

c_reg_E110 CURSOR FOR
	SELECT 	null vl_tot_debitos,
		0    vl_aj_debitos,
		0    vl_tot_aj_debitos,
		0    vl_estornos_cred,
		null vl_tot_creditos,
		0    vl_aj_creditos,
		0    vl_tot_aj_creditos,
		0    vl_estornos_deb,
		null vl_sld_credor_ant, -- Buscar o vl_sld_credor_transportar, do periodo anterior.
		null vl_sld_apurado, --Calculado
		0 vl_tot_ded, -- Calculado
		null vl_icms_recolher, -- Calculado VL_SLD_APURADO - VL_TOT_DED
		null vl_sld_credor_transportar,
		0    vl_deb_esp
	;

/*Criao do array com o tipo sendo do cursor eespecificado - c_reg_E110*/

type reg_c_reg_E110 is table of c_reg_E110%RowType;
vetRegE110 reg_c_reg_E110;

/*Criao do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_E110 */

type registro is table of fis_efd_icmsipi_E110%rowtype index by integer;
fis_registros_w registro;

BEGIN
/*Obteo do usurio ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_reg_E110;
loop
fetch c_reg_E110 bulk collect into vetRegE110 limit 1000;
	for i in 1 .. vetRegE110.Count loop

	begin

	/*Incrementa a variavel para o array*/

	qt_cursor_w := qt_cursor_w + 1;

	if (ie_gerou_dados_bloco_w = 'N') then
	ie_gerou_dados_bloco_w := 'S';
	end if;

  /* c_vl_tot_debitos */

  open c_vl_tot_debitos;
  fetch c_vl_tot_debitos
  into vl_tot_debitos_w;
  close c_vl_tot_debitos;

  /* c_vl_tot_creditos */

  open c_vl_tot_creditos;
  fetch c_vl_tot_creditos
  into vl_tot_creditos_w;
  close c_vl_tot_creditos;

  /* c_vl_tot_creditos */

  open c_vl_sld_credor_ant;
  fetch c_vl_sld_credor_ant  into vl_sld_credor_ant_w;
  if c_vl_sld_credor_ant%FOUND then
     vl_sld_credor_ant_w := 0;
  end if;
  close c_vl_sld_credor_ant;

  /* Totaliza valores Bloco E110 */

  SELECT * FROM fis_efd_icmsipi_calcula_e110(  vl_tot_debitos_w, vetRegE110[i].vl_aj_debitos, vetRegE110[i].vl_tot_aj_debitos, vetRegE110[i].vl_estornos_cred, vl_tot_creditos_w, vetRegE110[i].vl_aj_creditos, vetRegE110[i].vl_tot_aj_creditos, vetRegE110[i].vl_estornos_deb, vl_sld_credor_ant_w, vl_sld_apurado_w, vl_sld_credor_transportar_w, vl_icms_recolher_w) INTO STRICT vl_sld_apurado_w, vl_sld_credor_transportar_w, vl_icms_recolher_w;

  /*Busca da sequencia da tabela especificada - fis_efd_icmsipi_E110 */

  select nextval('fis_efd_icmsipi_e110_seq')  into STRICT nr_seq_icmsipi_E110_w;

  /*Inserindo valores no array para realizao do forall posteriormente*/

  fis_registros_w[qt_cursor_w].nr_sequencia     := nr_seq_icmsipi_E110_w;
  fis_registros_w[qt_cursor_w].dt_atualizacao     := clock_timestamp();
  fis_registros_w[qt_cursor_w].nm_usuario     := nm_usuario_w;
  fis_registros_w[qt_cursor_w].dt_atualizacao_nrec   := clock_timestamp();
  fis_registros_w[qt_cursor_w].nm_usuario_nrec     := nm_usuario_w;
  fis_registros_w[qt_cursor_w].cd_reg       := 'E110';
  fis_registros_w[qt_cursor_w].vl_tot_debitos     := vl_tot_debitos_w;
  fis_registros_w[qt_cursor_w].vl_aj_debitos     := vetRegE110[i].vl_aj_debitos;
  fis_registros_w[qt_cursor_w].vl_tot_aj_debitos     := vetRegE110[i].vl_tot_aj_debitos;
  fis_registros_w[qt_cursor_w].vl_estornos_cred     := vetRegE110[i].vl_estornos_cred;
  fis_registros_w[qt_cursor_w].vl_tot_creditos     := vl_tot_creditos_w;
  fis_registros_w[qt_cursor_w].vl_aj_creditos     := vetRegE110[i].vl_aj_creditos;
  fis_registros_w[qt_cursor_w].vl_tot_aj_creditos   := vetRegE110[i].vl_tot_aj_creditos;
  fis_registros_w[qt_cursor_w].vl_estornos_deb     := vetRegE110[i].vl_estornos_deb;
  fis_registros_w[qt_cursor_w].vl_sld_credor_ant     := vl_sld_credor_ant_w;
  fis_registros_w[qt_cursor_w].vl_sld_apurado     := vl_sld_apurado_w;
  fis_registros_w[qt_cursor_w].vl_tot_ded     := vetRegE110[i].vl_tot_ded;
  fis_registros_w[qt_cursor_w].vl_icms_recolher     := vl_icms_recolher_w;
  fis_registros_w[qt_cursor_w].vl_sld_credor_transportar   := vl_sld_credor_transportar_w;
  fis_registros_w[qt_cursor_w].vl_deb_esp     := vetRegE110[i].vl_deb_esp;
  fis_registros_w[qt_cursor_w].nr_seq_controle     := nr_seq_controle_p;

  if (nr_vetor_w >= 1000) then
  begin
  /*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_E110 */

  forall i in fis_registros_w.first .. fis_registros_w.last
    insert into fis_efd_icmsipi_E110 values fis_registros_w(i);

    nr_vetor_w := 0;
    fis_registros_w.delete;

    commit;

  end;
  end if;

  /*incrementa variavel para realizar o forall quando chegar no valor limite*/

  nr_vetor_w := nr_vetor_w + 1;

  end;
  end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_E110 */
end loop;
close c_reg_E110;

if (fis_registros_w.count > 0) then
begin
/*Inserindo registro que no entraram outro for all devido a quantidade de registros no vetor*/

forall i in fis_registros_w.first .. fis_registros_w.last
  insert into fis_efd_icmsipi_E110 values fis_registros_w(i);

  fis_registros_w.delete;

  commit;

end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualizao informao no controle de gerao de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
  update fis_efd_icmsipi_controle
  set ie_mov_E = 'S'
  where nr_sequencia = nr_seq_controle_p;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_e110_icmsipi (nr_seq_controle_p bigint) FROM PUBLIC;

