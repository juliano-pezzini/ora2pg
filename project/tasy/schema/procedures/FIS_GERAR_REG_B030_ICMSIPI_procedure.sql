-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_b030_icmsipi ( nr_seq_controle_p bigint) AS $body$
DECLARE


-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1) := 'N';
nr_vetor_w		bigint	:= 0;
qt_cursor_w		bigint	:= 0;

nr_seq_icmsipi_B030_w	fis_efd_icmsipi_B030.nr_sequencia%type;
cd_ver_w                fis_efd_icmsipi_controle.cd_ver%type;
cd_modelo_nf_w		modelo_nota_fiscal.cd_modelo_nf%type;
			
-- USUARIO
nm_usuario_w			usuario.nm_usuario%type;

/*Cursor que retorna as informacoes para o registro B030*/

c_nota_fiscal CURSOR FOR
	SELECT 	lpad(b.cd_modelo_nf, 2, 0) cd_mod,
		a.cd_serie_nf cd_ser,
		min(a.nr_nota_fiscal) num_doc_ini,
		max(a.nr_nota_fiscal) num_doc_fin,
		a.dt_emissao dt_doc,
		sum(CASE WHEN a.ie_situacao=3 THEN 1  ELSE 0 END ) qt_canc,
		sum(a.vl_total_nota) vl_cont, 
		sum(obter_valor_tipo_tributo_nota(a.nr_sequencia,'ISS','B')) vl_bc_iss,
		sum(obter_valor_tipo_tributo_nota(a.nr_sequencia,'ISS','V'))  vl_iss,
		a.nr_sequencia nr_seq_nota
	FROM fis_efd_icmsipi_regra_b030 cc, fis_efd_icmsipi_lote bb, fis_efd_icmsipi_controle aa, nota_fiscal a, operacao_nota_modelo d
LEFT OUTER JOIN modelo_nota_fiscal b ON (d.nr_seq_modelo = b.nr_sequencia)
WHERE a.cd_operacao_nf	=	d.cd_operacao_nf  and (a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '') and (((cc.ie_tipo_data = 1) and (trunc(a.dt_emissao) between trunc(aa.dt_inicio_apuracao) and trunc(aa.dt_fim_apuracao))) 
		or ((cc.ie_tipo_data = 2) and (trunc(a.dt_entrada_saida) between trunc(aa.dt_inicio_apuracao) and trunc(aa.dt_fim_apuracao)))) and (((obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'E') and     -- Notas de Entrada
		(a.ie_status_envio IS NOT NULL AND a.ie_status_envio::text <> '') and          -- Sem envio ao fisco
		(a.ie_situacao in (2,3,9)))                                     -- Sitauacao 2- Estornada    3- Estorno - 9-Cancelada
		or ((obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'E') and     -- Notas de Entrada
		(a.ie_situacao not in (2,3,9)))                                 -- Sitauacao 2- Estornada    3- Estorno - 9-Cancelada
		or (obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'S' and      -- Nostas de saida
		(a.ie_status_envio IS NOT NULL AND a.ie_status_envio::text <> ''))
		or (obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'S' and 
		coalesce(a.ie_status_envio::text, '') = '' and (exists (SELECT  1
			from  	nfe_transmissao a,
				nfe_transmissao_nf b
			where  a.nr_sequencia = b.nr_seq_transmissao
			and  a.ie_tipo_nota = 'NFE'
			and   a.ie_status_transmissao = 'T'
			and  b.nr_seq_nota_fiscal = a.nr_sequencia)))) and b.nr_sequencia    	= cc.nr_seq_modelo_nf and a.cd_estabelecimento  	= aa.cd_estabelecimento and aa.nr_seq_lote 		= bb.nr_sequencia and bb.nr_sequencia 	= cc.nr_seq_lote and aa.nr_sequencia 	= nr_seq_controle_p group by lpad(b.cd_modelo_nf, 2, 0),
			a.cd_serie_nf,
			a.dt_emissao,
			a.nr_sequencia;
	
/*Criacao do array com o tipo sendo do cursor especificado - C_NOTA_FISCAL */
	
type reg_c_nota_fiscal is table of c_nota_fiscal%RowType;
vet_c_nota_fiscal_w 			reg_c_nota_fiscal;

/*Criacao do array com o tipo sendo da tabela especificada - FIS_EFD_ICMSIPI_C170 */

type registro is table of fis_efd_icmsipi_B030%rowtype index by integer;
fis_registros_w			registro;

BEGIN

/*Obter o usuario ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

begin

select  a.cd_ver
into STRICT 	cd_ver_w
from  	fis_efd_icmsipi_controle   a
where  	a.nr_sequencia 		= nr_seq_controle_p;

if ((cd_ver_w)::numeric  >= 13) then
	open c_nota_fiscal;
	loop
	fetch c_nota_fiscal bulk collect into vet_c_nota_fiscal_w limit 1000;
		for i in 1..vet_c_nota_fiscal_w.Count loop
			begin

			/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_B030 */

			select	nextval('fis_efd_icmsipi_b030_seq')
			into STRICT	nr_seq_icmsipi_B030_w
			;
			
			/*Incrementa a variavel para o array*/

			qt_cursor_w:=	qt_cursor_w + 1;
			
			if (ie_gerou_dados_bloco_w = 'N') then
				ie_gerou_dados_bloco_w:=	'S';
			end if;		

			--Buscar nos dados adicionais a especie da nota fiscal
			select coalesce(max(m.cd_modelo_nf), vet_c_nota_fiscal_w[i].cd_mod)
			into STRICT cd_modelo_nf_w
			from nota_fiscal n,
				 modelo_nota_fiscal m
			where n.nr_sequencia = vet_c_nota_fiscal_w[i].nr_seq_nota
			and n.nr_seq_modelo = m.nr_sequencia;		
			
			/*Inserindo valores no array para realizacao do forall posteriormente*/

			fis_registros_w[qt_cursor_w].nr_sequencia		:= nr_seq_icmsipi_B030_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao		:= clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario			:= nm_usuario_w;
			fis_registros_w[qt_cursor_w].dt_atualizacao_nrec	:= clock_timestamp();
			fis_registros_w[qt_cursor_w].nm_usuario_nrec		:= nm_usuario_w;
			fis_registros_w[qt_cursor_w].cd_reg             	:= 'B030';
			fis_registros_w[qt_cursor_w].cd_mod			:= cd_modelo_nf_w;
			fis_registros_w[qt_cursor_w].nr_doc_ini			:= vet_c_nota_fiscal_w[i].num_doc_ini;
			fis_registros_w[qt_cursor_w].nr_doc_fin			:= vet_c_nota_fiscal_w[i].num_doc_fin;			
			fis_registros_w[qt_cursor_w].cd_ser			:= vet_c_nota_fiscal_w[i].cd_ser;			
			fis_registros_w[qt_cursor_w].dt_doc             	:= vet_c_nota_fiscal_w[i].dt_doc;							
			fis_registros_w[qt_cursor_w].qt_canc             	:= vet_c_nota_fiscal_w[i].qt_canc;				
			fis_registros_w[qt_cursor_w].vl_cont             	:= vet_c_nota_fiscal_w[i].vl_cont;				
			fis_registros_w[qt_cursor_w].vl_isnt_iss             	:= 0;
			fis_registros_w[qt_cursor_w].vl_bc_iss             	:= vet_c_nota_fiscal_w[i].vl_bc_iss;				
			fis_registros_w[qt_cursor_w].vl_iss             	:= vet_c_nota_fiscal_w[i].vl_iss;
			fis_registros_w[qt_cursor_w].nr_seq_controle    	:= nr_seq_controle_p;
			
			if (nr_vetor_w >= 1000) then
				/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_B030 */

				forall j in fis_registros_w.first..fis_registros_w.last
					insert into fis_efd_icmsipi_B030 values fis_registros_w(j);

				nr_vetor_w	:= 0;
				fis_registros_w.delete;

				commit;
			end if;
			
			/*incrementa variavel para realizar o forall quando chegar no valor limite*/

			nr_vetor_w	:= nr_vetor_w 	+ 1;
			
			end;
		end loop;
	EXIT WHEN NOT FOUND; /* apply on c_nota_fiscal */
	end loop;
	close c_nota_fiscal;
end if;

end;

if (fis_registros_w.count > 0) then
	/*Inserindo registro que nao entraram outro for all devido a quantidade de registros no vetor*/

	forall l in fis_registros_w.first..fis_registros_w.last
		insert into fis_efd_icmsipi_B030 values fis_registros_w(l);
		
	fis_registros_w.delete;

	commit;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualizacao informacao no controle de geracao de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update 	fis_efd_icmsipi_controle
	set		ie_mov_B = 'S'
	where 	nr_sequencia = nr_seq_controle_p;
end if;

CALL fis_gerar_reg_B035_icmsipi(	nr_seq_controle_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_b030_icmsipi ( nr_seq_controle_p bigint) FROM PUBLIC;

