-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_segurado_congenere ( cd_pessoa_fisica_p text, nr_seq_solicitacao_p bigint, cd_cooperativa_p text, cd_usuario_plano_p text, dt_validade_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_congenere_p bigint, nr_via_carteira_p bigint, ie_local_cadastro_p bigint, nr_seq_segurado_p INOUT bigint) AS $body$
DECLARE


/*
nr_via_carteira_p -> Número da via da tarja magnética

ie_local_cadastro_p -> Local onde esta sendo inserido o beneficiário eventual
1 -  Portal Web
2 - Importação XML
3 - Tasy
*/
nr_seq_outorgante_w		bigint;
nr_seq_emissor_pcmso_w		bigint;
cd_pessoa_fisica_w		varchar(10);
nr_seq_segurado_w		bigint;
dt_validade_cartao_w		timestamp;
dt_validade_cartao_aux_w	timestamp;
nr_seq_plano_w			bigint;
ie_gerar_cartao_w		varchar(1);
nr_seq_emissor_w		bigint;
qt_carteiras_w			bigint;
dt_inicio_vigencia_w		timestamp;
nr_via_carteira_w		bigint;
ie_tipo_repasse_w		varchar(1);
ie_pcmso_w			varchar(1);
ie_custo_oper_intercambio_w	varchar(1);
cd_empresa_operadora_w		bigint;
ie_abrangencia_intercambio_w	varchar(1);
ie_entrou_regra_w		varchar(1);
nr_seq_congenere_regra_w	bigint;
nr_seq_segurado_cart_w		bigint;
ie_tipo_segurado_w		varchar(3);
nr_seq_grupo_coop_w		bigint;
cd_matricula_estipulante_w	varchar(30);
cd_estabelecimento_aux_w	bigint;
dt_contratacao_w		pls_segurado.dt_contratacao%type;
qt_historico_w			integer;
ie_existe_compart_w		varchar(1);
dt_compartilhamento_w		pls_segurado.dt_comp_risco%type;

C01 CURSOR FOR
	SELECT	nr_seq_intercambio,
		dt_compartilhamento,
		dt_fim_compartilhamento
	from	ptu_intercambio_benef_simp
	where	cd_usuario_plano	= cd_usuario_plano_p
	order by dt_compartilhamento, dt_fim_compartilhamento;

BEGIN

ie_entrou_regra_w	:= 'N';

dt_contratacao_w	:= clock_timestamp();

if (coalesce(nr_via_carteira_p,0) <> 0) then
	nr_via_carteira_w	:= nr_via_carteira_p;
else
	nr_via_carteira_w	:= 1;
end if;

if (coalesce(nr_seq_solicitacao_p,0) <> 0) then
	if (coalesce(cd_pessoa_fisica_p,'0') <> '0') then
		update	pls_inclusao_beneficiario
		set	cd_pessoa_fisica	= cd_pessoa_fisica_p
		where	nr_sequencia		= nr_seq_solicitacao_p;
	else
		CALL pls_inclusao_benef_gerar_pf(nr_seq_solicitacao_p,nm_usuario_p);
	end if;
	
	begin
	select	cd_pessoa_fisica,
		nr_seq_plano,
		ie_tipo_repasse,
		ie_pcmso,
		ie_custo_oper_intercambio,
		cd_operadora_empresa,
		ie_abrangencia_intercambio,
		dt_inicio_vig_carteira,
		dt_validade_carteira,
		cd_matricula_est
	into STRICT	cd_pessoa_fisica_w,
		nr_seq_plano_w,
		ie_tipo_repasse_w,
		ie_pcmso_w,
		ie_custo_oper_intercambio_w,
		cd_empresa_operadora_w,
		ie_abrangencia_intercambio_w,
		dt_inicio_vigencia_w,
		dt_validade_cartao_aux_w,
		cd_matricula_estipulante_w
	from	pls_inclusao_beneficiario
	where	nr_sequencia	= nr_seq_solicitacao_p;
	exception
	when others then
		cd_pessoa_fisica_w	:= '0';
	end;
elsif (coalesce(cd_pessoa_fisica_p,'0') <> '0') then
	cd_pessoa_fisica_w	:= cd_pessoa_fisica_p;
end if;

if (coalesce(cd_pessoa_fisica_w,'0') <> '0') then
	update	pessoa_fisica
	set	ie_status_usuario_event	= 'A'
	where	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and	coalesce(ie_status_usuario_event::text, '') = '';
	
	select	max(nr_sequencia),
		max(cd_estabelecimento)
	into STRICT	nr_seq_outorgante_w,
		cd_estabelecimento_aux_w
	from	pls_congenere
	where	(cd_cooperativa)::numeric  = (cd_cooperativa_p)::numeric;
	
	select	nextval('pls_segurado_seq')
	into STRICT	nr_seq_segurado_w
	;
	
	if (coalesce(cd_estabelecimento_aux_w::text, '') = '') then
		cd_estabelecimento_aux_w	:= cd_estabelecimento_p;
	end if;
	
	begin
	select	count(1)
	into STRICT	qt_carteiras_w
	from	pls_segurado_carteira
	where	cd_usuario_plano	= cd_usuario_plano_p
	and	cd_estabelecimento	= cd_estabelecimento_aux_w;
	exception
	when others then
		qt_carteiras_w		:= 1;
	end;
	
	if (dt_validade_p IS NOT NULL AND dt_validade_p::text <> '') then
		if (length(dt_validade_p) = '5') then
			dt_validade_cartao_w	:= last_day(to_date(dt_validade_p,'mm/yy'));
		else
			if (trunc(dt_validade_cartao_aux_w,'dd') = trunc(to_date(dt_validade_p),'dd')) then
				dt_validade_cartao_w	:= dt_validade_cartao_aux_w;
			else
				dt_validade_cartao_w	:= last_day(to_date(dt_validade_p));
			end if;
		end if;
	else
		dt_validade_cartao_w	:= last_day(add_months(clock_timestamp(),6));
	end if;
	
	if (coalesce(dt_inicio_vigencia_w::text, '') = '') then
		dt_inicio_vigencia_w	:=  trunc(clock_timestamp(),'month'); /*add_months(dt_validade_cartao_w,-12); */
	end if;
	
	if (coalesce(ie_pcmso_w,'N') = 'N') then
		select	max(ie_pcmso)
		into STRICT	ie_pcmso_w
		from	pls_plano
		where	nr_sequencia	= nr_seq_plano_w;
		ie_pcmso_w	:= coalesce(ie_pcmso_w,'N');
	end if;
	
	insert	into	pls_segurado(	nr_sequencia,cd_pessoa_fisica,dt_atualizacao,
			dt_contratacao,dt_inclusao_operadora,dt_liberacao,
			dt_atualizacao_nrec,nm_usuario,nm_usuario_nrec,
			ie_tipo_valor,ie_situacao_atend,ie_tipo_segurado,
			ie_nascido_plano,ie_bonus_indicacao,ie_taxa_inscricao,
			nr_seq_congenere, nr_seq_plano,cd_estabelecimento,
			ie_tipo_repasse, ie_pcmso, ie_custo_oper_intercambio,
			cd_operadora_empresa,ie_abrangencia_intercambio, ie_local_cadastro,
			cd_matricula_estipulante)
		values (	nr_seq_segurado_w, cd_pessoa_fisica_w, clock_timestamp(),
			dt_contratacao_w, clock_timestamp(), clock_timestamp(),
			clock_timestamp(),nm_usuario_p,nm_usuario_p,
			'A','A','I',
			'N','N','S',
			CASE WHEN coalesce(nr_seq_congenere_p, 0)=0 THEN nr_seq_outorgante_w  ELSE nr_seq_congenere_p END , nr_seq_plano_w,cd_estabelecimento_aux_w,
			ie_tipo_repasse_w, ie_pcmso_w, ie_custo_oper_intercambio_w,
			cd_empresa_operadora_w,ie_abrangencia_intercambio_w, ie_local_cadastro_p,
			cd_matricula_estipulante_w);
	
	if (coalesce(nr_seq_congenere_p,0) = 0) then
		nr_seq_congenere_regra_w	:= nr_seq_outorgante_w;
	else
		nr_seq_congenere_regra_w	:= nr_seq_congenere_p;
	end if;

	ie_entrou_regra_w := pls_gerar_regra_benef_congener(nr_seq_congenere_regra_w, nr_seq_segurado_w, cd_usuario_plano_p, dt_inicio_vigencia_w, dt_validade_cartao_w, nr_via_carteira_w, cd_estabelecimento_aux_w, nm_usuario_p, ie_entrou_regra_w);
	
	CALL pls_gerar_grupos_intercambio(nr_seq_segurado_w,cd_estabelecimento_aux_w,nm_usuario_p);
	
	CALL pls_gerar_ops_congenere_benef(nr_seq_segurado_w,cd_usuario_plano_p,cd_estabelecimento_aux_w,nm_usuario_p,'N');
	
	if (ie_entrou_regra_w = 'N') then
		if (coalesce(nr_seq_congenere_p,0) <> 0) then
			select	ie_gerar_cartao,
				nr_seq_emissor
			into STRICT	ie_gerar_cartao_w,
				nr_seq_emissor_w
			from	pls_congenere
			where	nr_sequencia	= nr_seq_congenere_p
			and	ie_situacao	= 'A';
			
			if (ie_gerar_cartao_w = 'S') and (coalesce(nr_seq_emissor_w,0) <> 0) then
				CALL pls_gerar_carteira_usuario(nr_seq_segurado_w,null,dt_inicio_vigencia_w,dt_validade_cartao_w,'D','N',null,nm_usuario_p);
			elsif (coalesce(cd_usuario_plano_p,'0') <> '0') and (qt_carteiras_w = 0) then
				insert	into	pls_segurado_carteira(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
						nr_seq_segurado, dt_inicio_vigencia, dt_validade_carteira, cd_usuario_plano,
						ie_situacao, cd_estabelecimento,nr_via_solicitacao)
					values (	nextval('pls_segurado_carteira_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
						nr_seq_segurado_w, dt_inicio_vigencia_w, dt_validade_cartao_w, cd_usuario_plano_p,
						'D', cd_estabelecimento_aux_w,nr_via_carteira_w);
			elsif (coalesce(cd_usuario_plano_p,'0') = '0') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort( 195600, null);
				/* É necessário informar a tarja magnética do beneficiário! */

			elsif (qt_carteiras_w > 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort( 195601, null);
				/* A tarja magnética do beneficiário informada já existe! */

			end if;
		else
			/*Caso o usuário tiver regra de PCMSO, então deve criar um novo usuário*/

			nr_seq_emissor_pcmso_w := pls_obter_regra_usuario_pcmso(cd_usuario_plano_p, '', nr_seq_emissor_pcmso_w);
			
			if (nr_seq_emissor_pcmso_w IS NOT NULL AND nr_seq_emissor_pcmso_w::text <> '') then
				CALL pls_gerar_carteira_usuario(nr_seq_segurado_w,null,dt_inicio_vigencia_w,dt_validade_cartao_w,'D','N',nr_seq_emissor_pcmso_w,nm_usuario_p);
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_segurado_cart_w
				from	pls_segurado_carteira
				where	nr_seq_segurado	= nr_seq_segurado_w;
				
				update	pls_segurado_carteira
				set	nr_cartao_intercambio	= cd_usuario_plano_p
				where	nr_sequencia		= nr_seq_segurado_cart_w;
			else
				if (coalesce(cd_usuario_plano_p,'0') <> '0') and (qt_carteiras_w = 0) then
					insert	into	pls_segurado_carteira(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
							nr_seq_segurado, dt_inicio_vigencia, dt_validade_carteira, cd_usuario_plano,
							ie_situacao, cd_estabelecimento,nr_via_solicitacao)
						values (	nextval('pls_segurado_carteira_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
							nr_seq_segurado_w, dt_inicio_vigencia_w, dt_validade_cartao_w, cd_usuario_plano_p,
							'D', cd_estabelecimento_aux_w,nr_via_carteira_w);
				elsif (coalesce(cd_usuario_plano_p,'0') = '0') then
					CALL wheb_mensagem_pck.exibir_mensagem_abort( 195602, null);
					/* É necessário informar a tarja magnética do beneficiário! */

				elsif (qt_carteiras_w > 0) then
					CALL wheb_mensagem_pck.exibir_mensagem_abort( 195603, null);
					/* A tarja magnética do beneficiário informada já existe! */

				end if;
			end if;
		end if;
		
		CALL pls_definir_grupo_coop_seg(nr_seq_segurado_w, cd_usuario_plano_p, nm_usuario_p);
		
		select	a.nr_seq_grupo_coop,
			a.ie_tipo_segurado
		into STRICT	nr_seq_grupo_coop_w,
			ie_tipo_segurado_w
		from	pls_segurado a
		where	a.nr_sequencia = nr_seq_segurado_w;
		
		/*Altera o pagador do beneficiário de acordo com a regra de pagador intercâmbio, do cadastro de regras.*/

		CALL pls_definir_pagador_coop_seg(nr_seq_segurado_w, nr_seq_grupo_coop_w, ie_tipo_segurado_w, nr_seq_congenere_regra_w, dt_contratacao_w, nm_usuario_p); --Passar os campos da regra por parâmetro na procedure.
		
		ie_existe_compart_w	:= 'N';
		dt_compartilhamento_w	:= null;
	
		--Gravar as datas de compartilhamento do beneficiário
		for r_c01_w in C01 loop
			begin
			--Início do compartilhamento
			if (r_c01_w.dt_compartilhamento IS NOT NULL AND r_c01_w.dt_compartilhamento::text <> '') then
				select	count(1)
				into STRICT	qt_historico_w
				from	pls_segurado_historico
				where	nr_seq_segurado = nr_seq_segurado_w
				and	ie_tipo_historico = 102
				and	trunc(dt_ocorrencia_sib, 'dd') = trunc(r_c01_w.dt_compartilhamento, 'dd')
				and	ie_tipo_segurado = 'H'
				and	coalesce(ie_situacao_compartilhamento, 'A') = 'A';
				
				if (qt_historico_w = 0) then
					insert into pls_segurado_historico(nr_sequencia, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_segurado,
						dt_historico, ds_historico, ds_observacao,
						ie_tipo_historico, dt_ocorrencia_sib, ie_historico_situacao,
						dt_liberacao_hist, ie_envio_sib, ie_tipo_segurado,
						ie_tipo_segurado_ant, ie_situacao_compartilhamento)
					values (	nextval('pls_segurado_historico_seq'), clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, nr_seq_segurado_w,
						clock_timestamp(), 'Tipo de beneficiário alterado de "'||obter_valor_dominio(2406,'I')||'" para "'||obter_valor_dominio(2406,'H')||'"', 'pls_gerar_segurado_congenere - Lote '||r_c01_w.nr_seq_intercambio,
						'102', trunc(r_c01_w.dt_compartilhamento, 'dd'), 'S',
						clock_timestamp(), 'N', 'H',
						'I', 'A');
					
					dt_compartilhamento_w	:= trunc(r_c01_w.dt_compartilhamento, 'dd');
					
					CALL pls_inativar_historico_compart(nr_seq_segurado_w, trunc(r_c01_w.dt_compartilhamento, 'dd'), nm_usuario_p, 'N');
				end if;
			end if;
			
			--Fim do compartilhamento
			if (r_c01_w.dt_fim_compartilhamento IS NOT NULL AND r_c01_w.dt_fim_compartilhamento::text <> '') then
				select	count(1)
				into STRICT	qt_historico_w
				from	pls_segurado_historico
				where	nr_seq_segurado = nr_seq_segurado_w
				and	ie_tipo_historico = 102
				and	trunc(dt_ocorrencia_sib, 'dd') = trunc(r_c01_w.dt_fim_compartilhamento+1, 'dd')
				and	ie_tipo_segurado = 'I'
				and	ie_tipo_segurado_ant = 'H'
				and	coalesce(ie_situacao_compartilhamento, 'A') = 'A';
				
				if (qt_historico_w = 0) then
					insert into pls_segurado_historico(nr_sequencia, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_segurado,
						dt_historico, ds_historico, ds_observacao,
						ie_tipo_historico, dt_ocorrencia_sib, ie_historico_situacao,
						dt_liberacao_hist, ie_envio_sib, ie_tipo_segurado,
						ie_tipo_segurado_ant, ie_situacao_compartilhamento)
					values (	nextval('pls_segurado_historico_seq'), clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, nr_seq_segurado_w,
						clock_timestamp(), 'Tipo de beneficiário alterado de "'||obter_valor_dominio(2406,'H')||'" para "'||obter_valor_dominio(2406,'I')||'"', 'pls_gerar_segurado_congenere - Lote '||r_c01_w.nr_seq_intercambio,
						'102', trunc(r_c01_w.dt_fim_compartilhamento+1, 'dd'), 'S',
						clock_timestamp(), 'N', 'I',
						'H', 'A');
					
					dt_compartilhamento_w	:= trunc(r_c01_w.dt_fim_compartilhamento+1, 'dd');
						
					CALL pls_inativar_historico_compart(nr_seq_segurado_w, trunc(r_c01_w.dt_fim_compartilhamento+1, 'dd'), nm_usuario_p, 'N');
				end if;
			end if;
			ie_existe_compart_w	:= 'S';
			end;
		end loop;
		
		if (ie_existe_compart_w = 'S') then
			ie_tipo_segurado_w	:= pls_obter_segurado_data(nr_seq_segurado_w,clock_timestamp());
			CALL wheb_usuario_pck.set_ie_executar_trigger('N');
			update	pls_segurado
			set	ie_tipo_segurado = ie_tipo_segurado_w,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp(),
				dt_alteracao_tipo_segurado = dt_compartilhamento_w
			where	nr_sequencia	= nr_seq_segurado_w;
			CALL wheb_usuario_pck.set_ie_executar_trigger('S');
		end if;
	end if;
end if;

nr_seq_segurado_p	:= coalesce(nr_seq_segurado_w,0);

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_segurado_congenere ( cd_pessoa_fisica_p text, nr_seq_solicitacao_p bigint, cd_cooperativa_p text, cd_usuario_plano_p text, dt_validade_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_congenere_p bigint, nr_via_carteira_p bigint, ie_local_cadastro_p bigint, nr_seq_segurado_p INOUT bigint) FROM PUBLIC;

