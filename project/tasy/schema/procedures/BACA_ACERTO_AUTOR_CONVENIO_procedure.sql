-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baca_acerto_autor_convenio () AS $body$
DECLARE


/*
Edgar 23/10/2006
Este BACA foi desenvolvido para alterar a PK da tabela AUTORIZACAO_CONVENIO e suas tabelas filhas
*/
cont_w	bigint;


BEGIN

/* Dropar costraints e index */

CALL Exec_Sql_Dinamico('TASY', 'drop index MATPACI_MATAUTO_FK_I');
CALL Exec_Sql_Dinamico('TASY', 'drop index PROPACI_PROAUTO_FK_I');
CALL Exec_Sql_Dinamico('TASY', 'drop index PROAUTO_AUTCONV_FK_I ');
CALL Exec_Sql_Dinamico('TASY', 'alter table PROCEDIMENTO_AUTORIZADO drop constraint PROAUTO_AUTCONV_FK');

CALL Exec_Sql_Dinamico('TASY', 'drop index MATAUTO_AUTCONV_FK_I ');
CALL Exec_Sql_Dinamico('TASY', 'alter table MATERIAL_AUTORIZADO drop constraint MATAUTO_AUTCONV_FK');

CALL Exec_Sql_Dinamico('TASY', 'drop index AUTCOHI_AUTCONV_FK_I ');
CALL Exec_Sql_Dinamico('TASY', 'alter table AUTORIZACAO_CONVENIO_HIST drop constraint AUTCOHI_AUTCONV_FK');

CALL Exec_Sql_Dinamico('TASY', 'drop index PACJUST_AUTCONV_FK_I');
CALL Exec_Sql_Dinamico('TASY', 'alter table PACIENTE_JUSTIFICATIVA drop constraint PACJUST_AUTCONV_FK');

/* Recriar PK da AUTORIZACAO_CONVENIO */

CALL Exec_Sql_Dinamico('TASY', 'alter table AUTORIZACAO_CONVENIO drop constraint AUTCONV_PK');
CALL Exec_Sql_Dinamico('TASY', 'CREATE sequence AUTORIZACAO_CONVENIO_SEQ Increment by 1 Start With 1 MaxValue 9999999999 cycle NoCache');
CALL Exec_Sql_Dinamico('TASY',	' ALTER TABLE AUTORIZACAO_CONVENIO ' ||
				' ADD (CONSTRAINT AUTCONV_PK Primary Key  (NR_SEQUENCIA) ' ||
				' USING INDEX   Tablespace TASY_INDEX) ');

CALL Exec_Sql_Dinamico('TASY',' Update	AUTORIZACAO_CONVENIO ' ||
			 ' set		NR_SEQUENCIA	= AUTORIZACAO_CONVENIO_seq.nextval ' ||
			 ' where	nr_sequencia	is null');
commit;

CALL Exec_Sql_Dinamico('TASY',' alter table AUTORIZACAO_CONVENIO modify NR_ATENDIMENTO NULL ');
CALL Exec_Sql_Dinamico('TASY',' alter table AUTORIZACAO_CONVENIO modify NR_SEQ_AUTORIZACAO NULL ');
CALL Exec_Sql_Dinamico('TASY',' ALTER TABLE AUTORIZACAO_CONVENIO ADD ( ' ||
			 ' CONSTRAINT AUTCONV_UK Unique  (NR_ATENDIMENTO,NR_SEQ_AUTORIZACAO) USING INDEX Tablespace TASY_INDEX) ' );

/* Recriar FKs das tabelas com ref à AUTORIZACAO_CONVENIO*/

CALL Exec_Sql_Dinamico('TASY',' ALTER TABLE PROCEDIMENTO_AUTORIZADO ' ||
			 ' ADD (CONSTRAINT PROAUTO_AUTCONV_FK FOREIGN KEY (NR_SEQUENCIA_AUTOR) ' ||
			 '      REFERENCES AUTORIZACAO_CONVENIO (NR_SEQUENCIA)) ');
CALL Exec_Sql_Dinamico('TASY',' CREATE INDEX PROAUTO_AUTCONV_FK_I ON PROCEDIMENTO_AUTORIZADO(NR_SEQUENCIA_AUTOR) ');


CALL Exec_Sql_Dinamico('TASY',' ALTER TABLE MATERIAL_AUTORIZADO ADD ' ||
			 ' (CONSTRAINT MATAUTO_AUTCONV_FK FOREIGN KEY (NR_SEQUENCIA_AUTOR) ' ||
			 '  REFERENCES AUTORIZACAO_CONVENIO (NR_SEQUENCIA)) ');
CALL Exec_Sql_Dinamico('TASY',' CREATE INDEX MATAUTO_AUTCONV_FK_I ON MATERIAL_AUTORIZADO(NR_SEQUENCIA_AUTOR) ');


CALL Exec_Sql_Dinamico('TASY',' ALTER TABLE AUTORIZACAO_CONVENIO_HIST ADD ' ||
			 ' (CONSTRAINT AUTCOHI_AUTCIEN_FK FOREIGN KEY (NR_SEQUENCIA_AUTOR) ' ||
			 '  REFERENCES AUTORIZACAO_CONVENIO (NR_SEQUENCIA)) ' );
CALL Exec_Sql_Dinamico('TASY',' CREATE INDEX AUTCOHI_AUTCIEN_FK_I ON AUTORIZACAO_CONVENIO_HIST(NR_SEQUENCIA_AUTOR) ');


CALL Exec_Sql_Dinamico('TASY',' ALTER TABLE PACIENTE_JUSTIFICATIVA ADD ' || 
			 ' (CONSTRAINT PACJUST_AUTCONV_FK FOREIGN KEY (NR_SEQUENCIA_AUTOR) ' ||
			 ' REFERENCES AUTORIZACAO_CONVENIO (NR_SEQUENCIA)) ' );
CALL Exec_Sql_Dinamico('TASY',' CREATE INDEX PACJUST_AUTCONV_FK_I ON PACIENTE_JUSTIFICATIVA(NR_SEQUENCIA_AUTOR)');

/* Acertar NR_SEQUENCIA_AUTOR das tabelas com ref à AUTORIZACAO_CONVENIO */
select	count(*) 
into STRICT	cont_w
from	procedimento_autorizado
where	coalesce(nr_sequencia_autor::text, '') = '';

while	cont_w > 0 loop

	update	procedimento_autorizado a
	set	a.nr_sequencia_autor	= (SELECT	x.nr_sequencia
					  from		autorizacao_convenio x
					  where		x.nr_atendimento	= a.nr_atendimento
					  and		x.nr_seq_autorizacao	= a.nr_seq_autorizacao)
	where	coalesce(a.nr_sequencia_autor::text, '') = ''  LIMIT 2000;

	commit;

	cont_w	:= cont_w - 1999;
end loop;

select	count(*)
into STRICT	cont_w
from	material_autorizado
where	coalesce(nr_sequencia_autor::text, '') = '';

while	cont_w > 0 loop

	update	material_autorizado a
	set	a.nr_sequencia_autor	= (SELECT	x.nr_sequencia
					  from		autorizacao_convenio x
					  where		x.nr_atendimento	= a.nr_atendimento
					  and		x.nr_seq_autorizacao	= a.nr_seq_autorizacao)
	where	coalesce(a.nr_sequencia_autor::text, '') = ''  LIMIT 2000;

	commit;

	cont_w	:= cont_w - 1999;
end loop;


select	count(*)
into STRICT	cont_w
from	autorizacao_convenio_hist
where	coalesce(nr_sequencia_autor::text, '') = '';

while	cont_w > 0 loop

	update	autorizacao_convenio_hist a
	set	a.nr_sequencia_autor	= (SELECT	x.nr_sequencia
					  from		autorizacao_convenio x
					  where		x.nr_atendimento	= a.nr_atendimento
					  and		x.nr_seq_autorizacao	= a.nr_seq_autorizacao)
	where	coalesce(a.nr_sequencia_autor::text, '') = ''  LIMIT 2000;

	commit;

	cont_w	:= cont_w - 1999;
end loop;

select	count(*)
into STRICT	cont_w
from	paciente_justificativa
where	coalesce(nr_sequencia_autor::text, '') = ''
and	(nr_seq_autorizacao IS NOT NULL AND nr_seq_autorizacao::text <> '')
and	(nr_atendimento IS NOT NULL AND nr_atendimento::text <> '');

while	cont_w > 0 loop

	update	paciente_justificativa a
	set	a.nr_sequencia_autor	= (SELECT	x.nr_sequencia
					  from		autorizacao_convenio x
					  where		x.nr_atendimento	= a.nr_atendimento
					  and		x.nr_seq_autorizacao	= a.nr_seq_autorizacao)
	where	coalesce(a.nr_sequencia_autor::text, '') = ''
	and	(nr_seq_autorizacao IS NOT NULL AND nr_seq_autorizacao::text <> '')
	and	(nr_atendimento IS NOT NULL AND nr_atendimento::text <> '')  LIMIT 2000;

	commit;

	cont_w	:= cont_w - 2000;
end loop;

CALL Exec_Sql_Dinamico('TASY',' drop index PROPACI_PROAUTO_FK_I ');
/*Exec_Sql_Dinamico('TASY',' alter table procedimento_paciente drop constraint PROPACI_PROAUTO_FK ');*/

CALL Exec_Sql_Dinamico('TASY',' alter table procedimento_autorizado drop constraint PROAUTO_PK ');

CALL Exec_Sql_Dinamico('TASY',' alter table procedimento_autorizado modify NR_ATENDIMENTO NULL ');

CALL Exec_Sql_Dinamico('TASY',' alter table procedimento_autorizado modify NR_SEQ_AUTORIZACAO NULL ');

CALL Exec_Sql_Dinamico('TASY',' update PROCEDIMENTO_AUTORIZADO set nr_sequencia = PROCEDIMENTO_AUTORIZADO_seq.nextval ' ||
			 ' where nr_sequencia is null ');
CALL Exec_Sql_Dinamico('TASY',' alter table procedimento_autorizado modify NR_SEQUENCIA_AUTOR NOT NULL ');

CALL Exec_Sql_Dinamico('TASY',' ALTER TABLE PROCEDIMENTO_AUTORIZADO ADD ( ' ||
			 ' CONSTRAINT PROAUTO_PK Primary Key  (NR_SEQUENCIA) USING INDEX Tablespace TASY_INDEX) ' );

CALL Exec_Sql_Dinamico('TASY',' ALTER TABLE PROCEDIMENTO_AUTORIZADO ADD ( ' ||
			 ' CONSTRAINT PROAUTO_UK Unique  (NR_ATENDIMENTO,NR_SEQ_AUTORIZACAO,CD_PROCEDIMENTO) USING INDEX Tablespace TASY_INDEX) ');
/*
Exec_Sql_Dinamico('TASY',' ALTER TABLE PROCEDIMENTO_PACIENTE ADD ( ' ||
			 ' CONSTRAINT PROPACI_PROAUTO_FK FOREIGN KEY (NR_ATENDIMENTO, NR_SEQ_AUTORIZACAO,CD_PROCEDIMENTO) ' ||
			 ' REFERENCES PROCEDIMENTO_AUTORIZADO (NR_ATENDIMENTO,NR_SEQ_AUTORIZACAO,CD_PROCEDIMENTO)) ');
*/
CALL Exec_Sql_Dinamico('TASY',' CREATE INDEX PROPACI_PROAUTO_FK_I ON PROCEDIMENTO_PACIENTE(NR_ATENDIMENTO,NR_SEQ_AUTORIZACAO,CD_PROCEDIMENTO) ');


/* Exec_Sql_Dinamico('TASY',' drop index MATPACI_MATAUTO_FK_I '); */

CALL Exec_Sql_Dinamico('TASY',' alter table material_atend_paciente drop constraint MATPACI_MATAUTO_FK ');

CALL Exec_Sql_Dinamico('TASY',' alter table material_autorizado drop constraint MATAUTO_PK ');

CALL Exec_Sql_Dinamico('TASY',' alter table material_autorizado modify NR_ATENDIMENTO NULL ');

CALL Exec_Sql_Dinamico('TASY',' alter table material_autorizado modify NR_SEQ_AUTORIZACAO NULL ');

CALL Exec_Sql_Dinamico('TASY',' update material_autorizado set nr_sequencia = material_autorizado_seq.nextval ' ||
			 ' where nr_sequencia is null ');

CALL Exec_Sql_Dinamico('TASY',' alter table material_autorizado modify NR_SEQUENCIA_AUTOR NOT NULL ');

CALL Exec_Sql_Dinamico('TASY',' ALTER TABLE MATERIAL_AUTORIZADO ADD ( ' ||
			 ' CONSTRAINT MATAUTO_PK Primary Key  (NR_SEQUENCIA) USING INDEX Tablespace TASY_INDEX) ');

/*
Exec_Sql_Dinamico('TASY',' ALTER TABLE MATERIAL_ATEND_PACIENTE ADD ( ' ||
			 ' CONSTRAINT MATPACI_MATAUTO_FK FOREIGN KEY (NR_ATENDIMENTO, NR_SEQ_AUTORIZACAO, CD_MATERIAL) ' ||
			 ' REFERENCES MATERIAL_AUTORIZADO (NR_ATENDIMENTO, NR_SEQ_AUTORIZACAO, CD_MATERIAL)) ' );
*/


/* Exec_Sql_Dinamico('TASY',' CREATE INDEX MATPACI_MATAUTO_FK_I ON MATERIAL_ATEND_PACIENTE(NR_ATENDIMENTO,NR_SEQ_AUTORIZACAO,CD_MATERIAL) ' ); */

CALL Exec_Sql_Dinamico('TASY',' alter table autorizacao_convenio_hist modify NR_ATENDIMENTO NULL ');

CALL Exec_Sql_Dinamico('TASY',' alter table autorizacao_convenio_hist modify NR_SEQ_AUTORIZACAO NULL ');

CALL Exec_Sql_Dinamico('TASY',' alter table autorizacao_convenio_hist modify NR_SEQUENCIA_AUTOR NOT NULL ');

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baca_acerto_autor_convenio () FROM PUBLIC;

