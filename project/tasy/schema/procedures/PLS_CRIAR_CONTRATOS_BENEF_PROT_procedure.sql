-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_criar_contratos_benef_prot ( nr_seq_protocolo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_segurado_w		bigint;
cd_usuario_plano_w		varchar(30);
cd_pessoa_fisica_w		varchar(10);
qt_dia_nascimento_w		bigint;
qt_mes_nascimento_w		bigint;
qt_ano_nascimento_w		bigint;
ie_data_valida_w		boolean;
nr_sexo_w			bigint;
nr_seq_contrato_w		bigint;
nr_seq_emissor_w		bigint;
ie_sexo_w			varchar(10);
dt_nascimento_w			timestamp;
dt_adesao_w			timestamp;
dt_base_validade_carteira_w	varchar(10);
nr_plano_w			bigint;
nr_seq_plano_w			bigint;
nr_seq_tabela_w			bigint;
nr_seq_pagador_w		bigint;
nr_seq_operadora_w		bigint;

cd_condicao_pagamento_w		bigint;
cd_tipo_portador_w		bigint;
cd_portador_w			bigint;
nr_seq_conta_banco_w		bigint;
nr_seq_carteira_cobr_w		bigint;
ie_gerar_nota_titulo_w		varchar(10);

dt_adesao_alterada_w		timestamp;
nr_seq_tabela_ww		bigint;
nr_seq_motivo_inclusao_w	bigint;
cd_empresa_w			bigint;

ie_grau_parentesco_w		varchar(10);
qt_idade_w			bigint;

nr_seq_preco_w			bigint;
nr_seq_segurado_preco_ww	bigint;
vl_preco_w			double precision;
vl_preco_nao_subsid_desc_w	double precision;
vl_minimo_mensalidade_w		double precision;
vl_adaptacao_w			double precision;
nm_beneficiario_w		varchar(255);
vl_desconto_w			double precision;
dt_conta_w			timestamp;
qt_contrato_w			bigint;
nr_seq_conta_w			bigint;

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Criar o contrato para os beneficiários importados do arquivo TISS que são usuários eventuais
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ X] Outros: Baca
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
no parâmetro nm_usuario_p colocar um usuário do TASY
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
C01 CURSOR FOR
	SELECT	a.nr_seq_segurado,
		a.cd_usuario_plano_imp,
		coalesce(a.dt_atendimento_referencia,add_months(clock_timestamp(),-12)),
		coalesce(substr(pls_desc_benef_intercambio(a.nr_seq_nota_cobranca),1,255),a.nm_segurado_imp),
		a.nr_sequencia
	from	pls_conta	a
	where	a.nr_seq_protocolo	= nr_seq_protocolo_p
	and	not exists (	SELECT	1
					from	pls_segurado	x
					where	x.nr_sequencia	= a.nr_seq_segurado
					and	(x.nr_seq_contrato IS NOT NULL AND x.nr_seq_contrato::text <> ''));

C02 CURSOR FOR
	SELECT	nr_sequencia,
		coalesce(vl_preco_atual,0),
		vl_preco_nao_subsid_atual,
		coalesce(vl_minimo,0),
		coalesce(vl_adaptacao,0)
	from	pls_plano_preco
	where	qt_idade_w	>= qt_idade_inicial
	and	qt_idade_w	<= qt_idade_final
	and	nr_seq_tabela	= nr_seq_tabela_ww
	and	coalesce(ie_grau_titularidade,ie_grau_parentesco_w)	= ie_grau_parentesco_w
	order	by	coalesce(ie_grau_titularidade,' ');


BEGIN

select	nr_seq_emissor,
	dt_base_validade_carteira,
	nr_seq_motivo_inclusao,
	cd_condicao_pagamento
into STRICT	nr_seq_emissor_w,
	dt_base_validade_carteira_w,
	nr_seq_motivo_inclusao_w,
	cd_condicao_pagamento_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

open C01;
loop
fetch C01 into
	nr_seq_segurado_w,
	cd_usuario_plano_w,
	dt_conta_w,
	nm_beneficiario_w,
	nr_seq_conta_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	dt_nascimento_w		:= null;

	ie_data_valida_w	:= false;

	dt_conta_w		:= add_months(dt_conta_w,-2);

	dt_adesao_w		:= dt_conta_w;

	dt_adesao_alterada_w	:= trunc(dt_conta_w,'Month');

	while(ie_data_valida_w = false) loop
		qt_dia_nascimento_w	:= dbms_random.value(1,30);
		qt_mes_nascimento_w	:= dbms_random.value(1,12);
		qt_ano_nascimento_w	:= dbms_random.value(1960,2000);

		begin
		dt_nascimento_w	:= to_date(to_char(qt_dia_nascimento_w)||'/'||to_char(qt_mes_nascimento_w)||'/'||to_char(qt_ano_nascimento_w));
		ie_data_valida_w	:= true;
		exception
		when others then
			ie_data_valida_w	:= false;
		end;
	end loop;

	nr_sexo_w	:=  dbms_random.value(1,2);

	if (nr_sexo_w = 1) then
		ie_sexo_w	:= 'M';
	else
		ie_sexo_w	:= 'F';
	end if;

	if (coalesce(nr_seq_segurado_w::text, '') = '') then
		select	max(nr_seq_segurado)
		into STRICT	nr_seq_segurado_w
		from	pls_segurado_carteira
		where	cd_usuario_plano	= cd_usuario_plano_w;
	end if;

	/*Caso não existir o beneficiário, cria o mesmo no cadastro de pessoa física e na tabela do beneficiário*/

	if (coalesce(nr_seq_segurado_w::text, '') = '') then
		select	nextval('pessoa_fisica_seq')
		into STRICT	cd_pessoa_fisica_w
		;

		insert into pessoa_fisica(	cd_pessoa_fisica,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,ie_tipo_pessoa,
				cd_estabelecimento,nm_pessoa_fisica,dt_nascimento,ie_sexo)
		values (	cd_pessoa_fisica_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,2,
				cd_estabelecimento_p,nm_beneficiario_w,dt_nascimento_w,ie_sexo_w);

		select	nextval('pls_segurado_seq')
		into STRICT	nr_seq_segurado_w
		;

		insert into pls_segurado(	nr_sequencia, dt_atualizacao, dt_atualizacao_nrec, nm_usuario, nm_usuario_nrec,
				cd_pessoa_fisica,ie_situacao_atend,cd_estabelecimento,ie_local_cadastro)
		values (	nr_seq_segurado_w, clock_timestamp(), clock_timestamp(),nm_usuario_p, nm_usuario_p,
				cd_pessoa_fisica_w,'A',cd_estabelecimento_p,2);

		insert into pls_segurado_carteira(	nr_sequencia, dt_atualizacao, dt_atualizacao_nrec,nm_usuario, nm_usuario_nrec,cd_estabelecimento,
				cd_usuario_plano, dt_inicio_vigencia,ie_situacao, nr_seq_segurado,nr_seq_emissor)
		values (	nextval('pls_segurado_carteira_seq'), clock_timestamp(), clock_timestamp(),nm_usuario_p, nm_usuario_p,cd_estabelecimento_p,
				cd_usuario_plano_w, dt_conta_w,'D', nr_seq_segurado_w,nr_seq_emissor_w);

		update	pls_conta
		set	nr_seq_segurado	= nr_seq_segurado_w
		where	nr_sequencia	= nr_seq_conta_w;
	else
		select	count(1)
		into STRICT	qt_contrato_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w
		and	(nr_seq_contrato IS NOT NULL AND nr_seq_contrato::text <> '');

		if (qt_contrato_w	> 0) then
			goto final;
		end if;

		select	cd_pessoa_fisica
		into STRICT	cd_pessoa_fisica_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w;

		update	pessoa_fisica
		set	ie_sexo			= ie_sexo_w,
			dt_nascimento		= dt_nascimento_w
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
	end if;

	select	nextval('pls_contrato_seq')
	into STRICT	nr_seq_contrato_w
	;

	select	max(nr_sequencia)
	into STRICT	nr_seq_operadora_w
	from	pls_outorgante
	where	cd_estabelecimento	= cd_estabelecimento_p;

	insert into pls_contrato(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
			cd_estabelecimento,nr_contrato,dt_contrato,cd_cgc_estipulante,ie_reajuste,
			ie_geracao_valores,nr_seq_emissor,dt_base_validade_carteira,ie_tipo_operacao,ie_situacao,
			ie_renovacao_automatica,ie_permite_prod_dif,ie_itens_nao_cobertos,ie_preco_co_operadora,
			ie_controle_carteira,ie_permite_matricula_dif,ie_consistir_carencia_rede,ie_novo_beneficiario,
			cd_cod_anterior,cd_pf_estipulante,dt_reajuste,IE_MES_COBRANCA_REAJ,
			IE_TIPO_BENEFICIARIO,nr_seq_operadora)
	values (	nr_seq_contrato_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
			cd_estabelecimento_p,nextval('nr_contrato_seq'),dt_adesao_w,'','A',
			'B',nr_seq_emissor_w,dt_base_validade_carteira_w,'B','1',
			'N','N','N','N',
			'A','S','N','S',
			'',cd_pessoa_fisica_w,dt_adesao_w,'R',
			'BE',nr_seq_operadora_w);

	CALL pls_gerar_identificacao_estip(nr_seq_contrato_w,cd_estabelecimento_p,nm_usuario_p);

	update	pls_contrato
	set	dt_aprovacao	= clock_timestamp(),
		ie_situacao	= CASE WHEN ie_situacao='3' THEN '3'  ELSE '2' END ,
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp()
	where	nr_sequencia	= nr_seq_contrato_w;

	nr_plano_w	:= dbms_random.value(1,6);

	CALL pls_vincular_contrato_grupo(nr_seq_contrato_w,99,nm_usuario_p,cd_estabelecimento_p);

	if (nr_plano_w = 1) then
		nr_seq_plano_w	:= 4387;
	elsif (nr_plano_w = 2) then
		nr_seq_plano_w	:= 4363;
	elsif (nr_plano_w = 3) then
		nr_seq_plano_w	:= 4357;
	elsif (nr_plano_w = 4) then
		nr_seq_plano_w	:= 1932;
	elsif (nr_plano_w = 5) then
		nr_seq_plano_w	:= 1930;
	elsif (nr_plano_w = 6) then
		nr_seq_plano_w	:= 1561;
	end if;

	select	max(nr_sequencia)
	into STRICT	nr_seq_tabela_w
	from	pls_tabela_preco
	where	nr_seq_plano   = nr_seq_plano_w
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
	and	coalesce(nr_segurado::text, '') = ''
	and	coalesce(nr_seq_proposta::text, '') = ''
	and	coalesce(nr_contrato::text, '') = ''
	and	coalesce(nr_seq_simul_perfil::text, '') = ''
	and	coalesce(ie_preco_vidas_contrato,'N') = 'N';

	insert into pls_contrato_plano(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
			nr_seq_contrato,nr_seq_plano,nr_seq_tabela,ie_situacao,IE_TIPO_OPERACAO)
	values (	nextval('pls_contrato_plano_seq'),	clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
			nr_seq_contrato_w,nr_seq_plano_w,nr_seq_tabela_w,'A','B');

	CALL pls_gerar_tabela_contrato(nr_seq_contrato_w,nr_seq_plano_w,nr_seq_tabela_w,cd_estabelecimento_p,nm_usuario_p);

	select	max(nr_seq_tabela)
	into STRICT	nr_seq_tabela_ww
	from	pls_contrato_plano
	where	nr_seq_contrato	= nr_seq_contrato_w;

	select	nextval('pls_contrato_pagador_seq')
	into STRICT	nr_seq_pagador_w
	;

	insert into pls_contrato_pagador(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
			cd_pessoa_fisica,cd_cgc,ie_endereco_boleto,ie_tipo_pagador,ie_envia_cobranca,
			ie_calc_primeira_mens,ie_inadimplencia_via_adic,nr_seq_contrato,cd_sistema_anterior)
	values (	nr_seq_pagador_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
			cd_pessoa_fisica_w,'','PFR','P','A',
			'I','N',nr_seq_contrato_w,'');

	SELECT * FROM pls_obter_inf_fin_pagador(nr_seq_pagador_w, nr_seq_contrato_w, clock_timestamp(), cd_estabelecimento_p, cd_tipo_portador_w, cd_portador_w, nr_seq_conta_banco_w, nr_seq_carteira_cobr_w, ie_gerar_nota_titulo_w, nm_usuario_p) INTO STRICT cd_tipo_portador_w, cd_portador_w, nr_seq_conta_banco_w, nr_seq_carteira_cobr_w, ie_gerar_nota_titulo_w;

	insert into pls_contrato_pagador_fin(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
			nr_seq_pagador,dt_inicio_vigencia,dt_dia_vencimento,nr_seq_forma_cobranca,ie_mes_vencimento,
			cd_condicao_pagamento,ie_portador_exclusivo,ie_geracao_nota_titulo,ie_destacar_reajuste,ie_gerar_cobr_escrit,
			cd_tipo_portador,cd_portador,nr_seq_conta_banco)
	values (	nextval('pls_contrato_pagador_fin_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
			nr_seq_pagador_w,trunc(dt_adesao_w,'Month'),10,'1','A',
			cd_condicao_pagamento_w,'S','NT','N','S',
			cd_tipo_portador_w,cd_portador_w,nr_seq_conta_banco_w);

	select	cd_operadora_empresa
	into STRICT	cd_empresa_w
	from	pls_contrato
	where	nr_sequencia	= nr_seq_contrato_w;

	update	pls_segurado
	set	dt_contratacao		= dt_adesao_w,
		dt_inclusao_operadora	= dt_conta_w,
		ie_situacao_atend	= 'A',
		nr_seq_pagador		= nr_seq_pagador_w,
		nr_seq_vendedor_canal	= 63,
		nr_seq_plano		= nr_seq_plano_w,
		nr_seq_tabela		= nr_seq_tabela_ww,
		nr_seq_contrato		= nr_seq_contrato_w,
		nr_seq_motivo_inclusao	= nr_seq_motivo_inclusao_w,
		ie_nascido_plano	= 'N',
		ie_taxa_inscricao	= 'S',
		ie_pcmso		= 'N',
		ie_renovacao_carteira	= 'S',
		ie_bonific_cooperado	= 'S',
		cd_operadora_empresa	= cd_empresa_w,
		ie_tipo_segurado	= 'B',
		dt_liberacao		= clock_timestamp()
	where	nr_sequencia		= nr_seq_segurado_w;

	update	pls_segurado_carteira
	set	nr_seq_emissor	= nr_seq_emissor_w,
		nr_via_solicitacao	= 1
	where	nr_seq_segurado		= nr_seq_segurado_w;

	CALL pls_copiar_carencia(nr_seq_plano_w,0,nr_seq_segurado_w,'N',nm_usuario_p);

	CALL pls_gerar_ultima_carencia(nr_seq_segurado_w, nm_usuario_p);

	CALL pls_gerar_sca_plano_benef(nr_seq_segurado_w,dt_adesao_w,nm_usuario_p, null);

	CALL pls_liberar_vinculo_sca(null, nr_seq_segurado_w, null, 'L', 'N', 'N', nm_usuario_p, cd_estabelecimento_p);

	CALL pls_gerar_valor_sca_segurado(nr_seq_segurado_w, 'C', null, nm_usuario_p, cd_estabelecimento_p);

	CALL pls_atualizar_familia_pf(nr_seq_segurado_w,cd_estabelecimento_p,nm_usuario_p);

	CALL pls_gerar_regra_titularidade(nr_seq_segurado_w,cd_estabelecimento_p,nm_usuario_p);

	ie_grau_parentesco_w	:= coalesce(substr(pls_obter_garu_dependencia_seg(nr_seq_segurado_w,'C'),1,2),'X');

	qt_idade_w	:= trunc(months_between(clock_timestamp(),dt_nascimento_w) / 12);

	open C02;
	loop
	fetch C02 into
		nr_seq_preco_w,
		vl_preco_w,
		vl_preco_nao_subsid_desc_w,
		vl_minimo_mensalidade_w,
		vl_adaptacao_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
	end loop;
	close C02;

	if (nr_seq_preco_w IS NOT NULL AND nr_seq_preco_w::text <> '') then
		select	nextval('pls_segurado_preco_seq')
		into STRICT	nr_seq_segurado_preco_ww
		;

		insert into pls_segurado_preco(	nr_sequencia, dt_atualizacao, nm_usuario, dt_reajuste, nr_seq_segurado,
				vl_preco_atual,vl_preco_ant, qt_idade, cd_motivo_reajuste, dt_liberacao,
				nm_usuario_liberacao, vl_preco_nao_subsid_desc,nr_seq_tabela, nr_seq_preco,vl_minimo_mensalidade,
				vl_adaptacao,ie_situacao)
		values (	nr_seq_segurado_preco_ww, clock_timestamp(), nm_usuario_p, clock_timestamp(), nr_seq_segurado_w,
				vl_preco_w, 0, qt_idade_w, 'C', clock_timestamp(),
				nm_usuario_p, vl_preco_nao_subsid_desc_w,nr_seq_tabela_ww, nr_seq_preco_w,vl_minimo_mensalidade_w,
				vl_adaptacao_w,'A');
	end if;

	<<final>>
	nr_seq_segurado_w	:= nr_seq_segurado_w;

	end;
end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_criar_contratos_benef_prot ( nr_seq_protocolo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

