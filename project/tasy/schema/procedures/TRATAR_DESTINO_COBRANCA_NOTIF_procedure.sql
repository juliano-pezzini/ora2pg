-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tratar_destino_cobranca_notif ( nr_seq_notific_pagador_p bigint, nr_seq_grupo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_cgc_w			varchar(14);
cd_pessoa_fisica_w		varchar(10);
ie_tipo_pessoa_w		varchar(3)	:= 'N';
vl_cobranca_w			double precision;
nr_seq_regra_w			bigint;
nr_seq_grupo_cobr_w		bigint;
nr_seq_cobrador_w		bigint;
nr_seq_cobr_ant_w		bigint;
qt_cobranca_w			integer;
nr_seq_lote_w			bigint;
qt_regra_w			bigint;
nr_seq_notif_regra_w		bigint;
qt_total_cobranca_w		integer;
nr_seq_cobr_pessoa_w		bigint	:= null;
qt_cobranca_grupo_w		integer;
qt_cobrador_grupo_w		integer;
nr_seq_cobrador_ant_w		bigint;
pr_rateio_w			double precision;
pr_atual_cobrador_w		double precision;
pr_atual_grupo_w		double precision;
qt_cobradores_w			integer;
dt_inclusao_w			timestamp;
ie_cobrador_atual_w		varchar(3);
nr_seq_notific_pagador_w 	bigint;
nr_seq_notificacao_w		bigint;

C01 CURSOR FOR /* Regras */
	SELECT	/* INDEX(REGRACO_PLSNORE_FK_I) */
		a.nr_sequencia
	from	regra_rateio_cobrador a
	where	dt_inclusao_w between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia,dt_inclusao_w)
	and (a.ie_tipo_pessoa = ie_tipo_pessoa_w or a.ie_tipo_pessoa = 'T')
	and	vl_cobranca_w between coalesce(a.vl_minimo,vl_cobranca_w) and coalesce(a.vl_maximo,vl_cobranca_w)
	and	((a.nr_seq_notif_regra = coalesce(nr_seq_notif_regra_w,a.nr_seq_notif_regra)) or (coalesce(a.nr_seq_notif_regra::text, '') = ''))
	order by
		coalesce(a.vl_maximo,0),
		coalesce(a.vl_minimo,0),
		coalesce(a.ie_tipo_pessoa,'X') desc,
		coalesce(a.nr_seq_notif_regra,0);

C02 CURSOR FOR /* Destinos */
	SELECT	a.nr_seq_grupo_cobr,
		a.nr_seq_cobrador,
		a.pr_rateio
	from	regra_rateio_cobr_dest a
	where	a.nr_seq_regra		= nr_seq_regra_w
	and	((a.nr_seq_grupo_cobr 	= coalesce(nr_seq_grupo_p,a.nr_seq_grupo_cobr)) or (coalesce(a.nr_seq_grupo_cobr::text, '') = ''));

C03 CURSOR FOR /* Cobradores do grupo */
	SELECT	a.nr_seq_cobrador
	from	grupo_cobranca_membro a
	where	a.nr_seq_grupo		= nr_seq_grupo_cobr_w;

C04 CURSOR FOR  -- Cobranças do pagador
	SELECT	z.nr_sequencia
	from	pls_notificacao_item	y,
		cobranca 		z
	where	y.nr_seq_notific_pagador = nr_seq_notific_pagador_p
	and	z.ie_status 		= 'P'
	and	y.nr_sequencia 		= z.nr_seq_notific_item;
BEGIN
select	count(1)
into STRICT	qt_regra_w
from	regra_rateio_cobrador	a
where	a.cd_estabelecimento	= cd_estabelecimento_p;

if (nr_seq_notific_pagador_p IS NOT NULL AND nr_seq_notific_pagador_p::text <> '') and (qt_regra_w > 0) then
	select	d.cd_pessoa_fisica,
		d.cd_cgc,
		clock_timestamp() dt_inclusao,
		d.vl_pagador vl_cobranca,
		CASE WHEN coalesce(d.cd_pessoa_fisica::text, '') = '' THEN 'PJ'  ELSE 'PF' END  ie_tipo_pessoa,
		d.nr_seq_lote
	into STRICT	cd_pessoa_fisica_w,
		cd_cgc_w,
		dt_inclusao_w,
		vl_cobranca_w,
		ie_tipo_pessoa_w,
		nr_seq_lote_w
	from	pls_notificacao_pagador	d
	where	d.nr_sequencia			= nr_seq_notific_pagador_p;

	/* Primeiro limpar o cobrador da cobrança */

	select	max(a.nr_seq_regra)
	into STRICT	nr_seq_notif_regra_w
	from	pls_notificacao_lote a
	where	a.nr_sequencia	= nr_seq_lote_w;

	open C01;
	loop
	fetch C01 into
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		select  count(1) /* Obter a quantidade total de cobranças da regra */
		into STRICT	qt_total_cobranca_w
		from	pls_notificacao_pagador	a
		where	a.nr_seq_lote 		= nr_seq_lote_w;
		--and	a.nr_seq_regra_rat_cobr	= nr_seq_regra_w;
		/* Obter quantidade de cobradores da regra */

		select	count(1)
		into STRICT	qt_cobradores_w
		from	regra_rateio_cobr_dest a
		where	a.nr_seq_regra	= nr_seq_regra_w;

		select	coalesce(max(a.ie_cobrador_atual),'S')
		into STRICT	ie_cobrador_atual_w
		from	regra_rateio_cobrador a
		where	a.nr_sequencia	= nr_seq_regra_w;

		open C02;
		loop
		fetch C02 into
			nr_seq_grupo_cobr_w,
			nr_seq_cobrador_w,
			pr_rateio_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			/* Se possui regra de rateio limpa o cobrador das cobranças deste pagador. */

			if (C02%rowCount = 1) then
				update	cobranca a
				set	nr_seq_cobrador		 = NULL
				where	exists (SELECT	1
						from	pls_notificacao_item x
						where	x.nr_sequencia 			= a.nr_seq_notific_item
						and	x.nr_seq_notific_pagador 	= nr_seq_notific_pagador_p)
				and	ie_status = 'P';
			end if;

			if (ie_cobrador_atual_w = 'S') then
				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then /* Verificar se a pessoa da cobrança já está sendo cobrada por outro cobrador */
					/* verifica se já existe notificação para o pagador dentro do lote */

					select 	max(a.nr_sequencia)
					into STRICT 	nr_seq_notificacao_w
					from 	pls_notificacao_pagador a
					where	a.nr_seq_lote 	   = nr_seq_lote_w
					and	a.cd_pessoa_fisica = cd_pessoa_fisica_w
					and 	a.nr_sequencia	   <> nr_seq_notific_pagador_w;

					/* buscar a o cobrador da notifição encontrada dentro do lote */

					if (nr_seq_notificacao_w IS NOT NULL AND nr_seq_notificacao_w::text <> '') then
						nr_seq_cobr_pessoa_w := (pls_obter_dados_notif_pagador(nr_seq_notific_pagador_w,'CO'))::numeric;
					end if;
				else
					/* verifica se já existe notificação para o pagador dentro do lote */

					select 	max(a.nr_sequencia)
					into STRICT 	nr_seq_notificacao_w
					from 	pls_notificacao_pagador a
					where	a.nr_seq_lote 	= nr_seq_lote_w
					and	a.cd_cgc 	= cd_cgc_w
					and 	a.nr_sequencia	<> nr_seq_notific_pagador_w;

					/* buscar a o cobrador da notifição encontrada dentro do lote */

					if (nr_seq_notificacao_w IS NOT NULL AND nr_seq_notificacao_w::text <> '') then
						nr_seq_cobr_pessoa_w := (pls_obter_dados_notif_pagador(nr_seq_notific_pagador_w,'CO'))::numeric;
					end if;
				end if;
			else
				nr_seq_cobr_pessoa_w := null;
			end if;

			if (nr_seq_cobr_pessoa_w IS NOT NULL AND nr_seq_cobr_pessoa_w::text <> '') then /* Se já existe cobrança em aberto para a pessoa, o mesmo cobrador deverá cobrá-la */
				for r_c04_w in C04 loop
					CALL pls_inserir_cobr_alt_cobrador(	r_c04_w.nr_sequencia, null, nr_seq_cobr_pessoa_w, 'N', nm_usuario_p );
				end loop;

				update	cobranca a
				set	nr_seq_regra_rat_cobr	= nr_seq_regra_w,
					nr_seq_cobrador		= nr_seq_cobr_pessoa_w
				where	exists (SELECT	1
						from	pls_notificacao_item x
						where	x.nr_sequencia 			= a.nr_seq_notific_item
						and	x.nr_seq_notific_pagador 	= nr_seq_notific_pagador_p)
				and	ie_status = 'P';
				exit;
			else
				if (nr_seq_grupo_cobr_w IS NOT NULL AND nr_seq_grupo_cobr_w::text <> '') then /* Identificar para qual grupo deverá ir primeiro */
					if (coalesce(pr_rateio_w::text, '') = '') then
						pr_rateio_w	:= 100 / qt_cobradores_w;
					end if;

					select	count(1)
					into STRICT	qt_cobrador_grupo_w
					from	grupo_cobranca_membro a
					where	a.nr_seq_grupo	= nr_seq_grupo_cobr_w;

					/* Verificar a quantidade cobranças destinadas para o grupo */

					select	count(1)
					into STRICT	qt_cobranca_grupo_w
					from	pls_notificacao_pagador	a
					where	a.nr_seq_lote			= nr_seq_lote_w
					and	exists (SELECT	1
							from	pls_notificacao_item	y,
								cobranca 		z,
								grupo_cobranca_membro 	x
							where	y.nr_seq_notific_pagador = a.nr_sequencia
							and	y.nr_sequencia 		= z.nr_seq_notific_item
							and	x.nr_seq_cobrador	= z.nr_seq_cobrador
							and	z.nr_seq_regra_rat_cobr	= nr_seq_regra_w
							and	x.nr_seq_grupo		= nr_seq_grupo_cobr_w);

					pr_atual_grupo_w := round((dividir_sem_round(qt_cobranca_grupo_w,qt_total_cobranca_w) * 100)::numeric, 2);

					if (pr_atual_grupo_w <= pr_rateio_w) then
						/* Obter qual o cobrador destino */

						open C03;
						loop
						fetch C03 into
							nr_seq_cobrador_w;
						EXIT WHEN NOT FOUND; /* apply on C03 */
							begin
							select  count(1)
							into STRICT	qt_cobranca_w
							from	pls_notificacao_pagador	a
							where	a.nr_seq_lote			= nr_seq_lote_w
							and	a.nr_seq_regra_rat_cobr		= nr_seq_regra_w
							and	a.nr_seq_cobrador		= nr_seq_cobrador_w;

							pr_rateio_w		:= 100 / qt_cobrador_grupo_w;
							pr_atual_cobrador_w	:= dividir_sem_round(qt_cobranca_w,qt_cobranca_grupo_w) * 100;

							if (pr_atual_cobrador_w <= pr_rateio_w) then
								for r_c04_w in C04 loop
									CALL pls_inserir_cobr_alt_cobrador(	r_c04_w.nr_sequencia, null, nr_seq_cobrador_w, 'N', nm_usuario_p );
								end loop;

								update	cobranca a
								set	nr_seq_cobrador		= nr_seq_cobrador_w,
									nr_seq_regra_rat_cobr	= nr_seq_regra_w
								where	exists (SELECT	1
										from	pls_notificacao_item x
										where	x.nr_sequencia 			= a.nr_seq_notific_item
										and	x.nr_seq_notific_pagador 	= nr_seq_notific_pagador_p)
								and	ie_status = 'P';
								exit;
							end if;
							end;
						end loop;
						close C03;
					end if;
				else
					if (coalesce(pr_rateio_w::text, '') = '') then
						pr_rateio_w	:= 100 / qt_cobradores_w;
					end if;

					/* Verificar a quantidade cobranças destinadas para o cobrador */

					select  count(1)
					into STRICT	qt_cobranca_w
					from	pls_notificacao_pagador	a
					where	a.nr_seq_lote			= nr_seq_lote_w
					and	a.nr_seq_regra_rat_cobr		= nr_seq_regra_w
					and	a.nr_seq_cobrador		= nr_seq_cobrador_w;

					pr_atual_cobrador_w	:= dividir_sem_round(qt_cobranca_w,qt_total_cobranca_w) * 100;

					if (pr_atual_cobrador_w <= pr_rateio_w) then
						for r_c04_w in C04 loop
							CALL pls_inserir_cobr_alt_cobrador(	r_c04_w.nr_sequencia, null, nr_seq_cobrador_w, 'N', nm_usuario_p );
						end loop;

						update	cobranca a
						set	nr_seq_cobrador		= nr_seq_cobrador_w,
							nr_seq_regra_rat_cobr	= nr_seq_regra_w
						where	exists (SELECT	1
								from	pls_notificacao_item x
								where	x.nr_sequencia 			= a.nr_seq_notific_item
								and	x.nr_seq_notific_pagador 	= nr_seq_notific_pagador_p)
						and	ie_status = 'P';

						update	pls_notificacao_pagador
						set	nr_seq_regra_rat_cobr 	= nr_seq_regra_w,
							nr_seq_cobrador		= nr_seq_cobrador_w
						where	nr_sequencia 		= nr_seq_notific_pagador_p;

						exit;
					end if;
				end if;
			end if;
			end;
		end loop;
		close C02;
		end;
	end loop;
	close C01;
end if;

/* Não pode dar commit nesta procedure, é chamada por outras */

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tratar_destino_cobranca_notif ( nr_seq_notific_pagador_p bigint, nr_seq_grupo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

