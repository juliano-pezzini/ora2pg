-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_atend_prescricao (nr_atendimento_p bigint, ie_origem_chamada_p text) AS $body$
DECLARE

					
/*
ie_origem_chamada_p 
desc: determina a origem da chamda do programa para que trate corretamente o parâmetro 100 da REP.
valores:

GA = Geração do Atendimento
DS = Definição do Setor de Atendimento.

*/
ie_vincular_w				varchar(1);
qt_validade_w				double precision;
cd_pessoa_fisica_w			varchar(10);
cd_estabelecimento_w 		bigint;
nr_prescricao_w				bigint;
ie_tipo_atendimento_w		integer;
ie_vincular_atend_quio_w 	varchar(1);
nm_usuario_w				varchar(15);
ie_altera_data_w			varchar(15);
ie_hemodialise_w        	varchar(1);
dt_primeiro_horario_w     	timestamp;
dt_prescricao_w           	timestamp;
dt_inicio_prescr_w        	timestamp;
cd_setor_atendimento_w		prescr_medica.cd_setor_atendimento%type;
cd_setor_atendimento_ww		prescr_medica.cd_setor_atendimento%type;


C01 CURSOR FOR
	SELECT	coalesce(nr_prescricao,0),
			coalesce(cd_setor_atendimento,0)
	from	prescr_medica
	where	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and	coalesce(nr_atendimento::text, '') = ''
	and	coalesce(dt_suspensao::text, '') = ''
	and	((dt_prescricao > clock_timestamp() - qt_validade_w) or (qt_validade_w = 0));
	


BEGIN

select	coalesce(max(ie_tipo_atendimento),0),
		max(cd_estabelecimento)
into STRICT	ie_tipo_atendimento_w,
		cd_estabelecimento_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_p;


ie_vincular_w := obter_param_usuario(924, 100, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, cd_estabelecimento_w, ie_vincular_w);

if (ie_vincular_w = 'S') or
	(ie_vincular_w	= 'I' AND ie_tipo_atendimento_w = 1) or
	(ie_vincular_w	= 'T' AND ie_origem_chamada_p = 'DS') then

	qt_validade_w := obter_param_usuario(924, 101, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, cd_estabelecimento_w, qt_validade_w);

	select	cd_pessoa_fisica,
		cd_estabelecimento,
		nm_usuario
	into STRICT	cd_pessoa_fisica_w,
		cd_estabelecimento_w,
		nm_usuario_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_p;
	
	ie_vincular_atend_quio_w := obter_param_usuario(3130, 72, obter_perfil_ativo, nm_usuario_w, cd_estabelecimento_w, ie_vincular_atend_quio_w);
	ie_altera_data_w := obter_param_usuario(924, 1013, obter_perfil_ativo, nm_usuario_w, 0, ie_altera_data_w);
	
	if (ie_vincular_atend_quio_w	= 'N') then
		select	coalesce(max(nr_prescricao),0),
			coalesce(max(cd_setor_atendimento),0)
		into STRICT	nr_prescricao_w,
			cd_setor_atendimento_w
		from	prescr_medica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	coalesce(nr_atendimento::text, '') = ''
		and	coalesce(dt_suspensao::text, '') = ''
		and	((dt_prescricao > clock_timestamp() - qt_validade_w) or (qt_validade_w = 0));

		if (nr_prescricao_w <> 0) then
		
		    if (ie_altera_data_w = 'S') then
				if (ie_hemodialise_w = 'P') then
					dt_primeiro_horario_w	:= obter_prox_hora_cheia(clock_timestamp());
				else
					dt_primeiro_horario_w	:= Obter_Prim_Horario_Prescricao(nr_atendimento_p, Obter_Setor_Atendimento(nr_atendimento_p),clock_timestamp(),wheb_usuario_pck.get_nm_usuario,'R');	
				end if;	
				
				if (dt_primeiro_horario_w IS NOT NULL AND dt_primeiro_horario_w::text <> '') then
					dt_prescricao_w := to_date(to_char(clock_timestamp(),'dd/mm/yyyy') || ' ' || to_char(dt_primeiro_horario_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
				else
					dt_prescricao_w := clock_timestamp();
				end if;				
				dt_inicio_prescr_w := trunc(clock_timestamp(),'mi') + 1/1440;				
			end if;
		
		
			update	prescr_medica
			set	nr_atendimento		 = nr_atendimento_p,
				dt_prescricao        = coalesce(dt_prescricao_w,dt_prescricao),
				dt_inicio_prescr     = coalesce(dt_inicio_prescr_w,dt_inicio_prescr),
				dt_primeiro_horario  = coalesce(dt_primeiro_horario_w,dt_primeiro_horario)
			where	nr_prescricao  	 = nr_prescricao_w;
						
			
			if (ie_altera_data_w = 'S')  then
				CALL RECALCULAR_VINC_PRESCR(nr_prescricao_w,wheb_usuario_pck.get_nm_usuario, obter_perfil_ativo,cd_estabelecimento_w);
			end if;
			
		end if;
		
		--Em alguns casos essa procedure é executada quando o paciente esta sem setor

		--ai acaba não atualizando o cd_setor_atendimento

		--por isso está  sendo atualizado novamente caso o cd_setor_atendimento estiver null ainda.
		if (nr_prescricao_w = 0) then
			select	coalesce(max(nr_prescricao),0)
			into STRICT	nr_prescricao_w
			from	prescr_medica
			where	cd_pessoa_fisica  = cd_pessoa_fisica_w
			and	coalesce(dt_suspensao::text, '') = ''
			and	((dt_prescricao > clock_timestamp() - qt_validade_w) or (qt_validade_w = 0));
		end if;

		update	prescr_medica
		set	cd_setor_atendimento = Obter_Setor_Atendimento(nr_atendimento_p)
		where	nr_prescricao	= nr_prescricao_w
		and	coalesce(cd_setor_Atendimento::text, '') = '';
		
		commit;
		
		cd_setor_atendimento_ww := Obter_Setor_Atendimento(nr_atendimento_p);
		
		CALL CPOE_Vincular_atend_prescr(nr_prescricao_w, nr_atendimento_p, nm_usuario_w);
		
		if (cd_setor_atendimento_ww <> 0) then
			CALL define_local_disp_prescr(nr_prescricao_w, null, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario);
		end if;	
		
	else	
		open C01;
		loop
		fetch C01 into	
			nr_prescricao_w,
			cd_setor_atendimento_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			

			if (ie_altera_data_w = 'S') then
				if (ie_hemodialise_w = 'P') then
					dt_primeiro_horario_w	:= obter_prox_hora_cheia(clock_timestamp());
				else
					dt_primeiro_horario_w	:= Obter_Prim_Horario_Prescricao(nr_atendimento_p, Obter_Setor_Atendimento(nr_atendimento_p),clock_timestamp(),wheb_usuario_pck.get_nm_usuario,'R');	
				end if;	
				
				if (dt_primeiro_horario_w IS NOT NULL AND dt_primeiro_horario_w::text <> '') then
					dt_prescricao_w := to_date(to_char(clock_timestamp(),'dd/mm/yyyy') || ' ' || to_char(dt_primeiro_horario_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss');
				else
					dt_prescricao_w := clock_timestamp();
				end if;				
				dt_inicio_prescr_w  := trunc(clock_timestamp(),'mi') + 1/1440;				
			end if;
			

			update	prescr_medica
			set	nr_atendimento		 = nr_atendimento_p,
				dt_prescricao        = coalesce(dt_prescricao_w,dt_prescricao),
				dt_inicio_prescr     = coalesce(dt_inicio_prescr_w,dt_inicio_prescr),
				dt_primeiro_horario  = coalesce(dt_primeiro_horario_w,dt_primeiro_horario)
			where	nr_prescricao  	 = nr_prescricao_w;
			
			update	prescr_medica
			set		cd_setor_atendimento = Obter_Setor_Atendimento(nr_atendimento_p)
			where	nr_prescricao	= nr_prescricao_w
			and		coalesce(cd_setor_Atendimento::text, '') = '';
			
			if (ie_altera_data_w = 'S')  then
				CALL RECALCULAR_VINC_PRESCR(nr_prescricao_w,wheb_usuario_pck.get_nm_usuario, obter_perfil_ativo,cd_estabelecimento_w);
			end if;
			
			cd_setor_atendimento_ww := Obter_Setor_Atendimento(nr_atendimento_p);
			
			if (cd_setor_atendimento_ww <> 0) then
				CALL define_local_disp_prescr(nr_prescricao_w, null, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario);
			end if;	
		
			CALL CPOE_Vincular_atend_prescr(nr_prescricao_w, nr_atendimento_p, nm_usuario_w);

			end;
		end loop;
		close C01;
	end if;

	commit;
end if;

CALL Atualizar_Atend_Anamnese(nr_Atendimento_p,wheb_usuario_pck.get_nm_usuario);
CALL Atualizar_Atend_Evolucao(nr_Atendimento_p,wheb_usuario_pck.get_nm_usuario);
CALL Atualizar_Atend_Pre_Natal(nr_Atendimento_p,wheb_usuario_pck.get_nm_usuario);


commit;

end	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_atend_prescricao (nr_atendimento_p bigint, ie_origem_chamada_p text) FROM PUBLIC;

