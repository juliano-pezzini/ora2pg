-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_nota_fisc_comissao ( nr_seq_comissao_p pls_comissao.nr_sequencia%type, nr_seq_comis_titulo_p pls_comissao_titulo.nr_sequencia%type, nr_titulo_pagar_p titulo_pagar.nr_titulo%type, dt_vencimento_p pls_comissao_titulo.dt_vencimento%type, cd_pf_vendedor_p pls_vendedor.cd_pessoa_fisica%type, cd_cgc_vendedor_p pls_vendedor.cd_cgc%type, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
-- Campos do cursor 1 
nr_seq_comis_nf_w		pls_regra_comissao_nf.nr_sequencia%type;
cd_operacao_nf_w		pls_regra_comissao_nf.cd_operacao_nf%type;
cd_natureza_operacao_w		pls_regra_comissao_nf.cd_natureza_operacao%type;
nr_seq_classif_fiscal_w		pls_regra_comissao_nf.nr_seq_classif_fiscal%type;
cd_serie_nf_w			pls_regra_comissao_nf.cd_serie_nf%type;

-- Campos do cursor 2 
ie_tipo_item_w			pls_comissao_benef_item.ie_tipo_item%type;
vl_comissao_item_w		pls_comissao_benef_item.vl_comissao%type;
qt_item_w			integer;
			
nr_seq_canal_venda_w		pls_comissao.nr_seq_canal_venda%type;
vl_comissao_canal_w		pls_comissao.vl_comissao_canal%type;
cd_condicao_pagamento_w		pls_vendedor_regra_pag.cd_condicao_pagamento%type;
nm_canal_venda_w		varchar(255);
nr_nota_fiscal_w		varchar(255);
nr_seq_nota_fiscal_w		nota_fiscal.nr_sequencia%type;
vl_mercadoria_w			nota_fiscal.vl_mercadoria%type;
vl_total_nota_w			nota_fiscal.vl_total_nota%type;
nr_sequencia_nf_w		nota_fiscal.nr_sequencia_nf%type;
nr_item_nf_w			nota_fiscal_item.nr_item_nf%type;
cd_procedimento_w		pls_tipo_item_mens.cd_procedimento%type;
ie_origem_proced_w		pls_tipo_item_mens.ie_origem_proced%type;
cd_material_w			pls_tipo_item_mens.cd_material%type;
ie_forma_pagamento_w		condicao_pagamento.ie_forma_pagamento%type;
vl_liquido_nota_w		nota_fiscal.vl_total_nota%type;
vl_unitario_item_nf_w		nota_fiscal_item.vl_unitario_item_nf%type;
vl_comissao_benef_w		pls_comissao_beneficiario.vl_comissao_benef%type;
ie_valor_divergente_w		varchar(1);		
ie_estab_serie_nf_w		parametro_compras.ie_estab_serie_nf%type;
cd_cgc_emitente_w		estabelecimento.cd_cgc%type;
nr_seq_grupo_item_w		pls_grupo_item_mens.nr_sequencia%type;
nr_item_nf_ww			integer;

C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		cd_operacao_nf, 
		cd_natureza_operacao, 
		nr_seq_classif_fiscal, 
		cd_serie_nf	 
	from	pls_regra_comissao_nf 
	where	clock_timestamp() between coalesce(dt_inicio_vigencia, clock_timestamp()) and coalesce(dt_fim_vigencia, clock_timestamp()) 
	order 	by coalesce(cd_operacao_nf,0), 
		coalesce(cd_natureza_operacao,0), 
		coalesce(nr_seq_classif_fiscal,0), 
		coalesce(cd_serie_nf,0);
		
C02 CURSOR FOR 
	SELECT	b.ie_tipo_item, 
		sum(b.vl_comissao) vl_comissao, 
		count(1) qt_item 
	from	pls_comissao_beneficiario	a, 
		pls_comissao_benef_item		b 
	where	a.nr_seq_comissao	= nr_seq_comissao_p 
	and	a.nr_sequencia 		= b.nr_seq_comissao_benef 
	group by 
		b.ie_tipo_item;

C03 CURSOR FOR 
	SELECT b.nr_sequencia, 
		sum(d.vl_comissao) vl_comissao, 
		a.cd_procedimento cd_procedimento, 
		a.cd_material cd_material, 
		a.ie_origem_proced ie_origem_proced, 
		count(1) qt_item 
	from	pls_tipo_item_mens a, 
		pls_grupo_item_mens b, 
		pls_item_grupo_tipo_mens c, 
		pls_comissao_benef_item d, 
		pls_comissao_beneficiario e 
	where	b.nr_sequencia = a.nr_seq_grupo_item 
	and	b.nr_sequencia = c.nr_seq_grupo_item 
	and  	c.ie_tipo_item = d.ie_tipo_item 
	and  	e.nr_sequencia = d.nr_seq_comissao_benef 
	and  	e.nr_seq_comissao = nr_seq_comissao_p 
	and  	(a.nr_seq_grupo_item IS NOT NULL AND a.nr_seq_grupo_item::text <> '') 
	group by 
		b.nr_sequencia, 
		a.cd_procedimento, 
		a.cd_material, 
		a.ie_origem_proced;
		
BEGIN 
 
/* obter se será considerado estabelecimento no parâmetro de compras */
 
select	coalesce(max(ie_estab_serie_nf),'N') 
into STRICT	ie_estab_serie_nf_w 
from	parametro_compras 
where	cd_estabelecimento = cd_estabelecimento_p;
 
select	max(cd_cgc) 
into STRICT	cd_cgc_emitente_w 
from	estabelecimento 
where	cd_estabelecimento = cd_estabelecimento_p;
 
select	nr_seq_canal_venda, 
	vl_comissao_canal 
into STRICT	nr_seq_canal_venda_w, 
	vl_comissao_canal_w 
from	pls_comissao 
where	nr_sequencia = nr_seq_comissao_p;
 
select	max(cd_condicao_pagamento) 
into STRICT	cd_condicao_pagamento_w 
from	pls_vendedor_regra_pag 
where	nr_seq_vendedor	= nr_seq_canal_venda_w 
and	vl_comissao_canal_w between coalesce(vl_comissao_inicial, vl_comissao_canal_w) and coalesce(vl_comissao_final, vl_comissao_canal_w);
 
if (coalesce(cd_condicao_pagamento_w,0) = 0) then 
	select	pls_obter_dados_vendedor(nr_seq_canal_venda_w, 'N') 
	into STRICT	nm_canal_venda_w 
	;
 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(328648, 'NR_SEQ_CANAL_VENDA=' || nr_seq_canal_venda_w || ';NM_CANAL_VENDA=' || nm_canal_venda_w);
	-- Mensagem: Não foi informada a condição de pagamento do canal de vendas NR_SEQ_CANAL_VENDA - NM_CANAL_VENDA! Favor verificar as regras de parcelamento do mesmo. 
end if;
 
open C01;
loop 
fetch C01 into	 
	nr_seq_comis_nf_w, 
	cd_operacao_nf_w, 
	cd_natureza_operacao_w, 
	nr_seq_classif_fiscal_w, 
	cd_serie_nf_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	null;
	end;
end loop;
close C01;
 
if (coalesce(nr_seq_comis_nf_w,0) = 0) then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(328701);
	-- Mensagem: Não foi encontrada uma regra de nota fiscal vigente! Favor verificar. 
end if;
	 
select	nextval('nota_fiscal_seq') 
into STRICT	nr_seq_nota_fiscal_w
;	
	 
select	coalesce(max(somente_numero(nr_ultima_nf)), nr_seq_nota_fiscal_w) + 1 
into STRICT	nr_nota_fiscal_w 
from	serie_nota_fiscal 
where	cd_serie_nf 		= cd_serie_nf_w 
and	cd_estabelecimento 	= cd_estabelecimento_p;
 
select	coalesce(max(nr_sequencia_nf),0) + 1 
into STRICT	nr_sequencia_nf_w 
from	nota_fiscal 
where	nr_nota_fiscal	= nr_nota_fiscal_w;
	 
vl_mercadoria_w		:= vl_comissao_canal_w;
vl_total_nota_w		:= vl_comissao_canal_w;
 
insert into nota_fiscal(	nr_sequencia, cd_estabelecimento, cd_cgc_emitente, cd_serie_nf, 
			nr_nota_fiscal, nr_sequencia_nf, cd_operacao_nf, dt_emissao, dt_entrada_saida, ie_acao_nf, ie_emissao_nf, 
			ie_tipo_frete, vl_mercadoria, vl_total_nota, qt_peso_bruto, qt_peso_liquido, dt_atualizacao, nm_usuario, 
			ie_tipo_nota, cd_condicao_pagamento, cd_natureza_operacao, nr_seq_classif_fiscal, ds_observacao, vl_ipi, 
			vl_descontos, vl_frete, vl_seguro, vl_despesa_acessoria, cd_pessoa_fisica, cd_cgc, 
			nr_seq_lote_res_pls, ie_situacao, nr_lote_contabil, ie_entregue_bloqueto) 
	values (	 
			nr_seq_nota_fiscal_w, cd_estabelecimento_p, obter_cgc_estabelecimento(cd_estabelecimento_p), cd_serie_nf_w, 
			nr_nota_fiscal_w, nr_sequencia_nf_w, cd_operacao_nf_w, clock_timestamp(), clock_timestamp(), '1', '0',  
			'0', vl_mercadoria_w, vl_total_nota_w, 0, 0, clock_timestamp(), nm_usuario_p, 
			'EN', cd_condicao_pagamento_w, cd_natureza_operacao_w, nr_seq_classif_fiscal_w, null, 0, 
			0, 0, 0, 0, cd_pf_vendedor_p, cd_cgc_vendedor_p, 
			null, '1', 0, 'N');
			 
select	sum(vl_comissao_benef)	 
into STRICT	vl_comissao_benef_w 
from	pls_comissao_beneficiario 
where	nr_seq_comissao = nr_seq_comissao_p;
 
ie_valor_divergente_w := 'N';
 
if (vl_comissao_benef_w <> vl_comissao_canal_w) then 
	ie_valor_divergente_w := 'S';
end if;
			 
open C02;
loop 
fetch C02 into	 
	ie_tipo_item_w, 
	vl_comissao_item_w, 
	qt_item_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin 
	 
	SELECT * FROM pls_obter_tipo_item_nf_mens(ie_tipo_item_w, null, cd_estabelecimento_p, cd_procedimento_w, ie_origem_proced_w, cd_material_w, nr_seq_grupo_item_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w, cd_material_w, nr_seq_grupo_item_w;
 
	if	((coalesce(cd_procedimento_w::text, '') = '') or (coalesce(ie_origem_proced_w::text, '') = '')) and (coalesce(cd_material_w::text, '') = '') and (coalesce(nr_seq_grupo_item_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(328716, 'DS_ITEM='||substr(obter_valor_dominio(1930,ie_tipo_item_w),1,100));
		/* Mensagem: 	Falta cadastrar o procedimento ou material a ser lançado na nota para o tipo de item "DS_ITEM". 
				Cadastros gerais do Tasy (Shift+F11) -> Plano de Saúde -> OPS - Mensalidades -> Itens de mensalidade X Nota fiscal. */
			 
	end if;
	 
	if (ie_valor_divergente_w = 'S') then 
		vl_comissao_item_w := (vl_comissao_item_w * vl_comissao_canal_w) / vl_comissao_benef_w;
	end if;
	 
	begin	 
	vl_unitario_item_nf_w := vl_comissao_item_w / qt_item_w;
	exception 
	when others then 
		vl_unitario_item_nf_w := vl_unitario_item_nf_w;	
	end;
	 
	if (coalesce(nr_seq_grupo_item_w::text, '') = '') then 
		select	coalesce(max(nr_item_nf),0) + 1 
		into STRICT	nr_item_nf_w 
		from	nota_fiscal_item 
		where	nr_sequencia = nr_seq_nota_fiscal_w;
			 
		insert into nota_fiscal_item(	nr_sequencia, cd_estabelecimento, cd_cgc_emitente, cd_serie_nf, 
					nr_nota_fiscal, nr_sequencia_nf, nr_item_nf, cd_natureza_operacao, qt_item_nf, vl_unitario_item_nf, 
					vl_total_item_nf, vl_liquido, vl_frete, vl_desconto, vl_despesa_acessoria, vl_desconto_rateio, 
					vl_seguro, nm_usuario, dt_atualizacao, ds_complemento, cd_procedimento, ie_origem_proced, nr_seq_conta_financ, 
					cd_material, cd_conta_contabil) 
			values (	 
					nr_seq_nota_fiscal_w, cd_estabelecimento_p, obter_cgc_estabelecimento(cd_estabelecimento_p), cd_serie_nf_w, 
					nr_nota_fiscal_w, nr_sequencia_nf_w, nr_item_nf_w, cd_natureza_operacao_w, qt_item_w, vl_unitario_item_nf_w, 
					vl_comissao_item_w, vl_comissao_item_w, 0, 0, 0, 0, 
					0, nm_usuario_p, clock_timestamp(), null, cd_procedimento_w, ie_origem_proced_w, null, 
					cd_material_w, null);
	end if;
	end;
end loop;
close C02;
 
for r_c03_w in c03 loop 
	begin 
	select	coalesce(max(nr_item_nf),0) + 1 
	into STRICT	nr_item_nf_ww 
	from	nota_fiscal_item 
	where	nr_sequencia = nr_seq_nota_fiscal_w;
	 
	begin	 
	vl_unitario_item_nf_w := r_c03_w.vl_comissao / r_c03_w.qt_item;
	exception 
	when others then 
		vl_unitario_item_nf_w := 0;	
	end;
	 
	insert into nota_fiscal_item(	nr_sequencia, cd_estabelecimento, cd_cgc_emitente, cd_serie_nf, 
			nr_nota_fiscal, nr_sequencia_nf, nr_item_nf, cd_natureza_operacao, qt_item_nf, vl_unitario_item_nf, 
			vl_total_item_nf, vl_liquido, vl_frete, vl_desconto, vl_despesa_acessoria, vl_desconto_rateio, 
			vl_seguro, nm_usuario, dt_atualizacao, ds_complemento, cd_procedimento, ie_origem_proced, nr_seq_conta_financ, 
			cd_material, cd_conta_contabil) 
	values (	 
			nr_seq_nota_fiscal_w, cd_estabelecimento_p, obter_cgc_estabelecimento(cd_estabelecimento_p), cd_serie_nf_w, 
			nr_nota_fiscal_w, nr_sequencia_nf_w, nr_item_nf_ww, cd_natureza_operacao_w, r_c03_w.qt_item, coalesce(vl_unitario_item_nf_w, 0), 
			r_c03_w.vl_comissao, r_c03_w.vl_comissao, 0, 0, 0, 0, 
			0, nm_usuario_p, clock_timestamp(), null, r_c03_w.cd_procedimento, r_c03_w.ie_origem_proced, null, 
			r_c03_w.cd_material, null);
		 
	end;
end loop;
 
if (nr_seq_nota_fiscal_w IS NOT NULL AND nr_seq_nota_fiscal_w::text <> '') then 
	 
	CALL gerar_imposto_nf(nr_seq_nota_fiscal_w, nm_usuario_p, null, null);
	CALL atualiza_total_nota_fiscal(nr_seq_nota_fiscal_w, nm_usuario_p);
	 
	select	max(ie_forma_pagamento) 
	into STRICT	ie_forma_pagamento_w 
	from	condicao_pagamento 
	where	cd_condicao_pagamento = cd_condicao_pagamento_w;
	 
	/* Conforme vencimentos */
 
	if (ie_forma_pagamento_w = 10) then 
		select	coalesce(vl_total_nota,0) 
		into STRICT	vl_liquido_nota_w 
		from	nota_fiscal 
		where	nr_sequencia = nr_seq_nota_fiscal_w;
		 
		insert into nota_fiscal_venc(	nr_sequencia, nm_usuario, dt_atualizacao, cd_estabelecimento, cd_cgc_emitente, 
					cd_serie_nf, nr_nota_fiscal, nr_sequencia_nf, dt_vencimento, vl_vencimento, ie_origem) 
			values (	 
					nr_seq_nota_fiscal_w, nm_usuario_p, clock_timestamp(), cd_estabelecimento_p, obter_cgc_estabelecimento(cd_estabelecimento_p), 
					cd_serie_nf_w, nr_nota_fiscal_w, 1, dt_vencimento_p, vl_liquido_nota_w,'N');
	else 
		CALL gerar_nota_fiscal_venc(nr_seq_nota_fiscal_w, dt_vencimento_p);
	end if;
	 
	/* Locar a tabela e obter o numero da nota fiscal */
 
	lock table serie_nota_fiscal in exclusive mode;
	select	coalesce(nr_ultima_nf,0) + 1 
	into STRICT	nr_nota_fiscal_w 
	from	serie_nota_fiscal 
	where	cd_serie_nf 		= cd_serie_nf_w 
	and	cd_estabelecimento 	= cd_estabelecimento_p;
	 
	if (coalesce(ie_estab_serie_nf_w,'N') = 'S') then 
		update	serie_nota_fiscal 
		set	nr_ultima_nf 		= nr_nota_fiscal_w 
		where	cd_serie_nf 		= cd_serie_nf_w 
		and	cd_estabelecimento in (SELECT	z.cd_estabelecimento 
						from	estabelecimento z 
						where	z.cd_cgc = cd_cgc_emitente_w);
	else 
		update	serie_nota_fiscal 
		set	nr_ultima_nf 		= nr_nota_fiscal_w 
		where	cd_serie_nf 		= cd_serie_nf_w	 
		and	cd_estabelecimento 	= cd_estabelecimento_p;	
	end if;
		 
	update	nota_fiscal 
	set	dt_atualizacao_estoque = clock_timestamp() 
	where	nr_sequencia = nr_seq_nota_fiscal_w;
 
end if;
 
update	titulo_pagar 
set	nr_seq_nota_fiscal = nr_seq_nota_fiscal_w 
where	nr_titulo = nr_titulo_pagar_p;
 
update	pls_comissao_titulo 
set	nr_seq_nota_fiscal = nr_seq_nota_fiscal_w, 
	nr_nota_fiscal 	= nr_nota_fiscal_w 
where	nr_sequencia = nr_seq_comis_titulo_p;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_nota_fisc_comissao ( nr_seq_comissao_p pls_comissao.nr_sequencia%type, nr_seq_comis_titulo_p pls_comissao_titulo.nr_sequencia%type, nr_titulo_pagar_p titulo_pagar.nr_titulo%type, dt_vencimento_p pls_comissao_titulo.dt_vencimento%type, cd_pf_vendedor_p pls_vendedor.cd_pessoa_fisica%type, cd_cgc_vendedor_p pls_vendedor.cd_cgc%type, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

