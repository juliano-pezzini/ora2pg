-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_liberar_item_automatic ( nr_seq_conta_p pls_conta_v.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc_v.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat_v.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


ie_tipo_conta_w			varchar(255);
cd_guia_w			varchar(20);
ie_valor_informado_w		varchar(10);
ie_status_conta_w			varchar(5);
ie_vl_apresentado_sistema_w		varchar(1)	:= 'N';
ie_liberar_w			varchar(1)	:= 'N';
ie_autorizado_w			varchar(1);
ie_regra_liberacao_w		varchar(1);
ie_atualiza_apresentado_w		varchar(1);
ie_partic_zero_w			varchar(1);
ie_valor_base_w			varchar(1);
ie_analise_cm_nova_w		varchar(1);
vl_taxa_servico_imp_w		double precision;
vl_taxa_co_imp_w			double precision;
vl_taxa_material_imp_w		double precision;
vl_calculado_w			double precision;
vl_liberado_w			pls_conta_proc.vl_unitario%type;

vl_apresentado_w			double precision;
vl_unitario_apres_w			pls_conta_mat.vl_unitario%type;
vl_liberado_regra_w			double precision	:= 0;
vl_pag_medico_conta_w		double precision;
vl_total_procedimento_w		double precision	:= 0;
vl_prestador_w			double precision	:= 0;
vl_glosa_w			double precision	:= 0.00;
vl_calculado_partic_w		double precision;
vl_procedimento_w			double precision	:= 0;
vl_calculado_hi_w			double precision;
vl_calculado_material_w		double precision;
vl_calculado_co_w			double precision;
vl_liberado_hi_w			double precision;
vl_liberado_material_w		double precision;
vl_liberado_co_w			double precision;
vl_glosa_hi_w			double precision;
vl_glosa_material_w			double precision;
vl_glosa_co_w			double precision;
vl_tolerancia_1705_w		double precision;
vl_tolerancia_1706_w		double precision;
vl_procedimento_ptu_imp_w		double precision	:= 0;
vl_co_ptu_imp_w			double precision	:= 0;
vl_material_ptu_imp_w		double precision	:= 0;
vl_base_hi_w			double precision	:= 0;
vl_calc_hi_util_w			double precision	:= 0;
vl_calc_co_util_w			double precision	:= 0;
vl_calc_mat_util_w			double precision	:= 0;
vl_lib_taxa_servico_w		double precision	:= 0;
vl_lib_taxa_material_w		double precision	:= 0;
vl_lib_taxa_co_w			double precision	:= 0;
vl_glosa_taxa_servico_w		double precision	:= 0;
vl_glosa_taxa_material_w		double precision	:= 0;
vl_glosa_taxa_co_w		double precision	:= 0;
vl_base_mat_w			double precision;
vl_base_co_w			double precision;
vl_calc_taxa_servico_w		double precision    := 0;
vl_calc_taxa_material_w		double precision    := 0;
vl_calc_taxa_co_w			double precision    := 0;
qt_apresentado_w			double precision;
nr_seq_conta_w			bigint;
qt_total_proc_w			bigint;
qt_total_mat_w			bigint;
nr_seq_proc_w			bigint;
nr_seq_mat_w			bigint;
qt_liberado_proc_w			bigint;
qt_liberado_mat_w			bigint;
qt_glosa_conta_w			bigint;
nr_seq_regra_valor_w		bigint;
qt_glosa_w			bigint	:= 0;
qt_glosa_valor_zerado_w		bigint	:= 0;
qt_oc_parcial_item_w		bigint;
qt_oc_total_item_w			bigint;
cd_procedimento_w		procedimento.cd_procedimento%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;
nr_seq_segurado_w		bigint;
nr_seq_guia_w			bigint;
cd_estabelecimento_w		bigint;
qt_autorizado_w			bigint;
nr_seq_material_w		bigint;
nr_seq_pgto_aut_w		bigint;
nr_seq_regra_qtde_exec_w	bigint;
nr_seq_pos_stab_w		bigint;
nr_seq_proc_partic_w		bigint;
qt_glosa_partic_w		bigint;
qt_partic_conta_w		bigint;
qt_partic_cancelado_w		bigint;
ie_permite_glosa_parcial_w	varchar(1);
qt_liberada_w			double precision;
qt_autorizada_w			double precision;
qt_ocorrencia_w			bigint;
vl_dif_w			double precision;
vl_taxa_servico_w		double precision;
vl_taxa_co_w			double precision;
vl_taxa_material_w		double precision;
ie_tolerancia_w			varchar(1);
qt_glosa_tot_w			bigint;
ie_libera_item_sem_glosa_w	varchar(1);
pr_liberacao_w			double precision;
pr_lib_taxas_w			double precision;
vl_tot_partic_w			pls_proc_participante.vl_participante%type;
vl_dif_partic_w			pls_proc_participante.vl_participante%type;
dados_intercambio_w		pls_cta_alt_valor_pck.dados_vl_tx_libe;
ie_controle_coparticipacao_w	varchar(1);
ie_geracao_pos_estabelecido_w	pls_parametros.ie_geracao_pos_estabelecido%type;
ds_sql_qt_glosa_w		varchar(2000);
ds_sql_qt_tot_glosa_w		varchar(2000);
ds_fil_qt_glosa_w		varchar(500);
ie_tipo_valor_w			pls_regra_valor_conta.ie_tipo_valor%type;
tx_intercambio_imp_w		pls_conta_proc_v.tx_intercambio_imp%type;
tx_intercambio_w		pls_conta_proc_v.tx_intercambio%type;
ie_ocorrencia_w			pls_controle_estab.ie_ocorrencia%type := 'N';
ie_permite_glosa_parcial_val_w	pls_oc_cta_tipo_validacao.ie_permite_glosa_parcial%type;
qt_excedido_w			pls_ocorrencia_benef.qt_excedido%type;
vl_liberado_partic_w		pls_proc_participante.vl_participante%type;
vl_glosa_partic_w		pls_proc_participante.vl_glosa%type;
ie_glosou_parcial_w		varchar(1);
nr_seq_oc_cta_comb_w		pls_ocorrencia_benef.nr_seq_oc_cta_comb%type;
qt_tot_liberado_w		double precision;
nr_seq_analise_w		pls_conta.nr_seq_analise%type;
nr_seq_validacao_w		bigint;
qt_lib_validacao_w		double precision;
ie_tp_desp_conta_proc_w	pls_conta_proc.ie_tipo_despesa%type;
ie_tp_desp_conta_mat_w	pls_conta_mat.ie_tipo_despesa%type;

ie_origem_conta_w		pls_conta.ie_origem_conta%type;
ie_aviso_a520_proc_w		pls_conta_proc_regra.ie_a520%type;
ie_aviso_a520_mat_w		pls_conta_mat_regra.ie_a520%type;
ie_a500_glosado_proc_w		varchar(2);
ie_a500_glosado_mat_w		varchar(2);

/* Rotina utilizada para o sistema liberar automaticamente procedimentos e materiais quando:

	Primeiramente nao pode existir glosas no item (com excecao da 1705, 1706, 1707 e 9919');
	
	O valor apresentado for igual ao valor calculado ou 
	O valor apresentado for 0 e o valor calculado for maior do que 0
		
	Se existir as glosas 1705 ou 1706, e existir regra de liberacao de valores (OPS - Cadastro de Regras / OPS - Contas medicas / Liberacao de valores na conta 
	
	Existir somente ocorrencias do tipo liberacao "Parcial" no item nao podendo haver nenhuma do tipo "Total".(por enquanto nao utilizado)
*/
C01 CURSOR FOR
	SELECT	nr_seq_regra_qtde_exec,
		a.nr_sequencia,
		coalesce(a.vl_procedimento,0),
		coalesce(a.vl_procedimento_imp,0),
		coalesce(a.qt_procedimento_imp,0),
		coalesce(a.vl_liberado_regra,0),
		a.ie_valor_informado,
		coalesce(a.vl_pag_medico_conta,0),
		a.nr_seq_regra_valor,
		coalesce(a.vl_total_procedimento,0),
		coalesce(a.vl_prestador,0),
		a.cd_procedimento,
		a.ie_origem_proced,
		a.qt_autorizado,
		a.nr_seq_pgto_aut,
		coalesce(a.vl_procedimento,0),
		coalesce(a.vl_calc_hi_util,0),
		coalesce(a.vl_calc_mat_util,0),
		coalesce(a.vl_calc_co_util,0),
		coalesce(ie_valor_base,2),
		coalesce(vl_procedimento_ptu_imp,0),
		coalesce(vl_co_ptu_imp,0),
		coalesce(vl_material_ptu_imp,0),
		coalesce(vl_calc_hi_util,0),
		coalesce(vl_calc_co_util,0),
		coalesce(vl_calc_mat_util,0),
		coalesce(vl_taxa_servico_imp,0),
		coalesce(vl_taxa_co_imp,0),
		coalesce(vl_taxa_material_imp,0),
		coalesce(a.qt_procedimento_imp,0),
		coalesce(a.vl_taxa_servico,0),
		coalesce(a.vl_taxa_co,0),
		coalesce(a.vl_taxa_material,0),
		a.tx_intercambio_imp,
		a.tx_intercambio,
		a.ie_tipo_despesa,
		(	SELECT	coalesce(max(x.ie_a520), 'N')
			from	pls_conta_proc_regra	x
			where	x.nr_sequencia		= a.nr_sequencia) ie_a520
	from	pls_conta_proc	a
	where	((a.nr_seq_conta	= nr_seq_conta_p) or (a.nr_sequencia		= nr_seq_conta_proc_p))
	and (a.ie_status not in ('M','D'))
	and	(ie_analise_cm_nova_w   = 'S' and ((a.ie_status != 'L') or (ie_status_pagamento = 'I')))
	
union all

	select	nr_seq_regra_qtde_exec,
		a.nr_sequencia,
		coalesce(a.vl_procedimento,0),
		coalesce(a.vl_procedimento_imp,0),
		coalesce(a.qt_procedimento_imp,0),
		coalesce(a.vl_liberado_regra,0),
		a.ie_valor_informado,
		coalesce(a.vl_pag_medico_conta,0),
		a.nr_seq_regra_valor,
		coalesce(a.vl_total_procedimento,0),
		coalesce(a.vl_prestador,0),
		a.cd_procedimento,
		a.ie_origem_proced,
		a.qt_autorizado,
		a.nr_seq_pgto_aut,
		coalesce(a.vl_procedimento,0),
		coalesce(a.vl_calc_hi_util,0),
		coalesce(a.vl_calc_mat_util,0),
		coalesce(a.vl_calc_co_util,0),
		coalesce(ie_valor_base,2),
		coalesce(vl_procedimento_ptu_imp,0),
		coalesce(vl_co_ptu_imp,0),
		coalesce(vl_material_ptu_imp,0),
		coalesce(vl_calc_hi_util,0),
		coalesce(vl_calc_co_util,0),
		coalesce(vl_calc_mat_util,0),
		coalesce(vl_taxa_servico_imp,0),
		coalesce(vl_taxa_co_imp,0),
		coalesce(vl_taxa_material_imp,0),
		coalesce(a.qt_procedimento_imp,0),
		coalesce(a.vl_taxa_servico,0),
		coalesce(a.vl_taxa_co,0),
		coalesce(a.vl_taxa_material,0),
		a.tx_intercambio_imp,
		a.tx_intercambio,
		a.ie_tipo_despesa,
		(	select	coalesce(max(x.ie_a520), 'N')
			from	pls_conta_proc_regra	x
			where	x.nr_sequencia		= a.nr_sequencia) ie_a520
	from	pls_conta_proc	a
	where	((a.nr_seq_conta	= nr_seq_conta_p) or (a.nr_sequencia		= nr_seq_conta_proc_p))
	and	ie_analise_cm_nova_w 	= 'N'
	and	a.ie_status 		not in ('M','D','A')
	
union all

	select	nr_seq_regra_qtde_exec,
		a.nr_sequencia,
		coalesce(a.vl_procedimento,0),
		coalesce(a.vl_procedimento_imp,0),
		coalesce(a.qt_procedimento_imp,0),
		coalesce(a.vl_liberado_regra,0),
		a.ie_valor_informado,
		coalesce(a.vl_pag_medico_conta,0),
		a.nr_seq_regra_valor,
		coalesce(a.vl_total_procedimento,0),
		coalesce(a.vl_prestador,0),
		a.cd_procedimento,
		a.ie_origem_proced,
		a.qt_autorizado,
		a.nr_seq_pgto_aut,
		coalesce(a.vl_procedimento,0),
		coalesce(a.vl_calc_hi_util,0),
		coalesce(a.vl_calc_mat_util,0),
		coalesce(a.vl_calc_co_util,0),
		coalesce(ie_valor_base,2),
		coalesce(vl_procedimento_ptu_imp,0),
		coalesce(vl_co_ptu_imp,0),
		coalesce(vl_material_ptu_imp,0),
		coalesce(vl_calc_hi_util,0),
		coalesce(vl_calc_co_util,0),
		coalesce(vl_calc_mat_util,0),
		coalesce(vl_taxa_servico_imp,0),
		coalesce(vl_taxa_co_imp,0),
		coalesce(vl_taxa_material_imp,0),
		coalesce(a.qt_procedimento_imp,0),
		coalesce(a.vl_taxa_servico,0),
		coalesce(a.vl_taxa_co,0),
		coalesce(a.vl_taxa_material,0),
		a.tx_intercambio_imp,
		a.tx_intercambio,
		a.ie_tipo_despesa,
		(	select	coalesce(max(x.ie_a520), 'N')
			from	pls_conta_proc_regra	x
			where	x.nr_sequencia		= a.nr_sequencia) ie_a520
	from	pls_conta_proc	a
	where	((a.nr_seq_conta	= nr_seq_conta_p) or (a.nr_sequencia		= nr_seq_conta_proc_p))
	and	ie_analise_cm_nova_w  	= 'S'
	and	a.ie_status 		= 'L'
	and	a.ie_status_pagamento 	= 'G'
	and	not exists	(select 1
				from 	pls_conta_glosa 	g
				where	((g.nr_seq_conta_proc	= a.nr_sequencia) or (g.nr_seq_conta		= a.nr_seq_conta and coalesce(g.nr_seq_conta_proc::text, '') = ''))
				and	coalesce(g.nr_seq_conta_mat::text, '') = ''
				and	g.ie_situacao		= 'A');

C02 CURSOR FOR
	SELECT 	nr_sequencia,
		coalesce(vl_material,0),
		coalesce(vl_material_imp,0),
		coalesce(vl_unitario_imp,0),
		coalesce(qt_material_imp,0),
		ie_valor_informado,
		coalesce(vl_liberado_regra,0),
		nr_seq_regra_valor,
		nr_seq_material,
		coalesce(qt_autorizado,0),
		a.nr_seq_pgto_aut,
		coalesce(a.vl_taxa_material_imp,0),
		coalesce(a.vl_taxa_material,0),
		a.ie_valor_base,
		a.ie_tipo_despesa,
		(	SELECT	coalesce(max(x.ie_a520), 'N')
			from	pls_conta_mat_regra	x
			where	x.nr_sequencia		= a.nr_sequencia) ie_a520
	from	pls_conta_mat a
	where	((a.nr_seq_conta	= nr_seq_conta_p) or (a.nr_sequencia		= nr_seq_conta_mat_p))
	and	ie_analise_cm_nova_w 	= 'N'
	and	a.ie_status 		not in ('M','D')
	
union all

	select 	nr_sequencia,
		coalesce(vl_material,0),
		coalesce(vl_material_imp,0),
		coalesce(vl_unitario_imp,0),
		coalesce(qt_material_imp,0),
		ie_valor_informado,
		coalesce(vl_liberado_regra,0),
		nr_seq_regra_valor,
		nr_seq_material,
		coalesce(qt_autorizado,0),
		a.nr_seq_pgto_aut,
		coalesce(a.vl_taxa_material_imp,0),
		coalesce(a.vl_taxa_material,0),
		a.ie_valor_base,
		a.ie_tipo_despesa,
		(	select	coalesce(max(x.ie_a520), 'N')
			from	pls_conta_mat_regra	x
			where	x.nr_sequencia		= a.nr_sequencia) ie_a520
	from	pls_conta_mat a
	where	((a.nr_seq_conta	= nr_seq_conta_p) or (a.nr_sequencia		= nr_seq_conta_mat_p))
	and	ie_analise_cm_nova_w 	= 'S' 
	and 	((a.ie_status <> 'L') or (ie_status_pagamento = 'I'))
	and (a.ie_status not in ('M','D'))
	
union all

	select 	nr_sequencia,
		coalesce(vl_material,0),
		coalesce(vl_material_imp,0),
		coalesce(vl_unitario_imp,0),
		coalesce(qt_material_imp,0),
		ie_valor_informado,
		coalesce(vl_liberado_regra,0),
		nr_seq_regra_valor,
		nr_seq_material,
		coalesce(qt_autorizado,0),
		a.nr_seq_pgto_aut,
		coalesce(a.vl_taxa_material_imp,0),
		coalesce(a.vl_taxa_material,0),
		a.ie_valor_base,
		a.ie_tipo_despesa,
		(	select	coalesce(max(x.ie_a520), 'N')
			from	pls_conta_mat_regra	x
			where	x.nr_sequencia		= a.nr_sequencia) ie_a520
	from	pls_conta_mat a
	where	((a.nr_seq_conta	= nr_seq_conta_p) or (a.nr_sequencia		= nr_seq_conta_mat_p))
	and	ie_analise_cm_nova_w 	= 'S' 
	and 	a.ie_status 		= 'L'  
	and	a.ie_status_pagamento 	= 'G'
	and	not exists	(select 1
				from 	pls_conta_glosa 	g
				where	((g.nr_seq_conta_mat	= a.nr_sequencia) or (g.nr_seq_conta		= a.nr_seq_conta and coalesce(g.nr_seq_conta_mat::text, '') = ''))
				and	coalesce(g.nr_seq_conta_proc::text, '') = ''
				and	g.ie_situacao		= 'A');
				
C03 CURSOR(nr_seq_conta_proc_pc	pls_conta_proc.nr_sequencia%type) FOR
	SELECT	coalesce(vl_calculado,0) vl_calculado,
		coalesce(vl_apresentado,0) vl_apresentado,
		nr_sequencia
	from	pls_proc_participante
	where	nr_seq_conta_proc = nr_seq_conta_proc_pc
	and	coalesce(ie_status,'U') <> 'C'
	and	coalesce(ie_gerada_cta_honorario,'N') <> 'S';
	
BEGIN
ie_ocorrencia_w := pls_obter_se_controle_estab('GO');

if (coalesce(nr_seq_conta_p,0) > 0) then
	select	coalesce(cd_guia_referencia, cd_guia),
		nr_seq_segurado,
		cd_estabelecimento,
		ie_tipo_conta,
		nr_seq_analise,
		nr_seq_guia,
		ie_origem_conta
	into STRICT	cd_guia_w,
		nr_seq_segurado_w,
		cd_estabelecimento_w,
		ie_tipo_conta_w,
		nr_seq_analise_w,
		nr_seq_guia_w,
		ie_origem_conta_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	
	nr_seq_conta_w	:= nr_seq_conta_p;
elsif (coalesce(nr_seq_conta_proc_p,0) > 0) then

	select	conta.cd_guia_ok,
		conta.nr_seq_segurado,
		conta.cd_estabelecimento,
		conta.ie_tipo_conta,
		conta.nr_sequencia,
		conta.nr_seq_analise,
		conta.nr_seq_guia,
		conta.ie_origem_conta
	into STRICT	cd_guia_w,
		nr_seq_segurado_w,
		cd_estabelecimento_w,
		ie_tipo_conta_w,
		nr_seq_conta_w,
		nr_seq_analise_w,
		nr_seq_guia_w,
		ie_origem_conta_w
	from	pls_conta	conta,
		pls_conta_proc	proc
	where	conta.nr_sequencia	= proc.nr_seq_conta
	and	proc.nr_sequencia	= nr_seq_conta_proc_p;
-- Se for para liberacao de material
elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then
	select	conta.cd_guia_ok,
		conta.nr_seq_segurado,
		conta.cd_estabelecimento,
		conta.ie_tipo_conta,
		conta.nr_sequencia,
		conta.nr_seq_analise,
		conta.nr_seq_guia,
		conta.ie_origem_conta
	into STRICT	cd_guia_w,
		nr_seq_segurado_w,
		cd_estabelecimento_w,
		ie_tipo_conta_w,
		nr_seq_conta_w,
		nr_seq_analise_w,
		nr_seq_guia_w,
		ie_origem_conta_w
	from	pls_conta	conta,
		pls_conta_mat	mat
	where	conta.nr_sequencia	= mat.nr_seq_conta
	and	mat.nr_sequencia	= nr_seq_conta_mat_p;
-- Se nao tiver informacao do item nao ha o que fazer e aborta a rotina.
else
	return;
end if;

select	count(1)
into STRICT	qt_total_proc_w
from	pls_conta_proc
where	nr_seq_conta	= nr_seq_conta_w
and	ie_status 	not in ('M','D');

select	count(1)
into STRICT	qt_total_mat_w
from	pls_conta_mat
where	nr_seq_conta	= nr_seq_conta_w
and	ie_status 	not in ('M','D');

qt_liberado_proc_w	:= 0;
qt_liberado_mat_w	:= 0;
--#DiogoAqui falar com Lepinski sobre o parametro ie_controle_coparticipacao sobre a necessidade ou nao de restringir pelo cd_estabelecimento

-- busca parametro para decidir qual caminho ira buscar (atual ou o que esta em testes)
select	coalesce(ie_atualizar_valor_apresent,'N'),
	coalesce(ie_analise_cm_nova,'N'),
	coalesce(ie_ocor_glosa_parcial,'N'),
	coalesce(ie_libera_item_sem_glosa,'N'),
	ie_controle_coparticipacao,
	ie_geracao_pos_estabelecido
into STRICT	ie_atualiza_apresentado_w,
	ie_analise_cm_nova_w,
	ie_permite_glosa_parcial_w,
	ie_libera_item_sem_glosa_w,
	ie_controle_coparticipacao_w,
	ie_geracao_pos_estabelecido_w
from	table(pls_parametros_pck.f_retorna_param(cd_estabelecimento_w));

ie_controle_coparticipacao_w	:= coalesce(ie_controle_coparticipacao_w,'N');

begin
	if (ie_ocorrencia_w = 'N') then
		select	a.vl_tolerancia_glosa
		into STRICT	vl_tolerancia_1705_w
		from	pls_regra_lanc_glosa a,
			tiss_motivo_glosa b
		where	a.nr_seq_motivo_glosa = b.nr_sequencia
		and	a.ie_situacao		= 'A'
		and	b.cd_motivo_tiss	= '1705';
	else
		select	a.vl_tolerancia_glosa
		into STRICT	vl_tolerancia_1705_w
		from	pls_regra_lanc_glosa a,
			tiss_motivo_glosa b
		where	a.nr_seq_motivo_glosa = b.nr_sequencia
		and	a.ie_situacao		= 'A'
		and	b.cd_motivo_tiss	= '1705'
		and	a.cd_estabelecimento	= cd_estabelecimento_w;
	end if;
exception
when others then
	vl_tolerancia_1705_w	:= 0;
end;

begin
	if (ie_ocorrencia_w = 'N') then
		select	max(a.vl_tolerancia_glosa)
		into STRICT	vl_tolerancia_1706_w
		from	pls_regra_lanc_glosa a,
			tiss_motivo_glosa b
		where	a.nr_seq_motivo_glosa	= b.nr_sequencia
		and	a.ie_situacao		= 'A'
		and	b.cd_motivo_tiss	= '1706';
	else
		select	max(a.vl_tolerancia_glosa)
		into STRICT	vl_tolerancia_1706_w
		from	pls_regra_lanc_glosa a,
			tiss_motivo_glosa b
		where	a.nr_seq_motivo_glosa	= b.nr_sequencia
		and	a.ie_situacao		= 'A'
		and	b.cd_motivo_tiss	= '1706'
		and	a.cd_estabelecimento	= cd_estabelecimento_w;
	end if;
exception
when others then
	vl_tolerancia_1706_w	:= 0;
end;

-- so filtra situacao ativa se for analise nova 

-- utilizado no select de contagem de glosas logo abaixo
if (ie_analise_cm_nova_w = 'S') then
	ds_fil_qt_glosa_w := ' and a.ie_situacao = ''A''' || pls_util_pck.enter_w;
end if;

ds_sql_qt_glosa_w :=
	'select	count(1)' || pls_util_pck.enter_w ||
	'from 	pls_conta_glosa a' || pls_util_pck.enter_w ||
	'where 	a.nr_seq_conta_proc = :nr_seq_proc_pc' || pls_util_pck.enter_w ||
	ds_fil_qt_glosa_w ||
	'and 	not exists	(select	1' || pls_util_pck.enter_w ||
	'			from   	tiss_motivo_glosa b' || pls_util_pck.enter_w ||
	'			where  	b.nr_sequencia = a.nr_seq_motivo_glosa' || pls_util_pck.enter_w ||
	'			and    	b.cd_motivo_tiss in (''1705'', ''1706'', ''1707''))' || pls_util_pck.enter_w ||
	'and 	not exists 	(select 1' || pls_util_pck.enter_w ||
	'			from   	pls_ocorrencia oc' || pls_util_pck.enter_w ||
	'			where  	oc.nr_seq_motivo_glosa = a.nr_seq_motivo_glosa' || pls_util_pck.enter_w ||
	'			and    	oc.ie_glosar_pagamento = ''N''' || pls_util_pck.enter_w ||
	'			and	((oc.ie_glosa 	= ''S'' ) or (a.nr_seq_ocorrencia = oc.nr_sequencia)))';
	
ds_sql_qt_tot_glosa_w :=
	'select	count(1)' || pls_util_pck.enter_w ||
	'from 	pls_conta_glosa a' || pls_util_pck.enter_w ||
	'where 	a.nr_seq_conta_proc = :nr_seq_proc_pc' || pls_util_pck.enter_w ||
	ds_fil_qt_glosa_w ||
	'and 	not exists 	(select 1' || pls_util_pck.enter_w ||
	'			from   	pls_ocorrencia oc' || pls_util_pck.enter_w ||
	'			where  	oc.nr_seq_motivo_glosa = a.nr_seq_motivo_glosa' || pls_util_pck.enter_w ||
	'			and    	oc.ie_glosar_pagamento = ''N''' || pls_util_pck.enter_w ||
	'			and	((oc.ie_glosa 	= ''S'' ) or (a.nr_seq_ocorrencia = oc.nr_sequencia))' || pls_util_pck.enter_w ||
	'			and	oc.ie_situacao 	= ''A'')';

open C01;
loop
fetch C01 into
	nr_seq_regra_qtde_exec_w,
	nr_seq_proc_w,
	vl_calculado_w,
	vl_apresentado_w,
	qt_apresentado_w,
	vl_liberado_regra_w,
	ie_valor_informado_w,
	vl_pag_medico_conta_w,
	nr_seq_regra_valor_w,
	vl_total_procedimento_w,
	vl_prestador_w,
	cd_procedimento_w,
	ie_origem_proced_w,
	qt_autorizado_w,
	nr_seq_pgto_aut_w,
	vl_procedimento_w,
	vl_calculado_hi_w,
	vl_calculado_material_w,
	vl_calculado_co_w,
	ie_valor_base_w,
	vl_procedimento_ptu_imp_w,
	vl_co_ptu_imp_w,
	vl_material_ptu_imp_w,
	vl_calc_hi_util_w,
	vl_calc_co_util_w,
	vl_calc_mat_util_w,
	vl_taxa_servico_imp_w,
	vl_taxa_co_imp_w,
	vl_taxa_material_imp_w,
	qt_liberada_w,
	vl_taxa_servico_w,
	vl_taxa_co_w,
	vl_taxa_material_w,
	tx_intercambio_imp_w,
	tx_intercambio_w,
	ie_tp_desp_conta_proc_w,
	ie_aviso_a520_proc_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ie_liberar_w		:= 'N';
	vl_glosa_w		:= 0;
	qt_glosa_w		:= 0;
	nr_seq_pos_stab_w	:= 0;
	ie_vl_apresentado_sistema_w	:= 'N';
	vl_total_procedimento_w		:= vl_procedimento_w;
	ie_tolerancia_w		:= 'N';
	ie_permite_glosa_parcial_val_w := 'N';
	qt_excedido_w		:= 0;
	ie_glosou_parcial_w	:= 'N';
	ie_a500_glosado_proc_w	:= pls_obter_se_a504_glosado(ie_aviso_a520_proc_w, ie_origem_conta_w, vl_apresentado_w);
	
	begin
		if (ie_ocorrencia_w = 'N') then
			select	max(a.vl_tolerancia_glosa)
			into STRICT	vl_tolerancia_1705_w
			from	pls_regra_lanc_glosa a,
				tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and	a.ie_situacao		= 'A'
			and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tp_desp_conta_proc_w))
			and	b.cd_motivo_tiss	= '1705';
		else
			select	max(a.vl_tolerancia_glosa)
			into STRICT	vl_tolerancia_1705_w
			from	pls_regra_lanc_glosa a,
				tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and	a.ie_situacao		= 'A'
			and		((coalesce(a.ie_tipo_despesa_proc::text, '') = '') or (a.ie_tipo_despesa_proc = ie_tp_desp_conta_proc_w))
			and	b.cd_motivo_tiss	= '1705'
			and	a.cd_estabelecimento	= cd_estabelecimento_w;
		end if;
	exception
	when others then
		vl_tolerancia_1705_w	:= 0;
	end;
	
	-- quantidade de glosas
	EXECUTE ds_sql_qt_glosa_w into STRICT qt_glosa_w using nr_seq_proc_w;
				
	-- Tratamento realizado para caso nao haja nenhuma glosa que incida sobre o item e exista valor calculado maior que 0 OS 538231 dgkorz
	EXECUTE ds_sql_qt_tot_glosa_w into STRICT qt_glosa_tot_w using nr_seq_proc_w;
	
	-- Nao pode existir glosas no item
	if (qt_glosa_w = 0) then
		select	count(1)
		into STRICT	qt_glosa_valor_zerado_w
		from	tiss_motivo_glosa	b,
			pls_conta_glosa		a
		where	a.nr_seq_motivo_glosa	= b.nr_sequencia
		and	a.nr_seq_conta_proc	= nr_seq_proc_w
		and	b.cd_motivo_tiss	= '1707'
		and	(((a.ie_situacao	= 'A') and (coalesce(ie_analise_cm_nova_w,'S') 	= 'S')) or (ie_analise_cm_nova_w	= 'N'))
		and	(a.nr_seq_proc_partic IS NOT NULL AND a.nr_seq_proc_partic::text <> '');
		
		select	max(ie_regra_liberacao),
			max(ie_tipo_valor)
		into STRICT	ie_regra_liberacao_w,
			ie_tipo_valor_w
		from	pls_regra_valor_conta
		where	nr_sequencia	= nr_seq_regra_valor_w;

		if (coalesce(qt_glosa_valor_zerado_w,0) > 0) then
			
			if (ie_regra_liberacao_w	= 3) then
				ie_liberar_w	:= 'S';
			end if;
		elsif (coalesce(nr_seq_regra_valor_w,0) > 0) then
			if (qt_glosa_tot_w 	= 0) and (vl_apresentado_w 	> 0) and
				((ie_tipo_valor_w	not in (2,3)) or (vl_apresentado_w > vl_total_procedimento_w)) and (ie_tipo_valor_w	not in (5,6)) then
				ie_tolerancia_w		:= 'S';
			end if;
			ie_liberar_w	:= 'S';
		elsif	((vl_apresentado_w = vl_total_procedimento_w AND vl_total_procedimento_w <> 0) or
			(vl_apresentado_w = 0 AND vl_total_procedimento_w > 0)) then
			ie_liberar_w	:= 'S';
		elsif	((((vl_apresentado_w = vl_total_procedimento_w) or
			((vl_apresentado_w < vl_total_procedimento_w)and
			((vl_tolerancia_1706_w + vl_apresentado_w) >= vl_total_procedimento_w ))or
			((vl_apresentado_w > vl_total_procedimento_w) and
			((vl_tolerancia_1705_w + vl_total_procedimento_w) >= vl_apresentado_w))) and (vl_total_procedimento_w <> 0)) or
			(vl_apresentado_w = 0 AND vl_total_procedimento_w > 0)) or
			(qt_glosa_tot_w	= 0 AND vl_apresentado_w	> 0) then
			ie_liberar_w	:= 'S';
			ie_tolerancia_w	:= 'S';
		elsif	((vl_apresentado_w = 0) and (vl_total_procedimento_w = 0) and (ie_permite_glosa_parcial_w = 'S')) then
			ie_liberar_w	:= 'S';
		end if;

	end if;	
	
	if	(( qt_glosa_tot_w = 0 ) and
		(( coalesce(vl_liberado_regra_w,0) > 0) or ( coalesce(vl_total_procedimento_w,0) > 0)) and (ie_liberar_w	= 'N')) or
		-- SEPARACAO PARA O A520
		(ie_a500_glosado_proc_w = 'S') then
		ie_liberar_w	:= 'S';
	elsif (ie_permite_glosa_parcial_w = 'S') and (qt_glosa_w = 1 ) and (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
		
		select	count(1)
		into STRICT	qt_ocorrencia_w
		from	pls_ocorrencia_regra	c,
			pls_ocorrencia		b,
			pls_ocorrencia_benef	a
		where	a.nr_seq_ocorrencia	= b.nr_sequencia
		and	c.nr_seq_ocorrencia	= b.nr_sequencia
		and	a.nr_seq_conta_proc	= nr_seq_proc_w
		and	((a.ie_situacao	= 'A' AND ie_analise_cm_nova_w 	= 'S') or (ie_analise_cm_nova_w 	= 'N'))
		and	c.ie_consiste_qtd_aut	= 'S'
		and	b.ie_auditoria_conta	= 'S';	
		
		if (qt_ocorrencia_w = 1 ) then
			qt_autorizada_w	:= pls_obter_dados_item_aut(nr_seq_guia_w, ie_origem_proced_w, cd_procedimento_w,null,'QA');														
			
			if (coalesce(qt_autorizada_w,0) > 0)	then
				qt_liberada_w := qt_autorizada_w;
				
				if (qt_liberada_w > 0 ) then
					select	count(1)
					into STRICT	qt_glosa_valor_zerado_w
					from	tiss_motivo_glosa	b,
						pls_conta_glosa		a
					where	a.nr_seq_motivo_glosa	= b.nr_sequencia
					and	a.nr_seq_conta_proc	= nr_seq_proc_w
					and	b.cd_motivo_tiss	= '1707'
					and	((a.ie_situacao	= 'A' AND ie_analise_cm_nova_w	= 'S') or (ie_analise_cm_nova_w	= 'N'))
					and	(a.nr_seq_proc_partic IS NOT NULL AND a.nr_seq_proc_partic::text <> '');
					
					if (coalesce(qt_glosa_valor_zerado_w,0) > 0) then
						select	max(ie_regra_liberacao)
						into STRICT	ie_regra_liberacao_w
						from	pls_regra_valor_conta
						where	nr_sequencia	= nr_seq_regra_valor_w;
						
						if (ie_regra_liberacao_w	= 3) then
							ie_liberar_w	:= 'S';
						end if;
					elsif (coalesce(nr_seq_regra_valor_w,0) > 0) then
						ie_liberar_w	:= 'S';
					elsif	((vl_apresentado_w = vl_total_procedimento_w AND vl_total_procedimento_w <> 0) or
						(vl_apresentado_w = 0 AND vl_total_procedimento_w > 0)) then
						ie_liberar_w	:= 'S';
					elsif	((((vl_apresentado_w < vl_total_procedimento_w)and
						((vl_tolerancia_1706_w + vl_apresentado_w) >= vl_total_procedimento_w ))or
						((vl_apresentado_w > vl_total_procedimento_w) and
						((vl_tolerancia_1705_w + vl_total_procedimento_w) >= vl_apresentado_w))) and (vl_total_procedimento_w <> 0)) then
						ie_liberar_w	:= 'S';
						ie_tolerancia_w	:= 'S';
					end if;

				end if;
				
			end if;
		end if;
	end if;
	-- Se tiver somente uma ocorrencia no item

	-- e verificado se a validacao desta ocorrencia permite

	-- glosa parcial, caso sim, e o excedido nao ultrapasse o apresentado

	-- libera o saldo do item
	if (qt_glosa_w = 1) and (ie_liberar_w = 'N') then		
		select	coalesce(max(c.ie_permite_glosa_parcial),'N'),
			coalesce(max(a.qt_excedido),0),
			max(b.nr_sequencia)
		into STRICT	ie_permite_glosa_parcial_val_w,
			qt_excedido_w,
			nr_seq_oc_cta_comb_w
		from	pls_ocorrencia_benef a,
			pls_oc_cta_combinada b,
			pls_oc_cta_tipo_validacao c
		where	c.nr_sequencia = b.nr_seq_tipo_validacao
		and	b.nr_sequencia = a.nr_seq_oc_cta_comb
		and	a.nr_seq_conta_proc = nr_seq_proc_w;
		
		if (ie_permite_glosa_parcial_val_w	= 'S') then
			if (nr_seq_analise_w IS NOT NULL AND nr_seq_analise_w::text <> '') then
				select	sum(p.qt_procedimento)
				into STRICT	qt_tot_liberado_w
				from	pls_conta_proc_v	p
				where	p.nr_seq_analise	= nr_seq_analise_w
				and	p.ie_status		= 'S'
				and	p.cd_procedimento	= cd_procedimento_w
				and	p.ie_origem_proced	= ie_origem_proced_w
				and	exists (SELECT	1
						from 	pls_ocorrencia_benef o
						where	o.nr_seq_conta_proc	= p.nr_sequencia
						and	o.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_w);
			elsif (nr_seq_analise_w IS NOT NULL AND nr_seq_analise_w::text <> '') then
				select	sum(p.qt_procedimento)
				into STRICT	qt_tot_liberado_w
				from	pls_conta_proc_v	p
				where	p.nr_seq_guia		= nr_seq_guia_w
				and	p.ie_status		= 'S'
				and	p.cd_procedimento	= cd_procedimento_w
				and	p.ie_origem_proced	= ie_origem_proced_w
				and	exists (SELECT	1
						from 	pls_ocorrencia_benef o
						where	o.nr_seq_conta_proc	= p.nr_sequencia
						and	o.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_w);
			else
				select	sum(p.qt_procedimento)
				into STRICT	qt_tot_liberado_w
				from	pls_conta_proc_v	p
				where	p.nr_seq_conta		= nr_seq_conta_w
				and	p.ie_status		= 'S'
				and	p.cd_procedimento	= cd_procedimento_w
				and	p.ie_origem_proced	= ie_origem_proced_w
				and	exists (SELECT	1
						from 	pls_ocorrencia_benef o
						where	o.nr_seq_conta_proc	= p.nr_sequencia
						and	o.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_w);
			end if;
			
			if (coalesce(qt_tot_liberado_w,0) < qt_excedido_w) then
				if	((coalesce(qt_tot_liberado_w,0) + qt_apresentado_w) <= qt_excedido_w) then
					ie_liberar_w := 'S';
					qt_liberada_w := qt_apresentado_w;
				elsif (qt_excedido_w > 0) and (qt_apresentado_w > qt_excedido_w) then
					ie_liberar_w := 'S';
					qt_liberada_w := qt_apresentado_w - qt_excedido_w;
					ie_glosou_parcial_w := 'S';
				end if;
			end if;
		end if;
	end if;
	
	/* Felipe - 21/03/2011 - OS 301597 - Liberar pela regra se o procedimento tiver somente as glosa 1705 ou 1706 */

	if (ie_liberar_w = 'S') or (coalesce(nr_seq_pgto_aut_w,0) > 0) then /*Diego OS 315626*/

		/* Felipe 21/02/2011 - OS 288481 - Atualizar o Valor LIBERADO corretamente */

		vl_liberado_w		:= dividir_sem_round(coalesce(vl_calculado_w,0),qt_apresentado_w) * qt_liberada_w;
		
		/* Francisco - 28/01/2013- OS 544573  - Troquei o OR por AND, senao liberava com o valor anterior */


		/*Diogo 11/04/2013 - OS 578095 - Requirei a clausula que restringia o valor liberado 0 > 0 pois para regra que considera o valor apresetado iguala 0 nao estava funcionando*/

		if (coalesce(nr_seq_regra_valor_w,0) > 0) then
			vl_liberado_w	:=dividir_sem_round(coalesce(vl_liberado_regra_w,0),qt_apresentado_w) * qt_liberada_w;
			
			if (vl_liberado_w <> vl_liberado_regra_w ) and ( qt_liberada_w = qt_apresentado_w) then
				vl_liberado_w := vl_liberado_regra_w;
			end if;
		end if;
		
		if (ie_tolerancia_w = 'S') then
			vl_liberado_w:= vl_apresentado_w;
		end if;
		
		-- se for complemtanente glosado no A500 por conta do A520, entao desativa todas as glosa e ocorrencias
		if (ie_a500_glosado_proc_w = 'S') then
		
		
			update	pls_conta_glosa d
			set	d.ie_situacao		= 'I'
			where   d.nr_seq_conta_proc	= nr_seq_proc_w;	
			
			update	pls_ocorrencia_benef a
			set	ie_situacao = 'I'
			where	nr_seq_conta_proc = nr_seq_proc_w;
			
		end if;
		
		if (coalesce(ie_valor_informado_w,'N')	= 'N') and (coalesce(vl_apresentado_w,0) = 0) and (ie_atualiza_apresentado_w <> 'N') then
			/*Jogar apenas o valor calculado para o apresentado
			se jogar o LIBERADO, ao consistir a primeira vez o item, o sistema joga o valor liberado no apresentado,
			mas ao consistir novamente a conta, o valor apresentado fica maior do que o calculado e o sistema emite glosa
			*/

			/* Felipe - 28/03/2011 - OS 288481 - Historico 25/03/2011 10:18:59 */

			ie_vl_apresentado_sistema_w	:= 'S';

                        --A variavel abaixo sera comentada pois o comportamento abaixo nao valida a regra de atualizacao

                        --de valor apresetando, tornando o valor invalido.


			--vl_apresentado_w		:= vl_total_procedimento_w;
                        CALL pls_atualiza_valor_apresentado( null, null, null, null, nr_seq_proc_w, cd_estabelecimento_w, nm_usuario_p);

                        --O select abaixo e utilizado para revalidar o vl_apresentado, pois se estava zerado e foi preenchido

                        --foi devido a procedure acima.
                        select	coalesce(vl_procedimento_imp, '0')
			into STRICT	vl_apresentado_w
			from	pls_conta_proc
			where	nr_sequencia = nr_seq_proc_w;

		end if;

		-- se for completamente glosado no A500 por conta do A520, entao tem que ir zero
		if (ie_a500_glosado_proc_w = 'S') then
		
			vl_liberado_hi_w	:= 0;
			vl_liberado_material_w	:= 0;
			vl_liberado_co_w	:= 0;
		else
			vl_liberado_hi_w	:= dividir_sem_round((coalesce(vl_calculado_hi_w,0)*vl_liberado_w),vl_calculado_w);
			vl_liberado_material_w	:= dividir_sem_round((coalesce(vl_calculado_material_w,0)*vl_liberado_w),vl_calculado_w);
			vl_liberado_co_w	:= dividir_sem_round((coalesce(vl_calculado_co_w,0)*vl_liberado_w),vl_calculado_w);
		end if;
		
		vl_glosa_hi_w		:= 0;
		vl_glosa_material_w	:= 0;
		vl_glosa_co_w		:= 0;
		
		/* Para contas de intercambio  - Francisco - 24/01/2013 - Rio Preto, nao alterar sem falar comigo*/

		
	
		if (ie_tipo_conta_w = 'I') and (ie_a500_glosado_proc_w = 'N') then
			
			-- Se for para aceitar o valor apresentado, entao libera os valores de taxa apresentados e zera os valores de glosa.
			if (ie_valor_base_w = '1') or
				(ie_tolerancia_w = 'S' AND ie_valor_base_w != '4')then
				vl_liberado_hi_w		:= vl_procedimento_ptu_imp_w;
				vl_liberado_co_w		:= vl_co_ptu_imp_w;
				vl_liberado_material_w		:= vl_material_ptu_imp_w;
				
				-- Taxas
				vl_lib_taxa_servico_w		:= vl_taxa_servico_imp_w;
				vl_lib_taxa_material_w		:= vl_taxa_material_imp_w;
				vl_lib_taxa_co_w		:= vl_taxa_co_imp_w;
				vl_glosa_taxa_servico_w		:= 0;
				vl_glosa_taxa_material_w	:= 0;
				vl_glosa_taxa_co_w		:= 0;
				
				vl_liberado_w			:= vl_liberado_hi_w + vl_liberado_co_w + vl_liberado_material_w +
								vl_lib_taxa_servico_w + vl_lib_taxa_co_w + vl_lib_taxa_material_w;
				vl_glosa_w			:= 0;
			-- Se for para aceitar o valor aprensetado e descontar as taxas de intercambio, se necessario, entao deve ser verificado se foi calculado o valor para a taxa de intecambio.

			-- So ira liberar o valor apresentado das taxas caso exista algum valor calculado para as taxas.
			elsif (ie_valor_base_w = '4') then
				
				-- Liberar os valores que foram apresentados.
				vl_liberado_hi_w		:= vl_procedimento_ptu_imp_w;
				vl_liberado_co_w		:= vl_co_ptu_imp_w;
				vl_liberado_material_w		:= vl_material_ptu_imp_w;
				
				-- Taxas. Para a questao das taxas, quando for aceito o valor apresentado e descontado as taxas, entao deve ser verificado individualmente cada uma delas, sempre que houver valor

				-- calculado ira liberar o valor apresentado e zerar o valor de glosa. Se nao tiver valor calculado zera o valor liberado e glosa o valor apresentado para as taxas.

				-- Taxa de servico.
				vl_lib_taxa_servico_w	:= 0;
				vl_glosa_taxa_servico_w	:= vl_taxa_servico_imp_w;

				-- Taxa de Material
				vl_lib_taxa_material_w	:= 0;
				vl_glosa_taxa_material_w:= vl_taxa_material_imp_w;

				vl_lib_taxa_co_w	:= 0;
				vl_glosa_taxa_co_w	:= vl_taxa_co_imp_w;

				vl_liberado_w := 	vl_liberado_hi_w + vl_liberado_co_w + vl_liberado_material_w +
							vl_lib_taxa_servico_w + vl_lib_taxa_co_w + vl_lib_taxa_material_w;
				vl_glosa_w := coalesce(vl_taxa_co_imp_w,0) + coalesce(vl_taxa_material_imp_w,0) + coalesce(vl_taxa_servico_imp_w,0);
				
				
			-- Se for aceito qualquer dos outros valores deve ser calculada a diferenca entre apresentado e calculado para popular o valores de glosas e deconstar dos valores liberados.
			else
				/* Francisco - 02/09/2013 - OS 611612 -
				Hoje 04/09/2013 - Foi acordado entre os demais clientes que utilizam
				que tambem irao fazer dessa forma */

				
				/* Obter primeiro a proporcao de liberacao do valor total  e das taxas */

				
				dados_intercambio_w := pls_cta_alt_valor_pck.pls_calc_vl_lib_vl_calc( coalesce(vl_procedimento_ptu_imp_w,0), coalesce(vl_material_ptu_imp_w,0),
										coalesce(vl_co_ptu_imp_w,0), coalesce(vl_taxa_servico_imp_w,0), coalesce(vl_taxa_material_imp_w,0),
										coalesce(vl_taxa_co_imp_w,0), coalesce(vl_calculado_hi_w,0), coalesce(vl_calculado_material_w,0),
										coalesce(vl_calculado_co_w,0), coalesce(vl_taxa_servico_w,0), coalesce(vl_taxa_material_w,0),
										coalesce(vl_taxa_co_w,0), tx_intercambio_imp_w, tx_intercambio_w);
				
				-- soma todos os valores e taxas de intercambio
				vl_liberado_w := (dados_intercambio_w.vl_liberado_hi + dados_intercambio_w.vl_liberado_mat +
					      dados_intercambio_w.vl_liberado_co + dados_intercambio_w.vl_lib_taxa_hi +
					      dados_intercambio_w.vl_lib_taxa_mat + dados_intercambio_w.vl_lib_taxa_co);
				
				-- calculo das glosas

				-- se der valor negativo, a glosa e sempre zero
				vl_glosa_co_w 			:= pls_util_cta_pck.pls_obter_vl_glosa(dados_intercambio_w.vl_liberado_co,  coalesce(vl_co_ptu_imp_w,0));
				vl_glosa_hi_w 			:= pls_util_cta_pck.pls_obter_vl_glosa(dados_intercambio_w.vl_liberado_hi,  coalesce(vl_procedimento_ptu_imp_w,0));
				vl_glosa_material_w 		:= pls_util_cta_pck.pls_obter_vl_glosa(dados_intercambio_w.vl_liberado_mat, coalesce(vl_material_ptu_imp_w,0));
				vl_glosa_taxa_co_w 		:= pls_util_cta_pck.pls_obter_vl_glosa(dados_intercambio_w.vl_lib_taxa_co,  coalesce(vl_taxa_co_imp_w,0));
				vl_glosa_taxa_servico_w		:= pls_util_cta_pck.pls_obter_vl_glosa(dados_intercambio_w.vl_lib_taxa_hi,  coalesce(vl_taxa_servico_imp_w,0));
				vl_glosa_taxa_material_w 	:= pls_util_cta_pck.pls_obter_vl_glosa(dados_intercambio_w.vl_lib_taxa_mat, coalesce(vl_taxa_material_imp_w,0));
				-- soma tudo
				vl_glosa_w := (	vl_glosa_co_w + vl_glosa_hi_w + vl_glosa_material_w + vl_glosa_taxa_co_w + vl_glosa_taxa_servico_w +
						vl_glosa_taxa_material_w );
				
				vl_liberado_co_w	:= dados_intercambio_w.vl_liberado_co;
				vl_liberado_hi_w	:= dados_intercambio_w.vl_liberado_hi;
				vl_liberado_material_w	:= dados_intercambio_w.vl_liberado_mat;
				vl_lib_taxa_co_w	:= dados_intercambio_w.vl_lib_taxa_co;
				vl_lib_taxa_servico_w	:= dados_intercambio_w.vl_lib_taxa_hi;
				vl_lib_taxa_material_w	:= dados_intercambio_w.vl_lib_taxa_mat;
			end if;
		else
			vl_lib_taxa_servico_w		:= 0;
			vl_lib_taxa_material_w		:= 0;
			vl_lib_taxa_co_w		:= 0;
			vl_glosa_taxa_servico_w		:= 0;
			vl_glosa_taxa_material_w	:= 0;
			vl_glosa_taxa_co_w		:= 0;
			
			if (coalesce(vl_apresentado_w,0) > coalesce(vl_liberado_w,0)) then
				vl_glosa_w := vl_apresentado_w - vl_liberado_w;
			end if;
		end if;
		
		if	((coalesce(vl_lib_taxa_servico_w,0) + coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_lib_taxa_co_w,0) +
			  coalesce(vl_liberado_hi_w,0) + coalesce(vl_liberado_material_w,0) + coalesce(vl_liberado_co_w,0)) >  coalesce(vl_liberado_w,0)) then
			
			vl_dif_w :=	(coalesce(vl_lib_taxa_servico_w,0) + coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_lib_taxa_co_w,0) +
					coalesce(vl_liberado_hi_w,0) + coalesce(vl_liberado_material_w,0) + coalesce(vl_liberado_co_w,0))- coalesce(vl_liberado_w,0);
			
			if (coalesce(vl_liberado_hi_w,0) > vl_dif_w) then
				vl_liberado_hi_w := vl_liberado_hi_w -  vl_dif_w;
			elsif (coalesce(vl_liberado_co_w,0) > vl_dif_w) then
				vl_liberado_co_w := vl_liberado_co_w -  vl_dif_w;
			elsif (coalesce(vl_liberado_material_w,0) > vl_dif_w) then
				vl_liberado_co_w := vl_liberado_co_w -  vl_dif_w;
			end if;
		end if;
		
		if	((coalesce(vl_glosa_taxa_co_w,0) + coalesce(vl_glosa_taxa_material_w,0) + coalesce(vl_glosa_taxa_servico_w,0) +
			  coalesce(vl_glosa_material_w,0) + coalesce(vl_glosa_co_w,0) + coalesce(vl_glosa_hi_w,0)) >  coalesce(vl_glosa_w,0)) then
			
			vl_dif_w :=	(coalesce(vl_glosa_taxa_co_w,0) + coalesce(vl_glosa_taxa_material_w,0) + coalesce(vl_glosa_taxa_servico_w,0) +
					coalesce(vl_glosa_material_w,0) + coalesce(vl_glosa_co_w,0) + coalesce(vl_glosa_hi_w,0)) - coalesce(vl_glosa_w,0);
			
			if (coalesce(vl_glosa_hi_w,0) > vl_dif_w) then
				vl_glosa_hi_w := vl_glosa_hi_w -  vl_dif_w;
			elsif (coalesce(vl_glosa_co_w,0) > vl_dif_w) then
				vl_glosa_co_w := vl_glosa_co_w -  vl_dif_w;
			elsif (coalesce(vl_glosa_material_w,0) > vl_dif_w) then
				vl_glosa_material_w := vl_glosa_material_w -  vl_dif_w;
			end if;
		end if;
		
		/* 21/07/2011 - Felipe/Robson -  OS - 342828 - Alteramos o update do VL_PRESTADOR para receber VL_LIBERADO_W */


		/* 10/08/2011 - Felipe - OS 328252 - 09/08/2011 13:51:25 - Alterei para VL_PRESTADOR receber o proprio VL_PRESTADOR_W */

		update	pls_conta_proc
		set	qt_procedimento			= qt_liberada_w,
			vl_unitario			= dividir_sem_round(vl_liberado_w,qt_liberada_w),
			vl_liberado			= CASE WHEN ie_a500_glosado_proc_w='S' THEN  0  ELSE vl_liberado_w END , -- se foi completamente glosado no A500, deve ir zerado
			vl_prestador			= vl_liberado_w,
			vl_glosa			= vl_glosa_w,
			ie_status			= 'S',
			dt_liberacao			= clock_timestamp(),
			ds_log				= 'pls_liberar_item_automatic',
			vl_liberado_hi			= vl_liberado_hi_w,
			vl_liberado_material		= vl_liberado_material_w,
			vl_liberado_co			= vl_liberado_co_w,
			vl_glosa_hi			= vl_glosa_hi_w,
			vl_glosa_material		= vl_glosa_material_w,
			vl_glosa_co			= vl_glosa_co_w,
			vl_lib_taxa_servico		= vl_lib_taxa_servico_w,
			vl_lib_taxa_material		= vl_lib_taxa_material_w,
			vl_lib_taxa_co			= vl_lib_taxa_co_w,
			vl_glosa_taxa_servico		= vl_glosa_taxa_servico_w,
			vl_glosa_taxa_material		= vl_glosa_taxa_material_w,
			vl_glosa_taxa_co		= vl_glosa_taxa_co_w,
			vl_pag_medico_conta		= (dividir_sem_round(vl_liberado_w, vl_procedimento) * vl_medico_original),
			ie_status_pagamento		= CASE WHEN vl_glosa_w=0 THEN 'L'  ELSE 'P' END ,
			ie_tipo_liberacao		= 'U',
			ie_glosa			= 'N',
			vl_proc_copartic		= CASE WHEN ie_a500_glosado_proc_w='S' THEN  0  ELSE vl_proc_copartic END  -- se foi completamente glosado no A500, deve ir zerado, senao mantem o original
		where	nr_sequencia			= nr_seq_proc_w;
			
		qt_liberado_proc_w	:= qt_liberado_proc_w + 1;
		
	
		if (ie_glosou_parcial_w = 'N') then
				-- Quando nao for para aceitar o valor apresentado libera o valor calculado para os participantes do procedimento.
			if (ie_valor_base_w not in ('1', '4','5', '6'))	and (coalesce(ie_tolerancia_w,'N') <> 'S') then

				update	pls_proc_participante
				set	vl_participante			= vl_calculado,
					qt_liberada			= qt_apresentado_w,
					vl_glosa			= 0,
					ie_status_pagamento		= 'L',
					ie_status			= 'L'
				where	nr_seq_conta_proc		= nr_seq_proc_w
				and	coalesce(ie_status,'U')		<> 'C'
				and	coalesce(ie_gerada_cta_honorario,'N') <> 'S'	;
			else

				
				update	pls_proc_participante
				set	vl_participante			= dividir((vl_liberado_w * vl_calculado),vl_calculado_w),
					qt_liberada			= qt_apresentado_w,
					vl_glosa			= 0,
					ie_status_pagamento		= 'L',
					ie_status			= 'L'
				where	nr_seq_conta_proc		= nr_seq_proc_w
				and	((coalesce(ie_status::text, '') = '') or (ie_status != 'C'))
				and	((coalesce(ie_gerada_cta_honorario::text, '') = '') or (ie_gerada_cta_honorario <> 'S'));
				
				select 	coalesce(sum(vl_participante),0)
				into STRICT	vl_tot_partic_w
				from	pls_proc_participante
				where	nr_seq_conta_proc		= nr_seq_proc_w
				and	((coalesce(ie_status::text, '') = '') or (ie_status != 'C'))
				and	((coalesce(ie_gerada_cta_honorario::text, '') = '') or (ie_gerada_cta_honorario <> 'S'));
				
				if (vl_tot_partic_w > vl_liberado_w ) then
					vl_dif_partic_w	:= vl_tot_partic_w - vl_liberado_w;
					
					update	pls_proc_participante	a
					set	a.vl_participante	= a.vl_participante - vl_dif_partic_w
					where	a.nr_sequencia	= (	SELECT	max(x.nr_sequencia)
									from	pls_proc_participante	x
									where	x.nr_seq_conta_proc		= nr_seq_proc_w
									and	((coalesce(x.ie_status::text, '') = '') or (x.ie_status != 'C'))
									and	((coalesce(x.ie_gerada_cta_honorario::text, '') = '') or (x.ie_gerada_cta_honorario <> 'S'))
									and	x.vl_participante >= vl_dif_partic_w);
					
				end if;
				
			end if;
			
			update	pls_conta_glosa	a
			set	a.ie_situacao		= 'I'
			where	a.nr_seq_conta_proc	= nr_seq_proc_w
			and	exists (SELECT	1
					from	tiss_motivo_glosa	x
					where	x.nr_sequencia	= a.nr_seq_motivo_glosa
					and	x.cd_motivo_tiss in ('1706','1707'));
					
			if (coalesce(vl_glosa_w,0)	= 0) then
				update	pls_conta_glosa	a
				set	a.ie_situacao		= 'I'
				where	a.nr_seq_conta_proc	= nr_seq_proc_w
				and	exists (SELECT	1
						from	tiss_motivo_glosa	x
						where	x.nr_sequencia	= a.nr_seq_motivo_glosa
						and	x.cd_motivo_tiss in ('1705'));
			end if;
			
			if (ie_permite_glosa_parcial_w = 'S')then
				
				update	pls_conta_glosa d
				set	d.ie_situacao		= 'I'
				where   d.nr_seq_conta_proc	= nr_seq_proc_w
				and	exists (	SELECT 	1
							from	pls_ocorrencia_regra	c,
								pls_ocorrencia		b,
								pls_ocorrencia_benef	a
							where	a.nr_seq_ocorrencia	= b.nr_sequencia
							and	c.nr_seq_ocorrencia	= b.nr_sequencia
							and	a.nr_sequencia		= d.nr_seq_ocorrencia_benef
							and	c.ie_consiste_qtd_aut	= 'S'
							and	b.ie_auditoria_conta	= 'S');	
				
				update	pls_ocorrencia_benef a
				set	ie_situacao = 'I'
				where	nr_seq_conta_proc = nr_seq_proc_w
				and	exists (	SELECT 	1
							from	pls_ocorrencia_regra	c,
								pls_ocorrencia		b
							where	a.nr_seq_ocorrencia	= b.nr_sequencia
							and	c.nr_seq_ocorrencia	= b.nr_sequencia
							and	c.ie_consiste_qtd_aut	= 'S'
							and	b.ie_auditoria_conta	= 'S');
			end if;
			
		else
			if (ie_valor_base_w not in ('1', '4','5', '6'))	and (coalesce(ie_tolerancia_w,'N') <> 'S') then
				
				for r_C03_w in C03(nr_seq_proc_w) loop
					
					vl_liberado_partic_w := dividir(r_C03_w.vl_calculado, qt_apresentado_w) * qt_liberada_w;
					
					if (r_C03_w.vl_apresentado = 0) then
						vl_glosa_partic_w := 0;
					else
						vl_glosa_partic_w := r_C03_w.vl_apresentado - vl_liberado_partic_w;
						
						if (vl_glosa_partic_w < 0) then
							vl_glosa_partic_w := 0;
						end if;
					end if;
					
					update	pls_proc_participante
					set	vl_participante			= vl_liberado_partic_w,
						qt_liberada			= qt_liberada_w,
						vl_glosa			= vl_glosa_partic_w,
						ie_status_pagamento		= 'L',
						ie_status			= 'L'
					where	nr_sequencia			= r_C03_w.nr_sequencia;
				end loop;
			else
				for r_C03_w in C03(nr_seq_proc_w) loop
					
					vl_liberado_partic_w := dividir((vl_liberado_w * r_C03_w.vl_calculado), vl_calculado_w);
					
					if (r_C03_w.vl_apresentado = 0) then
						vl_glosa_partic_w := 0;
					else
						vl_glosa_partic_w := r_C03_w.vl_apresentado - vl_liberado_partic_w;
						
						if (vl_glosa_partic_w < 0) then
							vl_glosa_partic_w := 0;
						end if;
					end if;
					
					update	pls_proc_participante
					set	vl_participante			= vl_liberado_partic_w,
						qt_liberada			= qt_liberada_w,
						vl_glosa			= vl_glosa_partic_w,
						ie_status_pagamento		= 'L',
						ie_status			= 'L'
					where	nr_sequencia			= r_C03_w.nr_sequencia;
				end loop;
			end if;
		end if;
		
		if (ie_vl_apresentado_sistema_w = 'S') then
			CALL pls_atualiza_valor_apresentado( null, null, null, null, nr_seq_proc_w, cd_estabelecimento_w, nm_usuario_p);
		end if;
		
		if (ie_geracao_pos_estabelecido_w = 'C') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_pos_stab_w
			from	pls_conta_pos_estabelecido
			where	nr_seq_conta		= nr_seq_conta_w
			and	nr_seq_conta_proc	= nr_seq_proc_w
			and	((ie_situacao		= 'A') or (coalesce(ie_situacao::text, '') = ''));

			
			if (coalesce(nr_seq_pos_stab_w,0) > 0) then
				update	pls_conta_pos_estabelecido
				set	ie_status_faturamento	= 'P',
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia		= nr_seq_pos_stab_w
				and	vl_beneficiario		> 0;
			end if;
		end if;
	end if;
	end;
end loop;
close C01;

ds_sql_qt_glosa_w :=
	'select	count(1)' || pls_util_pck.enter_w ||
	'from 	pls_conta_glosa a' || pls_util_pck.enter_w ||
	'where 	a.nr_seq_conta_mat = :nr_seq_mat_pc' || pls_util_pck.enter_w ||
	ds_fil_qt_glosa_w ||
	'and 	not exists	(select	1' || pls_util_pck.enter_w ||
	'			from   	tiss_motivo_glosa b' || pls_util_pck.enter_w ||
	'			where  	b.nr_sequencia = a.nr_seq_motivo_glosa' || pls_util_pck.enter_w ||
	'			and    	b.cd_motivo_tiss in (''1705'', ''1706'', ''1707''))' || pls_util_pck.enter_w ||
	'and 	not exists 	(select 1' || pls_util_pck.enter_w ||
	'			from   	pls_ocorrencia oc' || pls_util_pck.enter_w ||
	'			where  	oc.nr_seq_motivo_glosa = a.nr_seq_motivo_glosa' || pls_util_pck.enter_w ||
	'			and    	oc.ie_glosar_pagamento = ''N''' || pls_util_pck.enter_w ||
	'			and	((oc.ie_glosa 	= ''S'' ) or (a.nr_seq_ocorrencia = oc.nr_sequencia)))';

ds_sql_qt_tot_glosa_w :=
	'select	count(1)' || pls_util_pck.enter_w ||
	'from 	pls_conta_glosa a' || pls_util_pck.enter_w ||
	'where 	a.nr_seq_conta_mat = :nr_seq_mat_pc' || pls_util_pck.enter_w ||
	ds_fil_qt_glosa_w ||
	'and 	not exists 	(select 1' || pls_util_pck.enter_w ||
	'			from   	pls_ocorrencia oc' || pls_util_pck.enter_w ||
	'			where  	oc.nr_seq_motivo_glosa = a.nr_seq_motivo_glosa' || pls_util_pck.enter_w ||
	'			and    	oc.ie_glosar_pagamento = ''N''' || pls_util_pck.enter_w ||
	'			and	((oc.ie_glosa 	= ''S'' ) or (a.nr_seq_ocorrencia = oc.nr_sequencia))' || pls_util_pck.enter_w ||
	'			and	oc.ie_situacao 	= ''A'')';

open C02;
loop
fetch C02 into
	nr_seq_mat_w,
	vl_calculado_w,
	vl_apresentado_w,
	vl_unitario_apres_w,
	qt_apresentado_w,
	ie_valor_informado_w,
	vl_liberado_regra_w,
	nr_seq_regra_valor_w,
	nr_seq_material_w,
	qt_autorizado_w,
	nr_seq_pgto_aut_w,
	vl_taxa_material_imp_w,
	vl_taxa_material_w,
	ie_valor_base_w,
	ie_tp_desp_conta_mat_w,
	ie_aviso_a520_mat_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	qt_glosa_w		:= 0;
	ie_liberar_w		:= 'N';
	vl_glosa_w		:= 0;
	nr_seq_pos_stab_w	:= 0;
	ie_tolerancia_w		:= 'N';
	ie_vl_apresentado_sistema_w := 'N';
	ie_permite_glosa_parcial_val_w := 'N';
	qt_excedido_w		:= 0;
	ie_glosou_parcial_w	:= 'N';
	ie_a500_glosado_mat_w	:= pls_obter_se_a504_glosado(ie_aviso_a520_mat_w, ie_origem_conta_w, vl_apresentado_w);
	
	begin
		if (ie_ocorrencia_w = 'N') then
			select	max(a.vl_tolerancia_glosa)
			into STRICT	vl_tolerancia_1705_w
			from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and		a.ie_situacao		= 'A'
			and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tp_desp_conta_mat_w))
			and		b.cd_motivo_tiss	= '1705';
		else
			select	max(a.vl_tolerancia_glosa)
			into STRICT	vl_tolerancia_1705_w
			from	pls_regra_lanc_glosa a,
					tiss_motivo_glosa b
			where	a.nr_seq_motivo_glosa = b.nr_sequencia
			and		a.ie_situacao		= 'A'
			and		((coalesce(a.ie_tipo_despesa_mat::text, '') = '') or (a.ie_tipo_despesa_mat = ie_tp_desp_conta_mat_w))
			and		b.cd_motivo_tiss	= '1705'
			and		a.cd_estabelecimento	= cd_estabelecimento_w;
		end if;
	exception
	when others then
		vl_tolerancia_1705_w	:= 0;
	end;
	
	--Se o valor apresentado for zero e o parametro da gestao de operadoras  diz para atualizar o valor apresentado zerado com o valor calculado
	if (coalesce(vl_apresentado_w,0) = 0) and (ie_atualiza_apresentado_w <> 'N')then
			
			ie_vl_apresentado_sistema_w	:= 'S';
	end if;
	
	-- quantidade de glosas
	EXECUTE ds_sql_qt_glosa_w into STRICT qt_glosa_w using nr_seq_mat_w;
	EXECUTE ds_sql_qt_tot_glosa_w into STRICT qt_glosa_tot_w using nr_seq_mat_w;
	
	-- Nao pode existir glosas no item
	if (qt_glosa_w = 0) then
		select	count(1)
		into STRICT	qt_glosa_valor_zerado_w
		from	tiss_motivo_glosa	b,
			pls_conta_glosa		a
		where	a.nr_seq_motivo_glosa	= b.nr_sequencia
		and	a.nr_seq_conta_mat	= nr_seq_mat_w
		and	((a.ie_situacao	= 'A' AND ie_analise_cm_nova_w	= 'S') or (ie_analise_cm_nova_w	= 'N'))
		and	b.cd_motivo_tiss 	= '1707';
		
		select	max(ie_regra_liberacao),
				max(ie_tipo_valor)
		into STRICT	ie_regra_liberacao_w,
				ie_tipo_valor_w
		from	pls_regra_valor_conta
		where	nr_sequencia	= nr_seq_regra_valor_w;

		if (coalesce(qt_glosa_valor_zerado_w,0) > 0) then
			if (ie_regra_liberacao_w	= 3) then
				ie_liberar_w	:= 'S';
			end if;
		elsif (coalesce(nr_seq_regra_valor_w,0) > 0) then
			ie_liberar_w	:= 'S';

			if (qt_glosa_tot_w 	= 0) and (vl_apresentado_w 	> 0) and
				((ie_tipo_valor_w	not in (2,3)) or (vl_apresentado_w > vl_calculado_w)) and (ie_tipo_valor_w	not in (4,5,6) )	then

				ie_tolerancia_w		:= 'S';
			end if;
		elsif	((vl_apresentado_w = vl_calculado_w AND vl_calculado_w <> 0) or
			(vl_apresentado_w = 0 AND vl_calculado_w > 0)) then
			ie_liberar_w	:= 'S';
		elsif	((((vl_apresentado_w < vl_calculado_w)and
			((vl_tolerancia_1706_w + vl_apresentado_w) >= vl_calculado_w ))or
			((vl_apresentado_w > vl_calculado_w) and
			((vl_tolerancia_1705_w + vl_calculado_w) >= vl_apresentado_w))) and (vl_calculado_w <> 0)) or
			(qt_glosa_tot_w	= 0 AND vl_apresentado_w	> 0)then
			ie_liberar_w	:= 'S';
			ie_tolerancia_w	:= 'S';
		elsif	((vl_apresentado_w = 0) and (vl_calculado_w = 0) and (ie_permite_glosa_parcial_w = 'S')) then
			ie_liberar_w	:= 'S';
		end if;
	end if;
	
	if	(( qt_glosa_tot_w = 0 ) 	and
		(( coalesce(vl_liberado_regra_w,0) > 0) or ( coalesce(vl_calculado_w,0) > 0))	and (ie_liberar_w	= 'N')) or
		-- separacao A520
		(ie_a500_glosado_mat_w = 'S') then
		ie_liberar_w	:= 'S';
	end if;
	
	-- Se tiver somente uma ocorrencia no item

	-- e verificado se a validacao desta ocorrencia permite

	-- glosa parcial, caso sim, e o excedido nao ultrapasse o apresentado

	-- libera o saldo do item	
	if (qt_glosa_w = 1) and (ie_liberar_w = 'N') then
		select	coalesce(max(c.ie_permite_glosa_parcial),'N'),
			coalesce(max(a.qt_excedido),0),
			max(b.nr_sequencia)
		into STRICT	ie_permite_glosa_parcial_val_w,
			qt_excedido_w,
			nr_seq_oc_cta_comb_w
		from	pls_ocorrencia_benef a,
			pls_oc_cta_combinada b,
			pls_oc_cta_tipo_validacao c
		where	c.nr_sequencia = b.nr_seq_tipo_validacao
		and	b.nr_sequencia = a.nr_seq_oc_cta_comb
		and	a.nr_seq_conta_mat = nr_seq_mat_w;
		
		if (ie_permite_glosa_parcial_val_w	= 'S') then
			if (nr_seq_analise_w IS NOT NULL AND nr_seq_analise_w::text <> '') then
				select	sum(p.qt_material)
				into STRICT	qt_tot_liberado_w
				from	pls_conta_mat_v	p
				where	p.nr_seq_analise	= nr_seq_analise_w
				and	p.ie_status		= 'S'
				and	p.nr_seq_material	= nr_seq_material_w
				and	exists (SELECT	1
						from 	pls_ocorrencia_benef o
						where	o.nr_seq_conta_mat	= p.nr_sequencia
						and	o.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_w);
			elsif (nr_seq_analise_w IS NOT NULL AND nr_seq_analise_w::text <> '') then
				select	sum(p.qt_material)
				into STRICT	qt_tot_liberado_w
				from	pls_conta_mat_v	p
				where	p.nr_seq_guia		= nr_seq_guia_w
				and	p.ie_status		= 'S'
				and	p.nr_seq_material	= nr_seq_material_w
				and	exists (SELECT	1
						from 	pls_ocorrencia_benef o
						where	o.nr_seq_conta_mat	= p.nr_sequencia
						and	o.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_w);
			else
				select	sum(p.qt_material)
				into STRICT	qt_tot_liberado_w
				from	pls_conta_mat_v	p
				where	p.nr_seq_conta		= nr_seq_conta_w
				and	p.ie_status		= 'S'
				and	p.nr_seq_material	= nr_seq_material_w
				and	exists (SELECT	1
						from 	pls_ocorrencia_benef o
						where	o.nr_seq_conta_mat	= p.nr_sequencia
						and	o.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_w);
			end if;
			
			if (coalesce(qt_tot_liberado_w,0) < qt_excedido_w) then
				if	((coalesce(qt_tot_liberado_w,0) + qt_apresentado_w) <= qt_excedido_w) then
					ie_liberar_w := 'S';
					qt_liberada_w := qt_apresentado_w;
				elsif (qt_excedido_w > 0) and (qt_apresentado_w > qt_excedido_w) then
					ie_liberar_w := 'S';
					qt_liberada_w := qt_apresentado_w - qt_excedido_w;
					ie_glosou_parcial_w := 'S';
				end if;
			end if;
		end if;

	end if;
	
	if (ie_liberar_w = 'S') or (coalesce(nr_seq_pgto_aut_w,0) > 0) then /*Diego OS 315626*/
		
		vl_liberado_w	:= coalesce(vl_calculado_w,0);
		
		if (nr_seq_regra_valor_w IS NOT NULL AND nr_seq_regra_valor_w::text <> '') then
			vl_liberado_w	:= vl_liberado_regra_w;
			vl_unitario_apres_w	:= dividir_sem_round(vl_liberado_w, qt_apresentado_w);
		end if;
		
		if (ie_tolerancia_w = 'S') then
			vl_liberado_w:= vl_apresentado_w;
		end if;
		
		vl_unitario_apres_w	:= dividir_sem_round(vl_liberado_w, qt_apresentado_w);
		
		if (ie_glosou_parcial_w = 'S') then
			vl_liberado_w := vl_unitario_apres_w * qt_liberada_w;
			qt_apresentado_w := qt_liberada_w;
		end if;
		
		if (coalesce(vl_apresentado_w,0) > coalesce(vl_liberado_w,0)) then
			vl_glosa_w := vl_apresentado_w - vl_liberado_w;
		end if;
		/* Para contas de intercambio */

		if (ie_tipo_conta_w 	= 'I') and (ie_a500_glosado_mat_w = 'N') then
			-- Aceitar valor apresentado.
			if (ie_valor_base_w = '1') or
				((coalesce(ie_valor_base_w::text, '') = '') and (vl_apresentado_w = vl_calculado_w))  or (ie_tolerancia_w = 'S') then
				vl_lib_taxa_material_w		:= vl_taxa_material_imp_w;
				vl_glosa_taxa_material_w	:= 0;
			
			-- Aceitar valor apresentado e descontar a taxa de intecambio, se necessario.
			elsif (ie_valor_base_w = '4') then

				vl_lib_taxa_material_w		:= 0;
				vl_glosa_taxa_material_w	:= vl_taxa_material_imp_w;
				
				vl_glosa_w := coalesce(vl_taxa_material_imp_w,0);
			-- Para as demais acoes deve ser calculada a diferenca entre os valores apresentado e calculado.
			else
				vl_lib_taxa_material_w		:= vl_taxa_material_w;
				vl_glosa_taxa_material_w	:= pls_util_cta_pck.pls_obter_vl_glosa(vl_lib_taxa_material_w, coalesce(vl_taxa_material_imp_w,0));
			end if;
		else
			vl_lib_taxa_servico_w		:= 0;
			vl_lib_taxa_material_w		:= 0;
			vl_lib_taxa_co_w		:= 0;
			vl_glosa_taxa_servico_w		:= 0;
			vl_glosa_taxa_material_w	:= 0;
			vl_glosa_taxa_co_w		:= 0;
		end if;

		update	pls_conta_mat
		set	vl_unitario			= vl_unitario_apres_w,
			qt_material			= qt_apresentado_w,
			vl_liberado			= CASE WHEN ie_a500_glosado_mat_w='S' THEN  0  ELSE vl_liberado_w END , -- se foi glosado completamente no A500, deve ir zerado
			vl_glosa			= vl_glosa_w,
			vl_material_imp			= vl_apresentado_w,
			ie_status			= 'S',
			dt_liberacao			= clock_timestamp(),
			ds_log				= 'pls_liberar_item_automatic',
			vl_lib_taxa_material		= vl_lib_taxa_material_w,
			vl_glosa_taxa_material		= vl_glosa_taxa_material_w,
			ie_status_pagamento		= CASE WHEN vl_glosa_w=0 THEN 'L'  ELSE 'P' END ,
			ie_glosa			= 'N'
		where	nr_sequencia			= nr_seq_mat_w;
			
		qt_liberado_mat_w	:= qt_liberado_mat_w + 1;
		
		if (ie_vl_apresentado_sistema_w = 'S') then
			CALL pls_atualiza_valor_apresentado( null, null, null, null, nr_seq_mat_w, cd_estabelecimento_w, nm_usuario_p);
		end if;

		if (ie_geracao_pos_estabelecido_w = 'C') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_pos_stab_w
			from	pls_conta_pos_estabelecido
			where	nr_seq_conta	= nr_seq_conta_w
			and	nr_seq_conta_mat = nr_seq_mat_w
			and	((ie_situacao		= 'A') or (coalesce(ie_situacao::text, '') = ''));

			if (coalesce(nr_seq_pos_stab_w,0) > 0) then
				update	pls_conta_pos_estabelecido
				set	ie_status_faturamento	= 'P',
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_sequencia	= nr_seq_pos_stab_w
				and	vl_beneficiario > 0;
			end if;
		end if;
		
		if (ie_glosou_parcial_w = 'N') then
			update	pls_conta_glosa a
			set	a.ie_situacao		= 'I'
			where	a.nr_seq_conta_mat	= nr_seq_mat_w
			and	exists (SELECT	1
					from	tiss_motivo_glosa	x
					where	x.nr_sequencia	= a.nr_seq_motivo_glosa
					and	x.cd_motivo_tiss in ('1706','1707'));
			if (coalesce(vl_glosa_w,0)	= 0) then
				update	pls_conta_glosa a
				set	a.ie_situacao		= 'I'
				where	a.nr_seq_conta_mat	= nr_seq_mat_w
				and	exists (SELECT	1
						from	tiss_motivo_glosa	x
						where	x.nr_sequencia	= a.nr_seq_motivo_glosa
						and	x.cd_motivo_tiss in ('1705'));
			end if;
		end if;
		
		if (ie_a500_glosado_mat_w = 'S') then
		
			update	pls_conta_glosa d
			set	d.ie_situacao		= 'I'
			where   d.nr_seq_conta_mat	= nr_seq_mat_w;
			
			update	pls_ocorrencia_benef a
			set	ie_situacao = 'I'
			where	nr_seq_conta_mat = nr_seq_mat_w;

		end if;
	end if;
	end;
end loop;
close C02;

update	pls_conta_mat
set	ie_status	= 'P'
where	((nr_seq_conta	= nr_seq_conta_p) or (nr_sequencia	= nr_seq_conta_mat_p))
and	ie_status in ('C','U');

ie_status_conta_w	:= 'L';

select	count(1)
into STRICT	qt_glosa_conta_w
from	pls_glosa_conta_medica_v	a
where	ie_situacao  	= 'A'
and	nr_seq_conta	= nr_seq_conta_w
and	not exists (	SELECT	1
			from	tiss_motivo_glosa	x
			where	x.nr_sequencia	= a.nr_seq_motivo_glosa
			and	x.cd_motivo_tiss in ('1705','1706','1707'));

if (qt_glosa_conta_w > 0) or (qt_liberado_mat_w < qt_total_mat_w) or (qt_liberado_proc_w < qt_total_proc_w) then
	ie_status_conta_w	:= 'P';
end if;
/* Se nao existir mais glosa nos itens e nem na conta, entao libera a conta. A conta nao pode ser alterada o status quando esta cancelada */

update	pls_conta
set	ie_status	= CASE WHEN ie_status='F' THEN 'F'  ELSE ie_status_conta_w END
where	nr_sequencia	= nr_seq_conta_w
and	ie_status	<> 'C';

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_liberar_item_automatic ( nr_seq_conta_p pls_conta_v.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc_v.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat_v.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

