-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_repasse_nf ( nr_nota_fiscal_p bigint, cd_serie_nf_p text, nm_usuario_p text, cd_operacao_nota_p bigint, dt_emissao_p timestamp, dt_entrada_saida_p timestamp, ds_lista_repasse_p text, cd_material_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_local_estoque_p bigint, cd_centro_custo_p bigint, cd_condicao_pagto_p bigint, ie_gerar_tributo_p text, ie_gerar_vencimento_p text, ie_agrupa_centro_p text, ie_exporta_obs_p text default 'N', nr_sequencia_p INOUT bigint DEFAULT NULL, ds_consistencia_p INOUT text DEFAULT NULL) AS $body$
DECLARE



nr_sequencia_nf_w			bigint;
cd_natureza_operacao_w		smallint;
cd_natureza_operacao_ne_w		smallint;
cd_natureza_operacao_cad_w	smallint;
cd_natureza_op_nf_w		smallint;
cd_estabelecimento_w		smallint;
nr_seq_terceiro_w			bigint;
cd_pessoa_fisica_w		varchar(10);
cd_cgc_w			varchar(14);
cd_cgc_estabelecimento_w		varchar(14);
cd_unidade_medida_compra_w	varchar(30);
cd_unidade_medida_estoque_w	varchar(30);
nr_item_nf_w			integer;
vl_liberado_w			double precision;
vl_imposto_w			double precision;
ie_tipo_conta_w			smallint := 0;
cd_conta_contabil_w		varchar(20);
cd_centro_custo_w			bigint;
cd_centro_custo_agrup_w		bigint;
qt_vencimentos_w			integer;
qt_tributos_w			integer;
nr_repasse_terceiro_w		bigint;
nr_repasse_terc_trib_w		bigint;
cd_tributo_w			bigint;
pr_tributo_w			double precision;
ie_consiste_vencto_w		varchar(02);
nr_titulo_venc_w			bigint;
ds_consistencia_w			varchar(255);
ie_tipo_nota_w			varchar(3);
qt_existe_w			bigint;
nr_seq_conta_financ_w		bigint;
vl_reducao_base_w		double precision;
vl_trib_nao_retido_w		double precision;
vl_base_nao_retido_w		double precision;
vl_trib_adic_w			double precision;
vl_base_adic_w			double precision;
ds_lista_repasse_w			varchar(2000);
dt_entrada_saida_w		timestamp;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_material_w			integer;
ie_altera_valor_w		varchar(1);
ds_texto_w			varchar(2000);
ds_observacao_w			varchar(4000);
ds_observacao_ww		varchar(4000);

nr_seq_proc_interno_w		procedimento_paciente.nr_seq_proc_interno%type;

ie_gerar_item_repasse_w			varchar(1);
qt_material_w			material_repasse.qt_material%type;
vl_repasse_w			material_repasse.vl_repasse%type;

cd_centro_custo_repasse_w	repasse_terceiro_item.cd_centro_custo%type := null;

C00 CURSOR FOR
SELECT	sum(x.vl_liberado),
	x.cd_centro_custo
from (SELECT 	a.vl_liberado,
	c.cd_centro_custo
from 	setor_atendimento c,
	procedimento_paciente b,
	procedimento_repasse a
where a.nr_repasse_terceiro in (WITH RECURSIVE cte AS (
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')   UNION ALL
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')  JOIN cte c ON ()

) SELECT * FROM cte;
)
and	a.nr_seq_procedimento	= b.nr_sequencia
and	b.cd_setor_atendimento	= c.cd_setor_atendimento

union all

select 	a.vl_liberado,
	c.cd_centro_custo
from 	setor_atendimento c,
	material_atend_paciente b,
	material_repasse a
where a.nr_repasse_terceiro in (WITH RECURSIVE cte AS (
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')   UNION ALL
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')  JOIN cte c ON ()

) SELECT * FROM cte;
)
and	a.nr_seq_material	= b.nr_sequencia
and	b.cd_setor_atendimento	= c.cd_setor_atendimento

union all

select	vl_repasse vl_liberado,
	cd_centro_custo
from 	repasse_terceiro_item
where nr_repasse_terceiro in (WITH RECURSIVE cte AS (
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')   UNION ALL
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')  JOIN cte c ON ()

) SELECT * FROM cte;
) ) x
group by x.cd_centro_custo;

C01 CURSOR FOR
SELECT	nr_repasse_terceiro
from	repasse_terceiro
where	' ' || ds_lista_repasse_p || ' ' like '% ' || nr_repasse_terceiro || ' %';

C02 CURSOR FOR
SELECT	a.cd_tributo,
	b.nr_repasse_terceiro,
	sum(coalesce(obter_valor_repasse(nr_repasse_terceiro,'L'),0))
from	repasse_terceiro_venc b,
	repasse_terc_venc_trib a
where	a.nr_seq_rep_venc	= b.nr_sequencia
and	' ' || ds_lista_repasse_p || ' ' like '% ' || b.nr_repasse_terceiro || ' %'
having	count(b.nr_repasse_terceiro) = 1	/* so gerar os tributos caso o usuario selecione apenas um repasse */
group 	by a.cd_tributo,
	b.nr_repasse_terceiro;

C03 CURSOR FOR
SELECT	nr_titulo
from	repasse_terceiro_venc
where	' ' || ds_lista_repasse_p || ' ' like '% ' || nr_repasse_terceiro || ' %'
and	(nr_titulo IS NOT NULL AND nr_titulo::text <> '')
order by nr_titulo desc;

c04 CURSOR FOR
SELECT	sum(x.vl_liberado),
	x.cd_centro_custo,
	x.cd_procedimento,
	x.ie_origem_proced,
	x.cd_material
from (SELECT	a.vl_liberado,
		c.cd_centro_custo,
		b.cd_procedimento,
		b.ie_origem_proced,
		null cd_material
	from	setor_atendimento c,
		procedimento_paciente b,
		procedimento_repasse a
	where	b.cd_setor_atendimento	= c.cd_setor_atendimento
	and	b.ie_origem_proced	= coalesce(ie_origem_proced_p,b.ie_origem_proced)
	and	b.cd_procedimento	= coalesce(cd_procedimento_p,b.cd_procedimento)
	and	a.nr_seq_procedimento	= b.nr_sequencia
	and	(a.nr_repasse_terceiro IS NOT NULL AND a.nr_repasse_terceiro::text <> '')
	and	a.nr_repasse_terceiro in (WITH RECURSIVE cte AS (
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')   UNION ALL
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')  JOIN cte c ON ()

) SELECT * FROM cte;
)
	
union all

	select	a.vl_liberado,
		c.cd_centro_custo,
		null cd_procedimento,
		null ie_origem_proced,
		b.cd_material
	from	setor_atendimento c,
		material_atend_paciente b,
		material_repasse a
	where	b.cd_setor_atendimento	= c.cd_setor_atendimento
	and	b.cd_material		= coalesce(cd_material_p,b.cd_material)
	and	a.nr_seq_material	= b.nr_sequencia
	and	(a.nr_repasse_terceiro IS NOT NULL AND a.nr_repasse_terceiro::text <> '')
	and	a.nr_repasse_terceiro in (WITH RECURSIVE cte AS (
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')   UNION ALL
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')  JOIN cte c ON ()

) SELECT * FROM cte;
)
	
union all

	select	a.vl_repasse vl_liberado,
		a.cd_centro_custo,
		null cd_procedimento,
		null ie_origem_proced,
		null cd_material
	from	repasse_terceiro_item a
	where	(a.nr_repasse_terceiro IS NOT NULL AND a.nr_repasse_terceiro::text <> '')
	and	nr_repasse_terceiro in (WITH RECURSIVE cte AS (
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')   UNION ALL
 select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')  JOIN cte c ON ()

) SELECT * FROM cte;
) ) x
group by	x.cd_centro_custo,
	x.cd_procedimento,
	x.ie_origem_proced,
	x.cd_material;

c_observacao_repasse CURSOR(	nr_seq_terceiro_pc repasse_terceiro.nr_seq_terceiro%type,
				ds_lista_repasse_pc text) FOR
	SELECT 	nr_repasse_terceiro, ds_observacao
	from 	repasse_terceiro
	where 	' ' || ds_lista_repasse_pc || ' ' like '% ' || nr_repasse_terceiro || ' %'
	and 	nr_seq_terceiro = nr_seq_terceiro_pc;	

C05 CURSOR FOR
SELECT	cd_estabelecimento,
	nr_seq_terceiro
from	repasse_terceiro
where	' ' || ds_lista_repasse_p || ' ' like '% ' || nr_repasse_terceiro || ' %'
group by cd_estabelecimento,
	nr_seq_terceiro;

C06 CURSOR FOR
SELECT	b.cd_material,
	b.cd_procedimento,
	null,
	b.ie_origem_proced,
	b.cd_conta_contabil,
	b.cd_conta_financ,
	b.cd_centro_custo,
	b.vl_repasse
from 	repasse_terceiro a,
	repasse_terceiro_item b
where 	a.nr_repasse_terceiro = b.nr_repasse_terceiro
and 	(((b.cd_material IS NOT NULL AND b.cd_material::text <> '') and coalesce(b.cd_procedimento::text, '') = '') or (coalesce(b.cd_material::text, '') = '' and (b.cd_procedimento IS NOT NULL AND b.cd_procedimento::text <> '')))
and	a.nr_repasse_terceiro in (WITH RECURSIVE cte AS (
SELECT (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')  UNION ALL
SELECT (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
)

union

select 	null,
	c.cd_procedimento,
	null,
	c.ie_origem_proced,
	c.cd_conta_contabil,
	null,
	( select max(cd_centro_custo) from centro_custo where ds_centro_custo = c.ds_centro_custo ) cd_centro_custo,
	c.vl_repasse
from 	repasse_terceiro a,
	procedimento_repasse c
where 	a.nr_repasse_terceiro = c.nr_repasse_terceiro
and 	(c.cd_procedimento IS NOT NULL AND c.cd_procedimento::text <> '')
and	a.nr_repasse_terceiro in (WITH RECURSIVE cte AS (
select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')  UNION ALL
select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
)

union

select	d.cd_material,
	null,
	d.qt_material,
	null,
	d.cd_conta_contabil,
	null,
	( select max(cd_centro_custo) from centro_custo where ds_centro_custo = d.ds_centro_custo ) cd_centro_custo,
	d.vl_repasse
from 	repasse_terceiro a,
	material_repasse d
where	a.nr_repasse_terceiro = d.nr_repasse_terceiro
and 	(d.cd_material IS NOT NULL AND d.cd_material::text <> '')
and	a.nr_repasse_terceiro in (WITH RECURSIVE cte AS (
select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '')  UNION ALL
select (regexp_substr(ds_lista_repasse_w,'[^ ]+', 1, level))::numeric   (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level) IS NOT NULL AND (regexp_substr(ds_lista_repasse_w, '[^ ]+', 1, level))::text <> '') JOIN cte c ON ()

) SELECT * FROM cte;
);

C07 CURSOR FOR
SELECT 	coalesce(cd_material, 0),
	coalesce(cd_procedimento, 0)
from 	nota_fiscal_item
where 	nr_sequencia = nr_sequencia_p;

BEGIN
if (dt_entrada_saida_p IS NOT NULL AND dt_entrada_saida_p::text <> '') then
	dt_entrada_saida_w	:= to_date(to_char(dt_entrada_saida_p, 'dd/mm/yyyy') || ' ' ||  to_char(clock_timestamp(),'hh24:mi:ss') ,'dd/mm/yyyy hh24:mi:ss');
end if;

select	sum(coalesce(obter_valor_repasse(nr_repasse_terceiro,'L'),0))
into STRICT	vl_liberado_w
from	repasse_terceiro
where	' ' || ds_lista_repasse_p || ' ' like '% ' || nr_repasse_terceiro || ' %';


open C05;
loop
fetch C05 into	
	cd_estabelecimento_w,
	nr_seq_terceiro_w;
EXIT WHEN NOT FOUND; /* apply on C05 */
	begin

	select	cd_pessoa_fisica,
		cd_cgc
	into STRICT	cd_pessoa_fisica_w,
		cd_cgc_w
	from	terceiro
	where	nr_sequencia = nr_seq_terceiro_w;

	select	cd_cgc
	into STRICT	cd_cgc_estabelecimento_w
	from	estabelecimento
	where	cd_estabelecimento	= cd_estabelecimento_w;

	select	coalesce(max(cd_nat_oper_compra_ne),1102)
	into STRICT	cd_natureza_operacao_ne_w
	from	parametro_compras
	where	cd_estabelecimento	= cd_estabelecimento_w;

	cd_natureza_operacao_w	:= cd_natureza_operacao_ne_w;
	select	coalesce(max(cd_natureza_operacao),0)
	into STRICT	cd_natureza_operacao_cad_w
	from	natureza_operacao
	where	cd_natureza_operacao	= cd_natureza_operacao_w;
	if (cd_natureza_operacao_cad_w = 0) then
		cd_natureza_operacao_w	:= 111;
	end if;

	select	coalesce(max(cd_natureza_operacao), 0)
	into STRICT	cd_natureza_op_nf_w
	from	operacao_nota
	where	cd_operacao_nf = cd_operacao_nota_p;
	if (cd_natureza_op_nf_w > 0) then
		cd_natureza_operacao_w	:= cd_natureza_op_nf_w;
	end if;

	ie_tipo_nota_w		:= 'EN';
	if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
		ie_tipo_nota_w	:= 'EF';
	end if;

	select (coalesce(max(nr_sequencia_nf),0)+1)
	into STRICT	nr_sequencia_nf_w
	from	nota_fiscal
	where	cd_estabelecimento = cd_estabelecimento_w
	and	cd_cgc_emitente = coalesce(cd_cgc_w, cd_cgc_estabelecimento_w)
	and	nr_nota_fiscal     = nr_nota_fiscal_p
	and	cd_serie_nf        = cd_serie_nf_p;

	select	nextval('nota_fiscal_seq')
	into STRICT	nr_sequencia_p
	;

	ds_observacao_w := '';

	if (coalesce(ie_exporta_obs_p,'N') = 'S') then
		for r_c_observacao_repasse in c_observacao_repasse(nr_seq_terceiro_w, ds_lista_repasse_p) loop
			ds_observacao_ww := wheb_mensagem_pck.get_texto(1049715,'NR_REPASSE_TERCEIRO='||r_c_observacao_repasse.nr_repasse_terceiro||';DS_OBSERVACAO='|| r_c_observacao_repasse.ds_observacao);
			ds_observacao_w := substr(ds_observacao_w || ds_observacao_ww || Chr(13) || CHR(10),1,4000);
		end loop;
	end if;

	insert into nota_fiscal(
		cd_estabelecimento,
		cd_cgc_emitente,
		cd_serie_nf,
		nr_nota_fiscal,
		nr_sequencia_nf,
		cd_operacao_nf,
		dt_emissao,
		dt_entrada_saida,
		ie_acao_nf,
		ie_emissao_nf,
		ie_tipo_frete,
		vl_mercadoria,
		vl_total_nota,
		qt_peso_bruto,
		qt_peso_liquido,
		dt_atualizacao,
		nm_usuario,
		cd_condicao_pagamento,
		cd_cgc,
		vl_ipi,
		vl_descontos,
		vl_frete,
		vl_seguro,
		vl_despesa_acessoria,
		cd_natureza_operacao,
		vl_desconto_rateio,
		ie_situacao,
		nr_lote_contabil,
		nr_sequencia,
		cd_pessoa_fisica,
		ds_observacao,
		ie_tipo_nota)
	values (cd_estabelecimento_w,
		coalesce(cd_cgc_w, cd_cgc_estabelecimento_w),
		cd_serie_nf_p,
		nr_nota_fiscal_p,
		nr_sequencia_nf_w,
		cd_operacao_nota_p,
		coalesce(dt_emissao_p, trunc(clock_timestamp())),
		coalesce(dt_entrada_saida_w, clock_timestamp()),
		'1',
		'0',
		0,
		vl_liberado_w,
		vl_liberado_w,
		0,
		0,
		clock_timestamp(),
		nm_usuario_p,
		cd_condicao_pagto_p,
		cd_cgc_w,
		0,
		0,
		0,
		0,
		0,
		cd_natureza_operacao_w,
		0,
		'1',
		0,
		nr_sequencia_p,
		cd_pessoa_fisica_w,
		CASE WHEN ie_exporta_obs_p ='N' THEN wheb_mensagem_pck.get_texto(800044,'DS_LISTA_REPASSE_P='||substr(ds_lista_repasse_p,1,250))  ELSE substr(ds_observacao_w,1,4000) END ,
		ie_tipo_nota_w);

	end;
end loop;
close C05;

ie_gerar_item_repasse_w := coalesce(obter_valor_param_usuario(40, 502, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

if ((coalesce(ie_agrupa_centro_p,'N') = 'N') and (coalesce(ie_gerar_item_repasse_w, 'N') = 'S') and (coalesce(cd_material_p::text, '') = '') and (coalesce(cd_procedimento_p::text, '') = '')) then
	
	ds_lista_repasse_w	:= substr(ds_lista_repasse_p,2,length(ds_lista_repasse_p)-2);

	open C06;
	loop
	fetch C06 into	
		cd_material_w,
		cd_procedimento_w,
		qt_material_w,
		ie_origem_proced_w,
		cd_conta_contabil_w,
		nr_seq_conta_financ_w,
		cd_centro_custo_repasse_w,
		vl_repasse_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */

		select (coalesce(max(nr_item_nf),0)+1)
		into STRICT	nr_item_nf_w
		from	nota_fiscal_item
		where	nr_sequencia = nr_sequencia_p;
		
		if (cd_material_w IS NOT NULL AND cd_material_w::text <> '') then
			select	substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UMC'),1,30) cd_unidade_medida_compra,
				substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UME'),1,30) cd_unidade_medida_estoque
			into STRICT	cd_unidade_medida_compra_w,
				cd_unidade_medida_estoque_w
			from	material
			where	cd_material = cd_material_w;
		end if;
		if (coalesce(nr_seq_conta_financ_w::text, '') = '') then
			nr_seq_conta_financ_w := obter_conta_financeira(
				'S', cd_estabelecimento_w, cd_material_p, cd_procedimento_p, ie_origem_proced_p, null, null, coalesce(cd_cgc_w, cd_cgc_estabelecimento_w), cd_centro_custo_w, nr_seq_conta_financ_w, null, cd_operacao_nota_p, null, null, null, null, null, cd_pessoa_fisica_w, null, null, null, null, cd_local_estoque_p, null, null, null, null, null, null);
		end if;

		insert into nota_fiscal_item(
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_nota_fiscal,
			nr_sequencia_nf,
			nr_item_nf,
			cd_natureza_operacao,
			qt_item_nf,
			vl_unitario_item_nf,
			vl_total_item_nf,
			dt_atualizacao,
			nm_usuario,
			vl_frete,
			vl_desconto,
			vl_despesa_acessoria,
			cd_material,
			cd_procedimento,
			ie_origem_proced,
			cd_setor_atendimento,
			cd_conta,
			cd_local_estoque,
			ds_observacao,
			ds_complemento,
			qt_peso_bruto,
			qt_peso_liquido,
			cd_unidade_medida_compra,
			qt_item_estoque,
			cd_unidade_medida_estoque,
			cd_lote_fabricacao,
			dt_validade,
			dt_atualizacao_estoque,
			cd_conta_contabil,
			vl_desconto_rateio,
			vl_seguro,
			cd_centro_custo,
			cd_material_estoque,
			nr_ordem_compra,
			nr_sequencia,
			vl_liquido,
			pr_desconto,
			nr_seq_conta_financ,
			cd_sequencia_parametro)
		values (	cd_estabelecimento_w,
			coalesce(cd_cgc_w, cd_cgc_estabelecimento_w),
			cd_serie_nf_p,
			nr_nota_fiscal_p,
			nr_sequencia_nf_w,
			nr_item_nf_w,
			cd_natureza_operacao_w,
			coalesce(qt_material_w, 1),
			vl_repasse_w,
			CASE WHEN coalesce(qt_material_w, 1)=1 THEN  vl_repasse_w  ELSE vl_repasse_w * qt_material_w END ,
			clock_timestamp(),
			nm_usuario_p,
			0, /*vl_frete*/
			0, /*vl_desconto*/
			0, /*vl_despesa_acessoria*/
			cd_material_w,
			cd_procedimento_w,
			coalesce(ie_origem_proced_w,ie_origem_proced_p),
			null,
			null,
			CASE WHEN cd_local_estoque_p=0 THEN null  ELSE cd_local_estoque_p END ,
			null,
			null,
			null,
			null,
			cd_unidade_medida_compra_w,
			1,
			cd_unidade_medida_estoque_w,
			null,
			null,
			null,
			cd_conta_contabil_w,
			0,
			0,
			cd_centro_custo_repasse_w,
			cd_material_w,
			null,
			nr_sequencia_p,
			CASE WHEN coalesce(qt_material_w, 1)=1 THEN  vl_repasse_w  ELSE vl_repasse_w * qt_material_w END ,
			0,
			CASE WHEN nr_seq_conta_financ_w=0 THEN null  ELSE nr_seq_conta_financ_w END ,
			philips_contabil_pck.get_parametro_conta_contabil);
	end loop;
	close	C06;

/* Agrupar valores de repasse por Centro Custo no item da NF - OS262490 */

elsif (coalesce(ie_agrupa_centro_p,'N') = 'S') then
	begin

	ds_lista_repasse_w	:= substr(ds_lista_repasse_p,2,length(ds_lista_repasse_p)-2);

	open C00;
	loop
	fetch C00 into
		vl_liberado_w,
		cd_centro_custo_agrup_w;
	EXIT WHEN NOT FOUND; /* apply on C00 */
		begin

		cd_centro_custo_w	:= cd_centro_custo_agrup_w;

		ie_tipo_conta_w	:= 3;
		if (coalesce(cd_centro_custo_w::text, '') = '') then
			ie_tipo_conta_w	:= 2;
		end if;

		if (cd_material_p IS NOT NULL AND cd_material_p::text <> '') then
			SELECT * FROM define_conta_material(
				cd_estabelecimento_w, cd_material_p, ie_tipo_conta_w, 0, 0, 0, 0, 0, 0, 0, cd_local_estoque_p, Null, coalesce(dt_entrada_saida_p, trunc(clock_timestamp())), cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
		elsif (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') then
			SELECT * FROM Define_Conta_Procedimento(
				cd_estabelecimento_w, cd_procedimento_p, ie_origem_proced_p, ie_tipo_conta_w, 0, 0, null, null, null, null, null, coalesce(dt_entrada_saida_p, trunc(clock_timestamp())), cd_conta_contabil_w, cd_centro_custo_w, null, 'N', null, null, null, null, null, null, null, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
		end if;	
	
		select (coalesce(max(nr_item_nf),0)+1)
		into STRICT	nr_item_nf_w
		from	nota_fiscal_item
		where	nr_sequencia = nr_sequencia_p;

		if (cd_material_p IS NOT NULL AND cd_material_p::text <> '') then
			select	substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UMC'),1,30) cd_unidade_medida_compra,
				substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UME'),1,30) cd_unidade_medida_estoque
			into STRICT	cd_unidade_medida_compra_w,
				cd_unidade_medida_estoque_w
			from	material
			where	cd_material = cd_material_p;
		end if;

		nr_seq_conta_financ_w := obter_conta_financeira(
			'S', cd_estabelecimento_w, cd_material_p, null, null, null, null, coalesce(cd_cgc_w, cd_cgc_estabelecimento_w), cd_centro_custo_w, nr_seq_conta_financ_w, null, cd_operacao_nota_p, null, null, null, null, null, cd_pessoa_fisica_w, null, null, null, null, cd_local_estoque_p, null, null, null, null, null, null);
	
		if (nr_seq_conta_financ_w = 0) then
			nr_seq_conta_financ_w := null;
		end if;	

		if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (coalesce(ie_origem_proced_p::text, '') = '') then
			begin
			select	max(ie_origem_proced)
			into STRICT	ie_origem_proced_w
			from 	procedimento
			where 	cd_procedimento = cd_procedimento_p;
			end;
		end if;

		insert into nota_fiscal_item(
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_nota_fiscal,
			nr_sequencia_nf,
			nr_item_nf,
			cd_natureza_operacao,
			qt_item_nf,
			vl_unitario_item_nf,
			vl_total_item_nf,
			dt_atualizacao,
			nm_usuario,
			vl_frete,
			vl_desconto,
			vl_despesa_acessoria,
			cd_material,
			cd_procedimento,
			ie_origem_proced,
			cd_setor_atendimento,
			cd_conta,
			cd_local_estoque,
			ds_observacao,
			ds_complemento,
			qt_peso_bruto,
			qt_peso_liquido,
			cd_unidade_medida_compra,
			qt_item_estoque,
			cd_unidade_medida_estoque,
			cd_lote_fabricacao,
			dt_validade,
			dt_atualizacao_estoque,
			cd_conta_contabil,
			vl_desconto_rateio,
			vl_seguro,
			cd_centro_custo,
			cd_material_estoque,
			nr_ordem_compra,
			nr_sequencia,
			vl_liquido,
			pr_desconto,
			nr_seq_conta_financ,
			cd_sequencia_parametro)
		values (	cd_estabelecimento_w,
			coalesce(cd_cgc_w, cd_cgc_estabelecimento_w),
			cd_serie_nf_p,
			nr_nota_fiscal_p,
			nr_sequencia_nf_w,
			nr_item_nf_w,
			cd_natureza_operacao_w,
			1,
			vl_liberado_w,
			vl_liberado_w,
			clock_timestamp(),
			nm_usuario_p,
			0, /*vl_frete*/
			0, /*vl_desconto*/
			0, /*vl_despesa_acessoria*/
			cd_material_p,
			cd_procedimento_p,
			coalesce(ie_origem_proced_w,ie_origem_proced_p),
			null,
			null,
			CASE WHEN cd_local_estoque_p=0 THEN null  ELSE cd_local_estoque_p END ,
			null,
			null,
			null,
			null,
			cd_unidade_medida_compra_w,
			1,
			cd_unidade_medida_estoque_w,
			null,
			null,
			null,
			cd_conta_contabil_w,
			0,
			0,
			CASE WHEN cd_centro_custo_agrup_w=0 THEN null  ELSE cd_centro_custo_agrup_w END ,
			cd_material_p,
			null,
			nr_sequencia_p,
			vl_liberado_w,
			0,
			nr_seq_conta_financ_w,
			philips_contabil_pck.get_parametro_conta_contabil);
	

		end;
	end loop;
	close C00;

	end;

/* agrupar por item (procedimento/material) */

elsif (ie_agrupa_centro_p = 'I') then
	
	ds_lista_repasse_w	:= substr(ds_lista_repasse_p,2,length(ds_lista_repasse_p)-2);

	open	c04;
	loop
	fetch	c04 into
		vl_liberado_w,
		cd_centro_custo_agrup_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_material_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */

		cd_centro_custo_w	:= cd_centro_custo_agrup_w;

		ie_tipo_conta_w	:= 3;

		if (coalesce(cd_centro_custo_w::text, '') = '') then
			ie_tipo_conta_w	:= 2;
		end if;

		if (cd_material_p IS NOT NULL AND cd_material_p::text <> '') then
			SELECT * FROM define_conta_material(
				cd_estabelecimento_w, cd_material_p, ie_tipo_conta_w, 0, 0, 0, 0, 0, 0, 0, cd_local_estoque_p, Null, coalesce(dt_entrada_saida_p, trunc(clock_timestamp())), cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
		elsif (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') then
			SELECT * FROM Define_Conta_Procedimento(
				cd_estabelecimento_w, cd_procedimento_p, ie_origem_proced_p, ie_tipo_conta_w, 0, 0, null, null, null, null, null, coalesce(dt_entrada_saida_p, trunc(clock_timestamp())), cd_conta_contabil_w, cd_centro_custo_w, null, 'N') INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
		end if;	
	
		select (coalesce(max(nr_item_nf),0)+1)
		into STRICT	nr_item_nf_w
		from	nota_fiscal_item
		where	nr_sequencia = nr_sequencia_p;

		if (cd_material_p IS NOT NULL AND cd_material_p::text <> '') then
			select	substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UMC'),1,30) cd_unidade_medida_compra,
				substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UME'),1,30) cd_unidade_medida_estoque
			into STRICT	cd_unidade_medida_compra_w,
				cd_unidade_medida_estoque_w
			from	material
			where	cd_material = cd_material_p;
		end if;

		nr_seq_conta_financ_w := obter_conta_financeira(
			'S', cd_estabelecimento_w, cd_material_p, cd_procedimento_p, ie_origem_proced_p, null, null, coalesce(cd_cgc_w, cd_cgc_estabelecimento_w), cd_centro_custo_w, nr_seq_conta_financ_w, null, cd_operacao_nota_p, null, null, null, null, null, cd_pessoa_fisica_w, null, null, null, null, cd_local_estoque_p, null, null, null, null, null, null);
	
		if (nr_seq_conta_financ_w = 0) then
			nr_seq_conta_financ_w := null;
		end if;	

		if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (coalesce(ie_origem_proced_p::text, '') = '') and (coalesce(ie_origem_proced_w::text, '') = '') then			
			begin			
			select	max(ie_origem_proced)
			into STRICT	ie_origem_proced_w
			from 	procedimento
			where 	cd_procedimento = cd_procedimento_p;				
			end;						
		end if;
	
		insert into nota_fiscal_item(
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_serie_nf,
			nr_nota_fiscal,
			nr_sequencia_nf,
			nr_item_nf,
			cd_natureza_operacao,
			qt_item_nf,
			vl_unitario_item_nf,
			vl_total_item_nf,
			dt_atualizacao,
			nm_usuario,
			vl_frete,
			vl_desconto,
			vl_despesa_acessoria,
			cd_material,
			cd_procedimento,
			ie_origem_proced,
			cd_setor_atendimento,
			cd_conta,
			cd_local_estoque,
			ds_observacao,
			ds_complemento,
			qt_peso_bruto,
			qt_peso_liquido,
			cd_unidade_medida_compra,
			qt_item_estoque,
			cd_unidade_medida_estoque,
			cd_lote_fabricacao,
			dt_validade,
			dt_atualizacao_estoque,
			cd_conta_contabil,
			vl_desconto_rateio,
			vl_seguro,
			cd_centro_custo,
			cd_material_estoque,
			nr_ordem_compra,
			nr_sequencia,
			vl_liquido,
			pr_desconto,
			nr_seq_conta_financ,
			cd_sequencia_parametro)
		values (	cd_estabelecimento_w,
			coalesce(cd_cgc_w, cd_cgc_estabelecimento_w),
			cd_serie_nf_p,
			nr_nota_fiscal_p,
			nr_sequencia_nf_w,
			nr_item_nf_w,
			cd_natureza_operacao_w,
			1,
			vl_liberado_w,
			vl_liberado_w,
			clock_timestamp(),
			nm_usuario_p,
			0, /*vl_frete*/
			0, /*vl_desconto*/
			0, /*vl_despesa_acessoria*/
			coalesce(cd_material_w,cd_material_p),
			coalesce(cd_procedimento_w,cd_procedimento_p),
			coalesce(ie_origem_proced_w,ie_origem_proced_p),
			null,
			null,
			CASE WHEN cd_local_estoque_p=0 THEN null  ELSE cd_local_estoque_p END ,
			null,
			null,
			null,
			null,
			cd_unidade_medida_compra_w,
			1,
			cd_unidade_medida_estoque_w,
			null,
			null,
			null,
			cd_conta_contabil_w,
			0,
			0,
			CASE WHEN cd_centro_custo_agrup_w=0 THEN null  ELSE cd_centro_custo_agrup_w END ,
			cd_material_p,
			null,
			nr_sequencia_p,
			vl_liberado_w,
			0,
			nr_seq_conta_financ_w,
			philips_contabil_pck.get_parametro_conta_contabil);

	end	loop;
	close	c04;


/* Procedimento normal, sem agrupar por centro de custo */

elsif (coalesce(ie_agrupa_centro_p,'N') = 'N') then
	begin

	/* Define Conta Contabil do item - OS 40231 - Jerusa */

	select	CASE WHEN cd_centro_custo_p=0 THEN null  ELSE cd_centro_custo_p END
	into STRICT	cd_centro_custo_w
	;

	ie_tipo_conta_w	:= 3;
	if (coalesce(cd_centro_custo_w::text, '') = '') then
		ie_tipo_conta_w	:= 2;
	end if;

	if (cd_material_p IS NOT NULL AND cd_material_p::text <> '') then
		SELECT * FROM define_conta_material(
			cd_estabelecimento_w, cd_material_p, ie_tipo_conta_w, 0, 0, 0, 0, 0, 0, 0, cd_local_estoque_p, Null, coalesce(dt_entrada_saida_p, trunc(clock_timestamp())), cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
	elsif (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') then
		SELECT * FROM Define_Conta_Procedimento(
			cd_estabelecimento_w, cd_procedimento_p, ie_origem_proced_p, ie_tipo_conta_w, 0, 0, null, null, null, null, null, coalesce(dt_entrada_saida_p, trunc(clock_timestamp())), cd_conta_contabil_w, cd_centro_custo_w, null, 'N') INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
	end if;

	select (coalesce(max(nr_item_nf),0)+1)
	into STRICT	nr_item_nf_w
	from	nota_fiscal_item
	where	nr_sequencia = nr_sequencia_p;

	if (cd_material_p IS NOT NULL AND cd_material_p::text <> '') then
		select	substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UMC'),1,30) cd_unidade_medida_compra,
			substr(obter_dados_material_estab(cd_material,cd_estabelecimento_w,'UME'),1,30) cd_unidade_medida_estoque
		into STRICT	cd_unidade_medida_compra_w,
			cd_unidade_medida_estoque_w
		from	material
		where	cd_material = cd_material_p;
	end if;

	nr_seq_conta_financ_w := obter_conta_financeira(
		'S', cd_estabelecimento_w, cd_material_p, null, null, null, null, coalesce(cd_cgc_w, cd_cgc_estabelecimento_w), cd_centro_custo_w, nr_seq_conta_financ_w, null, cd_operacao_nota_p, null, null, null, null, null, cd_pessoa_fisica_w, null, null, null, null, cd_local_estoque_p, null, null, null, null, null, null);

	if (nr_seq_conta_financ_w = 0) then
		nr_seq_conta_financ_w := null;
	end if;	
	
	
	if (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (coalesce(ie_origem_proced_p::text, '') = '') then
		begin
			select	max(ie_origem_proced)
			into STRICT	ie_origem_proced_w
			from 	procedimento
			where 	cd_procedimento = cd_procedimento_p;
		end;
	end if;
	

	insert into nota_fiscal_item(
		cd_estabelecimento,
		cd_cgc_emitente,
		cd_serie_nf,
		nr_nota_fiscal,
		nr_sequencia_nf,
		nr_item_nf,
		cd_natureza_operacao,
		qt_item_nf,
		vl_unitario_item_nf,
		vl_total_item_nf,
		dt_atualizacao,
		nm_usuario,
		vl_frete,
		vl_desconto,
		vl_despesa_acessoria,
		cd_material,
		cd_procedimento,
		ie_origem_proced,
		cd_setor_atendimento,
		cd_conta,
		cd_local_estoque,
		ds_observacao,
		ds_complemento,
		qt_peso_bruto,
		qt_peso_liquido,
		cd_unidade_medida_compra,
		qt_item_estoque,
		cd_unidade_medida_estoque,
		cd_lote_fabricacao,
		dt_validade,
		dt_atualizacao_estoque,
		cd_conta_contabil,
		vl_desconto_rateio,
		vl_seguro,
		cd_centro_custo,
		cd_material_estoque,
		nr_ordem_compra,
		nr_sequencia,
		vl_liquido,
		pr_desconto,
		nr_seq_conta_financ,
		cd_sequencia_parametro)
	values (	cd_estabelecimento_w,
		coalesce(cd_cgc_w, cd_cgc_estabelecimento_w),
		cd_serie_nf_p,
		nr_nota_fiscal_p,
		nr_sequencia_nf_w,
		nr_item_nf_w,
		cd_natureza_operacao_w,
		1,
		vl_liberado_w,
		vl_liberado_w,
		clock_timestamp(),
		nm_usuario_p,
		0, /*vl_frete*/
		0, /*vl_desconto*/
		0, /*vl_despesa_acessoria*/
		cd_material_p,
		cd_procedimento_p,
		coalesce(ie_origem_proced_w,ie_origem_proced_p),
		null,
		null,
		CASE WHEN cd_local_estoque_p=0 THEN null  ELSE cd_local_estoque_p END ,
		null,
		null,
		null,
		null,
		cd_unidade_medida_compra_w,
		1,
		cd_unidade_medida_estoque_w,
		null,
		null,
		null,
		cd_conta_contabil_w,
		0,
		0,
		CASE WHEN cd_centro_custo_p=0 THEN null  ELSE cd_centro_custo_p END ,
		cd_material_p,
		null,
		nr_sequencia_p,
		vl_liberado_w,
		0,
		nr_seq_conta_financ_w,
		philips_contabil_pck.get_parametro_conta_contabil);
	end;
end if;

begin
	select 	nr_sequencia
	into STRICT	nr_sequencia_nf_w
	from 	nota_fiscal_item
	where 	nr_sequencia = nr_sequencia_p  LIMIT 1;
exception
	when no_data_found then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173254);
end;

open C07;
loop
fetch C07 into
	cd_material_w,
	cd_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on C07 */
	
	if (cd_material_w = 0 AND cd_procedimento_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1159304);
	end if;
end loop;
close C07;

/* OS 53318 - Jerusa */




/* Francisco - OS 195692 - 18/02/2010 - Passei o vinculo do fim para ca,
para tratar na geracao de tributos */
OPEN C01;
LOOP
FETCH C01 into
		nr_repasse_terceiro_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

	insert into repasse_nota_fiscal(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		nr_repasse_terceiro,
		nr_seq_nota_fiscal)
	values (nextval('repasse_nota_fiscal_seq'),
		clock_timestamp(),
		nm_usuario_p,
		nr_repasse_terceiro_w,
		nr_sequencia_p);
END LOOP;
CLOSE C01;

if (ie_gerar_tributo_p = 'NF') then

	CALL gerar_tributos_fornecedor_item(nr_sequencia_p, '0', '', 'N', coalesce(dt_entrada_saida_p, trunc(clock_timestamp())), nm_usuario_p);
	CALL Gerar_tributos_fornecedor(nr_sequencia_p, '', nm_usuario_p, coalesce(dt_entrada_saida_p, trunc(clock_timestamp())));

elsif (ie_gerar_tributo_p = 'R') then

	OPEN C02;
	LOOP
	FETCH C02 into
		cd_tributo_w,
		nr_repasse_terc_trib_w,
		vl_liberado_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		select	sum(pr_tributo),
			sum(vl_imposto),
			sum(vl_reducao),
			sum(vl_nao_retido),
			sum(vl_base_nao_retido),
			sum(vl_trib_adic),
			sum(vl_base_adic)
		into STRICT	pr_tributo_w,
			vl_imposto_w,
			vl_reducao_base_w,
			vl_trib_nao_retido_w,
			vl_base_nao_retido_w,
			vl_trib_adic_w,
			vl_base_adic_w	
		from	repasse_terceiro_venc b,
			repasse_terc_venc_trib a
		where	a.nr_seq_rep_venc	= b.nr_sequencia
		and	b.nr_repasse_terceiro 	= nr_repasse_terc_trib_w
		and	cd_tributo		= cd_tributo_w;

		select	count(*)
		into STRICT	qt_existe_w
		from	nota_fiscal_trib
		where	nr_sequencia	= nr_sequencia_p
		and	cd_tributo	= cd_tributo_w;
		
		if (qt_existe_w = 0) then
			insert into nota_fiscal_trib(nr_sequencia,
					cd_tributo,
					vl_tributo,
					dt_atualizacao,
					nm_usuario,
					vl_base_calculo,
					tx_tributo,
					vl_reducao_base,
					vl_trib_nao_retido,
					vl_base_nao_retido,
					vl_trib_adic,
					vl_base_adic,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ie_origem_trib,
					nr_seq_interno)
				values (nr_sequencia_p,
					cd_tributo_w,
					vl_imposto_w,
					clock_timestamp(),
					nm_usuario_p,
					vl_liberado_w,
					pr_tributo_w,
					vl_reducao_base_w,
					vl_trib_nao_retido_w,
					vl_base_nao_retido_w,
					vl_trib_adic_w,
					vl_base_adic_w,
					clock_timestamp(),
					nm_usuario_p,
					'R',
					nextval('nota_fiscal_trib_seq'));
		end if;
		end;
	END LOOP;
	CLOSE C02;
end if;

CALL atualiza_total_nota_fiscal(nr_sequencia_p, nm_usuario_p);

if (ie_gerar_vencimento_p = 'CN') then
	CALL Gerar_vencimento_nota_fiscal(nr_sequencia_p, nm_usuario_p);
else
	CALL Gerar_vencto_repasse_nf(nr_sequencia_p,ds_lista_repasse_p,ie_gerar_vencimento_p,nm_usuario_p);
end if;


/* Valor do parametro [43] - Consistir data de vencimento ao vincular um titulo a nota */

select	substr(Obter_Valor_Param_Usuario(40,43,obter_perfil_ativo,nm_usuario_p,0),1,255)
into STRICT	ie_consiste_vencto_w
;

/* Vincula os titulos do vencimento do repasse na Nota Fiscal - OS52381 - Jerusa */


--begin
ie_altera_valor_w := obter_param_usuario(40, 136, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_altera_valor_w);

OPEN C03;
LOOP
FETCH C03 into
	nr_titulo_venc_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
	begin
	ds_consistencia_w := vincular_titulo_pagar_nf(nr_sequencia_p, nr_titulo_venc_w, nm_usuario_p, ie_consiste_vencto_w, ie_altera_valor_w, ds_consistencia_w);
	if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
		ds_consistencia_p	:= ds_consistencia_w;
	end if;
	end;
END LOOP;
CLOSE C03;
/* Retirado por Fabio, para permitir gerar a nota mesmo sem um titulo no repasse, pois a nota vai gerar os titulos no momento do calculo
exception
	when no_data_found then 
		pplication_error(-20011,'Repasse nao possui titulo gerado !');
end;
*/
ds_texto_w	:= substr(wheb_mensagem_pck.get_texto(307553,'DS_LISTA_REPASSE_P='||ds_lista_repasse_p||';IE_GERAR_TRIBUTO_P='||ie_gerar_tributo_p),1,255);
CALL gerar_historico_nota_fiscal(nr_sequencia_p, nm_usuario_p, '12', ds_texto_w);

commit;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_repasse_nf ( nr_nota_fiscal_p bigint, cd_serie_nf_p text, nm_usuario_p text, cd_operacao_nota_p bigint, dt_emissao_p timestamp, dt_entrada_saida_p timestamp, ds_lista_repasse_p text, cd_material_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, cd_local_estoque_p bigint, cd_centro_custo_p bigint, cd_condicao_pagto_p bigint, ie_gerar_tributo_p text, ie_gerar_vencimento_p text, ie_agrupa_centro_p text, ie_exporta_obs_p text default 'N', nr_sequencia_p INOUT bigint DEFAULT NULL, ds_consistencia_p INOUT text DEFAULT NULL) FROM PUBLIC;

