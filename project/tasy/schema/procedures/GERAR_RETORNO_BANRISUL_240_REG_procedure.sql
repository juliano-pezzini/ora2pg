-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_retorno_banrisul_240_reg ( nr_seq_cobr_escrit_p bigint, nm_usuario_p text) AS $body$
DECLARE


/*===================================================================================
		=>>>>>	A T E N Ç Ã O        <<<<<<=

Esta procedure é uma cópia da GERAR_RET_COBR_BANRISUL_240
com alteração apenas nas ocorrência de retorno e atualização de confirmação de entrada de título,
para contemplar o projeto de Cobranças Registradas, OS 1304806.

Como se trata de um projeto e não possuímos cliente para validar junto ao banco,
os defeitos devem ser verificados com Peterson antes de serem documentados.
====================================================================================*/
vl_titulo_w		titulo_receber_cobr.vl_cobranca%type;
vl_acrescimo_w		titulo_receber_cobr.vl_acrescimo%type;
vl_desconto_w		titulo_receber_cobr.vl_desconto%type;
vl_liquido_w		titulo_receber_cobr.vl_liquidacao%type;
vl_outras_despesas_w	titulo_receber_cobr.vl_despesa_bancaria%type;
vl_saldo_inclusao_w 	titulo_receber.vl_saldo_titulo%type;
vl_abatimento_w		double precision;
dt_liquidacao_w		titulo_receber_cobr.dt_liquidacao%type;
cd_ocorrencia_ret_w	titulo_receber_cobr.nr_seq_ocorrencia_ret%type;
nr_seq_ocorrencia_ret_w banco_ocorr_escrit_ret.nr_sequencia%type;
ds_lista_titulos_w	varchar(4000);
nr_seq_arquivo_w	cobranca_escritural.nr_seq_arquivo%type;
nr_seq_reg_T_w		bigint;
nr_seq_reg_U_w		bigint;
nr_titulo_w		numeric(25);
cont_w			bigint;

c01 CURSOR FOR
	SELECT	nr_sequencia,
		(trim(both substr(ds_string,106,25)))::numeric  nr_titulo,
		(trim(both substr(ds_string,82,15)))::numeric /100 vl_titulo,
		(trim(both substr(ds_string,16,2)))::numeric  cd_movto
	from	w_retorno_banco
	where	nr_seq_cobr_escrit	= nr_seq_cobr_escrit_p
	and	substr(ds_string,8,1)	= '3'
	and	substr(ds_string,14,1)	= 'T';


BEGIN

open c01;
loop
fetch c01 into
	nr_seq_reg_T_w,
	nr_titulo_w,
	vl_titulo_w,
	cd_ocorrencia_ret_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	select	count(*)
	into STRICT	cont_w
	from	titulo_receber
	where	nr_titulo	= nr_titulo_w;

	if (cont_w = 0) and (length(ds_lista_titulos_w) <= 3990) then

		if (coalesce(ds_lista_titulos_w::text, '') = '') then
			ds_lista_titulos_w	:= nr_titulo_w;
		else
			ds_lista_titulos_w	:= ds_lista_titulos_w || ', ' || nr_titulo_w;
		end if;

	elsif (cd_ocorrencia_ret_w in (02, 06, 09, 17, 23, 25, 28)) then

		nr_seq_reg_U_w := nr_seq_reg_T_w + 1;

		select	(substr(ds_string,18,15))::numeric /100,
			(substr(ds_string,33,15))::numeric /100,
			(substr(ds_string,48,15))::numeric /100,
			(substr(ds_string,93,15))::numeric /100,
			(substr(ds_string,108,15))::numeric /100,
			to_date(CASE WHEN substr(ds_string,146,8)='00000000' THEN null  ELSE substr(ds_string,146,8) END ,'dd/mm/yyyy')
		into STRICT	vl_acrescimo_w,
			vl_desconto_w,
			vl_abatimento_w,
			vl_liquido_w,
			vl_outras_despesas_w,
			dt_liquidacao_w
		from	w_retorno_banco
		where	nr_sequencia	= nr_seq_reg_U_w;

		if (vl_acrescimo_w <= 0) then
			vl_acrescimo_w	:= vl_liquido_w - vl_titulo_w;
		end if;

		select 	max(a.nr_sequencia)
		into STRICT	nr_seq_ocorrencia_ret_w
		from	banco_ocorr_escrit_ret a
		where	a.cd_banco = 41
		and	a.cd_ocorrencia = cd_ocorrencia_ret_w;

		select	coalesce(max(vl_saldo_titulo),0)
		into STRICT	vl_saldo_inclusao_w
		from	titulo_receber
		where	nr_titulo	= nr_titulo_w;

		if (cont_w > 0) then
			insert	into titulo_receber_cobr(	nr_sequencia,
					nr_titulo,
					cd_banco,
					vl_cobranca,
					vl_desconto,
					vl_acrescimo,
					vl_despesa_bancaria,
					vl_liquidacao,
					vl_saldo_inclusao,
					dt_liquidacao,
					dt_atualizacao,
					nm_usuario,
					nr_seq_cobranca,
					nr_seq_ocorrencia_ret)
			values (	nextval('titulo_receber_cobr_seq'),
					nr_titulo_w,
					041,
					vl_titulo_w,
					vl_desconto_w,
					vl_acrescimo_w,
					vl_outras_despesas_w,
					vl_liquido_w,
					vl_saldo_inclusao_w,
					dt_liquidacao_w,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_cobr_escrit_p,
					nr_seq_ocorrencia_ret_w);

			/*Segundo o layout, caso o Código de Movimento para o retorno seja 02, trata-se de Entrada Confirmada. Nesses casos, atualizar o titulo_receber*/

			if (cd_ocorrencia_ret_w = '02') then
				update	titulo_receber a
				set	a.ie_entrada_confirmada = 'C'
				where	a.nr_titulo = nr_titulo_w;
			end if;

		else
			insert into cobranca_escrit_log(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_cobranca,
				ds_log)
			values (nextval('cobranca_escrit_log_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_cobr_escrit_p,
				'Não foi importado o título ' || nr_titulo_w || ', pois não foi encontrado no Tasy');
		end if;
	end if;
	end;
end loop;
close c01;

select	(substr(ds_string,158,6))::numeric  nr_seq_arquivo
into STRICT	nr_seq_arquivo_w
from	w_retorno_banco
where	nr_seq_cobr_escrit	= nr_seq_cobr_escrit_p
and	(substr(ds_string,1,3))::numeric  = '041'
and	substr(ds_string,8,1)	= '0';

if (nr_seq_arquivo_w IS NOT NULL AND nr_seq_arquivo_w::text <> '') then
	update	cobranca_escritural
	set	nr_seq_arquivo	= nr_seq_arquivo_w
	where	nr_sequencia	= nr_seq_cobr_escrit_p;
end if;

commit;

if (ds_lista_titulos_w IS NOT NULL AND ds_lista_titulos_w::text <> '') then
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(186814,'DS_LISTA_TITULOS='||ds_lista_titulos_w);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_retorno_banrisul_240_reg ( nr_seq_cobr_escrit_p bigint, nm_usuario_p text) FROM PUBLIC;

