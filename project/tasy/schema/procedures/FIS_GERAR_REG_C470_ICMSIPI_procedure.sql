-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_c470_icmsipi ( nr_seq_controle_p bigint, nr_seq_nota_p bigint) AS $body$
DECLARE


/*REGISTRO C470: ITENS DO DOCUMENTO FISCAL EMITIDO POR ECF (CÓDIGO 02 e2D).*/



-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1) := 'N';
qt_cursor_w 			bigint := 0;
nr_vetor_w  			bigint := 0;

--NOTA_FISCAL_ITEM_TRIB
vl_bc_icms_w   			nota_fiscal_item_trib.vl_base_calculo%type;
vl_icms_w      			nota_fiscal_item_trib.vl_tributo%type;

--FIS_EFD_ICMSIPI_C470
nr_seq_icmsipi_C470_w 	fis_efd_icmsipi_C470.nr_sequencia%type;

-- USUARIO
nm_usuario_w 			usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro c470 restringindo pela sequencia da nota fiscal*/

c_itens_ecf CURSOR FOR
	SELECT	b.cd_material cd_item,
			b.qt_item_nf qt_item,
			null qt_canc,
			substr(coalesce(b.cd_unidade_medida_compra, d.cd_unidade_medida_compra), 1, 6) cd_unid,
			b.vl_liquido vl_item,
			'040' cd_cst_icms,
			substr(Elimina_Caracter(obter_dados_natureza_operacao(a.cd_natureza_operacao,'CF'),'.'),1,4) cd_cfop,
			0 tx_aliq_icms,
			null vl_pis,
			null vl_cofins,
			(SELECT	d.nr_sequencia
			from	fis_variacao_fiscal v,
				fis_dispositivo_legal d
			where	b.nr_seq_variacao_fiscal = v.nr_sequencia
			and	v.cd_dispositivo_legal = d.nr_sequencia) cd_obs
	FROM material d, nota_fiscal a, nota_fiscal_item b
LEFT OUTER JOIN material_fiscal c ON (b.cd_material = c.cd_material)
WHERE b.cd_material   = d.cd_material and a.nr_sequencia	= b.nr_sequencia and a.nr_sequencia	= nr_seq_nota_p;

/*Criação do array com o tipo sendo do cursor eespecificado - c_itens_cupom_fiscal*/

type reg_c_itens_ecf is table of c_itens_ecf%RowType;
vetItensECF reg_c_itens_ecf;

/*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_C470 */

type registro is table of fis_efd_icmsipi_C470%rowtype index by integer;
fis_registros_w registro;

BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_itens_ecf;
loop
fetch c_itens_ecf bulk collect into vetItensECF limit 1000;
	for i in 1 .. vetItensECF.Count loop
		begin

		/*Incrementa a variavel para o array*/

		qt_cursor_w:=	qt_cursor_w + 1;

		if (ie_gerou_dados_bloco_w = 'N') then
			ie_gerou_dados_bloco_w := 'S';
		end if;

		/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_C470 */

		select	nextval('fis_efd_icmsipi_c470_seq')
		into STRICT	nr_seq_icmsipi_C470_w
		;

		/*Inserindo valores no array para realização do forall posteriormente*/

		fis_registros_w[qt_cursor_w].nr_sequencia         	:= nr_seq_icmsipi_C470_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao       	:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario           	:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec  	:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec      	:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].cd_reg               	:= 'C470';
		fis_registros_w[qt_cursor_w].cd_item              	:= vetItensECF[i].cd_item;
		fis_registros_w[qt_cursor_w].qt_item 		  		:= vetItensECF[i].qt_item;
		fis_registros_w[qt_cursor_w].qt_canc 		  		:= vetItensECF[i].qt_canc;
		fis_registros_w[qt_cursor_w].cd_unid 		  		:= vetItensECF[i].cd_unid;
		fis_registros_w[qt_cursor_w].vl_item 		  		:= vetItensECF[i].vl_item;
		fis_registros_w[qt_cursor_w].cd_cst_icms 	  		:= vetItensECF[i].cd_cst_icms;
		fis_registros_w[qt_cursor_w].cd_cfop 		  		:= vetItensECF[i].cd_cfop;
		fis_registros_w[qt_cursor_w].tx_aliq_icms 	  		:= vetItensECF[i].tx_aliq_icms;
		fis_registros_w[qt_cursor_w].vl_pis 		  		:= vetItensECF[i].vl_pis;
		fis_registros_w[qt_cursor_w].vl_cofins 		  		:= vetItensECF[i].vl_cofins;
		fis_registros_w[qt_cursor_w].cd_obs		  			:= vetItensECF[i].cd_obs;
		fis_registros_w[qt_cursor_w].nr_seq_controle 	  	:= nr_seq_controle_p;
		fis_registros_w[qt_cursor_w].nr_seq_nota 	  		:= nr_seq_nota_p;

		if (nr_vetor_w >= 1000) then
			begin
			/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_C470 */

			forall i in fis_registros_w.first .. fis_registros_w.last
				insert into fis_efd_icmsipi_C470 values fis_registros_w(i);

			nr_vetor_w := 0;
			fis_registros_w.delete;

			commit;

			end;
		end if;

		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w := nr_vetor_w + 1;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_itens_ecf */
end loop;
close c_itens_ecf;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_C470 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update	fis_efd_icmsipi_controle
	set	ie_mov_C 	= 'S'
	where	nr_sequencia 	= nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_c470_icmsipi ( nr_seq_controle_p bigint, nr_seq_nota_p bigint) FROM PUBLIC;

