-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baca_ajuste_comprador () AS $body$
DECLARE

 
/*Criado por Fabio em 30/11/2005. 
Para o ajuste da tabela comprador. 
Porque foi adicionado o estabelecimento na tabela com isto não e possivel cadastrar um mesmo 
comprador para outros estabelecimentos*/
 
 
ds_erro_w		varchar(2000) := '';
ds_erro_sql_w		varchar(255);
ds_retorno_w		varchar(255) := '';
cd_comprador_w		varchar(10);
nm_pessoa_fisica_w	varchar(60);
cd_estabelecimento_w	smallint;
nm_coluna_w		varchar(30);
qt_erro_w		smallint;

C01 CURSOR FOR 
	SELECT	distinct(a.cd_comprador), 
		a.cd_estabelecimento 
	from	ordem_compra a 
	where not exists ( 
		SELECT	1 
		from 	comprador b 
		where	a.cd_comprador = b.cd_pessoa_fisica 
		and	a.cd_estabelecimento = b.cd_estabelecimento) 
	and	(a.cd_estabelecimento IS NOT NULL AND a.cd_estabelecimento::text <> '');

C02 CURSOR FOR 
	SELECT	distinct(a.cd_comprador), 
		a.cd_estabelecimento 
	from	cot_compra a 
	where not exists ( 
		SELECT	1 
		from 	comprador b 
		where	a.cd_comprador = b.cd_pessoa_fisica 
		and	a.cd_estabelecimento = b.cd_estabelecimento) 
	and	(a.cd_estabelecimento IS NOT NULL AND a.cd_estabelecimento::text <> '');

 

BEGIN 
/*--------------------PRIMEIRA PARTE---------------------------*/
 
/*Dropa integridade da ordem de compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE ORDEM_COMPRA DROP CONSTRAINT ORDCOMP_COMPRAD_FK', ds_erro_sql_w);
	delete	from INTEGRIDADE_ATRIBUTO 
	where	nm_tabela = 'ORDEM_COMPRA' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'ORDCOMP_COMPRAD_FK';
 
	delete 	from INTEGRIDADE_REFERENCIAL 
	where	nm_tabela = 'ORDEM_COMPRA' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'ORDCOMP_COMPRAD_FK';
 
/*Dropa integridade da cotação de compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE COT_COMPRA DROP CONSTRAINT COTCOMP_PESFISI_FK', ds_erro_sql_w);
	delete	from INTEGRIDADE_ATRIBUTO 
	where	nm_tabela = 'COT_COMPRA' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'COTCOMP_PESFISI_FK';
 
	delete 	from INTEGRIDADE_REFERENCIAL 
	where	nm_tabela = 'COT_COMPRA' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'COTCOMP_PESFISI_FK';
 
/*Dropa integridade da parametro compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE PARAMETRO_COMPRAS DROP CONSTRAINT PARCOMP_COMPRAD_FK', ds_erro_sql_w);
	delete	from INTEGRIDADE_ATRIBUTO 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'PARCOMP_COMPRAD_FK';
 
	delete 	from INTEGRIDADE_REFERENCIAL 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'PARCOMP_COMPRAD_FK';
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE PARAMETRO_COMPRAS DROP CONSTRAINT PARCOMP_COMPRAD_FK2', ds_erro_sql_w);
	delete	from INTEGRIDADE_ATRIBUTO 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'PARCOMP_COMPRAD_FK2';
 
	delete 	from INTEGRIDADE_REFERENCIAL 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'PARCOMP_COMPRAD_FK2';
 
/*Dropa integridade do local de estoques*/
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE LOCAL_ESTOQUE DROP CONSTRAINT LOCESTO_COMPRAD_FK', ds_erro_sql_w);
	delete	from INTEGRIDADE_ATRIBUTO 
	where	nm_tabela = 'LOCAL_ESTOQUE' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'LOCESTO_COMPRAD_FK';
 
	delete 	from INTEGRIDADE_REFERENCIAL 
	where	nm_tabela = 'LOCAL_ESTOQUE' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'LOCESTO_COMPRAD_FK';
 
 
 
 
 
/*--------------------SEGUNDA PARTE---------------------------*/
 
/*Dropa PK da COMPRADOR*/
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE COMPRADOR DROP CONSTRAINT COMPRAD_PK', ds_erro_sql_w);
	delete	from INDICE_ATRIBUTO 
	where	nm_tabela = 'COMPRADOR' 
	and	nm_indice = 'COMPRAD_PK';
 
	delete	from indice 
	where	nm_tabela = 'COMPRADOR' 
	and	nm_indice = 'COMPRAD_PK';
 
 
 
 
 
 
/*--------------------TERCEIRA PARTE---------------------------*/
 
/*Cria PK da COMPRADOR*/
 
ds_erro_sql_w := Executar_SQL_Dinamico('ALTER TABLE COMPRADOR ADD ( CONSTRAINT COMPRAD_PK Primary Key (CD_PESSOA_FISICA, 
 
CD_ESTABELECIMENTO))', ds_erro_sql_w);
	insert 	into INDICE( 
		nm_tabela, 
		nm_indice, 
		ie_tipo, 
		dt_atualizacao, 
		nm_usuario, 
		ds_indice, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values ('COMPRADOR', 
		'COMPRAD_PK', 
		'PK', 
		clock_timestamp(), 
		'Tasy', 
		'', 
		'I', 
		'A', 
		clock_timestamp());
 
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('COMPRADOR','COMPRAD_PK',1,'CD_PESSOA_FISICA',clock_timestamp(),'Tasy');
	insert	into INDICE_ATRIBUTO(nm_tabela,	nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('COMPRADOR','COMPRAD_PK',2,'CD_ESTABELECIMENTO',clock_timestamp(),'Tasy');
 
 
 
 
 
 
/*--------------------QUARTA PARTE---------------------------*/
 
/*Primeiro verifica se não existe compradores da ordem que não estao na comprador e insere 
pois senão não cria a integridade*/
 
open C01;
loop 
fetch C01 into 
	cd_comprador_w, 
	cd_estabelecimento_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	select	SUBSTR(OBTER_NOME_PF(cd_pessoa_fisica), 0, 10) 
	into STRICT	nm_pessoa_fisica_w 
	from	pessoa_fisica 
	where	cd_pessoa_fisica = cd_comprador_w;
 
	insert into comprador( 
		cd_pessoa_fisica,	nm_guerra,		dt_atualizacao, 
		nm_usuario,		cd_estabelecimento,	ie_situacao) 
	values (	cd_comprador_w,		nm_pessoa_fisica_w,	clock_timestamp(), 
		'Tasy',			cd_estabelecimento_w,	'I');
	commit;
	end;
end loop;
close c01;
 
open C02;
loop 
fetch C02 into 
	cd_comprador_w, 
	cd_estabelecimento_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin 
	select	SUBSTR(OBTER_NOME_PF(cd_pessoa_fisica), 0, 10) 
	into STRICT	nm_pessoa_fisica_w 
	from	pessoa_fisica 
	where	cd_pessoa_fisica = cd_comprador_w;
 
	insert into comprador( 
		cd_pessoa_fisica,	nm_guerra,		dt_atualizacao, 
		nm_usuario,		cd_estabelecimento,	ie_situacao) 
	values (	cd_comprador_w,		nm_pessoa_fisica_w,	clock_timestamp(), 
		'Tasy',			cd_estabelecimento_w,	'I');
	commit;
	end;
end loop;
close c02;
 
/*Recria integridade da ordem de compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE ORDEM_COMPRA ADD 
	(CONSTRAINT ORDCOMP_COMPRAD_FK FOREIGN KEY (CD_COMPRADOR, CD_ESTABELECIMENTO) 
	REFERENCES COMPRADOR (CD_PESSOA_FISICA, CD_ESTABELECIMENTO)) ', ds_erro_sql_w);
 
	insert	into INTEGRIDADE_REFERENCIAL( 
		nm_tabela, 
		nm_integridade_referencial, 
		nm_tabela_referencia, 
		dt_atualizacao, 
		nm_usuario, 
		ie_regra_delecao, 
		ds_integridade_referencial, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values (	'ORDEM_COMPRA', 
		'ORDCOMP_COMPRAD_FK', 
		'COMPRADOR', 
		clock_timestamp(), 
		'Tasy', 
		'NO ACTION', 
		'', 
		'I', 
		'A', 
		clock_timestamp());
 
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'ORDEM_COMPRA', 'ORDCOMP_COMPRAD_FK', 'CD_COMPRADOR', 1, clock_timestamp(), 'Tasy');
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'ORDEM_COMPRA', 'ORDCOMP_COMPRAD_FK', 'CD_ESTABELECIMENTO', 2, clock_timestamp(), 'Tasy');
 
/*Cria indice da ordem de compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico('DROP INDEX ORDCOMP_COMPRAD_FK_I', ds_erro_sql_w);
ds_erro_sql_w := Executar_SQL_Dinamico('CREATE INDEX ORDCOMP_COMPRAD_FK_I ON ORDEM_COMPRA 
			(CD_COMPRADOR, CD_ESTABELECIMENTO)', ds_erro_sql_w);
 
	delete	from INDICE 
	where	nm_tabela = 'ORDEM_COMPRA' 
	and	nm_indice = 'ORDCOMP_COMPRAD_FK_I';
 
	delete	from INDICE_ATRIBUTO 
	where	nm_tabela = 'ORDEM_COMPRA' 
	and	nm_indice = 'ORDCOMP_COMPRAD_FK_I';
 
 
	insert 	into INDICE( 
		nm_tabela, 
		nm_indice, 
		ie_tipo, 
		dt_atualizacao, 
		nm_usuario, 
		ds_indice, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values ('ORDEM_COMPRA', 'ORDCOMP_COMPRAD_FK_I', 'I', clock_timestamp(), 'Tasy', '', 'I', 'A', clock_timestamp());
 
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('ORDEM_COMPRA', 'ORDCOMP_COMPRAD_FK_I', 1, 'CD_COMPRADOR', clock_timestamp(), 'Tasy');
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('ORDEM_COMPRA', 'ORDCOMP_COMPRAD_FK_I', 2, 'CD_ESTABELECIMENTO', clock_timestamp(), 'Tasy');
 
 
/*Recria integridade da cotação de compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE COT_COMPRA ADD 
	(CONSTRAINT COTCOMP_PESFISI_FK FOREIGN KEY (CD_COMPRADOR, CD_ESTABELECIMENTO) 
	REFERENCES COMPRADOR (CD_PESSOA_FISICA, CD_ESTABELECIMENTO)) ', ds_erro_sql_w);
 
	insert	into INTEGRIDADE_REFERENCIAL( 
		nm_tabela, 
		nm_integridade_referencial, 
		nm_tabela_referencia, 
		dt_atualizacao, 
		nm_usuario, 
		ie_regra_delecao, 
		ds_integridade_referencial, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values (	'COT_COMPRA', 
		'COTCOMP_PESFISI_FK', 
		'COMPRADOR', 
		clock_timestamp(), 
		'Tasy', 
		'NO ACTION', 
		'', 
		'I', 
		'A', 
		clock_timestamp());
 
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'COT_COMPRA', 'COTCOMP_PESFISI_FK', 'CD_COMPRADOR', 1, clock_timestamp(), 'Tasy');
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'COT_COMPRA', 'COTCOMP_PESFISI_FK', 'CD_ESTABELECIMENTO', 2, clock_timestamp(), 'Tasy');
 
/*Cria indice da cotação de compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico('DROP INDEX COTCOMP_COMPRAD_FK_I', ds_erro_sql_w);
ds_erro_sql_w := Executar_SQL_Dinamico('CREATE INDEX COTCOMP_COMPRAD_FK_I ON COT_COMPRA 
			(CD_COMPRADOR, CD_ESTABELECIMENTO)', ds_erro_sql_w);
 
	delete	from INDICE 
	where	nm_tabela = 'COT_COMPRA' 
	and	nm_indice = 'COTCOMP_COMPRAD_FK_I';
 
	delete	from INDICE_ATRIBUTO 
	where	nm_tabela = 'COT_COMPRA' 
	and	nm_indice = 'COTCOMP_COMPRAD_FK_I';
 
 
	insert 	into INDICE( 
		nm_tabela, 
		nm_indice, 
		ie_tipo, 
		dt_atualizacao, 
		nm_usuario, 
		ds_indice, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values ('COT_COMPRA', 'COTCOMP_COMPRAD_FK_I', 'I', clock_timestamp(), 'Tasy', '', 'I', 'A', clock_timestamp());
 
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('COT_COMPRA', 'COTCOMP_COMPRAD_FK_I', 1, 'CD_COMPRADOR', clock_timestamp(), 'Tasy');
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('COT_COMPRA', 'COTCOMP_COMPRAD_FK_I', 2, 'CD_ESTABELECIMENTO', clock_timestamp(), 'Tasy');
 
 
/*Recria integridade da parametro compras*/
			    
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE PARAMETRO_COMPRAS DROP CONSTRAINT PARCOMP_COMPRAD_FK2', ds_erro_sql_w);
	delete	from INTEGRIDADE_ATRIBUTO 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'PARCOMP_COMPRAD_FK2';
 
	delete 	from INTEGRIDADE_REFERENCIAL 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'PARCOMP_COMPRAD_FK2';
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE PARAMETRO_COMPRAS ADD 
	(CONSTRAINT PARCOMP_COMPRAD_FK2 FOREIGN KEY (CD_COMPRADOR_CONSIG, CD_ESTABELECIMENTO) 
	REFERENCES COMPRADOR (CD_PESSOA_FISICA, CD_ESTABELECIMENTO)) ', ds_erro_sql_w);
 
	insert	into INTEGRIDADE_REFERENCIAL( 
		nm_tabela, 
		nm_integridade_referencial, 
		nm_tabela_referencia, 
		dt_atualizacao, 
		nm_usuario, 
		ie_regra_delecao, 
		ds_integridade_referencial, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values (	'PARAMETRO_COMPRAS', 
		'PARCOMP_COMPRAD_FK2', 
		'COMPRADOR', 
		clock_timestamp(), 
		'Tasy', 
		'NO ACTION', 
		'', 
		'I', 
		'A', 
		clock_timestamp());
 
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK2', 'CD_COMPRADOR_CONSIG', 1, clock_timestamp(), 'Tasy');
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK2', 'CD_ESTABELECIMENTO', 2, clock_timestamp(), 'Tasy');
 
/*Cria indice da parametro compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico('DROP INDEX PARCOMP_COMPRAD_FK2_I', ds_erro_sql_w);
ds_erro_sql_w := Executar_SQL_Dinamico('CREATE INDEX PARCOMP_COMPRAD_FK2_I ON PARAMETRO_COMPRAS 
			(CD_COMPRADOR_CONSIG, CD_ESTABELECIMENTO)', ds_erro_sql_w);
 
	delete	from INDICE 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_indice = 'PARCOMP_COMPRAD_FK2_I';
 
	delete	from INDICE_ATRIBUTO 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_indice = 'PARCOMP_COMPRAD_FK2_I';
 
 
	insert 	into INDICE( 
		nm_tabela, 
		nm_indice, 
		ie_tipo, 
		dt_atualizacao, 
		nm_usuario, 
		ds_indice, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values ('PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK2_I', 'I', clock_timestamp(), 'Tasy', '', 'I', 'A', clock_timestamp());
 
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK2_I', 1, 'CD_COMPRADOR_CONSIG', clock_timestamp(), 'Tasy');
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK2_I', 2, 'CD_ESTABELECIMENTO', clock_timestamp(), 'Tasy');
 
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE PARAMETRO_COMPRAS DROP CONSTRAINT PARCOMP_COMPRAD_FK', ds_erro_sql_w);
	delete	from INTEGRIDADE_ATRIBUTO 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'PARCOMP_COMPRAD_FK';
 
	delete 	from INTEGRIDADE_REFERENCIAL 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'PARCOMP_COMPRAD_FK';
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE PARAMETRO_COMPRAS ADD 
	(CONSTRAINT PARCOMP_COMPRAD_FK FOREIGN KEY (CD_COMPRADOR_PADRAO, CD_ESTABELECIMENTO) 
	REFERENCES COMPRADOR (CD_PESSOA_FISICA, CD_ESTABELECIMENTO)) ', ds_erro_sql_w);
 
	insert	into INTEGRIDADE_REFERENCIAL( 
		nm_tabela, 
		nm_integridade_referencial, 
		nm_tabela_referencia, 
		dt_atualizacao, 
		nm_usuario, 
		ie_regra_delecao, 
		ds_integridade_referencial, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values (	'PARAMETRO_COMPRAS', 
		'PARCOMP_COMPRAD_FK', 
		'COMPRADOR', 
		clock_timestamp(), 
		'Tasy', 
		'NO ACTION', 
		'', 
		'I', 
		'A', 
		clock_timestamp());
 
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK', 'CD_COMPRADOR_PADRAO', 1, clock_timestamp(), 'Tasy');
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK', 'CD_ESTABELECIMENTO', 2, clock_timestamp(), 'Tasy');
 
/*Cria indice da parametro compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico('DROP INDEX PARCOMP_COMPRAD_FK_I', ds_erro_sql_w);
ds_erro_sql_w := Executar_SQL_Dinamico('CREATE INDEX PARCOMP_COMPRAD_FK_I ON PARAMETRO_COMPRAS 
			(CD_COMPRADOR_PADRAO, CD_ESTABELECIMENTO)', ds_erro_sql_w);
 
	delete	from INDICE 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_indice = 'PARCOMP_COMPRAD_FK_I';
 
	delete	from INDICE_ATRIBUTO 
	where	nm_tabela = 'PARAMETRO_COMPRAS' 
	and	nm_indice = 'PARCOMP_COMPRAD_FK_I';
 
 
	insert 	into INDICE( 
		nm_tabela, 
		nm_indice, 
		ie_tipo, 
		dt_atualizacao, 
		nm_usuario, 
		ds_indice, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values ('PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK_I', 'I', clock_timestamp(), 'Tasy', '', 'I', 'A', clock_timestamp());
 
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK_I', 1, 'CD_COMPRADOR_PADRAO', clock_timestamp(), 'Tasy');
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('PARAMETRO_COMPRAS', 'PARCOMP_COMPRAD_FK_I', 2, 'CD_ESTABELECIMENTO', clock_timestamp(), 'Tasy');
 
 
 
/*Recria integridade do local de estoques*/
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE LOCAL_ESTOQUE DROP CONSTRAINT LOCESTO_COMPRAD_FK', ds_erro_sql_w);
	delete	from INTEGRIDADE_ATRIBUTO 
	where	nm_tabela = 'LOCAL_ESTOQUE' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'LOCESTO_COMPRAD_FK';
 
	delete 	from INTEGRIDADE_REFERENCIAL 
	where	nm_tabela = 'LOCAL_ESTOQUE' 
	and	nm_INTEGRIDADE_REFERENCIAL = 'LOCESTO_COMPRAD_FK';
 
 
ds_erro_sql_w := Executar_SQL_Dinamico(' ALTER TABLE LOCAL_ESTOQUE ADD 
	(CONSTRAINT LOCESTO_COMPRAD_FK FOREIGN KEY (CD_COMPRADOR_CONSIG, CD_ESTABELECIMENTO) 
	REFERENCES COMPRADOR (CD_PESSOA_FISICA, CD_ESTABELECIMENTO)) ', ds_erro_sql_w);
 
	insert	into INTEGRIDADE_REFERENCIAL( 
		nm_tabela, 
		nm_integridade_referencial, 
		nm_tabela_referencia, 
		dt_atualizacao, 
		nm_usuario, 
		ie_regra_delecao, 
		ds_integridade_referencial, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values (	'LOCAL_ESTOQUE', 
		'LOCESTO_COMPRAD_FK', 
		'COMPRADOR', 
		clock_timestamp(), 
		'Tasy', 
		'NO ACTION', 
		'', 
		'I', 
		'A', 
		clock_timestamp());
 
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'LOCAL_ESTOQUE', 'LOCESTO_COMPRAD_FK', 'CD_COMPRADOR_CONSIG', 1, clock_timestamp(), 'Tasy');
	insert 	into INTEGRIDADE_ATRIBUTO( 
		nm_tabela, nm_integridade_referencial, nm_atributo, ie_sequencia_criacao, dt_atualizacao, nm_usuario) 
	values (	'LOCAL_ESTOQUE', 'LOCESTO_COMPRAD_FK', 'CD_ESTABELECIMENTO', 2, clock_timestamp(), 'Tasy');
 
/*Cria indice da parametro compras*/
 
ds_erro_sql_w := Executar_SQL_Dinamico('DROP INDEX LOCESTO_COMPRAD_FK_I', ds_erro_sql_w);
ds_erro_sql_w := Executar_SQL_Dinamico('CREATE INDEX LOCESTO_COMPRAD_FK_I ON LOCAL_ESTOQUE 
			(CD_COMPRADOR_CONSIG, CD_ESTABELECIMENTO)', ds_erro_sql_w);
 
	delete	from INDICE 
	where	nm_tabela = 'LOCAL_ESTOQUE' 
	and	nm_indice = 'LOCESTO_COMPRAD_FK_I';
 
	delete	from INDICE_ATRIBUTO 
	where	nm_tabela = 'LOCAL_ESTOQUE' 
	and	nm_indice = 'LOCESTO_COMPRAD_FK_I';
 
 
	insert 	into INDICE( 
		nm_tabela, 
		nm_indice, 
		ie_tipo, 
		dt_atualizacao, 
		nm_usuario, 
		ds_indice, 
		ie_criar_alterar, 
		ie_situacao, 
		dt_criacao) 
	values ('LOCAL_ESTOQUE', 'LOCESTO_COMPRAD_FK_I', 'I', clock_timestamp(), 'Tasy', '', 'I', 'A', clock_timestamp());
 
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('LOCAL_ESTOQUE', 'LOCESTO_COMPRAD_FK_I', 1, 'CD_COMPRADOR_CONSIG', clock_timestamp(), 'Tasy');
	insert	into INDICE_ATRIBUTO(nm_tabela, nm_indice, nr_sequencia, nm_atributo, dt_atualizacao, nm_usuario) 
	values ('LOCAL_ESTOQUE', 'LOCESTO_COMPRAD_FK_I', 2, 'CD_ESTABELECIMENTO', clock_timestamp(), 'Tasy');
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_cons_columns 
where	constraint_name = 'COMPRAD_PK' 
and	position = 1 
and	column_name = 'CD_PESSOA_FISICA';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar PK' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_cons_columns 
where	constraint_name = 'COMPRAD_PK' 
and	position = 2 
and	column_name = 'CD_ESTABELECIMENTO';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar PK' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_cons_columns 
where	constraint_name = 'ORDCOMP_COMPRAD_FK';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar ORDCOMP_COMPRAD_FK' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_cons_columns 
where	constraint_name = 'COTCOMP_PESFISI_FK';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar COTCOMP_PESFISI_FK' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_cons_columns 
where	constraint_name = 'PARCOMP_COMPRAD_FK2';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar PARCOMP_COMPRAD_FK2' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_cons_columns 
where	constraint_name = 'PARCOMP_COMPRAD_FK';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar PARCOMP_COMPRAD_FK' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_cons_columns 
where	constraint_name = 'LOCESTO_COMPRAD_FK';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar LOCESTO_COMPRAD_FK' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_indexes 
where	index_name = 'ORDCOMP_COMPRAD_FK_I';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar ORDCOMP_COMPRAD_FK_I' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_indexes 
where	index_name = 'ORDCOMP_COMPRAD_FK_I';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar ORDCOMP_COMPRAD_FK_I' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_indexes 
where	index_name = 'COTCOMP_COMPRAD_FK_I';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar COTCOMP_COMPRAD_FK_I' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_indexes 
where	index_name = 'PARCOMP_COMPRAD_FK2_I';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar PARCOMP_COMPRAD_FK2_I' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_indexes 
where	index_name = 'PARCOMP_COMPRAD_FK_I';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar PARCOMP_COMPRAD_FK_I' || chr(13) || chr(10);
end if;
 
select	count(*) 
into STRICT	qt_erro_w 
from	user_indexes 
where	index_name = 'LOCESTO_COMPRAD_FK_Ijjjj';
if (qt_erro_w = 0) then 
	ds_erro_w	:= ds_erro_w || 'Erro ao Criar LOCESTO_COMPRAD_FK_I' || chr(13) || chr(10);
end if;
 
CALL valida_objetos_sistema();
 
if (ds_erro_w <> '') or (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then 
	begin 
	ds_retorno_w	:= substr(ds_erro_w,1,254);
	RAISE NOTICE '--------------- ERROS ENCONTRADOS -------------';
	RAISE NOTICE '%', ds_retorno_w;
	end;
else 
	begin 
	RAISE NOTICE '--------------------------------------------------------';
	RAISE NOTICE 'l   Processo concluido.  SEM ERROS         l';
	RAISE NOTICE 'l______________________________________________________l';
	end;
end if;
 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baca_ajuste_comprador () FROM PUBLIC;

