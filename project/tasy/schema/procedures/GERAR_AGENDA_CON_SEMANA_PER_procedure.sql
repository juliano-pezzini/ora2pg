-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_agenda_con_semana_per ( nr_seq_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text, ie_diario_p text, ie_final_semana_p text, qt_intervalo_p bigint, ds_dias_p text, ie_copiar_proced_p text, ie_copiar_proced_adic_p text, ds_erro_p INOUT text, cd_estabelecimento_p bigint, qt_total_secao_p bigint, nr_secao_atual_p bigint, ie_recalculando_p text default 'N', ds_insert_p INOUT text DEFAULT NULL, ie_next_day_p text default 'N') AS $body$
DECLARE

		
cd_agenda_w		bigint;
dt_agenda_w		timestamp;
nr_minuto_duracao_w	bigint;
ie_status_agenda_w	varchar(2);
ie_classif_agenda_w	varchar(5);
dt_atualizacao_w		timestamp;
nm_usuario_w		varchar(15);
cd_convenio_w		integer;
cd_pessoa_fisica_w  varchar(10);
nm_pessoa_contato_w           varchar(50);
ds_observacao_w    varchar(2000);
ie_status_paciente_w  varchar(3);
nr_seq_consulta_w    smallint;
nm_paciente_w    varchar(80);
nr_atendimento_w                  bigint;
dt_confirmacao_w                  timestamp;
ds_confirmacao_w                  varchar(80);
nr_telefone_w                     varchar(80);
qt_idade_pac_w                    smallint;
nr_seq_plano_w                    bigint;
nr_seq_classif_med_w            bigint;
nm_usuario_origem_w             varchar(15);
ie_necessita_contato_w          varchar(1);
nr_seq_sala_w                     bigint;
cd_categoria_w                    varchar(10);
cd_tipo_acomodacao_w         smallint;
cd_usuario_convenio_w         varchar(30);
cd_complemento_w                varchar(30);
dt_validade_carteira_w            timestamp;
nr_doc_convenio_w               varchar(20);
cd_senha_w                        varchar(20);
nr_seq_agepaci_w                  agenda_consulta.nr_seq_agepaci%type;
ds_senha_w                        varchar(10);
dt_nascimento_pac_w            timestamp;
cd_turno_w                        varchar(1);
dt_agendamento_w                timestamp;
cd_medico_w                       varchar(10);
nr_seq_hora_w                     bigint;
nr_seq_pq_proc_w                  bigint;
cd_motivo_cancelamento_w  agenda_consulta.cd_motivo_cancelamento%type;
cd_procedimento_w                 bigint;
cd_procedimento_ww                bigint;
nr_seq_proc_interno_w             bigint;
nr_seq_proc_interno_ww            bigint;
qt_total_secao_w                  smallint;
nr_secao_w                        smallint;
ie_origem_proced_w                bigint;
ie_origem_proced_ww               bigint;
dt_aguardando_w                   timestamp;
dt_consulta_w                     timestamp;
dt_atendido_w                     timestamp;
cd_medico_solic_w                 varchar(10);
nr_seq_indicacao_w                bigint;
cd_pessoa_indicacao_w         varchar(10);
cd_setor_atendimento_w         bigint;
dt_provavel_term_w                timestamp;
ie_encaixe_w                  varchar(1);
ie_classif_bloqueio_w  varchar(5);
qt_agenda_bloq_w    smallint;
qt_classif_agenda_w  bigint;
nr_controle_secao_w  bigint;
nr_seq_unidade_w    bigint;
cd_procedencia_w    integer;
ie_tipo_atendimento_w  smallint;
qt_sessao_controle_w  smallint := 0;

dt_termino_w      timestamp;
dt_atual_w      timestamp;
dt_dia_semana_w      smallint;
ie_feriado_w      varchar( 1);
nr_seq_esp_w      bigint;
ie_hor_adic_w      varchar(1);
ie_valido_w      varchar(1);
ie_bloqueio_w      varchar(1);
qt_horario_w      bigint;
qt_horario_livre_w      bigint;
qt_horarios_ocup_med_exec_w  bigint;
nr_sequencia_w      bigint;
ds_erro_w      varchar(1000);
ds_erro_ww      varchar(1000);
qt_dia_w        smallint;

nr_secao_periodo_w    smallint;
ie_consiste_w      varchar(1);

cd_dia_semana_w      varchar(1);
ds_dias_w      varchar(255);
nr_seq_agenda_sessao_w    bigint;
ie_fim_sab_chec_w      varchar(1);
ie_fim_dom_chec_w    varchar(1);
ie_gerar_dia_w      varchar(1);
cd_estabelecimento_w    smallint;

ie_agenda_feriado_w    varchar(1);
ie_consiste_medico_turno_w  varchar(1)  := 'N';
ie_consiste_classificacao_w  varchar(1);
ie_copiar_prof_w    varchar(1)  := 'N';
ie_copiar_atendimento_w    varchar(1)  := 'N';
ie_copiar_dt_confirm_w    varchar(1)  := 'S';
qt_total_secao_ww      bigint;
nr_secao_atual_ww      bigint;
cd_especialidade_w    bigint;
ie_forma_agendamento_w    smallint;
cd_cid_w        varchar(10);
ie_carater_inter_sus_w    varchar(2);
qt_procedimento_w      integer;
ie_manter_classif_hor_origem_w  varchar(1)  := 'S';
ie_classif_agend_origem_w    varchar(5);
ie_cons_hor_disp_prof_exec_w  varchar(1);
ie_gerar_nr_guia_seq_agenda_w  varchar(1);

ie_copiar_senha_w      varchar(1) := 'S';
ie_copiar_autorizacao_w    varchar(1) := 'S';
ie_autorizacao_w      varchar(3);
ie_gerar_solic_pront_w    varchar(1) := 'N';

nr_seq_hor_livre_w      bigint;
ie_classif_agenda_origem_w    varchar(5);
qt_bloqueio_w      bigint;

ie_cons_hor_medico_w      varchar(1);
nr_seq_classif_w  agenda_consulta.nr_seq_classif%type;
nr_seq_turno_w    agenda_consulta.nr_seq_turno%type;
nr_seq_proc_interno_adic_w   bigint;
nr_seq_proc_adic_w     bigint;
ie_gerar_autorizacao_w    varchar(1);
ie_insert_w    varchar(1);
nr_seq_regra_bloq_w		agenda_bloqueio_geral.nr_sequencia%type;
ie_classif_regra_w		agenda_consulta.ie_classif_agenda%type;

c01 CURSOR FOR

SELECT   a.nr_sequencia ,
    a.nr_seq_proc_interno
FROM   agenda_consulta_proc a
WHERE   a.nr_seq_agenda = nr_sequencia_w
ORDER BY 1;


BEGIN

ds_erro_w := '';
ds_dias_w := '';
ds_insert_p := 'N';

if (qt_total_secao_p <> 0)then
	qt_total_secao_ww := qt_total_secao_p;
	if (nr_secao_atual_p <> 0) then
		nr_secao_atual_ww := nr_secao_atual_p;
	end if;
end if;

if (ie_recalculando_p = 'S') and (nr_secao_atual_ww > qt_total_secao_ww) then
  nr_secao_atual_ww  := qt_total_secao_ww;
end if;

if (nr_seq_agenda_p IS NOT NULL AND nr_seq_agenda_p::text <> '') and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then

  /* INICIO - PARAMETROS PARA O TRATAMENTO DA COPIA DE ATRIBUTOS*/

  ie_copiar_prof_w    := obter_valor_param_usuario(866, 146, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  ie_copiar_atendimento_w    := obter_valor_param_usuario(866, 148, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  ie_copiar_dt_confirm_w    := obter_valor_param_usuario(866, 156, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  ie_manter_classif_hor_origem_w  := obter_valor_param_usuario(866, 217, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  ie_cons_hor_disp_prof_exec_w  := obter_valor_param_usuario(866, 231, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  ie_gerar_nr_guia_seq_agenda_w  := obter_valor_param_usuario(866, 89, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  ie_copiar_senha_w    := obter_valor_param_usuario(866, 256, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  ie_copiar_autorizacao_w         := obter_valor_param_usuario(866, 257, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  /* FIM - PARAMETROS PARA O TRATAMENTO DA COPIA DE ATRIBUTOS*/

  ie_cons_hor_medico_w := obter_valor_param_usuario(866, 281, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);
  ie_gerar_autorizacao_w := obter_valor_param_usuario(866, 302, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);

  /* obter dados agenda */

  select  nr_sequencia,
    cd_agenda,
    dt_agenda,
    nr_minuto_duracao,
    ie_status_agenda,
    ie_classif_agenda,
    dt_atualizacao,
    nm_usuario,
    cd_convenio,
    cd_pessoa_fisica,
    nm_pessoa_contato,
    ds_observacao,
    ie_status_paciente,
    nr_seq_consulta,
    nm_paciente,
    nr_atendimento,
    dt_confirmacao,
    ds_confirmacao,
    nr_telefone,
    qt_idade_pac,
    nr_seq_plano,
    nr_seq_classif_med,
    nm_usuario_origem,
    ie_necessita_contato,
    nr_seq_sala,
    cd_categoria,
    cd_tipo_acomodacao,
    cd_usuario_convenio,
    cd_complemento,
    dt_validade_carteira,
    nr_doc_convenio,
    cd_senha,
    nr_seq_agepaci,
    ds_senha,
    dt_nascimento_pac,
    cd_turno,
    dt_agendamento,
    cd_medico,
    nr_seq_hora,
    nr_seq_pq_proc,
    cd_motivo_cancelamento,
    cd_procedimento,
    nr_seq_proc_interno,
    qt_total_secao,
    nr_secao,
    ie_origem_proced,
    dt_aguardando,
    dt_consulta,
    dt_atendido,
    cd_medico_solic,
    nr_seq_indicacao,
    cd_pessoa_indicacao,
    cd_setor_atendimento,
    coalesce(dt_provavel_term,dt_agenda_p),
    ie_encaixe,
    CASE WHEN coalesce(nr_seq_agenda_sessao::text, '') = '' THEN  nr_sequencia  ELSE nr_seq_agenda_sessao END ,
    nr_controle_secao,
    nr_seq_unidade,
    cd_especialidade,
    ie_forma_agendamento,
    cd_cid,
    ie_carater_inter_sus,
    qt_procedimento,
    cd_procedencia,
    ie_tipo_atendimento,
    ie_autorizacao,
    ie_classif_agenda_origem,
    nr_seq_classif,
    nr_seq_turno
  into STRICT  nr_sequencia_w,
    cd_agenda_w,
    dt_agenda_w,
    nr_minuto_duracao_w,
    ie_status_agenda_w,
    ie_classif_agenda_w,
    dt_atualizacao_w,
    nm_usuario_w,
    cd_convenio_w,
    cd_pessoa_fisica_w,
    nm_pessoa_contato_w,
    ds_observacao_w,
    ie_status_paciente_w,
    nr_seq_consulta_w,
    nm_paciente_w,
    nr_atendimento_w,
    dt_confirmacao_w,
    ds_confirmacao_w,
    nr_telefone_w,
    qt_idade_pac_w,
    nr_seq_plano_w,
    nr_seq_classif_med_w,
    nm_usuario_origem_w,
    ie_necessita_contato_w,
    nr_seq_sala_w,
    cd_categoria_w,
    cd_tipo_acomodacao_w,
    cd_usuario_convenio_w,
    cd_complemento_w,
    dt_validade_carteira_w,
    nr_doc_convenio_w,
    cd_senha_w,
    nr_seq_agepaci_w,
    ds_senha_w,
    dt_nascimento_pac_w,
    cd_turno_w,
    dt_agendamento_w,
    cd_medico_w,
    nr_seq_hora_w,
    nr_seq_pq_proc_w,
    cd_motivo_cancelamento_w,
    cd_procedimento_w,
    nr_seq_proc_interno_w,
    qt_total_secao_w,
    nr_secao_w,
    ie_origem_proced_w,
    dt_aguardando_w,
    dt_consulta_w,
    dt_atendido_w,
    cd_medico_solic_w,
    nr_seq_indicacao_w,
    cd_pessoa_indicacao_w,
    cd_setor_atendimento_w,
    dt_provavel_term_w,
    ie_encaixe_w,
    nr_seq_agenda_sessao_w,
    nr_controle_secao_w,
    nr_seq_unidade_w,
    cd_especialidade_w,
    ie_forma_agendamento_w,
    cd_cid_w,
    ie_carater_inter_sus_w,
    qt_procedimento_w,
    cd_procedencia_w,
    ie_tipo_atendimento_w,
    ie_autorizacao_w,
    ie_classif_agenda_origem_w,
    nr_seq_classif_w,
    nr_seq_turno_w
  from  agenda_consulta
  where  nr_sequencia = nr_seq_agenda_p;

  update  agenda_consulta
  set  dt_provavel_term = dt_provavel_term_w
  where  nr_sequencia = nr_seq_agenda_p;

  if (cd_agenda_w IS NOT NULL AND cd_agenda_w::text <> '')then    
    select  coalesce(max(ie_gerar_solic_pront), 'S')    
    into STRICT  ie_gerar_solic_pront_w    
    from  agenda
    where   cd_agenda  = cd_agenda_w;
  end if;

  /* Gerar horarios por semana ou diariamente */

  if (ie_diario_p = 'S') then
    qt_dia_w:= 1;
  elsif (ie_diario_p = 'N') and (qt_intervalo_p > 0) then
    qt_dia_w:= qt_intervalo_p;
  elsif (ie_diario_p = 'N') then
    qt_dia_w:= 7;
  end if;

  /* obter datas */

  dt_termino_w  := ESTABLISHMENT_TIMEZONE_UTILS.dateAtTime(dt_agenda_p, coalesce(dt_agenda_w, trunc(clock_timestamp())));
  dt_atual_w    := dt_agenda_w + qt_dia_w;

  /* validar data */

  if (dt_agenda_p < dt_agenda_w) then
    CALL Wheb_mensagem_pck.exibir_mensagem_abort(251128);

  end if;

  /* Consistir o total de sessoes do agendamento com o total de sessoes no periodo informado */

  nr_secao_periodo_w  := obter_qt_secao_per_agenda(nr_seq_agenda_p,ie_diario_p, ie_final_semana_p, qt_intervalo_p, dt_termino_w, ds_dias_p);

  select  coalesce(max(Obter_Valor_Param_Usuario(866, 28, obter_perfil_ativo, nm_usuario_p, obter_estab_agenda(cd_agenda_w))), 'N')
  into STRICT  ie_consiste_w
;

  ie_consiste_medico_turno_w   := coalesce(Obter_Valor_Param_Usuario(866, 60, obter_perfil_ativo, nm_usuario_p, obter_estab_agenda(cd_agenda_w)), 'N');
  ie_consiste_classificacao_w  := coalesce(Obter_Valor_Param_Usuario(866, 112, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p), 'S');

  /* Se o parametro [28] for diferente de nao consistir */

  if (ie_recalculando_p <> 'S') and (ie_consiste_w <> 'N') then
    begin
    if (ie_consiste_w = 'C') and (qt_total_secao_w < nr_secao_periodo_w) then
      ds_erro_p := substr(WHEB_MENSAGEM_PCK.get_texto(279326,'NR_SECAO_PERIODO='||nr_secao_periodo_w||';QT_TOTAL_SECAO='||qt_total_secao_w),1,255);
    elsif (ie_consiste_w = 'B') and (qt_total_secao_w < nr_secao_periodo_w) then
      CALL Wheb_mensagem_pck.exibir_mensagem_abort(251130,'NR_SECAO_PERIODO=' || nr_secao_periodo_w || ';QT_TOTAL_SECAO=' ||qt_total_secao_w);

    end if;
    end;
  end if;
  /* obter dias semana */

  while(dt_atual_w <= dt_termino_w) loop
    begin
    /* obter dia semana */

    ie_insert_w := 'N';
    select  pkg_date_utils.get_weekday(dt_atual_w)
    into STRICT  dt_dia_semana_w
;

    ie_gerar_dia_w  := 'S';

    if (ds_dias_p IS NOT NULL AND ds_dias_p::text <> '') then
      ds_dias_w := trim(both ds_dias_p);
      ie_gerar_dia_w  :=  obter_se_contido(dt_dia_semana_w,ds_dias_w);

    end if;
          
    select  obter_se_contido(7,ds_dias_w)
    into STRICT  ie_fim_sab_chec_w
;

    select  obter_se_contido(1,ds_dias_w)
    into STRICT  ie_fim_dom_chec_w
;

    /* obter se feriado */
    select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END 
    into STRICT  ie_feriado_w
    from   feriado a, 
      agenda b
    where   a.cd_estabelecimento = obter_estab_agenda(cd_agenda_w)
    and (  dt_atual_w  BETWEEN 
            TIMEZONE_UTILS.startOfDay(a.dt_feriado, TIMEZONE_UTILS.getBaseLineTimeZone()) 
            and TIMEZONE_UTILS.endOfDay(a.dt_feriado, TIMEZONE_UTILS.getBaseLineTimeZone())
         ) 
    and   b.ie_feriado = 'N' 
    and   b.cd_agenda = cd_agenda_w;

    /* obter se horario especial */

    select  coalesce(max(nr_sequencia),0),
      coalesce(max(ie_horario_adicional),'N')
    into STRICT  nr_seq_esp_w,
      ie_hor_adic_w
    from  agenda_turno_esp
    where  cd_agenda = cd_agenda_w
    and (  dt_agenda_w  BETWEEN
            TIMEZONE_UTILS.startOfDay(dt_agenda, TIMEZONE_UTILS.getBaseLineTimeZone()) 
            and TIMEZONE_UTILS.endOfDay(dt_agenda, TIMEZONE_UTILS.getBaseLineTimeZone())
         );

    cd_estabelecimento_w := obter_estab_agenda(cd_agenda_w);
    CALL Gerar_Horario_Agenda_Servico(cd_estabelecimento_w, cd_agenda_w, dt_atual_w, nm_usuario_p);

    dt_dia_semana_w  := pkg_date_utils.get_weekday(dt_atual_w);

    /* validar horario x bloqueio */

    select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END ,
      sum(qt_agenda_bloq),
      max(ie_classif_bloqueio)
    into STRICT  ie_bloqueio_w,
      qt_agenda_bloq_w,
      ie_classif_bloqueio_w
    from  agenda_bloqueio
    where  cd_agenda = cd_agenda_w
    and  dt_final >=  ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atual_w)
    and  dt_inicial <=  ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atual_w)
    and  to_char(hr_final_bloqueio,'hh24:mi') >= to_char(dt_atual_w,'hh24:mi')
    and  to_char(hr_inicio_bloqueio,'hh24:mi') <= to_char(dt_atual_w,'hh24:mi')
    and  ((coalesce(ie_dia_semana::text, '') = '') or (ie_dia_semana = dt_dia_semana_w));

    select  count(*)
    into STRICT  qt_classif_agenda_w
    from  agenda_consulta
    where  cd_agenda = cd_agenda_w
    and  dt_agenda = dt_atual_w
    and  ie_classif_agenda = ie_classif_bloqueio_w;

    
    if (ie_consiste_medico_turno_w  = 'N') then
      /* validar horario x cadastro */

      select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END 
      into STRICT  ie_valido_w
      from  agenda_turno
      where  cd_agenda = cd_agenda_w
      and    ((ie_dia_semana = dt_dia_semana_w) or (ie_dia_semana = 9 and dt_dia_semana_w not in (1,7)))
      and    ((nr_seq_esp_w = 0) or (ie_hor_adic_w = 'S'))
      and    ((coalesce(dt_final_vigencia::text, '') = '') or (dt_final_vigencia >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atual_w)))
      and    ((coalesce(dt_inicio_vigencia::text, '') = '') or (dt_inicio_vigencia <= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atual_w)))
      and    To_Date(To_Char(clock_timestamp(),'dd/mm/yyyy')||' '||To_Char(hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
           < To_Date(To_Char(clock_timestamp(),'dd/mm/yyyy')||' '||To_Char(hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
      and    to_char(hr_inicial,'hh24:mi') = to_char(dt_atual_w,'hh24:mi')
      and    ((coalesce(nr_minuto_intervalo,0) > 0) or (obter_tipo_agenda(cd_agenda) = 5))
      and    ie_feriado_w <> 'S'
      and    ((dt_dia_semana_w not in (1,7)) or (ie_final_semana_p = 'S') or (ie_fim_sab_chec_w = 'S' and dt_dia_semana_w = 7) or (ie_fim_dom_chec_w = 'S' and dt_dia_semana_w = 1))
      and    ((coalesce(ds_dias_w::text, '') = '') or
          ((ds_dias_w IS NOT NULL AND ds_dias_w::text <> '') and (obter_se_contido(dt_dia_semana_w,ds_dias_w) = 'S')));
    else
      select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
      into STRICT  ie_valido_w
      from  agenda_turno b,
          agenda_turno_classif a
      where  b.cd_agenda = cd_agenda_w
      and    b.nr_sequencia         = a.nr_seq_turno
      and    ((coalesce(a.cd_medico, cd_medico_w)    = cd_medico_w) or (coalesce(cd_medico_w::text, '') = ''))
      and    ((coalesce(a.cd_medico_solic, cd_medico_solic_w)  = cd_medico_solic_w) or (coalesce(cd_medico_solic_w::text, '') = ''))
      and    ((b.ie_dia_semana = dt_dia_semana_w) or (b.ie_dia_semana = 9 and dt_dia_semana_w not in (1,7)))
      and    ((nr_seq_esp_w = 0) or (ie_hor_adic_w = 'S'))
      and    ((coalesce(b.dt_final_vigencia::text, '') = '') or (b.dt_final_vigencia >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atual_w)))
      and    ((coalesce(b.dt_inicio_vigencia::text, '') = '') or (b.dt_inicio_vigencia <= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atual_w)))
      and    To_Date(To_Char(clock_timestamp(),'dd/mm/yyyy')||' '||To_Char(b.hr_inicial,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
           < To_Date(To_Char(clock_timestamp(),'dd/mm/yyyy')||' '||To_Char(b.hr_final,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')
      and    to_char(b.hr_inicial,'hh24:mi') = to_char(dt_atual_w,'hh24:mi')
      and    ((coalesce(b.nr_minuto_intervalo,0) > 0) or (obter_tipo_agenda(b.cd_agenda) = 5))
      and    ie_feriado_w <> 'S'
      and    ((dt_dia_semana_w not in (1,7)) or (ie_final_semana_p = 'S') or (ie_fim_sab_chec_w = 'S' and dt_dia_semana_w = 7) or (ie_fim_dom_chec_w = 'S' and dt_dia_semana_w = 1))
      and    ((coalesce(ds_dias_w::text, '') = '') or
          ((ds_dias_w IS NOT NULL AND ds_dias_w::text <> '') and (obter_se_contido(dt_dia_semana_w,ds_dias_w) = 'S')));
    end if;

    if (ie_bloqueio_w = 'S') and (qt_agenda_bloq_w >= qt_classif_agenda_w) then
      ie_valido_w := 'N';
    end if;

    dt_dia_semana_w  := pkg_date_utils.get_weekday(dt_atual_w);

    select  count(*)
    into STRICT  qt_bloqueio_w
    from  agenda_bloqueio
    where  cd_agenda = cd_agenda_w
    and  dt_final >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atual_w)
    and  dt_inicial <= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_atual_w)    
    and  to_char(coalesce(hr_final_bloqueio,dt_atual_w),'hh24:mi') >= to_char(dt_atual_w,'hh24:mi')
    and  to_char(coalesce(hr_inicio_bloqueio,dt_atual_w),'hh24:mi') <= to_char(dt_atual_w,'hh24:mi')
    and  coalesce(ie_classif_bloqueio::text, '') = ''
    and  coalesce(cd_medico::text, '') = ''
    and  ((ie_dia_semana  = dt_dia_semana_w) OR ((ie_dia_semana = 9) and dt_dia_semana_w not in (1,7)) OR (coalesce(ie_dia_semana::text, '') = ''));

    if (qt_bloqueio_w > 0) then
      ie_valido_w := 'N';
    end if;

    /* validar horario gerado */

    select  count(*)
    into STRICT  qt_horario_w
    from  agenda_consulta
    where  cd_agenda = cd_agenda_w
    and  dt_agenda = dt_atual_w;

    /* validar horario livre */

    
    select   coalesce(max(ie_feriado),'N')
    into STRICT  ie_agenda_feriado_w
    from  agenda
    where  cd_agenda = cd_agenda_w;

    if (ie_consiste_medico_turno_w  = 'H') then
      select  count(*)
      into STRICT  qt_horario_livre_w
      from  agenda_consulta
      where  cd_agenda = cd_agenda_w      
      and    dt_agenda = dt_atual_w
      and    ie_status_agenda = 'L'
      and    ((cd_medico = cd_medico_w) or (coalesce(cd_medico_w::text, '') = ''))
      and    ((ie_classif_agenda  = ie_classif_agenda_w) or (ie_consiste_classificacao_w = 'N'))
      and    ((ie_agenda_feriado_w = 'S') or (obter_se_feriado(obter_estab_agenda(cd_agenda_w), dt_atual_w) = 0));
    else
      select  count(*)
      into STRICT  qt_horario_livre_w
      from  agenda_consulta
      where  cd_agenda = cd_agenda_w
      and    dt_agenda = dt_atual_w
      and    ie_status_agenda = 'L'
      and    ((ie_classif_agenda  = ie_classif_agenda_w) or (ie_consiste_classificacao_w = 'N'))
      and    ((ie_agenda_feriado_w = 'S') or (obter_se_feriado(obter_estab_agenda(cd_agenda_w), dt_atual_w) = 0));
    end if;

    if (ie_gerar_dia_w = 'S') then

      if (coalesce(qt_horario_livre_w,0) > 0) then
        if (ie_consiste_medico_turno_w = 'H') then
          select  max(nr_sequencia)
          into STRICT  nr_seq_hor_livre_w
          from  agenda_consulta
          where  cd_agenda = cd_agenda_w
          and    dt_agenda = dt_atual_w
          and    ie_status_agenda = 'L'
          and    ((ie_classif_agenda = ie_classif_agenda_w) or (ie_consiste_classificacao_w = 'N'))
          and    ((ie_agenda_feriado_w = 'S') or (obter_se_feriado(obter_estab_agenda(cd_agenda_w), dt_atual_w) = 0))
          and    dt_agenda between dt_atual_w and fim_dia(dt_atual_w)
          and    to_char(dt_agenda,'hh24:mi') = to_char(dt_atual_w,'hh24:mi')
          and    ((cd_medico = cd_medico_w) or (coalesce(cd_medico_w::text, '') = ''));
        else
          select  max(nr_sequencia)
          into STRICT  nr_seq_hor_livre_w
          from  agenda_consulta
          where  cd_agenda = cd_agenda_w
          and    dt_agenda = dt_atual_w
          and    ie_status_agenda = 'L'
          and    ((ie_classif_agenda = ie_classif_agenda_w) or (ie_consiste_classificacao_w = 'N'))
          and    ((ie_agenda_feriado_w = 'S') or (obter_se_feriado(obter_estab_agenda(cd_agenda_w), dt_atual_w) = 0))
          and    dt_agenda between dt_atual_w and fim_dia(dt_atual_w)
          and    to_char(dt_agenda,'hh24:mi') = to_char(dt_atual_w,'hh24:mi');
        end if;

        if (nr_seq_hor_livre_w IS NOT NULL AND nr_seq_hor_livre_w::text <> '') then
          delete  FROM agenda_consulta
          where  nr_sequencia = nr_seq_hor_livre_w;
        end if;
      end if;
      
      if  (ie_valido_w = 'S' AND qt_horario_w = 0) or
        (ie_valido_w = 'S' AND qt_horario_livre_w > 0) then

        /* validar disponibilidade de horarios do medico executor */

        if (ie_cons_hor_disp_prof_exec_w = 'S')then
          begin      
          
          select  coalesce(count(*), 0)    
          into STRICT  qt_horarios_ocup_med_exec_w
          from  agenda_consulta
          where  cd_agenda     = cd_agenda_w
          and  dt_agenda     between dt_atual_w and fim_dia(dt_atual_w)
          and  to_char(dt_agenda,'hh24:mi')  = to_char(dt_atual_w,'hh24:mi')
          and  ie_status_agenda     not in ('L', 'E', 'C', 'B', 'F', 'I')
          and  cd_medico    = cd_medico_w;

          if (qt_horarios_ocup_med_exec_w > 0)then
            begin
            ie_gerar_dia_w  := 'N';
            ds_erro_w := substr(ds_erro_w || PKG_DATE_FORMATERS.TO_VARCHAR(dt_atual_w, 'shortDayMonth', cd_estabelecimento_p, nm_usuario_p) || ', ',1,1000);
            end;
          end if;

          end;
        end if;

        /* Consistir de medico executor possui agendamento no mesmo horario em outras agendas */

        if (coalesce(ie_cons_hor_medico_w,'N') <> 'N') then
          ds_erro_ww := consistir_horario_med_agenda(nr_seq_agenda_p, cd_medico_w, nr_minuto_duracao_w, 5, ds_erro_ww, dt_atual_w);
          if (ds_erro_ww IS NOT NULL AND ds_erro_ww::text <> '') then
            ie_gerar_dia_w  := 'N';
            ds_erro_w := substr(ds_erro_w || PKG_DATE_FORMATERS.TO_VARCHAR(dt_atual_w, 'shortDayMonth', cd_estabelecimento_p, nm_usuario_p) || ', ',1,1000);
            ds_erro_ww := null;
          end if;
        end if;

		if (ie_copiar_proced_p = 'S') then
			nr_seq_proc_interno_ww := nr_seq_proc_interno_w;
			cd_procedimento_ww := cd_procedimento_w;
			ie_origem_proced_ww := ie_origem_proced_w;
		end if;

		if (ie_manter_classif_hor_origem_w = 'N')then
			select  coalesce(max(ie_classif_agenda), ie_classif_agenda_w)
			into STRICT  ie_classif_agend_origem_w
			from  agenda_consulta
			where  cd_agenda = cd_agenda_w
			and  dt_agenda = dt_atual_w;
			end if;
		
		if (ie_manter_classif_hor_origem_w = 'S') then
			ie_classif_regra_w := ie_classif_agenda_w;
		else
			ie_classif_regra_w := ie_classif_agend_origem_w;
		end if;

		nr_seq_regra_bloq_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
								cd_agenda_w,
								ie_classif_regra_w,
								null,
								cd_especialidade_w,
								cd_setor_atendimento_w,
								nr_seq_proc_interno_ww,
								cd_procedimento_ww,
								ie_origem_proced_ww,
								cd_medico_w,
								dt_atual_w,
								'N',
								'N');
		if (nr_seq_regra_bloq_w > 0) then
			ie_gerar_dia_w  := 'N';
			ds_erro_w := substr(ds_erro_w || PKG_DATE_FORMATERS.TO_VARCHAR(dt_atual_w, 'shortDayMonth', cd_estabelecimento_p, nm_usuario_p) || ', ',1,1000);
			goto pulardia;
		end if;	

        /* obter sequencia */

        select  nextval('agenda_consulta_seq')
        into STRICT  nr_sequencia_w
;

        /* obter sequencia hora */

        select  coalesce(max(nr_seq_hora),0)+1
        into STRICT  nr_seq_hora_w
        from  agenda_consulta
        where  cd_agenda = cd_agenda_w
        and  dt_agenda = dt_atual_w;
      
        /* atualizar sessoes */

        if (qt_total_secao_p <> 0) and (nr_secao_atual_p <> 0) then
          nr_secao_w:= coalesce(nr_secao_atual_ww,0);
          nr_secao_atual_ww := nr_secao_atual_ww + 1;
        elsif (coalesce(qt_total_secao_w,0) > 0) then
          nr_secao_w:= coalesce(nr_secao_w,0) + 1;
        end if;

        CALL wheb_usuario_pck.set_ie_executar_trigger('N');

	ds_insert_p := 'S';
	ie_insert_w := 'S';
		
        /*tbyegmann OS 306310 - consisitr a copia do numero de atendimento de acordo com o valor do parametro 148*/

        insert into agenda_consulta(
            nr_sequencia,
            cd_agenda,
            dt_agenda,
            nr_minuto_duracao,
            ie_status_agenda,
            ie_classif_agenda,
            dt_atualizacao,
            nm_usuario,
            cd_convenio,
            cd_pessoa_fisica,
            nm_pessoa_contato,
            ds_observacao,
            ie_status_paciente,
            nr_seq_consulta,
            nm_paciente,
            nr_atendimento,
            dt_confirmacao,
            ds_confirmacao,
            nr_telefone,
            qt_idade_pac,
            nr_seq_plano,
            nr_seq_classif_med,
            nm_usuario_origem,
            ie_necessita_contato,
            nr_seq_sala,
            cd_categoria,
            cd_tipo_acomodacao,
            cd_usuario_convenio,
            cd_complemento,
            dt_validade_carteira,
            nr_doc_convenio,
            cd_senha,
            nr_seq_agepaci,
            ds_senha,
            dt_nascimento_pac,
            cd_turno,
            dt_agendamento,
            cd_medico,
            nr_seq_hora,
            nr_seq_pq_proc,
            cd_motivo_cancelamento,
            cd_procedimento,
            nr_seq_proc_interno,
            qt_total_secao,
            nr_secao,
            ie_origem_proced,
            cd_medico_solic,
            nr_seq_indicacao,
            cd_pessoa_indicacao,
            cd_setor_atendimento,
            dt_provavel_term,
            ie_encaixe,
            nr_seq_agenda_sessao,
            nr_controle_secao,
            nr_seq_unidade,
            cd_especialidade,
            ie_forma_agendamento,
            cd_cid,
            ie_carater_inter_sus,
            qt_procedimento,
            cd_procedencia,
            ie_tipo_atendimento,
            ie_autorizacao,
            ie_classif_agenda_origem,
            nr_seq_classif,
            nr_seq_turno,
            ie_sessao_diariamente,
            ie_sessao_final_semana,
            qt_sessao_intervalo,
            ds_sessao_dias_semana,
            ie_sessao_copiar_proced,
            ie_sessao_copiar_proced_adic
            )
          values (
            nr_sequencia_w,
            cd_agenda_w,
            dt_atual_w,
            nr_minuto_duracao_w,
            'N',
            CASE WHEN ie_manter_classif_hor_origem_w='S' THEN  ie_classif_agenda_w  ELSE ie_classif_agend_origem_w END ,
            clock_timestamp(),
            nm_usuario_p,
            cd_convenio_w,
            cd_pessoa_fisica_w,
            nm_pessoa_contato_w,
            ds_observacao_w,
            ie_status_paciente_w,
            nr_seq_consulta_w,
            nm_paciente_w,
            CASE WHEN ie_copiar_atendimento_w='S' THEN  nr_atendimento_w  ELSE null END ,
            CASE WHEN ie_copiar_dt_confirm_w='S' THEN clock_timestamp() WHEN ie_copiar_dt_confirm_w='N' THEN null END ,
            CASE WHEN ie_copiar_dt_confirm_w='S' THEN ds_confirmacao_w WHEN ie_copiar_dt_confirm_w='N' THEN null END ,
            nr_telefone_w,
            qt_idade_pac_w,
            nr_seq_plano_w,
            nr_seq_classif_med_w,
            nm_usuario_p,
            ie_necessita_contato_w,
            nr_seq_sala_w,
            cd_categoria_w,
            cd_tipo_acomodacao_w,
            cd_usuario_convenio_w,
            cd_complemento_w,
            dt_validade_carteira_w,
            CASE WHEN ie_gerar_nr_guia_seq_agenda_w='S' THEN  nr_sequencia_w  ELSE nr_doc_convenio_w END ,
            CASE WHEN ie_copiar_senha_w='S' THEN  cd_senha_w  ELSE null END ,
            nr_seq_agepaci_w,
            ds_senha_w,
            dt_nascimento_pac_w,
            cd_turno_w,
            clock_timestamp(),
            cd_medico_w,
            nr_seq_hora_w,
            nr_seq_pq_proc_w,
            cd_motivo_cancelamento_w,
            CASE WHEN ie_copiar_proced_p='S' THEN  cd_procedimento_w  ELSE null END ,
            CASE WHEN ie_copiar_proced_p='S' THEN  nr_seq_proc_interno_w  ELSE null END ,
            CASE WHEN qt_total_secao_p=0 THEN  qt_total_secao_w  ELSE qt_total_secao_ww END ,
            nr_secao_w,
            CASE WHEN ie_copiar_proced_p='S' THEN  ie_origem_proced_w  ELSE null END ,
            cd_medico_solic_w,
            nr_seq_indicacao_w,
            cd_pessoa_indicacao_w,
            cd_setor_atendimento_w,
            dt_provavel_term_w,
            ie_encaixe_w,
            nr_seq_agenda_sessao_w,  
            nr_controle_secao_w,
            nr_seq_unidade_w,
            cd_especialidade_w,
            ie_forma_agendamento_w,
            cd_cid_w,
            ie_carater_inter_sus_w,
            qt_procedimento_w,
            cd_procedencia_w,
            ie_tipo_atendimento_w,
            CASE WHEN ie_copiar_autorizacao_w='S' THEN  ie_autorizacao_w  ELSE null END ,
            ie_classif_agenda_origem_w,
            nr_seq_classif_w,
            nr_seq_turno_w,
            ie_diario_p,
            ie_final_semana_p,
            qt_intervalo_p,
            ds_dias_p,
            ie_copiar_proced_p,
            ie_copiar_proced_adic_p
            );

        IF ( nr_seq_proc_interno_w != 0  AND ie_gerar_autorizacao_w = 'S' AND ie_copiar_proced_p = 'S') then
          CALL gerar_autor_regra(NULL, NULL, NULL, NULL, NULL, NULL, 'AS', nm_usuario_p, NULL, nr_seq_proc_interno_w, NULL, nr_sequencia_w, NULL, NULL, '', '', '');
        END IF;

        if (ie_copiar_prof_w = 'S') then
          insert into agenda_consulta_prof(
              nr_sequencia,
              nr_seq_agenda,
              dt_atualizacao,
              nm_usuario,
              dt_atualizacao_nrec,
              nm_usuario_nrec,
              nr_seq_ordem,
              ie_tipo_profissional,
              cd_pessoa_fisica,
              ie_solicita_retorno
              ) 
              SELECT  nextval('agenda_consulta_prof_seq'),
                nr_sequencia_w,
                clock_timestamp(),
                nm_usuario_p,
                clock_timestamp(),
                nm_usuario_p,
                nr_seq_ordem,
                ie_tipo_profissional,
                cd_pessoa_fisica,
                ie_solicita_retorno
              from  agenda_consulta_prof
              where  nr_seq_agenda  = nr_seq_agenda_p;
        end if;

        if ( ie_copiar_proced_adic_p = 'S') then
          insert into agenda_consulta_proc(
               nr_sequencia,
               cd_procedimento,
               nr_seq_proc_interno,
               cd_material_exame,
               nr_seq_agenda,
               qt_procedimento,
               ie_origem_proced,
               dt_atualizacao,
               nm_usuario,
               ie_executar_proc,
               nr_seq_exame,
               ie_glosa,
               ie_regra,
               nr_seq_regra,
               dt_atualizacao_nrec,
               nm_usuario_nrec,
               ds_observacao,
               ie_lado
              )          
          SELECT nextval('agenda_consulta_proc_seq'),
                 cd_procedimento,
                 nr_seq_proc_interno,
                 cd_material_exame,
                 nr_sequencia_w,
                 qt_procedimento,
                 ie_origem_proced,
                 dt_atualizacao,
                 nm_usuario,
                 ie_executar_proc,
                 nr_seq_exame,
                 ie_glosa,
                 ie_regra,
                 nr_seq_regra,
                 dt_atualizacao_nrec,
                 nm_usuario_nrec,
                 ds_observacao,
                 ie_lado
              from agenda_consulta_proc
              where nr_seq_agenda  = nr_seq_agenda_p;

          IF (ie_gerar_autorizacao_w = 'S') then
            open C01;
            loop
            fetch C01 into
              nr_seq_proc_adic_w ,
              nr_seq_proc_interno_adic_w;
            EXIT WHEN NOT FOUND; /* apply on C01 */
              begin
              if (nr_seq_proc_adic_w != 0) then
                CALL gerar_autor_regra(NULL, NULL, NULL, NULL, NULL, NULL, 'AS', nm_usuario_p, NULL, nr_seq_proc_interno_adic_w, NULL, nr_sequencia_w, NULL, nr_seq_proc_adic_w, '', '', '');
              end if;
              end;
            end loop;
            close C01;

          END IF;
        end if;

        CALL wheb_usuario_pck.set_ie_executar_trigger('S');
        update agenda_consulta set nr_sequencia = nr_sequencia where nr_sequencia = nr_sequencia_w;

        if (ie_gerar_solic_pront_w = 'S') and (ie_status_agenda_w <> 'C') and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '')then
          begin
          CALL Gerar_Solic_Pront_Agenda(cd_pessoa_fisica_w, nr_sequencia_w, cd_agenda_w, dt_atual_w, nm_usuario_p);
          exception
          when others then
            ds_erro_ww := '';
          end;
        end if;

      else
        ds_erro_w := substr(ds_erro_w || PKG_DATE_FORMATERS.TO_VARCHAR(dt_atual_w, 'shortDayMonth', cd_estabelecimento_p, nm_usuario_p) || ', ',1,1000);
      end if;
    end if;
	<<pulardia>>
    if (ie_next_day_p = 'S') and (ie_insert_w = 'N') then
	dt_atual_w := dt_atual_w + 1;
    else
	dt_atual_w := dt_atual_w + qt_dia_w;
    end if;

    select  pkg_date_utils.get_weekday(dt_atual_w)
    into STRICT  cd_dia_semana_w
;


    /* Verifica se a data e domingo ou sabado */

    if (cd_dia_semana_w = 1) and (ie_final_semana_p = 'N') and (ie_fim_sab_chec_w = 'N') then
      dt_atual_w  := dt_atual_w + 1;
    elsif (cd_dia_semana_w = 7) and (ie_final_semana_p = 'N') and (ie_fim_dom_chec_w = 'N') then
      dt_atual_w  := dt_atual_w + 2;
    end if;
	
	qt_sessao_controle_w := qt_total_secao_w;
	
	if (qt_total_secao_ww > 0) then
		qt_sessao_controle_w := qt_total_secao_ww;
	end if;
	
	if ((qt_sessao_controle_w > 0) and (nr_secao_w = qt_sessao_controle_w) and (ie_consiste_w = 'N')) then
		exit;
	end if;	
	
    end;
  end loop;
end if;

if (coalesce(length(ds_erro_w),0) > 0) then
  if (length(ds_erro_w) > 162) then
    ds_erro_p := substr(WHEB_MENSAGEM_PCK.get_texto(277593,'DS_ERRO_W='||substr(ds_erro_w,1,161)),1,255);
  else
    ds_erro_p := substr(WHEB_MENSAGEM_PCK.get_texto(277593,'DS_ERRO_W='||substr(ds_erro_w,1,length(ds_erro_w)-2)),1,255);
  end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_agenda_con_semana_per ( nr_seq_agenda_p bigint, dt_agenda_p timestamp, nm_usuario_p text, ie_diario_p text, ie_final_semana_p text, qt_intervalo_p bigint, ds_dias_p text, ie_copiar_proced_p text, ie_copiar_proced_adic_p text, ds_erro_p INOUT text, cd_estabelecimento_p bigint, qt_total_secao_p bigint, nr_secao_atual_p bigint, ie_recalculando_p text default 'N', ds_insert_p INOUT text DEFAULT NULL, ie_next_day_p text default 'N') FROM PUBLIC;

