-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_calculo_imposto ( nr_interno_conta_p CONTA_PACIENTE_RESUMO.NR_INTERNO_CONTA%type ) AS $body$
DECLARE


cd_estabelecimento_w		integer;
cd_convenio_w			integer;
cd_tributo_w			bigint;
vl_imposto_w			double precision;
vl_receita_w			double precision;
nr_sequencia_w			bigint;
qt_reg_regra_w			integer;
pr_imposto_w			double precision;
pr_imposto_ww			double precision := 0;
cd_material_w			conta_paciente_resumo.cd_material%type;
cd_procedimento_w		conta_paciente_resumo.cd_procedimento%type;
ie_origem_proced_w		conta_paciente_resumo.ie_origem_proced%type;

cd_area_procedimento_w		regra_calculo_imposto.cd_area_procedimento%type;
cd_especialidade_w		regra_calculo_imposto.cd_especialidade%type;
cd_grupo_proc_w			regra_calculo_imposto.cd_grupo_proc%type;
cd_grupo_material_w		regra_calculo_imposto.cd_grupo_material%type;
cd_subgrupo_material_w		regra_calculo_imposto.cd_subgrupo_material%type;
cd_classe_material_w		regra_calculo_imposto.cd_classe_material%type;

ds_nls_territory_w		varchar(64);
vl_diferenca_imp_w		double precision;
vl_imposto_conta_w		double precision;
vl_imposto_resumo_w		conta_paciente_resumo.vl_imposto%type;
nr_seq_resumo_w			conta_paciente_resumo.nr_sequencia%type;
nr_seq_proc_pacote_w		conta_paciente_resumo.nr_seq_proc_pacote%type;
pr_imposto_pacote_w		propaci_imposto.pr_imposto%type;

C01 CURSOR FOR
SELECT	nr_sequencia,
	coalesce(vl_procedimento,0) + coalesce(vl_material,0) - coalesce(vl_glosa,0),
	cd_material,
	cd_procedimento,
	ie_origem_proced
from 	conta_paciente_resumo
where	nr_interno_conta = nr_interno_conta_p
and	(cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '')
and    (((coalesce(philips_param_pck.get_cd_pais::text, '') = '') or (philips_param_pck.get_cd_pais in (1,9,15))) and (upper(ds_nls_territory_w) <> 'MEXICO'))

union

SELECT	x.nr_sequencia,
	coalesce(x.vl_material,0) - coalesce(x.vl_glosa,0) vl_material,
	cd_material,
	cd_procedimento,
	ie_origem_proced
from 	conta_paciente_resumo x
where	x.nr_interno_conta = nr_interno_conta_p
and	(cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '')
and 	((philips_param_pck.get_cd_pais = 2) or (upper(ds_nls_territory_w) = 'MEXICO'))
and	x.cd_material in (	select 	a.cd_material
				from 	material_atend_paciente a, matpaci_imposto b
				where 	a.nr_sequencia = b.nr_seq_matpaci
				and   	a.nr_interno_conta = x.nr_interno_conta
				and	coalesce(a.nr_seq_proc_pacote::text, '') = '')

union

select	x.nr_sequencia,
	coalesce(x.vl_procedimento,0) - coalesce(x.vl_glosa,0) vl_procedimento,
	cd_material,
	cd_procedimento,
	ie_origem_proced
from 	conta_paciente_resumo x
where	x.nr_interno_conta = nr_interno_conta_p
and	(cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '')
and 	((philips_param_pck.get_cd_pais = 2) or (upper(ds_nls_territory_w) = 'MEXICO'))
and	x.cd_procedimento in (	select 	a.cd_procedimento
				from 	procedimento_paciente a, propaci_imposto b
				where 	a.nr_sequencia = b.nr_seq_propaci
				and   	a.nr_interno_conta = x.nr_interno_conta
				and	coalesce(a.nr_seq_proc_pacote::text, '') = '');

c03 CURSOR FOR
SELECT	cd_tributo
from	tributo
where	ie_situacao	= 'A';

C02 CURSOR FOR
SELECT	pr_imposto
from	regra_calculo_imposto
where (coalesce(cd_estabelecimento, cd_estabelecimento_w)	= cd_estabelecimento_w)
and	coalesce(cd_convenio, cd_convenio_w)			= cd_convenio_w
and	coalesce(ie_receita,'N')				= 'S'
and	((ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_vigencia)  <= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())) and (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(dt_fim_vigencia,clock_timestamp())) >= ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp())))
and	cd_tributo					= cd_tributo_w
and	coalesce(cd_area_procedimento, coalesce(cd_area_procedimento_w, 0))	= coalesce(cd_area_procedimento_w, 0)
and	coalesce(cd_especialidade, coalesce(cd_especialidade_w, 0))		= coalesce(cd_especialidade_w, 0)
and	coalesce(cd_grupo_proc, coalesce(cd_grupo_proc_w, 0)) 			= coalesce(cd_grupo_proc_w, 0)
and	coalesce(cd_procedimento, coalesce(cd_procedimento_w, 0)) 		= coalesce(cd_procedimento_w, 0)
and	coalesce(cd_grupo_material, coalesce(cd_grupo_material_w, 0))		= coalesce(cd_grupo_material_w, 0)
and	coalesce(cd_subgrupo_material, coalesce(cd_subgrupo_material_w, 0))	= coalesce(cd_subgrupo_material_w, 0)
and	coalesce(cd_classe_material, coalesce(cd_classe_material_w, 0))  		= coalesce(cd_classe_material_w, 0)
and	coalesce(cd_material, coalesce(cd_material_w, 0)) 			= coalesce(cd_material_w, 0)
and 	(pr_imposto IS NOT NULL AND pr_imposto::text <> '')
order	by	coalesce(cd_convenio,0),
	dt_vigencia;

-- Rotina especifica para o tratamento do imposto de pacotes (Mexico)
C04 CURSOR FOR
	SELECT	x.nr_sequencia,
		coalesce(vl_procedimento,0) + coalesce(vl_material,0) - coalesce(vl_glosa,0),
		nr_seq_proc_pacote
	from 	conta_paciente_resumo x
	where	x.nr_interno_conta = nr_interno_conta_p
	and	(cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '')
	and	(x.nr_seq_proc_pacote IS NOT NULL AND x.nr_seq_proc_pacote::text <> '');


BEGIN

select	count(*)
into STRICT	qt_reg_regra_w
from	regra_calculo_imposto
where	coalesce(ie_receita,'N')	= 'S';

update	Conta_paciente_Resumo
set 	vl_imposto		= 0
where	nr_interno_conta	= nr_interno_conta_p;

delete from CONTA_PACIENTE_RESUMO_IMP imp where imp.nr_interno_conta = nr_interno_conta_p;

if (qt_reg_regra_w > 0) then
	begin

	begin
		select	substr(value,1,64)
		into STRICT	ds_nls_territory_w
		from	v$nls_parameters
		where	parameter = 'NLS_TERRITORY';
	exception
	when others then
		ds_nls_territory_w:=null;
	end;

	ds_nls_territory_w	:= coalesce(ds_nls_territory_w,'0');

	select	max(a.cd_convenio_parametro),
		max(b.cd_estabelecimento)
	into STRICT	cd_convenio_w,
		cd_estabelecimento_w
	from	Conta_Paciente		a,
		Atendimento_Paciente	b
	where	a.nr_interno_conta	= nr_interno_conta_p
	and	a.nr_atendimento	= b.nr_atendimento;


	if	((2 = philips_param_pck.get_cd_pais) or (upper(ds_nls_territory_w) = 'MEXICO')) then -- 2 = Mexico
		open c01;
		loop
		fetch c01 into 	
			nr_sequencia_w,
			vl_receita_w,
			cd_material_w,
			cd_procedimento_w,
			ie_origem_proced_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin

			open c03;
			loop
			fetch c03 into
				cd_tributo_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */


				select 	max(cd_grupo_material),
					max(cd_subgrupo_material),
					max(cd_classe_material)
				into STRICT	cd_grupo_material_w,
					cd_subgrupo_material_w,
					cd_classe_material_w
				from 	estrutura_material_v
				where 	cd_material = cd_material_w;

				select 	max(cd_area_procedimento),
					max(cd_especialidade),
					max(cd_grupo_proc)
				into STRICT	cd_area_procedimento_w,	
					cd_especialidade_w,	
					cd_grupo_proc_w	
				from 	estrutura_procedimento_v
				where 	cd_procedimento = cd_procedimento_w
				and 	ie_origem_proced = ie_origem_proced_w;

				pr_imposto_w := 0;

				open c02;
				loop
				fetch c02 into
					pr_imposto_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					RAISE NOTICE 'cd_tributo_w = %', cd_tributo_w;
				end loop;
				close c02;

				if pr_imposto_w > 0 then

					vl_imposto_w		:= ((vl_receita_w  * pr_imposto_w) / 100);

					update	Conta_paciente_Resumo
					set 	vl_imposto		= vl_imposto_w
					where	nr_interno_conta	= nr_interno_conta_p
					and	nr_sequencia		= nr_sequencia_w;
				end if;

			end loop;
			close c03;

			end;
		end loop;
		close c01;

		open C04;
		loop
		fetch C04 into	
			nr_sequencia_w,
			vl_receita_w,
			nr_seq_proc_pacote_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin

			select	max(b.pr_imposto)
			into STRICT	pr_imposto_pacote_w
			from	procedimento_paciente a,
				propaci_imposto b
			where 	a.nr_sequencia = b.nr_seq_propaci
			and   	a.nr_interno_conta = nr_interno_conta_p
			and	a.nr_seq_proc_pacote = nr_seq_proc_pacote_w;

			if (pr_imposto_pacote_w > 0) then
				vl_imposto_w		:= ((vl_receita_w  * pr_imposto_pacote_w) / 100);

				update	Conta_paciente_Resumo
				set 	vl_imposto		= vl_imposto_w
				where	nr_interno_conta	= nr_interno_conta_p
				and	nr_sequencia		= nr_sequencia_w;
			end if;

			end;
		end loop;
		close C04;

		select	sum(vl_imposto)
		into STRICT	vl_imposto_resumo_w
		from	conta_paciente_resumo
		where	nr_interno_conta = nr_interno_conta_p;

		select	round((sum(x.vl_imposto))::numeric,2)
		into STRICT	vl_imposto_conta_w
		from (
			SELECT	sum(b.vl_imposto) vl_imposto
			from	procedimento_paciente a,
				propaci_imposto b
			where	a.nr_sequencia = b.nr_seq_propaci
			and	a.nr_interno_conta = nr_interno_conta_p
			
union all

			SELECT	sum(b.vl_imposto)
			from	material_atend_paciente a,
				matpaci_imposto b
			where	a.nr_sequencia = b.nr_seq_matpaci
			and	a.nr_interno_conta = nr_interno_conta_p
		) x;

		if (coalesce(vl_imposto_resumo_w,0) <> coalesce(vl_imposto_conta_w,0)) then

			vl_diferenca_imp_w	:= vl_imposto_resumo_w - vl_imposto_conta_w;

			select	max(nr_sequencia)
			into STRICT	nr_seq_resumo_w
			from	conta_paciente_resumo
			where	nr_interno_conta	= nr_interno_conta_p
			and	vl_imposto > 0;

			update	conta_paciente_resumo
			set	vl_imposto		= vl_imposto - vl_diferenca_imp_w
			where	nr_interno_conta	= nr_interno_conta_p
			and	nr_sequencia		= nr_seq_resumo_w;

		end if;

	else

		open c03;
		loop
		fetch c03 into
			cd_tributo_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			pr_imposto_w			:= 0;

			open c02;
			loop
			fetch c02 into
				pr_imposto_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				RAISE NOTICE 'cd_tributo_w = %', cd_tributo_w;
			end loop;
			close c02;
				pr_imposto_ww	:= pr_imposto_ww + pr_imposto_w;
		end loop;
		close c03;

		open c01;
		loop
		fetch c01 into 	
			nr_sequencia_w,
			vl_receita_w,
			cd_material_w,
			cd_procedimento_w,
			ie_origem_proced_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
				vl_imposto_w	:= (vl_receita_w  * pr_imposto_ww) / 100;

				IF ((philips_param_pck.get_cd_pais = 15) or (upper(ds_nls_territory_w) = 'BOLIVIA') or pkg_i18n.get_user_locale = 'es_BO') then -- Only for Bolivia
					CALL INSERE_RESUMO_IMPOSTOS(
						NR_SEQ_CONTA_PAC_RESUMO_P  => NR_SEQUENCIA_W,
						NR_INTERNO_CONTA_P         => NR_INTERNO_CONTA_P,
						CD_TRIBUTO_P               => CD_TRIBUTO_W,
						VL_IMPOSTO_P               => VL_IMPOSTO_W, 
						CD_CONVENIO_PARAMETRO_P	   => CD_CONVENIO_W, 
						CD_PROCEDIMENTO_P          => CD_PROCEDIMENTO_W,  
						CD_MATERIAL_P              => CD_MATERIAL_W,
						ie_origem_proced_p         => ie_origem_proced_w
					);
				END IF;

				update	conta_paciente_resumo
				set 	vl_imposto			= vl_imposto_w
				where	nr_interno_conta	= nr_interno_conta_p
				and		nr_sequencia		= nr_sequencia_w;
			end;
		end loop;
		close c01;

	end if;
	end;
end if;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_calculo_imposto ( nr_interno_conta_p CONTA_PACIENTE_RESUMO.NR_INTERNO_CONTA%type ) FROM PUBLIC;

