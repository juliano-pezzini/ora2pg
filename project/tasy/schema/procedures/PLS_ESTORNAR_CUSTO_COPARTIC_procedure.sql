-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_estornar_custo_copartic ( nr_seq_conta_copartic_p bigint, ds_motivo_p text, ie_acao_p text, nm_usuario_p text, ie_opcao_p text) AS $body$
DECLARE


/*
ie_opcao_p
C - Contas médicas
R - Recursos de glosa

ie_acao_p
I - Item
T - Total
A - Apropriação
R - Recalculo de coparticipação

ie_opcao_p determina se a ação é sobre a conta ou sobre o recurso de glosa
ie_acao_p determina de onde veio a ação. Item é valor individual, Total é a conta toda. Apropriação é valores de apropriação do recurso de glosa.
*/
				
qt_registros_w			bigint;
qt_registros_mensalidade_w 	bigint := 0;
nr_seq_conta_copartic_w		bigint;
nr_seq_conta_w			bigint;
qt_vago_w			bigint;
ds_obervacao_w			varchar(1000);
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
nr_seq_copartic_contab_w	pls_conta_copartic_contab.nr_sequencia%type;
qt_cta_monitor_w		integer;
nr_seq_regra_limite_copartic_w	pls_conta_coparticipacao.nr_seq_regra_limite_copartic%type;

C01 CURSOR(nr_seq_conta_copartic_pc		pls_conta_coparticipacao.nr_sequencia%type) FOR
	SELECT	a.cd_classif_cred,
		a.cd_classif_cred_provisao,
		a.cd_classif_deb,
		a.cd_classif_deb_provisao,
		a.cd_conta_cred,
		a.cd_conta_cred_provisao,
		a.cd_conta_deb,
		a.cd_conta_deb_provisao,
		a.cd_historico,
		a.cd_historico_provisao,
		a.ie_ato_cooperado,     
		a.nr_lote_contabil_estorno,
		a.nr_lote_contabil_prov,
		a.nr_seq_conta,
		a.nr_seq_conta_resumo,
		a.nr_seq_esquema,
		a.nr_seq_esquema_prov,
		a.nr_seq_grupo_ans,
		a.nr_seq_prestador_pgto,               
		a.vl_ato_auxiliar * -1 vl_ato_auxiliar,
		a.vl_ato_cooperado * -1 vl_ato_cooperado,
		a.vl_ato_nao_cooperado * -1 vl_ato_nao_cooperado,
		a.vl_coparticipacao * -1 vl_coparticipacao,
		a.vl_provisao * -1 vl_provisao
	from	pls_conta_copartic_contab a
	where	nr_seq_conta_copartic = nr_seq_conta_copartic_pc;

BEGIN
select	max(nr_seq_conta),
	max(nr_seq_regra_limite_copartic)
into STRICT	nr_seq_conta_w,
	nr_seq_regra_limite_copartic_w
from	pls_conta_coparticipacao
where	nr_sequencia = nr_seq_conta_copartic_p;

-- Verifica se pode realizar o estorno da coparticipação

-- considerando se a conta foi enviada no monitoramento TISS

-- conforme a opção que está sendo estornada, conta ou recurso
CALL pls_obter_se_conta_monitor(nr_seq_conta_w, ie_opcao_p);

select	count(*)
into STRICT	qt_registros_w
from	pls_conta_coparticipacao
where	nr_sequencia	= nr_seq_conta_copartic_p
and	coalesce(nr_seq_mensalidade_seg::text, '') = '';

--Se retornou maior que zero, quer dizer que os registros de coparticipação encontrados não estão vinculados a uma mensalidade diretamente

--informado no campo nr_seq_mensalidade_seg. Ainda verificamos abaixo se existe algum registro de mensalidade ligado a essa coparticipação
if (qt_registros_w > 0) then
	select  count(1)
	into STRICT 	qt_registros_mensalidade_w
	from  	pls_mensalidade_item_conta a,
			pls_mensalidade_seg_item b,
			pls_mensalidade_segurado c,
			pls_mensalidade d
	where  	b.nr_sequencia = a.nr_seq_item
	and  	c.nr_sequencia = b.nr_seq_mensalidade_seg
	and  	d.nr_sequencia = c.nr_seq_mensalidade
	and  	a.nr_seq_conta_copartic = nr_seq_conta_copartic_p
	and	coalesce(d.ie_cancelamento::text, '') = '';
else
	qt_registros_mensalidade_w	:= 0;
end if;

if	((qt_registros_w > 0) and ((qt_registros_mensalidade_w = 0) and (coalesce(nr_seq_regra_limite_copartic_w::text, '') = ''))) then
	select	nextval('pls_conta_coparticipacao_seq')
	into STRICT	nr_seq_conta_copartic_w
	;
	
	insert	into	pls_conta_coparticipacao(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
			nr_seq_conta, nr_seq_conta_proc, tx_coparticipacao, vl_coparticipacao, nr_seq_regra,
			vl_base_copartic, vl_coparticipacao_unit, ie_calculo_coparticipacao, ie_cobrar_mensalidade,
			nr_seq_regra_exclusao, nr_seq_conta_mat, qt_liberada_copartic,
			ie_estorno_custo, dt_estorno, vl_provisao, ie_origem_regra,ie_status_coparticipacao,
			cd_centro_custo, cd_classif_cred, cd_classif_cred_ant,
			cd_classif_cred_provisao, cd_classif_deb, cd_classif_deb_ant,
			cd_classif_deb_provisao, cd_conta_antec_baixa, cd_conta_cred,
			cd_conta_cred_antecip, cd_conta_cred_provisao, vl_copartic_mens,
			cd_conta_deb, cd_conta_deb_antecip, cd_conta_deb_provisao,
			cd_historico, cd_historico_baixa, cd_historico_provisao,
			cd_procedimento_internacao, cd_sistema_ant, ds_justificativa_canc,
			dt_competencia_mens, dt_fechamento_discussao, dt_mes_competencia,
			ie_ato_cooperado, ie_gerar_mensalidade, ie_glosa,
			ie_origem_copartic, ie_origem_proced_internacao, ie_preco,
			ie_status_mensalidade, ie_tipo_guia, ie_tipo_prestador_atend,
			ie_tipo_prestador_exec, ie_tipo_protocolo, ie_tipo_segurado,
			nr_lote_contabil_estorno, nr_lote_contabil_prov, nr_seq_conta_rec,
			nr_seq_disc_mat, nr_seq_disc_proc, nr_seq_esquema,
			nr_seq_esquema_prev, nr_seq_grupo_ans, nr_seq_mat_rec,
			nr_seq_mensalidade_seg, nr_seq_motivo_cancel, nr_seq_pagador,
			nr_seq_prestador_atend, nr_seq_prestador_exec, nr_seq_processo_copartic,
			nr_seq_proc_rec, nr_seq_protocolo, nr_seq_rec_futura,
			nr_seq_regra_copartic, nr_seq_regra_ctb_cred, nr_seq_regra_ctb_deb,
			nr_seq_regra_intercambio, nr_seq_regra_limite_copartic, nr_seq_regra_origem,
			nr_seq_regra_preco_copart, nr_seq_segurado, tx_copartic_mens,
			vl_ato_auxiliar, vl_ato_cooperado, vl_ato_nao_cooperado, ds_observacao)
		(SELECT	nr_seq_conta_copartic_w, clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
			nr_seq_conta, nr_seq_conta_proc, tx_coparticipacao, vl_coparticipacao*-1, nr_seq_regra,
			vl_base_copartic, vl_coparticipacao_unit, ie_calculo_coparticipacao, 'N',
			nr_seq_regra_exclusao, nr_seq_conta_mat, qt_liberada_copartic,
			'S', clock_timestamp(), vl_provisao, ie_origem_regra,ie_status_coparticipacao,
			cd_centro_custo, cd_classif_cred, cd_classif_cred_ant,
			cd_classif_cred_provisao, cd_classif_deb, cd_classif_deb_ant,
			cd_classif_deb_provisao, cd_conta_antec_baixa, cd_conta_cred,
			cd_conta_cred_antecip, cd_conta_cred_provisao, vl_copartic_mens*-1,
			cd_conta_deb, cd_conta_deb_antecip, cd_conta_deb_provisao,
			cd_historico, cd_historico_baixa, cd_historico_provisao,
			cd_procedimento_internacao, cd_sistema_ant, ds_justificativa_canc,
			dt_competencia_mens, dt_fechamento_discussao, dt_mes_competencia,
			ie_ato_cooperado, ie_gerar_mensalidade, ie_glosa,
			ie_origem_copartic, ie_origem_proced_internacao, ie_preco,
			ie_status_mensalidade, ie_tipo_guia, ie_tipo_prestador_atend,
			ie_tipo_prestador_exec, ie_tipo_protocolo, ie_tipo_segurado,
			nr_lote_contabil_estorno, nr_lote_contabil_prov, nr_seq_conta_rec,
			nr_seq_disc_mat, nr_seq_disc_proc, nr_seq_esquema,
			nr_seq_esquema_prev, nr_seq_grupo_ans, nr_seq_mat_rec, 
			nr_seq_mensalidade_seg, nr_seq_motivo_cancel, nr_seq_pagador,
			nr_seq_prestador_atend, nr_seq_prestador_exec, nr_seq_processo_copartic,
			nr_seq_proc_rec, nr_seq_protocolo, nr_seq_rec_futura,
			nr_seq_regra_copartic, nr_seq_regra_ctb_cred, nr_seq_regra_ctb_deb,
			nr_seq_regra_intercambio, nr_seq_regra_limite_copartic, nr_seq_regra_origem,
			nr_seq_regra_preco_copart, nr_seq_segurado, tx_copartic_mens,
			vl_ato_auxiliar*-1, vl_ato_cooperado*-1, vl_ato_nao_cooperado*-1,
			ds_observacao
		from	pls_conta_coparticipacao
		where	nr_sequencia	= nr_seq_conta_copartic_p);
	
	select	nr_seq_conta,
		nr_seq_conta_proc,
		nr_seq_conta_mat
	into STRICT	nr_seq_conta_w,
		nr_seq_conta_proc_w,
		nr_seq_conta_mat_w
	from	pls_conta_coparticipacao
	where	nr_sequencia	= nr_seq_conta_copartic_p;
	
	if (ie_acao_p = 'I') then
		ds_obervacao_w := 	'Estorno realizado através da funcionalidade ''BD - Estornar custo''';
	elsif (ie_acao_p = 'T') then
		ds_obervacao_w := 	'Estorno realizado através da funcionalidade ''BD - Estornar valores coparticipação conta''';
	elsif (ie_acao_p = 'A') then
		ds_obervacao_w := 	'Estorno realizado através da funcionalidade ''BD - Estornar valores de apropriação''';
	elsif (ie_acao_p = 'R') then
		ds_obervacao_w := 	'Estorno realizado através da aplicação do recálculo de coparticipação';
	end if;
	
	-- Lança um registro de log para o item estornado
	insert	into	pls_conta_copartic_log(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
				nr_seq_conta_copartic,nr_seq_conta,nr_seq_conta_proc,nr_seq_conta_mat,vl_coparticipacao,
				vl_coparticipacao_old,nr_seq_mensalidade_seg,nr_seq_mensalidade_seg_old,ie_status_mensalidade,ie_status_mensalidade_old,
				ie_status_coparticipacao,ie_status_coparticipacao_old,ie_gerar_mensalidade,ie_gerar_mensalidade_old,
				nm_maquina,ds_log_call,ds_log,ds_motivo)
		values (	nextval('pls_conta_copartic_log_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
				nr_seq_conta_copartic_p,nr_seq_conta_w,nr_seq_conta_proc_w,nr_seq_conta_mat_w,null,
				null,null,null,null,null,
				null,null,null,null,
				wheb_usuario_pck.get_machine,null,ds_obervacao_w,ds_motivo_p);
	
	-- Lança registro de log para o item de estorno (valor negativo)
	insert	into	pls_conta_copartic_log(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
				nr_seq_conta_copartic,nr_seq_conta,nr_seq_conta_proc,nr_seq_conta_mat,vl_coparticipacao,
				vl_coparticipacao_old,nr_seq_mensalidade_seg,nr_seq_mensalidade_seg_old,ie_status_mensalidade,ie_status_mensalidade_old,
				ie_status_coparticipacao,ie_status_coparticipacao_old,ie_gerar_mensalidade,ie_gerar_mensalidade_old,
				nm_maquina,ds_log_call,ds_log,ds_motivo)
		values (	nextval('pls_conta_copartic_log_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
				nr_seq_conta_copartic_w,nr_seq_conta_w,nr_seq_conta_proc_w,nr_seq_conta_mat_w,null,
				null,null,null,null,null,
				null,null,null,null,
				wheb_usuario_pck.get_machine,null,ds_obervacao_w,ds_motivo_p);
	
	--Gera estornos paraa apropriação copartic caso tiver
	insert into pls_conta_copartic_aprop(	nr_sequencia, nr_seq_conta_coparticipacao, nr_seq_centro_apropriacao,
						vl_apropriacao, dt_atualizacao, dt_atualizacao_nrec, 
						nm_usuario_nrec, nm_usuario)
					(SELECT	nextval('pls_conta_copartic_aprop_seq'), nr_seq_conta_copartic_w, nr_seq_centro_apropriacao,
						vl_apropriacao * -1, dt_atualizacao, dt_atualizacao_nrec, nm_usuario_p, nm_usuario_p
					from	pls_conta_copartic_aprop
					where	nr_seq_conta_coparticipacao = nr_seq_conta_copartic_p);
	
	for r_C01_w in C01(nr_seq_conta_copartic_p) loop
	
		select	nextval('pls_conta_copartic_contab_seq')
		into STRICT	nr_seq_copartic_contab_w
		;
	
		insert	into	pls_conta_copartic_contab(	cd_classif_cred, cd_classif_cred_provisao, cd_classif_deb,
					cd_classif_deb_provisao, cd_conta_cred, cd_conta_cred_provisao,
					cd_conta_deb, cd_conta_deb_provisao, cd_historico,
					cd_historico_provisao, dt_atualizacao, dt_atualizacao_nrec,
					ie_ato_cooperado, nm_usuario, nm_usuario_nrec,
					nr_lote_contabil_estorno, nr_lote_contabil_prov, nr_seq_conta,
					nr_seq_conta_copartic, nr_seq_conta_resumo, nr_seq_esquema,
					nr_seq_esquema_prov, nr_seq_grupo_ans, nr_seq_prestador_pgto,
					nr_sequencia, vl_ato_auxiliar, vl_ato_cooperado,
					vl_ato_nao_cooperado, vl_coparticipacao, vl_provisao,
					dt_mes_competencia)
			values (	r_C01_w.cd_classif_cred, r_C01_w.cd_classif_cred_provisao, r_C01_w.cd_classif_deb,
					r_C01_w.cd_classif_deb_provisao, r_C01_w.cd_conta_cred, r_C01_w.cd_conta_cred_provisao,
					r_C01_w.cd_conta_deb, r_C01_w.cd_conta_deb_provisao, r_C01_w.cd_historico,
					r_C01_w.cd_historico_provisao, clock_timestamp(), clock_timestamp(),
					r_C01_w.ie_ato_cooperado, nm_usuario_p, nm_usuario_p,
					r_C01_w.nr_lote_contabil_estorno, r_C01_w.nr_lote_contabil_prov, r_C01_w.nr_seq_conta,
					nr_seq_conta_copartic_w, r_C01_w.nr_seq_conta_resumo, r_C01_w.nr_seq_esquema,
					r_C01_w.nr_seq_esquema_prov, r_C01_w.nr_seq_grupo_ans, r_C01_w.nr_seq_prestador_pgto,
					nr_seq_copartic_contab_w, r_C01_w.vl_ato_auxiliar, r_C01_w.vl_ato_cooperado,
					r_C01_w.vl_ato_nao_cooperado, r_C01_w.vl_coparticipacao, r_C01_w.vl_provisao,
					clock_timestamp()); -- Dt_mes_competencia recebe sysdate segundo orientação Marcio Ropelato
	end loop;
		
	CALL pls_atualizar_codificacao_pck.pls_atualizar_codificacao(trunc(clock_timestamp(),'month'));
	qt_vago_w := ctb_pls_atualizar_prov_copart(nr_seq_conta_w, nr_seq_conta_copartic_w, null, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, qt_vago_w);
	
	update	pls_conta_coparticipacao
	set	dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p,
		ie_cobrar_mensalidade	= 'N',
		dt_estorno		= clock_timestamp(),
		ie_estorno_custo	= 'S'
	where	nr_sequencia		= nr_seq_conta_copartic_p;
	
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_estornar_custo_copartic ( nr_seq_conta_copartic_p bigint, ds_motivo_p text, ie_acao_p text, nm_usuario_p text, ie_opcao_p text) FROM PUBLIC;

