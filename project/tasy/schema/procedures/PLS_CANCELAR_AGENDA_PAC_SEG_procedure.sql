-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_cancelar_agenda_pac_seg ( nr_seq_segurado_p bigint, dt_rescisao_p timestamp, nr_seq_mtvo_rescisao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_agenda_w			bigint;
nr_seq_agenda_w			agenda_consulta.nr_sequencia%type;
cd_motivo_cancelamento_w	varchar(15);
ds_motivo_w			varchar(255);
nr_seq_motivo_cancel_agenda_w	bigint;
cd_pessoa_fisica_w		varchar(10);
qt_beneficiarios_w		bigint;
cd_convenio_w			integer;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
ie_retorno_consulta_w		varchar(1);

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_agenda,
		a.cd_convenio,
		a.nr_seq_segurado
	from	agenda_paciente a
	where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
	and	a.dt_agenda		> dt_rescisao_p
	and	a.ie_status_agenda not in ('C','F');

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_agenda,
		a.cd_convenio,
		a.nr_seq_segurado,
		(	SELECT	CASE WHEN max(x.ie_tipo_classif)='R' THEN 'S'  ELSE 'N' END
			from	agenda_classif x
			where	x.cd_classificacao = a.ie_classif_agenda) ie_retorno
	from	agenda_consulta a
	where	a.cd_pessoa_fisica = cd_pessoa_fisica_w
	and	a.dt_agenda	> dt_rescisao_p
	and	a.ie_status_agenda not in ('C','F');

C03 CURSOR FOR
	SELECT	nr_seq_motivo_cancel_agenda
	from	pls_regra_cancel_agenda
	where	((cd_convenio = cd_convenio_w) or (coalesce(cd_convenio::text, '') = ''))
	and	((nr_seq_motivo_cancelamento = nr_seq_mtvo_rescisao_p) or (coalesce(nr_seq_motivo_cancelamento::text, '') = ''))
	and	((coalesce(ie_considerar_retorno_consulta,'S') = 'S') or (coalesce(ie_considerar_retorno_consulta,'S') = 'N' and ie_retorno_consulta_w <> 'S'))
	order by coalesce(nr_seq_motivo_cancelamento,0);


BEGIN

select	max(cd_pessoa_fisica)
into STRICT	cd_pessoa_fisica_w
from	pls_segurado
where	nr_sequencia	= nr_seq_segurado_p;

open C01;
loop
fetch C01 into
	nr_seq_agenda_w,
	cd_agenda_w,
	cd_convenio_w,
	nr_seq_segurado_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ie_retorno_consulta_w	:= 'N';
	
	if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then --Se foi informado beneficiario na agenda, somente cancela a agenda quando rescindir esse beneficiario
		if (nr_seq_segurado_w = nr_seq_segurado_p) then
			qt_beneficiarios_w	:= 0;
		else
			qt_beneficiarios_w	:= 1;
		end if;
	else
		select	count(*)
		into STRICT	qt_beneficiarios_w
		from	pls_segurado
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	nr_sequencia		<> nr_seq_segurado_p
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and	coalesce(dt_rescisao::text, '') = '';
	end if;
	
	if (qt_beneficiarios_w = 0) then
		nr_seq_motivo_cancel_agenda_w	:= null;
		open C03;
		loop
		fetch C03 into
			nr_seq_motivo_cancel_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */	
		end loop;
		close C03;
		
		if (nr_seq_motivo_cancel_agenda_w IS NOT NULL AND nr_seq_motivo_cancel_agenda_w::text <> '') then
			select	max(cd_motivo)
			into STRICT	cd_motivo_cancelamento_w
			from	agenda_motivo_cancelamento
			where	nr_sequencia	= nr_seq_motivo_cancel_agenda_w;
			
			CALL Alterar_status_agenda(cd_agenda_w, nr_seq_agenda_w, 'C', cd_motivo_cancelamento_w, '', 'N', nm_usuario_p);
		end if;
	end if;
	end;
end loop;
close C01;

open C02;
loop
fetch C02 into
	nr_seq_agenda_w,
	cd_agenda_w,
	cd_convenio_w,
	nr_seq_segurado_w,
	ie_retorno_consulta_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then --Se foi informado beneficiario na agenda, somente cancela a agenda quando rescindir esse beneficiario
		if (nr_seq_segurado_w = nr_seq_segurado_p) then
			qt_beneficiarios_w	:= 0;
		else
			qt_beneficiarios_w	:= 1;
		end if;
	else
		select	count(*)
		into STRICT	qt_beneficiarios_w
		from	pls_segurado
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	nr_sequencia		<> nr_seq_segurado_p
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and	coalesce(dt_rescisao::text, '') = '';
	end if;
	
	if (qt_beneficiarios_w = 0) then
		nr_seq_motivo_cancel_agenda_w	:= null;
		open C03;
		loop
		fetch C03 into
			nr_seq_motivo_cancel_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
		end loop;
		close C03;
		
		if (nr_seq_motivo_cancel_agenda_w IS NOT NULL AND nr_seq_motivo_cancel_agenda_w::text <> '') then
			select	max(cd_motivo)
			into STRICT	cd_motivo_cancelamento_w
			from	agenda_motivo_cancelamento
			where	nr_sequencia	= nr_seq_motivo_cancel_agenda_w;
			
			CALL Alterar_Status_AgeCons(cd_agenda_w, nr_seq_agenda_w, 'C', cd_motivo_cancelamento_w, '', 'N', nm_usuario_p, null);
		end if;
	end if;
	end;
end loop;
close C02;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cancelar_agenda_pac_seg ( nr_seq_segurado_p bigint, dt_rescisao_p timestamp, nr_seq_mtvo_rescisao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

