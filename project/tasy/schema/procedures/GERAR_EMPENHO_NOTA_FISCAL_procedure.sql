-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_empenho_nota_fiscal ( nr_sequencia_p bigint, ie_acao_p text, nm_usuario_p text) AS $body$
DECLARE


cd_estabelecimento_w			bigint;
dt_entrada_saida_w			timestamp;
ie_inclusao_w				varchar(1)	:= 'N';
ie_validar_empenho_orcado_w		funcao_param_usuario.vl_parametro%type;
vl_emp_orcamento_w			ctb_orcamento.vl_empenho%type;
vl_emp_orcado_w				ctb_orcamento.vl_orcado%type;
nr_seq_mes_ref_w			ctb_mes_ref.nr_sequencia%type;

c01 CURSOR FOR
SELECT	c.cd_centro_custo,
	a.cd_conta_contabil,
	coalesce(sum(c.vl_rateio),0) vl_empenho
from	ctb_grupo_conta e,
	conta_contabil d,
	nota_fiscal_item_rateio c,
	nota_fiscal_item a,
	nota_fiscal b
where	a.nr_sequencia		= b.nr_sequencia
and	a.nr_sequencia		= c.nr_seq_nota
and	a.nr_item_nf		= c.nr_item_nf
and	d.cd_grupo		= e.cd_grupo
and	d.cd_empresa		= e.cd_empresa
and	d.cd_conta_contabil	= a.cd_conta_contabil
and 	b.ie_situacao = '1'
and	(b.dt_atualizacao_estoque IS NOT NULL AND b.dt_atualizacao_estoque::text <> '')
and	e.ie_tipo in ('R','D')
and	e.ie_debito_credito 	= 'D'
and	b.nr_sequencia		= nr_sequencia_p
and	(c.cd_centro_custo IS NOT NULL AND c.cd_centro_custo::text <> '')
group by c.cd_centro_custo,
	a.cd_conta_contabil

union

SELECT	a.cd_centro_custo,
	a.cd_conta_contabil,
	coalesce(sum(a.vl_liquido),0)
from	ctb_grupo_conta e,
	conta_contabil d,
	nota_fiscal_item a,
	nota_fiscal b
where	a.nr_sequencia		= b.nr_sequencia
and	d.cd_grupo		= e.cd_grupo
and	d.cd_conta_contabil	= a.cd_conta_contabil
and	d.cd_empresa		= e.cd_empresa
and	e.ie_tipo in ('R','D')
and	e.ie_debito_credito 	= 'D'
and	b.nr_sequencia		= nr_sequencia_p
and	(a.cd_centro_custo IS NOT NULL AND a.cd_centro_custo::text <> '')
and 	b.ie_situacao = '1'
and	(b.dt_atualizacao_estoque IS NOT NULL AND b.dt_atualizacao_estoque::text <> '')
and	not exists (	select	1
			from	nota_fiscal_item_rateio c
			where	c.nr_seq_nota	= a.nr_sequencia
			and	c.nr_seq_nota	= b.nr_sequencia
			and	c.nr_item_nf	= a.nr_item_nf)
group  by a.cd_centro_custo,
	a.cd_conta_contabil;
	
vet01	C01%RowType;
	
c02 CURSOR FOR
SELECT	a.dt_referencia,
	a.cd_estabelecimento,
	a.cd_centro_custo,
	a.cd_conta_contabil
from	ctb_orc_doc_empenho a
where	a.nr_seq_nota_fiscal	= nr_sequencia_p;
	
vet02	C02%RowType;

C03 CURSOR FOR
	SELECT	distinct b.nr_solic_compra
	from	nota_fiscal a,
			nota_fiscal_item b
	where	a.nr_sequencia	= b.nr_sequencia
	and 	a.nr_sequencia	= nr_sequencia_p
	and 	(a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '')
	and 	(b.nr_solic_compra IS NOT NULL AND b.nr_solic_compra::text <> '');
	
vet03	C03%RowType;


BEGIN

select	max(cd_estabelecimento),
	max(dt_entrada_saida)
into STRICT	cd_estabelecimento_w,
	dt_entrada_saida_w
from	nota_fiscal
where	nr_sequencia	= nr_sequencia_p;

dt_entrada_saida_w	:= PKG_DATE_UTILS.start_of(dt_entrada_saida_w,'month',0);

open C02;
loop
fetch C02 into	
	vet02;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	
	delete from ctb_orc_doc_empenho
	where	nr_seq_nota_fiscal	= nr_sequencia_p
	and	cd_centro_custo		= vet02.cd_centro_custo
	and	cd_conta_contabil	= vet02.cd_conta_contabil
	and	dt_referencia		= vet02.dt_referencia
	and	cd_estabelecimento	= vet02.cd_estabelecimento;
	
	CALL ctb_atualizar_saldo_empenho(	vet02.cd_estabelecimento,
					vet02.dt_referencia,
					vet02.cd_centro_custo,
					vet02.cd_conta_contabil,
					nm_usuario_p);

	end;
end loop;
close C02;

vl_parametro_p => ie_validar_empenho_orcado_w := obter_param_usuario( cd_funcao_p => 925, nr_sequencia_p => 123, cd_perfil_p => obter_perfil_ativo, nm_usuario_p => nm_usuario_p, cd_estabelecimento_p => cd_estabelecimento_w, vl_parametro_p => ie_validar_empenho_orcado_w);

open C01;
loop
fetch C01 into	
	vet01;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	
	if ( coalesce(ie_validar_empenho_orcado_w, 'N') = 'S') then
		
		select	max(nr_sequencia)
		into STRICT	nr_seq_mes_ref_w
		from	ctb_mes_ref
		where	cd_empresa	= obter_empresa_estab(cd_estabelecimento_w)
		and	dt_referencia	= dt_entrada_saida_w;

		select 	coalesce(ctb_obter_empenho_orcamento(nr_seq_mes_ref_w, vet01.cd_conta_contabil, vet01.cd_centro_custo, cd_estabelecimento_w), 0)
		into STRICT	vl_emp_orcamento_w
		;
		
		select	coalesce(ctb_obter_valor_orcado(pkg_date_utils.start_of(dt_entrada_saida_w,'MONTH', 0), vet01.cd_conta_contabil, vet01.cd_centro_custo, cd_estabelecimento_w), 0)
		into STRICT	vl_emp_orcado_w
		;

		if (vl_emp_orcamento_w > vl_emp_orcado_w) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(substr(wheb_mensagem_pck.get_texto(nr_seq_mensagem_p => 1198907),1,255) || chr(13) ||
				substr(wheb_mensagem_pck.get_texto(nr_seq_mensagem_p => 1198908,
									vl_macros_p => 'VL_EMPENHO='|| campo_mascara_virgula(vl_emp_orcamento_w) ||
									';VL_ORCADO='|| campo_mascara_virgula(vl_emp_orcado_w)),1,255));
		end if;
		
	end if;
	
	CALL ctb_registrar_doc_empenho(cd_estabelecimento_w, dt_entrada_saida_w, nr_sequencia_p,
				null, null, null, null, vet01.cd_centro_custo, vet01.cd_conta_contabil, vet01.vl_empenho, 'N', 'I', nm_usuario_p);
				
	
	end;
end loop;
close C01;

open C03;
loop
fetch C03 into	
	vet03;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
		CALL gerar_empenho_solic_compra(vet03.nr_solic_compra, nm_usuario_p);
	end;
end loop;
close C03;



end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_empenho_nota_fiscal ( nr_sequencia_p bigint, ie_acao_p text, nm_usuario_p text) FROM PUBLIC;

