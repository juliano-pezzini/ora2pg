-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE eup_importar_solic_externa_pep (nr_seq_solicitacao_p bigint, nr_seq_pedido_item_p bigint, nr_prescricao_p bigint, nm_usuario_p text, ie_amostra_ok_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_sequencia_w		bigint;
dt_prescricao_w		timestamp;
cd_setor_entrega_w	integer;
nr_atendimento_w	bigint;
cd_medico_resp_w	varchar(10);
cd_procedimento_w	Pedido_Exame_Externo_item.cd_procedimento%type;
ie_origem_proced_w	bigint;
qt_procedimento_w		bigint;
cd_material_exame_w	varchar(20);
nr_seq_exame_w		bigint;
ie_tipo_exame_w		varchar(1);
ie_exame_parcial_w	varchar(1);
nr_seq_pedido_item_w	bigint;
qt_min_atraso_w		bigint;

cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_setor_w		integer;
cd_setor_proced_w	integer;
ie_tipo_atendimento_w	smallint;
ie_medico_executor_w	varchar(1);
cd_cgc_w		varchar(14);
cd_medico_executor_w	varchar(10);
cd_pessoa_fisica_w	varchar(10);
nr_seq_classificacao_w  bigint;
cd_medico_w		varchar(10);
ie_setor_exclusivo_w	varchar(1);
ds_setor_usuario_w	varchar(150);
cd_setor_usuario_w	integer;
ie_gerar_dt_resultado_w	varchar(1);
ds_setor_lab_w		varchar(100);
ie_imp_setor_coleta_w	varchar(5);

cd_setor_atend_w	varchar(255);
cd_setor_col_w		varchar(255);
cd_setor_ent_w		varchar(255);
qt_dias_entrega_w	bigint;
ie_emite_mapa_w		varchar(1);
ds_hora_fixa_w		varchar(2);
ie_data_resultado_w	varchar(1);
qt_min_entrega_w	bigint;
ie_atualizar_recoleta_w	varchar(1);
dt_resultado_w		timestamp;
cd_setor_solic_w	integer;
ie_dia_semana_final_w	smallint;
ie_dia_semana_w		smallint;
nr_seq_proc_interno_w	bigint;
ie_restring_usuario_w	varchar(10);
ie_Setor_Usuario_Proc_w varchar(10);
ie_forma_atual_dt_result_w	exame_lab_regra_setor.ie_atul_data_result%type;
ds_exame_w		varchar(255);
ie_autorizacao_w	prescr_procedimento.ie_autorizacao%type;
vl_parametro1209_w      prescr_procedimento.ie_autorizacao%type;
vl_parametro1246_w	prescr_procedimento.ie_autorizacao%type;
cd_plano_convenio_w	atend_categoria_convenio.cd_plano_convenio%type;
ds_erro_autorizacao_w	atendimento_paciente.ds_observacao%type;
ie_regra_w		atendimento_paciente.nr_atendimento%type;
nr_seq_regra_w		regra_Convenio_Plano.nr_sequencia%type;
cd_pessoa_fisica_prescr_w	prescr_medica.cd_pessoa_fisica%type;
ie_glosa_w		prescr_procedimento.ie_autorizacao%type;
nr_seq_regra_ajuste_w	atendimento_paciente.nr_atendimento%type;
qt_passagem_setor_w	atendimento_paciente.nr_atendimento%type;
nr_seq_interno_w	atend_paciente_unidade.nr_seq_interno%type;
c01 CURSOR FOR
	SELECT	CASE WHEN coalesce(nr_proc_interno::text, '') = '' THEN cd_procedimento  ELSE obter_cod_proc_interno_conv2(nr_proc_interno,cd_convenio_w,cd_categoria_w,clock_timestamp(),cd_estabelecimento_p,1) END  cd_procedimento,
			CASE WHEN coalesce(nr_proc_interno::text, '') = '' THEN ie_origem_proced  ELSE obter_cod_proc_interno_conv2(nr_proc_interno,cd_convenio_w,cd_categoria_w,clock_timestamp(),cd_estabelecimento_p,2) END  ie_origem_proced,
			qt_exame,
			nr_seq_exame_lab,
			nr_sequencia,
			cd_material_exame,
			nr_proc_interno,
			substr(obter_med_exame_externo(nr_sequencia),1,255) ds_exame
	from	Pedido_Exame_Externo_item
	where	nr_seq_pedido = nr_seq_solicitacao_p
	and ((cd_procedimento IS NOT NULL AND cd_procedimento::text <> '') or (nr_proc_interno IS NOT NULL AND nr_proc_interno::text <> ''))
	and		((coalesce(nr_seq_exame_lab::text, '') = '' and ie_tipo_exame_w = 'N') or ((nr_seq_exame_lab IS NOT NULL AND nr_seq_exame_lab::text <> '') and ie_tipo_exame_w = 'S') or (ie_tipo_exame_w = 'A'))
	order by cd_material_exame,nr_seq_apresent,ds_exame;

procedure CALCULA_DATA_RESULTADO(ie_data_resultado_p	text,
            dt_prescricao_p		timestamp,
            qt_dias_entrega_p	bigint,
            ds_hora_fixa_p	text,
            qt_min_entrega_p	bigint,
            ie_dia_semana_p bigint,
            ie_dia_semana_final_p	bigint) is

ds_hora_fixa_w varchar(2);
qt_min_entrega_w bigint;
ie_dia_semana_w smallint;


BEGIN

ds_hora_fixa_w := ds_hora_fixa_p;
qt_min_entrega_w := qt_min_entrega_p;
ie_dia_semana_w := ie_dia_semana_p;

if	((ie_data_resultado_p = 'P') or (ie_data_resultado_p = 'N')) then
  if	((qt_dias_entrega_p > 0) or (coalesce(ds_hora_fixa_p,0)/24 > 0)) then

    if (coalesce(ds_hora_fixa_p::text, '') = '') then
      ds_hora_fixa_w := to_char(dt_prescricao_p, 'hh24');
    end if;

    if (coalesce(qt_min_entrega_p::text, '') = '') then
      qt_min_entrega_w := to_char(dt_prescricao_p, 'mi');
    end if;

    dt_resultado_w	:= pkg_date_utils.get_Time(
    BASEDATE => dt_prescricao_p,
    HOUR => (ds_hora_fixa_w)::numeric ,
    MINUTE => (qt_min_entrega_w)::numeric 
    ) + qt_dias_entrega_p;

    if (ie_dia_semana_final_p > 0) then
      ie_dia_semana_w	:= obter_cod_dia_semana(dt_resultado_w);
      while(ie_dia_semana_w <>  ie_dia_semana_final_w) loop
        begin
        dt_resultado_w := dt_resultado_w +1;
        ie_dia_semana_w	:= obter_cod_dia_semana(dt_resultado_w);
        end;
      end loop;
    end if;	
  end if;
  elsif (ie_data_resultado_p = 'C') then
    dt_resultado_w := dt_prescricao_p;
  end if;
end;

begin

ds_setor_usuario_w := Obter_Param_Usuario(916, 47, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ds_setor_usuario_w);
ie_setor_exclusivo_w := Obter_Param_Usuario(916, 200, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_setor_exclusivo_w);
ds_setor_lab_w := Obter_Param_Usuario(916, 307, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ds_setor_lab_w);
ie_restring_usuario_w := Obter_Param_Usuario(916, 349, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_restring_usuario_w);
ie_gerar_dt_resultado_w := Obter_Param_Usuario(916, 958, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_dt_resultado_w);
ie_tipo_exame_w := Obter_Param_Usuario(916, 1095, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_tipo_exame_w);
ie_exame_parcial_w := Obter_Param_Usuario(916, 1121, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_exame_parcial_w);
ie_Setor_Usuario_Proc_w := Obter_Param_Usuario(916, 197, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_Setor_Usuario_Proc_w);
ie_imp_setor_coleta_w := Obter_Param_Usuario(916, 1136, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_imp_setor_coleta_w);
vl_parametro1209_w := Obter_Param_Usuario(916, 1209, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, vl_parametro1209_w);
vl_parametro1246_w := Obter_Param_Usuario(916, 1246, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, vl_parametro1246_w);
--Expressao 314533 -> Usuario (com acento no a)
if (ds_setor_usuario_w = obter_desc_expressao_br(314533)) then
	cd_setor_usuario_w := wheb_usuario_pck.get_cd_setor_atendimento;
end if;	

select	max(dt_prescricao),
	max(nr_atendimento),
	max(cd_setor_entrega),
	max(cd_pessoa_fisica)
into STRICT 	dt_prescricao_w,
	nr_atendimento_w,
	cd_setor_entrega_w,
	cd_pessoa_fisica_prescr_w
from 	prescr_medica a
where 	nr_prescricao = nr_prescricao_p;

select	max(ie_tipo_atendimento),
	max(nr_seq_classificacao),	
	max(cd_medico_resp),
	max(obter_convenio_atendimento(nr_atendimento)),
	max(obter_categoria_atendimento(nr_atendimento)),
	max(Obter_Plano_Conv_Atend(nr_atendimento))
into STRICT	ie_tipo_atendimento_w,
	nr_seq_classificacao_w,
	cd_medico_resp_w,
	cd_convenio_w,
	cd_categoria_w,
	cd_plano_convenio_w
from	atendimento_paciente
where	nr_atendimento = nr_atendimento_w;


if (ie_exame_parcial_w = 'S') then
	begin
	select 	CASE WHEN coalesce(nr_proc_interno::text, '') = '' THEN cd_procedimento  ELSE obter_cod_proc_interno_conv2(nr_proc_interno,cd_convenio_w,cd_categoria_w,clock_timestamp(),cd_estabelecimento_p,1) END  cd_procedimento,
			CASE WHEN coalesce(nr_proc_interno::text, '') = '' THEN ie_origem_proced  ELSE obter_cod_proc_interno_conv2(nr_proc_interno,cd_convenio_w,cd_categoria_w,clock_timestamp(),cd_estabelecimento_p,2) END  ie_origem_proced,
			qt_exame,
			nr_seq_exame_lab,
			cd_material_exame,
			nr_proc_interno
	into STRICT 	cd_procedimento_w,
			ie_origem_proced_w,
			qt_procedimento_w,
			nr_seq_exame_w,
			cd_material_exame_w,
			nr_seq_proc_interno_w
	from 	pedido_exame_externo_item
	where 	nr_seq_pedido = nr_seq_solicitacao_p
	and 	nr_sequencia = nr_seq_pedido_item_p
	and ((cd_procedimento IS NOT NULL AND cd_procedimento::text <> '') or (nr_proc_interno IS NOT NULL AND nr_proc_interno::text <> ''))
	and		((coalesce(nr_seq_exame_lab::text, '') = '' and ie_tipo_exame_w = 'N') or ((nr_seq_exame_lab IS NOT NULL AND nr_seq_exame_lab::text <> '') and ie_tipo_exame_w = 'S') or (ie_tipo_exame_w = 'A'));
		
	select	max(cd_setor_exclusivo)
	into STRICT	cd_setor_w
	from	procedimento
	where	cd_procedimento = cd_procedimento_w
	and	ie_origem_proced = ie_origem_proced_w;	
	
	begin
		select  obter_setor_atend_proc(	wheb_usuario_pck.get_cd_estabelecimento,
						cd_procedimento_w, 
						ie_origem_proced_w, 
						null, 
						cd_setor_entrega_w, 
						CASE WHEN coalesce(ie_restring_usuario_w,'X')='S' THEN nm_usuario_p  ELSE '' END , 
						nr_seq_proc_interno_w, 
						nr_atendimento_w)  
		into STRICT	cd_setor_proced_w
		;		
	exception
	when others then
		cd_setor_proced_w := 0;
	end;	
	
	if (coalesce(cd_setor_w,0) > 0) and (ie_setor_exclusivo_w <> 'N')
		and (ie_setor_exclusivo_w <> 'E') then
		
		cd_setor_w   := cd_setor_w;
		
	elsif (coalesce(ie_Setor_Usuario_Proc_w,'N') = 'S') then
		
		cd_setor_w  := wheb_usuario_pck.get_cd_setor_atendimento;
		
	elsif (coalesce(cd_setor_w,0)  <> 0) then
		
		cd_setor_w   := cd_setor_w;
		
	elsif (coalesce(cd_setor_proced_w,0)  <> 0) then
		
		cd_setor_w   :=  cd_setor_proced_w;
		
	elsif (coalesce(cd_setor_entrega_w,0) > 0) then
		
		cd_setor_w := cd_setor_entrega_w;
		
	else 	
		
		cd_setor_w := wheb_usuario_pck.get_cd_setor_atendimento;
	
	end if;
	
	SELECT * FROM consiste_medico_executor(cd_estabelecimento_p, cd_convenio_w, cd_setor_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_atendimento_w, nr_seq_exame_w, null, ie_medico_executor_w, cd_cgc_w, cd_medico_executor_w, cd_pessoa_fisica_w, null, clock_timestamp(), nr_seq_classificacao_w, null, null, null) INTO STRICT ie_medico_executor_w, cd_cgc_w, cd_medico_executor_w, cd_pessoa_fisica_w;
		
	if (ie_medico_executor_w = 'A') then
		cd_medico_w	:= cd_medico_resp_w;
	elsif (ie_medico_executor_w = 'F') then
		cd_medico_w	:= cd_medico_executor_w;
	end if;
	
	if (ds_setor_lab_w = 'E') then
		cd_setor_solic_w := cd_setor_entrega_w;
	else
		cd_setor_solic_w := cd_setor_usuario_w;
	end if;
	
	SELECT * FROM obter_setor_exame_lab_eup(nr_prescricao_p, nr_seq_exame_w, 'N', cd_setor_solic_w, cd_material_exame_w, null, 'S', cd_setor_atend_w, cd_setor_col_w, cd_setor_ent_w, qt_dias_entrega_w, ie_emite_mapa_w, ds_hora_fixa_w, ie_data_resultado_w, qt_min_entrega_w, ie_atualizar_recoleta_w, 'N', ie_dia_semana_final_w, 'N', ie_forma_atual_dt_result_w, qt_min_atraso_w) INTO STRICT cd_setor_atend_w, cd_setor_col_w, cd_setor_ent_w, qt_dias_entrega_w, ie_emite_mapa_w, ds_hora_fixa_w, ie_data_resultado_w, qt_min_entrega_w, ie_atualizar_recoleta_w, ie_dia_semana_final_w, ie_forma_atual_dt_result_w, qt_min_atraso_w;

	dt_resultado_w := null;
	
  CALCULA_DATA_RESULTADO(ie_data_resultado_w,
            dt_prescricao_w,
            qt_dias_entrega_w,
            ds_hora_fixa_w,
            qt_min_entrega_w,
            ie_dia_semana_w,
            ie_dia_semana_final_w);

  begin
  cd_setor_w := coalesce(
  regexp_replace(replace(cd_setor_atend_w, ' ', ''), '\((\d*)(,\d+)*\)', '\1'),
  cd_setor_w
  );
  exception
  when data_exception then
    CALL gravar_log_lab_pragma(06502, 'cd_setor_atend_w: '
                  || cd_setor_atend_w
                  || '; cd_setor_w: '
                  || cd_setor_w,
                  'Tasy',
                  nr_prescricao_p);
  end;
	SELECT * FROM consiste_plano_convenio(nr_atendimento_w, cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, clock_timestamp(), qt_procedimento_w, ie_tipo_atendimento_w, cd_plano_convenio_w, null, ds_erro_autorizacao_w, cd_setor_w, nr_seq_exame_w, ie_regra_w, null, nr_seq_regra_w, nr_seq_proc_interno_w, cd_categoria_w, cd_estabelecimento_p, cd_setor_entrega_w, cd_medico_w, cd_pessoa_fisica_prescr_w, ie_glosa_w, nr_seq_regra_ajuste_w, nr_prescricao_p, null) INTO STRICT ds_erro_autorizacao_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, nr_seq_regra_ajuste_w;
	ie_autorizacao_w := 'L';
	if (ie_regra_w in (1,2) or (vl_parametro1209_w = 'S' and ie_regra_w in (5,8))) then
		ie_autorizacao_w := 'B';
	elsif (ie_regra_w in (3,6,7)) then
		ie_autorizacao_w := 'PA';
	end if;	
			
		select	coalesce(max(nr_sequencia), 0) + 1
		into STRICT	nr_sequencia_w
		from	prescr_procedimento
		where	nr_prescricao	= nr_prescricao_p;

		begin
		insert into prescr_procedimento(
			nr_prescricao,
			nr_sequencia,
			cd_procedimento,
			ie_origem_proced,
			qt_procedimento,
			ie_urgencia,
			ie_suspenso,
			dt_prev_execucao,
			ie_status_atend,
			dt_atualizacao,
			nm_usuario,
			ie_origem_inf,
			nr_seq_interno,
			ie_avisar_result,
			cd_motivo_baixa,
			nr_seq_exame,
			nr_seq_pedido_externo,
			nr_seq_pedido_ext_item,
			cd_medico_exec,
			cd_setor_atendimento,
			cd_setor_coleta,
			cd_setor_entrega,
			cd_material_exame,
			dt_resultado,
			ie_amostra,
			ie_pendente_amostra,
			nr_seq_proc_interno,
			ie_autorizacao)
		values (nr_prescricao_p,
			nr_sequencia_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			qt_procedimento_w,
			'N', 
			'N',
			dt_prescricao_w,
			5, 
			clock_timestamp(), 
			nm_usuario_p,
			'1', 
			nextval('prescr_procedimento_seq'),
			'N',
			0,
			nr_seq_exame_w,
			nr_seq_solicitacao_p,
			nr_seq_pedido_item_p,
			cd_medico_w,
			cd_setor_w,
			CASE WHEN ie_imp_setor_coleta_w='S' THEN  cd_setor_entrega_w  ELSE cd_setor_usuario_w END ,
			cd_setor_usuario_w,
			cd_material_exame_w,
			dt_resultado_w,
			ie_amostra_ok_p,
			'N',
			nr_seq_proc_interno_w,
			ie_autorizacao_w);
		exception
		when 	others then
			nr_sequencia_w := null;
		end;
	end;
else
	begin
	open c01;
	loop
	fetch 	c01 into
		cd_procedimento_w,
		ie_origem_proced_w,
		qt_procedimento_w,
		nr_seq_exame_w,
		nr_seq_pedido_item_w,
		cd_material_exame_w,
		nr_seq_proc_interno_w,
		ds_exame_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	
	select	max(cd_setor_exclusivo)
	into STRICT	cd_setor_w
	from	procedimento
	where	cd_procedimento = cd_procedimento_w
	and	ie_origem_proced = ie_origem_proced_w;
	
	begin
		select  obter_setor_atend_proc(	wheb_usuario_pck.get_cd_estabelecimento,
						cd_procedimento_w, 
						ie_origem_proced_w, 
						null, 
						cd_setor_entrega_w, 
						CASE WHEN coalesce(ie_restring_usuario_w,'X')='S' THEN nm_usuario_p  ELSE '' END , 
						nr_seq_proc_interno_w, 
						nr_atendimento_w)  
		into STRICT	cd_setor_proced_w
		;		
	exception
	when others then
		cd_setor_proced_w := 0;
	end;	
	
	if (coalesce(cd_setor_w,0) > 0) and (ie_setor_exclusivo_w <> 'N')
		and (ie_setor_exclusivo_w <> 'E') then
		
		cd_setor_w   := cd_setor_w;
		
	elsif (coalesce(ie_Setor_Usuario_Proc_w,'N') = 'S') then
		
		cd_setor_w  := wheb_usuario_pck.get_cd_setor_atendimento;
		
	elsif (coalesce(cd_setor_w,0)  <> 0) then
		
		cd_setor_w   := cd_setor_w;
		
	elsif (coalesce(cd_setor_proced_w,0)  <> 0) then
		
		cd_setor_w   :=  cd_setor_proced_w;
		
	elsif (coalesce(cd_setor_entrega_w,0) > 0) then
		
		cd_setor_w := cd_setor_entrega_w;
		
	else 	
		
		cd_setor_w := wheb_usuario_pck.get_cd_setor_atendimento;
	
	end if;	
	
		
	SELECT * FROM consiste_medico_executor(cd_estabelecimento_p, cd_convenio_w, cd_setor_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_atendimento_w, nr_seq_exame_w, null, ie_medico_executor_w, cd_cgc_w, cd_medico_executor_w, cd_pessoa_fisica_w, null, clock_timestamp(), nr_seq_classificacao_w, null, null, null) INTO STRICT ie_medico_executor_w, cd_cgc_w, cd_medico_executor_w, cd_pessoa_fisica_w;
		
	if (ie_medico_executor_w = 'A') then
		cd_medico_w	:= cd_medico_resp_w;
	elsif (ie_medico_executor_w = 'F') then
		cd_medico_w	:= cd_medico_executor_w;
	end if;
	
	if (ds_setor_lab_w = 'E') then
		cd_setor_solic_w := cd_setor_entrega_w;
	else
		cd_setor_solic_w := cd_setor_usuario_w;
	end if;
	
	SELECT * FROM obter_setor_exame_lab_eup(nr_prescricao_p, nr_seq_exame_w, 'N', cd_setor_solic_w, cd_material_exame_w, null, 'S', cd_setor_atend_w, cd_setor_col_w, cd_setor_ent_w, qt_dias_entrega_w, ie_emite_mapa_w, ds_hora_fixa_w, ie_data_resultado_w, qt_min_entrega_w, ie_atualizar_recoleta_w, 'N', ie_dia_semana_final_w, 'N', ie_forma_atual_dt_result_w, qt_min_atraso_w) INTO STRICT cd_setor_atend_w, cd_setor_col_w, cd_setor_ent_w, qt_dias_entrega_w, ie_emite_mapa_w, ds_hora_fixa_w, ie_data_resultado_w, qt_min_entrega_w, ie_atualizar_recoleta_w, ie_dia_semana_final_w, ie_forma_atual_dt_result_w, qt_min_atraso_w;

	dt_resultado_w := null;
	
  CALCULA_DATA_RESULTADO(ie_data_resultado_w,
            dt_prescricao_w,
            qt_dias_entrega_w,
            ds_hora_fixa_w,
            qt_min_entrega_w,
            ie_dia_semana_w,
            ie_dia_semana_final_w);

  begin
  cd_setor_w := coalesce(
  regexp_replace(replace(cd_setor_atend_w, ' ', ''), '\((\d*)(,\d+)*\)', '\1'),
  cd_setor_w
  );
  exception
  when data_exception then
    CALL gravar_log_lab_pragma(06502, 'cd_setor_atend_w: '
                  || cd_setor_atend_w
                  || '; cd_setor_w: '
                  || cd_setor_w,
                  'Tasy',
                  nr_prescricao_p);
  end;
	SELECT * FROM consiste_plano_convenio(nr_atendimento_w, cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, clock_timestamp(), qt_procedimento_w, ie_tipo_atendimento_w, cd_plano_convenio_w, null, ds_erro_autorizacao_w, cd_setor_w, nr_seq_exame_w, ie_regra_w, null, nr_seq_regra_w, nr_seq_proc_interno_w, cd_categoria_w, cd_estabelecimento_p, cd_setor_entrega_w, cd_medico_w, cd_pessoa_fisica_prescr_w, ie_glosa_w, nr_seq_regra_ajuste_w, nr_prescricao_p, null) INTO STRICT ds_erro_autorizacao_w, ie_regra_w, nr_seq_regra_w, ie_glosa_w, nr_seq_regra_ajuste_w;
	ie_autorizacao_w := 'L';
	if (ie_regra_w in (1,2) or (vl_parametro1209_w = 'S' and ie_regra_w in (5,8))) then
		ie_autorizacao_w := 'B';
	elsif (ie_regra_w in (3,6,7)) then
		ie_autorizacao_w := 'PA';
	end if;	
	
	select	coalesce(max(nr_sequencia), 0) + 1
	into STRICT	nr_sequencia_w
	from	prescr_procedimento
	where	nr_prescricao	= nr_prescricao_p;

	begin	
	insert into prescr_procedimento(
		nr_prescricao,
		nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		qt_procedimento,
		ie_urgencia,
		ie_suspenso,
		dt_prev_execucao,
		ie_status_atend,
		dt_atualizacao,
		nm_usuario,
		ie_origem_inf,
		nr_seq_interno,
		ie_avisar_result,
		cd_motivo_baixa,
		nr_seq_exame,
		nr_seq_pedido_externo,
		nr_seq_pedido_ext_item,
		cd_medico_exec,
		cd_setor_atendimento,
		cd_setor_coleta,
		cd_setor_entrega,
		cd_material_exame,
		dt_resultado,
		ie_amostra,
		ie_pendente_amostra,
		nr_seq_proc_interno,
		ie_autorizacao)
	values (nr_prescricao_p,
		nr_sequencia_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		qt_procedimento_w,
		'N', 
		'N',
		dt_prescricao_w,
		5, 
		clock_timestamp(), 
		nm_usuario_p,
		'1', 
		nextval('prescr_procedimento_seq'),
		'N',
		0,
		nr_seq_exame_w,
		nr_seq_solicitacao_p,
		nr_seq_pedido_item_w,
		cd_medico_w,
		cd_setor_w,
		CASE WHEN ie_imp_setor_coleta_w='S' THEN  cd_setor_entrega_w  ELSE cd_setor_usuario_w END ,
		cd_setor_usuario_w,
		cd_material_exame_w,
		dt_resultado_w,
		ie_amostra_ok_p,
		'N',
		nr_seq_proc_interno_w,
		ie_autorizacao_w);
	exception
	when 	others then
		nr_sequencia_w := null;
	end;
	end loop;
	close c01;
	end;
end if;

if (vl_parametro1246_w = 'S') and (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (coalesce(cd_setor_w,0) > 0) then
	select	coalesce(max(1),0)
	into STRICT	qt_passagem_setor_w
	from	atend_paciente_unidade
	where	nr_atendimento	= nr_atendimento_w;

	if (qt_passagem_setor_w = 0) then
		CALL gerar_passagem_setor_atend(nr_atendimento_w, cd_setor_w, dt_prescricao_w, 'S', nm_usuario_p);

		select	coalesce(max(nr_seq_interno),0)
		into STRICT	nr_seq_interno_w
		from 	atend_paciente_unidade
		where 	nr_atendimento	= nr_atendimento_w;

		CALL atend_paciente_unid_afterpost(nr_seq_interno_w,'I',nm_usuario_p);

	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eup_importar_solic_externa_pep (nr_seq_solicitacao_p bigint, nr_seq_pedido_item_p bigint, nr_prescricao_p bigint, nm_usuario_p text, ie_amostra_ok_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

