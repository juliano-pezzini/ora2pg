-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tf_processar_ligacao ( cd_estabelecimento_p bigint, ie_entrada_saida_p text, nr_seq_log_lig_p bigint, nr_atendimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

nr_seq_log_w		bigint;
nr_seq_tipo_lig_w	bigint;
nr_seq_ramal_w		bigint;
nr_fone_discado_w	varchar(30);
vl_ligacao_w		double precision;
dt_fim_w		timestamp;
cd_setor_atend_w	integer;
ie_tipo_ramal_w		smallint;
cd_ramal_w		varchar(20);
ie_cobranca_w		smallint;
nr_seq_proc_interno_w	bigint;
cd_pessoa_fisica_w	varchar(10);
nr_atendimento_w	bigint;
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
nr_seq_interno_w	bigint;
dt_entrada_unidade_w	timestamp;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
cd_cnpj_w		varchar(14);
nr_sequencia_w		bigint;
ie_valor_informado_w	varchar(1);
ds_erro_w		varchar(255);
ds_obs_w		varchar(255);

cd_unidade_basica_w	varchar(10);
cd_unidade_compl_w	varchar(10);

ie_entrada_saida_w	varchar(1);
dt_fim_conta_w		timestamp:= null;
nr_seq_item_w		bigint;
qt_item_w		bigint;

ie_acao_excesso_w		varchar(10);
qt_excedida_w			double precision	:= 0;
cd_convenio_glosa_w		integer;
cd_categoria_glosa_w		varchar(10);
nr_interno_conta_w		bigint;
dt_ligacao_integracao_w		timestamp;
cd_convenio_excesso_w		integer;
cd_categoria_excesso_w		varchar(10);



c01 REFCURSOR;

/*cursor c01 is
	select	nr_sequencia,
		nr_seq_tipo_lig,
		nr_seq_ramal,
		nr_fone_discado,
		nvl(vl_ligacao,0),
		nvl(nvl(dt_fim,dt_inicio),sysdate),
		nr_atendimento,
		cd_setor_atendimento
	from	tf_log_ligacao
	where	ie_processado		= 0
	  and	cd_estabelecimento	= cd_estabelecimento_p
	  and	nr_sequencia		= nvl(nr_seq_log_lig_p,nr_sequencia)
	  and	nvl(ie_entrada_saida,ie_entrada_saida_w) = ie_entrada_saida_w
	  and	nr_atendimento		= nr_atendimento_p
	  and 	nr_atendimento_p is not null
	union all
	select	nr_sequencia,
		nr_seq_tipo_lig,
		nr_seq_ramal,
		nr_fone_discado,
		nvl(vl_ligacao,0),
		nvl(nvl(dt_fim,dt_inicio),sysdate),
		nr_atendimento,
		cd_setor_atendimento
	from	tf_log_ligacao
	where	ie_processado		= 0
	  and	cd_estabelecimento	= cd_estabelecimento_p
	  and	nr_sequencia		= nvl(nr_seq_log_lig_p,nr_sequencia)
	  and	nvl(ie_entrada_saida,ie_entrada_saida_w) = ie_entrada_saida_w
	  and 	nr_atendimento_p is null;
*/
c02 CURSOR FOR
	SELECT	ie_cobranca,
		nr_seq_proc_interno
	from	tf_regra_cobranca
	where	cd_estabelecimento = cd_estabelecimento_p
	  and	coalesce(cd_setor_atendimento, cd_setor_atend_w) = cd_setor_atend_w
	  and	coalesce(nr_seq_tipo_lig, nr_seq_tipo_lig_w) = nr_seq_tipo_lig_w
	  and	coalesce(ie_tipo_ramal, ie_tipo_ramal_w) = ie_tipo_ramal_w
	  and	coalesce(nr_seq_ramal, nr_seq_ramal_w) = nr_seq_ramal_w
	order by coalesce(cd_Setor_atendimento, 0), coalesce(ie_tipo_ramal, 0), coalesce(nr_seq_ramal, 0);

c03 CURSOR FOR
	SELECT 	nr_sequencia
	from 	tf_log_ligacao
	where	ie_processado = 1
	and 	dt_atualizacao < clock_timestamp() - interval '180 days'
	order by nr_sequencia;


BEGIN

ie_entrada_saida_w := coalesce(ie_entrada_saida_p,'X');

if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
	open c01 for
	SELECT	nr_sequencia,
		nr_seq_tipo_lig,
		nr_seq_ramal,
		nr_fone_discado,
		coalesce(vl_ligacao,0),
		coalesce(coalesce(dt_fim,dt_inicio),clock_timestamp()),
		nr_atendimento,
		cd_setor_atendimento,
		dt_inicio
	from	tf_log_ligacao
	where	ie_processado		= 0
	and	nr_sequencia		= coalesce(nr_seq_log_lig_p,nr_sequencia)
	and	coalesce(ie_entrada_saida,ie_entrada_saida_w) = ie_entrada_saida_w
	and	nr_atendimento		= nr_atendimento_p;
else
	open c01 for
	SELECT	nr_sequencia,
		nr_seq_tipo_lig,
		nr_seq_ramal,
		nr_fone_discado,
		coalesce(vl_ligacao,0),
		coalesce(coalesce(dt_fim,dt_inicio),clock_timestamp()),
		nr_atendimento,
		cd_setor_atendimento,
		dt_inicio
	from	tf_log_ligacao
	where	ie_processado		= 0
	and	cd_estabelecimento	= cd_estabelecimento_p
	and	nr_sequencia		= coalesce(nr_seq_log_lig_p,nr_sequencia)
	and	coalesce(ie_entrada_saida,ie_entrada_saida_w) = ie_entrada_saida_w;
end if;

select	coalesce(max(nr_sequencia),null)
into STRICT	nr_seq_log_w
from	tf_log_ligacao;

if (nr_seq_log_w IS NOT NULL AND nr_seq_log_w::text <> '') then
	select	cd_cgc
	into STRICT	cd_cnpj_w
	from	estabelecimento
	where	cd_estabelecimento = cd_estabelecimento_p;
	--open c01;
	loop
	fetch c01 into	nr_seq_log_w,
			nr_seq_tipo_lig_w,
			nr_seq_ramal_w,
			nr_fone_discado_w,
			vl_ligacao_w,
			dt_fim_w,
			nr_atendimento_w,
			cd_setor_atend_w,
			dt_ligacao_integracao_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		ds_erro_w	:= null;
		ie_valor_informado_w := 'N';
		if (vl_ligacao_w <> 0) then
			ie_valor_informado_w := 'S';
		end if;
		begin
		select	coalesce(ie_tipo_ramal,0),
			coalesce(cd_setor_atend_w, coalesce(cd_setor_atendimento,0)),
			coalesce(cd_ramal,'')
		into STRICT	ie_tipo_ramal_w,
			cd_setor_atend_w,
			cd_ramal_w
		from	ramal_interno
		where	nr_sequencia = nr_seq_ramal_w;
		exception
			when others then
				--ds_erro_w := 'Ramal não encontrado!';
				ds_erro_w:= WHEB_MENSAGEM_PCK.get_texto(297110);

		end;
		if (coalesce(ds_erro_w::text, '') = '') then
			open c02;
			loop
			fetch c02 into	ie_cobranca_w,
					nr_seq_proc_interno_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
			end loop;
			close c02;
			if (ie_cobranca_w	= 1) and (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') and (ie_tipo_ramal_w in (2,9)) then
				begin
				if (coalesce(nr_atendimento_w::text, '') = '') then
					begin
					select	cd_setor_atendimento,
						cd_unidade_basica,
						cd_unidade_compl
					into STRICT	cd_setor_atend_w,
						cd_unidade_basica_w,
						cd_unidade_compl_w
					from	unidade_atendimento
					where	nr_ramal = cd_ramal_w;
					exception
						when others then
							--ds_erro_w := 'Não foi encontrado leito para o ramal';
							ds_erro_w:= WHEB_MENSAGEM_PCK.get_texto(297111);
					end;

					if (cd_setor_atend_w IS NOT NULL AND cd_setor_atend_w::text <> '') then
						begin
						select	a.nr_atendimento
						into STRICT	nr_atendimento_w
						from	atend_paciente_unidade a,
							atendimento_paciente b
						where	a.nr_atendimento	= b.nr_atendimento
						  and   coalesce(b.dt_alta::text, '') = ''	-- OS 127384   17/02/2009  Fabrício
						  and 	a.cd_setor_atendimento	= cd_setor_atend_w
						  and	a.cd_unidade_basica	= cd_unidade_basica_w
						  and	a.cd_unidade_compl	= cd_unidade_compl_w
						  and	dt_fim_w	between a.dt_entrada_unidade and coalesce(a.dt_saida_unidade,clock_timestamp());
						exception
							when others then
								--ds_erro_w := 'Não foi encontrado atendimento para o ramal';
								ds_erro_w:= WHEB_MENSAGEM_PCK.get_texto(297112);
						end;
					end if;
				end if;

				dt_fim_conta_w:= null;

				if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
					select 	max(dt_fim_conta)
					into STRICT	dt_fim_conta_w
					from 	atendimento_paciente
					where 	nr_atendimento = nr_atendimento_w;
				end if;

				if (coalesce(ds_erro_w::text, '') = '') and (coalesce(dt_fim_conta_w::text, '') = '') and (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
					RAISE NOTICE 'Atendimento%', nr_atendimento_w;
					select	cd_pessoa_fisica
					into STRICT	cd_pessoa_fisica_w
					from	atendimento_paciente
					where	nr_atendimento = nr_atendimento_w;
					RAISE NOTICE 'Unidade';
					select	max(nr_seq_interno)
					into STRICT	nr_seq_interno_w
					from	atend_paciente_unidade
					where	cd_setor_atendimento	= cd_setor_atend_w
					and	nr_atendimento		= nr_atendimento_w;
					RAISE NOTICE 'Convênio';
					select	obter_convenio_atendimento(nr_atendimento_w),
						obter_categoria_atendimento(nr_atendimento_w)
					into STRICT	cd_convenio_w,
						cd_categoria_w
					;
					RAISE NOTICE 'Proc Interno%Convênio%', nr_seq_proc_interno_w, cd_convenio_w;
					cd_procedimento_w := Obter_Cod_Proc_Interno_conv(nr_seq_proc_interno_w, cd_convenio_w, cd_categoria_w, dt_fim_w, cd_estabelecimento_p);
					select	coalesce(max(ie_origem_proced),null)
					into STRICT	ie_origem_proced_w
					from	proc_interno_conv
					where	nr_seq_proc_interno	= nr_seq_proc_interno_w
					  and	cd_procedimento		= cd_procedimento_w;
					if (coalesce(ie_origem_proced_w::text, '') = '') then
						select	coalesce(max(ie_origem_proced),1)
						into STRICT	ie_origem_proced_w
						from	proc_interno
						where	nr_sequencia	= nr_seq_proc_interno_w;
					end if;
					select	dt_entrada_unidade
					into STRICT	dt_entrada_unidade_w
					from	atend_paciente_unidade
					where	nr_seq_interno = nr_seq_interno_w;
					select	nextval('procedimento_paciente_seq')
					into STRICT	nr_sequencia_w
					;

					/*ds_obs_w	:= 'Seq.:' || nr_seq_log_w || ' Tipo:' || nr_seq_tipo_lig_w ||
							   ' Ramal:' || cd_ramal_w || ' Fone:' || nr_fone_discado_w ||
							   ' Valor:' || substr(campo_mascara(vl_ligacao_w,2),1,15) || ' Data:' || dt_fim_w;*/
					ds_obs_w	:= WHEB_MENSAGEM_PCK.get_texto(297224, 'NR_SEQ_LOG='|| nr_seq_log_w || ';' ||
											       'NR_SEQ_TIPO_LIG=' || nr_seq_tipo_lig_w || ';' ||
											       'CD_RAMAL=' || cd_ramal_w || ';' ||
											       'NR_FONE_DISCADO=' || nr_fone_discado_w || ';' ||
											       'VL_LIGACAO=' || substr(campo_mascara(vl_ligacao_w,2),1,15) || ';' ||
											       'DT_FIM=' || dt_fim_w);

					RAISE NOTICE 'Insert';
					insert into procedimento_paciente(nr_sequencia,
						nr_atendimento,
						dt_entrada_unidade,
						cd_procedimento,
						dt_procedimento,
						qt_procedimento,
						dt_atualizacao,
						nm_usuario,
						cd_convenio,
						cd_categoria,
						cd_acao,
						cd_setor_atendimento,
						ie_origem_proced,
						tx_procedimento,
						cd_cgc_prestador,
						nm_usuario_original,
						nr_seq_atepacu,
						ie_auditoria,
						nr_seq_proc_interno,
						cd_pessoa_fisica,
						vl_procedimento,
						ie_valor_informado,
						ds_observacao,
						nr_fone_integracao,
						dt_ligacao_integracao)
					values (nr_sequencia_w,
						nr_atendimento_w,
						dt_entrada_unidade_w,
						cd_procedimento_w,
						dt_fim_w,
						1,
						dt_fim_w,
						coalesce(nm_usuario_p,'Tarifador'),
						cd_convenio_w,
						cd_categoria_w,
						1,
						cd_setor_atend_w,
						ie_origem_proced_w,
						100,
						cd_cnpj_w,
						coalesce(nm_usuario_p,'Tarifador'),
						nr_seq_interno_w,
						'N',
						nr_seq_proc_interno_w,
						cd_pessoa_fisica_w,
						vl_ligacao_w,
						ie_valor_informado_w,
						ds_obs_w,
						nr_fone_discado_w,
						dt_ligacao_integracao_w);
					RAISE NOTICE 'Preço';
					CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, 'Tarifador');

					--Inclusão do tratamento da Regra de USO
					SELECT * FROM obter_regra_qtde_proc_exec(nr_atendimento_w, cd_procedimento_w, ie_origem_proced_w, 0, dt_fim_w, null, ie_acao_excesso_w, qt_excedida_w, ds_erro_w, cd_convenio_excesso_w, cd_categoria_excesso_w, nr_seq_proc_interno_w, cd_categoria_w, NULL, 0, 0, 0, cd_setor_atend_w, null) INTO STRICT ie_acao_excesso_w, qt_excedida_w, ds_erro_w, cd_convenio_excesso_w, cd_categoria_excesso_w;

					if (ie_acao_excesso_w = 'P') and (qt_excedida_w   > 0) then

						SELECT * FROM obter_convenio_particular_pf(cd_estabelecimento_p, cd_convenio_w, cd_pessoa_fisica_w, dt_fim_w, cd_convenio_glosa_w, cd_categoria_glosa_w) INTO STRICT cd_convenio_glosa_w, cd_categoria_glosa_w;

						update	procedimento_paciente
						set	nr_interno_conta	 = NULL,
							cd_convenio		= cd_convenio_glosa_w,
							cd_categoria		= cd_categoria_glosa_w
						where	nr_sequencia 		= nr_sequencia_w;

						if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

						CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_glosa_w, nm_usuario_p);
						CALL Ajustar_Conta_Vazia(nr_atendimento_w, nm_usuario_p);

					end if;

					if (ie_acao_excesso_w = 'C') and (qt_excedida_w > 0) and (cd_convenio_excesso_w IS NOT NULL AND cd_convenio_excesso_w::text <> '') and (cd_categoria_excesso_w IS NOT NULL AND cd_categoria_excesso_w::text <> '') then

						update	procedimento_paciente
						set	nr_interno_conta	 = NULL,
							cd_convenio		= cd_convenio_excesso_w,
							cd_categoria		= cd_categoria_excesso_w
						where	nr_sequencia 		= nr_sequencia_w;

						CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_excesso_w, nm_usuario_p);
						CALL Ajustar_Conta_Vazia(nr_atendimento_w, nm_usuario_p);

					end if;

					select 	max(nr_interno_conta)
					into STRICT	nr_interno_conta_w
					from 	procedimento_paciente
					where 	nr_sequencia = nr_sequencia_w;

					update	tf_log_ligacao
					set	nr_atendimento	= nr_atendimento_w,
						nr_interno_conta = nr_interno_conta_w,
						ie_processado	= 1,
						--ds_erro		= 'Gerado para conta. Sequencia:' || to_char(nr_sequencia_w),
						ds_erro		= WHEB_MENSAGEM_PCK.get_texto(297123) || to_char(nr_sequencia_w),
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_log_w;
					if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
				else
					update	tf_log_ligacao
					set	ds_erro		= ds_erro_w,
						dt_atualizacao	= clock_timestamp()
					where	nr_sequencia	= nr_seq_log_w;
				end if;
				exception
					when others then
						--ds_erro_w := substr('Erro ao lançar cobrança.' || SQLErrM(SQLCode),1,255);
						ds_erro_w := substr(WHEB_MENSAGEM_PCK.get_texto(297124) || SQLErrM(SQLSTATE),1,255);
						update	tf_log_ligacao
						set	ds_erro		= ds_erro_w,
							dt_atualizacao	= clock_timestamp()
						where	nr_sequencia	= nr_seq_log_w;
				end;
			else
				update	tf_log_ligacao
				set	--ds_erro		= 'Regra de cobrança não encontrada',
					ds_erro		= WHEB_MENSAGEM_PCK.get_texto(297125),
					dt_atualizacao	= clock_timestamp(),
					ie_processado		= 2
				where	nr_sequencia	= nr_seq_log_w;
			end if;
		else
			update	tf_log_ligacao
			set	ds_erro		= ds_erro_w,
				dt_atualizacao	= clock_timestamp(),
				ie_processado		= 2
			where	nr_sequencia	= nr_seq_log_w;
		end if;
		if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
	end loop;
	close c01;
end if;

/* Rotina para lipar a tabela TF_LOG_LIGACAO de registros antigos já gerados para a conta*/

if (coalesce(nr_atendimento_p::text, '') = '') then
	qt_item_w:= 0;
	open C03;
	loop
	fetch C03 into
		nr_seq_item_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin

		qt_item_w:= qt_item_w + 1;

		begin
		delete from tf_log_ligacao
		where nr_sequencia = nr_seq_item_w;
		exception
			when others then
				update	tf_log_ligacao
				set	ie_processado = 2
				where	nr_sequencia = nr_seq_item_w;

				if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
		end;

		if (qt_item_w > 5000) then
			if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
			qt_item_w	:= 0;
		end if;

		end;
	end loop;
	close C03;
end if;
if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tf_processar_ligacao ( cd_estabelecimento_p bigint, ie_entrada_saida_p text, nr_seq_log_lig_p bigint, nr_atendimento_p bigint, nm_usuario_p text) FROM PUBLIC;

