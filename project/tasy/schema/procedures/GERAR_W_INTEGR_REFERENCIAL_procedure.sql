-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_integr_referencial ( nm_tabela_origem_p text, nm_tabela_destino_p text) AS $body$
DECLARE


nm_tabela_referencia_w	varchar(50);
nm_tabela_w		varchar(50);
qt_sem_conferencia_w	bigint;
ie_achou_tabela_w	boolean		:= false;
nr_caminho_w		bigint;
qt_sem_caminho_w	bigint	:= 1;
ie_ordem_w		bigint;
qt_contador_w		bigint;
nr_sequencia_w		bigint	:= 0;

c01 CURSOR FOR
SELECT	a.nm_tabela
from	w_tabela_integridade a
where	coalesce(a.dt_conferencia::text, '') = '';

c02 CURSOR FOR
SELECT	a.nm_tabela_referencia
from	integridade_referencial a
where	not exists (select	1
	from	w_tabela_integridade x
	where	x.nm_tabela	= a.nm_tabela_referencia)
and	a.nm_tabela_referencia	<> nm_tabela_origem_p
and	a.nm_tabela		= nm_tabela_w;

c03 CURSOR FOR
SELECT	distinct
	a.nm_tabela
from	integridade_referencial a
where	exists (select	1
	from	w_tabela_integridade x
	where	x.nm_tabela	= a.nm_tabela)
and	a.nm_tabela		<> nm_tabela_destino_p
and	a.nm_tabela_referencia	= nm_tabela_destino_p;

c04 CURSOR FOR
SELECT	nm_tabela_destino_p,
	1 ie_ordem


union all

select	nm_tabela_w,
	2 ie_ordem


union all

select	distinct
	a.nm_tabela,
	CASE WHEN a.nm_tabela=nm_tabela_origem_p THEN 3  ELSE 4 END  ie_ordem
from	integridade_referencial a
where	not exists (select	1
	from	w_tabela_integr_caminho x
	where	x.nm_tabela		= a.nm_tabela
	and	x.nm_tabela_origem	= nm_tabela_w)
and	exists (select	1
	from	w_tabela_integridade x
	where	x.nm_tabela	= a.nm_tabela)
and	a.nm_tabela		<> nm_tabela_destino_p
and	a.nm_tabela		<> nm_tabela_w
and	a.nm_tabela_referencia	= nm_tabela_w
order by	2;

c05 CURSOR FOR
SELECT	distinct
	a.nr_caminho
from	w_tabela_integr_caminho a
order by	a.nr_caminho;


BEGIN

delete	from w_tabela_integridade;
delete	from w_tabela_integr_caminho;

/* diferentes integridades */

qt_sem_conferencia_w	:= 1;

insert	into w_tabela_integridade(nm_tabela,
	nm_usuario,
	dt_atualizacao)
values (nm_tabela_origem_p,
	'Tasy',
	clock_timestamp());

while(qt_sem_conferencia_w	> 0) loop

	open	c01;
	loop
	fetch	c01 into
		nm_tabela_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		ie_achou_tabela_w	:= false;

		/* marcar as tabelas que já foram percorridas para não percorrê-las novamente */

		update	w_tabela_integridade
		set	dt_conferencia	= clock_timestamp()
		where	nm_tabela	= nm_tabela_w;

		/* não é necessário conferir as integridades da tabela destino */

		if (nm_tabela_w	<> nm_tabela_destino_p) then

			open	c02;
			loop
			fetch	c02 into
				nm_tabela_referencia_w;
			exit	when(c02%notfound or ie_achou_tabela_w);


				insert	into w_tabela_integridade(nm_tabela,
					nm_tabela_pai,
					nm_usuario,
					dt_atualizacao)
				values (nm_tabela_referencia_w,
					nm_tabela_w,
					'Tasy',
					clock_timestamp());

				if (nm_tabela_referencia_w	= nm_tabela_destino_p) then

					delete	from w_tabela_integridade
					where	nm_tabela_pai	= nm_tabela_w
					and	nm_tabela	<> nm_tabela_referencia_w;

					update	w_tabela_integridade
					set	dt_conferencia	= clock_timestamp()
					where	nm_tabela	= nm_tabela_referencia_w;

					/* quando chegar na tabela destino, não precisa verificar as demais integridades da tabela pai */

					ie_achou_tabela_w	:= true;

				end if;

			end	loop;
			close	c02;

		end if;

	end	loop;
	close	c01;

	select	count(*)
	into STRICT	qt_sem_conferencia_w
	from	w_tabela_integridade a
	where	coalesce(a.dt_conferencia::text, '') = '';

end	loop;
/* fim diferentes integridades */

/* caminho mais curto */

open	c03;
loop
fetch	c03 into
	nm_tabela_w;
EXIT WHEN NOT FOUND; /* apply on c03 */

	nr_caminho_w		:= 0;
	ie_achou_tabela_w	:= false;

	open	c04;
	loop
	fetch	c04 into
		nm_tabela_referencia_w,
		ie_ordem_w;
	exit	when(c04%notfound or ie_achou_tabela_w);

		nr_caminho_w	:= coalesce(nr_caminho_w,0) + 1;
		nr_sequencia_w	:= coalesce(nr_sequencia_w,0) + 1;

		insert	into w_tabela_integr_caminho(nm_tabela,
			nm_tabela_origem,
			nr_caminho,
			nr_sequencia,
			nm_usuario,
			dt_atualizacao)
		values (nm_tabela_referencia_w,
			nm_tabela_w,
			nr_caminho_w,
			nr_sequencia_w,
			'Tasy',
			clock_timestamp());

		if (nm_tabela_referencia_w	= nm_tabela_origem_p) then

			ie_achou_tabela_w	:= true;

		end if;

	end	loop;
	close	c04;

end	loop;
close	c03;

delete	from w_tabela_integr_caminho a
where	not exists (SELECT	1
	from	w_tabela_integr_caminho x
	where	x.nm_tabela		= nm_tabela_origem_p
	and	x.nm_tabela_origem	= a.nm_tabela_origem);

/* manter apenas um caminho (para o caso de haver mais de um caminho de mesma distância) */

open	c05;
loop
fetch	c05 into
	nr_caminho_w;
EXIT WHEN NOT FOUND; /* apply on c05 */

	delete	from w_tabela_integr_caminho
	where	nr_sequencia	<>
		(SELECT	max(x.nr_sequencia)
		from	w_tabela_integr_caminho x
		where	x.nr_caminho	= nr_caminho_w)
	and	nr_caminho	= nr_caminho_w;

end	loop;
close	c05;

/* fim caminho mais curto */

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_integr_referencial ( nm_tabela_origem_p text, nm_tabela_destino_p text) FROM PUBLIC;

