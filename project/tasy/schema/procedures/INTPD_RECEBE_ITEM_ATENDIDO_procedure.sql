-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_item_atendido ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
material_atend_paciente_w	material_atend_paciente%rowtype;
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
ie_conversao_w		intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w	intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w		intpd_eventos_sistema.nr_seq_sistema%type;
nr_seq_regra_w		conversao_meio_externo.nr_seq_regra%type;
ie_sistema_externo_w	varchar(15);
ds_erro_w		varchar(4000);
i			integer;
ie_permite_apos_alta_w	varchar(1);
dt_alta_w				timestamp;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;

cd_material_w			material.cd_material%type;
qt_material_w			double precision;
nr_seq_lote_fornec_w	material_lote_fornec.nr_sequencia%type;
nr_seq_loteagrup_w		bigint;
cd_kit_mat_w			integer;
ds_validade_w			varchar(10);
ds_material_w			varchar(255);
cd_unid_med_w			varchar(30);
nr_etiqueta_lp_w		varchar(10);
qt_minutos_w			bigint;
cd_perfil_w				perfil.cd_perfil%type;
nm_usuario_w			usuario.nm_usuario%type;

/*'Efetua a consulta transformando o elemento XML num tipo de tabela'*/

c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/ENCOUNTER' passing xml_p columns
	NR_ATENDIMENTO		bigint			path	'NR_ENCOUNTER',
	CD_MATERIAL			bigint			path	'CD_MATERIAL',
	QT_MATERIAL_ATENDIDA	varchar(40)	path	'QT_SETTLEMENT',
	CD_BARRAS				varchar(255)	path	'CD_SUPPLIER_BATCH',
	CD_LOCAL_ESTOQUE		bigint		path	'CD_STOCK_LOCATION',
	CD_PERFIL				bigint		path	'CD_PROFILE');

c01_w	c01%rowtype;


BEGIN
/*'Atualiza o status da fila para Em processamento'*/

update	intpd_fila_transmissao
set	ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

/*'Realiza o commit para nao alterar o status de processamento em caso de rollback por existir consistencia. Existe tratamento de excecao abaixo para colocar o status de erro em caso de falha'*/

commit;

/*'Inicio de controle de falha'*/

begin

/*'Busca os dados da regra do registro da fila que esta em processamento'*/

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w	:=	nr_seq_sistema_w;

/*'Alimenta as informacoes iniciais de controle e consistencia de cada atributo do XML'*/

reg_integracao_w.nr_seq_fila_transmissao	:= nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:= 'R';
reg_integracao_w.ie_sistema_externo		:= ie_sistema_externo_w;
reg_integracao_w.ie_conversao		:= ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:= nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao	:= nr_seq_regra_w;
reg_integracao_w.qt_reg_log			:= 0;
reg_integracao_w.intpd_log_receb.delete;

cd_perfil_w 	:= wheb_usuario_pck.get_cd_perfil;
nm_usuario_w	:= wheb_usuario_pck.get_nm_usuario;

CALL wheb_usuario_pck.set_nm_usuario('WMS');
/*Verifica os lotes fornecedores no xml e realiza a consistencia de acordo com a regra Restricao de lote fornecedor*/

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	
	CALL wheb_usuario_pck.set_cd_perfil(c01_w.cd_perfil);
	
	select	max(cd_estabelecimento),
		max(dt_alta)
	into STRICT	cd_estabelecimento_w,
		dt_alta_w
	from	atendimento_paciente
	where	nr_atendimento = c01_w.nr_atendimento;
	
	SELECT * FROM converte_codigo_barras(coalesce(c01_w.cd_barras, c01_w.cd_material), cd_estabelecimento_w, null, c01_w.cd_local_estoque, cd_material_w, qt_material_w, nr_seq_lote_fornec_w, nr_seq_loteagrup_w, cd_kit_mat_w, ds_validade_w, ds_material_w, cd_unid_med_w, nr_etiqueta_lp_w, ds_erro_w, 7029, null) INTO STRICT cd_material_w, qt_material_w, nr_seq_lote_fornec_w, nr_seq_loteagrup_w, cd_kit_mat_w, ds_validade_w, ds_material_w, cd_unid_med_w, nr_etiqueta_lp_w, ds_erro_w;
			
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_erro_w);
	end if;
	
	ie_permite_apos_alta_w := coalesce(obter_vlr_parametro_perfil(24,c01_w.cd_perfil,12),'N');
	qt_minutos_w := coalesce(obter_vlr_parametro_perfil(24,c01_w.cd_perfil,65),0);
	
	if (ie_permite_apos_alta_w = 'N') and (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(170906);
	elsif (ie_permite_apos_alta_w = 'S') and (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') and (coalesce(qt_minutos_w, 0) <> 0) and
		(clock_timestamp() > (dt_alta_w + (qt_minutos_w/1440))) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(170906);
	end if;
	
	--consiste_lote_fornec_regra(c01_w.cd_material,c01_w.cd_barras,c01_w.nr_atendimento,c01_w.cd_local_estoque,270);
	end;
end loop;
close c01;

open c01;
loop
fetch c01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	
	select	max(cd_estabelecimento),
		max(dt_alta)
	into STRICT	cd_estabelecimento_w,
		dt_alta_w
	from	atendimento_paciente
	where	nr_atendimento = c01_w.nr_atendimento;
	
	SELECT * FROM converte_codigo_barras(coalesce(c01_w.cd_barras, c01_w.cd_material), cd_estabelecimento_w, null, c01_w.cd_local_estoque, cd_material_w, qt_material_w, nr_seq_lote_fornec_w, nr_seq_loteagrup_w, cd_kit_mat_w, ds_validade_w, ds_material_w, cd_unid_med_w, nr_etiqueta_lp_w, ds_erro_w, 7029, null) INTO STRICT cd_material_w, qt_material_w, nr_seq_lote_fornec_w, nr_seq_loteagrup_w, cd_kit_mat_w, ds_validade_w, ds_material_w, cd_unid_med_w, nr_etiqueta_lp_w, ds_erro_w;
	
	/*'Alimenta as informacoes de controle e consistencia referente ao Elemento a ser processado no momento. E importante manter dentro do cursor e nao fora.'*/

	reg_integracao_w.nm_tabela		:=	'MATERIAL_ATEND_PACIENTE';
	reg_integracao_w.nm_elemento	:=	'ENCOUNTER';
	reg_integracao_w.nr_seq_visao	:=	null;
	
	/*'Consiste cada atributo do XML'*/

	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_ATENDIMENTO', c01_w.nr_atendimento, 'N', material_atend_paciente_w.nr_atendimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; material_atend_paciente_w.nr_atendimento := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_MATERIAL', c01_w.cd_material, 'N', material_atend_paciente_w.cd_material) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; material_atend_paciente_w.cd_material := _ora2pg_r.ds_valor_retorno_p;
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'QT_MATERIAL_ATENDIDA', (somente_numero_virg_char(replace(c01_w.qt_material_atendida, '.', ',')))::numeric , 'N', material_atend_paciente_w.qt_material) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; material_atend_paciente_w.qt_material := _ora2pg_r.ds_valor_retorno_p;
	--intpd_processar_atributo(reg_integracao_w, 'CD_BARRAS', c01_w.cd_barras, 'N', material_atend_paciente_w.nr_seq_lote_fornec);
	SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_LOCAL_ESTOQUE', c01_w.cd_local_estoque, 'N', material_atend_paciente_w.cd_local_estoque) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; material_atend_paciente_w.cd_local_estoque := _ora2pg_r.ds_valor_retorno_p;
	
	
	if (reg_integracao_w.qt_reg_log = 0) then
		begin
		if (nr_seq_lote_fornec_w = 0) then
			nr_seq_lote_fornec_w := null;
		end if;
		
		CALL recebe_item_atend_integracao(
			material_atend_paciente_w.nr_atendimento,
			material_atend_paciente_w.cd_material,
			material_atend_paciente_w.qt_material,
			nr_seq_lote_fornec_w,
			material_atend_paciente_w.cd_local_estoque);

		update	intpd_fila_transmissao
		set	ie_status = 'S',
			nr_seq_documento = material_atend_paciente_w.nr_atendimento
		where	nr_sequencia = nr_sequencia_p;

		exception
		when others then
			reg_integracao_w.intpd_log_receb[reg_integracao_w.qt_reg_log].ds_log	:=	substr(sqlerrm,1,4000);
			reg_integracao_w.qt_reg_log						:=	reg_integracao_w.qt_reg_log + 1;
		end;
	end if;

	end;
end loop;
close c01;
exception
when others then
	begin
	/*'Em caso de qualquer falha o sistema captura a mensagem de erro, efetua o rollback, atualiza o status para Erro e registra a falha ocorrida'*/

	ds_erro_w	:=	substr(sqlerrm,1,4000);
	rollback;
	update	intpd_fila_transmissao
	set	ie_status = 'E',
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;
	end;
end;

if (reg_integracao_w.qt_reg_log > 0) then
	begin
	/*'Em caso de qualquer consistencia o sistema efetua rollback, atualiza o status para Erro e registra todos os logs de consistencia'*/

	rollback;
	
	update	intpd_fila_transmissao
	set	ie_status = 'E',
		ds_log = ds_erro_w
	where	nr_sequencia = nr_sequencia_p;
	
	for i in 0..reg_integracao_w.qt_reg_log-1 loop
		intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
	end loop;
	end;
end if;

CALL wheb_usuario_pck.set_cd_perfil(cd_perfil_w);
CALL wheb_usuario_pck.set_nm_usuario(nm_usuario_w);
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_item_atendido ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

