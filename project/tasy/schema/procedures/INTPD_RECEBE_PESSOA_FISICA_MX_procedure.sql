-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_pessoa_fisica_mx (nr_sequencia_p bigint) AS $body$
DECLARE


_ora2pg_r RECORD;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_projeto_xml_w	intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_sistema_w		intpd_eventos_sistema.nr_seq_sistema%type;
ie_sistema_externo_w	varchar(15);
reg_integracao_w		gerar_int_padrao.reg_integracao_conv;
nr_seq_regra_w			conversao_meio_externo.nr_seq_regra%type;
ds_erro_w				varchar(4000);
ie_erro_w				varchar(1) := 'N';
ie_exception_w			varchar(1) := 'N';
i						integer;
pessoa_fisica_w			pessoa_fisica%rowtype;
compl_pessoa_fisica_w	compl_pessoa_fisica%rowtype;
cd_titular_w 			pessoa_fisica.cd_pessoa_fisica%type;
nr_seq_dependente_w 	pessoa_fisica_dependente.nr_sequencia%type;
qt_pessoa_fisica_w		bigint := 0;
qt_person_name_w		bigint := 0;
qt_dependente_w			bigint := 0;
ds_xml_w				text;
ds_xml_type_w			xml;
ie_ajustar_ins_upd_w	intpd_eventos_sistema.ie_ajustar_ins_upd%type;
ie_ajustar_upd_ins_w	intpd_eventos_sistema.ie_ajustar_upd_ins%type;

/*
Estrutura

open c01: NATURAL_PERSON
|	open C02: COMPLEMENT
|	|
|	close c02
|	
close c01
*/
c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/NATURAL_PERSON' passing ds_xml_type_w columns
	ie_action				varchar(40)		path		'IE_ACTION',
	cd_pessoa_fisica		varchar(10)		path		'CD_NATURAL_PERSON',
	cd_curp					varchar(18)		path		'CD_CURP',
	cd_nacionalidade		varchar(8)			path		'CD_NACIONALITY',
	cd_rfc					varchar(13)		path		'CD_RFC',
	cd_sistema_ant			varchar(20)		path		'CD_OLD_SYSTEM',
	dt_nascimento			varchar(14)		path		'DT_BIRTH',
	ie_estado_civil			varchar(2)			path		'IE_MARTIAL_STATUS',
	ie_funcionario			varchar(1)			path		'IE_EMPLOYEE',
	ie_sexo					varchar(1)			path		'IE_GENDER',
	ie_tipo_pessoa			varchar(1)			path		'IE_PERSON_TYPE',
	nm_primeiro_nome		varchar(60)		path		'NM_FIRST_NAME',
	nm_sobrenome_mae		varchar(60)		path		'NM_MOTHER_LAST_NAME',
	nm_sobrenome_pai		varchar(60)		path		'NM_FATHER_LAST_NAME',
	nr_prontuario			varchar(10)		path		'NR_MEDICAL_RECORD',
	nr_ddi_celular			varchar(30)		path		'NR_CELL_PHONE_COUNTRY_CODE',
	nr_telefone_celular		varchar(40)		path		'NR_CELL_PHONE',
	ie_grau_parentesco		varchar(3)			path		'IE_RELATIVES_TYPE',
	cd_titular				varchar(10)		path		'CD_HOLDER',
	dt_atualizacao			varchar(14)		path		'DT_UPDATE',
	nm_usuario				varchar(15)		path		'NM_USER',
	cd_estabelecimento		smallint			path		'CD_ESTABLISHMENT',
	nr_seq_perfil			bigint		path		'NR_SEQ_PROFILE',
	xml_complements			xml				path		'COMPLEMENTS');
		
c01_w	c01%rowtype;
	
c02 CURSOR FOR
SELECT	*
from	xmltable('/COMPLEMENTS/COMPLEMENT' passing c01_w.xml_complements columns
	ie_action				varchar(40)		path		'IE_ACTION',
	cd_cep					varchar(15)		path		'CD_ZIP_CODE',
	ds_bairro				varchar(80)		path		'DS_NEIGHBORHOOD',
	ds_complemento			varchar(40)		path		'DS_COMPLEMENT',
	ds_endereco				varchar(100)		path		'DS_ADDRESS',
	ds_municipio			varchar(40)		path		'DS_MUNICIPALITY',
	ie_tipo_complemento		smallint			path		'IE_COMPLEMENT_TYPE',
	nr_endereco				integer			path		'NR_ADDRESS',
	nr_seq_pais				varchar(10)		path		'NR_COUNTRY',
	sg_estado				varchar(15)		path		'SG_STATE',
	dt_atualizacao			varchar(14)		path		'DT_UPDATE',
	nm_usuario				varchar(15)		path		'NM_USER');
	
c02_w	c02%rowtype;
	

BEGIN

/*Atualiza o status da fila para Em processamento*/

update	intpd_fila_transmissao
set		ie_status = 'R'
where	nr_sequencia = nr_sequencia_p;

commit;

begin

select	coalesce(b.ie_conversao,'I'),
		nr_seq_sistema,
		nr_seq_projeto_xml,
		nr_seq_regra_conv,
		ie_ajustar_ins_upd,
		ie_ajustar_upd_ins
into STRICT	ie_conversao_w,
		nr_seq_sistema_w,
		nr_seq_projeto_xml_w,
		nr_seq_regra_w,
		ie_ajustar_ins_upd_w,
		ie_ajustar_upd_ins_w
from	intpd_fila_transmissao a,
		intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and		a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w						:=	nr_seq_sistema_w;
reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe			:=	'R';
reg_integracao_w.ie_sistema_externo			:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao				:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml			:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao		:=	nr_seq_regra_w;
reg_integracao_w.intpd_log_receb.delete;
reg_integracao_w.qt_reg_log					:=	0;

select	ds_xml
into STRICT	ds_xml_w
from	intpd_fila_transmissao
where	nr_sequencia = nr_sequencia_p;

ds_xml_type_w := xmlparse(DOCUMENT, convert_from(, 'utf-8'));

open c01;
loop
fetch c01 into	
	c01_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	begin
	
	ie_erro_w						:= 'N';
	reg_integracao_w.nm_tabela		:= 'PESSOA_FISICA';
	reg_integracao_w.nm_elemento	:= 'NATURAL_PERSON';
	reg_integracao_w.nr_seq_visao	:= 45147; /*HTML5 - Swing - Pacientes - CorPes_F8 - Mexico*/
	
	if (coalesce(upper(c01_w.ie_action),'INSERT') = 'DELETE') THEN
				
		select 	count(*)
		into STRICT	qt_pessoa_fisica_w
		from 	pessoa_fisica
		where 	cd_pessoa_fisica = c01_w.cd_pessoa_fisica;
		
		if (qt_pessoa_fisica_w > 0) then		
			/*Processo de inativacao de pessoa fisica como funcionaria, conforme definicao com o time do Mexico*/

			update	pessoa_fisica
			set	ie_funcionario = 'N'
			where 	cd_pessoa_fisica = c01_w.cd_pessoa_fisica;
		else
			/*Codigo da pessoa fisica invalido ou inexistente no Tasy para alteracao ou exclusao do registro.*/

			intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1025388),'INTPDTASY','0004');
			ie_erro_w := 'S';
		end if;
		
	elsif ((coalesce(upper(c01_w.ie_action),'INSERT') <> 'DELETE') and (ie_erro_w = 'N')) then /*INSERT ou UPDATE*/
		
		begin
		/*'Busca o registro atual do Tasy pela PK'
		Esse tratamento foi necessario porque quando e update, o sistema externo so envia as informacoes alteradas e o restante dos campos eles mandam vazio. Entao temos que buscar a informacao que ja esta gravada na tabela.*/
		select	*
		into STRICT	pessoa_fisica_w
		from	pessoa_fisica
		where 	cd_pessoa_fisica = c01_w.cd_pessoa_fisica;
		exception
		when others then
			null;
		end;		

		
		if (coalesce(upper(c01_w.ie_action),'INSERT') = 'UPDATE') then
			
			select 	count(*)
			into STRICT	qt_pessoa_fisica_w
			from 	pessoa_fisica
			where 	cd_pessoa_fisica = c01_w.cd_pessoa_fisica;
			
			if (qt_pessoa_fisica_w = 0 and upper(ie_ajustar_upd_ins_w) = 'N') then				
				/*Se o sistema externo mandar um UPDATE e o registro nao existir no Tasy, tem que retornar uma mensagem e abortar o processo.*/
					
				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1050643),'INTPDTASY','0013');
				ie_erro_w := 'S';				
			end if;
		elsif (coalesce(c01_w.ie_action,'INSERT') = 'INSERT') then
		
                        select 	count(*)
			into STRICT	qt_pessoa_fisica_w
			from 	pessoa_fisica
			where 	cd_curp = c01_w.cd_curp;
			
			if (qt_pessoa_fisica_w > 0) then
				/*Ja ha pessoa fisica cadastrada. */

                                intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1206187),'INTPDTASY','0014');
                                ie_erro_w := 'S';		
			end if;

			select 	count(*)
			into STRICT	qt_pessoa_fisica_w
			from 	pessoa_fisica
			where 	nr_prontuario = c01_w.nr_prontuario;
			
			if (qt_pessoa_fisica_w > 0) then
				/*Ja ha pessoa fisica cadastrada com este numero de prontuario.*/

				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1050735),'INTPDTASY','0014');
				ie_erro_w := 'S';		
			end if;
		
			select 	count(*)
			into STRICT	qt_pessoa_fisica_w
			from 	pessoa_fisica
			where 	cd_pessoa_fisica = c01_w.cd_pessoa_fisica or cd_sistema_ant = c01_w.cd_sistema_ant;
			
			if (qt_pessoa_fisica_w > 0 and upper(ie_ajustar_ins_upd_w) = 'N') then
				/* Se o sistema externo mandar um INSERT e o registro ja existir, tem que retornar uma mensagem e abortar o processo.*/

				intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1050642),'INTPDTASY','0014');
				ie_erro_w := 'S';
			end if;			
		end if;
			
		if (ie_erro_w = 'N') then

			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CURP', c01_w.cd_curp, 'N', pessoa_fisica_w.cd_curp) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.cd_curp := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_NACIONALIDADE', c01_w.cd_nacionalidade, 'S', pessoa_fisica_w.cd_nacionalidade) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.cd_nacionalidade := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_RFC', c01_w.cd_rfc, 'N', pessoa_fisica_w.cd_rfc) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.cd_rfc := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_SISTEMA_ANT', c01_w.cd_sistema_ant, 'N', pessoa_fisica_w.cd_sistema_ant) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.cd_sistema_ant := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_NASCIMENTO', c01_w.dt_nascimento, 'N', pessoa_fisica_w.dt_nascimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.dt_nascimento := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_ESTADO_CIVIL', c01_w.ie_estado_civil, 'N', pessoa_fisica_w.ie_estado_civil) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.ie_estado_civil := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_FUNCIONARIO', c01_w.ie_funcionario, 'N', pessoa_fisica_w.ie_funcionario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.ie_funcionario := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_SEXO', c01_w.ie_sexo, 'S', pessoa_fisica_w.ie_sexo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.ie_sexo := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_TIPO_PESSOA', c01_w.ie_tipo_pessoa, 'N', pessoa_fisica_w.ie_tipo_pessoa) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.ie_tipo_pessoa := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_PRIMEIRO_NOME', c01_w.nm_primeiro_nome, 'N', pessoa_fisica_w.nm_primeiro_nome) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.nm_primeiro_nome := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_SOBRENOME_MAE', c01_w.nm_sobrenome_mae, 'N', pessoa_fisica_w.nm_sobrenome_mae) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.nm_sobrenome_mae := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_SOBRENOME_PAI', c01_w.nm_sobrenome_pai, 'N', pessoa_fisica_w.nm_sobrenome_pai) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.nm_sobrenome_pai := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_PRONTUARIO', c01_w.nr_prontuario, 'N', pessoa_fisica_w.nr_prontuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.nr_prontuario := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_DDI_CELULAR', c01_w.nr_ddi_celular, 'N', pessoa_fisica_w.nr_ddi_celular) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.nr_ddi_celular := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_TELEFONE_CELULAR', c01_w.nr_telefone_celular, 'N', pessoa_fisica_w.nr_telefone_celular) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.nr_telefone_celular := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', c01_w.cd_estabelecimento, 'S', pessoa_fisica_w.cd_estabelecimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.cd_estabelecimento := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c01_w.dt_atualizacao, 'N', pessoa_fisica_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.nm_usuario, 'N', pessoa_fisica_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_PERFIL', c01_w.nr_seq_perfil, 'S', pessoa_fisica_w.nr_seq_perfil) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; pessoa_fisica_w.nr_seq_perfil := _ora2pg_r.ds_valor_retorno_p;
						
			if (coalesce(c01_w.cd_estabelecimento::text, '') = '') then
				begin
				intpd_gravar_log_recebimento(nr_sequencia_p,substr(wheb_mensagem_pck.get_texto(736987,'DS_ELEMENTO='||'NATURAL_PERSON' ||';DS_ATRIBUTO='||'CD_ESTABLISHMENT'),1,4000),'INTPDTASY','0002');
				ie_erro_w := 'S';		
				end;
			end if;			
			
			if (reg_integracao_w.qt_reg_log = 0) then
				
				select 	max(cd_pessoa_fisica),
					max(nr_seq_person_name)
				into STRICT	pessoa_fisica_w.cd_pessoa_fisica,
					pessoa_fisica_w.nr_seq_person_name
				from 	pessoa_fisica
				where 	cd_pessoa_fisica = c01_w.cd_pessoa_fisica;
				
				if (coalesce(pessoa_fisica_w.cd_pessoa_fisica,0) = 0) then
				
					select 	max(cd_pessoa_fisica),
						max(nr_seq_person_name)
					into STRICT	pessoa_fisica_w.cd_pessoa_fisica,
						pessoa_fisica_w.nr_seq_person_name
					from 	pessoa_fisica
					where 	cd_sistema_ant = c01_w.cd_sistema_ant;
				
				end if;
				
        CALL philips_param_pck.set_cd_pais(2);
				
				if (coalesce(pessoa_fisica_w.cd_pessoa_fisica,0) > 0) then
					
					select  	count(*)
					into STRICT    	qt_person_name_w
					from    	person_name a
					where  	a.nr_sequencia = pessoa_fisica_w.nr_seq_person_name
					and	a.ds_type = 'main';
					
					if (qt_person_name_w > 0) then
						update 	person_name
						set	ds_given_name = pessoa_fisica_w.nm_primeiro_nome,
							ds_component_name_1 = pessoa_fisica_w.nm_sobrenome_mae,
							ds_family_name	= pessoa_fisica_w.nm_sobrenome_pai,
							nm_usuario = pessoa_fisica_w.nm_usuario,
							dt_atualizacao = pessoa_fisica_w.dt_atualizacao					
						where	nr_sequencia = pessoa_fisica_w.nr_seq_person_name
						and	ds_type = 'main';
					end if;	
					
					pessoa_fisica_w.nm_pessoa_fisica := pkg_name_utils.get_person_name(pessoa_fisica_w.nr_seq_person_name, pessoa_fisica_w.cd_estabelecimento, 'full', 'main');
				
					update	pessoa_fisica
					set	row = pessoa_fisica_w
					where 	cd_pessoa_fisica = pessoa_fisica_w.cd_pessoa_fisica;
				else
					select 	nextval('person_name_seq')
					into STRICT 	pessoa_fisica_w.nr_seq_person_name
					;
					
					insert into person_name(nr_sequencia,
								ds_given_name,
								ds_component_name_1,
								ds_family_name,
								ds_type,
								nm_usuario,
								dt_atualizacao,
								nm_usuario_nrec,
								dt_atualizacao_nrec)
							values (	pessoa_fisica_w.nr_seq_person_name,
								pessoa_fisica_w.nm_primeiro_nome,
								pessoa_fisica_w.nm_sobrenome_mae,
								pessoa_fisica_w.nm_sobrenome_pai,
								'main',
								pessoa_fisica_w.nm_usuario,
								pessoa_fisica_w.dt_atualizacao,
								pessoa_fisica_w.nm_usuario,
								clock_timestamp());
										
					pessoa_fisica_w.nm_pessoa_fisica := pkg_name_utils.get_person_name(pessoa_fisica_w.nr_seq_person_name, pessoa_fisica_w.cd_estabelecimento, 'full', 'main');

					select 	nextval('pessoa_fisica_seq')
					into STRICT 	pessoa_fisica_w.cd_pessoa_fisica
					;
					
					pessoa_fisica_w.nm_usuario_nrec		:= pessoa_fisica_w.nm_usuario;
					pessoa_fisica_w.dt_atualizacao_nrec	:= clock_timestamp();
					
					insert into pessoa_fisica values (pessoa_fisica_w.*);
				end if;

				/* O campo CD_TITULAR identifica o titular, enquanto o campo CD_PESSOA_FISICA identifica o dependente, pf que esta sendo recebida */

				if (c01_w.cd_titular IS NOT NULL AND c01_w.cd_titular::text <> '' AND c01_w.ie_grau_parentesco IS NOT NULL AND c01_w.ie_grau_parentesco::text <> '') then
					
					select 	cd_pessoa_fisica
					into STRICT	cd_titular_w
					from	pessoa_fisica
					where	cd_pessoa_fisica = c01_w.cd_titular;
					
					if (cd_titular_w IS NOT NULL AND cd_titular_w::text <> '') then
						
						select 	max(nr_sequencia)
						into STRICT	nr_seq_dependente_w
						from	pessoa_fisica_dependente
						where	cd_pessoa_fisica = cd_titular_w
						and	cd_pessoa_dependente = pessoa_fisica_w.cd_pessoa_fisica;
						
						/*Se o dependente ja estiver corretamente vinculado ao titular, nao ha necessidade de inserir novamente o registro, apenas atualizar suas informacoes*/

						if (coalesce(nr_seq_dependente_w,0) > 0) then
							update 	pessoa_fisica_dependente
							set 	nm_dependente = pessoa_fisica_w.nm_pessoa_fisica,
								ie_grau_parentesco = c01_w.ie_grau_parentesco,
								dt_nascimento = pessoa_fisica_w.dt_nascimento,
								nm_usuario = pessoa_fisica_w.nm_usuario,
								dt_atualizacao = pessoa_fisica_w.dt_atualizacao
							where	nr_sequencia = nr_seq_dependente_w;
						else
							insert into pessoa_fisica_dependente(	nr_sequencia,
											cd_pessoa_fisica,
											cd_pessoa_dependente,
											nm_dependente,
											ie_grau_parentesco,
											dt_nascimento,
											nm_usuario,
											dt_atualizacao,
											nm_usuario_nrec,
											dt_atualizacao_nrec)
										values (	nextval('pessoa_fisica_dependente_seq'),
											cd_titular_w,
											pessoa_fisica_w.cd_pessoa_fisica,
											pessoa_fisica_w.nm_pessoa_fisica,
											c01_w.ie_grau_parentesco,
											pessoa_fisica_w.dt_nascimento,
											pessoa_fisica_w.nm_usuario,
											pessoa_fisica_w.dt_atualizacao,
											pessoa_fisica_w.nm_usuario,
											clock_timestamp());
						end if;	
					end if;	
					
				elsif (coalesce(c01_w.cd_titular::text, '') = '' and
					coalesce(upper(c01_w.ie_action),'INSERT') = 'UPDATE') then

					/*Tratamento para desvincular o dependente quando a tag referente ao titular estiver nula*/

					select 	count(*)
					into STRICT 	qt_dependente_w
					from	pessoa_fisica_dependente
					where	cd_pessoa_dependente = pessoa_fisica_w.cd_pessoa_fisica;
					
					if (qt_dependente_w > 0) then
						delete 	FROM pessoa_fisica_dependente
						where	cd_pessoa_dependente = pessoa_fisica_w.cd_pessoa_fisica;
					end if;
				end if;
				
				open c02;
				loop
				fetch c02 into	
					c02_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					begin		
					reg_integracao_w.nm_tabela		:= 'COMPL_PESSOA_FISICA';
					reg_integracao_w.nm_elemento	:= 'COMPLEMENT';
					reg_integracao_w.nr_seq_visao	:= 90570; /*HTML5 - CorPes_F8 - Residencial (Angular) -- MX*/
					compl_pessoa_fisica_w := null;
					
					if (coalesce(upper(c02_w.ie_action),'INSERT') <> 'DELETE') THEN
						begin
						
						begin
						/*'Busca o registro atual do Tasy pela PK'
						Esse tratamento foi necessario porque quando e update, o sistema externo so envia as informacoes alteradas e o restante dos campos eles mandam vazio. Entao temos que buscar a informacao que ja esta gravada na tabela.*/
						select	*
						into STRICT	compl_pessoa_fisica_w
						from	compl_pessoa_fisica
						where	cd_pessoa_fisica = c01_w.cd_pessoa_fisica
						and	ie_tipo_complemento = c02_w.ie_tipo_complemento  LIMIT 1;
						exception
						when others then
							null;
						end;						
						
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_TIPO_COMPLEMENTO', c02_w.ie_tipo_complemento, 'N', compl_pessoa_fisica_w.ie_tipo_complemento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.ie_tipo_complemento := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_CEP', c02_w.cd_cep, 'N', compl_pessoa_fisica_w.cd_cep) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.cd_cep := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_ENDERECO', c02_w.ds_endereco, 'N', compl_pessoa_fisica_w.ds_endereco) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.ds_endereco := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_ENDERECO', c02_w.nr_endereco, 'N', compl_pessoa_fisica_w.nr_endereco) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.nr_endereco := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_COMPLEMENTO', c02_w.ds_complemento, 'N', compl_pessoa_fisica_w.ds_complemento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.ds_complemento := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_BAIRRO', c02_w.ds_bairro, 'N', compl_pessoa_fisica_w.ds_bairro) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.ds_bairro := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_MUNICIPIO', c02_w.ds_municipio, 'N', compl_pessoa_fisica_w.ds_municipio) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.ds_municipio := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'SG_ESTADO', c02_w.sg_estado, 'N', compl_pessoa_fisica_w.sg_estado) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.sg_estado := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_SEQ_PAIS', c02_w.nr_seq_pais, 'S', compl_pessoa_fisica_w.nr_seq_pais) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.nr_seq_pais := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c02_w.dt_atualizacao, 'N', compl_pessoa_fisica_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
						SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c02_w.nm_usuario, 'N', compl_pessoa_fisica_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; compl_pessoa_fisica_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
						compl_pessoa_fisica_w.cd_pessoa_fisica := pessoa_fisica_w.cd_pessoa_fisica;

						if (reg_integracao_w.qt_reg_log = 0) then
						
							select	max(nr_sequencia)
							into STRICT	compl_pessoa_fisica_w.nr_sequencia
							from	compl_pessoa_fisica
							where	cd_pessoa_fisica = compl_pessoa_fisica_w.cd_pessoa_fisica
							and	ie_tipo_complemento = compl_pessoa_fisica_w.ie_tipo_complemento;
							
							if (coalesce(compl_pessoa_fisica_w.nr_sequencia,0) > 0) then
								update	compl_pessoa_fisica
								set	row = compl_pessoa_fisica_w
								where	nr_sequencia = compl_pessoa_fisica_w.nr_sequencia
								and	cd_pessoa_fisica = compl_pessoa_fisica_w.cd_pessoa_fisica;
							else
								select	coalesce(max(nr_sequencia),0) + 1
								into STRICT	compl_pessoa_fisica_w.nr_sequencia
								from	compl_pessoa_fisica
								where	cd_pessoa_fisica = compl_pessoa_fisica_w.cd_pessoa_fisica;
								
								compl_pessoa_fisica_w.nm_usuario_nrec		:= compl_pessoa_fisica_w.nm_usuario;
								compl_pessoa_fisica_w.dt_atualizacao_nrec	:= clock_timestamp();

								insert into compl_pessoa_fisica values (compl_pessoa_fisica_w.*);
							end if;
						end if;
						end;
					else
						
						select	max(nr_sequencia)
						into STRICT	compl_pessoa_fisica_w.nr_sequencia
						from	compl_pessoa_fisica
						where	cd_pessoa_fisica = c01_w.cd_pessoa_fisica
						and	ie_tipo_complemento = c02_w.ie_tipo_complemento;
						
						if (coalesce(compl_pessoa_fisica_w.nr_sequencia,0) > 0) then
							delete	FROM compl_pessoa_fisica
							where	nr_sequencia = compl_pessoa_fisica_w.nr_sequencia
							and	cd_pessoa_fisica = c01_w.cd_pessoa_fisica;
						else
							/*Registro nao localizado no Tasy para exclusao.*/

							intpd_gravar_log_recebimento(nr_sequencia_p,wheb_mensagem_pck.get_texto(1023761),'INTPDTASY','0004');
							ie_erro_w := 'S';	
						end if;
						
					end if;
					end;
				end loop;
				close c02;
				
			end if;
		end if;
	end if;	
	end;
end loop;
close c01;

exception
when others then
	begin
	ds_erro_w := substr(dbms_utility.format_error_backtrace || chr(13) || chr(10) || sqlerrm,1,4000);
	rollback;
	
	update	intpd_fila_transmissao
	set	ie_status 	 	= 'E',
		cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
		ds_log 		= ds_erro_w,
		nr_doc_externo	= c01_w.cd_sistema_ant
	where	nr_sequencia 	= nr_sequencia_p;
	
	ie_exception_w := 'S';
	
	end;
end;

if (ie_exception_w = 'N') then

	if	((reg_integracao_w.qt_reg_log > 0) or (coalesce(ie_erro_w,'N') = 'S')) then
		begin
		rollback;
		
		update	intpd_fila_transmissao
		set	ie_status 	 	= 'E',
			cd_default_message 	= CASE WHEN ds_erro_w = NULL THEN null  ELSE '0005' END ,
			ds_log 		= ds_erro_w,
			nr_doc_externo	= c01_w.cd_sistema_ant
		where	nr_sequencia 	= nr_sequencia_p;
		
		for i in 0..reg_integracao_w.qt_reg_log-1 loop
			intpd_gravar_log_recebimento(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY',reg_integracao_w.intpd_log_receb[i].cd_default_message);
		end loop;
		end;
	else
		update	intpd_fila_transmissao
		set	ie_status 	 		= 'S',
			cd_default_message 		= '0000',
			nr_seq_documento		= coalesce(pessoa_fisica_w.cd_pessoa_fisica, c01_w.cd_pessoa_fisica),
			nr_seq_item_documento	= coalesce(pessoa_fisica_w.nr_prontuario, c01_w.nr_prontuario),
			nr_doc_externo		= c01_w.cd_sistema_ant
		where	nr_sequencia	 	= nr_sequencia_p;	
	end if;

end if;
	
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_pessoa_fisica_mx (nr_sequencia_p bigint) FROM PUBLIC;

