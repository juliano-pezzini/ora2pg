-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE generate_bed_requirement ( nr_atendimento_p bigint, ie_solicitacao_p text, ie_tipo_vaga_p text, cd_motivo_transf_p bigint, cd_setor_desejado_p bigint, cd_acomodacao_desejada_p bigint, cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_plano_p text, ds_hd_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nm_usuario_p text, nr_seq_proc_interno_p bigint, cd_medico_resp_p text, ie_clinica_p bigint, cd_cid_principal_p text, ie_necessita_isolamento_p text, ie_necessita_dialise_p text, cd_unid_basica_p text default null, cd_unid_compl_p text default null, cd_funcionario_p text default null, nr_seq_classif_medico_p bigint default null, qt_dia_p bigint default null, ie_opme_p text default null, ie_quimioterapia_p text default null, nr_seq_p bigint default null, qt_acompanhante_p bigint default null, ds_observacao_p text default null, cd_departamento_desejado_p bigint default null, dt_prevista_p timestamp DEFAULT NULL) AS $body$
DECLARE


			
cd_tipo_acomodacao_w	bigint;
cd_convenio_w		bigint;
cd_setor_atendimento_w	bigint;
ie_clinica_w		bigint;
nr_sequencia_w		bigint;
cd_pessoa_fisica_w	varchar(10):=null;
cd_medico_resp_w	varchar(10);
cd_medico_resp_ww	varchar(10);
cd_estabelecimento_w	smallint;
ie_existe_w		varchar(1);
cd_categoria_w		varchar(10);
ds_codigo_usuario_w	varchar(30);
ds_complemento_w	varchar(30);
ds_validade_w		varchar(30);
dt_validade_w		timestamp;
cd_plano_w		varchar(10);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
VarGerarNecVagaSemAtend		varchar(1):='S';
VarVagaSemProced_w			varchar(1):='S';
nr_atendimento_w 	bigint;
cd_usuario_logado_w	varchar(255):=null;
VarAtualizaMedRespUsu	varchar(1):='N';
VarGerarDataPrevista_w	varchar(1) := 'N';
ie_altera_status_reservado_w	varchar(1) := 'N';
ie_status_w		varchar(1);
ie_reserva_w		varchar(1);
ds_observacao_w		varchar(4000);
cd_especialidade_w	bigint;
nr_seq_proc_interno_w	bigint;
VarCopiarObservacao_w	varchar(1);
ie_tipo_atend_w		atendimento_paciente.ie_tipo_atendimento%type;
nr_seq_classif_atend_w	atendimento_paciente.nr_seq_classificacao%type;
cd_unid_basica_atual_w		gestao_vaga.cd_unid_basica_atual%type;
cd_unid_compl_atual_w		gestao_vaga.cd_unid_compl_atual%type;

c01 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		nr_seq_proc_interno
	from	w_gestao_vaga_proc
	where	nr_atendimento		= nr_atendimento_w;
	
c02 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced
	from	procedimento_autorizado
	where	nr_sequencia_autor	= nr_seq_p;


BEGIN

BEGIN


nr_atendimento_w := nr_atendimento_p;

select	ie_clinica,
	cd_pessoa_fisica,
	cd_medico_resp,
	cd_estabelecimento,
  ie_tipo_atendimento,
  nr_seq_classificacao
into STRICT	ie_clinica_w,
	cd_pessoa_fisica_w,
	cd_medico_resp_w,
	cd_estabelecimento_w,
	ie_tipo_atend_w,
	nr_seq_classif_atend_w
from	atendimento_paciente
where	nr_atendimento	= nr_atendimento_w;
EXCEPTION
WHEN others then
	ie_clinica_w	:= null;
	cd_estabelecimento_w := cd_estabelecimento_p;

END;

if (coalesce(nr_seq_p,0) > 0) and (coalesce(cd_pessoa_fisica_w::text, '') = '') then

	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	autorizacao_convenio 
	where 	nr_sequencia = nr_seq_p;
	
end if;	
		
IF (ie_clinica_p IS NOT NULL AND ie_clinica_p::text <> '') then
	ie_clinica_w := ie_clinica_p;
END IF;

IF (coalesce(nr_seq_proc_interno_p,0) = 0) and (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '') and (cd_procedimento_p	> 0)then
	cd_procedimento_w	:= cd_procedimento_p;
	ie_origem_proced_w	:= ie_origem_proced_p;
elsif (coalesce(nr_seq_proc_interno_p,0) > 0) then
	begin
		select	cd_procedimento,
				ie_origem_proced
		into STRICT	cd_procedimento_w,
				ie_origem_proced_w
		from	proc_interno
		where	ie_situacao = 'A'
		and		nr_sequencia = nr_seq_proc_interno_p;
	exception
	when others then
		IF (coalesce(nr_seq_proc_interno_p,0) = 0) and (cd_procedimento_p IS NOT NULL AND cd_procedimento_p::text <> '') and (ie_origem_proced_p IS NOT NULL AND ie_origem_proced_p::text <> '') and (cd_procedimento_p	> 0)then
			cd_procedimento_w	:= cd_procedimento_p;
			ie_origem_proced_w	:= ie_origem_proced_p;
		end if;
	end;	
END IF;


-- Ivan em 21/05/2007 OS56547
select	consistir_solicitacao_vaga(cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p, 0)
into STRICT	ie_existe_w
;

IF (ie_existe_w = 'N') then
	BEGIN

	select	obter_tipo_acomod_atend(nr_atendimento_w,'C'),
		coalesce(cd_convenio_p, obter_convenio_atendimento(nr_atendimento_w)),
		obter_setor_atendimento(nr_atendimento_w),
		coalesce(cd_categoria_p, Obter_Dados_Categ_Conv(nr_atendimento_w,'CA')),
		substr(Obter_Dados_Categ_Conv(nr_atendimento_w,'U'),1,30),
		substr(Obter_Dados_Categ_Conv(nr_atendimento_w,'C'),1,30),
		substr(Obter_Dados_Categ_Conv(nr_atendimento_w,'V'),1,30),
		cd_plano_p
	into STRICT	cd_tipo_acomodacao_w,
		cd_convenio_w,
		cd_setor_atendimento_w,
		cd_categoria_w,
		ds_codigo_usuario_w,
		ds_complemento_w,
		ds_validade_w,
		cd_plano_w
	;

	IF (ds_validade_w IS NOT NULL AND ds_validade_w::text <> '') then
		dt_validade_w	:= to_date(ds_validade_w,'dd/mm/yyyy');
	END IF;

	select	nextval('gestao_vaga_seq')
	into STRICT	nr_sequencia_w
	;
	
	/* Obter param 92 do Pronto Atendimento
	Abreiter em 12/02/2010
	Se valor = 'N', nao ira inserir o numero do atendimento.
	*/
	select	coalesce(max(obter_valor_param_usuario(935, 92, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),'S'),
		coalesce(max(obter_valor_param_usuario(916, 589, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),'N'),
		coalesce(max(obter_valor_param_usuario(281, 1416, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),'N'),
		coalesce(max(obter_valor_param_usuario(1002, 156, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),'N')
	into STRICT	VarGerarNecVagaSemAtend,
		VarGerarDataPrevista_w,
		VarVagaSemProced_w,
		VarCopiarObservacao_w
	;
	
	if (Obter_Funcao_Ativa	= 281) and (VarVagaSemProced_w = 'S') and (coalesce(cd_procedimento_w::text, '') = '') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(269796);
	end if;

	select	coalesce(max(obter_valor_param_usuario(1002, 75, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),'N')
	into STRICT	ie_altera_status_reservado_w
	;

	if (ie_altera_status_reservado_w = 'S') then

		select	coalesce(Verifica_Reserva_Paciente(cd_pessoa_fisica_w),'N')
		into STRICT	ie_reserva_w
		;
		
		if (ie_reserva_w = 'S') then
			ie_status_w := 'R';
		else
			ie_status_w := 'A';
		end if;
	else
		ie_status_w := 'A';
	end if;

	if (VarCopiarObservacao_w = 'S') then
		select	max(ds_observacao)
		into STRICT	ds_observacao_w
		from	gestao_vaga
		where	nr_sequencia = (
			SELECT	max(nr_sequencia)
			from	gestao_vaga
			where	cd_pessoa_fisica = cd_pessoa_fisica_w
			and	(ds_observacao IS NOT NULL AND ds_observacao::text <> '')
			and	ie_status = 'C');
	end if;
	
	ds_observacao_w := ds_observacao_w || ' ' || ds_observacao_p;
	/* Obter param 45 da Gestao de Vagas
	Abreiter em 12/02/2010
	Se valor = 'S', o campo CD_MEDICO sera atualizado com o codigo de pessoa fisica do usuario logado no sistema
	*/
	select	coalesce(max(obter_valor_param_usuario(1002, 45, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)),'N')
	into STRICT	VarAtualizaMedRespUsu
	;

	if upper(VarGerarNecVagaSemAtend) = upper('N') then
		nr_atendimento_w := null;
	end if;

	if upper(VarAtualizaMedRespUsu) = upper('S') then
		select 	max(cd_pessoa_fisica)
		into STRICT	cd_usuario_logado_w
		from   	usuario 
		where  	upper(nm_usuario_p) = upper(nm_usuario);
	end if;

	select  max(coalesce(cd_especialidade,''))
	into STRICT 	cd_especialidade_w
	from    atendimento_alta a, parametro_medico b
	where   a.nr_atendimento = nr_atendimento_w
	and     b.cd_estabelecimento = cd_estabelecimento_p
	and		trunc(a.dt_atualizacao) = trunc(clock_timestamp())
	and 	coalesce(a.ie_desfecho,'I') = 'I'
	and     ((ie_tipo_orientacao <> 'P')
	or (coalesce(b.ie_liberar_desfecho,'N')  = 'N')
	or      ((a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '') and (coalesce(a.dt_inativacao::text, '') = '')));
	
	if (coalesce(cd_convenio_w,0) > 0) and (ie_solicitacao_p IS NOT NULL AND ie_solicitacao_p::text <> '') and (ie_status_w IS NOT NULL AND ie_status_w::text <> '') and (ie_tipo_vaga_p IS NOT NULL AND ie_tipo_vaga_p::text <> '') then
	   
		if (coalesce(nr_atendimento_w,0) = 0) then
			nr_atendimento_w := null;
		end if;

		cd_medico_resp_ww := cd_medico_resp_p;
		if (cd_medico_resp_p = '0') then
			cd_medico_resp_ww := '';
		end if;

	select substr(obter_unidade_atendimento(nr_atendimento_w,'IAA','UB'),1,40)
	into STRICT 	cd_unid_basica_atual_w
	;
				
	select substr(obter_unidade_atendimento(nr_atendimento_w,'IAA','UC'),1,40)
	into STRICT 	cd_unid_compl_atual_w
	;
		
		insert into gestao_vaga(
			nr_sequencia,
			cd_estabelecimento,
			cd_pessoa_fisica,
			dt_atualizacao,
			nm_usuario,
			dt_solicitacao,
			ie_solicitacao,
			cd_convenio,
			cd_categoria,
			ie_status,
			ie_tipo_vaga,
			nr_atendimento,
			cd_tipo_acomod_atual,
			cd_setor_atual,
			cd_setor_desejado,
			cd_tipo_acomod_desej,
			cd_medico,
			ie_clinica,
			nr_seq_motivo_transf,
			ds_cod_usuario,
			ds_compl,
			dt_validade,
			cd_plano_convenio,
			ds_hd,
			cd_procedimento,
			ie_origem_proced,
			nr_seq_proc_interno,
			cd_cid_principal,
			ie_necessita_isolamento,
			ie_necessita_dialise,
			dt_prevista,
			ds_observacao,
			cd_unidade_basica,
			cd_unidade_compl,
			cd_especialidade,
			cd_funcionario,
			nr_seq_classif_medico,
			qt_dia,
			ie_opme,
			ie_quimioterapia,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			qt_acompanhante,
			cd_departamento_desejado,
			ie_tipo_atendimento,
			nr_seq_classif_atend,
			cd_unid_basica_atual,
			cd_unid_compl_atual)
		values (
			nr_sequencia_w,
			cd_estabelecimento_w,
			cd_pessoa_fisica_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			ie_solicitacao_p,
			cd_convenio_w,
			cd_categoria_w,
			ie_status_w,
			ie_tipo_vaga_p,
			nr_atendimento_w,
			cd_tipo_acomodacao_w,
			cd_setor_atendimento_w,
			cd_setor_desejado_p,
			cd_acomodacao_desejada_p,
			coalesce(cd_usuario_logado_w,coalesce(cd_medico_resp_ww,cd_medico_resp_w)),
			ie_clinica_w,
			cd_motivo_transf_p,
			ds_codigo_usuario_w,
			ds_complemento_w,
			dt_validade_w,
			cd_plano_w,
			substr(ds_hd_p,1,4000),
			cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_proc_interno_p,
			cd_cid_principal_p,
			ie_necessita_isolamento_p,
			ie_necessita_dialise_p,
			coalesce(dt_prevista_p, CASE WHEN VarGerarDataPrevista_w='S' THEN clock_timestamp()  ELSE null END ),
			ds_observacao_w,
			cd_unid_basica_p,
			cd_unid_compl_p,
			cd_especialidade_w,
			cd_funcionario_p,
			nr_seq_classif_medico_p,
			qt_dia_p,
			ie_opme_p,
			ie_quimioterapia_p,
			nm_usuario_p,
			clock_timestamp(),
			qt_acompanhante_p,
			cd_departamento_desejado_p,
			ie_tipo_atend_w,
			nr_seq_classif_atend_w,
			cd_unid_basica_atual_w,
			cd_unid_compl_atual_w);			
	
		if (coalesce(nr_seq_p,0) = 0) then			
			OPEN C01;
			LOOP
			FETCH C01 into
				cd_procedimento_w,
				ie_origem_proced_w,
				nr_seq_proc_interno_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				BEGIN
				insert into gestao_vaga_proc(	nr_sequencia,
												dt_atualizacao,
												nm_usuario,
												dt_atualizacao_nrec,
												nm_usuario_nrec,
												nr_seq_gestao,
												cd_procedimento,
												ie_origem_proced,
												nr_seq_proc_interno)
								values (	nextval('gestao_vaga_proc_seq'),
											clock_timestamp(),
											nm_usuario_p,
											clock_timestamp(),
											nm_usuario_p,
											nr_sequencia_w,
											cd_procedimento_w,
											ie_origem_proced_w,
											nr_seq_proc_interno_w);

				END;
			END LOOP;
			CLOSE C01;

			delete from w_gestao_vaga_proc
			where	nr_atendimento	= nr_atendimento_p;
			COMMIT;
			
		else	
			OPEN C02;
			LOOP
			FETCH C02 into
				cd_procedimento_w,
				ie_origem_proced_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				BEGIN
				insert into gestao_vaga_proc(	nr_sequencia,
												dt_atualizacao,
												nm_usuario,
												dt_atualizacao_nrec,
												nm_usuario_nrec,
												nr_seq_gestao,
												cd_procedimento,
												ie_origem_proced)
								values (	nextval('gestao_vaga_proc_seq'),
											clock_timestamp(),
											nm_usuario_p,
											clock_timestamp(),
											nm_usuario_p,
											nr_sequencia_w,
											cd_procedimento_w,
											ie_origem_proced_w);

				END;
			END LOOP;
			CLOSE C02;
			
			update	autorizacao_convenio
			set	NR_SEQ_GESTAO = nr_sequencia_w
			where	nr_sequencia = nr_seq_p;
		end if;

		CALL Gerar_Autor_Regra(null, null, null, null, null, null, 'GVE', nm_usuario_p, null,null, nr_sequencia_w,null,null,null,'','','');		
		
	end if;
	END;
END IF;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE generate_bed_requirement ( nr_atendimento_p bigint, ie_solicitacao_p text, ie_tipo_vaga_p text, cd_motivo_transf_p bigint, cd_setor_desejado_p bigint, cd_acomodacao_desejada_p bigint, cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_plano_p text, ds_hd_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nm_usuario_p text, nr_seq_proc_interno_p bigint, cd_medico_resp_p text, ie_clinica_p bigint, cd_cid_principal_p text, ie_necessita_isolamento_p text, ie_necessita_dialise_p text, cd_unid_basica_p text default null, cd_unid_compl_p text default null, cd_funcionario_p text default null, nr_seq_classif_medico_p bigint default null, qt_dia_p bigint default null, ie_opme_p text default null, ie_quimioterapia_p text default null, nr_seq_p bigint default null, qt_acompanhante_p bigint default null, ds_observacao_p text default null, cd_departamento_desejado_p bigint default null, dt_prevista_p timestamp DEFAULT NULL) FROM PUBLIC;

