-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE recalcular_conta_repasse ( nr_interno_conta_p bigint, nr_seq_procedimento_p bigint, nr_seq_material_p bigint, nm_usuario_p text, nr_seq_partic_p bigint default null) AS $body$
DECLARE




ie_repasse_mat_w		varchar(1);
ie_repasse_proc_w		varchar(1);
nr_seq_procedimento_w	bigint;
nr_seq_material_w		bigint;
nr_lote_repasse_w		bigint;
nr_atendimento_w		bigint;
vl_material_w			double precision;
cd_estabelecimento_w		smallint;
cd_medico_resp_w		varchar(255);
ie_contabilizado_w		varchar(255);
cd_convenio_w			integer;
nr_seq_protocolo_w		bigint;
cd_edicao_amb_w		integer;
ie_tipo_atendimento_w	smallint;
cd_categoria_w		varchar(10);
ie_status_protocolo_w	varchar(10);
dt_entrada_w			timestamp;
ie_recalcular_conta_prov_w	varchar(10);
ie_recalcular_protocolo_prov_w	varchar(10);
ie_retorno_w			varchar(255);
ie_status_conta_w		bigint;
nr_seq_retorno_w		bigint;
nr_titulo_w			varchar(255);
nr_nota_fiscal_w		varchar(255);
ie_gerar_w			varchar(1)	:= 'S';
ie_repasse_proc_conv_w		varchar(1);
ie_repasse_mat_conv_w		varchar(1);
nr_seq_partic_w			bigint;
ie_atual_res_conta_rec_rep_w	parametro_faturamento.ie_atual_res_conta_rec_rep%type;
ie_recalc_repasse_liberado_w	varchar(10);
qt_repasses_liberados_w bigint;

--Retorna os procedimentos que sofrerao recalculo
c_procedimento CURSOR(	nr_interno_conta_pc	conta_paciente.nr_interno_conta%type,
			nr_seq_procedimento_pc	procedimento_paciente.nr_sequencia%type,
			nr_seq_partic_pc	procedimento_participante.nr_seq_partic%type,
			ie_repasse_proc_pc	text) FOR
	SELECT	nr_sequencia,
		CASE WHEN nr_seq_partic_pc=0 THEN 0  ELSE null END  nr_seq_partic
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_conta_pc
	and	nr_sequencia		= nr_seq_procedimento_pc
	and	(nr_seq_procedimento_pc IS NOT NULL AND nr_seq_procedimento_pc::text <> '')
	and 	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	coalesce(nr_seq_partic_pc,0)	= 0
	and	ie_repasse_proc_pc	<> 'N'
	
union

	SELECT	nr_sequencia,
		CASE WHEN nr_seq_partic_pc=0 THEN 0  ELSE null END  nr_seq_partic
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_conta_pc
	and	coalesce(nr_seq_procedimento_pc::text, '') = ''
	and 	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	coalesce(nr_seq_partic_pc,0)	= 0
	and	ie_repasse_proc_pc	<> 'N'
	
union

	select	b.nr_sequencia,
		b.nr_seq_partic
	from	procedimento_participante b,
		procedimento_paciente a
	where	a.nr_sequencia		= b.nr_sequencia
	and	a.nr_interno_conta	= nr_interno_conta_pc
	and	b.nr_sequencia		= nr_seq_procedimento_pc
	and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	and	b.nr_seq_partic		= nr_seq_partic_pc
	and	ie_repasse_proc_pc	<> 'N';

--Retorna os materiais que sofrerao recalculo
c_material CURSOR(	nr_interno_conta_pc	conta_paciente.nr_interno_conta%type,
			nr_seq_material_pc	material_atend_paciente.nr_sequencia%type,
			ie_repasse_proc_pc	text) FOR
	SELECT	nr_sequencia
	from	material_atend_paciente A
	where	nr_interno_conta	= nr_interno_conta_pc
	and	nr_sequencia		= nr_seq_material_pc
	and	(nr_seq_material_pc IS NOT NULL AND nr_seq_material_pc::text <> '')
	and 	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	ie_repasse_proc_pc	<> 'N'
	
union

	SELECT	nr_sequencia
	from	material_atend_paciente A
	where	nr_interno_conta	= nr_interno_conta_pc
	and	coalesce(nr_seq_material_pc::text, '') = ''
	and 	coalesce(cd_motivo_exc_conta::text, '') = ''
	and	ie_repasse_proc_pc	<> 'N';

BEGIN

ie_recalc_repasse_liberado_w := obter_Param_Usuario(89, 79, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_recalc_repasse_liberado_w);

if (coalesce(ie_recalc_repasse_liberado_w, 'S') = 'N') then

  select max(a.ie_repasse_proc) ie_repasse_proc,
         max(a.ie_repasse_mat) ie_repasse_mat
    into STRICT ie_repasse_proc_w,
         ie_repasse_mat_w
    from parametro_faturamento a 
   where a.cd_estabelecimento = obter_estabelecimento_ativo;

  select count(*)
    into STRICT qt_repasses_liberados_w
    from (SELECT 1
            from procedimento_repasse y, 
                 procedimento_paciente x 
           where x.nr_interno_conta        = nr_interno_conta_p 
             and x.nr_sequencia            = coalesce(nr_seq_procedimento_p,x.nr_sequencia)
             and coalesce(x.cd_motivo_exc_conta::text, '') = ''
             and coalesce(ie_repasse_proc_w,'N') <> 'N'
             and x.nr_sequencia            = y.nr_seq_procedimento
             and y.ie_status               in ('L','R','S')               
             
union
                
             SELECT 1 
               from material_repasse y,
                    material_atend_paciente x 
              where x.nr_interno_conta       = nr_interno_conta_p
                and x.nr_sequencia           = coalesce(nr_seq_material_p,x.nr_sequencia)
                and coalesce(x.cd_motivo_exc_conta::text, '') = ''
                and coalesce(ie_repasse_mat_w,'N') <> 'N'
                and x.nr_sequencia           = y.nr_seq_material
                and y.ie_status              in ('L','R','S')) alias9;

  if (qt_repasses_liberados_w > 0) then
    CALL wheb_mensagem_pck.exibir_mensagem_abort(126920);
  end if;
end if;

ie_gerar_w	:= 'S';
--Verifica parametro que permite se pode recalcular conta paciente com status em provisorio.
ie_recalcular_conta_prov_w := obter_Param_Usuario(89, 80, obter_perfil_ativo, nm_usuario_p, 0, ie_recalcular_conta_prov_w);

select	coalesce(max(nr_lote_repasse),0),
	max(nr_atendimento),
	max(ie_status_acerto),
	max(nr_seq_protocolo)
into STRICT	nr_lote_repasse_w,
	nr_atendimento_w,
	ie_status_conta_w,
	nr_seq_protocolo_w
from	conta_paciente
where	nr_interno_conta	= nr_interno_conta_p;

--verifica se a conta ainda esta em provisorio
if (ie_status_conta_w = 1) then
	begin
	if (coalesce(ie_recalcular_conta_prov_w, 'S') = 'N') then
		/* Nao e permitido o recalculo de contas provisorias! */

		CALL wheb_mensagem_pck.exibir_mensagem_abort(191623);
	elsif (coalesce(ie_recalcular_conta_prov_w, 'S') = 'C') then
		ie_gerar_w	:= 'N';
	end if;
	end;
end if;

if (ie_gerar_w	= 'S') then
	begin
	--Parametro para permitir recalcular protocolo provisorio
	ie_recalcular_protocolo_prov_w := obter_Param_Usuario(89, 97, obter_perfil_ativo, nm_usuario_p, 0, ie_recalcular_protocolo_prov_w);
	if (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '') then
		select	coalesce(max(ie_status_protocolo), '1'),
			max(substr(obter_titulo_conta_protocolo(nr_seq_protocolo,0),1,254)),
			max(substr(obter_nota_conta_protocolo(nr_seq_protocolo,0),1,254))
		into STRICT	ie_status_protocolo_w,
			nr_titulo_w,
			nr_nota_fiscal_w
		from	protocolo_convenio
		where	nr_seq_protocolo		= nr_seq_protocolo_w;
	end if;	

	if (ie_status_protocolo_w	= '1') and (coalesce(ie_recalcular_protocolo_prov_w, 'S') = 'N') then
		/* Nao e permitido o recalculo de contas em protocolos abertos ou que nao estao em protocolo! */

		CALL wheb_mensagem_pck.exibir_mensagem_abort(191624);
	end if;

	insert into FIN_LOG_REPASSE(DT_ATUALIZACAO,
		NM_USUARIO,
		CD_LOG,
		DS_LOG)
	values (clock_timestamp(),
		nm_usuario_p,
		6040,
		wheb_mensagem_pck.get_texto(800060,'nr_interno_conta_p=' || nr_interno_conta_p));
	
	--obtem as informacoes da funcao Parametros Faturamento
	select coalesce(max(c.ie_repasse_mat),'N'),
		coalesce(max(c.ie_repasse_proc),'N'),
		max(a.cd_estabelecimento),
		max(b.cd_medico_resp),
		max(ie_tipo_atendimento),
		max(cd_convenio_parametro),
		max(cd_categoria_parametro),
		max(dt_entrada),
		coalesce(max(ie_atual_res_conta_rec_rep),'N')
	into STRICT	ie_repasse_mat_w,
		ie_repasse_proc_w,
		cd_estabelecimento_w,
		cd_medico_resp_w,
		ie_tipo_atendimento_w,
		cd_convenio_w,
		cd_categoria_w,
		dt_entrada_w,
		ie_atual_res_conta_rec_rep_w
	from	parametro_faturamento c,
		atendimento_paciente b,
		conta_paciente a
	where	a.nr_atendimento		= b.nr_atendimento
	and	a.cd_estabelecimento	= c.cd_estabelecimento
	and	a.nr_interno_conta	= nr_interno_conta_p;
	
	--verifica o cadastro do convenio, pasta Relacionamento para saber se deve ou nao gerar o repasse
	select	Obter_Valor_Conv_Estab(cd_convenio_w,cd_estabelecimento_w,'IE_REPASSE_PROC'),
		Obter_Valor_Conv_Estab(cd_convenio_w,cd_estabelecimento_w,'IE_REPASSE_MAT')
	into STRICT	ie_repasse_proc_conv_w,
		ie_repasse_mat_conv_w
	;
	
	--Se encontra informacao no convenio, sobrescreve o que esta no Parametro Faturamento
	if (ie_repasse_proc_conv_w IS NOT NULL AND ie_repasse_proc_conv_w::text <> '') then
		ie_repasse_proc_w := ie_repasse_proc_conv_w;
	end if;
	
	--Se encontra informacao no convenio, sobrescreve o que esta no Parametro Faturamento
	if (ie_repasse_mat_conv_w IS NOT NULL AND ie_repasse_mat_conv_w::text <> '') then
		ie_repasse_mat_w := ie_repasse_mat_conv_w;
	end if;
		
	if (nr_lote_repasse_w > 0) then
		ie_contabilizado_w := obter_param_usuario(89, 59, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_contabilizado_w);
		if (coalesce(ie_contabilizado_w, 'N') = 'N') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(168653,	'NR_ATENDIMENTO='||to_char(nr_atendimento_w)||';'||
									'NR_INTERNO_CONTA='||to_char(nr_interno_conta_p)||';'||
									'NR_LOTE_REPASSE='||to_char(nr_lote_repasse_w));	
			/* Nao e possivel recalcular o repasse de uma conta que ja esteja contabilizada em um lote de repasse!
							'Atendimento: ' || nr_atendimento_w || chr(13) ||
							'Conta paciente: ' || nr_interno_conta_p || chr(13) ||
							'Lote contabil: ' || nr_lote_repasse_w);*/
		end if;
	end if;
	
	--Parametro para proibir caso ja esteja em retorno convenio
	ie_retorno_w := obter_param_usuario(89, 111, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_retorno_w);
	if (ie_retorno_w = 'N') then
		select	max(nr_seq_retorno)
		into STRICT	nr_seq_retorno_w
		from	convenio_retorno_item
		where	nr_interno_conta	= nr_interno_conta_p;
		if (nr_seq_retorno_w IS NOT NULL AND nr_seq_retorno_w::text <> '') then
			/* Esta conta ja esta em retorno convenio! Nao e possivel o recalculo do mesmo. Parametro [111] */

			CALL wheb_mensagem_pck.exibir_mensagem_abort(191625);
		end if;
	end if;
	
	--obtem a edicao AMB para o calculo do valor do repasse
	begin
	select	obter_edicao(cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, dt_entrada_w, null)
	into STRICT	cd_edicao_amb_w
	;
	exception
		when others then
			select	max(cd_edicao_amb)
			into STRICT	cd_edicao_amb_w
			from	convenio_amb
			where	cd_estabelecimento	= cd_estabelecimento_w
			  and	cd_convenio		= cd_convenio_w
			  and	cd_categoria		= cd_categoria_w
			  and (coalesce(ie_situacao,'A')	= 'A')
			  and	dt_inicio_vigencia	=
				(SELECT	max(dt_inicio_vigencia)
				from	convenio_amb a
				where	a.cd_estabelecimento  = cd_estabelecimento_w
				and	a.cd_convenio         = cd_convenio_w
				and	a.cd_categoria        = cd_categoria_w
				and (coalesce(a.ie_situacao,'A')= 'A')
				and	a.dt_inicio_vigencia <=  dt_entrada_w);
	end;
	--Verifica se gera repasse com base nas informacoes do cadastro do convenio > pasta relacionamento

	--se nao encontrar nada no convenio, usa o que esta setado no parametros faturamento
	if	((ie_repasse_proc_w = 'C') and (ie_status_conta_w  = 2) or (ie_repasse_proc_w = 'P') and (ie_status_protocolo_w = 2) or (ie_repasse_proc_w = 'G') and (ie_status_protocolo_w = 2) or
		((ie_repasse_proc_w = 'T') and (ie_status_protocolo_w = 2) and (nr_nota_fiscal_w IS NOT NULL AND nr_nota_fiscal_w::text <> '') and (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '')) or
		(ie_recalcular_conta_prov_w	= 'S' AND ie_status_conta_w = 1)) then
		begin
		--abre o cursor de procedimentos
		for	r_c_procedimento in c_procedimento(nr_interno_conta_p, nr_seq_procedimento_p, nr_seq_partic_p, ie_repasse_proc_w) loop
			CALL gerar_procedimento_repasse(
				r_c_procedimento.nr_sequencia,
				cd_estabelecimento_w,
				cd_medico_resp_w,
				nm_usuario_p,
				cd_edicao_amb_w,
				cd_convenio_w,
				ie_tipo_atendimento_w,
				null,
				null,
				r_c_procedimento.nr_seq_partic);
		end loop;
		end;
	end if;
	--Verifica se gera repasse com base nas informacoes do cadastro do convenio > pasta relacionamento

	--se nao encontrar nada no convenio, usa o que esta setado no parametros faturamento
	if	((ie_repasse_mat_w = 'C') and (ie_status_conta_w  = 2) or (ie_repasse_mat_w = 'P') and (ie_status_protocolo_w = 2) or (ie_repasse_mat_w = 'G') and (ie_status_protocolo_w = 2) or
		((ie_repasse_mat_w = 'T') and (ie_status_protocolo_w = 2) and (nr_nota_fiscal_w IS NOT NULL AND nr_nota_fiscal_w::text <> '') and (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '')) or
		(ie_recalcular_conta_prov_w	= 'S' AND ie_status_conta_w = 1)) then	
		begin
		--Abre o cursor de materiais
		for	r_c_material in c_material(nr_interno_conta_p, nr_seq_material_p, ie_repasse_proc_w) loop
			CALL gerar_material_repasse(
				r_c_material.nr_sequencia,
				cd_estabelecimento_w,
				cd_medico_resp_w,
				nm_usuario_p,
				cd_edicao_amb_w,
				cd_convenio_w,
				ie_tipo_atendimento_w,
				null,
				null);
		
		end loop;
		end;
	end if;	
	
	--Verifica se atualiza o resumo da conta com base nas informacoes do cadastro do convenio > pasta relacionamento

	--se nao encontrar nada no convenio, usa o que esta setado no parametros faturamento
	if	(((ie_repasse_proc_w = 'C') and (ie_status_conta_w  = 2) or (ie_repasse_proc_w = 'P') and (ie_status_protocolo_w = 2) or (ie_repasse_proc_w = 'G') and (ie_status_protocolo_w = 2) or
		((ie_repasse_proc_w = 'T') and (ie_status_protocolo_w = 2) and (nr_nota_fiscal_w IS NOT NULL AND nr_nota_fiscal_w::text <> '') and (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '')) or
		(ie_recalcular_conta_prov_w	= 'S' AND ie_status_conta_w = 1)) or		
		((ie_repasse_mat_w = 'C') and (ie_status_conta_w  = 2) or (ie_repasse_mat_w = 'P') and (ie_status_protocolo_w = 2) or (ie_repasse_mat_w = 'G') and (ie_status_protocolo_w = 2) or
		((ie_repasse_mat_w = 'T') and (ie_status_protocolo_w = 2) and (nr_nota_fiscal_w IS NOT NULL AND nr_nota_fiscal_w::text <> '') and (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '')) or
		(ie_recalcular_conta_prov_w	= 'S' AND ie_status_conta_w = 1))) then
		begin
		if (nr_interno_conta_p IS NOT NULL AND nr_interno_conta_p::text <> '') then
			CALL gerar_procmat_repasse_nf(nr_interno_conta_p, nm_usuario_p, 'S');
			
			if (ie_atual_res_conta_rec_rep_w = 'S') then
				CALL atualizar_resumo_conta(nr_interno_conta_p,ie_status_conta_w);
			end if;			
		end if;
		end;
	end if;	
	end;	
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE recalcular_conta_repasse ( nr_interno_conta_p bigint, nr_seq_procedimento_p bigint, nr_seq_material_p bigint, nm_usuario_p text, nr_seq_partic_p bigint default null) FROM PUBLIC;

