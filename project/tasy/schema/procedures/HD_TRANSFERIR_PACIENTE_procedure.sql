-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_transferir_paciente ( cd_pessoa_fisica_p text, ie_tipo_p text, nr_seq_unid_origem_p bigint, nr_seq_unid_destino_p bigint, nr_seq_escala_p bigint, nr_seq_turno_p bigint, dt_prov_volta_p timestamp, nm_pessoa_contato_p text, nm_usuario_p text, ds_dialisador_p text, ds_erro_p INOUT text) AS $body$
DECLARE

 
cd_estabelecimento_w		smallint;
ds_dialisador_w			varchar(255);
nr_seq_dialisador_w		bigint;
cd_perfil_transf_pac_w		integer;
ds_unidade_destino_w		varchar(80);
vl_parametro_w			varchar(1);
nr_seq_escala_w			bigint;

nr_seq_escala_dia_w		bigint;
nr_seq_turno_w			bigint;
ie_dia_semana_w			varchar(1);
nr_seq_escala_aux_w		bigint;
ie_finaliza_trat_w		varchar(1);

c01 CURSOR FOR 
	SELECT	nr_sequencia 
	from	hd_dializador 
	where	obter_se_contido(nr_sequencia,ds_dialisador_p) = 'S' 
	and	cd_pessoa_fisica = cd_pessoa_fisica_p;

C02 CURSOR FOR 
	SELECT	nr_seq_turno, 
		ie_dia_semana, 
		nr_sequencia 
	from	hd_escala_dialise_dia 
	where	nr_Seq_escala = nr_seq_escala_w 
	and	coalesce(dt_fim_escala_dia::text, '') = '';	
 

BEGIN 
 
vl_parametro_w := obter_param_usuario(7009, 169, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, vl_parametro_w);
ie_finaliza_trat_w := obter_param_usuario(7009, 204, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_finaliza_trat_w);
 
if (ie_tipo_p = 'I') then 
	select	max(cd_estabelecimento) 
	into STRICT	cd_estabelecimento_w 
	from	hd_unidade_dialise 
	where	nr_sequencia		= nr_seq_unid_destino_p;
elsif (ie_tipo_p = 'E') then 
	select	max(cd_estabelecimento) 
	into STRICT	cd_estabelecimento_w 
	from	hd_unidade_dialise 
	where	nr_sequencia		= nr_seq_unid_origem_p;
end if;
 
if (nr_seq_unid_origem_p = nr_seq_unid_destino_p) then 
	ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(278354,null);
elsif (coalesce(cd_estabelecimento_w::text, '') = '') then 
	ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(278356,null);
elsif (nr_seq_unid_destino_p = 0) then 
	ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(278357,null);
elsif	(nr_seq_escala_p = 0 AND vl_parametro_w = 'S') then 
	ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(278358,null);
elsif	(nr_seq_turno_p	= 0 AND vl_parametro_w = 'S') then 
	ds_erro_p	:= WHEB_MENSAGEM_PCK.get_texto(278359,null);
else 
	begin 
	select	max(nr_sequencia) 
	into STRICT	nr_seq_escala_w 
	from	hd_escala_dialise 
	where	cd_pessoa_fisica = cd_pessoa_fisica_p 
	and	coalesce(dt_fim::text, '') = '';
	 
	 
	/* Baixa a escala atual */
 
	update	hd_escala_dialise 
	set	dt_fim			= clock_timestamp() 
	where	cd_pessoa_fisica	= cd_pessoa_fisica_p 
	and	coalesce(dt_fim::text, '') = '';
 
	/* Insere a nova escala */
 
	 
	select	nextval('hd_escala_dialise_seq') 
	into STRICT	nr_seq_escala_aux_w 
	;
	 
	--if (vl_parametro_w = 'S') then 
	if (ie_tipo_p = 'I') then 
	 
	insert into hd_escala_dialise( 
		nr_sequencia, 
		cd_estabelecimento, 
		dt_atualizacao, 
		nm_usuario, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		cd_pessoa_fisica, 
		nr_seq_turno, 
		nr_seq_escala, 
		dt_inicio, 
		nr_seq_unid_dialise, 
		dt_prov_volta, 
		nm_pessoa_contato 
	) values ( 
		nr_seq_escala_aux_w, 
		cd_estabelecimento_w, 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		cd_pessoa_fisica_p, 
		CASE WHEN vl_parametro_w='S' THEN nr_seq_turno_p  ELSE null END , 
		CASE WHEN vl_parametro_w='S' THEN nr_seq_escala_p  ELSE null END , 
		clock_timestamp(), 
		nr_seq_unid_destino_p, 
		dt_prov_volta_p, 
		nm_pessoa_contato_p 
		);
	end if;
	--end if; 
	/* Tratamento dos dialisadores */
	 
	--ds_dialisador_w		:= ds_dialisador_p; 
	--ds_dialisador_w		:= replace(ds_dialisador_w, ',',' '); 
	--ds_dialisador_w		:= replace(ds_dialisador_w, ' ',' '); 
	 
	CALL hd_transf_prot_exame(cd_pessoa_fisica_p,nr_seq_unid_destino_p,nm_usuario_p);
	 
	open c01;
	loop 
	fetch c01 into 
		nr_seq_dialisador_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin 
		 
		update	hd_dializador 
		set	ie_status		  = 'T', 
			nr_seq_unid_dialise_atual = nr_seq_unid_destino_p 
		where	nr_sequencia		  = nr_seq_dialisador_w;
		 
		insert into hd_dialisador_transf( 
			nr_sequencia, 
			cd_estabelecimento, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_dialisador, 
			nr_seq_unid_origem, 
			nr_seq_unid_destino, 
			dt_transferencia, 
			cd_pf_transf, 
			ie_tipo 
		) values ( 
			nextval('hd_dialisador_transf_seq'), 
			cd_estabelecimento_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			nr_seq_dialisador_w, 
			nr_seq_unid_origem_p, 
			nr_seq_unid_destino_p, 
			clock_timestamp(), 
			substr(obter_pessoa_fisica_usuario(nm_usuario_p,'C'),1,10), 
			ie_tipo_p 
		);
				 
		end;
	end loop;
	close c01;
		 
	 
	if (vl_parametro_w = 'N') then 
	 
		open C02;
		loop 
		fetch C02 into	 
			nr_seq_turno_w, 
			ie_dia_semana_w, 
			nr_seq_escala_dia_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin 
			 
			update	hd_escala_dialise_dia 
			set	dt_fim_escala_dia = clock_timestamp() 
			where	nr_sequencia = nr_seq_escala_dia_w;
			 
			if (ie_tipo_p = 'I') then 
			 
			insert into hd_escala_dialise_dia(nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_turno, 
				ie_dia_semana, 
				dt_inicio_escala_dia, 
				nr_seq_escala) 
			values (nextval('hd_escala_dialise_dia_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_turno_w, 
				ie_dia_semana_w, 
				clock_timestamp(), 
				nr_seq_escala_aux_w);
			 
			end if;
				 
			end;
		end loop;
		close C02;
	end if;
	 
	/* Enviar comunicação ao receber paciente */
 
	begin 
	select	cd_perfil_transf_pac 
	into STRICT	cd_perfil_transf_pac_w 
	from	hd_parametro 
	where	cd_estabelecimento = cd_estabelecimento_w;
	exception 
		when others then 
		cd_perfil_transf_pac_w	:= 0;
	end;
 
	if (cd_perfil_transf_pac_w > 0) then 
		if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then 
			begin 
			 
			ds_unidade_destino_w	:= substr(HD_Obter_Desc_Unid_Dialise(nr_seq_unid_destino_p),1,80);
 
			insert into comunic_interna( 
				dt_comunicado, 
				ds_titulo, 
				ds_comunicado, 
				nm_usuario, 
				dt_atualizacao, 
				ie_geral, 
				nm_usuario_destino, 
				ds_perfil_adicional, 
				nr_sequencia, 
				ie_gerencial, 
				dt_liberacao, 
				cd_estab_destino 
			) values ( 
				clock_timestamp(), 
				wheb_mensagem_pck.get_texto(802540) || ': ' || ds_unidade_destino_w, 
				wheb_mensagem_pck.get_texto(791350) || ' ' || cd_pessoa_fisica_p ||' - '|| obter_nome_pf(cd_pessoa_fisica_p) || chr(10) || 
	 			wheb_mensagem_pck.get_texto(795798) || ': ' || SUBSTR(HD_OBTER_DESC_UNID_DIALISE(nr_seq_unid_destino_p),1,90), 
				nm_usuario_p, 
				clock_timestamp(), 
				'N', 
				'', 
				cd_perfil_transf_pac_w ||', ', 
				nextval('comunic_interna_seq'), 
				'N', 
				clock_timestamp(), 
				cd_estabelecimento_w 
			);
			end;
		end if;
	end if;
	 
	if (ie_finaliza_trat_w = 'S') and (ie_tipo_p = 'E') then 
		CALL hd_finaliza_trat_pac_dialise(cd_pessoa_fisica_p,cd_estabelecimento_w);
	end if;
	 
	commit;	
	exception 
		when others then 
		rollback;
	end;
	 
end if;	
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_transferir_paciente ( cd_pessoa_fisica_p text, ie_tipo_p text, nr_seq_unid_origem_p bigint, nr_seq_unid_destino_p bigint, nr_seq_escala_p bigint, nr_seq_turno_p bigint, dt_prov_volta_p timestamp, nm_pessoa_contato_p text, nm_usuario_p text, ds_dialisador_p text, ds_erro_p INOUT text) FROM PUBLIC;

