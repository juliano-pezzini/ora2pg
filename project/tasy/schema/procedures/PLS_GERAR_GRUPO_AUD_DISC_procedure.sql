-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_grupo_aud_disc ( nr_seq_conta_p bigint, nr_seq_analise_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


ds_conta_w			varchar(4000);
ie_tipo_conta_w			varchar(10);
ie_intercambio_w		varchar(10) := 'N';
ie_conta_medica_w		varchar(10) := 'N';
ie_tipo_contestacao_w		varchar(3);
ie_pre_analise_w		varchar(2);
ie_tipo_item_w			varchar(1);
ie_origem_conta_w		varchar(1);
ie_tipo_item_ww			varchar(1);
ie_fluxo_contest_w		varchar(1);
ie_despesa_w			varchar(1)	:= 'N';
ie_tipo_w			varchar(1);
ie_tipo_despesa_w		varchar(1);
nr_seq_grupo_w			bigint;
nr_seq_fluxo_w			bigint;		
ie_existe_grupo_analise_w	bigint;
nr_seq_grupo_auditor_w		bigint;
nr_ie_tipo_item_w		bigint;
nr_seq_ocorrencia_w		bigint;
nr_seq_grupo_ww			bigint;
nr_seq_item_w			bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_oc_benef_w		bigint;
nr_seq_conta_w			bigint;
nr_seq_conta_proc_ww		bigint;
nr_seq_conta_mat_ww		bigint;
nr_seq_ocorr_grupo_w		bigint;
qt_auditoria_w			integer;
ie_origem_analise_w		pls_analise_conta.ie_origem_analise%type;
/*Obter os itens contestados*/

C01 CURSOR FOR
	SELECT	nr_seq_item,
		ie_tipo_item,
		nr_seq_conta
	from	w_pls_discussao_item
	where	nr_seq_analise	= nr_seq_analise_p;

/*Obter as ocorrencias destes itens contestados*/

C02 CURSOR FOR	
	SELECT	nr_seq_ocorrencia,
		nr_seq_proc,
		nr_seq_mat
	from	pls_ocorrencia_benef
	where	((nr_seq_conta = nr_seq_conta_w) and ((nr_seq_proc = nr_seq_conta_proc_w) or (nr_seq_mat = nr_seq_conta_mat_w))) --Ocorrencias do item
	or	((nr_seq_conta = nr_seq_conta_w) and (coalesce(nr_seq_proc::text, '') = '') and (coalesce(nr_seq_mat::text, '') = ''));				 --Ocorrencias da conta
	
/*Obter os grupos responsaveis por estas ocorrencias*/

C03 CURSOR FOR
	SELECT	a.nr_seq_grupo,
		a.nr_seq_fluxo,
		a.nr_sequencia
	from	pls_ocorrencia_grupo	a
	where	a.nr_seq_ocorrencia 		= nr_seq_ocorrencia_w
	and	a.ie_intercambio		= 'S'
	and	a.ie_situacao			= 'A'
	and	coalesce(a.ie_origem_conta,coalesce(ie_origem_conta_w,'0')) = coalesce(ie_origem_conta_w,'0')
	and	((coalesce(a.ie_tipo_analise::text, '') = '') or (a.ie_tipo_analise = 'A') or (a.ie_tipo_analise = 'C' and ie_origem_analise_w in ('1','3','4','5','6')) or (a.ie_tipo_analise	= 'P' and ie_origem_analise_w in ('2','7')));/*Diego OS 310737*/
 /*Robson - para contas de intercambio, fatura 2320*/
	
C04 CURSOR FOR
	SELECT	nr_seq_grupo,
		nr_seq_fluxo
	from	pls_fluxo_analise_contest
	where	cd_estabelecimento				= cd_estabelecimento_p
	and	coalesce(ie_situacao,'A')				= 'A'
	and	coalesce(ie_tipo_contestacao,ie_tipo_contestacao_w)	= ie_tipo_contestacao_w
	order by 2;	


BEGIN
/* Verificar qual o tipo da contestacao */

select	CASE WHEN max(ie_envio_recebimento)='E' THEN 'P'  ELSE 'F' END
into STRICT	ie_tipo_contestacao_w
from	pls_contestacao			c,
	pls_lote_contestacao		b,
	pls_contestacao_discussao	a
where	a.nr_seq_contestacao	= c.nr_sequencia
and	c.nr_seq_lote		= b.nr_sequencia
and	a.nr_seq_analise	= nr_seq_analise_p;
	
begin
select	coalesce(ie_fluxo_contest,'O')
into STRICT	ie_fluxo_contest_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;
exception
when others then
	ie_fluxo_contest_w := 'O';
end;

select	max(ie_origem_analise)
into STRICT	ie_origem_analise_w
from	pls_analise_conta
where	nr_sequencia	= nr_seq_analise_p;
/*Se for novo fluxo e criado o mesmo com base no declarado em regras na funcao do A500*/

if (ie_fluxo_contest_w = 'N') then
	open C04;
	loop
	fetch C04 into	
		nr_seq_grupo_w,
		nr_seq_fluxo_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin	
		select	count(1)
		into STRICT	qt_auditoria_w
		from	pls_auditoria_conta_grupo
		where	nr_seq_analise	= nr_seq_analise_p
		and	nr_seq_grupo	= nr_seq_grupo_w;
		
		if (qt_auditoria_w = 0) then
			insert into pls_auditoria_conta_grupo(nr_sequencia,
				nr_seq_analise,
				nr_seq_grupo,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_ordem,
				ds_conta,
				ie_pre_analise)
			values (nextval('pls_auditoria_conta_grupo_seq'),
				nr_seq_analise_p,
				nr_seq_grupo_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_fluxo_w,
				'',
				'N');
		end if;
		end;
	end loop;
	close C04;
else
	begin
	select	ie_origem_conta,
		ie_tipo_conta
	into STRICT	ie_origem_conta_w,
		ie_tipo_conta_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_p;
	exception
	when others then
		ie_origem_conta_w	:= NULL;
		ie_tipo_conta_w		:= 'O';
	end;

	if (ie_tipo_conta_w = 'I') then
		ie_intercambio_w	:= 'S';
		ie_conta_medica_w	:= null;
	else
		ie_intercambio_w	:= null;
		ie_conta_medica_w	:= 'S';
	end if;

	open C01;
	loop
	fetch C01 into	
		nr_seq_item_w,
		ie_tipo_item_ww,
		nr_seq_conta_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if (ie_tipo_item_ww = 'P') then
			nr_seq_conta_proc_w 	:= nr_seq_item_w;
			nr_seq_conta_mat_w	:= null;
		elsif (ie_tipo_item_ww = 'M') then
			nr_seq_conta_proc_w	:= null;
			nr_seq_conta_mat_w 	:= nr_seq_item_w;
		end if;
		
		open C02;
		loop
		fetch C02 into	
			nr_seq_ocorrencia_w,
			nr_seq_conta_proc_ww,
			nr_seq_conta_mat_ww;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			ie_despesa_w	:= 'N';
			
			if (coalesce(nr_seq_conta_proc_ww::text, '') = '') and (coalesce(nr_seq_conta_mat_ww::text, '') = '') then
				ie_despesa_w	:= 'S';
			else
				if (nr_seq_conta_mat_ww IS NOT NULL AND nr_seq_conta_mat_ww::text <> '') then
					select	max(a.ie_tipo_despesa),
						'M'
					into STRICT	ie_tipo_despesa_w,
						ie_tipo_w
					from	pls_conta_mat	a
					where	a.nr_sequencia	= nr_seq_conta_mat_ww;
				else
					select	max(a.ie_tipo_despesa),
						'P'
					into STRICT	ie_tipo_despesa_w,
						ie_tipo_w
					from	pls_conta_proc	a
					where	a.nr_sequencia	= nr_seq_conta_proc_ww;
				end if;
			end if;
			
			open C03;
			loop
			fetch C03 into	
				nr_seq_grupo_w,
				nr_seq_fluxo_w,
				nr_seq_ocorr_grupo_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				if (ie_despesa_w = 'N') then
					ie_despesa_w	:= pls_obter_se_grupo_tipo_desp(nr_seq_ocorr_grupo_w,ie_tipo_despesa_w,ie_tipo_w);
				end if;
				
				if (coalesce(ie_despesa_w,'S') = 'S') then
					/*Verifica se existe o grupo na analise*/

					select	count(a.nr_sequencia)
					into STRICT	ie_existe_grupo_analise_w
					from	pls_auditoria_conta_grupo a,
						pls_analise_conta	  b
					where	b.nr_sequencia		= a.nr_seq_analise	
					and	a.nr_seq_grupo		= nr_seq_grupo_w
					and	b.nr_sequencia		= nr_seq_analise_p;
					--and	a.nr_seq_analise	= nr_seq_analise_p;		
					
					if (ie_existe_grupo_analise_w  = 0) then
						if (coalesce(nr_seq_fluxo_w::text, '') = '') then
							select	max(a.nr_seq_fluxo_padrao)
							into STRICT	nr_seq_fluxo_w
							from	pls_grupo_auditor	a
							where	a.nr_sequencia	= nr_seq_grupo_w;
						end if;
		
						select	min(nr_sequencia)
						into STRICT	nr_seq_grupo_ww
						from 	pls_auditoria_conta_grupo
						where	nr_seq_analise	= nr_seq_analise_p
						and	nr_seq_ordem	= nr_seq_fluxo_w;
						
						while(coalesce(nr_seq_grupo_ww,0) <> 0) loop
							begin
							nr_seq_fluxo_w	:= nr_seq_fluxo_w + 1;
							
							select	min(nr_sequencia)
							into STRICT	nr_seq_grupo_ww
							from 	pls_auditoria_conta_grupo
							where	nr_seq_analise	= nr_seq_analise_p
							and	nr_seq_ordem	= nr_seq_fluxo_w;
							end;
						end loop;
						
						select	nextval('pls_auditoria_conta_grupo_seq')
						into STRICT	nr_seq_grupo_auditor_w
						;
						
						/*Se nao existir cria-se o grupo*/
		
						insert into pls_auditoria_conta_grupo(nr_sequencia,
							nr_seq_analise,
							nr_seq_grupo,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_ordem,
							ds_conta,
							ie_pre_analise)
						values (nr_seq_grupo_auditor_w,
							nr_seq_analise_p,
							nr_seq_grupo_w,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_fluxo_w,
							'',
							'N');	
					end if;
				end if;
				end;
			end loop;
			close C03;	
			end;
		end loop;
		close C02;	
		end;
	end loop;
	close C01;
end if;

CALL pls_atualizar_grupo_penden(nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_grupo_aud_disc ( nr_seq_conta_p bigint, nr_seq_analise_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

