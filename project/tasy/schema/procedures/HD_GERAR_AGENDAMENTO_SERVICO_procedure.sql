-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hd_gerar_agendamento_servico (nr_seq_agenda_dialise_p bigint, nr_seq_agenda_serv_old_p bigint DEFAULT NULL) AS $body$
DECLARE

    cd_pessoa_fisica_w varchar(20);
    cd_agenda_w        bigint;
    --    nr_seq_agenda_dialise_p NUMBER := 569;
    nr_seq_agenda_sev      bigint := 0;
    nm_usuario_w           varchar(255) := coalesce(wheb_usuario_pck.get_nm_usuario, 'TASY');
    cd_estabelecimento_w   bigint;
    dt_agenda_w            timestamp;
    v_existe_w             bigint;
    cd_convenio_w          bigint;
    cd_categoria_w         varchar(10);
    cd_tipo_acomodacao_w   bigint;
    cd_plano_convenio_w    varchar(10);
    dt_validade_carteira_w timestamp;
    nr_seq_hora_w          bigint;
    nr_atendimento_w       bigint;
    ie_transferencia_w     varchar(1) := 'N';

    nr_sequencia_autor_w    bigint;
    nr_seq_estagio_cancel_w bigint;
    nr_seq_agcons_auto_w    bigint;
    nr_seq_agcons_w         bigint;
    qt_agenda_valida        bigint;
    nr_duracao_w            bigint;

  i RECORD;

BEGIN
    SELECT MAX(CASE WHEN coalesce(ad.nr_seq_agenda::text, '') = '' THEN  1  ELSE 0 END  + CASE WHEN coalesce(nr_seq_agenda_serv_old_p::text, '') = '' THEN  0  ELSE 1 END ),
    MAX(ad.nr_seq_agenda)
    INTO STRICT v_existe_w,
    nr_seq_agcons_w
    FROM hd_agenda_dialise ad
     WHERE ad.nr_sequencia = nr_seq_agenda_dialise_p;


    IF (nr_seq_agenda_serv_old_p IS NOT NULL AND nr_seq_agenda_serv_old_p::text <> '') THEN
        ie_transferencia_w := 'S';
        nr_seq_agcons_w := NULL;
    END IF;

    IF v_existe_w > 0 THEN
        SELECT MAX(ac.nr_seq_agenda_sessao)
          INTO STRICT nr_seq_agcons_auto_w
          FROM agenda_consulta ac
         WHERE ac.nr_sequencia = nr_seq_agcons_w;

        SELECT max(cd_pessoa_fisica),
               max(cd_agenda),
               max(to_date(to_char(ad.dt_agenda, 'dd/mm/yyyy ') || to_char(ht.dt_inicio, 'hh24:mi:ss'),
                       'dd/mm/yyyy hh24:mi:ss')),
               max(ad.cd_estabelecimento),
               max((ht.dt_fim - ht.dt_inicio)*24*60)
          INTO STRICT cd_pessoa_fisica_w,
               cd_agenda_w,
               dt_agenda_w,
               cd_estabelecimento_w,
               nr_duracao_w
          FROM hd_agenda_dialise ad,
               hd_ponto_acesso   pa,
               hd_turno          ht
         WHERE ad.nr_seq_ponto_acesso = pa.nr_sequencia
           AND ad.nr_seq_turno = ht.nr_sequencia
           AND ad.nr_sequencia = nr_seq_agenda_dialise_p;

		if (cd_agenda_w IS NOT NULL AND cd_agenda_w::text <> '') then
			SELECT max(cd_convenio),
				   max(cd_categoria),
				   max(cd_tipo_acomodacao),
				   max(cd_plano_convenio),
				   max(dt_validade_carteira),
				   max(nr_atendimento)
          INTO STRICT cd_convenio_w,
               cd_categoria_w,
               cd_tipo_acomodacao_w,
               cd_plano_convenio_w,
               dt_validade_carteira_w,
               nr_atendimento_w
          FROM (SELECT ap.nr_atendimento,
                       cd_convenio,
                       cd_categoria,
                       cd_plano_convenio,
                       cd_tipo_acomodacao,
                       dt_validade_carteira,
                       dt_entrada
                  FROM atendimento_paciente ap
LEFT OUTER JOIN atend_categoria_convenio acc ON (ap.nr_atendimento = acc.nr_atendimento)
WHERE ap.cd_pessoa_fisica = cd_pessoa_fisica_w AND ap.ie_status_atendimento <> 'C' AND clock_timestamp() BETWEEN dt_inicio_vigencia AND coalesce(dt_final_vigencia, clock_timestamp()) AND ap.cd_estabelecimento = cd_estabelecimento_w
UNION ALL

                SELECT NULL nr_atendimento,
                       NULL cd_convenio,
                       NULL cd_categoria,
                       NULL cd_tipo_acomodacao,
                       NULL cd_plano_convenio,
                       NULL dt_validade_carteira,
                       to_date('01/01/1900', 'dd/mm/yyyy') dt_entrada
                  
                 ORDER BY dt_entrada DESC) a LIMIT 1;

        --
        SELECT coalesce(MAX(nr_seq_hora), 0) + 1
          INTO STRICT nr_seq_hora_w
          FROM agenda_consulta
         WHERE cd_agenda = cd_agenda_w
           AND dt_agenda = dt_agenda_w;

        INSERT INTO agenda_consulta(dt_atualizacao,
             nm_usuario,
             nr_sequencia,
             nr_seq_hora,
             nr_minuto_duracao,
             dt_agenda,
             cd_agenda,
             ie_classif_agenda,
             ie_status_agenda,
             cd_turno,
             cd_pessoa_fisica,
             nm_paciente,
             dt_nascimento_pac,
             qt_idade_pac,
             nr_telefone,
             cd_convenio,
             cd_categoria,
             cd_tipo_acomodacao,
             cd_plano,
             dt_validade_carteira,
             ie_transferido)
        VALUES (clock_timestamp(),
             nm_usuario_w,
             nextval('agenda_consulta_seq'),
             nr_seq_hora_w,
             nr_duracao_w,
             dt_agenda_w,
             cd_agenda_w,
             'L',
             'N',
             0,
             cd_pessoa_fisica_w,
             substr(obter_nome_pf(cd_pessoa_fisica_w), 1, 60),
             to_date(obter_dados_pf(cd_pessoa_fisica_w, 'DN'),'dd/mm/yyyy'),
             obter_dados_pf(cd_pessoa_fisica_w, 'I'),
             obter_fone_pac_agenda(cd_pessoa_fisica_w),
             cd_convenio_w,
             cd_categoria_w,
             cd_tipo_acomodacao_w,
             cd_plano_convenio_w,
             dt_validade_carteira_w,
             'N')
        RETURNING nr_sequencia INTO nr_seq_agenda_sev;
        -- dbms_output.put_line(' --- HD_GERAR_AGENDAMENTO_SERVICO ---');
        -- dbms_output.put_line(' agenda_consulta **Seq:' || nr_seq_agenda_sev);
        -- dbms_output.put_line(' Ultimo Atend. : ' || nr_atendimento_w);
        IF ie_transferencia_w = 'N' THEN

            CALL hd_gerar_agendamento_proc(nr_ultmo_atendimento_p => nr_atendimento_w,
                                      nr_seq_agendamento_p   => nr_seq_agenda_sev);
        ELSE
            INSERT INTO agenda_consulta_proc(dt_atualizacao,
                 nm_usuario,
                 dt_atualizacao_nrec,
                 nm_usuario_nrec,
                 nr_sequencia,
                 nr_seq_agenda,
                 cd_procedimento,
                 nr_seq_proc_interno,
                 ie_origem_proced,
                 ie_executar_proc)
                SELECT clock_timestamp(),
                       nm_usuario_w,
                       clock_timestamp(),
                       nm_usuario_w,
                       nextval('agenda_consulta_proc_seq'),
                       nr_seq_agenda_sev,
                       cd_procedimento,
                       nr_seq_proc_interno,
                       ie_origem_proced,
                       ie_executar_proc
                  FROM agenda_consulta_proc
                 WHERE nr_seq_agenda = nr_seq_agenda_serv_old_p;

            UPDATE agenda_consulta
               SET ie_status_agenda = 'C',
                   ie_transferido   = 'S',
                   dt_atualizacao   = clock_timestamp(),
                   nm_usuario       = nm_usuario_w
             WHERE nr_sequencia = nr_seq_agenda_serv_old_p;

            /*
            Chamada de ATUALIZAR_AUTORIZACAO_CONVENIO
            Para a agenda Cancelada
            Origem: alterar_status_agecons
            */
            SELECT COUNT(*)
              INTO STRICT qt_agenda_valida
              FROM agenda_consulta ac
             WHERE ac.nr_seq_agenda_sessao = nr_seq_agcons_auto_w
               AND ac.ie_status_agenda <> 'C';

            SELECT coalesce(MAX(a.nr_sequencia), 0)
              INTO STRICT nr_sequencia_autor_w
              FROM autorizacao_convenio a
             WHERE a.nr_seq_agenda_consulta = nr_seq_agcons_auto_w;

            IF (nr_sequencia_autor_w > 0) AND (qt_agenda_valida = 0) THEN

                SELECT coalesce(MAX(x.nr_sequencia), 0)
                  INTO STRICT nr_seq_estagio_cancel_w
                  FROM estagio_autorizacao x
                 WHERE x.ie_interno = '70'
                   AND coalesce(x.ie_situacao, 'A') = 'A'
                   AND obter_empresa_estab(wheb_usuario_pck.get_cd_estabelecimento) = x.cd_empresa;

                IF (nr_seq_estagio_cancel_w > 0) THEN
                    CALL atualizar_autorizacao_convenio(nr_sequencia_autor_w,
                                                   nm_usuario_w,
                                                   nr_seq_estagio_cancel_w,
                                                   'N',
                                                   'N',
                                                   'N');
                END IF;
            END IF;

/*          ----------------------------------
            FOR i IN (SELECT nr_sequencia,
                             ie_origem_proced,
                             cd_procedimento
                        FROM agenda_consulta_proc
                       WHERE nr_seq_agenda = nr_seq_agenda_serv_old_p) LOOP
                UPDATE procedimento_autorizado a
                   SET qt_solicitada  = nvl(qt_solicitada, 0) - 1,
                       dt_atualizacao = SYSDATE,
                       nm_usuario     = nm_usuario_w
                 WHERE a.ie_origem_proced = i.ie_origem_proced
                   AND a.cd_procedimento = i.cd_procedimento
                   AND a.nr_seq_agenda_consulta = nr_seq_agcons_auto_w
                   AND qt_solicitada > 0;
            END LOOP;
            */
        END IF;
        FOR i IN (SELECT nr_sequencia,
                         nr_seq_proc_interno
                    FROM agenda_consulta_proc
                   WHERE nr_seq_agenda = nr_seq_agenda_sev) LOOP
            CALL gerar_autor_regra(ie_evento_p               => 'GIR',
                              nr_seq_agenda_consulta_p  => nr_seq_agenda_sev,
                              nr_seq_proc_interno_p     => i.nr_seq_proc_interno,
                              nr_atendimento_p          => NULL,
                              nm_usuario_p              => nm_usuario_w,
                              nr_seq_agenda_p           => NULL,
                              nr_seq_material_p         => NULL,
                              nr_seq_proced_p           => NULL,
                              nr_prescricao_p           => NULL,
                              nr_seq_mat_prescr_p       => NULL,
                              nr_seq_proc_prescr_p      => NULL,
                              nr_seq_gestao_p           => NULL,
                              nr_seq_agenda_pac_opme_p  => NULL,
                              nr_seq_agenda_proc_adic_p => i.nr_sequencia);

        END LOOP;

        UPDATE hd_agenda_dialise had
           SET had.dt_atualizacao = clock_timestamp(),
               had.nm_usuario     = nm_usuario_w,
               had.nr_seq_agenda  = nr_seq_agenda_sev,
               had.cd_convenio    = cd_convenio_w
         WHERE nr_sequencia = nr_seq_agenda_dialise_p;
    END IF;
    END IF;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_gerar_agendamento_servico (nr_seq_agenda_dialise_p bigint, nr_seq_agenda_serv_old_p bigint DEFAULT NULL) FROM PUBLIC;

