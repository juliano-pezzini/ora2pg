-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_repasse_terceiro (dt_inicial_p timestamp, dt_final_p timestamp, cd_condicao_pagamento_p bigint, cd_estabelecimento_p bigint, ie_tipo_data_p bigint, ie_tipo_convenio_p bigint, ie_gerar_repasse_p text, nm_usuario_p text, cd_convenio_p bigint, dt_mesano_ref_p timestamp, ie_tipo_pessoa_p text, ie_ignorar_periodo_p text, dt_base_vencto_p timestamp, ie_acao_p bigint, ie_gerar_rep_perc_saldo_p text, ie_valor_lib_zerado_p text, ie_terceiro_vl_lib_zerado_p text, nr_seq_protocolo_p bigint, nr_seq_tipo_repasse_p bigint, nr_repasse_terceiro_p bigint, ie_copiar_terceiro_regra_p text, ie_tipo_atendimento_p bigint, ds_filtro_convenios_p text, ds_filtro_procedimentos_p text, ie_ignorar_repasse_aberto_p text, ds_observacao_p text, ds_filtro_medico_p text, ds_filtro_proc_p text, cd_area_proc_p bigint, cd_espec_proc_p bigint, cd_grupo_proc_p bigint, ie_repasse_especial_p text, ie_interv_prod_p text) AS $body$
DECLARE


/*	ie_acao_p

0	Sem ação
1	Gerar vencimentos
2	Gerar vencimentos e mudar status
3	Gerar vencimentos, mudar status e aprovar repasse
4	Gerar vencimentos, mudar status, aprovar repasse e gerar título

*/
nr_seq_terceiro_w	bigint;
nr_repasse_terceiro_w	bigint;
ie_estornado_w		varchar(255);
ie_gerar_tributos_w	varchar(1);
qt_cont_w		bigint;
vl_repasse_w		double precision;
vl_liberado_terc_w	double precision;
ie_excluir_rep_zerado_w	varchar(255);
cd_regra_w		integer;

c01 CURSOR FOR
SELECT	a.nr_sequencia
from	terceiro a
where	a.cd_estabelecimento	= cd_estabelecimento_p
and	coalesce(a.ie_utilizacao, 'A') in ('A','R')
and	((ie_tipo_pessoa_p = 'T') or (ie_tipo_pessoa_p = 'F' AND a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '') or (ie_tipo_pessoa_p = 'J' AND a.cd_cgc IS NOT NULL AND a.cd_cgc::text <> ''))
and	a.ie_situacao		= 'A'
and	((coalesce(nr_seq_tipo_repasse_p::text, '') = '') or (coalesce(a.nr_seq_tipo_rep,nr_seq_tipo_repasse_p) = nr_seq_tipo_repasse_p));


BEGIN

select	coalesce(max(ie_excluir_rep_zerado),'N')
into STRICT	ie_excluir_rep_zerado_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_p;

open c01;
loop
fetch c01 into
	nr_seq_terceiro_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	
	select	max(obter_valor_liberado_terceiro(nr_seq_terceiro_w))
	into STRICT	vl_liberado_terc_w
	;
	
	/*lhalves OS295540 em 29/03/2011 - Gerar apenas para terceiros com valor liberado <> de zero*/

	if	((coalesce(ie_terceiro_vl_lib_zerado_p,'N') 	= 'S') and (coalesce(vl_liberado_terc_w,0) 		<> 0)) or (coalesce(ie_terceiro_vl_lib_zerado_p,'N') 	= 'N') then
		
		if (ie_ignorar_repasse_aberto_p = 'N') then
			if (ie_ignorar_periodo_p = 'P') then
				select	coalesce(max(x.nr_repasse_terceiro),0)
				into STRICT	nr_repasse_terceiro_w
				from	repasse_terceiro x
				where	x.nr_seq_terceiro	= nr_seq_terceiro_w
				and	x.ie_status		= 'A';
			else
				select	coalesce(max(nr_repasse_terceiro),0)
				into STRICT	nr_repasse_terceiro_w
				from	repasse_terceiro x
				where	x.nr_seq_terceiro			= nr_seq_terceiro_w
				and	coalesce(x.cd_convenio,0)			= coalesce(coalesce(cd_convenio_p,x.cd_convenio),0)
				and	coalesce(x.ie_tipo_convenio,0)		= coalesce(coalesce(ie_tipo_convenio_p,x.ie_tipo_convenio),0)
				and	coalesce(x.cd_condicao_pagamento,0)		= coalesce(coalesce(cd_condicao_pagamento_p,x.cd_condicao_pagamento),0)
				and	coalesce(x.nr_seq_tipo,0)			= coalesce(coalesce(nr_seq_tipo_repasse_p,x.nr_seq_tipo),0)
				and	x.ie_status				= 'A'
				and  	x.IE_TIPO_DATA				= ie_tipo_data_p
				and	trunc(coalesce(x.dt_base_vencto,clock_timestamp()))	= trunc(coalesce(coalesce(dt_base_vencto_p,x.dt_base_vencto),clock_timestamp()))
				and (coalesce(dt_mesano_ref_p::text, '') = '' or (trunc(x.dt_mesano_referencia,'month')	= trunc(dt_mesano_ref_p,'month')))
				and	x.dt_periodo_inicial between dt_inicial_p and dt_final_p;
			end if;
		else	
			nr_repasse_terceiro_w	:= 0;
		end if;
		
		if	((nr_repasse_terceiro_w = 0 AND ie_ignorar_periodo_p = 'N') or (ie_ignorar_periodo_p = 'S') or (ie_ignorar_periodo_p = 'A') or (ie_ignorar_periodo_p = 'P')) then
				
			if	((ie_ignorar_periodo_p = 'A') or (ie_ignorar_periodo_p = 'P'))  and (nr_repasse_terceiro_w <> 0)  then
				update	repasse_terceiro set
					cd_estabelecimento	= cd_estabelecimento_p,
					dt_mesano_referencia	= coalesce(dt_mesano_ref_p, dt_final_p),
					ie_status		= 'A',
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p,
					cd_convenio		= cd_convenio_p,
					ie_tipo_convenio	= ie_tipo_convenio_p,
					dt_periodo_inicial	= dt_inicial_p,
					dt_periodo_final	= dt_final_p,
					ie_tipo_data		= ie_tipo_data_p,
					dt_aprovacao_terceiro	 = NULL,
					nm_usuario_aprov	 = NULL,
					cd_condicao_pagamento	= cd_condicao_pagamento_p,
					dt_base_vencto		= coalesce(dt_base_vencto_p,clock_timestamp()),
					nr_seq_tipo		= nr_seq_tipo_repasse_p,
					ds_observacao		= ds_observacao_p
				where	nr_seq_terceiro		= nr_seq_terceiro_w
				and	dt_periodo_inicial between dt_inicial_p and dt_final_p
				and	ie_status		= 'A';
				
			elsif	((coalesce(ie_terceiro_vl_lib_zerado_p,'N') = 'S' and coalesce(vl_liberado_terc_w,0) <> 0) or (coalesce(ie_terceiro_vl_lib_zerado_p,'N') = 'N')) then
				
				select	nextval('repasse_terceiro_seq')
				into STRICT	nr_repasse_terceiro_w
				;

				insert into repasse_terceiro(nr_repasse_terceiro,
					cd_estabelecimento,
					nr_seq_terceiro,
					dt_mesano_referencia,
					ie_status,
					dt_atualizacao,
					nm_usuario,
					cd_convenio,
					dt_periodo_inicial,
					dt_periodo_final,
					ie_tipo_data,
					dt_aprovacao_terceiro,
					nm_usuario_aprov,
					cd_condicao_pagamento,
					dt_base_vencto,
					nr_seq_tipo,
					ie_tipo_convenio,
					ds_observacao)
				values (nr_repasse_terceiro_w,
					cd_estabelecimento_p,
					nr_seq_terceiro_w,
					coalesce(dt_mesano_ref_p, dt_final_p),
					'A',
					clock_timestamp(),
					nm_usuario_p,
					cd_convenio_p,
					dt_inicial_p,
					dt_final_p,
					ie_tipo_data_p,
					null,
					null,
					cd_condicao_pagamento_p,
					coalesce(dt_base_vencto_p,clock_timestamp()),
					nr_seq_tipo_repasse_p,
					ie_tipo_convenio_p,
					ds_observacao_p);		
			end if;
		end if;
		
		if (coalesce(ie_copiar_terceiro_regra_p,'N') = 'S') and (coalesce(nr_repasse_terceiro_p,0) > 0) then
				
			CALL COPIAR_REPASSE_TERCEIRO_REGRA(nr_repasse_terceiro_p,nr_repasse_terceiro_w,nm_usuario_p);
		end if;
		
		if (nr_seq_tipo_repasse_p IS NOT NULL AND nr_seq_tipo_repasse_p::text <> '') and (coalesce(nr_repasse_terceiro_w,0) > 0) then
			CALL inserir_regra_tipo_repasse(nr_seq_tipo_repasse_p, nr_repasse_terceiro_w,nm_usuario_p);
		end if;
		
		if (ie_gerar_repasse_p = 'S') and (coalesce(nr_repasse_terceiro_w, 0) > 0) then
				
			ie_estornado_w := obter_param_usuario(89, 30, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_estornado_w);
			CALL Gerar_Conta_Repasse(nr_repasse_terceiro_w, ie_tipo_convenio_p ,nm_usuario_p, coalesce(ie_estornado_w, 'N'), ie_gerar_rep_perc_saldo_p,ie_valor_lib_zerado_p, nr_seq_protocolo_p, ie_tipo_atendimento_p,ds_filtro_convenios_p,ds_filtro_procedimentos_p,cd_area_proc_p,cd_espec_proc_p,cd_grupo_proc_p,ds_filtro_medico_p,ds_filtro_proc_p, ds_observacao_p);
		end if;
		
		if (coalesce(ie_repasse_especial_p,'N')	= 'S') and (coalesce(nr_repasse_terceiro_w, 0) > 0) then
			CALL Gerar_repasse_especial(nr_repasse_terceiro_w,nm_usuario_p,0,null);
		end if;
		
		
		
		if (ie_gerar_repasse_p = 'N') and (ie_excluir_rep_zerado_w = 'S') then
			delete	from repasse_terceiro a
			where	not exists (SELECT	1
				from	procedimento_repasse x
				where	x.nr_repasse_terceiro	= a.nr_repasse_terceiro
				
union

				SELECT	1
				from	material_repasse x
				where	x.nr_repasse_terceiro	= a.nr_repasse_terceiro
				
union

				select	1
				from	repasse_terceiro_item x
				where	x.nr_repasse_terceiro	= a.nr_repasse_terceiro)
			and	a.nr_repasse_terceiro	= nr_repasse_terceiro_w;
		end if;
		
		/* ahoffelder - 11/02/2011 - esse comando é necessário pq na procedure GERAR_CONTA_REPASSE o repasse pode ser deletado */

		select	count(*)
		into STRICT	qt_cont_w
		from	repasse_terceiro a
		where	nr_repasse_terceiro	= nr_repasse_terceiro_w;
		
		ie_gerar_tributos_w := obter_param_usuario(89, 28, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_tributos_w);

		if (coalesce(qt_cont_w,0) > 0) then
			
			if (coalesce(ie_interv_prod_p,'N') = 'S') then
				CALL gerar_repasse_interv_producao(nr_repasse_terceiro_w,nm_usuario_p);
			end if;
			
			select	obter_valor_repasse(a.nr_repasse_terceiro,'L')
			into STRICT	vl_repasse_w
			from	repasse_terceiro a
			where	a.nr_repasse_terceiro	= nr_repasse_terceiro_w;

			if (coalesce(vl_repasse_w,0) <> 0) then

				if (ie_acao_p in (1, 2, 3, 4)) then
					CALL Gerar_Venc_Repasse(nr_repasse_terceiro_w,ie_gerar_tributos_w,nm_usuario_p,'N');
				end if;

				if (ie_acao_p in (2, 3, 4)) then
					CALL Altera_Status_Repasse_Terceiro(nr_repasse_terceiro_w,nm_usuario_p,'N');
					CALL gerar_eventos_repasse(nr_repasse_terceiro_w,'RF',nm_usuario_p,cd_estabelecimento_p);
				end if;

				if (ie_acao_p in (3, 4)) then
					if (coalesce(cd_condicao_pagamento_p::text, '') = '') then
						/* 191468 = Antes de aprovar o repasse é necessário informar a condição de pagamento! */

						CALL wheb_mensagem_pck.exibir_mensagem_abort(191468);
					end if;

					CALL Aprovar_Repasse_Terceiro(nr_repasse_terceiro_w,nm_usuario_p,clock_timestamp(),'N');
				end if;

				if (ie_acao_p = 4) then
					CALL Gerar_Titulo_Pagar_Repasse(nr_repasse_terceiro_w,nm_usuario_p,null);
				end if;
				
				if (obter_param_usuario_logado(89,135)  <> 'N' and (nr_repasse_terceiro_w IS NOT NULL AND nr_repasse_terceiro_w::text <> '')) then
					CALL VINCULAR_ADIANT_TIT_REPASSE(
						nr_repasse_terceiro_w,
						nm_usuario_p,
						cd_estabelecimento_p );
				end if;

			end if;

		end if;

	end if;

end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_repasse_terceiro (dt_inicial_p timestamp, dt_final_p timestamp, cd_condicao_pagamento_p bigint, cd_estabelecimento_p bigint, ie_tipo_data_p bigint, ie_tipo_convenio_p bigint, ie_gerar_repasse_p text, nm_usuario_p text, cd_convenio_p bigint, dt_mesano_ref_p timestamp, ie_tipo_pessoa_p text, ie_ignorar_periodo_p text, dt_base_vencto_p timestamp, ie_acao_p bigint, ie_gerar_rep_perc_saldo_p text, ie_valor_lib_zerado_p text, ie_terceiro_vl_lib_zerado_p text, nr_seq_protocolo_p bigint, nr_seq_tipo_repasse_p bigint, nr_repasse_terceiro_p bigint, ie_copiar_terceiro_regra_p text, ie_tipo_atendimento_p bigint, ds_filtro_convenios_p text, ds_filtro_procedimentos_p text, ie_ignorar_repasse_aberto_p text, ds_observacao_p text, ds_filtro_medico_p text, ds_filtro_proc_p text, cd_area_proc_p bigint, cd_espec_proc_p bigint, cd_grupo_proc_p bigint, ie_repasse_especial_p text, ie_interv_prod_p text) FROM PUBLIC;

