-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_ordem_servico_v50 ( nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, cd_unimed_exec_p text, nr_versao_ptu_p text, nr_seq_ordem_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Gerar a transação de Ordem de Serviço do PTU, via SCS. 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção:Performance. 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
cd_unimed_beneficiario_w		ptu_requisicao_ordem_serv.cd_unimed_beneficiario%type;
cd_unimed_solicitante_w			ptu_requisicao_ordem_serv.cd_unimed_solicitante%type;
cd_carteirinha_w			varchar(17);
nr_seq_controle_exec_w			ptu_controle_execucao.nr_sequencia%type;
qt_ordem_w        		integer;


BEGIN 
 
begin 
	select	cd_unimed_beneficiario, 
		cd_unimed_solicitante, 
		pls_obter_dados_segurado(nr_seq_segurado, 'C') 
	into STRICT	cd_unimed_beneficiario_w, 
		cd_unimed_solicitante_w, 
		cd_carteirinha_w 
	from	ptu_requisicao_ordem_serv 
	where	nr_sequencia	= nr_seq_ordem_p;
exception 
when others then 
	cd_unimed_beneficiario_w	:= null;
	cd_unimed_solicitante_w		:= null;
end;
 
select count(1) 
into STRICT  qt_ordem_w 
from  ptu_requisicao_ordem_serv 
where nr_sequencia = nr_seq_ordem_p 
and  (nr_transacao_solicitante IS NOT NULL AND nr_transacao_solicitante::text <> '');
 
if (qt_ordem_w	= 0) then 
	select	nextval('ptu_controle_execucao_seq') 
	into STRICT	nr_seq_controle_exec_w 
	;
 
	insert	into ptu_controle_execucao(nr_sequencia, dt_atualizacao, nm_usuario, 
		 nr_seq_pedido_compl, nr_seq_pedido_aut, nm_usuario_nrec, 
		 dt_atualizacao_nrec, nr_seq_ordem_serv) 
	values (nr_seq_controle_exec_w, clock_timestamp(), nm_usuario_p, 
		 null, null, nm_usuario_p, 
		 clock_timestamp(), nr_seq_ordem_p);
 
	-- Se a operadora de origem do beneficiário for igual a operadora solicitante da ordem de serviço, é caracterizada uma transação ponto-a-ponto 
	if (cd_unimed_beneficiario_w	= cd_unimed_solicitante_w) then 
		update	ptu_requisicao_ordem_serv 
		set	nr_transacao_solicitante	= nr_seq_controle_exec_w, 
			nr_seq_origem			= nr_seq_controle_exec_w, 
			cd_unimed			= substr(cd_carteirinha_w,1,4), 
			cd_usuario_plano		= substr(cd_carteirinha_w,5,17) 
		where	nr_sequencia			= nr_seq_ordem_p;
	-- Se a operadora de origem do beneficiário for diferente da operadora solicitante da ordem de serviço, é caracterizada uma Triangulação 
	elsif (cd_unimed_beneficiario_w	<> cd_unimed_solicitante_w) then 
		update	ptu_requisicao_ordem_serv 
		set		nr_transacao_solicitante	= nr_seq_controle_exec_w, 
				nr_seq_origem			 = NULL, 
				cd_unimed			= substr(cd_carteirinha_w,1,4), 
				cd_usuario_plano		= substr(cd_carteirinha_w,5,17) 
		where	nr_sequencia				= nr_seq_ordem_p;
	end if;
else 
	update	ptu_requisicao_ordem_serv 
	set	dt_atualizacao	= clock_timestamp(), 
		nm_usuario	= nm_usuario_p 
	where 	nr_sequencia 	= nr_seq_ordem_p 
	and  	(nr_transacao_solicitante IS NOT NULL AND nr_transacao_solicitante::text <> '');
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_ordem_servico_v50 ( nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, cd_unimed_exec_p text, nr_versao_ptu_p text, nr_seq_ordem_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

