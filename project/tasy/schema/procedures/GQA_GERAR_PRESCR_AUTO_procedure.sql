-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gqa_gerar_prescr_auto (nr_seq_etapa_pac_p bigint ,nr_atendimento_p bigint ,nm_usuario_p text ,ie_liberar_p text DEFAULT 'S',nr_prescricao_p INOUT bigint  DEFAULT NULL,nr_prescricao_pa_p INOUT bigint  DEFAULT NULL,ds_erro_p INOUT text DEFAULT NULL) AS $body$
DECLARE

  ie_estender_validade_w  varchar(5);
  qt_horas_max_extensao_w bigint;
  cd_protocolo_w          bigint;
  nr_seq_protocolo_w      bigint;
  cd_pessoa_fisica_w      bigint;
  cd_medico_resp_w        bigint;
  dt_prim_hor_prescr_w    timestamp;
  nr_horas_validade_w     integer := 0;
  nr_prescricao_w         bigint := 0;
  ds_erro_w               varchar(2000);
  ie_utilizado_pa_w       varchar(1) := 'N';
  ie_item_inconsistente_w varchar(1);


BEGIN
  ie_estender_validade_w := obter_param_usuario(924, 249, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_estender_validade_w);
  qt_horas_max_extensao_w := obter_param_usuario(924, 154, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, qt_horas_max_extensao_w);

  SELECT a.cd_protocolo
        ,a.nr_seq_protocolo
    INTO STRICT cd_protocolo_w
        ,nr_seq_protocolo_w
    FROM gqa_acao                a
        ,gqa_protocolo_etapa_pac b
   WHERE a.nr_sequencia = b.nr_seq_acao
     AND b.nr_sequencia = nr_seq_etapa_pac_p;

  SELECT MAX(nr_sequencia)
    INTO STRICT nr_seq_protocolo_w
    FROM protocolo_medicacao
   WHERE ie_situacao = 'A'
     AND cd_protocolo = cd_protocolo_w
     AND nr_seq_interna = nr_seq_protocolo_w;

  IF (nr_seq_protocolo_w >= 0 AND cd_protocolo_w >= 0) THEN
    SELECT t.cd_pessoa_fisica
          ,t.cd_medico_resp
      INTO STRICT cd_pessoa_fisica_w
          ,cd_medico_resp_w
      FROM atendimento_paciente t
     WHERE t.nr_atendimento = nr_atendimento_p;

    dt_prim_hor_prescr_w := to_date('30/12/1899 ' ||
                                    to_char(clock_timestamp(), 'hh24:mi') || ':00'
                                   ,'dd/mm/yyyy hh24:mi:ss');

    nr_horas_validade_w := obter_horas_validade_prescr(dt_prim_hor_prescr_w
                                                      ,nr_atendimento_p
                                                      ,ie_estender_validade_w
                                                      ,'A'
                                                      ,clock_timestamp()
                                                      ,NULL);

    IF (qt_horas_max_extensao_w > 0) AND (nr_horas_validade_w > 0) AND (nr_horas_validade_w > qt_horas_max_extensao_w) THEN
      nr_horas_validade_w := obter_horas_validade_prescr(dt_prim_hor_prescr_w
                                                        ,nr_atendimento_p
                                                        ,'N'
                                                        ,'A'
                                                        ,clock_timestamp()
                                                        ,NULL);
    END IF;

    IF (nr_prescricao_p > 0) THEN
      nr_prescricao_w := nr_prescricao_p;
    END IF;

    nr_prescricao_w := gerar_prescricao_protocolo(cd_pessoa_fisica_w, cd_medico_resp_w, nr_atendimento_p, cd_protocolo_w, nr_seq_protocolo_w, 0, 0, nr_horas_validade_w, nr_prescricao_w, NULL, NULL, to_char(clock_timestamp(), 'hh24:mi'), clock_timestamp(), NULL, 1, 'N', nm_usuario_p, NULL, NULL, 'N', NULL);

    IF (nr_prescricao_p = 0 AND nr_prescricao_w > 0) THEN
      CALL gqa_atualizar_campo_etapa(nr_seq_etapa_pac_p
                               ,nr_prescricao_w);
      nr_prescricao_p := nr_prescricao_w;
    END IF;

    IF ie_liberar_p = 'S' THEN
      BEGIN
        ds_erro_w := liberar_prescricao(nr_prescricao_p, nr_atendimento_p, 'S', coalesce(obter_perfil_ativo, 0), nm_usuario_p, 'S', ds_erro_w);

        CALL liberar_prescricao_farmacia(nr_prescricao_p, 0, nm_usuario_p, 'N');
      EXCEPTION
        WHEN OTHERS THEN
          ds_erro_p := SQLERRM;
      END;
    END IF;

    IF (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') THEN
      ds_erro_p := ds_erro_w;
    END IF;

    SELECT coalesce(MAX(ie_utilizado_pa), 'N')
      INTO STRICT ie_utilizado_pa_w
      FROM tipo_protocolo
     WHERE cd_tipo_protocolo =
           (SELECT MAX(cd_tipo_protocolo)
              FROM protocolo
             WHERE cd_protocolo = cd_protocolo_w);

    IF (ie_utilizado_pa_w = 'S') THEN
      SELECT * FROM gerar_protocolo_pa(cd_protocolo_w, nr_seq_protocolo_w, nr_atendimento_p, 'N', 'S', 'S', 'S', 'S', 'S', 'S', 'S', 'S', nm_usuario_p, nr_prescricao_pa_p, ie_item_inconsistente_w) INTO STRICT nr_prescricao_pa_p, ie_item_inconsistente_w;
    END IF;

  END IF;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gqa_gerar_prescr_auto (nr_seq_etapa_pac_p bigint ,nr_atendimento_p bigint ,nm_usuario_p text ,ie_liberar_p text DEFAULT 'S',nr_prescricao_p INOUT bigint  DEFAULT NULL,nr_prescricao_pa_p INOUT bigint  DEFAULT NULL,ds_erro_p INOUT text DEFAULT NULL) FROM PUBLIC;

