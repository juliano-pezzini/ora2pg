-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_participante_proc ( nr_cirurgia_p bigint, cd_estabelecimento_p bigint, nr_sequencia_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_conta_p timestamp, nm_usuario_p text, ie_tipo_atendimento_p bigint, cd_procedencia_p bigint) AS $body$
DECLARE


dt_atualizacao_w			timestamp 			:= clock_timestamp();
cd_funcao_w			varchar(10);
cd_pessoa_fisica_w		varchar(10);
nr_sequencia_w			bigint;
nr_seq_partic_w			bigint;
ie_emite_conta_w           		varchar(01);
cd_especialidade_w		integer;
ie_partic_cirurgia_w			smallint;
qt_porte_atual_w			smallint := 0;
qt_maior_porte_w			smallint := 0;

cd_estrutura_w			integer 		:= 0;
cd_estrutura_honor_w		integer 		:= 0;
cd_edicao_amb_w			integer;
ie_anestesista_w			varchar(2)		:= 'N';
ie_consiste_anest_porte_w		varchar(2);
ie_doc_executor_w			smallint;
nr_seq_regra_w			bigint	:= null;
ie_responsavel_credito_w		varchar(5);
cd_cgc_prestador_w		varchar(14);
cd_cbo_w			varchar(6);
ie_consiste_anest_port_w		varchar(1);

c01 CURSOR FOR
SELECT		a.ie_funcao,
		a.cd_pessoa_fisica,
		a.nr_sequencia + 1000
from		cirurgia_participante a
where		a.nr_cirurgia 		= nr_cirurgia_p
  and (ie_partic_cirurgia_w	= 0 or qt_maior_porte_w < qt_porte_atual_w)
order by ie_funcao;


BEGIN

select coalesce(max(vl_parametro_padrao),'N')
into STRICT   ie_emite_conta_w
from   funcao_parametro
where  cd_funcao = 81
  and  nr_sequencia = 18;

select	coalesce(max(obter_valor_conv_estab(cd_convenio, cd_estabelecimento_p, 'IE_PARTIC_CIRURGIA')), 0)
into STRICT	ie_partic_cirurgia_w
from	convenio
where	cd_convenio = cd_convenio_p;

select	coalesce(max(ie_consiste_anest_porte),'N')
into STRICT	ie_consiste_anest_porte_w
from	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_p;

if (ie_partic_cirurgia_w > 0) then
	select	coalesce(max(qt_porte_anestesico),0)
	into STRICT	qt_porte_atual_w
	from	procedimento_paciente
	where	nr_sequencia = nr_sequencia_p;

	select	coalesce(max(qt_porte_anestesico),0)
	into STRICT	qt_maior_porte_w
	from	procedimento_paciente
	where	nr_cirurgia	= nr_cirurgia_p
	  and	nr_sequencia	<> nr_sequencia_p;
end if;

open c01;
loop
fetch c01 into
	cd_funcao_w,
	cd_pessoa_fisica_w,
	nr_seq_partic_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	if (ie_partic_cirurgia_w = 1) and (qt_maior_porte_w < qt_porte_atual_w) then
		delete FROM procedimento_participante
		where ie_funcao		= cd_funcao_w
		  and nr_sequencia	in (	SELECT nr_sequencia
						from procedimento_paciente
						where nr_cirurgia = nr_cirurgia_p
						  and qt_porte_anestesico = qt_maior_porte_w);
	end if;
	if (obter_regra_funcao_partic(
			cd_estabelecimento_p,
			cd_convenio_p,
			cd_categoria_p,
			cd_procedimento_p,
			ie_origem_proced_p,
			dt_conta_p,
			nr_sequencia_p,
			cd_funcao_w) = 'S') then
		begin
		select 	min(nr_seq_partic)
		into STRICT	nr_seq_partic_w
		from 	procedimento_participante
		where	nr_sequencia 		= nr_sequencia_p
		and	ie_funcao		= cd_funcao_w
		and	cd_pessoa_fisica 	= cd_pessoa_fisica_w;
		exception
		when no_data_found then
			begin
			select obter_especialidade_medico(cd_pessoa_fisica_w,'C')
			into STRICT cd_especialidade_w
			;


			begin
			if (ie_origem_proced_p not in (2,3))	then
				begin
				cd_estrutura_w	:= 0;
				SELECT * FROM obter_estrut_conta_proc(
						cd_convenio_p, cd_procedimento_p, ie_origem_proced_p, null, cd_pessoa_fisica_w, null, nr_sequencia_p, 0, 0, cd_estabelecimento_p, cd_especialidade_w, cd_categoria_p, dt_conta_p, null, cd_estrutura_w, cd_estrutura_honor_w) INTO STRICT cd_estrutura_w, cd_estrutura_honor_w;

				if (cd_estrutura_honor_w	> 0) then
					ie_emite_conta_w	:= cd_estrutura_honor_w;
				end if;
				end;
			end if;
			exception
				when others then
					ie_emite_conta_w	:= ie_emite_conta_w;
			end;

			select	coalesce(max(cd_edicao_amb),0)
			into STRICT	cd_edicao_amb_w
			from	procedimento_paciente
			where	nr_sequencia	= nr_sequencia_p;

			select	coalesce(max(ie_anestesista),'N')
			into STRICT	ie_anestesista_w
			from	funcao_medico
			where	to_char(cd_funcao)	= cd_funcao_w;

			if (cd_edicao_amb_w		<> 0 ) and (ie_anestesista_w		= 'S') and (ie_consiste_anest_porte_w	= 'S') and (somente_numero(obter_dados_preco_proc(	cd_estabelecimento_p,
									cd_convenio_p,
									cd_categoria_p,
									cd_edicao_amb_w,
									cd_procedimento_p,
									ie_origem_proced_p,
									dt_conta_p,
									'P')) = 0) then
				/*r.aise_application_error(-20011,'Não é permitido o lançamento de anestesistas para procedimentos sem porte anestésico.'||
							' Verifique os parâmetros do faturamento. #@#@');*/
				CALL wheb_mensagem_pck.exibir_mensagem_abort(263390);
			end if;
			if (cd_edicao_amb_w		<> 0 ) and (ie_anestesista_w		= 'S') and (ie_consiste_anest_porte_w	= 'P') and (coalesce(obter_dados_preco_proc(	cd_estabelecimento_p,
									cd_convenio_p,
									cd_categoria_p,
									cd_edicao_amb_w,
									cd_procedimento_p,
									ie_origem_proced_p,
									dt_conta_p,
									'PN')::text, '') = '') then
				/*r.aise_application_error(-20011,'Não é permitido o lançamento de anestesistas para procedimentos sem porte anestésico.'||
							' Verifique os parâmetros do faturamento. #@#@');*/
				CALL wheb_mensagem_pck.exibir_mensagem_abort(263390);

			end if;

			if (cd_edicao_amb_w		<> 0 ) and (ie_anestesista_w		= 'S') and (ie_consiste_anest_porte_w	= 'R') then

				select	coalesce(max(ie_consiste_anest_port),'N')
				into STRICT	ie_consiste_anest_port_w
				from	regra_tipo_atend_porte
				where	coalesce(ie_tipo_atendimento, ie_tipo_atendimento_p) = ie_tipo_atendimento_p
				and	coalesce(cd_procedencia, cd_procedencia_p)		= cd_procedencia_p;

				if (ie_consiste_anest_port_w	= 'S') and (somente_numero(obter_dados_preco_proc(	cd_estabelecimento_p,
										cd_convenio_p,
										cd_categoria_p,
										cd_edicao_amb_w,
										cd_procedimento_p,
										ie_origem_proced_p,
										dt_conta_p,
										'P')) = 0) then
					/*r.aise_application_error(-20011,'Não é permitido o lançamento de anestesistas para procedimentos sem porte anestésico.'||
								' Verifique os parâmetros do faturamento e Regra consiste lancto anestesista proc sem porte. #@#@');*/
					CALL wheb_mensagem_pck.exibir_mensagem_abort(263391);
				end if;
				if (ie_consiste_anest_port_w	= 'P') and (coalesce(obter_dados_preco_proc(	cd_estabelecimento_p,
										cd_convenio_p,
										cd_categoria_p,
										cd_edicao_amb_w,
										cd_procedimento_p,
										ie_origem_proced_p,
										dt_conta_p,
										'PN')::text, '') = '') then
					/*r.aise_application_error(-20011,'Não é permitido o lançamento de anestesistas para procedimentos sem porte anestésico.'||
								' Verifique os parâmetros do faturamento e Regra consiste lancto anestesista proc sem porte. #@#@');*/
					CALL wheb_mensagem_pck.exibir_mensagem_abort(263391);

				end if;

			end if;

			if (ie_origem_proced_p = 7) and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
				begin

				select	coalesce(max(ie_responsavel_credito),''),
					coalesce(max(cd_cgc_prestador),'')
				into STRICT	ie_responsavel_credito_w,
					cd_cgc_prestador_w
				from	procedimento_paciente
				where	nr_sequencia	= nr_sequencia_p;

				cd_cbo_w := sus_obter_cbo_medico(cd_pessoa_fisica_w, cd_procedimento_p, dt_conta_p, null);

				SELECT * FROM sus_atualiza_doc_exec(cd_procedimento_p, ie_origem_proced_p, cd_pessoa_fisica_w, cd_pessoa_fisica_w, cd_cgc_prestador_w, cd_estabelecimento_p, cd_convenio_p, ie_responsavel_credito_w, cd_funcao_w, cd_cbo_w, ie_doc_executor_w, nr_seq_regra_w) INTO STRICT ie_doc_executor_w, nr_seq_regra_w;

				end;
			end if;

			insert into procedimento_participante(nr_sequencia, nr_seq_partic, ie_funcao, dt_atualizacao,
				nm_usuario,cd_pessoa_fisica, cd_cgc, ie_valor_informado,
				ie_emite_conta, vl_participante, vl_conta, nr_lote_contabil,
				nr_conta_medico, cd_especialidade, nr_cirurgia,cd_cbo,ie_doc_executor,ie_participou_sus)
			values (nr_sequencia_p, nr_seq_partic_w, cd_funcao_w, dt_atualizacao_w,
				nm_usuario_p, cd_pessoa_fisica_w, null, 'N',
				ie_emite_conta_w, 0, 0, 0, 0, cd_especialidade_w, nr_cirurgia_p,cd_cbo_w,ie_doc_executor_w,'S');
			exception
			when others then
				nr_seq_partic_w	:= nr_seq_partic_w;
			end;
		end;
	end if;
	end;
end loop;
close c01;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_participante_proc ( nr_cirurgia_p bigint, cd_estabelecimento_p bigint, nr_sequencia_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_conta_p timestamp, nm_usuario_p text, ie_tipo_atendimento_p bigint, cd_procedencia_p bigint) FROM PUBLIC;

