-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_transf_mapa (cd_perfil_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_interno_de_p bigint, nr_seq_interno_para_p bigint, ds_out_p INOUT text, nr_atendimento_p bigint default null, ie_transf_acomp_p text default 'N', ie_consiste_sexo_acomp_p text default 'N', nr_seq_interno_para_acomp_p bigint default null, nr_seq_gestao_vaga_p bigint default null, ie_out_warning_p INOUT text DEFAULT NULL) AS $body$
DECLARE

nr_atendimento_w            unidade_atendimento.nr_atendimento%type;
cd_setor_atendimento_para_w         unidade_atendimento.cd_setor_atendimento%type;
cd_unidade_basica_para_w        unidade_atendimento.cd_unidade_basica%type;
cd_unidade_compl_para_w         unidade_atendimento.cd_unidade_compl%type;
cd_setor_atendimento_de_w       unidade_atendimento.cd_setor_atendimento%type;
cd_unidade_basica_de_w          unidade_atendimento.cd_unidade_basica%type;
cd_unidade_compl_de_w           unidade_atendimento.cd_unidade_compl%type;
cd_tipo_acomodacao_w            unidade_atendimento.cd_tipo_acomodacao%type;
nr_acompanhante_w           atend_categoria_convenio.nr_acompanhante%type;
cd_paciente_reserva_w           atendimento_acompanhante.cd_pessoa_fisica%type;
nm_paciente_reserva_w           atendimento_acompanhante.nm_acompanhante%type;
-- Params
ie_transf_acomp_w               varchar(1);
ie_consist_sexo_pac_w           varchar(1);
ie_aguardando_hig_transf_w      varchar(1);
ie_considerar_leito_rn_w        varchar(1);
ie_new_clinical_panorama_w        varchar(1);
ie_alojamento_w             varchar(1);
ie_sem_acomodacao_w         varchar(1);
nr_acompanhante_www         bigint;
nr_seq_interno_w            unidade_atendimento.nr_seq_interno%type;
cd_setor_atendimento_de_ww      unidade_atendimento.cd_setor_atendimento%type;
cd_unidade_basica_de_ww         unidade_atendimento.cd_unidade_basica%type;
C01 CURSOR(cd_setor_atendimento_p bigint, cd_unidade_basica_p text) FOR
    SELECT  nr_seq_interno
    from    unidade_atendimento
    where   cd_setor_atendimento    = cd_setor_atendimento_p
    and cd_unidade_basica   = cd_unidade_basica_p;
C02 CURSOR(cd_setor_atendimento_p bigint, cd_unidade_basica_p text) FOR
    SELECT  cd_setor_atendimento,
        cd_unidade_basica,
        cd_unidade_compl,
        nr_seq_interno
    from UNIDADE_ATENDIMENTO
    where   cd_setor_atendimento = cd_setor_atendimento_p
    and cd_unidade_basica = cd_unidade_basica_p
    and coalesce(ie_situacao, 'A') = 'A'
    and coalesce(ie_bloqueio_transf,'N') = 'S'
    and ie_status_unidade = 'I';
BEGIN
ie_out_warning_p := 'N';
ie_transf_acomp_w := obter_Param_Usuario(44, 122, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_transf_acomp_w);
ie_consist_sexo_pac_w := obter_Param_Usuario(44, 220, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_consist_sexo_pac_w);
ie_aguardando_hig_transf_w := obter_Param_Usuario(44, 202, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_aguardando_hig_transf_w);
ie_considerar_leito_rn_w := obter_Param_Usuario(44, 229, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_considerar_leito_rn_w);
ie_new_clinical_panorama_w := obter_Param_Usuario(338, 12, cd_perfil_p, nm_usuario_p, cd_estabelecimento_p, ie_new_clinical_panorama_w);
if (coalesce(nr_atendimento_p::text, '') = '') then
    select  max(nr_atendimento),
            max(cd_setor_atendimento),
            max(cd_unidade_basica),
            max(cd_unidade_compl)
    into STRICT    nr_atendimento_w,
            cd_setor_atendimento_de_w,
            cd_unidade_basica_de_w,
            cd_unidade_compl_de_w
    from    unidade_atendimento
    where   nr_seq_interno = nr_seq_interno_de_p;
end if;
SELECT  coalesce(MAX(nr_acompanhante), 0)
INTO STRICT    nr_acompanhante_w
FROM    atend_categoria_convenio b
WHERE   b.nr_atendimento = coalesce(nr_atendimento_p, nr_atendimento_w);
select  max(cd_tipo_acomodacao),
        max(cd_setor_atendimento),
        max(cd_unidade_basica),
        max(cd_unidade_compl)
into STRICT    cd_tipo_acomodacao_w,
        cd_setor_atendimento_para_w,
        cd_unidade_basica_para_w,
        cd_unidade_compl_para_w
from    unidade_atendimento
where   nr_seq_interno = nr_seq_interno_para_p;
if ((coalesce(nr_atendimento_p,nr_atendimento_w) IS NOT NULL AND (coalesce(nr_atendimento_p,nr_atendimento_w))::text <> '')) then
    select  CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END
    into STRICT    ie_alojamento_w 
    from    atendimento_acompanhante
    where   ie_alojamento = 'S'
    and     nr_atendimento = nr_atendimento_p;

    select  coalesce(max(x.ie_sem_acomodacao),'N')
    into STRICT    ie_sem_acomodacao_w
    from    unidade_atendimento  a,
        tipo_acomodacao x
    where   a.nr_seq_interno     = nr_seq_interno_para_p
    and a.cd_tipo_acomodacao = x.cd_tipo_acomodacao;

    select  coalesce(max(b.nr_seq_interno),0)
    into STRICT    nr_seq_interno_w
    from    unidade_atendimento b
    where   b.nr_atendimento_acomp = coalesce(nr_atendimento_p, nr_atendimento_w)
    and b.ie_status_unidade    = 'M';

    select  max(cd_setor_atendimento),
        max(cd_unidade_basica)
    into STRICT    cd_setor_atendimento_de_ww,
        cd_unidade_basica_de_ww
    from    unidade_atendimento
    where   nr_seq_interno = nr_seq_interno_de_p;
    if ((ie_consist_sexo_pac_w = 'S') and (obter_se_leito_sexo_pac_pan(cd_setor_atendimento_para_w, cd_unidade_basica_para_w, cd_unidade_compl_para_w, coalesce(nr_atendimento_p,nr_atendimento_w)) = 'N')) then
            ds_out_p:= wheb_mensagem_pck.get_texto(1052116);
            ie_out_warning_p := 'S';
            return;
    end if;
    if ((ie_transf_acomp_w = 'S') and (ie_transf_acomp_p = 'S') and (ie_sem_acomodacao_w = 'N') and (ie_alojamento_w = 'S' and
        Obter_se_leito_livre_acomp(coalesce(nr_atendimento_p, nr_atendimento_w), cd_unidade_basica_para_w, cd_unidade_compl_para_w, cd_setor_atendimento_para_w) = 'N')) then
         ds_out_p:= wheb_mensagem_pck.get_texto(1043245);
        ie_out_warning_p := 'S';
        return;
    else
        CALL ATUALIZAR_CASE_PLANEJADO(nr_atendimento_p,'C',nm_usuario_p,'N');
	
	update	atend_categoria_convenio
	set	dt_inicio_vigencia = clock_timestamp()
	where 	nr_atendimento = nr_atendimento_p
	and 	dt_inicio_vigencia > clock_timestamp();

        CALL GERAR_TRANSFERENCIA_PACIENTE(coalesce(nr_atendimento_p,nr_atendimento_w),
                                     cd_setor_atendimento_para_w,
                                     cd_unidade_basica_para_w,
                                     cd_unidade_compl_para_w,
                                     cd_tipo_acomodacao_w,
                                     nr_acompanhante_w,
                                     null,
                                     null,
                                     nm_usuario_p,
                                     clock_timestamp());

                                         
        
        CALL atualizar_seq_transf_solict(nr_seq_gestao_vaga_p, nr_seq_interno_para_p, 'S');
		if (ie_new_clinical_panorama_w <> 'S') then
			begin
				CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p,nr_seq_interno_de_p,nm_usuario_p);
				CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p,nr_seq_interno_para_p,nm_usuario_p);
				
				for C01_W in C01(cd_setor_atendimento_para_w, cd_unidade_basica_para_w) loop
					CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p, C01_W.nr_seq_interno, nm_usuario_p);
				end loop C01_W;
				
				for C01_W in C01(cd_setor_atendimento_de_ww, cd_unidade_basica_de_ww) loop
					CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p, C01_W.nr_seq_interno, nm_usuario_p);
				end loop C01_W;
				
			exception
				when others then
					null;
			end;
			commit;
		end if;

        if (ie_transf_acomp_p = 'S') then
            if (nr_seq_interno_w > 0) and (ie_sem_acomodacao_w = 'S') then  
               
                CALL wheb_usuario_pck.set_ie_executar_trigger('N');

                update unidade_atendimento
                set ie_status_unidade = 'L', 
                nr_atendimento_acomp  = NULL, 
                cd_paciente_reserva  = NULL, 
                nm_pac_reserva  = NULL
                where nr_atendimento_acomp = coalesce(nr_atendimento_p,nr_atendimento_w);

				if (ie_new_clinical_panorama_w <> 'S') then
					CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p,nr_seq_interno_w,nm_usuario_p);
				end if;

                for C02_W in C02(cd_setor_atendimento_de_ww, cd_unidade_basica_de_ww) loop
                update  unidade_atendimento
                set ie_status_unidade   = 'L',
                    ds_observacao        = NULL,
                    dt_atualizacao      = clock_timestamp(),
                    dt_interdicao        = NULL,
                    nm_usuario      = nm_usuario_p,
                    cd_motivo_interdicao     = NULL,
                    qt_dias_prev_interd  = NULL
                where   cd_setor_atendimento    = C02_W.cd_setor_atendimento
                and cd_unidade_basica   = C02_W.cd_unidade_basica
                and cd_unidade_compl    = C02_W.cd_unidade_compl;
				
                if (ie_new_clinical_panorama_w <> 'S') then
					CALL panorama_leito_pck.ATUALIZAR_W_PAN_LEITO(cd_estabelecimento_p,C02_W.nr_seq_interno,nm_usuario_p);
				end if;
               end loop c02_w;

               if (wheb_usuario_pck.get_ie_executar_trigger = 'N') then
                  CALL wheb_usuario_pck.set_ie_executar_trigger('S');
               end if;

               update   atendimento_acompanhante
               set      dt_saida    = clock_timestamp()
               where    nr_atendimento  = coalesce(nr_atendimento_p,nr_atendimento_w);

               select   coalesce(max(nr_acompanhante),0) + 1,
                    max(cd_pessoa_fisica),
                    max(nm_acompanhante)
               into STRICT     nr_acompanhante_www,
                    cd_paciente_reserva_w,
                    nm_paciente_reserva_w
               from     atendimento_acompanhante
               where    nr_atendimento  = coalesce(nr_atendimento_p,nr_atendimento_w);

               insert into atendimento_acompanhante(
                                 nr_atendimento, 
                                 dt_acompanhante,
                                 nr_acompanhante,
                                 dt_atualizacao, 
                                 nm_usuario, 
                                 cd_pessoa_fisica,
                                 nr_seq_interno,
                                 dt_atualizacao_nrec,
                                 nm_usuario_nrec,
                                 nm_acompanhante,
                                 ie_alojamento)
                    values ( coalesce(nr_atendimento_p,nr_atendimento_w), 
                                clock_timestamp(), 
                                nr_acompanhante_www,
                                clock_timestamp(), 
                                nm_usuario_p, 
                                cd_paciente_reserva_w,
                                nr_seq_interno_para_p,
                                clock_timestamp(),
                                nm_usuario_p,
                                nm_paciente_reserva_w,
                                ie_alojamento_w);
            else
            
               CALL Transf_acompanhantes_paciente(coalesce(nr_atendimento_p,nr_atendimento_w),
                                              cd_setor_atendimento_para_w,
                                              cd_unidade_basica_para_w,
                                              cd_unidade_compl_para_w,
                                              nm_usuario_p,
                                              ie_consiste_sexo_acomp_p,
                                              'S',
                                              nr_seq_interno_para_acomp_p);
            end if;
        end if;
        CALL gerar_ajustes_ap_lote('M', coalesce(nr_atendimento_p,nr_atendimento_w), nm_usuario_p);
        if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
            if  ((ie_aguardando_hig_transf_w = 'S') or
                ((ie_aguardando_hig_transf_w = 'D') and (obter_se_auto_higienizacao(cd_setor_atendimento_para_w,cd_unidade_compl_para_w,cd_unidade_compl_para_w,'S') = 'S'))) then
                CALL alterar_status_leito_transf('G',
                                            nm_usuario_p,
                                            cd_setor_atendimento_de_w,
                                            cd_unidade_basica_de_w,
                                            cd_unidade_compl_de_w);
            end if;
        end if;
        if (ie_considerar_leito_rn_w = 'S') then
            if (coalesce(obter_consistir_se_mae_rn(coalesce(nr_atendimento_p, nr_atendimento_w)), 0) > 0) then
                CALL gerar_transferencia_rn(coalesce(nr_atendimento_p, nr_atendimento_w),
                                       cd_setor_atendimento_para_w,
                                       cd_unidade_basica_para_w,
                                       cd_unidade_compl_para_w,
                                       null,
                                       null,
                                       nm_usuario_p,
                                       clock_timestamp());
            end if;
        end if;
        ds_out_p:= wheb_mensagem_pck.get_texto(802292);
        commit;
    end if;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_transf_mapa (cd_perfil_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_interno_de_p bigint, nr_seq_interno_para_p bigint, ds_out_p INOUT text, nr_atendimento_p bigint default null, ie_transf_acomp_p text default 'N', ie_consiste_sexo_acomp_p text default 'N', nr_seq_interno_para_acomp_p bigint default null, nr_seq_gestao_vaga_p bigint default null, ie_out_warning_p INOUT text DEFAULT NULL) FROM PUBLIC;

