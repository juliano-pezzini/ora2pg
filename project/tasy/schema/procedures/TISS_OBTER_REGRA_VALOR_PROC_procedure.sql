-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tiss_obter_regra_valor_proc (cd_estabelecimento_p bigint, cd_convenio_p bigint, ie_tiss_tipo_guia_p text, cd_cgc_prestador_p text, ie_responsavel_credito_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, vl_medico_p bigint, vl_custo_operacional_p bigint, vl_material_p bigint, vl_procedimento_p INOUT bigint, ie_regra_valor_p INOUT text, qt_material_p bigint, ie_funcao_medico_p text, vl_participante_p bigint, ie_honorario_p text, nr_seq_procedimento_p bigint, cd_plano_convenio_p text, dt_referencia_p timestamp, ie_pacote_p text) AS $body$
DECLARE


vl_retorno_w			double precision;
ie_regra_valor_w		varchar(100);
cd_grupo_proc_w			bigint;
cd_especialidade_w		bigint;
cd_area_procedimento_w		bigint;
nr_seq_proc_pacote_w		bigint;
tx_ajuste_tabela_w		double precision;
vl_procedimento_w		double precision;
tx_proc_criterio_horario_w	double precision;
ie_tipo_atendimento_w		smallint;

c01 CURSOR FOR
SELECT	ie_regra_valor
from	tiss_regra_valor_proc a
where	cd_estabelecimento						= cd_estabelecimento_p
and	cd_convenio							= cd_convenio_p
and	ie_tiss_tipo_guia						= ie_tiss_tipo_guia_p
and	coalesce(cd_cgc_prestador, coalesce(cd_cgc_prestador_p, 'X'))		= coalesce(cd_cgc_prestador_p, 'X')
and	coalesce(ie_responsavel_credito, coalesce(ie_responsavel_credito_p, 'X'))	= coalesce(ie_responsavel_credito_p, 'X')
and	coalesce(cd_area_procedimento, coalesce(cd_area_procedimento_w,0))	= coalesce(cd_area_procedimento_w,0)
and	coalesce(cd_especialidade, coalesce(cd_especialidade_w,0))		= coalesce(cd_especialidade_w,0)
and	coalesce(cd_grupo_proc, coalesce(cd_grupo_proc_w,0))			= coalesce(cd_grupo_proc_w,0)
and	coalesce(cd_procedimento, coalesce(cd_procedimento_p,0))			= coalesce(cd_procedimento_p,0)
and	coalesce(ie_funcao_medico, coalesce(ie_funcao_medico_p,0))		= coalesce(ie_funcao_medico_p,0)
and	coalesce(cd_plano_convenio, coalesce(cd_plano_convenio_p,'X'))		= coalesce(cd_plano_convenio_p,'X')
and	coalesce(ie_tipo_atendimento, coalesce(ie_tipo_atendimento_w,0))		= coalesce(ie_tipo_atendimento_w,0)
and	((coalesce(ie_honorario,'T') = 'H' and coalesce(ie_honorario_p,'N') = 'S') or (coalesce(ie_honorario,'T') = 'N' and coalesce(ie_honorario_p,'N') = 'N') or (coalesce(ie_honorario,'T') = 'T'))
and	((coalesce(ie_pacote, 'T') = 'T') or
	 ((coalesce(ie_pacote, 'T') = 'P') and ((nr_seq_proc_pacote_w = nr_seq_procedimento_p) or (coalesce(ie_pacote_p,'N') = 'S'))) or
	 ((coalesce(ie_pacote, 'T') = 'I') and (nr_seq_proc_pacote_w <> 0) and (nr_seq_proc_pacote_w <> nr_seq_procedimento_p)) or
	 ((coalesce(ie_pacote, 'T') = 'F') and (nr_seq_proc_pacote_w = 0)))
and	coalesce(dt_referencia_p,clock_timestamp()) 	between coalesce(dt_inicio_vigencia,to_date('01/01/1900','dd/mm/yyyy')) and ESTABLISHMENT_TIMEZONE_UTILS.endOfDay(coalesce(dt_fim_vigencia,clock_timestamp() + interval '1 days'))
order	by coalesce(ie_responsavel_credito, 0),
	coalesce(cd_cgc_prestador, 0),
	coalesce(a.cd_procedimento, 0),
	coalesce(a.cd_grupo_proc, 0),
	coalesce(a.cd_especialidade, 0),
	coalesce(a.cd_area_procedimento, 0),
	coalesce(a.ie_funcao_medico,0),
	coalesce(a.cd_plano_convenio,'X'),
	coalesce(dt_inicio_vigencia,to_date('01/01/1900','dd/mm/yyyy')),
	coalesce(ie_tipo_atendimento,0);


BEGIN

select	max(cd_grupo_proc),
	max(cd_especialidade),
	max(cd_area_procedimento)
into STRICT	cd_grupo_proc_w,
	cd_especialidade_w,
	cd_area_procedimento_w
from	estrutura_procedimento_v
where	cd_procedimento		= cd_procedimento_p
and	ie_origem_proced	= ie_origem_proced_p;

select	max(coalesce(a.nr_seq_proc_pacote,0)),	
	max(c.ie_tipo_atendimento)
into STRICT 	nr_seq_proc_pacote_w,
	ie_tipo_atendimento_w
from 	atendimento_paciente c,
	conta_paciente b,
	procedimento_paciente a
where	a.nr_interno_conta	= b.nr_interno_conta
and	b.nr_atendimento	= c.nr_atendimento
and	a.nr_sequencia		= nr_seq_procedimento_p;

vl_retorno_w		:= vl_procedimento_p;

ie_regra_valor_w	:= null;
open c01;
loop
fetch c01 into
	ie_regra_valor_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

if (ie_regra_valor_w = 'P') then
	vl_retorno_w		:= vl_procedimento_p;
elsif (ie_regra_valor_w = 'MCO') then
	vl_retorno_w		:= coalesce(vl_medico_p, 0) + coalesce(vl_custo_operacional_p, 0);
elsif (ie_regra_valor_w = 'MCOM') then
	vl_retorno_w		:= coalesce(vl_medico_p, 0) + coalesce(vl_custo_operacional_p, 0) + coalesce(vl_material_p, 0);
elsif (ie_regra_valor_w = 'MCOMA') then /*lhalves OS 429047 31/03/2012 - Com arredondamento, para os casos em que a diferenca de 0.01 entre o valor total do procedimento (soma de vl_medico+vl_uco_vl_material e 0.01 a mais ou a menos que o valor do procedimento)*/
	if (coalesce(vl_medico_p, 0) = coalesce(vl_participante_p,0)) and (coalesce(ie_honorario_p,'N') = 'S')then /*Nao somar o valor de material se for participante*/
		vl_retorno_w		:= coalesce(vl_medico_p, 0) + coalesce(vl_custo_operacional_p, 0);
	else
		vl_retorno_w		:= coalesce(vl_medico_p, 0) + coalesce(vl_custo_operacional_p, 0) + coalesce(vl_material_p, 0);
	end if;
	if (vl_retorno_w <> vl_procedimento_p) then
		if (vl_procedimento_p = vl_retorno_w - 0.01) then
			vl_retorno_w	:= vl_retorno_w - 0.01;
		elsif (vl_procedimento_p = vl_retorno_w + 0.01) then
			vl_retorno_w	:= vl_retorno_w + 0.01;
		end if;
	end if;	
elsif (ie_regra_valor_w = 'MQT') then
	vl_retorno_w		:= coalesce(vl_material_p,0) * coalesce(qt_material_p,0);
elsif (ie_regra_valor_w = 'Z') then
	vl_retorno_w		:= 0;
elsif (ie_regra_valor_w = 'M') then
	vl_retorno_w		:= vl_medico_p;
elsif (ie_regra_valor_w = 'COMA') then
	vl_retorno_w		:= coalesce(vl_custo_operacional_p,0) + coalesce(vl_material_p,0);
elsif (ie_regra_valor_w = 'MCOP') then
	vl_retorno_w		:= coalesce(vl_medico_p, 0) + coalesce(vl_custo_operacional_p, 0) + coalesce(vl_participante_p,0);
elsif (ie_regra_valor_w = 'MPP') then
	if (nr_seq_procedimento_p IS NOT NULL AND nr_seq_procedimento_p::text <> '') then
		select 	sum(a.vl_procedimento + obter_honor_fora_pacote(a.nr_seq_proc_pacote)) vl_total_pacote
		into STRICT 	vl_retorno_w
		from 	procedimento_paciente a
		where 	a.nr_sequencia		= nr_seq_procedimento_p;
	end if;
elsif (ie_regra_valor_w = 'VPO') then

	select	coalesce(obter_indice_preco_proc(nr_seq_procedimento_p),1)
	into STRICT	tx_ajuste_tabela_w
	;
	
	vl_procedimento_w	:= coalesce(vl_procedimento_p,0);	
	
	if (tx_ajuste_tabela_w <> 1) then
		vl_procedimento_w	:= dividir(vl_procedimento_w,tx_ajuste_tabela_w);	
	end if;		
	
	vl_retorno_w	:= coalesce(vl_procedimento_w,0);
end if;

vl_procedimento_p		:= vl_retorno_w;
ie_regra_valor_p		:= ie_regra_valor_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tiss_obter_regra_valor_proc (cd_estabelecimento_p bigint, cd_convenio_p bigint, ie_tiss_tipo_guia_p text, cd_cgc_prestador_p text, ie_responsavel_credito_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, vl_medico_p bigint, vl_custo_operacional_p bigint, vl_material_p bigint, vl_procedimento_p INOUT bigint, ie_regra_valor_p INOUT text, qt_material_p bigint, ie_funcao_medico_p text, vl_participante_p bigint, ie_honorario_p text, nr_seq_procedimento_p bigint, cd_plano_convenio_p text, dt_referencia_p timestamp, ie_pacote_p text) FROM PUBLIC;

