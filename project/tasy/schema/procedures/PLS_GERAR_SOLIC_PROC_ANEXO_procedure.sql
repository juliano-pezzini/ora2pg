-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_solic_proc_anexo ( nr_seq_lote_anexo_p pls_lote_anexo_aut.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_guia_plano_p pls_guia_plano.nr_sequencia%type, nm_usuario_p text) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Rotina utilizada para atualizar o tipo de anexo nos itens da Guia e Requisição. 
Caso o anexo importado não foi declarado diretamente como item da guia é necessário 
inserir o item novamente nas tabelas de itens 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ x] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
					 
nr_seq_lote_w		pls_lote_anexo_guias_aut.nr_sequencia%type;
ie_tipo_anexo_w		pls_lote_anexo_guias_aut.ie_tipo_anexo%type;
nr_seq_proc_guia_w	pls_guia_plano_proc.nr_sequencia%type;
nr_seq_mat_guia_w	pls_guia_plano_mat.nr_sequencia%type;

 
C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		nr_seq_guia, 
		nr_seq_requisicao, 
		ie_tipo_anexo 
	from	pls_lote_anexo_guias_aut 
	where	nr_seq_lote_anexo = nr_seq_lote_anexo_p;
		
C02 CURSOR(nr_seq_lote_anexo_guia_w 	 pls_lote_anexo_guias_aut.nr_sequencia%type) FOR 
	SELECT ie_origem_proced, 
		cd_procedimento, 
		qt_solicitado, 
		nr_sequencia, 
		cd_tipo_tabela 
	from	pls_lote_anexo_proc_aut  
	where  nr_seq_lote_anexo_guia = nr_seq_lote_anexo_guia_w;
	
C03 CURSOR(nr_seq_lote_anexo_guia_w 	 pls_lote_anexo_guias_aut.nr_sequencia%type) FOR	 
	SELECT nr_seq_material, 
		qt_solicitado, 
		cd_material, 
		nr_sequencia,		 
		vl_unit_material_solic 
	from	pls_lote_anexo_mat_aut  
	where  nr_seq_lote_anexo_guia = nr_seq_lote_anexo_guia_w;

BEGIN 
 
 
if (nr_seq_guia_plano_p IS NOT NULL AND nr_seq_guia_plano_p::text <> '') then 
	 
	--Atualiza os dados no anexo da guia 
	nr_seq_lote_w := pls_gerar_lote_ax_guias_aut(null, nr_seq_lote_anexo_p, null, nm_usuario_p, nr_seq_lote_w);
			   
	for cr_01 in C01 loop 
		begin 
			for cr_02 in C02(cr_01.nr_sequencia) loop 
				begin 
					select	max(nr_sequencia) 
					into STRICT	nr_seq_proc_guia_w 
					from	pls_guia_plano_proc 
					where	nr_seq_guia = cr_01.nr_seq_guia 
					and	coalesce(cd_procedimento, cd_procedimento_imp) = cr_02.cd_procedimento 
					and	ie_origem_proced = cr_02.ie_origem_proced;
					 
					if (coalesce(nr_seq_proc_guia_w::text, '') = '') then 
						 
						select	nextval('pls_guia_plano_proc_seq') 
						into STRICT	nr_seq_proc_guia_w 
						;
					 
						insert	into	pls_guia_plano_proc(nr_sequencia, ie_origem_proced, cd_procedimento, 
											qt_solicitada, ie_status, nr_seq_guia, 
											dt_atualizacao, dt_atualizacao_nrec, nm_usuario, 
											nm_usuario_nrec, ie_tipo_anexo) 
									  values (nr_seq_proc_guia_w, cr_02.ie_origem_proced, cr_02.cd_procedimento, 
											cr_02.qt_solicitado, 'U', cr_01.nr_seq_guia, 
											clock_timestamp(), clock_timestamp(), nm_usuario_p, 
											nm_usuario_p, cr_01.ie_tipo_anexo);
					else 
						update	pls_guia_plano_proc 
						set	ie_tipo_anexo = cr_01.ie_tipo_anexo 
						where	nr_sequencia = nr_seq_proc_guia_w;
					end if;
					 
					update	pls_lote_anexo_proc_aut 
					set	nr_seq_plano_proc = nr_seq_proc_guia_w 
					where	nr_sequencia = cr_02.nr_sequencia;
				end;
			end loop;
		 
			for cr_03 in C03(cr_01.nr_sequencia) loop 
				begin 
					select	max(nr_sequencia) 
					into STRICT	nr_seq_mat_guia_w 
					from	pls_guia_plano_mat 
					where	nr_seq_guia = cr_01.nr_seq_guia 
					and	nr_seq_material = cr_03.nr_seq_material;
					 
					if (coalesce(nr_seq_mat_guia_w::text, '') = '') then 
						select	nextval('pls_guia_plano_mat_seq') 
						into STRICT	nr_seq_mat_guia_w 
						;
					  
						insert	into	pls_guia_plano_mat(nr_sequencia, nr_seq_material, qt_solicitada, 
											ie_status, cd_material_imp ,nr_seq_guia, 
											dt_atualizacao, dt_atualizacao_nrec, nm_usuario, 
											nm_usuario_nrec, ie_tipo_anexo, vl_material, 
											vl_original) 
									  values (nr_seq_mat_guia_w, cr_03.nr_seq_material, cr_03.qt_solicitado, 
											'U', cr_03.cd_material, cr_01.nr_seq_guia, 
											clock_timestamp(), clock_timestamp(), nm_usuario_p, 
											nm_usuario_p, cr_01.ie_tipo_anexo, cr_03.vl_unit_material_solic, 
											cr_03.vl_unit_material_solic);
					else 
						update	pls_guia_plano_mat 
						set	ie_tipo_anexo = cr_01.ie_tipo_anexo 
						where	nr_sequencia = nr_seq_mat_guia_w;
					end if;
					 
					update	pls_lote_anexo_mat_aut 
					set	nr_seq_plano_mat = nr_seq_mat_guia_w 
					where	nr_sequencia = cr_03.nr_sequencia;
				end;
			end loop;
		end;
	end loop;
 
 
	insert into 	pls_diagnostico(cd_doenca, ds_diagnostico, dt_atualizacao, 
					dt_atualizacao_nrec, ie_classificacao, nr_seq_guia, 
					nr_sequencia, nm_usuario, nm_usuario_nrec, 
					ie_classificacao_imp, cd_doenca_imp, ds_diagnostico_imp) 
				(SELECT	cd_doenca, ds_diagnostico, clock_timestamp(), 
					clock_timestamp(), ie_classificacao, nr_seq_guia, 
					nextval('pls_diagnostico_seq'), nm_usuario_p, nm_usuario_p, 
					ie_classificacao, cd_doenca, ds_diagnostico 
				from	pls_lote_anexo_diag_aut a, 
					pls_lote_anexo_guias_aut b 
				where	a.nr_seq_lote_anexo_guia = b.nr_sequencia 
				and	b.nr_seq_lote_anexo = nr_seq_lote_anexo_p 
				and	(a.cd_doenca IS NOT NULL AND a.cd_doenca::text <> ''));
				 
elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then 
	 
	--Atualiza os dados no anexo da requisição 
	nr_seq_lote_w  := pls_gerar_lote_ax_guias_aut( null, nr_seq_lote_anexo_p, null, nm_usuario_p, nr_seq_lote_w );
	 
	for cr_01 in C01 loop 
		begin 
			for cr_02 in C02(cr_01.nr_sequencia) loop 
				begin 
					select	max(nr_sequencia) 
					into STRICT	nr_seq_proc_guia_w 
					from	pls_requisicao_proc 
					where	nr_seq_requisicao	= cr_01.nr_seq_requisicao 
					and	cd_procedimento		= cr_02.cd_procedimento 
					and	ie_origem_proced 	= cr_02.ie_origem_proced;
					 
					if (coalesce(nr_seq_proc_guia_w::text, '') = '') then 
						 
						select	nextval('pls_requisicao_proc_seq') 
						into STRICT	nr_seq_proc_guia_w 
						;
					 
						insert into pls_requisicao_proc( 
								nr_sequencia, ie_origem_proced, cd_procedimento, 
								qt_solicitado, ie_status, nr_seq_requisicao, 
								dt_atualizacao, dt_atualizacao_nrec, nm_usuario, 
								nm_usuario_nrec, ie_tipo_anexo, ie_estagio) 
						  values (nr_seq_proc_guia_w, cr_02.ie_origem_proced, cr_02.cd_procedimento, 
								cr_02.qt_solicitado, 'U', cr_01.nr_seq_requisicao, 
								clock_timestamp(), clock_timestamp(), nm_usuario_p, 
								nm_usuario_p, cr_01.ie_tipo_anexo, 'AE');
					else 
						update	pls_requisicao_proc 
						set	ie_tipo_anexo = cr_01.ie_tipo_anexo 
						where	nr_sequencia = nr_seq_proc_guia_w;
					end if;
					 
					update	pls_lote_anexo_proc_aut 
					set	nr_seq_req_proc = nr_seq_proc_guia_w 
					where	nr_sequencia = cr_02.nr_sequencia;
				end;
			end loop;
		 
			for cr_03 in C03(cr_01.nr_sequencia) loop 
				begin 
					select	max(nr_sequencia) 
					into STRICT	nr_seq_mat_guia_w 
					from	pls_requisicao_mat 
					where	nr_seq_requisicao	= cr_01.nr_seq_requisicao 
					and	nr_seq_material 	= cr_03.nr_seq_material;
					 
					if (coalesce(nr_seq_mat_guia_w::text, '') = '') then 
					 
						select	nextval('pls_requisicao_mat_seq') 
						into STRICT	nr_seq_mat_guia_w 
						;
					  
						insert into pls_requisicao_mat( 
								nr_sequencia, nr_seq_material, qt_solicitado, 
								ie_status, nr_seq_requisicao, ie_estagio, 
								dt_atualizacao, dt_atualizacao_nrec, nm_usuario, 
								nm_usuario_nrec, ie_tipo_anexo) 
						  values (nr_seq_mat_guia_w, cr_03.nr_seq_material, cr_03.qt_solicitado, 
								'U', cr_01.nr_seq_requisicao, 'AE', 
								clock_timestamp(), clock_timestamp(), nm_usuario_p, 
								nm_usuario_p, cr_01.ie_tipo_anexo);
					else 
						update	pls_requisicao_mat 
						set	ie_tipo_anexo = cr_01.ie_tipo_anexo 
						where	nr_sequencia = nr_seq_mat_guia_w;
					end if;
					 
					update	pls_lote_anexo_mat_aut 
					set	nr_seq_req_mat = nr_seq_mat_guia_w 
					where	nr_sequencia = cr_03.nr_sequencia;
				end;
			end loop;
		end;
	end loop;
end if;				
					   
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_solic_proc_anexo ( nr_seq_lote_anexo_p pls_lote_anexo_aut.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_guia_plano_p pls_guia_plano.nr_sequencia%type, nm_usuario_p text) FROM PUBLIC;

