-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mdc_calcular_regra_proc_agrup (nr_seq_episodio_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_existe_regra_w		varchar(1);
nr_seq_tipo_episodio_w		bigint;
ie_passagem_uti_w		varchar(1);
qt_pontuacao_w			bigint;
qt_ponto_escala_w		bigint;
qt_ponto_escala_ww		bigint;
qt_dias_uti_w			bigint;
qt_dia_desmame_w		bigint;
nr_seq_mdc_proc_agrup_w		bigint;
qt_idade_w			integer;


c01 CURSOR FOR
SELECT	*
from	mdc_regra_proc_agrup a
where 	clock_timestamp() between trunc(dt_inicio_vigencia) and trunc(coalesce(dt_fim_vigencia,clock_timestamp() + interval '1 days'))
and	(a.cd_procedimento IS NOT NULL AND a.cd_procedimento::text <> '')
and	coalesce(a.nr_seq_tipo_episodio,coalesce(nr_seq_tipo_episodio_w,0)) = coalesce(nr_seq_tipo_episodio_w,0)
and (coalesce(a.ie_passagem_uti,'N') = 'N' or ie_passagem_uti_w = 'S')
and	qt_idade_w between coalesce(qt_idade_min,0) and coalesce(qt_idade_max,999)
order by qt_minima;

c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	ie_criterio,
	ie_escala
from	mdc_regra_proc_agrup_item
where	nr_seq_regra	= c01_w.nr_sequencia;

c02_w	c02%rowtype;

	procedure gravar_criterios_regra(nr_seq_mdc_proc_agrup_p	bigint,
				ie_criterio_p			text,
				ie_escala_p			text,
				qt_criterio_p			bigint) is
	;
BEGIN

	insert into MDC_PROC_AGRUP_LOG(nr_sequencia,dt_atualizacao,nm_usuario,nr_seq_mdc_proc_agrup,ie_criterio,ie_escala,qt_criterio)
	values (nextval('mdc_proc_agrup_log_seq'), clock_timestamp(), nm_usuario_p, nr_seq_mdc_proc_agrup_p, ie_criterio_p, ie_escala_p, qt_criterio_p);

	end;

begin

begin
select	'S'
into STRICT	ie_existe_regra_w
from	mdc_regra_proc_agrup
where 	clock_timestamp() between trunc(dt_inicio_vigencia) and trunc(coalesce(dt_fim_vigencia,clock_timestamp() + interval '1 days'))  LIMIT 1;
exception
when others then
	ie_existe_regra_w := 'N';
end;

if (ie_existe_regra_w = 'S') then

	--exclui os registros apurados porém não gerados (que não geraram procedimento)
	delete 	from mdc_procedimento_agrup
	where	nr_seq_episodio		= nr_seq_episodio_p
	and	coalesce(nr_seq_proc_pac_medico::text, '') = '';

	select	max(a.nr_seq_tipo_episodio),
		max(somente_numero(Obter_Idade(b.dt_nascimento,clock_timestamp(),'A')))
	into STRICT	nr_seq_tipo_episodio_w,
		qt_idade_w
	from	episodio_paciente a,		
		pessoa_fisica b
	where	a.nr_sequencia		= nr_seq_episodio_p
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica;

	begin
	select	'S'
	into STRICT	ie_passagem_uti_w
	from	atendimento_paciente a,
		atend_paciente_unidade b,
		setor_atendimento c
	where	a.nr_seq_episodio	= nr_seq_episodio_p
	and	a.nr_atendimento	= b.nr_atendimento
	and	b.cd_setor_atendimento	= c.cd_setor_atendimento
	and	coalesce(a.dt_cancelamento::text, '') = ''
	and	c.cd_classif_setor	= '4'  LIMIT 1;
	exception
	when others then
		ie_passagem_uti_w	:= 'N';
	end;
	
	open C01;
	loop
	fetch C01 into
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */

		qt_pontuacao_w 		:= 0;
		qt_ponto_escala_w	:= 0;
		qt_dias_uti_w		:= 0;
		qt_dia_desmame_w	:= 0;
		
		select	nextval('mdc_procedimento_agrup_seq')
		into STRICT	nr_seq_mdc_proc_agrup_w
		;

		insert into mdc_procedimento_agrup(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_episodio,
			nr_seq_regra,
			cd_procedimento,
			ie_origem_proced,
			nr_seq_proc_pac_medico)
		values (nr_seq_mdc_proc_agrup_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_episodio_p,
			c01_w.nr_sequencia,
			c01_w.cd_procedimento,
			c01_w.ie_origem_proced,
			null);			

		open C02;
		loop
		fetch C02 into
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */		

			if (c02_w.ie_criterio = 'PE') and --Pontos escala
				(c02_w.ie_escala IS NOT NULL AND c02_w.ie_escala::text <> '') then

				select	sum(qt_pontos)
				into STRICT	qt_ponto_escala_ww
				from	mdc_episodio_pac_escala
				where	nr_seq_episodio	= nr_seq_episodio_p
				and	ie_escala	= c02_w.ie_escala
				and	(dt_revisao IS NOT NULL AND dt_revisao::text <> '')
				and	coalesce(dt_inativacao::text, '') = '';

				qt_ponto_escala_w := qt_ponto_escala_w + qt_ponto_escala_ww;
				
				gravar_criterios_regra(nr_seq_mdc_proc_agrup_w, c02_w.ie_criterio, c02_w.ie_escala, qt_ponto_escala_ww);
			end if;

			if (c02_w.ie_criterio = 'DUTI') then -- Dias UTI
				select	coalesce(sum(obter_total_dias_intern_uti(a.nr_atendimento)),0)
				into STRICT	qt_dias_uti_w
				from	atendimento_paciente a
				where	a.nr_seq_episodio	= nr_seq_episodio_p
				and	coalesce(a.dt_cancelamento::text, '') = '';
				
				gravar_criterios_regra(nr_seq_mdc_proc_agrup_w, c02_w.ie_criterio, null, qt_dias_uti_w);

			end if;

			if (c02_w.ie_criterio = 'DVENT') then --Dias em processo de desmame ventilatório
				select	trunc(dividir(sum(qt_horas_total),24))
				into STRICT	qt_dia_desmame_w
				from	mdc_episodio_pac_resp_mec
				where	nr_seq_episodio		= nr_seq_episodio_p
				and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
				and	coalesce(dt_inativacao::text, '') = ''
				and	(dt_fim_ventilacao IS NOT NULL AND dt_fim_ventilacao::text <> '')
				and	ie_desmame		= 'S';
				
				gravar_criterios_regra(nr_seq_mdc_proc_agrup_w, c02_w.ie_criterio, null, qt_dia_desmame_w);
			end if;

		end loop;
		close C02;

		qt_pontuacao_w	:= qt_ponto_escala_w + qt_dia_desmame_w;
		if (qt_dias_uti_w > 0) then
			qt_pontuacao_w := qt_pontuacao_w * qt_dias_uti_w; --dias em UTI é sempre multiplicado.
		end if;	

		RAISE NOTICE 'Pontos: % % %', qt_pontuacao_w, c01_w.qt_minima, c01_w.qt_maxima;

		if (qt_pontuacao_w >= c01_w.qt_minima) and (qt_pontuacao_w <= c01_w.qt_maxima) then

			qt_pontuacao_w := 0;
			
			--O procedimento em si será gerado pela MDC_GERAR_PROC_REGRA_AGRUP
		else
			delete	from mdc_procedimento_agrup
			where	nr_sequencia	= nr_seq_mdc_proc_agrup_w;			
		end if;
	end loop;
	close C01;
	
	delete	from	mdc_procedimento_agrup a
	where	a.nr_seq_episodio		= nr_seq_episodio_p
	and	coalesce(a.nr_seq_proc_pac_medico::text, '') = ''
	and	a.nm_usuario			= nm_usuario_p
	and	exists --Verifica se o que será gerado não é o mesmo do que já existe.
		(SELECT	1
		from	procedimento_pac_medico x,
			mdc_procedimento_agrup y
		where	x.nr_seq_episodio		= a.nr_seq_episodio
		and	x.cd_procedimento		= a.cd_procedimento
		and	x.ie_origem_proced		= a.ie_origem_proced
		and	x.nr_sequencia			= y.nr_seq_proc_pac_medico
		and	coalesce(x.dt_inativacao::text, '') = '');

	commit;

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mdc_calcular_regra_proc_agrup (nr_seq_episodio_p bigint, nm_usuario_p text) FROM PUBLIC;

