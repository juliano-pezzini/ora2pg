-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_copiar_proc_regras ( nr_seq_regra_origem_p bigint, nr_seq_regra_destino_p bigint, ie_copiar_proc_origem_p bigint, ie_copiar_proc_destino_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_cobertura_w			varchar(1);
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
cd_grupo_proc_w			bigint;
ie_limitacao_w			varchar(1);
ie_liberado_w			varchar(1);
ie_tipo_guia_w			varchar(2);
cd_doenca_cid_w			varchar(10);
nr_seq_tipo_acomodacao_w	bigint;

nr_seq_grupo_servico_w		bigint;

C00 CURSOR FOR
	SELECT	ie_cobertura,
		cd_procedimento,
		ie_origem_proced,
		cd_area_procedimento,
		cd_especialidade,
		cd_grupo_proc,
		nr_seq_grupo_servico
	from	pls_cobertura_proc
	where	nr_seq_tipo_cobertura = nr_seq_regra_origem_p;

C01 CURSOR FOR
	SELECT	cd_procedimento,
		ie_origem_proced,
		cd_area_procedimento,
		cd_especialidade,
		cd_grupo_proc,
		ie_limitacao,
		cd_doenca_cid,
		ie_tipo_guia
	from	pls_limitacao_proc
	where	nr_seq_tipo_limitacao = nr_seq_regra_origem_p;

C02 CURSOR FOR
	SELECT	ie_tipo_guia,
		nr_seq_tipo_acomodacao,
		cd_procedimento,
		ie_origem_proced,
		cd_area_procedimento,
		cd_especialidade,
		cd_grupo_proc,
		cd_doenca_cid,
		ie_liberado,
		nr_seq_grupo_servico
	from	pls_carencia_proc
	where	nr_seq_tipo_carencia = nr_seq_regra_origem_p;


BEGIN
if (ie_copiar_proc_origem_p = 0) then
	open C00;
	loop
	fetch c00 into
		ie_cobertura_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_area_procedimento_w,
		cd_especialidade_w,
		cd_grupo_proc_w,
		nr_seq_grupo_servico_w;
	EXIT WHEN NOT FOUND; /* apply on C00 */
		begin
		if (ie_copiar_proc_destino_p = 0) then
			insert	into pls_cobertura_proc(nr_sequencia,	dt_atualizacao,	nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_cobertura,
					ie_cobertura, cd_procedimento, ie_origem_proced,
					cd_area_procedimento, cd_especialidade, cd_grupo_proc,
					nr_seq_grupo_servico)
				values (nextval('pls_cobertura_proc_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_destino_p,
					ie_cobertura_w, cd_procedimento_w, ie_origem_proced_w,
					cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w,
					nr_seq_grupo_servico_w);
		elsif (ie_copiar_proc_destino_p = 1) then
			insert	into pls_limitacao_proc(nr_sequencia,	dt_atualizacao,	nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_limitacao,
					ie_limitacao, cd_procedimento, ie_origem_proced,
					cd_area_procedimento, cd_especialidade, cd_grupo_proc)
				values (nextval('pls_limitacao_proc_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_destino_p,
					ie_cobertura_w, cd_procedimento_w, ie_origem_proced_w,
					cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w);
		elsif (ie_copiar_proc_destino_p = 2) then
			insert	into pls_carencia_proc(nr_sequencia,	dt_atualizacao,	nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_carencia,
					ie_liberado, cd_procedimento, ie_origem_proced,
					cd_area_procedimento, cd_especialidade, cd_grupo_proc,
					nr_seq_grupo_servico)
				values (nextval('pls_carencia_proc_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_destino_p,
					ie_cobertura_w, cd_procedimento_w, ie_origem_proced_w,
					cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w,
					nr_seq_grupo_servico_w);
		end if;
		end;
	end loop;
	close c00;

elsif (ie_copiar_proc_origem_p = 1) then
	open C01;
	loop
	fetch c01 into
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_area_procedimento_w,
		cd_especialidade_w,
		cd_grupo_proc_w,
		ie_limitacao_w,
		cd_doenca_cid_w,
		ie_tipo_guia_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if (ie_copiar_proc_destino_p = 0) then
			insert	into pls_cobertura_proc(nr_sequencia,	dt_atualizacao,	nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_cobertura,
					ie_cobertura, cd_procedimento, ie_origem_proced,
					cd_area_procedimento, cd_especialidade,
					cd_grupo_proc)
				values (nextval('pls_cobertura_proc_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_destino_p,
					ie_limitacao_w, cd_procedimento_w, ie_origem_proced_w,
					cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w);
		elsif (ie_copiar_proc_destino_p = 1) then
			insert	into pls_limitacao_proc(nr_sequencia,	dt_atualizacao,	nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_limitacao,
					ie_limitacao, cd_procedimento, ie_origem_proced,
					cd_area_procedimento, cd_especialidade, cd_grupo_proc,
					cd_doenca_cid, ie_tipo_guia)
				values (nextval('pls_limitacao_proc_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_destino_p,
					ie_limitacao_w, cd_procedimento_w, ie_origem_proced_w,
					cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w,
					cd_doenca_cid_w, ie_tipo_guia_w);
		elsif (ie_copiar_proc_destino_p = 2) then
			insert	into pls_carencia_proc(nr_sequencia,	dt_atualizacao,	nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_carencia,
					ie_liberado, cd_procedimento, ie_origem_proced,
					cd_area_procedimento, cd_especialidade, cd_grupo_proc,
					ie_tipo_guia)
				values (nextval('pls_carencia_proc_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_destino_p,
					ie_limitacao_w, cd_procedimento_w, ie_origem_proced_w,
					cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w,
					ie_tipo_guia_w);
		end if;
		end;
	end loop;
	close c01;

elsif (ie_copiar_proc_origem_p = 2) then
	open C02;
	loop
	fetch c02 into
		ie_tipo_guia_w,
		nr_seq_tipo_acomodacao_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		cd_area_procedimento_w,
		cd_especialidade_w,
		cd_grupo_proc_w,
		cd_doenca_cid_w,
		ie_liberado_w,
		nr_seq_grupo_servico_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		if (ie_copiar_proc_destino_p = 0) then
			insert	into pls_cobertura_proc(nr_sequencia,	dt_atualizacao,	nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_cobertura,
					ie_cobertura, cd_procedimento, ie_origem_proced,
					cd_area_procedimento, cd_especialidade, cd_grupo_proc,
					nr_seq_grupo_servico)
				values (nextval('pls_cobertura_proc_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_destino_p,
					ie_liberado_w, cd_procedimento_w, ie_origem_proced_w,
					cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w,
					nr_seq_grupo_servico_w);
		elsif (ie_copiar_proc_destino_p = 1) then
			insert	into pls_limitacao_proc(nr_sequencia,	dt_atualizacao,	nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_limitacao,
					ie_limitacao, cd_procedimento, ie_origem_proced,
					cd_area_procedimento, cd_especialidade, cd_grupo_proc,
					cd_doenca_cid, ie_tipo_guia)
				values (nextval('pls_limitacao_proc_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_destino_p,
					ie_liberado_w, cd_procedimento_w, ie_origem_proced_w,
					cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w,
					cd_doenca_cid_w, ie_tipo_guia_w);
		elsif (ie_copiar_proc_destino_p = 2) then
			insert	into pls_carencia_proc(nr_sequencia,	dt_atualizacao,	nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_tipo_carencia,
					ie_liberado, cd_procedimento, ie_origem_proced,
					cd_area_procedimento, cd_especialidade, cd_grupo_proc,
					ie_tipo_guia, nr_seq_tipo_acomodacao, nr_seq_grupo_servico)
				values (nextval('pls_carencia_proc_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, nr_seq_regra_destino_p,
					ie_liberado_w, cd_procedimento_w, ie_origem_proced_w,
					cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w,
					ie_tipo_guia_w, nr_seq_tipo_acomodacao_w, nr_seq_grupo_servico_w);
		end if;
		end;
	end loop;
	close c02;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_copiar_proc_regras ( nr_seq_regra_origem_p bigint, nr_seq_regra_destino_p bigint, ie_copiar_proc_origem_p bigint, ie_copiar_proc_destino_p bigint, nm_usuario_p text) FROM PUBLIC;

