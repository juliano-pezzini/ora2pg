-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE intpd_recebe_inventario_mat ( nr_sequencia_p bigint, xml_p xml) AS $body$
DECLARE


_ora2pg_r RECORD;
qt_registros_w			bigint;
ie_conversao_w			intpd_eventos_sistema.ie_conversao%type;
nr_seq_sistema_w			intpd_eventos_sistema.nr_seq_sistema%type;
nr_seq_projeto_xml_w		intpd_eventos_sistema.nr_seq_projeto_xml%type;
nr_seq_regra_conv_w		conversao_meio_externo.nr_seq_regra%type;
ie_sistema_externo_w		varchar(15);
inventario_w			inventario%rowtype;
inventario_material_w		inventario_material%rowtype;
reg_integracao_w			gerar_int_padrao.reg_integracao_conv;
nr_inventario_delete_w		inventario_material.nr_sequencia%type;
i				integer;
ds_erro_w			varchar(4000);


c01 CURSOR FOR
SELECT	*
from	xmltable('/STRUCTURE/INVENTORY' passing xml_p columns
	ie_action			varchar(15)	path	'IE_ACTION',
	cd_estabelecimento		varchar(40)	path	'CD_ESTABLISHMENT',
	cd_fornecedor		varchar(40)	path	'CD_SUPPLIER',
	cd_local_estoque		varchar(40)	path	'CD_STOCK_LOCATION',
	ds_observacao		varchar(255)	path	'DS_OBSERVATION',
	dt_atualizacao		varchar(40)	path	'DT_UPDATE',
	dt_bloqueio		varchar(40)	path	'DT_BLOCK',
	dt_inicio			varchar(40)	path	'DT_START',
	ie_consignado		varchar(40)	path	'IE_CONSIGNED',
	nm_usuario		varchar(40)	path	'NM_USER',
	nm_usuario_bloqueio	varchar(40)	path	'NM_USER_BLOCK',
	nr_documento_externo	varchar(255)	path	'NR_EXTERNAL_DOCUMENT',
	qt_max_contagem		varchar(40)	path	'QT_MAXIMUM_NUMBER_COUNTS',
	qt_max_definir		varchar(40)	path	'QT_MAXIMUM_COUNT_DEFINED',
	xml_itens_inventario		xml 	path	'ITEMS');
c01_w	c01%rowtype;

c02 CURSOR FOR
SELECT	*
from	xmltable('/ITEMS/ITEM' passing c01_w.xml_itens_inventario columns
	cd_fornecedor		varchar(40)	path	'CD_SUPPLIER',
	cd_material		varchar(40)	path	'CD_MATERIAL',
	ds_justificativa		varchar(4000)	path	'DS_JUSTIFICATION',
	ds_observacao		varchar(255)	path	'DS_OBSERVATION',
	dt_atualizacao		varchar(40)	path	'DT_UPDATE',
	ie_agrupador		varchar(40)	path	'IE_GROUP_MAKER',
	nm_usuario		varchar(40)	path	'NM_USER');
c02_w	c02%rowtype;


BEGIN

select	coalesce(b.ie_conversao,'I'),
	nr_seq_sistema,
	nr_seq_projeto_xml,
	nr_seq_regra_conv
into STRICT	ie_conversao_w,
	nr_seq_sistema_w,
	nr_seq_projeto_xml_w,
	nr_seq_regra_conv_w
from	intpd_fila_transmissao a,
	intpd_eventos_sistema b
where	a.nr_seq_evento_sistema = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

ie_sistema_externo_w	:=	nr_seq_sistema_w;

reg_integracao_w.nr_seq_fila_transmissao	:=	nr_sequencia_p;
reg_integracao_w.ie_envio_recebe		:=	'R';
reg_integracao_w.ie_sistema_externo		:=	ie_sistema_externo_w;
reg_integracao_w.ie_conversao		:=	ie_conversao_w;
reg_integracao_w.nr_seq_projeto_xml		:=	nr_seq_projeto_xml_w;
reg_integracao_w.nr_seq_regra_conversao	:=	nr_seq_regra_conv_w;

open C01;
loop
fetch C01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	if (c01_w.ie_action = 'DELETE') then

		select	coalesce(max(nr_sequencia),0)
		into STRICT	nr_inventario_delete_w
		from	inventario
		where	nr_documento_externo = c01_w.nr_documento_externo
		and	ie_sistema_origem = ie_sistema_externo_w;


		if (nr_inventario_delete_w > 0) then

			select	dt_bloqueio,
				dt_atualizacao_saldo,
				dt_aprovacao,
				cd_estabelecimento
			into STRICT	inventario_w.dt_bloqueio,
				inventario_w.dt_atualizacao_saldo,
				inventario_w.dt_aprovacao,
				inventario_w.cd_estabelecimento
			from	inventario
			where	nr_sequencia = nr_inventario_delete_w;

			/*Se o invetário não está bloqueado, ele pode ser deletado.*/

			if (coalesce(inventario_w.dt_bloqueio::text, '') = '') then

				delete from inventario_material	where nr_seq_inventario = nr_inventario_delete_w;
				delete from inventario where nr_sequencia = nr_inventario_delete_w;

			else
				begin

				/*Se o inventário está atualizado ou aprovado, não pode ser deletado.*/

				if	((inventario_w.dt_atualizacao_saldo IS NOT NULL AND inventario_w.dt_atualizacao_saldo::text <> '') or (inventario_w.dt_aprovacao IS NOT NULL AND inventario_w.dt_aprovacao::text <> '')) then

					intpd_gravar_log_recebimento(nr_sequencia_p, wheb_mensagem_pck.get_Texto(235097),coalesce(c01_w.nm_usuario,'INTPD'));
					/*Este inventário já possui data de atualização de saldo ou já esta aprovado. Favor verificar.*/

				else
					/*Se o inventário está bloqueado e não atualizado e não aprovado, ele será desbloqueado e deletado.*/

					CALL desbloquear_itens_inventario(nr_inventario_delete_w, inventario_w.cd_estabelecimento, coalesce(c01_w.nm_usuario,'INTPD'));
					delete from inventario_material where nr_seq_inventario = nr_inventario_delete_w;
					delete from inventario where nr_sequencia = nr_inventario_delete_w;
				end if;
				end;
			end if;
		end if;
	else

		begin
		reg_integracao_w.nm_tabela			:=	'INVENTARIO';
		reg_integracao_w.nm_elemento		:=	'INVENTORY';
		reg_integracao_w.nr_seq_visao		:=	25153;

		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_ESTABELECIMENTO', c01_w.cd_estabelecimento, 'S', inventario_w.cd_estabelecimento) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.cd_estabelecimento := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_FORNECEDOR', c01_w.cd_fornecedor, 'S', inventario_w.cd_fornecedor) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.cd_fornecedor := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_LOCAL_ESTOQUE', c01_w.cd_local_estoque, 'S', inventario_w.cd_local_estoque) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.cd_local_estoque := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_OBSERVACAO', c01_w.ds_observacao, 'N', inventario_w.ds_observacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.ds_observacao := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c01_w.dt_atualizacao, 'N', inventario_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_INICIO', c01_w.dt_inicio, 'N', inventario_w.dt_inicio) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.dt_inicio := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_CONSIGNADO', c01_w.ie_consignado, 'N', inventario_w.ie_consignado) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.ie_consignado := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c01_w.nm_usuario, 'N', inventario_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO_BLOQUEIO', c01_w.nm_usuario_bloqueio, 'N', inventario_w.nm_usuario_bloqueio) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.nm_usuario_bloqueio := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NR_DOCUMENTO_EXTERNO', c01_w.nr_documento_externo, 'N', inventario_w.nr_documento_externo) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.nr_documento_externo := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'QT_MAX_CONTAGEM', c01_w.qt_max_contagem, 'N', inventario_w.qt_max_contagem) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.qt_max_contagem := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'QT_MAX_DEFINIR', c01_w.qt_max_definir, 'N', inventario_w.qt_max_definir) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.qt_max_definir := _ora2pg_r.ds_valor_retorno_p;
		SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_SISTEMA_ORIGEM', ie_sistema_externo_w, 'N', inventario_w.ie_sistema_origem) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_w.ie_sistema_origem := _ora2pg_r.ds_valor_retorno_p;
		inventario_w.ie_novo_item_barra		:= 'N';
		inventario_w.dt_atualizacao_nrec		:= inventario_w.dt_atualizacao;
		inventario_w.nm_usuario_nrec		:= inventario_w.nm_usuario;
		inventario_w.ie_contagem_atual		:= '1';
		inventario_w.ie_tipo_contagem		:= '1';
		inventario_w.ie_desconsidera_saldo_kit		:= 'N';
		inventario_w.dt_bloqueio			:= null;


		if (reg_integracao_w.qt_reg_log = 0) then

			select	coalesce(max(nr_sequencia),0)
			into STRICT	inventario_w.nr_sequencia
			from	inventario
			where	nr_documento_externo = inventario_w.nr_documento_externo
			and	ie_sistema_origem = inventario_w.ie_sistema_origem
			and	coalesce(dt_atualizacao_saldo::text, '') = '';

			if (inventario_w.nr_sequencia > 0) then

				update	inventario
				set	row = inventario_w
				where	nr_sequencia = inventario_w.nr_sequencia;


			else
				select	nextval('inventario_seq')
				into STRICT	inventario_w.nr_sequencia
				;

				insert into inventario values (inventario_w.*);
			end if;
		end if;

		open C02;
		loop
		fetch C02 into
			c02_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin

			reg_integracao_w.nm_tabela			:=	'INVENTARIO_MATERIAL';
			reg_integracao_w.nm_elemento		:=	'ITEM';
			reg_integracao_w.nr_seq_visao		:=	17500;

			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_FORNECEDOR', c02_w.cd_fornecedor, 'S', inventario_material_w.cd_fornecedor) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_material_w.cd_fornecedor := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'CD_MATERIAL', c02_w.cd_material, 'S', inventario_material_w.cd_material) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_material_w.cd_material := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_JUSTIFICATIVA', c02_w.ds_justificativa, 'N', inventario_material_w.ds_justificativa) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_material_w.ds_justificativa := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DS_OBSERVACAO', c02_w.ds_observacao, 'N', inventario_material_w.ds_observacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_material_w.ds_observacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'DT_ATUALIZACAO', c02_w.dt_atualizacao, 'N', inventario_material_w.dt_atualizacao) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_material_w.dt_atualizacao := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'IE_AGRUPADOR', c02_w.ie_agrupador, 'N', inventario_material_w.ie_agrupador) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_material_w.ie_agrupador := _ora2pg_r.ds_valor_retorno_p;
			SELECT * FROM intpd_processar_atributo(reg_integracao_w, 'NM_USUARIO', c02_w.nm_usuario, 'N', inventario_material_w.nm_usuario) INTO STRICT _ora2pg_r;
 reg_integracao_w := _ora2pg_r.reg_integracao_p; inventario_material_w.nm_usuario := _ora2pg_r.ds_valor_retorno_p;
			inventario_material_w.nr_seq_inventario		:= inventario_w.nr_sequencia;
			inventario_material_w.dt_atualizacao		:= inventario_w.dt_atualizacao;
			inventario_material_w.nm_usuario		:= inventario_w.nm_usuario;
			inventario_material_w.dt_atualizacao_nrec	:= inventario_w.dt_atualizacao;
			inventario_material_w.nm_usuario_nrec		:= inventario_w.nm_usuario;
			inventario_material_w.ie_contagem_atual	:= '1';



			if (reg_integracao_w.qt_reg_log = 0) then

				select	cd_material_estoque
				into STRICT	inventario_material_w.cd_material
				from	material
				where	cd_material = inventario_material_w.cd_material;

				select	coalesce(max(nr_sequencia),0)
				into STRICT	inventario_material_w.nr_sequencia
				from	inventario_material
				where	nr_seq_inventario = inventario_w.nr_sequencia
				and	cd_material = inventario_material_w.cd_material;

				if (inventario_material_w.nr_sequencia > 0) then

					update	inventario_material
					set	row = inventario_material_w
					where	nr_sequencia = inventario_material_w.nr_sequencia;


				else
					select	nextval('inventario_material_seq')
					into STRICT	inventario_material_w.nr_sequencia
					;

					insert into inventario_material values (inventario_material_w.*);
				end if;
			end if;
			end;
		end loop;
		close C02;

		if (reg_integracao_w.qt_reg_log = 0) and (c01_w.dt_bloqueio IS NOT NULL AND c01_w.dt_bloqueio::text <> '') then

			ds_erro_w := bloquear_itens_inventario(inventario_w.nr_sequencia, inventario_w.cd_estabelecimento, inventario_w.nm_usuario, ds_erro_w);

		end if;
		end;
	end if;
	end;
end loop;
close C01;

if (reg_integracao_w.qt_reg_log > 0) then
	begin

	rollback;

	update intpd_fila_transmissao
	set	ie_status = 'E',
		ie_tipo_erro = 'F'
	where	nr_sequencia = nr_sequencia_p;

	for i in 0..reg_integracao_w.qt_reg_log-1 loop
		INTPD_GRAVAR_LOG_RECEBIMENTO(nr_sequencia_p,reg_integracao_w.intpd_log_receb[i].ds_log,'INTPDTASY');
	end loop;
	end;

else

	update	intpd_fila_transmissao
	set	ie_status = 'S',
		nr_seq_documento = coalesce(nr_inventario_delete_w,inventario_w.nr_sequencia),
		nr_doc_externo = c01_w.nr_documento_externo
	where	nr_sequencia = nr_sequencia_p;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE intpd_recebe_inventario_mat ( nr_sequencia_p bigint, xml_p xml) FROM PUBLIC;

