-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_b470_icmsipi ( nr_seq_controle_p bigint) AS $body$
DECLARE


-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1) 	:= 'N';
nr_vetor_w		bigint	:= 0;
qt_cursor_w		bigint	:= 0;

nr_seq_icmsipi_B470_w	fis_efd_icmsipi_B470.nr_sequencia%type;
vl_cont_w		fis_efd_icmsipi_B470.vl_cont%type;
vl_mat_terc_w		fis_efd_icmsipi_B470.vl_mat_terc%type;
vl_mat_prop_w		fis_efd_icmsipi_B470.vl_mat_prop%type;
vl_sub_w		fis_efd_icmsipi_B470.vl_sub%type;
vl_isnt_w		fis_efd_icmsipi_B470.vl_isnt%type;
vl_ded_bc_w		fis_efd_icmsipi_B470.vl_ded_bc%type;
vl_bc_iss_w		fis_efd_icmsipi_B470.vl_bc_iss%type;
vl_bc_iss_rt_w		fis_efd_icmsipi_B470.vl_bc_iss_rt%type;
vl_iss_w		fis_efd_icmsipi_B470.vl_iss%type;
vl_iss_rt_w		fis_efd_icmsipi_B470.vl_iss_rt%type;
vl_ded_w		fis_efd_icmsipi_B470.vl_ded%type;
vl_ded_2_w		fis_efd_icmsipi_B470.vl_ded%type;
vl_iss_rec_w		fis_efd_icmsipi_B470.vl_iss_rec%type;
vl_iss_st_w		fis_efd_icmsipi_B470.vl_iss_st%type;
vl_iss_rec_uni_w	fis_efd_icmsipi_B470.vl_iss_rec_uni%type;
vl_or_w			fis_efd_icmsipi_B500.vl_or%type;
cd_ver_w                fis_efd_icmsipi_controle.cd_ver%type;

-- USUARIO
nm_usuario_w			usuario.nm_usuario%type;

/*Criacao do array com o tipo sendo da tabela especificada - FIS_EFD_ICMSIPI_C170 */

type registro is table of fis_efd_icmsipi_B470%rowtype index by integer;
fis_registros_w			registro;


BEGIN

select  a.cd_ver
into STRICT 	cd_ver_w
from  	fis_efd_icmsipi_controle   a
where  	a.nr_sequencia 		= nr_seq_controle_p;

if ((cd_ver_w)::numeric  >= 13) then
begin
	/*Obter o usuario ativo no tasy*/

	nm_usuario_w := Obter_Usuario_Ativo;
	vl_cont_w		:= 0;--
	vl_mat_terc_w		:= 0;--
	vl_sub_w		:= 0;--
	vl_isnt_w		:= 0;--
	vl_bc_iss_w		:= 0;--
	vl_iss_w		:= 0;--	
	vl_mat_prop_w		:= 0;--
	vl_ded_bc_w		:= 0;--
	vl_bc_iss_rt_w		:= 0;---
	vl_iss_rt_w		:= 0;--
	vl_ded_w		:= 0;--
	vl_iss_rec_w		:= 0;--
	vl_iss_st_w		:= 0;--
	vl_iss_rec_uni_w	:= 0;--
	vl_or_w			:= 0;--
	vl_ded_2_w		:= 0;--

	/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_B470 */

	select	nextval('fis_efd_icmsipi_b470_seq')
	into STRICT	nr_seq_icmsipi_B470_w
	;
	
	/*Somatorio B420*/

	select 	coalesce(sum(a.vl_cont),0),
		coalesce(sum(a.vl_isnt_iss),0),
		coalesce(sum(a.vl_bc_iss),0),
		coalesce(sum(a.vl_iss),0)
	into STRICT 	vl_cont_w,
		vl_isnt_w,
		vl_bc_iss_w,
		vl_iss_w
	from 	fis_efd_icmsipi_b420 a
	where 	a.nr_seq_controle = nr_seq_controle_p;

	/*Somatorio B020*/

	select 	coalesce(sum(a.vl_mat_terc),0),
		coalesce(sum(a.vl_sub),0)
	into STRICT 	vl_mat_terc_w,
		vl_sub_w
	from 	fis_efd_icmsipi_b020 a
	where 	a.nr_seq_controle = nr_seq_controle_p;	
	
	--Buscar a soma dos campos (VL_MAT_TERC + VL_MAT_PROP + VL_SUB + VL_ISNT)
	vl_ded_bc_w := 	vl_mat_terc_w + vl_mat_prop_w + vl_sub_w + vl_isnt_w;
	
	/*Somatorio B440 - ind_oper = '1' */

	select 	coalesce(sum(a.vl_bc_iss_rt),0),
		coalesce(sum(vl_iss_rt),0)
	into STRICT 	vl_bc_iss_rt_w,
		vl_iss_rt_w
	from 	fis_efd_icmsipi_b440 a
	where 	a.nr_seq_controle = nr_seq_controle_p
	and     a.cd_ind_oper = '1';
	
	/*Somatorio B460 - ie_ind_ded = '0' */

	select 	coalesce(sum(a.vl_ded),0)
	into STRICT 	vl_ded_w
	from 	fis_efd_icmsipi_b460 a
	where 	a.nr_seq_controle = nr_seq_controle_p
	and     a.ie_ind_ded = '0';

	--Buscar a soma dos campos (VL_ ISS - VL_ISS_RT - VL_DED)
	vl_iss_rec_w := vl_iss_w - vl_iss_rt_w - vl_ded_w;

	/*Somatorio B440 - ind_oper = '0' */

	select 	coalesce(sum(a.vl_iss_rt),0)
	into STRICT 	vl_iss_st_w
	from 	fis_efd_icmsipi_b440 a
	where 	a.nr_seq_controle = nr_seq_controle_p
	and     a.cd_ind_oper = '0';
	
	/*Somatorio B500 */

	select 	coalesce(sum(a.vl_or),0)
	into STRICT 	vl_or_w
	from 	fis_efd_icmsipi_b500 a
	where 	a.nr_seq_controle = nr_seq_controle_p;
	
	
	/*Somatorio B460 - ie_ind_ded = '2' */

	select 	coalesce(sum(a.vl_ded),0)
	into STRICT 	vl_ded_2_w
	from 	fis_efd_icmsipi_b460 a
	where 	a.nr_seq_controle = nr_seq_controle_p
	and     a.ie_ind_ded = '2';
	
	vl_iss_rec_uni_w := vl_or_w + vl_ded_2_w;
	
	if (vl_iss_rec_uni_w < 0 ) then
		vl_iss_rec_uni_w := 0;
	end if;


	/*Incrementa a variavel para o array*/

	qt_cursor_w:=	qt_cursor_w + 1;
	
	if (ie_gerou_dados_bloco_w = 'N') then
		ie_gerou_dados_bloco_w:=	'S';
	end if;
	
	/*Inserindo valores no array para realizacao do forall posteriormente*/

	fis_registros_w[qt_cursor_w].nr_sequencia		:= nr_seq_icmsipi_B470_w;
	fis_registros_w[qt_cursor_w].dt_atualizacao		:= clock_timestamp();
	fis_registros_w[qt_cursor_w].nm_usuario			:= nm_usuario_w;
	fis_registros_w[qt_cursor_w].dt_atualizacao_nrec	:= clock_timestamp();
	fis_registros_w[qt_cursor_w].nm_usuario_nrec		:= nm_usuario_w;
	fis_registros_w[qt_cursor_w].cd_reg             	:= 'B470';	
	fis_registros_w[qt_cursor_w].vl_cont			:= vl_cont_w;
	fis_registros_w[qt_cursor_w].vl_mat_terc		:= vl_mat_terc_w;
	fis_registros_w[qt_cursor_w].vl_mat_prop		:= vl_mat_prop_w;
	fis_registros_w[qt_cursor_w].vl_sub			:= vl_sub_w;
	fis_registros_w[qt_cursor_w].vl_isnt			:= vl_isnt_w;
	fis_registros_w[qt_cursor_w].vl_ded_bc			:= vl_ded_bc_w;
	fis_registros_w[qt_cursor_w].vl_bc_iss			:= vl_bc_iss_w;
	fis_registros_w[qt_cursor_w].vl_bc_iss_rt		:= vl_bc_iss_rt_w;
	fis_registros_w[qt_cursor_w].vl_iss			:= vl_iss_w;
	fis_registros_w[qt_cursor_w].vl_iss_rt			:= vl_iss_rt_w;
	fis_registros_w[qt_cursor_w].vl_ded			:= vl_ded_w;
	fis_registros_w[qt_cursor_w].vl_iss_rec			:= vl_iss_rec_w;
	fis_registros_w[qt_cursor_w].vl_iss_st			:= vl_iss_st_w;
	fis_registros_w[qt_cursor_w].vl_iss_rec_uni		:= vl_iss_rec_uni_w;
	fis_registros_w[qt_cursor_w].nr_seq_controle    	:= nr_seq_controle_p;
	
	if (nr_vetor_w >= 1000) then
		/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_B470 */

		forall j in fis_registros_w.first..fis_registros_w.last
			insert into fis_efd_icmsipi_B470 values fis_registros_w(j);

		nr_vetor_w	:= 0;
		fis_registros_w.delete;

		commit;
	end if;
	
	/*incrementa variavel para realizar o forall quando chegar no valor limite*/

	nr_vetor_w	:= nr_vetor_w 	+ 1;
		
end;
end if;

if (fis_registros_w.count > 0) then
	/*Inserindo registro que nao entraram outro for all devido a quantidade de registros no vetor*/

	forall l in fis_registros_w.first..fis_registros_w.last
		insert into fis_efd_icmsipi_B470 values fis_registros_w(l);
		
	fis_registros_w.delete;

	commit;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualizacao informacao no controle de geracao de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update 	fis_efd_icmsipi_controle
	set		ie_mov_B = 'S'
	where 	nr_sequencia = nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_b470_icmsipi ( nr_seq_controle_p bigint) FROM PUBLIC;

