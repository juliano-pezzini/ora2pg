-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_contab_val_adic ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_proc_rec_p pls_conta_pos_estabelecido.nr_seq_proc_rec%type, nr_seq_mat_rec_p pls_conta_pos_estabelecido.nr_seq_mat_rec%type, nr_seq_disc_proc_p pls_conta_pos_estabelecido.nr_seq_disc_proc%type, nr_seq_disc_mat_p pls_conta_pos_estabelecido.nr_seq_disc_mat%type, ie_opcao_p text, ie_acao_p text, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

					
/*
ie_opcao_p 
P = P?s-estabelecido
C = Coparticipa??o 
	
ie_acao_p
N - Normal, consist?ncia da conta ou atualiza??o de registro
R - Recurso de Glosa
F - Fechamento de discuss?o
D - Refaturamento de saldo de discussao
A - Aviso de cobranca
*/
pr_pagamento_liberado_w		double precision;
vl_contab_copartic_w		double precision;
vl_contab_provisao_w		double precision;
vl_contab_pos_estab_w		double precision;
vl_administracao_w		double precision;
vl_diferenca_w			double precision;
vl_diferenca_prov_w		double precision;
nr_seq_contab_w			pls_conta_copartic_contab.nr_sequencia%type;
vl_validacao_w			double precision;
vl_lib_taxa_co_w		pls_conta_pos_estab_contab.vl_lib_taxa_co%type;
vl_lib_taxa_material_w		pls_conta_pos_estab_contab.vl_lib_taxa_material%type;
vl_lib_taxa_servico_w		pls_conta_pos_estab_contab.vl_lib_taxa_servico%type;
vl_medico_w			pls_conta_pos_estab_contab.vl_medico%type;
vl_custo_operacional_w		pls_conta_pos_estab_contab.vl_custo_operacional%type;
vl_materiais_w			pls_conta_pos_estab_contab.vl_materiais%type;
nr_seq_participante_w		pls_conta_medica_resumo.nr_seq_participante%type;	
vl_participante_w		pls_conta_pos_estab_partic.vl_participante_pos%type;
qt_registro_w			integer;
ie_ato_cooperado_w		pls_conta_medica_resumo.ie_ato_cooperado%type;
vl_ato_cooperado_w		pls_conta_copartic_contab.vl_ato_cooperado%type;
vl_ato_auxiliar_w		pls_conta_copartic_contab.vl_ato_auxiliar%type;
vl_ato_nao_cooperado_w		pls_conta_copartic_contab.vl_ato_nao_cooperado%type;
vl_participante_pos_w		pls_conta_pos_estab_partic.vl_participante_pos%type;
vl_admin_partic_w		pls_conta_pos_estab_partic.vl_administracao%type;
nr_seq_conta_contab_w		pls_conta_copartic_contab.nr_sequencia%type;
dt_mes_competencia_w		pls_conta_v.dt_mes_competencia%type;
vl_custo_operacional_aux_w	pls_conta_pos_estab_contab.vl_custo_operacional%type;
vl_beneficiario_w		pls_conta_pos_estabelecido.vl_beneficiario%type;
vl_proporcao_w			double precision; --guardando 6 casas apenas para o fator de m?ltiplica??o
vl_proporcao_copart_w    	double precision;
vl_proporcao_prov_w    		double precision;
vl_ajuste_temp_w		double precision;
qt_pos_estab_partic_w		integer := 0;
vl_diferenca_valida_w		real := 0.02;
vl_provisao_w			pls_conta_copartic_contab.vl_provisao%type;
qt_copart_conta_w		integer;
vl_contab_pos_estab_part_w	double precision;
nr_seq_vl_atos_ajustar_w	pls_conta_copartic_contab.nr_sequencia%type;
vl_max_total_atos_w		pls_conta_copartic_contab.vl_ato_cooperado%type;
vl_ato_reg_ajuste_w		pls_conta_copartic_contab.vl_ato_cooperado%type;
vl_ato_aux_reg_ajuste_w		pls_conta_copartic_contab.vl_ato_auxiliar%type;
vl_ato_nao_coop_reg_ajuste_w	pls_conta_copartic_contab.vl_ato_nao_cooperado%type;
cd_estabelecimento_w			estabelecimento.cd_estabelecimento%type;
ie_forma_gerar_reg_contab_w		pls_parametro_faturamento.ie_forma_gerar_reg_contab%type;
ie_status_prov_pagto_w		pls_parametro_contabil.ie_status_prov_pagto%type;
ie_vig_copart_w 		pls_parametro_contabil.ie_vig_copart%type;
ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;
ie_origem_valor_pos_w		pls_conta_pos_estabelecido.ie_origem_valor_pos%type;
nr_seq_prev_w			pls_conta_pos_estab_prev.nr_sequencia%type;
ie_prop_glosa_tot_resumo_w	pls_parametros.ie_prop_glosa_tot_resumo%type;
vl_lib_resumo_rec_glosa_w	pls_conta_rec_resumo_item.vl_liberado%type;
ie_acao_w			varchar(3);
dt_ref_w			timestamp;

C01 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type,
		nr_seq_conta_proc_pc	pls_conta_medica_resumo.nr_seq_conta_proc%type,
		nr_seq_conta_mat_pc	pls_conta_medica_resumo.nr_seq_conta_mat%type) FOR
	SELECT	max(a.nr_sequencia) nr_seq_conta_resumo,
		a.nr_seq_conta,
		sum(a.vl_liberado) vl_lib_pagamento,
		a.nr_seq_conta_mat,
		a.nr_seq_conta_proc,
		a.nr_seq_prestador_pgto,
		max(a.nr_seq_participante) nr_seq_participante,
		sum(vl_hm) vl_hm,
		sum(vl_materiais_pag) vl_materiais_pag,
		sum(vl_co_pag) vl_co_pag,
		max(ie_tipo_item) ie_tipo_item,
		sum(a.vl_glosa) vl_glosa
	from	pls_conta_medica_resumo a
	where	a.nr_seq_conta_mat	= nr_seq_conta_mat_pc 
	and 	a.nr_seq_conta 	= nr_seq_conta_pc
	and	a.ie_tipo_item 	!= 'I'
	and	a.ie_situacao 	= 'A'
	and	((a.vl_lib_original > 0) or (ie_tipo_item in ('M','P','R')))
	group by a.nr_seq_conta,
		 a.nr_seq_conta_mat,
		 a.nr_seq_conta_proc,
		 a.nr_seq_prestador_pgto
	
union all

	SELECT	max(a.nr_sequencia) nr_seq_conta_resumo,
		a.nr_seq_conta,
		sum(a.vl_liberado) vl_lib_pagamento,
		a.nr_seq_conta_mat,        
		a.nr_seq_conta_proc,
		a.nr_seq_prestador_pgto,
		max(a.nr_seq_participante) nr_seq_participante,
		sum(vl_hm) vl_hm,
		sum(vl_materiais_pag) vl_materiais_pag,
		sum(vl_co_pag) vl_co_pag,
		max(ie_tipo_item) ie_tipo_item	,
		sum(a.vl_glosa) vl_glosa
	from	pls_conta_medica_resumo a
	where	a.nr_seq_conta_proc	= nr_seq_conta_proc_pc 
	and 	a.nr_seq_conta 	= nr_seq_conta_pc 
	and	a.ie_tipo_item 	!= 'I'
	and	a.ie_situacao 	= 'A'
	and	((a.vl_lib_original > 0) or (ie_tipo_item in ('M','P', 'R')))
	group by a.nr_seq_conta,
		 a.nr_seq_conta_mat,
		 a.nr_seq_conta_proc,
		 a.nr_seq_prestador_pgto
	
union all

	select	max(a.nr_sequencia) nr_seq_conta_resumo,
		a.nr_seq_conta,
		sum(a.vl_liberado) vl_lib_pagamento,
		a.nr_seq_conta_mat,        
		a.nr_seq_conta_proc,
		a.nr_seq_prestador_pgto,
		max(a.nr_seq_participante) nr_seq_participante,
		sum(vl_hm) vl_hm,
		sum(vl_materiais_pag) vl_materiais_pag,
		sum(vl_co_pag) vl_co_pag,
		max(ie_tipo_item) ie_tipo_item,
		sum(a.vl_glosa) vl_glosa
	from	pls_conta_medica_resumo a
	where	a.nr_seq_conta	= nr_seq_conta_pc 
	and 	coalesce(nr_seq_conta_proc_pc::text, '') = '' 
	and 	coalesce(nr_seq_conta_mat_pc::text, '') = '' 
	and	a.ie_tipo_item 	!= 'I'
	and	a.ie_situacao 	= 'A'
	and	((a.vl_lib_original > 0) or (ie_tipo_item in ('M','P','R')))
	group by a.nr_seq_conta,
		 a.nr_seq_conta_mat,
		 a.nr_seq_conta_proc,
		 a.nr_seq_prestador_pgto;

C02 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type,
		nr_seq_conta_proc_pc	pls_conta_medica_resumo.nr_seq_conta_proc%type,
		nr_seq_conta_mat_pc	pls_conta_medica_resumo.nr_seq_conta_mat%type) FOR
	SELECT	a.nr_sequencia nr_seq_conta_copartic,
		a.vl_coparticipacao,
		b.vl_liberado,
		a.nr_seq_conta_rec,
		a.nr_seq_proc_rec,
		null nr_seq_mat_rec
	from	pls_conta_coparticipacao a,
		pls_conta_proc b
	where	a.nr_seq_conta		= nr_seq_conta_pc
	and	a.nr_seq_conta_proc	= b.nr_sequencia
	and	b.nr_sequencia		= nr_seq_conta_proc_pc
	
union all

	SELECT	a.nr_sequencia nr_seq_conta_copartic,
		a.vl_coparticipacao,
		b.vl_liberado,
		a.nr_seq_conta_rec,
		null nr_seq_proc_rec,
		a.nr_seq_mat_rec
	from	pls_conta_coparticipacao a,
		pls_conta_mat b
	where	a.nr_seq_conta		= nr_seq_conta_pc
	and	a.nr_seq_conta_mat	= b.nr_sequencia
	and	a.nr_seq_conta_mat	= nr_seq_conta_mat_pc;
	
C03 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type,
		nr_seq_conta_proc_pc	pls_conta_medica_resumo.nr_seq_conta_proc%type,
		nr_seq_conta_mat_pc	pls_conta_medica_resumo.nr_seq_conta_mat%type,
		ie_acao_pc		text)FOR
	SELECT	a.nr_sequencia,
		a.vl_beneficiario,
		coalesce((SELECT	sum(x.vl_liberado)
		from	pls_conta_medica_resumo x
		where	x.nr_seq_conta		= b.nr_seq_conta
		and	x.nr_seq_conta_proc 	= b.nr_sequencia
		and	x.ie_situacao 		= 'A'
		and	x.ie_tipo_item 		!= 'I'),CASE WHEN ie_acao_w='F' THEN (b.vl_procedimento_imp - b.vl_liberado)  ELSE b.vl_liberado END ) vl_liberado,
		coalesce(a.vl_lib_taxa_co,0)+coalesce(a.vl_lib_taxa_material,0) + coalesce(a.vl_lib_taxa_servico,0) vl_administracao,
		coalesce(a.vl_lib_taxa_co,0) vl_lib_taxa_co,
		coalesce(a.vl_lib_taxa_material,0) vl_lib_taxa_material,
		coalesce(a.vl_lib_taxa_servico,0) vl_lib_taxa_servico,
		coalesce(a.vl_medico,0) vl_medico,
		coalesce(a.vl_custo_operacional,0) vl_custo_operacional,
		coalesce(a.vl_materiais,0) vl_materiais,
		a.nr_seq_disc_proc,
		a.nr_seq_proc_rec,
		null nr_seq_disc_mat,
		null nr_seq_mat_rec,
		b.vl_glosa,
		(	select 	max(nr_sequencia)
			from 	pls_conta_pos_estab_prev 
			where 	nr_seq_conta_proc = b.nr_sequencia) nr_seq_prev_pos,
		b.cd_procedimento,
		b.ie_origem_proced,
		null nr_seq_material
	from	pls_conta_pos_estabelecido a,
		pls_conta_proc b
	where	a.nr_seq_conta_proc	= b.nr_sequencia
	and	a.nr_seq_conta		= nr_seq_conta_pc
	and	a.nr_seq_conta_proc	= nr_seq_conta_proc_pc
	and	a.vl_beneficiario	>= 0
	and	a.ie_situacao		= 'A'
	and	((a.nr_seq_proc_rec	= nr_seq_proc_rec_p) or (coalesce(nr_seq_proc_rec_p::text, '') = ''))
	and	((a.nr_seq_disc_proc	= nr_seq_disc_proc_p) or (coalesce(nr_seq_disc_proc_p::text, '') = ''))
	and	a.ie_status_faturamento	!= 'A'
	and	a.ie_cobrar_mensalidade	!= 'A'
	and	ie_acao_pc		!= 'CA'
	
union all

	select	a.nr_sequencia,
		a.vl_beneficiario,
		CASE WHEN ie_acao_w='F' THEN (b.vl_material_imp - b.vl_liberado)  ELSE b.vl_liberado END  vl_liberado,
		coalesce(a.vl_lib_taxa_co,0)+coalesce(a.vl_lib_taxa_material,0) + coalesce(a.vl_lib_taxa_servico,0) vl_administracao,
		coalesce(a.vl_lib_taxa_co,0) vl_lib_taxa_co,
		coalesce(a.vl_lib_taxa_material,0) vl_lib_taxa_material,
		coalesce(a.vl_lib_taxa_servico,0) vl_lib_taxa_servico,
		coalesce(a.vl_medico,0) vl_medico,
		coalesce(a.vl_custo_operacional,0) vl_custo_operacional,
		coalesce(a.vl_materiais,0) vl_materiais,
		null nr_seq_disc_proc,
		null nr_seq_proc_rec,
		nr_seq_disc_mat,
		nr_seq_mat_rec,
		b.vl_glosa,
		(	select 	max(nr_sequencia) 
			from 	pls_conta_pos_estab_prev 
			where 	nr_seq_conta_mat = b.nr_sequencia) nr_seq_prev_pos,
		null cd_procedimento,
		null ie_origem_proced,
		b.nr_seq_material
	from	pls_conta_pos_estabelecido a,
		pls_conta_mat b
	where	a.nr_seq_conta_mat	= b.nr_sequencia
	and	a.nr_seq_conta		= nr_seq_conta_pc
	and	a.nr_seq_conta_mat	= nr_seq_conta_mat_pc
	and	a.vl_beneficiario	>= 0
	and	a.ie_situacao		= 'A'
	and	((a.nr_seq_mat_rec	= nr_seq_mat_rec_p) or (coalesce(nr_seq_mat_rec_p::text, '') = ''))
	and	((a.nr_seq_disc_mat	= nr_seq_disc_mat_p) or (coalesce(nr_seq_disc_mat_p::text, '') = ''))
	and	a.ie_status_faturamento	!= 'A'
	and	a.ie_cobrar_mensalidade	!= 'A'
	and	ie_acao_pc		!= 'CA'
	
union all

	select	a.nr_sequencia,
		a.vl_beneficiario,
		coalesce((select	sum(x.vl_liberado)
		from	pls_conta_medica_resumo x
		where	x.nr_seq_conta		= b.nr_seq_conta
		and	x.nr_seq_conta_proc 	= b.nr_sequencia
		and	x.ie_situacao 		= 'A'
		and	x.ie_tipo_item 		!= 'I'),CASE WHEN ie_acao_w='F' THEN (b.vl_procedimento_imp - b.vl_liberado)  ELSE b.vl_liberado END ) vl_liberado,
		coalesce(a.vl_lib_taxa_co,0)+coalesce(a.vl_lib_taxa_material,0) + coalesce(a.vl_lib_taxa_servico,0) vl_administracao,
		coalesce(a.vl_lib_taxa_co,0) vl_lib_taxa_co,
		coalesce(a.vl_lib_taxa_material,0) vl_lib_taxa_material,
		coalesce(a.vl_lib_taxa_servico,0) vl_lib_taxa_servico,
		coalesce(a.vl_medico,0) vl_medico,
		coalesce(a.vl_custo_operacional,0) vl_custo_operacional,
		coalesce(a.vl_materiais,0) vl_materiais,
		a.nr_seq_disc_proc,
		a.nr_seq_proc_rec,
		null nr_seq_disc_mat,
		null nr_seq_mat_rec,
		b.vl_glosa,
		(	select 	max(nr_sequencia) 
			from 	pls_conta_pos_estab_prev 
			where 	nr_seq_conta_proc = b.nr_sequencia) nr_seq_prev_pos,
		b.cd_procedimento,
		b.ie_origem_proced,
		null nr_seq_material
	from	pls_conta_pos_estabelecido a,
		pls_conta_proc b
	where	a.nr_seq_conta_proc	= b.nr_sequencia
	and	a.nr_seq_conta		= nr_seq_conta_pc
	and	a.nr_seq_conta_proc	= nr_seq_conta_proc_pc
	and	a.vl_beneficiario	>= 0
	and	a.ie_situacao		= 'A'
	and	((a.nr_seq_proc_rec	= nr_seq_proc_rec_p) or (coalesce(nr_seq_proc_rec_p::text, '') = ''))
	and	((a.nr_seq_disc_proc	= nr_seq_disc_proc_p) or (coalesce(nr_seq_disc_proc_p::text, '') = ''))
	and	a.ie_status_faturamento	= 'A'
	and	ie_acao_pc		= 'CA'
	
union all

	select	a.nr_sequencia,
		a.vl_beneficiario,
		CASE WHEN ie_acao_w='F' THEN (b.vl_material_imp - b.vl_liberado)  ELSE b.vl_liberado END  vl_liberado,
		coalesce(a.vl_lib_taxa_co,0)+coalesce(a.vl_lib_taxa_material,0) + coalesce(a.vl_lib_taxa_servico,0) vl_administracao,
		coalesce(a.vl_lib_taxa_co,0) vl_lib_taxa_co,
		coalesce(a.vl_lib_taxa_material,0) vl_lib_taxa_material,
		coalesce(a.vl_lib_taxa_servico,0) vl_lib_taxa_servico,
		coalesce(a.vl_medico,0) vl_medico,
		coalesce(a.vl_custo_operacional,0) vl_custo_operacional,
		coalesce(a.vl_materiais,0) vl_materiais,
		null nr_seq_disc_proc,
		null nr_seq_proc_rec,
		nr_seq_disc_mat,
		nr_seq_mat_rec,
		b.vl_glosa,
		(	select 	max(nr_sequencia) 
			from 	pls_conta_pos_estab_prev 
			where 	nr_seq_conta_mat = b.nr_sequencia) nr_seq_prev_pos,
		null cd_procedimento,
		null ie_origem_proced,
		b.nr_seq_material
	from	pls_conta_pos_estabelecido a,
		pls_conta_mat b
	where	a.nr_seq_conta_mat	= b.nr_sequencia
	and	a.nr_seq_conta		= nr_seq_conta_pc
	and	a.nr_seq_conta_mat	= nr_seq_conta_mat_pc
	and	a.vl_beneficiario	>= 0
	and	a.ie_situacao		= 'A'
	and	((a.nr_seq_mat_rec	= nr_seq_mat_rec_p) or (coalesce(nr_seq_mat_rec_p::text, '') = ''))
	and	((a.nr_seq_disc_mat	= nr_seq_disc_mat_p) or (coalesce(nr_seq_disc_mat_p::text, '') = ''))
	and	a.ie_status_faturamento	= 'A'
	and	ie_acao_pc		= 'CA';


C04 CURSOR(nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type) FOR
	SELECT	nr_seq_conta_copartic,
		sum(vl_coparticipacao) vl_contab,
		sum(coalesce(vl_provisao,0)) vl_provisao
	from	pls_conta_copartic_contab
	where	nr_seq_conta	= nr_seq_conta_pc
	group by nr_seq_conta_copartic;
	
C04_vl_atos CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type) FOR
	SELECT		nr_seq_conta_copartic,
			(SELECT vl_coparticipacao
			 from	pls_conta_coparticipacao
			 where	nr_sequencia = a.nr_seq_conta_copartic) vl_copartic_ok,
			(sum(coalesce(vl_ato_cooperado,0)) + sum(coalesce(vl_ato_auxiliar,0)) + sum(coalesce(vl_ato_nao_cooperado,0)) )vl_soma_atos						
	from	pls_conta_copartic_contab a
	where	nr_seq_conta	= nr_seq_conta_pc
	group by nr_seq_conta_copartic;	

C05 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type,
		ie_acao_pc		text) FOR
	SELECT	t.nr_seq_conta_pos,
		t.vl_contab,
		t.vl_administracao,
		t.vl_lib_taxa_co,
		t.vl_lib_taxa_material,
		t.vl_lib_taxa_servico,
		t.vl_medico,
		t.vl_custo_operacional,
		t.vl_materiais
	from (	SELECT	a.nr_seq_conta_pos,
			sum(coalesce(a.vl_custo_operacional,0)) vl_contab,
			sum(coalesce(a.vl_administracao,0)) vl_administracao,
			sum(coalesce(a.vl_lib_taxa_co,0)) vl_lib_taxa_co,
			sum(coalesce(a.vl_lib_taxa_material,0)) vl_lib_taxa_material,
			sum(coalesce(a.vl_lib_taxa_servico,0)) vl_lib_taxa_servico,
			sum(coalesce(a.vl_medico,0)) vl_medico,
			sum(coalesce(a.vl_custo_operacional_ind,0)) vl_custo_operacional, 
			sum(coalesce(a.vl_materiais,0)) vl_materiais
		from	pls_conta_pos_estab_contab	a,
			pls_conta_pos_estabelecido	b
		where	a.nr_seq_conta_pos	= b.nr_sequencia
		and	a.nr_seq_conta		= nr_seq_conta_pc
		and	a.vl_custo_operacional	> 0
		and	b.ie_status_faturamento	!= 'A'
		and	ie_acao_pc		!= 'CA'
		group by a.nr_seq_conta_pos
		
union all

		select	a.nr_seq_conta_pos,
			sum(coalesce(a.vl_custo_operacional,0)) vl_contab,
			sum(coalesce(a.vl_administracao,0)) vl_administracao,
			sum(coalesce(a.vl_lib_taxa_co,0)) vl_lib_taxa_co,
			sum(coalesce(a.vl_lib_taxa_material,0)) vl_lib_taxa_material,
			sum(coalesce(a.vl_lib_taxa_servico,0)) vl_lib_taxa_servico, 
			sum(coalesce(a.vl_medico,0)) vl_medico,
			sum(coalesce(a.vl_custo_operacional_ind,0)) vl_custo_operacional, 
			sum(coalesce(a.vl_materiais,0)) vl_materiais
		from	pls_conta_pos_estab_contab	a,
			pls_conta_pos_estabelecido	b
		where	a.nr_seq_conta_pos	= b.nr_sequencia
		and	a.nr_seq_conta		= nr_seq_conta_pc
		and	a.vl_custo_operacional	> 0
		and	b.ie_status_faturamento	= 'A'
		and	ie_acao_pc		= 'CA'
		group by a.nr_seq_conta_pos) t;

C06 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type,
		nr_seq_conta_proc_pc	pls_conta_medica_resumo.nr_seq_conta_proc%type,
		nr_seq_conta_mat_pc	pls_conta_medica_resumo.nr_seq_conta_mat%type) FOR
	SELECT	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		CASE WHEN ie_acao_w='F' THEN (a.vl_procedimento_imp - a.vl_liberado)  ELSE a.vl_liberado END  vl_lib_pagamento,
		null nr_seq_conta_mat,
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto,
		a.vl_glosa
	from	pls_conta_proc_v a
	where	((a.nr_seq_conta	= nr_seq_conta_pc and coalesce(nr_seq_conta_proc_pc::text, '') = '' and coalesce(nr_seq_conta_mat_pc::text, '') = '') or (a.nr_sequencia	= nr_seq_conta_proc_pc))
	and	a.ie_tipo_conta	in ('I','D')
	and	a.ie_status	!= 'M'
	and 	ie_acao_p != 'CA'
	
union all

	SELECT	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		CASE WHEN ie_acao_w='F' THEN (a.vl_material_imp - a.vl_liberado)   ELSE a.vl_liberado END  vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto,
		a.vl_glosa
	from	pls_conta_mat_v a
	where	((a.nr_seq_conta	= nr_seq_conta_pc and coalesce(nr_seq_conta_proc_pc::text, '') = '' and coalesce(nr_seq_conta_mat_pc::text, '') = '') or (a.nr_sequencia	= nr_seq_conta_mat_pc))
	and	a.ie_tipo_conta	in ('I','D')
	and	a.ie_status	!= 'M'
	and 	ie_acao_p != 'CA'
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		CASE WHEN ie_acao_w='F' THEN (a.vl_procedimento_imp - a.vl_liberado)  ELSE a.vl_liberado END  vl_lib_pagamento,
		null nr_seq_conta_mat,        
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto,
		a.vl_glosa
	from	pls_conta_proc_v a
	where	((a.nr_seq_conta	= nr_seq_conta_pc and coalesce(nr_seq_conta_proc_pc::text, '') = '' and coalesce(nr_seq_conta_mat_pc::text, '') = '') or (a.nr_sequencia	= nr_seq_conta_proc_pc))
	and	a.ie_tipo_conta	in ('I','D','C')
	and	a.ie_status	!= 'M'
	and 	ie_acao_p = 'CA'
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		CASE WHEN ie_acao_w='F' THEN (a.vl_material_imp - a.vl_liberado)   ELSE a.vl_liberado END  vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto,
		a.vl_glosa
	from	pls_conta_mat_v a
	where	((a.nr_seq_conta	= nr_seq_conta_pc and coalesce(nr_seq_conta_proc_pc::text, '') = '' and coalesce(nr_seq_conta_mat_pc::text, '') = '') or (a.nr_sequencia	= nr_seq_conta_mat_pc))
	and	a.ie_tipo_conta	in ('I','D','C')
	and	a.ie_status	!= 'M'
	and 	ie_acao_p = 'CA'
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		a.nr_seq_prestador_exec nr_seq_prestador_pgto,
		a.vl_glosa
	from	pls_conta_mat_v a
	where	((a.nr_seq_conta	= nr_seq_conta_pc and coalesce(nr_seq_conta_proc_pc::text, '') = '' and coalesce(nr_seq_conta_mat_pc::text, '') = '') or (a.nr_sequencia	= nr_seq_conta_mat_pc))
	and	a.ie_status	= 'M'
	and	not exists (select	1
			    from	pls_conta_medica_resumo r
			    where	r.nr_seq_conta 		= a.nr_seq_conta
			    and		r.nr_seq_conta_mat 	= a.nr_sequencia)
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		null nr_seq_conta_mat,        
		a.nr_sequencia nr_seq_conta_proc,
		a.nr_seq_prestador_exec nr_seq_prestador_pgto,
		a.vl_glosa
	from	pls_conta_proc_v a
	where	((a.nr_seq_conta	= nr_seq_conta_pc and coalesce(nr_seq_conta_proc_pc::text, '') = '' and coalesce(nr_seq_conta_mat_pc::text, '') = '') or (a.nr_sequencia	= nr_seq_conta_proc_pc))
	and	a.ie_status	= 'M'
	and	not exists (select	1
			    from	pls_conta_medica_resumo r
			    where	r.nr_seq_conta 		= a.nr_seq_conta
			    and		r.nr_seq_conta_proc 	= a.nr_sequencia)
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto,
		a.vl_glosa
	from	pls_conta_mat_v a
	where	((a.nr_seq_conta	= nr_seq_conta_pc and coalesce(nr_seq_conta_proc_pc::text, '') = '' and coalesce(nr_seq_conta_mat_pc::text, '') = '') or (a.nr_sequencia	= nr_seq_conta_mat_pc))
	and	a.ie_tipo_protocolo	= 'R'
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		null nr_seq_conta_mat,        
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto,
		a.vl_glosa
	from	pls_conta_proc_v a
	where	((a.nr_seq_conta	= nr_seq_conta_pc and coalesce(nr_seq_conta_proc_pc::text, '') = '' and coalesce(nr_seq_conta_mat_pc::text, '') = '') or (a.nr_sequencia	= nr_seq_conta_proc_pc))
	and	a.ie_tipo_protocolo	= 'R';
	
C07 CURSOR(	nr_seq_conta_pos_pc	pls_conta_pos_estab_contab.nr_seq_conta_pos%type,
		ie_acao_pc		text) FOR	
	SELECT	a.nr_sequencia,	
		a.nr_seq_conta_pos,
		coalesce(a.vl_custo_operacional,0) vl_contab,
		coalesce(a.vl_administracao,0) vl_administracao,
		coalesce(a.vl_lib_taxa_co,0) vl_lib_taxa_co,
		coalesce(a.vl_lib_taxa_material,0) vl_lib_taxa_material,
		coalesce(a.vl_lib_taxa_servico,0) vl_lib_taxa_servico,
		coalesce(a.vl_medico,0) vl_medico,
		coalesce(a.vl_custo_operacional_ind,0) vl_custo_operacional, 
		coalesce(a.vl_materiais,0) vl_materiais
	from	pls_conta_pos_estab_contab	a,
		pls_conta_pos_estabelecido	b
	where	a.nr_seq_conta_pos	= b.nr_sequencia
	and	a.nr_seq_conta_pos	= nr_seq_conta_pos_pc
	and	a.vl_custo_operacional	> 0
	and	b.ie_status_faturamento	!= 'A'
	and	ie_acao_pc		!= 'A'
	
union all

	SELECT	a.nr_sequencia,	
		a.nr_seq_conta_pos,
		coalesce(a.vl_custo_operacional,0) vl_contab,
		coalesce(a.vl_administracao,0) vl_administracao,
		coalesce(a.vl_lib_taxa_co,0) vl_lib_taxa_co,
		coalesce(a.vl_lib_taxa_material,0) vl_lib_taxa_material,
		coalesce(a.vl_lib_taxa_servico,0) vl_lib_taxa_servico, 
		coalesce(a.vl_medico,0) vl_medico,
		coalesce(a.vl_custo_operacional_ind,0) vl_custo_operacional, 
		coalesce(a.vl_materiais,0) vl_materiais
	from	pls_conta_pos_estab_contab	a,
		pls_conta_pos_estabelecido	b
	where	a.nr_seq_conta_pos	= b.nr_sequencia
	and	a.nr_seq_conta_pos	= nr_seq_conta_pos_pc
	and	a.vl_custo_operacional	> 0
	and	b.ie_status_faturamento	= 'A'
	and	ie_acao_pc		= 'A';
	
C08 CURSOR(nr_seq_conta_copartic_pc    pls_conta_copartic_contab.nr_seq_conta_copartic%type) FOR
	SELECT  nr_sequencia,
		nr_seq_conta_copartic,
		coalesce(vl_coparticipacao, 0) vl_contab,
		coalesce(vl_provisao,0 ) vl_provisao
	from  	pls_conta_copartic_contab
	where  	nr_seq_conta_copartic  = nr_seq_conta_copartic_pc;
	
c_ajuste_distribuicao CURSOR FOR
	SELECT	a.nr_sequencia,
			b.vl_medico,
			b.vl_custo_operacional,
			b.vl_materiais,
			b.vl_lib_taxa_servico,
			b.vl_lib_taxa_co,
			b.vl_lib_taxa_material,
			b.vl_beneficiario,
			a.vl_liberado vl_pagto_total,
			(	SELECT 	count(distinct nr_seq_prestador_pgto)
				from 	pls_conta_medica_resumo x
				where	x.nr_seq_conta = a.nr_seq_conta
				and 	x.nr_seq_conta_proc = a.nr_sequencia
				and 	x.ie_situacao = 'A') qt_item_resumo,
			(	
				select 	count(1)
				from	pls_conta_pos_estab_contab y
				where 	y.nr_seq_conta_proc = a.nr_sequencia
				and 	y.nr_seq_conta_pos = b.nr_sequencia) qt_reg_contab,
			(	
				select 	count(1)
				from	pls_conta_pos_estab_contab y
				where 	y.nr_seq_conta_proc = a.nr_sequencia
				and 	y.nr_seq_conta_pos = b.nr_sequencia
				and		y.vl_custo_operacional = 0
			) qt_reg_contab_zerado
	from	pls_conta_proc_v a,
			pls_conta_pos_estabelecido b
	where	a.nr_sequencia	= nr_seq_conta_proc_p
	and 	a.nr_seq_conta 	= nr_seq_conta_p 
	and 	a.ie_origem_conta not in ('A', 'Z')
	and 	b.nr_seq_conta_proc = a.nr_sequencia
	and		b.ie_status_faturamento	!= 'A'
	and		b.ie_cobrar_mensalidade	!= 'A'
	
union all

	select	a.nr_sequencia,
			b.vl_medico,
			b.vl_custo_operacional,
			b.vl_materiais,
			b.vl_lib_taxa_servico,
			b.vl_lib_taxa_co,
			b.vl_lib_taxa_material,
			b.vl_beneficiario,
			a.vl_liberado vl_pagto_total,
			(	select 	count(distinct nr_seq_prestador_pgto)
				from 	pls_conta_medica_resumo x
				where	x.nr_seq_conta = a.nr_seq_conta
				and 	x.nr_seq_conta_proc = a.nr_sequencia
				and 	x.ie_situacao = 'A') qt_item_resumo,
			(	
				select 	count(1)
				from	pls_conta_pos_estab_contab y
				where 	y.nr_seq_conta_proc = a.nr_sequencia
				and 	y.nr_seq_conta_pos = b.nr_sequencia) qt_reg_contab,
			(	
				select 	count(1)
				from	pls_conta_pos_estab_contab y
				where 	y.nr_seq_conta_proc = a.nr_sequencia
				and 	y.nr_seq_conta_pos = b.nr_sequencia
				and		y.vl_custo_operacional = 0
			) qt_reg_contab_zerado
	from	pls_conta_proc_v a,
			pls_conta_pos_estabelecido b
	where	a.nr_seq_conta	= nr_seq_conta_p 
	and 	coalesce(nr_seq_conta_proc_p::text, '') = '' 
	and 	coalesce(nr_seq_conta_mat_p::text, '') = ''
	and 	a.ie_origem_conta not in ('A', 'F', 'Z')
	and 	b.nr_seq_conta_proc = a.nr_sequencia
	and		b.ie_status_faturamento	!= 'A'
	and		b.ie_cobrar_mensalidade	!= 'A';	
	
c_ajuste_pagto CURSOR(	nr_seq_conta_proc_pc		pls_conta_proc.nr_sequencia%type)	 FOR
	SELECT	nr_sequencia,
			vl_liberado vl_lib_pagamento
	from	pls_conta_medica_resumo
	where	nr_seq_conta = nr_seq_conta_p
	and 	nr_seq_conta_proc = nr_seq_conta_proc_pc
	and 	ie_situacao = 'A';

limpeza_reg_contab_invalidos CURSOR( nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT 	a.nr_sequencia,
		coalesce(a.nr_lote_contabil,0) nr_lote_contabil,
		coalesce(a.nr_lote_contabil_prov,0) nr_lote_contabil_prov,
		coalesce(a.nr_seq_lote_fat,0) nr_seq_lote_fat
	from	pls_conta_pos_estab_contab a
	where	a.nr_seq_conta = nr_seq_conta_pc
	and (SELECT count(1)
		from 	pls_conta_medica_resumo
		where	nr_seq_conta = a.nr_seq_conta
		and 	nr_seq_prestador_pgto = a.nr_seq_prestador_pgto) = 0
	and (select	count(1)
		from	ptu_nota_servico_item
		where	nr_seq_conta_pos_contab = a.nr_sequencia) = 0
	and (select	count(1)
		from	pls_fatura_proc
		where	nr_seq_conta_pos_contab = a.nr_sequencia) = 0
	and (select	count(1)
		from	pls_fatura_mat
		where	nr_seq_conta_pos_contab = a.nr_sequencia) = 0;
	
limpeza_reg_contab_inv_refat CURSOR( 	nr_seq_conta_pc		pls_conta.nr_sequencia%type,
					dt_comparacao_pc	timestamp) FOR
	SELECT 	a.nr_sequencia,
		coalesce(a.nr_lote_contabil,0) nr_lote_contabil,
		coalesce(a.nr_lote_contabil_prov,0) nr_lote_contabil_prov,
		coalesce(a.nr_seq_lote_fat,0) nr_seq_lote_fat
	from	pls_conta_pos_estab_contab a
	where	a.nr_seq_conta = nr_seq_conta_pc
	and 	a.dt_atualizacao_nrec < dt_comparacao_pc
	and (SELECT count(1)
		from 	pls_conta_medica_resumo
		where	nr_seq_conta = a.nr_seq_conta
		and 	nr_seq_prestador_pgto = a.nr_seq_prestador_pgto) = 0
	and (select	count(1)
		from	ptu_nota_servico_item
		where	nr_seq_conta_pos_contab = a.nr_sequencia) = 0
	and (select	count(1)
		from	pls_fatura_proc
		where	nr_seq_conta_pos_contab = a.nr_sequencia) = 0
	and (select	count(1)
		from	pls_fatura_mat
		where	nr_seq_conta_pos_contab = a.nr_sequencia) = 0;
	
BEGIN

if (ie_acao_p = 'D') then
	ie_acao_w := 'F';
else
	ie_acao_w := ie_acao_p;
end if;

--Tratamento para casos onde ocorreu alteracao do prestador pagamento

--no resumo e sobraram registros contabeis vinculados a resumo antigo com prestador de pagametno

--nao existente mais nos resumos da conta. 
if ( ie_opcao_p = 'P') then

	if (ie_acao_p = 'D') then
	
		select 	clock_timestamp() - interval '1 days'/24
		into STRICT	dt_ref_w
		;
		
		--quando a origem e de refaturamento de saldo de discussao, e necessario uma abordagem diferente nesse controle, pois

		--naquela rotina, chamam a geracao dos valores contabeis a nivel de item e nao conta(tb inserem pos estab de maneira individual). Essa tratativa aqui,

		--impede que na segunda iteracao para cada conta, nao ocorra exclusao de informacoes recem geradas(por isso a data ref de uma hora atras)
		for r_cur_lipeza in limpeza_reg_contab_inv_refat(nr_seq_conta_p, dt_ref_w) loop
			
			--se nao tem vinculos com os lotes
			if (	r_cur_lipeza.nr_lote_contabil =0 and r_cur_lipeza.nr_lote_contabil_prov = 0 and
				r_cur_lipeza.nr_seq_lote_fat = 0) then
			
				update  pls_cta_pos_estab_ctb_log
				set	nr_seq_conta_pos_contab  = NULL
				where 	nr_seq_conta_pos_contab = r_cur_lipeza.nr_sequencia;
				
				delete from pls_conta_pos_estab_contab where nr_sequencia = r_cur_lipeza.nr_sequencia;
			
			end if;
		end loop;
	
	else
		for r_cur_lipeza in limpeza_reg_contab_invalidos(nr_seq_conta_p) loop
			
			--se nao tem vinculos com os lotes
			if (	r_cur_lipeza.nr_lote_contabil =0 and r_cur_lipeza.nr_lote_contabil_prov = 0 and
				r_cur_lipeza.nr_seq_lote_fat = 0) then
			
				update  pls_cta_pos_estab_ctb_log
				set	nr_seq_conta_pos_contab  = NULL
				where 	nr_seq_conta_pos_contab = r_cur_lipeza.nr_sequencia;
				
				delete from pls_conta_pos_estab_contab where nr_sequencia = r_cur_lipeza.nr_sequencia;
			
			end if;
		end loop;
	end if;

end if;

cd_estabelecimento_w := wheb_usuario_pck.get_cd_estabelecimento;

if (coalesce(cd_estabelecimento_w::text, '') = '') then

	select max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	pls_conta
	where 	nr_sequencia = nr_seq_conta_p;
	
end if;

select	max(coalesce(ie_status_prov_pagto,'NC')),
	max(coalesce(ie_vig_copart,'N'))
into STRICT	ie_status_prov_pagto_w,
	ie_vig_copart_w
from	pls_parametro_contabil
where	cd_estabelecimento	= cd_estabelecimento_w;
	

select max(ie_forma_gerar_reg_contab)
into STRICT	ie_forma_gerar_reg_contab_w
from	pls_parametro_faturamento
where 	cd_estabelecimento = cd_estabelecimento_w;

select	max(coalesce(ie_prop_glosa_tot_resumo, 'N'))
into STRICT	ie_prop_glosa_tot_resumo_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_w;


if (ie_opcao_p = 'C') then
	delete	from	pls_conta_copartic_contab a
	where	nr_seq_conta_copartic in (	SELECT distinct nr_sequencia
						from (select	nr_sequencia
							from	pls_conta_coparticipacao x
							where	x.nr_seq_conta	= nr_seq_conta_p
							and	coalesce(nr_seq_conta_proc_p::text, '') = ''
							and 	coalesce(nr_seq_conta_mat_p::text, '') = ''
							
union all

							SELECT	nr_sequencia
							from	pls_conta_coparticipacao x
							where	x.nr_seq_conta_proc	= nr_seq_conta_proc_p
							
union all

							select	nr_sequencia
							from	pls_conta_coparticipacao x
							where	x.nr_seq_conta_mat	= nr_seq_conta_mat_p) alias3)
	and	coalesce(a.nr_lote_contabil_prov,0) = 0
	and	coalesce(a.nr_lote_contabil_estorno,0) = 0;

end if;

for r_c01_w in C01(nr_seq_conta_p, nr_seq_conta_proc_p,nr_seq_conta_mat_p) loop

	if (ie_opcao_p	= 'C') then /* Aplica??o para valores de coparticipa??o */
	
		select	max(ie_ato_cooperado)
		into STRICT	ie_ato_cooperado_w
		from	pls_conta_medica_resumo
		where	nr_sequencia 	= r_c01_w.nr_seq_conta_resumo
		and	nr_seq_conta	= r_c01_w.nr_seq_conta;
		
		for r_c02_w in C02(nr_seq_conta_p, r_c01_w.nr_seq_conta_proc,r_c01_w.nr_seq_conta_mat) loop
			
			--Se existir registro na tabela com esse registro de pagamento, n?o cria novamente
			select	max(nr_sequencia)
			into STRICT	nr_seq_conta_contab_w
			from	pls_conta_copartic_contab
			where	nr_seq_conta		= r_c01_w.nr_seq_conta
			and	nr_seq_conta_resumo 	= r_c01_w.nr_seq_conta_resumo
			and	nr_seq_conta_copartic	= r_c02_w.nr_seq_conta_copartic;
			
			if (coalesce(nr_seq_conta_contab_w::text, '') = '') then
				select	count(1)
				into STRICT	qt_copart_conta_w
				from	pls_conta_copartic_contab
				where	nr_seq_conta		= r_c01_w.nr_seq_conta
				and	nr_seq_conta_copartic	= r_c02_w.nr_seq_conta_copartic
				and	nr_seq_prestador_pgto	= r_c01_w.nr_seq_prestador_pgto;
				
				if (qt_copart_conta_w > 0) then
					update	pls_conta_copartic_contab
					set	nr_seq_conta_resumo 	= r_c01_w.nr_seq_conta_resumo
					where	nr_seq_conta		= r_c01_w.nr_seq_conta
					and	nr_seq_conta_copartic	= r_c02_w.nr_seq_conta_copartic;
				else				
					--Existem casos que n?o tem valor liberado, por?m tem coparticipa??o, ent?o o percentual de pagamento ? 1
					if (r_c01_w.vl_lib_pagamento <> 0) then
						/* Obter o percentual do valor pago em rela??o ao liberado do item da conta m?dica */

						pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_lib_pagamento,r_c02_w.vl_liberado))::numeric,10);
					else

						-- caso tenha abertura de resumo de pagamento completamente glosa (parametrizavel), tem que verificar se a copart

						-- veio de um recurso de glosa, se s
						if (ie_prop_glosa_tot_resumo_w = 'S') and
							((r_c02_w.nr_seq_proc_rec IS NOT NULL AND r_c02_w.nr_seq_proc_rec::text <> '') or (r_c02_w.nr_seq_mat_rec IS NOT NULL AND r_c02_w.nr_seq_mat_rec::text <> '')) then

							vl_lib_resumo_rec_glosa_w := 0;

							if (r_c02_w.nr_seq_mat_rec IS NOT NULL AND r_c02_w.nr_seq_mat_rec::text <> '') then

								select	max(a.vl_liberado)
								into STRICT	vl_lib_resumo_rec_glosa_w
								from	pls_conta_rec_resumo_item	a
								where	a.nr_seq_conta_rec		= r_c02_w.nr_seq_conta_rec
								and	a.nr_seq_mat_rec		= r_c02_w.nr_seq_mat_rec
								and	a.nr_seq_prestador_pgto		= r_c01_w.nr_seq_prestador_pgto
								and	a.ie_situacao			= 'A';

							end if;

							if (r_c02_w.nr_seq_proc_rec IS NOT NULL AND r_c02_w.nr_seq_proc_rec::text <> '') then

								select	max(a.vl_liberado)
								into STRICT	vl_lib_resumo_rec_glosa_w
								from	pls_conta_rec_resumo_item	a
								where	a.nr_seq_conta_rec		= r_c02_w.nr_seq_conta_rec
								and	a.nr_seq_proc_rec		= r_c02_w.nr_seq_proc_rec
								and	a.nr_seq_prestador_pgto		= r_c01_w.nr_seq_prestador_pgto
								and	a.ie_situacao			= 'A';

							end if;

							-- se existir algum valor liberado no resumo de pagamento do recurso, entao considera como pagamento liberado 1

							-- isso acontece pq a copart de recurso de glosa tem apenas um item de recurso, e o item de recurso deve ter apenas um

							-- registro de pagamento de recurso. Nos casos que ocorre de ter prestador e participante no resumo de pagamento medico,

							-- e gerado um item de recurso para cada, criando uma relacao de 1 para 1.
							if (coalesce(vl_lib_resumo_rec_glosa_w, 0) > 0) then

								pr_pagamento_liberado_w := 1;
							else
								-- se nao existir valor liberado no resumo de recurso, entao o resumo de pagamento medico do c01 nao foi recursado, ou acatado

								-- pela operadora, logo o pagamento devera ser zero, deixando o registro zerado. conversado com o contabil e mensalidade, e o 

								-- comportamento foi considerado inofensivo para os respectivos grupos.
								pr_pagamento_liberado_w := 0;
							end if;



						else
						
							pr_pagamento_liberado_w	:= 1;
						end if;
					end if;
					
					/* Aplicar o percentual obtido sobre o valor de coparticipa??o */

					vl_contab_copartic_w	:= round((r_c02_w.vl_coparticipacao * pr_pagamento_liberado_w)::numeric,2);
					
					vl_ato_cooperado_w		:= 0;
					vl_ato_auxiliar_w		:= 0;
					vl_ato_nao_cooperado_w		:= 0;
					
					if (ie_ato_cooperado_w = '1') then
						vl_ato_cooperado_w	:= vl_contab_copartic_w;
					elsif (ie_ato_cooperado_w = '2') then
						vl_ato_auxiliar_w	:= vl_contab_copartic_w;
					elsif (ie_ato_cooperado_w = '3') then
						vl_ato_nao_cooperado_w	:= vl_contab_copartic_w;
					end if;
					
					if (ie_acao_w in ('N', 'A')) then

						select 	max(dt_mes_competencia)
						into STRICT	dt_mes_competencia_w
						from	pls_conta_v
						where 	nr_sequencia	= r_c01_w.nr_seq_conta;

						if	((ie_vig_copart_w = 'S') and (ie_status_prov_pagto_w = 'NC') and (obter_se_lote_contabil_gerado(42, dt_mes_competencia_w) = 'S')) then
							
							dt_mes_competencia_w := clock_timestamp();
						end if;
					
					elsif (ie_acao_w = 'R') then
						select	max(a.dt_competencia_lote)
						into STRICT	dt_mes_competencia_w
						from	pls_rec_glosa_protocolo a,
							pls_rec_glosa_conta b,
							pls_conta_coparticipacao c
						where	a.nr_sequencia = b.nr_seq_protocolo
						and	b.nr_sequencia = c.nr_seq_conta_rec
						and	c.nr_sequencia = r_c02_w.nr_seq_conta_copartic;
						
					elsif (ie_acao_w = 'F') then
						dt_mes_competencia_w := clock_timestamp();
					end if;

			
					insert into pls_conta_copartic_contab(
							nr_sequencia, nr_seq_conta_copartic, dt_atualizacao,
							nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, 
							nr_seq_conta_resumo, vl_coparticipacao, vl_provisao,
							nr_seq_conta,ie_ato_cooperado,vl_ato_cooperado,
							vl_ato_auxiliar,vl_ato_nao_cooperado, nr_seq_prestador_pgto,
							dt_mes_competencia
					) values (
							nextval('pls_conta_copartic_contab_seq'), r_c02_w.nr_seq_conta_copartic, clock_timestamp(), 
							nm_usuario_p, clock_timestamp(), 	nm_usuario_p, 
							r_c01_w.nr_seq_conta_resumo, vl_contab_copartic_w, vl_contab_copartic_w,
							r_c01_w.nr_seq_conta,ie_ato_cooperado_w,vl_ato_cooperado_w,
							vl_ato_auxiliar_w,vl_ato_nao_cooperado_w, r_c01_w.nr_seq_prestador_pgto,
							dt_mes_competencia_w
					);
				end if;
			end if;
		end loop;
		
		update	pls_conta_coparticipacao c
		set	vl_ato_cooperado	= (SELECT sum(ctb.vl_ato_cooperado) from pls_conta_copartic_contab ctb where ctb.nr_seq_conta_copartic = c.nr_sequencia),
			vl_ato_auxiliar		= (select sum(ctb.vl_ato_auxiliar) from pls_conta_copartic_contab ctb where ctb.nr_seq_conta_copartic = c.nr_sequencia),
			vl_ato_nao_cooperado	= (select sum(ctb.vl_ato_nao_cooperado) from pls_conta_copartic_contab ctb where ctb.nr_seq_conta_copartic = c.nr_sequencia)
		where	nr_seq_conta		= r_c01_w.nr_seq_conta;
		
	elsif (ie_opcao_p	= 'P') then /* Aplica??o para valores p?s-estabelecidos */
		
		for r_c03_w in C03(nr_seq_conta_p, r_c01_w.nr_seq_conta_proc,r_c01_w.nr_seq_conta_mat, ie_acao_w) loop
		
			nr_seq_participante_w	:= null;
			vl_lib_taxa_co_w	:= 0;
			vl_lib_taxa_material_w	:= 0;
			vl_lib_taxa_servico_w	:= 0;
			vl_medico_w		:= 0;
			vl_custo_operacional_w	:= 0;
			vl_materiais_w		:= 0;
			nr_seq_prev_w		:= null;
			
			if (coalesce(r_c03_w.nr_seq_prev_pos::text, '') = '') then
			
				if (r_c01_w.nr_seq_conta_proc IS NOT NULL AND r_c01_w.nr_seq_conta_proc::text <> '') then
				
					select  max(a.nr_sequencia)
					into STRICT	nr_seq_prev_w
					from	pls_conta_pos_estab_prev a,
						pls_conta_proc b
					where	a.nr_seq_conta_proc = b.nr_sequencia
					and 	b.cd_procedimento = r_c03_w.cd_procedimento
					and 	b.ie_origem_proced = r_c03_w.ie_origem_proced
					and	b.ie_status = 'M'
					and (	SELECT 	count(1)
							from 	pls_conta_pos_estab_contab x,
								pls_conta_pos_estabelecido y
							where	x.nr_seq_conta_pos = y.nr_sequencia
							and 	y.nr_seq_conta = nr_seq_conta_p
							and 	x.nr_seq_previa_pos = a.nr_sequencia) = 0
					and 	b.nr_seq_conta = nr_seq_conta_p;
				
				else
				
					select  max(a.nr_sequencia)
					into STRICT	nr_seq_prev_w
					from	pls_conta_pos_estab_prev a,
						pls_conta_mat b
					where	a.nr_seq_conta_mat = b.nr_sequencia
					and 	b.nr_seq_material = r_c03_w.nr_seq_material
					and	b.ie_status = 'M'
					and (	SELECT 	count(1)
							from 	pls_conta_pos_estab_contab x,
								pls_conta_pos_estabelecido y
							where	x.nr_seq_conta_pos = y.nr_sequencia
							and 	y.nr_seq_conta = nr_seq_conta_p
							and 	x.nr_seq_previa_pos = a.nr_sequencia) = 0
					and 	b.nr_seq_conta = nr_seq_conta_p;
				end if;
			
			end if;
			
			
			--caso senha apenas um registro na conta m?dica resumo pode continuar desta forma
			if (r_c01_w.nr_seq_conta_proc IS NOT NULL AND r_c01_w.nr_seq_conta_proc::text <> '') then
			
				select	count(1)
				into STRICT	qt_registro_w
				from	pls_conta_medica_resumo
				where	nr_seq_conta_proc	= r_c01_w.nr_seq_conta_proc
				and	nr_seq_conta		= r_c01_w.nr_seq_conta
				and	nr_seq_prestador_pgto	!= r_c01_w.nr_seq_prestador_pgto
				and	ie_tipo_item		!= 'I'
				and	ie_situacao		= 'A'
				and	coalesce(nr_seq_exame_coleta::text, '') = ''
				and	vl_liberado		> 0;
			else
				select	count(1)
				into STRICT	qt_registro_w
				from	pls_conta_medica_resumo
				where	nr_seq_conta_mat	= r_c01_w.nr_seq_conta_mat
				and	nr_seq_conta		= r_c01_w.nr_seq_conta
				and	nr_seq_prestador_pgto	!= r_c01_w.nr_seq_prestador_pgto
				and	ie_tipo_item		!= 'I'
				and	ie_situacao		= 'A'
				and	coalesce(nr_seq_exame_coleta::text, '') = '';
			end if;
			
			--obten??o dos valores quando todos foram agrupados em apenas um registro contabil
			if (qt_registro_w	= 0) then	
				vl_contab_pos_estab_part_w := 0;
				
				--Existem casos que n?o tem valor liberado, por?m tem p?s-estabelecido, ent?o o percentual de pagamento ? 1
				if (r_c01_w.vl_lib_pagamento <> 0) and (r_c03_w.vl_liberado	<>0 ) then
					/* Obter o percentual do valor pago em rela??o ao liberado do item da conta m?dica */

					pr_pagamento_liberado_w	:= round((dividir_sem_round( r_c01_w.vl_lib_pagamento, r_c03_w.vl_liberado))::numeric,10);
				elsif (r_c03_w.vl_glosa > 0 and r_c01_w.vl_glosa > 0) then
					pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_glosa, r_c03_w.vl_glosa))::numeric,10);
				else
					pr_pagamento_liberado_w	:= 1;
				end if;
				
				/* Aplicar o percentual obtido sobre o valor p?s estabelecido */

				vl_lib_taxa_co_w		:= round((r_c03_w.vl_lib_taxa_co * pr_pagamento_liberado_w)::numeric,2);
				vl_lib_taxa_material_w		:= round((r_c03_w.vl_lib_taxa_material * pr_pagamento_liberado_w)::numeric,2);
				vl_lib_taxa_servico_w		:= round((r_c03_w.vl_lib_taxa_servico * pr_pagamento_liberado_w)::numeric,2);
				vl_medico_w			:= round((r_c03_w.vl_medico * pr_pagamento_liberado_w)::numeric,2);
				vl_custo_operacional_w		:= round((r_c03_w.vl_custo_operacional * pr_pagamento_liberado_w)::numeric,2);
				vl_materiais_w			:= round((r_c03_w.vl_materiais * pr_pagamento_liberado_w)::numeric,2);
				vl_contab_pos_estab_part_w	:= (vl_medico_w + vl_lib_taxa_servico_w);
		
				if (r_c01_w.nr_seq_participante IS NOT NULL AND r_c01_w.nr_seq_participante::text <> '') then
				
					select	sum(vl_participante_pos)
					into STRICT	vl_participante_w
					from	pls_conta_pos_estab_partic	a
					where	nr_seq_proc_partic	= r_c01_w.nr_seq_participante
					and	not exists (SELECT	1
								from 	pls_conta_pos_estabelecido b
								where 	b.nr_sequencia 		= a.nr_seq_conta_pos
								and	b.ie_status_faturamento	= 'A');
					
					if (vl_participante_w	= vl_contab_pos_estab_part_w) or (vl_participante_w	= r_c03_w.vl_beneficiario) then
						nr_seq_participante_w	:= r_c01_w.nr_seq_participante;
					end if;
				end if;
				
			--agrupamento dos registros quando estes foram agrupados em mais de um registro contabil isto se faz necess?rio devido aos registros poderem ser aplicados em mais de um evento de faturamento
			elsif (qt_registro_w	= 1) then
			
			
				--Existem casos que n?o tem valor liberado, por?m tem p?s-estabelecido, ent?o o percentual de pagamento ? 1
				if (r_c01_w.vl_lib_pagamento <> 0) and (r_c03_w.vl_liberado	<>0 ) then
					/* Obter o percentual do valor pago em rela??o ao liberado do item da conta m?dica */

					pr_pagamento_liberado_w	:= round((dividir_sem_round( r_c01_w.vl_lib_pagamento, r_c03_w.vl_liberado))::numeric,10);
				elsif (r_c03_w.vl_glosa > 0 and r_c01_w.vl_glosa > 0) then
					pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_glosa, r_c03_w.vl_glosa))::numeric,10);
				else
					pr_pagamento_liberado_w	:= 1;
				end if;
				
				--para os valores de participante n?o pode haver valor de co e mat para n?o haver problema na contabiliza??o e gera??o do faturamento
				if (r_c01_w.nr_seq_participante IS NOT NULL AND r_c01_w.nr_seq_participante::text <> '') or (r_c01_w.ie_tipo_item	= 'C') then
					
					vl_lib_taxa_co_w	:= 0;
					vl_lib_taxa_material_w	:= 0;
					vl_lib_taxa_servico_w	:= round((r_c03_w.vl_lib_taxa_servico * pr_pagamento_liberado_w)::numeric,2);
					vl_medico_w		:= round((r_c03_w.vl_medico * pr_pagamento_liberado_w)::numeric,2);
					vl_custo_operacional_w	:= 0;
					vl_materiais_w		:= 0;
					nr_seq_participante_w	:= r_c01_w.nr_seq_participante;
				else
					vl_lib_taxa_co_w	:= round((r_c03_w.vl_lib_taxa_co * pr_pagamento_liberado_w)::numeric,2);
					vl_lib_taxa_material_w	:= r_c03_w.vl_lib_taxa_material;
					vl_lib_taxa_servico_w	:= 0;
					vl_medico_w		:= 0;
					--vl_custo_operacional_w	:= r_c03_w.vl_custo_operacional;
					vl_custo_operacional_w	:= round((r_c03_w.vl_custo_operacional * pr_pagamento_liberado_w)::numeric,2);
					vl_materiais_w		:= r_c03_w.vl_materiais;

				end if;
			--agrupamento dos registros quando estes foram agrupados em mais de um registro contabil isto se faz necess?rio devido aos registros poderem ser aplicados em mais de um evento de faturamento	
			else
				--para os valores de participante n?o pode haver valor de co e mat para n?o haver problema na contabiliza??o e gera??o do faturamento
				if (r_c01_w.nr_seq_participante IS NOT NULL AND r_c01_w.nr_seq_participante::text <> '') then
				
					select 	count(1)
					into STRICT	qt_pos_estab_partic_w
					from	pls_conta_pos_estab_partic	a
					where	nr_seq_proc_partic = r_c01_w.nr_seq_participante
					and	not exists (SELECT	1
								from 	pls_conta_pos_estabelecido b
								where 	b.nr_sequencia 		= a.nr_seq_conta_pos
								and	b.ie_status_faturamento	= 'A');
				
					if (qt_pos_estab_partic_w > 0) then
						--Existem casos que n?o tem valor liberado, por?m tem p?s-estabelecido, ent?o o percentual de pagamento ? 1
						select (coalesce(a.vl_participante_pos,0) -  coalesce(a.vl_administracao,0)),
							coalesce(a.vl_administracao,0)
						into STRICT	vl_participante_pos_w,
							vl_admin_partic_w
						from	pls_conta_pos_estab_partic	a
						where	nr_seq_proc_partic = r_c01_w.nr_seq_participante
						and	not exists (SELECT	1
									from 	pls_conta_pos_estabelecido b
									where 	b.nr_sequencia 		= a.nr_seq_conta_pos
									and	b.ie_status_faturamento	= 'A');
					else
						vl_participante_pos_w	:= 0;
						vl_admin_partic_w	:= 0;
					end if;
					
					if (vl_participante_pos_w	> 0) then
					
						vl_lib_taxa_servico_w	:= round((vl_admin_partic_w)::numeric,2);
						vl_medico_w		:= round((vl_participante_pos_w)::numeric,2);
						vl_lib_taxa_co_w	:= 0;
						vl_lib_taxa_material_w	:= 0;
						vl_custo_operacional_w	:= 0;
						vl_materiais_w		:= 0;
					else
						if (r_c01_w.vl_lib_pagamento <> 0) then
							/* Obter o percentual do valor pago em rela??o ao liberado do item da conta m?dica */

							pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_hm,r_c03_w.vl_medico))::numeric,10);
						elsif (r_c03_w.vl_glosa > 0 and r_c01_w.vl_glosa > 0) then
							pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_glosa, r_c03_w.vl_glosa))::numeric,10);
						else
							pr_pagamento_liberado_w	:= 1;
						end if;
					
						/* Aplicar o percentual obtido sobre o valor p?s estabelecido */

						vl_lib_taxa_servico_w	:= round((r_c03_w.vl_lib_taxa_servico * pr_pagamento_liberado_w)::numeric,2);
						vl_medico_w		:= round((r_c03_w.vl_medico * pr_pagamento_liberado_w)::numeric,2);
						vl_lib_taxa_co_w	:= 0;
						vl_lib_taxa_material_w	:= 0;
						vl_custo_operacional_w	:= 0;
						vl_materiais_w		:= 0;
					end if;
					
					nr_seq_participante_w	:= r_c01_w.nr_seq_participante;
				else
					--Existem casos que n?o tem valor liberado, por?m tem p?s-estabelecido, ent?o o percentual de pagamento ? 1
					if (r_c01_w.vl_lib_pagamento <> 0) then
						/* Obter o percentual do valor pago em rela??o ao liberado do item da conta m?dica */

						pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_co_pag,r_c03_w.vl_custo_operacional))::numeric,10);
					elsif (r_c03_w.vl_glosa > 0 and r_c01_w.vl_glosa > 0) then
						pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_glosa, r_c03_w.vl_glosa))::numeric,10);
					else
						pr_pagamento_liberado_w	:= 1;
					end if;
					
					vl_lib_taxa_co_w	:= round((r_c03_w.vl_lib_taxa_co * pr_pagamento_liberado_w)::numeric,2);
					vl_custo_operacional_w	:= round((r_c03_w.vl_custo_operacional * pr_pagamento_liberado_w)::numeric,2);
					
					pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c01_w.vl_materiais_pag,r_c03_w.vl_materiais))::numeric,10);
					
					vl_lib_taxa_material_w	:= round((r_c03_w.vl_lib_taxa_material * pr_pagamento_liberado_w)::numeric,2);
					vl_materiais_w		:= round((r_c03_w.vl_materiais * pr_pagamento_liberado_w)::numeric,2);
					vl_lib_taxa_servico_w	:= 0;
					vl_medico_w		:= 0;
				end if;
			end if;

			vl_contab_pos_estab_w	:= 	coalesce(vl_lib_taxa_co_w,0) + coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_lib_taxa_servico_w,0) +
							coalesce(vl_medico_w,0) + coalesce(vl_custo_operacional_w,0) + coalesce(vl_materiais_w,0);
							
			vl_administracao_w	:= 	coalesce(vl_lib_taxa_co_w,0) + coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_lib_taxa_servico_w,0);
			
			nr_seq_conta_contab_w	:= null;

			--Busca primeiro os registros de Discuss?o e Recurso de Glosa
			if (coalesce(nr_seq_conta_contab_w::text, '') = '') and (nr_seq_participante_w IS NOT NULL AND nr_seq_participante_w::text <> '') and (r_c03_w.nr_seq_disc_proc IS NOT NULL AND r_c03_w.nr_seq_disc_proc::text <> '') then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c01_w.nr_seq_conta
				and	nr_seq_disc_proc	= r_c03_w.nr_seq_disc_proc
				and	nr_seq_proc_partic 	= nr_seq_participante_w;
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c01_w.nr_seq_conta_proc IS NOT NULL AND r_c01_w.nr_seq_conta_proc::text <> '')and (r_c03_w.nr_seq_disc_proc IS NOT NULL AND r_c03_w.nr_seq_disc_proc::text <> '')then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c01_w.nr_seq_conta
				and	nr_seq_disc_proc	= r_c03_w.nr_seq_disc_proc
				and	nr_seq_conta_proc 	= r_c01_w.nr_seq_conta_proc
				and	nr_seq_prestador_pgto	= r_c01_w.nr_seq_prestador_pgto;
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c01_w.nr_seq_conta_mat IS NOT NULL AND r_c01_w.nr_seq_conta_mat::text <> '') and (r_c03_w.nr_seq_disc_mat IS NOT NULL AND r_c03_w.nr_seq_disc_mat::text <> '') then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c01_w.nr_seq_conta
				and	nr_seq_disc_mat		= r_c03_w.nr_seq_disc_mat
				and	nr_seq_conta_mat 	= r_c01_w.nr_seq_conta_mat
				and	nr_seq_prestador_pgto	= r_c01_w.nr_seq_prestador_pgto;
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (nr_seq_participante_w IS NOT NULL AND nr_seq_participante_w::text <> '') and (r_c03_w.nr_seq_proc_rec IS NOT NULL AND r_c03_w.nr_seq_proc_rec::text <> '')then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c01_w.nr_seq_conta
				and	nr_seq_proc_rec		= r_c03_w.nr_seq_proc_rec
				and	nr_seq_proc_partic 	= nr_seq_participante_w;
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c01_w.nr_seq_conta_proc IS NOT NULL AND r_c01_w.nr_seq_conta_proc::text <> '') and (r_c03_w.nr_seq_proc_rec IS NOT NULL AND r_c03_w.nr_seq_proc_rec::text <> '') then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c01_w.nr_seq_conta
				and	nr_seq_proc_rec		= r_c03_w.nr_seq_proc_rec
				and	nr_seq_conta_proc 	= r_c01_w.nr_seq_conta_proc
				and	nr_seq_prestador_pgto	= r_c01_w.nr_seq_prestador_pgto;
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c01_w.nr_seq_conta_mat IS NOT NULL AND r_c01_w.nr_seq_conta_mat::text <> '') and (r_c03_w.nr_seq_mat_rec IS NOT NULL AND r_c03_w.nr_seq_mat_rec::text <> '') then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c01_w.nr_seq_conta
				and	nr_seq_mat_rec		= r_c03_w.nr_seq_mat_rec
				and	nr_seq_conta_mat 	= r_c01_w.nr_seq_conta_mat
				and	nr_seq_prestador_pgto	= r_c01_w.nr_seq_prestador_pgto;
			end if;
			
			--Busca os demais registros, desde que o p?s-estabelecido n?o seja de recurso ou discuss?o
			if (coalesce(r_c03_w.nr_seq_disc_proc::text, '') = '') and (coalesce(r_c03_w.nr_seq_disc_mat::text, '') = '') and (coalesce(r_c03_w.nr_seq_proc_rec::text, '') = '') and (coalesce(r_c03_w.nr_seq_mat_rec::text, '') = '') then
			
				if (coalesce(nr_seq_conta_contab_w::text, '') = '') then
					select	max(t.nr_sequencia)
					into STRICT	nr_seq_conta_contab_w
					from	pls_conta_pos_estab_contab	t
					where	t.nr_seq_conta		= r_c01_w.nr_seq_conta
					and	t.nr_seq_conta_resumo 	= r_c01_w.nr_seq_conta_resumo
					and	coalesce(t.nr_seq_disc_proc::text, '') = ''
					and	coalesce(t.nr_seq_proc_rec::text, '') = ''
					and	coalesce(t.nr_seq_mat_rec::text, '') = ''
					and	coalesce(t.nr_seq_disc_mat::text, '') = ''
					and	exists (SELECT	1
							from	pls_conta_pos_estabelecido	c
							where	c.nr_sequencia		= t.nr_seq_conta_pos
							and	coalesce(c.ie_situacao,'A')	= 'A'
							and	c.ie_status_faturamento	!= 'A'
							and	c.ie_cobrar_mensalidade	!= 'A'
							and	ie_acao_w		!= 'CA'
							
union all

							SELECT	1
							from	pls_conta_pos_estabelecido	c
							where	c.nr_sequencia		= t.nr_seq_conta_pos
							and	coalesce(c.ie_situacao,'A')	= 'A'
							and	c.ie_status_faturamento	= 'A'
							and	ie_acao_w		= 'CA');
				end if;
				
				if (coalesce(nr_seq_conta_contab_w::text, '') = '') and (nr_seq_participante_w IS NOT NULL AND nr_seq_participante_w::text <> '') then
					
					select	max(t.nr_sequencia)
					into STRICT	nr_seq_conta_contab_w
					from	pls_conta_pos_estab_contab	t
					where	t.nr_seq_conta		= r_c01_w.nr_seq_conta
					and	t.nr_seq_proc_partic 	= nr_seq_participante_w
					and	coalesce(t.nr_seq_disc_proc::text, '') = ''
					and	coalesce(t.nr_seq_proc_rec::text, '') = ''
					and	exists (SELECT	1
							from	pls_conta_pos_estabelecido	c
							where	c.nr_sequencia		= t.nr_seq_conta_pos
							and	coalesce(c.ie_situacao,'A')	= 'A'
							and	c.ie_status_faturamento	!= 'A'
							and	c.ie_cobrar_mensalidade	!= 'A'
							and	ie_acao_w		!= 'CA'
							
union all

							SELECT	1
							from	pls_conta_pos_estabelecido	c
							where	c.nr_sequencia		= t.nr_seq_conta_pos
							and	coalesce(c.ie_situacao,'A')	= 'A'
							and	c.ie_status_faturamento	= 'A'
							and	ie_acao_w		= 'CA');
					
					--aaschlote 26/02/2016 OS 965510 - Os registros antigos n?o existiam o conta participante, ent?o coloquei a verifica??o abaixo para os registros n?o ficarem duplicados
					if (coalesce(nr_seq_conta_contab_w::text, '') = '') then
					
						select	max(nr_sequencia)
						into STRICT	nr_seq_conta_contab_w
						from	pls_conta_pos_estab_contab	t
						where	t.nr_seq_conta		= r_c01_w.nr_seq_conta
						and	t.nr_seq_conta_proc 	= r_c01_w.nr_seq_conta_proc
						and	t.nr_seq_prestador_pgto	= r_c01_w.nr_seq_prestador_pgto
						and	coalesce(t.nr_seq_disc_proc::text, '') = ''
						and	coalesce(t.nr_seq_proc_rec::text, '') = ''
						and	coalesce(t.nr_seq_proc_partic::text, '') = ''
						and	exists (SELECT	1
								from	pls_conta_pos_estabelecido	c
								where	c.nr_sequencia		= t.nr_seq_conta_pos
								and	coalesce(c.ie_situacao,'A')	= 'A'
								and	c.ie_status_faturamento	!= 'A'
								and	c.ie_cobrar_mensalidade	!= 'A'
								and	ie_acao_w		!= 'CA'
								
union all

								SELECT	1
								from	pls_conta_pos_estabelecido	c
								where	c.nr_sequencia		= t.nr_seq_conta_pos
								and	coalesce(c.ie_situacao,'A')	= 'A'
								and	c.ie_status_faturamento	= 'A'
								and	ie_acao_w		= 'CA');
					end if;
					
				elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c01_w.nr_seq_conta_proc IS NOT NULL AND r_c01_w.nr_seq_conta_proc::text <> '') then
					
					select	max(t.nr_sequencia)
					into STRICT	nr_seq_conta_contab_w
					from	pls_conta_pos_estab_contab	t
					where	t.nr_seq_conta		= r_c01_w.nr_seq_conta
					and	t.nr_seq_conta_proc 	= r_c01_w.nr_seq_conta_proc
					and	t.nr_seq_prestador_pgto	= r_c01_w.nr_seq_prestador_pgto
					and	coalesce(t.nr_seq_disc_proc::text, '') = ''
					and	coalesce(t.nr_seq_proc_rec::text, '') = ''
					and	exists (SELECT	1
							from	pls_conta_pos_estabelecido	c
							where	c.nr_sequencia		= t.nr_seq_conta_pos
							and	coalesce(c.ie_situacao,'A')	= 'A'
							and	c.ie_status_faturamento	!= 'A'
							and	c.ie_cobrar_mensalidade	!= 'A'
							and	ie_acao_w		!= 'CA'
							
union all

							SELECT	1
							from	pls_conta_pos_estabelecido	c
							where	c.nr_sequencia		= t.nr_seq_conta_pos
							and	coalesce(c.ie_situacao,'A')	= 'A'
							and	c.ie_status_faturamento	= 'A'
							and	ie_acao_w		= 'CA');
					
				elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c01_w.nr_seq_conta_mat IS NOT NULL AND r_c01_w.nr_seq_conta_mat::text <> '') then
					
					select	max(nr_sequencia)
					into STRICT	nr_seq_conta_contab_w
					from	pls_conta_pos_estab_contab	t
					where	t.nr_seq_conta		= r_c01_w.nr_seq_conta
					and	t.nr_seq_conta_mat 	= r_c01_w.nr_seq_conta_mat
					and	t.nr_seq_prestador_pgto	= r_c01_w.nr_seq_prestador_pgto
					and	coalesce(t.nr_seq_mat_rec::text, '') = ''
					and	coalesce(t.nr_seq_disc_mat::text, '') = ''
					and	exists (SELECT	1
							from	pls_conta_pos_estabelecido	c
							where	c.nr_sequencia		= t.nr_seq_conta_pos
							and	coalesce(c.ie_situacao,'A')	= 'A'
							and	c.ie_status_faturamento	!= 'A'
							and	c.ie_cobrar_mensalidade	!= 'A'
							and	ie_acao_w		!= 'CA'
							
union all

							SELECT	1
							from	pls_conta_pos_estabelecido	c
							where	c.nr_sequencia		= t.nr_seq_conta_pos
							and	coalesce(c.ie_situacao,'A')	= 'A'
							and	c.ie_status_faturamento	= 'A'
							and	ie_acao_w		= 'CA');
				end if;
			end if;
			
			if (ie_acao_w in ('N', 'CA')) then
				select 	max(dt_mes_competencia)
				into STRICT	dt_mes_competencia_w
				from	pls_conta_v
				where 	nr_sequencia	= r_c01_w.nr_seq_conta;
				
			elsif (ie_acao_w = 'R') then
				select	max(a.dt_competencia_lote)
				into STRICT	dt_mes_competencia_w
				from	pls_rec_glosa_protocolo a,
					pls_rec_glosa_conta b,
					pls_conta_pos_estabelecido c
				where	a.nr_sequencia = b.nr_seq_protocolo
				and	b.nr_sequencia = c.nr_seq_conta_rec
				and	c.nr_sequencia = r_c03_w.nr_sequencia;
				
			elsif (ie_acao_w = 'F') then
				dt_mes_competencia_w := clock_timestamp();
			end if;
			
			if (coalesce(nr_seq_conta_contab_w::text, '') = '') then
			
				insert into pls_conta_pos_estab_contab(
						nr_sequencia, nr_seq_conta_pos, dt_atualizacao,
						nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, 
						nr_seq_conta_resumo, vl_custo_operacional, vl_provisao,
						nr_seq_conta, vl_administracao, nr_seq_prestador_pgto,
						nr_seq_conta_proc, nr_seq_conta_mat, vl_lib_taxa_co,
						vl_lib_taxa_material,vl_lib_taxa_servico, vl_medico,
						vl_custo_operacional_ind, vl_materiais, nr_seq_proc_partic,
						nr_seq_disc_mat, nr_seq_disc_proc, nr_seq_mat_rec,
						nr_seq_proc_rec, dt_mes_competencia, nr_seq_previa_pos
				) values (
						nextval('pls_conta_pos_estab_contab_seq'), r_c03_w.nr_sequencia, clock_timestamp(), 
						nm_usuario_p, clock_timestamp(), nm_usuario_p, 
						r_c01_w.nr_seq_conta_resumo, vl_contab_pos_estab_w, vl_contab_pos_estab_w,
						r_c01_w.nr_seq_conta, vl_administracao_w, r_c01_w.nr_seq_prestador_pgto,
						r_c01_w.nr_seq_conta_proc, r_c01_w.nr_seq_conta_mat, vl_lib_taxa_co_w,
						vl_lib_taxa_material_w,	vl_lib_taxa_servico_w, vl_medico_w,
						vl_custo_operacional_w, vl_materiais_w, nr_seq_participante_w,
						r_c03_w.nr_seq_disc_mat, r_c03_w.nr_seq_disc_proc, r_c03_w.nr_seq_mat_rec,
						r_c03_w.nr_seq_proc_rec, dt_mes_competencia_w, coalesce(r_c03_w.nr_seq_prev_pos, nr_seq_prev_w)
				);
			else
			
				update	pls_conta_pos_estab_contab
				set	nr_seq_conta_resumo	= r_c01_w.nr_seq_conta_resumo,
					vl_custo_operacional	= vl_contab_pos_estab_w, 
					vl_administracao	= vl_administracao_w, 
					vl_lib_taxa_co		= vl_lib_taxa_co_w,
					vl_lib_taxa_material	= vl_lib_taxa_material_w,
					vl_lib_taxa_servico	= vl_lib_taxa_servico_w, 
					vl_medico		= vl_medico_w,
					vl_custo_operacional_ind= vl_custo_operacional_w, 
					vl_materiais		= vl_materiais_w,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					nr_seq_previa_pos	= coalesce(r_c03_w.nr_seq_prev_pos,nr_seq_prev_w)
				where	nr_sequencia		= nr_seq_conta_contab_w;
			end if;
		end loop;
	end if;
end loop;

for r_c06_w in C06(nr_seq_conta_p, nr_seq_conta_proc_p,nr_seq_conta_mat_p) loop

	if (ie_opcao_p	= 'C') then /* Aplica??o para valores de coparticipa??o */
		if (r_c06_w.nr_seq_conta_proc IS NOT NULL AND r_c06_w.nr_seq_conta_proc::text <> '') then
		
			select	max(ie_ato_cooperado)
			into STRICT	ie_ato_cooperado_w
			from	pls_conta_proc
			where	nr_sequencia = r_c06_w.nr_seq_conta_proc;
			
		elsif (r_c06_w.nr_seq_conta_mat IS NOT NULL AND r_c06_w.nr_seq_conta_mat::text <> '') then
		
			select	max(ie_ato_cooperado)
			into STRICT	ie_ato_cooperado_w
			from	pls_conta_mat
			where	nr_sequencia = r_c06_w.nr_seq_conta_mat;
		end if;
	
		for r_c02_w in C02(nr_seq_conta_p, r_c06_w.nr_seq_conta_proc,r_c06_w.nr_seq_conta_mat) loop
			
			--Se existir registro na tabela, n?o cria novamente
			select	max(nr_sequencia)
			into STRICT	nr_seq_conta_contab_w
			from	pls_conta_copartic_contab
			where	nr_seq_conta_copartic		= r_c02_w.nr_seq_conta_copartic;
			
			if (coalesce(nr_seq_conta_contab_w::text, '') = '') then
				--Existem casos que n?o tem valor liberado, por?m tem coparticipa??o, ent?o o percentual de pagamento ? 1
				if (r_c06_w.vl_lib_pagamento <> 0) then
					/* Obter o percentual do valor pago em rela??o ao liberado do item da conta m?dica */

					pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c06_w.vl_lib_pagamento,r_c02_w.vl_liberado))::numeric,10);
				else
					pr_pagamento_liberado_w	:= 1;
				end if;
				
				/* Aplicar o percentual obtido sobre o valor de coparticipa??o */

				vl_contab_copartic_w	:= round((r_c02_w.vl_coparticipacao * pr_pagamento_liberado_w)::numeric,2);
				
				vl_ato_cooperado_w		:= 0;
				vl_ato_auxiliar_w		:= 0;
				vl_ato_nao_cooperado_w		:= 0;
				
				if (ie_ato_cooperado_w = '1') then
					vl_ato_cooperado_w	:= vl_contab_copartic_w;
				elsif (ie_ato_cooperado_w = '2') then
					vl_ato_auxiliar_w	:= vl_contab_copartic_w;
				elsif (ie_ato_cooperado_w = '3') then
					vl_ato_nao_cooperado_w	:= vl_contab_copartic_w;
				end if;
				
				select 	max(dt_mes_competencia)
				into STRICT	dt_mes_competencia_w
				from	pls_conta_v
				where 	nr_sequencia	= r_c06_w.nr_seq_conta;
				
				if	((ie_vig_copart_w = 'S') and (ie_status_prov_pagto_w = 'NC') and (obter_se_lote_contabil_gerado(42, dt_mes_competencia_w) = 'S')) then
					
					dt_mes_competencia_w := clock_timestamp();
				end if;
				
				
				insert into pls_conta_copartic_contab(
						nr_sequencia, 				nr_seq_conta_copartic, 					dt_atualizacao,
						nm_usuario, 				dt_atualizacao_nrec, 					nm_usuario_nrec, 
						nr_seq_conta_resumo, 			vl_coparticipacao, 					vl_provisao,
						nr_seq_conta, 				dt_mes_competencia,					vl_ato_cooperado,
						vl_ato_auxiliar,			vl_ato_nao_cooperado
				) values (			
						nextval('pls_conta_copartic_contab_seq'), r_c02_w.nr_seq_conta_copartic, 				clock_timestamp(), 
						nm_usuario_p, 				clock_timestamp(), 						nm_usuario_p, 
						r_c06_w.nr_seq_conta_resumo,		vl_contab_copartic_w, 					vl_contab_copartic_w,
						r_c06_w.nr_seq_conta, 			CASE WHEN ie_acao_w='F' THEN clock_timestamp()  ELSE dt_mes_competencia_w END ,	vl_ato_cooperado_w,
						vl_ato_auxiliar_w,			vl_ato_nao_cooperado_w
				);
				
				update	pls_conta_coparticipacao
				set	vl_ato_cooperado 	= vl_ato_cooperado_w,
					vl_ato_auxiliar		= vl_ato_auxiliar_w,
					vl_ato_nao_cooperado 	= vl_ato_nao_cooperado_w
				where	nr_sequencia 		= r_c02_w.nr_seq_conta_copartic;
			end if;
		end loop;
	elsif (ie_opcao_p	= 'P') then /* Aplica??o para valores p?s-estabelecidos */
		for r_c03_w in C03(nr_seq_conta_p, r_c06_w.nr_seq_conta_proc,r_c06_w.nr_seq_conta_mat, ie_acao_w) loop
			
			nr_seq_conta_contab_w	:= null;
			nr_seq_prev_w		:= null;
			
			if (coalesce(r_c03_w.nr_seq_prev_pos::text, '') = '') then
			
				if (r_c06_w.nr_seq_conta_proc IS NOT NULL AND r_c06_w.nr_seq_conta_proc::text <> '') then
				
					select  max(a.nr_sequencia)
					into STRICT	nr_seq_prev_w
					from	pls_conta_pos_estab_prev a,
						pls_conta_proc b
					where	a.nr_seq_conta_proc = b.nr_sequencia
					and 	b.cd_procedimento = r_c03_w.cd_procedimento
					and 	b.ie_origem_proced = r_c03_w.ie_origem_proced
					and	b.ie_status = 'M'
					and (	SELECT 	count(1)
							from 	pls_conta_pos_estab_contab x,
								pls_conta_pos_estabelecido y
							where	x.nr_seq_conta_pos = y.nr_sequencia
							and 	y.nr_seq_conta = nr_seq_conta_p
							and 	x.nr_seq_previa_pos = a.nr_sequencia) = 0
					and 	b.nr_seq_conta = nr_seq_conta_p;
				
				else
				
					select  max(a.nr_sequencia)
					into STRICT	nr_seq_prev_w
					from	pls_conta_pos_estab_prev a,
						pls_conta_mat b
					where	a.nr_seq_conta_mat = b.nr_sequencia
					and 	b.nr_seq_material = r_c03_w.nr_seq_material
					and	b.ie_status = 'M'
					and (	SELECT 	count(1)
							from 	pls_conta_pos_estab_contab x,
								pls_conta_pos_estabelecido y
							where	x.nr_seq_conta_pos = y.nr_sequencia
							and 	y.nr_seq_conta = nr_seq_conta_p
							and 	x.nr_seq_previa_pos = a.nr_sequencia) = 0
					and 	b.nr_seq_conta = nr_seq_conta_p;
				end if;
				
					
			
			end if;
			
			
			--Existem casos que n?o tem valor liberado, por?m tem p?s-estabelecido, ent?o o percentual de pagamento ? 1
			if (r_c06_w.vl_lib_pagamento <> 0) then
				/* Obter o percentual do valor pago em rela??o ao liberado do item da conta m?dica */

				pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c06_w.vl_lib_pagamento,r_c03_w.vl_liberado))::numeric,10);
			else
				pr_pagamento_liberado_w	:= 1;
			end if;
			
			/* Aplicar o percentual obtido sobre o valor p?s estabelecido */

			vl_lib_taxa_co_w	:= round((r_c03_w.vl_lib_taxa_co * pr_pagamento_liberado_w)::numeric,2);
			vl_lib_taxa_material_w	:= round((r_c03_w.vl_lib_taxa_material * pr_pagamento_liberado_w)::numeric,2);
			vl_lib_taxa_servico_w	:= round((r_c03_w.vl_lib_taxa_servico * pr_pagamento_liberado_w)::numeric,2);
			vl_medico_w		:= round((r_c03_w.vl_medico * pr_pagamento_liberado_w)::numeric,2);
			vl_custo_operacional_w	:= round((r_c03_w.vl_custo_operacional * pr_pagamento_liberado_w)::numeric,2);
			vl_materiais_w		:= round((r_c03_w.vl_materiais * pr_pagamento_liberado_w)::numeric,2);
			
			vl_contab_pos_estab_w	:= 	coalesce(vl_lib_taxa_co_w,0) + coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_lib_taxa_servico_w,0) +
							coalesce(vl_medico_w,0) + coalesce(vl_custo_operacional_w,0) + coalesce(vl_materiais_w,0);
			vl_administracao_w	:= 	coalesce(vl_lib_taxa_co_w,0) + coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_lib_taxa_servico_w,0);
			
			if (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c06_w.nr_seq_conta_proc IS NOT NULL AND r_c06_w.nr_seq_conta_proc::text <> '')and (r_c03_w.nr_seq_disc_proc IS NOT NULL AND r_c03_w.nr_seq_disc_proc::text <> '')then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c06_w.nr_seq_conta
				and	nr_seq_disc_proc	= r_c03_w.nr_seq_disc_proc
				and	nr_seq_conta_proc 	= r_c06_w.nr_seq_conta_proc;
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c06_w.nr_seq_conta_mat IS NOT NULL AND r_c06_w.nr_seq_conta_mat::text <> '') and (r_c03_w.nr_seq_disc_mat IS NOT NULL AND r_c03_w.nr_seq_disc_mat::text <> '') then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c06_w.nr_seq_conta
				and	nr_seq_disc_mat		= r_c03_w.nr_seq_disc_mat
				and	nr_seq_conta_mat 	= r_c06_w.nr_seq_conta_mat;
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c06_w.nr_seq_conta_proc IS NOT NULL AND r_c06_w.nr_seq_conta_proc::text <> '') and (r_c03_w.nr_seq_proc_rec IS NOT NULL AND r_c03_w.nr_seq_proc_rec::text <> '') then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c06_w.nr_seq_conta
				and	nr_seq_proc_rec		= r_c03_w.nr_seq_proc_rec
				and	nr_seq_conta_proc 	= r_c06_w.nr_seq_conta_proc;
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c06_w.nr_seq_conta_mat IS NOT NULL AND r_c06_w.nr_seq_conta_mat::text <> '') and (r_c03_w.nr_seq_mat_rec IS NOT NULL AND r_c03_w.nr_seq_mat_rec::text <> '') then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta		= r_c06_w.nr_seq_conta
				and	nr_seq_mat_rec		= r_c03_w.nr_seq_mat_rec
				and	nr_seq_conta_mat 	= r_c06_w.nr_seq_conta_mat;
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c06_w.nr_seq_conta_proc IS NOT NULL AND r_c06_w.nr_seq_conta_proc::text <> '') then
				
				select	max(t.nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab	t
				where	t.nr_seq_conta		= r_c06_w.nr_seq_conta
				and	t.nr_seq_conta_proc 	= r_c06_w.nr_seq_conta_proc
				and	coalesce(t.nr_seq_disc_proc::text, '') = ''
				and	coalesce(t.nr_seq_proc_rec::text, '') = ''
				and	exists (SELECT	1
						from	pls_conta_pos_estabelecido	c
						where	c.nr_sequencia		= t.nr_seq_conta_pos
						and	coalesce(c.ie_situacao,'A')	= 'A'
						and	c.ie_status_faturamento	!= 'A'
						and	c.ie_cobrar_mensalidade	!= 'A'
						and	ie_acao_w		!= 'CA'
						
union all

						SELECT	1
						from	pls_conta_pos_estabelecido	c
						where	c.nr_sequencia		= t.nr_seq_conta_pos
						and	coalesce(c.ie_situacao,'A')	= 'A'
						and	c.ie_status_faturamento	= 'A'
						and	ie_acao_w		= 'CA');
				
			elsif (coalesce(nr_seq_conta_contab_w::text, '') = '') and (r_c06_w.nr_seq_conta_mat IS NOT NULL AND r_c06_w.nr_seq_conta_mat::text <> '') then
				
				select	max(t.nr_sequencia)
				into STRICT	nr_seq_conta_contab_w
				from	pls_conta_pos_estab_contab	t
				where	t.nr_seq_conta		= r_c06_w.nr_seq_conta
				and	t.nr_seq_conta_mat 	= r_c06_w.nr_seq_conta_mat
				and	coalesce(t.nr_seq_mat_rec::text, '') = ''
				and	coalesce(t.nr_seq_disc_mat::text, '') = ''
				and	exists (SELECT	1
						from	pls_conta_pos_estabelecido	c
						where	c.nr_sequencia		= t.nr_seq_conta_pos
						and	coalesce(c.ie_situacao,'A')	= 'A'
						and	c.ie_status_faturamento	!= 'A'
						and	c.ie_cobrar_mensalidade	!= 'A'
						and	ie_acao_w		!= 'CA'
						
union all

						SELECT	1
						from	pls_conta_pos_estabelecido	c
						where	c.nr_sequencia		= t.nr_seq_conta_pos
						and	coalesce(c.ie_situacao,'A')	= 'A'
						and	c.ie_status_faturamento	= 'A'
						and	ie_acao_w		= 'CA');
				
			end if;
			
			select 	max(dt_mes_competencia)
			into STRICT	dt_mes_competencia_w
			from	pls_conta_v
			where 	nr_sequencia	= r_c06_w.nr_seq_conta;
			
			commit;
			if (coalesce(nr_seq_conta_contab_w::text, '') = '') then
			
				insert into pls_conta_pos_estab_contab(
						nr_sequencia, nr_seq_conta_pos, dt_atualizacao,
						nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, 
						nr_seq_conta_resumo, vl_custo_operacional, vl_provisao,
						nr_seq_conta, vl_administracao, nr_seq_prestador_pgto,
						nr_seq_conta_proc, nr_seq_conta_mat, vl_lib_taxa_co,
						vl_lib_taxa_material,vl_lib_taxa_servico, vl_medico,
						vl_custo_operacional_ind, vl_materiais,
						nr_seq_disc_mat, nr_seq_disc_proc, nr_seq_mat_rec,
						nr_seq_proc_rec, dt_mes_competencia, nr_seq_previa_pos
				) values (
						nextval('pls_conta_pos_estab_contab_seq'), r_c03_w.nr_sequencia, clock_timestamp(), 
						nm_usuario_p, clock_timestamp(), nm_usuario_p, 
						r_c06_w.nr_seq_conta_resumo, vl_contab_pos_estab_w, vl_contab_pos_estab_w,
						r_c06_w.nr_seq_conta, vl_administracao_w, r_c06_w.nr_seq_prestador_pgto,
						r_c06_w.nr_seq_conta_proc, r_c06_w.nr_seq_conta_mat, vl_lib_taxa_co_w,
						vl_lib_taxa_material_w,	vl_lib_taxa_servico_w, vl_medico_w,
						vl_custo_operacional_w, vl_materiais_w,
						r_c03_w.nr_seq_disc_mat, r_c03_w.nr_seq_disc_proc, r_c03_w.nr_seq_mat_rec,
						r_c03_w.nr_seq_proc_rec, CASE WHEN ie_acao_w='F' THEN clock_timestamp()  ELSE dt_mes_competencia_w END ,
						coalesce(r_c03_w.nr_seq_prev_pos, nr_seq_prev_w)
				);
			else
				update	pls_conta_pos_estab_contab
				set	nr_seq_conta_resumo	= r_c06_w.nr_seq_conta_resumo,
					vl_custo_operacional	= vl_contab_pos_estab_w, 
					vl_administracao	= vl_administracao_w, 
					vl_lib_taxa_co		= vl_lib_taxa_co_w,
					vl_lib_taxa_material	= vl_lib_taxa_material_w,
					vl_lib_taxa_servico	= vl_lib_taxa_servico_w, 
					vl_medico		= vl_medico_w,
					vl_custo_operacional_ind= vl_custo_operacional_w, 
					vl_materiais		= vl_materiais_w,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp(),
					nr_seq_previa_pos	= coalesce(r_c03_w.nr_seq_prev_pos, nr_seq_prev_w)
				where	nr_sequencia		= nr_seq_conta_contab_w;
			end if;
		end loop;
	end if;
end loop;

--Ajustes de valores gerados na primeira parte da rotina--


--Faz ajuste dos valores da pls_conta_copartic_contab. Sobretudo quando tiver mais de um

-- Pode haver diferen?as entre o valor provisionado e o valor efetivamente pago
for r_c04_w in c04(nr_seq_conta_p) loop

	select  sum(vl_coparticipacao),
		sum(vl_provisao)
	into STRICT  	vl_contab_copartic_w,
		vl_contab_provisao_w
	from  	pls_conta_coparticipacao
	where  	nr_sequencia  = r_c04_w.nr_seq_conta_copartic;

	if (coalesce(vl_contab_copartic_w,0)  != coalesce(r_c04_w.vl_contab,0)) then

		vl_diferenca_w    := coalesce(vl_contab_copartic_w,0) - coalesce(r_c04_w.vl_contab,0);
		vl_diferenca_prov_w := coalesce(vl_contab_provisao_w,0) - coalesce(r_c04_w.vl_provisao,0);

		if (vl_diferenca_w  <> 0 or vl_diferenca_prov_w <> 0) then	
	
			--Percorre cada registro da pls_conta_copartic_contab para calcular a propor??o em rela??o ao agrupamento por conta coparticipa??o

			--e aplicar o ajuste proporcional
			for r_c08_w in C08(r_c04_w.nr_seq_conta_copartic) loop
			
				--Calcula o valor proporcional do registro da  pls_conta_copartic_contab em rela??o ao registros da mesma tabela vinculados ao

				--registro de coparticipa??o atual
				vl_proporcao_copart_w := round((dividir_sem_round(r_c08_w.vl_contab, r_c04_w.vl_contab))::numeric,10);
				vl_proporcao_prov_w   := round((dividir_sem_round(r_c08_w.vl_provisao, r_c04_w.vl_provisao))::numeric,10);
			
				--se a diferen?a for positiva ou negativa esse update ? adequado para ambos
				update  pls_conta_copartic_contab
				set   	vl_coparticipacao = coalesce(vl_coparticipacao,0) + (vl_diferenca_w * vl_proporcao_copart_w) ,
					vl_provisao   	  = coalesce(vl_provisao,0)  + (vl_diferenca_prov_w * vl_proporcao_prov_w)
				where  nr_sequencia       = r_c08_w.nr_sequencia;
			end loop;
		end if;

		select  sum(vl_coparticipacao)
		into STRICT   vl_validacao_w
		from   pls_conta_copartic_contab
		where  nr_seq_conta_copartic  = r_c04_w.nr_seq_conta_copartic;

		if (coalesce(vl_contab_copartic_w,0)  != coalesce(vl_validacao_w,0)) then
		
			vl_diferenca_w := coalesce(vl_contab_copartic_w,0) - coalesce(vl_validacao_w,0);
			vl_diferenca_prov_w := coalesce(vl_contab_provisao_w,0) - coalesce(vl_provisao_w,0);
			
			if (vl_diferenca_w between(vl_diferenca_valida_w * -1) and vl_diferenca_valida_w) and (vl_diferenca_w <> 0) then
				update	pls_conta_copartic_contab
				set	vl_coparticipacao = coalesce(vl_coparticipacao,0) + vl_diferenca_w
				where	nr_sequencia in (	SELECT	max(nr_sequencia)
								from	pls_conta_copartic_contab
								where	nr_seq_conta_copartic = r_c04_w.nr_seq_conta_copartic);
			end if;
			
			if (vl_diferenca_prov_w between(vl_diferenca_valida_w * -1) and vl_diferenca_valida_w) and (vl_diferenca_prov_w <> 0) then
				update	pls_conta_copartic_contab
				set	vl_provisao = coalesce(vl_provisao,0) + vl_diferenca_prov_w
				where	nr_sequencia in (	SELECT	max(nr_sequencia)
								from	pls_conta_copartic_contab
								where	nr_seq_conta_copartic = r_c04_w.nr_seq_conta_copartic);
			end if;
			
			select 	sum(vl_coparticipacao)
			into STRICT   	vl_validacao_w
			from   	pls_conta_copartic_contab
			where  	nr_seq_conta_copartic  = r_c04_w.nr_seq_conta_copartic;
		
			if (coalesce(vl_contab_copartic_w,0)  != coalesce(vl_validacao_w,0)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(339866,  ';VL_ADIC=' || vl_contab_copartic_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
					';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_CONTA_COPART='||r_c04_w.nr_seq_conta_copartic);
			end if;
		end if;
	end if;
end loop;

--Ajuste de diverg?ncia de valores de ato cooperado(Pode ocorrer quando um registro de coparticipa??o seja aberto em algumas 

--linhas na conta_copartic_contab, devido a proporcionalidade dos prestadores pagto com valor liberado do procedimento)
for r_c04_atos in C04_vl_atos(nr_seq_conta_p) loop
			
			
	vl_diferenca_w := r_c04_atos.vl_copartic_ok - r_c04_atos.vl_soma_atos;
	if	((vl_diferenca_w between(vl_diferenca_valida_w * -1) and vl_diferenca_valida_w) and (vl_diferenca_w <> 0)) then
		
		--Obt?m maior valor total dos atos cooperados
		select  max(coalesce(vl_ato_cooperado,0) + coalesce(vl_ato_auxiliar,0) + coalesce(vl_ato_nao_cooperado,0))
		into STRICT	vl_max_total_atos_w
		from 	pls_conta_copartic_contab
		where 	nr_seq_conta_copartic = r_c04_atos.nr_seq_conta_copartic;
		
		--Obt?m uma sequ?ncia de copartic contab com o maior valor total de atos cooperados, esse registro receber? o 

		-- ajueste de valor de ato cooperado
		select 	max(nr_sequencia)
		into STRICT	nr_seq_vl_atos_ajustar_w
		from 	pls_conta_copartic_contab
		where 	nr_seq_conta_copartic = r_c04_atos.nr_seq_conta_copartic
		and (coalesce(vl_ato_cooperado,0) + coalesce(vl_ato_auxiliar,0)
			 + coalesce(vl_ato_nao_cooperado,0)) = vl_max_total_atos_w;
				

		--Identifica qual dos 3 campos de valor de ato possui maior valor, af?m de atribuir a ele a diferen?a(que ser? de 1 ou 2 centavos)
		select 	coalesce(vl_ato_cooperado,0) vl_ato_coop,
			coalesce(vl_ato_auxiliar, 0) vl_ato_auxiliar,
			coalesce(vl_ato_nao_cooperado,0) vl_ato_nao_cooperado
		into STRICT	vl_ato_reg_ajuste_w,
			vl_ato_aux_reg_ajuste_w,
			vl_ato_nao_coop_reg_ajuste_w
		from	pls_conta_copartic_contab
		where 	nr_sequencia = nr_seq_vl_atos_ajustar_w;
		
		if ((vl_ato_reg_ajuste_w > vl_ato_aux_reg_ajuste_w) and (vl_ato_reg_ajuste_w > vl_ato_nao_coop_reg_ajuste_w) and (vl_ato_reg_ajuste_w > 0)) then
			
			update	pls_conta_copartic_contab
			set	vl_ato_cooperado = coalesce(vl_ato_cooperado,0) + vl_diferenca_w
			where 	nr_sequencia = nr_seq_vl_atos_ajustar_w;
					
		elsif (vl_ato_aux_reg_ajuste_w > vl_ato_nao_coop_reg_ajuste_w AND vl_ato_aux_reg_ajuste_w > 0) then
						
			update	pls_conta_copartic_contab
			set	vl_ato_auxiliar = coalesce(vl_ato_auxiliar,0) + vl_diferenca_w
			where 	nr_sequencia = nr_seq_vl_atos_ajustar_w;
			
		elsif (vl_ato_reg_ajuste_w > 0) then
			update	pls_conta_copartic_contab
			set	vl_ato_nao_cooperado = coalesce(vl_ato_nao_cooperado,0) + vl_diferenca_w
			where 	nr_sequencia = nr_seq_vl_atos_ajustar_w;			
		end if;
		
		--Atualiza os valores de ato na pls_conta_coparticipacao, para refletir ajuste na tabela filha
		update	pls_conta_coparticipacao c
		set	vl_ato_cooperado	= (SELECT sum(ctb.vl_ato_cooperado) from pls_conta_copartic_contab ctb where ctb.nr_seq_conta_copartic = c.nr_sequencia),
			vl_ato_auxiliar		= (select sum(ctb.vl_ato_auxiliar) from pls_conta_copartic_contab ctb where ctb.nr_seq_conta_copartic = c.nr_sequencia),
			vl_ato_nao_cooperado	= (select sum(ctb.vl_ato_nao_cooperado) from pls_conta_copartic_contab ctb where ctb.nr_seq_conta_copartic = c.nr_sequencia)
		where	nr_sequencia		= r_c04_atos.nr_seq_conta_copartic;
		
	end if;					
end loop;


-- if com par?metro que ser? criado

/*Para resolver o caso onde n?o gerava registro cont?bil por causa da aus?ncia de valor de CO no p?s-estabelecido, por?m como na valoriza??o do pagamento havia valor de C.O, ficavam um registro na 
pls_conta_medica_resumo e n?o gerava registro cont?bil para o respectivo prestador. Parametrizado de forma diferente para atender essa necessidade*/
if ( ie_forma_gerar_reg_contab_w = 'S') then
	for r_c09_w in c_ajuste_distribuicao loop

		--Nesse caso, tem mais registros de resumo que registros cont?beis
		if ( (r_c09_w.qt_reg_contab - r_c09_w.qt_reg_contab_zerado) < r_c09_w.qt_item_resumo) then
		
			if (( r_c09_w.vl_medico > 0 and r_c09_w.vl_custo_operacional = 0 and r_c09_w.vl_materiais = 0) or
				(r_c09_w.vl_medico = 0 AND (r_c09_w.vl_custo_operacional > 0 or r_c09_w.vl_materiais > 0)))then
			
				for r_c10_w in c_ajuste_pagto(r_c09_w.nr_sequencia) loop
			
					if ( r_c10_w.vl_lib_pagamento <> 0) and ( r_c09_w.vl_pagto_total	<> 0 ) then

						pr_pagamento_liberado_w	:= round((dividir_sem_round( r_c10_w.vl_lib_pagamento, r_c09_w.vl_pagto_total ))::numeric, 10);
					else
						pr_pagamento_liberado_w	:= 1;
					end if;
									
					vl_lib_taxa_co_w		:= round((r_c09_w.vl_lib_taxa_co * pr_pagamento_liberado_w)::numeric,2);
					vl_lib_taxa_material_w	:= round((r_c09_w.vl_lib_taxa_material * pr_pagamento_liberado_w)::numeric,2);
					vl_lib_taxa_servico_w	:= round((r_c09_w.vl_lib_taxa_servico * pr_pagamento_liberado_w)::numeric,2);
					vl_medico_w				:= round((r_c09_w.vl_medico * pr_pagamento_liberado_w)::numeric,2);
					vl_custo_operacional_w	:= round((r_c09_w.vl_custo_operacional * pr_pagamento_liberado_w)::numeric,2);
					vl_materiais_w			:= round((r_c09_w.vl_materiais * pr_pagamento_liberado_w)::numeric,2);
													
					vl_contab_pos_estab_w	:= 	coalesce(vl_lib_taxa_co_w,0) + coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_lib_taxa_servico_w,0) +
								coalesce(vl_medico_w,0) + coalesce(vl_custo_operacional_w,0) + coalesce(vl_materiais_w,0);
								
					vl_administracao_w	:= 	coalesce(vl_lib_taxa_co_w,0) + coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_lib_taxa_servico_w,0);
					
					update	pls_conta_pos_estab_contab
					set	vl_custo_operacional	= vl_contab_pos_estab_w,
						vl_administracao		= vl_administracao_w, 
						vl_lib_taxa_co			= vl_lib_taxa_co_w,
						vl_lib_taxa_material	= vl_lib_taxa_material_w,
						vl_lib_taxa_servico		= vl_lib_taxa_servico_w, 
						vl_medico				= vl_medico_w,
						vl_custo_operacional_ind= vl_custo_operacional_w, 
						vl_materiais			= vl_materiais_w,
						nm_usuario				= nm_usuario_p,
						dt_atualizacao			= clock_timestamp()
					where nr_seq_conta_Proc = r_c09_w.nr_sequencia	
					and	nr_seq_conta_resumo		= r_c10_w.nr_sequencia;
					
				end loop;
			
			end if;
			
		end if;

	end loop;
end if;

--Faz ajuste dos valores da pls_pos_estab_contab. Sobretudo quando tiver mais de um Pode haver diferen?as entre o valor provisionado 

--e o valor efetivamente pago (Mais prov?vel de ocorrer com varios participantes, gerando mais linhas de pls_pls_estab_contab).
for r_c05_w in c05(nr_seq_conta_p, ie_acao_w) loop
	
	select	coalesce(vl_lib_taxa_co,0),
		coalesce(vl_lib_taxa_material,0),
		coalesce(vl_lib_taxa_servico,0),
		coalesce(vl_medico,0),
		coalesce(vl_custo_operacional,0), 
		coalesce(vl_materiais,0),
		coalesce(vl_beneficiario,0)
	into STRICT	vl_lib_taxa_co_w,
		vl_lib_taxa_material_w,
		vl_lib_taxa_servico_w, 
		vl_medico_w,
		vl_custo_operacional_w, 
		vl_materiais_w,
		vl_beneficiario_w
	from	pls_conta_pos_estabelecido
	where	nr_sequencia	= r_c05_w.nr_seq_conta_pos;
		
commit;	
	--registros da pls_conta_pos_estab_contab sem agrupar pelonr_seq_conta_pos 

	--Nessa abertura de cursor, corrige diferen?as causadas por provisionado x pago
	for r_c07_w in c07(r_c05_w.nr_seq_conta_pos, ie_acao_w) loop
		
		--Ajuste da taxa de Co
		if (coalesce(vl_lib_taxa_co_w,0) != coalesce(r_c05_w.vl_lib_taxa_co,0)) and (coalesce(r_c05_w.vl_lib_taxa_co,0) > 0)	then
			
			vl_diferenca_w	:= vl_lib_taxa_co_w - r_c05_w.vl_lib_taxa_co;
			--A diferen?a deve ser dividida proporcionalmente entre os registros
			if (vl_diferenca_w <> 0) then
			
				--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a propor??o
				vl_proporcao_w :=  round((dividir_sem_round(r_c07_w.vl_lib_taxa_co, r_c05_w.vl_lib_taxa_co))::numeric,10);	
				
				update	pls_conta_pos_estab_contab
				set 	vl_lib_taxa_co	=  coalesce(vl_lib_taxa_co,0) + (vl_diferenca_w * vl_proporcao_w)
				where	nr_sequencia 		= r_c07_w.nr_sequencia;	
			end if;
		elsif (coalesce(vl_lib_taxa_co_w,0) != coalesce(r_c05_w.vl_lib_taxa_co,0)) then
			vl_diferenca_w	:= vl_lib_taxa_co_w;
			--A diferen?a deve ser dividida proporcionalmente entre os registros
			if (vl_diferenca_w <> 0) then
			
				--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a propor??o
				vl_proporcao_w :=  round((dividir_sem_round(r_c07_w.vl_contab, r_c05_w.vl_contab))::numeric,10);	
				
				update	pls_conta_pos_estab_contab
				set 	vl_lib_taxa_co	=  coalesce(vl_diferenca_w,0)  * vl_proporcao_w
				where	nr_sequencia 		= r_c07_w.nr_sequencia;	
			end if;
		end if;
		
		--Ajuste de taxa de material
		if (coalesce(vl_lib_taxa_material_w,0)	!= coalesce(r_c05_w.vl_lib_taxa_material,0)) then
		
			vl_diferenca_w	:= vl_lib_taxa_material_w - r_c05_w.vl_lib_taxa_material;
			--A diferen?a deve ser dividida proporcionalmente entre os registros
			if (vl_diferenca_w <> 0) then
			
				--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a propor??o
				vl_proporcao_w :=  round((dividir_sem_round(r_c07_w.vl_lib_taxa_material, r_c05_w.vl_lib_taxa_material))::numeric,10);	
				
				update	pls_conta_pos_estab_contab
				set 	vl_lib_taxa_material	= coalesce(vl_lib_taxa_material,0) + (vl_diferenca_w * vl_proporcao_w)
				where	nr_sequencia 		= r_c07_w.nr_sequencia;
								
			end if;
		end if;
		
		--Ajuste da taxa de servi?o
		if (coalesce(vl_lib_taxa_servico_w,0)	!= coalesce(r_c05_w.vl_lib_taxa_servico,0)) then
		
			vl_diferenca_w	:= coalesce(vl_lib_taxa_servico_w,0) - r_c05_w.vl_lib_taxa_servico;
			
			if (vl_diferenca_w <> 0) then
				--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a propor??o
				vl_proporcao_w :=  round((dividir_sem_round(r_c07_w.vl_lib_taxa_servico, r_c05_w.vl_lib_taxa_servico))::numeric,10);	
				
				update	pls_conta_pos_estab_contab
				set 	vl_lib_taxa_servico	= coalesce(vl_lib_taxa_servico,0) + (vl_diferenca_w * vl_proporcao_w)
				where	nr_sequencia 		= r_c07_w.nr_sequencia;
			end if;
		end if;
		
		--Ajuste do valor m?dico
		if (coalesce(vl_medico_w,0)	!= coalesce(r_c05_w.vl_medico,0)) then
		
			vl_diferenca_w	:= vl_medico_w - r_c05_w.vl_medico;
			
			if (vl_diferenca_w <> 0) then
				--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a propor??o
				vl_proporcao_w :=  round((dividir_sem_round(r_c07_w.vl_medico, r_c05_w.vl_medico))::numeric,10);	
				
				update	pls_conta_pos_estab_contab
				set 	vl_medico	= coalesce(vl_medico,0) + (vl_diferenca_w * vl_proporcao_w)
				where	nr_sequencia 		= r_c07_w.nr_sequencia;
			end if;
		end if;
		
		--Ajuste do valor de CO vl_custo_operacional_ind
		if (coalesce(vl_custo_operacional_w,0)	!= coalesce(r_c05_w.vl_custo_operacional,0)) and (coalesce(r_c05_w.vl_custo_operacional,0) > 0) then
			
			vl_diferenca_w	:= vl_custo_operacional_w - r_c05_w.vl_custo_operacional;
			
			if (vl_diferenca_w <> 0) then
				--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a propor??o
				vl_proporcao_w :=  round((dividir_sem_round(r_c07_w.vl_custo_operacional, r_c05_w.vl_custo_operacional))::numeric,10);	
				
				update	pls_conta_pos_estab_contab
				set 	vl_custo_operacional_ind	= coalesce(vl_custo_operacional_ind,0) + (vl_diferenca_w * vl_proporcao_w)
				where	nr_sequencia 		= r_c07_w.nr_sequencia;
			end if;
		elsif (coalesce(vl_custo_operacional_w,0)	!= coalesce(r_c05_w.vl_custo_operacional,0)) then
			vl_diferenca_w	:= vl_custo_operacional_w;
			--A diferen?a deve ser dividida proporcionalmente entre os registros
			if (vl_diferenca_w <> 0) then
			
				--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a propor??o
				vl_proporcao_w :=  round((dividir_sem_round(r_c07_w.vl_contab, r_c05_w.vl_contab))::numeric,10);	
				
				update	pls_conta_pos_estab_contab
				set 	vl_custo_operacional_ind	=  coalesce(vl_diferenca_w,0)  * vl_proporcao_w
				where	nr_sequencia 			= r_c07_w.nr_sequencia;	
			end if;
		end if;
	
		--Ajuste dos valor de materiais
		if (coalesce(vl_materiais_w,0)	!= coalesce(r_c05_w.vl_materiais,0)) then
			
			vl_diferenca_w	:= vl_materiais_w - r_c05_w.vl_materiais;
			
			if (vl_diferenca_w <> 0) then
				--Divide o valor do registro pela soma dos registros agrupados(Todos os participantes) para achar a propor??o
				vl_proporcao_w :=  round((dividir_sem_round(r_c07_w.vl_materiais, r_c05_w.vl_materiais))::numeric,10);	
				
				update	pls_conta_pos_estab_contab
				set 	vl_materiais	= coalesce(vl_materiais,0) + (vl_diferenca_w * vl_proporcao_w)
				where	nr_sequencia 		= r_c07_w.nr_sequencia;
			end if;
		end if;
	end loop;
	
	--corrige diferen?as causadas por arredondamento

	--Ajuste da taxa de Co
	if (coalesce(vl_lib_taxa_co_w,0) != coalesce(r_c05_w.vl_lib_taxa_co,0)) then
		
		select	sum(coalesce(vl_lib_taxa_co,0))
		into STRICT	vl_ajuste_temp_w
		from	pls_conta_pos_estab_contab
		where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
		
		vl_diferenca_w	:= vl_lib_taxa_co_w - vl_ajuste_temp_w;
		
		--A diferen?a deve ser dividida proporcionalmente entre os registros
		if (vl_diferenca_w <> 0) then
			
			if (vl_diferenca_w > 0) then
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			else
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos
				and	vl_lib_taxa_co		> 0
				and 	vl_lib_taxa_co		> vl_diferenca_w;
			end if;
					
			update	pls_conta_pos_estab_contab
			set 	vl_lib_taxa_co	= coalesce(vl_lib_taxa_co,0) + vl_diferenca_w
			where	nr_sequencia 		= nr_seq_contab_w;
		
			select	sum(coalesce(vl_lib_taxa_co,0))
			into STRICT	vl_validacao_w
			from	pls_conta_pos_estab_contab
			where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			
			if (coalesce(vl_lib_taxa_co_w,0)	!= coalesce(vl_validacao_w,0)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(338598,	';VL_ADIC=' || vl_lib_taxa_co_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
										';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_CONTA_POS='||r_c05_w.nr_seq_conta_pos);

			end if;	
		end if;
	end if;
	
	--Ajuste de taxa de material
	if (coalesce(vl_lib_taxa_material_w,0)	!= coalesce(r_c05_w.vl_lib_taxa_material,0)) then
	
		select	sum(coalesce(vl_lib_taxa_material,0))
		into STRICT	vl_ajuste_temp_w
		from	pls_conta_pos_estab_contab
		where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
	
		vl_diferenca_w	:= vl_lib_taxa_material_w - vl_ajuste_temp_w;
		--A diferen?a deve ser dividida proporcionalmente entre os registros
		if (vl_diferenca_w <> 0) then
			
			if (vl_diferenca_w > 0) then
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			else
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos
				and	vl_lib_taxa_material		> 0
				and 	vl_lib_taxa_material		> vl_diferenca_w;
			end if;
				
			update	pls_conta_pos_estab_contab
			set 	vl_lib_taxa_material	= coalesce(vl_lib_taxa_material,0) + vl_diferenca_w
			where	nr_sequencia 		= nr_seq_contab_w;
			
			select	sum(coalesce(vl_lib_taxa_material,0))
			into STRICT	vl_validacao_w
			from	pls_conta_pos_estab_contab
			where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			
			if (coalesce(vl_lib_taxa_material_w,0)	!= coalesce(vl_validacao_w,0)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(338598,	';VL_ADIC=' || vl_lib_taxa_material_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
										';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_CONTA_POS='||r_c05_w.nr_seq_conta_pos);
			end if;					
		end if;
	end if;
	
	--Ajuste da taxa de servi?o
	if (coalesce(vl_lib_taxa_servico_w,0)	!= coalesce(r_c05_w.vl_lib_taxa_servico,0)) then
	
		select	sum(coalesce(vl_lib_taxa_servico,0))
		into STRICT	vl_ajuste_temp_w
		from	pls_conta_pos_estab_contab
		where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
		
		vl_diferenca_w	:= coalesce(vl_lib_taxa_servico_w,0) - vl_ajuste_temp_w;
		
		if (vl_diferenca_w <> 0) then
			
			if (vl_diferenca_w > 0) then
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from (SELECT	nr_sequencia
					from	pls_conta_pos_estab_contab
					where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos) alias3;
			else
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos
				and	vl_lib_taxa_servico	> 0
				and 	vl_lib_taxa_servico	> vl_diferenca_w;
			end if;
				
			update	pls_conta_pos_estab_contab
			set 	vl_lib_taxa_servico	= coalesce(vl_lib_taxa_servico,0) + vl_diferenca_w
			where	nr_sequencia 		= nr_seq_contab_w;
			
			select	sum(coalesce(vl_lib_taxa_servico,0))
			into STRICT	vl_validacao_w
			from	pls_conta_pos_estab_contab
			where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			
			if (coalesce(vl_lib_taxa_servico_w,0)	!= coalesce(vl_validacao_w,0)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(338598,	';VL_ADIC=' || vl_lib_taxa_servico_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
										';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_CONTA_POS='||r_c05_w.nr_seq_conta_pos);
			end if;
		end if;
	end if;
	
	--Ajuste do valor m?dico
	if (coalesce(vl_medico_w,0) != coalesce(r_c05_w.vl_medico,0)) then
	
		select	sum(coalesce(vl_medico,0))
		into STRICT	vl_ajuste_temp_w
		from	pls_conta_pos_estab_contab
		where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
		
		vl_diferenca_w	:= vl_medico_w - vl_ajuste_temp_w;
		
		if (vl_diferenca_w <> 0) then
			
			if (vl_diferenca_w > 0) then
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			else
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos
				and	vl_medico	> 0
				and 	vl_medico	> vl_diferenca_w;
			end if;
			
			update	pls_conta_pos_estab_contab
			set 	vl_medico	= coalesce(vl_medico,0) + vl_diferenca_w
			where	nr_sequencia = nr_seq_contab_w;
			
			select	sum(coalesce(vl_medico,0))
			into STRICT	vl_validacao_w
			from	pls_conta_pos_estab_contab
			where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			
			if (coalesce(vl_medico_w,0)	!= coalesce(vl_validacao_w,0)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(338598,	';VL_ADIC=' || vl_medico_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
										';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_CONTA_POS='||r_c05_w.nr_seq_conta_pos);
			end if;
		end if;	
	end if;
	
	--Ajuste do valor de CO vl_custo_operacional_ind
	if (coalesce(vl_custo_operacional_w,0)	!= coalesce(r_c05_w.vl_custo_operacional,0)) then
		
		select	sum(coalesce(vl_custo_operacional_ind,0))
		into STRICT	vl_ajuste_temp_w
		from	pls_conta_pos_estab_contab
		where	nr_seq_conta_pos = r_c05_w.nr_seq_conta_pos;
		
		vl_diferenca_w	:= vl_custo_operacional_w - vl_ajuste_temp_w;
		
		if (vl_diferenca_w <> 0) then
		
			if (vl_diferenca_w > 0) then
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			else
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos
				and	vl_custo_operacional_ind	> 0
				and 	vl_custo_operacional_ind	> vl_diferenca_w;
			end if;
			
			update	pls_conta_pos_estab_contab
			set 	vl_custo_operacional_ind	= coalesce(vl_custo_operacional_ind,0)  + vl_diferenca_w
			where	nr_sequencia 		= nr_seq_contab_w;
			
			select	sum(coalesce(vl_custo_operacional_ind,0))
			into STRICT	vl_validacao_w
			from	pls_conta_pos_estab_contab
			where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			
			if (coalesce( vl_custo_operacional_w,0)	!= coalesce(vl_validacao_w,0)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(338598,	';VL_ADIC=' || vl_custo_operacional_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
										';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_CONTA_POS='||r_c05_w.nr_seq_conta_pos);
			end if;	
		end if;	
	end if;

	--Ajuste dos valor de materiais
	if (coalesce(vl_materiais_w,0)	!= coalesce(r_c05_w.vl_materiais,0)) then
		
		select	sum(coalesce(vl_materiais,0))
		into STRICT	vl_ajuste_temp_w
		from	pls_conta_pos_estab_contab
		where	nr_seq_conta_pos = r_c05_w.nr_seq_conta_pos;
		
		vl_diferenca_w	:= vl_materiais_w - vl_ajuste_temp_w;
		
		if (vl_diferenca_w <> 0) then
			
			if (vl_diferenca_w > 0) then
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			else
				select	max(nr_sequencia)
				into STRICT	nr_seq_contab_w
				from	pls_conta_pos_estab_contab
				where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos
				and	vl_materiais		> 0
				and 	vl_materiais		> vl_diferenca_w;
			end if;
				
			update	pls_conta_pos_estab_contab
			set 	vl_materiais	= coalesce(vl_materiais,0) + vl_diferenca_w
			where	nr_sequencia 		= nr_seq_contab_w;
			
			select	sum(coalesce(vl_materiais,0))
			into STRICT	vl_validacao_w
			from	pls_conta_pos_estab_contab
			where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
			
			if (coalesce( vl_materiais_w,0)	!= coalesce(vl_validacao_w,0)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(338598,	';VL_ADIC=' || vl_materiais_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
										';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_CONTA_POS='||r_c05_w.nr_seq_conta_pos);
			end if;		
		end if;	
	end if;	
	
	if (coalesce(vl_materiais_w,0) = 0 and coalesce( vl_custo_operacional_w,0) = 0 and coalesce(vl_medico_w,0) = 0) then

		select pls_obter_tipo_segurado(nr_seq_segurado) ie_tipo_segurado
		into STRICT	ie_tipo_segurado_w
		from	pls_conta
		where 	nr_sequencia = nr_seq_conta_p;

		if (ie_tipo_segurado_w != 'B' and ie_origem_valor_pos_w != 'CA') then
			insert 	into	pls_log_pos_estabelecido(nr_sequencia, dt_atualizacao,	nm_usuario,
							  dt_atualizacao_nrec, nm_usuario_nrec, ie_status_faturamento_ant,
							  ie_status_faturamento_new, nr_seq_conta, nr_seq_conta_pos, ie_tipo_registro,
							  ds_log)
			values (nextval('pls_log_pos_estabelecido_seq'),clock_timestamp(),nm_usuario_p,
							 clock_timestamp(), nm_usuario_p, null,
							  null, nr_seq_conta_p, r_c05_w.nr_seq_conta_pos, 'L',
							  'Nao foi possivel calcular os valores contabeis do pos corretamente. Por favor, verifique o parametro "Marque para gerar valores contabeis conforme pagamento" na opcao Faturamento da Gestao de Operadoras.');		
		end if;		
	end if;
	
	update	pls_conta_pos_estab_contab
	set	vl_custo_operacional  	= coalesce(vl_lib_taxa_co,0) + coalesce(vl_lib_taxa_material,0) + coalesce(vl_lib_taxa_servico,0) + coalesce(vl_medico,0) + coalesce(vl_custo_operacional_ind,0) + coalesce(vl_materiais,0),
		vl_administracao	= coalesce(vl_lib_taxa_co,0) + coalesce(vl_lib_taxa_material,0) + coalesce(vl_lib_taxa_servico,0)
	where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
	
	-- Realizado um segundo update, pois no caso do valor de provis?o s? pode atualizar se n?o estiver em lote de provis?o

	-- Colocado o nvl pois o lote de provis?o pode estar com o valor 0
	update	pls_conta_pos_estab_contab
	set	vl_provisao = vl_custo_operacional
	where	coalesce(nr_lote_contabil_prov,0) = 0
	and	nr_seq_conta_pos = r_c05_w.nr_seq_conta_pos;
	
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_conta_pos_estab_contab
	where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
	
	if (qt_registro_w > 1) then
		select	sum(coalesce(vl_custo_operacional,0))
		into STRICT	vl_custo_operacional_aux_w
		from	pls_conta_pos_estab_contab
		where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos;
		
		select	count(1)
		into STRICT	qt_registro_w
		from	pls_conta_pos_estab_contab
		where	nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos
		and	vl_custo_operacional	= 0;
		
		
		if (qt_registro_w		> 0) and (vl_custo_operacional_aux_w = vl_beneficiario_w) and (vl_custo_operacional_aux_w	> 0) then
			
			delete	FROM pls_conta_pos_estab_contab	a
			where	a.nr_seq_conta_pos	= r_c05_w.nr_seq_conta_pos
			and	a.vl_custo_operacional	= 0
			and	not exists (	SELECT	1
							from	pls_fatura_mat	x
							where	x.nr_seq_conta_pos_contab = a.nr_sequencia)
			and	not exists (	select	1
							from	pls_fatura_proc	x
							where	x.nr_seq_conta_pos_contab = a.nr_sequencia);
		end if;
	end if;
end loop;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_contab_val_adic ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_conta_proc_p pls_conta_proc.nr_sequencia%type, nr_seq_conta_mat_p pls_conta_mat.nr_sequencia%type, nr_seq_proc_rec_p pls_conta_pos_estabelecido.nr_seq_proc_rec%type, nr_seq_mat_rec_p pls_conta_pos_estabelecido.nr_seq_mat_rec%type, nr_seq_disc_proc_p pls_conta_pos_estabelecido.nr_seq_disc_proc%type, nr_seq_disc_mat_p pls_conta_pos_estabelecido.nr_seq_disc_mat%type, ie_opcao_p text, ie_acao_p text, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

