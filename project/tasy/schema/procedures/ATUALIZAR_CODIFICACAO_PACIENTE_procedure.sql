-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_codificacao_paciente ( nr_atendimento_p bigint, nr_case_p bigint, ie_insert_update_p text, nm_usuario_p text) AS $body$
DECLARE


cd_convenio_w		atend_categoria_convenio.cd_convenio%type;
cd_categoria_w		atend_categoria_convenio.cd_categoria%type;
nr_interno_conta_w	conta_paciente.nr_interno_conta%type;
nr_atendimento_w	conta_paciente.nr_interno_conta%type;
ie_gerar_etapa_w	smallint;


BEGIN

	nr_atendimento_w := nr_atendimento_p;

	if (ie_insert_update_p = 'S') then

		insert into	patient_coding(
			nr_sequencia,
			nr_encounter,
			nr_seq_episode,
			nm_usuario,
			nm_usuario_nrec,
			dt_atualizacao,
			dt_atualizacao_nrec,
			dt_process,
			ie_status)
		values (
			nextval('patient_coding_seq'),
			nr_atendimento_w,
			nr_case_p,
			nm_usuario_p,
			nm_usuario_p,
			clock_timestamp(),
			clock_timestamp(),
			clock_timestamp(),
			ie_insert_update_p);
		
	elsif (ie_insert_update_p = 'F') then
		
		if (coalesce(nr_atendimento_w::text, '') = '' and (nr_case_p IS NOT NULL AND nr_case_p::text <> '')) then
			nr_atendimento_w := obter_atendimento_episodio(nr_case_p);
		end if;
		
		select  max(d.cd_convenio),
				max(d.cd_categoria)
		into STRICT	cd_convenio_w,
				cd_categoria_w
		from    convenio c,
				atend_categoria_convenio d
		where 	d.nr_atendimento    	= nr_atendimento_w
		and     d.cd_convenio        	= c.cd_convenio
		and    	d.dt_inicio_vigencia    = (	SELECT	max(dt_inicio_vigencia)
											from 	atend_categoria_convenio b
											where   nr_atendimento= nr_atendimento_w
											and    	clock_timestamp() between b.dt_inicio_vigencia and coalesce(b.dt_final_vigencia,clock_timestamp() + interval '30 days'));
						
		select  max(a.nr_interno_conta)
		into STRICT    nr_interno_conta_w
		from    conta_paciente         a
		where   a.nr_atendimento            = nr_atendimento_w
		and     a.cd_estabelecimento        = wheb_usuario_pck.get_cd_estabelecimento()
		and     a.cd_convenio_parametro     = cd_convenio_w
		and     a.cd_categoria_parametro    = cd_categoria_w
		and     a.ie_status_acerto          = 1
		and     coalesce(a.nr_seq_protocolo,0) 	= 0
		and     clock_timestamp() between a.dt_periodo_inicial and a.dt_periodo_final;

		insert into	patient_coding(
			nr_sequencia,
			nr_encounter,
			nr_seq_episode,
			nm_usuario,
			nm_usuario_nrec,
			dt_atualizacao,
			dt_atualizacao_nrec,
			dt_process,
			ie_status)
		values (
			nextval('patient_coding_seq'),
			nr_atendimento_w,
			nr_case_p,
			nm_usuario_p,
			nm_usuario_p,
			clock_timestamp(),
			clock_timestamp(),
			clock_timestamp(),
			ie_insert_update_p);

		CALL gerar_etapa_conta(nr_interno_conta_w, 4, nm_usuario_p); -- Update the stage of the account when completed Encoding process (Event: Finalize encoding)
	elsif (ie_insert_update_p = 'P') then
		
		if (coalesce(nr_atendimento_w::text, '') = '' and (nr_case_p IS NOT NULL AND nr_case_p::text <> '')) then
			nr_atendimento_w := obter_atendimento_episodio(nr_case_p);
		end if;
		
		select  max(d.cd_convenio),
				max(d.cd_categoria)
		into STRICT	cd_convenio_w,
				cd_categoria_w
		from    convenio c,
				atend_categoria_convenio d
		where 	d.nr_atendimento    	= nr_atendimento_w
		and     d.cd_convenio        	= c.cd_convenio
		and    	d.dt_inicio_vigencia    = (	SELECT	max(dt_inicio_vigencia)
											from 	atend_categoria_convenio b
											where   nr_atendimento= nr_atendimento_w
											and    	clock_timestamp() between b.dt_inicio_vigencia and coalesce(b.dt_final_vigencia,clock_timestamp() + interval '30 days'));
						
		select  max(a.nr_interno_conta)
		into STRICT    nr_interno_conta_w
		from    conta_paciente         a
		where   a.nr_atendimento            = nr_atendimento_w
		and     a.cd_estabelecimento        = wheb_usuario_pck.get_cd_estabelecimento()
		and     a.cd_convenio_parametro     = cd_convenio_w
		and     a.cd_categoria_parametro    = cd_categoria_w
		and     a.ie_status_acerto          = 1
		and     coalesce(a.nr_seq_protocolo,0) 	= 0
		and     clock_timestamp() between a.dt_periodo_inicial and a.dt_periodo_final;

		update	patient_coding
		set		nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp(),
				dt_inactive	= clock_timestamp()
		where	1 = 1
		and (coalesce(nr_atendimento_w::text, '') = '' or nr_encounter = nr_atendimento_w)
		and (coalesce(nr_case_p::text, '') = '' or nr_seq_episode = nr_case_p)
		and		coalesce(dt_inactive::text, '') = '';

		insert into	patient_coding(
			nr_sequencia,
			nr_encounter,
			nr_seq_episode,
			nm_usuario,
			nm_usuario_nrec,
			dt_atualizacao,
			dt_atualizacao_nrec,
			dt_process,
			ie_status)
		values (
			nextval('patient_coding_seq'),
			nr_atendimento_w,
			nr_case_p,
			nm_usuario_p,
			nm_usuario_p,
			clock_timestamp(),
			clock_timestamp(),
			clock_timestamp(),
			ie_insert_update_p);

		CALL gerar_etapa_conta(nr_interno_conta_w, 'A', nm_usuario_p); -- Update the stage of the account in order to return to encoding process (Event: Patient's Discharge)
	end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_codificacao_paciente ( nr_atendimento_p bigint, nr_case_p bigint, ie_insert_update_p text, nm_usuario_p text) FROM PUBLIC;

