-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_pls_proced_reemb ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_nota_cobr_rrs_p ptu_nota_cobranca_rrs.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

					
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
ie_tipo_despesa_w		pls_conta_proc.ie_tipo_despesa%type;
cd_procedimento_w		procedimento.cd_procedimento%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;
nr_seq_grau_participacao_w	pls_grau_participacao.nr_sequencia%type;
cd_cgc_prestador_w		varchar(14);
nr_cpf_prestador_w		varchar(11);
nr_seq_prest_inter_w		pls_proc_participante.nr_seq_prest_inter%type;
nr_seq_prestador_w		pls_prestador.nr_sequencia%type;
nr_seq_proc_participante_w	pls_proc_participante.nr_sequencia%type;
qt_servico_w			integer;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;

C01 CURSOR(nr_seq_nota_cobr_rrs_pc	ptu_nota_cobranca_rrs.nr_sequencia%type) FOR
	SELECT	s.nr_sequencia nr_seq_servico_rss, --servico
		s.nr_lote, --conta
		s.nr_nota, --conta
		pls_obter_segurado_carteira(lpad(to_char(c.cd_unimed),4,'0')||c.id_benef,cd_estabelecimento_p) nr_seq_segurado, --conta
		c.cd_unimed, --conta
		c.id_benef, --conta
		c.nm_beneficiario, --conta
		c.dt_nasc, --conta
		c.tp_sexo, --conta
		c.id_rn, --conta
		s.dt_servico, -- servico
		c.dt_reembolso, -- conta
		c.tp_carater_atend, --conta
		c.tp_pessoa, --participante
		c.nr_cnpj_cpf, --participante
		c.nm_prestador, --participante
		s.nm_profissional, --participante
		s.sg_cons_prof, --participante
		s.nr_cons_prof, --participante
		s.sg_uf_cons_prof, --participante
		s.tp_particip, -- servico
		s.tp_tabela, -- servico
		s.cd_servico, -- servico
		s.qt_cobrada, -- servico
		s.vl_dif_vl_inter, -- servico
		s.vl_serv_cob, -- servico
		s.nr_autoriz, -- conta/servico
		s.cd_procedimento,
		s.ie_origem_proced,
		s.nr_seq_material
	from	ptu_nota_cobranca_rrs c,
		ptu_nota_servico_rrs s
	where	c.nr_sequencia	= s.nr_seq_nota_cobr_rrs
	and	c.nr_sequencia	= nr_seq_nota_cobr_rrs_pc;
	
BEGIN

for r_C01_w in C01( nr_seq_nota_cobr_rrs_p ) loop
	if (r_C01_w.tp_tabela in (0,1,4)) then
		cd_procedimento_w := r_C01_w.cd_procedimento;
		ie_origem_proced_w := r_C01_w.ie_origem_proced;

		select	count(1)
		into STRICT	qt_servico_w
		from	procedimento
		where	cd_procedimento = r_C01_w.cd_procedimento;
		
		if (qt_servico_w = 0) then
			update	ptu_nota_servico_rrs
			set	cd_procedimento   = NULL,
				ie_origem_proced  = NULL
			where	nr_sequencia	 = r_C01_w.nr_seq_servico_rss;
			
			cd_procedimento_w := null;
			ie_origem_proced_w := null;
		end if;

		select	CASE WHEN r_C01_w.tp_tabela=0 THEN 1 WHEN r_C01_w.tp_tabela=1 THEN 2  ELSE r_C01_w.tp_tabela END
		into STRICT	ie_tipo_despesa_w
		;

		insert into pls_conta_proc(nr_sequencia,			nm_usuario,			dt_atualizacao,
			nm_usuario_nrec,		dt_atualizacao_nrec,		nr_seq_conta,
			ie_status,			ie_situacao,			dt_procedimento,
			cd_procedimento_imp,		qt_procedimento_imp,		qt_procedimento,
			qt_procedimento_original,	qt_ptu_item,			vl_procedimento_imp,
			vl_unitario_imp,		ie_tipo_despesa,		cd_procedimento,
			ie_origem_proced,		vl_medico,			vl_anestesista,
			vl_auxiliares,			vl_custo_operacional,		vl_materiais,
			vl_procedimento,		vl_unitario,			vl_liberado,
			vl_coparticipacao,		vl_glosa,			vl_liquido)
		values (nextval('pls_conta_proc_seq'),	nm_usuario_p,			clock_timestamp(),
			nm_usuario_p,			clock_timestamp(),			nr_seq_conta_p,
			'U',				'B',				r_C01_w.dt_servico,
			r_C01_w.cd_servico,		r_C01_w.qt_cobrada,		r_C01_w.qt_cobrada,
			r_C01_w.qt_cobrada,		r_C01_w.qt_cobrada,		r_C01_w.vl_dif_vl_inter,
			r_C01_w.vl_dif_vl_inter,	ie_tipo_despesa_w,		cd_procedimento_w,
			ie_origem_proced_w,		0,				0,
			0,				0,				0,
			0,				0,				0,
			0,				0,				0 ) returning nr_sequencia into nr_seq_conta_proc_w;
			
		insert into pls_conta_proc_regra(	nr_sequencia, 			dt_atualizacao, 		nm_usuario)
		values (	nr_seq_conta_proc_w, 		clock_timestamp(), 			nm_usuario_p);
			
		select	max(nr_sequencia)
		into STRICT	nr_seq_grau_participacao_w
		from	pls_grau_participacao
		where	cd_ptu		= to_char(r_C01_w.tp_tabela);
		
		if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
			
			if (r_C01_w.tp_pessoa = 'J') then
				cd_cgc_prestador_w		:= r_C01_w.nr_cnpj_cpf;
				nr_cpf_prestador_w		:= null;
				
			elsif (r_C01_w.tp_pessoa = 'F') then
				cd_cgc_prestador_w		:= null;
				nr_cpf_prestador_w		:= substr(r_C01_w.nr_cnpj_cpf,1,11);
			end if;
			
			SELECT * FROM pls_gerar_prest_intercambio( 	nr_cpf_prestador_w, cd_cgc_prestador_w, r_C01_w.nm_prestador, null, null, nm_usuario_p, null, null, nr_seq_prest_inter_w, nr_seq_prestador_w) INTO STRICT nr_seq_prest_inter_w, nr_seq_prestador_w;
			
			insert	into pls_proc_participante(nr_sequencia,				dt_atualizacao,				nm_usuario,
				dt_atualizacao_nrec,			nm_usuario_nrec,			nr_seq_conta_proc,
				nr_seq_grau_partic,			vl_apresentado,				nm_medico_executor_imp,
				ie_status,				nr_seq_prest_inter)
			values (nextval('pls_proc_participante_seq'),	clock_timestamp(),				nm_usuario_p,
				clock_timestamp(),				nm_usuario_p,				nr_seq_conta_proc_w,
				nr_seq_grau_participacao_w,		r_C01_w.vl_dif_vl_inter,		r_C01_w.nm_prestador,
				'U',					nr_seq_prest_inter_w) returning nr_sequencia into nr_seq_proc_participante_w;
		end if;
		
		update	ptu_nota_servico_rrs
		set	nr_seq_conta_proc	= nr_seq_conta_proc_w,
			nr_seq_proc_partic	= nr_seq_proc_participante_w
		where	nr_sequencia		= r_C01_w.nr_seq_servico_rss;
		
	elsif (r_C01_w.tp_tabela in (2,3,5,6)) then
		select	CASE WHEN r_C01_w.tp_tabela=3 THEN 2 WHEN r_C01_w.tp_tabela=2 THEN 3 WHEN r_C01_w.tp_tabela=5 THEN 2 WHEN r_C01_w.tp_tabela=6 THEN 3 END
		into STRICT	ie_tipo_despesa_w
		;
		
		insert into pls_conta_mat(nr_sequencia,			nm_usuario,			dt_atualizacao,
			nm_usuario_nrec, 		dt_atualizacao_nrec,		nr_seq_material,
			dt_atendimento, 		qt_material,			vl_material_imp,
			ie_status, 			nr_seq_conta,			ie_situacao,
			vl_unitario_imp, 		qt_material_imp,		ie_tipo_despesa,
			cd_material_imp,		vl_material_imp_xml,		vl_material,
			vl_unitario,			vl_liberado,			vl_participacao)
		values (nextval('pls_conta_mat_seq'), 	nm_usuario_p, 			clock_timestamp(),
			nm_usuario_p, 			clock_timestamp(), 			r_C01_w.nr_seq_material, 
			r_C01_w.dt_servico, 		r_C01_w.qt_cobrada, 		r_C01_w.vl_dif_vl_inter, 	
			'U', 				nr_seq_conta_p,			'I', 
			r_C01_w.vl_dif_vl_inter, 	r_C01_w.qt_cobrada,		ie_tipo_despesa_w,
			r_C01_w.cd_servico,		r_C01_w.vl_dif_vl_inter,	r_C01_w.vl_dif_vl_inter,
			0,				0,				0) returning nr_sequencia into nr_seq_conta_mat_w;
		
		insert into pls_conta_mat_regra(	nr_sequencia,			dt_atualizacao,			nm_usuario)
		values (	nr_seq_conta_mat_w,		clock_timestamp(), 			nm_usuario_p);

		
		update	ptu_nota_servico_rrs
		set	nr_seq_conta_mat	= nr_seq_conta_mat_w
		where	nr_sequencia		= r_C01_w.nr_seq_servico_rss;
	end if;

end loop;

CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_conta_proc(nr_seq_conta_p, nm_usuario_p);
CALL pls_cta_proc_mat_regra_pck.gera_seq_tiss_conta_mat(nr_seq_conta_p, nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_pls_proced_reemb ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_nota_cobr_rrs_p ptu_nota_cobranca_rrs.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

