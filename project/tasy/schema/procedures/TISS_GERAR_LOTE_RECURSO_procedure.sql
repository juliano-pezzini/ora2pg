-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tiss_gerar_lote_recurso (nr_seq_lote_hist_p bigint, nr_seq_cabecalho_p bigint, cd_convenio_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_estabelecimento_w		smallint;
ie_ajustar_itens_conta_w	varchar(1);

/* Lote */

nr_seq_lote_w			bigint;

/* Conta */

nr_seq_conta_w			bigint;
cd_guia_operadora_w		varchar(50);
cd_guia_prestador_w		varchar(40);
nr_doc_convenio_w		varchar(255);
ds_mascara_w			varchar(255);
nr_seq_lote_guia_w		bigint;
nr_interno_conta_w		bigint;
cd_autorizacao_w		varchar(20);
vl_saldo_guia_w			double precision	:= 0;
ie_guia_sem_saldo_w		varchar(1);

/* Itens */

nr_seq_lote_item_w		bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
qt_procedimento_tiss_w		bigint;
qt_procedimento_atual_w		bigint;
vl_glosa_informada_w		double precision	:= 0;
vl_glosa_w			double precision	:= 0;
cd_glosa_w			varchar(20);
nr_seq_propaci_w		bigint;
nr_seq_matpaci_w		bigint;
qt_procedimento_w		bigint;
cd_motivo_glosa_w		integer;
ie_acao_glosa_w			varchar(1);
cd_resposta_w			bigint;
cd_resposta_motivo_w		bigint;
cd_setor_responsavel_w		integer;
vl_amenor_w			double precision	:= 0;
vl_glosa_item_w			double precision	:= 0;
vl_glosa_rateado_w		double precision	:= 0;
qt_material_atual_w		double precision;
qt_material_w			double precision;
ie_agrupar_itens_w		varchar(10);
ds_item_w			varchar(255);
nr_seq_cabecalho_w		bigint;
ie_somente_selecionado_w	varchar(10);
ie_somente_com_saldo_w		varchar(10) := 'N';
ie_motivo_glosa_w		varchar(5) := 'S';
ie_setor_resp_atend_w		varchar(2) := 'S';
cd_glosa_guia_w			varchar(20);
vl_glosa_guia_w			double precision	:= 0;
vl_informado_guia_w		double precision	:= 0;

count_w				bigint;
ds_texto_w			varchar(2000);
ie_guia_prestador_w		varchar(255);
cd_procedimento_xml_w		varchar(20);
ds_erro_w			varchar(4000);
ie_versao_w			varchar(1) := 'N';
ie_import_itens_dem_grg_w	varchar(1) := 'A';
dt_realizacao_w			timestamp;
ie_dt_conta_w			tiss_regra_ret_guia.ie_data_realizacao%type;
ds_justificativa_w		MOTIVO_GLOSA_JUSTIFICATIVA.DS_JUSTIFICATIVA%type;
nr_seq_conta_proc_w    TISS_DEM_CONTA_PROC.NR_SEQUENCIA%TYPE;

c00 CURSOR FOR
SELECT	a.nr_sequencia,
	substr(a.ds_versao,1,1)
from	tiss_cabecalho a
where	a.nr_seq_lote_hist			= nr_seq_lote_hist_p
and	coalesce(ie_somente_selecionado_w,'S')	= 'N'

union

SELECT	a.nr_sequencia,
	substr(a.ds_versao,1,1)
from	tiss_cabecalho a
where	a.nr_seq_lote_hist			= nr_seq_lote_hist_p
and	a.nr_sequencia				= nr_seq_cabecalho_p
and	coalesce(ie_somente_selecionado_w,'S')	= 'S';

c01 CURSOR FOR
SELECT	c.nr_sequencia
from	tiss_dem_lote c,
	tiss_dem_fatura b,
	tiss_demonstrativo a
where	a.nr_seq_cabecalho	= nr_seq_cabecalho_w
and	a.nr_sequencia		= b.nr_seq_demonstrativo
and	b.nr_sequencia		= c.nr_seq_fatura;

c02 CURSOR FOR
SELECT	a.nr_sequencia,
	a.nr_guia_operadora,
	a.nr_guia_prestador,
	null cd_glosa_guia,
	0 vl_glosa_guia,
	0 vl_informado_guia
from	tiss_dem_conta a
where	a.nr_seq_lote		= nr_seq_lote_w
and	exists (SELECT	1
	from	tiss_dem_glosa y,
		tiss_dem_conta_proc x
	where	x.nr_seq_conta	= a.nr_sequencia
	and	x.nr_sequencia	= y.nr_seq_conta_proc
	
UNION

	SELECT	1
	FROM	TISS_DEM_CONTA_PROC W
	WHERE	W.NR_SEQ_CONTA = A.NR_SEQUENCIA
	and	coalesce(ie_motivo_glosa_w,'S') = 'N'
	AND	coalesce((W.VL_PROCESSADO - W.VL_LIBERADO)::numeric ,0) > 0
	and	not exists (	select	1
				from	tiss_dem_glosa b
				where	b.nr_seq_conta_proc	= w.nr_sequencia))

union

select	a.nr_sequencia,
	a.nr_guia_operadora,
	a.nr_guia_prestador,
	max(b.cd_glosa) cd_glosa_guia,
	a.vl_glosado vl_glosa_guia,
	a.vl_informado vl_informado_guia
from	tiss_dem_conta a,
	tiss_dem_glosa b
where	a.nr_sequencia		= b.nr_seq_conta
and	coalesce(b.nr_seq_conta_proc::text, '') = ''
and	b.vl_glosa		> 0
and	a.nr_seq_lote		= nr_seq_lote_w
group by a.nr_sequencia,
	a.nr_guia_operadora,
	a.nr_guia_prestador,
	a.vl_glosado,
	a.vl_informado;

c03 CURSOR FOR	/* procedimentos no TISS - somente com valor glosado */
SELECT	x.cd_procedimento,
		x.nr_seq_conta_proc,
        x.origem,
        sum(x.qt_procedimento),
        sum(x.vl_glosa),
        x.ds_item,
        x.cd_procedimento_xml,
        x.dt_realizacao from (SELECT distinct a.cd_procedimento,b.nr_seq_conta_proc,
	CASE WHEN coalesce(a.ie_origem_proced,0)=0 THEN 1  ELSE a.ie_origem_proced END  origem,
	a.qt_procedimento,
	b.vl_glosa,
	--max(b.cd_glosa),
	a.ds_item,
	a.cd_procedimento_xml,
	a.dt_realizacao
from	tiss_dem_glosa b,
	tiss_dem_conta_proc a
where	a.nr_seq_conta		= nr_seq_conta_w
and	b.nr_seq_conta_proc	= a.nr_sequencia
and	ie_import_itens_dem_grg_w = 'A') x
group by	x.cd_procedimento,
		x.nr_seq_conta_proc,
        x.origem,
        x.ds_item,
        x.cd_procedimento_xml,
        x.dt_realizacao

UNION

select	a.cd_procedimento,
	a.NR_SEQUENCIA,
	CASE WHEN coalesce(a.ie_origem_proced,0)=0 THEN 1  ELSE a.ie_origem_proced END ,
	a.qt_procedimento,
	coalesce((A.VL_PROCESSADO - a.VL_LIBERADO)::numeric ,0),
	--NULL,
	a.ds_item,
	a.cd_procedimento_xml,
	a.dt_realizacao
from	tiss_dem_conta_proc a
where	a.nr_seq_conta		= nr_seq_conta_w
and	coalesce(ie_motivo_glosa_w,'S') = 'N'
AND	coalesce((A.VL_PROCESSADO - A.VL_LIBERADO)::numeric ,0) > 0
and	not exists (	select	1
			from	tiss_dem_glosa b
			where	b.nr_seq_conta_proc	= a.nr_sequencia)

union all

SELECT	a.cd_procedimento,b.nr_seq_conta_proc,
	CASE WHEN coalesce(a.ie_origem_proced,0)=0 THEN 1  ELSE a.ie_origem_proced END ,
	a.qt_procedimento,
	b.vl_glosa,
	--b.cd_glosa,
	a.ds_item,
	a.cd_procedimento_xml,
	a.dt_realizacao
FROM	tiss_dem_glosa b,
	tiss_dem_conta_proc a
WHERE	a.nr_seq_conta		= nr_seq_conta_w
and	ie_import_itens_dem_grg_w = 'T'
AND	b.nr_seq_conta_proc	= a.nr_sequencia;

c04 CURSOR FOR	/* procedimentos na conta paciente */
SELECT	a.nr_sequencia,
	a.qt_procedimento
from	procedimento_paciente a
where	a.nr_interno_conta	= nr_interno_conta_w
and	coalesce(a.nr_doc_convenio,coalesce(cd_autorizacao_w,'0')) = coalesce(coalesce(cd_autorizacao_w,a.nr_doc_convenio),'0')
and (a.cd_procedimento		= cd_procedimento_w or
	 a.cd_procedimento_tuss 	= cd_procedimento_w or
	 a.cd_procedimento_convenio 	= ltrim(cd_procedimento_xml_w,'0') or
	 a.cd_procedimento_tuss		= somente_numero(cd_procedimento_xml_w) OR
	 EXISTS (SELECT 1 FROM tiss_regra_tabela_proc t 
			           WHERE t.cd_procedimento_convenio = ltrim(cd_procedimento_xml_w,'0')
			            AND  t.cd_procedimento = a.cd_procedimento
			            AND  t.ie_origem_proced = a.ie_origem_proced
			            and  t.nr_seq_tiss_tabela = a.nr_seq_tiss_tabela))
--and	a.ie_origem_proced	= ie_origem_proced_w
and	qt_procedimento_atual_w	> 0
order by	a.qt_procedimento;

c05 CURSOR FOR	/* materiais na conta paciente */
SELECT	a.nr_sequencia,
	a.qt_material
from	material_atend_paciente a
where	a.nr_interno_conta	= nr_interno_conta_w
and	coalesce(a.cd_motivo_exc_conta::text, '') = ''  --nao pode considerar os materiais excluidos
and	a.qt_material		> 0 	--ignorar os materiais com quantidade negativa
and	coalesce(a.nr_doc_convenio,coalesce(cd_autorizacao_w,'0')) = coalesce(coalesce(cd_autorizacao_w,a.nr_doc_convenio),'0')
and (a.cd_material		= cd_procedimento_w or
	somente_numero(a.cd_material_convenio)	= cd_procedimento_w or
	somente_numero(a.cd_material_tiss)	= cd_procedimento_w or
	somente_numero(a.cd_material_tuss)	= cd_procedimento_w)
order by	a.cd_material,
	a.qt_material;


BEGIN

delete 	from tiss_log_reap
where	NR_SEQ_LOTE_HIST = nr_seq_lote_hist_p;

select	max(b.cd_estabelecimento)
into STRICT	cd_estabelecimento_w
from	lote_auditoria b,
	lote_audit_hist a
where	a.nr_sequencia		= nr_seq_lote_hist_p
and	a.nr_seq_lote_audit	= b.nr_sequencia;

ie_ajustar_itens_conta_w := obter_param_usuario(69, 14, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_ajustar_itens_conta_w);
ie_setor_resp_atend_w := obter_param_usuario(69, 20, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_setor_resp_atend_w);
ie_agrupar_itens_w := obter_param_usuario(69, 36, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_agrupar_itens_w);
ie_somente_selecionado_w := obter_param_usuario(69, 57, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_somente_selecionado_w);
ie_somente_com_saldo_w := obter_param_usuario(69, 58, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_somente_com_saldo_w);
ie_motivo_glosa_w := obter_param_usuario(69, 64, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_motivo_glosa_w);

begin
	select	coalesce(ie_import_itens_dem_grg,'A')
	into STRICT	ie_import_itens_dem_grg_w
	from	tiss_parametros_convenio
	where	cd_convenio = cd_convenio_p
	and	cd_estabelecimento = cd_estabelecimento_w;
exception
when others then
	ie_import_itens_dem_grg_w := 'A';
end;


open C00;
loop
fetch C00 into	
	nr_seq_cabecalho_w,
	ie_versao_w;
EXIT WHEN NOT FOUND; /* apply on C00 */	

	open	c01;
	loop
	fetch	c01 into
		nr_seq_lote_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		open	c02;
		loop
		fetch	c02 into
			nr_seq_conta_w,
			cd_guia_operadora_w,
			cd_guia_prestador_w,
			cd_glosa_guia_w,
			vl_glosa_guia_w,
			vl_informado_guia_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */

			/* obter o numero da conta e o doc convenio de acordo com as regras do TISS */

			SELECT * FROM TISS_OBTER_GUIA_RETORNO(	nr_seq_conta_w, cd_convenio_p, cd_estabelecimento_w, cd_guia_operadora_w, cd_guia_prestador_w, nr_interno_conta_w, ie_guia_prestador_w, ie_dt_conta_w) INTO STRICT cd_guia_operadora_w, cd_guia_prestador_w, nr_interno_conta_w, ie_guia_prestador_w, ie_dt_conta_w;
			nr_doc_convenio_w	:= coalesce(cd_guia_operadora_w,cd_guia_prestador_w);

			if (nr_doc_convenio_w IS NOT NULL AND nr_doc_convenio_w::text <> '') then	/* obter a guia de acordo com as regras do TISS, com base no doc convenio */
				select	coalesce(trim(both max(ds_mascara_hosp)),'-1')
				into STRICT	ds_mascara_w
				from	tiss_regra_ret_guia a
				where	a.cd_convenio		= cd_convenio_p
				and	a.cd_estabelecimento	= cd_estabelecimento_w
				and	coalesce(a.ie_dig_guia_hosp,length(nr_doc_convenio_w)) = length(nr_doc_convenio_w);

				if (coalesce(ds_mascara_w::text, '') = '') then
					ds_mascara_w	:= '-1';
				end if;

				select	/*+ USE_CONCAT */					max(a.nr_interno_conta),
					max(a.cd_autorizacao)
				into STRICT	nr_interno_conta_w,
					cd_autorizacao_w
				from	conta_paciente b,
					conta_paciente_guia a
				where	a.nr_interno_conta	= coalesce(nr_interno_conta_w,a.nr_interno_conta)
				and	((ds_mascara_w = '-1' and a.cd_autorizacao = nr_doc_convenio_w) or (tiss_obter_doc_masc(a.cd_autorizacao,ds_mascara_w) = nr_doc_convenio_w))
				and	a.nr_interno_conta	= b.nr_interno_conta
				and	b.cd_convenio_parametro	= cd_convenio_p
				and	b.ie_status_acerto	= 2
				and	coalesce(b.ie_cancelamento::text, '') = '';
			end if;

			if (nr_interno_conta_w IS NOT NULL AND nr_interno_conta_w::text <> '') then
					
				update	tiss_dem_conta
				set	nr_interno_conta	= nr_interno_conta_w
				where	nr_sequencia		= nr_seq_conta_w;		
		
				select	(obter_saldo_conpaci(nr_interno_conta_w,cd_autorizacao_w))::numeric
				into STRICT	vl_saldo_guia_w
				;

				if (coalesce(vl_saldo_guia_w,0) = 0) then
					ie_guia_sem_saldo_w	:= 'S';
				else
					ie_guia_sem_saldo_w	:= 'N';
				end if;
				
				select	count(*)
				into STRICT	count_w
				from	lote_audit_hist_guia
				where	nr_seq_lote_hist	= nr_seq_lote_hist_p
				and	nr_interno_conta	= nr_interno_conta_w
				and	cd_autorizacao		= cd_autorizacao_w;
				
				if (count_w = 0) and --Nao importar guia duplicada
					((coalesce(ie_somente_com_saldo_w,'N') = 'N') or /*lhalves em 28/12/2012 - Nao gerar guias sem saldo*/
					 (coalesce(vl_saldo_guia_w,0) <> 0)) then

					select	nextval('lote_audit_hist_guia_seq')
					into STRICT	nr_seq_lote_guia_w
					;

					insert	into lote_audit_hist_guia(cd_autorizacao,
						dt_atualizacao,
						ie_guia_sem_saldo,
						nm_usuario,
						nr_interno_conta,
						nr_seq_lote_hist,
						nr_sequencia,
						vl_saldo_guia)
					values (cd_autorizacao_w,
						clock_timestamp(),
						ie_guia_sem_saldo_w,
						nm_usuario_p,
						nr_interno_conta_w,
						nr_seq_lote_hist_p,
						nr_seq_lote_guia_w,
						vl_saldo_guia_w);
					
					--OS 894924 em 12/06/2015 - Tratamento para os casos de glosa de glosa geral.

					--Caso exista motivo de glosa para a guia e o valor de glosa seja igual ao valor da guia, gera todos os itens desta guia, nao precisa ler do XML.
					if (cd_glosa_guia_w IS NOT NULL AND cd_glosa_guia_w::text <> '') and (vl_glosa_guia_w > 0) and (vl_glosa_guia_w = vl_informado_guia_w) then					
						
						ds_erro_w := GERAR_LOTE_HIST_ITEM_CONTA(	nr_seq_lote_guia_w, 'S', 'S', 'S', 'S', 'S', 'S', 'S', null, 'S', nm_usuario_p, ds_erro_w, 'N');
										
						/* obter o motivo de glosa de acordo com as regras do TISS */

						select	max(b.cd_motivo_glosa),
							max(b.ie_acao_glosa),
							max(b.cd_resposta),
							max(b.cd_setor_resp)
						into STRICT	cd_motivo_glosa_w,
							ie_acao_glosa_w,
							cd_resposta_w,
							cd_setor_responsavel_w
						from	motivo_glosa b,
							tiss_motivo_glosa a
						where	a.cd_motivo_tiss	= cd_glosa_guia_w
						and	coalesce(a.cd_convenio::text, '') = ''
						and	a.cd_motivo_glosa	= b.cd_motivo_glosa;

						if (coalesce(cd_motivo_glosa_w::text, '') = '') then /* se nao encontrar no padrao TISS, busca do cadastro do convenio */
							select	max(b.cd_motivo_glosa),
								max(b.ie_acao_glosa),
								max(b.cd_resposta),
								max(b.cd_setor_resp)
							into STRICT	cd_motivo_glosa_w,
								ie_acao_glosa_w,
								cd_resposta_w,
								cd_setor_responsavel_w
							from	motivo_glosa b,
								tiss_motivo_glosa a
							where	a.cd_motivo_tiss	= cd_glosa_guia_w
							and	a.cd_convenio		= cd_convenio_p
							and	a.cd_motivo_glosa	= b.cd_motivo_glosa;

						end if;
						
						

						/* se for glosa parcial a acao fica em branco, pq o usuario tem que informar o valor amenor */

						if (ie_acao_glosa_w = 'P') or (coalesce(cd_motivo_glosa_w::text, '') = '') or
							((coalesce(cd_setor_responsavel_w::text, '') = '') and (coalesce(cd_resposta_w::text, '') = '')) then
							ie_acao_glosa_w	:= null;
						end if;
						
						--Atualizar em todos os itens gerados para a guia, o valor amenor/glosa de acordo com o motivo e glosa
						if (ie_acao_glosa_w = 'R') then
						
							update	lote_audit_hist_item
							set	vl_amenor		= vl_glosa_informada,
								vl_glosa		= 0,
								cd_motivo_glosa		= cd_motivo_glosa_w,
								ie_acao_glosa		= ie_acao_glosa_w,
								cd_resposta		= cd_resposta_w,
								cd_setor_responsavel	= cd_setor_responsavel_w,
								cd_motivo_glosa_tiss	= cd_glosa_guia_w
							where	nr_seq_guia		= nr_seq_lote_guia_w;
						
						elsif (ie_acao_glosa_w = 'A') then
						
							update	lote_audit_hist_item
							set	vl_amenor		= 0,
								vl_glosa		= vl_glosa_informada,
								cd_motivo_glosa		= cd_motivo_glosa_w,
								ie_acao_glosa		= ie_acao_glosa_w,
								cd_resposta		= cd_resposta_w,
								cd_setor_responsavel	= cd_setor_responsavel_w,
								cd_motivo_glosa_tiss	= cd_glosa_guia_w
							where	nr_seq_guia		= nr_seq_lote_guia_w;
							
						else
						
							update	lote_audit_hist_item
							set	cd_motivo_glosa		= cd_motivo_glosa_w,
								ie_acao_glosa		= ie_acao_glosa_w,
								cd_resposta		= cd_resposta_w,
								cd_setor_responsavel	= cd_setor_responsavel_w,
								cd_motivo_glosa_tiss	= cd_glosa_guia_w
							where	nr_seq_guia		= nr_seq_lote_guia_w;
						end if;									
						
					else

						open	c03;
						loop
						fetch	c03 into
							cd_procedimento_w,
							nr_seq_conta_proc_w,
							ie_origem_proced_w,
							qt_procedimento_tiss_w,
							vl_glosa_informada_w,
							--cd_glosa_w,
							ds_item_w,
							cd_procedimento_xml_w,
							dt_realizacao_w;
						EXIT WHEN NOT FOUND; /* apply on c03 */
						
							SELECT	max(b.cd_glosa)
							INTO STRICT 	cd_glosa_w
							FROM	tiss_dem_glosa b,
								tiss_dem_conta_proc a
							WHERE	a.nr_seq_conta		= nr_seq_conta_w
							AND   	a.cd_procedimento = cd_procedimento_w
							AND	b.nr_seq_conta_proc	= a.nr_sequencia
							AND   	b.vl_glosa = (SELECT max(x.vl_glosa) from tiss_dem_glosa x
									    where x.nr_seq_conta_proc = b.nr_seq_conta_proc);

							nr_seq_propaci_w := null;
							nr_seq_matpaci_w := null;
							

							/* obter o motivo de glosa de acordo com as regras do TISS */

							select	max(b.cd_motivo_glosa),
								max(b.ie_acao_glosa),
								max(b.cd_resposta),
								max(b.cd_setor_resp)
							into STRICT	cd_motivo_glosa_w,
								ie_acao_glosa_w,
								cd_resposta_w,
								cd_setor_responsavel_w
							from	motivo_glosa b,
								tiss_motivo_glosa a
							where	a.cd_motivo_tiss	= cd_glosa_w
							and	coalesce(a.cd_convenio::text, '') = ''
							and	a.cd_motivo_glosa	= b.cd_motivo_glosa;

							if (coalesce(cd_motivo_glosa_w::text, '') = '') then /* se nao encontrar no padrao TISS, busca do cadastro do convenio */
								select	max(b.cd_motivo_glosa),
									max(b.ie_acao_glosa),
									max(b.cd_resposta),
									max(b.cd_setor_resp)
								into STRICT	cd_motivo_glosa_w,
									ie_acao_glosa_w,
									cd_resposta_w,
									cd_setor_responsavel_w
								from	motivo_glosa b,
									tiss_motivo_glosa a
								where	a.cd_motivo_tiss	= cd_glosa_w
								and	a.cd_convenio		= cd_convenio_p
								and	a.cd_motivo_glosa	= b.cd_motivo_glosa;

							end if;
							
							if (cd_motivo_glosa_w IS NOT NULL AND cd_motivo_glosa_w::text <> '') then
								
								begin
								select  a.ds_justificativa,
									a.cd_resposta
								into STRICT	ds_justificativa_w,
									cd_resposta_motivo_w
								from    motivo_glosa_justificativa a
                                                                where   a.nr_Sequencia	   = (	SELECT	max(x.nr_sequencia)
												from	motivo_glosa_justificativa x
												where (x.cd_convenio 		= cd_convenio_p or coalesce(x.cd_convenio::text, '') = '')
												and	x.cd_motivo_glosa 	= cd_motivo_glosa_w);
								exception
								when others then
									ds_justificativa_w 	:= null;
									cd_resposta_motivo_w 	:= null;
								end;
															
							end if;

							/* se for glosa parcial a acao fica em branco, pq o usuario tem que informar o valor amenor */

							if (ie_acao_glosa_w = 'P') or (coalesce(cd_motivo_glosa_w::text, '') = '') or
								((coalesce(cd_setor_responsavel_w::text, '') = '') and (coalesce(cd_resposta_w::text, '') = '')) then
								ie_acao_glosa_w	:= null;
							end if;

															
							if (coalesce(ie_agrupar_itens_w,'N') = 'N') then

								vl_glosa_rateado_w	:= 0;
								qt_procedimento_atual_w	:= qt_procedimento_tiss_w;

								open	c04;	/* obter a integridade do procedimento com a PROCEDIMENTO_PACIENTE */
								loop
								fetch	c04 into
									nr_seq_propaci_w,
									qt_procedimento_w;
								exit	when(c04%notfound or (qt_procedimento_atual_w <= 0));

									if (qt_procedimento_w > qt_procedimento_atual_w) then
										qt_procedimento_w	:= qt_procedimento_atual_w;
									end if;

									/* ratear a glosa para os procedimentos iguais - proporcional a quantidade */

									vl_glosa_item_w		:= (coalesce(vl_glosa_informada_w,0) * coalesce(qt_procedimento_w,0)) / coalesce(qt_procedimento_tiss_w,0);
									vl_glosa_rateado_w	:= coalesce(vl_glosa_rateado_w,0) + coalesce(vl_glosa_item_w,0);

									if (ie_acao_glosa_w = 'R') then
										vl_amenor_w	:= vl_glosa_item_w;
										vl_glosa_w	:= 0;
									elsif (ie_acao_glosa_w = 'A') then
										vl_amenor_w	:= 0;
										vl_glosa_w	:= vl_glosa_item_w;
									else
										vl_amenor_w	:= 0;
										vl_glosa_w	:= 0;
									end if;
									
									if (ie_setor_resp_atend_w = 'S') then
										select	max(cd_setor_atendimento)
										into STRICT	cd_setor_responsavel_w
										from	procedimento_paciente
										where	nr_sequencia	= nr_seq_propaci_w;
									end if;

									select	nextval('lote_audit_hist_item_seq')
									into STRICT	nr_seq_lote_item_w
									;

									insert	into lote_audit_hist_item(cd_motivo_glosa,
										cd_resposta,
										cd_setor_responsavel,
										dt_atualizacao,
										dt_historico,
										ie_acao_glosa,
										nm_usuario,
										nr_seq_guia,
										nr_seq_lote,
										nr_seq_propaci,
										nr_sequencia,
										qt_item,
										vl_amenor,
										vl_glosa_informada,
										vl_glosa,
										vl_pago,
										vl_saldo,
										cd_motivo_glosa_tiss,
										ds_observacao)
									values (cd_motivo_glosa_w,
										coalesce(cd_resposta_motivo_w,cd_resposta_w),
										cd_setor_responsavel_w,
										clock_timestamp(),
										clock_timestamp(),
										ie_acao_glosa_w,
										nm_usuario_p,
										nr_seq_lote_guia_w,
										nr_seq_lote_hist_p,
										nr_seq_propaci_w,
										nr_seq_lote_item_w,
										qt_procedimento_w,
										coalesce(vl_amenor_w,0),
										coalesce(vl_glosa_item_w,0),
										coalesce(vl_glosa_w,0),
										0,
										coalesce((obter_saldo_conpaci_item(nr_seq_propaci_w,null))::numeric ,0),
										cd_glosa_w,
										ds_justificativa_w);

									qt_procedimento_atual_w	:= coalesce(qt_procedimento_atual_w,0) - coalesce(qt_procedimento_w,0);

								end	loop;
								close	c04;

								qt_material_atual_w	:= qt_procedimento_tiss_w;

								open	c05;	/* obter a integridade do procedimento com a MATERIAL_ATEND_PACIENTE */
								loop
								fetch	c05 into
									nr_seq_matpaci_w,
									qt_material_w;
								exit	when(c05%notfound or (qt_material_atual_w <= 0));

									if (qt_material_w > qt_material_atual_w) then
										qt_material_w	:= qt_material_atual_w;
									end if;

									vl_glosa_item_w		:= (coalesce(vl_glosa_informada_w,0) * coalesce(qt_material_w,0)) / coalesce(qt_procedimento_tiss_w,0);
									vl_glosa_rateado_w	:= coalesce(vl_glosa_rateado_w,0) + coalesce(vl_glosa_item_w,0);

									if (ie_acao_glosa_w = 'R') then
										vl_amenor_w	:= vl_glosa_item_w;
										vl_glosa_w	:= 0;
									elsif (ie_acao_glosa_w = 'A') then
										vl_amenor_w	:= 0;
										vl_glosa_w	:= vl_glosa_item_w;
									else
										vl_amenor_w	:= 0;
										vl_glosa_w	:= 0;
									end if;
									
									if (ie_setor_resp_atend_w = 'S') then
										select	max(cd_setor_atendimento)
										into STRICT	cd_setor_responsavel_w
										from	material_atend_paciente
										where	nr_sequencia	= nr_seq_matpaci_w;
									end if;

									select	nextval('lote_audit_hist_item_seq')
									into STRICT	nr_seq_lote_item_w
									;

									insert	into lote_audit_hist_item(cd_motivo_glosa,
										cd_resposta,
										cd_setor_responsavel,
										dt_atualizacao,
										dt_historico,
										ie_acao_glosa,
										nm_usuario,
										nr_seq_guia,
										nr_seq_lote,
										nr_seq_propaci,
										nr_seq_matpaci,
										nr_sequencia,
										qt_item,
										vl_amenor,
										vl_glosa_informada,
										vl_glosa,
										vl_pago,
										vl_saldo,
										cd_motivo_glosa_tiss,
										ds_observacao)
									values (cd_motivo_glosa_w,
										coalesce(cd_resposta_motivo_w,cd_resposta_w),
										cd_setor_responsavel_w,
										clock_timestamp(),
										clock_timestamp(),
										ie_acao_glosa_w,
										nm_usuario_p,
										nr_seq_lote_guia_w,
										nr_seq_lote_hist_p,
										null,
										nr_seq_matpaci_w,
										nr_seq_lote_item_w,
										qt_material_w,
										coalesce(vl_amenor_w,0),
										coalesce(vl_glosa_item_w,0),
										coalesce(vl_glosa_w,0),
										0,
										coalesce((obter_saldo_conpaci_item(null,nr_seq_matpaci_w))::numeric ,0),
										cd_glosa_w,
										ds_justificativa_w);

									qt_material_atual_w	:= coalesce(qt_material_atual_w,0) - coalesce(qt_material_w,0);

								end	loop;
								close	c05;
							else
								/*
								Alterado por lhalves em 10/02/2012 OS 398584
								Nao utilizar o c04 e c05, para buscar a integridade com a conta, fazer o select abaixo.
								*/
								
								if (dt_realizacao_w IS NOT NULL AND dt_realizacao_w::text <> '') then
									
									select	max(a.nr_sequencia)
									into STRICT	nr_seq_propaci_w
									from	procedimento_paciente a
									where	a.nr_interno_conta		= nr_interno_conta_w
									and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
									and	coalesce(a.nr_doc_convenio,coalesce(cd_autorizacao_w,'0')) = coalesce(coalesce(cd_autorizacao_w,a.nr_doc_convenio),'0')
									and	trunc(a.dt_conta)		= trunc(dt_realizacao_w)
									and	not exists (	SELECT	1
										from	lote_audit_hist_item i,
											lote_audit_hist_guia g
										where	i.nr_seq_propaci 	 = a.nr_sequencia
										and	g.cd_autorizacao 	 = a.nr_doc_convenio
										and	g.nr_interno_conta = a.nr_interno_conta
										and 	i.nr_seq_guia 	 = g.nr_sequencia
										and	g.nr_seq_lote_hist = nr_seq_lote_hist_p)
									and (a.cd_procedimento		= cd_procedimento_w or
										a.cd_procedimento_tuss		= cd_procedimento_w or
										a.cd_procedimento_convenio	= to_char(cd_procedimento_w) or
										a.cd_procedimento_convenio	= to_char(cd_procedimento_xml_w) or
										a.cd_procedimento_convenio 	= ltrim(cd_procedimento_xml_w,'0') or
										a.cd_procedimento_tuss		= somente_numero(cd_procedimento_xml_w));
										
									select	max(a.nr_sequencia)
									into STRICT	nr_seq_matpaci_w
									from	material_atend_paciente a
									where	a.nr_interno_conta	= nr_interno_conta_w
									and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
									and	a.qt_material		> 0
									and	trunc(a.dt_conta)		= trunc(dt_realizacao_w)
									and	not exists (	SELECT	1
										from	lote_audit_hist_item i,
											lote_audit_hist_guia g
										where	i.nr_seq_matpaci 	 = a.nr_sequencia
										and	g.cd_autorizacao 	 = a.nr_doc_convenio
										and	g.nr_interno_conta = a.nr_interno_conta
										and 	i.nr_seq_guia 	 = g.nr_sequencia
										and	g.nr_seq_lote_hist = nr_seq_lote_hist_p)
									and	coalesce(a.nr_doc_convenio,coalesce(cd_autorizacao_w,'0')) = coalesce(coalesce(cd_autorizacao_w,a.nr_doc_convenio),'0')
									and (a.cd_material		= cd_procedimento_w or
										somente_numero(a.cd_material_convenio)	= cd_procedimento_w or
										somente_numero(a.cd_material_tiss)	= cd_procedimento_w or
										somente_numero(a.cd_material_tuss)	= cd_procedimento_w);
						
								end if;
								
								if (coalesce(nr_seq_propaci_w::text, '') = '') and (coalesce(nr_seq_matpaci_w::text, '') = '') then
									select	max(a.nr_sequencia)
									into STRICT	nr_seq_propaci_w
									from	procedimento_paciente a
									where	a.nr_interno_conta		= nr_interno_conta_w
									and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
									and	coalesce(a.nr_doc_convenio,coalesce(cd_autorizacao_w,'0')) = coalesce(coalesce(cd_autorizacao_w,a.nr_doc_convenio),'0')
									and (a.cd_procedimento		= cd_procedimento_w or
										a.cd_procedimento_tuss		= cd_procedimento_w or
										a.cd_procedimento_convenio	= to_char(cd_procedimento_w) or
										a.cd_procedimento_convenio	= to_char(cd_procedimento_xml_w) or
										a.cd_procedimento_convenio 	= ltrim(cd_procedimento_xml_w,'0') or
										a.cd_procedimento_tuss		= somente_numero(cd_procedimento_xml_w));
								end if;
								
								if (coalesce(nr_seq_propaci_w::text, '') = '') and (coalesce(nr_seq_matpaci_w::text, '') = '') THEN
									
									select	max(a.nr_sequencia)
									into STRICT	nr_seq_propaci_w
									from	procedimento_paciente a
									where	a.nr_interno_conta		= nr_interno_conta_w
									and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
									and	coalesce(a.nr_doc_convenio,coalesce(cd_autorizacao_w,'0')) = coalesce(coalesce(cd_autorizacao_w,a.nr_doc_convenio),'0')
									and	EXISTS (SELECT 1 FROM tiss_regra_tabela_proc t
										           WHERE t.cd_procedimento_convenio = ltrim(cd_procedimento_xml_w,'0')
										            AND  t.cd_procedimento = a.cd_procedimento
										            AND  t.ie_origem_proced = a.ie_origem_proced
										            and  t.nr_seq_tiss_tabela = a.nr_seq_tiss_tabela);
										
								end if;
								
								if (coalesce(nr_seq_propaci_w::text, '') = '') and (coalesce(nr_seq_matpaci_w::text, '') = '') then
									
									select	max(a.nr_sequencia)
									into STRICT	nr_seq_matpaci_w
									from	material_atend_paciente a
									where	a.nr_interno_conta	= nr_interno_conta_w
									and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
									and	a.qt_material		> 0
									and	coalesce(a.nr_doc_convenio,coalesce(cd_autorizacao_w,'0')) = coalesce(coalesce(cd_autorizacao_w,a.nr_doc_convenio),'0')
									and (a.cd_material		= cd_procedimento_w or
										somente_numero(a.cd_material_convenio)	= cd_procedimento_w or
										somente_numero(a.cd_material_tiss)	= cd_procedimento_w or
										somente_numero(a.cd_material_tuss)	= cd_procedimento_w);
									
								end if;
								

								

								if (nr_seq_propaci_w IS NOT NULL AND nr_seq_propaci_w::text <> '') then

									if (ie_acao_glosa_w = 'R') then
										vl_amenor_w	:= vl_glosa_informada_w;
										vl_glosa_w	:= 0;
									elsif (ie_acao_glosa_w = 'A') then
										vl_amenor_w	:= 0;
										vl_glosa_w	:= vl_glosa_informada_w;
									else
										vl_amenor_w	:= 0;
										vl_glosa_w	:= 0;
									end if;
									
									if (ie_setor_resp_atend_w = 'S') then
										select	max(cd_setor_atendimento)
										into STRICT	cd_setor_responsavel_w
										from	procedimento_paciente
										where	nr_sequencia	= nr_seq_propaci_w;
									end if;

									select	nextval('lote_audit_hist_item_seq')
									into STRICT	nr_seq_lote_item_w
									;

									insert	into lote_audit_hist_item(cd_motivo_glosa,
										cd_resposta,
										cd_setor_responsavel,
										dt_atualizacao,
										dt_historico,
										ie_acao_glosa,
										nm_usuario,
										nr_seq_guia,
										nr_seq_lote,
										nr_seq_propaci,
										nr_sequencia,
										qt_item,
										vl_amenor,
										vl_glosa_informada,
										vl_glosa,
										vl_pago,
										vl_saldo,
										cd_motivo_glosa_tiss,
										ds_observacao)
									values (cd_motivo_glosa_w,
										coalesce(cd_resposta_motivo_w,cd_resposta_w),
										cd_setor_responsavel_w,
										clock_timestamp(),
										clock_timestamp(),
										ie_acao_glosa_w,
										nm_usuario_p,
										nr_seq_lote_guia_w,
										nr_seq_lote_hist_p,
										nr_seq_propaci_w,
										nr_seq_lote_item_w,
										qt_procedimento_tiss_w,
										coalesce(vl_amenor_w,0),
										coalesce(vl_glosa_informada_w,0),
										coalesce(vl_glosa_w,0),
										0,
										coalesce((obter_saldo_conpaci_item(nr_seq_propaci_w,null))::numeric ,0) * coalesce(qt_procedimento_tiss_w,0),
										cd_glosa_w,
										ds_justificativa_w);

								elsif (nr_seq_matpaci_w IS NOT NULL AND nr_seq_matpaci_w::text <> '') then

									if (ie_acao_glosa_w = 'R') then
										vl_amenor_w	:= vl_glosa_informada_w;
										vl_glosa_w	:= 0;
									elsif (ie_acao_glosa_w = 'A') then
										vl_amenor_w	:= 0;
										vl_glosa_w	:= vl_glosa_informada_w;
									else
										vl_amenor_w	:= 0;
										vl_glosa_w	:= 0;
									end if;
									
									if (ie_setor_resp_atend_w = 'S') then
										select	max(cd_setor_atendimento)
										into STRICT	cd_setor_responsavel_w
										from	material_atend_paciente
										where	nr_sequencia	= nr_seq_matpaci_w;
									end if;

									select	nextval('lote_audit_hist_item_seq')
									into STRICT	nr_seq_lote_item_w
									;

									insert	into lote_audit_hist_item(cd_motivo_glosa,
										cd_resposta,
										cd_setor_responsavel,
										dt_atualizacao,
										dt_historico,
										ie_acao_glosa,
										nm_usuario,
										nr_seq_guia,
										nr_seq_lote,
										nr_seq_propaci,
										nr_seq_matpaci,
										nr_sequencia,
										qt_item,
										vl_amenor,
										vl_glosa_informada,
										vl_glosa,
										vl_pago,
										vl_saldo,
										cd_motivo_glosa_tiss,
										ds_observacao)
									values (cd_motivo_glosa_w,
										coalesce(cd_resposta_motivo_w,cd_resposta_w),
										cd_setor_responsavel_w,
										clock_timestamp(),
										clock_timestamp(),
										ie_acao_glosa_w,
										nm_usuario_p,
										nr_seq_lote_guia_w,
										nr_seq_lote_hist_p,
										null,
										nr_seq_matpaci_w,
										nr_seq_lote_item_w,
										qt_procedimento_tiss_w,
										coalesce(vl_amenor_w,0),
										coalesce(vl_glosa_informada_w,0),
										coalesce(vl_glosa_w,0),
										0,
										coalesce((obter_saldo_conpaci_item(null,nr_seq_matpaci_w))::numeric ,0)* coalesce(qt_procedimento_tiss_w,0),
										cd_glosa_w,
										ds_justificativa_w);

								end if;
							end if;

							if (coalesce(nr_seq_propaci_w::text, '') = '') and (coalesce(nr_seq_matpaci_w::text, '') = '') then
								ds_texto_w := 	substr(wheb_mensagem_pck.get_texto(310503)||chr(13)||
										wheb_mensagem_pck.get_texto(280625)|| ' ' || nr_interno_conta_w	||chr(13)||
										wheb_mensagem_pck.get_texto(297332)||': '|| cd_procedimento_w ||' - '|| ds_item_w ||
										' - ' || wheb_mensagem_pck.get_texto(310506)|| ' ' || ie_origem_proced_w ||chr(13)||
										wheb_mensagem_pck.get_texto(297313)|| ' ' || cd_autorizacao_w ,1,2000);
							/*
							Item nao localizado na conta.
							Conta: nr_interno_conta_w
							Item: cd_procedimento_w - ds_item_w - Origem: ie_origem_proced_w
							Guia: cd_autorizacao_w
							*/
	
								CALL TISS_GRAVAR_LOG_REAP(null, nr_seq_lote_hist_p, ds_texto_w, nm_usuario_p);							
							end if;

							/* adicionar a sobra do rateio ao ultimo item correspondente ao procedimento selecionado no c03 */

							
							update	lote_audit_hist_item
							set	vl_glosa_informada	= ((coalesce(vl_glosa_informada,0) + coalesce(vl_glosa_informada_w,0)) - coalesce(vl_glosa_rateado_w,0)),							
								vl_glosa		= CASE WHEN ie_acao_glosa='A' THEN vl_glosa_item_w  ELSE 0 END ,
								vl_amenor		= CASE WHEN ie_acao_glosa='R' THEN vl_glosa_item_w  ELSE 0 END
							where	nr_sequencia		= nr_seq_lote_item_w
							and	coalesce(ie_agrupar_itens_w,'N') = 'N';
							/*
							So deve adicionar o glosa rateado quando gerar todos os itens
							da conta. Pois o sistema rateia o glosa pelos itens.
							*/

							
							
							/* fim sobra rateio */

							nr_seq_lote_item_w := 0;
						end	loop;
						close	c03;

						if (coalesce(ie_ajustar_itens_conta_w,'N') = 'S') then	/* ajuste dos itens negativos (estornos) */
							CALL AJUSTAR_LOTE_HIST_ITEM_CONTA(nr_seq_lote_guia_w,'N',nm_usuario_p);
						end if;
					end if;
				end if;

			else
				ds_texto_w := substr(wheb_mensagem_pck.get_texto(310521,'CD_GUIA_OPERADORA_P='|| cd_guia_operadora_w),1,2000);
				CALL TISS_GRAVAR_LOG_REAP(	null,
							nr_seq_lote_hist_p,
							ds_texto_w,
							nm_usuario_p);
			end if;

		end	loop;
		close	c02;

	end	loop;
	close	c01;

end loop;
close C00;

commit;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tiss_gerar_lote_recurso (nr_seq_lote_hist_p bigint, nr_seq_cabecalho_p bigint, cd_convenio_p bigint, nm_usuario_p text) FROM PUBLIC;

