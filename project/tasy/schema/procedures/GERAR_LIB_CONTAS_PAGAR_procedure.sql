-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_lib_contas_pagar ( nr_seq_documento_p bigint, cd_funcao_p bigint, nm_usuario_p text, ie_acao_p text) AS $body$
DECLARE


dt_fim_vigencia_w		timestamp;
dt_inicio_vigencia_w	timestamp;
dt_remessa_retorno_w	timestamp;
dt_liberacao_w		timestamp;
cd_estabelecimento_w	smallint;
qt_min_usuario_lib_w	bigint;
nr_seq_regra_lib_w		bigint;
qt_total_usuario_lib_w	bigint	:= 0;
nm_usuario_lib_w		varchar(255);
ie_origem_w		varchar(255);
nr_titulo_w		bigint;
vl_minimo_w		double precision;
vl_maximo_w		double precision;
vl_titulo_w		double precision;
vl_total_pagamento_w	double precision;
vl_total_bordero_w		double precision;
ie_remessa_retorno_w	varchar(1);
cont_w			bigint;
ie_nivel_w		bigint;
cd_operacao_nf_w	smallint;
nr_seq_nota_fiscal_w	bigint;
cd_perfil_w		bigint;
count_w			bigint;
ie_aprovar_w    varchar(1);

c01 CURSOR FOR
SELECT	nr_sequencia,
	coalesce(qt_min_usuario_lib,0),
	ie_origem,
	vl_minimo,
	vl_maximo
from	regra_lib_cp
where	coalesce(ie_origem,'PE')		in ('PE','TP')
and	dt_remessa_retorno_w	between dt_inicio_vigencia and fim_dia(dt_fim_vigencia)
and	cd_estabelecimento	= cd_estabelecimento_w
and	cd_funcao_p		= 857

union

SELECT	nr_sequencia,
	coalesce(qt_min_usuario_lib,0),
	ie_origem,
	vl_minimo,
	vl_maximo
from	regra_lib_cp
where	coalesce(ie_origem,'PE')		in ('BP','TP')
and	clock_timestamp()			between dt_inicio_vigencia and fim_dia(dt_fim_vigencia)
and	cd_estabelecimento	= cd_estabelecimento_w
and	cd_funcao_p		= 855

union

select	nr_sequencia,
	coalesce(qt_min_usuario_lib,0),
	ie_origem,
	vl_minimo,
	vl_maximo
from	regra_lib_cp
where	coalesce(cd_operacao_nf,coalesce(cd_operacao_nf_w,0))	= coalesce(cd_operacao_nf_w,0)
and	coalesce(ie_origem,'PE')		= 'TP'
and	clock_timestamp()			between dt_inicio_vigencia and fim_dia(dt_fim_vigencia)
and	cd_estabelecimento	= cd_estabelecimento_w
and	cd_funcao_p		= 851;

c02 CURSOR FOR
SELECT	nm_usuario_lib,
	ie_nivel
from	regra_lib_cp_usuario
where	nr_seq_regra		= nr_seq_regra_lib_w
and	(nm_usuario_lib IS NOT NULL AND nm_usuario_lib::text <> '');

c03 CURSOR FOR
SELECT	a.nr_titulo,
	a.vl_escritural
from	titulo_pagar_escrit a
where	a.nr_seq_escrit		= nr_seq_documento_p;

c04 CURSOR FOR
SELECT	a.nr_titulo,
	a.vl_bordero
from	bordero_tit_pagar a
where	a.nr_bordero		= nr_seq_documento_p

union all

SELECT	a.nr_titulo,
	a.vl_bordero
from	titulo_pagar_v a
where	a.nr_bordero		= nr_seq_documento_p;

C05 CURSOR FOR
SELECT	a.cd_perfil
from	regra_lib_cp_perfil a
where	(a.cd_perfil IS NOT NULL AND a.cd_perfil::text <> '')
and	a.nr_seq_regra		= nr_seq_regra_lib_w;


BEGIN

ie_aprovar_w := obter_param_usuario(8559, 10, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_aprovar_w);

if (cd_funcao_p = 851) then

	cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;

	select	max(a.vl_titulo),
		max(a.nr_seq_nota_fiscal)
	into STRICT	vl_titulo_w,
		nr_seq_nota_fiscal_w
	from	titulo_pagar a
	where	a.nr_titulo	= nr_seq_documento_p;

	if (nr_seq_nota_fiscal_w IS NOT NULL AND nr_seq_nota_fiscal_w::text <> '') then
		select	max(a.cd_operacao_nf)
		into STRICT	cd_operacao_nf_w
		from	nota_fiscal a
		where	a.nr_sequencia	= nr_seq_nota_fiscal_w;
	end if;

	open c01;
	loop
	fetch c01 into
		nr_seq_regra_lib_w,
		qt_min_usuario_lib_w,
		ie_origem_w,
		vl_minimo_w,
		vl_maximo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */

		if (coalesce(vl_titulo_w, 0) between coalesce(vl_minimo_w, coalesce(vl_titulo_w, 0)) and coalesce(vl_maximo_w, coalesce(vl_titulo_w, 0))) then
			
			qt_total_usuario_lib_w	:= qt_total_usuario_lib_w + qt_min_usuario_lib_w;

			open c02;
			loop
			fetch c02 into
				nm_usuario_lib_w,
				ie_nivel_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */

				insert into conta_pagar_lib(
					dt_atualizacao,
					dt_atualizacao_nrec,
					dt_liberacao,
					ie_nivel,
					nm_usuario,
					nm_usuario_lib,
					nm_usuario_nrec,
					nr_titulo,
					nr_seq_regra_lib,
					nr_sequencia)
				values (clock_timestamp(),
					clock_timestamp(),
					null,
					ie_nivel_w,
					nm_usuario_p,
					nm_usuario_lib_w,
					nm_usuario_p,
					nr_seq_documento_p,
					nr_seq_regra_lib_w,
					nextval('conta_pagar_lib_seq'));

			end loop;
			close c02;

            open C05;
            loop
            fetch C05 into	
                cd_perfil_w;
            EXIT WHEN NOT FOUND; /* apply on C05 */

				insert into conta_pagar_lib(
					dt_atualizacao,
					dt_atualizacao_nrec,
					dt_liberacao,
					ie_nivel,
					nm_usuario,
					nm_usuario_lib,
					nm_usuario_nrec,
					nr_titulo,
					nr_seq_regra_lib,
                    cd_perfil,
					nr_sequencia)
				values (clock_timestamp(),
					clock_timestamp(),
					null,
					null,
					nm_usuario_p,
					null,
					nm_usuario_p,
					nr_seq_documento_p,
					nr_seq_regra_lib_w,
                    cd_perfil_w,
					nextval('conta_pagar_lib_seq'));
            end loop;
            close C05;
	
		end if;

	end loop;
	close c01;
	
	update	titulo_pagar
	set	qt_min_usuario_lib		= qt_total_usuario_lib_w
	where	nr_titulo		= nr_seq_documento_p;	

elsif (cd_funcao_p = 857) then	/* Pagamento Escritural */
	

	select	max(a.dt_remessa_retorno),
		max(a.cd_estabelecimento),
		coalesce(max(a.ie_remessa_retorno),'R')
	into STRICT	dt_remessa_retorno_w,
		cd_estabelecimento_w,
		ie_remessa_retorno_w
	from	banco_escritural a
	where	a.nr_sequencia		= nr_seq_documento_p;

	select	((sum(vl_escritural) - sum(vl_desconto)) + sum(vl_acrescimo))
	into STRICT	vl_total_pagamento_w
	from	titulo_pagar_escrit
	where	nr_seq_escrit	= nr_seq_documento_p;

	if (coalesce(ie_acao_p,'L') = 'L') then
		-- obter regras de pagamento escritural
		open c01;
		loop
		fetch c01 into
			nr_seq_regra_lib_w,
			qt_min_usuario_lib_w,
			ie_origem_w,
			vl_minimo_w,
			vl_maximo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */

			if (ie_origem_w	= 'PE') then

				if	((vl_total_pagamento_w between vl_minimo_w and vl_maximo_w)
					or (coalesce(vl_minimo_w::text, '') = '' and coalesce(vl_maximo_w::text, '') = '')) then

					if (coalesce(ie_remessa_retorno_w,'R') = 'R') then	/* quando remessa, solicitar liberacao de todos os usuarios */
						qt_total_usuario_lib_w	:= qt_total_usuario_lib_w + qt_min_usuario_lib_w;
					else
						qt_total_usuario_lib_w	:= 0;		/* quando retorno, solicitar liberacao de apenas um usuario */
					end if;

					select 	count(*)
					into STRICT	count_w
					from	conta_pagar_lib
					where	nr_seq_banco_escrit = nr_seq_documento_p
					and		coalesce(nr_titulo::text, '') = '';
					if ( count_w > 0 ) then
					
						CALL wheb_mensagem_pck.exibir_mensagem_abort(1097408);
					end if;
				
				
					-- gerar todos os usuarios de todas as regra encontradas
					
					open c02;
					loop
					fetch c02 into
						nm_usuario_lib_w,
						ie_nivel_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */
					
                    if (coalesce(ie_aprovar_w,'S') = 'S') then				
						if (nm_usuario_lib_w = nm_usuario_p) then
							dt_liberacao_w	:= clock_timestamp();
						else
							dt_liberacao_w	:= null;
						end if;	
					else
						dt_liberacao_w	:= null;
					end if;

					insert	into conta_pagar_lib(
							dt_atualizacao,
							dt_atualizacao_nrec,
							dt_liberacao,
							ie_nivel,
							nm_usuario,
							nm_usuario_lib,
							nm_usuario_nrec,
							nr_seq_banco_escrit,
							nr_seq_regra_lib,
							nr_sequencia)
						values (clock_timestamp(),
							clock_timestamp(),
							dt_liberacao_w,
							ie_nivel_w,
							nm_usuario_p,
							nm_usuario_lib_w,
							nm_usuario_p,
							nr_seq_documento_p,
							nr_seq_regra_lib_w,
							nextval('conta_pagar_lib_seq'));
							
					end loop;
					close C02;
					
					open C05;
					loop
					fetch C05 into	
						cd_perfil_w;
					EXIT WHEN NOT FOUND; /* apply on C05 */
						
						insert into conta_pagar_lib(
							dt_atualizacao,
							dt_atualizacao_nrec,
							dt_liberacao,
							ie_nivel,
							nm_usuario,
							nm_usuario_lib,
							nm_usuario_nrec,
							nr_seq_banco_escrit,
							cd_perfil,
							nr_seq_regra_lib,
							nr_sequencia)
						values (clock_timestamp(),
							 clock_timestamp(),
							 null,
							 null,
							 nm_usuario_p,
							 null,
							 nm_usuario_p,
							 nr_seq_documento_p,
							 cd_perfil_w,
							 nr_seq_regra_lib_w,
							 nextval('conta_pagar_lib_seq'));

					end loop;
					close C05;

				end if;

			elsif (ie_origem_w	= 'TP') then

				open c03;
				loop
				fetch c03 into
					nr_titulo_w,
					vl_titulo_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */

					if	((vl_titulo_w between vl_minimo_w and vl_maximo_w)
						 or (coalesce(vl_minimo_w::text, '') = '' and coalesce(vl_maximo_w::text, '') = '')) then

						-- gerar todos os usuarios de todas as regra encontradas
						open c02;
						loop
						fetch c02 into
							nm_usuario_lib_w,
							ie_nivel_w;
						EXIT WHEN NOT FOUND; /* apply on C02 */

							if (coalesce(ie_aprovar_w,'S') = 'S') then				
								if (nm_usuario_lib_w = nm_usuario_p) then
									dt_liberacao_w	:= clock_timestamp();
								else
									dt_liberacao_w	:= null;
								end if;	
							else
								dt_liberacao_w	:= null;
							end if;

							insert	into conta_pagar_lib(
								dt_atualizacao,
								dt_atualizacao_nrec,
								dt_liberacao,
								ie_nivel,
								nm_usuario,
								nm_usuario_lib,
								nm_usuario_nrec,
								nr_titulo,
								nr_seq_banco_escrit,
								nr_seq_regra_lib,
								nr_sequencia)
							values (clock_timestamp(),
								clock_timestamp(),
								dt_liberacao_w,
								ie_nivel_w,
								nm_usuario_p,
								nm_usuario_lib_w,
								nm_usuario_p,
								nr_titulo_w,
								nr_seq_documento_p,
								nr_seq_regra_lib_w,
								nextval('conta_pagar_lib_seq'));

						end loop;
						close C02;

                        open C05;
                        loop
                        fetch C05 into	
                            cd_perfil_w;
                        EXIT WHEN NOT FOUND; /* apply on C05 */
							insert	into conta_pagar_lib(
								dt_atualizacao,
								dt_atualizacao_nrec,
								dt_liberacao,
								ie_nivel,
								nm_usuario,
								nm_usuario_lib,
								nm_usuario_nrec,
								nr_titulo,
								nr_seq_banco_escrit,
								nr_seq_regra_lib,
                                cd_perfil,
								nr_sequencia)
							values (clock_timestamp(),
								clock_timestamp(),
								dt_liberacao_w,
								null,
								nm_usuario_p,
								null,
								nm_usuario_p,
								nr_titulo_w,
								nr_seq_documento_p,
								nr_seq_regra_lib_w,
                                cd_perfil_w,
								nextval('conta_pagar_lib_seq'));
                        end loop;
                        close C05;
					end if;

				end loop;
				close C03;

			end if;

		end loop;
		close C01;

	elsif (ie_acao_p = 'D') then
		delete	from conta_pagar_lib
		where	nr_seq_banco_escrit	= nr_seq_documento_p;
	end if;

	update	banco_escritural
	set	qt_min_usuario_lib	= qt_total_usuario_lib_w
	where	nr_sequencia		= nr_seq_documento_p;

elsif (cd_funcao_p = 855) then	/* Bordero a Pagar */
	select	max(a.cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	bordero_pagamento a
	where	a.nr_bordero		= nr_seq_documento_p;

	select	obter_valor_bordero_pagar(nr_seq_documento_p)
	into STRICT	vl_total_bordero_w
	;

	open c01;
	loop
	fetch c01 into
		nr_seq_regra_lib_w,
		qt_min_usuario_lib_w,
		ie_origem_w,
		vl_minimo_w,
		vl_maximo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */

		if (ie_origem_w	= 'BP') then

			if	((vl_total_bordero_w between vl_minimo_w and vl_maximo_w)
				or (coalesce(vl_minimo_w::text, '') = '' and coalesce(vl_maximo_w::text, '') = '')) then

				qt_total_usuario_lib_w	:= qt_total_usuario_lib_w + qt_min_usuario_lib_w;
				
				select 	count(*)
				into STRICT	count_w
				from	conta_pagar_lib
				where	nr_bordero = nr_seq_documento_p
				and		coalesce(nr_titulo::text, '') = '';
				if ( count_w > 0 ) then
					
					CALL wheb_mensagem_pck.exibir_mensagem_abort(234161);
				end if;

				open c02;
				loop
				fetch c02 into
					nm_usuario_lib_w,
					ie_nivel_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */					

                    if (coalesce(ie_aprovar_w,'S') = 'S') then				
						if (nm_usuario_lib_w = nm_usuario_p) then
							dt_liberacao_w	:= clock_timestamp();
						else
							dt_liberacao_w	:= null;
						end if;	
					else
						dt_liberacao_w	:= null;
					end if;					
					
					insert	into conta_pagar_lib(
						dt_atualizacao,
						dt_atualizacao_nrec,
						dt_liberacao,
						ie_nivel,
						nm_usuario,
						nm_usuario_lib,
						nm_usuario_nrec,
						nr_bordero,
						nr_seq_regra_lib,
						nr_sequencia)
					values (clock_timestamp(),
						clock_timestamp(),
						dt_liberacao_w,
						ie_nivel_w,
						nm_usuario_p,
						nm_usuario_lib_w,
						nm_usuario_p,
						nr_seq_documento_p,
						nr_seq_regra_lib_w,
						nextval('conta_pagar_lib_seq'));

				end loop;
				close C02;
				
				open C05;
				loop
				fetch C05 into	
					cd_perfil_w;
				EXIT WHEN NOT FOUND; /* apply on C05 */
					
					insert into conta_pagar_lib(
						dt_atualizacao,
						dt_atualizacao_nrec,
						dt_liberacao,
						ie_nivel,
						nm_usuario,
						nm_usuario_lib,
						nm_usuario_nrec,
						nr_bordero,
						cd_perfil,
						nr_seq_regra_lib,
						nr_sequencia)
					values (clock_timestamp(),
						 clock_timestamp(),
						 null,
						 null,
						 nm_usuario_p,
						 null,
						 nm_usuario_p,
						 nr_seq_documento_p,
						 cd_perfil_w,
						 nr_seq_regra_lib_w,
						 nextval('conta_pagar_lib_seq'));

				end loop;
				close C05;
			end if;

		elsif (ie_origem_w	= 'TP') then
			open c04;
			loop
			fetch c04 into
				nr_titulo_w,
				vl_titulo_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */

				if	((vl_titulo_w between vl_minimo_w and vl_maximo_w)
					 or (coalesce(vl_minimo_w::text, '') = '' and coalesce(vl_maximo_w::text, '') = '')) then

					open c02;
					loop
					fetch c02 into
						nm_usuario_lib_w,
						ie_nivel_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */

						if (coalesce(ie_aprovar_w,'S') = 'S') then				
							if (nm_usuario_lib_w = nm_usuario_p) then
								dt_liberacao_w	:= clock_timestamp();
							else
								dt_liberacao_w	:= null;
							end if;	
						else
							dt_liberacao_w	:= null;
						end if;						

						insert	into conta_pagar_lib(
							dt_atualizacao,
							dt_atualizacao_nrec,
							dt_liberacao,
							ie_nivel,
							nm_usuario,
							nm_usuario_lib,
							nm_usuario_nrec,
							nr_titulo,
							nr_bordero,
							nr_seq_regra_lib,
							nr_sequencia)
						values (clock_timestamp(),
							clock_timestamp(),
							dt_liberacao_w,
							ie_nivel_w,
							nm_usuario_p,
							nm_usuario_lib_w,
							nm_usuario_p,
							nr_titulo_w,
							nr_seq_documento_p,
							nr_seq_regra_lib_w,
							nextval('conta_pagar_lib_seq'));

					end loop;
					close C02;

                    open C05;
                    loop
                    fetch C05 into	
                        cd_perfil_w;
                    EXIT WHEN NOT FOUND; /* apply on C05 */

                        insert into conta_pagar_lib(
                            dt_atualizacao,
                            dt_atualizacao_nrec,
                            dt_liberacao,
                            ie_nivel,
                            nm_usuario,
                            nm_usuario_lib,
                            nm_usuario_nrec,
                            nr_titulo,
                            nr_bordero,
                            nr_seq_regra_lib,
                            cd_perfil,
                            nr_sequencia)
                        values (clock_timestamp(),
                            clock_timestamp(),
                            dt_liberacao_w,
                            null,
                            nm_usuario_p,
                            null,
                            nm_usuario_p,
                            nr_titulo_w,
                            nr_seq_documento_p,                            
                            nr_seq_regra_lib_w,
                            cd_perfil_w,                    
                            nextval('conta_pagar_lib_seq'));
                    end loop;
                    close C05;
				end if;

			end loop;
			close C04;

		end if;

	end loop;
	close C01;

	update	bordero_pagamento
	set	qt_min_usuario_lib		= qt_total_usuario_lib_w
	where	nr_bordero		= nr_seq_documento_p;

end if;

end	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_lib_contas_pagar ( nr_seq_documento_p bigint, cd_funcao_p bigint, nm_usuario_p text, ie_acao_p text) FROM PUBLIC;

