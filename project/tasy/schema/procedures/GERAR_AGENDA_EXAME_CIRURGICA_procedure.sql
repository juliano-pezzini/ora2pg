-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_agenda_exame_cirurgica ( nr_sequencia_exame_p bigint, nr_sequencia_cirurgia_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
 
nr_atendimento_w			bigint;
cd_procedimento_w			bigint;
ie_origem_proced_w			bigint;
nr_seq_proc_interno_w		bigint;
cd_pessoa_fisica_w			varchar(10);
cd_medico_w					varchar(10);
cd_setor_atendimento_w		integer;
ie_lado_w					varchar(1);
cd_medico_solicitante_w		varchar(10);
cd_convenio_w				integer;
dt_nascimento_w				timestamp;
qt_idade_w					smallint;
cd_medico_resp_w			varchar(10);
cd_categoria_w				varchar(20);
cd_tipo_acomodacao_w		smallint;
cd_usuario_convenio_w		varchar(30);
dt_validade_carteira_w		timestamp;
ie_tipo_atendimento_w		bigint;
qt_idade_mes_w				smallint;
cd_plano_w					varchar(10);
nr_sequencia_proc_w			bigint;
ie_status_w					varchar(10);
qt_procedimento_w			double precision;

 
c01 CURSOR FOR 
	SELECT 		nr_seq_proc_interno, 
				cd_procedimento, 
				ie_origem_proced, 
				ie_lado, 
				cd_medico, 
				qt_procedimento 
	from		agenda_paciente_proc 
	where		nr_sequencia = nr_sequencia_exame_p 
	order by	nr_seq_agenda;
		

BEGIN 
	 
if 	(nr_sequencia_exame_p IS NOT NULL AND nr_sequencia_exame_p::text <> '' AND nr_sequencia_cirurgia_p IS NOT NULL AND nr_sequencia_cirurgia_p::text <> '') then 
	 
	select	cd_pessoa_fisica, 
			cd_medico, 
			cd_setor_atendimento, 
			dt_nascimento_pac, 
			qt_idade_paciente,	 
			qt_idade_mes, 
			cd_convenio, 
			cd_categoria, 
			cd_usuario_convenio, 
			dt_validade_carteira, 
			cd_tipo_acomodacao, 
			ie_status_agenda, 
			nr_atendimento, 
			ie_tipo_atendimento, 
			cd_plano, 
			cd_procedimento, 
			ie_origem_proced, 
			nr_seq_proc_interno 
	into STRICT	cd_pessoa_fisica_w, 
			cd_medico_w, 
			cd_setor_atendimento_w, 
			dt_nascimento_w, 
			qt_idade_w, 
			qt_idade_mes_w, 
			cd_convenio_w, 
			cd_categoria_w, 
			cd_usuario_convenio_w, 
			dt_validade_carteira_w, 
			cd_tipo_acomodacao_w, 
			ie_status_w, 
			nr_atendimento_w, 
			ie_tipo_atendimento_w, 
			cd_plano_w, 
			cd_procedimento_w, 
			ie_origem_proced_w, 
			nr_seq_proc_interno_w 
	from	agenda_paciente	 
	where	nr_sequencia = nr_sequencia_exame_p;		
			 
			 
	update	agenda_paciente 
	set		cd_pessoa_fisica 		= cd_pessoa_fisica_w, 
			cd_medico				= cd_medico_w, 
			cd_setor_atendimento	= cd_setor_atendimento_w, 
			nm_paciente				= obter_nome_pf(cd_pessoa_fisica_w), 
			cd_medico_exec			= cd_medico_w, 
			dt_nascimento_pac		= dt_nascimento_w, 
			qt_idade_paciente		= qt_idade_w, 
			qt_idade_mes			= qt_idade_mes_w, 
			nr_telefone				= obter_fone_pac_agenda(cd_pessoa_fisica_w), 
			cd_convenio				= cd_convenio_w, 
			cd_categoria			= cd_categoria_w, 
			cd_usuario_convenio		= cd_usuario_convenio_w, 
			dt_validade_carteira	= dt_validade_carteira_w, 
			cd_tipo_acomodacao		= cd_tipo_acomodacao_w, 
			ie_status_agenda		= ie_status_w, 
			nm_usuario_orig			= nm_usuario_p, 
			dt_agendamento			= clock_timestamp(), 
			dt_atualizacao			= clock_timestamp(),			 
			nr_atendimento			= nr_atendimento_w, 
			ie_tipo_atendimento		= ie_tipo_atendimento_w, 
			cd_plano				= cd_plano_w, 
			cd_procedimento			= cd_procedimento_w, 
			ie_origem_proced		= ie_origem_proced_w, 
			nr_seq_proc_interno		= nr_seq_proc_interno_w 
	where	nr_sequencia			= nr_sequencia_cirurgia_p;
	 
 
	open c01;
	loop 
	fetch c01 into	 
			nr_seq_proc_interno_w, 
			cd_procedimento_w, 
			ie_origem_proced_w, 
			ie_lado_w, 
			cd_medico_solicitante_w, 
			qt_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin 
		 
			/* obter sequÃªncia */
 
			select	coalesce(max(nr_seq_agenda),0) + 1 
			into STRICT	nr_sequencia_proc_w 
			from	agenda_paciente_proc 
			where	nr_sequencia = nr_sequencia_cirurgia_p;
			 
			insert into agenda_paciente_proc(	nr_sequencia, 
													nr_seq_agenda, 
													nr_seq_proc_interno, 
													cd_procedimento, 
													ie_origem_proced, 
													ie_lado, 
													cd_medico, 
													dt_atualizacao, 
													nm_usuario, 
													qt_procedimento) 
			values (	nr_sequencia_cirurgia_p, 
													nr_sequencia_proc_w, 
													nr_seq_proc_interno_w, 
													cd_procedimento_w, 
													ie_origem_proced_w, 
													ie_lado_w, 
													cd_medico_solicitante_w, 
													clock_timestamp(), 
													nm_usuario_p, 
													qt_procedimento_w);
		commit;
		end;
	end loop;
	close c01;
 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_agenda_exame_cirurgica ( nr_sequencia_exame_p bigint, nr_sequencia_cirurgia_p bigint, nm_usuario_p text) FROM PUBLIC;

