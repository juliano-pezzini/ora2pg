-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_resultado ( dt_mes_referencia_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
dt_referencia_w			timestamp;
dt_parametro_inicio_w		timestamp;
dt_parametro_fim_w		timestamp;
vl_margem_w			double precision;
ie_tipo_valor_w			varchar(5);
nr_seq_contrato_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_plano_contas_w		bigint;
nr_seq_operadora_w		bigint;
ie_tipo_contratacao_w		varchar(2);
cd_cgc_estipulante_w		varchar(14);
cd_pf_estipulante_w		varchar(10);
vl_total_despesa_w		double precision	:= 0;
vl_total_imposto_w		double precision	:= 0;
qt_reg_result_despesa_w		integer	:= 0;
qt_reg_result_imposto_w		integer	:= 0;
vl_total_mensalidade_w		double precision	:= 0;
ie_tipo_beneficiario_w		varchar(5);
qt_idade_w			bigint;
nr_seq_pagador_w		bigint;
ie_preco_w			varchar(2);
ie_tipo_vinculo_operadora_w	varchar(10);
ie_regulamentacao_w		varchar(10);
nr_seq_resultado_w		bigint;
ie_w				bigint;

C01 CURSOR FOR 
	SELECT	sum(a.vl_margem), 
		a.ie_tipo_valor, 
		b.nr_seq_contrato, 
		a.nr_seq_plano, 
		b.nr_seq_plano, 
		a.cd_cgc_estipulante, 
		a.cd_pf_estipulante, 
		coalesce(a.ie_tipo_beneficiario,'B'), 
		trunc(months_between(dt_mes_referencia_p, c.dt_nascimento) / 12), 
		b.nr_seq_pagador, 
		b.ie_tipo_vinculo_operadora, 
		d.nr_seq_outorgante, 
		d.ie_tipo_contratacao, 
		d.ie_preco, 
		d.ie_regulamentacao 
	from	pessoa_fisica		c, 
		pls_segurado		b, 
		pls_margem_beneficiario	a, 
		pls_plano		d 
	where	c.cd_pessoa_fisica	= b.cd_pessoa_fisica 
	and	a.nr_seq_segurado	= b.nr_sequencia 
	and	b.nr_seq_plano		= d.nr_sequencia 
	--and	b.nr_seq_contrato is not null /*aaschlote 18/11/2011 OS - 380598 
	and	(b.nr_seq_plano IS NOT NULL AND b.nr_seq_plano::text <> '') 
	and	a.dt_mes_referencia = dt_referencia_w 
	group by 
		a.ie_tipo_valor, 
		b.nr_seq_contrato, 
		a.nr_seq_plano, 
		b.nr_seq_plano, 
		a.cd_cgc_estipulante, 
		a.cd_pf_estipulante, 
		ie_tipo_beneficiario, 
		b.cd_pessoa_fisica, 
		b.nr_seq_pagador, 
		b.ie_tipo_vinculo_operadora, 
		c.dt_nascimento, 
		d.nr_seq_outorgante, 
		d.ie_tipo_contratacao, 
		d.ie_preco, 
		d.ie_regulamentacao;

C02 CURSOR FOR 
	SELECT	nr_sequencia 
	from	pls_resultado 
	where	dt_mes_referencia	>= dt_parametro_inicio_w 
	and	dt_mes_referencia	<= dt_parametro_fim_w;

type 		fetch_array is table of c02%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c02_w			vetor;

 
BEGIN 
 
dt_referencia_w		:= trunc(dt_mes_referencia_p,'month');
dt_parametro_Inicio_w	:= trunc(dt_mes_referencia_p,'month');
dt_parametro_fim_w	:= last_day(dt_mes_referencia_p) + 86399/86400;
 
open c02;
loop 
fetch c02 bulk collect into s_array limit 1000;
	vetor_c02_w(i) := s_array;
	i := i + 1;
EXIT WHEN NOT FOUND; /* apply on c02 */
end loop;
close c02;
 
ie_w	:= 0;
 
for i in 1..vetor_c02_w.count loop 
	s_array := vetor_c02_w(i);
	for z in 1..s_array.count loop 
		begin 
		ie_w	:= ie_w + 1;
		nr_seq_resultado_w	:= s_array[z].nr_sequencia;
		 
		delete	FROM pls_resultado 
		where	nr_sequencia	= nr_seq_resultado_w;
		 
		if (ie_w = 1000) then 
			commit;
			ie_w := 0;
		end if;
		end;
	end loop;
end loop;
 
ie_w			:= 0;
nr_seq_resultado_w	:= null;
 
open C01;
loop 
fetch C01 into	 
	vl_margem_w, 
	ie_tipo_valor_w, 
	nr_seq_contrato_w, 
	nr_seq_plano_contas_w, 
	nr_seq_plano_w, 
	cd_cgc_estipulante_w, 
	cd_pf_estipulante_w, 
	ie_tipo_beneficiario_w, 
	qt_idade_w, 
	nr_seq_pagador_w, 
	ie_tipo_vinculo_operadora_w, 
	nr_seq_operadora_w, 
	ie_tipo_contratacao_w, 
	ie_preco_w, 
	ie_regulamentacao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	 
	ie_w	:= ie_w + 1;
	 
	if (coalesce(nr_seq_operadora_w::text, '') = '') then 
		select	max(nr_sequencia) 
		into STRICT	nr_seq_operadora_w 
		from	pls_outorgante 
		where	cd_estabelecimento	= cd_estabelecimento_p;
	end if;
	 
	/*Caso não exisitir valor nesse campo, busca do beneficiáio*/
 
	if (coalesce(nr_seq_plano_contas_w::text, '') = '') then 
		nr_seq_plano_contas_w	:= nr_seq_plano_w;
	end if;
	 
	select	nextval('pls_resultado_seq') 
	into STRICT	nr_seq_resultado_w 
	;
	 
	insert into pls_resultado(nr_sequencia, 
		cd_estabelecimento, 
		nr_seq_operadora, 
		nr_seq_produto, 
		nr_seq_contrato, 
		dt_atualizacao, 
		nm_usuario, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		dt_mes_referencia, 
		ie_tipo_contratacao, 
		vl_resultado, 
		ie_tipo_valor, 
		cd_cgc_estipulante, 
		cd_pf_estipulante, 
		ie_tipo_beneficiario, 
		qt_idade, 
		nr_seq_pagador, 
		ie_preco, 
		ie_tipo_vinculo_operadora, 
		ie_regulamentacao) 
	values (	nr_seq_resultado_w, 
		cd_estabelecimento_p, 
		nr_seq_operadora_w, 
		nr_seq_plano_contas_w, 
		nr_seq_contrato_w, 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		dt_referencia_w, 
		ie_tipo_contratacao_w, 
		vl_margem_w, 
		ie_tipo_valor_w, 
		cd_cgc_estipulante_w, 
		cd_pf_estipulante_w, 
		ie_tipo_beneficiario_w, 
		qt_idade_w, 
		nr_seq_pagador_w, 
		ie_preco_w, 
		ie_tipo_vinculo_operadora_w, 
		ie_regulamentacao_w);
	 
	if (ie_w = 1000) then 
		commit;
		ie_w := 0;
	end if;
	 
	end;
end loop;
close C01;
 
/* Obter o valor total das contas contábeis de despesa assistencial */
 
select	coalesce(sum(b.vl_saldo),0) 
into STRICT	vl_total_despesa_w 
from	ctb_mes_ref	c, 
	ctb_balancete_v	b, 
	pls_ctb_despesa	a 
where	a.cd_conta_contabil		= b.cd_conta_contabil 
and	b.nr_seq_mes_ref		= c.nr_sequencia 
and	b.ie_normal_encerramento	= 'N' 
and	trunc(c.dt_referencia,'month')	= dt_referencia_w;
 
/* Obter o valor total das contas contábeis de imposto */
 
select	coalesce(sum(b.vl_saldo),0) 
into STRICT	vl_total_imposto_w 
from	ctb_mes_ref			c, 
	ctb_balancete_v			b, 
	pls_ctb_imposto_resultado	a 
where	a.cd_conta_contabil		= b.cd_conta_contabil 
and	b.nr_seq_mes_ref		= c.nr_sequencia 
and	b.ie_normal_encerramento	= 'N' 
and	trunc(c.dt_referencia,'month')	= dt_referencia_w;
 
update	pls_competencia 
set	vl_total_despesa	= vl_total_despesa_w, 
	vl_total_imposto	= vl_total_imposto_w 
where	trunc(dt_mes_competencia, 'month') = dt_referencia_w 
and	cd_estabelecimento	= cd_estabelecimento_p;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_resultado ( dt_mes_referencia_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

