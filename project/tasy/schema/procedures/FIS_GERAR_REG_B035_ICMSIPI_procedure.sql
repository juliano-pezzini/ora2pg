-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_b035_icmsipi ( nr_seq_controle_p bigint) AS $body$
DECLARE


-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1)	:= 'N';
nr_vetor_w		bigint	:= 0;
qt_cursor_w		bigint	:= 0;
vl_total_despesa_w	bigint	:= 0;

-- FIS_EFD_ICMSIPI_B035
nr_seq_icmsipi_B035_w	fis_efd_icmsipi_B035.nr_sequencia%type;

-- USUARIO
nm_usuario_w			usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro B035 restringindo pela sequencia da nota fiscal e sendo agrupado pelos campos de Código da Situação Tributária, Código Fiscal de Operação e Prestação e  Alíquota do ICMS*/

c_movimentos_B035 CURSOR FOR
	SELECT	dd.nr_sequencia nr_seq_superior,
		coalesce(obter_dados_grupo_servico_item(obter_item_servico_proced(obter_procedimento_nfse(a.nr_sequencia,'P'),   obter_procedimento_nfse(a.nr_sequencia,'O'),a.cd_estabelecimento), 'GR'), obter_item_servico_proced_mat(b.nr_sequencia)) cd_serv,
		obter_valor_tipo_tributo_nota(a.nr_sequencia,'ISS','X') tx_aliq_iss,
		sum(a.vl_total_nota) vl_cont,
		sum(obter_valor_tipo_tributo_nota(a.nr_sequencia,'ISS','B')) vl_bc_iss,
		sum(obter_valor_tipo_tributo_nota(a.nr_sequencia,'ISS','V'))  vl_iss
	FROM fis_efd_icmsipi_b030 dd, fis_efd_icmsipi_regra_b030 cc, fis_efd_icmsipi_lote bb, fis_efd_icmsipi_controle aa, nota_fiscal a, operacao_nota_modelo d
LEFT OUTER JOIN modelo_nota_fiscal b ON (d.nr_seq_modelo = b.nr_sequencia)
WHERE a.cd_operacao_nf 	= d.cd_operacao_nf  and (a.dt_atualizacao_estoque IS NOT NULL AND a.dt_atualizacao_estoque::text <> '') and trunc(a.dt_emissao)     = trunc(dd.dt_doc) and a.cd_serie_nf     = dd.cd_ser and (	(cc.ie_tipo_data = 1 AND a.dt_emissao between aa.dt_inicio_apuracao and aa.dt_fim_apuracao)
		or
		(cc.ie_tipo_data = 2 AND a.dt_entrada_saida between aa.dt_inicio_apuracao and aa.dt_fim_apuracao)
		) and (	((obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'E') and  -- Notas de Entrada
		(a.ie_status_envio IS NOT NULL AND a.ie_status_envio::text <> '') and  -- Sem envio ao fisco
		(a.ie_situacao in (2, 3, 9))) -- Sitauação 2- Estornada    3- Estorno - 9-Cancelada
		or
		((obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'E') and  -- Notas de Entrada
		(a.ie_situacao not in (2, 3, 9))) -- Sitauação 2- Estornada    3- Estorno - 9-Cancelada
		or (obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'S' and  -- Nostas de saida
		(a.ie_status_envio IS NOT NULL AND a.ie_status_envio::text <> ''))
		or (obter_dados_operacao_nota(a.cd_operacao_nf, '6') = 'S' and
		coalesce(a.ie_status_envio::text, '') = '' and (exists (	SELECT 	1
				from 	nfe_transmissao a, nfe_transmissao_nf b
				where 	a.nr_sequencia = b.nr_seq_transmissao
				and 	a.ie_tipo_nota = 'NFE'
				and 	a.ie_status_transmissao = 'T'
				and 	b.nr_seq_nota_fiscal = a.nr_sequencia))
		)) and b.nr_sequencia 		= cc.nr_seq_modelo_nf and a.cd_estabelecimento 	= aa.cd_estabelecimento and aa.nr_seq_lote 		= bb.nr_sequencia and bb.nr_sequencia 	= cc.nr_seq_lote and aa.nr_sequencia   	= dd.nr_seq_controle and aa.nr_sequencia 	= nr_seq_controle_p group by dd.nr_sequencia,
		 coalesce(obter_dados_grupo_servico_item(obter_item_servico_proced(obter_procedimento_nfse(a.nr_sequencia,'P'),   obter_procedimento_nfse(a.nr_sequencia,'O'),a.cd_estabelecimento), 'GR'), obter_item_servico_proced_mat(b.nr_sequencia)),
		 obter_valor_tipo_tributo_nota(a.nr_sequencia,'ISS','X');

/*Criação do array com o tipo sendo do cursor eespecificado - C_MOVIMENTOS_B035 */

type reg_c_movimentos_B035 is table of c_movimentos_B035%RowType;
vetmovimentos_B035	reg_c_movimentos_B035;

/*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_B035 */

type registro is table of fis_efd_icmsipi_B035%rowtype index by integer;
fis_registros_w		registro;

BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_movimentos_B035;
loop
fetch c_movimentos_B035 bulk collect into vetmovimentos_B035 limit 1000;
	for i in 1..vetmovimentos_B035.Count loop
		begin

		/*Incrementa a variavel para o array*/

		qt_cursor_w:=	qt_cursor_w + 1;


		if (ie_gerou_dados_bloco_w = 'N') then
			ie_gerou_dados_bloco_w:=	'S';
		end if;

		/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_B035 */

		select	nextval('fis_efd_icmsipi_b035_seq')
		into STRICT	nr_seq_icmsipi_B035_w
		;

		/*Inserindo valores no array para realização do forall posteriormente*/

		fis_registros_w[qt_cursor_w].nr_sequencia		:= nr_seq_icmsipi_B035_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao		:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario			:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec	:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec		:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].cd_reg             	:= 'B035';
		fis_registros_w[qt_cursor_w].vl_cont_p        		:= vetmovimentos_B035[i].vl_cont;
		fis_registros_w[qt_cursor_w].vl_bc_iss_p            	:= vetmovimentos_B035[i].vl_bc_iss;
		fis_registros_w[qt_cursor_w].tx_aliq_iss		:= vetmovimentos_B035[i].tx_aliq_iss;
		fis_registros_w[qt_cursor_w].vl_iss_p             	:= vetmovimentos_B035[i].vl_iss;
		fis_registros_w[qt_cursor_w].vl_isnt_iss_p         	:= 0;
		fis_registros_w[qt_cursor_w].cd_serv            	:= vetmovimentos_B035[i].cd_serv;
		fis_registros_w[qt_cursor_w].nr_seq_controle    	:= nr_seq_controle_p;
		fis_registros_w[qt_cursor_w].nr_seq_superior		:= vetmovimentos_B035[i].nr_seq_superior;

		if (nr_vetor_w >= 1000) then
			begin
			/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_B035 */

			forall j in fis_registros_w.first..fis_registros_w.last
				insert into fis_efd_icmsipi_B035 values fis_registros_w(j);

			nr_vetor_w	:= 0;
			fis_registros_w.delete;

			commit;

			end;
		end if;

		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w	:= nr_vetor_w 	+ 1;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_movimentos_B035 */
end loop;
close c_movimentos_B035;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall l in fis_registros_w.first..fis_registros_w.last
		insert into fis_efd_icmsipi_B035 values fis_registros_w(l);

	fis_registros_w.delete;

	commit;

	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update 	fis_efd_icmsipi_controle
	set	ie_mov_B 	= 'S'
	where 	nr_sequencia 	= nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_b035_icmsipi ( nr_seq_controle_p bigint) FROM PUBLIC;

