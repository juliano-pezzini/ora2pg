-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE incluir_procedimento_paciente ( cd_procedimento_p bigint, qt_procedimento_p bigint, nr_seq_exame_p bigint, nr_seq_proc_interno_p bigint, ie_origem_proced_p bigint, cd_setor_atendimento_p bigint, nr_atendimento_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_tipo_baixa_p text, dt_execucao_p timestamp, nr_sequencia_p INOUT bigint) AS $body$
DECLARE


/** juliane menin - faz a inserção dos procedimentos - (execução da prescrição )*/

nr_sequencia_w			bigint;
dt_entrada_unidade_w		timestamp;
nr_seq_interno_w			bigint;
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
nr_doc_convenio_w		varchar(20);
ie_tipo_guia_w			varchar(2);
cd_senha_w			varchar(20);
ie_emite_conta_w  			varchar(3)	:= null; --no delphi 81(conta paciente-antiga) parametro 18 
cd_cgc_prestador_w 		varchar(14);
ie_origem_proced_w		bigint;
ie_tipo_atendimento_w  		varchar(2)	:=  null;
ie_medico_executor_w		varchar(2);
cd_cgc_w			varchar(14);
cd_medico_executor_w		varchar(10);


ie_funcao_medico_w		varchar(10)	:= 0;
dt_procedimento_w			timestamp;
cd_pessoa_fisica_w		varchar(10);

cd_tipo_procedimento_w		smallint;
ie_classificacao_w			varchar(1);
ie_tipo_lancto_w			varchar(10);
cd_procedimento_w		bigint;
cd_profissional_w			varchar(10);
nr_seq_cor_exec_w		bigint	:= 96;
ds_observacao_w			varchar(255);
nr_seq_classificacao_w		bigint;


BEGIN

	ie_tipo_lancto_w := obter_param_usuario(24, 44, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_tipo_lancto_w);

	if (nr_seq_proc_interno_p IS NOT NULL AND nr_seq_proc_interno_p::text <> '') then
		SELECT * FROM obter_proc_tab_interno( nr_seq_proc_interno_p, 0, nr_atendimento_p, 0, cd_procedimento_w, ie_origem_proced_w, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w; 	
	end if;

	cd_procedimento_w := coalesce(cd_procedimento_w, cd_procedimento_p);
	ie_origem_proced_w := coalesce(ie_origem_proced_w, ie_origem_proced_p);

	-- obter o código da pessoa física
	select	cd_pessoa_fisica
	into STRICT	cd_pessoa_fisica_w
	from	atendimento_paciente
	where	nr_atendimento 		= nr_atendimento_p;

	-- obter a data do procedimento( se a data da alta for igual a null então dt_atendimento = dt_alta senão dt_atendimento = sysdate)
	begin
		select	dt_alta
		into STRICT	dt_procedimento_w
		from	atendimento_paciente
		where	cd_pessoa_fisica    = cd_pessoa_fisica_w
		and	nr_atendimento      = nr_atendimento_p;
	exception
		when others then
		dt_procedimento_w	:=	clock_timestamp();
	end;

	if ( coalesce(dt_procedimento_w::text, '') = '') then
		dt_procedimento_w	:=	clock_timestamp();
	end if;

	select  max(a.dt_entrada_unidade),
		max(a.nr_seq_interno)
	into STRICT	dt_entrada_unidade_w,
		nr_seq_interno_w
	from	tipo_acomodacao b,
		setor_atendimento c,
		atend_paciente_unidade a
	where	a.cd_tipo_acomodacao	= b.cd_tipo_acomodacao
	and	a.cd_setor_atendimento  = c.cd_setor_atendimento
	and	nr_atendimento		= nr_atendimento_p
	and	a.cd_setor_atendimento  = cd_setor_atendimento_p;

	

	select	a.cd_cgc
	into STRICT	cd_cgc_prestador_w 
	from 	estabelecimento a,
		atendimento_paciente b
	where	a.cd_estabelecimento 	= b.cd_estabelecimento
	and	b.nr_atendimento 	= nr_atendimento_p;
	
	select	nr_seq_classificacao
	into STRICT	nr_seq_classificacao_w
	from	atendimento_paciente
	where	nr_atendimento 		= nr_atendimento_p;

	-- obter o convênio de execucao 
	SELECT * FROM obter_convenio_execucao(nr_atendimento_p, dt_entrada_unidade_w, cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w) INTO STRICT cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w;

	-- obter médico executor 
	SELECT * FROM consiste_medico_executor(cd_estabelecimento_p, cd_convenio_w, cd_setor_atendimento_p, cd_procedimento_w, ie_origem_proced_w, ie_tipo_atendimento_w, nr_seq_exame_p, nr_seq_proc_interno_p, ie_medico_executor_w, cd_cgc_w, cd_medico_executor_w, cd_profissional_w, null, dt_procedimento_w, nr_seq_classificacao_w, 'N', null, null) INTO STRICT ie_medico_executor_w, cd_cgc_w, cd_medico_executor_w, cd_profissional_w;

	-- obter a máxima sequencia da procedimento_paciente 
	select		nextval('procedimento_paciente_seq')
	into STRICT		nr_sequencia_w
	;

	if ( coalesce(cd_medico_executor_w::text, '') = '' or cd_medico_executor_w = '') then
		ie_funcao_medico_w	:=	null;
	end if;

	if ( ie_tipo_baixa_p = 'P') then --via palmweb
		nr_seq_cor_exec_w := 1013;
		ds_observacao_w	  := 'PalmWeb';

	end if;

	-- inserir na tabela procedimento_paciente
	insert into procedimento_paciente(
				nr_sequencia,
				nr_atendimento,
				dt_entrada_unidade,
				cd_procedimento,
				dt_procedimento,
				cd_convenio,
				cd_categoria,
				nr_doc_convenio,
				ie_tipo_guia,
				cd_senha,
				ie_auditoria,
				ie_emite_conta,
				cd_cgc_prestador,
				ie_origem_proced,
				nr_seq_exame,
				nr_seq_proc_interno,
				qt_procedimento,
				cd_setor_atendimento,
				nr_seq_atepacu,
				nr_seq_cor_exec,
				ie_funcao_medico,
				vl_procedimento,
				ie_proc_princ_atend,
				ie_video,
				tx_medico,
				tx_anestesia,
				tx_procedimento,
				ie_valor_informado,
				ie_guia_informada,
				cd_situacao_glosa,
				nm_usuario_original,
				ds_observacao,
				dt_atualizacao,
				nm_usuario,
				cd_pessoa_fisica)
			values ( 
				nr_sequencia_w,
				nr_atendimento_p,
				dt_entrada_unidade_w,
				cd_procedimento_w,
				dt_procedimento_w,
				cd_convenio_w,
				cd_categoria_w,
				nr_doc_convenio_w,
				ie_tipo_guia_w,
				cd_senha_w,
				'N',
				ie_emite_conta_w,
				cd_cgc_prestador_w,
				ie_origem_proced_w,
				nr_seq_exame_p,
				nr_seq_proc_interno_p,
				qt_procedimento_p,
				cd_setor_atendimento_p,
				nr_seq_interno_w,
				nr_seq_cor_exec_w,
				ie_funcao_medico_w,
				100,
				'N',
				'N',
				100,
				100,
				100,
				'N',
				'N',
				0,
				nm_usuario_p,
				ds_observacao_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_profissional_w);


			commit;


			select	max(ie_classificacao),
			max(cd_tipo_procedimento)
			into STRICT	ie_classificacao_w,
				cd_tipo_procedimento_w
			from	procedimento
			where	cd_procedimento		= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced;

			if (ie_classificacao_w in (1,8)) then
	
				CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
		
				CALL gerar_taxa_sala_porte(nr_atendimento_p, dt_entrada_unidade_w, dt_procedimento_w, cd_procedimento_w, nr_sequencia_w, nm_usuario_p);
			else
				CALL atualiza_preco_servico(nr_sequencia_w,nm_usuario_p);
			end if;
			
			CALL atualizar_agenda_propaci(nr_sequencia_w);

			if (coalesce(ie_tipo_lancto_w,'0') = '0') then				
				CALL gerar_lancamento_automatico(nr_atendimento_p, null, 34, nm_usuario_p, nr_sequencia_w, null,null,null,null,null);
			end if;

			CALL gerar_autor_regra(nr_atendimento_p, null, nr_sequencia_w, null, null, nr_seq_proc_interno_p,
					'EP',nm_usuario_p,null,null,null,null,null,null,'','','');

nr_sequencia_p	:= nr_sequencia_w;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE incluir_procedimento_paciente ( cd_procedimento_p bigint, qt_procedimento_p bigint, nr_seq_exame_p bigint, nr_seq_proc_interno_p bigint, ie_origem_proced_p bigint, cd_setor_atendimento_p bigint, nr_atendimento_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_tipo_baixa_p text, dt_execucao_p timestamp, nr_sequencia_p INOUT bigint) FROM PUBLIC;

