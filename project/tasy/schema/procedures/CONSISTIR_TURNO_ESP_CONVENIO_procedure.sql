-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_turno_esp_convenio (cd_agenda_p bigint, dt_agenda_p timestamp, nr_seq_turno_esp_p bigint, cd_convenio_p bigint, nr_seq_agenda_p bigint, ds_consistencia_p INOUT text, cd_categoria_p text default null, ie_acao_p text default null) AS $body$
DECLARE


ds_consistencia_w	varchar(255) := '';
nr_seq_regra_w		bigint;
qt_permitido_w		bigint;
pr_permitido_w		bigint;
ie_atende_conv_w	varchar(1);
ie_regra_conv_w		varchar(1) := 'N';
ds_convenio_w		varchar(255);
qt_agenda_conv_w	bigint;
qt_agenda_w		bigint;
pr_agenda_conv_w	double precision;
ie_tipo_convenio_w	convenio.ie_tipo_convenio%type;
dt_inicio_vigencia_w	agenda_turno_esp_conv.dt_inicio_vigencia%type;
dt_fim_vigencia_w	agenda_turno_esp_conv.dt_fim_vigencia%type;
qt_perm_encaixe_w	agenda_turno_esp_conv.qt_perm_encaixe%type;
cd_categoria_w		agenda_turno_esp_conv.cd_categoria%type;
ie_tipo_convenio_regra_w	agenda_turno_esp_conv.ie_tipo_convenio%type;
ie_valida_zerada_w	agenda_turno_esp_conv.ie_valida_zerada%type;
ie_ultrapassar_limite_w  varchar(1);
ie_acao_w 		varchar(1);
qt_agenda_conv_ww    bigint;
qt_encaixe_atual_w    bigint;

c01 CURSOR FOR
	SELECT	nr_sequencia,
		coalesce(qt_permissao,0),
		coalesce(pr_permissao,0),
		coalesce(ie_atende_convenio,'N'),
		trunc(dt_inicio_vigencia),
		trunc(dt_fim_vigencia),
		coalesce(qt_perm_encaixe,0),
		coalesce(cd_categoria,'XPTO'),
		ie_tipo_convenio,
		coalesce(ie_valida_zerada, 'N')
	from	agenda_turno_esp_conv
	where	nr_seq_turno_esp = nr_seq_turno_esp_p
	and    coalesce(cd_convenio, cd_convenio_p)  = cd_convenio_p
	and    ((coalesce(cd_categoria,coalesce(cd_categoria_p,'XPTO')) = coalesce(cd_categoria_p,'XPTO')) or (coalesce(cd_categoria::text, '') = ''))
	and    coalesce(ie_tipo_convenio, ie_tipo_convenio_w) = ie_tipo_convenio_w
	order 	by nr_sequencia;


BEGIN
ie_ultrapassar_limite_w := obter_valor_param_usuario(821, 194, obter_perfil_ativo, obter_usuario_ativo, obter_estabelecimento_ativo);

if (coalesce(cd_agenda_p,0) > 0) and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') and (coalesce(nr_seq_turno_esp_p,0) > 0) and (coalesce(cd_convenio_p,0) > 0) then

	select  max(ie_tipo_convenio)
	into STRICT   ie_tipo_convenio_w
	from   convenio
	where   cd_convenio = cd_convenio_p;

	open c01;
	loop
	fetch c01 into	nr_seq_regra_w,
			qt_permitido_w,
			pr_permitido_w,
			ie_atende_conv_w,
			dt_inicio_vigencia_w,
			dt_fim_vigencia_w,
			qt_perm_encaixe_w,
			cd_categoria_w,
			ie_tipo_convenio_regra_w,
			ie_valida_zerada_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		ie_regra_conv_w	:= 'S';

		end;
	end loop;
	close c01;
	
	ie_acao_w := ie_acao_p;

	if (coalesce(trim(both ie_acao_p)::text, '') = '') and (ie_valida_zerada_w = 'S') then
		select CASE WHEN ac.ie_encaixe='S' THEN  'E' END
		into STRICT ie_acao_w
		from agenda_consulta ac
		where ac.nr_sequencia = nr_seq_agenda_p;
	end if;

	if (ie_regra_conv_w = 'S') then
		ds_convenio_w  := obter_nome_convenio(cd_convenio_p);
		
		if (ie_atende_conv_w = 'N') then
			if (dt_inicio_vigencia_w IS NOT NULL AND dt_inicio_vigencia_w::text <> '') and (dt_fim_vigencia_w IS NOT NULL AND dt_fim_vigencia_w::text <> '') then
				if (trunc(dt_agenda_p) >= dt_inicio_vigencia_w) and (trunc(dt_agenda_p) <= dt_fim_vigencia_w) then
					ds_consistencia_w  := wheb_mensagem_pck.get_texto(306823, 'DS_CONVENIO_W=' || ds_convenio_w);
					-- Convenio #@DS_CONVENIO_W#@ nao esta liberado para atender neste periodo!
				end if;
			else
				ds_consistencia_w  := wheb_mensagem_pck.get_texto(306825, 'DS_CONVENIO_W=' || ds_convenio_w);
				-- Atencao: o convenio #@DS_CONVENIO_W#@ nao esta liberado para atender neste turno!
			end if;
		elsif (dt_inicio_vigencia_w IS NOT NULL AND dt_inicio_vigencia_w::text <> '') and (dt_fim_vigencia_w IS NOT NULL AND dt_fim_vigencia_w::text <> '') then
			if (trunc(dt_agenda_p) < dt_inicio_vigencia_w) or (trunc(dt_agenda_p) > dt_fim_vigencia_w) then
				ds_consistencia_w  := wheb_mensagem_pck.get_texto(306823, 'DS_CONVENIO_W=' || ds_convenio_w);
				-- Convenio #@DS_CONVENIO_W#@ nao esta liberado para atender neste periodo!
			end if;
			
		elsif (ie_ultrapassar_limite_w = 'N') and (ie_acao_w = 'E')  and (qt_perm_encaixe_w > 0) then
			
			select  count(*)
			into STRICT  qt_encaixe_atual_w
			from  agenda_consulta a
			where  cd_agenda    = cd_agenda_p
			and    NR_SEQUENCIA <> NR_SEQ_AGENDA_P
			and    dt_agenda    between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + 86399/86400
			and    ie_status_agenda not in ('C','F','I')
			and    ((cd_convenio    = cd_convenio_p)
			or (exists (SELECT  1
				from  convenio x
				where   a.cd_convenio = x.cd_convenio
				and   x.ie_tipo_convenio = ie_tipo_convenio_w)
			and   (ie_tipo_convenio_regra_w IS NOT NULL AND ie_tipo_convenio_regra_w::text <> '')))
			and    ((cd_categoria = cd_categoria_w) or (cd_categoria_w = 'XPTO'))
			and    nr_seq_turno_esp   = nr_seq_turno_esp_p
			and    ie_encaixe     = 'S';
			
			/*caso for encaixe de horarios, devera somar 1 agendamento a mais para que seja tambem contando o agendamento que ainda nao foi inserido, se atender a regra, o encaixe nao sera gerado*/

			if (ie_acao_w = 'E')then
				qt_encaixe_atual_w  := qt_encaixe_atual_w + 1;
			end if;
			
			if (qt_encaixe_atual_w > qt_perm_encaixe_w) then
				ds_consistencia_w  := wheb_mensagem_pck.get_texto(306831, 'DS_CONVENIO_W=' || ds_convenio_w || ';' ||
					     'QT_PERM_ENCAIXE_W=' || to_char(qt_perm_encaixe_w));
				-- Atencao: o convenio #@DS_CONVENIO_W#@ atingiu a quantidade limite (#@ QT_PERM_ENCAIXE_W#@) de encaixes permitidos neste turno!
			end if;
			
		elsif (ie_ultrapassar_limite_w = 'N') and (qt_permitido_w > 0 or ie_valida_zerada_w = 'S') then
			
			select  count(*)
			into STRICT  qt_agenda_conv_w
			from  agenda_consulta a
			where  cd_agenda  = cd_agenda_p
			and    dt_agenda  between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + 86399/86400
			and    ie_status_agenda not in ('C','F','I','L')
			and    nr_sequencia  <> nr_seq_agenda_p
			and    nr_seq_turno_esp   = nr_seq_turno_esp_p
			and    ((cd_convenio    = cd_convenio_p)
			or (exists (SELECT  1
				from  convenio x
				where   a.cd_convenio = x.cd_convenio
				and   x.ie_tipo_convenio = ie_tipo_convenio_w)
			and   (ie_tipo_convenio_regra_w IS NOT NULL AND ie_tipo_convenio_regra_w::text <> '')))
			and    ((cd_categoria = cd_categoria_w) or (cd_categoria_w = 'XPTO'));
			
			--caso for transferencia de agendamento, deve descontar o agendamento original(caso a agenda seja transferida para o mesmo dia em outro horario)
			if (ie_acao_w = 'T') then
				select  count(*)
				into STRICT  qt_agenda_conv_ww
				from  agenda_consulta a
				where  cd_agenda    = cd_agenda_p
				and    dt_agenda    between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + 86399/86400
				and    ie_status_agenda not in ('C','F','I','L')
				and    nr_sequencia  <> nr_seq_agenda_p
				and    nr_seq_turno_esp   = nr_seq_turno_esp_p
				and    ((cd_convenio    = cd_convenio_p)
				or (exists (SELECT  1
					from  convenio x
					where   a.cd_convenio = x.cd_convenio
					and   x.ie_tipo_convenio = ie_tipo_convenio_w)
				and   (ie_tipo_convenio_regra_w IS NOT NULL AND ie_tipo_convenio_regra_w::text <> '')))
				and    ((cd_categoria = cd_categoria_w) or (cd_categoria_w = 'XPTO'));
			end if;
			
			if (qt_agenda_conv_ww > 0)then
				qt_agenda_conv_w  := qt_agenda_conv_w - 1;
			end if;
			
			if (qt_agenda_conv_w >= qt_permitido_w) then
			
				ds_consistencia_w  := wheb_mensagem_pck.get_texto(306834,  'DS_CONVENIO_W=' || ds_convenio_w || ';' ||
					      'QT_PERMITIDO_W=' || to_char(qt_permitido_w));
				-- Atencao: o convenio #@DS_CONVENIO_W#@ atingiu a quantidade limite (#@QT_PERMITIDO_W#@) de agendamentos permitidos neste turno!
			
			end if;
			
		elsif (ie_ultrapassar_limite_w = 'N') and (pr_permitido_w > 0) then
			
			select  count(*)
			into STRICT  qt_agenda_w
			from  agenda_consulta
			where  cd_agenda  = cd_agenda_p
			and  ie_status_agenda <> 'C'
			and  nr_sequencia  <> nr_seq_agenda_p
			and  nr_seq_turno_esp   = nr_seq_turno_esp_p
			and  dt_agenda  between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + 86399/86400;
			
			select  count(*)
			into STRICT  qt_agenda_conv_w
			from  agenda_consulta a
			where  cd_agenda  = cd_agenda_p
			and  ie_status_agenda <> 'C'
			and  dt_agenda  between trunc(dt_agenda_p,'dd') and trunc(dt_agenda_p,'dd') + 86399/86400
			and  nr_sequencia  <> nr_seq_agenda_p
			and  nr_seq_turno_esp   = nr_seq_turno_esp_p
			and  ((cd_convenio    = cd_convenio_p)
			or (exists (SELECT  1
				from  convenio x
				where   a.cd_convenio = x.cd_convenio
				and   x.ie_tipo_convenio = ie_tipo_convenio_w)
			and   (ie_tipo_convenio_regra_w IS NOT NULL AND ie_tipo_convenio_regra_w::text <> '')))
			and    ((cd_categoria = cd_categoria_w) or (cd_categoria_w = 'XPTO'));

			pr_agenda_conv_w  :=dividir(qt_agenda_conv_w * 100, qt_agenda_w);
			
			if (pr_agenda_conv_w >= pr_permitido_w) then
			
				ds_consistencia_w  := wheb_mensagem_pck.get_texto(306835,  'DS_CONVENIO_W=' || ds_convenio_w || ';' ||
				    'PR_PERMITIDO_W=' || to_char(pr_permitido_w));
				-- Atencao: o convenio #@DS_CONVENIO_W#@ atingiu a porcentagem limite (#@PR_PERMITIDO_W#@ %) de agendamentos permitidos neste turno!
			
			end if;
		
		end if;
	
	end if;

end if;

ds_consistencia_p := ds_consistencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_turno_esp_convenio (cd_agenda_p bigint, dt_agenda_p timestamp, nr_seq_turno_esp_p bigint, cd_convenio_p bigint, nr_seq_agenda_p bigint, ds_consistencia_p INOUT text, cd_categoria_p text default null, ie_acao_p text default null) FROM PUBLIC;

