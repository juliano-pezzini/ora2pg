-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_0150_icmsipi (nr_seq_controle_p bigint) AS $body$
DECLARE


/*REGISTRO 0150: TABELA DE CADASTRO DO PARTICIPANTE*/



-- VARIABLES
ie_gerou_dados_bloco_w 	varchar(1) := 'N';
dt_ini_w				timestamp;
dt_fim_w				timestamp;
ds_nome_w				fis_efd_icmsipi_0150.ds_nome%type;
cd_pais_w				fis_efd_icmsipi_0150.cd_pais%type;
cd_cnpj_w				fis_efd_icmsipi_0150.cd_cnpj%type;
cd_cpf_w				fis_efd_icmsipi_0150.cd_cpf%type;
nr_ie_w					fis_efd_icmsipi_0150.nr_ie%type;
cd_mun_w				fis_efd_icmsipi_0150.cd_mun%type;
ds_suframa_w			fis_efd_icmsipi_0150.ds_suframa%type;
ds_end_w				fis_efd_icmsipi_0150.ds_end%type;
nr_num_w				fis_efd_icmsipi_0150.nr_num%type;
ds_compl_w				fis_efd_icmsipi_0150.ds_compl%type;
ds_bairro_w				fis_efd_icmsipi_0150.ds_bairro%type;
qt_cursor_w 			bigint := 0;
nr_vetor_w  			bigint := 0;
ie_gerar_w				FIS_EFD_ICMSIPI_REG_LOTE.IE_GERAR%type;
ie_internacional_pj_w		varchar(1) := 'N';
ie_brasileiro_pf_w		varchar(1) := 'S';

-- FIS_EFD_ICMSIPI_0150
nr_seq_icmsipi_0150_w 	fis_efd_icmsipi_0150.nr_sequencia%type;

-- FIS_EFD_ICMSIPI_CONTROLE
cd_estabelecimento_w	fis_efd_icmsipi_controle.cd_estabelecimento%type;

-- USUARIO
nm_usuario_w usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro 0150 restringindo pela sequencia da nota fiscal*/
c_reg_0150 CURSOR FOR
	SELECT  distinct a.cd_part,
			CASE WHEN length(a.cd_part)=14 THEN  'J'  ELSE 'F' END  ie_tipo_pessoa  --J = Pessoa Juridica. F = Pessoa Fisica
	from (	SELECT  cd_part,
						nr_seq_controle
				from 	fis_efd_icmsipi_C100
				where	nr_seq_controle	= nr_seq_controle_p
				and		(cd_part IS NOT NULL AND cd_part::text <> '')
				
union all

				select  cd_part,
						nr_seq_controle
				from 	fis_efd_icmsipi_C500
				where	nr_seq_controle	= nr_seq_controle_p
				
union all

				select  cd_part,
						nr_seq_controle
				from 	fis_efd_icmsipi_D100
				where	nr_seq_controle	= nr_seq_controle_p				
				
union all

				select  cd_part,
						nr_seq_controle
				from 	fis_efd_icmsipi_D500
				where	nr_seq_controle	= nr_seq_controle_p
				
union all

				select  cd_part,
						nr_seq_controle
				from 	fis_efd_icmsipi_H010
				where	nr_seq_controle	= nr_seq_controle_p
				and		cd_ind_prop <> '0'
				
union all

				select  cd_part,
						nr_seq_controle
				from 	fis_efd_icmsipi_K200  
				where	nr_seq_controle	= nr_seq_controle_p
				and 	cd_ind_est <> '0' 
				
union all

				select  cd_part,
						nr_seq_controle
				from 	fis_efd_icmsipi_B020
				where	nr_seq_controle	= nr_seq_controle_p ) a
	where (a.cd_part IS NOT NULL AND a.cd_part::text <> '');

/*Criação do array com o tipo sendo do cursor eespecificado - c_reg_0150*/

type reg_c_reg_0150 is table of c_reg_0150%RowType;
vetReg0150 reg_c_reg_0150;

/*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_0150 */

type registro is table of fis_efd_icmsipi_0150%rowtype index by integer;
fis_registros_w registro;

BEGIN

/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_reg_0150;
loop
fetch c_reg_0150 bulk collect	into vetReg0150 limit 1000;
	for i in 1 .. vetReg0150.Count loop
		begin		

		/*Incrementa a variavel para o array*/

		qt_cursor_w:=  qt_cursor_w + 1;

		if (ie_gerou_dados_bloco_w = 'N') then
			ie_gerou_dados_bloco_w := 'S';
		end if;

		select 	obter_se_pj_internacional(vetReg0150[i].cd_part),
				fis_obter_se_brasileiro(vetReg0150[i].cd_part)
		into STRICT ie_internacional_pj_w,
			 ie_brasileiro_pf_w
		;
		
		if (ie_internacional_pj_w = 'S') then
			vetReg0150[i].ie_tipo_pessoa :=  'J';
		elsif (ie_brasileiro_pf_w = 'N') then
			vetReg0150[i].ie_tipo_pessoa := 'F';
		end if;

		if (vetReg0150[i].ie_tipo_pessoa = 'J') then
			begin
			
			begin
			
			select	trim(both substr(obter_dados_pf_pj(null, a.cd_cgc, 'N'), 1, 60)) ds_nome,
					coalesce(b.cd_bacen, '1058') cd_pais,
					CASE WHEN ie_internacional_pj_w='S' THEN null  ELSE elimina_caracteres_especiais(a.cd_cgc) END  cd_cnpj,
					null cd_cpf,
					substr(CASE WHEN upper(a.nr_inscricao_estadual)='ISENTA' THEN  '' WHEN upper(a.nr_inscricao_estadual)='ISENTO' THEN  ''  ELSE elimina_caractere_especial(a.nr_inscricao_estadual) END , 1, 14) nr_ie,
					CASE WHEN coalesce(b.cd_bacen, '1058')='1058' THEN  lpad(elimina_caracteres_especiais(substr(a.cd_municipio_ibge || substr(calcula_digito('MODULO10', a.cd_municipio_ibge),1,1),1,7)),7,'0')  ELSE '9999999' END  cd_mun,
					null ds_suframa,
					trim(both substr(obter_dados_pf_pj(null, a.cd_cgc, 'R'),1,60)) ds_end,
					substr(obter_dados_pf_pj(null, a.cd_cgc, 'NR'),1,10) nr_num,
					trim(both substr(obter_dados_pf_pj(null, a.cd_cgc, 'CO'),1,60)) ds_compl,
					trim(both substr(obter_dados_pf_pj(null, a.cd_cgc, 'B'),1,60)) ds_bairro
			into STRICT	ds_nome_w,
					cd_pais_w,
					cd_cnpj_w,
					cd_cpf_w,
					nr_ie_w,
					cd_mun_w,
					ds_suframa_w,
					ds_end_w,
					nr_num_w,
					ds_compl_w,
					ds_bairro_w
			FROM pessoa_juridica a
LEFT OUTER JOIN pais b ON (a.nr_seq_pais = b.nr_sequencia)
WHERE a.cd_cgc	= vetReg0150[i].cd_part   LIMIT 1;
			
			exception
			when others then
				ds_nome_w	:= substr(sqlerrm,1,60);
				cd_pais_w	:= null;
				cd_cnpj_w	:= null;
				cd_cpf_w	:= null;
				nr_ie_w		:= null;
				cd_mun_w	:= null;
				ds_suframa_w	:= null;
				ds_end_w	:= null;
				nr_num_w	:= null;
				ds_compl_w	:= null;
				ds_bairro_w	:= null;
			end;
			
			end;
		elsif (vetReg0150[i].ie_tipo_pessoa = 'F') then
			begin
			
			begin
			
			select  trim(both obter_nome_pf(d.cd_pessoa_fisica)) ds_nome,
					coalesce(p.cd_bacen, '1058') cd_pais,
					null cd_cnpj,
					CASE WHEN ie_brasileiro_pf_w='N' THEN null  ELSE elimina_caracteres_especiais(d.nr_cpf) END  cd_cpf,
					null nr_ie,
					CASE WHEN coalesce(p.cd_bacen, '1058')='1058' THEN  lpad(elimina_caracteres_especiais(substr(nfse_obter_compl_pf(d.cd_pessoa_fisica, 'CDMDV'),1,7)),7,'0')  ELSE '9999999' END  cd_mun,
					null ds_suframa,
					trim(both substr(obter_dados_pf_pj(d.cd_pessoa_fisica, null, 'EN'),1,60)) ds_end,
					substr(obter_dados_pf_pj(d.cd_pessoa_fisica, null, 'NR'),1,10) nr_num,
					trim(both substr(obter_dados_pf_pj(d.cd_pessoa_fisica, null, 'CO'),1,60)) ds_compl,
					trim(both substr(obter_dados_pf_pj(d.cd_pessoa_fisica, null, 'B'),1,60)) ds_bairro
			into STRICT	ds_nome_w,
					cd_pais_w,
					cd_cnpj_w,
					cd_cpf_w,
					nr_ie_w,
					cd_mun_w,
					ds_suframa_w,
					ds_end_w,
					nr_num_w,
					ds_compl_w,
					ds_bairro_w
			FROM pessoa_fisica d
LEFT OUTER JOIN pais p ON (d.nr_seq_pais = p.nr_sequencia)
LEFT OUTER JOIN compl_pessoa_fisica c ON (d.cd_pessoa_fisica = c.cd_pessoa_fisica)
WHERE c.ie_tipo_complemento	= 1 and d.cd_pessoa_fisica 	= vetReg0150[i].cd_part   LIMIT 1;
			
			exception
			when others then
				ds_nome_w	:= null;
				cd_pais_w	:= null;
				cd_cnpj_w	:= null;
				cd_cpf_w	:= null;
				nr_ie_w		:= null;
				cd_mun_w	:= null;
				ds_suframa_w	:= null;
				ds_end_w	:= null;
				nr_num_w	:= null;
				ds_compl_w	:= null;
				ds_bairro_w	:= null;
			end;
			
			end;
		end if;

		select	max(ie_gerar)
		into STRICT 	ie_gerar_w
		from	fis_efd_icmsipi_reg_lote
		where	nr_seq_lote		= nr_seq_controle_p
		and 	ds_registro = '0175'
		order by nr_ordem;

		if (ie_gerar_w = 'S') then
			CALL fis_gerar_reg_0175_icmsipi(nr_seq_controle_p,
					   vetReg0150[i].ie_tipo_pessoa,
					   vetReg0150[i].cd_part);
		end if;

		/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_0150 */

		select	nextval('fis_efd_icmsipi_0150_seq')
		into STRICT	nr_seq_icmsipi_0150_w 
		;

		/*Inserindo valores no array para realização do forall posteriormente*/
		fis_registros_w[qt_cursor_w].nr_sequencia     		:= nr_seq_icmsipi_0150_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao    		:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario     		:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec  	:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec     	:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].cd_reg       			:= '0150';
		fis_registros_w[qt_cursor_w].cd_part        		:= vetReg0150[i].cd_part;
		fis_registros_w[qt_cursor_w].ds_nome        		:= ds_nome_w;
		fis_registros_w[qt_cursor_w].cd_pais        		:= cd_pais_w;
		fis_registros_w[qt_cursor_w].cd_cnpj        		:= cd_cnpj_w;
		fis_registros_w[qt_cursor_w].cd_cpf        			:= cd_cpf_w;
		fis_registros_w[qt_cursor_w].nr_ie        			:= nr_ie_w;
		fis_registros_w[qt_cursor_w].cd_mun        			:= cd_mun_w;
		fis_registros_w[qt_cursor_w].ds_suframa      		:= ds_suframa_w;
		fis_registros_w[qt_cursor_w].ds_end        			:= ds_end_w;
		fis_registros_w[qt_cursor_w].nr_num        			:= nr_num_w;
		fis_registros_w[qt_cursor_w].ds_compl        		:= ds_compl_w;
		fis_registros_w[qt_cursor_w].ds_bairro      		:= ds_bairro_w;
		fis_registros_w[qt_cursor_w].nr_seq_controle     	:= nr_seq_controle_p;

		if (nr_vetor_w >= 1000) then
		begin
			/*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_0150 */

			forall i in fis_registros_w.first .. fis_registros_w.last
				insert into fis_efd_icmsipi_0150 values fis_registros_w(i);

			nr_vetor_w := 0;
			fis_registros_w.delete;

			commit;

		end;
		end if;

		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w := nr_vetor_w + 1;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_0150 */
end loop;
close c_reg_0150;

if (fis_registros_w.count > 0) then
begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
	insert into fis_efd_icmsipi_0150 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update fis_efd_icmsipi_controle set ie_mov_0 = 'S' where nr_sequencia = nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_0150_icmsipi (nr_seq_controle_p bigint) FROM PUBLIC;

