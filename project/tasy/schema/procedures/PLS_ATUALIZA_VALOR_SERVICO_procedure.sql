-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualiza_valor_servico ( nr_sequencia_p pls_conta_proc.nr_sequencia%type, ie_gravar_log_p text, nm_usuario_p usuario.nm_usuario%type, ie_atualiza_p text, ie_recalcular_conta_p text default 'N') AS $body$
DECLARE


cd_procedimento_w		pls_conta_proc.cd_procedimento%type;
ie_origem_proced_w		pls_conta_proc.ie_origem_proced%type;
dt_procedimento_w		timestamp;
qt_procedimento_w		pls_conta_proc.qt_procedimento_imp%type;
tx_item_w			pls_conta_proc.tx_item%type;
cd_estabelecimento_w		smallint;
nr_seq_prestador_w		bigint;
nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
vl_procedimento_w		pls_conta_proc.vl_unitario%type := 0;
vl_calculado_w			double precision;
nr_seq_regra_w			bigint;
ie_preco_plano_w		varchar(2);
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_plano_w			bigint;
vl_beneficiario_w		double precision	:= 0;
ie_cobranca_prevista_w		varchar(1);
cd_guia_w			pls_conta.cd_guia%type;
dt_conta_w			timestamp;
dt_protocolo_w			timestamp;
dt_preco_w			timestamp	:= clock_timestamp();
nr_seq_contrato_w		bigint;
ie_tipo_tabela_w		varchar(2)	:= '';
nr_seq_regra_pos_estab_w	bigint;
ie_gravar_log_w			varchar(1);
ds_observacao_log_w		varchar(4000);
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
ie_tipo_contratacao_w		varchar(10);
nr_seq_regra_cooperado_w	bigint;
ie_ato_cooperado_w		bigint;
nr_seq_prestador_solic_w	bigint;
nr_seq_prestador_exec_w		pls_conta.nr_seq_prestador_exec%type;
ie_origem_conta_w		pls_conta.ie_origem_conta%type;
ie_calculo_coparticipacao_w	varchar(3);
vl_proc_copartic_w		double precision	:= 0;
ie_medico_solic_coope_w		varchar(10);
ie_medico_exec_coope_w		varchar(10);
cd_medico_solicitante_w		pls_conta.cd_medico_solicitante%type;
cd_medico_conta_w		pls_conta.cd_medico_executor%type;
nr_seq_classificacao_w		bigint;
nr_seq_tipo_acomodacao_w	bigint;
nr_seq_categoria_w		bigint;
ie_internado_w			varchar(10);
ie_tipo_vinculo_w		varchar(10);
nr_seq_intercambio_w		bigint;
ie_tipo_segurado_w		varchar(10);
vl_procedimento_ptu_w		double precision;
nr_seq_regra_int_w		bigint;
nr_seq_regra_copartic_w		bigint;
vl_total_procedimento_w		double precision;
cd_solic_w			varchar(20);
nr_seq_congenere_w		pls_protocolo_conta.nr_seq_congenere%type;
nr_seq_congenere_seg_w		bigint;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
nr_seq_cbo_saude_w		pls_conta.nr_seq_cbo_saude%type;
ie_carater_internacao_w		pls_conta.ie_carater_internacao%type;
nr_seq_clinica_w		pls_conta.nr_seq_clinica%type;
nr_seq_tipo_atendimento_w	pls_conta.nr_seq_tipo_atendimento%type;
nr_seq_regra_qtde_exec_w	pls_conta_proc.nr_seq_regra_qtde_exec%type;
nr_seq_regra_tipo_exec_w	pls_conta_proc.nr_seq_regra_tipo_exec%type;
tx_procedimento_w		double precision;
tx_medico_w			double precision;
tx_custo_operacional_w		double precision;
tx_custo_operacional_temp_w	double precision;
tx_material_w			double precision;
tx_anestesista_w		double precision;
tx_auxiliares_w			double precision;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
ie_restringe_estab_w		varchar(2);
vl_calculado_ant_w		double precision;
nr_seq_fatura_w			ptu_fatura.nr_sequencia%type;
ie_tipo_conta_w			pls_conta.ie_tipo_conta%type;
vl_medico_vinc_w		double precision;
vl_anestesista_vinc_w		double precision;
vl_auxiliares_vinc_w		double precision;
vl_custo_operacional_vinc_w	double precision;
vl_materiais_vinc_w		double precision;
vl_procedimento_vinc_w		double precision;
vl_total_proc_vinc_w		double precision;
tx_intercambio_w		double precision;
ie_pcmso_w			varchar(1);
tx_pcmco_w			double precision	:= 0;
vl_co_w				double precision	:= 0;
tx_adm_w			double precision;
ie_tx_manual_w			pls_conta_proc.ie_tx_manual%type;
dt_alta_w			timestamp;
ie_tipo_intercambio_w		pls_conta_v.ie_tipo_intercambio%type;
ie_criterio_horario_w		pls_conta_proc.ie_criterio_horario%type;
dt_inicio_proc_w		pls_conta_proc.dt_inicio_proc%type;
dt_fim_proc_w			pls_conta_proc.dt_fim_proc%type;
dt_recebimento_fatura_w		ptu_fatura.dt_recebimento_fatura%type;
dt_postagem_fatura_w		ptu_fatura.dt_postagem%type;
nr_seq_grupo_coop_seg_w		pls_segurado.nr_seq_grupo_coop%type;
ie_beneficio_obito_w		pls_plano.ie_seguro_obito%type;
ie_tipo_despesa_w		pls_conta_proc.ie_tipo_despesa%type;
dados_conta_valor_w		pls_cta_valorizacao_pck.dados_conta;
dados_conta_proc_valor_w	pls_cta_valorizacao_pck.dados_conta_proc;
dados_beneficiario_valor_w	pls_cta_valorizacao_pck.dados_beneficiario;
dados_fatura_valor_w		pls_cta_valorizacao_pck.dados_fatura;
dados_tx_interc_valor_w		pls_cta_valorizacao_pck.dados_taxa_intercambio;
dados_procedimento_w		pls_cta_valorizacao_pck.dados_procedimento;
ie_nao_gera_tx_inter_w		pls_regra_preco_servico.ie_nao_gera_tx_inter%type;
dados_prestador_prot_w		pls_cta_valorizacao_pck.dados_prestador_prot;
nr_seq_regra_tx_inter_w		pls_conta_proc.nr_seq_regra_tx_inter%type;
dados_adic_horario_w		pls_cta_valorizacao_pck.dados_adic_horario;
dados_prestador_exec_w		pls_cta_valorizacao_pck.dados_prestador_exec;
nr_seq_guia_w			pls_guia_plano.nr_sequencia%type;
ie_nacional_w			pls_congenere.ie_nacional%type;
sg_estado_w			varchar(10);
sg_estado_int_w			varchar(10);
nr_seq_congenere_outorg_w	pls_congenere.nr_sequencia%type;
nr_seq_log_exec_w		pls_cta_log_exec.nr_sequencia%type;
dados_regra_preco_servico_w	pls_cta_valorizacao_pck.dados_regra_preco_servico;
vl_ch_honorario_w		pls_conta_proc.vl_ch_honorario%type;
vl_taxa_co_w			double precision := 0;
vl_unitario_calc_w		pls_conta_proc.vl_unitario_calc%type;
cd_prestador_solic_w		pls_prestador.cd_prestador%type;
nr_seq_conta_princ_w		pls_conta.nr_sequencia%type;
tx_ajuste_w			double precision;
ie_valoriza_w			varchar(2);
cd_guia_ok_w			pls_conta.cd_guia_ok%type;
ie_cobranca_prevista_ww		pls_guia_plano_proc.ie_cobranca_prevista%type;
ie_tipo_log_w			pls_log_calculo_proc.ie_tipo_log%type := 'C';
nr_seq_ops_congenere_seg_w	pls_segurado.nr_seq_ops_congenere%type;
cd_estab_cad_benef_w		estabelecimento.cd_estabelecimento%type;
ie_tipo_intercambio_benef_w	varchar(1);
tx_item_regra_w			pls_conta_proc_regra.tx_item%type;
vl_proc_unitario_w		pls_conta_proc.vl_proc_unitario%type;
vl_proc_cobranca_prev_w		pls_conta_proc.vl_proc_cobranca_prev%type := 0;
nr_seq_regra_cobr_prev_w	pls_conta_proc.nr_seq_regra_cobr_prev%type;
qt_regra_cobr_prev_w		integer;
ie_cobranca_prevista_proc_w	pls_conta_proc.ie_cobranca_prevista%type;
ie_cobranca_prevista_base_w	pls_conta_proc.ie_cobranca_prevista%type;
ie_via_acesso_exec_w		pls_conta_proc.ie_via_acesso%type;
ie_via_acesso_w			pls_conta_proc.ie_via_acesso%type;
vl_fixo_tx_adm_w			pls_prestador_taxa_item.vl_fixo%type;
nr_seq_regra_tx_adm_w			pls_prestador_taxa_item.nr_sequencia%type;
ie_regime_atendimento_w		pls_conta.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_conta.ie_saude_ocupacional%type;

procedure pls_var_serv_regra(	ie_tipo_despesa_p		pls_conta_proc.ie_tipo_despesa%type,
				cd_guia_ok_p			pls_conta.cd_guia_ok%type,
				dt_procedimento_p		pls_conta_proc.dt_procedimento%type,
				cd_procedimento_p		pls_conta_proc.cd_procedimento%type,
				ie_origem_proced_p		pls_conta_proc.ie_origem_proced%type,
				nr_seq_segurado_p		pls_conta.nr_seq_segurado%type,
				tx_ajuste_p		out	bigint,
				ie_valoriza_p		out	text) is

qt_regra_proc_w		integer;

--Cursor de procedimentos presentes na conta diferentes do procedimento que esta sendo valorizado				
C01 CURSOR FOR	
	SELECT	proc.cd_procedimento,
		proc.ie_origem_proced
	from	pls_conta_proc_v	proc
	where	proc.cd_guia_referencia = cd_guia_ok_p
	and	proc.nr_seq_segurado	= nr_seq_segurado_p
	and (proc.cd_procedimento	!= cd_procedimento_p or proc.ie_origem_proced != ie_origem_proced_p)
	order by proc.nr_sequencia;

--Cursor de regras
C02 CURSOR FOR
	SELECT	regra.nr_sequencia
	from	pls_regra_tx_ajuste regra
	where	trunc(dt_procedimento_p) between trunc(regra.dt_inicio_vigencia) and fim_dia(regra.dt_fim_vigencia)
	order by nr_sequencia;
				
BEGIN
--Caso o procedimento que esta sendo valorizado seja um servico
if (coalesce(ie_tipo_despesa_p,'X') = '2') then

	--Abre o cursor de regras
	for r_C02_w in C02 loop
		begin
		
		--Abre o cursor de procedimentos
		for r_C01_w in C01 loop
			begin
			
			--Verifica se os outros procedimentos presentes na conta

			--se encaixam na regra selecionada
			select	count(1)
			into STRICT	qt_regra_proc_w
			from	pls_regra_tx_ajuste_princ
			where	cd_procedimento 	= r_c01_w.cd_procedimento
			and	ie_origem_proced 	= r_c01_w.ie_origem_proced
			and	nr_seq_regra_tx_ajuste	= r_C02_w.nr_sequencia  LIMIT 1;
			
			--Caso sim busca a taxa de ajuste sobre o servico e retorna como parametro
			if (qt_regra_proc_w > 0) then
				
				select	max(tx_ajuste)
				into STRICT	tx_ajuste_p
				from	pls_regra_tx_ajuste_proc
				where	cd_procedimento 	= cd_procedimento_p
				and	ie_origem_proced	= ie_origem_proced_p
				and	nr_seq_regra_tx_ajuste 	= r_C02_w.nr_sequencia;
				
				if (coalesce(tx_ajuste_p::text, '') = '') then
					ie_valoriza_p := 'N';
				else
					ie_valoriza_p := 'S';
				end if;
			end if;
			end;
		end loop;
		end;
	end loop;
end if;
end;

begin

begin
	select	a.nr_seq_protocolo,
		a.cd_estabelecimento,
		a.nr_seq_segurado,
		coalesce(a.cd_guia,'X'),
		a.dt_atendimento_conta,
		a.nr_seq_prestador_exec,
		a.ie_origem_conta,
		a.cd_medico_solicitante,
		a.cd_medico_executor,
		a.nr_seq_tipo_acomodacao,
		a.ie_internado,
		a.ie_tipo_guia,
		a.nr_seq_cbo_saude,
		a.ie_carater_internacao,
		a.nr_seq_clinica,
		a.nr_seq_tipo_atendimento,
		a.nr_seq_regra_qtde_exec,
		a.nr_seq_regra_tipo_exec,
		a.nr_seq_conta,
		a.nr_seq_fatura,
		a.ie_tipo_conta,
		a.dt_alta_conta,
		a.cd_procedimento,
		a.ie_origem_proced,
		a.dt_procedimento,
		a.qt_procedimento_imp,
		a.tx_item,
		a.vl_procedimento,
		a.ie_tx_manual,
		a.nr_seq_prestador_prot,
		a.dt_mes_competencia,
		a.ie_tipo_protocolo,
		a.nr_seq_congenere,
		a.ie_criterio_horario,
		a.dt_inicio_proc,
		a.dt_fim_proc,
		a.ie_tipo_intercambio,
		a.dt_recebimento_fatura,
		a.dt_postagem_fatura,
		a.cd_grupo_proc,
		a.cd_especialidade,
		a.cd_area_procedimento,
		a.nr_seq_grupo_rec,
		a.nr_seq_guia,
		a.nr_seq_prestador_prot,
		a.tx_intercambio,
		a.nr_seq_regra_tx_inter,
		a.ie_tipo_despesa,
		a.nr_seq_tipo_prest_prot,
		a.nr_seq_clas_prest_prot,
		a.ie_tipo_vinculo_prest_prot,
		a.cd_prestador_prot,
		a.nr_seq_tipo_prest_exec,
		a.nr_seq_clas_prest_exec,
		a.ie_tipo_vinculo_prest_exec,
		a.cd_prestador_exec,
		a.nr_seq_prestador_exec,
		a.dt_procedimento,
		a.cd_prestador_solic,
		a.tx_custo_operacional,
		a.nr_seq_conta_princ,
		a.cd_guia_referencia,
		a.ie_vinc_internado,
		a.ie_cobranca_prevista,
		a.ie_via_acesso,
		a.ie_tipo_segurado,
		a.nr_seq_tipo_conta,
		a.ie_regime_atendimento,
		a.ie_saude_ocupacional
	into STRICT	nr_seq_protocolo_w,
		cd_estabelecimento_w,
		nr_seq_segurado_w,
		cd_guia_w,
		dt_conta_w,
		nr_seq_prestador_exec_w,
		ie_origem_conta_w,
		cd_medico_solicitante_w,
		cd_medico_conta_w,
		nr_seq_tipo_acomodacao_w,
		ie_internado_w,
		ie_tipo_guia_w,
		nr_seq_cbo_saude_w,
		ie_carater_internacao_w,
		nr_seq_clinica_w,
		nr_seq_tipo_atendimento_w,
		nr_seq_regra_qtde_exec_w,
		nr_seq_regra_tipo_exec_w,
		nr_seq_conta_w,
		nr_seq_fatura_w,
		ie_tipo_conta_w,
		dt_alta_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		dt_procedimento_w,
		qt_procedimento_w,
		tx_item_w,
		vl_calculado_ant_w,
		ie_tx_manual_w,
		nr_seq_prestador_w,
		dt_protocolo_w,
		ie_tipo_protocolo_w,
		nr_seq_congenere_w,
		ie_criterio_horario_w,
		dt_inicio_proc_w,
		dt_fim_proc_w,
		ie_tipo_intercambio_w,
		dt_recebimento_fatura_w,
		dt_postagem_fatura_w,
		dados_procedimento_w.cd_grupo_proc,
		dados_procedimento_w.cd_especialidade,
		dados_procedimento_w.cd_area_procedimento,
		dados_procedimento_w.nr_seq_grupo_rec,
		nr_seq_guia_w,
		dados_prestador_prot_w.nr_seq_prestador,
		dados_tx_interc_valor_w.pr_taxa,
		dados_tx_interc_valor_w.nr_sequencia,
		ie_tipo_despesa_w,
		dados_prestador_prot_w.nr_seq_tipo_prestador,
		dados_prestador_prot_w.nr_seq_classificacao,
		dados_prestador_prot_w.ie_tipo_vinculo,
		dados_prestador_prot_w.cd_prestador,
		dados_prestador_exec_w.nr_seq_tipo_prestador,
		dados_prestador_exec_w.nr_seq_classificacao,
		dados_prestador_exec_w.ie_tipo_vinculo,
		dados_prestador_exec_w.cd_prestador,
		dados_prestador_exec_w.nr_seq_prestador,
		dt_preco_w,
		cd_prestador_solic_w,
		tx_custo_operacional_temp_w,
		nr_seq_conta_princ_w,
		cd_guia_ok_w,
		dados_conta_valor_w.ie_ref_guia_internacao,
		ie_cobranca_prevista_proc_w,
		ie_via_acesso_w,
		ie_tipo_segurado_w,
		dados_conta_valor_w.nr_seq_tipo_conta,
		ie_regime_atendimento_w,
		ie_saude_ocupacional_w
	from	pls_conta_proc_v a
	where	a.nr_sequencia	= nr_sequencia_p;
exception
when others then
	nr_seq_protocolo_w := null;
end;

select 	max(a.nr_seq_tipo_atendimento)
into STRICT 	dados_conta_valor_w.nr_seq_tipo_atendimento
from 	pls_conta_v a
where 	a.nr_sequencia = nr_seq_conta_princ_w;

nr_seq_classificacao_w	:= dados_prestador_exec_w.nr_seq_classificacao;
ie_tipo_vinculo_w	:= dados_prestador_exec_w.ie_tipo_vinculo;

dados_conta_proc_valor_w.nr_sequencia		:= nr_sequencia_p;
dados_conta_proc_valor_w.nr_seq_conta		:= nr_seq_conta_w;
dados_conta_proc_valor_w.ie_origem_proced	:= ie_origem_proced_w;
dados_conta_proc_valor_w.cd_procedimento	:= cd_procedimento_w;
dados_conta_proc_valor_w.dt_procedimento	:= dt_procedimento_w;
dados_conta_proc_valor_w.dt_inicio_proc		:= dt_inicio_proc_w;
dados_conta_proc_valor_w.dt_fim_proc		:= dt_fim_proc_w;
dados_conta_proc_valor_w.ie_criterio_horario	:= ie_criterio_horario_w;

dados_conta_valor_w.nr_sequencia		:= nr_seq_conta_w;
dados_conta_valor_w.ie_origem_conta		:= ie_origem_conta_w;
dados_conta_valor_w.ie_tipo_conta		:= ie_tipo_conta_w;
dados_conta_valor_w.nr_seq_segurado		:= nr_seq_segurado_w;
dados_conta_valor_w.ie_tipo_guia		:= ie_tipo_guia_w;
dados_conta_valor_w.dt_alta			:= dt_alta_w;
dados_conta_valor_w.dt_atendimento		:= dt_conta_w;
dados_conta_valor_w.ie_carater_internacao	:= ie_carater_internacao_w;

dados_fatura_valor_w.nr_sequencia		:= nr_seq_fatura_w;
dados_fatura_valor_w.dt_recebimento		:= dt_recebimento_fatura_w;
dados_fatura_valor_w.dt_postagem		:= dt_postagem_fatura_w;

-- Obter dados do protocolo 
if (coalesce(nr_seq_protocolo_w::text, '') = '') then
	-- Conta || nr_seq_conta_w || sem protocolo favor vincular um protocolo 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(177447,'NR_SEQ_CONTA=' ||nr_seq_conta_w);
end if;

select	max(nr_seq_categoria)
into STRICT	nr_seq_categoria_w
from	pls_regra_categoria
where	nr_seq_tipo_acomodacao	= nr_seq_tipo_acomodacao_w;

-- Obter dados do segurado 
begin
	--select	nvl(nr_seq_plano,0),
	select	coalesce(pls_obter_produto_benef(nr_sequencia,dt_conta_w),0),
			nr_seq_contrato,
			nr_seq_intercambio,
			nr_seq_congenere,
			coalesce(ie_pcmso,'N'),
			nr_seq_ops_congenere,
			cd_estabelecimento
	into STRICT	nr_seq_plano_w,
			nr_seq_contrato_w,
			nr_seq_intercambio_w,
			nr_seq_congenere_seg_w,
			ie_pcmso_w,
			nr_seq_ops_congenere_seg_w,
			cd_estab_cad_benef_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
	
	ie_tipo_intercambio_benef_w := pls_obter_tipo_intercambio(coalesce(nr_seq_ops_congenere_seg_w, nr_seq_congenere_seg_w), cd_estab_cad_benef_w);
	
exception
when others then
	nr_seq_plano_w		:= '';
	nr_seq_contrato_w	:= '';
end;

/* Obter dados do plano */

begin
	select  ie_preco,
		ie_tipo_contratacao,
		ie_seguro_obito
	into STRICT	ie_preco_plano_w,
		ie_tipo_contratacao_w,
		ie_beneficio_obito_w
	from	pls_plano
	where	nr_sequencia	= nr_seq_plano_w;
exception
when others then
	ie_preco_plano_w	:= '0';
	ie_tipo_contratacao_w	:= '';
end;

dados_beneficiario_valor_w.nr_sequencia		:= nr_seq_segurado_w;
dados_beneficiario_valor_w.nr_seq_intercambio	:= nr_seq_intercambio_w;
dados_beneficiario_valor_w.nr_seq_plano		:= nr_seq_plano_w;
dados_beneficiario_valor_w.nr_seq_grupo_coop	:= nr_seq_grupo_coop_seg_w;
dados_beneficiario_valor_w.ie_tipo_beneficiario	:= ie_tipo_segurado_w;
dados_beneficiario_valor_w.ie_beneficio_obito	:= ie_beneficio_obito_w;
dados_beneficiario_valor_w.ie_pcmso		:= ie_pcmso_w;
dados_beneficiario_valor_w.nr_seq_contrato	:= nr_seq_contrato_w;
dados_beneficiario_valor_w.ie_tipo_intercambio	:= ie_tipo_intercambio_benef_w;


ie_restringe_estab_w	:= pls_obter_se_controle_estab('CO');

select	coalesce(max(ie_calculo_coparticipacao),'P')
into STRICT	ie_calculo_coparticipacao_w
from	pls_parametros
where	((ie_restringe_estab_w	= 'S' AND cd_estabelecimento	= cd_estabelecimento_w)
or (ie_restringe_estab_w	= 'N'));


begin
	select	coalesce(ie_cobranca_prevista,'N'),
		ie_pcmso
	into STRICT	ie_cobranca_prevista_w,
		dados_conta_valor_w.ie_atend_pcmso
	from	pls_guia_plano
	where	nr_sequencia	= nr_seq_guia_w;
	
	if (ie_cobranca_prevista_w = 'N') then
				
		select	coalesce(max(ie_cobranca_prevista),'N')
		into STRICT	ie_cobranca_prevista_ww
		from	pls_guia_plano_proc
		where	cd_procedimento 	= cd_procedimento_w
		and	ie_origem_proced 	= ie_origem_proced_w
		and	nr_seq_guia 		= nr_seq_guia_w;
		
		if (ie_cobranca_prevista_ww = 'S') then
			ie_cobranca_prevista_w := ie_cobranca_prevista_ww;
		end if;
	end if;	
	
	
exception
	when others then
	ie_cobranca_prevista_w	:= 'N';
end;

if (ie_cobranca_prevista_w = 'N') and (ie_cobranca_prevista_proc_w = 'S') then
	ie_cobranca_prevista_base_w := ie_cobranca_prevista_proc_w;
else
	ie_cobranca_prevista_base_w := ie_cobranca_prevista_w;
end if;

ie_gravar_log_w := coalesce(ie_gravar_log_p,'N');

if (ie_gravar_log_w = 'S') then

	if (pls_util_pck.ie_processo_pos_w = 'S') then
		ie_tipo_log_w := 'P';
	end if;

	delete	FROM pls_log_calculo_proc
	where	nr_seq_procedimento = nr_sequencia_p
	and	((ie_tipo_log = ie_tipo_log_w) or (coalesce(ie_tipo_log::text, '') = ''));
end if;

if (ie_tipo_protocolo_w	= 'R') then
	ie_tipo_tabela_w	:= 'R';
elsif (ie_tipo_protocolo_w	= 'I') then
	ie_tipo_tabela_w	:= 'IP';
else
	ie_tipo_tabela_w	:= 'P';
end if;

select	coalesce(max(b.nr_sequencia),0)
into STRICT	nr_seq_congenere_outorg_w
from	pls_congenere b,
	pls_outorgante a
where	a.cd_cgc_outorgante	= b.cd_cgc
and	a.cd_estabelecimento	= cd_estabelecimento_w;

if (nr_seq_congenere_seg_w IS NOT NULL AND nr_seq_congenere_seg_w::text <> '') and (nr_seq_congenere_seg_w <> nr_seq_congenere_outorg_w) then
	nr_seq_congenere_w	:= nr_seq_congenere_seg_w;
end if;

if (ie_internado_w	= 'N') then
	ie_internado_w	:= 'S';
end if;

/* Obter a UF da operadora  - Tasy*/

select	coalesce(max(sg_estado),'X')
into STRICT	sg_estado_w
from	pessoa_juridica
where	cd_cgc = (	SELECT	max(cd_cgc_outorgante)
			from	pls_outorgante
			where	cd_estabelecimento = cd_estabelecimento_w);

/* Obter a UF da operadora do beneficiario eventual ou que enviou o protocolo*/

select	coalesce(max(a.sg_estado),'X'),
	coalesce(max(ie_nacional), 'N')
into STRICT	sg_estado_int_w,
	ie_nacional_w
from	pessoa_juridica	a,
	pls_congenere	b
where	a.cd_cgc	= b.cd_cgc
and	b.nr_sequencia	= nr_seq_congenere_w;

if (ie_nacional_w	= 'S') then
	ie_tipo_intercambio_w := 'N';	-- Nacional
elsif (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
	if (sg_estado_w = sg_estado_int_w) then
		ie_tipo_intercambio_w	:= 'E';
	else
		ie_tipo_intercambio_w	:= 'N';
	end if;
else
	ie_tipo_intercambio_w	:= 'A';
end if;

if (coalesce(dados_conta_valor_w.ie_tipo_intercambio::text, '') = '') then	
	dados_conta_valor_w.ie_tipo_intercambio		:= ie_tipo_intercambio_w;
end if;

dados_conta_valor_w.nr_seq_congenere := nr_seq_congenere_w;

dados_regra_preco_servico_w := pls_define_preco_servico(cd_estabelecimento_w, nr_seq_prestador_exec_w, dt_preco_w, cd_procedimento_w, ie_origem_proced_w, ie_tipo_tabela_w, nr_sequencia_p, ie_gravar_log_w, ie_tipo_contratacao_w, nr_seq_plano_w, '', '', '', nr_seq_contrato_w, nr_seq_classificacao_w, nr_seq_categoria_w, ie_internado_w, ie_tipo_vinculo_w, nr_seq_intercambio_w, nr_seq_segurado_w, ie_tipo_intercambio_w, ie_tipo_guia_w, nr_seq_cbo_saude_w, ie_carater_internacao_w, nr_seq_clinica_w, nr_seq_tipo_atendimento_w, nr_seq_tipo_acomodacao_w, dados_prestador_prot_w, dados_conta_valor_w, dados_regra_preco_servico_w, null, cd_prestador_solic_w, ie_regime_atendimento_w, ie_saude_ocupacional_w);
			
nr_seq_regra_w		:= dados_regra_preco_servico_w.nr_sequencia;
vl_procedimento_w 	:= dados_regra_preco_servico_w.vl_servico;
vl_unitario_calc_w	:= dados_regra_preco_servico_w.vl_servico;
vl_ch_honorario_w	:= dados_regra_preco_servico_w.vl_ch_servico;

/* Obter o preco UNITaRIO da coparticipacao */

if	((ie_calculo_coparticipacao_w = 'O') or ( ie_calculo_coparticipacao_w = 'R')) and (coalesce(ie_preco_plano_w,'1')	= '1')then
	
	dados_regra_preco_servico_w := pls_define_preco_servico(cd_estabelecimento_w, nr_seq_prestador_exec_w, dt_preco_w, cd_procedimento_w, ie_origem_proced_w, 'CO', nr_sequencia_p, 'S', ie_tipo_contratacao_w, nr_seq_plano_w, '', '', '', nr_seq_contrato_w, nr_seq_classificacao_w, nr_seq_categoria_w, ie_internado_w, ie_tipo_vinculo_w, nr_seq_intercambio_w, nr_seq_segurado_w, ie_tipo_intercambio_w, ie_tipo_guia_w, nr_seq_cbo_saude_w, ie_carater_internacao_w, nr_seq_clinica_w, nr_seq_tipo_atendimento_w, nr_seq_tipo_acomodacao_w, dados_prestador_prot_w, dados_conta_valor_w, dados_regra_preco_servico_w, null, cd_prestador_solic_w, ie_regime_atendimento_w, ie_saude_ocupacional_w);
	
	nr_seq_regra_copartic_w	:= dados_regra_preco_servico_w.nr_sequencia;
	vl_proc_copartic_w 	:= dados_regra_preco_servico_w.vl_servico;
	
	/* Tratar os adicionais por horario OS - 331057 Robson */
			
	dados_adic_horario_w := pls_cta_valorizacao_pck.pls_define_adic_horario(     	dados_conta_proc_valor_w, dados_prestador_exec_w, dados_prestador_prot_w, dados_conta_valor_w, dados_procedimento_w, dados_beneficiario_valor_w, 'CO', nm_usuario_p, cd_estabelecimento_w, dados_adic_horario_w);
							
	if (dados_adic_horario_w.tx_procedimento IS NOT NULL AND dados_adic_horario_w.tx_procedimento::text <> '') then
		vl_proc_copartic_w := (vl_proc_copartic_w * dados_adic_horario_w.tx_procedimento);
	end if;
end if;

select	count(1)
into STRICT	qt_regra_cobr_prev_w
from	pls_regra_preco_servico
where	ie_tipo_tabela = 'CP'
and	ie_situacao = 'A';

if (ie_cobranca_prevista_base_w = 'S') and (qt_regra_cobr_prev_w > 0) then
	
	dados_regra_preco_servico_w := pls_define_preco_servico(cd_estabelecimento_w, nr_seq_prestador_exec_w, dt_preco_w, cd_procedimento_w, ie_origem_proced_w, 'CP', nr_sequencia_p, 'S', ie_tipo_contratacao_w, nr_seq_plano_w, '', '', '', nr_seq_contrato_w, nr_seq_classificacao_w, nr_seq_categoria_w, ie_internado_w, ie_tipo_vinculo_w, nr_seq_intercambio_w, nr_seq_segurado_w, ie_tipo_intercambio_w, ie_tipo_guia_w, nr_seq_cbo_saude_w, ie_carater_internacao_w, nr_seq_clinica_w, nr_seq_tipo_atendimento_w, nr_seq_tipo_acomodacao_w, dados_prestador_prot_w, dados_conta_valor_w, dados_regra_preco_servico_w, null, cd_prestador_solic_w, ie_regime_atendimento_w, ie_saude_ocupacional_w);
				
				vl_proc_cobranca_prev_w := dados_regra_preco_servico_w.vl_servico;
				nr_seq_regra_cobr_prev_w := dados_regra_preco_servico_w.nr_sequencia;
				
	dados_adic_horario_w := pls_cta_valorizacao_pck.pls_define_adic_horario(     	dados_conta_proc_valor_w, dados_prestador_exec_w, dados_prestador_prot_w, dados_conta_valor_w, dados_procedimento_w, dados_beneficiario_valor_w, 'CP', nm_usuario_p, cd_estabelecimento_w, dados_adic_horario_w);
	
	if (dados_adic_horario_w.tx_procedimento IS NOT NULL AND dados_adic_horario_w.tx_procedimento::text <> '') then
		vl_proc_cobranca_prev_w		:=	vl_proc_cobranca_prev_w * dados_adic_horario_w.tx_procedimento;
	end if;
end if;

if (ie_tipo_protocolo_w    = 'I') then
	dados_regra_preco_servico_w := pls_define_preco_servico(cd_estabelecimento_w, nr_seq_prestador_exec_w, dt_preco_w, cd_procedimento_w, ie_origem_proced_w, 'IC', nr_sequencia_p, ie_gravar_log_w, ie_tipo_contratacao_w, nr_seq_plano_w, '', '', '', nr_seq_contrato_w, nr_seq_classificacao_w, nr_seq_categoria_w, ie_internado_w, ie_tipo_vinculo_w, nr_seq_intercambio_w, nr_seq_segurado_w, ie_tipo_intercambio_w, ie_tipo_guia_w, nr_seq_cbo_saude_w, ie_carater_internacao_w, nr_seq_clinica_w, nr_seq_tipo_atendimento_w, nr_seq_tipo_acomodacao_w, dados_prestador_prot_w, dados_conta_valor_w, dados_regra_preco_servico_w, null, cd_prestador_solic_w, ie_regime_atendimento_w, ie_saude_ocupacional_w);
	
	nr_seq_regra_int_w	:= dados_regra_preco_servico_w.nr_sequencia;
	vl_procedimento_ptu_w 	:= dados_regra_preco_servico_w.vl_servico;
	vl_ch_honorario_w	:= dados_regra_preco_servico_w.vl_ch_servico;
end if;
	
if (coalesce(nr_seq_regra_qtde_exec_w,0) = 0) and (coalesce(nr_seq_regra_tipo_exec_w,0) = 0) and (coalesce(ie_atualiza_p,'S') = 'S') then	
	vl_procedimento_w := ((tx_item_w * vl_procedimento_w)/100);
end if;

vl_proc_copartic_w	:= ((tx_item_w * vl_proc_copartic_w)/100);

dados_adic_horario_w := pls_cta_valorizacao_pck.pls_define_adic_horario(     	dados_conta_proc_valor_w, dados_prestador_exec_w, dados_prestador_prot_w, dados_conta_valor_w, dados_procedimento_w, dados_beneficiario_valor_w, 'P', nm_usuario_p, cd_estabelecimento_w, dados_adic_horario_w);
								
if (dados_adic_horario_w.tx_procedimento IS NOT NULL AND dados_adic_horario_w.tx_procedimento::text <> '') then
	vl_procedimento_w	:= vl_procedimento_w * dados_adic_horario_w.tx_procedimento;
end if;
			
ds_observacao_log_w	:= 'Tx item: ' || tx_item_w;
CALL pls_gravar_log_calculo_proc(ie_gravar_log_w, nr_sequencia_p, cd_estabelecimento_w,
			'Preco definido X Taxa item', ds_observacao_log_w, 'pls_atualiza_valor_servico',
			vl_calculado_w, 0, 0,
			0, 0, 0,
			4, '', null,
			null, null, null, nm_usuario_p);
			
select	coalesce(max(tx_item),0)
into STRICT	tx_item_regra_w
from	pls_conta_proc_regra
where	nr_sequencia = nr_sequencia_p;

if (tx_item_regra_w > 0) then
	
	vl_procedimento_w 	:= vl_procedimento_w * tx_item_regra_w;
	vl_proc_copartic_w 	:= vl_proc_copartic_w * tx_item_regra_w;
	
	ds_observacao_log_w	:= 'Tx item A500: ' || tx_item_regra_w;
	CALL pls_gravar_log_calculo_proc(ie_gravar_log_w, nr_sequencia_p, cd_estabelecimento_w,
				'Preco definido X Taxa item A500', ds_observacao_log_w, 'pls_atualiza_valor_servico',
				vl_calculado_w, 0, 0,
				0, 0, 0,
				4, '', null,
				null, null, null, nm_usuario_p);
end if;

vl_calculado_w		:= (vl_procedimento_w * qt_procedimento_w);
vl_proc_copartic_w	:= (vl_proc_copartic_w * qt_procedimento_w);
ds_observacao_log_w	:= 'Qt. procedimento: ' || qt_procedimento_w;
CALL pls_gravar_log_calculo_proc(ie_gravar_log_w, nr_sequencia_p, cd_estabelecimento_w,
			'Preco atual X Qt. procedimento', ds_observacao_log_w, 'pls_atualiza_valor_servico',
			vl_calculado_w, 0, 0,
			0, 0, 0,
			5, '', null,
			null,null, null, nm_usuario_p);

if (ie_tipo_protocolo_w	= 'C') then
	begin
		select	b.nr_seq_prestador
		into STRICT	nr_seq_prestador_solic_w
		from	pls_prestador_medico	b,
			pls_prestador		d
		where	b.nr_seq_prestador	= d.nr_sequencia
		and	d.cd_estabelecimento	= cd_estabelecimento_w
		and	b.cd_medico		= cd_medico_solicitante_w
		and	b.ie_situacao		= 'A'
		and	trunc(dt_preco_w,'dd') between trunc(coalesce(b.dt_inclusao, dt_preco_w),'dd') and trunc(coalesce(b.dt_exclusao,dt_preco_w),'dd');
	exception
	when others then
		nr_seq_prestador_solic_w	:= null;
	end;
	
	if (coalesce(nr_seq_prestador_solic_w,0) = 0) then
		begin
			select	cd_medico_solicitante
			into STRICT	cd_solic_w
			from	pls_guia_plano
			where	nr_sequencia	= nr_seq_guia_w;
		exception
		when others then
			cd_solic_w	:= null;
		end;
		if (cd_solic_w IS NOT NULL AND cd_solic_w::text <> '') then
			begin
				select	nr_seq_prestador
				into STRICT	nr_seq_prestador_solic_w
				from	pls_prestador_medico
				where	ie_situacao		= 'A'
				and	cd_medico		= cd_solic_w
				and	trunc(dt_preco_w,'dd') between trunc(coalesce(dt_inclusao, dt_preco_w),'dd') and trunc(coalesce(dt_exclusao,dt_preco_w),'dd');
			exception
			when others then
				nr_seq_prestador_solic_w	:= null;
			end;
		end if;
	end if;
	
	cd_medico_conta_w := pls_obter_medico_executor(nr_sequencia_p, 'P');
	
	ie_medico_exec_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_conta_w,dt_procedimento_w,null);
	
	if (ie_medico_exec_coope_w = 'S') then
		ie_medico_exec_coope_w	:= 'C'; -- Caso ele nao for cooperado a function ja retorna N
	end if;
	
	
	ie_medico_solic_coope_w := pls_obter_se_cooperado_ativo(cd_medico_solicitante_w,dt_procedimento_w,null);
	
	if (ie_medico_solic_coope_w = 'S') then
		ie_medico_solic_coope_w	:= 'C'; -- Caso ele nao for cooperado a function ja retorna N
	end if;

end if;
	
SELECT * FROM pls_obter_tipo_ato_cooperado(	cd_procedimento_w, ie_origem_proced_w, nr_sequencia_p, 'P', nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prestador_w, null, ie_medico_solic_coope_w, ie_medico_exec_coope_w, '', ie_tipo_protocolo_w, ie_tipo_guia_w, ie_tipo_despesa_w, null, nr_seq_regra_cooperado_w, ie_ato_cooperado_w) INTO STRICT nr_seq_regra_cooperado_w, ie_ato_cooperado_w;
				
if (nr_seq_regra_qtde_exec_w > 0) and (coalesce(ie_atualiza_p,'S') = 'S') and
	((coalesce(ie_tx_manual_w::text, '') = '') or (ie_tx_manual_w = 'N' ))then
	SELECT * FROM pls_obter_tx_qtde_proc_valor( 	nr_sequencia_p, nr_seq_conta_w, nm_usuario_p, cd_estabelecimento_w, tx_procedimento_w, tx_medico_w, tx_custo_operacional_w, tx_material_w, tx_anestesista_w, tx_auxiliares_w, ie_via_acesso_exec_w ) INTO STRICT tx_procedimento_w, tx_medico_w, tx_custo_operacional_w, tx_material_w, tx_anestesista_w, tx_auxiliares_w, ie_via_acesso_exec_w;
					
	if (ie_via_acesso_exec_w IS NOT NULL AND ie_via_acesso_exec_w::text <> '') then
		ie_via_acesso_w := ie_via_acesso_exec_w;
	end if;
	
	vl_calculado_w	:= dividir((vl_calculado_w*tx_custo_operacional_w),100);
	
	if (coalesce(tx_procedimento_w,100) <> 100) then
		vl_calculado_w	:= dividir((vl_calculado_w*tx_procedimento_w),100);
	end if;
	tx_item_w	:= tx_procedimento_w;
end if;

if (nr_seq_regra_tipo_exec_w > 0) and (coalesce(ie_atualiza_p,'S') = 'S') and
	((coalesce(ie_tx_manual_w::text, '') = '') or (ie_tx_manual_w = 'N' ))then
	vl_calculado_w	:= dividir((vl_calculado_w*tx_custo_operacional_w),100);
	if (coalesce(tx_item_w,100) <> 100) then
		vl_calculado_w	:= dividir((vl_calculado_w*tx_item_w),100);
	end if;
end if;

if (ie_tx_manual_w = 'S') then
	vl_calculado_w	:= dividir((vl_calculado_w*tx_custo_operacional_temp_w),100);
end if;

SELECT * FROM pls_obter_taxa_adm_item( cd_procedimento_w, ie_origem_proced_w, null, nr_seq_prestador_w, nm_usuario_p, ie_preco_plano_w, ie_tipo_segurado_w, nr_seq_contrato_w, dt_procedimento_w, tx_adm_w, vl_fixo_tx_adm_w, nr_seq_regra_tx_adm_w) INTO STRICT tx_adm_w, vl_fixo_tx_adm_w, nr_seq_regra_tx_adm_w;
	
if (coalesce(tx_adm_w,0) > 0) then
	vl_calculado_w		:= vl_calculado_w + dividir((vl_calculado_w * tx_adm_w),100);
	
	ds_observacao_log_w	:= 'Tx adm prestador: ' || tx_adm_w;
	CALL pls_gravar_log_calculo_proc(ie_gravar_log_w, nr_sequencia_p, cd_estabelecimento_w,
			'Preco definido X Taxa adm prestador', ds_observacao_log_w, 'pls_atualiza_valor_servico',
			vl_calculado_w, 0, 0,
			0, 0, 0,
			6, '', null,
			null, null, null, nm_usuario_p);
	
elsif (vl_fixo_tx_adm_w IS NOT NULL AND vl_fixo_tx_adm_w::text <> '') then
	vl_calculado_w := vl_calculado_w + vl_fixo_tx_adm_w;
	
	ds_observacao_log_w	:= 'Valor da Tx adm prestador: ' || vl_fixo_tx_adm_w;
	CALL pls_gravar_log_calculo_proc(ie_gravar_log_w, nr_sequencia_p, cd_estabelecimento_w,
			'Preco definido + valor da taxa adm prestador', ds_observacao_log_w, 'pls_atualiza_valor_servico',
			vl_calculado_w, 0, 0,
			0, 0, 0,
			6, '', null,
			null, null, null, nm_usuario_p);
	
end if;

vl_co_w := vl_calculado_w;

SELECT * FROM pls_calcular_vinculo_direto(	nr_seq_conta_w, nr_sequencia_p, ie_gravar_log_p, nm_usuario_p, vl_medico_vinc_w, vl_anestesista_vinc_w, vl_auxiliares_vinc_w, vl_custo_operacional_vinc_w, vl_materiais_vinc_w, vl_procedimento_vinc_w, vl_total_proc_vinc_w) INTO STRICT vl_medico_vinc_w, vl_anestesista_vinc_w, vl_auxiliares_vinc_w, vl_custo_operacional_vinc_w, vl_materiais_vinc_w, vl_procedimento_vinc_w, vl_total_proc_vinc_w;

/* Se obtem valor pelo vinculo direto o valor calculado recebe ele tambem. */

if (vl_procedimento_vinc_w IS NOT NULL AND vl_procedimento_vinc_w::text <> '') then
	vl_co_w		:= vl_custo_operacional_vinc_w;
	vl_calculado_w	:= vl_custo_operacional_vinc_w;
end if;

select	max(ie_nao_gera_tx_inter)
into STRICT	ie_nao_gera_tx_inter_w
from	pls_regra_preco_servico
where	nr_sequencia	= nr_seq_regra_w;

if (coalesce(ie_nao_gera_tx_inter_w,'N') in ('F','N')) then
	if (ie_tipo_conta_w = 'I') then

		if (coalesce(dados_tx_interc_valor_w.nr_sequencia::text, '') = '') and (ie_recalcular_conta_p		= 'N')then
			-- Obter a taxa de intercambio.
			nr_seq_log_exec_w := pls_cta_processo_pck.executa_processo(	null, null, null, nr_seq_conta_w, nr_sequencia_p, null, null, null, '12,', null, nm_usuario_p, cd_estabelecimento_w, null, nr_seq_log_exec_w);
			select	tx_intercambio,
				nr_seq_regra_tx_inter
			into STRICT	dados_tx_interc_valor_w.pr_taxa,
				dados_tx_interc_valor_w.nr_sequencia
			from	pls_conta_proc
			where	nr_sequencia 	= nr_sequencia_p;								

		end if;	
		
		tx_intercambio_w := dados_tx_interc_valor_w.pr_taxa;
		
		if (coalesce(tx_intercambio_w,0) <> 0) and (ie_tipo_conta_w = 'I') then
			
			vl_calculado_w	:= vl_calculado_w + dividir((vl_calculado_w * tx_intercambio_w),100);			
			vl_taxa_co_w		:= (dividir((vl_co_w*tx_intercambio_w),100));

		end if;
		
		nr_seq_regra_tx_inter_w	:= dados_tx_interc_valor_w.nr_sequencia;
		if (coalesce(ie_pcmso_w,'N') = 'S') then
			tx_pcmco_w := pls_obter_taxa_pcmso_operadora(dt_procedimento_w, nr_seq_congenere_w, cd_estabelecimento_w, nm_usuario_p, tx_pcmco_w);
			
			if (coalesce(tx_pcmco_w,0) <> 0) then
				vl_procedimento_ptu_w	:= vl_procedimento_ptu_w + dividir((vl_calculado_w*tx_pcmco_w),100);
			end if;
		end if;
		
		
		
	end if;
end if;

--Verifica se ha regra de valorizacao para taxas no cadastro de regras
pls_var_serv_regra(	ie_tipo_despesa_w, cd_guia_ok_w, dt_procedimento_w,
			cd_procedimento_w, ie_origem_proced_w, nr_seq_segurado_w,
			tx_ajuste_w, ie_valoriza_w);

--Casi a procedure retorne 'S' deve valorizar conforme a regra encontrada.
if (ie_valoriza_w = 'S') then
	
	--Taxa de ajuste deve ser cadastrada de forma decimal

	--Caso queira 30% cadastrasse 1,3

	--Caso queira 100% cadastrase 2

	--Caso queira 15% cadastrasse 1,15
	vl_calculado_w 	:= vl_calculado_w * tx_ajuste_w;
	vl_co_w		:= vl_co_w * tx_ajuste_w;
		
end if;

vl_total_procedimento_w := vl_calculado_w;

/* Solicitacao de Adriano Geyer para deixar a data do item como a data informada.
   Conforme tratado com Adriano Geyer e Paulo Rosa, foi criado o campo ie_tx_manual para quando a tx for informada manualmente nao pode sofrer alteracao*/
if	((coalesce(ie_tx_manual_w::text, '') = '') or (ie_tx_manual_W = 'N' )) and (coalesce(tx_procedimento_w,100) <> 100) then
	tx_item_w	:= tx_procedimento_w;
end if;

update	pls_proc_participante
set	vl_participante	= 0,
	vl_calculado	= 0
where 	nr_seq_conta_proc = nr_sequencia_p;

vl_proc_unitario_w := round((dividir(vl_calculado_w, qt_procedimento_w))::numeric,2);

update	pls_conta_proc
set	vl_procedimento		= vl_calculado_w,
	vl_custo_operacional	= vl_co_w,
	tx_item			= tx_item_w,
	vl_calc_co_util		= vl_co_w,
	vl_calc_hi_util		= 0,
	vl_calc_mat_util	= 0,
	vl_glosa		= CASE WHEN ie_status='L' THEN vl_glosa WHEN ie_status='S' THEN vl_glosa  ELSE 0 END ,
	vl_saldo		= CASE WHEN ie_status='L' THEN vl_saldo WHEN ie_status='S' THEN vl_glosa  ELSE 0 END ,
	vl_beneficiario		= vl_beneficiario_w,
	nr_seq_regra		= CASE WHEN nr_seq_regra_w=0 THEN null  ELSE nr_seq_regra_w END ,
	ie_status		= CASE WHEN ie_status='D' THEN ie_status WHEN ie_status='L' THEN ie_status WHEN ie_status='S' THEN ie_status WHEN ie_status='P' THEN ie_status  ELSE 'C' END ,
	ds_log			= 'pls_atualiza_valor_servico',
	nr_seq_regra_pos_estab	= nr_seq_regra_pos_estab_w,
	ie_ato_cooperado	= ie_ato_cooperado_w,
	nr_seq_regra_cooperado	= nr_seq_regra_cooperado_w,
	vl_proc_copartic	= vl_proc_copartic_w,
	vl_procedimento_ptu	= vl_procedimento_ptu_w,
	nr_seq_regra_int	= nr_seq_regra_int_w,
	tx_intercambio		= coalesce(tx_intercambio_w,0),
	nr_seq_regra_copartic	= nr_seq_regra_copartic_w,
	vl_total_procedimento	= vl_total_procedimento_w,
	ie_cobranca_prevista	= CASE WHEN ie_cobranca_prevista_inf = NULL THEN  ie_cobranca_prevista_w  ELSE ie_cobranca_prevista END ,
	vl_calculado_ant	= vl_calculado_ant_w,
	tx_custo_operacional	= coalesce(tx_custo_operacional_w,100),
	tx_prestador_item	= tx_adm_w,
	vl_pag_medico_conta	= 0,
	vl_medico_original	= 0,
	vl_total_partic		= 0,
	nr_seq_regra_horario	= dados_adic_horario_w.nr_sequencia,
	nr_seq_regra_tx_inter	= nr_seq_regra_tx_inter_w,
	vl_ch_honorario		= vl_ch_honorario_w,
	dt_atualizacao		= clock_timestamp(),
	vl_taxa_co		= vl_taxa_co_w,
	vl_unitario_calc	= vl_unitario_calc_w,
	vl_proc_unitario	= vl_proc_unitario_w,
	vl_proc_cobranca_prev	= vl_proc_cobranca_prev_w,
	nr_seq_regra_cobr_prev	= nr_seq_regra_cobr_prev_w,
	ie_via_acesso		= ie_via_acesso_w
where	nr_sequencia		= nr_sequencia_p;

update	pls_conta_proc_regra
set	dt_valorizacao = clock_timestamp(),
	nr_seq_regra_tx_adm = nr_seq_regra_tx_adm_w
where 	nr_sequencia = nr_sequencia_p;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualiza_valor_servico ( nr_sequencia_p pls_conta_proc.nr_sequencia%type, ie_gravar_log_p text, nm_usuario_p usuario.nm_usuario%type, ie_atualiza_p text, ie_recalcular_conta_p text default 'N') FROM PUBLIC;

