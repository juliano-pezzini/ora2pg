-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_validade_senha ( nr_seq_guia_p bigint, nr_seq_segurado_p bigint, qt_dias_val_senha_p bigint, dt_solicitacao_p timestamp, ie_tipo_guia_p text, nm_usuario_p text, dt_valid_senha_p INOUT text, cd_senha_p INOUT text) AS $body$
DECLARE


dt_rescisao_w			varchar(10);
cd_senha_w			varchar(10);
dt_limite_utilizacao_w		varchar(15);
dt_rescisao_regra_w		timestamp;
nr_seq_motivo_rescisao_w	bigint;
cd_estabelecimento_w		bigint;
ie_valida_rescisao_benef_w	varchar(1)	:= 'N';
nr_seq_regra_senha_w		bigint;
ie_senha_valida_w		varchar(1)	:= 'N';
qt_tamanho_senha_w		numeric(20);


BEGIN

select	max(ie_valida_rescisao_benef)
into STRICT	ie_valida_rescisao_benef_w
from	pls_param_autorizacao;

-- Deve buscar primeiramente se existe rescisao informado no contrato do beneficiario
begin
	SELECT	PKG_DATE_FORMATERS.TO_VARCHAR(a.dt_rescisao, 'shortDate', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, WHEB_USUARIO_PCK.get_nm_usuario)
	into STRICT	dt_rescisao_w
	from	pls_segurado a
	where	nr_sequencia		= nr_seq_segurado_p;
exception
when others then
	dt_rescisao_w	:= null;
end;

begin
	select	cd_estabelecimento
	into STRICT	cd_estabelecimento_w
	from	pls_guia_plano
	where	nr_sequencia	= nr_seq_guia_p;
exception
when others then
	cd_estabelecimento_w	:= null;
end;

-- Deve buscar as informacoes de uma rescisao programada somente se nao existir data de rescisao do contrato e o parametro "OPS - Gestao de Operadoras / Parametros da OPS / Autorizacoes / Validar somente rescisao confirmada" estiver desmarcado
if (coalesce(dt_rescisao_w::text, '') = '') and (coalesce(ie_valida_rescisao_benef_w,'N') = 'N') then
	begin
		select	PKG_DATE_FORMATERS.TO_VARCHAR(dt_rescisao, 'shortDate', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, WHEB_USUARIO_PCK.get_nm_usuario) ,
			nr_seq_motivo_rescisao
		into STRICT	dt_rescisao_w,
			nr_seq_motivo_rescisao_w
		from	pls_rescisao_contrato
		where	nr_seq_segurado	= nr_seq_segurado_p
		and	coalesce(nr_seq_motivo_rejeicao::text, '') = ''
		and	dt_rescisao > dt_solicitacao_p
		and	ie_situacao	= 'A';
	exception
	when others then
		dt_rescisao_w	:= null;
	end;
	
	-- So deve utilizar a procedure pls_obter_dias_res_regra_contr no calculo da rescisao programada pois no caso da rescisao efetiva ja e feita essa validacao.
	begin
		dt_rescisao_regra_w := pls_obter_dias_res_regra_contr(nr_seq_segurado_p, nr_seq_motivo_rescisao_w, dt_rescisao_w, cd_estabelecimento_w, nm_usuario_p, dt_rescisao_regra_w);
	exception
	when others then
		dt_rescisao_regra_w	:= null;
	end;

	if (dt_rescisao_regra_w IS NOT NULL AND dt_rescisao_regra_w::text <> '') then
		dt_rescisao_w	:= PKG_DATE_FORMATERS.TO_VARCHAR(dt_rescisao_regra_w, 'shortDate', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, WHEB_USUARIO_PCK.get_nm_usuario);
	end if;
end if;

/*Tratamento para  se a senha da guia passe da data limite de utilizacao do segurado*/

begin
	select	PKG_DATE_FORMATERS.TO_VARCHAR(coalesce(dt_limite_utilizacao,dt_valid_senha_p), 'shortDate', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, WHEB_USUARIO_PCK.get_nm_usuario)
	into STRICT	dt_limite_utilizacao_w
	from	pls_segurado
	where	nr_sequencia = nr_seq_segurado_p;
exception
when others then
	dt_limite_utilizacao_w := null;
end;

if (qt_dias_val_senha_p	<> 0) then
	dt_valid_senha_p	:= to_char(dt_solicitacao_p + qt_dias_val_senha_p, 'dd/mm/rrrr');
	
	if (dt_limite_utilizacao_w IS NOT NULL AND dt_limite_utilizacao_w::text <> '') then
		if (to_date(dt_valid_senha_p, 'dd/mm/rrrr')	> to_date(dt_limite_utilizacao_w, 'dd/mm/rrrr')) then
			dt_valid_senha_p := dt_limite_utilizacao_w;		
		end if;	
	elsif (dt_rescisao_w IS NOT NULL AND dt_rescisao_w::text <> '') then
		if (to_date(dt_valid_senha_p, 'dd/mm/rrrr')	> to_date(dt_rescisao_w, 'dd/mm/rrrr')) then
			dt_valid_senha_p	:= to_char(to_date(dt_rescisao_w,'dd/mm/rrrr') - 1, 'dd/mm/rrrr');
		end if;
	end if;
elsif (qt_dias_val_senha_p	= 0) then
	dt_valid_senha_p	:= pls_obter_regra_validade_senha('A',nr_seq_guia_p,dt_solicitacao_p,nr_seq_segurado_p,ie_tipo_guia_p);
	
	if (dt_limite_utilizacao_w IS NOT NULL AND dt_limite_utilizacao_w::text <> '') then
		if (to_date(dt_valid_senha_p, 'dd/mm/rrrr')	> to_date(dt_limite_utilizacao_w, 'dd/mm/rrrr')) then
			dt_valid_senha_p := dt_limite_utilizacao_w;
		end if;	
	elsif (dt_rescisao_w IS NOT NULL AND dt_rescisao_w::text <> '') then
		if (to_date(dt_valid_senha_p, 'dd/mm/rrrr')	> to_date(dt_rescisao_w, 'dd/mm/rrrr')) then
			dt_valid_senha_p	:= to_char(to_date(dt_rescisao_w,'dd/mm/rrrr') - 1, 'dd/mm/rrrr');
		end if;
	end if;
end if;

if (pls_obter_se_controle_estab('RE') = 'S') then
	select 	max(nr_sequencia)
	into STRICT	nr_seq_regra_senha_w
	from	pls_aut_regra_gera_senha
	where	dt_inicio_vigencia		<= clock_timestamp()
	and	coalesce(dt_fim_vigencia,clock_timestamp())	>= clock_timestamp()
	and (cd_estabelecimento = coalesce(wheb_usuario_pck.get_cd_estabelecimento, cd_estabelecimento_w));
else
	select 	max(nr_sequencia)
	into STRICT	nr_seq_regra_senha_w
	from	pls_aut_regra_gera_senha
	where	dt_inicio_vigencia		<= clock_timestamp()
	and	coalesce(dt_fim_vigencia,clock_timestamp())	>= clock_timestamp();
end if;

if (nr_seq_regra_senha_w IS NOT NULL AND nr_seq_regra_senha_w::text <> '') then
	cd_senha_w := pls_gerar_senha_aut_regra(nr_seq_regra_senha_w, nr_seq_guia_p, null, nm_usuario_p, cd_senha_w);
	if (coalesce(cd_senha_w::text, '') = '') then
		select	length(nr_seq_guia_p)
		into STRICT	qt_tamanho_senha_w
		;
		
		if (qt_tamanho_senha_w	< 10) then
			cd_senha_w := substr(Obter_Numero_Randomico,1,(10 - qt_tamanho_senha_w))||nr_seq_guia_p;
		elsif (qt_tamanho_senha_w	>= 10) and (qt_tamanho_senha_w	<= 17) then
			cd_senha_w := substr(Obter_Numero_Randomico,1,3)||nr_seq_guia_p;
		elsif (qt_tamanho_senha_w	> 17) and (qt_tamanho_senha_w	< 20) then
			cd_senha_w := substr(Obter_Numero_Randomico,1,(20 - qt_tamanho_senha_w))||nr_seq_guia_p;
		else
			cd_senha_w := nr_seq_guia_p;
		end if;
	end if;
else
	select	length(nr_seq_guia_p)
	into STRICT	qt_tamanho_senha_w
	;
	
	if (qt_tamanho_senha_w	< 10) then
		cd_senha_w := substr(Obter_Numero_Randomico,1,(10 - qt_tamanho_senha_w))||nr_seq_guia_p;
	elsif (qt_tamanho_senha_w	>= 10) and (qt_tamanho_senha_w	<= 17) then
		cd_senha_w := substr(Obter_Numero_Randomico,1,3)||nr_seq_guia_p;
	elsif (qt_tamanho_senha_w	> 17) and (qt_tamanho_senha_w	< 20) then
		cd_senha_w := substr(Obter_Numero_Randomico,1,(20 - qt_tamanho_senha_w))||nr_seq_guia_p;
	else
		cd_senha_w := nr_seq_guia_p;
	end if;
end if;

cd_senha_p	:= cd_senha_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_validade_senha ( nr_seq_guia_p bigint, nr_seq_segurado_p bigint, qt_dias_val_senha_p bigint, dt_solicitacao_p timestamp, ie_tipo_guia_p text, nm_usuario_p text, dt_valid_senha_p INOUT text, cd_senha_p INOUT text) FROM PUBLIC;

