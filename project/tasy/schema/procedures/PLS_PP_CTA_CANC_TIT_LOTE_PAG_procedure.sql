-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_pp_cta_canc_tit_lote_pag ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, dt_cancelamento_p timestamp, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


ds_stack_w		pls_pp_lote_log_etapa.ds_erro%type;
nr_seq_log_etapa_w	pls_pp_lote_log_etapa.nr_sequencia%type;
dt_cancelamento_w	timestamp;
ie_concil_contab_w	pls_visible_false.ie_concil_contab%type;
ie_data_lote_prod_med_w	pls_parametro_contabil.ie_data_lote_prod_med%type;


BEGIN

begin

	-- se nao for passada a data entao os titulos sao cancelados com a data atual
	if (coalesce(dt_cancelamento_p::text, '') = '') then
	
		dt_cancelamento_w := clock_timestamp();
	else
		dt_cancelamento_w := dt_cancelamento_p;
	end if;

	select	coalesce(max(ie_data_lote_prod_med),'C')
	into STRICT	ie_data_lote_prod_med_w
	from	pls_parametro_contabil
	where	cd_estabelecimento	= cd_estabelecimento_p;

	select 	coalesce(max(ie_concil_contab), 'N')
	into STRICT	ie_concil_contab_w
	from	pls_visible_false
	where	cd_estabelecimento = cd_estabelecimento_p;

	if (ie_data_lote_prod_med_w = 'T' and ie_concil_contab_w = 'S') then
		CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_desv_canc_tit_pp(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p, dt_cancelamento_p);
	end if;

	-- faz o carregamento de parametros gerais e armazena em variaveis globais da package pls_pp_lote_pagamento_pck
	CALL pls_pp_lote_pagamento_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);

	-- verifica se pode cancelar os titulos
	CALL pls_pp_gerar_titulo_pck.valida_se_canc_titulos(nr_seq_lote_p);

	-- limpa todos os registros de geracao de um possivel lote anterior
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'L', null, nr_seq_log_etapa_w, 'T', nm_usuario_p);

	-- limpa todos os registros de geracao de um possivel lote anterior
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'L', null, nr_seq_log_etapa_w, 'CT', nm_usuario_p);

	-- cancela e desvincula os titulos a pagar gerados
	CALL pls_pp_gerar_titulo_pck.cancelar_desvinc_titulo_pagar(nr_seq_lote_p, dt_cancelamento_w, nm_usuario_p);

	-- cancela e desvincula os titulos a receber gerados
	CALL pls_pp_gerar_titulo_pck.cancelar_desvinc_titulo_rec(nr_seq_lote_p, dt_cancelamento_w, nm_usuario_p);

	-- cancela e desvincula os titulos gerados para os tributos do lote de pagamento
	CALL pls_pp_gerar_titulo_pck.cancelar_titulo_tributo_lote(nr_seq_lote_p, dt_cancelamento_w, nm_usuario_p);

	-- cancela os titulos a pagar a terceiros
	CALL pls_pp_gerar_titulo_pck.cancelar_tit_pagar_terceiro(nr_seq_lote_p, dt_cancelamento_w, nm_usuario_p);
	
	-- limpa a data de geracao dos titulos do lote
	CALL pls_pp_lote_pagamento_pck.atualiza_canc_ger_tit_pgto(nr_seq_lote_p, 'S', nm_usuario_p);
exception
when others then
	-- limpa os dados de pagamento

	-- para gerar novamente so desfazendo a geracao do anterior
	CALL pls_pp_lote_pagamento_pck.atualiza_canc_ger_tit_pgto(nr_seq_lote_p, 'N', nm_usuario_p);

	ds_stack_w := dbms_utility.format_call_stack || pls_util_pck.enter_w ||
		      dbms_utility.format_error_backtrace || pls_util_pck.enter_w ||
		      sqlerrm;
	-- grava log se deu erro
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'E', null, nr_seq_log_etapa_w, 'CT', nm_usuario_p, ds_stack_w);
end;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_cta_canc_tit_lote_pag ( nr_seq_lote_p pls_pp_lote.nr_sequencia%type, dt_cancelamento_p timestamp, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

