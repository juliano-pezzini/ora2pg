-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_proposta_simul_prosp ( nr_seq_cliente_p bigint, nr_seq_simulacao_p bigint, cd_estipulante_p text, cd_pagador_pf_p text, nr_dia_vencimento_p bigint, nr_seq_cobrancao_p text, nr_endereco_corresp_p text, cd_banco_p text, cd_agencia_p text, ie_agencia_dig_p text, cd_conta_p text, ie_conta_dig_p text, ie_envia_cobranca_p text, nr_seq_proposta_p INOUT bigint, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_classif_itens_p bigint, dt_prev_entrega_contrato_p pls_proposta_adesao.dt_prev_entrega_contrato%type) AS $body$
DECLARE


nr_seq_proposta_w		bigint;
nr_seq_pagador_w		bigint;
nr_seq_motivo_inclusao_w	bigint;
nr_seq_titular_w		bigint;
qt_proposta_w			bigint;
qt_titulares_simulacao_w	bigint;
nr_seq_benef_proposta_w		bigint;
nr_seq_canal_venda_w		bigint;
ie_tipo_contratacao_w		varchar(10);
cd_condicao_pagamento_w		bigint;
dt_inicio_vigencia_w		timestamp;
dt_dia_vencimento_w		smallint;
nr_seq_vendedor_vinculado_w	bigint;
nr_seq_segurado_indic_w		bigint;
cd_pessoa_indicacao_w		varchar(255);
nr_seq_origem_agente_w		bigint;
nr_seq_agente_motivador_w	bigint;
nr_contrato_existente_w		pls_comercial_cliente.nr_contrato_existente%type;
ie_tipo_proposta_w		pls_proposta_adesao.ie_tipo_proposta%type;
nr_seq_titular_contrato_w	pls_segurado.nr_sequencia%type;
nr_seq_solicitacao_w		pls_solicitacao_vendedor.nr_seq_solicitacao%type;
dt_vigencia_w			pls_solicitacao_comercial.dt_vigencia%type;
nr_seq_mot_inclusao_portab_w	pls_motivo_inclusao_seg.nr_sequencia%type;
nr_seq_motivo_inc_benef_w	pls_motivo_inclusao_seg.nr_sequencia%type;
ie_nova_simulacao_w		varchar(1) := 'N';
nr_seq_plano_w			pls_plano.nr_sequencia%type;
nr_seq_tabela_w			pls_tabela_preco.nr_sequencia%type;

C01 CURSOR FOR
	SELECT  a.nr_sequencia,
		a.cd_pessoa_fisica,
		a.nm_beneficiario,
		a.nr_seq_produto nr_seq_plano,
		a.nr_seq_tabela,
		a.ie_tipo_benef,
		a.nr_seq_parentesco,
		a.nr_seq_portabilidade,
        (    SELECT    x.ie_tipo_parentesco
            from    grau_parentesco x
            where    x.nr_sequencia         = a.nr_seq_parentesco) ie_tipo_parentesco
    from    pls_simulpreco_individual a
    where    a.nr_seq_simulacao    = nr_seq_simulacao_p
    order by a.ie_tipo_benef desc;

C02 CURSOR FOR
	SELECT	nr_seq_plano,
		nr_seq_tabela
	from	pls_simulacao_preco_plano
	where	nr_seq_simulacao	= nr_seq_simulacao_p
	and	ie_status = 'S';

C03 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_solic_vendedor_compl
	where	nr_seq_cliente = nr_seq_cliente_p;

C04 CURSOR(nr_seq_simul_indiv_pc	pls_simulpreco_individual.nr_sequencia%type)FOR
	SELECT	nr_seq_bonificacao,
		tx_bonificacao,
		vl_bonificacao
	from	pls_bonificacao_vinculo
	where	nr_seq_segurado_simul	= nr_seq_simul_indiv_pc
	
union all

	SELECT	a.nr_seq_bonificacao,
		a.tx_bonificacao,
		a.vl_bonificacao
	from	pls_bonificacao_vinculo a
	where	a.nr_seq_simulacao	= nr_seq_simulacao_p
	and	not exists (	select	1
				from	pls_bonificacao_vinculo x
				where	x.nr_seq_bonificacao	= a.nr_seq_bonificacao
				and	x.nr_seq_segurado_simul	= nr_seq_simul_indiv_pc);

C05 CURSOR(nr_seq_simul_indiv_pc	pls_simulpreco_individual.nr_sequencia%type) FOR
	SELECT	nr_seq_plano,
		nr_seq_tabela
	from (	SELECT	nr_seq_plano,
				nr_seq_tabela
			from	pls_sca_vinculo
			where	nr_seq_segurado_simul	= nr_seq_simul_indiv_pc
			
union all

			select	nr_seq_plano,
				nr_seq_tabela
			from	pls_sca_vinculo
			where	nr_seq_simulacao	= nr_seq_simulacao_p) alias1
	group by nr_seq_plano,
		nr_seq_tabela;

procedure inserir_produto(	nr_seq_proposta_p	pls_proposta_adesao.nr_sequencia%type,
				nr_seq_plano_p		pls_plano.nr_sequencia%type,
				nr_seq_tabela_p		pls_tabela_preco.nr_sequencia%type) is
qt_plano_proposta_w		bigint;
qt_plano_proposta_ww		bigint;
ie_tabela_liberada_proposta_w	varchar(1);
BEGIN

--Verificar se existe o plano na proposta
select	count(1)
into STRICT	qt_plano_proposta_w
from	pls_proposta_plano
where	nr_seq_proposta	= nr_seq_proposta_p
and	nr_seq_plano	= nr_seq_plano_p;

if (qt_plano_proposta_w = 0) then --Se o plano ainda nao existir na proposta de adesao
	--Verificar se o plano esta liberado para a proposta de adesao
	if (pls_obter_se_plano_proposta(nr_seq_plano_p) = 'N') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 203304, 'DS_PLANO='||substr(pls_obter_dados_produto(nr_seq_plano_p,'N'),1,225));
		--Plano DS_PLANO nao liberado para a proposta de adesao!
	end if;

	--Verificar se a tabela esta liberada para comercializacao na proposta de adesao
	select	coalesce(ie_proposta_adesao,'N')
	into STRICT	ie_tabela_liberada_proposta_w
	from	pls_tabela_preco
	where	nr_sequencia		= nr_seq_tabela_p;

	if (ie_tabela_liberada_proposta_w = 'N') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 203305, 'NM_TABELA='||substr(pls_obter_dados_tabela_preco(nr_seq_tabela_p,'N'),1,225));
		--Tabela NM_TABELA nao liberada para a proposta de adesao!
	end if;

	select	count(1)
	into STRICT	qt_plano_proposta_ww
	from	pls_proposta_plano
	where	nr_seq_proposta	= nr_seq_proposta_p;

	insert into pls_proposta_plano(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
			nr_seq_proposta,nr_seq_plano,nr_seq_tabela,ie_principal)
	values (	nextval('pls_proposta_plano_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
			nr_seq_proposta_p,nr_seq_plano_p,nr_seq_tabela_p,CASE WHEN qt_plano_proposta_ww=0 THEN 'S'  ELSE 'N' END );
end if;
end;

begin

select	max(ie_tipo_contratacao),
	max(nr_seq_solicitacao)
into STRICT	ie_tipo_contratacao_w,
	nr_seq_solicitacao_w
from	pls_simulacao_preco
where	nr_sequencia	= nr_seq_simulacao_p;

if (ie_tipo_contratacao_w = 'I') then
	select	count(1)
	into STRICT	qt_titulares_simulacao_w
	from	pls_simulpreco_individual
	where	nr_seq_simulacao	= nr_seq_simulacao_p
	and	ie_tipo_benef		= 'T';

	if (qt_titulares_simulacao_w > 1) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 203300, null); --Para a geracao da proposta de adesao deve apenas possuir 1 titular na simulacao de preco. Verifique!
	end if;
end if;

if (nr_seq_cliente_p IS NOT NULL AND nr_seq_cliente_p::text <> '') then
	begin
	select	nr_seq_vendedor_canal,
		nr_seq_vendedor_vinculado
	into STRICT	nr_seq_canal_venda_w,
		nr_seq_vendedor_vinculado_w
	from	pls_solicitacao_vendedor
	where	nr_seq_cliente	= nr_seq_cliente_p
	and	coalesce(dt_fim_vigencia::text, '') = '';
	exception
	when others then
		nr_seq_canal_venda_w		:= null;
		nr_seq_vendedor_vinculado_w	:= null;
	end;
end if;

if (nr_seq_solicitacao_w IS NOT NULL AND nr_seq_solicitacao_w::text <> '') then
	begin
		select	dt_vigencia
		into STRICT	dt_vigencia_w
		from 	pls_solicitacao_comercial
		where 	nr_sequencia = nr_seq_solicitacao_w;
	exception
	when others then
		dt_vigencia_w	:= null;
	end;
end if;
if (coalesce(dt_vigencia_w::text, '') = '') then
	dt_vigencia_w	:= clock_timestamp();
end if;
dt_inicio_vigencia_w	:= trunc(dt_vigencia_w,'Month');

select	max(cd_condicao_pagamento),
	max(nr_seq_motivo_inclusao),
	max(nr_seq_motivo_inclusao_portab)
into STRICT	cd_condicao_pagamento_w,
	nr_seq_motivo_inclusao_w,
	nr_seq_mot_inclusao_portab_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

select	max(dt_dia_vencimento)
into STRICT	dt_dia_vencimento_w
from	pls_regra_dia_vencimento
where	nr_sequencia	= nr_dia_vencimento_p;

begin
select	nr_seq_segurado_indic,
	cd_pessoa_indicacao,
	nr_seq_origem_agente,
	nr_seq_agente_motivador,
	nr_contrato_existente
into STRICT	nr_seq_segurado_indic_w,
	cd_pessoa_indicacao_w,
	nr_seq_origem_agente_w,
	nr_seq_agente_motivador_w,
	nr_contrato_existente_w
from	pls_comercial_cliente
where	nr_sequencia = nr_seq_cliente_p;
exception
when others then
	nr_seq_segurado_indic_w	:= null;
	cd_pessoa_indicacao_w	:= null;
	nr_contrato_existente_w	:= null;
end;

if (nr_contrato_existente_w IS NOT NULL AND nr_contrato_existente_w::text <> '') then
	ie_tipo_proposta_w	:= 2;
else
	ie_tipo_proposta_w	:= 1;
end if;

--Gerar proposta de adesao
insert into pls_proposta_adesao(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
		cd_estabelecimento,dt_inicio_proposta,ie_tipo_proposta,ie_tipo_contratacao,cd_estipulante,
		nr_seq_vendedor_canal,nr_seq_cliente,ie_status,nr_seq_simul_preco,nr_seq_vendedor_pf,
		nr_seq_origem_agente,nr_seq_agente_motivador, ie_tipo_processo, nr_seq_contrato,dt_prev_entrega_contrato)
values (	nextval('pls_proposta_adesao_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
		cd_estabelecimento_p,dt_vigencia_w,ie_tipo_proposta_w,ie_tipo_contratacao_w,cd_estipulante_p,
		nr_seq_canal_venda_w,nr_seq_cliente_p,'U',nr_seq_simulacao_p,nr_seq_vendedor_vinculado_w,
		nr_seq_origem_agente_w,nr_seq_agente_motivador_w, 'M', nr_contrato_existente_w,dt_prev_entrega_contrato_p)
	RETURNING nr_sequencia into nr_seq_proposta_w;

--Gerar pagador da proposta, com os dados enviados nos parametro
insert into pls_proposta_pagador(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
		nr_seq_proposta,cd_pagador,dt_inicio_vigencia,nr_seq_dia_vencimento,dt_dia_vencimento,
		nr_seq_forma_cobranca,ie_mes_vencimento,ie_endereco_boleto,cd_condicao_pagamento,cd_banco,
		cd_agencia_bancaria,ie_digito_agencia,cd_conta,ie_digito_conta, ie_envia_cobranca, nr_seq_classif_itens)
values (	nextval('pls_proposta_pagador_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
		nr_seq_proposta_w,cd_pagador_pf_p,coalesce(dt_vigencia_w,dt_inicio_vigencia_w),nr_dia_vencimento_p,dt_dia_vencimento_w,
		nr_seq_cobrancao_p,'A',nr_endereco_corresp_p,cd_condicao_pagamento_w,cd_banco_p,
		cd_agencia_p,ie_agencia_dig_p,cd_conta_p,ie_conta_dig_p, ie_envia_cobranca_p, nr_seq_classif_itens_p)
	RETURNING nr_sequencia into nr_seq_pagador_w;

for r_c02_w in C02 loop
	begin
	inserir_produto(nr_seq_proposta_w, r_c02_w.nr_seq_plano, r_c02_w.nr_seq_tabela);

	ie_nova_simulacao_w	:= 'S';
	nr_seq_plano_w		:= r_c02_w.nr_seq_plano;
	nr_seq_tabela_w		:= r_c02_w.nr_seq_tabela;
	end;
end loop; --C02

--Gerar canais de venda auxiliares
for r_c03_w in C03 loop
	begin
	insert	into	pls_benef_prop_canal_compl(	nr_sequencia,
			nr_seq_proposta,
			cd_estabelecimento,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_vendedor_canal,
			nr_seq_vendedor_vinculado )
	(	SELECT	nextval('pls_benef_prop_canal_compl_seq'),
			nr_seq_proposta_w,
			cd_estabelecimento,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_vendedor_canal,
			nr_seq_vendedor_vinculado
		from	pls_solic_vendedor_compl
		where	nr_sequencia	= r_c03_w.nr_sequencia);
	end;
end loop; --C03
for r_c01_w in C01 loop
	begin
	nr_seq_titular_contrato_w	:= null;

	if (coalesce(r_c01_w.cd_pessoa_fisica::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 203303, 'NM_BENEFICIARIO='||r_c01_w.nm_beneficiario );
		--Beneficiario r_c01_w.nm_beneficiario nao possui uma pessoa fisica vinculada. Favor verifique!
	end if;

	if (ie_nova_simulacao_w = 'N') then
		if (coalesce(r_c01_w.nr_seq_plano::text, '') = '') then --Beneficiario nm_beneficiario_p sem plano informado na simulacao. Verifique!
			CALL wheb_mensagem_pck.exibir_mensagem_abort( 203301, 'NM_BENEFICIARIO='|| r_c01_w.nm_beneficiario );
		end if;

		if (coalesce(r_c01_w.nr_seq_tabela::text, '') = '') then --Beneficiario nm_beneficiario_p sem tabela informada na simulacao. Verifique!
			CALL wheb_mensagem_pck.exibir_mensagem_abort( 203302, 'NM_BENEFICIARIO='|| r_c01_w.nm_beneficiario );
		end if;

		inserir_produto(nr_seq_proposta_w, r_c01_w.nr_seq_plano, r_c01_w.nr_seq_tabela);

		nr_seq_plano_w	:= r_c01_w.nr_seq_plano;
		nr_seq_tabela_w	:= r_c01_w.nr_seq_tabela;
	end if;

	--Verificar se o beneficiario e titular
	if (r_c01_w.ie_tipo_benef = 'D') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_titular_w
		from	pls_proposta_beneficiario
		where	nr_seq_proposta	= nr_seq_proposta_w
		and	coalesce(nr_seq_titular::text, '') = '';

		if (ie_tipo_contratacao_w = 'I') then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_titular_contrato_w
			from	pls_segurado	a,
				pls_contrato	b
			where	b.nr_sequencia	= a.nr_seq_contrato
			and	b.nr_contrato	= nr_contrato_existente_w
			and	coalesce(nr_seq_titular::text, '') = '';
		end if;
	elsif (r_c01_w.ie_tipo_benef = 'T') then
		nr_seq_titular_w	:= null;
	end if;

	if (r_c01_w.nr_seq_portabilidade IS NOT NULL AND r_c01_w.nr_seq_portabilidade::text <> '') and (nr_seq_mot_inclusao_portab_w IS NOT NULL AND nr_seq_mot_inclusao_portab_w::text <> '') then
		nr_seq_motivo_inc_benef_w	:= coalesce(nr_seq_mot_inclusao_portab_w,nr_seq_motivo_inclusao_w);
	else
		nr_seq_motivo_inc_benef_w	:= nr_seq_motivo_inclusao_w;
	end if;

	--Gerar os beneficiarios da proposta de adesao
	insert into pls_proposta_beneficiario(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
			nr_seq_proposta,cd_beneficiario,nr_seq_plano,nr_seq_tabela,nr_seq_titular,
			nr_seq_parentesco,nr_seq_pagador,nr_seq_motivo_inclusao,ie_nascido_plano,ie_taxa_inscricao,nr_seq_simul_individ, nr_seq_portabilidade,
			ie_copiar_sca_plano, nr_seq_titular_contrato,ie_tipo_parentesco)
	values (	nextval('pls_proposta_beneficiario_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
			nr_seq_proposta_w,r_c01_w.cd_pessoa_fisica,nr_seq_plano_w,nr_seq_tabela_w,nr_seq_titular_w,
			r_c01_w.nr_seq_parentesco,nr_seq_pagador_w,nr_seq_motivo_inc_benef_w,'N','S',r_c01_w.nr_sequencia, r_c01_w.nr_seq_portabilidade,
			'S', nr_seq_titular_contrato_w,r_c01_w.ie_tipo_parentesco)
		RETURNING nr_sequencia into nr_seq_benef_proposta_w;

	--Gerar as bonificacoes para os beneficiarios da proposta
	for r_c04_w in C04(r_c01_w.nr_sequencia) loop
		begin
		insert into pls_bonificacao_vinculo(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
				nr_seq_segurado_prop,nr_seq_bonificacao,tx_bonificacao,vl_bonificacao)
		values (	nextval('pls_bonificacao_vinculo_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
				nr_seq_benef_proposta_w,r_c04_w.nr_seq_bonificacao,r_c04_w.tx_bonificacao,r_c04_w.vl_bonificacao);
		end;
	end loop;

	--Gerar as SCA's para os beneficiarios da proposta
	for r_c05_w in C05(r_c01_w.nr_sequencia) loop
		begin
		insert into pls_sca_vinculo(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
				nr_seq_benef_proposta,nr_seq_plano,nr_seq_tabela)
		values (	nextval('pls_sca_vinculo_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
				nr_seq_benef_proposta_w,r_c05_w.nr_seq_plano,r_c05_w.nr_seq_tabela);
		end;
	end loop;

	CALL pls_lancamento_sca_proposta(nr_seq_benef_proposta_w,nm_usuario_p,'N');
	end;
end loop; --C01
insert	into	pls_proposta_anexo(	nr_sequencia,
		nr_seq_proposta,
		nm_usuario,
		nm_usuario_nrec,
		dt_atualizacao,
		dt_atualizacao_nrec,
		dt_anexo,
		ds_titulo,
		ds_anexo)
(	SELECT	nextval('pls_proposta_anexo_seq'),
		nr_seq_proposta_w,
		nm_usuario_p,
		nm_usuario_p,
		clock_timestamp(),
		clock_timestamp(),
		dt_atualizacao_nrec,
		ds_titulo,
		ds_arquivo
	from	pls_comercial_documento
	where	nr_seq_cliente	= nr_seq_cliente_p);

--Verifica se a proposta foi gerada, caso foi gerado, deve retornar para o parametro de saida sua sequencia gerada
select	count(1)
into STRICT	qt_proposta_w
from	pls_proposta_adesao
where	nr_sequencia	= nr_seq_proposta_w;

if (qt_proposta_w > 0) then
	update	pls_simulacao_preco
	set	nr_seq_proposta	= nr_seq_proposta_w
	where	nr_sequencia	= nr_seq_simulacao_p;

	nr_seq_proposta_p	:= nr_seq_proposta_w;
end  if;

if (nr_seq_segurado_indic_w IS NOT NULL AND nr_seq_segurado_indic_w::text <> '') or (cd_pessoa_indicacao_w IS NOT NULL AND cd_pessoa_indicacao_w::text <> '') then
	 CALL pls_proposta_benef_indicacao(nr_seq_proposta_w, null, 'P', 'N', nm_usuario_p, cd_estabelecimento_p);
end if;

update	pls_comercial_cliente
set	dt_proposta		= clock_timestamp(),
	ie_classificacao	= 'B',
	ie_fase_venda		= 'PA',
	ie_status		= 'C'
where	nr_sequencia		= nr_seq_cliente_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_proposta_simul_prosp ( nr_seq_cliente_p bigint, nr_seq_simulacao_p bigint, cd_estipulante_p text, cd_pagador_pf_p text, nr_dia_vencimento_p bigint, nr_seq_cobrancao_p text, nr_endereco_corresp_p text, cd_banco_p text, cd_agencia_p text, ie_agencia_dig_p text, cd_conta_p text, ie_conta_dig_p text, ie_envia_cobranca_p text, nr_seq_proposta_p INOUT bigint, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_classif_itens_p bigint, dt_prev_entrega_contrato_p pls_proposta_adesao.dt_prev_entrega_contrato%type) FROM PUBLIC;

