-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_glosar_conta_analise ( nr_seq_conta_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_ocorrencia_p bigint, ds_observacao_p text, nr_seq_grupo_atual_p bigint, nr_seq_analise_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_motivo_lib_w bigint, --Parecer 
 nr_glosa_oc_criada_p INOUT bigint, ie_commitar_p text, ie_lib_demais_glosas_p text ) AS $body$
DECLARE

 
ie_tipo_item_w				varchar(1);
cd_glosa_oc_w				varchar(10);
nr_seq_conta_w				bigint;
vl_calculado_w				double precision;
qt_apresentado_w			bigint;
nr_seq_segurado_w			bigint;
nr_seq_glosa_vinculada_w	bigint;		
nr_seq_ocorrencia_benef_w	bigint;
nr_seq_glosa_w				bigint;
nr_seq_conta_proc_w			bigint;
nr_seq_conta_mat_w			bigint;
qt_glosada_w				double precision := 0;
vl_glosado_w				double precision := 0;
vl_total_apresentado_w		double precision;
nr_seq_partic_proc_w		bigint;
nr_seq_item_w				bigint;
nr_seq_mot_liberacao_w		bigint;
ie_tipo_motivo_w			varchar(1);
ds_motivo_liberacao_w		varchar(255);
nr_seq_item_glosa_oc_w		bigint;
nr_seq_proc_partic_w		bigint;
nr_seq_ocorrencia_w			bigint;
nr_seq_motivo_glosa_w		bigint;
nr_seq_ocor_w				bigint;
ie_tipo_glosa_oc_w			varchar(1);
ie_tipo_item_ww				varchar(1);
ie_tipo_historico_w			bigint;
ds_tipo_motivo_w			varchar(255);
ds_observacao_w				varchar(4000);
ie_situacao_w				varchar(1);
nr_seq_analise_pos_w		bigint;
dt_atualizacao_nrec_w		timestamp;
ds_parecer_w				varchar(4000);
nr_seq_motivo_w				bigint;
nm_usuario_nrec_w			varchar(20);
ie_status_w					varchar(1);
nr_seq_conta_ww				bigint;
nr_seq_conta_mat_ww			bigint;
nr_seq_conta_proc_ww		bigint;
nr_seq_partic_proc_ww		bigint;
vl_glosa_w					double precision;
qt_glosa_w					bigint;
ie_tipo_motivo_ww			varchar(1);
ie_origem_analise_w			bigint;
vl_liberado_w				double precision;

C01 CURSOR FOR 
	SELECT	ie_tipo,	 
			nr_sequencia,		 
			ie_status, 
			ie_situacao, 
			nr_seq_conta, 
			nr_seq_conta_mat, 
			nr_seq_conta_proc, 
			nr_seq_proc_partic, 
			vl_glosa, 
			qt_glosa		 
	from	pls_analise_conta_item 
	where	nr_seq_conta 				= nr_seq_conta_p 
	and (coalesce(nr_seq_conta_proc,0) 	= 0) 
	and (coalesce(nr_seq_conta_mat,0)  	= 0) 
	and (coalesce(nr_seq_proc_partic,0) 	= 0) 
	and		ie_status not in ('I', 'E', 'C') 
	and		nr_sequencia <> nr_glosa_oc_criada_p 
	order by 1;
	

BEGIN 
 
if (coalesce(nr_seq_motivo_glosa_p,0) > 0) then 
	/*Obter dados da glosa*/
 
	begin 
	select	cd_motivo_tiss, 
			'G' 
	into STRICT	cd_glosa_oc_w, 
			ie_tipo_item_w 
	from	tiss_motivo_glosa 
	where	nr_sequencia	= nr_seq_motivo_glosa_p;
	exception 
	when others then 
		cd_glosa_oc_w	:= 0;
	end;
	 
elsif (coalesce(nr_seq_ocorrencia_p,0) > 0) then 
 
	begin 
	select	cd_ocorrencia, 
			nr_seq_motivo_glosa, 
			'O' 
	into STRICT	cd_glosa_oc_w, 
			nr_seq_glosa_vinculada_w, 
			ie_tipo_item_w 
	from	pls_ocorrencia 
	where	nr_sequencia = nr_seq_ocorrencia_p;
	exception 
	when others then 
		cd_glosa_oc_w	:= 0;
	end;	
	 
end if;
 
select	max(nr_seq_segurado) 
into STRICT	nr_seq_segurado_w 
from	pls_Conta 
where	nr_sequencia = nr_seq_conta_p;
 
if (coalesce(nr_seq_motivo_glosa_p,0) > 0) then 
	CALL pls_gravar_conta_glosa(	cd_glosa_oc_w, nr_seq_conta_p, null, 
							null, 'S', 'Glosa inserida pelo auditor '||obter_nome_usuario(nm_usuario_p), 
							nm_usuario_p, 'A', 'SCE', 
							null, cd_estabelecimento_p, null, null);
				 
	select	max(nr_sequencia) 
	into STRICT	nr_seq_glosa_w 
	from	pls_conta_glosa 
	where	nr_seq_conta				= nr_seq_conta_p 
	and		coalesce(nr_seq_conta_proc,0)  	= 0 
	and	 	coalesce(nr_seq_conta_mat,0) 	= 0 
	and	 	coalesce(nr_seq_proc_partic,0)	= 0;
 
elsif (coalesce(nr_seq_ocorrencia_p,0) > 0) then 
	nr_seq_ocorrencia_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_w, nr_seq_ocorrencia_p, null, null, nr_seq_conta_p, null, null, null, nm_usuario_p, 'Ocorrência inserida pelo auditor '||obter_nome_usuario(nm_usuario_p), nr_seq_glosa_vinculada_w, 3, cd_estabelecimento_p, 'N', null, nr_seq_ocorrencia_benef_w, null, null, null, null);
end if;
 
nr_glosa_oc_criada_p	 := pls_atual_analise_conta_item(	null, nr_seq_conta_p, null, null, null, nr_seq_glosa_w, nr_seq_ocorrencia_benef_w, 0, 0, cd_estabelecimento_p, nm_usuario_p, nr_seq_analise_p, nr_glosa_oc_criada_p	);
 
select 	CASE WHEN ie_tipo_item_w='R' THEN nr_seq_partic_proc_w WHEN ie_tipo_item_w='P' THEN  nr_seq_conta_proc_w WHEN ie_tipo_item_w='M' THEN  nr_seq_conta_mat_w END  
into STRICT 	nr_seq_item_w
;
 
CALL pls_inserir_hist_analise(nr_seq_conta_p, nr_seq_analise_p, 3, 
						 null, 'A', nr_seq_ocorrencia_benef_w, 
						 nr_seq_glosa_w, ds_observacao_p, nr_seq_grupo_atual_p, 
						 nm_usuario_p, cd_estabelecimento_p);
			 
 
if (coalesce(ie_lib_demais_glosas_p,'S') = 'S') then 
 
	/*Obter o motivo de liberação padrão para liberação manual.*/
 
	begin 
	select	nr_sequencia, 
			ie_tipo_motivo, 
			ds_motivo_liberacao 
	into STRICT	nr_seq_mot_liberacao_w, 
			ie_tipo_motivo_w, 
			ds_motivo_liberacao_w 
	from	pls_mot_lib_analise_conta 
	where	nr_sequencia = 	(SELECT	max(nr_sequencia) 
							 from	pls_mot_lib_analise_conta 
							 where	coalesce(ie_glosa_manual,'N') = 'S');
	exception 
	when others then 
		nr_seq_mot_liberacao_w	:= null;
		ie_tipo_motivo_w	:= null;
	end;
 
	if (ie_tipo_motivo_w = 'N') then 
		ds_tipo_motivo_w	:= 'Liberação desfavorável';
	else 
		ds_tipo_motivo_w	:= 'Liberação favorável';
	end if;
 
	/*Se o motivo de liberação manual não existe, o processo não pode continuar. */
 
	if (coalesce(nr_seq_mot_liberacao_w,0) = 0) then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(176126);
		--'Não existe motivo padrão de liberação de glosas/ocorrências para glosa manual. O motivo de liberação citado, é o campo "Glosa manual", dos "Cadastros gerais / Plano de Saúde / Contas médicas / Motivos de liberação da análise da conta"' 
	end if;
 
	open C01;
	loop 
	fetch C01 into 
			ie_tipo_glosa_oc_w, 
			nr_seq_item_glosa_oc_w,	 
			ie_status_w, 
			ie_situacao_w,	 
			nr_seq_conta_ww, 
			nr_seq_conta_mat_ww, 
			nr_seq_conta_proc_ww, 
			nr_seq_partic_proc_ww, 
			vl_glosa_w, 
			qt_glosa_w;	
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
 
		/*Apagar o log anterior*/
 
		delete	FROM pls_analise_conta_item_log 
		where	nr_seq_analise_item 	= nr_seq_item_glosa_oc_w 
		and		ie_tipo_log				= 'G';
		 
		begin 
		select	dt_atualizacao_nrec, 
				ds_parecer, 
				nr_seq_motivo, 
				nm_usuario_nrec, 
				ie_tipo_motivo 
		into STRICT	dt_atualizacao_nrec_w, 
				ds_parecer_w, 
				nr_seq_motivo_w, 
				nm_usuario_nrec_w, 
				ie_tipo_motivo_ww 
		from	pls_analise_parecer_item 
		where	nr_seq_item = nr_seq_item_glosa_oc_w;
		exception 
		when others then 
				dt_atualizacao_nrec_w	:= null;
				ds_parecer_w			:= null;
				nr_seq_motivo_w			:= null;
		end;	
		 
		/*Cria o log do item (será utilizado no desfazer)*/
 
		insert into pls_analise_conta_item_log(	nr_sequencia, nr_seq_analise_item, dt_atualizacao, 
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, 
				dt_log, ie_status, ie_situacao, 
				nr_seq_motivo_liberacao, ds_obsevacao_anterior, nm_usuario_liberacao, 
				dt_liberacao_anterior, vl_glosa, qt_glosa, 
				ie_tipo_log	) 
		values (	nextval('pls_analise_conta_item_log_seq'), nr_seq_item_glosa_oc_w, clock_timestamp(), 
				nm_usuario_p, clock_timestamp(), nm_usuario_p,			 
				clock_timestamp(), ie_status_w, ie_situacao_w,			 
				nr_seq_motivo_w, ds_parecer_w, nm_usuario_nrec_w, 
				dt_atualizacao_nrec_w, vl_glosa_w, qt_glosa_w, 
				'G'		);
		 
		/*Desfeita qualquer liberação que pode ter ocorrido préviamente*/
 
		/*Apagar parecer*/
 
		delete	FROM pls_analise_parecer_item 
		where	nr_seq_item	= nr_seq_item_glosa_oc_w;	
 
		/*Atualizar o item para pendente.*/
 
		update	pls_analise_conta_item 
		set		ie_status		= 'P', 
				qt_glosa		= 0, 
				vl_glosa		= 0, 
				ie_consistencia = 'N', 
				ie_situacao		= 'A' 
		where	nr_sequencia	= nr_seq_item_glosa_oc_w 
		and	ie_status <> 'I';	
		 
		select	nr_seq_ocorrencia, 
				nr_seq_glosa 
		into STRICT	nr_seq_ocorrencia_w, 
				nr_seq_glosa_w 
		from	pls_analise_conta_item 
		where 	nr_sequencia = nr_seq_item_glosa_oc_w;
		 
		/*Obtem o tipo de histórico se é uma liberação de glosa ou de ocorrencia*/
 
		select	CASE WHEN ie_tipo_glosa_oc_w='G' THEN  5 WHEN ie_tipo_glosa_oc_w='O' THEN  6 END  
		into STRICT	ie_tipo_historico_w 
		;
				 
		/*Atualizado a glosa / ocorrencia*/
 
		update	pls_analise_conta_item 
		set		ie_status 				= CASE WHEN ie_tipo_motivo_w='S' THEN  'A'  ELSE 'N' END , 
				nm_usuario				= nm_usuario_p, 
				dt_atualizacao 			= clock_timestamp(), 
				ie_consistencia 		= 'N', 
				ie_principal			= 'N', 
				qt_glosa				= 0, 
				vl_glosa				= 0, 
				ie_situacao				= CASE WHEN ie_tipo_motivo_w='N' THEN  'A' WHEN ie_tipo_motivo_w='L' THEN  'I' WHEN ie_tipo_motivo_w='S' THEN  'I' END , 
				nr_seq_glosa_manual 	= nr_glosa_oc_criada_p 
		where	nr_sequencia			= nr_seq_item_glosa_oc_w 
		and	ie_status	<> 'I';
 
		/*Criado o parecer*/
 
		insert into pls_analise_parecer_item(nr_sequencia, nr_seq_item, nr_seq_motivo, 
				 dt_atualizacao, nm_usuario, dt_atualizacao_nrec, 
				 nm_usuario_nrec, ds_parecer, ie_tipo_motivo)			 
		values (	 nextval('pls_analise_parecer_item_seq'), nr_seq_item_glosa_oc_w, nr_seq_mot_liberacao_w, 
				 clock_timestamp(), nm_usuario_p, clock_timestamp(), 
				 nm_usuario_p, 'Parecer criado automáticamente pelo sistema na glosa/ocorrência manual.', ie_tipo_motivo_w);		
		 
		ds_observacao_w := 	'Tipo de liberação: '||chr(13)||chr(10)|| 
							chr(9)||ds_tipo_motivo_w||chr(13)||chr(10)||chr(13)||chr(10)|| 
							'Motivo de liberação:'||chr(13)||chr(10)|| 
							chr(9)||ds_motivo_liberacao_w||chr(13)||chr(10)||chr(13)||chr(10)|| 
							'Observação/Parecer: '||chr(13)||chr(10)|| 
							chr(9)||'Parecer criado automáticamente pelo sistema na glosa/ocorrência manual.';
					 
		/*Adiciona o histórico da ação*/
 
		CALL pls_inserir_hist_analise(nr_seq_conta_w, nr_seq_analise_p, ie_tipo_historico_w, 
					 coalesce(nr_seq_ocorrencia_w, nr_seq_glosa_w), ie_tipo_item_ww, nr_seq_ocorrencia_w, 
					 nr_seq_glosa_w, ds_observacao_w, nr_seq_grupo_atual_p, 
					 nm_usuario_p, cd_estabelecimento_p);
 
		end;
	end loop;
	close C01;
 
end if;
 
CALL pls_analise_status_item(	nr_seq_conta_p, null, null, 
							nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p, 
							null	);
							 
CALL pls_analise_status_pgto(	nr_seq_conta_p, null, null,				 
							nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p, 
							null,null,null,null);
 
/*incluído a atualização da análise, para que os valores de participante sejam atualizados após a pls_análise_status_pgto Diogo*/
				 
select	max(ie_origem_analise) 
into STRICT	ie_origem_analise_w 
from	pls_analise_conta 
where	nr_sequencia = nr_seq_analise_p;
 
if (ie_origem_analise_w = 3) then 
	CALL pls_atual_w_resumo_conta_ptu(	nr_seq_conta_p, null, null, 
					null, nr_seq_analise_p, nm_usuario_p	);
 
else 
	CALL pls_atualiza_w_resumo_conta(	nr_seq_conta_p, null, null, 
					null, nr_seq_analise_p, nm_usuario_p	);
end if;	
/*Se o item possui analises de pós deve ser atualizado o mesmo*/
 
select	max(nr_sequencia) 
into STRICT	nr_seq_analise_pos_w 
from	pls_analise_conta 
where	nr_seq_analise_ref = nr_seq_analise_p;	
 
if (coalesce(nr_seq_analise_pos_w,0) > 0) then 
 
	CALL pls_analise_status_fat(		nr_seq_conta_w, null, null, 
								nr_seq_analise_pos_w, cd_estabelecimento_p, nm_usuario_p	);						
	 
	CALL pls_analise_status_pgto_pos(	nr_seq_conta_w, null, null, 
									nr_seq_analise_pos_w, cd_estabelecimento_p, nm_usuario_p	);	
	 
end if;
 
/*Para o caso de já se criar a glosa com alguma liberação.*/
 
if (coalesce(nr_seq_motivo_lib_w,0) > 0) then 
					 
	CALL pls_conta_liberar_glosa_oc(	nr_glosa_oc_criada_p, nr_seq_analise_p, nr_seq_motivo_lib_w, 
					ds_observacao_p, nm_usuario_p, cd_estabelecimento_p, nr_seq_grupo_atual_p, 
					'N', 'N','N');				
end if;
 
if (coalesce(ie_commitar_p,'S') = 'S') then 
	commit;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_glosar_conta_analise ( nr_seq_conta_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_ocorrencia_p bigint, ds_observacao_p text, nr_seq_grupo_atual_p bigint, nr_seq_analise_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_motivo_lib_w bigint, nr_glosa_oc_criada_p INOUT bigint, ie_commitar_p text, ie_lib_demais_glosas_p text ) FROM PUBLIC;

