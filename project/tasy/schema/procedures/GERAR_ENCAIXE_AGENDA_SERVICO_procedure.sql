-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_encaixe_agenda_servico (cd_agenda_p bigint, cd_pessoa_fisica_p text, dt_inicio_p timestamp, qt_dias_p bigint, nm_usuario_p text, cd_classificacao_p text, cd_convenio_p bigint, ie_seq_dia_p text, cd_medico_p text, nm_paciente_p text, ds_observacao_p text, nr_sessao_total_p bigint, nr_sessao_atual_p bigint, ds_erro_p INOUT text, cd_estabelecimento_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, cd_medico_solic_p text, cd_cid_p text, nr_seq_agenda_cir_p bigint, ds_dias_p text, ie_tipo_atendimento_p bigint default null, ie_carater_inter_sus_p text default null, nr_seq_encaixe_p INOUT text DEFAULT NULL, nr_seq_segurado_p bigint DEFAULT NULL, cd_categoria_p text DEFAULT NULL, cd_usuario_convenio_p text DEFAULT NULL, dt_validade_carteira_p timestamp DEFAULT NULL, cd_plano_p text DEFAULT NULL, cd_setor_atendimento_p bigint default null, dt_desejada_atendimento_p text default null) AS $body$
DECLARE


		
qt_dia_atual_w				bigint		:= 0;
nr_seq_hora_w				bigint  	:= 0;
nr_sequencia_w				bigint  	:= 0;
hr_atual_w					timestamp;
cd_classificacao_w			varchar(05)		:= 'E';
cd_turno_w					varchar(01);
ie_dia_semana_w				bigint;
nr_seq_turno_w				bigint;
cd_tipo_agenda_w			bigint;
qt_turno_dia_w				bigint;
cont						bigint		:= 0;
qt_dias_w					bigint;
ie_gerar_solic_pront_w		varchar(1);
ie_gerar_solic_pront_gp_w	varchar(1);
ie_bloqueio_w				varchar(1);
ds_erro_w					varchar(255);
ds_erro_w2					varchar(255);
ds_erro_w3					varchar(255);
ds_erro_w4					varchar(255);
ds_consistencia_w			varchar(255);
ds_erro_bloqueio_w			varchar(255);
ds_erro_regra_w				varchar(255);
ds_erro_duplicado_w			varchar(255);
ds_erro_regra_conv_w		varchar(255);
ie_encaixe_bloq_w			varchar(1);
nr_sessao_atual_w			smallint;
ie_considera_classif_w		varchar(1);
qt_permitida_regra_w		bigint;
hr_inicial_regra_w			timestamp;
hr_final_regra_w			timestamp;
qt_encaixe_existe_w			bigint;
ie_permite_w				varchar(1)	:= 'S';	
ie_duplicado_w				varchar(1)	:= 'N';	
ds_enter_w                  varchar(10) := chr(13) || chr(10);
qt_agendado_w				bigint;
ie_permite_agendar_dupl_w	varchar(1);
nr_seq_regra_encaixe_w		bigint;
cd_setor_atendimento_w		bigint;
nr_controle_secao_w			bigint;
qt_proc_w					bigint;
cd_convenio_regra_w			integer;
hr_inicial_w				timestamp;
hr_final_w					timestamp;
ie_busca_inf_ult_agend_w	varchar(1);
nr_telefone_w				varchar(80);
nr_doc_convenio_w			varchar(20);
cd_senha_w					varchar(20);
dt_valida_carteira_w		timestamp;
cd_usuario_convenio_w		varchar(30);
cd_setor_atendimento_ww		bigint;
cd_convenio_w				integer;
cd_convenio_ww				convenio.cd_convenio%type;
cd_categoria_w				varchar(10);
cd_tipo_acomodacao_w		smallint;
nr_seq_agendamento_w		agenda_consulta.nr_sequencia%type;
ds_dias_w					varchar(255);
dt_dia_semana_w				smallint;
ie_gerar_dia_w				varchar(1);
ds_erro_ww					varchar(255);
qt_turno_final_semana_w		bigint;
nr_seq_ref_w			agenda_consulta.nr_sequencia%type;
ie_utiliza_cont_w	varchar(1);
cd_setor_insert_w	setor_atendimento.cd_setor_atendimento%type;
nr_seq_bloq_geral_w			agenda_bloqueio_geral.nr_sequencia%type;	
ie_ver_agenda_estab_w varchar(1);	
				

BEGIN

select	count(*)
into STRICT	qt_proc_w
from	procedimento
where	cd_procedimento = cd_procedimento_p
and	ie_origem_proced = ie_origem_proced_p;

if (qt_proc_w = 0) and (coalesce(cd_procedimento_p,0) > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(280190);
end if;

ie_considera_classif_w := obter_param_usuario(866, 68, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_considera_classif_w);

ie_permite_agendar_dupl_w := obter_param_usuario(866, 91, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_permite_agendar_dupl_w);

ie_utiliza_cont_w := obter_param_usuario(866, 104, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_utiliza_cont_w);

ie_busca_inf_ult_agend_w := obter_param_usuario(866, 228, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_busca_inf_ult_agend_w);

ie_ver_agenda_estab_w := obter_param_usuario(866, 22, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_ver_agenda_estab_w);

nr_sessao_atual_w	:= nr_sessao_atual_p;

select	cd_tipo_agenda,
		coalesce(ie_gerar_solic_pront,'S'),
		cd_setor_agenda,
		coalesce(ie_gerar_solic_pront_gp, 'S')
into STRICT	cd_tipo_agenda_w,
		ie_gerar_solic_pront_w,
		cd_setor_atendimento_w,
		ie_gerar_solic_pront_gp_w
from	agenda
where	cd_agenda	= cd_agenda_p;

qt_dia_atual_w	:= 0;
hr_atual_w		:= dt_inicio_p;
qt_dias_w		:= qt_dias_p;

select	pkg_date_utils.get_WeekDay(dt_inicio_p)
into STRICT	ie_dia_semana_w
;

select	coalesce(max(nr_sequencia),0)
into STRICT	nr_seq_turno_w
from	agenda_turno
where	cd_agenda	= cd_agenda_p
and		((ie_dia_semana	= ie_dia_semana_w)	or (ie_dia_semana	= 9))
and		to_date('01/01/1900 ' || to_char(dt_inicio_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') between
		to_date('01/01/1900 ' || to_char(hr_inicial, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') and
		to_date('01/01/1900 ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss');

if (coalesce(cd_classificacao_p::text, '') = '') then
	select coalesce(max(cd_classificacao), 'E')
	into STRICT	cd_classificacao_w
	from 	agenda_turno_classif
	where	nr_seq_turno	= nr_seq_turno_w;
else
	cd_classificacao_w	:= cd_classificacao_p;
end if;

if (ie_utiliza_cont_w = 'S') then

	select	coalesce(max(nr_sequencia), 0)
	into STRICT 	nr_seq_ref_w
	from	agenda_consulta
	where	cd_agenda		= cd_agenda_p
	and	ie_status_agenda not in ('B','C')
	and	((cd_pessoa_fisica = cd_pessoa_fisica_p) or (nm_paciente = nm_paciente_p))
	and	(((cd_procedimento  = cd_procedimento_p) or (coalesce(cd_procedimento_p::text, '') = ''))
	or ((nr_seq_proc_interno = nr_seq_proc_interno_p) or (coalesce(nr_seq_proc_interno_p::text, '') = '')));

	if (nr_seq_ref_w <> 0) then
		select 	max(nr_controle_secao)
		into STRICT	nr_controle_secao_w
		from 	agenda_consulta
		where 	nr_sequencia = nr_seq_ref_w;
	end if;
end if;	

while(qt_dia_atual_w	< qt_dias_w) loop
	begin

	cont	:= cont + 1;
	ie_permite_w	:= 'S';
	ie_duplicado_w	:= 'N';
	ie_gerar_dia_w := 'S';
	
	if (ds_dias_p IS NOT NULL AND ds_dias_p::text <> '') then
		select	substr(ds_dias_p,1,length(ds_dias_p) -2)
		into STRICT	ds_dias_w
		;
		
		/*Consiste se existe turno cadastrado para os finais de semana.*/

		select	count(*)
		into STRICT	qt_turno_final_semana_w
		from	agenda_turno
		where	cd_agenda	= cd_agenda_p
		and		((ie_dia_semana	= 7 and Obter_Se_Contido(7,ds_dias_w) = 'S')
		or (ie_dia_semana	= 1 and Obter_Se_Contido(1,ds_dias_w) = 'S'));
		
		/* obter dia semana */

		select	obter_cod_dia_semana(hr_atual_w)
		into STRICT	dt_dia_semana_w
		;
			
		ie_gerar_dia_w	:=  obter_se_contido(dt_dia_semana_w,ds_dias_w);
			
	end if;	
	
	select	count(*)
	into STRICT	qt_turno_dia_w
	from	agenda_turno
	where	cd_agenda	= cd_agenda_p
	and		ie_dia_semana	= pkg_date_utils.get_WeekDay(hr_atual_w)
	and		pkg_date_utils.is_business_day(hr_atual_w) = 0;			
	
	
	if (ds_dias_w IS NOT NULL AND ds_dias_w::text <> '') and (qt_turno_final_semana_w = 0) and (Obter_se_contido_lista('2,3,4,5,6',ds_dias_w) = 'N') then
		goto final;
	end if;
					
	qt_dia_atual_w	:= qt_dia_atual_w + 1;

	
	
	if	((pkg_date_utils.is_business_day(hr_atual_w) = 1) or (qt_turno_dia_w > 0))  and (ie_gerar_dia_w = 'S') then
		begin
		
		
		select	coalesce(max(nr_seq_hora),0) + 1
		into STRICT	nr_seq_hora_w
		from	agenda_consulta
		where	cd_agenda	= cd_agenda_p
		and	dt_agenda	= hr_atual_w;

		select	nextval('agenda_consulta_seq')
		into STRICT 	nr_sequencia_w
		;

		cd_turno_w		:= 0;

		if ((to_char(hr_atual_w,'hh24'))::numeric  > 12) then
			cd_turno_w	:= 1;
		end if;

		/* leitura do par?metro 19 da agenda de servi?os - ivan em 02/06/2007 os58624 */

		ie_encaixe_bloq_w := obter_param_usuario(866, 19, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_encaixe_bloq_w);


		/* ivan em 02/06/2007 os58624 */

		if (ie_encaixe_bloq_w = 'N') then
			/* rafael em 25/05/2007 os57425 */

			if (cd_tipo_agenda_w = 5) then
				if (ie_considera_classif_w	= 'N') then
					ie_bloqueio_w := consistir_bloqueio_agenda(cd_agenda_p, hr_atual_w, obter_cod_dia_semana(hr_atual_w), ie_bloqueio_w);
				else
					ie_bloqueio_w := consistir_bloq_agenda_servico(cd_agenda_p, hr_atual_w, obter_cod_dia_semana(hr_atual_w), cd_classificacao_p, ie_bloqueio_w);
				end if;
				if (ie_bloqueio_w = 'N') then
					select	consistir_agenda_hor_bloq_serv(cd_agenda_p, hr_atual_w)
					into STRICT	ie_bloqueio_w
					;
				end if;
			else
				ie_bloqueio_w := 'N';
			end if;
		else
			ie_bloqueio_w := 'N';
		end if;
		
		select	count(*)
		into STRICT	qt_agendado_w
		from	agenda_consulta
		where	cd_agenda		= cd_agenda_p
		and	trunc(dt_agenda,'dd')   = trunc(hr_atual_w)
		and	cd_pessoa_fisica	= cd_pessoa_fisica_p
		and	ie_status_agenda 	<> 'C';

		if (ie_bloqueio_w = 'N') then
		
			if (nr_sessao_atual_w > nr_sessao_total_p) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(280191,'NR_SESSAO_ATUAL='|| nr_sessao_atual_w ||';NR_SESSAO_TOTAL='|| nr_sessao_total_p);
			end if;

      
      SELECT * FROM validar_regra_encaixe_agenda(cd_tipo_agenda_p => 5, dt_encaixe_p => null, hr_encaixe_p => null, dt_hr_encaixe_p => hr_atual_w, cd_agenda_p => cd_agenda_p, cd_convenio_p => cd_convenio_p, ie_permite_p => ie_permite_w, ds_erro_p => ds_erro_w2) INTO STRICT ie_permite_p => ie_permite_w, ds_erro_p => ds_erro_w2;
			
				
			if (qt_agendado_w > 0) and (ie_permite_agendar_dupl_w = 'N') then
				begin
				ie_duplicado_w	:= 'S';
				ds_erro_w3	:= substr((ds_erro_w3 || to_char(hr_atual_w,'dd/mm hh24:mi') || ', '), 1, 255);
				end;
			end if;						
			
			if (ie_utiliza_cont_w = 'S') and (coalesce(nr_controle_secao_w, 0) = 0) then
				nr_controle_secao_w	:= obter_controle_secao_agserv(coalesce(nr_seq_ref_w, nr_sequencia_w));
			end if;
			
			ds_consistencia_w := Consiste_lib_conv_ageserv(cd_agenda_p, cd_convenio_p, hr_atual_w, 'S', null, ds_consistencia_w);
			if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
				ie_permite_w	:= 'N';
				ds_erro_w4	:= substr((ds_erro_w4 || to_char(hr_atual_w,'dd/mm hh24:mi') || ', '), 1, 255);
			end if;	
			
			if (ie_ver_agenda_estab_w = 'S') then
			
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_agendamento_w
				from	agenda_consulta a,
						agenda b
				where	a.cd_agenda		= b.cd_agenda
				and	b.cd_tipo_agenda	= 5
				and	b.cd_estabelecimento	= cd_estabelecimento_p
				and	b.ie_situacao		= 'A'	
				and	a.nr_sequencia		= (	SELECT	max(x.nr_sequencia)
											from	agenda_consulta x,
													agenda z
											where	x.cd_agenda		= z.cd_agenda
											and		z.cd_tipo_agenda	= 5
											and		z.cd_estabelecimento	= cd_estabelecimento_p
											and		x.cd_pessoa_fisica	= cd_pessoa_fisica_p
											and		x.dt_agenda		< dt_inicio_p
											and		((ie_busca_inf_ult_agend_w = 'S' AND x.ie_status_agenda = 'E')
												or	((ie_busca_inf_ult_agend_w = 'A') and (z.cd_agenda = cd_agenda_p) and (x.ie_status_agenda = 'E'))
												or (ie_busca_inf_ult_agend_w = 'I')));
			else
											
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_agendamento_w
				from	agenda_consulta a,
						agenda b
				where	a.cd_agenda		= b.cd_agenda
				and	b.cd_tipo_agenda	= 5
				and	b.cd_estabelecimento	in ( SELECT  x.cd_estabelecimento       
												  from    usuario_estabelecimento x 
												  where   x.nm_usuario_param = nm_usuario_p
												  
union
                             
												  SELECT  x.cd_estabelecimento      
												  from    usuario x  
												  where   x.nm_usuario = nm_usuario_p )
				and	b.ie_situacao		= 'A'	
				and	a.nr_sequencia		= (	select	max(x.nr_sequencia)
											from	agenda_consulta x,
													agenda z
											where	x.cd_agenda		= z.cd_agenda
											and		z.cd_tipo_agenda	= 5
											and		z.cd_estabelecimento	in ( select  x.cd_estabelecimento       
																				  from    usuario_estabelecimento x 
																				  where   x.nm_usuario_param = nm_usuario_p
																				  
union
                             
																				  select  x.cd_estabelecimento      
																				  from    usuario x  
																				  where   x.nm_usuario = nm_usuario_p )
											and		x.cd_pessoa_fisica	= cd_pessoa_fisica_p
											and		x.dt_agenda		< dt_inicio_p
											and		((ie_busca_inf_ult_agend_w = 'S' AND x.ie_status_agenda = 'E')
												or	((ie_busca_inf_ult_agend_w = 'A') and (z.cd_agenda = cd_agenda_p) and (x.ie_status_agenda = 'E'))
												or (ie_busca_inf_ult_agend_w = 'I')));
												
			end if;
		
			if (ie_busca_inf_ult_agend_w <> 'N') and (nr_seq_agendamento_w IS NOT NULL AND nr_seq_agendamento_w::text <> '')	then
			
				select	a.nr_telefone,
						a.nr_doc_convenio,
						a.cd_senha,
						a.dt_validade_carteira,
						a.cd_usuario_convenio,
						a.cd_setor_atendimento,
						coalesce(a.cd_convenio, cd_convenio_p),
						a.cd_categoria,
						a.cd_tipo_acomodacao	
				into STRICT	nr_telefone_w,
						nr_doc_convenio_w,
						cd_senha_w,
						dt_valida_carteira_w,
						cd_usuario_convenio_w,
						cd_setor_atendimento_ww,
						cd_convenio_w,
						cd_categoria_w,
						cd_tipo_acomodacao_w
				from	agenda_consulta a,
						agenda b
				where	a.cd_agenda		= b.cd_agenda
				and	a.nr_sequencia = nr_seq_agendamento_w;							
			end if;

			if (ie_busca_inf_ult_agend_w = 'S') then
				cd_setor_insert_w := cd_setor_atendimento_ww;
			else
				cd_setor_insert_w := coalesce(cd_setor_atendimento_p,cd_setor_atendimento_w);
			end if;
			nr_seq_bloq_geral_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
						cd_agenda_p,
						cd_classificacao_w,
						null, --nr_seq_classif_agenda_p
						null, --cd_espec_agendamento_p
						cd_setor_insert_w,
						nr_seq_proc_interno_p,
						cd_procedimento_p,
						ie_origem_proced_p,
						cd_medico_p,
						hr_atual_w,
						'N',
						'N');
			if (nr_seq_bloq_geral_w > 0) then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(obter_mensagem_bloq_geral_age(nr_seq_bloq_geral_w));
			end if;

			if (ie_permite_w = 'S') and (ie_duplicado_w = 'N') then
				cd_convenio_ww := cd_convenio_p;
				if (coalesce(nr_seq_segurado_p, 0) <> 0) then
					cd_categoria_w := cd_categoria_p;
					cd_usuario_convenio_w := cd_usuario_convenio_p;
					dt_valida_carteira_w := dt_validade_carteira_p;
				elsif (ie_busca_inf_ult_agend_w = 'S') then
					cd_convenio_ww := cd_convenio_w;				
				end if;
				
				insert into agenda_consulta(
						nr_sequencia,
						cd_agenda,
						dt_agenda,
						nr_minuto_duracao,
						cd_pessoa_fisica,
						nm_paciente,
						dt_nascimento_pac,
						qt_idade_pac,
						ie_status_agenda,
						ie_classif_agenda,
						dt_atualizacao,
						nm_usuario,
						cd_turno,
						nr_seq_hora,
						cd_medico,
						ds_observacao,
						cd_convenio,
						ie_encaixe,
						dt_agendamento,
						qt_total_secao,
						nr_secao,
						nm_usuario_origem,
						cd_procedimento,
						ie_origem_proced,
						nr_seq_proc_interno,
						cd_setor_atendimento,
						nr_controle_secao,
						cd_medico_solic,
						cd_cid,
						nr_seq_agepaci,
						nr_telefone,
						nr_doc_convenio,
						cd_senha,
						dt_validade_carteira,
						cd_usuario_convenio,												
						cd_categoria,
						cd_tipo_acomodacao,
						IE_CARATER_INTER_SUS,
						IE_TIPO_ATENDIMENTO,
						nr_seq_segurado,
						cd_plano
						)
				values (
						nr_sequencia_w,
						cd_agenda_p,
						hr_atual_w,
						CASE WHEN cd_tipo_agenda_w=5 THEN  0  ELSE 30 END ,
						cd_pessoa_fisica_p,
						CASE WHEN coalesce(cd_pessoa_fisica_p::text, '') = '' THEN  nm_paciente_p  ELSE obter_nome_pf(cd_pessoa_fisica_p) END ,
						to_date(substr(obter_dados_pf(cd_pessoa_fisica_p,'DN'),1,10),'dd/mm/yyyy'),
						CASE WHEN coalesce(obter_dados_pf(cd_pessoa_fisica_p,'DN')::text, '') = '' THEN  null  ELSE obter_idade(to_date(obter_dados_pf(cd_pessoa_fisica_p,'DN'),'dd/mm/yyyy'),clock_timestamp(),'A') END ,
						'N',
						cd_classificacao_w,
						clock_timestamp(),
						nm_usuario_p,
						cd_turno_w,
						CASE WHEN cd_tipo_agenda_w=5 THEN  nr_seq_hora_w  ELSE 0 END ,
						cd_medico_p,
						ds_observacao_p,						
						cd_convenio_ww, 
						'S',
						clock_timestamp(),
						nr_sessao_total_p,
						nr_sessao_atual_w,
						nm_usuario_p,
						cd_procedimento_p,
						ie_origem_proced_p,
						nr_seq_proc_interno_p,
						cd_setor_insert_w,
						nr_controle_secao_w,
						cd_medico_solic_p,
						cd_cid_p,
						nr_seq_agenda_cir_p,
						nr_telefone_w,
						nr_doc_convenio_w,
						cd_senha_w,
						dt_valida_carteira_w,
						cd_usuario_convenio_w,												
						cd_categoria_w,
						cd_tipo_acomodacao_w,
						ie_carater_inter_sus_p,
						ie_tipo_atendimento_p,
						nr_seq_segurado_p,
						cd_plano_p
						);
						
						
				if (cd_tipo_agenda_w = 5) and (ie_gerar_solic_pront_w = 'S') then
					begin
					CALL gerar_solic_pront_agenda(cd_pessoa_fisica_p,
						nr_sequencia_w,
						cd_agenda_p,
						hr_atual_w,
						nm_usuario_p);
					exception
					when others then			
					insert into log_tasy_agenda(
							cd_log,
							dt_atualizacao,
							nm_usuario,
							ds_log)
						values (4228,
							clock_timestamp(),
							nm_usuario_p,
							substr(	'CD_PESSOA_FISICA: '||cd_pessoa_fisica_p||
								', NR_SEQUENCIA: '||nr_sequencia_w||
								', CD_AGENDA: '||cd_agenda_p||
								', DT_AGENDA: '||to_char(hr_atual_w, 'dd/mm/yyyy hh24:mi:ss')||
								', CALLSTACK: '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,4000));								
					end;	
				end if;
				
				if (cd_tipo_agenda_w = 5) and (ie_gerar_solic_pront_gp_w = 'S') and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '')then
					CALL Gerar_Solic_Pront_Agenda_GP(cd_pessoa_fisica_p, nr_sequencia_w, cd_agenda_p, hr_atual_w, nm_usuario_p, null, null, null);
				end if;
						
			end if;
			
			
		else
			ds_erro_w := substr((ds_erro_w || to_char(hr_atual_w,'dd/mm hh24:mi') || ', '), 1, 255);
		end if;
		end;
		if (nr_sessao_atual_w > 0) then
			nr_sessao_atual_w	:= nr_sessao_atual_w + 1;
		end if;
	else
		qt_dias_w	:= qt_dias_w + 1;
	end if;

	if (ie_seq_dia_p = 'D') then
		hr_atual_w		:= hr_atual_w + 7;
	else
		hr_atual_w		:= hr_atual_w + 1;
	end if;
	
	end;
end loop;

if (dt_desejada_atendimento_p IS NOT NULL AND dt_desejada_atendimento_p::text <> '') then
		CALL agenda_additionals_crud(nr_sequencia_w, 'AGENDA_CONSULTA_ADIC', 'NR_SEQ_AGENDA', 'DT_DESEJADA_ATENDIMENTO', dt_desejada_atendimento_p, 'DATE', 'N', null, null);
end if;

<<final>>
	begin
	ds_erro_ww := '';
	end;

commit;

/* enviar sequencia inserida, atender param 78 agenda servico*/

if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
	ds_erro_bloqueio_w := wheb_mensagem_pck.get_texto(280198,'DS_ERRO_W='|| substr(ds_erro_w,1,100))||ds_enter_w;
end if;


if (ds_erro_w2 IS NOT NULL AND ds_erro_w2::text <> '') then
	ds_erro_regra_w := wheb_mensagem_pck.get_texto(280194,'DS_ERRO_W2='|| substr(ds_erro_w2,1,100));
end if;

if (ds_erro_w3 IS NOT NULL AND ds_erro_w3::text <> '') then
	ds_erro_duplicado_w := wheb_mensagem_pck.get_texto(280195,'DS_ERRO_W3='|| substr(ds_erro_w3,1,100))||ds_enter_w;
end if;

if (ds_erro_w4 IS NOT NULL AND ds_erro_w4::text <> '') then
	ds_erro_regra_conv_w := wheb_mensagem_pck.get_texto(280197,'DS_ERRO_W4='|| substr(ds_erro_w4,1,100)||';DS_CONSISTENCIA_W='|| ds_consistencia_w)||ds_enter_w;
end if;

ds_erro_p := substr(ds_erro_duplicado_w||ds_erro_bloqueio_w||ds_erro_regra_w||ds_erro_regra_conv_w,1,255);

if (nr_sequencia_w <> 0) and (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') and (coalesce(ds_erro_p::text, '') = '') then
	nr_seq_encaixe_p := nr_sequencia_w;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_encaixe_agenda_servico (cd_agenda_p bigint, cd_pessoa_fisica_p text, dt_inicio_p timestamp, qt_dias_p bigint, nm_usuario_p text, cd_classificacao_p text, cd_convenio_p bigint, ie_seq_dia_p text, cd_medico_p text, nm_paciente_p text, ds_observacao_p text, nr_sessao_total_p bigint, nr_sessao_atual_p bigint, ds_erro_p INOUT text, cd_estabelecimento_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_proc_interno_p bigint, cd_medico_solic_p text, cd_cid_p text, nr_seq_agenda_cir_p bigint, ds_dias_p text, ie_tipo_atendimento_p bigint default null, ie_carater_inter_sus_p text default null, nr_seq_encaixe_p INOUT text DEFAULT NULL, nr_seq_segurado_p bigint DEFAULT NULL, cd_categoria_p text DEFAULT NULL, cd_usuario_convenio_p text DEFAULT NULL, dt_validade_carteira_p timestamp DEFAULT NULL, cd_plano_p text DEFAULT NULL, cd_setor_atendimento_p bigint default null, dt_desejada_atendimento_p text default null) FROM PUBLIC;

