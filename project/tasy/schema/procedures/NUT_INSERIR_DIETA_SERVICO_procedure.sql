-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE nut_inserir_dieta_servico (nr_seq_servico_p bigint, ds_lista_dieta_p text, nm_usuario_p text, ie_todos_servicos_p text, dt_inicio_p timestamp, dt_fim_p timestamp) AS $body$
DECLARE


lista_informacao_w		varchar(1000);
ie_contador_w			bigint	:= 0;
tam_lista_w			bigint;
ie_pos_virgula_w		smallint;
cd_dieta_w			bigint;
cd_setor_w			integer;
nr_atendimento_w		bigint;
nr_sequencia_w			bigint;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	nut_atend_serv_dia
	where	nr_atendimento = nr_atendimento_w
	and	dt_servico between trunc(dt_inicio_p, 'dd') and fim_dia(dt_fim_p)
	and	cd_setor_atendimento = cd_setor_w;


BEGIN

lista_informacao_w	:= ds_lista_dieta_p;

if (nr_seq_servico_p IS NOT NULL AND nr_seq_servico_p::text <> '') then

	select	cd_setor_atendimento,
		nr_atendimento
	into STRICT	cd_setor_w,
		nr_atendimento_w
	from	nut_atend_serv_dia
	where	nr_sequencia = nr_seq_servico_p;

	if (ie_todos_servicos_p = 'N') then --Gerar dietas apenas para o serviço selecionado
		delete 	FROM nut_atend_serv_dia_dieta
		where	nr_seq_servico = nr_seq_servico_p;

		while	(lista_informacao_w IS NOT NULL AND lista_informacao_w::text <> '') or
			ie_contador_w > 200 loop
			begin

			tam_lista_w			:= length(lista_informacao_w);
			ie_pos_virgula_w		:= position(',' in lista_informacao_w);

			/* Obter a sequência lida */

			if (ie_pos_virgula_w <> 0) then
				cd_dieta_w		:= substr(lista_informacao_w,1,(ie_pos_virgula_w - 1));
				lista_informacao_w	:= substr(lista_informacao_w,(ie_pos_virgula_w + 1),tam_lista_w);
			end if;

			insert into nut_atend_serv_dia_dieta(
				nr_sequencia,
				nr_seq_servico,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_dieta
			) values (
				nextval('nut_atend_serv_dia_dieta_seq'),
				nr_seq_servico_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_dieta_w);

			ie_contador_w	:= ie_contador_w + 1;

			end;
		end loop;

	elsif (ie_todos_servicos_p = 'S') then --Gerar dietas para todos os serviços do dia para o paciente
		open C01;
		loop
		fetch C01 into
			nr_sequencia_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

			delete 	FROM nut_atend_serv_dia_dieta
			where	nr_seq_servico = nr_sequencia_w;

			lista_informacao_w	:= ds_lista_dieta_p;

			while	(lista_informacao_w IS NOT NULL AND lista_informacao_w::text <> '') or
				ie_contador_w > 200 loop
				begin

				tam_lista_w			:= length(lista_informacao_w);
				ie_pos_virgula_w		:= position(',' in lista_informacao_w);

				/* Obter a sequência lida */

				if (ie_pos_virgula_w <> 0) then
					cd_dieta_w		:= substr(lista_informacao_w,1,(ie_pos_virgula_w - 1));
					lista_informacao_w	:= substr(lista_informacao_w,(ie_pos_virgula_w + 1),tam_lista_w);
				end if;

				insert into nut_atend_serv_dia_dieta(
					nr_sequencia,
					nr_seq_servico,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_dieta
				) values (
					nextval('nut_atend_serv_dia_dieta_seq'),
					nr_sequencia_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_dieta_w);

				ie_contador_w	:= ie_contador_w + 1;

				end;
			end loop;

			end;
		end loop;
		close C01;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nut_inserir_dieta_servico (nr_seq_servico_p bigint, ds_lista_dieta_p text, nm_usuario_p text, ie_todos_servicos_p text, dt_inicio_p timestamp, dt_fim_p timestamp) FROM PUBLIC;

