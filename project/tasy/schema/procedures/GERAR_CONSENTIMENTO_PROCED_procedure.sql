-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_consentimento_proced ( nr_atendimento_p bigint, cd_estabelecimento_p bigint, nr_prescricao_p bigint, cd_procedimento_p bigint, nr_seq_proc_interno_p bigint, ie_origem_proced_p bigint, cd_perfil_p bigint, cd_medico_p text, nm_usuario_p text, nr_seq_proc_cpoe_p bigint default 0, dt_inicio_proc_cpoe_p timestamp default null) AS $body$
DECLARE

					
cd_procedimento_w	bigint;
ie_tipo_consentimento_w	varchar(3);
ds_titulo_w		varchar(255);
ds_texto_w		text;
qt_reg_w		bigint;
qt_reg2_w		bigint;
cd_pessoa_fisica_w	varchar(10);
cd_profissional_w	varchar(10);
ie_liberado_w		varchar(1);
ds_texto_saida_w        text;
ie_liberacao_w		varchar(1);
dt_liberacao_medico_w	timestamp;
dt_liberacao_w		timestamp;
dt_inicio_w 		timestamp;
nr_seq_proc_cpoe_w	cpoe_procedimento.nr_sequencia%type;
dt_inicio_proc_cpoe_w	cpoe_procedimento.dt_inicio%type;

					
c01 CURSOR FOR
SELECT	cd_procedimento,
	ie_tipo_consentimento,
	ds_titulo,
	ds_texto,
	coalesce(ie_liberado,'N')
from	regra_geracao_consent
where	((cd_procedimento = cd_procedimento_p AND ie_origem_proced = ie_origem_proced_p) or (nr_seq_proc_interno   = nr_seq_proc_interno_p))
and	coalesce(cd_perfil,cd_perfil_p) = cd_perfil_p
and	(((coalesce(ie_momento_geracao,'E')  = 'M') and (ie_liberacao_w       = 'M')) or
	 ((coalesce(ie_momento_geracao,'E')  = 'E') and (ie_liberacao_w       = 'E')) or (dt_liberacao_w = dt_liberacao_medico_w));


BEGIN

nr_seq_proc_cpoe_w	:= coalesce(nr_seq_proc_cpoe_p,0);
dt_inicio_proc_cpoe_w	:= coalesce(dt_inicio_proc_cpoe_p,null);

select  count(*)
into STRICT    qt_reg_w
from    regra_geracao_consent
where	((cd_procedimento = cd_procedimento_p) or (nr_seq_proc_interno = nr_seq_proc_interno_p));

select	max(cd_pessoa_fisica)
into STRICT	cd_profissional_w
from	usuario
where	nm_usuario = nm_usuario_p;

if (nr_seq_proc_cpoe_w > 0) then
	
	dt_inicio_w		:= dt_inicio_proc_cpoe_w;
	dt_liberacao_medico_w 	:= clock_timestamp();
	dt_liberacao_w 		:= clock_timestamp();
	
	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_p;
	
end if;	

if (nr_prescricao_p > 0) then

	select	max(cd_pessoa_fisica),
		max(dt_liberacao),
		max(dt_liberacao_medico)
	into STRICT	cd_pessoa_fisica_w,
		dt_liberacao_w,
		dt_liberacao_medico_w
	from    prescr_medica
	where   nr_prescricao = nr_prescricao_p;
end if;


if (coalesce(dt_liberacao_w::text, '') = '') then
	ie_liberacao_w  := 'M';
else
	ie_liberacao_w  := 'E';
end if;

if (qt_reg_w > 0) then

	open c01;
	loop
	fetch c01 into	
		cd_procedimento_w,
		ie_tipo_consentimento_w,
		ds_titulo_w,
		ds_texto_w,
		ie_liberado_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		ds_texto_saida_w := Substituir_Macros_Tasy(ds_texto_w, cd_pessoa_fisica_w, cd_profissional_w, nr_atendimento_p, ds_texto_saida_w);
		
		select	count(*)
		into STRICT	qt_reg2_w
		from	pep_pac_ci
		where	nr_atendimento = nr_atendimento_p
		and	nr_seq_proc_cpoe = nr_seq_proc_cpoe_w;
				
		if	((qt_reg2_w = 0) or (nr_seq_proc_cpoe_w = 0)) then /*Significa que nao veio da CPOE entao insere normalmente*/
		
			insert into pep_pac_ci(		
				nr_sequencia,
				nr_atendimento,
				ds_titulo,
				ds_texto,
				nr_seq_proc_interno,
				ie_tipo_consentimento,
				ie_situacao,
				cd_profissional,
				cd_pessoa_fisica,
				cd_estabelecimento,
				nm_usuario,
				nm_usuario_nrec,
				dt_atualizacao,
				dt_atualizacao_nrec,
				nr_prescricao,
				dt_liberacao,
				dt_schedule_proc,
				nr_seq_proc_cpoe)
			values (	nextval('pep_pac_ci_seq'),
				nr_atendimento_p,
				ds_titulo_w,
				ds_texto_saida_w,
				nr_seq_proc_interno_p,
				ie_tipo_consentimento_w,
				'A',
				cd_profissional_w,
				cd_pessoa_fisica_w,
				cd_estabelecimento_p,
				nm_usuario_p,
				nm_usuario_p,
				clock_timestamp(),
				clock_timestamp(),
				nr_prescricao_p,
				CASE WHEN ie_liberado_w='S' THEN clock_timestamp()  ELSE null END ,
				dt_inicio_w,
				CASE WHEN nr_seq_proc_cpoe_w=0 THEN null  ELSE nr_seq_proc_cpoe_w END );
			else
				update	pep_pac_ci
				set	dt_schedule_proc = dt_inicio_w
				where	nr_seq_proc_cpoe = nr_seq_proc_cpoe_w;
			end if;

		if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then
			commit;
		end if;
		
		end;
	end loop;
	close c01;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_consentimento_proced ( nr_atendimento_p bigint, cd_estabelecimento_p bigint, nr_prescricao_p bigint, cd_procedimento_p bigint, nr_seq_proc_interno_p bigint, ie_origem_proced_p bigint, cd_perfil_p bigint, cd_medico_p text, nm_usuario_p text, nr_seq_proc_cpoe_p bigint default 0, dt_inicio_proc_cpoe_p timestamp default null) FROM PUBLIC;

