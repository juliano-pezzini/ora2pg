-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_estimativa_copartic ( nr_seq_guia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

_ora2pg_r RECORD;
/* 
ESTA ROTINA NAO E MAIS UTILZIADA PARA GERAR A ESTIMATIVA DE COPARTICIPACAO NA FUNCAO OPS - AUTORIZACOES!!!!!!!!!
A NOVA ROTINA E  PLS_GERAR_ESTIMA_COPARTIC_GUIA
*/
cd_procedimento_w		bigint;
cd_area_w			bigint;
cd_especialidade_w		bigint;
cd_grupo_w			bigint;
cd_guia_w			varchar(20);
cd_edicao_amb_w			integer;
cd_porte_anestesico_w		varchar(10);
cont_w				bigint;
cd_proc_pacote_w			bigint;

dt_autorizacao_w			timestamp;
dt_contrato_w			timestamp;
dt_ult_vigencia_w			timestamp;

ie_tipo_atendimento_w		varchar(1);
ie_liberado_w			varchar(1);
ie_tipo_atend_w			varchar(1)	:= '';
ie_origem_proced_w		bigint;
ie_origem_w			bigint;
ie_tipo_guia_w			varchar(2);
ie_gerar_copartic_w		varchar(1);
ie_tipo_segurado_w		varchar(2);
ie_calculo_coparticipacao_w	varchar(2);
ie_tipo_processo_w		varchar(2);
ie_tipo_atend_tiss_w		varchar(2);
ie_tipo_despesa_w		varchar(1);
ie_carater_internacao_w		varchar(10);
ie_tipo_valor_w			varchar(2);
ie_internado_w			varchar(1)	:= 'N';
ie_tipo_intercambio_w		varchar(2);
ie_origem_pacote_w		bigint;
ie_depende_regra_w		varchar(1)	:= 'N';
ie_calculo_copartic_w		varchar(4);
ie_restringe_estab_w		varchar(2);

nr_seq_coparticipacao_w		bigint;
nr_seq_tipo_coparticipacao_w	bigint;
nr_seq_copartic_w		bigint;
nr_seq_segurado_w		bigint;
nr_seq_contrato_w		bigint;
nr_seq_clinica_w		bigint;
nr_seq_prestador_w		bigint;
nr_seq_tipo_acomodacao_w	bigint;
nr_seq_plano_w			bigint;
nr_seq_guia_proc_w		bigint;
nr_seq_regra_w			bigint;
nr_seq_regra_autogerado_w	bigint;
nr_seq_guia_mat_w		bigint;
nr_seq_material_w		bigint;
nr_aux_regra_w			bigint;
nr_seq_categoria_w		bigint;
nr_seq_tipo_atendimento_w	bigint;
nr_seq_outorgante_w		bigint;
nr_seq_prest_fornec_w		bigint;
nr_seq_material_preco_w		bigint;
nr_seq_estrut_mat_w		bigint;
nr_seq_pacote_w			bigint;
nr_seq_regra_copartic_w		bigint;
nr_contrato_w			bigint;
nr_seq_congenere_w		bigint;
nr_seq_classificacao_prest_w	bigint;
nr_seq_intercambio_w		bigint;
nr_seq_pacote_ww		bigint;
nr_seq_acomod_pacote_w		bigint;

qt_coparticipacao_w		bigint;
qt_autorizada_w			pls_guia_plano_proc.qt_autorizada%type;
qt_registros_w			bigint;
qt_solicitada_w			pls_guia_plano_proc.qt_solicitada%type;

sg_estado_w			pessoa_juridica.sg_estado%type;
sg_estado_int_w			pessoa_juridica.sg_estado%type;

tx_coparticipacao_w		double precision	:= 0;

vl_liberado_w			double precision;
vl_maximo_w			double precision;
vl_coparticipacao_w		double precision;
vl_unitario_w			double precision;
vl_copartic_unit_w		double precision;
vl_copartic_w			double precision;
vl_custo_operacional_w		double precision;
vl_anestesista_w		double precision;
vl_medico_w			double precision;
vl_filme_w			double precision;
vl_auxiliares_w			double precision;
vl_procedimento_w		double precision;
vl_material_w			double precision;
vl_material_simpro_w		double precision;
vl_material_brasindice_w	double precision;
vl_material_tabela_w		double precision;
vl_pacote_w			double precision;
vl_materiais_w			double precision;

nr_seq_estrut_regra_w		bigint;
ie_estrut_mat_w			varchar(1);
ie_lib_regra_w			varchar(1);
dt_procedimento_w		timestamp	:= null;
cd_moeda_autogerado_w		smallint;
vl_ch_honorarios_w		cotacao_moeda.vl_cotacao%type;
vl_ch_custo_oper_w		cotacao_moeda.vl_cotacao%type;
vl_ch_custo_filme_w		cotacao_moeda.vl_cotacao%type;
vl_ch_anestesista_w		cotacao_moeda.vl_cotacao%type;
dados_regra_preco_proc_w	pls_cta_valorizacao_pck.dados_regra_preco_proc;
dados_regra_preco_material_w	pls_cta_valorizacao_pck.dados_regra_preco_material;
dados_guia_w			pls_cta_valorizacao_pck.dados_guia;
ie_regime_atendimento_w	pls_conta.ie_regime_atendimento%type;
ie_saude_ocupacional_w	pls_conta.ie_saude_ocupacional%type;

C00 CURSOR FOR
	SELECT	nr_sequencia,
		cd_procedimento,
		ie_origem_proced,
		qt_autorizada,
		qt_solicitada,
		coalesce(vl_procedimento,0),
		nr_seq_pacote
	from	pls_guia_plano_proc
	where	nr_seq_guia	= nr_seq_guia_p;

c01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_tipo_coparticipacao,
		coalesce(a.tx_coparticipacao,0),
		coalesce(a.vl_maximo,0),
		a.ie_tipo_atendimento,
		a.vl_coparticipacao
	from	pls_regra_coparticipacao a
	where	a.nr_seq_contrato	= nr_seq_contrato_w
	--and	a.ie_situacao	= 'A'
	and (dt_autorizacao_w >= coalesce(trunc(a.dt_inicio_vigencia),dt_autorizacao_w))
	and (dt_autorizacao_w <= coalesce(trunc(a.dt_fim_vigencia),dt_autorizacao_w))
	and (dt_contrato_w >= coalesce(a.dt_contrato_de,dt_contrato_w))
	and (dt_contrato_w <= coalesce(a.dt_contrato_ate,dt_contrato_w))
	
union

	SELECT	a.nr_sequencia,
		a.nr_seq_tipo_coparticipacao,
		coalesce(a.tx_coparticipacao,0),
		coalesce(a.vl_maximo,0),
		a.ie_tipo_atendimento,
		a.vl_coparticipacao
	from	pls_regra_coparticipacao a
	where	a.nr_seq_plano	= nr_seq_plano_w
	and	coalesce(a.nr_seq_contrato::text, '') = ''
	and	coalesce(a.nr_seq_proposta::text, '') = ''
	--and	a.ie_situacao	= 'A'
	and (dt_autorizacao_w >= coalesce(trunc(a.dt_inicio_vigencia),dt_autorizacao_w))
	and (dt_autorizacao_w <= coalesce(trunc(a.dt_fim_vigencia),dt_autorizacao_w))
	and (dt_contrato_w >= coalesce(a.dt_contrato_de,dt_contrato_w))
	and (dt_contrato_w <= coalesce(a.dt_contrato_ate,dt_contrato_w))
	and	not exists (select	1
				from	pls_regra_coparticipacao x
				where	x.nr_seq_contrato	= nr_seq_contrato_w
				and	coalesce(x.dt_inicio_vigencia,dt_autorizacao_w) <= dt_autorizacao_w);

c02 CURSOR FOR
	SELECT	b.nr_sequencia,
		b.ie_liberado
	from	pls_tipo_coparticipacao a,
		pls_coparticipacao_proc b
	where	a.nr_sequencia					= b.nr_seq_tipo_coparticipacao
	and	a.nr_sequencia					= nr_seq_tipo_coparticipacao_w
	and	coalesce(b.cd_procedimento, cd_procedimento_w)	= cd_procedimento_w
	and	coalesce(b.ie_origem_proced, ie_origem_proced_w) 	= ie_origem_proced_w
	and	coalesce(b.cd_grupo_proc, cd_grupo_w)		= cd_grupo_w
	and	coalesce(b.cd_especialidade, cd_especialidade_w)	= cd_especialidade_w
	and	coalesce(b.cd_area_procedimento, cd_area_w) 		= cd_area_w
	and	a.ie_situacao	= 'A'
	order by
		b.cd_area_procedimento,
		b.cd_especialidade,
		b.cd_grupo_proc,
		b.cd_procedimento;

C03 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_material,
		qt_autorizada,
		qt_solicitada
	from	pls_guia_plano_mat
	where	nr_seq_guia	= nr_seq_guia_p;

C04 CURSOR FOR	
	SELECT	b.nr_sequencia,
		b.ie_liberado,
		b.nr_seq_estrut_mat
	from	pls_tipo_coparticipacao a,
		pls_coparticipacao_mat b
	where	a.nr_sequencia					= b.nr_seq_tipo_coparticipacao
	and	a.nr_sequencia					= nr_seq_tipo_coparticipacao_w
	and	coalesce(b.nr_seq_material, nr_seq_material_w)	= nr_seq_material_w
	and	coalesce(b.ie_tipo_despesa, ie_tipo_despesa_w) 	= ie_tipo_despesa_w
	and	a.ie_situacao	= 'A'
	order by
		nr_seq_material,
		nr_seq_estrut_mat;
	

BEGIN

select	nr_seq_segurado,
	cd_guia,
	ie_tipo_guia,
	trunc(coalesce(dt_autorizacao,dt_solicitacao)),
	coalesce(nr_seq_clinica,0),
	nr_seq_prestador,
	nr_seq_tipo_acomodacao,
	ie_tipo_processo,
	ie_tipo_atend_tiss,
	ie_carater_internacao,
	pls_obter_internado_guia(nr_sequencia,'A'),
	ie_tipo_consulta,
	ie_regime_atendimento,
	ie_saude_ocupacional
into STRICT	nr_seq_segurado_w,
	cd_guia_w,
	ie_tipo_guia_w,
	dt_autorizacao_w,
	nr_seq_clinica_w,
	nr_seq_prestador_w,
	nr_seq_tipo_acomodacao_w,
	ie_tipo_processo_w,
	ie_tipo_atend_tiss_w,
	ie_carater_internacao_w,
	ie_internado_w,
	dados_guia_w.ie_tipo_consulta_guia,
	ie_regime_atendimento_w,
	ie_saude_ocupacional_w
from	pls_guia_plano
where	nr_sequencia	= nr_seq_guia_p;

/* Obter a categoria do tipo de acomodacao */
if (nr_seq_tipo_acomodacao_w IS NOT NULL AND nr_seq_tipo_acomodacao_w::text <> '') then
	select	max(nr_seq_categoria) 
	into STRICT	nr_seq_categoria_w
	from	pls_regra_categoria 
	where	nr_seq_tipo_acomodacao	= nr_seq_tipo_acomodacao_w;
end if;

begin
select	nr_sequencia
into STRICT	nr_seq_tipo_atendimento_w
from	pls_tipo_atendimento
where	somente_numero(cd_tiss)	= ie_tipo_atend_tiss_w;
exception
when others then
	nr_seq_tipo_atendimento_w	:= null;
end;


begin
select	nr_seq_outorgante
into STRICT	nr_seq_outorgante_w
from	pls_plano
where	nr_sequencia	= nr_seq_plano_w;
exception
	when others then
	nr_seq_outorgante_w	:= 0;
end;

/* Obter parametros da conta medica */

ie_restringe_estab_w	:= pls_obter_se_controle_estab('CO');

begin
	select	coalesce(max(ie_calculo_coparticipacao),'P')
	into STRICT	ie_calculo_coparticipacao_w
	from	pls_parametros
	where	((ie_restringe_estab_w	= 'S' AND cd_estabelecimento	= cd_estabelecimento_p)
	or (ie_restringe_estab_w	= 'N'));
exception
when others then
	ie_calculo_coparticipacao_w	:= 'P';
end;
/* Qunado for definido o calculo de coparticipacao "Depende da regra", sera calculado com base nos valores da operadora*/

if (ie_calculo_coparticipacao_w	= 'O') then
	ie_calculo_coparticipacao_w	:= 'CO';
end if;

ie_tipo_segurado_w	:= pls_obter_dados_segurado(nr_seq_segurado_w, 'TP');
if (ie_tipo_segurado_w	in ('I','H')) then
	select 	pls_obter_produto_benef(nr_sequencia,dt_autorizacao_w),
		dt_contratacao,
		1,
		nr_seq_congenere
	into STRICT	nr_seq_plano_w,
		dt_contrato_w,
		nr_seq_contrato_w,
		nr_seq_congenere_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
	
	begin
		select	coalesce(max(a.sg_estado),'X')
		into STRICT	sg_estado_int_w
		from	pessoa_juridica	a,
			pls_congenere	b
		where	a.cd_cgc	= b.cd_cgc
		and	b.nr_sequencia	= nr_seq_congenere_w;
	exception
	when others then
		sg_estado_int_w	:= 'X';
	end;
	
	select	coalesce(max(sg_estado),'X')
	into STRICT	sg_estado_w
	from	pessoa_juridica
	where	cd_cgc	= (	SELECT	max(cd_cgc_outorgante)
				from	pls_outorgante
				where	cd_estabelecimento	= cd_estabelecimento_p);
	
	if (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
		if (sg_estado_w	= sg_estado_int_w) then
			ie_tipo_intercambio_w	:= 'E';
		else	
			ie_tipo_intercambio_w	:= 'N';
		end if;
	else
		ie_tipo_intercambio_w	:= 'A';
	end if;
else
--	select	nr_seq_plano,
	select 	pls_obter_produto_benef(nr_sequencia,dt_autorizacao_w),
		nr_seq_contrato
	into STRICT	nr_seq_plano_w,
		nr_seq_contrato_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
	
	begin
		select	dt_contrato,
			coalesce(nr_contrato,0)
		into STRICT	dt_contrato_w,
			nr_contrato_w
		from	pls_contrato
		where	nr_sequencia	= nr_seq_contrato_w;
	exception
	when others then
		nr_contrato_w	:= 0;
	end;
end if;

select	max(nr_seq_classificacao)
into STRICT	nr_seq_classificacao_prest_w
from	pls_prestador
where	nr_sequencia = nr_seq_prestador_w;

select	max(nr_seq_intercambio)
into STRICT	nr_seq_intercambio_w
from	pls_segurado
where	nr_sequencia	= nr_seq_segurado_w;

delete	from pls_guia_coparticipacao
where	nr_seq_guia = nr_seq_guia_p;

open C00;
loop
fetch C00 into	
	nr_seq_guia_proc_w,
	cd_procedimento_w,
	ie_origem_w,
	qt_autorizada_w,
	qt_solicitada_w,
	vl_procedimento_w,
	nr_seq_pacote_w;
EXIT WHEN NOT FOUND; /* apply on C00 */
	begin
	ie_depende_regra_w	:= 'N';
	
	if (qt_autorizada_w	= 0) then
		qt_autorizada_w	:= qt_solicitada_w;
	end if;
	
	SELECT * FROM pls_obter_estrut_proc(cd_procedimento_w, ie_origem_w, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w;
	
	if (ie_calculo_coparticipacao_w	= 'R') and (nr_seq_pacote_w IS NOT NULL AND nr_seq_pacote_w::text <> '') then
		SELECT * FROM pls_obter_tipo_vl_copartic_aut(nr_seq_segurado_w, dt_autorizacao_w, nm_usuario_p, '4', ie_tipo_valor_w, nr_seq_regra_copartic_w) INTO STRICT ie_tipo_valor_w, nr_seq_regra_copartic_w;
		
		if (ie_tipo_valor_w	= 1) then
			ie_depende_regra_w	:= 'S';
					
			SELECT * FROM pls_define_preco_pacote(cd_estabelecimento_p, nr_seq_prestador_w, nr_seq_tipo_acomodacao_w, dt_autorizacao_w, cd_procedimento_w, ie_origem_w, ie_internado_w, nr_seq_plano_w, nr_contrato_w, nr_seq_congenere_w, nm_usuario_p, '', ie_tipo_intercambio_w, nr_seq_pacote_ww, nr_seq_acomod_pacote_w, cd_proc_pacote_w, ie_origem_pacote_w, vl_pacote_w, vl_medico_w, vl_anestesista_w, vl_auxiliares_w, vl_custo_operacional_w, vl_materiais_w, nr_seq_intercambio_w, nr_seq_classificacao_prest_w, null, nr_seq_segurado_w, null, 'N', null, 1) INTO STRICT nr_seq_pacote_ww, nr_seq_acomod_pacote_w, cd_proc_pacote_w, ie_origem_pacote_w, vl_pacote_w, vl_medico_w, vl_anestesista_w, vl_auxiliares_w, vl_custo_operacional_w, vl_materiais_w;
			
			vl_liberado_w	:= (vl_pacote_w * qt_autorizada_w);
			vl_unitario_w	:= vl_pacote_w;
			nr_seq_regra_w	:= nr_seq_regra_copartic_w;
		else
			ie_calculo_coparticipacao_w	:= 'CO';
		end if;
	end if;
	
	if (ie_depende_regra_w	<> 'S') then
		select	CASE WHEN ie_calculo_coparticipacao_w='R' THEN 'CO'  ELSE ie_calculo_coparticipacao_w END
		into STRICT	ie_calculo_copartic_w
		;
		
		dados_regra_preco_proc_w := pls_define_preco_proc(	cd_estabelecimento_p, nr_seq_prestador_w, null, dt_autorizacao_w, null, cd_procedimento_w, ie_origem_w, nr_seq_tipo_acomodacao_w, null, nr_seq_clinica_w, nr_seq_plano_w, ie_calculo_copartic_w, nr_seq_contrato_w, 0, null, 'N', null, '', '', '', '', '', '', null, '', '', '', '', 'A', 'X', null, ie_carater_internacao_w, dt_procedimento_w, null, null, null, dados_guia_w, null, dados_regra_preco_proc_w, null, null, null, null, null);
						
		vl_unitario_w			:= dados_regra_preco_proc_w.vl_procedimento;
		vl_custo_operacional_w		:= dados_regra_preco_proc_w.vl_custo_operacional;
		vl_anestesista_w		:= dados_regra_preco_proc_w.vl_anestesista;
		vl_medico_w			:= dados_regra_preco_proc_w.vl_medico;
		vl_filme_w			:= dados_regra_preco_proc_w.vl_filme;
		vl_auxiliares_w			:= dados_regra_preco_proc_w.vl_auxiliares;
		nr_seq_regra_w			:= dados_regra_preco_proc_w.nr_sequencia;
		cd_edicao_amb_w			:= dados_regra_preco_proc_w.cd_edicao_amb;
		cd_porte_anestesico_w		:= dados_regra_preco_proc_w.cd_porte_anestesico;
		nr_aux_regra_w			:= dados_regra_preco_proc_w.nr_auxiliares;
		nr_seq_regra_autogerado_w	:= dados_regra_preco_proc_w.nr_seq_regra_autogerado;
		cd_moeda_autogerado_w		:= dados_regra_preco_proc_w.cd_moeda_autogerado;
		vl_ch_honorarios_w		:= dados_regra_preco_proc_w.vl_ch_honorarios;
		vl_ch_custo_oper_w		:= dados_regra_preco_proc_w.vl_ch_custo_oper;
		vl_ch_custo_filme_w		:= dados_regra_preco_proc_w.vl_ch_custo_filme;
		vl_ch_anestesista_w		:= dados_regra_preco_proc_w.vl_ch_anestesista;
				
		vl_liberado_w 	:= (vl_unitario_w * qt_autorizada_w);
	end if;
	
	select	pls_obter_se_copartic(cd_guia_w, nr_seq_segurado_w, null, null)
	into STRICT	ie_gerar_copartic_w
	;
		
	if (ie_gerar_copartic_w = 'N') then
		if (ie_tipo_guia_w in ('1','5','6','7','8')) then
			ie_tipo_atend_w	:= 'I';
		elsif (ie_tipo_guia_w in ('2','3','4')) then
			ie_tipo_atend_w	:= 'E';
		end if;
		
		open c01;
		loop
		fetch c01 into	
			nr_seq_coparticipacao_w,
			nr_seq_tipo_coparticipacao_w,
			tx_coparticipacao_w,
			vl_maximo_w,
			ie_tipo_atendimento_w,
			vl_copartic_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			if (ie_tipo_atendimento_w = ie_tipo_atend_w) or (ie_tipo_atendimento_w = 'A')then
				cont_w := 0;
				
				if (nr_seq_clinica_w <> 0) then /*Verifica se tem regra de tipo de atendimento cadastrado*/
					select	count(*)
					into STRICT	cont_w
					from	pls_tipo_coparticipacao a,
						pls_coparticipacao_proc b
					where	a.nr_sequencia				= nr_seq_tipo_coparticipacao_w
					and	coalesce(b.nr_seq_clinica,nr_seq_clinica_w)	= nr_seq_clinica_w
					and	a.ie_situacao	= 'A';
				end if;
				
				if (ie_tipo_guia_w in ('1','8')) and (cont_w > 0) then /*Se entra no if para o valor de coparticipacao fixo*/
					select	max(b.nr_sequencia),
						max(b.ie_liberado)
					into STRICT	nr_seq_copartic_w,
						ie_liberado_w
					from	pls_tipo_coparticipacao a,
						pls_coparticipacao_proc b
					where	a.nr_sequencia				= nr_seq_tipo_coparticipacao_w
					and	coalesce(b.nr_seq_clinica,nr_seq_clinica_w)	= nr_seq_clinica_w
					and	a.ie_situacao	= 'A';
					
					select	count(*)
					into STRICT	qt_coparticipacao_w
					from	pls_guia_coparticipacao
					where	nr_seq_guia_proc = nr_seq_guia_proc_w;
					
					if (coalesce(ie_liberado_w,'N') = 'S') and (coalesce(vl_copartic_w,0) > 0) and (qt_coparticipacao_w > 0) then
						vl_coparticipacao_w	:= vl_copartic_w;
						
						insert into pls_guia_coparticipacao(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_guia,
								nr_seq_guia_proc,
								vl_coparticipacao,
								nr_seq_regra,
								nr_seq_regra_copartic)
							values (nextval('pls_guia_coparticipacao_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_guia_p,
								null,
								vl_coparticipacao_w,
								nr_seq_regra_w,
								nr_seq_coparticipacao_w);
					end if;
				end if;
				
				open c02;
				loop
				fetch c02 into	
					nr_seq_copartic_w,
					ie_liberado_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
				end loop;
				close c02;
				
				if (coalesce(ie_liberado_w,'N') = 'S') then
					select	count(*)
					into STRICT	qt_registros_w
					from	pls_guia_coparticipacao
					where	nr_seq_guia_proc	= nr_seq_guia_proc_w;
					
					if (qt_registros_w = 0) then
						vl_copartic_unit_w	:= ((coalesce(vl_unitario_w,0) * tx_coparticipacao_w) / 100);
						
						if (vl_maximo_w	> 0) and (vl_copartic_unit_w > vl_maximo_w) then
							vl_coparticipacao_w := (vl_maximo_w * qt_autorizada_w);
							vl_copartic_unit_w := vl_maximo_w;
						else
							vl_coparticipacao_w	:= ((coalesce(vl_liberado_w,0) * tx_coparticipacao_w) / 100);
						end if;
						
						if (coalesce(vl_coparticipacao_w,0) > 0) then
							insert into pls_guia_coparticipacao(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_guia,
								nr_seq_guia_proc,
								vl_coparticipacao,
								nr_seq_regra,
								nr_seq_regra_copartic)
							values (nextval('pls_guia_coparticipacao_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_guia_p,
								nr_seq_guia_proc_w,
								vl_coparticipacao_w,
								nr_seq_regra_w,
								nr_seq_coparticipacao_w);
						end if;
					end if;
				end if;
			end if;
			end;
		end loop;
		close c01;
	end if;
	end;
end loop;
close C00;

open C03;
loop
fetch C03 into	
	nr_seq_guia_mat_w,
	nr_seq_material_w,
	qt_autorizada_w,
	qt_solicitada_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	if (qt_autorizada_w	= 0) then
		qt_autorizada_w	:= qt_solicitada_w;
	end if;
	
	begin
	select	nr_seq_prest_fornec
	into STRICT	nr_seq_prest_fornec_w
	from	pls_guia_plano_mat
	where	nr_sequencia	= nr_seq_guia_mat_w;
	exception
	when others then
		nr_seq_prest_fornec_w	:= null;
	end;
	
	begin
	select	ie_tipo_despesa,
		nr_seq_estrut_mat
	into STRICT	ie_tipo_despesa_w,
		nr_seq_estrut_mat_w
	from	pls_material
	where	nr_sequencia	= nr_seq_material_w;
	exception
	when others then
		ie_tipo_despesa_w	:= '';
		nr_seq_estrut_mat_w	:= 0;
	end;
	
	select	CASE WHEN ie_calculo_coparticipacao_w='R' THEN 'CO'  ELSE ie_calculo_coparticipacao_w END
	into STRICT	ie_calculo_copartic_w
	;
	
	SELECT * FROM pls_define_preco_material(	cd_estabelecimento_p, nr_seq_prestador_w, dt_autorizacao_w, nr_seq_material_w, 4, ie_tipo_despesa_w, null, ie_calculo_copartic_w, nr_seq_outorgante_w, nr_seq_segurado_w, '', nr_seq_prest_fornec_w, nr_seq_categoria_w, nr_seq_tipo_acomodacao_w, nr_seq_tipo_atendimento_w, nr_seq_clinica_w, ie_tipo_guia_w, '', '', 'N', nm_usuario_p, null, '', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, vl_material_w, dt_ult_vigencia_w, nr_seq_material_preco_w, vl_material_simpro_w, vl_material_brasindice_w, vl_material_tabela_w, dados_regra_preco_material_w, null, ie_regime_atendimento_w, ie_saude_ocupacional_w) INTO STRICT _ora2pg_r;
 vl_material_w := _ora2pg_r.vl_material_p; dt_ult_vigencia_w := _ora2pg_r.dt_ult_vigencia_p; nr_seq_material_preco_w := _ora2pg_r.nr_seq_material_preco_p; vl_material_simpro_w := _ora2pg_r.vl_material_simpro_p; vl_material_brasindice_w := _ora2pg_r.vl_material_brasindice_p; vl_material_tabela_w := _ora2pg_r.vl_material_tabela_p; dados_regra_preco_material_w := _ora2pg_r.dados_regra_preco_material_p;
	nr_seq_regra_w	:= dados_regra_preco_material_w.nr_sequencia;
	vl_liberado_w 	:= (vl_material_w * qt_autorizada_w);
	
	select	pls_obter_se_copartic(cd_guia_w, nr_seq_segurado_w, null, null)
	into STRICT	ie_gerar_copartic_w
	;
		
	if (ie_gerar_copartic_w = 'N') then
		if (ie_tipo_guia_w in ('1','5','6','7','8')) then
			ie_tipo_atend_w	:= 'I';
		elsif (ie_tipo_guia_w in ('2','3','4')) then
			ie_tipo_atend_w	:= 'E';
		end if;
		
		open c01;
		loop
		fetch c01 into	
			nr_seq_coparticipacao_w,
			nr_seq_tipo_coparticipacao_w,
			tx_coparticipacao_w,
			vl_maximo_w,
			ie_tipo_atendimento_w,
			vl_copartic_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			if (ie_tipo_atendimento_w = ie_tipo_atend_w) or (ie_tipo_atendimento_w = 'A') then
				cont_w := 0;
				
				if (nr_seq_clinica_w <> 0) then /*Verifica se tem regra de tipo de atendimento cadastrado*/
					select	count(*)
					into STRICT	cont_w
					from	pls_tipo_coparticipacao a,
						pls_coparticipacao_proc b
					where	a.nr_sequencia				= nr_seq_tipo_coparticipacao_w
					and	coalesce(b.nr_seq_clinica,nr_seq_clinica_w)	= nr_seq_clinica_w
					and	a.ie_situacao	= 'A';
				end if;
				
				if (ie_tipo_guia_w in ('1','8')) and (cont_w > 0) then /*Se entra no if para o valor de coparticipacao fixo*/
					select	max(b.nr_sequencia),
						max(b.ie_liberado)
					into STRICT	nr_seq_copartic_w,
						ie_liberado_w
					from	pls_tipo_coparticipacao a,
						pls_coparticipacao_proc b
					where	a.nr_sequencia				= nr_seq_tipo_coparticipacao_w
					and	coalesce(b.nr_seq_clinica,nr_seq_clinica_w)	= nr_seq_clinica_w
					and	a.ie_situacao	= 'A';
					
					select	count(*)
					into STRICT	qt_coparticipacao_w
					from	pls_guia_coparticipacao
					where	nr_seq_guia_mat = nr_seq_guia_mat_w;
					
					if (coalesce(ie_liberado_w,'N') = 'S') and (coalesce(vl_copartic_w,0) > 0) and (qt_coparticipacao_w > 0) then
						vl_coparticipacao_w	:= vl_copartic_w;
						
						insert into pls_guia_coparticipacao(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_guia,
								vl_coparticipacao,
								nr_seq_regra,
								nr_seq_regra_copartic)
							values (nextval('pls_guia_coparticipacao_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_guia_p,
								vl_coparticipacao_w,
								nr_seq_regra_w,
								nr_seq_coparticipacao_w);
					end if;
				end if;
				
				open c04;
				loop
				fetch c04 into	
					nr_seq_copartic_w,
					ie_lib_regra_w,
					nr_seq_estrut_regra_w;
				EXIT WHEN NOT FOUND; /* apply on c04 */
					begin
					ie_estrut_mat_w	:= 'S';
					if (nr_seq_estrut_regra_w IS NOT NULL AND nr_seq_estrut_regra_w::text <> '') then
						if (pls_obter_se_mat_estrutura(nr_seq_material_w, nr_seq_estrut_regra_w) = 'N') then
							ie_estrut_mat_w	:= 'N';
						end if;
					end if;
					
					if (ie_estrut_mat_w = 'S') then
						ie_liberado_w	:= ie_lib_regra_w;
					end if;
					end;
				end loop;
				close c04;
				
				if (coalesce(ie_liberado_w,'N') = 'S') then
					select	count(*)
					into STRICT	qt_registros_w
					from	pls_guia_coparticipacao
					where	nr_seq_guia_mat = nr_seq_guia_mat_w;
					
					if (qt_registros_w = 0) then
						vl_copartic_unit_w	:= ((coalesce(vl_unitario_w,0) * tx_coparticipacao_w) / 100);
						
						if (vl_maximo_w	> 0) and (vl_copartic_unit_w > vl_maximo_w) then
							vl_coparticipacao_w := (vl_maximo_w * qt_autorizada_w);
							vl_copartic_unit_w := vl_maximo_w;
						else
							vl_coparticipacao_w	:= ((coalesce(vl_liberado_w,0) * tx_coparticipacao_w) / 100);
						end if;
						
						if (coalesce(vl_coparticipacao_w,0) > 0) then
							insert into pls_guia_coparticipacao(nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								nm_usuario_nrec,
								nr_seq_guia,
								nr_seq_guia_mat,
								vl_coparticipacao,
								nr_seq_regra,
								nr_seq_regra_copartic)
							values (nextval('pls_guia_coparticipacao_seq'),
								clock_timestamp(),
								nm_usuario_p,
								clock_timestamp(),
								nm_usuario_p,
								nr_seq_guia_p,
								nr_seq_guia_mat_w,
								vl_coparticipacao_w,
								nr_seq_regra_w,
								nr_seq_coparticipacao_w);
						end if;
					end if;
				end if;
			end if;
			end;
		end loop;
		close c01;
	end if;
	end;
end loop;
close C03;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_estimativa_copartic ( nr_seq_guia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

