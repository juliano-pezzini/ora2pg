-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_prest_rede_ref_v40 (( nr_seq_movimento_p ptu_movimento_prestador.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_acao_p text) is tb_nm_fantasia_w dbms_sql.varchar2_table) RETURNS varchar AS $body$
DECLARE

ds_retorno_w		varchar(32000) := '';
ds_tipo_operacao_in_w	varchar(1000):= '';


BEGIN

-- monta o in conforme parametros
if (coalesce(ie_prod_intercambio_a450_p, 'S') = 'S') then

	ds_tipo_operacao_in_w :=	ds_tipo_operacao_in_w || '''T'''||',';
end if;

if (coalesce(ie_prod_ops_cong_a450_p, 'S') = 'S') then

	ds_tipo_operacao_in_w :=	ds_tipo_operacao_in_w || '''C'''||',';
end if;

if (coalesce(ie_prod_plano_saude_a450_p, 'S') = 'S') then

	ds_tipo_operacao_in_w :=	ds_tipo_operacao_in_w || '''B'''||',';
end if;

if (coalesce(ie_prod_serv_adic_a450_p, 'S') = 'S') then

	ds_tipo_operacao_in_w :=	ds_tipo_operacao_in_w || '''A'''||',';
end if;


-- Remove a ultima virgula
ds_tipo_operacao_in_w	:= substr(ds_tipo_operacao_in_w, 1, length(ds_tipo_operacao_in_w) -1);

ds_retorno_w	:=	'select	distinct ' || pls_util_pck.enter_w ||
			'	d.cd_rede, ' || pls_util_pck.enter_w ||
			'	decode(:ie_produto_a450_p, ''NM'', substr(f.nm_fantasia,1,255), substr(f.ds_plano, 1,255)), ' || pls_util_pck.enter_w ||
			'	decode(f.cd_scpa,null,1,2) id_reg_plano_ans, ' || pls_util_pck.enter_w ||
			'	nvl(decode(:ie_reg_ans_a450_p, ''PS'', nvl(f.nr_protocolo_ans,f.cd_scpa), nvl(f.cd_scpa, f.nr_protocolo_ans)),substr(elimina_acentuacao(pls_obter_dados_produto(e.nr_seq_plano,''PA'')),1,20)) nr_protocolo_ans, ' || pls_util_pck.enter_w ||
			'	decode(f.ie_tipo_contratacao,''I'',1,''CE'',2,''CA'',3,null), ' || pls_util_pck.enter_w ||
			'	decode(f.ie_situacao,''A'',1,''S'',2,''C'',3,''I'',2), ' || pls_util_pck.enter_w ||
			'	decode(f.ie_segmentacao,1,07,2,10,3,11,4,06,5,01,6,02,7,03,8,06,9,08,10,09,11,04,12,05), ' || pls_util_pck.enter_w ||
			'	decode(f.ie_acomodacao,''C'',''A'',''I'',''B'',''N'',''C''), ' || pls_util_pck.enter_w ||
			'	decode(f.ie_abrangencia,''N'',''1'',''GE'',''2'',''E'',''3'',''GM'',''4'',''M'',''5''), ' || pls_util_pck.enter_w ||
			'	decode(substr(d.cd_rede,1,2),''NA'',null,d.ie_tipo_rede_min) ie_tipo_rede_min ' || pls_util_pck.enter_w ||
			'from	pls_plano		f, ' || pls_util_pck.enter_w ||
			'	ptu_rede_ref_produto	e, ' || pls_util_pck.enter_w ||
			'	ptu_rede_referenciada	d, ' || pls_util_pck.enter_w ||
			'	ptu_prestador_rede_ref	c, ' || pls_util_pck.enter_w ||
			'	ptu_prestador		b, ' || pls_util_pck.enter_w ||
			'	ptu_movimento_prestador	a ' || pls_util_pck.enter_w ||
			'where	a.nr_sequencia		= b.nr_seq_movimento ' || pls_util_pck.enter_w ||
			'and	c.nr_seq_prestador	= b.nr_sequencia ' || pls_util_pck.enter_w ||
			'and	d.cd_rede		= c.cd_rede ' || pls_util_pck.enter_w ||
			'and	f.cd_rede_refer_ptu	= d.cd_rede ' || pls_util_pck.enter_w ||
			'and	d.cd_rede		= e.cd_rede(+) ' || pls_util_pck.enter_w ||
			'and	f.ie_tipo_operacao	in ('||ds_tipo_operacao_in_w||') ' || pls_util_pck.enter_w ||
			'and	exists	(select	1 ' || pls_util_pck.enter_w ||
			'		from	pls_segurado	x ' || pls_util_pck.enter_w ||
			'		where	x.nr_seq_plano	= f.nr_sequencia ' || pls_util_pck.enter_w ||
			'		and	pls_obter_dados_segurado(x.nr_sequencia,''CS'') = ''A'') ' || pls_util_pck.enter_w ||
			'and	a.nr_sequencia	= :nr_seq_movimento_pc ' || pls_util_pck.enter_w ||
			'and	nvl(f.ie_env_a450_sem_a400,''N'') = ''N'' ' || pls_util_pck.enter_w ||
			'union ' || pls_util_pck.enter_w ||
			'select	distinct ' || pls_util_pck.enter_w ||
			'	d.cd_rede, ' || pls_util_pck.enter_w ||
			'	decode(:ie_produto_a450_p, ''NM'', substr(f.nm_fantasia,1,255), substr(f.ds_plano, 1,255)), ' || pls_util_pck.enter_w ||
			'	decode(f.cd_scpa,null,1,2) id_reg_plano_ans, ' || pls_util_pck.enter_w ||
			'	nvl(decode(:ie_reg_ans_a450_p, ''PS'', nvl(f.nr_protocolo_ans,f.cd_scpa), nvl(f.cd_scpa, f.nr_protocolo_ans)),substr(elimina_acentuacao(pls_obter_dados_produto(e.nr_seq_plano,''PA'')),1,20)) nr_protocolo_ans, ' || pls_util_pck.enter_w ||
			'	decode(f.ie_tipo_contratacao,''I'',1,''CE'',2,''CA'',3,null), ' || pls_util_pck.enter_w ||
			'	decode(f.ie_situacao,''A'',1,''S'',2,''C'',3,''I'',2), ' || pls_util_pck.enter_w ||
			'	decode(f.ie_segmentacao,1,07,2,10,3,11,4,06,5,01,6,02,7,03,8,06,9,08,10,09,11,04,12,05), ' || pls_util_pck.enter_w ||
			'	decode(f.ie_acomodacao,''C'',''A'',''I'',''B'',''N'',''C''), ' || pls_util_pck.enter_w ||
			'	decode(f.ie_abrangencia,''N'',''1'',''GE'',''2'',''E'',''3'',''GM'',''4'',''M'',''5''), ' || pls_util_pck.enter_w ||
			'	decode(substr(d.cd_rede,1,2),''NA'',null,d.ie_tipo_rede_min) ie_tipo_rede_min ' || pls_util_pck.enter_w ||
			'from	pls_plano		f, ' || pls_util_pck.enter_w ||
			'	ptu_rede_ref_produto	e, ' || pls_util_pck.enter_w ||
			'	ptu_rede_referenciada	d ' || pls_util_pck.enter_w ||
			'where	1 = 1 ' || pls_util_pck.enter_w ||
			'and	f.cd_rede_refer_ptu	= d.cd_rede ' || pls_util_pck.enter_w ||
			'and	d.cd_rede		= e.cd_rede(+) ' || pls_util_pck.enter_w ||
			'and	f.ie_tipo_operacao	in ('||ds_tipo_operacao_in_w||') ' || pls_util_pck.enter_w ||
			'and	exists	(select	1 ' || pls_util_pck.enter_w ||
			'		from	pls_segurado	x ' || pls_util_pck.enter_w ||
			'		where	x.nr_seq_plano	= f.nr_sequencia ' || pls_util_pck.enter_w ||
			'		and	pls_obter_dados_segurado(x.nr_sequencia,''CS'') = ''A'') ' || pls_util_pck.enter_w ||
			'and	f.ie_env_a450_sem_a400 = ''S'' ';

dados_bind_p := sql_pck.bind_variable(':nr_seq_movimento_pc', nr_seq_lote_sip_p, dados_bind_p);
dados_bind_p := sql_pck.bind_variable(':ie_produto_a450_p', ie_produto_a450_p, dados_bind_p);
dados_bind_p := sql_pck.bind_variable(':ie_reg_ans_a450_p', ie_reg_ans_a450_p, dados_bind_p);

return ds_retorno_w;

end;

begin
-- Preparar os parâmetros para não estarem nulos
update	pls_parametros
set	ie_prod_intercambio_a450	= coalesce(ie_prod_intercambio_a450,'N'), -- Por padrão não se envia produto de intercâmbio
	ie_prod_ops_cong_a450		= coalesce(ie_prod_ops_cong_a450,'S'),
	ie_prod_plano_saude_a450	= coalesce(ie_prod_plano_saude_a450,'S'),
	ie_prod_serv_adic_a450		= coalesce(ie_prod_serv_adic_a450,'S');

if (ie_acao_p = 'G') then
--ald foi criado na pls_parametros dois campos para validar qual informação será enviada no A450 sendo eles
-- Função OPS - Gestão de Operadoras, pasta Parâmetros da OPS> Intercâmbio> Parâmetros do Intercâmbio,  "Gerar nome produto (A450)", com as opções "Nome fantasia" (default) e "Produto".
--Função OPS - Gestão de Operadoras, pasta Parâmetros da OPS> Intercâmbio> Parâmetros do Intercâmbio,  "Gerar registro ANS (A450)", com as opções "Protocolo ANS ou SCPA" (default) e "SCPA ou Protocolo ANS".
	select	coalesce(max(ie_produto_a450), 'NM'),
		coalesce(max(ie_reg_ans_a450), 'PS'),
		coalesce(max(ie_prod_intercambio_a450),'S'),
		coalesce(max(ie_prod_ops_cong_a450),'S'),
		coalesce(max(ie_prod_plano_saude_a450),'S'),
		coalesce(max(ie_prod_serv_adic_a450),'S')
	into STRICT	ie_produto_a450_w,
		ie_reg_ans_a450_w,
		ie_prod_intercambio_a450_w,
		ie_prod_ops_cong_a450_w,
		ie_prod_plano_saude_a450_w,
		ie_prod_serv_adic_a450_w
	from	pls_parametros
	where	cd_estabelecimento = cd_estabelecimento_p;

	-- Verifica se tem algum parametro que inclui produto, se não tiver, nem realiza a busca.
	if	((ie_prod_intercambio_a450_w = 'S') or (ie_prod_ops_cong_a450_w = 'S') or (ie_prod_plano_saude_a450_w = 'S') or (ie_prod_serv_adic_a450_w = 'S')) then

		dados_bind_w.delete;

		-- monta o sql dinamico
		sql_cur_w := retorna_sql_produtos(	nr_seq_movimento_p,
							ie_prod_intercambio_a450_w,
							ie_prod_ops_cong_a450_w,
							ie_prod_plano_saude_a450_w,
							ie_prod_serv_adic_a450_w,
							ie_produto_a450_w,
							ie_reg_ans_a450_w,
							dados_bind_w);
		-- abre o cursor
		dados_bind_w := sql_pck.executa_sql_cursor(sql_cur_w, dados_bind_w);

		-- carrega o cursor e manda para o banco
		loop
		fetch rc_cursor_w bulk collect into	tb_cd_rede_w,
							tb_nm_fantasia_w,
							tb_ie_reg_plano_ans_w,
							tb_nr_protocolo_ans_w,
							tb_ie_classif_plano_w,
							tb_ie_situacao_ans_w,
							tb_ie_seg_produto_w,
							tb_ie_acomodacao_w,
							tb_ie_abrangencia_w,
							tb_ie_tipo_rede_min_w	limit pls_util_pck.qt_registro_transacao_w;

		exit when tb_cd_rede_w.count = 0;

			forall i in tb_cd_rede_w.first..tb_cd_rede_w.last
				insert into ptu_movimento_rede_ref(	nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_movimento,
						nr_reg_plano_ans,
						ie_classif_plano,
						ie_reg_plano_ans,
						ie_seg_produto,
						ie_situacao_ans,
						cd_rede,
						nm_com_prod,
						ie_acomodacao,
						ie_abrangencia,
						tipo_rede_min)
				values (	nextval('ptu_movimento_rede_ref_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_movimento_p,
						tb_nr_protocolo_ans_w(i),
						tb_ie_classif_plano_w(i),
						tb_ie_reg_plano_ans_w(i),
						tb_ie_seg_produto_w(i),
						tb_ie_situacao_ans_w(i),
						tb_cd_rede_w(i),
						tb_nm_fantasia_w(i),
						tb_ie_acomodacao_w(i),
						tb_ie_abrangencia_w(i),
						tb_ie_tipo_rede_min_w(i));


			tb_cd_rede_w.delete;
			tb_nm_fantasia_w.delete;
			tb_ie_reg_plano_ans_w.delete;
			tb_nr_protocolo_ans_w.delete;
			tb_ie_classif_plano_w.delete;
			tb_ie_situacao_ans_w.delete;
			tb_ie_seg_produto_w.delete;
			tb_ie_acomodacao_w.delete;
			tb_ie_abrangencia_w.delete;
			tb_ie_tipo_rede_min_w.delete;

		end loop;

		if (rc_cursor_w%isopen) then

			close rc_cursor_w;
		end if;
	end if; -- fim se tem alguma opçao informada nos parametros
	CALL ptu_gerar_movimento_exc_plano( nr_seq_movimento_p, cd_estabelecimento_p, nm_usuario_p);

	update	ptu_movimento_prestador
	set	dt_geracao_a450	= clock_timestamp()
	where	nr_sequencia	= nr_seq_movimento_p;

elsif (ie_acao_p = 'E') then
	delete	FROM ptu_movimento_plan_rede a
	where	exists (SELECT	1
			from	ptu_movimento_exc_plano x
			where	x.nr_seq_movimento	= nr_seq_movimento_p);

	delete	FROM ptu_movimento_exc_plano a
	where	a.nr_seq_movimento	= nr_seq_movimento_p;

	delete	FROM ptu_movimento_rede_ref	a
	where	a.nr_seq_movimento	= nr_seq_movimento_p;

	update	ptu_movimento_prestador
	set	dt_geracao_a450  = NULL
	where	nr_sequencia	= nr_seq_movimento_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_prest_rede_ref_v40 (( nr_seq_movimento_p ptu_movimento_prestador.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ie_acao_p text) is tb_nm_fantasia_w dbms_sql.varchar2_table) FROM PUBLIC;

