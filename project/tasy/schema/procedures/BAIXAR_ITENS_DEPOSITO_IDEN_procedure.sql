-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE baixar_itens_deposito_iden ( nr_seq_deposito_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_commit_p text, nr_seq_lote_p bigint) AS $body$
DECLARE


ie_tit_saldo_w			varchar(255);
-- Títulos
vl_saldo_titulo_w			double precision;

nr_titulo_w			bigint;
nr_seq_conta_banco_w		bigint;
nr_seq_trans_financ_w		bigint;
cd_tipo_recebimento_w		bigint;

-- Cheques
cd_identif_dep_w		varchar(50);
cd_identificacao_w		varchar(30);
ie_valor_deposito_w		varchar(3);
ie_valor_dep_w			varchar(3);
ie_digito_ident_w		varchar(2);
vl_saldo_negociado_w		double precision;
vl_depositado_w			double precision; -- Valor depositado (real)
vl_deposito_w			double precision; -- Valor que se espera deposito
vl_total_deposito_w		double precision; -- Valor total do que se espera deposito
vl_baixado_w			double precision; -- Valor à ser baixado
vl_baixado_ww			double precision; -- Valor à ser baixado
vl_maximo_amortizacao_w		double precision;
vl_devolver_w			double precision := 0; -- Valor à devolver (nota de crédito)
vl_descontos_w			double precision;
vl_devolver_ww			double precision;
vl_tributo_w			double precision;
vl_juros_w			double precision	:= 0;
vl_multa_w			double precision	:= 0;
nr_seq_cheque_w			bigint;
nr_seq_baixa_w			bigint;
qt_registro_w			bigint := 0;
nr_seq_movto_trans_fin_w	bigint	:= null;
nr_seq_movto_pend_w		bigint;
nr_seq_trans_financ_ww		bigint;
nr_seq_ret_dep_w		bigint;
dt_recebimento_w		timestamp;
ie_valor_amenor_w		varchar(15);
vl_depositado_amortizacao_w 	double precision;
/* Projeto Multimoeda - Variáveis */

vl_baixa_estrang_w		double precision;
vl_cotacao_w			cotacao_moeda.vl_cotacao%type;

C01 CURSOR FOR
	SELECT	nr_titulo
	from	deposito_ident_titulo
	where	nr_seq_deposito	= nr_seq_deposito_p;

C02 CURSOR FOR
	SELECT	nr_seq_cheque
	from	deposito_ident_cheque
	where	nr_seq_deposito	= nr_seq_deposito_p;


BEGIN
select	coalesce(vl_deposito,0)		-- Valor total a ser depositado
into STRICT	vl_total_deposito_w
from	deposito_identificado
where	nr_sequencia	= nr_seq_deposito_p;

begin
select	nr_seq_trans_financ,		-- Obter parâmetros da função
	cd_tipo_recebimento,
	vl_maximo_amortizacao,
	coalesce(ie_tit_saldo, 'S'),
	coalesce(ie_valor_amenor, 'N')
into STRICT	nr_seq_trans_financ_w,
	cd_tipo_recebimento_w,
	vl_maximo_amortizacao_w,
	ie_tit_saldo_w,
	ie_valor_amenor_w
from	parametro_deposito_ident
where	cd_estabelecimento	= cd_estabelecimento_p;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(182703);
end;

vl_baixado_ww	:= 0;

open C01;
loop
fetch C01 into
	nr_titulo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	vl_devolver_ww	:= 0;

	select	coalesce(a.vl_saldo_titulo, 0),
		coalesce(a.vl_saldo_juros, 0),
		coalesce(a.vl_saldo_multa, 0)
	into STRICT	vl_saldo_titulo_w,
		vl_juros_w,
		vl_multa_w
	from	titulo_receber a
	where	a.nr_titulo	= nr_titulo_w;

	select	coalesce(sum(vl_tributo),0)
	into STRICT	vl_tributo_w
	from	titulo_receber_trib
	where	nr_titulo	= nr_titulo_w
	and	coalesce(ie_origem_tributo, 'C') in ('D', 'CD');

	if (vl_saldo_titulo_w <= 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(182702);
	end if;

	select	count(1)
	into STRICT	qt_registro_w
	from	movto_banco_pend_baixa
	where	nr_seq_deposito_ident	= nr_seq_deposito_p;

	-- Valor cobrado,  à depositar
	select	coalesce(a.vl_depositar,0),
		b.nr_identificacao,
		b.nr_seq_conta_banco,
		b.ie_digito_ident
	into STRICT	vl_deposito_w,
		cd_identificacao_w,
		nr_seq_conta_banco_w,
		ie_digito_ident_w
	from	deposito_identificado	b,
		deposito_ident_titulo	a
	where	a.nr_seq_deposito	= b.nr_sequencia
	and	a.nr_seq_deposito	= nr_seq_deposito_p
	and	a.nr_titulo		= nr_titulo_w;

	cd_identif_dep_w	:= somente_numero(cd_identificacao_w || ie_digito_ident_w);


	select	coalesce(sum(a.vl_deposito),0),		-- Real valor depositado
		max(a.dt_deposito)
	into STRICT	vl_depositado_w,
		dt_recebimento_w
	from	lote_ret_deposito_ident	b,
		lote_ret_dep_ident_item	a
	where	a.nr_seq_lote		= b.nr_sequencia
	and	a.cd_identificacao	= cd_identificacao_w
	and	b.nr_seq_conta_banco	= nr_seq_conta_banco_w
	and	b.nr_sequencia		= nr_seq_lote_p
	and	coalesce(a.ds_erro_baixa::text, '') = '';

	if (vl_depositado_w = 0) then
		select	coalesce(sum(a.vl_deposito),0),		-- Real valor depositado
			max(a.dt_deposito),
			max(a.nr_sequencia)
		into STRICT	vl_depositado_w,
			dt_recebimento_w,
			nr_seq_ret_dep_w
		from	lote_ret_deposito_ident	b,
			lote_ret_dep_ident_item	a
		where	a.nr_seq_lote		= b.nr_sequencia
		and	a.cd_identificacao	= cd_identif_dep_w
		and	b.nr_seq_conta_banco	= nr_seq_conta_banco_w
		and	b.nr_sequencia		= nr_seq_lote_p
		and	coalesce(a.ds_erro_baixa::text, '') = '';

		if (nr_seq_ret_dep_w IS NOT NULL AND nr_seq_ret_dep_w::text <> '') then
			update  lote_ret_dep_ident_item
			set	ds_erro_baixa	= ''
			where 	nr_sequencia	= nr_seq_ret_dep_w;
		end if;
	end if;

	if (vl_depositado_w = 0) and (qt_registro_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186706);
	end if;

	nr_seq_movto_trans_fin_w	:= null;

	/* Caso tenha crédito não identificado */

	if (qt_registro_w > 0) and (vl_depositado_w = 0) then
		select (coalesce(a.vl_baixa,0) + coalesce(a.vl_juros,0) + coalesce(a.vl_multa,0)),
			a.nr_seq_movto_pend
		into STRICT	vl_depositado_w,
			nr_seq_movto_pend_w
		from	movto_banco_pend_baixa	a
		where	a.nr_seq_deposito_ident	= nr_seq_deposito_p
		and	a.nr_titulo		= nr_titulo_w;

		select	max(a.nr_seq_movto_trans_fin)
		into STRICT	nr_seq_movto_trans_fin_w
		from	movto_banco_pend	a
		where	a.nr_sequencia	= nr_seq_movto_pend_w;

		select	max(nr_seq_trans_financ)
		into STRICT	nr_seq_trans_financ_ww
		from	movto_trans_financ
		where	nr_sequencia	= nr_seq_movto_trans_fin_w;

		if (vl_depositado_w = 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(186707);
		end if;
	end if;

	vl_depositado_amortizacao_w := vl_depositado_w + coalesce(vl_maximo_amortizacao_w, 0);

	if (ie_valor_amenor_w = 'S') then
		begin
		if (vl_depositado_amortizacao_w > coalesce(vl_deposito_w,0)) then
			if (ie_tit_saldo_w = 'C') then
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(324735, 'NR_TITULO_W='||nr_titulo_w);
			end if;
		end if;

		if (vl_depositado_amortizacao_w < coalesce(vl_deposito_w,0)) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(324724, 'NR_TITULO_W='||nr_titulo_w);
		end if;
		end;
	elsif ((vl_depositado_w - coalesce(vl_deposito_w,0)) > (coalesce(vl_maximo_amortizacao_w, 0))) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(324735, 'NR_TITULO_W='||nr_titulo_w);
	end if;

	vl_baixado_w	:= dividir_sem_round(vl_deposito_w, vl_total_deposito_w) * vl_depositado_w;

	update	deposito_ident_titulo
	set	vl_depositado	= vl_baixado_w
	where	nr_titulo	= nr_titulo_w
	and	nr_seq_deposito	= nr_seq_deposito_p;

	vl_baixado_ww	:= vl_baixado_ww + vl_baixado_w;

	if (vl_baixado_w >= vl_deposito_w) then		-- Valor à devolver (nota de crédito)
		vl_devolver_ww	:= vl_baixado_w - (vl_saldo_titulo_w - vl_tributo_w);
		vl_devolver_w	:= vl_devolver_w + (vl_baixado_w - vl_deposito_w);
		vl_baixado_w	:= vl_baixado_w - vl_devolver_ww;
	elsif (vl_deposito_w - vl_baixado_w <= vl_maximo_amortizacao_w) then
		vl_descontos_w	:= vl_deposito_w - vl_baixado_w;
		vl_baixado_w	:= vl_deposito_w;
		ie_valor_dep_w	:= 'VDI';

		if (vl_baixado_w > vl_saldo_titulo_w) and (vl_deposito_w <> vl_baixado_w) and (qt_registro_w > 0) then
			vl_devolver_ww	:= vl_baixado_w - (vl_saldo_titulo_w - vl_tributo_w);
			vl_baixado_w	:= vl_baixado_w - vl_devolver_ww;

			vl_devolver_ww	:= 0;
		end if;
	end if;


	-- Baixa do depósito
	CALL baixa_titulo_receber_dep_ident(	cd_estabelecimento_p,
					cd_tipo_recebimento_w,
					nr_titulo_w,
					coalesce(nr_seq_trans_financ_ww,nr_seq_trans_financ_w),
					vl_baixado_w,
					coalesce(dt_recebimento_w,clock_timestamp()),
					nm_usuario_p,
					nr_seq_deposito_p,
					vl_devolver_ww,
					null,
					null,
					null);

	-- Atualizar saldo título receber
	CALL atualizar_saldo_tit_rec(nr_titulo_w,
				nm_usuario_p);

	select	max(nr_sequencia)
	into STRICT	nr_seq_baixa_w
	from	titulo_receber_liq
	where	nr_titulo	= nr_titulo_w;


	if (ie_valor_dep_w = 'VDI') then		-- Amortização
		update	titulo_receber_liq
		set	vl_descontos	= vl_descontos_w,
			vl_recebido     = vl_recebido - vl_descontos_w
		where	nr_sequencia	= nr_seq_baixa_w
		and	nr_titulo	= nr_titulo_w;

		/* Projeto Multimoeda - Busca os dados da baixa para verificar se é moeda estrangeira, caso for atualiza o valor recebido em moeda estrangeira*/

		select	max(vl_recebido_estrang),
			max(vl_cotacao)
		into STRICT	vl_baixa_estrang_w,
			vl_cotacao_w
		from	titulo_receber_liq
		where	nr_sequencia = nr_seq_baixa_w
		and	nr_titulo = nr_titulo_w;
		if (coalesce(vl_baixa_estrang_w,0) <> 0 and coalesce(vl_cotacao_w,0) <> 0) then
			update	titulo_receber_liq
			set	vl_recebido_estrang = vl_recebido_estrang - (vl_descontos_w / vl_cotacao)
			where	nr_sequencia = nr_seq_baixa_w
			and	nr_titulo = nr_titulo_w;
		end if;
	end if;



	if (nr_seq_baixa_w IS NOT NULL AND nr_seq_baixa_w::text <> '') then
		-- Gera movimentação financeira para permitir conciliação bancária
		CALL gerar_movto_tit_baixa(	nr_titulo_w,
					nr_seq_baixa_w,
					'R',
					nm_usuario_p,
					'N');
	end if;


	begin
	select	vl_devolver_w - coalesce(a.vl_recebido, 0)
	into STRICT	vl_devolver_w
	from	titulo_receber_liq a
	where	a.nr_titulo	= nr_titulo_w
	and	(a.nr_seq_amortizacao IS NOT NULL AND a.nr_seq_amortizacao::text <> '');
	exception
	when others then
		null;
	end;
	end;
end loop;
close C01;

/* Aredondamento */

if (vl_baixado_ww <> vl_depositado_w) then
	update	titulo_receber_liq
	set	vl_rec_maior	= vl_rec_maior + (vl_depositado_w - vl_baixado_ww)
	where	nr_sequencia	= nr_seq_baixa_w
	and	nr_titulo	= nr_titulo_w;

	CALL atualizar_saldo_tit_rec(nr_titulo_w,
				nm_usuario_p);
end if;

if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
	if (vl_devolver_ww > 0) and ((vl_saldo_titulo_w = 0) or (ie_tit_saldo_w = 'S')) then
		CALL pls_gerar_nota_cred_dep_ident(	nr_seq_deposito_p,
						vl_devolver_w,
						cd_estabelecimento_p,
						nr_titulo_w,
						nm_usuario_p); -- Gerar nota de crédito para os valores de deposito a maior
		ie_valor_deposito_w	:= 'VMA'; -- Valor a maior
	elsif (vl_depositado_w < vl_total_deposito_w) then
		ie_valor_deposito_w	:= 'VME'; -- Valor a menor
	else
		ie_valor_deposito_w	:= 'VDI'; -- Valor depositado igual o previsto
	end if;
end if;

open C02;
loop
fetch C02 into
	nr_seq_cheque_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	select	vl_saldo_negociado
	into STRICT	vl_saldo_negociado_w
	from	cheque_cr
	where	nr_seq_cheque	= nr_seq_cheque_w;

	if (vl_saldo_negociado_w <= 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(186708);
	end if;

	update	cheque_cr
	set	dt_devolucao	= clock_timestamp()
	where	nr_seq_cheque	= nr_seq_cheque_w;
	end;
end loop;
close C02;

update	deposito_identificado
set	nm_usuario		= nm_usuario_p,
	ie_status		= 'D',
	dt_deposito		= coalesce(dt_recebimento_w, clock_timestamp()),
	ie_valor_deposito	= coalesce(ie_valor_dep_w, ie_valor_deposito_w)
where	nr_sequencia		= nr_seq_deposito_p;

if (coalesce(ie_commit_p, 'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE baixar_itens_deposito_iden ( nr_seq_deposito_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_commit_p text, nr_seq_lote_p bigint) FROM PUBLIC;

