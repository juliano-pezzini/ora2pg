-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_tit_pagar_fatura ( nr_seq_fatura_p bigint, nr_seq_acao_p bigint, ie_tipo_tit_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
IE_TIPO_TIT_P
G - Geral        	N - NDC		F - Fatura
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/nr_lote_contabil_w		lote_contabil.nr_lote_contabil%type;
nr_titulo_w			bigint;
nr_titulo_ndc_w			bigint;
nr_fatura_w			ptu_fatura.nr_fatura%type;
nr_nota_credito_debito_w	varchar(30);
vl_total_fatura_w		double precision;
vl_total_ndc_w			double precision;
dt_emissao_fatura_w		timestamp;
dt_emissao_ndc_w		timestamp;
dt_vencimento_fatura_w		timestamp;
dt_vencimento_ndc_w		timestamp;
cd_unimed_origem_w		varchar(4);
dt_recebimento_fatura_w		timestamp;
tx_juros_cp_w			double precision;
tx_multa_cp_w			double precision;
cd_moeda_cp_w			integer;
cd_tipo_taxa_juro_cp_w		bigint;
cd_tipo_taxa_multa_cp_w		bigint;
nr_seq_trans_fin_baixa_w	bigint;
nr_seq_trans_fin_contab_w	bigint;
ie_tipo_titulo_pagar_w		varchar(5);
ie_status_tit_pagar_w		varchar(3);
ie_tit_pagar_lib_pagamento_w	varchar(1);
qt_dias_antes_a500_w		bigint := 0;
vl_titulo_w			double precision;
dt_emissao_w			timestamp;
dt_vencimento_w			timestamp;
cd_cgc_w			varchar(14);
nr_seq_congenere_w		bigint;
nr_seq_congenere_ww		bigint;
nr_seq_camara_w			bigint;
cd_cooperativa_w		varchar(10);
dt_venc_consistencia_w		timestamp;
nr_seq_periodo_w		bigint;
ds_camara_w			varchar(255);
dt_saldo_credor_ini_w		timestamp;
dt_saldo_credor_fim_w		timestamp;
nr_documento_w			numeric(20) := 0;
cd_conta_financ_cp_w		bigint;
nr_seq_classif_w		bigint;
ie_tipo_tit_w			varchar(2);
nr_seq_classe_w			bigint;
ie_classif_cobranca_w		varchar(1);
nr_seq_acao_w			bigint;
dt_postagem_w			ptu_fatura.dt_postagem%type;
cd_unimed_destino_w		ptu_fatura.cd_unimed_destino%type;
vl_ir_w				ptu_fatura.vl_ir%type;
nr_seq_tipo_coop_orig_w		pls_congenere.nr_seq_tipo_coop%type;
nr_seq_tipo_coop_dest_w		pls_congenere.nr_seq_tipo_coop%type;
cd_tributo_w			tributo.cd_tributo%type;
nr_seq_imposto_w		titulo_pagar_imposto.nr_sequencia%type;
cd_retencao_w			tributo.cd_retencao%type;
dt_mes_competencia_w    	ptu_fatura.dt_mes_competencia%type;
ds_observacao_titulo_w		titulo_pagar.ds_observacao_titulo%type := 'Titulo gerado a partir da importacao do A500';
ie_tipo_congenere_w		pls_congenere.ie_tipo_congenere%type;
sg_estado_orig_w		pessoa_juridica.sg_estado%type;
sg_estado_dest_w		pessoa_juridica.sg_estado%type;
ie_tipo_intercambio_w		varchar(1) := 'T';
ie_data_venc_tit_a500_w		pls_parametros.ie_data_venc_tit_a500%type;
tp_documento_1_w		ptu_fatura.tp_documento_1%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		cd_cooperativa
	from	pls_congenere;
	
C02 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_camara_calendario		b,
		pls_camara_calend_periodo	a
	where	a.nr_seq_calendario	= b.nr_sequencia
	and	b.nr_seq_camara		= nr_seq_camara_w
	and	a.dt_limite_a500 between dt_saldo_credor_ini_w and dt_saldo_credor_fim_w
	order by a.dt_limite_a500 desc;
	
c03 CURSOR(	nr_seq_fatura_pc	ptu_fatura.nr_sequencia%type,
		nr_titulo_pc		titulo_pagar.nr_titulo%type ) FOR
	SELECT	fa.ds_arquivo
	from	ptu_fatura_anexo fa
	where	fa.ie_boleto = 'S'
	and	fa.nr_seq_fatura = nr_seq_fatura_pc
	and	not exists (	SELECT	1
				from	titulo_pagar_arq pa
				where	pa.ds_arquivo	= fa.ds_arquivo
				and	pa.nr_titulo	= nr_titulo_pc);
	
BEGIN
select	coalesce(max(ie_data_venc_tit_a500),'DA')
into STRICT	ie_data_venc_tit_a500_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

ie_tipo_tit_w 	:= ie_tipo_tit_p;
nr_seq_acao_w	:= nr_seq_acao_p;

if (nr_seq_fatura_p IS NOT NULL AND nr_seq_fatura_p::text <> '') then
	select	coalesce(max(nr_lote_contabil),0)
	into STRICT	nr_lote_contabil_w
	from (SELECT	c.nr_lote_contabil
		from	pls_conta	a,
			pls_conta_proc	c
		where	a.nr_sequencia	= c.nr_seq_conta
		and	a.nr_seq_fatura	= nr_seq_fatura_p
		
union

		SELECT	c.nr_lote_contabil
		from	pls_conta	a,
			pls_conta_mat	c
		where	a.nr_sequencia	= c.nr_seq_conta
		and	a.nr_seq_fatura	= nr_seq_fatura_p) alias3;

	if (nr_lote_contabil_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(683938, 'NR_LOTE_CONTABIL=' || to_char(nr_lote_contabil_w)
								|| ';DS_TIPO_LOTE_CONTABIL=' || substr(ctb_obter_tipo_lote_contabil(nr_lote_contabil_w,'D'),1,255));
	end if;

	if (coalesce(nr_seq_acao_w::text, '') = '') then
		nr_seq_acao_w := pls_obter_acao_intercambio(	'1',  	-- Importacao do A500
						'10',  	-- Gerar titulo a pagar (Fatura)
						nr_seq_fatura_p, null, null, null, clock_timestamp(), 'A500', 'N', nr_seq_acao_w);
	end if;
	
	begin
	select	a.nr_fatura,
		a.nr_nota_credito_debito,
		coalesce(a.vl_total_fatura,0),
		coalesce(a.vl_total_ndc,0),
		a.dt_emissao_fatura,
		a.dt_emissao_ndc,
		a.dt_vencimento_fatura,
		a.dt_vencimento_ndc,
		a.cd_unimed_origem,
		a.dt_recebimento_fatura,
		a.nr_titulo,
		a.nr_titulo_ndc,
		a.ie_classif_cobranca,
		a.dt_postagem,
		a.cd_unimed_destino,
		a.vl_ir,
		a.dt_mes_competencia,
		a.tp_documento_1
	into STRICT	nr_fatura_w,
		nr_nota_credito_debito_w,
		vl_total_fatura_w,
		vl_total_ndc_w,
		dt_emissao_fatura_w,
		dt_emissao_ndc_w,
		dt_vencimento_fatura_w,
		dt_vencimento_ndc_w,
		cd_unimed_origem_w,
		dt_recebimento_fatura_w,
		nr_titulo_w,
		nr_titulo_ndc_w,
		ie_classif_cobranca_w,
		dt_postagem_w,
		cd_unimed_destino_w,
		vl_ir_w,
		dt_mes_competencia_w,
		tp_documento_1_w
	from	ptu_fatura	a
	where	a.nr_sequencia	= nr_seq_fatura_p;
	exception
	when others then
		ie_tipo_tit_w := null; -- Caso tenha problema, nao e gerado titulo
		nr_documento_w := 0;
	end;
	
	if (obter_se_lote_contabil_gerado(33,dt_mes_competencia_w) = 'S') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(682676);
	end if;
	
	if	((ie_tipo_tit_w = 'G') and (coalesce(nr_titulo_w::text, '') = '') and (coalesce(nr_titulo_ndc_w::text, '') = '')) or
		((ie_tipo_tit_w = 'F') and (coalesce(nr_titulo_w::text, '') = '')) or
		((ie_tipo_tit_w = 'N') and (coalesce(nr_titulo_ndc_w::text, '') = '')) then
		
		if (ie_tipo_tit_w = 'G') then
			vl_titulo_w := vl_total_fatura_w + vl_total_ndc_w;
			dt_emissao_w := coalesce(dt_emissao_fatura_w,dt_emissao_ndc_w);
			dt_venc_consistencia_w := coalesce(dt_vencimento_fatura_w,dt_vencimento_ndc_w);
			nr_documento_w := obter_somente_numero(coalesce(nr_fatura_w,nr_nota_credito_debito_w));
		
		elsif (ie_tipo_tit_w = 'F') and (ie_classif_cobranca_w in ('2','3')) then
			vl_titulo_w := vl_total_fatura_w;
			dt_emissao_w := dt_emissao_fatura_w;
			dt_venc_consistencia_w := dt_vencimento_fatura_w;
			nr_documento_w := obter_somente_numero(nr_fatura_w);
		
		elsif (ie_tipo_tit_w = 'N') and (ie_classif_cobranca_w in ('1','3')) then
			vl_titulo_w := vl_total_ndc_w;
			dt_emissao_w := dt_emissao_ndc_w;
			dt_venc_consistencia_w := dt_vencimento_ndc_w;
			nr_documento_w := obter_somente_numero(nr_nota_credito_debito_w);
		
		end if;
		
		if (coalesce(nr_documento_w,0) <> 0) then
			-- OBTER INFORMACOES PARA GERACAO DO TITULO
			begin
			select	a.cd_moeda_padrao,
				a.cd_tipo_taxa_juro,
				a.cd_tipo_taxa_multa,
				a.pr_juro_padrao,
				a.pr_multa_padrao
			into STRICT	cd_moeda_cp_w,
				cd_tipo_taxa_juro_cp_w,
				cd_tipo_taxa_multa_cp_w,
				tx_juros_cp_w,
				tx_multa_cp_w
			from	parametros_contas_pagar	a
			where	a.cd_estabelecimento	= cd_estabelecimento_p;
			exception
				when no_data_found then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(182852);
			end;
			
			if (nr_seq_acao_w IS NOT NULL AND nr_seq_acao_w::text <> '') then
				select 	nr_seq_trans_fin_baixa,
					nr_seq_trans_fin_contab,
					coalesce(ie_tipo_titulo_pagar, '23'),
					ie_status_tit_pagar,
					ie_tit_pagar_lib_pagamento,
					coalesce(qt_dias_antes_a500,0),
					nr_seq_classe
				into STRICT	nr_seq_trans_fin_baixa_w,
					nr_seq_trans_fin_contab_w,
					ie_tipo_titulo_pagar_w,
					ie_status_tit_pagar_w,
					ie_tit_pagar_lib_pagamento_w,
					qt_dias_antes_a500_w,
					nr_seq_classe_w
				from	pls_processo_interc_acao
				where	nr_sequencia 	= nr_seq_acao_w;
			else
				nr_seq_trans_fin_baixa_w	:= null;
				nr_seq_trans_fin_contab_w	:= null;
				ie_tipo_titulo_pagar_w 		:= '23'; -- 23 - Fatura
				nr_seq_classe_w			:= null;
			end if;
			
			if (ie_status_tit_pagar_w = 'P') then
				ie_tit_pagar_lib_pagamento_w	:= 'N';
			end if;
			
			-- OBTER CONGENERE
			nr_seq_congenere_ww	:= null;
			open C01;
			loop
			fetch C01 into	
				nr_seq_congenere_w,
				cd_cooperativa_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin
				if (somente_numero(cd_cooperativa_w) = somente_numero(cd_unimed_origem_w)) then
					nr_seq_congenere_ww	:= nr_seq_congenere_w;
					exit;
				end if;
				end;
			end loop;
			close C01;
			
			select	max(coalesce(b.cd_cgc, a.cd_cgc)),
				max(a.nr_sequencia)
			into STRICT	cd_cgc_w,
				nr_seq_congenere_w
			from	pls_congenere			a,
				(	SELECT	max(cd_cgc) cd_cgc
					from	pls_cong_cedente_intercamb
					where	nr_seq_congenere	= nr_seq_congenere_ww
					and	trunc(clock_timestamp(), 'DD')	between dt_inicio_vigencia and coalesce(dt_fim_vigencia, trunc(clock_timestamp(), 'DD'))
					and	ie_ptu_a500		= 'S')	b
			where	a.nr_sequencia		= nr_seq_congenere_ww;
			
			if (coalesce(cd_cgc_w::text, '') = '') then							
				CALL wheb_mensagem_pck.exibir_mensagem_abort(182840,'CD_UNIMED_ORIGEM=' || cd_unimed_origem_w);
			end if;
			
			-- OBTER CAMARA
			select	max(a.nr_seq_camara)
			into STRICT	nr_seq_camara_w
			from	pls_congenere_camara	a
			where	a.nr_seq_congenere	= nr_seq_congenere_w
			and	dt_emissao_fatura_w between a.dt_inicio_vigencia_ref and a.dt_fim_vigencia_ref;
			
			-- OBTER DATA DE VENCIMENTO DA CAMARA
			if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') and (nr_seq_camara_w IS NOT NULL AND nr_seq_camara_w::text <> '') then -- Caso tenha camara definido
				dt_saldo_credor_ini_w	:= trunc(coalesce(coalesce(dt_postagem_w,dt_venc_consistencia_w),clock_timestamp()) - qt_dias_antes_a500_w);
				dt_saldo_credor_fim_w	:= trunc(coalesce(coalesce(dt_postagem_w,dt_venc_consistencia_w),clock_timestamp()) + qt_dias_antes_a500_w);
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_periodo_w
				from (SELECT	a.nr_sequencia
					from	pls_camara_calendario b,
						pls_camara_calend_periodo a
					where	a.nr_seq_calendario	= b.nr_sequencia
					and	b.nr_seq_camara		= nr_seq_camara_w
					and	trunc(coalesce(dt_postagem_w,clock_timestamp()) - qt_dias_antes_a500_w,'dd') <= trunc(a.dt_limite_a500,'dd')
					order by a.dt_limite_a500) alias5 LIMIT 1;
				
				if (coalesce(nr_seq_periodo_w::text, '') = '') then
					select	substr(a.ds_camara, 1, 255)
					into STRICT	ds_camara_w
					from	pls_camara_compensacao a
					where	a.nr_sequencia	= nr_seq_camara_w;
					
					CALL wheb_mensagem_pck.exibir_mensagem_abort(176421,'DS_CAMARA=' || ds_camara_w);
				else
					if (ie_data_venc_tit_a500_w = 'DC') then -- Dt saldo devedor do calendario
						select	coalesce(max(dt_saldo_devedor), dt_venc_consistencia_w)
						into STRICT	dt_venc_consistencia_w
						from	pls_camara_calend_periodo
						where	nr_sequencia = nr_seq_periodo_w;
						
						update	ptu_fatura
						set	dt_vencimento_fatura 	= dt_venc_consistencia_w
						where	nr_sequencia 		= nr_seq_fatura_p
						and	(dt_vencimento_fatura_w IS NOT NULL AND dt_vencimento_fatura_w::text <> '');
						
						update	ptu_fatura
						set	dt_vencimento_ndc	= dt_venc_consistencia_w
						where	nr_sequencia 		= nr_seq_fatura_p
						and	(dt_vencimento_ndc_w IS NOT NULL AND dt_vencimento_ndc_w::text <> '');
					end if;
					
					dt_vencimento_w	:= dt_venc_consistencia_w;
				end if;
				
			elsif (coalesce(dt_vencimento_w::text, '') = '') then
				dt_vencimento_w	:= dt_venc_consistencia_w;
			end if;
			
			ds_observacao_titulo_w :=	ds_observacao_titulo_w || chr(13) || chr(13) ||
							'Data: ' || to_char(clock_timestamp(),'dd/mm/yyyy') || ' Usuario: ' || nm_usuario_p || ' Seq fatura: ' || nr_seq_fatura_p || ' Doc: ' || nr_documento_w;

			insert into titulo_pagar(nr_titulo,
				nm_usuario,
				dt_atualizacao,
				cd_estabelecimento,
				vl_titulo,
				vl_saldo_titulo,
				dt_emissao,
				dt_contabil,
				dt_vencimento_original,
				dt_vencimento_atual,
				vl_saldo_juros,
				vl_saldo_multa,
				cd_moeda,
				cd_tipo_taxa_juro,
				cd_tipo_taxa_multa,
				tx_juros,
				tx_multa,
				ie_origem_titulo,
				ie_tipo_titulo,
				ie_situacao,
				cd_pessoa_fisica,
				cd_cgc,
				ie_pls,
				nr_lote_contabil,
				ds_observacao_titulo,
				nr_documento,
				nr_seq_trans_fin_baixa,
				nr_seq_trans_fin_contab,
				ie_desconto_dia,
				ie_bloqueto,
				ie_status,
				dt_liberacao,
				nm_usuario_lib,
				nr_seq_classe)
			values (	nextval('titulo_pagar_seq'),
				nm_usuario_p,
				clock_timestamp(),
				cd_estabelecimento_p,
				vl_titulo_w,
				vl_titulo_w,
				clock_timestamp(),
				dt_mes_competencia_w,
				dt_vencimento_w,
				dt_vencimento_w,
				0,
				0,
				cd_moeda_cp_w,
				cd_tipo_taxa_juro_cp_w,
				cd_tipo_taxa_multa_cp_w,
				tx_juros_cp_w,
				tx_multa_cp_w,
				'16', -- OPS -  Intercambio 
				CASE WHEN tp_documento_1_w=4 THEN  21  ELSE coalesce(ie_tipo_titulo_pagar_w, '23') END ,
				'A',
				null,
				cd_cgc_w,
				'S',
				0,
				ds_observacao_titulo_w,
				nr_documento_w,
				nr_seq_trans_fin_baixa_w,
				nr_seq_trans_fin_contab_w,
				'N',
				'N',
				ie_status_tit_pagar_w,
				CASE WHEN ie_tit_pagar_lib_pagamento_w='S' THEN  clock_timestamp()  ELSE null END ,
				CASE WHEN ie_tit_pagar_lib_pagamento_w='S' THEN  'Tasy'  ELSE null END ,
				nr_seq_classe_w) returning nr_titulo into nr_titulo_w;
				
			CALL atualizar_inclusao_tit_pagar(nr_titulo_w, nm_usuario_p);
			
			for r_C03_w in C03( nr_seq_fatura_p, nr_titulo_w ) loop
				insert into titulo_pagar_arq(	
					ds_arquivo,		dt_atualizacao,		dt_atualizacao_nrec,
					nm_usuario,		nm_usuario_nrec,	nr_sequencia,
					nr_titulo)
				values (r_C03_w.ds_arquivo,	clock_timestamp(),		clock_timestamp(),
					nm_usuario_p,		nm_usuario_p,		nextval('titulo_pagar_arq_seq'),
					nr_titulo_w);
			end loop;
			
			if (nr_seq_congenere_w IS NOT NULL AND nr_seq_congenere_w::text <> '') then
				select	max(ie_tipo_congenere)
				into STRICT	ie_tipo_congenere_w
				from	pls_congenere
				where	nr_sequencia = nr_seq_congenere_w;
				
				-- Obtem se o tipo do congenere i operadora (fundacao)
				if (ie_tipo_congenere_w = 'OP') then
					ie_tipo_intercambio_w := 'F'; -- Fundacao
				else
					-- Obter a UF da Unimed de origem
					select	coalesce(max(sg_estado),'X')
					into STRICT	sg_estado_orig_w
					from	pessoa_juridica
					where	cd_cgc	= (	SELECT	cd_cgc_outorgante
								from	pls_outorgante
								where	cd_estabelecimento = cd_estabelecimento_p);
								
					-- Obter a UF do plano beneficiario
					select	coalesce(max(a.sg_estado),'X')
					into STRICT	sg_estado_dest_w
					from	pessoa_juridica	a,
						pls_congenere	b
					where	a.cd_cgc	= b.cd_cgc
					and	b.nr_sequencia	= nr_seq_congenere_w;
							
					if (sg_estado_orig_w <> 'X') and (sg_estado_dest_w <> 'X') then
						if (sg_estado_orig_w = sg_estado_dest_w) then
							ie_tipo_intercambio_w := 'E'; -- Estadual
						else
							ie_tipo_intercambio_w := 'N'; -- Nacional
						end if;
					end if;
				end if;
			end if;
			
			-- Intercambio pagar
			cd_conta_financ_cp_w := pls_obter_conta_financ_regra(	'ICP', null, cd_estabelecimento_p, null, null, nr_seq_camara_w, null, null, null, null, null, null, null, null, ie_tipo_intercambio_w, null, null, cd_conta_financ_cp_w);
							
			if (coalesce(vl_ir_w,0) > 0) then
				begin
					select	max(b.nr_seq_tipo_coop)
					into STRICT	nr_seq_tipo_coop_orig_w
					from	pls_congenere		b,
						ptu_fatura		a
					where	a.cd_unimed_origem	= b.cd_cooperativa
					and	a.nr_sequencia		= nr_seq_fatura_p;
				exception
				when others then
					null;
				end;
				
				begin
					select	max(b.nr_seq_tipo_coop)
					into STRICT	nr_seq_tipo_coop_dest_w
					from	pls_congenere		b,
						ptu_fatura		a
					where	a.cd_unimed_destino	= b.cd_cooperativa
					and	a.nr_sequencia		= nr_seq_fatura_p;
				exception
				when others then
					null;
				end;
				
				if (nr_seq_tipo_coop_orig_w <> nr_seq_tipo_coop_dest_w) then
					begin
						select 	max(cd_tributo)
						into STRICT	cd_tributo_w
						from 	tributo
						where 	ie_situacao 		= 'A'
						and	ie_grupo_tributo	= '01'
						and (coalesce(cd_estabelecimento, cd_estabelecimento_p) = cd_estabelecimento_p);
					exception
					when others then
						null;
					end;
					
					if (cd_tributo_w IS NOT NULL AND cd_tributo_w::text <> '') then
						begin
							select	max(cd_retencao)
							into STRICT	cd_retencao_w
							from 	tributo
							where 	cd_tributo	= cd_tributo_w;
						exception
						when others then
							null;
						end;
					end if;
					
					if (cd_tributo_w IS NOT NULL AND cd_tributo_w::text <> '') then
						select	nextval('titulo_pagar_imposto_seq')
						into STRICT	nr_seq_imposto_w
						;
						
						insert into titulo_pagar_imposto(
							nr_sequencia,
							nr_titulo,
							cd_tributo,
							ie_pago_prev,
							dt_atualizacao,
							nm_usuario,
							vl_imposto,
							vl_nao_retido,
							vl_base_nao_retido,
							vl_trib_adic,
							vl_base_adic,
							vl_base_calculo,
							ie_vencimento,
							dt_imposto,
							cd_darf)
						values (	nr_seq_imposto_w,
							nr_titulo_w,
							cd_tributo_w,
							'V',
							clock_timestamp(),
							nm_usuario_p,
							vl_ir_w,
							0,
							0,
							0,
							0,
							0,
							'V',
							dt_vencimento_w,
							cd_retencao_w);
					end if;
				end if;
			end if;
			
			if (cd_conta_financ_cp_w IS NOT NULL AND cd_conta_financ_cp_w::text <> '') then
				select	coalesce(max(nr_sequencia),0) + 1
				into STRICT	nr_seq_classif_w
				from	titulo_pagar_classif
				where	nr_titulo	= nr_titulo_w;
				
				insert into titulo_pagar_classif(nr_titulo,
					nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nr_seq_conta_financ,
					vl_original,
					vl_titulo,
					vl_desconto,
					vl_acrescimo)
				values (nr_titulo_w,
					nr_seq_classif_w,
					nm_usuario_p,
					clock_timestamp(),
					cd_conta_financ_cp_w,
					vl_titulo_w,
					vl_titulo_w,
					0,
					0);
			end if;
			
			if (ie_tipo_tit_w = 'G') then
				update	ptu_fatura
				set	dt_geracao_titulo	= clock_timestamp(),
					nr_titulo		= nr_titulo_w,
					nr_seq_periodo		= nr_seq_periodo_w,
					ie_tit_fat_ndc		= 'N'
				where	nr_sequencia		= nr_seq_fatura_p;
				
			elsif (ie_tipo_tit_w = 'F') and (ie_classif_cobranca_w in ('2','3')) then
				update	ptu_fatura
				set	dt_geracao_titulo	= clock_timestamp(),
					nr_titulo		= nr_titulo_w,
					nr_seq_periodo		= nr_seq_periodo_w,
					ie_tit_fat_ndc		= 'S'
				where	nr_sequencia		= nr_seq_fatura_p;
			
			elsif (ie_tipo_tit_w = 'N') and (ie_classif_cobranca_w in ('1','3')) then
				update	ptu_fatura
				set	dt_geracao_titulo_ndc	= clock_timestamp(),
					nr_titulo_ndc		= nr_titulo_w,
					nr_seq_periodo		= coalesce(nr_seq_periodo,nr_seq_periodo_w),
					ie_tit_fat_ndc		= 'S'
				where	nr_sequencia		= nr_seq_fatura_p;
			
			end if;
			
			-- Se houver regra de qt dias anterior A500,  insere o titulo no lote de camara de compensacao
			if (qt_dias_antes_a500_w IS NOT NULL AND qt_dias_antes_a500_w::text <> '') and (nr_seq_camara_w IS NOT NULL AND nr_seq_camara_w::text <> '') then
				CALL pls_inserir_tit_camara( nr_titulo_w,
							null,
							nr_seq_camara_w,
							dt_postagem_w,
							qt_dias_antes_a500_w,
							cd_estabelecimento_p,
							nm_usuario_p);
			end if;	
		end if;
	end if;
end if;

-- Nao pode ter commit
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_tit_pagar_fatura ( nr_seq_fatura_p bigint, nr_seq_acao_p bigint, ie_tipo_tit_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

