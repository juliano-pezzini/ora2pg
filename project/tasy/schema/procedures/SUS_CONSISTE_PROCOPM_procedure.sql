-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_procopm ( nr_interno_conta_p bigint, nr_atendimento_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, nr_seq_proc_p bigint, nr_seq_proc_princ_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_tipo_consiste_p bigint, ds_erro_p INOUT text) AS $body$
DECLARE


/* IE_TIPO_CONSISTE_P
	- 1 Fechamento da conta
	- 2 Saida do campo
*/
ds_detalhe_w		varchar(255)	:= '';
ds_erro_w		varchar(255)	:= '';
ie_tipo_atendimento_w	smallint	:= 0;
qt_reg_opm_compl_w	integer	:= 0;
cd_proc_principal_w	bigint;
ie_origem_proc_princ_w	bigint;
qt_opm_permitida_w	integer	:= 99999;
ie_regra_tipo_atend_w	varchar(1)	:= 'A';
cd_estabelecimento_w	smallint;
qt_reg_aih_w		bigint	:= 0;
cd_proced_exclud_w	procedimento_paciente.cd_procedimento%type := 0;
cd_proced_exclud_ww	procedimento_paciente.cd_procedimento%type := 0;
qt_nota_zerada_w	bigint	:= 0;
qt_proc_dia_w		bigint;
dt_procedimento_w	procedimento_paciente.dt_procedimento%type;
qt_max_proc_princ_w     procedimento_paciente.qt_procedimento%type;


BEGIN

/* Obter dados da conta e do atendimento */

begin
select	a.cd_estabelecimento,
	b.ie_tipo_atendimento
into STRICT	cd_estabelecimento_w,
	ie_tipo_atendimento_w
from	atendimento_paciente	b,
	conta_Paciente		a
where	a.nr_interno_conta	= nr_interno_conta_p
and	a.nr_atendimento	= b.nr_atendimento;
exception
	when others then
		cd_estabelecimento_w	:= 0;
		ie_tipo_atendimento_w	:= 0;
end;
/*Obter parametros de Faturamento*/

select	coalesce(max(ie_regra_tipo_atend),'A')
into STRICT	ie_regra_tipo_atend_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(ie_regra_tipo_atend_w,'A') = 'C') then
	begin
	select	coalesce(max(ie_tipo_atend_conta),ie_tipo_atendimento_w)
	into STRICT	ie_tipo_atendimento_w
	from 	conta_paciente
	where 	nr_interno_conta = nr_interno_conta_p;
	exception
		when others then
		ie_tipo_atendimento_w:= ie_tipo_atendimento_w;
	end;
end if;
/* Obter dados da OPM */

if (nr_seq_proc_princ_p <> 0) then
	begin
	select	cd_procedimento,
		ie_origem_proced,
                dt_procedimento
	into STRICT	cd_proc_principal_w,
		ie_origem_proc_princ_w,
                dt_procedimento_w
	from	procedimento_paciente
	where	nr_sequencia	= nr_seq_proc_princ_p;
	exception
		when others then
		cd_proc_principal_w	:= 0;
		ie_origem_proc_princ_w	:= 0;
                dt_procedimento_w       := clock_timestamp();
	end;
	
	select	coalesce(max(qt_proc_permitida),99999)
	into STRICT	qt_opm_permitida_w
	from	sus_proc_compativel
	where	cd_proc_secundario	= cd_procedimento_p
	and	ie_origem_proc_sec	= ie_origem_proced_p
	and	cd_proc_principal	= cd_proc_principal_w
	and	ie_origem_proc_princ	= ie_origem_proc_princ_w
	and	sus_validar_regra(4,cd_procedimento_p, ie_origem_proced_p,null) <> 0;
	
elsif (sus_validar_regra(4,cd_procedimento_p, ie_origem_proced_p,null) > 0) and (coalesce(nr_seq_proc_princ_p,0) = 0) then
	begin
	
	select	count(1)
	into STRICT	qt_reg_aih_w
	from	sus_aih_unif
	where	nr_interno_conta = nr_interno_conta_p  LIMIT 1;	
	
	if (qt_reg_aih_w = 0) then
		begin
			
		select	coalesce(max(qt_proc_permitida),99999)
		into STRICT	qt_opm_permitida_w
		from	sus_proc_compativel a,
			sus_laudo_paciente b
		where	a.cd_proc_secundario	= cd_procedimento_p
		and	a.ie_origem_proc_sec	= ie_origem_proced_p
		and	b.nr_interno_conta 	= nr_interno_conta_p
		and	b.ie_classificacao	= 1
		and	b.ie_tipo_laudo_sus	= 1
		and	a.cd_proc_principal	= b.cd_procedimento_solic
		and	a.ie_origem_proc_princ	= b.ie_origem_proced;		
		
		if (qt_opm_permitida_w = 99999) then
			begin
			select	coalesce(max(qt_proc_permitida),99999)
			into STRICT	qt_opm_permitida_w
			from	sus_proc_compativel a,
				sus_laudo_paciente b
			where	a.cd_proc_secundario	= cd_procedimento_p
			and	a.ie_origem_proc_sec	= ie_origem_proced_p
			and	b.nr_interno_conta 	= nr_interno_conta_p
			and	b.ie_classificacao	= 1
			and	b.ie_tipo_laudo_sus	= 0
			and	a.cd_proc_principal	= b.cd_procedimento_solic
			and	a.ie_origem_proc_princ	= b.ie_origem_proced;			
			end;
		end if;
		
		end;
	else
		begin
		
		select	coalesce(max(qt_proc_permitida),99999)
		into STRICT	qt_opm_permitida_w
		from	sus_proc_compativel a,
			sus_aih_unif b
		where	a.cd_proc_secundario	= cd_procedimento_p
		and	a.ie_origem_proc_sec	= ie_origem_proced_p
		and	b.nr_interno_conta 	= nr_interno_conta_p
		and	a.cd_proc_principal	= b.cd_procedimento_real
		and	a.ie_origem_proc_princ	= b.ie_origem_proc_real;
		
		end;
	end if;
	
	end;
end if;
/* 67 - Falta a informacao dos dados complementares da OPM */

if (Sus_Obter_Inco_Ativa(67)) and (ie_tipo_atendimento_w = 1) and (sus_validar_regra(4, cd_procedimento_p, ie_origem_proced_p,null) > 0)then
	select	count(1)
	into STRICT	qt_reg_opm_compl_w
	from	sus_aih_opm
	where	nr_seq_procedimento	= nr_seq_proc_p  LIMIT 1;
	
	if (qt_reg_opm_compl_w = 0) and (ie_tipo_consiste_p = 1) then
		if (ie_tipo_consiste_p = 1) then
			ds_detalhe_w	:= WHEB_MENSAGEM_PCK.get_texto(280328) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280329) || ie_origem_proced_p || WHEB_MENSAGEM_PCK.get_texto(280330) || nr_seq_proc_p;
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 67, ds_detalhe_w, cd_estabelecimento_p, nm_usuario_p);
		end if;		
	end if;
end if;
/* 78 - OPM nao permitida para o procedimento informado */


/*if	(Sus_Obter_Inco_Ativa(78)) and*/

if (qt_opm_permitida_w = 99999) and (ie_tipo_atendimento_w = 1) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= WHEB_MENSAGEM_PCK.get_texto(280328) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280329) || ie_origem_proced_p ||
					WHEB_MENSAGEM_PCK.get_texto(280336) || cd_proc_principal_w || WHEB_MENSAGEM_PCK.get_texto(280338) || ie_origem_proc_princ_w;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 78, ds_detalhe_w, cd_estabelecimento_p, nm_usuario_p);
	elsif (ie_tipo_consiste_p = 2) then
		ds_erro_w	:= ds_erro_w || '78, ';	
	end if;
end if;	
/* 79 - Quantidade maxima permitida para OPM ultrapassada */

if (qt_procedimento_p > 1) and (ie_origem_proced_p = 7) and (qt_opm_permitida_w > 0) and (coalesce(sus_validar_regra(11,cd_proc_principal_w, ie_origem_proced_p,dt_procedimento_w),0) = 0) then
        begin
        select  qt_procedimento
        into STRICT    qt_max_proc_princ_w
        from    procedimento_paciente a,
                conta_paciente b
        where   a.nr_interno_conta = b.nr_interno_conta
        and     a.nr_interno_conta = nr_interno_conta_p
        and     cd_procedimento = cd_proc_principal_w;
        exception
        when others then
                qt_opm_permitida_w := qt_opm_permitida_w;
        end;

        qt_opm_permitida_w := qt_opm_permitida_w * qt_max_proc_princ_w;
end if;

if (Sus_Obter_Inco_Ativa(79)) and (qt_opm_permitida_w <> 99999) and (qt_opm_permitida_w <> 0) and (qt_procedimento_p > qt_opm_permitida_w) then
	if (ie_tipo_consiste_p = 1) then
		ds_detalhe_w	:= WHEB_MENSAGEM_PCK.get_texto(280328) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280329) || ie_origem_proced_p ||
					WHEB_MENSAGEM_PCK.get_texto(280341) || qt_procedimento_p ||
					WHEB_MENSAGEM_PCK.get_texto(280336) || cd_proc_principal_w || WHEB_MENSAGEM_PCK.get_texto(280338) || ie_origem_proc_princ_w || 
					WHEB_MENSAGEM_PCK.get_texto(280342) || qt_opm_permitida_w;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 79, ds_detalhe_w, cd_estabelecimento_p, nm_usuario_p);
	elsif (ie_tipo_consiste_p = 2) then
		ds_erro_w	:= ds_erro_w || '79, ';	
	end if;
end if;
/*268 - Procedimentos OPME excludentes lancados na conta*/

if (Sus_Obter_Inco_Ativa(268)) then
	begin
	
	begin
	select	coalesce(a.cd_procedimento,0)
	into STRICT	cd_proced_exclud_w
	from	procedimento_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	sus_validar_regra(4,a.cd_procedimento,a.ie_origem_proced,a.dt_procedimento) > 0
	and	a.cd_procedimento <> cd_procedimento_p
	and	exists (SELECT	1
			from	sus_proc_compativel x
			where	x.cd_proc_principal = cd_procedimento_p
			and	x.ie_origem_proc_princ = ie_origem_proced_p
			and	x.cd_proc_secundario = a.cd_procedimento
			and	x.ie_origem_proc_sec = a.ie_origem_proced
			and	x.ie_tipo_compatibilidade = 2)  LIMIT 1;	
	exception
	when others then
		cd_proced_exclud_w := 0;
	end;
	
	begin
	select	coalesce(a.cd_procedimento,0)
	into STRICT	cd_proced_exclud_ww
	from	procedimento_paciente a
	where	a.nr_interno_conta = nr_interno_conta_p
	and	sus_validar_regra(4,a.cd_procedimento,a.ie_origem_proced,a.dt_procedimento) > 0
	and	a.cd_procedimento <> cd_procedimento_p
	and	((exists (SELECT	1
			from	sus_proc_compativel x
			where	x.cd_proc_principal = cd_procedimento_p
			and	x.ie_origem_proc_princ = ie_origem_proced_p
			and	x.cd_proc_secundario = a.cd_procedimento
			and	x.ie_origem_proc_sec = a.ie_origem_proced
			and	x.ie_tipo_compatibilidade = 2)) or (exists (select	1
			from	sus_proc_compativel x
			where	x.cd_proc_secundario = cd_procedimento_p
			and	x.ie_origem_proc_sec = ie_origem_proced_p
			and	x.cd_proc_principal = a.cd_procedimento
			and	x.ie_origem_proc_princ = a.ie_origem_proced
			and	x.ie_tipo_compatibilidade = 2)))  LIMIT 1;	
	exception
	when others then
		cd_proced_exclud_ww := 0;
	end;	
	
	if (coalesce(cd_proced_exclud_w,0) <> 0) and (ie_tipo_consiste_p = 1) then
		ds_detalhe_w :=	WHEB_MENSAGEM_PCK.get_texto(280328) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280343) || cd_proced_exclud_w ||
				WHEB_MENSAGEM_PCK.get_texto(280336) || cd_proc_principal_w || WHEB_MENSAGEM_PCK.get_texto(280344) || nr_interno_conta_p;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 268, ds_detalhe_w, cd_estabelecimento_p, nm_usuario_p);
	end if;
		
	if (coalesce(cd_proced_exclud_ww,0) <> 0) and (ie_tipo_consiste_p = 2) then
		ds_erro_w	:= ds_erro_w || '268, ';	
	end if;
	
	end;
end if;
/*(275)Nao permitir fechar uma conta de AIH quando houver um procedimento OPME sem a informacao
do procedimento principal. */
if (Sus_Obter_Inco_Ativa(275)) and (ie_tipo_atendimento_w = 1) and (coalesce(nr_seq_proc_princ_p,0) = 0) then	
	
	begin
	select	count(1)
	into STRICT	qt_proc_dia_w
	from	sus_detalhe_proc b,
			sus_detalhe a
	where	b.nr_seq_detalhe = a.nr_sequencia
	and		a.cd_detalhe = '10056'
	and		b.cd_procedimento = cd_procedimento_p
	and		b.ie_origem_proced = ie_origem_proced_p  LIMIT 1;
	exception
	when others then
		qt_proc_dia_w := 0;
	end;
	
	if (ie_tipo_consiste_p = 1) and (qt_proc_dia_w = 0) then
		ds_detalhe_w := WHEB_MENSAGEM_PCK.get_texto(280328) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280329) || ie_origem_proced_p ||
				WHEB_MENSAGEM_PCK.get_texto(280330) || nr_seq_proc_p || WHEB_MENSAGEM_PCK.get_texto(280345)|| nr_seq_proc_princ_p;
		CALL sus_gravar_inconsistencia(nr_interno_conta_p, 275, ds_detalhe_w, cd_estabelecimento_p, nm_usuario_p);	
	elsif (coalesce(qt_proc_dia_w,0) <> 0) and (ie_tipo_consiste_p = 2) then
		ds_erro_w :=	ds_erro_w || '275, ';
	end if;
end if;
/* 284 - O numero da nota fiscal nao pode ser zero nos dados do OPME*/

if (Sus_Obter_Inco_Ativa(284)) and (ie_tipo_atendimento_w = 1) and (sus_validar_regra(4, cd_procedimento_p, ie_origem_proced_p,null) > 0)then
	
	begin
	select	count(1)
	into STRICT	qt_nota_zerada_w
	from	sus_aih_opm
	where	nr_seq_procedimento	= nr_seq_proc_p
	and	nr_nota_fiscal		= 0  LIMIT 1;	
	exception
	when others then
		qt_nota_zerada_w := 0;
	end;
	
	if (qt_nota_zerada_w = 1) and (ie_tipo_consiste_p = 1) then
		if (ie_tipo_consiste_p = 1) then
			ds_detalhe_w	:= WHEB_MENSAGEM_PCK.get_texto(280328) || cd_procedimento_p || WHEB_MENSAGEM_PCK.get_texto(280329) || ie_origem_proced_p || WHEB_MENSAGEM_PCK.get_texto(280330) || nr_seq_proc_p;
			CALL sus_gravar_inconsistencia(nr_interno_conta_p, 284, ds_detalhe_w, cd_estabelecimento_p, nm_usuario_p);
		end if;		
	end if;
end if;

ds_erro_p	:= ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_procopm ( nr_interno_conta_p bigint, nr_atendimento_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, qt_procedimento_p bigint, nr_seq_proc_p bigint, nr_seq_proc_princ_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_tipo_consiste_p bigint, ds_erro_p INOUT text) FROM PUBLIC;

