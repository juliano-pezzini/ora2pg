-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_autor_ageint_exame_lab (nr_seq_ageint_p bigint, dt_finalizacao_p timestamp, nm_usuario_p text) AS $body$
DECLARE


cont_w			bigint;
nr_sequencia_autor_w	bigint;
cd_convenio_w		bigint;
dt_prevista_w		timestamp;
nr_seq_regra_w		bigint;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_proc_interno_w	bigint;
nr_seq_exame_w		bigint;
nr_seq_procedimento_w	bigint;
cd_pessoa_fisica_w	varchar(10);
cd_estabelecimento_w	integer;
cd_medico_solicitante_w	varchar(10);
nr_seq_estagio_w	bigint;
nr_seq_exame_lab_w	bigint;
cd_setor_origem_w	autorizacao_convenio.cd_setor_origem%type := Wheb_Usuario_Pck.get_cd_setor_atendimento;
ie_gerar_autor_w	varchar(5) := 'N';
cd_area_proc_dut_w  	bigint;
cd_grupo_proc_dut_w 	bigint;
qt_dias_autorizacao_dut_w bigint;
nr_sequencia_dut_w        bigint;
dt_vigencia_item_w	  timestamp := clock_timestamp();
ds_observacao_dut_w 	  varchar(2000) := '';
ds_informacao_dut_dut_w   varchar(4000);
ie_tipo_autorizacao_dut_w varchar(15);
nm_usuario_resp_dut_w	  varchar(15);

C01 CURSOR FOR
	SELECT	x.nr_seq_regra,
		x.cd_procedimento,
		x.ie_origem_proced,
		x.nr_seq_proc_interno,
		x.nr_seq_exame,
		x.dt_prevista,
		x.nr_sequencia
	from	ageint_exame_lab x
	where	x.nr_seq_ageint = nr_seq_ageint_p
	and	(x.dt_prevista IS NOT NULL AND x.dt_prevista::text <> '')
	and	(x.nr_seq_regra IS NOT NULL AND x.nr_seq_regra::text <> '')
	and	coalesce(x.ie_regra,0) in (3,6,7)
	and coalesce(ie_glosa,'XPTO') not in ('T','G','D','F')
	and	trunc(x.dt_prevista,'dd') = trunc(dt_finalizacao_p,'dd')
	and	not exists (SELECT	1
			from	procedimento_autorizado a,
				autorizacao_convenio b,
				estagio_autorizacao c
			where	a.nr_sequencia_autor	= b.nr_sequencia
			and	b.nr_seq_estagio 	= c.nr_sequencia
			and	c.ie_interno not in ('90','70')
			and	b.nr_seq_age_integ	= x.nr_seq_ageint
			and	a.cd_procedimento	= x.cd_procedimento
			and	a.ie_origem_proced	= x.ie_origem_proced)
	order by x.dt_prevista;


BEGIN

select	cd_convenio,
	cd_pessoa_fisica,
	cd_estabelecimento,
	cd_medico_solicitante
into STRICT	cd_convenio_w,
	cd_pessoa_fisica_w,
	cd_estabelecimento_w,
	cd_medico_solicitante_w
from	agenda_integrada
where	nr_sequencia = nr_seq_ageint_p;

select	coalesce(max(a.nr_sequencia),0)
into STRICT	nr_sequencia_autor_w
from	estagio_autorizacao b,
	autorizacao_convenio a
where	a.nr_seq_age_integ = nr_seq_ageint_p
and	b.ie_interno not in ('90','70')
and	trunc(coalesce(a.dt_agenda,coalesce(a.dt_agenda_cons,clock_timestamp())),'dd') = trunc(dt_finalizacao_p,'dd')
and	a.ie_tipo_autorizacao	= '3'
and	a.nr_seq_estagio	= b.nr_sequencia
and	a.cd_convenio		= cd_convenio_w;

begin
select	'S'
into STRICT	ie_gerar_autor_w
from	ageint_exame_lab x
where	x.nr_seq_ageint = nr_seq_ageint_p
and	(x.dt_prevista IS NOT NULL AND x.dt_prevista::text <> '')
and	(x.nr_seq_regra IS NOT NULL AND x.nr_seq_regra::text <> '')
and	coalesce(x.ie_regra,0) in (3,6,7)
and coalesce(ie_glosa,'XPTO') not in ('T','G','D','F')
and	trunc(dt_prevista,'dd') = trunc(dt_finalizacao_p,'dd')
and	not exists (SELECT	1
		from	procedimento_autorizado a,
			autorizacao_convenio b,
			estagio_autorizacao c
		where	a.nr_sequencia_autor	= b.nr_sequencia
		and	b.nr_seq_estagio 	= c.nr_sequencia
		and	c.ie_interno not in ('90','70')
		and	b.nr_seq_age_integ  	= x.nr_seq_ageint
		and	a.cd_procedimento	= x.cd_procedimento
		and	a.ie_origem_proced	= x.ie_origem_proced) LIMIT 1;
exception
when others then
	ie_gerar_autor_w := 'N';
end;



if (nr_sequencia_autor_w = 0) and (coalesce(ie_gerar_autor_w,'N') = 'S') then

	select	nextval('autorizacao_convenio_seq')
	into STRICT	nr_sequencia_autor_w
	;

	select	min(nr_sequencia)
	into STRICT	nr_seq_estagio_w
	from	estagio_autorizacao
	where	ie_interno = '1';

	insert	into autorizacao_convenio(cd_convenio,
		dt_autorizacao,
		nm_usuario,
		cd_medico_solicitante,
		--nr_seq_estagio,
		ie_tipo_autorizacao,
		ie_tipo_dia,
		nr_sequencia,
		nr_seq_age_integ,
		cd_pessoa_fisica,
		cd_estabelecimento,
		dt_agenda_integ,
		dt_atualizacao,
		cd_setor_origem,
    dt_atualizacao_nrec,
    nm_usuario_nrec)
	values (cd_convenio_w,
		clock_timestamp(),
		nm_usuario_p,
		cd_medico_solicitante_w,
		--nr_seq_estagio_w,
		'3', -- ie_tipo_autor,
		'C',
		nr_sequencia_autor_w,
		nr_seq_ageint_p,
		cd_pessoa_fisica_w,
		cd_estabelecimento_w,
		dt_prevista_w,
		clock_timestamp(),
		cd_setor_origem_w,
    clock_timestamp(),
    nm_usuario_p);
end if;

if (coalesce(nr_sequencia_autor_w,0) > 0) then

	open C01;
	loop
	fetch C01 into
		nr_seq_regra_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		nr_seq_proc_interno_w,
		nr_seq_exame_w,
		dt_prevista_w,
		nr_seq_exame_lab_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		select	nextval('procedimento_autorizado_seq')
		into STRICT	nr_seq_procedimento_w
		;
		
		if (obter_param_usuario_logado(3004, 242) = 'S') then
            		if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '' AND ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') then
                       	 	select  max(coalesce(cd_area_procedimento,0)), max(coalesce(cd_grupo_proc,0))
                        	into STRICT	cd_area_proc_dut_w, cd_grupo_proc_dut_w
                        	from	estrutura_procedimento_v
                        	where	cd_procedimento	    = cd_procedimento_w
                        	and	    ie_origem_proced	= ie_origem_proced_w;
                	end if;

			SELECT * FROM get_info_rule_days_dut(cd_convenio_w, null, dt_vigencia_item_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, ie_tipo_autorizacao_dut_w, nm_usuario_resp_dut_w, qt_dias_autorizacao_dut_w, nr_sequencia_dut_w, ds_informacao_dut_dut_w) INTO STRICT ie_tipo_autorizacao_dut_w, nm_usuario_resp_dut_w, qt_dias_autorizacao_dut_w, nr_sequencia_dut_w, ds_informacao_dut_dut_w;

			if (nr_sequencia_dut_w IS NOT NULL AND nr_sequencia_dut_w::text <> '') then
			    if (nr_sequencia_dut_w IS NOT NULL AND nr_sequencia_dut_w::text <> '') then
				ds_observacao_dut_w := ds_observacao_dut_w || obter_desc_expressao(298311) || obter_desc_expressao(709240) || nr_sequencia_dut_w;
			    end if;

			    if (ie_tipo_autorizacao_dut_w IS NOT NULL AND ie_tipo_autorizacao_dut_w::text <> '') then
				ds_observacao_dut_w := ds_observacao_dut_w || chr(10)|| obter_desc_expressao(299440) || obter_desc_expressao(709240) || ie_tipo_autorizacao_dut_w;
			    end if;

			if (nm_usuario_resp_dut_w IS NOT NULL AND nm_usuario_resp_dut_w::text <> '') then
			ds_observacao_dut_w := ds_observacao_dut_w || chr(10) || obter_desc_expressao(301056) || obter_desc_expressao(709240)  || nm_usuario_resp_dut_w;
			end if;

			if (qt_dias_autorizacao_dut_w IS NOT NULL AND qt_dias_autorizacao_dut_w::text <> '') then
			ds_observacao_dut_w := ds_observacao_dut_w || chr(10) || obter_desc_expressao(287753) || obter_desc_expressao(709240) || qt_dias_autorizacao_dut_w;
			end if;

			if (ds_informacao_dut_dut_w IS NOT NULL AND ds_informacao_dut_dut_w::text <> '') then
			ds_observacao_dut_w := ds_observacao_dut_w || chr(10) || obter_desc_expressao(291934) || obter_desc_expressao(709240) || ds_informacao_dut_dut_w;
			end if;
		    end if;
        	end if;

		insert	into procedimento_autorizado(
			cd_procedimento,
			ie_origem_proced,
			qt_solicitada,
			qt_autorizada,
			dt_atualizacao,
			nm_usuario,
			nr_sequencia_autor,
			nr_sequencia,
			nr_seq_proc_interno,
			nr_seq_regra_plano,
			nr_seq_exame,
			nr_seq_ageint_exame_lab,
            		ds_observacao)
		values (	cd_procedimento_w,
			ie_origem_proced_w,
			1,
			0,
			clock_timestamp(),
			nm_usuario_p,
			nr_sequencia_autor_w,
			nr_seq_procedimento_w,
			nr_seq_proc_interno_w,
			nr_seq_regra_w,
			nr_seq_exame_w,
			nr_seq_exame_lab_w,
		    	ds_observacao_dut_w);

		end;
	end loop;
	close C01;
	
end if;

if (coalesce(nr_seq_estagio_w,0) > 0) then
	CALL atualizar_autorizacao_convenio(nr_sequencia_autor_w,nm_usuario_p,nr_seq_estagio_w,'N','N','S');
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_autor_ageint_exame_lab (nr_seq_ageint_p bigint, dt_finalizacao_p timestamp, nm_usuario_p text) FROM PUBLIC;

