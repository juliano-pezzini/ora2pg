-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_ptu_nota_cobranca ( nr_seq_pls_fatura_p pls_fatura.nr_sequencia%type, nr_seq_ptu_fatura_p ptu_fatura.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_interface_p interface.cd_interface%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE

					
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar as informacoes de nota de cobranca, e de informacoes que se a conta esta
fora do prazo de envio ou nao e enviado no A400.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------

Referencias:
	PLS_GERAR_FATURAS_PTU
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


-- Versao PTU
ie_versao_w			bigint;
ie_versao_xml_w			bigint;

-- Dados fatura, lote e regra
dt_prev_envio_w			pls_lote_faturamento.dt_prev_envio%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
dt_geracao_lote_w		pls_lote_faturamento.dt_geracao%type;
ie_conta_fechada_w		pls_regra_faturamento.ie_conta_fechada%type;
nr_seq_lote_fat_w		pls_lote_faturamento.nr_sequencia%type;
cd_unimed_origem_w		ptu_nota_cobranca.cd_unimed%type;

-- Dados ptu fatura
cd_unimed_destino_w		ptu_fatura.cd_unimed_destino%type;

-- Quantidade pls_conv_ptu_exc_atend
qt_registros_w			bigint;

-- Dados pls_parametro_faturamento
ie_origem_nota_principal_w	pls_parametro_faturamento.ie_origem_nota_principal%type;
ie_agrupar_atendimento_w	pls_parametro_faturamento.ie_agrupar_atendimento%type;
ie_gerar_fat_contab_w		pls_parametro_faturamento.ie_gerar_fat_contab%type;

-- Parametros da funcao
ie_param_30_w			funcao_parametro.vl_parametro_padrao%type := 'N';

-- cursor 1
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
ie_carater_internacao_w		smallint;
cd_excecao_w			varchar(1);
cd_excecao_princ_w		varchar(1);
ie_pcmso_w			varchar(10);
dt_internacao_w			ptu_nota_cobranca.dt_internacao%type;
dt_cta_internacao_w		ptu_nota_cobranca.dt_internacao%type;
dt_alta_w			ptu_nota_cobranca.dt_alta%type;
dt_alta_ww			ptu_nota_cobranca.dt_alta%type;
nr_ver_tiss_w			ptu_nota_cobranca.nr_ver_tiss%type;
nr_guia_tiss_prestador_w	ptu_nota_cobranca.nr_guia_tiss_prestador%type;
nr_guia_tiss_principal_w	ptu_nota_cobranca.nr_guia_tiss_principal%type;
nr_guia_tiss_operadora_w	ptu_nota_cobranca.nr_guia_tiss_operadora%type;
tp_nota_w			ptu_nota_cobranca.tp_nota%type;
tp_nota_princ_w			ptu_nota_cobranca.tp_nota%type;
id_nota_principal_w		ptu_nota_cobranca.id_nota_principal%type;
tp_ind_acidente_w		ptu_nota_cobranca.tp_ind_acidente%type;
dt_ultima_autoriz_w		ptu_nota_cobranca.dt_ultima_autoriz%type;
cd_medico_solic_w		varchar(10);
nr_guia_principal_w		varchar(20);
nr_nota_w			ptu_nota_cobranca.nr_nota%type;
cd_cartao_intercambio_w		varchar(30);
nr_seq_pagador_w		pls_fatura.nr_seq_pagador%type;
ie_tipo_repasse_w		pls_segurado.ie_tipo_repasse%type;
ie_tipo_segurado_w		pls_segurado.ie_tipo_segurado%type;
nr_seq_congenere_w		pls_congenere.nr_sequencia%type;
dt_atend_conta_w		pls_conta.dt_atendimento%type;
ie_tipo_consulta_w		pls_conta.ie_tipo_consulta%type;
nr_ndr_glosada_w		ptu_nota_cobranca.nr_ndr_glosada%type;
nr_lote_glosado_w		ptu_nota_cobranca.nr_lote_glosado%type;
nr_nota_glosada_w		ptu_nota_cobranca.nr_nota_glosada%type;
nr_fatura_glosada_w		ptu_nota_cobranca.nr_fatura_glosada%type := null;
nr_guia_glosada_w		ptu_nota_cobranca.nr_guia_glosada%type;
nr_guia_oper_glosada_w		ptu_nota_cobranca.nr_guia_oper_glosada%type;

-- Limpa ou inicia com valor padrao a cada loop do cursor 1
ie_tipo_contrato_w		pls_intercambio.ie_tipo_contrato%type;
cd_usuario_plano_w		varchar(30);
ie_envia_w			varchar(1);
nr_cnpj_cpf_req_w		ptu_nota_cobranca.nr_cnpj_cpf_req%type;
nm_prest_req_w			ptu_nota_cobranca.nm_prest_req%type;
sg_cons_prof_req_w		ptu_nota_cobranca.sg_cons_prof_req%type;
nr_cons_prof_req_w		ptu_nota_cobranca.nr_cons_prof_req%type;
sg_uf_cons_req_w		ptu_nota_cobranca.sg_uf_cons_req%type;
nr_cbo_req_w			ptu_nota_cobranca.nr_cbo_req%type;
nr_seq_cbo_saude_req_w		bigint;
nr_cbo_req_sus_w		varchar(6);
ie_tipo_atendimento_w		varchar(2);
qt_registro_w			bigint;
ie_paciente_w			varchar(1);
qt_pj_w				integer;
ie_motivo_saida_w		varchar(2);
qt_rec_glosa_w			integer;

-- Variaveis diversas
nr_lote_w			bigint;
cd_motivo_encerram_w		ptu_nota_cobranca.motivo_encerram%type;
cd_medico_solicitante_w		pls_guia_plano.cd_medico_solicitante%type;
cd_doenca_w			varchar(10);
cd_doenca_2_w			varchar(10);
cd_doenca_3_w			varchar(10);
cd_doenca_4_w			varchar(10);
ie_tipo_guia_princ_w		varchar(10);
ie_pcmso_req_w			varchar(10);
nr_seq_congenere_conta_w	bigint;
dt_emissao_conta_w		pls_conta.dt_alta%type;
nr_principal_w			varchar(20);
cd_excecao_conversao_w		pls_conv_ptu_exc_atend.cd_excecao%type;
nr_seq_conta_ori_w		bigint;
nr_seq_conta_ref_w		pls_conta.nr_sequencia%type;
nr_seq_cobranca_w		bigint;
nr_seq_cobranca_rrs_w		ptu_nota_cobranca_rrs.nr_sequencia%type;
nm_segurado_w			varchar(25);
ie_prest_a400_w			varchar(1);
nr_titulo_pag_reemb_w			titulo_pagar.nr_titulo%type;
dt_reemb_tit_baixa_w			titulo_pagar.dt_liquidacao%type;

-- Dados ptu_nota_servico
tp_pessoa_w			ptu_nota_cobranca.tp_pessoa%type;
nr_cnpj_cpf_w			ptu_nota_cobranca.nr_cnpj_cpf%type;
cd_cnes_cont_exec_w		ptu_nota_cobranca.cd_cnes_cont_exec%type;
cd_munic_cont_exec_w		ptu_nota_cobranca.cd_munic_cont_exec%type;
tipo_rede_min_w			ptu_nota_cobranca.tipo_rede_min%type;
dt_procedimento_w		timestamp;
ie_tipo_intercambio_w		pls_regra_data_ptu_cobr.ie_tipo_intercambio%type;
sg_estado_w			pessoa_juridica.sg_estado%type;
sg_estado_int_w			pessoa_juridica.sg_estado%type;
ie_nacional_w			pls_congenere.ie_nacional%type;
ie_tipo_data_w			pls_regra_data_ptu_cobr.ie_tipo_data%type;
hr_atendimento_w		varchar(10);
ie_registro_506_w		varchar(10) := 'S';

dt_nascimento_w			pessoa_fisica.dt_nascimento%type;
nm_prestador_w			ptu_nota_cobranca_rrs.nm_prestador%type;
nr_nota_numerico_w		ptu_nota_cobranca_rrs.nr_nota_numerico%type;
tp_sexo_w			pessoa_fisica.ie_sexo%type;
nr_cnpj_cpf_rrs_w		ptu_nota_cobranca_rrs.nr_cnpj_cpf%type;
tp_pessoa_rrs_w			ptu_nota_cobranca_rrs.tp_pessoa%type;
cd_cnes_w			ptu_nota_cobranca_rrs.cd_cnes%type := '9999999';

nm_prest_exec_w			ptu_nota_cobranca.nm_prest_exec%type;
id_aviso_w			ptu_nota_cobranca.id_aviso%type;
nr_lote_prest_w			ptu_nota_cobranca.nr_lote_prest%type;
dt_conhecimento_w		ptu_nota_cobranca.dt_conhecimento%type;
tp_prest_exec_w			ptu_nota_cobranca.tp_prest_exec%type;
cd_cid_obito_w			ptu_nota_cobranca.cd_cid_obito%type;
id_rec_proprio_w		ptu_nota_cobranca.id_rec_proprio%type;
id_reem_par_int_w		ptu_nota_cobranca_rrs.id_reem_par_int%type;
nr_seq_aviso_conta_w		ptu_nota_cobranca.nr_seq_aviso_conta%type;
nr_seq_prestador_exec_w		pls_prestador.nr_sequencia%type;
nr_seq_congenere_fat_w		pls_fatura.nr_seq_congenere%type;
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type;

ie_tipo_cobranca_w		pls_fatura_conta.ie_tipo_cobranca%type;
nr_seq_prestador_w		pls_processo_conta.nr_seq_prestador%type;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
cd_carteirinha_w		varchar(30);

-- Data de protocolo (maior data dos protocolos)
dt_protocolo_w                  timestamp;
cd_prestador_req_w		ptu_nota_cobranca.cd_prestador_req%type;
cd_unimed_prest_req_w		ptu_nota_cobranca.cd_unimed_prest_req%type;
nr_seq_prestador_req_w		pls_prestador.nr_sequencia%type;
cd_unimed_prest_exec_w		ptu_nota_cobranca.cd_unimed_prest_exec%type;

qt_conta_princ_ptu_w		integer;

ie_tipo_cobranca_fatura_w	ptu_fatura.ie_tipo_cobranca_fatura%type;
dt_atend_conta_ini_w		pls_conta.dt_atendimento%type;

cd_motivo_encerram_tiss_w	ptu_nota_cobranca.cd_motivo_encerramento_tiss%type;
ie_benef_remido_w		pls_fatura.ie_remido%type;
ie_cobertura_especial_w		pls_conta.ie_cobertura_especial%type;
ie_regime_atendimento_w		pls_conta.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_conta.ie_saude_ocupacional%type;

-- Ressarcimento ao SUS
c00 CURSOR(	nr_seq_pls_fatura_pc	pls_fatura.nr_sequencia%type)  FOR
	SELECT	b.nr_seq_segurado,
		substr(b.cd_usuario_plano,5,13) cd_usuario_plano,
		b.nr_seq_prestador,
		b.nr_seq_processo,
		b.nr_aih,
		b.nr_sequencia nr_seq_conta_sus,
		b.cd_usuario_plano cd_carteirinha,
		d.nr_sequencia nr_seq_fatura_conta
	from	pls_segurado_mensalidade	a,
		pls_processo_conta		b,
		pls_segurado			c,
		pls_fatura_conta		d,
		pls_fatura_evento		e
	where	b.nr_sequencia		= a.nr_seq_processo_conta
	and	c.nr_sequencia		= b.nr_seq_segurado
	and	b.nr_sequencia		= d.nr_seq_conta_sus
	and	e.nr_sequencia		= d.nr_seq_fatura_evento
	and	d.ie_tipo_cobranca	= '5'
	and	d.vl_faturado		> 0
	and	a.ie_tipo_item		= '39'
	and	e.nr_seq_fatura		= nr_seq_pls_fatura_pc
	and	pls_obter_se_benef_remido(c.nr_sequencia, b.dt_internacao) = 'S';

C01 CURSOR(	nr_seq_pls_fatura_pc		pls_fatura.nr_sequencia%type,
		ie_tipo_cobranca_fatura_pc	ptu_fatura.ie_tipo_cobranca_fatura%type) FOR
	SELECT	t.nr_seq_ops_congenere,
		t.nr_seq_segurado,
		t.ie_carater_internacao,
		t.cd_excecao,
		t.nr_seq_tipo_atendimento,
		t.nr_seq_saida_spsadt,
		t.nr_seq_protocolo,
		t.nr_seq_conta,
		t.ie_pcmso,
		t.pr_taxa_atual,
		t.ie_fora_prazo, -- Conta fora do prazo limite
		t.ie_tipo_guia,
		t.cd_guia_referencia,
		t.dt_internacao,
		t.dt_alta,
		t.nr_ver_tiss,
		t.ie_recem_nascido,
		t.dt_protocolo,
		t.nr_guia_tiss_prestador,
		t.nr_guia_tiss_principal,
		t.nr_guia_tiss_operadora,
		t.nr_seq_motivo_saida_int,
		t.nr_seq_guia,
		t.tp_nota,
		t.id_nota_principal,
		t.tp_ind_acidente,
		t.dt_ultima_autoriz,
		t.cd_medico_solic,
		t.nr_seq_prestador,
		t.nr_guia_principal,
		t.nr_nota,
		t.nr_seq_fatura_conta,
		t.cd_cartao_intercambio,
		t.nr_seq_pagador,
		t.nr_seq_fatura,
		t.nr_seq_nota_cobranca,		
		t.ie_tipo_repasse,
		t.ie_tipo_segurado,
		t.cd_guia_ok,
		t.nr_seq_analise,
		t.nr_seq_congenere,
		t.ie_apresentacao,
		t.dt_atend_conta,
		t.ie_tipo_consulta,
		t.ie_tipo_faturamento,
		t.nr_seq_conta_princ,
		t.nr_seq_seg_pos,
		t.id_liminar,
		t.nr_seq_prest_inter,
		t.nr_ndr_glosada,
		t.nr_lote_glosado,
		t.nr_nota_glosada,
		t.nr_fatura_glosada,
		t.nr_guia_glosada,
		t.ie_tipo_protocolo,
		t.cd_pessoa_fisica_conta,
		t.cd_cgc_conta,
		t.ie_atend_env_cancelado,
		t.ie_pessoa_prest_exec,
		t.nr_seq_prestador_exec,
		t.nr_seq_prestador_exec_princ,
		t.id_continuado,
		t.nr_guia_oper_glosada,
		t.ie_cobertura_especial,
		t.ie_regime_atendimento,
		t.ie_saude_ocupacional
	from (	SELECT	c.nr_seq_ops_congenere,
			e.nr_seq_segurado,
			CASE WHEN a.ie_carater_internacao='E' THEN  0 WHEN a.ie_carater_internacao='U' THEN  1  ELSE 1 END  ie_carater_internacao,
			coalesce(a.cd_excecao, 'X') cd_excecao,
			coalesce(w.nr_seq_tipo_atendimento, a.nr_seq_tipo_atendimento) nr_seq_tipo_atendimento,
			a.nr_seq_saida_spsadt,
			b.nr_sequencia nr_seq_protocolo,
			a.nr_sequencia nr_seq_conta,
			c.ie_pcmso,
			coalesce(pls_obter_taxa_interc_conta(a.dt_atendimento_referencia, dt_prev_envio_w, d.nr_sequencia, c.nr_sequencia), 0) pr_taxa_atual,
			pls_obter_se_envia_conta(coalesce(w.dt_atendimento, a.dt_atendimento_referencia), dt_prev_envio_w, d.nr_sequencia, c.nr_sequencia, a.nr_sequencia) ie_fora_prazo, -- Conta fora do prazo limite
			a.ie_tipo_guia,
			coalesce(a.cd_guia_pos_estab, coalesce(w.cd_guia_referencia, trim(both a.cd_guia_referencia))) cd_guia_referencia,
			coalesce(w.dt_entrada, coalesce(a.dt_inicio_faturamento, a.dt_entrada)) dt_internacao,
			coalesce(w.dt_alta, coalesce(a.dt_fim_faturamento, a.dt_alta)) dt_alta,
			substr(b.cd_versao_tiss, 1, 7) nr_ver_tiss,
			coalesce(a.ie_recem_nascido, 'N') ie_recem_nascido,
			CASE WHEN ie_param_30_w='S' THEN  b.dt_recebimento  ELSE coalesce(b.dt_protocolo, b.dt_recebimento) END  dt_protocolo,
			coalesce(w.cd_guia_prestador, coalesce(w.cd_guia, coalesce(trim(both a.cd_guia_prestador), a.cd_guia))) nr_guia_tiss_prestador,
			coalesce(w.cd_guia_referencia, trim(both a.cd_guia_referencia)) nr_guia_tiss_principal,
			coalesce(w.cd_guia, a.cd_guia) nr_guia_tiss_operadora,
			w.nr_seq_saida_int nr_seq_motivo_saida_int,
			a.nr_seq_guia,
			ptu_obter_tp_nota(a.nr_sequencia) tp_nota,
			ptu_obter_id_nota_principal(a.nr_sequencia) id_nota_principal,
			ptu_obter_tp_ind_acidente(a.ie_indicacao_acidente) tp_ind_acidente,
			ptu_obter_dt_ultima_autor(a.nr_seq_guia) dt_ultima_autoriz,
			coalesce(w.cd_medico_solicitante, a.cd_medico_solicitante) cd_medico_solic,
			coalesce(w.nr_seq_prestador, a.nr_seq_prestador) nr_seq_prestador,
			coalesce(w.cd_guia_referencia, trim(both a.cd_guia_referencia)) nr_guia_principal,
			coalesce(a.cd_guia_fat, coalesce(w.cd_guia, coalesce(w.cd_guia_prestador, coalesce(a.cd_guia, trim(both a.cd_guia_prestador))))) nr_nota,
			e.nr_sequencia nr_seq_fatura_conta,
			c.cd_cartao_intercambio,
			c.nr_seq_pagador,
			a.nr_seq_fatura,
			a.nr_seq_nota_cobranca,
			c.ie_tipo_repasse,
			w.ie_tipo_segurado_cta ie_tipo_segurado,
			a.cd_guia_ok,
			a.nr_seq_analise,
			c.nr_seq_congenere,
			coalesce(b.ie_apresentacao, 'A') ie_apresentacao,
			coalesce(a.dt_atendimento_referencia, w.dt_atendimento) dt_atend_conta,
			a.ie_tipo_consulta,
			coalesce(a.ie_tipo_faturamento, 'T') ie_tipo_faturamento,
			a.nr_seq_conta_princ,
			w.nr_seq_segurado nr_seq_seg_pos,
			coalesce(CASE WHEN(select count(1) from pls_guia_liminar_judicial n where n.nr_seq_guia = a.nr_seq_guia)=0 THEN  'N'  ELSE 'S' END , 'N') id_liminar,
			a.nr_seq_prest_inter,
			trim(both i.nr_ndr_glosada) nr_ndr_glosada,
			trim(both i.nr_lote_glosado) nr_lote_glosado,
			trim(both i.nr_nota_glosada) nr_nota_glosada,
			trim(both i.nr_fatura_glosada) nr_fatura_glosada,
			trim(both i.nr_guia_glosada) nr_guia_glosada,
			coalesce(b.ie_tipo_protocolo, 'C') ie_tipo_protocolo,
			a.cd_pessoa_fisica cd_pessoa_fisica_conta,
			a.cd_cgc cd_cgc_conta,
			(select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
			from	pls_fatura pf,
				pls_fatura_evento pe,
				pls_fatura_conta pc
			where	pf.nr_sequencia	= pe.nr_seq_fatura
			and	pe.nr_sequencia	= pc.nr_seq_fatura_evento
			and	pc.nr_seq_conta	= a.nr_sequencia
			and	pf.ie_cancelamento = 'C'
			and	(pf.dt_geracao_ptu IS NOT NULL AND pf.dt_geracao_ptu::text <> '')) ie_atend_env_cancelado,
			pls_obter_dados_prestador(a.nr_seq_prestador_exec, 'TPR') ie_pessoa_prest_exec,
			a.nr_seq_prestador_exec,
			(select x.nr_seq_prestador_exec from pls_conta x where x.nr_sequencia = a.nr_seq_conta_princ) nr_seq_prestador_exec_princ,
			CASE WHEN w.ie_tipo_segurado_cta='I' THEN  'N'  ELSE 'S' END  id_continuado,
			a.dt_inicio_faturamento_imp,
			a.dt_inicio_faturamento,
			i.nr_guia_oper_glosada,
			a.ie_cobertura_especial,
			a.ie_regime_atendimento,
			a.ie_saude_ocupacional
		FROM pls_conta_pos_cab_v w, pls_fatura_evento f, pls_fatura_conta e, pls_segurado c, pls_protocolo_conta b, pls_conta a
LEFT OUTER JOIN pls_congenere d ON (a.nr_seq_congenere = d.nr_sequencia)
LEFT OUTER JOIN pls_conta_inf_ptu i ON (a.nr_sequencia = i.nr_seq_conta)
WHERE c.nr_sequencia		= a.nr_seq_segurado  and b.nr_sequencia		= a.nr_seq_protocolo and f.nr_sequencia		= e.nr_seq_fatura_evento and a.nr_sequencia		= e.nr_seq_conta and a.nr_sequencia		= w.nr_sequencia  and (e.ie_tipo_cobranca	<> '5' or coalesce(e.ie_tipo_cobranca::text, '') = '') and coalesce(b.ie_tipo_protocolo, 'C')	in ('C', 'I', 'R') and (e.vl_faturado + e.vl_faturado_ndc) > 0 and f.nr_seq_fatura		= nr_seq_pls_fatura_pc and ((coalesce(w.nr_seq_discussao::text, '') = '') or (not exists (	select	1
									from	pls_conta_pos_cab_v	x
									where	x.nr_sequencia 		= w.nr_sequencia
									and	coalesce(x.nr_seq_discussao::text, '') = ''))) and ((coalesce(w.nr_seq_conta_rec::text, '') = '') or (not exists (	select	1
									from	pls_conta_pos_cab_v	y
									where	y.nr_sequencia 		= w.nr_sequencia
									and	coalesce(y.nr_seq_conta_rec::text, '') = ''))) and ie_tipo_cobranca_fatura_pc	= 'C'
		 
union all

		select	c.nr_seq_ops_congenere,
			e.nr_seq_segurado,
			CASE WHEN a.ie_carater_internacao='E' THEN  0 WHEN a.ie_carater_internacao='U' THEN  1  ELSE 1 END  ie_carater_internacao,
			(select coalesce(x.cd_excecao, 'X') from pls_conta x where x.nr_sequencia = a.nr_sequencia) cd_excecao,
			a.nr_seq_tipo_atendimento,
			a.nr_seq_saida_spsadt,
			b.nr_sequencia nr_seq_protocolo,
			a.nr_sequencia nr_seq_conta,
			c.ie_pcmso,
			coalesce(pls_obter_taxa_interc_conta(a.dt_atendimento, dt_prev_envio_w, d.nr_sequencia, c.nr_sequencia), 0) pr_taxa_atual,
			pls_obter_se_envia_conta(a.dt_atendimento, dt_prev_envio_w, d.nr_sequencia, c.nr_sequencia, a.nr_sequencia) ie_fora_prazo, -- Conta fora do prazo limite
			a.ie_tipo_guia,
			a.cd_guia_ref cd_guia_referencia,
			coalesce(a.dt_entrada, a.dt_inicio_faturamento) dt_internacao,
			coalesce(a.dt_alta, coalesce(a.dt_fim_faturamento, a.dt_alta)) dt_alta,
			substr(b.cd_versao_tiss, 1, 7) nr_ver_tiss,
			coalesce(a.ie_recem_nascido, 'N') ie_recem_nascido,
			CASE WHEN ie_param_30_w='S' THEN  b.dt_recebimento  ELSE coalesce(b.dt_protocolo, b.dt_recebimento) END  dt_protocolo,
			coalesce(a.cd_guia_prestador, coalesce(a.cd_guia, trim(both a.cd_guia_prestador))) nr_guia_tiss_prestador,
			a.cd_guia_ref nr_guia_tiss_principal,
			a.cd_guia nr_guia_tiss_operadora,
			a.nr_seq_saida_int nr_seq_motivo_saida_int,
			a.nr_seq_guia,
			ptu_obter_tp_nota(a.nr_sequencia) tp_nota,
			ptu_obter_id_nota_principal(a.nr_sequencia) id_nota_principal,
			ptu_obter_tp_ind_acidente(a.ie_indicacao_acidente) tp_ind_acidente,
			ptu_obter_dt_ultima_autor(a.nr_seq_guia) dt_ultima_autoriz,
			a.cd_medico_solicitante cd_medico_solic,
			a.nr_seq_prestador,
			trim(both a.cd_guia_ref) nr_guia_principal,
			coalesce((select x.cd_guia_fat from pls_conta x where x.nr_sequencia = a.nr_sequencia), coalesce(a.cd_guia, a.cd_guia_prestador)) nr_nota,
			e.nr_sequencia nr_seq_fatura_conta,
			c.cd_cartao_intercambio,
			c.nr_seq_pagador,
			a.nr_seq_fatura,
			a.nr_seq_nota_cobranca,
			c.ie_tipo_repasse,
			a.ie_tipo_segurado ie_tipo_segurado,
			a.cd_guia_referencia cd_guia_ok,
			a.nr_seq_analise,
			c.nr_seq_congenere,
			coalesce(b.ie_apresentacao, 'A') ie_apresentacao,
			a.dt_atendimento dt_atend_conta,
			a.ie_tipo_consulta,
			coalesce(a.ie_tipo_faturamento, 'T') ie_tipo_faturamento,
			a.nr_seq_conta_princ,
			a.nr_seq_segurado nr_seq_seg_pos,
			coalesce(CASE WHEN(select count(1) from pls_guia_liminar_judicial n where n.nr_seq_guia = a.nr_seq_guia)=0 THEN  'N'  ELSE 'S' END , 'N') id_liminar,
			a.nr_seq_prest_inter,
			trim(both i.nr_ndr_glosada) nr_ndr_glosada,
			trim(both i.nr_lote_glosado) nr_lote_glosado,
			trim(both i.nr_nota_glosada) nr_nota_glosada,
			trim(both i.nr_fatura_glosada) nr_fatura_glosada,
			trim(both i.nr_guia_glosada) nr_guia_glosada,
			coalesce(b.ie_tipo_protocolo, 'C') ie_tipo_protocolo,
			a.cd_pessoa_fisica_conta,
			a.cd_cgc_conta,
			(select	CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END 
			from	pls_fatura pf,
				pls_fatura_evento pe,
				pls_fatura_conta pc
			where	pf.nr_sequencia	= pe.nr_seq_fatura
			and	pe.nr_sequencia	= pc.nr_seq_fatura_evento
			and	pc.nr_seq_conta	= a.nr_sequencia
			and	pf.ie_cancelamento = 'C'
			and	(pf.dt_geracao_ptu IS NOT NULL AND pf.dt_geracao_ptu::text <> '')) ie_atend_env_cancelado,
			pls_obter_dados_prestador(a.nr_seq_prestador_exec, 'TPR') ie_pessoa_prest_exec,
			a.nr_seq_prestador_exec,
			(select x.nr_seq_prestador_exec from pls_conta x where x.nr_sequencia = a.nr_seq_conta_princ) nr_seq_prestador_exec_princ,
			CASE WHEN a.ie_tipo_segurado='I' THEN  'N'  ELSE 'S' END  id_continuado,
			a.dt_inicio_faturamento_imp,
			a.dt_inicio_faturamento,
			i.nr_guia_oper_glosada,
			a.ie_cobertura_especial,
			a.ie_regime_atendimento,
			a.ie_saude_ocupacional
		FROM pls_fatura_evento f, pls_fatura_conta e, pls_segurado c, pls_protocolo_conta b, pls_conta_v a
LEFT OUTER JOIN pls_congenere d ON (a.nr_seq_congenere = d.nr_sequencia)
LEFT OUTER JOIN pls_conta_inf_ptu i ON (a.nr_sequencia = i.nr_seq_conta)
WHERE c.nr_sequencia		= a.nr_seq_segurado  and b.nr_sequencia		= a.nr_seq_protocolo and f.nr_sequencia		= e.nr_seq_fatura_evento and a.nr_sequencia		= e.nr_seq_conta  and (e.ie_tipo_cobranca	<> '5' or coalesce(e.ie_tipo_cobranca::text, '') = '') and coalesce(b.ie_tipo_protocolo, 'C')	in ('C', 'I', 'R') and (e.vl_faturado + e.vl_faturado_ndc) > 0 and f.nr_seq_fatura		= nr_seq_pls_fatura_pc and ie_tipo_cobranca_fatura_pc	= 'A' ) t
			
	--order	by decode(a.nr_seq_conta_princ, a.nr_sequencia, 1, 5);
	order by t.cd_guia_ok,
		t.nr_seq_segurado,
		CASE WHEN t.ie_tipo_guia='5' THEN  1  ELSE 5 END  asc,
		CASE WHEN coalesce(t.cd_guia_referencia::text, '') = '' THEN  1  ELSE 2 END ,
		CASE WHEN t.nr_seq_conta_princ=t.nr_seq_conta THEN  1  ELSE 5 END ,
		trunc(coalesce(t.dt_inicio_faturamento_imp, t.dt_inicio_faturamento));

C02 CURSOR FOR
	SELECT	nr_sequencia,
		dt_atendimento
	from	ptu_nota_cobranca
	where	cd_excecao		= 'E'
	and	coalesce(dt_ultima_autoriz::text, '') = ''
	and	nr_seq_fatura		= nr_seq_ptu_fatura_p;

C03 CURSOR FOR
	SELECT	a.nr_sequencia, --seq_nota_cobr
		b.ie_tipo_guia,
		b.ie_tipo_consulta,
		b.ie_indicacao_acidente,
		b.ie_carater_internacao,
		c.nr_seq_congenere,
		c.nr_sequencia  nr_seq_segurado,
		b.nr_seq_tipo_atendimento,
		a.tp_nota,
		a.dt_internacao dt_inicio_faturamento,
		a.dt_atendimento,
		b.ie_regime_atendimento,
		b.ie_saude_ocupacional
	from	ptu_nota_cobranca 	a,
		pls_conta 		b,
		pls_segurado 		c
	where	a.nr_seq_conta 		= b.nr_sequencia
	and	b.nr_seq_segurado	= c.nr_sequencia
	and	a.nr_seq_fatura 	= nr_seq_ptu_fatura_p;
	
-- Cursor utilizado para o ajuste final de hora da cobranca
c04 CURSOR(nr_seq_ptu_fatura_pc	ptu_nota_cobranca.nr_seq_fatura%type) FOR
	SELECT	substr(to_char(a.dt_atendimento, 'dd/mm/yyyyhh24:mi:ss'), 11, 10) hr_atendimento,
		to_char(a.dt_atendimento, 'dd/mm/yyyy') dt_atendimento,
		a.nr_sequencia
	from	ptu_nota_cobranca	a
	where	a.nr_seq_fatura 	= nr_seq_ptu_fatura_pc;

C05 CURSOR(nr_seq_conta_ref_pc		pls_conta.nr_seq_conta_referencia%type)FOR
	SELECT	nr_sequencia
	from	pls_conta
	where	nr_seq_conta_princ	= nr_seq_conta_ref_pc;
	
BEGIN

select	coalesce(b.dt_prev_envio, clock_timestamp()),
	b.cd_estabelecimento,
	b.dt_geracao,
	coalesce(c.ie_conta_fechada, 'N'),
	b.nr_sequencia,
	pls_obter_unimed_estab(b.cd_estabelecimento),
	a.nr_seq_congenere,
	coalesce(a.ie_tipo_fatura, 'C')
into STRICT	dt_prev_envio_w,
	cd_estabelecimento_w,
	dt_geracao_lote_w,
	ie_conta_fechada_w,
	nr_seq_lote_fat_w,
	cd_unimed_origem_w,
	nr_seq_congenere_fat_w,
	ie_tipo_cobranca_fatura_w
from	pls_regra_faturamento	c,
	pls_lote_faturamento	b,
	pls_fatura		a
where	b.nr_sequencia		= a.nr_seq_lote
and	c.nr_sequencia		= b.nr_seq_regra_fat
and	a.nr_sequencia		= nr_seq_pls_fatura_p;

ie_versao_w	:= somente_numero(ptu_obter_versao_dominio('A500', cd_interface_p));
ie_versao_xml_w	:= somente_numero(ptu_batch_xml_pck.obter_versao_dominio( cd_estabelecimento_w, nr_seq_congenere_fat_w, null, clock_timestamp(), 'A500'))*100;

if (ie_versao_xml_w > 0) then
	ie_versao_w := ie_versao_xml_w;
end if;

select	coalesce(max(ie_origem_nota_principal), 'GP'),
	coalesce(max(ie_agrupar_atendimento), 'N'),
	coalesce(max(ie_gerar_fat_contab),'S')
into STRICT	ie_origem_nota_principal_w,
	ie_agrupar_atendimento_w,
	ie_gerar_fat_contab_w
from	pls_parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

select	coalesce(max(ie_novo_pos_estab),'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false
where	cd_estabelecimento = cd_estabelecimento_w;

cd_unimed_prest_req_w	:= pls_obter_unimed_estab(cd_estabelecimento_w);
cd_unimed_prest_exec_w	:= cd_unimed_prest_req_w;

-- levanta o valor do parametro 30 - Enviar a data de recebimento do protocolo, como data do protocolo na nota cobranca
ie_param_30_w := obter_param_usuario(1356, 30, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_param_30_w);

for r_c01_w in c01( nr_seq_pls_fatura_p, ie_tipo_cobranca_fatura_w) loop

	nr_seq_segurado_w		:= r_c01_w.nr_seq_segurado;
	ie_carater_internacao_w		:= r_c01_w.ie_carater_internacao;
	cd_excecao_w			:= r_c01_w.cd_excecao;
	ie_pcmso_w			:= r_c01_w.ie_pcmso;
	dt_internacao_w			:= r_c01_w.dt_internacao;
	dt_alta_w			:= r_c01_w.dt_alta;
	nr_ver_tiss_w			:= r_c01_w.nr_ver_tiss;
	nr_guia_tiss_prestador_w	:= r_c01_w.nr_guia_tiss_prestador;
	nr_guia_tiss_principal_w	:= r_c01_w.nr_guia_tiss_principal;
	nr_guia_tiss_operadora_w	:= r_c01_w.nr_guia_tiss_operadora;
	tp_nota_w			:= r_c01_w.tp_nota;
	id_nota_principal_w		:= r_c01_w.id_nota_principal;
	tp_ind_acidente_w		:= r_c01_w.tp_ind_acidente;
	dt_ultima_autoriz_w		:= r_c01_w.dt_ultima_autoriz;
	cd_medico_solic_w		:= r_c01_w.cd_medico_solic;
	nr_guia_principal_w		:= r_c01_w.nr_guia_principal;
	nr_nota_w			:= r_c01_w.nr_nota;
	cd_cartao_intercambio_w		:= r_c01_w.cd_cartao_intercambio;
	nr_seq_pagador_w		:= r_c01_w.nr_seq_pagador;
	ie_tipo_repasse_w		:= r_c01_w.ie_tipo_repasse;
	ie_tipo_segurado_w		:= r_c01_w.ie_tipo_segurado;
	nr_seq_congenere_w		:= r_c01_w.nr_seq_congenere;
	dt_atend_conta_w		:= r_c01_w.dt_atend_conta;
	ie_tipo_consulta_w		:= r_c01_w.ie_tipo_consulta;
	nr_ndr_glosada_w		:= r_c01_w.nr_ndr_glosada;
	nr_lote_glosado_w		:= r_c01_w.nr_lote_glosado;
	nr_nota_glosada_w		:= r_c01_w.nr_nota_glosada;
	nr_fatura_glosada_w		:= r_c01_w.nr_fatura_glosada;
	nr_guia_glosada_w		:= r_c01_w.nr_guia_glosada;
	nr_guia_oper_glosada_w		:= r_c01_w.nr_guia_oper_glosada;
		
	ie_tipo_contrato_w		:= null;
	cd_usuario_plano_w		:= null;
	ie_envia_w			:= 'S';
	nr_cnpj_cpf_req_w		:= null;
	nm_prest_req_w			:= null;
	sg_cons_prof_req_w		:= null;
	nr_cons_prof_req_w		:= null;
	sg_uf_cons_req_w		:= null;
	nr_cbo_req_w			:= null;
	nr_seq_cbo_saude_req_w		:= null;
	nr_cbo_req_sus_w		:= null;
	ie_tipo_atendimento_w		:= '1';
	qt_registro_w			:= 0;
	ie_paciente_w			:= '1';
	qt_pj_w				:= 0;
	ie_motivo_saida_w		:= '1';
	qt_rec_glosa_w 			:= 0;
	nr_seq_cobranca_w		:= null;
	
	nm_prest_exec_w			:= null;
	id_aviso_w			:= 'N';
	nr_lote_prest_w			:= null;
	dt_conhecimento_w		:= null;
	tp_prest_exec_w			:= null;
	cd_cid_obito_w			:= null;
	id_rec_proprio_w		:= null;
	id_reem_par_int_w		:= 2;
	dt_protocolo_w			:= null;
	
	-- Se for maior ou igual a versao do PTU 11.0 
	if (ie_versao_w >= 110) then
		ie_motivo_saida_w := null;
	end if;
	
	-- Aviso de cobranca (A520)
	select	CASE WHEN coalesce(max(ac.nr_sequencia)::text, '') = '' THEN 'N'  ELSE 'S' END ,
		max(aa.nr_lote),
		max(aa.dt_transacao),
		max(ac.nr_sequencia)
	into STRICT	id_aviso_w,
		nr_lote_prest_w,
		dt_conhecimento_w,
		nr_seq_aviso_conta_w
	from	ptu_aviso_arquivo	aa,
		ptu_aviso_protocolo	ap,
		ptu_aviso_conta		ac
	where	aa.nr_sequencia	= ap.nr_seq_arquivo
	and	ap.nr_sequencia	= ac.nr_seq_aviso_protocolo
	and	not exists (	SELECT	1
				from	ptu_aviso_glosa_bx		x,
					ptu_aviso_glosa_bx_dados	y
				where	y.nr_seq_glosa_baixa		= x.nr_sequencia
				and	x.nr_seq_arquivo		= aa.nr_sequencia
				-- Status Concluido
				and	x.ie_status			= '3'
				-- Tipo de baixa (Baixa do aviso(aviso indevido))
				and	y.ie_tipo_glosa_baixa		= '2')
	and	ac.nr_seq_conta	= r_c01_w.nr_seq_conta;
	
	-- se nao achou no A520, busca no A500 de aviso
	if coalesce(nr_lote_prest_w::text, '') = '' then
		select 	CASE WHEN coalesce(max(pnc.nr_sequencia)::text, '') = '' THEN 'N'  ELSE 'S' END ,
			max(pnc.nr_lote_prest),
			max(pnc.dt_conhecimento),
			max(pnc.nr_sequencia)
		into STRICT  	id_aviso_w,
			nr_lote_prest_w,
			dt_conhecimento_w,
			nr_seq_aviso_conta_w
		from 	ptu_nota_cobranca 	pnc,
			ptu_fatura        	pf,
			pls_fatura        	plf
		where 	pnc.nr_seq_conta 		= r_c01_w.nr_seq_conta
		and 	pf.nr_sequencia  		= pnc.nr_seq_fatura
		and 	plf.nr_sequencia 		= pf.nr_seq_pls_fatura
		and 	coalesce(plf.ie_tipo_fatura,'C') 	= 'A';
	end if;
	CALL pls_insere_guia_proc_mat(r_c01_w.nr_seq_conta, nm_usuario_p);
	CALL pls_insere_guia_proc_mat_pct(r_c01_w.nr_seq_conta, nm_usuario_p, 'N');
	
	if (r_c01_w.nr_seq_seg_pos IS NOT NULL AND r_c01_w.nr_seq_seg_pos::text <> '') then
		select	max(nr_seq_pagador),
			max(nr_sequencia),
			max(ie_tipo_repasse),
			max(ie_tipo_segurado),
			max(cd_cartao_intercambio),
			max(nr_seq_congenere),
			max(ie_pcmso)
		into STRICT	nr_seq_pagador_w,
			nr_seq_segurado_w,
			ie_tipo_repasse_w,
			ie_tipo_segurado_w,
			cd_cartao_intercambio_w,
			nr_seq_congenere_w,
			ie_pcmso_w
		from	pls_segurado
		where	nr_sequencia = r_c01_w.nr_seq_seg_pos;
	end if;
	
	if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
		select	max(a.ie_tipo_contrato)
		into STRICT	ie_tipo_contrato_w
		from	pls_intercambio 	a,
			pls_contrato_pagador 	b
		where	a.nr_sequencia		= b.nr_seq_pagador_intercambio
		and	b.nr_sequencia		= nr_seq_pagador_w;
	end if;
	
	if (ie_tipo_contrato_w = 'S') then
		cd_usuario_plano_w := coalesce(substr(cd_cartao_intercambio_w, 4, 13), substr(pls_obter_dados_segurado(nr_seq_segurado_w, 'C'), 5, 13));
	else
		if (ie_tipo_repasse_w = 'C') and (ie_tipo_segurado_w in ('T','H', 'I')) then
			select	max(a.nr_cartao_intercambio)
			into STRICT	cd_usuario_plano_w
			from	pls_segurado_carteira a,
				pls_segurado b
			where 	b.nr_sequencia 		= a.nr_seq_segurado
			and	b.ie_tipo_repasse  	= 'C'
			and	b.ie_tipo_segurado 	in ('T','H', 'I')
			and	b.nr_sequencia 		= nr_seq_segurado_w;
			
			if (cd_usuario_plano_w IS NOT NULL AND cd_usuario_plano_w::text <> '') then
				cd_usuario_plano_w := substr(cd_usuario_plano_w, 5, 13);
			end if;
		end if;
		
		if (coalesce(trim(both cd_usuario_plano_w)::text, '') = '') then
			cd_usuario_plano_w := substr(pls_obter_dados_segurado(nr_seq_segurado_w, 'C'), 5, 13);
		end if;
	end if;
	
	ie_prest_a400_w := pls_obter_se_prest_a400(r_c01_w.nr_seq_conta, cd_estabelecimento_w);
	
	if (r_c01_w.ie_fora_prazo = 'N') or (ie_prest_a400_w = 'N') then
		ie_envia_w := 'N';
	else
		ie_envia_w := 'S';
	end if;
	
	select	max(cd_ptu)
	into STRICT	cd_motivo_encerram_w
	from	pls_motivo_saida
	where	nr_sequencia = r_c01_w.nr_seq_motivo_saida_int;
	
	----------------------------------------------------------------------------------		DADOS DO SOLICITANTE/REQUISITANTE		----------------------------------------------------------------------------------

	
	-- Buscar primeiro os dados do medico solicitante da conta
	if (cd_medico_solic_w IS NOT NULL AND cd_medico_solic_w::text <> '') then
		nr_cnpj_cpf_req_w	:= substr(obter_dados_pf(cd_medico_solic_w, 'CPF'), 1, 14);
		nm_prest_req_w		:= substr(obter_nome_medico(cd_medico_solic_w, 'N'), 1, 70);
		sg_cons_prof_req_w	:= substr(pls_obter_sg_conselho_ptu(cd_medico_solic_w), 1, 12);
		nr_cons_prof_req_w	:= substr(obter_dados_medico(cd_medico_solic_w, 'CRM'), 1, 15);
		sg_uf_cons_req_w	:= substr(obter_dados_medico(cd_medico_solic_w, 'UFCRM'), 1,2);
		
		select	max(nr_sequencia)
		into STRICT	nr_seq_prestador_req_w
		from	pls_prestador
		where	cd_pessoa_fisica = cd_medico_solic_w;
		
		select	max(substr(somente_numero_char(coalesce(cd_prest_a400, cd_prestador)), 1, 8))
		into STRICT	cd_prestador_req_w
		from	pls_prestador
		where	nr_sequencia = nr_seq_prestador_req_w;
		
		begin
			select	max(nr_seq_cbo_saude)
			into STRICT	nr_seq_cbo_saude_req_w
			from	pessoa_fisica
			where	cd_pessoa_fisica = cd_medico_solic_w;
		exception
		when others then
			nr_seq_cbo_saude_req_w := null;
		end;
		
		begin
			select	max(cd_cbo)
			into STRICT	nr_cbo_req_sus_w
			from	sus_cbo_pessoa_fisica
			where	cd_pessoa_fisica = cd_medico_solic_w;
		exception
		when others then
			nr_cbo_req_sus_w := null;
		end;

	-- Se nao tiver, buscar o prestador do atendimento
	elsif (r_c01_w.nr_seq_prestador IS NOT NULL AND r_c01_w.nr_seq_prestador::text <> '') then
		select	coalesce(a.cd_cgc,substr(obter_dados_pf(a.cd_pessoa_fisica, 'CPF'), 1, 14)),
			a.cd_pessoa_fisica,
			substr(pls_obter_dados_prestador(a.nr_sequencia, 'N'), 1, 70),
			substr(somente_numero_char(coalesce(cd_prest_a400, cd_prestador)), 1, 8)
		into STRICT	nr_cnpj_cpf_req_w,
			cd_medico_solic_w,
			nm_prest_req_w,
			cd_prestador_req_w
		from	pls_prestador	a
		where	a.nr_sequencia	= r_c01_w.nr_seq_prestador;
		
		if (cd_medico_solic_w IS NOT NULL AND cd_medico_solic_w::text <> '') then
			nr_cnpj_cpf_req_w	:= substr(obter_dados_pf(cd_medico_solic_w, 'CPF'), 1, 14);
			nm_prest_req_w		:= substr(obter_nome_medico(cd_medico_solic_w, 'N'), 1, 70);
			sg_cons_prof_req_w	:= substr(pls_obter_sg_conselho_ptu(cd_medico_solic_w), 1, 12);
			nr_cons_prof_req_w	:= substr(obter_dados_medico(cd_medico_solic_w, 'CRM'), 1, 15);
			sg_uf_cons_req_w	:= substr(obter_dados_medico(cd_medico_solic_w, 'UFCRM'), 1,2);
			
			if (coalesce(cd_prestador_req_w::text, '') = '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_req_w
				from	pls_prestador
				where	cd_pessoa_fisica = cd_medico_solic_w;
				
				select	max(substr(somente_numero_char(coalesce(cd_prest_a400, cd_prestador)), 1, 8))
				into STRICT	cd_prestador_req_w
				from	pls_prestador
				where	nr_sequencia = nr_seq_prestador_req_w;
			end if;
			
			begin
				select	max(nr_seq_cbo_saude)
				into STRICT	nr_seq_cbo_saude_req_w
				from	pessoa_fisica
				where	cd_pessoa_fisica = cd_medico_solic_w;
			exception
			when others then
				nr_seq_cbo_saude_req_w := null;
			end;

			begin
				select	max(cd_cbo)
				into STRICT	nr_cbo_req_sus_w
				from	sus_cbo_pessoa_fisica
				where	cd_pessoa_fisica = cd_medico_solic_w;
			exception
			when others then
				nr_cbo_req_sus_w := null;
			end;
		end if;
		
	elsif (r_c01_w.cd_guia_referencia IS NOT NULL AND r_c01_w.cd_guia_referencia::text <> '') then
		select	count(1)
		into STRICT	qt_registro_w
		from	pls_guia_plano
		where	cd_guia	= r_c01_w.cd_guia_referencia;
		
		if (qt_registro_w > 0) then
			select	max(cd_medico_solicitante),
				substr(pls_obter_dados_prestador(max(nr_seq_prestador), 'N'), 1, 70),
				max(nr_seq_prestador)
			into STRICT	cd_medico_solic_w,
				nm_prest_req_w,
				nr_seq_prestador_req_w
			from	pls_guia_plano
			where	cd_guia	= r_c01_w.cd_guia_referencia;
			
			if (cd_medico_solic_w IS NOT NULL AND cd_medico_solic_w::text <> '') then
				nr_cnpj_cpf_req_w	:= substr(obter_dados_pf(cd_medico_solic_w, 'CPF'), 1, 14);
				nm_prest_req_w		:= coalesce(substr(obter_nome_medico(cd_medico_solic_w, 'N'), 1, 70), nm_prest_req_w);
				sg_cons_prof_req_w	:= substr(pls_obter_sg_conselho_ptu(cd_medico_solic_w), 1, 12);
				nr_cons_prof_req_w	:= substr(obter_dados_medico(cd_medico_solic_w, 'CRM'), 1, 15);
				sg_uf_cons_req_w	:= substr(obter_dados_medico(cd_medico_solic_w, 'UFCRM'), 1,2);
				
				select	max(substr(somente_numero_char(coalesce(cd_prest_a400, cd_prestador)), 1, 8))
				into STRICT	cd_prestador_req_w
				from	pls_prestador
				where	nr_sequencia = nr_seq_prestador_req_w;
					
				if (coalesce(cd_prestador_req_w::text, '') = '') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_prestador_req_w
					from	pls_prestador
					where	cd_pessoa_fisica = cd_medico_solicitante_w;
					
					select	max(substr(somente_numero_char(coalesce(cd_prest_a400, cd_prestador)), 1, 8))
					into STRICT	cd_prestador_req_w
					from	pls_prestador
					where	nr_sequencia = nr_seq_prestador_req_w;
				end if;
				
				begin
					select	max(nr_seq_cbo_saude)
					into STRICT	nr_seq_cbo_saude_req_w
					from	pessoa_fisica
					where	cd_pessoa_fisica = cd_medico_solic_w;
				exception
				when others then
					nr_seq_cbo_saude_req_w := null;
				end;
				
				begin
					select	max(cd_cbo)
					into STRICT	nr_cbo_req_sus_w
					from	sus_cbo_pessoa_fisica
					where	cd_pessoa_fisica = cd_medico_solic_w;
				exception
				when others then
					nr_cbo_req_sus_w := null;
				end;
			end if;
		end if;
	end if;
	
	if (r_c01_w.ie_tipo_guia = '6') and (r_c01_w.cd_guia_referencia IS NOT NULL AND r_c01_w.cd_guia_referencia::text <> '') then
		select	max(cd_medico_solicitante),
			coalesce(substr(pls_obter_dados_prestador(max(nr_seq_prestador), 'N'), 1, 70), nm_prest_req_w),
			max(nr_seq_prestador)
		into STRICT	cd_medico_solic_w,
			nm_prest_req_w,
			nr_seq_prestador_req_w
		from	pls_guia_plano
		where	cd_guia	= r_c01_w.cd_guia_referencia;
		
		if (cd_medico_solic_w IS NOT NULL AND cd_medico_solic_w::text <> '') then
			nr_cnpj_cpf_req_w	:= substr(obter_dados_pf(cd_medico_solic_w, 'CPF'), 1, 14);
			nm_prest_req_w		:= coalesce(substr(obter_nome_medico(cd_medico_solic_w, 'N'), 1, 70), nm_prest_req_w);
			sg_cons_prof_req_w	:= substr(pls_obter_sg_conselho_ptu(cd_medico_solic_w), 1, 12);
			nr_cons_prof_req_w	:= substr(obter_dados_medico(cd_medico_solic_w, 'CRM'), 1, 15);
			sg_uf_cons_req_w	:= substr(obter_dados_medico(cd_medico_solic_w, 'UFCRM'), 1,2);
			
			select	max(substr(somente_numero_char(coalesce(cd_prest_a400, cd_prestador)), 1, 8))
			into STRICT	cd_prestador_req_w
			from	pls_prestador
			where	nr_sequencia = nr_seq_prestador_req_w;
			
			if (coalesce(cd_prestador_req_w::text, '') = '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_prestador_req_w
				from	pls_prestador
				where	cd_pessoa_fisica = cd_medico_solic_w;
				
				select	max(substr(somente_numero_char(coalesce(cd_prest_a400, cd_prestador)), 1, 8))
				into STRICT	cd_prestador_req_w
				from	pls_prestador
				where	nr_sequencia = nr_seq_prestador_req_w;
			end if;
			
			begin
				select	max(nr_seq_cbo_saude)
				into STRICT	nr_seq_cbo_saude_req_w
				from	pessoa_fisica
				where	cd_pessoa_fisica = cd_medico_solic_w;
			exception
			when others then
				nr_seq_cbo_saude_req_w := null;
			end;
			
			begin
				select	max(cd_cbo)
				into STRICT	nr_cbo_req_sus_w
				from	sus_cbo_pessoa_fisica
				where	cd_pessoa_fisica = cd_medico_solic_w;
			exception
			when others then
				nr_cbo_req_sus_w := null;
			end;
		end if;
	end if;
	
	cd_prestador_req_w := coalesce(cd_prestador_req_w, 1);
	
	if (nr_seq_cbo_saude_req_w IS NOT NULL AND nr_seq_cbo_saude_req_w::text <> '') then
		nr_cbo_req_w := pls_obter_cbo_saude_ptu(nr_seq_cbo_saude_req_w, null, 'A500', cd_interface_p);
	end if;
	
	if (coalesce(nr_cbo_req_w::text, '') = '') and (somente_numero(nr_cbo_req_sus_w) > 0) then
		nr_cbo_req_w := somente_numero(nr_cbo_req_sus_w);
	end if;
	
	ie_benef_remido_w	:= null;
	
	select	coalesce(max(a.ie_remido),'N')
	into STRICT	ie_benef_remido_w
	from	pls_fatura	a
	where	a.nr_sequencia	= nr_seq_pls_fatura_p;
	
	if (r_c01_w.nr_seq_fatura IS NOT NULL AND r_c01_w.nr_seq_fatura::text <> '') and (r_c01_w.nr_seq_nota_cobranca IS NOT NULL AND r_c01_w.nr_seq_nota_cobranca::text <> '') then
		if (ie_tipo_contrato_w = 'S') then
			select	trim(both max(tp_nota)),
				trim(both max(ie_tipo_atendimento)),
				trim(both max(coalesce(cd_excecao, 'X'))),
				trim(both max(ie_carater_atendimento)),
				trim(both max(ie_paciente)),
				trim(both max(tp_ind_acidente)),
				trim(both max(motivo_encerram)),
				trim(both max(nr_ver_tiss)),
				max(cd_unimed_prest_req),
				max(ie_regime_atendimento)
			into STRICT	tp_nota_w,
				ie_tipo_atendimento_w,
				cd_excecao_w,
				ie_carater_internacao_w,
				ie_paciente_w,
				tp_ind_acidente_w,
				cd_motivo_encerram_w,
				nr_ver_tiss_w,
				cd_unimed_prest_req_w,
				ie_regime_atendimento_w
			from	ptu_nota_cobranca
			where	nr_seq_fatura = r_c01_w.nr_seq_fatura
			and	nr_sequencia = r_c01_w.nr_seq_nota_cobranca;
		end if;
		
		if (ie_benef_remido_w = 'S') then
			select	coalesce(max(nr_cnpj_cpf_req),nr_cnpj_cpf_req_w),
				coalesce(max(nm_prest_req),nm_prest_req_w),
				coalesce(max(sg_cons_prof_req),sg_cons_prof_req_w),
				coalesce(max(nr_cons_prof_req),nr_cons_prof_req_w),
				coalesce(max(sg_uf_cons_req),sg_uf_cons_req_w),
				coalesce(max(nr_cbo_req),nr_cbo_req_w),
				coalesce(max(cd_unimed_prest_req),cd_unimed_prest_req_w)
			into STRICT	nr_cnpj_cpf_req_w,
				nm_prest_req_w,
				sg_cons_prof_req_w,
				nr_cons_prof_req_w,
				sg_uf_cons_req_w,
				nr_cbo_req_w,
				cd_unimed_prest_req_w
			from	ptu_nota_cobranca
			where	nr_seq_fatura	= r_c01_w.nr_seq_fatura
			and	nr_sequencia	= r_c01_w.nr_seq_nota_cobranca;
		else
			-- OS 802541 - historico 17/10/2014 11:10:30
			select	coalesce(nr_cnpj_cpf_req_w,max(nr_cnpj_cpf_req)),
				coalesce(nm_prest_req_w,max(nm_prest_req)),
				coalesce(sg_cons_prof_req_w,max(sg_cons_prof_req)),
				coalesce(nr_cons_prof_req_w,max(nr_cons_prof_req)),
				coalesce(sg_uf_cons_req_w,max(sg_uf_cons_req)),
				coalesce(nr_cbo_req_w,max(nr_cbo_req)),
				coalesce(cd_unimed_prest_req_w, max(cd_unimed_prest_req))
			into STRICT	nr_cnpj_cpf_req_w,
				nm_prest_req_w,
				sg_cons_prof_req_w,
				nr_cons_prof_req_w,
				sg_uf_cons_req_w,
				nr_cbo_req_w,
				cd_unimed_prest_req_w
			from	ptu_nota_cobranca
			where	nr_seq_fatura	= r_c01_w.nr_seq_fatura
			and	nr_sequencia	= r_c01_w.nr_seq_nota_cobranca;
		end if;
	end if;
	
	select	count(1)
	into STRICT	qt_pj_w
	from	pessoa_juridica
	where	cd_cgc	= nr_cnpj_cpf_req_w  LIMIT 1;
	
	-- 802541 - PEGA DA AUTORIZACAO QUANDO O PRESTADOR E PJ
	if (r_c01_w.nr_seq_guia IS NOT NULL AND r_c01_w.nr_seq_guia::text <> '') and (coalesce(r_c01_w.nr_seq_fatura::text, '') = '') and (coalesce(r_c01_w.nr_seq_nota_cobranca::text, '') = '') and (qt_pj_w > 0) then
		select	max(cd_medico_solicitante),
			-- se o cbo nao existir ou for o 999999 (nao informado) tenta pegar da autorizacao
			case	when(coalesce(nr_cbo_req_w::text, '') = '') or (nr_cbo_req_w = 999999)
				then pls_obter_cbo_saude_ptu(max(nr_seq_cbo_saude), null, 'A500', cd_interface_p)
				else nr_cbo_req_w
			end
		into STRICT	cd_medico_solicitante_w,
			nr_cbo_req_w
		from	pls_guia_plano
		where	nr_sequencia = r_c01_w.nr_seq_guia;
		
		if (cd_medico_solicitante_w IS NOT NULL AND cd_medico_solicitante_w::text <> '') and (ie_benef_remido_w = 'N') then
			nr_cnpj_cpf_req_w	:= substr(obter_dados_pf(cd_medico_solicitante_w, 'CPF'), 1, 14);
			nm_prest_req_w		:= substr(obter_nome_medico(cd_medico_solicitante_w, 'N'), 1, 70);
			sg_cons_prof_req_w	:= substr(pls_obter_sg_conselho_ptu(cd_medico_solicitante_w), 1, 12);
			nr_cons_prof_req_w	:= substr(obter_dados_medico(cd_medico_solicitante_w, 'CRM'), 1, 15);
			sg_uf_cons_req_w	:= substr(obter_dados_medico(cd_medico_solicitante_w, 'UFCRM'), 1,2);
			
			-- se na autorizacao nao existir ou for o 999999 (nao informado) tenta pegar diretamente do cadastro do medico
			if (coalesce(nr_cbo_req_w::text, '') = '') or (nr_cbo_req_w = 999999) then
				begin
					select	pls_obter_cbo_saude_ptu(max(nr_seq_cbo_saude), null, 'A500', cd_interface_p)
					into STRICT	nr_cbo_req_w
					from	pessoa_fisica
					where	cd_pessoa_fisica = cd_medico_solicitante_w;
				exception
				when others then
					null;
				end;
			end if;
		end if;
	end if;
	
	if (coalesce(trim(both nr_cnpj_cpf_req_w),'XX') = 'XX')
	 or (somente_numero(nr_cnpj_cpf_req_w) = 0) then
		if (ie_benef_remido_w = 'N') then
			if (r_c01_w.nr_seq_prestador IS NOT NULL AND r_c01_w.nr_seq_prestador::text <> '') then
				select  COALESCE(a.cd_cgc,substr(obter_dados_pf(a.cd_pessoa_fisica, 'CPF'), 1, 14)),
					a.cd_pessoa_fisica,
					substr(pls_obter_dados_prestador(a.nr_sequencia, 'N'), 1, 70),
					substr(somente_numero_char(coalesce(cd_prest_a400, cd_prestador)), 1, 8)
					into STRICT  nr_cnpj_cpf_req_w,
					cd_medico_solic_w,
					nm_prest_req_w,
					cd_prestador_req_w
				from  pls_prestador  a
				where  a.nr_sequencia  = r_c01_w.nr_seq_prestador;
			else
				select 	max(a.nr_seq_prestador)
				into STRICT 	nr_seq_prestador_req_w
				from 	pls_guia_plano a 
				where 	a.cd_guia = coalesce(r_c01_w.cd_guia_referencia,r_c01_w.cd_guia_ok);
				
				if 	(nr_seq_prestador_req_w IS NOT NULL AND nr_seq_prestador_req_w::text <> '') then
					select  COALESCE(a.cd_cgc,substr(obter_dados_pf(a.cd_pessoa_fisica, 'CPF'), 1, 14)),
						a.cd_pessoa_fisica,
						substr(pls_obter_dados_prestador(a.nr_sequencia, 'N'), 1, 70),
						substr(somente_numero_char(coalesce(cd_prest_a400, cd_prestador)), 1, 8)
					into STRICT  	nr_cnpj_cpf_req_w,
						cd_medico_solic_w,
						nm_prest_req_w,
						cd_prestador_req_w
					from  	pls_prestador  a
					where  	a.nr_sequencia  = nr_seq_prestador_req_w;
				end if;
			end if;
		end if;
	end if;
	----------------------------------------------------------------------------------	FIM	DADOS DO SOLICITANTE/REQUISITANTE	FIM	----------------------------------------------------------------------------------

	
	-- CID Principal

	-- prioriza o pos
	select	max(cd_doenca)
	into STRICT	cd_doenca_w
	from	pls_diagnostico_conta_pos
	where	nr_seq_conta = r_c01_w.nr_seq_conta
	and	coalesce(ie_classificacao,'P') = 'P';
	
	-- se nao achou no pos, procura na conta
	if (coalesce(cd_doenca_w::text, '') = '') then
	
		select	max(cd_doenca)
		into STRICT	cd_doenca_w
		from	pls_diagnostico_conta
		where	nr_seq_conta = r_c01_w.nr_seq_conta
		and	coalesce(ie_classificacao,'P') = 'P';
	end if;
	
	-- CID Secundario

	-- prioriza o pos
	select	max(cd_doenca)
	into STRICT	cd_doenca_2_w
	from	pls_diagnostico_conta_pos
	where	nr_seq_conta = r_c01_w.nr_seq_conta
	and	coalesce(ie_classificacao,'P') = 'S';
	
	-- se nao achou no pos, procura na conta
	if (coalesce(cd_doenca_2_w::text, '') = '') then
		select	max(cd_doenca)
		into STRICT	cd_doenca_2_w
		from	pls_diagnostico_conta
		where	nr_seq_conta = r_c01_w.nr_seq_conta
		and	coalesce(ie_classificacao,'P') = 'S';
	end if;

	--CID 3

	-- prioriza o pos
	select	max(cd_doenca)
	into STRICT	cd_doenca_3_w
	from	pls_diagnostico_conta_pos
	where	nr_seq_conta = r_c01_w.nr_seq_conta
	and	coalesce(ie_classificacao,'P') = 'T';
	
	-- se nao achou no pos, procura na conta
	if (coalesce(cd_doenca_3_w::text, '') = '') then
		select	max(cd_doenca)
		into STRICT	cd_doenca_3_w
		from	pls_diagnostico_conta
		where	nr_seq_conta = r_c01_w.nr_seq_conta
		and	coalesce(ie_classificacao,'P') = 'T';
	end if;

	--CID 4

	-- prioriza o pos
	select	max(cd_doenca)
	into STRICT	cd_doenca_4_w
	from	pls_diagnostico_conta_pos
	where	nr_seq_conta = r_c01_w.nr_seq_conta
	and	coalesce(ie_classificacao,'P') = 'Q';
	
	-- se nao achou no pos, procura na conta
	if (coalesce(cd_doenca_4_w::text, '') = '') then
		select	max(cd_doenca)
		into STRICT	cd_doenca_4_w
		from	pls_diagnostico_conta
		where	nr_seq_conta = r_c01_w.nr_seq_conta
		and	coalesce(ie_classificacao,'P') = 'Q';
	end if;

	-- SP/SADT
	if (r_c01_w.ie_tipo_guia = '4') then
		begin
			select	substr(cd_tiss, 1, 2)
			into STRICT	ie_tipo_atendimento_w
			from    pls_tipo_atendimento
			where	nr_sequencia = r_c01_w.nr_seq_tipo_atendimento;
			
			ie_regime_atendimento_w := r_c01_w.ie_regime_atendimento;
		exception
		when others then
			ie_tipo_atendimento_w := null;
		end;
	else
		ie_tipo_atendimento_w := null;
	end if;
	
	-- Consulta
	if (r_c01_w.ie_tipo_guia	= '3') then
		nr_cbo_req_w := 0; -- Regra: para o tipo de nota igual a 1 Consulta (registro 502, seq 25 ) o campo NR_CBO_REQ, seq 38 do registro 502, devera ser SEMPRE preenchido com uma sequencia de zeros.
		ie_carater_internacao_w	:= '0';
		
		if (coalesce(ie_tipo_atendimento_w::text, '') = '') then
			ie_tipo_atendimento_w := null;
		end if;
	end if;
	
	begin
		select	substr(cd_tiss, 1, 1)
		into STRICT	ie_motivo_saida_w
		from	pls_motivo_saida_sadt
		where	nr_sequencia = r_c01_w.nr_seq_saida_spsadt;
	exception
	when others then
		ie_motivo_saida_w := '1';
	end;
	
	-- Para TP_NOTA igual a 1 ou 4, o campo deve ser preenchido com espacos em branco.

	-- Para TP_NOTA = 2, os Motivos de Saida da Internacao previstos sao os de Obito (Tabela O, item "por Obito").
	if (tp_nota_w in ('1', '4')) or
		((tp_nota_w = '2') and (cd_motivo_encerram_w not in ('47', '48', '49', '89', '90', '91'))) then
		cd_motivo_encerram_w := null;
	end if;
	
	-- Quando for internacao o Motivo saida SP/SADT fica em branco
	if (tp_nota_w in ('3', '4')) then
		ie_motivo_saida_w := null;
	end if;
	
	select	max(ie_tipo_guia),
		max(ptu_obter_tp_nota(nr_sequencia)) tp_nota
	into STRICT	ie_tipo_guia_princ_w,
		tp_nota_princ_w
	from	pls_conta
	where	nr_sequencia = r_c01_w.nr_seq_conta_princ;
	
	if (r_c01_w.cd_guia_referencia IS NOT NULL AND r_c01_w.cd_guia_referencia::text <> '') and (ie_tipo_guia_princ_w = '5') and (r_c01_w.ie_tipo_guia <> '5') and (cd_excecao_w <> 'J') and (nr_guia_tiss_operadora_w <> r_c01_w.cd_guia_referencia) then
		cd_excecao_w := 'E';
		
		if (ie_agrupar_atendimento_w = 'N') then
			-- Se o tipo nota da guia principal for 'Internacao' e o tipo nota da guia atual for 'Honorario Individual' ou 'SP/SADT' a excecao da conta atual deve ser a mesma da guia principal
			if (tp_nota_princ_w = '3') and (r_c01_w.tp_nota in ('2','4')) then
				select	max(cd_excecao)
				into STRICT	cd_excecao_princ_w
				from	ptu_nota_cobranca
				where	nr_nota = r_c01_w.nr_guia_principal
				and	cd_usuario_plano = cd_usuario_plano_w;
				
				cd_excecao_w := coalesce(cd_excecao_princ_w, cd_excecao_w);
			end if;
		end if;
	end if;
	
	select	coalesce(max(x.ie_pcmso),'N')
	into STRICT	ie_pcmso_req_w
	from	pls_guia_plano		c,
		pls_execucao_req_item	i,
		pls_requisicao		x
	where	x.nr_sequencia		= i.nr_seq_requisicao
	and	c.nr_sequencia		= i.nr_seq_guia
	and	c.nr_sequencia		= r_c01_w.nr_seq_guia;
	
	if (ie_pcmso_w = 'S') or (ie_pcmso_req_w = 'S') then
		if (ie_versao_w < 60) then -- OS 784408 - jtonon - Alterado para que o valor do campo ie_paciente nao seja sempre 9 (Saude ocupacional) para a versao PTU 6.0.
			ie_paciente_w := '3';
		else
			if (ie_paciente_w in ('2', '3', '4', '5', '6', '7', '8', '9')) or (ie_pcmso_w = 'S') or (coalesce(ie_pcmso_req_w, 'N') = 'S') then
				ie_paciente_w := '9';
			else
				ie_paciente_w := '1';
			end if;
		end if;
	else
		ie_paciente_w := '1';
	end if;
	
	--------	TRATAMENTO	CD_EXCECAO
	if (cd_excecao_w not in ('J', 'E')) then
		if (coalesce(r_c01_w.nr_seq_guia::text, '') = '') then
			cd_excecao_w := '0';
			
		elsif (r_c01_w.nr_seq_guia IS NOT NULL AND r_c01_w.nr_seq_guia::text <> '') then
			cd_excecao_w := 'L';
		end if;
		
		if (r_c01_w.ie_tipo_guia = '5') then
			cd_excecao_w := 'L';
		end if;
		
	end if;

	-- se nao for J, verifica se tem recurso de glosa
	if (cd_excecao_w != 'J') then
	
		if (ie_novo_pos_estab_w = 'N') then
			select	sum(qt_rec)
			into STRICT	qt_rec_glosa_w
			from (	SELECT	count(1) qt_rec
				from	pls_fatura_proc 		a,
					pls_conta_pos_estabelecido 	b
				where	b.nr_sequencia 			= a.nr_seq_conta_pos_estab
				and	a.nr_seq_fatura_conta 		= r_c01_w.nr_seq_fatura_conta
				and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
				and	coalesce(a.nr_seq_pos_proc::text, '') = ''
				
union all

				SELECT	count(1) qt_rec
				from	pls_fatura_mat 			a,
					pls_conta_pos_estabelecido 	b
				where	b.nr_sequencia 			= a.nr_seq_conta_pos_estab
				and	a.nr_seq_fatura_conta 		= r_c01_w.nr_seq_fatura_conta
				and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
				and	coalesce(a.nr_seq_pos_mat::text, '') = '') alias9;
		else
			select	sum(qt_rec)
			into STRICT	qt_rec_glosa_w
			from (	SELECT	count(1) qt_rec
				from	pls_fatura_proc			a,
					pls_conta_pos_proc		b
				where	b.nr_sequencia			= a.nr_seq_pos_proc
				and	a.nr_seq_fatura_conta 		= r_c01_w.nr_seq_fatura_conta
				and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
				
union all

				SELECT	count(1) qt_rec
				from	pls_fatura_mat			a,
					pls_conta_pos_mat		b
				where	b.nr_sequencia			= a.nr_seq_pos_mat
				and	a.nr_seq_fatura_conta 		= r_c01_w.nr_seq_fatura_conta
				and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')) alias5;
		end if;
			
		if (qt_rec_glosa_w > 0) then
			cd_excecao_w := 'I';
		end if;
	end if;
	
	if (cd_excecao_w = 'E') and (cd_excecao_w <> 'J') then
		id_nota_principal_w := 'N';
	end if;
	
	tp_ind_acidente_w := coalesce(tp_ind_acidente_w, '9');
	
	-- aaschlote 09/09/2014 OS - 784408
	if (coalesce(nr_ver_tiss_w::text, '') = '') then
		nr_ver_tiss_w := pls_obter_versao_tiss;
	end if;
	
	if (coalesce(nr_ver_tiss_w, '2.02.03') = '2.02.01') then
		nr_ver_tiss_w := '2.02.03';
	else
		nr_ver_tiss_w := coalesce(nr_ver_tiss_w, '2.02.03');
	end if;
	
	if (somente_numero(nr_ver_tiss_w) >= 30000) and (tp_ind_acidente_w = '0') then
		tp_ind_acidente_w := '9';
	end if;
	
	-- Campos que nao deverao conter informacoes quando a versao da TISS for superior a 3.00.00
	if (somente_numero(nr_ver_tiss_w) >= 30000) then
		ie_motivo_saida_w := null;
	end if;
	
	if (somente_numero(nr_ver_tiss_w) <= 20203) and (tp_ind_acidente_w = '9') then
		tp_ind_acidente_w := '0';
	end if;
	
	nr_guia_tiss_prestador_w := coalesce(trim(both nr_guia_tiss_prestador_w), nr_guia_tiss_operadora_w);
	
	if (r_c01_w.ie_tipo_guia = '6') then
		if	((coalesce(dt_internacao_w::text, '') = '') or (to_char(dt_internacao_w, 'hh24:mi:ss') = '00:00:00')) then
			select	coalesce(max(dt_entrada), dt_internacao_w)
			into STRICT	dt_cta_internacao_w
			from	pls_conta
			where	cd_guia_referencia	= r_c01_w.cd_guia_referencia
			and	ie_tipo_guia		= '5';
			
			-- Como a data da guia de honorario pode ser diferente da guia de internacao, entao verificar se as datas sao iguais para a recuperacao da data/hora
			if (trunc(dt_cta_internacao_w) = trunc(coalesce(dt_internacao_w,dt_cta_internacao_w))) then
				dt_internacao_w := dt_cta_internacao_w;
			end if;
		end if;

		-- OS 1918721 - JTRINDADE - Data da alta, respeitando a analise - Unimed Maringa
		if	(ie_agrupar_atendimento_w != 'A') then	-- 'A' Agrupar por analise
			if	((coalesce(dt_alta_w::text, '') = '') or (to_char(dt_alta_w, 'hh24:mi:ss') = '00:00:00')) then
				select	coalesce(max(dt_alta), dt_alta_w)
				into STRICT	dt_alta_w
				from	pls_conta
				where	cd_guia_referencia	= r_c01_w.cd_guia_referencia
				and	ie_tipo_guia		= '5';
			end if;
		else
			if	((coalesce(dt_alta_w::text, '') = '') or (to_char(dt_alta_w, 'hh24:mi:ss') = '00:00:00')) then
				select	coalesce(max(dt_alta), dt_alta_w)
				into STRICT	dt_alta_w
				from	pls_conta
				where	cd_guia_referencia	= r_c01_w.cd_guia_referencia
				and	nr_seq_analise		= r_c01_w.nr_seq_analise
				and	ie_tipo_guia		= '5';
			end if;
		end if;
	end if;
	
	select	coalesce(c.nr_seq_ops_congenere, c.nr_seq_congenere)
	into STRICT	nr_seq_congenere_conta_w
	from	pls_segurado		c,
		pls_conta		b
	where	c.nr_sequencia		= b.nr_seq_segurado
	and	b.nr_sequencia		= r_c01_w.nr_seq_conta;
	
	
	if (ie_conta_fechada_w = 'S') and (r_c01_w.ie_apresentacao = 'A') then
		if (r_c01_w.cd_guia_ok IS NOT NULL AND r_c01_w.cd_guia_ok::text <> '') then
			select	min(dt_alta)
			into STRICT	dt_emissao_conta_w
			from	pls_conta
			where	nr_seq_segurado	= nr_seq_segurado_w
			and	cd_guia_ok	= r_c01_w.cd_guia_ok
			and	ie_tipo_guia	= '5';
			
			if (dt_emissao_conta_w IS NOT NULL AND dt_emissao_conta_w::text <> '') and (pls_obter_se_envia_conta(coalesce(dt_atend_conta_w, dt_emissao_conta_w), dt_geracao_lote_w, nr_seq_congenere_conta_w, nr_seq_segurado_w, r_c01_w.nr_seq_conta) = 'N') then
				dt_atend_conta_w := coalesce(dt_emissao_conta_w, dt_atend_conta_w);

			elsif	((coalesce(dt_internacao_w::text, '') = '') and
			 	((r_c01_w.ie_tipo_guia in ('4','6')) and (lpad(ie_tipo_atendimento_w, 2, '0') = '07' or coalesce(ie_regime_atendimento_w,9) = 3)) and (r_c01_w.cd_guia_referencia IS NOT NULL AND r_c01_w.cd_guia_referencia::text <> '')) then

				select	min(a.dt_inicio_faturamento)
				into STRICT	dt_atend_conta_ini_w
				from	pls_conta	a
				where	a.cd_guia_ok		= r_c01_w.cd_guia_ok
				and	a.nr_seq_segurado	= r_c01_w.nr_seq_segurado
				and	a.ie_tipo_guia		= '5';

				if (coalesce(dt_atend_conta_ini_w::text, '') = '') then

					select	coalesce(min(a.dt_inicio_faturamento), dt_emissao_conta_w)
					into STRICT	dt_atend_conta_ini_w
					from	pls_conta		a,
						pls_tipo_atendimento	b
					where	b.nr_sequencia		= a.nr_seq_tipo_atendimento
					and	a.cd_guia_ok		= r_c01_w.cd_guia_ok
					and	a.nr_seq_segurado	= r_c01_w.nr_seq_segurado
					and	a.ie_tipo_guia		= '4'
					and	lpad(substr(cd_tiss, 1, 2), 2, '0')	= '07';			

				end if;
				
				dt_atend_conta_w	:= coalesce(dt_atend_conta_ini_w, dt_atend_conta_w);
			end if;
		end if;
	else -- OS 802541 - Manual do PTU - Regra: Para notas de internacao, adotar a data de inicio de faturamento, conforme regra do Envio de Dados da ANS
		if (r_c01_w.ie_tipo_guia = '5') then
			dt_atend_conta_w := coalesce(dt_internacao_w, dt_atend_conta_w);
		end if;
	end if;
	
	if (ie_origem_nota_principal_w = 'NC') then
		nr_nota_w	:= to_char(r_c01_w.nr_seq_conta);
		nr_principal_w	:= coalesce(r_c01_w.nr_seq_conta_princ, pls_obter_conta_principal(coalesce(r_c01_w.cd_guia_referencia, nr_guia_tiss_operadora_w), r_c01_w.nr_seq_analise, nr_seq_segurado_w, r_c01_w.nr_seq_prestador));
		
		if (nr_principal_w IS NOT NULL AND nr_principal_w::text <> '') then
			select	count(1)
			into STRICT	qt_registro_w
			from	pls_conta	c
			where	c.nr_sequencia	= nr_principal_w
			and	c.ie_status	= 'F'
			and exists (	SELECT	1
					from	pls_conta_pos_estabelecido	p
					where	p.nr_seq_conta			= c.nr_sequencia
					and	p.nr_seq_lote_fat		= nr_seq_lote_fat_w
					
union all

					SELECT	1
					from	pls_conta_pos_proc		p
					where	p.nr_seq_conta			= c.nr_sequencia
					and	p.nr_seq_lote_fat		= nr_seq_lote_fat_w
					
union all

					select	1
					from	pls_conta_pos_mat		p
					where	p.nr_seq_conta			= c.nr_sequencia
					and	p.nr_seq_lote_fat		= nr_seq_lote_fat_w);
					
			-- Se a conta principal nao for fatura, a conta atual se torna a principal
			if (qt_registro_w = 0) then
				nr_principal_w := nr_nota_w;
			end if;
		end if;
		
		if (somente_numero(nr_nota_w) = somente_numero(nr_principal_w)) then
			nr_guia_principal_w := null;
		else
			nr_guia_principal_w := nr_principal_w;
		end if;
	end if;

	-- valor zero devera ser um indicativo para manter o comportamento padrao
	qt_conta_princ_ptu_w := 0;

	if (ie_origem_nota_principal_w = 'GP') then

		-- so pode fazer a pesquisa se for uma guia parcial de resumo, caso contrario vai manter o padrao ficando com o qt_conta_princ_ptu_w zerado
		if (r_c01_w.ie_tipo_guia = '5') and (r_c01_w.ie_tipo_faturamento in ('P','F','C')) then

				-- pego da pls_obter_conta_principal, vai procurar se tem alguma guia principal MARCADA como principal em algum arquivo a500, 

				-- pesquisando pelo atendimento inteiro ao inves do escopo da analise.
				select	count(1)
				into STRICT	qt_conta_princ_ptu_w
				from	pls_conta 		a,
					pls_conta_pos_estabelecido b
				where	b.nr_seq_conta 		= a.nr_sequencia
				and	((b.ie_situacao		= 'A') or (coalesce(b.ie_situacao::text, '') = ''))
				and	a.ie_tipo_guia		= '5'
				and	a.cd_guia_ok		= r_c01_w.cd_guia_ok
				and	a.nr_seq_segurado	= r_c01_w.nr_seq_segurado
				and	exists (SELECT 1
						from 	ptu_nota_cobranca c
						where 	c.nr_seq_conta		= a.nr_sequencia
						and	c.id_nota_principal	= 'S');

		end if;

	end if;
	

	nr_nota_w			:= ptu_somente_caracter_permitido(nr_nota_w, 'ANS');
	nr_guia_principal_w		:= ptu_somente_caracter_permitido(nr_guia_principal_w, 'ANS');
	nm_prest_req_w			:= ptu_somente_caracter_permitido(nm_prest_req_w, 'ANS');
	nr_guia_tiss_prestador_w	:= ptu_somente_caracter_permitido(nr_guia_tiss_prestador_w, 'ANS');
	nr_guia_tiss_principal_w 	:= ptu_somente_caracter_permitido(nr_guia_tiss_principal_w, 'ANS');
	nr_guia_tiss_operadora_w 	:= ptu_somente_caracter_permitido(nr_guia_tiss_operadora_w, 'ANS');
	nr_cons_prof_req_w		:= ptu_somente_caracter_permitido(nr_cons_prof_req_w, 'AN');
	
	if (somente_numero(nr_guia_tiss_prestador_w) = 0) then
		nr_guia_tiss_prestador_w := null;
	end if;
	
	if (somente_numero(nr_guia_tiss_principal_w) = 0) then
		nr_guia_tiss_principal_w := null;
	end if;
	
	if (somente_numero(nr_guia_tiss_operadora_w) = 0) then
		nr_guia_tiss_operadora_w := null;
	end if;
	
	-- Internacao OS 748060
	if (r_c01_w.ie_tipo_faturamento in ('T', 'P', 'F')) and (r_c01_w.ie_tipo_guia = '5') and (coalesce(nr_guia_principal_w, '0') <> '0') and (qt_conta_princ_ptu_w = 0) then
		nr_nota_w := nr_guia_principal_w;
	end if;
	
	if (r_c01_w.ie_tipo_faturamento in ('T', 'P', 'F')) and (somente_numero(nr_guia_principal_w) > 0) then
		id_nota_principal_w := 'S';
	end if;
	
	-- Se nao tem NR_NOTA_PRINCIPAL, o ID_NOTA_PRINCIPAL = 'S'
	if (nr_nota_w = nr_guia_principal_w) then
		id_nota_principal_w := 'S';
	end if;
	
	-- Se nao tem NR_NOTA_PRINCIPAL, o ID_NOTA_PRINCIPAL = 'S' - OS 745631
	if (nr_nota_w <> nr_guia_principal_w) and (nr_guia_principal_w IS NOT NULL AND nr_guia_principal_w::text <> '') and (id_nota_principal_w = 'S') and (r_c01_w.ie_tipo_guia = '4') then -- SP/SADT
		id_nota_principal_w := 'N';
	end if;
	
	-- jtonon - 1384000 - Realizado ajuste para que em situacoes de recurso de glosa o sistema nao limpe o 'nr_guia_principal_w'
	if	(r_c01_w.ie_tipo_guia not in ('5', '6')) and -- 'Guia de Resumo de Internacao' e 'Guia de Honorario Individual'
		(id_nota_principal_w = 'S') and (cd_excecao_w <> 'E') and -- Complemento de Internacao
		(qt_rec_glosa_w = 0) then -- Nao pode ser de recurso de glosa
		nr_guia_principal_w := null;
	end if;
	
	-- Internacao
	if (r_c01_w.ie_tipo_guia = '5') and (id_nota_principal_w = 'S') and (nr_nota_w = nr_guia_principal_w) and (qt_conta_princ_ptu_w = 0) then
		nr_guia_principal_w := null;
	end if;
	
	-- Consulta sempre sera 'S'
	if (r_c01_w.ie_tipo_guia = '3') then
		id_nota_principal_w := 'S';
		nr_guia_principal_w := null; -- Para ID_NOTA_PRINCIPAL = "S", o campo deve ser preenchido com zeros
	end if;
	
	-- Honorario Individual: sempre sera 'N'
	if (r_c01_w.ie_tipo_guia = '6') then
		id_nota_principal_w := 'N';
	end if;
	
	-- SP/SADT,
	if (r_c01_w.ie_tipo_guia = '4') and (coalesce(nr_guia_principal_w::text, '') = '') and (id_nota_principal_w = 'N') then -- Para ID_NOTA_PRINCIPAL = "N", o campo deve ser preenchido com o valor da nota secundaria
		id_nota_principal_w := 'S';
	end if;
	
	-- SP/SADT e Internacao: podera ser 'S' ou 'N'
	if (id_nota_principal_w = 'S') and (r_c01_w.ie_tipo_guia in ('4', '5')) and (nr_guia_principal_w IS NOT NULL AND nr_guia_principal_w::text <> '') and (nr_nota_w <> nr_guia_principal_w) then
		id_nota_principal_w := 'N';
	end if;


	-- 0 = comportamento padrao
	if (qt_conta_princ_ptu_w > 0) then
		
		-- se encontrou algo, entao desconsidera a guia principal		
		id_nota_principal_w := 'N';
	end if;


	select	count(1)
	into STRICT	qt_registros_w
	from	pls_conv_ptu_exc_atend;
	
	if (qt_registros_w > 0) then
		cd_excecao_conversao_w := '';
		cd_excecao_conversao_w := pls_obter_excecao_atend(nr_seq_congenere_w, r_c01_w.ie_apresentacao, r_c01_w.ie_atend_env_cancelado, cd_excecao_conversao_w);
		
		if (cd_excecao_conversao_w IS NOT NULL AND cd_excecao_conversao_w::text <> '') and (cd_excecao_conversao_w <> cd_excecao_w) then
			cd_excecao_w := cd_excecao_conversao_w;
		end if;
	end if;
	
	select	max(nr_seq_conta_referencia)
	into STRICT	nr_seq_conta_ori_w
	from	pls_conta
	where	nr_sequencia = r_c01_w.nr_seq_conta;
	
	if (nr_seq_conta_ori_w IS NOT NULL AND nr_seq_conta_ori_w::text <> '') then
		nr_seq_conta_ref_w := nr_seq_conta_ori_w;
	end if;
	
	-- Contas que tiveram que ser ajustadas

	-- 1 Refaturamento de discussao, 2 Cancelar pra ajustar, 3 Voltar ajustado
	if (cd_excecao_w = 'J') then
		if (nr_seq_conta_ori_w IS NOT NULL AND nr_seq_conta_ori_w::text <> '') then
			select	coalesce(max(y.nr_fatura), nr_fatura_glosada_w),
				coalesce(max(y.nr_nota_credito_debito), nr_ndr_glosada_w),
				coalesce(max(x.nr_nota), nr_nota_glosada_w),
				coalesce(max(x.nr_lote), nr_lote_glosado_w),
				coalesce(max(x.nr_guia_glosada), nr_guia_glosada_w),
				coalesce(max(x.nr_guia_tiss_operadora), nr_guia_oper_glosada_w)
			into STRICT	nr_fatura_glosada_w,
				nr_ndr_glosada_w,
				nr_nota_glosada_w,
				nr_lote_glosado_w,
				nr_guia_glosada_w,
				nr_guia_oper_glosada_w
			from	pls_lote_faturamento 	l,
				pls_fatura 		u,
				ptu_fatura 		y,
				ptu_nota_cobranca 	x
			where	y.nr_sequencia 		= x.nr_seq_fatura
			and	u.nr_sequencia 		= y.nr_seq_pls_fatura
			and	l.nr_sequencia 		= u.nr_seq_lote
			and	coalesce(l.nr_seq_lote_disc::text, '') = ''
			and	coalesce(u.ie_cancelamento::text, '') = ''
			and	x.nr_seq_conta 		= nr_seq_conta_ori_w;
		end if;
	end if;
	
	if (nr_ndr_glosada_w IS NOT NULL AND nr_ndr_glosada_w::text <> '') or (nr_lote_glosado_w IS NOT NULL AND nr_lote_glosado_w::text <> '') or (nr_nota_glosada_w IS NOT NULL AND nr_nota_glosada_w::text <> '') or (nr_fatura_glosada_w IS NOT NULL AND nr_fatura_glosada_w::text <> '') then
		cd_excecao_w := 'J'; -- Refaturamento AJIUS
		
		-- Se a nota tem que ser o numero da conta, tem que pegar o mesmo numero da nota glosada
		if (ie_origem_nota_principal_w = 'NC') then
			nr_nota_w := nr_nota_glosada_w;
		end if;
	end if;
	
	ie_tipo_atendimento_w := (ie_tipo_atendimento_w)::numeric;
	
	-- Versao 6.1
	if (ie_versao_w >= 61) then
		-- 1 - Eletivo -- 2 - Urgencia/Emergencia
		if (ie_carater_internacao_w = 0) then
			ie_carater_internacao_w := 1;
			
		elsif (ie_carater_internacao_w = 1) then
			ie_carater_internacao_w := 2;
		end if;
		
		if (tp_nota_w = 1) then -- Consulta
			ie_carater_internacao_w := null;
			
		elsif (tp_nota_w = 2) and -- SP/SADT
			((ie_tipo_atendimento_w not in (4,22,23)) or (coalesce(ie_tipo_atendimento_w::text, '') = '')) then
			ie_tipo_consulta_w := null;
			
		elsif (tp_nota_w = 3) then -- Internacao
			ie_tipo_consulta_w := null;
			
		elsif (tp_nota_w = 4) then -- Honorario Individual
			ie_tipo_consulta_w := null;
			ie_carater_internacao_w := null;
		end if;
	end if;

	if (somente_numero(nr_ver_tiss_w) <= 20203) and (ie_tipo_consulta_w in (2,4)) then
		-- 5 Seguimento (podera ser utilizado ate versao 2.02.03 da TISS)
		ie_tipo_consulta_w := 5;
	end if;
	
	nr_nota_w := ptu_somente_caracter_permitido(nr_nota_w, 'ANSE');
	
	-- Se for versao anterior a versao 9.0
	if (ie_versao_w < 90) then
		nm_prest_req_w := substr(nm_prest_req_w, 1,40);
	end if;
	
	-- Se for maior ou igual a versao do PTU 11.0 
	if (ie_versao_w >= 110) then
		nm_prest_req_w := substr(nm_prest_req_w,1,60);
	end if;	
	
	select	max(cd_unimed_destino)
	into STRICT	cd_unimed_destino_w
	from	ptu_fatura
	where	nr_sequencia = nr_seq_ptu_fatura_p;
	
	-- Obter o cnpj ou cpf do prestador executor
	if (r_c01_w.ie_pessoa_prest_exec = 'PJ') then
		select	substr(max(pls_obter_dados_prestador(a.nr_sequencia, 'CGC')),1,14)
		into STRICT	nr_cnpj_cpf_w
		from	pls_prestador	a
		where	a.nr_sequencia	= r_c01_w.nr_seq_prestador_exec;
		
	else
		select	substr(max(pls_obter_dados_prestador(a.nr_sequencia, 'CPF')),1,11)
		into STRICT	nr_cnpj_cpf_w
		from	pls_prestador	a
		where	a.nr_sequencia	= r_c01_w.nr_seq_prestador_exec;
	end if;
	
	if (cd_unimed_destino_w IS NOT NULL AND cd_unimed_destino_w::text <> '') or (ie_gerar_fat_contab_w = 'S') and (coalesce(r_c01_w.nr_seq_ops_congenere::text, '') = '') then
	
		-- Faz uma separacao entre cobranca de producao e cobranca de reembolso
		if (r_c01_w.ie_tipo_protocolo != 'R') then
		
			-- Apaga a chave anterior da cobranca de reembolso
			nr_seq_cobranca_rrs_w := null;
		
			--aaschlote 10/03/2016 - OS 1023868 - Tratamento realizado para nao ocorrer o problema de nota+lote duplicado
			select	max(nr_sequencia)
			into STRICT	nr_seq_cobranca_w
			from	ptu_nota_cobranca
			where	coalesce(nr_guia_principal, 'X')	= coalesce(nr_guia_principal_w, 'X')
			and	cd_usuario_plano		= cd_usuario_plano_w
			and	nr_seq_conta			= r_c01_w.nr_seq_conta
			and	nr_seq_fatura			= nr_seq_ptu_fatura_p;
			
			if (coalesce(nr_seq_cobranca_w::text, '') = '') then
				if (ie_agrupar_atendimento_w <> 'A') then
					select	max(nr_sequencia)
					into STRICT	nr_seq_cobranca_w
					from	ptu_nota_cobranca
					where	cd_usuario_plano	= cd_usuario_plano_w
					and	nr_seq_fatura		= nr_seq_ptu_fatura_p
					and	nr_lote			= r_c01_w.nr_seq_protocolo
					and	nr_nota			= nr_nota_w
					and	nr_cnpj_cpf		= nr_cnpj_cpf_w;
					
				elsif (ie_agrupar_atendimento_w = 'A') then
					select	max(p.nr_sequencia)
					into STRICT	nr_seq_cobranca_w
					from	ptu_nota_cobranca p,
						pls_conta c
					where	c.nr_sequencia		= p.nr_seq_conta
					and	p.cd_usuario_plano	= cd_usuario_plano_w
					and	p.nr_seq_fatura		= nr_seq_ptu_fatura_p
					and	p.nr_lote		= r_c01_w.nr_seq_protocolo
					and	p.nr_nota		= nr_nota_w
					and	c.nr_seq_analise	= r_c01_w.nr_seq_analise;
				end if;
				
				if (coalesce(nr_seq_cobranca_w::text, '') = '') and (r_c01_w.nr_seq_conta_princ IS NOT NULL AND r_c01_w.nr_seq_conta_princ::text <> '') and (ie_agrupar_atendimento_w <> 'N') then
					
					if (ie_agrupar_atendimento_w <> 'A') then
						select	max(nr_sequencia)
						into STRICT	nr_seq_cobranca_w
						from	ptu_nota_cobranca
						where	cd_usuario_plano	= cd_usuario_plano_w
						and	nr_seq_conta		= r_c01_w.nr_seq_conta_princ
						and	nr_seq_fatura		= nr_seq_ptu_fatura_p
						and	nr_cnpj_cpf		= nr_cnpj_cpf_w;
						
					elsif (ie_agrupar_atendimento_w = 'A') then
						select	max(p.nr_sequencia)
						into STRICT	nr_seq_cobranca_w
						from	ptu_nota_cobranca p,
							pls_conta c
						where	c.nr_sequencia		= p.nr_seq_conta
						and	p.cd_usuario_plano	= cd_usuario_plano_w
						and	p.nr_seq_conta		= r_c01_w.nr_seq_conta_princ
						and	p.nr_seq_fatura		= nr_seq_ptu_fatura_p
						and	c.nr_seq_analise	= r_c01_w.nr_seq_analise;
					end if;
					
					-- se ainda nao achou, tenta procurar pelo "Atendimento" (guia_ok e segurado) um resumo de internacao ou SP/SADT para vincular
					if (coalesce(nr_seq_cobranca_w::text, '') = '') then
						if (ie_agrupar_atendimento_w <> 'A') then
							select	max(t.nr_sequencia)
							into STRICT	nr_seq_cobranca_w
							from (	SELECT	a.nr_sequencia,
									row_number() OVER () AS linha
								from	ptu_nota_cobranca	a,
									pls_conta		b
								where	b.nr_sequencia		= a.nr_seq_conta
								and	a.nr_seq_fatura		= nr_seq_ptu_fatura_p
								and	b.cd_guia_ok		= r_c01_w.cd_guia_ok
								and	b.nr_seq_segurado	= r_c01_w.nr_seq_segurado
								and	nr_cnpj_cpf		= nr_cnpj_cpf_w
								and	b.ie_tipo_guia		in ('4', '5') -- SP/SADT - Resumo internacao
								order by CASE WHEN b.ie_tipo_guia='5' THEN  1  ELSE 2 END  asc ) t
							where	t.linha = 1;
							
						elsif (ie_agrupar_atendimento_w = 'A') then
							select	max(t.nr_sequencia)
							into STRICT	nr_seq_cobranca_w
							from (	SELECT	a.nr_sequencia,
									row_number() OVER () AS linha
								from	ptu_nota_cobranca	a,
									pls_conta		b
								where	b.nr_sequencia		= a.nr_seq_conta
								and	a.nr_seq_fatura		= nr_seq_ptu_fatura_p
								and	b.cd_guia_ok		= r_c01_w.cd_guia_ok
								and	b.nr_seq_segurado	= r_c01_w.nr_seq_segurado
								and	b.ie_tipo_guia		in ('4', '5') -- SP/SADT - Resumo internacao
								and	b.nr_seq_analise	= r_c01_w.nr_seq_analise
								order by CASE WHEN b.ie_tipo_guia='5' THEN  1  ELSE 2 END  asc ) t
							where	t.linha = 1;
						end if;
					end if;
					
					if (coalesce(nr_seq_cobranca_w::text, '') = '') then
						for r_c05_w in C05( r_c01_w.nr_seq_conta_princ ) loop
							select	max(nr_sequencia)
							into STRICT	nr_seq_cobranca_w
							from	ptu_nota_cobranca
							where	cd_usuario_plano	= cd_usuario_plano_w
							and	nr_seq_conta		= r_c05_w.nr_sequencia
							and	nr_seq_fatura		= nr_seq_ptu_fatura_p;
							
							if (nr_seq_cobranca_w IS NOT NULL AND nr_seq_cobranca_w::text <> '') then
								exit;
							end if;
						end loop;
					end if;
				end if;
			end if;
		else
			
			-- Apaga a chave anterior da cobranca de producao medica
			nr_seq_cobranca_w := null;
			-- Quando for reembolso, tenta localizar com outras prioridades.
			select	max(nr_sequencia)
			into STRICT	nr_seq_cobranca_rrs_w
			from	ptu_nota_cobranca
			where	nr_seq_fatura		= nr_seq_ptu_fatura_p
			and	nr_lote			= r_c01_w.nr_seq_protocolo
			and	nr_nota			= nr_nota_w;
			
			if (coalesce(nr_seq_cobranca_rrs_w::text, '') = '') and (r_c01_w.nr_seq_conta_princ IS NOT NULL AND r_c01_w.nr_seq_conta_princ::text <> '') and (ie_agrupar_atendimento_w <> 'N') then
				
				select	max(nr_sequencia)
				into STRICT	nr_seq_cobranca_rrs_w
				from	ptu_nota_cobranca
				where	nr_seq_conta		= r_c01_w.nr_seq_conta_princ
				and	nr_seq_fatura		= nr_seq_ptu_fatura_p;
			end if;
		
		end if;
	end if;
	
	if	((coalesce(nr_seq_cobranca_w::text, '') = '') and (coalesce(nr_seq_cobranca_rrs_w::text, '') = '')) then
		
		
		nr_lote_w := r_c01_w.nr_seq_protocolo;
		
		if (tp_nota_w = '1') then
			nr_cbo_req_w	:=  000000;
			
		elsif	((nr_ver_tiss_w = '2.02.03') or (coalesce(nr_cbo_req_w::text, '') = ''))then
			nr_cbo_req_w	:= 999999;
		end if;
		
		-- OS 744647 - wcbernardino

		-- Verifiquei que a data da autorizacao (14/05/2014) da conta 6826317, e aquela mesma que foi informada no registro 502.

		-- Nesta situacao devemos verificar se a data da ultima autorizacao e maior que a data do atendimento, e se for, a data da ultima autorizacao deve ser a data do atendimento

		-- R: sim, pode ser desta maneira. Obrigado.
		if (dt_ultima_autoriz_w > dt_atend_conta_w) then
			dt_ultima_autoriz_w := dt_atend_conta_w;
		end if;
		
		if (dt_internacao_w IS NOT NULL AND dt_internacao_w::text <> '') and (r_c01_w.ie_tipo_guia in ('5', '6')) then
			dt_atend_conta_w := dt_internacao_w;
		end if;
		
		nm_segurado_w	:= ptu_somente_caracter_permitido(substr(upper(pls_obter_dados_segurado(nr_seq_segurado_w, 'N')), 1,25), 'ANS');
		dt_nascimento_w	:= to_date(pls_obter_dados_segurado(nr_seq_segurado_w, 'NAS'), 'dd/mm/rrrr');
		
		-- Regra: Obrigatorio se ID_AVISO = S
		if (id_aviso_w = 'N') then
			nr_lote_prest_w		:= null;
			dt_conhecimento_w	:= null;
		end if;

		-- Para versao 11.0a o NR_LOTE_PREST e o DT_CONHECIMENTO nao pode ser inserido nulo
		if (coalesce(nr_lote_prest_w::text, '') = '') then
			
			-- Busca o numero do lote do protocolo da conta
			select	substr(coalesce(pc.nr_protocolo_prestador, to_char(pc.nr_sequencia)),1,12)
			into STRICT	nr_lote_prest_w	
			from	pls_conta		c,
				pls_protocolo_conta	pc
			where	pc.nr_sequencia	= c.nr_seq_protocolo
			and	c.nr_sequencia	= r_c01_w.nr_seq_conta;
		end if;
		
		if (coalesce(dt_conhecimento_w::text, '') = '') then
			
			-- Busca a data do protocolo da conta
			select	coalesce(pc.dt_mes_competencia, pc.dt_recebimento)
			into STRICT	dt_conhecimento_w	
			from	pls_conta		c,
				pls_protocolo_conta	pc
			where	pc.nr_sequencia	= c.nr_seq_protocolo
			and	c.nr_sequencia	= r_c01_w.nr_seq_conta;
		end if;
		nr_seq_prestador_exec_w := r_c01_w.nr_seq_prestador_exec;
		
		-- Faz uma separacao entre cobranca de producao e cobranca de reembolso
		if (r_c01_w.ie_tipo_protocolo != 'R') then
		
			select	nextval('ptu_nota_cobranca_seq')
			into STRICT	nr_seq_cobranca_w
			;
			
			-- se tiver motivo de encerramento e estiver gerando informacoes com XML
			if (cd_motivo_encerram_w IS NOT NULL AND cd_motivo_encerram_w::text <> '') and ie_versao_xml_w > 0 then
				select	coalesce(max(cd_tiss),cd_motivo_encerram_w)
				into STRICT	cd_motivo_encerram_tiss_w
				from	pls_motivo_saida
				where	cd_ptu = cd_motivo_encerram_w
				and   	nr_sequencia = r_c01_w.nr_seq_motivo_saida_int;
			end if;
			
			ie_cobertura_especial_w		:= r_c01_w.ie_cobertura_especial;
			ie_regime_atendimento_w		:= r_c01_w.ie_regime_atendimento;
			ie_saude_ocupacional_w		:= r_c01_w.ie_saude_ocupacional;
			
			-- se for da versao TISS 3.05.00 para traz
			if (somente_numero(nr_ver_tiss_w) <= 30500) then
				ie_cobertura_especial_w		:= null;
				ie_regime_atendimento_w		:= null;
				ie_saude_ocupacional_w		:= null;
			end if;
			
			insert into ptu_nota_cobranca(	nr_sequencia, 			dt_atualizacao, 		nm_usuario,
							dt_atualizacao_nrec, 		nm_usuario_nrec, 		nr_seq_fatura,
							nr_lote, 			nr_nota, 			cd_unimed,
							cd_usuario_plano, 		nm_beneficiario, 		dt_atendimento,
							cd_excecao, 			ie_carater_atendimento, 	cd_cid,
							ie_paciente, 			ie_tipo_saida_spdat, 		ie_tipo_atendimento,
							nr_guia_principal, 		ie_pcmso, 			pr_taxa,
							ie_envia_conta, 		ie_doc_fisico_conf, 		dt_internacao,
							dt_alta, 			dt_ultima_autoriz, 		tp_nota,
							id_nota_principal, 		nr_ver_tiss, 			nr_guia_tiss_prestador,
							nr_guia_tiss_principal, 	nr_guia_tiss_operadora, 	tp_ind_acidente,
							motivo_encerram, 		nr_cnpj_cpf_req, 		nm_prest_req,
							sg_cons_prof_req, 		nr_cons_prof_req, 		sg_uf_cons_req,
							nr_cbo_req, 			nr_fatura_glosada, 		nr_ndr_glosada,
							nr_lote_glosado, 		nr_nota_glosada, 		dt_protocolo,
							id_rn, 				nr_seq_conta, 			tp_consulta,
							tp_pessoa, 			nr_cnpj_cpf, 			cd_cnes_cont_exec,
							cd_munic_cont_exec, 		id_liminar,			nm_prest_exec,
							id_aviso,			id_continuado,			nr_lote_prest,
							dt_conhecimento,		tp_prest_exec,			cd_cid_obito,
							id_rec_proprio,			nr_seq_aviso_conta,		cd_unimed_prest_req,
							cd_prestador_req,		cd_unimed_prest_exec,		cd_prestador_exec,
							nr_guia_glosada,		ie_glosa_total,			cd_cid_2,
							cd_cid_3,			cd_cid_4, 			cd_motivo_encerramento_tiss,
							nr_guia_oper_glosada,		ie_regime_atendimento,		ie_saude_ocupacional,
							ie_cobertura_especial)
						values (	nr_seq_cobranca_w, 		clock_timestamp(), 			nm_usuario_p,
							clock_timestamp(), 			nm_usuario_p, 			nr_seq_ptu_fatura_p,
							nr_lote_w, 			nr_nota_w, 			cd_unimed_origem_w,
							cd_usuario_plano_w, 		nm_segurado_w, 			dt_atend_conta_w,
							cd_excecao_w, 			ie_carater_internacao_w, 	cd_doenca_w,
							ie_paciente_w, 			ie_motivo_saida_w, 		ie_tipo_atendimento_w,
							nr_guia_principal_w, 		ie_pcmso_w, 			r_c01_w.pr_taxa_atual,
							ie_envia_w, 			'N', 				dt_internacao_w,
							dt_alta_w, 			dt_ultima_autoriz_w, 		tp_nota_w,
							id_nota_principal_w, 		nr_ver_tiss_w, 			nr_guia_tiss_prestador_w,
							nr_guia_tiss_principal_w, 	nr_guia_tiss_operadora_w, 	tp_ind_acidente_w,
							cd_motivo_encerram_w, 		nr_cnpj_cpf_req_w, 		nm_prest_req_w,
							sg_cons_prof_req_w, 		nr_cons_prof_req_w, 		sg_uf_cons_req_w,
							nr_cbo_req_w, 			nr_fatura_glosada_w, 		nr_ndr_glosada_w,
							nr_lote_glosado_w, 		nr_nota_glosada_w, 		r_c01_w.dt_protocolo,
							r_c01_w.ie_recem_nascido,	r_c01_w.nr_seq_conta, 		ie_tipo_consulta_w,
							null, 				null, 				null,
							null, 				r_c01_w.id_liminar,		nm_prest_exec_w,
							id_aviso_w,			r_c01_w.id_continuado,		nr_lote_prest_w,
							dt_conhecimento_w,		tp_prest_exec_w,		cd_cid_obito_w,
							id_rec_proprio_w,		nr_seq_aviso_conta_w,		cd_unimed_prest_req_w,
							cd_prestador_req_w,		cd_unimed_prest_exec_w,		nr_seq_prestador_exec_w,
							nr_guia_glosada_w,		'N',				cd_doenca_2_w,
							cd_doenca_3_w,			cd_doenca_4_w, 			cd_motivo_encerram_tiss_w,
							nr_guia_oper_glosada_w,		ie_regime_atendimento_w,	ie_saude_ocupacional_w,
							ie_cobertura_especial_w);
		else
			select	nextval('ptu_nota_cobranca_rrs_seq')
			into STRICT	nr_seq_cobranca_rrs_w
			;
			
			if (r_c01_w.cd_pessoa_fisica_conta IS NOT NULL AND r_c01_w.cd_pessoa_fisica_conta::text <> '') then
				nm_prestador_w	:= ptu_somente_caracter_permitido(substr(obter_nome_pf(r_c01_w.cd_pessoa_fisica_conta),1,70), 'ANS');
				-- cd_cnes_w	:= substr(obter_dados_pf(r_c01_w.cd_pessoa_fisica_conta,'CNES'),1,7); Regra: Obrigatorio se ID_REEMBOLSO_SUS = 2
			else
				nm_prestador_w	:= ptu_somente_caracter_permitido(substr(obter_razao_social(r_c01_w.cd_cgc_conta),1,70), 'ANS');
				-- cd_cnes_w	:= substr(obter_dados_pf_pj(null,r_c01_w.cd_cgc_conta,'CNES')); Regra: Obrigatorio se ID_REEMBOLSO_SUS = 2
			end if;
			
			-- Se for maior ou igual a versao do PTU 11.0 
			if (ie_versao_w >= 110) then
				nm_prestador_w := substr(nm_prestador_w,1,60);
			end if;	

			tp_sexo_w		:= upper(pls_obter_dados_segurado(nr_seq_segurado_w, 'SXS'));
			
			-- Levanta o cpf / cnpj
			nr_cnpj_cpf_rrs_w	:= coalesce(r_c01_w.cd_cgc_conta, obter_dados_pf(r_c01_w.cd_pessoa_fisica_conta, 'CPF'));
			
			-- Levanta o tipo da pessoa
			if (r_c01_w.cd_cgc_conta IS NOT NULL AND r_c01_w.cd_cgc_conta::text <> '') then
				tp_pessoa_rrs_w		:= 'J'; -- Pessoa juridica
			else	
				tp_pessoa_rrs_w		:= 'F'; -- Pessoa fisica
			end if;
			
			-- Verifica se pode converter para numerico
			if ((regexp_replace(nr_nota_w, '[0-9]', null) IS NOT NULL AND (regexp_replace(nr_nota_w, '[0-9]', null))::text <> '')) then
				nr_nota_numerico_w := somente_numero(nr_nota_w);
			end if;

			-- Precisa receber esse tratamento pois a data de reembolso precisa ser a data de pagamento do titulo
			nr_titulo_pag_reemb_w	:= null;
			dt_reemb_tit_baixa_w	:= null;

			select		max(nr_titulo),
								max(dt_liquidacao)
			into STRICT			nr_titulo_pag_reemb_w,
								dt_reemb_tit_baixa_w
			from			titulo_pagar
			where			nr_seq_reembolso = r_c01_w.nr_seq_protocolo;

			if (nr_titulo_pag_reemb_w IS NOT NULL AND nr_titulo_pag_reemb_w::text <> '') then
					dt_atend_conta_w := dt_reemb_tit_baixa_w;
			end if;
			
			insert into ptu_nota_cobranca_rrs(	nr_sequencia,			dt_atualizacao,		nm_usuario,
								dt_atualizacao_nrec,		nm_usuario_nrec,	dt_nasc,
								dt_reembolso,			id_benef,		id_reembolso_sus,
								id_rn,				nm_beneficiario,	nm_prestador,
								nr_cnpj_cpf,			nr_lote,		nr_nota,
								nr_nota_numerico,		nr_seq_conta,		nr_seq_fatura,
								tp_carater_atend,		tp_pessoa,		tp_sexo,
								id_reem_par_int,		cd_unimed,		cd_cnes)
			values (				nr_seq_cobranca_rrs_w,		clock_timestamp(),		nm_usuario_p,
								clock_timestamp(),			nm_usuario_p,		dt_nascimento_w,
								dt_atend_conta_w,		cd_usuario_plano_w,	'1',
								r_c01_w.ie_recem_nascido,	nm_segurado_w,		nm_prestador_w,
								nr_cnpj_cpf_rrs_w,		nr_lote_w,		nr_nota_w,
								nr_nota_numerico_w,		r_c01_w.nr_seq_conta,	nr_seq_ptu_fatura_p,
								ie_carater_internacao_w,	tp_pessoa_rrs_w,	tp_sexo_w,
								id_reem_par_int_w,		cd_unimed_origem_w,	cd_cnes_w);
		end if;
						
		if (ie_prest_a400_w = 'N') then
			insert into ptu_fatura_conta_exc(	nr_sequencia,				nr_seq_fatura,				nr_seq_conta,
								ie_motivo,				ds_motivo,				dt_atualizacao,
								nm_usuario,				dt_atualizacao_nrec,			nm_usuario_nrec)
						values (	nextval('ptu_fatura_conta_exc_seq'),	nr_seq_ptu_fatura_p,			r_c01_w.nr_seq_conta,
								1,					'Prestador nao enviado no A400',	clock_timestamp(),
								nm_usuario_p,				clock_timestamp(),				nm_usuario_p);
		elsif (r_c01_w.ie_fora_prazo = 'N') then
			insert into ptu_fatura_conta_exc(	nr_sequencia,				nr_seq_fatura,				nr_seq_conta,
								ie_motivo,				ds_motivo,				dt_atualizacao,
								nm_usuario,				dt_atualizacao_nrec,			nm_usuario_nrec)
						values (	nextval('ptu_fatura_conta_exc_seq'),	nr_seq_ptu_fatura_p,			r_c01_w.nr_seq_conta,
								2,					'Conta fora do prazo limite',		clock_timestamp(),
								nm_usuario_p,				clock_timestamp(),				nm_usuario_p);
		end if;
	-- OS 2100429 - 04/06/2020

	-- Quando definido no campo 'Agrupar atendimento na geracao do arquivo PTU' em 'OPS - Gestao de Operadoras / Parametros da OPS / Faturamento', um valor diferente de 'Nao se aplica', 

	-- o que gerariam varias notas cobrancas, sao agrupadas em uma so, assim, pode ocorrer de algumas contas serem encerradas como 'Encerramento Administrativo (55)' e mais acima na rotina 

	-- a nota cobranca foi inserida como 'Encerramento Administrativo (55)', porem, se uma outra conta deste mesmo agrupamento vier com outro tipo de encerramento, o mesmo sera substituido.
	elsif (ie_agrupar_atendimento_w <> 'N') and (nr_seq_cobranca_w IS NOT NULL AND nr_seq_cobranca_w::text <> '') and (r_c01_w.ie_tipo_protocolo != 'R') and (cd_motivo_encerram_w <> '55') then
		update	ptu_nota_cobranca
		set	motivo_encerram	= cd_motivo_encerram_w
		where	nr_sequencia	= nr_seq_cobranca_w;
	end if;
	
	-- Gerar registro 503 (exceto para reembolso
	if (r_c01_w.ie_tipo_protocolo != 'R') and
		((r_c01_w.ie_tipo_guia in ('5', '6')) or
		((ie_tipo_atendimento_w = '7' or coalesce(ie_regime_atendimento_w,9) = 3) and (r_c01_w.ie_tipo_guia not in ('4')))) then -- Adicionado para UM
		CALL ptu_gerar_nota_hospitalar(nr_seq_cobranca_w, nm_usuario_p, cd_interface_p);
		
		-- Obter dados da internacao
		select	max(cd_cid_obito)
		into STRICT	cd_cid_obito_w
		from	ptu_nota_hospitalar
		where	nr_sequencia	= (	SELECT	max(nr_sequencia)
						from	ptu_nota_hospitalar
						where	nr_seq_nota_cobr	= nr_seq_cobranca_w);
	end if;
	
	-- Gerar registro 504
	CALL pls_gerar_ptu_nota_servico(nr_seq_pls_fatura_p, r_c01_w.nr_seq_fatura_conta, nr_seq_cobranca_w, nm_usuario_p, cd_interface_p, nr_seq_cobranca_rrs_w, r_c01_w.nr_seq_conta);
	
	
	-- Gerar registro 505
	CALL ptu_gerar_nota_complemento(nr_seq_cobranca_w, nm_usuario_p);
	
	-- Gerar registro 506 - Nao gerar mais de um registro 506
	if (ie_registro_506_w = 'S') then

		-- nao gera para aviso
		if (ie_tipo_cobranca_fatura_w != 'A') then
		
			CALL pls_gerar_ptu_nota_fiscal(nr_seq_cobranca_w, nr_seq_ptu_fatura_p, nm_usuario_p);
		end if;
		ie_registro_506_w := 'N';
	end if;
	
	
	-- O Bloco abaixo nao e processado para reembolso atualmente.

	--if	(r_c01_w.ie_tipo_protocolo != 'R') then

	
		-- verifica primeiro se o prestador executor da conta e PJ, se for, sera priorizado este, senao sera utilizado do 504

		-- limpa as variaveis
		tp_pessoa_w		:= null;
		nr_cnpj_cpf_w		:= null;
		cd_cnes_cont_exec_w	:= null;
		cd_munic_cont_exec_w	:= null;
		tipo_rede_min_w		:= null;
		nm_prest_exec_w		:= null;
		tp_prest_exec_w		:= null;
		id_rec_proprio_w	:= null;

		if (r_c01_w.ie_pessoa_prest_exec = 'PJ') then
			nr_seq_prestador_exec_w := r_c01_w.nr_seq_prestador_exec;
			
			-- jcsonaglio OS 1845355 ajustado para informar o campo 'CNPJ/CPF - Prest exec' quando o 'Tipo de nota' for 'Internacao' 
			if (ie_tipo_guia_princ_w = '5') and -- Internacao
				(ie_agrupar_atendimento_w <> 'N') then -- Agrupar contas na cobranca
				nr_seq_prestador_exec_w := coalesce(r_c01_w.nr_seq_prestador_exec_princ,r_c01_w.nr_seq_prestador_exec);
			end if;

			select	'J', -- assume fixo que e PJ, conforme IF acima
				max(pls_obter_dados_prestador(a.nr_sequencia, 'CGC')),
				substr(coalesce(max(pls_obter_dados_prestador(a.nr_sequencia, 'CNES')),'9999999'),1,7),
				max(pls_obter_dados_prestador(a.nr_sequencia, 'IBGE')),
				coalesce(max(a.ie_tipo_rede_min_ptu),1),
				max(trim(both substr(upper(elimina_acentos(obter_nome_pf_pj(null, a.cd_cgc), 'S')), 1, 70))),
				max((	select	max(x.ie_tipo_prestador) ie_tipo_prestador
					from	ptu_nota_servico	x
					where	x.nr_seq_nota_cobr	= nr_seq_cobranca_w)), -- neste caso, pode pegar o item, que e sobre o exec da conta
				max(CASE WHEN a.ie_tipo_relacao='C' THEN 'S' WHEN a.ie_tipo_relacao='D' THEN 'S' WHEN a.ie_tipo_relacao='P' THEN 'S'  ELSE 'N' END  )
			into STRICT	tp_pessoa_w,
				nr_cnpj_cpf_w,
				cd_cnes_cont_exec_w,
				cd_munic_cont_exec_w,
				tipo_rede_min_w,
				nm_prest_exec_w,
				tp_prest_exec_w,
				id_rec_proprio_w
			from	pls_prestador	a
			where	a.nr_sequencia	= nr_seq_prestador_exec_w;	
		end if;
		
		-- Se for PF pegar o CPF do prestador executor
		if (coalesce(nr_cnpj_cpf_w::text, '') = '') then
			select	substr(max(pls_obter_dados_prestador(a.nr_sequencia, 'CPF')),1,11)
			into STRICT	nr_cnpj_cpf_w
			from	pls_prestador	a
			where	a.nr_sequencia	= r_c01_w.nr_seq_prestador_exec;
			
			if (nr_cnpj_cpf_w IS NOT NULL AND nr_cnpj_cpf_w::text <> '') then
				select	max(a.ie_tipo_pessoa_prestador),
					max(a.cd_cnes_prest),
					max(a.cd_munic),
					max(a.tipo_rede_min),
					max(a.nm_prestador),
					max(a.ie_tipo_prestador),
					max(a.ie_rede_propria)
				into STRICT	tp_pessoa_w,
					cd_cnes_cont_exec_w,
					cd_munic_cont_exec_w,
					tipo_rede_min_w,
					nm_prest_exec_w,
					tp_prest_exec_w,
					id_rec_proprio_w
				from	ptu_nota_servico	a
				where	a.nr_sequencia = (	SELECT	max(b.nr_sequencia)
								from	ptu_nota_servico	b
								where	b.nr_seq_nota_cobr		= nr_seq_cobranca_w
								and	b.nr_cgc_cpf			= nr_cnpj_cpf_w);
			end if;
		end if;
		
		if (coalesce(nr_cnpj_cpf_w::text, '') = '') then
			-- Obter dados do executor dos itens

			-- tenta primeiro para Pessoa Juridica, se nao encontrar, entao tenta a Pessoa Fisica
			select	max(a.ie_tipo_pessoa_prestador),
				max(a.nr_cgc_cpf),
				max(a.cd_cnes_prest),
				max(a.cd_munic),
				max(a.tipo_rede_min),
				max(a.nm_prestador),
				max(a.ie_tipo_prestador),
				max(a.ie_rede_propria)
			into STRICT	tp_pessoa_w,
				nr_cnpj_cpf_w,
				cd_cnes_cont_exec_w,
				cd_munic_cont_exec_w,
				tipo_rede_min_w,
				nm_prest_exec_w,
				tp_prest_exec_w,
				id_rec_proprio_w
			from	ptu_nota_servico	a
			where	a.nr_sequencia = (	SELECT	max(b.nr_sequencia)
							from	ptu_nota_servico	b
							where	b.nr_seq_nota_cobr		= nr_seq_cobranca_w
							and	b.ie_tipo_pessoa_prestador	= 'J');
		end if;
		
		-- Se nao encontrou uma Pessoa Juridica, entao tenta a Pessoa fisica
		if (coalesce(nr_cnpj_cpf_w::text, '') = '') then
		
			select	max(a.ie_tipo_pessoa_prestador),
				max(a.nr_cgc_cpf),
				max(a.cd_cnes_prest),
				max(a.cd_munic),
				max(a.tipo_rede_min),
				max(a.nm_prestador),
				max(a.ie_tipo_prestador),
				max(a.ie_rede_propria)
			into STRICT	tp_pessoa_w,
				nr_cnpj_cpf_w,
				cd_cnes_cont_exec_w,
				cd_munic_cont_exec_w,
				tipo_rede_min_w,
				nm_prest_exec_w,
				tp_prest_exec_w,
				id_rec_proprio_w
			from	ptu_nota_servico	a
			where	a.nr_sequencia = (	SELECT	max(b.nr_sequencia)
							from	ptu_nota_servico	b
							where	b.nr_seq_nota_cobr		= nr_seq_cobranca_w);
		end if;
		
		if (r_c01_w.nr_seq_prest_inter IS NOT NULL AND r_c01_w.nr_seq_prest_inter::text <> '') then
			
			--Caso nao obteve CNES nas notas de servico(Quando retornar 9999999 ou nulo), entao verifica se existe

			--a informacao do prestador intercambio e entao busca dele
			if (coalesce(cd_cnes_cont_exec_w::text, '') = '' or cd_cnes_cont_exec_w = '9999999') then
				select	coalesce(max(a.cd_cnes), '9999999')
				into STRICT	cd_cnes_cont_exec_w
				from	pls_prestador_intercambio	a
				where 	a.nr_sequencia = r_c01_w.nr_seq_prest_inter;
			end if;
			
			--Quando for prestador de intercambio, consulta o nome do prestador executante
			if coalesce(trim(both nm_prest_exec_w)::text, '') = '' then
				select	max(rpad(coalesce(elimina_caractere_especial(pls_obter_dados_prest_inter(a.nr_sequencia,'N')),' '),70,' '))
					,'N'
				into STRICT	nm_prest_exec_w
					,id_rec_proprio_w
				from	pls_prestador_intercambio	a
				where 	nr_sequencia = r_c01_w.nr_seq_prest_inter;
			end if;

		end if;
		
		-- jtonon - OS 1805786 - Verifica se a data do item que esta vindo no loop e maior que a data de alta gravada na ptu_nota_cobranca e atualiza para a mesma
		if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then
			select	max(a.dt_alta)
			into STRICT	dt_alta_ww
			from	ptu_nota_cobranca	a
			where	a.nr_sequencia = nr_seq_cobranca_w;
			
			if (coalesce(dt_alta_ww::text, '') = '') or (dt_alta_w > dt_alta_ww) then
				update	ptu_nota_cobranca
				set	dt_alta		= dt_alta_w
				where	nr_sequencia 	= nr_seq_cobranca_w;
			end if;
		end if;
		
		-- Se for maior ou igual a versao do PTU 11.0 
		if (ie_versao_w >= 110) then
			nm_prest_exec_w := substr(nm_prest_exec_w,1,60);
		end if;	

		-- gfurlan - OS 1875377 - Define data do protocolo para a ultima data de protocolo vinculada ao segurado
		if (ie_agrupar_atendimento_w <> 'N') then
			select  max(CASE WHEN ie_param_30_w='S' THEN  b.dt_recebimento  ELSE coalesce(b.dt_protocolo, b.dt_recebimento) END )
			into STRICT    dt_protocolo_w
			from    pls_protocolo_conta b,
				pls_conta c
			where   b.nr_sequencia          = c.nr_seq_protocolo
			and     c.cd_guia_ok            = r_c01_w.cd_guia_ok
			and     c.nr_seq_segurado       = r_c01_w.nr_seq_segurado;
		end if;
		
		nr_cnpj_cpf_w := pls_obter_convervao_ptu_a500('NR_CNPJ_CPF', nr_cnpj_cpf_w, nr_cnpj_cpf_w, cd_estabelecimento_w);
		nm_prest_exec_w := pls_obter_convervao_ptu_a500('NM_PREST_EXEC', nm_prest_exec_w, nm_prest_exec_w, cd_estabelecimento_w);
		
		-- Atualizar os dados de executante
		update	ptu_nota_cobranca
		set	tp_pessoa		= tp_pessoa_w,
			nr_cnpj_cpf		= nr_cnpj_cpf_w,
			cd_cnes_cont_exec	= cd_cnes_cont_exec_w,
			cd_munic_cont_exec	= cd_munic_cont_exec_w,
			tipo_rede_min		= tipo_rede_min_w,
			nm_prest_exec		= nm_prest_exec_w,
			tp_prest_exec		= tp_prest_exec_w,
			id_rec_proprio		= id_rec_proprio_w,
			cd_cid_obito		= cd_cid_obito_w,
			dt_protocolo            = coalesce(dt_protocolo_w,dt_protocolo)
		where	nr_sequencia		= nr_seq_cobranca_w
		and	nr_seq_conta		= r_c01_w.nr_seq_conta;
		
		-- Caso dados do solicitante estiverem nulos , atualiza com dados do executor
		if (coalesce(cd_medico_solic_w::text, '') = '') and (coalesce(cd_medico_solicitante_w::text, '') = '') and (ie_benef_remido_w = 'N') then
			select	max(nm_profissional_prestador),
				max(nr_cons_prof_prest),
				max(sg_cons_prof_prest),
				max(sg_uf_cons_prest)
			into STRICT	nm_prest_req_w,
				nr_cons_prof_req_w,
				sg_cons_prof_req_w,
				sg_uf_cons_req_w
			from	ptu_nota_servico
			where	nr_sequencia = (SELECT	max(nr_sequencia) -- Estas informacoes nao sao obrigatorias no PTU a nivel de servico,  portanto tem que trazer o servico mais recente que possuir as informacoes completas.
						from	ptu_nota_servico
						where	nr_seq_nota_cobr = nr_seq_cobranca_w
						and  	(nm_profissional_prestador IS NOT NULL AND nm_profissional_prestador::text <> '')
						and	(nr_cons_prof_prest IS NOT NULL AND nr_cons_prof_prest::text <> '')
						and	(sg_cons_prof_prest IS NOT NULL AND sg_cons_prof_prest::text <> '')
						and	(sg_uf_cons_prest IS NOT NULL AND sg_uf_cons_prest::text <> ''));
						
			nm_prest_req_w			:= ptu_somente_caracter_permitido(nm_prest_req_w, 'ANS');
			nr_cons_prof_req_w		:= ptu_somente_caracter_permitido(nr_cons_prof_req_w, 'AN');	

			if (sg_cons_prof_req_w IS NOT NULL AND sg_cons_prof_req_w::text <> '') then
				select coalesce(max(a.cd_ptu),sg_cons_prof_req_w)
				into STRICT sg_cons_prof_req_w
				from conselho_profissional 	a
				where a.sg_conselho = sg_cons_prof_req_w;
			end if;
			
			-- Se for maior ou igual a versao do PTU 11.0 
			if (ie_versao_w >= 110) then
				nm_prest_req_w := substr(nm_prest_req_w,1,60);
			end if;	
			
			update	ptu_nota_cobranca
			set	nm_prest_req		= nm_prest_req_w,
				nr_cons_prof_req	= nr_cons_prof_req_w,
				sg_cons_prof_req	= sg_cons_prof_req_w,
				sg_uf_cons_req		= sg_uf_cons_req_w
			where	nr_sequencia		= nr_seq_cobranca_w;
		end if;
		
		-- OS 814544 - SJRP - Caso o problema seja horario da data de atendimento, utiliza a data da internacao (o dia/mes/ano tem que estarem iguais)
		if (dt_internacao_w IS NOT NULL AND dt_internacao_w::text <> '') then
			if (trunc(dt_atend_conta_w) = trunc(dt_internacao_w)) and (dt_atend_conta_w < dt_internacao_w) then
				
				dt_atend_conta_w := dt_internacao_w;
				
				update	ptu_nota_cobranca
				set	dt_atendimento	= dt_internacao_w
				where	nr_sequencia	= nr_seq_cobranca_w;
			end if;
		end if;
		
		if (dt_alta_w IS NOT NULL AND dt_alta_w::text <> '') then
			if (trunc(dt_atend_conta_w) = trunc(dt_alta_w)) and (dt_atend_conta_w > dt_alta_w) then
				
				dt_atend_conta_w := dt_alta_w;
				
				update	ptu_nota_cobranca
				set	dt_atendimento	= dt_alta_w
				where	nr_sequencia	= nr_seq_cobranca_w;
			end if;
		end if;
		
		if (ie_versao_w >= 63) and (ie_tipo_atendimento_w not in ('7') and coalesce(ie_regime_atendimento_w,9) <> 3) then
			select	max(dt_atendimento)
			into STRICT	dt_atend_conta_w
			from	ptu_nota_cobranca
			where	nr_sequencia = nr_seq_cobranca_w;
			
			select	min(dt_procedimento)
			into STRICT	dt_procedimento_w
			from	ptu_nota_servico
			where	nr_seq_nota_cobr = nr_seq_cobranca_w;
			
			if (trunc(dt_procedimento_w, 'dd') < trunc(dt_atend_conta_w, 'dd')) then
				dt_atend_conta_w := dt_procedimento_w;
				
				update	ptu_nota_cobranca
				set	dt_atendimento	= dt_procedimento_w
				where	nr_sequencia	= nr_seq_cobranca_w;
			end if;
		end if;
		
		-- OS 827326 - Caso tenha senha informada, e nao tenha dt_autoriz ou dt_solicitacao, pode ser utilizada a data do atendimento
		update	ptu_nota_servico
		set	dt_autoriz		= coalesce(dt_autoriz, dt_atend_conta_w),
			dt_solicitacao		= coalesce(dt_solicitacao, dt_atend_conta_w)
		where	nr_seq_nota_cobr	= nr_seq_cobranca_w
		and	coalesce(nr_autorizacao, 0) <> 0;
	--end if; -- fim se nao for reembolso
end loop;

-- Ressarcimento ao SUS
for r_c00_w in c00( nr_seq_pls_fatura_p ) loop

	nr_seq_segurado_w	:= r_c00_w.nr_seq_segurado;
	nr_seq_prestador_w	:= r_c00_w.nr_seq_prestador;
	cd_usuario_plano_w	:= r_c00_w.cd_usuario_plano;
	nr_lote_w		:= r_c00_w.nr_seq_processo;
	nr_nota_w		:= r_c00_w.nr_aih;
	cd_carteirinha_w	:= r_c00_w.cd_carteirinha;

	
	nm_segurado_w		:= ptu_somente_caracter_permitido(substr(upper(pls_obter_dados_segurado(nr_seq_segurado_w, 'N')), 1,25), 'ANS');
	dt_nascimento_w		:= to_date(pls_obter_dados_segurado(nr_seq_segurado_w, 'NAS'));
	nm_prestador_w		:= substr(pls_obter_desc_prest_processo(nr_seq_prestador_w),1,80);
	
	-- Se nao localizar o cd usuario plano na conta, ele tenta localizar na pls_segurado_carteira
	if (coalesce(cd_usuario_plano_w::text, '') = '') then
		cd_usuario_plano_w	:= substr(pls_obter_dados_segurado(nr_seq_segurado_w, 'C'), 5, 13);
	end if;
	
	cd_pessoa_fisica_w	:= substr(pls_obter_dados_carteira(null, cd_carteirinha_w, 'PF'),1,15);
	
	-- Verifica se pode converter para numerico
	if ((regexp_replace(nr_nota_w, '[0-9]', null) IS NOT NULL AND (regexp_replace(nr_nota_w, '[0-9]', null))::text <> '')) then
		nr_nota_numerico_w := somente_numero(nr_nota_w);
	end if;

	Select	max(cd_cgc)
	into STRICT	nr_cnpj_cpf_rrs_w
	from	pls_processo_prestador
	where	nr_sequencia	= nr_seq_prestador_w;
	
	if (nr_cnpj_cpf_rrs_w IS NOT NULL AND nr_cnpj_cpf_rrs_w::text <> '') then
		tp_pessoa_rrs_w	:= 'J';
		cd_cnes_w	:= substr(obter_dados_pf_pj(null,nr_cnpj_cpf_rrs_w,'CNES'),1,7); -- Regra: Obrigatorio se ID_REEMBOLSO_SUS = 2
	end if;
	
	select	max(ie_sexo)
	into STRICT	tp_sexo_w
	from	pessoa_fisica
	where	cd_pessoa_fisica = cd_pessoa_fisica_w;

	insert into ptu_nota_cobranca_rrs(	nr_sequencia,				dt_atualizacao,			nm_usuario,
						dt_atualizacao_nrec,			nm_usuario_nrec,		dt_nasc,
						dt_reembolso,				id_benef,			id_reembolso_sus,
						id_rn,					nm_beneficiario,		nm_prestador,
						nr_cnpj_cpf,				nr_lote,			nr_nota,
						nr_nota_numerico,			nr_seq_conta,			nr_seq_fatura,
						tp_carater_atend,			tp_pessoa,			tp_sexo,
						id_reem_par_int,			cd_unimed,			cd_cnes,
						nr_seq_conta_sus)
	values (					nextval('ptu_nota_cobranca_rrs_seq'),	clock_timestamp(),			nm_usuario_p,
						clock_timestamp(),				nm_usuario_p,			dt_nascimento_w,
						null,					cd_usuario_plano_w,		'2',
						null,					nm_segurado_w,			nm_prestador_w,
						nr_cnpj_cpf_rrs_w,			nr_lote_w,			nr_nota_w,
						nr_nota_numerico_w,			null,				nr_seq_ptu_fatura_p,
						'2',					coalesce(tp_pessoa_rrs_w,'J'),	tp_sexo_w,
						0,					cd_unimed_origem_w,		cd_cnes_w,
						r_c00_w.nr_seq_conta_sus) returning nr_sequencia into nr_seq_cobranca_rrs_w;

	-- Gerar registro 504
	CALL pls_gerar_ptu_nota_servico(nr_seq_pls_fatura_p, r_c00_w.nr_seq_fatura_conta, null, nm_usuario_p, cd_interface_p, nr_seq_cobranca_rrs_w, null, r_c00_w.nr_seq_conta_sus);
	
end loop;

for r_c02_w in c02 loop
	update	ptu_nota_cobranca
	set	dt_ultima_autoriz	= r_c02_w.dt_atendimento
	where	nr_sequencia		= r_c02_w.nr_sequencia;
end loop;

for r_c03_w in C03 loop
	--OS 940335 - Tratamento para regra data cobrnaca tratamento para intercambio
	ie_tipo_intercambio_w := 'A';
	
	dt_atend_conta_w := r_c03_w.dt_atendimento;
	
	if (r_c03_w.nr_seq_congenere IS NOT NULL AND r_c03_w.nr_seq_congenere::text <> '') then
		-- Obter a UF da operadora  - Tasy
		select	coalesce(max(sg_estado), 'X')
		into STRICT	sg_estado_w
		from	pessoa_juridica
		where	cd_cgc = (	SELECT	max(cd_cgc_outorgante)
					from	pls_outorgante
					where	cd_estabelecimento = cd_estabelecimento_w);
					
		-- Obter a UF da operadora do beneficiario eventual ou que enviou o protocolo
		select	coalesce(max(a.sg_estado), 'X'),
			coalesce(max(b.ie_nacional), 'N')
		into STRICT	sg_estado_int_w,
			ie_nacional_w
		from	pessoa_juridica	a,
			pls_congenere	b
		where	a.cd_cgc	= b.cd_cgc
		and	b.nr_sequencia	= r_c03_w.nr_seq_congenere;
		
		if (ie_nacional_w = 'S') then
			ie_tipo_intercambio_w := 'N';
		
		elsif (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
			if (sg_estado_w = sg_estado_int_w) then
				ie_tipo_intercambio_w := 'E';
			else
				ie_tipo_intercambio_w := 'N';
			end if;
		else
			ie_tipo_intercambio_w	:= 'A';
		end if;
	end if;
	
	if (r_c03_w.nr_seq_segurado IS NOT NULL AND r_c03_w.nr_seq_segurado::text <> '') then
		select	max(a.ie_tipo_contrato)
		into STRICT	ie_tipo_contrato_w
		from	pls_intercambio 	a,
			pls_contrato_pagador 	b,
			pls_segurado 		c
		where	a.nr_sequencia		= b.nr_seq_pagador_intercambio
		and	b.nr_sequencia		= c.nr_seq_pagador
		and	c.nr_sequencia		= r_c03_w.nr_seq_segurado;
		
		-- Quando for PEA, tem que tratar como Nacional
		if (ie_tipo_contrato_w = 'S') then
			ie_tipo_intercambio_w := 'N';
		end if;
	end if;
	--fim tratamento intercambio verifica a regra
	ie_tipo_data_w	:= pls_obter_regra_data_ptu_cobr(	r_c03_w.ie_tipo_guia, 		ie_tipo_intercambio_w, 		r_c03_w.ie_carater_internacao,
								r_c03_w.ie_indicacao_acidente, 	r_c03_w.ie_tipo_consulta, 	r_c03_w.nr_seq_tipo_atendimento,
								r_c03_w.ie_regime_atendimento,	r_c03_w.ie_saude_ocupacional);
	--verifica se trouxe retorno
	if (coalesce(ie_tipo_data_w, 'DA') = 'DI' ) then
		select 	min(dt_procedimento)
		into STRICT 	dt_procedimento_w
		from 	ptu_nota_servico
		where 	nr_seq_nota_cobr = r_c03_w.nr_sequencia;
		
		-- Quando a cobranca se tratar de Internacao

		-- Verificar se a data minima dos servicos sem a hora e igual a data de inicio faturamento sem a hora

		-- Se for igual, assume a data de inicio de faturamento para que a data de atendimento receba com a mesma hora, minuto e segudo
		if (r_c03_w.tp_nota = 3) and (trunc(dt_procedimento_w) = trunc(r_c03_w.dt_inicio_faturamento)) then
			dt_procedimento_w := r_c03_w.dt_inicio_faturamento;
		end if;
		
		if (dt_procedimento_w IS NOT NULL AND dt_procedimento_w::text <> '') and (trunc(dt_procedimento_w) <> trunc(dt_atend_conta_w)) then
			update 	ptu_nota_cobranca
			set	dt_atendimento	= dt_procedimento_w
			where	nr_sequencia	= r_c03_w.nr_sequencia;
		end if;
	end if;
end loop;

-- Verifica e ajusta a hora da nota cobranca.

-- E importante que este seja o ultima rotina que manipula a data da nota, para evitar problemas no webstart
for r_c04_w in c04( nr_seq_ptu_fatura_p ) loop

	-- se existe data, e a mesma nao possui hora, pega  o menor horario informado nos procedimentos.

	-- Tem que ser o menor, pois e regra estadual, onde sera considerado o primeiro procedimento como atendimento.
	if (r_c04_w.dt_atendimento IS NOT NULL AND r_c04_w.dt_atendimento::text <> '') and (r_c04_w.dt_atendimento <> '00/00/0000') and (coalesce(r_c04_w.hr_atendimento, '00:00:00') = '00:00:00') then
		-- inicializa a variavel com o primeiro valor zerado, para ir tentando localizar uma hora nos procedimentos, conforme nivel de prioridade de escolha
		hr_atendimento_w := coalesce(r_c04_w.hr_atendimento, '00:00:00');
		
		select	min(ds_hora_procedimento)
		into STRICT	hr_atendimento_w
		from	ptu_nota_servico
		where	nr_seq_nota_cobr = r_c04_w.nr_sequencia
		and	trim(both ds_hora_procedimento) <> '00:00:00'
		and	(trim(both ds_hora_procedimento) IS NOT NULL AND (trim(both ds_hora_procedimento))::text <> '');
		
		if (coalesce(hr_atendimento_w, '00:00:00') = '00:00:00') then
			select	min(hr_final)
			into STRICT	hr_atendimento_w
			from	ptu_nota_servico
			where	nr_seq_nota_cobr = r_c04_w.nr_sequencia
			and	trim(both hr_final) <> '00:00:00'
			and	(trim(both hr_final) IS NOT NULL AND (trim(both hr_final))::text <> '');
		end if;
		
		if (coalesce(hr_atendimento_w::text, '') = '') then
			hr_atendimento_w := '00:00:00';
		end if;
		
		if (hr_atendimento_w IS NOT NULL AND hr_atendimento_w::text <> '') then
			update	ptu_nota_cobranca
			set	dt_atendimento = to_date(to_char(r_c04_w.dt_atendimento || hr_atendimento_w), 'dd/mm/yyyyhh24:mi:ss')
			where	nr_sequencia = r_c04_w.nr_sequencia;
		end if;
	end if;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_ptu_nota_cobranca ( nr_seq_pls_fatura_p pls_fatura.nr_sequencia%type, nr_seq_ptu_fatura_p ptu_fatura.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_interface_p interface.cd_interface%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

