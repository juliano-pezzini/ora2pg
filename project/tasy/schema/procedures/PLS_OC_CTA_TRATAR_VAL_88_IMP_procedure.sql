-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_88_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Validar os procedimento da conta com a regra de referência dos itens.

-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_proc_w		varchar(500);
ds_mat_w		varchar(500);
ds_ultimo_proc_w	varchar(500);
ds_ultimo_mat_w		varchar(550);
qt_proc_item_w 		bigint;
qt_mat_item_w		bigint;
ie_ult_origem_proced_w	pls_conta_proc.ie_origem_proced%type;
cd_ult_procedimento_w	pls_conta_proc.cd_procedimento%type;
ie_situacao_gerar_proc	pls_oc_item_dep.ie_situacao_gerar%type;
ie_situacao_gerar_mat	pls_oc_item_dep.ie_situacao_gerar%type;
cd_ult_material_w	pls_conta_mat.nr_seq_material%type;
tb_seq_selecao_w	pls_util_cta_pck.t_number_table;
tb_valido_w		pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w		pls_util_cta_pck.t_varchar2_table_4000;
nr_indice_w		integer;

C01 CURSOR(	nr_seq_oc_cta_comb_p	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	nr_seq_item_ref
	from	pls_oc_val_itens
	where	nr_seq_oc_cta_comb = nr_seq_oc_cta_comb_p;

-- Busca todos os procedimento que existe na tabela de seleção que coincidem com o Material\Procedimento da tabela de referencia dos itens
c_conta_verificar CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type,
				nr_seq_item_ref_pc	pls_oc_val_itens.nr_seq_item_ref%type) FOR
	SELECT	x.nr_seq_conta,
		b.ie_origem_proced_conv ie_origem_proced,
		b.cd_procedimento_conv cd_procedimento,
		sum(b.qt_executado) qt_item
	from	pls_oc_cta_selecao_imp	x,
		pls_conta_proc_imp b
	where	x.nr_id_transacao	= nr_id_transacao_pc
	and	x.ie_valido		= 'S'
	and	b.nr_sequencia		= x.nr_seq_conta_proc
	and 	exists (SELECT 	1
			from	pls_oc_item_ref a
			where	a.nr_sequencia		= nr_seq_item_ref_pc
			and	a.ie_origem_proced	= b.ie_origem_proced_conv
			and	a.cd_procedimento	= b.cd_procedimento_conv)
	group by x.nr_seq_conta,
		b.ie_origem_proced_conv,
		b.cd_procedimento_conv
	
union all

	select	x.nr_seq_conta,
		null ie_origem_proced,
		b.nr_seq_material_conv nr_seq_material,
		sum(b.qt_executado) qt_item
	from	pls_oc_cta_selecao_imp	x,
		pls_conta_mat_imp b
	where	x.nr_id_transacao	= nr_id_transacao_pc
	and	x.ie_valido		= 'S'
	and	b.nr_sequencia		= x.nr_seq_conta_mat
	and	exists (select 	1
			from	pls_oc_item_ref a
			where	a.nr_sequencia		= nr_seq_item_ref_pc
			and	a.nr_seq_material 	= b.nr_seq_material_conv)
	group by x.nr_seq_conta,
		null,
		b.nr_seq_material_conv;

c_proc_conta CURSOR(	nr_seq_conta_pc		pls_conta_imp.nr_sequencia%type,
			nr_seq_item_ref_pc	pls_oc_val_itens.nr_seq_item_ref%type) FOR
	SELECT	b.nr_seq_conta,
		b.ie_origem_proced_conv ie_origem_proced,
		b.cd_procedimento_conv  cd_procedimento,
		a.ie_situacao_gerar,
		sum(b.qt_executado) qt_item
	from	pls_conta_proc_imp b,
		pls_oc_item_dep a
	where	b.nr_seq_conta		= nr_seq_conta_pc
	and 	a.nr_seq_item_ref	= nr_seq_item_ref_pc
	and	a.ie_origem_proced	= b.ie_origem_proced_conv
	and	a.cd_procedimento	= b.cd_procedimento_conv
	group by b.nr_seq_conta,
		b.ie_origem_proced_conv,
		b.cd_procedimento_conv,
		a.ie_situacao_gerar
	order by b.ie_origem_proced_conv,
		b.cd_procedimento_conv;


c_mat_conta CURSOR(	nr_seq_conta_pc		pls_conta_imp.nr_sequencia%type,
			nr_seq_item_ref_pc	pls_oc_val_itens.nr_seq_item_ref%type) FOR
	SELECT	b.nr_seq_conta,
		b.nr_seq_material_conv nr_seq_material,
		a.ie_situacao_gerar,
		sum(b.qt_executado) qt_item
	from	pls_conta_mat_imp b,
		pls_oc_item_dep a
	where	b.nr_seq_conta		= nr_seq_conta_pc
	and 	a.nr_seq_item_ref	= nr_seq_item_ref_pc
	and	a.nr_seq_material	= b.nr_seq_material_conv
	group by b.nr_seq_conta,
		b.nr_seq_material_conv,
		a.ie_situacao_gerar
	order by b.nr_seq_material_conv;

procedure processa_procedimento(	ie_situacao_gerar_p	in pls_oc_item_dep.ie_situacao_gerar%type,
					qt_item_pai_p		in bigint,
					qt_informada_item_p	in bigint,
					nr_id_transacao_p	in pls_oc_cta_selecao_imp.nr_id_transacao%type,
					ie_origem_proced_p	in pls_conta_proc_imp.ie_origem_proced_conv%type,
					cd_procedimento_p	in pls_conta_proc_imp.cd_procedimento_conv%type,
					nr_seq_item_ref_p	in pls_oc_item_ref.nr_sequencia%type,
					tb_seq_selecao_w	in out pls_util_cta_pck.t_number_table,
					tb_valido_w		in out pls_util_cta_pck.t_varchar2_table_1,
					tb_observacao_w		in out pls_util_cta_pck.t_varchar2_table_4000,
					nr_indice_p		in out integer) is

ie_gera_ocorrrencia_w	varchar(1);

c_reg_sel_proc CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_sequencia%type,
			ie_origem_proced_pc	pls_conta_proc.ie_origem_proced%type,
			cd_procedimento_pc	pls_conta_proc.cd_procedimento%type,
			nr_seq_item_ref_pc	pls_oc_val_itens.nr_seq_item_ref%type)FOR
	SELECT	x.nr_sequencia nr_seq_selecao
	from	pls_oc_cta_selecao_imp	x,
		pls_conta_proc_imp	b
	where	x.nr_id_transacao	= nr_id_transacao_pc
	and	x.ie_valido		= 'S'
	and	b.nr_sequencia		= x.nr_seq_conta_proc
	and 	b.ie_origem_proced_conv	= ie_origem_proced_pc
	and	b.cd_procedimento_conv	= cd_procedimento_pc
	and	not exists (	SELECT 	1
				from	pls_oc_item_ref z
				where	z.nr_sequencia = nr_seq_item_ref_pc
				and	z.ie_origem_proced = b.ie_origem_proced_conv
				and	z.cd_procedimento = b.cd_procedimento_conv);
BEGIN

-- se entrar aqui é porque mudou de procedimento e precisa ser verificado as quantidades
ie_gera_ocorrrencia_w := 'N';

case(ie_situacao_gerar_p)
	-- ambos
	when 'A' then
		-- qualquer diferença gera
		if (qt_informada_item_p != qt_item_pai_p) then
			ie_gera_ocorrrencia_w := 'S';
		end if;
	-- quantidade maior
	when 'QM' then
		-- quando a quantidade do item na conta for maior que o do item dep (regra panel de baixo)
		if (qt_informada_item_p > qt_item_pai_p) then
			ie_gera_ocorrrencia_w := 'S';
		end if;
	--quantidade menor
	when 'MQ' then
		-- quando a quantidade do item na conta for menor que o do item dep (regra panel de baixo)
		if (qt_informada_item_p < qt_item_pai_p) then
			ie_gera_ocorrrencia_w := 'S';
		end if;
	else
		null;
end case;

-- se é para gerar a ocorrência busca todas as sequências da seleção para o item em questão
if (ie_gera_ocorrrencia_w = 'S') then

	-- busca todos os registros de seleção que precisam ter ocorrência gerada
	for r_c_reg_sel_proc_w in c_reg_sel_proc(nr_id_transacao_p, ie_origem_proced_p, cd_procedimento_p, nr_seq_item_ref_p) loop

		tb_seq_selecao_w(nr_indice_p) := r_c_reg_sel_proc_w.nr_seq_selecao;
		tb_valido_w(nr_indice_p) := 'S';
		tb_observacao_w(nr_indice_p) := substr('Ocorrência gerada com base na validação da regra ' || nr_seq_item_ref_p, 1, 2000);

		-- se já atingiu a quantidade manda para o banco
		if (nr_indice_p >= pls_util_pck.qt_registro_transacao_w) then
			CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w,
									nr_id_transacao_p,'SEQ');

			-- Incializar as listas para cada regra.
			SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables( tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
  tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
			nr_indice_p := 0;
		else
			nr_indice_p := nr_indice_p + 1;
		end if;

	end loop;
end if;

end;


procedure processa_material(	ie_situacao_gerar_p	in pls_oc_item_dep.ie_situacao_gerar%type,
					qt_item_pai_p		in number,
					qt_informada_item_p	in number,
					nr_id_transacao_p	in pls_oc_cta_selecao_imp.nr_id_transacao%type,
					nr_seq_material_p	in pls_conta_mat.nr_seq_material%type,
					nr_seq_item_ref_p	in pls_oc_item_ref.nr_sequencia%type,
					tb_seq_selecao_w	in out pls_util_cta_pck.t_number_table,
					tb_valido_w		in out pls_util_cta_pck.t_varchar2_table_1,
					tb_observacao_w		in out pls_util_cta_pck.t_varchar2_table_4000,
					nr_indice_p		in out pls_integer) is

ie_gera_ocorrrencia_w	varchar2(1);

c_reg_sel_mat CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_sequencia%type,
			nr_seq_material		pls_conta_mat.nr_seq_material%type,
			nr_seq_item_ref_pc	pls_oc_val_itens.nr_seq_item_ref%type)FOR
	SELECT	x.nr_sequencia nr_seq_selecao
	from	pls_oc_cta_selecao_imp	x,
		pls_conta_mat_imp	b
	where	x.nr_id_transacao	= nr_id_transacao_pc
	and	x.ie_valido		= 'S'
	and	b.nr_sequencia		= x.nr_seq_conta_mat
	and	b.nr_seq_material_conv	= nr_seq_material_p
	and	not exists (	SELECT 	1
				from	pls_oc_item_ref z
				where	z.nr_sequencia = nr_seq_item_ref_pc
				and	z.nr_seq_material = b.nr_seq_material_conv);

begin

-- se entrar aqui é porque mudou de material e precisa ser verificado as quantidades
ie_gera_ocorrrencia_w := 'N';

case(ie_situacao_gerar_p)
	-- ambos
	when 'A' then
		-- qualquer diferença gera
		if (qt_informada_item_p != qt_item_pai_p) then
			ie_gera_ocorrrencia_w := 'S';
		end if;
	-- quantidade maior
	when 'QM' then
		-- quando a quantidade do item na conta for maior que o do item dep (regra panel de baixo)
		if (qt_informada_item_p > qt_item_pai_p) then
			ie_gera_ocorrrencia_w := 'S';
		end if;
	-- quantidade menor
	when 'MQ' then
		-- quando a quantidade do item na conta for menor que o do item dep (regra panel de baixo)
		if (qt_informada_item_p < qt_item_pai_p) then
			ie_gera_ocorrrencia_w := 'S';
		end if;
	else
		null;
end case;

-- se é para gerar a ocorrência busca todas as sequências da seleção para o item em questão
if (ie_gera_ocorrrencia_w = 'S') then

	-- busca todos os registros de seleção que precisam ter ocorrência gerada
	for r_c_reg_sel_mat_w in c_reg_sel_mat(nr_id_transacao_p, nr_seq_material_p, nr_seq_item_ref_p) loop

		tb_seq_selecao_w(nr_indice_p) := r_c_reg_sel_mat_w.nr_seq_selecao;
		tb_valido_w(nr_indice_p) := 'S';
		tb_observacao_w(nr_indice_p) := substr('Ocorrência gerada com base na validação da regra ' || nr_seq_item_ref_p, 1, 2000);

		-- se já atingiu a quantidade manda para o banco
		if (nr_indice_p >= pls_util_pck.qt_registro_transacao_w) then
			CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w,
									nr_id_transacao_p,'SEQ');

			-- Incializar as listas para cada regra.
			SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables( tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
  tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
			nr_indice_p := 0;
		else
			nr_indice_p := nr_indice_p + 1;
		end if;

	end loop;
end if;

end;

begin

if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '')  then

	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', ie_regra_excecao_p, nr_id_transacao_p, null);

	-- abre as regras
	for r_C01_w in C01(nr_seq_combinada_p) loop

		-- Incializar as listas para cada regra.
		SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables( tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
  tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
		nr_indice_w := 0;

		-- retorna todas as contas da tabela de seleção que precisam ter a verificação de procedimentos ou materiais dentro dela
		for r_c_conta_verificar_w in c_conta_verificar(nr_id_transacao_p, r_C01_w.nr_seq_item_ref) loop

			qt_proc_item_w  := 0;
			qt_mat_item_w	:= 0;
			ds_ultimo_proc_w := null;
			ds_ultimo_mat_w	:= null;
			ie_situacao_gerar_proc := null;
			ie_situacao_gerar_mat := null;

			-- faz os trabalhos para os procedimentos
			for r_c_proc_conta_w in c_proc_conta(r_c_conta_verificar_w.nr_seq_conta, r_C01_w.nr_seq_item_ref) loop

				-- busca para comparação os registros de um mesmo procedimento
				ds_proc_w := to_char(r_c_proc_conta_w.ie_origem_proced) || to_char(r_c_proc_conta_w.cd_procedimento);

				-- se for o mesmo procedimento acrescenta na quantidade
				-- tratamento com nvl para prevenção do primeiro registro
				if (ds_proc_w = coalesce(ds_ultimo_proc_w, ds_proc_w)) then
					qt_proc_item_w := qt_proc_item_w + coalesce(r_c_proc_conta_w.qt_item, 0);

				else
					-- se entrar aqui é porque mudou de procedimento e precisa ser verificado as quantidades
					processa_procedimento(	ie_situacao_gerar_proc, r_c_conta_verificar_w.qt_item,
								qt_proc_item_w, nr_id_transacao_p,
								ie_ult_origem_proced_w, cd_ult_procedimento_w,
								r_C01_w.nr_seq_item_ref, tb_seq_selecao_w,
								tb_valido_w, tb_observacao_w,
								nr_indice_w);
				end if;

				-- alimenta os valores para controle do loop
				ie_ult_origem_proced_w := r_c_proc_conta_w.ie_origem_proced;
				cd_ult_procedimento_w := r_c_proc_conta_w.cd_procedimento;
				ie_situacao_gerar_proc := r_c_proc_conta_w.ie_situacao_gerar;
				ds_ultimo_proc_w := to_char(r_c_proc_conta_w.ie_origem_proced) || to_char(r_c_proc_conta_w.cd_procedimento);
			end loop;

			for r_c_mat_conta_w in c_mat_conta(r_c_conta_verificar_w.nr_seq_conta, r_C01_w.nr_seq_item_ref) loop

				-- busca para comparação os registros de um mesmo material
				ds_mat_w := to_char(r_c_mat_conta_w.nr_seq_material);

				-- se for o mesmo material acrescenta na quantidade
				-- tratamento com nvl para prevenção do primeiro registro
				if (ds_mat_w = coalesce(ds_ultimo_mat_w, ds_mat_w)) then
					qt_mat_item_w := qt_mat_item_w + coalesce(r_c_mat_conta_w.qt_item, 0);

				else
					-- se entrar aqui é porque mudou de material e precisa ser verificado as quantidades
					processa_material(	ie_situacao_gerar_mat, r_c_conta_verificar_w.qt_item,
								qt_mat_item_w, nr_id_transacao_p,
								cd_ult_material_w, r_C01_w.nr_seq_item_ref,
								tb_seq_selecao_w, tb_valido_w,
								tb_observacao_w, nr_indice_w);
				end if;

				-- alimenta os valores para controle do loop
				cd_ult_material_w := r_c_mat_conta_w.nr_seq_material;
				ie_situacao_gerar_mat := r_c_mat_conta_w.ie_situacao_gerar;
				ds_ultimo_mat_w := to_char(r_c_mat_conta_w.nr_seq_material);
			end loop;

			-- se entrar aqui é porque mudou de material e precisa ser verificado as quantidades
			processa_material(	ie_situacao_gerar_mat, r_c_conta_verificar_w.qt_item,
								qt_mat_item_w, nr_id_transacao_p,
								cd_ult_material_w, r_C01_w.nr_seq_item_ref,
								tb_seq_selecao_w, tb_valido_w,
								tb_observacao_w, nr_indice_w);

			-- se entrar aqui é porque mudou de procedimento e precisa ser verificado as quantidades
			processa_procedimento(	ie_situacao_gerar_proc, r_c_conta_verificar_w.qt_item,
								qt_proc_item_w, nr_id_transacao_p,
								ie_ult_origem_proced_w, cd_ult_procedimento_w,
								r_C01_w.nr_seq_item_ref, tb_seq_selecao_w,
								tb_valido_w, tb_observacao_w,
								nr_indice_w);

			-- início dos trabalhos para os materiais
		end loop;

		-- se sobrou algo manda para o banco
		CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w,
									nr_id_transacao_p,'SEQ');

		-- Incializar as listas para cada regra.
		SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables( tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
  tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;

	end loop;

	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_ocor_imp_pck.atualiza_campo_valido('V', 'N', ie_regra_excecao_p, null, nr_id_transacao_p, null);

end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_88_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

