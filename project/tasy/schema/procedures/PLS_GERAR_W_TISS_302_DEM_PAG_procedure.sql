-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE rc_dados_protocolo AS (nr_protocol_w				bigint,
						dt_protocol_w				timestamp,
						dt_protocol_pgto_w			timestamp);
CREATE TYPE rc_guia AS (nr_seq_guia_tiss_w			bigint);
CREATE TYPE rc_dados_prot AS (vl_valor_w				double precision, -- Array que armazena os eventos financeiros dos protocolos
				ds_proc_w				varchar(255),
				nr_event_w				varchar(255),
				ie_nature_w				varchar(10),
				nr_proot_w				bigint);
CREATE TYPE rc_dados_prestador AS (nr_seq_prestador_ww	bigint);


CREATE OR REPLACE PROCEDURE pls_gerar_w_tiss_302_dem_pag ( nr_seq_prestador_p bigint, nr_seq_protocolo_p bigint, nm_usuario_p text, nr_seq_lote_p bigint, nr_seq_pres_pag_p bigint) AS $body$
DECLARE
	-- Array que armazena os números dos protocolos
 	-- Array que armazena o número de sequencia da guia gerado
type	tb_protocolo 	is table of rc_dados_protocolo		index by integer;
type 	tb_guia 	is table of rc_guia 			index by integer;
type	tb_dados_prot 	is table of rc_dados_prot		index by integer;
type	tb_prestador	is table of rc_dados_prestador		index by integer;

tb_protocolo_w 		tb_protocolo;
tb_guia_w		tb_guia;
tb_dados_prot_w		tb_dados_prot;
tb_prestador_w		tb_prestador;

--Váriaveis
nr_protoc_cursor_w			bigint 	:= 1;
nr_seq_tiss_guia_w			w_tiss_guia.nr_sequencia%type := null;
nr_teste_w				bigint 	:= 1;
dt_protocolo_w				timestamp;
vl_total_apresent_prot_w		double precision	:= 0;
vl_total_process_prot_w			double precision	:= 0;
vl_total_liberado_prot_w		double precision	:= 0;
vl_total_glosa_prot_w			double precision	:= 0;
vl_credito_w				double precision	:= 0;
vl_debito_w				double precision	:= 0;
vl_debito_ww				double precision	:= 0;
vl_total_deb_cred_w			double precision	:= 0;
vl_total_geral_w			double precision	:= 0;
vl_apresentado_w			double precision	:= 0;
ie_natureza_w				varchar(10);

--Contadores
nr_prot_w				bigint 	:= 1;
nr_med_w				bigint 	:= 1;
qt_pag_guia_w				bigint 	:= 1;
teste_w					bigint 	:= 1;
numero_proc_w				bigint	:= 1;
nr_protoc_tiss_w			bigint;
nr_guia_w				integer;
nr_seq_prestador_w			pls_prestador.nr_sequencia%type;
cont_w					bigint	:= 1;
vl_total_liberado_w			double precision	:= 0;
qt_pagina_w				bigint	:= 1;
nr_seq_demonst_pag_w			bigint;

dt_protocolo_pgto_w			timestamp;

c00 CURSOR FOR
	SELECT	a.nr_seq_prestador nr_sequencia
	FROM pls_pagamento_prestador a, pls_pag_prest_vencimento b
LEFT OUTER JOIN titulo_pagar c ON (b.nr_titulo = c.nr_titulo)
WHERE a.nr_sequencia	= b.nr_seq_pag_prestador  and a.nr_seq_lote 	= nr_seq_lote_p and ((a.nr_seq_prestador = nr_seq_prestador_p) or (coalesce(nr_seq_prestador_p::text, '') = '')) and exists (	SELECT	1
			from	pls_conta_medica_resumo x,
				pls_lote_pagamento y
			where	x.nr_seq_lote_pgto 	= y.nr_sequencia
			and	y.nr_sequencia 		= a.nr_seq_lote);

c01 CURSOR FOR  -- Cursor que seleciona os números dos protocolos  onde o prestador e o número do lote seja, iguai aos passados por parametros
	SELECT 	distinct a.nr_seq_protocolo nr_sequencia,
		trunc(b.dt_mes_competencia) dt_protocolo
	from	pls_conta_medica_resumo	a,
		pls_protocolo_conta	b
	where	a.vl_liberado > 0
	and	a.ie_situacao = 'A'
	and	a.ie_tipo_item <> 'I'
	and	b.nr_sequencia 		= a.nr_seq_protocolo
	and	a.nr_seq_prestador_pgto	= nr_seq_prestador_w
	and	a.nr_seq_protocolo	= coalesce(nr_seq_protocolo_p, a.nr_seq_protocolo)
	and	a.nr_seq_lote_pgto 	= coalesce(nr_seq_lote_p,      a.nr_seq_lote_pgto)
	order by
		a.nr_seq_protocolo;

c02 CURSOR FOR  -- Cursor que busca  as informações dos protocolos do Cursor 1
	SELECT	trunc(b.dt_mes_competencia) dt_competencia_pgto,
		coalesce(sum(a.vl_lib_original),0) vl_liberado_w,
		coalesce(sum(a.vl_lib_original),0) vl_processado_w,
		coalesce(sum(a.vl_glosa),0) vl_glosa_w,
		nr_seq_prestador_pgto nr_seq_prestador_pgto
	from 	pls_conta_medica_resumo	a,
		pls_protocolo_conta	b
	where  	a.nr_seq_lote_pgto 	= nr_seq_lote_p
	and	a.nr_seq_prestador_pgto	= nr_seq_prestador_w
	and 	a.nr_seq_protocolo	= nr_protoc_cursor_w
	and	b.nr_sequencia 		= a.nr_seq_protocolo
	group by
		trunc(b.dt_mes_competencia),
		nr_seq_prestador_pgto;

c03 CURSOR FOR
	SELECT 	nr_seq_evento,
		vl_item,
		c.ds_evento,
		c.ie_natureza
	from	pls_evento c,
		pls_pagamento_item b,
		pls_pagamento_prestador a
	where	a.nr_sequencia	 	= b.nr_seq_pagamento
	and	b.nr_seq_evento		= c.nr_sequencia
	and	c.ie_tipo_evento	= 'F' --  financeiro
	and	c.ie_natureza		= 'P' -- provento
	and	a.nr_seq_prestador	= nr_seq_prestador_w
	and	a.nr_seq_lote		= nr_seq_lote_p
	and	exists (SELECT	1
			from	pls_conta_medica_resumo x
			where	x.nr_seq_protocolo = nr_protoc_tiss_w
			and	x.nr_seq_protocolo = coalesce(nr_seq_protocolo_p,x.nr_seq_protocolo)
			and	x.nr_seq_lote_pgto = a.nr_seq_lote)
	
union all

	select	nr_seq_evento,
		vl_item,
		c.ds_evento,
		c.ie_natureza
	from	pls_evento c,
		pls_pagamento_item b,
		pls_pagamento_prestador a
	where	a.nr_sequencia	 	= b.nr_seq_pagamento
	and	b.nr_seq_evento		= c.nr_sequencia
	and	c.ie_tipo_evento	= 'F' --  financeiro
	and	c.ie_natureza		= 'D' --  descontos
	and	a.nr_seq_prestador	= nr_seq_prestador_w
	and	a.nr_seq_lote		= nr_seq_lote_p
	and	exists (select	1
			from	pls_conta_medica_resumo x
			where	x.nr_seq_protocolo = nr_protoc_tiss_w
			and	x.nr_seq_protocolo = coalesce(nr_seq_protocolo_p,x.nr_seq_protocolo)
			and	x.nr_seq_lote_pgto = a.nr_seq_lote);
BEGIN

delete	from 	w_tiss_conta_proc
where	nm_usuario	= nm_usuario_p;

delete	from 	w_tiss_totais
where	nm_usuario	= nm_usuario_p;

delete	from 	w_tiss_guia
where	nm_usuario	= nm_usuario_p;

delete	from 	w_tiss_outras_despesas
where	nm_usuario	= nm_usuario_p;

delete	from	w_tiss_demonst_pag
where	nm_usuario	= nm_usuario_p;

commit;

--verifica se o filtro prestador foi informado
if coalesce(nr_seq_prestador_p::text, '') = '' then --caso não informado abre o cursor 0 e pega os prestadores do lote
	for r_c00_w in c00 loop
		begin
		tb_prestador_w[cont_w].nr_seq_prestador_ww 	:= 	r_c00_w.nr_sequencia;
		cont_w	:= 	cont_w + 1;
		end;
	end loop;
else -- caso informado ja filtra pelo prestador informado
	tb_prestador_w[cont_w].nr_seq_prestador_ww	:=	nr_seq_prestador_p;
end if;

for a in 1..tb_prestador_w.count loop  --varre os prestdores
begin
	nr_seq_prestador_w	:= tb_prestador_w[a].nr_seq_prestador_ww;
	qt_pag_guia_w := 1;
	for r_c01_w in C01 loop -- cursor que busca os dados dos protocolos
		begin
		tb_protocolo_w[nr_prot_w].nr_protocol_w		:= 	r_c01_w.nr_sequencia; -- sequencia do protocolo
		tb_protocolo_w[nr_prot_w].dt_protocol_w 	:= 	r_c01_w.dt_protocolo; -- dta do protocolo
					      nr_prot_w		:=	nr_prot_w + 1;

		end;
	end loop;
	--qt_pag_guia_w := 1;
	for i in 1..tb_protocolo_w.count loop -- varre os protocolos
		begin
			nr_protoc_cursor_w		:= tb_protocolo_w[i].nr_protocol_w; --sequencia do protocolo
			dt_protocolo_w			:= tb_protocolo_w[i].dt_protocol_w; -- data do protocolo
			dt_protocolo_pgto_w		:= tb_protocolo_w[i].dt_protocol_pgto_w; -- data do pagamento protocolo
		for r_c02_w in C02 loop -- cursor que busca os valores dos intens por protocolo
			begin
			if ( qt_pag_guia_w <= 8) then
				--qt_pagina_w
				select	nextval('w_tiss_guia_seq')
				into STRICT	nr_seq_tiss_guia_w
				;

				insert into w_tiss_guia(nr_sequencia,			dt_atualizacao,			nm_usuario,
					dt_solicitacao,			nr_atendimento,			nr_seq_protocolo,
					nr_seq_prestador)
				values ( nr_seq_tiss_guia_w,		clock_timestamp(), 			nm_usuario_p,
					r_c02_w.dt_competencia_pgto,	r_c02_w.nr_seq_prestador_pgto,	nr_protoc_cursor_w,
					nr_seq_prestador_w );

				select	nextval('w_tiss_demonst_pag_seq')
				into STRICT	nr_seq_demonst_pag_w
				;

				insert into 	w_tiss_demonst_pag(	nr_sequencia,		dt_atualizacao,		nm_usuario,
						nr_lote,		nr_seq_prestador,	nr_linha, 	nr_w_tiss_guia)
				values (	nr_seq_demonst_pag_w,	clock_timestamp(),		nm_usuario_p,
						nr_seq_lote_p,		nr_seq_prestador_w,	qt_pagina_w,	nr_seq_tiss_guia_w);

				commit;

				tb_guia_w(nr_med_w).nr_seq_guia_tiss_w	:= nr_seq_tiss_guia_w; -- Array que armazena os números de sequencia gerado do  w_tiss_guia
				nr_med_w	:= nr_med_w + 1;
			end if;

			select	sum(vl_apresentado)
			into STRICT	vl_apresentado_w
			from (SELECT	distinct nr_seq_conta_proc,
					vl_apresentado
				from 	pls_conta_medica_resumo
				where  	nr_seq_prestador_pgto 	= nr_seq_prestador_w
				and 	nr_seq_protocolo	= nr_protoc_cursor_w
				and 	nr_seq_lote_pgto 	= nr_seq_lote_p
				and	(nr_seq_conta_proc IS NOT NULL AND nr_seq_conta_proc::text <> '')
				
union all

				SELECT	nr_seq_conta_mat nr_seq_conta_proc,
					vl_apresentado
				from 	pls_conta_medica_resumo
				where  	nr_seq_prestador_pgto 	= nr_seq_prestador_w
				and 	nr_seq_protocolo	= nr_protoc_cursor_w
				and 	nr_seq_lote_pgto 	= nr_seq_lote_p
				and	(nr_seq_conta_mat IS NOT NULL AND nr_seq_conta_mat::text <> '')) alias3;

			vl_total_apresent_prot_w	:= vl_apresentado_w;
			vl_total_process_prot_w		:= r_c02_w.vl_processado_w;
			vl_total_liberado_prot_w	:= r_c02_w.vl_liberado_w;
			vl_total_glosa_prot_w		:= r_c02_w.vl_glosa_w;

			insert into w_tiss_totais(nr_sequencia, 		dt_atualizacao, 		nm_usuario,
					nr_seq_guia,		vl_glosa,			vl_processado,
					vl_apresentado,		vl_informado,			nr_seq_prestador)
			values (nextval('w_tiss_totais_seq'),	clock_timestamp(),			nm_usuario_p,
				nr_seq_tiss_guia_w,		vl_total_glosa_prot_w,		vl_total_process_prot_w,
				vl_total_apresent_prot_w, 	vl_total_liberado_prot_w, 	nr_seq_prestador_w);
			--vl_total_liberado_prot_w
			insert into w_tiss_conta_proc(nr_sequencia,			dt_atualizacao,			nm_usuario,
				ie_tiss_tipo_guia,		cd_autorizacao,			vl_apresentado,
				vl_processado,			vl_informado,			vl_glosa,
				nr_seq_lote ,			nr_seq_protocolo,		nr_seq_proc,
				dt_procedimento)
			values (nextval('w_tiss_conta_proc_seq'),	clock_timestamp(),			nm_usuario_p,
				'A',				'A',				vl_apresentado_w,
				r_c02_w.vl_processado_w,	r_c02_w.vl_liberado_w,		r_c02_w.vl_glosa_w,
				nr_seq_lote_p,			nr_protoc_cursor_w,		nr_seq_tiss_guia_w ,
				dt_protocolo_w);

			if ( qt_pag_guia_w = 8) then
				qt_pag_guia_w := 1;
				--nr_seq_tiss_guia_w := null;
				qt_pagina_w := qt_pagina_w + 1;
			else
				qt_pag_guia_w := qt_pag_guia_w + 1;
			end if;
			end;
		end loop;
		end;
	end loop;  -- final do loop da tabela de protocolo
	select 	coalesce(sum(vl_item), 0)
	into STRICT	vl_credito_w
	from	pls_evento c,
		pls_pagamento_item b,
		pls_pagamento_prestador a
	where	a.nr_sequencia	 	= b.nr_seq_pagamento
	and	b.nr_seq_evento		= c.nr_sequencia
	and	c.ie_tipo_evento	= 'F' --  financeiro
	and	c.ie_natureza		= 'P' -- provento
	and	nr_seq_prestador_w = a.nr_seq_prestador
	and	nr_seq_lote_p = a.nr_seq_lote
	and exists (	SELECT	1
			from	pls_conta_medica_resumo x
			where	x.nr_seq_lote_pgto = a.nr_seq_lote
			and	x.nr_seq_prestador_pgto = a.nr_seq_prestador);

	select	coalesce(sum(vl_item), 0)
	into STRICT	vl_debito_w
	from	pls_evento c,
		pls_pagamento_item b,
		pls_pagamento_prestador a
	where	a.nr_sequencia	 	= b.nr_seq_pagamento
	and  	b.nr_seq_evento    = c.nr_sequencia
	and  	c.ie_tipo_evento  = 'F' --  financeiro
	and  	c.ie_natureza    = 'D' --  descontos
	and	nr_seq_prestador_w = a.nr_seq_prestador
	and	nr_seq_lote_p = a.nr_seq_lote
	and exists (	SELECT  1
			from  	pls_conta_medica_resumo x
			where   x.nr_seq_lote_pgto = a.nr_seq_lote
			and	x.nr_seq_prestador_pgto = a.nr_seq_prestador);

	select  coalesce(sum(c.vl_imposto), 0)
	into STRICT	vl_debito_ww
	from    pls_pagamento_prestador  a,
		pls_pag_prest_vencimento b,
		pls_pag_prest_venc_trib  c
	where   a.nr_sequencia     	= b.nr_seq_pag_prestador
	and     b.nr_sequencia    	= c.nr_seq_vencimento
	and     nr_seq_prestador_w 	= a.nr_seq_prestador
	and     nr_seq_lote_p 		= a.nr_seq_lote
	and exists (  SELECT  1
		      from    pls_conta_medica_resumo x
		      where   x.nr_seq_lote_pgto = a.nr_seq_lote
		      and  x.nr_seq_prestador_pgto = a.nr_seq_prestador);

	select	coalesce(sum(vl_liberado), 0)
	into STRICT	vl_total_liberado_w
	from	pls_conta_medica_resumo
	where	nr_seq_lote_p = nr_seq_lote_pgto
	and	nr_seq_prestador_w = nr_seq_prestador_pgto
	and	ie_situacao = 'A'
	and	ie_tipo_item <> 'I'
	and	vl_liberado > 0;

	insert into w_tiss_outras_despesas -- tabela que armazena os dados dos valores totais de débito e crédito
		(nr_sequencia,					dt_atualizacao,				nm_usuario,
		nr_seq_guia,					vl_reducao_acrescimo,			vl_unitario,
		vl_item, 					nr_seq_prestador)
	values	(nextval('w_tiss_outras_despesas_seq'),		clock_timestamp(), 				nm_usuario_p,
		nr_seq_prestador_w,				vl_credito_w,				(vl_debito_w * -1) + vl_debito_ww,
		((vl_credito_w - (vl_debito_ww + (vl_debito_w * -1))) + vl_total_liberado_w), nr_seq_prestador_w );



end;
end loop;


commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_w_tiss_302_dem_pag ( nr_seq_prestador_p bigint, nr_seq_protocolo_p bigint, nm_usuario_p text, nr_seq_lote_p bigint, nr_seq_pres_pag_p bigint) FROM PUBLIC;

