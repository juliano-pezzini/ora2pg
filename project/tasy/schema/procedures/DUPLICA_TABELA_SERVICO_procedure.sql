-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE duplica_tabela_servico ( cd_estabelecimento_p bigint, cd_tabela_origem_p bigint, cd_tabela_destino_p bigint, cd_moeda_destino_p bigint, cd_area_restrita_p bigint, cd_espec_restrita_p bigint, cd_grupo_restrito_p bigint, ie_indice_p bigint, nm_usuario_p text, ie_substituir_p text, dt_vigencia_origem_p timestamp, dt_vigencia_p timestamp, ie_arredondamento_p text, qt_casas_decimais_p bigint, ie_ultima_vigencia_p text, ie_sem_fim_vigencia_p text) AS $body$
DECLARE

				
cd_procedimento_w			bigint;
vl_servico_w				double precision;
cd_moeda_w				smallint;
ie_origem_proced_w			bigint;
ds_erro_w				varchar(255);
dt_inicio_vigencia_w			timestamp;
nr_sequencia_w				bigint;
cd_estabelecimento_w			bigint;
cd_unidade_medida_w			varchar(30);
ds_tab_serv_orig_w			varchar(100);
ds_tab_serv_dest_w			varchar(100);
cd_procedimento_loc_w preco_servico.cd_procedimento_loc%type;

c01 CURSOR FOR
	SELECT	a.cd_estabelecimento,
		a.cd_procedimento,
		a.dt_inicio_vigencia,
		a.vl_servico,
		a.cd_moeda,
		a.ie_origem_proced,
		a.cd_unidade_medida,
		a.cd_procedimento_loc					
	from	estrutura_procedimento_v b,
		preco_servico a
	where	a.cd_tabela_servico = cd_tabela_origem_p
	and	a.cd_procedimento = b.cd_procedimento
	and	a.ie_origem_proced = b.ie_origem_proced
	and	b.cd_area_procedimento = coalesce(cd_area_restrita_p,b.cd_area_procedimento)
	and	b.cd_especialidade = coalesce(cd_espec_restrita_p,b.cd_especialidade)
	and	b.cd_grupo_proc	= coalesce(cd_grupo_restrito_p,b.cd_grupo_proc)
	and	a.cd_estabelecimento = cd_estabelecimento_p
	and	a.dt_inicio_vigencia = coalesce(dt_vigencia_origem_p, a.dt_inicio_vigencia)
	and	not exists (	SELECT	1
				from	preco_servico x
				where	x.cd_tabela_servico = cd_tabela_destino_p
				and	x.cd_procedimento = a.cd_procedimento
				and	x.dt_inicio_vigencia = a.dt_inicio_vigencia
				and	x.dt_inicio_vigencia = dt_vigencia_p
				and	x.cd_estabelecimento = cd_estabelecimento_p
				and	coalesce(ie_substituir_p,'N') = 'N')
	and	coalesce(ie_ultima_vigencia_p,'N') = 'N'
	and	((coalesce(ie_sem_fim_vigencia_p,'N') = 'N') or (coalesce(a.dt_vigencia_final::text, '') = ''))
	
union

	select	a.cd_estabelecimento,
		a.cd_procedimento,
		a.dt_inicio_vigencia,
		a.vl_servico,
		a.cd_moeda,
		a.ie_origem_proced,
		a.cd_unidade_medida,
		a.cd_procedimento_loc					
	from	estrutura_procedimento_v b,
		preco_servico a
	where	a.cd_tabela_servico = cd_tabela_origem_p
	and	a.cd_procedimento = b.cd_procedimento
	and	a.ie_origem_proced = b.ie_origem_proced
	and	b.cd_area_procedimento = coalesce(cd_area_restrita_p,b.cd_area_procedimento)
	and	b.cd_especialidade = coalesce(cd_espec_restrita_p,b.cd_especialidade)
	and	b.cd_grupo_proc	= coalesce(cd_grupo_restrito_p,b.cd_grupo_proc)
	and	a.cd_estabelecimento = cd_estabelecimento_p
	and	a.dt_inicio_vigencia = coalesce(dt_vigencia_origem_p, a.dt_inicio_vigencia)
	and	not exists (select 1 from preco_servico x
		where	x.cd_tabela_servico = cd_tabela_destino_p
		and	x.cd_procedimento = a.cd_procedimento
		and	x.dt_inicio_vigencia = a.dt_inicio_vigencia
		and	x.dt_inicio_vigencia = dt_vigencia_p
		and	x.cd_estabelecimento = cd_estabelecimento_p
		and	coalesce(ie_substituir_p,'N') = 'N')
	and 	a.dt_inicio_vigencia = (select max(x.dt_inicio_vigencia)
					from 	preco_servico x
					where 	x.cd_tabela_servico = a.cd_tabela_servico
					and   	x.cd_procedimento = a.cd_procedimento
					and   	x.ie_origem_proced = a.ie_origem_proced
					and	x.cd_estabelecimento = cd_estabelecimento_p)
	and	coalesce(ie_ultima_vigencia_p,'N')		= 'S'
	and	((coalesce(ie_sem_fim_vigencia_p,'N') = 'N') or (coalesce(a.dt_vigencia_final::text, '') = ''));


BEGIN

ds_erro_w	:= '';

select	max(ds_tabela_servico)
into STRICT	ds_tab_serv_orig_w
from	tabela_servico
where 	cd_tabela_servico	= cd_tabela_origem_p;

select	max(ds_tabela_servico)
into STRICT	ds_tab_serv_dest_w
from	tabela_servico
where 	cd_tabela_servico	= cd_tabela_destino_p;

open c01;
loop
fetch c01 into
	cd_estabelecimento_w,
	cd_procedimento_w,
	dt_inicio_vigencia_w,
	vl_servico_w,
	cd_moeda_w,
	ie_origem_proced_w,
	cd_unidade_medida_w,
	cd_procedimento_loc_w;						
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	if (coalesce(ie_substituir_p,'N')	= 'S') then
		if (dt_vigencia_p IS NOT NULL AND dt_vigencia_p::text <> '') then
			delete	from preco_servico
			where	cd_tabela_servico	= cd_tabela_destino_p
			and	cd_procedimento		= cd_procedimento_w
			and	cd_estabelecimento	= cd_estabelecimento_p;
		else
			delete	from preco_servico
			where	cd_tabela_servico	= cd_tabela_destino_p
			and	cd_procedimento		= cd_procedimento_w
			and	dt_inicio_vigencia	= dt_inicio_vigencia_w
			and	cd_estabelecimento	= cd_estabelecimento_p;
		end if;
	end if;
	
	if (ie_arredondamento_p = 'P') then
		vl_servico_w := round(vl_servico_w * ie_indice_p,qt_casas_decimais_p);
	elsif (ie_arredondamento_p = 'D') then
		vl_servico_w := trunc(vl_servico_w * ie_indice_p,qt_casas_decimais_p);
	elsif (ie_arredondamento_p = 'N') or (qt_casas_decimais_p = 0) then
		vl_servico_w := vl_servico_w * ie_indice_p;
	end if;
	
	
	
	insert into preco_servico(
			cd_estabelecimento,
			cd_tabela_servico,
			cd_procedimento,
			dt_inicio_vigencia,
			vl_servico,
			cd_moeda,
			dt_atualizacao,
			nm_usuario,
			ie_origem_proced,
			cd_unidade_medida,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_inativacao,
			cd_procedimento_loc)				
	values (	cd_estabelecimento_w,
			cd_tabela_destino_p,
			cd_procedimento_w,
			coalesce(dt_vigencia_p, dt_inicio_vigencia_w),
			vl_servico_w,
			coalesce(cd_moeda_destino_p,cd_moeda_w),
			clock_timestamp(),
			coalesce(nm_usuario_p,'Tasy'),
			ie_origem_proced_w,
			cd_unidade_medida_w,
			clock_timestamp(),
			coalesce(nm_usuario_p,'Tasy'),
			null,
			cd_procedimento_loc_w);


	exception
    		when others then
			ds_erro_w	:= sqlerrm(SQLSTATE);
			CALL wheb_mensagem_pck.exibir_mensagem_abort(177821,'CD_PROCEDIMENTO_W='||cd_procedimento_w||';'||'DS_ERRO_W='||ds_erro_w);
	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE duplica_tabela_servico ( cd_estabelecimento_p bigint, cd_tabela_origem_p bigint, cd_tabela_destino_p bigint, cd_moeda_destino_p bigint, cd_area_restrita_p bigint, cd_espec_restrita_p bigint, cd_grupo_restrito_p bigint, ie_indice_p bigint, nm_usuario_p text, ie_substituir_p text, dt_vigencia_origem_p timestamp, dt_vigencia_p timestamp, ie_arredondamento_p text, qt_casas_decimais_p bigint, ie_ultima_vigencia_p text, ie_sem_fim_vigencia_p text) FROM PUBLIC;

