-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_autorizar_decurso_prazo ( nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_origem_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Autorizar a guia/requisição que possui um Decurso de Prazo
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_estagio_w			pls_guia_plano.ie_estagio%type;
nr_seq_guia_proc_w		pls_guia_plano_proc.nr_sequencia%type;
nr_seq_guia_mat_w		pls_guia_plano_mat.nr_sequencia%type;

ie_estagio_req_w		pls_requisicao.ie_estagio%type;
nr_seq_requisicao_proc_w	pls_requisicao_proc.nr_sequencia%type;
nr_seq_requisicao_mat_w		pls_requisicao_mat.nr_sequencia%type;

nr_seq_segurado_w		pls_guia_plano.nr_seq_segurado%type;
dt_solicitacao_w		pls_guia_plano.dt_solicitacao%type;
ie_tipo_guia_w			varchar(2);
dt_valid_senha_w		timestamp;
cd_senha_w			varchar(20);
dt_solicitacao_varchar_w	varchar(20);

nr_seq_guia_w			pls_guia_plano.nr_sequencia%type;
dt_validade_senha_w		pls_guia_plano.dt_validade_senha%type;
ie_origem_solic_w		pls_requisicao.ie_origem_solic%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;

C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_guia_plano_proc
	where	nr_seq_guia 	= nr_seq_guia_w;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_guia_plano_mat
	where	nr_seq_guia 	= nr_seq_guia_w;

C03 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_requisicao_proc
	where	nr_seq_requisicao	= nr_seq_requisicao_p;

C04 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_requisicao_mat
	where	nr_seq_requisicao	= nr_seq_requisicao_p;


BEGIN

cd_estabelecimento_w := ptu_obter_estab_padrao;

if (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
	begin
		select  ie_estagio,
			coalesce(ie_origem_solic, 'M')
		into STRICT    ie_estagio_req_w,
			ie_origem_solic_w
		from    pls_requisicao
		where   nr_sequencia    = nr_seq_requisicao_p;
	exception
	when others then
		ie_estagio_req_w    	:= 0;
	end;

	if (coalesce(ie_estagio_req_w,0)	= 4) then
		update	pls_auditoria
		set	ie_status		= 'F',
			dt_liberacao		= clock_timestamp(),
			nr_seq_proc_interno	 = NULL,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_requisicao	= nr_seq_requisicao_p;

		update	pls_auditoria_grupo
		set	dt_liberacao		= clock_timestamp(),
			ie_status		= 'S',
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	coalesce(dt_liberacao::text, '') = ''
		and	exists (	SELECT	1
				from 	pls_auditoria x
				where 	x.nr_seq_requisicao	= nr_seq_requisicao_p
				and 	x.nr_sequencia 		= nr_seq_auditoria);

		select	nr_seq_segurado,
			dt_requisicao,
			ie_tipo_guia
		into STRICT	nr_seq_segurado_w,
			dt_solicitacao_w,
			ie_tipo_guia_w
		from	pls_requisicao
		where	nr_sequencia = nr_seq_requisicao_p;

		CALL pls_gerar_validade_senha_req(	nr_seq_requisicao_p,
						nr_seq_segurado_w,
						dt_solicitacao_w,
						ie_tipo_guia_w,
						nm_usuario_p);

		update	pls_requisicao
		set	cd_senha_externa = nr_seq_origem_p
		where	nr_sequencia = nr_seq_requisicao_p;

		CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p,'L','Análise encerrada pelo Decurso de Prazo. ', '', nm_usuario_p);
	end if;

	open C03;
	loop
	fetch C03 into
		nr_seq_requisicao_proc_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin
		update	pls_requisicao_proc
		set	ie_status	= 'S',
			qt_procedimento = CASE WHEN coalesce(qt_procedimento,0)=0 THEN qt_solicitado  ELSE qt_procedimento END
		where	nr_sequencia	= nr_seq_requisicao_proc_w;
		end;
	end loop;
	close C03;

	open C04;
	loop
	fetch C04 into
		nr_seq_requisicao_mat_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		update	pls_requisicao_mat
		set	ie_status	= 'S',
			qt_material 	= CASE WHEN coalesce(qt_material,0)=0 THEN qt_solicitado  ELSE qt_material END
		where	nr_sequencia	= nr_seq_requisicao_mat_w;
		end;
	end loop;
	close C04;

	update	pls_requisicao
	set	ie_status		= 'L',
		ie_estagio		= 2,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p
	where	nr_sequencia		= nr_seq_requisicao_p;

	if (ie_origem_solic_w = 'E') then
		select	max(a.nr_seq_guia)
		into STRICT	nr_seq_guia_w
		from	pls_requisicao c,
			pls_execucao_requisicao a
		where	a.nr_seq_requisicao	= c.nr_sequencia
		and	c.nr_sequencia		= nr_seq_requisicao_p;

		if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
			open C01;
			loop
			fetch C01 into
				nr_seq_guia_proc_w;
			EXIT WHEN NOT FOUND; /* apply on C01 */
				begin
				update	pls_guia_plano_proc
				set	ie_status	= 'S',
					qt_autorizada 	= CASE WHEN coalesce(qt_autorizada,0)=0 THEN qt_solicitada  ELSE qt_autorizada END
				where	nr_sequencia	= nr_seq_guia_proc_w;
				end;
			end loop;
			close C01;

			open C02;
			loop
			fetch C02 into
				nr_seq_guia_mat_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				update	pls_guia_plano_mat
				set	ie_status	= 'S',
					qt_autorizada 	= CASE WHEN coalesce(qt_autorizada,0)=0 THEN qt_solicitada  ELSE qt_autorizada END
				where	nr_sequencia	= nr_seq_guia_mat_w;
				end;
			end loop;
			close C02;

			select	dt_validade_senha
			into STRICT	dt_validade_senha_w
			from	pls_requisicao
			where	nr_sequencia		= nr_seq_requisicao_p;

			update	pls_guia_plano
			set	ie_estagio		= 6,
				ie_status		= 1,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				dt_autorizacao		= clock_timestamp(),
				dt_validade_senha	= coalesce(dt_validade_senha_w, dt_validade_senha),
				cd_senha_externa	= nr_seq_origem_p
			where	nr_sequencia		= nr_seq_guia_w;
		end if;
	end if;

	CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p,'L','Requisição liberada pelo Decurso de Prazo. ', '', nm_usuario_p);

	CALL pls_executar_req_interc_aprov(nr_seq_requisicao_p, cd_estabelecimento_w, nm_usuario_p);
elsif (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
	nr_seq_guia_w := nr_seq_guia_p;
	begin
		select  ie_estagio
		into STRICT    ie_estagio_w
		from    pls_guia_plano
		where   nr_sequencia    = nr_seq_guia_p;
	exception
	when others then
		ie_estagio_w    	:= 0;
	end;

	if (coalesce(ie_estagio_w,0)	= 1) then
		update	pls_auditoria
		set	ie_status		= 'F',
			dt_liberacao		= clock_timestamp(),
			nr_seq_proc_interno	 = NULL,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_guia		= nr_seq_guia_p;

		update	pls_auditoria_grupo
		set	dt_liberacao		= clock_timestamp(),
			ie_status		= 'S',
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	coalesce(dt_liberacao::text, '') = ''
		and	exists (	SELECT	1
				from 	pls_auditoria x
				where 	x.nr_seq_guia 	= nr_seq_guia_p
				and 	x.nr_sequencia 	= nr_seq_auditoria);

		select	nr_seq_segurado,
			dt_solicitacao,
			ie_tipo_guia
		into STRICT	nr_seq_segurado_w,
			dt_solicitacao_w,
			ie_tipo_guia_w
		from	pls_guia_plano
		where	nr_sequencia = nr_seq_guia_p;

		SELECT * FROM pls_gerar_validade_senha(nr_seq_guia_p, nr_seq_segurado_w, 0/*qt_dias_val_senha_p*/
, dt_solicitacao_w, ie_tipo_guia_w, nm_usuario_p, dt_solicitacao_varchar_w, cd_senha_w) INTO STRICT dt_solicitacao_varchar_w, cd_senha_w;

		dt_valid_senha_w := to_date(dt_solicitacao_varchar_w, 'dd/mm/rrrr');

		update	pls_guia_plano
		set	cd_senha = cd_senha_w,
			dt_validade_senha = dt_valid_senha_w,
			cd_senha_externa = nr_seq_origem_p
		where	nr_sequencia = nr_seq_guia_p;

		CALL pls_guia_gravar_historico(nr_seq_guia_p,2,'Análise encerrada pelo Decurso de Prazo. ', '', nm_usuario_p);
	end if;

	open C01;
	loop
	fetch C01 into
		nr_seq_guia_proc_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		update	pls_guia_plano_proc
		set	ie_status	= 'S',
			qt_autorizada 	= CASE WHEN coalesce(qt_autorizada,0)=0 THEN qt_solicitada  ELSE qt_autorizada END
		where	nr_sequencia	= nr_seq_guia_proc_w;
		end;
	end loop;
	close C01;

	open C02;
	loop
	fetch C02 into
		nr_seq_guia_mat_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		update	pls_guia_plano_mat
		set	ie_status	= 'S',
			qt_autorizada 	= CASE WHEN coalesce(qt_autorizada,0)=0 THEN qt_solicitada  ELSE qt_autorizada END
		where	nr_sequencia	= nr_seq_guia_mat_w;
		end;
	end loop;
	close C02;

	update	pls_guia_plano
	set	ie_status		= 1,
		ie_estagio		= 6,
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p
	where	nr_sequencia		= nr_seq_guia_p;

	CALL pls_guia_gravar_historico(nr_seq_guia_p,2,'Guia autorizada pelo Decurso de Prazo. ', '', nm_usuario_p);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_autorizar_decurso_prazo ( nr_seq_guia_p pls_guia_plano.nr_sequencia%type, nr_seq_requisicao_p pls_requisicao.nr_sequencia%type, nr_seq_origem_p bigint, nm_usuario_p text) FROM PUBLIC;

