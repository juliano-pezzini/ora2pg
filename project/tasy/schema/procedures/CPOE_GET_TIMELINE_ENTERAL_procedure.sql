-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_get_timeline_enteral ( nr_seq_cpoe_p cpoe_dieta.nr_sequencia%type, dt_inicio_grid_p timestamp, dt_fim_grid_p timestamp, ds_horarios_p INOUT cpoe_dieta.ds_horarios%type, ie_tipo_dieta_p INOUT cpoe_dieta.ie_tipo_dieta%type, dt_inicio_p INOUT cpoe_dieta.dt_inicio%type, dt_fim_p INOUT cpoe_dieta.dt_fim%type, qt_tempo_aplic_p INOUT text, qt_hora_fase_p INOUT cpoe_dieta.qt_hora_fase%type, nr_etapas_p INOUT cpoe_dieta.nr_etapas%type, ie_continuo_p INOUT cpoe_dieta.ie_continuo%type, hr_prim_horario_p INOUT cpoe_dieta.hr_prim_horario%type, dt_liberacao_p INOUT cpoe_dieta.dt_liberacao%type, ie_acm_p INOUT cpoe_dieta.ie_acm%type, ie_se_necessario_p INOUT cpoe_dieta.ie_se_necessario%type, dt_prox_geracao_p INOUT cpoe_dieta.dt_prox_geracao%type, dt_menor_inicio_p INOUT prescr_mat_hor.dt_horario%type, dt_maior_fim_p INOUT prescr_mat_hor.dt_horario%type, ds_param_24_p INOUT text ) AS $body$
DECLARE


	ds_horarios_w			cpoe_dieta.ds_horarios%type;
	ie_tipo_dieta_w			cpoe_dieta.ie_tipo_dieta%type;
	dt_inicio_w				cpoe_dieta.dt_inicio%type;
	dt_fim_w				cpoe_dieta.dt_fim%type;
	qt_tempo_aplic_w		varchar(50);
	qt_hora_fase_w			cpoe_dieta.qt_hora_fase%type;
	nr_etapas_w				cpoe_dieta.nr_etapas%type;
	ie_continuo_w			cpoe_dieta.ie_continuo%type;
	hr_prim_horario_w		cpoe_dieta.hr_prim_horario%type;
	dt_liberacao_w			cpoe_dieta.dt_liberacao%type;
	ie_acm_w				cpoe_dieta.ie_acm%type;
	ie_se_necessario_w		cpoe_dieta.ie_se_necessario%type;
	dt_prox_geracao_w 		cpoe_dieta.dt_prox_geracao%type;
	param_CPOE_24_w			varchar(1);
	dt_horario_inicial_w	prescr_mat_hor.dt_horario%type;
	dt_horario_final_w		prescr_mat_hor.dt_horario%type;
	ds_das_w 				varchar(50) := obter_texto_tasy(439834, wheb_usuario_pck.get_nr_seq_idioma);
	ds_as_w					varchar(50) := obter_texto_tasy(439836, wheb_usuario_pck.get_nr_seq_idioma);
	i_pos_das_w				integer;
	i_pos_as_w				integer;

	cHorarios CURSOR FOR
		SELECT distinct
			   a.ds_horarios
  	      from prescr_material a,
			   prescr_mat_hor b
		 where a.nr_prescricao = b.nr_prescricao
		   and a.nr_sequencia = b.nr_seq_material
		   and a.nr_seq_dieta_cpoe = nr_seq_cpoe_p
		   and b.dt_horario >= coalesce(dt_horario_inicial_w, dt_inicio_grid_p) and b.dt_horario < coalesce(dt_horario_final_w, dt_fim_grid_p)  LIMIT 1;

BEGIN

	param_CPOE_24_w := Obter_Param_Usuario(2314, 24, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, param_CPOE_24_w);

	select	max(ds_horarios),
			max(ie_tipo_dieta),
			max(to_date(to_char(dt_inicio,'dd/mm/yyyy ') || coalesce(hr_prim_horario,to_char(dt_liberacao,'hh24:mi'),to_char(clock_timestamp(),'hh24:mi')),'dd/mm/yyyy hh24:mi')) dt_inicio,
			max(dt_fim),
			max(coalesce(dividir(obter_minutos_hora(qt_tempo_aplic),60),24)) qt_tempo_aplic,
			coalesce(max(qt_hora_fase),0) qt_hora_fase,
			max(coalesce(nr_etapas,nr_ocorrencia)) nr_etapas,
			max(case ie_continuo when 'C' then 'S' else 'N' end) ie_continuo,
			max(hr_prim_horario),
			max(dt_liberacao),
			coalesce(max(ie_acm),'N'),
			coalesce(max(ie_se_necessario),'N'),
			max(dt_prox_geracao)
	  into STRICT	ds_horarios_w,
			ie_tipo_dieta_w,
			dt_inicio_w,
			dt_fim_w,
			qt_tempo_aplic_w,
			qt_hora_fase_w,
			nr_etapas_w,
			ie_continuo_w,
			hr_prim_horario_w,
			dt_liberacao_w,
			ie_acm_w,
			ie_se_necessario_w,
			dt_prox_geracao_w
	  from	cpoe_dieta
	 where	nr_sequencia = nr_seq_cpoe_p;

	if (param_CPOE_24_w = 'S' AND ie_tipo_dieta_w = 'E') then
		if (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then
			ds_horarios_w := '';

			select	coalesce(max(b.dt_horario), dt_inicio_grid_p)
			  into STRICT	dt_horario_inicial_w
			  from 	prescr_material a,
					prescr_mat_hor b
			 where 	a.nr_prescricao = b.nr_prescricao
			   and 	a.nr_sequencia = b.nr_seq_material
			   and 	a.nr_seq_dieta_cpoe = nr_seq_cpoe_p
			   and 	b.dt_horario <= dt_inicio_grid_p;

			select 	min(b.dt_horario)
			  into STRICT	dt_horario_final_w
			  from 	prescr_material a,
					prescr_mat_hor b
			 where 	a.nr_prescricao = b.nr_prescricao
			   and 	a.nr_sequencia = b.nr_seq_material
			   and 	a.nr_seq_dieta_cpoe = nr_seq_cpoe_p
			   and 	b.dt_horario >= dt_fim_grid_p;

			<<for_loop>>
			for r_cHorarios in cHorarios
			loop
				ds_horarios_w := ds_horarios_w || r_cHorarios.ds_horarios;
			end loop for_loop;

			/* Posição do "das" para o menor horário */

			i_pos_das_w := position(ds_das_w || ' ' || to_char(dt_horario_inicial_w, 'hh24:mi') in ds_horarios_w);
			/* Quando ainda não passou a cópia não tem horários futuros */

			if (coalesce(dt_horario_final_w::text, '') = '') then
				i_pos_as_w := length(ds_horarios_w);
			else
				/* Posição do "as" para o maior horário */

				i_pos_as_w := position(ds_as_w  || ' ' || to_char(dt_horario_final_w, 'hh24:mi') || ';' in ds_horarios_w);
				/* Monta o length para o novo "das ... as" */

				i_pos_as_w := i_pos_as_w + length(ds_as_w  || ' ' || to_char(dt_horario_final_w, 'hh24:mi') || ';') - i_pos_das_w;
			end if;

			if (i_pos_das_w = 0) then
				i_pos_das_w := 1;
			end if;

			ds_horarios_w := substr(ds_horarios_w, i_pos_das_w, i_pos_as_w);

			hr_prim_horario_w := obter_prim_dshorarios(ds_horarios_w);
			dt_inicio_w := to_date(to_char(dt_horario_inicial_w,'dd/mm/yyyy ') || coalesce(hr_prim_horario_w,to_char(dt_liberacao_w,'hh24:mi'),to_char(clock_timestamp(),'hh24:mi')),'dd/mm/yyyy hh24:mi');
		end if;
		nr_etapas_w := 1;
	end if;

	ds_horarios_p := ds_horarios_w;
	ie_tipo_dieta_p := ie_tipo_dieta_w;
	dt_inicio_p := dt_inicio_w;
	dt_fim_p := dt_fim_w;
	qt_tempo_aplic_p := qt_tempo_aplic_w;
	qt_hora_fase_p := qt_hora_fase_w;
	nr_etapas_p := nr_etapas_w;
	ie_continuo_p := ie_continuo_w;
	hr_prim_horario_p := hr_prim_horario_w;
	dt_liberacao_p := dt_liberacao_w;
	ie_acm_p := ie_acm_w;
	ie_se_necessario_p := ie_se_necessario_w;
	dt_prox_geracao_p := dt_prox_geracao_w;
	dt_menor_inicio_p := coalesce(dt_horario_inicial_w, dt_inicio_grid_p);
	dt_maior_fim_p := coalesce(dt_horario_final_w, dt_fim_grid_p);
	ds_param_24_p := param_CPOE_24_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_get_timeline_enteral ( nr_seq_cpoe_p cpoe_dieta.nr_sequencia%type, dt_inicio_grid_p timestamp, dt_fim_grid_p timestamp, ds_horarios_p INOUT cpoe_dieta.ds_horarios%type, ie_tipo_dieta_p INOUT cpoe_dieta.ie_tipo_dieta%type, dt_inicio_p INOUT cpoe_dieta.dt_inicio%type, dt_fim_p INOUT cpoe_dieta.dt_fim%type, qt_tempo_aplic_p INOUT text, qt_hora_fase_p INOUT cpoe_dieta.qt_hora_fase%type, nr_etapas_p INOUT cpoe_dieta.nr_etapas%type, ie_continuo_p INOUT cpoe_dieta.ie_continuo%type, hr_prim_horario_p INOUT cpoe_dieta.hr_prim_horario%type, dt_liberacao_p INOUT cpoe_dieta.dt_liberacao%type, ie_acm_p INOUT cpoe_dieta.ie_acm%type, ie_se_necessario_p INOUT cpoe_dieta.ie_se_necessario%type, dt_prox_geracao_p INOUT cpoe_dieta.dt_prox_geracao%type, dt_menor_inicio_p INOUT prescr_mat_hor.dt_horario%type, dt_maior_fim_p INOUT prescr_mat_hor.dt_horario%type, ds_param_24_p INOUT text ) FROM PUBLIC;

