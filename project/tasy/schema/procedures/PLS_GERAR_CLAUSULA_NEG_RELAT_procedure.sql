-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_clausula_neg_relat ( nr_seq_requisicao_p bigint) AS $body$
DECLARE


			-- Autor: vbona

			-- Procedure responsavel por gerar o relatorio 04578

			-- O parametro de entrada nr_seq_requisicao_p varia de acordo com a funcao autorizadora da operadora, caso for 'OPS - Autorizacoes(1)' o parametro deve receber 'nr_seq_guia'

			-- caso for 'OPS - Requisicoes para autorizacao(2)' o parametro deve receber 'nr_seq_requisicao'.
nr_seq_produto_benef_w 		pls_plano.nr_sequencia%type;
ds_plano_w				pls_plano.ds_plano%type;
cd_rps_w					pls_plano.nr_protocolo_ans%type;
nm_beneficiario_w			varchar(50);
nr_cartao_benef_w			varchar(30);
dt_adesao_benef			timestamp;
nr_protocolo_ans_w			varchar(30);
dt_requisicao_w				timestamp;
nr_seq_mat_proc_w			pls_requisicao_proc.nr_sequencia%type;
nm_profissional_solic_w		varchar(50);
nm_usuario_w 				varchar(50);
cd_crm_profissional_solic_w	varchar(25);
ie_func_autorizadora_w		varchar(1);
w_tiss_guia_seq_w			w_tiss_guia.nr_sequencia%type;
ie_sexo_segurado_w			pessoa_fisica.ie_sexo%type;
ie_valido_w				varchar(1) := 'S';

--Cursor caso a funcao autorizadora cadastrada na operadora for 'OPS - Requisicoes para autorizacao(2)'
C01 CURSOR FOR
	SELECT	nr_sequencia nr_sequencia,
			substr(pls_obter_desc_procedimento(cd_procedimento,ie_origem_proced),1,255) ds_proc_mat,
			cd_procedimento cd_tiss
	from		pls_requisicao_proc
	where	1 = 1
	and		ie_status in ('N', 'G') 
	and		nr_seq_requisicao = nr_seq_requisicao_p
	
union all

	SELECT	nr_sequencia nr_sequencia,
			substr(pls_obter_desc_material_regra(nr_seq_material),1,255) ds_proc_mat,
			cd_material cd_tiss
	from		pls_requisicao_mat 
	where	1 = 1
	and		ie_status in ('N', 'G') 
	and		nr_seq_requisicao = nr_seq_requisicao_p;

--Cursor caso a funcao autorizadora cadastrada na operadora for 'OPS - Autorizacoes(1)'
C02 CURSOR FOR
	SELECT 	nr_sequencia nr_sequencia,
			substr(pls_obter_desc_procedimento(cd_procedimento,ie_origem_proced),1,255) ds_proc_mat,
			cd_procedimento cd_tiss
	from		pls_guia_plano_proc
	where	1 = 1
	and		ie_status in ('N', 'G') 
	and		nr_seq_guia = nr_seq_requisicao_p
	
union all

	SELECT	nr_sequencia nr_sequencia,
			substr(pls_obter_desc_material_regra(nr_seq_material),1,255) ds_proc_mat,
			cd_material cd_tiss
	from		pls_guia_plano_mat 
	where	1 = 1
	and		ie_status in ('N', 'G') 
	and		nr_seq_guia = nr_seq_requisicao_p;
	
--Cursor caso a funcao autorizadora cadastrada na operadora for 'OPS - Requisicoes para autorizacao(2)'	
C03 CURSOR FOR
	SELECT	nr_seq_motivo_glosa,
			ds_descricao_glosa_ocor
	from		pls_requisicao_glosa_ocorr_v
	where	1 = 1
	and		ie_tipo = 'G'
	and		nr_seq_proc = nr_seq_mat_proc_w
	and		coalesce(nr_seq_mat::text, '') = ''
	
union all

	SELECT	nr_seq_motivo_glosa,
			ds_descricao_glosa_ocor
	from		pls_requisicao_glosa_ocorr_v
	where	1 = 1
	and		ie_tipo = 'G'
	and		coalesce(nr_seq_proc::text, '') = ''
	and		nr_seq_mat = nr_seq_mat_proc_w;

--Cursor caso a funcao autorizadora cadastrada na operadora for 'OPS - Autorizacoes(1)'
C04 CURSOR FOR
	SELECT	nr_seq_motivo_glosa,
			ds_descricao_glosa_ocor
	from		pls_guia_glosa_ocorrencia_v
	where	1 = 1
	and		ie_tipo = 'G'
	and		nr_seq_proc = nr_seq_mat_proc_w
	and		coalesce(nr_seq_mat::text, '') = ''
	
union all

	SELECT	nr_seq_motivo_glosa,
			ds_descricao_glosa_ocor
	from		pls_guia_glosa_ocorrencia_v
	where	1 = 1
	and		ie_tipo = 'G'
	and		coalesce(nr_seq_proc::text, '') = ''
	and		nr_seq_mat = nr_seq_mat_proc_w;

C05 CURSOR FOR
	SELECT	a.nr_seq_tipo_tema nr_seq_tipo_tema
	from		pls_plano_instrumento		a,
			pls_instrumento			b
	where	a.nr_seq_instrumento	= b.nr_sequencia
	and		b.ie_situacao			= 'A'
	and		(a.nr_seq_tipo_tema IS NOT NULL AND a.nr_seq_tipo_tema::text <> '')
	and		b.nr_seq_plano			= nr_seq_produto_benef_w
	and		(((trunc(b.dt_inicio_vigencia)	<= trunc(clock_timestamp())) or (coalesce(b.dt_inicio_vigencia::text, '') = '')))
	and		(((trunc(b.dt_fim_vigencia)		>= trunc(clock_timestamp())) or (coalesce(b.dt_fim_vigencia::text, '') = '')));

C06 CURSOR(	nr_seq_motivo_glosa_pc	text,
			nr_seq_tipo_tema_pc		pls_plano_instrumento.nr_seq_tipo_tema%type)  FOR
	SELECT	substr(tiss_obter_motivo_glosa(a.nr_seq_motivo_glosa,'C'),1,255) cd,
			b.ds_tipo_tema ds
	from		pls_tipo_tema_instr_glosa a,
			pls_tipo_tema_instr_jurid b
	where	a.nr_seq_motivo_glosa	= nr_seq_motivo_glosa_pc
	and		a.nr_seq_tipo_tema_instr	= b.nr_sequencia
	and		b.nr_sequencia			= nr_seq_tipo_tema_pc;

BEGIN

	select 	wheb_usuario_pck.get_nm_usuario()
	into STRICT 		nm_usuario_w
	;

	delete	from 		w_tiss_guia
	where	nm_usuario	= nm_usuario_w;

	select	pls_obter_param_atend_geral('FA')
	into STRICT		ie_func_autorizadora_w
	;
	
	if (ie_func_autorizadora_w = '2') then
		begin	
			select	substr(pls_obter_produto_benef(a.nr_seq_segurado, clock_timestamp()),1,255),
					substr(pls_obter_dados_segurado(a.nr_seq_segurado, 'CR'), 1, 255),
					substr(pls_obter_dados_segurado(a.nr_seq_segurado, 'D'), 1, 255),
					substr(pls_obter_dados_segurado(nr_seq_segurado, 'N'), 1, 15),
					substr(pls_obter_nr_protocolo_atend(a.nr_sequencia, 1),1,20),
					a.dt_requisicao,
					substr(obter_nome_medico(a.cd_medico_solicitante,'N'),1,255),
					substr(obter_crm_medico(a.cd_medico_solicitante),1,255),
					substr(pls_obter_dados_segurado(nr_seq_segurado, 'SXS'), 1, 255)
			into STRICT 		nr_seq_produto_benef_w,
					nr_cartao_benef_w,
					dt_adesao_benef,
					nm_beneficiario_w,
					nr_protocolo_ans_w,
					dt_requisicao_w,
					nm_profissional_solic_w,
					cd_crm_profissional_solic_w,
					ie_sexo_segurado_w
			from		pls_requisicao a
			where 	a.nr_sequencia = nr_seq_requisicao_p;
		exception
		when others then
			ie_valido_w := 'N';
		end;
	elsif (ie_func_autorizadora_w = '1') then
		begin
			select	substr(pls_obter_produto_benef(a.nr_seq_segurado, clock_timestamp()),1,255),
					substr(pls_obter_dados_segurado(a.nr_seq_segurado, 'CR'), 1, 255),
					substr(pls_obter_dados_segurado(a.nr_seq_segurado, 'D'), 1, 255),
					substr(pls_obter_dados_segurado(nr_seq_segurado, 'N'), 1, 15),
					substr(pls_obter_nr_protocolo_atend(a.nr_sequencia, 1),1,20),
					a.dt_solicitacao,
					substr(obter_nome_medico(a.cd_medico_solicitante,'N'),1,255),
					substr(obter_crm_medico(a.cd_medico_solicitante),1,255),
					substr(pls_obter_dados_segurado(nr_seq_segurado, 'SXS'), 1, 255)
			into STRICT 		nr_seq_produto_benef_w,
					nr_cartao_benef_w,
					dt_adesao_benef,
					nm_beneficiario_w,
					nr_protocolo_ans_w,
					dt_requisicao_w,
					nm_profissional_solic_w,
					cd_crm_profissional_solic_w,
					ie_sexo_segurado_w
			from		pls_guia_plano a
			where 	a.nr_sequencia = nr_seq_requisicao_p;
		exception
		when others then	
			ie_valido_w := 'N';
		end;
	end if;

	if (ie_valido_w = 'S') then
		select	ds_plano,
				nr_protocolo_ans
		into STRICT		ds_plano_w,
				cd_rps_w
		from		pls_plano 	
		where	nr_sequencia = nr_seq_produto_benef_w;
		
		if (ie_func_autorizadora_w = '2') then
			begin
				for C01_w in C01 loop
					begin
						nr_seq_mat_proc_w := C01_w.nr_sequencia;				
						for C03_w in C03 loop
							begin
								for C05_w in C05 loop
									begin
										for C06_w in C06(C03_w.nr_seq_motivo_glosa, C05_w.nr_seq_tipo_tema ) loop
											begin
												insert into w_tiss_guia(nr_sequencia,
														nr_seq_apresentacao,		--Utilizada para armazenar o nr_seq_requisicao_p
														nr_seq_conta_guia,			--Utilizada para armazenar o nr_seq_produto_benef_w
														nr_seq_guia,				--Utilizada para armazenar o nr_seq_motivo_glosa_w
														ds_justificativa,				--Utilizada para armazenar o ds_tipo_tema_w
														ds_assinatura_solic,			--Utilizada para armazenar o ds_plano_w
														cd_senha,					--Utilizada para armazenar o cd_rps_w
														nm_usuario_nrec,				--Utilizado para armazenar o nm_beneficiario_w
														nr_guia_operadora,			--Utilizado para armazenar o nr_cartao_benef_w
														dt_autorizacao,			--Utilizado para armazenar o dt_adesao_benef
														nr_guia_prestador,			--Utilizado para armazenar o nr_protocolo_ans_w
														dt_atualizacao,
														dt_solicitacao,				--Utilizado para armazenar o dt_requisicao_w
														ds_assinatura_resp,			--Utilizado para armazenar o ds_proc_mat
														cd_autorizacao,			--Utilizado para armazenar o cd_tiss
														ds_assinatura_exec,			--Utilizado para armazenar o nm_profissional_solic_w
														cd_autorizacao_princ,		--Utilizado para armazenar o cd_crm_profissional_solic_w
														nm_usuario,			--Utilizado para armazenar o nm_usuario_w
														ds_assinatura_contrat,		--Utilizado para armazenar o ds_descricao_glosa_ocor		
														ie_tiss_tipo_guia)	
												values (nextval('w_tiss_guia_seq'),
														nr_seq_requisicao_p,
														nr_seq_produto_benef_w,
														C06_w.cd,
														C06_w.ds,
														ds_plano_w,
														cd_rps_w,
														nm_beneficiario_w,
														nr_cartao_benef_w,
														dt_adesao_benef,
														nr_protocolo_ans_w,
														clock_timestamp(),
														dt_requisicao_w,
														C01_w.ds_proc_mat,
														C01_w.cd_tiss,
														nm_profissional_solic_w,
														cd_crm_profissional_solic_w,
														nm_usuario_w,
														C03_w.ds_descricao_glosa_ocor,
														ie_sexo_segurado_w);
											end;
										end loop;
									end;
								end loop;
							end;
						end loop;
					end;
				end loop;
			end;
		elsif (ie_func_autorizadora_w = '1') then
			begin
				for C02_w in C02 loop
					begin
						nr_seq_mat_proc_w := C02_w.nr_sequencia;
						for C04_w in C04 loop
							begin
								for C05_w in C05 loop
									begin
										for C06_w in C06(C04_w.nr_seq_motivo_glosa, C05_w.nr_seq_tipo_tema ) loop
											begin		
												insert into w_tiss_guia(nr_sequencia,
														nr_seq_apresentacao,		--Utilizada para armazenar o nr_seq_requisicao_p
														nr_seq_conta_guia,			--Utilizada para armazenar o nr_seq_produto_benef_w
														nr_seq_guia,				--Utilizada para armazenar o nr_seq_motivo_glosa_w
														ds_justificativa,				--Utilizada para armazenar o ds_tipo_tema_w
														ds_assinatura_solic,			--Utilizada para armazenar o ds_plano_w
														cd_senha,					--Utilizada para armazenar o cd_rps_w
														nm_usuario_nrec,			--Utilizado para armazenar o nm_beneficiario_w
														nr_guia_operadora,			--Utilizado para armazenar o nr_cartao_benef_w
														dt_autorizacao,			--Utilizado para armazenar o dt_adesao_benef
														nr_guia_prestador,			--Utilizado para armazenar o nr_protocolo_ans_w
														dt_atualizacao,
														dt_solicitacao,				--Utilizado para armazenar o dt_requisicao_w
														ds_assinatura_resp,			--Utilizado para armazenar o ds_proc_mat
														cd_autorizacao,			--Utilizado para armazenar o cd_tiss
														ds_assinatura_exec,			--Utilizado para armazenar o nm_profissional_solic_w
														cd_autorizacao_princ,		--Utilizado para armazenar o cd_crm_profissional_solic_w
														nm_usuario,			--Utilizado para armazenar o nm_usuario_w
														ds_assinatura_contrat,	--Utilizado para armazenar o ds_descricao_glosa_ocor		
														ie_tiss_tipo_guia)	
												values (nextval('w_tiss_guia_seq'),
														nr_seq_requisicao_p,
														nr_seq_produto_benef_w,
														C06_w.cd,
														C06_w.ds,
														ds_plano_w,
														cd_rps_w,
														nm_beneficiario_w,
														nr_cartao_benef_w,
														dt_adesao_benef,
														nr_protocolo_ans_w,
														clock_timestamp(),
														dt_requisicao_w,
														C02_w.ds_proc_mat,
														C02_w.cd_tiss,
														nm_profissional_solic_w,
														cd_crm_profissional_solic_w,
														nm_usuario_w,
														C04_w.ds_descricao_glosa_ocor,
														ie_sexo_segurado_w);
											end;
										end loop;
									end;
								end loop;
							end;
						end loop;
					end;
				end loop;
			end;
		end if;
	end if;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_clausula_neg_relat ( nr_seq_requisicao_p bigint) FROM PUBLIC;

