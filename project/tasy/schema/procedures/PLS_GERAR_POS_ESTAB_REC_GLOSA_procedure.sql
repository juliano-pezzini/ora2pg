-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_pos_estab_rec_glosa ( nr_seq_rec_glosa_prot_p pls_rec_glosa_protocolo.nr_sequencia%type, nr_seq_rec_conta_p pls_rec_glosa_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


qt_item_pos_estab_w		integer;
ie_apropriacao_copartic_w	pls_parametros.ie_apropriacao_copartic%type;
nr_seq_conta_w			pls_conta.nr_sequencia%type;
ie_status_w			pls_rec_glosa_conta.ie_status%type;
nr_seq_conta_fat_w		dbms_sql.number_table;

c01 CURSOR FOR
	SELECT	c.nr_seq_conta,
		i.nr_seq_conta_proc,
		null nr_seq_conta_mat,
		i.nr_sequencia nr_seq_proc_rec,
		null nr_seq_mat_rec
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_proc	i
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	c.nr_seq_protocolo	= nr_seq_rec_glosa_prot_p
	and	i.vl_acatado		> 0
	and	c.ie_status		= '2'
	and	(i.nr_seq_conta_proc IS NOT NULL AND i.nr_seq_conta_proc::text <> '')
	
union all

	SELECT	c.nr_seq_conta,
		null nr_seq_conta_proc,
		i.nr_seq_conta_mat nr_seq_conta_mat,
		null nr_seq_proc_rec,
		i.nr_sequencia nr_seq_mat_rec
	from	pls_rec_glosa_conta	c,
		pls_rec_glosa_mat	i
	where	c.nr_sequencia		= i.nr_seq_conta_rec
	and	c.nr_seq_protocolo	= nr_seq_rec_glosa_prot_p
	and	i.vl_acatado		> 0
	and	c.ie_status		= '2'
	and	(i.nr_seq_conta_mat IS NOT NULL AND i.nr_seq_conta_mat::text <> '')
	order by 1;

C02 CURSOR(nr_seq_rec_glosa_prot_pc		pls_rec_glosa_protocolo.nr_sequencia%type) FOR
	SELECT	nr_sequencia nr_seq_conta_rec,
		nr_seq_conta
	from	pls_rec_glosa_conta
	where	nr_seq_protocolo	= nr_seq_rec_glosa_prot_pc
	and	ie_status		!= '3';

c03 CURSOR(nr_seq_rec_conta_pc		pls_rec_glosa_conta.nr_sequencia%type) FOR
	SELECT	i.nr_seq_conta_proc,
		null nr_seq_conta_mat,
		i.nr_sequencia nr_seq_proc_rec,
		null nr_seq_mat_rec
	from	pls_rec_glosa_proc i
	where	i.nr_seq_conta_rec = nr_seq_rec_conta_pc
	and	i.vl_acatado > 0
	and	(i.nr_seq_conta_proc IS NOT NULL AND i.nr_seq_conta_proc::text <> '')
	
union all

	SELECT	null nr_seq_conta_proc,
		i.nr_seq_conta_mat nr_seq_conta_mat,
		null nr_seq_proc_rec,
		i.nr_sequencia nr_seq_mat_rec
	from	pls_rec_glosa_mat i
	where	i.nr_seq_conta_rec = nr_seq_rec_conta_pc
	and	i.vl_acatado > 0
	and	(i.nr_seq_conta_mat IS NOT NULL AND i.nr_seq_conta_mat::text <> '');

-- carrega as contas originais que possuem pós de rec liberado para fat, que precisam mudar o status fat da conta em si
c04 CURSOR(	nr_seq_rec_glosa_prot_pc	pls_rec_glosa_protocolo.nr_sequencia%type,
		nr_seq_rec_conta_pc		pls_rec_glosa_conta.nr_sequencia%type) FOR
	SELECT	b.nr_sequencia nr_seq_conta
	from	pls_rec_glosa_conta		a,
		pls_conta			b
	where	b.nr_sequencia			= a.nr_seq_conta
	and	a.nr_seq_protocolo		= nr_seq_rec_glosa_prot_pc
	and	(nr_seq_rec_glosa_prot_pc IS NOT NULL AND nr_seq_rec_glosa_prot_pc::text <> '')
	and	b.ie_status_fat			!= 'L'
	and	exists (	SELECT	1
			from	pls_conta_pos_estabelecido	x
			where	x.nr_seq_conta			= b.nr_sequencia
			and	x.ie_status_faturamento		= 'L'
			and	x.ie_situacao			= 'A'
			and	(x.nr_seq_proc_rec IS NOT NULL AND x.nr_seq_proc_rec::text <> '')
			
union all

			select	1
			from	pls_conta_pos_estabelecido	x
			where	x.nr_seq_conta			= b.nr_sequencia
			and	x.ie_status_faturamento		= 'L'
			and	x.ie_situacao			= 'A'
			and	(x.nr_seq_mat_rec IS NOT NULL AND x.nr_seq_mat_rec::text <> ''))
	
union all

	select	b.nr_sequencia nr_seq_conta
	from	pls_rec_glosa_conta	a,
		pls_conta		b
	where	b.nr_sequencia		= a.nr_seq_conta
	and	a.nr_sequencia		= nr_seq_rec_conta_pc
	and	(nr_seq_rec_conta_pc IS NOT NULL AND nr_seq_rec_conta_pc::text <> '')
	and	b.ie_status_fat		!= 'L'
	and	exists (	select	1
			from	pls_conta_pos_estabelecido	x
			where	x.nr_seq_conta			= b.nr_sequencia
			and	x.ie_status_faturamento		= 'L'
			and	x.ie_situacao			= 'A'
			and	(x.nr_seq_proc_rec IS NOT NULL AND x.nr_seq_proc_rec::text <> '')
			
union all

			select	1
			from	pls_conta_pos_estabelecido	x
			where	x.nr_seq_conta			= b.nr_sequencia
			and	x.ie_status_faturamento		= 'L'
			and	x.ie_situacao			= 'A'
			and	(x.nr_seq_mat_rec IS NOT NULL AND x.nr_seq_mat_rec::text <> ''));

BEGIN

select	coalesce(ie_apropriacao_copartic, 'N')
into STRICT	ie_apropriacao_copartic_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

if (nr_seq_rec_glosa_prot_p IS NOT NULL AND nr_seq_rec_glosa_prot_p::text <> '') then
	-- Gerar valor de pós-estabelecido
	for r_c01_w in C01 loop
		begin

		-- Passa a primeira vez no recurso de glosa para gerar os valores de apropriação do recurso
		if (ie_apropriacao_copartic_w = 'S') then
			CALL pls_apropriacao_pck.pls_gerar_apropriacao_pos(r_c01_w.nr_seq_conta_proc, r_c01_w.nr_seq_conta_mat, r_c01_w.nr_seq_proc_rec, r_c01_w.nr_seq_mat_rec, 'S', 'S', nm_usuario_p);
		end if;

		CALL pls_gerar_valor_pos_estab( r_c01_w.nr_seq_conta, nm_usuario_p, 'RC', r_c01_w.nr_seq_conta_proc, r_c01_w.nr_seq_conta_mat, 'RC');

		-- Passa a segunda vez gerando os valores de apropriacao do valor de pos gerado
		if (ie_apropriacao_copartic_w = 'S') then
			CALL pls_apropriacao_pck.pls_gerar_apropriacao_pos(r_c01_w.nr_seq_conta_proc, r_c01_w.nr_seq_conta_mat, r_c01_w.nr_seq_proc_rec, r_c01_w.nr_seq_mat_rec, 'S', 'N', nm_usuario_p);
		end if;

		if (r_c01_w.nr_seq_proc_rec IS NOT NULL AND r_c01_w.nr_seq_proc_rec::text <> '') then
			update	pls_conta_pos_estabelecido
			set	ie_status_faturamento 	= 'L',
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p
			where	nr_seq_conta 		= r_c01_w.nr_seq_conta
			and	nr_seq_proc_rec		= r_c01_w.nr_seq_proc_rec
			and	ie_status_faturamento 	= 'P'
			and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = ''));
		elsif (r_c01_w.nr_seq_mat_rec IS NOT NULL AND r_c01_w.nr_seq_mat_rec::text <> '') then
			update	pls_conta_pos_estabelecido
			set	ie_status_faturamento 	= 'L',
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p
			where	nr_seq_conta 		= r_c01_w.nr_seq_conta
			and	nr_seq_mat_rec		= r_c01_w.nr_seq_mat_rec
			and	ie_status_faturamento 	= 'P'
			and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = ''));
		end if;

		end;
	end loop;

	for r_C02_w in C02(nr_seq_rec_glosa_prot_p) loop
		CALL pls_gerar_analise_pos_estab(r_C02_w.nr_seq_conta, nm_usuario_p, cd_estabelecimento_p, 'F', r_C02_w.nr_seq_conta_rec, 'RG');	--r_c01_w.nr_seq_conta
	end loop;

elsif (nr_seq_rec_conta_p IS NOT NULL AND nr_seq_rec_conta_p::text <> '') then

	select	nr_seq_conta,
		ie_status
	into STRICT	nr_seq_conta_w,
		ie_status_w
	from	pls_rec_glosa_conta
	where	nr_sequencia = nr_seq_rec_conta_p;

	if (ie_status_w = '2') then

		for r_C03_w in C03(nr_seq_rec_conta_p) loop

			-- Passa a primeira vez no recurso de glosa para gerar os valores de apropriação do recurso
			if (ie_apropriacao_copartic_w = 'S') then
				CALL pls_apropriacao_pck.pls_gerar_apropriacao_pos(r_C03_w.nr_seq_conta_proc, r_C03_w.nr_seq_conta_mat, r_C03_w.nr_seq_proc_rec, r_C03_w.nr_seq_mat_rec, 'S', 'S', nm_usuario_p);
			end if;

			CALL pls_gerar_valor_pos_estab( nr_seq_conta_w, nm_usuario_p, 'RC', r_C03_w.nr_seq_conta_proc, r_C03_w.nr_seq_conta_mat, 'RC');

			-- Passa a segunda vez gerando os valores de apropriacao do valor de pos gerado
			if (ie_apropriacao_copartic_w = 'S') then
				CALL pls_apropriacao_pck.pls_gerar_apropriacao_pos(r_C03_w.nr_seq_conta_proc, r_C03_w.nr_seq_conta_mat, r_C03_w.nr_seq_proc_rec, r_C03_w.nr_seq_mat_rec, 'S', 'N', nm_usuario_p);
			end if;

			if (r_C03_w.nr_seq_proc_rec IS NOT NULL AND r_C03_w.nr_seq_proc_rec::text <> '') then
				update	pls_conta_pos_estabelecido
				set	ie_status_faturamento 	= 'L',
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_conta 		= nr_seq_conta_w
				and	nr_seq_proc_rec		= r_C03_w.nr_seq_proc_rec
				and	ie_status_faturamento 	= 'P'
				and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = ''));
			elsif (r_C03_w.nr_seq_mat_rec IS NOT NULL AND r_C03_w.nr_seq_mat_rec::text <> '') then
				update	pls_conta_pos_estabelecido
				set	ie_status_faturamento 	= 'L',
					dt_atualizacao		= clock_timestamp(),
					nm_usuario		= nm_usuario_p
				where	nr_seq_conta 		= nr_seq_conta_w
				and	nr_seq_mat_rec		= r_C03_w.nr_seq_mat_rec
				and	ie_status_faturamento 	= 'P'
				and	((ie_situacao	= 'A') or (coalesce(ie_situacao::text, '') = ''));
			end if;
		end loop;

		CALL pls_gerar_analise_pos_estab(nr_seq_conta_w, nm_usuario_p, cd_estabelecimento_p, 'F', nr_seq_rec_conta_p, 'RG');	--r_c01_w.nr_seq_conta
	end if;
end if;


-- no final, tem que verificar se as contas originais estavam com o status de faturamento diferente de 'L' - Liberado, e com pós de recurso liberado para faturamento
-- Se encontrar contas nesta situação, então deverá marcar o status de faturamento da conta original para 'L' - Liberado
open c04(nr_seq_rec_glosa_prot_p, nr_seq_rec_conta_p);
loop
	fetch c04 bulk collect into nr_seq_conta_fat_w limit pls_util_pck.qt_registro_transacao_w;
	exit when nr_seq_conta_fat_w.count = 0;

		forall i in nr_seq_conta_fat_w.first..nr_seq_conta_fat_w.last
			update	pls_conta
			set	ie_status_fat	= 'L',
				dt_atualizacao	= clock_timestamp(),
				nm_usuario	= nm_usuario_p
			where	nr_sequencia	= nr_seq_conta_fat_w(i);

		nr_seq_conta_fat_w.delete;
end loop;

if (c04%isopen) then

	close c04;
end if;



end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_pos_estab_rec_glosa ( nr_seq_rec_glosa_prot_p pls_rec_glosa_protocolo.nr_sequencia%type, nr_seq_rec_conta_p pls_rec_glosa_conta.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

