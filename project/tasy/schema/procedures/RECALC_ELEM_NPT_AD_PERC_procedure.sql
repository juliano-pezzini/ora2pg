-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE recalc_elem_npt_ad_perc ( nr_prescricao_p bigint, nr_seq_nut_pac_p bigint) AS $body$
DECLARE


pr_npt_w			nut_paciente.pr_npt%type;
qt_volume_total_w		nut_paciente.qt_volume_total%type;
dt_validade_prescr_w		timestamp;
dt_inicio_prescr_w		timestamp;
qt_hora_dur_w			bigint;
hr_primeiro_horario_w		varchar(20);
-- Cursor C01
nr_seq_elemento_w		nut_paciente_elemento.nr_sequencia%type;
qt_dispensar_w			nut_paciente_elemento.qt_dispensar%type;
qt_elemento_w			nut_paciente_elemento.qt_elemento%type;
qt_kcal_w			nut_paciente_elemento.qt_kcal%type;
qt_prescricao_w			nut_paciente_elemento.qt_prescricao%type;
qt_volume_w			nut_paciente_elemento.qt_volume%type;
qt_vol_1_fase_w			nut_paciente_elemento.qt_vol_1_fase%type;
qt_vol_2_fase_w			nut_paciente_elemento.qt_vol_2_fase%type;
qt_vol_3_fase_w			nut_paciente_elemento.qt_vol_3_fase%type;
-- Cursor C02
nr_seq_elem_mat_w		nut_pac_elem_mat.nr_sequencia%type;
qt_dose_mat_w			nut_pac_elem_mat.qt_dose%type;
qt_protocolo_mat_w		nut_pac_elem_mat.qt_protocolo%type;
qt_vol_cor_mat_w		nut_pac_elem_mat.qt_vol_cor%type;
qt_volume_mat_w			nut_pac_elem_mat.qt_volume%type;
qt_vol_1_fase_mat_w		nut_pac_elem_mat.qt_vol_1_fase%type;
qt_vol_2_fase_mat_w		nut_pac_elem_mat.qt_vol_2_fase%type;
qt_vol_3_fase_mat_w		nut_pac_elem_mat.qt_vol_3_fase%type;
ie_usar_hrs_prescr_w		varchar(1);

c01 CURSOR FOR
SELECT	nr_sequencia,
	coalesce(qt_kcal,0),
	coalesce(qt_elemento,0),
	coalesce(qt_volume,0),
	coalesce(qt_vol_1_fase,0),
	coalesce(qt_vol_2_fase,0),
	coalesce(qt_vol_3_fase,0),
	coalesce(qt_prescricao,0),
	coalesce(qt_dispensar,0)
from	nut_paciente_elemento
where	nr_seq_nut_pac = nr_seq_nut_pac_p;

c02 CURSOR FOR
SELECT	nr_sequencia,
	qt_dose,
	qt_protocolo,
	qt_vol_cor,
	qt_volume,
	qt_vol_1_fase,
	qt_vol_2_fase,
	qt_vol_3_fase
from	nut_pac_elem_mat
where	nr_seq_nut_pac_ele = nr_seq_elemento_w;


BEGIN

CALL Wheb_assist_pck.set_informacoes_usuario(obter_estabelecimento_ativo, obter_perfil_ativo, obter_Usuario_Ativo);

ie_usar_hrs_prescr_w	:= Wheb_assist_pck.obterParametroFuncao(924,856);

select	max(dt_validade_prescr),
	max(dt_inicio_prescr),
	max(to_char(dt_primeiro_horario,'hh24:mi:ss')),
	max(nr_horas_validade)
into STRICT	dt_validade_prescr_w,
	dt_inicio_prescr_w,
	hr_primeiro_horario_w,
	qt_hora_dur_w
from	prescr_medica
where	nr_prescricao = nr_prescricao_p;

--Se for S utuliza NR_HORAS_VALIDADE da PRESCR_MEDICA (OS 753355)
if (ie_usar_hrs_prescr_w = 'N') then
	qt_hora_dur_w	:= 24;
end if;

select	max(pr_npt)
--	max(round(((dt_validade_prescr_w + 1/86400) - to_date(to_char(sysdate,'dd/mm/yyyy')||' '||nvl(hr_prim_horario,hr_primeiro_horario_w),'dd/mm/yyyy hh24:mi:ss')) * 24,0))
into STRICT	pr_npt_w
	--qt_hora_dur_w
from	nut_paciente
where	nr_prescricao = nr_prescricao_p
and	nr_sequencia = nr_seq_nut_pac_p;

open c01;
loop
fetch c01 into
		nr_seq_elemento_w,
		qt_kcal_w,
		qt_elemento_w,
		qt_volume_w,
		qt_vol_1_fase_w,
		qt_vol_2_fase_w,
		qt_vol_3_fase_w,
		qt_prescricao_w,
		qt_dispensar_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	open c02;
	loop
	fetch c02 into
			nr_seq_elem_mat_w,
			qt_dose_mat_w,
			qt_protocolo_mat_w,
			qt_vol_cor_mat_w,
			qt_volume_mat_w,
			qt_vol_1_fase_mat_w,
			qt_vol_2_fase_mat_w,
			qt_vol_3_fase_mat_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		update	nut_pac_elem_mat
		set	qt_dose 	= (qt_dose_mat_w * (pr_npt_w/100)),
			qt_protocolo 	= (qt_protocolo_mat_w * (pr_npt_w/100)),
			qt_vol_cor 	= (qt_vol_cor_mat_w * (pr_npt_w/100)),
			qt_volume 	= (qt_volume_mat_w * (pr_npt_w/100)),
			qt_vol_1_fase 	= (qt_vol_1_fase_mat_w * (pr_npt_w/100)),
			qt_vol_2_fase 	= (qt_vol_2_fase_mat_w * (pr_npt_w/100)),
			qt_vol_3_fase 	= (qt_vol_3_fase_mat_w * (pr_npt_w/100))
		where	nr_sequencia 	= nr_seq_elem_mat_w;
		end;
	end loop;
	close c02;
	update	nut_paciente_elemento
	set	qt_kcal		= (qt_kcal_w * (pr_npt_w/100)),
		qt_elemento	= (qt_elemento_w * (pr_npt_w/100)),
		qt_volume	= (qt_volume_w * (pr_npt_w/100)),
		qt_vol_1_fase	= (qt_vol_1_fase_w * (pr_npt_w/100)),
		qt_vol_2_fase	= (qt_vol_2_fase_w * (pr_npt_w/100)),
		qt_vol_3_fase	= (qt_vol_3_fase_w * (pr_npt_w/100)),
		qt_prescricao	= (qt_prescricao_w * (pr_npt_w/100)),
		qt_dispensar 	= (qt_dispensar_w * (pr_npt_w/100))
	where	nr_sequencia 	= nr_seq_elemento_w;
	end;
end loop;
close c01;

commit;

select	sum(qt_volume)
into STRICT	qt_volume_total_w
from	nut_paciente_elemento
where	nr_seq_nut_pac = nr_seq_nut_pac_p;

update	nut_paciente
set	qt_volume_total 	= qt_volume_total_w,
	qt_gotejamento_npt	= coalesce(round(dividir_sem_round(qt_volume_total_w,qt_hora_dur_w)),0),
	qt_kcal_prot		= (qt_kcal_prot * (pr_npt_w/100)),
	qt_kcal_lipidio		= (qt_kcal_lipidio * (pr_npt_w/100)),
	qt_kcal_carboidrato	= (qt_kcal_carboidrato * (pr_npt_w/100)),
	qt_grama_prot_kg_dia	= (qt_grama_prot_kg_dia * (pr_npt_w/100)),
	qt_kcal_kg		= (qt_kcal_kg * (pr_npt_w/100)),
	qt_kcal_total		= (qt_kcal_total * (pr_npt_w/100))
where	nr_sequencia 		= nr_seq_nut_pac_p;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE recalc_elem_npt_ad_perc ( nr_prescricao_p bigint, nr_seq_nut_pac_p bigint) FROM PUBLIC;

