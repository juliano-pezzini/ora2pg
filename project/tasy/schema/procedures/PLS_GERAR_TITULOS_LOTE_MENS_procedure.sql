-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_titulos_lote_mens ( nr_seq_lote_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_seq_pagador_w		bigint;
nr_seq_contrato_w		bigint;
vl_mensalidade_w		double precision;
nr_seq_mensalidade_w		bigint;
vl_mensalidade_seg_w		double precision;
nr_seq_mens_segurado_w		bigint;
nr_seq_segurado_w		bigint;
nr_titulo_w			bigint;
cd_moeda_w			integer;
cd_estabelecimento_w		smallint;
cd_pessoa_fisica_w		varchar(10);
cd_cgc_w			varchar(14);
dt_vencimento_w			timestamp;
cd_tipo_portador_w		integer;
cd_portador_w			integer;
cd_tipo_taxa_juros_w		bigint;
cd_tipo_taxa_multa_w		bigint;
tx_juros_w			double precision;
tx_multa_w			double precision;
nr_seq_regra_mens_w		bigint;
cd_tipo_taxa_juro_par_w		bigint;
cd_tipo_taxa_multa_par_w	bigint;
pr_juro_padrao_par_w		double precision;
pr_multa_padrao_par_w		double precision;
nr_seq_plano_w			bigint;
nr_seq_conta_banco_w		bigint;
cont_w				bigint;
ie_origem_titulo_w		varchar(10);
ds_observacao_w			varchar(255);
nr_seq_reajuste_w		bigint;
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
tx_reajuste_w			double precision;
ie_indice_reajuste_w		varchar(1);
ds_oficio_ans_W			varchar(255);
nr_protocolo_ans_w		varchar(60);

c01 CURSOR FOR 
SELECT	a.nr_sequencia, 
	a.nr_seq_pagador, 
	a.nr_seq_contrato, 
	a.vl_mensalidade, 
	trunc(a.dt_vencimento,'dd'), 
	b.cd_pessoa_fisica, 
	b.cd_cgc 
from	pls_contrato_pagador b, 
	pls_mensalidade a 
where	a.nr_seq_pagador	= b.nr_sequencia 
and	a.nr_seq_lote		= nr_seq_lote_p;

c02 CURSOR FOR 
SELECT	nr_sequencia, 
	nr_seq_segurado, 
	vl_mensalidade	 
from	pls_mensalidade_segurado 
where	nr_seq_mensalidade	= nr_seq_mensalidade_w;		
 

BEGIN 
 
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then 
	select	count(*) 
	into STRICT	cont_w 
	from	pls_mensalidade b, 
		titulo_receber a 
	where	a.nr_seq_mensalidade	= b.nr_sequencia 
	and	b.nr_seq_lote		= nr_seq_lote_p;
 
	if (cont_w > 0) then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265554,'');
		--Já foram gerados títulos para este lote! 
	end if;
 
	select	cd_estabelecimento 
	into STRICT	cd_estabelecimento_w 
	from	pls_lote_mensalidade 
	where	nr_sequencia	= nr_seq_lote_p;
 
	select	max(nr_seq_conta_banco) 
	into STRICT	nr_seq_conta_banco_w 
	from	pls_parametros 
	where	cd_estabelecimento	= cd_estabelecimento_w;
 
	if (coalesce(nr_seq_conta_banco_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265556,'chr(13)='||chr(13));
		--É necessário ter uma conta bancária definida para geração dos bloquetos! || chr(13) || 
		--Verifique os parâmetros do plano de saúde! 
	end if;
 
	select	cd_tipo_portador, 
		cd_portador, 
		cd_tipo_taxa_juro, 
		cd_tipo_taxa_multa, 
		pr_juro_padrao, 
		pr_multa_padrao 
	into STRICT	cd_tipo_portador_w, 
		cd_portador_w, 
		cd_tipo_taxa_juro_par_w, 
		cd_tipo_taxa_multa_par_w, 
		pr_juro_padrao_par_w, 
		pr_multa_padrao_par_w 
	from	parametro_contas_receber 
	where	cd_estabelecimento	= cd_estabelecimento_w;
 
	if (coalesce(cd_tipo_portador_w::text, '') = '') or (coalesce(cd_portador_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(265558,'chr(13)='||chr(13));
		--É necessário ter um tipo de portador e portador padrões definidos! || chr(13) || 
		--Verifique os parâmetros do contas a receber! 
	end if;
 
	select	obter_moeda_padrao(cd_estabelecimento_w,'R') 
	into STRICT	cd_moeda_w 
	;
 
	open c01;
	loop 
	fetch c01 into 
		nr_seq_mensalidade_w, 
		nr_seq_pagador_w, 
		nr_seq_contrato_w, 
		vl_mensalidade_w, 
		dt_vencimento_w, 
		cd_pessoa_fisica_w, 
		cd_cgc_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		ds_observacao_w		:= '';
		ie_origem_titulo_w	:= '3';
		 
		begin 
		select	cd_tipo_taxa_juro, 
			pr_juro_padrao, 
			cd_tipo_taxa_multa, 
			pr_multa_padrao 
		into STRICT	cd_tipo_taxa_juros_w, 
			tx_juros_w, 
			cd_tipo_taxa_multa_w, 
			tx_multa_w 
		from	pls_parametros 
		where	cd_estabelecimento = cd_estabelecimento_w;
		exception 
			when no_data_found then 
			CALL wheb_mensagem_pck.exibir_mensagem_abort(265560,'');
			--Mensagem: Cadastro de juros e multa não informados nos parâmetros do Plano de Saúde! 
		end;
		 
		select	coalesce(max(a.nr_seq_reajuste),0) 
		into STRICT	nr_seq_reajuste_w 
		from	pls_mensalidade_seg_item a, 
			pls_mensalidade_segurado b 
		where	a.nr_seq_mensalidade_seg = b.nr_sequencia 
		and	b.nr_seq_mensalidade	= nr_seq_mensalidade_w;
		 
		select	pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'P'), 
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'IR'), 
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'DI'), 
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'DF'), 
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'OA'), 
			pls_obter_dados_lote_reajuste(nr_seq_reajuste_w,'PA') 
		into STRICT	tx_reajuste_w, 
			ie_indice_reajuste_w, 
			dt_periodo_inicial_w, 
			dt_periodo_final_w, 
			ds_oficio_ans_W, 
			nr_protocolo_ans_w 
		;
		 
		if (nr_seq_reajuste_w <> 0) then 
			ds_observacao_w := 'Reajuste de ' || tx_reajuste_w || '% conforme ' || 
					pls_obter_desc_indice_reaj(ie_indice_reajuste_w);
			if (ie_indice_reajuste_w = '1') then 
				ds_observacao_w := ds_observacao_w || ' sob ofício nr. ' || ds_oficio_ans_w || 
						', protocolo: ' || nr_protocolo_ans_w || ' para os contratos com data de aniversário entre ' || 
						obter_data_extenso(dt_periodo_inicial_w,1) || ' a ' || obter_data_extenso(dt_periodo_final_w,1) || '.';
			end if;
		end if;
			 
			 
		select	nextval('titulo_seq') 
		into STRICT	nr_titulo_w 
		;
		 
		insert	into	titulo_receber(nr_titulo, 
			cd_pessoa_fisica, 
			cd_cgc, 
			dt_atualizacao, 
			nm_usuario, 
			cd_estabelecimento, 
			dt_emissao, 
			dt_vencimento, 
			dt_pagamento_previsto, 
			vl_titulo, 
			vl_saldo_titulo, 
			vl_saldo_juros, 
			vl_saldo_multa, 
			cd_tipo_taxa_juro, 
			cd_tipo_taxa_multa, 
			cd_moeda, 
			tx_desc_antecipacao, 
			tx_juros, 
			tx_multa, 
			cd_tipo_portador, 
			cd_portador, 
			ie_tipo_inclusao, 
			ie_tipo_titulo, 
			ie_origem_titulo, 
			ie_tipo_emissao_titulo, 
			ie_situacao, 
			nr_lote_contabil, 
			nr_seq_mensalidade, 
			nr_seq_mens_segurado, 
			nr_seq_conta_banco, 
			ie_pls, 
			ds_observacao_titulo, 
			nm_usuario_orig, 
			dt_inclusao) 
		values (nr_titulo_w, 
			cd_pessoa_fisica_w, 
			cd_cgc_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_estabelecimento_w, 
			clock_timestamp(), 
			dt_vencimento_w, 
			dt_vencimento_w, 
			vl_mensalidade_w, 
			vl_mensalidade_w, 
			0, 
			0, 
			coalesce(cd_tipo_taxa_juros_w,cd_tipo_taxa_juro_par_w), 
			coalesce(cd_tipo_taxa_multa_w,cd_tipo_taxa_multa_par_w), 
			cd_moeda_w, 
			0, 
			coalesce(tx_juros_w,pr_juro_padrao_par_w), 
			coalesce(tx_multa_w,pr_multa_padrao_par_w), 
			cd_tipo_portador_w, 
			cd_portador_w, 
			'2', 
			'1', 
			coalesce(ie_origem_titulo_w,'9'), 
			2, 
			'1', 
			0, 
			nr_seq_mensalidade_w, 
			null, 
			nr_seq_conta_banco_w, 
			'S', 
			ds_observacao_w, 
			nm_usuario_p, 
			clock_timestamp());
			 
		CALL gerar_bloqueto_tit_rec(nr_titulo_w, 'OPSMS');						
	end loop;
	close c01;
 
	update	pls_lote_mensalidade 
	set	dt_geracao_titulos	= clock_timestamp() 
	where	nr_sequencia		= nr_seq_lote_p;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_titulos_lote_mens ( nr_seq_lote_p bigint, nm_usuario_p text) FROM PUBLIC;

