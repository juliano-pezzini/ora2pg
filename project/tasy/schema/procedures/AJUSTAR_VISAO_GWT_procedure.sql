-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE Atributo_Dado AS (	nm_atributo_w	varchar(255),
								QT_TAM_DELPHI_w	smallint,
								QT_DESLOC_DIREITA_w	smallint,
								qt_desloc_gwt_w		double precision,
								qt_tam_gwt_w		double precision,
								IE_COMPONENTE_w		varchar(10),
								ie_criar_descricao_w	varchar(10),
								IE_CRIAR_DESC_FK_w		varchar(10),
								QT_TAM_HTML_w			smallint);
CREATE TYPE Linha_Dado AS (		nr_linha_w	bigint,
								atributo_w	Atributo);


CREATE OR REPLACE PROCEDURE ajustar_visao_gwt ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE




QT_MAX_CAMPO_w	bigint;
nr_linha_w		bigint:= 0;
nr_indice_w		bigint;
nr_indice_ww		bigint;
ds_print_w			varchar(2000);
qt_tamanho_linha_w	bigint;
qt_tamanho_w		double precision;
nm_atributo_w		varchar(255);
qt_desloc_w			double precision;
nm_atributo_desc_w	varchar(255);
qt_diferenca_w		bigint;
nm_tabela_w			varchar(255);

nm_atributo_cd_w	varchar(255);
nm_atributo_ds_w	varchar(255);
nm_tabela_ref_w		varchar(255);
DS_VALORES_w		varchar(2000);
qt_reg_w			bigint;
QT_DESLOC_DIREITA_w	bigint;
IE_CRIAR_DESC_FK_w	varchar(10);
ds_mascara_w varchar(255);
type Atributo is table of Atributo_Dado index by integer;
type Linha is table of Linha_Dado index by integer;

vt_linha_w		Linha;




C01 CURSOR FOR
	SELECT	nm_atributo,
			coalesce(QT_TAM_DELPHI,QT_MAX_CAMPO_w)QT_TAM_DELPHI,
			QT_DESLOC_DIREITA,
			IE_COMPONENTE,
			ie_criar_descricao
	from	TABELA_VISAO_ATRIBUTO
	where	nr_sequencia	= nr_sequencia_p
	and ((CD_EXP_LABEL IS NOT NULL AND CD_EXP_LABEL::text <> '') or (ds_label IS NOT NULL AND ds_label::text <> ''))
	and		(IE_COMPONENTE IS NOT NULL AND IE_COMPONENTE::text <> '')
	and		(NR_SEQ_APRESENT IS NOT NULL AND NR_SEQ_APRESENT::text <> '')
	order by NR_SEQ_APRESENT;




c01_w	c01%rowtype;


C02 CURSOR FOR
	SELECT	nm_atributo
	from	tabela_atributo
	where	nm_tabela = nm_tabela_ref_w
	and		IE_TIPO_ATRIBUTO = 'VARCHAR2'
	and		substr(nm_atributo,1,4) <> 'NM_U'
	and (substr(nm_atributo,1,2)	= 'DS'  or substr(nm_atributo,1,2)	= 'NM')
	order by NR_SEQUENCIA_CRIACAO desc;


c03 CURSOR FOR
	SELECT	a.nm_atributo
	from	TABELA_VISAO_ATRIBUTO a
	where	a.nr_sequencia	= nr_sequencia_p
	and		upper(obter_tipo_atributo(nr_sequencia,nm_atributo)) = 'FUNCTION'
	and		trim(both upper(ds_valores)) = 'SUBSTR(NM_USUARIO,1,1)';



C04 CURSOR FOR
	SELECT 	a.nr_sequencia,
			a.nm_atributo,
			trim(both upper(a.ds_mascara)) ds_mascara,
			QT_TAM_GRID
	from 	tabela_visao_atributo a
	where 	a.nr_sequencia = nr_sequencia_p
	--and		substr(a.nm_atributo,1,2) = 'DT'
	and		(a.ds_mascara IS NOT NULL AND a.ds_mascara::text <> '');


C05 CURSOR FOR
	SELECT 	a.nr_sequencia,
			a.nm_atributo
	from 	tabela_visao_atributo a
	where 	a.nr_sequencia = nr_sequencia_p
	and		substr(a.nm_atributo,1,3) = 'DT_'
	and		(NR_SEQ_APRESENT IS NOT NULL AND NR_SEQ_APRESENT::text <> '')
	and		coalesce(a.ds_mascara::text, '') = '';


c04_w c04%rowtype;



	procedure incLinha is
	;
BEGIN
	nr_linha_w	:= nr_linha_w + 10;
	vt_linha_w[vt_linha_w.count+1].nr_linha_w	:= nr_linha_w;
	end;

	function calcularTamanhoGwt(	qt_tamanho_p	number) return;
	begin
	vl_retorno_w	:= (qt_tamanho_p * 12) / QT_MAX_CAMPO_w;

	return;

	end;

	function calcularTamanhoPixel(	qt_tamanho_p	number) return;
	nr_multiplo_w		Number(15,4)	:= 0;
	begin

	if	((trunc(qt_tamanho_p / qt_multiplo_w) * qt_multiplo_w) = qt_tamanho_p) then
		nr_multiplo_w	:= (qt_tamanho_p / qt_multiplo_w);
	else
		nr_multiplo_w   := trunc(qt_tamanho_p / qt_multiplo_w) + 1;
	end if;

	return;

	end;

begin



open c03;
loop
fetch c03 into
	nm_atributo_w;
EXIT WHEN NOT FOUND; /* apply on c03 */
	begin
		update	TABELA_VISAO_ATRIBUTO
		set		QT_TAM_DELPHI	 = NULL,
				NR_SEQ_APRESENT	 = NULL
		where	nr_sequencia = nr_sequencia_p
		and		nm_atributo	= nm_atributo_w;
	end;
end loop;
close c03;


update	TABELA_VISAO_ATRIBUTO
set		QT_TAM_GRID	= QT_TAM_DELPHI
where	nr_sequencia = nr_sequencia_p
and		(QT_TAM_DELPHI IS NOT NULL AND QT_TAM_DELPHI::text <> '')
and		coalesce(QT_TAM_GRID::text, '') = '';


open c04;
loop
fetch c04 into
 c04_w;
EXIT WHEN NOT FOUND; /* apply on c04 */
 begin

 ds_mascara_w := Obter_Mascara_Convertida(c04_w.ds_mascara,c04_w.nm_atributo);

 if (ds_mascara_w IS NOT NULL AND ds_mascara_w::text <> '') then
  update tabela_visao_atributo
  set  ds_mascara = ds_mascara_w,
    dt_atualizacao = clock_timestamp()
  where nm_atributo = c04_w.nm_atributo
  and  nr_sequencia = c04_w.nr_sequencia;
 end if;

 end;
end loop;
close c04;


for r_c05 in c05 loop
	begin

	update 	tabela_visao_atributo
	set		dt_atualizacao = clock_timestamp(),
			ds_mascara	= 'date(timestamp)'
	where 	nm_atributo = r_c05.nm_atributo
	and  	nr_sequencia = r_c05.nr_sequencia;
	end;
end loop;


commit;

select	coalesce(max(QT_MAX_CAMPO),0),
		max(nm_tabela)
into STRICT	QT_MAX_CAMPO_w,
		nm_tabela_w
from	TABELA_VISAO
where	nr_sequencia = nr_sequencia_p;


update	tabela_visao_atributo
set		ie_componente	= 'loc',
		dt_atualizacao = clock_timestamp()
where	nr_sequencia	= nr_sequencia_p
and		ie_componente	= 'de'
and		(NR_SEQ_LOCALIZADOR IS NOT NULL AND NR_SEQ_LOCALIZADOR::text <> '');


if (QT_MAX_CAMPO_w	= 0) then
	QT_MAX_CAMPO_w	:= 350;
end if;

qt_reg_w	:= 0;

open C01;
loop
fetch C01 into
	c01_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	qt_tamanho_w	:= c01_w.QT_TAM_DELPHI;
	qt_reg_w		:= qt_reg_w +1;
	if (qt_tamanho_w	> QT_MAX_CAMPO_w) then
		qt_tamanho_w	:= QT_MAX_CAMPO_w;

	end if;
	QT_DESLOC_DIREITA_w	:= c01_w.QT_DESLOC_DIREITA;

	if (QT_DESLOC_DIREITA_w IS NOT NULL AND QT_DESLOC_DIREITA_w::text <> '') and (qt_reg_w	= 1) then
		QT_DESLOC_DIREITA_w	:= null;
	end if;

	if (coalesce(QT_DESLOC_DIREITA_w::text, '') = '') then
		incLinha;
	end if;
	nr_indice_w				:= vt_linha_w[vt_linha_w.count].atributo_w.count + 1;
	vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).nm_atributo_w			:= c01_w.nm_atributo;
	vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).QT_DESLOC_DIREITA_w	:= QT_DESLOC_DIREITA_w;
	vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).QT_TAM_DELPHI_w		:= qt_tamanho_w;
	vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).IE_COMPONENTE_w		:= c01_w.IE_COMPONENTE;
	vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).ie_criar_descricao_w	:= c01_w.ie_criar_descricao;

	select	max(IE_CRIAR_DESC_FK)
	into STRICT	IE_CRIAR_DESC_FK_w
	from	tabela_atributo
	where	nm_tabela	= nm_tabela_w
	and		nm_atributo	= c01_w.nm_atributo;

	vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).IE_CRIAR_DESC_FK_w	:= IE_CRIAR_DESC_FK_w;

	if (c01_w.QT_DESLOC_DIREITA IS NOT NULL AND c01_w.QT_DESLOC_DIREITA::text <> '') then
		vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).qt_desloc_gwt_w	:= calcularTamanhoGwt(c01_w.QT_DESLOC_DIREITA);
	end if;

	vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).qt_tam_gwt_w	:= calcularTamanhoGwt(qt_tamanho_w);

	if (qt_tamanho_w	>= QT_MAX_CAMPO_w) then
		vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).QT_TAM_HTML_w	:= null;
	else
		vt_linha_w[vt_linha_w.count].atributo_w(nr_indice_w).QT_TAM_HTML_w	:= calcularTamanhoPixel(qt_tamanho_w);
	end if;


	end;
end loop;
close C01;





for i in 1..vt_linha_w.count loop
	begin

	nr_indice_w	:= i;


	qt_tamanho_linha_w	:= 0;
	qt_tamanho_w		:= 0;
	qt_desloc_w			:= 0;
	nm_atributo_desc_w	:= '';
	nm_atributo_w		:= '';
	for j in 1..vt_linha_w[nr_indice_w].atributo_w.count loop
		begin
		nr_indice_ww	:= j;


		update	TABELA_VISAO_ATRIBUTO
		set		QT_TAM_DELPHI	= ROUND(vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).qt_tam_gwt_w),
				QT_DESLOC_DIREITA	= ROUND( vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).qt_desloc_gwt_w),
				NR_LINHA	= vt_linha_w[nr_indice_w].nr_linha_w,
				QT_TAM_HTML	= vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).QT_TAM_HTML_w
		where	nr_sequencia = nr_sequencia_p
		and		nm_atributo	= vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).nm_atributo_w;

		if (qt_tamanho_w	< vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).qt_tam_gwt_w) then
			qt_tamanho_w	:= vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).qt_tam_gwt_w;
			nm_atributo_w	:= vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).nm_atributo_w;
		end if;

		if (qt_desloc_w	< vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).qt_desloc_gwt_w) then
			qt_desloc_w	:= vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).qt_desloc_gwt_w;
			nm_atributo_desc_w	:= vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).nm_atributo_w;
		end if;

		qt_tamanho_linha_w	:=qt_tamanho_linha_w + coalesce(ROUND(vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).qt_tam_gwt_w),0) +
							coalesce(ROUND( vt_linha_w[nr_indice_w].atributo_w(nr_indice_ww).qt_desloc_gwt_w),0);

		/*
		if	(vt_linha_w(nr_indice_w).atributo_w(nr_indice_ww).IE_COMPONENTE_W = 'de') and
			((vt_linha_w(nr_indice_w).atributo_w(nr_indice_ww).ie_criar_descricao_w = 'S') or
				(vt_linha_w(nr_indice_w).atributo_w(nr_indice_ww).IE_CRIAR_DESC_FK_w	= 'S')) then


			begin

			SELECT 	nm_atributo_cd_p,
					nm_atributo_ds_p,
					nm_tabela_ref_p
			into	nm_atributo_cd_w,
					nm_atributo_ds_w,
					nm_tabela_ref_w
			FROM 	TABLE(Obter_Atributo_Lookup2(nm_tabela_w, vt_linha_w(nr_indice_w).atributo_w(nr_indice_ww).nm_atributo_w));
			exception
			when others then
				nm_atributo_cd_w	:= null;


			end;

			if	(trim(upper(nm_atributo_cd_w)) = 'CD') then
				nm_atributo_cd_w:= null;
				nm_atributo_ds_w:= null;
			end if;


			if	(nm_atributo_cd_w is null) and
				(nm_atributo_ds_w is null) and
				(nm_tabela_ref_w is not null) then

				select	count(1)
				into	qt_reg_w
				from	INDICE a,
						INDICE_ATRIBUTO b
				where	a.NM_INDICE = b.NM_INDICE
				and		a.IE_TIPO = 'PK'
				and		a.nm_tabela = nm_tabela_ref_w;

				if	(qt_reg_w	= 1) then

					select	max(b.NM_ATRIBUTO)
					into	nm_atributo_cd_w
					from	INDICE a,
							INDICE_ATRIBUTO b
					where	a.NM_INDICE = b.NM_INDICE
					and		a.IE_TIPO = 'PK'
					and		a.nm_tabela = nm_tabela_ref_w;

					open C02;
					loop
					fetch C02 into
						nm_atributo_ds_w;
					exit when C02%notfound;
					end loop;
					close C02;


				end if;

			end if;



			if	(nm_atributo_cd_w	is not null) and
				(nm_atributo_ds_w	is not null) and
				(nm_tabela_ref_w <> 'PROCEDIMENTO') and
				(nm_tabela_ref_w <> 'ATENDIMENTO_PACIENTE') then

				DS_VALORES_w	:= nm_atributo_cd_w||';'||nm_atributo_ds_w||';'||nm_tabela_ref_w||';; and 1 = 1';

				update	TABELA_VISAO_ATRIBUTO
				set		DS_VALORES	= DS_VALORES_w,
						ie_componente = 'atc'
				where	nr_sequencia = nr_sequencia_p
				and		nm_atributo	= vt_linha_w(nr_indice_w).atributo_w(nr_indice_ww).nm_atributo_w;

				if	(vt_linha_w(nr_indice_w).atributo_w.count = 1) then
					update	TABELA_VISAO_ATRIBUTO
					set		QT_TAM_DELPHI = 12
					where	nr_sequencia = nr_sequencia_p
					and		nm_atributo	= vt_linha_w(nr_indice_w).atributo_w(nr_indice_ww).nm_atributo_w;
					qt_tamanho_linha_w	:= 12;
				end if;

			end if;




		end if;
		*/
		end;
	end loop;



	if (qt_tamanho_linha_w	> 12) then
		qt_diferenca_w	:= qt_tamanho_linha_w - 12;

		if (qt_desloc_w	> 0) and (qt_diferenca_w	<qt_desloc_w) and (nm_atributo_desc_w IS NOT NULL AND nm_atributo_desc_w::text <> '') then
			update	TABELA_VISAO_ATRIBUTO
			set		QT_DESLOC_DIREITA	= QT_DESLOC_DIREITA - qt_diferenca_w
			where	nr_sequencia = nr_sequencia_p
			and		nm_atributo	= nm_atributo_desc_w;
		elsif (qt_tamanho_w > 0) and (qt_diferenca_w	< qt_tamanho_w) and (nm_atributo_w IS NOT NULL AND nm_atributo_w::text <> '') then

			update	TABELA_VISAO_ATRIBUTO
			set		QT_TAM_DELPHI	= QT_TAM_DELPHI - qt_diferenca_w
			where	nr_sequencia = nr_sequencia_p
			and		nm_atributo	= nm_atributo_w;

		end if;
	elsif (qt_tamanho_linha_w	< 12) then
		qt_diferenca_w	:= 12 - qt_tamanho_linha_w;

		update	TABELA_VISAO_ATRIBUTO
		set		QT_DESLOC_DIREITA	= QT_DESLOC_DIREITA + qt_diferenca_w
		where	nr_sequencia = nr_sequencia_p
		and		nm_atributo	= nm_atributo_desc_w;



	end if;


	end;
end loop;

update	tabela_visao_atributo
set  	QT_TAM_GRID	= least(QT_TAM_GRID + trunc(QT_TAM_GRID * 0.30), 999),
	dt_atualizacao = clock_timestamp()
where	nr_sequencia = nr_sequencia_p
and	(QT_TAM_GRID IS NOT NULL AND QT_TAM_GRID::text <> '');

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ajustar_visao_gwt ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

