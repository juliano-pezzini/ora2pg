-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS ( nm_sinal_vital      varchar(100),
					vl_sinal_vital      varchar(100),
					nm_codigo           varchar(100),
					ds_unidade_medida   varchar(100),
					ds_lista            varchar(255));


CREATE OR REPLACE PROCEDURE gerar_sinal_vital_ihe ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, ie_integracao_extra_p text) AS $body$
DECLARE


TYPE Vetor IS TABLE OF campos INDEX BY integer;
Vetor_w	                Vetor;

nr_atendimento_w           bigint;
dt_sinal_vital_w           timestamp;
nr_seq_sinal_vital_w       bigint      := 0;
ds_parametros_w            varchar(32000);
indice                     integer;
ds_lista_aux_w             varchar(255);
ds_sep_bv_w                varchar(30)    := obter_separador_bv;
nr_seq_monit_resp_w        bigint      := 0;
nr_seq_monit_hemo_w        bigint      := 0;
ds_erro_w                  varchar(4000);
cd_estabelecimento_w       bigint;
nr_cirurgia_w              bigint;
nr_seq_pepo_w              bigint;
obx_code_system_w         varchar(4000);
obx_name_system_w 	       varchar(4000);
nm_tabela_w                varchar(100);
nm_atributo_w			   varchar(100);
--novo
qt_minutos_w                bigint;
qt_min_philips_w            bigint;
ie_rpa_w                    varchar(1);
cd_setor_atendimento_w	    integer;
ie_tipo_horario_w           char(1);
ie_controlar_data_apap_w    char(1);
hora_sv_w                   bigint;
ie_tem_sv_periodo_w         char(1);
ie_integracao_extra_w		varchar(1) := 'N';
ie_horario_real_w           char(1) := 'R';
qt_setor_integrado_w        bigint;
ie_horario_par_w            char(1) := 'P';
ie_horario_aceito_w         char(1) := 'S';
ie_horario_impar_w          char(1) := 'I';
ie_horario_ambos_w          char(1) := 'A';
ie_tem_regra_minuto_sv_w    varchar(1);
ie_integrar_regra_min_w     char(1) := 'N';
seq_min_philips_w       	bigint	:= null;
ds_atributos_regra_min_w    varchar(4000);
ie_horario_apap_w           char(1) := 'A';
ie_consiste_aperiodico_w    char(1) := 'N';
ie_exige_aprovacao_w        varchar(2);
ExigeAprovacaoNao           varchar(2) := 'N';
ExigeAprovacaoSim           varchar(2) := 'S';
ExigeAprovacaoForaFaixa     varchar(2) := 'C';
ds_retorno_valida_sv_w      varchar(2000) := '';
ie_retorno_valida_sv_w      varchar(10)   := '';
nls_numeric_characters_w    varchar(50);
output_sql_dinam            smallint	:= 0;
avoid_loop                  smallint;
replaced_param              smallint;
first_param                 varchar(1);
second_param                varchar(1);
executarByClassifLeito      varchar(10);
qt_min_periodico_w          bigint;
qt_min_aperiodico_w         bigint;
qt_percentual_tolerancia_w  bigint;
ie_tem_regra_shift_f11_w    varchar(1);


c01 CURSOR(p_estabelecimento_w bigint) FOR
SELECT nm_tabela,		
	   obx_code_system,
		   obx_name_system,		       
	   nm_atributo
FROM   hl7_interface_devices
WHERE  cd_estabelecimento = p_estabelecimento_w
  AND    ie_situacao = 'A';

PROCEDURE inserir_sv IS;
BEGIN
IF (nr_seq_sinal_vital_w	= 0) THEN

	SELECT	nextval('atendimento_sinal_vital_seq')
	INTO STRICT	nr_seq_sinal_vital_w
	;

	INSERT INTO atendimento_sinal_vital(	nr_sequencia,
						nr_atendimento,
						dt_sinal_vital,
						dt_atualizacao,
						nm_usuario,
						CD_PESSOA_FISICA,
						ie_importado,
						ie_situacao,
						nr_cirurgia,
						nr_seq_pepo,
						nm_usuario_nrec,
						ie_integracao)
			VALUES (	nr_seq_sinal_vital_w,
						nr_atendimento_w,
						dt_sinal_vital_w,
						clock_timestamp(),
						nm_usuario_p,
						NULL,
						'S',
						'A',
						nr_cirurgia_w,
						nr_seq_pepo_w,
						nm_usuario_p,
						'S');
END IF;
END;

PROCEDURE inserir_resp IS
BEGIN
IF (nr_seq_monit_resp_w	= 0) THEN

	SELECT	nextval('atendimento_monit_resp_seq')
	INTO STRICT	nr_seq_monit_resp_w
	;

	INSERT INTO ATENDIMENTO_MONIT_RESP(	nr_sequencia,
						nr_atendimento,
						DT_MONITORIZACAO,
						dt_atualizacao,
						nm_usuario,
						CD_PESSOA_FISICA,
						dt_liberacao,
						ie_importado,
						ie_situacao,
						nr_cirurgia,
						nr_seq_pepo,
						ie_integracao)
			VALUES (	nr_seq_monit_resp_w,
						nr_atendimento_w,
						dt_sinal_vital_w,
						clock_timestamp(),
						nm_usuario_p,
						NULL,
						clock_timestamp(),
						'S',
						'A',
						nr_cirurgia_w,
						nr_seq_pepo_w,
						'S');
END IF;
END;

PROCEDURE inserir_hemo IS
BEGIN
IF (nr_seq_monit_hemo_w	= 0) THEN

	SELECT	nextval('atend_monit_hemod_seq')
	INTO STRICT	nr_seq_monit_hemo_w
	;

	INSERT INTO ATEND_MONIT_HEMOD(	nr_sequencia,
						nr_atendimento,
						DT_MONITORACAO,
						dt_atualizacao,
						nm_usuario,
						CD_PESSOA_FISICA,
						dt_liberacao,
						ie_importado,
						ie_situacao,
						nr_cirurgia,
						nr_seq_pepo,
						ie_integracao)
			VALUES (	nr_seq_monit_hemo_w,
						nr_atendimento_w,
						dt_sinal_vital_w,
						clock_timestamp(),
						nm_usuario_p,
						NULL,
						clock_timestamp(),
						'S',
						'A',
						nr_cirurgia_w,
						nr_seq_pepo_w,
						'S');
END IF;
END;

PROCEDURE exec_sql_dinamico_with_excep(
	nm_usuario_e in varchar2,
	ds_comando_e in VARCHAR2, 
	ds_parametros_e in varchar2, 
	nm_atributo_e in VARCHAR2, 
	saida_e in out number, 
	avoid_loop_e in out number, 
	first_param_e in out varchar2,  
	second_param_e in out varchar2,
	replaced in out number
) IS

BEGIN
	CALL Exec_sql_Dinamico_bv(nm_usuario_e,ds_comando_e,ds_parametros_e);
	saida_e := 0;
	exception when others then
		avoid_loop_e := avoid_loop_e + 1;
		if (avoid_loop_e <= 1) AND (replaced = 1) then
		  first_param_e := '.'; second_param_e := ',';
		  saida_e := 1;
		else
		  saida_e := 0;
		end if;
END;


PROCEDURE atualizar_valor_sv(	nm_tabela_p	VARCHAR2,
				nm_atributo_p	VARCHAR2,
				vl_parametro_p	VARCHAR2,
				vl_unidade_complementar_p	VARCHAR2) IS
ds_comando_w	VARCHAR2(2000);
ds_parametros_w	VARCHAR2(2000);
vl_parametro_w	VARCHAR2(2000);
vl_unidade_complementar_w VARCHAR2(2000);
BEGIN
				  
IF (vl_unidade_complementar_p IS NOT NULL AND vl_unidade_complementar_p::text <> '') THEN

vl_unidade_complementar_w := vl_unidade_complementar_p;

ds_comando_w	:= 	'	update	'||nm_tabela_p	||
			'	set	'||nm_atributo_p||' = :vl_unidade_complementar'||
			'	where	nr_sequencia	= :nr_sequencia ';

ELSE
ds_comando_w	:= 	'	update	'||nm_tabela_p	||
			'	set	'||nm_atributo_p||' = :vl_parametro'||
			'	where	nr_sequencia	= :nr_sequencia ';

END IF;

first_param := ',';
second_param := '.';
avoid_loop := 0;
replaced_param := 0;

<<error_exec_sql>>

vl_parametro_w	:= vl_parametro_p;
IF	((SUBSTR(nm_atributo_p,1,2)	= 'QT') OR (SUBSTR(nm_atributo_p,1,2)	= 'PR') OR (SUBSTR(nm_atributo_p,1,2)	= 'VL') OR (SUBSTR(nm_atributo_p,1,2)	= 'TX')) THEN
		begin
		replaced_param := 1;
		vl_parametro_w	:= REPLACE(vl_parametro_w,first_param,second_param);
		exception when others then	
			vl_parametro_w := vl_parametro_w;
		end;
END IF;



IF (nm_tabela_p	= 'ATENDIMENTO_SINAL_VITAL') AND (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') AND (LOWER(vl_parametro_p)	<> 'null')THEN
	if (avoid_loop = 0) then
		inserir_sv;
	end if;
	IF (vl_unidade_complementar_w IS NOT NULL AND vl_unidade_complementar_w::text <> '') THEN
	ds_parametros_w:=	'vl_unidade_complementar='||vl_unidade_complementar_w||ds_sep_bv_w||
				'nr_sequencia='||nr_seq_sinal_vital_w||ds_sep_bv_w;
	ELSE
	ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
				'nr_sequencia='||nr_seq_sinal_vital_w||ds_sep_bv_w;
	END IF;
exec_sql_dinamico_with_excep(nm_usuario_p, ds_comando_w, ds_parametros_w, nm_atributo_p, output_sql_dinam, avoid_loop, first_param, second_param, replaced_param);
	if (output_sql_dinam = 1) then
	  GOTO error_exec_sql;
	end if;
ELSIF (nm_tabela_p	= 'ATENDIMENTO_MONIT_RESP') AND (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') AND (LOWER(vl_parametro_p)	<> 'null')THEN
	inserir_resp;
	ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
				'nr_sequencia='||nr_seq_monit_resp_w||ds_sep_bv_w;

exec_sql_dinamico_with_excep(nm_usuario_p, ds_comando_w, ds_parametros_w, nm_atributo_p, output_sql_dinam, avoid_loop, first_param, second_param, replaced_param);
	if (output_sql_dinam = 1) then
	  GOTO error_exec_sql;
	end if;
ELSIF (nm_tabela_p	= 'ATEND_MONIT_HEMOD') AND (vl_parametro_p IS NOT NULL AND vl_parametro_p::text <> '') AND (LOWER(vl_parametro_p)	<> 'null')THEN
	inserir_hemo;
	ds_parametros_w:=	'vl_parametro='||vl_parametro_w||ds_sep_bv_w||
				'nr_sequencia='||nr_seq_monit_hemo_w||ds_sep_bv_w;

exec_sql_dinamico_with_excep(nm_usuario_p, ds_comando_w, ds_parametros_w, nm_atributo_p, output_sql_dinam, avoid_loop, first_param, second_param, replaced_param);
	if (output_sql_dinam = 1) then
	  GOTO error_exec_sql;
	end if;

END IF;

END;
BEGIN

BEGIN
dt_sinal_vital_w := TO_DATE(dt_sinal_vital_p, 'yyyymmddhh24miss');
EXCEPTION
WHEN OTHERS THEN
dt_sinal_vital_w	:=  clock_timestamp();
END;

IF (ie_integracao_extra_p IS NOT NULL AND ie_integracao_extra_p::text <> '') THEN

ie_integracao_extra_w := ie_integracao_extra_p;

END IF;

IF (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') THEN
                          
SELECT 	MAX(nr_atendimento)
INTO STRICT 	nr_atendimento_w
FROM 	atendimento_paciente
WHERE 	cd_pessoa_fisica  = cd_pessoa_fisica_p
AND	  (nm_usuario IS NOT NULL AND nm_usuario::text <> '')
AND 	coalesce(dt_alta::text, '') = '';

select obter_regra_classif_pac_leito(nr_atendimento_w, dt_sinal_vital_w) into STRICT executarByClassifLeito;

if (executarByClassifLeito = 'S') then

SELECT	MAX(nr_cirurgia),
	MAX(nr_seq_pepo)
INTO STRICT	nr_cirurgia_w,
	    nr_seq_pepo_w
FROM	cirurgia
WHERE	nr_atendimento = nr_atendimento_w
AND		dt_sinal_vital_w BETWEEN dt_inicio_real AND coalesce(dt_termino, dt_sinal_vital_w);

IF (coalesce(nr_cirurgia_w::text, '') = '') AND (coalesce(nr_seq_pepo_w::text, '') = '') THEN
SELECT	MAX(nr_cirurgia),
		MAX(nr_seq_pepo)
INTO STRICT	nr_cirurgia_w,
		nr_seq_pepo_w
FROM	atend_paciente_unidade
WHERE	nr_atendimento = nr_atendimento_w
AND		dt_sinal_vital_w BETWEEN dt_entrada_unidade AND coalesce(dt_saida_unidade, dt_sinal_vital_w);
END IF;

ds_parametros_w    := ds_lista_parametros_p||ds_lista_parametros2_p;
ds_parametros_w	   := REPLACE(ds_parametros_w,'null','');
indice	:= 0;

WHILE(LENGTH(ds_parametros_w) > 0) LOOP
BEGIN
indice	:= indice+1;
IF (position(';' in ds_parametros_w)	>0)  THEN
	Vetor_w[indice].ds_lista	:= SUBSTR(ds_parametros_w,1,position(';' in ds_parametros_w)-1 );
	ds_parametros_w	:= SUBSTR(ds_parametros_w,position(';' in ds_parametros_w)+1,40000);

ELSE
	Vetor_w[indice].ds_lista	:=SUBSTR(ds_parametros_w,1,LENGTH(ds_parametros_w) - 1);
	ds_parametros_w	:= NULL;
END IF;

END;
END LOOP;

RAISE NOTICE '%', Vetor_w.COUNT;


FOR j IN 1..Vetor_w.COUNT LOOP
BEGIN

ds_lista_aux_w	:= Vetor_w[j].ds_lista;
--nm_codigo
Vetor_w[j].nm_codigo	:= SUBSTR(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );	
ds_lista_aux_w	:= SUBSTR(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
--nm_sinal_vital
Vetor_w[j].nm_sinal_vital	:= SUBSTR(ds_lista_aux_w,1,position('#@#@' in ds_lista_aux_w)- 1 );
ds_lista_aux_w	:= SUBSTR(ds_lista_aux_w,position('#@#@' in ds_lista_aux_w)+4,40000);
--vl_sinal_vital
Vetor_w[j].vl_sinal_vital	:= SUBSTR(ds_lista_aux_w,1,4000 );

END;
END LOOP;

SELECT	coalesce(MAX(cd_estabelecimento),1)
INTO STRICT	cd_estabelecimento_w
FROM	atendimento_paciente
WHERE	nr_atendimento	= nr_atendimento_w;

if (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then

--Verificar quantidade de minutos a partir dos parametros_medicos
select	coalesce(max(QT_MIN_PHILIPS),120)
into STRICT	qt_minutos_w
from	parametro_medico
where	cd_estabelecimento = cd_estabelecimento_w;

cd_setor_atendimento_w := obter_setor_atendimento(nr_atendimento_w);

--Verificar quantidade de minutos a partir dos parametros do Setor
select  coalesce(MAX(qt_min_philips),0),
		coalesce(max(ie_rpa),'N')
into STRICT	qt_min_philips_w,
		ie_rpa_w
from	setor_atendimento
where	cd_setor_atendimento = cd_setor_atendimento_w;

--Validar as quantidades de minutos e selecionar a do Setor (philips) caso o parametro Medico seja <= 0
if (qt_min_philips_w > 0) then
	qt_minutos_w := qt_min_philips_w;	
end if;

 --Trazer informacoes de min Periadico/aperiodico e se possui regra do Shift F11
select  coalesce(max(qt_min_periodico_w), qt_minutos_w)             qt_min_periodico_w,
        coalesce(max(qt_min_aperiodico_w), qt_minutos_w)            qt_min_aperiodico_w,
        coalesce(max(ie_tem_regra_shift_F11_w), 'N')                ie_tem_regra_shift_F11_w,
        coalesce(max(qt_percentual_tolerancia_w), 0)                qt_percentual_tolerancia_w,
        coalesce(max(ie_tipo_horario_w), 'A')                       ie_tipo_horario_w,
        coalesce(max(ie_controlar_data_apap_w), ie_horario_real_w)  ie_controlar_data_apap_w
  into STRICT qt_min_periodico_w,
       qt_min_aperiodico_w,      
       ie_tem_regra_shift_F11_w,
       qt_percentual_tolerancia_w,
       ie_tipo_horario_w,
       ie_controlar_data_apap_w
from ( 
        SELECT  max(qt_min_philips)                     qt_min_periodico_w,
                max(qt_min_philips_ap)                  qt_min_aperiodico_w,               
                max('S')                                ie_tem_regra_shift_F11_w,
                max(qt_percentual_tolerancia)           qt_percentual_tolerancia_w,
                max(ie_horario_par_impar)               ie_tipo_horario_w,
                max(ie_tipo_horario)                    ie_controlar_data_apap_w
        from    sv_integracao_philips
        where   cd_estabelecimento   = cd_estabelecimento_w
        and     cd_setor_atendimento = cd_setor_atendimento_w
        and     (cd_setor_atendimento IS NOT NULL AND cd_setor_atendimento::text <> '')
        
union all

        SELECT  max(qt_min_philips)                     qt_min_periodico_w,
                max(qt_min_philips_ap)                  qt_min_aperiodico_w,
                max('S')                                ie_tem_regra_shift_F11_w,
                max(qt_percentual_tolerancia)           qt_percentual_tolerancia_w,
                max(ie_horario_par_impar)               ie_tipo_horario_w,
                max(ie_tipo_horario)                    ie_controlar_data_apap_w
        from    sv_integracao_philips
        where   cd_estabelecimento   = cd_estabelecimento_w
        and     coalesce(cd_setor_atendimento::text, '') = ''
        and     not exists (
          select 1
          from    sv_integracao_philips
          where   cd_estabelecimento   = cd_estabelecimento_w
          and     cd_setor_atendimento = cd_setor_atendimento_w
        )         
    ) x;

-- Horario Real ou Horario APAP    
if (ie_controlar_data_apap_w = ie_horario_apap_w) then
hora_sv_w	:= to_char(round(dt_sinal_vital_w, 'HH'),'hh24');
else
hora_sv_w	:= to_char(trunc(dt_sinal_vital_w, 'HH'),'hh24');
end if;

if (ie_integracao_extra_p = 'S' and ie_tem_regra_shift_F11_w = 'S') then
qt_minutos_w := qt_min_aperiodico_w;
if (qt_percentual_tolerancia_w > 0) then
	qt_minutos_w := qt_min_aperiodico_w - ((qt_min_aperiodico_w*qt_percentual_tolerancia_w)/100);
end if;
ie_consiste_aperiodico_w := 'S';
end if;

if (ie_integracao_extra_p = 'N' and ie_tem_regra_shift_F11_w = 'S') then
qt_minutos_w := qt_min_periodico_w;
end if;
		ie_tem_sv_periodo_w := 'N';
		
if (ie_integracao_extra_w = 'S' and ie_consiste_aperiodico_w = 'S') or (ie_integracao_extra_w <> 'S')  then

	if (ie_controlar_data_apap_w = ie_horario_real_w) then
		select	coalesce(max('S'), 'N')
		into STRICT	ie_tem_sv_periodo_w
		from	atendimento_sinal_vital a
		where	a.nr_atendimento	= nr_atendimento_w
		and	    coalesce(a.dt_inativacao::text, '') = ''
		and	    a.dt_sinal_vital between dt_sinal_vital_w - (1/24/60)* qt_minutos_w and dt_sinal_vital_w
		and	    a.nm_usuario_nrec = nm_usuario_p
		and	    coalesce(a.ie_integracao_extra,'N') = ie_integracao_extra_w
		and	    coalesce(a.ie_integracao_mentor,'N') = 'N';		

	else
			
		select  coalesce(max('S'), 'N')
		into STRICT	ie_tem_sv_periodo_w
		from	atendimento_sinal_vital a
		where	a.nr_atendimento	= nr_atendimento_w
		and	    coalesce(a.dt_inativacao::text, '') = ''
		and	    a.dt_referencia between round(dt_sinal_vital_w, 'HH') - (1/24/60)* qt_minutos_w and trunc(dt_sinal_vital_w, 'HH') + interval '1' hour
		and	    a.nm_usuario_nrec = nm_usuario_p
		and	    coalesce(a.ie_integracao_extra,'N') = ie_integracao_extra_w
		and	    coalesce(a.ie_integracao_mentor,'N') = 'N';

	end if;
end if;
		
-- Criado consistencia para verificar se o paciente se encontra em um setor/leito monitorado.
select	count(*)
into STRICT	qt_setor_integrado_w	
from	atend_paciente_unidade a,
		unidade_atendimento b
where	a.nr_atendimento = nr_atendimento_w
and		a.cd_setor_atendimento = b.cd_setor_atendimento
and		a.cd_unidade_basica = b.cd_unidade_basica
and		coalesce(b.ie_leito_monitorado,'N') = 'S'
and		dt_sinal_vital_w between a.dt_entrada_unidade and coalesce(a.dt_saida_unidade, dt_sinal_vital_w);

case ie_tipo_horario_w
	when ie_horario_par_w then
		if mod(hora_sv_w, 2) = 0 then 
			ie_horario_aceito_w :=  'S';
		else
			ie_horario_aceito_w :=  'N';
		end if;

	when ie_horario_impar_w then
		if mod(hora_sv_w, 2) <> 0 then 
			ie_horario_aceito_w :=  'S';
		else
			ie_horario_aceito_w :=  'N';
		end if;

	when ie_horario_ambos_w then
		ie_horario_aceito_w := 'S';
	else
	ie_horario_aceito_w :=  'S';
end case;

--- SHIFT+F11 - Regra intervalo sinal vital
if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (qt_setor_integrado_w > 0) and (ie_tem_sv_periodo_w = 'S') then
		
		select coalesce(max('S'), 'N')
		into STRICT   ie_tem_regra_minuto_sv_w 
		from   lib_itens_sv_philips  a,
			sv_integracao_philips b
		where  b.nr_sequencia           = a.nr_seq_regra
		and    b.cd_estabelecimento     = cd_estabelecimento_w
		and    b.cd_setor_atendimento   = cd_setor_atendimento_w
		and    a.ie_situacao = 'A'
		and exists (  SELECT x.nr_sequencia 
			from   lib_itens_regra_sv x
			where  x.nr_seq_regra_tempo =  a.nr_sequencia
			);
		
		if (ie_tem_regra_minuto_sv_w = 'S') then
			
			select  coalesce(max('S'), 'N'),
					max(a.nr_sequencia),
					rtrim(xmlagg(XMLELEMENT(name e, pep_obter_info_ssvs_hl7(b.cd_integracao, 'A')||',')).extract('//text()'),',') 
			into STRICT    ie_integrar_regra_min_w,
					seq_min_philips_w,
					ds_atributos_regra_min_w
			from    lib_itens_sv_philips     a, 
					lib_itens_regra_sv       b,
					sv_integracao_philips    c  
			where   b.nr_seq_regra_tempo = a.nr_sequencia
			and     a.nr_seq_regra       = c.nr_sequencia
			and     coalesce(c.cd_estabelecimento, cd_estabelecimento_w)         = cd_estabelecimento_w
			and     coalesce(c.cd_setor_atendimento, cd_setor_atendimento_w)     = cd_setor_atendimento_w
			and     a.ie_situacao = 'A'            
			and     not exists
					(         
						SELECT	x.nr_atendimento
						from	atendimento_sinal_vital x
						where	x.nr_atendimento    = nr_atendimento_w
						and	    coalesce(x.dt_inativacao::text, '') = ''
						and	    x.dt_sinal_vital between dt_sinal_vital_w - ((1/24/60)* a.qt_min_item_philips) and dt_sinal_vital_w
						and	    x.nm_usuario_nrec = nm_usuario_p
						and	    coalesce(x.ie_integracao_regra, 'N') = 'S'
						and     x.nr_seq_min_philips = a.nr_sequencia
					);
		
		end if;
end if;

end if;

if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') and (qt_setor_integrado_w > 0) and (ie_horario_aceito_w = 'S') and (ie_tem_sv_periodo_w <> 'S' OR ie_integrar_regra_min_w  = 'S') then

OPEN c01(cd_estabelecimento_w);
	LOOP
	FETCH c01 INTO
		nm_tabela_w,			
		obx_code_system_w,
		obx_name_system_w,
		nm_atributo_w;
		
	EXIT WHEN NOT FOUND; /* apply on c01 */

	IF (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') THEN							
		FOR i IN 1..Vetor_w.COUNT LOOP
		BEGIN
			IF (Vetor_w[i].nm_sinal_vital = obx_name_system_w AND Vetor_w[i].nm_codigo = obx_code_system_w ) THEN
				atualizar_valor_sv(nm_tabela_w,nm_atributo_w,Vetor_w[i].vl_sinal_vital,null);
			END IF;
		END;
		END LOOP;		
				

	END IF;
END LOOP;

CLOSE c01;
end if;

if (coalesce(nr_seq_sinal_vital_w,0) > 0) then
begin
ie_exige_aprovacao_w := obter_param_usuario(281, 1493, 0, nm_usuario_p, cd_estabelecimento_w, ie_exige_aprovacao_w);

case ie_exige_aprovacao_w

	when ExigeAprovacaoSim then
		null;
		
	when ExigeAprovacaoNao then

		update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
		update atendimento_monit_resp  set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_resp_w;
		update atend_monit_hemod       set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_hemo_w;
		commit;
		
	when ExigeAprovacaoForaFaixa then

		SELECT * FROM consiste_itens_sinal_vital(nr_seq_sinal_vital_w, ds_retorno_valida_sv_w, ie_retorno_valida_sv_w) INTO STRICT ds_retorno_valida_sv_w, ie_retorno_valida_sv_w;
		
		if (ie_retorno_valida_sv_w <> 'E' AND ie_retorno_valida_sv_w <> 'A')then

			update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
			update atendimento_monit_resp  set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_resp_w;
			update atend_monit_hemod       set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_hemo_w;
			commit;
			
		end if;
	else
		update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
		update atendimento_monit_resp  set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_resp_w;
		update atend_monit_hemod       set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_hemo_w;
		commit;
	
end case;
exception
when others then
	update atendimento_sinal_vital set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_sinal_vital_w;
	update atendimento_monit_resp  set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_resp_w;
	update atend_monit_hemod       set dt_liberacao = clock_timestamp() where nr_sequencia = nr_seq_monit_hemo_w;
	commit;
end;
end if;
end if;

COMMIT;

END IF;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_sinal_vital_ihe ( cd_pessoa_fisica_p text, dt_sinal_vital_p text, ds_lista_parametros_p text, ds_lista_parametros2_p text, nm_usuario_p text, ie_integracao_extra_p text) FROM PUBLIC;

