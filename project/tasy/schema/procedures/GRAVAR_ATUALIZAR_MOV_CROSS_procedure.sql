-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gravar_atualizar_mov_cross ( cd_estabelecimento_p bigint, nr_sequencia_cross_p bigint, nr_atendimento_p bigint, nr_seq_interno_p bigint, nr_ident_movimentacao_p bigint, nr_ident_recebimento_p bigint, nr_ident_internacao_p bigint, cd_evento_p bigint, cd_motivo_ret_p bigint, ds_motivo_ret_p text, cd_pessoa_cross_p text, cd_pessoa_fisica_p text, ie_enviado_p text, nm_usuario_p text ) AS $body$
DECLARE



cd_pessoa_fisica_w  varchar(255);
qt_internacao_w    bigint;
qt_movimentacoes_w  bigint;
cd_estabelecimento_w  bigint;


BEGIN

if (coalesce(nr_sequencia_cross_p,0) > 0) then

  if ('S' = ie_enviado_p) and (1 = cd_motivo_ret_p) then
    -- Transação completada com sucesso
    update  dados_envio_cross
    set  dt_atualizacao  = clock_timestamp(),
      nm_usuario  = nm_usuario_p,
      dt_envio  = clock_timestamp()
    where  nr_sequencia  = nr_sequencia_cross_p;


    /* *********************
    CD_EVENTO_P
    277  =   Internação
     ********************** */
     -- Cadastrar sequência  gerada pelo CROSS no Tasy
    if (277 = cd_evento_p) then

      if (nr_ident_internacao_p > 0) then
        update  atendimento_paciente
        set  nr_int_cross  = nr_ident_internacao_p
        where  nr_atendimento  = nr_atendimento_p;
      end if;

      if (coalesce(cd_pessoa_cross_p, 'N') <> 'N') AND (coalesce(cd_pessoa_fisica_p, 'N') <> 'N') THEN
        CALL wheb_usuario_pck.set_ie_executar_trigger('N');
        update pessoa_fisica
        set  cd_pessoa_cross    = cd_pessoa_cross_p
        where  cd_pessoa_fisica  = cd_pessoa_fisica_p;
        CALL wheb_usuario_pck.set_ie_executar_trigger('S');
      END IF;
    end if;

  end if;

  -- Gravar log
  insert into log_envio_cross(nr_sequencia,
    dt_atualizacao,
    nm_usuario,
    dt_atualizacao_nrec,
    nm_usuario_nrec,
    nr_seq_envio,
    cd_motivo_retorno,
    ds_motivo_retorno,
    nr_ident_movimentacao,
    nr_ident_recebimento,
    ie_tipo_log)
  values (nextval('log_envio_cross_seq'),
    clock_timestamp(),
    nm_usuario_p,
    clock_timestamp(),
    nm_usuario_p,
    nr_sequencia_cross_p,
    cd_motivo_ret_p,
    ds_motivo_ret_p,
    nr_ident_movimentacao_p,
    nr_ident_recebimento_p,
    'R');

else
  if (coalesce(nr_atendimento_p,0) > 0) or (coalesce(nr_seq_interno_p,0) > 0) then

    select  max(cd_pessoa_fisica),
      max(cd_estabelecimento)
    into STRICT  cd_pessoa_fisica_w,
      cd_estabelecimento_w
    from  atendimento_paciente
    where  nr_atendimento = nr_atendimento_p;

    select  count(*)
    into STRICT  qt_internacao_w
    from  dados_envio_cross
    where  nr_atendimento    = nr_atendimento_p
    and  trunc(dt_atualizacao)  = trunc(clock_timestamp())
    and  cd_evento    = 277
    and  coalesce(dt_envio::text, '') = '';

    if (277 = cd_evento_p) then

      if (nr_ident_internacao_p > 0) then
        update  atendimento_paciente
        set  nr_int_cross  = nr_ident_internacao_p
        where  nr_atendimento  = nr_atendimento_p;
      end if;
      if (coalesce(cd_pessoa_cross_p, 'N') <> 'N') AND (coalesce(cd_pessoa_fisica_p, 'N') <> 'N') THEN
        CALL wheb_usuario_pck.set_ie_executar_trigger('N');
        update pessoa_fisica
        set  cd_pessoa_cross    = cd_pessoa_cross_p
        where  cd_pessoa_fisica  = cd_pessoa_fisica_p;
        CALL wheb_usuario_pck.set_ie_executar_trigger('S');
      END IF;
    end if;

    if (qt_internacao_w  = 0) or (cd_evento_p    <> 277) then

      qt_movimentacoes_w := 0;

      -- Tratamento para não inserir duas vezes a mesma movimentação
      if (cd_evento_p    = 278) or (cd_evento_p    = 280) then
        select  count(*)
        into STRICT  qt_movimentacoes_w
        from  dados_envio_cross
        where  nr_atendimento    = nr_atendimento_p
        and     nr_seq_interno    = nr_seq_interno_p
        and   cd_estabelecimento  = CASE WHEN cd_estabelecimento_p=0 THEN  cd_estabelecimento_w  ELSE cd_estabelecimento_p END
        and    cd_evento      = cd_evento_p;
      end if;

      if (qt_movimentacoes_w = 0) then
        -- Inserir a movimentação na contingência
        insert into dados_envio_cross(nr_sequencia,
          dt_atualizacao,
          nm_usuario,
          dt_atualizacao_nrec,
          nm_usuario_nrec,
          nr_atendimento,
          nr_seq_interno,
          cd_evento,
          cd_pessoa_fisica,
          cd_estabelecimento)
        values (nextval('dados_envio_cross_seq'),
          clock_timestamp(),
          nm_usuario_p,
          clock_timestamp(),
          nm_usuario_p,
          nr_atendimento_p,
          nr_seq_interno_p,
          cd_evento_p,
          cd_pessoa_fisica_w,
          CASE WHEN cd_estabelecimento_p=0 THEN  cd_estabelecimento_w  ELSE cd_estabelecimento_p END );
      end if;
    end if;
  end if;
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gravar_atualizar_mov_cross ( cd_estabelecimento_p bigint, nr_sequencia_cross_p bigint, nr_atendimento_p bigint, nr_seq_interno_p bigint, nr_ident_movimentacao_p bigint, nr_ident_recebimento_p bigint, nr_ident_internacao_p bigint, cd_evento_p bigint, cd_motivo_ret_p bigint, ds_motivo_ret_p text, cd_pessoa_cross_p text, cd_pessoa_fisica_p text, ie_enviado_p text, nm_usuario_p text ) FROM PUBLIC;

