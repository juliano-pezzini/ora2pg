-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_2 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Aplicar a validação de carteira do beneficiário conforme informado na
	regra para as contas ou itens que passaram pelos filtros da regra.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
i			integer;
ie_gera_ocorrencia_w	varchar(10);
dados_tb_sel_w		pls_tipos_ocor_pck.dados_table_selecao_ocor;

-- Contas que foram aplicadas nos filtros da regra
C01 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type,
		ie_evento_pc		text) FOR
	SELECT 	b.dt_atendimento_imp dt_emissao_imp,
		b.dt_atendimento dt_emissao,
		b.nr_sequencia nr_seq_conta,
		(	SELECT fim_dia(max(x.dt_validade_carteira))
			from pls_segurado_carteira x
			where x.nr_seq_segurado = b.nr_seq_segurado) dt_validade_carteira
	from 	pls_conta_ocor_v b
	where exists (	select 1
			from   pls_selecao_ocor_cta a
			where a.nr_id_transacao = nr_id_transacao_pc
			and   a.ie_valido = 'S'
			and   a.nr_seq_conta = b.nr_sequencia)
	and	'RE' <> ie_evento_pc
	
union all

	select 	b.dt_atendimento_imp dt_emissao_imp,
		b.dt_atendimento dt_emissao,
		b.nr_sequencia nr_seq_conta,
		(	select fim_dia(max(x.dt_validade_carteira))
			from pls_segurado_carteira x
			where x.nr_seq_segurado = b.nr_seq_segurado_prot) dt_validade_carteira
	from 	pls_conta_ocor_v b
	where exists (	select 1
			from   pls_selecao_ocor_cta a
			where a.nr_id_transacao = nr_id_transacao_pc
			and   a.ie_valido = 'S'
			and   a.nr_seq_conta = b.nr_sequencia)
	and	'RE' = ie_evento_pc;

-- Informações da regra de validação da carteira
C02 CURSOR(	nr_seq_oc_cta_comb_p	dados_regra_p.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_validacao,
		a.ie_validade_carteira
	from	pls_oc_cta_val_carteira a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_p;
BEGIN

if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then
	-- Informações da regra de validação da carteira.
	for	r_C02_w in C02(dados_regra_p.nr_sequencia) loop

		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);
		pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);

		-- Se tiver informação na tabela e a informação for diferente de nenhuma será verificado, caso contrário sai da rotina e nem abre as informações das contas.
		if (r_C02_w.ie_validade_carteira IS NOT NULL AND r_C02_w.ie_validade_carteira::text <> '') then

			i := 0;
			-- Dados da conta
			for	r_C01_w in C01(nr_id_transacao_p, dados_regra_p.ie_evento) loop

				ie_gera_ocorrencia_w	:= 'N';
				if (r_C01_w.dt_validade_carteira IS NOT NULL AND r_C01_w.dt_validade_carteira::text <> '') then
					--Verifica se deve ser considerado os campos IMP
					if (dados_regra_p.ie_evento = 'IMP') then
						-- Precisa ter alguma informação para que seja comparado com a carteira do benef
						if (r_C01_w.dt_emissao_imp IS NOT NULL AND r_C01_w.dt_emissao_imp::text <> '') then
							-- Verificar tipo de geração da ocorrência,  se vencida ou vigente
							if (r_C02_w.ie_validade_carteira = 'VC') then
								-- Se a data de validade for menos que a data de emissao da conta então não é excecao e será gerada a ocorrencia
								if (r_C01_w.dt_emissao_imp > r_C01_w.dt_validade_carteira) then

									dados_tb_sel_w.ds_observacao(i)	:= 'A carteira do segurado está vencida desde ' || to_char(r_C01_w.dt_validade_carteira, 'dd/mm/yyyy');
									ie_gera_ocorrencia_w		:= 'S';
								end if;
							elsif (r_C02_w.ie_validade_carteira = 'V') then
								-- Se a data de validade for maior que a data de emissao da conta então não é excecao e vai gerar a ocorrencia
								if (r_C01_w.dt_emissao_imp <= r_C01_w.dt_validade_carteira) then

									dados_tb_sel_w.ds_observacao(i)		:= 'A carteira do segurado é válida até ' || to_char(r_C01_w.dt_validade_carteira, 'dd/mm/yyyy');
									ie_gera_ocorrencia_w			:= 'S';
								end if;
							end if;
						end if;
					else
						-- Precisa ter alguma informação para que seja comparado com a carteira do benef
						if (r_C01_w.dt_emissao IS NOT NULL AND r_C01_w.dt_emissao::text <> '') then
							-- Verificar tipo de geração da ocorrência,  se vencida ou vigente
							if (r_C02_w.ie_validade_carteira = 'VC') then
								-- Se a data de validade for menos que a data de emissao da conta então não é excecao e será gerada a ocorrencia
								if (r_C01_w.dt_emissao > r_C01_w.dt_validade_carteira) then

									dados_tb_sel_w.ds_observacao(i)	:= 'A carteira do segurado está vencida desde ' || to_char(r_C01_w.dt_validade_carteira, 'dd/mm/yyyy');
									ie_gera_ocorrencia_w		:= 'S';
								end if;
							elsif (r_C02_w.ie_validade_carteira = 'V') then
								-- Se a data de validade for maior que a data de emissao da conta então não é excecao e vai gerar a ocorrencia
								if (r_C01_w.dt_emissao <= r_C01_w.dt_validade_carteira) then

									dados_tb_sel_w.ds_observacao(i)		:= 'A carteira do segurado é válida até ' || to_char(r_C01_w.dt_validade_carteira, 'dd/mm/yyyy');
									ie_gera_ocorrencia_w			:= 'S';
								end if;
							end if;
						end if;
					end if;
				end if;
				-- Caso for para gerar ocorrência inclui os dados da conta na tabela
				if (ie_gera_ocorrencia_w = 'S') then

					-- Passa nr_seq_conta ao invés do nr_seq_selecao, pois será feito validação a nível de conta
					-- isso ocorre pelo motivo que esta validação é a nível de conta e podem existir registros de itens
					-- na tabela de seleção
					-- neste caso todos os itens da conta serão alterados para válidos.
					dados_tb_sel_w.nr_seq_selecao(i)	:= r_C01_w.nr_seq_conta;
					dados_tb_sel_w.ie_valido(i)		:= 'S';

					if (i >= pls_util_pck.qt_registro_transacao_w) then

						CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_sel_w.nr_seq_selecao,
												pls_util_cta_pck.clob_table_vazia_w,
												'SEQ_CONTA',
												dados_tb_sel_w.ds_observacao,
												dados_tb_sel_w.ie_valido,
												nm_usuario_p,
												nr_id_transacao_p);
						pls_tipos_ocor_pck.limpar_nested_tables(dados_tb_sel_w);
						i := 0;
					else
						i := i + 1;
					end if;
				end if;
			end loop; --C01
		end if;
	end loop; -- C02
	CALL pls_tipos_ocor_pck.gerencia_selecao_validacao(	dados_tb_sel_w.nr_seq_selecao, pls_util_cta_pck.clob_table_vazia_w,
							'SEQ_CONTA', dados_tb_sel_w.ds_observacao,
							dados_tb_sel_w.ie_valido, nm_usuario_p,
							nr_id_transacao_p);

	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_2 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

