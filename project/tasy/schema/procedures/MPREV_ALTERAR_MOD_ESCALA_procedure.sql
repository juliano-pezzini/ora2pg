-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE mprev_alterar_mod_escala ( nr_seq_eif_escala_p escala_eif_ii.nr_sequencia%type, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Gerar um ciclo de atendimento para o participante da medicina preventiva quando liberado a escala Score Flex no Pep
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta: 
[ X ]  Objetos do dicionario [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atencao:
-------------------------------------------------------------------------------------------------------------------
Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
			
nr_seq_escala_w			escala_eif_ii.nr_seq_escala%type;
qt_pontos_w			escala_eif_ii.qt_pontos%type;
nr_atendimento_w		escala_eif_ii.nr_atendimento%type;
qt_regra_modulo_mprev_w		bigint;
nr_seq_regra_score_plano_w	mprev_regra_score_plano.nr_sequencia%type;
ds_resultado_w			varchar(255);
nr_seq_participante_w		mprev_participante.nr_sequencia%type;
nr_seq_modulo_w			mprev_regra_score_plano.nr_seq_modulo%type;
nr_seq_classificacao_w		mprev_regra_score_plano.nr_seq_classificacao%type;
nr_seq_prog_participante_w	mprev_programa_partic.nr_sequencia%type;
nr_seq_prog_partic_modulo_w	mprev_prog_partic_modulo.nr_sequencia%type;
nr_seq_prog_partic_mod_ant_w	mprev_prog_partic_modulo.nr_sequencia%type;
nr_seq_prog_modulo_w		mprev_prog_partic_modulo.nr_seq_prog_modulo%type;
ie_data_final_w			mprev_prog_partic_modulo.ie_data_final%type;
ie_cancelamento_w		mprev_prog_partic_modulo.ie_cancelamento%type;


BEGIN

/*Busca as informacoes da escala*/

select	nr_seq_escala,
	qt_pontos,
	nr_atendimento
into STRICT	nr_seq_escala_w,
	qt_pontos_w,
	nr_atendimento_w
from	escala_eif_ii
where	nr_sequencia	= nr_seq_eif_escala_p;

select	count(1)
into STRICT	qt_regra_modulo_mprev_w
from	mprev_regra_score_plano
where	nr_seq_escala	= nr_seq_escala_w
and	clock_timestamp() between dt_inicio_vigencia and coalesce(dt_fim_vigencia,clock_timestamp());

/*Busca o participante do atendimento*/

select	max(b.nr_sequencia)
into STRICT	nr_seq_participante_w
from	pessoa_fisica		c,
	mprev_participante	b,
	ATENDIMENTO_PACIENTE	a
where	c.CD_PESSOA_FISICA	= b.cd_pessoa_fisica
and	a.CD_PESSOA_FISICA	= b.cd_pessoa_fisica
and	a.NR_ATENDIMENTO	= nr_atendimento_w;

if (qt_regra_modulo_mprev_w > 0) and (nr_seq_participante_w IS NOT NULL AND nr_seq_participante_w::text <> '') then

	/*Busca o resultado da escala*/

	ds_resultado_w	:= upper(substr(obter_desc_resul_score_flex_2(qt_pontos_w,nr_seq_escala_w),1,255));

	/*Busca a regra para gerar o modulo para o participante*/

	select	max(nr_sequencia)
	into STRICT	nr_seq_regra_score_plano_w
	from	MPREV_REGRA_SCORE_PLANO
	where	nr_seq_escala	= nr_seq_escala_w
	and	clock_timestamp() between dt_inicio_vigencia and coalesce(dt_fim_vigencia,clock_timestamp())
	and	upper(ds_resultado) like ds_resultado_w;
	
	if (nr_seq_regra_score_plano_w IS NOT NULL AND nr_seq_regra_score_plano_w::text <> '') then
		select	nr_seq_modulo,
			nr_seq_classificacao
		into STRICT	nr_seq_modulo_w,
			nr_seq_classificacao_w
		from	mprev_regra_score_plano
		where	nr_sequencia	= nr_seq_regra_score_plano_w;
		
		/*Busca o programa aonde esta o modulo do participante*/

		select	max(c.nr_sequencia),
			max(a.nr_sequencia)
		into STRICT	nr_seq_prog_participante_w,
			nr_seq_prog_modulo_w
		from	mprev_programa_partic	c,
			mprev_programa		b,
			mprev_programa_modulo	a
		where	c.NR_SEQ_PROGRAMA	= b.nr_sequencia
		and	a.NR_SEQ_PROGRAMA	= b.nr_sequencia
		and	c.nr_seq_participante	= nr_seq_participante_w
		and	a.nr_seq_modulo		= nr_seq_modulo_w
		and	a.IE_SITUACAO		= 'A';
		
		/*Cria o modulo do participante no programa aonde esta seu modulo*/

		if (nr_seq_prog_participante_w IS NOT NULL AND nr_seq_prog_participante_w::text <> '') and (nr_seq_prog_modulo_w IS NOT NULL AND nr_seq_prog_modulo_w::text <> '') then
			
			select	max(nr_sequencia),
				max(ie_cancelamento), 
				max(ie_data_final)
			into STRICT	nr_seq_prog_partic_mod_ant_w, 
				ie_cancelamento_w, 
				ie_data_final_w
			from	mprev_prog_partic_modulo
			where	nr_seq_programa_partic	= nr_seq_prog_participante_w
			and	nr_seq_prog_modulo	= nr_seq_prog_modulo_w
			and	coalesce(DT_SAIDA::text, '') = '';
		
			select	nextval('mprev_prog_partic_modulo_seq')
			into STRICT	nr_seq_prog_partic_modulo_w
			;
			
			insert into mprev_prog_partic_modulo(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
					nr_seq_programa_partic,nr_seq_prog_modulo,nr_seq_classificacao,dt_entrada, ie_cancelamento, ie_data_final)
			values (	nr_seq_prog_partic_modulo_w,clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
					nr_seq_prog_participante_w,nr_seq_prog_modulo_w,nr_seq_classificacao_w,ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(clock_timestamp()), coalesce(ie_cancelamento_w, 'N'), coalesce(ie_data_final_w, 'N'));
			
			/*Gera o ciclo de atendimento do modulo para o participante*/

			begin
			CALL mprev_gerar_ciclo_atend(nr_seq_participante_w,nr_seq_prog_partic_modulo_w,clock_timestamp(),nm_usuario_p, 'S');
			exception
			when others then
			
				nr_seq_prog_partic_mod_ant_w	:= null;
			
				delete	FROM mprev_prog_partic_modulo
				where	nr_sequencia	= nr_seq_prog_partic_modulo_w;
			end;
			
			/*Finaliza o outro modulo em aberto do participante*/

			if (nr_seq_prog_partic_mod_ant_w IS NOT NULL AND nr_seq_prog_partic_mod_ant_w::text <> '') then
				update	mprev_prog_partic_modulo
				set	DT_SAIDA	= clock_timestamp(),
					DT_CANCELAMENTO = clock_timestamp(),
					DS_MOTIVO = obter_desc_expressao(847059) || ' - ' || obter_desc_expressao(326147) || nr_atendimento_w
				where	nr_sequencia	= nr_seq_prog_partic_mod_ant_w;
			end if;
		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE mprev_alterar_mod_escala ( nr_seq_eif_escala_p escala_eif_ii.nr_sequencia%type, nm_usuario_p text) FROM PUBLIC;

