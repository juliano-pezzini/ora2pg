-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_titulo_protocolo ( nr_seq_protocolo_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
nr_titulo_w			bigint;
cd_condicao_pagamento_w		bigint;
dt_base_venc_w			timestamp;
vl_protocolo_w			double precision;
cd_estabelecimento_w		smallint;
qt_venc_w			bigint;
ds_venc_w			varchar(2000);
dt_vencimento_w			timestamp;
cd_cgc_w			varchar(14);
cd_moeda_w			integer;
cd_pessoa_fisica_w		varchar(14);
nr_seq_prestador_w		bigint;
nr_seq_prot_conta_w		bigint;
nr_seq_conta_w			bigint;
cont_w				bigint;
vl_titulo_w			double precision;
ie_forma_pagamento_w		smallint;
tx_fracao_parcela_w		numeric(15,4)	:= 0;
tx_acrescimo_w			numeric(15,4)	:= 0;
ie_acao_venc_nao_util_w		varchar(1)	:= 'M';
ie_tipo_guia_w			varchar(2);
nr_seq_prestador_conta_w	bigint;
dt_ref_tributo_w		timestamp;
cd_tributo_w			smallint;
vl_tributo_w			double precision;
vl_base_calculo_w		double precision;
qt_imposto_mes_w		bigint;
qt_dia_vencimento_w		integer;

c02 CURSOR FOR 
	SELECT	nr_sequencia 
	from	pls_prot_conta_titulo 
	where	nr_seq_protocolo = nr_seq_protocolo_p;

c03 CURSOR FOR 
	SELECT	/* A Prazo  */
 
		tx_fracao_parcela, 
		coalesce(tx_acrescimo,0), 
		Obter_data_vencimento( 
				dt_base_venc_w, 
				qt_dias_parcela, 
				cd_estabelecimento_p, 
				ie_corrido_util, 
				ie_acao_venc_nao_util_w) 
	from	parcela 
	where	cd_condicao_pagamento 	= cd_condicao_pagamento_w 
	and	ie_forma_pagamento_w	not in (1,10) 
	
UNION
 
	SELECT	100, 0,	/* A Vista  */
 
		dt_base_venc_w 
	 
	where	ie_forma_pagamento_w	= 1 
	
UNION
 
	select	100,0, /* Conforme Vencimentos */
 
		to_date((to_char(qt_dia_vencimento_w) || '/' || to_char(add_months(dt_base_venc_w,1),'mm/yyyy')),'dd/mm/yyyy') 
	 
	where	ie_forma_pagamento_w	= 10;


BEGIN 
 
if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then 
	select	cd_estabelecimento, 
		cd_condicao_pagamento, 
		dt_base_venc, 
		coalesce(pls_obter_valor_protocolo(nr_sequencia,'T'),0), 
		nr_seq_prestador, 
		ie_tipo_guia 
	into STRICT	cd_estabelecimento_w, 
		cd_condicao_pagamento_w, 
		dt_base_venc_w, 
		vl_protocolo_w, 
		nr_seq_prestador_w, 
		ie_tipo_guia_w 
	from	pls_protocolo_conta 
	where	nr_sequencia	= nr_seq_protocolo_p;
	 
	if (coalesce(nr_seq_prestador_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 267299, null ); /* É necessário selecionar um prestador para o protocolo! */
	elsif (coalesce(cd_condicao_pagamento_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 267300, null ); /* É necessário informar uma condição de pagamento! */
	elsif (coalesce(dt_base_venc_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 267301, null ); /* É necessário informar uma data base para vencimento! */
	end if;
	 
	select	max(qt_dia_vencimento) 
	into STRICT	qt_dia_vencimento_w 
	from	pls_prestador_pagto 
	where	nr_seq_prestador = nr_seq_prestador_w;
	 
	select	coalesce(max(ie_forma_pagamento),3), 
		coalesce(max(ie_acao_nao_util),'M') 
	into STRICT	ie_forma_pagamento_w, 
		ie_acao_venc_nao_util_w 
	from	condicao_pagamento 
	where	cd_condicao_pagamento = cd_condicao_pagamento_w 
	and	ie_situacao      = 'A';
	 
	select	obter_moeda_padrao(cd_estabelecimento_w,'P') 
	into STRICT	cd_moeda_w 
	;
	 
	/*calcular_vencimento(cd_estabelecimento_w,cd_condicao_pagamento_w,dt_base_venc_w, qt_venc_w, ds_venc_w);*/
 
	 
	open c03;
	loop 
	fetch c03 into 
		tx_fracao_parcela_w, 
		tx_acrescimo_w, 
		dt_vencimento_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		open c02;
		loop 
		fetch c02 into 
			nr_seq_prot_conta_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			select	vl_titulo, 
				coalesce(nr_seq_prestador,nr_seq_prestador_w) 
			into STRICT	vl_protocolo_w, 
				nr_seq_prestador_conta_w 
			from	pls_prot_conta_titulo 
			where	nr_sequencia = nr_seq_prot_conta_w;
			 
			select	cd_pessoa_fisica, 
				cd_cgc 
			into STRICT	cd_pessoa_fisica_w, 
				cd_cgc_w 
			from	pls_prestador 
			where	nr_sequencia	= nr_seq_prestador_conta_w;
			 
			if (coalesce(tx_fracao_parcela_w,0) > 0) then 
				vl_titulo_w	:= ((vl_protocolo_w * tx_fracao_parcela_w) / 100);
			end if;
			 
			if (tx_acrescimo_w <> 0) then 
				vl_titulo_w 	:= vl_titulo_w + ((vl_titulo_w * tx_acrescimo_w) / 100);
			end if;
			 
			select	nextval('titulo_pagar_seq') 
			into STRICT	nr_titulo_w 
			;
			 
			insert	into	titulo_pagar(nr_titulo, 
				cd_estabelecimento, 
				nm_usuario, 
				dt_atualizacao, 
				dt_emissao, 
				dt_vencimento_original, 
				dt_vencimento_atual, 
				vl_titulo, 
				vl_saldo_titulo, 
				vl_saldo_juros, 
				vl_saldo_multa, 
				nr_lote_contabil, 
				cd_moeda, 
				tx_juros, 
				tx_multa, 
				cd_tipo_taxa_juro, 
				cd_tipo_taxa_multa, 
				ie_situacao, 
				ie_origem_titulo, 
				ie_tipo_titulo, 
				cd_cgc, 
				cd_pessoa_fisica, 
				ie_pls, 
				nr_seq_prot_conta) 
			values (nr_titulo_w, 
				cd_estabelecimento_w, 
				nm_usuario_p, 
				clock_timestamp(), 
				trunc(clock_timestamp(),'dd'), 
				dt_vencimento_w, 
				dt_vencimento_w, 
				vl_titulo_w, 
				vl_titulo_w, 
				0, 
				0, 
				0, 
				cd_moeda_w, 
				0, 
				0, 
				1, 
				1, 
				'A', 
				'5', 
				'1', 
				cd_cgc_w, 
				cd_pessoa_fisica_w, 
				'S', 
				nr_seq_prot_conta_w);
			CALL ATUALIZAR_INCLUSAO_TIT_PAGAR(nr_titulo_w,nm_usuario_p);
			 
			select	count(*) 
			into STRICT	qt_imposto_mes_w 
			from	pls_prestador_tributo 
			where	nr_seq_prestador = nr_seq_prestador_conta_w 
			and	trunc(dt_referencia,'month')	= trunc(dt_vencimento_w, 'month');
			 
			if (qt_imposto_mes_w > 0) then 
				select	trunc(dt_referencia,'dd'), 
					cd_tributo, 
					vl_tributo, 
					vl_base_calculo 
				into STRICT	dt_ref_tributo_w, 
					cd_tributo_w, 
					vl_tributo_w, 
					vl_base_calculo_w 
				from	pls_prestador_tributo 
				where	nr_seq_prestador = nr_seq_prestador_conta_w 
				and		trunc(dt_referencia,'month')	= trunc(dt_vencimento_w, 'month');
				 
				insert into	titulo_pagar_imposto(	nr_sequencia, 
									nr_titulo, 
									cd_tributo, 
									ie_pago_prev, 
									dt_atualizacao, 
									nm_usuario, 
									dt_imposto, 
									vl_base_calculo, 
									vl_imposto, 
									vl_nao_retido, 
									ie_vencimento, 
									vl_base_nao_retido, 
									vl_trib_adic, 
									vl_base_adic) 
								values (	nextval('titulo_pagar_imposto_seq'), 
									nr_titulo_w, 
									cd_tributo_w, 
									'P', 
									clock_timestamp(), 
									nm_usuario_p, 
									dt_ref_tributo_w, 
									vl_base_calculo_w, 
									0, 
									0, 
									'V', 
									0, 
									0, 
									0);
			end if;
			 
			CALL gerar_tributo_titulo(nr_titulo_w, nm_usuario_p, 'N', null, null, null, null,null, cd_estabelecimento_p,null);
			 
			update	pls_conta 
			set	nr_seq_prot_conta	= nr_seq_prot_conta_w 
			where	((nr_seq_prestador_exec	= nr_seq_prestador_conta_w) 
				or (coalesce(nr_seq_prestador_exec::text, '') = '')) 
			and	nr_seq_protocolo	= nr_seq_protocolo_p;
			 
		end loop;
		close c02;
	end loop;
	close c03;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_titulo_protocolo ( nr_seq_protocolo_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

