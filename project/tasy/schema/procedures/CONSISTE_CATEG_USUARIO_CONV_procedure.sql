-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos AS ( cd_usuario_convenio	varchar(30),
			cd_categoria		varchar(20),
			nr_pos_inicial		smallint,
			nr_pos_final		smallint);


CREATE OR REPLACE PROCEDURE consiste_categ_usuario_conv ( cd_usuario_convenio_p text, cd_convenio_p bigint, ie_tipo_atendimento_p bigint, ie_clinica_p bigint, cd_estabelecimento_p bigint, cd_categoria_p INOUT text, ds_categoria_p INOUT text) AS $body$
DECLARE

		
/* tdpaula OS 321889 - 09/06/2011
Buscar a categoria do convenio de acodo com a carteirinha inforada.
Consiste as regras do Cad. Convênio Preços e Regras / Regras / Regra usuário categoria
Insere todas as regras no vetor, após isso compara cada caracter dacarteirinha passada como parâmetro com os da regra para encontrar a categoria correa.
Quando informado @ na carteirinha da regra, deve ser considerado qualquer caracter.
*/
type Vetor is table of campos index by integer;
Vetor_w	Vetor;	

cd_categoria_w		varchar(20);
ie_tipo_atendimento_w	smallint;
ie_clinica_w		integer;
cd_usuario_padrao_w	varchar(30);
cd_usuario_convenio_w	varchar(30);
cd_usuario_convenio_ww	varchar(30):='0';
cd_usuario_parametro_w	varchar(30);
i			integer := 0;
x			integer := 0;
y			integer := 0;
qt_caracter_ini_w	bigint;
qt_caracter_ini_ww	bigint;
qt_caracter_fim_w	bigint;
qt_caracter_fim_ww	bigint;
ds_categoria_w		varchar(80);
nr_pos_inicial_w	smallint;
nr_pos_final_w		smallint;
	
C01 CURSOR FOR
	SELECT	cd_usuario_padrao,
		cd_categoria,
		nr_pos_inicial,
		nr_pos_final
	from    conv_regra_usuario_categ
        where   cd_estabelecimento 	= cd_estabelecimento_p
        and     cd_convenio		= cd_convenio_p
        and     coalesce(ie_tipo_atendimento,ie_tipo_atendimento_w)  = ie_tipo_atendimento_w
        and     coalesce(ie_clinica,ie_clinica_w) = ie_clinica_w
        order by coalesce(nr_pos_final,0),
				 coalesce(ie_tipo_atendimento,0),
                 coalesce(ie_clinica,0);

BEGIN

ie_tipo_atendimento_w   := coalesce(ie_tipo_atendimento_p,0);
ie_clinica_w            := coalesce(ie_clinica_p,0);

open C01;
loop
fetch C01 into	
	cd_usuario_padrao_w,
	cd_categoria_w,
	nr_pos_inicial_w,
	nr_pos_final_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	i := i + 1;
	Vetor_w[i].cd_usuario_convenio 	:= cd_usuario_padrao_w;	
	Vetor_w[i].cd_categoria		:= cd_categoria_w;
	Vetor_w[i].nr_pos_inicial	:= nr_pos_inicial_w;
	Vetor_w[i].nr_pos_final		:= nr_pos_final_w;	
	end;
end loop;
close C01;

for i in 1..Vetor_w.count loop
	begin	
	cd_usuario_convenio_w := '';	
	cd_usuario_parametro_w:=substr(cd_usuario_convenio_p,Vetor_w[i].nr_pos_inicial,Vetor_w[i].nr_pos_final);
	for x in 1..length(cd_usuario_parametro_w) loop
		begin		
		if (substr(Vetor_w[i].cd_usuario_convenio,x,1) = substr(cd_usuario_parametro_w,x,1)) then
			cd_usuario_convenio_w := cd_usuario_convenio_w || substr(Vetor_w[i].cd_usuario_convenio,x,1);
		elsif (substr(Vetor_w[i].cd_usuario_convenio,x,1) =  '@') then
			cd_usuario_convenio_w := cd_usuario_convenio_w || '@';
		else	
			exit;
		end if;		
		end;
	end loop;
	
	qt_caracter_ini_w	:= length(cd_usuario_convenio_w);
	qt_caracter_fim_w	:= qt_caracter_ini_w - length(replace(cd_usuario_convenio_w,'@',''));
	qt_caracter_ini_ww	:= length(cd_usuario_convenio_ww);
	qt_caracter_fim_ww	:= qt_caracter_ini_ww - length(replace(cd_usuario_convenio_ww,'@',''));	
	
	if (Vetor_w[i].nr_pos_final = qt_caracter_ini_w) and
		((length(cd_usuario_convenio_w) > length(cd_usuario_convenio_ww)) or (length(cd_usuario_convenio_w) = length(cd_usuario_convenio_ww) and (qt_caracter_fim_w <= qt_caracter_fim_ww)))then
		y := i;
		cd_usuario_convenio_ww	:= cd_usuario_convenio_w;
	end if;		
	end;
end loop;

begin
select	coalesce(max(ds_categoria),'0')
into STRICT	ds_categoria_w
from	categoria_convenio
where	cd_convenio 	=  cd_convenio_p
and	cd_categoria 	= Vetor_w[y].cd_categoria;

cd_categoria_p:= coalesce(Vetor_w[y].cd_categoria,'0');
ds_categoria_p:= ds_categoria_w;
exception		-- caso não exista regra o vetor estará vazio;
when others then
	cd_categoria_p:=null;	
	ds_categoria_p:=null;
end;		

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_categ_usuario_conv ( cd_usuario_convenio_p text, cd_convenio_p bigint, ie_tipo_atendimento_p bigint, ie_clinica_p bigint, cd_estabelecimento_p bigint, cd_categoria_p INOUT text, ds_categoria_p INOUT text) FROM PUBLIC;

