-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_devolucao_ordem_transf ( nr_ordem_compra_p bigint, nm_usuario_p text, nr_ordem_devolucao_p INOUT bigint) AS $body$
DECLARE


nr_sequencia_w		bigint;
nr_ordem_compra_w	bigint;
cd_estabelecimento_w	smallint;
cd_estab_transf_w		smallint;
cd_cgc_fornecedor_w	varchar(14);
cd_condicao_pagamento_w	bigint;
cd_comprador_w		varchar(10);
cd_moeda_w		integer;
cd_pessoa_solicitante_w	varchar(10);
cd_cgc_transportador_w	varchar(14);
ie_frete_w		varchar(1);
dt_entrega_w		timestamp;
nr_item_oci_w		ordem_compra_item.nr_item_oci%type;
nr_item_oci_ww		integer;
nr_seq_nf_saida_w		bigint;
nr_item_nf_saida_w		integer;
cd_unidade_medida_w	varchar(30);
qt_material_w		double precision;
cd_local_estoque_w	smallint;
cd_centro_custo_w		integer;
cd_material_w		integer;
qt_existe_w		integer;
ds_erro_w		varchar(255);
ds_alerta_w		ordem_compra.ds_observacao%type;
			
C01 CURSOR FOR
	SELECT	NR_SEQUENCIA,
		NR_SEQ_NF_SAIDA,
		NR_ITEM_NF_SAIDA,
		QT_MATERIAL
	from	w_ordem_compra_item_dev
	where	nr_ordem_compra = nr_ordem_compra_p
	and	coalesce(nr_ordem_compra_dev::text, '') = ''
	order by nr_ordem_compra, nr_item_oci;

BEGIN
nr_ordem_devolucao_p := 0;

select	count(*)
into STRICT	qt_existe_w
from	w_ordem_compra_item_dev
where	nr_ordem_compra = nr_ordem_compra_p
and	coalesce(nr_ordem_compra_dev::text, '') = '';

if (qt_existe_w > 0) then
	begin
	select	cd_estabelecimento,
		cd_estab_transf,
		cd_condicao_pagamento,
		cd_moeda,
		cd_cgc_transportador,
		ie_frete
	into STRICT	cd_estabelecimento_w,
		cd_estab_transf_w,
		cd_condicao_pagamento_w,
		cd_moeda_w,
		cd_cgc_transportador_w,
		ie_frete_w
	from	ordem_compra
	where	nr_ordem_compra = nr_ordem_compra_p;

	cd_pessoa_solicitante_w := substr(obter_pessoa_fisica_usuario(nm_usuario_p,'C'),1,10);
	cd_cgc_fornecedor_w	:= substr(obter_cgc_estabelecimento(cd_estabelecimento_w),1,14);
	
	select 	max(cd_comprador_padrao)
	into STRICT	cd_comprador_w
	from 	parametro_compras
	where	cd_estabelecimento = cd_estab_transf_w;
	
	if (coalesce(cd_comprador_w::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(190193);
	end if;

	select	nextval('ordem_compra_seq')
	into STRICT	nr_ordem_compra_w
	;

	nr_ordem_devolucao_p := nr_ordem_compra_w;

	insert into ordem_compra(
		nr_ordem_compra,
		cd_estabelecimento,
		cd_estab_transf,
		cd_condicao_pagamento,
		cd_comprador,
		cd_moeda,
		cd_cgc_transportador,
		ie_frete,
		dt_ordem_compra,
		dt_atualizacao,
		dt_inclusao,
		nm_usuario,
		ie_situacao,
		cd_pessoa_solicitante,
		dt_entrega,
		ie_aviso_chegada,
		ie_emite_obs,
		ie_urgente,
		nr_ordem_orig,
		ie_tipo_ordem,
		cd_cgc_fornecedor)
	values (nr_ordem_compra_w,
		cd_estab_transf_w,
		cd_estabelecimento_w,
		cd_condicao_pagamento_w,
		cd_comprador_w,
		cd_moeda_w,
		cd_cgc_transportador_w,
		ie_frete_w,
		clock_timestamp(),
		clock_timestamp(),
		clock_timestamp(),
		nm_usuario_p,
		'A',
		cd_pessoa_solicitante_w,
		clock_timestamp(),
		'N',
		'N',
		'N',
		nr_ordem_compra_p,
		'T',
		cd_cgc_fornecedor_w);
		
	CALL inserir_historico_ordem_compra(
		nr_ordem_compra_p,
		'S',
		Wheb_mensagem_pck.get_Texto(301993), /*'Geracao de devolucao',*/
		Wheb_mensagem_pck.get_Texto(301994, 'NR_ORDEM_COMPRA_W='|| NR_ORDEM_COMPRA_W),/*'Foi gerada a solicitacao de transferencia de devolucao n. ' || to_char(nr_ordem_compra_w) || ' a partir desta solicitacao de transferencia.',*/
		nm_usuario_p);

	open C01;
	loop
	fetch C01 into	
		nr_sequencia_w,
		nr_seq_nf_saida_w,
		nr_item_nf_saida_w,
		qt_material_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		select	cd_unidade_medida_estoque,
			cd_local_estoque,
			cd_centro_custo,
			cd_material
		into STRICT	cd_unidade_medida_w,
			cd_local_estoque_w,
			cd_centro_custo_w,
			cd_material_w
		from	nota_fiscal_item
		where	nr_sequencia = nr_seq_nf_saida_w
		and	nr_item_nf = nr_item_nf_saida_w;
		
		select	coalesce(max(nr_item_oci),0)
		into STRICT	nr_item_oci_w
		from	ordem_compra_item
		where	nr_ordem_compra = nr_ordem_compra_w
		and	cd_material = cd_material_w;
		
		if (nr_item_oci_w > 0) then
			update	ordem_compra_item
			set	qt_material = qt_material + qt_material_w
			where	nr_ordem_compra = nr_ordem_compra_w
			and	cd_material = cd_material_w
			and	nr_item_oci = nr_item_oci_w;
			
			update	ordem_compra_item_entrega
			set	qt_prevista_entrega = qt_prevista_entrega + qt_material_w
			where	nr_ordem_compra = nr_ordem_compra_w
			and	nr_item_oci = nr_item_oci_w;

		else
		
			nr_item_oci_ww := (coalesce(nr_item_oci_ww,0) + 1);
			
			insert into ordem_compra_item(
				cd_material,
				cd_unidade_medida_compra,
				dt_atualizacao,
				ie_situacao,
				nm_usuario,
				nr_item_oci,
				nr_ordem_compra,
				qt_material,
				qt_original,
				vl_unitario_material,
				cd_local_estoque,
				cd_centro_custo,
				vl_total_item)
			values (cd_material_w,
				cd_unidade_medida_w,
				clock_timestamp(),
				'A',
				nm_usuario_p,
				nr_item_oci_ww,
				nr_ordem_compra_w,
				qt_material_w,
				qt_material_w,
				0,
				cd_local_estoque_w,
				cd_centro_custo_w,
				round((qt_material_w * 0)::numeric,4));
			
			insert into ordem_compra_item_entrega(
				nr_ordem_compra,
				nr_item_oci,
				dt_prevista_entrega,
				qt_prevista_entrega,
				dt_atualizacao,
				nm_usuario,
				nr_sequencia)
			values (nr_ordem_compra_w,
				nr_item_oci_ww,
				clock_timestamp(),
				qt_material_w,
				clock_timestamp(),
				nm_usuario_p,
				nextval('ordem_compra_item_entrega_seq'));
		end if;
		
		update	w_ordem_compra_item_dev
		set	nr_ordem_compra_dev = nr_ordem_compra_w,
			nr_item_oci_dev = CASE WHEN nr_item_oci_w=0 THEN nr_item_oci_ww  ELSE nr_item_oci_w END
		where	nr_sequencia = nr_sequencia_w;
		end;
	end loop;
	close C01;
	
	CALL gerar_ordem_compra_venc( nr_ordem_compra_w, nm_usuario_p);
	SELECT * FROM consiste_ordem_compra( nr_ordem_compra_w, 'N', nm_usuario_p, ds_erro_w, ds_alerta_w) INTO STRICT ds_erro_w, ds_alerta_w;
	if (coalesce(ds_erro_w::text, '') = '') then
		begin
		Calcular_Liquido_Ordem_Compra( nr_ordem_compra_w, nm_usuario_p);
		CALL gerar_aprov_ordem_compra( nr_ordem_compra_w, obter_perfil_Ativo, 'S', nm_usuario_p);
		end;
	end if;
	end;
end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_devolucao_ordem_transf ( nr_ordem_compra_p bigint, nm_usuario_p text, nr_ordem_devolucao_p INOUT bigint) FROM PUBLIC;

