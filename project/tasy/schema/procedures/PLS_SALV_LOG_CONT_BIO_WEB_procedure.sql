-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_salv_log_cont_bio_web ( nr_seq_prestador_p bigint, nr_seq_local_atend_p bigint, nr_seq_usuario_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Salvar o log do prestador quando o mesmo faz a validacao da biometria no portal
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ ] Tasy (Delphi/Java) [ 1] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
									 
	
nr_seq_local_atend_w		bigint;
nr_seq_controle_biomet_w	bigint;
ds_historico_w				varchar(4000);
ds_local_atend_w			varchar(255);
cd_prestador_w				varchar(30);
ie_valida_cod_prest_w		varchar(1);
dt_atual_w					timestamp;
nm_prestador_w				varchar(60);

C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_controle_biomet_prest a,
		pls_prestador b
	where	a.nr_seq_prestador = b.nr_sequencia
	and (a.nr_seq_prestador = nr_seq_prestador_p
	or (ie_valida_cod_prest_w = 'S'
	and	cd_prestador_w = b.cd_prestador
	and	(b.cd_prestador IS NOT NULL AND b.cd_prestador::text <> '')
	and	(cd_prestador_w IS NOT NULL AND cd_prestador_w::text <> '')))
	and	coalesce(a.dt_desativacao::text, '') = '';

BEGIN

dt_atual_w   := trunc(clock_timestamp());

begin
	select	cd_prestador,
			substr(pls_obter_dados_prestador(nr_sequencia, 'N'),1,60)
	into STRICT	cd_prestador_w,
			nm_prestador_w
	from	pls_prestador
	where	nr_sequencia = nr_seq_prestador_p;
exception
when others then
	cd_prestador_w := null;
	nm_prestador_w := null;
end;

-- verifica o tipo da regra, se valida pelo codigo ou sequencia do prestador
if (pls_obter_se_controle_estab('RE') = 'S') then
	select	coalesce(max(b.ie_valida_cod_prest),'N')
	into STRICT	ie_valida_cod_prest_w
	from	pls_regra_biometria_prest a,
		pls_prest_exige_biometria b,
		pls_prestador c
	where	a.nr_sequencia = b.nr_seq_regra_biometria
	and	c.nr_sequencia = b.nr_seq_prestador
	and (c.nr_sequencia = nr_seq_prestador_p
	or (coalesce(b.ie_valida_cod_prest, 'N') = 'S'
	and	c.cd_prestador = cd_prestador_w
	and	(c.cd_prestador IS NOT NULL AND c.cd_prestador::text <> '')
	and	(cd_prestador_w IS NOT NULL AND cd_prestador_w::text <> '')))
	and	a.ie_situacao = 'A'
	and	dt_atual_w between trunc(a.dt_inicio_vigencia) and coalesce(trunc(a.dt_fim_vigencia),dt_atual_w)
	and ((a.ds_horario_desabilita IS NOT NULL AND a.ds_horario_desabilita::text <> '') or (a.qt_horas_desabilita IS NOT NULL AND a.qt_horas_desabilita::text <> ''))
	and 	coalesce(a.cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento
	and	coalesce(a.ie_aplicacao_regra, 1) = 1;
else
	select	coalesce(max(b.ie_valida_cod_prest),'N')
	into STRICT	ie_valida_cod_prest_w
	from	pls_regra_biometria_prest a,
		pls_prest_exige_biometria b,
		pls_prestador c
	where	a.nr_sequencia = b.nr_seq_regra_biometria
	and	c.nr_sequencia = b.nr_seq_prestador
	and (c.nr_sequencia = nr_seq_prestador_p
	or (coalesce(b.ie_valida_cod_prest, 'N') = 'S'
	and	c.cd_prestador = cd_prestador_w
	and	(c.cd_prestador IS NOT NULL AND c.cd_prestador::text <> '')
	and	(cd_prestador_w IS NOT NULL AND cd_prestador_w::text <> '')))
	and	a.ie_situacao = 'A'
	and	dt_atual_w between trunc(a.dt_inicio_vigencia) and coalesce(trunc(a.dt_fim_vigencia),dt_atual_w)
	and ((a.ds_horario_desabilita IS NOT NULL AND a.ds_horario_desabilita::text <> '') or (a.qt_horas_desabilita IS NOT NULL AND a.qt_horas_desabilita::text <> ''))
	and	coalesce(a.ie_aplicacao_regra, 1) = 1;
end if;

-- dados do historico
ds_historico_w := expressao_pck.obter_desc_expressao(621062)||' "'||nm_usuario_p||'" habilitou a biometria';
nr_seq_local_atend_w := nr_seq_local_atend_p;

if (nr_seq_local_atend_w = 0) then
	nr_seq_local_atend_w := null;
	ds_historico_w := ds_historico_w;
else
	select	max(ds_local)
	into STRICT	ds_local_atend_w
	from	local_atendimento_medico
	where	nr_Sequencia = nr_seq_local_atend_w;
	
	ds_historico_w := ds_historico_w ||' no local de atendimento "'||ds_local_atend_w||'"';
end if;

-- desabilita as biometrias do prestador, e so deixa uma ativa.
for cr01 in C01 loop
	begin
		update	pls_controle_biomet_prest
		   set	dt_desativacao = clock_timestamp(),
			nm_usuario = nm_usuario_p,
			dt_atualizacao = clock_timestamp()
		where	nr_sequencia = cr01.nr_sequencia;
		
		insert into pls_hist_biometria_prest(	
				nr_sequencia, dt_historico, nr_seq_controle_prest,
				ds_historico, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec)
		values (	
				nextval('pls_hist_biometria_prest_seq'), clock_timestamp(), cr01.nr_sequencia,
				substr(ds_historico_w ||', com o prestador "'|| nm_prestador_w ||'"',1,4000), clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p );
	end;
end loop;

-- cadastra a biometria ativa e gera log
select	nextval('pls_controle_biomet_prest_seq')
into STRICT	nr_seq_controle_biomet_w
;

insert into pls_controle_biomet_prest(
		nr_sequencia, nr_seq_usuario_prest, nr_seq_prestador,
		dt_atualizacao, nm_usuario, dt_atualizacao_nrec,                                                                                                                                                                                      
		nm_usuario_nrec, nr_seq_local_atend, dt_ativacao)
		
values (	nr_seq_controle_biomet_w, nr_seq_usuario_p, nr_seq_prestador_p,
		clock_timestamp(), nm_usuario_p, clock_timestamp(),
		nm_usuario_p, nr_seq_local_atend_w, clock_timestamp());
								
insert into pls_hist_biometria_prest(
		nr_sequencia, dt_historico, nr_seq_controle_prest,
		ds_historico, dt_atualizacao, nm_usuario,
		dt_atualizacao_nrec, nm_usuario_nrec)
values (
		nextval('pls_hist_biometria_prest_seq'), clock_timestamp(), nr_seq_controle_biomet_w,
		ds_historico_w||'.', clock_timestamp(), nm_usuario_p,
		clock_timestamp(), nm_usuario_p);
     		
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_salv_log_cont_bio_web ( nr_seq_prestador_p bigint, nr_seq_local_atend_p bigint, nr_seq_usuario_p bigint, nm_usuario_p text) FROM PUBLIC;

