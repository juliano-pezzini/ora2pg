-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_geracao_sib ( nr_seq_lote_p pls_sib_lote.nr_sequencia%type, ie_acao_p bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


ie_permite_todos_inc_exc_w	varchar(1);
ie_tipo_lote_w			pls_sib_lote.ie_tipo_lote%type;
ie_tipo_movimento_w		pls_sib_lote.ie_tipo_movimento%type;
ie_gerar_correcao_w		pls_sib_lote.ie_gerar_correcao%type;
dt_referencia_w 		pls_sib_lote.dt_referencia%type;
dt_inicio_mov_w 		pls_sib_lote.dt_inicio_mov%type;
dt_fim_mov_w 			pls_sib_lote.dt_fim_mov%type;

qt_inclusao_w			integer;
qt_retificacao_w		integer;
qt_mudanca_contratual_w		integer;
qt_cancelamento_w		integer;
qt_reinclusao_w			integer;
nr_sequencia_w			integer;
qt_registro_w			integer;


BEGIN

ie_permite_todos_inc_exc_w	:= coalesce(obter_valor_param_usuario(280, 4, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p),'N');

if (ie_acao_p = 1) then --Geração do lote
	select	ie_tipo_lote,
		ie_tipo_movimento,
		ie_gerar_correcao,
		dt_referencia,
		dt_inicio_mov,
		dt_fim_mov
	into STRICT	ie_tipo_lote_w,
		ie_tipo_movimento_w,
		ie_gerar_correcao_w,
		dt_referencia_w,
		dt_inicio_mov_w,
		dt_fim_mov_w
	from	pls_sib_lote
	where	nr_sequencia	= nr_seq_lote_p;

	if (ie_permite_todos_inc_exc_w = 'N') and (ie_tipo_lote_w in ('I','E')) then --Não foi possível gerar o lote de "#@DS_TIPO_LOTE#@". Favor verificar o parâmetro [4].
		CALL wheb_mensagem_pck.exibir_mensagem_abort(795687, 'DS_TIPO_LOTE='|| obter_valor_dominio(8351,ie_tipo_lote_w));
	end if;

	if 	((coalesce(dt_inicio_mov_w::text, '') = '') or (coalesce(dt_fim_mov_w::text, '') = ''))	and (ie_tipo_lote_w = 'M')	then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(822464, ''); --Para gerar um lote de movimentação é obrigatório o preenchimento dos campos "Dt início movimentação" e "Dt fim movimentação".
	end if;

	if (ie_tipo_lote_w = 'M') then
		if (ie_tipo_movimento_w IS NOT NULL AND ie_tipo_movimento_w::text <> '') then --Se for lote específico para uma movimentação, não pode existir lote geral ou com o mesmo tipo de movimentação pendente
			select	count(1)
			into STRICT   	qt_registro_w
			from 	pls_sib_lote
			where 	ie_status in (2,3)
			and (ie_tipo_movimento = ie_tipo_movimento_w or coalesce(ie_tipo_movimento::text, '') = '');
		else --Se for lote geral, não pode existir nenhum lote gerado
			select	count(1)
			into STRICT   	qt_registro_w
			from 	pls_sib_lote
			where 	ie_status in (2,3);
		end if;

		if (qt_registro_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(856856, ''); --Existe lote de movimentação gerado que ainda não foi enviado, por favor verifique!
		end if;
	end if;

	if (ie_tipo_lote_w in ('X','Z')) then
		select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_sequencia_w
		from	pls_sib_arquivo
		where	nr_seq_lote = nr_seq_lote_p;

		insert	into	pls_sib_arquivo(
						nr_sequencia,
						nr_seq_lote,
						qt_movimentacao,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						dt_atualizacao,
						nm_usuario)
				values (	nr_sequencia_w,
						nr_seq_lote_p,
						0,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p);
	else
		CALL pls_sib_selecao_benef_pck.selecionar_universo(nr_seq_lote_p, ie_tipo_lote_w, ie_tipo_movimento_w, ie_gerar_correcao_w, dt_referencia_w, dt_inicio_mov_w, dt_fim_mov_w, nm_usuario_p, cd_estabelecimento_p);
		CALL pls_sib_geracao_pck.gerar_movimentacao(nr_seq_lote_p, nm_usuario_p, cd_estabelecimento_p);
	end if;

	select	coalesce(sum(qt_inclusao),0),
		coalesce(sum(qt_retificacao),0),
		coalesce(sum(qt_mudanca_contratual),0),
		coalesce(sum(qt_cancelamento),0),
		coalesce(sum(qt_reinclusao),0)
	into STRICT	qt_inclusao_w,
		qt_retificacao_w,
		qt_mudanca_contratual_w,
		qt_cancelamento_w,
		qt_reinclusao_w
	from (
		SELECT	CASE WHEN ie_tipo_movimento=1 THEN 1  ELSE 0 END  qt_inclusao,
			CASE WHEN ie_tipo_movimento=2 THEN 1  ELSE 0 END  qt_retificacao,
			CASE WHEN ie_tipo_movimento=3 THEN 1  ELSE 0 END  qt_mudanca_contratual,
			CASE WHEN ie_tipo_movimento=4 THEN 1  ELSE 0 END  qt_cancelamento,
			CASE WHEN ie_tipo_movimento=5 THEN 1  ELSE 0 END  qt_reinclusao
		from	pls_sib_movimento
		where	nr_seq_lote	= nr_seq_lote_p) alias10;

	update	pls_sib_lote
	set	ie_status	= 2,
		qt_inclusao	= qt_inclusao_w,
		qt_retificacao	= qt_retificacao_w,
		qt_mudanca_contratual = qt_mudanca_contratual_w,
		qt_cancelamento	= qt_cancelamento_w,
		qt_reativacao	= qt_reinclusao_w,
		qt_movimentacao	= (qt_inclusao_w+qt_retificacao_w+qt_mudanca_contratual_w+qt_cancelamento_w+qt_reinclusao_w)
	where	nr_sequencia	= nr_seq_lote_p;

elsif (ie_acao_p = 2) then --Desfazer geração do lote
	delete from pls_sib_log
	where	nr_seq_lote	= nr_seq_lote_p;

	delete from pls_sib_movimento
	where	nr_seq_lote	= nr_seq_lote_p;

	delete	FROM pls_sib_arquivo
	where 	nr_seq_lote = nr_seq_lote_p;

	update	pls_sib_lote
	set	ie_status = 1,
		qt_inclusao	= 0,
		qt_retificacao	= 0,
		qt_mudanca_contratual = 0,
		qt_cancelamento	= 0,
		qt_reativacao	= 0,
		qt_movimentacao	= 0
	where	nr_sequencia	= nr_seq_lote_p;

	update	pls_sib_reenvio
	set	nr_seq_lote_sib	 = NULL
	where	nr_seq_lote_sib = nr_seq_lote_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_geracao_sib ( nr_seq_lote_p pls_sib_lote.nr_sequencia%type, ie_acao_p bigint, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

