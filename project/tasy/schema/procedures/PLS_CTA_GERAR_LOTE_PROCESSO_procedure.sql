-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_cta_gerar_lote_processo ( nr_seq_lote_p pls_cta_lote_processo.nr_sequencia%type, nm_usuario_p text, ie_lote_pos_p text default 'N') AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Obter os filtros do lote e vincular as contas que ser?o processadas
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  ]  Objetos do dicion?rio [ X] Tasy (Delphi/Java) [  ] Portal [  ]  Relat?rios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de aten??o:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_select_w		varchar(32000);
ds_restricao_w		varchar(32000)	:= null;
ds_sql_w		varchar(32000);
nr_seq_filtro_w		pls_cta_lote_proc_filtro.nr_sequencia%type;
nr_seq_conta_w		dbms_sql.number_table;
qt_cnt_w		integer;
var_cur_w		integer;
var_exec_w		integer;
var_retorno_w		integer;
dt_mes_competencia_w	timestamp;
qt_regra_proc_w		bigint;
qt_regra_serv_w		bigint;
qt_regra_mat_w		bigint;
qt_filtros_inter_w	integer := 0;
qt_analise_w		pls_cta_lote_processo.qt_analise%type;
nr_seq_lote_w		pls_cta_lote_processo.nr_sequencia%type;
nm_lote_w		pls_cta_lote_processo.nm_lote%type;
nm_lote_novo_w		pls_cta_lote_processo.nm_lote%type;
qt_lotes_gerados_w	bigint;
qt_analise_lote_w	integer;
qt_saldo_sem_analise_w	integer;
qt_cta_gerado_w		integer;
max_seq_analise_lote_w	pls_conta.nr_seq_analise%type;
tb_seq_w			pls_util_cta_pck.t_number_table;

c_filtro CURSOR(	nr_seq_lote_pc	pls_cta_lote_processo.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		a.ie_lote_conta,
		a.ie_prestador,
		a.ie_ocorrencia,
		a.ie_protocolo,
		a.ie_conta,
		a.ie_pagamento,
		a.ie_criterio_valorizacao,
		a.ie_intercambio,
		a.ie_segurado
	from	pls_cta_lote_proc_filtro a
	where	a.nr_seq_lote_processo	= nr_seq_lote_pc;
	
c_filtro_intercambio CURSOR(	nr_seq_lote_pc	pls_cta_lote_proc_filtro.nr_sequencia%type) FOR
	SELECT	nr_seq_ops_congenere,
		ie_tipo_intercambio
	from	pls_cta_prc_filtro_inter
	where	nr_seq_lote_filtro = nr_seq_lote_pc;
	
c_remove_fat is CURSOR
	with query_tmp as (  SELECT   max(b.nr_seq_analise) nr_seq_analise,
              b.nr_seq_conta
		from  pls_cta_lote_proc_conta a,
        pls_conta_pos_estabelecido b
		where   nr_seq_lote_processo = nr_seq_lote_p
		and   b.nr_seq_conta = a.nr_seq_conta
		group by b.nr_seq_conta
	)
	SELECT  x.nr_seq_conta
	from  	pls_conta_pos_estabelecido x,
		pls_cta_lote_proc_conta y,
		query_tmp t
	where  	y.nr_seq_lote_processo = nr_seq_lote_p
	and   	x.nr_seq_conta = y.nr_seq_conta
	and   	y.nr_seq_conta = t.nr_seq_conta
	and 	exists (        select 	1 
				from   	pls_conta_pos_estabelecido ps,
						pls_lote_faturamento b
				where  	ps.nr_seq_analise = t.nr_seq_analise 
				and 	ps.nr_seq_lote_fat = b.nr_sequencia
				and 	(ps.nr_seq_lote_fat IS NOT NULL AND ps.nr_seq_lote_fat::text <> '')
				and		b.ie_tipo_lote <> 'A')
	group by x.nr_seq_conta;
	
procedure pls_replica_conta_sem_analise(	nm_lote_p		pls_cta_lote_processo.nm_lote%type,
						qt_lotes_gerados_p	integer,
						qt_analise_p		pls_cta_lote_processo.qt_analise%type
						)  is
nm_lote_novo_sem_analise_w	pls_cta_lote_processo.nm_lote%type;
nr_seq_novo_lote_w		pls_cta_lote_processo.nr_sequencia%type;

BEGIN

	-- nova PK
	select	nextval('pls_cta_lote_processo_seq')
	into STRICT	nr_seq_novo_lote_w
	;
	
	-- novo nome do lote
	nm_lote_novo_sem_analise_w	:= substr(nm_lote_w,1, 255 - length(qt_lotes_gerados_w + 3)) ||' ('||to_char(qt_lotes_gerados_w)||')';
	
	-- insere novo lote
	insert into pls_cta_lote_processo(	nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						dt_mes_competencia,
						nr_seq_lote_princ,
						qt_analise,
						nm_lote,
						ie_status,
						dt_geracao_lote,
						nm_id_job,
						nm_id_sid,
						nm_id_serial)
	SELECT	nr_seq_novo_lote_w,
		clock_timestamp(),
		a.nm_usuario,
		clock_timestamp(),
		a.dt_mes_competencia,
		nr_seq_lote_p,
		a.qt_analise,
		nm_lote_novo_sem_analise_w,
		a.ie_status,
		(case when(ie_lote_pos_p = 'N') or (coalesce(ie_lote_pos_p::text, '') = '') then clock_timestamp() else null end) dt_geracao_lote,
		a.nm_id_job,
		a.nm_id_sid,
		a.nm_id_serial
	from	pls_cta_lote_processo	a
	where	a.nr_sequencia = nr_seq_lote_p;
	
	insert into pls_cta_lote_proc_conta(nr_sequencia,
		nm_usuario,
		dt_atualizacao,
		nm_usuario_nrec,
		dt_atualizacao_nrec,
		nr_seq_lote_processo,
		nr_seq_conta)
	SELECT	nextval('pls_cta_lote_proc_conta_seq'),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nr_seq_novo_lote_w,
		a.nr_seq_conta
	from	pls_cta_lote_proc_conta	a,
		pls_conta		b
	where	a.nr_seq_conta		= b.nr_sequencia
	and	coalesce(b.nr_seq_analise::text, '') = ''
	and	a.nr_seq_lote_processo	= nr_seq_lote_p  LIMIT (qt_analise_p);

	-- remove as contas do lote principal
	delete	from pls_cta_lote_proc_conta
	where	nr_seq_lote_processo = nr_seq_lote_p
	and	nr_seq_conta in (	SELECT	x.nr_seq_conta
					from	pls_cta_lote_proc_conta	x
					where	x.nr_seq_lote_processo	= nr_seq_novo_lote_w);

end;

	
begin

if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then

	-- Obter o controle padr?o para quantidade de registros que ser? enviada a cada vez para a tabela de sele??o.
	qt_cnt_w := pls_cta_consistir_pck.qt_registro_transacao_w;
	

	-- apaga todas as contas do lote
	delete	FROM pls_cta_lote_proc_conta a
	where	a.nr_seq_lote_processo	= nr_seq_lote_p;
	commit;

	select	a.dt_mes_competencia,
		coalesce(a.qt_analise,0),
		nm_lote
	into STRICT	dt_mes_competencia_w,
		qt_analise_w,
		nm_lote_w
	from	pls_cta_lote_processo a
	where	a.nr_sequencia	= nr_seq_lote_p;

	ds_restricao_w	:= null;
	--N?o entrar contas que j? est?o em lote de pagamento
	ds_select_w	:= 	'select	a.nr_sequencia nr_seq_conta ' || pls_util_pck.enter_w ||
				'from	pls_conta_v a ' || pls_util_pck.enter_w ||
				'where	a.dt_mes_competencia between :dt_inicial and :dt_final' || pls_util_pck.enter_w||
				'and	a.ie_status_protocolo in (''1'', ''2'', ''3'', ''5'',''6'')' || pls_util_pck.enter_w||
				'and	a.ie_situacao_protocolo in (''D'', ''T'')' || pls_util_pck.enter_w||
				'and	a.ie_status	!= ''C'' '||pls_util_pck.enter_w;
				
	--Somente criar as retri??es de p?s-estabelecido quando estiver processando lote de faturamento. Se iver processando o lote de pagamento, ent?o 
	if (ie_lote_pos_p = 'S') then		
				ds_select_w:= ds_select_w||'	and	not exists (select 1 from pls_conta_pos_estabelecido y, pls_lote_faturamento y1 where y.nr_seq_lote_fat = y1.nr_sequencia'|| pls_util_pck.enter_w||
				'and ((y.ie_situacao  = ''A'') or (y.ie_situacao  is null)) and  y1.ie_tipo_lote <> ''A''' || pls_util_pck.enter_w||
				'and  y.nr_seq_conta = a.nr_sequencia and y.nr_seq_lote_fat is not null )' || pls_util_pck.enter_w||
							'	and	not exists (select 1 from pls_conta_pos_estabelecido y, pls_analise_conta x where x.nr_seq_analise_ref = a.nr_seq_analise and x.nr_sequencia = y.nr_seq_analise and y.nr_seq_lote_fat is not null)' || pls_util_pck.enter_w;
	end if;
	
	if (ie_lote_pos_p	= 'N') 	or (coalesce(ie_lote_pos_p::text, '') = '') then
				ds_select_w:= ds_select_w||	' and 	not exists (select 1 from ptu_fatura z where z.nr_sequencia = a.nr_seq_fatura and z.ie_status in (''AF'',''E''))'|| pls_util_pck.enter_w||
								' and    a.ie_tipo_protocolo != ''R'' '||pls_util_pck.enter_w||
								' and 	not exists (select 1 from pls_conta_medica_resumo x where x.nr_seq_conta = a.nr_sequencia and ie_situacao = ''A'' and x.nr_seq_lote_pgto is not null)'|| pls_util_pck.enter_w||
								' and	not exists (	select	1 					'||pls_util_pck.enter_w||
								'			from	sip_nv_dados x,				'||pls_util_pck.enter_w||
								'				pls_lote_sip y				'||pls_util_pck.enter_w||
								'			where	x.nr_seq_lote_sip = y.nr_sequencia	'||pls_util_pck.enter_w||
								'			and	x.nr_seq_conta = a.nr_sequencia		'||pls_util_pck.enter_w||
								'			and 	x.ie_conta_enviada_ans = ''S''		'||pls_util_pck.enter_w||
								'			and	y.dt_envio is not null			)'||pls_util_pck.enter_w;
	end if;
	nr_seq_filtro_w := null;
	for	r_c_filtro_w in c_filtro(nr_seq_lote_p) loop
		
		ds_restricao_w := null;
		
		-- Restri??es por lote de an?lise
		if (r_c_filtro_w.ie_lote_conta = 'S') then
			ds_restricao_w	:= ds_restricao_w || ' and	exists	(select 1 ' || pls_util_pck.enter_w ||
								'		 from	pls_cta_prc_filtro_lote x ' || pls_util_pck.enter_w ||
								'		 where	x.nr_seq_lote_filtro = :nr_seq_filtro' || pls_util_pck.enter_w ||
								'		 and	((x.nr_seq_lote_conta = a.nr_seq_lote_conta) or (x.nr_seq_lote_conta is null))'|| pls_util_pck.enter_w||
								'		 and	((x.ie_status	      = a.ie_status_lote)    or (x.ie_status is null)))'|| pls_util_pck.enter_w;
		end if;
		-- Restri??es por prestador
		if (r_c_filtro_w.ie_prestador = 'S') then
			ds_restricao_w	:= ds_restricao_w || ' and	exists	(select 1 ' || pls_util_pck.enter_w ||
								'		 from	pls_cta_prc_filtro_prest x ' || pls_util_pck.enter_w ||
								'		 where	x.nr_seq_lote_filtro = :nr_seq_filtro' || pls_util_pck.enter_w ||
								'		 and	x.nr_seq_prestador = a.nr_seq_prestador_prot' || pls_util_pck.enter_w ||
								'		 and	x.ie_prestador = ' || pls_util_pck.aspas_w || 'P' || pls_util_pck.aspas_w || pls_util_pck.enter_w ||
								'		 union all ' || pls_util_pck.enter_w ||
								'		 select 1 ' || pls_util_pck.enter_w ||
								'		 from	pls_cta_prc_filtro_prest x ' || pls_util_pck.enter_w ||
								'		 where	x.nr_seq_lote_filtro = :nr_seq_filtro' || pls_util_pck.enter_w ||
								'		 and	x.nr_seq_prestador = a.nr_seq_prestador_exec' || pls_util_pck.enter_w ||
								'		 and	x.ie_prestador = ' || pls_util_pck.aspas_w || 'E' ||  pls_util_pck.aspas_w || ')' || pls_util_pck.enter_w;
				end if;
		-- Restri??es por ocorr?ncia
		if (r_c_filtro_w.ie_ocorrencia = 'S') then
			ds_restricao_w	:= ds_restricao_w || '  and	exists	(select 1 ' || pls_util_pck.enter_w ||
						'				 from	pls_ocorrencia_benef y,' || pls_util_pck.enter_w ||
						'					pls_cta_prc_filtro_ocor x ' || pls_util_pck.enter_w ||
						'				 where	y.nr_seq_conta = a.nr_sequencia ' || pls_util_pck.enter_w ||
						'				 and	x.nr_seq_lote_filtro = :nr_seq_filtro' || pls_util_pck.enter_w ||
						'				 and	x.nr_seq_ocorrencia = y.nr_seq_ocorrencia' || pls_util_pck.enter_w ||
						'				 and	((x.ie_ocorrencia_ativa = ' || pls_util_pck.aspas_w || 'S' ||  pls_util_pck.aspas_w || ' and y.ie_situacao = ' || pls_util_pck.aspas_w || 'A' ||  pls_util_pck.aspas_w || ') or ' || pls_util_pck.enter_w ||
						'				 	(x.ie_ocorrencia_ativa <> ' || pls_util_pck.aspas_w || 'S' ||  pls_util_pck.aspas_w || ')) '|| pls_util_pck.enter_w ||
						'				 and	x.ie_pagamento_faturamento = ' || pls_util_pck.aspas_w || 'P' || pls_util_pck.aspas_w || pls_util_pck.enter_w ||
						'				 union all ' ||  pls_util_pck.enter_w ||
						'				 select	1 ' ||  pls_util_pck.enter_w ||
						'				 from	pls_ocorrencia_benef y,' || pls_util_pck.enter_w ||
						'					pls_cta_prc_filtro_ocor x, ' || pls_util_pck.enter_w ||
						'					pls_conta_pos_estabelecido z ' || pls_util_pck.enter_w ||
						'				 where	z.nr_seq_conta = a.nr_sequencia '  || pls_util_pck.enter_w ||
						'				 and	z.nr_sequencia = y.nr_seq_conta_pos_estab ' || pls_util_pck.enter_w ||
						'				 and	x.nr_seq_ocorrencia = y.nr_seq_ocorrencia ' || pls_util_pck.enter_w ||
						'				 and	x.nr_seq_lote_filtro = :nr_seq_filtro ' || pls_util_pck.enter_w ||
						'				 and	((x.ie_ocorrencia_ativa = ' || pls_util_pck.aspas_w || 'S' ||  pls_util_pck.aspas_w || ' and y.ie_situacao = ' || pls_util_pck.aspas_w || 'A' ||  pls_util_pck.aspas_w || ') or ' || pls_util_pck.enter_w ||
						'				 	(x.ie_ocorrencia_ativa <> ' || pls_util_pck.aspas_w || 'S' ||  pls_util_pck.aspas_w || ')) '|| pls_util_pck.enter_w ||
						'				 and	x.ie_pagamento_faturamento = ' || pls_util_pck.aspas_w || 'F' || pls_util_pck.aspas_w || ' ) ' || pls_util_pck.enter_w;
		end if;

		-- Restri??es por protocolo
		if (r_c_filtro_w.ie_protocolo = 'S') then
			ds_restricao_w	:= ds_restricao_w || ' and	exists	(select 1 ' || pls_util_pck.enter_w ||
						'				 from	pls_cta_prc_filtro_prot x ' || pls_util_pck.enter_w ||
						'				 where	x.nr_seq_lote_filtro = :nr_seq_filtro' || pls_util_pck.enter_w ||
						'				 and	a.ie_origem_protocolo = x.ie_origem_protocolo)' || pls_util_pck.enter_w;
		end if;

		-- Restri??o pela Conta
		if (r_c_filtro_w.ie_conta = 'S') then
			ds_restricao_w 	:= ds_restricao_w || '  and 	exists	(select 1 ' || pls_util_pck.enter_w ||
						'				 from	pls_cta_prc_filtro_cta x ' || pls_util_pck.enter_w ||
						'				 where	x.nr_seq_lote_filtro = :nr_seq_filtro ' || pls_util_pck.enter_w ||
						'				 and	a.ie_status	= x.ie_status)' || pls_util_pck.enter_w;
		end if;

		--Restri??o por pagamento
		if (r_c_filtro_w.ie_pagamento = 'S') then
			ds_restricao_w 	:= ds_restricao_w || '  and 	exists	(select 1 ' || pls_util_pck.enter_w ||
								'		 from	pls_cta_prc_filtro_pag x, ' || pls_util_pck.enter_w ||
								'			pls_conta_medica_resumo y ' || pls_util_pck.enter_w ||
								'		 where	y.nr_seq_conta	= a.nr_sequencia ' || pls_util_pck.enter_w ||
								'		 and	x.nr_seq_lote_filtro = :nr_seq_filtro ' || pls_util_pck.enter_w ||
								'		 and	y.nr_seq_evento	 = x.nr_seq_evento)' || pls_util_pck.enter_w;
		end if;
		
		--Restri??o por pinterc?mbio
		if (r_c_filtro_w.ie_intercambio = 'S') then
			
			--Somente ir? adicionar restri??o caso tiver uma registro para o filtro de interc?mbio para o lote em quest?o.
			for r_c_filtro_inter_w in c_filtro_intercambio(r_c_filtro_w.nr_sequencia) loop
		
				--Se o filtro tiver restringindo pela cong?nere
				if (r_c_filtro_inter_w.nr_seq_ops_congenere IS NOT NULL AND r_c_filtro_inter_w.nr_seq_ops_congenere::text <> '') then
				
					--Se existirem mais de um filtro por interc?mbio, ent?o utilizo union all para conta ser v?lida se for atendido por ao menos 

					--um dos selects do union. esse controle qt_filtros_inter_w ? utilizado apenas para a montagem correta do sql din?mico
					if (qt_filtros_inter_w > 0) then
						
						ds_restricao_w 	:= ds_restricao_w ||'union all '|| pls_util_pck.enter_w;
						
					else
						
						ds_restricao_w 	:= ds_restricao_w || '  and 	exists	( ' || pls_util_pck.enter_w;
					
					end if;
				
					--Adiciona a restri??o por tipo de interc?mbio aqui dentro do tipo de interc?mbio, pois se o filtro tiver 

					--os dois campos informados(nr_seq_congenere e ie_tipo_intercambio), ent?o monta um ?nico exists

					--Com as duas restri??es		
					if (r_c_filtro_inter_w.ie_tipo_intercambio in ('E','N')) then
														
						ds_restricao_w 	:= ds_restricao_w || '  select 1 ' || pls_util_pck.enter_w ||
							'				from	pls_cta_prc_filtro_inter x ' || pls_util_pck.enter_w ||
							'				where	x.nr_seq_ops_congenere	= a.nr_seq_congenere_seg ' || pls_util_pck.enter_w||
							'				and	((x.nr_seq_ops_congenere	=  '||r_c_filtro_inter_w.nr_seq_ops_congenere|| pls_util_pck.enter_w||
							'				and 	pls_obter_tipo_intercambio(a.nr_seq_congenere_seg, a.cd_estabelecimento) = '''||r_c_filtro_inter_w.ie_tipo_intercambio||''' ' ||pls_util_pck.enter_w;

						
					else
						--No caso do filtro por tipo de interc?mbio estiver como ambos, ent?o n?o precisa restringir por esse campo, pois todas as contas s?o v?lidas para essa restri??o
						ds_restricao_w 	:= ds_restricao_w || '  select 1 ' || pls_util_pck.enter_w ||
							'				from	pls_cta_prc_filtro_inter x ' || pls_util_pck.enter_w ||
							'				where	x.nr_seq_ops_congenere	= a.nr_seq_congenere_seg ' || pls_util_pck.enter_w||
							'				and	x.nr_seq_ops_congenere	=  '||r_c_filtro_inter_w.nr_seq_ops_congenere|| pls_util_pck.enter_w||
							'				and	a.nr_seq_congenere_seg is not null'||pls_util_pck.enter_w; --Essa restri??o ? para garantir que apenas interc?mbio caia aqui, n?o contratos pr?prios.
					end if;		
					
					--Controle para a correta montagem do sql din?mico
					qt_filtros_inter_w := qt_filtros_inter_w + 1;
					
				else
					--Se cair aqui, ent?o n?o esta restringindo pela cong?nere e s? precisar? montar filtro caso o tipo de interc?mbio n?o for "ambos"
					if (r_c_filtro_inter_w.ie_tipo_intercambio in ('E','N')) then
					
						if (qt_filtros_inter_w > 0) then
							
							ds_restricao_w 	:= ds_restricao_w ||'union all '|| pls_util_pck.enter_w;
						else
							
							ds_restricao_w 	:= ds_restricao_w || '  and 	exists	( ' || pls_util_pck.enter_w;
							
						end if;
						
						ds_restricao_w 	:= ds_restricao_w || '  select 1 ' || pls_util_pck.enter_w ||
								'			from	pls_cta_prc_filtro_inter x ' || pls_util_pck.enter_w ||
								'			where	pls_obter_tipo_congenere(a.nr_seq_congenere_seg) = ''CO'' ' || pls_util_pck.enter_w||
								'			and	pls_obter_tipo_intercambio(a.nr_seq_congenere_seg, a.cd_estabelecimento) = '''||r_c_filtro_inter_w.ie_tipo_intercambio||''' ' ||pls_util_pck.enter_w;
								
						qt_filtros_inter_w := qt_filtros_inter_w + 1;
					
					else
						if (qt_filtros_inter_w > 0) then
							
							ds_restricao_w 	:= ds_restricao_w ||'union all '|| pls_util_pck.enter_w;
						else
							
							ds_restricao_w 	:= ds_restricao_w || '  and 	exists	( ' || pls_util_pck.enter_w;
							
						end if;
						
						ds_restricao_w 	:= ds_restricao_w || '  select 1 ' || pls_util_pck.enter_w ||
								'			from	pls_cta_prc_filtro_inter x ' || pls_util_pck.enter_w ||
								'			where	pls_obter_tipo_congenere(a.nr_seq_congenere_seg) = ''CO'' ' || pls_util_pck.enter_w||
								'			and	a.nr_seq_congenere_seg is not null'||pls_util_pck.enter_w;
								
						qt_filtros_inter_w := qt_filtros_inter_w + 1;
						
					
					end if;
											
				end if;
				
			end loop;
						
			--Se Teve algum filtro v?lido, ent?o precisa fechar corretametente o exists no sql din?mico
			if (qt_filtros_inter_w > 0) then
				ds_restricao_w 	:= ds_restricao_w || '  )' || pls_util_pck.enter_w;
			end if;
						
		end if;

		--Restri??o por Crit?rio de pagamento
		if (r_c_filtro_w.ie_criterio_valorizacao = 'S') then
			
			r_c_filtro_w.ie_criterio_valorizacao := 'N';
			
			select (select	count(1) from pls_cta_prc_filtro_cpa where nr_seq_lote_filtro = r_c_filtro_w.nr_sequencia and (nr_seq_regra IS NOT NULL AND nr_seq_regra::text <> '')) qt_regra_proc,
				(select	count(1) from pls_cta_prc_filtro_cpa where nr_seq_lote_filtro = r_c_filtro_w.nr_sequencia and (nr_seq_regra_serv IS NOT NULL AND nr_seq_regra_serv::text <> '')) qt_regra_serv,
				(select	count(1) from pls_cta_prc_filtro_cpa where nr_seq_lote_filtro = r_c_filtro_w.nr_sequencia and (nr_seq_regra_mat IS NOT NULL AND nr_seq_regra_mat::text <> '')) qt_regra_mat
			into STRICT	qt_regra_proc_w,
				qt_regra_serv_w,
				qt_regra_mat_w
			;
			
			if (qt_regra_proc_w > 0) then
				ds_restricao_w 	:= ds_restricao_w || ' and 	exists	(select 1 ' || pls_util_pck.enter_w ||
							'				from	pls_cta_prc_filtro_cpa x, ' || pls_util_pck.enter_w ||
							'					pls_conta_proc y ' || pls_util_pck.enter_w ||
							'				where	y.nr_seq_conta	= a.nr_sequencia ' || pls_util_pck.enter_w ||
							'				and	x.nr_seq_lote_filtro = :nr_seq_filtro ' || pls_util_pck.enter_w ||
							'				and	y.nr_seq_regra = x.nr_seq_regra ' || pls_util_pck.enter_w ||
							'				and	y.ie_tipo_despesa in (''1'',''4'') ' || pls_util_pck.enter_w ||
							'				and	x.ie_pagamento_faturamento = ' || pls_util_pck.aspas_w || 'P' || pls_util_pck.aspas_w || pls_util_pck.enter_w ||
							'				union all ' || pls_util_pck.enter_w ||
							'				select	1 ' || pls_util_pck.enter_w ||
							'				from	pls_cta_prc_filtro_cpa x, ' || pls_util_pck.enter_w ||
							'					pls_conta_proc y, ' || pls_util_pck.enter_w ||
							'					pls_conta_pos_estabelecido z ' || pls_util_pck.enter_w ||
							'				where	y.nr_sequencia = z.nr_seq_conta_proc ' || pls_util_pck.enter_w ||
							'				and	y.nr_seq_conta = a.nr_sequencia ' || pls_util_pck.enter_w ||
							'				and	nvl(z.nr_seq_regra_pos_estab, nr_seq_pos_estab_interc) = x.nr_seq_regra ' || pls_util_pck.enter_w ||
							'				and	y.ie_tipo_despesa in (''1'',''4'') ' || pls_util_pck.enter_w ||
							'				and	x.nr_seq_lote_filtro = :nr_seq_filtro ' || pls_util_pck.enter_w ||
							'				and	x.ie_pagamento_faturamento = ' || pls_util_pck.aspas_w || 'F' || pls_util_pck.aspas_w || ' ) ' || pls_util_pck.enter_w;

				r_c_filtro_w.ie_criterio_valorizacao := 'S';
			end if;
			
			if (qt_regra_serv_w > 0) then
				ds_restricao_w 	:= ds_restricao_w || ' and	exists	(select	1 ' || pls_util_pck.enter_w ||
							'				from	pls_cta_prc_filtro_cpa x, ' || pls_util_pck.enter_w ||
							'					pls_conta_proc y '  || pls_util_pck.enter_w ||
							'				where	y.nr_seq_conta = a.nr_sequencia ' || pls_util_pck.enter_w ||
							'				and	y.nr_seq_regra = x.nr_seq_regra_serv ' || pls_util_pck.enter_w ||
							'				and	x.nr_seq_lote_filtro = :nr_seq_filtro ' || pls_util_pck.enter_w ||
							'				and	y.ie_tipo_despesa in (''2'',''3'') ' || pls_util_pck.enter_w ||
							'				and	x.ie_pagamento_faturamento = ' || pls_util_pck.aspas_w || 'P' || pls_util_pck.aspas_w || pls_util_pck.enter_w ||
							'				union all ' || pls_util_pck.enter_w ||
							'				select	1 ' || pls_util_pck.enter_w ||
							'				from	pls_cta_prc_filtro_cpa x, ' || pls_util_pck.enter_w ||
							'					pls_conta_proc y, ' || pls_util_pck.enter_w ||
							'					pls_conta_pos_estabelecido z ' || pls_util_pck.enter_w ||
							'				where	y.nr_sequencia = z.nr_seq_conta_proc ' || pls_util_pck.enter_w ||
							'				and	y.nr_seq_conta = a.nr_sequencia ' || pls_util_pck.enter_w ||
							'				and	nvl(z.nr_seq_regra_pos_estab, nr_seq_pos_estab_interc) = x.nr_seq_regra_serv ' || pls_util_pck.enter_w ||
							'				and	y.ie_tipo_despesa in (''3'',''2'') ' || pls_util_pck.enter_w ||
							'				and	x.nr_seq_lote_filtro = :nr_seq_filtro ' || pls_util_pck.enter_w ||
							'				and	x.ie_pagamento_faturamento = ' || pls_util_pck.aspas_w || 'F' || pls_util_pck.aspas_w || ' ) ' || pls_util_pck.enter_w;
							
				r_c_filtro_w.ie_criterio_valorizacao := 'S';
			end if;
			if (qt_regra_mat_w > 0) then
				ds_restricao_w 	:= ds_restricao_w || ' and	exists	(select	1 ' || pls_util_pck.enter_w ||
							'				from	pls_cta_prc_filtro_cpa x, ' || pls_util_pck.enter_w ||
							'					pls_conta_mat y ' || pls_util_pck.enter_w ||
							'				where	y.nr_seq_conta = a.nr_sequencia ' || pls_util_pck.enter_w ||
							'				and	x.nr_seq_lote_filtro = :nr_seq_filtro ' || pls_util_pck.enter_w ||
							'				and	y.nr_seq_regra = x.nr_seq_regra_mat ' || pls_util_pck.enter_w ||
							'				and	x.ie_pagamento_faturamento = ' || pls_util_pck.aspas_w || 'P' || pls_util_pck.aspas_w || pls_util_pck.enter_w ||
							'				union all ' || pls_util_pck.enter_w ||
							'				select	1 ' || pls_util_pck.enter_w ||
							'				from	pls_cta_prc_filtro_cpa x, ' || pls_util_pck.enter_w ||
							'					pls_conta_mat y, ' || pls_util_pck.enter_w ||
							'					pls_conta_pos_estabelecido z ' || pls_util_pck.enter_w ||
							'				where	y.nr_sequencia = z.nr_seq_conta_mat ' || pls_util_pck.enter_w ||
							'				and	y.nr_seq_conta = a.nr_sequencia ' || pls_util_pck.enter_w ||
							'				and	x.nr_seq_lote_filtro = :nr_seq_filtro ' || pls_util_pck.enter_w ||
							'				and	nvl(z.nr_seq_regra_pos_estab, nr_seq_pos_estab_interc) = x.nr_seq_regra_mat ' || pls_util_pck.enter_w ||
							'				and	x.ie_pagamento_faturamento = ' || pls_util_pck.aspas_w || 'F' || pls_util_pck.aspas_w || ' ) ' || pls_util_pck.enter_w;
							
				r_c_filtro_w.ie_criterio_valorizacao := 'S';
			end if;
		end if;
		
		--Restri??o por segurado
		
		if (r_c_filtro_w.ie_segurado = 'S') then
			ds_restricao_w 	:= ds_restricao_w || 	' and 	exists	(	select 	1 					' || pls_util_pck.enter_w ||
								'			from	pls_cta_prc_filtro_seq x 		' || pls_util_pck.enter_w ||
								'			where	x.nr_seq_contrato = a.nr_seq_contrato 	' || pls_util_pck.enter_w ||
								'			and	x.nr_seq_lote_filtro = :nr_seq_filtro)  ' || pls_util_pck.enter_w;
		end if;


		if	((r_c_filtro_w.ie_lote_conta = 'S') or (r_c_filtro_w.ie_prestador = 'S') or (r_c_filtro_w.ie_ocorrencia = 'S') or (r_c_filtro_w.ie_protocolo = 'S') or (r_c_filtro_w.ie_conta = 'S') or (r_c_filtro_w.ie_pagamento = 'S') or (r_c_filtro_w.ie_criterio_valorizacao = 'S') or (r_c_filtro_w.ie_segurado = 'S')) then
			nr_seq_filtro_w := r_c_filtro_w.nr_sequencia;
		end if;
						
	end loop;
	
	ds_sql_w	:= ds_select_w	|| ds_restricao_w;
		
	-- para retirar fora as contas que j? existem na tabela.

	-- isso ? necess?rio por que no meio do processo s?o criadas novas contas
	ds_sql_w := ds_sql_w || 'minus' || pls_util_pck.enter_w ||
				'select	k.nr_seq_conta ' || pls_util_pck.enter_w ||
				'from	pls_cta_lote_proc_conta k ' || pls_util_pck.enter_w ||
				'where	k.nr_seq_lote_processo = :nr_seq_lote_p ';		
	-- Abrir primeiro cursor din?mico
	var_cur_w := dbms_sql.open_cursor;
	dbms_sql.parse(var_cur_w, ds_sql_w, 1);
	--Trocar binds
	dbms_sql.bind_variable(var_cur_w, ':dt_inicial', trunc(dt_mes_competencia_w,'month'));
	dbms_sql.bind_variable(var_cur_w, ':dt_final', last_day(dt_mes_competencia_w));
	dbms_sql.bind_variable(var_cur_w, ':nr_seq_lote_p', nr_seq_lote_p);
	-- se tiver filtro
	if (nr_seq_filtro_w IS NOT NULL AND nr_seq_filtro_w::text <> '') then
		dbms_sql.bind_variable(var_cur_w, ':nr_seq_filtro', nr_seq_filtro_w);
	end if;
	
	

	dbms_sql.define_array(var_cur_w, 1, nr_seq_conta_w, qt_cnt_w, 1);

	var_exec_w := dbms_sql.execute(var_cur_w);
	loop
	var_retorno_w := dbms_sql.fetch_rows(var_cur_w);

		-- zerar a lista para que o mesmo valor n?o seja inserido mais de uma vez na tabela.
		nr_seq_conta_w		:= pls_tipos_ocor_pck.num_table_vazia;

		-- Obter a lista que foi populada
		dbms_sql.column_value(var_cur_w, 1, nr_seq_conta_w);
		
		forall i in nr_seq_conta_w.first ..nr_seq_conta_w.last
			insert into pls_cta_lote_proc_conta(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_lote_processo,
				nr_seq_conta)
			values (nextval('pls_cta_lote_proc_conta_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_lote_p,
				nr_seq_conta_w(i));

		commit;
		exit when var_retorno_w != qt_cnt_w;
	end loop;
	
	if (ie_lote_pos_p = 'S') then
		--verificacao adicional para lotes de faturamento.

		--necessario pois tem casos que duas analises de conta dao origem a uma unica analise de pos

		--e com isso, uma delas nao e referenciada pelo pos, necessitando uma busca diferente para nao incluir essas contas no 

		--lote de processamento
		open c_remove_fat;
		loop		
			tb_seq_w.delete;
			fetch c_remove_fat bulk collect into tb_seq_w
			limit 1000;
			exit when tb_seq_w.count = 0;
			
				forall i in tb_seq_w.first..tb_seq_w.last
					delete from pls_cta_lote_proc_conta
					where 	nr_seq_lote_processo = nr_seq_lote_p
					and 	nr_seq_conta = tb_seq_w(i);
				commit;

		end loop;
		close c_remove_fat;
	end if;

	dbms_sql.close_cursor(var_cur_w);
	if (ie_lote_pos_p	= 'N') 	or (coalesce(ie_lote_pos_p::text, '') = '') then
		update 	pls_cta_lote_processo
		set	dt_geracao_lote	= clock_timestamp()
		where	nr_sequencia	= nr_seq_lote_p;
	else
		update 	pls_cta_lote_processo
		set	dt_geracao_lote	 = NULL
		where	nr_sequencia	= nr_seq_lote_p;
	end if;
	
	
	-- Se o usuario quiser limitar a quantidade de analise por lote.
	if (coalesce(qt_analise_w,0) > 0) then
	
		-- A separa??o ? por analise, como podem ter analise com mais de uma conta, e contas sem analise,

		-- inicialmente ? avaliado as contas com analise.

		
		-- ser? contado quantas analises ser?o buscadas do lote principal, replicadas par aos lotes secund?rios e apagadas do lote principal
	
		qt_lotes_gerados_w	:= 1;
		
		-- verifica quantas analises ainda restam
		select	count(distinct b.nr_seq_analise)
		into STRICT	qt_analise_lote_w
		from	pls_cta_lote_proc_conta	a,
			pls_conta		b
		where	a.nr_seq_conta		= b.nr_sequencia
		and	(b.nr_seq_analise IS NOT NULL AND b.nr_seq_analise::text <> '')
		and	a.nr_seq_lote_processo	= nr_seq_lote_p;
	
		-- varre as contas, com base na quantidade de analise
		while(qt_analise_lote_w > qt_analise_w) loop

			-- nova PK
			select	nextval('pls_cta_lote_processo_seq')
			into STRICT	nr_seq_lote_w
			;
			
			-- novo nome do lote
			nm_lote_novo_w	:= substr(nm_lote_w,1, 255 - length(qt_lotes_gerados_w + 3)) ||' ('||to_char(qt_lotes_gerados_w)||')';
			
			-- insere novo lote
			insert into pls_cta_lote_processo(	nr_sequencia,
								dt_atualizacao,
								nm_usuario,
								dt_atualizacao_nrec,
								dt_mes_competencia,
								nr_seq_lote_princ,
								qt_analise,
								nm_lote,
								ie_status,
								dt_geracao_lote,
								nm_id_job,
								nm_id_sid,
								nm_id_serial)
			SELECT	nr_seq_lote_w,
				clock_timestamp(),
				a.nm_usuario,
				clock_timestamp(),
				a.dt_mes_competencia,
				nr_seq_lote_p,
				a.qt_analise,
				nm_lote_novo_w,
				a.ie_status,
				(case when(ie_lote_pos_p = 'N') or (coalesce(ie_lote_pos_p::text, '') = '') then clock_timestamp() else null end) dt_geracao_lote,
				a.nm_id_job,
				a.nm_id_sid,
				a.nm_id_serial
			from	pls_cta_lote_processo	a
			where	a.nr_sequencia = nr_seq_lote_p;
			
			-- replica as contas
			insert into pls_cta_lote_proc_conta(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				nr_seq_lote_processo,
				nr_seq_conta)
			SELECT	nextval('pls_cta_lote_proc_conta_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nr_seq_lote_w,
				a.nr_seq_conta
			from	pls_cta_lote_proc_conta	a,
				pls_conta		b
			where	a.nr_seq_lote_processo	= nr_seq_lote_p
			and	b.nr_sequencia		= a.nr_seq_conta
			and	b.nr_seq_analise in (	SELECT t.nr_seq_analise
							from (	select	y.nr_seq_analise
								from	pls_cta_lote_proc_conta	x,
									pls_conta		y
								where	y.nr_sequencia	= x.nr_seq_conta
								and	x.nr_seq_lote_processo	= nr_seq_lote_p
								group by	y.nr_seq_analise) t LIMIT (qt_analise_w));
							
			-- remove as contas do lote principal
			delete	from pls_cta_lote_proc_conta
			where	nr_seq_lote_processo = nr_seq_lote_p
			and	nr_seq_conta in (	SELECT	x.nr_seq_conta
							from	pls_cta_lote_proc_conta	x
							where	x.nr_seq_lote_processo	= nr_seq_lote_w);
			
			
							
			-- verifica quantas analises ainda restam
			select	count(distinct b.nr_seq_analise)
			into STRICT	qt_analise_lote_w
			from	pls_cta_lote_proc_conta	a,
				pls_conta		b
			where	a.nr_seq_conta		= b.nr_sequencia
			and	(b.nr_seq_analise IS NOT NULL AND b.nr_seq_analise::text <> '')
			and	a.nr_seq_lote_processo	= nr_seq_lote_p;
			
			qt_lotes_gerados_w := qt_lotes_gerados_w + 1;
		end loop;
		
		-- Agora, pode ocorrer de ter contas SEM a analise, neste caso cada conta ? considerado UMA analise


		-- verifica quantas contas SEM analise ainda restam ( considerar o resto de contas COM analise que sobrou na conta principal
		select	max(b.nr_seq_analise)
		into STRICT	max_seq_analise_lote_w
		from	pls_cta_lote_proc_conta	a,
			pls_conta		b
		where	a.nr_seq_conta		= b.nr_sequencia
		and	(b.nr_seq_analise IS NOT NULL AND b.nr_seq_analise::text <> '')
		and	a.nr_seq_lote_processo	= nr_seq_lote_p;
		
		select	count(distinct t.nr_seq_analise)
		into STRICT	qt_analise_lote_w
		from (	SELECT (case when coalesce(b.nr_seq_analise::text, '') = '' then max_seq_analise_lote_w + row_number() over (order by b.nr_seq_analise) else b.nr_seq_analise end) as nr_seq_analise
				from	pls_cta_lote_proc_conta	a,
					pls_conta		b
				where	a.nr_seq_conta		= b.nr_sequencia
				and	a.nr_seq_lote_processo	= nr_seq_lote_p) t;

		-- Faz o processo agora, para todas as contas SEM analise
		while(qt_analise_lote_w > qt_analise_w) loop

			-- verifica se a quantidade que tem que replicar, n?o vai deixar o lote principal com menos que o limite de analise.

			-- essa valida??o s? deve ser feita na parte que trata as contas SEM analise.

			-- Na parte que trata as contas COM analise, os lotes secund?rios v?o possuir o limite de analises, o lote principal ficar? com o "resto"
			if	((qt_analise_lote_w - qt_analise_w) < qt_analise_w) then
				-- replica somente o "resto"
				pls_replica_conta_sem_analise(nm_lote_w, qt_lotes_gerados_w, qt_analise_lote_w - qt_analise_w);
			else
				pls_replica_conta_sem_analise(nm_lote_w, qt_lotes_gerados_w, qt_analise_w);
			end if;
			
			
			-- verifica quantas contas ainda existem, sem analise
			select	count(distinct t.nr_seq_analise)
			into STRICT	qt_analise_lote_w
			from (	SELECT (case when coalesce(b.nr_seq_analise::text, '') = '' then max_seq_analise_lote_w + row_number() over (order by b.nr_seq_analise) else b.nr_seq_analise end) as nr_seq_analise
					from	pls_cta_lote_proc_conta	a,
						pls_conta		b
					where	a.nr_seq_conta		= b.nr_sequencia
					and	a.nr_seq_lote_processo	= nr_seq_lote_p) t;

			qt_lotes_gerados_w := qt_lotes_gerados_w + 1;
		end loop;
	
		commit;	

	end if;
	
	select	count(1)
	into STRICT	qt_cta_gerado_w
	from	pls_cta_lote_proc_conta
	where	nr_seq_lote_processo = nr_seq_lote_p  LIMIT 1;

	if (qt_cta_gerado_w > 0) then
	
		update	pls_cta_lote_processo
		set	ie_status = '5'
		where	nr_sequencia = nr_seq_lote_p;
	end if;
	
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cta_gerar_lote_processo ( nr_seq_lote_p pls_cta_lote_processo.nr_sequencia%type, nm_usuario_p text, ie_lote_pos_p text default 'N') FROM PUBLIC;

