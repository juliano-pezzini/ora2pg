-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lib_analise ( nr_seq_analise_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text ) AS $body$
DECLARE


nr_seq_regra_w			bigint	:= null;
nr_seq_conta_w			bigint;
nr_seq_segurado_w		bigint;
ie_tipo_guia_w			bigint;
ie_tipo_segurado_w			varchar(10);
ie_preco_w			bigint;
nr_seq_prestador_w		bigint;
nr_seq_contrato_w			bigint;
nr_seq_plano_w			bigint;
nr_seq_conta_proc_w		bigint;
vl_apres_w			pls_conta_proc.vl_procedimento_imp%type;
nr_seq_estrutura_mat_w		bigint;
nr_seq_prestador_prot_w		bigint;
nr_seq_protocolo_w		bigint;
nr_seq_intercambio_w		bigint;
nr_seq_congenere_w		bigint;
cd_prestador_exec_w		pls_prestador.cd_prestador%type;
cd_prestador_prot_w		pls_prestador.cd_prestador%type;
nr_seq_prestador_exec_w		bigint;
ie_internado_w			varchar(20);
ie_tipo_gat_w			varchar(10);
ie_origem_conta_w			varchar(10);
ie_analise_nova_w			varchar(1);
qt_conta_item_w			bigint;
nr_seq_regra_ww			bigint;
nr_seq_tipo_atendimento_w		bigint;
nr_seq_tipo_prestador_w		pls_prestador.nr_seq_tipo_prestador%type;
vl_liberado_w			double precision;
nr_seq_tipo_acomodacao_w		bigint;
dt_atend_ref_w			timestamp;
ie_guia_valida_w			varchar(1)	:= 'S';
qt_item_aus_conta_w		integer;
qt_saldo_w			double precision;
qt_utilizada_w			double precision;
qt_autorizada_w			double precision;
ie_aplica_w			varchar(1)	:= 'S';
ie_itens_regra_w			varchar(1)	:= 'S';
dados_regra_lib_analise_w		pls_cta_valorizacao_pck.dados_regra_lib_analise;
sg_estado_w			pessoa_juridica.sg_estado%type;
sg_estado_int_w			pessoa_juridica.sg_estado%type;
ie_nacional_w			pls_congenere.ie_nacional%type;
ie_tipo_intercambio_w		pls_criterio_lib_analise.ie_tipo_intercambio%type;
ie_cad_conta_medica_w		pls_controle_estab.ie_cad_conta_medica%type;
ie_lib_an_independ_qtd_itens_w	varchar(1);
nr_idade_benef_w			pls_criterio_lib_analise.nr_idade_final%type;
nr_seq_prestador_solic_w		pls_conta.nr_seq_prestador_solic_ref%type;
ie_regime_atendimento_w		pls_criterio_lib_analise.ie_regime_atendimento%type;
ie_saude_ocupacional_w		pls_criterio_lib_analise.ie_saude_ocupacional%type;

/* Nao incluir mais campos no select, colocar campos adicionais depois da abertura do cursor - performance */

C00 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.dt_atendimento,
		a.nr_seq_segurado,
		a.ie_tipo_guia,
		a.nr_seq_prestador,
		a.nr_seq_prestador_exec,
		a.nr_seq_protocolo,
		a.ie_tipo_gat,
		a.ie_origem_conta,
		a.nr_seq_tipo_atendimento,
		a.nr_seq_prestador_prot,
		a.nr_seq_tipo_acomodacao,
		a.cd_prestador_prot,
		a.cd_prestador_exec,
		a.nr_seq_tipo_prest_exec,
		a.nr_seq_guia,
		a.nr_seq_tipo_prest_prot,
		a.nr_seq_prestador_solic,
		a.ie_tipo_segurado,
		a.ie_regime_atendimento,
		a.ie_saude_ocupacional
	from	pls_conta_v	a
	where	a.nr_seq_analise	= nr_seq_analise_p;

C01 CURSOR FOR
	SELECT	b.cd_procedimento,
		b.ie_origem_proced,
		b.nr_sequencia,
		b.cd_area_procedimento,
		b.cd_especialidade,
		b.cd_grupo_proc,
		b.nr_seq_grupo_rec,
		b.cd_estabelecimento
	from	pls_conta_proc_v	b
	where	b.nr_seq_conta	= nr_seq_conta_w;

C02 CURSOR FOR
	SELECT	b.nr_seq_material,
		b.nr_sequencia
	from	pls_conta_mat	b
	where	b.nr_seq_conta	= nr_seq_conta_w;
	
c_regra CURSOR(ie_guia_valida_pc		text,
		ie_rest_estab_pc		text,
		cd_estabelecimento_pc		bigint)FOR
	SELECT	nr_sequencia,
		dt_inicio_vigencia,
		dt_fim_vigencia,
		ie_item_valido,
		coalesce(ie_somente_ocorrencia,'N') ie_somente_ocorrencia,
		ie_todos_itens,
		coalesce(ie_ind_qtde_itens,'N') ie_ind_qtde_itens
	from	pls_regra_lib_analise
	where	ie_situacao  = 'A'
	and	((coalesce(ie_valida_guia::text, '') = '') or (ie_valida_guia	= 'N')	or (ie_valida_guia = ie_guia_valida_pc))
	and	((ie_rest_estab_pc = 'N') or (cd_estabelecimento = cd_estabelecimento_pc))
	order by CASE WHEN ie_item_valido='S' THEN 1  ELSE 2 END;

BEGIN	
	
vl_apres_w 	:= pls_obter_vl_calc_analise(nr_seq_analise_p);
vl_liberado_w	:= pls_obter_vl_lib_analise(nr_seq_analise_p);
ie_lib_an_independ_qtd_itens_w := 'N';

select	coalesce(ie_analise_cm_nova,'N')
into STRICT	ie_analise_nova_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

select	coalesce(max(ie_cad_conta_medica),'N')
into STRICT	ie_cad_conta_medica_w
from	pls_controle_estab;

for r_c00_w in C00() loop
	begin
	nr_seq_conta_w	:= r_c00_w.nr_sequencia;
	--Caso nao tenha autorizacao valida em alguma das conta a autorizacao ja nao e valida
	if (coalesce(r_c00_w.nr_seq_guia::text, '') = '') then
		ie_guia_valida_w	:= 'N';
	elsif (coalesce(ie_guia_valida_w,'S')	= 'S') then
		--verifica se existem itens autorizados que nao estao contidos na conta
		if (qt_item_aus_conta_w	> 0) then
			ie_guia_valida_w	:= 'N';
		end if;
		
		if (coalesce(ie_guia_valida_w,'S')	= 'S') then
			--Verifica se todos os procedimentos estao autorizados e utilizados em sua totalidade
			for r_c01_w in C01() loop
				begin
				select 	coalesce(max(qt_saldo),0),
					coalesce(max(qt_utilizada),0),
					coalesce(max(qt_autorizada),0)
				into STRICT	qt_saldo_w,
					qt_utilizada_w,
					qt_autorizada_w
				from 	table(pls_conta_autor_pck.obter_dados(r_c00_w.nr_seq_guia,'P', cd_estabelecimento_p, r_c01_w.ie_origem_proced, r_c01_w.cd_procedimento));
			
				if ( qt_autorizada_w = 0 ) or ( qt_saldo_w < 0 ) then
					ie_guia_valida_w	:= 'N';
					exit;
				end if;
				end;
			end loop;
		end if;
		if (coalesce(ie_guia_valida_w,'S')	= 'S') then
			--Verifica se todos os materiais estao autorizados e utilizados em sua totalidade
			for r_c02_w in C02() loop
				begin
				select 	coalesce(max(qt_saldo),0),
					coalesce(max(qt_utilizada),0),
					coalesce(max(qt_autorizada),0)
				into STRICT	qt_saldo_w,
					qt_utilizada_w,
					qt_autorizada_w
				from 	table(pls_conta_autor_pck.obter_dados(r_c00_w.nr_seq_guia,'M', cd_estabelecimento_p, null, null, r_c02_w.nr_seq_material));
			
				if ( qt_autorizada_w = 0 ) or ( qt_saldo_w < 0 ) then
					ie_guia_valida_w	:= 'N';
					exit;
				end if;
				end;
			end loop;
		end if;
	end if;
	
	end;
end loop;

for c_regra_w in c_regra(ie_guia_valida_w, ie_cad_conta_medica_w, cd_estabelecimento_p) loop
	begin
	ie_aplica_w	:= 'S';
	for r_c00_w in C00() loop
	begin
		nr_seq_conta_w			:= r_c00_w.nr_sequencia;
		dt_atend_ref_w			:= r_c00_w.dt_atendimento;
		nr_seq_segurado_w		:= r_c00_w.nr_seq_segurado;
		ie_tipo_guia_w			:= r_c00_w.ie_tipo_guia;
		nr_seq_prestador_w		:= r_c00_w.nr_seq_prestador;
		nr_seq_prestador_exec_w		:= r_c00_w.nr_seq_prestador_exec;
		nr_seq_protocolo_w		:= r_c00_w.nr_seq_protocolo;
		ie_tipo_gat_w			:= r_c00_w.ie_tipo_gat;
		ie_origem_conta_w		:= r_c00_w.ie_origem_conta;
		nr_seq_tipo_atendimento_w	:= r_c00_w.nr_seq_tipo_atendimento;
		nr_seq_prestador_prot_w		:= r_c00_w.nr_seq_prestador_prot;
		nr_seq_tipo_acomodacao_w	:= r_c00_w.nr_seq_tipo_acomodacao;
		cd_prestador_exec_w		:= r_c00_w.cd_prestador_prot;
		cd_prestador_prot_w		:= r_c00_w.cd_prestador_exec;
		nr_seq_tipo_prestador_w		:= r_c00_w.nr_seq_tipo_prest_exec;
		nr_seq_prestador_solic_w	:= r_c00_w.nr_seq_prestador_solic;
		ie_tipo_segurado_w			:= r_c00_w.ie_tipo_segurado;
		ie_regime_atendimento_w		:= r_c00_w.ie_regime_atendimento;
		ie_saude_ocupacional_w		:= r_c00_w.ie_saude_ocupacional;
		
	if (c_regra_w.ie_todos_itens = 'S') then	
		ie_itens_regra_w := pls_todos_itens_regra_analise(	nr_seq_analise_p, c_regra_w.nr_sequencia, cd_estabelecimento_p, nm_usuario_p, ie_itens_regra_w);	
		if (ie_itens_regra_w = 'N') then
			ie_aplica_w 	:= 'N';
			exit;
		end if;
	end if;
		
		if (c_regra_w.dt_inicio_vigencia < dt_atend_ref_w or coalesce(c_regra_w.dt_inicio_vigencia::text, '') = '' ) and (c_regra_w.dt_fim_vigencia > dt_atend_ref_w or coalesce(c_regra_w.dt_fim_vigencia::text, '') = '' ) then
			ie_internado_w	:= pls_obter_se_internado(nr_seq_conta_w,'');
			
			select	max(nr_seq_contrato),
				max(nr_seq_plano),
				max(nr_seq_congenere),
				max(nr_seq_intercambio)
			into STRICT	nr_seq_contrato_w,
				nr_seq_plano_w,
				nr_seq_congenere_w,
				nr_seq_intercambio_w
			from	pls_segurado
			where	nr_sequencia	= nr_seq_segurado_w;

			select	max(ie_preco)
			into STRICT	ie_preco_w
			from	pls_plano
			where	nr_sequencia	= nr_seq_plano_w;
			
			select	coalesce(max(sg_estado),'X')
			into STRICT	sg_estado_w
			from	pessoa_juridica
			where	cd_cgc	=	(SELECT	max(cd_cgc_outorgante)
						from	pls_outorgante
						where	cd_estabelecimento	= cd_estabelecimento_p);
						
			select	coalesce(max(a.sg_estado),'X'),
				coalesce(max(ie_nacional), 'N')
			into STRICT	sg_estado_int_w,
				ie_nacional_w
			from	pessoa_juridica	a,
				pls_congenere	b
			where	a.cd_cgc	= b.cd_cgc
			and	b.nr_sequencia	= nr_seq_congenere_w;
			
			if (ie_nacional_w	= 'S') then
				ie_tipo_intercambio_w := 'N';	-- Nacional
			elsif (sg_estado_w <> 'X') and (sg_estado_int_w <> 'X') then
				if (sg_estado_w = sg_estado_int_w) then
					ie_tipo_intercambio_w	:= 'E';
				else
					ie_tipo_intercambio_w	:= 'N';
				end if;
			else
				ie_tipo_intercambio_w	:= 'A';
			end if;
			
			nr_idade_benef_w := (pls_obter_idade_segurado(nr_seq_segurado_w, dt_atend_ref_w, 'A'))::numeric;
			
			for r_c01_w in C01() loop
				begin				
				dados_regra_lib_analise_w.nr_seq_regra			:= c_regra_w.nr_sequencia;
				dados_regra_lib_analise_w.ie_somente_ocorrencia		:= c_regra_w.ie_somente_ocorrencia;
				dados_regra_lib_analise_w.nr_seq_grupo_rec		:= r_c01_w.nr_seq_grupo_rec;
				dados_regra_lib_analise_w.ie_tipo_guia			:= ie_tipo_guia_w;
				dados_regra_lib_analise_w.ie_tipo_segurado		:= ie_tipo_segurado_w;
				dados_regra_lib_analise_w.ie_preco			:= ie_preco_w;
				dados_regra_lib_analise_w.cd_area_procedimento 		:= r_c01_w.cd_area_procedimento;
				dados_regra_lib_analise_w.cd_especialidade		:= r_c01_w.cd_especialidade;
				dados_regra_lib_analise_w.cd_grupo_proc			:= r_c01_w.cd_grupo_proc;
				dados_regra_lib_analise_w.cd_procedimento		:= r_c01_w.cd_procedimento;
				dados_regra_lib_analise_w.ie_origem_proced		:= r_c01_w.ie_origem_proced;
				dados_regra_lib_analise_w.nr_seq_contrato 		:= nr_seq_contrato_w;
				dados_regra_lib_analise_w.ie_internado 			:= ie_internado_w;
				dados_regra_lib_analise_w.nr_seq_intercambio 		:= nr_seq_intercambio_w;
				dados_regra_lib_analise_w.nr_seq_congenere		:= nr_seq_congenere_w;
				dados_regra_lib_analise_w.nr_seq_material 		:= null;
				dados_regra_lib_analise_w.ie_tipo_gat			:= ie_tipo_gat_w;
				dados_regra_lib_analise_w.ie_origem_conta		:= ie_origem_conta_w;	
				dados_regra_lib_analise_w.nr_seq_tipo_atendimento	:= nr_seq_tipo_atendimento_w;
				dados_regra_lib_analise_w.nr_seq_tipo_prestador		:= nr_seq_tipo_prestador_w;
				dados_regra_lib_analise_w.nr_seq_tipo_acomodacao	:= nr_seq_tipo_acomodacao_w;
				dados_regra_lib_analise_w.cd_prestador_exec		:= cd_prestador_exec_w;
				dados_regra_lib_analise_w.cd_prestador_prot		:= cd_prestador_prot_w;
				dados_regra_lib_analise_w.vl_apresentado		:= vl_apres_w;
				dados_regra_lib_analise_w.vl_liberado			:= vl_liberado_w;
				dados_regra_lib_analise_w.nr_seq_estrutura_mat		:= null;
				dados_regra_lib_analise_w.nr_seq_prestador_prot		:= nr_seq_prestador_prot_w;
				dados_regra_lib_analise_w.nr_seq_prestador_exec		:= nr_seq_prestador_exec_w;
				dados_regra_lib_analise_w.nr_seq_tipo_prestador_prot	:= r_c00_w.nr_seq_tipo_prest_prot;
				dados_regra_lib_analise_w.ie_tipo_despesa_mat		:= null;
				dados_regra_lib_analise_w.ie_tipo_intercambio		:= ie_tipo_intercambio_w;
				dados_regra_lib_analise_w.nr_idade_benef		:= nr_idade_benef_w;
				dados_regra_lib_analise_w.nr_seq_prestador_solic	:= nr_seq_prestador_solic_w;
				dados_regra_lib_analise_w.ie_regime_atendimento	:= ie_regime_atendimento_w;
				dados_regra_lib_analise_w.ie_saude_ocupacional	:= ie_saude_ocupacional_w;
								
				--zera as variaveis de material para que nao interfiram no filtro
				nr_seq_regra_w		:= null;	
				
				nr_seq_regra_w  := pls_crit_liberacao_analise(	dados_regra_lib_analise_w, nr_seq_conta_w, r_c01_w.nr_sequencia, nr_seq_analise_p, nm_usuario_p, nr_seq_regra_w );	
								
				--das regras de liberacao.
				if ( c_regra_w.ie_ind_qtde_itens = 'S' and coalesce(nr_seq_regra_w,0) > 0) then
					ie_lib_an_independ_qtd_itens_w := 'S';
				end if;

				if (coalesce(nr_seq_regra_w,0) > 0) and (ie_analise_nova_w = 'N') then
					CALL pls_liberar_grupos_analise(nr_seq_analise_p, nr_seq_regra_w, cd_estabelecimento_p, nm_usuario_p, ie_analise_nova_w);
				elsif (coalesce(nr_seq_regra_w,0) > 0) then
					
					CALL pls_lib_item_analise(r_c01_w.nr_sequencia, nr_seq_regra_w, nr_seq_analise_p, nr_seq_conta_w, 'P', nm_usuario_p, cd_estabelecimento_p);
					nr_seq_regra_ww := nr_seq_regra_w;
				elsif (ie_analise_nova_w = 'S') then
					--Caso algum dos itens nao tenha se encaixado na regra ja pode encerrar a mesma, pois a regra nao mais sera aplicada
					ie_aplica_w	:= 'N';
					exit;
				end if;	
				
				end;
			end loop;
	
			if (ie_aplica_w	= 	'S') then
				for r_c02_w in C02() loop
					begin
					select	max(nr_seq_estrut_mat),
						max(ie_tipo_despesa)
					into STRICT	nr_seq_estrutura_mat_w,
						dados_regra_lib_analise_w.ie_tipo_despesa_mat
					from	pls_material
					where	nr_sequencia = r_c02_w.nr_seq_material;

					--zeras as variaveis de procedimento para que as mesmas nao interfiram na aplicacao da regra
					
					dados_regra_lib_analise_w.nr_seq_regra			:= c_regra_w.nr_sequencia;
					dados_regra_lib_analise_w.ie_somente_ocorrencia		:= c_regra_w.ie_somente_ocorrencia;
					dados_regra_lib_analise_w.nr_seq_grupo_rec		:= null;
					dados_regra_lib_analise_w.ie_tipo_guia			:= ie_tipo_guia_w;
					dados_regra_lib_analise_w.ie_tipo_segurado		:= ie_tipo_segurado_w;
					dados_regra_lib_analise_w.ie_preco			:= ie_preco_w;
					dados_regra_lib_analise_w.cd_area_procedimento 		:= null;
					dados_regra_lib_analise_w.cd_especialidade		:= null;
					dados_regra_lib_analise_w.cd_grupo_proc			:= null;
					dados_regra_lib_analise_w.cd_procedimento		:= null;
					dados_regra_lib_analise_w.ie_origem_proced		:= null;
					dados_regra_lib_analise_w.nr_seq_contrato 		:= nr_seq_contrato_w;
					dados_regra_lib_analise_w.ie_internado 			:= ie_internado_w;
					dados_regra_lib_analise_w.nr_seq_intercambio 		:= nr_seq_intercambio_w;
					dados_regra_lib_analise_w.nr_seq_congenere		:= nr_seq_congenere_w;
					dados_regra_lib_analise_w.nr_seq_material 		:= r_c02_w.nr_seq_material;
					dados_regra_lib_analise_w.ie_tipo_gat			:= ie_tipo_gat_w;
					dados_regra_lib_analise_w.ie_origem_conta		:= ie_origem_conta_w;	
					dados_regra_lib_analise_w.nr_seq_tipo_atendimento	:= nr_seq_tipo_atendimento_w;
					dados_regra_lib_analise_w.nr_seq_tipo_prestador		:= nr_seq_tipo_prestador_w;
					dados_regra_lib_analise_w.nr_seq_tipo_acomodacao	:= nr_seq_tipo_acomodacao_w;
					dados_regra_lib_analise_w.cd_prestador_exec		:= cd_prestador_exec_w;
					dados_regra_lib_analise_w.cd_prestador_prot		:= cd_prestador_prot_w;
					dados_regra_lib_analise_w.vl_apresentado		:= vl_apres_w;
					dados_regra_lib_analise_w.vl_liberado			:= vl_liberado_w;
					dados_regra_lib_analise_w.nr_seq_estrutura_mat		:= null;
					dados_regra_lib_analise_w.nr_seq_prestador_prot		:= nr_seq_prestador_prot_w;
					dados_regra_lib_analise_w.nr_seq_prestador_exec		:= nr_seq_prestador_exec_w;
					dados_regra_lib_analise_w.nr_seq_tipo_prestador_prot	:= r_c00_w.nr_seq_tipo_prest_prot;
					dados_regra_lib_analise_w.nr_idade_benef		:= nr_idade_benef_w;
					dados_regra_lib_analise_w.nr_seq_prestador_solic	:= nr_seq_prestador_solic_w;
					
					nr_seq_regra_w 		:= null;	
					
					nr_seq_regra_w := pls_crit_liberacao_analise(	dados_regra_lib_analise_w, nr_seq_conta_w, null, nr_seq_analise_p, nm_usuario_p, nr_seq_regra_w);	
									
					--Nesse caso, caiu um item liberado por uma regra onde o "ie_ind_qtde_itens" = 'S', entao a analise deve ser liberada, mesmo que tenham itens que nao foram liberados por alguma 

			
					--das regras de liberacao.
					if ( c_regra_w.ie_ind_qtde_itens = 'S' and coalesce(nr_seq_regra_w,0) > 0) then
						ie_lib_an_independ_qtd_itens_w := 'S';
					end if;

					
									
					if (coalesce(nr_seq_regra_w,0) > 0) and (ie_analise_nova_w = 'N') then		
						CALL pls_liberar_grupos_analise(nr_seq_analise_p, nr_seq_regra_w, cd_estabelecimento_p, nm_usuario_p, ie_analise_nova_w);
					elsif (coalesce(nr_seq_regra_w,0) > 0) then
						
						CALL pls_lib_item_analise(r_c02_w.nr_sequencia, nr_seq_regra_w, nr_seq_analise_p, nr_seq_conta_w, 'M', nm_usuario_p, cd_estabelecimento_p);
						nr_seq_regra_ww := nr_seq_regra_w;
					end if;	
					
					end;
				end loop;
			end if;
		end if;
		end;
	end loop;
	
	if (c_regra_w.ie_item_valido	= 'S') then
		
		select	count(1)
		into STRICT	qt_conta_item_w
		from	pls_conta_mat
		where	nr_seq_conta in ( SELECT 	nr_sequencia
					  from		pls_conta
					  where		nr_seq_analise = nr_seq_analise_p )
		and	coalesce(nr_seq_regra_lib::text, '') = '';
		if (qt_conta_item_w	= 0) then
			select	count(1)
			into STRICT	qt_conta_item_w
			from	pls_conta_proc
			where	nr_seq_conta in ( SELECT 	nr_sequencia
						  from		pls_conta
						  where		nr_seq_analise = nr_seq_analise_p )
			and	coalesce(nr_seq_regra_lib::text, '') = '';
		end if;
		
		if (qt_conta_item_w	> 0 ) then
		
			update	pls_conta_mat
			set	nr_seq_regra_lib	 = NULL
			where	nr_seq_conta in ( SELECT 	nr_sequencia
						  from		pls_conta
						  where		nr_seq_analise = nr_seq_analise_p );
			
			update	pls_conta_proc
			set	nr_seq_regra_lib	 = NULL
			where	nr_seq_conta in ( SELECT 	nr_sequencia
						  from		pls_conta
						  where		nr_seq_analise = nr_seq_analise_p );
		end if;
	end if;
	end;
end loop;
select	count(1)
into STRICT	qt_conta_item_w
from	pls_conta_mat
where	nr_seq_conta in ( SELECT 	nr_sequencia
			  from		pls_conta
			  where		nr_seq_analise = nr_seq_analise_p )
and	coalesce(nr_seq_regra_lib::text, '') = ''  LIMIT 1;

if (ie_lib_an_independ_qtd_itens_w = 'S') then
	CALL pls_liberar_grupos_analise(nr_seq_analise_p, nr_seq_regra_ww, cd_estabelecimento_p, nm_usuario_p, ie_analise_nova_w);
	
elsif (qt_conta_item_w = 0) then
	select	count(1)
	into STRICT	qt_conta_item_w
	from	pls_conta_proc
	where	nr_seq_conta in ( SELECT 	nr_sequencia
				  from		pls_conta
				  where		nr_seq_analise = nr_seq_analise_p )
	and	coalesce(nr_seq_regra_lib::text, '') = ''  LIMIT 1;
	
	if (qt_conta_item_w = 0) and (ie_analise_nova_w = 'S') and (nr_seq_regra_ww IS NOT NULL AND nr_seq_regra_ww::text <> '')then
		
		CALL pls_liberar_grupos_analise(nr_seq_analise_p, nr_seq_regra_ww, cd_estabelecimento_p, nm_usuario_p, ie_analise_nova_w);
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lib_analise ( nr_seq_analise_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text ) FROM PUBLIC;

