-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE populate_qld_cancer_tables ( dt_exportar_de_p timestamp , dt_exportar_ate_p timestamp , nm_usuario_p text , returned_value_p INOUT bigint ) AS $body$
DECLARE

  dt_exportar_de_w            timestamp;
  dt_exportar_ate_w           timestamp;
  returned_value_w            text;
  ret_val_w	bigint:=0;
  is_cad_populated_successful bigint :=0;
  is_can_populated_successful bigint :=0;
  is_fan_populated_successful bigint :=0;
  is_cdx_populated_successful bigint :=0;
  is_hdr_populated_successful bigint :=0;
  excp_caught_in_cad          varchar(500 );
  excp_caught_in_can          varchar(500 );
  excp_caught_in_fan          varchar(500 );
  excp_caught_in_cdx          varchar(500 );
  excp_caught_in_hdr          varchar(500 );
  called_times report_downloaded_count.nr_called%type:=0;

BEGIN
  dt_exportar_de_w :=dt_exportar_de_p;
  dt_exportar_ate_w:=dt_exportar_ate_p;
  if (dt_exportar_de_w IS NOT NULL AND dt_exportar_de_w::text <> '' AND dt_exportar_ate_w IS NOT NULL AND dt_exportar_ate_w::text <> '') then
    begin
      SELECT * FROM populate_cad_table( dt_exportar_de_w, dt_exportar_ate_w, nm_usuario_p, is_cad_populated_successful, excp_caught_in_cad ) INTO STRICT is_cad_populated_successful, excp_caught_in_cad;
      SELECT * FROM populate_can_table( dt_exportar_de_w, dt_exportar_ate_w, nm_usuario_p, is_can_populated_successful, excp_caught_in_can ) INTO STRICT is_can_populated_successful, excp_caught_in_can;
      SELECT * FROM populate_fan_table( dt_exportar_de_w, dt_exportar_ate_w, nm_usuario_p, is_fan_populated_successful, excp_caught_in_fan ) INTO STRICT is_fan_populated_successful, excp_caught_in_fan;
      SELECT * FROM populate_cdx_table( dt_exportar_de_w, dt_exportar_ate_w, nm_usuario_p, is_cdx_populated_successful, excp_caught_in_cdx ) INTO STRICT is_cdx_populated_successful, excp_caught_in_cdx;
      SELECT * FROM populate_hdr_table( dt_exportar_de_w, dt_exportar_ate_w, nm_usuario_p, is_hdr_populated_successful, excp_caught_in_hdr ) INTO STRICT is_hdr_populated_successful, excp_caught_in_hdr;
      select   count( * )
        into STRICT called_times
        from report_downloaded_count
        where dt_export_from=dt_exportar_de_w
        and dt_export_to    = dt_exportar_ate_w;
      if ( is_cad_populated_successful=1 and is_can_populated_successful=1 and is_fan_populated_successful=1 and is_cdx_populated_successful=1 and
        is_hdr_populated_successful  =1 ) then
        insert
        into report_downloaded_count(
            nr_sequencia ,
            dt_export_from ,
            dt_export_to ,
            nr_called ,
            dt_report_downloaded ,
            nm_usuario ,
            ie_report_type
          )
          values (
            nextval('report_downloaded_count_seq') ,
            dt_exportar_de_w ,
            dt_exportar_ate_w ,
            called_times+1 ,
            clock_timestamp()  ,
            nm_usuario_p ,
            0
          );
        commit;
        ret_val_w := 1;
      else
        rollback;
		ret_val_w := 0;
    insert
        into report_downloaded_count(
            nr_sequencia ,
            dt_export_from ,
            dt_export_to ,
            nr_called ,
            dt_report_downloaded ,
            nm_usuario ,
            ie_report_type
          )
          values (
            nextval('report_downloaded_count_seq') ,
            dt_exportar_de_w ,
            dt_exportar_ate_w ,
            called_times+1 ,
            clock_timestamp()  ,
            nm_usuario_p ,
            0
          );
          commit;
        if ( (excp_caught_in_cad IS NOT NULL AND excp_caught_in_cad::text <> '') or (excp_caught_in_can IS NOT NULL AND excp_caught_in_can::text <> '') or (excp_caught_in_fan IS NOT NULL AND excp_caught_in_fan::text <> '') or (excp_caught_in_cdx IS NOT NULL AND excp_caught_in_cdx::text <> '') or
          (excp_caught_in_hdr IS NOT NULL AND excp_caught_in_hdr::text <> '') ) then
          returned_value_w     :=excp_caught_in_cad||chr( 13 )||chr( 10 )||excp_caught_in_can ||chr( 13 )||chr( 10 )||excp_caught_in_fan||chr( 13 )||chr( 10 )
          ||excp_caught_in_cdx ||chr( 13 )||chr( 10 )||excp_caught_in_hdr;
          insert
            into record_download_exception(
                nr_sequencia ,
                ie_report_type ,
                ds_exception ,
                dt_export_from ,
                dt_export_to
              )
              values (
                nextval('record_download_exception_seq') ,
                0 ,
                returned_value_w ,
                dt_exportar_de_w ,
                dt_exportar_ate_w
              );
          commit;
          CALL wheb_mensagem_pck.exibir_mensagem_abort( 1073278 , 'DS_ERROR='||'populate_qld_cancer_tables'
		  ||chr( 13 )||chr( 10 )
		  ||chr( 13 )||chr( 10 )
		  ||' Exception Log for IT Team:'
		  || chr(13)|| chr(10)
		  || chr(13)|| chr(10)
		  || returned_value_w);			
        end if;
      end if;
    exception
    when data_exception or unique_violation or invalid_cursor_state then
      rollback;
      returned_value_w := 'Other Exception:'||sqlerrm;
      insert
        into record_download_exception(
            nr_sequencia ,
            ie_report_type ,
            ds_exception ,
            dt_export_from ,
            dt_export_to
          )
          values (
            nextval('record_download_exception_seq') ,
            5 ,
            returned_value_w ,
            dt_exportar_de_w ,
            dt_exportar_ate_w
          );
      commit;
	  ret_val_w := 0;
      CALL wheb_mensagem_pck.exibir_mensagem_abort( 1073278 , 'DS_ERROR='||returned_value_w );
    end;
  end if;
  returned_value_p:=ret_val_w;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE populate_qld_cancer_tables ( dt_exportar_de_p timestamp , dt_exportar_ate_p timestamp , nm_usuario_p text , returned_value_p INOUT bigint ) FROM PUBLIC;

