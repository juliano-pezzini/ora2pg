-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_desv_tit_lote_faturamento ( nr_seq_fatura_p pls_fatura.nr_sequencia%type, nr_seq_lote_p pls_fatura.nr_seq_lote%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text, nr_seq_mot_canc_p bigint, ds_motivo_canc_p text, ie_origem_p text) AS $body$
DECLARE

						
/* ie_origem_p 
D - Acao de desvincular o titulo da fatura
C - Acao de cancelar a fatura 
CE - Cancelar e Estorno nota fiscal 
DE - Acao de desvincular o titulo da fatura e Estorno nota fiscal */
nr_lote_contabil_w		pls_fatura_conta.nr_lote_contabil%type;
ds_motivo_canc_w		varchar(4000);
qt_a510_w			integer;
qt_registros_w			integer;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
ie_processo_camara_w		pls_parametros_camara.ie_processo_camara%type;
nr_titulo_receber_w		pls_titulo_lote_camara.nr_titulo_receber%type;
nr_seq_lote_cam_w		pls_titulo_lote_camara.nr_sequencia%type;
ie_concil_contab_w		pls_visible_false.ie_concil_contab%type;
nr_seq_lote_w			pls_lote_pagamento.nr_sequencia%type;

c01 CURSOR(	nr_seq_lote_pc			pls_lote_faturamento.nr_sequencia%type,
		nr_seq_fatura_pc		pls_fatura.nr_sequencia%type) FOR
	SELECT	nr_titulo,
		nr_sequencia,
		pls_obter_dados_pls_fatura(nr_sequencia, 'SNF') nr_nota_fiscal,
		pls_obter_dados_pls_fatura(nr_sequencia, 'SNFN') nr_nota_fiscal_ndc,
		nr_titulo_ndc,
		nr_seq_lote
	from	pls_fatura
	where	nr_seq_lote = nr_seq_lote_pc
	and	coalesce(ie_cancelamento::text, '') = ''
	and	coalesce(nr_seq_fatura_pc::text, '') = ''
	
union all

	SELECT	nr_titulo,
		nr_sequencia,
		pls_obter_dados_pls_fatura(nr_sequencia, 'SNF') nr_nota_fiscal,
		pls_obter_dados_pls_fatura(nr_sequencia, 'SNFN') nr_nota_fiscal_ndc,
		nr_titulo_ndc,
		nr_seq_lote
	from	pls_fatura
	where	nr_sequencia = nr_seq_fatura_pc
	and	coalesce(ie_cancelamento::text, '') = ''
	and	coalesce(nr_seq_lote_pc::text, '') = '';
	
c02 CURSOR(	nr_seq_fatura_pc		pls_fatura.nr_sequencia%type) FOR
	SELECT	nr_sequencia,
		nr_fatura,
		nr_nota_credito_debito
	from	ptu_fatura
	where	nr_seq_pls_fatura = nr_seq_fatura_pc;
	
c03 CURSOR(	nr_seq_ptu_fatura_pc		ptu_nota_cobranca.nr_seq_fatura%type) FOR
	SELECT	nr_sequencia
	from	ptu_nota_cobranca
	where	nr_seq_fatura = nr_seq_ptu_fatura_pc;
	
C08 CURSOR(	nr_seq_ptu_fatura_pc		ptu_nota_cobranca_rrs.nr_seq_fatura%type) FOR
        SELECT  nr_sequencia nr_seq_cobranca_rss
        from    ptu_nota_cobranca_rrs
        where   nr_seq_fatura = nr_seq_ptu_fatura_pc;
	
c04 CURSOR(	nr_seq_cobranca_pc		ptu_nota_hospitalar.nr_seq_nota_cobr%type) FOR
	SELECT	nr_sequencia
	from	ptu_nota_hospitalar
	where	nr_seq_nota_cobr = nr_seq_cobranca_pc;
	
BEGIN

nr_seq_lote_w	:= nr_seq_lote_p;

if (nr_seq_lote_w IS NOT NULL AND nr_seq_lote_w::text <> '') or (nr_seq_fatura_p IS NOT NULL AND nr_seq_fatura_p::text <> '') then
	if (ie_origem_p = 'DE') then
		select	max(nr_seq_lote)
		into STRICT	nr_seq_lote_w
		from	pls_fatura
		where	nr_sequencia = nr_seq_fatura_p;
	end if;
	
	if (nr_seq_lote_w IS NOT NULL AND nr_seq_lote_w::text <> '') then
		select	max(c.nr_lote_contabil)
		into STRICT	nr_lote_contabil_w
		from	pls_fatura_conta	c,
			pls_fatura_evento 	b,
			pls_fatura		a
		where	c.nr_lote_contabil 	> 0
		and	b.nr_sequencia		= c.nr_seq_fatura_evento
		and	a.nr_sequencia		= b.nr_seq_fatura
		and	a.nr_seq_lote		= nr_seq_lote_w;
		
		if (nr_lote_contabil_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(268064, 'NR_LOTE_CONTABIL=' || nr_lote_contabil_w);
		end if;
		
		update	pls_lote_faturamento
		set	dt_geracao_titulos 	 = NULL,
			dt_geracao_nf		 = NULL,
			nm_usuario 		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where	nr_sequencia 		= nr_seq_lote_w;
		
		if (ie_origem_p = 'DE') then
			nr_seq_lote_w	:= null;
		end if;
	end if;
	
	-- levanta o estabelecimento
	select	max(t.cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from (	SELECT	max(x.cd_estabelecimento) cd_estabelecimento
		from	pls_lote_faturamento	x
		where	x.nr_sequencia		= nr_seq_lote_w
		and	(nr_seq_lote_w IS NOT NULL AND nr_seq_lote_w::text <> '')
		
union all

		SELECT	max(x.cd_estabelecimento) cd_estabelecimento
		from	pls_lote_faturamento	x,
			pls_fatura		y
		where	y.nr_seq_lote		= x.nr_sequencia
		and	y.nr_sequencia		= nr_seq_fatura_p
		and	(nr_seq_fatura_p IS NOT NULL AND nr_seq_fatura_p::text <> '') ) t;
	
	-- parametros da camara relacionados ao estabelecimento
	select	max(a.ie_processo_camara)
	into STRICT	ie_processo_camara_w
	from	pls_parametros_camara a
	where 	cd_estabelecimento = cd_estabelecimento_w;
	
	for r_c01_w in c01( nr_seq_lote_w , nr_seq_fatura_p ) loop
		if (ds_motivo_canc_p IS NOT NULL AND ds_motivo_canc_p::text <> '') then
			ds_motivo_canc_w := ds_motivo_canc_p;
		else	
			ds_motivo_canc_w := 'Titulo gerado e cancelado pelo lote de faturamento ' || nr_seq_lote_w || ', fatura ' || r_c01_w.nr_sequencia || '.';
		end if;
		
		-- valida se o titulo nao esta em camara de compensacao
		if (cd_estabelecimento_w IS NOT NULL AND cd_estabelecimento_w::text <> '') then
			
			-- valida cada titulo
			if (r_c01_w.nr_titulo IS NOT NULL AND r_c01_w.nr_titulo::text <> '') then
			
				select	count(a.nr_titulo_receber),
					max(b.nr_sequencia)
				into STRICT	nr_titulo_receber_w,
					nr_seq_lote_cam_w
				from	pls_titulo_lote_camara	a,
					pls_lote_camara_comp	b
				where	a.nr_seq_lote_camara	= b.nr_sequencia
				and	a.nr_titulo_receber	= r_c01_w.nr_titulo;
				
				/*Nao deixar alterar  valor para titulos que estao em lote de camara de compensacao.*/

				if (coalesce(ie_processo_camara_w,'CO') = 'CA') and (nr_titulo_receber_w > 0) then /*se  o processo camara de compensacao for regime de caixa e o titulo estiver na camara*/
						
						CALL wheb_mensagem_pck.exibir_mensagem_abort(335788,	'NR_SEQ_LOTE_W=' || nr_seq_lote_cam_w ||
												';NR_TITULO_W=' || r_c01_w.nr_titulo);
				end if;
			end if;
			
			-- NDC
			if (r_c01_w.nr_titulo_ndc IS NOT NULL AND r_c01_w.nr_titulo_ndc::text <> '') then
			
				select	count(a.nr_titulo_receber),
					max(b.nr_sequencia)
				into STRICT	nr_titulo_receber_w,
					nr_seq_lote_cam_w
				from	pls_titulo_lote_camara	a,
					pls_lote_camara_comp	b
				where	a.nr_seq_lote_camara	= b.nr_sequencia
				and	a.nr_titulo_receber	= r_c01_w.nr_titulo_ndc;
				
				/*Nao deixar alterar  valor para titulos que estao em lote de camara de compensacao.*/

				if (coalesce(ie_processo_camara_w,'CO') = 'CA') and (nr_titulo_receber_w > 0) then /*se  o processo camara de compensacao for regime de caixa e o titulo estiver na camara*/
						
						CALL wheb_mensagem_pck.exibir_mensagem_abort(335788,	'NR_SEQ_LOTE_W=' || nr_seq_lote_cam_w ||
												';NR_TITULO_W=' || r_c01_w.nr_titulo_ndc);
				end if;
			end if;
			
			
		end if;

		select	coalesce(max(ie_concil_contab), 'N')
		into STRICT	ie_concil_contab_w
		from 	pls_visible_false;

		if (ie_concil_contab_w = 'S') then
			CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_desvinc_tit_fat(nr_seq_lote_w, nr_seq_fatura_p, cd_estabelecimento_w, nm_usuario_p);
		end if;
		
		if (ie_origem_p not in ('CE','DE')) then
			if (r_c01_w.nr_nota_fiscal IS NOT NULL AND r_c01_w.nr_nota_fiscal::text <> '') then
				CALL pls_cancelar_nf(r_c01_w.nr_nota_fiscal, nm_usuario_p, ds_motivo_canc_w, 'N');
				
				CALL pls_gerar_fatura_log(nr_seq_lote_w, r_c01_w.nr_sequencia, null, 'PLS_DESV_TIT_LOTE_FATURAMENTO', 'CN', ie_commit_p, nm_usuario_p);
			end if;
			
			if (r_c01_w.nr_nota_fiscal_ndc IS NOT NULL AND r_c01_w.nr_nota_fiscal_ndc::text <> '') then
				CALL pls_cancelar_nf(r_c01_w.nr_nota_fiscal_ndc, nm_usuario_p, ds_motivo_canc_w, 'N');
			end if;
		end if;
		
		if (r_c01_w.nr_titulo IS NOT NULL AND r_c01_w.nr_titulo::text <> '') then
			CALL pls_gerar_fatura_log(nr_seq_lote_w, r_c01_w.nr_sequencia, null, 'PLS_DESV_TIT_LOTE_FATURAMENTO', 'CT', ie_commit_p, nm_usuario_p);
			
			CALL cancelar_titulo_receber(r_c01_w.nr_titulo, nm_usuario_p, 'N', clock_timestamp());
			
			update	titulo_receber
			set	ds_observacao_titulo 	= substr(CASE WHEN ds_observacao_titulo='' THEN  ds_motivo_canc_w  ELSE ds_observacao_titulo || chr(13) || chr(10) || ds_motivo_canc_w END , 1, 255),
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp()
			where	nr_titulo		= r_c01_w.nr_titulo;
		end if;
		
		if (r_c01_w.nr_titulo_ndc IS NOT NULL AND r_c01_w.nr_titulo_ndc::text <> '') then
			CALL cancelar_titulo_receber(r_c01_w.nr_titulo_ndc, nm_usuario_p, 'N', clock_timestamp());
			
			update	titulo_receber
			set	ds_observacao_titulo 	= substr(CASE WHEN ds_observacao_titulo='' THEN  ds_motivo_canc_w  ELSE ds_observacao_titulo || chr(13) || chr(10) || ds_motivo_canc_w END , 1, 255),
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp()
			where	nr_titulo		= r_c01_w.nr_titulo_ndc;
		end if;
		
		update	pls_fatura
		set	nr_titulo	 = NULL,
			nm_usuario	= nm_usuario_p,
			dt_atualizacao	= clock_timestamp(),
			nr_titulo_ndc	 = NULL,
			dt_geracao_ptu	 = NULL,
			ds_arquivo	 = NULL
		where 	nr_sequencia	= r_c01_w.nr_sequencia;
		
		-- limpa os campos e deixa salvo os valores antigos nos campos _old
		update	nota_fiscal
		set	nr_seq_fatura 		 = NULL,
			nr_seq_fatura_ndc 	 = NULL,
			dt_atualizacao 		= clock_timestamp(),
			nm_usuario 		= nm_usuario_p,
			nr_seq_fatura_old 	= r_c01_w.nr_sequencia
		where	nr_seq_fatura 		= r_c01_w.nr_sequencia;
		
		update	nota_fiscal
		set	nr_seq_fatura 		 = NULL,
			nr_seq_fatura_ndc 	 = NULL,
			dt_atualizacao 		= clock_timestamp(),
			nm_usuario 		= nm_usuario_p,
			nr_seq_fatura_ndc_old 	= r_c01_w.nr_sequencia
		where	nr_seq_fatura_ndc	= r_c01_w.nr_sequencia;
		
		for r_c02_w in c02( r_c01_w.nr_sequencia ) loop
			select	count(1)
			into STRICT	qt_a510_w
			from	ptu_fat_baixa_interc		a,
				ptu_fat_ret_baixa_interc	b,
				ptu_fat_ret_baixa_dados		c,
				ptu_fat_ret_baixa_status	d
			where	a.nr_sequencia		= b.nr_seq_fat_baixa_interc
			and	b.nr_sequencia		= c.nr_seq_fat_ret_baixa
			and	c.nr_sequencia		= d.nr_seq_fat_ret_baixa_dados
			and	d.ie_status_baixa	= 'S'
			and	a.nr_seq_ptu_fatura	= r_c02_w.nr_sequencia;
			
			if (qt_a510_w > 0) then
				-- A fatura do documento #@NR_DOCUMENTO#@ ja esta na funcao OPS - Modulo de Inadimplencia (A510) e nao pode ser desfeito.
				CALL wheb_mensagem_pck.exibir_mensagem_abort(739824, 'NR_DOCUMENTO=' || coalesce(r_c02_w.nr_fatura, r_c02_w.nr_nota_credito_debito));
			else
				delete	FROM ptu_log_fat_baixa_ws a
				where	a.nr_seq_fat_baixa_interc in (	SELECT	c.nr_sequencia
									from	ptu_fat_baixa_interc	c
									where	c.nr_seq_ptu_fatura	= r_c02_w.nr_sequencia);
				-- STATUS DO RETORNO
				delete	FROM ptu_fat_ret_baixa_status a
				where	a.nr_seq_fat_ret_baixa_dados in (	SELECT	e.nr_sequencia
										from	ptu_fat_baixa_interc		c,
											ptu_fat_ret_baixa_interc	d,
											ptu_fat_ret_baixa_dados		e
										where	c.nr_sequencia			= d.nr_seq_fat_baixa_interc
										and	d.nr_sequencia			= e.nr_seq_fat_ret_baixa
										and	c.nr_seq_ptu_fatura		= r_c02_w.nr_sequencia);
				-- DADOS RETORNO
				delete	FROM ptu_fat_ret_baixa_dados a
				where	a.nr_seq_fat_ret_baixa	in (	SELECT	d.nr_sequencia
									from	ptu_fat_baixa_interc		c,
										ptu_fat_ret_baixa_interc	d
									where	c.nr_sequencia			= d.nr_seq_fat_baixa_interc
									and	c.nr_seq_ptu_fatura		= r_c02_w.nr_sequencia);
						
				-- RETORNO
				delete	FROM ptu_fat_ret_baixa_interc a
				where	a.nr_seq_fat_baixa_interc in (	SELECT	c.nr_sequencia
									from	ptu_fat_baixa_interc	c
									where	c.nr_seq_ptu_fatura	= r_c02_w.nr_sequencia);
				-- DADOS COBRANCA
				delete	FROM ptu_fat_baixa_dados a
				where	a.nr_seq_fat_baixa_interc in (	SELECT	c.nr_sequencia
									from	ptu_fat_baixa_interc	c
									where	c.nr_seq_ptu_fatura	= r_c02_w.nr_sequencia);
				-- COBRANCA
				delete	FROM ptu_fat_baixa_interc	a
				where	a.nr_seq_ptu_fatura	= r_c02_w.nr_sequencia;
			end if;
			
			for r_c03_w in c03( r_c02_w.nr_sequencia ) loop
				delete	FROM ptu_nota_servico_item
				where	nr_seq_nota_servico in (SELECT	nr_sequencia
								from	ptu_nota_servico
								where	nr_seq_nota_cobr = r_c03_w.nr_sequencia);
								
				delete	FROM ptu_nota_servico_proc
				where	nr_seq_nota_servico in (SELECT	nr_sequencia
								from	ptu_nota_servico
								where	nr_seq_nota_cobr = r_c03_w.nr_sequencia);
								
				delete	FROM ptu_nota_servico_mat
				where	nr_seq_nota_servico in (SELECT	nr_sequencia
								from	ptu_nota_servico
								where	nr_seq_nota_cobr = r_c03_w.nr_sequencia);
								
				delete 	FROM ptu_nota_servico
				where	nr_seq_nota_cobr = r_c03_w.nr_sequencia;
				
				delete 	FROM ptu_nota_complemento
				where 	nr_seq_nota_cobr = r_c03_w.nr_sequencia;
				
				delete 	FROM ptu_nota_fiscal
				where 	nr_seq_nota_cobr = r_c03_w.nr_sequencia;
				
				for r_c04_w in c04( r_c03_w.nr_sequencia ) loop
					delete 	FROM ptu_nota_hosp_compl
					where 	nr_seq_nota_hosp = r_c04_w.nr_sequencia;
				end loop;
				
				delete 	FROM ptu_nota_hospitalar
				where 	nr_seq_nota_cobr = r_c03_w.nr_sequencia;
			end loop;
			
			for r_c08_w in c08(r_c02_w.nr_sequencia) loop
				delete	FROM ptu_nota_servico_item
				where	nr_seq_nota_servico_rrs in (	SELECT	nr_sequencia
									from	ptu_nota_servico_rrs
									where	nr_seq_nota_cobr_rrs = r_c08_w.nr_seq_cobranca_rss);
									
				delete	FROM ptu_nota_servico_proc
				where	nr_seq_nota_servico_rrs in (	SELECT	nr_sequencia
									from	ptu_nota_servico_rrs
									where	nr_seq_nota_cobr_rrs = r_c08_w.nr_seq_cobranca_rss);
								
				delete	FROM ptu_nota_servico_mat
				where	nr_seq_nota_servico_rrs in (	SELECT	nr_sequencia
									from	ptu_nota_servico_rrs
									where	nr_seq_nota_cobr_rrs = r_c08_w.nr_seq_cobranca_rss);
			
				delete 	FROM ptu_nota_servico_rrs
				where	nr_seq_nota_cobr_rrs = r_c08_w.nr_seq_cobranca_rss;
			end loop;
			
			delete 	FROM ptu_nota_cobranca_rrs 	
			where 	nr_seq_fatura = r_c02_w.nr_sequencia;
			
			delete 	FROM ptu_nota_cobranca
			where 	nr_seq_fatura = r_c02_w.nr_sequencia;
			
			delete 	FROM ptu_fatura_boleto
			where 	nr_seq_fatura = r_c02_w.nr_sequencia;
			
			delete 	FROM ptu_fatura_corpo
			where 	nr_seq_fatura = r_c02_w.nr_sequencia;
			
			delete 	FROM ptu_fatura_historico
			where 	nr_seq_fatura = r_c02_w.nr_sequencia;
			
			delete 	FROM ptu_a500_historico
			where 	nr_seq_fatura = r_c02_w.nr_sequencia;
			
			delete	FROM ptu_fatura_cedente
			where	nr_seq_fatura = r_c02_w.nr_sequencia;
			
			delete	FROM ptu_fatura_conta_exc
			where	nr_seq_fatura = r_c02_w.nr_sequencia;
		end loop;
		
		if (coalesce(nr_seq_fatura_p::text, '') = '') and (r_c01_w.nr_titulo IS NOT NULL AND r_c01_w.nr_titulo::text <> '') then
			update	titulo_receber
			set	nr_seq_ptu_fatura  = NULL,
				nr_seq_ptu_fatura_old = nr_seq_ptu_fatura,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
			where	nr_titulo = r_c01_w.nr_titulo;
		end if;
		
		if (coalesce(nr_seq_fatura_p::text, '') = '') and (r_c01_w.nr_titulo_ndc IS NOT NULL AND r_c01_w.nr_titulo_ndc::text <> '') then
			update	titulo_receber
			set	nr_seq_ptu_fatura  = NULL,
				nr_seq_ptu_fatura_old = nr_seq_ptu_fatura,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
			where	nr_titulo = r_c01_w.nr_titulo_ndc;
		end if;
		
		delete	FROM ptu_fatura
		where	nr_seq_pls_fatura = r_c01_w.nr_sequencia;
		
		if (ie_origem_p = 'D') then
			select	count(1)
			into STRICT	qt_registros_w
			from	pls_fatura
			where	nr_seq_lote = r_c01_w.nr_seq_lote
			and	coalesce(nr_titulo::text, '') = ''  LIMIT 1;
			
			if (qt_registros_w	> 0) then
				update	pls_lote_faturamento
				set	dt_geracao_titulos 	 = NULL,
					dt_geracao_nf		 = NULL,
					nm_usuario 		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	nr_sequencia 		= r_c01_w.nr_seq_lote;
			end if;
		end if;
	end loop;
	
	if (ie_commit_p = 'S') then
		commit;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_desv_tit_lote_faturamento ( nr_seq_fatura_p pls_fatura.nr_sequencia%type, nr_seq_lote_p pls_fatura.nr_seq_lote%type, nm_usuario_p usuario.nm_usuario%type, ie_commit_p text, nr_seq_mot_canc_p bigint, ds_motivo_canc_p text, ie_origem_p text) FROM PUBLIC;

