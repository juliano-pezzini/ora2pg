-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pat_alterar_conta_contabil ( nr_sequencia_p bigint, cd_conta_contabil_p text, dt_transacao_p timestamp, nr_seq_transacao_p bigint, nr_seq_regra_conta_p bigint, nm_usuario_p text, cd_centro_custo_nova_p bigint default null, cd_centro_custo_antiga_p bigint default null) AS $body$
DECLARE


cd_conta_antiga_w		varchar(20);
tx_deprec_w			double precision;
vl_contabil_w			double precision;
vl_deprec_acum_w		double precision;
vl_original_w			double precision;
qt_existe_w			bigint;
dt_ult_depeciacao_w		timestamp;
nr_seq_regra_conta_ant_w	bigint;
qt_reg_w			bigint;
ie_alterar_conta_contabil_w	varchar(1);
ie_situacao_w           pat_conta_contabil.ie_situacao%type;
cd_empresa_w			empresa.cd_empresa%type;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;
nr_seq_local_w			pat_local.nr_sequencia%type;
cd_centro_custo_w		centro_custo.cd_centro_custo%type;

oper_patrimonial		constant philips_patrimonio_pck.r_pat_operacao := philips_patrimonio_pck.get_pat_operacao;

pat_bem_movimento_w		pat_bem_movimento%rowtype;
nr_seq_tx_deprec_w		pat_bem_taxa.nr_sequencia%type;
tx_deprec_fiscal_w		pat_bem_avaliacao.tx_deprec_fiscal%type;
dt_vig_regra_tx_deprec_w	pat_bem_taxa.dt_vigencia%type;
tx_deprec_reg_w			pat_bem_taxa.pr_depreciacao%type;
tx_deprec_fiscal_reg_w		pat_bem_taxa.pr_deprec_fiscal%type;

c01 CURSOR FOR
SELECT	nr_sequencia,
	vl_original
from	pat_bem
where	nr_seq_princ = nr_sequencia_p
and	ie_tipo_valor <> 'S';

c01_w		c01%rowtype;


BEGIN
ie_alterar_conta_contabil_w := obter_param_usuario(937, 69, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_alterar_conta_contabil_w);

select coalesce(max(ie_situacao),'I')
into STRICT 	ie_situacao_w
from 	pat_conta_contabil
where	 nr_sequencia = nr_seq_regra_conta_p;

if (ie_situacao_w = 'I')then
	/*'Nao e possivel informar uma conta contabil inativa'||'#@#@');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(1145591);
elsif (coalesce(cd_conta_contabil_p,'0') = '0') then
	/*Nao foi informado a conta contabil'||'#@#@');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(266533);
elsif (coalesce(nr_seq_transacao_p,0) = 0) then
	/*Nao foi informado a transacao financeira' || '#@#@');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(266534);
elsif (trunc(dt_transacao_p,'dd') > trunc(clock_timestamp(),'dd')) then
	/*A Data de transacao nao pode ser maior que hoje' || '#@#@');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(266535);
end if;

select	count(*)
into STRICT	qt_existe_w
from	pat_valor_bem
where	nr_seq_bem = nr_sequencia_p;
if (qt_existe_w > 0) then
	select	max(dt_valor)
	into STRICT	dt_ult_depeciacao_w
	from	pat_valor_bem
	where	nr_seq_bem = nr_sequencia_p;
	if (trunc(dt_transacao_p,'mm') <= trunc(dt_ult_depeciacao_w,'mm')) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(266536,'MES=' || to_char(dt_transacao_p,'mm/yyyy'));
	end if;
end if;

select	cd_conta_contabil,
	vl_original,
	nr_seq_regra_conta,
	cd_estabelecimento,
	nr_seq_local,
	cd_centro_custo
into STRICT	cd_conta_antiga_w,
	vl_original_w,
	nr_seq_regra_conta_ant_w,
	cd_estabelecimento_w,
	nr_seq_local_w,
	cd_centro_custo_w
from	pat_bem
where	nr_sequencia = nr_sequencia_p;

cd_empresa_w := obter_empresa_estab(cd_estabelecimento_w);

select	coalesce(max(vl_contabil),0),
	coalesce(max(vl_deprec_acum),0)
into STRICT	vl_contabil_w,
	vl_deprec_acum_w
from	pat_valor_bem
where	dt_valor = (
	SELECT	max(dt_valor)
	from	pat_valor_bem
	where	nr_seq_bem = nr_sequencia_p)
and	nr_seq_bem = nr_sequencia_p;

if (coalesce(nr_seq_regra_conta_p,0) = 0) then
	begin
	select	max(b.pr_depreciacao),
			max(b.pr_deprec_fiscal)
	into STRICT	tx_deprec_w,
			tx_deprec_fiscal_w
	from	pat_conta_contabil b
	where	b.cd_conta_contabil = cd_conta_contabil_p
	and	cd_empresa = cd_empresa_w
	and	coalesce(cd_estabelecimento, cd_estabelecimento_w) = cd_estabelecimento_w
	and	b.dt_vigencia =(	SELECT	max(a.dt_vigencia)
					from	pat_conta_contabil a
					where	a.dt_vigencia <= clock_timestamp()
					and	cd_empresa = cd_empresa_w
					and	coalesce(cd_estabelecimento, cd_estabelecimento_w) = cd_estabelecimento_w
					and	a.cd_conta_contabil = cd_conta_contabil_p);
	end;
else
	begin
	select	max(b.pr_depreciacao),
			max(b.pr_deprec_fiscal)
	into STRICT	tx_deprec_w,
			tx_deprec_fiscal_w
	from	pat_conta_contabil b
	where	b.nr_sequencia = nr_seq_regra_conta_p;
	end;
end if;

update	pat_bem
set	cd_conta_contabil	= cd_conta_contabil_p,
	nr_seq_regra_conta	= nr_seq_regra_conta_p,
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp()
where	nr_sequencia		= nr_sequencia_p;
	
select	x.dt_vigencia,
	x.pr_depreciacao,
	x.pr_deprec_fiscal
into STRICT	dt_vig_regra_tx_deprec_w,
	tx_deprec_reg_w,
	tx_deprec_fiscal_reg_w
from (
	SELECT	1 ie_ordem,
		a.nr_sequencia,
		a.dt_vigencia,
		a.pr_depreciacao,
		coalesce(a.pr_deprec_fiscal,0) pr_deprec_fiscal
	from	pat_bem_taxa a
	where	a.nr_seq_bem = nr_sequencia_p
	and	a.dt_vigencia <= dt_transacao_p
	
union all

	SELECT	2 ie_ordem,
		0 nr_sequencia,
		null dt_vigencia,
		a.tx_deprec pr_depreciacao,
		a.tx_fiscal pr_deprec_fiscal
	from	pat_bem a
	where	a.nr_sequencia = nr_sequencia_p
	order by
		ie_ordem,
		dt_vigencia desc,
		nr_sequencia desc) x LIMIT 1;

if	((tx_deprec_w <> tx_deprec_reg_w) or (tx_deprec_fiscal_w <> tx_deprec_fiscal_reg_w)) then
	
	select	nextval('pat_bem_taxa_seq')
	into STRICT	nr_seq_tx_deprec_w
	;
	
	insert into pat_bem_taxa(nr_sequencia,
			nr_seq_bem,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			dt_vigencia,
			pr_depreciacao,
			pr_deprec_fiscal)
	values (nr_seq_tx_deprec_w,
			nr_sequencia_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			dt_transacao_p,
			tx_deprec_w,
			tx_deprec_fiscal_w);
end if;


insert into pat_conta_alteracao(
	nr_sequencia,
	dt_atualizacao,
	nm_usuario,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	nr_seq_bem,
	cd_conta_antiga,
	cd_conta_nova,
	dt_transacao,
	dt_valor,
	nr_seq_trans_financ,
	vl_contabil,
	vl_deprec_acum,
	vl_original,
	nr_seq_regra_conta_nova,
	nr_seq_regra_conta_ant,
	cd_centro_custo_antiga,
	cd_centro_custo_nova)
values ( nextval('pat_conta_alteracao_seq'),
	clock_timestamp(),
	nm_usuario_p,
	clock_timestamp(),
	nm_usuario_p,
	nr_sequencia_p,
	cd_conta_antiga_w,
	cd_conta_contabil_p,
	dt_transacao_p,
	dt_ult_depeciacao_w,
	nr_seq_transacao_p,
	vl_contabil_w,
	vl_deprec_acum_w,
	vl_original_w,
	nr_seq_regra_conta_p,
	nr_seq_regra_conta_ant_w,
	coalesce(cd_centro_custo_antiga_p, cd_centro_custo_w),
	coalesce(cd_centro_custo_nova_p, cd_centro_custo_w) );

/*
Gravar troca de conta do bem
*/
if (philips_patrimonio_pck.get_ie_gravar_movimento) then
	begin

	/* Gravar movimento de saida do bem */

	pat_bem_movimento_w.cd_centro_custo		:= cd_centro_custo_w;
	pat_bem_movimento_w.cd_centro_custo_dest	:= null;
	pat_bem_movimento_w.cd_estabelecimento		:= cd_estabelecimento_w;
	pat_bem_movimento_w.cd_estab_dest		:= null;
	pat_bem_movimento_w.dt_movimento		:= clock_timestamp();
	pat_bem_movimento_w.ie_acao			:= 'I'; /* Inclusao */
	pat_bem_movimento_w.ie_tipo_movimento		:= 0; /* Valor default */
	pat_bem_movimento_w.nr_seq_bem			:= nr_sequencia_p;
	pat_bem_movimento_w.nr_seq_local		:= nr_seq_local_w;
	pat_bem_movimento_w.nr_seq_local_dest		:= null;
	pat_bem_movimento_w.nr_seq_regra_conta		:= nr_seq_regra_conta_ant_w;
	pat_bem_movimento_w.nr_seq_regra_conta_dest	:= nr_seq_regra_conta_p;
	pat_bem_movimento_w.nr_seq_operacao		:= oper_patrimonial.alter_conta_contabil;
	/* pat_bem_movimento_w.ie_entrada_saida		:= 'S'; */

	pat_bem_movimento_w.vl_movimento		:= vl_contabil_w;

	pat_bem_movimento_w := philips_patrimonio_pck.gerar_movimento_bem('N', nm_usuario_p, pat_bem_movimento_w);

	end;
end if;

if (ie_alterar_conta_contabil_w = 'S') then
	begin
	select	count(*)
	into STRICT	qt_reg_w
	from	pat_bem
	where	nr_seq_princ = nr_sequencia_p;

	if (qt_reg_w > 0) then
		begin
		open c01;
		loop
		fetch c01 into c01_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
				if (coalesce(nr_seq_regra_conta_p,0) = 0) then
					begin
					select	max(b.pr_depreciacao),
							max(b.pr_deprec_fiscal)
					into STRICT	tx_deprec_w,
							tx_deprec_fiscal_w
					from	pat_conta_contabil b
					where	b.cd_conta_contabil = cd_conta_contabil_p
					and	cd_empresa = cd_empresa_w
					and	coalesce(cd_estabelecimento, cd_estabelecimento_w) = cd_estabelecimento_w
					and	b.dt_vigencia =(	SELECT	max(a.dt_vigencia)
									from	pat_conta_contabil a
									where	a.dt_vigencia <= clock_timestamp()
									and	cd_empresa = cd_empresa_w
									and	coalesce(cd_estabelecimento, cd_estabelecimento_w) = cd_estabelecimento_w
									and	a.cd_conta_contabil = cd_conta_contabil_p);
					end;
				else
					begin
					select	max(b.pr_depreciacao),
							max(b.pr_deprec_fiscal)
					into STRICT	tx_deprec_w,
							tx_deprec_fiscal_w
					from	pat_conta_contabil b
					where	b.nr_sequencia = nr_seq_regra_conta_p;
					end;
				end if;
			
				update	pat_bem
				set	cd_conta_contabil	= cd_conta_contabil_p,
					nr_seq_regra_conta	= nr_seq_regra_conta_p,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao		= clock_timestamp()
				where	nr_sequencia		= c01_w.nr_sequencia;
				
				select	x.dt_vigencia,
					x.pr_depreciacao,
					x.pr_deprec_fiscal
				into STRICT	dt_vig_regra_tx_deprec_w,
					tx_deprec_reg_w,
					tx_deprec_fiscal_reg_w
				from (
					SELECT	1 ie_ordem,
						a.nr_sequencia,
						a.dt_vigencia,
						a.pr_depreciacao,
						coalesce(a.pr_deprec_fiscal,0) pr_deprec_fiscal
					from	pat_bem_taxa a
					where	a.nr_seq_bem = nr_sequencia_p
					and	a.dt_vigencia <= dt_transacao_p
					
union all

					SELECT	2 ie_ordem,
						0 nr_sequencia,
						null dt_vigencia,
						a.tx_deprec pr_depreciacao,
						a.tx_fiscal pr_deprec_fiscal
					from	pat_bem a
					where	a.nr_sequencia = nr_sequencia_p
					order by
						ie_ordem,
						dt_vigencia desc,
						nr_sequencia desc) x LIMIT 1;
				
				if	((tx_deprec_w <> tx_deprec_reg_w) or (tx_deprec_fiscal_w <> tx_deprec_fiscal_reg_w)) then
					select	nextval('pat_bem_taxa_seq')
					into STRICT	nr_seq_tx_deprec_w
					;

					insert into pat_bem_taxa(nr_sequencia,
							nr_seq_bem,
							dt_atualizacao,
							nm_usuario,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							dt_vigencia,
							pr_depreciacao,
							pr_deprec_fiscal)
					values (nr_seq_tx_deprec_w,
							nr_sequencia_p,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							dt_transacao_p,
							tx_deprec_w,
							tx_deprec_fiscal_w);
				end if;

				select	coalesce(max(vl_contabil),0),
					coalesce(max(vl_deprec_acum),0)
				into STRICT	vl_contabil_w,
					vl_deprec_acum_w
				from	pat_valor_bem
				where	dt_valor = (
					SELECT	max(dt_valor)
					from	pat_valor_bem
					where	nr_seq_bem = c01_w.nr_sequencia)
				and	nr_seq_bem = c01_w.nr_sequencia;

				insert into pat_conta_alteracao(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_bem,
					cd_conta_antiga,
					cd_conta_nova,
					dt_transacao,
					dt_valor,
					nr_seq_trans_financ,
					vl_contabil,
					vl_deprec_acum,
					vl_original,
					nr_seq_regra_conta_nova,
					nr_seq_regra_conta_ant,
					cd_centro_custo_antiga,
					cd_centro_custo_nova)
				values ( nextval('pat_conta_alteracao_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					c01_w.nr_sequencia,
					cd_conta_antiga_w,
					cd_conta_contabil_p,
					dt_transacao_p,
					dt_ult_depeciacao_w,
					nr_seq_transacao_p,
					vl_contabil_w,
					vl_deprec_acum_w,
					c01_w.vl_original,
					nr_seq_regra_conta_p,
					nr_seq_regra_conta_ant_w,
					coalesce(cd_centro_custo_antiga_p, cd_centro_custo_w),
					coalesce(cd_centro_custo_nova_p, cd_centro_custo_w) );
				/*
				Gravar troca de conta do bem vinculado
				*/
				if (philips_patrimonio_pck.get_ie_gravar_movimento) then
					begin

					/* Gravar movimento de saida do bem */

					pat_bem_movimento_w.cd_centro_custo		:= cd_centro_custo_w;
					pat_bem_movimento_w.cd_centro_custo_dest	:= null;
					pat_bem_movimento_w.cd_estabelecimento		:= cd_estabelecimento_w;
					pat_bem_movimento_w.cd_estab_dest		:= null;
					pat_bem_movimento_w.dt_movimento		:= clock_timestamp();
					pat_bem_movimento_w.ie_acao			:= 'I'; /* Inclusao */
					pat_bem_movimento_w.ie_tipo_movimento		:= 0; /* Valor default */
					pat_bem_movimento_w.nr_seq_bem			:= c01_w.nr_sequencia;
					pat_bem_movimento_w.nr_seq_local		:= nr_seq_local_w;
					pat_bem_movimento_w.nr_seq_local_dest		:= null;
					pat_bem_movimento_w.nr_seq_regra_conta		:= nr_seq_regra_conta_ant_w;
					pat_bem_movimento_w.nr_seq_regra_conta_dest	:= nr_seq_regra_conta_p;
					pat_bem_movimento_w.nr_seq_operacao		:= oper_patrimonial.alter_conta_contabil;
					/* pat_bem_movimento_w.ie_entrada_saida		:= 'S'; */

					pat_bem_movimento_w.vl_movimento		:= vl_contabil_w;

					pat_bem_movimento_w := philips_patrimonio_pck.gerar_movimento_bem('N', nm_usuario_p, pat_bem_movimento_w);

					end;
				end if;
				
			end;
		end loop;
		close c01;
		end;
	end if;
	end;
end if;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pat_alterar_conta_contabil ( nr_sequencia_p bigint, cd_conta_contabil_p text, dt_transacao_p timestamp, nr_seq_transacao_p bigint, nr_seq_regra_conta_p bigint, nm_usuario_p text, cd_centro_custo_nova_p bigint default null, cd_centro_custo_antiga_p bigint default null) FROM PUBLIC;

