-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_delete_conta_medica_resumo ( nr_seq_conta_p pls_conta_medica_resumo.nr_seq_conta%type, nr_seq_conta_proc_p pls_conta_medica_resumo.nr_seq_conta_proc%type, nr_seq_conta_mat_p pls_conta_medica_resumo.nr_seq_conta_mat%type, nm_usuario_p text) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Apagar ou inativar os dados da tabela PLS_CONTA_MEDICA_RESUMO para
	o item passado por parâmetro conforme necessidade.
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
------------------------------------------------------------------------------------------------------------------

Pontos de atenção:	

Alterações:
------------------------------------------------------------------------------------------------------------------

jjung OS  612804 - 02/07/2013 

Alteração:	Ajustado restrição Where dos updates e dos deletes. Para os updates foi 
	adicionado a restrição por conta. Foi removido a restrição por situação
	no Update, entende-se que não é necessário está sendo alterado o valor do campo,
	com o mesmo valor que estava sendo restringido.

Motivo:	Devido a grandeza da massa de dados que passou a ficar acumulada na tabela
	quando foi decidido não deletar mais da tabela quando houvessem registros 
	de pagamento para executar esta rotina o sistema estava demorando muito 
	tempo em contas aonde o número de itens fosse muito grande. Foi incluído no
	Update o filtro por Conta pois o índice da FK é composto e contém a informação 
	da conta e do item.
------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_lote_contabilizado_w		pls_conta_medica_resumo.nr_lote_contabil_prov%type;
nr_lote_faturamento_w		pls_fatura.nr_seq_lote%type;
ie_status_origem_lote_w		lote_contabil.ie_status_origem%type;

BEGIN

-- Deletar para procedimento.
if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then
	
	-- Inativar os dados que já contém registro de pagamento que não pode ser desfeitos. Estes itens não serão excluídos

	-- e será impossível excluir a conta. Uma conta que estiver com esta situação NÃO pode ser excluída e, se for o caso

	-- deve ser cancelada apenas.
	update	pls_conta_medica_resumo a
	set	a.ie_situacao		= 'I',
		a.nm_usuario		= nm_usuario_P,
		a.dt_atualizacao	= clock_timestamp()
	where	a.nr_seq_conta 		= nr_seq_conta_p
	and	a.nr_seq_conta_proc 	= nr_seq_conta_proc_p
	and	coalesce(nr_seq_lote_pgto::text, '') = ''
	and	exists (	SELECT	1
				from	pls_pag_prest_item_resumo	x
				where	x.nr_seq_conta		= a.nr_seq_conta
				and	x.nr_seq_resumo_conta 	= a.nr_sequencia);
	
	select	max( coalesce( nr_lote_contabil_prov,0 ) ) nr_lote_contabil
	into STRICT	nr_lote_contabilizado_w
	from	pls_conta_medica_resumo
	where	nr_seq_conta = nr_seq_conta_p
	and   	ie_situacao = 'A'
	and   	ie_tipo_item != 'I'
	and	nr_seq_conta_proc = nr_seq_conta_proc_p;
	
	if (nr_lote_contabilizado_w	> 0) then
		select 	coalesce(max(ie_status_origem), 'M')
		into STRICT	ie_status_origem_lote_w
		from	lote_contabil
		where	nr_lote_contabil = nr_lote_contabilizado_w;

		if (ie_status_origem_lote_w <> 'SO') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(324839, 'NR_LOTE_CONTABILIZADO=' || nr_lote_contabilizado_w);
		end if;
	end if;
	
	delete	FROM pls_conta_medica_resumo
	where	nr_seq_conta		= nr_seq_conta_p
	and	nr_seq_conta_proc	= nr_seq_conta_proc_p
	and	ie_situacao = 'A';

-- Deletar para o material
elsif (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then
	
	-- Inativar os dados que já contém registro de pagamento que não pode ser desfeitos. Estes itens não serão excluídos

	-- e será impossível excluir a conta. Uma conta que estiver com esta situação NÃO pode ser excluída e, se for o caso

	-- deve ser cancelada apenas.
	update	pls_conta_medica_resumo	a
	set	ie_situacao		= 'I',
		nm_usuario		= nm_usuario_P,
		dt_atualizacao		= clock_timestamp()
	where	a.nr_seq_conta 		= nr_seq_conta_p
	and	a.nr_seq_conta_mat 	= nr_seq_conta_mat_p
	and	coalesce(a.nr_seq_lote_pgto::text, '') = ''
	and	exists (	SELECT	1
				from	pls_pag_prest_item_resumo	x
				where	x.nr_seq_conta		= a.nr_seq_conta
				and	x.nr_seq_resumo_conta 	= a.nr_sequencia);
	
	select	max( coalesce( nr_lote_contabil_prov,0 ) ) nr_lote_contabil
	into STRICT	nr_lote_contabilizado_w
	from	pls_conta_medica_resumo
	where	nr_seq_conta = nr_seq_conta_p
	and   	ie_situacao = 'A'
	and   	ie_tipo_item != 'I'
	and	nr_seq_conta_mat = nr_seq_conta_mat_p
	and	coalesce( nr_lote_contabil_prov,0 ) <> 0;
		
	if (nr_lote_contabilizado_w > 0) then
		select 	coalesce(max(ie_status_origem), 'M')
		into STRICT	ie_status_origem_lote_w
		from	lote_contabil
		where	nr_lote_contabil = nr_lote_contabilizado_w;

		if (ie_status_origem_lote_w <> 'SO') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(324839, 'NR_LOTE_CONTABILIZADO=' || nr_lote_contabilizado_w);
		end if;
	end if;
	
	delete	FROM pls_conta_medica_resumo
	where	nr_seq_conta		= nr_seq_conta_p
	and	nr_seq_conta_mat	= nr_seq_conta_mat_p
	and	ie_situacao	= 'A';

-- Deletar para a conta
elsif (nr_seq_conta_p IS NOT NULL AND nr_seq_conta_p::text <> '') then
	
	-- Inativar os dados que já contém registro de pagamento que não pode ser desfeitos. Estes itens não serão excluídos

	-- e será impossível excluir a conta. Uma conta que estiver com esta situação NÃO pode ser excluída e, se for o caso

	-- deve ser cancelada apenas.	
	update	pls_conta_medica_resumo	a
	set	ie_situacao	= 'I',
		nm_usuario	= nm_usuario_P,
		dt_atualizacao	= clock_timestamp()
	where	nr_seq_conta	= nr_seq_conta_p
	and	coalesce(nr_seq_lote_pgto::text, '') = ''
	and	exists (	SELECT	1
				from	pls_pag_prest_item_resumo	x
				where	x.nr_seq_conta		= a.nr_seq_conta
				and	x.nr_seq_resumo_conta 	= a.nr_sequencia);
	
	select	max( coalesce( nr_lote_contabil_prov,0 ) ) nr_lote_contabil
	into STRICT	nr_lote_contabilizado_w
	from	pls_conta_medica_resumo
	where	nr_seq_conta = nr_seq_conta_p
	and     ie_situacao = 'A'
	and     ie_tipo_item != 'I'
	and	coalesce( nr_lote_contabil_prov,0 ) <> 0;
		
	if (nr_lote_contabilizado_w > 0) then
		select 	coalesce(max(ie_status_origem), 'M')
		into STRICT	ie_status_origem_lote_w
		from	lote_contabil
		where	nr_lote_contabil = nr_lote_contabilizado_w;

		if (ie_status_origem_lote_w <> 'SO') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(324839, 'NR_LOTE_CONTABILIZADO=' || nr_lote_contabilizado_w);
		end if;
	end if;
	
	delete	FROM pls_conta_medica_resumo
	where	nr_seq_conta	= nr_seq_conta_p
	and	ie_situacao	= 'A';
	
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_delete_conta_medica_resumo ( nr_seq_conta_p pls_conta_medica_resumo.nr_seq_conta%type, nr_seq_conta_proc_p pls_conta_medica_resumo.nr_seq_conta_proc%type, nr_seq_conta_mat_p pls_conta_medica_resumo.nr_seq_conta_mat%type, nm_usuario_p text) FROM PUBLIC;

