-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_valida_ocor_aut_exec_coop ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_segurado_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Procedure utilizada para validar o médico solicitante cooperado e médico executor cooperado 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[X] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção:Performance. 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ie_regra_w			varchar(2);
ie_tipo_ocorrencia_w		varchar(2);
nr_seq_oc_benef_w		bigint;
ie_medico_cooperado_w		varchar(2);
ie_gerar_ocorrencia_w		varchar(2);
ie_valida_exec_coop_w		pls_validacao_aut_exe_coop.ie_valida_exec_coop%type;
cd_cgc_w			pls_prestador.cd_cgc%type;

 
C01 CURSOR(nr_seq_execucao_pc bigint) FOR 
	SELECT	a.nr_seq_prestador, 
		b.nr_sequencia, 
		b.cd_procedimento, 
		b.ie_origem_proced, 
		b.cd_medico_executor 
	from	pls_execucao_requisicao a, 
		pls_execucao_req_item b 
	where	b.nr_seq_execucao	= a.nr_sequencia 
	and	a.nr_sequencia		= nr_seq_execucao_pc 
	and	coalesce(b.nr_seq_material::text, '') = '';

C02 CURSOR(nr_seq_execucao_pc bigint) FOR 
	SELECT	a.nr_seq_prestador, 
		b.nr_sequencia, 
		b.nr_seq_material, 
		b.cd_medico_executor 
	from	pls_execucao_requisicao a, 
		pls_execucao_req_item b 
	where	b.nr_seq_execucao	= a.nr_sequencia 
	and	a.nr_sequencia		= nr_seq_execucao_pc 
	and	coalesce(b.cd_procedimento::text, '') = '';	
 
BEGIN 
 
begin 
	select	ie_valida_exec_coop 
	into STRICT	ie_valida_exec_coop_w 
	from	pls_validacao_aut_exe_coop 
	where	nr_seq_ocor_aut_combinada = nr_seq_ocor_combinada_p 
	and	ie_situacao = 'A';
exception 
when others then 
	ie_valida_exec_coop_w := 'N';
end;
 
if (ie_valida_exec_coop_w = 'S') then 
	if (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then 
		 
		for r_C01_w in C01(nr_seq_execucao_p) loop 
			begin 
			ie_gerar_ocorrencia_w	:= 'S';
 
			if (ie_utiliza_filtro_p	= 'S') then 
				SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, null, null, nr_seq_execucao_p, null, null, null, null, r_C01_w.nr_sequencia, r_C01_w.cd_procedimento, r_C01_w.ie_origem_proced, null, null, null, nr_seq_ocorrencia_p, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
 
				if (ie_regra_w	= 'S') then 
					ie_gerar_ocorrencia_w	:= 'S';
				elsif (ie_regra_w	in ('E','N')) then 
					ie_gerar_ocorrencia_w	:= 'N';
				end if;
			end if;
 
			if (r_C01_w.cd_medico_executor IS NOT NULL AND r_C01_w.cd_medico_executor::text <> '') then 
				select	CASE WHEN pls_obter_se_cooperado_ativo(r_C01_w.cd_medico_executor, clock_timestamp(), null)='S' THEN  'C'  ELSE 'N' END  
				into STRICT	ie_medico_cooperado_w 
				;
				 
			else 
				select	pls_obter_dados_prestador(r_C01_w.nr_seq_prestador,'CGC') 
				into STRICT	cd_cgc_w 
				;
				 
				if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then 
					ie_medico_cooperado_w	:= 'N';
				end if;
			end if;			
 
			if (ie_gerar_ocorrencia_w	= 'S') and (ie_medico_cooperado_w = 'N') then 
				nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, null, null, null, r_C01_w.nr_sequencia, null, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 10, cd_estabelecimento_p, 'N', nr_seq_execucao_p, nr_seq_oc_benef_w, null, null, null, null);
 
				CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p, 
								null, null, nr_seq_execucao_p, 
								null, null, null, 
								null, r_C01_w.nr_sequencia, null, 
								nm_usuario_p, cd_estabelecimento_p);
			end if;		
			end;
		end loop;
		 
		for r_C02_w in C02(nr_seq_execucao_p) loop 
			begin		 
			ie_gerar_ocorrencia_w	:= 'S';
 
			if (ie_utiliza_filtro_p	= 'S') then 
				SELECT * FROM pls_gerar_ocor_aut_filtro(	nr_seq_ocor_combinada_p, null, null, nr_seq_execucao_p, null, null, null, null, r_C02_w.nr_sequencia, null, null, r_C02_w.nr_seq_material, null, null, nr_seq_ocorrencia_p, null, null, null, nm_usuario_p, ie_regra_w, ie_tipo_ocorrencia_w) INTO STRICT ie_regra_w, ie_tipo_ocorrencia_w;
 
				if (ie_regra_w	= 'S') then 
					ie_gerar_ocorrencia_w	:= 'S';
				elsif (ie_regra_w	in ('E','N')) then 
					ie_gerar_ocorrencia_w	:= 'N';
				end if;
			end if;
			 
			if (r_C02_w.cd_medico_executor IS NOT NULL AND r_C02_w.cd_medico_executor::text <> '') then 
				select	CASE WHEN pls_obter_se_cooperado_ativo(r_C02_w.cd_medico_executor, clock_timestamp(), null)='S' THEN  'C'  ELSE 'N' END  
				into STRICT	ie_medico_cooperado_w 
				;
					 
			else 
				select	pls_obter_dados_prestador(r_C02_w.nr_seq_prestador,'CGC') 
				into STRICT	cd_cgc_w 
				;
				 
				if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then 
					ie_medico_cooperado_w	:= 'N';
				end if;
			end if;			
 
			if (ie_gerar_ocorrencia_w	= 'S') and (ie_medico_cooperado_w = 'N') then 
				nr_seq_oc_benef_w := pls_inserir_ocorrencia(	nr_seq_segurado_p, nr_seq_ocorrencia_p, null, null, null, null, r_C02_w.nr_sequencia, nr_seq_ocor_combinada_p, nm_usuario_p, null, nr_seq_motivo_glosa_p, 11, cd_estabelecimento_p, 'N', nr_seq_execucao_p, nr_seq_oc_benef_w, null, null, null, null);
 
				CALL pls_atualizar_status_ocor_comb(	nr_seq_ocorrencia_p, nr_seq_ocor_combinada_p, nr_seq_motivo_glosa_p, 
								null, null, nr_seq_execucao_p, 
								null, null, null, 
								null, null, r_C02_w.nr_sequencia, 
								nm_usuario_p, cd_estabelecimento_p);
			end if;
			end;
		end loop;
	end if;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_valida_ocor_aut_exec_coop ( nr_seq_ocor_combinada_p bigint, nr_seq_ocorrencia_p bigint, nr_seq_segurado_p bigint, nr_seq_motivo_glosa_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, ie_utiliza_filtro_p text, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

