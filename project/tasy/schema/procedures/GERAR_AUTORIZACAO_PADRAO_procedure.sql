-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_autorizacao_padrao ( nr_sequencia_autor_p bigint, nr_seq_autorizacao_padrao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_material_w		bigint;
qt_item_w		    double precision;
cd_estabelecimento_w	smallint;
cd_convenio_w		integer;
cd_categoria_w		varchar(10);
cd_plano_w		varchar(10);
cd_tipo_acomodacao_w	smallint;
ie_tipo_atendimento_w	smallint;
ie_tipo_convenio_w	smallint;
nr_sequencia_w		bigint;
cd_procedimento_w	bigint;
nr_seq_proc_interno_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_exame_w		bigint;
cd_setor_w		integer;
ds_erro_w		varchar(500);
nr_seq_proc_interno_aux_w	bigint;

c01 CURSOR FOR
	SELECT	cd_material,
            qt_material
	from	orcamento_padrao_material
	where	nr_seq_orcamento_padrao		= nr_seq_autorizacao_padrao_p
	and	ie_situacao			= 'A';
	
C02 CURSOR FOR
	SELECT	cd_procedimento,
            ie_origem_proced,
            qt_procedimento,
            nr_seq_proc_interno,
            nr_seq_exame
	from	orcamento_padrao_proc
	where	nr_seq_orcamento_padrao		= nr_seq_autorizacao_padrao_p
	and	ie_situacao			= 'A';


BEGIN

select	max(cd_estabelecimento),
	max(cd_convenio),
	max(cd_categoria),
	max(cd_plano),
	max(cd_tipo_acomodacao),
	max(ie_tipo_atendimento),
	max(Obter_Tipo_Convenio(cd_convenio))
into STRICT	cd_estabelecimento_w,
	cd_convenio_w,
	cd_categoria_w,
	cd_plano_w,
	cd_tipo_acomodacao_w,
	ie_tipo_atendimento_w,
	ie_tipo_convenio_w
from	orcamento_paciente
where	nr_sequencia_orcamento = nr_seq_autorizacao_padrao_p;

open C01;
loop
fetch C01 into	
	cd_material_w,
	qt_item_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	select	nextval('material_autorizado_seq')
	into STRICT	nr_sequencia_w
	;
	insert into material_autorizado(	nr_seq_autorizacao,
                        nr_sequencia_autor,
						cd_material,
						qt_solicitada,
                        qt_autorizada,
						vl_unitario,
						dt_atualizacao,
						nm_usuario,
						nr_sequencia)
			values (	nr_seq_autorizacao_padrao_p,
                        nr_sequencia_autor_p,
						cd_material_w,
						qt_item_w,
                        0,
						0,
						clock_timestamp(),
						nm_usuario_p,
						nr_sequencia_w);
	end;
end loop;
close C01;

open C02;
loop
fetch C02 into	
	cd_procedimento_w,
	ie_origem_proced_w,
	qt_item_w,
	nr_seq_proc_interno_w,
	nr_seq_exame_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	
	if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') and (coalesce(cd_procedimento_w::text, '') = '')     and (coalesce(nr_seq_exame_w::text, '') = '')     then
	
		SELECT * FROM Obter_Proc_Tab_Interno_Conv(	nr_seq_proc_interno_w, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_w, null, cd_procedimento_w, ie_origem_proced_w, null, clock_timestamp(), cd_tipo_acomodacao_w, null, null, null, null, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
				
		if (coalesce(cd_procedimento_w,0) > 0) and (coalesce(ie_origem_proced_w,0) > 0) then

			select	nextval('procedimento_autorizado_seq')
			into STRICT	nr_sequencia_w
			;
		
			insert	into procedimento_autorizado(	nr_seq_autorizacao,
                                nr_sequencia_autor,
								cd_procedimento,
								ie_origem_proced,
								qt_solicitada,
                                qt_autorizada,
								dt_atualizacao,
								nm_usuario,
								vl_autorizado,
								nr_sequencia,
								nr_seq_proc_interno)
						values (	nr_seq_autorizacao_padrao_p,
                                nr_sequencia_autor_p,
								cd_procedimento_w,
								ie_origem_proced_w,
								qt_item_w,
                                0,
								clock_timestamp(),
								nm_usuario_p,
								0,
								nr_sequencia_w,
								nr_seq_proc_interno_w);
         end if;

    elsif (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') and (coalesce(nr_seq_proc_interno_w::text, '') = '')     and (coalesce(nr_seq_exame_w::text, '') = '')     then		
	
		select	nextval('procedimento_autorizado_seq')
		into STRICT	nr_sequencia_w
		;
	
		insert	into procedimento_autorizado(	nr_seq_autorizacao,
                            nr_sequencia_autor,
							cd_procedimento,
							ie_origem_proced,
							qt_solicitada,
                            qt_autorizada,
							dt_atualizacao,
							nm_usuario,
							vl_autorizado,
							nr_sequencia)
					values (	nr_seq_autorizacao_padrao_p,
                            nr_sequencia_autor_p,
							cd_procedimento_w,
							ie_origem_proced_w,
							qt_item_w,
                            0,
							clock_timestamp(),
							nm_usuario_p,
							0,
							nr_sequencia_w);

    elsif (coalesce(nr_seq_proc_interno_w::text, '') = '') and (coalesce(cd_procedimento_w::text, '') = '') and (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') then
            
            SELECT * FROM OBTER_EXAME_LAB_CONVENIO(	nr_seq_exame_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, cd_estabelecimento_w, ie_tipo_convenio_w, null, null, cd_plano_w, cd_setor_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w, clock_timestamp()) INTO STRICT cd_setor_w, cd_procedimento_w, ie_origem_proced_w, ds_erro_w, nr_seq_proc_interno_aux_w;

        if (coalesce(cd_procedimento_w,0) > 0) and (coalesce(ie_origem_proced_w,0) > 0) then
        
            select	nextval('procedimento_autorizado_seq')
			into STRICT	nr_sequencia_w
			;
		
			insert	into procedimento_autorizado(	nr_seq_autorizacao,
                                nr_sequencia_autor,
								cd_procedimento,
								ie_origem_proced,
								qt_solicitada,
                                qt_autorizada,
								dt_atualizacao,
								nm_usuario,
								vl_autorizado,
								nr_sequencia,
								nr_seq_exame)
						values (	nr_seq_autorizacao_padrao_p,
                                nr_sequencia_autor_p,
								cd_procedimento_w,
								ie_origem_proced_w,
								qt_item_w,
                                0,
								clock_timestamp(),
								nm_usuario_p,
								0,
								nr_sequencia_w,
								nr_seq_exame_w);							
		end if;						
	end if;	
	
	end;
end loop;
close C02;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_autorizacao_padrao ( nr_sequencia_autor_p bigint, nr_seq_autorizacao_padrao_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

