-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_prest_intercambio ( nr_cpf_p pessoa_fisica.nr_cpf%type, cd_cgc_p pessoa_juridica.cd_cgc%type, nm_prestador_p text, cd_cnes_p text, cd_municipio_prest_p sus_municipio.cd_municipio_ibge%type, nm_usuario_p usuario.nm_usuario%type, cd_cbo_tiss_p cbo_saude.cd_cbo%type, cd_cbo_ptu_p cbo_saude.cd_cbo_ptu%type, nr_seq_prest_inter_p INOUT pls_prestador_intercambio.nr_sequencia%type, nr_seq_prestador_p INOUT pls_prestador.nr_sequencia%type) AS $body$
DECLARE



/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Criar prestadores de intercambio para as contas do A500
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X ]  Objetos do dicionario [   ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao: O prestador so devera ser criado se nao existir na tabela PLS_PRESTADOR
e na tabela PLS_PRESTADOR_INTERCaMBIO
-------------------------------------------------------------------------------------------------------------------

Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_pessoa_fisica_w	pessoa_fisica.cd_pessoa_fisica%type;
cd_cgc_w		pessoa_juridica.cd_cgc%type;
nr_seq_prestador_w    	pls_prestador.nr_sequencia%type;
cd_cnes_w		pls_prestador_intercambio.cd_cnes%type := substr(cd_cnes_p,1,7);
cd_municipio_ibge_w	sus_municipio.cd_municipio_ibge%type;
nr_seq_prest_inter_w	pls_prestador_intercambio.nr_sequencia%type;
nr_seq_cbo_saude_w	cbo_saude.nr_sequencia%type;
cd_municipio_ibge_ww	pls_prestador_intercambio.cd_municipio_ibge%type;
cd_cnes_ww		pls_prestador_intercambio.cd_cnes%type;
ie_atualiza_w		varchar(1) := 'N';
ie_prest_interc_event_w	pls_parametros.ie_prest_interc_event%type;


BEGIN

select coalesce(max(IE_PREST_INTERC_EVENT), 'N')
into STRICT	ie_prest_interc_event_w
from	pls_parametros
where 	cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;

select	max(cd_municipio_ibge)
into STRICT	cd_municipio_ibge_w
from	sus_municipio
where 	cd_municipio_ibge = cd_municipio_prest_p;

--com nova versao ptu, tem vindo 7 caracteres, entao precisamos considerar isso na busca pelo cadastro
if ((coalesce(cd_municipio_ibge_w::text, '') = '') and (length(cd_municipio_prest_p) = 7)) then

	--como a maioria dos casos estao cadastrados com 6 caracteres, faco uma busca considerando os 6 primeiros caracteres 

	--do municipio que estao vindo por parametro e depois calculo o dv 
	select	max(cd_municipio_ibge)
	into STRICT	cd_municipio_ibge_w
	from	sus_municipio
	where 	cd_municipio_ibge = substr(cd_municipio_prest_p, 1,6);
	
		-- Se encontrou, calcula o dv para ter certeza que encontrou o correto
		if (cd_municipio_ibge_w IS NOT NULL AND cd_municipio_ibge_w::text <> '') then
			cd_municipio_ibge_w := coalesce(calcula_digito('MODULO10',substr(somente_numero(cd_municipio_ibge_w),1,10)), null);
			
			if (cd_municipio_ibge_w IS NOT NULL AND cd_municipio_ibge_w::text <> '' AND cd_municipio_ibge_w != cd_municipio_prest_p) then
				cd_municipio_ibge_w := null;
			end if;
		end if;
		
		--caso ainda nao encontrou, ai faz uma busca mais "lenta" calculando o dv na restricao de busca 
		if (coalesce(cd_municipio_ibge_w::text, '') = '') then
			select	max(cd_municipio_ibge)
			into STRICT	cd_municipio_ibge_w
			from	sus_municipio
			where 	cd_municipio_ibge || calcula_digito('MODULO10',substr( somente_numero(cd_municipio_ibge),1,10)) = cd_municipio_prest_p;
		end if;
	
end if;

--Verificar se existe pessoa fisica com o CPF informado
if (nr_cpf_p IS NOT NULL AND nr_cpf_p::text <> '') then
	select	max(cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	pessoa_fisica
	where	nr_cpf = nr_cpf_p;	
--Verificar se existe pessoa juridica com o CGC informado
elsif (cd_cgc_p IS NOT NULL AND cd_cgc_p::text <> '') then
	select	max(cd_cgc)
	into STRICT	cd_cgc_w
	from	pessoa_juridica
	where	cd_cgc = cd_cgc_p;
end if;

nr_seq_prestador_w	:= null;

--Verificar se ja existe o prestador na PLS_PRESTADOR

/* Retirado pois o prestador das guias de intercambio deve ser um prestador de intercambio
if	(cd_pessoa_fisica_w is not null or cd_cgc_w is not null) then
	select 	max(nr_sequencia)
	into	nr_seq_prestador_w
	from	pls_prestador
	where 	(cd_cgc = cd_cgc_w or cd_pessoa_fisica = cd_pessoa_fisica_w)
	and	IE_TIPO_RELACAO	<> 'F'; --aaschlote 20/11/2014 - Fiz esse tratamento, pois fornecedores podem ser criados o prestador de intercambio
end if;*/
select 	max(nr_sequencia)
into STRICT	nr_seq_prest_inter_w
from	pls_prestador_intercambio
where (cd_cgc = cd_cgc_w or cd_pessoa_fisica = cd_pessoa_fisica_w);

if (cd_cbo_ptu_p IS NOT NULL AND cd_cbo_ptu_p::text <> '') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_cbo_saude_w
	from	cbo_saude
	where	cd_cbo_ptu = cd_cbo_ptu_p;
elsif (cd_cbo_tiss_p IS NOT NULL AND cd_cbo_tiss_p::text <> '') then
	select	max(nr_sequencia)
	into STRICT	nr_seq_cbo_saude_w
	from	cbo_saude
	where	cd_cbo = cd_cbo_tiss_p;
end if;

if (coalesce(nr_seq_prest_inter_w::text, '') = '') then
	select 	max(nr_sequencia)
	into STRICT	nr_seq_prest_inter_w
	from	pls_prestador_intercambio
	where (cd_cgc_intercambio = cd_cgc_p or nr_cpf = nr_cpf_p);
end if;

-- Caso nao tenha CPF/CNPJ, verificar por CNES e nome prestador
if (coalesce(nr_seq_prest_inter_w::text, '') = '') and (coalesce(nr_cpf_p::text, '') = '') and (coalesce(cd_cgc_p::text, '') = '') and (cd_cnes_w IS NOT NULL AND cd_cnes_w::text <> '') then

	select 	min(pi.nr_sequencia)
	into STRICT	nr_seq_prest_inter_w
	from	pls_prestador_intercambio pi
	where 	pi.cd_cnes		= cd_cnes_w
	and	trim(both upper(sem_acento(pi.nm_prestador)))	= trim(both upper(sem_acento(nm_prestador_p)));

end if;

if (coalesce(nr_seq_prest_inter_w::text, '') = '') then
	select	nextval('pls_prestador_intercambio_seq')
	into STRICT	nr_seq_prest_inter_w
	;

	insert into pls_prestador_intercambio(	nr_sequencia, dt_atualizacao, nm_usuario,dt_atualizacao_nrec, nm_usuario_nrec,
			nr_cpf,cd_cgc,cd_municipio_ibge, cd_cnes,cd_pessoa_fisica,
			cd_cgc_intercambio,nm_prestador, cd_cbo_tiss, cd_cbo_ptu, nr_seq_cbo_saude,
			ie_prest_eventual)
	values (	nr_seq_prest_inter_w, clock_timestamp(), nm_usuario_p,clock_timestamp(),nm_usuario_p,
			nr_cpf_p,cd_cgc_w,cd_municipio_ibge_w, cd_cnes_w,cd_pessoa_fisica_w,
			cd_cgc_p,nm_prestador_p, cd_cbo_tiss_p, cd_cbo_ptu_p, nr_seq_cbo_saude_w,
			ie_prest_interc_event_w);
else
	select	cd_municipio_ibge,
		cd_cnes
	into STRICT	cd_municipio_ibge_ww,
		cd_cnes_ww
	from	pls_prestador_intercambio
	where	nr_sequencia = nr_seq_prest_inter_w;
	
	if (coalesce(cd_municipio_ibge_ww::text, '') = '') then
		cd_municipio_ibge_ww := cd_municipio_ibge_w;
		ie_atualiza_w := 'S';
	end if;
	
	if (coalesce(cd_cnes_ww::text, '') = '') then
		cd_cnes_ww := cd_cnes_w;
		ie_atualiza_w := 'S';
	end if;
	
	if (ie_atualiza_w = 'S') then
		update	pls_prestador_intercambio
		set	cd_municipio_ibge = cd_municipio_ibge_ww,
			cd_cnes = cd_cnes_ww,
			dt_atualizacao = clock_timestamp()
		where	nr_sequencia = nr_seq_prest_inter_w;
	end if;
end if;

nr_seq_prest_inter_p 	:= nr_seq_prest_inter_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_prest_intercambio ( nr_cpf_p pessoa_fisica.nr_cpf%type, cd_cgc_p pessoa_juridica.cd_cgc%type, nm_prestador_p text, cd_cnes_p text, cd_municipio_prest_p sus_municipio.cd_municipio_ibge%type, nm_usuario_p usuario.nm_usuario%type, cd_cbo_tiss_p cbo_saude.cd_cbo%type, cd_cbo_ptu_p cbo_saude.cd_cbo_ptu%type, nr_seq_prest_inter_p INOUT pls_prestador_intercambio.nr_sequencia%type, nr_seq_prestador_p INOUT pls_prestador.nr_sequencia%type) FROM PUBLIC;

