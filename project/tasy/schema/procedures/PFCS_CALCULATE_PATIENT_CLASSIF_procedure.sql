-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pfcs_calculate_patient_classif ( nr_seq_indicator_p bigint, cd_estabelecimento_p text, nm_usuario_p text) AS $body$
DECLARE


--Tasy
	c01_tasy CURSOR FOR
	SELECT	a.nr_sequencia cd_classification,
		a.ds_classificacao ds_classification
	from	classif_pessoa a
	where	coalesce(a.ie_exibe_pfcs, 'N') = 'S'
	and	a.ie_situacao = 'A';

	c02_tasy CURSOR(nr_seq_classif_p bigint) FOR
	SELECT	a.cd_pessoa_fisica id_patient,
		coalesce(get_formatted_person_name(a.cd_pessoa_fisica, 'list'), obter_nome_pf(a.cd_pessoa_fisica)) nm_patient,
		obter_sexo_pf(a.cd_pessoa_fisica, 'D') ds_gender,
		pf.dt_nascimento dt_birthdate,
        obter_dados_pf(a.cd_pessoa_fisica, 'I') qt_idade_paciente,
		a.dt_entrada dt_entrance,
		a.nr_atendimento nr_encounter
	from	atendimento_paciente a,
		pessoa_classif b,
		pessoa_fisica pf
	where	a.ie_tipo_atendimento = 3
	and	coalesce(a.dt_cancelamento::text, '') = ''
	and	a.cd_pessoa_fisica = b.cd_pessoa_fisica
	and	clock_timestamp() between b.dt_inicio_vigencia and coalesce(b.dt_final_vigencia, clock_timestamp())
	and	b.nr_seq_classif = nr_seq_classif_p
	and	get_if_encounter_still_pa(a.nr_atendimento) = 'S' 
	and coalesce(a.dt_alta::text, '') = ''
	and	a.cd_estabelecimento = (cd_estabelecimento_p)::numeric 
	and	a.cd_pessoa_fisica = pf.cd_pessoa_fisica;



c01_fhir CURSOR FOR
SELECT distinct upper(cd_courtesy) cd_classification,
    max(ds_classification) ds_classification
from pfcs_encounter
where (cd_courtesy IS NOT NULL AND cd_courtesy::text <> '')
    and (ds_classification IS NOT NULL AND ds_classification::text <> '')
group by upper(cd_courtesy);

--Integration Tables
c02_fhir CURSOR(cd_classification_p text) FOR
SELECT
    pat.patient_id id_patient,
    pfcs_get_human_name(pat.nr_sequencia) nm_patient,
    pfcs_get_patient_gender(pat.gender) ds_gender,    
    pat.BIRTHDATE dt_birthdate,
    trunc(months_between(coalesce(pat.deceased_date, clock_timestamp()), pat.birthdate)/12) qt_idade_paciente,
    enc.period_start dt_entrance, 
   enc.id_encounter nr_encounter
FROM
pfcs_encounter enc,
pfcs_patient pat,
setor_atendimento sec,
unidade_atendimento uni,
pfcs_service_request ser
where  enc.nr_seq_patient = pat.nr_sequencia
and ser.nr_seq_encounter = enc.nr_sequencia
and  ser.nr_seq_patient = pat.nr_sequencia
and uni.nr_seq_location = coalesce(enc.nr_seq_location, pfcs_get_pat_location(pat.nr_sequencia, enc.nr_sequencia))
and uni.cd_setor_atendimento	= sec.cd_setor_atendimento
and	uni.ie_situacao		= 'A'
and	sec.ie_situacao		= 'A' 
and (enc.period_start IS NOT NULL AND enc.period_start::text <> '') 
and coalesce(enc.period_end::text, '') = ''
and upper(enc.cd_courtesy) = cd_classification_p
and	sec.cd_estabelecimento = (cd_estabelecimento_p)::numeric 
and sec.cd_classif_setor	='1'
and clock_timestamp() BETWEEN enc.period_start and coalesce( enc.period_end,clock_timestamp());

	qt_total_w					bigint := 0;
	pfcs_panel_detail_seq_w				pfcs_panel_detail.nr_sequencia%type;
	pfcs_panel_seq_w				pfcs_panel.nr_sequencia%type;
	nr_seq_operational_level_w			pfcs_operational_level.nr_sequencia%type;
    pfcs_flag_settings_w            	pfcs_general_rule.ie_table_origin%type;


	
BEGIN
		nr_seq_operational_level_w := pfcs_get_structure_level(
				cd_establishment_p => cd_estabelecimento_p,
				ie_level_p => 'O',
				ie_info_p => 'C');

                select ie_table_origin
	into STRICT pfcs_flag_settings_w
	from pfcs_general_rule;

if (pfcs_flag_settings_w = 0 or pfcs_flag_settings_w = 2) then
		for c01_w in c01_tasy loop
			begin

				for c02_w in c02_tasy(c01_w.cd_classification) loop
					begin

						qt_total_w := qt_total_w + 1;

						select nextval('pfcs_panel_detail_seq')
						into STRICT pfcs_panel_detail_seq_w
						;

						insert into pfcs_panel_detail(
							nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nm_usuario_nrec,
							dt_atualizacao_nrec,
							ie_situation,
							nr_seq_indicator,
							nr_seq_operational_level)
						values (
							pfcs_panel_detail_seq_w,
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							'T',
							nr_seq_indicator_p,
							nr_seq_operational_level_w);

						insert into pfcs_detail_patient(
							nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nm_usuario_nrec,
							dt_atualizacao_nrec,
							nr_seq_detail,
							nr_encounter,
							dt_entrance,
							id_patient,
							nm_patient,
							ds_gender,
							cd_classification,
							ds_classification,
							dt_birthdate,
                            ds_age_range)
						values (
							nextval('pfcs_detail_patient_seq'),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							pfcs_panel_detail_seq_w,
							c02_w.nr_encounter,
							c02_w.dt_entrance,
							c02_w.id_patient,
							c02_w.nm_patient,
							c02_w.ds_gender,
							c01_w.cd_classification,
							c01_w.ds_classification,
							c02_w.dt_birthdate,
                            c02_w.qt_idade_paciente);

					end;
				end loop;

				commit;

				 := pfcs_pck.pfcs_generate_results(
						vl_indicator_p => qt_total_w, ds_reference_value_p => c01_w.ds_classification, cd_reference_value_p => c01_w.cd_classification, nr_seq_indicator_p => nr_seq_indicator_p, nr_seq_operational_level_p => nr_seq_operational_level_w, nm_usuario_p => nm_usuario_p, nr_seq_panel_p => pfcs_panel_seq_w);

				CALL pfcs_pck.pfcs_update_detail(
						nr_seq_indicator_p => nr_seq_indicator_p,
						nr_seq_panel_p => pfcs_panel_seq_w,
						nr_seq_operational_level_p => nr_seq_operational_level_w,
						nm_usuario_p => nm_usuario_p);

				qt_total_w := 0;

			end;
		end loop;
end if;
--End of tasy loop
--Integration Cursor start
qt_total_w := 0;
if (pfcs_flag_settings_w = 1 or pfcs_flag_settings_w = 2) then
	for c01_wfhir in c01_fhir loop
			begin

				for c02_wfhir in c02_fhir(c01_wfhir.cd_classification) loop
					begin

						qt_total_w := qt_total_w + 1;

						select nextval('pfcs_panel_detail_seq')
						into STRICT pfcs_panel_detail_seq_w
						;

						insert into pfcs_panel_detail(
							nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nm_usuario_nrec,
							dt_atualizacao_nrec,
							ie_situation,
							nr_seq_indicator,
							nr_seq_operational_level)
						values (
							pfcs_panel_detail_seq_w,
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							'T',
							nr_seq_indicator_p,
							nr_seq_operational_level_w);

						insert into pfcs_detail_patient(
							nr_sequencia,
							nm_usuario,
							dt_atualizacao,
							nm_usuario_nrec,
							dt_atualizacao_nrec,
							nr_seq_detail,
							nr_encounter_varchar,
							dt_entrance,
							id_patient,
							nm_patient,
							ds_gender,
							cd_classification,
							ds_classification,
							dt_birthdate,
                            ds_age_range
                            )
						values (
							nextval('pfcs_detail_patient_seq'),
							nm_usuario_p,
							clock_timestamp(),
							nm_usuario_p,
							clock_timestamp(),
							pfcs_panel_detail_seq_w,
							c02_wfhir.nr_encounter,
							c02_wfhir.dt_entrance,
							c02_wfhir.id_patient,
							c02_wfhir.nm_patient,
							c02_wfhir.ds_gender,
							c01_wfhir.cd_classification,
							c01_wfhir.ds_classification,
							c02_wfhir.dt_birthdate,
                            c02_wfhir.qt_idade_paciente);

					end;
				end loop;

				commit;

				 := pfcs_pck.pfcs_generate_results(
						vl_indicator_p => qt_total_w, ds_reference_value_p => c01_wfhir.ds_classification, cd_reference_value_p => c01_wfhir.cd_classification, nr_seq_indicator_p => nr_seq_indicator_p, nr_seq_operational_level_p => nr_seq_operational_level_w, nm_usuario_p => nm_usuario_p, nr_seq_panel_p => pfcs_panel_seq_w);

				CALL pfcs_pck.pfcs_update_detail(
						nr_seq_indicator_p => nr_seq_indicator_p,
						nr_seq_panel_p => pfcs_panel_seq_w,
						nr_seq_operational_level_p => nr_seq_operational_level_w,
						nm_usuario_p => nm_usuario_p);

                        qt_total_w := 0;
            end;
		end loop;
end if;


		CALL pfcs_pck.pfcs_activate_records(
				nr_seq_indicator_p => nr_seq_indicator_p,
				nr_seq_operational_level_p => nr_seq_operational_level_w,
				nm_usuario_p => nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_calculate_patient_classif ( nr_seq_indicator_p bigint, cd_estabelecimento_p text, nm_usuario_p text) FROM PUBLIC;

