-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_proc_princ_interno ( nr_atendimento_p bigint, ie_tipo_atendimento_p bigint, cd_proc_princ_p INOUT bigint, ie_origem_proced_p INOUT bigint, nr_interno_conta_p bigint) AS $body$
DECLARE


cd_proc_principal_w		bigint;
ie_origem_proced_w		bigint;
vl_procedimento_w		double precision;
vl_ponto_w			double precision;
vl_ponto_medico_w		double precision;
vl_medico_w			double precision;
cd_regra_w			varchar(15);
cd_regra_atual_w		varchar(1);
i 				integer;
qt_reg_w			bigint;
ie_classif_setor_w		smallint	:= 0;
ie_classif_setor_ww		smallint	:= 0;
cd_area_w			bigint	:= 4;
cd_area_cbhpm_w			bigint	:= 13;

cd_estabelecimento_w		bigint;

C00 CURSOR FOR
SELECT	cd_regra
from	regra_int_proc_princ
where	coalesce(ie_tipo_atendimento,ie_tipo_atendimento_p)
				= ie_tipo_atendimento_p
and	cd_estabelecimento	= cd_estabelecimento_w
and	qt_reg_w		= 0
order by
	coalesce(ie_tipo_atendimento,0);

/* Seleção pela area do procedimento  */

C01 CURSOR FOR
SELECT	/*+ index(a) */	a.cd_procedimento,
	a.ie_origem_proced,
	dividir(sum(coalesce(x.vl_medico,0)), sum(qt_procedimento)),
	dividir(sum(coalesce(a.vl_medico,0)), sum(qt_procedimento)),
	dividir(sum(coalesce(x.vl_procedimento,0)), sum(qt_procedimento)),
	dividir(sum(coalesce(a.vl_procedimento,0)), sum(qt_procedimento))
FROM conta_paciente f, especialidade_proc d, grupo_proc c, procedimento b, procedimento_paciente a
LEFT OUTER JOIN proc_paciente_valor x ON (a.nr_sequencia = x.nr_seq_procedimento AND 2 = x.ie_tipo_valor)
LEFT OUTER JOIN funcao_medico w ON (a.ie_funcao_medico = w.cd_funcao)
WHERE a.cd_procedimento		= b.cd_procedimento and a.ie_origem_proced		= b.ie_origem_proced and f.nr_interno_conta		= a.nr_interno_conta and f.cd_estabelecimento		= cd_estabelecimento_w and b.cd_grupo_proc			= c.cd_grupo_proc and c.cd_especialidade		= d.cd_especialidade and a.nr_atendimento		= nr_atendimento_p and b.ie_classificacao		= '1'   and ((d.cd_area_procedimento	= cd_area_w) or (d.cd_area_procedimento	= cd_area_cbhpm_w)) and (a.cd_medico_executor IS NOT NULL AND a.cd_medico_executor::text <> '')  and coalesce(w.ie_medico,'N')		= 'S' and coalesce(a.cd_motivo_exc_conta::text, '') = ''
group	by a.cd_procedimento,a.ie_origem_proced
order	by 3 desc, 4 desc, 5 desc, 6 desc;

/* Seleção por classificacao de setor  */

C03 CURSOR FOR
SELECT	/*+ index(a propaci_i1) */	a.cd_procedimento,
	a.ie_origem_proced,
	dividir(sum(coalesce(x.vl_medico,0)), sum(qt_procedimento)),
	dividir(sum(coalesce(a.vl_medico,0)), sum(qt_procedimento)),
	dividir(sum(coalesce(x.vl_procedimento,0)), sum(qt_procedimento)),
	dividir(sum(coalesce(a.vl_procedimento,0)), sum(qt_procedimento))
FROM setor_atendimento s, conta_paciente f, procedimento b, procedimento_paciente a
LEFT OUTER JOIN proc_paciente_valor x ON (a.nr_sequencia = x.nr_seq_procedimento AND 2 = x.ie_tipo_valor)
LEFT OUTER JOIN funcao_medico w ON (a.ie_funcao_medico = w.cd_funcao)
WHERE a.cd_procedimento		= b.cd_procedimento and a.ie_origem_proced		= b.ie_origem_proced and a.nr_atendimento		= nr_atendimento_p and f.nr_interno_conta		= a.nr_interno_conta and f.cd_estabelecimento		= cd_estabelecimento_w   and s.cd_classif_setor		in (ie_classif_setor_w, ie_classif_setor_ww) and b.ie_classificacao		= '1' and (a.cd_medico_executor IS NOT NULL AND a.cd_medico_executor::text <> '') and a.cd_setor_atendimento	= s.cd_setor_atendimento  and coalesce(w.ie_medico,'N')		= 'S' and coalesce(a.cd_motivo_exc_conta::text, '') = ''
group	by a.cd_procedimento,a.ie_origem_proced
order	by 3 desc, 4 desc, 5 desc, 6 desc;

C09 CURSOR FOR
SELECT	/*+ index_ffs(a propaci_i1) */	a.cd_procedimento,
	a.ie_origem_proced,
	dividir(sum(a.vl_procedimento), sum(qt_procedimento))
from	procedimento b,
	procedimento_paciente a,
	conta_paciente f
where	a.cd_procedimento	= b.cd_procedimento
  and	a.ie_origem_proced	= b.ie_origem_proced
  and 	f.nr_interno_conta	= a.nr_interno_conta
  and   f.cd_estabelecimento	= cd_estabelecimento_w
  and	a.nr_atendimento	= nr_atendimento_p
  and	b.ie_classificacao	= '1'
  and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
group	by a.cd_procedimento,a.ie_origem_proced
order	by 2 desc;


/*  	O que significa cada letra
	C - Procedimento médico de Maior ponto da clinica cirurgica
	M - Procedimento médico de Maior ponto da clinica médica
	U - Procedimento médico de Maior Valor Consulta
	B - Procedimento médico de Maior Ponto do bloco cirurgico
	S - Procedimento médico de Maior ponto dos setores de serviço
	X - Procedimento médico de Maior Ponto do bloco cirurgico ou Setor Serviço

Médico	:= com médico executor informado
*/
BEGIN

cd_proc_principal_w		:= 0;
qt_reg_w			:= 0;
select	coalesce(max(cd_procedimento),0),
	max(ie_origem_proced),
	count(*)
into STRICT	cd_proc_principal_w,
	ie_origem_proced_w,
	qt_reg_w
from	atend_pac_proc_princ
where	nr_atendimento	= nr_atendimento_p;


if (coalesce(nr_interno_conta_p,0) = 0) then

	select	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from	atendimento_paciente
	where	nr_atendimento		= nr_atendimento_p;

else

	select	max(cd_estabelecimento)
	into STRICT	cd_estabelecimento_w
	from 	conta_paciente
	where 	nr_interno_conta = nr_interno_conta_p;

end if;



OPEN C00;
LOOP
FETCH C00 into
	cd_regra_w;
EXIT WHEN NOT FOUND; /* apply on c00 */
	cd_regra_w	:= cd_regra_w;
END LOOP;
CLOSE C00;
if (coalesce(cd_regra_w::text, '') = '') then
	cd_regra_w	:= '###';
end if;

select	/*+ index(a) */	count(nr_sequencia)
into STRICT	qt_reg_w
from	procedimento_paciente a,
	conta_paciente c
where	a.nr_atendimento   = nr_atendimento_p
and 	a.nr_interno_conta = c.nr_interno_conta
and 	c.cd_estabelecimento = cd_estabelecimento_w
and	qt_reg_w		= 0;

if (qt_reg_w	= 0) then
	cd_regra_w	:= '###';
elsif (qt_reg_w	= 1) then
	select	/*+ index(a) */		a.cd_procedimento,
		a.ie_origem_proced
	into STRICT	cd_proc_principal_w,
		ie_origem_proced_w
	from	procedimento_paciente 	a,
		conta_paciente 		b
	where	a.nr_atendimento	= nr_atendimento_p
	and 	a.nr_interno_conta	= b.nr_interno_conta
	and 	b.cd_estabelecimento	= cd_estabelecimento_w;
end if;

FOR i IN 1.. length(cd_regra_w) LOOP
	BEGIN
	ie_classif_setor_w	:= 0;
	ie_classif_setor_ww	:= 0;
	cd_regra_atual_w	:= substr(cd_regra_w, i, 1);
/*	Bloco cirurgico */

	if (cd_proc_principal_w	= 0) and (cd_regra_atual_w	= 'B') then
		begin
		ie_classif_setor_w	:= 2;

		OPEN C03;
		LOOP
		FETCH C03 into
			cd_proc_principal_w,
			ie_origem_proced_w,
			vl_ponto_medico_w,
			vl_ponto_w,
			vl_medico_w,
			vl_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			if (cd_proc_principal_w	< 80000000) then
				exit;
			end if;
			end;
		END LOOP;
		CLOSE C03;
		end;
	end if;

/*	Bloco cirurgico  ou Setores de serviço */

	if (cd_proc_principal_w	= 0) and (cd_regra_atual_w	= 'X') then
		begin
		ie_classif_setor_w	:= 2;
		ie_classif_setor_ww	:= 5;
		OPEN C03;
		LOOP
		FETCH C03 into
			cd_proc_principal_w,
			ie_origem_proced_w,
			vl_ponto_medico_w,
			vl_ponto_w,
			vl_medico_w,
			vl_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			exit;
			end;
		END LOOP;
		CLOSE C03;
		end;
	end if;


/*	Setores de serviço */

	if (cd_proc_principal_w	= 0) and (cd_regra_atual_w	= 'S') then
		begin
		ie_classif_setor_w	:= 5;
		OPEN C03;
		LOOP
		FETCH C03 into
			cd_proc_principal_w,
			ie_origem_proced_w,
			vl_ponto_medico_w,
			vl_ponto_w,
			vl_medico_w,
			vl_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			exit;
			end;
		END LOOP;
		CLOSE C03;
		end;
	end if;

/*	Clinica cirurgica */

	if (cd_proc_principal_w	= 0) and (cd_regra_atual_w	= 'C') then
		begin
		cd_area_w		:= 4;
		cd_area_cbhpm_w		:= 13;

		OPEN C01;
		LOOP
		FETCH C01 into
			cd_proc_principal_w,
			ie_origem_proced_w,
			vl_ponto_medico_w,
			vl_ponto_w,
			vl_medico_w,
			vl_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			exit;
			end;
		END LOOP;
		CLOSE C01;
		end;
	end if;

/*	Clinica médica */

	if (cd_proc_principal_w	= 0) and (cd_regra_atual_w	= 'M') then
		begin
		cd_area_w		:= 1;
		cd_area_cbhpm_w		:= 12;
		OPEN C01;
		LOOP
		FETCH C01 into
			cd_proc_principal_w,
			ie_origem_proced_w,
			vl_ponto_medico_w,
			vl_ponto_w,
			vl_medico_w,
			vl_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			exit;
			end;
		END LOOP;
		CLOSE C01;
		end;
	end if;

/*	Consultas */

	if (cd_proc_principal_w	= 0) and (cd_regra_atual_w	= 'U') then
		begin
		cd_area_w		:= 1;
		cd_area_cbhpm_w		:= 12;
		OPEN C01;
		LOOP
		FETCH C01 into
			cd_proc_principal_w,
			ie_origem_proced_w,
			vl_ponto_medico_w,
			vl_ponto_w,
			vl_medico_w,
			vl_procedimento_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			exit;
			end;
		END LOOP;
		CLOSE C01;
		end;
	end if;
	END;
END LOOP;

if (cd_proc_principal_w	= 0)  then
	begin
	OPEN C09;
	LOOP
	FETCH C09 into
		cd_proc_principal_w,
		ie_origem_proced_w,
		vl_procedimento_w;
	EXIT WHEN NOT FOUND; /* apply on c09 */
		begin
		exit;
		end;
	END LOOP;
	CLOSE C09;
	end;
end if;

cd_proc_princ_p	:= cd_proc_principal_w;
ie_origem_proced_p	:= ie_origem_proced_w;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_proc_princ_interno ( nr_atendimento_p bigint, ie_tipo_atendimento_p bigint, cd_proc_princ_p INOUT bigint, ie_origem_proced_p INOUT bigint, nr_interno_conta_p bigint) FROM PUBLIC;

