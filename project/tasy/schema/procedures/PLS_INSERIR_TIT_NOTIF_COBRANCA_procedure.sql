-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_inserir_tit_notif_cobranca ( nr_seq_lote_p bigint, nr_seq_grupo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Inserir os titulos do lote de notificação em cobrança 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ X ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
------------------------------------------------------------------------------------------------------------------- 
Referências: 
	OPS - Controle de notificaçoes de atraso 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ie_incluir_tit_cobranca_w	varchar(1);
nr_seq_cobranca_w		cobranca.nr_sequencia%type;
qt_titulo_cobranca_w		integer;
qt_cobranca_lote_w		integer;
tb_nr_titulo_w 			pls_util_cta_pck.t_number_table;
tb_nr_seq_notific_item_w 	pls_util_cta_pck.t_number_table;
tb_nr_titulo_cobranca_w 	pls_util_cta_pck.t_number_table;
tb_nr_seq_notific_pagador_w	pls_util_cta_pck.t_number_table;
tb_cd_pessoa_fisica_w		pls_util_cta_pck.t_varchar2_table_10;
tb_cd_cgc_w			pls_util_cta_pck.t_varchar2_table_15;
cd_pessoa_fisica_ant_w		pls_notificacao_pagador.cd_pessoa_fisica%type;
nr_seq_regra_rat_cobr_w		pls_notificacao_pagador.nr_seq_regra_rat_cobr%type;
nr_seq_notific_pag_ant_w	pls_notificacao_pagador.nr_sequencia%type;
nr_seq_cobrador_w		pls_notificacao_pagador.nr_seq_cobrador%type;
nr_seq_tipo_notificacao_w	pls_notif_tipo_lote.nr_sequencia%type;
ds_historico_w			pls_regra_hist_notif_cobr.ds_historico%type;
nr_sequencia_w			registro_cobranca.nr_sequencia%type;
nr_seq_tipo_historico_w		pls_regra_hist_notif_cobr.nr_seq_tipo_historico%type;
cd_cgc_ant_w			pls_notificacao_pagador.cd_cgc%type;
nr_seq_notific_pagador_w	pls_notificacao_item.nr_seq_notific_pagador%type;
nr_seq_pessoa_cobrador_w	cobrador.nr_sequencia%type;
cd_pessoa_fisica_w		usuario.cd_pessoa_fisica%type;
qt_registro_cobr_item_w		bigint;

C01 CURSOR(	nr_seq_lote_pc	pls_notificacao_lote.nr_sequencia%type) FOR 
	SELECT	c.nr_titulo, 
		c.nr_sequencia nr_seq_notific_item 
	FROM pls_notificacao_pagador b, pls_notificacao_lote a, pls_notificacao_item c
LEFT OUTER JOIN titulo_receber_notif d ON (c.nr_titulo = d.nr_titulo)
WHERE b.nr_sequencia		= c.nr_seq_notific_pagador and a.nr_sequencia		= b.nr_seq_lote  and (d.ie_permite_inclusao 	= 'S' or coalesce(d.nr_titulo::text, '') = '') and a.nr_sequencia		= nr_seq_lote_pc;

C02 CURSOR(	nr_seq_lote_pc	pls_notificacao_lote.nr_sequencia%type) FOR 
	SELECT	a.nr_sequencia, 
		a.cd_pessoa_fisica, 
		a.cd_cgc 
	from	pls_notificacao_pagador	a 
	where	a.nr_seq_lote	= nr_seq_lote_pc 
	order by 
		a.cd_pessoa_fisica, 
		a.cd_cgc; -- Order by necessário para o processo de vínculo de cobrador, para os casos em que existem mais de um registro para o mesmo pagador. 
C03 CURSOR(	nr_seq_lote_pc	pls_notificacao_lote.nr_sequencia%type) FOR 
	SELECT	a.nr_sequencia, 
		a.cd_pessoa_fisica, 
		a.cd_cgc 
	from	pls_notificacao_pagador	a 
	where	a.nr_seq_lote	= nr_seq_lote_pc;
	
C04 CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	cobranca a 
	where	exists (SELECT	1 
			from	pls_notificacao_item x 
			where	x.nr_sequencia 			= a.nr_seq_notific_item 
			and	x.nr_seq_notific_pagador 	= nr_seq_notific_pagador_w) 
	and	a.ie_status	<> 'C';

C05 CURSOR FOR 
	SELECT	a.nr_sequencia nr_seq_cobranca, 
		(SELECT	max(x.nr_sequencia) 
		from	registro_cobranca x 
		where	x.nr_seq_lote_notif = nr_seq_lote_p 
		and (x.cd_pessoa_fisica = c.cd_pessoa_fisica or x.cd_cgc = c.cd_cgc)) nr_seq_reg_cobranca 
	from	cobranca a, 
		pls_notificacao_item	b, 
		pls_notificacao_pagador	c 
	where	b.nr_sequencia	= a.nr_seq_notific_item 
	and	c.nr_sequencia	= b.nr_seq_notific_pagador 
	and	c.nr_seq_lote	= nr_seq_lote_p;

type 		fetch_array is table of C01%rowtype index by integer;
s_array 	fetch_array;

BEGIN 
 
ds_historico_w		:= null;
nr_seq_tipo_historico_w := null;
 
select	max(nr_seq_tipo_notificacao) 
into STRICT	nr_seq_tipo_notificacao_w 
from 	pls_notificacao_lote 
where 	nr_sequencia = nr_seq_lote_p;
 
if (nr_seq_tipo_notificacao_w IS NOT NULL AND nr_seq_tipo_notificacao_w::text <> '') then 
	select	max(ds_historico), 
		max(nr_seq_tipo_historico) 
	into STRICT	ds_historico_w, 
		nr_seq_tipo_historico_w 
	from 	pls_regra_hist_notif_cobr 
	where	ie_acao = 1 
	and	ie_situacao = 'A' 
	and	nr_seq_tipo_lote = nr_seq_tipo_notificacao_w;
end if;
 
if	((coalesce(ds_historico_w::text, '') = '') and (coalesce(nr_seq_tipo_historico_w::text, '') = '')) then 
	select	max(ds_historico), 
		max(nr_seq_tipo_historico) 
	into STRICT	ds_historico_w, 
		nr_seq_tipo_historico_w 
	from 	pls_regra_hist_notif_cobr 
	where	ie_acao = 1 
	and	ie_situacao = 'A' 
	and	coalesce(nr_seq_tipo_lote::text, '') = '';
end if;
 
open C01(nr_seq_lote_p);
loop 
	s_array.delete;
fetch C01 bulk collect into s_array limit 1000;
exit when s_array.count = 0;
	for i in s_array.first..s_array.last loop 
		select	count(1) 
		into STRICT	qt_titulo_cobranca_w 
		from	cobranca x 
		where 	x.nr_titulo = s_array[i].nr_titulo 
		and 	x.ie_status <> 'C';
		 
		-- Verifica se já existe cobrança para o título. Se não possuir coloca na lista para geração de cobrança. 
		if (qt_titulo_cobranca_w = 0) then 
			tb_nr_titulo_cobranca_w(tb_nr_titulo_cobranca_w.count + 1) := s_array[i].nr_titulo;
		end if;
		 
		tb_nr_titulo_w(tb_nr_titulo_w.count + 1) := s_array[i].nr_titulo;
		tb_nr_seq_notific_item_w(tb_nr_seq_notific_item_w.count + 1) := s_array[i].nr_seq_notific_item;
	end loop;
end loop;
 
-- Gera cobrança para os títulos que ainda não possuem. 
forall i in tb_nr_titulo_cobranca_w.first..tb_nr_titulo_cobranca_w.last 
	insert	into cobranca(nr_sequencia, 
		dt_atualizacao, 
		nm_usuario, 
		dt_atualizacao_nrec, 
		nm_usuario_nrec, 
		cd_estabelecimento, 
		nr_titulo, 
		ie_status, 
		vl_original, 
		vl_acobrar, 
		dt_inclusao, 
		dt_previsao_cobranca, 
		nr_seq_cobrador, 
		cd_tipo_portador, 
		cd_portador) 
	SELECT	nextval('cobranca_seq'), 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		cd_estabelecimento_p, 
		nr_titulo, 
		'P', 
		vl_titulo, 
		vl_saldo_titulo, 
		trunc(clock_timestamp(),'dd'), 
		trunc(clock_timestamp(),'dd'), 
		(SELECT	max(x.nr_sequencia) 
		from	usuario			y, 
			cobrador		x 
		where	y.nm_usuario		= nm_usuario_p 
		and	x.cd_pessoa_fisica	= y.cd_pessoa_fisica), 
		cd_tipo_portador, 
		cd_portador 
	from	titulo_receber a 
	where	a.nr_titulo = tb_nr_titulo_cobranca_w(i);
 
forall i in tb_nr_titulo_w.first..tb_nr_titulo_w.last 
	update	cobranca 
	set	nr_seq_notific_item	= tb_nr_seq_notific_item_w(i) 
	where	nr_titulo		= tb_nr_titulo_w(i);
 
tb_nr_titulo_cobranca_w.delete;
tb_nr_seq_notific_item_w.delete;
tb_nr_titulo_w.delete;
	 
open C02(nr_seq_lote_p);
loop 
	tb_nr_seq_notific_pagador_w.delete;
	tb_cd_pessoa_fisica_w.delete;
	tb_cd_cgc_w.delete;
fetch C02 bulk collect into tb_nr_seq_notific_pagador_w, tb_cd_pessoa_fisica_w, tb_cd_cgc_w limit 1000;
exit when tb_nr_seq_notific_pagador_w.count = 0;
 
	for i in tb_nr_seq_notific_pagador_w.first..tb_nr_seq_notific_pagador_w.last loop 
	 
		-- Se for o mesmo pagador víncula o mesmo cobrador e regra do pagador anterior. 
		if	((tb_cd_pessoa_fisica_w(i) = cd_pessoa_fisica_ant_w and (tb_cd_pessoa_fisica_w(i) IS NOT NULL AND (tb_cd_pessoa_fisica_w(i))::text <> '')) or (tb_cd_cgc_w(i) = cd_cgc_ant_w and (tb_cd_cgc_w(i) IS NOT NULL AND (tb_cd_cgc_w(i))::text <> ''))) then 
			select	nr_seq_regra_rat_cobr, 
				nr_seq_cobrador 
			into STRICT	nr_seq_regra_rat_cobr_w, 
				nr_seq_cobrador_w 
			from	pls_notificacao_pagador 
			where	nr_sequencia = nr_seq_notific_pag_ant_w;
			 
			update	pls_notificacao_pagador 
			set	nr_seq_regra_rat_cobr 	= nr_seq_regra_rat_cobr_w, 
				nr_seq_cobrador		= coalesce(nr_seq_cobrador,nr_seq_cobrador_w) 
			where	nr_sequencia 		= tb_nr_seq_notific_pagador_w(i);
			 
			nr_seq_notific_pagador_w := tb_nr_seq_notific_pagador_w(i);
			 
			for r_C04_w in C04 loop 
				CALL pls_inserir_cobr_alt_cobrador(	r_C04_w.nr_sequencia, null, nr_seq_cobrador_w, 'N', nm_usuario_p );
				 
				update	cobranca a 
				set	nr_seq_regra_rat_cobr 	= nr_seq_regra_rat_cobr_w, 
					nr_seq_cobrador		= nr_seq_cobrador_w 
				where	nr_Sequencia		= r_C04_w.nr_sequencia;
			end loop;
		else			 
			CALL tratar_destino_cobranca_notif(	tb_nr_seq_notific_pagador_w(i), 
							nr_seq_grupo_p, 
							cd_estabelecimento_p, 
							nm_usuario_p);
 
			select	max(nr_sequencia) 
			into STRICT	nr_seq_cobranca_w 
			from	cobranca a 
			where	exists (SELECT	1 
					from	pls_notificacao_item x 
					where	x.nr_sequencia 			= a.nr_seq_notific_item 
					and	x.nr_seq_notific_pagador 	= tb_nr_seq_notific_pagador_w(i)) 
			and	a.ie_status	<> 'C';
			 
			select	max(nr_seq_regra_rat_cobr), 
				max(nr_seq_cobrador) 
			into STRICT	nr_seq_regra_rat_cobr_w, 
				nr_seq_cobrador_w 
			from	cobranca a 
			where	nr_sequencia	= nr_seq_cobranca_w;
			 
			update	pls_notificacao_pagador 
			set	nr_seq_regra_rat_cobr 	= nr_seq_regra_rat_cobr_w, 
				nr_seq_cobrador		= coalesce(nr_seq_cobrador,nr_seq_cobrador_w) 
			where	nr_sequencia 		= tb_nr_seq_notific_pagador_w(i);
		end if;
		 
		nr_seq_notific_pag_ant_w 	:= tb_nr_seq_notific_pagador_w(i);
		cd_pessoa_fisica_ant_w		:= tb_cd_pessoa_fisica_w(i);
		cd_cgc_ant_w			:= tb_cd_cgc_w(i);
		nr_seq_notific_pagador_w	:= null;
	end loop;
	 
end loop;
 
-- Gravar o cobrador original 
update	pls_notificacao_pagador	x 
set	x.nr_seq_cobrador = 	(SELECT	max(b.nr_seq_cobrador) 
				from	cobranca b 
				where	b.nr_sequencia in (select	max(a.nr_sequencia) 
								from	cobranca	a 
								where	a.nr_titulo in (select	i.nr_titulo 
											from	pls_notificacao_item i 
											where	i.nr_seq_notific_pagador = x.nr_sequencia))) 
where	coalesce(x.nr_seq_cobrador::text, '') = '' 
and	x.nr_seq_lote	= nr_seq_lote_p;
 
if	(ds_historico_w IS NOT NULL AND ds_historico_w::text <> '' AND nr_seq_tipo_historico_w IS NOT NULL AND nr_seq_tipo_historico_w::text <> '') then 
	open C03(nr_seq_lote_p);
	loop 
		tb_nr_seq_notific_pagador_w.delete;
		tb_cd_pessoa_fisica_w.delete;
		tb_cd_cgc_w.delete;
	fetch C03 bulk collect into tb_nr_seq_notific_pagador_w, tb_cd_pessoa_fisica_w, tb_cd_cgc_w limit 1000;
	exit when tb_nr_seq_notific_pagador_w.count = 0;
		for i in tb_nr_seq_notific_pagador_w.first..tb_nr_seq_notific_pagador_w.last loop 
			select	max(cd_pessoa_fisica) 
			into STRICT	cd_pessoa_fisica_w 
			from	usuario 
			where	nm_usuario = nm_usuario_p;
 
			select	max(nr_sequencia) 
			into STRICT	nr_seq_pessoa_cobrador_w 
			from	cobrador 
			where	cd_pessoa_fisica = cd_pessoa_fisica_w;			
			 
			select	nextval('registro_cobranca_seq') 
			into STRICT	nr_sequencia_w 
			;
			 
			insert	into registro_cobranca(nr_sequencia, 
				dt_registro, 
				ds_historico, 
				nr_seq_lote_notif, 
				cd_estabelecimento, 
				nm_usuario, 
				dt_atualizacao, 
				ie_proprio_devedor, 
				nm_usuario_nrec, 
				cd_pessoa_fisica, 
				cd_cgc, 
				nr_seq_historico, 
				nr_seq_cobrador_reg) 
			values (nr_sequencia_w, 
				clock_timestamp(), 
				ds_historico_w, 
				nr_seq_lote_p, 
				cd_estabelecimento_p, 
				nm_usuario_p, 
				clock_timestamp(), 
				'N', 
				nm_usuario_p, 
				tb_cd_pessoa_fisica_w(i), 
				tb_cd_cgc_w(i), 
				nr_seq_tipo_historico_w, 
				nr_seq_pessoa_cobrador_w);
		end loop;
	end loop;
 
	for r_c05_w in C05 loop 
		begin 
		 
		select	count(1) 
		into STRICT	qt_registro_cobr_item_w 
		from	registro_cobr_item 
		where	nr_seq_registro = r_c05_w.nr_seq_reg_cobranca 
		and	nr_seq_cobranca = r_c05_w.nr_seq_cobranca;
		 
		if (qt_registro_cobr_item_w = 0) then 
			insert	into	registro_cobr_item(nr_sequencia, dt_atualizacao, dt_atualizacao_nrec, 
				nm_usuario, nm_usuario_nrec, nr_seq_registro, 
				nr_seq_cobranca) 
			values (nextval('registro_cobr_item_seq'), clock_timestamp(), clock_timestamp(), 
				nm_usuario_p, nm_usuario_p, r_c05_w.nr_seq_reg_cobranca, 
				r_c05_w.nr_seq_cobranca);
		end if;
		end;
	end loop;
end if;
 
select	count(1) 
into STRICT	qt_cobranca_lote_w 
 
where	exists (SELECT	1 
		from	cobranca		a, 
			pls_notificacao_item	b, 
			pls_notificacao_pagador	c 
		where	a.nr_seq_notific_item	= b.nr_sequencia 
		and	c.nr_sequencia		= b.nr_seq_notific_pagador 
		and	c.nr_seq_lote		= nr_seq_lote_p);
 
if (qt_cobranca_lote_w > 0) then 
	update	pls_notificacao_lote 
	set	dt_geracao_cobranca	= clock_timestamp(), 
		nm_usuario		= nm_usuario_p, 
		dt_atualizacao		= clock_timestamp() 
	where	nr_sequencia		= nr_seq_lote_p;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_inserir_tit_notif_cobranca ( nr_seq_lote_p bigint, nr_seq_grupo_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

