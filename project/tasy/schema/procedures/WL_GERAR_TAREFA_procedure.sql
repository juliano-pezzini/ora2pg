-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE wl_gerar_tarefa (nm_usuario_p text) AS $body$
DECLARE


nm_usuario_w				usuario.nm_usuario%type;
qt_regra_dispositivo_w		bigint;
qt_horas_remover_disp_w		bigint;
nr_seq_disp_pac_w			atend_pac_dispositivo.nr_sequencia%type;
nr_atendimento_w			atend_pac_dispositivo.nr_atendimento%type;
cd_pessoa_fisica_w			pessoa_fisica.cd_pessoa_fisica%type;
dt_retirada_prev_w			atend_pac_dispositivo.dt_retirada_prev%type;
	
qt_evolucoes_w      		bigint;
qt_regra_evolucoes_w		bigint;
cd_tipo_evolucao_w 			tipo_evolucao.cd_tipo_evolucao%type;
qt_tempo_tarefa_w  			tipo_evolucao.qt_tempo_tarefa%type;
	
qt_regra_escalas_w			bigint;
ie_escala_w					wl_regra_item.ie_escala%type;
qt_tempo_w					wl_regra_item.qt_tempo_regra%type;
qt_tempo_atraso_w			wl_regra_item.qt_tempo_atraso%type;
nr_seq_regra_w				wl_regra_item.nr_sequencia%type;
ie_opcao_wl_w      			wl_regra_item.ie_opcao_wl%type;
qt_tempo_normal_w			wl_regra_item.qt_tempo_normal%type;
	
qt_regra_prev_alta_w		bigint;
nm_tabela_w					varchar(255);

nr_seq_tipo_adm_fat_atd_w	atendimento_paciente.nr_seq_tipo_admissao_fat%type;
ie_tipo_atendimento_w		atendimento_paciente.ie_tipo_atendimento%type;
nr_seq_episodio_w			atendimento_paciente.nr_seq_episodio%type;

qt_regra_carga_w			bigint;

ie_cons_episodio_w			varchar(1);
nr_atendimento_mae_w		atendimento_paciente.nr_atendimento_mae%type;

-- Regras de escalas para geracao em WorkList
C02 CURSOR FOR
	SELECT	coalesce(b.qt_tempo_regra, 0),
			coalesce(b.qt_tempo_normal, 0),
			coalesce(b.qt_tempo_atraso, 0),
			coalesce(b.nr_sequencia, 0),
			b.ie_escala,
			b.ie_opcao_wl,
			(SELECT	max(nm_tabela)
			from	vice_escala
			where	ie_escala = b.ie_escala)
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	select	max(x.nr_sequencia)
								from	wl_item x
								where	x.nr_sequencia = a.nr_seq_item
								and		x.cd_categoria = 'S'
								and		x.ie_situacao = 'A');
			
C03 CURSOR FOR
	SELECT	a.nr_atendimento,
			a.cd_pessoa_fisica,
			a.nr_seq_tipo_admissao_fat,
			a.ie_tipo_atendimento,
      a.nr_seq_episodio,
      a.nr_atendimento_mae
	from	atendimento_paciente a
	where	coalesce(a.dt_alta::text, '') = ''
	and		a.dt_entrada <= clock_timestamp()
	and		wl_obter_se_escala_periodo(a.nr_atendimento,ie_escala_w,qt_tempo_w,ie_opcao_wl_w) = 'N';

 -- Identificar os tipos de evolucao e o tempo de cada uma
C06 CURSOR FOR
	SELECT	b.ie_evolucao_clinica,
			b.ie_opcao_wl,
			coalesce(b.qt_tempo_regra, 0),
			coalesce(b.qt_tempo_normal, 0),
			coalesce(b.qt_tempo_atraso, 0),
			coalesce(b.nr_sequencia, 0)
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	SELECT	max(x.nr_sequencia)
								from	wl_item x
								where	x.nr_sequencia = a.nr_seq_item
								and		x.cd_categoria = 'CN'
								and		x.ie_situacao = 'A');

-- Atendimentos sem evolucao  
C07 CURSOR FOR
	SELECT	a.nr_atendimento,
			a.cd_pessoa_fisica,
			a.nr_seq_tipo_admissao_fat,
			a.ie_tipo_atendimento,
			a.nr_seq_episodio
	from	atendimento_paciente a
	where	coalesce(a.dt_alta::text, '') = ''
	and		a.dt_entrada <= clock_timestamp()
	and   	not exists (SELECT	1
			from	evolucao_paciente x
			where	a.nr_atendimento = x.nr_atendimento
			and	(x.dt_evolucao between clock_timestamp() - (qt_tempo_w/24) and clock_timestamp() or ie_opcao_wl_w = 'a')
			and	x.ie_tipo_evolucao = cd_tipo_evolucao_w)
	and	not exists (select	1
			from	wl_worklist b
			where	b.nr_atendimento = a.nr_atendimento
			and	(b.dt_inicial between clock_timestamp() - (qt_tempo_w/24) and clock_timestamp() or ie_opcao_wl_w = 'A')
			and	b.cd_tipo_evolucao = cd_tipo_evolucao_w);
				
C09 CURSOR FOR				
	SELECT	coalesce(b.qt_tempo_regra, 0),
			coalesce(b.qt_tempo_normal, 0),
			coalesce(b.qt_tempo_atraso, 0),
			coalesce(b.nr_sequencia, 0),
			b.ie_opcao_wl
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	SELECT	max(x.nr_sequencia)
								from	wl_item x
								where	x.nr_sequencia = a.nr_seq_item
								and		x.cd_categoria = 'ED'
								and		x.ie_situacao = 'A');
				
C10 CURSOR FOR				
	SELECT	coalesce(b.qt_tempo_regra, 0),
			coalesce(b.qt_tempo_normal, 0),
			coalesce(b.qt_tempo_atraso, 0),
			coalesce(b.nr_sequencia, 0),
			b.ie_opcao_wl
	from 	wl_regra_worklist a,
			wl_regra_item b
	where	a.nr_sequencia = b.nr_seq_regra
	and		b.ie_situacao = 'A'
	and		a.nr_seq_item = (	SELECT	max(x.nr_sequencia)
								from	wl_item x
								where	x.nr_sequencia = a.nr_seq_item
								and		x.cd_categoria = 'WO'
								and		x.ie_situacao = 'A');

			

BEGIN

nm_usuario_w := coalesce(nm_usuario_p,'Job');

-- ESCALAS
select	count(*)
into STRICT	qt_regra_escalas_w
from	wl_item
where	cd_categoria = 'S';

if (qt_regra_escalas_w > 0) then
	open C02;
	loop
	fetch C02 into
		qt_tempo_w,
		qt_tempo_normal_w,
		qt_tempo_atraso_w,
		nr_seq_regra_w,
		ie_escala_w,
		ie_opcao_wl_w,
		nm_tabela_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		
		open C03;
		loop
		fetch C03 into	
			nr_atendimento_w,
			cd_pessoa_fisica_w,
			nr_seq_tipo_adm_fat_atd_w,
			ie_tipo_atendimento_w,
			nr_seq_episodio_w,
      nr_atendimento_mae_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			
      select	(CASE WHEN (nr_atendimento_mae_w IS NOT NULL AND nr_atendimento_mae_w::text <> '') THEN 'N' ELSE 'S' END)
      into STRICT	ie_cons_episodio_w
;

			-- Gera Tarefa no Worklist para escalas e indices
			if (qt_tempo_w > 0 and ie_opcao_wl_w = 'D' and obter_se_regra_geracao(nr_seq_regra_w,nr_seq_episodio_w,nr_seq_tipo_adm_fat_atd_w, obter_setor_atendimento(nr_atendimento_w)) = 'S') then
				CALL wl_gerar_finalizar_tarefa('S','I',nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_w,clock_timestamp()+(qt_tempo_w/24),'S',null,null,null,null,null,null,ie_escala_w,null,null,nr_seq_regra_w,null,null,null,null,null,nm_tabela_w,null,clock_timestamp(),nr_seq_episodio_w,null,null,null,null,ie_cons_episodio_w);
        
      elsif (qt_tempo_normal_w > 0 and ie_opcao_wl_w = 'G' and (coalesce(Obter_classif_setor_atend(nr_atendimento_w),0) = 4)  and obter_se_regra_geracao(nr_seq_regra_w,nr_seq_episodio_w,nr_seq_tipo_adm_fat_atd_w, obter_setor_atendimento(nr_atendimento_w)) = 'S') then                
        CALL wl_gerar_finalizar_tarefa('S','I',nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_w,clock_timestamp()+(qt_tempo_normal_w/24),'S',null,null,null,null,null,null,ie_escala_w,null,null,nr_seq_regra_w,null,null,null,null,null,nm_tabela_w,null,clock_timestamp(),nr_seq_episodio_w,null,null,null,null,ie_cons_episodio_w);
			end if;
			end;
		end loop;
		close C03;
		
		end;
	end loop;
	close C02;
end if;

-- Notas clinicas
select	count(*)
into STRICT	qt_regra_evolucoes_w
from	wl_item
where	cd_categoria = 'CN';

if (qt_regra_evolucoes_w > 0) then
	-- Verifica se e necessario uma nova evolucao(PEP > Notas clinicas )
	open C06;
	loop
	fetch C06 into           --obtem todos os tipos de evolucoes obrigatorios
		cd_tipo_evolucao_w,
		ie_opcao_wl_w,
		qt_tempo_w,
		qt_tempo_normal_w,
		qt_tempo_atraso_w,
		nr_seq_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C06 */
		begin
		
		open C07;   --obtem os atendimentos abertos
		loop
		fetch C07 into
			nr_atendimento_w,
			cd_pessoa_fisica_w,
			nr_seq_tipo_adm_fat_atd_w,
			ie_tipo_atendimento_w,
			nr_seq_episodio_w;
		EXIT WHEN NOT FOUND; /* apply on C07 */
			begin
			
			-- Se nao achou registros, gera a pendencia
			if (qt_tempo_w > 0 and ie_opcao_wl_w = 'D' and obter_se_regra_geracao(nr_seq_regra_w,nr_seq_episodio_w,nr_seq_tipo_adm_fat_atd_w) = 'S') then
				CALL wl_gerar_finalizar_tarefa('CN','I',nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_w,clock_timestamp()+(qt_tempo_w/24),'S', cd_tipo_evolucao_w, null,null,null,null,null,null,null,null,nr_seq_regra_w,null,null,null,null,null,null,null,clock_timestamp(),nr_seq_episodio_w);		
			end if;
			
			end;
		end loop;
		close C07;
		
		end;
	end loop;
	close C06;
end if;

-- Previsao de alta
select	count(*)
into STRICT	qt_regra_prev_alta_w
from	wl_item
where	cd_categoria = 'ED';

if (qt_regra_prev_alta_w > 0) then

	cd_tipo_evolucao_w := null;
	
	open C09;
	loop
	fetch C09 into
		qt_tempo_w,
		qt_tempo_normal_w,
		qt_tempo_atraso_w,
		nr_seq_regra_w,
		ie_opcao_wl_w;
	EXIT WHEN NOT FOUND; /* apply on C09 */
		begin

		open C07;   --obtem os atendimentos abertos
		loop
		fetch C07 into
			nr_atendimento_w,
			cd_pessoa_fisica_w,
			nr_seq_tipo_adm_fat_atd_w,
			ie_tipo_atendimento_w,
			nr_seq_episodio_w;
		EXIT WHEN NOT FOUND; /* apply on C07 */
			begin
			
			-- Se nao achou registros, gera a pendencia
			if (qt_tempo_w > 0 and ie_opcao_wl_w = 'D' and obter_se_regra_geracao(nr_seq_regra_w,nr_seq_episodio_w,nr_seq_tipo_adm_fat_atd_w) = 'S') then
				CALL wl_gerar_finalizar_tarefa('ED','I',nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_w,clock_timestamp()+(qt_tempo_w/24),'S', cd_tipo_evolucao_w, null,null,null,null,null,null,null,null,nr_seq_regra_w,null,null,null,null,null,null,null,clock_timestamp(),nr_seq_episodio_w);		
			end if;
			end;
		end loop;
		close C07;
		
		end;
	end loop;
	close C09;
end if;

-- Carga de trabalho
select	count(*)
into STRICT	qt_regra_carga_w
from	wl_item
where	cd_categoria = 'WO';

if (qt_regra_carga_w > 0) then

	cd_tipo_evolucao_w := null;
	
	open C10;
	loop
	fetch C10 into
		qt_tempo_w,
		qt_tempo_normal_w,
		qt_tempo_atraso_w,
		nr_seq_regra_w,
		ie_opcao_wl_w;
	EXIT WHEN NOT FOUND; /* apply on C10 */
		begin

		open C07;   --obtem os atendimentos abertos
		loop
		fetch C07 into
			nr_atendimento_w,
			cd_pessoa_fisica_w,
			nr_seq_tipo_adm_fat_atd_w,
			ie_tipo_atendimento_w,
			nr_seq_episodio_w;
		EXIT WHEN NOT FOUND; /* apply on C07 */
			begin
			
			-- Se nao achou registros, gera a pendencia
			if (qt_tempo_w > 0 and ie_opcao_wl_w = 'D' and obter_se_regra_geracao(nr_seq_regra_w,nr_seq_episodio_w,nr_seq_tipo_adm_fat_atd_w) = 'S') then
				CALL wl_gerar_finalizar_tarefa('WO','I',nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_w,clock_timestamp()+(qt_tempo_w/24),'S', null,null,null,null,null,null,null,null,null,
											nr_seq_regra_w,null,null,null,null,null,null,null,clock_timestamp(),nr_seq_episodio_w);		
			end if;
			end;
		end loop;
		close C07;
		
		end;
	end loop;
	close C10;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE wl_gerar_tarefa (nm_usuario_p text) FROM PUBLIC;

