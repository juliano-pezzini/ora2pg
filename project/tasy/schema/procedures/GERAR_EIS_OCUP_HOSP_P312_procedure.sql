-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_eis_ocup_hosp_p312 (dt_parametro_p timestamp, cd_estabelecimento_p bigint) AS $body$
DECLARE
				
cd_unidade_basica_w   			varchar(10);		
cd_classif_setor_w   			varchar(2);
cd_convenio_w  					bigint;
cd_empresa_w    				smallint;
cd_estabelecimento_base_w 		smallint;
cd_motivo_alta_w  				smallint;
cd_prim_cd_unidade_basica_w 	varchar(10);
cd_prim_cd_unidade_compl_w  	varchar(10);
cd_prim_setor_atendimento_w 	integer;
cd_setor_atendimento_w  		integer;
cd_tipo_acomodacao_unidade_w 	bigint;
cd_tipo_acomodacao_w  			bigint;
cd_unidade_compl_w   			varchar(10);
ds_agrupamento_w				varchar(100);
ds_clinica_w					varchar(100);
ds_convenio_w    				varchar(100);
ds_estabelecimento_base_w		varchar(80);
ds_setor_atendimento_w  		varchar(100);
ds_tipo_acomodacao_w  			varchar(255);
dt_alta_w   					timestamp;
dt_entrada_W   					timestamp;
dt_parametro_w   				timestamp;
dt_prim_entrada_unid_w 			timestamp;
dt_ref_final_w  				timestamp;
dt_ref_inicial_w  				timestamp;
dt_saida_interno_w  			timestamp;
dt_saida_unidade_w 				timestamp;
dt_saida_unidade_ww 			timestamp;
dt_ult_saida_dia_unidade_w 		timestamp;
dt_ult_saida_unidade_w 			timestamp;
ie_atend_unidade_w  			varchar(1) := 'N';
ie_cancelado_censo_w 			varchar(1);
ie_classif_p312_w   			varchar(05);
ie_clinica_w   					integer;
ie_entrou_cursor_3  			varchar(1);
ie_motivo_p312_w   				varchar(15);
ie_obito_institucional_w 		varchar(1);
ie_obito_w     					varchar(01);
ie_passagem_setor_w   			varchar(01);
is_ie_passagem_setor_w			varchar(01);
ie_status_unidade_w   			varchar(15);
ie_transferencia_w   			varchar(01);
nr_atendimento_mae_w 			bigint;
nr_atendimento_w  				bigint;
nr_seq_agrupamento_w  			bigint;
nr_seq_atend_w   				bigint;
nr_seq_interno_w   				bigint;
nr_seq_ocup_hosp_adic_w 		bigint;
nr_seq_ocup_hosp_w 				bigint;
nr_seq_status_p312_w  			bigint;
qt_alta_w   					integer;
qt_alta_atend_w					integer;
qt_classif_w  					bigint;
qt_desistencia_w  				integer;
qt_desistencia_atend_w  		integer;
qt_evasao_w  					integer;
qt_evasao_atend_w  				integer;
qt_existe_transf_w  			bigint;
qt_horas_internacao_w 			bigint;
qt_internacao_w  				bigint;
qt_internacao_atend_w  			bigint;
qt_inter_atend_atual_w  		bigint;
qt_leito_bloqueado_w  			integer;
qt_leito_desativado_w   		integer;
qt_leito_dia_Atend_w  			integer;
qt_leito_dia_w  				integer;
qt_leito_extra_w   				integer;
qt_leito_instalado_w  			integer;
qt_leito_observacao_w  			integer;
qt_leito_ocupado_w   			integer;
qt_leito_planejado_w  			integer;
qt_leito_rn_alojamento_conj_w  	integer;
qt_leito_vago_w    				integer;
qt_obito_hospitalar_w 			integer;
qt_obito_hospitalar_atend_w 	integer;
qt_obito_institucional_w 		integer;
qt_obito_institucional_atend_w 	integer;
qt_obs_hospitalar_w 			bigint;
qt_obs_hospitalar_atend_w 		bigint;
qt_ocupado_w  					integer;
qt_paciente_dia_atend_w 		integer;
qt_paciente_dia_w  				integer;
qt_trans_externa_w  			integer;
qt_trans_externa_atend_w  		integer;
qt_trans_interna_w  			integer;
qt_trans_interna_atend_w  		integer;
ie_sem_acomodacao_w				varchar(1);
cd_estab_ant_w					bigint;
qt_trans_int_ent_w				integer;
qt_trans_int_saida_w			integer;
qt_trans_ext_entrada_w			integer;
qt_trans_ext_saida_w			integer;
qt_trans_externa_temp_w  		integer;
qt_trans_interna_temp_w  		integer;


/* Buscar as unidades de atendimento e Setores de internacao, Pronto Socorro e UTI criados ate a data de atualizacao do EIS */

c01 CURSOR FOR
	SELECT	a.cd_setor_atendimento,
			a.cd_unidade_basica,
			a.cd_unidade_compl,
			a.nr_seq_interno,
			b.cd_estabelecimento_base,
			substr(obter_nome_estabelecimento(b.cd_estabelecimento_base),1,80),
			a.cd_tipo_acomodacao,
			obter_empresa_estab(b.cd_estabelecimento_base),
			substr(obter_nome_setor(a.cd_setor_atendimento),1,100),		
			b.cd_classif_setor,
			b.nr_seq_agrupamento,
			substr(Obter_desc_agrup_setor(b.nr_seq_agrupamento),1,100),
			coalesce(obter_se_sem_acomodacao(coalesce(a.cd_tipo_acomodacao,0)),'N')
	from	unidade_atendimento a,
			setor_atendimento b
	where	obter_classif_setor(a.cd_setor_atendimento) in (1,3,4)
	and		a.cd_setor_atendimento = b.cd_setor_atendimento
	and		Obter_Se_Setor_Ocupacao_Hosp(a.cd_setor_atendimento) = 'S'
	and		(((b.ie_situacao = 'A') and (coalesce(a.dt_criacao, dt_parametro_p) -1) <= dt_parametro_p) or
			((b.ie_situacao = 'I') and  ((coalesce(b.dt_inativacao, dt_parametro_p) -1) >= dt_parametro_p)))
	order by a.cd_setor_atendimento,
	  		a.cd_unidade_basica,
			a.cd_unidade_compl;

/* Buscar a Classificacao da unidade de atendimento para a portaria n 312 */

c02 CURSOR FOR
	SELECT	a.ie_classif_p312
	from	unidade_atend_classif_p312 a
	where	a.nr_seq_unid_atend = nr_seq_interno_w
	and		a.dt_inicio_classif < dt_ref_final_w
	and		coalesce(a.dt_fim_classif, dt_ref_final_w) >= dt_ref_inicial_w;

/* Buscar os atendimentos que passaram pelas unidades de atendimento */

c03 CURSOR FOR
	SELECT	/*+ INDEX(B ATEPACU_I1) INDEX(a atepaci_pk) */			a.nr_atendimento,
			a.cd_motivo_alta,
			coalesce(b.dt_saida_unidade, clock_timestamp()),
			b.dt_saida_unidade,
			b.dt_saida_interno,
			trunc(trunc((coalesce(a.dt_alta, clock_timestamp()) - a.dt_entrada) * 86400) / 3600),
			substr(Obter_Tipo_Unidade_Atend(a.nr_atendimento, b.nr_seq_interno, b.ie_passagem_setor),1,1),
			coalesce(a.dt_alta, clock_timestamp()),
			b.dt_entrada_unidade,
			obter_convenio_atendimento(a.nr_atendimento),
			substr(obter_nome_convenio(obter_convenio_atendimento(a.nr_atendimento)),1,100),
			a.ie_clinica,
			obter_valor_dominio(17, a.ie_clinica),
			b.cd_tipo_acomodacao,
			a.nr_atendimento_mae,
			b.ie_passagem_setor
	from	atendimento_paciente a,
			atend_paciente_unidade b
	where	a.nr_atendimento = b.nr_atendimento
	and		b.cd_setor_atendimento = cd_setor_atendimento_w
	and		b.cd_unidade_basica    = cd_unidade_basica_w
	and		b.cd_unidade_compl     = cd_unidade_compl_w
	and		b.dt_entrada_unidade   < dt_ref_final_w
	and		b.dt_saida_interno 	>= dt_ref_inicial_w
	and  	(((ie_cancelado_censo_w = 'N') and (coalesce(a.dt_cancelamento::text, '') = '')) or (ie_cancelado_censo_w = 'S'))
	and		((substr(obter_se_motivo_alta_censo(a.cd_motivo_alta),1,1) = 'S') or coalesce(a.cd_motivo_alta::text, '') = '');


BEGIN

/* Excluir os registros anteriores */

delete from weis_ocup_hosp_p312 where trunc(dt_referencia) = trunc(dt_parametro_p);
delete from eis_ocupacao_hospitalar_p312 where trunc(dt_referencia) = trunc(dt_parametro_p);
commit;

dt_ref_inicial_w	:= trunc(dt_parametro_p,'dd');
dt_ref_final_w		:= fim_dia(dt_parametro_p);

open c01;
loop
fetch c01 into
	cd_setor_atendimento_w,
	cd_unidade_basica_w,
	cd_unidade_compl_w,
	nr_seq_interno_w,
	cd_estabelecimento_base_w,
	ds_estabelecimento_base_w,
	cd_tipo_acomodacao_unidade_w,
	cd_empresa_w,
	ds_setor_atendimento_w,
	cd_classif_setor_w,
	nr_seq_agrupamento_w,
	ds_agrupamento_w,
	ie_sem_acomodacao_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	select	coalesce(max(ie_obito_institucional),'N'),
			coalesce(max(ie_cancelado_censo),'S')			
	into STRICT	ie_obito_institucional_w,
			ie_cancelado_censo_w
	from	parametro_atendimento
	where 	cd_estabelecimento = cd_estabelecimento_base_w;	
	
	/* Verifica a classificacao da unidade de atendimento */

	qt_leito_planejado_w	:= 0;
	qt_leito_instalado_w	:= 0;
	qt_leito_extra_w		:= 0;
	qt_leito_rn_alojamento_conj_w := 0;
	qt_leito_observacao_w 	:= 0;
	open c02;
	loop
	fetch c02 into
		ie_classif_p312_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		if (ie_classif_p312_w = 4) then
			qt_leito_planejado_w	:= 1;
		elsif (ie_classif_p312_w = 5) then
			qt_leito_instalado_w	:= 1;
		elsif (ie_classif_p312_w = 22) then
			qt_leito_extra_w		:= 1;
		elsif (ie_classif_p312_w = 17) then -- Berco de recem-nascido em alojamento conjunto.
			qt_leito_rn_alojamento_conj_w := 1;			
		elsif (ie_classif_p312_w = 2) then
			qt_leito_observacao_w := 1;
		end if;
		end;
	end loop;
	close c02;

	/* Verifica o ultimo status da unidade de atendimento */

	select	coalesce(max(a.nr_sequencia),0)
	into STRICT	nr_seq_status_p312_w
	from	unidade_atend_status_p312 a
	where	a.nr_seq_unid_atend = nr_seq_interno_w
	and		a.dt_inicio < dt_ref_final_w
	and		coalesce(a.dt_final, dt_ref_final_w) >= dt_ref_inicial_w;

	if (nr_seq_status_p312_w <> 0) then
		select	a.ie_status_unidade
		into STRICT	ie_status_unidade_w
		from	unidade_atend_status_p312 a
		where	a.nr_sequencia = nr_seq_status_p312_w;
	else
		select	coalesce(max(a.ie_status_unidade),'LV')
		into STRICT	ie_status_unidade_w
		from	unidade_atend_status_p312 a
		where	a.nr_seq_unid_atend = nr_seq_interno_w
		and		a.dt_inicio < dt_ref_final_w
		and		coalesce(a.dt_final, dt_ref_final_w) >= dt_ref_inicial_w;
	end if;

	/* Status da unidade de atendimento */

	qt_leito_vago_w		:= 0;
	qt_leito_ocupado_w	:= 0;
	qt_leito_bloqueado_w	:= 0;
	qt_leito_desativado_w	:= 0;
	if (ie_status_unidade_w = 'LV') then
		qt_leito_vago_w		:= 1;
	elsif (ie_status_unidade_w = 'LO') then
		qt_leito_ocupado_w	:= 1;
	elsif (ie_status_unidade_w = 'LB') then
		qt_leito_bloqueado_w	:= 1;
	elsif (ie_status_unidade_w = 'LD') then
		qt_leito_desativado_w	:= 1;
	end if;

	/* Verificar se o leito considerasse um leito-dia,
	  se o leito estiver vago ou se for um leito extra com paciente internado */
	qt_leito_dia_w			:= 0;
	qt_leito_dia_Atend_w	:= 0;
	if (ie_sem_acomodacao_w = 'N') then
		if	(((qt_leito_extra_w = 0 AND qt_leito_observacao_w = 0) and (ie_status_unidade_w = 'LV') or (ie_status_unidade_w = 'LO')) or
			 (((qt_leito_extra_w > 0) or (qt_leito_observacao_w > 0) ) and (ie_status_unidade_w = 'LO'))) and (qt_leito_rn_alojamento_conj_w = 0) then
			qt_leito_dia_w	:= 1;
		end if;
	end if;
	qt_leito_dia_Atend_w	:= qt_leito_dia_w;

	/* Verificar quantas ocupacoes o leito possuiu */

	select	count(*)
	into STRICT	qt_ocupado_w
	from	unidade_atend_status_p312 a
	where	a.nr_seq_unid_atend = nr_seq_interno_w
	and		a.dt_inicio between dt_ref_inicial_w and dt_ref_final_w
	and		a.ie_status_unidade = 'LO';

	/* Verificar se a unidade de atendimento possui classificacoes determinadas pela portaria n 312 */

	select	count(*)
	into STRICT	qt_classif_w
	from	unidade_atend_classif_p312 a
	where	a.nr_seq_unid_atend = nr_seq_interno_w
	and		a.dt_inicio_classif < dt_ref_final_w
	and		coalesce(a.dt_fim_classif, dt_ref_final_w) >= dt_ref_inicial_w;

	/* Obter os resultados */

	qt_internacao_w				:= 0;
	qt_alta_w					:= 0;
	qt_alta_atend_w				:= 0;
	qt_evasao_w					:= 0;
	qt_evasao_atend_w			:= 0;
	qt_desistencia_w			:= 0;
	qt_desistencia_atend_w 		:= 0;
	qt_obito_hospitalar_w		:= 0;
	qt_obito_hospitalar_atend_w := 0;
	qt_obito_institucional_w	:= 0;
	qt_obito_institucional_atend_w := 0;
	qt_trans_interna_w			:= 0;
	qt_trans_interna_atend_w    := 0;
	qt_trans_interna_temp_w 	:= 0;
	qt_trans_externa_w			:= 0;
	qt_trans_externa_atend_w 	:= 0;
	qt_trans_externa_temp_w 	:= 0;
	qt_paciente_dia_w			:= 0;
	qt_obs_hospitalar_w			:= 0;
	qt_obs_hospitalar_atend_w 	:= 0;
	qt_trans_int_ent_w			:= 0;
	qt_trans_int_saida_w		:= 0;
	qt_trans_ext_entrada_w		:= 0;
	qt_trans_ext_saida_w		:= 0;
	qt_paciente_dia_atend_w 	:= 0;
	
	select	max(obter_desc_tipo_acomodacao(cd_tipo_acomodacao_unidade_w))
	into STRICT	ds_tipo_acomodacao_w
	;
		
	/* Se existir classificacoes determinadas pela portaria n 312, gravar na tabela de EIS */

	if (qt_classif_w > 0) then
		begin

		select	trunc(dt_parametro_p)
		into STRICT	dt_parametro_w
		;

		Select	coalesce(max(nr_sequencia),0) + 1
		into STRICT	nr_seq_ocup_hosp_w
		from	eis_ocupacao_hospitalar_p312;

			/* Criado antes para gerar os atendimentos corretamente */

			insert into eis_ocupacao_hospitalar_p312(
				nr_sequencia,
				dt_referencia,
				cd_estabelecimento,
				cd_setor_atendimento,
				cd_unidade_basica,
				cd_unidade_compl,
				qt_leito_planejado,
				qt_leito_instalado,
				qt_leito_extra,
				qt_leito_vago,
				qt_leito_ocupado,
				qt_leito_bloqueado,
				qt_leito_desativado,
				qt_internacao,
				qt_alta,
				qt_evasao,
				qt_desistencia,
				qt_obito_hospitalar,
				qt_obito_institucional,
				qt_trans_interna,
				qt_trans_externa,
				qt_leito_dia,
				qt_ocupado,
				qt_paciente_dia,
				qt_obs_hospitalar,
				ds_estabelecimento,
				ds_setor_atendimento,
				ie_obito_institucional,
				cd_tipo_acomodacao,
				dt_entrada,
				dt_alta,				
				qt_trans_int_entrada,
				qt_trans_int_saida,
				qt_trans_ext_entrada,
				qt_trans_ext_saida)
			values (nr_seq_ocup_hosp_w,
				dt_parametro_w,
				cd_estabelecimento_base_w,
				cd_setor_atendimento_w,
				cd_unidade_basica_w,
				cd_unidade_compl_w,
				qt_leito_planejado_w,
				qt_leito_instalado_w,
				qt_leito_extra_w,
				qt_leito_vago_w,
				qt_leito_ocupado_w,
				qt_leito_bloqueado_w,
				qt_leito_desativado_w,
				qt_internacao_w,
				qt_alta_w,
				qt_evasao_w,
				qt_desistencia_w,
				qt_obito_hospitalar_w,
				qt_obito_institucional_w,
				qt_trans_interna_w,
				qt_trans_externa_w,
				qt_leito_dia_w,
				qt_ocupado_w,
				qt_paciente_dia_w,
				qt_obs_hospitalar_w,
			   	ds_estabelecimento_base_w,
			 	ds_setor_atendimento_w,
				ie_obito_institucional_w,
				cd_tipo_acomodacao_unidade_w,
				dt_entrada_w,
				dt_alta_w,
				0,
				0,
				0,
				0);

		ie_atend_unidade_w	:= 'N';
		ie_entrou_cursor_3 := 'N';

		open c03;
		loop
		fetch c03 into
			nr_atendimento_w,
			cd_motivo_alta_w,
			dt_saida_unidade_w,
			dt_saida_unidade_ww,
			dt_saida_interno_w,
			qt_horas_internacao_w,
			ie_passagem_setor_w,
			dt_alta_w,
			dt_entrada_w,
			cd_convenio_w,
			ds_convenio_w,
			ie_clinica_w,
			ds_clinica_w,
			cd_tipo_acomodacao_w,
			nr_atendimento_mae_w,
			is_ie_passagem_setor_w;

		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin		
			if ( dt_saida_unidade_ww > dt_ref_final_w ) then
				dt_saida_unidade_ww := null;
			end if;			
			
			/* 	Limpa as variaveis que inserem no weis_ocup_hosp_p312 
			    	Os dados inseridos na eis_ocupacao_hospitalar_p312 nao devem ser limpos aqui, somente fora do c03
			*/
			qt_trans_externa_temp_w 		:= 0;
			qt_trans_interna_temp_w 		:= 0;
			qt_paciente_dia_atend_w 		:= 0;
			qt_obito_institucional_atend_w 	:= 0;
			qt_alta_atend_w 				:= 0;	
			qt_internacao_atend_w 			:= 0;
			qt_trans_interna_atend_w 		:= 0;
			qt_obito_hospitalar_atend_w 	:= 0;
			qt_trans_externa_atend_w 		:= 0;
			qt_obs_hospitalar_atend_w 		:= 0;
			qt_evasao_atend_w 				:= 0;
			qt_desistencia_atend_w 			:= 0;
			cd_estab_ant_w					:= 0;
			ie_obito_w						:= 'N';
			
			select	coalesce(max(c.CD_ESTABELECIMENTO),0),
					count(*)
			into STRICT	cd_estab_ant_w,
					qt_existe_transf_w
			from	atendimento_paciente a,
					atend_paciente_unidade b,
					setor_atendimento c,
					unidade_atendimento d
			where	a.nr_atendimento = b.nr_atendimento
			and		a.nr_atendimento = nr_atendimento_w
			and		c.cd_setor_atendimento	= d.cd_setor_atendimento
			and		b.cd_setor_atendimento	= d.cd_setor_atendimento
			and		b.cd_unidade_basica		= d.cd_unidade_basica
			and		b.cd_unidade_compl		= d.cd_unidade_compl
			and		b.cd_setor_Atendimento	= c.cd_setor_atendimento
			and		b.dt_saida_unidade = dt_entrada_w
			and 	obter_classif_setor(b.cd_setor_atendimento) in (1,3,4)
			and		trunc(dt_saida_unidade) = trunc(dt_parametro_p)
			and		substr(Obter_Tipo_Unidade_Atend(a.nr_atendimento, b.nr_seq_interno, b.ie_passagem_setor),1,1) in ('P','A','N')
			and 	exists (SELECT	1
							from	unidade_atend_classif_p312 x
							where	x.nr_seq_unid_atend = d.nr_seq_interno
							and	x.dt_inicio_classif < dt_ref_final_w
							and	coalesce(x.dt_fim_classif, dt_ref_final_w) >= dt_ref_inicial_w);			
						
	
			if (dt_saida_unidade_w > dt_ref_inicial_w) then
				begin
				/* Obter a ultima saida do setor */

				select	max(a.dt_saida_unidade)
				into STRICT	dt_ult_saida_unidade_w
				from	atend_paciente_unidade a
				where	a.nr_atendimento = nr_atendimento_w
				and	obter_classif_setor(a.cd_setor_atendimento) in (1,3,4)
				and	ie_passagem_setor <> 'S';
				

				if (cd_motivo_alta_w IS NOT NULL AND cd_motivo_alta_w::text <> '') and (trunc(dt_alta_w) <= trunc(dt_parametro_p)) and (is_ie_passagem_setor_w <> 'S') then
					begin
					/* Verificar o motivo da alta pela portaria */

					select	max(ie_motivo_p312)
					into STRICT	ie_motivo_p312_w
					from	motivo_alta
					where	cd_motivo_alta = cd_motivo_alta_w;
										
					select	substr(obter_se_motivo_alta_obito(cd_motivo_alta_w),1,1)
					into STRICT	ie_obito_w
					;

					if (dt_saida_unidade_w = dt_ult_saida_unidade_w) then
						begin
						/* Obter Obitos e Altas */

						if (ie_obito_w = 'S') and (trunc(dt_alta_w) = trunc(dt_ref_inicial_w)) then
							begin
							/* Obito Hospitalar ou Obito Institucional */

							If (ie_obito_institucional_w = 'N') then
								if (qt_horas_internacao_w >= 24) then
									begin
									qt_obito_institucional_w	:= qt_obito_institucional_w + 1;
									qt_obito_institucional_atend_w	:= qt_obito_institucional_atend_w + 1;
									end;
								elsif (qt_horas_internacao_w < 24) then
									begin
									qt_obito_hospitalar_w	:= qt_obito_hospitalar_w + 1;
									qt_obito_hospitalar_atend_w := qt_obito_hospitalar_atend_w  + 1;
									end;
								end if;
							Elsif (ie_obito_institucional_w = 'S') then
								if (qt_horas_internacao_w <= 24) then
									qt_obito_institucional_w	:= qt_obito_institucional_w + 1;
									qt_obito_institucional_atend_w	:= qt_obito_institucional_atend_w + 1;
									
								end if;
								qt_obito_hospitalar_w	:= qt_obito_hospitalar_w + 1;
								qt_obito_hospitalar_atend_w := qt_obito_hospitalar_atend_w  + 1;
								
							End if;
							end;
						elsif (trunc(dt_saida_interno_w) = trunc(dt_parametro_p)) and (ie_motivo_p312_w = 'AL') and (trunc( dt_alta_w ) = trunc(dt_ref_inicial_w)) then
							begin
		 						qt_alta_w		:= qt_alta_w + 1;
								qt_alta_atend_w	:= qt_alta_atend_w + 1;
							end;
						end if;

						/* Verificar as evasoes e as desistencias */

						if (ie_motivo_p312_w = 'AV') then
							begin
							qt_evasao_w	:= qt_evasao_w + 1;
							qt_evasao_atend_w	:= qt_evasao_atend_w + 1;
							end;
						elsif (ie_motivo_p312_w = 'DT') then
							begin
							qt_desistencia_w	:= qt_desistencia_w + 1;
							qt_desistencia_atend_w	:= qt_desistencia_atend_w + 1;
							end;
						end if;

						/* Obter as transferencias Externas */

						select	substr(obter_se_motivo_alta_trans(cd_motivo_alta_w),1,1)
						into STRICT	ie_transferencia_w
						;

						if (ie_transferencia_w = 'S') and (trunc(dt_alta_w) = trunc(dt_parametro_p)) then
							begin
							qt_trans_externa_w	:= qt_trans_externa_w + 1;
							qt_trans_externa_atend_w	:= qt_trans_externa_atend_w + 1;
							qt_trans_externa_temp_w := qt_trans_externa_temp_w+1;
							qt_trans_ext_saida_w	:= qt_trans_ext_saida_w + 1;
							end;
						end if;
						end;
					end if;

					if (dt_saida_unidade_w = dt_ult_saida_unidade_w) then						
						/* Verificar as internacoes considerando paciente em observacao ou como paciente-dia. 
							Obitos hospitalares sao considerados pacientes-dia */
						if (qt_horas_internacao_w < 24) and (ie_obito_w = 'N') then
							qt_obs_hospitalar_w	:= qt_obs_hospitalar_w + 1;
							qt_obs_hospitalar_atend_w	:= qt_obs_hospitalar_atend_w + 1;
							
						elsif	((qt_horas_internacao_w >= 24) or (qt_obito_hospitalar_w > 0)) and (trunc(dt_alta_w) = trunc(dt_entrada_w)) and
							((coalesce(nr_atendimento_mae_w::text, '') = '') or 	((nr_atendimento_mae_w IS NOT NULL AND nr_atendimento_mae_w::text <> '') and (cd_classif_setor_w in ('3','4')) and (qt_leito_rn_alojamento_conj_w = 0) and (qt_leito_observacao_w = 0))) then
							
							qt_paciente_dia_w		:= qt_paciente_dia_w +  1;							
							qt_paciente_dia_atend_w		:= qt_paciente_dia_atend_w + 1;
						end if;
						
					end if;					
					
					end;
				end if;

				select	max(a.dt_saida_interno)
				into STRICT	dt_ult_saida_dia_unidade_w
				from	atend_paciente_unidade a
				where	a.nr_atendimento = nr_atendimento_w
				and		obter_classif_setor(a.cd_setor_atendimento) in (1,3,4)
				and		dt_entrada_unidade <= dt_ref_final_w;
				
				if (dt_ult_saida_dia_unidade_w = dt_saida_interno_w) then
					/* Verificar as internacoes considerando paciente em observacao ou como paciente-dia.
						Obitos hospitalares so considerados pacientes-dia */
					if (trunc(dt_alta_w) = trunc(dt_entrada_w)) and (qt_trans_interna_temp_w = 0) and (qt_trans_externa_temp_w = 0) and
						((coalesce(nr_atendimento_mae_w::text, '') = '') or 	((nr_atendimento_mae_w IS NOT NULL AND nr_atendimento_mae_w::text <> '') and (cd_classif_setor_w in ('3','4')) and (qt_leito_rn_alojamento_conj_w = 0) and (qt_leito_observacao_w = 0))) then
						begin
						qt_paciente_dia_w		:= qt_paciente_dia_w + 1;
						qt_paciente_dia_atend_w		:= qt_paciente_dia_atend_w + 1;
						end;
											
					elsif (dt_saida_interno_w > dt_ref_final_w) and (trunc(dt_parametro_p) < trunc(dt_alta_w)) and (qt_trans_interna_temp_w = 0) and (qt_trans_externa_temp_w = 0) and
						((coalesce(nr_atendimento_mae_w::text, '') = '') or 	((nr_atendimento_mae_w IS NOT NULL AND nr_atendimento_mae_w::text <> '') and (cd_classif_setor_w in ('3','4')) and (qt_leito_rn_alojamento_conj_w = 0) and (qt_leito_observacao_w = 0))) then
						begin
						qt_paciente_dia_w		:= qt_paciente_dia_w + 1;
						qt_paciente_dia_atend_w		:= qt_paciente_dia_atend_w + 1;
						end;
					end if;
				end if;
				end;
			end if;

			select	min(dt_entrada_unidade)
			into STRICT	dt_prim_entrada_unid_w
			from	atend_paciente_unidade
			where	nr_atendimento = nr_atendimento_w
			and	substr(obter_classif_setor(cd_setor_atendimento),1,1) in (3,4);

			select	max(cd_setor_atendimento),
					max(cd_unidade_basica),
					max(cd_unidade_compl)
			into STRICT	cd_prim_setor_atendimento_w,
					cd_prim_cd_unidade_basica_w,
					cd_prim_cd_unidade_compl_w
			from	atend_paciente_unidade
			where	nr_atendimento = nr_atendimento_w
			and		dt_entrada_unidade = dt_prim_entrada_unid_w;

			select 	coalesce(sum(qt_internacao),0)
			into STRICT 	qt_inter_atend_atual_w
			from 	weis_ocup_hosp_p312
			where 	nr_atendimento = nr_atendimento_w
			and 	trunc(dt_referencia) = trunc(dt_parametro_p);
			
			if (trunc(dt_prim_entrada_unid_w) = trunc(dt_parametro_p)) and (cd_prim_setor_atendimento_w = cd_setor_atendimento_w) and (cd_prim_cd_unidade_basica_w = cd_unidade_basica_w) and (cd_prim_cd_unidade_compl_w = cd_unidade_compl_w) and (qt_inter_atend_atual_w = 0)	then
				begin
				qt_internacao_w			:= qt_internacao_w + 1;
				qt_internacao_atend_w			:= qt_internacao_atend_w + 1;
				end;
			end if;

			if (ie_atend_unidade_w	= 'S') then
				qt_leito_dia_Atend_w	:= 0;
			end if;
			
			/* Verificar as transferencia internas de uma unidade para outra dentro do mesmo hospital
			N = Transferencia Setor, j  uma transferencia interna.
			A = Alta, verificar se a maior data de saida da unidade (desconsiderando unidade com tipo de passagem = Passagem setor (S) e
			Alta (A)) se  igual a data de entrada na unidade que recebeu alta, se for  uma transferencia interna. */
			if (ie_passagem_setor_w = 'A') then						
				if (qt_existe_transf_w	> 0) then
					if (cd_estab_ant_w > 0) and (cd_estab_ant_w	<> cd_estabelecimento_base_w) then
						qt_trans_externa_w		:= qt_trans_externa_w + 1;
						qt_trans_externa_atend_w	:= qt_trans_externa_atend_w + 1;
						qt_trans_externa_temp_w := qt_trans_externa_temp_w+1;
						qt_trans_ext_saida_w	:= qt_trans_ext_saida_w + 1;
					else
						qt_trans_interna_w	:= qt_trans_interna_w + 1;
						qt_trans_interna_atend_w	:= qt_trans_interna_atend_w + 1;
						qt_trans_interna_temp_w := qt_trans_interna_temp_w + 1;						
						qt_trans_int_saida_w	:= qt_trans_int_saida_w + 1;							
					end if;
				end if;			
			elsif (ie_passagem_setor_w = 'N') and (dt_saida_unidade_ww IS NOT NULL AND dt_saida_unidade_ww::text <> '') and
				trunc(dt_saida_unidade_ww) = trunc(dt_parametro_p) then				
				if (cd_estab_ant_w	> 0) and (cd_estabelecimento_base_w	<> cd_estab_ant_w) then
					qt_trans_externa_w	:= qt_trans_externa_w + 1;	
					qt_trans_externa_atend_w	:= qt_trans_externa_atend_w + 1;
					qt_trans_externa_temp_w := qt_trans_externa_temp_w+1;
					qt_trans_ext_entrada_w	:= qt_trans_ext_entrada_w + 1;
					qt_trans_ext_saida_w	:= qt_trans_ext_saida_w + 1;
				else
					qt_trans_interna_w	:= qt_trans_interna_w + 1;
					qt_trans_interna_atend_w	:= qt_trans_interna_atend_w + 1;
					qt_trans_interna_temp_w := qt_trans_interna_temp_w + 1;
					qt_trans_int_ent_w	:= qt_trans_int_ent_w + 1;							
					qt_trans_int_saida_w	:= qt_trans_int_saida_w + 1;							
				end if;
			end if;
			
			select	nextval('weis_ocup_hosp_p312_seq')
			into STRICT	nr_seq_atend_w
			;
			
			/* Gravar as informacoes referentes ao paciente que utilizou a unidade de atendimento */

			insert into weis_ocup_hosp_p312(
				nr_sequencia,
				dt_referencia,
				cd_estabelecimento,
				cd_setor_atendimento,
				cd_unidade_basica,
				cd_unidade_compl,
				nr_atendimento,
				qt_alta,
				qt_internacao,
				qt_evasao,
				qt_desistencia,
				qt_obito_hospitalar,
				qt_obito_institucional,
				qt_trans_interna,
				qt_trans_externa,
				qt_leito_dia,
				qt_ocupado,
				qt_paciente_dia,
				qt_obs_hospitalar,
				qt_leito_planejado,
				qt_leito_instalado,
				qt_leito_extra,
				qt_leito_vago,
				qt_leito_ocupado,
				qt_leito_bloqueado,
				qt_leito_desativado,
				ie_clinica,
				ds_clinica,
				cd_convenio)
			values (nr_seq_atend_w,
				dt_parametro_w,
				cd_estabelecimento_base_w,
				cd_setor_atendimento_w,
				cd_unidade_basica_w,
				cd_unidade_compl_w,
				nr_atendimento_w,
				qt_alta_atend_w,
				qt_internacao_atend_w,
				qt_evasao_atend_w,
				qt_desistencia_atend_w,
				qt_obito_hospitalar_atend_w,
				qt_obito_institucional_atend_w,
				qt_trans_interna_atend_w,
				qt_trans_externa_atend_w,
				qt_leito_dia_Atend_w,
				qt_ocupado_w,
				qt_paciente_dia_atend_w,
				qt_obs_hospitalar_atend_w,
				qt_leito_planejado_w,
				qt_leito_instalado_w,
				qt_leito_extra_w,
				0, --qt_leito_vago_w,
				0, --qt_leito_ocupado_w
				0, --qt_leito_bloqueado_w
				0, --qt_leito_desativado_w
				ie_clinica_w,
				ds_clinica_w,
				cd_convenio_w);
				
			select	coalesce(max(nr_sequencia),0) + 1
			into STRICT	nr_seq_ocup_hosp_adic_w
			from	eis_ocup_hosp_adic_p312;

			insert into eis_ocup_hosp_adic_p312(
				nr_sequencia,
				nr_seq_eisp312,
				cd_setor_atendimento,
				cd_unidade_basica,
				cd_unidade_compl,
				cd_estabelecimento,
				nr_atendimento,
				cd_motivo_alta)
			values (nr_seq_ocup_hosp_adic_w,
				nr_seq_ocup_hosp_w,
				cd_setor_atendimento_w,
				cd_unidade_basica_w,
				cd_unidade_compl_w,
				cd_estabelecimento_base_w,
				nr_atendimento_w,
				cd_motivo_alta_w);

			ie_atend_unidade_w	:= 'S';
			ie_entrou_cursor_3 := 'S';
			
			end;
		end loop;
		close c03;
		
		if (ie_atend_unidade_w	= 'N') then
			/*Geracao de dados caso nao tenha entrado no cursor c03*/

			select	nextval('weis_ocup_hosp_p312_seq')
			into STRICT	nr_seq_atend_w
			;
		
			insert into weis_ocup_hosp_p312(
				nr_sequencia,
				dt_referencia,
				cd_estabelecimento,
				cd_setor_atendimento,
				cd_unidade_basica,
				cd_unidade_compl,
				nr_atendimento,
				qt_alta,
				qt_internacao,
				qt_evasao,
				qt_desistencia,
				qt_obito_hospitalar,
				qt_obito_institucional,
				qt_trans_interna,
				qt_trans_externa,
				qt_leito_dia,
				qt_ocupado,
				qt_paciente_dia,
				qt_obs_hospitalar,
				qt_leito_planejado,
				qt_leito_instalado,
				qt_leito_extra,
				qt_leito_vago,
				qt_leito_ocupado,
				qt_leito_bloqueado,
				qt_leito_desativado,
				ie_clinica)
			values (nr_seq_atend_w,
				dt_parametro_w,
				cd_estabelecimento_base_w,
				cd_setor_atendimento_w,
				cd_unidade_basica_w,
				cd_unidade_compl_w,
				null,
				0,
				qt_internacao_w,
				qt_evasao_w,
				qt_desistencia_w,
				qt_obito_hospitalar_w,
				qt_obito_institucional_w,
				qt_trans_interna_w,
				qt_trans_externa_w,
				qt_leito_dia_Atend_w,
				qt_ocupado_w,
				qt_paciente_dia_w,
				qt_obs_hospitalar_w,
				qt_leito_planejado_w,
				qt_leito_instalado_w,
				qt_leito_extra_w,
				qt_leito_vago_w,
				qt_leito_ocupado_w,
				qt_leito_bloqueado_w,
				qt_leito_desativado_w,
				'');

		end if;
		
		select	max(obter_desc_tipo_acomodacao(coalesce(cd_tipo_acomodacao_w,cd_tipo_acomodacao_unidade_w)))
		into STRICT	ds_tipo_acomodacao_w
		;
		
		if (ie_entrou_cursor_3 = 'S') then
			/*Insere os dados gerais das unidades, a contabilizacao total
			As variaveis inseridas aqui nao podem ser limpas dentro do c03*/
			
			--Ajustes de dados de setor e do c02 que podem duplicar dentro do c03
			update 	weis_ocup_hosp_p312
			set	qt_leito_planejado	= qt_leito_planejado_w,
				qt_leito_instalado	= qt_leito_instalado_w,
				qt_leito_extra		= qt_leito_extra_w,
				qt_leito_bloqueado 	= qt_leito_bloqueado_w,
				qt_leito_vago 		= qt_leito_vago_w,
				qt_leito_ocupado 	= qt_leito_ocupado_w,
				qt_leito_desativado = qt_leito_desativado_w
				where nr_sequencia 	= nr_seq_atend_w;
			
			update	eis_ocupacao_hospitalar_p312
			set	qt_internacao			= qt_internacao_w,
				qt_alta					= qt_alta_w,
				qt_evasao				= qt_evasao_w,
				qt_desistencia			= qt_desistencia_w,
				qt_obito_hospitalar		= qt_obito_hospitalar_w,
				qt_obito_institucional	= qt_obito_institucional_w,
				qt_trans_interna	 	= qt_trans_interna_w,
				qt_trans_externa	 	= qt_trans_externa_w,
				qt_paciente_dia		 	= qt_paciente_dia_w,
				qt_obs_hospitalar	 	= qt_obs_hospitalar_w,
				cd_convenio			 	= cd_convenio_w,
				ie_clinica			 	= ie_clinica_w,			
				cd_tipo_acomodacao	 	= coalesce(cd_tipo_acomodacao_w,cd_tipo_acomodacao_unidade_w),
				ds_estabelecimento   	= ds_estabelecimento_base_w,
				cd_empresa			 	= cd_empresa_w,
				ds_setor_atendimento 	= ds_setor_atendimento_w,
				ds_convenio				= ds_convenio_w,
				ie_classif_setor		= cd_classif_setor_w,
				ie_obito_institucional	= ie_obito_institucional_w,
				ds_clinica				= ds_clinica_w,
				cd_agrupamento			= nr_seq_agrupamento_w,
				ds_tipo_acomodacao		= ds_tipo_acomodacao_w,
				ds_agrupamento			= ds_agrupamento_w,
				qt_trans_int_entrada	= qt_trans_int_ent_w,
				qt_trans_int_saida		= qt_trans_int_saida_w,
				qt_trans_ext_entrada	= qt_trans_ext_entrada_w,
				qt_trans_ext_saida		= qt_trans_ext_saida_w,
				dt_entrada				= dt_entrada_w,
				dt_alta					= dt_alta_w
			where	nr_sequencia		= nr_seq_ocup_hosp_w;
		end if;

		end;
	end if;
	end;
end loop;
close c01;

commit;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_eis_ocup_hosp_p312 (dt_parametro_p timestamp, cd_estabelecimento_p bigint) FROM PUBLIC;

