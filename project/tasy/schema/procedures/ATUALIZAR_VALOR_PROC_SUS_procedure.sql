-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_valor_proc_sus ( nr_interno_conta_p bigint) AS $body$
DECLARE




nr_sequencia_w		bigint;
vl_procedimento_w		double precision;
vl_participante_w		double precision;
vl_medico_conta_w		double precision;
vl_medico_w			double precision;
vl_materiais_w			double precision;
vl_custo_operacional_w		double precision;
ie_calcula_honorario_w		varchar(1)	:= 'S';
ie_conta_honorario_w		varchar(1);
vl_participante_conta_w		double precision;
ie_calcula_honorario_partic_w	varchar(1)	:= 'S';
ie_conta_honorario_partic_w	varchar(1);

c01 CURSOR FOR
	SELECT 		a.nr_sequencia,
			coalesce(a.vl_medico,0) vl_medico,
			coalesce(a.vl_materiais,0) vl_materiais,
			coalesce(a.vl_custo_operacional,0) vl_custo_operacional,
			b.ie_entra_conta,
			b.ie_calcula_valor,
			coalesce(a.vl_procedimento,0) vl_procedimento
	from		regra_honorario b,
			procedimento_paciente a
	where		nr_interno_conta	= nr_interno_conta_p
	and		coalesce(cd_motivo_exc_conta::text, '') = ''
	and		a.ie_responsavel_credito = b.cd_regra;

type 		fetch_array is table of c01%rowtype;
a_array 	fetch_array;
a		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w			vetor;

C02 CURSOR FOR
	SELECT		nr_sequencia,
			coalesce(vl_medico,0) +
			coalesce(vl_auxiliares,0) +
			coalesce(vl_anestesista,0) +
			coalesce(vl_materiais,0) +
			coalesce(vl_custo_operacional,0) vl_procedimento
	from		procedimento_paciente
	where		nr_interno_conta	= nr_interno_conta_p
	and		coalesce(cd_motivo_exc_conta::text, '') = ''
	and		coalesce(ie_responsavel_credito::text, '') = '';

type 		fetch_array2 is table of c02%rowtype;
b_array 	fetch_array2;
b		integer := 1;
type vetor2 is table of fetch_array2 index by integer;
vetor_c02_w			vetor2;

c03 CURSOR FOR
	SELECT 		coalesce(sum(a.vl_participante),0) vl_participante,
			b.ie_entra_conta,
			b.ie_calcula_valor
	from		regra_honorario b,
			procedimento_participante a
	where		a.nr_sequencia	= nr_sequencia_w
	and		a.ie_responsavel_credito = b.cd_regra
	group by		b.ie_entra_conta,
			b.ie_calcula_valor;

C04 CURSOR FOR
	SELECT		coalesce(sum(a.vl_participante),0) vl_participante
	from		procedimento_participante a
	where		a.nr_sequencia	= nr_sequencia_w
	and		coalesce(a.ie_responsavel_credito::text, '') = '';
BEGIN

open c01;
loop
fetch c01 bulk collect into a_array limit 100000;
	vetor_c01_w(a) := a_array;
	a := a + 1;
EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

for i in 1..vetor_c01_w.count loop
	begin
	a_array := vetor_c01_w(i);
	for z in 1..a_array.count loop
		begin

		nr_sequencia_w			:= a_array[z].nr_sequencia;
		vl_medico_w			:= a_array[z].vl_medico;
		vl_materiais_w			:= a_array[z].vl_materiais;
		vl_custo_operacional_w		:= a_array[z].vl_custo_operacional;
		ie_conta_honorario_w		:= a_array[z].ie_entra_conta;
		ie_calcula_honorario_w		:= a_array[z].ie_calcula_valor;
		vl_procedimento_w		:= a_array[z].vl_procedimento;

		vl_medico_conta_w	:= 0;
		vl_participante_conta_w := 0;

		if (ie_conta_honorario_w 		= 'S') 	then
			vl_medico_conta_w 		:= vl_medico_w;
		end if;
		if (ie_conta_honorario_w		= 'T') 	then
			vl_procedimento_w		:= 0;
		elsif (vl_custo_operacional_w	<> 0) or (vl_medico_w 		<> 0) or (vl_materiais_w		<> 0)  then
			vl_procedimento_w	:= 	(vl_custo_operacional_w  + vl_medico_conta_w + vl_materiais_w);
		end if;

		open C03;
		loop
		fetch C03 into
			vl_participante_w,
			ie_conta_honorario_partic_w,
			ie_calcula_honorario_partic_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			if (ie_conta_honorario_partic_w	= 'S') 	then
			vl_participante_conta_w 	:= vl_participante_conta_w + vl_participante_w;
			end if;
			end;
		end loop;
		close C03;

		open C04;
		loop
		fetch C04 into
			vl_participante_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			vl_participante_conta_w 	:= vl_participante_conta_w + vl_participante_w;
			end;
		end loop;
		close C04;

		update	procedimento_paciente
		set	vl_procedimento		= vl_procedimento_w + vl_participante_conta_w
		where	nr_sequencia 		= nr_sequencia_w;

		end;
	end loop;
	end;
end loop;

open c02;
loop
fetch c02 bulk collect into b_array limit 100000;
	vetor_c02_w(b) := b_array;
	b := b + 1;
EXIT WHEN NOT FOUND; /* apply on c02 */
end loop;
close c02;

for j in 1..vetor_c02_w.count loop
	begin
	b_array := vetor_c02_w(j);
	for x in 1..b_array.count loop
		begin

		nr_sequencia_w		:= b_array[x].nr_sequencia;
		vl_procedimento_w	:= b_array[x].vl_procedimento;

		vl_participante_conta_w := 0;

		open C03;
		loop
		fetch C03 into
			vl_participante_w,
			ie_conta_honorario_partic_w,
			ie_calcula_honorario_partic_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			if (ie_conta_honorario_partic_w	= 'S') 	then
			vl_participante_conta_w 	:= vl_participante_conta_w + vl_participante_w;
			end if;
			end;
		end loop;
		close C03;

		open C04;
		loop
		fetch C04 into
			vl_participante_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			vl_participante_conta_w 	:= vl_participante_conta_w + vl_participante_w;
			end;
		end loop;
		close C04;

		update	procedimento_paciente
		set	vl_procedimento	= vl_procedimento_w + vl_participante_conta_w
		where	nr_sequencia 		= nr_sequencia_w;

		end;
	end loop;
	end;
end loop;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_valor_proc_sus ( nr_interno_conta_p bigint) FROM PUBLIC;

