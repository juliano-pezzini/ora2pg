-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gqa_liberacao_sinal_vital (( nr_sequencia_p bigint, nm_usuario_p text, nr_regras_atendidas_p out text, nr_atendimento_p bigint default null, nr_restrigir_regras_p text default null, qt_horas_retroativa_p bigint default 0) is nr_seq_pend_regra_w bigint) AS $body$
BEGIN
	return;
	end;

	function get_result_sql(	ds_sql_p	varchar2) return;
	cursor_w		sql_pck.t_cursor;
	result_w			varchar2(4000);
	begin
	bind_w.delete;

	if (sql_contem_bind(ds_sql_p,':NR_ATENDIMENTO')) then
		bind_w := sql_pck.bind_variable(':NR_ATENDIMENTO', nr_atendimento_w, bind_w);
	end if;

	if (sql_contem_bind(ds_sql_p,':CD_PESSOA_FISICA')) then
		bind_w := sql_pck.bind_variable(':CD_PESSOA_FISICA', cd_pessoa_fisica_w, bind_w);
	end if;


    	if (sql_contem_bind(ds_sql_p,':NR_SEQUENCIA')) then
		bind_w := sql_pck.bind_variable(':NR_SEQUENCIA', nr_sequencia_p, bind_w);
	end if;

    	if (sql_contem_bind(ds_sql_p,':NR_SEQ_SINAL_VITAL')) then
		bind_w := sql_pck.bind_variable(':NR_SEQ_SINAL_VITAL', nr_sequencia_p, bind_w);
	end if;

	bind_w := sql_pck.executa_sql_cursor(ds_sql_p, bind_w);

	loop
	fetch cursor_w into result_w;
		EXIT WHEN NOT FOUND; /* apply on cursor_w */
	end loop;
	close cursor_w;

	return;
	end;

begin

ie_protocolo_assistencial_w := (nr_restrigir_regras_p IS NOT NULL AND nr_restrigir_regras_p::text <> '');

open C02;
loop
fetch C02 into
        nr_atendimento_w,
        cd_pessoa_fisica_w,
        cd_escala_dor_w,
        nr_seq_result_dor_w,
        nr_seq_atend_sinal_vital_w,
		unidade_medida_peso_w,
		unidade_medida_altura_w,
		ie_unid_med_o2_suplem_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin

	if (coalesce(cd_setor_atendimento_w::text, '') = '') then
		cd_setor_atendimento_w		:= obter_setor_atendimento(nr_atendimento_w);
		qt_idade_w		        := obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A');
		qt_idade_dias_w		    	:= obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'DIA');
		qt_peso_gramas_w		:= (coalesce(obter_peso_pf(cd_pessoa_fisica_w),0) * 1000);
	end if;

	open C01;
	loop
	fetch C01 into	
		nr_seq_pend_regra_w,
		vl_minimo_w,
		vl_maximo_w,
		nr_seq_sinal_vital_w,
		nm_atributo_w,
		ie_informacao_w,
		ds_sql_w,
		ie_opcao_informacao_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		ie_atende_regra_w	:= false;

		if (ie_opcao_informacao_w	= 'SV') then

			VitalSignSQL := ' select nvl(' || nm_atributo_w || ',0) '||
					' from   atendimento_sinal_vital '||
					' where  nr_sequencia = :nr_sequencia ';

			EXECUTE VitalSignSQL
			into STRICT   vl_atributo_w
			using   nr_seq_atend_sinal_vital_w;

			ie_atende_regra_w:= 	(vl_atributo_w	<> 0) and (vl_atributo_w >= vl_minimo_w) and (vl_atributo_w	<= vl_maximo_w);

		elsif (ie_opcao_informacao_w	= 'SQL') and (ds_sql_w IS NOT NULL AND ds_sql_w::text <> '') then

			begin
				ds_retorno_sql_w	:= get_result_sql(ds_sql_w);
			exception
			when others then
				ds_retorno_sql_w	:= null;
			end;

			if (ds_retorno_sql_w IS NOT NULL AND ds_retorno_sql_w::text <> '') then
				if (position(',' in ie_informacao_w) = 0) then
					ie_atende_regra_w	:= (ie_informacao_w = ds_retorno_sql_w);
				else
					ie_atende_regra_w	:= (obter_se_contido_char(ds_retorno_sql_w,ie_informacao_w) = 'S');
				end if;
			end if;
		end if;	

		if (ie_atende_regra_w) then

			ie_restricao_complementar_w	:= GQA_regra_complementar(nm_usuario_p, nr_atendimento_w, nr_seq_pend_regra_w);

			if (ie_restricao_complementar_w = 'X') then

				if (ie_protocolo_assistencial_w) then
					if (nr_regras_atendidas_p IS NOT NULL AND nr_regras_atendidas_p::text <> '') then
						nr_regras_atendidas_p := nr_regras_atendidas_p || ',';
					end if;

					nr_regras_atendidas_p := nr_regras_atendidas_p || nr_seq_pend_regra_w;

				else
					select	nextval('gqa_pendencia_pac_seq')
					into STRICT	nr_sequencia_w
					;

					insert into gqa_pendencia_pac(	nr_sequencia,
						    dt_atualizacao,
						    nm_usuario,
						    dt_atualizacao_nrec,
						    nm_usuario_nrec,
						    cd_pessoa_fisica,
						    nr_atendimento,
						    nr_seq_sinal_vital,
						    nr_seq_pend_regra)
					values (    nr_sequencia_w,
						    clock_timestamp(),
						    nm_usuario_p,
						    clock_timestamp(),
						    nm_usuario_p,
						    cd_pessoa_fisica_w,
						    nr_atendimento_w,
						    nr_sequencia_p,
						    nr_seq_pend_regra_w);
					commit;

					RAISE NOTICE '%', nr_sequencia_w;
					unidade_medida_w := obter_unid_medida_sv(nm_atributo_w, unidade_medida_peso_w, unidade_medida_altura_w, ie_unid_med_o2_suplem_w);
					CALL gerar_consulta_reg_mentor(nm_usuario_p, 'ATENDIMENTO_SINAL_VITAL', nr_seq_pend_regra_w, nr_sequencia_p, nr_sequencia_w, vl_atributo_w, nm_atributo_w, unidade_medida_w);
					CALL gqa_gerar_acao_regra(nr_seq_pend_regra_w,nr_sequencia_w,nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_p);
				end if;
			end if;
		end if;
        end;
    end loop;
    close C01;
    CALL calculo_sinal_vital(nm_usuario_p, nr_atendimento_w);
end;
end loop;
close C02;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gqa_liberacao_sinal_vital (( nr_sequencia_p bigint, nm_usuario_p text, nr_regras_atendidas_p out text, nr_atendimento_p bigint default null, nr_restrigir_regras_p text default null, qt_horas_retroativa_p bigint default 0) is nr_seq_pend_regra_w bigint) FROM PUBLIC;

