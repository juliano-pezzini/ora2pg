-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consiste_idade_pac_agexame ( cd_agenda_p bigint, dt_agenda_p timestamp, qt_idade_p bigint, cd_pessoa_fisica_p text, ds_erro_p INOUT text, nm_usuario_p text, ie_dia_semana_p bigint default null) AS $body$
DECLARE


ie_dia_semana_w				integer;
qt_idade_min_w				bigint;
qt_idade_max_w				bigint;
ds_erro_w				varchar(255) 	:= '';
dt_nascimento_w				timestamp;
ie_consiste_idademin_zero_w		varchar(1)	:= 'N';
ie_cons_idade_pac_zerada_w		varchar(1)	:= 'N';
nr_seq_turno_esp_w			bigint;


BEGIN

ie_consiste_idademin_zero_w := obter_param_usuario(820, 392, Obter_Perfil_Ativo, nm_usuario_p, 0, ie_consiste_idademin_zero_w);
ie_cons_idade_pac_zerada_w := obter_param_usuario(820, 393, Obter_Perfil_Ativo, nm_usuario_p, 0, ie_cons_idade_pac_zerada_w);
/*
select	max(dt_nascimento)
into	dt_nascimento_w
from	pessoa_fisica
where	cd_pessoa_fisica	= cd_pessoa_fisica_p;
*/
if (coalesce(ie_dia_semana_p, 0) > 0) then
	ie_dia_semana_w := ie_dia_semana_p;
else
	ie_dia_semana_w := pkg_date_utils.get_WeekDay(dt_agenda_p);
end if;

select	coalesce(max(qt_idade_min),0),
	coalesce(max(qt_idade_max),0)
into STRICT	qt_idade_min_w,
	qt_idade_max_w
from	agenda_horario
where	cd_agenda	= cd_agenda_p
and	((dt_dia_semana	= ie_dia_semana_w) or ((dt_dia_semana = 9) and (pkg_date_utils.IS_BUSINESS_DAY(dt_agenda_p) = 1)))
and	to_date('01/01/1899 ' || to_char(hr_inicial, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <=
	to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
and	to_date('01/01/1899 ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >=
	to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
and	((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_agenda_p)))
and	((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_agenda_p)));

if	((((qt_idade_min_w > 0) or (ie_consiste_idademin_zero_w = 'S' AND qt_idade_min_w = 0)) or (qt_idade_max_w > 0)) and
	((qt_idade_p > 0) or
	((qt_idade_p = 0) and (ie_cons_idade_pac_zerada_w = 'S') and (qt_idade_min_w > 0)))) and
	((qt_idade_min_w <> 0) or (qt_idade_max_w <> 0)) then
	begin

	if (qt_idade_min_w > qt_idade_p) or
		(qt_idade_p = 0 AND qt_idade_min_w = 0) and (coalesce(ds_erro_w::text, '') = '') then
		ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277649,null);
	end if;

	if (qt_idade_max_w < qt_idade_p) and (coalesce(ds_erro_w::text, '') = '')	then
		ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277651,null);
	end if;

	end;
end if;

if (qt_idade_min_w = 0) and (qt_idade_max_w = 0) then
	begin

	select	coalesce(max(qt_idade_min),0),
		coalesce(max(qt_idade_max),0)
	into STRICT	qt_idade_min_w,
		qt_idade_max_w
	from	agenda_horario
	where	cd_agenda	= cd_agenda_p
	and	dt_dia_semana	= 9
	and	to_date('01/01/1899 ' || to_char(hr_inicial, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') <=
		to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
	and	to_date('01/01/1899 ' || to_char(hr_final, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss') >=
		to_date('01/01/1899 ' || to_char(dt_agenda_p, 'hh24:mi:ss'), 'dd/mm/yyyy hh24:mi:ss')
	and	((coalesce(dt_inicio_vigencia::text, '') = '') or (trunc(dt_inicio_vigencia) <= trunc(dt_agenda_p)))
	and	((coalesce(dt_final_vigencia::text, '') = '') or (trunc(dt_final_vigencia) >= trunc(dt_agenda_p)));

	if	((((qt_idade_min_w > 0) or (ie_consiste_idademin_zero_w = 'S' AND qt_idade_min_w = 0)) or (qt_idade_max_w > 0)) and
		((qt_idade_p > 0) or
		((qt_idade_p = 0) and (ie_cons_idade_pac_zerada_w = 'S') and (qt_idade_min_w > 0)))) and
		((qt_idade_min_w <> 0) or (qt_idade_max_w <> 0)) then
		begin

		if (qt_idade_min_w > qt_idade_p) or
			(qt_idade_p = 0 AND qt_idade_min_w = 0) and (coalesce(ds_erro_w::text, '') = '') then
			ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277649,null);
		end if;

		if (qt_idade_max_w < qt_idade_p) and (coalesce(ds_erro_w::text, '') = '')then
			ds_erro_w	:= ds_erro_w || WHEB_MENSAGEM_PCK.get_texto(277651,null);
		end if;

		end;
	end if;

	end;
end if;

if (coalesce(ds_erro_w::text, '') = '')then
	 ds_erro_w := consiste_idade_tur_esp(cd_agenda_p, dt_agenda_p, qt_idade_p, nm_usuario_p, ds_erro_w);
end if;

ds_erro_p	:= ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consiste_idade_pac_agexame ( cd_agenda_p bigint, dt_agenda_p timestamp, qt_idade_p bigint, cd_pessoa_fisica_p text, ds_erro_p INOUT text, nm_usuario_p text, ie_dia_semana_p bigint default null) FROM PUBLIC;

