-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_movimento_prestador ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_acao_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar as informacoes dos prestadores e de suas respectivas especialidades
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
	
	NaO ALTERAR SEM CONFERIR E ENTENDER O MANUAL DO PTU 4.1 B ou SUPERIOR
	
	AS INFORMAcoES GERADAS NESTA ROTINA
	DEVEM SER O REFLEXO DO QUE VAI SER APRESTADO NO ARQUIVO A400
	
S = SIM
N = NaO
NULL = BRANCO (Vazio)
-------------------------------------------------------------------------------------------------------------------

Referencias: MANUAL PTU 4.1 B - 5.0 - 6.0 - 6.2 - 6.3 - 7.0 - 8.0 - 8.1 - 10.0 - 11.0
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nm_prestador_w			varchar(255);
nm_fantasia_w			varchar(255);
nm_diretor_tecnico_w		varchar(255);
nm_adic_guia_medico_w		varchar(255);
cd_prestador_w			varchar(255);
cd_ans_w			varchar(255);
nr_inscricao_estadual_w		varchar(255);
ds_inscricao_estadual_w		varchar(255);
nr_cons_diretor_tecnico_w	varchar(255);
cd_cgc_w			varchar(255);
cd_cgc_cpf_w			varchar(255);
nr_cpf_w			varchar(255);
cd_pf_resp_tecnico_w		varchar(255);
ie_tipo_lote_w			varchar(255);
ds_sg_conselho_w		varchar(255);
cd_pessoa_fisica_w		varchar(255);
ie_prefixo_guia_medico_w	varchar(255);
ds_prefixo_w			varchar(255);
ie_instituicao_acred_ptu_w	varchar(255);
cd_especialidade_w		varchar(255);
cd_especialidade_tasy_w		varchar(255);
ie_publicacao_espec_w		varchar(255);
ie_publicacao_guia_w		varchar(255);
sg_uf_cons_diretor_tecnico_w	valor_dominio_v.vl_dominio%type;
ie_tipo_relacao_w		varchar(255);
ie_tipo_prestador_w		varchar(255);
ie_urgencia_emergencia_w	varchar(255)	:= 'N';
ie_tipo_contratualizacao_w	varchar(255)	:= null;
ie_tipo_vinculo_w		varchar(255);
ie_guia_medico_w		varchar(255);
ie_guia_med_espec_area_w	varchar(255);
uf_crm_w			valor_dominio_v.vl_dominio%type;
ie_categoria_dif_w		varchar(255);
ie_acidente_trabalho_w		varchar(255);
ie_tabela_propria_w		varchar(255);	
ie_prestador_alto_custo_w	varchar(255);
ie_rce_w			varchar(255);
ie_rce_atuacao_w		varchar(255);
ie_guia_medico_espec_w		varchar(255);
ie_guia_medico_atua_w		varchar(255);
ie_principal_w			varchar(255);
ie_particip_qualiss_w		varchar(255);
ie_notivisa_w			varchar(255);
ie_permite_prest_exc_a400_w	varchar(255)	:= 'S';
ie_especialidade_princ_w	varchar(255);
cd_especialidade_rce_w		varchar(255);
nr_crm_w			bigint;
ie_perfil_assis_ptu_w		bigint;
nr_seq_conselho_w		bigint;
nr_seq_tipo_prestador_w		bigint;
qt_registro_w			bigint	:= 0;
cd_estabelecimento_w		bigint;
nr_seq_prestador_ww		bigint;
nr_seq_prestador_w		bigint;
ie_seq_tipo_pres_w		bigint;
nr_seq_prioridade_w		bigint;
nr_seq_area_atuacao_w		bigint;
nr_seq_area_atuacao_rce_w	bigint;
ie_pf_w				bigint;
nr_seq_apres_w			bigint;
ie_nivel_acreditacao_ptu_w	bigint;
cd_espec_ptu_w			bigint;
cd_area_atuacao_ptu_w		bigint;
ie_tipo_produto_ptu_w		bigint;
ie_disponibilidade_serv_w	bigint;
ie_tipo_regulamentacao_ptu_w	bigint;
ie_tipo_classif_ptu_w		bigint;
ie_tipo_rede_min_ptu_w		bigint;
qt_espec_area_w			bigint := 0;
cd_espec_1_w			smallint;
cd_atua_1_w			smallint;
nr_registro_ans_w		integer;
indic_pos_grad_w		varchar(1);
nr_cbo_w			integer;
ie_residencia_saude_w		varchar(1);
indic_residencia_w		ptu_prestador.indic_residencia%type;
cd_unimed_prestadora_w		varchar(4);
ie_cadu_w			varchar(1);
ie_login_wsd_tiss_w		varchar(1);
ie_inativo_w			varchar(1);
ie_situacao_w			varchar(1);
sg_conselho_w			varchar(12);
nr_seq_cbo_saude_w		bigint;
ie_ind_ginec_obst_w		pls_prestador.ie_ind_ginec_obst%type;
ie_sexo_w			pessoa_fisica.ie_sexo%type;

nr_rce_espec_1_w		varchar(10);
nr_rce_atua_1_w			varchar(10);
nr_rce_espec_2_w		varchar(10);
nr_rce_atua_2_w			varchar(10);
ie_divulga_qualificacao_w	varchar(1);
ie_situacao_ptu_w		varchar(1);
tp_sexo_w			varchar(1);

dt_nascimento_w			timestamp;
dt_exclusao_w			timestamp;
dt_inicio_servico_w		timestamp;
dt_inicio_contrato_w		timestamp;
dt_cadastro_w			timestamp;
dt_referencia_w			timestamp;
ie_prestador_inativo_w		ptu_movimento_prestador.ie_prestador_inativo%type;
cd_interface_w			interface.cd_interface%type;
cd_unimed_destino_w		ptu_movimento_prestador.cd_unimed_destino%type;
nr_seq_congenere_w		pls_congenere.nr_sequencia%type;
cd_unimed_origem_w		ptu_movimento_prestador.nr_sequencia%type;
dt_atualizacao_cad_w		pls_prestador.dt_atualizacao%type;
cod_titulacao_1_w		ptu_prestador.cod_titulacao_1%type;
cod_titulacao_2_w		ptu_prestador.cod_titulacao_2%type;
cd_versao_w			varchar(255);

cd_titulacao_ptu_w		pls_prestador_med_espec.cd_titulacao_ptu%type;
nr_referencia_end_w		pls_prestador.nr_referencia_end%type;
qt_exclusao_w			integer;

ie_enviar_exclu_unica_vez_w	varchar(10) := 'N';

indic_resid_espec_w		ptu_prestador.indic_resid_espec_1%type;
indic_resid_atua_w		ptu_prestador.indic_resid_atua_1%type;
ie_intercambio_w		pls_prestador.ie_intercambio%type;
ie_doutorado_pos_w		pls_prestador.ie_doutorado_pos%type;
id_iso9001_w			ptu_prestador.id_iso9001%type;
indic_mestrado_w		ptu_prestador.indic_mestrado%type;
qt_iso9001_w			integer := 0;
ie_titulo_especialista_w	ptu_prestador.ie_titulo_especialista%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_tipo_prestador,
		coalesce(a.cd_prest_a400, a.cd_prestador),
		CASE WHEN a.ie_tipo_relacao='C' THEN  '1' WHEN a.ie_tipo_relacao='P' THEN  '2' WHEN a.ie_tipo_relacao='D' THEN  '3' WHEN a.ie_tipo_relacao='I' THEN  '3' END ,
		a.dt_cadastro,
		a.dt_exclusao,	
		a.ie_tipo_classif_ptu,
		coalesce(a.ie_prestador_alto_custo, 'N'),
		coalesce(a.ie_acidente_trabalho, 'N'),
		coalesce(a.ie_urgencia_emergencia, 'N'),
		a.dt_inicio_servico,
		a.dt_inicio_contrato,
		a.ie_tipo_regulamentacao_ptu,
		a.ie_guia_medico,
		a.ie_tipo_rede_min_ptu,
		a.cd_pessoa_fisica,
		a.cd_cgc,
		a.cd_estabelecimento,
		a.ie_tipo_produto_ptu,
		a.ie_instituicao_acred_ptu,
		a.ie_nivel_acreditacao_ptu,
		a.ie_particip_qualiss_ans,
		a.ie_notivisa,
		coalesce(a.ie_intercambio,'N'),
		coalesce(a.ie_residencia_saude,'N'),
		a.cd_unimed_prestadora,
		coalesce(a.ie_cadu,'N'),
		coalesce(a.ie_login_wsd_tiss,'N'),
		a.ie_situacao,
		a.sg_conselho,
		coalesce(a.ie_divulga_qualificacao,'N'),
		a.ie_situacao_ptu,
		a.ie_ind_ginec_obst,
		a.dt_atualizacao,
		a.nr_referencia_end,
		CASE WHEN coalesce(a.ie_doutorado_pos::text, '') = '' THEN 'N'  ELSE 'S' END ,
		coalesce(a.ie_mestrado,'N'),
		to_date(obter_dados_pf(a.cd_pessoa_fisica,'DN'),'dd/mm/yyyy')
	from	pls_prestador	a
	where	((a.ie_situacao	= 'A' AND ie_prestador_inativo_w = 'N') or (ie_prestador_inativo_w = 'S'))
	and	((a.ie_ptu_a400	= 'S' and ie_tipo_lote_w = 'PTU') or (a.ie_guia_medico = 'S' and ie_tipo_lote_w = 'GUIA'))
	and	a.ie_tipo_relacao <> 'F' -- Fornecedor
	and	((ie_permite_prest_exc_a400_w = 'S') or (coalesce(a.dt_exclusao::text, '') = ''))
	order by
		a.nr_sequencia;
	
C02 CURSOR FOR
	SELECT	d.cd_especialidade,
		CASE WHEN coalesce(c.nr_rqe::text, '') = '' THEN coalesce(b.ie_rqe_espec, 'N')  ELSE 'S' END ,
		b.nr_seq_area_atuacao,
		b.ie_publicacao,
		CASE WHEN substr(pls_obter_rce_area_atuacao(b.cd_pessoa_fisica,b.nr_seq_area_atuacao),1,20) IS NULL THEN coalesce(b.ie_rce_atuacao, 'N')  ELSE 'S' END ,
		c.nr_seq_prioridade,
		b.ie_publicacao_arq_guia,
		b.ie_especialidade_princ,
		d.cd_especialidade,
		b.cd_titulacao_ptu
	from	especialidade_medica	d,
		medico_especialidade	c,
		pls_prestador_med_espec	b,
		pls_prestador		a
	where	a.nr_sequencia		= nr_seq_prestador_w
	and	a.nr_sequencia		= b.nr_seq_prestador
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	b.cd_especialidade	= c.cd_especialidade
	and	b.cd_pessoa_fisica	= c.cd_pessoa_fisica
	and	c.cd_especialidade	= d.cd_especialidade
	and	(b.ie_publicacao <> 'NP' AND b.ie_publicacao IS NOT NULL AND b.ie_publicacao::text <> '')
	and	ie_tipo_lote_w		= 'PTU'
	and	(a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '')
	and	dt_referencia_w between trunc(coalesce(b.dt_inicio_vigencia, dt_referencia_w)) and fim_dia(coalesce(b.dt_fim_vigencia, dt_referencia_w))
	
union

	SELECT	d.cd_especialidade,
		CASE WHEN coalesce(c.nr_rqe::text, '') = '' THEN coalesce(b.ie_rqe_espec, 'N')  ELSE 'S' END ,
		e.nr_seq_area_atuacao,
		b.ie_publicacao,
		CASE WHEN substr(pls_obter_rce_area_atuacao(b.cd_pessoa_fisica,e.nr_seq_area_atuacao), 1, 20) IS NULL THEN coalesce(e.ie_rce_atuacao, 'N')  ELSE 'S' END ,
		c.nr_seq_prioridade,
		b.ie_publicacao_arq_guia,
		b.ie_especialidade_princ,
		d.cd_especialidade,
		b.cd_titulacao_ptu
	from	pls_prest_med_espec_adic e,
		especialidade_medica	d,
		medico_especialidade	c, 
		pls_prestador_med_espec	b,
		pls_prestador		a
	where	a.nr_sequencia		= nr_seq_prestador_w
	and	a.nr_sequencia		= b.nr_seq_prestador
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	b.cd_especialidade	= c.cd_especialidade
	and	b.cd_pessoa_fisica	= c.cd_pessoa_fisica
	and	c.cd_especialidade	= d.cd_especialidade
	and	b.nr_sequencia		= e.nr_seq_prest_med_espec
	and	(b.ie_publicacao <> 'NP' AND b.ie_publicacao IS NOT NULL AND b.ie_publicacao::text <> '')
	and	ie_tipo_lote_w		= 'PTU'
	and	(a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '')
	and	dt_referencia_w between trunc(coalesce(b.dt_inicio_vigencia, dt_referencia_w)) and fim_dia(coalesce(b.dt_fim_vigencia, dt_referencia_w))
	
union

	select	d.cd_especialidade,
		CASE WHEN coalesce(c.nr_rqe::text, '') = '' THEN coalesce(b.ie_rqe_espec,'N')  ELSE 'S' END ,
		b.nr_seq_area_atuacao,
		b.ie_publicacao_arq_guia,
		CASE WHEN substr(pls_obter_rce_area_atuacao(b.cd_pessoa_fisica,b.nr_seq_area_atuacao),1,20) IS NULL THEN coalesce(b.ie_rce_atuacao,'N')  ELSE 'S' END ,
		c.nr_seq_prioridade,
		b.ie_publicacao_arq_guia,
		b.ie_especialidade_princ,
		d.cd_especialidade,
		b.cd_titulacao_ptu
	from	especialidade_medica	d,
		medico_especialidade	c, 
		pls_prestador_med_espec	b,
		pls_prestador		a
	where	a.nr_sequencia		= nr_seq_prestador_w
	and	a.nr_sequencia		= b.nr_seq_prestador
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
	and	b.cd_especialidade	= c.cd_especialidade
	and	b.cd_pessoa_fisica	= c.cd_pessoa_fisica
	and	c.cd_especialidade	= d.cd_especialidade
	and	(b.ie_publicacao_arq_guia <> 'NP' AND b.ie_publicacao_arq_guia IS NOT NULL AND b.ie_publicacao_arq_guia::text <> '')
	and	ie_tipo_lote_w		= 'GUIA'
	and	(a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '')
	and	dt_referencia_w between trunc(coalesce(b.dt_inicio_vigencia, dt_referencia_w)) and fim_dia(coalesce(b.dt_fim_vigencia, dt_referencia_w))
	
union

	select	d.cd_especialidade,
		CASE WHEN coalesce(c.nr_rqe::text, '') = '' THEN coalesce(b.ie_rqe_espec, 'N')  ELSE 'S' END ,
		e.nr_seq_area_atuacao,
		b.ie_publicacao,
		CASE WHEN substr(pls_obter_rce_area_atuacao(b.cd_pessoa_fisica,e.nr_seq_area_atuacao), 1, 20) IS NULL THEN coalesce(e.ie_rce_atuacao, 'N')  ELSE 'S' END ,
		c.nr_seq_prioridade,
		b.ie_publicacao_arq_guia,
		b.ie_especialidade_princ,
		d.cd_especialidade,
		b.cd_titulacao_ptu
	from	pls_prest_med_espec_adic	e,
		especialidade_medica		d,
		medico_especialidade		c, 
		pls_prestador_med_espec		b,
		pls_prestador			a
	where	a.nr_sequencia			= nr_seq_prestador_w
	and	a.nr_sequencia			= b.nr_seq_prestador
	and	a.cd_pessoa_fisica		= b.cd_pessoa_fisica
	and	b.cd_especialidade		= c.cd_especialidade
	and	b.cd_pessoa_fisica		= c.cd_pessoa_fisica
	and	c.cd_especialidade		= d.cd_especialidade
	and	b.nr_sequencia			= e.nr_seq_prest_med_espec
	and	(b.ie_publicacao_arq_guia <> 'NP' AND b.ie_publicacao_arq_guia IS NOT NULL AND b.ie_publicacao_arq_guia::text <> '')
	and	ie_tipo_lote_w		= 'GUIA'
	and	(a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '')
	and	dt_referencia_w between trunc(coalesce(b.dt_inicio_vigencia, dt_referencia_w)) and fim_dia(coalesce(b.dt_fim_vigencia, dt_referencia_w))
	order by ie_especialidade_princ desc,
		 nr_seq_prioridade;


BEGIN

begin
select	coalesce(ie_permite_prest_exc_a400, 'S')
into STRICT	ie_permite_prest_exc_a400_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;
exception
when others then
	ie_permite_prest_exc_a400_w	:= 'S';	
end;

-- CD ANS 
select	max(cd_ans)
into STRICT	cd_ans_w
from	pls_outorgante
where	cd_estabelecimento	= cd_estabelecimento_p;	

-- Registro ANS
begin
select	somente_numero(substr(cd_ans_w,1,6))
into STRICT	nr_registro_ans_w
;
exception
when others then
	nr_registro_ans_w	:= null;	
end;

update	ptu_movimento_prestador
set	nr_registro_ans = CASE WHEN nr_registro_ans = NULL THEN nr_registro_ans_w  ELSE nr_registro_ans END ,
	id_ope_prest	= CASE WHEN id_ope_prest = NULL THEN 2  ELSE id_ope_prest END
where	nr_sequencia	= nr_seq_lote_p;

if (ie_acao_p = 'G') then
	select	max(ie_tipo_lote),
		max(a.dt_referencia),
		max(coalesce(a.ie_prestador_inativo,'N')),
		lpad(max(a.cd_unimed_destino),4,'0')
	into STRICT	ie_tipo_lote_w,
		dt_referencia_w,
		ie_prestador_inativo_w,
		cd_unimed_destino_w
	from	ptu_movimento_prestador a
	where	a.nr_sequencia	= nr_seq_lote_p;
	
	if (cd_unimed_destino_w IS NOT NULL AND cd_unimed_destino_w::text <> '') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_congenere_w
		from	pls_congenere
		where	cd_cooperativa = cd_unimed_destino_w;
	end if;

	cd_interface_w := pls_obter_interf_ptu( cd_estabelecimento_p, nr_seq_congenere_w, clock_timestamp(), 'A400');
	
	select	ptu_obter_versao_dominio('A400',cd_interface_w)
	into STRICT	cd_versao_w
	;
	
	open C01;
	loop
	fetch C01 into
		nr_seq_prestador_w,
		nr_seq_tipo_prestador_w,
		cd_prestador_w,
		ie_tipo_vinculo_w,
		dt_cadastro_w,
		dt_exclusao_w,
		ie_tipo_classif_ptu_w,
		ie_prestador_alto_custo_w,
		ie_acidente_trabalho_w,
		ie_urgencia_emergencia_w,
		dt_inicio_servico_w,
		dt_inicio_contrato_w,
		ie_tipo_regulamentacao_ptu_w,
		ie_guia_medico_w,
		ie_tipo_rede_min_ptu_w,
		cd_pessoa_fisica_w,
		cd_cgc_w,
		cd_estabelecimento_w,
		ie_tipo_produto_ptu_w,
		ie_instituicao_acred_ptu_w,
		ie_nivel_acreditacao_ptu_w,
		ie_particip_qualiss_w,
		ie_notivisa_w,
		ie_intercambio_w,
		ie_residencia_saude_w,
		cd_unimed_prestadora_w,
		ie_cadu_w,
		ie_login_wsd_tiss_w,
		ie_situacao_w,
		sg_conselho_w,
		ie_divulga_qualificacao_w,
		ie_situacao_ptu_w,
		ie_ind_ginec_obst_w,
		dt_atualizacao_cad_w,
		nr_referencia_end_w,
		ie_doutorado_pos_w,
		indic_mestrado_w,
		dt_nascimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		nr_inscricao_estadual_w		:= null;
		ds_inscricao_estadual_w		:= null;
		nm_fantasia_w			:= null;
		nr_crm_w			:= null;
		uf_crm_w			:= null;
		ie_tipo_prestador_w		:= null;
		ie_tipo_contratualizacao_w	:= null;
		nr_seq_conselho_w		:= null;
		sg_uf_cons_diretor_tecnico_w	:= null;
		nr_cons_diretor_tecnico_w	:= null;
		cd_pf_resp_tecnico_w		:= null;
		nm_diretor_tecnico_w		:= null;
		ds_sg_conselho_w		:= null;
		indic_pos_grad_w		:= null;
		nr_cbo_w			:= null;
		ie_inativo_w			:= null;
		ie_sexo_w			:= null;
		indic_residencia_w		:= ie_residencia_saude_w;
		
		if (sg_conselho_w IS NOT NULL AND sg_conselho_w::text <> '') then
			select coalesce(max(a.cd_ptu),sg_conselho_w)
			into STRICT sg_conselho_w
			from conselho_profissional 	a
			where a.sg_conselho = sg_conselho_w;
		end if;
		
		-- Obrigatorio para TP_VINCULO=3 

		-- Quanto TP_ VINCULO = 1 e 2 prencher com branco 
		if (ie_tipo_vinculo_w <> '3') then
			dt_inicio_contrato_w := null;
		end if;
		
		if (nr_seq_tipo_prestador_w IS NOT NULL AND nr_seq_tipo_prestador_w::text <> '') then
			select	a.ie_tipo_ptu
			into STRICT	ie_tipo_prestador_w
			from	pls_tipo_prestador a
			where	a.nr_sequencia	= nr_seq_tipo_prestador_w;
		end if;
		
		if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			--------------------PESSOA FiSICA------------------------- 
			nr_cpf_w	:= substr(obter_cpf_pessoa_fisica(cd_pessoa_fisica_w), 1, 11);
		else
			-- -----------------PESSOA JURiDICA----------------------

			
			-- Numero da Inscricao Estadual 
			
			begin
			nr_inscricao_estadual_w	:= obter_somente_numero(substr(obter_dados_pf_pj(null, cd_cgc_w, 'IE'), 1, 20));
			exception
			when others then
				nr_inscricao_estadual_w	:= null;
			end;

			begin
			ds_inscricao_estadual_w	:= substr(obter_dados_pf_pj(null, cd_cgc_w, 'IE'), 1, 255);
			exception
			when others then
				ds_inscricao_estadual_w	:= null;
			end;
			
			if (ie_tipo_prestador_w not in ('01','05')) then		
				-- Nome Fantasia
				select	substr(nm_fantasia, 1, 60)
				into STRICT	nm_fantasia_w
				from	pessoa_juridica
				where	cd_cgc	   = cd_cgc_w;
				
				if (somente_numero(cd_versao_w) < 80) then
					nm_fantasia_w := substr(nm_fantasia_w,1,40);
				end if;	
			
				-- Responsavel Tecnico 
				select	cd_pf_resp_tecnico
				into STRICT	cd_pf_resp_tecnico_w
				from	pessoa_juridica
				where	cd_cgc	= cd_cgc_w;
				
				nm_diretor_tecnico_w	:= substr(obter_nome_pf(cd_pf_resp_tecnico_w), 1, 70);
				
				if (cd_pf_resp_tecnico_w IS NOT NULL AND cd_pf_resp_tecnico_w::text <> '') then
					select	substr(coalesce(a.uf_conselho, b.uf_crm),1,2),
						substr(coalesce(b.nr_crm,0),1,8),
						a.nr_seq_conselho
					into STRICT	sg_uf_cons_diretor_tecnico_w,
						nr_cons_diretor_tecnico_w,
						nr_seq_conselho_w
					FROM pessoa_fisica a
LEFT OUTER JOIN medico b ON (a.cd_pessoa_fisica = b.cd_pessoa_fisica)
WHERE a.cd_pessoa_fisica	= cd_pf_resp_tecnico_w;
				end if;
				
				-- Doutorado e Pos-Doutorado (somente obrigatorio para tipo 1 e 5)
				ie_doutorado_pos_w := null;
			end if;
		end if;
			
		if (ie_tipo_prestador_w	in ('01','05')) and (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			
			begin
			select	CASE WHEN coalesce(ie_sexo,'I')='I' THEN null  ELSE ie_sexo END
			into STRICT	ie_sexo_w
			from	pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
			exception
			when others then
				ie_sexo_w	:= null;
			end;
			
			-- Numero CRM e Unidade Federativa 
			begin
			nr_crm_w	:= substr(obter_dados_medico(cd_pessoa_fisica_w, 'CRM'), 1, 15);
			exception
			when others then
				nr_crm_w	:= null;
			end;
			
			begin
			uf_crm_w	:= substr(obter_dados_medico(cd_pessoa_fisica_w, 'UFCRM'), 1, 2);
			exception
			when others then
				uf_crm_w	:= null;
			end;
			
			begin
			ds_sg_conselho_w	:= substr(obter_dados_medico(cd_pessoa_fisica_w, 'SGCRM'), 1, 10);
			exception
			when others then
				ds_sg_conselho_w	:= null;
			end;
			
			ie_guia_medico_w	:= coalesce(ie_guia_medico_w,'N');
			
			if (coalesce(sg_conselho_w::text, '') = '') then
				select	max(b.cd_ptu)
				into STRICT	sg_conselho_w
				from	pessoa_fisica	a,
					conselho_profissional b
				where	b.nr_sequencia		= a.nr_seq_conselho
				and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w;
			end if;
		end if;
		
		-- Nome Prestador
		select	trim(both max(a.nm_adic_guia_medico))
		into STRICT	nm_adic_guia_medico_w
		from	pls_prestador	a
		where	a.nr_sequencia	= nr_seq_prestador_w;
		
		if (nm_adic_guia_medico_w IS NOT NULL AND nm_adic_guia_medico_w::text <> '') then
			select	max(a.ie_prefixo_guia_medico)
			into STRICT	ie_prefixo_guia_medico_w
			from	pls_prestador	a
			where	a.nr_sequencia	= nr_seq_prestador_w;
			
			select	max(a.ds_valor_dominio)
			into STRICT	ds_prefixo_w
			from	valor_dominio_v	a
			where	a.cd_dominio	= 3868
			and	a.vl_dominio	= ie_prefixo_guia_medico_w;
			
			if (ds_prefixo_w IS NOT NULL AND ds_prefixo_w::text <> '') then
				ds_prefixo_w	:= ds_prefixo_w || ' ';
			else
				ds_prefixo_w	:= '';
			end if;
			
			nm_prestador_w	:= substr(ds_prefixo_w || nm_adic_guia_medico_w, 1, 70);
		else
			if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
				select	max(nm_pessoa_fisica)
				into STRICT	nm_prestador_w
				from	pessoa_fisica
				where	cd_pessoa_fisica = cd_pessoa_fisica_w;
				
			elsif (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
				select	substr(max(ds_razao_social),1,70)
				into STRICT	nm_prestador_w
				from	pessoa_juridica
				where	cd_cgc	= cd_cgc_w;
			end if;
		
			if (coalesce(trim(both nm_prestador_w)::text, '') = '') then
				nm_prestador_w	:= substr(pls_obter_dados_prestador(nr_seq_prestador_w, 'N'), 1, 70);
			end if;
		end if;
		
		-- Tipo de Contratualizacao 
		if (ie_tipo_vinculo_w = 3) then
			select	CASE WHEN ie_tipo_relacao='D' THEN  '1' WHEN ie_tipo_relacao='I' THEN  '2'  ELSE '' END
			into STRICT	ie_tipo_contratualizacao_w
			from	pls_prestador
			where	nr_sequencia	= nr_seq_prestador_w;
		end if;
		
		-- Urgencia / Emergencia (S,N) 
		if (ie_tipo_prestador_w not in ('02','04','10','11')) then	/* Dominio 3254 => 2 = 'Hospital' e 4 = 'Clinica' */
			ie_urgencia_emergencia_w	:= 'N';
		end if;
		
		if (ie_tipo_prestador_w = '12') then		/* Dominio 3254 => 12 = 'Pronto Socorro' */
			ie_urgencia_emergencia_w	:= 'S';
		end if;
		
		-- Tipo de Disponibilidade 
		if	(ie_tipo_prestador_w not in ('05')) then -- '01' retirado.. OS 515928
			select	ie_disponibilidade_serv
			into STRICT	ie_disponibilidade_serv_w
			from	pls_prestador
			where	nr_sequencia	= nr_seq_prestador_w;
		end if;
		
		-- Tabela Propria  e Perfil Assistencial 
		ie_perfil_assis_ptu_w		:= null;
		if (ie_tipo_prestador_w in ('02','10','11','12')) then
			select	ie_tabela_propria,
				ie_perfil_assis_ptu
			into STRICT	ie_tabela_propria_w,
				ie_perfil_assis_ptu_w
			from	pls_prestador
			where	nr_sequencia	= nr_seq_prestador_w;
		elsif (ie_tipo_prestador_w = '01') then
			ie_tabela_propria_w	:= 'N';
		else
			select	coalesce(ie_tabela_propria,'N')
			into STRICT	ie_tabela_propria_w
			from	pls_prestador
			where	nr_sequencia	= nr_seq_prestador_w;
		end if;
		
		-- PARTICIP_QUALISS_ANS - Regra: Mandatorio se TP_VINCULO = 2
		if (coalesce(ie_particip_qualiss_w::text, '') = '') and (ie_tipo_vinculo_w = 2) then
			ie_particip_qualiss_w := 'N';
		end if;
		
		-- Indicador de pos-graduacao com no minimo 360 h
		if (ie_tipo_prestador_w in ('05')) then
			select	coalesce(pls_obter_dados_prestador(nr_seq_prestador_w,'GP'),'N')
			into STRICT	indic_pos_grad_w
			;
		end if;
		
		nr_cbo_w := null;
		
		-- NR_CBO - Classificacao Brasileira de Ocupacoes
		if (ie_tipo_prestador_w in ('01','05')) then
			select	max(nr_seq_cbo_saude)
			into STRICT	nr_seq_cbo_saude_w
			from	pessoa_fisica
			where	cd_pessoa_fisica = cd_pessoa_fisica_w;
		
			if (nr_seq_cbo_saude_w IS NOT NULL AND nr_seq_cbo_saude_w::text <> '') then
				/*select	max(cd_cbo_ptu)
				into	nr_cbo_w
				from	cbo_saude
				where	nr_sequencia = nr_seq_cbo_saude_w;*/
				
				nr_cbo_w := pls_obter_cbo_saude_ptu( nr_seq_cbo_saude_w, null, 'A400', cd_interface_w);
			end if;
			
			if (coalesce(nr_cbo_w,0) = 0) then
				nr_cbo_w := 999999;
			end if;
		end if;	
		
		-- pego o codigo da unimed origem pois preciso verificar loga abaixo se a mesm e diferente da unimed prestador caso o ie_tipo_vinculo nao seja 1
		select	cd_unimed_origem
		into STRICT	cd_unimed_origem_w
		from	ptu_movimento_prestador
		where	nr_sequencia = nr_seq_lote_p;
		-- ID_CADU - Identifica se o prestador deve ser enviadopara o CADU

                -- Regra: ID_CADU deve ser informado "S" se TP_PREST=1 e TP_VINCULO=1 e "N" para qualquer outra opcao

                -- 28/05/2019 gfurlan OS 1814175
                if (ie_tipo_vinculo_w = 1 and ie_tipo_prestador_w = 1) then
                        ie_cadu_w := 'S';
                else
                        ie_cadu_w := 'N';
                end if;
		
		if (ie_tipo_prestador_w not in ('01')) then
			ie_residencia_saude_w	:= 'N'; -- Regra: Para TP_PREST = 1 devera assumir S ou N e para TP_PREST = 2, 3, 4, 5, 6, 7, 8, 10, 11 e 12 devera assumir sempre N
		end if;
		
		-- Obrigatorio somente quando TP_PREST = 5. Para os demais tipos de prestadores preencher com branco.
		if (ie_tipo_prestador_w not in ('05')) then
			indic_residencia_w := null;
		end if;
		
		ie_titulo_especialista_w := null;
		if	(ie_tipo_prestador_w in ('05')) then -- Se for '05' - Pessoa Fisica - Nao medico - Ja seta como 'Nao'
			ie_titulo_especialista_w := 'N';
		end if;
		
		ie_inativo_w := 'N';
		
		-- ID_INATIVO - Identifica se o prestador esta inativo
		if (ie_tipo_prestador_w = '01') and (ie_tipo_vinculo_w = 1) then	
			
			-- Regra: Utilizar S somente se TP_PREST=1 (Medico) e TP_VINCULO = 1 (cooperado)
			if (ie_situacao_ptu_w = 'I') then
				ie_inativo_w := 'S';
			
			elsif (ie_situacao_w = 'I') then
				ie_inativo_w := 'S';
			end if;
		end if;
		
		-- Nova Sequencia 
		select	nextval('ptu_prestador_seq')
		into STRICT	nr_seq_prestador_ww
		;
		
		-- CGC CPF 
		cd_cgc_cpf_w	:= coalesce(cd_cgc_w, nr_cpf_w);

		-- Diether - OS 290163 - Foi retirada esta consistencia  para que a mesma possa ser realizada no momento da consistencia do movimento ( Inconsistencia 55)

		-- Verificacao CRM Prestador medico  

		/*if	(ie_tipo_prestador_w = 1) and
			((ds_sg_conselho_w <> 'CRM') or (ds_sg_conselho_w is null)) then
			uf_crm_w	:= null;
			nr_crm_w	:= null;
			ie_tipo_prestador_w	:= '05';
		end if;*/
		
		if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
			select	count(1)
			into STRICT	qt_registro_w
			from	ptu_prestador
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	nr_seq_movimento	= nr_seq_lote_p;
		else
			qt_registro_w := 0;
		end if;
		
		-- Parametro 7 - so envia prestadores excluidos uma unica vez
		ie_enviar_exclu_unica_vez_w	:= coalesce(Obter_Valor_Param_Usuario(1323, 7, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p), 'N');
		
		-- se tiver parametro para enviar prestador excluido uma unica vez, realiza a contagem de exclusao do mesmo.
		if (ie_enviar_exclu_unica_vez_w = 'S') then
			select	count(1)
			into STRICT	qt_exclusao_w
			from	ptu_prestador a,
				pls_prestador b
			where	a.nr_seq_prestador 	= b.nr_sequencia
			and	b.nr_sequencia 		= nr_seq_prestador_w
			and	(b.dt_exclusao IS NOT NULL AND b.dt_exclusao::text <> '')
			and	b.ie_ptu_a400 		= 'S'
			and	a.nr_seq_movimento	<> nr_seq_lote_p
			and exists (	SELECT	1
					from	ptu_prestador_excl_subst x
					where	a.nr_sequencia		= x.nr_seq_prestador
					and	trunc(a.dt_exclusao)	= trunc(b.dt_exclusao));
		else
			-- senao marca como se nao tivesse excluido
			qt_exclusao_w := 0;
		end if;
		
		if (ie_tipo_prestador_w not in ('01','05')) then
			indic_mestrado_w := null; -- Regra: Obrigatorio somente quando TP_PREST = 1 ou 5
		end if;
		
		-- Se for abaixo da versao 8.1 
		if (somente_numero(cd_versao_w) < 81) then
			nr_crm_w 		:= substr(nr_crm_w,1,8); -- o numero do conselho tem que ser 8 caracteres
			nm_diretor_tecnico_w	:= substr(nm_diretor_tecnico_w,1,40); -- o nome do diretor tecnico tem que ser 40 caracteres
		end if;
		
		id_iso9001_w := 'N';
		-- Se for versao 8.1 ou superior gerar ISO9001
		if (somente_numero(cd_versao_w) >= 81) then
			select	count(1)
			into STRICT	qt_iso9001_w
			from	pls_prestador_qualif	q,
				pls_instituicao_acred	a,
				pls_atrib_qualif_prest	t
			where	a.nr_sequencia		= q.nr_seq_instituicao_acred
			and	t.nr_sequencia		= a.nr_seq_atrib_qualif_prest
			and	t.ie_atrib_qualif	= 'I' -- ISO9001
			and	q.nr_seq_prestador	= nr_seq_prestador_w
			and	dt_referencia_w between trunc(coalesce(q.dt_inicio_vigencia, dt_referencia_w)) and fim_dia(coalesce(q.dt_fim_vigencia, dt_referencia_w));
			
			if (qt_iso9001_w > 0) then
				id_iso9001_w := 'S';
			end if;
		end if;
		
		-- Regra: Obrigatorio se TP_PREST = 01 (Medico) e TP_VINCULO 1 = Cooperado 
		if (ie_tipo_prestador_w <> '01') or (ie_tipo_vinculo_w <> '1') then
			dt_nascimento_w := null;
		end if;
			
		if (qt_registro_w = 0) and (qt_exclusao_w = 0) then
			begin
			insert into ptu_prestador(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_prestador,
				nr_seq_movimento,
				ie_tipo_prestador, 
				nr_seq_prestador,
				cd_cgc_cpf,
				nm_prestador,
				ie_tipo_vinculo, 
				dt_inclusao,
				ie_tipo_classif_estab,
				ie_categoria_dif,
				ie_acidente_trabalho,
				ie_urgencia_emerg, 
				dt_inicio_servico,
				dt_inicio_contrato,
				nr_registro_ans, 
				nm_diretor_tecnico,
				nr_insc_estadual,
				ds_inscricao_estadual,
				nr_crm, 
				uf_crm,
				nm_fantasia,
				dt_exclusao, 
				ie_tipo_contratualizacao,
				ie_tabela_propria,
				ie_perfil_assistencial, 
				ie_tipo_produto,
				nr_seq_conselho,
				nr_cons_diretor_tecnico, 
				sg_uf_cons_diretor_tecnico,
				ie_tipo_rede_min,
				ie_tipo_disponibilidade, 
				ie_guia_medico,
				cd_pessoa_fisica,
				cd_cgc,
				ie_instituicao_acred_ptu,
				ie_nivel_acreditacao_ptu,
				ie_particip_qualiss_ans,
				ie_notivisa,
				cd_especialidade_tasy_1,
				cd_especialidade_tasy_2,
				cd_espec_1,
				cd_atua_1,
				cd_espec_2,
				cd_atua_2,
				id_rce_espec_1,
				id_rce_atua_1,
				id_rce_espec_2,
				id_rce_atua_2,
				id_guia_medico_espec_1,
				id_guia_medico_espec_2,
				id_guia_medico_atua_1,
				id_guia_medico_atua_2,
				nr_seq_apres_1,
				nr_seq_apres_2,
				nr_rce_espec_1,
				nr_rce_espec_2,
				nr_rce_2_espec_1,
				nr_rce_2_espec_2,
				nr_rce_atua_1,
				nr_rce_atua_2,
				nr_rce_2_atua_1,
				nr_rce_2_atua_2,
				indic_pos_grad,
				id_publica_ans,
				nr_cbo,
				indic_residencia,
				cd_uni_prestadora,
				id_cadu,
				id_login_wsd_tiss,
				id_inativo,
				sg_conselho,
				id_autoriz_divulga,
				ie_ind_ginec_obst,
				ie_sexo,
				dt_atualizacao_cad,
				cod_titulacao_1,
				cod_titulacao_2,
				nr_referencia_end,
				indic_resid_espec_1,
				indic_resid_espec_2,
				indic_resid_atua_1,
				indic_resid_atua_2,
				ie_doutorado_pos,
				id_iso9001,
				indic_mestrado,
				ie_titulo_especialista,
				dt_nascimento)
			values (nr_seq_prestador_ww,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_prestador_w,
				nr_seq_lote_p,
				ie_tipo_prestador_w,
				nr_seq_prestador_w,
				cd_cgc_cpf_w,
				nm_prestador_w,
				ie_tipo_vinculo_w,
				dt_cadastro_w,
				ie_tipo_classif_ptu_w,
				ie_prestador_alto_custo_w,
				ie_acidente_trabalho_w,
				ie_urgencia_emergencia_w,
				dt_inicio_servico_w,
				dt_inicio_contrato_w,
				cd_ans_w, 
				nm_diretor_tecnico_w,
				nr_inscricao_estadual_w,
				ds_inscricao_estadual_w,
				nr_crm_w,
				uf_crm_w,
				nm_fantasia_w,
				dt_exclusao_w,
				ie_tipo_contratualizacao_w,
				ie_tabela_propria_w,
				ie_perfil_assis_ptu_w,
				ie_tipo_produto_ptu_w,
				nr_seq_conselho_w,
				nr_cons_diretor_tecnico_w,
				sg_uf_cons_diretor_tecnico_w,
				ie_tipo_rede_min_ptu_w,
				ie_disponibilidade_serv_w,
				ie_guia_medico_w,
				cd_pessoa_fisica_w,
				cd_cgc_w,
				ie_instituicao_acred_ptu_w,
				ie_nivel_acreditacao_ptu_w,
				ie_particip_qualiss_w,
				ie_notivisa_w,
				null,
				null,
				0,
				0,
				0,
				0,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				0,
				indic_pos_grad_w,
				ie_intercambio_w,
				nr_cbo_w,
				indic_residencia_w,
				cd_unimed_prestadora_w,
				ie_cadu_w,
				ie_login_wsd_tiss_w,
				ie_inativo_w,
				sg_conselho_w,
				ie_divulga_qualificacao_w,
				ie_ind_ginec_obst_w,
				ie_sexo_w,
				dt_atualizacao_cad_w,
				0,
				0,
				nr_referencia_end_w,
				null,
				null,
				null,
				null,
				ie_doutorado_pos_w,
				id_iso9001_w,
				indic_mestrado_w,
				ie_titulo_especialista_w,
				dt_nascimento_w);
			exception
				when others then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(189035,'NR_SEQ_PRESTADOR=' || nr_seq_prestador_w || chr(13) || chr(10) || sqlerrm);
			end;
			
			-- Especialidades do Cooperado / AQUI PODE SER REALIZADO OS TRATAMENTOS PARA PRESTADOR TIPO "01"
			if (ie_tipo_prestador_w = '01') then
				ie_principal_w		:= 'S';
				qt_espec_area_w		:= 1;
				indic_resid_espec_w	:= ie_residencia_saude_w;
				indic_resid_atua_w	:= ie_residencia_saude_w;
				
				-- VERIFICA SE O COPERADO ESTA AUSENTE PARA O GUIA MEDICO
				if (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
					select	max(b.ie_guia_medico)
					into STRICT 	ie_guia_med_espec_area_w
					from	pls_cooperado_ausencia 		b,
						pls_cooperado 			c	
					where	b.nr_seq_cooperado		= c.nr_sequencia
					and	((clock_timestamp() between b.dt_inicio 	and b.dt_fim)
					or (coalesce(b.dt_fim::text, '') = '' and clock_timestamp() 	>= b.dt_inicio))
					and	c.cd_cgc 			= cd_cgc_w;
					
				elsif (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					select	max(b.ie_guia_medico)
					into STRICT 	ie_guia_med_espec_area_w
					from	pls_cooperado_ausencia 		b,
						pls_cooperado 			c	
					where	b.nr_seq_cooperado		= c.nr_sequencia
					and	((clock_timestamp() between b.dt_inicio 	and b.dt_fim)
					or (coalesce(b.dt_fim::text, '') = '' and clock_timestamp() 	>= b.dt_inicio))
					and	c.cd_pessoa_fisica		= cd_pessoa_fisica_w;
				end if;
				
				if (coalesce(ie_guia_med_espec_area_w::text, '') = '') then
					ie_guia_med_espec_area_w := 'S';
				end if;
				
				open C02;
				loop
				fetch C02 into	
					cd_especialidade_w,
					ie_rce_w,
					nr_seq_area_atuacao_w,
					ie_publicacao_espec_w,
					ie_rce_atuacao_w,
					nr_seq_prioridade_w,
					ie_publicacao_guia_w,
					ie_especialidade_princ_w,
					cd_especialidade_tasy_w,
					cd_titulacao_ptu_w;
				EXIT WHEN NOT FOUND or (qt_espec_area_w > 2);  /* apply on C02 */
					begin					
					ie_guia_medico_espec_w	:= 'N';
					ie_guia_medico_atua_w	:= 'N';
					indic_resid_espec_w	:= ie_residencia_saude_w;
					indic_resid_atua_w	:= ie_residencia_saude_w;
					
					-- Obter codigo de especialidade e area conforme ptu
					select	somente_numero(substr(max(a.cd_ptu), 1, 2))
					into STRICT	cd_espec_ptu_w
					from	especialidade_medica a
					where	a.cd_especialidade	= cd_especialidade_w;
					
					select	somente_numero(substr(max(a.cd_ptu),1,2))
					into STRICT	cd_area_atuacao_ptu_w
					from	area_atuacao_medica a
					where	a.nr_sequencia	= nr_seq_area_atuacao_w;

					if (ie_publicacao_guia_w = 'NP') then
						ie_guia_medico_espec_w	:= 'N';
						ie_guia_medico_atua_w	:= 'N';
						
					elsif (ie_publicacao_guia_w = 'PE') then
						ie_guia_medico_espec_w	:= 'S';
						ie_guia_medico_atua_w	:= 'N';
						
					elsif (ie_publicacao_guia_w = 'PDM') then
						ie_guia_medico_espec_w	:= 'N';
						ie_guia_medico_atua_w	:= 'N';
						
					elsif (ie_publicacao_guia_w = 'PA') then
						ie_guia_medico_espec_w	:= 'N';
						ie_guia_medico_atua_w	:= 'S';
						
					elsif (ie_publicacao_guia_w = 'PEA') then
						ie_guia_medico_espec_w	:= 'S';
						ie_guia_medico_atua_w	:= 'S';	
					else
						ie_guia_medico_espec_w	:= null;
						ie_guia_medico_atua_w	:= null;
					end if;
					
					if (ie_publicacao_espec_w IS NOT NULL AND ie_publicacao_espec_w::text <> '') then -- Verificar a forma de publicacao
						if (ie_publicacao_espec_w = 'PA') then -- Publica area de atuacao
							cd_espec_ptu_w		:= 0;
							cd_area_atuacao_ptu_w	:= cd_area_atuacao_ptu_w;
							ie_rce_w		:= null;
							ie_guia_medico_espec_w	:= null;
							indic_resid_espec_w	:= null;
							
						elsif (ie_publicacao_espec_w = 'PE') then -- Publica especialidade
							cd_espec_ptu_w		:= cd_espec_ptu_w;
							cd_area_atuacao_ptu_w 	:= 0;
							ie_rce_atuacao_w 	:= null;
							ie_guia_medico_atua_w	:= null;
							indic_resid_atua_w	:= null;
							
						elsif (ie_publicacao_espec_w = 'PEA') then -- Publica especialidade e area de atuacao 
							cd_espec_ptu_w		:= cd_espec_ptu_w;
							cd_area_atuacao_ptu_w	:= cd_area_atuacao_ptu_w;
							
						elsif (ie_publicacao_espec_w = 'PDM') then -- Publica como demais medicos cooperados
							cd_espec_ptu_w		:= 99;
							cd_area_atuacao_ptu_w	:= 0;
						end if;
					end if;
					
					--S=Sim 

					--N=Nao Regras: Mandatorio se CD_ESPEC_1 estiver preenchido e somente quando prestador for Medico (TP_PREST = 1). 

					--Para os demais tipos de prestadores e/ou se CD_ESPEC_1 = 00, preencher com branco; 

					--Esse campo devera ser preenchido com S somente quando existir residencia em saude reconhecida pelo MEC. 

					--Sera exibido o icone de residencia no Guia Medico
					if (ie_tipo_prestador_w not in ('01')) then
						indic_resid_espec_w	:= null;
						indic_resid_atua_w	:= null;
					end if;
					
					--	 ############ 	PRIMEIRA INFORMACAO DE ESPECIALIDADE / AREA ATUACAO	############
					if (qt_espec_area_w = 1) then
						if (ie_guia_med_espec_area_w = 'N') then
							ie_guia_medico_espec_w := 'N';
							ie_guia_medico_atua_w := 'N';
						end if;
					
						-- Mandatorio se CD_ESPEC_1 estiver preenchido e somente quando prestador for Medico (TP_PREST = 1).

						-- S=Sim N=Nao

						-- Para os demais tipos de prestadores e se CD_ESPEC_1 = 00, prencher com branco

						-- pg. 39 (Manual 4.1 B)
						if (cd_espec_ptu_w = 0) then
							ie_rce_w := null;
							indic_resid_espec_w := null;
						end if;
						
						-- Mandatorio se CD_ATUA_1 estiver preenchido e somente quando prestador for Medico (TP_PREST = 1).

						-- S=Sim N=Nao

						-- Quanto TP_PREST=2, 3, 4, 5, 6,7 e 8 e se CD_ATUA_1 = 00, prencher com branco

						-- pg. 39 (Manual 4.1 B)
						if (coalesce(cd_area_atuacao_ptu_w,0) = 0) then
							ie_rce_atuacao_w := null;
							indic_resid_atua_w := null;
						end if;
						
						-- Regra: Mandatorio se ID_RCE_ESPEC_1 = S

						-- Se CD_ESPEC_1 nao estiver informado, prencher com zeros

						-- pg. 42 (Manual 4.1 B)
						select	substr(max(nr_rqe),1,10)
						into STRICT	nr_rce_espec_1_w
						from	medico_especialidade a
						where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
						and	a.cd_especialidade	= cd_especialidade_w;
						
						if (coalesce(nr_rce_espec_1_w::text, '') = '') then
							select	max(a.cd_especialidade)
							into STRICT	cd_especialidade_rce_w
							from	especialidade_medica	a
							where	a.cd_ptu		= cd_espec_ptu_w
							and	a.cd_especialidade	<> cd_especialidade_w;
							
							if (cd_especialidade_rce_w IS NOT NULL AND cd_especialidade_rce_w::text <> '') then
								select	substr(max(nr_rqe),1,10)
								into STRICT	nr_rce_espec_1_w
								from	medico_especialidade a
								where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
								and	a.cd_especialidade	= cd_especialidade_rce_w;
							end if;
						end if;
						
						-- Regra: Mandatorio se ID_RCE_ATUA_1 = S

						-- Se CD_ATUA_1 nao estiver informado, prencher com zeros

						-- pg. 42 (Manual 4.1 B)
						select	substr(max(nr_rce),1,10)
						into STRICT	nr_rce_atua_1_w
						from	medico_area_atuacao a
						where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
						and	a.nr_seq_area_atuacao	= nr_seq_area_atuacao_w;
						
						if (coalesce(nr_rce_atua_1_w::text, '') = '') then
							select	max(b.nr_seq_area_atuacao)
							into STRICT	nr_seq_area_atuacao_rce_w
							from	pls_prest_med_espec_adic	b,
								pls_prestador_med_espec		a
							where	a.nr_sequencia			= b.nr_seq_prest_med_espec
							and	a.nr_seq_prestador		= nr_seq_prestador_w
							and	b.nr_seq_area_atuacao		= nr_seq_area_atuacao_w;
							
							if (coalesce(nr_seq_area_atuacao_rce_w::text, '') = '') then
								select	substr(max(nr_rce),1,10)
								into STRICT	nr_rce_atua_1_w
								from	medico_area_atuacao a
								where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
								and	a.nr_seq_area_atuacao	= nr_seq_area_atuacao_rce_w;
							end if;
						end if;
						
						cod_titulacao_1_w := coalesce(substr(coalesce(cd_titulacao_ptu_w,pls_obter_espec_ptu_tit_cert(cd_especialidade_w,cd_versao_w)),1,3),'0');
						
						if (cd_espec_ptu_w = 0) then
							nr_rce_espec_1_w := 0;	
							ie_guia_medico_espec_w := null;
							indic_resid_espec_w := null;
							cd_especialidade_w := null;
						end if;
						
						if (cd_area_atuacao_ptu_w = 0) then
							nr_rce_atua_1_w := 0;
							ie_guia_medico_atua_w := null;
							indic_resid_atua_w := null;
						end if;
						
						-- Obrigatorio somente quando TP_PREST = 5. Para os demais tipos de prestadores preencher com branco.
						if (ie_tipo_prestador_w in ('05')) and (somente_numero(nr_rce_espec_1_w) > 0) then
							ie_titulo_especialista_w := 'S';
						end if;
						
						-- Obs.: Nas seqs. 044, 045, 046 e 047, preenchimento obrigatorio para TP_PREST = 1. 

						-- Demais prestadores devem continuar a utilizar o campo ID_GUIA_MEDICO e deixar esses campos em branco.

						-- Regra: Preencher com branco quando nao houver informacao de especialidade ou area de atuacao correspondente.

						-- pg. 41 (Manual 4.1 B)
						update	ptu_prestador
						set	cd_especialidade_tasy_1 = cd_especialidade_w,
							cd_espec_1		= cd_espec_ptu_w,
							cd_atua_1		= cd_area_atuacao_ptu_w,
							id_rce_espec_1		= ie_rce_w,
							id_rce_atua_1		= ie_rce_atuacao_w,
							id_guia_medico_espec_1	= ie_guia_medico_espec_w,
							id_guia_medico_atua_1	= ie_guia_medico_atua_w,
							nr_rce_espec_1		= somente_numero(nr_rce_espec_1_w),
							nr_rce_2_espec_1	= 0,
							nr_rce_atua_1		= somente_numero(nr_rce_atua_1_w),
							nr_rce_2_atua_1		= 0,
							nr_seq_apres_1		= 1,
							cod_titulacao_1		= cod_titulacao_1_w,
							indic_resid_espec_1	= indic_resid_espec_w,
							indic_resid_atua_1	= indic_resid_atua_w,
							ie_titulo_especialista	= ie_titulo_especialista_w
						where	nr_sequencia		= nr_seq_prestador_ww;
					
					
					--	 ############ 	SEGUNDA INFORMACAO DE ESPECIALIDADE / AREA ATUACAO	############
					elsif (qt_espec_area_w = 2) then
						select	max(cd_espec_1),
							max(cd_atua_1),
							max(nr_rce_espec_1),
							max(nr_rce_atua_1)
						into STRICT	cd_espec_1_w,
							cd_atua_1_w,
							nr_rce_espec_1_w,
							nr_rce_atua_1_w
						from	ptu_prestador
						where	nr_sequencia	= nr_seq_prestador_ww;
						
						if (ie_guia_med_espec_area_w = 'N') then
							ie_guia_medico_espec_w := 'N';
							ie_guia_medico_atua_w := 'N';
						end if;
						
						-- O codigo da especialidade 2 nao pode ser igual a especialidade 1
						if (cd_espec_1_w = cd_espec_ptu_w) then
							cd_espec_ptu_w := 0;
							ie_guia_medico_espec_w := null;
						end if;
						
						-- O codigo da area de atuacao 2 nao pode ser igual a area de atuacao 1
						if (cd_atua_1_w = cd_area_atuacao_ptu_w) then
							cd_area_atuacao_ptu_w := 0;
							ie_guia_medico_atua_w := null;
						end if;
						
						-- Mandatorio se CD_ESPEC_2 estiver preenchido e somente quando prestador for Medico (TP_PREST = 1).

						-- S=Sim N=Nao

						-- Quanto TP_PREST=2, 3, 4, 5, 6,7 e 8 e se CD_ESPEC_2 = 00, prencher com branco

						-- pg. 39 (Manual 4.1 B)
						if (cd_espec_ptu_w = 0) then
							ie_rce_w := null;
							indic_resid_espec_w := null;
						end if;
						
						-- Mandatorio se CD_ATUA_2 estiver preenchido e somente quando prestador for Medico (TP_PREST = 1).

						-- S=Sim N=Nao

						-- Quanto TP_PREST=2, 3, 4, 5, 6,7 e 8 e se CD_ATUA_2 = 00, prencher com branco

						-- pg. 39 (Manual 4.1 B)
						if (coalesce(cd_area_atuacao_ptu_w,0) = 0) then
							ie_rce_atuacao_w := null;
							indic_resid_atua_w := null;
						end if;
						
						-- Regra: Mandatorio se ID_RCE_ESPEC_2 = S

						-- Se CD_ESPEC_2 nao estiver informado, prencher com zeros

						-- pg. 42 (Manual 4.1 B)
						select	substr(max(nr_rqe),1,10)
						into STRICT	nr_rce_espec_2_w
						from	medico_especialidade a
						where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
						and	a.cd_especialidade	= cd_especialidade_w;
						
						if (coalesce(nr_rce_espec_2_w::text, '') = '') then
							select	max(a.cd_especialidade)
							into STRICT	cd_especialidade_rce_w
							from	especialidade_medica	a
							where	a.cd_ptu		= cd_espec_ptu_w
							and	a.cd_especialidade	<> cd_especialidade_w;
							
							if (cd_especialidade_rce_w IS NOT NULL AND cd_especialidade_rce_w::text <> '') then
								select	substr(max(nr_rqe),1,10)
								into STRICT	nr_rce_espec_2_w
								from	medico_especialidade a
								where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
								and	a.cd_especialidade	= cd_especialidade_rce_w;
							end if;
						end if;
						
						-- Regra: Mandatorio se ID_RCE_ATUA_2 = S

						-- Se CD_ATUA_2 nao estiver informado, prencher com zeros

						-- pg. 42 (Manual 4.1 B)
						select	substr(max(nr_rce),1,10)
						into STRICT	nr_rce_atua_2_w
						from	medico_area_atuacao a
						where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
						and	a.nr_seq_area_atuacao	= nr_seq_area_atuacao_w;
						
						if (coalesce(nr_rce_atua_2_w::text, '') = '') then
							select	max(b.nr_seq_area_atuacao)
							into STRICT	nr_seq_area_atuacao_rce_w
							from	pls_prest_med_espec_adic	b,
								pls_prestador_med_espec		a
							where	a.nr_sequencia			= b.nr_seq_prest_med_espec
							and	a.nr_seq_prestador		= nr_seq_prestador_w
							and	b.nr_seq_area_atuacao		= nr_seq_area_atuacao_w;
							
							if (coalesce(nr_seq_area_atuacao_rce_w::text, '') = '') then
								select	substr(max(nr_rce),1,10)
								into STRICT	nr_rce_atua_2_w
								from	medico_area_atuacao a
								where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
								and	a.nr_seq_area_atuacao	= nr_seq_area_atuacao_rce_w;
							end if;
						end if;
						
						cod_titulacao_2_w := coalesce(substr(coalesce(cd_titulacao_ptu_w,pls_obter_espec_ptu_tit_cert(cd_especialidade_w,cd_versao_w)),1,3),'0');
						
						if (cd_espec_ptu_w = 0) then
							nr_rce_espec_2_w := 0;
							ie_guia_medico_espec_w := null;
							indic_resid_espec_w := null;
							cd_especialidade_w := null;
						end if;
						
						if (cd_area_atuacao_ptu_w = 0) then
							nr_rce_atua_2_w := 0;
							ie_guia_medico_atua_w := null;
							indic_resid_atua_w := null;
						end if;
						
						-- Obrigatorio somente quando TP_PREST = 5. Para os

						-- demais tipos de prestadores preencher com branco.
						if (ie_tipo_prestador_w in ('05')) and (somente_numero(nr_rce_espec_2_w) > 0) then
							ie_titulo_especialista_w := 'S';
						end if;
						
						-- Obs.: Nas seqs. 044, 045, 046 e 047, preenchimento obrigatorio para TP_PREST = 1. 

						-- Demais prestadores devem continuar a utilizar o campo ID_GUIA_MEDICO e deixar esses campos em branco.

						-- Regra: Preencher com branco quando nao houver informacao de especialidade ou area de atuacao correspondente.

						-- pg. 41 (Manual 4.1 B)
						update	ptu_prestador
						set	cd_especialidade_tasy_2 = cd_especialidade_w,
							cd_espec_2		= cd_espec_ptu_w,
							cd_atua_2		= cd_area_atuacao_ptu_w,
							id_rce_espec_2		= ie_rce_w,
							id_rce_atua_2		= ie_rce_atuacao_w,
							id_guia_medico_espec_2	= ie_guia_medico_espec_w,
							id_guia_medico_atua_2	= ie_guia_medico_atua_w,
							nr_rce_espec_2		= somente_numero(nr_rce_espec_2_w),
							nr_rce_2_espec_2	= 0,
							nr_rce_atua_2		= somente_numero(nr_rce_atua_2_w),
							nr_rce_2_atua_2		= 0,
							nr_seq_apres_2		= 2,
							cod_titulacao_2		= cod_titulacao_2_w,
							indic_resid_espec_2	= indic_resid_espec_w,
							indic_resid_atua_2	= indic_resid_atua_w,
							ie_titulo_especialista	= ie_titulo_especialista_w
						where	nr_sequencia		= nr_seq_prestador_ww;
					end if;
					
					qt_espec_area_w := qt_espec_area_w + 1;
					ie_principal_w	:= 'N';
					end;
				end loop;
				close C02;
				
			end if;
			
			CALL ptu_gerar_endereco_prestador(	nr_seq_prestador_ww,
							cd_pessoa_fisica_w,
							cd_cgc_w,
							cd_estabelecimento_p,
							nm_usuario_p);
			
			CALL ptu_gerar_prestador_rede_ref(	nr_seq_prestador_ww,
							nm_usuario_p);
			
			if (coalesce(nr_seq_tipo_prestador_w::text, '') = '') then
				CALL ptu_gravar_inconsist_prestador(	nr_seq_prestador_ww,
								1,
								nm_usuario_p);
			end if;
			
			CALL ptu_gerar_prestador_exc_subs(	nr_seq_prestador_ww,
							cd_pessoa_fisica_w,
							cd_cgc_w,
							cd_estabelecimento_p,
							nm_usuario_p);
							
			CALL ptu_gerar_prestador_qualific(	nr_seq_prestador_ww,
							nm_usuario_p);
							
			CALL ptu_gerar_prestador_observacao(	nr_seq_prestador_ww,
							dt_referencia_w,
							nm_usuario_p);
		end if;
		end;
	end loop;
	close C01;
	
	-- Atualizar para nulo caso "zero". 

	-- Se manter zero ocorre problema com o campo localizador no HTML5
	update	ptu_prestador
	set	cd_espec_1	= CASE WHEN cd_espec_1=0 THEN null  ELSE cd_espec_1 END ,
		cd_espec_2	= CASE WHEN cd_espec_2=0 THEN null  ELSE cd_espec_2 END ,
		cd_atua_1	= CASE WHEN cd_atua_1=0 THEN null  ELSE cd_atua_1 END ,
		cd_atua_2	= CASE WHEN cd_atua_2=0 THEN null  ELSE cd_atua_2 END
	where	nr_seq_movimento= nr_seq_lote_p;
	
        -- Gerar classificacao de rede prestadores (A410)
        CALL ptu_gerar_clas_rede_prest(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p, 'N');
	
	update	ptu_movimento_prestador
	set	dt_geracao	= clock_timestamp(),
		dt_geracao_a410	= clock_timestamp()
	where	nr_sequencia	= nr_seq_lote_p;

elsif (ie_acao_p = 'D') then
	delete	FROM ptu_prestador_grupo_serv	a
	where	exists (SELECT	1
			from	ptu_prestador y,
				ptu_prestador_endereco x
			where	x.nr_seq_prestador = y.nr_sequencia
			and	y.nr_seq_movimento = nr_seq_lote_p
			and	x.nr_sequencia = a.nr_seq_endereco);
			
	delete	FROM ptu_prestador_endereco	a
	where	exists (SELECT 1
			from	ptu_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_prestador);
			
	delete	FROM ptu_prestador_excl_subst	a
	where	exists (SELECT 1
			from	ptu_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_prestador);
			
	delete	FROM ptu_prestador_imposto	a
	where	exists (SELECT 1
			from	ptu_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_prestador);
			
	delete	FROM ptu_prestador_qualific	a
	where	exists (SELECT 1
			from	ptu_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_prestador);
			
	delete	FROM ptu_prestador_observacao	a
	where	exists (SELECT 1
			from	ptu_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_prestador);
			
	delete	FROM ptu_prestador_espec	a
	where	exists (SELECT 1
			from	ptu_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_prestador);
	
	delete	FROM ptu_prestador_rede_ref	a
	where	exists (SELECT 1
			from	ptu_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_prestador);
			
	delete FROM ptu_prestador_inconsist	a
	where exists (SELECT 1
			from	ptu_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_ptu_prestador);
			
	delete	FROM ptu_prestador	a
	where	a.nr_seq_movimento	= nr_seq_lote_p;
	
	delete	FROM ptu_movimento_plan_rede a
	where	exists (SELECT	1
			from	ptu_movimento_exc_plano x
			where	x.nr_seq_movimento	= nr_seq_lote_p);
	
	delete	FROM ptu_movimento_exc_plano a
	where	a.nr_seq_movimento	= nr_seq_lote_p;
	
	delete	FROM ptu_movimento_rede_ref	a
	where	a.nr_seq_movimento	= nr_seq_lote_p;
	
	delete	FROM ptu_clas_rede_prest_dth	a
	where exists (SELECT 1
			from	ptu_clas_rede_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_clas_rede_prest);

	delete	FROM ptu_clas_rede_econ_exc	a	
	where 	exists (SELECT 1
			from	ptu_clas_rede_prest_econ	y,
				ptu_clas_rede_prestador		x	
			where	x.nr_sequencia		= y.nr_seq_clas_rede_prest
			and	x.nr_seq_movimento	= nr_seq_lote_p
			and	y.nr_sequencia		= a.nr_seq_rede_prest_econ);
	
	delete	FROM ptu_clas_rede_prest_econ	a
	where	exists (SELECT 1
			from	ptu_clas_rede_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_clas_rede_prest);

	delete	FROM ptu_clas_rede_prest_leito	a
	where	exists (SELECT 1
			from	ptu_clas_rede_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_clas_rede_prest);

	delete	FROM ptu_clas_rede_prest_sadt	a
	where	exists (SELECT 1
			from	ptu_clas_rede_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_clas_rede_prest);

	delete	FROM ptu_clas_rede_prest_serv	a
	where	exists (SELECT 1
			from	ptu_clas_rede_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_clas_rede_prest);
			
	delete	FROM ptu_clas_rede_prest_hosp	a
	where	exists (SELECT 1
			from	ptu_clas_rede_prestador x
			where	x.nr_seq_movimento	= nr_seq_lote_p
			and	x.nr_sequencia		= a.nr_seq_clas_rede_prest);

	delete	FROM ptu_clas_rede_prestador a
	where	a.nr_seq_movimento	= nr_seq_lote_p;
		
	update	ptu_movimento_prestador
	set	dt_geracao	 = NULL,
		dt_geracao_a410	 = NULL,
		dt_geracao_a450  = NULL
	where	nr_sequencia	= nr_seq_lote_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_movimento_prestador ( nr_seq_lote_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_acao_p text) FROM PUBLIC;

