-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cancelar_atendimento_paciente (nr_atendimento_p bigint, nm_usuario_p text, nr_seq_motivo_p bigint, cd_pessoa_fisica_p text, ds_observacao_p text, nr_seq_episodio_p bigint default 0, nr_seq_tipo_episodio_p bigint default 0, ie_cancel_encounter_click text default 'N', dt_inicio_validade_p timestamp default null, dt_validade_p timestamp default null) AS $body$
DECLARE


qt_propaci_w			bigint;
qt_matpaci_w			bigint;
qt_conta_paciente_w		bigint;
qt_prescr_w			bigint;
ds_motivo_w			varchar(255);
cd_pessoa_fisica_w		varchar(10);
cd_convenio_w			bigint; --Ivan em 12/06/2007 OS59156
cd_setor_w			bigint; --Ivan em 12/06/2007 OS59156
nm_pessoa_fisica_w		varchar(255); --Ivan em 15/06/52007 OS59712
qt_proc_w			bigint;
qt_mat_w			bigint;
qt_ficha_w 			bigint;
nr_devolucao_w			bigint;
nr_seq_same_hist_w		bigint;
nr_sequencia_w			bigint;
cd_agenda_w			bigint;
nr_sequencia_exame_w		bigint;
cd_agenda_exame_w		bigint;
nr_motivo_canc_cons_w		bigint;
nr_motivo_canc_exame_w		bigint;
vl_param_age_exame_w		varchar(1);
vl_param_age_cons_w		varchar(1);
cd_medico_resp_w		varchar(10);
dt_entrada_w			timestamp;
ie_verifica_proc_aut_w		varchar(1);
cd_estabelecimento_w		integer;

cd_unidade_basica_w         	varchar(10);
cd_unidade_compl_w       	varchar(10);
nm_curto_w			varchar(3);
ds_sep_bv_w			varchar(100);
cd_setor_atendimento_w		integer;
cd_classif_setor_w		varchar(15);

ds_param_integ_hl7_w		varchar(4000);
ds_param_integration_w  	varchar(4000);
ie_leito_monit_w		varchar(1);
qt_itens_prescr_w		bigint;
ie_verifica_prescr_w		varchar(2);
ie_exclui_atend_w 		varchar(1);
nr_interno_conta_w		bigint;
qt_item_Conta_w			bigint := 0;
qt_regra_w			bigint := 0;
cd_motivo_exc_conta_w		smallint;
cd_convenio_parametro_w		bigint;
ie_exclui_itens_atend_w		varchar(1);
ie_consiste_conta_w		varchar(1);
qt_contas_def_w			bigint;
ie_cancela_atend_prev_w		varchar(1);
ie_canc_atnd_prev_sts_exc_w	varchar(1);
ie_ignora_conta_cancelada_w	varchar(1);
nr_prescricao_w			bigint;
nr_seq_mot_susp_w		bigint;
ds_motivo_susp_w		varchar(100);
ie_setor_rothman_w		varchar(100);
ie_integracao_aghos_w		varchar(1);
ie_urgencia_w			varchar(1);
nr_internacao_w			bigint;
ie_retorna_status_aghos_w	varchar(1);
qt_horas_desvincula_senha_w	bigint;
nr_seq_pac_senha_fila_w		bigint;
ie_libera_leito_pac_w		varchar(1);
ie_leito_livre_w		varchar(1);
ie_canc_cirur_iniciada_w	varchar(1);
qt_cirurgia_iniciada_w		bigint;
cd_motivo_exc_conta_eup_w	smallint;
ds_senha_w	atend_senha_internet.ds_senha%type;
ds_texto_w			varchar(255);
ds_texto_ww			varchar(2000);
ie_limpar_data_integracao_w		varchar(1)	:=	'N';
ie_permite_cancel_atend_w		varchar(1);
ie_consisite_proc_conta_w	varchar(1);
nr_seq_laudo_w			bigint := 0;
qt_reg_w				bigint := 0;
ie_status_unidade_w		varchar(10);
qt_reg_tasklist			bigint;
reg_integracao_p		gerar_int_padrao.reg_integracao;
nr_seq_interno_w	atend_paciente_unidade.nr_seq_interno%type;
nr_seq_tri_pron_atend_w		triagem_pronto_atend.nr_sequencia%type;
nr_seq_case_type_w			tipo_episodio.nr_sequencia%type;
qt_inpatient_encounters_w 	smallint;
qt_outpatient_encounters_w 	smallint;
nr_seq_episodio_w			atendimento_paciente.nr_seq_episodio%type;
nr_seq_episodio_tax_w		atendimento_paciente.nr_seq_episodio%type;
qt_episodes_in_case_w		smallint;
qt_worklist_w		bigint;

cd_unidade_basica_gerint_w		gerint_solic_internacao.cd_unidade_basica%type;
cd_unidade_compl_gerint_w		gerint_solic_internacao.cd_unidade_compl%type;
cd_setor_atendimento_gerint_w	gerint_solic_internacao.cd_unidade_compl%type;
ie_gerint_w				unidade_atendimento.ie_gerint%type;

json_w        philips_json;
json_w2        philips_json;
json_data_w   text;
jobno bigint;
ie_tasy_backend varchar(1) := null;
JSON_HEADERS text := null;

C01 CURSOR FOR
	SELECT	a.nr_sequencia
	from	same_prontuario_hist a,
		same_prontuario b
	where	a.nr_seq_same	 	= b.nr_sequencia
	and	b.nr_atendimento	= nr_atendimento_p
	order by	1;

C02 CURSOR FOR
	SELECT	nr_interno_conta,
		cd_convenio_parametro
	from	conta_paciente
	where	nr_atendimento		= nr_atendimento_p
	and	ie_status_acerto	= 1
	order by	1;

C03 CURSOR FOR
	SELECT  nr_sequencia,
		cd_agenda
	from 	agenda_consulta
	where	nr_atendimento = nr_atendimento_p
	and	ie_status_agenda not in ('C','E')
	and	ie_canc_atnd_prev_sts_exc_w = 'N'	
	
union

	SELECT  nr_sequencia,
		cd_agenda
	from 	agenda_consulta
	where	nr_atendimento = nr_atendimento_p
	and	ie_status_agenda <> 'C'
	and	ie_canc_atnd_prev_sts_exc_w = 'S'
	order by 1;

C04 CURSOR FOR
	SELECT  nr_sequencia,
		cd_agenda
	from 	agenda_paciente
	where	nr_atendimento = nr_atendimento_p
	and	ie_status_agenda not in ('C','E')
	and	ie_canc_atnd_prev_sts_exc_w = 'N'	
	
union

	SELECT  nr_sequencia,
		cd_agenda
	from 	agenda_paciente
	where	nr_atendimento = nr_atendimento_p
	and	ie_status_agenda <> 'C'
	and	ie_canc_atnd_prev_sts_exc_w = 'S'
	order by 1;

C05 CURSOR FOR
	SELECT	distinct
		nr_prescricao
	from	prescr_medica a
	where 	a.nr_atendimento = nr_atendimento_p
	order by 1;

c_contas_pac CURSOR FOR
	SELECT	a.nr_interno_conta,
		a.cd_convenio_parametro
	from	conta_paciente a
	where	a.nr_atendimento = nr_atendimento_p;

C10 CURSOR FOR
	SELECT 	nr_sequencia
	from	triagem_pronto_atend
	where	nr_atendimento = nr_atendimento_p
	order by nr_sequencia asc;
	
C11 CURSOR FOR
	SELECT	*
	from	bft_patient_v b
	where	b.cd_pessoa_fisica = (SELECT max(a.cd_pessoa_fisica) from atendimento_paciente a where a.nr_Atendimento = nr_atendimento_p);

BEGIN
if (coalesce(nr_atendimento_p,0) > 0) then

	IF (coalesce(pkg_i18n.get_user_locale, 'pt_BR') = 'de_AT') THEN
		DELETE FROM atend_consent_carta_med WHERE nr_atendimento = nr_atendimento_p;
	END IF;

	ds_sep_bv_w := obter_separador_bv;

	begin
	select	b.nm_curto,
		a.cd_unidade_basica,
		a.cd_unidade_compl,
		a.cd_setor_atendimento,
		b.cd_classif_setor
	into STRICT	nm_curto_w,
		cd_unidade_basica_w,
		cd_unidade_compl_w,
		cd_setor_atendimento_w,
		cd_classif_setor_w
	from	setor_atendimento b,
		atend_paciente_unidade a
	where	a.cd_setor_atendimento	= b.cd_setor_atendimento
	and	a.nr_atendimento	= nr_atendimento_p
	and	a.nr_seq_interno =	(SELECT	max(b.nr_seq_interno)
					from 	atend_paciente_unidade b
					where	b.nr_atendimento = nr_atendimento_p);
	exception
		when others then
			cd_unidade_basica_w := null;
	end;


	select	count(1)
	into STRICT	qt_prescr_w
	from	prescr_medica a,
		medico b
	where	nr_atendimento	= nr_atendimento_p
	and	a.cd_prescritor = b.cd_pessoa_fisica LIMIT 1;			/* se a prescricao foi feita pelo medico */
	select	max(a.cd_pessoa_fisica),
		max(substr(obter_nome_pf(b.cd_pessoa_fisica),1,255)),
		max(obter_setor_atendimento(a.nr_atendimento)),
		max(obter_convenio_atendimento(a.nr_atendimento)),
		max(a.cd_medico_resp),
		max(a.dt_entrada),
		max(a.cd_estabelecimento),
		max(a.nr_seq_pac_senha_fila)
	into STRICT	cd_pessoa_fisica_w,
		nm_pessoa_fisica_w,
		cd_setor_w,
		cd_convenio_w,
		cd_medico_resp_w,
		dt_entrada_w,
		cd_estabelecimento_w,
		nr_seq_pac_senha_fila_w
	from	pessoa_fisica b,
		atendimento_paciente a
	where	a.nr_atendimento	= nr_atendimento_p
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica;

	select 	max(nr_seq_episodio)
	into STRICT 	nr_seq_episodio_tax_w
	from 	atendimento_paciente
	where 	nr_atendimento = nr_atendimento_p;

	if (nr_seq_episodio_tax_w IS NOT NULL AND nr_seq_episodio_tax_w::text <> '') then
		select 	count(1)
		into STRICT 	qt_episodes_in_case_w
		from 	atendimento_paciente
		where 	nr_seq_episodio = nr_seq_episodio_tax_w
		and 	(dt_cancelamento IS NOT NULL AND dt_cancelamento::text <> '');

		if (qt_episodes_in_case_w = 1) then
			delete_pessoa_fisica_taxa(cd_pessoa_fisica_w, nr_atendimento_p);
		end if;
	end if;

	select 	coalesce(max(cd_motivo_exc_conta),0)
	into STRICT	cd_motivo_exc_conta_w
	from	parametro_faturamento
	where	cd_estabelecimento =  cd_estabelecimento_w;

	if (cd_convenio_w = 0) then
		cd_convenio_w	:= null;
	end if;	

	ie_verifica_proc_aut_w := Obter_Param_Usuario(916, 408, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_verifica_proc_aut_w);
	ie_verifica_prescr_w := Obter_Param_Usuario(916, 545, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_verifica_prescr_w);
	ie_exclui_atend_w := Obter_Param_Usuario(916, 608, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_exclui_atend_w);
	ie_exclui_itens_atend_w := Obter_Param_Usuario(916, 648, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_exclui_itens_atend_w);
	ie_cancela_atend_prev_w := Obter_Param_Usuario(916, 676, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_cancela_atend_prev_w);
	nr_motivo_canc_cons_w := Obter_Param_Usuario(916, 678, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, nr_motivo_canc_cons_w);
	nr_motivo_canc_exame_w := Obter_Param_Usuario(916, 679, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, nr_motivo_canc_exame_w);
	ie_canc_atnd_prev_sts_exc_w := Obter_Param_Usuario(916, 699, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_canc_atnd_prev_sts_exc_w);
	ie_retorna_status_aghos_w := Obter_Param_Usuario(916, 1033, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_retorna_status_aghos_w);
	qt_horas_desvincula_senha_w := Obter_Param_Usuario(916, 1036, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, qt_horas_desvincula_senha_w);
	ie_libera_leito_pac_w := Obter_Param_Usuario(916, 1038, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_libera_leito_pac_w);
	ie_canc_cirur_iniciada_w := Obter_Param_Usuario(916, 1057, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_canc_cirur_iniciada_w);
	ie_permite_cancel_atend_w := Obter_Param_Usuario(916, 1134, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_permite_cancel_atend_w);
	ie_consisite_proc_conta_w := Obter_Param_Usuario(916, 1140, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_consisite_proc_conta_w);

	begin
	cd_motivo_exc_conta_eup_w:=  Somente_numero(coalesce(Obter_Valor_Param_Usuario(916, 1083, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo),'0'));
	exception
		when others then
		cd_motivo_exc_conta_eup_w:= 0;
	end;

	if (cd_motivo_exc_conta_eup_w > 0) then
		cd_motivo_exc_conta_w:=  cd_motivo_exc_conta_eup_w;
	end if;

	if (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT') and ie_cancel_encounter_click = 'S') then
		select 	max(ap.nr_seq_episodio)
		into STRICT 	nr_seq_episodio_w
		from 	atendimento_paciente ap
		where 	ap.nr_atendimento = nr_atendimento_p
		and	ap.ie_tipo_atendimento = 1;

		if (nr_seq_episodio_w IS NOT NULL AND nr_seq_episodio_w::text <> '') then

			select 	count(1)
			into STRICT 	qt_inpatient_encounters_w
			from 	atendimento_paciente ap
			where 	ap.nr_seq_episodio = nr_seq_episodio_w
			and	ap.nr_atendimento <> nr_atendimento_p
			and 	coalesce(ap.dt_cancelamento::text, '') = ''
			and	ap.ie_tipo_atendimento = 1;

			if (qt_inpatient_encounters_w = 0) then
				select 	count(1)
				into STRICT 	qt_outpatient_encounters_w
				from 	atendimento_paciente ap
				where 	ap.nr_seq_episodio = nr_seq_episodio_w
				and 	coalesce(ap.dt_cancelamento::text, '') = ''
				and 	ap.ie_tipo_atendimento = 8;

				if (qt_outpatient_encounters_w > 0) then
					CALL wheb_mensagem_pck.exibir_mensagem_abort(1106007);
				end if;
			end if;

		end if;
	end if;

	if (ie_permite_cancel_atend_w = 'N') then
		select 	count(1)
		into STRICT 	nr_seq_laudo_w
		from 	laudo_paciente l
		where 	l.nr_atendimento = nr_atendimento_p
		and 	coalesce(dt_cancelamento::text, '') = '' LIMIT 1;

		if (coalesce(nr_seq_laudo_w,0) = 0) then
			select 	count(1)
			into STRICT 	nr_seq_laudo_w
			from 	laudo_paciente l,
				prescr_medica p
			where 	p.nr_atendimento = nr_atendimento_p
			and	l.nr_prescricao = p.nr_prescricao
			and 	coalesce(l.dt_cancelamento::text, '') = ''
			and	coalesce(p.dt_suspensao::text, '') = ''  LIMIT 1;
		end if;

		if (nr_seq_laudo_w <> 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(366143);
		end if;
	end if;

	if (ie_verifica_proc_aut_w = 'S') then
		select	count(1)
		into STRICT	qt_propaci_w
		from	procedimento_paciente a,
			conta_paciente b
		where	a.nr_atendimento = nr_atendimento_p
		and	b.nr_interno_conta = a.nr_interno_conta
		and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
		and	coalesce(a.nr_seq_proc_princ::text, '') = ''
		and	coalesce(a.nr_seq_regra_lanc::text, '') = ''
		and	coalesce(b.ie_cancelamento::text, '') = ''  LIMIT 1;

		select	count(1)
		into STRICT	qt_matpaci_w
		from	material_atend_paciente a,
			conta_paciente b
		where	a.nr_atendimento = nr_atendimento_p		
		and	b.nr_interno_conta = a.nr_interno_conta
		and	coalesce(a.cd_motivo_exc_conta::text, '') = ''
		and	coalesce(a.nr_seq_proc_princ::text, '') = ''
		and	coalesce(a.nr_seq_regra_lanc::text, '') = ''
		and	coalesce(b.ie_cancelamento::text, '') = ''  LIMIT 1;

		qt_conta_paciente_w	:= 0;


	else
		select	count(1)
		into STRICT	qt_propaci_w
		from	procedimento_paciente a,
			conta_paciente b
		where	a.nr_atendimento	= nr_atendimento_p
		and	b.nr_interno_conta = a.nr_interno_conta
		and	coalesce(b.ie_cancelamento::text, '') = ''
		and	coalesce(a.cd_motivo_exc_conta::text, '') = '' LIMIT 1;

		select	count(1)
		into STRICT	qt_matpaci_w
		from	material_atend_paciente a,
			conta_paciente b
		where	a.nr_atendimento	= nr_atendimento_p
		and	b.nr_interno_conta = a.nr_interno_conta
		and	coalesce(b.ie_cancelamento::text, '') = ''
		and	coalesce(a.cd_motivo_exc_conta::text, '') = '' LIMIT 1;

		select	count(1)
		into STRICT	qt_conta_paciente_w
		from	conta_paciente a
		where	a.nr_atendimento	= nr_atendimento_p
		and	coalesce(a.ie_cancelamento::text, '') = '' LIMIT 1;
	end if;

	-- Integracao Aghos - Vincular atendimento a solicitacao de internacao
	ie_integracao_aghos_w := obter_dados_param_atend(cd_estabelecimento_w, 'AG');

	if (ie_integracao_aghos_w = 'S') and (ie_retorna_status_aghos_w = 'S') then

		select	max(nr_internacao),
			max(ie_urgencia)
		into STRICT	nr_internacao_w,
			ie_urgencia_w
		from	solicitacao_tasy_aghos
		where	nr_atendimento = nr_atendimento_p;

		If (nr_internacao_w IS NOT NULL AND nr_internacao_w::text <> '') then

			If (ie_urgencia_w = '1') then -- Urgente
				ds_texto_w := substr(wheb_mensagem_pck.get_texto(303629),1,255);--Solicitado
				update	solicitacao_tasy_aghos
				set	ie_situacao = 'A',
					nr_atendimento  = NULL,
					ds_motivo_situacao = ds_texto_w
				where	nr_internacao = nr_internacao_w;
			Else -- Eletiva
				ds_texto_w := substr(wheb_mensagem_pck.get_texto(303632),1,255);--Autorizado clinicamente
				update	solicitacao_tasy_aghos
				set	ie_situacao = 'AC',
					nr_atendimento  = NULL,
					ds_motivo_situacao = ds_texto_w
				where	nr_internacao = nr_internacao_w;
			End if;

		end if;

	end if;

	if (ie_canc_cirur_iniciada_w = 'N') then

		select	count(1)
		into STRICT	qt_cirurgia_iniciada_w
		from	cirurgia
		where	nr_atendimento = nr_atendimento_p
		and	(dt_inicio_real IS NOT NULL AND dt_inicio_real::text <> '') LIMIT 1;

		if (qt_cirurgia_iniciada_w > 0) then

			CALL wheb_mensagem_pck.exibir_mensagem_abort(237141);
		end if;
	end if;	
	
	if (ie_verifica_prescr_w = 'NC') and (ie_exclui_atend_w	= 'N') then		
		select 	count(1)
		into STRICT	qt_itens_prescr_w
		from	prescr_procedimento a,
			prescr_medica b
		where	a.nr_prescricao = b.nr_prescricao
		and	ie_suspenso <> 'S'
		and	b.nr_atendimento = nr_atendimento_p LIMIT 1;

		if (qt_itens_prescr_w = 0) then
			select 	count(1)
			into STRICT	qt_itens_prescr_w
			from	prescr_material a,
				prescr_medica b
			where	a.nr_prescricao = b.nr_prescricao
			and	ie_suspenso <> 'S'
			and	b.nr_atendimento = nr_atendimento_p LIMIT 1;
		end if;

		if (qt_itens_prescr_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(174985);
		end if;
	end if;

	if	((ie_exclui_atend_w = 'S') or (ie_consisite_proc_conta_w = 'N')) and
		((qt_propaci_w > 0) or (qt_matpaci_w > 0)) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(174981);
	end if;


	select	count(1)
	into STRICT	qt_reg_w
	from	dis_regra_setor
	where	cd_setor_atendimento = cd_setor_w  LIMIT 1;

	if (qt_reg_w > 0) then
		CALL intdisp_gerar_movimento(nr_atendimento_p, 'EPD');
	end if;

	update 	GERINT_SOLIC_INTERNACAO
	set		nr_Atendimento  = NULL,
			ie_situacao = 'A'
	where	nr_Atendimento = nr_atendimento_p;

		for c11_w in c11 loop
			json_w := philips_json();
			json_w.put('patientId', c11_w.patient_id);
			json_w.put('medicalRecordId', c11_w.medical_record_id);
			json_w.put('patientName', c11_w.patient_name);
			json_w.put('patientGivenName', c11_w.patient_given_name);
			json_w.put('patientLastName', c11_w.patient_last_name);
			json_w.put('patientMiddleName', c11_w.patient_middle_name);
			json_w.put('motherName', c11_w.mother_name);
			json_w.put('motherGivenName', c11_w.mother_given_name);
			json_w.put('motherMiddleName', c11_w.mother_last_name);
			json_w.put('motherLastName', c11_w.mother_middle_name);
			json_w.put('sexId', c11_w.sex_id);
			json_w.put('dateOfBirth', to_char(c11_w.date_of_birth,'YYYY-MM-DD'));
			json_w.put('encounterId', nr_atendimento_p);
			json_w.put('typeEncounterId', obter_tipo_atendimento(nr_atendimento_p));
			json_w.put('pointOfCare', Obter_point_of_care(cd_setor_atendimento_w,cd_unidade_basica_w,cd_unidade_compl_w));
			json_w.put('roomId', cd_unidade_basica_w);
			json_w.put('bedId', cd_unidade_compl_w);
			json_w.put('encouterAdmitDate',to_char(dt_entrada_w,'YYYY-MM-DD'));
			json_w.put('establishmentId', cd_estabelecimento_w);
			
			dbms_lob.createtemporary(json_data_w, true);
			json_w.(json_data_w);
			
			json_w2 := philips_json();
			json_w2.PUT('patientVisit', json_w);
			dbms_lob.createtemporary(json_data_w, true);
			json_w2.(json_data_w);
		end loop;

	if (ie_exclui_atend_w = 'S') then
		select 	count(1)
		into STRICT	qt_ficha_w
		from	cih_ficha_ocorrencia
		where	nr_atendimento = nr_atendimento_p  LIMIT 1;

		if (qt_ficha_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(174976);
		end if;

		if (qt_conta_paciente_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(174982);
		end if;

		if (qt_prescr_w > 0) then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(174984);
		end if;

		select	coalesce(obter_se_leito_atual_monit(nr_atendimento_p),'N')
		into STRICT	ie_leito_monit_w
		;

		delete	FROM material_atend_paciente
		where	nr_atendimento	= nr_atendimento_p;

		delete	FROM material_atend_paciente
		where	nr_atendimento	= nr_atendimento_p;

		delete	FROM procedimento_paciente
		where	nr_atendimento	= nr_atendimento_p;

		delete	FROM procedimento_paciente
		where	nr_atendimento	= nr_atendimento_p;

		delete	FROM med_avaliacao_paciente
		where	nr_atendimento	= nr_atendimento_p;

		delete 	FROM atendimento_sinal_vital
		where 	nr_atendimento = nr_atendimento_p;

		delete	FROM vacina_lista_espera
		where 	nr_atendimento = nr_atendimento_p;

		delete	FROM nut_atend_serv_dia
    	where 	nr_atendimento = nr_atendimento_p;

		update	can_loco_regional
		set	nr_atendimento  = NULL
		where	nr_atendimento = nr_atendimento_p;

	    select 	count(1)
		into STRICT 	qt_worklist_w
		from 	wl_worklist
		where 	nr_atendimento = nr_atendimento_p  LIMIT 1;

		if (qt_worklist_w > 0) then
			update wl_worklist
			set nr_seq_diagnostico  = NULL  
			where nr_atendimento = nr_atendimento_p;
		end if;

		open C10;
		loop
		fetch C10 into	
			nr_seq_tri_pron_atend_w;
		EXIT WHEN NOT FOUND; /* apply on C10 */
			begin

			delete	FROM log_classif_triagem
			where	nr_seq_triagem = nr_seq_tri_pron_atend_w;

			end;
		end loop;
		close C10;

		delete 	FROM triagem_pronto_atend
		where	nr_atendimento = nr_atendimento_p;

		if (ie_cancela_atend_prev_w = 'S') then
			open C03;
			loop
			fetch C03 into
				nr_sequencia_w,
				cd_agenda_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				update	agenda_consulta
				set	nr_atendimento	 = NULL
				where	nr_Sequencia	= nr_sequencia_w;

				CALL alterar_status_agecons(cd_agenda_w, nr_sequencia_w, 'C', nr_motivo_canc_cons_w, null, 'N', nm_usuario_p, null);
				end;
			end loop;
			close C03;

			open C04;
			loop
			fetch C04 into
				nr_sequencia_exame_w,
				cd_agenda_exame_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin
				update	agenda_paciente
				set	nr_atendimento	 = NULL
				where	nr_Sequencia	= nr_sequencia_exame_w;

				CALL alterar_status_agenda(cd_agenda_exame_w, nr_sequencia_exame_w, 'C', nr_motivo_canc_exame_w, null, 'N', nm_usuario_p);
				end;
			end loop;
			close C04;

		else
			update	agenda_consulta
			set	nr_atendimento		 = NULL,
				ie_status_agenda	= 'N'
			where	nr_atendimento		= nr_atendimento_p;

			update	agenda_paciente
			set	nr_atendimento		 = NULL,
				nr_cirurgia		 = NULL,
				ie_status_agenda	= 'N'
			where	nr_atendimento	= nr_atendimento_p;
		end if;

		update	paciente_espera
		set	nr_atendimento	 = NULL
		where	nr_atendimento	= nr_atendimento_p;

		delete	from diagnostico_medico
		where	nr_atendimento	= nr_atendimento_p;

		update	atendimento_paciente
		set	nr_Atend_alta	 = NULL
		where	nr_atend_alta	= nr_atendimento_p;

		update	movimento_estoque a
		set	a.nr_prescricao	 = NULL
		where	a.nr_atendimento = nr_atendimento_p /* Ivan em 24/03/2008 OS79981 */
		and	exists (	SELECT	1
					from	prescr_medica b
					where	a.nr_prescricao		= b.nr_prescricao
					and	b.nr_atendimento	= nr_atendimento_p); /* Dalcastagne em 29/03/2007 - Falei com Edilson */
		if (ie_verifica_prescr_w <> 'S') then
			select 	count(1)
			into STRICT	qt_itens_prescr_w
			from	prescr_procedimento a,
				prescr_medica b
			where	a.nr_prescricao = b.nr_prescricao
			and	ie_suspenso <> 'S'
			and	b.nr_atendimento = nr_atendimento_p LIMIT 1;

			if (qt_itens_prescr_w = 0) then
				select 	count(1)
				into STRICT	qt_itens_prescr_w
				from	prescr_material a,
					prescr_medica b
				where	a.nr_prescricao = b.nr_prescricao
				and	ie_suspenso <> 'S'
				and	b.nr_atendimento = nr_atendimento_p LIMIT 1;
			end if;

			if (qt_itens_prescr_w > 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(174985);
			end if;
		end if;

		update	prescr_medica
		set	dt_liberacao  = NULL,
			dt_liberacao_medico  = NULL
		where	nr_atendimento = nr_atendimento_p;

		delete	from prescr_medica
		where	nr_atendimento = nr_atendimento_p;

		delete	from atend_paciente_unidade
		where	nr_atendimento	= nr_atendimento_p;

		delete	from atend_categoria_convenio
		where	nr_atendimento	= nr_atendimento_p;

		delete	from tempo_senha_atend
		where	nr_atendimento	= nr_atendimento_p;

		delete from w_limites_sv_atend
		where	nr_atendimento	= nr_atendimento_p;

		open C01;
		loop
		fetch 	C01 into
			nr_seq_same_hist_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			delete	from same_prontuario_hist
			where	nr_sequencia	= nr_seq_same_hist_w;
			end;
		end loop;
		close C01;

		delete from same_prontuario where nr_atendimento = nr_atendimento_p;

		/* Rafael em 25/2/8 OS84180; Delete do atendimento deve ser a ultima coisa a rodar!!!
		delete	from atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;
		*/
		update	movimento_estoque
		set	nr_atendimento	 = NULL
		where	nr_atendimento	= nr_atendimento_p; /* Dalcastagne em 29/03/2007 - Falei com Edilson */
		select	coalesce(max(nr_devolucao),0)
		into STRICT	nr_devolucao_w
		from	devolucao_material_pac
		where	nr_atendimento = nr_atendimento_p;

		if (nr_devolucao_w	<> 0) then
			select	count(1)
			into STRICT	qt_mat_w
			from	material_atend_paciente
			where 	nr_atendimento		= nr_atendimento_p  LIMIT 1;

			select	count(1)
			into STRICT	qt_proc_w
			from	procedimento_paciente
			where 	nr_atendimento		= nr_atendimento_p  LIMIT 1;

			if (qt_mat_w	= 0) and (qt_proc_w	= 0) then
				delete 	from item_devolucao_material_pac
				where	nr_devolucao		= nr_devolucao_w;

				delete 	from devolucao_material_pac
				where	nr_devolucao		= nr_devolucao_w;
			end if;
		end if;

		select 	max(a.ds_senha_internet)
		into STRICT	ds_senha_w
		from	atendimento_paciente a,
			atend_senha_internet b
		where	a.nr_atendimento 	= nr_atendimento_p
		and	a.nr_atendimento	= b.nr_atendimento;


		if 	((ds_senha_w IS NOT NULL AND ds_senha_w::text <> '') or (ds_senha_w  > 0 ))then	
			CALL gerar_senha_internet(nr_atendimento_p, null, clock_timestamp(), null, ds_senha_w, 'CA');
		end if;

		update	orcamento_paciente
		set		nr_atendimento  = NULL
		where	nr_atendimento = nr_atendimento_p;		

		for r_c_contas_pac in c_contas_pac loop
			begin
				delete 	FROM conta_paciente
				where	nr_interno_conta = r_c_contas_pac.nr_interno_conta;

				gerar_conta_paciente_exclusao(	cd_motivo_exc_conta_w,
								substr( wheb_mensagem_pck.get_texto( 784833, 'NR_ATENDIMENTO=' || nr_atendimento_p ) || ' - ' ||
									wheb_mensagem_pck.get_texto( 784837, 'CONTA=' || r_c_contas_pac.nr_interno_conta ) || ' - ' ||
									wheb_mensagem_pck.get_texto( 784838, 'DS_CONVENIO=' || r_c_contas_pac.cd_convenio_parametro ) || ' - ' ||
									wheb_mensagem_pck.get_texto( 784840, 'DS_JUSTIFICATIVA=' || wheb_mensagem_pck.get_texto( 784841 ) ), 1,255 ),
								nm_usuario_p);			
			exception
			when others then
				null;
			end;
		end loop;

		delete from oft_consulta where nr_atendimento = nr_atendimento_p;

		delete FROM encounter_discharge_prob where nr_atendimento = nr_atendimento_p;

		delete from SMART_ALERT_REGRA_ATEND
		where nr_atendimento = nr_atendimento_p;

		delete from atendimento_alerta
		where nr_atendimento = nr_atendimento_p;
		
		update	GESTAO_VAGA
		set	nr_atendimento  = NULL
		where	nr_atendimento = nr_atendimento_p;

		delete	from atendimento_paciente_inf
		where	nr_atendimento	= nr_atendimento_p;

		delete  from fila_impressao_adt
		where	nr_atendimento = nr_atendimento_p;

		delete	from atendimento_paciente
		where	nr_atendimento	= nr_atendimento_p;

		select	max(ie_setor_rothman)
		into STRICT	ie_setor_rothman_w
		from	setor_atendimento
		where	cd_setor_atendimento	= cd_setor_atendimento_w;

		if (cd_unidade_basica_w IS NOT NULL AND cd_unidade_basica_w::text <> '') and ((ie_leito_monit_w = 'S') or (ie_setor_rothman_w = 'S')) then
			ds_param_integ_hl7_w :=	'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w ||
						'cd_setor_atendimento=' || cd_setor_atendimento_w || ds_sep_bv_w ||
						'cd_unidade_basica=' || cd_unidade_basica_w || ds_sep_bv_w ||
						'cd_unidade_compl=' || cd_unidade_compl_w || ds_sep_bv_w ||
						'cd_estabelecimento=' || cd_estabelecimento_w || ds_sep_bv_w;
			CALL gravar_agend_integracao(21, ds_param_integ_hl7_w);
      -- HCOR ADT A11
      ds_param_integ_hl7_w :=        'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w || 'cd_estabelecimento=' || cd_estabelecimento_w || ds_sep_bv_w || 'nr_atendimento='||nr_atendimento_p||ds_sep_bv_w;
      CALL gravar_agend_integracao(784, ds_param_integ_hl7_w);
			/*Integracao HL7 - Philips monitoramento - Evento de alta de paciente (nesta central o evento de cancelamento de atendimento e o mesmo que de alta)*/

			ds_param_integ_hl7_w :=        'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w ||
						'nm_curto=' || nm_curto_w || ds_sep_bv_w||
						'cd_unidade_basica=' || cd_unidade_basica_w || ds_sep_bv_w||
						'cd_unidade_compl=' || cd_unidade_compl_w || ds_sep_bv_w||
						'cd_estabelecimento=' || cd_estabelecimento_w || ds_sep_bv_w;
			CALL gravar_agend_integracao(127, ds_param_integ_hl7_w);
			
			dbms_job.submit(jobno, 'declare results clob; begin results := bifrost.send_integration_content('''|| 'patient.admission.cancel.monitor' || ''', ''' || json_data_w || ''', ''' || nm_usuario_p || ''', ''' || ie_tasy_backend || ''', ''' || json_headers || '''); end;');

			ds_param_integ_hl7_w :=        'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w ||
						'nm_curto=' || nm_curto_w || ds_sep_bv_w||
						'cd_unidade_basica=' || cd_unidade_basica_w || ds_sep_bv_w||
						'cd_unidade_compl=' || cd_unidade_compl_w || ds_sep_bv_w||
						'cd_estabelecimento=' || cd_estabelecimento_w || ds_sep_bv_w;

            if (substr(l10nger_integrar_adt_orm(cd_pessoa_fisica_w, null, null, null),1,1) = 'S') then
                CALL gravar_agend_integracao(694, ds_param_integ_hl7_w);
            end if;
		end if;
	end if;
	if (ie_exclui_atend_w = 'N') then
		ie_consiste_conta_w := Obter_Param_Usuario(916, 674, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_consiste_conta_w);
		ie_ignora_conta_cancelada_w := Obter_Param_Usuario(916, 828, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_ignora_conta_cancelada_w);		
		if (ie_consiste_conta_w = 'N') then
			select	count(1)
			into STRICT	qt_contas_def_w
			from	conta_paciente a
			where	a.nr_atendimento = nr_atendimento_p
			and	a.ie_status_acerto = 2
			and	((ie_ignora_conta_cancelada_w = 'N') or (coalesce(ie_cancelamento::text, '') = '')) LIMIT 1;
			if (qt_contas_def_w > 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(174987);
			end if;
		end if;
		select 	coalesce(max(nr_seq_mot_susp),0)
		into STRICT	nr_seq_mot_susp_w
		from	parametro_atendimento
		where	cd_estabelecimento = obter_estabelecimento_ativo;
		if (nr_seq_mot_susp_w > 0) then
		begin
			open C05;
			loop
			fetch C05 into	
				nr_prescricao_w;
			EXIT WHEN NOT FOUND; /* apply on C05 */
				begin
				ds_motivo_susp_w :=  substr(wheb_mensagem_pck.get_texto(303633),1,100);-- Prescricao suspensa ao cancelar o atendimento pela EUP.
				CALL Suspender_Prescricao(nr_prescricao_w,nr_seq_mot_susp_w,ds_motivo_susp_w,nm_usuario_p, 'N');
				end;
			end loop;
			close C05;	
		end;
		if (nr_seq_pac_senha_fila_w IS NOT NULL AND nr_seq_pac_senha_fila_w::text <> '') and (qt_horas_desvincula_senha_w > 0) and (ceil(obter_min_entre_datas(dt_entrada_w, clock_timestamp(), 1) / 60) <= qt_horas_desvincula_senha_w) then
			update	atendimento_paciente
			set	nr_seq_pac_senha_fila  = NULL
			where	nr_atendimento = nr_atendimento_p;
			update	paciente_senha_fila
			set	dt_vinculacao_senha  = NULL
			where	nr_sequencia = nr_seq_pac_senha_fila_w;
		end if;	

	end if;

	update	atendimento_paciente
	set	dt_cancelamento = clock_timestamp(),
		nm_usuario_cancelamento = nm_usuario_p
	where	nr_atendimento	= nr_atendimento_p;

	CALL ajustar_atend_controle(cd_pessoa_fisica_p, nm_usuario_p, nr_atendimento_p, null, 'C');

	if (nr_seq_episodio_p IS NOT NULL AND nr_seq_episodio_p::text <> '') and (nr_seq_episodio_p > 0) then
        if (dt_inicio_validade_p IS NOT NULL AND dt_inicio_validade_p::text <> '' AND dt_validade_p IS NOT NULL AND dt_validade_p::text <> '') then
            update  atendimento_paciente_inf
            set     dt_inicio_validade = dt_inicio_validade_p,
                    dt_validade = dt_validade_p
            where   nr_atendimento = (	SELECT	max(nr_atend_original)
										from 	atendimento_paciente
										where 	nr_atendimento = nr_atendimento_p);
        end if;

		update episodio_paciente 
		set nm_usuario_cancelamento     = nm_usuario_p,
			nr_seq_tipo_episodio        = nr_seq_tipo_episodio_p
		where nr_sequencia              = nr_seq_episodio_p;
	end if;

	select obter_atepacu_paciente(nr_atendimento_p,'IAA')
	into STRICT	nr_seq_interno_w
	;

	if (coalesce(nr_seq_interno_w,0) > 0) then

		reg_integracao_p := gerar_int_padrao.gravar_integracao('308', nr_seq_interno_w, coalesce(obter_usuario_ativo,nm_usuario_p), reg_integracao_p);
	end if;

	update 	prescr_medica
	set	nr_seq_agenda  = NULL,
		nr_seq_agecons  = NULL
	where	nr_atendimento = nr_atendimento_p
	and	((nr_seq_agenda IS NOT NULL AND nr_seq_agenda::text <> '') or (nr_seq_agecons IS NOT NULL AND nr_seq_agecons::text <> ''))
	and 	(dt_suspensao IS NOT NULL AND dt_suspensao::text <> '');

	update	oft_consulta
	set		dt_cancelamento 	= 	clock_timestamp()
	where		nr_atendimento		=	nr_atendimento_p;

	select	coalesce(max(ie_limpar_data_integracao),'N')
	into STRICT	ie_limpar_data_integracao_w
	from	parametro_integracao_pacs
	where	cd_estabelecimento = wheb_usuario_pck.get_cd_estabelecimento;		

	if (cd_unidade_basica_w IS NOT NULL AND cd_unidade_basica_w::text <> '') then

			ds_param_integ_hl7_w :=        'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w ||

						'nm_curto=' || nm_curto_w || ds_sep_bv_w||

						'cd_unidade_basica=' || cd_unidade_basica_w || ds_sep_bv_w||

						'cd_unidade_compl=' || cd_unidade_compl_w || ds_sep_bv_w||

						'cd_estabelecimento=' || cd_estabelecimento_w || ds_sep_bv_w;

            if (substr(l10nger_integrar_adt_orm(cd_pessoa_fisica_w, null, null, null),1,1) = 'S') then
                CALL gravar_agend_integracao(694, ds_param_integ_hl7_w);
            end if;

	end if;
	-- HCOR ADT A11
	ds_param_integ_hl7_w :=        'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w || 'cd_estabelecimento=' || cd_estabelecimento_w || ds_sep_bv_w || 'nr_atendimento='||nr_atendimento_p||ds_sep_bv_w;
	ds_param_integration_w :=  '{"PATIENT_ID" : "' || cd_pessoa_fisica_w || '"' ||
			' , "ENCOUNTER_ID" : ' || nr_atendimento_p || '}';
	CALL gravar_agend_integracao(784, ds_param_integ_hl7_w);
	
	CALL call_bifrost_content('patient.admission.cancel.monitor','encounter_json_pck.get_encounter_message_clob('||nr_atendimento_p||')', nm_usuario_p);
	CALL call_bifrost_content('patient.admission.cancel','encounter_json_pck.get_encounter_message_clob('||nr_atendimento_p||')', nm_usuario_p);

	if (ie_limpar_data_integracao_w = 'S') then
		begin		
		update	prescr_procedimento a
		set 	a.dt_integracao  = NULL
		where	a.nr_prescricao in (SELECT b.nr_prescricao
					     from prescr_medica b
					     where b.nr_atendimento = nr_atendimento_p)
		and	coalesce(a.nr_seq_exame::text, '') = ''
		and	(a.dt_integracao IS NOT NULL AND a.dt_integracao::text <> '');
		end;
	end if;


		if (ie_cancela_atend_prev_w = 'S') then
			open C03;
			loop
			fetch C03 into
				nr_sequencia_w,
				cd_agenda_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				/*update	agenda_consulta
				set	nr_atendimento	= null
				where	nr_Sequencia	= nr_sequencia_w;*/
				CALL alterar_status_agecons(cd_agenda_w, nr_sequencia_w, 'C', nr_motivo_canc_cons_w, null, 'N', nm_usuario_p, null);
				end;
			end loop;
			close C03;
			open C04;
			loop
			fetch C04 into
				nr_sequencia_exame_w,
				cd_agenda_exame_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin
				/*update	agenda_paciente
				set	nr_atendimento	= null
				where	nr_Sequencia	= nr_sequencia_exame_w;*/
				CALL alterar_status_agenda(cd_agenda_exame_w, nr_sequencia_exame_w, 'C', nr_motivo_canc_exame_w, null, 'N', nm_usuario_p);
				end;
			end loop;
			close C04;
		end if;
		if (ie_exclui_itens_atend_w = 'S') then
			open C02;
			loop
			fetch C02 into
				nr_interno_conta_w,
				cd_convenio_parametro_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				select	count(1)
				into STRICT	qt_regra_w
				from	conv_proc_cancel_atend
				where	cd_convenio = cd_convenio_parametro_w  LIMIT 1;
				if (qt_regra_w > 0) then
					select	count(1)
					into STRICT 	qt_item_Conta_w
					from	material_atend_paciente
					where	nr_interno_conta = nr_interno_conta_w  LIMIT 1;
					if (qt_item_Conta_w = 0) then
						select	count(1)
						into STRICT 	qt_item_Conta_w
						from	procedimento_paciente a
						where	a.nr_interno_conta = nr_interno_conta_w
						and	not exists (SELECT	1
										from	conv_proc_cancel_atend x
										where	x.cd_convenio		= a.cd_convenio
										and	x.cd_procedimento	= a.cd_procedimento
										and	x.ie_origem_proced	= a.ie_origem_proced) LIMIT 1;
					end if;
				end if;
				if (qt_item_Conta_w = 0) and (cd_motivo_exc_conta_w > 0) then
					update	procedimento_paciente
					set 	cd_motivo_exc_conta	= cd_motivo_exc_conta_w,
						nr_interno_conta	 = NULL
					where	nr_interno_conta 	= nr_interno_conta_w;

					update	material_atend_paciente
					set 	cd_motivo_exc_conta	= cd_motivo_exc_conta_w,
						nr_interno_conta	 = NULL
					where	nr_interno_conta 	= nr_interno_conta_w;
					CALL recalcular_conta_paciente(nr_interno_conta_w,nm_usuario_p);
				end if;
				end;
			end loop;
			close C02;
		end if;
	end if;
	insert	into atendimento_cancelamento(
		nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		nr_atendimento,
		cd_pessoa_fisica,
		cd_pessoa_atendimento,
		nr_seq_motivo,
		ds_observacao,
		cd_setor_atendimento,
		cd_convenio,
		cd_medico,
		dt_entrada
	)	SELECT	nextval('atendimento_cancelamento_seq'),
		clock_timestamp(),
		nm_usuario_p,
		nr_atendimento_p,
		cd_pessoa_fisica_p,
		cd_pessoa_fisica_w,
		nr_seq_motivo_p,
		substr(ds_observacao_p,1,2000),
		cd_setor_w,
		cd_convenio_w,
		cd_medico_resp_w,
		dt_entrada_w
	;
	begin
	select	max(b.ds_motivo)
	into STRICT	ds_motivo_w
	from	atendimento_cancelamento a,
		motivo_cancel_atend b
	where	a.nr_seq_motivo		= b.nr_sequencia
	and	a.nr_seq_motivo		= nr_seq_motivo_p
	and	a.nr_atendimento	= nr_atendimento_p;
	exception
		when others then
			ds_motivo_w	:= substr(wheb_mensagem_pck.get_texto(303638)|| ' - ' ||sqlerrm,1,255);-- Motivo nao informado
	end;
	if (ie_exclui_atend_w = 'S') then
		begin
		--Atendimento cancelado: #@NR_ATENDIMENTO_P#@, Paciente: #@NM_PESSOA_FISICA_P#@, Data de Entrada: #@DT_ENTRADA_P#@, Motivo : #@DS_MOTIVO_P#@
		ds_texto_ww := substr(wheb_mensagem_pck.get_texto(303647,'NR_ATENDIMENTO_P='|| nr_atendimento_p ||
									';NM_PESSOA_FISICA_P='|| nm_pessoa_fisica_w ||
									';DT_ENTRADA_P='|| PKG_DATE_FORMATERS.TO_VARCHAR(dt_entrada_w, 'shortDate', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p) ||
									';DS_MOTIVO_P='|| ds_motivo_w),1,2000);
		CALL gravar_log_exclusao('ATENDIMENTO_PACIENTE',nm_usuario_p,ds_texto_w,'N');
		end;
	end if;

	/*			I N T E G R A C A O  -  G E R I N T				
	Evento 7: Servico de Reversao da Internacao*/
	if (obter_dados_param_atend(cd_estabelecimento_w,'GI') = 'S') and (obter_tipo_atendimento(nr_atendimento_p) = 1) then

		select 	coalesce(max(cd_unidade_basica),'0'),
				coalesce(max(cd_unidade_compl),'0'),
				coalesce(max(cd_setor_atendimento),'0')
		into STRICT	cd_unidade_basica_gerint_w,
				cd_unidade_compl_gerint_w,
				cd_setor_atendimento_gerint_w
		from	gerint_solic_internacao
		where	nr_atendimento = nr_atendimento_p
		and		ie_situacao = 'A';

		select	coalesce(max(A.ie_gerint),'N')
		into STRICT	ie_gerint_w
		from 	unidade_atendimento A
		where 	A.cd_unidade_basica		= cd_unidade_basica_gerint_w
		and 	A.cd_unidade_compl  	    = cd_unidade_compl_gerint_w
		and 	A.cd_setor_atendimento 	= cd_setor_atendimento_gerint_w;


		if (obter_tipo_convenio_atend(nr_atendimento_p) = 3 or ie_gerint_w = 'S') then
			ds_sep_bv_w	:=	obter_separador_bv;	

			CALL exec_sql_dinamico_bv('TASY', Gerint_desc_de_para('QUERY'), 	'nm_usuario_p='					|| nm_usuario_p	 			|| ds_sep_bv_w ||
																		'cd_estabelecimento_p=' 		|| cd_estabelecimento_w		|| ds_sep_bv_w ||
																		'id_evento_p=' 					|| '7'				 		|| ds_sep_bv_w ||
																		'nr_atendimento_p=' 			|| nr_atendimento_p 		|| ds_sep_bv_w ||
																		'ie_leito_extra_p=' 			|| null				 		|| ds_sep_bv_w ||
																		'dt_alta_p=' 					|| null						|| ds_sep_bv_w ||
																		'ds_motivo_alta_p=' 			|| null						|| ds_sep_bv_w ||
																		'ds_justif_transferencia_p='	|| null 					|| ds_sep_bv_w ||
																		'nr_seq_solic_internacao_p=' 	|| null 					|| ds_sep_bv_w ||
																		'nr_seq_leito_p=' 				|| null						|| ds_sep_bv_w ||
																		'ds_ident_leito_p='				|| null						|| ds_sep_bv_w ||
																		'nr_seq_classif_p=' 			|| null						|| ds_sep_bv_w ||
																		'ie_status_unidade_p=' 			|| null						|| ds_sep_bv_w ||
																		'nr_cpf_paciente_p=' 			|| null						|| ds_sep_bv_w ||
																		'nr_cartao_sus_p=' 				|| null						|| ds_sep_bv_w ||
																		'cd_cid_p='						|| null						|| ds_sep_bv_w ||
																		'cd_evolucao_p='				|| null);
		end if;
	end if;
	/*		I N T E G R A C A O  -  G E R I N T  -  F I M		*/

	if (ie_libera_leito_pac_w = 'S') and (ie_exclui_atend_w = 'N') then	
		select	coalesce(max(ie_leito_livre),'N')
		into STRICT	ie_leito_livre_w
		from	parametro_atendimento
		where	cd_estabelecimento	=	cd_estabelecimento_w;	

		update	unidade_atendimento a		
		set 	a.nr_atendimento   	 = NULL,
			a.dt_entrada_unidade  	 = NULL,
			a.ie_status_unidade   	=
			CASE WHEN coalesce(a.ie_higienizacao,'N')='N' THEN				CASE WHEN coalesce(a.cd_paciente_reserva,a.nm_pac_reserva) = NULL THEN 'L'  ELSE 'R' END   ELSE CASE WHEN ie_leito_livre_w='N' THEN a.ie_higienizacao  ELSE 'L' END  END ,
			a.nm_usuario = coalesce(nm_usuario_p, 'Tasy'),
			a.dt_atualizacao = clock_timestamp()
		where 	a.nr_atendimento    	= nr_atendimento_p;

        if (obter_se_atendimento_futuro(nr_atendimento_p) = 'S' and (coalesce(pkg_i18n.get_user_locale, 'pt_BR') in ('de_DE', 'de_AT')))then
            update	atend_paciente_unidade u
            set 	u.dt_saida_unidade	= u.dt_entrada_unidade
            where 	u.nr_atendimento    = nr_atendimento_p
            and	coalesce(u.dt_saida_unidade::text, '') = '';
        else
            update	atend_paciente_unidade u
            set 	u.dt_saida_unidade	= clock_timestamp()
            where 	u.nr_atendimento    = nr_atendimento_p
            and	coalesce(u.dt_saida_unidade::text, '') = '';
        end if;

		CALL atualizar_unidade_atendimento(	cd_setor_atendimento_w,
						cd_unidade_basica_w,
						cd_unidade_compl_w);					

	end if;	

	select 	max(a.ds_senha_internet)
	into STRICT	ds_senha_w
	from	atendimento_paciente a,
		atend_senha_internet b
	where	a.nr_atendimento 	= nr_atendimento_p
	and	a.nr_atendimento	= b.nr_atendimento;


	if 	((ds_senha_w IS NOT NULL AND ds_senha_w::text <> '') or (ds_senha_w  > 0 ))then	
		CALL gerar_senha_internet(nr_atendimento_p, null, clock_timestamp(), null, ds_senha_w, 'CA');
	end if;

	select	count(1)
	into STRICT	qt_reg_tasklist
	from	wl_worklist
	where	nr_atendimento = nr_atendimento_p
	and	coalesce(dt_final_real::text, '') = '' LIMIT 1;

	if (qt_reg_tasklist > 0) then
		update wl_worklist
		set		dt_final_real = clock_timestamp(),
				nm_usuario = coalesce(nm_usuario_p, 'Tasy'),
				dt_atualizacao = clock_timestamp(),
				ie_cancelado = 'S'
		where	nr_atendimento = nr_atendimento_p
		and		coalesce(dt_final_real::text, '') = '';
	end if;

	if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cancelar_atendimento_paciente (nr_atendimento_p bigint, nm_usuario_p text, nr_seq_motivo_p bigint, cd_pessoa_fisica_p text, ds_observacao_p text, nr_seq_episodio_p bigint default 0, nr_seq_tipo_episodio_p bigint default 0, ie_cancel_encounter_click text default 'N', dt_inicio_validade_p timestamp default null, dt_validade_p timestamp default null) FROM PUBLIC;

