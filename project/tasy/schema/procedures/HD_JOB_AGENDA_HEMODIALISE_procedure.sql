-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function hd_job_agenda_hemodialise as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE PROCEDURE hd_job_agenda_hemodialise () AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

BEGIN
	v_query := 'CALL hd_job_agenda_hemodialise_atx ()';
	PERFORM * FROM dblink(v_conn_str, v_query) AS p (ret boolean);

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE PROCEDURE hd_job_agenda_hemodialise_atx () AS $body$
DECLARE

    nm_usuario_w varchar(255) := coalesce(wheb_usuario_pck.get_nm_usuario, 'TASY');
	result_out_w varchar(1000);i RECORD;
  x RECORD;

BEGIN

    BEGIN
        FOR i IN (SELECT c.nr_sequencia FROM hd_ponto_acesso c WHERE coalesce(cd_agenda::text, '') = '') LOOP
            /* -- Cria Agenda de Servico */

            CALL hd_gerar_agenda_servico(nr_seq_ponto_p => i.nr_sequencia);
	
        END LOOP;
    END;

    BEGIN
        FOR i IN (SELECT prc.cd_pessoa_fisica FROM hd_pac_renal_cronico prc ORDER BY cd_pessoa_fisica) LOOP
            /*-- Cria Agenda de Hemodialise  (AtepacHD) */

            result_out_p =>result_out_w := hd_gerar_agenda(cd_pessoa_fisica_p => i.cd_pessoa_fisica, result_out_p =>result_out_w);
	    COMMIT;
        END LOOP;
    END;

    BEGIN
        FOR i IN (SELECT had.nr_sequencia
                    FROM hd_agenda_dialise had
                   WHERE coalesce(had.nr_seq_agenda::text, '') = ''
                     AND had.dt_agenda >= trunc(clock_timestamp())
                   ORDER BY had.cd_pessoa_fisica,
                            had.dt_agenda) LOOP
            /*-- Gera Agendamento de "Servico" (AtepacAN) */

            CALL hd_gerar_agendamento_servico(nr_seq_agenda_dialise_p => i.nr_sequencia);
	    COMMIT;
        END LOOP;
    END;

    BEGIN
        /*-- Gera Autorizacao das agendas de Consulta */

        FOR x IN (SELECT ac.nr_sequencia  AS nr_seq_age_consulta,
                         had.nr_sequencia AS nr_seq_age_hemo
                    FROM hd_agenda_dialise had,
                         agenda_consulta   ac
                   WHERE had.nr_seq_agenda = ac.nr_sequencia
                     AND coalesce(ac.nr_seq_agenda_sessao::text, '') = ''
                     AND had.dt_agenda >= trunc(clock_timestamp())
                   ORDER BY had.cd_pessoa_fisica,
                            had.dt_agenda) LOOP
            FOR i IN (SELECT nr_sequencia AS nr_seq_agenda_proc_adic,
                             nr_seq_proc_interno
                        FROM agenda_consulta_proc
                       WHERE nr_seq_agenda = x.nr_seq_age_consulta) LOOP

                CALL gerar_autor_regra(ie_evento_p               => 'GIR',
                                  nr_seq_agenda_consulta_p  => x.nr_seq_age_consulta,
                                  nr_seq_proc_interno_p     => i.nr_seq_proc_interno,
                                  nr_atendimento_p          => NULL,
                                  nm_usuario_p              => nm_usuario_w,
                                  nr_seq_agenda_p           => NULL,
                                  nr_seq_material_p         => NULL,
                                  nr_seq_proced_p           => NULL,
                                  nr_prescricao_p           => NULL,
                                  nr_seq_mat_prescr_p       => NULL,
                                  nr_seq_proc_prescr_p      => NULL,
                                  nr_seq_gestao_p           => NULL,
                                  nr_seq_agenda_pac_opme_p  => NULL,
                                  nr_seq_agenda_proc_adic_p => i.nr_seq_agenda_proc_adic);
		COMMIT;

            END LOOP;
            UPDATE hd_agenda_dialise had
               SET had.dt_atualizacao = clock_timestamp(),
                   had.nm_usuario     = nm_usuario_w,
                   had.nr_seq_agenda  = x.nr_seq_age_consulta
             WHERE nr_sequencia = x.nr_seq_age_hemo;

            COMMIT;
        END LOOP;
    END;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hd_job_agenda_hemodialise () FROM PUBLIC; -- REVOKE ALL ON PROCEDURE hd_job_agenda_hemodialise_atx () FROM PUBLIC;

