-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_tecnica_anestesica_multi (nr_cirurgia_p bigint default 0, nr_seq_pepo_p bigint default 0, cd_profissional_p text DEFAULT NULL, nr_lista_p text DEFAULT NULL, nm_usuario_p text DEFAULT NULL, cd_estabelecimento_p bigint DEFAULT NULL, nr_seq_anest_desc_p bigint DEFAULT NULL, ie_opcao_p text DEFAULT NULL) AS $body$
DECLARE

/* ie_opcao_p
U = update por NR_SEQ_PEPO
F = insert por NR_SEQ_PEPO
C = insert por NR_CIRURGIA
UC = update por NR_CIRURGIA
*/
nr_seq_tecnica_w		tecnica_anestesica.nr_sequencia%type;
ds_texto_padrao_w		tecnica_anestesica.ds_texto_padrao_clob%type := '';
ds_texto_padrao_aux_w	tecnica_anestesica.ds_texto_padrao_clob%type := '';
ds_header_font_w	tecnica_anestesica.ds_texto_padrao_clob%type := '';
ds_header_color_w	tecnica_anestesica.ds_texto_padrao_clob%type := '';
ds_body_text_w	tecnica_anestesica.ds_texto_padrao_clob%type := '';
ds_body_text_buffer_w	tecnica_anestesica.ds_texto_padrao_clob%type := '';
ds_text_buffer_w	tecnica_anestesica.ds_texto_padrao_clob%type := '';
ds_second_text_buffer_w	tecnica_anestesica.ds_texto_padrao_clob%type := '';
ds_final_text_w	tecnica_anestesica.ds_texto_padrao_clob%type := '';
qt_colors_w	bigint := 0;
qt_fonts_w	bigint := 0;
i	bigint := 0;
ds_tag_color_origem_alt_w varchar(1024);

c01 CURSOR FOR /*Era a consulta  452570*/
	SELECT 	coalesce(a.ds_texto_padrao_clob, a.ds_texto_padrao) ds_texto_padrao,
			a.nr_sequencia nr_seq_tec
	from   	tecnica_anestesica a,
			cirurgia_tec_anestesica b
	where	a.nr_sequencia = b.nr_seq_tecnica
	and		b.nr_seq_pepo  = nr_seq_pepo_p
	and		coalesce(b.ie_situacao,'A') = 'A'
	and		obter_se_contido(a.nr_sequencia, NR_LISTA_P) = 'S'
	order by a.nr_sequencia desc;

c02 CURSOR FOR	/*Era a consulta 359002 e 452745 */
	SELECT	coalesce(a.ds_texto_padrao_clob, a.ds_texto_padrao) ds_texto_padrao,
			a.nr_sequencia nr_seq_tec
	from	tecnica_anestesica a,
			cirurgia_tec_anestesica b
	where	a.nr_sequencia = b.nr_seq_tecnica
	and		((nr_cirurgia_p <> 0 AND b.nr_cirurgia = nr_cirurgia_p) or
			(nr_seq_pepo_p <> 0 AND b.nr_seq_pepo = nr_seq_pepo_p))
	and		((a.cd_estabelecimento = cd_estabelecimento_p) or (coalesce(a.cd_estabelecimento::text, '') = ''))
	and		coalesce(b.ie_situacao,'A') = 'A'
	and ((a.ds_texto_padrao_clob IS NOT NULL AND a.ds_texto_padrao_clob::text <> '') or (a.ds_texto_padrao IS NOT NULL AND a.ds_texto_padrao::text <> ''))
	order by a.nr_sequencia desc;

	Procedure insert_anestesia_descricao(ds_texto_padrao_p 		text,
										nr_seq_tecnica_p 		bigint,
										nr_seq_anest_desc_pp 	bigint) is
	nr_seq_anest_desc_w		anestesia_descricao.nr_sequencia%type;
	
BEGIN
		if (coalesce(nr_seq_anest_desc_pp, 0) > 0) then
			nr_seq_anest_desc_w := nr_seq_anest_desc_pp;
		else
			select 	nextval('anestesia_descricao_seq')
			into STRICT 	nr_seq_anest_desc_w
			;

			insert into anestesia_descricao(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_cirurgia,
				cd_responsavel,
				ds_anestesia,
				ie_tipo_descricao,
				nr_seq_pepo,
				ie_situacao,
				nr_seq_tecnica)
			SELECT	nr_seq_anest_desc_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				CASE WHEN nr_cirurgia_p=0 THEN  null  ELSE nr_cirurgia_p END ,
				cd_profissional_p,
				' ',
				'P',
				CASE WHEN nr_seq_pepo_p=0 THEN  null  ELSE nr_seq_pepo_p END ,
				'A',
				nr_seq_tecnica_p
			;

			commit;
		end if;

		if (octet_length(ds_texto_padrao_p) < 65528) then
			CALL GRAVAR_VARCHAR_PARA_LONG(substr(ds_texto_padrao_p,1, 32764),
									substr(ds_texto_padrao_p,32764, 65528),
									'anestesia_descricao',
									'ds_anestesia',
									'where nr_sequencia = :nr_sequencia_p ',
									'nr_sequencia_p=' || nr_seq_anest_desc_w);
		else
			update	anestesia_descricao
			set		ds_anestesia = obter_expressao_dic_objeto(1071511)
			where 	nr_sequencia = nr_seq_anest_desc_w;
		end if;

		commit;

	end;

BEGIN
if (ie_opcao_p = 'F') then
	begin
	ds_texto_padrao_aux_w := ' ';
	open c01;
		loop
		fetch c01 into
			ds_texto_padrao_w,
			nr_seq_tecnica_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
				ds_texto_padrao_w := regexp_replace(ds_texto_padrao_w, '}', '', instr(ds_texto_padrao_w ,' ',-1));
				ds_texto_padrao_w := regexp_replace(ds_texto_padrao_w, '{\\stylesheet.*;}}', '', 1, 1, 'n');
				ds_body_text_buffer_w := regexp_replace(ds_texto_padrao_w, '{\\.*}?|}\s*|\\red\d+\\green\d+\\blue\d+;\s*', '');

				ds_text_buffer_w := regexp_substr(ds_texto_padrao_w, '{\\fonttbl.*;}}', 1, 1, 'n');

				i := 0;
				while regexp_like(ds_text_buffer_w, '{\\f\d+[^;]*;}') loop
					ds_second_text_buffer_w :=  regexp_substr(ds_text_buffer_w, '{\\f\d+[^;]*;}');
					ds_second_text_buffer_w := regexp_replace(ds_second_text_buffer_w, '\\f'||i, '\\f'||(qt_fonts_w+i));
					ds_header_font_w := ds_header_font_w || ds_second_text_buffer_w || chr(13);
					ds_text_buffer_w := regexp_replace(ds_text_buffer_w, '{\\f\d+[^;]*;}', '', 1, 1);
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\f'||i, '\\f-XpTo'||(qt_fonts_w+i));
					i := i + 1;
				end loop;

				qt_fonts_w := qt_fonts_w + i;
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\f-XpTo', '\\f');

				ds_text_buffer_w := regexp_substr(ds_texto_padrao_w, '{\\colortbl ?;[^}]*}');

				i := 0;
				while regexp_like(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;') loop
					i := i + 1;
					ds_header_color_w := ds_header_color_w || regexp_substr(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;') || chr(13);
					ds_text_buffer_w := regexp_replace(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;', '', 1, 1);
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\cf'||i, '\\cf-XpTo'||(qt_colors_w+i));
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\chcbpat'||i, '\\chcbpat-XpTo'||(qt_colors_w+i));
				end loop;

				qt_colors_w := qt_colors_w + i;
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\cf-XpTo', '\\cf');
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\chcbpat-XpTo', '\\chcbpat');
				ds_body_text_w := ds_body_text_w || ds_body_text_buffer_w;
			end;
		end loop;
	close c01;
	ds_final_text_w := '{\rtf1\ansi\deff0' || '{\fonttbl' || ds_header_font_w || '}' || '{\colortbl;' || ds_header_color_w || '}' || ds_body_text_w || '}';
	insert_anestesia_descricao(ds_final_text_w, null, 0);
	end;
elsif ((ie_opcao_p = 'U') and
	coalesce(nr_seq_anest_desc_p,0) > 0) then
	begin
	ds_texto_padrao_aux_w := ' ';
	open c01;
		loop
		fetch c01 into
			ds_texto_padrao_w,
			nr_seq_tecnica_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
				ds_texto_padrao_w := regexp_replace(ds_texto_padrao_w, '}', '', instr(ds_texto_padrao_w ,' ',-1));
				ds_texto_padrao_w := regexp_replace(ds_texto_padrao_w, '{\\stylesheet.*;}}', '', 1, 1, 'n');
				ds_body_text_buffer_w := regexp_replace(ds_texto_padrao_w, '{\\.*}?|}\s*|\\red\d+\\green\d+\\blue\d+;\s*', '');

				ds_text_buffer_w := regexp_substr(ds_texto_padrao_w, '{\\fonttbl.*;}}', 1, 1, 'n');

				i := 0;
				while regexp_like(ds_text_buffer_w, '{\\f\d+[^;]*;}') loop
					ds_second_text_buffer_w :=  regexp_substr(ds_text_buffer_w, '{\\f\d+[^;]*;}');
					ds_second_text_buffer_w := regexp_replace(ds_second_text_buffer_w, '\\f'||i, '\\f'||(qt_fonts_w+i));
					ds_header_font_w := ds_header_font_w || ds_second_text_buffer_w || chr(13);
					ds_text_buffer_w := regexp_replace(ds_text_buffer_w, '{\\f\d+[^;]*;}', '', 1, 1);
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\f'||i, '\\f-XpTo'||(qt_fonts_w+i));
					i := i + 1;
				end loop;

				qt_fonts_w := qt_fonts_w + i;
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\f-XpTo', '\\f');

				ds_text_buffer_w := regexp_substr(ds_texto_padrao_w, '{\\colortbl ?;[^}]*}');

				i := 0;
				while regexp_like(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;') loop
					i := i + 1;
					ds_header_color_w := ds_header_color_w || regexp_substr(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;') || chr(13);
					ds_text_buffer_w := regexp_replace(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;', '', 1, 1);
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\cf'||i, '\\cf-XpTo'||(qt_colors_w+i));
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\chcbpat'||i, '\\chcbpat-XpTo'||(qt_colors_w+i));
				end loop;

				qt_colors_w := qt_colors_w + i;
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\cf-XpTo', '\\cf');
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\chcbpat-XpTo', '\\chcbpat');
				ds_body_text_w := ds_body_text_w || ds_body_text_buffer_w;
			end;
		end loop;
	close c01;
	ds_final_text_w := '{\rtf1\ansi\deff0' || '{\fonttbl' || ds_header_font_w || '}' || '{\colortbl;' || ds_header_color_w || '}' || ds_body_text_w || '}';
	insert_anestesia_descricao(ds_final_text_w, null, nr_seq_anest_desc_p);
	end;
elsif (ie_opcao_p = 'C') then
	begin
	ds_texto_padrao_aux_w := ' ';
	open c02;
		loop
		fetch c02 into
			ds_texto_padrao_w,
			nr_seq_tecnica_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
				ds_texto_padrao_w := regexp_replace(ds_texto_padrao_w, '}', '', instr(ds_texto_padrao_w ,' ',-1));
				ds_texto_padrao_w := regexp_replace(ds_texto_padrao_w, '{\\stylesheet.*;}}', '', 1, 1, 'n');
				ds_body_text_buffer_w := regexp_replace(ds_texto_padrao_w, '{\\.*}?|}\s*|\\red\d+\\green\d+\\blue\d+;\s*', '');

				ds_text_buffer_w := regexp_substr(ds_texto_padrao_w, '{\\fonttbl.*;}}', 1, 1, 'n');

				i := 0;
				while regexp_like(ds_text_buffer_w, '{\\f\d+[^;]*;}') loop
					ds_second_text_buffer_w :=  regexp_substr(ds_text_buffer_w, '{\\f\d+[^;]*;}');
					ds_second_text_buffer_w := regexp_replace(ds_second_text_buffer_w, '\\f'||i, '\\f'||(qt_fonts_w+i));
					ds_header_font_w := ds_header_font_w || ds_second_text_buffer_w || chr(13);
					ds_text_buffer_w := regexp_replace(ds_text_buffer_w, '{\\f\d+[^;]*;}', '', 1, 1);
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\f'||i, '\\f-XpTo'||(qt_fonts_w+i));
					i := i + 1;
				end loop;

				qt_fonts_w := qt_fonts_w + i;
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\f-XpTo', '\\f');

				ds_text_buffer_w := regexp_substr(ds_texto_padrao_w, '{\\colortbl ?;[^}]*}');

				i := 0;
				while regexp_like(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;') loop
					i := i + 1;
					ds_header_color_w := ds_header_color_w || regexp_substr(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;') || chr(13);
					ds_text_buffer_w := regexp_replace(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;', '', 1, 1);
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\cf'||i, '\\cf-XpTo'||(qt_colors_w+i));
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\chcbpat'||i, '\\chcbpat-XpTo'||(qt_colors_w+i));
				end loop;

				qt_colors_w := qt_colors_w + i;
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\cf-XpTo', '\\cf');
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\chcbpat-XpTo', '\\chcbpat');
				ds_body_text_w := ds_body_text_w || ds_body_text_buffer_w;
			end;
		end loop;
	close c02;
	ds_final_text_w := '{\rtf1\ansi\deff0' || '{\fonttbl' || ds_header_font_w || '}' || '{\colortbl;' || ds_header_color_w || '}' || ds_body_text_w || '}';
	insert_anestesia_descricao(ds_final_text_w, null, 0);
	end;
elsif ((ie_opcao_p = 'UC') and
	coalesce(nr_seq_anest_desc_p,0) > 0) then
	begin
	ds_texto_padrao_aux_w := ' ';

	open c02;
		loop
		fetch c02 into
			ds_texto_padrao_w,
			nr_seq_tecnica_w;
		EXIT WHEN NOT FOUND; /* apply on c02 */
			begin
				ds_texto_padrao_w := regexp_replace(ds_texto_padrao_w, '}', '', instr(ds_texto_padrao_w ,' ',-1));
				ds_texto_padrao_w := regexp_replace(ds_texto_padrao_w, '{\\stylesheet.*;}}', '', 1, 1, 'n');
				ds_body_text_buffer_w := regexp_replace(ds_texto_padrao_w, '{\\.*}?|}\s*|\\red\d+\\green\d+\\blue\d+;\s*', '');

				ds_text_buffer_w := regexp_substr(ds_texto_padrao_w, '{\\fonttbl.*;}}', 1, 1, 'n');

				i := 0;
				while regexp_like(ds_text_buffer_w, '{\\f\d+[^;]*;}') loop
					ds_second_text_buffer_w :=  regexp_substr(ds_text_buffer_w, '{\\f\d+[^;]*;}');
					ds_second_text_buffer_w := regexp_replace(ds_second_text_buffer_w, '\\f'||i, '\\f'||(qt_fonts_w+i));
					ds_header_font_w := ds_header_font_w || ds_second_text_buffer_w || chr(13);
					ds_text_buffer_w := regexp_replace(ds_text_buffer_w, '{\\f\d+[^;]*;}', '', 1, 1);
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\f'||i, '\\f-XpTo'||(qt_fonts_w+i));
					i := i + 1;
				end loop;

				qt_fonts_w := qt_fonts_w + i;
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\f-XpTo', '\\f');

				ds_text_buffer_w := regexp_substr(ds_texto_padrao_w, '{\\colortbl ?;[^}]*}');

				i := 0;
				while regexp_like(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;') loop
					i := i + 1;
					ds_header_color_w := ds_header_color_w || regexp_substr(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;') || chr(13);
					ds_text_buffer_w := regexp_replace(ds_text_buffer_w, '\\red\d+\\green\d+\\blue\d+;', '', 1, 1);
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\cf'||i, '\\cf-XpTo'||(qt_colors_w+i));
					ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\chcbpat'||i, '\\chcbpat-XpTo'||(qt_colors_w+i));
				end loop;

				qt_colors_w := qt_colors_w + i;
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\cf-XpTo', '\\cf');
				ds_body_text_buffer_w := regexp_replace(ds_body_text_buffer_w,  '\\chcbpat-XpTo', '\\chcbpat');
				ds_body_text_w := ds_body_text_w || ds_body_text_buffer_w;
			end;
		end loop;
	close c02;
	ds_final_text_w := '{\rtf1\ansi\deff0' || '{\fonttbl' || ds_header_font_w || '}' || '{\colortbl;' || ds_header_color_w || '}' || ds_body_text_w || '}';
	insert_anestesia_descricao(ds_final_text_w, null, nr_seq_anest_desc_p);
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_tecnica_anestesica_multi (nr_cirurgia_p bigint default 0, nr_seq_pepo_p bigint default 0, cd_profissional_p text DEFAULT NULL, nr_lista_p text DEFAULT NULL, nm_usuario_p text DEFAULT NULL, cd_estabelecimento_p bigint DEFAULT NULL, nr_seq_anest_desc_p bigint DEFAULT NULL, ie_opcao_p text DEFAULT NULL) FROM PUBLIC;

