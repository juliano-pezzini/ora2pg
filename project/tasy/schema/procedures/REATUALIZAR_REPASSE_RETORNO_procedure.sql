-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE reatualizar_repasse_retorno ( nr_seq_procedimento_p bigint, nr_seq_retorno_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_status_retorno_w	varchar(10);
nr_interno_conta_w	bigint;
cont_w			bigint;
cont_orig_w		bigint;
cont_proc_w		bigint;
nr_seq_retorno_adic_w	bigint;
nr_sequencia_w		bigint;
nr_repasse_terceiro_w	bigint;
nr_lote_contabil_w		bigint;
cd_estabelecimento_w	bigint;
cd_medico_resp_w		varchar(10);
ie_tipo_atendimento_w	bigint;
cd_convenio_w		bigint;
cd_categoria_w		bigint;
dt_entrada_w		timestamp;
ie_tipo_convenio_w	bigint;
cd_edicao_amb_w		bigint;
ie_status_w		varchar(255);
nr_seq_procrep_w		bigint;
nr_seq_particip_w		bigint;
nr_repasse_origem_w	bigint;
nr_seq_terc_origem_w	bigint;
nr_seq_proc_origem_w	bigint;
nr_lote_contabil_origem_w	bigint;
ie_status_origem_w	varchar(255);
ie_cancelamento_origem_w	varchar(255);
ie_repasse_estorno_w	varchar(255);
nr_interno_conta_rep_w	bigint;
nr_seq_repasse_w		bigint;
ie_data_liberacao_w	varchar(255);
ie_estornar_rep_desdob_w	varchar(255);
nr_sequencia_orig_w	bigint;
nr_repasse_terceiro_orig_w	bigint;
nr_lote_contabil_orig_w	bigint;
ie_status_orig_w		varchar(255);
vl_repasse_new_w		double precision;
vl_liberado_new_w		double precision;
nr_seq_proc_rep_old_w	bigint;
vl_repasse_old_w		double precision;
vl_liberado_old_w		double precision;
nr_seq_origem_w		bigint;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.nr_repasse_terceiro,
	a.nr_lote_contabil,
	a.nr_seq_origem
from	procedimento_repasse a
where	a.nr_seq_procedimento	= nr_seq_procedimento_p

union

select	a.nr_sequencia,
	a.nr_repasse_terceiro,
	a.nr_lote_contabil,
	a.nr_Seq_origem
from	procedimento_repasse a,
	convenio_retorno_glosa b,
	convenio_retorno_item c
where	a.nr_seq_procedimento	= b.nr_seq_propaci
and	b.nr_seq_ret_item		= c.nr_sequencia
and	c.nr_seq_retorno		= nr_seq_retorno_p
order by	nr_seq_origem desc;

c02 CURSOR FOR
SELECT	a.nr_sequencia,
	a.nr_repasse_terceiro,
	a.nr_lote_contabil
from	procedimento_repasse a
where	nr_seq_origem		= nr_sequencia_w;

C05 CURSOR FOR
SELECT	a.nr_sequencia,
	a.nr_seq_partic,
	a.nr_repasse_terceiro,
	a.nr_seq_terceiro,
	a.nr_seq_procedimento,
	a.nr_lote_contabil,
	a.ie_status,
	c.ie_cancelamento,
	b.nr_interno_conta
from	conta_paciente c,
	procedimento_paciente b,
	Procedimento_repasse a
where	a.nr_seq_procedimento		= nr_seq_procedimento_p
and	a.nr_seq_procedimento		= b.nr_sequencia
and	b.nr_interno_conta			= c.nr_interno_conta
and	((coalesce(ie_estornar_rep_desdob_w,'N')	= 'N' and coalesce(a.nr_seq_origem::text, '') = '') or (coalesce(ie_estornar_rep_desdob_w,'N')	= 'S' and coalesce(a.ie_estorno,'N') = 'N'));


BEGIN

select	max(a.nr_sequencia),
	sum(a.vl_repasse),
	sum(a.vl_liberado)
into STRICT	nr_seq_proc_rep_old_w,
	vl_repasse_old_w,
	vl_liberado_old_w
from	procedimento_repasse a,
	procedimento_paciente b
where	a.nr_seq_procedimento	= b.nr_sequencia
and	b.nr_sequencia		= nr_seq_procedimento_p;

select	max(a.ie_status_retorno)
into STRICT	ie_status_retorno_w
from	convenio_retorno a
where	a.nr_sequencia	= nr_seq_retorno_p;


if (ie_status_retorno_w <> 'F') then
	/* O retorno nr_seq_retorno_p não está fechado! */

	CALL wheb_mensagem_pck.exibir_mensagem_abort(191627,'NR_SEQ_RETORNO_P=' || nr_seq_retorno_p);
end if;

if (coalesce(nr_seq_procedimento_p::text, '') = '') then
	/* Número de sequencia do procedimento não foi encontrado! */

	CALL wheb_mensagem_pck.exibir_mensagem_abort(191629);
end if;

select	max(a.nr_interno_conta)
into STRICT	nr_interno_conta_w
from	procedimento_paciente a
where	a.nr_sequencia	= nr_seq_procedimento_p;

select	count(*)
into STRICT	cont_w
from	convenio_retorno_item a
where	a.nr_interno_conta	= nr_interno_conta_w;

if (cont_w > 1) then

	select	max(a.nr_seq_retorno)
	into STRICT	nr_seq_retorno_adic_w
	from	convenio_retorno_item a
	where	a.nr_interno_conta	= nr_interno_conta_w
	and	a.nr_seq_retorno	<> nr_seq_retorno_p;

	/* A conta nr_interno_conta_w está em mais de um retorno! Retorno: nr_seq_retorno_adic_w */

	CALL wheb_mensagem_pck.exibir_mensagem_abort(191630,	'NR_INTERNO_CONTA_W=' || nr_interno_conta_w ||
							';NR_SEQ_RETORNO_ADIC_W=' || nr_seq_retorno_adic_w);

end if;

open c01;
loop
fetch c01 into
	nr_sequencia_w,
	nr_repasse_terceiro_w,
	nr_lote_contabil_w,
	nr_seq_origem_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	update	procedimento_repasse
	set	ie_estorno = 'N'
	where	nr_sequencia	= nr_sequencia_w;

	ie_status_w     := null;

	if (nr_repasse_terceiro_w IS NOT NULL AND nr_repasse_terceiro_w::text <> '') then

		select	max(ie_status)
		into STRICT	ie_status_w
		from	repasse_terceiro
		where	nr_repasse_terceiro	= nr_repasse_terceiro_w;

	end if;

	if (coalesce(nr_repasse_terceiro_w::text, '') = '') or (coalesce(ie_status_w,'F') = 'A') then

		if (coalesce(nr_lote_contabil_w,0) = 0) then

			open c02;
			loop
			fetch c02 into
				nr_sequencia_orig_w,
				nr_repasse_terceiro_orig_w,
				nr_lote_contabil_orig_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */

				if (nr_repasse_terceiro_orig_w IS NOT NULL AND nr_repasse_terceiro_orig_w::text <> '') then

					select	max(ie_status)
					into STRICT	ie_status_orig_w
					from	repasse_terceiro
					where	nr_repasse_terceiro	= nr_repasse_terceiro_orig_w;

				end if;

				if (coalesce(nr_repasse_terceiro_orig_w::text, '') = '') or (coalesce(ie_status_orig_w,'F') = 'A') then

					if (coalesce(nr_lote_contabil_orig_w,0) = 0) then

						select	count(*)
						into STRICT	cont_orig_w
						from	procedimento_repasse a
						where	a.nr_sequencia	= nr_sequencia_orig_w
						and	exists (SELECT	1
								from	procedimento_repasse b
								where	b.nr_seq_origem	= a.nr_sequencia);

						if (cont_orig_w = 0) then

							delete	from procedimento_repasse
							where	nr_seq_origem	= nr_sequencia_orig_w;

						end if;

					end if;

				end if;

			end loop;
			close c02;

			select	count(*)
			into STRICT	cont_proc_w
			from	procedimento_repasse a
			where	a.nr_sequencia	= nr_sequencia_w
			and	exists (SELECT	1
					from	procedimento_repasse b
					where	b.nr_seq_origem	= a.nr_sequencia);

			if (cont_proc_w = 0) then

				delete  from procedimento_repasse
				where   nr_sequencia    = nr_sequencia_w;

			end if;

		end if;

	end if;

end loop;
close c01;

select	max(a.cd_estabelecimento),
	max(b.cd_medico_resp),
	max(ie_tipo_atendimento),
	max(cd_convenio_parametro),
	max(cd_categoria_parametro),
	max(dt_entrada),
	max(OBTER_TIPO_CONVENIO(cd_convenio_parametro))
into STRICT	cd_estabelecimento_w,
	cd_medico_resp_w,
	ie_tipo_atendimento_w,
	cd_convenio_w,
	cd_categoria_w,
	dt_entrada_w,
	ie_tipo_convenio_w
from	parametro_faturamento c,
	atendimento_paciente b,
	conta_paciente a
where	a.nr_atendimento		= b.nr_atendimento
and	a.cd_estabelecimento	= c.cd_estabelecimento
and	a.nr_interno_conta		= nr_interno_conta_w;

ie_data_liberacao_w		:= obter_valor_param_usuario(87, 89, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);

select	coalesce(max(ie_repasse_estorno),'N')
into STRICT	ie_repasse_estorno_w
from 	parametro_faturamento
where	cd_estabelecimento	= cd_estabelecimento_w;

select 	coalesce(max(ie_estornar_rep_desdob),'N')
into STRICT	ie_estornar_rep_desdob_w
from	parametro_repasse
where	cd_estabelecimento	= cd_estabelecimento_w;

OPEN C05;
LOOP
FETCH C05 into
	nr_seq_procrep_w,
	nr_seq_particip_w,
	nr_repasse_origem_w,
	nr_seq_terc_origem_w,
	nr_seq_proc_origem_w,
	nr_lote_contabil_origem_w,
	ie_status_origem_w,
	ie_cancelamento_origem_w,
	nr_interno_conta_rep_w;
EXIT WHEN NOT FOUND; /* apply on c05 */

	select	nextval('procedimento_repasse_seq')
	into STRICT	nr_seq_repasse_w
	;

	insert into procedimento_repasse(
		nr_sequencia,
		nr_seq_procedimento,
		vl_repasse,
		dt_atualizacao,
		nm_usuario,
		nr_seq_terceiro,
		nr_lote_contabil,
		nr_repasse_terceiro,
		cd_conta_contabil,
		nr_seq_trans_fin,
		vl_liberado,
		nr_seq_item_retorno,
		ie_status,
		nr_seq_origem,
		cd_regra,
		DT_CONTABIL_TITULO,
		DT_CONTABIL,
		cd_medico,
		nr_seq_partic,
		nr_seq_criterio,
		NR_SEQ_TRANS_FIN_REP_MAIOR,
		ie_estorno,
		ie_repasse_calc,
		dt_liberacao,
		vl_original_repasse)
	SELECT	nr_seq_repasse_w,
		nr_seq_procedimento,
		vl_repasse  * -1,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_terceiro,
		0,
		null,
		cd_conta_contabil,
		nr_seq_trans_fin,
		vl_liberado * -1,
		nr_seq_item_retorno,
		'E',
		nr_seq_procrep_w,
		cd_regra,
		to_date('01/01/2999','dd/mm/yyyy'),
		to_date('01/01/2999','dd/mm/yyyy'),
		cd_medico,
		CASE WHEN coalesce(nr_seq_particip_w,0)=0 THEN null  ELSE nr_seq_particip_w END ,
		nr_seq_criterio,
		NR_SEQ_TRANS_FIN_REP_MAIOR,
		'S',
		ie_repasse_calc,
		CASE WHEN ie_data_liberacao_w='S' THEN  clock_timestamp()  ELSE null END ,
		vl_original_repasse
	from	Procedimento_repasse
	where	nr_sequencia		= nr_seq_procrep_w;

	commit;

	if (nr_interno_conta_rep_w IS NOT NULL AND nr_interno_conta_rep_w::text <> '') then
		CALL gerar_procmat_repasse_nf(nr_interno_conta_rep_w, nm_usuario_p, 'S');
	end if;

	if (coalesce(nr_repasse_origem_w, 0) > 0) and (ie_repasse_estorno_w = 'S') then

		nr_repasse_terceiro_w := obter_repasse_terceiro(	clock_timestamp(), nr_seq_terc_origem_w, nm_usuario_p, nr_seq_proc_origem_w, 'P', nr_repasse_terceiro_w, null, null);

		if (coalesce(nr_repasse_terceiro_w,0) > 0) then

			update	procedimento_repasse
			set	dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				nr_repasse_terceiro	= nr_repasse_terceiro_w,
				ie_estorno		= 'S'
			where	nr_sequencia		= nr_seq_repasse_w;

		end if;

	end if;

	update	procedimento_repasse
	set	dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p,
		ie_estorno	= 'S'
	where	nr_sequencia	= nr_seq_procrep_w;

	if (coalesce(nr_lote_contabil_origem_w,0) > 0) and (ie_status_origem_w = 'A') and (ie_cancelamento_origem_w = 'C') then

		update	procedimento_repasse
		set	dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			ie_status		= 'U'
		where	nr_sequencia	= nr_seq_procrep_w;

	end if;

end loop;
close c05;

begin
select	obter_edicao(cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, dt_entrada_w, null)
into STRICT	cd_edicao_amb_w
;
exception
	when others then
		select	max(cd_edicao_amb)
		into STRICT	cd_edicao_amb_w
		from	convenio_amb
		where	cd_estabelecimento	= cd_estabelecimento_w
		and	cd_convenio		= cd_convenio_w
		and	cd_categoria		= cd_categoria_w
		and	coalesce(ie_situacao,'A')		= 'A'
		and	dt_inicio_vigencia		=	(
							SELECT	max(dt_inicio_vigencia)
							from	convenio_amb a
							where	a.cd_estabelecimento	= cd_estabelecimento_w
							and	a.cd_convenio         	= cd_convenio_w
							and	a.cd_categoria        	= cd_categoria_w
							and	coalesce(a.ie_situacao,'A')	= 'A'
							and	a.dt_inicio_vigencia	<=  dt_entrada_w
							);
end;

CALL gravar_log_tasy(55889, WHEB_MENSAGEM_PCK.get_texto(298863, 'NR_SEQ_PROCEDIMENTO_P=' || nr_seq_procedimento_p || ';NR_SEQ_RETORNO_P=' || nr_seq_retorno_p) || PKG_DATE_FORMATERS.to_varchar(clock_timestamp(), 'timestamp', WHEB_USUARIO_PCK.GET_CD_ESTABELECIMENTO, nm_usuario_p), nm_usuario_p);

CALL gerar_procedimento_repasse(	nr_seq_procedimento_p,
				cd_estabelecimento_w,
				cd_medico_resp_w,
				nm_usuario_p,
				cd_edicao_amb_w,
				cd_convenio_w,
				ie_tipo_atendimento_w,
				null,
				null,
				null);

CALL fechar_retorno_repasse(	nr_seq_retorno_p,
			null,
			nr_seq_procedimento_p,
			nm_usuario_p);

select	sum(a.vl_repasse),
	sum(a.vl_liberado)
into STRICT	vl_repasse_new_w,
	vl_liberado_new_w
from	procedimento_repasse a,
	procedimento_paciente b
where	a.nr_seq_procedimento	= b.nr_sequencia
and	b.nr_sequencia		= nr_seq_procedimento_p
and	a.nr_sequencia		> nr_seq_proc_rep_old_w;

--if	(vl_liberado_new_w - vl_liberado_old_w = 0) and
--	(vl_repasse_new_w - vl_repasse_old_w = 0) then
--	delete	from procedimento_repasse
--	where	nr_seq_procedimento	= nr_seq_procedimento_p
--	and	nr_sequencia		> nr_seq_proc_rep_old_w;
--end if;
commit;

end	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE reatualizar_repasse_retorno ( nr_seq_procedimento_p bigint, nr_seq_retorno_p bigint, nm_usuario_p text) FROM PUBLIC;

