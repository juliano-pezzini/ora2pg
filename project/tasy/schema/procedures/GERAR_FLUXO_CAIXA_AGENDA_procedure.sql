-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_fluxo_caixa_agenda (cd_empresa_p bigint, cd_estabelecimento_p bigint, ie_periodo_p text, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, ie_operacao_p text, ie_somente_ativa_p text) AS $body$
DECLARE


/*--------------------------------------------------------------- ATENÇÃO ----------------------------------------------------------------*/

/* Cuidado ao realizar alterações no fluxo de caixa. Toda e qualquer alteração realizada em qualquer uma das       */

/* procedures do fluxo de caixa deve ser cuidadosamente verificada e realizada no fluxo de caixa em lote.           */

/* Devemos garantir que os dois fluxos de caixa tragam os mesmos valores no resultado, evitando assim que           */

/* existam diferenças entre os fluxos de caixa.                                                                                                                */

/*--------------- AO ALTERAR O FLUXO DE CAIXA ALTERAR TAMBÉM O FLUXO DE CAIXA EM LOTE ---------------*/

/* EDGAR 23/05/2008,  NÃO DAR COMMIT NESTA PROCEDURE */

cd_convenio_w			bigint;
cd_categoria_w			varchar(150);
cd_tipo_acomodacao_w		bigint;
CD_CONTA_FINANC_w		bigint;
TX_PROCEDIMENTO_w		double precision;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
vl_fluxo_w			double precision;
dt_agenda_w			timestamp;
ie_tipo_acomod_w		varchar(100);
IE_TIPO_PROC_w			varchar(100);
ie_operacao_w			varchar(10);
ie_conta_financ_ativa_w		varchar(1);
cd_moeda_empresa_w		integer;

c01 CURSOR FOR
SELECT	'P' IE_TIPO_PROC,
	coalesce(a.cd_convenio, 0),
	coalesce(a.cd_categoria, '0'),
	coalesce(a.cd_tipo_acomodacao, 0),
	trunc(a.dt_agenda, 'dd'),
	a.cd_procedimento,
	a.ie_origem_proced
from	agenda b,
	agenda_paciente a
where	a.cd_agenda			= b.cd_agenda
and	b.cd_estabelecimento		= cd_estabelecimento_p
and	trunc(a.dt_agenda, 'dd')	between trunc(dt_inicial_p, 'dd') and dt_final_p
and	(a.cd_procedimento IS NOT NULL AND a.cd_procedimento::text <> '')
and	coalesce(a.nr_atendimento::text, '') = ''

union all

select	'A' IE_TIPO_PROC,
	coalesce(c.cd_convenio, coalesce(a.cd_convenio, 0)),
	coalesce(c.cd_categoria, coalesce(a.cd_categoria, '0')),
	coalesce(a.cd_tipo_acomodacao, 0),
	trunc(a.dt_agenda, 'dd'),
	c.cd_procedimento,
	c.ie_origem_proced
from	agenda_paciente_proc c,
	agenda b,
	agenda_paciente a
where	a.cd_agenda			= b.cd_agenda
and	b.cd_estabelecimento		= cd_estabelecimento_p
and	trunc(a.dt_agenda, 'dd')	between trunc(dt_inicial_p, 'dd') and dt_final_p
and	coalesce(a.nr_atendimento::text, '') = ''
and	a.nr_sequencia			= c.nr_sequencia;

c02 CURSOR FOR
SELECT	b.CD_CONTA_FINANC,
	b.TX_PROCEDIMENTO
from	conta_financ_regra_agenda b,
	conta_financeira a
where	a.cd_conta_financ				= b.cd_conta_financ
and	a.cd_estabelecimento				= cd_estabelecimento_p
and	coalesce(b.cd_convenio, cd_convenio_w) 		= cd_convenio_w
and	coalesce(b.cd_categoria, cd_categoria_w)		= cd_categoria_w
and	coalesce(b.cd_tipo_acomodacao, cd_tipo_acomodacao_w)	= cd_tipo_acomodacao_w
and	((b.IE_TIPO_PROC	= 'T') or (b.IE_TIPO_PROC	= IE_TIPO_PROC_w))
and	a.ie_situacao					= 'A'
order 	by coalesce(b.cd_convenio, 0),
	coalesce(b.cd_categoria, 0),
	coalesce(b.cd_tipo_acomodacao, 0);

c03 CURSOR FOR
SELECT	a.vl_pacote
from	pacote_tipo_acomodacao a,
	pacote b
where	b.nr_seq_pacote				= a.nr_seq_pacote
and	b.cd_convenio				= cd_convenio_w
and	b.cd_estabelecimento			= cd_estabelecimento_p
and	((coalesce(a.cd_categoria, cd_categoria_w)	= cd_categoria_w) or (cd_categoria_w = '0'))
and	((coalesce(a.ie_tipo_acomod, ie_tipo_acomod_w)= ie_tipo_acomod_w) or (ie_tipo_acomod_w = 0))
and	dt_agenda_w				between coalesce(a.dt_vigencia, dt_agenda_w - 1) and coalesce(a.dt_vigencia_final, dt_agenda_w + 1)
and	a.cd_procedimento			= cd_procedimento_w
and	a.ie_origem_proced			= ie_origem_proced_w
order	by coalesce(a.cd_categoria,0),
	coalesce(a.ie_tipo_acomod,0);


BEGIN

/* Projeto Multimoeda - Busca a moeda padrão da empresa para gravar no fluxo. */

select	obter_moeda_padrao_empresa(cd_estabelecimento_p,'E')
into STRICT	cd_moeda_empresa_w
;

open c01;
loop
fetch c01 into
	IE_TIPO_PROC_w,
	cd_convenio_w,
	cd_categoria_w,
	cd_tipo_acomodacao_w,
	dt_agenda_w,
	cd_procedimento_w,
	ie_origem_proced_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	CD_CONTA_FINANC_w		:= null;
	open c02;
	loop
	fetch c02 into
		CD_CONTA_FINANC_w,
		TX_PROCEDIMENTO_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
	end loop;
	close c02;

	if (CD_CONTA_FINANC_w IS NOT NULL AND CD_CONTA_FINANC_w::text <> '') then


		select	max(ie_classificacao)
		into STRICT	ie_tipo_acomod_w
		from	tipo_acomodacao
		where	cd_tipo_acomodacao	= cd_tipo_acomodacao_w;

		vl_fluxo_w		:= 0;
		open c03;
		loop
		fetch c03 into
			vl_fluxo_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
		end loop;
		close c03;

		if (vl_fluxo_w > 0) then

			select	obter_operacao_conta_financ(cd_conta_financ_w)
			into STRICT	ie_operacao_w
			;

			if	(
					(ie_operacao_p = 'S' AND ie_operacao_w <> 'D')
				or
					(ie_operacao_p = 'D' AND ie_operacao_w <> 'S')
				or (ie_operacao_p = 'A')
				) then

				select	CASE WHEN ie_somente_ativa_p='S' THEN ie_situacao  ELSE 'A' END
				into STRICT	ie_conta_financ_ativa_w
				from	conta_financeira
				where	cd_conta_financ = cd_conta_financ_w;

				if (ie_conta_financ_ativa_w = 'A') then
					begin
					insert into fluxo_caixa(CD_ESTABELECIMENTO,
							DT_REFERENCIA,
							CD_CONTA_FINANC,
							IE_CLASSIF_FLUXO,
							DT_ATUALIZACAO,
							NM_USUARIO,
							VL_FLUXO,
							IE_ORIGEM,
							IE_PERIODO,
							IE_INTEGRACAO,
							CD_EMPRESA,
							DS_OBSERVACAO,
							cd_moeda)
					values		(cd_estabelecimento_p,
							dt_agenda_w,
							cd_conta_financ_w,
							'R',
							clock_timestamp(),
							nm_usuario_p,
							vl_fluxo_w * (TX_PROCEDIMENTO_w / 100),
							'I',
							'D',
							'AG',
							cd_empresa_p,
							null,
							cd_moeda_empresa_w);
					exception
						when unique_violation then
							update	fluxo_caixa
							set	vl_fluxo		= vl_fluxo + (vl_fluxo_w * (TX_PROCEDIMENTO_w / 100))
							where	cd_estabelecimento	= cd_estabelecimento_p
							and	cd_conta_financ		= cd_conta_financ_w
							and	dt_referencia		= dt_agenda_w
							and	ie_periodo		= 'D'
							and	ie_classif_fluxo	= 'R'
							and	ie_integracao		= 'AG'
							and	cd_empresa		= cd_empresa_p;
						when others then
							CALL Wheb_mensagem_pck.exibir_mensagem_abort(sqlerrm);
					end;
				end if;
			end if;
		end if;
	end if;

end loop;
close c01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_fluxo_caixa_agenda (cd_empresa_p bigint, cd_estabelecimento_p bigint, ie_periodo_p text, dt_inicial_p timestamp, dt_final_p timestamp, nm_usuario_p text, ie_operacao_p text, ie_somente_ativa_p text) FROM PUBLIC;

