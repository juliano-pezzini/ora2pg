-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_interface_sib ( nr_seq_lote_sib_p bigint, ie_gerar_todos_p text, ie_opcao_p text, nm_usuario_p text, qt_inconsistencias_p INOUT bigint, cd_estabelecimento_p bigint) AS $body$
DECLARE

/* ie_gerar_todos_p 
	E - Exclusão de todos 
	S - Inclusão de todos 
	N - Inclusão/Alteração/Exclusão do mês de referência 
	A - Alteração dos cartões de identificação do sistema anterior*/
 
	 
	 
/* ie_opcao_p 
	C - Gerar lote SIB 
	D - Desfazer lote SIB 
	R - Gerar lote re-envio do SIB 
	A - Alteração dos cartões de identificação do sistema anterior*/
 
 
cd_cgc_w			varchar(14);
cd_ans_w			varchar(20);
dt_geracao_w			timestamp;
dt_referencia_w			timestamp;
nr_seq_arquivo_w		bigint;
nr_seq_reg_arquivo_w		bigint;
ie_ajuste_conferencia_w		varchar(10);

nr_seq_segurado_w		bigint;
nr_cco_w			bigint;
cd_usuario_plano_w		varchar(30);
ie_tipo_reenvio_w		smallint;
qt_header_w			bigint;
qt_trailer_w			bigint;
qt_tipo1_w			bigint;
qt_tipo2_w			bigint;
qt_tipo5_w			bigint;
qt_tipo6_w			bigint;
qt_tipo7_w			bigint;
qt_tipo8_w			bigint;

qt_registros_incosistentes_w	bigint;
qt_registros_w			bigint;
ie_flexibilizado_w		varchar(1);
ie_entrou_flex_w		varchar(1):='N';


BEGIN 
 
if (ie_opcao_p	= 'D') then 
	update	pls_retorno_sib 
	set	nr_seq_lote_envio	 = NULL 
	where	nr_seq_lote_envio	= nr_seq_lote_sib_p;
	 
	update	pls_lote_sib 
	set	dt_geracao		 = NULL, 
		dt_geracao_arquivo	 = NULL 
	where	nr_sequencia		= nr_seq_lote_sib_p;
 
	update	sib_devolucao_erro 
	set	nr_seq_lote_envio	 = NULL, 
		ie_reenvio		= 'S' 
	where	nr_seq_lote_envio	= nr_seq_lote_sib_p;
	 
	update	sib_devolucao_erro 
	set	nr_seq_interf_sib	 = NULL 
	where	nr_seq_lote		= nr_seq_lote_sib_p;
	 
	delete	FROM PLS_INCONSIST_CONF_SIB 
	where	nr_seq_lote_sib	= nr_seq_lote_sib_p;
	 
	update	PLS_SEGURADO_CART_ANT 
	set	NR_SEQ_LOTE_SIB	 = NULL 
	where	NR_SEQ_LOTE_SIB		= nr_seq_lote_sib_p;
	 
	update	sib_log_exclusao 
	set	ie_enviar_sib		= 'S', 
		nr_seq_lote_envio	 = NULL, 
		nr_seq_interf_sib	 = NULL 
	where	nr_seq_lote_envio	= nr_seq_lote_sib_p;
	 
	CALL pls_excluir_log_excluidos_sib(nr_seq_lote_sib_p, nm_usuario_p);
		 
	delete FROM pls_interf_sib 
	where nr_seq_lote_sib = nr_seq_lote_sib_p;
elsif (coalesce(ie_opcao_p,'C')	in ('C','R','A')) then 
	update	pls_lote_sib 
	set	dt_geracao	= clock_timestamp() 
	where	nr_sequencia	= nr_seq_lote_sib_p;
	 
	--aaschlote 24/08/2011 - Apenas gerar os dados da comparação da alteração quando for gerar o lote 
	if (ie_opcao_p = 'C') then 
		CALL pls_gerar_segurado_sib(nr_seq_lote_sib_p, nm_usuario_p);
	end if;	
	 
	begin 
	select a.cd_cgc_outorgante, 
		substr(to_char(somente_numero(a.cd_ans)),1,6) 
	into STRICT 	cd_cgc_w, 
		cd_ans_w 
	from	pls_outorgante a 
	where 	a.cd_estabelecimento	= cd_estabelecimento_p;
	exception 
	when others then 
		cd_cgc_w	:= null;
		cd_ans_w	:= null;
	end;
	 
	select 	coalesce(max(nr_seq_arquivo),0) + 1 
	into STRICT	nr_seq_arquivo_w 
	from	pls_interf_sib;
	 
	select	dt_geracao, 
		dt_mesano_referencia, 
		coalesce(ie_ajuste_conferencia,'N'), 
		coalesce(ie_flexibilizado,'N') 
	into STRICT	dt_geracao_w, 
		dt_referencia_w, 
		ie_ajuste_conferencia_w, 
		ie_flexibilizado_w 
	from	pls_lote_sib 
	where	nr_sequencia = nr_seq_lote_sib_p;
	 
	select	count(*) 
	into STRICT	qt_header_w 
	from	pls_interf_sib 
	where	nr_seq_lote_sib	= nr_seq_lote_sib_p 
	and	ie_tipo_reg	= 0;
	 
	if (qt_header_w	= 0) then 
		insert into pls_interf_sib(nr_sequencia, 
			ie_tipo_reg, 
			dt_geracao_arquivo, 
			cd_ans, 
			cd_cgc, 
			nr_seq_arquivo, 
			dt_mesano_referencia, 
			benef, 
			ds_constante, 
			ds_modalidade, 
			ds_branco, 
			zero, 
			nr_seq_lote_sib) 
		values (1, 
			0, 
			dt_geracao_w, 
			cd_ans_w, 
			cd_cgc_w, 
			nr_seq_arquivo_w, 
			dt_referencia_w, 
			'BENEF', 
			'V01', 
			'O', 
			' ', 
			0, 
			nr_seq_lote_sib_p);
	end if;
	 
	if (coalesce(ie_opcao_p,'C')	= 'C') then 
		if (ie_gerar_todos_p	= 'N') then 
			 
			/* Inclusões no mês de referência do lote */
 
			if (ie_flexibilizado_w = 'S') then 
				CALL pls_gerar_inclusao_sib_flex(nr_seq_lote_sib_p, ie_gerar_todos_p, nm_usuario_p, cd_estabelecimento_p);
				ie_entrou_flex_w := 'S';
			else 
				CALL pls_gerar_inclusao_sib(nr_seq_lote_sib_p, ie_gerar_todos_p, nm_usuario_p, cd_estabelecimento_p);
			end if;	
 
			/*aaschlote 13/04/2011 OS - 306712 Reinclusão no mês de referência do lote*/
 
			CALL pls_gerar_reinclusao_sib(nr_seq_lote_sib_p,nm_usuario_p, cd_estabelecimento_p);
			 
			/* Alterações no mês de referência do lote */
 
			if (ie_flexibilizado_w = 'S') then 
				CALL pls_gerar_alteracao_sib_flex(nr_seq_lote_sib_p, ie_gerar_todos_p, nm_usuario_p, cd_estabelecimento_p);
				ie_entrou_flex_w := 'S';
			else			 
				CALL pls_gerar_alteracao_sib(nr_seq_lote_sib_p, ie_gerar_todos_p, nm_usuario_p, cd_estabelecimento_p);
			end if;
			 
			/*aaschlote 08/10/2012 OS - 490891 - Migrações contratuis no mês de referência do lote*/
 
			if (ie_flexibilizado_w = 'S') then 
				CALL pls_gerar_mig_cont_sib_flex(nr_seq_lote_sib_p,cd_estabelecimento_p,nm_usuario_p);
				ie_entrou_flex_w := 'S';
			else			 
				CALL pls_gerar_mig_contratual_sib(nr_seq_lote_sib_p,cd_estabelecimento_p,nm_usuario_p);
			end if;
			 
			/* Exclusões no mês de referência do lote */
 
			CALL pls_gerar_exclusao_sib(nr_seq_lote_sib_p, ie_gerar_todos_p, nm_usuario_p, cd_estabelecimento_p);
			 
			/*aaschlote 27/04/2011 -OS 313957 - Mandar a Conferência SIB caso esteja marcado no lote o ajuste conferência*/
 
			if (ie_ajuste_conferencia_w	= 'S') then 
				CALL pls_inserir_conferencia_sib(nr_seq_lote_sib_p, cd_estabelecimento_p,nm_usuario_p);
			end if;	
 
			select	count(*) 
			into STRICT	qt_registros_w 
			from	pls_interf_sib 
			where	nr_seq_lote_sib	= nr_seq_lote_sib_p 
			and	ie_tipo_reg	<> 0;
			 
			if (qt_registros_w	= 0) then 
				nr_seq_reg_arquivo_w	:= nr_seq_reg_arquivo_w + 1;
				insert into pls_interf_sib(nr_sequencia, 
					ie_tipo_reg, 
					ds_observacao, 
					nr_seq_lote_sib) 
				values (nr_seq_reg_arquivo_w, 
					6, 
					'Não houve atualizaçao de dados beneficiários', 
					nr_seq_lote_sib_p);
			end if;
			 
		elsif (ie_gerar_todos_p	= 'S') then 
			CALL pls_gerar_inclusao_sib(nr_seq_lote_sib_p, ie_gerar_todos_p, nm_usuario_p, cd_estabelecimento_p);
		elsif (ie_gerar_todos_p	= 'E') then 
			CALL pls_gerar_exclusao_sib(nr_seq_lote_sib_p, ie_gerar_todos_p, nm_usuario_p, cd_estabelecimento_p);
		end if;
	elsif (ie_opcao_p	= 'R') then 
		CALL pls_gerar_reenvio_sib(nr_seq_lote_sib_p, nm_usuario_p, cd_estabelecimento_p);
	elsif (ie_opcao_p	= 'A') then 
		CALL pls_gerar_alt_cart_benef_sib(nr_seq_lote_sib_p, nm_usuario_p, cd_estabelecimento_p);
	end if;
	 
	select	sum(qt_tipo_1), /* Inclusão */
 
		sum(qt_tipo_2), /* Alteração */
 
		sum(qt_tipo_5), /*Migração contratual*/
 
		sum(qt_tipo_6), /* Indicação de inexistência de beneficiário ou de alteração cadastral */
 
		sum(qt_tipo_7), /* Exclusão */
 
		sum(qt_tipo_8) /* Reinclusão */
 
	into STRICT	qt_tipo1_w, 
		qt_tipo2_w, 
		qt_tipo5_w, 
		qt_tipo6_w, 
		qt_tipo7_w, 
		qt_tipo8_w 
	from (SELECT	CASE WHEN ie_tipo_reg=1 THEN 1  ELSE 0 END  qt_tipo_1, 
			CASE WHEN ie_tipo_reg=2 THEN 1  ELSE 0 END  qt_tipo_2, 
			CASE WHEN ie_tipo_reg=5 THEN 1  ELSE 0 END  qt_tipo_5, 
			CASE WHEN ie_tipo_reg=6 THEN 1  ELSE 0 END  qt_tipo_6, 
			CASE WHEN ie_tipo_reg=7 THEN 1  ELSE 0 END  qt_tipo_7, 
			CASE WHEN ie_tipo_reg=8 THEN 1  ELSE 0 END  qt_tipo_8 
		from	pls_interf_sib 
		where	nr_seq_lote_sib = nr_seq_lote_sib_p) alias6;
	 
	select	max(nr_sequencia) 
	into STRICT	nr_seq_reg_arquivo_w 
	from	pls_interf_sib 
	where	nr_seq_lote_sib	= nr_seq_lote_sib_p;
	 
	if (coalesce(nr_seq_reg_arquivo_w,0) = 0) then 
		nr_seq_reg_arquivo_w	:= 1;
	end if;
 
	nr_seq_reg_arquivo_w	:= nr_seq_reg_arquivo_w + 1;
	 
	if (ie_entrou_flex_w = 'N') then 
		CALL pls_consistir_lote_sib(nr_seq_lote_sib_p, null, nm_usuario_p, cd_estabelecimento_p);
	else 
		CALL pls_consistir_lote_sib_flex(nr_seq_lote_sib_p, null, nm_usuario_p, cd_estabelecimento_p);
	end if;	
	 
	select	count(*) 
	into STRICT	qt_trailer_w 
	from	pls_interf_sib 
	where	nr_seq_lote_sib	= nr_seq_lote_sib_p 
	and	ie_tipo_reg	= 9;
	 
	if (qt_trailer_w	= 0) then 
		select 	count(*) 
		into STRICT	qt_registros_incosistentes_w 
		from 	pls_interf_sib a 
		where 	nr_seq_lote_sib = nr_seq_lote_sib_p 
		and	exists (	SELECT	1 
					from	pls_lote_consistencia_sib b 
					where	b.nr_seq_lote_sib	= a.nr_seq_lote_sib 
					and	b.nr_seq_segurado = a.nr_seq_segurado);
		 
		insert into pls_interf_sib(nr_sequencia, 
			ie_tipo_reg, 
			qt_tipo1, 
			qt_tipo2, 
			qt_tipo5, 
			qt_tipo6, 
			qt_tipo7, 
			qt_tipo8, 
			dt_mesano_referencia, 
			ds_branco, 
			nr_seq_lote_sib, 
			qt_registros_incosistentes) 
		values (nr_seq_reg_arquivo_w, 
			9, 
			qt_tipo1_w, 
			qt_tipo2_w, 
			qt_tipo5_w, 
			qt_tipo6_w, 
			qt_tipo7_w, 
			qt_tipo8_w, 
			dt_referencia_w, 
			'', 
			nr_seq_lote_sib_p, 
			qt_registros_incosistentes_w);
	end if;
end if;
 
--aaschlote 27/04/2011 - Ajustar a seq. ordem para envio do SIB 
if (ie_ajuste_conferencia_w	= 'S') then 
	CALL sib_ordenar_segurados_envio(nr_seq_lote_sib_p,nm_usuario_p);
end if;	
 
--aaschlote 13/07/2011 - Ajustar o nome dos beneficiários e das mães dos registros inclusão e alteração 
CALL pls_ajustar_nomes_sib(nr_seq_lote_sib_p,cd_estabelecimento_p,nm_usuario_p);
 
/*aaschlote 25/07/2013 - Retorna a quantidade de registros inconsistentes*/
 
if (ie_opcao_p <> 'D') then 
	qt_inconsistencias_p := qt_registros_incosistentes_w;
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_interface_sib ( nr_seq_lote_sib_p bigint, ie_gerar_todos_p text, ie_opcao_p text, nm_usuario_p text, qt_inconsistencias_p INOUT bigint, cd_estabelecimento_p bigint) FROM PUBLIC;

