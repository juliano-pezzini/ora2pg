-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_atualiza_status_copartic ( nr_seq_conta_p bigint, ie_acao_p text, nr_seq_camara_contest_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Atualizar o status da coparticipação para a cobrança na mensalidade
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
ie_acao_p
	FC	- Fechar conta
	LC	- Finalização da contestação
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_copartic_contestacao_w	varchar(1);
ie_status_copartic_w		varchar(2);
ie_status_copartic_orig_w	varchar(2);
qt_contestacao_conta_w		bigint;
nr_seq_conta_copartic_w		bigint;
nr_seq_lote_contest_w		bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_questionamento_w		bigint;
ie_tipo_acordo_w		varchar(10);
nr_seq_ptu_fatura_w		bigint;
nr_seq_pls_fatura_w		bigint;
nr_seq_camara_contest_w		bigint;
ie_cobrar_item_w		varchar(1) := 'N'; -- Cobrar por item, se N cobrar a conta
vl_acordo_w			double precision := 0;
vl_cobrado_w			double precision := 0;
vl_reconhecido_w		double precision := 0;
vl_reconh_inicial_w		double precision := 0;
nr_titulo_w			bigint;
nr_titulo_ndc_w			bigint;
qt_baixa_fat_w			bigint := 0;
ie_pagamento_w			varchar(1) := 'I'; -- P parcial I integral
ie_glosa_w			pls_conta_proc.ie_glosa%type;
qt_apresentada_w		pls_conta_proc.qt_procedimento_imp%type;
qt_liberada_w			pls_conta_proc.qt_procedimento%type;
ie_origem_conta_w		pls_conta.ie_origem_conta%type;
qt_motivo_w			integer;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_conta_proc,
		nr_seq_conta_mat,
		(SELECT	count(1)
		from	pls_regra_preco_copartic
		where 	nr_sequencia = nr_seq_regra_preco_copart) qt_regra_copart_glosados
	from	pls_conta_coparticipacao
	where	nr_seq_conta	= nr_seq_conta_p
	and	coalesce(nr_seq_mensalidade_seg::text, '') = ''
	and	coalesce(ie_status_coparticipacao, 'P') <> 'N';

C00 CURSOR FOR
	-- Retorna todos os questionamentos da constestação
	SELECT	nr_sequencia,
		nr_seq_conta_proc,
		nr_seq_conta_mat,
		ie_tipo_acordo,
		coalesce(vl_acordo,0) +
		coalesce(vl_acordo_adic_co,0) +
		coalesce(vl_acordo_adic_filme,0) +
		coalesce(vl_acordo_adic_serv,0) +
		coalesce(vl_acordo_co,0) +
		coalesce(vl_acordo_filme,0),
		coalesce(vl_cobr_adic_co,0) +
		coalesce(vl_cobr_adic_filme,0) +
		coalesce(vl_cobr_adic_serv,0) +
		coalesce(vl_cobrado,0) +
		coalesce(vl_cobr_co,0) +
		coalesce(vl_cobr_filme,0),
		coalesce(vl_reconh_adic_co,0) +
		coalesce(vl_reconh_adic_filme,0) +
		coalesce(vl_reconh_adic_serv,0) +
		coalesce(vl_reconh_co,0) +
		coalesce(vl_reconhecido,0) +
		coalesce(vl_reconh_filme,0)
	from	ptu_questionamento
	where	nr_seq_contestacao = nr_seq_camara_contest_w;

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_conta_coparticipacao
	where	nr_seq_conta		= nr_seq_conta_p
	and	nr_seq_conta_proc	= nr_seq_conta_proc_w
	and	coalesce(nr_seq_mensalidade_seg::text, '') = ''
	and	coalesce(ie_status_coparticipacao, 'P') <> 'N'
	
union

	SELECT	nr_sequencia
	from	pls_conta_coparticipacao
	where	nr_seq_conta		= nr_seq_conta_p
	and	nr_seq_conta_mat	= nr_seq_conta_mat_w
	and	coalesce(nr_seq_mensalidade_seg::text, '') = ''
	and	coalesce(ie_status_coparticipacao, 'P') <> 'N';

BEGIN
ie_status_copartic_w	:= 'S';

select	max(ie_copartic_contestacao)
into STRICT	ie_copartic_contestacao_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

ie_copartic_contestacao_w	:= coalesce(ie_copartic_contestacao_w,'N');

if (ie_copartic_contestacao_w in ('S','G', 'M')) then
	if (ie_acao_p = 'LC') then
		ie_status_copartic_w	:= 'S';

		select	max(c.nr_sequencia),
			max(c.nr_seq_ptu_fatura),
			max(c.nr_seq_pls_fatura)
		into STRICT	nr_seq_lote_contest_w,
			nr_seq_ptu_fatura_w,
			nr_seq_pls_fatura_w
		from	pls_lote_contestacao	c,
			pls_contestacao		b
		where	c.nr_sequencia		= b.nr_seq_lote
		and	b.nr_seq_conta		= nr_seq_conta_p;

		if (nr_seq_lote_contest_w IS NOT NULL AND nr_seq_lote_contest_w::text <> '') and (nr_seq_ptu_fatura_w IS NOT NULL AND nr_seq_ptu_fatura_w::text <> '') then
			ie_pagamento_w := 'I';

			if (coalesce(nr_seq_camara_contest_p::text, '') = '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_camara_contest_w
				from	ptu_camara_contestacao
				where	nr_seq_lote_contest = nr_seq_lote_contest_w;
			else
				nr_seq_camara_contest_w := nr_seq_camara_contest_p;
			end if;

			select	max(nr_titulo),
				max(nr_titulo_ndc)
			into STRICT	nr_titulo_w,
				nr_titulo_ndc_w
			from	ptu_fatura
			where	nr_sequencia = nr_seq_ptu_fatura_w;

			if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
				select	count(1)
				into STRICT	qt_baixa_fat_w
				from	titulo_pagar_baixa
				where	nr_titulo	= nr_titulo_w
				and	vl_glosa	> 0;

				if (qt_baixa_fat_w > 0) then
					ie_pagamento_w := 'P';
				end if;
			end if;

			qt_baixa_fat_w := 0;

			if (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') and (ie_pagamento_w = 'I') then
				select	count(1)
				into STRICT	qt_baixa_fat_w
				from	titulo_pagar_baixa
				where	nr_titulo	= nr_titulo_ndc_w
				and	vl_glosa	> 0;

				if (qt_baixa_fat_w > 0) then
					ie_pagamento_w := 'P';
				end if;
			end if;

			if (nr_seq_camara_contest_w IS NOT NULL AND nr_seq_camara_contest_w::text <> '') then
				open C00;
				loop
				fetch C00 into
					nr_seq_questionamento_w,
					nr_seq_conta_proc_w,
					nr_seq_conta_mat_w,
					ie_tipo_acordo_w,
					vl_acordo_w,
					vl_cobrado_w,
					vl_reconhecido_w;
				EXIT WHEN NOT FOUND; /* apply on C00 */
					begin
					ie_cobrar_item_w := 'S';

					if (ie_tipo_acordo_w in ('01','02')) then
						if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
							select	coalesce(vl_liberado_hi,0) +
								coalesce(vl_liberado_co,0) +
								coalesce(vl_lib_taxa_servico,0) +
								coalesce(vl_lib_taxa_co,0) +
								coalesce(vl_lib_taxa_material,0)
							into STRICT	vl_reconh_inicial_w
							from	pls_conta_proc
							where	nr_sequencia	= nr_seq_conta_proc_w;

						elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
							select	coalesce(vl_liberado,0) +
								coalesce(vl_lib_taxa_material,0)
							into STRICT	vl_reconh_inicial_w
							from	pls_conta_mat
							where	nr_sequencia	= nr_seq_conta_mat_w;
						end if;

						if (ie_tipo_acordo_w = '02') then -- Questionamento encerrado com Acordo sem emissão de nota de débito
							-- Quando for realizado o pagamento integral da fatura (A500) e Valor cobrado for igual ao valor proposto
							-- Neste caso a Unimed origem perdeu o questionamento e É NECESSÁRIO COBRAR co-participação dos itens/conta envolvida na contestação.
							if (ie_pagamento_w = 'I') and (vl_cobrado_w = vl_acordo_w) then
								ie_status_copartic_w := 'S';
							end if;

							-- Quando for realizado o pagamento parcial da fatura (A500) e Valor  Reconhecido Inicial  for igual ao valor  proposto
							-- Neste caso a Unimed origem ganhou o questionamento e NÃO SERÁ COBRADA co-participação do item/conta envolvida na contestação.
							if (ie_pagamento_w = 'P') and (vl_reconh_inicial_w = vl_acordo_w) then
								ie_status_copartic_w := 'N';
							elsif (ie_copartic_contestacao_w	in ('S','G')) and (vl_reconh_inicial_w > 0) then
								--caso o item tenha algum valor liberado só que no entanto este não seja liberado durante o processo de contestação ainda assim é necessário liberar o mesmo para que estes valroes sejam cobrados
								ie_status_copartic_w := 'S';
							end if;

						elsif (ie_tipo_acordo_w = '01') then -- Questionamento encerrado com Acordo
							-- Quando for realizado o pagamento integral da fatura (A500) e Valor cobrado for diferente do valor proposto
							-- Neste caso a Unimed origem ganhou o questionamento e NÃO SERÁ COBRADA co-participação do item/conta envolvida na contestação
							if (ie_pagamento_w = 'I') and (vl_cobrado_w <> vl_acordo_w) then
								ie_status_copartic_w := 'N';
							end if;

							-- Quando for realizado o pagamento parcial da fatura (A500) e Valor  Reconhecido Inicial  for diferente ao valor proposto
							-- Neste caso a Unimed origem perdeu o questionamento e É NECESSÁRIO COBRAR co-participação dos itens/conta envolvida na contestação.
							if (ie_pagamento_w = 'P') and (vl_reconh_inicial_w <> vl_acordo_w) then
								ie_status_copartic_w := 'S';
							elsif (ie_copartic_contestacao_w	in ('S','G')) and (vl_reconh_inicial_w > 0) then
								--caso o item tenha algum valor liberado só que no entanto este não seja liberado durante o processo de contestação ainda assim é necessário liberar o mesmo para que estes valroes sejam cobrados
								ie_status_copartic_w := 'S';
							end if;
						end if;
					end if;

					open C02;
					loop
					fetch C02 into
						nr_seq_conta_copartic_w;
					EXIT WHEN NOT FOUND; /* apply on C02 */
						begin
						if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
							update	pls_conta_coparticipacao
							set	ie_status_coparticipacao	= ie_status_copartic_w,
								dt_atualizacao				= clock_timestamp(),
								nm_usuario					= nm_usuario_p
							where	nr_sequencia			= nr_seq_conta_copartic_w
							and	nr_seq_conta_proc		= nr_seq_conta_proc_w;

						elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
							update	pls_conta_coparticipacao
							set	ie_status_coparticipacao	= ie_status_copartic_w,
								dt_atualizacao				= clock_timestamp(),
								nm_usuario					= nm_usuario_p
							where	nr_sequencia			= nr_seq_conta_copartic_w
							and	nr_seq_conta_mat		= nr_seq_conta_mat_w;
						end if;
						end;
					end loop;
					close C02;

					vl_acordo_w := 0;
					vl_cobrado_w := 0;
					vl_reconhecido_w := 0;
					vl_reconh_inicial_w := 0;
					end;
				end loop;
				close C00;
			end if;
		end if;
	else
		select	count(1)
		into STRICT	qt_contestacao_conta_w
		from	pls_contestacao		b,
			pls_lote_contestacao	c
		where	b.nr_seq_lote		= c.nr_sequencia
		and	b.nr_seq_conta		= nr_seq_conta_p
		and	c.ie_status not in ('E','C');

		if (qt_contestacao_conta_w > 0) then
			ie_status_copartic_w	:= 'N';
		end if;
	end if;
end if;
ie_status_copartic_orig_w := ie_status_copartic_w;

select	max(ie_origem_conta)
into STRICT	ie_origem_conta_w
from	pls_conta
where	nr_sequencia = nr_seq_conta_p;

if (ie_cobrar_item_w = 'N') then
	for r_c01_w in C01() loop
		begin
		/*if	(ie_status_copartic_orig_w = 'S') then -- Alterado para osmente considerar as glosas se a conta for de intercâmbio, pois se não for de intercâmbio
		Trecho retirado pois não vi sentido nesta consistência - OS 1151230 */
			ie_status_copartic_w	:= 'S';
			if (r_c01_w.nr_seq_conta_proc IS NOT NULL AND r_c01_w.nr_seq_conta_proc::text <> '') then
				select	max(ie_glosa),
					max(qt_procedimento_imp),
					max(qt_procedimento)
				into STRICT	ie_glosa_w,
					qt_apresentada_w,
					qt_liberada_w
				from	pls_conta_proc
				where	nr_sequencia	= r_c01_w.nr_seq_conta_proc;

				if (ie_origem_conta_w = 'A') then
					if (ie_copartic_contestacao_w = 'M') then
						select	count(1)
						into STRICT	qt_motivo_w
						from	pls_ocorrencia_benef 		f,
							pls_ocorrencia			o,
							pls_regra_copart_mot_quest	r
						where	o.nr_seq_motivo_ptu	= r.nr_seq_mot_questionamento
						and	o.nr_sequencia		= f.nr_seq_ocorrencia
						and	f.ie_situacao		= 'A'
						and	f.nr_seq_conta_proc	= r_c01_w.nr_seq_conta_proc;

						if (qt_motivo_w > 0) then
							ie_status_copartic_w := 'N';
						end if;
					elsif (ie_glosa_w = 'S') or
						(ie_copartic_contestacao_w = 'G' AND qt_apresentada_w != qt_liberada_w)  then
						ie_status_copartic_w := 'N';
					end if;
				else
					--Se item estiver glosado ou qt_liberada do item for zero e não a copartic não tiver regra
					--de cobrança de coparticipação para itens glosados, então setará o status copartic como N
					if	((r_c01_w.qt_regra_copart_glosados = 0) and
						 ((ie_glosa_w = 'S') or (qt_liberada_w = 0))) then
						ie_status_copartic_w := 'N';
					end if;
				end if;


			elsif (r_c01_w.nr_seq_conta_mat IS NOT NULL AND r_c01_w.nr_seq_conta_mat::text <> '') then
				select	max(ie_glosa),
					max(qt_material_imp),
					max(qt_material)
				into STRICT	ie_glosa_w,
					qt_apresentada_w,
					qt_liberada_w
				from	pls_conta_mat
				where	nr_sequencia	= r_c01_w.nr_seq_conta_mat;

				if (ie_origem_conta_w = 'A') then
					if (ie_copartic_contestacao_w = 'M') then
						select	count(1)
						into STRICT	qt_motivo_w
						from	pls_ocorrencia_benef 		f,
							pls_ocorrencia			o,
							pls_regra_copart_mot_quest	r
						where	o.nr_seq_motivo_ptu	= r.nr_seq_mot_questionamento
						and	o.nr_sequencia		= f.nr_seq_ocorrencia
						and	f.ie_situacao		= 'A'
						and	f.nr_seq_conta_mat	= r_c01_w.nr_seq_conta_mat;

						if (qt_motivo_w > 0) then
							ie_status_copartic_w := 'N';
						end if;
					elsif (ie_glosa_w = 'S') or
						(ie_copartic_contestacao_w = 'G' AND qt_apresentada_w != qt_liberada_w) then
						ie_status_copartic_w := 'N';
					end if;
				else
					--Se item estiver glosado ou qt_liberada do item for zero e não a copartic não tiver regra
					--de cobrança de coparticipação para itens glosados, então setará o status copartic como N
					if	((r_c01_w.qt_regra_copart_glosados = 0) and
						 ((ie_glosa_w = 'S') or (qt_liberada_w = 0))) then
						ie_status_copartic_w := 'N';
					end if;
				end if;
			end if;
		--end if;
		update	pls_conta_coparticipacao
		set	ie_status_coparticipacao	= ie_status_copartic_w,
			dt_atualizacao				= clock_timestamp(),
			nm_usuario					= nm_usuario_p
		where	nr_sequencia			= r_c01_w.nr_sequencia;

		end;
	end loop;

end if;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_atualiza_status_copartic ( nr_seq_conta_p bigint, ie_acao_p text, nr_seq_camara_contest_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

