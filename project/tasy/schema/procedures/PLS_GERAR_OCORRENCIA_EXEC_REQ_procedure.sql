-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_ocorrencia_exec_req ( nr_seq_execucao_item_p bigint, nr_seq_segurado_p bigint, ie_tipo_guia_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_material_p bigint, qt_item_p bigint, cd_medico_requisitante_p text, nr_seq_req_proc_p bigint, nr_seq_req_mat_p bigint, ie_tipo_processo_p text, nr_seq_requisicao_p bigint, nr_seq_prestador_p bigint, ie_tipo_pagador_p text, nr_seq_pagador_p bigint, qt_dias_vencido_p bigint, dt_execucao_w timestamp, cd_estabelecimento_p bigint, nm_usuario_p text, ie_cheque_devolvido_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar ocorrencias nas execucoes das requisicoes
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[  ]  Objetos do dicionario [ X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao: Performance.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_regra_w			bigint;
nr_seq_ocorrencia_w		bigint;
ie_tipo_item_w			bigint;
dt_requisicao_w			timestamp;
ie_auditoria_w			varchar(1);
ie_ocorrencia_w			varchar(1)	:= 'N';
qt_ocorrencia_w			bigint;
nr_seq_proc_w			bigint;
nr_seq_mat_w			bigint;
nr_seq_ocorrencia_benef_w	bigint;
ie_glosa_w			varchar(1)	:= 'N';
nr_seq_execucao_w		bigint;
qt_excecao_w			bigint;
nr_seq_plano_w			bigint;
nr_seq_estrutura_w		bigint;	
ie_excecao_w			varchar(1);
cd_procedimento_w		bigint;
ie_origem_proced_w		integer;
ie_estrutura_w			varchar(1);
nr_seq_motivo_glosa_w		numeric(20);
ie_qtde_liberacao_w		varchar(1)	:= 'S';
qt_liberada_w			double precision;
ie_tipo_qtde_w			varchar(3);
qt_tipo_quantidade_w		double precision;
nr_seq_item_w			bigint;
ie_ocorrencia_item_w		varchar(1)	:= 'N';
dt_item_w			timestamp;
qt_item_w				pls_execucao_req_item.qt_item%type;
ie_tipo_gat_w			varchar(2);
ie_tipo_gat_regra_w		varchar(2);

nr_seq_tipo_prestador_w		bigint;
nr_seq_classificacao_w		bigint;
ie_situacao_prest_w		varchar(2);
nr_seq_classificacao_regra_w	bigint;
nr_seq_prestador_regra_w	bigint;
nr_seq_tipo_prestador_regra_w	bigint;
ie_prestador_inativo_w		varchar(2);
ie_grupo_prest_w		varchar(2);
nr_seq_grupo_prestador_regra_w	bigint;
ds_observacao_w			varchar(400);
ie_tipo_valid_digital_w		bigint;
ie_digital_invalida_w		varchar(1);
ie_digital_obrigatoria_w	varchar(1);
ie_digital_cadastrada_w		varchar(1);
ie_somente_solicitacao_w	varchar(1);
ie_tipo_pessoa_qtde_w		varchar(1);
ie_valida_cod_prestador_w	varchar(1);
qt_dias_regra_prest_w		bigint;
cd_especialidade_w		bigint;
cd_espec_medica_w		bigint;
ie_regra_qt_dias_prest_w	varchar(1);
ie_tipo_pagador_w		varchar(2);
ie_pagador_isento_w		varchar(1) := 'N';
ie_valida_local_atend_w		varchar(1);
ie_pcmso_w			varchar(1);
nr_seq_grupo_servico_w		bigint;
nr_seq_grupo_material_w		bigint;
ie_grupo_material_w		varchar(1) := 'X';
ie_grupo_servico_w		varchar(1) := 'X';
ie_tipo_segurado_w		varchar(3);
ie_tipo_repasse_w		varchar(2)	:= 'X';
cd_cgc_w			varchar(14);
ie_gerar_oc_concorrente_w	varchar(1);
ie_concorrente_anterior_w	varchar(1);
nr_seq_regra_concorrente_w	bigint;
ie_carater_atendimento_w	varchar(1);
ie_possui_liminar_w		varchar(1);
ie_ocor_estab_w			pls_controle_estab.ie_ocorrencia%type := pls_obter_se_controle_estab('GO');

C01 CURSOR(	ie_ocor_estab_pc		pls_controle_estab.ie_ocorrencia%type,
		cd_estabelecimento_pc		estabelecimento.cd_estabelecimento%type) FOR
	SELECT	nr_sequencia,
		nr_seq_motivo_glosa,
		ie_auditoria
	from	pls_ocorrencia
	where	ie_situacao = 'A'
	and	ie_ocor_estab_pc = 'S'
	and	cd_estabelecimento = cd_estabelecimento_pc
	
union all

	SELECT	nr_sequencia, 
		nr_seq_motivo_glosa,
		ie_auditoria
	from	pls_ocorrencia
	where	ie_situacao = 'A'
	and	ie_ocor_estab_pc = 'N';


C02 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_estrutura,
		cd_procedimento,
		ie_origem_proced,
		qt_liberada,
		ie_tipo_qtde,
		qt_tipo_quantidade,
		ie_tipo_gat,
		ie_prestador_inativo,
		nr_seq_classificacao,
		nr_seq_prestador,
		nr_seq_tipo_prestador,
		nr_seq_grupo_prestador,
		ie_digital_invalida,
		ie_digital_obrigatoria,
		ie_digital_cadastrada,
		ie_somente_solicitacao,
		ie_tipo_pessoa_qtde,
		ie_valida_cod_prestador,
		qt_dias_regra_prest,
		cd_especialidade_medica,
		ie_tipo_pagador,
		ie_valida_local_atend,
		nr_seq_grupo_servico,
		nr_seq_grupo_material,
		nr_seq_concorrente,
		ie_concorrente_anterior,
		ie_possui_liminar
	from	pls_ocorrencia_regra
	where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w
	and	ie_aplicacao_regra	= 'E'
	and	ie_situacao		= 'A'
	and	((coalesce(ie_tipo_guia::text, '') = '') or (ie_tipo_guia = ie_tipo_guia_p))
	and	((coalesce(qt_dias_mensal_vencido,0) = 0) or ((qt_dias_vencido_p >= coalesce(qt_dias_mensal_vencido,0)) and (ie_pagador_isento_w = 'N')))
	and	((ie_tipo_pagador = 'A') or (ie_tipo_pagador = ie_tipo_pagador_p))
	and 	((ie_cheque_devolvido = 'N') or ((ie_cheque_devolvido = ie_cheque_devolvido_p) or (coalesce(ie_cheque_devolvido::text, '') = ''))) 
	and	((coalesce(ie_pcmso::text, '') = '') or (ie_pcmso = 'N') or (ie_pcmso = ie_pcmso_w))
	and	((coalesce(ie_tipo_repasse::text, '') = '')	or (ie_tipo_repasse = ie_tipo_repasse_w))
	and	dt_execucao_w between trunc(dt_inicio_vigencia) and fim_dia(coalesce(dt_fim_vigencia,dt_execucao_w))
	and	((coalesce(cd_procedimento::text, '') = '') or (cd_procedimento	= cd_procedimento_p and ie_origem_proced = ie_origem_proced_p))
	and	((coalesce(nr_seq_grupo_material::text, '') = '') or (pls_se_grupo_preco_material(nr_seq_grupo_material_w, nr_seq_material_p) = 'S'));



BEGIN

/*
ie_tipo_item_w
10 - Procedimento
11 - material
*/
select	nr_seq_execucao
into STRICT	nr_seq_execucao_w
from	pls_execucao_req_item
where	nr_sequencia = nr_seq_execucao_item_p;

if (coalesce(cd_procedimento_p,0) > 0) and (coalesce(ie_origem_proced_p,0) > 0) then
	ie_tipo_item_w := 10;
	nr_seq_proc_w := nr_seq_execucao_item_p;
elsif (coalesce(nr_seq_material_p,0) > 0) then
	ie_tipo_item_w := 11;
	nr_seq_mat_w := nr_seq_execucao_item_p;
end if;

nr_seq_item_w := nr_seq_execucao_item_p;

select	dt_requisicao,
	nr_seq_plano,
	ie_tipo_gat,
	cd_especialidade,
	ie_carater_atendimento
into STRICT	dt_requisicao_w,
	nr_seq_plano_w,
	ie_tipo_gat_w,
	cd_especialidade_w,
	ie_carater_atendimento_w
from	pls_requisicao
where	nr_sequencia = nr_seq_requisicao_p;

begin
	select	ie_tipo_validacao_digital
	into STRICT	ie_tipo_valid_digital_w
	from	pls_execucao_requisicao
	where	nr_sequencia	= nr_seq_execucao_w;
exception
when others then
	ie_tipo_valid_digital_w	:= 0;
end;

/* Obter dados do segurado */

begin
	select	ie_pcmso,
		ie_tipo_segurado
	into STRICT	ie_pcmso_w,
		ie_tipo_segurado_w
	from	pls_segurado
	where	nr_sequencia = nr_seq_segurado_p;
exception
when others then
	ie_pcmso_w := 'N';
end;

/* Obter dados do prestador */

begin
select	nr_seq_tipo_prestador,
	nr_seq_classificacao
into STRICT	nr_seq_tipo_prestador_w,
	nr_seq_classificacao_w
from	pls_prestador
where	nr_sequencia	= nr_seq_prestador_p;
exception
when others then
	nr_seq_tipo_prestador_w	:= 0;
end;

/* Obter tipo repasse */

if (ie_tipo_segurado_w in ('I','C','T','H')) then /* Se responsabilidade assumida, verifica o tipo de repasse do beneficiario */
	begin
	select	ie_tipo_repasse
	into STRICT	ie_tipo_repasse_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_p;
	exception
	when others then
		ie_tipo_repasse_w	:= 'X';
	end;
else /* Se a responsabilidade nao for assumida, significa que o beneficiario e da propria operadora, entao verifica o tipo de repasse que o beneficiario foi transferido */
	begin
		select	ie_tipo_repasse
		into STRICT	ie_tipo_repasse_w
		from	pls_segurado_repasse
		where	nr_seq_segurado	= nr_seq_segurado_p
		and	clock_timestamp()	between	dt_repasse and fim_dia(dt_fim_repasse)
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');
	exception
	when others then
		ie_tipo_repasse_w	:= 'X';
	end;
end if;

if (coalesce(ie_tipo_repasse_w::text, '') = '') then
	ie_tipo_repasse_w	:= 'X';
end if;

if (coalesce(nr_seq_pagador_p,0) > 0) then
	select	max(cd_cgc)
	into STRICT	cd_cgc_w
	from	pls_contrato_pagador
	where	nr_sequencia = nr_seq_pagador_p;

	ie_pagador_isento_w	:= pls_obter_se_pagador_isento(nr_seq_pagador_p,cd_cgc_w,dt_execucao_w);
end if;

open C01(ie_ocor_estab_w, cd_estabelecimento_p);
loop
fetch C01 into
	nr_seq_ocorrencia_w,
	nr_seq_motivo_glosa_w,
	ie_auditoria_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin

	/* Verificar se existem regras de excecao para a ocorrencia da regra*/

	select	count(1)
	into STRICT	qt_excecao_w
	from	pls_excecao_ocorrencia
	where	nr_seq_ocorrencia = nr_seq_ocorrencia_w
	and	ie_execucao_requisicao = 'S';

	if (qt_excecao_w > 0) then	
		/*Na rotina pls_obter_se_regra_excecao, ira retornar "S" se caiu em alguam regra de excecao, entao NAO ira gerar a ocorrencia. Se retornar "N" entao nao caiu em nenhuma regra*/

		ie_excecao_w :=	pls_obter_se_regra_excecao_exe(	nr_seq_ocorrencia_w, nr_seq_requisicao_p, nr_seq_item_w,
								nr_seq_req_proc_p, nr_seq_req_mat_p, dt_execucao_w,
								ie_tipo_item_w, nr_seq_prestador_p, cd_procedimento_p, 
								ie_origem_proced_p, nr_seq_material_p, nr_seq_segurado_p, 
								ie_tipo_guia_p, nr_seq_plano_w,ie_tipo_processo_p, 
								ie_tipo_repasse_w, ie_carater_atendimento_w, cd_estabelecimento_p, 
								nm_usuario_p);
		if (ie_excecao_w = 'S') then
			goto final2;
		end if;	
	end if;

	open C02;
	loop
	fetch C02 into	
		nr_seq_regra_w,
		nr_seq_estrutura_w,
		cd_procedimento_w,
		ie_origem_proced_w,
		qt_liberada_w,
		ie_tipo_qtde_w,
		qt_tipo_quantidade_w,
		ie_tipo_gat_regra_w,
		ie_prestador_inativo_w,
		nr_seq_classificacao_regra_w,
		nr_seq_prestador_regra_w,
		nr_seq_tipo_prestador_regra_w,
		nr_seq_grupo_prestador_regra_w,
		ie_digital_invalida_w,
		ie_digital_obrigatoria_w,
		ie_digital_cadastrada_w,
		ie_somente_solicitacao_w,
		ie_tipo_pessoa_qtde_w,
		ie_valida_cod_prestador_w,
		qt_dias_regra_prest_w,
		cd_espec_medica_w,
		ie_tipo_pagador_w,
		ie_valida_local_atend_w,
		nr_seq_grupo_servico_w,
		nr_seq_grupo_material_w,
		nr_seq_regra_concorrente_w,
		ie_concorrente_anterior_w,
		ie_possui_liminar_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		if (coalesce(ie_possui_liminar_w, 'N') = 'S')  then
			goto final;
		end if;
		
		------------------------------------------------------------------------------------------------------------VALIDACOES DE PRESTADOR--------------------------------------------------------------------------------------------

		/*Se for regra de prestador inativo*/

		if (coalesce(ie_prestador_inativo_w,'N') = 'S') then
			if (coalesce(nr_seq_prestador_p,0) > 0) then
				begin
					select	'S'
					into STRICT	ie_situacao_prest_w
					from	pls_prestador
					where	nr_sequencia  = nr_seq_prestador_p
					and	dt_requisicao_w between dt_cadastro and coalesce(dt_exclusao, dt_requisicao_w);
				exception
				when others then
					ie_situacao_prest_w	:= 'N';
				end;

				if (ie_situacao_prest_w = 'S') then
					goto final;
				end if;
			else
				goto final;
			end if;
		end if;	

		/*Obter se a regra e para uma classificacao do prestador*/

		if (coalesce(nr_seq_classificacao_regra_w,0) > 0) then
			if (nr_seq_classificacao_regra_w <> nr_seq_classificacao_w) then
				goto final;
			end if;
		end if;	

		/*Obter se a regra e para um prestador especifico*/

		if (coalesce(nr_seq_prestador_regra_w,0) > 0) then
			if (nr_seq_prestador_regra_w <> nr_seq_prestador_p) then
				goto final;
			end if;
		end if;	

		/*Se for uma regra para o tipo do prestador*/

		if (coalesce(nr_seq_tipo_prestador_regra_w,0) > 0) then
			/*Se for e verificado se o prestador e do tipo do prestador da regra*/
		
			if (nr_seq_tipo_prestador_regra_w <> nr_seq_tipo_prestador_w) then
				goto final;
			end if;
		end if;	

		/*Verificar se o prestador pertence ao grupo dos prestador*/

		if (coalesce(nr_seq_grupo_prestador_regra_w,0) > 0) then
			ie_grupo_prest_w	:= pls_se_grupo_preco_prestador(nr_seq_grupo_prestador_regra_w, nr_seq_prestador_p, nr_seq_classificacao_w);
			if (ie_grupo_prest_w = 'N') then
				goto final;
			end if;
		end if;
		------------------------------------------------------------------------------------------------------------FIM--------------------------------------------------------------------------------------------


		/*Grupo servico*/

		if (coalesce(nr_seq_grupo_servico_w,0) > 0) then
			ie_grupo_servico_w	:= pls_se_grupo_preco_servico(nr_seq_grupo_servico_w, cd_procedimento_p, ie_origem_proced_p);
			if (ie_grupo_servico_w	= 'N') then
				goto final;
			end if;
		end if;

		/* Grupo de material */

		if (coalesce(nr_seq_grupo_material_w,0) > 0) and (coalesce(nr_seq_material_p,0) > 0) then
			ie_grupo_material_w	:= pls_se_grupo_preco_material(nr_seq_grupo_material_w, nr_seq_material_p);
			if (ie_grupo_material_w	= 'N') then
				goto final;
			end if;
		end if;

		/*Se for uma regra de quantidades de dias da regra de prestador */

		if (coalesce(qt_dias_regra_prest_w,0) = 0) then	
			/*Se for uma regra com Especialidade medica informada*/
	
			if (cd_espec_medica_w IS NOT NULL AND cd_espec_medica_w::text <> '') then
				if (ie_tipo_item_w	in (10,11))  then
					if (cd_espec_medica_w	<> cd_especialidade_w) then
						goto final;
					end if;
				else
					goto final;
				end if;
			end if;
		else
			ie_regra_qt_dias_prest_w := pls_obter_se_dias_regra_prest(	nr_seq_requisicao_p, null, nr_seq_execucao_w, nr_seq_item_w, ie_tipo_item_w, cd_espec_medica_w, qt_dias_regra_prest_w, null, null, null, nm_usuario_p, ie_regra_qt_dias_prest_w);
			if (ie_regra_qt_dias_prest_w = 'N') then
				goto final;
			end if;	
		end if;

		/*Se for regra de itens com estrutura ou procedimento informado*/
 
		/*Se for uma regra de procedimento*/
		if (cd_procedimento_w > 0)and (coalesce(nr_seq_estrutura_w,0) = 0) then
			/*Verifica se o procedimento da regra consiste com o do procedimento da conta / guia*/
 
			if (cd_procedimento_w <> coalesce(cd_procedimento_p,0)) or (ie_origem_proced_w <> coalesce(ie_origem_proced_p,0)) then
				goto final;
			end if;
		/*Se for regra de estrutura*/

		elsif (nr_seq_estrutura_w > 0) and (coalesce(cd_procedimento_w,0) = 0) then
			/*Verifica-se se algum dos procedimentos daestrutura existe na conta / guia*/
 
			ie_estrutura_w	:= pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, cd_procedimento_p, ie_origem_proced_p, nr_seq_material_p);
			if (ie_estrutura_w = 'N') then
				/*Se nao existe */
 
				goto final;
			end if;
		/*Se for regra de estrutura e procedimento verifica-se os dois*/
		elsif (cd_procedimento_w > 0)and (nr_seq_estrutura_w > 0) then 
			/*Se na regra ja coincidiu o procedimento com o da conta ja e gerado ocorrencia sem necessidadse de verificar a estrutura.	*/
 
			if	(((cd_procedimento_w <> cd_procedimento_p) or (ie_origem_proced_w <> ie_origem_proced_p)) or (coalesce(cd_procedimento_p,0) = 0)) then
				/*Se for regar de material ou o procedimento nao consistir com a regra e verificado a estrutura.*/
 
				if (pls_obter_se_estrut_ocorrencia(nr_seq_estrutura_w, cd_procedimento_p, ie_origem_proced_p, nr_seq_material_p) = 'N') then 
					goto final;
				end if;
			end if;
		end if;

		/* Verificar se a regra por quantidade liberada */
		if (coalesce(qt_liberada_w,0) > 0) then 
			SELECT * FROM pls_obter_qtd_ocorrencia(	nr_seq_item_w, ie_tipo_item_w, qt_liberada_w, ie_tipo_qtde_w, qt_tipo_quantidade_w, ie_tipo_pessoa_qtde_w, null, null, nr_seq_estrutura_w, nr_seq_ocorrencia_w, null, coalesce(ie_somente_solicitacao_w,'N'), null, coalesce(ie_valida_cod_prestador_w,'N'), null, coalesce(ie_valida_local_atend_w,'N'), cd_estabelecimento_p, null, null, null, ie_qtde_liberacao_w, ds_observacao_w) INTO STRICT ie_qtde_liberacao_w, ds_observacao_w;
			if (ie_qtde_liberacao_w = 'S') then
				goto final;
			end if;
		end if;

		/*Caso seja uma regra com o campo GAT setado*/

		if (coalesce(ie_tipo_gat_regra_w,'N')	= 'S') then
			if (ie_tipo_item_w	in (10,11)) then
				if (coalesce(ie_tipo_gat_w,'N') <> 'S') then
					goto final;
				end if;
			else
				goto final;
			end if;
		end if;
		/* */



		/* Caso seja uma regra com um dos campos Digital invalida ou Digital nao informada ou Digital nao cadastrada, informados */

		if (coalesce(ie_digital_invalida_w,'N')	= 'S') then
			if (ie_tipo_item_w	in (10,11)) then
				if (coalesce(ie_tipo_valid_digital_w,0)	<> 1) then
					goto final;
				end if;
			else
				goto final;
			end if;
		end if;

		if (coalesce(ie_digital_obrigatoria_w,'N')	= 'S') then
			if (ie_tipo_item_w	in (10,11)) then
				if (coalesce(ie_tipo_valid_digital_w,0)	<> 2) then
					goto final;
				end if;
			else
				goto final;
			end if;
		end if;

		if (coalesce(ie_digital_cadastrada_w,'N')	= 'S') then
			if (ie_tipo_item_w	in (10,11)) then
				if (coalesce(ie_tipo_valid_digital_w,0)	<> 3) then
					goto final;
				end if;
			else
				goto final;
			end if;
		end if;

		/*Se for regra de concorrente*/
	
		if (coalesce(nr_seq_regra_concorrente_w,0) > 0) then
			if (ie_tipo_item_w	in (10)) then
				select	count(1)
				into STRICT	qt_ocorrencia_w
				from	pls_ocorrencia_benef
				where	nr_seq_ocorrencia	= nr_seq_ocorrencia_w 
				and	nr_seq_execucao		= nr_seq_execucao_w 
				and	(nr_seq_proc IS NOT NULL AND nr_seq_proc::text <> '');

				if (qt_ocorrencia_w	= 0) then
					ie_gerar_oc_concorrente_w := pls_gerar_oc_concorrente_exec(	nr_seq_regra_concorrente_w, cd_procedimento_p, ie_origem_proced_p, nr_seq_execucao_w, coalesce(ie_concorrente_anterior_w,'N'), null, nm_usuario_p, ie_gerar_oc_concorrente_w);
				end if;

				if (coalesce(ie_gerar_oc_concorrente_w,'N') = 'N') then
					goto final;
				end if;
				
				ie_gerar_oc_concorrente_w	:= '';
			else
				goto final;
			end if;
		end if;


		/* Fim */

		
		if (ie_auditoria_w = 'S') then
			ie_ocorrencia_w := 'S';
		end if;

		nr_seq_ocorrencia_benef_w := pls_inserir_ocorrencia(nr_seq_segurado_p, nr_seq_ocorrencia_w, null, null, null, nr_seq_proc_w, nr_seq_mat_w, nr_seq_regra_w, nm_usuario_p, ds_observacao_w, nr_seq_motivo_glosa_w, ie_tipo_item_w, cd_estabelecimento_p, 'N', nr_seq_execucao_w, nr_seq_ocorrencia_benef_w, null, null, null, null);

		goto final3;

		<<final>>
		qt_ocorrencia_w	:= 0; /* Deve existir uma linha apos o <<Final>> */
		end;
	end loop;
	<<final3>>
	close C02;

	<<final2>>
	qt_ocorrencia_w	:= 0;
	end;
end loop;
close C01;


if (ie_tipo_item_w in (10,11)) then
	if (coalesce(nr_seq_execucao_item_p,0) <> 0) then
		select	a.dt_atualizacao,
			a.qt_item
		into STRICT	dt_item_w,
			qt_item_w
		from	pls_execucao_req_item a
		where	a.nr_sequencia	= nr_seq_execucao_item_p;
	end if;

	ie_ocorrencia_item_w := pls_gerar_ocorrencia_item_exec(ie_tipo_item_w, cd_procedimento_p, ie_origem_proced_p, nr_seq_material_p, nr_seq_segurado_p, nr_seq_execucao_item_p, nr_seq_proc_w, nr_seq_mat_w, 'N', null, dt_requisicao_w, qt_item_w, cd_estabelecimento_p, nm_usuario_p, ie_ocorrencia_item_w);
	if (ie_ocorrencia_item_w = 'S') then
		ie_ocorrencia_w := ie_ocorrencia_item_w;
	end if;
end if;

if (ie_ocorrencia_w = 'N') then
	ie_ocorrencia_w := pls_obter_se_item_exec_ocorr(nr_seq_execucao_w, nr_seq_execucao_item_p, ie_tipo_item_w);
end if;

ie_glosa_w := pls_obter_se_item_glosa(nr_seq_execucao_item_p,ie_tipo_item_w);

if (ie_ocorrencia_w	= 'S') then
	update	pls_execucao_req_item
	set	ie_situacao	= 'A',
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_sequencia	= nr_seq_execucao_item_p;
elsif (ie_ocorrencia_w	= 'N') and (ie_glosa_w		= 'S') then
	update	pls_execucao_req_item
	set	ie_situacao	= 'N',
		dt_atualizacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_sequencia	= nr_seq_execucao_item_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_ocorrencia_exec_req ( nr_seq_execucao_item_p bigint, nr_seq_segurado_p bigint, ie_tipo_guia_p text, cd_procedimento_p bigint, ie_origem_proced_p bigint, nr_seq_material_p bigint, qt_item_p bigint, cd_medico_requisitante_p text, nr_seq_req_proc_p bigint, nr_seq_req_mat_p bigint, ie_tipo_processo_p text, nr_seq_requisicao_p bigint, nr_seq_prestador_p bigint, ie_tipo_pagador_p text, nr_seq_pagador_p bigint, qt_dias_vencido_p bigint, dt_execucao_w timestamp, cd_estabelecimento_p bigint, nm_usuario_p text, ie_cheque_devolvido_p text) FROM PUBLIC;

