-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



--
-- dblink wrapper to call function gerar_etapa_estagio_pend as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE PROCEDURE gerar_etapa_estagio_pend ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nr_seq_estagio_p bigint, dt_fechamento_p timestamp, ie_evento_p text, nm_usuario_p text) AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

BEGIN
	v_query := 'CALL gerar_etapa_estagio_pend_atx ( ' || quote_nullable(nr_atendimento_p) || ',' || quote_nullable(nr_interno_conta_p) || ',' || quote_nullable(nr_seq_estagio_p) || ',' || quote_nullable(dt_fechamento_p) || ',' || quote_nullable(ie_evento_p) || ',' || quote_nullable(nm_usuario_p) || ' )';
	PERFORM * FROM dblink(v_conn_str, v_query) AS p (ret boolean);

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;




CREATE OR REPLACE PROCEDURE gerar_etapa_estagio_pend_atx ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nr_seq_estagio_p bigint, dt_fechamento_p timestamp, ie_evento_p text, nm_usuario_p text) AS $body$
DECLARE

			 
qt_existe_w		bigint;
nr_seq_etapa_w		bigint;
nr_interno_conta_w	bigint;
ie_tipo_atendimento_w	smallint;
cd_convenio_w		integer;
ie_evento_w		varchar(1);
cd_estabelecimento_w	bigint;
nr_seq_classificacao_w	bigint;
cd_setor_atendimento_w	integer;
cd_categoria_w		varchar(10);
nr_seq_motivo_dev_w	bigint;
cd_setor_usuario_w	integer;
ie_tipo_convenio_w	smallint;
nr_seq_etapa_filtro_w	bigint;
ie_regra_restrita_etapa_w	varchar(1);
ie_encontrou_regra_w	varchar(1);
cd_setor_atend_etapa_w	fatur_etapa_alta.cd_setor_atend_etapa%type;C01 CURSOR FOR
	SELECT	nr_seq_etapa, 
		nr_seq_motivo_dev, 
		cd_setor_atend_etapa 
	from	fatur_etapa_alta 
	where	((coalesce(cd_convenio::text, '') = '') or (coalesce(cd_convenio, coalesce(cd_convenio_w,0)) = coalesce(cd_convenio_w,0))) 
	and	((coalesce(cd_categoria::text, '') = '') or (coalesce(cd_categoria, coalesce(cd_categoria_w,'0')) = coalesce(cd_categoria_w,'0'))) 
	and	((coalesce(ie_tipo_atendimento::text, '') = '') or (coalesce(ie_tipo_atendimento, coalesce(ie_tipo_atendimento_w,0)) = coalesce(ie_tipo_atendimento_w,0))) 
	and 	coalesce(cd_estabelecimento, coalesce(cd_estabelecimento_w,1)) = coalesce(cd_estabelecimento_w,1) 
	and 	coalesce(nr_seq_classificacao, coalesce(nr_seq_classificacao_w,0)) = coalesce(nr_seq_classificacao_w,0) 
	and	coalesce(cd_setor_atendimento, coalesce(cd_setor_atendimento_w,0)) = coalesce(cd_setor_atendimento_w,0) 
	and (coalesce(ie_evento,'A') = coalesce(ie_evento_w,'A')) 
	and	coalesce(cd_perfil, coalesce(obter_perfil_ativo,0)) = coalesce(obter_perfil_ativo,0) 
	and	coalesce(nr_seq_estagio, coalesce(nr_seq_estagio_p,0)) = coalesce(nr_seq_estagio_p,0) 
	and	coalesce(ie_tipo_convenio, coalesce(ie_tipo_convenio_w,0)) = coalesce(ie_tipo_convenio_w,0) 
	and	coalesce(nr_seq_etapa_filtro, coalesce(nr_seq_etapa_filtro_w,0)) = coalesce(nr_seq_etapa_filtro_w,0) 
	and	ie_situacao = 'A' 
	order by	coalesce(nr_seq_etapa_filtro,0), 
		coalesce(nr_seq_estagio,0), 
		coalesce(cd_convenio,0), 
		coalesce(cd_categoria,'0'), 
		coalesce(cd_setor_atendimento,0), 
		coalesce(ie_tipo_atendimento,0), 
		coalesce(ie_tipo_convenio,0), 
		coalesce(nr_seq_classificacao,0), 
		coalesce(cd_perfil,0), 
		coalesce(cd_estabelecimento,0);
	

BEGIN 
 
select	count(*) 
into STRICT	qt_existe_w 
from	fatur_etapa_alta;
 
select	coalesce(max(a.ie_tipo_atendimento),0), 
	coalesce(max(a.cd_estabelecimento),1), 
	coalesce(max(a.nr_seq_classificacao),0), 
	coalesce(max(obter_setor_atendimento(a.nr_atendimento)),0), 
	coalesce(max(b.cd_convenio_parametro),0), 
	coalesce(max(b.cd_categoria_parametro),'0'), 
	coalesce(max(obter_tipo_convenio(b.cd_convenio_parametro)),0) 
into STRICT	ie_tipo_atendimento_w, 
	cd_estabelecimento_w, 
	nr_seq_classificacao_w, 
	cd_setor_atendimento_w, 
	cd_convenio_w, 
	cd_categoria_w, 
	ie_tipo_convenio_w 
from	atendimento_paciente a, 
	conta_paciente b 
where	a.nr_atendimento = b.nr_atendimento 
and	b.nr_interno_conta = nr_interno_conta_p;
 
select	coalesce(obter_conta_paciente_etapa(nr_interno_conta_p, 'C'),0) 
into STRICT	nr_seq_etapa_filtro_w
;
 
select	max(cd_setor_atendimento) 
into STRICT	cd_setor_usuario_w 
from	usuario 
where	nm_usuario = nm_usuario_p;
 
select	coalesce(max(ie_regra_restrita_etapa),'N') 
into STRICT	ie_regra_restrita_etapa_w 
from	parametro_faturamento 
where	cd_estabelecimento = cd_estabelecimento_w;
 
if (coalesce(qt_existe_w,0) > 0) then 
 
	if (coalesce(nr_interno_conta_p,0) > 0) then 
		 
		ie_evento_w 		:= coalesce(ie_evento_p,'L');
		ie_encontrou_regra_w	:= 'N';
		 
		open C01;
		loop 
		fetch C01 into	 
			nr_seq_etapa_w, 
			nr_seq_motivo_dev_w, 
			cd_setor_atend_etapa_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			ie_encontrou_regra_w	:= 'S';
			 
			if (ie_regra_restrita_etapa_w = 'N') then 
				CALL gerar_conta_etapa_completo(nr_interno_conta_p, nm_usuario_p, nr_seq_etapa_w, nr_seq_motivo_dev_w, 
					coalesce(dt_fechamento_p, clock_timestamp()), null, null, coalesce(cd_setor_atend_etapa_w, cd_setor_usuario_w), null, dt_fechamento_p, null);
			end if;
			end;
		end loop;
		close C01;
		 
		if (ie_regra_restrita_etapa_w = 'S') and (ie_encontrou_regra_w = 'S') then 
			CALL gerar_conta_etapa_completo(nr_interno_conta_p, nm_usuario_p, nr_seq_etapa_w, nr_seq_motivo_dev_w, 
				coalesce(dt_fechamento_p, clock_timestamp()), null, null, coalesce(cd_setor_atend_etapa_w, cd_setor_usuario_w), null, dt_fechamento_p, null);
		end if;
		 
	end if;
	 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_etapa_estagio_pend ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nr_seq_estagio_p bigint, dt_fechamento_p timestamp, ie_evento_p text, nm_usuario_p text) FROM PUBLIC; -- REVOKE ALL ON PROCEDURE gerar_etapa_estagio_pend_atx ( nr_atendimento_p bigint, nr_interno_conta_p bigint, nr_seq_estagio_p bigint, dt_fechamento_p timestamp, ie_evento_p text, nm_usuario_p text) FROM PUBLIC;

