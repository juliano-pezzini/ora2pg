-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_evento_agenda_cirurgica ( nr_seq_evento_p bigint, nr_seq_agenda_p bigint, nr_seq_conjunto_p bigint, cd_equipamento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_trigger_p text) AS $body$
DECLARE

					 
/* 
CUIDAR COM MUTANTES, OU SEJA FAZER UM SELECT NA AGENDA, SENDO QUE A TRIGGER DA AGENDA ESTA EM EXECU?O. 
CUIDAR COM MUTANTES, OU SEJA FAZER UM SELECT NA AGENDA, SENDO QUE A TRIGGER DA AGENDA ESTA EM EXECU?O. 
CUIDAR COM MUTANTES, OU SEJA FAZER UM SELECT NA AGENDA, SENDO QUE A TRIGGER DA AGENDA ESTA EM EXECU?O. 
CUIDAR COM MUTANTES, OU SEJA FAZER UM SELECT NA AGENDA, SENDO QUE A TRIGGER DA AGENDA ESTA EM EXECU?O. 
CUIDAR COM MUTANTES, OU SEJA FAZER UM SELECT NA AGENDA, SENDO QUE A TRIGGER DA AGENDA ESTA EM EXECU?O. 
CUIDAR COM MUTANTES, OU SEJA FAZER UM SELECT NA AGENDA, SENDO QUE A TRIGGER DA AGENDA ESTA EM EXECU?O. 
CUIDAR COM MUTANTES, OU SEJA FAZER UM SELECT NA AGENDA, SENDO QUE A TRIGGER DA AGENDA ESTA EM EXECU?O. 
CUIDAR COM MUTANTES, OU SEJA FAZER UM SELECT NA AGENDA, SENDO QUE A TRIGGER DA AGENDA ESTA EM EXECU?O. 
CUIDAR COM MUTANTES, OU SEJA FAZER UM SELECT NA AGENDA, SENDO QUE A TRIGGER DA AGENDA ESTA EM EXECU?O. 
*/
 
 
ie_forma_ev_w		varchar(15);
ie_pessoa_destino_w	varchar(15);
cd_pf_destino_w		varchar(10);
ds_mensagem_w		varchar(4000);
ds_titulo_w		varchar(100);
cd_pessoa_destino_w	varchar(10);
nr_sequencia_w		bigint;
ds_maquina_w		varchar(80);
nm_paciente_w		varchar(60);
ds_unidade_w		varchar(60);
ds_setor_atendimento_w	varchar(60);
ie_usuario_aceite_w	varchar(1);
qt_corresp_w		integer;
cd_setor_atendimento_w	integer;
cd_perfil_w		integer;
cd_pessoa_regra_w	varchar(10);
nr_ramal_w		varchar(10);
nr_telefone_w		varchar(10);
cd_convenio_w		bigint;

ds_Agenda_w		varchar(50);
nm_pac_Agenda_w		varchar(60);
hr_inicio_w		timestamp;
nm_medico_w		varchar(60);
ds_procedimento_w	varchar(255);
dt_cancelamento_w	timestamp;
nm_usuario_destino_w	varchar(15);
cd_setor_atend_pac_w	integer;
ds_cid_w		varchar(240);
cd_cid_w		varchar(10);
ds_material_w		varchar(255);
qt_material_w		double precision;
ds_autorizacao_w	varchar(255);
cd_anestesista_w	varchar(10);
nr_reserva_w		varchar(20);
nr_atendimento_w	bigint;
cd_medico_w		varchar(10);
cd_pessoa_fisica_w	varchar(10);
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;
nr_seq_proc_interno_w	bigint;
cd_procedimento_adic_w	bigint;
ds_procedimento_adic_w	varchar(255);
ds_proc_adic_w		varchar(4000);
ds_equipamento_w	varchar(255);
ds_estab_equip_emprestado_w varchar(255);
ds_estab_cme_w		varchar(255);

 
C01 CURSOR FOR 
	SELECT	ie_forma_ev, 
		ie_pessoa_destino, 
		cd_pf_destino, 
		coalesce(ie_usuario_aceite,'N'), 
		cd_setor_atendimento, 
		cd_perfil 
	from	ev_evento_regra_dest 
	where	nr_seq_evento	= nr_seq_evento_p 
	and	coalesce(cd_convenio, coalesce(cd_convenio_w,0))	= coalesce(cd_convenio_w,0) 
	and	coalesce(cd_setor_atend_pac, coalesce(cd_setor_atend_pac_w,0))	= coalesce(cd_setor_atend_pac_w,0) 
	order by ie_forma_ev;
	
	 
 
C02 CURSOR FOR 
	SELECT	obter_dados_usuario_opcao(nm_usuario,'C') 
	from	usuario_setor_v 
	where	cd_setor_atendimento = cd_setor_atendimento_w 
	and	ie_forma_ev_w in (2,3) 
	and	(obter_dados_usuario_opcao(nm_usuario,'C') IS NOT NULL AND (obter_dados_usuario_opcao(nm_usuario,'C'))::text <> '');

C03 CURSOR FOR 
	SELECT	obter_dados_usuario_opcao(nm_usuario,'C'), 
			nm_usuario 
	from	usuario_perfil 
	where	cd_perfil = cd_perfil_w 
	and	ie_forma_ev_w in (2,3) 
	and	(obter_dados_usuario_opcao(nm_usuario,'C') IS NOT NULL AND (obter_dados_usuario_opcao(nm_usuario,'C'))::text <> '');
	
C04 CURSOR FOR	 
	SELECT	cd_procedimento, 
		substr(obter_exame_agenda(cd_procedimento, ie_origem_proced, nr_seq_proc_interno),1,240) 
	from 	agenda_paciente_proc 
	where	nr_sequencia = nr_seq_agenda_p;
	
	 

BEGIN 
 
ds_maquina_w := substr(obter_inf_sessao(0),1,80);
 
select	max(ds_titulo), 
	max(ds_mensagem) 
into STRICT	ds_titulo_w, 
	ds_mensagem_w 
from	ev_evento 
where	nr_sequencia	= nr_seq_evento_p;
 
select	max(b.cd_anestesista), 
	max(b.nr_reserva), 
	max(b.hr_inicio), 
	max(b.cd_convenio), 
	max(b.nr_atendimento), 
	max(b.cd_medico), 
	max(b.cd_pessoa_fisica), 
	max(a.ds_agenda), 
	max(b.cd_procedimento), 
	max(b.ie_origem_proced), 
	max(b.nr_seq_proc_interno) 
into STRICT	cd_anestesista_w, 
	nr_reserva_w, 
	hr_inicio_w, 
	cd_convenio_w, 
	nr_atendimento_w, 
	cd_medico_w, 
	cd_pessoa_fisica_w, 
	ds_agenda_w, 
	cd_procedimento_w, 
	ie_origem_proced_w, 
	nr_seq_proc_interno_w 
from	agenda a, 
	agenda_paciente	b 
where	a.cd_agenda 	= b.cd_agenda 
and	b.nr_sequencia 	= nr_seq_agenda_p;
 
if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then 
	select	substr(obter_unidade_atendimento(nr_atendimento_w,'A','U'),1,60), 
		substr(obter_unidade_atendimento(nr_atendimento_w,'A','RA'),1,60), 
		substr(obter_unidade_atendimento(nr_atendimento_w,'A','TL'),1,60), 
		substr(obter_unidade_atendimento(nr_atendimento_w,'A','S'),1,60), 
		substr(obter_unidade_atendimento(nr_atendimento_w,'A','CS'),1,60) 
	into STRICT	ds_unidade_w, 
		nr_ramal_w, 
		nr_telefone_w, 
		ds_setor_atendimento_w, 
		cd_setor_atend_pac_w 
	;
end if;	
 
 
 
ds_procedimento_w	:= substr(cd_procedimento_w||' - '|| obter_exame_agenda(cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w),1,255);
nm_paciente_w		:= substr(obter_nome_pf(cd_pessoa_fisica_w),1,60);
nm_medico_w		:= substr(obter_nome_pf(cd_medico_w),1,60);
 
open C04;
loop 
fetch C04 into 
	cd_procedimento_adic_w, 
	ds_procedimento_adic_w;
EXIT WHEN NOT FOUND; /* apply on C04 */
	begin 
	if (coalesce(ds_proc_adic_w::text, '') = '') then 
		ds_proc_adic_w := cd_procedimento_adic_w || ' - ' || ds_procedimento_adic_w||chr(13);
	else		 
		ds_proc_adic_w := ds_proc_adic_w || cd_procedimento_adic_w || ' - ' || ds_procedimento_adic_w||chr(13);
	end if;
	end;
end loop;
close C04;	
 
if (coalesce(cd_equipamento_p,0) > 0) then 
	select	substr(ds_equipamento,1,255), 
		substr(obter_nome_estabelecimento(cd_estabelecimento),1,255) 
	into STRICT	ds_equipamento_w, 
		ds_estab_equip_emprestado_w 
	from	equipamento 
	where	cd_equipamento = cd_equipamento_p;
end if;	
 
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@paciente',nm_paciente_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@quarto',ds_unidade_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@setor',ds_setor_atendimento_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@atendimento',nr_atendimento_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@ramal',nr_ramal_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@telefone',nr_telefone_w),1,4000);
 
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@agenda',ds_agenda_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@dtinicioagenda',PKG_DATE_FORMATERS.to_varchar(hr_inicio_w, 'timestamp', cd_estabelecimento_p, nm_usuario_p)),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@medicoagenda',nm_medico_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@procagenda',ds_procedimento_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@procadicagenda',ds_proc_adic_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@reserva',nr_reserva_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@cmesolicitado',cm_obter_dados_conjunto(nr_seq_conjunto_p,'N')),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@equipsolicitado',ds_equipamento_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@estabeequipsolicitado',ds_estab_equip_emprestado_w),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@estabeequipsolicitante', obter_nome_estabelecimento(cd_estabelecimento_p)),1,4000);
ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@estabelecimentocme', obter_nome_estabelecimento(cm_obter_dados_conjunto(nr_seq_conjunto_p,'E'))),1,4000);
 
 
select	nextval('ev_evento_paciente_seq') 
into STRICT	nr_sequencia_w
;
 
insert into ev_evento_paciente( 
	nr_sequencia, 
	nr_seq_evento, 
	dt_atualizacao, 
	nm_usuario, 
	dt_atualizacao_nrec, 
	nm_usuario_nrec, 
	cd_pessoa_fisica, 
	nr_atendimento, 
	ds_titulo, 
	ds_mensagem, 
	ie_status, 
	ds_maquina, 
	dt_evento, 
	dt_liberacao) 
values (	nr_sequencia_w, 
	nr_seq_evento_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	cd_pessoa_fisica_w, 
	nr_atendimento_w, 
	ds_titulo_w, 
	ds_mensagem_w, 
	'G', 
	ds_maquina_w, 
	clock_timestamp(), 
	clock_timestamp());
 
open C01;
loop 
fetch C01 into 
	ie_forma_ev_w, 
	ie_pessoa_destino_w, 
	cd_pf_destino_w, 
	ie_usuario_aceite_w, 
	cd_setor_atendimento_w, 
	cd_perfil_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	cd_pessoa_destino_w	:= null;
	qt_corresp_w	:= 1;
	if (ie_pessoa_destino_w = '1') then /* M?ico do atendimento */
 
		begin 
		select	max(cd_medico_atendimento) 
		into STRICT	cd_pessoa_destino_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_w;
		end;
	elsif (ie_pessoa_destino_w = '2') then /*M?ico respons?el pelo paciente*/
 
		begin 
		select	max(cd_medico_resp) 
		into STRICT	cd_pessoa_destino_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_w;
		end;
	elsif (ie_pessoa_destino_w = '4') then /*M?ico referido*/
 
		begin 
		select	max(cd_medico_referido) 
		into STRICT	cd_pessoa_destino_w 
		from	atendimento_paciente 
		where	nr_atendimento	= nr_atendimento_w;
		end;
	elsif (ie_pessoa_destino_w = '5') or (ie_pessoa_destino_w = '12') then /*Pessoa fixa e Usu?io fixo*/
 
		cd_pessoa_destino_w	:= cd_pf_destino_w;
	end if;
 
	if (ie_usuario_aceite_w = 'S') and (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '1') then 
		begin 
		select	count(*) 
		into STRICT	qt_corresp_w 
		from	pessoa_fisica_corresp 
		where	cd_pessoa_fisica	= cd_pessoa_destino_w 
		and	ie_tipo_corresp		= 'MCel' 
		and	ie_tipo_doc		= 'AE';
		end;
	elsif (ie_usuario_aceite_w = 'S') and (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '3') then 
		begin 
		select	count(*) 
		into STRICT	qt_corresp_w 
		from	pessoa_fisica_corresp 
		where	cd_pessoa_fisica	= cd_pessoa_destino_w 
		and	ie_tipo_corresp		= 'CI' 
		and	ie_tipo_doc		= 'AE';
		end;
	elsif (ie_usuario_aceite_w = 'S') and (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '4') then 
		begin 
		select	count(*) 
		into STRICT	qt_corresp_w 
		from	pessoa_fisica_corresp 
		where	cd_pessoa_fisica	= cd_pessoa_destino_w 
		and	ie_tipo_corresp		= 'Email' 
		and	ie_tipo_doc		= 'AE';
		end;
	end if;
 
	if (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (qt_corresp_w > 0) then 
		begin 
		insert into ev_evento_pac_destino( 
			nr_sequencia, 
			nr_seq_ev_pac, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			cd_pessoa_fisica, 
			ie_forma_ev, 
			ie_status, 
			dt_ciencia, 
			ie_pessoa_destino, 
			dt_evento) 
		values (	nextval('ev_evento_pac_destino_seq'), 
			nr_sequencia_w, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_pessoa_destino_w, 
			ie_forma_ev_w, 
			'G', 
			null, 
			ie_pessoa_destino_w, 
			clock_timestamp());
		end;
	end if;
 
	open C02;
	loop 
	fetch C02 into 
		cd_pessoa_regra_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		if (cd_pessoa_regra_w IS NOT NULL AND cd_pessoa_regra_w::text <> '') then 
		 
			insert into ev_evento_pac_destino( 
				nr_sequencia, 
				nr_seq_ev_pac, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				cd_pessoa_fisica, 
				ie_forma_ev, 
				ie_status, 
				dt_ciencia, 
				ie_pessoa_destino, 
				dt_evento) 
			values (	nextval('ev_evento_pac_destino_seq'), 
				nr_sequencia_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				cd_pessoa_regra_w, 
				ie_forma_ev_w, 
				'G', 
				null, 
				ie_pessoa_destino_w, 
				clock_timestamp());
		end if;
		end;
	end loop;
	close C02;
 
	open C03;
	loop 
	fetch C03 into 
		cd_pessoa_regra_w, 
		nm_usuario_destino_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		if (cd_pessoa_regra_w IS NOT NULL AND cd_pessoa_regra_w::text <> '') then 
			insert into ev_evento_pac_destino( 
				nr_sequencia, 
				nr_seq_ev_pac, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				cd_pessoa_fisica, 
				ie_forma_ev, 
				ie_status, 
				dt_ciencia, 
				nm_usuario_Dest, 
				ie_pessoa_destino, 
				dt_evento) 
			values (	nextval('ev_evento_pac_destino_seq'), 
				nr_sequencia_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				cd_pessoa_regra_w, 
				ie_forma_ev_w, 
				'G', 
				null, 
				nm_usuario_destino_w, 
				ie_pessoa_destino_w, 
				clock_timestamp());
		end if;
		end;
	end loop;
	close C03;
 
	end;
end loop;
close C01;
 
if (ie_trigger_p = 'N') then 
	commit;
end if;	
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_evento_agenda_cirurgica ( nr_seq_evento_p bigint, nr_seq_agenda_p bigint, nr_seq_conjunto_p bigint, cd_equipamento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ie_trigger_p text) FROM PUBLIC;

