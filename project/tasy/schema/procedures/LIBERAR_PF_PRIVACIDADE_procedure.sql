-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE liberar_pf_privacidade (( nr_seq_pf_privacidade_p pessoa_fisica_privacidade.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) is C01 CURSOR FOR SELECT ie_tipo_consentimento, ie_tipo_documento, ie_tipo_complemento_pf, ie_aceite, nr_seq_compl_pf from pessoa_fisica_privac_item where nr_seq_pf_privacidade = nr_seq_pf_privacidade_p) RETURNS boolean AS $body$
DECLARE

tem_registro_tipo_q_w 	varchar(1);
retorno_w		boolean;
BEGIN
	retorno_w := FALSE;

	select 	CASE WHEN coalesce(max(nr_sequencia)::text, '') = '' THEN  'N'  ELSE 'S' END  as tem_registro_tipo_q
	into STRICT   	tem_registro_tipo_q_w
	from   	pessoa_fisica_corresp
	where  	cd_pessoa_fisica 	= cd_pessoa_fisica_p
	and 	ie_tipo_corresp 	= ie_tipo_corresp_p
	and 	ie_tipo_doc		= 'Q';

	if (tem_registro_tipo_q_w = 'S') then
		retorno_w := TRUE;
	end if;
	
	return retorno_w;
end;		

procedure inserirRegistro(	cd_pessoa_fisica_p	in	pessoa_fisica_privacidade.cd_pessoa_fisica%type,
				nm_usuario_p		in	usuario.nm_usuario%type,
				ie_tipo_corresp_p	in	pessoa_fisica_corresp.ie_tipo_corresp%type,
				ie_tipo_doc_p		in	pessoa_fisica_corresp.ie_tipo_doc%type) is
begin
insert into pessoa_fisica_corresp(
	nr_sequencia,
	cd_pessoa_fisica,
	dt_atualizacao,
	nm_usuario,
	ie_tipo_corresp,
	dt_registro,
	ie_tipo_doc,
	dt_atualizacao_nrec,
	nm_usuario_nrec,
	nr_seq_tipo_doc,
	ds_observacao)
values (nextval('pessoa_fisica_corresp_seq'),
	cd_pessoa_fisica_p,
	clock_timestamp(),
	nm_usuario_p,
	ie_tipo_corresp_p,
	clock_timestamp(),
	ie_tipo_doc_p,
	clock_timestamp(),
	nm_usuario_p,
	null,
	null);
end;

begin

	begin
		select 	dt_liberacao,
			cd_pessoa_fisica
		into STRICT	dt_liberacao_w,
			cd_pessoa_fisica_w
		from	pessoa_fisica_privacidade
		where	nr_sequencia	= nr_seq_pf_privacidade_p;
	exception
		when others then
		begin
		dt_liberacao_w := null;
		cd_pessoa_fisica_w:= null;
		end;
	end;	

	if (coalesce(dt_liberacao_w::text, '') = '') then

		-- Inativar os consentimentos anteriores quando criado um novo registro.
		update 	pessoa_fisica_privacidade
		set	ie_situacao		= 'I',
			dt_inativacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp()
		where 	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	nr_sequencia		<> nr_seq_pf_privacidade_p
		and	ie_situacao		= 'A';

		-- Remover todas as correspondencias
		delete	from	pessoa_fisica_corresp
		where 	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and 	ie_tipo_corresp 	in ('Email', 'MCel', 'Mala')
		and	ie_tipo_doc		in ('AE','PM');	

		-- Atualizacao das correspondencias de qualquer para aviso de recebimento.
		update 	pessoa_fisica_corresp
		set	ie_tipo_doc		= 'R'
		where 	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and 	ie_tipo_corresp 	in ('Email', 'MCel', 'Mala')
		and	ie_tipo_doc		= 'Q';			

		<<ler_pessoa_fisica_priv_item>>
		for C01row in C01
		loop
                	case C01row.ie_tipo_consentimento

				-- Item Pessoa Fisica
				when 'SEA' then
					begin
						update 	pessoa_fisica
						set	ie_perm_sms_email	= C01row.ie_aceite,
							nm_usuario		= nm_usuario_p,
							dt_atualizacao		= clock_timestamp()						
						where 	cd_pessoa_fisica	= cd_pessoa_fisica_w
						and	ie_perm_sms_email	<> C01row.ie_aceite;
					end;

				-- Item Pessoa Fisica Complemento
				when 'CMD' then
					begin
						update 	compl_pessoa_fisica
						set	ie_mala_direta		= C01row.ie_aceite,
							nm_usuario		= nm_usuario_p,
							dt_atualizacao		= clock_timestamp()						
						where 	nr_sequencia		= C01row.nr_seq_compl_pf
						and 	cd_pessoa_fisica	= cd_pessoa_fisica_w
						and	ie_mala_direta		<> C01row.ie_aceite;
					end;                		
				when 'CNC' then
					begin
						update 	compl_pessoa_fisica
						set	ie_nf_correio		= C01row.ie_aceite,
							nm_usuario		= nm_usuario_p,
							dt_atualizacao		= clock_timestamp()						
						where 	nr_sequencia		= C01row.nr_seq_compl_pf
						and 	cd_pessoa_fisica	= cd_pessoa_fisica_w
						and	ie_nf_correio		<> C01row.ie_aceite;
					end;

				-- Item Pessoa Fisica Correspondencia
				when 'EAE' then
					begin
						if ( C01row.ie_aceite = 'S' and
						    	  not existeRegistroCorrespondencia(cd_pessoa_fisica_w, 'Email')) then
								CALL inserirRegistro(	cd_pessoa_fisica_w,
											nm_usuario_p,
											'Email',
											'AE');
						end if;
					end;
				when 'EPM' then
					begin
						if ( C01row.ie_aceite = 'S' and
						    	  not existeRegistroCorrespondencia(cd_pessoa_fisica_w, 'Email')) then
								CALL inserirRegistro(	cd_pessoa_fisica_w,
											nm_usuario_p,
											'Email',
											'PM');
						end if;
					end;
				when 'SAE' then
					begin
						if ( C01row.ie_aceite = 'S' and
						    	  not existeRegistroCorrespondencia(cd_pessoa_fisica_w, 'MCel')) then
								CALL inserirRegistro(	cd_pessoa_fisica_w,
											nm_usuario_p,
											'MCel',
											'AE');
						end if;
					end;	
				when 'SPM' then
					begin
						if ( C01row.ie_aceite = 'S' and
						    	  not existeRegistroCorrespondencia(cd_pessoa_fisica_w, 'MCel')) then
								CALL inserirRegistro(	cd_pessoa_fisica_w,
											nm_usuario_p,
											'MCel',
											'PM');
						end if;
					end;	
				when 'MAE' then
					begin
						if ( C01row.ie_aceite = 'S' and
						    	  not existeRegistroCorrespondencia(cd_pessoa_fisica_w, 'Mala')) then
								CALL inserirRegistro(	cd_pessoa_fisica_w,
											nm_usuario_p,
											'Mala',
											'AE');
						end if;
					end;	
				when 'MPM' then
					begin
						if ( C01row.ie_aceite = 'S' and
						    	  not existeRegistroCorrespondencia(cd_pessoa_fisica_w, 'Mala')) then
								CALL inserirRegistro(	cd_pessoa_fisica_w,
											nm_usuario_p,
											'Mala',
											'PM');
						end if;
					end;											

				else null;
			end case;
		end loop ler_pessoa_fisica_priv_item;

		update 	pessoa_fisica_privacidade
		set	dt_liberacao		= clock_timestamp(),
			dt_atualizacao 		= clock_timestamp(),
			nm_usuario_liberacao 	= nm_usuario_p,
			nm_usuario 		= nm_usuario_p
		where	nr_sequencia		= nr_seq_pf_privacidade_p;

		if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then
        		commit;
	        end if;

    end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE liberar_pf_privacidade (( nr_seq_pf_privacidade_p pessoa_fisica_privacidade.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) is C01 CURSOR FOR SELECT ie_tipo_consentimento, ie_tipo_documento, ie_tipo_complemento_pf, ie_aceite, nr_seq_compl_pf from pessoa_fisica_privac_item where nr_seq_pf_privacidade = nr_seq_pf_privacidade_p) FROM PUBLIC;

