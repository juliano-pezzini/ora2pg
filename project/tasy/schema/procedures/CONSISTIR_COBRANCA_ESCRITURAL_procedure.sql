-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_cobranca_escritural ( nr_seq_cobranca_p bigint, ie_tipo_carteira_p text, nm_usuario_p text, ds_consistencia_p INOUT text) AS $body$
DECLARE


/* ie_tipo_erro_w
'N'	nenhuma consistencia
'3'	titulo cancelado
'V'	valor do titulo no arquivo <> valor do titulo no sistema
'D'	valor de desconto no arquivo <> valor de desconto no sistema
'C'	valor de credito incorreto
'TD'	titulo duplicado
'L'	titulo liquidado
*/
cd_banco_w			banco.cd_banco%type;
cd_estabelecimento_w		smallint;
ds_consistencia_w		varchar(4000);
ds_lista_titulos_w		varchar(4000);
ie_baixa_divergencia_w		varchar(1);
ie_considera_liquidacao_w	varchar(1);
nr_sequencia_w			bigint;
ie_rejeitado_w			varchar(1);
ie_erro_w			varchar(2)	:= 'N';
ie_tipo_erro_w			varchar(2)	:= 'N';
ie_situacao_w			varchar(1);
ie_dt_liq_cobr_w		varchar(1);
nr_titulo_w			bigint;
ie_titulo_duplicado_w		varchar(1);
qt_titulo_w			bigint;
nr_seq_trans_inad_w		bigint;
nr_seq_mensalidade_w		bigint;
ie_gerar_nc_tit_mens_canc_w	varchar(1);
ie_gerar_nc_tit_resc_w		varchar(1);
ie_cancelamento_ops_w		varchar(1)	:= 'N';
vl_baixa_cobr_w			double precision;
ie_consistir_liquidados_w	varchar(1);

ie_acao_pag_duplic_w		varchar(3)	:= 'N';
nr_seq_regra_pag_duplic_w	bigint	:= null;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.nr_titulo
from	titulo_receber_cobr a
where	a.nr_seq_cobranca	= nr_seq_cobranca_p
and (obter_tipo_carteira_tit_rec(a.nr_titulo) = ie_tipo_carteira_p or coalesce(ie_tipo_carteira_p,'0') = '0')
and (ie_dt_liq_cobr_w = 'N' or (a.dt_liquidacao IS NOT NULL AND a.dt_liquidacao::text <> ''));


BEGIN

select	max(a.cd_banco),
	max(a.cd_estabelecimento)
into STRICT	cd_banco_w,
	cd_estabelecimento_w
from	cobranca_escritural a
where	a.nr_sequencia	= nr_seq_cobranca_p;

select	coalesce(max(ie_dt_liq_cobr),'N')
into STRICT	ie_dt_liq_cobr_w
from	banco
where	cd_banco	= coalesce(cd_banco_w,-1)
and	ie_situacao	= 'A';

ie_baixa_divergencia_w := obter_param_usuario(815, 8, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_baixa_divergencia_w);
ie_considera_liquidacao_w := obter_param_usuario(815, 11, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_considera_liquidacao_w);
ie_titulo_duplicado_w := obter_param_usuario(815, 21, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_titulo_duplicado_w);
ie_consistir_liquidados_w := obter_param_usuario(815, 28, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_consistir_liquidados_w);

SELECT * FROM obter_regra_acao_pag_duplic(clock_timestamp(), cd_estabelecimento_w, nm_usuario_p, nr_seq_regra_pag_duplic_w, ie_acao_pag_duplic_w) INTO STRICT nr_seq_regra_pag_duplic_w, ie_acao_pag_duplic_w;

open c01;
loop
fetch c01 into
	nr_sequencia_w,
	nr_titulo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	select	max(b.ie_rejeitado)
	into STRICT	ie_rejeitado_w
	from	banco_ocorr_escrit_ret b,
		titulo_receber_cobr a
	where	a.nr_seq_cobranca	= nr_seq_cobranca_p
	and	a.nr_titulo		= nr_titulo_w
	and	a.nr_seq_ocorrencia_ret	= b.nr_sequencia;

	if (coalesce(ie_considera_liquidacao_w,'N') = 'N') or (ie_rejeitado_w = 'L') then

		ie_erro_w	:= 'N';
		
		begin
		select	max(nr_seq_mensalidade)
		into STRICT	nr_seq_mensalidade_w
		from	titulo_receber
		where	nr_titulo	= nr_titulo_w;
		exception
		when others then
			nr_seq_mensalidade_w	:= null;
		end;
		
		if (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') then
			select	max(nr_seq_trans_inadimplencia),
				coalesce(max(ie_gerar_nc_tit_mens_canc),'N'),
				coalesce(max(ie_gerar_nc_tit_resc),'N')
			into STRICT	nr_seq_trans_inad_w,
				ie_gerar_nc_tit_mens_canc_w,
				ie_gerar_nc_tit_resc_w
			from	pls_parametros_cr
			where	cd_estabelecimento	= cd_estabelecimento_w;
		end if;
		
		/* consistir os titulos cancelados */

		select	max(a.ie_situacao)
		into STRICT	ie_situacao_w
		from	titulo_receber a
		where	a.nr_titulo	= nr_titulo_w;

		ie_cancelamento_ops_w	:= 'N';
		if	((nr_seq_trans_inad_w IS NOT NULL AND nr_seq_trans_inad_w::text <> '') or (ie_gerar_nc_tit_mens_canc_w = 'S') or (ie_gerar_nc_tit_mens_canc_w = 'S')) and (nr_seq_mensalidade_w IS NOT NULL AND nr_seq_mensalidade_w::text <> '') then
			ie_cancelamento_ops_w	:= 'S';
		end if;
		
		if (ie_situacao_w = '3') and (ie_cancelamento_ops_w = 'N') and (coalesce(ie_acao_pag_duplic_w,'N') = 'N') then
			ie_erro_w	:= ie_situacao_w;
		end if;

		if (coalesce(ie_tipo_erro_w,'N') <> '3') and (coalesce(ie_erro_w,'N') = 'N') and (ie_baixa_divergencia_w = 'N') then
		
			select	coalesce(max(ie_erro),'N')
			into STRICT	ie_erro_w
			from	(SELECT	max('V') ie_erro	/* valor do titulo no arquivo diferente do valor do titulo no sistema (somente com saldo) */
				from	titulo_receber_cobr a
				where	a.nr_sequencia			= nr_sequencia_w
				and	coalesce(a.vl_saldo_inclusao,0)	> 0
				and	coalesce(a.vl_saldo_inclusao,0)	<> coalesce(a.vl_cobranca,0)
				and (coalesce(ie_tipo_erro_w,'N') = 'N' or ie_tipo_erro_w = 'V')	/* so busca os titulos da primeira consistencia encontrada */
				
union

				SELECT	max('D') ie_erro	/* valor de desconto no arquivo diferente do valor de desconto no sistema */
				from	titulo_receber b,
					titulo_receber_cobr a
				where	a.nr_sequencia		= nr_sequencia_w
				and	a.nr_titulo		= b.nr_titulo
				and (coalesce(a.vl_desconto,0) - coalesce((obter_valor_nc_titulo_cobr(a.nr_sequencia))::numeric ,0)) <> coalesce(b.vl_desc_previsto,0)
				and (coalesce(ie_tipo_erro_w,'N') = 'N' or ie_tipo_erro_w = 'D')
				
union

				select	max('C') ie_erro	/* valor de credito incorreto */
				from	titulo_receber_cobr a
				where	a.nr_sequencia		= nr_sequencia_w
				and	(a.vl_liquidacao IS NOT NULL AND a.vl_liquidacao::text <> '')
				and	coalesce(a.vl_liquidacao,0) <> (coalesce(a.vl_cobranca,0) - coalesce(a.vl_desconto,0) - coalesce(a.vl_despesa_bancaria,0) + coalesce(a.vl_juros,0) + coalesce(a.vl_multa,0) + coalesce(a.vl_acrescimo,0))
				and (coalesce(ie_tipo_erro_w,'N') = 'N' or ie_tipo_erro_w = 'C')) alias34;
		
		end if;

		if (ie_titulo_duplicado_w = 'N') and (coalesce(ie_erro_w,'N')	= 'N') and
			((coalesce(ds_lista_titulos_w::text, '') = '') or (position(' ' || to_char(nr_titulo_w) in ds_lista_titulos_w) = 0)) and
			((coalesce(ie_tipo_erro_w,'N') = 'N') or (ie_tipo_erro_w = 'TD')) then

			select	count(*)
			into STRICT	qt_titulo_w
			from	titulo_receber_cobr a
			where	a.nr_sequencia	<> nr_sequencia_w
			and	a.nr_titulo	= nr_titulo_w
			and	a.nr_seq_cobranca	= nr_seq_cobranca_p;

			if (qt_titulo_w > 0) then
				ie_erro_w	:= 'TD';
			end if;

		elsif (coalesce(ie_consistir_liquidados_w,'S') = 'S') and (coalesce(ie_erro_w,'N')	= 'N') and
			((coalesce(ds_lista_titulos_w::text, '') = '') or (position(' ' || to_char(nr_titulo_w) in ds_lista_titulos_w) = 0)) and
			((coalesce(ie_tipo_erro_w,'N') = 'N') or (ie_tipo_erro_w = 'L')) then

			select	coalesce(sum(a.vl_recebido),0) + coalesce(sum(a.vl_glosa),0) + coalesce(sum(a.vl_descontos),0) + coalesce(sum(a.vl_perdas),0)
			into STRICT	vl_baixa_cobr_w
			from	titulo_receber_liq a
			where	a.nr_seq_cobranca	= nr_seq_cobranca_p
			and	a.nr_titulo		= nr_titulo_w;

			/* verificar se esta baixado (no estorno nao pode consistir) */

			if (coalesce(vl_baixa_cobr_w,0)	= 0) and (coalesce(ie_acao_pag_duplic_w,'N') = 'N') then

				select	max('L')
				into STRICT	ie_erro_w
				from	titulo_receber b,
					titulo_receber_cobr a
				where	b.vl_saldo_titulo	= 0
				and	a.nr_titulo		= b.nr_titulo
				and	a.nr_sequencia		= nr_sequencia_w
				and (coalesce(ie_tipo_erro_w,'N') = 'N' or ie_tipo_erro_w = 'L');

			end if;

		end if;

		if (coalesce(ie_erro_w,'N') <> 'N') and
			((coalesce(ds_lista_titulos_w::text, '') = '') or (length(ds_lista_titulos_w) < 4000)) then

			if (coalesce(ie_tipo_erro_w,'N') = 'N') then
				ie_tipo_erro_w	:= ie_erro_w;
			end if;

			if (ds_lista_titulos_w IS NOT NULL AND ds_lista_titulos_w::text <> '') then
				ds_lista_titulos_w	:= substr(ds_lista_titulos_w || ', ' || nr_titulo_w,1,4000);
			else
				ds_lista_titulos_w	:= substr(' ' || nr_titulo_w,1,4000);
			end if;
		end if;
	end if;

end loop;
close c01;

if (ie_tipo_erro_w	= '3') then
	ds_consistencia_w	:= substr(wheb_mensagem_pck.get_texto(304540) || ds_lista_titulos_w, 1, 3999);
elsif (ie_tipo_erro_w	= 'V') then
	ds_consistencia_w	:= substr(wheb_mensagem_pck.get_texto(304541) || ds_lista_titulos_w, 1, 3900);
elsif (ie_tipo_erro_w = 'D') then
	ds_consistencia_w	:= substr(wheb_mensagem_pck.get_texto(304544) || ds_lista_titulos_w, 1, 3900);
elsif (ie_tipo_erro_w = 'C') then
	ds_consistencia_w	:= substr(wheb_mensagem_pck.get_texto(304545) || ds_lista_titulos_w, 1, 3900);
elsif (ie_tipo_erro_w	= 'TD') then
	ds_consistencia_w	:= substr(wheb_mensagem_pck.get_texto(304546) || ds_lista_titulos_w, 1, 3999);
elsif (ie_tipo_erro_w	= 'L') then
	ds_consistencia_w	:= substr(wheb_mensagem_pck.get_texto(304547) || ds_lista_titulos_w, 1, 3999);
end if;

ds_consistencia_p	:= substr(ds_consistencia_w, 1, 255);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_cobranca_escritural ( nr_seq_cobranca_p bigint, ie_tipo_carteira_p text, nm_usuario_p text, ds_consistencia_p INOUT text) FROM PUBLIC;

