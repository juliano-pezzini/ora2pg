-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_recalcular_preco_benef ( nr_seq_segurado_p bigint, cd_motivo_recalculo_p text, ie_liberado_p text, dt_reajuste_p timestamp, ie_commit_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/*	cd_motivo_recalculo_p DOMINIO 1728 - PLS - Motivo reajuste da mensalidade */

qt_idade_w			bigint;
nr_seq_preco_w			bigint;
nr_seq_tabela_w			bigint;
vl_preco_atual_w		double precision;
vl_preco_ant_w			double precision;
nm_pessoa_fisica_w		varchar(255);
nr_seq_segurado_preco_w		bigint;
nm_beneficiario_w		varchar(255);
ie_preco_w			varchar(2);
nr_seq_seg_preco_ant_w		bigint;
nr_seq_reajuste_w		bigint;
nr_seq_reajuste_ww		bigint;
dt_reajuste_w			timestamp;
ie_geracao_valores_w		varchar(1);
ie_titularidade_w		varchar(1);
qt_idade_limite_reaj_w		smallint;
qt_anos_limite_reaj_w		smallint;
qt_idade_limite_reaj_contr_w	smallint;
qt_anos_limite_reaj_contr_w	smallint;
qt_idade_limite_reaj_param_w	smallint;
qt_anos_limite_reaj_param_w	smallint;
ds_observacao_w			varchar(255);
qt_idade_operadora_w		bigint;
dt_inclusao_operadora_w		timestamp;
vl_minimo_mensalidade_w		double precision;
qt_vidas_w			bigint	:= 0;
vl_preco_nao_subsid_desc_w	double precision;
ie_grau_parentesco_w		varchar(2);
ie_calculo_vidas_w		varchar(2);
nr_seq_contrato_w		bigint;
dt_liberacao_w			timestamp		:= null;
nm_usuario_liberacao_w		varchar(15)	:= null;
nr_seq_preco_ant_w		bigint;
vl_preco_nao_subsid_desc_ant_w	double precision;
qt_idade_adesao_w		bigint;
dt_nascimento_w			timestamp;
ie_regulamentacao_w		varchar(2);
ie_preco_vidas_contrato_w	varchar(1);
ie_data_ref_reaj_adaptado_w	varchar(1);
dt_contratacao_w		timestamp;
nr_seq_mtvo_alteracao_w		bigint;
dt_adaptacao_w			timestamp;
dt_base_inclusao_w		timestamp;
vl_adaptacao_w			double precision;
cd_motivo_recalculo_w		varchar(2);
cd_matricula_familia_w		bigint;
nr_seq_titular_w		bigint;
ie_reaj_idade_limite_pre_w	varchar(1);
nr_seq_tabela_ant_w		bigint;
vl_reajuste_w			pls_reajuste_preco.vl_reajustado%type;
tx_desconto_w			pls_preco_regra.tx_desconto%type;
nr_seq_regra_desconto_w		pls_regra_desconto.nr_sequencia%type;
vl_desconto_w			pls_segurado_preco.vl_desconto%type;
qt_idade_limite_reaj_benef_w	pls_segurado.qt_idade_limite_reaj%type;
qt_anos_limite_reaj_benef_w	pls_segurado.qt_anos_limite_reaj%type;
dt_reajuste_trunc_w		timestamp;	
ie_reajusta_fx			varchar(1);
qt_idade_ww			bigint;
nr_seq_reajuste_www		pls_reajuste_preco.nr_sequencia%type;
vl_preco_atual_ww		double precision;
nr_seq_reaj_fx_w		pls_segurado_preco.nr_sequencia%type;
dt_reajuste_ww			timestamp;
ie_limite_fx_w			varchar(1);
dt_reajuste_indc_w		timestamp;
nr_seq_seg_preco_ind_w		pls_segurado_preco.nr_sequencia%type;
ds_observacao_ww		varchar(255);
ie_gerou_indc_w			varchar(1);
vl_preco_inicial_w		double precision;

c02 CURSOR FOR 	-- select das faixas etarias
	SELECT	nr_sequencia,
		coalesce(vl_preco_atual,0),
		vl_preco_nao_subsid_atual,
		coalesce(vl_minimo,0),
		coalesce(vl_adaptacao,0),
		coalesce(vl_preco_inicial,0)
	from	pls_plano_preco
	where	coalesce(qt_idade_w,qt_idade_ww)	>= qt_idade_inicial
	and	coalesce(qt_idade_w,qt_idade_ww)	<= qt_idade_final
	and	nr_seq_tabela	= nr_seq_tabela_w
	and	coalesce(ie_grau_titularidade,ie_grau_parentesco_w)	= ie_grau_parentesco_w
	and	qt_vidas_w between coalesce(qt_vidas_inicial,qt_vidas_w) and coalesce(qt_vidas_final,qt_vidas_w)
	order	by	coalesce(ie_grau_titularidade,' ');


BEGIN

ds_observacao_w	:= '';
cd_motivo_recalculo_w	:= cd_motivo_recalculo_p;

select	coalesce(ie_reaj_idade_limite_pre,'S'),
	qt_idade_limite,
	qt_tempo_limite,
	ie_data_ref_reaj_adaptado
into STRICT	ie_reaj_idade_limite_pre_w,
	qt_idade_limite_reaj_param_w,
	qt_anos_limite_reaj_param_w,
	ie_data_ref_reaj_adaptado_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

if (ie_liberado_p = 'S') then
	dt_liberacao_w		:= clock_timestamp();
	nm_usuario_liberacao_w	:= nm_usuario_p;
end if;

select	max(nr_sequencia)
into STRICT	nr_seq_seg_preco_ant_w
from	pls_segurado_preco
where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
and	nr_seq_segurado	= nr_seq_segurado_p
and	dt_reajuste = (	SELECT	max(dt_reajuste)
			from	pls_segurado_preco
			where	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	nr_seq_segurado	= nr_seq_segurado_p
			and	dt_reajuste <= dt_reajuste_p);

if (dt_reajuste_p IS NOT NULL AND dt_reajuste_p::text <> '') then
	dt_reajuste_w	:= dt_reajuste_p;
else
	dt_reajuste_w	:= trunc(clock_timestamp(),'month');
end if;

ie_limite_fx_w		:= 'N';
ie_reajusta_fx		:= 'N';
ie_gerou_indc_w		:= 'N';
dt_reajuste_trunc_w	:= trunc(dt_reajuste_w,'month');

select	(obter_idade(a.dt_nascimento,coalesce(dt_reajuste_p, trunc(clock_timestamp(),'dd')),'A'))::numeric ,
	b.nr_seq_tabela,
	d.ie_preco,
	a.nm_pessoa_fisica,
	CASE WHEN coalesce(b.nr_seq_titular::text, '') = '' THEN 'T'  ELSE 'D' END ,
	b.dt_inclusao_operadora,
	coalesce(substr(pls_obter_garu_dependencia_seg(b.nr_sequencia,'C'),1,2),'X'),
	b.nr_seq_contrato,
	a.dt_nascimento,
	d.ie_regulamentacao,
	b.dt_contratacao,
	b.cd_matricula_familia,
	b.nr_seq_titular,
	b.qt_idade_limite_reaj,
	b.qt_anos_limite_reaj
into STRICT	qt_idade_w,
	nr_seq_tabela_w,
	ie_preco_w,
	nm_beneficiario_w,
	ie_titularidade_w,
	dt_inclusao_operadora_w,
	ie_grau_parentesco_w,
	nr_seq_contrato_w,
	dt_nascimento_w,
	ie_regulamentacao_w,
	dt_contratacao_w,
	cd_matricula_familia_w,
	nr_seq_titular_w,
	qt_idade_limite_reaj_benef_w,
	qt_anos_limite_reaj_benef_w
from	pessoa_fisica	a,
	pls_segurado	b,
	pls_plano	d
where	b.cd_pessoa_fisica	= a.cd_pessoa_fisica
and	b.nr_seq_plano		= d.nr_sequencia
--and	b.dt_liberacao 		is not null Comentado pois pode estar reativando o beneficiario
and	b.cd_estabelecimento	= cd_estabelecimento_p
and	b.nr_sequencia		= nr_seq_segurado_p;

ie_geracao_valores_w	:= 'B';

if (dt_contratacao_w > dt_reajuste_w) then
	dt_reajuste_w := dt_contratacao_w;
end if;

if (nr_seq_contrato_w IS NOT NULL AND nr_seq_contrato_w::text <> '') then
	select	coalesce(ie_geracao_valores,'B'),
		qt_idade_limite_reaj,
		qt_anos_limite_reaj
	into STRICT	ie_geracao_valores_w,
		qt_idade_limite_reaj_contr_w,
		qt_anos_limite_reaj_contr_w
	from	pls_contrato
	where	nr_sequencia	= nr_seq_contrato_w;
end if;

if (ie_geracao_valores_w <> 'B') then
	if	(ie_geracao_valores_w = 'T' AND ie_titularidade_w = 'D') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 186265, null);
		/* Nao e possivel gerar valor para beneficiario dependente! Favor verifique no cadastro do contrato. */

	elsif	(ie_geracao_valores_w = 'D' AND ie_titularidade_w = 'T') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 186267, null);
		/* Nao e possivel gerar valor para beneficiario titular! Favor verifique no cadastro do contrato. */

	end if;
end if;

if	((coalesce(nr_seq_tabela_w::text, '') = '') and (ie_preco_w = '1')) then /* Somente e obrigatorio existir tabela para produto com formacao de preco pre estabelecido */
	CALL wheb_mensagem_pck.exibir_mensagem_abort( 186268, 'NR_SEQ_SEGURADO='||nr_seq_segurado_p||';'||'NM_SEGURADO='||nm_beneficiario_w);
	/* Nao existe tabela de preco informada para o beneficiario */

end if;

if (nr_seq_tabela_w IS NOT NULL AND nr_seq_tabela_w::text <> '') then
	if (qt_idade_w > 999) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 186269, 'NR_SEQ_SEGURADO='||nr_seq_segurado_p||';'||'NM_SEGURADO='||nm_beneficiario_w||';'||'QT_IDADE='||qt_idade_w );
		/* O beneficiario 661 - Paulo Rosa possui 1200 anos. Verifique. */

	end if;
	
	/* Bsucar a data base para verificar a adesao do beneficiario quando for plano adaptado */

	if (ie_regulamentacao_w in ('A','P')) then
		if (ie_data_ref_reaj_adaptado_w = 'A') then
			dt_base_inclusao_w	:= dt_contratacao_w;
		elsif (ie_data_ref_reaj_adaptado_w = 'D') then
			select	max(nr_sequencia)
			into STRICT	nr_seq_mtvo_alteracao_w
			from	pls_motivo_alteracao_plano
			where	cd_ans	= '12';
			
			select	max(dt_alteracao)
			into STRICT	dt_adaptacao_w
			from	pls_segurado_alt_plano
			where	nr_seq_segurado		= nr_seq_segurado_p
			and	ie_situacao 		= 'A'
			and	nr_seq_motivo_alt	= nr_seq_mtvo_alteracao_w;
			
			if (dt_adaptacao_w IS NOT NULL AND dt_adaptacao_w::text <> '') then
				dt_base_inclusao_w	:= dt_adaptacao_w;
			else
				dt_base_inclusao_w	:= dt_inclusao_operadora_w;
			end if;
		else
			dt_base_inclusao_w	:= dt_inclusao_operadora_w;
		end if;
	else
		dt_base_inclusao_w	:= dt_inclusao_operadora_w;
	end if;	
		
	if (coalesce(nr_seq_seg_preco_ant_w,0) > 0) then
		select	vl_preco_atual,
			nr_seq_reajuste,
			vl_preco_nao_subsid_desc,
			nr_seq_preco,
			nr_seq_tabela
		into STRICT	vl_preco_ant_w,
			nr_seq_reajuste_w,
			vl_preco_nao_subsid_desc_ant_w,
			nr_seq_preco_ant_w,
			nr_seq_tabela_ant_w
		from	pls_segurado_preco
		where	nr_sequencia	= nr_seq_seg_preco_ant_w;
		
		if (nr_seq_tabela_ant_w <> nr_seq_tabela_w) then
			nr_seq_reajuste_w	:= null;
		end if;
	end if;
	
	-- Consistencia de idade limite para reajuste por faixa etaria
	if	((ie_regulamentacao_w <> 'R') or (ie_regulamentacao_w = 'R' and ie_reaj_idade_limite_pre_w = 'S')) then
		qt_idade_limite_reaj_w	:= 0;
		qt_anos_limite_reaj_w	:= 0;
		
		if (coalesce(qt_idade_limite_reaj_benef_w,0) > 0) or (coalesce(qt_anos_limite_reaj_benef_w,0) > 0) then
			qt_idade_limite_reaj_w	:= coalesce(qt_idade_limite_reaj_benef_w,0);
			qt_anos_limite_reaj_w	:= coalesce(qt_anos_limite_reaj_benef_w,0);
		elsif (coalesce(qt_idade_limite_reaj_contr_w,0) > 0) or (coalesce(qt_anos_limite_reaj_contr_w,0) > 0) then
			qt_idade_limite_reaj_w	:= coalesce(qt_idade_limite_reaj_contr_w,0);
			qt_anos_limite_reaj_w	:= coalesce(qt_anos_limite_reaj_contr_w,0);
		elsif (coalesce(qt_idade_limite_reaj_param_w,0) > 0) or (coalesce(qt_anos_limite_reaj_param_w,0) > 0) then
			qt_idade_limite_reaj_w	:= coalesce(qt_idade_limite_reaj_param_w,0);
			qt_anos_limite_reaj_w	:= coalesce(qt_anos_limite_reaj_param_w,0);
		else
			/* Se nenhum campo de idade e anos limite for preenchido o sistema sempre realiza o reajuste de mudanca de faixa etaria */

			qt_idade_limite_reaj_w	:= 999;
			qt_anos_limite_reaj_w	:= 999;
		end if;
		qt_idade_operadora_w	:= round((obter_idade(dt_base_inclusao_w, dt_reajuste_w, 'A'))::numeric );
		
		if (qt_idade_w >= qt_idade_limite_reaj_w) and (qt_idade_operadora_w >= qt_anos_limite_reaj_w) then
			qt_idade_adesao_w	:= (obter_idade(dt_nascimento_w,dt_base_inclusao_w,'A'))::numeric;
			
			if (qt_idade_adesao_w > qt_idade_limite_reaj_w) then
				qt_idade_w	:= qt_idade_adesao_w + qt_anos_limite_reaj_w; /* Se na data de adesao, o beneficiario ja tinha 60 anos ou mais, deve gerar sempre com essa idade */
			else
				qt_idade_w	:= qt_idade_adesao_w + qt_anos_limite_reaj_w;
				
				if (qt_idade_w < qt_idade_limite_reaj_w) then
					qt_idade_w	:= qt_idade_limite_reaj_w-1;
				end if;
				ds_observacao_w	:= wheb_mensagem_pck.get_texto(1109058);
			end if;
			
			ie_limite_fx_w	:= 'S';
		end if;
	end if;
	
	begin
	select	coalesce(ie_preco_vidas_contrato,'N'),
		coalesce(ie_calculo_vidas,'A')
	into STRICT	ie_preco_vidas_contrato_w,
		ie_calculo_vidas_w
	from	pls_tabela_preco
	where	nr_sequencia	= nr_seq_tabela_w;
	exception
	when others then
		ie_calculo_vidas_w	:= 'A';
	end;
	
	if (ie_preco_vidas_contrato_w = 'S') then
		if (ie_calculo_vidas_w = 'A') then
			select	count(*)
			into STRICT	qt_vidas_w
			from	pls_segurado
			where	nr_seq_contrato = nr_seq_contrato_w
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	((coalesce(dt_rescisao::text, '') = '') or (trunc(dt_rescisao,'mm') > dt_reajuste_trunc_w));
		elsif (ie_calculo_vidas_w = 'T') then
			select	count(*)
			into STRICT	qt_vidas_w
			from	pls_segurado
			where	nr_seq_contrato = nr_seq_contrato_w
			and	coalesce(nr_seq_titular::text, '') = ''
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	((coalesce(dt_rescisao::text, '') = '') or (trunc(dt_rescisao,'mm') > dt_reajuste_trunc_w));
		elsif (ie_calculo_vidas_w = 'D') then
			select	count(*)
			into STRICT	qt_vidas_w
			from	pls_segurado
			where	nr_seq_contrato = nr_seq_contrato_w
			and	(nr_seq_titular IS NOT NULL AND nr_seq_titular::text <> '')
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
			and	((coalesce(dt_rescisao::text, '') = '') or (trunc(dt_rescisao,'mm') > dt_reajuste_trunc_w));
		elsif (ie_calculo_vidas_w = 'TD') then
			select	count(*)
			into STRICT	qt_vidas_w
			from	pls_segurado a
			where	a.nr_seq_contrato = nr_seq_contrato_w
			and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
			and	((coalesce(a.dt_rescisao::text, '') = '') or (trunc(a.dt_rescisao,'mm') > dt_reajuste_trunc_w))
			and	((coalesce(nr_seq_titular::text, '') = '') or ((nr_seq_titular IS NOT NULL AND nr_seq_titular::text <> '') and ((SELECT	count(*)
												from	grau_parentesco x
												where	x.nr_sequencia = a.nr_seq_parentesco
												and	x.ie_tipo_parentesco = '1') > 0)));
		elsif (ie_calculo_vidas_w = 'F') then
			qt_vidas_w	:= coalesce(pls_obter_qt_vida_benef(nr_seq_segurado_p,nr_seq_titular_w,dt_reajuste_trunc_w),0);
		end if;
	else
		qt_vidas_w	:= 1;
	end if;

	open c02;
	loop
	fetch c02 into
		nr_seq_preco_w,
		vl_preco_atual_w,
		vl_preco_nao_subsid_desc_w,
		vl_minimo_mensalidade_w,
		vl_adaptacao_w,
		vl_preco_inicial_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
	end loop;
	close c02;	

	if (cd_motivo_recalculo_w in ('B', 'R')) then
		vl_preco_atual_w := vl_preco_inicial_w;
	end if;
	
	/* Obter o reajuste vigente pela data do reajuste */

	select	max(a.nr_sequencia)
	into STRICT	nr_seq_reajuste_ww
	from	pls_reajuste_preco a
	where	a.nr_seq_preco	= nr_seq_preco_w
	and	trunc(a.dt_reajuste, 'month') <= trunc(dt_reajuste_w, 'month');	
	
	if (nr_seq_reajuste_ww IS NOT NULL AND nr_seq_reajuste_ww::text <> '') then
		select	coalesce(vl_reajustado,0)
		into STRICT	vl_preco_atual_w
		from	pls_reajuste_preco
		where	nr_sequencia	= nr_seq_reajuste_ww;
	end if;
	
	if (coalesce(nr_seq_reajuste_ww,0) > coalesce(nr_seq_reajuste_w,0)) then
		nr_seq_reajuste_w	:= nr_seq_reajuste_ww;
	end if;
	
	if (coalesce(vl_preco_ant_w,0) <> coalesce(vl_preco_atual_w,0)) or (coalesce(vl_preco_nao_subsid_desc_w,0) <> coalesce(vl_preco_nao_subsid_desc_ant_w,0)) or (nr_seq_preco_ant_w <> nr_seq_preco_w) or (cd_motivo_recalculo_w = 'AR') then

		/* Se for aniversario do beneficiario, deve gerar o preco como mudanca de faixa etaria */

		if (to_char(dt_nascimento_w,'mm') = to_char(dt_reajuste_w,'mm') or
			to_char(dt_nascimento_w,'mm') = to_char(add_months(dt_reajuste_w,1),'mm')) and (nr_seq_preco_ant_w <> nr_seq_preco_w) then
			ie_reajusta_fx		:= 'S';
			
			if (cd_motivo_recalculo_w = 'Q') then
				ds_observacao_w		:= wheb_mensagem_pck.get_texto(1109052);
			else
				ds_observacao_w		:= wheb_mensagem_pck.get_texto(1109056);
			end if;
		end if;

		SELECT * FROM pls_obter_regra_desconto(nr_seq_segurado_p, 1, cd_estabelecimento_p, tx_desconto_w, nr_seq_regra_desconto_w) INTO STRICT tx_desconto_w, nr_seq_regra_desconto_w;
		
		vl_desconto_w := vl_preco_atual_w * (tx_desconto_w /100);
		
		insert	into pls_segurado_preco(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, dt_reajuste,
			nr_seq_segurado, vl_preco_atual, qt_idade,
			cd_motivo_reajuste, vl_preco_ant, ds_observacao,
			nr_seq_reajuste, nr_seq_preco, dt_liberacao,
			nm_usuario_liberacao, vl_desconto, vl_preco_nao_subsid_desc,
			nr_seq_tabela, vl_minimo_mensalidade, vl_adaptacao,
			ie_situacao)
		values (nextval('pls_segurado_preco_seq'), clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, trunc(dt_reajuste_w,'dd'),
			nr_seq_segurado_p, coalesce(vl_preco_atual_w,0), qt_idade_w,
			cd_motivo_recalculo_w, coalesce(vl_preco_ant_w,0), ds_observacao_w,
			nr_seq_reajuste_w, nr_seq_preco_w, dt_liberacao_w,
			nm_usuario_liberacao_w, vl_desconto_w, vl_preco_nao_subsid_desc_w,
			nr_seq_tabela_w, vl_minimo_mensalidade_w, vl_adaptacao_w,
			'A');
			
		select	max(nr_sequencia)
		into STRICT	nr_seq_reaj_fx_w
		from	pls_segurado_preco
		where	ie_situacao = 'A'
		and	cd_motivo_reajuste = 'E'
		and	dt_reajuste >= trunc(dt_reajuste_w,'mm')
		and	nr_seq_segurado = nr_seq_segurado_p;
			
		if (coalesce(nr_seq_reaj_fx_w,0) > 0) and (ie_reajusta_fx = 'S') then
			update	pls_segurado_preco
			set	ie_situacao = 'I',
				dt_atualizacao = clock_timestamp(),
				nm_usuario = nm_usuario_p,
				ds_observacao = 'Registro inativado pela procedure pls_recalcular_preco_benef.'
			where	nr_sequencia = nr_seq_reaj_fx_w;
		end if;
		
		select	max(nr_sequencia)
		into STRICT	nr_seq_seg_preco_ind_w
		from	pls_segurado_preco
		where	nr_seq_segurado = nr_seq_segurado_p
		and	ie_situacao 	= 'A'
		and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
		and	cd_motivo_reajuste = 'I'
		and	trunc(dt_reajuste_w,'mm') < trunc(dt_reajuste,'mm');
		
		if	((cd_motivo_recalculo_p in ('Q','R')) and (nr_seq_seg_preco_ind_w IS NOT NULL AND nr_seq_seg_preco_ind_w::text <> '')) then
			dt_reajuste_ww 	:= trunc(dt_reajuste_indc_w,'dd');

			qt_idade_w			:= null;
			nr_seq_preco_w 			:= null;
			vl_preco_nao_subsid_desc_w 	:= null;
			vl_minimo_mensalidade_w 	:= null;
			vl_adaptacao_w 			:= null;
			tx_desconto_w			:= null;
			vl_desconto_w			:= null;
			nr_seq_reajuste_www		:= null;

			select	max(dt_reajuste),
				max(qt_idade)
			into STRICT	dt_reajuste_indc_w,
				qt_idade_ww
			from	pls_segurado_preco	
			where	nr_sequencia = nr_seq_seg_preco_ind_w;
			
			open C02;
			loop
			fetch C02 into	
				nr_seq_preco_w,
				vl_preco_atual_ww,
				vl_preco_nao_subsid_desc_w,
				vl_minimo_mensalidade_w,
				vl_adaptacao_w,
				vl_preco_inicial_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
			end loop;
			close C02;
			
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_reajuste_www
			from	pls_reajuste_preco a
			where	a.nr_seq_preco	= nr_seq_preco_w
			and	trunc(a.dt_reajuste, 'month') <= trunc(dt_reajuste_indc_w, 'month');

			if (coalesce(nr_seq_reajuste_www,0) <> 0) then
				select	coalesce(vl_reajustado,0)
				into STRICT	vl_preco_atual_ww
				from	pls_reajuste_preco
				where	nr_sequencia	= nr_seq_reajuste_www;
			end if;

			ds_observacao_ww	:= wheb_mensagem_pck.get_texto(1109048);
			
			if (nr_seq_preco_w IS NOT NULL AND nr_seq_preco_w::text <> '') then
			
				SELECT * FROM pls_obter_regra_desconto(nr_seq_segurado_p, 1, cd_estabelecimento_p, tx_desconto_w, nr_seq_regra_desconto_w) INTO STRICT tx_desconto_w, nr_seq_regra_desconto_w;
			
				vl_desconto_w := vl_preco_atual_ww * (tx_desconto_w /100);
			
				insert	into pls_segurado_preco(nr_sequencia, dt_atualizacao, nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, dt_reajuste,
					nr_seq_segurado, vl_preco_atual, qt_idade,
					cd_motivo_reajuste, vl_preco_ant, ds_observacao,
					nr_seq_reajuste, nr_seq_preco, dt_liberacao,
					nm_usuario_liberacao, vl_desconto, vl_preco_nao_subsid_desc,
					nr_seq_tabela, vl_minimo_mensalidade, vl_adaptacao,
					ie_situacao)
				values (nextval('pls_segurado_preco_seq'), clock_timestamp(), nm_usuario_p,
					clock_timestamp(), nm_usuario_p, dt_reajuste_indc_w,
					nr_seq_segurado_p, coalesce(vl_preco_atual_ww,0), qt_idade_ww,
					'I', coalesce(vl_preco_atual_w,0), ds_observacao_ww,
					nr_seq_reajuste_www, nr_seq_preco_w, coalesce(dt_liberacao_w,clock_timestamp()),
					nm_usuario_liberacao_w, vl_desconto_w, vl_preco_nao_subsid_desc_w,
					nr_seq_tabela_w, vl_minimo_mensalidade_w, vl_adaptacao_w,
					'A');
				
				ie_gerou_indc_w	:= 'S';
			end if;
		end if;

		
		if (ie_reajusta_fx = 'S') and (ie_limite_fx_w = 'N') and (ie_gerou_indc_w = 'N') then
			if (cd_motivo_recalculo_w = 'Q') then
				qt_idade_ww	:= (obter_idade(dt_nascimento_w,coalesce(last_day(add_months(dt_reajuste_p,1)),last_day(clock_timestamp())),'A'))::numeric;
				dt_reajuste_ww	:= to_char(trunc(dt_nascimento_w,'mm'),'dd/mm') || '/' || to_char(dt_reajuste_w,'yyyy');
			else
				qt_idade_ww	:= (obter_idade(dt_nascimento_w,coalesce(last_day(dt_reajuste_p),last_day(clock_timestamp())),'A'))::numeric;
				dt_reajuste_ww 	:= trunc(dt_reajuste_w,'dd');
			end if;
			
			if (coalesce(qt_idade_ww,0) > 0) and (qt_idade_w < qt_idade_ww) then
				
				--Limpar a variavel qt_idade_w para poder usar a qt_idade_ww no cursor C02 e buscar o preco da nova faixa etaria
				qt_idade_w			:= null;
				nr_seq_preco_w 			:= null;
				vl_preco_nao_subsid_desc_w 	:= null;
				vl_minimo_mensalidade_w 	:= null;
				vl_adaptacao_w 			:= null;
				tx_desconto_w			:= null;
				vl_desconto_w			:= null;
				nr_seq_reajuste_www		:= null;
				
				open C02;
				loop
				
				fetch C02 into
					nr_seq_preco_w,
					vl_preco_atual_ww,
					vl_preco_nao_subsid_desc_w,
					vl_minimo_mensalidade_w,
					vl_adaptacao_w,
					vl_preco_inicial_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
				end loop;
				close C02;
				
				select	max(a.nr_sequencia)
				into STRICT	nr_seq_reajuste_www
				from	pls_reajuste_preco a
				where	a.nr_seq_preco	= nr_seq_preco_w
				and	trunc(a.dt_reajuste, 'month') <= trunc(dt_reajuste_w, 'month');

				if (coalesce(nr_seq_reajuste_www,0) <> 0) then
					select	coalesce(vl_reajustado,0)
					into STRICT	vl_preco_atual_ww
					from	pls_reajuste_preco
					where	nr_sequencia	= nr_seq_reajuste_www;
				end if;
				
				if (nr_seq_preco_w IS NOT NULL AND nr_seq_preco_w::text <> '') then					
					
					SELECT * FROM pls_obter_regra_desconto(nr_seq_segurado_p, 1, cd_estabelecimento_p, tx_desconto_w, nr_seq_regra_desconto_w) INTO STRICT tx_desconto_w, nr_seq_regra_desconto_w;

					vl_desconto_w := vl_preco_atual_ww * (tx_desconto_w /100);
					
					insert	into pls_segurado_preco(nr_sequencia, dt_atualizacao, nm_usuario,
						dt_atualizacao_nrec, nm_usuario_nrec, dt_reajuste,
						nr_seq_segurado, vl_preco_atual, qt_idade,
						cd_motivo_reajuste, vl_preco_ant, ds_observacao,
						nr_seq_reajuste, nr_seq_preco, dt_liberacao,
						nm_usuario_liberacao, vl_desconto, vl_preco_nao_subsid_desc,
						nr_seq_tabela, vl_minimo_mensalidade, vl_adaptacao,
						ie_situacao)
					values (nextval('pls_segurado_preco_seq'), clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, dt_reajuste_ww,
						nr_seq_segurado_p, coalesce(vl_preco_atual_ww,0), qt_idade_ww,
						'E', coalesce(vl_preco_atual_w,0), ds_observacao_w,
						nr_seq_reajuste_www, nr_seq_preco_w, dt_liberacao_w,
						nm_usuario_liberacao_w, vl_desconto_w, vl_preco_nao_subsid_desc_w,
						nr_seq_tabela_w, vl_minimo_mensalidade_w, vl_adaptacao_w,
						'A');
				end if;
			end if;
		end if;
	end if;
end if;

if (ie_commit_p = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_recalcular_preco_benef ( nr_seq_segurado_p bigint, cd_motivo_recalculo_p text, ie_liberado_p text, dt_reajuste_p timestamp, ie_commit_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

