-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_gerar_registro_civil ( nr_atendimento_p atendimento_paciente.nr_atendimento%type, nr_aih_p sus_aih_unif.nr_aih%type, nr_seq_aih_p sus_aih_unif.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
nr_cert_nasc_w			pessoa_fisica.nr_cert_nasc%type;
nr_seq_cartorio_nasc_w		pessoa_fisica.nr_seq_cartorio_nasc%type;
nr_matricula_nasc_w		pessoa_fisica.nr_matricula_nasc%type;
dt_emissao_cert_nasc_w		pessoa_fisica.dt_emissao_cert_nasc%type;
nr_livro_cert_nasc_w		pessoa_fisica.nr_livro_cert_nasc%type;
nr_folha_cert_nasc_w		pessoa_fisica.nr_folha_cert_nasc%type;
nm_pessoa_fisica_w		pessoa_fisica.nm_pessoa_fisica%type;
nr_termo_cert_nasc_w		pessoa_fisica.nr_termo_cert_nasc%type;
cd_cgc_cartorio_w		sus_registro_civil.cd_cgc_cartorio%type;
nr_dnv_w			nascimento.nr_dnv%type := 0;
nr_atendimento_w		atendimento_paciente.nr_atendimento%type;

C01 CURSOR FOR
	SELECT	cd_pessoa_fisica,
		nr_atendimento
	from	atendimento_paciente
	where	nr_atendimento_mae = nr_atendimento_p;

type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w	vetor;

BEGIN

open c01;
loop
fetch c01 bulk collect into s_array limit 100000;
	vetor_c01_w(i) := s_array;
	i := i + 1;
EXIT WHEN NOT FOUND; /* apply on c01 */
end loop;
close c01;

for i in 1..vetor_c01_w.count loop
	begin
	s_array := vetor_c01_w(i);
	for z in 1..s_array.count loop
		begin

		cd_pessoa_fisica_w	:= s_array[z].cd_pessoa_fisica;
		nr_atendimento_w	:= s_array[z].nr_atendimento;

		begin
		select	nr_cert_nasc,
			nr_seq_cartorio_nasc,
			nr_matricula_nasc,
			dt_emissao_cert_nasc,
			nr_livro_cert_nasc,
			nr_folha_cert_nasc,
			nm_pessoa_fisica,
			nr_termo_cert_nasc
		into STRICT	nr_cert_nasc_w,
			nr_seq_cartorio_nasc_w,
			nr_matricula_nasc_w,
			dt_emissao_cert_nasc_w,
			nr_livro_cert_nasc_w,
			nr_folha_cert_nasc_w,
			nm_pessoa_fisica_w,
			nr_termo_cert_nasc_w
		from	pessoa_fisica
		where	cd_pessoa_fisica = cd_pessoa_fisica_w  LIMIT 1;
		exception
		when others then
			nr_cert_nasc_w		:= null;
			nr_seq_cartorio_nasc_w	:= null;
			nr_matricula_nasc_w	:= null;
			dt_emissao_cert_nasc_w	:= null;
			nr_livro_cert_nasc_w	:= null;
			nr_folha_cert_nasc_w	:= null;
			nm_pessoa_fisica_w	:= '';
		end;

		begin
		select	substr(somente_numero(a.nr_dnv),1,11)
		into STRICT	nr_dnv_w
		from	nascimento a
		where	a.nr_atendimento	= nr_atendimento_p
		and	a.nr_atend_rn		= nr_atendimento_w
		and	somente_numero(a.nr_dnv) > 0
		and	not exists (	SELECT	1
					from	sus_registro_civil x
					where	x.nr_atendimento = nr_atendimento_p
					and	x.nr_registro_dn = substr(somente_numero(a.nr_dnv),1,11))  LIMIT 1;
		exception
		when others then
			nr_dnv_w := 0;
		end;

		if (nr_dnv_w = 0) then
			begin
			begin
			select	substr(somente_numero(a.nr_dnv),1,11)
			into STRICT	nr_dnv_w
			from	nascimento a
			where	a.nr_atendimento = nr_atendimento_p
			and	somente_numero(a.nr_dnv) > 0
			and	not exists (	SELECT	1
						from	sus_registro_civil x
						where	x.nr_atendimento = nr_atendimento_p
						and	x.nr_registro_dn = substr(somente_numero(a.nr_dnv),1,11))  LIMIT 1;
			exception
			when others then
				nr_dnv_w := 0;
			end;
			end;
		end if;


		if (coalesce(nr_seq_cartorio_nasc_w,0) > 0) then
			begin

			begin
			select	cd_cnpj_cartorio
			into STRICT	cd_cgc_cartorio_w
			from	cartorio
			where	nr_sequencia = nr_seq_cartorio_nasc_w;
			exception
			when others then
				cd_cgc_cartorio_w := null;
			end;

			end;
		end if;

		if (coalesce(nr_dnv_w,0) <> 0) and (dt_emissao_cert_nasc_w IS NOT NULL AND dt_emissao_cert_nasc_w::text <> '') then
			begin

			insert into sus_registro_civil(
				nr_sequencia,
				nr_aih,
				nr_seq_aih,
				nr_atendimento,
				cd_cgc_cartorio,
				cd_pf_cartorio,
				dt_emissao_rn,
				nm_recem_nato,
				nr_folha,
				nr_livro,
				nr_matricula_rn,
				nr_registro_dn,
				nr_termo,
				dt_atualizacao,
				dt_atualizacao_nrec,
				nm_usuario,
				nm_usuario_nrec)
			values (	nextval('sus_registro_civil_seq'),
				nr_aih_p,
				nr_seq_aih_p,
				nr_atendimento_p,
				cd_cgc_cartorio_w,
				null,
				dt_emissao_cert_nasc_w,
				substr(nm_pessoa_fisica_w,1,70),
				substr(nr_folha_cert_nasc_w,1,4),
				substr(nr_livro_cert_nasc_w,1,8),
				substr(nr_matricula_nasc_w,1,32),
				nr_dnv_w,
				nr_termo_cert_nasc_w,
				clock_timestamp(),
				clock_timestamp(),
				nm_usuario_p,
				nm_usuario_p);

			end;
		else
			CALL wheb_mensagem_pck.exibir_mensagem_abort(288698);
			/*Não foi possível gerar o registro civil por que não foi encontrado o número da declaração de nascidos vivos.*/

		end if;

		end;
	end loop;
	end;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_gerar_registro_civil ( nr_atendimento_p atendimento_paciente.nr_atendimento%type, nr_aih_p sus_aih_unif.nr_aih%type, nr_seq_aih_p sus_aih_unif.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

