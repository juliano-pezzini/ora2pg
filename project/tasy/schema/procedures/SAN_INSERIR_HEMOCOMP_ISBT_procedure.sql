-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE san_inserir_hemocomp_isbt ( ds_codigo_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_emp_ent_p INOUT bigint) AS $body$
DECLARE

 
ds_codigo_w		varchar(2000);
ds_structure_w		varchar(255);
ie_contador_w		bigint	:= 0;
ie_pos_igual_w		smallint;
ie_pos_ecom_w		smallint;
ie_pos_menor_w		smallint;
ds_referencia_w		varchar(255);
tam_lista_w		bigint;
ds_001_w		varchar(255);
ds_002_w		varchar(255);
ds_003_w		varchar(255);
ds_004_w		varchar(255);
ds_005_w		varchar(255);
ds_006_w		varchar(255);
ds_007_w		varchar(255);
ds_008_w		varchar(255);
ds_009_w		varchar(255);
ds_019_w		varchar(255);
cd_local_isbt_w		varchar(5);
nr_seq_isbt_w		integer;
ie_tipo_sangue_w	varchar(2);
ie_fator_rh_w		varchar(1);
nr_seq_tipo_doacao_w	bigint;
nr_seq_derivado_w	bigint;
nr_seq_entidade_w	bigint;
nr_seq_emp_ent_w	bigint;
nr_seq_conservante_w	bigint;
ie_lavado_w		varchar(1);
ie_irradiado_w		varchar(1);
ie_filtrado_w		varchar(1);
ie_aliquotado_w		varchar(1);
cd_isbt_tipo_doa_w	varchar(1);
dt_vencimento_w		timestamp;
dt_coleta_w		timestamp;
dt_producao_w		timestamp;
ds_inconsistencia_w	varchar(255);
qt_registro_grupo_w	smallint;
ie_liberar_w		varchar(1);
dt_liberacao_w		timestamp;
nm_usuario_lib_w	varchar(15);
ie_tipo_doa_cadast_w	varchar(1);
ds_tipo_doacao_w	varchar(255);
nr_seq_tipo_doa_deri_w	bigint;
ie_ja_existe_w		varchar(1);
nr_seq_producao_exist_w	bigint;
cd_divisao_isbt_w	varchar(2);
VarHoraVencimentoComponente varchar(255);
qt_dias_validade_w	smallint;


BEGIN 
ie_liberar_w := obter_param_usuario(450, 457, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_liberar_w);
VarHoraVencimentoComponente := obter_param_usuario(450, 262, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, VarHoraVencimentoComponente);
 
 
if (ds_codigo_p IS NOT NULL AND ds_codigo_p::text <> '') then 
 
	ds_codigo_w	:= ds_codigo_p;
 
	while	(ds_codigo_w IS NOT NULL AND ds_codigo_w::text <> '') and 
		ie_contador_w < 200 loop 
		begin 
		tam_lista_w		:= length(ds_codigo_w);
		ie_pos_igual_w		:= position(chr(61) in ' '||substr(ds_codigo_w,2,tam_lista_w));
		ie_pos_ecom_w		:= position(chr(38) in ' '||substr(ds_codigo_w,2,tam_lista_w));
 
		if	(ie_pos_igual_w > ie_pos_ecom_w AND ie_pos_ecom_w <> 0) or (ie_pos_igual_w = 0) then 
			ie_pos_menor_w	:= ie_pos_ecom_w;
		else 
			ie_pos_menor_w	:= ie_pos_igual_w;
		end if;
 
		if (ie_pos_menor_w <> 0) then 
 
			ds_structure_w	:= substr(ds_codigo_w,1,(ie_pos_menor_w)-1);
			ds_codigo_w	:= substr(ds_codigo_w,(ie_pos_menor_w),tam_lista_w);
		else 
			ds_structure_w	:= ds_codigo_w;
			ds_codigo_w	:= '';
		end if;
 
 
		select	max(substr(obter_ref_isbt_codigo(ds_structure_w),1,3)) 
		into STRICT	ds_referencia_w 
		;
			 
		if (ds_referencia_w = '001') then 
			ds_001_w := ds_structure_w;
		end if;
		if (ds_referencia_w = '002') then 
			ds_002_w := ds_structure_w;
		end if;
		if (ds_referencia_w = '003') then 
			ds_003_w := ds_structure_w;
		end if;
		if (ds_referencia_w = '004') then 
			ds_004_w := ds_structure_w;
		end if;
		if (ds_referencia_w = '005') then 
			ds_005_w := ds_structure_w;
		end if;
		if (ds_referencia_w = '006') then 
			ds_006_w := ds_structure_w;
		end if;
		if (ds_referencia_w = '007') then 
			ds_007_w := ds_structure_w;
		end if;
		if (ds_referencia_w = '008') then 
			ds_008_w := ds_structure_w;
		end if;
		if (ds_referencia_w = '009') then 
			ds_009_w := ds_structure_w;
		end if;
		if (ds_referencia_w = '019') then 
			ds_019_w := ds_structure_w;
		end if;
 
 
		ie_contador_w	:= ie_contador_w + 1;
 
		end;
	end loop;
end if;
 
if (ds_001_w IS NOT NULL AND ds_001_w::text <> '') then 
	cd_local_isbt_w	:= substr(ds_001_w,2,5);
	nr_seq_isbt_w	:= substr(ds_001_w,9,6);
 
	select	max(nr_sequencia) 
	into STRICT	nr_seq_entidade_w 
	from	san_entidade 
	where	cd_local_isbt = cd_local_isbt_w;
 
end if;
 
if (ds_002_w IS NOT NULL AND ds_002_w::text <> '') then 
	select	count(*) 
	into STRICT	qt_registro_grupo_w 
	from	san_grupo_sanguineo_isbt 
	where	cd_sangue_isbt = substr(ds_002_w,3,2);
 
	if (coalesce(qt_registro_grupo_w,0) > 0) then 
 
		select	max(ie_tipo_sangue), 
			max(ie_fator_rh), 
			max(nr_seq_tipo_doacao) 
		into STRICT	ie_tipo_sangue_w, 
			ie_fator_rh_w, 
			nr_seq_tipo_doacao_w 
		from	san_grupo_sanguineo_isbt 
		where	cd_sangue_isbt = substr(ds_002_w,3,2);
	else 
		ds_inconsistencia_w	:= obter_desc_expressao(291139)||chr(13)||chr(10)||ds_inconsistencia_w;
	end if;
end if;
 
if (ds_003_w IS NOT NULL AND ds_003_w::text <> '') then 
 
	select	max(nr_seq_derivado), 
		coalesce(max(ie_lavado),'N'), 
		coalesce(max(ie_irradiado),'N'), 
		coalesce(max(ie_filtrado),'N'), 
		coalesce(max(ie_aliquotado),'N'), 
		max(nr_seq_conservante) 
	into STRICT	nr_seq_derivado_w, 
		ie_lavado_w, 
		ie_irradiado_w, 
		ie_filtrado_w, 
		ie_aliquotado_w, 
		nr_seq_conservante_w 
	from	san_derivado_bolsa 
	where	nr_bolsa = substr(ds_003_w,3,5);
 
	cd_divisao_isbt_w	:= substr(ds_003_w,9,2);
	cd_isbt_tipo_doa_w	:= substr(ds_003_w,8,1);
end if;
 
if (ds_004_w IS NOT NULL AND ds_004_w::text <> '') then 
	begin 
		select	to_date(to_char(to_date(substr( ds_004_w,6,3),'ddd'),'dd/mm')||'/'||to_char(to_date(substr( ds_004_w,1,3),'yyy'),'yyyy')) 
		into STRICT	dt_vencimento_w 
		;
	exception 
	when others then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(288941)||chr(13)||chr(10);
	end;
end if;
 
if (ds_005_w IS NOT NULL AND ds_005_w::text <> '') then 
	begin 
		select	to_date(to_char(to_date(substr( ds_005_w,6,3),'ddd'),'dd/mm')||'/'||to_char(to_date(substr( ds_005_w,3,3),'yyy'),'yyyy') 
			||' '||to_char(to_date(substr( ds_005_w,9,4),'hh24mi'),'hh24:mi'),'dd/mm/yyyy hh24:mi:ss') 
		into STRICT	dt_vencimento_w 
		;
	exception 
	when others then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(288941)||chr(13)||chr(10);
	end;
 
end if;
 
if (ds_006_w IS NOT NULL AND ds_006_w::text <> '') then 
	begin 
		select	to_date(to_char(to_date(substr( ds_006_w,6,3),'ddd'),'dd/mm')||'/'||to_char(to_date(substr( ds_006_w,3,3),'yyy'),'yyyy')) 
		into STRICT	dt_coleta_w 
		;
	exception 
	when others then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(288414)||chr(13)||chr(10);
	end;
	 
end if;
 
if (ds_007_w IS NOT NULL AND ds_007_w::text <> '') then 
	begin 
		select	to_date(to_char(to_date(substr( ds_007_w,6,3),'ddd'),'dd/mm')||'/'||to_char(to_date(substr( ds_007_w,3,3),'yyy'),'yyyy') 
			||' '||to_char(to_date(substr( ds_007_w,9,4),'hh24mi'),'hh24:mi'),'dd/mm/yyyy hh24:mi:ss') 
		into STRICT	dt_coleta_w 
		;
	exception 
	when others then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(288414)||chr(13)||chr(10);
	end;
 
end if;
 
if (ds_008_w IS NOT NULL AND ds_008_w::text <> '') then 
	begin 
		select	to_date(to_char(to_date(substr( ds_008_w,6,3),'ddd'),'dd/mm')||'/'||to_char(to_date(substr( ds_008_w,3,3),'yyy'),'yyyy')) 
		into STRICT	dt_producao_w 
		;
	exception 
	when others then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(612843)||chr(13)||chr(10);
	end;
 
end if;
 
if (ds_009_w IS NOT NULL AND ds_009_w::text <> '') then 
	begin 
		select	to_date(to_char(to_date(substr( ds_009_w,6,3),'ddd'),'dd/mm')||'/'||to_char(to_date(substr( ds_009_w,3,3),'yyy'),'yyyy') 
			||' '||to_char(to_date(substr( ds_009_w,9,4),'hh24mi'),'hh24:mi'),'dd/mm/yyyy hh24:mi:ss') 
		into STRICT	dt_producao_w 
		;
	exception 
	when others then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(612843)||chr(13)||chr(10);
	end;
 
end if;
 
select	max(qt_dias_validade) 
into STRICT	qt_dias_validade_w 
from	san_derivado 
where	nr_sequencia = nr_seq_derivado_w;
 
if (coalesce(dt_vencimento_w::text, '') = '') then 
	dt_vencimento_w := to_date( to_char(coalesce(dt_producao_w,clock_timestamp()) + coalesce(qt_dias_validade_w,0),'dd/mm/yyyy')|| ' '||VarHoraVencimentoComponente, 'dd/mm/yyyy hh24:mi:ss');
end if;
 
-- consistÃªncias 
 
select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END  
into STRICT	ie_tipo_doa_cadast_w 
from	san_tipo_doacao 
where	upper(cd_isbt) = upper(cd_isbt_tipo_doa_w);
 
if (ie_tipo_doa_cadast_w = 'N') then 
 
	if (ds_003_w IS NOT NULL AND ds_003_w::text <> '') then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(293660, 'CD_TIPO_P='|| to_char(cd_isbt_tipo_doa_w));
	end if;
end if;
 
select	max(nr_sequencia) 
into STRICT	nr_seq_tipo_doa_deri_w 
from	san_tipo_doacao 
where	upper(cd_isbt) = upper(cd_isbt_tipo_doa_w);
 
if (nr_seq_tipo_doacao_w <> nr_seq_tipo_doa_deri_w) then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(293661);
end if;
 
if ( coalesce(nr_seq_derivado_w::text, '') = '') then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(291244)||chr(13)||chr(10);
end if;
if ( coalesce(nr_seq_entidade_w::text, '') = '') then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(289262)||chr(13)||chr(10);
end if;
if ( coalesce(cd_local_isbt_w::text, '') = '') then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(303984)||chr(13)||chr(10);
end if;
 
if	((coalesce(ie_tipo_sangue_w::text, '') = '') and (coalesce(ie_fator_rh_w::text, '') = '') and (coalesce(nr_seq_tipo_doacao_w::text, '') = '')) then 
	ds_inconsistencia_w	:= ds_inconsistencia_w||obter_desc_expressao(291139)||chr(13)||chr(10);
end if;
 
select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END  
into STRICT	ie_ja_existe_w 
from	san_producao 
where	cd_identificacao_isbt		= substr(ds_001_w,2,13) 
and	cd_produto_isbt			= substr(ds_003_w,3,5) 
and	coalesce(cd_divisao_isbt,'00')	= cd_divisao_isbt_w;
 
if (ie_ja_existe_w = 'S') then 
 
	select	max(nr_sequencia) 
	into STRICT	nr_seq_producao_exist_w 
	from	san_producao 
	where	cd_identificacao_isbt		= substr(ds_001_w,2,13) 
	and	cd_produto_isbt			= substr(ds_003_w,3,5) 
	and	coalesce(cd_divisao_isbt,'00')	= cd_divisao_isbt_w;
	 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(294585,'NR_SEQ_PRODUCAO=' || nr_seq_producao_exist_w);
end if;
 
if (ds_inconsistencia_w IS NOT NULL AND ds_inconsistencia_w::text <> '') then 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(294226,'DS_INCONSISTENCIA=' || ds_inconsistencia_w);
end if;
 
-- inserÃ§Ã£o 
select	nextval('san_emprestimo_seq') 
into STRICT	nr_seq_emp_ent_w
;
	insert into san_emprestimo( 
				nr_sequencia, 
				nr_seq_entidade, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				ie_entrada_saida, 
				dt_emprestimo, 
				cd_pf_realizou, 
				cd_estabelecimento 
			) values ( 
				nr_seq_emp_ent_w, 
				nr_seq_entidade_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				'E', 
				clock_timestamp(), 
				substr(obter_pessoa_fisica_usuario(nm_usuario_p,'C'),1,10), 
				cd_estabelecimento_p);
 
	if (ie_liberar_w = 'N') then 
		dt_liberacao_w	:= clock_timestamp();
		nm_usuario_lib_w := nm_usuario_p;
	end if;
 
	insert into san_producao( 
				nr_sequencia, 
				nr_seq_derivado, 
				nr_seq_emp_ent, 
				dt_producao, 
				cd_pf_realizou, 
				dt_atualizacao, 
				nm_usuario, 
				dt_vencimento, 
				nr_sangue, 
				ie_irradiado, 
				ie_lavado, 
				ie_filtrado, 
				ie_aliquotado, 
				cd_estabelecimento, 
				ie_tipo_sangue, 
				ie_fator_rh, 
				nr_seq_isbt, 
				ie_aferese, 
				ie_realiza_nat, 
				ie_pai_reproduzido, 
				ie_reproduzido, 
				ie_bolsa_filha, 
				ie_pool, 
				ie_tipo_bloqueio, 
				ie_em_reproducao, 
				dt_liberacao, 
				nm_usuario_lib, 
				cd_identificacao_isbt, 
				dt_coleta_isbt, 
				nr_seq_tipo_doacao_isbt, 
				cd_produto_isbt, 
				cd_divisao_isbt, 
				nr_seq_conservante 
			) values ( 
				nextval('san_producao_seq'), 
				nr_seq_derivado_w, 
				nr_seq_emp_ent_w, 
				coalesce(dt_producao_w,clock_timestamp()), 
				substr(obter_pessoa_fisica_usuario(nm_usuario_p,'C'),1,10), 
				clock_timestamp(), 
				nm_usuario_p, 
				dt_vencimento_w, 
				nr_seq_isbt_w, 
				ie_irradiado_w, 
				ie_lavado_w, 
				ie_filtrado_w, 
				ie_aliquotado_w, 
				cd_estabelecimento_p, 
				ie_tipo_sangue_w, 
				ie_fator_rh_w, 
				nr_seq_isbt_w, 
				'N', 
				'N', 
				'N', 
				'N', 
				'N', 
				'N', 
				'N', 
				'N', 
				dt_liberacao_w, 
				nm_usuario_lib_w, 
				substr(ds_001_w,2,13), 
				dt_coleta_w, 
				nr_seq_tipo_doa_deri_w, 
				substr(ds_003_w,3,5), 
				cd_divisao_isbt_w, 
				nr_seq_conservante_w);
 
commit;
 
nr_seq_emp_ent_p	:= nr_seq_emp_ent_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE san_inserir_hemocomp_isbt ( ds_codigo_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_emp_ent_p INOUT bigint) FROM PUBLIC;

