-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_c425_icmsipi ( nr_seq_controle_p bigint, nr_ecf_cx_P text) AS $body$
DECLARE


/*REGISTRO C425: REGISTRO DOS TOTALIZADORES PARCIAIS DA REDUÇÃO Z (COD 02, 2D e 60).*/

-- VARIABLES
ie_gerou_dados_bloco_w	varchar(1) := 'N';

nr_seq_icmsipi_C425_w	fis_efd_icmsipi_C425.nr_sequencia%type;

qt_cursor_w 		bigint := 0;
nr_vetor_w  		bigint := 0;

-- USUARIO
nm_usuario_w usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro C425 restringindo pela sequencia da nota fiscal*/

c_c425 CURSOR FOR
	SELECT 	b.cd_item,
		d.nr_sequencia,
		sum(b.qt_item) qt_item,
		b.cd_unid,
		sum(b.vl_item) vl_item,
		sum(b.vl_pis) vl_pis,
		sum(b.vl_cofins) vl_cofins
	from   	fis_efd_icmsipi_c460 a,
		fis_efd_icmsipi_c470 b,
		fis_efd_icmsipi_c405 c,
		fis_efd_icmsipi_c420 d
	where 	a.nr_seq_controle = b.nr_seq_controle
	and   	a.nr_seq_nota = b.nr_seq_nota
	and   	a.nr_seq_controle = c.nr_seq_controle
	and   	trunc(a.dt_doc) = trunc(c.dt_doc)
	and 	d.nr_seq_superior = c.nr_sequencia
	and   	a.nr_ecf_cx = nr_ecf_cx_p
	and   	a.nr_ecf_cx = c.nr_ecf_cx
	and   	a.nr_seq_controle = nr_seq_controle_p
	group by d.nr_sequencia,b.cd_item,b.cd_unid;

/*Criação do array com o tipo sendo do cursor eespecificado - c_itens_cupom_fiscal*/

type reg_c425 is table of c_c425%RowType;
vet_c425 reg_c425;

/*Criação do array com o tipo sendo da tabela eespecificada - fis_efd_icmsipi_C425 */

type registro is table of fis_efd_icmsipi_C425%rowtype index by integer;
fis_registros_w registro;

BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

open c_c425;
loop
fetch c_c425 bulk collect into vet_c425 limit 1000;
	for i in 1 .. vet_c425.Count loop
		begin

		/*Incrementa a variavel para o array*/

		qt_cursor_w:=	qt_cursor_w + 1;

		if (ie_gerou_dados_bloco_w = 'N') then
			ie_gerou_dados_bloco_w := 'S';
		end if;

		/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_C425 */

		select	nextval('fis_efd_icmsipi_c425_seq')
		into STRICT	nr_seq_icmsipi_C425_w
		;

		/*Inserindo valores no array para realização do forall posteriormente*/

		fis_registros_w[qt_cursor_w].nr_sequencia         := nr_seq_icmsipi_C425_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao       := clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario           := nm_usuario_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec  := clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec      := nm_usuario_w;
		fis_registros_w[qt_cursor_w].cd_reg               := 'C425';
		fis_registros_w[qt_cursor_w].cd_item		  := vet_c425[i].cd_item;
  		fis_registros_w[qt_cursor_w].qt_item		  := vet_c425[i].qt_item;
		fis_registros_w[qt_cursor_w].cd_unid		  := vet_c425[i].cd_unid;
		fis_registros_w[qt_cursor_w].vl_item		  := vet_c425[i].vl_item;
		fis_registros_w[qt_cursor_w].vl_pis		  := vet_c425[i].vl_pis;
		fis_registros_w[qt_cursor_w].vl_cofins		  := vet_c425[i].vl_cofins;
		fis_registros_w[qt_cursor_w].nr_seq_controle	  := nr_seq_controle_p;
		fis_registros_w[qt_cursor_w].nr_seq_superior  	  := vet_c425[i].nr_sequencia;

		if (nr_vetor_w >= 1000) then
			begin
			/*Inserindo registros definitivamente na tabela especifica - fis_efd_icmsipi_C425 */

			forall i in fis_registros_w.first .. fis_registros_w.last
				insert into fis_efd_icmsipi_C425 values fis_registros_w(i);

			nr_vetor_w := 0;
			fis_registros_w.delete;

			commit;

			end;
		end if;

		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w := nr_vetor_w + 1;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_c425 */
end loop;
close c_c425;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_C425 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;
	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update	fis_efd_icmsipi_controle
	set	ie_mov_C 	= 'S'
	where	nr_sequencia 	= nr_seq_controle_p;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_c425_icmsipi ( nr_seq_controle_p bigint, nr_ecf_cx_P text) FROM PUBLIC;

