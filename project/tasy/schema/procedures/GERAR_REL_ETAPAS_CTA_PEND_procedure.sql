-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_rel_etapas_cta_pend (cd_pessoa_fisica_p text) AS $body$
DECLARE

 
nm_usuario_w		varchar(15);
cd_pessoa_fisica_w	varchar(10);
vl_conta_w		double precision;
qt_existe_w		bigint;
cd_setor_atendimento_w	setor_atendimento.cd_setor_atendimento%type;

C01 CURSOR FOR 
	SELECT 	a.dt_entrada, 
		SUBSTR(OBTER_NOME_PF(p.CD_PESSOA_FISICA), 0, 255) nm_pessoa_fisica, 
		coalesce(a.ie_tipo_atendimento,1) ie_tipo_atendimento, 
		coalesce(a.nr_seq_classificacao,0) nr_seq_classificacao, 
		coalesce(a.ie_clinica,0) ie_clinica, 
		a.nr_atendimento, 
		v.ds_convenio ds_convenio, 
		b.VL_CONTA vl_conta, 
		coalesce(b.cd_convenio_parametro,'0') cd_convenio_parametro, 
		coalesce(b.cd_categoria_parametro,'0') cd_categoria_parametro, 
		b.nr_seq_protocolo, 
		c.nr_interno_conta, 
		clock_timestamp() - c.dt_etapa qt_dias_etapa, 
		m.ds_motivo_devolucao ds_motivo_dev, 
		c.ds_observacao, 
		d.ds_etapa ds_etapa, 
		d.nr_sequencia 
	FROM convenio v, pessoa_fisica p, fatur_etapa d, conta_paciente b, atendimento_paciente a, conta_paciente_etapa c
LEFT OUTER JOIN fatur_motivo_devol m ON (c.nr_seq_motivo_dev = m.nr_sequencia)
WHERE a.nr_atendimento = b.nr_atendimento and b.nr_interno_conta = c.nr_interno_conta and c.nr_seq_etapa = d.nr_sequencia AND b.cd_convenio_parametro = v.cd_convenio  AND a.cd_pessoa_fisica = p.cd_pessoa_fisica and coalesce(c.dt_fim_etapa::text, '') = '' and ((clock_timestamp() - c.dt_etapa) > coalesce(d.qt_dias_etapa,0))    --Trazer as que estão à mais de "x" dias na etapa 
  and c.dt_etapa > clock_timestamp() - interval '730 days'   --Trazer apenas os registros das etapas dos últimos 365 dias 
  and d.ie_situacao = 'A' and coalesce(b.ie_cancelamento::text, '') = '' and not exists (SELECT 1 from nota_fiscal x where 	x.nr_interno_conta = b.nr_interno_conta) and not exists (select 1 from nota_fiscal y where 	y.nr_seq_protocolo = b.nr_seq_protocolo);
	
	/*select 	a.dt_entrada, 
		substr(obter_nome_pf(a.cd_pessoa_fisica),1,60) nm_pessoa_fisica, 
		nvl(a.ie_tipo_atendimento,1) ie_tipo_atendimento, 
		nvl(a.nr_seq_classificacao,0) nr_seq_classificacao, 
		nvl(a.ie_clinica,0) ie_clinica, 
		a.nr_atendimento, 
		substr(obter_nome_convenio(b.cd_convenio_parametro),1,150) ds_convenio, 
		obter_valor_conta(b.nr_interno_conta,0) vl_conta, 
		nvl(b.cd_convenio_parametro,0) cd_convenio_parametro, 
		nvl(b.cd_categoria_parametro,'0') cd_categoria_parametro, 
		b.nr_seq_protocolo, 
		c.nr_interno_conta, 
		sysdate - c.dt_etapa qt_dias_etapa, 
		substr(obter_desc_motivo_devol(c.nr_seq_motivo_dev),1,200) ds_motivo_dev, 
		c.ds_observacao, 
		d.ds_etapa || ' (' || d.nr_sequencia || ')' ds_etapa, 
		d.nr_sequencia 
	from 	atendimento_paciente a, 
		conta_paciente	   b, 
		conta_paciente_etapa c, 
		fatur_etapa d 
	where 	a.nr_atendimento = b.nr_atendimento 
	and 	b.nr_interno_conta = c.nr_interno_conta 
	and 	c.nr_seq_etapa = d.nr_sequencia 
	and 	c.dt_fim_etapa is null 
	and   ((sysdate - c.dt_etapa) > nvl(d.qt_dias_etapa,0))   --Trazer as que estão à mais de "x" dias na etapa 
	and   c.dt_etapa > sysdate - 90  --Trazer apenas os registros das etapas dos últimos 90 dias				 
	and 	d.ie_situacao = 'A' 
	and 	b.ie_cancelamento is null 
	and 	not exists (select 1 from nota_fiscal x where 	x.nr_interno_conta = b.nr_interno_conta) 
	and 	not exists (select 1 from nota_fiscal y where 	y.nr_seq_protocolo = b.nr_seq_protocolo);*/
 
	 
c01_w	C01%RowType;


BEGIN 
 
cd_pessoa_fisica_w:= cd_pessoa_fisica_p;
 
select	max(nm_usuario) 
into STRICT	nm_usuario_w 
from 	usuario 
where 	cd_pessoa_fisica = cd_pessoa_fisica_w;
 
delete from W_HSL_ETAPA_CTA_PEND 
where cd_pessoa_fisica = cd_pessoa_fisica_w;
 
if (nm_usuario_w IS NOT NULL AND nm_usuario_w::text <> '') then 
		 
	open C01;
	loop 
	fetch C01 into	 
		c01_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin		 
				 
		cd_setor_atendimento_w:= coalesce(Obter_Setor_Atendimento(c01_w.nr_atendimento),0);
				 
		--verificar o responsável 
		select 	count(*) 
		into STRICT	qt_existe_w 
		from 	fatur_etapa_responsavel 
		where 	nr_seq_etapa = c01_w.nr_sequencia 
		and 	nm_usuario_resp = nm_usuario_w 
		and 	ie_situacao = 'A' 
		and 	trunc(clock_timestamp(),'dd') between dt_inicio_vigencia and coalesce(dt_final_vigencia, clock_timestamp()) 
		and 	coalesce(cd_convenio, c01_w.cd_convenio_parametro) = c01_w.cd_convenio_parametro 
		and 	coalesce(cd_categoria, c01_w.cd_categoria_parametro) = c01_w.cd_categoria_parametro 
		and 	coalesce(ie_tipo_atendimento, c01_w.ie_tipo_atendimento) = c01_w.ie_tipo_atendimento 
		and 	coalesce(nr_seq_classificacao, c01_w.nr_seq_classificacao) = c01_w.nr_seq_classificacao 
		and 	coalesce(ie_clinica, c01_w.ie_clinica) = c01_w.ie_clinica 
		and 	coalesce(cd_setor_atendimento, cd_setor_atendimento_w) = cd_setor_atendimento_w;
		 
		if (c01_w.nr_atendimento > 0) and (qt_existe_w > 0) then 
			 
			insert into w_hsl_etapa_cta_pend(dt_atualizacao, 
				nm_usuario, 
				ds_convenio, 
				nr_atendimento, 
				dt_entrada, 
				nm_paciente, 
				vl_conta, 
				qt_dias_etapa, 
				ds_motivo_dev_etapa, 
				ds_obs_conta, 
				nr_interno_conta, 
				ds_etapa, 
				cd_pessoa_fisica) 
			values (clock_timestamp(), 
				nm_usuario_w, 
				c01_w.ds_convenio, 
				c01_w.nr_atendimento, 
				c01_w.dt_entrada, 
				c01_w.nm_pessoa_fisica, 
				c01_w.vl_conta, 
				c01_w.qt_dias_etapa, 
				c01_w.ds_motivo_dev, 
				substr(C01_w.ds_observacao,1,255), 
				c01_w.nr_interno_conta, 
				c01_w.ds_etapa, 
				cd_pessoa_fisica_w);
		end if;
		 
		 
		end;
	end loop;
	close C01;	
	 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_rel_etapas_cta_pend (cd_pessoa_fisica_p text) FROM PUBLIC;

