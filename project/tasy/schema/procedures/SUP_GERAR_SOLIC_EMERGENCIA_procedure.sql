-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sup_gerar_solic_emergencia ( cd_estabelecimento_p bigint, nr_seq_protocolo_p bigint, cd_local_estoque_p bigint, qt_vitima_p bigint, qt_dias_previsto_p bigint, ie_aviso_chegada_p text, ie_aviso_aprov_oc_p text, ie_ressuprimento_p text, ie_padronizado_p text, ie_estoque_p text, nm_usuario_p text, nr_solic_compra_p INOUT bigint) AS $body$
DECLARE

 
nr_solic_compra_w			bigint;
cd_material_w			integer;
qt_material_w			double precision;
qt_comprar_w			double precision;
ds_protocolo_w			varchar(80);
qt_conv_compra_estoque_w		double precision;
ie_origem_preco_w			varchar(1);
vl_preco_w			double precision;
cd_unidade_compra_w		varchar(30);
vl_item_w				double precision;
nr_item_w			bigint;
nr_seq_nf_w			bigint;

C01 CURSOR FOR 
SELECT	a.cd_material, 
	a.qt_material, 
	a.ie_origem_preco, 
	a.vl_preco, 
	b.qt_conv_compra_estoque, 
	substr(obter_dados_material_estab(b.cd_material,cd_estabelecimento_p,'UMC'),1,30) cd_unidade_medida_compra 
from	material_estab c, 
	material b, 
	sup_protocolo_item a 
where	a.cd_material			= b.cd_material 
and	b.cd_material			= c.cd_material 
and	c.cd_estabelecimento		= cd_estabelecimento_p 
and	a.nr_seq_protocolo			= nr_seq_protocolo_p 
and	b.ie_situacao			= 'A' 
and	b.cd_material			= (obter_dados_material(b.cd_material, 'EST'))::numeric  
and (c.ie_ressuprimento			= ie_ressuprimento_p or ie_ressuprimento_p = 'N') 
and (c.ie_padronizado			= ie_padronizado_p or ie_padronizado_p = 'N') 
and (c.ie_material_estoque		= ie_estoque_p or ie_estoque_p = 'N');


BEGIN 
 
nr_solic_compra_w := gerar_solic_compra(	cd_estabelecimento_p, ie_aviso_chegada_p, ie_aviso_aprov_oc_p, cd_local_estoque_p, nm_usuario_p, nr_solic_compra_w);
 
select	ds_protocolo 
into STRICT	ds_protocolo_w 
from	sup_protocolo_ressup 
where	nr_sequencia = nr_seq_protocolo_p;
 
update	solic_compra 
set	ds_observacao = wheb_mensagem_pck.get_texto(307041,'DS_PROTOCOLO_W='||ds_protocolo_w) 
where	nr_solic_compra = nr_solic_compra_w;
 
open C01;
loop 
fetch C01 into 
	cd_material_w, 
	qt_material_w, 
	ie_origem_preco_w, 
	vl_preco_w, 
	qt_conv_compra_estoque_w, 
	cd_unidade_compra_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	qt_comprar_w	:= qt_material_w * qt_vitima_p * qt_dias_previsto_p;
	qt_comprar_w	:= dividir(qt_comprar_w, qt_conv_compra_estoque_w);
	if (qt_comprar_w > 0) and (qt_comprar_w < 1) then 
		qt_comprar_w	:= 1;
	else	qt_comprar_w	:= round((qt_comprar_w)::numeric, 0);
	end if;
 
	if (ie_origem_preco_w = 'U') then 
		SELECT * FROM Obter_ultima_compra_material( 
					cd_estabelecimento_p, cd_material_w, cd_unidade_compra_w, 'C', clock_timestamp() - interval '180 days', nr_seq_nf_w, vl_item_w) INTO STRICT nr_seq_nf_w, vl_item_w;
	elsif (ie_origem_preco_w = 'F') then 
		vl_item_w	:= vl_preco_w;
	end if;
 
	select	coalesce(max(nr_item_solic_compra),0) + 1 
	into STRICT	nr_item_w 
	from	solic_compra_item 
	where	nr_solic_compra = nr_solic_compra_w;
 
	insert into solic_compra_item( 
		nr_solic_compra, 
		nr_item_solic_compra, 
		cd_material, 
		cd_unidade_medida_compra, 
		qt_material, 
		dt_atualizacao, 
		nm_usuario, 
		ie_situacao, 
		dt_solic_item, 
		vl_unit_previsto, 
		ie_geracao, 
		qt_conv_compra_est_orig, 
		qt_saldo_disp_estoque) 
	values (nr_solic_compra_w, 
		nr_item_w, 
		cd_material_w, 
		cd_unidade_compra_w, 
		qt_comprar_w, 
		clock_timestamp(), 
		nm_usuario_p, 
		'A', 
		trunc(clock_timestamp()), 
		vl_item_w, 
		'S', 
		obter_dados_material(cd_material_w,'QCE'), 
		obter_saldo_disp_estoque(cd_estabelecimento_p, cd_material_w, cd_local_estoque_p, trunc(clock_timestamp(),'mm')));
 
	insert into solic_compra_item_entrega( 
		nr_solic_compra, 
		nr_item_solic_compra, 
		nr_item_solic_compra_entr, 
		qt_entrega_solicitada, 
		dt_entrega_solicitada, 
		dt_atualizacao, 
		nm_usuario, 
		ds_observacao) 
	values (nr_solic_compra_w, 
		nr_item_w, 
		1, 
		qt_comprar_w, 
		trunc(clock_timestamp()), 
		clock_timestamp(), 
		nm_usuario_p, 
		null);
 
	end;
end loop;
close c01;
 
nr_solic_compra_p	:= nr_solic_compra_w;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sup_gerar_solic_emergencia ( cd_estabelecimento_p bigint, nr_seq_protocolo_p bigint, cd_local_estoque_p bigint, qt_vitima_p bigint, qt_dias_previsto_p bigint, ie_aviso_chegada_p text, ie_aviso_aprov_oc_p text, ie_ressuprimento_p text, ie_padronizado_p text, ie_estoque_p text, nm_usuario_p text, nr_solic_compra_p INOUT bigint) FROM PUBLIC;

