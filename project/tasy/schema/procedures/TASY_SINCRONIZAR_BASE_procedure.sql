-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE tasy_sincronizar_base (ie_criar_indices_p text default 'S') AS $body$
DECLARE


    -- Esta procedure e compilada sempre antes da atualizacao da versao

    -- portanto, cuidado ao altera-la
    nm_user_w      varchar(20);
    ie_base_wheb_w smallint := 0;
    ds_erro_w      varchar(512);
    ie_online_w    varchar(1) := 'N';
    ie_logging_w   varchar(1) := 'N';
    qt_nivel_w     smallint := 0;
    type t_changed_tables is table of varchar(1000) index by integer;
    changed_tables t_changed_tables;

    /*Verificar as tabelas que estao documentadas no dicionario e nao estao na base*/

    c010 CURSOR FOR
        SELECT 'C' ie_criar_alterar,
               a.nm_tabela,
               a.qt_registros_previsto
          from tabela_sistema a
         where gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and not exists (SELECT 1 from user_tables b where a.nm_tabela = b.table_name)
           and a.nm_tabela not in ('OBJETO_SISTEMA_PARAM');

    /*Verifica os campos que estao documentados no dicionario e nao estao na base*/

    c011 CURSOR FOR
        SELECT distinct 'A' ie_criar_alterar,
                        a.nm_tabela,
                        a.qt_registros_previsto
          from tabela_sistema  a,
               tabela_atributo c,
               user_tables     b
         where a.nm_tabela = b.table_name
           and c.nm_tabela = a.nm_tabela
           and gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and c.ie_tipo_atributo in ('LONG', 'LONG RAW', 'NUMBER', 'VARCHAR2', 'DATE', 'BLOB', 'CLOB')
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and not exists (SELECT 1
                  from user_tab_columns e
                 where a.nm_tabela = e.table_name
                   and c.nm_atributo = e.column_name);

    /*Verifica os campos que estao documentados no dicionario e nao estao corretos na base (tipo/tamanho/obrigatoriedade) */

    c012 CURSOR FOR
        SELECT distinct 'A' ie_criar_alterar,
                        a.nm_tabela,
                        a.qt_registros_previsto
          from tabela_sistema   a,
               tabela_atributo  b,
               user_tab_columns c
         where a.nm_tabela = b.nm_tabela
           and a.ie_sincronizar_wheb = 'S'
           and b.ie_tipo_atributo = 'VARCHAR2'
           and gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and a.nm_tabela = c.table_name
           and c.table_name = b.nm_tabela
           and c.column_name = b.nm_atributo
           and c.data_type = b.ie_tipo_atributo
           and c.char_length <> b.qt_tamanho

union

        SELECT distinct 'A',
                        a.nm_tabela,
                        a.qt_registros_previsto
          from tabela_sistema   a,
               tabela_atributo  b,
               user_tab_columns c
         where a.nm_tabela = b.nm_tabela
           and a.ie_sincronizar_wheb = 'S'
           and b.ie_tipo_atributo = 'NUMBER'
           and gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and a.nm_tabela = c.table_name
           and c.table_name = b.nm_tabela
           and c.column_name = b.nm_atributo
           and c.data_type = b.ie_tipo_atributo
           and (c.data_precision <> b.qt_tamanho or c.data_scale <> b.qt_decimais)
        
union

        select distinct 'A',
                        a.nm_tabela,
                        a.qt_registros_previsto
          from tabela_sistema   a,
               tabela_atributo  b,
               user_tab_columns c
         where a.nm_tabela = b.nm_tabela
           and b.ie_tipo_atributo = 'VARCHAR2'
           and gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and a.nm_tabela = c.table_name
           and c.table_name = b.nm_tabela
           and c.column_name = b.nm_atributo
           and c.data_type = b.ie_tipo_atributo
           and c.char_length <> b.qt_tamanho
        
union

        select distinct 'A',
                        a.nm_tabela,
                        a.qt_registros_previsto
          from tabela_sistema   a,
               tabela_atributo  b,
               user_tab_columns c
         where a.nm_tabela = b.nm_tabela
           and b.ie_tipo_atributo = 'NUMBER'
           and gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and a.nm_tabela = c.table_name
           and c.table_name = b.nm_tabela
           and c.column_name = b.nm_atributo
           and c.data_type = b.ie_tipo_atributo
           and (c.data_precision <> b.qt_tamanho or c.data_scale <> b.qt_decimais)
        
union

        select distinct 'A',
                        a.nm_tabela,
                        a.qt_registros_previsto
          from tabela_sistema   a,
               tabela_atributo  b,
               user_tab_columns c
         where a.nm_tabela = b.nm_tabela
           and gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and a.nm_tabela = c.table_name
           and c.table_name = b.nm_tabela
           and c.column_name = b.nm_atributo
           and ((c.nullable = 'N' and b.ie_obrigatorio = 'N') or (c.nullable = 'Y' and b.ie_obrigatorio = 'S'))
        
union

        select distinct 'A',
                        a.nm_tabela,
                        a.qt_registros_previsto
          from tabela_sistema   a,
               tabela_atributo  b,
               user_tab_columns c
         where a.nm_tabela = b.nm_tabela
           and gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and a.nm_tabela = c.table_name
           and c.table_name = b.nm_tabela
           and c.column_name = b.nm_atributo
           and c.data_type <> b.ie_tipo_atributo
           and b.ie_tipo_atributo not in ('VISUAL', 'TIMESTAMP', 'FUNCTION');

    c013 CURSOR FOR
        SELECT a.sid,
               a.serial#
          from processo_lock_v a
         where exists (SELECT 1
                  from tabela_sistema b
                 where b.nm_tabela = a.nm_objeto
                   and ie_sincronizar_wheb = 'S');

    /*Faz a criacao dos novos indices e recriacao dos que foram acrescentados campos.*/

    c030 CURSOR(pc_nm_tabela  text) FOR
        SELECT b.nm_indice,
               b.ie_tipo,
               'N' ie_criar_indice
          from indice b
         where b.nm_tabela = pc_nm_tabela
           and not exists (SELECT 1
                  from user_indexes c
                 where b.nm_tabela = c.table_name
                   and b.nm_indice = c.index_name)

union

        select d.nm_indice,
               d.ie_tipo,
               'S' ie_criar_indice
          from indice_atributo b,
               indice          d,
               user_indexes    c
         where b.nm_tabela = pc_nm_tabela
           and b.nm_indice = c.index_name
           and b.nm_indice = d.nm_indice
           and not exists (select 1
                  from user_ind_columns d
                 where d.table_name = c.table_name
                   and d.index_name = c.index_name
                   and d.column_name = b.nm_atributo);

    /*Verifica os novos indices que devem ser criados em tabelas que nao sofreram alteracao*/

    c031 CURSOR FOR
        SELECT a.nm_tabela,
               b.nm_indice,
               b.ie_tipo,
               'N' ie_criar_indice
          from tabela_sistema a,
               indice         b
         where b.nm_tabela = a.nm_tabela
           and gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and not exists (SELECT 1
                  from user_indexes c
                 where b.nm_tabela = c.table_name
                   and b.nm_indice = c.index_name);

    /*Verifica as novas integridades que devem ser criadas*/

    c040 CURSOR FOR
        SELECT a.nm_tabela,
               b.nm_integridade_referencial,
               'N' ie_criar_alterar_cons
          from tabela_sistema          a,
               integridade_referencial b
         where b.nm_tabela = a.nm_tabela
           and gerar_objeto_aplicacao(a.ds_aplicacao) = 'S'
           and (1 = ie_base_wheb_w and a.ie_sincronizar_wheb = 'S' or 1 <> ie_base_wheb_w)
           and not exists (SELECT 1
                  from user_constraints c
                 where b.nm_tabela = c.table_name
                   and b.nm_integridade_referencial = c.constraint_name);

BEGIN

    CALL wheb_usuario_pck.set_ie_executar_trigger('N');

    ie_base_wheb_w := obter_valor_dinamico_bv('select 1 from estabelecimento where cd_cgc = :cd_cgc and cd_estabelecimento = :cd_estabelecimento and ie_situacao = :ie_situacao', 'cd_cgc=01950338000177;cd_estabelecimento=1;ie_situacao=A', ie_base_wheb_w);

    select user into STRICT nm_user_w;

    if (ie_base_wheb_w = 1) and (nm_user_w <> 'TASY') then
        ie_base_wheb_w := 0;
    end if;

    if (ie_base_wheb_w = 1) then
        for r013 in c013 loop
            CALL exec_sql_dinamico(null, 'begin tasy_kill_session(' || r013.sid || ',' || r013.serial# || '); end;');
        end loop;
    end if;

    CALL gravar_processo_longo('Update Version', 'TASY_SINCRONIZAR_BASE', 0);

    /*INICIO ALTERACAO COELHO -  IMPEDIR DUAS EXECUCOES DESTA PROCEDURE OU SIMULTANEA A VALIDA_OBJETOS_SISTEMA*/

    begin
        select 'A procedure VALIDA_OBJETOS_SISTEMA esta em execucao.'
 || chr(10) ||
               'A execucao da procedure TASY_SINCRONIZAR_BASE foi cancelada!!!'
 || chr(10) || 'Programa   :' || program ||
               chr(10) || 'Sid/Serial :' || sid || ',' || serial# || chr(10) || 'Usuario:' || osuser || chr(10) || 'Estacao:' ||
               machine
          into STRICT ds_erro_w
          from v$session
         where audsid <> (SELECT userenv('sessionid') )
           and username = (select username from v$session where audsid = (select userenv('sessionid') ))
           and action like 'VALIDA_OBJETOS_SISTEMA%'
           and status = 'ACTIVE';

        CALL gravar_processo_longo(null, null, 0);
        CALL wheb_mensagem_pck.exibir_mensagem_abort(183208, 'DS_ERRO_P=' || ds_erro_w);
    exception
        when others then
            ds_erro_w := null;
    end;

    begin
        select 'A procedure TASY_SINCRONIZAR_BASE ja esta em execucao.'
 || chr(10) || 'Programa   :' || program || chr(10) ||
               'Sid/Serial :' || sid || ',' || serial# || chr(10) || 'Usuario:' || osuser || chr(10) || 'Estacao:' || machine
          into STRICT ds_erro_w
          from v$session
         where audsid <> (SELECT userenv('sessionid') )
           and username = (select username from v$session where audsid = (select userenv('sessionid') ))
           and action like 'TASY_SINCRONIZAR_BASE%'
            or action like 'TASY_AJUSTAR_COLUNAS%'
            or action like 'TASY_ALTERAR_COLUNA%'
            or action like 'TASY_CRIAR_INDICE%'
            or action like 'TASY_CRIAR_INTEGRIDADE%'
            or action like 'TASY_CRIAR_ALTERAR_TABELA%';

        CALL gravar_processo_longo(null, null, 0);
        CALL wheb_mensagem_pck.exibir_mensagem_abort(183208, 'DS_ERRO_P=' || ds_erro_w);
    exception
        when others then
            null;
    end;

    begin
        select 'A procedure TASY_CONSISTIR_BASE esta em execucao. '
 || chr(10) ||
               'A execucao da procedure TASY_SINCRONIZAR_BASE foi cancelada !!!'
 || chr(10) || 'Programa   :' || program ||
               chr(10) || 'Sid/Serial :' || sid || ',' || serial# || chr(10) || 'Usuario:' || osuser || chr(10) || 'Estacao:' ||
               machine
          into STRICT ds_erro_w
          from v$session
         where audsid <> (SELECT userenv('sessionid') )
           and username = (select username from v$session where audsid = (select userenv('sessionid') ))
           and action like 'TASY_CONSISTIR_BASE%';

        CALL gravar_processo_longo(null, null, null);
        CALL wheb_mensagem_pck.exibir_mensagem_abort(183208, 'DS_ERRO_P=' || ds_erro_w);
    exception
        when others then
            null;
    end;
    /*FIM ALTERACAO COELHO*/

    ie_online_w  := obter_online_index_build;
    ie_logging_w := obter_valor_param_usuario(0, 165, obter_perfil_ativo, wheb_usuario_pck.get_nm_usuario, 0);

    /*Realiza criacao de novas tabelas*/

    CALL gravar_processo_longo('Checking tables to be created', 'TASY_SINCRONIZAR_BASE', 1);
    for r010 in c010 loop
        changed_tables(changed_tables.count) := r010.nm_tabela;
        CALL tasy_criar_alterar_tabela(r010.nm_tabela, r010.ie_criar_alterar, nm_user_w);
        for r030 in c030(r010.nm_tabela) loop
            if (ie_criar_indices_p = 'S') then
                qt_nivel_w := obter_nivel_paralelismo(r010.nm_tabela);
                CALL tasy_criar_indice(r010.nm_tabela,
                                  r030.nm_indice,
                                  r010.qt_registros_previsto,
                                  r030.ie_criar_indice,
                                  ie_online_w,
                                  ie_logging_w,
                                  qt_nivel_w);
            else
                CALL tasy_criar_chave_primaria(r010.nm_tabela);
            end if;
        end loop;
    end loop;

    /*Realiza criacao de novos campos em tabelas ja existentes*/

    CALL gravar_processo_longo('Checking new fields to be created', 'TASY_SINCRONIZAR_BASE', 2);
    for r011 in c011 loop
        changed_tables(changed_tables.count) := r011.nm_tabela;
        CALL tasy_criar_alterar_tabela(r011.nm_tabela, r011.ie_criar_alterar, nm_user_w);
    end loop;

    /*Realiza alteracao do tamanho dos campos em campos de tabelas existentes*/

    CALL gravar_processo_longo('Checking new fields to be changed', 'TASY_SINCRONIZAR_BASE', 3);
    for r012 in c012 loop
        changed_tables(changed_tables.count) := r012.nm_tabela;
        CALL tasy_criar_alterar_tabela(r012.nm_tabela, r012.ie_criar_alterar, nm_user_w);
    end loop;
    commit;

    /*  Criar is Indices */

    CALL gravar_processo_longo('Checking new indexes to be created', 'TASY_SINCRONIZAR_BASE', 4);
    if (ie_criar_indices_p = 'S') then
        for r031 in c031 loop
            changed_tables(changed_tables.count) := r031.nm_tabela;
            CALL tasy_criar_indice(r031.nm_tabela, r031.nm_indice, 0, r031.ie_criar_indice, ie_online_w, ie_logging_w);
        end loop;
    end if;

    /*  Criar as Integridades Referenciais */

    CALL gravar_processo_longo('Checking new constraints', 'TASY_SINCRONIZAR_BASE', 5);
    for r040 in c040 loop
        changed_tables(changed_tables.count) := r040.nm_tabela;
        CALL tasy_criar_integridade(r040.nm_tabela, r040.nm_integridade_referencial, r040.ie_criar_alterar_cons);
    end loop;
    commit;

    /*Atualiza os indices pendentes*/

    CALL tasy_atualiza_indices_pendente('Tasy');

    /*Executar a procedure TASY_CONSISTIR_BASE automaticamente na base da WHEB*/

    if (ie_base_wheb_w = 1) then
        CALL exec_sql_dinamico(null, 'begin Tasy_consistir_base(''S''); end;');
        CALL wheb_usuario_pck.set_ie_executar_trigger('N');
        if changed_tables.count > 0 then
            for i in changed_tables.first .. changed_tables.last loop
                EXECUTE 'update tabela_sistema set ie_sincronizar_wheb = ''N'' where nm_tabela = :nm_tabela'
                    using changed_tables(i);
            end loop;
        end if;
        commit;
    end if;
    CALL gravar_processo_longo('Adjusting new constraints', 'TASY_SINCRONIZAR_BASE', 6);
    /*  Quando a regra de delecao esta incorreta a procedure recria a constraint */

    CALL tasy_ajustar_integridade();

    commit;
    CALL wheb_usuario_pck.set_ie_executar_trigger('S');
    CALL gravar_processo_longo(null, null, 0);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE tasy_sincronizar_base (ie_criar_indices_p text default 'S') FROM PUBLIC;

