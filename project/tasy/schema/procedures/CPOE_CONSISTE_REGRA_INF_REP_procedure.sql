-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cpoe_consiste_regra_inf_rep ( cd_estabelecimento_p bigint, nr_atendimento_p bigint, cd_setor_atendimento_p bigint, cd_perfil_p bigint, ie_momento_p text, ie_prescricao_alta_p text, dt_prescricao_p timestamp, nm_usuario_p text, cd_pessoa_fisica_p text, itens_liberar_p text, qt_peso_p bigint default null, ie_autorizacao_p INOUT text DEFAULT NULL, cd_protocolo_p INOUT bigint DEFAULT NULL, ds_mensagem_p INOUT text DEFAULT NULL, ds_mensagem_adic_p INOUT text DEFAULT NULL, ie_acao_p INOUT text DEFAULT NULL, ie_anamnese_p INOUT text DEFAULT NULL, ie_evolucao_p INOUT text DEFAULT NULL, ie_receita_p INOUT text DEFAULT NULL, ie_diagnostico_p INOUT text DEFAULT NULL, ie_escala_indice_p INOUT text DEFAULT NULL, ie_recomendacao_p INOUT text DEFAULT NULL, ie_parecer_p INOUT text DEFAULT NULL, ie_peso_p INOUT text DEFAULT NULL, ie_laudo_sus_p INOUT text DEFAULT NULL, ie_avaliacao_p INOUT text DEFAULT NULL, ie_item_prontuario_p INOUT text DEFAULT NULL, ie_posicionar_pep_p INOUT text DEFAULT NULL, ie_mentor_p INOUT text DEFAULT NULL, nr_seq_protocolo_p INOUT bigint DEFAULT NULL, nr_seq_etapa_p INOUT bigint DEFAULT NULL) AS $body$
DECLARE

			
ie_informacao_w			varchar(10);
ie_informacao_ww		varchar(10);		
ie_acao_w				varchar(10);	
qt_registros_w			bigint;
qt_registros_ww			bigint;
qt_prescricao_ww		bigint;
qt_idade_w				bigint;	
dt_inicio_w				timestamp;
dt_fim_w				timestamp;
dt_entrada_unidade_w	timestamp;
qt_horas_sem_consistir_w	bigint;
ie_origem_proced_w	bigint;
ds_result_tev_w		varchar(4000);
ds_risco_w		varchar(4000);
ds_mensagem_w		varchar(4000);
ds_mensag_w		varchar(4000);
ds_tipo_evol_w		varchar(4000);
ds_recomendacao_w	varchar(100);
cd_recomendacao_w	bigint;
qt_recomendacao_w	bigint;
ds_resultado_w		varchar(4000);
nm_protocolo_w		varchar(4000);
cd_medico_w		varchar(100);
cd_resp_w		varchar(50);
quebra_w			varchar(10)	:= chr(13)||chr(10);
ie_inconsistente_w		boolean := false;
nr_seq_tipo_avaliacao_w	bigint;
dt_entrada_w		timestamp;
ie_diagn_princ_w		varchar(1);
ie_evolucao_dia_w		varchar(1);
cd_convenio_w		bigint;
ie_tipo_atendimento_w	bigint;
qt_prescricoes_w		bigint;
qt_prescricoes_reg_w	bigint;
ie_evolucao_clinica_w	varchar(10);
cd_pessoa_w		varchar(255);
ie_tipo_diagnostico_w	varchar(1);
ie_existe_hemoterapia_w	varchar(1);
nr_prescricao_w		bigint;
cd_pessoa_fisica_w	varchar(10);
nm_pessoa_fisica_w	varchar(60);
dt_nascimento_w		timestamp;
cd_funcao_origem_w	bigint;
ie_sexo_w		varchar(1);
ie_revisar_w		varchar(1);
nr_cpf_w			varchar(11);
ds_retorno_w		varchar(4000);
ie_existe_lab_w		varchar(1);
ie_verif_aval_w		bigint;
nr_seq_proc_interno_w	bigint;
cd_procedimento_w	bigint;
ds_procedimento_w		varchar(300);
ds_proc_parecer_w		varchar(255);
ie_prescritor_w		varchar(1);
ie_so_liberado_w		varchar(20);
nm_usuario_original_w	varchar(20);
ie_funcao_prescritor_w	varchar(20);
qt_parecer_dia_w		bigint;
nr_seq_regra_w		bigint;
qt_minutos_w		double precision;
ds_recomendacoes_w	varchar(4000);
cd_doenca_cid_w		varchar(20);
cont_autorizacao_w	bigint;
ie_tipo_laudo_sus_w	bigint;
hr_inicial_w		varchar(5);
ie_lib_diag_medico_w	varchar(1);
ie_considerar_entrada_setor_w	varchar(1);
data_entrada_setor_w	timestamp;
data_autorizacao_w          	timestamp;
dt_previsto_alta_w		timestamp;
ie_classificao_doenca_w    	varchar(1);
ie_tipo_convenio_w		smallint;
qt_dia_internacao_w	smallint;
ie_posicionar_pep_w	varchar(1);
qt_mov_uti_w		bigint;
nr_seq_texto_w		bigint;

nr_seq_protocolo_w gqa_protocolo_pac.nr_seq_protocolo%type;
nr_seq_prot_etapa_w gqa_protocolo_etapa_pac.nr_seq_etapa%type;
ds_protocolo_w regra_consiste_inf_rep.ds_mensagem%type;

C01 CURSOR FOR
	SELECT	ie_informacao,
			ie_acao,
			nr_seq_tipo_avaliacao,
			coalesce(ie_evolucao_dia,'N'),
			qt_prescricao,
			ie_evolucao_clinica,
			substr(Obter_desc_tipo_evolucao(ie_evolucao_clinica),1,255),
			coalesce(ie_tipo_diagnostico,'P'),
			ds_mensagem,
			coalesce(ie_prescritor,'N'),
			nr_sequencia,
			ie_so_liberado,
			QT_MIN_EVOLUCAO,
			cd_doenca_cid,
			qt_horas_sem_consistir,
			hr_inicial,
			coalesce(ie_considerar_entrada_setor,'N'),
			ie_tipo_laudo_sus,
			ie_classificao_doenca,
			ie_posicionar_pep,
			nr_seq_texto,
      nr_seq_protocolo,
      nr_seq_prot_etapa
	from	regra_consiste_inf_rep a
	where	1 = 1
	and		((coalesce(cd_procedimento::text, '') = '') or
			 ((exists (	SELECT	1
						from	agenda_paciente x,
								agenda w
						where	x.cd_agenda = w.cd_agenda
						and		w.cd_tipo_agenda = 1
						and		x.nr_atendimento = nr_atendimento_p
						and		x.cd_procedimento = a.cd_procedimento
						and		x.ie_origem_proced = a.ie_origem_proced)) and (not exists (select	1
							from	agenda_paciente x,
									agenda w,
									prescr_medica y
							where	x.cd_agenda = w.cd_agenda
							and		w.cd_tipo_agenda = 1
							and		x.nr_atendimento = y.nr_atendimento
							and		x.nr_atendimento = nr_atendimento_p
							and		y.nr_atendimento = nr_atendimento_p
							and		x.cd_procedimento = a.cd_procedimento
							and		x.ie_origem_proced = a.ie_origem_proced
							and		coalesce(y.nr_cirurgia::text, '') = ''
							and		y.dt_prescricao > x.dt_agendamento))))	
	and		((coalesce(cd_material::text, '') = '') or (cpoe_get_info_liberacao(itens_liberar_p, a.cd_material, null, null, null, 'M') = 'S'))	
	and 	((coalesce(cd_classe_material::text, '') = '') or (cpoe_get_info_liberacao(itens_liberar_p, null, a.cd_classe_material, null, null, 'C') = 'S'))
	and		((coalesce(cd_subgrupo_material::text, '') = '') or (cpoe_get_info_liberacao(itens_liberar_p, null, null, a.cd_subgrupo_material, null, 'S') = 'S'))
	and		((coalesce(cd_grupo_material::text, '') = '') or (cpoe_get_info_liberacao(itens_liberar_p, null, null, null, a.cd_grupo_material, 'G') = 'S'))
	and 	((coalesce(cd_area_procedimento::text, '') = '') or (cpoe_get_info_liberacao(itens_liberar_p, null, null, null, null, 'AP', a.cd_area_procedimento, null, null, null, null, nr_atendimento_p) = 'S'))
	and 	((coalesce(cd_especialidade::text, '') = '') or (cpoe_get_info_liberacao(itens_liberar_p, null, null, null, null, 'EP', null, a.cd_especialidade, null, null, null, nr_atendimento_p) = 'S'))
	and 	((coalesce(cd_grupo_proc::text, '') = '') or (cpoe_get_info_liberacao(itens_liberar_p, null, null, null, null, 'GP', null, null, a.cd_grupo_proc, null, null, nr_atendimento_p) = 'S'))
	and 	((coalesce(nr_seq_proc_interno::text, '') = '') or (cpoe_get_info_liberacao(itens_liberar_p, null, null, null, null, 'PI', null, null, null, a.nr_seq_proc_interno, null, nr_atendimento_p) = 'S'))
	and 	((coalesce(cd_procedimento_regra::text, '') = '') or (cpoe_get_info_liberacao(itens_liberar_p, null, null, null, null, 'PR', null, null, null, null, a.cd_procedimento_regra, nr_atendimento_p) = 'S'))	
	and		coalesce(cd_setor_atendimento,coalesce(cd_setor_atendimento_p,0)) = coalesce(cd_setor_atendimento_p,0)
	and		coalesce(cd_perfil,coalesce(cd_perfil_p,0)) = coalesce(cd_perfil_p,0)
	and		coalesce(cd_convenio,coalesce(cd_convenio_w,0)) = coalesce(cd_convenio_w,0)
	and		coalesce(ie_tipo_atendimento, coalesce(ie_tipo_atendimento_w,0)) = coalesce(ie_tipo_atendimento_w,0)
	and		coalesce(cd_pessoa_fisica, coalesce(cd_pessoa_w,0)) = coalesce(cd_pessoa_w,0)
	and		coalesce(ie_considerar_autor_conv,'N') 	= coalesce(ie_autorizacao_p,'N')
	and		coalesce(ie_funcao_prescritor,coalesce(ie_funcao_prescritor_w,'XPTO')) = coalesce(ie_funcao_prescritor_w,'XPTO')
	and		((coalesce(ie_prescricao_alta,'A') = 'A') or (ie_prescricao_alta = ie_prescricao_alta_p))
	and		((coalesce(ie_prescritor_resp,'N') <> 'S') or (cd_pessoa_w = cd_resp_w))
	and		((coalesce(qt_idade_min::text, '') = '') or (qt_idade_w >= qt_idade_min))
	and		((coalesce(qt_idade_max::text, '') = '') or (qt_idade_w <= qt_idade_max))
	and		coalesce(ie_situacao,'N')	= 'A'
	and		cd_estabelecimento = cd_estabelecimento_p
	and		ie_momento = ie_momento_p
	group by 
		ie_informacao,
		ie_acao,
		coalesce(cd_convenio,0),
		substr(Obter_desc_tipo_evolucao(ie_evolucao_clinica),1,255),
		ie_evolucao_clinica,
		nr_seq_tipo_avaliacao,
		ds_mensagem,
		coalesce(ie_evolucao_dia,'N'),
		qt_prescricao,
		coalesce(nr_seq_apresent,999),
		ie_so_liberado,
		qt_horas_sem_consistir,
		ie_tipo_laudo_sus,
		coalesce(ie_tipo_diagnostico,'P'),
		coalesce(ie_prescritor,'N'),
		nr_sequencia,
		QT_MIN_EVOLUCAO,
		cd_doenca_cid,
		hr_inicial,
		ie_considerar_entrada_setor,
		ie_classificao_doenca,
		ie_posicionar_pep,
		nr_seq_texto,
    nr_seq_protocolo,
    nr_seq_prot_etapa
	order by 
			coalesce(nr_seq_apresent,999) desc;

c02 CURSOR FOR
	SELECT	a.cd_procedimento,
			a.nr_seq_proc_interno,
			substr(Obter_desc_prescr_proc(a.cd_procedimento,a.ie_origem_proced, a.nr_seq_proc_interno),1,240),
			a.ie_origem_proced
	from	procedimento_prescricao b,
			prescr_procedimento a
	where 	/*a.nr_prescricao 	= nr_prescricao_p
	and		*/
a.cd_procedimento	= b.cd_procedimento
	and		a.ie_origem_proced	= b.ie_origem_proced
	and		(b.nr_seq_avaliacao IS NOT NULL AND b.nr_seq_avaliacao::text <> '') 
	and 	coalesce(a.dt_suspensao::text, '') = ''
	and 	a.ie_suspenso <> 'S';
	
c03 CURSOR FOR
	SELECT	distinct a.cd_recomendacao,
			 substr(obter_desc_tipo_recomendacao(a.cd_recomendacao),1,80)
	from	consiste_inf_rep_evol a
	where	a.nr_seq_regra    = nr_seq_regra_w;

c04 CURSOR FOR
  SELECT e.nr_sequencia
    from gqa_protocolo_pac       p
        ,gqa_protocolo_etapa_pac e
   where p.nr_sequencia = e.nr_seq_prot_pac
     and p.nr_atendimento = coalesce(nr_atendimento_p,p.nr_atendimento)
     and p.cd_pessoa_fisica = cd_pessoa_fisica_w
     and p.ie_situacao = 'A'
     and p.nr_seq_protocolo = nr_seq_protocolo_w
     and e.nr_seq_etapa = nr_seq_prot_etapa_w
     and (p.dt_liberacao IS NOT NULL AND p.dt_liberacao::text <> '')
     and coalesce(p.dt_inativacao::text, '') = ''
     and coalesce(p.dt_termino::text, '') = ''
     and coalesce(e.dt_cancelar_usuario::text, '') = ''
     and (e.dt_fim IS NOT NULL AND e.dt_fim::text <> '');
  r_c04 c04%rowtype;

c05 CURSOR FOR
  SELECT e.nr_sequencia
    from gqa_protocolo_pac       p
        ,gqa_protocolo_etapa_pac e
   where p.nr_sequencia = e.nr_seq_prot_pac       
     and p.nr_atendimento = coalesce(nr_atendimento_p,p.nr_atendimento)
     and p.cd_pessoa_fisica = cd_pessoa_fisica_w
     and p.ie_situacao = 'A'
     and p.nr_seq_protocolo = nr_seq_protocolo_w
     and e.nr_seq_etapa = nr_seq_prot_etapa_w
     and (p.dt_liberacao IS NOT NULL AND p.dt_liberacao::text <> '')
     and coalesce(p.dt_inativacao::text, '') = ''
     and coalesce(p.dt_termino::text, '') = ''
     and coalesce(e.dt_cancelar_usuario::text, '') = ''
     and (e.dt_fim IS NOT NULL AND e.dt_fim::text <> '')
     and ((coalesce(qt_minutos_w::text, '') = '') or (e.dt_fim > (clock_timestamp() - qt_minutos_w/1440)));
  r_c05 c05%rowtype;


BEGIN

ie_acao_p				:= 'A';
ie_item_prontuario_p	:= '';
ds_mensagem_p			:= '';
ds_mensagem_adic_p		:= '';


select	count(*)
into STRICT	qt_registros_w
from	regra_consiste_inf_rep where		coalesce(ie_situacao,'A') = 'A' LIMIT 1;

if (qt_registros_w = 0) then
	return;
end if;

if (coalesce(nr_atendimento_p,0) > 0) then
	begin
	select	max(cd_pessoa_fisica),
			max(dt_entrada),
			max(ie_tipo_convenio)
	into STRICT	cd_pessoa_fisica_w,
			dt_entrada_w,
			ie_tipo_convenio_w
	from	atendimento_paciente
	where	nr_atendimento	= nr_atendimento_p;
	end;
else
	begin
	cd_pessoa_fisica_w	:= cd_pessoa_fisica_p;
	end;
end if;

if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
	begin
	data_entrada_setor_w := obter_data_entrada_setor(nr_atendimento_p);
	
	select	coalesce(max(ie_lib_diag_medico),'N')
	into STRICT	ie_lib_diag_medico_w
	from	parametro_medico
	where	cd_estabelecimento = cd_estabelecimento_p;

	qt_idade_w	:= Obter_Idade_PF(cd_pessoa_fisica_p, clock_timestamp(), 'A');
	cd_pessoa_w	:= Obter_pessoa_fisica_usuario(nm_usuario_p,'C');	
	cd_resp_w	:= Obter_medico_resp_atend(nr_atendimento_p,'C');
	
	select	max(ie_tipo_evolucao)
	into STRICT	ie_funcao_prescritor_w
	from	usuario
	where	nm_usuario = nm_usuario_p;
	
	ie_anamnese_p := 'N';
	
	select	coalesce(max(cd_convenio),0),
			max(ie_tipo_atendimento)
	into STRICT	cd_convenio_w,
			ie_tipo_atendimento_w
	from	resumo_atendimento_paciente_v
	where	nr_atendimento	= nr_atendimento_p;
	
	ie_inconsistente_w	:= false;
	nm_usuario_original_w := nm_usuario_p;
	
	select max(cd_medico_resp)
	into STRICT cd_medico_w
	from atendimento_paciente
	where	nr_atendimento = nr_atendimento_p;	

	open C01;
	loop
	fetch C01 into	
		ie_informacao_w,
		ie_acao_w,
		nr_seq_tipo_avaliacao_w,
		ie_evolucao_dia_w,
		qt_prescricoes_reg_w,
		ie_evolucao_clinica_w,
		ds_tipo_evol_w,
		ie_tipo_diagnostico_w,
		ds_mensag_w,
		ie_prescritor_w,
		nr_seq_regra_w,
		ie_so_liberado_w,
		qt_minutos_w,
		cd_doenca_cid_w,
		qt_horas_sem_consistir_w,
		hr_inicial_w,
		ie_considerar_entrada_setor_w,
		ie_tipo_laudo_sus_w,
		ie_classificao_doenca_w,
		ie_posicionar_pep_w,
		nr_seq_texto_w,
    nr_seq_protocolo_w,
    nr_seq_prot_etapa_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		dt_inicio_w := to_date(to_char(clock_timestamp(),'dd/mm/yyyy')||' '||hr_inicial_w||':00','dd/mm/yyyy hh24:mi:ss');
		
		if (dt_inicio_w > clock_timestamp()) then
			dt_inicio_w := to_date(to_char(clock_timestamp() - interval '1 days','dd/mm/yyyy')||' '||hr_inicial_w||':00','dd/mm/yyyy hh24:mi:ss');
		else
			dt_inicio_w := to_date(to_char(clock_timestamp(),'dd/mm/yyyy')||' '||hr_inicial_w||':00','dd/mm/yyyy hh24:mi:ss');
	    end if;
		
		dt_fim_w	:= (dt_inicio_w + 1) - 1/86400;
		
		ie_inconsistente_w	:= false;	
		
		select	count(*)
		into STRICT	qt_prescricoes_w
		from	prescr_medica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and		nr_atendimento		= coalesce(nr_atendimento_p,nr_atendimento);
			
		if (ie_momento_p = 'N') then
			qt_prescricoes_w := qt_prescricoes_w  + 1;
		end if;

		if (qt_prescricoes_w >= coalesce(qt_prescricoes_reg_w,0)) then
			begin
			if (ie_informacao_w 	= 'JS') and (ie_momento_p		= 'L') 	and (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then
				begin
				
				select	count(a.ie_tipo_autorizacao)
				into STRICT	cont_autorizacao_w
				from	regra_gerar_autorizacao a,
					autorizacao_convenio b,
					paciente_justificativa c where		a.cd_convenio	 	= b.cd_convenio
				and		a.ie_evento 	 	= 'LP'
				and		a.cd_convenio	 	= obter_convenio_atendimento(b.nr_atendimento)
				and 	b.nr_atendimento 	= nr_atendimento_p
				--and		b.nr_prescricao  	= nr_prescricao_p
				and		c.nr_seq_autorizacao 	= b.nr_seq_autorizacao
				and		coalesce(c.dt_liberacao::text, '') = ''
				and		c.nr_atendimento 	= nr_atendimento_p LIMIT 1;				

				if (cont_autorizacao_w = 0) then
					if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
						ds_mensagem_w := ds_mensag_w||quebra_w;
					else
						ds_mensagem_w := wheb_mensagem_pck.get_texto(306667, null) || quebra_w; -- A justificativa/Solicitacao do medico nao foi criada/liberada.
					end if;	
					ie_autorizacao_p := 'S';
				end if;
				ie_inconsistente_w 	:= true;
				ie_informacao_ww	:= ie_informacao_w;
				end;
			
			elsif (coalesce(qt_horas_sem_consistir_w,0) = 0) or
				((dt_entrada_w < clock_timestamp() - qt_horas_sem_consistir_w/24) and (ie_considerar_entrada_setor_w = 'N')) or
				((ie_considerar_entrada_setor_w = 'S') and (data_entrada_setor_w < clock_timestamp() - qt_horas_sem_consistir_w/24)) then
				begin

				if (ie_informacao_w	= 'AP') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
							apache a where		a.nr_atendimento	= b.nr_atendimento
					and		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w LIMIT 1;
					

					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306666, null) || quebra_w; -- Nao foi cadastrada a escala Apache II para este atendimento.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_escala_indice_p	:= 'AP';
					end if;
					end;
				elsif (ie_informacao_w	= 'PIM') then
					begin
					
					select	max(x.dt_entrada_unidade)
					into STRICT	dt_entrada_unidade_w
					from	atend_paciente_unidade x,
						atendimento_paciente z
					where	x.nr_atendimento	= z.nr_atendimento
					and	z.nr_atendimento 	= coalesce(nr_atendimento_p,z.nr_atendimento)
					and	z.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	x.ie_passagem_setor = 'N';
					
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
						escala_pim2 a where	a.nr_atendimento	= b.nr_atendimento
					and	b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and	coalesce(dt_inativacao::text, '') = ''
					and	dt_liberacao 		>= dt_entrada_unidade_w
					and	b.cd_pessoa_fisica	= cd_pessoa_fisica_w LIMIT 1;
					
					if (qt_registros_w	= '0')  then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306665, null) || quebra_w; --  Nao foi cadastrada a escala PIM 2 - Pediatric index of mortality para este atendimento.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_escala_indice_p	:= 'PIM';
					end if;
					end;	
				elsif (ie_informacao_w	= 'SAPS') then
					begin
					
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
							pe_prescricao a
					where	a.nr_atendimento	= b.nr_atendimento
					and		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and		coalesce(dt_inativacao::text, '') = ''
					and		a.ie_tipo = 'SAPS';

					select 	count(*)
					into STRICT   	qt_mov_uti_w
					from	atend_paciente_unidade a,
							setor_atendimento b					
					where 	a.nr_atendimento 	= nr_atendimento_p
					and		a.cd_setor_atendimento = b.cd_setor_atendimento
					and		b.cd_classif_setor  = 4;										
					
					if	((qt_registros_w	= '0') or (qt_mov_uti_w > qt_registros_w)) then
					
						select	count(*)
						into STRICT	qt_registros_w
						from	escala_saps3
						where	nr_atendimento = nr_atendimento_p
						and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
						and		coalesce(dt_inativacao::text, '') = '';
						
						if	((qt_registros_w	= '0') or (qt_mov_uti_w > qt_registros_w)) then
							if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
								ds_mensagem_w := ds_mensag_w||quebra_w;
							else
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306664, null) ||quebra_w; -- Nao foi cadastrada a escala SAPS III para este atendimento.
							end if;
							ie_inconsistente_w	:= true;
							ie_informacao_ww	:= ie_informacao_w;
							ie_escala_indice_p	:= 'SAPS';
						end if;
					end if;
					end;	
				elsif (ie_informacao_w	= 'A') then
					ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_anamnese_p := 'S';
					
					--Caso alterar rotina abaixo, alterar no ie_informacoes_w = 'AE' tambem
					begin
					
					select	count(*)
					into STRICT	qt_registros_w
					from	anamnese_paciente where		cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	nr_atendimento		= coalesce(nr_atendimento_p,nr_atendimento)
					and	((ie_evolucao_dia_w = 'N')  or
						 ((trunc(dt_ananmese,'dd') = trunc(dt_prescricao_p,'dd')) and (ie_evolucao_dia_w = 'S')) or
						 ((trunc(dt_ananmese,'dd') = trunc(clock_timestamp(),'dd')) and (ie_evolucao_dia_w = 'T')) or
						 (dt_ananmese between dt_inicio_w and dt_fim_w AND ie_evolucao_dia_w = 'R'))
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and	coalesce(dt_inativacao::text, '') = '' LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306663, null) || quebra_w; -- Anamnese do paciente nao foi criada/liberada.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_anamnese_p := 'S';
					end if;
					end;
					
					
				elsif (ie_informacao_w	= 'S') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
							escala_sofa a where		b.nr_atendimento	= a.nr_atendimento
					and		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		trunc(a.dt_avaliacao,'dd') = trunc(clock_timestamp(),'dd') LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306662, null) || quebra_w; -- Nao foi cadastrada a escala SOFA para este atendimento no dia.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_escala_indice_p	:= 'S';
					end if;
					end;
				elsif (ie_informacao_w	= 'SNA') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
							escala_snapii_snappeii a where		b.nr_atendimento	= a.nr_atendimento
					and		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and		coalesce(dt_inativacao::text, '') = '' LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306661, null) || quebra_w; -- Nao foi cadastrada a escala SNAP II e SNAP-PE II para este atendimento no dia.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_escala_indice_p	:= 'SNA';
					end if;
				end;
				elsif (ie_informacao_w	= 'PA') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b where		cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		(b.dt_previsto_alta IS NOT NULL AND b.dt_previsto_alta::text <> '') LIMIT 1;
					
					if (qt_registros_w > 0) then
						select	max(b.dt_previsto_alta)
						into STRICT		dt_previsto_alta_w
						from		atendimento_paciente b
						where	cd_pessoa_fisica	= cd_pessoa_fisica_w
						and		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
						and		(b.dt_previsto_alta IS NOT NULL AND b.dt_previsto_alta::text <> '');
					elsif (nr_atendimento_p > 0) then
						
						select	count(*)
						into STRICT		qt_registros_w
						from		atend_previsao_alta b where		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
						and		(b.dt_previsto_alta IS NOT NULL AND b.dt_previsto_alta::text <> '')
						and		(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
						and     	coalesce(ie_situacao,'A' ) = 'A' LIMIT 1;
						
						if (qt_registros_w > 0) then
							select	max(b.dt_previsto_alta)
							into STRICT		dt_previsto_alta_w
							from		atend_previsao_alta b
							where 	b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
							and		(b.dt_previsto_alta IS NOT NULL AND b.dt_previsto_alta::text <> '')
							and		(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> '')
							and     	coalesce(ie_situacao,'A' ) = 'A';
						end if;						
					end if;
										
					if	((qt_registros_w	= '0') or (dt_previsto_alta_w < trunc(clock_timestamp()))) then
						
						 
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						elsif (qt_registros_w	= '0') then
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306660, null) ||quebra_w; -- Nao foi dada previsao de alta para este paciente.
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306659, null) ||quebra_w; -- e necessario informar a nova previsao de alta para este paciente.
						end if;
						ie_inconsistente_w	:= true;
						ie_item_prontuario_p := 'PRA';
						ie_informacao_ww	:= ie_informacao_w;
					end if;
					end;
				elsif (ie_informacao_w	= 'E') then
					--Caso alterar rotina abaixo, alterar no ie_informacoes_w = 'AE' tambem
					begin
					
					select	count(*)
					into STRICT	qt_registros_ww
					from	consiste_inf_rep_evol where		nr_seq_regra = nr_seq_regra_w LIMIT 1;
					
					if (qt_registros_ww = 0) then
						select	count(*)
						into STRICT	qt_registros_w
						from	evolucao_paciente a where		a.cd_pessoa_fisica	= cd_pessoa_fisica_w
						and		(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
						and		coalesce(a.dt_inativacao::text, '') = ''
						and		((coalesce(ie_evolucao_clinica_w::text, '') = '') or (a.ie_evolucao_clinica = ie_evolucao_clinica_w))
						and		((ie_evolucao_dia_w = 'N')  or
								 ((trunc(a.dt_evolucao,'dd') = trunc(dt_prescricao_p,'dd')) and (ie_evolucao_dia_w = 'S')) or
								 ((trunc(a.dt_evolucao,'dd') = trunc(clock_timestamp(),'dd')) and (ie_evolucao_dia_w = 'T')) or
								 (a.dt_evolucao between dt_inicio_w and dt_fim_w AND ie_evolucao_dia_w = 'R'))
						and     	((coalesce(qt_minutos_w::text, '') = '') or (a.dt_liberacao > (clock_timestamp() - qt_minutos_w/1440)))
						and		((ie_prescritor_w = 'N') or (a.nm_usuario = nm_usuario_p) or (cd_medico_w = a.cd_medico))
						and	((coalesce(a.nr_atendimento::text, '') = '') or (coalesce(nr_atendimento_p::text, '') = '') or (exists (	SELECT 1
										from   atendimento_paciente b
										where  b.cd_pessoa_fisica = cd_pessoa_fisica_w
										and	   b.nr_atendimento   = a.nr_atendimento
										and    coalesce(b.dt_alta::text, '') = ''))) LIMIT 1;
					else
						select	count(*)
						into STRICT	qt_registros_w
						from	evolucao_paciente a where		a.cd_pessoa_fisica	= cd_pessoa_fisica_w
						and		(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
						and	coalesce(a.dt_inativacao::text, '') = ''
						and	((ie_evolucao_dia_w = 'N')  or
							 ((trunc(a.dt_evolucao,'dd') = trunc(dt_prescricao_p,'dd')) and (ie_evolucao_dia_w = 'S')) or
							 ((trunc(a.dt_evolucao,'dd') = trunc(clock_timestamp(),'dd')) and (ie_evolucao_dia_w = 'T')) or
							 (a.dt_evolucao between dt_inicio_w and dt_fim_w AND ie_evolucao_dia_w = 'R'))
						and     ((coalesce(qt_minutos_w::text, '') = '') or (dt_liberacao > (clock_timestamp() - qt_minutos_w/1440)))
						and	((ie_prescritor_w = 'N') or (nm_usuario = nm_usuario_p) or (cd_medico_w = CD_MEDICO))
						and 	exists (SELECT	1
								from	consiste_inf_rep_evol b
								where	b.nr_seq_regra = nr_seq_regra_w
								and	b.ie_evolucao_clinica = a.ie_evolucao_clinica)
						and	((coalesce(a.nr_atendimento::text, '') = '') or (coalesce(nr_atendimento_p::text, '') = '') or (exists (	Select 1
										from   atendimento_paciente b
										where  b.cd_pessoa_fisica = cd_pessoa_fisica_w
										and	   b.nr_atendimento   = a.nr_atendimento
										and    coalesce(b.dt_alta::text, '') = ''))) LIMIT 1;
					end if;
	
					if (qt_registros_w	= '0') then
						begin
						if (coalesce(ds_tipo_evol_w::text, '') = '') then
							if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
								ds_mensagem_w := ds_mensag_w||quebra_w;
							else
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306656, null); -- Evolucao do paciente nao foi criada/liberada.
							end if;
						else
							if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
								ds_mensagem_w := ds_mensag_w||quebra_w;
							else
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306658, null) || ds_tipo_evol_w; -- Evolucao do paciente nao foi criada/liberada. Tipo evolucao: 
							end if;
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_evolucao_p		:= 'S';
						end;
					end if;
					end;
				elsif (ie_informacao_w = 'AE') then
					--Parte do anamnese
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	anamnese_paciente where		cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	nr_atendimento		= coalesce(nr_atendimento_p,nr_atendimento)
					and	((ie_evolucao_dia_w = 'N')  or
						 ((trunc(dt_ananmese,'dd') = trunc(dt_prescricao_p,'dd')) and (ie_evolucao_dia_w = 'S')) or
						 ((trunc(dt_ananmese,'dd') = trunc(clock_timestamp(),'dd')) and (ie_evolucao_dia_w = 'T')) or
						 (dt_ananmese between dt_inicio_w and dt_fim_w AND ie_evolucao_dia_w = 'R'))				
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and	coalesce(dt_inativacao::text, '') = '' LIMIT 1;

					if (qt_registros_w = '0') then
						--Parte da evolucao
						begin

						select max(cd_medico_resp)
						into STRICT cd_medico_w
						from atendimento_paciente
						where	nr_atendimento = nr_atendimento_p;						
						
						nm_usuario_original_w := nm_usuario_p;
				
						select	count(*)
						into STRICT	qt_registros_ww
						from	consiste_inf_rep_evol where		nr_seq_regra = nr_seq_regra_w LIMIT 1;

						if (qt_registros_ww = 0) then
							begin
							select	count(*)
							into STRICT	qt_registros_w
							from	evolucao_paciente where		cd_pessoa_fisica	= cd_pessoa_fisica_w
							and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
							and	coalesce(dt_inativacao::text, '') = ''
							and	((coalesce(ie_evolucao_clinica_w::text, '') = '') or (ie_evolucao_clinica = ie_evolucao_clinica_w))
							and	((ie_evolucao_dia_w = 'N')  or
								 ((trunc(dt_evolucao,'dd') = trunc(dt_prescricao_p,'dd')) and (ie_evolucao_dia_w = 'S')) or
								 ((trunc(dt_evolucao,'dd') = trunc(clock_timestamp(),'dd')) and (ie_evolucao_dia_w = 'T')) or
								 (dt_evolucao between dt_inicio_w and dt_fim_w AND ie_evolucao_dia_w = 'R'))
							and     ((coalesce(qt_minutos_w::text, '') = '') or (dt_liberacao > (clock_timestamp() - qt_minutos_w/1440)))
							and	((ie_prescritor_w = 'N') or (nm_usuario = nm_usuario_p) or (nm_usuario = nm_usuario_original_w) or (cd_medico_w = cd_medico)) LIMIT 1;
							end;
						else
							begin
							select	count(*)
							into STRICT	qt_registros_w
							from	evolucao_paciente a where		a.cd_pessoa_fisica	= cd_pessoa_fisica_w
							and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
							and	coalesce(a.dt_inativacao::text, '') = ''
							and	((ie_evolucao_dia_w = 'N')  or
								 ((trunc(a.dt_evolucao,'dd') = trunc(dt_prescricao_p,'dd')) and (ie_evolucao_dia_w = 'S')) or
								 ((trunc(a.dt_evolucao,'dd') = trunc(clock_timestamp(),'dd')) and (ie_evolucao_dia_w = 'T')) or
								 (a.dt_evolucao between dt_inicio_w and dt_fim_w AND ie_evolucao_dia_w = 'R'))
							and     ((coalesce(qt_minutos_w::text, '') = '') or (dt_liberacao > (clock_timestamp() - qt_minutos_w/1440)))
							and	((ie_prescritor_w = 'N') or (nm_usuario = nm_usuario_p) or (nm_usuario = nm_usuario_original_w) or (cd_medico_w = CD_MEDICO))
							and 	exists (SELECT	1
									from	consiste_inf_rep_evol b
									where	b.nr_seq_regra = nr_seq_regra_w
									and	b.ie_evolucao_clinica = a.ie_evolucao_clinica) LIMIT 1;
							end;
						end if;

						if (qt_registros_w = '0') then
							begin
							if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
								ds_mensagem_w := ds_mensag_w||quebra_w;
							else
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306657, null); -- Nao foi criada/liberada uma evolucao ou anamnese para o paciente.
							end if;

							ie_inconsistente_w	:= true;
							ie_informacao_ww	:= ie_informacao_w;
							end;
						end if;
						end;
					end if;
					end;
				elsif (ie_informacao_w	= 'ED') then
					begin
					if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
						ds_mensagem_w := ds_mensag_w||quebra_w;
					else
						ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306656, null); -- Evolucao do paciente nao foi criada/liberada.
					end if;
					ie_evolucao_p		:= 'S';
					ie_inconsistente_w	:= true;
					ie_informacao_ww	:= ie_informacao_w;				
					end;
				elsif (ie_informacao_w	= 'R') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	med_receita where		nr_atendimento		= coalesce(nr_atendimento_p,nr_atendimento)
					and	cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306655, null); -- Receita do paciente nao foi criada/liberada.
						end if;
						ie_receita_p 		:= 'S';
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
					end if;
					end;
				elsif (ie_informacao_w	= 'D') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	diagnostico_doenca a,
							atendimento_paciente b where		((coalesce(cd_doenca_cid_w::text, '') = '') or (a.CD_DOENCA = cd_doenca_cid_w))
					and		((ie_evolucao_dia_w = 'N')  or
							 ((ie_lib_diag_medico_w = 'N') and
							  (((trunc(dt_diagnostico,'dd') = trunc(dt_prescricao_p,'dd')) and (ie_evolucao_dia_w = 'S')) or
							   ((trunc(dt_diagnostico,'dd') = trunc(clock_timestamp(),'dd')) and (ie_evolucao_dia_w = 'T')) or
							   (dt_diagnostico between dt_inicio_w and dt_fim_w AND ie_evolucao_dia_w = 'R'))) or
							 ((ie_lib_diag_medico_w = 'S') and
							  (((trunc(dt_liberacao,'dd') = trunc(dt_prescricao_p,'dd')) and (ie_evolucao_dia_w = 'S')) or
							   ((trunc(dt_liberacao,'dd') = trunc(clock_timestamp(),'dd')) and (ie_evolucao_dia_w = 'T')) or
							   (dt_liberacao between dt_inicio_w and dt_fim_w AND ie_evolucao_dia_w = 'R'))))
					and		((ie_tipo_diagnostico_w = 'A') or (a.ie_tipo_diagnostico = CASE WHEN ie_tipo_diagnostico_w='R' THEN  1  ELSE 2 END ))
					and		((coalesce(ie_so_liberado_w,'N') = 'N') or (a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> ''))
					and		a.nr_atendimento	= b.nr_atendimento
					and		coalesce(a.dt_inativacao::text, '') = ''
					and     ((coalesce(ie_classificao_doenca_w::text, '') = '') or (a.ie_classificacao_doenca = ie_classificao_doenca_w))
					and		a.nr_atendimento	= coalesce(nr_atendimento_p,a.nr_atendimento)
					and		b.nr_atendimento	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							if (obter_funcao_ativa = 950) then
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306654, 'PARAM=172'); -- Nao existe diagnostico informado para o paciente e nao sera possivel liberar a prescricao sem incluir esta informacao. O PEP sera aberto automaticamente para que seja informado diagnostico (Parametro [#@PARAM#@])
							else
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306654, 'PARAM=761'); -- Nao existe diagnostico informado para o paciente e nao sera possivel liberar a prescricao sem incluir esta informacao. O PEP sera aberto automaticamente para que seja informado diagnostico (Parametro [#@PARAM#@])
							end if;	
						end if;
						
						ie_diagnostico_p	:= 'S';
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
					end if;
					end;
				elsif (ie_informacao_w	= 'DP') then
					begin
					select	coalesce(max('S'),'N')
					into STRICT	ie_diagn_princ_w
					from	atendimento_paciente b,
						diagnostico_doenca a where		a.nr_atendimento	= b.nr_atendimento
					and	a.nr_atendimento	= coalesce(nr_atendimento_p,a.nr_atendimento)
					and	b.nr_atendimento	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and	b.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	coalesce(a.dt_inativacao::text, '') = ''
					and	substr(obter_cod_tipo_diagnostico(a.nr_atendimento,a.dt_diagnostico),1,1) = '2' LIMIT 1;
					
					if (ie_diagn_princ_w = 'N') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306653, null); -- Favor informar diagnostico definitivo.
						end if;
						ie_inconsistente_w	:= true;
						ie_diagnostico_p	:= 'S';
						ie_informacao_ww	:= ie_informacao_w;
					end if;
					end;
				elsif (ie_informacao_w	= 'O') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
						atendimento_alta a where		a.nr_atendimento	= b.nr_atendimento
					and	a.nr_atendimento	= coalesce(nr_atendimento_p,a.nr_atendimento)
					and	b.nr_atendimento	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and	b.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '') LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306652, null); -- Atendimento sem orientacao de alta cadastrada.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_item_prontuario_p := 'OA';							
					end if;
					end;
				elsif (ie_informacao_w	= 'AV') then
					begin
					ie_avaliacao_p	:= 'N';
					select	count(*)
					into STRICT	qt_registros_w
					from	med_avaliacao_paciente where		nr_atendimento		= coalesce(nr_atendimento_p,nr_atendimento)
					and	cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and	coalesce(dt_inativacao::text, '') = ''
					and ((coalesce(qt_minutos_w::text, '') = '') or (dt_liberacao > (clock_timestamp() - qt_minutos_w/1440)))
					and	((coalesce(nr_seq_tipo_avaliacao_w::text, '') = '')or (nr_seq_tipo_avaliacao	= nr_seq_tipo_avaliacao_w)) LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306651, ';QUEBRA_P=' || quebra_w); -- Atendimento sem Avaliacao cadastrada/Liberada.
							if (nr_seq_tipo_avaliacao_w IS NOT NULL AND nr_seq_tipo_avaliacao_w::text <> '') then
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306650, 'DS_AVALIACAO=' || substr(obter_descricao_padrao('MED_TIPO_AVALIACAO','DS_TIPO', NR_SEQ_TIPO_AVALIACAO_w),1,100)) || quebra_w; -- Avaliacao necessaria: #@DS_AVALIACAO#@
							end if;
						end if;
						ie_avaliacao_p		:= 'S';
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
					end if;
					end;
				elsif (ie_informacao_w	= 'P') then
					begin
					Select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_sinal_vital where		(qt_peso IS NOT NULL AND qt_peso::text <> '')
					and	nr_atendimento	= coalesce(nr_atendimento_p,nr_atendimento)
					and	cd_paciente	= cd_pessoa_fisica_w
					and	ie_situacao = 'A'
					and	coalesce(IE_RN,'N')	= 'N'
					and 	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') LIMIT 1;
					
					if (qt_registros_w	= 0) then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306649, null) || quebra_w; -- Atendimento sem informacao de peso nos Sinais Vitais cadastrada/liberada.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
					end if;
					end;
				elsif (ie_informacao_w	= 'PR') and (coalesce(qt_peso_p,0) = 0) then
					begin
					if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
						ds_mensagem_w := ds_mensag_w||quebra_w;
					else
						ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306648, null) || quebra_w; -- Prescricao sem peso informado.
					end if;
					ie_peso_p 		:= 'S';
					ie_inconsistente_w	:= true;
					ie_informacao_ww	:= ie_informacao_w;
					end;
				elsif (ie_informacao_w	 = 'PP') then
					begin
					
					select	count(*)
					into STRICT	qt_registros_w
					from	protocolo x where		x.ie_obrigatorio = 'S' LIMIT 1;
						
					if (qt_registros_w > 0) then
						
						select 	count(*)
						into STRICT	qt_registros_w
						from 	prescr_medica a where		nr_atendimento 		= coalesce(nr_atendimento_p,nr_atendimento)
						and	cd_pessoa_fisica	= cd_pessoa_fisica_w
						and	(cd_protocolo IS NOT NULL AND cd_protocolo::text <> '')
						and	cd_protocolo in (SELECT	cd_protocolo
									from	protocolo x
									where	x.cd_protocolo = a.cd_protocolo
									and	x.ie_obrigatorio = 'S') LIMIT 1;
					
						if (qt_registros_w = 0 ) then
						
							select	max(nm_protocolo),
								max(cd_protocolo)
							into STRICT	nm_protocolo_w,
								cd_protocolo_p
							from	protocolo x
							where	x.ie_obrigatorio = 'S';

							if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
								ds_mensagem_w := ds_mensag_w||quebra_w;
							else
								ds_mensagem_w 		:= ds_mensagem_w || wheb_mensagem_pck.get_texto(306647, null) || NM_PROTOCOLO_w || quebra_w; -- Este atendimento nao possui prescricoes geradas a partir de um Protocolo obrigatorio. Protocolo: 
							end if;
							ie_inconsistente_w	:= true;
							ie_informacao_ww	:= ie_informacao_w;
						end if;
					end if;
					end;
				elsif (ie_informacao_w	= 'LS') and
						((coalesce(qt_horas_sem_consistir_w,0) = 0) or (dt_entrada_w < clock_timestamp() - qt_horas_sem_consistir_w/24)) then
					begin
					
					SELECT	COUNT(*)
					INTO STRICT	qt_registros_w
					FROM	atendimento_paciente b,
							sus_laudo_paciente a WHERE		a.nr_atendimento	= b.nr_atendimento
					and		a.nr_atendimento	= coalesce(nr_atendimento_p,a.nr_atendimento)
					and		b.nr_atendimento	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		((coalesce(ie_tipo_laudo_sus_w::text, '') = '') or (a.ie_tipo_laudo_sus = ie_tipo_laudo_sus_w))
					and 	((coalesce(qt_minutos_w::text, '') = '') or (a.dt_liberacao > (clock_timestamp() - qt_minutos_w/1440))) LIMIT 1;
					
					IF (qt_registros_w	= 0) THEN
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306646, null) || quebra_w; -- Atendimento sem Laudo SUS informado/liberado.
						end if;
						ie_laudo_sus_p		:= 'S';
						ie_inconsistente_w	:= TRUE;
						ie_informacao_ww	:= ie_informacao_w;
					END IF;	
					end;
				elsif (ie_informacao_w	= 'TEV') then
					begin
					select	max(obter_valor_dominio(2900,a.IE_RISCO)),
							max(a.ds_resultado)
					into STRICT	ds_risco_w,
							ds_resultado_w
					from	atendimento_paciente c,
							escala_tev a
					where	a.nr_atendimento	= c.nr_atendimento
					and		a.nr_atendimento 	= coalesce(nr_atendimento_p,a.nr_atendimento)
					and		c.nr_atendimento 	= coalesce(nr_atendimento_p,c.nr_atendimento)
					and		c.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		coalesce(a.ie_nao_se_aplica,'N') = 'N'
					and		coalesce(a.ie_situacao,'A') = 'A'
					and		(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
					and     ((coalesce(qt_minutos_w::text, '') = '') or (a.dt_liberacao > (clock_timestamp() - qt_minutos_w/1440)))
					and		a.dt_atualizacao = (SELECT	max(b.dt_atualizacao)
												from	escala_tev b
												where	b.nr_atendimento = a.nr_atendimento
												and		coalesce(b.ie_nao_se_aplica,'N') = 'N'
												and		coalesce(b.ie_situacao,'A') = 'A'
												and		(b.dt_liberacao IS NOT NULL AND b.dt_liberacao::text <> ''));

					if (ds_risco_w IS NOT NULL AND ds_risco_w::text <> '') or (ds_resultado_w IS NOT NULL AND ds_resultado_w::text <> '') then
						ds_result_tev_w	:= substr(ds_risco_w || wheb_mensagem_pck.get_texto(306645, null) || chr(13) || chr(10) || ds_resultado_w,1,4000); --  para Tromboembolismo Venoso.
					end if;
					
					if (ds_result_tev_w IS NOT NULL AND ds_result_tev_w::text <> '') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w 		:= ds_mensagem_w || ds_result_tev_w || quebra_w;
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_escala_indice_p	:= 'TEV';
					end if;
					end;
				elsif (ie_informacao_w	= 'TE') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
							escala_tev a where		a.nr_atendimento	= b.nr_atendimento
					and		b.nr_atendimento	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		a.nr_atendimento	= coalesce(nr_atendimento_p,a.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w
					--and	nvl(a.ie_nao_se_aplica,'N') = 'N'
					and		coalesce(a.ie_situacao,'A') = 'A'
					and		(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
					and     ((coalesce(qt_minutos_w::text, '') = '') or (a.dt_liberacao > (clock_timestamp() - qt_minutos_w/1440))) LIMIT 1;

					if (qt_registros_w	= 0) then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306644, null) || quebra_w; -- Nao existe nenhum registro para escala TEV liberado.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_escala_indice_p	:= 'TEV';
					end if;
					end;
				elsif (ie_informacao_w	= 'C') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	pac_clereance_creatinina where		nr_atendimento		= coalesce(nr_atendimento_p,nr_atendimento)
					and	cd_pessoa_fisica	= cd_pessoa_fisica_w LIMIT 1;

					if (qt_registros_w	= 0) then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w|| wheb_mensagem_pck.get_texto(306643, null) || quebra_w; -- Nao existe nenhum clearence cadastrado para o atendimento.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
					end if;
					end;
				elsif (ie_informacao_w	= 'CO') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	pep_pac_ci a where		nr_atendimento		= coalesce(nr_atendimento_p,nr_atendimento)
					and	cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					and	coalesce(dt_inativacao::text, '') = ''
					and (a.nr_seq_texto = nr_seq_texto_w or coalesce(nr_seq_texto_w::text, '') = '') LIMIT 1;

					-- Se tiver hemoterapia prescrita nao liberada, vai consistir - REP e desta forma.
					select	coalesce(max('S'),'N')
					into STRICT	ie_existe_hemoterapia_w
					from	cpoe_hemoterapia b where	b.nr_atendimento	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and	b.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	coalesce(b.dt_liberacao::text, '') = ''
					and	b.nm_usuario_nrec	= nm_usuario_p LIMIT 1;
					

					if (qt_registros_w	= 0) and (ie_existe_hemoterapia_w = 'S') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306642, null) || quebra_w; -- Nao existe nenhum consentimento por parte do paciente.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
					end if;
					end;
				elsif (ie_informacao_w	= 'DDP') then
					begin
					
					ie_existe_lab_w := cpoe_get_info_liberacao(itens_liberar_p, null, null, null, null, 'DDP');
					
					if (ie_existe_lab_w = 'S') then
						select	max(a.cd_pessoa_fisica),
								max(SUBSTR(OBTER_NOME_PF(a.cd_pessoa_fisica), 0, 60)),
								max(a.dt_nascimento),
								max(a.ie_sexo),
								max(a.ie_revisar),
								max(a.nr_cpf)
						into STRICT	cd_pessoa_fisica_w,
							nm_pessoa_fisica_w,
							dt_nascimento_w,
							ie_sexo_w,
							ie_revisar_w,
							nr_cpf_w
						from	pessoa_fisica a					
						where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w;
						
						if (coalesce(dt_nascimento_w::text, '') = '') then
							ds_retorno_w	:= substr(ds_retorno_w||obter_texto_tasy(106153, wheb_usuario_pck.get_nr_seq_idioma)||quebra_w,1,4000); --Data de nascimento
						end if;
						
						if (coalesce(ie_sexo_w::text, '') = '') then
							ds_retorno_w	:= substr(ds_retorno_w||obter_texto_tasy(106155, wheb_usuario_pck.get_nr_seq_idioma)||quebra_w,1,4000); --Sexo
						end if;

						if (coalesce(nr_cpf_w::text, '') = '') then
							ds_retorno_w	:= substr(ds_retorno_w||obter_texto_tasy(106158, wheb_usuario_pck.get_nr_seq_idioma)||quebra_w,1,4000);
						end if;
						
						if (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') then
							ds_mensagem_w		:= 	ds_mensagem_w||substr(obter_texto_tasy(106536, wheb_usuario_pck.get_nr_seq_idioma)||quebra_w||ds_retorno_w,1,4000);
						end if;
					end if;
					end;
				elsif (ie_informacao_w = 'PM') then	
					begin
					ie_parecer_p := 'N';
					
					select	count(*)
					into STRICT	qt_parecer_dia_w
					from	parecer_medico_req where		nr_atendimento = nr_atendimento_p
					and	to_char(dt_liberacao,'dd') = to_char(clock_timestamp(),'dd') LIMIT 1;
					
					if (qt_parecer_dia_w = 0) then

						ds_proc_parecer_w := cpoe_get_info_liberacao(itens_liberar_p, null, null, null, null, 'PM');

						if (ds_proc_parecer_w IS NOT NULL AND ds_proc_parecer_w::text <> '') then
							ie_parecer_p := 'S';
							ds_mensagem_w := wheb_mensagem_pck.get_texto(306641, 'DS_PROC_PARECER_W=' || ds_proc_parecer_w); --  Nao foi registrado parecer medico referente ao procedimento #@DS_PROC_PARECER_W#@ na data de hoje, favor verificar.
						end if;
					
					end if;
					end;
				/*elsif (ie_informacao_w = 'AB') then
					begin
					open c02;
					loop
					fetch c02 into
						cd_procedimento_w,
						nr_seq_proc_interno_w,
						ds_procedimento_w,
						ie_origem_proced_w;
					exit when c02%notfound;
						
						select	count(*)
						into	ie_verif_aval_w	
						from	med_avaliacao_paciente  a,
								procedimento_prescricao b
						where	rownum = 1
						and		a.nr_seq_tipo_avaliacao 	= b.nr_seq_avaliacao
						and 	a.nr_prescricao			= nr_prescricao_p 	--AJUSTAR
						and 	b.cd_procedimento		= cd_procedimento_w
						and	b.ie_origem_proced		= ie_origem_proced_w
						and 	a.nr_atendimento 		= nvl(nr_atendimento_p,a.nr_atendimento)
						and	a.cd_pessoa_fisica		= cd_pessoa_fisica_w;
						if	(ie_verif_aval_w = 0) and
							(nr_seq_proc_interno_w is not null) then
							select  count(*)
							into 	ie_verif_aval_w
							from	med_avaliacao_paciente	a,
									proc_interno		b
							where   rownum = 1
							and		a.nr_seq_tipo_avaliacao = b.nr_seq_avaliacao
							and 	a.nr_prescricao		= nr_prescricao_p --AJUSTAR
							and 	b.nr_sequencia		= nr_seq_proc_interno_w
							and 	a.nr_atendimento 	= nvl(nr_atendimento_p,a.nr_atendimento)
							and	a.cd_pessoa_fisica	= cd_pessoa_fisica_w;
							if	(ie_verif_aval_w = 0) then
								if	(ds_mensagem_w is not null) then
									ds_mensagem_w := ds_mensagem_w || quebra_w || wheb_mensagem_pck.get_texto(306638, null) || ds_procedimento_w; --  Nao foi realizada a avaliacao para o procedimento 
								else
									ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306638, null) || ds_procedimento_w; --  Nao foi realizada a avaliacao para o procedimento 
								end if;
								ie_inconsistente_w := true;
							end if;
						elsif	(ie_verif_aval_w = 0) then
							if	(ds_mensagem_w is not null) then
								ds_mensagem_w := ds_mensagem_w || quebra_w || wheb_mensagem_pck.get_texto(306638, null) || ds_procedimento_w; -- Nao foi realizada a avaliacao para o procedimento 
							else
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306638, null) ||ds_procedimento_w; -- Nao foi realizada a avaliacao para o procedimento 
							end if;
							ie_inconsistente_w := true;
							ie_informacao_ww	:= ie_informacao_w;
						end if;				
					end loop;
					close c02;
					end;
			*/
				elsif (ie_informacao_w	= 'HSARA') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
							paciente_alergia a where		coalesce(a.dt_inativacao::text, '') = ''
					and		b.nr_atendimento	= a.nr_atendimento
					and		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306634, null) || quebra_w; -- Nao existe historico valido de alergia/reacao adversa para este paciente.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_item_prontuario_p	:= 'HSARA';
					end if;
					end;
				elsif (ie_informacao_w	= 'JP') then
					begin
					SELECT count(*)
					into STRICT	qt_registros_w					
					FROM    PACIENTE_JUSTIFICATIVA WHERE		nr_atendimento = nr_atendimento_p
					AND (dt_liberacao IS NOT NULL AND dt_liberacao::text <> '')
					AND ie_situacao = 'A'
					AND ie_tipo_justificativa = 2
					AND dt_justificativa + coalesce(QT_DIA_PRORROGACAO,0) > clock_timestamp() LIMIT 1;
					
					if (qt_registros_w	= '0') then
					
						select	count(*)
						into STRICT	qt_registros_w
						from	Atend_categoria_convenio a
						where	a.nr_atendimento		= nr_atendimento_p
						and		a.dt_inicio_vigencia	=
														(SELECT	max(b.dt_inicio_vigencia)
														from	Atend_categoria_convenio b
														where	b.nr_atendimento	= nr_atendimento_p)
						and		a.dt_inicio_vigencia	+ coalesce(a.qt_dia_internacao,0) > clock_timestamp();

						if (qt_registros_w	= '0') then					
					
							if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
								ds_mensagem_w := ds_mensag_w||quebra_w;
							else
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306633, null) || quebra_w; -- Nao existe Justificativa/Solicitacoes para este paciente.
							end if;
							ie_inconsistente_w	:= true;
							ie_item_prontuario_p := 'JUS';
							ie_informacao_ww	:= ie_informacao_w;
						end if;	

					end if;
					end;	
				elsif (ie_informacao_w	= 'HSHV') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
							paciente_habito_vicio a where		coalesce(a.dt_inativacao::text, '') = ''
					and		b.nr_atendimento	= a.nr_atendimento
					and		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306632, null) || quebra_w; --  Nao existe historico valido de habitos/vicios para este paciente.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_item_prontuario_p	:= 'HSHV';
					end if;
					end;
				elsif (ie_informacao_w	= 'JAP') then
					begin
					SELECT	max(a.dt_autorizacao)
					INTO STRICT    data_autorizacao_w
					FROM	autorizacao_convenio a
					WHERE	A.nr_atendimento	    = nr_atendimento_p
					AND	    a.ie_tipo_autorizacao	= '2'							
					AND (a.dt_fim_vigencia > clock_timestamp() OR coalesce(a.dt_fim_vigencia::text, '') = '');	
					
					if (data_autorizacao_w IS NOT NULL AND data_autorizacao_w::text <> '') then
						SELECT COUNT(*)
						into STRICT  qt_registros_w
						FROM  paciente_justificativa b WHERE		b.nr_atendimento = coalesce(nr_atendimento_p,b.nr_atendimento)
						AND   b.ie_tipo_justificativa = 2
						AND   b.dt_liberacao >= data_autorizacao_w LIMIT 1;
					
						if (qt_registros_w	= '0') then
							if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
								 ds_mensagem_w := ds_mensag_w||quebra_w;
							else
								ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306631, null) || quebra_w; -- Nao existe justificativa de prorrogacao de internacao para este paciente.
							end if;
							ie_inconsistente_w	    := true;
							ie_informacao_ww	    := ie_informacao_w;
						end if;
					
					end if;
					end;	
				elsif (ie_informacao_w	= 'HSCIR') then
					begin
					select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_paciente b,
							historico_saude_cirurgia a where		coalesce(a.dt_inativacao::text, '') = ''
					and		b.nr_atendimento	= a.nr_atendimento
					and		b.nr_atendimento 	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w LIMIT 1;
					
					if (qt_registros_w	= '0') then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306630, null) || quebra_w; -- Nao existe historico valido de cirurgia para este paciente.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
						ie_item_prontuario_p	:= 'HSCIR';
					end if;
					end;
				elsif (ie_informacao_w	= 'EDOR') then
					begin
					Select	count(*)
					into STRICT	qt_registros_w
					from	atendimento_sinal_vital where		(qt_escala_dor IS NOT NULL AND qt_escala_dor::text <> '')
					and	nr_atendimento	= coalesce(nr_atendimento_p,nr_atendimento)
					and	cd_paciente	= cd_pessoa_fisica_w
					and	ie_situacao = 'A'
					and	coalesce(IE_RN,'N')	= 'N'
					and 	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '') LIMIT 1;
					
					if (qt_registros_w	= 0) then
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306629, null) || quebra_w; -- Atendimento sem escala de dor preenchida nos Sinais Vitais.
						end if;
						ie_inconsistente_w	:= true;
						ie_informacao_ww	:= ie_informacao_w;
					end if;
					end;
				elsif (ie_informacao_w	= 'LSU') and (ie_tipo_convenio_w	= 3) then
					begin
					
					SELECT	COUNT(*)
					INTO STRICT	qt_registros_w
					FROM	atendimento_paciente b,
							SUS_LAUDO_PACIENTE a WHERE		a.nr_atendimento	= b.nr_atendimento
					and		a.nr_atendimento	= coalesce(nr_atendimento_p,a.nr_atendimento)
					and		b.nr_atendimento	= coalesce(nr_atendimento_p,b.nr_atendimento)
					and		b.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		a.ie_tipo_laudo_sus	= 2
					and		a.ie_classificacao	= 1
					and		coalesce(a.ie_diaria_uti,'N')	<> 'N'
					and		(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '') LIMIT 1;
					
					IF (qt_registros_w	= 0) THEN
						if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
							ds_mensagem_w := ds_mensag_w||quebra_w;
						else
							ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(306628, null) || quebra_w; -- Atendimento sem Laudo SUS UTI informado/liberado.
						end if;
						ie_inconsistente_w	:= TRUE;
						ie_informacao_ww	:= ie_informacao_w;
					END IF;	
					end;
        elsif (ie_informacao_w	= 'NPROT') then
          open c04;
          fetch c04
          into r_c04;

          if c04%found then
            open c05;
            fetch c05
            into r_c05;

            if c05%notfound then
              if (ds_mensag_w IS NOT NULL AND ds_mensag_w::text <> '') then
                ds_mensagem_w := ds_mensag_w||quebra_w;
              else
                select (select t.ds_pendencia from GQA_PENDENCIA t where t.nr_sequencia =  nr_seq_protocolo_w) ||
                       ' - ' ||
                       (select t.ds_regra from GQA_PENDENCIA_regra t where t.nr_sequencia =  nr_seq_prot_etapa_w)
                  into STRICT ds_protocolo_w
;

                ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(nr_seq_mensagem_p => 1191880
                                                                             ,Vl_Macros_P =>  ';QUEBRA_P=' || quebra_w);
                if (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '' AND nr_seq_prot_etapa_w IS NOT NULL AND nr_seq_prot_etapa_w::text <> '') then
                  ds_mensagem_w := ds_mensagem_w || wheb_mensagem_pck.get_texto(nr_seq_mensagem_p => 1191881
                                                                               ,Vl_Macros_P => 'DS_PROTOCOLO=' || substr(ds_protocolo_w,1,100)) || quebra_w;
                end if;
              end if;

              ie_inconsistente_w	:= true;
              ie_informacao_ww	:= ie_informacao_w;
              ie_mentor_p := 'S';
              nr_seq_protocolo_p := nr_seq_protocolo_w;
              nr_seq_etapa_p :=  nr_seq_prot_etapa_w;
            end if;
            close c05;
          end if;
          close c04;
				end if;
				end;
			end if;
			end;
		end if;
		if (ie_inconsistente_w) and (ie_acao_w = 'I') then
			exit;
		end if;	
		end;
	end loop;
	close C01;
	
	if (coalesce(ie_informacao_ww::text, '') = '') or (ie_informacao_ww <> 'ED') then
		if (ie_inconsistente_w) and (ie_acao_w	= 'I') then
			ie_acao_p	:= ie_acao_w;
		end if;
	end if;

	if (ie_informacao_ww 	<> 'JS') and (ie_momento_p		=  'L')  then
		ie_autorizacao_p := 'N';
	end if;
	end;
end if;

--  Alterado o substr da variavel ds_mensagem_w de 1,255 ara  1,254 o mesmo foi solicitado pela tecnologia pois o wsp suporta apenas 254 caracteres.
ds_mensagem_p		:= substr(ds_mensagem_w,1,254);
ds_mensagem_adic_p	:= substr(ds_mensagem_w,255,254);
ie_posicionar_pep_p	:= ie_posicionar_pep_w;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cpoe_consiste_regra_inf_rep ( cd_estabelecimento_p bigint, nr_atendimento_p bigint, cd_setor_atendimento_p bigint, cd_perfil_p bigint, ie_momento_p text, ie_prescricao_alta_p text, dt_prescricao_p timestamp, nm_usuario_p text, cd_pessoa_fisica_p text, itens_liberar_p text, qt_peso_p bigint default null, ie_autorizacao_p INOUT text DEFAULT NULL, cd_protocolo_p INOUT bigint DEFAULT NULL, ds_mensagem_p INOUT text DEFAULT NULL, ds_mensagem_adic_p INOUT text DEFAULT NULL, ie_acao_p INOUT text DEFAULT NULL, ie_anamnese_p INOUT text DEFAULT NULL, ie_evolucao_p INOUT text DEFAULT NULL, ie_receita_p INOUT text DEFAULT NULL, ie_diagnostico_p INOUT text DEFAULT NULL, ie_escala_indice_p INOUT text DEFAULT NULL, ie_recomendacao_p INOUT text DEFAULT NULL, ie_parecer_p INOUT text DEFAULT NULL, ie_peso_p INOUT text DEFAULT NULL, ie_laudo_sus_p INOUT text DEFAULT NULL, ie_avaliacao_p INOUT text DEFAULT NULL, ie_item_prontuario_p INOUT text DEFAULT NULL, ie_posicionar_pep_p INOUT text DEFAULT NULL, ie_mentor_p INOUT text DEFAULT NULL, nr_seq_protocolo_p INOUT bigint DEFAULT NULL, nr_seq_etapa_p INOUT bigint DEFAULT NULL) FROM PUBLIC;

