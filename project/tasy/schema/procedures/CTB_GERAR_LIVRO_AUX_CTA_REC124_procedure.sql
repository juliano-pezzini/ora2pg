-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_gerar_livro_aux_cta_rec124 ( nm_usuario_p text, cd_empresa_p bigint, cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp) AS $body$
DECLARE

 
cd_carteira_w			varchar(255);
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
dt_inicio_cobertura_w		timestamp;
dt_fim_cobertura_w		timestamp;
dt_emissao_w			timestamp;
dt_vencimento_w			timestamp;
ds_classif_diops_w		varchar(255);
ds_mod_contratacao_w		varchar(255);
ds_tipo_contratacao_w		varchar(255);
nm_pessoa_fisica_w		varchar(255);
nr_contador_w			bigint;
nr_seq_carteira_w		pls_segurado.nr_sequencia%type;
nr_seq_mensalidade_w		titulo_receber.nr_seq_mensalidade%type;
qt_dias_vencido_w		bigint;

arq_texto_w			utl_file.file_type;
ds_erro_w			varchar(255);
ds_local_w			varchar(255);
nm_arquivo_w			varchar(255);
ds_mensagem_w			varchar(255);
cd_cgc_w			varchar(14);

c_linha CURSOR FOR 
	SELECT	a.nr_titulo || ';' || 
		a.dt_emissao || ';' || 
		a.dt_vencimento || ';' || 
		a.cd_usuario_plano || ';' || 
		a.nm_pessoa_fisica || ';' || 
		a.ds_modalidade || ';' || 
		a.ds_tipo_contratacao || ';' || 
		a.dt_inicio_cobertura || ';' || 
		a.dt_fim_cobertura || ';' || 
		a.vl_titulo || ';' || 
		a.vl_saldo_titulo || ';' || 
		a.vl_receb_vigencia || ';' || 
		0 || ';' || 
		a.vl_receb_ate_vigencia || ';' || 
		a.qt_dias_venc || ';' || 
		a.ds_classif_diops ds_linha 
	from	w_ctb_livro_aux_contas_rec a 
	where	a.nm_usuario = nm_usuario_p;
	
c_contas CURSOR FOR 
	SELECT	cd_conta_contabil, 
		substr(ctb_obter_classif_conta(cd_conta_contabil, cd_classificacao,dt_inicial_p),1,40) cd_classificacao 
	from	conta_contabil 
	where	cd_conta_contabil in ('12171472', '1127','1268','1269','1270','1303','1577','204670','204673','378','380');

vet_contas	c_contas%ROWTYPE;
	
c_saldo_anterior CURSOR FOR 
	SELECT	y.nr_seq_agrupamento nr_titulo, 
		sum(y.vl_deb_ant) vl_deb_ant, 
		sum(y.vl_cred_ant) vl_cred_ant, 
		sum(y.vl_deb_ant - y.vl_cred_ant) vl_movto_ant 
	from (	SELECT nr_seq_agrupamento, 
				sum(vl_movimento) vl_deb_ant, 
				0 vl_cred_ant 
			from  ctb_movimento 
			where  cd_conta_debito = vet_contas.cd_conta_contabil 
			and   dt_movimento < dt_inicial_p 
			group by nr_seq_agrupamento 
			
union all
 
			select nr_seq_agrupamento, 
				0 vl_deb_ant, 
				sum(vl_movimento) vl_cred_ant 
			from  ctb_movimento 
			where  cd_conta_credito = vet_contas.cd_conta_contabil 
			and   dt_movimento < dt_inicial_p 
			group by nr_seq_agrupamento) y 
	group by y.nr_seq_agrupamento 
	order by nr_seq_agrupamento;
	
vet_saldo_ant	c_saldo_anterior%ROWTYPE;
	
c_movto_atual CURSOR FOR 
	SELECT	y.nr_seq_agrupamento nr_titulo, 
		sum(y.vl_deb_ant) vl_deb_atual, 
		sum(y.vl_cred_ant) vl_cred_atual, 
		sum(y.vl_deb_ant - y.vl_cred_ant) vl_movto_atual 
	from (	SELECT nr_seq_agrupamento, 
				sum(vl_movimento) vl_deb_ant, 
				0 vl_cred_ant 
			from  ctb_movimento 
			where  cd_conta_debito = vet_contas.cd_conta_contabil 
			and   dt_movimento between dt_inicial_p and dt_final_p 
			group by nr_seq_agrupamento 
			
union all
 
			select nr_seq_agrupamento, 
				0 vl_deb_ant, 
				sum(vl_movimento) vl_cred_ant 
			from  ctb_movimento 
			where  cd_conta_credito = vet_contas.cd_conta_contabil 
			and   dt_movimento between dt_inicial_p and dt_final_p 
			group by nr_seq_agrupamento) y 
	group by y.nr_seq_agrupamento 
	order by nr_seq_agrupamento;

vet_movto_atual		c_movto_atual%ROWTYPE;

BEGIN 
 
delete 	from w_ctb_livro_aux_contas_rec 
where	nm_usuario = nm_usuario_p 
and	cd_estabelecimento = cd_estabelecimento_p;
commit;
 
open c_contas;
loop 
fetch c_contas into	 
	vet_contas;
EXIT WHEN NOT FOUND; /* apply on c_contas */
	begin 
	 
	nr_contador_w := 0;
	 
	open c_saldo_anterior;
	loop 
	fetch c_saldo_anterior into	 
		vet_saldo_ant;
	EXIT WHEN NOT FOUND; /* apply on c_saldo_anterior */
		begin 
		 
		dt_emissao_w 		:= null;
		dt_vencimento_w 	:= null;
		nr_seq_mensalidade_w 	:= null;
		nr_seq_carteira_w 	:= null;
		cd_pessoa_fisica_w 	:= null;
		nm_pessoa_fisica_w 	:= null;
		ds_mod_contratacao_w 	:= null;
		ds_tipo_contratacao_w 	:= null;
		dt_inicio_cobertura_w	:= null;
		dt_fim_cobertura_w	:= null;
		cd_carteira_w		:= null;
		 
		if (coalesce(vet_saldo_ant.nr_titulo,0) > 0) then 
			begin 
			select	dt_emissao, 
				dt_vencimento, 
				nr_seq_mensalidade, 
				cd_pessoa_fisica, 
				cd_cgc 
			into STRICT	dt_emissao_w, 
				dt_vencimento_w, 
				nr_seq_mensalidade_w, 
				cd_pessoa_fisica_w, 
				cd_cgc_w 
			from	titulo_receber 
			where	nr_titulo = vet_saldo_ant.nr_titulo;
			exception 
				when others then 
				dt_emissao_w := null;
				dt_vencimento_w := null;
				nr_seq_mensalidade_w := null;
			end;
			 
			if (	(coalesce(nr_seq_mensalidade_w,0) = 0) and 
				((coalesce(cd_pessoa_fisica_w,'0') <> '0') or (coalesce(cd_cgc_w,'0') <> '0'))) then 
				nm_pessoa_fisica_w := obter_nome_pf_pj(cd_pessoa_fisica_w,cd_cgc_w);
			end if;
			 
 
			if (coalesce(nr_seq_mensalidade_w,0) > 0) then 
				begin 
				select	y.nr_sequencia, 
					cd_pessoa_fisica, 
					nm_pessoa_fisica, 
					ds_mod_contratacao, 
					ds_tipo_contratacao, 
					dt_inicio_cobertura, 
					dt_fim_cobertura, 
					cd_carteira 
				into STRICT	nr_seq_carteira_w, 
					cd_pessoa_fisica_w, 
					nm_pessoa_fisica_w, 
					ds_mod_contratacao_w, 
					ds_tipo_contratacao_w, 
					dt_inicio_cobertura_w, 
					dt_fim_cobertura_w	, 
					cd_carteira_w					 
				from (	SELECT	s.nr_sequencia, 
							s.cd_pessoa_fisica, 
							f.nm_pessoa_fisica, 
							obter_valor_dominio(1669,p.ie_preco) ds_mod_contratacao, 
							obter_valor_dominio(1666,p.ie_tipo_contratacao) ds_tipo_contratacao, 
							m.dt_inicio_cobertura, 
							m.dt_fim_cobertura, 
							substr(pls_obter_dados_segurado(s.nr_sequencia,'C'),1,10) cd_carteira 
						from	pls_segurado s, 
							pls_mensalidade_segurado m, 
							pls_plano p, 
							pessoa_fisica f 
						where	m.nr_seq_segurado = s.nr_sequencia 
						and	m.nr_seq_plano = p.nr_sequencia 
						and	s.cd_pessoa_fisica = f.cd_pessoa_fisica 
						and	m.nr_seq_mensalidade = nr_seq_mensalidade_w) y LIMIT 1;
				exception 
					when others then 
						dt_emissao_w 		:= null;
						dt_vencimento_w 	:= null;
						nr_seq_mensalidade_w 	:= null;
						nr_seq_carteira_w 	:= null;
						cd_pessoa_fisica_w 	:= null;
						nm_pessoa_fisica_w 	:= null;
						ds_mod_contratacao_w 	:= null;
						ds_tipo_contratacao_w 	:= null;
						dt_inicio_cobertura_w 	:= null;
						dt_fim_cobertura_w 	:= null;
						cd_carteira_w		:= null;
				end;
			end if;
				 
			if (dt_vencimento_w > dt_final_p) then 
				ds_classif_diops_w := wheb_mensagem_pck.get_texto(300065);
			else 
				qt_dias_vencido_w := trunc(dt_final_p - dt_vencimento_w);
					 
				if (qt_dias_vencido_w <= 30) then 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300059);
				elsif (qt_dias_vencido_w <= 60) then 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300060);
				elsif (qt_dias_vencido_w <= 90) then 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300061);
				elsif (qt_dias_vencido_w <= 120) then 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300062);
				else 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300064);
				end if;
			end if;		
		end if;
		 
		nr_contador_w := nr_contador_w + 1;
		 
		insert into w_ctb_livro_aux_contas_rec(	nm_usuario, 
			cd_estabelecimento, 
			nr_titulo, 
			dt_atualizacao, 
			dt_emissao, 
			dt_vencimento, 
			nr_seq_carteira, 
			nm_pessoa_fisica, 
			ds_modalidade, 
			ds_tipo_contratacao, 
			dt_inicio_cobertura, 
			dt_fim_cobertura, 
			vl_titulo, 
			vl_saldo_titulo, 
			vl_receb_vigencia, 
			vl_receb_ate_vigencia, 
			vl_recebido, 
			qt_dias_venc, 
			dt_pagamento_previsto, 
			dt_recebimento, 
			ds_classif_diops, 
			ds_historico, 
			dt_final_venc, 
			cd_usuario_plano, 
			nr_seq_mensalidade, 
			nr_lote_mensalidade, 
			cd_conta_contabil, 
			cd_classificacao) 
		values (	nm_usuario_p, 
			cd_estabelecimento_p, 
			vet_saldo_ant.nr_titulo, 
			clock_timestamp(), 
			dt_emissao_w, 
			dt_vencimento_w, -- colocar data 
			nr_seq_carteira_w, 
			nm_pessoa_fisica_w, 
			ds_mod_contratacao_w, 
			ds_tipo_contratacao_w, 
			dt_inicio_cobertura_w, 
			dt_fim_cobertura_w, 
			vet_saldo_ant.vl_deb_ant, 
			vet_saldo_ant.vl_movto_ant, 
			null, 
			null, 
			vet_saldo_ant.vl_cred_ant, 
			qt_dias_vencido_w, 
			null, 
			null, 
			ds_classif_diops_w, 
			null, 
			null, 
			cd_carteira_w, 
			null, 
			null, 
			vet_contas.cd_conta_contabil, --cd_conta_contabil, 
			vet_contas.cd_classificacao);
		 
		if (mod(nr_contador_w,100) = 0) then 
			commit;
		end if;
		 
		end;
	end loop;
	close c_saldo_anterior;
	 
	nr_contador_w := 0;
	 
	open c_movto_atual;
	loop 
	fetch c_movto_atual into	 
		vet_movto_atual;
	EXIT WHEN NOT FOUND; /* apply on c_movto_atual */
		begin 
		 
		dt_emissao_w 		:= null;
		dt_vencimento_w 	:= null;
		nr_seq_mensalidade_w 	:= null;
		nr_seq_carteira_w 	:= null;
		cd_pessoa_fisica_w 	:= null;
		nm_pessoa_fisica_w 	:= null;
		ds_mod_contratacao_w 	:= null;
		ds_tipo_contratacao_w 	:= null;
		dt_inicio_cobertura_w 	:= null;
		dt_fim_cobertura_w	:= null;
		cd_carteira_w		:= null;
		 
		if (coalesce(vet_movto_atual.nr_titulo,0) > 0) then 
			begin 
			select	dt_emissao, 
				dt_vencimento, 
				nr_seq_mensalidade 
			into STRICT	dt_emissao_w, 
				dt_vencimento_w, 
				nr_seq_mensalidade_w 
			from	titulo_receber 
			where	nr_titulo = vet_movto_atual.nr_titulo;
			exception 
				when others then 
				dt_emissao_w := null;
				dt_vencimento_w := null;
				nr_seq_mensalidade_w := null;
			end;
 
			if (coalesce(nr_seq_mensalidade_w,0) > 0) then 
				begin 
				select	y.nr_sequencia, 
					cd_pessoa_fisica, 
					nm_pessoa_fisica, 
					ds_mod_contratacao, 
					ds_tipo_contratacao, 
					dt_inicio_cobertura, 
					dt_fim_cobertura, 
					cd_carteira 
				into STRICT	nr_seq_carteira_w, 
					cd_pessoa_fisica_w, 
					nm_pessoa_fisica_w, 
					ds_mod_contratacao_w, 
					ds_tipo_contratacao_w, 
					dt_inicio_cobertura_w, 
					dt_fim_cobertura_w, 
					cd_carteira_w 
				from (	SELECT	s.nr_sequencia, 
							s.cd_pessoa_fisica, 
							f.nm_pessoa_fisica, 
							obter_valor_dominio(1669,p.ie_preco) ds_mod_contratacao, 
							obter_valor_dominio(1666,p.ie_tipo_contratacao) ds_tipo_contratacao, 
							m.dt_inicio_cobertura, 
							m.dt_fim_cobertura, 
							substr(pls_obter_dados_segurado(s.nr_sequencia,'C'),1,10) cd_carteira 
						from	pls_segurado s, 
							pls_mensalidade_segurado m, 
							pls_plano p, 
							pessoa_fisica f 
						where	m.nr_seq_segurado = s.nr_sequencia 
						and	m.nr_seq_plano = p.nr_sequencia 
						and	s.cd_pessoa_fisica = f.cd_pessoa_fisica 
						and	m.nr_seq_mensalidade = nr_seq_mensalidade_w) y LIMIT 1;
				exception 
					when others then 
						dt_emissao_w 		:= null;
						dt_vencimento_w 	:= null;
						nr_seq_mensalidade_w 	:= null;
						nr_seq_carteira_w 	:= null;
						cd_pessoa_fisica_w 	:= null;
						nm_pessoa_fisica_w 	:= null;
						ds_mod_contratacao_w 	:= null;
						ds_tipo_contratacao_w 	:= null;
						dt_inicio_cobertura_w 	:= null;
						dt_fim_cobertura_w 	:= null;
				end;
			end if;
 
			if (dt_vencimento_w > dt_final_p) then 
				ds_classif_diops_w := wheb_mensagem_pck.get_texto(300065);
			else 
				qt_dias_vencido_w := trunc(dt_final_p - dt_vencimento_w);
					 
				if (qt_dias_vencido_w <= 30) then 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300059);
				elsif (qt_dias_vencido_w <= 60) then 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300060);
				elsif (qt_dias_vencido_w <= 90) then 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300061);
				elsif (qt_dias_vencido_w <= 120) then 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300062);
				else 
					ds_classif_diops_w := Wheb_mensagem_pck.get_texto(300064);
				end if;
			end if;		
		end if;
		 
		nr_contador_w := nr_contador_w + 1;
		 
		insert into w_ctb_livro_aux_contas_rec(	nm_usuario, 
			cd_estabelecimento, 
			nr_titulo, 
			dt_atualizacao, 
			dt_emissao, 
			dt_vencimento, 
			nr_seq_carteira, 
			nm_pessoa_fisica, 
			ds_modalidade, 
			ds_tipo_contratacao, 
			dt_inicio_cobertura, 
			dt_fim_cobertura, 
			vl_titulo, 
			vl_saldo_titulo, 
			vl_receb_vigencia, 
			vl_receb_ate_vigencia, 
			vl_recebido, 
			qt_dias_venc, 
			dt_pagamento_previsto, 
			dt_recebimento, 
			ds_classif_diops, 
			ds_historico, 
			dt_final_venc, 
			cd_usuario_plano, 
			nr_seq_mensalidade, 
			nr_lote_mensalidade, 
			cd_conta_contabil, 
			cd_classificacao) 
		values (	nm_usuario_p, 
			cd_estabelecimento_p, 
			vet_movto_atual.nr_titulo, 
			clock_timestamp(), 
			dt_emissao_w, 
			dt_vencimento_w, -- colocar data 
			nr_seq_carteira_w, 
			nm_pessoa_fisica_w, 
			ds_mod_contratacao_w, 
			ds_tipo_contratacao_w, 
			dt_inicio_cobertura_w, 
			dt_fim_cobertura_w, 
			vet_movto_atual.vl_deb_atual, 
			vet_movto_atual.vl_movto_atual, 
			null, 
			null, 
			vet_movto_atual.vl_cred_atual, 
			qt_dias_vencido_w, 
			null, 
			null, 
			ds_classif_diops_w, 
			null, 
			null, 
			cd_carteira_w, 
			null, 
			null, 
			vet_contas.cd_conta_contabil, --cd_conta_contabil, 
			vet_contas.cd_classificacao);
			 
		if (mod(nr_contador_w,100) = 0) then 
			commit;
		end if;
		end;
	end loop;
	close c_movto_atual;
	 
	end;
end loop;
close c_contas;
 
commit;
 
nm_arquivo_w	:= obter_desc_expressao(292636) || ' 6 ' || to_char(clock_timestamp(),'ddmmyyyy') || to_char(clock_timestamp(),'hh24') || to_char(clock_timestamp(),'mi') || to_char(clock_timestamp(),'ss') || 
			nm_usuario_p || '.xlsx';
 
SELECT * FROM obter_evento_utl_file(1, null, ds_local_w, ds_erro_w) INTO STRICT ds_local_w, ds_erro_w;
 
arq_texto_w := utl_file.fopen(ds_local_w,nm_arquivo_w,'W'); --arq_texto_w := utl_file.fopen('/srvfs03/FINANCEIRO/TASY/',nm_arquivo_w,'W'); 
for vetl in c_linha loop 
	begin 
	utl_file.put_line(arq_texto_w,vetl.ds_linha);
	utl_file.fflush(arq_texto_w);
	end;
end loop;
 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_gerar_livro_aux_cta_rec124 ( nm_usuario_p text, cd_empresa_p bigint, cd_estabelecimento_p bigint, dt_inicial_p timestamp, dt_final_p timestamp) FROM PUBLIC;

