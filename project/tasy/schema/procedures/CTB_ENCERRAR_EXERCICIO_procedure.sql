-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_encerrar_exercicio ( cd_estabelecimento_p bigint, nr_seq_mes_ref_p bigint, cd_historico_p bigint, cd_conta_result_p text, nm_usuario_p text, dt_encerramento_p timestamp) AS $body$
DECLARE


cd_conta_contabil_w			conta_contabil.cd_conta_contabil%type;
cd_conta_contabil_ww		conta_contabil.cd_conta_contabil%type;
cd_conta_debito_w			conta_contabil.cd_conta_contabil%type;
cd_conta_credito_w			conta_contabil.cd_conta_contabil%type;
cd_centro_custo_w			centro_custo.cd_centro_custo%type;
cd_classif_debito_w			conta_contabil.cd_classificacao%type;
cd_classif_credito_w		conta_contabil.cd_classificacao%type;
dt_movimento_w				timestamp;
vl_saldo_w					ctb_saldo.vl_saldo%type;
nr_lote_contabil_w			lote_contabil.nr_lote_contabil%type;
ds_compl_historico_w		ctb_movimento.ds_compl_historico%type;
dt_abertura_w				timestamp;
dt_fechamento_w				timestamp;
dt_referencia_w				timestamp;
qt_mes_fim_exerc_w			smallint;
ie_debito_credito_w			ctb_grupo_conta.ie_debito_credito%type;
ie_debito_credito_w_aux     ctb_grupo_conta.ie_debito_credito%type;
cd_tipo_lote_w				tipo_lote_contabil.cd_tipo_lote_contabil%type;
ds_erro_w					varchar(255);
nr_seq_movimento_w			ctb_movimento.nr_sequencia%type;
ie_gera_centro_custo_w		varchar(10);	
dt_mesano_w					varchar(10);
nr_seq_agrupamento_w		ctb_movimento.nr_seq_agrupamento%type;
nr_lote_contabil_existe_w	lote_contabil.nr_lote_contabil%type;
nr_seq_mes_ref_w			ctb_sit_especial_empresa.nr_seq_mes_ref%type;
cd_empresa_w				ctb_sit_especial_empresa.cd_empresa%type;
dt_inicio_mes_w				ctb_mes_ref.dt_referencia%type;
nr_seq_mes_ant_w			ctb_mes_ref.nr_sequencia%type;
vl_saldo_ini_w				ctb_movimento.vl_movimento%type;
vl_saldo_fin_w				ctb_movimento.vl_movimento%type;
nr_seq_centro_custo_w		ctb_movto_centro_custo.nr_sequencia%type;
dt_inicial_w				timestamp;
dt_final_w					timestamp;

c01 CURSOR FOR
	SELECT	a.cd_conta_contabil,
			a.cd_centro_custo,
			c.ie_debito_credito,
			sum(a.vl_saldo) vl_saldo
	from	ctb_grupo_conta c,
			conta_contabil b,
			ctb_saldo a
	where	a.nr_seq_mes_ref		= nr_seq_mes_ref_p
	and		a.cd_conta_contabil		= b.cd_conta_contabil
	and		b.cd_grupo				= c.cd_grupo
	and		a.vl_saldo				<> 0
	and		c.ie_tipo				in ('R','C','D')
	and		coalesce(b.ie_tipo,'A')		= 'A'
	and		a.cd_estabelecimento	= cd_estabelecimento_p
	group by a.cd_conta_contabil, c.ie_debito_credito, a.cd_centro_custo
	order by a.cd_conta_contabil, c.ie_debito_credito;

c02 CURSOR FOR
	SELECT  nextval('ctb_movimento_seq') nr_seq_movto,
			w.vl_movimento vl_saldo,
			w.cd_conta_contabil cd_conta_contabil,
			ctb_obter_situacao_saldo(w.cd_conta_contabil, w.vl_movimento) ie_debito_credito,
			W.cd_centro_custo cd_centro_custo
	from (
	SELECT	sum(z.vl_movimento) vl_movimento,
			z.cd_conta_contabil,
			z.cd_centro_custo
	from (
		select	sum(x.vl_movimento) vl_movimento, /* SEM Centro de custo */
				sum(x.vl_debito) vl_debito,
				sum(x.vl_credito) vl_credito,
				to_char(x.cd_conta_contabil) cd_conta_contabil,
				to_char(x.ie_debito_credito) ie_debito_credito,
				(x.cd_centro_custo)::numeric  cd_centro_custo
		from (
			select	CASE WHEN c.ie_debito_credito='D' THEN a.vl_movimento  ELSE -a.vl_movimento END  vl_movimento, /* Movimento de DEBITO SEM centro de custo */
					a.vl_movimento vl_debito,
					0 vl_credito,
					a.cd_conta_debito cd_conta_contabil,
					c.ie_debito_credito,
					null cd_centro_custo
			from	ctb_grupo_conta c,
					conta_contabil b,
					ctb_movimento a,
					lote_contabil d,
					estabelecimento e
			where	a.cd_conta_debito			= b.cd_conta_contabil
			and		b.cd_grupo					= c.cd_grupo
			and		a.nr_lote_contabil			= d.nr_lote_contabil
			and 	coalesce(a.cd_estabelecimento, d.cd_estabelecimento) 						= e.cd_estabelecimento
			and 	a.dt_movimento between dt_inicial_w and dt_encerramento_p
			and 	obter_empresa_estab(coalesce(a.cd_estabelecimento, d.cd_estabelecimento)) 	= cd_empresa_w
			and		e.cd_estabelecimento		= coalesce(cd_estabelecimento_p,e.cd_estabelecimento)
			and		coalesce(b.ie_centro_custo,'N') 	= 'N'
			and		coalesce(e.ie_gerar_sped, 'N') 	= 'S'
			and		c.ie_tipo					in ('R','C','D')
			and		coalesce(b.ie_tipo,'A')			= 'A'
			
union all

			select	CASE WHEN c.ie_debito_credito='C' THEN a.vl_movimento  ELSE -a.vl_movimento END  vl_movimento, /* Movimento de CREDITO SEM centro de custo */
					0 vl_debito,
					a.vl_movimento vl_credito,
					a.cd_conta_credito cd_conta_contabil,
					c.ie_debito_credito,
					null cd_centro_custo
			from	ctb_movimento a,
					conta_contabil b,
					ctb_grupo_conta c,
					lote_contabil d,
					estabelecimento e
			where   a.cd_conta_credito			= b.cd_conta_contabil
			and     b.cd_grupo					= c.cd_grupo
			and		a.nr_lote_contabil			= d.nr_lote_contabil
			and 	coalesce(a.cd_estabelecimento, d.cd_estabelecimento) 						= e.cd_estabelecimento
			and 	a.dt_movimento between dt_inicial_w and dt_encerramento_p
			and 	obter_empresa_estab(coalesce(a.cd_estabelecimento, d.cd_estabelecimento)) 	= cd_empresa_w
			and		e.cd_estabelecimento		= coalesce(cd_estabelecimento_p,e.cd_estabelecimento)
			and		coalesce(b.ie_centro_custo,'N') 	= 'N'
			and		coalesce(e.ie_gerar_sped, 'N') 	= 'S'
			and		c.ie_tipo					in ('R','C','D')
			and		coalesce(b.ie_tipo,'A')			= 'A'
			) x
		group by
			x.cd_conta_contabil,
			x.ie_debito_credito,
			x.cd_centro_custo
		
union all

		select	sum(y.vl_movimento) vl_movimento, /* COM Centro de custo */
				sum(y.vl_debito) vl_debito,
				sum(y.vl_credito) vl_credito,
				to_char(y.cd_conta_contabil) cd_conta_contabil,
				to_char(y.ie_debito_credito) ie_debito_credito,
				(y.cd_centro_custo)::numeric  cd_centro_custo
		from (
			select	CASE WHEN c.ie_debito_credito='D' THEN f.vl_movimento  ELSE -f.vl_movimento END  vl_movimento, /* Movimento de DEBITO COM centro de custo */
					f.vl_movimento vl_debito,
					0 vl_credito,
					a.cd_conta_debito cd_conta_contabil,
					c.ie_debito_credito,
					f.cd_centro_custo
			from	ctb_grupo_conta c,
					conta_contabil b,
					ctb_movimento a,
					lote_contabil d,
					estabelecimento e,
					ctb_movto_centro_custo f
			where	a.cd_conta_debito			= b.cd_conta_contabil
			and		b.cd_grupo					= c.cd_grupo
			and		a.nr_lote_contabil			= d.nr_lote_contabil
			and 	a.nr_sequencia				= f.nr_seq_movimento
			and 	coalesce(a.cd_estabelecimento, d.cd_estabelecimento) 						= e.cd_estabelecimento
			and 	a.dt_movimento between dt_inicial_w and dt_encerramento_p
			and 	obter_empresa_estab(coalesce(a.cd_estabelecimento, d.cd_estabelecimento)) 	= cd_empresa_w
			and		e.cd_estabelecimento		= coalesce(cd_estabelecimento_p,e.cd_estabelecimento)
			and		coalesce(b.ie_centro_custo,'N') 	= 'S'
			and		coalesce(e.ie_gerar_sped, 'N') 	= 'S'
			and		c.ie_tipo					in ('R','C','D')
			and		coalesce(b.ie_tipo,'A')			= 'A'
			
union all

			select	CASE WHEN c.ie_debito_credito='C' THEN f.vl_movimento  ELSE -f.vl_movimento END  vl_movimento, /* Movimento de CREDITO COM centro de custo */
					0 vl_debito,
					f.vl_movimento vl_credito,
					a.cd_conta_credito cd_conta_contabil,
					c.ie_debito_credito,
					f.cd_centro_custo
			from	ctb_grupo_conta c,
					conta_contabil b,
					ctb_movimento a,
					lote_contabil d,
					estabelecimento e,
					ctb_movto_centro_custo f
			where	a.cd_conta_credito			= b.cd_conta_contabil
			and		b.cd_grupo					= c.cd_grupo
			and		a.nr_lote_contabil			= d.nr_lote_contabil
			and 	a.nr_sequencia				= f.nr_seq_movimento
			and 	coalesce(a.cd_estabelecimento, d.cd_estabelecimento) 						= e.cd_estabelecimento
			and 	a.dt_movimento between dt_inicial_w and dt_encerramento_p
			and 	obter_empresa_estab(coalesce(a.cd_estabelecimento, d.cd_estabelecimento)) 	= cd_empresa_w
			and		e.cd_estabelecimento		= coalesce(cd_estabelecimento_p,e.cd_estabelecimento)
			and		coalesce(b.ie_centro_custo,'N') 	= 'S'
			and		coalesce(e.ie_gerar_sped, 'N') 	= 'S'
			and		c.ie_tipo					in ('R','C','D')
			and		coalesce(b.ie_tipo,'A')			= 'A'
			) y
		group by
			y.cd_conta_contabil,
			y.ie_debito_credito,
			y.cd_centro_custo
		) z
	group by
			z.cd_conta_contabil,
			z.cd_centro_custo
	) w
    where w.vl_movimento <> 0;		

c03 CURSOR FOR
	SELECT	nextval('ctb_movimento_seq') nr_seq_movto,
			z.cd_conta_contabil cd_conta_contabil,
			z.cd_centro_custo cd_centro_custo,
			substr(ctb_obter_situacao_saldo(z.cd_conta_contabil, z.vl_saldo),1,1) ie_debito_credito,
			abs(z.vl_saldo) vl_saldo
	from (
		SELECT	a.cd_conta_contabil,
				a.cd_centro_custo,
				sum(a.vl_saldo) vl_saldo
		from	ctb_saldo a,
            	ctb_mes_ref b,
            	conta_contabil c,
            	estabelecimento d,
            	ctb_grupo_conta e
		where	a.nr_seq_mes_ref 			= b.nr_sequencia
		and		c.cd_conta_contabil 		= a.cd_conta_contabil
		and		d.cd_estabelecimento 		= a.cd_estabelecimento
		and		c.ie_tipo 					= 'A'
		and		d.cd_empresa 				= cd_empresa_w
		and     c.cd_grupo                  = e.cd_grupo
		and		d.cd_estabelecimento		= coalesce(cd_estabelecimento_p,d.cd_estabelecimento)
		and		substr(obter_se_conta_vigente(a.cd_conta_contabil, b.dt_referencia), 1, 1) = 'S'
		and		coalesce(d.ie_gerar_sped, 'N') 	= 'S'
		and		b.nr_sequencia 				= nr_seq_mes_ant_w
		and	    e.ie_tipo					in ('R','C','D')
    	and	    coalesce(c.ie_tipo,'A')			= 'A'
    	and     a.vl_saldo                  <> 0
		and     not exists (
                            select  1
                            FROM ctb_movimento x
LEFT OUTER JOIN ctb_movto_centro_custo y ON (x.nr_sequencia = y.nr_seq_movimento)
WHERE x.nr_seq_mes_ref = nr_seq_mes_ref_p and x.dt_movimento between dt_inicial_w and dt_encerramento_p and x.cd_conta_debito = a.cd_conta_contabil  and coalesce(y.cd_centro_custo,0) = coalesce(a.cd_centro_custo,0)

union all

                            select  1
                            FROM ctb_movimento x
LEFT OUTER JOIN ctb_movto_centro_custo y ON (x.nr_sequencia = y.nr_seq_movimento)
WHERE x.nr_seq_mes_ref = nr_seq_mes_ref_p and x.dt_movimento between dt_inicial_w and dt_encerramento_p and x.cd_conta_credito = a.cd_conta_contabil  and coalesce(y.cd_centro_custo,0) = coalesce(a.cd_centro_custo,0)
                             )
        group by
			a.cd_conta_contabil,
			a.cd_centro_custo
		) z;

type ctb_movimento_w is table of ctb_movimento%rowtype index by integer;
movimento_w ctb_movimento_w;

type ctb_movto_centro_custo_w is table of ctb_movto_centro_custo%rowtype index by integer;
movto_centro_custo_w ctb_movto_centro_custo_w;

type c02_type is table of c02%rowtype;
c02_w c02_type;

type c03_type is table of c03%rowtype;
c03_w c03_type;

BEGIN

ie_gera_centro_custo_w := 'S';

select  a.dt_referencia,
		a.dt_abertura,
		a.dt_fechamento,
		b.qt_mes_fim_exercicio
into STRICT	dt_referencia_w,
		dt_abertura_w,
		dt_fechamento_w,
		qt_mes_fim_exerc_w
from	empresa b,
		ctb_mes_ref a
where	a.nr_sequencia	= nr_seq_mes_ref_p
and		a.cd_empresa	= b.cd_empresa;

dt_mesano_w				:= to_char(trunc(dt_referencia_w),'mmyyyy');
nr_seq_agrupamento_w	:= somente_numero(dt_mesano_w);

if (coalesce(dt_abertura_w::text, '') = '') or (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(282424);
end if;

if (coalesce(dt_encerramento_p::text, '') = '') then
    if (qt_mes_fim_exerc_w > 0) then
        if (campo_numerico(to_char(dt_referencia_w,'mm')) <> qt_mes_fim_exerc_w) then
            CALL wheb_mensagem_pck.exibir_mensagem_abort(282425);
        end if;
    elsif (mod((to_char(dt_inicial_w, 'mm'))::numeric ,abs(qt_mes_fim_exerc_w)) <> 0) then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(282425);
    end if;	
end if;

select	(coalesce(min(substr(coalesce(vl_parametro,vl_parametro_padrao),1,10)),'0'))::numeric
into STRICT	cd_tipo_lote_w
from	funcao_parametro
where	cd_funcao		= 923
and		nr_sequencia	= 6;

if (cd_tipo_lote_w = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(282427);
end if;

select 	coalesce(max(nr_lote_contabil), 0)
into STRICT	nr_lote_contabil_existe_w
from 	lote_contabil
where 	nr_seq_mes_ref 			= nr_seq_mes_ref_p
and 	ie_encerramento			= 'S'
and 	cd_tipo_lote_contabil 	= cd_tipo_lote_w
and 	cd_estabelecimento 		= cd_estabelecimento_p;

if (nr_lote_contabil_existe_w <> 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(325070, 'NR_LOTE_CONTABIL_EXISTE='||nr_lote_contabil_existe_w );
end if;


select	coalesce(max(nr_lote_contabil),0) + 1
into STRICT	nr_lote_contabil_w
from	lote_contabil;

dt_movimento_w		:= trunc(last_day(dt_referencia_w),'dd');

insert into lote_contabil(
	nr_lote_contabil,
	dt_referencia, 
	cd_tipo_lote_contabil,
	dt_atualizacao,
	nm_usuario, 
	cd_estabelecimento,
	ie_situacao, 
	vl_debito,
	vl_credito,
	dt_integracao,
	dt_atualizacao_saldo,
	dt_consistencia,
	nm_usuario_original,
	nr_seq_mes_ref,
	ie_encerramento,
	ds_observacao)
values (	nr_lote_contabil_w,
	coalesce(dt_encerramento_p,dt_movimento_w),
	cd_tipo_lote_w,
	clock_timestamp(),
	nm_usuario_p,
	cd_estabelecimento_p,
	'A',
	0,
	0,
	null,
	null,
	null,
	nm_usuario_p,
	nr_seq_mes_ref_p,
	'S',
	'');
	
if (coalesce(dt_encerramento_p::text, '') = '') then
	open c01;
	loop
	fetch c01 into
		cd_conta_contabil_w,
		cd_centro_custo_w,
		ie_debito_credito_w,
		vl_saldo_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		cd_conta_debito_w		:= null;
		cd_conta_credito_w		:= null;
		cd_classif_debito_w		:= null;
		cd_classif_credito_w	:= null;
		if (ie_debito_credito_w = 'C') then
			cd_conta_debito_w		:= cd_conta_contabil_w;
			cd_conta_credito_w		:= cd_conta_result_p;
		else
			cd_conta_credito_w		:= cd_conta_contabil_w;
			cd_conta_debito_w		:= cd_conta_result_p;
		end if;

		if (vl_saldo_w < 0) then
			vl_saldo_w				:= vl_saldo_w * -1;
			cd_conta_contabil_ww	:= cd_conta_debito_w;
			cd_conta_debito_w		:= cd_conta_credito_w;
			cd_conta_credito_w		:= cd_conta_contabil_ww;
		end if;

		cd_classif_debito_w		:= ctb_obter_classif_conta(cd_conta_debito_w, null, dt_referencia_w);
		cd_classif_credito_w	:= ctb_obter_classif_conta(cd_conta_credito_w, null, dt_referencia_w);
		
		if (vl_saldo_w <> 0) then
			select	nextval('ctb_movimento_seq')
			into STRICT	nr_seq_movimento_w
			;

			insert into ctb_movimento(
				nr_sequencia,
				nr_lote_contabil,
				nr_seq_mes_ref,
				dt_movimento,
				vl_movimento,
				dt_atualizacao,
				nm_usuario,
				cd_historico,
				cd_conta_debito,
				cd_conta_credito,
				ds_compl_historico,
				ie_revisado,
				cd_classif_debito,
				cd_classif_credito,
				nr_seq_agrupamento,
				cd_estabelecimento)
			values (	nr_seq_movimento_w,
				nr_lote_contabil_w,
				nr_seq_mes_ref_p,
				dt_movimento_w,
				vl_saldo_w,
				clock_timestamp(),
				nm_usuario_p,
				cd_historico_p,
				cd_conta_debito_w,
				cd_conta_credito_w,
				ds_compl_historico_w,
				'N',
				cd_classif_debito_w,
				cd_classif_credito_w,
				nr_seq_agrupamento_w,
				cd_estabelecimento_p);

			if (cd_centro_custo_w IS NOT NULL AND cd_centro_custo_w::text <> '') then
				begin
				insert into ctb_movto_centro_custo(
					nr_sequencia,
					nm_usuario,
					dt_atualizacao,
					nr_seq_movimento,
					cd_centro_custo,
					vl_movimento,
					pr_rateio)
				values (	nextval('ctb_movto_centro_custo_seq'),
					nm_usuario_p,
					clock_timestamp(),
					nr_seq_movimento_w,
					cd_centro_custo_w,
					vl_saldo_w,
					100);
				end;
			end if;
		end if;
		end;
	end loop;
	close c01;
else
	select	a.cd_empresa,
			a.nr_sequencia,
			a.dt_referencia
	into STRICT	cd_empresa_w,
			nr_seq_mes_ref_w,
			dt_inicio_mes_w
	from	ctb_mes_ref a
	where	a.nr_sequencia = nr_seq_mes_ref_p;

	dt_inicial_w 	:= trunc(dt_inicio_mes_w);

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_mes_ant_w
	from	ctb_mes_ref
	where	cd_empresa		= cd_empresa_w
	and		dt_referencia	= pkg_date_utils.start_of(pkg_date_utils.add_month(dt_inicio_mes_w,-1,0),'month',0);

	open c02;
	loop
	fetch c02 bulk collect into c02_w limit 1000;
		for i in 1 .. c02_w.count loop
			begin
			cd_conta_debito_w		:= null;
			cd_conta_credito_w		:= null;
			cd_classif_debito_w		:= null;
			cd_classif_credito_w	:= null;

			if (c02_w[i].ie_debito_credito = 'C') then
				cd_conta_debito_w		:= c02_w[i].cd_conta_contabil;
				cd_conta_credito_w		:= cd_conta_result_p;
			else
				cd_conta_credito_w		:= c02_w[i].cd_conta_contabil;
				cd_conta_debito_w		:= cd_conta_result_p;
			end if;

			select coalesce(sum(a.vl_saldo),0)
			into STRICT	vl_saldo_ini_w -- Saldo do mes anterior
			from	ctb_saldo a
			where	a.nr_seq_mes_ref							= nr_seq_mes_ant_w
			and		obter_empresa_estab(a.cd_estabelecimento) 	= cd_empresa_w
			and		a.cd_estabelecimento 						= coalesce(cd_estabelecimento_p,a.cd_estabelecimento)
			and		a.cd_conta_contabil							= c02_w[i].cd_conta_contabil
			and		coalesce(a.cd_centro_custo,0)					= coalesce(c02_w[i].cd_centro_custo,0);

            vl_saldo_fin_w                  := vl_saldo_ini_w + c02_w[i].vl_saldo;
            vl_saldo_ini_w                  := abs(vl_saldo_ini_w);
            ie_debito_credito_w_aux         := ctb_obter_situacao_saldo(c02_w[i].cd_conta_contabil, vl_saldo_fin_w);

            if (ie_debito_credito_w_aux <> c02_w[i].ie_debito_credito) then
                c02_w[i].ie_debito_credito  := ie_debito_credito_w_aux;

                if (c02_w[i].ie_debito_credito = 'C') then
                    cd_conta_debito_w	    := c02_w[i].cd_conta_contabil;
                    cd_conta_credito_w	    := cd_conta_result_p;
                else
                    cd_conta_credito_w      := c02_w[i].cd_conta_contabil;
                    cd_conta_debito_w       := cd_conta_result_p;
                end if;

            end if;

            vl_saldo_fin_w                  := abs(vl_saldo_fin_w);
            c02_w[i].vl_saldo               := vl_saldo_fin_w;

            cd_classif_debito_w             := ctb_obter_classif_conta(cd_conta_debito_w, null, dt_referencia_w);
            cd_classif_credito_w            := ctb_obter_classif_conta(cd_conta_credito_w, null, dt_referencia_w);

            if (vl_saldo_fin_w > 0) then
                movimento_w[movimento_w.count + 1].nr_sequencia			:= c02_w[i].nr_seq_movto;
                movimento_w[movimento_w.count].nr_lote_contabil		:= nr_lote_contabil_w;
                movimento_w[movimento_w.count].nr_seq_mes_ref		:= nr_seq_mes_ref_w;
                movimento_w[movimento_w.count].dt_movimento			:= dt_encerramento_p;
                -- movimento_w(movimento_w.count).vl_movimento			:= c02_w(i).vl_saldo;
                movimento_w[movimento_w.count].vl_movimento	:= vl_saldo_fin_w;
                movimento_w[movimento_w.count].dt_atualizacao		:= clock_timestamp();
                movimento_w[movimento_w.count].nm_usuario			:= nm_usuario_p;
                movimento_w[movimento_w.count].cd_historico			:= cd_historico_p;
                movimento_w[movimento_w.count].cd_conta_debito		:= cd_conta_debito_w;
                movimento_w[movimento_w.count].cd_conta_credito		:= cd_conta_credito_w;
                movimento_w[movimento_w.count].ds_compl_historico	:= ds_compl_historico_w;
                movimento_w[movimento_w.count].ie_revisado			:= 'N';
                movimento_w[movimento_w.count].cd_classif_debito	:= cd_classif_debito_w;
                movimento_w[movimento_w.count].cd_classif_credito	:= cd_classif_credito_w;
                movimento_w[movimento_w.count].nr_seq_agrupamento	:= nr_seq_agrupamento_w;
                movimento_w[movimento_w.count].cd_estabelecimento	:= cd_estabelecimento_p;
            end if;
			end;
		end loop;
		forall i in movimento_w.first .. movimento_w.last
		insert into ctb_movimento values movimento_w(i);
		commit;
        movimento_w.delete;
		for m in 1 .. c02_w.count loop
			begin
                if (c02_w[m](.cd_centro_custo IS NOT NULL AND .cd_centro_custo::text <> '')) and (movimento_w.exists(c02_w[m].nr_seq_movto)) then
                    begin

                    select	nextval('ctb_movto_centro_custo_seq')
                    into STRICT	nr_seq_centro_custo_w
;

                    movto_centro_custo_w[movto_centro_custo_w.count + 1].nr_sequencia		:= nr_seq_centro_custo_w;
                    movto_centro_custo_w[movto_centro_custo_w.count].nm_usuario 			:= nm_usuario_p;
                    movto_centro_custo_w[movto_centro_custo_w.count].dt_atualizacao 		:= clock_timestamp();
                    movto_centro_custo_w[movto_centro_custo_w.count].nr_seq_movimento 	:= c02_w[m].nr_seq_movto;
                    movto_centro_custo_w[movto_centro_custo_w.count].cd_centro_custo 	:= c02_w[m].cd_centro_custo;
                    movto_centro_custo_w[movto_centro_custo_w.count].vl_movimento 		:= c02_w[m].vl_saldo;
                    movto_centro_custo_w[movto_centro_custo_w.count].pr_rateio 			:= 100;
                    end;
                end if;
			end;
		end loop;
		forall m in movto_centro_custo_w.first .. movto_centro_custo_w.last
		insert into ctb_movto_centro_custo values movto_centro_custo_w(m);
		commit;
        movto_centro_custo_w.delete;
	EXIT WHEN NOT FOUND; /* apply on c02 */
	end loop;
	close c02;

	open c03;
	loop
	fetch c03 bulk collect into c03_w limit 1000;
		for y in 1 .. c03_w.count loop
			begin
			cd_conta_debito_w		:= null;
			cd_conta_credito_w		:= null;
			cd_classif_debito_w		:= null;
			cd_classif_credito_w	:= null;

			if (c03_w[y].ie_debito_credito = 'C') then
				cd_conta_debito_w		:= c03_w[y].cd_conta_contabil;
				cd_conta_credito_w		:= cd_conta_result_p;
			else
				cd_conta_credito_w		:= c03_w[y].cd_conta_contabil;
				cd_conta_debito_w		:= cd_conta_result_p;
			end if;

			if (c03_w[y].vl_saldo < 0) then
				c03_w[y].vl_saldo		:= c03_w[y].vl_saldo * -1;
			end if;
				
			cd_classif_debito_w		:= ctb_obter_classif_conta(cd_conta_debito_w, null, dt_referencia_w);
			cd_classif_credito_w	:= ctb_obter_classif_conta(cd_conta_credito_w, null, dt_referencia_w);

			vl_saldo_fin_w 			:= c03_w[y].vl_saldo;

			movimento_w[y].nr_sequencia			:= c03_w[y].nr_seq_movto;
			movimento_w[y].nr_lote_contabil		:= nr_lote_contabil_w;
			movimento_w[y].nr_seq_mes_ref		:= nr_seq_mes_ref_w;
			movimento_w[y].dt_movimento			:= dt_encerramento_p;
			movimento_w[y].vl_movimento			:= vl_saldo_fin_w;
			movimento_w[y].dt_atualizacao		:= clock_timestamp();
			movimento_w[y].nm_usuario			:= nm_usuario_p;
			movimento_w[y].cd_historico			:= cd_historico_p;
			movimento_w[y].cd_conta_debito		:= cd_conta_debito_w;
			movimento_w[y].cd_conta_credito		:= cd_conta_credito_w;
			movimento_w[y].ds_compl_historico	:= ds_compl_historico_w;
			movimento_w[y].ie_revisado			:= 'N';
			movimento_w[y].cd_classif_debito	:= cd_classif_debito_w;
			movimento_w[y].cd_classif_credito	:= cd_classif_credito_w;
			movimento_w[y].nr_seq_agrupamento	:= nr_seq_agrupamento_w;
			movimento_w[y].cd_estabelecimento	:= cd_estabelecimento_p;
			end;
		end loop;
		forall y in movimento_w.first .. movimento_w.last
		insert into ctb_movimento values movimento_w(y);
		commit;
        movimento_w.delete;
		for c in 1 .. c03_w.count loop
			begin
			if (c03_w[c](.cd_centro_custo IS NOT NULL AND .cd_centro_custo::text <> '')) then
				begin

				select	nextval('ctb_movto_centro_custo_seq')
				into STRICT	nr_seq_centro_custo_w
				;

				movto_centro_custo_w[movto_centro_custo_w.count + 1].nr_sequencia		:= nr_seq_centro_custo_w;
				movto_centro_custo_w[movto_centro_custo_w.count].nm_usuario 			:= nm_usuario_p;
				movto_centro_custo_w[movto_centro_custo_w.count].dt_atualizacao 		:= clock_timestamp();
				movto_centro_custo_w[movto_centro_custo_w.count].nr_seq_movimento 	:= c03_w[c].nr_seq_movto;
				movto_centro_custo_w[movto_centro_custo_w.count].cd_centro_custo 	:= c03_w[c].cd_centro_custo;
				movto_centro_custo_w[movto_centro_custo_w.count].vl_movimento 		:= c03_w[c].vl_saldo;
				movto_centro_custo_w[movto_centro_custo_w.count].pr_rateio 			:= 100;
				end;
			end if;
			end;
		end loop;
		forall c in movto_centro_custo_w.first .. movto_centro_custo_w.last
		insert into ctb_movto_centro_custo values movto_centro_custo_w(c);
		commit;
        movto_centro_custo_w.delete;
	EXIT WHEN NOT FOUND; /* apply on c03 */
	end loop;
	close c03;
end if;	

if (coalesce(nr_lote_contabil_w,0) <> 0) then
	update	lote_contabil
	set 	ds_observacao = substr(wheb_mensagem_pck.get_texto(799265) || ' ' || cd_conta_result_p || wheb_mensagem_pck.get_texto(799268) || ' ' || cd_historico_p,1,2000)
	where 	nr_lote_contabil = nr_lote_contabil_w;
end if;
	
commit;

ds_erro_w := ctb_consistir_lote(nr_lote_contabil_w, ds_erro_w, nm_usuario_p);
if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(278178,'DS_ERRO='||ds_erro_w );
end if;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_encerrar_exercicio ( cd_estabelecimento_p bigint, nr_seq_mes_ref_p bigint, cd_historico_p bigint, cd_conta_result_p text, nm_usuario_p text, dt_encerramento_p timestamp) FROM PUBLIC;

