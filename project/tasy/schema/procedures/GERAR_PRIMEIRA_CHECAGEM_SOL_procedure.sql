-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_primeira_checagem_sol ( nr_prescricao_p bigint, nr_seq_item_p bigint, ie_tipo_solucao_p bigint, nr_horario_evento_p bigint, nm_usuario_p text, ie_acao_p bigint, ds_observacao_p text default null, nr_seq_assinatura_p tasy_assinatura_digital.nr_sequencia%type default null, ie_tipo_analgesia_p text default null, ie_pca_modo_prog_p text default null, qt_vol_infusao_pca_p bigint default null, ie_um_fluxo_pca_p text default null, qt_bolus_pca_p bigint default null, ie_um_bolus_pca_p text default null, qt_intervalo_bloqueio_p bigint default null, qt_dose_inicial_pca_p bigint default null, ie_um_dose_inicio_pca_p text default null, qt_limite_quatro_hora_p bigint default null, ie_um_limite_pca_p text default null, qt_limite_uma_hora_p bigint default null, ie_um_limite_hora_pca_p text default null, cd_funcao_p prescr_solucao_evento.cd_funcao%type default null, ds_justificativa_p text default null, qt_dosagem_p bigint default null, qt_volume_fase_p bigint default null) AS $body$
DECLARE


ie_gerou_evento_w			boolean;
dt_horario_w				timestamp;
nr_sequencia_w				bigint;
nr_etapa_atual_sol_w		bigint;
ie_existe_evento_w			varchar(1);
ie_gera_sem_certificado_w	varchar(1);
ie_existe_etapa_anterior_w	varchar(1);
ie_tipo_item_w				varchar(3);
nr_etapa_atual_w			prescr_solucao.nr_etapas%type;
nr_seq_horario_w			prescr_mat_hor.nr_sequencia%type;
nr_seq_evento_w				prescr_solucao_evento.nr_sequencia%type;
cd_pessoa_fisica_w			pessoa_fisica.cd_pessoa_fisica%type;
nr_atendimento_w			atendimento_paciente.nr_atendimento%type;
cd_certificado_w			usuario.cd_certificado%type;
nr_seq_proj_assin_w			tasy_projeto_assinatura.nr_sequencia%type;
nr_seq_solucao_w			prescr_solucao.nr_seq_solucao%type;


BEGIN
ie_gerou_evento_w	:= false;

if (ie_tipo_solucao_p = 1)  then
	ie_tipo_item_w	:= 'SOL';

	if (nr_horario_evento_p IS NOT NULL AND nr_horario_evento_p::text <> '') and (nr_horario_evento_p > 0 )then
		
		select	coalesce(max(nr_etapa_sol),0),
				max(dt_horario)
		into STRICT	nr_etapa_atual_sol_w,
				dt_horario_w
		from	prescr_mat_hor
		where	nr_sequencia = nr_horario_evento_p;
				
		select	coalesce(max('S'), 'N')
		into STRICT	ie_existe_etapa_anterior_w	
		from	prescr_mat_hor
		where	nr_prescricao = nr_prescricao_p
		and		nr_seq_solucao = nr_seq_item_p
		and		dt_horario < dt_horario_w
		and		coalesce(coalesce(dt_fim_horario, dt_suspensao, dt_inicio_horario)::text, '') = ''
		and		coalesce(ie_horario_especial, 'N') <> 'S'
		and		ie_agrupador = 4;
	
	    if (ie_existe_etapa_anterior_w = 'S') then			
			CALL wheb_mensagem_pck.exibir_mensagem_abort(1047492);
		end if;
				
	else
		nr_etapa_atual_sol_w := obter_etapa_atual(nr_prescricao_p, nr_seq_item_p);
	end if;

	if (coalesce(nr_etapa_atual_sol_w::text, '') = '') then
		nr_etapa_atual_sol_w := nr_horario_evento_p;
	end if;	
	
	if (nr_etapa_atual_sol_w = 0) then
		nr_etapa_atual_sol_w := obter_etapa_atual(nr_prescricao_p, nr_seq_item_p);
	end if;	
	
	--Quando for reinicio
	if	((coalesce(ie_acao_p,0) > 0) and (coalesce(nr_etapa_atual_sol_w,0) > 0) and (ie_acao_p = 3) and (nr_horario_evento_p = 0)) then
		nr_etapa_atual_sol_w	:= nr_etapa_atual_sol_w +1;
	end if;
	
		
	--Tratamento criado para verificar se a etapa que esta sendo efetuada a acao nao esta suspensa
	select	min(a.nr_etapa_sol),
			max(a.nr_seq_solucao)
	into STRICT	nr_etapa_atual_w,
			nr_seq_solucao_w
	from	prescr_mat_hor a
	where	a.nr_prescricao = nr_prescricao_p
	and		a.nr_seq_solucao = nr_seq_item_p
	and		a.nr_etapa_sol >= nr_etapa_atual_sol_w
	and		coalesce(a.dt_suspensao::text, '') = ''
	and		coalesce(a.ie_horario_especial,'N') <> 'S'
	and		coalesce(a.dt_inicio_horario::text, '') = '';

    select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_evento_w
	from	prescr_solucao_evento
	where	nr_prescricao = nr_prescricao_p
	and		nr_seq_solucao = nr_seq_item_p
	and		nr_etapa_evento = nr_etapa_atual_w
	and		ie_alteracao = 37
	and		coalesce(ie_evento_valido,'S') = 'S';
	ie_existe_evento_w	:= 'N';

    if (nr_seq_evento_w > 0) then
		ie_existe_evento_w	:= 'S';

		update	prescr_solucao_evento	a
		set		a.nr_seq_assinatura	= nr_seq_assinatura_p
		where	a.nr_sequencia		= nr_seq_evento_w;

		GET DIAGNOSTICS ie_gerou_evento_w = ROW_COUNT > 0;
	end if;
		
	update	prescr_mat_hor
	set		dt_primeira_checagem 	= clock_timestamp(),
			nm_usuario 				= nm_usuario_p
	where	nr_prescricao 			= nr_prescricao_p
	and		nr_seq_solucao 			= nr_seq_item_p
	and		nr_etapa_sol 			= nr_etapa_atual_w;

    begin
	if (ie_existe_evento_w = 'N') then
	
		select	nextval('prescr_solucao_evento_seq')
		into STRICT	nr_sequencia_w
		;

		/* gerar evento */

		insert into prescr_solucao_evento(
						nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_prescricao,
						nr_seq_solucao,
						cd_pessoa_fisica,
						ie_alteracao,
						dt_alteracao,
						ie_evento_valido,
						ie_tipo_solucao,
						nr_etapa_evento,
						ds_observacao,
						nr_seq_assinatura,
						ie_tipo_analgesia,
						ie_pca_modo_prog,
						qt_vol_infusao_pca,
						ie_um_fluxo_pca,
						qt_bolus_pca,
						ie_um_bolus_pca,
						qt_intervalo_bloqueio,
						qt_dose_inicial_pca,
						ie_um_dose_inicio_pca,
						qt_limite_quatro_hora,
						ie_um_limite_pca,
						qt_limite_uma_hora,
						ie_um_limite_hora_pca,
						cd_funcao,
						ds_justificativa,
						qt_dosagem)
				values (
						nr_sequencia_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_prescricao_p,
						nr_seq_item_p,
						obter_dados_usuario_opcao(nm_usuario_p, 'C'),
						37,
						clock_timestamp(),
						'S',
						ie_tipo_solucao_p,
						nr_etapa_atual_w,
						ds_observacao_p,
						nr_seq_assinatura_p,
						ie_tipo_analgesia_p,
						ie_pca_modo_prog_p,
						qt_vol_infusao_pca_p,
						ie_um_fluxo_pca_p,
						qt_bolus_pca_p,
						ie_um_bolus_pca_p,
						qt_intervalo_bloqueio_p,
						qt_dose_inicial_pca_p,
						ie_um_dose_inicio_pca_p,
						qt_limite_quatro_hora_p,
						ie_um_limite_pca_p,
						qt_limite_uma_hora_p,
						ie_um_limite_hora_pca_p,
						cd_funcao_p,
						ds_justificativa_p,
						qt_dosagem_p);
						
		GET DIAGNOSTICS ie_gerou_evento_w = ROW_COUNT > 0;
	end if;
					
	exception when others then
		null;
	end;
elsif (ie_tipo_solucao_p = 2) then
	ie_tipo_item_w	:= 'SNE';

	nr_etapa_atual_sol_w	:= obter_etapa_atual_sne(nr_prescricao_p,nr_seq_item_p);
	
	if (nr_etapa_atual_sol_w = 0) then
		nr_etapa_atual_sol_w	:= nr_etapa_atual_sol_w + 1;
	end if;
	
	nr_etapa_atual_w	:= nr_etapa_atual_sol_w;

	select	min(nr_etapa_sol),
			max(nr_seq_solucao)
	into STRICT	nr_etapa_atual_w,
			nr_seq_solucao_w
	from	prescr_mat_hor
	where	nr_prescricao 	= nr_prescricao_p
	and		nr_seq_material = nr_seq_item_p
	and		nr_etapa_sol 	>= nr_etapa_atual_sol_w
	and		coalesce(dt_suspensao::text, '') = ''
	and		coalesce(ie_horario_especial,'N') <> 'S'
	and		coalesce(dt_inicio_horario::text, '') = '';

	update	prescr_mat_hor
	set		dt_primeira_checagem 	= clock_timestamp(),
			nm_usuario 				= nm_usuario_p
	where	nr_prescricao 			= nr_prescricao_p
	and		nr_seq_material			= nr_seq_item_p
	and		nr_etapa_sol 			= nr_etapa_atual_w
	and		coalesce(dt_fim_horario::text, '') = '';

	select	nextval('prescr_solucao_evento_seq')
	into STRICT		nr_sequencia_w
	;

	/* gerar evento */

	insert into prescr_solucao_evento(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_prescricao,
					nr_seq_material,
					cd_pessoa_fisica,
					ie_alteracao,
					dt_alteracao,
					ie_evento_valido,
					ie_tipo_solucao,
					nr_etapa_evento,
					ds_observacao,
					nr_seq_assinatura,
					ie_tipo_analgesia,
					ie_pca_modo_prog,
					qt_vol_infusao_pca,
					ie_um_fluxo_pca,
					qt_bolus_pca,
					ie_um_bolus_pca,
					qt_intervalo_bloqueio,
					qt_dose_inicial_pca,
					ie_um_dose_inicio_pca,
					qt_limite_quatro_hora,
					ie_um_limite_pca,
					qt_limite_uma_hora,
					ie_um_limite_hora_pca,
					cd_funcao,
					ds_justificativa,
					qt_dosagem,
					qt_volume_fase)
				values (
					nr_sequencia_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_prescricao_p,
					nr_seq_item_p,
					obter_dados_usuario_opcao(nm_usuario_p, 'C'),
					37,
					clock_timestamp(),
					'S',
					ie_tipo_solucao_p,
					nr_etapa_atual_w,
					ds_observacao_p,
					nr_seq_assinatura_p,
					ie_tipo_analgesia_p,
					ie_pca_modo_prog_p,
					qt_vol_infusao_pca_p,
					ie_um_fluxo_pca_p,
					qt_bolus_pca_p,
					ie_um_bolus_pca_p,
					qt_intervalo_bloqueio_p,
					qt_dose_inicial_pca_p,
					ie_um_dose_inicio_pca_p,
					qt_limite_quatro_hora_p,
					ie_um_limite_pca_p,
					qt_limite_uma_hora_p,
					ie_um_limite_hora_pca_p,
					cd_funcao_p,
					ds_justificativa_p,
					qt_dosagem_p,
					qt_volume_fase_p);

		GET DIAGNOSTICS ie_gerou_evento_w = ROW_COUNT > 0;				
				
elsif (ie_tipo_solucao_p = 3) then
	ie_tipo_item_w	:= 'HM';
	
	nr_etapa_atual_sol_w	:= obter_etapa_atual_proc(nr_prescricao_p,nr_seq_item_p);
	
	if (nr_etapa_atual_sol_w = 0) then
		nr_etapa_atual_sol_w	:= nr_etapa_atual_sol_w + 1;
	end if;
	
	select	min(a.nr_etapa)
	into STRICT	nr_etapa_atual_w
	from	prescr_proc_hor a
	where	a.nr_prescricao = nr_prescricao_p
	and	a.nr_seq_procedimento = nr_seq_item_p
	and	a.nr_etapa >= nr_etapa_atual_sol_w
	and	coalesce(a.dt_suspensao::text, '') = ''
	and	coalesce(a.ie_horario_especial,'N') <> 'S'
	and	coalesce(a.dt_inicio_horario::text, '') = '';

	select  max(nr_sequencia)
	into STRICT	nr_seq_horario_w
	from    prescr_proc_hor
	where   nr_prescricao 	= nr_prescricao_p
	and     nr_seq_procedimento = nr_seq_item_p
	and     nr_etapa 	= nr_etapa_atual_w;

	update	prescr_proc_hor
	set	dt_primeira_checagem 	= clock_timestamp(),
		nm_usuario 		= nm_usuario_p
	where	nr_prescricao 		= nr_prescricao_p
	and	nr_seq_procedimento 	= nr_seq_item_p
	and	nr_sequencia 		= nr_seq_horario_w
	and	coalesce(dt_fim_horario::text, '') = '';

	select	nextval('prescr_solucao_evento_seq')
	into STRICT		nr_sequencia_w
	;

	/* gerar evento */

	insert into prescr_solucao_evento(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_prescricao,
					nr_seq_procedimento,
					cd_pessoa_fisica,
					ie_alteracao,
					dt_alteracao,
					ie_evento_valido,
					ie_tipo_solucao,
					nr_etapa_evento,
					ds_observacao,
					nr_seq_assinatura,
					ie_tipo_analgesia,
					ie_pca_modo_prog,
					qt_vol_infusao_pca,
					ie_um_fluxo_pca,
					qt_bolus_pca,
					ie_um_bolus_pca,
					qt_intervalo_bloqueio,
					qt_dose_inicial_pca,
					ie_um_dose_inicio_pca,
					qt_limite_quatro_hora,
					ie_um_limite_pca,
					qt_limite_uma_hora,
					ie_um_limite_hora_pca,
					cd_funcao,
					qt_dosagem,
					ds_justificativa,
					qt_volume_fase)
			values (
					nr_sequencia_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_prescricao_p,
					nr_seq_item_p,
					obter_dados_usuario_opcao(nm_usuario_p, 'C'),
					37,
					clock_timestamp(),
					'S',
					ie_tipo_solucao_p,
					nr_etapa_atual_w,
					ds_observacao_p,
					nr_seq_assinatura_p,
					ie_tipo_analgesia_p,
					ie_pca_modo_prog_p,
					qt_vol_infusao_pca_p,
					ie_um_fluxo_pca_p,
					qt_bolus_pca_p,
					ie_um_bolus_pca_p,
					qt_intervalo_bloqueio_p,
					qt_dose_inicial_pca_p,
					ie_um_dose_inicio_pca_p,
					qt_limite_quatro_hora_p,
					ie_um_limite_pca_p,
					qt_limite_uma_hora_p,
					ie_um_limite_hora_pca_p,
					cd_funcao_p,
					qt_dosagem_p,
					ds_justificativa_p,
					qt_volume_fase_p);
		GET DIAGNOSTICS ie_gerou_evento_w = ROW_COUNT > 0;
end if;


if	((ie_gerou_evento_w) and (coalesce(obter_data_assinatura_digital(nr_seq_assinatura_p)::text, '') = '')) then	
	CALL adep_gerar_pend_prim_checagem(	nr_seq_projeto_p	=> 35007, --ADEP - ADL -  Administracao do item
									nr_prescricao_p		=> nr_prescricao_p,
									ie_tipo_item_p		=> ie_tipo_item_w,
									nr_seq_horario_p	=> nr_seq_horario_w,
									nm_usuario_p		=> nm_usuario_p,
									nr_seq_item_adep_p	=> nr_seq_solucao_w);

end if;

commit;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_primeira_checagem_sol ( nr_prescricao_p bigint, nr_seq_item_p bigint, ie_tipo_solucao_p bigint, nr_horario_evento_p bigint, nm_usuario_p text, ie_acao_p bigint, ds_observacao_p text default null, nr_seq_assinatura_p tasy_assinatura_digital.nr_sequencia%type default null, ie_tipo_analgesia_p text default null, ie_pca_modo_prog_p text default null, qt_vol_infusao_pca_p bigint default null, ie_um_fluxo_pca_p text default null, qt_bolus_pca_p bigint default null, ie_um_bolus_pca_p text default null, qt_intervalo_bloqueio_p bigint default null, qt_dose_inicial_pca_p bigint default null, ie_um_dose_inicio_pca_p text default null, qt_limite_quatro_hora_p bigint default null, ie_um_limite_pca_p text default null, qt_limite_uma_hora_p bigint default null, ie_um_limite_hora_pca_p text default null, cd_funcao_p prescr_solucao_evento.cd_funcao%type default null, ds_justificativa_p text default null, qt_dosagem_p bigint default null, qt_volume_fase_p bigint default null) FROM PUBLIC;

