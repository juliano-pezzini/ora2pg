-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_gestao_vaga ( nr_seq_agenda_p bigint, nm_usuario_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


cd_tipo_acomodacao_w		smallint;
cd_procedimento_w			bigint;
cd_convenio_w				integer;
nr_seq_gestao_vaga_w		bigint	:=0;
qt_diaria_prev_w			smallint;
cd_estab_agenda_w			smallint	:= null;
cd_estab_gestao_w			smallint;
cd_agenda_w       			bigint;
ie_origem_proced_w			bigint;
nr_seq_proc_interno_w		bigint;
cd_medico_w		   	 		varchar(10);
cd_categoria_w				varchar(10);
cd_plano_w					varchar(10);
cd_usuario_convenio_w		varchar(30);
cd_pessoa_fisica_w			varchar(10);
nm_paciente_w				varchar(255);
nr_telefone_w				varchar(255);
cd_doenca_cid_w				varchar(10);
ie_estab_agenda_w			varchar(1);
ds_retorno_w				varchar(2000);
ie_status_aguardando_w		varchar(1);
ie_status_w					varchar(1)	:=null;
ds_setor_desejado_w			varchar(255);
cd_unidade_basica_w			varchar(10);
cd_unidade_compl_w			varchar(10);
ie_status_gv_w				varchar(1);
ie_commit_w					varchar(1)	:= 'N';
ie_status_agenda_w			varchar(3);
ie_desfazer_cancelamento_w	varchar(1);
ds_leito_w					varchar(275);
dt_validade_carteira_w		timestamp;
hr_inicio_w					timestamp;
dt_chegada_prev_w			timestamp;
dt_prevista_w				timestamp;
ie_consistencia_w			varchar(255);
ie_espec_valid_w			varchar(255);
ie_cid_valid_w				varchar(255);
nr_atendimento_w			bigint;
ie_tipo_vagas_w				varchar(255);
ie_solicitacao_w			varchar(255);
cd_especialidade_medica_w	paciente_espera.cd_especialidade_medica%type;
nr_seq_regra_regu_w  bigint;

C01 CURSOR FOR
	SELECT 	distinct
			a.cd_medico,
			a.cd_tipo_acomodacao,
			a.cd_procedimento,
			a.ie_origem_proced,
			a.cd_convenio, 
			a.cd_categoria,
			a.cd_plano, 
			a.cd_usuario_convenio, 
			a.dt_validade_carteira, 
			a.hr_inicio, 
			a.qt_diaria_prev, 
			b.nr_sequencia nr_seq_gestao_vaga,
			a.dt_chegada_prev,
			a.cd_pessoa_fisica, 
			a.nm_paciente,
			a.nr_telefone,
			a.cd_doenca_cid,
			b.dt_prevista,
			obter_nome_setor(b.cd_setor_desejado),
			cd_unidade_basica,
			cd_unidade_compl,
			b.ie_status,
			a.ie_status_agenda,
			a.cd_agenda,
			a.nr_seq_proc_interno,
			a.nr_atendimento,
			b.cd_especialidade,
			b.ie_tipo_vaga,
			b.ie_solicitacao
	from 	agenda_paciente a,
			gestao_vaga b
	where 	a.nr_sequencia = b.nr_seq_agenda
	  and 	a.nr_sequencia = nr_seq_agenda_p;


BEGIN

-- ANALISAR TAMBEM O TRATAMENTO DE MENSAGEM NA PROCEDURE "GERAR_VAGA_AGENDA_CIRURGICA", PARA VER SE O NUMERO JA NAO EXISTE NESTA PROCEDURE

-- ANALISAR TAMBEM O TRATAMENTO DE MENSAGEM NA PROCEDURE "GERAR_VAGA_AGENDA_CIRURGICA", PARA VER SE O NUMERO JA NAO EXISTE NESTA PROCEDURE

-- ANALISAR TAMBEM O TRATAMENTO DE MENSAGEM NA PROCEDURE "GERAR_VAGA_AGENDA_CIRURGICA", PARA VER SE O NUMERO JA NAO EXISTE NESTA PROCEDURE

-- ANALISAR TAMBEM O TRATAMENTO DE MENSAGEM NA PROCEDURE "GERAR_VAGA_AGENDA_CIRURGICA", PARA VER SE O NUMERO JA NAO EXISTE NESTA PROCEDURE
ie_estab_agenda_w := Obter_Param_Usuario(871, 410, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_estab_agenda_w);
ie_status_aguardando_w := Obter_Param_Usuario(871, 427, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_status_aguardando_w);
ie_desfazer_cancelamento_w := Obter_Param_Usuario(1002, 91, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_desfazer_cancelamento_w);

open C01;
loop
fetch C01 into	
	cd_medico_w,
	cd_tipo_acomodacao_w, 
	cd_procedimento_w, 
	ie_origem_proced_w,
	cd_convenio_w, 
	cd_categoria_w, 
	cd_plano_w, 
	cd_usuario_convenio_w, 
	dt_validade_carteira_w, 
	hr_inicio_w,
	qt_diaria_prev_w,
	nr_seq_gestao_vaga_w,
	dt_chegada_prev_w,
	cd_pessoa_fisica_w,
	nm_paciente_w,
	nr_telefone_w,
	cd_doenca_cid_w,
	dt_prevista_w,
	ds_setor_desejado_w,
	cd_unidade_basica_w,
	cd_unidade_compl_w,
	ie_status_gv_w,
	ie_status_agenda_w,
	cd_agenda_w,
	nr_seq_proc_interno_w,
	nr_atendimento_w,
	cd_especialidade_medica_w,
	ie_tipo_vagas_w,
	ie_solicitacao_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (coalesce(nr_seq_gestao_vaga_w,0) > 0) then
		ie_commit_w := 'S';

		SELECT * FROM obter_reg_regulacao_gest_vagas(ie_solicitacao_w, ie_tipo_vagas_w, ie_espec_valid_w, ie_cid_valid_w) INTO STRICT ie_espec_valid_w, ie_cid_valid_w;

		select	max(nr_sequencia)
		into STRICT 	nr_seq_regra_regu_w
		from	regulacao_atend
		where nr_seq_gestao_vaga = nr_seq_gestao_vaga_w;

		if (ie_estab_agenda_w = 'S') then
			select	max(a.cd_estabelecimento)
			into STRICT	cd_estab_agenda_w
			from	agenda a,
				agenda_paciente b
			where	a.cd_agenda 	= b.cd_agenda
			and	b.nr_sequencia 	= nr_seq_agenda_p;
		end if;
		if (cd_estab_agenda_w IS NOT NULL AND cd_estab_agenda_w::text <> '') then
			-- Caso o estabelecimento da agenda ser diferente do estabelecimento atual da gestao, deve-se cancelar a vaga e gerar uma nova vaga no estabelecimento da agenda. 
			select	max(cd_estabelecimento)
			into STRICT	cd_estab_gestao_w
			from	gestao_vaga
			where	nr_sequencia = nr_seq_gestao_vaga_w;
			
			if (cd_estab_gestao_w IS NOT NULL AND cd_estab_gestao_w::text <> '') and (cd_estab_gestao_w <> cd_estab_agenda_w) then
				CALL cancelar_gestao_vaga(nr_seq_agenda_p,null,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
				update	gestao_vaga
				set	nr_seq_agenda  = NULL
				where	nr_seq_agenda = nr_seq_agenda_p;
				ds_retorno_w := gerar_vaga_agenda_cirurgica(nr_seq_agenda_p, cd_estab_gestao_w, nm_usuario_p, ds_retorno_w);
			else	
				if (ie_status_aguardando_w = 'S') and
					((ie_status_gv_w = 'R') or (ie_status_gv_w = 'P')) then -- Somente sera alterado o status quando a data prevista for em dia diferente da data da agenda, momento da transferencia de agendamento
					if (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_prevista_w) <> ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(dt_chegada_prev_w, hr_inicio_w))) then
						CALL Desfazer_reserva_leito(nr_seq_gestao_vaga_w,nm_usuario_p);
						ds_leito_w		:= substr(ds_setor_desejado_w || ' ' || cd_unidade_basica_w || ' ' || cd_unidade_compl_w, 1, 275);
						ds_retorno_w	:= wheb_mensagem_pck.get_texto(300451, 'DS_LEITO=' || ds_leito_w || ';NM_PACIENTE_W=' || nm_paciente_w);	
					end if;	
				end if;
				
				if (coalesce(ie_desfazer_cancelamento_w,'N') = 'S') then
						if (ie_status_agenda_w <> 'C') and (ie_status_gv_w = 'C') and (obter_tipo_agenda(cd_agenda_w) = 1) then
							update 	gestao_vaga
							set	ie_status = 'A',
								nr_seq_motivo_cancel  = NULL
							where	nr_sequencia	= nr_seq_gestao_vaga_w;
						end if;
				end if;
				
				update 	gestao_vaga
				set	cd_medico				= cd_medico_w,
					cd_tipo_acomod_atual	= cd_tipo_acomodacao_w,
					cd_procedimento			= cd_procedimento_w,
					ie_origem_proced		= ie_origem_proced_w,
					nr_seq_proc_interno		= nr_seq_proc_interno_w,
					cd_convenio				= coalesce(cd_convenio_w,cd_convenio),
					cd_categoria			= coalesce(cd_categoria_w,cd_categoria),
					cd_plano_convenio		= coalesce(cd_plano_w,cd_plano_convenio),
					ds_cod_usuario			= coalesce(cd_usuario_convenio_w, ds_cod_usuario),
					dt_validade				= dt_validade_carteira_w,
					dt_prevista				= coalesce(dt_chegada_prev_w, hr_inicio_w),	
					qt_dia					= qt_diaria_prev_w,
					nr_seq_agenda			= nr_seq_agenda_p,
					cd_pessoa_fisica 		= cd_pessoa_fisica_w,
					nm_paciente 			= nm_paciente_w,
					nr_telefone 			= nr_telefone_w,
					cd_cid_principal		= cd_doenca_cid_w,
					cd_estabelecimento		= coalesce(cd_estab_agenda_w,cd_estabelecimento)
				where	nr_sequencia		= nr_seq_gestao_vaga_w;

				if (nr_seq_regra_regu_w IS NOT NULL AND nr_seq_regra_regu_w::text <> '') then
					if ((coalesce(ie_espec_valid_w, 'N') = 'N') or ((coalesce(ie_espec_valid_w, 'N') = 'S') and (coalesce(cd_especialidade_medica_w, 0) > 0)))
						and ((coalesce(ie_cid_valid_w, 'N') = 'N') or ((coalesce(ie_cid_valid_w, 'N') = 'S') and (cd_doenca_cid_w IS NOT NULL AND cd_doenca_cid_w::text <> ''))) then
						CALL Alterar_status_regulacao(nr_seq_regra_regu_w, 'CA', '');
						ie_consistencia_w := CONSISTIR_REGULACAO(nr_atendimento_w, nr_seq_gestao_vaga_w, 'GESTAO_VAGA', ie_consistencia_w);
					end if;
				end if;
			end if;	
		else
			if (ie_status_aguardando_w = 'S') and
				((ie_status_gv_w = 'R') or (ie_status_gv_w = 'P')) then -- Somente sera alterado o status quando a data prevista for em dia diferente da data da agenda, momento da transferencia de agendamento
				if (ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(dt_prevista_w) <> ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(coalesce(dt_chegada_prev_w, hr_inicio_w))) then
					CALL Desfazer_reserva_leito(nr_seq_gestao_vaga_w,nm_usuario_p);
					ds_leito_w		:= substr(ds_setor_desejado_w || ' ' || cd_unidade_basica_w || ' ' || cd_unidade_compl_w, 1, 275);
					ds_retorno_w	:= wheb_mensagem_pck.get_texto(300451, 'DS_LEITO=' || ds_leito_w || ';NM_PACIENTE_W=' || nm_paciente_w);
				end if;	
			end if;
			
			if (coalesce(ie_desfazer_cancelamento_w,'N') = 'S') then
				
				if (ie_status_agenda_w <> 'C') and (ie_status_gv_w = 'C') and (obter_tipo_agenda(cd_agenda_w) = 1) then
					update 	gestao_vaga
					set	ie_status = 'A',
						nr_seq_motivo_cancel  = NULL
					where	nr_sequencia	= nr_seq_gestao_vaga_w;
				end if;
				
			end if;
		
			update 	gestao_vaga
			set	cd_medico				= cd_medico_w,
				cd_tipo_acomod_atual	= cd_tipo_acomodacao_w,
				cd_procedimento			= cd_procedimento_w,
				ie_origem_proced		= ie_origem_proced_w,
				nr_seq_proc_interno		= nr_seq_proc_interno_w,
				cd_convenio				= coalesce(cd_convenio_w, CASE WHEN cd_categoria_w = NULL THEN cd_convenio  ELSE cd_convenio_w END ),
				cd_categoria			= coalesce(cd_categoria_w,CASE WHEN cd_convenio_w = NULL THEN cd_categoria  ELSE cd_categoria_w END ),
				cd_plano_convenio		= coalesce(cd_plano_w,cd_plano_convenio),
				ds_cod_usuario			= coalesce(cd_usuario_convenio_w, ds_cod_usuario),
				dt_validade				= dt_validade_carteira_w,
				dt_prevista				= coalesce(dt_chegada_prev_w, hr_inicio_w),	
				qt_dia					= qt_diaria_prev_w,
				nr_seq_agenda			= nr_seq_agenda_p,
				cd_pessoa_fisica 		= cd_pessoa_fisica_w,
				nm_paciente 			= nm_paciente_w,
				nr_telefone 			= nr_telefone_w,
				cd_cid_principal		= cd_doenca_cid_w,
				cd_estabelecimento		= coalesce(cd_estab_agenda_w,cd_estabelecimento)
			where	nr_sequencia		= nr_seq_gestao_vaga_w;

			if (nr_seq_regra_regu_w IS NOT NULL AND nr_seq_regra_regu_w::text <> '') then
				if ((coalesce(ie_espec_valid_w, 'N') = 'N') or ((coalesce(ie_espec_valid_w, 'N') = 'S') and (coalesce(cd_especialidade_medica_w, 0) > 0)))
					and ((coalesce(ie_cid_valid_w, 'N') = 'N') or ((coalesce(ie_cid_valid_w, 'N') = 'S') and (cd_doenca_cid_w IS NOT NULL AND cd_doenca_cid_w::text <> ''))) then
					CALL Alterar_status_regulacao(nr_seq_regra_regu_w, 'CA', '');
					ie_consistencia_w := CONSISTIR_REGULACAO(nr_atendimento_w, nr_seq_gestao_vaga_w, 'GESTAO_VAGA', ie_consistencia_w);
				end if;
			end if;
		end if;	
	end if;
	end;
end loop;
close C01;

if (ie_commit_w = 'S') then
	commit;
end if;

ds_retorno_p := ds_retorno_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_gestao_vaga ( nr_seq_agenda_p bigint, nm_usuario_p text, ds_retorno_p INOUT text) FROM PUBLIC;

