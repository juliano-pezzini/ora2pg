-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_cancelar_conta ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_motivo_cancelamento_p bigint, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_opcao_p bigint, ds_observacao_p INOUT text, ie_commit_p text) AS $body$
DECLARE


/* ie_opcap_p
	1 - Cancelar os itens e excluir os itens relacionados ao mesmo
	2 - Atualiza o status da conta para cancelado
*/
ds_observacao_w			varchar(255) := '';
ds_motivo_cancelamento_w	varchar(255);
nr_seq_analise_w		bigint;
nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
nr_seq_lote_pgto_w		bigint;
qt_conta_analise_w		integer;
ie_faturado_w			bigint;
nr_seq_fatura_w			bigint;
qt_conta_canc_w			integer;
nr_seq_mot_cancel_w		bigint;
nr_seq_mot_devolucao_w		bigint;
qt_resultado_w			integer;
nr_seq_guia_w			pls_conta.nr_seq_guia%type;
dt_referencia_w			timestamp;
dt_ref_final_w			timestamp;
ds_tipo_lote_contabil_w		tipo_lote_contabil.ds_tipo_lote_contabil%type;
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
ie_cancela_w			varchar(1);
nr_seq_analise_pos_w		pls_analise_conta.nr_sequencia%type;
ie_status_prov_pagto_w		pls_parametro_contabil.ie_status_prov_pagto%type;
nr_lote_contabilizado_w		pls_conta_medica_resumo.nr_lote_contabil_prov%type;
ie_novo_pos_estab_w		pls_visible_false.ie_novo_pos_estab%type;
ds_log_call_w			varchar(1500);
qt_registros_mensalidade_w	integer := 0;
ie_situacao_prot_w		pls_protocolo_conta.ie_situacao%type;
ie_desvincular_compl_canc_w	pls_web_param_geral.ie_desvincular_compl_cancelado%type := 'S';

C01 CURSOR(	nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia
	from	pls_proc_participante a
	where	a.nr_sequencia in (	SELECT	b.nr_sequencia
					from	pls_conta_proc	b
					where	b.nr_seq_conta	= nr_seq_conta_pc);

C02 CURSOR(	nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	nr_sequencia
	from	pls_conta
	where	nr_seq_conta_referencia	= nr_seq_conta_pc
	and	ie_status <> 'C';
	
C03 CURSOR( nr_seq_protocolo_pc	pls_protocolo_conta.nr_sequencia%type) FOR
 SELECT (  	SELECT	max(e.ds_tipo_lote_contabil)
		from	lote_contabil		d,
      			tipo_lote_contabil	e
      		where	(c.nr_lote_contabil_prov IS NOT NULL AND c.nr_lote_contabil_prov::text <> '')
		and    	c.nr_lote_contabil_prov = d.nr_lote_contabil
		and    	d.cd_tipo_lote_contabil	= e.cd_tipo_lote_contabil
      		and	e.cd_tipo_lote_contabil	in (40)) ds_lote_contabil_prov,
        (	select	max(e.ds_tipo_lote_contabil)
      		from	lote_contabil		d,
      			tipo_lote_contabil	e
      		where	(c.nr_lote_contab_pag IS NOT NULL AND c.nr_lote_contab_pag::text <> '')
		and    	c.nr_lote_contab_pag = d.nr_lote_contabil
		and    	d.cd_tipo_lote_contabil	= e.cd_tipo_lote_contabil
      		and    	e.cd_tipo_lote_contabil	in (40)) ds_lote_contabil_pag,
        ( 	select	max(e.ds_tipo_lote_contabil)
      		from	lote_contabil		d,
      			tipo_lote_contabil	e
      		where	(c.nr_lote_provisao IS NOT NULL AND c.nr_lote_provisao::text <> '')
		and    	c.nr_lote_provisao = d.nr_lote_contabil
		and    	d.cd_tipo_lote_contabil	= e.cd_tipo_lote_contabil
      		and	e.cd_tipo_lote_contabil	in (40)) ds_lote_proc,
        ( 	select	max(e.ds_tipo_lote_contabil)
      		from	lote_contabil		d,
      			tipo_lote_contabil	e
      		where	(c.nr_lote_contabil_rev IS NOT NULL AND c.nr_lote_contabil_rev::text <> '')
		and    	c.nr_lote_contabil_rev = d.nr_lote_contabil
		and    	d.cd_tipo_lote_contabil	= e.cd_tipo_lote_contabil
      		and	e.cd_tipo_lote_contabil	in (40)) ds_lote_contabil_rev,
        ( 	select	max(e.ds_tipo_lote_contabil)
      		from	lote_contabil		d,
      			tipo_lote_contabil	e
      		where	(c.nr_lote_contabil IS NOT NULL AND c.nr_lote_contabil::text <> '')
		and    	c.nr_lote_contabil = d.nr_lote_contabil
		and    	d.cd_tipo_lote_contabil	= e.cd_tipo_lote_contabil
      		and	e.cd_tipo_lote_contabil	in (40)) ds_lote_contabil
	from (select c.nr_lote_contabil_prov,
		c.nr_lote_contab_pag,
		c.nr_lote_provisao,
		c.nr_lote_contabil_rev,
		c.nr_lote_contabil
	from   	pls_protocolo_conta a,
		pls_conta b,
		pls_conta_proc c
	where	a.nr_sequencia = nr_seq_protocolo_pc
	and	a.nr_sequencia = b.nr_seq_protocolo
	and	b.nr_sequencia = c.nr_seq_conta
	and	c.ie_status <> 'D'
	
union

	select 	c.nr_lote_contabil_prov,
		c.nr_lote_contab_pag,
		c.nr_lote_provisao,
		c.nr_lote_contabil_rev,
		c.nr_lote_contabil
	from   	pls_protocolo_conta a,
		pls_conta b,
		pls_conta_mat c
	where	a.nr_sequencia = nr_seq_protocolo_pc
	and	a.nr_sequencia = b.nr_seq_protocolo
	and	b.nr_sequencia = c.nr_seq_conta
	and	c.ie_status <> 'D') c;
	
BEGIN


select	max(ie_situacao_protocolo)
into STRICT	ie_situacao_prot_w
from	pls_conta_v
where	nr_sequencia	= nr_seq_conta_p;


-- Apenas os protocolos integrados devem ser avaliados pela regra de bloqueio
if (coalesce(ie_situacao_prot_w, 'I') in ('D','T')) then
	
	ie_cancela_w := pls_obter_regra_bloq(nr_seq_conta_p, 'C', cd_estabelecimento_p);
	

	if (ie_cancela_w = 'S') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(688120,'NR_SEQ_CONTA=' ||nr_seq_conta_p);
	end if;
end if;

select	coalesce(max(ie_novo_pos_estab),'N')
into STRICT	ie_novo_pos_estab_w
from	pls_visible_false;

-- movido as verificacoes para dentro do IF pois se nao foi passada a conta nao tem necessidade de validar nada
select	coalesce(max(ie_status_prov_pagto),'NC')
into STRICT	ie_status_prov_pagto_w
from	pls_parametro_contabil
where	cd_estabelecimento = cd_estabelecimento_p;

select 	count(1)
into STRICT	qt_registros_mensalidade_w
from	pls_conta_coparticipacao
where	nr_seq_conta = nr_seq_conta_p
and		(nr_seq_mensalidade_seg IS NOT NULL AND nr_seq_mensalidade_seg::text <> '')
and		ie_status_mensalidade <> 'C';

if (qt_registros_mensalidade_w = 0) then

	select 	count(1)
	into STRICT	qt_registros_mensalidade_w
	from	pls_mensalidade_item_conta a,
			pls_conta_coparticipacao b
	where	a.nr_seq_conta_copartic = b.nr_sequencia
	and		b.nr_seq_conta = nr_seq_conta_p
	and		ie_status_mensalidade <> 'C';
	
	if (qt_registros_mensalidade_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1042996);
	end if;

else
	CALL wheb_mensagem_pck.exibir_mensagem_abort(1042996);
end if;

if (ie_status_prov_pagto_w = 'F') then

	select	max(coalesce(nr_lote_contabil_prov,0)) nr_lote_contabil
	into STRICT	nr_lote_contabilizado_w
	from	pls_conta_medica_resumo
	where	nr_seq_conta = nr_seq_conta_p
	and	coalesce(nr_lote_contabil_prov,0) <> 0;
	
	if (coalesce(nr_lote_contabilizado_w, 0) = 0) then

		select	max(coalesce(nr_lote_contabil_prov,0)) nr_lote_contabil
		into STRICT	nr_lote_contabilizado_w
		from	pls_conta_coparticipacao
		where	nr_seq_conta = nr_seq_conta_p
		and	coalesce(nr_lote_contabil_prov,0) <> 0;
	end if;
	
	if (coalesce(nr_lote_contabilizado_w,0) = 0) then
		
		if (ie_novo_pos_estab_w = 'S') then
			select	max(coalesce(a.nr_lote_contabil_prov,0)) nr_lote_contabil
			into STRICT	nr_lote_contabilizado_w
			from	pls_pos_estab_dados_contab a,
				pls_conta_pos_proc_contab b,
				pls_conta_medica_resumo c
			where	c.nr_sequencia = b.nr_seq_conta_resumo
			and	b.nr_sequencia = a.nr_seq_pos_proc_contab
			and	c.nr_seq_conta = nr_seq_conta_p;
			
			if (nr_lote_contabilizado_w = 0) then
				select	max(coalesce(a.nr_lote_contabil_prov,0)) nr_lote_contabil
				into STRICT	nr_lote_contabilizado_w
				from	pls_pos_estab_dados_contab a,
					pls_conta_pos_mat_contab b,
					pls_conta_medica_resumo c
				where	c.nr_sequencia = b.nr_seq_conta_resumo
				and	b.nr_sequencia = a.nr_seq_pos_mat_contab
				and	c.nr_seq_conta = nr_seq_conta_p;
			end if;
		else
			select	max(coalesce(a.nr_lote_contabil_prov,0)) nr_lote_contabil
			into STRICT	nr_lote_contabilizado_w
			from	pls_conta_pos_estab_contab a,
				pls_conta_medica_resumo b
			where	b.nr_sequencia = a.nr_seq_conta_resumo
			and	b.nr_seq_conta = a.nr_seq_conta
			and	b.nr_seq_conta = nr_seq_conta_p;
		end if;
	end if;
	
	if (coalesce(nr_lote_contabilizado_w, 0) > 0) then
		/* A conta ja foi contabilizada no lote #@NR_LOTE_CONTABILIZADO#@. */

		CALL wheb_mensagem_pck.exibir_mensagem_abort(324839, 'NR_LOTE_CONTABILIZADO=' || nr_lote_contabilizado_w);
	end if;
end if;

for r_c02_w in c02(nr_seq_conta_p) loop

	ds_observacao_w	:= substr(ds_observacao_w || r_c02_w.nr_sequencia || ' , ',1,255);
end loop;

if (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '') then
	goto final;
	null;
end if;

select	max(nr_seq_fatura),
	max(nr_seq_protocolo),
	max(dt_mes_competencia_trunc),
	max(ie_tipo_protocolo)
into STRICT	nr_seq_fatura_w,
	nr_seq_protocolo_w,
	dt_referencia_w,
	ie_tipo_protocolo_w
from	pls_conta_v
where	nr_sequencia = nr_seq_conta_p;

select	max(nr_seq_mot_cancel),
	max(nr_seq_mot_devolucao)
into STRICT	nr_seq_mot_cancel_w,
	nr_seq_mot_devolucao_w
from	ptu_fatura
where	nr_sequencia = nr_seq_fatura_w;

if (nr_seq_fatura_w IS NOT NULL AND nr_seq_fatura_w::text <> '') and (coalesce(nr_seq_mot_cancel_w::text, '') = '') and (coalesce(nr_seq_mot_devolucao_w::text, '') = '') then

	CALL wheb_mensagem_pck.exibir_mensagem_abort(1444);
end if;

/* --------------------------------------------------------------------------------------------Verificacao se protocolo esta faturado ou se esta em um lote-----------------------------------------------------------------*/

/* pasta Demonstrativo do protocolo\ Contas Medicas */

select	count(1)
into STRICT	ie_faturado_w
from 	pls_prot_conta_titulo 	a
where	nr_seq_protocolo = nr_seq_protocolo_w;	

/*Se possuir  demonstrativo do protocolo, entao  nao deve cancelar o protocolo*/

if (ie_faturado_w > 0) then
	/*  O protocolo ja possui um demonstrativo.  */

	--wheb_mensagem_pck.exibir_mensagem_abort(180476,'NR_SEQ_CONTA=' ||nr_seq_conta_p);
	CALL wheb_mensagem_pck.exibir_mensagem_abort(186270);
end if;
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/* --------------------------------------------------------------------------------------------Verificacao se pagamento da conta  esta em um lote de pagamento-----------------------------------------------------------*/
	
/*Tratamento se na conta, na pasta "Pagamento" , se existem pagamentos desta conta com lote gerado "Lote pgto"  */

select	max(nr_seq_lote)
into STRICT	nr_seq_lote_pgto_w
from (
	SELECT	nr_seq_lote_pgto nr_seq_lote
	from 	pls_conta_medica_resumo
	where   nr_seq_conta = nr_seq_conta_p
	and	ie_situacao = 'A'
	and	(nr_seq_lote_pgto IS NOT NULL AND nr_seq_lote_pgto::text <> '')
	
union all

	SELECT	nr_seq_pp_lote nr_seq_lote
	from 	pls_conta_medica_resumo
	where   nr_seq_conta = nr_seq_conta_p
	and	ie_situacao = 'A'
	and	(nr_seq_pp_lote IS NOT NULL AND nr_seq_pp_lote::text <> '') 
 LIMIT 1) alias3;

/*Caso exista lote de pagamento para um pagamento da conta*/

if (nr_seq_lote_pgto_w IS NOT NULL AND nr_seq_lote_pgto_w::text <> '') then

	/* Nao foi possivel cancelar o protocolo.  */

	CALL wheb_mensagem_pck.exibir_mensagem_abort(186271,'NR_SEQ_LOTE=' || nr_seq_lote_pgto_w || ';NR_SEQ_CONTA=' || nr_seq_conta_p);
end if;		
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

dt_ref_final_w		:= fim_dia(fim_mes(dt_referencia_w));
ds_tipo_lote_contabil_w	:= null;

--Apenas para contas medicas de producao local
if (ie_tipo_protocolo_w = 'C') then

	for r_C03_w in C03(nr_seq_protocolo_w) loop
	
		if (r_C03_w.ds_lote_contabil_prov IS NOT NULL AND r_C03_w.ds_lote_contabil_prov::text <> '') then
			ds_tipo_lote_contabil_w:= r_C03_w.ds_lote_contabil_prov;
		elsif (r_C03_w.ds_lote_contabil_pag IS NOT NULL AND r_C03_w.ds_lote_contabil_pag::text <> '') then
			ds_tipo_lote_contabil_w:= r_C03_w.ds_lote_contabil_pag;
		elsif (r_C03_w.ds_lote_proc IS NOT NULL AND r_C03_w.ds_lote_proc::text <> '') then
			ds_tipo_lote_contabil_w:= r_C03_w.ds_lote_proc;
		elsif (r_C03_w.ds_lote_contabil_rev IS NOT NULL AND r_C03_w.ds_lote_contabil_rev::text <> '') then
			ds_tipo_lote_contabil_w:= r_C03_w.ds_lote_contabil_rev;
		elsif (r_C03_w.ds_lote_contabil IS NOT NULL AND r_C03_w.ds_lote_contabil::text <> '') then
			ds_tipo_lote_contabil_w:= r_C03_w.ds_lote_contabil;
		end if;
		
		exit when (ds_tipo_lote_contabil_w IS NOT NULL AND ds_tipo_lote_contabil_w::text <> '');
	
	end loop;
	
end if;

/*Caso exista um lote de contabil gerado para o protocolo, restringir o cancelamento*/

if (ds_tipo_lote_contabil_w IS NOT NULL AND ds_tipo_lote_contabil_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(880826, 'NR_SEQ_PROTOCOLO=' || nr_seq_protocolo_w || ';DS_TIPO_LOTE_CONTABIL=' || ds_tipo_lote_contabil_w || ';DT_REFERENCIA=' || to_char(dt_referencia_w,'mm/yyyy'));
end if;

select	count(1)
into STRICT	qt_resultado_w
from 	pls_resultado a,
	pls_conta b
where 	a.nr_seq_conta = nr_seq_conta_p
and 	b.nr_sequencia = a.nr_seq_conta
and 	exists (SELECT	1
		from	ptu_fatura z
		where	z.nr_sequencia = b.nr_seq_fatura
		and	z.ie_status in ('E', 'AF'))  LIMIT 1;

/* Caso a conta tenha sido considerada no resultado */

if (qt_resultado_w > 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(234172);
end if;

select	max(ds_motivo_cancelamento)
into STRICT	ds_motivo_cancelamento_w
from	pls_motivo_cancel_conta
where	nr_sequencia	= nr_seq_motivo_cancelamento_p;

if (nr_seq_mot_cancel_w IS NOT NULL AND nr_seq_mot_cancel_w::text <> '') and (coalesce(ds_motivo_cancelamento_w::text, '') = '') then

	select	max(ds_motivo)
	into STRICT	ds_motivo_cancelamento_w
	from 	ptu_mot_cancelamento_a500
	where	nr_sequencia = nr_seq_mot_cancel_w;
end if;

if (nr_seq_mot_devolucao_w IS NOT NULL AND nr_seq_mot_devolucao_w::text <> '') and (coalesce(ds_motivo_cancelamento_w::text, '') = '') then

	select	max(ds_motivo)
	into STRICT	ds_motivo_cancelamento_w
	from 	ptu_motivo_devolucao_a500
	where	nr_sequencia = nr_seq_mot_devolucao_w;
end if;

update	pls_conta_proc
set	vl_prestador = 0,
	vl_liberado = 0,
	vl_unitario = 0,
	vl_pag_medico_conta = 0,
	qt_procedimento = 0,
	nm_usuario = nm_usuario_p,
	dt_atualizacao = clock_timestamp(),
	ie_status = 'D'
where	nr_seq_conta = nr_seq_conta_p;

update	pls_conta_mat
set	vl_liberado = 0,
	vl_unitario = 0,
	qt_material = 0,
	nm_usuario = nm_usuario_p,
	dt_atualizacao = clock_timestamp(),
	ie_status = 'D'
where	nr_seq_conta = nr_seq_conta_p;

CALL pls_delete_conta_medica_resumo(nr_seq_conta_p, null, null, nm_usuario_P);

update	pls_conta_pos_estabelecido
set	ie_status_faturamento = 'C',
	ie_cobrar_mensalidade = 'N',
	dt_atualizacao = clock_timestamp(),
	nm_usuario = nm_usuario_p
where	nr_seq_conta = nr_seq_conta_p
and	((ie_situacao = 'A') or (coalesce(ie_situacao::text, '') = ''));

update	pls_conta_coparticipacao
set	ie_status_mensalidade	= 'C',
	ie_status_coparticipacao = 'N'
where	nr_seq_conta = nr_seq_conta_p;

update	pls_conta_copartic_contab
set	nr_seq_conta_resumo	 = NULL
where	nr_seq_conta 		= nr_seq_conta_p;

update	pls_conta_pos_estab_contab
set	nr_seq_conta_resumo	 = NULL
where	nr_seq_conta 		= nr_seq_conta_p;

for r_c01_w in c01(nr_seq_conta_p) loop

	update	pls_proc_participante
	set	vl_participante	= 0
	where	nr_sequencia = r_c01_w.nr_sequencia;
end loop;

CALL pls_atualizar_utilizacao_guia(nr_seq_conta_p, cd_estabelecimento_p, nm_usuario_p);

ds_log_call_w := substr(	' Funcao ativa : '|| obter_funcao_ativa || chr(13) ||chr(10)||
				' CallStack: '|| chr(13) || chr(10)|| dbms_utility.format_call_stack,1,1500);

insert into pls_conta_log(
	nr_sequencia, dt_atualizacao, nm_usuario,
	dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta,
	nr_seq_conta_proc, nr_seq_conta_mat, nm_usuario_alteracao,
	dt_alteracao, ds_alteracao
) values (
	nextval('pls_conta_log_seq'), clock_timestamp(), nm_usuario_p,
	clock_timestamp(), nm_usuario_p, nr_seq_conta_p,
	null, null, nm_usuario_p,
	clock_timestamp(), substr('Conta cancelada, pelo motivo: ' || ds_motivo_cancelamento_w||' call '||ds_log_call_w,1,2000)
);

select	coalesce(max(a.ie_desvincular_compl_cancelado), 'S')
into STRICT	ie_desvincular_compl_canc_w
from	pls_web_param_geral	a
where	a.cd_estabelecimento	= cd_estabelecimento_p;


update	pls_conta
set	ie_status		= 'C',
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp(),
	-- so pode "desvincular" a conta caso for de complemento, e e possivel inserir o "-C" respeitando o tamanho da guia e guia referencia, e se for a opcao de excluir os itens
	cd_guia			= case when(ie_desvincular_compl_canc_w = 'S') and (length('-C'||cd_guia) <=20) and (length('-C'||cd_guia_referencia) <= 20) and (ie_origem_conta = 'C') and (ie_opcao_p = '1') and (cd_guia IS NOT NULL AND cd_guia::text <> '') then '-C'||cd_guia else cd_guia end,
	cd_guia_referencia	= case when(ie_desvincular_compl_canc_w = 'S') and (length('-C'||cd_guia) <=20) and (length('-C'||cd_guia_referencia) <= 20) and (ie_origem_conta = 'C') and (ie_opcao_p = '1') and (cd_guia_referencia IS NOT NULL AND cd_guia_referencia::text <> '') then '-C'||cd_guia_referencia else cd_guia_referencia end,
	nr_seq_conta_princ	= case when(ie_desvincular_compl_canc_w = 'S') and (length('-C'||cd_guia) <=20) and (length('-C'||cd_guia_referencia) <= 20) and (ie_origem_conta = 'C') and (ie_opcao_p = '1') and ((cd_guia IS NOT NULL AND cd_guia::text <> '') or (cd_guia_referencia IS NOT NULL AND cd_guia_referencia::text <> '')) then nr_sequencia else nr_seq_conta_princ end	
where	nr_sequencia	= nr_seq_conta_p;

select	nr_seq_protocolo,
	nr_seq_guia,
	nr_seq_analise
into STRICT	nr_seq_protocolo_w,
	nr_seq_guia_w,
	nr_seq_analise_w
from	pls_conta
where	nr_sequencia	= nr_seq_conta_p;

if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then
	update	pls_guia_plano
	set	ie_pagamento_automatico = 'PA',
		ie_status 		= '1'
	where	nr_sequencia		= nr_seq_guia_w
	and	ie_pagamento_automatico	= 'CG';
end if;

/* Cancelar a analise correspondente a conta */

if (nr_seq_analise_w IS NOT NULL AND nr_seq_analise_w::text <> '') then
	select	count(1),
		sum(CASE WHEN ie_status='C' THEN  1  ELSE 0 END )
	into STRICT	qt_conta_analise_w,
		qt_conta_canc_w
	from	pls_conta
	where	nr_seq_analise	= nr_seq_analise_w;
	
	if (qt_conta_analise_w = qt_conta_canc_w) then

		CALL pls_alterar_status_analise_cta(	nr_seq_analise_w, 'C', 'PLS_CANCELAR_CONTA',
						nm_usuario_p, cd_estabelecimento_p);
						
		select	max(nr_sequencia)
		into STRICT	nr_seq_analise_pos_w
		from	pls_analise_conta
		where	nr_seq_analise_ref = nr_seq_analise_w;
		
		if (nr_seq_analise_pos_w IS NOT NULL AND nr_seq_analise_pos_w::text <> '') then
			CALL pls_alterar_status_analise_cta(	nr_seq_analise_pos_w, 'C', 'PLS_CANCELAR_CONTA',
							nm_usuario_p, cd_estabelecimento_p);
		end if;
	end if;
end if;

CALL pls_atualiza_valor_conta(	nr_seq_conta_p, nm_usuario_p);
			
CALL pls_altera_status_protocolo(	nr_seq_protocolo_w, 'C', 'N',cd_estabelecimento_p, nm_usuario_p);
				
CALL pls_gerar_valores_protocolo(	nr_seq_protocolo_w, nm_usuario_p); /* Felipe - OS 274084 - Atualizar os valores do protocolo */
<<final>>

ds_observacao_p	:= ds_observacao_w;

if (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(819793);
end if;

if (coalesce(ie_commit_p,'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cancelar_conta ( nr_seq_conta_p pls_conta.nr_sequencia%type, nr_seq_motivo_cancelamento_p bigint, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, ie_opcao_p bigint, ds_observacao_p INOUT text, ie_commit_p text) FROM PUBLIC;

