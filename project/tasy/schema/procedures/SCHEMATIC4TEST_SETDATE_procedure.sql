-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE schematic4test_setdate (NR_SEQ_SCHEDULE_P bigint, NR_SEQ_SUITE_P bigint) AS $body$
DECLARE

NR_SEQ_SCRIPT_W bigint;
QTD_W bigint;
QTD_W2 bigint;
NR_SEQ_URL_W bigint;
NR_SEQ_BROWSER_W bigint;
NR_SEQ_SERVICE_W bigint;
NR_SEQ_ROBOT_W bigint;
NR_SEQ_GRID_W bigint;
NR_SEQ_ACTION_W bigint;
NR_SEQ_VAL_W bigint;
NR_SEQ_PACKAGE_W bigint;

--loop script
C01 CURSOR FOR
  SELECT teste.NR_SEQ_SCRIPT NR_SEQ_SCRIPT
      INTO STRICT NR_SEQ_SCRIPT_W
  FROM SCHEM_TEST_TEST teste
  WHERE teste.NR_SEQ_SUITE = NR_SEQ_SUITE_P;

--loop robot
C02 CURSOR FOR
  SELECT test.NR_SEQ_ROBOT NR_SEQ_ROBOT
      INTO STRICT NR_SEQ_ROBOT_W
  FROM SCHEM_TEST_TEST test 
  WHERE test.NR_SEQ_SUITE = NR_SEQ_SUITE_P
  GROUP BY test.NR_SEQ_ROBOT;

--loop machine
C03 CURSOR FOR
  SELECT test.NR_SEQ_GRID NR_SEQ_GRID
      INTO STRICT NR_SEQ_GRID_W
  FROM SCHEM_TEST_TEST test 
  WHERE test.NR_SEQ_SUITE = NR_SEQ_SUITE_P
  GROUP BY test.NR_SEQ_GRID;

--loop action
C04 CURSOR FOR 
  SELECT step.NR_SEQ_ACTION NR_SEQ_ACTION
      INTO STRICT NR_SEQ_ACTION_W
  FROM SCHEM_TEST_TEST test, SCHEM_TEST_STEP step
	WHERE test.NR_SEQ_SUITE = NR_SEQ_SUITE_P
	AND test.NR_SEQ_SCRIPT = step.NR_SEQ_SCRIPT 
	AND step.IE_SWITCH = '1'
  GROUP BY step.NR_SEQ_ACTION;

--loop values
C05 CURSOR FOR
    SELECT val.NR_SEQUENCIA NR_SEQ_VAL
        INTO STRICT NR_SEQ_VAL_W
		FROM SCHEM_TEST_TEST test, SCHEM_TEST_STEP step, SCHEM_TEST_VALUES val 
		WHERE test.NR_SEQ_SUITE = NR_SEQ_SUITE_P
		AND test.NR_SEQ_SCRIPT = step.NR_SEQ_SCRIPT 
		AND val.NR_SEQ_STEP = step.NR_SEQUENCIA 
		AND step.IE_SWITCH = '1' 
    AND val.NR_SEQ_SERVICE = NR_SEQ_SERVICE_W
    GROUP BY val.NR_SEQUENCIA;


BEGIN
    --procedure that set date time
    UPDATE SCHEM_TEST_SCHEDULE SET DT_EXECUTION = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_P;	
	UPDATE SCHEM_TEST_SUITE SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_SUITE_P;		
    COMMIT;

    OPEN C01;
    LOOP
      FETCH C01 INTO
        NR_SEQ_SCRIPT_W;
      EXIT WHEN NOT FOUND; /* apply on C01 */
      BEGIN	
        UPDATE SCHEM_TEST_SCRIPT SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_SCRIPT_W;
        UPDATE SCHEM_TEST_AREA SET DT_ULTIMO = clock_timestamp() WHERE NR_SEQUENCIA IN (SELECT IE_AREA FROM SCHEM_TEST_SCRIPT WHERE NR_SEQUENCIA = NR_SEQ_SCRIPT_W);
        COMMIT;
      END;
    END LOOP;
    CLOSE C01;

    SELECT COUNT(pack.NR_SEQUENCIA) NR_SEQUENCIA
        INTO STRICT QTD_W
    FROM SCHEM_TEST_SCHEDULE sched, SCHEM_TEST_PACKAGE_SCHED packsched, SCHEM_TEST_PACKAGE pack 
    WHERE sched.NR_SEQUENCIA = NR_SEQ_SCHEDULE_P
		AND sched.NR_SEQ_PACKAGE = packsched.NR_SEQUENCIA
		AND packsched.NR_SEQ_PACKAGE = pack.NR_SEQUENCIA;

    IF (QTD_W <> 0) THEN
        SELECT pack.NR_SEQUENCIA NR_SEQ_PACKAGE
            INTO STRICT NR_SEQ_PACKAGE_W
        FROM SCHEM_TEST_SCHEDULE sched, SCHEM_TEST_PACKAGE_SCHED packsched, SCHEM_TEST_PACKAGE pack 
        WHERE sched.NR_SEQUENCIA = NR_SEQ_SCHEDULE_P
        AND sched.NR_SEQ_PACKAGE = packsched.NR_SEQUENCIA
        AND packsched.NR_SEQ_PACKAGE = pack.NR_SEQUENCIA;

			  IF (NR_SEQ_PACKAGE_W IS NOT NULL AND NR_SEQ_PACKAGE_W::text <> '') THEN
					UPDATE SCHEM_TEST_PACKAGE SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_PACKAGE_W;
					COMMIT;
				END IF;
    END IF;
			
		SELECT COUNT(sched.NR_SEQ_URL) NR_SEQ_URL
        INTO STRICT QTD_W2
    FROM SCHEM_TEST_SCHEDULE sched
    WHERE sched.NR_SEQUENCIA = NR_SEQ_SCHEDULE_P;

    IF (QTD_W2 <> 0) THEN
        SELECT sched.NR_SEQ_URL NR_SEQ_URL, sched.NR_SEQ_BROWSER NR_SEQ_BROWSER, sched.NR_SEQ_SERVICE NR_SEQ_SERVICE
           INTO STRICT NR_SEQ_URL_W, NR_SEQ_BROWSER_W, NR_SEQ_SERVICE_W
        FROM SCHEM_TEST_SCHEDULE sched 
        WHERE sched.NR_SEQUENCIA = NR_SEQ_SCHEDULE_P;

		IF (NR_SEQ_URL_W IS NOT NULL AND NR_SEQ_URL_W::text <> '') THEN
			UPDATE SCHEM_TEST_URL SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_URL_W;
        END IF;
				
        IF (NR_SEQ_BROWSER_W IS NOT NULL AND NR_SEQ_BROWSER_W::text <> '') THEN
			UPDATE SCHEM_TEST_BROWSER SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_BROWSER_W;
        END IF;
				
        IF (NR_SEQ_SERVICE_W IS NOT NULL AND NR_SEQ_SERVICE_W::text <> '') THEN
			UPDATE SCHEM_TEST_SERVICE SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_SERVICE_W;
        END IF;
		
		COMMIT;
      END IF;
			
      OPEN C02;
      LOOP
      FETCH C02 INTO
        NR_SEQ_ROBOT_W;
      EXIT WHEN NOT FOUND; /* apply on C02 */
      BEGIN	
          IF (NR_SEQ_ROBOT_W IS NOT NULL AND NR_SEQ_ROBOT_W::text <> '') THEN
            UPDATE SCHEM_TEST_ROBOT SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_ROBOT_W;
            COMMIT;
          END IF;
      END;
      END LOOP;
      CLOSE C02;

      OPEN C03;
      LOOP
      FETCH C03 INTO
        NR_SEQ_GRID_W;
      EXIT WHEN NOT FOUND; /* apply on C03 */
      BEGIN	
          IF (NR_SEQ_GRID_W IS NOT NULL AND NR_SEQ_GRID_W::text <> '') THEN
            UPDATE SCHEM_TEST_GRID SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_GRID_W;
            COMMIT;
          END IF;
      END;
      END LOOP;
      CLOSE C03;
  
      OPEN C04;
      LOOP
      FETCH C04 INTO
        NR_SEQ_ACTION_W;
      EXIT WHEN NOT FOUND; /* apply on C04 */
      BEGIN	
          IF (NR_SEQ_ACTION_W IS NOT NULL AND NR_SEQ_ACTION_W::text <> '') THEN
            UPDATE SCHEM_TEST_ACTION SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_ACTION_W;
            COMMIT;
          END IF;
      END;
      END LOOP;
      CLOSE C04;
			
      OPEN C05;
      LOOP
      FETCH C05 INTO
        NR_SEQ_VAL_W;
      EXIT WHEN NOT FOUND; /* apply on C05 */
      BEGIN	
          IF (NR_SEQ_VAL_W IS NOT NULL AND NR_SEQ_VAL_W::text <> '') THEN
            UPDATE SCHEM_TEST_VALUES SET DT_LAST = clock_timestamp() WHERE NR_SEQUENCIA = NR_SEQ_VAL_W;
            COMMIT;
          END IF;
      END;
      END LOOP;
      CLOSE C05;
    EXCEPTION
    WHEN no_data_found THEN
      RAISE NOTICE 'Erro: Data not found';
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE schematic4test_setdate (NR_SEQ_SCHEDULE_P bigint, NR_SEQ_SUITE_P bigint) FROM PUBLIC;

