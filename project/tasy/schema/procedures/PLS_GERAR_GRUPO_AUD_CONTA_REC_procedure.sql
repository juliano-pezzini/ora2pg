-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_grupo_aud_conta_rec ( nr_seq_conta_p bigint, nr_seq_analise_p bigint, nr_seq_oc_benef_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/*ROTINA BASEADA NA pls_gerar_grupo_aud_conta*/

ds_conta_w			varchar(4000);
ie_tipo_conta_w			varchar(10);
ie_intercambio_w		varchar(10) := 'N';
ie_conta_medica_w		varchar(10) := 'N';
ie_pre_analise_w		varchar(2);
ie_tipo_item_w			varchar(1);
ie_origem_conta_w		varchar(1);
ie_tipo_despesa_w		varchar(1);
ie_tipo_w			varchar(1);
ie_despesa_w			varchar(1)	:= 'N';
nr_seq_grupo_w			bigint;
nr_seq_fluxo_w			bigint;
ie_existe_grupo_analise_w	bigint;
nr_seq_grupo_auditor_w		bigint;
nr_ie_tipo_item_w		bigint;
nr_seq_ocorrencia_w		bigint;
nr_seq_grupo_ww			bigint;
nr_seq_ordem_max_w		bigint;
qt_existe_ocorrencia_w		bigint;
nr_seq_ocorrencia_ww		bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_ocorr_grupo_w		bigint;
ie_origem_analise_w		pls_analise_conta.ie_origem_analise%type;
/* Obtem os grupos de auditoria cadastrados na ocorrencia, caso esta ocorrencia seja gerada para a conta */

C01 CURSOR FOR
	SELECT	a.nr_seq_grupo,
		a.nr_seq_fluxo,
		a.nr_seq_ocorrencia,
		a.nr_sequencia
	from	pls_ocorrencia_grupo	a
	where	exists (SELECT	1
			from	pls_ocorrencia_benef	x
			where	x.nr_seq_ocorrencia	= a.nr_seq_ocorrencia
			and 	x.nr_sequencia		= nr_seq_oc_benef_p)
	and	coalesce(a.ie_conta_medica,'N')	= 'S'
	and	a.ie_situacao	= 'A'
	and	((a.ie_conta_medica	= ie_conta_medica_w)
	or (a.ie_intercambio	= ie_intercambio_w))
	and	coalesce(a.ie_origem_conta,coalesce(ie_origem_conta_w,'0'))	= coalesce(ie_origem_conta_w,'0') /*Diego OS 310737*/
 /*Robson - para contas de intercambio, fatura 2320*/
	and	((coalesce(a.ie_tipo_analise::text, '') = '') or (a.ie_tipo_analise = 'A') or (a.ie_tipo_analise = 'C' and ie_origem_analise_w in ('1','3','4','5','6')) or (a.ie_tipo_analise	= 'P' and ie_origem_analise_w in ('2','7')))
	order by a.nr_seq_fluxo asc;


BEGIN
/*verifica se ja existe a mesma    se existir alguma entao nao cria grupos de auditoria */

begin
select	nr_seq_ocorrencia,
	nr_seq_proc,
	nr_seq_mat
into STRICT	nr_seq_ocorrencia_ww,
	nr_seq_conta_proc_w,
	nr_seq_conta_mat_w
from 	pls_ocorrencia_benef
where 	nr_sequencia 	= nr_seq_oc_benef_p;

select 	count(1)
into STRICT	qt_existe_ocorrencia_w
from	pls_analise_conta_item	a,
	pls_ocorrencia_benef 	b				
where 	a.nr_seq_ocorrencia 	= b.nr_sequencia
and	b.nr_seq_ocorrencia 	= nr_seq_ocorrencia_ww
and	a.nr_seq_analise 	= nr_seq_analise_p;
exception
when others then
	/*SE ACONTECER ALGUM PROBLEMA EH PARA NAO GERAR OS GRUPOS, OU SEJA, COMO ERA ANTES*/

	qt_existe_ocorrencia_w	:= 1;	
end;

/*CASO EXISTA A OCORRENCIA NA ANALISE, NAO E GERADO NOVOS GRUPOS DE ANALISE, PARA NAO DUPLICAR NO FLUXO DE AUDITORIA*/

if (qt_existe_ocorrencia_w > 0) then
	goto final;	
end if;

select	max(ie_origem_analise)
into STRICT	ie_origem_analise_w
from 	pls_analise_conta
where	nr_sequencia	= nr_seq_analise_p;

begin
select	ie_origem_conta,
	ie_tipo_conta
into STRICT	ie_origem_conta_w,
	ie_tipo_conta_w
from	pls_conta
where	nr_sequencia = nr_seq_conta_p;
exception
when others then
	ie_origem_conta_w	:= null;
	ie_tipo_conta_w		:= 'O';
end;

if (ie_tipo_conta_w	= 'I') then
	ie_intercambio_w	:= 'S';
	ie_conta_medica_w	:= null;
else
	ie_intercambio_w	:= null;
	ie_conta_medica_w	:= 'S';
end if;

if (coalesce(nr_seq_conta_proc_w::text, '') = '') and (coalesce(nr_seq_conta_mat_w::text, '') = '') then
	ie_despesa_w	:= 'S';
else
	if (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
		select	max(a.ie_tipo_despesa),
			'M'
		into STRICT	ie_tipo_despesa_w,
			ie_tipo_w
		from	pls_conta_mat	a
		where	a.nr_sequencia	= nr_seq_conta_mat_w;
	else
		select	max(a.ie_tipo_despesa),
			'P'
		into STRICT	ie_tipo_despesa_w,
			ie_tipo_w
		from	pls_conta_proc	a
		where	a.nr_sequencia	= nr_seq_conta_proc_w;
	end if;
end if;

/*Obtem os grupos das ocorrencias das contas*/

open C01;
loop
fetch C01 into
	nr_seq_grupo_w,
	nr_seq_fluxo_w,
	nr_seq_ocorrencia_w,
	nr_seq_ocorr_grupo_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	if (ie_despesa_w = 'N') then
		ie_despesa_w	:= pls_obter_se_grupo_tipo_desp(nr_seq_ocorr_grupo_w,ie_tipo_despesa_w,ie_tipo_w);
	end if;
	
	if (coalesce(ie_despesa_w,'S') = 'S') then
		select	max(ie_pre_analise)
		into STRICT	ie_pre_analise_w
		from	pls_ocorrencia
		where	nr_sequencia = nr_seq_ocorrencia_w;
		
		if (coalesce(ie_intercambio_w,'X')<> 'X') or
			((coalesce(ie_pre_analise_w,'N') = 'N') and (coalesce(ie_conta_medica_w,'X') <> 'X')) then
			begin
			if (coalesce(ie_pre_analise_w,'N') = 'S') then
				nr_seq_fluxo_w := 0; --Diego  quando for o grupo de pre-analise este deve ser o primeiro.
			end if;

			/*Se o grupo ja existe na  analise, entao deve ser tratado a ordem do fluxo*/

			select	max(nr_seq_ordem)
			into STRICT	nr_seq_ordem_max_w
			from 	pls_auditoria_conta_grupo
			where	nr_seq_analise = nr_seq_analise_p;
			
			if (coalesce(nr_seq_fluxo_w::text, '') = '') then
				select	max(a.nr_seq_fluxo_padrao)
				into STRICT	nr_seq_fluxo_w
				from	pls_grupo_auditor	a
				where	a.nr_sequencia	= nr_seq_grupo_w;
			end if;

			/*Obtem a maior ordem dos grupos do fluxo.*/

			nr_seq_fluxo_w	:= coalesce(nr_seq_fluxo_w,0) + coalesce(nr_seq_ordem_max_w,0);

			select	min(nr_sequencia)
			into STRICT	nr_seq_grupo_ww
			from 	pls_auditoria_conta_grupo
			where	nr_seq_analise	= nr_seq_analise_p
			and	nr_seq_ordem	= nr_seq_fluxo_w;

			while(coalesce(nr_seq_grupo_ww,0) <> 0) loop
				begin
				nr_seq_fluxo_w	:= nr_seq_fluxo_w + 1;

				select	min(nr_sequencia)
				into STRICT	nr_seq_grupo_ww
				from 	pls_auditoria_conta_grupo
				where	nr_seq_analise	= nr_seq_analise_p
				and	nr_seq_ordem	= nr_seq_fluxo_w;
				end;
			end loop;

			/*Se nao existir cria-se o grupo*/

			select	nextval('pls_auditoria_conta_grupo_seq')
			into STRICT	nr_seq_grupo_auditor_w
			;
			
			insert into pls_auditoria_conta_grupo(nr_sequencia,
				nr_seq_analise,
				nr_seq_grupo,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_ordem,
				ds_conta,
				ie_pre_analise)
			values (nr_seq_grupo_auditor_w,
				nr_seq_analise_p,
				nr_seq_grupo_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_fluxo_w,
				to_char(nr_seq_conta_p),
				coalesce(ie_pre_analise_w,'N'));
			end;
		end if;
	end if;
	end;
end loop;
close C01;

CALL pls_atualizar_grupo_penden(nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p);

<<final>>
qt_existe_ocorrencia_w	:= qt_existe_ocorrencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_grupo_aud_conta_rec ( nr_seq_conta_p bigint, nr_seq_analise_p bigint, nr_seq_oc_benef_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

