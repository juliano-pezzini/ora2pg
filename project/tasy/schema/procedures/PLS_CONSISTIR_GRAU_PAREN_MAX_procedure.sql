-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_grau_paren_max ( nr_sequencial_p bigint, ie_origem_rotina_p text, cd_estabelecimento_p bigint, nm_usuario_p text, ds_erro_p INOUT text) AS $body$
DECLARE

				 
/* 
ie_origem_rotina_p 
C - Contrato 
P - Proposta 
I - Inclusão 
*/
 
			 
ds_erro_w			varchar(255);
nr_seq_segurado_w		bigint;
nr_seq_parentesco_w		bigint;
nr_seq_titular_w		bigint;
nr_seq_titular_contrato_w	bigint;
qt_beneficiarios_w		bigint;
qt_registros_w			bigint;
qt_registros_aux_w		bigint;
nr_seq_regra_w			bigint;

C01 CURSOR FOR 
	SELECT	nr_sequencia 
	from	pls_proposta_beneficiario 
	where	nr_seq_proposta	= nr_sequencial_p 
	and	(nr_seq_parentesco IS NOT NULL AND nr_seq_parentesco::text <> '') 
	and	((nr_seq_titular_contrato IS NOT NULL AND nr_seq_titular_contrato::text <> '') or (nr_seq_titular IS NOT NULL AND nr_seq_titular::text <> ''));


BEGIN 
if (ie_origem_rotina_p = 'C') then 
	select	nr_seq_parentesco, 
		nr_seq_titular 
	into STRICT	nr_seq_parentesco_w, 
		nr_seq_titular_w 
	from	pls_segurado 
	where	nr_sequencia = nr_sequencial_p;
	 
	select	max(nr_seq_regra) 
	into STRICT	nr_seq_regra_w 
	from	pls_consist_grau_paren	b, 
		pls_consist_parentesco	a 
	where	b.nr_seq_regra		= a.nr_sequencia 
	and	b.nr_seq_parentesco	= nr_seq_parentesco_w 
	and	a.ie_situacao		= 'A';
	 
	if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then 
		select	qt_beneficiario 
		into STRICT	qt_beneficiarios_w 
		from	pls_consist_parentesco 
		where	nr_sequencia = nr_seq_regra_w;
		 
		if (coalesce(qt_beneficiarios_w,0) > 0) then 
			select	count(1) 
			into STRICT	qt_registros_w 
			from	pls_segurado	a 
			where	a.nr_seq_titular = nr_seq_titular_w 
			and	a.nr_sequencia <> nr_sequencial_p 
			and	coalesce(a.dt_rescisao::text, '') = '' 
			and	exists (	SELECT	1 
						from	pls_consist_grau_paren	x 
						where	x.nr_seq_regra		= nr_seq_regra_w 
						and	x.nr_seq_parentesco	= a.nr_seq_parentesco);
			 
			if (qt_registros_w+1 > qt_beneficiarios_w) then 
				ds_erro_w	:= wheb_mensagem_pck.get_texto(281060,	'NR_SEQUENCIAl_P=' || substr(pls_obter_dados_segurado(nr_sequencial_p,'N'),1,50) || 
											';NR_SEQ_PARENTESCO_P=' || substr(obter_desc_grau_parentesco(nr_seq_parentesco_w),1,30));
				/* Mensagem: Beneficiário(a): NR_SEQUENCIAL_P. Grau de parentesco NR_SEQ_PARENTESCO_P ultrapassou o limite permitido por família; */
 
			end if;	
		end if;
	end if;
elsif (ie_origem_rotina_p = 'P') then 
	open C01;
	loop 
	fetch C01 into	 
		nr_seq_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin 
		 
		if (length(ds_erro_w) > 150) then 
			exit;
		end if;
		 
		select	nr_seq_titular_contrato, 
			nr_seq_titular, 
			nr_seq_parentesco 
		into STRICT	nr_seq_titular_contrato_w, 
			nr_seq_titular_w, 
			nr_seq_parentesco_w 
		from	pls_proposta_beneficiario 
		where	nr_sequencia = nr_seq_segurado_w;
		 
		select	max(nr_seq_regra) 
		into STRICT	nr_seq_regra_w 
		from	pls_consist_grau_paren	b, 
			pls_consist_parentesco	a 
		where	b.nr_seq_regra		= a.nr_sequencia 
		and	b.nr_seq_parentesco	= nr_seq_parentesco_w 
		and	a.ie_situacao		= 'A';
		 
		if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then 
			select	qt_beneficiario 
			into STRICT	qt_beneficiarios_w 
			from	pls_consist_parentesco 
			where	nr_sequencia = nr_seq_regra_w;
		 
			if (coalesce(qt_beneficiarios_w,0) > 0) then 
				if (nr_seq_titular_contrato_w IS NOT NULL AND nr_seq_titular_contrato_w::text <> '') then 
					select	count(1) 
					into STRICT	qt_registros_w 
					from	pls_segurado	a 
					where	a.nr_seq_titular = nr_seq_titular_contrato_w 
					and	coalesce(a.dt_rescisao::text, '') = '' 
					and	exists (	SELECT	1 
								from	pls_consist_grau_paren	x 
								where	x.nr_seq_regra		= nr_seq_regra_w 
								and	x.nr_seq_parentesco	= a.nr_seq_parentesco);
								 
					select	count(1) 
					into STRICT	qt_registros_aux_w 
					from	pls_proposta_beneficiario	a 
					where	a.nr_seq_proposta = nr_sequencial_p 
					and	a.nr_seq_titular_contrato = nr_seq_titular_contrato_w 
					and	a.nr_sequencia	<> nr_seq_segurado_w 
					and	coalesce(a.dt_cancelamento::text, '') = '' 
					and	exists (	SELECT	1 
								from	pls_consist_grau_paren	x 
								where	x.nr_seq_regra		= nr_seq_regra_w 
								and	x.nr_seq_parentesco	= a.nr_seq_parentesco);
								 
					if (qt_registros_w+1+qt_registros_aux_w > qt_beneficiarios_w) then 
						ds_erro_w 	:= wheb_mensagem_pck.get_texto(281062, 'NR_SEQ_PARENTESCO_P=' || substr(obter_desc_grau_parentesco(nr_seq_parentesco_w),1,30));
						/* Mensagem: Grau de parentesco NR_SEQ_PARENTESCO_P ultrapassou o limite permitido por família. 
							  Favor verifique as regras de grau de parentesco na função OPS - Cadastros de Regras/OPS - Contratos e Beneficiários, no item Consistência grau de parentesco; */
 
					end if;	
				elsif (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then 
					select	count(1) 
					into STRICT	qt_registros_w 
					from	pls_proposta_beneficiario	a 
					where	a.nr_seq_proposta = nr_sequencial_p 
					and	a.nr_seq_titular_contrato = nr_seq_titular_contrato_w 
					and	a.nr_sequencia	<> nr_seq_segurado_w 
					and	coalesce(a.dt_cancelamento::text, '') = '' 
					and	exists (	SELECT	1 
								from	pls_consist_grau_paren	x 
								where	x.nr_seq_regra		= nr_seq_regra_w 
								and	x.nr_seq_parentesco	= a.nr_seq_parentesco);
								 
					if (qt_registros_w+1 > qt_beneficiarios_w) then 
						ds_erro_w	:= wheb_mensagem_pck.get_texto(281062, 'NR_SEQ_PARENTESCO_P=' || substr(obter_desc_grau_parentesco(nr_seq_parentesco_w),1,30));
						/* Mensagem: Grau de parentesco NR_SEQ_PARENTESCO_P ultrapassou o limite permitido por família. 
							  Favor verifique as regras de grau de parentesco na função OPS - Cadastros de Regras/OPS - Contratos e Beneficiários, no item Consistência grau de parentesco; */
 
					end if;	
				end if;
			end if;
		end if;		
		end;
	end loop;
	close C01;
elsif (ie_origem_rotina_p = 'I') then 
	select	nr_seq_titular_contrato, 
		nr_seq_titular_solic, 
		nr_seq_parentesco 
	into STRICT	nr_seq_titular_contrato_w, 
		nr_seq_titular_w, 
		nr_seq_parentesco_w 
	from	pls_inclusao_beneficiario 
	where	nr_sequencia = nr_sequencial_p;
 
	select	max(nr_seq_regra) 
	into STRICT	nr_seq_regra_w 
	from	pls_consist_grau_paren	b, 
		pls_consist_parentesco	a 
	where	b.nr_seq_regra		= a.nr_sequencia 
	and	b.nr_seq_parentesco	= nr_seq_parentesco_w 
	and	a.ie_situacao		= 'A';
	 
	if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then 
		select	qt_beneficiario 
		into STRICT	qt_beneficiarios_w 
		from	pls_consist_parentesco 
		where	nr_sequencia	= nr_seq_regra_w;
		 
		if (coalesce(qt_beneficiarios_w,0) > 0) then 
			if (nr_seq_titular_contrato_w IS NOT NULL AND nr_seq_titular_contrato_w::text <> '') then 
				select	count(1) 
				into STRICT	qt_registros_w 
				from	pls_segurado	a 
				where	a.nr_seq_titular = nr_seq_titular_contrato_w 
				and	coalesce(a.dt_rescisao::text, '') = '' 
				and	exists (	SELECT	1 
							from	pls_consist_grau_paren	x 
							where	x.nr_seq_regra		= nr_seq_regra_w 
							and	x.nr_seq_parentesco	= a.nr_seq_parentesco);
							 
				select	count(1) 
				into STRICT	qt_registros_aux_w 
				from	pls_inclusao_beneficiario	a 
				where	a.nr_seq_proposta = nr_sequencial_p 
				and	a.nr_seq_titular_contrato = nr_seq_titular_contrato_w 
				and	a.nr_sequencia <> nr_sequencial_p 
				and	a.ie_status	in ('A','C','P') 
				and	exists (	SELECT	1 
							from	pls_consist_grau_paren	x 
							where	x.nr_seq_regra		= nr_seq_regra_w 
							and	x.nr_seq_parentesco	= a.nr_seq_parentesco);
				 
				if (qt_registros_w+1+qt_registros_aux_w > qt_beneficiarios_w) then 
					ds_erro_w	:= wheb_mensagem_pck.get_texto(281062, 'NR_SEQ_PARENTESCO_P=' || substr(obter_desc_grau_parentesco(nr_seq_parentesco_w),1,30));
					/* Mensagem: Grau de parentesco NR_SEQ_PARENTESCO_P ultrapassou o limite permitido por família. 
						  Favor verifique as regras de grau de parentesco na função OPS - Cadastros de Regras/OPS - Contratos e Beneficiários, no item Consistência grau de parentesco; */
 
				end if;	
			elsif (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then 
				select	count(1) 
				into STRICT	qt_registros_w 
				from	pls_inclusao_beneficiario	a 
				where	a.nr_seq_proposta		= nr_sequencial_p 
				and	a.nr_seq_titular_solic		= nr_seq_titular_w 
				and	a.nr_sequencia			<> nr_sequencial_p 
				and	a.IE_STATUS	in ('A','C','P') 
				and	exists (	SELECT	1 
							from	pls_consist_grau_paren	x 
							where	x.nr_seq_regra		= nr_seq_regra_w 
							and	x.nr_seq_parentesco	= a.nr_seq_parentesco);
							 
				if (qt_registros_w+1 > qt_beneficiarios_w) then 
					ds_erro_w	:= wheb_mensagem_pck.get_texto(281062, 'NR_SEQ_PARENTESCO_P=' || substr(obter_desc_grau_parentesco(nr_seq_parentesco_w),1,30));
					/* Mensagem: Grau de parentesco NR_SEQ_PARENTESCO_P ultrapassou o limite permitido por família. 
						  Favor verifique as regras de grau de parentesco na função OPS - Cadastros de Regras/OPS - Contratos e Beneficiários, no item Consistência grau de parentesco; */
 
				end if;	
			end if;
		end if;
	end if;
end if;		
 
ds_erro_p := ds_erro_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_grau_paren_max ( nr_sequencial_p bigint, ie_origem_rotina_p text, cd_estabelecimento_p bigint, nm_usuario_p text, ds_erro_p INOUT text) FROM PUBLIC;

