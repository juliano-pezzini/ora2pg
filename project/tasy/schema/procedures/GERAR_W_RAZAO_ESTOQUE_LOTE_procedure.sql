-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_razao_estoque_lote ( dt_mesano_referencia_p timestamp, cd_estabelecimento_p bigint, cd_local_estoque_p bigint, cd_material_p bigint, cd_cgc_p text, nr_seq_lote_p bigint, ie_movimento_p text, nm_usuario_p text) AS $body$
DECLARE


dt_atualizacao_w		timestamp := clock_timestamp();
cd_local_estoque_w	smallint;
nr_seq_lote_w		bigint;
cd_material_w		integer;
ie_estoque_lote_w		varchar(1);
qt_saldo_w		double precision;
dt_movimento_estoque_w	timestamp;
dt_processo_w		timestamp;
nr_movimento_estoque_w	bigint;
nr_documento_w		bigint;
cd_acao_w		varchar(1);
ie_entrada_saida_w		varchar(1);
qt_estoque_w		double precision;
cd_operacao_estoque_w	smallint;
ie_movimento_w		varchar(1);

c01 CURSOR FOR
	SELECT	cd_local_estoque
	from	local_estoque
	where	cd_estabelecimento = cd_estabelecimento_p
	and	ie_situacao = 'A'
	and (coalesce(cd_local_estoque_p,0) = 0 or cd_local_estoque = cd_local_estoque_p);

c02 CURSOR FOR
	SELECT	'S' ie_movimento,
		a.nr_seq_lote_fornec
	from	movimento_estoque a,
		operacao_estoque b,
		material_lote_fornec c
	where	a.cd_operacao_estoque 	= b.cd_operacao_estoque
	and	a.nr_seq_lote_fornec = c.nr_sequencia
	and	(a.dt_processo IS NOT NULL AND a.dt_processo::text <> '')
	and	(a.nr_seq_lote_fornec IS NOT NULL AND a.nr_seq_lote_fornec::text <> '')
	and (coalesce(cd_material_p,0) = 0 or a.cd_material = cd_material_p)
	and (coalesce(nr_seq_lote_p,0) = 0 or a.nr_seq_lote_fornec = nr_seq_lote_p)
	and (coalesce(cd_cgc_p,0) = 0 or c.cd_cgc_fornec = cd_cgc_p)
	and	a.cd_local_estoque 	= cd_local_estoque_w
	and	a.dt_mesano_referencia 	= dt_mesano_referencia_p
	and	ie_movimento_p in ('S','A')
	group by a.nr_seq_lote_fornec
	
union all

	SELECT	'N' ie_movimento,
		a.nr_sequencia nr_seq_lote_fornec
	from	material_lote_fornec a
	where	not exists (select	1
			from	movimento_estoque b
			where   (b.dt_processo IS NOT NULL AND b.dt_processo::text <> '')
			and	b.nr_seq_lote_fornec 	= a.nr_sequencia
			and (coalesce(cd_local_estoque_p,0) = 0 or cd_local_estoque = cd_local_estoque_p)
			and	b.dt_mesano_referencia 	= dt_mesano_referencia_p
			and	b.cd_estabelecimento	= cd_estabelecimento_p)
	and	exists (select	1
			from	movimento_estoque b
			where   (b.dt_processo IS NOT NULL AND b.dt_processo::text <> '')
			and	b.nr_seq_lote_fornec	= a.nr_sequencia
			and	b.cd_local_estoque 	= cd_local_estoque_w
			and	b.dt_mesano_referencia < dt_mesano_referencia_p)
	and (coalesce(cd_material_p,0) = 0 or a.cd_material = cd_material_p)
	and (coalesce(nr_seq_lote_p,0) = 0 or a.nr_sequencia = nr_seq_lote_p)
	and (coalesce(cd_cgc_p,0) = 0 or a.cd_cgc_fornec = cd_cgc_p)
	and	a.cd_estabelecimento = cd_estabelecimento_p
	and	ie_movimento_p in ('N','A')
	group by a.nr_sequencia;

c03 CURSOR FOR
	SELECT	PKG_DATE_UTILS.start_of(a.dt_movimento_estoque,'dd',0) dt_movimento_estoque,
		PKG_DATE_UTILS.start_of(a.dt_processo,'dd',0) dt_processo,
		a.nr_movimento_estoque,
		a.nr_documento,
		a.cd_acao,
		b.ie_entrada_saida,
		a.cd_operacao_estoque,
		CASE WHEN 	b.ie_entrada_saida='E' THEN 	CASE WHEN 	a.cd_acao=1 THEN  	a.qt_estoque  ELSE a.qt_estoque * -1 END   ELSE CASE WHEN 	a.cd_acao=1 THEN  	a.qt_estoque * -1  ELSE a.qt_estoque * 1 END  END  qt_estoque
	from	movimento_estoque a,
		operacao_estoque b
	where	a.cd_operacao_estoque 	= b.cd_operacao_estoque
	and	(a.dt_processo IS NOT NULL AND a.dt_processo::text <> '')
	and	(a.nr_seq_lote_fornec IS NOT NULL AND a.nr_seq_lote_fornec::text <> '')
	and	a.nr_seq_lote_fornec 	= nr_seq_lote_w
	and	a.cd_local_estoque 	= cd_local_estoque_w
	and	a.dt_mesano_referencia 	= dt_mesano_referencia_p
	order by dt_movimento_estoque asc;


BEGIN
delete	FROM w_razao_estoque
where	nm_usuario = nm_usuario_p;
commit;

open c01;
loop
fetch c01 into
	cd_local_estoque_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	open c02;
	loop
	fetch c02 into
		ie_movimento_w,
		nr_seq_lote_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		select	cd_material
		into STRICT	cd_material_w
		from	material_lote_fornec
		where	nr_sequencia = nr_seq_lote_w;

		qt_saldo_w := obter_saldo_lote_fornecedor(cd_estabelecimento_p, cd_local_estoque_w, PKG_DATE_UTILS.ADD_MONTH(dt_mesano_referencia_p, -1, 0), nr_seq_lote_w);

		if (ie_movimento_w = 'S') or (qt_saldo_w > 0) then
			begin
			insert into w_razao_estoque(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				ie_tipo_informacao,
				cd_estabelecimento,
				dt_mesano_referencia,
				cd_material,
				cd_local_estoque,
				qt_estoque,
				nr_seq_lote)
			values (nextval('w_razao_estoque_seq'),
				dt_atualizacao_w,
				nm_usuario_p,
				0,
				cd_estabelecimento_p,
				dt_mesano_referencia_p,
				cd_material_w,
				cd_local_estoque_w,
				qt_saldo_w,
				nr_seq_lote_w);

			open C03;
			loop
			fetch C03 into
				dt_movimento_estoque_w,
				dt_processo_w,
				nr_movimento_estoque_w,
				nr_documento_w,
				cd_acao_w,
				ie_entrada_saida_w,
				cd_operacao_estoque_w,
				qt_estoque_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				insert into w_razao_estoque(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					ie_tipo_informacao,
					cd_estabelecimento,
					dt_mesano_referencia,
					cd_material,
					cd_local_estoque,
					qt_estoque,
					nr_seq_lote,
					dt_movimento_estoque,
					dt_processo,
					nr_movimento_estoque,
					nr_documento,
					cd_acao,
					ie_entrada_saida,
					cd_operacao_estoque)
				values (nextval('w_razao_estoque_seq'),
					dt_atualizacao_w,
					nm_usuario_p,
					1,
					cd_estabelecimento_p,
					dt_mesano_referencia_p,
					cd_material_w,
					cd_local_estoque_w,
					qt_estoque_w,
					nr_seq_lote_w,
					dt_movimento_estoque_w,
					dt_processo_w,
					nr_movimento_estoque_w,
					nr_documento_w,
					cd_acao_w,
					ie_entrada_saida_w,
					cd_operacao_estoque_w);
				end;
			end loop;
			close C03;

			qt_saldo_w := obter_saldo_lote_fornecedor(cd_estabelecimento_p, cd_local_estoque_w, dt_mesano_referencia_p, nr_seq_lote_w);
			insert into w_razao_estoque(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				ie_tipo_informacao,
				cd_estabelecimento,
				dt_mesano_referencia,
				cd_material,
				cd_local_estoque,
				qt_estoque,
				nr_seq_lote)
			values (nextval('w_razao_estoque_seq'),
				dt_atualizacao_w,
				nm_usuario_p,
				2,
				cd_estabelecimento_p,
				dt_mesano_referencia_p,
				cd_material_w,
				cd_local_estoque_w,
				qt_saldo_w,
				nr_seq_lote_w);
			end;
		end if;
		end;
	end loop;
	close c02;
	end;
end loop;
close c01;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_razao_estoque_lote ( dt_mesano_referencia_p timestamp, cd_estabelecimento_p bigint, cd_local_estoque_p bigint, cd_material_p bigint, cd_cgc_p text, nr_seq_lote_p bigint, ie_movimento_p text, nm_usuario_p text) FROM PUBLIC;

