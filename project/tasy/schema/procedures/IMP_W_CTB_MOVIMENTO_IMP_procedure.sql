-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE imp_w_ctb_movimento_imp (dt_reference_p timestamp, nm_usuario_p text ) AS $body$
DECLARE


    nr_sequencia_p          bigint;
    nr_lote_contabil_w      ctb_movimento.nr_lote_contabil%type;
    nr_seq_movimento_w	    bigint;
	cd_classif_debito_w	    varchar(40);
	cd_classif_credito_w	varchar(40);
    nr_seq_agrupamento_w	ctb_movimento.nr_seq_agrupamento%type;

    c_dados CURSOR FOR
        SELECT distinct cd_estabelecimento, cd_empresa  from W_CTB_MOVIMENTO_IMP 
        where nm_usuario = nm_usuario_p 
        and ie_status = 'V';

        r_dados c_dados%rowtype;


BEGIN
        open c_dados;
            loop
            fetch c_dados into r_dados;
                EXIT WHEN NOT FOUND; /* apply on c_dados */
                begin
                    begin
                        select  nr_sequencia
                        into STRICT    nr_sequencia_p
                        from    ctb_mes_ref
                        where   dt_referencia = dt_reference_p
                        and     cd_empresa = r_dados.cd_empresa;
                    exception
                        when no_data_found then
                            nr_sequencia_p := null;
                    end;
        
                    if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') then            
                        nr_lote_contabil_w := CTB_Gerar_Lote_Digitacao(nr_sequencia_p, r_dados.cd_estabelecimento, nm_usuario_p, nr_lote_contabil_w, null);

                    Declare c_movimento CURSOR FOR   SELECT * FROM w_ctb_movimento_imp
                                                    where nm_usuario = nm_usuario_p
                                                    and cd_estabelecimento = r_dados.cd_estabelecimento
                                                    and ie_status = 'V';
                    r_movimento c_movimento%Rowtype;
                    Begin
                        Open c_movimento;
                            Loop
                                Fetch c_movimento Into r_movimento;
                                    EXIT WHEN NOT FOUND; /* apply on c_movimento */
                                    select	nextval('ctb_movimento_seq')
                                    into STRICT 	nr_seq_movimento_w
;

                                    if (coalesce(r_movimento.cd_conta_debito,'0') <> '0') then
                                        cd_classif_debito_w	:= ctb_obter_classif_conta(r_movimento.cd_conta_debito, null, r_movimento.dt_movimento);
                                    end if;

                                    if (coalesce(r_movimento.cd_conta_credito,'0') <> '0') then
                                        cd_classif_credito_w	:= ctb_obter_classif_conta(r_movimento.cd_conta_credito, null, r_movimento.dt_movimento);
                                    end if;

                                    nr_seq_agrupamento_w :=  somente_numero(to_char(r_movimento.dt_movimento, 'MMYYYY'));

                                    INSERT INTO ctb_movimento(
                                        nr_sequencia,
                                        nr_lote_contabil,
                                        nr_seq_mes_ref,
                                        dt_movimento,
                                        vl_movimento, 
                                        dt_atualizacao,
                                        nm_usuario, 
                                        cd_historico, 
                                        cd_conta_debito,
                                        cd_conta_credito,
                                        ds_compl_historico, 
                                        nr_seq_agrupamento,
                                        ie_revisado, 
                                        cd_estabelecimento,
                                        nm_usuario_nrec,
                                        dt_atualizacao_nrec,
                                        cd_classif_debito,
                                        cd_classif_credito)
                                values (
                                        nr_seq_movimento_w,
                                        nr_lote_contabil_w,
                                        nr_sequencia_p,
                                        r_movimento.dt_movimento, 
                                        r_movimento.vl_movimento, 
                                        clock_timestamp(),
                                        r_movimento.nm_usuario, 
                                        r_movimento.cd_historico, 
                                        r_movimento.cd_conta_debito,
                                        r_movimento.cd_conta_credito,
                                        r_movimento.ds_compl_historico, 
                                        nr_seq_agrupamento_w, 
                                        'N', 
                                        r_movimento.cd_estabelecimento,
                                        r_movimento.nm_usuario_nrec,
                                        clock_timestamp(),
                                        cd_classif_debito_w,
                                        cd_classif_credito_w
                                        );
                                    commit;

                                    if (r_movimento.cd_centro_custo IS NOT NULL AND r_movimento.cd_centro_custo::text <> '') then
                                        insert into ctb_movto_centro_custo(
                                            nr_sequencia,
                                            nr_seq_movimento,
                                            cd_centro_custo,
                                            dt_atualizacao,
                                            nm_usuario,
                                            vl_movimento,
                                            pr_rateio)
                                        values (	nextval('ctb_movto_centro_custo_seq'),
                                            nr_seq_movimento_w,
                                            r_movimento.cd_centro_custo,
                                            clock_timestamp(),
                                            nm_usuario_p,
                                            r_movimento.vl_movimento,
                                            100);
                                        commit;
                                    end if;
                                End Loop;
                            Close c_movimento;
                        End;
                    end if;
                end;
            end loop;
        close c_dados;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE imp_w_ctb_movimento_imp (dt_reference_p timestamp, nm_usuario_p text ) FROM PUBLIC;

