-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE consistir_pf_cadsus ( cd_pessoa_fisica_p text, nm_usuario_p text, qt_inconsistencia_p INOUT bigint ) AS $body$
DECLARE

    qt_inconsistencia_w   bigint;
    pf_rec                PESSOA_FISICA%rowtype;
    ds_termo_w            varchar(255);
	ie_possui_w			  varchar(1);
	cd_raca_sus_w		  cor_pele.cd_raca_cor_sus%type;

BEGIN
    DELETE FROM cadsus_inconsistencias WHERE nm_usuario = nm_usuario_p;

    SELECT	*
    INTO STRICT    pf_rec
    FROM    pessoa_fisica
    WHERE   cd_pessoa_fisica = cd_pessoa_fisica_p;

    /*---------------------*/

    /*inconsistencias begin*/

    IF ( coalesce(pf_rec.nm_pessoa_fisica::text, '') = '' ) THEN
        CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'Nome não pode ser vázio.');
    ELSE
        IF ( regexp_like(pf_rec.nm_pessoa_fisica,'.*?{3,}\s+?.*') ) THEN
            SELECT	MAX(ds_termo)
            INTO STRICT    ds_termo_w
            FROM    sus_termo_invalido
            WHERE	REGEXP_LIKE( pf_rec.nm_pessoa_fisica, ds_termo, 'i' );

            IF (ds_termo_w IS NOT NULL AND ds_termo_w::text <> '') THEN
                CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'Nomes de pessoa não devem possuir o termo: ' || ds_termo_w);
            END IF;

            IF ( not regexp_like(pf_rec.nm_pessoa_fisica,'^[a-zA-Z´^~¨ '']+$') ) THEN
                CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'Nomes podem conter somente letras, ´, ^, ~ e ¨ ');
            END IF;
        ELSE
            CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'Nome não pode ter menos que 3 caracteres e deve possuir mais de um termo.');
        END IF;

		begin
			select	'S'
			into STRICT	ie_possui_w
			from 	compl_pessoa_fisica
			where	(nm_contato IS NOT NULL AND nm_contato::text <> '')
			and		cd_pessoa_fisica = pf_rec.cd_pessoa_fisica
			and	 	ie_tipo_complemento = 5;
		exception
		when others then
			CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'É obrigatório a informação do complemento mãe. Caso não tenha a informação em mãos colocar como SEM INFORMAÇÃO');
		end;

		begin
			select	'S'
			into STRICT	ie_possui_w
			from 	compl_pessoa_fisica
			where	(nm_contato IS NOT NULL AND nm_contato::text <> '')
			and		cd_pessoa_fisica = pf_rec.cd_pessoa_fisica
			and	 	ie_tipo_complemento = 4;
		exception
		when others then
			CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'É obrigatório a informação do complemento pai. Caso não tenha a informação em mãos colocar como SEM INFORMAÇÃO');
		end;

		if (coalesce(pf_rec.ie_sexo::text, '') = '') then
			CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'É obrigatório a informação do sexo do paciente.');
		end if;

		if (coalesce(pf_rec.nr_seq_cor_pele::text, '') = '') then
			CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'É obrigatório a informação da cor do paciente.');
		end if;

		if (pf_rec.nr_seq_cor_pele IS NOT NULL AND pf_rec.nr_seq_cor_pele::text <> '') then
			select	Sus_Obter_Cor_Pele(pf_rec.cd_pessoa_fisica,'C')
			into STRICT	cd_raca_sus_w
			;

			if (cd_raca_sus_w = '5') and (coalesce(pf_rec.nr_seq_etnia::text, '') = '') then
				CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'É obrigatório a informação da raça do paciente, quando o mesmo for indigena.');
			end if;
		end if;

		if (coalesce(pf_rec.dt_nascimento::text, '') = '') then
			CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'É obrigatório a informação da data de nascimento do paciente.');
		end if;

		if (pf_rec.dt_obito IS NOT NULL AND pf_rec.dt_obito::text <> '') then
			begin
				select	'S'
				into STRICT	ie_possui_w
				from 	declaracao_obito
				where	nr_atendimento = ( SELECT max(nr_atendimento) from atendimento_paciente where cd_pessoa_fisica = pf_rec.cd_pessoa_fisica)
				and		(nr_seq_causa_morte IS NOT NULL AND nr_seq_causa_morte::text <> '');

			exception
			when others then
				CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'É obrigatório a informação da Causa direta da morte do paciente na Movimentação de Paciente para o último atendimento do paciente.');
			end;
		end if;

		if (coalesce(pf_rec.cd_nacionalidade::text, '') = '') then
			CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'É obrigatório a informação da nacionalidade do paciente.');
		else
			begin
				select	'S'
				into STRICT	ie_possui_w
				from	nacionalidade
				where	ie_brasileiro = 'S'
				and		cd_nacionalidade = pf_rec.cd_nacionalidade;

				if (ie_possui_w = 'S') then
					begin
						select	'S'
						into STRICT	ie_possui_w
						from	pessoa_fisica
						where	cd_pessoa_fisica = pf_rec.cd_pessoa_fisica
						and		(nr_cep_cidade_nasc IS NOT NULL AND nr_cep_cidade_nasc::text <> '');
					exception
					when others then
						CALL add_inconsistencia_pf_cadsus(nm_usuario_p,'É obrigatório a informação da cidade natal.');
					end;
				end if;
			exception
			when others then
				null;
			end;
		end if;

    END IF;

    /*inconsistencias end*/

    /*-------------------*/

    SELECT
        COUNT(*)
    INTO STRICT
        qt_inconsistencia_w
    FROM
        cadsus_inconsistencias
    WHERE
        nm_usuario = nm_usuario_p;

    qt_inconsistencia_p := qt_inconsistencia_w;
    COMMIT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE consistir_pf_cadsus ( cd_pessoa_fisica_p text, nm_usuario_p text, qt_inconsistencia_p INOUT bigint ) FROM PUBLIC;

