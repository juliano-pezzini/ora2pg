-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pfcs_patient_classif_type ( nr_seq_indicator_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


-- Tasy cursors
c01_tasy CURSOR FOR
SELECT a.nr_sequencia cd_classification,
    a.ds_classificacao ds_classification
from classif_pessoa a
where coalesce(a.ie_exibe_pfcs, 'N') = 'S'
and	a.ie_situacao = 'A';

c02_tasy CURSOR(nr_seq_classif_p bigint) FOR
SELECT v.cd_pessoa_fisica id_patient,
    coalesce(get_formatted_person_name(v.cd_pessoa_fisica, 'list'), obter_nome_pf(v.cd_pessoa_fisica)) nm_patient,
    v.nr_atendimento,
    obter_sexo_pf(v.cd_pessoa_fisica, 'D') ds_gender,
    p.dt_nascimento dt_birthdate,
    obter_dados_pf(v.cd_pessoa_fisica, 'I') qt_idade_paciente,
    coalesce(v.dt_prevista, v.dt_solicitacao) request_date,
    substr(obter_desc_status_gv(v.ie_status,'D'),1,100) ds_status,
    v.ie_status cd_status,
    substr(obter_valor_dominio(1410,v.ie_tipo_vaga),1,100) ds_type,
    v.ie_tipo_vaga cd_type
from gestao_vaga v,
    pessoa_fisica p,
    pessoa_classif c
where v.ie_status in ('A', 'H', 'L', 'I')
    and	v.cd_pessoa_fisica = p.cd_pessoa_fisica
    and	p.cd_pessoa_fisica = c.cd_pessoa_fisica
    and	clock_timestamp() between c.dt_inicio_vigencia and coalesce(c.dt_final_vigencia, clock_timestamp())
    and	c.nr_seq_classif = nr_seq_classif_p
    and	v.cd_estabelecimento = cd_estabelecimento_p
    and	coalesce(v.nr_atendimento::text, '') = '';


-- Integration cursors
c01_fhir CURSOR FOR
SELECT distinct upper(cd_courtesy) cd_classification,
    max(ds_classification) ds_classification
from pfcs_encounter
where (cd_courtesy IS NOT NULL AND cd_courtesy::text <> '')
    and (ds_classification IS NOT NULL AND ds_classification::text <> '')
group by upper(cd_courtesy);

c02_fhir CURSOR(cd_courtesy_p text) FOR
SELECT pat.patient_id id_patient,
    pfcs_get_human_name(pat.nr_sequencia, 'Patient') nm_patient,
    enc.id_encounter nr_atendimento,
    pat.gender ds_gender,
    pat.birthdate dt_birthdate,
    trunc(months_between(coalesce(pat.deceased_date, clock_timestamp()), pat.birthdate)/12) qt_idade_paciente,
    coalesce(ser.dt_authored_on, ser.dt_atualizacao) request_date,
    substr(obter_valor_dominio(82, uni.ie_status_unidade),1,255) ds_status,
    uni.ie_status_unidade cd_status,
    substr(obter_valor_dominio(1,sec.cd_classif_setor),1,100) ds_type,
    sec.cd_classif_setor cd_type
from pfcs_service_request ser,
    pfcs_encounter enc,
    pfcs_patient pat,
    unidade_atendimento uni,
    setor_atendimento sec
where ser.cd_service in ('E0401', 'E0402')
    and ser.si_status = 'ACTIVE'
    and ser.si_intent = 'PLAN'
    and enc.nr_seq_patient = pat.nr_sequencia
    and ser.nr_seq_encounter = enc.nr_sequencia
    and ser.nr_seq_location = uni.nr_seq_location
    and uni.cd_setor_atendimento = sec.cd_setor_atendimento
    and sec.ie_situacao = 'A'
    and sec.cd_classif_setor in ('1','3','4','9','11','12')
    and sec.cd_estabelecimento = cd_estabelecimento_p
    and (enc.period_start IS NOT NULL AND enc.period_start::text <> '')
    and coalesce(enc.period_end::text, '') = ''
    and enc.cd_courtesy = cd_courtesy_p;


-- Variables
qt_total_w					bigint := 0;
pfcs_panel_detail_seq_w		pfcs_panel_detail.nr_sequencia%type;
pfcs_panel_seq_w			pfcs_panel.nr_sequencia%type;
nr_seq_operational_level_w	pfcs_operational_level.nr_sequencia%type;
pfcs_flag_settings_w        pfcs_general_rule.ie_table_origin%type;
BEGIN
nr_seq_operational_level_w := pfcs_get_structure_level(
        cd_establishment_p => cd_estabelecimento_p,
        ie_level_p => 'O',
        ie_info_p => 'C');

select ie_table_origin
into STRICT pfcs_flag_settings_w
from pfcs_general_rule;

-- Tasy tables or both
if (pfcs_flag_settings_w = 0 or pfcs_flag_settings_w = 2) then
    for c01_w in c01_tasy loop
        qt_total_w := 0;
        for c02_w in c02_tasy(c01_w.cd_classification) loop
            qt_total_w := qt_total_w + 1;

            select nextval('pfcs_panel_detail_seq')
            into STRICT pfcs_panel_detail_seq_w
;

            insert into pfcs_panel_detail(
                nr_sequencia,
                nm_usuario,
                dt_atualizacao,
                nm_usuario_nrec,
                dt_atualizacao_nrec,
                ie_situation,
                nr_seq_indicator,
                nr_seq_operational_level)
            values (
                pfcs_panel_detail_seq_w,
                nm_usuario_p,
                clock_timestamp(),
                nm_usuario_p,
                clock_timestamp(),
                'T',
                nr_seq_indicator_p,
                nr_seq_operational_level_w);

            insert into pfcs_detail_patient(
                nr_sequencia,
                nm_usuario,
                dt_atualizacao,
                nm_usuario_nrec,
                dt_atualizacao_nrec,
                nr_seq_detail,
                id_patient,
                nm_patient,
                ds_gender,
                cd_classification,
                ds_classification,
                dt_birthdate,
                ds_age_range,
                nr_encounter_varchar)
            values (
                nextval('pfcs_detail_patient_seq'),
                nm_usuario_p,
                clock_timestamp(),
                nm_usuario_p,
                clock_timestamp(),
                pfcs_panel_detail_seq_w,
                c02_w.id_patient,
                c02_w.nm_patient,
                c02_w.ds_gender,
                c01_w.cd_classification,
                c01_w.ds_classification,
                c02_w.dt_birthdate,
                c02_w.qt_idade_paciente,
                c02_w.nr_atendimento);

            insert into pfcs_detail_bed_request(
                nr_sequencia,
                dt_atualizacao,
                nm_usuario,
                dt_atualizacao_nrec,
                nm_usuario_nrec,
                ds_type,
                cd_type,
                ds_status,
                cd_status,
                dt_time_request,
                nr_seq_detail)
            values (nextval('pfcs_detail_bed_request_seq'),
                clock_timestamp(),
                nm_usuario_p,
                clock_timestamp(),
                nm_usuario_p,
                c02_w.ds_type,
                c02_w.cd_type,
                c02_w.ds_status,
                c02_w.cd_status,
                c02_w.request_date,
                pfcs_panel_detail_seq_w);
        end loop;

         := pfcs_pck.pfcs_generate_results(
                vl_indicator_p => qt_total_w, ds_reference_value_p => c01_w.ds_classification, cd_reference_value_p => c01_w.cd_classification, nr_seq_indicator_p => nr_seq_indicator_p, nr_seq_operational_level_p => nr_seq_operational_level_w, nm_usuario_p => nm_usuario_p, nr_seq_panel_p => pfcs_panel_seq_w);

        CALL pfcs_pck.pfcs_update_detail(
                nr_seq_indicator_p => nr_seq_indicator_p,
                nr_seq_panel_p => pfcs_panel_seq_w,
                nr_seq_operational_level_p => nr_seq_operational_level_w,
                nm_usuario_p => nm_usuario_p);
    end loop;
end if;

-- Integration tables or both
if (pfcs_flag_settings_w = 1 or pfcs_flag_settings_w = 2) then
    for c01_w in c01_fhir loop
        qt_total_w := 0;
        for c02_w in c02_fhir(c01_w.cd_classification) loop
            qt_total_w := qt_total_w + 1;

            select nextval('pfcs_panel_detail_seq')
            into STRICT pfcs_panel_detail_seq_w
;

            insert into pfcs_panel_detail(
                nr_sequencia,
                nm_usuario,
                dt_atualizacao,
                nm_usuario_nrec,
                dt_atualizacao_nrec,
                ie_situation,
                nr_seq_indicator,
                nr_seq_operational_level)
            values (
                pfcs_panel_detail_seq_w,
                nm_usuario_p,
                clock_timestamp(),
                nm_usuario_p,
                clock_timestamp(),
                'T',
                nr_seq_indicator_p,
                nr_seq_operational_level_w);

            insert into pfcs_detail_patient(
                nr_sequencia,
                nm_usuario,
                dt_atualizacao,
                nm_usuario_nrec,
                dt_atualizacao_nrec,
                nr_seq_detail,
                id_patient,
                nm_patient,
                ds_gender,
                cd_classification,
                ds_classification,
                dt_birthdate,
                ds_age_range,
                nr_encounter_varchar)
            values (
                nextval('pfcs_detail_patient_seq'),
                nm_usuario_p,
                clock_timestamp(),
                nm_usuario_p,
                clock_timestamp(),
                pfcs_panel_detail_seq_w,
                c02_w.id_patient,
                c02_w.nm_patient,
                c02_w.ds_gender,
                c01_w.cd_classification,
                c01_w.ds_classification,
                c02_w.dt_birthdate,
                c02_w.qt_idade_paciente,
                c02_w.nr_atendimento);

            insert into pfcs_detail_bed_request(
                nr_sequencia,
                dt_atualizacao,
                nm_usuario,
                dt_atualizacao_nrec,
                nm_usuario_nrec,
                ds_type,
                cd_type,
                ds_status,
                cd_status,
                dt_time_request,
                nr_seq_detail)
            values (nextval('pfcs_detail_bed_request_seq'),
                clock_timestamp(),
                nm_usuario_p,
                clock_timestamp(),
                nm_usuario_p,
                c02_w.ds_type,
                c02_w.cd_type,
                c02_w.ds_status,
                c02_w.cd_status,
                c02_w.request_date,
                pfcs_panel_detail_seq_w);
        end loop;

         := pfcs_pck.pfcs_generate_results(
                vl_indicator_p => qt_total_w, ds_reference_value_p => c01_w.ds_classification, cd_reference_value_p => c01_w.cd_classification, nr_seq_indicator_p => nr_seq_indicator_p, nr_seq_operational_level_p => nr_seq_operational_level_w, nm_usuario_p => nm_usuario_p, nr_seq_panel_p => pfcs_panel_seq_w);

        CALL pfcs_pck.pfcs_update_detail(
                nr_seq_indicator_p => nr_seq_indicator_p,
                nr_seq_panel_p => pfcs_panel_seq_w,
                nr_seq_operational_level_p => nr_seq_operational_level_w,
                nm_usuario_p => nm_usuario_p);
    end loop;
end if;

CALL pfcs_pck.pfcs_activate_records(
        nr_seq_indicator_p => nr_seq_indicator_p,
        nr_seq_operational_level_p => nr_seq_operational_level_w,
        nm_usuario_p => nm_usuario_p);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pfcs_patient_classif_type ( nr_seq_indicator_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

