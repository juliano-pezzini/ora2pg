-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_calcular_preco_simpro (cd_estabelecimento_p bigint, nr_seq_prestador_p bigint, nr_seq_material_p bigint, tx_pfb_p bigint, tx_pmc_p bigint, dt_base_p timestamp, ie_tipo_preco_simpro_p text, vl_preco_p INOUT bigint, dt_vigencia_p INOUT timestamp, vl_pfb_neutra_simpro_p bigint, vl_pfb_positiva_simpro_p bigint, vl_pfb_negativa_simpro_p bigint, vl_pfb_nao_aplicavel_simpro_p bigint, ie_tipo_ajuste_pfb_p text, nm_usuario_p text, ie_ult_valor_fabrica_p pls_regra_preco_mat.ie_ult_valor_fabrica%type) AS $body$
DECLARE


ie_fora_linha_w			varchar(1);
vl_preco_w			double precision := 0;
cd_simpro_w			bigint;
qt_conversao_w			double precision;
dt_vigencia_w			timestamp;
ie_tipo_preco_w			varchar(01);
vl_pfb_w			double precision;
vl_pmc_w			double precision;
dt_fora_linha_w			timestamp;
ie_ultimo_valor_valido_w	varchar(1);
dt_base_w			timestamp;
ie_tipo_lista_w			varchar(1);


BEGIN

dt_base_w	:= coalesce(dt_base_p,clock_timestamp());

select	coalesce(max(ie_fora_linha_simpro),'S')
into STRICT	ie_fora_linha_w
from	pls_parametros
where	cd_estabelecimento = cd_estabelecimento_p;

select	coalesce(max(c.qt_conversao_simpro),1),
	coalesce(max(c.cd_simpro),0),
	coalesce(max(b.dt_fora_linha),clock_timestamp() + interval '1000 days')
into STRICT	qt_conversao_w,
	cd_simpro_w,
	dt_fora_linha_w
from	pls_material c,
	simpro_cadastro b
where	b.cd_simpro		= c.cd_simpro
and	c.nr_sequencia		= nr_seq_material_p
and	c.cd_estabelecimento	= cd_estabelecimento_p;

if (cd_simpro_w > 0) then

	dt_vigencia_w		:= clock_timestamp() - interval '2000 days';

	if (ie_ult_valor_fabrica_p = 'S') then
		select	max(dt_vigencia)
		into STRICT	dt_vigencia_w
		from	simpro_preco
		where	cd_simpro	= cd_simpro_w
		and	dt_vigencia	<= dt_base_w
		and	ie_tipo_alteracao <> 'S';
	else
		select	max(dt_vigencia)
		into STRICT	dt_vigencia_w
		from	simpro_preco
		where	cd_simpro	= cd_simpro_w
		and	dt_vigencia	<= dt_base_w;
	end if;

	select	max(ie_ultimo_valor_valido)
	into STRICT	ie_ultimo_valor_valido_w
	from	pls_regra_simpro_preco	a
	where	dt_base_w between a.dt_inicio_vigencia and coalesce(a.dt_fim_vigencia,dt_base_w)
	and	a.ie_situacao = 'A'
	and	a.ie_ultimo_valor_valido = 'S';

	if (coalesce(ie_ultimo_valor_valido_w,'N') = 'N') then

		if (ie_fora_linha_w = 'S') or (dt_fora_linha_w <= dt_vigencia_w) then

			if (ie_ult_valor_fabrica_p = 'S') then
				select coalesce(max(vl_preco_fabrica),0),
					coalesce(max(vl_preco_venda),0),
					coalesce(max(ie_tipo_lista),'X')
				into STRICT 	vl_pfb_w,
					vl_pmc_w,
					ie_tipo_lista_w
				from	simpro_preco	a
				where	a.cd_simpro	= cd_simpro_w
				and	a.dt_vigencia	= dt_vigencia_w
				and	a.ie_tipo_alteracao <> 'S'
				and	a.nr_sequencia = (SELECT max(b.nr_sequencia)
							from	simpro_preco	b
							where	b.cd_simpro	= cd_simpro_w
							and	b.dt_vigencia	= dt_vigencia_w
							and	b.ie_tipo_alteracao <> 'S');

				if (ie_tipo_preco_simpro_p = 'F') then
					if (coalesce(ie_tipo_ajuste_pfb_p,'U') = 'U') then
						vl_preco_w	:= vl_pfb_w * tx_pfb_p;
					else
						if (ie_tipo_lista_w = 'N') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_negativa_simpro_p);
						elsif (ie_tipo_lista_w = 'Q') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_nao_aplicavel_simpro_p);
						elsif (ie_tipo_lista_w = 'S') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_positiva_simpro_p);
						elsif (ie_tipo_lista_w = 'T')	then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_neutra_simpro_p);
						end if;
					end if;
				else
					vl_preco_w	:= vl_pmc_w * tx_pmc_p;
				end if;

			else
				select coalesce(max(vl_preco_fabrica),0),
					coalesce(max(vl_preco_venda),0),
					coalesce(max(ie_tipo_preco),'X'),
					coalesce(max(ie_tipo_lista),'X')
				into STRICT 	vl_pfb_w,
					vl_pmc_w,
					ie_tipo_preco_w,
					ie_tipo_lista_w
				from	simpro_preco	a
				where	cd_simpro	= cd_simpro_w
				and	dt_vigencia	= dt_vigencia_w
				and (ie_tipo_preco = ie_tipo_preco_simpro_p
				or	coalesce(ie_tipo_preco_simpro_p,'N') = 'N')
				and	nr_sequencia = (SELECT	max(b.nr_sequencia)
							from	simpro_preco	b
							where	b.cd_simpro	= cd_simpro_w
							and	b.dt_vigencia	= dt_vigencia_w
							and (b.ie_tipo_preco = ie_tipo_preco_simpro_p
							or	coalesce(ie_tipo_preco_simpro_p,'N') = 'N'));

				if (ie_tipo_preco_w = 'F') then
					if (coalesce(ie_tipo_ajuste_pfb_p,'U') = 'U') then
						vl_preco_w	:= vl_pfb_w * tx_pfb_p;
					else
						if (ie_tipo_lista_w = 'N') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_negativa_simpro_p);
						elsif (ie_tipo_lista_w = 'Q') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_nao_aplicavel_simpro_p);
						elsif (ie_tipo_lista_w = 'S') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_positiva_simpro_p);
						elsif (ie_tipo_lista_w = 'T')	then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_neutra_simpro_p);
						end if;
					end if;
				else
					vl_preco_w	:= vl_pmc_w * tx_pmc_p;
				end if;
			end if;
		end if;
	else
		/* caso exista uma regra cadastrada com este valor, este select busca o último preço válido do simpro para o material em questão -- jjung - 26/10/2012 OS 487571*/

		begin
			-- Caso o campo esteja marcado na regra de preço ele ignora o tipo de preço e utiliza o da regra de preço
			if (ie_ult_valor_fabrica_p = 'S') then

				select	coalesce(max(vl_preco_fabrica),0),
					coalesce(max(ie_tipo_lista),'X'),
					coalesce(max(vl_preco_venda),0),
					coalesce(max(ie_tipo_preco),'X')
				into STRICT 	vl_pfb_w,
					ie_tipo_lista_w,
					vl_pmc_w,
					ie_tipo_preco_w
				from	simpro_preco
				where	cd_simpro	= cd_simpro_w
				and	dt_vigencia	= dt_vigencia_w
				and	ie_tipo_alteracao <> 'S';

				if (ie_tipo_preco_w = 'F') then
					if (coalesce(ie_tipo_ajuste_pfb_p,'U') = 'U') then
						vl_preco_w	:= vl_pfb_w * tx_pfb_p;
					else
						if (ie_tipo_lista_w = 'N') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_negativa_simpro_p);
						elsif (ie_tipo_lista_w = 'Q') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_nao_aplicavel_simpro_p);
						elsif (ie_tipo_lista_w = 'S') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_positiva_simpro_p);
						elsif (ie_tipo_lista_w = 'T')	then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_neutra_simpro_p);
						end if;
					end if;
				else
					vl_preco_w	:= ( vl_pmc_w * tx_pmc_p);
				end if;
			else
				select	max(dt_vigencia)
				into STRICT	dt_vigencia_w
				from	simpro_preco
				where	cd_simpro	= cd_simpro_w
				and	dt_vigencia	<= dt_base_w
				and	coalesce(vl_preco_fabrica,0) > 0;

				select	coalesce(max(vl_preco_fabrica),0),
					coalesce(max(ie_tipo_preco),'X'),
					coalesce(max(ie_tipo_lista),'X')
				into STRICT 	vl_pfb_w,
					ie_tipo_preco_w,
					ie_tipo_lista_w
				from	simpro_preco
				where	cd_simpro	= cd_simpro_w
				and	dt_vigencia	= dt_vigencia_w
				and (ie_tipo_preco = ie_tipo_preco_simpro_p
				or	coalesce(ie_tipo_preco_simpro_p,'N') = 'N')
				and	coalesce(vl_preco_fabrica,0) > 0;

				if (ie_tipo_preco_w = 'F') then
					if (coalesce(ie_tipo_ajuste_pfb_p,'U') = 'U') then
						vl_preco_w	:= vl_pfb_w * tx_pfb_p;
					else
						if (ie_tipo_lista_w = 'N') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_negativa_simpro_p);
						elsif (ie_tipo_lista_w = 'Q') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_nao_aplicavel_simpro_p);
						elsif (ie_tipo_lista_w = 'S') then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_positiva_simpro_p);
						elsif (ie_tipo_lista_w = 'T')	then
							vl_preco_w := dividir_sem_round(vl_pfb_w,vl_pfb_neutra_simpro_p);
						end if;
					end if;
				else
					select	max(dt_vigencia)
					into STRICT	dt_vigencia_w
					from	simpro_preco
					where	cd_simpro	= cd_simpro_w
					and	dt_vigencia	<= dt_base_w
					and	coalesce(vl_preco_venda,0) > 0;

					select	coalesce(max(vl_preco_venda),0)
					into STRICT	vl_pmc_w
					from	simpro_preco
					where	cd_simpro	= cd_simpro_w
					and	dt_vigencia	= dt_vigencia_w
					and (ie_tipo_preco = ie_tipo_preco_simpro_p
					or	coalesce(ie_tipo_preco_simpro_p,'N') = 'N')
					and	coalesce(vl_preco_venda,0) > 0;

					vl_preco_w	:= ( vl_pmc_w * tx_pmc_p);
				end if;
			end if;
		exception
		when others then
			vl_preco_w := 0;
			dt_vigencia_w := null;
		end;

	end if;
end if;

if (vl_preco_w > 0) then
	vl_preco_w := dividir_sem_round(vl_preco_w,qt_conversao_w);
end if;
vl_preco_p		:= vl_preco_w;

dt_vigencia_p		:= dt_vigencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_calcular_preco_simpro (cd_estabelecimento_p bigint, nr_seq_prestador_p bigint, nr_seq_material_p bigint, tx_pfb_p bigint, tx_pmc_p bigint, dt_base_p timestamp, ie_tipo_preco_simpro_p text, vl_preco_p INOUT bigint, dt_vigencia_p INOUT timestamp, vl_pfb_neutra_simpro_p bigint, vl_pfb_positiva_simpro_p bigint, vl_pfb_negativa_simpro_p bigint, vl_pfb_nao_aplicavel_simpro_p bigint, ie_tipo_ajuste_pfb_p text, nm_usuario_p text, ie_ult_valor_fabrica_p pls_regra_preco_mat.ie_ult_valor_fabrica%type) FROM PUBLIC;

