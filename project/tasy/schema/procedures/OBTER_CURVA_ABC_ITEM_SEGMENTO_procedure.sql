-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE obter_curva_abc_item_segmento (dt_mesano_referencia_p timestamp, nr_seq_segmento_p bigint, cd_material_p bigint, ie_curva_abc_p INOUT text) AS $body$
DECLARE


ds_segmento_w			varchar(255);
cd_estabelecimento_w		bigint;
vl_estoque_w			double precision;
ie_curva_abc_w			varchar(1) := 'C';
vl_acumulado_w			double precision;
pr_acumulado_w			double precision;
vl_total_w			double precision;
pr_curvaa_w			double precision;
pr_curvab_w			double precision;
pr_curvac_w			double precision;
ie_forma_curva_abc_w		varchar(01);
qt_meses_curva_abc_w		smallint;
dt_inicio_w			timestamp;
dt_final_w			timestamp;


BEGIN

select	coalesce(max(cd_estabelecimento),0)
into STRICT	cd_estabelecimento_w
from	segmento_compras
where	nr_sequencia = nr_seq_segmento_p;

vl_acumulado_w		:= 0;
pr_acumulado_w		:= 0;
vl_total_w		:= 0;

select	a.vl_curvaa,
	a.vl_curvab,
	a.vl_curvac,
	a.ie_forma_curva_abc,
	coalesce(a.qt_meses_curva_abc,0),
	ds_segmento
into STRICT	pr_curvaa_w,
	pr_curvab_w,
	pr_curvac_w,
	ie_forma_curva_abc_w,
	qt_meses_curva_abc_w,
	ds_segmento_w
from	segmento_compras a
where	a.nr_sequencia = nr_seq_segmento_p;

if (coalesce(pr_curvaa_w::text, '') = '') or (coalesce(pr_curvab_w::text, '') = '') or (coalesce(pr_curvac_w::text, '') = '') then
	/*Falta informar os dados de curva ABC no cadastro do segmento #@DS_SEGMENTO_W#@.*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(215581,'DS_SEGMENTO_W='||DS_SEGMENTO_W);
end if;

dt_inicio_w	:= pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH', 0);
dt_final_w	:= pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH', 0);

if (ie_forma_curva_abc_w = 1) and (qt_meses_curva_abc_w > 0) then
	dt_inicio_w	:= pkg_date_utils.add_month(pkg_date_utils.start_of(dt_mesano_referencia_p,'MONTH', 0), - qt_meses_curva_abc_w, 0);
end if;

select	coalesce(sum(coalesce(a.vl_estoque,0)),0)
into STRICT	vl_total_w
from	saldo_estoque a,
	material b,
	segmento_compras c,
	segmento_compras_estrut d
where	a.cd_material = b.cd_material_estoque
and	c.nr_sequencia = d.nr_seq_segmento
and	d.cd_material = b.cd_material
and	dt_mesano_referencia between dt_inicio_w and dt_final_w
and	((cd_estabelecimento_w = 0) or (c.cd_estabelecimento = cd_estabelecimento_w));


select	coalesce(sum(coalesce(a.vl_estoque,0)),0)
into STRICT	vl_estoque_w
from	saldo_estoque a,
	material b,
	segmento_compras c,
	segmento_compras_estrut d
where	a.cd_material	= b.cd_material_estoque
and	c.nr_sequencia	= d.nr_seq_segmento
and	d.cd_material	= b.cd_material
and	d.cd_material	= cd_material_p
and	dt_mesano_referencia between dt_inicio_w and dt_final_w
and	((cd_estabelecimento_w = 0) or (c.cd_estabelecimento = cd_estabelecimento_w))
and	vl_total_w > 0;


vl_acumulado_w			:= vl_acumulado_w + vl_estoque_w;
pr_acumulado_w			:= round((dividir((vl_acumulado_w * 100), vl_total_w))::numeric,4);

if (pr_acumulado_w <= pr_curvaa_w) then
	ie_curva_abc_w 		:= 'A';
elsif (pr_acumulado_w <= pr_curvaa_w + pr_curvab_w) then
	ie_curva_abc_w		:= 'B';
else
	ie_curva_abc_w		:= 'C';
end if;

ie_curva_abc_p := ie_curva_abc_w;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE obter_curva_abc_item_segmento (dt_mesano_referencia_p timestamp, nr_seq_segmento_p bigint, cd_material_p bigint, ie_curva_abc_p INOUT text) FROM PUBLIC;

