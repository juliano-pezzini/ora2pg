-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_encaixe_agecons (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p timestamp, qt_duracao_p bigint, cd_pessoa_fisica_p text, nm_pessoa_fisica_p text, cd_convenio_p bigint, cd_medico_req_p text, ds_observacao_p text, nr_seq_agenda_rxt_p bigint, nr_seq_motivo_encaixe_p bigint, ie_classif_agenda_p text, nm_usuario_p text, nr_seq_agecir_p bigint, nr_seq_encaixe_p INOUT bigint, cd_categoria_p text, cd_plano_p text, nr_seq_gercon_p bigint default null, nr_seq_segurado_p bigint default null, dt_desejada_atendimento_p timestamp default null) AS $body$
DECLARE


dt_encaixe_w					timestamp;
ds_consistencia_w				varchar(255);
ds_consistencia_turno_w			varchar(255);
cd_turno_w						varchar(1);
nr_seq_classif_w				bigint;
ie_forma_convenio_w				varchar(2);
cd_convenio_w					integer;
cd_categoria_w					varchar(10);
cd_plano_w						varchar(10);
cd_usuario_convenio_w			varchar(30);
dt_validade_w					timestamp;
nr_doc_convenio_w				varchar(20);
cd_tipo_acomodacao_w			smallint;
nr_seq_agenda_w					agenda_consulta.nr_sequencia%type;
nr_seq_lista_espera_w			bigint;
ie_classif_agenda_w				varchar(05);
ie_gravar_seq_agecir_w			varchar(1);
dt_nascimento_w					timestamp;
cd_setor_agenda_w				bigint;
ds_observacao_aux				varchar(4000);
nr_seq_turno_w					bigint;
nr_seq_turno_esp_w				bigint;
ie_regra_conv_turno_w			varchar(1);	
ie_regra_horario_turno_w 		varchar(1);	
nr_seq_hora_w					bigint;
ie_permite_classif_w			varchar(1) := 'S';
ie_consistencia_classif_w 		varchar(255);
ie_agenda_classif_w	  			varchar(255);
ie_consistir_regra_classif_w	varchar(1);	
ie_gerar_solic_pront_enc_w		varchar(1);
ie_gerar_solic_pront_w			varchar(1);
ie_gerar_solic_pront_gp_w		varchar(1);
ie_permite_solic_sem_pront_w	varchar(1);
nr_prontuario_w					bigint;
ie_obrigar_classif_w			varchar(1);
qt_classif_w					bigint;
ie_atualizar_sala_w				varchar(1);
nr_seq_sala_w					bigint;
ie_gerar_dentro_per_w			varchar(1);
ie_perm_encaixe_turno_w			varchar(1);
ie_perm_encaixe_turno_esp_w		varchar(1);
cd_convenio_param_w				bigint;
dt_intervalo_inicial_w			timestamp;
dt_intervalo_final_w			timestamp;
ie_feriado_w					varchar(1);
ie_feriado_agenda_w				agenda.ie_feriado%type;
nr_seq_bloq_geral_w			agenda_bloqueio_geral.nr_sequencia%type;



BEGIN
if (cd_agenda_p IS NOT NULL AND cd_agenda_p::text <> '') and (dt_agenda_p IS NOT NULL AND dt_agenda_p::text <> '') and (hr_encaixe_p IS NOT NULL AND hr_encaixe_p::text <> '') and (qt_duracao_p IS NOT NULL AND qt_duracao_p::text <> '') and
	((cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') or (nm_pessoa_fisica_p IS NOT NULL AND nm_pessoa_fisica_p::text <> '')) and
	--(cd_convenio_p is not null) and

	--(cd_medico_p is not null) and

	--(cd_medico_exec_p is not null)
	(nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then
	/* obter horario agenda x encaixe */
	
	dt_encaixe_w := pkg_date_utils.get_DateTime(dt_agenda_p, hr_encaixe_p);
	
	CALL CONSISTE_ENCAIXE_TURNO_AGECONS( dt_agenda_p, dt_encaixe_w, cd_agenda_p );

	ie_obrigar_classif_w := obter_param_usuario(821, 416, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_obrigar_classif_w);
	
	ie_atualizar_sala_w := obter_param_usuario(821, 427, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_atualizar_sala_w);
	
	ie_gerar_dentro_per_w := obter_param_usuario(821, 436, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_dentro_per_w);
	
	if (cd_convenio_p > 0) then
		cd_convenio_param_w := cd_convenio_p;
	end if;
	
	/* obter parametros */

	select	coalesce(max(obter_valor_param_usuario(821, 6,  obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N'),
		coalesce(max(obter_valor_param_usuario(821,42,  obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'E'),
		coalesce(max(obter_valor_param_usuario(821,121, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N'),
		coalesce(max(obter_valor_param_usuario(821,187, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'S'),
		coalesce(max(obter_valor_param_usuario(821,219, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'S'),
		coalesce(max(obter_valor_param_usuario(821,289, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'S'),
		coalesce(max(obter_valor_param_usuario(821,358, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N'),
		coalesce(max(obter_valor_param_usuario(821,275, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p)), 'N')
	into STRICT	ie_forma_convenio_w,
			ie_classif_agenda_w,
			ie_gravar_seq_agecir_w,
			ie_regra_conv_turno_w,
			ie_regra_horario_turno_w,
			ie_consistir_regra_classif_w,
			ie_gerar_solic_pront_enc_w,
			ie_permite_solic_sem_pront_w
	;
	
	/* Obter dados de configuracao da agenda, para geracao do prontuario SAME ou CIP*/

	select	coalesce(max(ie_gerar_solic_pront), 'S'),		
		coalesce(max(ie_gerar_solic_pront_gp), 'N'),
		coalesce(max(ie_feriado),'N'),
		max(cd_setor_agenda)
	into STRICT	ie_gerar_solic_pront_w,		
		ie_gerar_solic_pront_gp_w,
		ie_feriado_agenda_w,
		cd_setor_agenda_w
	from	agenda
	where 	cd_agenda	= cd_agenda_p;


	if (ie_regra_horario_turno_w = 'T') then
		select	obter_turno_encaixe_d_agecons(cd_agenda_p,dt_encaixe_w,'N')
		into STRICT	nr_seq_turno_w
		;	
	else
		select	obter_turno_encaixe_agecons(cd_agenda_p,dt_encaixe_w)
		into STRICT	nr_seq_turno_w
		;	
	end if;
	
	select	coalesce(max(ie_encaixe),'S'),
			coalesce(max(ie_feriado),ie_feriado_agenda_w)
	into STRICT	ie_perm_encaixe_turno_w,
			ie_feriado_w
	from	agenda_turno
	where	nr_sequencia = nr_seq_turno_w;
	
	if (ie_perm_encaixe_turno_w = 'N') then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(224365);
	end if;
	
	if (Obter_Se_Feriado(cd_estabelecimento_p, dt_agenda_p) > 0) then
		if (ie_feriado_w = 'N') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(669868);
		end if;
	end if;
	
	select	max(hr_inicial_intervalo),
		max(hr_final_intervalo)
	into STRICT	dt_intervalo_inicial_w,
		dt_intervalo_final_w
	from 	AGENDA_TURNO
	where	nr_sequencia = nr_seq_turno_w;
	
	if (to_char(dt_intervalo_inicial_w,'hh24:mi:ss') <= to_char(dt_encaixe_w,'hh24:mi:ss')) and (to_char(dt_intervalo_final_w,'hh24:mi:ss') >= to_char(dt_encaixe_w,'hh24:mi:ss')) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(291078);
	end if;
	
	nr_seq_bloq_geral_w := obter_se_bloq_geral_agenda(cd_estabelecimento_p,
							cd_agenda_p,
							ie_classif_agenda_p,
							null, --nr_seq_classif_agenda_p
							null, --cd_espec_agendamento_p
							cd_setor_agenda_w,
							null, --nr_seq_proc_interno_p
							null, --cd_procedimento_p
							null, --ie_origem_proced_p
							null, --considerar somente cd_medico
							dt_encaixe_w,
							'N',
							'N');
	if (nr_seq_bloq_geral_w > 0) then
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(obter_mensagem_bloq_geral_age(nr_seq_bloq_geral_w));
	end if;
	
	
	
	if (ie_regra_horario_turno_w = 'T') then
		select	coalesce(obter_turno_encaixe_d_agecons(cd_agenda_p,dt_encaixe_w,'S'), 0)
		into STRICT	nr_seq_turno_esp_w
		;
	else
		select	coalesce(obter_turno_esp_encaixe(cd_agenda_p,dt_encaixe_w), 0)
		into STRICT	nr_seq_turno_esp_w
		;
	end if;
		
	if (nr_seq_turno_esp_w > 0) then
		begin
		select	coalesce(max(ie_encaixe),'S')
		into STRICT	ie_perm_encaixe_turno_esp_w
		from	agenda_turno_esp
		where	nr_sequencia = nr_seq_turno_esp_w;

		if (ie_perm_encaixe_turno_esp_w = 'N') then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(271560);
		end if;
		end;
	end if;
	
	if (ie_gerar_dentro_per_w = 'N') and (nr_seq_turno_w IS NOT NULL AND nr_seq_turno_w::text <> '') then
		CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(216792);
	end if;	
	
	if (ie_regra_horario_turno_w <> 'S') and (coalesce(nr_seq_turno_w::text, '') = '') and (nr_seq_turno_esp_w = 0) then
		CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(262321);
	end if;
	
	if (ie_regra_conv_turno_w = 'S') then
		/* Consistir turno convenio */

		ds_consistencia_turno_w := consistir_turno_convenio(0, cd_agenda_p, dt_encaixe_w, nr_seq_turno_w, cd_convenio_p, cd_categoria_p, ds_consistencia_turno_w, nm_usuario_p, cd_estabelecimento_p, 'E');
		if (ds_consistencia_turno_w IS NOT NULL AND ds_consistencia_turno_w::text <> '') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262328 , 'DS_MENSAGEM='||ds_consistencia_turno_w);
		end if;
	end if;
	
	/* consistir horario */

	ds_consistencia_w := consistir_horario_agecons(cd_agenda_p, dt_encaixe_w, qt_duracao_p, 'E', ds_consistencia_w);
	if (ds_consistencia_w IS NOT NULL AND ds_consistencia_w::text <> '') then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262328 , 'DS_MENSAGEM='||ds_consistencia_w);
	end if;
	
	if (ie_classif_agenda_p IS NOT NULL AND ie_classif_agenda_p::text <> '') then
		ie_classif_agenda_w	:= ie_classif_agenda_p;
		ie_permite_classif_w	:= obter_agecons_agenda_classif(cd_agenda_p,ie_classif_agenda_p);
		if (ie_permite_classif_w = 'N') then
			CALL wheb_mensagem_pck.Exibir_Mensagem_Abort(262323);
		end if;
	end if;
	
	if (ie_obrigar_classif_w = 'S') then
		select	count(*)
		into STRICT	qt_classif_w
		from	agenda_classif
		where	cd_classificacao = ie_classif_agenda_p;
			
		if (qt_classif_w = 0) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort(198664);
		end if;
	end if;
	
	if (ie_consistir_regra_classif_w = 'S') then
		SELECT * FROM consistir_classif_agecon(cd_estabelecimento_p, cd_pessoa_fisica_p, dt_encaixe_w, cd_agenda_p, cd_convenio_p, null, null, null, ie_classif_agenda_W, 0, ie_consistencia_classif_w, ie_agenda_classif_w) INTO STRICT ie_consistencia_classif_w, ie_agenda_classif_w;
		if	((ie_agenda_classif_w = 'N') or (ie_consistencia_classif_w <> '')) then
			CALL Wheb_mensagem_pck.exibir_mensagem_abort( 262328 , 'DS_MENSAGEM='||ie_consistencia_classif_w);
		end if;
	end if;
	
	
	if (ie_atualizar_sala_w = 'S') then
		select	max(nr_seq_sala)
		into STRICT	nr_seq_sala_w
		from	agenda_turno
		where	nr_sequencia = nr_seq_turno_w;
	end if;	
	
	/* obter turno */

	select	obter_turno_horario_agenda(cd_agenda_p, dt_encaixe_w)
	into STRICT	cd_turno_w
	;


	/* obter classificacao */


	/*
	obter_classif_encaixe_agenda(nr_seq_classif_w);
	*/


	/* obter sequencia */

	select	nextval('agenda_consulta_seq')
	into STRICT	nr_seq_agenda_w
	;
	
	
	begin
	select	OBTER_DATA_NASCTO_PF(cd_pessoa_fisica_p)
	into STRICT	dt_nascimento_w
	;
	exception
	when others then
		dt_nascimento_w	:= null;
	end;
	
	select	coalesce(max(nr_seq_hora),0)+1
	into STRICT	nr_seq_hora_w
	from	agenda_consulta
	where	cd_agenda = cd_agenda_p
	and 	dt_agenda between PKG_DATE_UTILS.start_of(dt_encaixe_w,'dd') and PKG_DATE_UTILS.end_of(dt_encaixe_w,'DAY')
	and		PKG_DATE_UTILS.start_of(dt_agenda,'mi') = PKG_DATE_UTILS.start_of(dt_encaixe_w,'mi');

	CALL agecons_consiste_cmce(cd_pessoa_fisica_p, cd_convenio_param_w, cd_agenda_p, dt_encaixe_w);
	
	/* gerar encaixe */

	insert into agenda_consulta(
					nr_sequencia,
					cd_agenda,
					dt_agenda,
					--hr_inicio,
					nr_minuto_duracao,
					ie_status_agenda,
					cd_pessoa_fisica,
					nm_paciente,
					nr_telefone,
         			ds_email,
					cd_convenio,
					cd_medico_req,
					--cd_procedimento,

					--ie_origem_proced,

					--nr_seq_proc_interno,

					--ie_lado,
					ds_observacao,
					--nr_seq_classif_agenda,
					cd_turno,
					--ie_equipamento,
					dt_agendamento,
					nm_usuario_origem,
					--cd_medico_exec,
					nm_usuario,
					dt_atualizacao,
					ie_encaixe,
					nr_seq_agenda_rxt,
					ie_classif_agenda,
					nr_seq_motivo_encaixe,
					dt_nascimento_pac,
					qt_idade_pac,
					cd_setor_atendimento,
					nr_seq_turno,
					nr_seq_hora,
					nr_seq_sala,
					nr_seq_segurado
					)
				values (
					nr_seq_agenda_w,
					cd_agenda_p,
					dt_encaixe_w,
					--dt_encaixe_w,
					qt_duracao_p,
					'N',
					cd_pessoa_fisica_p,
					substr(coalesce(obter_nome_pf(cd_pessoa_fisica_p), nm_pessoa_fisica_p),1,60),
					substr(obter_fone_pac_agenda(cd_pessoa_fisica_p),1,255),
         			substr(obter_compl_pf(cd_pessoa_fisica_p,1,'M' ),1,255),
					cd_convenio_param_w,
					cd_medico_req_p,
					--cd_procedimento_p,

					--ie_origem_proced_p,

					--nr_seq_proc_interno_p,

					--ie_lado_p,
					ds_observacao_p,
					--nr_seq_classif_w,
					cd_turno_w,
					--'N',
					clock_timestamp(),
					nm_usuario_p,
					--cd_medico_exec_p,
					nm_usuario_p,
					clock_timestamp(),
					'S',
					CASE WHEN nr_seq_agenda_rxt_p=0 THEN  null  ELSE nr_seq_agenda_rxt_p END ,
					ie_classif_agenda_w,
					nr_seq_motivo_encaixe_p,
					dt_nascimento_w,
					substr(obter_dados_pf(cd_pessoa_fisica_p,'I'),1,255),
					cd_setor_agenda_w,
					nr_seq_turno_w,
					nr_seq_hora_w,
					nr_seq_sala_w,
					nr_seq_segurado_p
					);
    if	(nr_seq_gercon_p IS NOT NULL AND nr_seq_gercon_p::text <> '') then
		update	GERCON_LOTE_IMP_AGENDA
		set		nr_Seq_agendamento_cons = nr_seq_agenda_w
		where	nr_sequencia = nr_seq_gercon_p;
				
	end if;
	CALL gerar_autor_regra(null, null, null, null, null, null, 'AC', nm_usuario_p, null, null, null, nr_seq_agenda_w, null, null,'','','');
	
	/*tbyegmann em 21/02/2012(OS 416770) - Gerar solicitacao Prontuario(CIP) ao gerar encaixe*/

	if (ie_gerar_solic_pront_enc_w = 'S')then
		CALL gerar_solic_pront_agenda(cd_pessoa_fisica_p, nr_seq_agenda_w, cd_agenda_p, dt_encaixe_w, nm_usuario_p);	
	end if;
	
	/*tbyegmann em 21/02/2012(OS 416770) - Gerar solicitacao Prontuario SAME(GP) ao gerar encaixe*/

	nr_prontuario_w	:= coalesce(obter_prontuario_pf(cd_estabelecimento_p, cd_pessoa_fisica_p),0);
	if (ie_gerar_solic_pront_gp_w = 'S') and
		((nr_prontuario_w > 0) or (ie_permite_solic_sem_pront_w = 'N')) and (ie_gerar_solic_pront_enc_w = 'S') and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then
		CALL Gerar_Solic_Pront_Agenda_GP(cd_pessoa_fisica_p, nr_seq_agenda_w, cd_agenda_p, dt_encaixe_w, nm_usuario_p, null, null, null);
	end if;
	
	if (ie_gravar_seq_agecir_w = 'S') and (nr_seq_agecir_p > 0) then
		update	agenda_consulta
		set	nr_seq_agepaci = nr_seq_agecir_p
		where	nr_sequencia = nr_seq_agenda_w;
	end if;
	
	/* Verificar se a pessoa fisica encontra-se na lista de espera */

	select	coalesce(max(nr_sequencia),0)
	into STRICT	nr_seq_lista_espera_w
	from	agenda_lista_espera
	where	cd_agenda = cd_agenda_p
	and	cd_pessoa_fisica = cd_pessoa_fisica_p
	and	ie_status_espera = 'A';

	/* Se sim, passa o registro como atendido */

	if (nr_seq_lista_espera_w <> 0) then
		update	agenda_lista_espera
		set     ie_status_espera	= 'E'
		where	nr_sequencia		= nr_seq_lista_espera_w;
	end if;

	/* obter dados convenio, caso usuario nao informar (Esta rotina devera permanecer aqui, antes do insert gera erro) */

	if (cd_convenio_p IS NOT NULL AND cd_convenio_p::text <> '') and
		((cd_categoria_p IS NOT NULL AND cd_categoria_p::text <> '') or (cd_plano_p IS NOT NULL AND cd_plano_p::text <> ''))then
		update	agenda_consulta
		set	cd_convenio		= cd_convenio_p,
			cd_categoria		= cd_categoria_p,
			cd_plano		= cd_plano_p
		where	nr_sequencia		= nr_seq_agenda_w;	
	end if;
	
	if (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (ie_forma_convenio_w <> 'N') then
		SELECT * FROM gerar_convenio_agendamento(cd_pessoa_fisica_p, 3, nr_seq_agenda_w, ie_forma_convenio_w, cd_convenio_w, cd_categoria_w, cd_usuario_convenio_w, dt_validade_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w, nm_usuario_p, ds_observacao_aux) INTO STRICT cd_convenio_w, cd_categoria_w, cd_usuario_convenio_w, dt_validade_w, nr_doc_convenio_w, cd_tipo_acomodacao_w, cd_plano_w, ds_observacao_aux;
		
		if	((cd_convenio_p IS NOT NULL AND cd_convenio_p::text <> '' AND cd_convenio_p = cd_convenio_w)  or (coalesce(cd_convenio_p::text, '') = '')) then	
			update	agenda_consulta
			set	cd_convenio		= cd_convenio_w,
				cd_categoria		= coalesce(cd_categoria_p,cd_categoria_w),
				cd_usuario_convenio	= cd_usuario_convenio_w,
				dt_validade_carteira	= dt_validade_w,
				nr_doc_convenio	= nr_doc_convenio_w,
				cd_tipo_acomodacao	= cd_tipo_acomodacao_w,
				cd_plano		= coalesce(cd_plano_p,cd_plano_w)
			where	nr_sequencia		= nr_seq_agenda_w;
		end if;		
	end if;

	if (dt_desejada_atendimento_p IS NOT NULL AND dt_desejada_atendimento_p::text <> '') then
		CALL agenda_additionals_crud(nr_seq_agenda_w, 'AGENDA_CONSULTA_ADIC', 'NR_SEQ_AGENDA', 'DT_DESEJADA_ATENDIMENTO', to_char(dt_desejada_atendimento_p, 'YYYY-MM-DD HH24:MI:SS'), 'DATE', 'N', null, null);
	end if;
else
	if (coalesce(cd_agenda_p::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(76137);
	elsif (coalesce(cd_pessoa_fisica_p::text, '') = '' and coalesce(nm_pessoa_fisica_p::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(91297);
	elsif (coalesce(dt_agenda_p::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(166911);
	elsif (coalesce(hr_encaixe_p::text, '') = '') then	
		CALL wheb_mensagem_pck.exibir_mensagem_abort(201339);	
	elsif (coalesce(qt_duracao_p::text, '') = '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(1089281);	
	end if;
end if;


delete 	FROM agenda_controle_horario
where 	cd_agenda = cd_agenda_p
and 	dt_agenda = trunc(dt_agenda_p);

commit;

nr_seq_encaixe_p := nr_seq_agenda_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_encaixe_agecons (cd_estabelecimento_p bigint, cd_agenda_p bigint, dt_agenda_p timestamp, hr_encaixe_p timestamp, qt_duracao_p bigint, cd_pessoa_fisica_p text, nm_pessoa_fisica_p text, cd_convenio_p bigint, cd_medico_req_p text, ds_observacao_p text, nr_seq_agenda_rxt_p bigint, nr_seq_motivo_encaixe_p bigint, ie_classif_agenda_p text, nm_usuario_p text, nr_seq_agecir_p bigint, nr_seq_encaixe_p INOUT bigint, cd_categoria_p text, cd_plano_p text, nr_seq_gercon_p bigint default null, nr_seq_segurado_p bigint default null, dt_desejada_atendimento_p timestamp default null) FROM PUBLIC;

