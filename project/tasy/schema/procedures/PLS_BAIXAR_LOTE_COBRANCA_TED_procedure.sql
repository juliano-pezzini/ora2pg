-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_baixar_lote_cobranca_ted ( nr_seq_lote_cob_terc_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
nr_titulo_w			bigint;
vl_pagamento_w			double precision;
dt_pagamento_w			timestamp;
nr_seq_item_cobranca_w		bigint;
cd_moeda_w			integer;
cd_tipo_recebimento_w		bigint;
nr_seq_baixa_w			integer;
nr_seq_trans_bx_lote_cob_w	bigint;
nr_seq_conta_banco_w		bigint;
vl_juros_w			double precision;
vl_multa_w			double precision;
vl_rec_maior_w			double precision;
nr_seq_regra_w			bigint;
ie_acao_w			varchar(10);
ie_apropriar_w			varchar(10) := 'N';
					
C01 CURSOR FOR 
	SELECT	b.nr_titulo, 
		coalesce(b.vl_pagamento,0), 
		coalesce(a.dt_remessa_retorno,clock_timestamp()), 
		b.nr_sequencia 
	from	pls_lote_cob_terceiro_item	b, 
		pls_lote_cob_terceiro		a 
	where	a.nr_sequencia = b.nr_seq_lote 
	and	a.nr_sequencia = nr_seq_lote_cob_terc_p;
					

BEGIN 
 
open C01;
loop 
fetch C01 into	 
	nr_titulo_w, 
	vl_pagamento_w, 
	dt_pagamento_w, 
	nr_seq_item_cobranca_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	select	max(nr_seq_trans_bx_lote_cob_terc) 
	into STRICT	nr_seq_trans_bx_lote_cob_w 
	from	pls_parametros_cr 
	where	cd_estabelecimento = cd_estabelecimento_p;
	 
	if (coalesce(nr_seq_trans_bx_lote_cob_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(174620);
	end if;
	 
	select	max(cd_moeda_padrao) 
	into STRICT	cd_moeda_w 
	from	parametros_contas_pagar 
	where	cd_estabelecimento = cd_estabelecimento_p;	
	 
	select	min(cd_tipo_recebimento) 
	into STRICT	cd_tipo_recebimento_w 
	from	tipo_recebimento 
	where	ie_tipo_consistencia = 1 
	and	ie_situacao = 'A' 
	and   ((cd_estabelecimento = cd_estabelecimento_p) or (coalesce(cd_estabelecimento::text, '') = ''));
	 
	if (coalesce(cd_tipo_recebimento_w::text, '') = '') then 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(228783);
	end if;
	 
	begin 
	select	nr_seq_conta_banco 
	into STRICT	nr_seq_conta_banco_w 
	from	titulo_receber 
	where	nr_titulo	= nr_titulo_w;
	exception 
	when others then 
		nr_seq_conta_banco_w := null;
	end;
	 
	select	coalesce(max(nr_sequencia),0) + 1 
	into STRICT	nr_seq_baixa_w 
	from	titulo_receber_liq 
	where	nr_titulo	= nr_titulo_w;
 
	insert into titulo_receber_liq(nr_titulo, 
		nr_sequencia, 
		dt_recebimento, 
		vl_recebido, 
		vl_descontos, 
		vl_juros, 
		vl_multa, 
		cd_moeda, 
		dt_atualizacao, 
		nm_usuario, 
		cd_tipo_recebimento, 
		ie_acao, 
		vl_rec_maior, 
		vl_glosa, 
		ie_lib_caixa, 
		nr_seq_pls_lote_cob_terc, 
		ds_observacao, 
		nr_seq_trans_fin, 
		nr_seq_conta_banco) 
	values (nr_titulo_w, 
		nr_seq_baixa_w, 
		dt_pagamento_w, 
		vl_pagamento_w, 
		0, 
		0, --vl_juros_w, 
		0, --vl_multa_w, 
		cd_moeda_w, 
		clock_timestamp(), 
		nm_usuario_p, 
		cd_tipo_recebimento_w, 
		'I', 
		0, --vl_rec_maior_w, 
		0, 
		'S', 
		nr_seq_lote_cob_terc_p, 
		'Baixa realizada pela Cobrança terceirizada, lote de cobrança ' || nr_seq_lote_cob_terc_p || ', ' || 
		'função OPS - Transferência Eletrônica de Dados (TED).', 
		nr_seq_trans_bx_lote_cob_w, 
		nr_seq_conta_banco_w);
		 
	SELECT * FROM obter_regra_acao_pag_duplic(dt_pagamento_w, cd_estabelecimento_p, nm_usuario_p, nr_seq_regra_w, ie_acao_w) INTO STRICT nr_seq_regra_w, ie_acao_w;
	 
	if (ie_acao_w in ('NC','NCM')) then 
		ie_apropriar_w := tratar_baixa_duplicidade_tit(null, nr_titulo_w, nr_seq_baixa_w, 'I', dt_pagamento_w, nm_usuario_p, ie_apropriar_w);
		 
		if (coalesce(ie_apropriar_w,'S') = 'S') then 
			CALL pls_apropriar_juros_multa_mens(nr_titulo_w,nr_seq_baixa_w,nm_usuario_p,cd_estabelecimento_p,'N','I');
		end if;
	else 
		SELECT * FROM pls_tratar_valor_maior_ted(nr_titulo_w, vl_pagamento_w, dt_pagamento_w, vl_juros_w, vl_multa_w, vl_rec_maior_w) INTO STRICT vl_pagamento_w, vl_juros_w, vl_multa_w, vl_rec_maior_w;
	 
		update	titulo_receber_liq 
		set	vl_recebido	= vl_pagamento_w, 
			vl_rec_maior	= vl_rec_maior_w, 
			vl_juros	= vl_juros_w, 
			vl_multa	= vl_multa_w 
		where	nr_titulo	= nr_titulo_w 
		and	nr_sequencia	= nr_seq_baixa_w;
	end if;
		 
	if (nr_seq_baixa_w IS NOT NULL AND nr_seq_baixa_w::text <> '') then	 
		CALL gerar_movto_tit_baixa(	nr_titulo_w,nr_seq_baixa_w,'R',nm_usuario_p,'N');
	end if;
		 
	CALL atualizar_saldo_tit_rec(nr_titulo_w,nm_usuario_p);
	 
	update	pls_lote_cob_terceiro 
	set	dt_baixa	= clock_timestamp() 
	where	nr_sequencia	= nr_seq_lote_cob_terc_p;
	end;
end loop;
close C01;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_baixar_lote_cobranca_ted ( nr_seq_lote_cob_terc_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

