-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_gravar_protocolo_envio ( nr_seq_protocolo_p protocolo_convenio.nr_seq_protocolo%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

 
dt_envio_w		protocolo_convenio.dt_envio%type;
nm_usuario_envio_w	protocolo_convenio.nm_usuario_envio%type;
vl_total_protocolo_w	double precision;
ie_tipo_protocolo_w	protocolo_convenio.ie_tipo_protocolo%type;
qt_conta_protocolo_w	double precision;
ds_arquivo_envio_w	protocolo_convenio.ds_arquivo_envio%type;
dt_retorno_w		protocolo_convenio.dt_retorno%type;
nm_usuario_retorno_w	protocolo_convenio.nm_usuario_retorno%type;
vl_total_prot_sus_w	double precision;
nr_seq_prot_w		sus_protocolo_envio.nr_sequencia%type;
nr_seq_conta_w		sus_protocolo_envio_conta.nr_sequencia%type;
nr_interno_conta_w	conta_paciente.nr_interno_conta%type;
nr_atendimento_w	conta_paciente.nr_atendimento%type;
vl_total_conta_w	sus_protocolo_envio_conta.vl_total_conta%type;
vl_total_conta_sus_w	sus_protocolo_envio_conta.vl_total_conta_sus%type;
nr_aih_w		sus_protocolo_envio_conta.nr_aih%type;
nr_apac_w		sus_protocolo_envio_conta.nr_apac%type;
nr_bpa_w		sus_protocolo_envio_conta.nr_bpa%type;
qt_prot_envio_w		bigint;
dt_envio_conta_w	sus_protocolo_envio_conta.dt_envio_conta%type;
ie_atualizou_envio_w	varchar(15) := 'N';

C01 CURSOR FOR 
	SELECT	nr_interno_conta, 
		nr_atendimento, 
		obter_valor_conta(nr_interno_conta, 0) vl_total_conta, 
		sus_obter_valor_unif(nr_interno_conta,'') vl_total_conta_sus, 
		Sus_Obter_AihUnif_Conta(nr_interno_conta) nr_aih, 
		sus_obter_apac(	nr_interno_conta) nr_apac, 
		sus_obter_bpaunif_conta(nr_interno_conta) nr_bpa 
	from	conta_paciente 
	where	nr_seq_protocolo = nr_seq_protocolo_p;

type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w			vetor;
					
C02 CURSOR FOR 
	SELECT	a.nr_interno_conta, 
		a.nr_atendimento, 
		a.vl_total_conta, 
		a.vl_total_conta_sus, 
		a.nr_aih, 
		a.nr_apac, 
		a.nr_bpa 
	from	sus_aih_unif	b, 
		conta_paciente	p, 
		sus_protocolo_envio_conta a 
	where	p.nr_seq_protocolo	= nr_seq_protocolo_p 
	and	p.nr_interno_conta	= b.nr_interno_conta 
	and	p.nr_interno_conta	= a.nr_interno_conta 
	and	a.ie_status_ajuste	= 'A' 
	and	a.ie_situacao_retorno	= 'G' 
	and	a.dt_envio_conta	= dt_envio_conta_w 
	and	coalesce(p.ie_cancelamento::text, '') = '';
	
type 		fetch_array2 is table of c02%rowtype;
s_array2 	fetch_array2;
j		integer := 1;
type vetor2 is table of fetch_array2 index by integer;
vetor_c02_w			vetor2;

C03 CURSOR FOR 
	SELECT	a.nr_interno_conta, 
		a.nr_atendimento, 
		a.vl_total_conta, 
		a.vl_total_conta_sus, 
		a.nr_aih, 
		a.nr_apac, 
		a.nr_bpa 
	from	sus_apac_unif	b, 
		conta_paciente	p, 
		sus_protocolo_envio_conta a 
	where	p.nr_seq_protocolo	= nr_seq_protocolo_p 
	and	p.nr_interno_conta	= b.nr_interno_conta 
	and	p.nr_interno_conta	= a.nr_interno_conta 
	and	a.ie_status_ajuste	= 'A' 
	and	a.ie_situacao_retorno	= 'G' 
	and	a.dt_envio_conta	= dt_envio_conta_w 
	and	coalesce(p.ie_cancelamento::text, '') = '';
	
type 		fetch_array3 is table of c03%rowtype;
s_array3 	fetch_array3;
k		integer := 1;
type vetor3 is table of fetch_array3 index by integer;
vetor_c03_w			vetor3;

C04 CURSOR FOR 
	SELECT	a.nr_interno_conta, 
		a.nr_atendimento, 
		a.vl_total_conta, 
		a.vl_total_conta_sus, 
		a.nr_aih, 
		a.nr_apac, 
		a.nr_bpa 
	from	sus_protocolo_envio_conta a 
	where	a.nr_seq_protocolo	= nr_seq_protocolo_p 
	and	a.ie_status_ajuste	= 'A' 
	and	a.ie_situacao_retorno	= 'G' 
	and	a.dt_envio_conta	= dt_envio_conta_w;
	
	 
type 		fetch_array4 is table of c04%rowtype;
s_array4 	fetch_array4;
m		integer := 1;
type vetor4 is table of fetch_array4 index by integer;
vetor_c04_w			vetor4;

C05 CURSOR FOR 
	SELECT	a.nr_interno_conta, 
		a.nr_atendimento, 
		obter_valor_conta(a.nr_interno_conta, 0) vl_total_conta, 
		sus_obter_valor_unif(a.nr_interno_conta,'') vl_total_conta_sus, 
		Sus_Obter_AihUnif_Conta(a.nr_interno_conta) nr_aih, 
		sus_obter_apac(a.nr_interno_conta) nr_apac, 
		sus_obter_bpaunif_conta(a.nr_interno_conta) nr_bpa 
	from	conta_paciente a 
	where	a.nr_seq_protocolo = nr_seq_protocolo_p 
	and	not exists (	SELECT	1 
				from	sus_protocolo_envio_conta x 
				where	x.nr_seq_protocolo = a.nr_seq_protocolo 
				and	x.nr_interno_conta = a.nr_interno_conta);
				
type 		fetch_array5 is table of c05%rowtype;
s_array5 	fetch_array5;
n		integer := 1;
type vetor5 is table of fetch_array5 index by integer;
vetor_c05_w			vetor5;
	
BEGIN 
 
ie_atualizou_envio_w := 'N';
 
if (coalesce(nr_seq_protocolo_p,0) <> 0) then 
	begin 
	 
	select	count(1) 
	into STRICT	qt_prot_envio_w 
	from	sus_protocolo_envio 
	where	nr_seq_protocolo = nr_seq_protocolo_p  LIMIT 1;
	 
	begin 
	select	dt_envio, 
		nm_usuario_envio, 
		obter_total_protocolo(nr_seq_protocolo), 
		ie_tipo_protocolo, 
		ds_arquivo_envio, 
		obter_qt_conta_protocolo(nr_seq_protocolo), 
		dt_retorno, 
		nm_usuario_retorno, 
		sus_obter_valor_protocolo(nr_seq_protocolo) 
	into STRICT	dt_envio_w, 
		nm_usuario_envio_w, 
		vl_total_protocolo_w, 
		ie_tipo_protocolo_w, 
		ds_arquivo_envio_w, 
		qt_conta_protocolo_w, 
		dt_retorno_w, 
		nm_usuario_retorno_w, 
		vl_total_prot_sus_w 
	from	protocolo_convenio 
	where	nr_seq_protocolo = nr_seq_protocolo_p;
	exception 
	when others then 
		dt_envio_w		:= null;
		nm_usuario_envio_w	:= null;
		vl_total_protocolo_w	:= null;
		ie_tipo_protocolo_w	:= null;
		ds_arquivo_envio_w	:= null;
		qt_conta_protocolo_w	:= null;
		dt_retorno_w		:= null;
		nm_usuario_retorno_w	:= null;
		vl_total_prot_sus_w	:= null;
	end;
	 
	if (coalesce(qt_prot_envio_w,0) = 0) then 
		begin		 
	 
		select	nextval('sus_protocolo_envio_seq') 
		into STRICT	nr_seq_prot_w 
		;	
	 
		insert into sus_protocolo_envio(	 
			nr_sequencia, 
			cd_estabelecimento, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_protocolo,  
			dt_envio_protocolo, 
			nm_usuario_envio_prot, 
			vl_total_protocolo, 
			ie_tipo_protocolo, 
			ds_arquivo_envio, 
			qt_conta_protocolo, 
			dt_retorno, 
			nm_usuario_retorno, 
			vl_total_prot_sus) 
		values (	nr_seq_prot_w, 
			cd_estabelecimento_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			nr_seq_protocolo_p, 
			dt_envio_w, 
			nm_usuario_envio_w, 
			vl_total_protocolo_w, 
			ie_tipo_protocolo_w, 
			ds_arquivo_envio_w, 
			qt_conta_protocolo_w, 
			dt_retorno_w, 
			nm_usuario_retorno_w, 
			vl_total_prot_sus_w);	
			 
		open c01;
		loop 
		fetch c01 bulk collect into s_array limit 100000;
			vetor_c01_w(i) := s_array;
			i := i + 1;
		EXIT WHEN NOT FOUND; /* apply on c01 */
		end loop;
		close c01;
		 
		for i in 1..vetor_c01_w.count loop 
			begin 
			s_array := vetor_c01_w(i);
			for z in 1..s_array.count loop 
				begin 
				 
				nr_interno_conta_w	:= s_array[z].nr_interno_conta;
				nr_atendimento_w	:= s_array[z].nr_atendimento;
				vl_total_conta_w	:= s_array[z].vl_total_conta;
				vl_total_conta_sus_w	:= s_array[z].vl_total_conta_sus;
				nr_aih_w		:= s_array[z].nr_aih;
				nr_apac_w		:= s_array[z].nr_apac;
				begin 
				nr_bpa_w		:= s_array[z].nr_bpa;
				exception 
				when others then 
					CALL wheb_mensagem_pck.exibir_mensagem_abort(343096,'nr_bpa_w='||s_array[z].nr_bpa||';nr_interno_conta_w='||s_array[z].nr_interno_conta);
					/*Número de BPA informado é inválido. 
					Deve possuir apenas caracteres numéricos. 
					BPA: #@nr_bpa_w#@ 
					Conta: #@nr_interno_conta_w#@*/
 
				end;
				 
				 
				select	nextval('sus_protocolo_envio_conta_seq') 
				into STRICT	nr_seq_conta_w 
				;
				 
				insert into sus_protocolo_envio_conta(	 
					nr_sequencia, 
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					nr_seq_protocolo, 
					nr_interno_conta, 
					nr_atendimento, 
					nr_seq_prot_envio, 
					cd_pessoa_fisica, 
					dt_envio_conta, 
					nm_usuario_envio, 
					vl_total_conta, 
					ie_situacao_retorno, 
					ie_status_ajuste, 
					nr_aih, 
					nr_apac, 
					nr_bpa, 
					nr_seq_mot_glosa, 
					vl_total_conta_sus) 
				values (	nr_seq_conta_w, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					nr_seq_protocolo_p, 
					nr_interno_conta_w, 
					nr_atendimento_w, 
					nr_seq_prot_w, 
					null, 
					dt_envio_w, 
					nm_usuario_envio_w, 
					vl_total_conta_w, 
					'F', 
					null, 
					nr_aih_w, 
					nr_apac_w, 
					nr_bpa_w, 
					null, 
					vl_total_conta_sus_w);
				end;
			end loop;
			end;
		end loop;
		 
		end;
	else 
		begin 
		 
		begin 
		select	nr_sequencia, 
			ie_tipo_protocolo 
		into STRICT	nr_seq_prot_w, 
			ie_tipo_protocolo_w 
		from	sus_protocolo_envio 
		where	nr_seq_protocolo = nr_seq_protocolo_p  LIMIT 1;
		exception 
		when others then 
			nr_seq_prot_w		:= null;
			ie_tipo_protocolo_w	:= null;
		end;
		 
		select	max(dt_envio_conta) 
		into STRICT	dt_envio_conta_w 
		from	sus_protocolo_envio_conta 
		where	nr_seq_protocolo = nr_seq_protocolo_p;
		 
		if (ie_tipo_protocolo_w = 1) then	 
			begin 
			 
			open c05;
			loop 
			fetch c05 bulk collect into s_array5 limit 5000;
				vetor_c05_w(n) := s_array5;
				n := n + 1;
			EXIT WHEN NOT FOUND; /* apply on c05 */
			end loop;
			close c05;
			 
			for i in 1..vetor_c05_w.count loop 
				begin 
				s_array5 := vetor_c05_w(i);
				for z in 1..s_array5.count loop 
					begin 
					 
					nr_interno_conta_w	:= s_array5[z].nr_interno_conta;
					nr_atendimento_w	:= s_array5[z].nr_atendimento;
					vl_total_conta_w	:= s_array5[z].vl_total_conta;
					vl_total_conta_sus_w	:= s_array5[z].vl_total_conta_sus;
					nr_aih_w		:= s_array5[z].nr_aih;
					nr_apac_w		:= s_array5[z].nr_apac;
					begin 
					nr_bpa_w		:= s_array5[z].nr_bpa;
					exception 
					when others then 
						CALL wheb_mensagem_pck.exibir_mensagem_abort(343096,'nr_bpa_w='||s_array[z].nr_bpa||';nr_interno_conta_w='||s_array[z].nr_interno_conta);
						/*Número de BPA informado é inválido. 
						Deve possuir apenas caracteres numéricos. 
						BPA: #@nr_bpa_w#@ 
						Conta: #@nr_interno_conta_w#@*/
 
					end;
										 
					select	nextval('sus_protocolo_envio_conta_seq') 
					into STRICT	nr_seq_conta_w 
					;
					 
					insert into sus_protocolo_envio_conta(	 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo, 
						nr_interno_conta, 
						nr_atendimento, 
						nr_seq_prot_envio, 
						cd_pessoa_fisica, 
						dt_envio_conta, 
						nm_usuario_envio, 
						vl_total_conta, 
						ie_situacao_retorno, 
						ie_status_ajuste, 
						nr_aih, 
						nr_apac, 
						nr_bpa, 
						nr_seq_mot_glosa, 
						vl_total_conta_sus) 
					values (	nr_seq_conta_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_p, 
						nr_interno_conta_w, 
						nr_atendimento_w, 
						nr_seq_prot_w, 
						null, 
						dt_envio_w, 
						nm_usuario_envio_w, 
						vl_total_conta_w, 
						'F', 
						null, 
						nr_aih_w, 
						nr_apac_w, 
						nr_bpa_w, 
						null, 
						vl_total_conta_sus_w);
						 
					ie_atualizou_envio_w := 'S';
					 
					end;
				end loop;
				end;
			end loop;
			 
			open c02;
			loop 
			fetch c02 bulk collect into s_array2 limit 100000;
				vetor_c02_w(j) := s_array2;
				j := j + 1;
			EXIT WHEN NOT FOUND; /* apply on c02 */
			end loop;
			close c02;
			 
			for i in 1..vetor_c02_w.count loop 
				begin 
				s_array2 := vetor_c02_w(i);
				for z in 1..s_array2.count loop 
					begin 
					 
					nr_interno_conta_w	:= s_array2[z].nr_interno_conta;
					nr_atendimento_w	:= s_array2[z].nr_atendimento;
					vl_total_conta_w	:= s_array2[z].vl_total_conta;
					vl_total_conta_sus_w	:= s_array2[z].vl_total_conta_sus;
					nr_aih_w		:= s_array2[z].nr_aih;
					nr_apac_w		:= s_array2[z].nr_apac;
					nr_bpa_w		:= s_array2[z].nr_bpa;
					 
					select	nextval('sus_protocolo_envio_conta_seq') 
					into STRICT	nr_seq_conta_w 
					;
					 
					insert into sus_protocolo_envio_conta(	 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo, 
						nr_interno_conta, 
						nr_atendimento, 
						nr_seq_prot_envio, 
						cd_pessoa_fisica, 
						dt_envio_conta, 
						nm_usuario_envio, 
						vl_total_conta, 
						ie_situacao_retorno, 
						ie_status_ajuste, 
						nr_aih, 
						nr_apac, 
						nr_bpa, 
						nr_seq_mot_glosa, 
						vl_total_conta_sus) 
					values (	nr_seq_conta_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_p, 
						nr_interno_conta_w, 
						nr_atendimento_w, 
						nr_seq_prot_w, 
						null, 
						clock_timestamp(), 
						nm_usuario_p, 
						vl_total_conta_w, 
						'F', 
						null, 
						nr_aih_w, 
						nr_apac_w, 
						nr_bpa_w, 
						null, 
						vl_total_conta_sus_w);
					end;
				end loop;
				end;
			end loop;
			 
			end;
		elsif (ie_tipo_protocolo_w = 21) then 
			begin 
			 
			open c05;
			loop 
			fetch c05 bulk collect into s_array5 limit 5000;
				vetor_c05_w(n) := s_array5;
				n := n + 1;
			EXIT WHEN NOT FOUND; /* apply on c05 */
			end loop;
			close c05;
			 
			for i in 1..vetor_c05_w.count loop 
				begin 
				s_array5 := vetor_c05_w(i);
				for z in 1..s_array5.count loop 
					begin 
					 
					nr_interno_conta_w	:= s_array5[z].nr_interno_conta;
					nr_atendimento_w	:= s_array5[z].nr_atendimento;
					vl_total_conta_w	:= s_array5[z].vl_total_conta;
					vl_total_conta_sus_w	:= s_array5[z].vl_total_conta_sus;
					nr_aih_w		:= s_array5[z].nr_aih;
					nr_apac_w		:= s_array5[z].nr_apac;
					begin 
					nr_bpa_w		:= s_array5[z].nr_bpa;
					exception 
					when others then 
						CALL wheb_mensagem_pck.exibir_mensagem_abort(343096,'nr_bpa_w='||s_array[z].nr_bpa||';nr_interno_conta_w='||s_array[z].nr_interno_conta);
						/*Número de BPA informado é inválido. 
						Deve possuir apenas caracteres numéricos. 
						BPA: #@nr_bpa_w#@ 
						Conta: #@nr_interno_conta_w#@*/
 
					end;
										 
					select	nextval('sus_protocolo_envio_conta_seq') 
					into STRICT	nr_seq_conta_w 
					;
					 
					insert into sus_protocolo_envio_conta(	 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo, 
						nr_interno_conta, 
						nr_atendimento, 
						nr_seq_prot_envio, 
						cd_pessoa_fisica, 
						dt_envio_conta, 
						nm_usuario_envio, 
						vl_total_conta, 
						ie_situacao_retorno, 
						ie_status_ajuste, 
						nr_aih, 
						nr_apac, 
						nr_bpa, 
						nr_seq_mot_glosa, 
						vl_total_conta_sus) 
					values (	nr_seq_conta_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_p, 
						nr_interno_conta_w, 
						nr_atendimento_w, 
						nr_seq_prot_w, 
						null, 
						dt_envio_w, 
						nm_usuario_envio_w, 
						vl_total_conta_w, 
						'F', 
						null, 
						nr_aih_w, 
						nr_apac_w, 
						nr_bpa_w, 
						null, 
						vl_total_conta_sus_w);
						 
					ie_atualizou_envio_w := 'S';
					 
					end;
				end loop;
				end;
			end loop;
			 
			open c03;
			loop 
			fetch c03 bulk collect into s_array3 limit 100000;
				vetor_c03_w(k) := s_array3;
				k := k + 1;
			EXIT WHEN NOT FOUND; /* apply on c03 */
			end loop;
			close c03;
			 
			for i in 1..vetor_c03_w.count loop 
				begin 
				s_array3 := vetor_c03_w(i);
				for z in 1..s_array3.count loop 
					begin 
					 
					nr_interno_conta_w	:= s_array3[z].nr_interno_conta;
					nr_atendimento_w	:= s_array3[z].nr_atendimento;
					vl_total_conta_w	:= s_array3[z].vl_total_conta;
					vl_total_conta_sus_w	:= s_array3[z].vl_total_conta_sus;
					nr_aih_w		:= s_array3[z].nr_aih;
					nr_apac_w		:= s_array3[z].nr_apac;
					nr_bpa_w		:= s_array3[z].nr_bpa;
					 
					select	nextval('sus_protocolo_envio_conta_seq') 
					into STRICT	nr_seq_conta_w 
					;
					 
					insert into sus_protocolo_envio_conta(	 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo, 
						nr_interno_conta, 
						nr_atendimento, 
						nr_seq_prot_envio, 
						cd_pessoa_fisica, 
						dt_envio_conta, 
						nm_usuario_envio, 
						vl_total_conta, 
						ie_situacao_retorno, 
						ie_status_ajuste, 
						nr_aih, 
						nr_apac, 
						nr_bpa, 
						nr_seq_mot_glosa, 
						vl_total_conta_sus) 
					values (	nr_seq_conta_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_p, 
						nr_interno_conta_w, 
						nr_atendimento_w, 
						nr_seq_prot_w, 
						null, 
						clock_timestamp(), 
						nm_usuario_p, 
						vl_total_conta_w, 
						'F', 
						null, 
						nr_aih_w, 
						nr_apac_w, 
						nr_bpa_w, 
						null, 
						vl_total_conta_sus_w);
					end;
				end loop;
				end;
			end loop;
			 
			end;
		else 
			begin 
			 
			open c05;
			loop 
			fetch c05 bulk collect into s_array5 limit 5000;
				vetor_c05_w(n) := s_array5;
				n := n + 1;
			EXIT WHEN NOT FOUND; /* apply on c05 */
			end loop;
			close c05;
			 
			for i in 1..vetor_c05_w.count loop 
				begin 
				s_array5 := vetor_c05_w(i);
				for z in 1..s_array5.count loop 
					begin 
					 
					nr_interno_conta_w	:= s_array5[z].nr_interno_conta;
					nr_atendimento_w	:= s_array5[z].nr_atendimento;
					vl_total_conta_w	:= s_array5[z].vl_total_conta;
					vl_total_conta_sus_w	:= s_array5[z].vl_total_conta_sus;
					nr_aih_w		:= s_array5[z].nr_aih;
					nr_apac_w		:= s_array5[z].nr_apac;
					begin 
					nr_bpa_w		:= s_array5[z].nr_bpa;
					exception 
					when others then 
						CALL wheb_mensagem_pck.exibir_mensagem_abort(343096,'nr_bpa_w='||s_array[z].nr_bpa||';nr_interno_conta_w='||s_array[z].nr_interno_conta);
						/*Número de BPA informado é inválido. 
						Deve possuir apenas caracteres numéricos. 
						BPA: #@nr_bpa_w#@ 
						Conta: #@nr_interno_conta_w#@*/
 
					end;
										 
					select	nextval('sus_protocolo_envio_conta_seq') 
					into STRICT	nr_seq_conta_w 
					;
					 
					insert into sus_protocolo_envio_conta(	 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo, 
						nr_interno_conta, 
						nr_atendimento, 
						nr_seq_prot_envio, 
						cd_pessoa_fisica, 
						dt_envio_conta, 
						nm_usuario_envio, 
						vl_total_conta, 
						ie_situacao_retorno, 
						ie_status_ajuste, 
						nr_aih, 
						nr_apac, 
						nr_bpa, 
						nr_seq_mot_glosa, 
						vl_total_conta_sus) 
					values (	nr_seq_conta_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_p, 
						nr_interno_conta_w, 
						nr_atendimento_w, 
						nr_seq_prot_w, 
						null, 
						dt_envio_w, 
						nm_usuario_envio_w, 
						vl_total_conta_w, 
						'F', 
						null, 
						nr_aih_w, 
						nr_apac_w, 
						nr_bpa_w, 
						null, 
						vl_total_conta_sus_w);
						 
					ie_atualizou_envio_w := 'S';
					 
					end;
				end loop;
				end;
			end loop;
			 
			open c04;
			loop 
			fetch c04 bulk collect into s_array4 limit 100000;
				vetor_c04_w(m) := s_array4;
				m := m + 1;
			EXIT WHEN NOT FOUND; /* apply on c04 */
			end loop;
			close c04;
			 
			for i in 1..vetor_c04_w.count loop 
				begin 
				s_array4 := vetor_c04_w(i);
				for z in 1..s_array4.count loop 
					begin 
					 
					nr_interno_conta_w	:= s_array4[z].nr_interno_conta;
					nr_atendimento_w	:= s_array4[z].nr_atendimento;
					vl_total_conta_w	:= s_array4[z].vl_total_conta;
					vl_total_conta_sus_w	:= s_array4[z].vl_total_conta_sus;
					nr_aih_w		:= s_array4[z].nr_aih;
					nr_apac_w		:= s_array4[z].nr_apac;
					nr_bpa_w		:= s_array4[z].nr_bpa;
					 
					select	nextval('sus_protocolo_envio_conta_seq') 
					into STRICT	nr_seq_conta_w 
					;
					 
					insert into sus_protocolo_envio_conta(	 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo, 
						nr_interno_conta, 
						nr_atendimento, 
						nr_seq_prot_envio, 
						cd_pessoa_fisica, 
						dt_envio_conta, 
						nm_usuario_envio, 
						vl_total_conta, 
						ie_situacao_retorno, 
						ie_status_ajuste, 
						nr_aih, 
						nr_apac, 
						nr_bpa, 
						nr_seq_mot_glosa, 
						vl_total_conta_sus) 
					values (	nr_seq_conta_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_p, 
						nr_interno_conta_w, 
						nr_atendimento_w, 
						nr_seq_prot_w, 
						null, 
						clock_timestamp(), 
						nm_usuario_p, 
						vl_total_conta_w, 
						'F', 
						null, 
						nr_aih_w, 
						nr_apac_w, 
						nr_bpa_w, 
						null, 
						vl_total_conta_sus_w);
					end;
				end loop;
				end;
			end loop;
			 
			end;
		end if;	
 
		if (coalesce(ie_atualizou_envio_w,'N') = 'S') then 
			begin 
			 
			update	sus_protocolo_envio_conta 
			set	dt_envio_conta		= dt_envio_w, 
				nm_usuario_envio	= nm_usuario_envio_w, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_seq_protocolo	= nr_seq_protocolo_p;			
			 
			end;
		end if;		
 
		update	sus_protocolo_envio 
		set	dt_envio_protocolo	= dt_envio_w, 
			nm_usuario_envio_prot	= nm_usuario_envio_w, 
			vl_total_protocolo	= vl_total_protocolo_w, 
			vl_total_prot_sus	= vl_total_prot_sus_w, 
			ds_arquivo_envio	= ds_arquivo_envio_w, 
			qt_conta_protocolo	= qt_conta_protocolo_w, 
			dt_atualizacao		= clock_timestamp(), 
			nm_usuario		= nm_usuario_p 
		where	nr_seq_protocolo	= nr_seq_protocolo_p 
		and	((dt_envio_protocolo 	<> dt_envio_w) or (vl_total_protocolo	<> vl_total_protocolo_w) or (vl_total_prot_sus	<> vl_total_prot_sus_w) or (qt_conta_protocolo	<> qt_conta_protocolo_w));
		 
		delete	from sus_protocolo_envio_conta a 
		where	nr_seq_protocolo = nr_seq_protocolo_p 
		and	not exists (	SELECT	1 
					from	conta_paciente x 
					where	x.nr_interno_conta = a.nr_interno_conta 
					and	x.nr_seq_protocolo = nr_seq_protocolo_p);
		 
		end;
	end if;	
	 
	commit;
	 
	end;
end if;	
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_gravar_protocolo_envio ( nr_seq_protocolo_p protocolo_convenio.nr_seq_protocolo%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

