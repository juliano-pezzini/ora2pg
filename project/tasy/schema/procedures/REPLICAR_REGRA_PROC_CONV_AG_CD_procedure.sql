-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE replicar_regra_proc_conv_ag_cd ( cd_agenda_copia_p bigint, cd_estabelecimento_p bigint, cd_tipo_agenda_p bigint, nm_usuario_p text, ds_regras_p text, cd_agenda_p bigint) AS $body$
DECLARE


/* globais */

cd_medico_w			varchar(10);

/* agendas */

cd_agenda_w			bigint;

/* regras exame x convenio */

nr_seq_regra_w			bigint;
cd_convenio_w			integer;
cd_area_proc_w			bigint;
cd_especialidade_w		bigint;
cd_grupo_proc_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
nr_seq_proc_interno_w		bigint;
ie_permite_w			varchar(1);
nr_seq_regra_ww			bigint;
nr_seq_grupo_w			bigint;
nr_seq_subgrupo_w		bigint;
nr_seq_forma_org_w		bigint;
cd_plano_w			varchar(10);

ds_lista_w			varchar(4000);
tam_lista_w			bigint;
ie_pos_virgula_w		smallint;
nr_sequencia_w			bigint;

nr_seq_reg_qtd_w		agenda_regra_quantidade.nr_sequencia%type;
ie_forma_cons_reg_qtd_w		agenda_regra_quantidade.ie_forma_consistencia%type;
qt_regra_reg_qtd_w		agenda_regra_quantidade.qt_regra%type;
ie_situacao_reg_qtd_w		agenda_regra_quantidade.ie_situacao%type;
ds_mensagem_reg_qtd_w		agenda_regra_quantidade.ds_mensagem%type;

ie_agenda_w			agenda_regra.ie_agenda%type;

/* obter regras exame x convenio */

c01 CURSOR FOR
SELECT	cd_convenio,
	cd_area_proc,
	cd_especialidade,
	cd_grupo_proc,
	cd_procedimento,
	ie_origem_proced,
	nr_seq_proc_interno,
	cd_medico,
	ie_permite,
	nr_sequencia,
	nr_seq_grupo,
	nr_seq_subgrupo,
	nr_seq_forma_org,
	cd_plano_convenio,
	ie_agenda
from	agenda_regra
where	cd_agenda = cd_agenda_copia_p
and	nr_sequencia = coalesce(nr_sequencia_w,nr_sequencia);

/* obter regras quantidade x forma consistencia*/

C02 CURSOR FOR
	SELECT	ie_forma_consistencia,
			qt_regra,
			ie_situacao,
			ds_mensagem
	from	agenda_regra_quantidade
	where	nr_seq_regra = nr_seq_regra_ww
	order by nr_seq_regra;


BEGIN
if (cd_agenda_copia_p IS NOT NULL AND cd_agenda_copia_p::text <> '') and (cd_estabelecimento_p IS NOT NULL AND cd_estabelecimento_p::text <> '') and (cd_tipo_agenda_p IS NOT NULL AND cd_tipo_agenda_p::text <> '') and (nm_usuario_p IS NOT NULL AND nm_usuario_p::text <> '') then

	ds_lista_w := ds_regras_p;
	
	while(ds_lista_w IS NOT NULL AND ds_lista_w::text <> '')  loop
		begin
		tam_lista_w			:= length(ds_lista_w);
		ie_pos_virgula_w		:= position(',' in ds_lista_w);
	
		if (ie_pos_virgula_w <> 0) then
			nr_sequencia_w		:= (substr(ds_lista_w,1,(ie_pos_virgula_w - 1)))::numeric;
			ds_lista_w		:= substr(ds_lista_w,(ie_pos_virgula_w + 1),tam_lista_w);
		end if;
	
		
		/* gera regras */

		open c01;
		loop
		fetch c01 into	
			cd_convenio_w,
			cd_area_proc_w,
			cd_especialidade_w,
			cd_grupo_proc_w,
			cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_proc_interno_w,
			cd_medico_w,
			ie_permite_w,
			nr_seq_regra_ww,
			nr_seq_grupo_w,
			nr_seq_subgrupo_w,
			nr_seq_forma_org_w,
			cd_plano_w,
			ie_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			begin
			
			select	nextval('agenda_regra_seq')
			into STRICT	nr_seq_regra_w
			;

			insert into agenda_regra(
							nr_sequencia,
							cd_estabelecimento,
							cd_agenda,
							dt_atualizacao,
							nm_usuario,
							ie_permite,
							cd_convenio,
							cd_area_proc,
							cd_especialidade,
							cd_grupo_proc,
							cd_procedimento,
							ie_origem_proced,
							cd_medico,
							dt_atualizacao_nrec,
							nm_usuario_nrec,
							nr_seq_proc_interno,
							nr_seq_regra,
							nr_seq_grupo,
							nr_seq_subgrupo,
							nr_seq_forma_org,
							cd_plano_convenio,
							ie_agenda
							)
						values (
							nr_seq_regra_w,
							cd_estabelecimento_p,
							cd_agenda_p,
							clock_timestamp(),
							nm_usuario_p,
							ie_permite_w,
							cd_convenio_w,
							cd_area_proc_w,
							cd_especialidade_w,
							cd_grupo_proc_w,
							cd_procedimento_w,
							ie_origem_proced_w,
							cd_medico_w,
							clock_timestamp(),
							nm_usuario_p,
							nr_seq_proc_interno_w,
							nr_seq_regra_ww,
							nr_seq_grupo_w,
							nr_seq_subgrupo_w,
							nr_seq_forma_org_w,
							cd_plano_w,
							ie_agenda_w
							);
			end;
			
			if (nr_seq_regra_ww IS NOT NULL AND nr_seq_regra_ww::text <> '') and (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
				CALL ageint_gerar_info_tabela('AGENDA_REGRA_PROC', nr_seq_regra_ww, nr_seq_regra_w);
			end if;
			
			/* gera regras quantidade */

			
			if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then
				open C02;
				loop
				fetch C02 into	
					ie_forma_cons_reg_qtd_w,
					qt_regra_reg_qtd_w,
					ie_situacao_reg_qtd_w,
					ds_mensagem_reg_qtd_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					
					select	nextval('agenda_regra_quantidade_seq')
					into STRICT	nr_seq_reg_qtd_w
					;
					
					insert into agenda_regra_quantidade(
									nr_sequencia,
									ie_forma_consistencia,
									qt_regra,
									nr_seq_regra,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									ie_situacao,
									ds_mensagem
									)
								values (
									nr_seq_reg_qtd_w,
									ie_forma_cons_reg_qtd_w,
									qt_regra_reg_qtd_w,
									nr_seq_regra_w,
									clock_timestamp(),
									nm_usuario_p,
									clock_timestamp(),
									nm_usuario_p,
									ie_situacao_reg_qtd_w,
									ds_mensagem_reg_qtd_w
									);			
														
					end;
				end loop;
				close C02;
			end if;
		end loop;
		close c01;	
	
		end;
	end loop;
			
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE replicar_regra_proc_conv_ag_cd ( cd_agenda_copia_p bigint, cd_estabelecimento_p bigint, cd_tipo_agenda_p bigint, nm_usuario_p text, ds_regras_p text, cd_agenda_p bigint) FROM PUBLIC;

