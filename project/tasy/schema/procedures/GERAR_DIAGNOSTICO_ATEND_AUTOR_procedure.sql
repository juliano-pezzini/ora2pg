-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_diagnostico_atend_autor (nr_sequencia_autor_p bigint, nr_atendimento_p bigint, ie_gerar_diagnostico_p text, nm_usuario_p text) AS $body$
DECLARE



dt_diagnostico_w		timestamp;
cd_medico_diag_w		varchar(10);
ie_tipo_diagnostico_w		smallint;
ds_diagnostico_w		varchar(2000);
cd_doenca_w			varchar(10);
dt_atualizacao_w		timestamp;
ie_classificacao_doenca_w	varchar(5);
ie_tipo_doenca_w		varchar(5);
ie_unidade_tempo_w		varchar(5);
nm_usuario_w			varchar(15);
nr_seq_autor_diag_w		bigint;
qt_tempo_w			bigint;


C01 CURSOR FOR
	SELECT	a.dt_diagnostico,
		a.cd_medico,
		a.ie_tipo_diagnostico,
		a.ds_diagnostico,
		a.dt_atualizacao,
		a.nm_usuario
	from	diagnostico_medico a
	where	a.nr_atendimento = nr_atendimento_p
	and	not exists (	SELECT	1
				from 	autor_diag_medico x, autorizacao_convenio y
				where	x.nr_sequencia_autor = y.nr_sequencia
				and	y.nr_atendimento = a.nr_atendimento
				and	x.dt_diagnostico  = a.dt_diagnostico
				and	x.cd_medico       = a.cd_medico)
	order by a.dt_diagnostico;




C02 CURSOR FOR
	SELECT	cd_doenca,
		ds_diagnostico,
		dt_atualizacao,
		ie_classificacao_doenca,
		ie_tipo_doenca,
		ie_unidade_tempo,
		nm_usuario,
		qt_tempo
	from	diagnostico_doenca
	where	nr_atendimento = nr_atendimento_p
	and	dt_diagnostico = dt_diagnostico_w
	order by dt_atualizacao;



BEGIN

if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') and (nr_sequencia_autor_p IS NOT NULL AND nr_sequencia_autor_p::text <> '') then


	if (ie_gerar_diagnostico_p = 'S') then


		open C01;
		loop
		fetch C01 into
			dt_diagnostico_w,
			cd_medico_diag_w,
			ie_tipo_diagnostico_w,
			ds_diagnostico_w,
			dt_atualizacao_w,
			nm_usuario_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			if (dt_diagnostico_w IS NOT NULL AND dt_diagnostico_w::text <> '') and (cd_medico_diag_w IS NOT NULL AND cd_medico_diag_w::text <> '') and (ie_tipo_diagnostico_w IS NOT NULL AND ie_tipo_diagnostico_w::text <> '') then
				begin


				select	nextval('autor_diag_medico_seq')
				into STRICT	nr_seq_autor_diag_w
				;


				insert into autor_diag_medico(
					nr_sequencia,
					dt_atualizacao,
					dt_atualizacao_nrec,
					dt_diagnostico,
					nm_usuario,
					nm_usuario_nrec,
					ds_diagnostico,
					cd_medico,
					ie_tipo_diagnostico,
					nr_sequencia_autor)
				values (
					nr_seq_autor_diag_w,
					dt_atualizacao_w,
					clock_timestamp(),
					dt_diagnostico_w,
					nm_usuario_w,
					nm_usuario_p,
					ds_diagnostico_w,
					cd_medico_diag_w,
					ie_tipo_diagnostico_w,
					nr_sequencia_autor_p);

				open C02;
				loop
				fetch C02 into
					cd_doenca_w,
					ds_diagnostico_w,
					dt_atualizacao_w,
					ie_classificacao_doenca_w,
					ie_tipo_doenca_w,
					ie_unidade_tempo_w,
					nm_usuario_w,
					qt_tempo_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					if (cd_doenca_w IS NOT NULL AND cd_doenca_w::text <> '') and (nr_seq_autor_diag_w IS NOT NULL AND nr_seq_autor_diag_w::text <> '')then
						begin
						insert	into autor_diag_doenca(
							cd_doenca,
							ds_diagnostico,
							dt_atualizacao,
							dt_atualizacao_nrec,
							ie_classificacao_doenca,
							ie_tipo_doenca,
							ie_unidade_tempo,
							nm_usuario,
							nm_usuario_nrec,
							nr_seq_autor_diag,
							nr_sequencia,
							qt_tempo)
						values (
							cd_doenca_w,
							ds_diagnostico_w,
							dt_atualizacao_w,
							clock_timestamp(),
							ie_classificacao_doenca_w,
							ie_tipo_doenca_w,
							ie_unidade_tempo_w,
							nm_usuario_w,
							nm_usuario_p,
							nr_seq_autor_diag_w,
							nextval('autor_diag_doenca_seq'),
							qt_tempo_w);
						end;
					end if;
					end;
				end loop;
				close C02;


				end;
			end if;
			end;
		end loop;
		close C01;


elsif (ie_gerar_diagnostico_p = 'U')then


		begin
		select	a.dt_diagnostico,
			a.cd_medico,
			a.ie_tipo_diagnostico,
			a.ds_diagnostico
		into STRICT	dt_diagnostico_w,
			cd_medico_diag_w,
			ie_tipo_diagnostico_w,
			ds_diagnostico_w
		from	diagnostico_medico a
		where	a.nr_atendimento = nr_atendimento_p
		and	not exists (	SELECT	1
					from 	autor_diag_medico z, autorizacao_convenio y
					where	z.nr_sequencia_autor = y.nr_sequencia
					and	y.nr_atendimento = a.nr_atendimento
					and	z.cd_medico       = a.cd_medico)
		and	a.dt_diagnostico = (	select max(x.dt_diagnostico)
						from	diagnostico_medico x
						where	x.nr_atendimento = a.nr_atendimento
						and	not exists (	select	1
									from 	autor_diag_medico z, autorizacao_convenio y
									where	z.nr_sequencia_autor = y.nr_sequencia
									and	y.nr_atendimento = x.nr_atendimento
									and	z.cd_medico       = x.cd_medico));
		exception
		when others then
			ds_diagnostico_w := null;
			cd_medico_diag_w := null;
			ie_tipo_diagnostico_w := null;
		end;


		if (dt_diagnostico_w IS NOT NULL AND dt_diagnostico_w::text <> '') and (cd_medico_diag_w IS NOT NULL AND cd_medico_diag_w::text <> '') and (ie_tipo_diagnostico_w IS NOT NULL AND ie_tipo_diagnostico_w::text <> '') then


			select	nextval('autor_diag_medico_seq')
			into STRICT	nr_seq_autor_diag_w
			;


			insert into autor_diag_medico(
					nr_sequencia,
					dt_atualizacao,
					dt_atualizacao_nrec,
					dt_diagnostico,
					nm_usuario,
					nm_usuario_nrec,
					ds_diagnostico,
					cd_medico,
					ie_tipo_diagnostico,
					nr_sequencia_autor)
				values (
					nr_seq_autor_diag_w,
					clock_timestamp(),
					clock_timestamp(),
					dt_diagnostico_w,
					nm_usuario_p,
					nm_usuario_p,
					ds_diagnostico_w,
					cd_medico_diag_w,
					ie_tipo_diagnostico_w,
					nr_sequencia_autor_p);


			open C02;
				loop
				fetch C02 into
					cd_doenca_w,
					ds_diagnostico_w,
					dt_atualizacao_w,
					ie_classificacao_doenca_w,
					ie_tipo_doenca_w,
					ie_unidade_tempo_w,
					nm_usuario_w,
					qt_tempo_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin
					if (cd_doenca_w IS NOT NULL AND cd_doenca_w::text <> '') and (nr_seq_autor_diag_w IS NOT NULL AND nr_seq_autor_diag_w::text <> '')then
						begin
						insert	into autor_diag_doenca(
							cd_doenca,
							ds_diagnostico,
							dt_atualizacao,
							dt_atualizacao_nrec,
							ie_classificacao_doenca,
							ie_tipo_doenca,
							ie_unidade_tempo,
							nm_usuario,
							nm_usuario_nrec,
							nr_seq_autor_diag,
							nr_sequencia,
							qt_tempo)
						values (
							cd_doenca_w,
							ds_diagnostico_w,
							dt_atualizacao_w,
							clock_timestamp(),
							ie_classificacao_doenca_w,
							ie_tipo_doenca_w,
							ie_unidade_tempo_w,
							nm_usuario_w,
							nm_usuario_p,
							nr_seq_autor_diag_w,
							nextval('autor_diag_doenca_seq'),
							qt_tempo_w);
						end;
					end if;
					end;
				end loop;
				close C02;
		end if;

	end if;
end if;
commit;
end	;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_diagnostico_atend_autor (nr_sequencia_autor_p bigint, nr_atendimento_p bigint, ie_gerar_diagnostico_p text, nm_usuario_p text) FROM PUBLIC;

