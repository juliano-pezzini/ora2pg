-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_19_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_seq_selecao_w			pls_util_cta_pck.t_number_table;
tb_valido_w				pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w				pls_util_cta_pck.t_varchar2_table_4000;

--Cursor das validacoes cadastradas para regra combinada
C01 CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	a.ie_val_profs_exec_comp,
			coalesce(a.ie_tipo_profissional, 'PE' ) ie_tipo_profissional,
			coalesce(a.ie_valida_cpf, 'N') ie_valida_cpf,
			coalesce(a.ie_profissional_inativo, 'N') ie_profissional_inativo
	from	pls_oc_cta_val_profis a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_pc;

--Cursor das contas selecionadas que gerarao a ocorrencia
C02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	conta.nr_sequencia,
		'S' ie_valido,
		null ds_observacao
	from	pls_conta_imp		conta
	where	exists (	SELECT 1
				from	pls_oc_cta_selecao_imp sel
				where	sel.nr_id_transacao = nr_id_transacao_pc
				and  	sel.ie_valido = 'S'
				and  	sel.nr_seq_conta = conta.nr_sequencia)
	and	coalesce(conta.cd_profissional_exec_conv::text, '') = '';

C03 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type,
		ie_tipo_profissional_pc	pls_oc_cta_val_profis.ie_tipo_profissional%type
			) FOR

	SELECT	nr_seq_selecao,
			ie_valido,
			ds_observacao
	from (
		SELECT	conta.nr_sequencia nr_seq_selecao,
			'S' ie_valido,
			CASE WHEN ie_tipo_profissional_pc ='PE' THEN  pls_obter_dados_medico(conta.cd_profissional_exec_conv, 'CPF')   ELSE pls_obter_dados_medico(conta.cd_profissional_solic_conv, 'CPF') END  nr_cpf,
			CASE WHEN  ie_tipo_profissional_pc ='PE' THEN  conta.cd_profissional_exec_conv  ELSE conta.cd_profissional_solic_conv END  cd_medico,
			null ds_observacao
		from	pls_conta_imp		conta
		where	exists (	select 1
					from	pls_oc_cta_selecao_imp sel
					where	sel.nr_id_transacao = nr_id_transacao_pc
					and  	sel.ie_valido = 'S'
					and  	sel.nr_seq_conta = conta.nr_sequencia)
	) v
	where	coalesce(v.nr_cpf::text, '') = ''
	and 	(v.cd_medico IS NOT NULL AND v.cd_medico::text <> ''); --Apenas aplica validao do CPF, caso o profissional do tipo adequado estiver presente.

--Cursor de participantes com CPF nulo no cadastro do medico ou sem a informacao do medico apontada no registro do participante	
C04 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type
			) FOR

	SELECT		x.nr_sequencia	nr_seq_selecao,
			'S' ie_valido,
			null ds_observacao
	from	pls_oc_cta_selecao_imp	x,
			pls_conta_ocor_v		a
	where	x.ie_valido		= 'S'
	and		x.nr_id_transacao	= nr_id_transacao_pc
	and		a.nr_sequencia 		= x.nr_seq_conta
	and   exists (SELECT   1
				  from  pls_conta_proc p,
						pls_proc_participante x,
						pessoa_fisica y
				  where   p.nr_seq_conta = a.nr_sequencia
				  and   p.nr_sequencia = x.nr_seq_conta_proc 
				  and   x.cd_medico_imp = y.cd_pessoa_fisica    
				  and   coalesce(y.nr_cpf::text, '') = '');

C05 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type,
		ie_tipo_profissional_pc	pls_oc_cta_val_profis.ie_tipo_profissional%type
			) FOR

	SELECT	nr_seq_selecao,
			ie_valido,
			ds_observacao
	from (
		SELECT	conta.nr_sequencia nr_seq_selecao,
			'S' ie_valido,
			CASE WHEN ie_tipo_profissional_pc ='PE' THEN  pls_obter_dados_medico(conta.cd_profissional_exec_conv, 'IN')   ELSE pls_obter_dados_medico(conta.cd_profissional_solic_conv, 'IN') END  ie_profissional_ativo,
			CASE WHEN  ie_tipo_profissional_pc ='PE' THEN  conta.cd_profissional_exec_conv  ELSE conta.cd_profissional_solic_conv END  cd_medico,
			null ds_observacao
		from	pls_conta_imp		conta
		where	exists (	select 1
					from	pls_oc_cta_selecao_imp sel
					where	sel.nr_id_transacao = nr_id_transacao_pc
					and  	sel.ie_valido = 'S'
					and  	sel.nr_seq_conta = conta.nr_sequencia)
	) v
	where	coalesce(v.ie_profissional_ativo::text, '') = ''
	and 	(v.cd_medico IS NOT NULL AND v.cd_medico::text <> ''); --Apenas aplica a validacao de profissional ativo, caso o profissional do tipo adequado estiver presente.

--Cursor de participantes com CPF nulo no cadastro do medico ou sem a informacao do medico apontada no registro do participante	
C06 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_ocor_v.nr_id_transacao%type
			) FOR

	SELECT		x.nr_sequencia	nr_seq_selecao,
			'S' ie_valido,
			null ds_observacao
	from	pls_oc_cta_selecao_imp	x,
			pls_conta_ocor_v		a
	where	x.ie_valido		= 'S'
	and		x.nr_id_transacao	= nr_id_transacao_pc
	and		a.nr_sequencia 		= x.nr_seq_conta
	and   exists (SELECT   1
				  from  pls_conta_proc p,
						pls_proc_participante x,
						medico y
				  where   p.nr_seq_conta = a.nr_sequencia
				  and   p.nr_sequencia = x.nr_seq_conta_proc 
				  and   x.cd_medico_imp = y.cd_pessoa_fisica    
				  and   y.ie_situacao = 'I');
				
BEGIN

-- Deve existir a informacao da regra e transacaopara aplicar a validacao
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') and (nr_id_transacao_p IS NOT NULL AND nr_id_transacao_p::text <> '')  then
	
	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_ocor_imp_pck.atualiza_campo_auxiliar('V', 'N', nr_id_transacao_p, null);
	
	--limpa as variaveis
	SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
	
	for r_C01_w in C01(nr_seq_combinada_p) loop
		
		if (r_C01_w.ie_val_profs_exec_comp = 'S')	then
			begin			
				open C02(nr_id_transacao_p);
				loop
					fetch C02 bulk collect into tb_seq_selecao_w, tb_valido_w, tb_observacao_w
					limit pls_util_cta_pck.qt_registro_transacao_w;
					exit when tb_seq_selecao_w.count = 0;
					--Grava as informacoes na tabela de selecao
					CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
											tb_observacao_w, nr_id_transacao_p,
											'SEQ_CONTA');
					--limpa as variaveis
					SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
				end loop;
				close C02;
			exception
			when others then
				--Fecha cursor
				if (C02%isopen) then
				
					close C02;
				end if;	
			end;
		end if;
		
		if (r_C01_w.ie_valida_cpf = 'S' ) then
		
			--Verificacao por tipo de profissional executor ou solicitante.
			if (r_C01_w.ie_tipo_profissional in ('PE', 'PS')) then
			
				begin
					open C03(nr_id_transacao_p, r_C01_w.ie_tipo_profissional);					
						loop
						fetch C03 bulk collect into tb_seq_selecao_w, tb_valido_w, tb_observacao_w
						limit pls_util_cta_pck.qt_registro_transacao_w;
						exit when tb_seq_selecao_w.count = 0;
						--Grava as informacoes na tabela de selecao
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ_CONTA');
						--limpa as variaveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
					end loop;
					close C03;
				exception
				when others then
					--Fecha cursor
					if (C03%isopen) then
					
						close C03;
					end if;	
				end;
			
			--Verificacao por tipo de profissional participante(PP). Verifica se algum medico participante nao tem seu CPF informado.
			else
				begin
				open C04(nr_id_transacao_p);
						loop
						fetch C04 bulk collect into tb_seq_selecao_w, tb_valido_w, tb_observacao_w
						limit pls_util_cta_pck.qt_registro_transacao_w;
						exit when tb_seq_selecao_w.count = 0;
						--Grava as informacoes na tabela de selecao
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ_CONTA');
						--limpa as variaveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
					end loop;
					
					close C04;
				exception
				when others then
					--Fecha cursor
					if (C04%isopen) then
					
						close C04;
					end if;	
				end;
			end if;
		
		end if;		
		
		if (r_C01_w.ie_profissional_inativo = 'S' ) then
		
			--Verificacao por tipo de profissional executor ou solicitante.
			if (r_C01_w.ie_tipo_profissional in ('PE', 'PS')) then
			
				begin
					open C05(nr_id_transacao_p, r_C01_w.ie_tipo_profissional);					
						loop
						fetch C05 bulk collect into tb_seq_selecao_w, tb_valido_w, tb_observacao_w
						limit pls_util_cta_pck.qt_registro_transacao_w;
						exit when tb_seq_selecao_w.count = 0;
						--Grava as informacoes na tabela de selecao
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ_CONTA');
						--limpa as variaveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
					end loop;
					close C05;
				exception
				when others then
					--Fecha cursor
					if (C05%isopen) then
					
						close C05;
					end if;	
				end;
			
			--Verificacao por tipo de profissional participante(PP) para verificar se esta inativo
			else
				begin
				open C04(nr_id_transacao_p);
						loop
						fetch C06 bulk collect into tb_seq_selecao_w, tb_valido_w, tb_observacao_w
						limit pls_util_cta_pck.qt_registro_transacao_w;
						exit when tb_seq_selecao_w.count = 0;
						--Grava as informacoes na tabela de selecao
						CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
												tb_observacao_w, nr_id_transacao_p,
												'SEQ_CONTA');
						--limpa as variaveis
						SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
					end loop;
					
					close C06;
				exception
				when others then
					--Fecha cursor
					if (C06%isopen) then
					
						close C06;
					end if;	
				end;
			end if;		
		end if;				
	end loop;
	--Grava o que restar nas variaveis na tabela
	CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w, tb_valido_w,
							tb_observacao_w, nr_id_transacao_p,
							'SEQ_CONTA');
	
	-- seta os registros que serao validos ou invalidos apos o processamento 
	CALL pls_ocor_imp_pck.atualiza_campo_valido('V', 'N',
						ie_regra_excecao_p, null,
						nr_id_transacao_p, null);
end if;
	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_19_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

