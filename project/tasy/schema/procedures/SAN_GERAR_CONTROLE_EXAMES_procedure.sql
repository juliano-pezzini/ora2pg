-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE san_gerar_controle_exames ( nr_seq_qual_prod_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_seq_qual_exame_w	bigint;
nr_seq_derivado_w	bigint;
ds_formula_w		varchar(2000);
ie_formula_ok_w		integer;
qt_volume_coleta_w	smallint;
ds_formula_aux_w	varchar(2000);
ds_formula_aux_comp_w	varchar(2000);
ie_tamanho_w		integer;
i			integer;
nr_seq_exame_w		bigint;
qt_resultado_w		double precision;
qt_resultado_exame_w	varchar(50);
nr_seq_unidade_medida_w	bigint;
ds_formula_ref_w	varchar(2000);
ie_formula_composta_w	varchar(1);
vl_minimo_w		bigint;
vl_maximo_w		bigint;
nr_seq_conservante_w	bigint;
ds_valor_referencia_w	varchar(255);
ds_conservante_w	varchar(150);
ie_tipo_coleta_w	smallint;
ie_tipo_bolsa_w		varchar(5);

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		b.ds_formula
	from	san_controle_qual_exame a,
		san_regra_exame_cont_item b
	where	a.nr_seq_exame = b.nr_seq_exame
	and	a.nr_seq_qual_prod = nr_seq_qual_prod_p
	and	(b.ds_formula IS NOT NULL AND b.ds_formula::text <> '')
	and 	exists (SELECT	1
			from	san_regra_exame_controle c
			where	c.nr_sequencia = b.nr_seq_regra_exame
			and	c.nr_seq_derivado = nr_seq_derivado_w
			and	c.ie_situacao = 'A')
	order by 1;

C02 CURSOR FOR
	SELECT	a.nr_sequencia,
		b.ds_formula,
		b.ie_formula_composta,
		b.vl_minimo,
		b.vl_maximo,
		substr(san_obter_desc_conservante(b.nr_seq_conservante),1,150),
		a.nr_seq_unidade_medida
	from	san_controle_qual_exame a,
		san_exame_referencia b
	where	b.nr_seq_exame = a.nr_seq_exame
	and	a.nr_seq_qual_prod = nr_seq_qual_prod_p
	and (b.nr_seq_unid_lab = a.nr_seq_unidade_medida or (coalesce(a.nr_seq_unidade_medida::text, '') = '' and coalesce(b.nr_seq_unid_lab::text, '') = ''))
	and 	exists (SELECT	1
			from	san_regra_exame_controle c
			where	c.nr_sequencia = b.nr_seq_regra_exame
			and	c.nr_seq_derivado = nr_seq_derivado_w
			and	c.ie_situacao = 'A')
	and	((ie_tipo_coleta_w <> 1 and coalesce(b.ie_dose::text, '') = '') or (ie_tipo_bolsa_w = 1 and b.ie_dose = 'S') or (ie_tipo_bolsa_w = 2 and b.ie_dose = 'D'));


BEGIN

if (nr_seq_qual_prod_p IS NOT NULL AND nr_seq_qual_prod_p::text <> '') then

	select	max(a.nr_seq_derivado)
	into STRICT	nr_seq_derivado_w
	from	san_controle_qualidade a,
		san_controle_qual_prod b
	where	a.nr_sequencia = b.nr_seq_qualidade
	and	b.nr_sequencia = nr_seq_qual_prod_p;

	--Buscar dados da doação
	select	max(c.ie_tipo_coleta),
		max(c.ie_tipo_bolsa),
		max(b.qt_volume)
	into STRICT	ie_tipo_coleta_w,
		ie_tipo_bolsa_w,
		qt_volume_coleta_w
	from	san_controle_qual_prod a,
		san_producao b,
		san_doacao c
	where	a.nr_seq_producao = b.nr_sequencia
	and	b.nr_seq_doacao = c.nr_sequencia
	and	a.nr_sequencia = nr_seq_qual_prod_p;

	open C01;
	loop
	fetch C01 into
		nr_seq_qual_exame_w,
		ds_formula_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin

		--Substituir as macros da fórmula
		ie_formula_ok_w	:= position('@' in ds_formula_w);

		if (ie_formula_ok_w > 0) then

			ds_formula_aux_w 	:= ds_formula_w;

			while(position('@' in ds_formula_aux_w) > 0) loop

				ds_formula_aux_comp_w	:= replace_macro(upper(ds_formula_aux_w),'@VOLUME_BOLSA',qt_volume_coleta_w);
				if	ds_formula_aux_comp_w <> ds_formula_aux_w then
					ds_formula_aux_w := ds_formula_aux_comp_w;
				-- Na estrutura anterior era verificado se a macro existia para depois realizada a substituição. Porém, essa verificação não é mais segura, pois a macro pode estar com outro nome no cliente.
				-- Para resolver essa situação, está sendo feita a substituição da macro e o resultado é gravado em uma variável auxiliar, depois é verificado se existe diferença entre as variáveis, se houver
				-- significa que a macro estava presente e foi substituida, então o valor é passado para a variável original, caso contrário segue o else conforme o tratamento anterior.
				--if	(instr(upper(ds_formula_aux_w), '@VOLUME_BOLSA') > 0) then
					--ds_formula_aux_w	:= replace(upper(ds_formula_aux_w),'@VOLUME_BOLSA',qt_volume_coleta_w);
				else
					ie_formula_ok_w := position('@' in ds_formula_aux_w);
					ie_tamanho_w := 0;

					for i in ie_formula_ok_w..length(ds_formula_aux_w) + 1 loop

						if	((substr(ds_formula_aux_w, i, 1) in (' ','/','*','+','-','(',')','@',',')) or (i = length(ds_formula_aux_w) + 1)) and
							(i > (ie_formula_ok_w + 1)) then

							ie_tamanho_w := i;
							exit;

						end if;

					end loop;

					begin

					nr_seq_exame_w	:= to_number(substr(ds_formula_aux_w, ie_formula_ok_w + 1, ie_tamanho_w - (ie_formula_ok_w + 1)));

					exception
						when others then
							nr_seq_exame_w := to_number(replace(substr(ds_formula_aux_w, ie_formula_ok_w + 1, ie_tamanho_w - (ie_formula_ok_w +  1)),',','.'));
					end;

					select	max(qt_resultado)
					into STRICT	qt_resultado_exame_w
					from	san_controle_qual_exame
					where	nr_seq_exame = nr_seq_exame_w
					and	nr_seq_qual_prod = nr_seq_qual_prod_p;

					qt_resultado_exame_w	:= replace(qt_resultado_exame_w,',','.');

					ds_formula_aux_w 	:= replace((replace(ds_formula_aux_w, '@' || nr_seq_exame_w, qt_resultado_exame_w)),' ','');
				end if;
			end loop;
			ds_formula_w 	 	:= ds_formula_aux_w;
		end if;

		if (position('^' in ds_formula_w) > 0) then
			ds_formula_w := Obter_Potencia_Convertida(ds_formula_w);
		end if;

		--Obter o resultado da fórmula
		ie_formula_ok_w := position('@' in ds_formula_w);

		if (coalesce(ie_formula_ok_w,0) = 0) then

			qt_resultado_w := obter_valor_dinamico('select ' || ds_formula_w || ' from dual', qt_resultado_w);

			if (coalesce(qt_resultado_w::text, '') = '') or (qt_resultado_w = 0) then
				qt_resultado_w := obter_valor_dinamico('select ' || replace(ds_formula_w, ',', '.') || ' from dual', qt_resultado_w);
			end if;

		end if;

		--Gravar o resultado
		if (qt_resultado_w IS NOT NULL AND qt_resultado_w::text <> '') then
			update	san_controle_qual_exame
			set	qt_resultado = qt_resultado_w
			where	nr_sequencia = nr_seq_qual_exame_w;
		end if;

		end;
	end loop;
	close C01;

	open C02;
	loop
	fetch C02 into
		nr_seq_qual_exame_w,
		ds_formula_ref_w,
		ie_formula_composta_w,
		vl_minimo_w,
		vl_maximo_w,
		ds_conservante_w,
		nr_seq_unidade_medida_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin

		if (ie_formula_composta_w = 'N') then
			ds_valor_referencia_w := vl_minimo_w||' a '||vl_maximo_w||' '||substr(lab_obter_unidade_medida(nr_seq_unidade_medida_w),1,40)||' '||ds_conservante_w;
		else
			ds_formula_ref_w	:= substr(replace_macro(upper(ds_formula_ref_w),'@VOLUME_BOLSA',qt_volume_coleta_w),1,2000);
			ds_formula_ref_w	:= substr(replace_macro(upper(ds_formula_ref_w),'@DOSE_SIMPLES',wheb_mensagem_pck.get_texto(799951)),1,2000);
			ds_formula_ref_w	:= substr(replace_macro(upper(ds_formula_ref_w),'@DOSE_DUPLA',wheb_mensagem_pck.get_texto(799950)),1,2000);
			ds_formula_ref_w	:= substr(replace_macro(upper(ds_formula_ref_w),'@UNIDADE',substr(lab_obter_unidade_medida(nr_seq_unidade_medida_w),1,40)),1,2000);

			ds_valor_referencia_w 	:= initcap(ds_formula_ref_w);
		end if;

		--Gravar a referência
		if (ds_valor_referencia_w IS NOT NULL AND ds_valor_referencia_w::text <> '') then
			update	san_controle_qual_exame
			set	ds_valor_referencia = ds_valor_referencia_w
			where	nr_sequencia = nr_seq_qual_exame_w;
		end if;

		end;
	end loop;
	close C02;

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE san_gerar_controle_exames ( nr_seq_qual_prod_p bigint, nm_usuario_p text) FROM PUBLIC;

