-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE nom_valor_basal ( cd_pessoa_fisica_p text, ie_tipo_p text, nr_atendimento_p bigint, nr_sequencia_p bigint, nr_seq_exame_p bigint, qt_result_exam_p bigint) AS $body$
DECLARE


nr_seq_w				dado_basal.nr_sequencia%type;
qt_imc_w				atendimento_sinal_vital.qt_imc%type;
qt_circinf_w			atendimento_sinal_vital.qt_circunf_cintura%type;
qt_peso_w				atendimento_sinal_vital.qt_peso%type;
qt_altura_w				atendimento_sinal_vital.qt_altura_cm%type;
nr_seq_basal_w			dado_basal.nr_sequencia%type;
qt_glicemia_capilar_w	atendimento_sinal_vital.qt_glicemia_capilar%type;
ie_revisao_pe_w			atendimento_sinal_vital.ie_revisao_pe%type;
ie_fundo_olho_w			atendimento_sinal_vital.ie_fundo_olho%type;
qt_pa_sistolica_w		atendimento_sinal_vital.qt_pa_sistolica%type;
qt_pa_diastolica_w		atendimento_sinal_vital.qt_pa_diastolica%type;
ie_tipo_medicao_w		atendimento_sinal_vital.ie_tipo_medicao%type;
ie_glic_extrapol_w		atendimento_sinal_vital.ie_glic_extrapol%type;
ie_lado_pe_w			atendimento_sinal_vital.ie_lado_pe%type;


BEGIN	
	
	select 	nextval('dado_basal_seq')
	into STRICT	nr_seq_w
	;
	
	
	select	coalesce(max(nr_sequencia), 0)
	into STRICT	nr_seq_basal_w
	from	dado_basal
	where	nr_atendimento = nr_atendimento_p
	and		cd_pessoa_fisica = cd_pessoa_fisica_p
	and		ie_doenca_cronica_mx = ie_tipo_p
	and 	((nr_seq_exame = nr_seq_exame_p) or ((coalesce(nr_seq_exame::text, '') = '') and (coalesce(nr_seq_exame_p::text, '') = '')));

	
		if (ie_tipo_p = 'OBSDA') then
		
			select 	max(qt_imc),
					max(qt_circunf_cintura),
					max(qt_peso),
					max(qt_altura_cm)
			into STRICT	qt_imc_w,
					qt_circinf_w,
					qt_peso_w,
					qt_altura_w
			from	atendimento_sinal_vital
			where	nr_sequencia = nr_sequencia_p;
		
			
			if (nr_seq_basal_w = 0) then
				
				insert into dado_basal(	nr_sequencia,
									dt_atualizacao,
									nm_usuario,
									dt_atualizacao_nrec,
									nm_usuario_nrec,
									cd_pessoa_fisica,
									nr_atendimento,
									qt_imc,
									qt_circunf_cintura,
									qt_peso,
									qt_altura_cm,
									ie_doenca_cronica_mx)
							values (	nr_seq_w,
									clock_timestamp(),
									wheb_usuario_pck.get_nm_usuario,
									clock_timestamp(),
									wheb_usuario_pck.get_nm_usuario,
									cd_pessoa_fisica_p,
									nr_atendimento_p,
									qt_imc_w,
									qt_circinf_w,
									qt_peso_w,
									qt_altura_w,
									ie_tipo_p);
			else
				
				update	dado_basal
				set		dt_atualizacao = clock_timestamp(),
						nm_usuario = wheb_usuario_pck.get_nm_usuario,
						qt_imc = coalesce(qt_imc_w, qt_imc),
						qt_circunf_cintura = coalesce(qt_circinf_w, qt_circunf_cintura),
						qt_peso = coalesce(qt_peso_w, qt_peso),
						qt_altura_cm  = coalesce(qt_altura_w, qt_altura_cm)
				where	nr_sequencia = nr_seq_basal_w
				and		nr_atendimento = nr_atendimento_p
				and		cd_pessoa_fisica = cd_pessoa_fisica_p;
						
			
			end if;
		
		elsif (ie_tipo_p = 'DIABT') then		
			
			if (coalesce(nr_seq_exame_p,0) <> 0) then --especifico para passar exames 
				
				if (nr_seq_basal_w = 0) then
				
					insert into dado_basal(	nr_sequencia,
											dt_atualizacao,
											nm_usuario,
											dt_atualizacao_nrec,
											nm_usuario_nrec,
											cd_pessoa_fisica,
											nr_atendimento,
											qt_resultado,
											nr_seq_exame,
											ie_doenca_cronica_mx)
									values (	nr_seq_w,
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											cd_pessoa_fisica_p,
											nr_atendimento_p,
											qt_result_exam_p,
											nr_seq_exame_p,
											ie_tipo_p);
				else
					update	dado_basal
					set		dt_atualizacao = clock_timestamp(),
							nm_usuario = wheb_usuario_pck.get_nm_usuario,
							qt_resultado = coalesce(qt_result_exam_p, qt_resultado)
					where	nr_sequencia = nr_seq_basal_w
					and		nr_atendimento = nr_atendimento_p
					and		cd_pessoa_fisica = cd_pessoa_fisica_p;
				end if;
			else --para passar sinal vital			
			
				select	max(qt_glicemia_capilar),
						max(ie_revisao_pe),
						max(ie_fundo_olho),
						max(ie_tipo_medicao),
						max(ie_glic_extrapol),
						max(ie_lado_pe)
				into STRICT	qt_glicemia_capilar_w,
						ie_revisao_pe_w,
						ie_fundo_olho_w,
						ie_tipo_medicao_w,
						ie_glic_extrapol_w,
						ie_lado_pe_w
				from	atendimento_sinal_vital
				where	nr_sequencia = nr_sequencia_p;
				
				if (nr_seq_basal_w = 0) then
					insert into dado_basal(	nr_sequencia,
											dt_atualizacao,
											nm_usuario,
											dt_atualizacao_nrec,
											nm_usuario_nrec,
											cd_pessoa_fisica,
											nr_atendimento,
											qt_glicemia_capilar,
											ie_revisao_pe,
											ie_fundo_olho,
											ie_tipo_medicao,
											ie_doenca_cronica_mx,
											ie_glic_extrapol,
											ie_lado_pe)
									values (	nr_seq_w,
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											cd_pessoa_fisica_p,
											nr_atendimento_p,
											qt_glicemia_capilar_w,
											ie_revisao_pe_w,
											ie_fundo_olho_w,
											ie_tipo_medicao_w,
											ie_tipo_p,
											ie_glic_extrapol_w,
											ie_lado_pe_w);
			
				else
					update	dado_basal
					set		dt_atualizacao = clock_timestamp(),
							nm_usuario = wheb_usuario_pck.get_nm_usuario,
							qt_glicemia_capilar = qt_glicemia_capilar_w,
							ie_revisao_pe = coalesce(ie_revisao_pe_w, ie_revisao_pe),
							ie_fundo_olho = coalesce(ie_fundo_olho_w, ie_fundo_olho),
							ie_tipo_medicao = coalesce(ie_tipo_medicao_w, ie_tipo_medicao),
							ie_glic_extrapol = coalesce(ie_glic_extrapol_w, ie_glic_extrapol),
							ie_lado_pe = coalesce(ie_lado_pe_w, ie_lado_pe)
					where	nr_sequencia = nr_seq_basal_w
					and		nr_atendimento = nr_atendimento_p
					and		cd_pessoa_fisica = cd_pessoa_fisica_p;
					
				end if;
			end if;
			
		elsif (ie_tipo_p = 'HIPAS') then
		
			select 	max(qt_pa_sistolica),
					max(qt_pa_diastolica)
			into STRICT	qt_pa_sistolica_w,
					qt_pa_diastolica_w
			from	atendimento_sinal_vital
			where	nr_sequencia = nr_sequencia_p;
			
			if (nr_seq_basal_w = 0) then
			
				insert into dado_basal(	nr_sequencia,
											dt_atualizacao,
											nm_usuario,
											dt_atualizacao_nrec,
											nm_usuario_nrec,
											cd_pessoa_fisica,
											nr_atendimento,
											qt_pa_diastolica,
											qt_pa_sistolica,
											ie_doenca_cronica_mx)
									values (	nr_seq_w,
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											cd_pessoa_fisica_p,
											nr_atendimento_p,
											qt_pa_diastolica_w,
											qt_pa_sistolica_w,
											ie_tipo_p);
			else
				update		dado_basal
				set			dt_atualizacao = clock_timestamp(),
							nm_usuario = wheb_usuario_pck.get_nm_usuario,
							qt_pa_diastolica = coalesce(qt_pa_diastolica_w, qt_pa_diastolica),
							qt_pa_sistolica = coalesce(qt_pa_sistolica_w, qt_pa_sistolica)
				where		nr_sequencia = nr_seq_basal_w
				and			nr_atendimento = nr_atendimento_p
				and			cd_pessoa_fisica = cd_pessoa_fisica_p;
						
			end if;
			
		elsif (ie_tipo_p = 'LIPDM') then
			
			if (nr_seq_basal_w = 0) then
				
					insert into dado_basal(	nr_sequencia,
											dt_atualizacao,
											nm_usuario,
											dt_atualizacao_nrec,
											nm_usuario_nrec,
											cd_pessoa_fisica,
											nr_atendimento,
											qt_resultado,
											nr_seq_exame,
											ie_doenca_cronica_mx)
									values (	nr_seq_w,
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											clock_timestamp(),
											wheb_usuario_pck.get_nm_usuario,
											cd_pessoa_fisica_p,
											nr_atendimento_p,
											qt_result_exam_p,
											nr_seq_exame_p,
											ie_tipo_p);
			else
				update	dado_basal
				set		dt_atualizacao = clock_timestamp(),
						nm_usuario = wheb_usuario_pck.get_nm_usuario,
						qt_resultado = coalesce(qt_result_exam_p, qt_resultado)
				where	nr_sequencia = nr_seq_basal_w
				and		nr_atendimento = nr_atendimento_p
				and		cd_pessoa_fisica = cd_pessoa_fisica_p;
			
			end if;
		end if;
		
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE nom_valor_basal ( cd_pessoa_fisica_p text, ie_tipo_p text, nr_atendimento_p bigint, nr_sequencia_p bigint, nr_seq_exame_p bigint, qt_result_exam_p bigint) FROM PUBLIC;

