-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE incluir_proc_conta ( cd_procedimento_p bigint, qt_procedimento_p bigint, nr_seq_exame_p bigint, nr_seq_proc_interno_p bigint, ie_origem_proced_p bigint, cd_setor_atendimento_p bigint, nr_atendimento_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_tipo_baixa_p text, nr_sequencia_p INOUT bigint, dt_execucao_p timestamp, cd_medico_exec_p text) AS $body$
DECLARE

 
/** juliane menin - faz a inserção dos procedimentos - (execução da prescrição )*/
 
 
nr_sequencia_w			bigint;
dt_entrada_unidade_w		timestamp;
nr_seq_interno_w			bigint;
cd_convenio_w			integer;
cd_categoria_w			varchar(10);
nr_doc_convenio_w		varchar(20);
ie_tipo_guia_w			varchar(2);
cd_senha_w			varchar(20);
ie_emite_conta_w 			varchar(3)	:= NULL; --no delphi 81(conta paciente-antiga) parametro 18 
cd_cgc_prestador_w 		varchar(14);
ie_origem_proced_w		bigint;
ie_tipo_atendimento_w 		varchar(2)	:= NULL;
ie_medico_executor_w		varchar(2);
cd_cgc_w			varchar(14);
cd_medico_executor_w		varchar(10);

 
ie_funcao_medico_w		varchar(10)	:= 0;
dt_procedimento_w		timestamp;
cd_pessoa_fisica_w		varchar(10);

cd_tipo_procedimento_w		smallint;
ie_classificacao_w		varchar(1);
ie_tipo_lancto_w		varchar(10);
cd_procedimento_w		bigint;
cd_profissional_w		varchar(10);
nr_seq_cor_exec_w		bigint	:= 96;
ds_observacao_w			varchar(255);
nr_seq_proc_interno_w		bigint := NULL;
nr_seq_classificacao_w		bigint;

 
 

BEGIN 
cd_procedimento_w:= cd_procedimento_p;
ie_tipo_lancto_w := obter_param_usuario(67, 117, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_tipo_lancto_w);
 
 
IF (coalesce(nr_seq_proc_interno_p,0) > 0) THEN 
	SELECT * FROM obter_proc_tab_interno( nr_seq_proc_interno_p, '', nr_atendimento_p, 0, cd_procedimento_w, ie_origem_proced_w, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
	nr_seq_proc_interno_w := nr_seq_proc_interno_p;
END IF;
 
 
	-- obter o código da pessoa física 
	SELECT	cd_pessoa_fisica 
	INTO STRICT	cd_pessoa_fisica_w 
	FROM	atendimento_paciente 
	WHERE	nr_atendimento 		= nr_atendimento_p;
 
	-- obter a data do procedimento( se a data da alta for igual a null então dt_atendimento = dt_alta senão dt_atendimento = sysdate) 
	BEGIN 
		SELECT	dt_alta 
		INTO STRICT	dt_procedimento_w 
		FROM	atendimento_paciente 
		WHERE	cd_pessoa_fisica  = cd_pessoa_fisica_w 
		AND	nr_atendimento   = nr_atendimento_p;
	EXCEPTION 
		WHEN OTHERS THEN 
		dt_procedimento_w	:=	clock_timestamp();
	END;
 
	IF ( coalesce(dt_procedimento_w::text, '') = '') THEN 
		dt_procedimento_w	:=	clock_timestamp();
	END IF;
 
	SELECT MAX(a.dt_entrada_unidade), 
		MAX(a.nr_seq_interno) 
	INTO STRICT	dt_entrada_unidade_w, 
		nr_seq_interno_w 
	FROM	tipo_acomodacao b, 
		setor_atendimento c, 
		atend_paciente_unidade a 
	WHERE	a.cd_tipo_acomodacao	= b.cd_tipo_acomodacao 
	AND	a.cd_setor_atendimento = c.cd_setor_atendimento 
	AND	nr_atendimento		= nr_atendimento_p 
	AND	a.cd_setor_atendimento = cd_setor_atendimento_p;
 
 
 
	SELECT	a.cd_cgc 
	INTO STRICT	cd_cgc_prestador_w 
	FROM 	estabelecimento a, 
		atendimento_paciente b 
	WHERE	a.cd_estabelecimento 	= b.cd_estabelecimento 
	AND	b.nr_atendimento 	= nr_atendimento_p;
	 
	SELECT	nr_seq_classificacao 
	INTO STRICT	nr_seq_classificacao_w 
	FROM	atendimento_paciente 
	WHERE	nr_atendimento 		= nr_atendimento_p;
 
	-- obter o convênio de execucao 
	SELECT * FROM obter_convenio_execucao(nr_atendimento_p, dt_entrada_unidade_w, cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w) INTO STRICT cd_convenio_w, cd_categoria_w, nr_doc_convenio_w, ie_tipo_guia_w, cd_senha_w;
 
	-- obter médico executor 
	SELECT * FROM consiste_medico_executor(cd_estabelecimento_p, cd_convenio_w, cd_setor_atendimento_p, cd_procedimento_w, ie_origem_proced_w, ie_tipo_atendimento_w, nr_seq_exame_p, nr_seq_proc_interno_w, ie_medico_executor_w, cd_cgc_w, cd_medico_executor_w, cd_profissional_w, NULL, coalesce(dt_execucao_p, dt_procedimento_w), nr_seq_classificacao_w, 'N', null, null) INTO STRICT ie_medico_executor_w, cd_cgc_w, cd_medico_executor_w, cd_profissional_w;
 
	-- obter a máxima sequencia da procedimento_paciente 
	SELECT	nextval('procedimento_paciente_seq') 
	INTO STRICT	nr_sequencia_w 
	;
 
	IF (coalesce(cd_medico_executor_w::text, '') = '' OR cd_medico_executor_w = '') THEN 
		ie_funcao_medico_w	:=	NULL;
	END IF;
 
	IF (ie_tipo_baixa_p = 'P') THEN --via palmweb 
		nr_seq_cor_exec_w := 1013;
		ds_observacao_w	 := 'PalmWeb';
 
	END IF;
 
	-- inserir na tabela procedimento_paciente 
	INSERT INTO procedimento_paciente( 
		nr_sequencia, 
		nr_atendimento, 
		dt_entrada_unidade, 
		cd_procedimento, 
		dt_procedimento, 
		cd_convenio, 
		cd_categoria, 
		nr_doc_convenio, 
		ie_tipo_guia, 
		cd_senha, 
		ie_auditoria, 
		ie_emite_conta, 
		cd_cgc_prestador, 
		ie_origem_proced, 
		nr_seq_exame, 
		nr_seq_proc_interno, 
		qt_procedimento, 
		cd_setor_atendimento, 
		nr_seq_atepacu, 
		nr_seq_cor_exec, 
		ie_funcao_medico, 
		vl_procedimento, 
		ie_proc_princ_atend, 
		ie_video, 
		tx_medico, 
		tx_anestesia, 
		tx_procedimento, 
		ie_valor_informado, 
		ie_guia_informada, 
		cd_situacao_glosa, 
		nm_usuario_original, 
		ds_observacao, 
		dt_atualizacao, 
		nm_usuario, 
		cd_pessoa_fisica, 
		cd_medico_executor) 
	VALUES ( 
		nr_sequencia_w, 
		nr_atendimento_p, 
		dt_entrada_unidade_w, 
		cd_procedimento_w, 
		coalesce(dt_execucao_p, dt_procedimento_w), 
		cd_convenio_w, 
		cd_categoria_w, 
		nr_doc_convenio_w, 
		ie_tipo_guia_w, 
		cd_senha_w, 
		'N', 
		ie_emite_conta_w, 
		cd_cgc_prestador_w, 
		ie_origem_proced_p, 
		nr_seq_exame_p, 
		nr_seq_proc_interno_w, 
		qt_procedimento_p, 
		cd_setor_atendimento_p, 
		nr_seq_interno_w, 
		nr_seq_cor_exec_w, 
		ie_funcao_medico_w, 
		100, 
		'N', 
		'N', 
		100, 
		100, 
		100, 
		'N', 
		'N', 
		0, 
		nm_usuario_p, 
		ds_observacao_w, 
		clock_timestamp(), 
		nm_usuario_p, 
		cd_profissional_w, 
		coalesce(cd_medico_exec_p, cd_medico_executor_w));
 
 
	COMMIT;
 
 
	SELECT	MAX(ie_classificacao), 
	MAX(cd_tipo_procedimento) 
	INTO STRICT	ie_classificacao_w, 
		cd_tipo_procedimento_w 
	FROM	procedimento 
	WHERE	cd_procedimento		= cd_procedimento_w 
	AND	ie_origem_proced	= ie_origem_proced;
 
	IF (ie_classificacao_w IN (1,8)) THEN 
 
		CALL atualiza_preco_procedimento(nr_sequencia_w, cd_convenio_w, nm_usuario_p);
 
		CALL gerar_taxa_sala_porte(nr_atendimento_p, dt_entrada_unidade_w, coalesce(dt_execucao_p, dt_procedimento_w), cd_procedimento_w, nr_sequencia_w, nm_usuario_p);
	ELSE 
		CALL atualiza_preco_servico(nr_sequencia_w,nm_usuario_p);
	END IF;
 
	CALL atualizar_agenda_propaci(nr_sequencia_w);
 
	IF (coalesce(ie_tipo_lancto_w,'0') = '0') THEN 
		CALL gerar_lanc_automatico_mat(nr_atendimento_p,NULL, 132, nm_usuario_p, nr_sequencia_w,NULL,NULL);
	END IF;
 
	CALL gerar_autor_regra(nr_atendimento_p, NULL, nr_sequencia_w, NULL, NULL, nr_seq_proc_interno_w, 
			'CP',nm_usuario_p,NULL,NULL,NULL,NULL,NULL,NULL,'','','');
 
 
nr_sequencia_p	:= nr_sequencia_w;
 
COMMIT;
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE incluir_proc_conta ( cd_procedimento_p bigint, qt_procedimento_p bigint, nr_seq_exame_p bigint, nr_seq_proc_interno_p bigint, ie_origem_proced_p bigint, cd_setor_atendimento_p bigint, nr_atendimento_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_tipo_baixa_p text, nr_sequencia_p INOUT bigint, dt_execucao_p timestamp, cd_medico_exec_p text) FROM PUBLIC;

