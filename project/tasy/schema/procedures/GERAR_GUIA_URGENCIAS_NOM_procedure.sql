-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_guia_urgencias_nom ( dt_inicio_p timestamp, dt_final_p timestamp, nm_usuario_p text) AS $body$
DECLARE

	qt_linha_w    bigint;

C01 CURSOR FOR
	SELECT
		z.cd_clues clues,
		substr(b.nr_atendimento,1,8) as folio,
		2 tipo_reg,
		coalesce(substr(upper(a.cd_curp),1,18), 'XXXX999999XXXXXX99') curppaciente,
		substr(upper(y.ds_given_name),1,50) nombre,
		coalesce(substr(upper(y.ds_family_name),1,50), 'XX') primerapellido,
		coalesce(substr(upper(y.ds_component_name_1),1,50), 'XX') segundoapellido,
		to_char(a.dt_nascimento, 'dd/mm/yyyy') fechanacimiento,
		CASE WHEN c.ie_brasileiro='N' THEN  0  WHEN c.ie_brasileiro='S' THEN  1 END  as nacioextranjero,
		coalesce(CASE WHEN c.ie_brasileiro='S' THEN  c.cd_externo END , -1) as paisorigen,
		CASE WHEN c.ie_brasileiro='S' THEN  obter_dados_cat_entidade(a.cd_pessoa_fisica, 'CD_ENTIDADE') END  entidadnacimiento,
		case
			when (obter_idade(a.dt_nascimento, b.dt_entrada, 'A') IS NOT NULL AND (obter_idade(a.dt_nascimento, b.dt_entrada, 'A'))::text <> '')
			then coalesce(obter_idade_imc_nom(b.nr_atendimento,a.dt_nascimento,b.dt_entrada,'EDAD'),-1)
			else 999
		end as edad,
		case
			when (obter_idade(a.dt_nascimento, b.dt_entrada, 'A') IS NOT NULL AND (obter_idade(a.dt_nascimento, b.dt_entrada, 'A'))::text <> '')
			then obter_idade_imc_nom(b.nr_atendimento,a.dt_nascimento,b.dt_entrada,'CLAVEEDAD')
			else 9
		end as claveedad,
		CASE WHEN a.ie_sexo='M' THEN  1  WHEN a.ie_sexo='F' THEN  2  ELSE 9 END  sexo,
		r.cd_der_lesiones afiliacion,
		case
			when r.cd_der_lesiones = 12
			then CASE WHEN coalesce(o.nr_doc_convenio::text, '') = '' THEN 0  ELSE 1 END
		end as gratuidad,
		case
			when (o.nr_doc_convenio IS NOT NULL AND o.nr_doc_convenio::text <> '')
			then elimina_caracteres_especiais(o.nr_doc_convenio)
		end as numeroafiliacion,
		CASE WHEN r.cd_der_lesiones=11 THEN elimina_caracteres_especiais(a.nr_spss)  ELSE 0 END  as digitoverificador,
		CASE WHEN s.sg_pais='MEX' THEN 0  ELSE 1 END  resideextranjero,
		case
			when s.sg_pais not in ('MEX')
			then upper(s.nm_pais)
			else '-1'
		end as paisresidencia,
		CASE WHEN c.ie_brasileiro='S' THEN  e.cd_entidade   ELSE 97 END  entidadresidencia,
		CASE WHEN c.ie_brasileiro='S' THEN  k.cd_cat_municipio   ELSE 997 END  municipioresidencia,
		CASE WHEN c.ie_brasileiro='S' THEN  f.nr_seq_localizacao_mx  ELSE 9997 END   as localidadresidencia,
		case
			when s.sg_pais = 'MEX'
			then f.cd_cep
			else '99999'
		end as codigopostal,
		case
			when s.sg_pais not in ('MEX')
			then 1
			else 0
		end as seignoracp,
		'99' tipovialidad,
		'SIN INFORMACIÓN' nombrevialidad,
		substr(elimina_caractere_especial(f.nr_endereco),1,5) numeroexteriornumerico,
		CASE WHEN c.ie_brasileiro='S' THEN  n.cd_tipo_asen  ELSE 97 END  tipoasentamiento,
		coalesce(elimina_caractere_especial(substr(n.nm_assentamento,1,100)), 'SIN INFORMACIÓN') nombreasentamiento,
		coalesce(f.nr_telefone, 9999999999) as telefono,
		(CASE WHEN (compl_mx.qt_tempo_ambulancia IS NOT NULL AND compl_mx.qt_tempo_ambulancia::text <> '') THEN 1 ELSE 0 END) atencionprehospitalaria,
		to_char(pkg_date_utils.get_datetime(clock_timestamp(),trunc(clock_timestamp()) + (compl_mx.qt_tempo_ambulancia/1440)), 'hh24:mi') tiempotraslado,
		to_char(b.dt_entrada, 'dd/mm/yyyy') fechaingreso,
		to_char(b.dt_entrada, 'hh:mm') horaingreso,
		CASE WHEN obter_classificacao_risco_mx(b.nr_atendimento, b.cd_estabelecimento)='S' THEN 1 WHEN obter_classificacao_risco_mx(b.nr_atendimento, b.cd_estabelecimento)='N' THEN 2 END  tipourgencia,
		CASE WHEN coalesce(b.ie_clinica,9)=1 THEN 2 WHEN coalesce(b.ie_clinica,9)=2 THEN 9 WHEN coalesce(b.ie_clinica,9)=3 THEN 3 WHEN coalesce(b.ie_clinica,9)=4 THEN 4 WHEN coalesce(b.ie_clinica,9)=5 THEN 9 WHEN coalesce(b.ie_clinica,9)=6 THEN 1 WHEN coalesce(b.ie_clinica,9)=7 THEN 1 WHEN coalesce(b.ie_clinica,9)=8 THEN 1 WHEN coalesce(b.ie_clinica,9)=9 THEN 9 END  motivoatencion,
		pl.ie_tipo_cama tipocama,
		CASE WHEN coalesce(z.cd_clues::text, '') = '' THEN 0  ELSE 1 END  trasladotransitorio,
		coalesce(z.cd_clues, '-1') cluestraslado,
		to_char(b.dt_alta, 'dd/mm/yyyy') fechaalta,
		to_char(b.dt_alta, 'hh24:mi') horaalta,
		to_char(b.dt_alta, 'mm') as mesestadistico,
		obter_dias_entre_alta_vig_nom(b.nr_atendimento) as tiempoestancia,
		ma.ie_motivo_alta_mx as altapor,
		CASE WHEN ma.ie_motivo_alta_mx='8' THEN  z.cd_clues  ELSE '-1' END  cluesreferido,
		CASE WHEN a.ie_sexo='F' THEN (SELECT max(t.ie_pac_gravida) from atendimento_gravidez t where t.nr_atendimento = b.nr_atendimento)   ELSE null END  as mujerfertil,
		elimina_caractere_especial(substr(upper((select max(cd.ds_doenca_cid)
							from diagnostico_doenca dd, cid_doenca cd
							where dd.nr_atendimento = b.nr_atendimento
							and dd.cd_doenca = cd.cd_doenca_cid
							and dd.ie_classificacao_doenca = 'P'
							and dd.cd_doenca in ('O00','O01','O02','O03','O04','O05','O06','O07','O08','O80','O81','O82','O83','O84'))),1, 255)) descripcionafeccionprincipal,
		(select max(cd.cd_doenca_cid)
		from diagnostico_doenca dd, cid_doenca cd
		where dd.nr_atendimento = b.nr_atendimento
		and dd.cd_doenca = cd.cd_doenca_cid
		and dd.ie_classificacao_doenca = 'P'
		and dd.cd_doenca in ('O00','O01','O02','O03','O04','O05','O06','O07','O08','O80','O81','O82','O83','O84')) codigocieafeccionprincipal,
		upper(obter_comorbilidade(b.nr_atendimento,'c')) as comorbilidad,
		trim((select max(dd.cd_doenca) from diagnostico_doenca dd where dd.nr_atendimento = b.nr_atendimento and dd.ie_classificacao_doenca = 'S' and dd.cd_doenca in ('O00','O01','O02','O03','O04','O05','O06','O07'))) afeccionreseleccionada,
		upper(obter_procedimentos_mx(b.nr_atendimento)) as procedimiento,
		upper(obter_medicamentos_mx(b.nr_atendimento)) as medicamento,
		obter_infeccoes_mexico(b.nr_atendimento) as planiras,
		obter_protocolos_mx(b.nr_atendimento) as planedas,
		obter_quantidade_soro_presc(b.nr_atendimento) as numerosobres,
		0 as ministeriopublico,
		case
			when ma.ie_motivo_alta_mx = 3
			then (to_char(w.dt_obito, 'yy')||substr(w.nr_declaracao,1,7))
			else '0'
		end as foliocertificadodefuncion,
		upper(coalesce(x.cd_curp, 'XXXX999999XXXXXX99')) as curpresponsable,
		upper(yy.ds_given_name) nombreresponsable,
		upper(yy.ds_component_name_1) primerapellidoresponsable,
		upper(yy.ds_component_name_2) segundoapellidoresponsable,
		coalesce(lpad(coalesce(x.ds_codigo_prof, m.nr_crm),8,0),0) cedulaprofesional,
		b.dt_entrada dt_entrada,
		a.cd_pessoa_fisica cd_pessoa_fisica,
		x.cd_pessoa_fisica cd_pessoa_fisica_medico,
		b.nr_atendimento nr_atendimento
	FROM cat_clues z, table(pkg_name_utils.search_names_legacy('', 'main')) yy, table(pkg_name_utils.search_names_legacy('', 'main')) y, pessoa_fisica x, declaracao_obito w, categoria_convenio p, atend_categoria_convenio o, medico m, estabelecimento j, pessoa_juridica i, pessoa_fisica a
LEFT OUTER JOIN nacionalidade c ON (a.cd_nacionalidade = c.cd_nacionalidade)
, compl_pessoa_fisica f
LEFT OUTER JOIN cat_tipo_assentamento n ON (f.nr_seq_assentamento_mx = n.nr_sequencia)
LEFT OUTER JOIN pais s ON (f.nr_seq_pais = s.nr_sequencia)
, sus_municipio d
LEFT OUTER JOIN cat_entidade e ON (d.nr_seq_entidade_mx = e.nr_sequencia)
LEFT OUTER JOIN cat_municipio k ON (d.nr_seq_municipio_mx = k.nr_sequencia)
, convenio q
LEFT OUTER JOIN cat_derechohabiencia r ON (q.cd_tipo_convenio_mx = r.nr_sequencia)
, motivo_alta ma
LEFT OUTER JOIN atendimento_paciente b ON (ma.cd_motivo_alta = b.cd_motivo_alta_medica)
LEFT OUTER JOIN pa_local pl ON (b.nr_seq_local_pa = pl.nr_sequencia)
LEFT OUTER JOIN complemento_mexico compl_mx ON (b.nr_atendimento = compl_mx.nr_atendimento)
WHERE b.cd_pessoa_fisica 		= a.cd_pessoa_fisica and y.nr_sequencia 			= a.nr_seq_person_name  and 1  -- dados do paciente
  and d.cd_municipio_ibge 		= f.cd_municipio_ibge    and j.cd_cgc		 	= i.cd_cgc  -- clues
  and b.cd_estabelecimento 		= j.cd_estabelecimento and b.nr_atendimento 		= o.nr_atendimento and o.cd_convenio 			= p.cd_convenio and o.cd_categoria 			= p.cd_categoria and q.cd_convenio 			= p.cd_convenio   and a.cd_pessoa_fisica 		= f.cd_pessoa_fisica and x.cd_pessoa_fisica 		= b.cd_medico_resp and m.cd_pessoa_fisica 		= x.cd_pessoa_fisica and b.nr_atendimento 		= w.nr_atendimento and i.cd_internacional 		= z.cd_clues   and b.ie_tipo_atendimento 		= 3 and (b.dt_alta IS NOT NULL AND b.dt_alta::text <> '')  and x.nr_seq_person_name		= yy.nr_sequencia and b.dt_entrada between dt_inicio_p and dt_final_p;

BEGIN

	delete from w_geracao_guia
	where nm_usuario = nm_usuario_p;

	commit;

	for r_c01 in C01 loop
	begin

		qt_linha_w := C01%ROWCOUNT;

		CALL grava_campos_nom(qt_linha_w, 'clues', r_c01.clues, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'folio', r_c01.folio, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'tipo_reg', r_c01.tipo_reg, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'curppaciente', r_c01.curppaciente, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'nombre', r_c01.nombre, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'primerapellido', r_c01.primerapellido, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'segundoapellido', r_c01.segundoapellido, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'fechanacimiento', r_c01.fechanacimiento, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'nacioextranjero', r_c01.nacioextranjero, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'paisorigen', r_c01.paisorigen, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'entidadnacimiento', r_c01.entidadnacimiento, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'edad', r_c01.edad, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'claveedad', r_c01.claveedad, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'sexo', r_c01.sexo, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'afiliacion', r_c01.afiliacion, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'gratuidad', r_c01.gratuidad, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'numeroafiliacion', r_c01.numeroafiliacion, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'digitoverificador', r_c01.digitoverificador, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'resideextranjero', r_c01.resideextranjero, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'paisresidencia', r_c01.paisresidencia, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'entidadresidencia', r_c01.entidadresidencia, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'municipioresidencia', r_c01.municipioresidencia, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'localidadresidencia', r_c01.localidadresidencia, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'codigopostal', r_c01.codigopostal, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'seignoracp', r_c01.seignoracp, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'tipovialidad', r_c01.tipovialidad, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'nombrevialidad', r_c01.nombrevialidad, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'numeroexteriornumerico', r_c01.numeroexteriornumerico, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'tipoasentamiento', r_c01.tipoasentamiento, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'nombreasentamiento', r_c01.nombreasentamiento, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'telefono', r_c01.telefono, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'atencionprehospitalaria', r_c01.atencionprehospitalaria, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'tiempotraslado', r_c01.tiempotraslado, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'fechaingreso', r_c01.fechaingreso, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'horaingreso', r_c01.horaingreso, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'tipourgencia', r_c01.tipourgencia, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'motivoatencion', r_c01.motivoatencion, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'tipocama', r_c01.tipocama, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'trasladotransitorio', r_c01.trasladotransitorio, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'cluestraslado', r_c01.cluestraslado, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'fechaalta', r_c01.fechaalta, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'horaalta', r_c01.horaalta, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'mesestadistico', r_c01.mesestadistico, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'tiempoestancia', r_c01.tiempoestancia, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'altapor', r_c01.altapor, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'cluesreferido', r_c01.cluesreferido, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'mujerfertil', r_c01.mujerfertil, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'descripcionafeccionprincipal', r_c01.descripcionafeccionprincipal, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'codigocieafeccionprincipal', r_c01.codigocieafeccionprincipal, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'comorbilidad', r_c01.comorbilidad, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'afeccionreseleccionada', r_c01.afeccionreseleccionada, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'procedimiento', r_c01.procedimiento, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'medicamento', r_c01.medicamento, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'planiras', r_c01.planiras, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'planedas', r_c01.planedas, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'numerosobres', r_c01.numerosobres, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'ministeriopublico', r_c01.ministeriopublico, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'foliocertificadodefuncion', r_c01.foliocertificadodefuncion, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'curpresponsable', r_c01.curpresponsable, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'nombreresponsable', r_c01.nombreresponsable, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'primerapellidoresponsable', r_c01.primerapellidoresponsable, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'segundoapellidoresponsable', r_c01.segundoapellidoresponsable, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'cedulaprofesional', r_c01.cedulaprofesional, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'dt_entrada', r_c01.dt_entrada, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'cd_pessoa_fisica', r_c01.cd_pessoa_fisica, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'cd_pessoa_fisica_medico', r_c01.cd_pessoa_fisica_medico, 44, nm_usuario_p);
		CALL grava_campos_nom(qt_linha_w, 'nr_atendimento', r_c01.nr_atendimento, 44, nm_usuario_p);

	end;

   END LOOP;

 end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_guia_urgencias_nom ( dt_inicio_p timestamp, dt_final_p timestamp, nm_usuario_p text) FROM PUBLIC;

