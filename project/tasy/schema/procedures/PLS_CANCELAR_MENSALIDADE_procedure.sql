-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_cancelar_mensalidade ( nr_seq_mensalidade_p bigint, dt_cancelamento_p timestamp, nm_usuario_p text, ie_opcao_p text, nr_seq_motivo_canc_p bigint, ie_commit_p text, ds_observacao_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


/*	ie_opcao_p
	'E'	= Estorno		*/
nr_seq_mensalidade_seg_w	bigint;
nr_seq_mensalidade_est_w	bigint;
nr_seq_mens_seg_novo_w		bigint;
nr_seq_lote_w			bigint;
nr_seq_nota_fiscal_w		bigint;
ds_retorno_w			varchar(255)	:= '';
nr_nota_fiscal_w		varchar(255);
dt_contabilizacao_w		timestamp;
ie_mes_fechado_w		varchar(1);
nr_seq_regra_ctb_mensal_deb_w	bigint;
nr_seq_regra_ctb_mensal_w	bigint;
cd_conta_estorno_deb_w		varchar(20);
cd_historico_estorno_deb_w	varchar(20);
cd_conta_estorno_rec_w		varchar(20);
cd_historico_estorno_rec_w	varchar(20);
qt_cobranca_w			bigint;
nr_seq_cobranca_w		bigint;
vl_pro_rata_dia_w		double precision;
vl_antecipacao_w		double precision;
qt_beneficiarios_w		bigint;
vl_pos_estab_w			double precision;
vl_pre_estab_w			double precision;
vl_adicionais_w			double precision;
vl_coparticipacao_w		double precision;
vl_outros_w			double precision;
vl_mensalidade_w		double precision;
ie_canc_titulo_cobr_escrit_w	varchar(1);
ie_considerar_dt_liq_cancel_w	varchar(1)	:= 'N';
ds_geracao_w			varchar(255);
ie_cancelamento_w		varchar(1);
ie_situacao_nota_w		varchar(1);
nm_pagador_w			varchar(255);
nr_seq_pagador_w		pls_contrato_pagador.nr_sequencia%type;
nr_seq_nota_credito_w		bigint;
nr_seq_item_mens_w		pls_mensalidade_trib.nr_seq_item_mens%type;
dt_geracao_w			pls_lote_mensalidade.dt_geracao%type;
ie_varios_titulos_w		pls_mensalidade.ie_varios_titulos%type;
nr_parcela_w			pls_mensalidade_segurado.nr_parcela%type;
nr_seq_segurado_w		pls_mensalidade_segurado.nr_seq_segurado%type;
qt_registro_w			integer;
nr_seq_mens_item_conta_w	pls_mensalidade_item_conta.nr_sequencia%type;
nr_seq_lancamento_mens_w	pls_lancamento_mensalidade.nr_sequencia%type;
ie_concil_contab_w		pls_visible_false.ie_Concil_contab%type;
tb_nr_seq_conta_copartic_w pls_util_cta_pck.t_number_table;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		nr_parcela,
		nr_seq_segurado
	from	pls_mensalidade_segurado
	where	nr_seq_mensalidade	= nr_seq_mensalidade_p;

C02 CURSOR FOR
	SELECT	nr_sequencia nr_seq_item
	from	pls_mensalidade_seg_item
	where	nr_seq_mensalidade_seg = nr_seq_mensalidade_seg_w;

C03 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_mensalidade_seg_adic
	where	nr_seq_mensalidade_seg = nr_seq_mensalidade_seg_w;

C04 CURSOR(	nr_seq_mensalidade_pc	pls_mensalidade.nr_sequencia%type,
		nr_seq_item_pc		pls_mensalidade_seg_item.nr_sequencia%type)FOR
	SELECT	nr_sequencia
	from	pls_mensalidade_trib
	where	nr_seq_mensalidade	= nr_seq_mensalidade_pc
	and	nr_seq_item_mens 	= nr_seq_item_pc;

C05 CURSOR(	nr_seq_mensalidade_pc	pls_mensalidade.nr_sequencia%type) FOR
	SELECT	b.nr_titulo
	from	pls_mensalidade	a,
		titulo_receber	b
	where	b.nr_seq_mensalidade	= a.nr_sequencia
	and	a.nr_sequencia		= nr_seq_mensalidade_pc;

C06 CURSOR(	nr_seq_mens_item_pc	pls_mensalidade_seg_item.nr_sequencia%type) FOR
	SELECT	nr_seq_pos_proc,
		nr_seq_pos_mat
	from	pls_mensalidade_item_conta
	where	nr_seq_item = nr_seq_mens_item_pc
	and	((nr_seq_pos_proc IS NOT NULL AND nr_seq_pos_proc::text <> '') or (nr_seq_pos_mat IS NOT NULL AND nr_seq_pos_mat::text <> ''));

C07 CURSOR(nr_seq_mens_item_pc	pls_mensalidade_seg_item.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_mens_item_conta
        from	pls_mensalidade_item_conta a
        where	nr_seq_item	=	nr_seq_mens_item_pc;

C08 CURSOR(nr_seq_mens_item_conta_pc	pls_mensalidade_item_conta.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia	nr_seq_mens_item_conta_aprop
        from	pls_mens_item_conta_aprop a
        where	nr_seq_mens_item_conta	= nr_seq_mens_item_conta_pc;

C09 CURSOR FOR
	SELECT	a.nr_seq_conta_copartic
			from	pls_mensalidade_item_conta  a,
				pls_mensalidade_seg_item  b,
				pls_mensalidade_segurado  c
			where	b.nr_sequencia  = a.nr_seq_item
			and	c.nr_sequencia  = b.nr_seq_mensalidade_seg
			and	b.ie_tipo_item  = '3'
			and (  SELECT	coalesce(sum(x.vl_item),0)
				from	pls_mensalidade_item_conta x
				where	x.nr_seq_conta_copartic = a.nr_seq_conta_copartic
				and	x.nr_seq_item <> b.nr_sequencia) = 0
			and	c.nr_seq_mensalidade  = nr_seq_mensalidade_p;

BEGIN

begin
select	coalesce(ie_considerar_dt_liq_cancel,'N')
into STRICT	ie_considerar_dt_liq_cancel_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;
exception
when others then
	ie_considerar_dt_liq_cancel_w	:= 'N';
end;

select	b.nr_sequencia,
	coalesce(b.dt_contabilizacao, b.dt_mesano_referencia),
	a.ie_cancelamento,
	substr(obter_nome_pf_pj(c.cd_pessoa_fisica, c.cd_cgc),1,255),
	c.nr_sequencia,
	b.dt_geracao,
	coalesce(a.ie_varios_titulos,'N')
into STRICT	nr_seq_lote_w,
	dt_contabilizacao_w,
	ie_cancelamento_w,
	nm_pagador_w,
	nr_seq_pagador_w,
	dt_geracao_w,
	ie_varios_titulos_w
from	pls_mensalidade		a,
	pls_contrato_pagador	c,
	pls_lote_mensalidade	b
where	a.nr_seq_pagador	= c.nr_sequencia
and	a.nr_seq_lote		= b.nr_sequencia
and	a.nr_sequencia		= nr_seq_mensalidade_p;

CALL pls_verificar_baixa_titulo(nr_seq_mensalidade_p, ie_varios_titulos_w);

if (trunc(dt_cancelamento_p,'dd') < trunc(dt_geracao_w,'dd')) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(450777); --A data de cancelamento informada e inferior a data de geracao da mensalidade. Favor verifique.
end if;

/* Deve fazer update antes de chamar as rotinas de cancelamento do titulo */

update	pls_mensalidade
set	ie_cancelamento = 'C',
	dt_cancelamento	= dt_cancelamento_p,
	nr_seq_motivo_canc	= nr_seq_motivo_canc_p,
	ds_observacao	= substr(CASE WHEN ds_observacao = NULL THEN null  ELSE ds_observacao || chr(13) || chr(10) END  || ds_observacao_p,1,255),
	ds_obs_cancelamento = ds_observacao_p,
	nm_usuario_cancelamento	= nm_usuario_p
where	nr_sequencia	= nr_seq_mensalidade_p;


open C09;
loop
	fetch C09 bulk collect into tb_nr_seq_conta_copartic_w limit 1000;
	exit when tb_nr_seq_conta_copartic_w.count = 0;
	forall i in tb_nr_seq_conta_copartic_w.first..tb_nr_seq_conta_copartic_w.last
		update	pls_conta_coparticipacao t
		set	t.ie_iniciou_cobranca	= 0,
				t.dt_atualizacao	= clock_timestamp(),
				t.nm_usuario		= nm_usuario_p
		where	t.ie_iniciou_cobranca	= 1
		and	t.nr_sequencia		= tb_nr_seq_conta_copartic_w(i);	
end loop;
close C09;

if (coalesce(ie_cancelamento_w::text, '') = '') then /* Lepinski - OS 470195 - Estavam conseguindo cancelar mensalidades ja canceladas e estornadas, com essa restricao isso nao vai mais acontecer */
	
	select	coalesce(max(ie_concil_contab), 'N')
	into STRICT	ie_concil_contab_w
	from 	pls_visible_false;

	if (ie_concil_contab_w = 'S') then
		CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_cancel_mens(nr_seq_mensalidade_p, dt_cancelamento_p, cd_estabelecimento_p, nm_usuario_p);
	end if;

	if (ie_opcao_p = 'E') then
		ie_canc_titulo_cobr_escrit_w := obter_param_usuario(1205, 18, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_canc_titulo_cobr_escrit_w);

		if (ie_canc_titulo_cobr_escrit_w = 'N') then
			select	count(*)
			into STRICT	qt_cobranca_w
			from	pls_mensalidade		a,
				titulo_receber		b,
				titulo_receber_cobr	c
			where	b.nr_seq_mensalidade	= a.nr_sequencia
			and	c.nr_titulo		= b.nr_titulo
			and	a.nr_sequencia		= nr_seq_mensalidade_p;

			if (qt_cobranca_w <> 0) then
				select	max(d.nr_sequencia)
				into STRICT	nr_seq_cobranca_w
				from	pls_mensalidade		a,
					titulo_receber		b,
					titulo_receber_cobr	c,
					cobranca_escritural	d
				where	b.nr_seq_mensalidade	= a.nr_sequencia
				and	c.nr_titulo		= b.nr_titulo
				and	c.nr_seq_cobranca	= d.nr_sequencia
				and	a.nr_sequencia		= nr_seq_mensalidade_p;

				CALL wheb_mensagem_pck.exibir_mensagem_abort( 191651, 'NM_PAGADOR=' || nm_pagador_w || ';NR_SEQ_COBRANCA=' || nr_seq_cobranca_w );
				/*Esta mensalidade nao pode ser cancelada, o titulo esta na cobranca escritural nr_seq_cobranca_w. Favor verifique! */

			end if;
		end if;

		update	pls_mensalidade
		set	nr_seq_cobranca	 = NULL
		where	nr_sequencia	= nr_seq_mensalidade_p
		and	(nr_seq_cobranca IS NOT NULL AND nr_seq_cobranca::text <> '');
	end if;

	select	pls_obter_se_mes_fechado(dt_contabilizacao_w,'T',cd_estabelecimento_p)
	into STRICT	ie_mes_fechado_w
	;

	if (ie_mes_fechado_w = 'S') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( 191649, null);
		/* Nao e possivel realizar esta operacao pois o mes de competencia ou a contabilidade do mes esta fechada! */

	end if;

	select	max(nr_sequencia),
		max(somente_numero(nr_nota_fiscal))
	into STRICT	nr_seq_nota_fiscal_w,
		nr_nota_fiscal_w
	from	nota_fiscal
	where	nr_seq_mensalidade	= nr_seq_mensalidade_p;

	 /* Se for gerado somente titulo, sem nota fiscal */

	if	((ie_opcao_p = 'E') and (coalesce(nr_seq_nota_fiscal_w::text, '') = '')) then
		for r_c05_w in C05(nr_seq_mensalidade_p) loop
			begin
			CALL cancelar_titulo_receber(r_c05_w.nr_titulo,nm_usuario_p,'N',clock_timestamp());

			if (ie_considerar_dt_liq_cancel_w = 'S') then
				update	titulo_receber
				set	dt_liquidacao	= dt_cancelamento_p
				where	nr_titulo	= r_c05_w.nr_titulo;
			end if;
			end;
		end loop; --C05
	end if;

	if (nr_seq_nota_fiscal_w IS NOT NULL AND nr_seq_nota_fiscal_w::text <> '') then
		select	ie_situacao
		into STRICT	ie_situacao_nota_w
		from	nota_fiscal
		where	nr_sequencia	= nr_seq_nota_fiscal_w;

		/*aaschlote 20/09/2012 OS - 489725 - Estornar ou consistir a nota caso nao esteja estornada pelo acompanhamento*/

		if (ie_situacao_nota_w <> '3') then
			ds_retorno_w := consiste_estornar_nota_fiscal(nr_seq_nota_fiscal_w, 'N', 'S', ds_retorno_w, nm_usuario_p, 'N');

			if (ds_retorno_w <> '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort( 191650, 'NR_NOTA_FISCAL=' || nr_nota_fiscal_w || ';' || 'DS_RETORNO=' || ds_retorno_w );
				/* Nota nr_nota_fiscal_w nao pode ser cancelada!  ds_retorno_w */

			else
				CALL estornar_nota_fiscal(nr_seq_nota_fiscal_w, nm_usuario_p);

				if (ie_considerar_dt_liq_cancel_w = 'S') then
					for r_c05_w in C05(nr_seq_mensalidade_p) loop
						begin
						if (ie_considerar_dt_liq_cancel_w = 'S') then
							update	titulo_receber
							set	dt_liquidacao	= dt_cancelamento_p
							where	nr_titulo	= r_c05_w.nr_titulo;
						end if;
						end;
					end loop; --C05
				end if;
			end if;
		end if;
	end if;

	select	nextval('pls_mensalidade_seq')
	into STRICT	nr_seq_mensalidade_est_w
	;

	insert	into	pls_mensalidade(nr_sequencia,
		dt_atualizacao,
		nm_usuario,
		dt_atualizacao_nrec,
		nm_usuario_nrec,
		nr_seq_pagador,
		dt_referencia,
		vl_mensalidade,
		nr_seq_lote,
		ds_observacao,
		dt_vencimento,
		nr_seq_contrato,
		nr_parcela,
		ie_cancelamento,
		dt_cancelamento,
		nm_usuario_cancelamento,
		nr_seq_forma_cobranca,
		ie_apresentacao,
		ie_tipo_formacao_preco,
		ie_nota_titulo,
		nr_seq_compl_pf_tel_adic,
		nr_seq_pagador_fin,
		qt_beneficiarios,
		nr_seq_conta_banco,
		ie_endereco_boleto,
		nr_seq_compl_pj,
		nr_seq_tipo_compl_adic,
		nr_seq_conta_banco_deb_aut)
	(SELECT	nr_seq_mensalidade_est_w,
		clock_timestamp(),
		nm_usuario_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_seq_pagador,
		dt_referencia,
		CASE WHEN ie_opcao_p='E' THEN (vl_mensalidade * -1)  ELSE vl_mensalidade END ,
		nr_seq_lote,
		ds_observacao,
		dt_vencimento,
		nr_seq_contrato,
		nr_parcela,
		CASE WHEN ie_opcao_p='E' THEN 'E'  ELSE '' END ,
		dt_cancelamento_p,
		nm_usuario_p,
		nr_seq_forma_cobranca,
		ie_apresentacao,
		ie_tipo_formacao_preco,
		ie_nota_titulo,
		nr_seq_compl_pf_tel_adic,
		nr_seq_pagador_fin,
		qt_beneficiarios,
		nr_seq_conta_banco,
		ie_endereco_boleto,
		nr_seq_compl_pj,
		nr_seq_tipo_compl_adic,
		nr_seq_conta_banco_deb_aut
	from	pls_mensalidade
	where	nr_sequencia	= nr_seq_mensalidade_p);

	open c01;
	loop
	fetch c01 into
		nr_seq_mensalidade_seg_w,
		nr_parcela_w,
		nr_seq_segurado_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */

		if (nr_parcela_w = 1) then
			update	pls_segurado
			set	ie_mensalidade_proporcional  = NULL
			where	nr_sequencia	= nr_seq_segurado_w;
		end if;

		delete	from	pls_repasse_mens_item a
		where	exists (SELECT	1
				from	pls_repasse_mens	x
				where	a.nr_seq_repasse	= x.nr_sequencia
				and	x.nr_seq_mens_seg	= nr_seq_mensalidade_seg_w);

		delete	from	pls_repasse_mens
		where	nr_seq_mens_seg = nr_seq_mensalidade_seg_w
		and	coalesce(nr_seq_repasse::text, '') = '';

		update	pls_conta_coparticipacao
		set	nr_seq_mensalidade_seg		 = NULL,
			ie_status_mensalidade 		= 'L',
			vl_copartic_mens		 = NULL,
			nr_seq_regra_limite_copartic 	 = NULL,
			dt_atualizacao			= clock_timestamp(),
			nm_usuario			= nm_usuario_p
		where	nr_seq_mensalidade_seg	= nr_seq_mensalidade_seg_w;

		update	pls_segurado_carteira
		set	nr_seq_mensalidade_seg	 = NULL,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_mensalidade_seg	= nr_seq_mensalidade_seg_w;

		update	pls_segurado_cart_ant
		set	nr_seq_mensalidade_seg	 = NULL,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_mensalidade_seg	= nr_seq_mensalidade_seg_w;
		
		update	pls_conta_pos_estabelecido
		set	nr_seq_mensalidade_seg		 = NULL,
			nr_seq_regra_limite_mens 	 = NULL,
			dt_atualizacao			= clock_timestamp(),
			nm_usuario			= nm_usuario_p
		where	nr_seq_mensalidade_seg		= nr_seq_mensalidade_seg_w;

		update	pls_conta_co
		set	nr_seq_mensalidade_seg		 = NULL,
			nr_seq_regra_limite_mens 	 = NULL,
			dt_atualizacao			= clock_timestamp(),
			nm_usuario			= nm_usuario_p
		where	nr_seq_mensalidade_seg		= nr_seq_mensalidade_seg_w;

		update	pls_mensalidade_critica
		set	nm_usuario_liberacao	= nm_usuario_p,
			dt_liberacao		= clock_timestamp(),
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p
		where	nr_seq_mensalidade_seg	= nr_seq_mensalidade_seg_w;

		update	pls_conta_val_atend
		set	nr_seq_mensalidade_seg  = NULL
		where	nr_seq_mensalidade_seg = nr_seq_mensalidade_seg_w;

		select	nextval('pls_mensalidade_segurado_seq')
		into STRICT	nr_seq_mens_seg_novo_w
		;

		insert	into	pls_mensalidade_segurado(nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_seq_segurado,
			vl_mensalidade,
			nr_seq_mensalidade,
			qt_idade,
			dt_mesano_referencia,
			nr_parcela,
			nr_seq_contrato,
			nr_parcela_contrato,
			nr_seq_intercambio,
			nr_seq_reajuste,
			nr_seq_segurado_preco,
			nr_seq_plano,
			dt_inicio_cobertura,
			dt_fim_cobertura)
		(SELECT	nr_seq_mens_seg_novo_w,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_segurado,
			CASE WHEN ie_opcao_p='E' THEN (vl_mensalidade * -1)  ELSE vl_mensalidade END ,
			nr_seq_mensalidade_est_w,
			qt_idade,
			dt_mesano_referencia,
			nr_parcela,
			nr_seq_contrato,
			nr_parcela_contrato,
			nr_seq_intercambio,
			nr_seq_reajuste,
			nr_seq_segurado_preco,
			nr_seq_plano,
			dt_inicio_cobertura,
			dt_fim_cobertura
		from	pls_mensalidade_segurado
		where	nr_sequencia = nr_seq_mensalidade_seg_w);

		update	pls_mensalidade_seg_item
		set	nr_seq_seg_preco_origem  = NULL
		where	nr_seq_mensalidade_seg = nr_seq_mensalidade_seg_w;

		delete from pls_segurado_mensalidade
		where	nr_seq_mens_seg_gerado = nr_seq_mensalidade_seg_w
		and	coalesce(nr_seq_item_mensalidade::text, '') = '';

		for r_c02_w in C02 loop
			begin
			for r_c06_w in c06(r_c02_w.nr_seq_item) loop
				begin
				if (r_c06_w.nr_seq_pos_proc IS NOT NULL AND r_c06_w.nr_seq_pos_proc::text <> '') then
					update	pls_conta_pos_proc
					set	ie_status_faturamento 		= 'L',
						nr_seq_regra_limite_mens 	 = NULL,
						nm_usuario			= nm_usuario_p,
						dt_atualizacao 			= clock_timestamp()
					where	nr_sequencia 			= r_c06_w.nr_seq_pos_proc;
				elsif (r_c06_w.nr_seq_pos_mat IS NOT NULL AND r_c06_w.nr_seq_pos_mat::text <> '') then
					update	pls_conta_pos_mat
					set	ie_status_faturamento 		= 'L',
						nr_seq_regra_limite_mens 	 = NULL,
						nm_usuario			= nm_usuario_p,
						dt_atualizacao 			= clock_timestamp()
					where	nr_sequencia 			= r_c06_w.nr_seq_pos_mat;
				end if;
				end;
			end loop;

			update	pls_mensalidade_sca
			set	nr_seq_segurado_preco  = NULL
			where	nr_seq_item_mens = r_c02_w.nr_seq_item;

			update	pls_segurado_mensalidade
			set	nr_seq_item_mensalidade	 = NULL,
				ie_situacao		= 'A',
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p
			where	nr_seq_item_mensalidade	= r_c02_w.nr_seq_item;

			update	pls_segurado_agravo_parc
			set	nr_seq_mensalidade_item	 = NULL,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p
			where	nr_seq_mensalidade_item	= r_c02_w.nr_seq_item;

			if (ie_opcao_p = 'E') then
				select	coalesce(max(nr_seq_regra_ctb_mensal_deb),0),
					coalesce(max(nr_seq_regra_ctb_mensal),0),
					max(nr_seq_nota_credito),
					max(nr_seq_lancamento_mens)
				into STRICT	nr_seq_regra_ctb_mensal_deb_w,
					nr_seq_regra_ctb_mensal_w,
					nr_seq_nota_credito_w,
					nr_seq_lancamento_mens_w
				from	pls_mensalidade_seg_item
				where	nr_sequencia	= r_c02_w.nr_seq_item;

				if (nr_seq_regra_ctb_mensal_deb_w <> 0) then
					select	cd_conta_estorno,
						cd_historico_estorno
					into STRICT	cd_conta_estorno_deb_w,
						cd_historico_estorno_deb_w
					from	pls_regra_ctb_mensal
					where	nr_sequencia = nr_seq_regra_ctb_mensal_deb_w;
				end if;

				if (nr_seq_regra_ctb_mensal_w <> 0) then
					select	cd_conta_estorno,
						cd_historico_estorno
					into STRICT	cd_conta_estorno_rec_w,
						cd_historico_estorno_rec_w
					from	pls_regra_ctb_mensal
					where	nr_sequencia = nr_seq_regra_ctb_mensal_w;
				end if;
			end if;

			select	nextval('pls_mensalidade_seg_item_seq')
			into STRICT	nr_seq_item_mens_w
			;

			insert	into	pls_mensalidade_seg_item(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_mensalidade_seg,
				ie_tipo_item,
				vl_item,
				nr_seq_preco,
				nr_seq_reajuste,
				nr_seq_protocolo,
				nr_seq_conta,
				ds_observacao,
				cd_conta_rec,
				cd_conta_deb,
				cd_historico,
				ie_tipo_mensalidade,
				vl_pro_rata_dia,
				vl_antecipacao,
				nr_parcela_sca,
				nr_seq_tipo_lanc,
				nr_seq_vinculo_sca,
				nr_seq_bonificacao_vinculo,
				nr_seq_seg_preco_origem,
				dt_retroativa,
				nr_seq_plano,
				dt_antecipacao,
				dt_antecipacao_baixa,
				qt_dias_pro_rata_dia,
				qt_dias_antecipacao,
				nr_seq_item_cancel,
				nr_seq_nota_credito,
				nr_seq_carteira_seg,
				nr_seq_amortizacao,
				vl_taxa_boleto,
				vl_sca_embutido,
				nr_seq_mensalidade,
				vl_bonificacao_embutido,
				vl_ato_cooperado,
				vl_ato_auxiliar,
				vl_ato_nao_cooperado,
				nr_seq_lote_reaj_seg,
				ds_mensagem_reajuste,
				cd_historico_rev_antec_baixa,
				ie_rescisao_proporcional,
				vl_ato_cooperado_pro_rata,
				vl_ato_cooperado_antec,
				vl_ato_auxiliar_pro_rata,
				vl_ato_auxiliar_antec,
				vl_ato_nao_coop_pro_rata,
				vl_ato_nao_coop_antec,
				nr_seq_processo_copartic,
				nr_seq_regra_acrescimo,
				nr_seq_tipo_acrescimo,
				dt_inicio_cobertura,
				dt_fim_cobertura,
				nr_seq_lancamento_mens,
				nr_seq_lote,
				ie_valor_apropriado)
			(SELECT	nr_seq_item_mens_w,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_mens_seg_novo_w,
				ie_tipo_item,
				CASE WHEN ie_opcao_p='E' THEN (vl_item * -1)  ELSE vl_item END ,
				nr_seq_preco,
				nr_seq_reajuste,
				nr_seq_protocolo,
				nr_seq_conta,
				ds_observacao,
				CASE WHEN ie_opcao_p='E' THEN cd_conta_estorno_rec_w  ELSE null END ,
				CASE WHEN ie_opcao_p='E' THEN cd_conta_estorno_deb_w  ELSE null END ,
				CASE WHEN ie_opcao_p='E' THEN cd_historico_estorno_rec_w  ELSE null END ,
				ie_tipo_mensalidade,
				CASE WHEN ie_opcao_p='E' THEN (vl_pro_rata_dia *-1)  ELSE vl_pro_rata_dia END ,
				CASE WHEN ie_opcao_p='E' THEN (vl_antecipacao *-1)  ELSE vl_antecipacao END ,
				nr_parcela_sca,
				nr_seq_tipo_lanc,
				nr_seq_vinculo_sca,
				nr_seq_bonificacao_vinculo,
				nr_seq_seg_preco_origem,
				dt_retroativa,
				nr_seq_plano,
				dt_antecipacao,
				dt_antecipacao_baixa,
				qt_dias_pro_rata_dia,
				qt_dias_antecipacao,
				nr_sequencia,
				nr_seq_nota_credito,
				nr_seq_carteira_seg,
				nr_seq_amortizacao,
				vl_taxa_boleto *-1,
				vl_sca_embutido *-1,
				nr_seq_mensalidade,
				vl_bonificacao_embutido *-1,
				vl_ato_cooperado *-1,
				vl_ato_auxiliar *-1,
				vl_ato_nao_cooperado *-1,
				nr_seq_lote_reaj_seg,
				ds_mensagem_reajuste,
				cd_historico_rev_antec_baixa,
				ie_rescisao_proporcional,
				vl_ato_cooperado_pro_rata *-1,
				vl_ato_cooperado_antec *-1,
				vl_ato_auxiliar_pro_rata *-1,
				vl_ato_auxiliar_antec *-1,
				vl_ato_nao_coop_pro_rata *-1,
				vl_ato_nao_coop_antec *-1,
				nr_seq_processo_copartic,
				nr_seq_regra_acrescimo,
				nr_seq_tipo_acrescimo,
				dt_inicio_cobertura,
				dt_fim_cobertura,
				nr_seq_lancamento_mens,
				nr_seq_lote,
				ie_valor_apropriado
			from	pls_mensalidade_seg_item
			where	nr_sequencia = r_c02_w.nr_seq_item);

			if (nr_seq_nota_credito_w IS NOT NULL AND nr_seq_nota_credito_w::text <> '') then
				CALL atualizar_saldo_nota_credito(nr_seq_nota_credito_w,nm_usuario_p);
			end if;
			
			if (nr_seq_lancamento_mens_w IS NOT NULL AND nr_seq_lancamento_mens_w::text <> '') then
				CALL pls_atualizar_saldo_lanc_prog(nr_seq_lancamento_mens_w, 'N');
			end if;

			for r_c04_w in C04(nr_seq_mensalidade_p,r_c02_w.nr_seq_item) loop
				begin
				insert	into	pls_mensalidade_trib(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					cd_tributo,
					tx_tributo,
					vl_tributo,
					vl_base_calculo,
					vl_trib_nao_retido,
					vl_base_nao_retido,
					vl_trib_adic,
					vl_base_adic,
					nr_seq_mensalidade,
					nr_seq_item_mens,
					ie_retencao)
				(SELECT	nextval('pls_mensalidade_trib_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					cd_tributo,
					tx_tributo,
					CASE WHEN ie_opcao_p='E' THEN (vl_tributo * -1)  ELSE vl_tributo END ,
					CASE WHEN ie_opcao_p='E' THEN (vl_base_calculo * -1)  ELSE vl_base_calculo END ,
					CASE WHEN ie_opcao_p='E' THEN (vl_trib_nao_retido * -1)  ELSE vl_trib_nao_retido END ,
					CASE WHEN ie_opcao_p='E' THEN (vl_base_nao_retido * -1)  ELSE vl_base_nao_retido END ,
					CASE WHEN ie_opcao_p='E' THEN (vl_trib_adic * -1)  ELSE vl_trib_adic END ,
					CASE WHEN ie_opcao_p='E' THEN (vl_base_adic * -1)  ELSE vl_base_adic END ,
					nr_seq_mensalidade_est_w,
					nr_seq_item_mens_w,
					ie_retencao
				from	pls_mensalidade_trib
				where	nr_sequencia = r_c04_w.nr_sequencia);
				end;
			end loop; --C04
			for r_c07_w in c07(r_c02_w.nr_seq_item) loop
				select	nextval('pls_mensalidade_item_conta_seq')
				into STRICT	nr_seq_mens_item_conta_w
				;

				insert	into	pls_mensalidade_item_conta(nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_item,
					nr_seq_conta_copartic,
					nr_seq_conta_pos_estab,
					vl_item,
					vl_ato_cooperado,
					vl_ato_auxiliar,
					vl_ato_nao_cooperado,
					nr_seq_conta_co,
					nr_seq_pos_proc,
					nr_seq_pos_mat)
				(SELECT	nr_seq_mens_item_conta_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_item_mens_w,
					nr_seq_conta_copartic,
					nr_seq_conta_pos_estab,
					vl_item * -1,
					vl_ato_cooperado * -1,
					vl_ato_auxiliar * -1,
					vl_ato_nao_cooperado * -1,
					nr_seq_conta_co,
					nr_seq_pos_proc,
					nr_seq_pos_mat
				from	pls_mensalidade_item_conta
				where	nr_sequencia = r_c07_w.nr_seq_mens_item_conta);

				for r_c08_w in c08(r_c07_w.nr_seq_mens_item_conta) loop
					insert	into	pls_mens_item_conta_aprop(nr_sequencia,
						nr_seq_mens_item_conta,
						nr_seq_centro_apropriacao,
						vl_apropriacao,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec)
					(SELECT	nextval('pls_mens_item_conta_aprop_seq'),
						nr_seq_mens_item_conta_w,
						nr_seq_centro_apropriacao,
						vl_apropriacao * -1,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p
					from	pls_mens_item_conta_aprop
					where	nr_sequencia = r_c08_w.nr_seq_mens_item_conta_aprop);
				end loop; -- C08
			end loop; -- C07
			
			insert into pls_mens_seg_item_aprop(nr_sequencia,
				nr_seq_item,
				nr_seq_centro_apropriacao,
				vl_apropriacao,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				vl_pro_rata_dia,
				vl_antecipacao)
			(SELECT	nextval('pls_mens_seg_item_aprop_seq'),
				nr_seq_item_mens_w,
				nr_seq_centro_apropriacao,
				vl_apropriacao * -1,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				vl_pro_rata_dia * -1,
				vl_antecipacao * -1
			from	pls_mens_seg_item_aprop
			where	nr_seq_item	= r_c02_w.nr_seq_item);

			end;
		end loop; --C02
		for r_c03_w in C03 loop
			begin
			insert	into	pls_mensalidade_seg_adic(nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				nr_seq_mensalidade_seg,
				nr_seq_tipo_lanc,
				vl_adicional,
				nr_seq_trans_financ,
				ds_observacao)
			(SELECT	nextval('pls_mensalidade_seg_adic_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				nr_seq_mens_seg_novo_w,
				nr_seq_tipo_lanc,
				CASE WHEN ie_opcao_p='E' THEN (vl_adicional * -1)  ELSE vl_adicional END ,
				nr_seq_trans_financ,
				null
			from	pls_mensalidade_seg_adic
			where	nr_sequencia = r_c03_w.nr_sequencia);
			end;
		end loop; --C03
	end loop;
	close c01;

	/* Francisco - 12/02/2010 - Desvincular a mensalidade da amortizacao */

	update	pls_pagador_amortizacao
	set	nr_seq_mensalidade	 = NULL
	where	nr_seq_mensalidade	= nr_seq_mensalidade_p;

	select	sum(a.vl_pro_rata_dia),
		sum(a.vl_antecipacao),
		sum(a.qt_beneficiarios),
		sum(a.vl_pos_estabelecido),
		sum(a.vl_pre_estabelecido),
		sum(a.vl_adicionais),
		sum(a.vl_coparticipacao),
		sum(a.vl_outros),
		sum(a.vl_mensalidade)
	into STRICT	vl_pro_rata_dia_w,
		vl_antecipacao_w,
		qt_beneficiarios_w,
		vl_pos_estab_w,
		vl_pre_estab_w,
		vl_adicionais_w,
		vl_coparticipacao_w,
		vl_outros_w,
		vl_mensalidade_w
	from	pls_mensalidade		a
	where	a.nr_sequencia	= nr_seq_mensalidade_p;

	update	pls_lote_mensalidade
	set	vl_pro_rata_dia		= coalesce(vl_pro_rata_dia,0) - coalesce(vl_pro_rata_dia_w,0),
		vl_antecipacao		= coalesce(vl_antecipacao,0) - coalesce(vl_antecipacao_w,0),
		qt_beneficiario_lote	= coalesce(qt_beneficiario_lote,0) - coalesce(qt_beneficiarios_w,0),
		vl_pos_estabelecido	= coalesce(vl_pos_estabelecido,0) - coalesce(vl_pos_estab_w,0),
		vl_pre_estabelecido	= coalesce(vl_pre_estabelecido,0) - coalesce(vl_pre_estab_w,0),
		vl_adicionais		= coalesce(vl_adicionais,0) - coalesce(vl_adicionais_w,0),
		vl_coparticipacao	= coalesce(vl_coparticipacao,0) - coalesce(vl_coparticipacao_w,0),
		vl_outros		= coalesce(vl_outros,0) - coalesce(vl_outros_w,0),
		vl_lote			= coalesce(vl_lote,0) - coalesce(vl_mensalidade_w,0),
		qt_pagadores_lote	= coalesce(qt_pagadores_lote,0) - 1
	where	nr_sequencia		= nr_seq_lote_w;

	/* Gravar historico da mensalidade referente a geracao do lote de desconto em folha */

	CALL pls_gravar_historico_mens(nr_seq_mensalidade_p,'C','N',cd_estabelecimento_p, nm_usuario_p);

	/* Atualizar as contas contabeis do estorno */

	ds_geracao_w := pls_atualizar_contas_receita(null, nr_seq_mensalidade_est_w, nm_usuario_p, cd_estabelecimento_p, 'N', ds_geracao_w);

	/*Gerar valores de ato cooperado na nova mensalidade*/

	CALL pls_gerar_valor_ato_cooperado(nr_seq_mensalidade_est_w,null);

	update	pls_pagador_quitacao_anual
	set	nr_seq_mensalidade	 = NULL
	where	nr_seq_mensalidade	= nr_seq_mensalidade_p;

	--Verificar se existe mensalidade gerada e nao cancelada para o pagador
	select	count(1)
	into STRICT	qt_registro_w
	from	titulo_receber a,
		pls_mensalidade b
	where	b.nr_sequencia		= a.nr_seq_mensalidade
	and	b.nr_seq_pagador	= nr_seq_pagador_w
	and	coalesce(b.ie_cancelamento::text, '') = '';

	if (qt_registro_w = 0) then
		update	pls_contrato_pagador
		set	ie_primeira_mensalidade_gerada = 'N'
		where	nr_sequencia	= nr_seq_pagador_w;
	end if;
end if;

if (coalesce(ie_commit_p, 'S') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_cancelar_mensalidade ( nr_seq_mensalidade_p bigint, dt_cancelamento_p timestamp, nm_usuario_p text, ie_opcao_p text, nr_seq_motivo_canc_p bigint, ie_commit_p text, ds_observacao_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

