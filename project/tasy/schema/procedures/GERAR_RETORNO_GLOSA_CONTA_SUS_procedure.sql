-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_retorno_glosa_conta_sus ( nr_seq_ret_item_p bigint, nm_usuario_p text, ie_opcao_p text, ie_tipo_valor_p bigint, ie_procedimento_p text, ie_honorario_p text, ie_taxa_p text, ie_diaria_p text, ie_material_p text, ie_medicamento_p text, ie_extra_p text, ie_complexidade_p text, cd_motivo_glosa_p bigint, ie_tipo_complex_p text) AS $body$
DECLARE

 
nr_sequencia_w			bigint;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
vl_procedimento_w			double precision;
vl_guia_w			double precision;
qt_glosa_w			double precision;
nr_interno_conta_w		bigint;
qt_procedimento_w		double precision;
qt_material_w			double precision;
vl_glosa_w			double precision;
vl_glosado_w			double precision;
vl_glosa_final_w			double precision := 0;
pr_glosado_w			real;
cd_setor_atendimento_w		integer;
ie_emite_conta_w			varchar(3);
nr_seq_glosa_w			bigint;
cd_item_convenio_w		varchar(20);
cd_autorizacao_w			varchar(20);
ie_atualizar_motivo_glosa_w		varchar(255);
ie_complexidade_nivel_w		bigint;
ie_complexidade_conta_w		varchar(255);
ie_complexidade_proced_w		varchar(255);

c01 CURSOR FOR 
SELECT	a.nr_sequencia, 
	a.cd_procedimento, 
	a.ie_origem_proced, 
	a.vl_procedimento, 
	a.qt_procedimento, 
	a.cd_procedimento_convenio 
from	procedimento b, 
	sus_estrutura_procedimento_v d, 
	sus_procedimento f, 
	procedimento_paciente a 
where	a.nr_interno_conta 	= nr_interno_conta_w 
and	a.cd_procedimento 	= b.cd_procedimento 
and	a.ie_origem_proced 	= b.ie_origem_proced 
and	f.ie_origem_proced		= b.ie_origem_proced 
and	f.cd_procedimento		= b.cd_procedimento 
and	f.cd_procedimento 		= d.cd_procedimento 
and	f.ie_origem_proced 	= d.ie_origem_proced 
and	coalesce(a.nr_doc_convenio, 'Não Informada') = coalesce(cd_autorizacao_w, 'Não Informada') 
and 	(((obter_classif_material_proced(null, a.cd_procedimento, a.ie_origem_proced)	= '1' and obter_se_pasta_honorario(a.ie_responsavel_credito) = 'N') and ie_procedimento_p = 'S') 
or 	((obter_classif_material_proced(null, a.cd_procedimento, a.ie_origem_proced)	= '1' and obter_se_pasta_honorario(a.ie_responsavel_credito) = 'S') and ie_honorario_p = 'S') 
or (obter_classif_material_proced(null, a.cd_procedimento, a.ie_origem_proced)	= '2' and ie_taxa_p = 'S') 
or (obter_classif_material_proced(null, a.cd_procedimento, a.ie_origem_proced)	= '3' and ie_diaria_p = 'S')) 
and	coalesce(a.cd_motivo_exc_conta::text, '') = '' 
and	obter_tipo_atendimento((SELECT nr_atendimento from conta_paciente where nr_interno_conta = nr_interno_conta_w))	= 1; -- somente tipo internado 
BEGIN 
 
ie_atualizar_motivo_glosa_w := obter_param_usuario(27, 92, null, nm_usuario_p, 0, ie_atualizar_motivo_glosa_w);
 
select	a.nr_interno_conta, 
	a.cd_autorizacao 
into STRICT	nr_interno_conta_w, 
	cd_autorizacao_w 
from	convenio_retorno b, 
	convenio_retorno_item a 
where	a.nr_seq_retorno	= b.nr_sequencia 
and	a.nr_sequencia		= nr_seq_ret_item_p;
 
select	max((CASE WHEN h.ie_complexidade='AC' THEN 5 WHEN h.ie_complexidade='MC' THEN 4 WHEN h.ie_complexidade='AB' THEN 3 WHEN h.ie_complexidade='N' THEN 2  ELSE 1 END )::numeric ) 
into STRICT	ie_complexidade_nivel_w 
from	procedimento b, 
	sus_estrutura_procedimento_v d, 
	sus_procedimento f, 
	procedimento_paciente a, 
	conta_paciente e, 
	sus_aih_unif h 
where	a.nr_interno_conta 	= nr_interno_conta_w 
and	e.nr_interno_conta	= h.nr_interno_conta 
and	e.nr_interno_conta	= a.nr_interno_conta 
and	a.cd_procedimento 	= b.cd_procedimento 
and	a.ie_origem_proced 	= b.ie_origem_proced 
and	f.ie_origem_proced		= b.ie_origem_proced 
and	f.cd_procedimento		= b.cd_procedimento 
and	f.cd_procedimento 		= d.cd_procedimento 
and	f.ie_origem_proced 	= d.ie_origem_proced 
and	coalesce(a.nr_doc_convenio, 'Não Informada') = coalesce(cd_autorizacao_w, 'Não Informada') 
and 	(((obter_classif_material_proced(null, a.cd_procedimento, a.ie_origem_proced)	= '1' and obter_se_pasta_honorario(a.ie_responsavel_credito) = 'N') and ie_procedimento_p = 'S') 
or 	((obter_classif_material_proced(null, a.cd_procedimento, a.ie_origem_proced)	= '1' and obter_se_pasta_honorario(a.ie_responsavel_credito) = 'S') and ie_honorario_p = 'S') 
or (obter_classif_material_proced(null, a.cd_procedimento, a.ie_origem_proced)		= '2' and ie_taxa_p = 'S') 
or (obter_classif_material_proced(null, a.cd_procedimento, a.ie_origem_proced)		= '3' and ie_diaria_p = 'S')) 
and	obter_tipo_atendimento((SELECT nr_atendimento from conta_paciente where nr_interno_conta = nr_interno_conta_w)) = 1 
and	coalesce(a.cd_motivo_exc_conta::text, '') = '' 
and	not exists (select 1 from convenio_retorno_glosa x where x.nr_seq_propaci = a.nr_sequencia);
 
if (ie_complexidade_nivel_w = 5) then 
	ie_complexidade_conta_w	:= 'AC';
elsif (ie_complexidade_nivel_w = 4) then 
	ie_complexidade_conta_w	:= 'MC';	
elsif (ie_complexidade_nivel_w = 3) then 
	ie_complexidade_conta_w	:= 'AB';	
elsif (ie_complexidade_nivel_w = 2) then 
	ie_complexidade_conta_w	:= 'N';
end if;	
	 
if	((ie_complexidade_conta_w = ie_complexidade_p) or (coalesce(ie_complexidade_p::text, '') = '') or (ie_tipo_complex_p = 'P')) then 
 
	select	coalesce(sum(vl_guia),0) 
	into STRICT	vl_guia_w 
	from	conta_paciente_guia 
	where	nr_interno_conta = nr_interno_conta_w 
	and	coalesce(cd_autorizacao, 'Não Informada') = coalesce(cd_autorizacao_w, 'Não Informada');
 
	select	dividir_sem_round(vl_glosado + vl_amenor, (vl_guia_w)) pr_glosado, 
		(coalesce(vl_glosado,0) + coalesce(vl_amenor,0)) 
	into STRICT	pr_glosado_w, 
		vl_glosado_w 
	from	convenio_retorno_item 
	where	nr_sequencia = nr_seq_ret_item_p 
	and	coalesce(cd_autorizacao, 'Não Informada') = coalesce(cd_autorizacao_w, 'Não Informada');
 
	begin 
	open c01;
	loop 
	fetch c01 into 
		nr_sequencia_w, 
		cd_procedimento_w, 
		ie_origem_proced_w, 
		vl_procedimento_w, 
		qt_procedimento_w, 
		cd_item_convenio_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
 
		if (ie_tipo_complex_p = 'P') then 
 
			select	sus_obter_complexidade_proced(cd_procedimento_w,ie_origem_proced_w, 'C') 
			into STRICT	ie_complexidade_proced_w 
			;
 
		end if;
 
		if (ie_tipo_complex_p <> 'P') or (ie_complexidade_proced_w = ie_complexidade_p) then 
 
			vl_glosa_w	:= 0;
			if (ie_opcao_p	= 'G') then 
				vl_glosa_w	:= vl_procedimento_w * pr_glosado_w;
			end if;
				vl_glosa_final_w := vl_glosa_final_w + vl_glosa_w;
				select	nextval('convenio_retorno_glosa_seq') 
			into STRICT	nr_seq_glosa_w 
			;
				insert	into convenio_retorno_glosa(nr_sequencia, 
				nr_seq_propaci, 
				nr_seq_ret_item, 
				vl_glosa, 
				dt_atualizacao, 
				nm_usuario, 
				cd_procedimento, 
				ie_origem_proced, 
				ie_atualizacao, 
				qt_glosa, 
				qt_cobrada, 
				vl_cobrado, 
				cd_item_convenio, 
				cd_motivo_glosa) 
			values (nr_seq_glosa_w, 
				nr_sequencia_w, 
				nr_seq_ret_item_p, 
				vl_glosa_w, 
				clock_timestamp(), 
				nm_usuario_p, 
				cd_procedimento_w, 
				ie_origem_proced_W, 
				'N', 
				CASE WHEN ie_tipo_valor_p=0 THEN  0 WHEN ie_tipo_valor_p=1 THEN  qt_procedimento_w  ELSE 0 END , 
				qt_procedimento_w, 
				vl_procedimento_w, 
				cd_item_convenio_w, 
				CASE WHEN ie_atualizar_motivo_glosa_w='S' THEN cd_motivo_glosa_p  ELSE null END );
 
		end if;
 
	end loop;
	close c01;
	end;
 
	if (vl_glosado_w > vl_glosa_final_w) and (ie_opcao_p	= 'G') then 
 
		update	convenio_retorno_glosa 
		set	vl_glosa	= vl_glosa_w + (vl_glosado_w - vl_glosa_final_W) 
		where	nr_sequencia	= nr_seq_glosa_w 
		and	nr_seq_ret_item	= nr_seq_ret_item_p;
 
	elsif (vl_glosado_w < vl_glosa_final_w) and (ie_opcao_p	= 'G') then 
 
		update	convenio_retorno_glosa 
		set	vl_glosa	= vl_glosa_w - (vl_glosa_final_W - vl_glosado_w) 
		where	nr_sequencia	= nr_seq_glosa_w 
		and	nr_seq_ret_item	= nr_seq_ret_item_p;
 
	end if;
 
	commit;
	 
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_retorno_glosa_conta_sus ( nr_seq_ret_item_p bigint, nm_usuario_p text, ie_opcao_p text, ie_tipo_valor_p bigint, ie_procedimento_p text, ie_honorario_p text, ie_taxa_p text, ie_diaria_p text, ie_material_p text, ie_medicamento_p text, ie_extra_p text, ie_complexidade_p text, cd_motivo_glosa_p bigint, ie_tipo_complex_p text) FROM PUBLIC;

