-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_trib_conf_venc_nf_contr ( nr_sequencia_nf_p bigint, nr_sequencia_regra_p bigint, vl_nota_p bigint, qt_item_nf_p bigint, qt_conversao_p bigint) AS $body$
DECLARE


cd_tributo_w				smallint;
vl_tributo_w				double precision;
pr_tributo_w				double precision;
cd_beneficiario_w			varchar(14);
cd_cond_pagto_w				integer;
cd_conta_financ_w			bigint;
nr_seq_trans_reg_w			bigint;
nr_seq_trans_baixa_w			bigint;
ie_corpo_item_w				varchar(1);
ie_regra_trib_w				varchar(2);
ie_pagar_receber_w			varchar(2);
cd_darf_contrato_w			varchar(10);
cd_conta_financ_ww			bigint;
nm_usuario_w				varchar(15);
cd_estabelecimento_w			smallint;
cd_cgc_w				varchar(20);
cd_pessoa_fisica_w			varchar(10);
cd_beneficiario_trib_w			varchar(20);
pr_aliquota_w				double precision;
vl_minimo_base_w			double precision;
vl_minimo_tributo_w			double precision;
ie_acumulativo_w			varchar(1);
vl_teto_base_w				double precision;
vl_desc_dependente_w			double precision;
cd_darf_w				varchar(20);
dt_referencia_w				timestamp;
cd_variacao_w				varchar(2);
ie_periodicidade_w			varchar(1);
qt_existe_w				smallint;
tx_tributo_w				double precision;
vl_nota_w				double precision;
vl_liquido_w				double precision;
dt_emissao_w				timestamp;
dt_entrada_saida_w			timestamp;
ie_soma_diminui_w			varchar(01);
cd_tipo_servico_w				varchar(100);
ds_irrelavante_w				varchar(4000);

c01 CURSOR FOR
SELECT	a.cd_tributo,
	a.vl_tributo,
	a.pr_tributo,
	a.cd_beneficiario,
	a.cd_cond_pagto,
	a.cd_conta_financ,
	a.nr_seq_trans_reg,
	a.nr_seq_trans_baixa,
	a.ie_corpo_item,
	a.ie_regra_trib,
	c.ie_pagar_receber,
	a.cd_darf
from	contrato c,
	contrato_regra_pagto_trib a,
	contrato_regra_nf b
where	a.nr_seq_regra_nf	= b.nr_sequencia
and	b.nr_seq_contrato	= c.nr_sequencia
and	b.nr_sequencia		= nr_sequencia_regra_p
order by CASE WHEN a.ie_corpo_item='C' THEN  0  ELSE 1 END;


BEGIN

if (nr_sequencia_nf_p > 0) then

	select	cd_estabelecimento,
		cd_cgc,
		cd_pessoa_fisica,
		nm_usuario,
		dt_emissao,
		dt_entrada_saida,
		cd_tipo_servico
	into STRICT	cd_estabelecimento_w,
		cd_cgc_w,
		cd_pessoa_fisica_w,
		nm_usuario_w,
		dt_emissao_w,
		dt_entrada_saida_w,
		cd_tipo_servico_w
	from	nota_fiscal
	where	nr_sequencia = nr_sequencia_nf_p;

end if;	
	
if (qt_conversao_p > 0) then
	vl_nota_w := (vl_nota_p * qt_conversao_p);
else
	vl_nota_w := (vl_nota_p * qt_item_nf_p);
end if;	

open c01;
loop
fetch c01 into
	cd_tributo_w,
	vl_tributo_w,
	pr_tributo_w,
	cd_beneficiario_w,
	cd_cond_pagto_w,
	cd_conta_financ_w,
	nr_seq_trans_reg_w,
	nr_seq_trans_baixa_w,
	ie_corpo_item_w,
	ie_regra_trib_w,
	ie_pagar_receber_w,
	cd_darf_contrato_w;
EXIT WHEN NOT FOUND; /* apply on c01 */

	select	coalesce(ie_soma_diminui,'N')
	into STRICT	ie_soma_diminui_w
	from	tributo
	where	cd_tributo = cd_tributo_w;
	
	CALL atualiza_total_nota_fiscal(nr_sequencia_nf_p, nm_usuario_w);

	cd_conta_financ_ww	:= cd_conta_financ_w;

	SELECT * FROM obter_dados_trib_tit_pagar(cd_tributo_w, cd_estabelecimento_w, cd_cgc_w, cd_pessoa_fisica_w, cd_beneficiario_trib_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, dt_referencia_w, cd_variacao_w, ie_periodicidade_w, null, null, cd_tipo_servico_w, null, null, null, ds_irrelavante_w, null, 0, ds_irrelavante_w, ds_irrelavante_w, vl_tributo_w, 'N', null, null, null, null) INTO STRICT cd_beneficiario_trib_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, cd_variacao_w, ie_periodicidade_w, ds_irrelavante_w, ds_irrelavante_w, ds_irrelavante_w;
	
	if (ie_regra_trib_w = 'N') then

		if (coalesce(vl_minimo_base_w,0) <= vl_nota_w) then
	
			if (ie_corpo_item_w = 'V') then
				
				/* Verifica se existe o vencimento antes de gerar tributos */

				select	count(*)
				into STRICT	qt_existe_w
				from	nota_fiscal_venc
				where	nr_sequencia = nr_sequencia_nf_p
				and	dt_vencimento = dt_emissao_w
				and	ie_origem = 'N';
				
				if (qt_existe_w > 0) then
				
					select	count(*)
					into STRICT	qt_existe_w
					from	nota_fiscal_venc_trib
					where	nr_sequencia	= nr_sequencia_nf_p
					and	cd_tributo	= cd_tributo_w;
				
					if (qt_existe_w = 0) then

						tx_tributo_w	:= pr_tributo_w;

						if (vl_tributo_w > 0) then
							tx_tributo_w	:= dividir(vl_tributo_w * 100, vl_nota_w);
						else
							vl_tributo_w	:= dividir((vl_nota_w * tx_tributo_w), 100);
						end if;

						select	coalesce(sum(vl_liquido),0)
						into STRICT	vl_liquido_w
						from	nota_fiscal_item
						where	nr_sequencia = nr_sequencia_nf_p;
						
						insert	into nota_fiscal_venc_trib(nr_sequencia,
							dt_vencimento,
							cd_tributo,
							vl_tributo,
							dt_atualizacao,
							nm_usuario,
							vl_base_calculo,
							tx_tributo,
							vl_desc_base,
							VL_TRIB_NAO_RETIDO,
							VL_BASE_NAO_RETIDO,
							VL_TRIB_ADIC,
							VL_BASE_ADIC,
							vl_reducao,
							cd_darf,
							ie_origem)
						values (	nr_sequencia_nf_p,
							dt_emissao_w,
							cd_tributo_w,
							vl_tributo_w,
							clock_timestamp(),
							nm_usuario_w,
							vl_liquido_w,
							tx_tributo_w,
							coalesce(vl_desc_dependente_w,0),
							0,
							0,
							0,
							0,
							0,
							cd_darf_contrato_w,
							'N');
					
						update	nota_fiscal_venc
						set	vl_vencimento	= vl_vencimento + (CASE WHEN ie_soma_diminui_w='S' THEN  vl_tributo_w WHEN ie_soma_diminui_w='D' THEN  vl_tributo_w * -1  ELSE 0 END )
						where	nr_sequencia	= nr_sequencia_nf_p
						and	dt_vencimento	= dt_emissao_w;
					else
						update	nota_fiscal_venc_trib
						set	vl_base_calculo	= vl_base_calculo + vl_nota_w,
							vl_tributo		= vl_tributo + vl_tributo_w,
							tx_tributo		= dividir(vl_tributo * 100, vl_base_calculo)
						where	nr_sequencia	= nr_sequencia_nf_p
						and	cd_tributo		= cd_tributo_w;
					end if;
				
				end if;
			end if;
		end if;
	else
		if (ie_pagar_receber_w = 'P') then
			CALL gerar_tributos_fornecedor(nr_sequencia_nf_p, cd_tributo_w, NM_USUARIO_W, dt_entrada_saida_w);
		else
			CALL gerar_imposto_nf(nr_sequencia_nf_p, NM_USUARIO_W, null, cd_tributo_w);
		end if;
	end if;
end loop;
close c01;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_trib_conf_venc_nf_contr ( nr_sequencia_nf_p bigint, nr_sequencia_regra_p bigint, vl_nota_p bigint, qt_item_nf_p bigint, qt_conversao_p bigint) FROM PUBLIC;

