-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE confirmar_simulacao_neg_cr ( nr_seq_negociacao_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


ds_inconsistencia_w		varchar(255);
ie_forma_pagto_w		varchar(5);
ie_tipo_cartao_w		varchar(2);
ie_fechar_com_inconsist_w	varchar(1)	:= 'N';
vl_parcela_w			double precision;
vl_parcelas_cartao_w		double precision	:= 0;
vl_soma_parcelas_w		double precision;
vl_total_w			double precision;
qt_parcelas_cartao_w		bigint	:= 0;
nr_seq_pagador_w		bigint;
qt_registro_w			integer;
cd_moeda_padrao_w		integer;
dt_vencimento_w			timestamp;
dt_menor_parcela_cartao_w	timestamp	:= null;
dt_liberacao_w			timestamp;
dt_fechamento_w			timestamp;
nr_seq_forma_pagto_w		negociacao_cr_parcela.nr_seq_forma_pagto%type;
nr_seq_parcela_w		negociacao_cr_parcela.nr_sequencia%type;
nr_seq_pagador_neg_w		pls_contrato_pagador.nr_sequencia%type;

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.ie_forma_pagto,
		a.dt_vencimento,
		a.vl_parcela
	from	negociacao_cr_parcela a
	where	a.nr_seq_negociacao	= nr_seq_negociacao_p
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	(a.vl_parcela IS NOT NULL AND a.vl_parcela::text <> '')
	order by
		a.dt_vencimento;

/* Inconsistencias */

C02 CURSOR FOR
	SELECT	obter_valor_dominio(3404,a.ie_inconsistencia)
	from	negociacao_cr_inconsist a
	where	a.nr_seq_negociacao	= nr_seq_negociacao_p
	and	coalesce(a.dt_liberacao::text, '') = ''
	and	coalesce(ie_fechar_com_inconsist_w,'N') = 'N';


BEGIN
select	max(cd_moeda_padrao)
into STRICT	cd_moeda_padrao_w
from	parametro_contas_receber
where	cd_estabelecimento	= cd_estabelecimento_p;

if (nr_seq_negociacao_p IS NOT NULL AND nr_seq_negociacao_p::text <> '') then
	/* Consistências */

	select	count(*)
	into STRICT	qt_registro_w
	from	negociacao_cr_parcela	a
	where	a.nr_seq_negociacao	= nr_seq_negociacao_p
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	(a.vl_parcela IS NOT NULL AND a.vl_parcela::text <> '')
	and	coalesce(a.ie_forma_pagto::text, '') = '';

	if (qt_registro_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(175664,-20012);
	end if;

	select	count(*)
	into STRICT	qt_registro_w
	from	negociacao_cr_parcela a
	where	a.nr_seq_negociacao	= nr_seq_negociacao_p
	and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
	and	(a.vl_parcela IS NOT NULL AND a.vl_parcela::text <> '')
	and	coalesce(a.dt_vencimento::text, '') = '';

	if (qt_registro_w > 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(175665);
	end if;

	select	a.dt_liberacao,
		a.dt_fechamento,
		obter_valores_negociacao_cr(a.nr_sequencia,'VT'),
		a.nr_seq_pagador
	into STRICT	dt_liberacao_w,
		dt_fechamento_w,
		vl_total_w,
		nr_seq_pagador_neg_w
	from	negociacao_cr a
	where	a.nr_sequencia	= nr_seq_negociacao_p;

	select	coalesce(sum(a.vl_parcela),0)
	into STRICT	vl_soma_parcelas_w
	from	negociacao_cr_parcela a
	where	a.nr_seq_negociacao	= nr_seq_negociacao_p;

	if (vl_soma_parcelas_w <> vl_total_w) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(175667);
	end if;

	if (dt_liberacao_w IS NOT NULL AND dt_liberacao_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(175668);
	end if;

	if (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(175669);
	end if;

	/* Verificar se tem mais de uma parcela em espécie */

	select	count(*)
	into STRICT	qt_registro_w
	from	negociacao_cr_parcela
	where	ie_forma_pagto	= 'E'
	and	nr_seq_negociacao	= nr_seq_negociacao_p;

	if (qt_registro_w > 1) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(175670);
	end if;

	/* Verificar se há inconsistências para a negociação */

	ie_fechar_com_inconsist_w := obter_param_usuario(5514, 3, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_fechar_com_inconsist_w);

	open C02;
	loop
	fetch C02 into
		ds_inconsistencia_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		CALL wheb_mensagem_pck.exibir_mensagem_abort(175671,'DS_INCONSIST=' || ds_inconsistencia_w);
		end;
	end loop;
	close C02;

	open C01;
	loop
	fetch C01 into
		nr_seq_parcela_w,
		ie_forma_pagto_w,
		dt_vencimento_w,
		vl_parcela_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		/* Boleto */

		if (ie_forma_pagto_w = 'B') then
			insert into negociacao_cr_boleto(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				dt_vencimento,
				vl_parcela,
				nr_seq_negociacao,
				nr_seq_parcela)
			values (nextval('negociacao_cr_boleto_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				dt_vencimento_w,
				vl_parcela_w,
				nr_seq_negociacao_p,
				nr_seq_parcela_w);
		/* Cartão */

		elsif (ie_forma_pagto_w = 'CA') then
			if (coalesce(dt_menor_parcela_cartao_w::text, '') = '') then
				dt_menor_parcela_cartao_w	:= dt_vencimento_w;
			end if;
			qt_parcelas_cartao_w	:= qt_parcelas_cartao_w + 1;
			vl_parcelas_cartao_w	:= vl_parcelas_cartao_w + vl_parcela_w;
		/* Cheque */

		elsif (ie_forma_pagto_w = 'CH') then
			insert into negociacao_cr_cheque(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				dt_vencimento,
				vl_cheque,
				nr_seq_negociacao)
			values (nextval('negociacao_cr_cheque_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				dt_vencimento_w,
				vl_parcela_w,
				nr_seq_negociacao_p);
		/* Débito em conta */

		elsif (ie_forma_pagto_w = 'D') then
			insert into negociacao_cr_deb_cc(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				dt_debito,
				vl_debito,
				nr_seq_negociacao)
			values (nextval('negociacao_cr_deb_cc_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				dt_vencimento_w,
				vl_parcela_w,
				nr_seq_negociacao_p);
		/* Espécie */

		elsif (ie_forma_pagto_w = 'E') then
			insert into negociacao_cr_especie(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				cd_moeda,
				vl_especie,
				nr_seq_negociacao)
			values (nextval('negociacao_cr_especie_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				cd_moeda_padrao_w,
				vl_parcela_w,
				nr_seq_negociacao_p);
		/* Mensalidade*/

		elsif (ie_forma_pagto_w = 'M') then
			if (nr_seq_pagador_neg_w IS NOT NULL AND nr_seq_pagador_neg_w::text <> '') then
				nr_seq_pagador_w	:= nr_seq_pagador_neg_w;
			else
				select	max(c.nr_seq_pagador)
				into STRICT	nr_seq_pagador_w
				from	pls_mensalidade c,
					titulo_receber b,
					titulo_rec_negociado a
				where	a.nr_titulo	= b.nr_titulo
				and	b.nr_seq_mensalidade	= c.nr_sequencia
				and	a.nr_seq_negociacao	= nr_seq_negociacao_p;
			end if;

			if (coalesce(nr_seq_pagador_w::text, '') = '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(175673);
			end if;

			/* Verificar se o faturamento já não foi gerado para o mês em questão */

			select	count(*)
			into STRICT	qt_registro_w
			from	pls_mensalidade a
			where	coalesce(a.dt_cancelamento::text, '') = ''
			and	a.nr_seq_pagador	= nr_seq_pagador_w
			and	a.dt_referencia		between trunc(dt_vencimento_w,'month') and fim_dia(last_day(dt_vencimento_w));

			if (qt_registro_w > 0) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(175674,'DT_VENC=' || trunc(dt_vencimento_w,'month'));
			end if;

			insert into negociacao_cr_pls_mens(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				dt_mes_referencia,
				vl_mensalidade,
				nr_seq_negociacao,
				nr_seq_pagador)
			values (nextval('negociacao_cr_pls_mens_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				trunc(dt_vencimento_w,'month'),
				vl_parcela_w,
				nr_seq_negociacao_p,
				nr_seq_pagador_w);
		/* Depósito identificado */

		elsif (ie_forma_pagto_w = 'DI') then
			insert into negociacao_cr_dep_ident(nr_sequencia,
				nm_usuario,
				dt_atualizacao,
				nm_usuario_nrec,
				dt_atualizacao_nrec,
				vl_deposito,
				dt_vencimento,
				nr_seq_negociacao)
			values (nextval('negociacao_cr_dep_ident_seq'),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				vl_parcela_w,
				dt_vencimento_w,
				nr_seq_negociacao_p);
		end if;
		end;
	end loop;
	close C01;

	if (qt_parcelas_cartao_w > 0) then
		if (dt_menor_parcela_cartao_w > trunc(clock_timestamp(),'dd')) or (qt_parcelas_cartao_w > 1) then
			ie_tipo_cartao_w	:= 'C';
		else
			ie_tipo_cartao_w	:= 'D';
		end if;

		select	coalesce(max(ie_tipo_cartao),ie_tipo_cartao_w),
			max(a.nr_seq_forma_pagto)
		into STRICT	ie_tipo_cartao_w,
			nr_seq_forma_pagto_w
		from	negociacao_cr_parcela a
		where	a.nr_seq_negociacao	= nr_seq_negociacao_p
		and	(a.dt_liberacao IS NOT NULL AND a.dt_liberacao::text <> '')
		and	(a.vl_parcela IS NOT NULL AND a.vl_parcela::text <> '')
		and	coalesce(ie_tipo_cartao,'X') <> 'X';

		insert into negociacao_cr_cartao(nr_sequencia,
			nm_usuario,
			dt_atualizacao,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nr_seq_negociacao,
			ie_tipo_cartao,
			vl_transacao,
			qt_parcela,
			nr_seq_forma_pagto)
		values (nextval('negociacao_cr_cartao_seq'),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nr_seq_negociacao_p,
			ie_tipo_cartao_w,
			vl_parcelas_cartao_w,
			qt_parcelas_cartao_w,
			nr_seq_forma_pagto_w);
	end if;

	update	negociacao_cr
	set	dt_liberacao	= clock_timestamp(),
		nm_usuario	= nm_usuario_p,
		dt_atualizacao	= clock_timestamp(),
		ie_status	= 'A'
	where	nr_sequencia	= nr_seq_negociacao_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE confirmar_simulacao_neg_cr ( nr_seq_negociacao_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

