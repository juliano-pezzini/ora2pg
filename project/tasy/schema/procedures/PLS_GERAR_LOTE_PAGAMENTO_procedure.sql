-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_pagamento ( nr_seq_lote_p pls_lote_pagamento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Gerar os valores de producao medica e de eventos financeiros para os prestadores
conforme as regras de periodo da pasta  Cadastros ou regra de lote complementar
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
	Geracao do lote de eventos por parametro
-------------------------------------------------------------------------------------------------------------------

Referencias:
	OPS - Pagamentos de Producao Medica
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
cd_conta_contabil_w		conta_contabil.cd_conta_contabil%type;
ds_predecessor_w		varchar(250);
ie_tipo_item_w			varchar(250);
ie_forma_retencao_inss_ir_w	varchar(10);
ie_forma_valor_w		varchar(3);
ie_saldo_negativo_w		varchar(3);
ie_natureza_w			varchar(1);
ie_complementar_w		varchar(1);
ie_situacao_periodo_w		varchar(1);
ie_periodo_mes_w		varchar(1);
ie_gerar_lote_movimento_w	varchar(1);
vl_evento_w			double precision := 0;
vl_pagamento_w			double precision := 0;
vl_glosa_w			double precision := 0;
qt_lote_retencao_w		bigint;
nr_seq_lote_ret_trib_w		bigint;
nr_seq_evento_trib_lm_w		bigint;
qt_registros_w			bigint := 0;
nr_seq_conta_resumo_w		bigint;
nr_seq_prestador_pgto_w		bigint;
nr_seq_evento_w			bigint;
nr_seq_pagamento_w		bigint;
nr_seq_periodo_w		bigint;
nr_seq_item_w			bigint;
nr_seq_conta_w			bigint;
cd_estabelecimento_w		bigint;
qt_registro_w			bigint := 0;
nr_tit_rec_vinculado_w		bigint;
nr_tit_pagar_vinculado_w	bigint;
nr_adiant_pago_w		bigint;
nr_seq_lote_evento_w		bigint;
nr_seq_regra_w			bigint;
nr_seq_prestador_regra_w	bigint;
nr_seq_evento_regra_fixo_w	bigint;
nr_seq_evento_movimento_w	bigint;
nr_prior_desc_w			bigint;
qt_complementar_w		integer := 0;
qt_lote_evento_pag_w		integer;
dt_mes_competencia_w		timestamp;
dt_inicio_comp_w		timestamp;
dt_fim_comp_w			timestamp;
nr_seq_evento_movto_w		pls_evento_movimento.nr_sequencia%type;
ie_lote_retencao_w		varchar(10);
nr_seq_glosa_proc_w		pls_rec_glosa_proc.nr_sequencia%type;
nr_seq_glosa_mat_w		pls_rec_glosa_mat.nr_sequencia%type;
nr_seq_conta_tb_w		pls_util_cta_pck.t_number_table;
nr_seq_conta_resumo_tb_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_rec_proc_tb_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_rec_mat_tb_w	pls_util_cta_pck.t_number_table;
nr_seq_conta_rec_resumo_tb_w	pls_util_cta_pck.t_number_table;
index_cm_w			integer := 0;
index_proc_w			integer := 0;
index_mat_w			integer := 0;
index_rg_w			integer := 0;
nr_seq_conta_rec_resumo_w	pls_conta_rec_resumo_item.nr_sequencia%type;
nr_seq_prestador_cta_res_w	pls_prestador.nr_sequencia%type;
ie_tipo_contratacao_w		pls_pagamento_item.ie_tipo_contratacao%type;
ie_ordem_w			bigint;
nr_seq_evento_trib_prov_w	pls_parametro_pagamento.nr_seq_evento_trib_prov%type;
ie_natureza_ww			pls_lote_ret_trib_val_dif.ie_natureza%type;
dt_ref_valid_lote_ret_w		timestamp;
dt_venc_lote_w			pls_lote_pagamento.dt_venc_lote%type;
nr_seq_lote_pgto_apropr_w	pls_lote_evento.nr_seq_lote_pgto_apropr%type;
dt_atendimento_referencia_w	pls_conta.dt_atendimento_referencia%type;
nr_seq_conta_c_w		pls_conta.nr_sequencia%type;
nm_prestador_pgto_w		pls_conta_medica_resumo.nm_prestador_pgto%type;
qt_mes_competencia_w		integer;
ie_aplicar_regra_prest_w	pls_evento.ie_aplicar_regra_prest%type;
cd_pessoa_fisica_w		pls_lote_ret_trib_prest.cd_pessoa_fisica%type;
cd_cgc_w			pls_lote_ret_trib_prest.cd_cgc%type;

c00 CURSOR FOR
	SELECT	a.nr_seq_conta,
		a.nr_seq_conta_resumo,
		a.nr_seq_evento,
		a.ie_origem
	from	w_pls_conta_pag_prod a;

C02 CURSOR FOR
	SELECT	a.nr_seq_prestador_pgto,
		a.nr_seq_evento,
		coalesce(sum(a.vl_liberado),0),
		null,
		null,
		null,
		null,
		sum(coalesce(a.vl_glosa,0)),
		null nr_seq_evento_movto,
		null nr_seq_glosa_proc,
		null nr_seq_glosa_mat,
		'CM' ie_tipo_item,
		null,
		null ie_tipo_contratacao,
		999 ie_ordem,
		null ie_natureza,
		(SELECT	coalesce(max(x.dt_atendimento_referencia),clock_timestamp())
		from	pls_conta x
		where	x.nr_sequencia = c.nr_sequencia) dt_atendimento,
		c.nr_sequencia nr_seq_conta,
		null cd_pessoa_fisica,
		null cd_cgc
	from	pls_conta_medica_resumo	a,
		pls_conta		c
	where	a.nr_seq_lote_pgto	= nr_seq_lote_p
	and	(a.nr_seq_prestador_pgto IS NOT NULL AND a.nr_seq_prestador_pgto::text <> '')
	and	c.nr_sequencia		= a.nr_seq_conta
	and	(a.nr_seq_evento IS NOT NULL AND a.nr_seq_evento::text <> '')
	and (a.ie_tipo_item <> 'I' or coalesce(a.ie_tipo_item::text, '') = '') -- ebcabral 18/10/2013 -  OS 657758 - Nao permitir entrar itens com tipo de item "Intercambio"
	and	a.ie_situacao 	= 'A'
	group by
		a.nr_seq_prestador_pgto,
		a.nr_seq_evento,
		c.nr_sequencia
	
union all

	select	b.nr_seq_prestador,
		b.nr_seq_evento,
		b.vl_movimento,
		b.nr_tit_rec_vinculado,
		b.nr_tit_pagar_vinculado,
		b.nr_adiant_pago,
		b.nr_seq_regra_fixo,
		0,
		b.nr_sequencia nr_seq_evento_movto,
		null nr_seq_glosa_proc,
		null nr_seq_glosa_mat,
		'EM' ie_tipo_item,
		null,
		b.ie_tipo_contratacao ie_tipo_contratacao,
		CASE WHEN coalesce(b.ie_tipo_contratacao::text, '') = '' THEN  999 WHEN b.ie_tipo_contratacao='CE' THEN  1 WHEN b.ie_tipo_contratacao='CA' THEN  2 WHEN b.ie_tipo_contratacao='CI' THEN  3 WHEN b.ie_tipo_contratacao='I' THEN  4 END  ie_ordem,
		null ie_natureza,
		clock_timestamp() dt_atendimento,
		null nr_seq_conta,
		null cd_pessoa_fisica,
		null cd_cgc
	from	pls_evento_movimento 	b,
		pls_lote_evento		a
	where	b.nr_seq_lote_pgto	= nr_seq_lote_p
	and	a.nr_sequencia		= b.nr_seq_lote
	and	coalesce(a.nr_seq_lote_pgto_apropr::text, '') = ''
	and	coalesce(a.nr_seq_lote_ret_trib::text, '') = ''
	and	coalesce(b.ie_cancelamento::text, '') = ''
	and	nr_seq_periodo_w = coalesce(b.nr_seq_periodo, nr_seq_periodo_w)
	and (exists (select	1
			from	pls_lote_pgto_compl x
			where	x.nr_seq_lote = b.nr_seq_lote_pgto
			and	coalesce(x.nr_seq_prestador, b.nr_seq_prestador) = b.nr_seq_prestador
			and	coalesce(x.nr_seq_evento, b.nr_seq_evento) = b.nr_seq_evento)
		or	qt_complementar_w = 0)
	and	(b.nr_seq_prestador IS NOT NULL AND b.nr_seq_prestador::text <> '')
	and	(b.nr_seq_evento IS NOT NULL AND b.nr_seq_evento::text <> '')
	and	not exists (	select	1	-- OS 492527 wcbernardino, nao duplicar os titulos de eventos
				from	pls_pagamento_prestador	b,
					pls_pagamento_item	c
				where	c.nr_seq_pagamento	= b.nr_sequencia
				and	b.nr_seq_prestador	= b.nr_seq_prestador
				and	c.nr_seq_evento		= b.nr_seq_evento
				and (c.nr_tit_pagar_origem	= b.nr_tit_pagar_vinculado or c.nr_tit_receber_origem = b.nr_tit_rec_vinculado))
	
union all

	-- criado este union que e responsavel por buscar todos os eventos que devem entrar no lote complementar

	-- e que tenha origem digitacao manual la na movimentacao
	select	b.nr_seq_prestador,
		b.nr_seq_evento,
		b.vl_movimento,
		b.nr_tit_rec_vinculado,
		b.nr_tit_pagar_vinculado,
		b.nr_adiant_pago,
		b.nr_seq_regra_fixo,
		0,
		b.nr_sequencia nr_seq_evento_movto,
		null nr_seq_glosa_proc,
		null nr_seq_glosa_mat,
		'EM' ie_tipo_item,
		null,
		b.ie_tipo_contratacao ie_tipo_contratacao,
		CASE WHEN coalesce(b.ie_tipo_contratacao::text, '') = '' THEN  999 WHEN b.ie_tipo_contratacao='CE' THEN  1 WHEN b.ie_tipo_contratacao='CA' THEN  2 WHEN b.ie_tipo_contratacao='CI' THEN  3 WHEN b.ie_tipo_contratacao='I' THEN  4 END  ie_ordem,
		null ie_natureza, 
		clock_timestamp() dt_atendimento,
		null nr_seq_conta,
		null cd_pessoa_fisica,
		null cd_cgc
	from	pls_evento_movimento 	b,
		pls_lote_evento		a,
		pls_evento		c
	where	coalesce(b.nr_seq_lote_pgto::text, '') = ''
	and	a.nr_sequencia = b.nr_seq_lote
	and	coalesce(a.nr_seq_lote_pgto_apropr::text, '') = ''
	and	coalesce(a.nr_seq_lote_ret_trib::text, '') = ''
	and	coalesce(b.ie_cancelamento::text, '') = ''
	and	nr_seq_periodo_w = coalesce(b.nr_seq_periodo, nr_seq_periodo_w)
	and	c.nr_sequencia = b.nr_seq_evento
	and	c.ie_situacao = 'A'
	and	a.ie_origem = 'M'
	and	exists (select	1
			from	pls_lote_pgto_compl x
			where	x.nr_seq_lote = nr_seq_lote_p
			and	coalesce(x.nr_seq_prestador, b.nr_seq_prestador) = b.nr_seq_prestador
			and	coalesce(x.nr_seq_evento, b.nr_seq_evento) = b.nr_seq_evento)
	and	(b.nr_seq_prestador IS NOT NULL AND b.nr_seq_prestador::text <> '')
	and	(b.nr_seq_evento IS NOT NULL AND b.nr_seq_evento::text <> '')
	and	not exists (	select	1	-- OS 492527 wcbernardino, nao duplicar os titulos de eventos
				from	pls_pagamento_prestador	b,
					pls_pagamento_item	c
				where	c.nr_seq_pagamento	= b.nr_sequencia
				and	b.nr_seq_prestador	= b.nr_seq_prestador
				and	c.nr_seq_evento		= b.nr_seq_evento
				and (c.nr_tit_pagar_origem	= b.nr_tit_pagar_vinculado or c.nr_tit_receber_origem = b.nr_tit_rec_vinculado))
	
union all

	select	(select	max(x.nr_sequencia)
		from	pls_prestador x
		where (x.cd_pessoa_fisica = b.cd_pessoa_fisica or x.cd_cgc = b.cd_cgc)
		and	x.ie_situacao = 'A'
		and	((coalesce(x.dt_exclusao::text, '') = '') or (x.dt_exclusao > clock_timestamp()))) nr_seq_prestador,
		nr_seq_evento_trib_lm_w,
		c.vl_imposto * -1,
		null,
		null,
		null,
		null,
		0,
		null nr_seq_evento_movto,
		null nr_seq_glosa_proc,
		null nr_seq_glosa_mat,
		'LR' ie_tipo_item,
		null,
		null ie_tipo_contratacao,
		999 ie_ordem,
		null ie_natureza, 
		clock_timestamp() dt_atendimento,
		null nr_seq_conta,
		b.cd_pessoa_fisica cd_pessoa_fisica,
		b.cd_cgc cd_cgc
	from	pls_lote_pagamento		d,
		pls_lote_ret_trib_valor 	c,
		pls_lote_ret_trib_prest		b,
		pls_lote_retencao_trib		a
	where	b.nr_sequencia 			= c.nr_seq_trib_prest
	and	a.nr_sequencia 			= b.nr_seq_lote
	and	a.nr_sequencia 			= d.nr_seq_lote_ret_trib
	and	d.nr_sequencia  		= nr_seq_lote_p
	and	c.ie_pago_prev			= 'V'
	and	ie_forma_retencao_inss_ir_w <> 'SE'
	and not exists (	select	1
			from	pls_lote_ret_trib_val_dif	z
			where	b.nr_sequencia			= z.nr_seq_trib_prest)
	
union all

	select	(select	max(x.nr_sequencia)
		from	pls_prestador x
		where (x.cd_pessoa_fisica = b.cd_pessoa_fisica or x.cd_cgc = b.cd_cgc)
		and	x.ie_situacao = 'A'
		and	((coalesce(x.dt_exclusao::text, '') = '') or (x.dt_exclusao > clock_timestamp()))) nr_seq_prestador,
		CASE WHEN z.ie_natureza='D' THEN  nr_seq_evento_trib_prov_w  ELSE nr_seq_evento_trib_lm_w END ,
		CASE WHEN z.ie_natureza='D' THEN  z.vl_imposto  ELSE z.vl_imposto * -1 END ,
		null,
		null,
		null,
		null,
		0,
		null nr_seq_evento_movto,
		null nr_seq_glosa_proc,
		null nr_seq_glosa_mat,
		'LR' ie_tipo_item,
		null,
		null ie_tipo_contratacao,
		999 ie_ordem,
		z.ie_natureza ie_natureza, 
		clock_timestamp() dt_atendimento,
		null nr_seq_conta,
		b.cd_pessoa_fisica cd_pessoa_fisica,
		b.cd_cgc cd_cgc
	from	pls_lote_pagamento		d,
		pls_lote_ret_trib_val_dif	z,
		pls_lote_ret_trib_prest		b,
		pls_lote_retencao_trib		a
	where	b.nr_sequencia			= z.nr_seq_trib_prest
	and	a.nr_sequencia 			= b.nr_seq_lote
	and	a.nr_sequencia 			= d.nr_seq_lote_ret_trib
	and	d.nr_sequencia  		= nr_seq_lote_p
	and	ie_forma_retencao_inss_ir_w 	= 'SE'
	
union all

	select	a.nr_seq_prestador_pgto,
		b.nr_seq_evento,
		b.vl_acatado,
		null,
		null,
		null,
		null,
		0,
		null nr_seq_evento_movto,
		b.nr_sequencia nr_seq_glosa_proc,
		null nr_seq_glosa_mat,
		'GP' ie_tipo_item,
		null,
		null ie_tipo_contratacao,
		999 ie_ordem,
		null ie_natureza, 
		clock_timestamp() dt_atendimento,
		null nr_seq_conta,
		null cd_pessoa_fisica,
		null cd_cgc
	from	pls_conta_medica_resumo	a,
		pls_rec_glosa_proc 	b,
		pls_rec_glosa_conta	c
	where	a.nr_seq_conta_proc	= b.nr_seq_conta_proc
	and	a.nr_seq_conta		= c.nr_seq_conta
	and	b.nr_seq_conta_rec	= c.nr_sequencia
	and	b.nr_seq_lote_pgto	= nr_seq_lote_p
	and	(a.nr_seq_prestador_pgto IS NOT NULL AND a.nr_seq_prestador_pgto::text <> '')
	and	(b.nr_seq_evento IS NOT NULL AND b.nr_seq_evento::text <> '')
	and	c.ie_status		!= '3'
	and	not exists (select	1
				from	pls_conta_rec_resumo_item	c
				where	c.nr_seq_proc_rec	= b.nr_sequencia)
	
union all

	select	a.nr_seq_prestador_pgto,
		b.nr_seq_evento,
		b.vl_acatado,
		null,
		null,
		null,
		null,
		0,
		null nr_seq_evento_movto,
		null nr_seq_glosa_proc,
		b.nr_sequencia nr_seq_glosa_mat,
		'GM' ie_tipo_item,
		null,
		null ie_tipo_contratacao,
		999 ie_ordem,
		null ie_natureza, 
		clock_timestamp() dt_atendimento,
		null nr_seq_conta,
		null cd_pessoa_fisica,
		null cd_cgc
	from	pls_conta_medica_resumo	a,
		pls_rec_glosa_mat 	b,
		pls_rec_glosa_conta	c
	where	a.nr_seq_conta_mat	= b.nr_seq_conta_mat
	and	a.nr_seq_conta		= c.nr_seq_conta
	and	b.nr_seq_conta_rec	= c.nr_sequencia
	and	b.nr_seq_lote_pgto	= nr_seq_lote_p
	and	(a.nr_seq_prestador_pgto IS NOT NULL AND a.nr_seq_prestador_pgto::text <> '')
	and	(b.nr_seq_evento IS NOT NULL AND b.nr_seq_evento::text <> '')
	and	c.ie_status		!= '3'
	and	not exists (select	1
				from	pls_conta_rec_resumo_item	c
				where	c.nr_seq_mat_rec	= b.nr_sequencia)
	
union all

	select	a.nr_seq_prestador_pgto,
		a.nr_seq_evento,
		a.vl_liberado,
		null,
		null,
		null,
		null,
		0,
		null nr_seq_evento_movto,
		null nr_seq_glosa_proc,
		null nr_seq_glosa_mat,
		'RG' ie_tipo_item,
		a.nr_sequencia,
		null ie_tipo_contratacao,
		999 ie_ordem,
		null ie_natureza, 
		clock_timestamp() dt_atendimento,
		null nr_seq_conta,
		null cd_pessoa_fisica,
		null cd_cgc
	from	pls_conta_rec_resumo_item	a
	where	a.nr_seq_lote_pgto	= nr_seq_lote_p
	and	(a.nr_seq_evento IS NOT NULL AND a.nr_seq_evento::text <> '')
	and	(a.nr_seq_prestador_pgto IS NOT NULL AND a.nr_seq_prestador_pgto::text <> '')
	order by ie_ordem;

C04 CURSOR FOR
	SELECT	a.nr_seq_conta,
		a.nr_seq_conta_resumo,
		a.nr_seq_conta_rec_resumo
	from	w_pls_conta_pag_prod a;

C05 CURSOR FOR
	SELECT	a.nr_sequencia nr_seq_evento_movto,
		null nr_seq_lote_pgto_apropr  --z.nr_seq_lote_pgto_apropr
	from	pls_evento		c,
		pls_evento_regra	b,
		pls_evento_movimento	a,
		pls_lote_evento		z
	where	z.nr_sequencia		= a.nr_seq_lote
	and	a.nr_seq_evento 	= c.nr_sequencia
	and (a.nr_seq_evento 	= b.nr_seq_evento or 
		coalesce(b.nr_seq_evento::text, '') = '')
	and	coalesce(c.ie_consiste_periodo_pag, 'S') = 'S'
	and	(a.nr_seq_evento IS NOT NULL AND a.nr_seq_evento::text <> '')
	and	coalesce(a.ie_cancelamento::text, '') = ''
	and	trunc(a.dt_movimento,'month') >= trunc(add_months(dt_mes_competencia_w, - b.qt_mes_deslocamento),'month')
	and	trunc(a.dt_movimento,'month') <= trunc(add_months(dt_mes_competencia_w, - coalesce(b.qt_mes_desloc_final,0)),'month')
	and	(a.nr_seq_prestador IS NOT NULL AND a.nr_seq_prestador::text <> '')
	and	coalesce(a.nr_seq_lote_pgto::text, '') = ''
	and	coalesce(z.nr_seq_lote_ret_trib::text, '') = ''
	and	b.nr_seq_periodo = nr_seq_periodo_w
	and	b.ie_situacao	= 'A'
	and	coalesce(b.ie_incide_periodo, 'S') = 'S'
	and	dt_mes_competencia_w between trunc(b.dt_inicio_vigencia, 'month') and trunc(coalesce(b.dt_fim_vigencia, dt_mes_competencia_w),'month')
	and	((coalesce(b.nr_seq_prestador::text, '') = '') or (b.nr_seq_prestador = coalesce(a.nr_seq_prestador,0)))
	and	((coalesce(b.nr_seq_classif_prestador::text, '') = '') or (exists (SELECT	1
				from	pls_prestador x
				where	x.nr_sequencia		= a.nr_seq_prestador
				and	x.nr_seq_classificacao	= b.nr_seq_classif_prestador)))
	and	((coalesce(b.nr_seq_tipo_prestador::text, '') = '') or (exists (select	1
				from	pls_prestador_tipo	x
				where	x.nr_seq_prestador	= a.nr_seq_prestador
				and	x.nr_seq_tipo		= b.nr_seq_tipo_prestador
				and	clock_timestamp() between coalesce(x.dt_inicio_vigencia, clock_timestamp() - interval '1 days') and coalesce(x.dt_fim_vigencia, clock_timestamp() + interval '1 days')
				
union

				select	1
				from	pls_prestador		y
				where	y.nr_sequencia		= a.nr_seq_prestador
				and	y.nr_seq_tipo_prestador = b.nr_seq_tipo_prestador)))
	and	((a.nr_seq_periodo = nr_seq_periodo_w) or (coalesce(a.nr_seq_periodo::text, '') = ''))
	and	coalesce(a.ie_forma_pagto,'P') = 'P' -- Somente eventos de desconto na producao medica
	and	(z.dt_liberacao IS NOT NULL AND z.dt_liberacao::text <> '') 	-- Somente quando lote estiver liberado para pagamento
	and	trunc(z.dt_competencia,'month') >= trunc(add_months(dt_mes_competencia_w, - b.qt_mes_deslocamento),'month')
	and	trunc(z.dt_competencia,'month') <= trunc(add_months(dt_mes_competencia_w, - coalesce(b.qt_mes_desloc_final,0)),'month')
	--and	trunc(z.dt_competencia) between trunc(nvl(dt_inicio_comp_w,z.dt_competencia), 'month') and last_day(nvl(dt_fim_comp_w,z.dt_competencia))

	--and	((a.dt_movimento <= z.dt_fim_comp) or (z.dt_fim_comp is null))
	and (coalesce(b.cd_condicao_pagamento::text, '') = '' or
		exists (select	1
			from	pls_prestador_pagto	y,
				pls_prestador		x
			where	x.nr_sequencia		= y.nr_seq_prestador
			and	x.nr_sequencia		= a.nr_seq_prestador
			and	y.cd_condicao_pagamento = b.cd_condicao_pagamento))
	and exists(	select	1
			from	pls_prestador		x
			where	x.nr_sequencia		= a.nr_seq_prestador
			and	((coalesce(b.ie_tipo_pessoa_prest,'A') = 'A') or
				(x.cd_cgc IS NOT NULL AND x.cd_cgc::text <> '' AND b.ie_tipo_pessoa_prest = 'PJ') or
				(x.cd_pessoa_fisica IS NOT NULL AND x.cd_pessoa_fisica::text <> '' AND b.ie_tipo_pessoa_prest = 'PF')))
	and	ie_complementar_w = 'N'
	and	ie_forma_retencao_inss_ir_w != 'SE'
	-- regra de excecao de periodo
	and not exists (	select	1
			from	pls_evento_regra_ex ex
			where	ex.nr_seq_prestador = a.nr_seq_prestador
			and	ex.nr_seq_periodo = nr_seq_periodo_w)
	
union all

	select	a.nr_sequencia nr_seq_evento_movto,
		z.nr_seq_lote_pgto_apropr nr_seq_lote_pgto_apropr
	from	pls_evento		c,
		pls_evento_regra	b,
		pls_evento_movimento	a,
		pls_lote_evento		z
	where	z.nr_sequencia		= a.nr_seq_lote
	and	a.nr_seq_evento 	= c.nr_sequencia
	and (a.nr_seq_evento 	= b.nr_seq_evento or
		coalesce(b.nr_seq_evento::text, '') = '')
	and	coalesce(c.ie_consiste_periodo_pag, 'S') = 'S'
	and	c.nr_sequencia = a.nr_seq_evento
	and	(a.nr_seq_prestador IS NOT NULL AND a.nr_seq_prestador::text <> '')
	and	coalesce(a.nr_seq_lote_pgto::text, '') = ''
	and	coalesce(z.nr_seq_lote_ret_trib::text, '') = ''
	and	coalesce(a.ie_cancelamento::text, '') = ''
	and	b.nr_seq_periodo = nr_seq_periodo_w
	and	b.ie_situacao = 'A'
	and	coalesce(b.ie_incide_periodo, 'S') = 'S'
	and	((coalesce(b.nr_seq_prestador::text, '') = '') or (b.nr_seq_prestador = coalesce(a.nr_seq_prestador,0)))
	and	((coalesce(b.nr_seq_classif_prestador::text, '') = '') or (exists (select	1
				from	pls_prestador x
				where	x.nr_sequencia		= a.nr_seq_prestador
				and	x.nr_seq_classificacao	= b.nr_seq_classif_prestador)))
	and	((coalesce(b.nr_seq_tipo_prestador::text, '') = '') or (exists (select	1
				from	pls_prestador_tipo	x
				where	x.nr_seq_prestador	= a.nr_seq_prestador
				and	x.nr_seq_tipo		= b.nr_seq_tipo_prestador
				and	clock_timestamp() between coalesce(x.dt_inicio_vigencia, clock_timestamp() - interval '1 days') and coalesce(x.dt_fim_vigencia, clock_timestamp() + interval '1 days')
				
union all

				select	1
				from	pls_prestador		y
				where	y.nr_sequencia		= a.nr_seq_prestador
				and	y.nr_seq_tipo_prestador = b.nr_seq_tipo_prestador)))
	and	((a.nr_seq_periodo = nr_seq_periodo_w) or (coalesce(a.nr_seq_periodo::text, '') = ''))
	and	coalesce(a.ie_forma_pagto,'P') = 'P' -- Somente eventos de desconto na producao medica
	and	(z.dt_liberacao IS NOT NULL AND z.dt_liberacao::text <> '') 	-- Somente quando lote estiver liberado para pagamento
	and	dt_mes_competencia_w between trunc(b.dt_inicio_vigencia, 'month') and trunc(coalesce(b.dt_fim_vigencia, dt_mes_competencia_w),'month')
	and (coalesce(b.cd_condicao_pagamento::text, '') = '' or
		exists (select	1
			from	pls_prestador_pagto	y,
				pls_prestador		x
			where	x.nr_sequencia		= y.nr_seq_prestador
			and	x.nr_sequencia		= a.nr_seq_prestador
			and	y.cd_condicao_pagamento = b.cd_condicao_pagamento))
	and exists(	select	1
			from	pls_prestador		x
			where	x.nr_sequencia		= a.nr_seq_prestador
			and	((coalesce(b.ie_tipo_pessoa_prest,'A') = 'A') or
				(x.cd_cgc IS NOT NULL AND x.cd_cgc::text <> '' AND b.ie_tipo_pessoa_prest = 'PJ') or
				(x.cd_pessoa_fisica IS NOT NULL AND x.cd_pessoa_fisica::text <> '' AND b.ie_tipo_pessoa_prest = 'PF')))
	and	ie_complementar_w = 'N'
	and	ie_forma_retencao_inss_ir_w = 'SE'
	-- regra de excecao de periodo
	and not exists (	select	1
			from	pls_evento_regra_ex ex
			where	ex.nr_seq_prestador = a.nr_seq_prestador
			and	ex.nr_seq_periodo = nr_seq_periodo_w)
	
union all

	select	a.nr_sequencia nr_seq_evento_movto,
		null nr_seq_lote_pgto_apropr  --x.nr_seq_lote_pgto_apropr
	from	pls_evento		c,
		pls_evento_movimento	a,
		pls_lote_evento		x
	where	x.nr_sequencia 		= a.nr_seq_lote
	and	coalesce(c.ie_consiste_periodo_pag, 'S') = 'N'
	and	c.nr_sequencia = a.nr_seq_evento
	and	trunc(a.dt_movimento,'month') >= trunc(dt_mes_competencia_w,'month')
	and	trunc(a.dt_movimento,'month') <= trunc(dt_mes_competencia_w,'month')
	and	(a.nr_seq_evento IS NOT NULL AND a.nr_seq_evento::text <> '')
	and	(a.nr_seq_prestador IS NOT NULL AND a.nr_seq_prestador::text <> '')
	and	coalesce(a.nr_seq_lote_pgto::text, '') = ''
	and	coalesce(x.nr_seq_lote_ret_trib::text, '') = ''
	and	coalesce(a.ie_cancelamento::text, '') = ''
	and	((a.nr_seq_periodo = nr_seq_periodo_w) or (coalesce(a.nr_seq_periodo::text, '') = ''))
	and	coalesce(a.ie_forma_pagto,'P') = 'P' -- Somente eventos de desconto na producao medica
	and	(x.dt_liberacao IS NOT NULL AND x.dt_liberacao::text <> '') 	-- Somente quando lote estiver liberado para pagamento
	and	ie_complementar_w = 'N'
	and not exists (	select	1
			from	pls_evento_regra_ex ex
			where	ex.nr_seq_prestador = a.nr_seq_prestador
			and	ex.nr_seq_periodo = nr_seq_periodo_w)
	
union all

	-- traz tudo que esta em lote de apropriacao e nao precisa consistir o periodo

	-- isso quando o pagamento for semanal
	select	b.nr_sequencia nr_seq_evento_movto,
		a.nr_seq_lote_pgto_apropr
	from	pls_evento_movimento	b,
		pls_lote_evento		a,
		pls_evento		d
	where	a.nr_sequencia = b.nr_seq_lote
	and	(a.nr_seq_lote_pgto_apropr IS NOT NULL AND a.nr_seq_lote_pgto_apropr::text <> '')
	and	coalesce(a.nr_seq_lote_ret_trib::text, '') = ''
	and	coalesce(b.nr_seq_lote_pgto::text, '') = ''
	and	coalesce(b.ie_cancelamento::text, '') = ''
	and	ie_complementar_w = 'N'
	and	d.nr_sequencia = b.nr_seq_evento
	and (coalesce(d.ie_consiste_periodo_pag, 'S') = 'N' or ie_forma_retencao_inss_ir_w != 'SE')
	-- DAQUI PARA BAIXO TRATAR APENAS OS ITENS DE LOTES COMPLEMENTARES
	
union all

	select	b.nr_sequencia nr_seq_evento_movto,
		null nr_seq_lote_pgto_apropr
	from	pls_lote_pgto_compl	c,
		pls_evento_movimento	b,
		pls_lote_evento		a
	where	a.nr_sequencia 		= b.nr_seq_lote
	and	a.nr_seq_lote_pagamento = nr_seq_lote_p 					-- O lote de evento movimento nao e proveniente de apropriacao
	and	coalesce(a.nr_seq_lote_ret_trib::text, '') = ''
	and	coalesce(b.ie_cancelamento::text, '') = ''
	and	c.nr_seq_lote 		= a.nr_seq_lote_pagamento
	and	b.nr_seq_prestador	= coalesce(c.nr_seq_prestador, b.nr_seq_prestador)	-- Filtro por prestador no do lote complementar
	and	b.nr_seq_evento		= coalesce(c.nr_seq_evento, b.nr_seq_evento)		-- Filtro por evento no do lote complementar
	--and	c.nr_seq_conta is null								-- Filtro por conta deve estar em branco
	and	ie_complementar_w 	= 'S'						-- O lote de pagamento e complementar
	
union all

	select	b.nr_sequencia nr_seq_evento_movto,
		a.nr_seq_lote_pgto_apropr
	from	pls_lote_pgto_compl	c,
		pls_evento_movimento	b,
		pls_lote_evento		a
	where	a.nr_sequencia 		= b.nr_seq_lote
	and	b.nr_seq_prestador	= coalesce(c.nr_seq_prestador, b.nr_seq_prestador)	-- Filtro por prestador no do lote complementar
	and	b.nr_seq_evento		= coalesce(c.nr_seq_evento, b.nr_seq_evento)		-- Filtro por evento no do lote complementar
	and	(a.nr_seq_lote_pgto_apropr IS NOT NULL AND a.nr_seq_lote_pgto_apropr::text <> '') 					--  O lote de evento movimento e proveniente de apropriacao
	and	coalesce(a.nr_seq_lote_ret_trib::text, '') = ''
	and	coalesce(b.nr_seq_lote_pgto::text, '') = '' 						-- O evento movimento ainda nao entrou em nenhum lote de pagamento
	and	coalesce(b.ie_cancelamento::text, '') = ''
	--and	c.nr_seq_conta is null								-- Filtro por conta deve estar em branco
	and	ie_complementar_w = 'S'							-- O lote de pagamento e complementar
	and	c.nr_seq_lote = nr_seq_lote_p 						-- Varrer apenas as regras complementares do lote que esta sendo gerado
	
union all

	select	b.nr_sequencia nr_seq_evento_movto,
		a.nr_seq_lote_pgto_apropr
	from	pls_lote_pgto_compl	c,
		pls_evento_movimento 	b,
		pls_lote_evento		a
	where	coalesce(b.nr_seq_lote_pgto::text, '') = ''
	and	a.nr_sequencia = b.nr_seq_lote
	and	coalesce(a.nr_seq_lote_pgto_apropr::text, '') = ''
	and	coalesce(a.nr_seq_lote_ret_trib::text, '') = ''
	and	coalesce(b.ie_cancelamento::text, '') = ''
	and	a.ie_origem = 'M'
	and	b.nr_seq_prestador = coalesce(c.nr_seq_prestador, b.nr_seq_prestador)
	and	b.nr_seq_evento = coalesce(c.nr_seq_evento, b.nr_seq_evento)
	and	nr_seq_periodo_w = coalesce(b.nr_seq_periodo, nr_seq_periodo_w)
	and	c.nr_seq_lote = nr_seq_lote_p
	--and	c.nr_seq_conta is null								-- Filtro por conta deve estar em branco
	and	ie_complementar_w = 'S';
	
C06 CURSOR FOR
	SELECT	a.nr_sequencia
	from	pls_pagamento_prestador a
	where	a.nr_seq_lote = nr_seq_lote_p;

BEGIN

-- Eventos com o 'Tipo evento' igual a 'Producao medica' devem sempre estar com o campo 'Permite gerar evento com valor zerado' marcado
update	pls_evento
set	ie_evento_zerado = 'S'
where	ie_tipo_evento in ('P')
and	coalesce(ie_evento_zerado, 'N') = 'N';

-- Eventos que nao estiverem o ie_aplicar_regra_prest informado, entao o padrao devera ser "S"
update	pls_evento
set	ie_aplicar_regra_prest	= 'S'
where	coalesce(ie_aplicar_regra_prest::text, '') = '';


ie_lote_retencao_w	:= coalesce(obter_valor_param_usuario(1282, 27, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p), 'S');

CALL gravar_processo_longo('Gerando lote de pagamento' ,'PLS_GERAR_LOTE_PAGAMENTO',0);

ds_predecessor_w	:= pls_obter_se_fluxo_pgto(nr_seq_lote_p); -- Obter lote predecessor
if (ds_predecessor_w IS NOT NULL AND ds_predecessor_w::text <> '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(175925,'DS_PREDECESSOR=' || ds_predecessor_w);
end if;

select	nr_seq_periodo, -- Obter dados do lote de pagamento
	trunc(dt_mes_competencia,'month'),
	dt_inicio_comp,
	dt_fim_comp,
	cd_estabelecimento,
	trunc(dt_venc_lote,'month')
into STRICT	nr_seq_periodo_w,
	dt_mes_competencia_w,
	dt_inicio_comp_w,
	dt_fim_comp_w,
	cd_estabelecimento_w,
	dt_venc_lote_w
from	pls_lote_pagamento
where	nr_sequencia	= nr_seq_lote_p;

select	count(1)
into STRICT	qt_mes_competencia_w
from	pls_competencia
where	trunc(dt_mes_competencia,'month')	= dt_mes_competencia_w
and	cd_estabelecimento	= cd_estabelecimento_p
and	coalesce(dt_fechamento::text, '') = '';

if (qt_mes_competencia_w = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(757962,'DT_LOTE='||to_char(dt_mes_competencia_w,'mm/yyyy')); -- Nao existe um mes de competencia aberto para #@DT_LOTE#@.
end if;


select	coalesce(max(ie_gerar_lote_movimento),'N'),
	coalesce(max(ie_forma_retencao_inss_ir), 'ME'),
	max(nr_seq_evento_trib_lm),
	max(nr_seq_evento_trib_prov)
into STRICT	ie_gerar_lote_movimento_w,
	ie_forma_retencao_inss_ir_w,
	nr_seq_evento_trib_lm_w,
	nr_seq_evento_trib_prov_w
from	pls_parametro_pagamento
where	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_forma_retencao_inss_ir_w = 'SE') then
	dt_ref_valid_lote_ret_w	:= dt_venc_lote_w;
else
	dt_ref_valid_lote_ret_w	:= dt_mes_competencia_w;
end if;

select	max(a.nr_sequencia)
into STRICT	nr_seq_lote_ret_trib_w
from	pls_lote_ret_trib_valor c,
	pls_lote_ret_trib_prest	b,
	pls_lote_retencao_trib	a
where	b.nr_sequencia 	= c.nr_seq_trib_prest
and	a.nr_sequencia 	= b.nr_seq_lote
and	(c.nr_titulo IS NOT NULL AND c.nr_titulo::text <> '')
and	trunc(a.dt_mes_referencia, 'month') = dt_ref_valid_lote_ret_w;

select	count(1)
into STRICT	qt_lote_retencao_w
from	pls_lote_pagamento a
where	a.nr_seq_lote_ret_trib = nr_seq_lote_ret_trib_w;

if (nr_seq_lote_ret_trib_w IS NOT NULL AND nr_seq_lote_ret_trib_w::text <> '') and
	((ie_forma_retencao_inss_ir_w <> 'LM') or (qt_lote_retencao_w > 0)) then
	/*Os titulos de imposto deste mes de competencia ja foram gerados. Nao e
	permitido lancar novo pagamento para esta referencia. Favor verificar em
	OPS - Pagamento de Producao Medica -> Retencao tributos.*/
	CALL wheb_mensagem_pck.exibir_mensagem_abort(265475);
end if;

-- Obter o valor do parametro [11] Permite a geracao de mais de um lote de pagamento do mesmo periodo, dentro da mesma competencia
ie_periodo_mes_w	:= coalesce(obter_valor_param_usuario(1282, 11, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_w), 'S');

if (ie_periodo_mes_w = 'N') then
	select	count(1)
	into STRICT	qt_registro_w
	from	pls_lote_pagamento
	where	nr_seq_periodo	= nr_seq_periodo_w
	and	trunc(dt_mes_competencia,'month') = dt_mes_competencia_w;

	if (qt_registro_w > 1) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(175926);
	end if;
end if;

select	coalesce(max(ie_situacao),'A') -- Felipe - OS 285666 - Nao permitir gerar lotes de periodos inativos
into STRICT	ie_situacao_periodo_w
from	pls_periodo_pagamento
where	nr_sequencia	= nr_seq_periodo_w;

if (ie_situacao_periodo_w	= 'I') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(175927);
end if;

/*aaschlote 20/03/2014 - OS 715965 - Lote de retencao nao foi gerado no mes passado. Favor verificar!*/

if (ie_lote_retencao_w = 'N') then
	select	count(1)
	into STRICT	qt_registros_w
	from	pls_lote_retencao_trib
	where	trunc(dt_mes_referencia,'month')	= add_months(dt_mes_competencia_w,-1)
	and	(dt_geracao IS NOT NULL AND dt_geracao::text <> '');

	if (qt_registros_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(288836);
	end if;
end if;

ie_complementar_w	:= pls_obter_se_lote_pgto_compl(nr_seq_lote_p);

CALL pls_desfazer_lote_pagamento(nr_seq_lote_p, nm_usuario_p, cd_estabelecimento_p);

select	max(a.nr_sequencia)
into STRICT	nr_seq_lote_ret_trib_w
from	pls_lote_ret_trib_valor c,
	pls_lote_ret_trib_prest	b,
	pls_lote_retencao_trib	a
where	b.nr_sequencia 	= c.nr_seq_trib_prest
and	a.nr_sequencia 	= b.nr_seq_lote
and	(c.nr_titulo IS NOT NULL AND c.nr_titulo::text <> '')
and	trunc(a.dt_mes_referencia, 'month') = add_months(dt_mes_competencia_w, -1)
and	not exists (	SELECT	1
			from	pls_lote_pagamento x
			where	x.nr_seq_lote_ret_trib = a.nr_sequencia);

if (nr_seq_lote_ret_trib_w IS NOT NULL AND nr_seq_lote_ret_trib_w::text <> '') then
	update	pls_lote_pagamento
	set	nr_seq_lote_ret_trib 	= nr_seq_lote_ret_trib_w
	where	nr_sequencia 		= nr_seq_lote_p;
end if;

if (ie_gerar_lote_movimento_w = 'S') then
	select	count(1)
	into STRICT	qt_lote_evento_pag_w
	from	pls_lote_evento	 a
	where	a.nr_seq_lote_pagamento	= nr_seq_lote_p  LIMIT 1;

	if (qt_lote_evento_pag_w = 0) then
		CALL pls_atualiza_evento_prox_pgto(nr_seq_lote_p); -- ROTINA PARA ATUALIZAR CORRETAMENTE OS VENCIMENTOS QUE NAO DEVEM SER GERADOS NO PROXIMO PAGAMENTO PORQUE JA FOI GERADO O TITULO
		nr_seq_lote_evento_w := pls_gerar_lote_evento_pag(nr_seq_lote_p, nm_usuario_p, cd_estabelecimento_w, nr_seq_lote_evento_w);
		nr_seq_lote_evento_w := pls_gerar_desc_prest_contest(nr_seq_lote_p, nm_usuario_p, cd_estabelecimento_w, nr_seq_lote_evento_w);	
	end if;
end if;

for r_c05_w in C05 loop
	CALL gravar_processo_longo('Vinculando ocorrencias financeiras ao pagamento...' ,'PLS_GERAR_LOTE_PAGAMENTO',-1);
	
	update	pls_evento_movimento	a
	set	a.nr_seq_lote_pgto	= nr_seq_lote_p,
		a.dt_atualizacao 	= clock_timestamp()
	where	a.nr_sequencia		= r_c05_w.nr_seq_evento_movto;
	
	if (r_c05_w.nr_seq_lote_pgto_apropr IS NOT NULL AND r_c05_w.nr_seq_lote_pgto_apropr::text <> '') then
		CALL pls_gerar_movto_pos_aprop( nr_seq_lote_p, r_c05_w.nr_seq_evento_movto, 'N', cd_estabelecimento_p, nm_usuario_p );
	end if;
end loop;

if (ie_complementar_w = 'N') then

	CALL gravar_processo_longo('Gerando dados complementares...' ,'PLS_GERAR_LOTE_PAGAMENTO',-1);

	CALL pls_vincular_contas_pag_prod(nr_seq_lote_p,nm_usuario_p);

	for r_C00_w in C00 loop

		--Caso for conta medica, entao coloca no table de conta
		if (r_C00_w.ie_origem = 'CM') then
			nr_seq_conta_tb_w(index_cm_w) := r_C00_w.nr_seq_conta;
			nr_seq_conta_resumo_tb_w(index_cm_w) := r_C00_w.nr_seq_conta_resumo;
			index_cm_w := index_cm_w+ 1;

		--Caso for recurso de glosa de procedimento, entao coloca no table de recurso de glosa de procedimento
		elsif (r_C00_w.ie_origem = 'RGP') then
			nr_seq_conta_rec_proc_tb_w(index_proc_w) := r_C00_w.nr_seq_conta_resumo;
			index_proc_w := index_proc_w + 1;

		--Caso for recurso de glosa de material, entao coloca no table de recurso de glosa de material
		elsif (r_C00_w.ie_origem = 'RGM') then
			nr_seq_conta_rec_mat_tb_w(index_mat_w) := r_C00_w.nr_seq_conta_resumo;
			index_mat_w := index_mat_w + 1;

		--Caso for recurso de glosa de material, entao coloca no table de recurso de glosa de material
		elsif (r_C00_w.ie_origem = 'RG') then
			nr_seq_conta_rec_resumo_tb_w(index_rg_w) := r_C00_w.nr_seq_conta_resumo;
			index_rg_w := index_rg_w + 1;
		end if;

		--Caso chegue ao limite, entao libera as table
		if (mod(C00%rowCount,pls_util_cta_pck.qt_registro_transacao_w) = 0) then
			CALL pls_atualizar_pag_conta_resumo(nr_seq_conta_tb_w, nr_seq_conta_resumo_tb_w, nr_seq_conta_rec_resumo_tb_w, nr_seq_lote_p, 'CM');
			CALL pls_atualizar_pag_conta_resumo(nr_seq_conta_tb_w, nr_seq_conta_rec_proc_tb_w, nr_seq_conta_rec_resumo_tb_w, nr_seq_lote_p, 'RGP');
			CALL pls_atualizar_pag_conta_resumo(nr_seq_conta_tb_w, nr_seq_conta_rec_mat_tb_w, nr_seq_conta_rec_resumo_tb_w, nr_seq_lote_p, 'RGM');
			CALL pls_atualizar_pag_conta_resumo(nr_seq_conta_tb_w, nr_seq_conta_resumo_tb_w, nr_seq_conta_rec_resumo_tb_w, nr_seq_lote_p, 'RG');

			nr_seq_conta_tb_w.delete;
			nr_seq_conta_resumo_tb_w.delete;
			nr_seq_conta_rec_proc_tb_w.delete;
			nr_seq_conta_rec_mat_tb_w.delete;
			nr_seq_conta_rec_resumo_tb_w.delete;
			index_cm_w	:= 0;
			index_proc_w	:= 0;
			index_mat_w	:= 0;
			index_rg_w	:= 0;
		end if;

	end loop;

	--Caso sobrar dados na conta, entao libera os registros
	if (nr_seq_conta_tb_w.count > 0) then
		CALL pls_atualizar_pag_conta_resumo(nr_seq_conta_tb_w, nr_seq_conta_resumo_tb_w, nr_seq_conta_rec_resumo_tb_w, nr_seq_lote_p, 'CM');
	end if;

	--Caso sobrar dados no recurso de glosa de procedimento, entao libera os registros
	if (nr_seq_conta_rec_proc_tb_w.count > 0) then
		CALL pls_atualizar_pag_conta_resumo(nr_seq_conta_tb_w, nr_seq_conta_rec_proc_tb_w, nr_seq_conta_rec_resumo_tb_w, nr_seq_lote_p, 'RGP');
	end  if;

	--Caso sobrar dados no recurso de glosa de material, entao libera os registros
	if (nr_seq_conta_rec_mat_tb_w.count > 0) then
		CALL pls_atualizar_pag_conta_resumo(nr_seq_conta_tb_w, nr_seq_conta_rec_mat_tb_w, nr_seq_conta_rec_resumo_tb_w, nr_seq_lote_p, 'RGM');
	end if;

	--Caso sobrar dados no recurso de glosa , entao libera os registros
	if (nr_seq_conta_rec_resumo_tb_w.count > 0) then
		CALL pls_atualizar_pag_conta_resumo(nr_seq_conta_tb_w, nr_seq_conta_resumo_tb_w, nr_seq_conta_rec_resumo_tb_w, nr_seq_lote_p, 'RG');
	end if;

	nr_seq_conta_tb_w.delete;
	nr_seq_conta_resumo_tb_w.delete;
	nr_seq_conta_rec_mat_tb_w.delete;
	nr_seq_conta_rec_proc_tb_w.delete;
	nr_seq_conta_rec_resumo_tb_w.delete;
	index_cm_w	:= 0;
	index_proc_w	:= 0;
	index_mat_w	:= 0;
	index_rg_w	:= 0;

elsif (ie_complementar_w = 'S') then
	select	count(1)
	into STRICT	qt_complementar_w
	from	pls_lote_pgto_compl	a
	where	a.nr_seq_lote		= nr_seq_lote_p  LIMIT 1;

	CALL pls_vinc_contas_pag_prod_compl(nr_seq_lote_p, nm_usuario_p);

	open C04;
	loop
	fetch C04 into
		nr_seq_conta_w,
		nr_seq_conta_resumo_w,
		nr_seq_conta_rec_resumo_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		CALL gravar_processo_longo('Vinculando contas medicas ao pagamento...' ,'PLS_GERAR_LOTE_PAGAMENTO',-1);

		if (nr_seq_conta_resumo_w IS NOT NULL AND nr_seq_conta_resumo_w::text <> '') then
			update	pls_conta_medica_resumo -- Atualizar no resumo, o lote de pagamento do item
			set	nr_seq_lote_pgto	= nr_seq_lote_p
			where	nr_seq_conta		= nr_seq_conta_w
			and	nr_sequencia		= nr_seq_conta_resumo_w
			and	ie_situacao = 'A';

		elsif (nr_seq_conta_rec_resumo_w IS NOT NULL AND nr_seq_conta_rec_resumo_w::text <> '') then
			update	pls_conta_rec_resumo_item -- Atualizar no resumo, o lote de pagamento do item
			set	nr_seq_lote_pgto	= nr_seq_lote_p
			where	nr_sequencia		= nr_seq_conta_rec_resumo_w;
		end if;
		end;
	end loop;
	close C04;

end if;

CALL gravar_processo_longo('Inserindo prestadores...' ,'PLS_GERAR_LOTE_PAGAMENTO',-1);
open C02;
loop
fetch C02 into
	nr_seq_prestador_pgto_w,
	nr_seq_evento_w,
	vl_evento_w,
	nr_tit_rec_vinculado_w,
	nr_tit_pagar_vinculado_w,
	nr_adiant_pago_w,
	nr_seq_evento_regra_fixo_w,
	vl_glosa_w,
	nr_seq_evento_movto_w,
	nr_seq_glosa_proc_w,
	nr_seq_glosa_mat_w,
	ie_tipo_item_w,
	nr_seq_conta_rec_resumo_w,
	ie_tipo_contratacao_w,
	ie_ordem_w,
	ie_natureza_ww,
	dt_atendimento_referencia_w,
	nr_seq_conta_c_w,
	cd_pessoa_fisica_w,
	cd_cgc_w;
EXIT WHEN NOT FOUND; /* apply on C02 */
	begin
	
	-- Edgar, OS 836976, Gerar movimentacao financeira para as movimentacoes do lote de retencao de tributos
	if (ie_tipo_item_w = 'LR') then
	
		-- Caso nao identificado um prestador ativo para a PF ou PJ que esta sendo processada, sera parado o processo e informado ao usuario
		if (coalesce(nr_seq_prestador_pgto_w::text, '') = '') then
			if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1187974, 'CD_PESSOA_FISICA=' || cd_pessoa_fisica_w); -- Nao foi localizado um prestador ativo para a pessoa fisica #@CD_PESSOA_FISICA#@.
			elsif (cd_cgc_w IS NOT NULL AND cd_cgc_w::text <> '') then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1187975, 'CD_CGC=' || cd_cgc_w); -- Nao foi localizado um prestador ativo para a pessoa juridica #@CD_CGC#@.
			end if;
		end if;
		
		select	max(nr_sequencia)
		into STRICT	nr_seq_lote_evento_w
		from	pls_lote_evento	 a
		where	a.nr_seq_lote_pagamento	= nr_seq_lote_p;

		if (coalesce(nr_seq_evento_w::text, '') = '') then
			if (ie_forma_retencao_inss_ir_w <> 'SE')then
				/* Cadastrar evento de retencao no campo "Evento retencao dos tributos" em:
				"OPS - Gestao de Operadoras > Parametros da OPS > Pagamento producao" */
				CALL wheb_mensagem_pck.exibir_mensagem_abort(352997,null);
			elsif (ie_natureza_ww = 'D') then
				/*Cadastrar evento de retencao no campo "Evento retencao dos tributos (provento)" em:
				"OPS - Gestao de Operadoras > Parametros da OPS > Pagamento producao"*/
				CALL wheb_mensagem_pck.exibir_mensagem_abort(353599,null);
			end if;
		end if;

		-- no cursor 02 retorna a sequencia do evento movimento porem quando o lote de retencao ate entao nao temos um

		-- registro no movimento, entao retorno no insert para que depois consiga fazer os updates necessarios
		insert into pls_evento_movimento(
			nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, dt_movimento,
			nr_seq_evento, nr_seq_lote, nr_seq_prestador,
			vl_movimento, ie_forma_pagto, nr_seq_periodo,
			ds_observacao, nr_seq_lote_pgto
		) values (
			nextval('pls_evento_movimento_seq'), clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, trunc(dt_mes_competencia_w,'dd'),
			nr_seq_evento_w, nr_seq_lote_evento_w, nr_seq_prestador_pgto_w,
			vl_evento_w, 'P', null,
			'Evento originado do lote de retencao mensal.', nr_seq_lote_p
		) returning nr_sequencia into nr_seq_evento_movto_w;

		/* Obtem a conta contabil comforme regra OPS - Criterios Contabeis item Regra contabil de eventos financeiros (pagamento producao)*/

		cd_conta_contabil_w := pls_obter_conta_contab_eve_fin(nr_seq_evento_movto_w, cd_conta_contabil_w);

		update	pls_evento_movimento
		set	cd_conta_contabil	= cd_conta_contabil_w
		where	nr_sequencia		= nr_seq_evento_movto_w;

	end if;

	qt_registro_w	:= qt_registro_w + 1;

	select	coalesce(max(a.ie_natureza), 'P'),
		max(a.nr_prior_desc),
		coalesce(max(ie_saldo_negativo), 'CP'),
		coalesce(max(ie_aplicar_regra_prest), 'S')
	into STRICT	ie_natureza_w,
		nr_prior_desc_w,
		ie_saldo_negativo_w,
		ie_aplicar_regra_prest_w
	from	pls_evento	a
	where	a.nr_sequencia	= nr_seq_evento_w;

	nr_seq_prestador_cta_res_w := nr_seq_prestador_pgto_w;
	if (ie_natureza_w	= 'D') and (vl_evento_w > 0) then -- OS 448782 - Para quando for apropriacao em proximo pgto
	
		if (ie_aplicar_regra_prest_w = 'S') then
		
			SELECT * FROM pls_obter_crit_receb_prest(	nr_seq_prestador_pgto_w, clock_timestamp(), nm_usuario_p, nr_seq_regra_w, nr_seq_prestador_regra_w) INTO STRICT nr_seq_regra_w, nr_seq_prestador_regra_w;

			if (nr_seq_prestador_regra_w IS NOT NULL AND nr_seq_prestador_regra_w::text <> '') then
				nr_seq_prestador_pgto_w	:= nr_seq_prestador_regra_w;
			end if;
		end if;

		vl_evento_w	:= vl_evento_w * -1;

		vl_glosa_w	:= coalesce(vl_glosa_w, 0) * -1;
	else
		nr_seq_prestador_regra_w := null;
		
		if (ie_aplicar_regra_prest_w = 'S') then
		
			SELECT * FROM pls_obter_prest_pgto_prof( 	nr_seq_prestador_pgto_w, null, null, null, nm_usuario_p, null, dt_atendimento_referencia_w, nr_seq_prestador_regra_w, nr_seq_regra_w ) INTO STRICT nr_seq_prestador_regra_w, nr_seq_regra_w;

			if (nr_seq_prestador_regra_w IS NOT NULL AND nr_seq_prestador_regra_w::text <> '') then
				nr_seq_prestador_pgto_w	:= nr_seq_prestador_regra_w;
			end if;
		end if;
	end if;

	select	coalesce(max(nr_sequencia), 0) -- Verificar se ja existe o registro do PRESTADOR para esse lote
	into STRICT	nr_seq_pagamento_w
	from	pls_pagamento_prestador
	where	nr_seq_lote		= nr_seq_lote_p
	and	nr_seq_prestador	= nr_seq_prestador_pgto_w;

	if (nr_seq_pagamento_w = 0) then -- Se nao existir, entao cria o registro
		select	nextval('pls_pagamento_prestador_seq')
		into STRICT	nr_seq_pagamento_w
		;

		insert into pls_pagamento_prestador(
			nr_sequencia, nr_seq_lote, nr_seq_prestador,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec, vl_pagamento
		) values (
			nr_seq_pagamento_w, nr_seq_lote_p, nr_seq_prestador_pgto_w,
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, vl_evento_w
		);
	else
		begin
			update	pls_pagamento_prestador
			set	vl_pagamento	= coalesce(vl_pagamento,0) + coalesce(vl_evento_w,0)
			where	nr_sequencia	= nr_seq_pagamento_w;
		exception
		when others then
			null;
		end;
	end if;

	select	coalesce(max(a.ie_forma_valor), 'I')
	into STRICT	ie_forma_valor_w
	from	pls_evento_regra_fixo	a
	where	a.nr_sequencia	= nr_seq_evento_regra_fixo_w;

	select	max(a.nr_sequencia) -- Verificar se ja existe o registro do EVENTO desse prestador para esse lote
	into STRICT	nr_seq_item_w
	from	pls_pagamento_prestador	b,
		pls_pagamento_item	a
	where	a.nr_seq_pagamento	= b.nr_sequencia
	and	b.nr_seq_lote		= nr_seq_lote_p
	and	b.nr_seq_prestador	= nr_seq_prestador_pgto_w
	and	a.nr_seq_evento		= nr_seq_evento_w
	and	((ie_forma_valor_w = 'I' and coalesce(nr_seq_regra_fixo_calc::text, '') = '') or (ie_forma_valor_w = 'R' and (nr_seq_regra_fixo_calc IS NOT NULL AND nr_seq_regra_fixo_calc::text <> '')))
	and (a.ie_tipo_contratacao = ie_tipo_contratacao_w or coalesce(a.ie_tipo_contratacao::text, '') = '');

	if (coalesce(nr_seq_item_w::text, '') = '') or (nr_tit_rec_vinculado_w IS NOT NULL AND nr_tit_rec_vinculado_w::text <> '') or (nr_tit_pagar_vinculado_w IS NOT NULL AND nr_tit_pagar_vinculado_w::text <> '') or (nr_adiant_pago_w IS NOT NULL AND nr_adiant_pago_w::text <> '') then -- Se nao existir, entao cria o registro
		CALL gravar_processo_longo('Inserindo prestadores...' ,'PLS_GERAR_LOTE_PAGAMENTO',-1);

		insert into pls_pagamento_item(
			nr_sequencia, nr_seq_pagamento, nr_seq_evento,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
			nm_usuario_nrec, vl_item, nr_tit_pagar_origem,
			nr_tit_receber_origem, nr_adiant_pago_origem, nr_seq_regra_fixo_calc,
			vl_glosa, nr_prior_desc, ie_apropriar_total,
			ie_tipo_contratacao
		) values (
			nextval('pls_pagamento_item_seq'), nr_seq_pagamento_w, nr_seq_evento_w,
			clock_timestamp(), nm_usuario_p, clock_timestamp(),
			nm_usuario_p, vl_evento_w, nr_tit_pagar_vinculado_w,
			nr_tit_rec_vinculado_w, nr_adiant_pago_w, CASE WHEN ie_forma_valor_w='I' THEN  null  ELSE nr_seq_evento_regra_fixo_w END ,
			vl_glosa_w, nr_prior_desc_w, 'N',
			ie_tipo_contratacao_w
		) returning nr_sequencia into nr_seq_item_w;
	else
		begin
			update	pls_pagamento_item
			set	vl_item		= vl_item + coalesce(vl_evento_w, 0),
				vl_glosa	= vl_glosa + coalesce(vl_glosa_w, 0)
			where	nr_sequencia	= nr_seq_item_w;
		exception
		when others then
			null;
		end;
	end if;

	-- so vai atualizar se for producao medica
	if (nr_seq_conta_c_w IS NOT NULL AND nr_seq_conta_c_w::text <> '') then
		
		select	substr(pls_obter_dados_prestador(nr_seq_prestador_pgto_w,'N'),1,255)
		into STRICT	nm_prestador_pgto_w
		;
		
		/* Atualizar no resumo, o lote de pagamento do item */

		update	pls_conta_medica_resumo
		set	nr_seq_pag_item		= nr_seq_item_w,
			nr_seq_prestador_pgto	= nr_seq_prestador_pgto_w,
			nm_prestador_pgto	= nm_prestador_pgto_w
		where	nr_seq_lote_pgto	= nr_seq_lote_p
		and	nr_seq_prestador_pgto	= nr_seq_prestador_cta_res_w
		and	nr_seq_evento		= nr_seq_evento_w
		and	nr_seq_conta		= nr_seq_conta_c_w
		and	ie_situacao = 'A';
	end if;
	
	/* Vincular o item de pagamento ao evento movimento */

	update	pls_evento_movimento
	set	nr_seq_pagamento_item 	= nr_seq_item_w
	where	nr_sequencia		= nr_seq_evento_movto_w;

	/*vincular o item de pagamento ao recurso de glosa proc*/

	update	pls_rec_glosa_proc
	set	nr_seq_pag_prest	= nr_seq_pagamento_w
	where	nr_sequencia		= nr_seq_glosa_proc_w;

	/*vincular o item de pagamento ao recurso de glosa mat*/

	update	pls_rec_glosa_mat
	set	nr_seq_pag_prest	= nr_seq_pagamento_w
	where	nr_sequencia		= nr_seq_glosa_mat_w;

	/*vincular o item de pagamento de recurso de glosa*/

	update	pls_conta_rec_resumo_item
	set	nr_seq_pag_item		= nr_seq_item_w
	where	nr_sequencia		= nr_seq_conta_rec_resumo_w;

	if (nr_seq_conta_rec_resumo_w IS NOT NULL AND nr_seq_conta_rec_resumo_w::text <> '') then
		update	pls_rec_glosa_proc
		set	nr_seq_pag_prest	= nr_seq_pagamento_w,
			nr_seq_lote_pgto	= nr_seq_lote_p
		where	nr_sequencia		= (	SELECT	nr_seq_proc_rec
							from	pls_conta_rec_resumo_item
							where	nr_sequencia		= nr_seq_conta_rec_resumo_w);

		update	pls_rec_glosa_mat
		set	nr_seq_pag_prest	= nr_seq_pagamento_w,
			nr_seq_lote_pgto	= nr_seq_lote_p
		where	nr_sequencia		= (	SELECT	nr_seq_mat_rec
							from	pls_conta_rec_resumo_item
							where	nr_sequencia		= nr_seq_conta_rec_resumo_w);
	end if;
	end;
end loop;
close C02;

open C06;
loop
fetch C06 into
	nr_seq_pagamento_w;
EXIT WHEN NOT FOUND; /* apply on C06 */
	begin
	CALL pls_atualizar_valor_pag_prest(	nr_seq_pagamento_w,
					nm_usuario_p,
					cd_estabelecimento_p);

	CALL pls_gerar_evento_escrit(nr_seq_pagamento_w,
				dt_mes_competencia_w,
				nm_usuario_p);
	end;
end loop;
close C06;

if (ie_complementar_w = 'N') then
	CALL pls_gerar_lote_pag_tit_mens(	nr_seq_lote_p,
					nm_usuario_p);
end if;

pls_atualizar_eventos_pag_prod(nr_seq_lote_p);

CALL pls_gerar_taxa_fidelidade(	nr_seq_lote_p,
				nm_usuario_p);

-- Limpar pagamento vazios
CALL pls_limpar_pagto_zerados_lote( nr_seq_lote_p, 'N', nm_usuario_p);

-- so alterei para quando for retencao semanal pois a USJRP usa lote mensal desta forma e nao apresenta problema
if (ie_forma_retencao_inss_ir_w = 'SE') then

	-- limpa os regristros de movimento que foram vinculados ao lote de pagamento porem nao existe o prestador

	-- esse tratamento foi feito por causa dos lotes de retencao que sao vinculados no inicio do processo

	-- quando nao sabemos quais sao os prestadores que serao gerados no lote.
	update 	pls_evento_movimento
	set	nr_seq_lote_pgto  = NULL
	where	nr_sequencia in ( 	SELECT a.nr_sequencia
					from   pls_evento_movimento a
					where  a.nr_seq_lote_pgto = nr_seq_lote_p
					and    not exists (SELECT 1
							  from    PLS_PAGAMENTO_PRESTADOR x
							  where   x.nr_seq_lote =  a.nr_seq_lote_pgto
							  and     x.nr_seq_prestador = a.nr_seq_prestador));
end if;
-- OS 828823 - Gerar evento movimento com saldo negativo do pagamento de producao medica

--pls_gerar_movto_saldo_pgto( nr_seq_lote_p, 'N', cd_estabelecimento_p, nm_usuario_p );
select	coalesce(sum(vl_pagamento),0)
into STRICT	vl_pagamento_w
from	pls_pagamento_prestador
where	nr_seq_lote	= nr_seq_lote_p;

update	pls_lote_pagamento
set	vl_lote		= vl_pagamento_w,
	nm_usuario	= nm_usuario_p,
	dt_atualizacao	= clock_timestamp()
where	nr_sequencia	= nr_seq_lote_p;

-- verifica se no lote de evento que foi gerado para este pagamento, existe pelo menos

-- um movimento, caso nao existir deletamos o lote para que o usuario possa excluir o 

-- lote de pagamento quando necessario
select	count(1)
into STRICT	qt_lote_evento_pag_w
from	pls_lote_evento a
where	a.nr_seq_lote_pagamento = nr_seq_lote_p
and	exists (	SELECT 	1
		from	pls_evento_movimento x
		where 	x.nr_seq_lote = a.nr_sequencia)  LIMIT 1;
		
if (qt_lote_evento_pag_w = 0) then
	
	select	max(nr_sequencia)
	into STRICT	nr_seq_lote_evento_w
	from	pls_lote_evento
	where	nr_seq_lote_pagamento = nr_seq_lote_p;
	
	update	pls_lote_evento
	set	nr_seq_lote_pagamento  = NULL
	where	nr_sequencia = nr_seq_lote_evento_w;
	
	delete
	from	pls_lote_evento
	where	nr_sequencia = nr_seq_lote_evento_w;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_pagamento ( nr_seq_lote_p pls_lote_pagamento.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type) FROM PUBLIC;

