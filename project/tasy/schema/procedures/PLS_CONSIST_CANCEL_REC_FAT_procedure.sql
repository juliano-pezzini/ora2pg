-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consist_cancel_rec_fat ( nr_seq_lote_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Consistir o lote de cancelamento de faturamento.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qt_inconsistencia_w	bigint;
nr_seq_fatura_rec_w	bigint;
nr_seq_fatura_w		bigint;
nr_titulo_w		bigint;
ie_situacao_w		varchar(1);
ie_inconsistente_w	varchar(1)	:= 'N';

C01 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.nr_seq_fatura
	from	pls_cancel_rec_fatura a
	where	a.nr_seq_lote	= nr_seq_lote_p;


BEGIN

open C01;
loop
fetch C01 into
	nr_seq_fatura_rec_w,
	nr_seq_fatura_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ie_inconsistente_w := 'N';

	delete	FROM pls_cancel_rec_fat_incons
	where	nr_seq_fatura_rec = nr_seq_fatura_rec_w;

	select	a.nr_titulo
	into STRICT	nr_titulo_w
	from	pls_fatura a
	where	a.nr_sequencia = nr_seq_fatura_w;

	select	ie_situacao
	into STRICT	ie_situacao_w
	from	titulo_receber
	where	nr_titulo	= nr_titulo_w;

	if (ie_situacao_w = '3') then /* Cancelado */
		insert into pls_cancel_rec_fat_incons(nr_sequencia,
			nr_seq_fatura_rec,
			nr_seq_inconsistencia,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nm_usuario,
			dt_atualizacao)
		values (nextval('pls_cancel_rec_fat_incons_seq'),
			nr_seq_fatura_rec_w,
			2,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp());

		ie_inconsistente_w	:= 'S';
	elsif (ie_situacao_w = '2') then /* Liquidado */
		insert into pls_cancel_rec_fat_incons(nr_sequencia,
			nr_seq_fatura_rec,
			nr_seq_inconsistencia,
			nm_usuario_nrec,
			dt_atualizacao_nrec,
			nm_usuario,
			dt_atualizacao)
		values (nextval('pls_cancel_rec_fat_incons_seq'),
			nr_seq_fatura_rec_w,
			1,
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp());

		ie_inconsistente_w	:= 'S';
	end if;

	if (ie_inconsistente_w = 'S') then
		update	pls_cancel_rec_fatura
		set	ie_status	= 'I'
		where	nr_sequencia	= nr_seq_fatura_rec_w;
	else
		update	pls_cancel_rec_fatura
		set	ie_status	= 'C'
		where	nr_sequencia	= nr_seq_fatura_rec_w;
	end if;
	end;
end loop;
close C01;

select	count(1)
into STRICT	qt_inconsistencia_w
from	pls_cancel_rec_fat_incons	a,
	pls_cancel_rec_fatura		b
where	a.nr_seq_fatura_rec	= b.nr_sequencia
and	b.nr_seq_lote		= nr_seq_lote_p  LIMIT 1;

if (qt_inconsistencia_w = 0) then
	update	pls_cancel_rec_fat_lote
	set	ie_status	= 'C',
		dt_consistencia	= clock_timestamp()
	where	nr_sequencia	= nr_seq_lote_p;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consist_cancel_rec_fat ( nr_seq_lote_p bigint, nm_usuario_p text) FROM PUBLIC;

