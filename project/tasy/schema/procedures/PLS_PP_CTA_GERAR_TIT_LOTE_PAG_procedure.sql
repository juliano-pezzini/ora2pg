-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_pp_cta_gerar_tit_lote_pag (nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


nr_seq_log_etapa_w	pls_pp_lote_log_etapa.nr_sequencia%type;
ds_stack_w    		varchar(4000);
ds_msg_processo_w	varchar(2000);
ie_concil_contab_w	pls_visible_false.ie_concil_contab%type;
ie_data_lote_prod_med_w	pls_parametro_contabil.ie_data_lote_prod_med%type;


BEGIN

begin
	-- coloca com status em processamento
	CALL pls_pp_lote_pagamento_pck.atualiza_dados_trabalho_lote(	nr_seq_lote_p, nm_usuario_p);
	
	-- Cancelar os títulos do lote
	CALL pls_pp_cta_canc_tit_lote_pag( nr_seq_lote_p, null, cd_estabelecimento_p, nm_usuario_p);

	-- Faz o carregamento de parâmetros gerais e armazena em variáveis globais
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(391541); -- Lendo parâmetros de configuração
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'T', nm_usuario_p);
	CALL pls_pp_lote_pagamento_pck.carrega_parametros(nr_seq_lote_p, cd_estabelecimento_p);
	CALL pls_pp_gerar_titulo_pck.carrega_parametros(cd_estabelecimento_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'T', nm_usuario_p);

	-- alimenta a tabela temporária pls_pp_prestador_tmp com todos os prestadores da base e seus

	-- respectivos dados complementares (matriz, situação cooperado, etc.)

	-- a idéia é utilizar esta tabela em vários processos futuros dentro da geração do lote
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(391545); -- Selecionando os prestadores que poderão fazer parte do lote
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'T', nm_usuario_p);
	CALL pls_pp_lote_pagamento_pck.alimenta_prestadores_tab_temp(pls_pp_lote_pagamento_pck.dt_referencia_lote_fim_w);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'T', nm_usuario_p);

	-- faz as validações necessárias para saber se os títulos podem ser gerados
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(458052); -- Validando se os títulos podem ser gerados
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'T', nm_usuario_p);
	CALL pls_pp_gerar_titulo_pck.valida_se_gera_titulos(nr_seq_lote_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'T', nm_usuario_p);

	-- gera os títulos a pagar para os prestadores que possuem valores a receber e caso os mesmos possuam tributos e este esteja

	-- configurado para gerar título é feito o vínculo dos tributos ao título e gerado um novo título para cada tributo
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(457915); -- Gerando títulos a pagar para os prestadores
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'T', nm_usuario_p);
	CALL pls_pp_gerar_titulo_pck.gerar_titulo_pagar_lote(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'T', nm_usuario_p);

	-- gera os títulos a receber dos prestadores que possuem valor negativo e a ação a ser tomada é garação de títulos
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(457916); -- Gerando títulos a receber para os prestadores
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'T', nm_usuario_p);
	CALL pls_pp_gerar_titulo_pck.gerar_titulo_receber_lote(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'T', nm_usuario_p);

	-- gera os títulos a pagar para as regras que possuem geração de títulos para terceiros
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(460907); -- Gerando títulos a pagar para terceiros
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'T', nm_usuario_p);
	CALL pls_pp_gerar_titulo_pck.gerar_titulo_pagar_terceiro(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'T', nm_usuario_p);

	-- gera títulos a pagar para os tributos do lote que estiverem configurados para tal, neste processo é pego apenas os prestadores

	-- que não tem valor positivo, os que possuem valor a receber da operadora já são feitos na gerar_titulo_pagar_lote
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(457917); -- Gerando títulos a pagar para os tributos dos prestadores
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'T', nm_usuario_p);
	CALL pls_pp_gerar_titulo_pck.ger_tit_trib_prest_pgto_zerado(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'T', nm_usuario_p);

	-- Atualiza a data de geração dos títulos
	ds_msg_processo_w := wheb_mensagem_pck.get_texto(100332823); -- Finalizando geração dos títulos do lote de pagamento
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'I', ds_msg_processo_w, nr_seq_log_etapa_w, 'T', nm_usuario_p);
	CALL pls_pp_lote_pagamento_pck.atualiza_dados_ger_tit_lote(nr_seq_lote_p, 'S', nm_usuario_p);
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(null, null, 'F', null, nr_seq_log_etapa_w, 'T', nm_usuario_p);

	-- Gravação dos registros para a contabilidade instantânea
	select	max(coalesce(ie_data_lote_prod_med,'C'))
	into STRICT	ie_data_lote_prod_med_w
	from	pls_parametro_contabil
	where	cd_estabelecimento = cd_estabelecimento_p;

	select	coalesce(max(ie_concil_contab), 'N')
	into STRICT	ie_concil_contab_w
	from	pls_visible_false
	where	cd_estabelecimento = cd_estabelecimento_p;

	if (ie_data_lote_prod_med_w = 'T' and ie_concil_contab_w = 'S') then
		CALL pls_ctb_onl_gravar_movto_pck.gravar_movto_gerar_tit_pp(nr_seq_lote_p, cd_estabelecimento_p, nm_usuario_p);
	end if;

exception
when others then
	rollback;
	-- limpa os dados de pagamento

	-- para gerar novamente só desfazendo a geração do anterior
	CALL pls_pp_lote_pagamento_pck.atualiza_dados_ger_tit_lote(nr_seq_lote_p, 'N', nm_usuario_p);

	ds_stack_w := dbms_utility.format_call_stack || pls_util_pck.enter_w ||
		      dbms_utility.format_error_backtrace || pls_util_pck.enter_w ||
		      sqlerrm;
	-- grava log se deu erro
	nr_seq_log_etapa_w := pls_pp_lote_pagamento_pck.grava_tempo_execucao(nr_seq_lote_p, null, 'E', ds_msg_processo_w, nr_seq_log_etapa_w, 'T', nm_usuario_p, ds_stack_w);
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_pp_cta_gerar_tit_lote_pag (nr_seq_lote_p pls_pp_lote.nr_sequencia%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

