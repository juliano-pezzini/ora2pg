-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_regra_benef_congener ( nr_seq_congenere_p bigint, nr_seq_segurado_p bigint, cd_usuario_plano_p text, dt_inicio_vigencia_p timestamp, dt_validade_cartao_p timestamp, nr_via_carteira_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_entrou_regra_p INOUT text) AS $body$
DECLARE

			
qt_regras_congenere_w		bigint;
nr_seq_intercambio_w		bigint;
nr_seq_pagador_w		bigint;
qt_carteiras_w			bigint;
ie_entrou_regra_w		varchar(1);
ie_tipo_congenere_w		varchar(1);
ie_tipo_segurado_w		varchar(1);
nr_seq_seg_contrato_w		bigint;
nr_seq_carteira_w		bigint;
ds_trilha1_w			varchar(255);
ds_trilha2_w			varchar(255);
ds_trilha3_w			varchar(255);
ds_trilha_qr_code_w			varchar(255);
nr_seq_regra_eventual_w		bigint;
nr_seq_regra_w			bigint;
qt_posicao_inicial_w		bigint;
qt_posicao_final_w		bigint;
qt_final_empresa_w		bigint;
cd_empresa_w			bigint;
qt_regras_empresa_w		bigint;
cd_empresa_operadora_w		bigint;
ie_gerar_cartao_w		varchar(10);
nr_seq_emissor_w		bigint;
ie_tipo_repasse_w		varchar(1);

/*
ie_tipo_congenere_w
C - Cooperativa
O - Operadora congenere
*/
C01 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_benef_eventual
	where	((ie_tipo_congenere_w	= 'O' and nr_seq_congenere	= nr_seq_congenere_p) or (ie_tipo_congenere_w	= 'C' and nr_seq_coop_congenere	= nr_seq_congenere_p))
	order by CASE WHEN coalesce(qt_posicao_inicial::text, '') = '' THEN +1  ELSE -1 END;


BEGIN

ie_entrou_regra_w	:= 'N';
nr_seq_regra_w		:= null;

select	count(*)
into STRICT	qt_regras_congenere_w
from	pls_regra_benef_eventual
where	nr_seq_congenere	= nr_seq_congenere_p
and	cd_estabelecimento	= cd_estabelecimento_p;	

if (qt_regras_congenere_w = 0) then
	select	count(*)
	into STRICT	qt_regras_congenere_w
	from	pls_regra_benef_eventual
	where	nr_seq_coop_congenere	= nr_seq_congenere_p
	and	cd_estabelecimento	= cd_estabelecimento_p;
	
	if (qt_regras_congenere_w > 0) then
		ie_tipo_congenere_w	:= 'C';
	end if;
else
	ie_tipo_congenere_w	:= 'O';
end if;

begin
select	count(*)
into STRICT	qt_carteiras_w
from	pls_segurado_carteira
where	cd_usuario_plano	= cd_usuario_plano_p
and	cd_estabelecimento	= cd_estabelecimento_p;
exception
when others then
	qt_carteiras_w		:= 1;
end;

if (qt_regras_congenere_w > 0) then
	open C01;
	loop
	fetch C01 into	
		nr_seq_regra_eventual_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		
		/*Caso achou regra, sai do cursor*/

		if (ie_entrou_regra_w = 'S') then
			exit;
		end if;
		
		/*Buscar informações da regra*/

		select	qt_posicao_inicial,
			qt_posicao_final
		into STRICT	qt_posicao_inicial_w,
			qt_posicao_final_w
		from	pls_regra_benef_eventual
		where	nr_sequencia	= nr_seq_regra_eventual_w;
		
		if (qt_posicao_final_w IS NOT NULL AND qt_posicao_final_w::text <> '') and (qt_posicao_inicial_w IS NOT NULL AND qt_posicao_inicial_w::text <> '') then
			qt_final_empresa_w	:= (qt_posicao_final_w - qt_posicao_inicial_w) + 1;
			/*Busca o código da empresa da carteira do beneficiário*/

			cd_empresa_w		:= substr(cd_usuario_plano_p,qt_posicao_inicial_w,qt_final_empresa_w);
			
			if (cd_empresa_w IS NOT NULL AND cd_empresa_w::text <> '') then
				/*Verificar se exista aquela empresa na regra do usuário eventual*/

				select	count(*)
				into STRICT	qt_regras_empresa_w
				from	pls_regra_benef_event_iden
				where	nr_seq_regra_eventual	= nr_seq_regra_eventual_w
				and	cd_identificacao	= cd_empresa_w;
				
				/*Caso existir, verificar se existe uma empresa PJ com o código de empresa*/

				if (qt_regras_empresa_w	> 0) then
					ie_entrou_regra_w	:= 'S';
					nr_seq_regra_w		:= nr_seq_regra_eventual_w;
				end if;
			end if;
		else
			ie_entrou_regra_w	:= 'S';
			nr_seq_regra_w		:= nr_seq_regra_eventual_w;
		end if;
		
		end;
	end loop;
	close C01;	
	
	if (ie_entrou_regra_w	= 'S') then
		select	nr_seq_contrato_intercambio,
			nr_seq_pagador,
			CASE WHEN ie_tipo_segurado='C' THEN CASE WHEN ie_tipo_congenere_w='O' THEN 'C' WHEN ie_tipo_congenere_w='C' THEN 'T' END   ELSE 'I' END
		into STRICT	nr_seq_intercambio_w,
			nr_seq_pagador_w,
			ie_tipo_segurado_w
		from	pls_regra_benef_eventual
		where	nr_sequencia	= nr_seq_regra_w;
		
		select  coalesce(max(nr_seq_seg_contrato),0) + 1
		into STRICT	nr_seq_seg_contrato_w
		from    pls_segurado
		where   nr_seq_intercambio	= nr_seq_intercambio_w;
		
		select	max(cd_operadora_empresa)
		into STRICT	cd_empresa_operadora_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_p;
		
		if (coalesce(cd_empresa_operadora_w::text, '') = '') then
			select	max(cd_operadora_empresa),
				max(ie_tipo_repasse)
			into STRICT	cd_empresa_operadora_w,
				ie_tipo_repasse_w
			from	pls_intercambio
			where	nr_sequencia	= nr_seq_intercambio_w;
		end if;
			
		update	pls_segurado
		set	nr_seq_intercambio	= nr_seq_intercambio_w,
			nr_seq_pagador		= nr_seq_pagador_w,
			ie_tipo_segurado	= ie_tipo_segurado_w,
			dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p,
			nr_seq_seg_contrato	= nr_seq_seg_contrato_w,
			cd_operadora_empresa	= cd_empresa_operadora_w,
			ie_tipo_repasse		= ie_tipo_repasse_w,
			dt_alteracao_tipo_segurado = CASE WHEN ie_tipo_segurado=ie_tipo_segurado_w THEN  dt_alteracao_tipo_segurado  ELSE trunc(clock_timestamp(),'dd') END
		where	nr_sequencia		= nr_seq_segurado_p;
		
		if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
			insert into pls_segurado_pagador(nr_sequencia, dt_atualizacao, nm_usuario,
				nr_seq_segurado, nr_seq_pagador, dt_inicio_vigencia
				)
			values (nextval('pls_segurado_pagador_seq'), clock_timestamp(), nm_usuario_p,
				 nr_seq_segurado_p, nr_seq_pagador_w, trunc(clock_timestamp(),'month')
				);
		end if;
		
		/*Atualizar a familia do beneficiário no contrato*/

		CALL pls_atualizar_familia_pf(nr_seq_segurado_p,cd_estabelecimento_p,nm_usuario_p);		
		
		/*aaschlote 22/05/2012 OS - 449125*/

		CALL pls_isentar_caren_benef_inter(nr_seq_segurado_p,cd_estabelecimento_p,nm_usuario_p);
				
		CALL pls_gerar_segurado_historico(	nr_seq_segurado_p, '53', clock_timestamp(), 'Cadastro realizado através da função OPS - Identificação de Beneficiário',
						'pls_gerar_regra_benef_congener', null, null, null,
						null, null, null, null,
						null, null, null, null,
						nm_usuario_p, 'N');				
		
		if (coalesce(nr_seq_congenere_p,0) <> 0) then
			select	ie_gerar_cartao,
				nr_seq_emissor
			into STRICT	ie_gerar_cartao_w,
				nr_seq_emissor_w
			from	pls_congenere
			where	nr_sequencia	= nr_seq_congenere_p
			and	ie_situacao	= 'A';
			
			if (ie_gerar_cartao_w = 'S') and (coalesce(nr_seq_emissor_w,0) <> 0) then
				CALL pls_gerar_carteira_usuario(nr_seq_segurado_p,null,dt_inicio_vigencia_p,dt_validade_cartao_p,'D','N',nr_seq_emissor_w,nm_usuario_p);
			elsif (coalesce(cd_usuario_plano_p,'0') <> '0') and (qt_carteiras_w = 0) then
				select	nextval('pls_segurado_carteira_seq')
				into STRICT	nr_seq_carteira_w
				;
				
				insert into pls_segurado_carteira(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
						nr_seq_segurado, dt_inicio_vigencia, dt_validade_carteira, cd_usuario_plano,
						ie_situacao, cd_estabelecimento,nr_via_solicitacao	)
				values (	nr_seq_carteira_w, clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p,
						nr_seq_segurado_p, dt_inicio_vigencia_p, dt_validade_cartao_p, cd_usuario_plano_p,
						'D', cd_estabelecimento_p,nr_via_carteira_p);
						
				SELECT * FROM pls_obter_trilhas_cartao(nr_seq_segurado_p, ds_trilha1_w, ds_trilha2_w, ds_trilha3_w, ds_trilha_qr_code_w, nm_usuario_p) INTO STRICT ds_trilha1_w, ds_trilha2_w, ds_trilha3_w, ds_trilha_qr_code_w;
				
				update	pls_segurado_carteira
				set	ds_trilha1		= ds_trilha1_w,
					ds_trilha2		= ds_trilha2_w,
					ds_trilha3		= ds_trilha3_w,
					ds_trilha_qr_code	= ds_trilha_qr_code_w
				where	nr_sequencia	= nr_seq_carteira_w;
						
				CALL pls_alterar_estagios_cartao(nr_seq_carteira_w,clock_timestamp(),1,cd_estabelecimento_p,nm_usuario_p);
			end if;
		end if;
	end if;
end if;

ie_entrou_regra_p	:= ie_entrou_regra_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_regra_benef_congener ( nr_seq_congenere_p bigint, nr_seq_segurado_p bigint, cd_usuario_plano_p text, dt_inicio_vigencia_p timestamp, dt_validade_cartao_p timestamp, nr_via_carteira_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_entrou_regra_p INOUT text) FROM PUBLIC;

