-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_ocor_aut_benef ( nr_seq_ocor_filtro_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, ie_gerar_ocorrencia_p INOUT text, ie_tipo_ocorrencia_p INOUT text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
Rotina utilizada para validar as informacoes do beneficiario com os filtros definidos na regra
de ocorrencia combinada
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  ]  Objetos do dicionario [ x] Tasy (Delphi/Java) [  x] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao: Performance
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */


/*
IE_TIPO_OCORRENCIA_W	= C - Gera a ocorrencia para o cabecalho
			= I - Gera ocorrencia para os itens
*/
nr_seq_ocor_aut_benef_w		pls_ocor_aut_filtro_benef.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_requisicao_w		pls_requisicao.nr_sequencia%type;
ie_gerar_ocorrencia_w		varchar(2)	:= 'N';
ie_tipo_segurado_w		varchar(2);
ie_regra_com_itens_w		varchar(1);
ie_sexo_w			varchar(1);
ie_idade_w			integer;
dt_inclusao_operadora_w		timestamp;
dt_solicitacao_w		timestamp;
dt_regra_w			timestamp;
ie_situacao_atend_seg_w 	varchar(1);
qt_processo_judicial_w		bigint	:= 0;	
qt_processo_judicial_benef_w	bigint	:= 0;
nr_seq_contrato_w		pls_contrato.nr_sequencia%type;
ie_pcmso_w			pls_segurado.ie_pcmso%type;
nr_seq_titular_w		pls_segurado.nr_seq_titular%type;
ie_titularidade_w		varchar(1);
ie_tipo_repasse_w		pls_segurado.ie_tipo_repasse%type;
cd_categoria_w			pls_ocor_aut_filtro_benef.cd_categoria%type;
cd_convenio_w			pls_ocor_aut_filtro_benef.cd_convenio%type;
ie_glosar_cart_w		varchar(1);
ie_nascido_plano_w		pls_segurado.ie_nascido_plano%type;
ie_excecao_w			pls_ocor_aut_filtro.ie_excecao%type;
cd_ocorrencia_w			varchar(10);
ie_tratamento_w			varchar(2)	:= 'N';
nr_seq_ocorrencia_w		pls_ocor_aut_combinada.nr_seq_ocorrencia%type;
qt_proc_w			integer := 0;
qt_desbloqueio_w		bigint := 0;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;

C01 CURSOR FOR
	SELECT	nr_sequencia,
		qt_tempo_contratacao,
		ie_tipo_tempo,
                ie_recem_nascido,
                qt_dias_recem_nasc,
                ie_beneficiario_tratamento,
		nr_seq_tipo_processo,
		nr_seq_regra_atend_cart,
		ie_pcmso,
		ie_nascido_plano,
		ie_cartao_bloqueado,
		ie_possui_liminar
	from	pls_ocor_aut_filtro_benef
	where	nr_seq_ocor_aut_filtro	= nr_seq_ocor_filtro_p
	and	ie_situacao		= 'A'
	and (coalesce(nr_seq_segurado::text, '') = ''	or nr_seq_segurado	= nr_seq_segurado_w)
	and (coalesce(ie_tipo_segurado::text, '') = '' or ie_tipo_segurado	= ie_tipo_segurado_w)
	and (coalesce(ie_sexo::text, '') = '' or ie_sexo		= ie_sexo_w)
	and (coalesce(qt_idade_min::text, '') = '' or ie_idade_w		>= qt_idade_min)
	and (coalesce(qt_idade_max::text, '') = '' or ie_idade_w		<= qt_idade_max)
	and 	((coalesce(ie_situacao_atend::text, '') = '') or (ie_situacao_atend = ie_situacao_atend_seg_w))
	and	((coalesce(ie_tipo_repasse::text, '') = '') or (ie_tipo_repasse		= ie_tipo_repasse_w))
	and	((coalesce(ie_titularidade::text, '') = '') or (ie_titularidade 		= ie_titularidade_w))
	and	((coalesce(cd_convenio::text, '') = '') or (cd_convenio 		= cd_convenio_w))
	and	((coalesce(cd_categoria::text, '') = '') or (cd_categoria 		= cd_categoria_w));

BEGIN
if (nr_seq_guia_p IS NOT NULL AND nr_seq_guia_p::text <> '') then
	begin
		select	nr_seq_segurado,
			dt_solicitacao
		into STRICT	nr_seq_segurado_w,
			dt_solicitacao_w
		from	pls_guia_plano
		where	nr_sequencia	= nr_seq_guia_p;
	exception
	when others then
		nr_seq_segurado_w	:= null;
		dt_solicitacao_w	:= null;
	end;
elsif (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') then
	begin
		select	nr_seq_segurado,
			dt_requisicao
		into STRICT	nr_seq_segurado_w,
			dt_solicitacao_w
		from	pls_requisicao
		where	nr_sequencia	= nr_seq_requisicao_p;
	exception
	when others then
		nr_seq_segurado_w	:= null;
		dt_solicitacao_w	:= null;
	end;
elsif (nr_seq_execucao_p IS NOT NULL AND nr_seq_execucao_p::text <> '') then
	begin
		select	nr_seq_requisicao
		into STRICT	nr_seq_requisicao_w
		from	pls_execucao_requisicao
		where	nr_sequencia	= nr_seq_execucao_p;
	exception
	when others then
		nr_seq_requisicao_w	:= null;
	end;

	if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then
		begin
			select	nr_seq_segurado,
				dt_requisicao
			into STRICT	nr_seq_segurado_w,
				dt_solicitacao_w
			from	pls_requisicao
			where	nr_sequencia	= nr_seq_requisicao_w;
		exception
		when others then
			nr_seq_segurado_w	:= null;
			dt_solicitacao_w	:= null;
		end;
	end if;
end if;

if (nr_seq_segurado_w IS NOT NULL AND nr_seq_segurado_w::text <> '') then		
	begin
		select	b.ie_tipo_segurado,
			a.ie_sexo,
			(obter_idade_pf(a.cd_pessoa_fisica, clock_timestamp(), 'A'))::numeric ,
			b.dt_inclusao_operadora,
			b.ie_situacao_atend,
			b.nr_seq_contrato,
			b.nr_seq_titular,
			b.ie_pcmso,
			pls_obter_conv_cat_segurado(b.nr_sequencia, 1),
			pls_obter_conv_cat_segurado(b.nr_sequencia, 2),
			b.ie_nascido_plano,
			b.cd_pessoa_fisica
		into STRICT	ie_tipo_segurado_w,
			ie_sexo_w,
			ie_idade_w,
			dt_inclusao_operadora_w,
			ie_situacao_atend_seg_w,
			nr_seq_contrato_w,
			nr_seq_titular_w,
			ie_pcmso_w,
			cd_convenio_w,
			cd_categoria_w,
			ie_nascido_plano_w,
			cd_pessoa_fisica_w
		from	pessoa_fisica a,
			pls_segurado b
		where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
		and	b.nr_sequencia 		= nr_seq_segurado_w;
	exception
	when others then
		nr_seq_contrato_w 	:= 0;
		cd_convenio_w		:= 0;
		cd_categoria_w		:= '0';
		nr_seq_titular_w	:= null;
		ie_tipo_segurado_w 	:= null;
		ie_situacao_atend_seg_w := null;
	end;
	
	--Verifica se possui algum cartao com dt debloqueio que a data de validade seja maior ou igual a data de solicitacao para o segurado
	select	count(1)
	into STRICT	qt_desbloqueio_w
	from	pls_segurado_carteira
	where	(dt_desbloqueio IS NOT NULL AND dt_desbloqueio::text <> '')
	and	fim_dia(dt_validade_carteira) >= dt_solicitacao_w
	and	nr_seq_segurado		= nr_seq_segurado_w;
	
	--Se nao achar nenhuma carteira atual desbloqueada verifica as vias anteriores para identificar se possui uma via com data de validade futura e desbloqueada	
	if (qt_desbloqueio_w = 0) then
		select 	count(1)
		into STRICT	qt_desbloqueio_w
		from	pls_segurado_cart_ant
		where	(dt_desbloqueio IS NOT NULL AND dt_desbloqueio::text <> '')
		and	fim_dia(dt_validade) >= dt_solicitacao_w
		and	nr_seq_segurado	= nr_seq_segurado_w;		
	end if;
end if;

select	CASE WHEN coalesce(nr_seq_titular_w::text, '') = '' THEN  'T'  ELSE 'D' END
into STRICT	ie_titularidade_w
;

if (ie_tipo_segurado_w in ('I', 'C', 'T', 'H')) then /* Se responsabilidade assumida, verifica o tipo de repasse do beneficiario */
		
	begin
	select	ie_tipo_repasse
	into STRICT	ie_tipo_repasse_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_w;
	exception
	when others then
		ie_tipo_repasse_w	:= 'X';
	end;
else /* Se a responsabilidade nao for assumida, significa que o beneficiario e da propria operadora, entao verifica o tipo de repasse que o beneficiario foi transferido */
	
	begin
	select	ie_tipo_repasse
	into STRICT	ie_tipo_repasse_w
	from	pls_segurado_repasse
	where	nr_seq_segurado	= nr_seq_segurado_w
	and	clock_timestamp()	between	dt_repasse and fim_dia(dt_fim_repasse)
	and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');
	exception
	when others then
		ie_tipo_repasse_w	:= 'X';
	end;
end if;

for r_C01_w in C01 loop
	
	ie_gerar_ocorrencia_w	:= 'S';
	
	if ((r_C01_w.qt_tempo_contratacao IS NOT NULL AND r_C01_w.qt_tempo_contratacao::text <> '') or (coalesce(r_C01_w.qt_tempo_contratacao,0) <> 0 )) then				
		if (r_C01_w.ie_tipo_tempo	= 'D') then
			dt_regra_w	:= trunc(dt_inclusao_operadora_w + (r_C01_w.qt_tempo_contratacao));
		elsif (r_C01_w.ie_tipo_tempo	= 'M') then
			dt_regra_w	:= (add_months(dt_inclusao_operadora_w, + r_C01_w.qt_tempo_contratacao));
		elsif (r_C01_w.ie_tipo_tempo	= 'A') then
			dt_regra_w	:= (add_months(dt_inclusao_operadora_w, + r_C01_w.qt_tempo_contratacao * 12)); /* Vezes 12 meses ao ano */
		end if;

		if (dt_solicitacao_w	< dt_regra_w) then
			ie_gerar_ocorrencia_w	:= 'S';
		else
			ie_gerar_ocorrencia_w	:= 'N';
		end if;
	end if;
	
	if   ((r_C01_w.ie_recem_nascido = 'S') or (r_C01_w.qt_dias_recem_nasc IS NOT NULL AND r_C01_w.qt_dias_recem_nasc::text <> '') and (ie_gerar_ocorrencia_w = 'S')) then		
		if (pls_obter_se_ocorr_recem_nasc(nr_seq_guia_p, nr_seq_requisicao_p, nr_seq_execucao_p, r_C01_w.ie_recem_nascido, r_C01_w.qt_dias_recem_nasc)	= 'S') then
			ie_gerar_ocorrencia_w	:= 'S';
		else
			ie_gerar_ocorrencia_w	:= 'N';
		end if;
	end if;
	
	if	((coalesce(r_C01_w.ie_beneficiario_tratamento,'N')	= 'S') and (ie_gerar_ocorrencia_w = 'S')) then
		if (pls_obter_se_tratamento_benef(dt_solicitacao_w,nr_seq_segurado_w)	= 'S') then
			ie_tratamento_w := 'S';
			ie_gerar_ocorrencia_w := 'S';
		else
			ie_gerar_ocorrencia_w := 'N';
		end if;
	end if;
	
	if 	((coalesce(r_C01_w.nr_seq_tipo_processo,0)	> 0) and (ie_gerar_ocorrencia_w = 'S')) then
		select	count(*)
		into STRICT	qt_processo_judicial_w
		from	processo_judicial_liminar
		where	(((coalesce(ie_considera_codigo_pf, 'N') = 'N'	and nr_seq_segurado	= nr_seq_segurado_w)
		or (coalesce(ie_considera_codigo_pf, 'N') = 'S'		and pls_obter_dados_segurado(nr_seq_segurado, 'PF')	= cd_pessoa_fisica_w))
		or	nr_seq_contrato		= nr_seq_contrato_w)
		and	ie_impacto_autorizacao	= 'S'
		and	nr_seq_tipo_processo	= r_C01_w.nr_seq_tipo_processo
		and	ie_estagio		= 2
		and	dt_solicitacao_w between trunc(dt_inicio_validade) and fim_dia(coalesce(dt_fim_validade,dt_solicitacao_w));
		
		if (qt_processo_judicial_w > 0) then
			ie_gerar_ocorrencia_w := 'S';
		else
			ie_gerar_ocorrencia_w := 'N';
		end if;
	end if;
	
	if	(r_C01_w.nr_seq_regra_atend_cart IS NOT NULL AND r_C01_w.nr_seq_regra_atend_cart::text <> '' AND ie_gerar_ocorrencia_w = 'S') then
			
		ie_glosar_cart_w := pls_consistir_regra_atend_cart(nr_seq_segurado_w, r_C01_w.nr_seq_regra_atend_cart, ie_glosar_cart_w);

		if (ie_glosar_cart_w = 'S') then
			ie_gerar_ocorrencia_w := 'S';
		else
			ie_gerar_ocorrencia_w := 'N';
		end if;	
	
	end if;
	
	if	((coalesce(r_C01_w.ie_pcmso,'N') = 'S') and (ie_gerar_ocorrencia_w = 'S')) then
			
		if (coalesce(ie_pcmso_w,'N') = r_C01_w.ie_pcmso) then
			ie_gerar_ocorrencia_w := 'S';
		else
			ie_gerar_ocorrencia_w := 'N';
		end if;	
	
	end if;
	
	if	((coalesce(r_C01_w.ie_nascido_plano,'N') = 'S') and (ie_gerar_ocorrencia_w = 'S')) then
		if (coalesce(ie_nascido_plano_w,'N') = r_C01_w.ie_nascido_plano) then
			ie_gerar_ocorrencia_w := 'S';
		else
			ie_gerar_ocorrencia_w := 'N';
		end if;	
		
	end if;
	
	if (coalesce(r_C01_w.ie_cartao_bloqueado,'N') = 'S') and (ie_gerar_ocorrencia_w = 'S') then
		if (qt_desbloqueio_w = 0) and (ie_tipo_segurado_w in ('A', 'B')) then
			ie_gerar_ocorrencia_w	:= 'S';
		else
			ie_gerar_ocorrencia_w	:= 'N';
		end if;
	end if;

	if 	((coalesce(r_C01_w.ie_possui_liminar, 'N') = 'S') and (ie_gerar_ocorrencia_w = 'S')) then
		select	count(*)
		into STRICT	qt_processo_judicial_benef_w
		from	processo_judicial_liminar
		where	(((coalesce(ie_considera_codigo_pf, 'N') = 'N'	and nr_seq_segurado	= nr_seq_segurado_w)
		or (coalesce(ie_considera_codigo_pf, 'N') = 'S'		and pls_obter_dados_segurado(nr_seq_segurado, 'PF')	= cd_pessoa_fisica_w))
		or	nr_seq_contrato		= nr_seq_contrato_w)
		and	ie_impacto_autorizacao	= 'S'
		and	ie_estagio		= 2
		and	dt_solicitacao_w between trunc(dt_inicio_validade) and fim_dia(coalesce(dt_fim_validade,dt_solicitacao_w));

		if (qt_processo_judicial_benef_w > 0) then
			ie_gerar_ocorrencia_w := 'S';
		else
			ie_gerar_ocorrencia_w := 'N';
		end if;
	end if;

	if (ie_gerar_ocorrencia_w	= 'S') then
		exit;
        end if;
end loop;

select	ie_excecao
into STRICT	ie_excecao_w
from	pls_ocor_aut_filtro
where	nr_sequencia = nr_seq_ocor_filtro_p;

select	count(1)
into STRICT	qt_proc_w
from	pls_requisicao_proc
where	nr_seq_requisicao	= nr_seq_requisicao_p;

if (ie_tratamento_w = 'S') and (ie_gerar_ocorrencia_w = 'S') and (ie_excecao_w = 'S') and (nr_seq_requisicao_p IS NOT NULL AND nr_seq_requisicao_p::text <> '') and (qt_proc_w > 0) then

	select	max(a.nr_seq_ocorrencia)
	into STRICT	nr_seq_ocorrencia_w
	from	pls_ocor_aut_combinada a
	where	a.nr_sequencia = (	SELECT	max(b.nr_seq_ocor_aut_combinada)
					from	pls_ocor_aut_filtro b
					where	b.nr_sequencia = nr_seq_ocor_filtro_p);

	update	pls_requisicao_proc
	set	nr_seq_tratamento	= pls_obter_tratamento_benef(dt_solicitacao_w, nr_seq_segurado_w)
	where	nr_seq_requisicao	= nr_seq_requisicao_p;

	select	pls_obter_codigo_ocorrencia(nr_seq_ocorrencia_w)
	into STRICT	cd_ocorrencia_w
	;

	CALL pls_requisicao_gravar_hist(nr_seq_requisicao_p,'L',
				wheb_mensagem_pck.get_texto(1128040,'CD_OCORRENCIA=' || cd_ocorrencia_w),
				'',nm_usuario_p);
end if;

if (ie_gerar_ocorrencia_w = 'S') then
	ie_regra_com_itens_w  :=  pls_obter_se_oco_aut_fil_itens(nr_seq_ocor_filtro_p);

	if (ie_regra_com_itens_w = 'S') then
		ie_tipo_ocorrencia_p := 'I';
	else
		ie_tipo_ocorrencia_p := 'C';
	end if;
end if;

ie_gerar_ocorrencia_p	:= ie_gerar_ocorrencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_ocor_aut_benef ( nr_seq_ocor_filtro_p bigint, nr_seq_guia_p bigint, nr_seq_requisicao_p bigint, nr_seq_execucao_p bigint, nr_seq_param1_p bigint, nr_seq_param2_p bigint, nr_seq_param3_p bigint, nr_seq_param4_p bigint, nr_seq_param5_p bigint, nm_usuario_p text, ie_gerar_ocorrencia_p INOUT text, ie_tipo_ocorrencia_p INOUT text) FROM PUBLIC;

