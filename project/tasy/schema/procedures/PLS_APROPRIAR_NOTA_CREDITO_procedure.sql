-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_apropriar_nota_credito ( nr_seq_pagador_p bigint, nr_seq_mensalidade_p bigint, nm_usuario_p text) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
------------------------------------------------------------------------------------------------------------------- 
Referências: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
 
ie_acao_w			varchar(3);
vl_nota_w			double precision	:= null;
vl_mens_total_w			double precision	:= null;
vl_alteracao_w			double precision	:= null;
vl_alt_mens_w			double precision	:= null;
vl_rateio_w			double precision	:= null;
vl_rateado_w			double precision	:= null;
vl_notas_w			double precision	:= null;
nr_seq_regra_w			bigint;
nr_seq_nota_w			bigint;
qt_mensalidade_w		bigint	:= 0;
nr_seq_mensalidade_seg_w	bigint;
nr_seq_max_mens_seg_w		bigint;
nr_seq_item_mensalidade_w	pls_mensalidade_seg_item.nr_sequencia%type;

/* Este cursor busca o valor de saldo das notas do pagador*/
 
C01 CURSOR FOR 
	SELECT	n.nr_sequencia, 
		coalesce(n.vl_saldo,0) vl_saldo 
	from	nota_credito		n 
	where	n.nr_seq_pagador_aprop	= nr_seq_pagador_p 
	and	n.ie_situacao		= 'A' 
	and	n.vl_saldo	> 0;

/* Este cursor varre todas as mensalidaddes de segurados da mensalidade do parâmetro */
	 
C02 CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	pls_mensalidade_segurado 	a, 
		pls_segurado			b 
	where	b.nr_sequencia = a.nr_seq_segurado 
	and	a.nr_seq_mensalidade	= nr_seq_mensalidade_p 
	and (coalesce(b.dt_rescisao::text, '') = '' or 
		trunc(b.dt_rescisao,'month') > trunc(a.dt_mesano_referencia,'month')) 
	and	exists (	SELECT	1 
			from	pls_mensalidade_seg_item x 
			where	a.nr_sequencia = x.nr_seq_mensalidade_seg);


BEGIN 
/* Obtem o valor da mensalidade */
 
begin 
select	sum(vl_item) 
into STRICT	vl_mens_total_w 
from	pls_mensalidade_seg_item	a, 
	pls_mensalidade_segurado	b, 
	pls_mensalidade			c, 
	pls_segurado			d 
where	a.nr_seq_mensalidade_seg	= b.nr_sequencia 
and	b.nr_seq_mensalidade		= c.nr_sequencia 
and	d.nr_sequencia			= b.nr_seq_segurado 
and (coalesce(d.dt_rescisao::text, '') = '' or 
	trunc(d.dt_rescisao,'month') > trunc(b.dt_mesano_referencia,'month')) 
and	c.nr_sequencia			= nr_seq_mensalidade_p;
exception 
when others then 
	vl_mens_total_w	:= 0;
end;
 
vl_alt_mens_w	:= coalesce(vl_mens_total_w,0);
 
open C01;
loop 
fetch C01 into 
	nr_seq_nota_w, 
	vl_nota_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	if (coalesce(vl_alt_mens_w, 0) > 0) then /* Se tiver valor de mensalidade para descontar o valor da nota */
 
		if (vl_nota_w < vl_alt_mens_w) then /* Se o valor do saldo da nota for menor que o valor atual da mensalidade - Atualiza o valor atual da mensalidade e baixa total a nota*/
 
			vl_alteracao_w	:= vl_nota_w;
			vl_alt_mens_w	:= vl_alt_mens_w - vl_alteracao_w;
		elsif (vl_nota_w > vl_alt_mens_w) then /* Se o valor do saldo da nota for maior ou igual - Zera o valor atual da mensalidade e baixa diferença da nota */
 
			vl_alteracao_w	:= vl_alt_mens_w;
			vl_alt_mens_w	:= 0;
		elsif (vl_nota_w = vl_alt_mens_w) then 
			vl_alteracao_w	:= vl_nota_w;
			vl_alt_mens_w	:= 0;
		end if;
		 
		if (coalesce(vl_alteracao_w,0) <> 0) then 
			/* Obtem valor para rateio */
 
			if (vl_alt_mens_w = 0) then 
				vl_rateio_w	:= coalesce(vl_mens_total_w,0);
			elsif (vl_alt_mens_w	> 0) then 
				vl_rateio_w	:= vl_alteracao_w;
			elsif (coalesce(vl_alt_mens_w::text, '') = '') then 
				vl_rateio_w	:= null;
			end if;
			 
			if (coalesce(vl_rateio_w, 0) <> 0) then 
				/* Obtem quantidade das mensalidades */
 
				select	count(1) 
				into STRICT	qt_mensalidade_w 
				from	pls_mensalidade_segurado	a, 
					pls_segurado			b 
				where	b.nr_sequencia		= a.nr_seq_segurado 
				and	a.nr_seq_mensalidade	= nr_seq_mensalidade_p 
				and (coalesce(b.dt_rescisao::text, '') = '' or 
					trunc(b.dt_rescisao,'month') > trunc(a.dt_mesano_referencia,'month')) 
				and	exists (	SELECT	1 
						from	pls_mensalidade_seg_item x 
						where	a.nr_sequencia = x.nr_seq_mensalidade_seg);
				 
				/* Realiza rateio */
 
				select	dividir_sem_round(vl_rateio_w, qt_mensalidade_w) 
				into STRICT	vl_rateado_w 
				;
				 
				vl_rateado_w	:= vl_rateado_w * -1;
				 
				open C02;
				loop 
				fetch C02 into 
					nr_seq_mensalidade_seg_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin 
					if (coalesce(vl_rateado_w, 0) <> 0) then 
					 
					nr_seq_item_mensalidade_w	:= null;
					 
					nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('27', nm_usuario_p, null, null, null, null, null, null, null, 'N', null, null, null, null, null, null, null, nr_seq_mensalidade_seg_w, null, nr_seq_nota_w, null, null, null, null, null, null, null, null, null, null, null, vl_rateado_w, nr_seq_item_mensalidade_w);
						 
						if (nr_seq_item_mensalidade_w IS NOT NULL AND nr_seq_item_mensalidade_w::text <> '') then 
							CALL atualizar_saldo_nota_credito(nr_seq_nota_w, nm_usuario_p);
						end if;
					end if;
					end;
				end loop;
				close C02;
				 
				/* Realiza arredondamento */
 
				select	sum(a.vl_item) 
				into STRICT	vl_notas_w 
				from	pls_mensalidade_seg_item a, 
					pls_mensalidade_segurado b, 
					pls_mensalidade		c 
				where	a.nr_seq_mensalidade_seg	= b.nr_sequencia 
				and	b.nr_seq_mensalidade		= c.nr_sequencia 
				and	c.nr_sequencia			= nr_seq_mensalidade_p 
				and	a.ie_tipo_item			= '27' 
				and	a.nr_seq_nota_credito		= nr_seq_nota_w;
				 
				if	(vl_notas_w <> (vl_rateio_w * -1)) then 
					select	max(a.nr_sequencia) /* Pega última mensalidade */
 
					into STRICT	nr_seq_max_mens_seg_w 
					from	pls_mensalidade_seg_item a, 
						pls_mensalidade_segurado b, 
						pls_mensalidade		c 
					where	a.nr_seq_mensalidade_seg	= b.nr_sequencia 
					and	b.nr_seq_mensalidade		= c.nr_sequencia 
					and	c.nr_sequencia			= nr_seq_mensalidade_p 
					and	a.nr_seq_nota_credito		= nr_seq_nota_w;
					 
					if (nr_seq_max_mens_seg_w IS NOT NULL AND nr_seq_max_mens_seg_w::text <> '') then 
						update	pls_mensalidade_seg_item 
						set	vl_item		= vl_item - (vl_notas_w + vl_rateio_w ) 
						where	nr_sequencia	= nr_seq_max_mens_seg_w;
						 
						CALL atualizar_saldo_nota_credito(nr_seq_nota_w, nm_usuario_p);
					end if;
				end if;
				/* Fim arredondamento*/
 
			end if;
		end if;
	end if;
	end;
end loop;
close C01;
 
--commit; 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_apropriar_nota_credito ( nr_seq_pagador_p bigint, nr_seq_mensalidade_p bigint, nm_usuario_p text) FROM PUBLIC;

