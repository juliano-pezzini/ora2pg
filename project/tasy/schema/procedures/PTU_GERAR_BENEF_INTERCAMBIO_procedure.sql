-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_gerar_benef_intercambio ( nr_seq_intercambio_p bigint, nr_seq_benef_p bigint, nr_seq_motivo_rescisao_p bigint, ie_alterar_dados_prest_p text, ie_gerar_renovacao_p text, ie_acao_contrato_p text, ie_vincular_pag_coop_a100_p text, nr_seq_intercambio_incos_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


cd_cgc_cpf_w			varchar(20);
cd_unimed_w			varchar(10);
cd_familia_w			integer;
nm_benef_abreviado_w		varchar(25);
cd_plano_intercambio_w		varchar(3);
dt_nascimento_w			timestamp;
ie_sexo_w			varchar(1);
ie_estado_civil_w		varchar(1);
dt_inclusao_w			timestamp;
ie_repasse_w			varchar(1);
cd_dependencia_w		smallint;
cd_local_atendimento_w		smallint;
dt_repasse_w			timestamp;
dt_inclusao_plano_dest_w	timestamp;
nr_rg_w				varchar(15);
sg_uf_rg_w			valor_dominio.vl_dominio%type;
dt_exclusao_w			timestamp;
ie_recem_nascido_w		varchar(1);
nr_matricula_w			numeric(20);
dt_validade_carteira_w		timestamp;
cd_lotacao_w			varchar(8);
ds_lotacao_w			varchar(30);
dt_fim_repasse_w		timestamp;
nr_vigencia_origem_w		smallint;
cd_plano_origem_w		varchar(6);
cd_titular_plano_w		varchar(13);
nm_beneficiario_w		varchar(120);
cd_usuario_plano_w		varchar(13);
nr_seq_segurado_w		bigint;
nr_seq_seg_eventual_w		bigint := null;
cd_pessoa_fisica_w		varchar(14);
ds_endereco_w			varchar(40);
cd_cep_w			varchar(15);
nr_seq_beneficiario_w		bigint;
nm_municipio_w			varchar(40);
sg_uf_w				valor_dominio.vl_dominio%type;
ds_bairro_w			varchar(40);
nr_ddd_w			varchar(3);
nr_fone_w			integer;
nr_ramal_w			integer;
qt_segurado_mov_w		integer;
nr_seq_segurado_atual_w		bigint;
qt_carteiras_segurado_w		integer;
nr_seq_plano_w			bigint;
nr_seq_titular_w		bigint;
nr_seq_parentesco_w		bigint;
ie_tipo_segurado_w		varchar(1);
nr_seq_emissor_w		bigint;
nr_seq_carteira_w		bigint;
cd_usuario_plano_ww		varchar(17);
nr_via_solicitacao_w		bigint;
ds_trilha1_w			pls_segurado_carteira.ds_trilha1%type;
ds_trilha2_w			pls_segurado_carteira.ds_trilha2%type;
ds_trilha3_w			pls_segurado_carteira.ds_trilha3%type;
ds_trilha_qr_code_w		pls_segurado_carteira.ds_trilha_qr_code%type;
cd_operadora_empresa_w		varchar(10);
cd_operadora_empresa_ww		bigint;
nr_seq_pagador_w		bigint;
nr_seq_empresa_w		bigint;
cd_cgc_cpf_empresa_w		varchar(14);
ie_tipo_pessoa_w		smallint;
ie_tipo_contrato_w		varchar(1);
cd_pessoa_fisica_pg_w		varchar(10);
cd_cooperativa_w		varchar(10);
cd_cgc_cooperativa_w		varchar(14);
nr_seq_congenere_w		bigint;
nr_seq_seg_contrato_w		bigint;
ie_tipo_registro_w		varchar(2);
nr_seq_plano_ww			bigint;
ie_repasse_ww			varchar(2);
ie_inserir_beneficiario_w	varchar(2) := 'S';
cd_matricula_familia_w		bigint;
qt_inco_dependete_w		integer;
ie_dependente_a100_w		varchar(10);
nr_seq_tabela_w			bigint;
qt_idade_w			bigint;
nr_seq_preco_w			bigint;
vl_preco_w			double precision;
vl_preco_nao_subsid_desc_w	double precision;
vl_minimo_mensalidade_w		double precision;
ie_grau_parentesco_w		varchar(10);
nr_seq_segurado_preco_ww	bigint;
qt_registros_w			integer;
nr_seq_benef_encontrado_w	bigint;
vl_adaptacao_w			double precision;
ie_tipo_parentesco_w		varchar(3);
nr_seq_grupo_intercambio_w	bigint;
nr_cartao_nac_sus_w		varchar(20);
ie_pcmso_w			varchar(10);
qt_registro_w			integer;
ie_controle_carteira_w		varchar(10);
ie_atualizar_validade_w		varchar(10);
dt_base_validade_carteira_w	varchar(10);
dt_contrato_w			timestamp;
nm_mae_benef_w			varchar(255);
nr_pis_pasep_w			varchar(11);
nr_endereco_w			varchar(5);
-------------------------------------------------------------------------------------
ds_endereco_old_w		varchar(255);
cd_cep_old_w			varchar(255);
nm_municipio_old_w		varchar(255);
sg_uf_old_w			valor_dominio.vl_dominio%type;
ds_bairro_old_w			varchar(255);
nr_ddd_old_w			varchar(255);
nr_fone_old_w			varchar(255);
nr_rama_old_w			varchar(255);
ie_existe_pessoa_w		varchar(10);
--------------------------------------------------------------------------------------
nm_pessoa_fisica_old_w		varchar(255);
dt_nascimento_old_w		timestamp;
nr_cpf_old_w			varchar(11);
nr_identidade_old_w		varchar(15);
nr_cartao_nac_sus_old_w		varchar(20);
nr_seq_mtvo_alt_plano_w		bigint;
cd_municipio_ibge_w		varchar(6);
cd_municipio_ibge_old_w		varchar(6);
nr_seq_plano_atual_w		bigint;
ie_gerar_via_carteira_w		varchar(1);
ie_usuario_eventual_w		varchar(1);
ie_gerar_contrat_sca_a100_w	varchar(1);
nr_seq_segurado_cart_exist_w	bigint;
nr_cep_w			bigint;
qt_carencia_benef_w		integer;
qt_regra_carteira_w		integer;
ie_status_w			ptu_intercambio_benef.ie_status%type	:= 'C';
nm_pagador_w			varchar(255);
ie_tipo_compartilhamento_w	ptu_intercambio_benef.ie_tipo_compartilhamento%type;
nr_seq_intercambio_benef_tit_w	ptu_intercambio_benef.nr_sequencia%type;
ie_tipo_compartilhamento_tit_w	ptu_intercambio_benef.ie_tipo_compartilhamento%type;
ie_tipo_segurado_ww		varchar(1);
nr_seq_segurado_carteira_w	pls_segurado_carteira.nr_sequencia%type;
ie_tipo_carteira_w		varchar(1);

C01 CURSOR FOR
	SELECT	nr_sequencia,
		coalesce(vl_preco_atual,0),
		vl_preco_nao_subsid_atual,
		coalesce(vl_minimo,0),
		coalesce(vl_adaptacao,0)
	from	pls_plano_preco
	where	qt_idade_w	>= qt_idade_inicial
	and	qt_idade_w	<= qt_idade_final
	and	nr_seq_tabela	= nr_seq_tabela_w
	and	coalesce(ie_grau_titularidade,ie_grau_parentesco_w)	= ie_grau_parentesco_w
	order	by	coalesce(ie_grau_titularidade,' ');

procedure alterar_validade_carteira(	nr_seq_segurado_p	pls_segurado.nr_sequencia%type,
					dt_validade_carteira_p	pls_segurado_carteira.dt_validade_carteira%type,
					nm_usuario_p		usuario.nm_usuario%type,
					cd_estabelecimento_p	estabelecimento.cd_estabelecimento%type) is
dt_validade_carteira_ww		pls_segurado_carteira.dt_validade_carteira%type;

BEGIN
if (dt_validade_carteira_p IS NOT NULL AND dt_validade_carteira_p::text <> '') then
	select	max(a.dt_validade_carteira)
	into STRICT	dt_validade_carteira_ww
	from	pls_segurado_carteira a
	where	a.nr_seq_segurado = nr_seq_segurado_p;

	if (dt_validade_carteira_ww <> dt_validade_carteira_p) then
		CALL pls_alterar_validade_carteira(nr_seq_segurado_p, null, dt_validade_carteira_p, 0, nm_usuario_p, cd_estabelecimento_p);
	end if;
end if;
end;

procedure criar_historico_beneficiario(	nr_seq_segurado_p	pls_segurado.nr_sequencia%type) is

qt_historico_102_benef_w	number(10);

begin
if	(dt_fim_repasse_w IS NOT NULL AND dt_fim_repasse_w::text <> '' AND ie_tipo_segurado_w = 'H') then
	
	select	count(1)
	into STRICT	qt_historico_102_benef_w
	from	pls_segurado_historico
	where	nr_seq_segurado = nr_seq_segurado_p
	and	ie_tipo_historico = 102
	and	trunc(dt_ocorrencia_sib, 'dd') = trunc(dt_fim_repasse_w+1, 'dd')
	and	ie_tipo_segurado = 'I'
	and	ie_tipo_segurado_ant = 'H'
	and	coalesce(ie_situacao_compartilhamento, 'A') = 'A';
	
	if (qt_historico_102_benef_w = 0) then
		insert into pls_segurado_historico(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_segurado,
			dt_historico, ds_historico, ds_observacao,
			ie_tipo_historico, dt_ocorrencia_sib, ie_historico_situacao,
			dt_liberacao_hist, ie_envio_sib, ie_tipo_segurado,
			ie_tipo_segurado_ant, ie_situacao_compartilhamento)
		values (	nextval('pls_segurado_historico_seq'), clock_timestamp(), nm_usuario_p,
			clock_timestamp(),nm_usuario_p, nr_seq_segurado_p,
			clock_timestamp(),wheb_mensagem_pck.get_texto(1109251, 'IE_TIPO_SEGURADO_ANT='||obter_valor_dominio(2406,'H')||';IE_TIPO_SEGURADO='||obter_valor_dominio(2406,'I')), '',
			'102', trunc(dt_fim_repasse_w+1, 'dd'), 'S',
			clock_timestamp(), 'N', 'I',
			'H', 'A');
			
		CALL pls_inativar_historico_compart(nr_seq_segurado_p, trunc(dt_fim_repasse_w+1, 'dd'), nm_usuario_p, 'N');
	end if;
	
	if (dt_fim_repasse_w <= clock_timestamp()) then
		CALL wheb_usuario_pck.set_ie_executar_trigger('N');
		update	pls_segurado
		set	ie_tipo_segurado = 'I',
			nm_usuario = nm_usuario_p,
			dt_atualizacao = clock_timestamp(),
			dt_alteracao_tipo_segurado = trunc(dt_fim_repasse_w+1, 'dd')
		where	nr_sequencia = nr_seq_segurado_p;
		CALL wheb_usuario_pck.set_ie_executar_trigger('S');
	end if;
end if;
end;

begin
ie_gerar_via_carteira_w := Obter_Param_Usuario(1286, 10, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_gerar_via_carteira_w);
ie_usuario_eventual_w := Obter_Param_Usuario(1286, 11, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_usuario_eventual_w);

select	max(ie_gerar_contratacao_sca_a100)
into STRICT	ie_gerar_contrat_sca_a100_w
from	pls_parametros
where	cd_estabelecimento	= cd_estabelecimento_p;

ie_atualizar_validade_w	:= 'N';

select	cd_cgc_cpf,
	cd_unimed,
	cd_familia,
	nm_benef_abreviado,
	cd_plano_intercambio,
	dt_nascimento,
	ie_sexo,
	CASE WHEN ie_estado_civil='A' THEN 6 WHEN ie_estado_civil='D' THEN 3 WHEN ie_estado_civil='M' THEN 2 WHEN ie_estado_civil='S' THEN 1 WHEN ie_estado_civil='W' THEN 5 WHEN ie_estado_civil='U' THEN 9 END ,
	dt_inclusao,
	ie_repasse,
	cd_dependencia,
	cd_local_atendimento,
	coalesce(dt_comp_risco,dt_repasse),
	dt_inclusao_plano_dest,
	nr_rg,
	sg_uf_rg,
	dt_exclusao,
	ie_recem_nascido,
	nr_matricula,
	dt_validade_carteira,
	cd_lotacao,
	ds_lotacao,
	dt_fim_repasse,
	nr_vigencia_origem,
	cd_plano_origem,
	cd_titular_plano,
	nm_beneficiario,
	cd_usuario_plano,
	nr_seq_segurado,
	nr_seq_empresa,
	ie_tipo_registro,
	nr_seq_benef_encontrado,
	nr_cartao_nac_sus,
	nr_seq_plano,
	nm_mae_benef,
	nr_pis_pasep,
	ie_tipo_compartilhamento
into STRICT	cd_cgc_cpf_w,
	cd_unimed_w,
	cd_familia_w,
	nm_benef_abreviado_w,
	cd_plano_intercambio_w,
	dt_nascimento_w,
	ie_sexo_w,
	ie_estado_civil_w,
	dt_inclusao_w, --dt_inclusao_operadora
	ie_repasse_w,
	cd_dependencia_w,
	cd_local_atendimento_w,
	dt_repasse_w,
	dt_inclusao_plano_dest_w,
	nr_rg_w,
	sg_uf_rg_w,
	dt_exclusao_w,
	ie_recem_nascido_w,
	nr_matricula_w,
	dt_validade_carteira_w,
	cd_lotacao_w,
	ds_lotacao_w,
	dt_fim_repasse_w,
	nr_vigencia_origem_w,
	cd_plano_origem_w,
	cd_titular_plano_w,
	nm_beneficiario_w,
	cd_usuario_plano_w,
	nr_seq_beneficiario_w,
	nr_seq_empresa_w,
	ie_tipo_registro_w,
	nr_seq_benef_encontrado_w,
	nr_cartao_nac_sus_w,
	nr_seq_plano_w,
	nm_mae_benef_w,
	nr_pis_pasep_w,
	ie_tipo_compartilhamento_w
from	ptu_intercambio_benef
where	nr_sequencia	= nr_seq_benef_p  LIMIT 1;

ie_dependente_a100_w	:= 'N';

select	count(1)
into STRICT	qt_inco_dependete_w

where	exists (SELECT	1
		from	ptu_inconsistencia
		where	cd_inconsistencia	= 8003
		and	ie_situacao		= 'A');

begin
select	nr_seq_emissor,
	cd_operadora_empresa,
	ie_tipo_contrato,
	nr_seq_grupo_intercambio,
	ie_controle_carteira,
	coalesce(dt_base_validade_carteira,'B'),
	dt_inclusao
into STRICT	nr_seq_emissor_w,
	cd_operadora_empresa_w,
	ie_tipo_contrato_w,
	nr_seq_grupo_intercambio_w,
	ie_controle_carteira_w,
	dt_base_validade_carteira_w,
	dt_contrato_w
from	pls_intercambio
where	nr_sequencia	= nr_seq_intercambio_p;
exception
when others then
	nr_seq_emissor_w	:= null;
end;

IF	((ie_gerar_renovacao_p = 'A') and
	((ie_controle_carteira_w in ('E','A')) or (coalesce(dt_validade_carteira_w::text, '') = '')) or (ie_gerar_renovacao_p	= 'EO') and (ie_controle_carteira_w in ('E','A')) or (ie_gerar_renovacao_p	= 'SV') and (coalesce(dt_validade_carteira_w::text, '') = '')) then
	ie_atualizar_validade_w	:= 'S';

	if (dt_base_validade_carteira_w = 'B') then
		dt_validade_carteira_w	:= dt_repasse_w;
	elsif (dt_base_validade_carteira_w = 'C') then
		begin
		dt_validade_carteira_w	:= to_date(to_char(dt_contrato_w,'dd/mm/') || to_char(dt_repasse_w,'yyyy'));
		exception
		when others then
			if (to_char(dt_contrato_w,'mm') = '02') then
				dt_validade_carteira_w	:= to_date('28/02/' || to_char(dt_repasse_w,'yyyy'));
			end if;
		end;
	end if;
end if;

cd_usuario_plano_ww	:= '0'||cd_unimed_w||cd_usuario_plano_w;

nr_seq_titular_w	:= null;
nr_seq_parentesco_w	:= null;
ie_dependente_a100_w	:= 'N';

if (cd_dependencia_w <> 0) then
	begin
	select	max(b.nr_sequencia)
	into STRICT	nr_seq_titular_w
	from	pls_segurado		b,
		pls_segurado_carteira	a
	where	a.nr_seq_segurado	= b.nr_sequencia
	and	b.nr_seq_intercambio	= nr_seq_intercambio_p
	and	coalesce(a.nr_cartao_intercambio,a.cd_usuario_plano)	= '0'||cd_unimed_w||cd_titular_plano_w;
	exception
	when others then
		nr_seq_titular_w	:= null;
	end;
	
	--Dentro dessa condicao apenas entra benefciarios depedentes, nessa restricao verificar se achou o titular do dependente, caso nao achar coloca na variavel que nao e para inserir o beneficiario caso a inconsistencia esteja ativa
	if (coalesce(nr_seq_titular_w::text, '') = '') and (qt_inco_dependete_w > 0) then
		ie_inserir_beneficiario_w	:= 'N';
	end if;

	--Caso for dependente e nao possuir titular entao coloca o ie_dependente_a100_w como 'S'
	if (coalesce(nr_seq_titular_w::text, '') = '') then
		ie_dependente_a100_w		:= 'S';
	end if;

	select	count(1)
	into STRICT	qt_registros_w
	from	grau_parentesco
	where	cd_ptu	= cd_dependencia_w;

	--Caso houver mais q 2 cadastro de parentesco do codigo do PTU, entao busca da regra de conversao
	if (qt_registros_w > 1) then
		nr_seq_parentesco_w	:= ptu_conversao_obter_parentesco(cd_dependencia_w,ie_sexo_w);
	end if;

	if (coalesce(nr_seq_parentesco_w::text, '') = '') then
		begin
		select	max(nr_sequencia)
		into STRICT	nr_seq_parentesco_w
		from	grau_parentesco
		where	cd_ptu	= cd_dependencia_w;
		exception
		when others then
			nr_seq_parentesco_w	:= null;
		end;
	end if;

	select	max(ie_tipo_parentesco)
	into STRICT	ie_tipo_parentesco_w
	from	grau_parentesco
	where	nr_sequencia	= nr_seq_parentesco_w;
	
	if (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_intercambio_benef_tit_w
		from	ptu_intercambio_benef
		where	nr_seq_segurado = nr_seq_titular_w;
		
		if (nr_seq_intercambio_benef_tit_w IS NOT NULL AND nr_seq_intercambio_benef_tit_w::text <> '') then
			select	max(ie_tipo_compartilhamento)
			into STRICT	ie_tipo_compartilhamento_tit_w
			from	ptu_intercambio_benef
			where	nr_sequencia = nr_seq_intercambio_benef_tit_w;
			
			if (ie_tipo_compartilhamento_tit_w <> ie_tipo_compartilhamento_w) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(1048467, 'DS_BENEFICIARIO='||nm_beneficiario_w);
				--O beneficiario #@DS_BENEFICIARIO#@ possui tipo de compartilhamento diferente do titular. Favor corrigir.
			end if;
		end if;
	end if;
end if;

--Caso for repasse em pre-pagamento busca a tabela de preco
if (ie_repasse_w = 'P') then
	select	max(nr_seq_tabela)
	into STRICT	nr_seq_tabela_w
	from	pls_intercambio_plano
	where	nr_seq_intercambio	= nr_seq_intercambio_p
	and	nr_seq_plano		= nr_seq_plano_w;
end if;

begin
select	ds_endereco,
	lpad(cd_cep,8,'0'),
	nm_municipio,
	sg_uf,
	ds_bairro,
	nr_ddd,
	nr_fone,
	nr_ramal,
	somente_numero_char(nr_endereco)
into STRICT	ds_endereco_w,
	cd_cep_w,
	nm_municipio_w,
	sg_uf_w,
	ds_bairro_w,
	nr_ddd_w,
	nr_fone_w,
	nr_ramal_w,
	nr_endereco_w
from	ptu_beneficiario_compl
where	nr_seq_beneficiario	= nr_seq_benef_p;
exception
when others then
	nm_municipio_w	:= '';
end;

select	cd_cgc_cpf,
	ie_tipo_pessoa
into STRICT	cd_cgc_cpf_empresa_w,
	ie_tipo_pessoa_w
from	ptu_intercambio_empresa
where	nr_sequencia	= nr_seq_empresa_w;

select	cd_unimed_origem
into STRICT	cd_cooperativa_w
from	ptu_intercambio		b,
	ptu_intercambio_empresa	a
where	a.nr_seq_intercambio	= b.nr_sequencia
and	a.nr_sequencia		= nr_seq_empresa_w;

select	max(nr_sequencia)
into STRICT	nr_seq_congenere_w
from	pls_congenere
where	(cd_cooperativa)::numeric 	= (cd_unimed_w)::numeric; --Deve considerar a Unimed de origem do beneficiario, e nao do arquivo.
nr_seq_pagador_w	:= null;

if (ie_vincular_pag_coop_a100_p	= 'N') then
	--Verificar regras do grupo de intercambio para o pagador
	if (nr_seq_grupo_intercambio_w IS NOT NULL AND nr_seq_grupo_intercambio_w::text <> '') then
		select	count(1)
		into STRICT	qt_registros_w
		
		where	exists (SELECT	1
				from	pls_regra_grupo_inter
				where	nr_sequencia	= nr_seq_grupo_intercambio_w
				and	ie_grupo_pagador = 'S');

		if (qt_registros_w > 0) then
			select	max(a.nr_sequencia)
			into STRICT	nr_seq_pagador_w
			from	pls_intercambio		b,
				pls_contrato_pagador	a
			where	a.nr_seq_pagador_intercambio	= b.nr_sequencia
			and	b.nr_seq_grupo_intercambio	= nr_seq_grupo_intercambio_w
			and	a.ie_pag_ref_grupo_intercambio	= 'S';
		end if;
	end if;

	if (coalesce(nr_seq_pagador_w::text, '') = '') then
		select	max(cd_cgc)
		into STRICT	cd_cgc_cooperativa_w
		from	pls_congenere
		where	(cd_cooperativa)::numeric 	= (cd_cooperativa_w)::numeric;

		if (cd_cgc_cooperativa_w IS NOT NULL AND cd_cgc_cooperativa_w::text <> '') then
			begin
			select	nr_sequencia
			into STRICT	nr_seq_pagador_w
			from	pls_contrato_pagador
			where	nr_seq_pagador_intercambio	= nr_seq_intercambio_p
			and	cd_cgc				= cd_cgc_cooperativa_w;
			exception
			when others then
				CALL wheb_mensagem_pck.exibir_mensagem_abort( 247597, 'CD_CGC='||cd_cgc_cooperativa_w||';NR_SEQ_INTERCAMBIO='||nr_seq_intercambio_p );
				--Nao foi localizado pagador com o CNPJ '||cd_cgc_cooperativa_w||' no contrato de intercambio '||nr_seq_intercambio_p
			end;
		end if;
	end if;
else
	select	max(nr_sequencia)
	into STRICT	nr_seq_pagador_w
	from	pls_contrato_pagador
	where	nr_seq_congenere	= nr_seq_congenere_w;
end if;

select	count(1)
into STRICT	qt_segurado_mov_w

where	exists (SELECT	1
		from	pls_segurado
		where	nr_seq_intercambio_benef = nr_seq_benef_p);

ie_existe_pessoa_w	:= 'N';

if (ie_tipo_registro_w = 'I') then --Inclusao
	select	max(a.cd_pessoa_fisica)
	into STRICT	cd_pessoa_fisica_w
	from	pessoa_fisica a,
		pls_segurado b,
		pls_segurado_carteira c
	where	b.nr_sequencia = c.nr_seq_segurado
	and	a.cd_pessoa_fisica = b.cd_pessoa_fisica
	and	coalesce(b.dt_cancelamento::text, '') = ''
	and	c.cd_usuario_plano = cd_usuario_plano_ww;
	
	if (coalesce(cd_pessoa_fisica_w::text, '') = '') then
		select	count(1)
		into STRICT	qt_registros_w
		
		where	exists (SELECT	1
				from	pessoa_fisica
				where	trunc(dt_nascimento, 'dd')	= trunc(dt_nascimento_w, 'dd')
				and	upper(trim(both nm_pessoa_fisica))	= upper(trim(both nm_beneficiario_w)));
		
		if (qt_registros_w > 0) then
			select	coalesce(max(b.cd_pessoa_fisica),'X')
			into STRICT	cd_pessoa_fisica_w
			from	pessoa_fisica	b
			where	trunc(b.dt_nascimento, 'dd')	= trunc(dt_nascimento_w, 'dd')
			and	upper(trim(both b.nm_pessoa_fisica))	= upper(trim(both nm_beneficiario_w));

			ie_existe_pessoa_w	:= 'S';
		else
			select	count(1)
			into STRICT	qt_registros_w
			
			where	exists (SELECT	1
					from	pessoa_fisica
					where	trunc(dt_nascimento, 'dd') = trunc(dt_nascimento_w, 'dd')
					and	nr_cpf			= cd_cgc_cpf_w);
			
			if (qt_registros_w > 0) then
				select	coalesce(max(b.cd_pessoa_fisica),'X')
				into STRICT	cd_pessoa_fisica_w
				from	pessoa_fisica	b
				where	trunc(b.dt_nascimento, 'dd')	= trunc(dt_nascimento_w, 'dd')
				and	nr_cpf				= cd_cgc_cpf_w;
			
				ie_existe_pessoa_w	:= 'S';
			else
				cd_pessoa_fisica_w := 'X';
			end if;
		end if;
	else
		ie_existe_pessoa_w	:= 'S';
	end if;
elsif (nr_seq_benef_encontrado_w IS NOT NULL AND nr_seq_benef_encontrado_w::text <> '') and --Alteracoes e Exclusoes
	(ie_tipo_registro_w in ('E','A','R')) then
	select	coalesce(max(cd_pessoa_fisica),'X'),
		max(nr_seq_plano)
	into STRICT	cd_pessoa_fisica_w,
		nr_seq_plano_atual_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_benef_encontrado_w;
end if;

if (cd_pessoa_fisica_w	= 'X') then
	select	nextval('pessoa_fisica_seq')
	into STRICT	cd_pessoa_fisica_w
	;

	insert into pessoa_fisica(cd_pessoa_fisica, dt_atualizacao, nm_usuario, dt_atualizacao_nrec,
		nm_usuario_nrec, ie_tipo_pessoa, nr_cpf, nm_pessoa_fisica,
		ie_sexo, cd_familia, nm_abreviado, dt_nascimento,
		ie_estado_civil, nr_identidade, sg_emissora_ci, nr_matricula_nasc,
		nr_cartao_nac_sus, nr_pis_pasep)
	values (cd_pessoa_fisica_w, clock_timestamp(), nm_usuario_p, clock_timestamp(),
		nm_usuario_p, 1, cd_cgc_cpf_w, nm_beneficiario_w,
		ie_sexo_w, cd_familia_w, nm_benef_abreviado_w, dt_nascimento_w,
		ie_estado_civil_w, nr_rg_w, sg_uf_rg_w, nr_matricula_w,
		nr_cartao_nac_sus_w, nr_pis_pasep_w);

	insert into compl_pessoa_fisica(nr_sequencia, cd_pessoa_fisica, ie_tipo_complemento,
		ds_endereco, cd_cep, ds_municipio,
		sg_estado, dt_atualizacao, nm_usuario,
		dt_atualizacao_nrec, nm_usuario_nrec, ds_bairro,
		nr_ddd_telefone, nr_telefone, nr_ramal, nr_endereco)
	values (1, cd_pessoa_fisica_w, 1,
		ds_endereco_w, cd_cep_w, nm_municipio_w,
		sg_uf_w, clock_timestamp(),nm_usuario_p,
		clock_timestamp(), nm_usuario_p, ds_bairro_w,
		nr_ddd_w, nr_fone_w, nr_ramal_w, nr_endereco_w);


	if (nm_mae_benef_w IS NOT NULL AND nm_mae_benef_w::text <> '') then
		insert into compl_pessoa_fisica(nr_sequencia, cd_pessoa_fisica, ie_tipo_complemento, nm_contato,
			dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec)
		values (2, cd_pessoa_fisica_w, 5, nm_mae_benef_w,
			clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p);
	end if;
end if;

if	((ie_tipo_registro_w = 'A') or (ie_existe_pessoa_w = 'S')) then
	if (ie_gerar_via_carteira_w = 'S') then --Se for gerar via para carteira, ja tem que atualizar os dados da pessoa fisica
		update	pessoa_fisica
		set	nm_pessoa_fisica	= nm_beneficiario_w,
			dt_nascimento		= dt_nascimento_w,
			nr_cpf			= cd_cgc_cpf_w,
			nr_identidade		= nr_rg_w,
			nr_cartao_nac_sus	= nr_cartao_nac_sus_w
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
	else
		select	nm_pessoa_fisica,
			dt_nascimento,
			nr_cpf,
			nr_identidade,
			nr_cartao_nac_sus
		into STRICT	nm_pessoa_fisica_old_w,
			dt_nascimento_old_w,
			nr_cpf_old_w,
			nr_identidade_old_w,
			nr_cartao_nac_sus_old_w
		from	pessoa_fisica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w;

		CALL pls_gerar_solicitacao_alt( nm_pessoa_fisica_old_w, nm_beneficiario_w, 'NM_PESSOA_FISICA', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
		CALL pls_gerar_solicitacao_alt( dt_nascimento_old_w, dt_nascimento_w, 'DT_NASCIMENTO', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
		CALL pls_gerar_solicitacao_alt( nr_cpf_old_w, cd_cgc_cpf_w, 'NR_CPF', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
		CALL pls_gerar_solicitacao_alt( nr_identidade_old_w, nr_rg_w, 'NR_IDENTIDADE', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
		CALL pls_gerar_solicitacao_alt( nr_cartao_nac_sus_old_w, nr_cartao_nac_sus_w, 'NR_CARTAO_NAC_SUS', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
		CALL pls_tasy_gerar_solicitacao(cd_pessoa_fisica_w,'A');
	end if;

	nr_cep_w := Somente_Numero(cd_cep_w);

	select	max(cd_municipio_ibge)
	into STRICT	cd_municipio_ibge_w
	from	cep_municipio
	where	cd_cep = nr_cep_w;

	if (coalesce(cd_municipio_ibge_w::text, '') = '') then
		select	max(cd_municipio_ibge)
		into STRICT	cd_municipio_ibge_w
		from	sus_cep
		where	cd_cep = nr_cep_w;
	end if;

	select	count(1)
	into STRICT	qt_registro_w
	
	where	exists (SELECT	1
			from	pls_prestador
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w);

	if (qt_registro_w > 0) then
		if (ie_alterar_dados_prest_p = 'G') then
			update	compl_pessoa_fisica
			set	ds_endereco		= ds_endereco_w,
				cd_cep			= cd_cep_w,
				ds_municipio		= nm_municipio_w,
				sg_estado		= sg_uf_w,
				dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				ds_bairro		= ds_bairro_w,
				nr_ddd_telefone		= nr_ddd_w,
				nr_telefone		= nr_fone_w,
				nr_ramal		= nr_ramal_w,
				cd_municipio_ibge	= cd_municipio_ibge_w
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	ie_tipo_complemento	= 1;
		elsif (ie_alterar_dados_prest_p = 'S') then
			select	ds_endereco,
				cd_cep,
				ds_municipio,
				sg_estado,
				ds_bairro,
				nr_ddd_telefone,
				nr_telefone,
				nr_ramal,
				cd_municipio_ibge
			into STRICT	ds_endereco_old_w,
				cd_cep_old_w,
				nm_municipio_old_w,
				sg_uf_old_w,
				ds_bairro_old_w,
				nr_ddd_old_w,
				nr_fone_old_w,
				nr_rama_old_w,
				cd_municipio_ibge_old_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	ie_tipo_complemento	= 1;

			CALL pls_gerar_solicitacao_alt(ds_endereco_old_w, ds_endereco_w, 'DS_ENDERECO', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(cd_cep_old_w, cd_cep_w, 'CD_CEP', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nm_municipio_old_w, nm_municipio_w, 'DS_MUNICIPIO', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(sg_uf_old_w, sg_uf_w, 'SG_ESTADO', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nr_ddd_old_w, ds_bairro_w, 'DS_BAIRRO', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nr_ddd_old_w, nr_ddd_w, 'NR_DDD_TELEFONE', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nr_fone_old_w, nr_fone_w, 'NR_TELEFONE', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nr_rama_old_w, nr_ramal_w, 'NR_RAMAL', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(cd_municipio_ibge_old_w, cd_municipio_ibge_w, 'CD_MUNICIPIO_IBGE', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_tasy_gerar_solic_compl(cd_pessoa_fisica_w,1,'A','PTU_GERAR_BENEF_INTERCAMBIO');
		end if;
	else
		select	count(1)
		into STRICT	qt_registro_w
		
		where	exists (SELECT	1
				from	compl_pessoa_fisica
				where	cd_pessoa_fisica	= cd_pessoa_fisica_w
				and	ie_tipo_complemento	= 1);

		if (qt_registro_w	> 0) then
			select	ds_endereco,
				cd_cep,
				ds_municipio,
				sg_estado,
				ds_bairro,
				nr_ddd_telefone,
				nr_telefone,
				nr_ramal,
				cd_municipio_ibge
			into STRICT	ds_endereco_old_w,
				cd_cep_old_w,
				nm_municipio_old_w,
				sg_uf_old_w,
				ds_bairro_old_w,
				nr_ddd_old_w,
				nr_fone_old_w,
				nr_rama_old_w,
				cd_municipio_ibge_old_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	ie_tipo_complemento	= 1;

			CALL pls_gerar_solicitacao_alt(ds_endereco_old_w, ds_endereco_w, 'DS_ENDERECO', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(cd_cep_old_w, cd_cep_w, 'CD_CEP', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nm_municipio_old_w, nm_municipio_w, 'DS_MUNICIPIO', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(sg_uf_old_w, sg_uf_w, 'SG_ESTADO', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nr_ddd_old_w, ds_bairro_w, 'DS_BAIRRO', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nr_ddd_old_w, nr_ddd_w, 'NR_DDD_TELEFONE', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nr_fone_old_w, nr_fone_w, 'NR_TELEFONE', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(nr_rama_old_w, nr_ramal_w, 'NR_RAMAL', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_gerar_solicitacao_alt(cd_municipio_ibge_old_w, cd_municipio_ibge_w, 'CD_MUNICIPIO_IBGE', cd_pessoa_fisica_w, cd_estabelecimento_p, nm_usuario_p);
			CALL pls_tasy_gerar_solic_compl(cd_pessoa_fisica_w,1,'A','PTU_GERAR_BENEF_INTERCAMBIO');
		end if;
	end if;

	if (nr_seq_benef_encontrado_w IS NOT NULL AND nr_seq_benef_encontrado_w::text <> '') and (nr_seq_plano_w IS NOT NULL AND nr_seq_plano_w::text <> '') and (nr_seq_tabela_w IS NOT NULL AND nr_seq_tabela_w::text <> '') then
		if (nr_seq_plano_w <> nr_seq_plano_atual_w) then
			select	max(nr_sequencia)
			into STRICT	nr_seq_mtvo_alt_plano_w
			from	pls_motivo_alteracao_plano
			where	cd_ans = '06';

			CALL pls_alt_prod_benef_intercambio(nr_seq_benef_encontrado_w, nr_seq_plano_w, nr_seq_tabela_w, 'B', cd_estabelecimento_p, nm_usuario_p, nr_seq_mtvo_alt_plano_w, 'N', null);

			if (ie_gerar_via_carteira_w = 'P') then
				CALL pls_incluir_pf_via_adic(nr_seq_benef_encontrado_w,'M','A',wheb_mensagem_pck.get_texto(1109246), 'N', nm_usuario_p);
			end if;
		end if;
	end if;
end if;

if (nr_seq_benef_encontrado_w IS NOT NULL AND nr_seq_benef_encontrado_w::text <> '') then
	nr_seq_segurado_w	:= nr_seq_benef_encontrado_w;
else
	select	max(nr_sequencia)
	into STRICT	nr_seq_segurado_w
	from	pls_segurado
	where	cd_pessoa_fisica	= cd_pessoa_fisica_w
	and	nr_seq_intercambio	= nr_seq_intercambio_p
	and	ie_tipo_segurado	= 'T'
	and	coalesce(dt_rescisao::text, '') = '';
	
	--Verifica parametro [11] Utilizar usuario eventual ao gerar a contratacao, e se existe usuario eventual com carteirinha igual
	if (ie_usuario_eventual_w = 'S') then
		select	max(nr_sequencia)
		into STRICT	nr_seq_seg_eventual_w
		from	pls_segurado a
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	ie_tipo_segurado	in ('I','H')
		and	exists (	SELECT	1
				from	pls_segurado_carteira b
				where	b.nr_seq_segurado = a.nr_sequencia
				and	b.cd_usuario_plano = cd_usuario_plano_ww);
	end if;
end if;

if (ie_tipo_compartilhamento_w = 2) then
	ie_tipo_segurado_w	:= 'H';
else
	select	coalesce(max(CASE WHEN coalesce(nr_seq_congenere::text, '') = '' THEN 'R'  ELSE 'T' END ),'T')
	into STRICT	ie_tipo_segurado_w
	from	pls_intercambio
	where	nr_sequencia = nr_seq_intercambio_p;
end if;

if (qt_segurado_mov_w = 0) and (ie_inserir_beneficiario_w = 'S') then
	if (ie_tipo_registro_w = 'I') then
		--Verifica parametro [11] Utilizar usuario eventual ao gerar a contratacao, e se existe usuario eventual com carteirinha
		if (ie_usuario_eventual_w = 'S') and (nr_seq_seg_eventual_w IS NOT NULL AND nr_seq_seg_eventual_w::text <> '') then
			select	coalesce(max(nr_seq_seg_contrato),0) + 1
			into STRICT	nr_seq_seg_contrato_w
			from	pls_segurado
			where	nr_seq_intercambio	= nr_seq_intercambio_p;

			begin
			cd_operadora_empresa_ww	:= (cd_operadora_empresa_w)::numeric;
			exception
			when others then
			cd_operadora_empresa_ww	:= null;
			end;

			if (nr_seq_plano_w IS NOT NULL AND nr_seq_plano_w::text <> '') then
				select	coalesce(ie_pcmso,'N')
				into STRICT	ie_pcmso_w
				from	pls_plano
				where	nr_sequencia	= nr_seq_plano_w  LIMIT 1;
			end if;
			
			if (nr_seq_pagador_w IS NOT NULL AND nr_seq_pagador_w::text <> '') then
				select	substr(pls_obter_dados_pagador(nr_seq_pagador_w,'N'),1,255)
				into STRICT	nm_pagador_w
				;
			end if;

			--Efetua alteracoes do usuario eventual para beneficiario de intercambio
			update	pls_segurado
			set	nm_usuario = nm_usuario_p,			dt_atualizacao = clock_timestamp(),			nr_seq_plano = nr_seq_plano_w,
				ie_situacao_atend = 'A',			dt_inclusao_operadora = dt_inclusao_w,		dt_contratacao = dt_inclusao_w,
				dt_rescisao = dt_exclusao_w,			nr_seq_intercambio = nr_seq_intercambio_p,	ie_tipo_segurado = ie_tipo_segurado_w,
				nr_seq_intercambio_benef = nr_seq_benef_p,	nr_seq_titular = nr_seq_titular_w,		nr_seq_parentesco = nr_seq_parentesco_w,
				cd_estabelecimento = cd_estabelecimento_p,	ie_tipo_repasse = ie_repasse_w,			cd_matricula_estipulante = nr_matricula_w,
				cd_operadora_empresa = cd_operadora_empresa_ww,	nr_seq_pagador = nr_seq_pagador_w,		nr_seq_congenere = nr_seq_congenere_w,
				nr_seq_seg_contrato = nr_seq_seg_contrato_w,	ie_taxa_inscricao = 'N',			ie_renovacao_carteira = 'S',
				ie_bonific_cooperado = 'N',			ie_dependente_a100 = ie_dependente_a100_w,	nr_seq_tabela = nr_seq_tabela_w,
				ie_tipo_parentesco = ie_tipo_parentesco_w,	ie_pcmso = ie_pcmso_w,				ie_acao_contrato = ie_acao_contrato_p,
				dt_comp_risco = dt_repasse_w,			dt_alteracao_tipo_segurado = trunc(coalesce(dt_repasse_w, clock_timestamp()),'dd')
			where	nr_sequencia = nr_seq_seg_eventual_w;
			
			CALL ptu_a100_simplificado_pck.atualizar_status_pessoa(nr_seq_seg_eventual_w, ie_tipo_segurado_w, nm_usuario_p);
			
			criar_historico_beneficiario(	nr_seq_seg_eventual_w);
			
			CALL pls_alterar_pagador_segurado(	nr_seq_seg_eventual_w, null, nr_seq_pagador_w, dt_repasse_w, 'N', nm_usuario_p);
			
			CALL pls_gerar_segurado_historico(	nr_seq_seg_eventual_w, '104', clock_timestamp(), wheb_mensagem_pck.get_texto(1109241, 'NR_SEQ_INTERCAMBIO='||nr_seq_intercambio_incos_p), 'ptu_gerar_benef_intercambio', null, null, null, null, clock_timestamp(), null, null, null, null, null, null, nm_usuario_p,'N');
			
			CALL pls_gerar_segurado_historico(	nr_seq_seg_eventual_w, '6', clock_timestamp(),
							wheb_mensagem_pck.get_texto(280132, 'NR_SEQ_PAGADOR_P=' || to_char(nr_seq_pagador_w) || ';NM_PAGAD0R_P=' || nm_pagador_w),'ptu_gerar_benef_intercambio', null,
							null, null, null,
							dt_repasse_w, null, null,
							null, null, null,
							null, nm_usuario_p, 'N');
			
			nr_seq_segurado_w := nr_seq_seg_eventual_w;
			--Gerar os valores da tabela de preco para o beneficiario
			if (ie_repasse_w = 'P') then
				select	coalesce((substr(obter_idade(dt_nascimento,clock_timestamp(),'A'),1,3))::numeric ,999)
				into STRICT	qt_idade_w
				from	pessoa_fisica
				where	cd_pessoa_fisica	= cd_pessoa_fisica_w;

				ie_grau_parentesco_w	:= coalesce(substr(pls_obter_garu_dependencia_seg(nr_seq_segurado_w,'C'),1,2),'X');

				open C01;
				loop
				fetch C01 into
					nr_seq_preco_w,
					vl_preco_w,
					vl_preco_nao_subsid_desc_w,
					vl_minimo_mensalidade_w,
					vl_adaptacao_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
				end loop;
				close C01;

				if (nr_seq_preco_w IS NOT NULL AND nr_seq_preco_w::text <> '') then
					select	nextval('pls_segurado_preco_seq')
					into STRICT	nr_seq_segurado_preco_ww
					;

					begin
					insert into pls_segurado_preco(	nr_sequencia, dt_atualizacao, nm_usuario,
							dt_reajuste, nr_seq_segurado, vl_preco_atual,
							vl_preco_ant, qt_idade, cd_motivo_reajuste,
							ds_observacao, vl_desconto, dt_liberacao,
							nm_usuario_liberacao, vl_preco_nao_subsid_desc,
							nr_seq_tabela, nr_seq_preco, vl_minimo_mensalidade,
							vl_adaptacao,ie_situacao)
					values (	nr_seq_segurado_preco_ww, clock_timestamp(), nm_usuario_p,
							dt_repasse_w, nr_seq_segurado_w, vl_preco_w,
							vl_preco_w, qt_idade_w, 'C',
							wheb_mensagem_pck.get_texto(1109238), 0, clock_timestamp(),
							nm_usuario_p, vl_preco_nao_subsid_desc_w,
							nr_seq_tabela_w, nr_seq_preco_w, vl_minimo_mensalidade_w,
							vl_adaptacao_w,'A');
					exception
					when others then
						null;
					end;
				end if;
			end if;

			CALL pls_liberar_segurado(nr_seq_segurado_w,'C',nm_usuario_p,'N');
			CALL pls_gerar_grupos_intercambio(nr_seq_segurado_w,cd_estabelecimento_p,nm_usuario_p);
			CALL pls_gerar_ops_congenere_benef(nr_seq_segurado_w,cd_usuario_plano_ww,cd_estabelecimento_p,nm_usuario_p,'N');

			select	count(1)
			into STRICT	qt_carteiras_segurado_w
			
			where	exists (SELECT	1
					from	pls_segurado_carteira
					where	nr_seq_segurado	= nr_seq_segurado_w);

			select	count(1)
			into STRICT	qt_regra_carteira_w
			from	pls_regra_carteira
			where	nr_seq_emissor	= nr_seq_emissor_w;

			if	((nr_seq_emissor_w IS NOT NULL AND nr_seq_emissor_w::text <> '') and (qt_carteiras_segurado_w = 0) and (coalesce(qt_regra_carteira_w,0) > 0) and (ie_tipo_compartilhamento_w <> 2)) then

				CALL pls_atualizar_familia_pf(nr_seq_segurado_w,cd_estabelecimento_p,nm_usuario_p);

				--Gera o codigo de titularidade do beneficiario, para os casos de dependente sem titular gera o codigo conforme a familia para os demais caso gera normalmente
				CALL ptu_gerar_regra_titularidade(nr_seq_segurado_w,cd_estabelecimento_p,nm_usuario_p);

				CALL pls_gerar_carteira_usuario(nr_seq_segurado_w,nr_seq_titular_w,clock_timestamp(),dt_validade_carteira_w,'P','N',null,nm_usuario_p);

				update	pls_segurado_carteira
				set	nr_cartao_intercambio	= cd_usuario_plano_ww
				where	nr_seq_segurado		= nr_seq_segurado_w
				and	cd_estabelecimento	= cd_estabelecimento_p;
			elsif (qt_carteiras_segurado_w = 0) then

				select	max(nr_seq_segurado)
				into STRICT	nr_seq_segurado_cart_exist_w
				from	pls_segurado_carteira
				where	cd_usuario_plano	= cd_usuario_plano_ww
				and	coalesce(nr_seq_emissor::text, '') = '';

				if (nr_seq_segurado_cart_exist_w IS NOT NULL AND nr_seq_segurado_cart_exist_w::text <> '') then
					--wheb_mensagem_pck.exibir_mensagem_abort( 247947, 'NR_SEQ_SEGURADO='||nr_seq_segurado_cart_exist_w||';CD_USUARIO_PLANO='||cd_usuario_plano_ww );

					--'Ja existe o beneficiario '||nr_seq_segurado_cart_exist_w||' cadastrado com a carteira '||cd_usuario_plano_ww||'. Favor verifique.'
					ie_status_w := 'S';
				else
					select	coalesce(max(nr_via_solicitacao),0) + 1
					into STRICT	nr_via_solicitacao_w
					from	pls_segurado_carteira
					where	nr_seq_segurado	= nr_seq_segurado_w;

					select	nextval('pls_segurado_carteira_seq')
					into STRICT	nr_seq_carteira_w
					;

					insert into pls_segurado_carteira(	nr_sequencia, dt_atualizacao, nm_usuario,dt_atualizacao_nrec, nm_usuario_nrec,
							cd_estabelecimento,nr_seq_segurado,dt_inicio_vigencia,dt_validade_carteira,cd_usuario_plano,
							ie_situacao,ds_observacao,nm_usuario_solicitante,dt_solicitacao,ie_processo,
							nr_via_solicitacao)
					values (	nr_seq_carteira_w,clock_timestamp(), nm_usuario_p,clock_timestamp(),nm_usuario_p,
							cd_estabelecimento_p,nr_seq_segurado_w,clock_timestamp(),dt_validade_carteira_w,cd_usuario_plano_ww,
							'D','Gerado a partir pela carteira de '||lower(wheb_mensagem_pck.get_texto(1109235))||' do '||lower(wheb_mensagem_pck.get_texto(1109236)),nm_usuario_p,clock_timestamp(),'M',
							nr_via_solicitacao_w);

					SELECT * FROM pls_obter_trilhas_cartao(nr_seq_segurado_w, ds_trilha1_w, ds_trilha2_w, ds_trilha3_w, ds_trilha_qr_code_w, nm_usuario_p) INTO STRICT ds_trilha1_w, ds_trilha2_w, ds_trilha3_w, ds_trilha_qr_code_w;

					update	pls_segurado_carteira
					set	ds_trilha1		= ds_trilha1_w,
						ds_trilha2		= ds_trilha2_w,
						ds_trilha3		= ds_trilha3_w,
						ds_trilha_qr_code	= ds_trilha_qr_code_w
					where	nr_sequencia	= nr_seq_carteira_w;

					CALL pls_alterar_estagios_cartao(nr_seq_carteira_w,clock_timestamp(),1,cd_estabelecimento_p,nm_usuario_p);
				end if;
			end if;

			if (ie_atualizar_validade_w = 'S') then
				CALL pls_gerar_renovacao_cart_inter(nr_seq_intercambio_p,nr_seq_segurado_w,ie_acao_contrato_p,nm_usuario_p);
			else
				alterar_validade_carteira(nr_seq_segurado_w, dt_validade_carteira_w, nm_usuario_p, cd_estabelecimento_p);
			end if;
		--Caso contrario insere um novo segurado
		else
			begin
			select	nextval('pls_segurado_seq')
			into STRICT	nr_seq_segurado_w
			;

			select	coalesce(max(nr_seq_seg_contrato),0) + 1
			into STRICT	nr_seq_seg_contrato_w
			from	pls_segurado
			where	nr_seq_intercambio	= nr_seq_intercambio_p;

			begin
			cd_operadora_empresa_ww	:= (cd_operadora_empresa_w)::numeric;
			exception
			when others then
			cd_operadora_empresa_ww	:= null;
				end;

			if (nr_seq_plano_w IS NOT NULL AND nr_seq_plano_w::text <> '') then
				select	coalesce(ie_pcmso,'N')
				into STRICT	ie_pcmso_w
				from	pls_plano
				where	nr_sequencia	= nr_seq_plano_w  LIMIT 1;
			end if;

			insert into pls_segurado(	nr_sequencia, dt_atualizacao, nm_usuario,dt_atualizacao_nrec, nm_usuario_nrec,
					cd_pessoa_fisica,nr_seq_plano, ie_situacao_atend,dt_inclusao_operadora,
					dt_contratacao, dt_rescisao, nr_seq_intercambio,ie_tipo_segurado,
					nr_seq_intercambio_benef,nr_seq_titular,nr_seq_parentesco,
					cd_estabelecimento,ie_tipo_repasse,cd_matricula_estipulante,cd_operadora_empresa,
					nr_seq_pagador,nr_seq_congenere,nr_seq_seg_contrato,ie_taxa_inscricao,
					ie_renovacao_carteira,ie_bonific_cooperado,ie_dependente_a100,nr_seq_tabela,
					ie_tipo_parentesco,ie_pcmso,ie_acao_contrato, dt_comp_risco,
					dt_alteracao_tipo_segurado)
			values (	nr_seq_segurado_w, clock_timestamp(), nm_usuario_p,clock_timestamp(),nm_usuario_p,
					cd_pessoa_fisica_w,nr_seq_plano_w, 'A',dt_inclusao_w,
					dt_inclusao_w, dt_exclusao_w, nr_seq_intercambio_p,ie_tipo_segurado_w,
					nr_seq_benef_p,nr_seq_titular_w,nr_seq_parentesco_w,
					cd_estabelecimento_p,ie_repasse_w,nr_matricula_w,cd_operadora_empresa_ww,
					nr_seq_pagador_w,nr_seq_congenere_w,nr_seq_seg_contrato_w,'N',
					'S','N',ie_dependente_a100_w,nr_seq_tabela_w,
					ie_tipo_parentesco_w,ie_pcmso_w,ie_acao_contrato_p, dt_repasse_w,
					CASE WHEN ie_tipo_segurado_w='H' THEN  trunc(coalesce(dt_repasse_w, clock_timestamp()),'dd')  ELSE null END );
			
			CALL ptu_a100_simplificado_pck.atualizar_status_pessoa(nr_seq_segurado_w, ie_tipo_segurado_w, nm_usuario_p);
			
			criar_historico_beneficiario(nr_seq_segurado_w);
			
			CALL pls_gerar_segurado_historico(nr_seq_segurado_w, '104', clock_timestamp(), wheb_mensagem_pck.get_texto(1109241, 'NR_SEQ_INTERCAMBIO='||nr_seq_intercambio_incos_p), 'ptu_gerar_benef_intercambio', null, null, null, null, clock_timestamp(), null, null, null, null, null, null, nm_usuario_p,'N');
			
			--Gerar os valores da tabela de preco para o beneficiario
			if (ie_repasse_w = 'P') then
				select	coalesce((substr(obter_idade(dt_nascimento,clock_timestamp(),'A'),1,3))::numeric ,999)
				into STRICT	qt_idade_w
				from	pessoa_fisica
				where	cd_pessoa_fisica	= cd_pessoa_fisica_w;

				ie_grau_parentesco_w	:= coalesce(substr(pls_obter_garu_dependencia_seg(nr_seq_segurado_w,'C'),1,2),'X');

				open C01;
				loop
				fetch C01 into
					nr_seq_preco_w,
					vl_preco_w,
					vl_preco_nao_subsid_desc_w,
					vl_minimo_mensalidade_w,
					vl_adaptacao_w;
				EXIT WHEN NOT FOUND; /* apply on C01 */
				end loop;
				close C01;

				if (nr_seq_preco_w IS NOT NULL AND nr_seq_preco_w::text <> '') then
					select	nextval('pls_segurado_preco_seq')
					into STRICT	nr_seq_segurado_preco_ww
					;

					insert into pls_segurado_preco(	nr_sequencia, dt_atualizacao, nm_usuario,
							dt_reajuste, nr_seq_segurado, vl_preco_atual,
							vl_preco_ant, qt_idade, cd_motivo_reajuste,
							ds_observacao, vl_desconto, dt_liberacao,
							nm_usuario_liberacao, vl_preco_nao_subsid_desc,
							nr_seq_tabela, nr_seq_preco, vl_minimo_mensalidade,
							vl_adaptacao,ie_situacao)
					values (	nr_seq_segurado_preco_ww, clock_timestamp(), nm_usuario_p,
							dt_repasse_w, nr_seq_segurado_w, vl_preco_w,
							vl_preco_w, qt_idade_w, 'C',
							wheb_mensagem_pck.get_texto(1109238), 0, clock_timestamp(),
							nm_usuario_p, vl_preco_nao_subsid_desc_w,
							nr_seq_tabela_w, nr_seq_preco_w, vl_minimo_mensalidade_w,
							vl_adaptacao_w,'A');
				end if;
			end if;

			CALL pls_liberar_segurado(nr_seq_segurado_w,'C',nm_usuario_p,'N');
			CALL pls_gerar_grupos_intercambio(nr_seq_segurado_w,cd_estabelecimento_p,nm_usuario_p);
			CALL pls_gerar_ops_congenere_benef(nr_seq_segurado_w,cd_usuario_plano_ww,cd_estabelecimento_p,nm_usuario_p,'N');

			select	count(1)
			into STRICT	qt_carteiras_segurado_w
			
			where	exists (SELECT	1
					from	pls_segurado_carteira
					where	nr_seq_segurado	= nr_seq_segurado_w);

			select	count(1)
			into STRICT	qt_regra_carteira_w
			from	pls_regra_carteira
			where	nr_seq_emissor	= nr_seq_emissor_w;

			if	((nr_seq_emissor_w IS NOT NULL AND nr_seq_emissor_w::text <> '') and (qt_carteiras_segurado_w = 0) and (coalesce(qt_regra_carteira_w,0) > 0) and (ie_tipo_compartilhamento_w <> 2)) then

				CALL pls_atualizar_familia_pf(nr_seq_segurado_w,cd_estabelecimento_p,nm_usuario_p);

				--Gera o codigo de titularidade do beneficiario, para os casos de dependente sem titular gera o codigo conforme a familia para os demais caso gera normalmente
				CALL ptu_gerar_regra_titularidade(nr_seq_segurado_w,cd_estabelecimento_p,nm_usuario_p);

				CALL pls_gerar_carteira_usuario(nr_seq_segurado_w,nr_seq_titular_w,clock_timestamp(),dt_validade_carteira_w,'P','N',null,nm_usuario_p);

				update	pls_segurado_carteira
				set	nr_cartao_intercambio	= cd_usuario_plano_ww
				where	nr_seq_segurado		= nr_seq_segurado_w
				and	cd_estabelecimento	= cd_estabelecimento_p;
			elsif (qt_carteiras_segurado_w = 0) then

				select	max(nr_seq_segurado)
				into STRICT	nr_seq_segurado_cart_exist_w
				from	pls_segurado_carteira
				where	cd_usuario_plano	= cd_usuario_plano_ww
				and	coalesce(nr_seq_emissor::text, '') = '';

				if (nr_seq_segurado_cart_exist_w IS NOT NULL AND nr_seq_segurado_cart_exist_w::text <> '') then
					--wheb_mensagem_pck.exibir_mensagem_abort( 247947, 'NR_SEQ_SEGURADO='||nr_seq_segurado_cart_exist_w||';CD_USUARIO_PLANO='||cd_usuario_plano_ww );

					--'Ja existe o beneficiario '||nr_seq_segurado_cart_exist_w||' cadastrado com a carteira '||cd_usuario_plano_ww||'. Favor verifique.'
					ie_status_w := 'S';
				else
					select	coalesce(max(nr_via_solicitacao),0) + 1
					into STRICT	nr_via_solicitacao_w
					from	pls_segurado_carteira
					where	nr_seq_segurado	= nr_seq_segurado_w;

					select	nextval('pls_segurado_carteira_seq')
					into STRICT	nr_seq_carteira_w
					;

					insert into pls_segurado_carteira(	nr_sequencia, dt_atualizacao, nm_usuario,dt_atualizacao_nrec, nm_usuario_nrec,
							cd_estabelecimento,nr_seq_segurado,dt_inicio_vigencia,dt_validade_carteira,cd_usuario_plano,
							ie_situacao,ds_observacao,nm_usuario_solicitante,dt_solicitacao,ie_processo,
							nr_via_solicitacao)
					values (	nr_seq_carteira_w,clock_timestamp(), nm_usuario_p,clock_timestamp(),nm_usuario_p,
							cd_estabelecimento_p,nr_seq_segurado_w,clock_timestamp(),dt_validade_carteira_w,cd_usuario_plano_ww,
							'D','Gerado a partir pela carteira de '||lower(wheb_mensagem_pck.get_texto(1109235))||' do '||lower(wheb_mensagem_pck.get_texto(1109236)),nm_usuario_p,clock_timestamp(),'M',
							nr_via_solicitacao_w);

					SELECT * FROM pls_obter_trilhas_cartao(nr_seq_segurado_w, ds_trilha1_w, ds_trilha2_w, ds_trilha3_w, ds_trilha_qr_code_w, nm_usuario_p) INTO STRICT ds_trilha1_w, ds_trilha2_w, ds_trilha3_w, ds_trilha_qr_code_w;

					update	pls_segurado_carteira
					set	ds_trilha1		= ds_trilha1_w,
						ds_trilha2		= ds_trilha2_w,
						ds_trilha3		= ds_trilha3_w,
						ds_trilha_qr_code	= ds_trilha_qr_code_w
					where	nr_sequencia	= nr_seq_carteira_w;

					CALL pls_alterar_estagios_cartao(nr_seq_carteira_w,clock_timestamp(),1,cd_estabelecimento_p,nm_usuario_p);
				end if;
			end if;

			if (ie_atualizar_validade_w = 'S') then
				CALL pls_gerar_renovacao_cart_inter(nr_seq_intercambio_p,nr_seq_segurado_w,ie_acao_contrato_p,nm_usuario_p);
			end if;
			end;
		end if;
	--Caso o beneficiario for de exclusao, atualizar a data de exclusao do beneficiario
	elsif (ie_tipo_registro_w = 'E') then
		if	((ie_tipo_segurado_w = 'H') and (dt_fim_repasse_w < clock_timestamp())) then
			ie_tipo_segurado_ww := 'I';
			CALL wheb_usuario_pck.set_ie_executar_trigger('N');
		else
			ie_tipo_segurado_ww := null;
		end if;

		update	pls_segurado
		set	nr_seq_motivo_cancelamento	= nr_seq_motivo_rescisao_p,
			dt_rescisao			= dt_exclusao_w,
			dt_limite_utilizacao		= dt_exclusao_w,
			ie_tipo_segurado		= CASE WHEN ie_tipo_segurado_ww = NULL THEN  ie_tipo_segurado  ELSE ie_tipo_segurado_ww END ,
			dt_alteracao_tipo_segurado	= CASE WHEN ie_tipo_segurado_ww = NULL THEN  dt_alteracao_tipo_segurado  ELSE trunc(clock_timestamp(),'dd') END
		where	nr_sequencia			= nr_seq_segurado_w;

		if (ie_tipo_segurado_ww = 'I') then
			CALL wheb_usuario_pck.set_ie_executar_trigger('S');
		end if;
		
		criar_historico_beneficiario(nr_seq_segurado_w);
		
		insert into pls_segurado_historico(nr_sequencia, dt_atualizacao, nm_usuario,
			dt_historico, nr_seq_segurado, ds_historico,
			ds_observacao, nr_seq_motivo_cancelamento, ie_tipo_historico,
			dt_ocorrencia_sib, ie_situacao_compartilhamento)
		values (nextval('pls_segurado_historico_seq'), clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nr_seq_segurado_w, wheb_mensagem_pck.get_texto(1109234),
			'', nr_seq_motivo_rescisao_p, '1',
			dt_exclusao_w, 'I');
	--Caso o beneficiario for de alteracao, verificar se os dados estao como atualmente, caso estiver diferente, o sistema atualiza
	elsif (ie_tipo_registro_w = 'A') then
		select	nr_seq_plano,
			ie_tipo_repasse,
			cd_matricula_familia,
			coalesce(ie_dependente_a100,'N')
		into STRICT	nr_seq_plano_ww,
			ie_repasse_ww,
			cd_matricula_familia_w,
			ie_dependente_a100_w
		from	pls_segurado
		where	nr_sequencia	= nr_seq_segurado_w;

		if	((coalesce(nr_seq_plano_w,0) <> coalesce(nr_seq_plano_ww,0)) and (ie_tipo_contrato_w <> 'F')) then --Se o beneficiario foi importado como Alteracao e o tipo do contrato for Fundacao, nao deve alterar o produto
			update	pls_segurado
			set	nr_seq_plano	= nr_seq_plano_w
			where	nr_sequencia	= nr_seq_segurado_w;

			insert into pls_segurado_historico(	nr_sequencia,dt_atualizacao,nm_usuario,dt_atualizacao_nrec,nm_usuario_nrec,
					nr_seq_segurado,dt_historico,ie_tipo_historico,ds_historico,ds_observacao,
					ie_situacao_compartilhamento)
			values (	nextval('pls_segurado_historico_seq'),clock_timestamp(),nm_usuario_p,clock_timestamp(),nm_usuario_p,
					nr_seq_segurado_w,clock_timestamp(),'4',wheb_mensagem_pck.get_texto(1109233)||': '|| nr_seq_plano_ww|| ' para: '||nr_seq_plano_w,'ptu_gerar_benef_intercambio',
					'I');
		end if;

		if (coalesce(ie_repasse_w,'X') <> coalesce(ie_repasse_ww,'X')) then
			update	pls_segurado
			set	ie_tipo_repasse	= ie_repasse_w
			where	nr_sequencia	= nr_seq_segurado_w;
		end if;

		--Verificar se existe o titular para o beneficiario na base
		if (ie_dependente_a100_w = 'S') then
			select	max(b.nr_sequencia)
			into STRICT	nr_seq_titular_w
			from	pls_segurado		b,
				pls_segurado_carteira	a
			where	a.nr_seq_segurado	= b.nr_sequencia
			and	b.nr_seq_intercambio	= nr_seq_intercambio_p
			and	b.ie_tipo_segurado	= 'T'
			and	b.nr_sequencia		<> nr_seq_segurado_w
			and	coalesce(b.nr_seq_parentesco::text, '') = ''
			and	a.nr_cartao_intercambio	= '0'||cd_unimed_w||cd_titular_plano_w;

			if (coalesce(nr_seq_titular_w::text, '') = '') then
				select	max(b.nr_sequencia)
				into STRICT	nr_seq_titular_w
				from	pls_segurado		b,
					pls_segurado_carteira	a
				where	a.nr_seq_segurado	= b.nr_sequencia
				and	b.nr_seq_intercambio	= nr_seq_intercambio_p
				and	b.ie_tipo_segurado	= 'T'
				and	b.nr_sequencia		<> nr_seq_segurado_w
				and	coalesce(b.nr_seq_parentesco::text, '') = ''
				and	a.cd_usuario_plano	= '0'||cd_unimed_w||cd_titular_plano_w;
			end if;

			if (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then
				update	pls_segurado
				set	nr_seq_titular	= nr_seq_titular_w,
					nm_usuario	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia	= nr_seq_segurado_w;
			end if;
		end if;

		criar_historico_beneficiario(nr_seq_segurado_w);
		
		alterar_validade_carteira(nr_seq_segurado_w, dt_validade_carteira_w, nm_usuario_p, cd_estabelecimento_p);

		CALL ptu_atualizar_carencias_benef(nr_seq_benef_p, nm_usuario_p);
	elsif (ie_tipo_registro_w = 'R') then --Caso o beneficiario for de reativacao. reativa os dados dele
		CALL pls_reativar_seg_intercambio(nr_seq_segurado_w,dt_repasse_w,wheb_mensagem_pck.get_texto(1109232),'B','N','N',ie_tipo_compartilhamento_w,cd_estabelecimento_p,nm_usuario_p);

		criar_historico_beneficiario(nr_seq_segurado_w);
	end if;

	update	ptu_intercambio_benef
	set	ie_status	= ie_status_w,
		nr_seq_segurado	= nr_seq_segurado_w
	where	nr_sequencia	= nr_seq_benef_p;

	if (ie_status_w = 'S') then
		CALL ptu_inserir_inconsistencia(nr_seq_intercambio_incos_p,nr_seq_benef_p,3213,wheb_mensagem_pck.get_texto(1109224),cd_estabelecimento_p,null,null,null,null,null,null,nm_usuario_p);
	end if;

	CALL ptu_gerar_carencia(nr_seq_benef_p, nr_seq_segurado_w, nm_usuario_p);

	if (coalesce(ie_gerar_contrat_sca_a100_w,'S') = 'S') then
		CALL ptu_gerar_plano_agregado(nr_seq_benef_p, nr_seq_segurado_w, nm_usuario_p);
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_gerar_benef_intercambio ( nr_seq_intercambio_p bigint, nr_seq_benef_p bigint, nr_seq_motivo_rescisao_p bigint, ie_alterar_dados_prest_p text, ie_gerar_renovacao_p text, ie_acao_contrato_p text, ie_vincular_pag_coop_a100_p text, nr_seq_intercambio_incos_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

