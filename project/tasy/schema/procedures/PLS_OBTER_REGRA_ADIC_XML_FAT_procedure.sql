-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_obter_regra_adic_xml_fat ( nr_seq_fatura_p bigint, nr_seq_conta_pos_estab_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_regra_p INOUT bigint, ie_valor_filme_p INOUT text ) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Obter a regra de itens adicionais para geração do XML de faturamento 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[X] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
nr_seq_pagador_w		pls_contrato_pagador.nr_sequencia%type;
cd_procedimento_w		procedimento.cd_procedimento%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;
cd_area_procedimento_w		bigint;
cd_especialidade_w		bigint;
cd_grupo_proc_w			bigint;
ie_origem_w			bigint;
nr_seq_material_w		pls_material.nr_sequencia%type;
nr_seq_estrut_mat_reg_w		pls_material.nr_seq_estrut_mat%type;
ie_tipo_despesa_mat_w		pls_conta_mat.ie_tipo_despesa%type;
nr_seq_regra_w			pls_fat_regra_mat.nr_sequencia%type;
ie_tipo_guia_w			pls_protocolo_conta.ie_tipo_guia%type;
ie_origem_protocolo_w		pls_protocolo_conta.ie_origem_protocolo%type;
ie_tipo_guia_princ_w		pls_conta.ie_tipo_guia%type;
nr_seq_conta_princ_w		pls_conta.nr_sequencia%type;
cd_guia_w			pls_conta.cd_guia%type;
nr_seq_analise_w		pls_analise_conta.nr_sequencia%type;
nr_seq_segurado_w		pls_segurado.nr_sequencia%type;
nr_seq_prestador_princ_w	pls_prestador.nr_sequencia%type;
nr_seq_grupo_material_w		pls_fat_regra_mat.nr_seq_grupo_material%type;

C01 CURSOR FOR 
	SELECT	nr_sequencia, 
		ie_valor_filme 
	from	pls_fat_regra_proc 
	where (nr_seq_pagador		= nr_seq_pagador_w or coalesce(nr_seq_pagador::text, '') = '' or coalesce(nr_seq_pagador_w::text, '') = '')	 
	/*and	(cd_procedimento	= cd_procedimento_w or cd_procedimento is null or cd_procedimento_w is null) 
	and	(ie_origem_proced	= ie_origem_proced_w or ie_origem_proced is null or ie_origem_proced_w is null)*/
 
	and	((coalesce(cd_procedimento::text, '') = '') or (cd_procedimento = cd_procedimento_w AND ie_origem_proced = ie_origem_proced_w) or (coalesce(cd_procedimento_w::text, '') = '')) 
	and (cd_area_procedimento	= cd_area_procedimento_w or coalesce(cd_area_procedimento::text, '') = '' or coalesce(cd_area_procedimento_w::text, '') = '') 
	and (cd_especialidade	= cd_especialidade_w or coalesce(cd_especialidade::text, '') = '' or coalesce(cd_especialidade_w::text, '') = '') 
	and (cd_grupo_proc		= cd_grupo_proc_w or coalesce(cd_grupo_proc::text, '') = '' or coalesce(cd_grupo_proc_w::text, '') = '') 
	order by 
		coalesce(nr_seq_pagador,0), 
		coalesce(cd_procedimento,0), 
		coalesce(cd_area_procedimento,0), 
		coalesce(cd_especialidade,0), 
		coalesce(cd_grupo_proc,0);

C02 CURSOR FOR 
	SELECT	nr_sequencia, 
		nr_seq_estrut_mat, 
		nr_seq_grupo_material 
	from	pls_fat_regra_mat 
	where (nr_seq_pagador		= nr_seq_pagador_w 	or coalesce(nr_seq_pagador::text, '') = '' 	or coalesce(nr_seq_pagador_w::text, '') = '') 
	and (nr_seq_material	= nr_seq_material_w 	or coalesce(nr_seq_material::text, '') = '' 	or coalesce(nr_seq_material_w::text, '') = '') 
	and (ie_tipo_despesa_mat	= ie_tipo_despesa_mat_w or coalesce(ie_tipo_despesa_mat::text, '') = '' 	or coalesce(ie_tipo_despesa_mat_w::text, '') = '') 
	and (ie_tipo_guia		= ie_tipo_guia_w 	or coalesce(ie_tipo_guia::text, '') = '' 	or coalesce(ie_tipo_guia_w::text, '') = '') 
	and (ie_origem_protocolo	= ie_origem_protocolo_w	or coalesce(ie_origem_protocolo::text, '') = ''	or coalesce(ie_origem_protocolo_w::text, '') = '') 
	and (ie_tipo_guia_princ	= ie_tipo_guia_princ_w	or coalesce(ie_tipo_guia_princ::text, '') = ''	or coalesce(ie_tipo_guia_princ_w::text, '') = '') 
	order by 
		coalesce(nr_seq_pagador,0), 
		coalesce(nr_seq_material,0), 
		coalesce(nr_seq_estrut_mat,0), 
		coalesce(ie_tipo_despesa_mat,0), 
		coalesce(ie_tipo_guia,0), 
		coalesce(ie_origem_protocolo,0), 
		coalesce(ie_tipo_guia_princ,0), 
		coalesce(nr_seq_grupo_material,0);
		

BEGIN 
ie_valor_filme_p := null;
 
if (nr_seq_fatura_p IS NOT NULL AND nr_seq_fatura_p::text <> '') then 
	select	max(nr_seq_pagador) 
	into STRICT	nr_seq_pagador_w 
	from	pls_fatura 
	where	nr_sequencia	= nr_seq_fatura_p;
end if;
 
-- PROCEDIMENTO 
if (nr_seq_conta_proc_p IS NOT NULL AND nr_seq_conta_proc_p::text <> '') then 
	select	max(cd_procedimento), 
		max(ie_origem_proced) 
	into STRICT	cd_procedimento_w, 
		ie_origem_proced_w 
	from	pls_conta_proc 
	where	nr_sequencia	= nr_seq_conta_proc_p;	
	 
	SELECT * FROM pls_obter_estrut_proc( cd_procedimento_w, ie_origem_proced_w, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_w) INTO STRICT cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, ie_origem_w;	
	 
	if (coalesce(ie_origem_proced_w::text, '') = '') then 
		ie_origem_proced_w := ie_origem_w;
	end if;
 
	open C01;
	loop 
	fetch C01 into	 
		nr_seq_regra_p, 
		ie_valor_filme_p;
	EXIT WHEN NOT FOUND; /* apply on C01 */
	end loop;
	close C01;
end if;
 
-- MATERIAL 
if (nr_seq_conta_mat_p IS NOT NULL AND nr_seq_conta_mat_p::text <> '') then 
	select	max(a.nr_sequencia), 
		max(b.ie_tipo_despesa), 
		max(c.ie_tipo_guia), 
		max(d.ie_origem_protocolo), 
		max(coalesce(x.cd_guia, c.cd_guia)), 
		max(c.nr_seq_analise), 
		max(coalesce(x.nr_seq_segurado, c.nr_seq_segurado)), 
		max(coalesce(x.nr_seq_prestador, c.nr_seq_prestador)) 
	into STRICT	nr_seq_material_w, 
		ie_tipo_despesa_mat_w, 
		ie_tipo_guia_w, 
		ie_origem_protocolo_w, 
		cd_guia_w, 
		nr_seq_analise_w, 
		nr_seq_segurado_w, 
		nr_seq_prestador_princ_w 
	FROM pls_protocolo_conta d, pls_conta_mat b, pls_material a, pls_conta c
LEFT OUTER JOIN pls_analise_conta x ON (c.nr_seq_analise = x.nr_sequencia)
WHERE d.nr_sequencia		= c.nr_seq_protocolo and c.nr_sequencia		= b.nr_seq_conta and a.nr_sequencia		= b.nr_seq_material  and b.nr_sequencia		= nr_seq_conta_mat_p;
	 
	nr_seq_conta_princ_w	:= pls_obter_conta_principal(cd_guia_w, nr_seq_analise_w, nr_seq_segurado_w, nr_seq_prestador_princ_w);
	 
	select	max(ie_tipo_guia) 
	into STRICT	ie_tipo_guia_princ_w 
	from	pls_conta 
	where	nr_sequencia	= nr_seq_conta_princ_w;
	 
	open C02;
	loop 
	fetch C02 into	 
		nr_seq_regra_w, 
		nr_seq_estrut_mat_reg_w, 
		nr_seq_grupo_material_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		 
		-- Verificar se o material esta dentro da estrutura de material da regra 
		if (coalesce(nr_seq_estrut_mat_reg_w::text, '') = '') or (pls_obter_se_estruturas_mat( nr_seq_estrut_mat_reg_w, nr_seq_material_w) = 'S') and	 
			((coalesce(nr_seq_grupo_material_w::text, '') = '') or (pls_se_grupo_preco_material(nr_seq_grupo_material_w, nr_seq_material_w) = 'S')) then						 
			nr_seq_regra_p := nr_seq_regra_w;
		end if;
		 
		end;
	end loop;
	close C02;
end if;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_obter_regra_adic_xml_fat ( nr_seq_fatura_p bigint, nr_seq_conta_pos_estab_p bigint, nr_seq_conta_proc_p bigint, nr_seq_conta_mat_p bigint, nr_seq_regra_p INOUT bigint, ie_valor_filme_p INOUT text ) FROM PUBLIC;

