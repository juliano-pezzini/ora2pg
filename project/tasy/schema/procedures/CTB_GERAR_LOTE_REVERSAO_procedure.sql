-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_gerar_lote_reversao ( ds_lote_contabil_p text, nr_seq_mes_ref_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, cd_historico_p bigint) AS $body$
DECLARE



ds_lote_contabil_w		varchar(4000);
nr_lote_contabil_w		bigint;
nr_seq_movimento_ww	bigint;
nr_lote_atual_w		bigint;
ie_pos_virgula_w		bigint;
ie_tamanho_w		bigint;
cd_tipo_lote_digitacao_w	bigint;

/*Lote*/

dt_referencia_w		timestamp;

/*Movimento*/

nr_seq_movimento_w	bigint;
nr_seq_mes_ref_w		bigint;
dt_movimento_w		timestamp;
vl_movimento_w		double precision;
cd_historico_w		bigint;
cd_conta_debito_w		varchar(20);
cd_conta_credito_w	varchar(20);
ds_compl_historico_w	varchar(255);
nr_seq_agrupamento_w	bigint;
cd_estabelecimento_w	bigint;
ds_consistencia_w		varchar(255);
cd_classif_debito_w	varchar(40);
cd_classif_credito_w	varchar(40);
nr_seq_movto_corresp_w	bigint;
ds_obervacao_w		varchar(4000);
ds_observacao_w		varchar(255);
ds_observacao_ww	varchar(4000);
ds_lote_contabil_ww	varchar(4000);
ds_lote_contabil_www	varchar(4000);
ie_data_lote_rev_w	varchar(1);
dt_referencia_ww	timestamp;
nr_seq_mes_ref_ww	bigint;
dt_maior_w		timestamp;
qt_registros_w		bigint;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.dt_movimento,
	a.vl_movimento,
	a.cd_historico,
	a.cd_conta_debito,
	a.cd_conta_credito,
	a.ds_compl_historico,
	a.nr_seq_agrupamento,
	a.cd_estabelecimento,
	a.ds_consistencia,
	a.cd_classif_debito,
	a.cd_classif_credito
from	ctb_movimento a
where	a.nr_lote_contabil	= nr_lote_atual_w
and	not exists (	SELECT	1
			from	ctb_movimento y
			where	y.nr_seq_movto_corresp	= a.nr_sequencia);


BEGIN

ie_data_lote_rev_w := obter_param_usuario(923, 98, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_data_lote_rev_w);

select	max(a.dt_referencia)
into STRICT	dt_referencia_w
from	ctb_mes_ref a
where	a.nr_sequencia	= nr_seq_mes_ref_p;
	
ds_lote_contabil_w		:= substr(ds_lote_contabil_p, 1, 2000);
ds_lote_contabil_ww		:= substr(ds_lote_contabil_p, 1, 2000);
ds_lote_contabil_www		:= substr(ds_lote_contabil_p, 1, 2000);
nr_seq_mes_ref_w		:= nr_seq_mes_ref_p;
cd_tipo_lote_digitacao_w	:= coalesce(obter_valor_param_usuario(923, 3, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p), 'N');

select	max(nr_lote_contabil) +1
into STRICT	nr_lote_contabil_w
from	lote_contabil;

while(length(ds_lote_contabil_www) > 0) loop
	begin	
	
	ie_pos_virgula_w			:= position(',' in ds_lote_contabil_w);
	
	if (ie_pos_virgula_w = 0) then
		nr_lote_atual_w		:= ds_lote_contabil_w;
		ds_lote_contabil_www	:= '';
	else
		nr_lote_atual_w		:= substr(ds_lote_contabil_www, 1, ie_pos_virgula_w -1);
		ds_lote_contabil_www	:= substr(ds_lote_contabil_www, ie_pos_virgula_w +1, 4000);
	end if;
	
	select	max(ds_observacao)
	into STRICT	ds_observacao_ww
	from	lote_contabil
	where	nr_lote_contabil = nr_lote_atual_w
	and	(ds_observacao IS NOT NULL AND ds_observacao::text <> '');	
	
	ds_observacao_w := ds_observacao_ww;
	
	end;
end loop;

ds_observacao_w	:= ds_observacao_w || wheb_mensagem_pck.get_texto(298043,'DS_LOTE_CONTABIL_WW=' || ds_lote_contabil_ww);

insert into lote_contabil(	
	nr_lote_contabil,
	dt_referencia,
	cd_tipo_lote_contabil,
	dt_atualizacao,
	nm_usuario,
	cd_estabelecimento,
	ie_situacao,
	vl_debito,
	vl_credito,
	nm_usuario_original,
	nr_seq_mes_ref,
	ie_encerramento,
	dt_prev_reversao,
	dt_reversao,
	ds_observacao)
values (	nr_lote_contabil_w,
	dt_referencia_w,
	cd_tipo_lote_digitacao_w,
	clock_timestamp(),
	nm_usuario_p,
	cd_estabelecimento_p,
	'A',
	0,
	0,
	nm_usuario_p,
	nr_seq_mes_ref_w,
	'N',
	null,
	null,
	ds_observacao_w);
	
while(length(ds_lote_contabil_w) > 0) loop
	begin	
	
	ie_pos_virgula_w			:= position(',' in ds_lote_contabil_w);
	
	if (ie_pos_virgula_w = 0) then
		nr_lote_atual_w		:= ds_lote_contabil_w;
		ds_lote_contabil_w	:= '';
	else
		nr_lote_atual_w		:= substr(ds_lote_contabil_w, 1, ie_pos_virgula_w -1);
		ds_lote_contabil_w	:= substr(ds_lote_contabil_w, ie_pos_virgula_w +1, 4000);
	end if;

	-- Márcio OS 471916: Se o parâmetro 98 estiver habilitado para data de reversão, no lote de reversão deve ser considerada a data prevista de reversão do lote original
	if (coalesce(ie_data_lote_rev_w,1) = 2) then
		
		select	max(a.DT_PREV_REVERSAO)
		into STRICT	dt_referencia_ww
		from	lote_contabil a
		where	a.nr_lote_contabil = nr_lote_atual_w;
		
		if (coalesce(dt_maior_w::text, '') = '') then
			dt_maior_w := dt_referencia_ww;
		elsif (dt_referencia_ww > dt_maior_w) then
			dt_maior_w := dt_referencia_ww;
		end if;

	end if;
	
	open c01;
	loop

	fetch c01 into	
		nr_seq_movimento_w,
		dt_movimento_w,
		vl_movimento_w,
		cd_historico_w,
		cd_conta_debito_w,
		cd_conta_credito_w,
		ds_compl_historico_w,
		nr_seq_agrupamento_w,
		cd_estabelecimento_w,
		ds_consistencia_w,
		cd_classif_debito_w,
		cd_classif_credito_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		-- Márcio OS 471916: Se o parâmetro 98 estiver habilitado para data de reversão, no lote de reversão deve ser considerada a data prevista de reversão do lote original
		if (coalesce(ie_data_lote_rev_w,1) = 2) then
			
			select	count(*)
			into STRICT	qt_registros_w
			from	ctb_mes_ref
			where	dt_referencia = dt_maior_w;
			
			if (qt_registros_w > 0) then
				
				select	nr_sequencia
				into STRICT	nr_seq_mes_ref_w
				from	ctb_mes_ref
				where	dt_referencia = dt_maior_w;
				
				dt_referencia_w := dt_maior_w;	
				
			end if;
			
		end if;
		
		select	nextval('ctb_movimento_seq')
		into STRICT	nr_seq_movimento_ww
		;
		
		cd_classif_debito_w	:= ctb_obter_classif_conta(cd_conta_debito_w, null, dt_referencia_w);
		cd_classif_credito_w	:= ctb_obter_classif_conta(cd_conta_credito_w, null, dt_referencia_w);
		
		insert into ctb_movimento(	
			nr_sequencia,
			nr_lote_contabil,
			nr_seq_mes_ref,
			dt_movimento,
			vl_movimento,
			dt_atualizacao,
			nm_usuario,
			cd_historico,
			cd_conta_debito,
			cd_conta_credito,
			ds_compl_historico,
			nr_seq_agrupamento,
			ie_revisado,
			cd_estabelecimento,
			ds_consistencia,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_classif_debito,
			cd_classif_credito,
			nr_seq_movto_corresp)
		values (	nr_seq_movimento_ww,
			nr_lote_contabil_w,
			nr_seq_mes_ref_w,
			dt_referencia_w,
			vl_movimento_w,
			clock_timestamp(),
			nm_usuario_p,
			coalesce(cd_historico_p, cd_historico_w),
			cd_conta_credito_w,	-- Reversao
			cd_conta_debito_w,	-- Reversao
			ds_compl_historico_w,
			nr_seq_agrupamento_w,
			'N',
			cd_estabelecimento_w,
			ds_consistencia_w,
			clock_timestamp(),
			nm_usuario_p,
			cd_classif_credito_w,	-- Reversao
			cd_classif_debito_w,
			nr_seq_movimento_w);	-- Reversao
		
		/*Centros de custo..*/

		insert into ctb_movto_centro_custo(	
			nr_sequencia,
			nr_seq_movimento,
			cd_centro_custo,
			dt_atualizacao,
			nm_usuario,
			vl_movimento,
			pr_rateio)
		(SELECT	nextval('ctb_movto_centro_custo_seq'),
			nr_seq_movimento_ww,
			a.cd_centro_custo,
			clock_timestamp(),
			nm_usuario_p,
			a.vl_movimento,
			a.pr_rateio
		from	ctb_movto_centro_custo a
		where	nr_seq_movimento		= nr_seq_movimento_w);
		
		end;
	end loop;
	close c01;

	-- Só faz o update se houver data prevista de reversão informada
	if (dt_maior_w IS NOT NULL AND dt_maior_w::text <> '') then
		
		select	nr_sequencia
		into STRICT	nr_seq_mes_ref_ww
		from	ctb_mes_ref
		where	dt_referencia = trunc(dt_maior_w,'mm');
		
		if (nr_seq_mes_ref_ww IS NOT NULL AND nr_seq_mes_ref_ww::text <> '') then
			
			update 	lote_contabil
			set 	dt_referencia = dt_referencia_ww,
				nr_seq_mes_ref = nr_seq_mes_ref_ww
			where	nr_lote_contabil = nr_lote_contabil_w;
		end if;
		
	end if;
	
	CALL ctb_atualizar_reversao_lote(nr_lote_atual_w, nm_usuario_p);
	
	update	lote_contabil
	set	dt_reversao	= clock_timestamp()
	where	nr_lote_contabil	= nr_lote_atual_w;
	end;
end loop;	

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_gerar_lote_reversao ( ds_lote_contabil_p text, nr_seq_mes_ref_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, cd_historico_p bigint) FROM PUBLIC;

