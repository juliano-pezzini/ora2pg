-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE dime_reg_saidas_uf ( nr_seq_controle_p bigint, cd_estabelecimento_p text, nm_usuario_p text, dt_referencia_p timestamp, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) AS $body$
DECLARE

 
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Gerar as informações referentes às saidas de valores de NF 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
------------------------------------------------------------------------------------------------------------------- 
Referências: 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ds_arquivo_w			varchar(4000);
ds_arquivo_compl_w		varchar(4000);
ds_linha_w			varchar(8000);
ds_quadro_w			varchar(2);
nr_linha_w			bigint	:= qt_linha_p;
nr_seq_registro_w		bigint 	:= nr_sequencia_p;
separador_w			varchar(1)	:= ds_separador_p;
tp_registro_w			varchar(2);

cd_cfop_w			bigint;
sigla_uf_w			varchar(2);
vl_contabil_w			double precision;
vl_base_calculo_w		double precision;
vl_outras_w			double precision;
vl_contabil_total_w		double precision	:= 0;
vl_base_calculo_total_w		double precision	:= 0;
vl_outras_total_w		double precision	:= 0;
dt_inicial_w			timestamp;
dt_final_w			timestamp;

c_valores CURSOR FOR 
	SELECT	substr(obter_dados_nota_fiscal(a.nr_sequencia, '31'), 1, 255) sg_uf, 
		sum(a.vl_total_nota) vl_total_nota, 
		sum(obter_base_calc_icms_nf(a.nr_sequencia)) vl_base_calculo 
	from	fis_livro_fiscal	b, 
		nota_fiscal		a, 
		fis_lote_livro_fiscal	f, 
		fis_lote_nota_fiscal	n, 
		fis_lote		l 
	where	a.nr_sequencia	= n.nr_seq_nota_fiscal 
	and	n.nr_seq_lote	= f.nr_seq_lote 
	and	l.nr_sequencia	= f.nr_seq_lote 
	and	b.nr_sequencia	= f.nr_seq_livro_fiscal 
	and	b.ie_tipo_livro_fiscal = 'S' 
	and	l.ie_tipo_lote	= 'S' 
	and	exists (SELECT	1 
			from	natureza_operacao	o, 
				nota_fiscal_item	i 
			where	i.cd_natureza_operacao	= o.cd_natureza_operacao 
			and	i.nr_sequencia		= a.nr_sequencia 
			and	(substr(o.cd_cfop,1,1))::numeric  in (5,6,7)) 
	and	a.dt_entrada_saida between dt_inicial_w and dt_final_w 
	group by 
		substr(obter_dados_nota_fiscal(a.nr_sequencia, '31'), 1, 255) 
	order by 
		sg_uf;


BEGIN 
ds_quadro_w	:= '50';
tp_registro_w	:= '50';
 
/* 
dt_inicial_w	:= trunc(trunc(dt_referencia_p,'yyyy'),'dd'); 
dt_final_w	:= fim_dia(fim_mes(add_months(dt_inicial_w,11))); 
*/
 
 
dt_inicial_w	:= pkg_date_utils.start_of(dt_referencia_p, 'MONTH', 0);
dt_final_w	:= fim_dia(fim_mes(dt_inicial_w));
 
open c_valores;
loop 
fetch c_valores into	 
	sigla_uf_w, 
	vl_contabil_w, 
	vl_base_calculo_w;
EXIT WHEN NOT FOUND; /* apply on c_valores */
	begin 
	vl_outras_w		:= vl_contabil_w - vl_base_calculo_w;
	 
	vl_contabil_total_w	:= vl_contabil_total_w + vl_contabil_w;
	vl_base_calculo_total_w	:= vl_base_calculo_total_w + vl_base_calculo_w;
	vl_outras_total_w	:= vl_outras_total_w + vl_outras_w;
	 
	if (sigla_uf_w IS NOT NULL AND sigla_uf_w::text <> '') then 
		/* Montar o arquivo */
 
		ds_linha_w	:= 	tp_registro_w								|| separador_w || -- campo 01: tipo de registro [tamanho 02] preencher com "22" 
					ds_quadro_w								|| separador_w || -- campo 02: quadro [tamanho 02] preencher com "01" 
					sigla_uf_w								|| separador_w || -- campo 03: CFOP [tamanho 02]	 
					lpad(replace(campo_mascara(coalesce(vl_contabil_w,0),2),'.',''),17,'0')	|| separador_w || 
					lpad(replace(campo_mascara(0,2),'.',''),17,'0')				|| separador_w || 
					lpad(replace(campo_mascara(coalesce(vl_base_calculo_w,0),2),'.',''),17,'0') || separador_w || 
					lpad(replace(campo_mascara(0,2),'.',''),17,'0')				|| separador_w || 
					lpad(replace(campo_mascara(coalesce(vl_outras_w,0),2),'.',''),17,'0')	|| separador_w || 
					lpad(replace(campo_mascara(0,2),'.',''),17,'0')				|| separador_w;
					  
		ds_arquivo_w		:= substr(ds_linha_w,1,4000);
		ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
		nr_seq_registro_w	:= nr_seq_registro_w + 1;
		nr_linha_w		:= nr_linha_w + 1;			
 
		-- insert na tabela do DIME 
		insert into w_dime_arquivo(nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			nr_seq_controle_dime, 
			nr_linha, 
			cd_registro, 
			ds_arquivo) 
		values (nextval('w_dime_arquivo_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			nr_seq_controle_p, 
			nr_linha_w, 
			tp_registro_w, 
			ds_arquivo_w);
 
		commit;
	end if;
	end;
end loop;
close c_valores;
 
/* 	Registro Totalizador		*/
 
ds_linha_w	:= 	tp_registro_w									|| separador_w || -- campo 01: tipo de registro [tamanho 02] preencher com "22" 
			ds_quadro_w									|| separador_w || -- campo 02: quadro [tamanho 02] preencher com "01" 
			'TT'										|| separador_w || -- campo 03: CFOP [tamanho 02]	 
			lpad(replace(campo_mascara(coalesce(vl_contabil_total_w,0),2),'.',''),17,'0')	|| separador_w || 
			lpad(replace(campo_mascara(0,2),'.',''),17,'0')					|| separador_w || 
			lpad(replace(campo_mascara(coalesce(vl_base_calculo_total_w,0),2),'.',''),17,'0')	|| separador_w || 
			lpad(replace(campo_mascara(0,2),'.',''),17,'0')					|| separador_w || 
			lpad(replace(campo_mascara(coalesce(vl_outras_total_w,0),2),'.',''),17,'0')		|| separador_w || 
			lpad(replace(campo_mascara(0,2),'.',''),17,'0')					|| separador_w;
 
ds_arquivo_w		:= substr(ds_linha_w,1,4000);
ds_arquivo_compl_w	:= substr(ds_linha_w,4001,4000);
nr_seq_registro_w	:= nr_seq_registro_w + 1;
nr_linha_w		:= nr_linha_w + 1;			
 
-- insert na tabela do DIME 
insert into w_dime_arquivo(nr_sequencia, 
	dt_atualizacao, 
	nm_usuario, 
	dt_atualizacao_nrec, 
	nm_usuario_nrec, 
	nr_seq_controle_dime, 
	nr_linha, 
	cd_registro, 
	ds_arquivo) 
values (nextval('w_dime_arquivo_seq'), 
	clock_timestamp(), 
	nm_usuario_p, 
	clock_timestamp(), 
	nm_usuario_p, 
	nr_seq_controle_p, 
	nr_linha_w, 
	tp_registro_w, 
	ds_arquivo_w);
 
commit;
 
qt_linha_p	:= nr_linha_w;
nr_sequencia_p	:= nr_seq_registro_w;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE dime_reg_saidas_uf ( nr_seq_controle_p bigint, cd_estabelecimento_p text, nm_usuario_p text, dt_referencia_p timestamp, ds_separador_p text, qt_linha_p INOUT bigint, nr_sequencia_p INOUT bigint) FROM PUBLIC;

