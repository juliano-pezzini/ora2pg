-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_vice ( nr_seq_vice_p bigint, nr_atendimento_p bigint, dt_referencia_p timestamp, nm_usuario_p text) AS $body$
DECLARE


			
dt_inicial_w		timestamp;
dt_final_w		timestamp;
nm_atributo_inf_w	varchar(255);
nr_sequencia_w		bigint;
ds_comando_w		varchar(4000);
retorno_w			integer;
C04				integer;
dt_referencia_w		timestamp;
ds_escala_w		varchar(255);
ie_tipo_atributo_w	varchar(255);
DS_VALORES_w		varchar(4000);
ds_comando_update_w	varchar(4000);
ds_separador_bv_w	varchar(100);

C01 is CURSOR
	
with x as (
	SELECT a.nm_tabela,
			   a.nm_atributo_data,
			   a.nm_atributo_inf,
			   a.ds_informacao,
			   a.nr_sequencia,
			   b.nr_seq_apres,
			   a.ds_function,
			   0 nr_seq_escala
		from   VICE_ESCALA	a,
			   PEP_VICE_ESCALA b
		where  a.nr_sequencia = b.nr_seq_escala
		and	   b.nr_seq_vice = nr_seq_vice_p
		order by coalesce(nr_seq_apres,999)
), sf2 as (
	SELECT coalesce(c.nr_seq_escala,0) nr_seq_escala
	from escala_eif_ii c
	where  nr_atendimento = nr_atendimento_p
	and   c.dt_avaliacao between clock_timestamp() - interval '1 days' and clock_timestamp()
	and	  (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '')
	and	  coalesce(c.dt_inativacao::text, '') = ''

), sf1 as (
	select coalesce(c.nr_seq_escala,0)  nr_seq_escala
	from escala_eif c
	where nr_atendimento = nr_atendimento_p
	and    c.dt_avaliacao between clock_timestamp() - interval '1 days' and clock_timestamp()
	and	   (c.dt_liberacao IS NOT NULL AND c.dt_liberacao::text <> '') 
	and	   coalesce(c.dt_inativacao::text, '') = ''
)
	select * from x where nm_tabela not in ('ESCALA_EIF','ESCALA_EIF_II')
	
union

	select x.nm_tabela,
			   x.nm_atributo_data,
			   x.nm_atributo_inf,
			   x.ds_informacao || ' - ' || obter_desc_score_flex(coalesce(c.nr_seq_escala,0)) ds_informacao,
			   x.nr_sequencia,
			   x.nr_seq_apres,
			   x.ds_function,
			   coalesce(c.nr_seq_escala,0)  nr_seq_escala
	from x, sf1 c
	where nm_tabela = 'ESCALA_EIF'
    
union

    select x.nm_tabela,
			   x.nm_atributo_data,
			   x.nm_atributo_inf,
			   x.ds_informacao,
			   x.nr_sequencia,
			   x.nr_seq_apres,
			   x.ds_function,
			   0  nr_seq_escala
	from x
	where nm_tabela = 'ESCALA_EIF'
    and not exists (select 1 from sf1)
	
union

	select x.nm_tabela,
			   x.nm_atributo_data,
			   x.nm_atributo_inf,
			   x.ds_informacao || ' - ' || obter_desc_score_flex_2(coalesce(c.nr_seq_escala,0)) ds_informacao,
			   x.nr_sequencia,
			   x.nr_seq_apres,
			   x.ds_function,
			   coalesce(c.nr_seq_escala,0) nr_seq_escala
	from x, sf2 c
	where nm_tabela = 'ESCALA_EIF_II'
    
union

    select x.nm_tabela,
			   x.nm_atributo_data,
			   x.nm_atributo_inf,
			   x.ds_informacao,
			   x.nr_sequencia,
			   x.nr_seq_apres,
			   x.ds_function,
			   0  nr_seq_escala
	from x
	where nm_tabela = 'ESCALA_EIF_II'
    and not exists (select 1 from sf2);
	
BEGIN

dt_inicial_w	:= trunc(dt_referencia_p,'Month');
dt_final_w	:= fim_dia(last_day(dt_referencia_p));
ds_separador_bv_w	:= obter_separador_bv;

delete	from w_pep_vice
where	dt_atualizacao < clock_timestamp() - interval '12 days'/24;

delete	from w_pep_vice
where	nr_atendimento	= nr_atendimento_p
and	nm_usuario	= nm_usuario_p;

commit;

for registros in C01 loop
	begin
	
	select	nextval('w_pep_vice_seq')
	into STRICT	nr_sequencia_w
	;
	
	insert into w_pep_vice(	nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_atendimento,
					nr_seq_escala,
					nr_seq_apres,
					ds_informacao)
		values (	nr_sequencia_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_atendimento_p,
					registros.nr_sequencia,
					registros.nr_seq_apres,
					substr(registros.ds_informacao,1,80));
					
	
	
	select	max(ie_tipo_atributo),
		max(DS_VALORES)
	into STRICT	ie_tipo_atributo_w,
		DS_VALORES_w
	from	tabela_atributo
	where	nm_tabela	= registros.nm_tabela
	and	nm_atributo	= registros.nm_atributo_inf;

	nm_atributo_inf_w := registros.nm_atributo_inf;
	
	if (ie_tipo_atributo_w	= 'FUNCTION') then
		nm_atributo_inf_w	:= DS_VALORES_w;
	end if;

	
	if (registros.DS_FUNCTION IS NOT NULL AND registros.DS_FUNCTION::text <> '') then
		nm_atributo_inf_w	:= registros.DS_FUNCTION;
	end if;	
	

	ds_comando_w	:= 	'select	     	'||registros.nm_atributo_data||' dt_referencia ,'||
				'            	'||nm_atributo_inf_w||' ds_informacao '||
				'from		'||registros.nm_tabela	||' '||
				'where		nr_atendimento = :nr_atendimento '||
				'and		'||registros.nm_atributo_data|| ' between :dt_inicial and :dt_final '||
				'and 		obter_se_lib_nivel_atencao(ie_nivel_atencao,wheb_assist_pck.get_nivel_atencao_perfil,nm_usuario) = ''S'''||
				'and		dt_liberacao is not null ' ||
				'and		dt_inativacao is null ';
				
	if (registros.nm_tabela in ('ESCALA_EIF','ESCALA_EIF_II')) then
		ds_comando_w := ds_comando_w || ' and nr_seq_escala = '||registros.nr_seq_escala;
	end if;
				
	ds_comando_w := ds_comando_w ||' order by 1';

	C04 := DBMS_SQL.OPEN_CURSOR;
	DBMS_SQL.PARSE(C04, ds_comando_w, dbms_sql.Native);
	
	DBMS_SQL.DEFINE_COLUMN(C04,1,dt_referencia_w);
	DBMS_SQL.DEFINE_COLUMN(C04,2,ds_escala_w,255);
	
	DBMS_SQL.BIND_VARIABLE(C04,'NR_ATENDIMENTO', NR_ATENDIMENTO_P);
	DBMS_SQL.BIND_VARIABLE(C04,'DT_INICIAL', dt_inicial_w);
	DBMS_SQL.BIND_VARIABLE(C04,'DT_FINAL', dt_final_w);

	retorno_w := DBMS_SQL.execute(C04);
	
	while( DBMS_SQL.FETCH_ROWS(C04) > 0 ) loop
		begin
		DBMS_SQL.COLUMN_VALUE(C04,1,dt_referencia_w);
		DBMS_SQL.COLUMN_VALUE(C04,2,ds_escala_w);
		
		ds_comando_update_w	:= 	'	update	w_pep_vice	'||
						'	set	ds_dia_'||to_char(dt_referencia_w,'dd')|| ' = :ds_escala '||
						'	where	nr_sequencia	= :nr_sequencia';
			
						
		CALL Exec_sql_Dinamico_bv('VICE',ds_comando_update_w,'ds_escala='||ds_escala_w||ds_separador_bv_w||
								'nr_sequencia='||nr_sequencia_w||ds_separador_bv_w);
		
		
		
		end;
	end loop;
	DBMS_SQL.CLOSE_CURSOR(C04);
	
	end;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_vice ( nr_seq_vice_p bigint, nr_atendimento_p bigint, dt_referencia_p timestamp, nm_usuario_p text) FROM PUBLIC;

