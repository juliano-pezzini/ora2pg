-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualiza_cep_nulo (nm_usuario_p text) AS $body$
DECLARE


/* variaveis localidade (cursor) */

nr_seq_loc_w	bigint;
nm_localidade_w	varchar(60);
ds_uf_w		valor_dominio.vl_dominio%type;

/* variaveis tasy_versao */

cd_cep_ver_w	integer;
ds_uf_ver_w	varchar(2);

/* variaveis logradouro */

nr_seq_log_w	bigint;
ds_uf_log_w	valor_dominio.vl_dominio%type;
cd_cep_log_w	integer;

/* obter ceps nulos */

c01 CURSOR FOR
SELECT	nr_sequencia,
	nm_localidade,
	ds_uf
from	cep_loc
where	coalesce(cd_cep::text, '') = '';

c02	  	integer;
retorno_w	integer;
ds_comando_w	varchar(2000);
ds_valor_w	varchar(255);

BEGIN

open c01;
loop
fetch c01 into	nr_seq_loc_w,
			nm_localidade_w,
			ds_uf_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	/* tentar obter cep válido tasy_versao */

	ds_comando_w := ' select	nvl(max(cd_cep),0),' ||
			'		max(ds_uf) ' ||
			' from		tasy_versao.cep_loc_nulo ' ||
			' where		nr_sequencia = :nr_sequencia';

	C02 := DBMS_SQL.OPEN_CURSOR;
	DBMS_SQL.PARSE(C02, ds_comando_w, dbms_sql.Native);
	DBMS_SQL.DEFINE_COLUMN(C02, 1, ds_valor_w,255);
	DBMS_SQL.DEFINE_COLUMN(C02, 2, ds_valor_w,255);
	DBMS_SQL.BIND_VARIABLE(C02, 'NR_SEQUENCIA', nr_seq_loc_w,255);
	retorno_w := DBMS_SQL.execute(c02);
	retorno_w := DBMS_SQL.fetch_rows(c02);
	DBMS_SQL.COLUMN_VALUE(C02, 1, ds_valor_w);
	cd_cep_ver_w := (ds_valor_w)::numeric;
	DBMS_SQL.COLUMN_VALUE(C02, 2, ds_valor_w);
	ds_uf_ver_w := substr(ds_valor_w,1,2);
	DBMS_SQL.CLOSE_CURSOR(C02);

	if (cd_cep_ver_w <> 0) then
		update	cep_loc
		set	cd_cep			= cd_cep_ver_w,
			ds_uf			= ds_uf_ver_w,
			nm_usuario		= nm_usuario_p,
			dt_atualizacao	= clock_timestamp()
		where	nr_sequencia		= nr_seq_loc_w;

	else	/* tentar obter cep válido logradouro (integridade) - Rafael em 08/02/2007 OS49509 */
		select	coalesce(min(nr_sequencia),0)
		into STRICT	nr_seq_log_w
		from	cep_log
		where	nr_seq_loc = nr_seq_loc_w
		and	(cd_cep IS NOT NULL AND cd_cep::text <> '');

		if (nr_seq_log_w <> 0) then
			select	coalesce(max(cd_cep),0),
				max(ds_uf)
			into STRICT	cd_cep_log_w,
				ds_uf_log_w
			from	cep_log
			where	nr_sequencia = nr_seq_log_w;

			update	cep_loc
			set	cd_cep			= cd_cep_log_w,
				ds_uf			= ds_uf_log_w,
				nm_usuario		= nm_usuario_p,
				dt_atualizacao	= clock_timestamp()
			where	nr_sequencia		= nr_seq_loc_w;

		else	/* tentar obter cep válido logradouro (descrição)  - Rafael em 08/02/2007 OS49509 */
			select	coalesce(min(nr_sequencia),0)
			into STRICT	nr_seq_log_w
			from	cep_log
			where	upper(nm_logradouro) = upper(nm_localidade_w)
			and	upper(ds_uf) = upper(ds_uf_w)
			and	(cd_cep IS NOT NULL AND cd_cep::text <> '');

			if (nr_seq_log_w <> 0) then
				select	coalesce(max(cd_cep),0),
					max(ds_uf)
				into STRICT	cd_cep_log_w,
					ds_uf_log_w
				from	cep_log
				where	nr_sequencia = nr_seq_log_w;

				update	cep_loc
				set	cd_cep			= cd_cep_log_w,
					ds_uf			= ds_uf_log_w,
					nm_usuario		= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia		= nr_seq_loc_w;
			end if;
		end if;
	end if;
	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualiza_cep_nulo (nm_usuario_p text) FROM PUBLIC;

