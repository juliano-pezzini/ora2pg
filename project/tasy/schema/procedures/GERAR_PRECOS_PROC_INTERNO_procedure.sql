-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_precos_proc_interno (cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text) AS $body$
DECLARE


qt_pontos_w			preco_amb.qt_pontuacao%type;
cd_convenio_w		bigint;
cd_categoria_w		varchar(10);
nr_seq_proc_interno_w	bigint;
cd_procedimento_w	bigint;
ie_origem_proced_w	bigint;

IE_ORIGEM_PRECO_w		smallint;
VL_PROCEDIMENTO_w		double precision;
VL_CUSTO_OPERACIONAL_w		double precision;
VL_ANESTESISTA_w		double precision;
VL_MEDICO_w			double precision;
VL_AUXILIARES_w			double precision;
VL_MATERIAIS_w			double precision;
VL_PTO_PROCEDIMENTO_w		double precision;
VL_PTO_CUSTO_OPERAC_w		double precision;
VL_PTO_ANESTESISTA_w		double precision;
VL_PTO_MEDICO_w			double precision;
VL_PTO_AUXILIARES_w		double precision;
VL_PTO_MATERIAIS_w		double precision;
QT_PORTE_ANESTESICO_w		smallint;
CD_EDICAO_AMB_w			integer;
ie_preco_informado_w		varchar(01);
IE_CLASSIFICACAO_w		varchar(01);
nr_seq_ajuste_proc_w		bigint;


c01 CURSOR FOR
	SELECT	cd_convenio
	from	convenio
	where	ie_situacao	= 'A'
	and	cd_convenio	= cd_convenio_p;

c02 CURSOR FOR
	SELECT	cd_categoria
	from	categoria_convenio
	where	ie_situacao	= 'A'
	and	cd_convenio	= cd_convenio_p
	and	cd_categoria	= cd_categoria_p;

c03 CURSOR FOR
	SELECT	nr_sequencia
	from	proc_interno
	where	ie_situacao	= 'A';


BEGIN

delete from w_precos_convenio;


open	c01;
loop
fetch	c01 into
	cd_convenio_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	open	c02;
	loop
	fetch	c02 into
		cd_categoria_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin

		open	c03;
		loop
		fetch	c03 into
			nr_seq_proc_interno_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin

			SELECT * FROM Obter_Proc_Tab_Inter_Agenda(nr_seq_proc_interno_w, 0, cd_convenio_p, null, null, cd_estabelecimento_p, clock_timestamp(), null, null, null, null, null, null, null, null, cd_procedimento_w, ie_origem_proced_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w;


			select	max(ie_classificacao)
			into STRICT	IE_CLASSIFICACAO_w
			from	procedimento
			where	cd_procedimento 	= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w;


			if (IE_CLASSIFICACAO_w = 1) then

	        	        SELECT * FROM define_preco_procedimento(CD_ESTABELECIMENTO_P, cd_convenio_p, CD_CATEGORIA_p, clock_timestamp(), cd_procedimento_w, 0, 0, 0, null, 0, 0, 0, 0, null, null, 0, 0, null, vl_procedimento_w, VL_CUSTO_OPERACIONAL_w, VL_ANESTESISTA_w, VL_MEDICO_w, VL_AUXILIARES_w, VL_MATERIAIS_w, VL_PTO_PROCEDIMENTO_w, VL_PTO_CUSTO_OPERAC_w, VL_PTO_ANESTESISTA_w, VL_PTO_MEDICO_w, VL_PTO_AUXILIARES_w, VL_PTO_MATERIAIS_w, QT_PORTE_ANESTESICO_w, qt_pontos_w, CD_EDICAO_AMB_w, ie_preco_informado_w, nr_seq_ajuste_proc_w, 0, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_procedimento_w, VL_CUSTO_OPERACIONAL_w, VL_ANESTESISTA_w, VL_MEDICO_w, VL_AUXILIARES_w, VL_MATERIAIS_w, VL_PTO_PROCEDIMENTO_w, VL_PTO_CUSTO_OPERAC_w, VL_PTO_ANESTESISTA_w, VL_PTO_MEDICO_w, VL_PTO_AUXILIARES_w, VL_PTO_MATERIAIS_w, QT_PORTE_ANESTESICO_w, qt_pontos_w, CD_EDICAO_AMB_w, ie_preco_informado_w, nr_seq_ajuste_proc_w;
			else
		                SELECT * FROM define_preco_servico(CD_ESTABELECIMENTO_P, cd_convenio_p, CD_CATEGORIA_p, clock_timestamp(), cd_procedimento_w, 0, 0, 0, null, null, 0, 0, null, vl_procedimento_w, nr_seq_ajuste_proc_w, null, 0, null, nr_seq_proc_interno_w, null, null, null, null, null, null, null, null, null, null) INTO STRICT vl_procedimento_w, nr_seq_ajuste_proc_w;
			end if;

			if (vl_procedimento_w = 0) then
				begin

				insert into w_precos_convenio(CD_CONVENIO,
					CD_CATEGORIA,
					NR_SEQ_PROC_INTERNO,
					cd_procedimento,
					ie_origem_proced)
				values (cd_convenio_w,
					cd_categoria_w,
					nr_seq_proc_interno_w,
					cd_procedimento_w, ie_origem_proced_w);

				end;
			end if;
			end;
		end loop;
		close c03;
		end;
	end loop;
	close c02;
	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_precos_proc_interno (cd_estabelecimento_p bigint, cd_convenio_p bigint, cd_categoria_p text) FROM PUBLIC;

