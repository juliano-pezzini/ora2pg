-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_conta_liberar_glosa_oc_pos ( nr_seq_analise_conta_item_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint, nr_seq_conta_p bigint, nr_seq_analise_p bigint, nr_seq_glosa_oc_p bigint, ie_tipo_glosa_oc_p text, nr_seq_mot_liberacao_p bigint, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_grupo_atual_p bigint, ie_consistir_grupo_p text, ie_reconsistencia_p text ) AS $body$
DECLARE

 
/*	ie_tipo_glosa_oc_p 
	G - Glosa 
	O - Ocorrência 
*/
 
 
qt_registros_w			bigint	:= 0;
ie_tipo_motivo_w		varchar(3);
ie_tipo_historico_w		smallint;
nr_seq_item_w			bigint;
ie_tipo_item_w			varchar(1);
nr_seq_ocorrencia_w		bigint;
nr_seq_glosa_w			bigint;
nr_nivel_liberacao_w		bigint;
nr_nivel_liberacao_auditor_w	bigint;
nr_seq_oc_benef_w		bigint;
nr_seq_analise_conta_glosa_w	bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
nr_seq_conta_w			bigint;
nr_seq_glosa_oc_w		bigint;
ie_grupo_liberado_w		varchar(1);
ie_se_grupo_auditor_w		varchar(1);
cd_codigo_glosa_oco_w		varchar(20);
ie_status_w			varchar(1);
nr_seq_motivo_glosa_w		bigint;
nr_seq_ocor_w			bigint;
ie_existe_grupo_glosa_w		varchar(1);
nr_seq_nivel_lib_w		bigint;
qt_glosa_w			double precision;
vl_glosa_w			double precision;
qt_apresentado_w		double precision;
vl_total_apres_w		double precision;
ds_observacao_w			varchar(4000);
ds_tipo_motivo_w		varchar(255);
ds_motivo_liberacao_w		varchar(255);
ie_origem_analise_w		bigint;
var_tipo_item_w			varchar(2);
nr_seq_proc_partic_w		bigint;

 
/*Obter as glosas que foram geradas pela ocorrencia*/
 
C01 CURSOR FOR 
	SELECT	b.nr_sequencia, 
		b.nr_seq_conta_proc, 
		b.nr_seq_conta_mat, 
		b.nr_seq_conta, 
		b.nr_seq_glosa_oc 
	from	pls_conta_glosa a, 
		pls_analise_conta_item b 
	where	a.nr_sequencia = b.nr_seq_glosa_oc 
	and	a.nr_seq_ocorrencia = nr_seq_oc_benef_w 
	and	b.ie_status = 'P' 
	and	b.nr_seq_analise = nr_seq_analise_p 
	order by 1;


BEGIN 
 
/*Obter dados da glosa/ocorrência*/
 
select	ie_status, 
	cd_codigo, 
	nr_seq_conta_proc, 
	nr_seq_conta_mat, 
	nr_seq_proc_partic, 
	coalesce(nr_seq_conta,0), 
	CASE WHEN ie_tipo='O' THEN  nr_seq_glosa_oc  ELSE null END , 
	CASE WHEN ie_tipo='G' THEN  nr_seq_glosa_oc  ELSE null END  
into STRICT	ie_status_w, 
	cd_codigo_glosa_oco_w, 
	nr_seq_conta_proc_w, 
	nr_seq_conta_mat_w, 
	nr_seq_proc_partic_w, 
	nr_seq_conta_w,	 
	nr_seq_ocorrencia_w, 
	nr_seq_glosa_w 
from	pls_analise_conta_item 
where 	nr_sequencia = nr_seq_analise_conta_item_p;
 
/*Verificar se a ocorrência já foi liberado*/
 
if (ie_status_w = 'C') then 
	/*'Esta ocorrência é uma ocorrência corrigida. Este tipo de ocorrência não pode ser liberada.'*/
 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173775);
elsif (ie_status_w = 'E') then 
	/*'Esta ocorrência é uma ocorrência que necessita de correção. Este tipo de ocorrência não pode ser liberada.'*/
 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173776);	
elsif (ie_status_w <> 'P') then 
	/*'Esta glosa/ocorrência já foi liberada.'*/
 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173777);	
end if;
 
/*Verificar se o grupo já foi liberado*/
 
ie_grupo_liberado_w := pls_obter_se_grupo_liberado(nm_usuario_p, nr_seq_analise_p, nr_seq_grupo_atual_p);
if (ie_grupo_liberado_w = 'S') and (coalesce(ie_consistir_grupo_p,'S') = 'S') then	 
	/*'A ação deste grupo de auditores já foi encerrada.'*/
 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173778);		
end if;
 
if (ie_tipo_glosa_oc_p = 'G') then 
	nr_seq_motivo_glosa_w := pls_obter_seq_motivo_glosa(cd_codigo_glosa_oco_w);
else 
	nr_seq_ocor_w := pls_obter_seq_ocorrencia(cd_codigo_glosa_oco_w);
end if;
 
/*Obter se é um dos auditores do grupo no caso da ocorrencia. 
  Ou se for glosa, verifica se existe grupo na glosa e se este faz parte do grupo*/
 
ie_se_grupo_auditor_w := pls_obter_dados_auditor(cd_codigo_glosa_oco_w, null, nm_usuario_p, 'C', nr_seq_grupo_atual_p);
ie_existe_grupo_glosa_w := pls_obter_se_grupo_glosa(nr_seq_motivo_glosa_w);
 
if	((ie_se_grupo_auditor_w = 'N' AND ie_tipo_glosa_oc_p = 'O') or 
	((ie_existe_grupo_glosa_w = 'S') and (ie_tipo_glosa_oc_p = 'G') and (ie_se_grupo_auditor_w = 'N'))) and (coalesce(ie_consistir_grupo_p,'S') = 'S') then	 
	/*'Você não faz parte do grupo de análise desta glosa/ocorrência. Operação abortada.'*/
 
	CALL wheb_mensagem_pck.exibir_mensagem_abort(173779);
end if;
 
/*Consistência dos niveis de liberação do auditor e da ocorrência*/
 
if (ie_tipo_glosa_oc_p = 'O') and (coalesce(ie_consistir_grupo_p,'S') = 'S') then 
 
	/*Nivel de liberação da ocorrencia*/
 
	select	a.nr_seq_nivel_lib, 
		a.nr_sequencia 
	into STRICT	nr_seq_nivel_lib_w, 
		nr_seq_oc_benef_w 
	from	pls_ocorrencia a, 
		pls_ocorrencia_benef b 
	where	b.nr_seq_ocorrencia = a.nr_sequencia 
	and	b.nr_sequencia 	= nr_seq_glosa_oc_p;
 
	select	max(nr_nivel_liberacao) 
	into STRICT	nr_nivel_liberacao_w 
	from	pls_nivel_liberacao 
	where	nr_sequencia = nr_seq_nivel_lib_w;
 
	nr_nivel_liberacao_auditor_w := (pls_obter_dados_auditor(cd_codigo_glosa_oco_w, null, nm_usuario_p, 'L', nr_seq_grupo_atual_p))::numeric;
	 
	if (coalesce(nr_nivel_liberacao_auditor_w,0) < coalesce(nr_nivel_liberacao_w,0)) then	 
		/*'Você não possui o nível de liberação necessário para esta ocorrência. Verifique.'*/
 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173780);		
	end if;
end if;
 
/*Verificar se foi uma liberação favorável ou desfavorável*/
 
select	CASE WHEN ie_tipo_motivo='S' THEN 'A' WHEN ie_tipo_motivo='N' THEN 'N' END ,	 
	ds_motivo_liberacao 
into STRICT	ie_tipo_motivo_w,	 
	ds_motivo_liberacao_w 
from	pls_mot_lib_analise_conta 
where	nr_sequencia = nr_seq_mot_liberacao_p;
 
/*Obter quantidade e valor apresentado*/
 
begin 
select	qt_apresentado,	 
	vl_total_apres	 
into STRICT	qt_apresentado_w,	 
	vl_total_apres_w	 
from	w_pls_resumo_conta	 
where	((nr_seq_item = nr_seq_conta_proc_w AND ie_tipo_item = 'P') 
or 	 (nr_seq_item = nr_seq_conta_mat_w AND ie_tipo_item = 'M') 
or	 (nr_seq_partic_proc = nr_seq_proc_partic_w AND ie_tipo_item = 'R')) 
and	nr_seq_analise = nr_seq_analise_p;
exception 
when others then	 
	qt_apresentado_w := null;	
	vl_total_apres_w := null;	
end;
 
/*update	pls_analise_conta_item 
set	qt_glosa	= decode(nvl(nr_seq_conta_proc,nvl(nr_seq_conta_mat,nvl(nr_seq_proc_partic,0))), 0, 0, decode(ie_tipo_motivo_w, 'A', 0, 'N', qt_glosa)), 
	vl_glosa	= decode(nvl(nr_seq_conta_proc,nvl(nr_seq_conta_mat,nvl(nr_seq_proc_partic,0))), 0, 0, decode(ie_tipo_motivo_w, 'A', 0, 'N', vl_glosa)) 
where	nr_sequencia	= nr_seq_analise_conta_item_p;*/
 
	 
if (coalesce(nr_seq_proc_p,0) > 0) then 
	nr_seq_item_w	:= nr_seq_proc_p;
	ie_tipo_item_w	:= 'P';
elsif (coalesce(nr_seq_mat_p,0) > 0) then 
	nr_seq_item_w	:= nr_seq_mat_p;
	ie_tipo_item_w	:= 'M';
elsif (coalesce(nr_seq_proc_partic_w,0) > 0) then 
	nr_seq_item_w	:= nr_seq_proc_partic_w;
	ie_tipo_item_w	:= 'R';
end if;
 
if (coalesce(nr_seq_glosa_oc_p,0) > 0) then 
	if (ie_tipo_glosa_oc_p = 'G') then 
		nr_seq_glosa_w		:= nr_seq_glosa_oc_p;
	else 
		nr_seq_ocorrencia_w	:= nr_seq_glosa_oc_p;
	end if;
end if;
 
/*Obtem o tipo de histórico se é uma liberação de glosa ou de ocorrencia*/
 
select	CASE WHEN ie_tipo_glosa_oc_p='G' THEN  5 WHEN ie_tipo_glosa_oc_p='O' THEN  6 END  
into STRICT	ie_tipo_historico_w
;
 
/*Atualizado a glosa / ocorrencia*/
 
update	pls_analise_conta_item 
set	ie_status 	= ie_tipo_motivo_w, 
	nm_usuario	= nm_usuario_p, 
	dt_atualizacao 	= clock_timestamp(), 
	ie_situacao	= CASE WHEN ie_tipo_motivo_w='N' THEN  'A' WHEN ie_tipo_motivo_w='L' THEN  'I' WHEN ie_tipo_motivo_w='A' THEN  'I' END  
where	nr_sequencia	= nr_seq_analise_conta_item_p;
 
/*Criado o parecer*/
 
insert into pls_analise_parecer_item(nr_sequencia, nr_seq_item, nr_seq_motivo, 
	 dt_atualizacao, nm_usuario, dt_atualizacao_nrec, 
	 nm_usuario_nrec, ds_parecer, ie_tipo_motivo) 
values (nextval('pls_analise_parecer_item_seq'), nr_seq_analise_conta_item_p, nr_seq_mot_liberacao_p, 
	 clock_timestamp(), nm_usuario_p, clock_timestamp(), 
	 nm_usuario_p, ds_observacao_p, ie_tipo_motivo_w);
	 
select	CASE WHEN ie_tipo_motivo_w='A' THEN 'Liberação favorável' WHEN ie_tipo_motivo_w='N' THEN 'Liberação desfavorável' WHEN ie_tipo_motivo_w='L' THEN 'Liberação parcial' END  
into STRICT	ds_tipo_motivo_w
;
 
ds_observacao_w := 	'Tipo de liberação: '||chr(13)||chr(10)|| 
			chr(9)||ds_tipo_motivo_w||chr(13)||chr(10)||chr(13)||chr(10)|| 
			'Motivo de liberação:'||chr(13)||chr(10)|| 
			chr(9)||ds_motivo_liberacao_w||chr(13)||chr(10)||chr(13)||chr(10)|| 
			'Observação/Parecer: '||chr(13)||chr(10)|| 
			chr(9)||ds_observacao_p;
			 
/*Adiciona o histórico da ação*/
 
CALL pls_inserir_hist_analise(nr_seq_conta_p, nr_seq_analise_p, ie_tipo_historico_w, 
			 nr_seq_item_w, ie_tipo_item_w, nr_seq_ocorrencia_w, 
			 nr_seq_glosa_w, ds_observacao_w, nr_seq_grupo_atual_p, 
			 nm_usuario_p, cd_estabelecimento_p);
			 		 
CALL pls_analise_status_item(nr_seq_conta_p, nr_seq_mat_p, nr_seq_proc_p, 
			nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p, 
			nr_seq_proc_partic_w);
 
CALL pls_analise_status_pgto_pos(	nr_seq_conta_p, nr_seq_mat_p, nr_seq_proc_p,				 
				nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p);	
			 
CALL pls_analise_status_fat(		nr_seq_conta_p, nr_seq_mat_p, nr_seq_proc_p,				 
				nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p);
 
CALL pls_atualizar_status_fat_pos(	nr_seq_conta_p, nr_seq_mat_p, nr_seq_proc_p,				 
				nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p	);
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_conta_liberar_glosa_oc_pos ( nr_seq_analise_conta_item_p bigint, nr_seq_proc_p bigint, nr_seq_mat_p bigint, nr_seq_conta_p bigint, nr_seq_analise_p bigint, nr_seq_glosa_oc_p bigint, ie_tipo_glosa_oc_p text, nr_seq_mot_liberacao_p bigint, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, nr_seq_grupo_atual_p bigint, ie_consistir_grupo_p text, ie_reconsistencia_p text ) FROM PUBLIC;

