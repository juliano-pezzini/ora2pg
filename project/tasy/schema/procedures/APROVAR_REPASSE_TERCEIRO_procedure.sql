-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE aprovar_repasse_terceiro (nr_repasse_terceiro_p bigint, nm_usuario_p text, dt_aprovacao_p timestamp, ie_commit_p text) AS $body$
DECLARE


vl_liberado_w			double precision;
vl_venc_w			double precision;
cd_estabelecimento_w		bigint;
cd_condicao_pagamento_w		bigint;
ie_vencimentos_w		integer;
dt_mesano_referencia_w		timestamp;
ie_data_contab_item_w		varchar(255);
vl_adiantamento_w		double precision;
ie_aprova_repasse_w		varchar(1);
count_w				bigint;


BEGIN

select	count(*)		/*	Jacson OS 42053	 - somente consistir aprovação se o repasse já tiverem 	*/
into STRICT	ie_vencimentos_w	/*			vencimentos lançados ou condição de pagamento informada	*/
from	repasse_terceiro_venc
where	nr_repasse_terceiro	= nr_repasse_terceiro_p;

select	cd_condicao_pagamento,
	cd_estabelecimento,
	dt_mesano_referencia
into STRICT	cd_condicao_pagamento_w,
	cd_estabelecimento_w,
	dt_mesano_referencia_w
from	repasse_terceiro
where	nr_repasse_terceiro	= nr_repasse_terceiro_p;

select	coalesce(sum(a.vl_repasse),0)
into STRICT	vl_adiantamento_w
from	repasse_terceiro_item a
where	(a.nr_adiant_pago IS NOT NULL AND a.nr_adiant_pago::text <> '')
and	a.nr_repasse_terceiro	= nr_repasse_terceiro_p;

select	coalesce(max(ie_data_contab_item), 'N')
into STRICT	ie_data_contab_item_w
from	parametro_repasse
where	cd_estabelecimento	= cd_estabelecimento_w;

if (ie_data_contab_item_w = 'S') then
	update	repasse_terceiro_item
	set	dt_contabil		= dt_mesano_referencia_w
	where	nr_repasse_terceiro	= nr_repasse_terceiro_p;
end if;

if (ie_vencimentos_w > 0) or (cd_condicao_pagamento_w IS NOT NULL AND cd_condicao_pagamento_w::text <> '') then

	Select	obter_valor_repasse(nr_repasse_terceiro,'L') vl_liberado
	into STRICT	vl_liberado_w
	from	Repasse_terceiro
	where	nr_repasse_terceiro	= nr_repasse_terceiro_p;

	select	coalesce(sum(vl_vencimento),0)
	into STRICT	vl_venc_w
	from	repasse_terceiro_venc
	where	nr_repasse_terceiro	= nr_repasse_terceiro_p;

	if	(vl_liberado_w <> (vl_venc_w + vl_adiantamento_w)) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(219051,'VL_LIBERADO_W='||vl_liberado_w||';'||'VL_VENC_W='||VL_VENC_W);
	end if;
end if;

ie_aprova_repasse_w := Obter_Param_Usuario(89, 160, obter_perfil_ativo, nm_usuario_p, obter_estabelecimento_ativo, ie_aprova_repasse_w);

if (coalesce(ie_aprova_repasse_w,'N') = 'S') then

	select	count(*)
	into STRICT	count_w
	from	repasse_terceiro_aprovacao
	where   nr_repasse_terceiro = nr_repasse_terceiro_p
	and		upper(nm_usuario_aprovacao)	<> upper(nm_usuario_p)
	and     coalesce(dt_aprovacao::text, '') = '';

	if (count_w > 0) then
		--Para aprovar o repasse, é necessário que todos os usuários tenham
		CALL wheb_mensagem_pck.exibir_mensagem_abort(261375);
	end if;

end if;

update	repasse_terceiro
set	dt_aprovacao_terceiro	= trunc(dt_aprovacao_p),
	nm_usuario_aprov	= nm_usuario_p,
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp()
where	nr_repasse_terceiro	= nr_repasse_terceiro_p;



CALL gravar_agend_integracao(407, 'NR_REPASSE_TERCEIRO=' || nr_repasse_terceiro_p || ';');


if (coalesce(ie_commit_p,'S') <> 'N') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE aprovar_repasse_terceiro (nr_repasse_terceiro_p bigint, nm_usuario_p text, dt_aprovacao_p timestamp, ie_commit_p text) FROM PUBLIC;

