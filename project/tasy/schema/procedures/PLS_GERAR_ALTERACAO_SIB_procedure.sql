-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_alteracao_sib ( nr_seq_lote_sib_p bigint, ie_gerar_todos_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


dt_referencia_w			timestamp;
nr_seq_reg_arquivo_w		bigint;
ie_tipo_reg_w			smallint;
nr_seq_segurado_w		bigint;
cd_pessoa_fisica_w		varchar(10);
nm_segurado_w			varchar(255);
dt_nascimento_w			timestamp;
ie_sexo_w			smallint;
nr_pis_pasep_w			varchar(11);
nm_mae_segurado_w		varchar(255);
cd_cns_w			varchar(15);
nr_identidade_w			varchar(15);
ds_orgao_emissor_ci_w		w_pls_alteracao_sib.ds_orgao_emissor_ci%type;
cd_nacionalidade_w		varchar(8);
nr_seq_titular_w		bigint;
ie_regulamentacao_w		varchar(2);
cd_plano_ans_w			varchar(20);
cd_plano_ans_pre_w		varchar(20);
dt_liberacao_w			timestamp;
ds_logradouro_w			varchar(50);
ds_numero_w			varchar(5);
ds_complemento_w		varchar(15);
ds_bairro_w			varchar(50);
ds_municipio_w			varchar(50);
uf_w				w_pls_alteracao_sib.sg_uf%type;
cep_w				varchar(15);
dt_mesano_referencia_w		timestamp;
dt_reinclusao_w			timestamp;
nr_seq_portabilidade_w		bigint;
nr_seq_motivo_cancelamento_w	bigint;
cd_pais_sib_w			varchar(30);
cd_usuario_ant_w		varchar(30);
cd_usuario_plano_w		varchar(30);
cd_usuario_plano_tit_w		varchar(30);
cd_cgc_estipulante_w		varchar(14);
nr_cpf_w			varchar(11);
cd_vinculo_benef_w		varchar(2);
ie_carencia_temp_w		smallint;
ie_resid_brasil_w		smallint;
cd_motivo_w			smallint;
nr_prot_ans_origem_w		varchar(20);
qt_alteracao_portab_w		bigint;
ie_portabilidade_w		varchar(1);
dt_adaptacao_w			timestamp;
nr_seq_historico_w		bigint;
ie_tipo_historico_w		varchar(2);
nr_seq_alt_w			bigint;
cd_motivo_cancelamento_w	varchar(10);
nr_cco_w			bigint;
cd_cco_w			pls_segurado.cd_cco%type;
ie_digito_cco_w			smallint;
nr_seq_retorno_sib_w		bigint;
ie_enviar_sib_w			varchar(5);
ie_tipo_reg_reenvio_w		integer;
nr_seq_motivo_reenvio_w		bigint;
ie_opcao_w			smallint;
ie_carteira_ant_w		varchar(2);
nr_seq_segurado_sib_w		bigint;
cd_declaracao_nasc_vivo_w	pessoa_fisica.cd_declaracao_nasc_vivo%type;
qt_endereco_residencial_w	bigint;
qt_endereco_comercial_w		bigint;
ie_tipo_logradouro_w		varchar(1);
cd_municipio_ibge_resid_w	varchar(7);
dt_cancelamento_w		timestamp;
ie_tipo_alteracao_w		bigint;
nr_matricula_cei_w		varchar(30);
ie_reativao_atual_w		varchar(10);
ds_alteracao_w			w_pls_alteracao_sib.DS_ALTERACOES%type;
ie_itens_excluid_cobertura_w	pls_interf_sib.ie_itens_excluid_cobertura%type;
dt_alteracao_prod_w		pls_segurado_alt_plano.dt_alteracao%type;
dt_mes_comp_w			pls_lote_sib.dt_mes_competencia%type;
nr_seq_contrato_w		pls_contrato.nr_sequencia%type;
ie_gera_dt_alt_w		pls_parametros.ie_gerar_dt_alteracao_sib%type;

c01 CURSOR FOR
	SELECT	2 ie_tipo_reg,
		a.nr_seq_segurado,
		a.cd_pessoa_fisica,
		a.nm_beneficiario,
		a.dt_nascimento,
		a.ie_sexo,
		a.nr_cpf,
		a.nr_pis_pasep,
		a.nm_mae_segurado,
		coalesce(substr(a.cd_cns,1,15),lpad(' ',15,' ')) cd_cns,
		a.nr_identidade,
		a.ds_orgao_emissor_ci,
		a.cd_nacionalidade,
		a.nr_seq_titular,
		a.ie_regulamentacao,
		a.cd_plano_ans,
		a.cd_plano_ans_pre,
		a.dt_liberacao,
		a.ds_logradouro,
		a.ds_numero,
		a.ds_complemento,
		a.ds_bairro,
		a.ds_municipio,
		a.sg_uf,
		a.cd_cep,
		a.dt_geracao,
		b.dt_reativacao,
		b.dt_rescisao,
		coalesce(b.nr_seq_portabilidade,0),
		b.nr_seq_motivo_cancelamento,
		b.nr_cco,
		b.cd_cco,
		b.ie_digito_cco,
		a.ie_tipo_alteracao,
		a.ds_alteracoes,
		b.nr_seq_contrato
	from	w_pls_alteracao_sib a,
		pls_segurado b
	where	a.nr_seq_segurado	= b.nr_sequencia
	and	a.nr_seq_lote_sib	= nr_seq_lote_sib_p
	order by
		b.nr_seq_titular desc;


BEGIN

select	trunc(add_months(dt_mesano_referencia,-1),'month'),
	dt_mes_competencia
into STRICT	dt_referencia_w,
	dt_mes_comp_w
from	pls_lote_sib
where	nr_sequencia	= nr_seq_lote_sib_p;

CALL pls_gerar_w_alteracao_sib(nr_seq_lote_sib_p,nm_usuario_p,cd_estabelecimento_p);

select	max(nr_sequencia)
into STRICT	nr_seq_reg_arquivo_w
from	pls_interf_sib
where	nr_seq_lote_sib	= nr_seq_lote_sib_p;

if (coalesce(nr_seq_reg_arquivo_w,0) = 0) then
	nr_seq_reg_arquivo_w	:= 1;
end if;

open c01;
loop
fetch c01 into
	ie_tipo_reg_w,
	nr_seq_segurado_w,
	cd_pessoa_fisica_w,
	nm_segurado_w,
	dt_nascimento_w,
	ie_sexo_w,
	nr_cpf_w,
	nr_pis_pasep_w,
	nm_mae_segurado_w,
	cd_cns_w,
	nr_identidade_w,
	ds_orgao_emissor_ci_w,
	cd_nacionalidade_w,
	nr_seq_titular_w,
	ie_regulamentacao_w,
	cd_plano_ans_w,
	cd_plano_ans_pre_w,
	dt_liberacao_w,
	ds_logradouro_w,
	ds_numero_w,
	ds_complemento_w,
	ds_bairro_w,
	ds_municipio_w,
	uf_w,
	cep_w,
	dt_mesano_referencia_w,
	dt_reinclusao_w,
	dt_cancelamento_w,
	nr_seq_portabilidade_w,
	nr_seq_motivo_cancelamento_w,
	nr_cco_w,
	cd_cco_w,
	ie_digito_cco_w,
	ie_tipo_alteracao_w,
	ds_alteracao_w,
	nr_seq_contrato_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	ie_tipo_logradouro_w	:= null;
	nr_prot_ans_origem_w	:= null;
	/*verificar os dados com o motivo 51 -  correcao de dados de beneficiarios em registros ativos no cadastro de beneficiarios do sib/ans*/

	cd_motivo_w	:= 51;
	ie_portabilidade_w	:= 'N';
	nr_matricula_cei_w	:= '';
	
	SELECT * FROM pls_obter_dados_interf_sib(	nr_seq_segurado_w, cd_pais_sib_w, cd_usuario_ant_w, cd_usuario_plano_w, cd_usuario_plano_tit_w, cd_cgc_estipulante_w, nr_cpf_w, cd_vinculo_benef_w, ie_carencia_temp_w, ie_resid_brasil_w) INTO STRICT cd_pais_sib_w, cd_usuario_ant_w, cd_usuario_plano_w, cd_usuario_plano_tit_w, cd_cgc_estipulante_w, nr_cpf_w, cd_vinculo_benef_w, ie_carencia_temp_w, ie_resid_brasil_w;
	
	ie_reativao_atual_w	:= 'N';
	
	/*Essa condicao ira verificar se o beneficiario tem reativacao, caso nao tenha verifica se esta cancelado, 
	caso tenha, busca o motivo e data de rescisao, caso nao possuir essas informacoes limpa a data de reativacao*/
	if (coalesce(dt_reinclusao_w::text, '') = '') then
		if (nr_seq_motivo_cancelamento_w IS NOT NULL AND nr_seq_motivo_cancelamento_w::text <> '') and (dt_cancelamento_w IS NOT NULL AND dt_cancelamento_w::text <> '') and
			/*Data de cancelamento so pode ser informado caso for menor que a data do lote*/

			(trunc(dt_cancelamento_w,'Month') < trunc(dt_referencia_w,'Month')) then
			select	cd_motivo_cancelamento
			into STRICT	cd_motivo_cancelamento_w
			from	pls_motivo_cancelamento
			where	nr_sequencia	= nr_seq_motivo_cancelamento_w;
		else
			dt_cancelamento_w 		:= null;
			cd_motivo_cancelamento_w	:= null;
		end if;
	else
		if (trunc(dt_reinclusao_w,'Month') = dt_referencia_w) then
			ie_reativao_atual_w	:= 'S';
			dt_reinclusao_w		:= null;
		end if;
		
		begin
		select	max(nr_seq_motivo_cancelamento),
			max(dt_ocorrencia_sib)
		into STRICT	nr_seq_motivo_cancelamento_w,
			dt_cancelamento_w
		from	pls_segurado_historico
		where	nr_seq_segurado	= nr_seq_segurado_w
		and	ie_tipo_historico	= '1';
		exception
		when others then
			nr_seq_motivo_cancelamento_w	:= null;
			dt_cancelamento_w		:= null;
		end;
		
		if (nr_seq_motivo_cancelamento_w IS NOT NULL AND nr_seq_motivo_cancelamento_w::text <> '') and (dt_cancelamento_w IS NOT NULL AND dt_cancelamento_w::text <> '') then
			begin
			select	max(cd_motivo_cancelamento)
			into STRICT	cd_motivo_cancelamento_w
			from	pls_motivo_cancelamento
			where	nr_sequencia	= nr_seq_motivo_cancelamento_w;
			exception
			when others then
				cd_motivo_cancelamento_w	:= null;
			end;
		else
			dt_cancelamento_w		:= null;
			dt_reinclusao_w			:= null;
			cd_motivo_cancelamento_w	:= null;
		end if;			
	end if;
	
	if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
		select	max(cd_declaracao_nasc_vivo)
		into STRICT	cd_declaracao_nasc_vivo_w
		from	pessoa_fisica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
		
		select	count(1)
		into STRICT	qt_endereco_residencial_w
		from	compl_pessoa_fisica
		where	cd_pessoa_fisica	= cd_pessoa_fisica_w
		and	ie_tipo_complemento	= 1
		and	(cd_cep IS NOT NULL AND cd_cep::text <> '')
		and	(ds_endereco IS NOT NULL AND ds_endereco::text <> '')
		and	(sg_estado IS NOT NULL AND sg_estado::text <> '');
		
		if (qt_endereco_residencial_w > 0) then
			ie_tipo_logradouro_w	:= '2'; /* endereco residencial */
		else
			select	count(1)
			into STRICT	qt_endereco_comercial_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	ie_tipo_complemento	= 2;
			
			if (qt_endereco_comercial_w > 0) then
				cd_municipio_ibge_resid_w	:= substr(obter_compl_pf(cd_pessoa_fisica_w,1,'CDM'),1,10) || Calcula_Digito('MODULO10',substr(obter_compl_pf(cd_pessoa_fisica_w,1,'CDM'),1,10));
				if (coalesce(cd_municipio_ibge_resid_w::text, '') = '') or (cd_municipio_ibge_resid_w = '0')then
					cd_municipio_ibge_resid_w	:= ds_municipio_w;
				end if;
				ie_tipo_logradouro_w	:= '1'; /* Endereco comercial */
			end if;
		end if;
	end if;
	
	if (coalesce(nr_seq_portabilidade_w,0) > 0) then
		select	count(1)
		into STRICT	qt_alteracao_portab_w
		from	pls_interf_sib
		where	ie_tipo_reg	= 2
		and	cd_motivo	= 43
		and	nr_seq_segurado	= nr_seq_segurado_w;
		
		if (qt_alteracao_portab_w	= 0) then
			ie_portabilidade_w	:= 'S';
		end if;
	end if;
	
	if (ie_portabilidade_w	= 'S') then
		select 	max(dt_solicitacao)
		into STRICT	dt_adaptacao_w
		from	pls_segurado a,
			pls_portab_pessoa b
		where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
		and	a.nr_sequencia		= nr_seq_segurado_w;
	elsif (coalesce(dt_mesano_referencia_w::text, '') = '') then
		select 	max(nr_sequencia)
		into STRICT	nr_seq_historico_w
		from 	pls_segurado_historico
		where	nr_seq_segurado = nr_seq_segurado_w
		and	trunc(coalesce(dt_ocorrencia_sib,dt_historico),'month') = dt_referencia_w
		and	ie_tipo_historico in (2,4,9,8,12,14,19,20);
		
		if (coalesce(nr_seq_historico_w,0) > 0) then
			begin
			select	coalesce(dt_reinclusao_w,dt_reativacao),
				coalesce(dt_ocorrencia_sib,dt_historico),
				ie_tipo_historico,
				coalesce(dt_migracao,dt_historico)
			into STRICT	dt_reinclusao_w,
				dt_mesano_referencia_w,
				ie_tipo_historico_w,
				dt_adaptacao_w
			from	pls_segurado_historico
			where	nr_sequencia = nr_seq_historico_w;
			exception
			when others then
				dt_reinclusao_w		:= null;
				dt_mesano_referencia_w	:= null;
				ie_tipo_historico_w	:= null;
				dt_adaptacao_w		:= null;
			end;
		end if;
	end if;
	
	if (ie_portabilidade_w	= 'S') then /* se for de portabilidade o motivo de alteracao e o 43*/
		cd_motivo_w	:= 43;
		
		select	max(nr_prot_ans_origem)
		into STRICT	nr_prot_ans_origem_w
		from	pls_segurado a,
			pls_portab_pessoa b
		where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica
		and	a.nr_sequencia		= nr_seq_segurado_w;
		
		nr_prot_ans_origem_w	:= to_char(somente_numero(nr_prot_ans_origem_w));
	else
		select	max(nr_sequencia)
		into STRICT	nr_seq_alt_w
		from	pls_segurado_alt_plano
		where	nr_seq_segurado = nr_seq_segurado_w
		and	ie_situacao 	= 'A'
		and	trunc(dt_alteracao,'month') = dt_referencia_w;
		
		if (nr_seq_alt_w > 0) then
			select	cd_ans
			into STRICT	cd_motivo_w
			from	pls_segurado_alt_plano a,
				pls_motivo_alteracao_plano b
			where	b.nr_sequencia = a.nr_seq_motivo_alt
			and	a.nr_sequencia = nr_seq_alt_w;
		end if;
	end if;
	
	nr_seq_reg_arquivo_w	:= nr_seq_reg_arquivo_w + 1;
	
	dt_mesano_referencia_w	:= trunc(dt_mesano_referencia_w);
	
	if (uf_w = 'IN') then
		uf_w	:= 'EX';
	end if;
	
	cep_w	:= replace(cep_w,'-','');
	cep_w	:= replace(cep_w,'.','');
	
	if (coalesce(ds_numero_w::text, '') = '') then
		ds_numero_w	:= 0;
	end if;
	
	if (coalesce(nr_prot_ans_origem_w::text, '') = '') then
		nr_prot_ans_origem_w	:= '000000000';
	end if;
	
	/*caso nao houver nome da mae, verifica novamente no registro da pessoa fisica*/

	if (coalesce(nm_mae_segurado_w::text, '') = '') then
		select	max(substr(obter_nome_pf(a.cd_pessoa_fisica),1,255))
		into STRICT	nm_mae_segurado_w
		from	pessoa_fisica a,
			compl_pessoa_fisica b
		where	b.cd_pessoa_fisica_ref	= a.cd_pessoa_fisica
		and	b.ie_tipo_complemento	= 5
		and	b.cd_pessoa_fisica	= cd_pessoa_fisica_w;
		
		if (coalesce(nm_mae_segurado_w::text, '') = '') then
			select	max(a.nm_contato)
			into STRICT	nm_mae_segurado_w
			from	compl_pessoa_fisica a
			where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
			and	a.ie_tipo_complemento	= 5;
		end if;
		
		nm_mae_segurado_w	:= substr(nm_mae_segurado_w,1,59);
	end if;

	if (dt_nascimento_w < to_date('01/01/2010')) then
		cd_declaracao_nasc_vivo_w	:= '';
	end if;

	if (ie_regulamentacao_w = 'R') then
		nr_prot_ans_origem_w	:= '000000000';
		nr_seq_portabilidade_w	:= null;
	end if;

	if (cd_cgc_estipulante_w IS NOT NULL AND cd_cgc_estipulante_w::text <> '') THEN
		select	max(nr_matricula_cei)
		into STRICT	nr_matricula_cei_w
		from	pessoa_juridica
		where	cd_cgc	= cd_cgc_estipulante_w;
		
		if ((trim(both nr_matricula_cei_w) IS NOT NULL AND (trim(both nr_matricula_cei_w))::text <> '')) then
			cd_cgc_estipulante_w	:= '';
		end if;
	end if;
	
	/*Caso tem reativacao no mes, apaga na alteracao*/

	if (ie_reativao_atual_w	= 'S') then
		dt_reinclusao_w		:= null;
	end if;
	
	/*Data de cancelamento so pode ser informado caso for menor que a data do lote*/

	if (trunc(dt_cancelamento_w,'Month') >= trunc(dt_referencia_w,'Month')) then
		dt_cancelamento_w 		:= null;
		cd_motivo_cancelamento_w	:= null;
	end if;
	
	if (trunc(dt_reinclusao_w,'Month') = trunc(dt_cancelamento_w,'Month')) then
		dt_cancelamento_w 		:= null;
		cd_motivo_cancelamento_w	:= null;
		dt_reinclusao_w			:= null;
	end if;
	
	if (ie_regulamentacao_w = 'R') then
		ie_itens_excluid_cobertura_w	:= 1;
	else
		ie_itens_excluid_cobertura_w	:= 2; /* No projeto XML converte para 0 */
	end if;

	select	coalesce(ie_gerar_dt_alteracao_sib, 'N')
	into STRICT	ie_gera_dt_alt_w
	from	pls_parametros
	where	cd_estabelecimento = cd_estabelecimento_p;
	
	if (ie_gera_dt_alt_w = 'S') then
		select	max(a.dt_alteracao)
		into STRICT	dt_alteracao_prod_w
		from	pls_segurado_alt_plano a,
			pls_segurado b
		where	a.nr_seq_segurado = b.nr_sequencia
		and	b.nr_sequencia = nr_seq_segurado_w
		and	a.ie_situacao = 'A'
		and	trunc(a.dt_alteracao) <= trunc(dt_mes_comp_w)	
		and (	SELECT	count(1)
				from	pls_plano x,
					pls_plano y
				where	x.nr_sequencia = a.nr_seq_plano_atual
				and	y.nr_sequencia = a.nr_seq_plano_ant
				and	x.nr_protocolo_ans <> y.nr_protocolo_ans) > 0;
		
		
		if (dt_alteracao_prod_w IS NOT NULL AND dt_alteracao_prod_w::text <> '') then
			dt_liberacao_w := dt_alteracao_prod_w;
		end if;	
	end if;	
	
	insert into pls_interf_sib(nr_sequencia, dt_mesano_referencia, ie_tipo_reg, cd_usuario_plano, nm_beficiario, dt_nascimento,
					ie_sexo, nr_cpf, nr_pis_pasep, nm_mae_benef, cd_cns, nr_identidade, ds_orgao_emissor_ci,
					cd_usuario_plano_sup, cd_plano_ans, cd_plano_ans_pre, dt_adesao_plano, cd_vinculo_benef,
					dt_reinclusao, cd_motivo, ie_carencia_temp, ie_itens_excluid_cobertura, cd_cgc_estipulante,
					logradouro, ds_numero, ds_complemento, ds_bairro, ds_municipio, uf,
					cep, cd_pessoa_fisica, nr_seq_lote_sib, cd_cei, nr_seq_segurado, cd_usuario_ant,
					cd_pais, nr_seq_titular, nr_prot_ans_origem, ie_resid_brasil, cd_motivo_cancelamento,
					nr_seq_plano_portab, nr_seq_portabilidade, nr_cco, ie_digito_cco, cd_nacionalidade,cd_declaracao_nasc_vivo,
					ie_tipo_logradouro,cd_municipio_ibge_resid,dt_cancelamento,ds_alteracoes)
				values (nr_seq_reg_arquivo_w, dt_mesano_referencia_w, ie_tipo_reg_w, cd_usuario_plano_w, nm_segurado_w, dt_nascimento_w,
					ie_sexo_w, nr_cpf_w, nr_pis_pasep_w, nm_mae_segurado_w, cd_cns_w, nr_identidade_w, ds_orgao_emissor_ci_w,
					cd_usuario_plano_tit_w, cd_plano_ans_w, cd_plano_ans_pre_w, dt_liberacao_w, cd_vinculo_benef_w,
					dt_reinclusao_w, cd_motivo_w, ie_carencia_temp_w, ie_itens_excluid_cobertura_w, cd_cgc_estipulante_w,
					ds_logradouro_w, ds_numero_w, ds_complemento_w, ds_bairro_w, ds_municipio_w, uf_w,
					cep_w, cd_pessoa_fisica_w, nr_seq_lote_sib_p, nr_matricula_cei_w, nr_seq_segurado_w, cd_usuario_ant_w,
					cd_pais_sib_w, nr_seq_titular_w, nr_prot_ans_origem_w, ie_resid_brasil_w, cd_motivo_cancelamento_w,
					nr_prot_ans_origem_w, nr_seq_portabilidade_w, coalesce(substr(cd_cco_w,1,10),nr_cco_w) ,coalesce(substr(cd_cco_w,11,2),ie_digito_cco_w), cd_nacionalidade_w,cd_declaracao_nasc_vivo_w,
					ie_tipo_logradouro_w,cd_municipio_ibge_resid_w,dt_cancelamento_w,ds_alteracao_w);
	end;
end loop;
close c01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_alteracao_sib ( nr_seq_lote_sib_p bigint, ie_gerar_todos_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

