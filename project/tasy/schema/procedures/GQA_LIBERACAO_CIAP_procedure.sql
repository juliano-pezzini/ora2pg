-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gqa_liberacao_ciap ( nr_sequencia_p bigint, nm_usuario_p text, nr_seq_mentor_p INOUT bigint, nr_regras_atendidas_p INOUT text, nr_atendimento_p bigint default null, nr_restrigir_regras_p text default null, qt_horas_retroativa_p bigint default 0) AS $body$
DECLARE

 
 
           
nr_seq_pend_regra_w     bigint;	
nr_atendimento_w      bigint;
nr_sequencia_w       bigint;
cd_pessoa_fisica_w     varchar(10);
cd_ciap_w          varchar(5);	
qt_idade_w         bigint;
cd_setor_atendimento_w   bigint := null;
nr_seq_mentor_w       bigint;	
qt_idade_dias_w       integer;
qt_peso_gramas_w      double precision;			
ie_protocolo_assistencial_w boolean;
ie_restricao_complementar_w varchar(80);

SQLDianosticoLiberado    varchar(1024) := 
  ' select max(nr_atendimento), '                 || 
  '    max(obter_pessoa_atendimento(nr_atendimento,''C'')), ' || 
  '    max(cd_ciap) '                    || 
  ' from	 ciap_atendimento '                  || 
  ' where	 nr_sequencia = '|| nr_sequencia_p;

--- DiagnÃ³stico do atendimento 
SQLDianosticoAtendimento  varchar(1024) := 
  ' select max(nr_atendimento), '                  || 
  '     max(obter_pessoa_atendimento(nr_atendimento,''C'')), '  || 
  '     cd_ciap '                        || 
  ' from	ciap_atendimento '                    || 
  ' where	nr_atendimento = ' || nr_atendimento_p           || 
  ' and  ie_situacao = ''A'' '                    || 
  ' and  dt_liberacao is not null'                  || 
  ' and  (' || qt_horas_retroativa_p || ' = 0 or dt_liberacao >= sysdate - '  || qt_horas_retroativa_p || ')' || 
  ' group by cd_ciap';

--- Pendencias e regras para diagnostico 
C01 CURSOR FOR 
  SELECT a.nr_sequencia 
  from  gqa_pendencia_regra a, 
      gqa_pendencia    b 
  where  b.nr_sequencia	  = a.nr_seq_pendencia 
  and	  b.ie_tipo_pendencia	= 9 
  and	  b.ie_situacao 		= 'A' 
  and	  a.ie_situacao		= 'A' 
  and	  obter_se_gqa_regra_liberada(a.nr_sequencia) = 'S' 
  and	  a.cd_ciap		= cd_ciap_w 
  and	  qt_idade_w    between coalesce(a.qt_idade_min,0) and coalesce(a.qt_idade_max,999) 
  and   qt_idade_dias_w between coalesce(a.qt_dias_min ,0) and coalesce(a.qt_dias_max ,99999) 
  and	  qt_peso_gramas_w between coalesce(a.qt_peso_gramas_min,0) and coalesce(a.qt_peso_gramas_max,999999999) 
  and	  coalesce(a.cd_setor_atendimento, coalesce(cd_setor_atendimento_w,0))	= coalesce(cd_setor_atendimento_w,0) 
  and (coalesce(nr_restrigir_regras_p::text, '') = '' or position(a.nr_sequencia in nr_restrigir_regras_p) > 0);

CursorDiagnostico				REFCURSOR;


BEGIN 
ie_protocolo_assistencial_w := (nr_restrigir_regras_p IS NOT NULL AND nr_restrigir_regras_p::text <> '');
nr_seq_mentor_w := 0;
 
if ie_protocolo_assistencial_w then 
  open CursorDiagnostico for EXECUTE SQLDianosticoAtendimento;
else 
  open CursorDiagnostico for EXECUTE SQLDianosticoLiberado;
end if;
 
loop 
fetch CursorDiagnostico into 
    nr_atendimento_w, 
    cd_pessoa_fisica_w, 
    cd_ciap_w;
EXIT WHEN NOT FOUND; /* apply on CursorDiagnostico */
begin 
 
  if coalesce(cd_setor_atendimento_w::text, '') = '' then 
    cd_setor_atendimento_w	:= obter_setor_atendimento(nr_atendimento_w);
    qt_idade_w		    := obter_idade_pf(cd_pessoa_fisica_w,clock_timestamp(),'A');
    qt_idade_dias_w		  := obter_idade_pf(cd_pessoa_fisica_w, clock_timestamp(), 'DIA');
    qt_peso_gramas_w		:= (coalesce(obter_peso_pf(cd_pessoa_fisica_w),0) * 1000);
  end if;
 
  open C01;
  loop 
  fetch C01 into	 
    nr_seq_pend_regra_w;
  EXIT WHEN NOT FOUND; /* apply on C01 */
    begin 
     
    select GQA_regra_complementar(nm_usuario_p, nr_atendimento_w, nr_seq_pend_regra_w) 
    into STRICT ie_restricao_complementar_w 
;
        
    if ie_restricao_complementar_w = 'X' then 
     if ie_protocolo_assistencial_w then 
     
      if (nr_regras_atendidas_p IS NOT NULL AND nr_regras_atendidas_p::text <> '') then 
        nr_regras_atendidas_p := nr_regras_atendidas_p || ',';
      end if;
      nr_regras_atendidas_p := nr_regras_atendidas_p || nr_seq_pend_regra_w;
      
     else 
     
      select	nextval('gqa_pendencia_pac_seq') 
      into STRICT	nr_sequencia_w 
;
       
      insert into gqa_pendencia_pac( 
              nr_sequencia, 
              dt_atualizacao, 
              nm_usuario, 
              dt_atualizacao_nrec, 
              nm_usuario_nrec, 
              cd_pessoa_fisica, 
              nr_atendimento, 
              NR_SEQ_CIAP, 
              NR_SEQ_PEND_REGRA) 
      values (	nr_sequencia_w, 
              clock_timestamp(), 
              nm_usuario_p, 
              clock_timestamp(), 
              nm_usuario_p, 
              cd_pessoa_fisica_w, 
              nr_atendimento_w, 
              nr_sequencia_p, 
              nr_seq_pend_regra_w);
      commit;
      CALL GQA_GERAR_ACAO_REGRA(nr_seq_pend_regra_w,nr_sequencia_w,nr_atendimento_w,cd_pessoa_fisica_w,nm_usuario_p);
       
      nr_seq_mentor_w := nr_sequencia_p;
   
     end if;
    end if;
     
    end;
  end loop;
  close C01;
end;
end loop;
close CursorDiagnostico;
   
commit;
 
nr_seq_mentor_p := nr_seq_mentor_w;
  
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gqa_liberacao_ciap ( nr_sequencia_p bigint, nm_usuario_p text, nr_seq_mentor_p INOUT bigint, nr_regras_atendidas_p INOUT text, nr_atendimento_p bigint default null, nr_restrigir_regras_p text default null, qt_horas_retroativa_p bigint default 0) FROM PUBLIC;

