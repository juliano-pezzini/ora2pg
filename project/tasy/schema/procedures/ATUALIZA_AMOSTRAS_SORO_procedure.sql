-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualiza_amostras_soro () AS $body$
DECLARE


nr_seq_lsar_w           LAB_SORO_AMOSTRA_RACK.NR_SEQUENCIA%TYPE;
ds_amostra_w            LAB_SORO_AMOSTRA_RACK.DS_AMOSTRA%TYPE;
nr_pos_linha_w          LAB_SORO_AMOSTRA_RACK.NR_POS_LINHA%TYPE;
nr_pos_coluna_w         LAB_SORO_AMOSTRA_RACK.NR_POS_COLUNA%TYPE;
nr_seq_armazem_rack_w   LAB_SORO_AMOSTRA_RACK.NR_SEQ_ARMAZEM_RACK%TYPE;
armaz_nivel1_w          LAB_SORO_ARMAZENAMENTO.ds_armazenamento%TYPE;
armaz_nivel2_w          LAB_SORO_ARMAZENAMENTO.ds_armazenamento%TYPE;
dt_vencimento_w         timestamp;
dt_aviso_w              timestamp;
dt_atual_w              timestamp;
qtd_hrs_aviso           bigint;
ds_avencer_w  		      varchar(4000);
ds_vencido_w	  	      varchar(4000);
nr_seq_classif_w	      bigint;
cd_barras_rack_w        varchar(30);
nr_seq_evento_w	        bigint;
ds_mensagem_w			      varchar(4000);
ds_titulo_w			        varchar(100);
nr_sequencia_w			    bigint;
ie_forma_ev_w			      varchar(15);
cd_perfil_w			        integer;
cd_setor_atendimento_w  integer;
ie_pessoa_destino_w		  varchar(15);
cd_pf_destino_w			    varchar(10);
ie_usuario_aceite_w		  varchar(1);
qt_corresp_w			      integer;
cd_pessoa_destino_w		  varchar(10);
cd_pessoa_regra_w		    varchar(10);
nm_usuario_destino_w 		varchar(15);

C01 CURSOR FOR
SELECT LSAR.NR_SEQUENCIA, LSAR.DS_AMOSTRA, LSAR.NR_POS_LINHA, LSAR.NR_POS_COLUNA, LSAR.NR_SEQ_ARMAZEM_RACK,
       obter_data_venc_amostra(LSAR.NR_SEQ_ARMAZEM_RACK, LSAR.NR_SEQUENCIA, 'AC'), b1.ds_armazenamento armaz_nivel1,
       b2.ds_armazenamento armaz_nivel2, coalesce(LSR.DS_ETIQUETA, LSR.NR_ETIQUETA)
  from LAB_SORO_AMOSTRA_RACK LSAR
 inner join LAB_SORO_ARMAZENA_RACK LSAMR on lsamr.nr_sequencia = lsar.nr_seq_armazem_rack
 inner join LAB_SORO_ARMAZENAMENTO b1 on b1.nr_sequencia = LSAMR.NR_SEQ_ARMAZENAMENTO_PRIM and
                                         b1.ie_nivel_armazenamento = 1
 left outer join LAB_SORO_ARMAZENAMENTO b2 on b2.nr_sequencia = LSAMR.NR_SEQ_ARMAZENAMENTO_SEC and
                                              b2.ie_nivel_armazenamento = 2
 left outer join LAB_SORO_RACK LSR on LSR.nr_sequencia = LSAMR.nr_seq_rack
 where LSAR.IE_STATUS in ('O','P') and
       coalesce(LSAR.NR_SEQ_DESCARTE::text, '') = '' and
       (obter_data_venc_amostra(LSAR.NR_SEQ_ARMAZEM_RACK, LSAR.NR_SEQUENCIA, 'AC') IS NOT NULL AND (obter_data_venc_amostra(LSAR.NR_SEQ_ARMAZEM_RACK, LSAR.NR_SEQUENCIA, 'AC'))::text <> '');

C02 CURSOR FOR
	SELECT a.nr_seq_evento
	  from regra_envio_sms a
	 where a.ie_evento_disp = 'AMOSPVENC'
	   and coalesce(a.ie_situacao,'A') = 'A'

union

  SELECT a.nr_seq_evento
	  from regra_envio_sms a
	 where a.ie_evento_disp = 'AMOSVENC'
	   and coalesce(a.ie_situacao,'A') = 'A';

C03 CURSOR FOR
	SELECT ie_forma_ev, ie_pessoa_destino, cd_pf_destino, cd_setor_atendimento, cd_perfil
	  FROM ev_evento_regra_dest
	 WHERE nr_seq_evento = nr_seq_evento_w
	 ORDER BY ie_forma_ev;

C04 CURSOR FOR
	SELECT obter_dados_usuario_opcao(nm_usuario,'C'), nm_usuario
	  from usuario_perfil
	 where cd_perfil = cd_perfil_w
	   and ie_forma_ev_w in (2,3)
	   and (obter_dados_usuario_opcao(nm_usuario,'C') IS NOT NULL AND (obter_dados_usuario_opcao(nm_usuario,'C'))::text <> '');

C05 CURSOR FOR
	SELECT obter_dados_usuario_opcao(nm_usuario,'C')
	  from usuario_setor_v
	 where cd_setor_atendimento = cd_setor_atendimento_w
	   and ie_forma_ev_w in (2,3)
	   and (obter_dados_usuario_opcao(nm_usuario,'C') IS NOT NULL AND (obter_dados_usuario_opcao(nm_usuario,'C'))::text <> '');

BEGIN
  dt_atual_w    := clock_timestamp();
  qtd_hrs_aviso := lab_obter_valor_parametro(728,3);
  ds_avencer_w  := ' ';
  ds_vencido_w	:= ' ';

  open C01;
	loop
	fetch C01 into
		nr_seq_lsar_w,
    ds_amostra_w,
    nr_pos_linha_w,
    nr_pos_coluna_w,
    nr_seq_armazem_rack_w,
    dt_vencimento_w,
    armaz_nivel1_w,
    armaz_nivel2_w,
    cd_barras_rack_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
      dt_aviso_w := dt_vencimento_w - (qtd_hrs_aviso/24);
      if (dt_vencimento_w < dt_atual_w) then
        ds_vencido_w := ds_vencido_w || wheb_mensagem_pck.get_texto(1025885,'CD_AMOSTRA='|| ds_amostra_w ||';DS_ARMAZ_N1='|| armaz_nivel1_w ||';DS_ARMAZ_N2='|| armaz_nivel2_w ||
                                                                            ';NR_RACK='|| cd_barras_rack_w ||';NR_LINHA='|| nr_pos_linha_w ||';NR_COLUNA='|| nr_pos_coluna_w) || chr(13);

        update LAB_SORO_AMOSTRA_RACK set IE_STATUS = 'V'
         where nr_sequencia = nr_seq_lsar_w;
      else
        if (dt_aviso_w < dt_atual_w) then
          ds_avencer_w := ds_avencer_w || wheb_mensagem_pck.get_texto(1025885,'CD_AMOSTRA='|| ds_amostra_w ||';DS_ARMAZ_N1='|| armaz_nivel1_w ||';DS_ARMAZ_N2='|| armaz_nivel2_w ||
                                                                              ';NR_RACK='|| cd_barras_rack_w ||';NR_LINHA='|| nr_pos_linha_w ||';NR_COLUNA='|| nr_pos_coluna_w) || chr(13);
          update LAB_SORO_AMOSTRA_RACK set IE_STATUS = 'P'
           where nr_sequencia = nr_seq_lsar_w;
        end if;
      end if;
		end;
	end loop;
	close C01;

  if ((ds_avencer_w <> ' ') or (ds_vencido_w <> ' ')) then
    open C02;
    loop
    fetch C02 into
  		nr_seq_evento_w;
    EXIT WHEN NOT FOUND; /* apply on C02 */
      begin
        select ds_titulo, ds_mensagem
          into STRICT ds_titulo_w, ds_mensagem_w
          from ev_evento
         where nr_sequencia	= nr_seq_evento_w;

        ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@vencidos',ds_vencido_w),1,4000);
        ds_mensagem_w	:= substr(replace_macro(ds_mensagem_w,'@prestesvencer',ds_avencer_w),1,4000);

        select nextval('ev_evento_paciente_seq')
          into STRICT nr_sequencia_w
;

        insert into ev_evento_paciente( nr_sequencia,
                                        nr_seq_evento,
                                        dt_atualizacao,
                                        nm_usuario,
                                        dt_atualizacao_nrec,
                                        nm_usuario_nrec,
                                        ds_titulo,
                                        ds_mensagem,
                                        ie_status,
                                        dt_evento,
                                        dt_liberacao,
                                        ie_situacao)
                                values (	nr_sequencia_w,
                                        nr_seq_evento_w,
                                        clock_timestamp(),
                                        'Tasy',
                                        clock_timestamp(),
                                        'Tasy',
                                        ds_titulo_w,
                                        ds_mensagem_w,
                                        'G',
                                        clock_timestamp(),
                                        clock_timestamp(),
                                        'A');

        open C03;
        loop
        fetch C03 into
          ie_forma_ev_w,
          ie_pessoa_destino_w,
          cd_pf_destino_w,
          cd_setor_atendimento_w,
          cd_perfil_w;
        EXIT WHEN NOT FOUND; /* apply on C03 */
          begin
            qt_corresp_w	:= 1;
            cd_pessoa_destino_w	:= null;

            if (ie_pessoa_destino_w = '5') or (ie_pessoa_destino_w = '12') then /*Pessoa fixa ou Usu√°rio fixo*/
              cd_pessoa_destino_w	:= cd_pf_destino_w;
            end if;

            if (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '1') then
              begin
                select count(*)
                  into STRICT qt_corresp_w
                  from pessoa_fisica_corresp
                 where cd_pessoa_fisica	= cd_pessoa_destino_w
                   and ie_tipo_corresp = 'MCel'
                   and ie_tipo_doc = 'AE';
              end;
            elsif (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '3') then
              begin
                select count(*)
                  into STRICT qt_corresp_w
                  from pessoa_fisica_corresp
                 where cd_pessoa_fisica	= cd_pessoa_destino_w
                   and ie_tipo_corresp = 'CI'
                   and ie_tipo_doc = 'AE';
              end;
            elsif (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (ie_forma_ev_w = '4') then
              begin
                select count(*)
                  into STRICT qt_corresp_w
                  from pessoa_fisica_corresp
                 where cd_pessoa_fisica	= cd_pessoa_destino_w
                   and ie_tipo_corresp = 'Email'
                   and ie_tipo_doc = 'AE';
              end;
            end if;

            if (cd_pessoa_destino_w IS NOT NULL AND cd_pessoa_destino_w::text <> '') and (qt_corresp_w > 0) then
              begin
                insert into ev_evento_pac_destino( nr_sequencia,
                                                   nr_seq_ev_pac,
                                                   dt_atualizacao,
                                                   nm_usuario,
                                                   dt_atualizacao_nrec,
                                                   nm_usuario_nrec,
                                                   cd_pessoa_fisica,
                                                   ie_forma_ev,
                                                   ie_status,
                                                   dt_ciencia,
                                                   ie_pessoa_destino,
                                                   dt_evento )
                                           values ( nextval('ev_evento_pac_destino_seq'),
                                                   nr_sequencia_w,
                                                   clock_timestamp(),
                                                   'Tasy',
                                                   clock_timestamp(),
                                                   'Tasy',
                                                   cd_pessoa_destino_w,
                                                   ie_forma_ev_w,
                                                   'G',
                                                   null,
                                                   ie_pessoa_destino_w,
                                                   clock_timestamp());
              end;
            end if;

            open C04;
            loop
            fetch C04 into
              cd_pessoa_regra_w,
              nm_usuario_destino_w;
            EXIT WHEN NOT FOUND; /* apply on C04 */
              begin
                if (cd_pessoa_regra_w IS NOT NULL AND cd_pessoa_regra_w::text <> '') then
                  insert into ev_evento_pac_destino( nr_sequencia,
                                                      nr_seq_ev_pac,
                                                      dt_atualizacao,
                                                      nm_usuario,
                                                      dt_atualizacao_nrec,
                                                      nm_usuario_nrec,
                                                      cd_pessoa_fisica,
                                                      ie_forma_ev,
                                                      ie_status,
                                                      dt_ciencia,
                                                      nm_usuario_DEst,
                                                      ie_pessoa_destino,
                                                      dt_evento )
                                             values (	nextval('ev_evento_pac_destino_seq'),
                                                      nr_sequencia_w,
                                                      clock_timestamp(),
                                                      'Tasy',
                                                      clock_timestamp(),
                                                      'Tasy',
                                                      cd_pessoa_regra_w,
                                              				ie_forma_ev_w,
                                                      'G',
                                                      null,
                                                      nm_usuario_Destino_w,
                                                      ie_pessoa_destino_w,
                                                      clock_timestamp() );
                end if;
              end;
            end loop;
            close C04;

            open C05;
            loop
            fetch C05 into
              cd_pessoa_regra_w;
            EXIT WHEN NOT FOUND; /* apply on C05 */
              begin
                if (cd_pessoa_regra_w IS NOT NULL AND cd_pessoa_regra_w::text <> '') then
                  insert into ev_evento_pac_destino( nr_sequencia,
                                                      nr_seq_ev_pac,
                                                      dt_atualizacao,
                                                      nm_usuario,
                                                      dt_atualizacao_nrec,
                                                      nm_usuario_nrec,
                                                      cd_pessoa_fisica,
                                                      ie_forma_ev,
                                                      ie_status,
                                                      dt_ciencia,
                                                      ie_pessoa_destino,
                                                      dt_evento )
                                        		 values (	nextval('ev_evento_pac_destino_seq'),
                                                      nr_sequencia_w,
                                                      clock_timestamp(),
                                                      'Tasy',
                                                      clock_timestamp(),
                                                      'Tasy',
                                                      cd_pessoa_regra_w,
                                                      ie_forma_ev_w,
                                                      'G',
                                                      null,
                                                      ie_pessoa_destino_w,
                                                      clock_timestamp() );
                end if;
              end;
            end loop;
            close C05;
          end;
        end loop;
        close C03;
   		end;
    end loop;
    close C02;
  end if;

  commit;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualiza_amostras_soro () FROM PUBLIC;

