-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_cartao_benef ( cd_usuario_plano_p text, ie_opcao_p text, nr_via_tarja_p bigint, nr_seq_segurado_in_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, cd_pessoa_fisica_p INOUT text, nr_seq_segurado_p INOUT bigint, cd_cooperativa_p INOUT text, ie_digito_incorreto_p INOUT text, ie_novo_benef_p INOUT text, ie_existe_operadora_p INOUT text, ie_qt_caracteres_p INOUT text, ie_digito_verificador_p INOUT text, ds_validade_via_p INOUT text, ie_usuario_eventual_p INOUT text, ie_operadora_local_p INOUT text, cd_digito_verificador_p INOUT bigint, qt_caracteres_regra_p INOUT bigint, ie_situacao_atend_p INOUT text, ie_situacao_carencia_p INOUT text, ie_usuario_pcmso_p INOUT text) AS $body$
DECLARE


/* Rotina utilizada para consistir a carteira do beneficiário na função OPS - Identificador de Beneficiários
ie_opcao_p
	TM = Tarja magnética
	CB = Código de Barras
	QR = QRCode
*/
nr_seq_segurado_w		bigint;
nr_seq_emissor_w		bigint;
nr_seq_emissor_benef_w		bigint;
nr_seq_emissor_pcmso_w		bigint;
cd_cooperativa_w		varchar(10);
qt_coop_estab_w			integer;
cd_pessoa_fisica_w		varchar(10);
qt_operadora_w			bigint;
qt_caracteres_regra_w		varchar(30);
qt_caracteres_digitado_w	varchar(30);
ie_tipo_campo_w			varchar(10);
cd_digito_verificador_regra_w	numeric(30);
cd_digito_verificador_digit_w	numeric(30);
cd_usuario_plano_dig_verific_w	varchar(30);
nr_via_w			bigint;
ie_usuario_eventual_w		varchar(1);
ie_situacao_atend_w		varchar(1);
nr_via_anterior_w		bigint;
dt_limite_w			timestamp;
ds_retorno_campos_carteira_w	varchar(30);
ie_restringe_estab_w		varchar(1);


BEGIN

ie_restringe_estab_w	:= coalesce(obter_valor_param_usuario(1273, 8, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p),'N');

select	max(nr_seq_emissor)
into STRICT	nr_seq_emissor_w
from	pls_parametros
where	cd_estabelecimento	= CASE WHEN ie_restringe_estab_w='S' THEN cd_estabelecimento_p  ELSE cd_estabelecimento END;

ie_usuario_pcmso_p	:= 'N';

if (ie_opcao_p = 'CB') then
	SELECT * FROM pls_obter_benef_tarja(cd_usuario_plano_p, ie_restringe_estab_w, nm_usuario_p, cd_estabelecimento_p, /* Retorno*/
	cd_pessoa_fisica_w, nr_seq_segurado_w) INTO STRICT 
	cd_pessoa_fisica_w, nr_seq_segurado_w;
	
	select	pls_obter_campos_carteira(cd_usuario_plano_p,nr_seq_emissor_w,'CM')
	into STRICT	cd_cooperativa_w
	;
	
	/*aaschlote 06/11/2012 - OS - 513340 - Caso o usuário tiver regra de PCMSO, então deve criar um novo usuário*/

	nr_seq_emissor_pcmso_w := pls_obter_regra_usuario_pcmso(cd_usuario_plano_p, '', nr_seq_emissor_pcmso_w);
	
	if (nr_seq_emissor_pcmso_w IS NOT NULL AND nr_seq_emissor_pcmso_w::text <> '') then
		nr_seq_segurado_w	:= null;
		ie_usuario_pcmso_p	:= 'S';
	end if;
	
	if (coalesce(nr_seq_segurado_w,0) > 0) then	/* Carteira do beneficiário existe na base */
		begin
		select	a.nr_seq_emissor,
			b.cd_pessoa_fisica,
			b.ie_situacao_atend,
			b.dt_limite_utilizacao
		into STRICT	nr_seq_emissor_benef_w,
			cd_pessoa_fisica_w,
			ie_situacao_atend_w,
			dt_limite_w
		from	pls_segurado_carteira a,
			pls_segurado b
		where	a.nr_seq_segurado	= b.nr_sequencia
		and	b.nr_sequencia		= nr_seq_segurado_w;
		exception
		when others then
			nr_seq_emissor_benef_w	:= null;
			cd_pessoa_fisica_w	:= null;
			ie_situacao_atend_w	:= null;
			dt_limite_w		:= null;
		end;
		
		nr_seq_segurado_p	:= nr_seq_segurado_w;
		cd_pessoa_fisica_p	:= cd_pessoa_fisica_w;
		/*aaschlote 29/10/2010 - OS 257532 - Caso o beneficiário possuir uma data limete de utlização, o sistema deve se basear na data limete como a situação de atendimento*/

		if (dt_limite_w IS NOT NULL AND dt_limite_w::text <> '') then
			if (trunc(dt_limite_w,'dd') >= trunc(clock_timestamp(),'dd')) then
				ie_situacao_atend_p	:= 'A';
			elsif (trunc(dt_limite_w,'dd') < trunc(clock_timestamp(),'dd')) then
				ie_situacao_atend_p	:= 'I';
			end if;
		else
			ie_situacao_atend_p	:= ie_situacao_atend_w;
		end if;
		
		select	count(*)
		into STRICT	qt_operadora_w
		from	pls_congenere
		where	(cd_cooperativa)::numeric 	= (cd_cooperativa_w)::numeric;
		
		if (qt_operadora_w > 0) then
			cd_cooperativa_p	:= cd_cooperativa_w;
		elsif (qt_operadora_w = 0) then
			cd_cooperativa_p	:= '';
		end if;
	ie_situacao_carencia_p	:= pls_obter_se_benef_carencia(nr_seq_segurado_w,'D');
	else	/* Se não existir beneficiário com a carteira */
		select	pls_obter_campos_carteira(cd_usuario_plano_p,nr_seq_emissor_w,'CM')
		into STRICT	cd_cooperativa_w
		;
		
		if (coalesce(cd_cooperativa_w,'0') <> '0') then
			select	count(*)
			into STRICT	qt_coop_estab_w
			from	pls_congenere  a,
				pls_outorgante b
			where	b.cd_cgc_outorgante		= a.cd_cgc
			and	(a.cd_cooperativa)::numeric 	= (cd_cooperativa_w)::numeric
			and	b.cd_estabelecimento		= CASE WHEN ie_restringe_estab_w='S' THEN cd_estabelecimento_p  ELSE b.cd_estabelecimento END;
			
			if (qt_coop_estab_w > 0) then
				ie_operadora_local_p	:= 'S';
			end if;
			
			begin
			select	ie_usuario_eventual
			into STRICT	ie_usuario_eventual_w
			from	pls_congenere
			where	(cd_cooperativa)::numeric 	= (cd_cooperativa_w)::numeric;
			exception
			when others then
				ie_usuario_eventual_w	:= 'S';
			end;
			
			ie_usuario_eventual_p	:= ie_usuario_eventual_w;
			
			select	count(*)
			into STRICT	qt_operadora_w
			from	pls_congenere
			where	(cd_cooperativa)::numeric 	= (cd_cooperativa_w)::numeric;
			
			if (qt_operadora_w > 0) then
				ie_existe_operadora_p	:= 'S';
			else
				ie_existe_operadora_p	:= 'N';
			end if;
			
			if	((qt_coop_estab_w = 0) and (qt_operadora_w > 0) and (ie_usuario_eventual_w = 'S')) then
				ie_novo_benef_p	:= 'S';
			else
				ie_novo_benef_p	:= 'N';
			end if;
			
			cd_cooperativa_p	:= cd_cooperativa_w;
		elsif (coalesce(cd_cooperativa_w,0) = 0) then
			ie_existe_operadora_p	:= 'N';
			ie_novo_benef_p		:= 'S';
			ie_usuario_eventual_p	:= 'S';
			ie_operadora_local_p	:= 'N';
		end if;
		
		select	max(length(elimina_caracteres_especiais(c.ds_mascara)))
		into STRICT	qt_caracteres_regra_w
		from	pls_parametros		a,
			pls_emissor_carteira	b,
			pls_regra_carteira	c
		where	a.nr_seq_emissor	= b.nr_sequencia
		and	c.nr_seq_emissor	= b.nr_sequencia
		and	a.cd_estabelecimento	= CASE WHEN ie_restringe_estab_w='S' THEN cd_estabelecimento_p  ELSE a.cd_estabelecimento END;
		
		begin
		qt_caracteres_regra_p	:= (qt_caracteres_regra_w)::numeric;
		exception
		when others then
			qt_caracteres_regra_p	:= 0;
		end;
		
		select	length(elimina_caracteres_especiais(cd_usuario_plano_p))
		into STRICT	qt_caracteres_digitado_w
		;
		
		if (qt_caracteres_regra_w <> qt_caracteres_digitado_w) then
			ie_qt_caracteres_p	:= 'N';
		else
			ie_qt_caracteres_p	:= 'S';
		end if;
		
		select	max(ie_tipo_campo),
			max(a.nr_seq_emissor)
		into STRICT  	ie_tipo_campo_w,
			nr_seq_emissor_w
		from  	pls_parametros			a,
			pls_emissor_carteira    	b,
			pls_regra_carteira        	c,
			pls_regra_carteira_campo	d
		where (ie_tipo_campo = 'V' or ie_tipo_campo = 'VD')
		and  	a.nr_seq_emissor  	= b.nr_sequencia
		and  	c.nr_seq_emissor  	= b.nr_sequencia
		and  	d.nr_seq_regra_carteira = c.nr_sequencia
		and  	a.cd_estabelecimento  	= CASE WHEN ie_restringe_estab_w='S' THEN cd_estabelecimento_p  ELSE a.cd_estabelecimento END;
		
		select	pls_obter_campos_carteira(cd_usuario_plano_p, nr_seq_emissor_w, ie_tipo_campo_w)
		into STRICT	ds_retorno_campos_carteira_w
		;
		
		if ((trim(both ds_retorno_campos_carteira_w) IS NOT NULL AND (trim(both ds_retorno_campos_carteira_w))::text <> '')) then
			cd_digito_verificador_digit_w := (ds_retorno_campos_carteira_w)::numeric;
		end if;
		
		select	substr(cd_usuario_plano_p, 1, qt_caracteres_regra_w - 1)
		into STRICT	cd_usuario_plano_dig_verific_w
		;
		
		if (ie_tipo_campo_w = 'V') then
			select	substr(calcula_digito('Modulo11',cd_usuario_plano_dig_verific_w),1,2)
			into STRICT	cd_digito_verificador_regra_w
			;
		elsif (ie_tipo_campo_w = 'VD') then
			select	substr(calcula_digito('Modulo10',cd_usuario_plano_dig_verific_w),1,2)
			into STRICT	cd_digito_verificador_regra_w
			;
		end if;
		
		if (cd_digito_verificador_digit_w <> cd_digito_verificador_regra_w) and (ie_qt_caracteres_p = 'S') then
			ie_digito_verificador_p	:= 'N';
			cd_digito_verificador_p	:= cd_digito_verificador_regra_w;
		end if;
		nr_seq_segurado_p	:= null;
		cd_pessoa_fisica_p	:= null;
	end if;
elsif	((ie_opcao_p = 'TM') or (ie_opcao_p = 'QR')) then
	begin
	select	ie_situacao_atend
	into STRICT	ie_situacao_atend_p
	from	pls_segurado
	where	nr_sequencia	= nr_seq_segurado_in_p;
	exception
	when others then
		ie_situacao_atend_p	:= '';
	end;
	
	if (ie_opcao_p = 'TM') then
		select	max(nr_via_solicitacao)
		into STRICT	nr_via_w
		from	pls_segurado_carteira
		where	nr_seq_segurado = nr_seq_segurado_in_p;
		
		nr_via_anterior_w	:= nr_via_w - 1;
		
		if (nr_via_tarja_p <> nr_via_w) then
			begin
			select	substr(pls_obter_dados_motivo_via(nr_seq_motivo_via,'N'),1,255)
			into STRICT	ds_validade_via_p
			from	pls_segurado_cart_ant
			where	nr_seq_segurado	= nr_seq_segurado_in_p
			and	nr_via_anterior = nr_via_anterior_w
			and	pls_obter_dados_motivo_via(nr_seq_motivo_via,'V') = 'S';
			exception
			when others then
				ds_validade_via_p	:= null;
			end;
			
			if (ds_validade_via_p IS NOT NULL AND ds_validade_via_p::text <> '') then
				ds_validade_via_p := 'Via inválidada por: '||ds_validade_via_p||' .Favor verifique!';
			end if;	
		else
			ds_validade_via_p	:= '';
		end if;
	else
		ds_validade_via_p	:= '';
	end if;
	
	if (coalesce(nr_seq_segurado_in_p,'0') = '0') then
		select	pls_obter_campos_carteira(cd_usuario_plano_p,nr_seq_emissor_w,'CM')
		into STRICT	cd_cooperativa_w
		;
		
		if (coalesce(cd_cooperativa_w,'0') <> '0') then
			select	count(*)
			into STRICT	qt_coop_estab_w
			from	pls_congenere  a,
				pls_outorgante b
			where	b.cd_cgc_outorgante		= a.cd_cgc
			and	(a.cd_cooperativa)::numeric 	= (cd_cooperativa_w)::numeric
			and	b.cd_estabelecimento		= CASE WHEN ie_restringe_estab_w='S' THEN cd_estabelecimento_p  ELSE b.cd_estabelecimento END;
			
			select	count(*)
			into STRICT	qt_operadora_w
			from	pls_congenere
			where	(cd_cooperativa)::numeric 	= (cd_cooperativa_w)::numeric;
			
			if	((qt_coop_estab_w = 0) and (qt_operadora_w > 0) and (ie_usuario_eventual_w = 'S')) then
				ie_novo_benef_p	:= 'S';
			else
				ie_novo_benef_p	:= 'N';
			end if;
			
			cd_cooperativa_p	:= cd_cooperativa_w;
			
			begin
			select	ie_usuario_eventual
			into STRICT	ie_usuario_eventual_w
			from	pls_congenere
			where	(cd_cooperativa)::numeric 	= (cd_cooperativa_w)::numeric;
			exception
			when others then
				ie_usuario_eventual_w	:= 'S';
			end;
			
			ie_usuario_eventual_p	:= ie_usuario_eventual_w;
		elsif (coalesce(cd_cooperativa_w,0) = 0) then
			ie_existe_operadora_p	:= 'N';
			ie_novo_benef_p		:= 'S';
			ie_usuario_eventual_p	:= 'S';
			ie_operadora_local_p	:= 'N';
		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_cartao_benef ( cd_usuario_plano_p text, ie_opcao_p text, nr_via_tarja_p bigint, nr_seq_segurado_in_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, cd_pessoa_fisica_p INOUT text, nr_seq_segurado_p INOUT bigint, cd_cooperativa_p INOUT text, ie_digito_incorreto_p INOUT text, ie_novo_benef_p INOUT text, ie_existe_operadora_p INOUT text, ie_qt_caracteres_p INOUT text, ie_digito_verificador_p INOUT text, ds_validade_via_p INOUT text, ie_usuario_eventual_p INOUT text, ie_operadora_local_p INOUT text, cd_digito_verificador_p INOUT bigint, qt_caracteres_regra_p INOUT bigint, ie_situacao_atend_p INOUT text, ie_situacao_carencia_p INOUT text, ie_usuario_pcmso_p INOUT text) FROM PUBLIC;

