-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_pf_sib_comp ( cd_pessoa_fisica_p text, nm_mae_benef_p text, nm_beneficiario_p text, dt_nascimento_p timestamp, ie_sexo_p text, nr_cpf_p text, nr_pis_pasep_p text, nr_cartao_nac_sus_p text, cd_declaracao_nasc_vivo_p text, cd_nacionalidade_p text, nr_reg_geral_estrang_p text, nr_identidade_p text, ds_orgao_emissor_ci_p pessoa_fisica.ds_orgao_emissor_ci%type, nr_seq_pais_p text, nr_cep_p text, uf_p text, ds_municipio_p text, ds_logradouro_p text, sg_emissora_ci_p text, nm_usuario_p text, ds_retorno_p INOUT text) AS $body$
DECLARE


ds_erro_w			varchar(4000)	:= null;
ds_nao_informado_w		varchar(255)	:= null;
ds_invalido_w			varchar(255)	:= null;
qt_nao_informado_w		integer;
qt_invalido_w			integer;
qt_pessoa_fisica_w		integer;

cd_pais_sib_w			varchar(30);
ie_brasileiro_w			varchar(1);
cd_pessoa_resp_w		varchar(10);
nr_ident_resp_w			varchar(30);
ds_orgao_emissor_ci_resp_w	pessoa_fisica.ds_orgao_emissor_ci%type;
nr_reg_geral_estrang_resp_w	varchar(30);
cd_nacionalidade_w		smallint;
ie_brasileiro_resp_w		varchar(1);
qt_idade_w			integer;
cd_pessoa_mae_w			varchar(10);
cd_cep_w			varchar(15);
uf_w				compl_pessoa_fisica.sg_estado%type;
cd_municipio_ibge_w		varchar(6);
ds_logradouro_w			varchar(255);
qt_titular_w			bigint;
nm_contato_w			varchar(255);
dt_contratacao_w		timestamp;
ie_nome_benef_invalido_w	varchar(10);
ie_nome_mae_invalido_w		varchar(10);

procedure add_campo_mensagem(	ds_campo_p	text,
				ie_tipo_p	text) is
;
BEGIN
if (ie_tipo_p = 'N') then --Campo não informado
	if (length(ds_nao_informado_w||ds_campo_p) <= 253) then
		if (qt_nao_informado_w > 0) then
			ds_nao_informado_w	:= ds_nao_informado_w ||', '|| ds_campo_p;
		else
			ds_nao_informado_w	:= 'Os campos abaixo não foram informados:' || chr(13) || chr(10);
			ds_nao_informado_w	:= ds_nao_informado_w || ds_campo_p;
		end if;
		qt_nao_informado_w	:= qt_nao_informado_w + 1;
	end if;
elsif (ie_tipo_p = 'I') then --Informação inválida
	if (length(ds_invalido_w||ds_campo_p) <= 253) then
		if (qt_invalido_w > 0) then
			ds_invalido_w	:= ds_invalido_w ||', '|| ds_campo_p;
		else
			ds_invalido_w	:= 'Os campos abaixo estão inválidos:' || chr(13) || chr(10);
			ds_invalido_w	:= ds_invalido_w || ds_campo_p;
		end if;
		qt_invalido_w	:= qt_invalido_w + 1;
	end if;
end if;
end;

begin
qt_nao_informado_w	:= 0;
qt_invalido_w		:= 0;

select	count(1)
into STRICT	qt_pessoa_fisica_w
from	pessoa_fisica
where	cd_pessoa_fisica	= cd_pessoa_fisica_p;

if (qt_pessoa_fisica_w > 0) then
	--2- Nome da mãe do beneficiário não informado
	if (pls_obter_incosistencia_lib(2) = 'S') then
		if (coalesce(nm_mae_benef_p,'0') = 'x') then
			select	max(nm_contato)
			into STRICT	nm_contato_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_p
			and	ie_tipo_complemento	= 5;
		end if;
		
		if	((coalesce(nm_mae_benef_p::text, '') = '') or (coalesce(nm_contato_w::text, '') = '' and coalesce(nm_mae_benef_p,'0') = 'x')) then
			add_campo_mensagem('Nome da mãe','N');
		end if;	
	end if;
	
	--10 - CEP do beneficiário não informado
	if (pls_obter_incosistencia_lib(10) = 'S') then
		if (coalesce(nr_cep_p,'0') = 'x') then
			select	max(cd_cep)
			into STRICT	cd_cep_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_p
			and	ie_tipo_complemento	= 1;
		end if;
		
		if	((coalesce(nr_cep_p::text, '') = '') or (coalesce(cd_cep_w::text, '') = '' and coalesce(nr_cep_p,'0') = 'x')) then
			add_campo_mensagem('CEP','N');
		end if;
	end if;
	
	--11 - UF do beneficiário não informado
	if (pls_obter_incosistencia_lib(11) = 'S') then
		if (coalesce(uf_p,'0') = 'x') then
			select	max(sg_estado)
			into STRICT	uf_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_p
			and	ie_tipo_complemento	= 1;
		end if;
		
		if	((coalesce(uf_p::text, '') = '') or (coalesce(uf_w::text, '') = '' and coalesce(uf_p,'0') = 'x')) then
			add_campo_mensagem('UF','N');
		end if;
	end if;
	
	--12 - Municipio do beneficiário não informado
	if (pls_obter_incosistencia_lib(12) = 'S') then
		if (coalesce(ds_municipio_p,'0') = 'x') then
			select	max(cd_municipio_ibge)
			into STRICT	cd_municipio_ibge_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_p
			and	ie_tipo_complemento	= 1;
		end if;
		if	((coalesce(ds_municipio_p::text, '') = '') or (coalesce(cd_municipio_ibge_w::text, '') = '' and coalesce(ds_municipio_p,'0') = 'x')) then
			add_campo_mensagem('Município da residência','N');
		end if;
	end if;
	
	--13 - Logradouro do beneficiário não informado
	if (pls_obter_incosistencia_lib(13) = 'S') then
		
		if (coalesce(ds_logradouro_p,'0') = 'x') then
			select	max(ds_endereco)
			into STRICT	ds_logradouro_w
			from	compl_pessoa_fisica
			where	cd_pessoa_fisica	= cd_pessoa_fisica_p
			and	ie_tipo_complemento	= 1;
		end if;
		if	((coalesce(ds_logradouro_p::text, '') = '') or (coalesce(ds_logradouro_w::text, '') = '' and coalesce(ds_logradouro_p,'0') = 'x')) then
			add_campo_mensagem('Logradouro','N');
		end if;
	end if;
end if;

if (qt_nao_informado_w > 0) then
	ds_erro_w	:= ds_nao_informado_w;
end if;

if (qt_invalido_w > 0) and (length(ds_erro_w||ds_invalido_w) <= 250) then
	ds_erro_w	:= ds_erro_w || chr(13) || chr(13) || chr(10) || chr(10) || ds_invalido_w;
end if;

ds_retorno_p := substr(ds_erro_w,1,255);

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_pf_sib_comp ( cd_pessoa_fisica_p text, nm_mae_benef_p text, nm_beneficiario_p text, dt_nascimento_p timestamp, ie_sexo_p text, nr_cpf_p text, nr_pis_pasep_p text, nr_cartao_nac_sus_p text, cd_declaracao_nasc_vivo_p text, cd_nacionalidade_p text, nr_reg_geral_estrang_p text, nr_identidade_p text, ds_orgao_emissor_ci_p pessoa_fisica.ds_orgao_emissor_ci%type, nr_seq_pais_p text, nr_cep_p text, uf_p text, ds_municipio_p text, ds_logradouro_p text, sg_emissora_ci_p text, nm_usuario_p text, ds_retorno_p INOUT text) FROM PUBLIC;

