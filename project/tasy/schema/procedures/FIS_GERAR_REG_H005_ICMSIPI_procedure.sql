-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_h005_icmsipi (nr_seq_controle_p bigint) AS $body$
DECLARE


/*REGISTRO H005: TOTAIS DO INVENTÁRIO*/



-- VARIABLES
ie_gerou_dados_bloco_w varchar(1) := 'N';

nr_seq_icmsipi_H005_w	fis_efd_icmsipi_H005.nr_sequencia%type;
dt_inicio_apuracao_w	fis_efd_icmsipi_controle.dt_inicio_apuracao%type;
dt_fim_apuracao_w	fis_efd_icmsipi_controle.dt_fim_apuracao%type;
cd_estabelecimento_w	estabelecimento.cd_estabelecimento%type;

qt_cursor_w bigint := 0;
nr_vetor_w  bigint := 0;

-- USUARIO
nm_usuario_w usuario.nm_usuario%type;

/*Cursor que retorna as informações para o registro H005 */
c_reg_H005 CURSOR FOR
	SELECT	coalesce(sum(vl_item), 0) vl_inv,
			'01' cd_mot_inv  
	from	fis_efd_icmsipi_H010
	where	nr_seq_controle = nr_seq_controle_p;

/*Criação do array com o tipo sendo do cursor eespecificado - c_reg_H005*/

type reg_c_reg_H005 is table of c_reg_H005%RowType;
vetRegH005 reg_c_reg_H005;

/*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_H005 */

type registro is table of fis_efd_icmsipi_H005%rowtype index by integer;
fis_registros_w registro;

BEGIN
/*Obteção do usuário ativo no tasy*/

nm_usuario_w := Obter_Usuario_Ativo;

begin

select	a.dt_inicio_apuracao,
	a.dt_fim_apuracao,
	a.cd_estabelecimento
into STRICT	dt_inicio_apuracao_w,
	dt_fim_apuracao_w,
	cd_estabelecimento_w
from	fis_efd_icmsipi_controle 	a,
	fis_efd_icmsipi_lote		b
where	a.nr_seq_lote	= b.nr_sequencia
and 	a.nr_sequencia 	= nr_seq_controle_p;

exception
when others then
	dt_fim_apuracao_w	:= null;
	cd_estabelecimento_w	:= null;
end;

/*Pegar a data 1/12 do ano anterior a data de incio de apuração*/

if (dt_inicio_apuracao_w IS NOT NULL AND dt_inicio_apuracao_w::text <> '') then
	dt_inicio_apuracao_w :=	pkg_date_utils.ADD_MONTH(pkg_date_utils.START_OF(dt_inicio_apuracao_w, 'YEAR', 0), -1);
end if;

/*Pegar a data 31/12 do ano anterior a data de fim de apuração*/

if (dt_fim_apuracao_w IS NOT NULL AND dt_fim_apuracao_w::text <> '') then
	dt_fim_apuracao_w :=	trunc(pkg_date_utils.ADD_MONTH(pkg_date_utils.end_OF(dt_fim_apuracao_w, 'YEAR', 0), -12));
end if;

/*Gera os dados do registro h010*/

CALL fis_gerar_reg_H010_icmsipi(	nr_seq_controle_p,
				trunc(dt_inicio_apuracao_w),
				trunc(dt_fim_apuracao_w),
				cd_estabelecimento_w);

open c_reg_H005;
loop
fetch c_reg_H005 bulk collect into vetRegH005 limit 1000;
	for i in 1 .. vetRegH005.Count loop
		begin

		/*Incrementa a variavel para o array*/

		qt_cursor_w:=	qt_cursor_w + 1;

		if (ie_gerou_dados_bloco_w = 'N') then
			ie_gerou_dados_bloco_w := 'S';
		end if;

		/*Busca da sequencia da tabela especificada - fis_efd_icmsipi_H005 */

		select	nextval('fis_efd_icmsipi_h005_seq')
		into STRICT	nr_seq_icmsipi_H005_w
		;

		/*Inserindo valores no array para realização do forall posteriormente*/
		fis_registros_w[qt_cursor_w].nr_sequencia 		:= nr_seq_icmsipi_H005_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao 		:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario 		:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].dt_atualizacao_nrec 	:= clock_timestamp();
		fis_registros_w[qt_cursor_w].nm_usuario_nrec 		:= nm_usuario_w;
		fis_registros_w[qt_cursor_w].cd_reg 			:= 'H005';
		fis_registros_w[qt_cursor_w].dt_inv			:= dt_fim_apuracao_w;
		fis_registros_w[qt_cursor_w].vl_inv 			:= vetRegH005[i].vl_inv;
		fis_registros_w[qt_cursor_w].cd_mot_inv 		:= vetRegH005[i].cd_mot_inv;
		fis_registros_w[qt_cursor_w].nr_seq_controle 		:= nr_seq_controle_p;

		if (nr_vetor_w >= 1000) then
		  begin
		    /*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_H005 */

		    forall i in fis_registros_w.first .. fis_registros_w.last
		      insert into fis_efd_icmsipi_H005 values fis_registros_w(i);
		
		    nr_vetor_w := 0;
		    fis_registros_w.delete;
		
		    commit;
		
		  end;
		end if;

		/*incrementa variavel para realizar o forall quando chegar no valor limite*/

		nr_vetor_w := nr_vetor_w + 1;

		end;
	end loop;
EXIT WHEN NOT FOUND; /* apply on c_reg_H005 */
end loop;
close c_reg_H005;

if (fis_registros_w.count > 0) then
	begin
	/*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

	forall i in fis_registros_w.first .. fis_registros_w.last
		insert into fis_efd_icmsipi_H005 values fis_registros_w(i);

	fis_registros_w.delete;

	commit;

	end;
end if;

/*Libera memoria*/

dbms_session.free_unused_user_memory;

/*Atualização informação no controle de geração de registro para SIM*/

if (ie_gerou_dados_bloco_w = 'S') then
	update	fis_efd_icmsipi_controle
	set	ie_mov_H = 'S'
	where	nr_sequencia = nr_seq_controle_p;
end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_h005_icmsipi (nr_seq_controle_p bigint) FROM PUBLIC;

