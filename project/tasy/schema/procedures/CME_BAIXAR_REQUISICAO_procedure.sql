-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cme_baixar_requisicao (nr_requisicao_p bigint, nr_seq_item_req_p bigint, cd_motivo_baixa_p bigint, ds_lista_conjunto_p text, nm_usuario_p text, ds_erro_p INOUT text) AS $body$
DECLARE


nr_sequencia_w			bigint;
nr_seq_conj_real_w			bigint;
nr_seq_conjunto_w			bigint;
tam_lista_w			bigint;
ie_conta_conj_atend_w		bigint	:= 0;
ie_pos_virgula_w			smallint		:= 0;
ie_status_conjunto_w		cm_conjunto_cont.ie_status_conjunto%type;
qt_conjunto_w			bigint	:= 0;
qt_conj_atend_w			bigint	:= 0;
qt_item_atend_w			bigint	:= 0;
ds_erro_w			varchar(800)	:= '';
ds_lista_conjunto_w		varchar(800);
cd_setor_requisicao_w		integer;
cd_estabelecimento_w		smallint;
ie_atend_nao_ester_w		varchar(01);
cd_status_conj_atend_req_w		integer;
cd_status_conj_retorno_req_w	smallint;
nm_usuario_requisitante_w		varchar(15);
ds_setor_requisicao_w		varchar(255);
nr_seq_classif_w			bigint;
ie_retorno_descartavel_w		varchar(1);
ie_descartavel_w			varchar(1);
dt_retorno_w			timestamp;
ie_avulso_w			varchar(1);
ie_retorno_avulso_w		varchar(1);
ie_repassa_local_req_w		varchar(1);
cd_local_requisicao_w		smallint;
ie_vincula_conj_agenda_cir_w	varchar(1);
nr_seq_agenda_w			cm_requisicao.nr_seq_agenda%type;
nr_cirurgia_w			bigint;
ie_envia_ci_w			varchar(1);
nr_seq_classif_conj_req_w	cm_requisicao_item.nr_seq_classif_conj%type;
nr_seq_classif_req_w		cm_requisicao_item.nr_seq_classif%type;


BEGIN

select	cd_setor_atendimento,
	cd_estabelecimento,
	substr(obter_usuario_pessoa(cd_pessoa_requisitante),1,15),
	substr(obter_nome_setor(cd_setor_atendimento),1,255)
into STRICT	cd_setor_requisicao_w,
	cd_estabelecimento_w,
	nm_usuario_requisitante_w,
	ds_setor_requisicao_w
from	cm_requisicao
where	nr_sequencia = nr_requisicao_p;

cd_status_conj_atend_req_w 		:= obter_valor_param_usuario(406, 28, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
cd_status_conj_retorno_req_w 	:= obter_valor_param_usuario(406, 52, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
ie_retorno_descartavel_w		:= obter_valor_param_usuario(410, 18, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
ie_retorno_avulso_w		:= obter_valor_param_usuario(410, 27, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
ie_repassa_local_req_w		:= obter_valor_param_usuario(410, 30, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
ie_vincula_conj_agenda_cir_w	:= obter_valor_param_usuario(410, 32, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);
ie_envia_ci_w			:= obter_valor_param_usuario(410, 37, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w);

select	coalesce(max(ie_atend_conj_nao_ester),'N')
into STRICT	ie_atend_nao_ester_w
from	cm_parametro
where	cd_estabelecimento = cd_estabelecimento_w;

ds_lista_conjunto_w			:= ds_lista_conjunto_p;
if (ds_lista_conjunto_p IS NOT NULL AND ds_lista_conjunto_p::text <> '') then
	begin
	WHILE(ds_lista_conjunto_w IS NOT NULL AND ds_lista_conjunto_w::text <> '') LOOP
		begin

		tam_lista_w		:=	length(ds_lista_conjunto_w);
		ie_pos_virgula_w		:=	position(',' in ds_lista_conjunto_w);
	
		if (ie_pos_virgula_w <> 0) then
			nr_seq_conj_real_w	:= substr(ds_lista_conjunto_w,1,(ie_pos_virgula_w - 1));
			ds_lista_conjunto_w	:= substr(ds_lista_conjunto_w,(ie_pos_virgula_w + 1),tam_lista_w);
		end if;

		select	a.ie_status_conjunto,
			a.nr_seq_conjunto
		into STRICT	ie_status_conjunto_w,
			nr_seq_conjunto_w
		from	cm_conjunto_cont a
		where	nr_sequencia = nr_seq_conj_real_w
		and	coalesce(a.ie_situacao,'A') = 'A';

		if (ie_status_conjunto_w <> 3) and (ie_atend_nao_ester_w = 'N') then
			ds_erro_w		:=	WHEB_MENSAGEM_PCK.get_texto(279084);
		end if;

		/* Nao deixa conjuntos descartaveis pendentes de retorno, conforme parametro 18 da Requisicao de Conjuntos*/

		dt_retorno_w	:= null;
		if (ie_retorno_descartavel_w = 'N') then
			begin
			
			select	cm_obter_se_apenas_descartavel(nr_seq_conjunto_w)
			into STRICT	ie_descartavel_w
			;

			if (ie_descartavel_w = 'S') then
				dt_retorno_w	:=	clock_timestamp();
			end if;

			end;
		end if;

		/* Nao deixa conjuntos avulsos pendentes de retorno */

		if (ie_retorno_avulso_w = 'N') then
			begin

			select	cm_obter_se_conj_avulso(nr_seq_conjunto_w)
			into STRICT	ie_avulso_w
			;

			if (ie_avulso_w = 'S') then
				dt_retorno_w	:= clock_timestamp();
			end if;

			end;
		end if;

		/* Repassa conjunto para o local de estoque do setor da requisicao */

		if (ie_repassa_local_req_w <> 'N') then
			begin
			
			if (ie_repassa_local_req_w = 'C') then
				select	coalesce(max(cd_local_estoque_cme),0)
				into STRICT	cd_local_requisicao_w
				from	setor_atendimento
				where	cd_setor_atendimento = cd_setor_requisicao_w;
			end if;
			
			if (ie_repassa_local_req_w = 'S') or (cd_local_requisicao_w = 0) then
				select	coalesce(max(cd_local_estoque),0)
				into STRICT	cd_local_requisicao_w
				from	setor_atendimento
				where	cd_setor_atendimento = cd_setor_requisicao_w;
			end if;
			
			if (cd_local_requisicao_w > 0) then			
				begin

				update	cm_conjunto_cont
				set	cd_local_estoque = cd_local_requisicao_w,
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp()
				where	nr_sequencia = nr_seq_conj_real_w;
				
				end;
			end if;

			end;
		end if;

		/* Vincula conjunto atendido na cirurgia, se a requisicao for de uma agenda cirurgica */

		if (ie_vincula_conj_agenda_cir_w = 'S') then
			begin

			select	coalesce(max(nr_seq_agenda),0)
			into STRICT	nr_seq_agenda_w
			from	cm_requisicao
			where	nr_sequencia = nr_requisicao_p;

			select	coalesce(max(nr_cirurgia),0)
			into STRICT	nr_cirurgia_w
			from	agenda_paciente
			where	nr_sequencia = nr_seq_agenda_w;

			if (nr_cirurgia_w > 0) then
				begin

				update	cm_conjunto_cont
				set	nr_cirurgia = nr_cirurgia_w,
					nm_usuario = nm_usuario_p,
					dt_atualizacao = clock_timestamp()
				where	nr_sequencia = nr_seq_conj_real_w;

				end;
			end if;

			end;
		end if;
		
		if (cd_status_conj_atend_req_w > 0) and (coalesce(dt_retorno_w::text, '') = '') then
			begin
			
			update	cm_conjunto_cont
			set	ie_status_conjunto 		= cd_status_conj_atend_req_w,
				nm_usuario			= nm_usuario_p,
				dt_atualizacao = clock_timestamp()
			where	nr_sequencia		= nr_seq_conj_real_w;
			
			end;
		elsif (cd_status_conj_retorno_req_w > 0) and (dt_retorno_w IS NOT NULL AND dt_retorno_w::text <> '') then
			begin
			
			update	cm_conjunto_cont
			set	ie_status_conjunto 		= cd_status_conj_retorno_req_w,
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
			where	nr_sequencia		= nr_seq_conj_real_w;
			
			end;
		end if;

		if (coalesce(ds_erro_w::text, '') = '') and (qt_conj_atend_w <= qt_conjunto_w) then
			begin
			select	nextval('cm_requisicao_conj_seq')
			into STRICT	nr_sequencia_w
			;

			insert	into cm_requisicao_conj(
				nr_sequencia,
				nr_seq_item_req,
				nr_seq_conj_real,
				dt_atendimento,
				dt_atualizacao,
				nm_usuario,
				dt_retorno)
			values (	nr_sequencia_w,
				nr_seq_item_req_p,
				nr_seq_conj_real_w,
				clock_timestamp(),
				clock_timestamp(),
				nm_usuario_p,
				dt_retorno_w);
		
			update	cm_conjunto_cont
			set	cd_setor_atend_dest	= cd_setor_requisicao_w,
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp()
			where	nr_sequencia 		= nr_seq_conj_real_w;
		
			end;
		end if;
		end;
	END loop;
	end;
	
	if (coalesce(ds_erro_w::text, '') = '') then
		begin
		select	qt_conjunto,
			nr_seq_conjunto,
			nr_seq_classif_conj,
			nr_seq_classif
		into STRICT	qt_conjunto_w,
			nr_seq_conjunto_w,
			nr_seq_classif_conj_req_w,
			nr_seq_classif_req_w
		from	cm_requisicao_item
		where	nr_seq_requisicao 	= nr_requisicao_p
		and	nr_sequencia	= nr_seq_item_req_p;

		select	count(*)
		into STRICT	qt_conj_atend_w
		from	cm_requisicao_conj
		where	nr_seq_item_req	= nr_seq_item_req_p;
		
		update	cm_requisicao_item
		set	cd_motivo_baixa 	= cd_motivo_baixa_p,
			qt_conjunto	= qt_conj_atend_w,
			dt_atualizacao	= clock_timestamp(),
			nm_usuario	= nm_usuario_p,
			nm_usuario_atend	= nm_usuario_p
		where	nr_sequencia 	= nr_seq_item_req_p;

		if (qt_conj_atend_w <> qt_conjunto_w) then
			begin
			
			insert into cm_requisicao_item(
					nr_sequencia,
					nr_seq_requisicao,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_conjunto,
					qt_conjunto,
					nr_seq_classif_conj,
					nr_seq_classif)
				values(	nextval('cm_requisicao_item_seq'),
					nr_requisicao_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_conjunto_w,
					(coalesce(qt_conjunto_w,0) - coalesce(qt_conj_atend_w,0)),
					nr_seq_classif_conj_req_w,
					nr_seq_classif_req_w);
			end;
		end if;
			
		select	count(*)
		into STRICT	qt_item_atend_w
		from	cm_requisicao_item
		where	nr_seq_requisicao = nr_requisicao_p
		and	coalesce(cd_motivo_baixa,0) = 0;

		if (qt_item_atend_w = 0) then
			update	cm_requisicao
			set	dt_baixa	= clock_timestamp(),
				nm_usuario	= nm_usuario_p
			where	nr_sequencia	= nr_requisicao_p;

			if (ie_envia_ci_w = 'S') then
			
				select	obter_classif_comunic('F')
				into STRICT	nr_seq_classif_w
				;
			
				CALL gerar_comunic_padrao(	clock_timestamp(),
							WHEB_MENSAGEM_PCK.get_texto(279086) || nr_requisicao_p || WHEB_MENSAGEM_PCK.get_texto(279087),
							WHEB_MENSAGEM_PCK.get_texto(279088) || nr_requisicao_p || WHEB_MENSAGEM_PCK.get_texto(279089) || ds_setor_requisicao_w,
							nm_usuario_p,
							'N',
							nm_usuario_requisitante_w || ',',
							'N',
							nr_seq_classif_w,
							'',
							'',
							'',
							clock_timestamp(),
							'',
							'');

			end if;
		end if;
		commit;
		end;
	end if;
	ds_erro_p	:= ds_erro_w;
end if;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cme_baixar_requisicao (nr_requisicao_p bigint, nr_seq_item_req_p bigint, cd_motivo_baixa_p bigint, ds_lista_conjunto_p text, nm_usuario_p text, ds_erro_p INOUT text) FROM PUBLIC;

