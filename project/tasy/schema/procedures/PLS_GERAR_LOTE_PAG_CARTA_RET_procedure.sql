-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_lote_pag_carta_ret ( nr_seq_lote_p pls_lote_pagamento.nr_sequencia%type, nr_seq_evento_carta_retencao_p pls_periodo_pagamento.nr_seq_evento_carta_retencao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ ]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
nr_seq_pagamento_w		pls_pagamento_prestador.nr_sequencia%type;
dt_venc_titulo_w		pls_lote_pagamento.dt_venc_lote%type;
dt_emissao_w			pls_lote_pagamento.dt_ref_tributo%type;
nr_seq_lote_evento_w		pls_lote_evento.nr_sequencia%type;
dt_mes_competencia_w		pls_lote_pagamento.dt_mes_competencia%type;
qt_registro_w			integer;
qt_carta_ret_w			integer;
qt_lote_cart_ret_w		integer;

c01 CURSOR(cd_estabelecimento_pc		estabelecimento.cd_estabelecimento%type,
		dt_venc_titulo_pc		pls_lote_pagamento.dt_venc_lote%type,
		dt_emissao_pc			pls_lote_pagamento.dt_ref_tributo%type) FOR
	SELECT	x.nr_sequencia nr_seq_prestador,
		b.cd_tributo,
		b.cd_pessoa_fisica,
		coalesce(b.ie_pago_prev_lote_pag_ops, 'P') ie_pago_prev,
		CASE WHEN b.ie_tipo_data='E' THEN  dt_emissao_pc WHEN b.ie_tipo_data='V' THEN  dt_venc_titulo_pc END  dt_imposto,
		b.nr_seq_lote_pgto
	from	pls_prestador		x,
		pessoa_fisica_trib	b
	where	b.cd_pessoa_fisica		= x.cd_pessoa_fisica
	and	b.ie_pago_prev_lote_pag_ops	= 'R' -- Retido em outra empresa
	and	((b.cd_estabelecimento		= cd_estabelecimento_pc) or (coalesce(b.cd_estabelecimento::text, '') = ''))
	and	CASE WHEN b.ie_tipo_data='E' THEN  dt_emissao_pc WHEN b.ie_tipo_data='V' THEN  dt_venc_titulo_pc END  between trunc(b.dt_inicio_vigencia, 'month') and b.dt_fim_vigencia
	order by 1;

BEGIN
if (coalesce(nr_seq_evento_carta_retencao_p::text, '') = '') then
	--R aise_application_error(-20011,'Para que o lote de recebimento da carta de retenção seja gerado, é necessário informar evento no cadastro do período.');
	CALL wheb_mensagem_pck.exibir_mensagem_abort(349326);
else
	select	a.dt_venc_lote,
		trunc(coalesce(a.dt_ref_tributo, a.dt_mes_competencia), 'month'),
		a.dt_mes_competencia
	into STRICT	dt_venc_titulo_w,
		dt_emissao_w,
		dt_mes_competencia_w
	from	pls_lote_pagamento a
	where	nr_sequencia	= nr_seq_lote_p;

	qt_carta_ret_w		:= 0;
	qt_lote_cart_ret_w	:= 0;

	-- Não trabalha com carta de retenção
	select	count(1)
	into STRICT	qt_carta_ret_w
	from	pls_periodo_pagamento
	where	cd_estabelecimento	= cd_estabelecimento_p
	and	ie_carta_retencao	= 'S';

	if (qt_carta_ret_w > 0) then
		select	count(1)
		into STRICT	qt_lote_cart_ret_w
		from	pls_periodo_pagamento		p,
			pls_lote_pagamento		c
		where	p.nr_sequencia			= c.nr_seq_periodo
		and	p.ie_carta_retencao		= 'S'
		and	trunc(c.dt_mes_competencia)	= trunc(dt_mes_competencia_w);
	end if;

	for r_C01_w in C01( cd_estabelecimento_p, dt_venc_titulo_w, dt_emissao_w ) loop

		if (coalesce(r_C01_w.nr_seq_lote_pgto::text, '') = '') or (qt_carta_ret_w = 0) or ((r_C01_w.nr_seq_lote_pgto IS NOT NULL AND r_C01_w.nr_seq_lote_pgto::text <> '') and qt_lote_cart_ret_w <= 1) then

			select	max(x.nr_sequencia) -- Verificar se já existe o registro do PRESTADOR para esse lote
			into STRICT	nr_seq_pagamento_w
			from	pls_pagamento_prestador	x,
				pls_prestador		u
			where	u.nr_sequencia		= x.nr_seq_prestador
			and	x.nr_seq_lote		= nr_seq_lote_p
			and	u.cd_pessoa_fisica	= r_C01_w.cd_pessoa_fisica;

			if (coalesce(nr_seq_pagamento_w::text, '') = '') then
				insert into pls_pagamento_prestador(nr_sequencia,
					nr_seq_lote,
					nr_seq_prestador,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					vl_pagamento,
					nr_nota_fiscal,
					nr_seq_conta_banco,
					ie_cancelamento,
					dt_cancelamento,
					nr_lote_contabil_cancel)
				values (nextval('pls_pagamento_prestador_seq'),
					nr_seq_lote_p,
					r_C01_w.nr_seq_prestador,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					0,
					null,
					null,
					null,
					null,
					null) returning nr_sequencia into nr_seq_pagamento_w;

				insert into pls_pagamento_item(nr_sequencia,
					nr_seq_pagamento,
					nr_seq_evento,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					vl_item,
					ie_tipo_contratacao,
					nr_tit_pagar_origem,
					nr_tit_receber_origem,
					nr_adiant_pago_origem,
					nr_seq_regra_fixo_calc,
					vl_glosa,
					nr_prior_desc,
					nr_seq_lote_pgto_orig,
					dt_mes_comp_lote,
					ie_apropriar_total,
					vl_desc_trib)
				values (nextval('pls_pagamento_item_seq'),
					nr_seq_pagamento_w,
					nr_seq_evento_carta_retencao_p,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					0,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null,
					null);
			end if;
		end if;
	end loop;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_lote_pag_carta_ret ( nr_seq_lote_p pls_lote_pagamento.nr_sequencia%type, nr_seq_evento_carta_retencao_p pls_periodo_pagamento.nr_seq_evento_carta_retencao%type, cd_estabelecimento_p estabelecimento.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

