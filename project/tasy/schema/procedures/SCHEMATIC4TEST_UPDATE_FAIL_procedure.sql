-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE schematic4test_update_fail (NR_SEQ_SCHEDULE_P bigint, NR_SEQ_SUITE_P bigint) AS $body$
DECLARE

NR_SEQ_SCRIPT_W bigint;
NR_SEQ_SUITE_W bigint;
NR_SEQUENCIA_W  bigint;
NR_SEQ_SCRIPT_W2 bigint;
DS_ARQUIVO_W2 varchar(4000);
NM_SUITE_W varchar(255);
NM_SCRIPT_W varchar(255);
DS_VERSION_W varchar(255);
DT_EXECUTION_W timestamp;
DT_ATUALIZACAO_NREC_W timestamp;
DT_EXECUTION_SOMA timestamp;
QTD bigint;
QTD2 bigint;
QTD3 bigint;
QTD4 bigint;
QTD5 bigint;
QTD_VERSION_W bigint;
NR_SEQ_SCHEDULE_OLD_W bigint;
IE_TIPO_ANEXO_W varchar(5);
NM_USUARIO_NREC_OLD_W varchar(15);

--loop scripts with succeful
C01 CURSOR FOR
  SELECT log1.NR_SEQ_SCRIPT NR_SEQ_SCRIPT
      INTO STRICT NR_SEQ_SCRIPT_W
  FROM SCHEM_TEST_LOG log1
	WHERE log1.NR_SEQ_SCHEDULE = NR_SEQ_SCHEDULE_P
  AND log1.IE_STATUS = '4';


BEGIN
    --procedure that update suite that was reexec fail
    SELECT COUNT(suite.NM_SUITE) NM_SUITE 
        INTO STRICT QTD
    FROM SCHEM_TEST_SUITE suite
    WHERE NM_SUITE LIKE 'Failure from%'
    AND NR_SEQUENCIA = NR_SEQ_SUITE_P;

    IF (QTD <> 0) THEN   
      SELECT MAX(NR_SEQUENCIA) NR_SEQUENCIA, NM_SUITE
        INTO STRICT NR_SEQ_SUITE_W, NM_SUITE_W
      FROM SCHEM_TEST_SUITE suite
      WHERE NM_SUITE LIKE 'Failure from%'
      AND NR_SEQUENCIA = NR_SEQ_SUITE_P
      GROUP BY NR_SEQUENCIA, NM_SUITE;
      
      NR_SEQ_SCHEDULE_OLD_W := (regexp_replace(substr(NM_SUITE_W,1,20), '[^0-9]', ''))::numeric;

      UPDATE SCHEM_TEST_SCHEDULE SET DS_RETEST = NR_SEQ_SCHEDULE_P WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_OLD_W;
      COMMIT;

      SELECT COUNT(NR_SEQUENCIA) QTD_VERSION
          INTO STRICT QTD_VERSION_W
      FROM SCHEM_TEST_SCHEDULE WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_P AND (DS_VERSION IS NOT NULL AND DS_VERSION::text <> '') AND DS_VERSION NOT LIKE '0';
      
      SELECT NM_USUARIO_NREC 
          INTO STRICT NM_USUARIO_NREC_OLD_W
      FROM SCHEM_TEST_SCHEDULE WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_P;

      IF (QTD_VERSION_W <> 0) THEN
        SELECT DS_VERSION 
          INTO STRICT DS_VERSION_W
        FROM SCHEM_TEST_SCHEDULE WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_P AND (DS_VERSION IS NOT NULL AND DS_VERSION::text <> '') AND DS_VERSION NOT LIKE '0';

         UPDATE SCHEM_TEST_SCHEDULE SET DS_VERSION = DS_VERSION_W WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_OLD_W;
      END IF;
     
      COMMIT;

      IF (NM_USUARIO_NREC_OLD_W LIKE 'Auto Robot') THEN
        SELECT DT_EXECUTION
           INTO STRICT DT_EXECUTION_W
        FROM SCHEM_TEST_SCHEDULE 
        WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_OLD_W;

        SELECT DT_EXECUTION_W+obter_minutos_intervalo(DT_EXECUTION,DT_ATUALIZACAO_NREC,0)/(24*60)
           INTO STRICT DT_EXECUTION_SOMA
        FROM SCHEM_TEST_SCHEDULE 
        WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_P;

        IF (coalesce(DT_EXECUTION_W::text, '') = '') THEN
          SELECT DT_EXECUTION
               INTO STRICT DT_EXECUTION_SOMA
          FROM SCHEM_TEST_SCHEDULE 
          WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_P;
        END IF;

        UPDATE SCHEM_TEST_SCHEDULE SET DT_EXECUTION = DT_EXECUTION_SOMA WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_OLD_W;
        COMMIT;
      END IF;

      OPEN C01;
      LOOP
      FETCH C01 INTO	
        NR_SEQ_SCRIPT_W;
      EXIT WHEN NOT FOUND; /* apply on C01 */
      BEGIN	
          SELECT COUNT(log1.NR_SEQUENCIA) NR_SEQUENCIA
              INTO STRICT QTD4
          FROM SCHEM_TEST_LOG log1
          WHERE log1.NR_SEQ_SCHEDULE = NR_SEQ_SCHEDULE_OLD_W
          AND log1.NR_SEQ_SCRIPT = NR_SEQ_SCRIPT_W 
          AND log1.IE_STATUS = '2';

          IF (QTD4 <> 0) THEN
              SELECT MAX(log1.NR_SEQUENCIA) NR_SEQUENCIA, log1.NM_SCRIPT NM_SCRIPT 
                  INTO STRICT NR_SEQUENCIA_W, NM_SCRIPT_W
              FROM SCHEM_TEST_LOG log1 
              WHERE log1.NR_SEQ_SCHEDULE = NR_SEQ_SCHEDULE_OLD_W
              AND log1.NR_SEQ_SCRIPT = NR_SEQ_SCRIPT_W 
              AND log1.IE_STATUS = '2'
              GROUP BY log1.NM_SCRIPT;

              UPDATE SCHEM_TEST_LOG SET IE_STATUS = '4' WHERE NR_SEQUENCIA = NR_SEQUENCIA_W;
			  COMMIT;

			  UPDATE SCHEM_TEST_SCHEDULE_ATTACH SET DS_ARQUIVO = REPLACE(DS_ARQUIVO, NR_SEQ_SCHEDULE_OLD_W, NR_SEQ_SCHEDULE_P)
				WHERE NR_SEQ_SCHEDULE = NR_SEQ_SCHEDULE_OLD_W AND NR_SEQ_SCRIPT = NR_SEQ_SCRIPT_W AND DS_OBSERVACAO LIKE '%.html';
              COMMIT;	
			  
              DELETE FROM SCHEM_TEST_SCHEDULE_ATTACH WHERE NR_SEQ_SCHEDULE = NR_SEQ_SCHEDULE_OLD_W AND NR_SEQ_SCRIPT = NR_SEQ_SCRIPT_W AND DS_OBSERVACAO LIKE '%.png';
              COMMIT;
          END IF;
      END;
      END LOOP;
      CLOSE C01;
      
      CALL SCHEMATIC4TEST_SETSCHEDSTATUS(NR_SEQ_SCHEDULE_OLD_W);
      CALL SCHEMATIC4TEST_ERASE_DUPLI(NR_SEQ_SCHEDULE_OLD_W,'1');
      CALL SCHEMATIC4TEST_ERASE_DUPLI(NR_SEQ_SCHEDULE_OLD_W,'2');
      CALL SCHEMATIC4TEST_ERASE_DUPLI(NR_SEQ_SCHEDULE_OLD_W,'4');

      UPDATE SCHEM_TEST_SCHEDULE SET IE_JOBS = '1' WHERE NR_SEQUENCIA = NR_SEQ_SCHEDULE_P;
      COMMIT;

	   UPDATE SCHEM_TEST_SUITE SET IE_JOBS = '1' WHERE NR_SEQUENCIA = NR_SEQ_SUITE_P;
      COMMIT;
    END IF;		
    EXCEPTION
    WHEN no_data_found THEN
      RAISE NOTICE 'Erro: Data not found';
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE schematic4test_update_fail (NR_SEQ_SCHEDULE_P bigint, NR_SEQ_SUITE_P bigint) FROM PUBLIC;

