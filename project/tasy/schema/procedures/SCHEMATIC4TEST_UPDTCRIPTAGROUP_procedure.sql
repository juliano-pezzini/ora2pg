-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE schematic4test_updtcriptagroup (NR_SEQ_AGROUP_P bigint) AS $body$
DECLARE

NR_SEQ_SCRIPT_W bigint;
NR_SEQ_STEP_W bigint;
QTD_W bigint;
QTD_W2 bigint;
QTD_W3 bigint;
QTD_W4 bigint;
NEWSEQUENCESTEP bigint;
NEWSEQUENCEVAL bigint;
NR_SEQ_EXECUTION_W bigint;
NR_SEQ_ACTION_W bigint;
NR_SEQ_SNIPPET_W bigint;
NR_SEQ_VARIABLE_W bigint;
NR_SEQ_SERVICE_W bigint;
NM_USUARIO_W varchar(15);
NM_USUARIO_NREC_W varchar(15);
IE_JOBS_W varchar(255);
IE_SWITCH_W varchar(255);
DS_VERSION_W varchar(255);
DS_VER_VALW varchar(255);
DS_VALUE_W varchar(1000);
DT_ATUALIZACAO_NREC_W timestamp;
DT_ATUALIZACAO_W timestamp;
DT_UTILMA_ATUALIZACAO_STEP_W timestamp;
DT_UTILMA_ATUALIZACAO_W timestamp;
DT_UTILMA_CRIACAO_STEP_W timestamp;
DT_UTILMA_ATUALIZACAO_W2 timestamp;
NR_SEQ_AGROUP_W bigint;

--loop scripts
C02 CURSOR FOR 
    SELECT NR_SEQ_SCRIPT
        INTO STRICT NR_SEQ_SCRIPT_W
    FROM SCHEM_TEST_STEP 
    WHERE NR_SEQ_SNIPPET = NR_SEQ_AGROUP_P
    AND (NR_SEQ_SCRIPT IS NOT NULL AND NR_SEQ_SCRIPT::text <> '')
    GROUP BY NR_SEQ_SCRIPT;

--loop steps
C03 CURSOR FOR
    SELECT NR_SEQUENCIA
       INTO STRICT NR_SEQ_STEP_W
    FROM SCHEM_TEST_STEP 
    WHERE NR_SEQ_SNIPPET = NR_SEQ_AGROUP_P
    AND coalesce(NR_SEQ_SCRIPT::text, '') = ''
    AND NR_SEQUENCIA NOT IN (SELECT NR_SEQ_AGRUPADOR
    FROM SCHEM_TEST_STEP 
    WHERE NR_SEQ_SNIPPET = NR_SEQ_AGROUP_P
    AND NR_SEQ_SCRIPT = NR_SEQ_SCRIPT_W);

--loop values
C04 CURSOR FOR
   SELECT VALUE1.DS_VALUE DS_VALUE, VALUE1.NR_SEQ_VARIABLE NR_SEQ_VARIABLE, VALUE1.NR_SEQ_SERVICE NR_SEQ_SERVICE, VALUE1.DS_VERSION DS_VERSION
      INTO STRICT DS_VALUE_W, NR_SEQ_VARIABLE_W, NR_SEQ_SERVICE_W, DS_VER_VALW
   FROM SCHEM_TEST_VALUES VALUE1
   INNER JOIN SCHEM_TEST_VARIABLE VARIABLE1 ON (VALUE1.NR_SEQ_VARIABLE = VARIABLE1.NR_SEQUENCIA) 
   INNER JOIN SCHEM_TEST_STEP STEP ON (STEP.NR_SEQUENCIA = VALUE1.NR_SEQ_STEP) 
   WHERE STEP.NR_SEQUENCIA = NR_SEQ_STEP_W
   ORDER BY VALUE1.NR_SEQ_SERVICE, VALUE1.NR_SEQ_VARIABLE ASC;


BEGIN
  --procedure that update all scripts that using snippet
   SELECT COUNT(NR_SEQUENCIA)
        INTO STRICT QTD_W2
  FROM SCHEM_TEST_SNIPPET   
  WHERE IE_UPDATE = '1';

  IF (QTD_W2 <> 0) THEN  		
      SELECT DT_ATUALIZACAO_NREC
         INTO STRICT DT_UTILMA_ATUALIZACAO_W2
      FROM SCHEM_TEST_SNIPPET     
      WHERE NR_SEQUENCIA = NR_SEQ_AGROUP_P;

        SELECT DT_ATUALIZACAO_NREC
            INTO STRICT DT_UTILMA_CRIACAO_STEP_W
        FROM SCHEM_TEST_STEP 
        WHERE NR_SEQ_SNIPPET = NR_SEQ_AGROUP_P
        AND NR_SEQUENCIA = (SELECT MAX(NR_SEQUENCIA) FROM SCHEM_TEST_STEP 
                        WHERE NR_SEQ_SNIPPET = NR_SEQ_AGROUP_P);

         IF (DT_UTILMA_CRIACAO_STEP_W > DT_UTILMA_ATUALIZACAO_W2) THEN
            SELECT COUNT(NR_SEQUENCIA) NR_SEQUENCIA
                INTO STRICT QTD_W3
            FROM SCHEM_TEST_STEP 
            WHERE NR_SEQ_SNIPPET = NR_SEQ_AGROUP_P
            AND coalesce(NR_SEQ_SCRIPT::text, '') = '';

            OPEN C02;
            LOOP
            FETCH C02 INTO	
              NR_SEQ_SCRIPT_W;
            EXIT WHEN NOT FOUND; /* apply on C02 */
            BEGIN				
                SELECT COUNT(NR_SEQUENCIA) NR_SEQUENCIA
                    INTO STRICT QTD_W4
                FROM SCHEM_TEST_STEP
                WHERE NR_SEQ_SNIPPET = NR_SEQ_AGROUP_P
                AND NR_SEQ_SCRIPT = NR_SEQ_SCRIPT_W;
                
                IF (QTD_W3 > QTD_W4) THEN
                 OPEN C03;
                 LOOP
                 FETCH C03 INTO	
                    NR_SEQ_STEP_W;
                 EXIT WHEN NOT FOUND; /* apply on C03 */
                 BEGIN		
                    SELECT NR_SEQ_EXECUTION, NR_SEQ_ACTION, DT_ATUALIZACAO, NM_USUARIO, DT_ATUALIZACAO_NREC, NM_USUARIO_NREC, IE_JOBS, IE_SWITCH, DS_VERSION, NR_SEQ_SNIPPET
                        INTO STRICT NR_SEQ_EXECUTION_W, NR_SEQ_ACTION_W, DT_ATUALIZACAO_W, NM_USUARIO_W, DT_ATUALIZACAO_NREC_W, NM_USUARIO_NREC_W, IE_JOBS_W, IE_SWITCH_W, DS_VERSION_W, NR_SEQ_SNIPPET_W
                    FROM SCHEM_TEST_STEP WHERE NR_SEQUENCIA = NR_SEQ_STEP_W;

                    
                      UPDATE SCHEM_TEST_SCRIPT SET DT_ATUALIZACAO = clock_timestamp(), NM_USUARIO = NM_USUARIO_W WHERE NR_SEQUENCIA = NR_SEQ_SCRIPT_W;
                      COMMIT;
                      
                      SELECT nextval('schem_test_step_seq') SEQUENCIA 
                        INTO STRICT NEWSEQUENCESTEP
;

                      INSERT INTO SCHEM_TEST_STEP(nr_sequencia, nr_seq_execution, nr_seq_action, nr_seq_script, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec, ie_jobs, ie_switch, nr_seq_snippet, nr_seq_agrupador, DS_VERSION) 
                          VALUES (NEWSEQUENCESTEP, NR_SEQ_EXECUTION_W, NR_SEQ_ACTION_W, NR_SEQ_SCRIPT_W, DT_ATUALIZACAO_W, NM_USUARIO_W, DT_ATUALIZACAO_NREC_W, NM_USUARIO_NREC_W, IE_JOBS_W, IE_SWITCH_W, NR_SEQ_SNIPPET_W, NR_SEQ_STEP_W, DS_VERSION_W);

                      UPDATE SCHEM_TEST_SNIPPET SET DT_LAST_UPDATE = DT_ATUALIZACAO_W, DT_ATUALIZACAO = clock_timestamp(), NM_USUARIO = NM_USUARIO_W WHERE NR_SEQUENCIA = NR_SEQ_AGROUP_P;
                      COMMIT;

                      OPEN C04;
                      LOOP
                      FETCH C04 INTO	
                        DS_VALUE_W,
                        NR_SEQ_VARIABLE_W,
                        NR_SEQ_SERVICE_W,
						DS_VER_VALW;
                      EXIT WHEN NOT FOUND; /* apply on C04 */
                      BEGIN	
                        SELECT nextval('schem_test_values_seq')
                          INTO STRICT NEWSEQUENCEVAL
;

                        IF (NR_SEQ_VARIABLE_W = 1) THEN
                          DS_VALUE_W := null;
                        END IF;

                        INSERT INTO SCHEM_TEST_VALUES(NR_SEQUENCIA, DT_ATUALIZACAO, DT_ATUALIZACAO_NREC, NM_USUARIO, NM_USUARIO_NREC, NR_SEQ_STEP, NR_SEQ_VARIABLE, DS_VALUE, NR_SEQ_SERVICE, DS_VERSION) 
                             VALUES (NEWSEQUENCEVAL, DT_ATUALIZACAO_W, DT_ATUALIZACAO_NREC_W, NM_USUARIO_W, NM_USUARIO_NREC_W, NEWSEQUENCESTEP, NR_SEQ_VARIABLE_W, replace(replace(replace(replace(replace(DS_VALUE_W,chr(38)||'amp;','&'),chr(38)||'lt;','<'),chr(38)||'gt;','>'),chr(38)||'apos;', chr(39)),chr(38)||'quot;',chr(34)), NR_SEQ_SERVICE_W, DS_VER_VALW);
                        COMMIT;

                      UPDATE SCHEM_TEST_SNIPPET SET DT_LAST_UPDATE = DT_ATUALIZACAO_W, DT_ATUALIZACAO = clock_timestamp(), NM_USUARIO = NM_USUARIO_W WHERE NR_SEQUENCIA = NR_SEQ_SNIPPET_W;
                      COMMIT;
                    END;
                    END LOOP;
                    CLOSE C04;
                END;
                END LOOP;
                CLOSE C03;
              END IF;
            END;
            END LOOP;
            CLOSE C02;
         END IF;
  END IF;
  EXCEPTION
  WHEN no_data_found THEN
    RAISE NOTICE 'Erro: Data not found';
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE schematic4test_updtcriptagroup (NR_SEQ_AGROUP_P bigint) FROM PUBLIC;

