-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE enviar_sms_agenda_regra () AS $body$
DECLARE


nr_seq_regra_w			   bigint;
dt_envio_w			   timestamp;
nr_dia_envio_w			   bigint;
ds_mensagem_sms_w		   varchar(2000);
nm_paciente_w			   varchar(255);
dt_agenda_w			   varchar(20);
dt_primeiro_hor_w			   varchar(20);
ds_item_agenda_w			   varchar(255);
nr_sequencia_w			   bigint;
cd_pessoa_fisica_w		   varchar(10);
nr_telefone_w			   varchar(40);
ds_remetente_sms_w		   varchar(255);
nr_seq_log_sms_w			   bigint;
ds_log_sms_w			   varchar(2000)		:= '';
cd_agenda_w			   bigint;
nr_seq_ageint_w			   bigint;
ds_erro_w			   varchar(255);
dt_min_exame_w			   timestamp;
dt_min_consulta_w			   timestamp;
dt_regra_w			   timestamp;
dt_inicial_w			   timestamp;
dt_final_w			   timestamp;
ds_mensagem_regra_w		varchar(2000);
cd_estabelecimento_w		   bigint;
cd_estabelecimento_ww		bigint;
ie_status_agenda_w		varchar(1);
ie_tipo_agendamento_w		varchar(15);
cd_setor_atendimento_w		integer;
nr_seq_estagio_aut_w		   bigint;
nr_seq_estagio_aut_ww		bigint;
ie_interno_w			   varchar(3);
qt_aut_repr_pac_w			   bigint;
ie_sms_Ageint_w			varchar(1);
ie_interno_regra_w			varchar(3)		:= '0';
ds_estagio_aut_w			   varchar(60);
nr_seq_agenda_int_w		bigint;
nr_seq_ageint_ww			   bigint;
qt_exames_autorizados_w		bigint 		:= 0;
qt_exames_agendados_w		bigint 		:= 0;
ds_erro_outros_w			   varchar(255)	:= '';
ds_especialidade_w		varchar(100);
nm_medico_req_w			varchar(60);
nm_medico_agenda_w		varchar(60);
nm_medico_exec_w		   varchar(60);
nm_medico_req_crm_w		varchar(60);
nm_medico_w			   varchar(60);	
nm_medico_crm_w			varchar(60);
nm_medico_exec_crm_w	 	  varchar(60);
nr_tamanho_mensagem_w		integer		:= 0;
nm_medico_resumido_w	 	  varchar(60);
nm_usuario_envio_w		varchar(20);
ds_setor_atendimento_w 		varchar(60);
ie_tipo_atendimento_w		smallint;
ds_agenda_w             		varchar(255);
cd_agenda_regra_w		regra_envio_sms_agenda.cd_agenda%type;
nr_seq_estag_w		autorizacao_convenio.nr_seq_estagio%type;
ds_local_erro_w		varchar(255);
ds_turno_w		varchar(60);
ds_dia_mes_w	 varchar(5);
dt_menor_hor_w		varchar(10);
ds_esconder_ddi_w		varchar(1);
ie_utiliza_dddSMS_w		varchar(1);
ie_enviar_se_classif_regra_w 	varchar(1);
ie_enviar_w			varchar(1);
ie_classif_agenda_w		agenda_consulta.ie_classif_agenda%type;
ie_classif_agenda_regra_w	envio_sms_classif_agenda.ie_classif_agenda%type;
ds_classif_proc_w  varchar(80);
ie_classif_agenda_cons_w	varchar(5);
nr_ddi_celular_w			   varchar(3);
nr_ddd_celular_w			   varchar(3);
ie_receive_sms_w		varchar(1);

C01 CURSOR FOR		
	SELECT	a.nr_sequencia,
			a.dt_envio,
			a.ie_dia_envio,
			substr(a.ds_mensagem,1,2000),
			a.hr_inicial,
			a.hr_final,
			a.cd_estabelecimento,
			coalesce(a.cd_estabelecimento,1),
			a.ie_tipo_agenda_status,
			a.ie_tipo_agendamento,
			coalesce(a.cd_setor_atendimento, 0),
			coalesce(nm_usuario_envio,'Tasy'),
			coalesce(ie_tipo_atendimento,0),
			a.cd_agenda,
			a.ie_classif_agenda
	from	regra_envio_sms_agenda a
	order by coalesce(a.ie_tipo_agendamento,''),
	         coalesce(a.cd_setor_atendimento,0) desc;	
			
C02 CURSOR FOR
	/*AGENDA DE CONSULTAS*/

	SELECT	distinct
			substr(obter_primeiro_nome(coalesce(obter_nome_pf(a.cd_pessoa_fisica), a.nm_paciente)),1,255),
			to_char(a.dt_agenda, 'dd/mm/yyyy hh24:mi'),				
			substr(coalesce(obter_desc_espec_medica(b.cd_especialidade), obter_nome_medico_combo_agcons(b.cd_estabelecimento, b.cd_agenda, 3, 'N')),1,255),
			a.nr_sequencia,
			a.cd_pessoa_fisica,
			b.cd_agenda,
			coalesce(c.nr_seq_estagio, 0),
			d.nr_seq_agenda_int,
			coalesce(obter_nome_especialidade(b.cd_especialidade), wheb_mensagem_pck.get_texto(793293)),
			substr(coalesce(obter_nome_medico(a.cd_medico_req,'N'), b.ds_curta),1,60),
			substr(coalesce(obter_nome_medico(b.cd_pessoa_fisica,'N'), b.ds_curta),1,60),
			substr(coalesce(obter_nome_medico(a.cd_medico_req,'NCD'), b.ds_curta),1,60),
			substr(coalesce(obter_primeiro_nome(obter_nome_medico(b.cd_pessoa_fisica,'NCD')), b.ds_curta),1,60),
			substr(obter_nome_medico_combo_agcons(b.cd_estabelecimento, b.cd_agenda, 3, 'N'),1,255),
			substr(Obter_ds_turno(a.cd_turno),1,60),
			to_char(a.dt_agenda, 'dd/mm'),
			a.ie_classif_agenda
	FROM agenda b, agenda_consulta a
LEFT OUTER JOIN autorizacao_convenio c ON (a.nr_sequencia = c.nr_seq_agenda_consulta)
LEFT OUTER JOIN agenda_integrada_item d ON (a.nr_sequencia = d.nr_seq_agenda_cons)
WHERE a.cd_agenda		= b.cd_agenda   and b.cd_tipo_agenda	= 3 and b.ie_situacao		= 'A' and a.dt_agenda between trunc(dt_regra_w) and trunc(dt_regra_w) + 86399/86400 and (a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '') and (((ie_status_agenda_w	= 'N') 		and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
	or		((ie_status_agenda_w	= 'T') 		and coalesce(a.ie_transferido, 'N')	= 'S')
	or		((ie_status_agenda_w	= 'C') 		and a.ie_status_agenda	= 'C')
	or		((ie_status_agenda_w	= 'E') 		and a.ie_status_agenda	= 'E')
	or		((coalesce(ie_status_agenda_w::text, '') = '')	and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))) and ((b.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = '')) and ((not exists (	SELECT	1
							from	log_envio_sms x
							where	x.nr_seq_agenda		= a.nr_sequencia))
	or		((ie_status_agenda_w = 'C') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   	x.dt_envio > a.dt_cancelamento)))
	or		((ie_status_agenda_w = 'E') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
												and   	x.dt_envio > a.dt_atendido)))) and (not exists (	select	1
							from	regra_exclusao_agenda_sms x
							where	x.cd_agenda		= a.cd_agenda
							and		x.ie_situacao   = 'A')) and a.dt_agenda	=	(	select	min(x.dt_agenda)
								from	agenda_consulta x,
										agenda z
								where	x.cd_pessoa_fisica	= a.cd_pessoa_fisica
								and		x.cd_agenda = z.cd_agenda
								and		(x.cd_pessoa_fisica IS NOT NULL AND x.cd_pessoa_fisica::text <> '')
								and		x.dt_agenda between dt_regra_w and fim_dia(dt_regra_w)
								and		((z.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = ''))
								and		(((ie_status_agenda_w	= 'N') 		and x.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
								or		((ie_status_agenda_w	= 'T') 		and coalesce(x.ie_transferido, 'N')	= 'S')
								or		((ie_status_agenda_w	= 'C') 		and x.ie_status_agenda	= 'C')
								or		((ie_status_agenda_w	= 'E') 		and x.ie_status_agenda	= 'E')
								or		((coalesce(ie_status_agenda_w::text, '') = '')	and x.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF')))
                         
							) and ((ie_tipo_agendamento_w = 'C') or (coalesce(ie_tipo_agendamento_w::text, '') = '')) and ((b.cd_setor_exclusivo = cd_setor_atendimento_w) or (cd_setor_atendimento_w = 0)) and ((a.ie_tipo_atendimento	= ie_tipo_atendimento_w) or (ie_tipo_atendimento_w = 0)) and ((b.cd_agenda = cd_agenda_regra_w) or (coalesce(cd_agenda_regra_w::text, '') = '')) and ((a.ie_classif_agenda = ie_classif_agenda_cons_w) or (coalesce(ie_classif_agenda_cons_w::text, '') = '')) order by 	1,
				2;
				
C03 CURSOR FOR
	/*AGENDA DE SERVICOS*/

	SELECT	distinct
			substr(obter_primeiro_nome(coalesce(obter_nome_pf(a.cd_pessoa_fisica), a.nm_paciente)),1,255),
			to_char(a.dt_agenda, 'dd/mm/yyyy hh24:mi'),		
			substr(Obter_Item_Grid_Ageint(a.nr_seq_proc_interno, a.cd_medico, b.cd_especialidade, b.cd_estabelecimento, d.nr_seq_item_selec),1,255),		
			a.nr_sequencia,
			a.cd_pessoa_fisica,
			b.cd_agenda,
			obter_estagio_autor_ageint(d.nr_seq_agenda_int, d.nr_seq_agenda_cons, null, 'C'),
			coalesce(e.ie_sms_ageint, 'N'),
			d.nr_seq_agenda_int,
			coalesce(obter_nome_especialidade(b.cd_especialidade), wheb_mensagem_pck.get_texto(793292)),
			substr(obter_nome_medico(a.cd_medico_solic, 'N'),1,60),
			substr(obter_nome_medico(a.cd_medico, 'N'),1,60),
			substr(obter_nome_medico(a.cd_medico_solic, 'NCD'),1,60),
			substr(obter_nome_medico(a.cd_medico, 'NCD'),1,60),
			substr(obter_primeiro_nome(obter_nome_medico(coalesce(a.cd_medico, a.cd_medico_solic), 'NCD')),1,60),
			substr(obter_desc_agenda_servico(b.cd_estabelecimento, b.cd_agenda, 'DEC'),1,255),
			substr(Obter_ds_turno(a.cd_turno),1,60),
			to_char(a.dt_agenda, 'dd/mm'),
			Obter_Classif_Proc_Interno(coalesce(e.nr_seq_classif,f.nr_seq_classif))
	FROM agenda b, agenda_consulta a
LEFT OUTER JOIN autorizacao_convenio c ON (a.nr_sequencia = c.nr_seq_agenda_consulta)
LEFT OUTER JOIN agenda_integrada_item d ON (a.nr_sequencia = d.nr_seq_agenda_cons)
LEFT OUTER JOIN proc_interno f ON (a.nr_seq_proc_interno = f.nr_sequencia)
LEFT OUTER JOIN proc_interno e ON (d.nr_seq_proc_interno = e.nr_sequencia)
WHERE a.cd_agenda			= b.cd_agenda     and b.cd_tipo_agenda		= 5 and b.ie_situacao			= 'A' and a.dt_agenda between trunc(dt_regra_w) and trunc(dt_regra_w) + 86399/86400 and (a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '') and (((ie_status_agenda_w	= 'N') 		and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
	or		((ie_status_agenda_w	= 'T') 		and coalesce(a.ie_transferido, 'N')	= 'S')
	or		((ie_status_agenda_w	= 'C') 		and a.ie_status_agenda	= 'C')
	or		((ie_status_agenda_w	= 'E') 		and a.ie_status_agenda	= 'E')
	or		((coalesce(ie_status_agenda_w::text, '') = '')	and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))) and ((b.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = '')) and ((not exists (	SELECT	1
							from	log_envio_sms x
							where	x.nr_seq_agenda		= a.nr_sequencia))
	or		((ie_status_agenda_w = 'C') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   	x.dt_envio > a.dt_cancelamento)))
	or		((ie_status_agenda_w = 'E') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   	x.dt_envio > a.dt_atendido)))) and (not exists (	select	1
							from	regra_exclusao_agenda_sms x
							where	x.cd_agenda		= a.cd_agenda
							and		x.ie_situacao   = 'A')) and a.dt_agenda	=	(	select	min(x.dt_agenda)
								from	agenda_consulta x,
										agenda z
								where	x.cd_pessoa_fisica	= a.cd_pessoa_fisica
								and		x.cd_agenda = z.cd_agenda
								and		(x.cd_pessoa_fisica IS NOT NULL AND x.cd_pessoa_fisica::text <> '')
								and		x.dt_agenda between dt_regra_w and fim_dia(dt_regra_w)
								and		((z.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = ''))
								and		(((ie_status_agenda_w	= 'N') 		and x.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
								or		((ie_status_agenda_w	= 'T') 		and coalesce(x.ie_transferido, 'N')	= 'S')
								or		((ie_status_agenda_w	= 'C') 		and x.ie_status_agenda	= 'C')
								or		((ie_status_agenda_w	= 'E') 		and x.ie_status_agenda	= 'E')
								or		((coalesce(ie_status_agenda_w::text, '') = '')	and x.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF')))	
							) and ((ie_tipo_agendamento_w = 'S') or (coalesce(ie_tipo_agendamento_w::text, '') = '')) and ((b.cd_setor_agenda = cd_setor_atendimento_w) or (cd_setor_atendimento_w = 0)) and ((a.ie_tipo_atendimento	= ie_tipo_atendimento_w) or (ie_tipo_atendimento_w = 0)) and ((b.cd_agenda = cd_agenda_regra_w) or (coalesce(cd_agenda_regra_w::text, '') = '')) and ((a.ie_classif_agenda = ie_classif_agenda_cons_w) or (coalesce(ie_classif_agenda_cons_w::text, '') = '')) order by 	1,
				2;
				
C04 CURSOR FOR
	/*AGENDA DE EXAMES*/
	
	SELECT	distinct
		substr(obter_primeiro_nome(coalesce(obter_nome_pf(a.cd_pessoa_fisica), a.nm_paciente)),1,255),
		to_char(a.hr_inicio, 'dd/mm/yyyy hh24:mi'),		
		substr(Obter_Item_Grid_Ageint(a.nr_seq_proc_interno, a.cd_medico, b.cd_especialidade, b.cd_estabelecimento, d.nr_seq_item_selec),1,255),		
		a.nr_sequencia,
		a.cd_pessoa_fisica,
		b.cd_agenda,
		obter_estagio_autor_ageint(d.nr_seq_agenda_int, null, d.nr_seq_agenda_exame, 'C'),
		coalesce(e.ie_sms_ageint, 'N'),
		d.nr_seq_agenda_int,
		wheb_mensagem_pck.get_texto(793301),
		substr(obter_nome_medico(a.cd_medico,'N'),1,60),
		substr(obter_nome_medico(a.cd_medico_exec,'N'),1,60),
		substr(obter_nome_medico(a.cd_medico,'NCD'),1,60),
		substr(obter_nome_medico(a.cd_medico_exec,'NCD'),1,60),
		substr(obter_primeiro_nome(obter_nome_medico(coalesce(a.cd_medico_exec, a.cd_medico),'NCD')),1,60),
		substr(coalesce(obter_desc_setor_atend(a.cd_setor_atendimento),''),1,60),
		substr(obter_desc_agenda(b.cd_agenda),1,255),
		substr(Obter_ds_turno(a.cd_turno),1,60),
		to_char(a.hr_inicio, 'dd/mm'),
		Obter_Classif_Proc_Interno(coalesce(e.nr_seq_classif,f.nr_seq_classif))
	FROM agenda b, agenda_paciente a
LEFT OUTER JOIN autorizacao_convenio c ON (a.nr_sequencia = c.nr_seq_agenda)
LEFT OUTER JOIN agenda_integrada_item d ON (a.nr_sequencia = d.nr_seq_agenda_exame)
LEFT OUTER JOIN proc_interno f ON (a.nr_seq_proc_interno = f.nr_sequencia)
LEFT OUTER JOIN proc_interno e ON (d.nr_seq_proc_interno = e.nr_sequencia)
WHERE a.cd_agenda				= b.cd_agenda     and b.cd_tipo_agenda		= 2 and b.ie_situacao			= 'A' and a.hr_inicio between trunc(dt_regra_w) and trunc(dt_regra_w) + 86399/86400 and (a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '') and (((ie_status_agenda_w	= 'N') 		and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
	or	((ie_status_agenda_w	= 'T') 		and coalesce(a.ie_transferido, 'N')	= 'S')
	or	((ie_status_agenda_w	= 'C') 		and a.ie_status_agenda	= 'C')
	or	((ie_status_agenda_w	= 'E') 		and a.ie_status_agenda	= 'E')
	or	((coalesce(ie_status_agenda_w::text, '') = '')	and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))) and ((b.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = '')) and ((not exists (	SELECT	1
							from	log_envio_sms x
							where	x.nr_seq_agenda		= a.nr_sequencia))
	or		((ie_status_agenda_w = 'C') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   	x.dt_envio > a.dt_cancelamento)))
	or		((ie_status_agenda_w = 'E') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   	x.dt_envio > a.dt_executada)))) and (not exists (	select	1
				from	regra_exclusao_agenda_sms x
				where	x.cd_agenda		= a.cd_agenda)) and (a.hr_inicio	=	(	select	min(x.hr_inicio)
						FROM agenda z, agenda_paciente x
LEFT OUTER JOIN proc_interno y ON (x.nr_seq_proc_interno = y.nr_sequencia)
WHERE x.cd_pessoa_fisica	= a.cd_pessoa_fisica and x.cd_agenda = z.cd_agenda  and (x.cd_pessoa_fisica IS NOT NULL AND x.cd_pessoa_fisica::text <> '') and coalesce(y.ie_sms_ageint, 'N')	= 'N' and x.dt_agenda between trunc(dt_regra_w) and trunc(dt_regra_w) + 86399/86400 and ((z.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = '')) and (((ie_status_agenda_w	= 'N') 		and x.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
						or		((ie_status_agenda_w	= 'T') 		and coalesce(x.ie_transferido, 'N')	= 'S')
						or		((ie_status_agenda_w	= 'C') 		and x.ie_status_agenda	= 'C')
						or		((ie_status_agenda_w	= 'E') 		and x.ie_status_agenda	= 'E')
						or		((coalesce(ie_status_agenda_w::text, '') = '')	and x.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF')))	
					 )
	or	coalesce(e.ie_sms_ageint, 'N')	= 'S') and ((ie_tipo_agendamento_w = 'E') or (coalesce(ie_tipo_agendamento_w::text, '') = '')) and ((b.cd_setor_exclusivo = cd_setor_atendimento_w) or (cd_setor_atendimento_w = 0)) and ((a.ie_tipo_atendimento	= ie_tipo_atendimento_w) or (ie_tipo_atendimento_w = 0)) and ((b.cd_agenda = cd_agenda_regra_w) or (coalesce(cd_agenda_regra_w::text, '') = '')) order by 1,2;	

C05 CURSOR FOR
	/*AGENDA DE QUIMIOTERAPIA*/
	
	SELECT	distinct
			substr(obter_primeiro_nome(obter_nome_pf(a.cd_pessoa_fisica)),1,255),
			to_char(a.dt_agenda, 'dd/mm/yyyy hh24:mi'),		
			substr(coalesce(qt_obter_dados_pendencia(a.nr_seq_pend_agenda,'DPM',null),qt_obter_desc_prot_reserva(a.cd_protocolo, a.nr_seq_medicacao)),1,255),		
			a.nr_sequencia,
			a.cd_pessoa_fisica,
			b.nr_sequencia,
			coalesce(d.nr_seq_estagio, 0),
			e.nr_seq_agenda_int,
			wheb_mensagem_pck.get_texto(793302),
			substr(obter_desc_local_qt(b.nr_sequencia, 'L'),1,255),
			substr(Obter_ds_turno(qt_obter_turno_horario(a.nr_seq_local,a.dt_agenda)),1,60),
			to_char(a.dt_agenda, 'dd/mm')
	FROM qt_local b, agenda_quimio a
LEFT OUTER JOIN paciente_atendimento c ON (a.nr_seq_atendimento = c.nr_seq_atendimento)
LEFT OUTER JOIN agenda_integrada_item e ON (a.nr_sequencia = e.nr_seq_agequi)
LEFT OUTER JOIN autorizacao_convenio d ON (c.nr_seq_atendimento = d.nr_seq_paciente)
WHERE a.nr_seq_local		= b.nr_sequencia    and b.ie_situacao			= 'A' and a.dt_agenda 		between trunc(dt_regra_w) and trunc(dt_regra_w) + 86399/86400 and (a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '') and (((ie_status_agenda_w	= 'N') 		and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
	or		(ie_status_agenda_w	= 'T' AND c.dt_solic_transf IS NOT NULL AND c.dt_solic_transf::text <> '')
	or		((ie_status_agenda_w	= 'C') 		and a.ie_status_agenda	= 'C')
	or		((ie_status_agenda_w	= 'E') 		and a.ie_status_agenda	= 'E')
	or		((coalesce(ie_status_agenda_w::text, '') = '')	and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))) and ((b.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = '')) and ((not exists (	SELECT	1
							from	log_envio_sms x
							where	x.nr_seq_agenda		= a.nr_sequencia))
	or		((ie_status_agenda_w = 'C') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   	x.dt_envio > a.dt_cancelada)))
	or		((ie_status_agenda_w = 'E') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   	x.dt_envio > a.dt_executada)))) and ((ie_tipo_agendamento_w = 'Q') or (coalesce(ie_tipo_agendamento_w::text, '') = '')) and ((b.cd_setor_atendimento = cd_setor_atendimento_w) or (cd_setor_atendimento_w = 0)) and ((b.nr_sequencia = cd_agenda_regra_w) or (coalesce(cd_agenda_regra_w::text, '') = '')) order by 	1,
				2;		
				
C06 CURSOR FOR
	/*ESTAGIO DE AUTORIZACAO QUE NAO DEVE GERAR ENVIO DE SMS(REGRA SHIFT + F11)*/

	SELECT	a.ie_interno			
	from	regra_envio_sms_estagio a
	order by 	1;				
	
C07 CURSOR FOR
	/*AGENDA INTEGRADA, UTILIZADO NOS CASOS EM QUE O AGENDAMENTO POSSUI MAIS DE 1 EXAME COM ESTAGIO DE AUT. AGENDADO - ITENS DO AGENDAMENTO(AGENDA_INTEGRADA_ITEM)*/
	
	SELECT	distinct			
			obter_estagio_autor_ageint(d.nr_seq_agenda_int, null, d.nr_seq_agenda_exame, 'C')			
	FROM agenda b, agenda_paciente a
LEFT OUTER JOIN autorizacao_convenio c ON (a.nr_sequencia = c.nr_seq_agenda)
LEFT OUTER JOIN agenda_integrada_item d ON (a.nr_sequencia = d.nr_seq_agenda_exame)
LEFT OUTER JOIN proc_interno e ON (d.nr_seq_proc_interno = e.nr_sequencia)
WHERE a.cd_agenda				= b.cd_agenda    and b.cd_tipo_agenda		= 2 and b.ie_situacao			= 'A' and a.hr_inicio between trunc(dt_regra_w) and trunc(dt_regra_w) + 86399/86400 and (a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '') and (((ie_status_agenda_w	= 'N') 		and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
	or		((ie_status_agenda_w	= 'T') 		and coalesce(a.ie_transferido, 'N')	= 'S')
	or		((ie_status_agenda_w	= 'C') 		and a.ie_status_agenda	= 'C')
	or		((ie_status_agenda_w	= 'E') 		and a.ie_status_agenda	= 'E')
	or		((coalesce(ie_status_agenda_w::text, '') = '')	and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))) and ((b.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = '')) and ((not exists (	SELECT	1
							from	log_envio_sms x
							where	x.nr_seq_agenda		= a.nr_sequencia))
	or		((ie_status_agenda_w = 'C') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   x.dt_envio > a.dt_cancelamento)))
	or		((ie_status_agenda_w = 'E') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   x.dt_envio > a.dt_executada)))) and (not exists (	select	1
							from	regra_exclusao_agenda_sms x
							where	x.cd_agenda		= a.cd_agenda)) and (a.hr_inicio	=		(	select	min(x.hr_inicio)
										FROM agenda_paciente x
LEFT OUTER JOIN proc_interno y ON (x.nr_seq_proc_interno = y.nr_sequencia)
WHERE x.cd_pessoa_fisica	= a.cd_pessoa_fisica  and (x.cd_pessoa_fisica IS NOT NULL AND x.cd_pessoa_fisica::text <> '') and coalesce(y.ie_sms_ageint, 'N')	= 'N' and x.dt_agenda between trunc(dt_regra_w) and trunc(dt_regra_w) + 86399/86400 and (((ie_status_agenda_w	= 'N') 		and x.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
										or		((ie_status_agenda_w	= 'T') 		and coalesce(x.ie_transferido, 'N')	= 'S')
										or		((ie_status_agenda_w	= 'C') 		and x.ie_status_agenda	= 'C')
										or		((ie_status_agenda_w	= 'E') 		and x.ie_status_agenda	= 'E')
										or		((coalesce(ie_status_agenda_w::text, '') = '')	and x.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF')))	
									 )
	or		coalesce(e.ie_sms_ageint, 'N')	= 'S') and ((ie_tipo_agendamento_w = 'E') or (coalesce(ie_tipo_agendamento_w::text, '') = '')) and ((b.cd_setor_exclusivo = cd_setor_atendimento_w) or (cd_setor_atendimento_w = 0)) and d.nr_seq_agenda_int	= nr_seq_agenda_int_w order by 	1;

-- AGENDA CIRURGICA
c08 CURSOR FOR
	SELECT	distinct
		substr(obter_primeiro_nome(coalesce(obter_nome_pf(a.cd_pessoa_fisica), a.nm_paciente)),1,255),
		to_char(a.hr_inicio, 'dd/mm/yyyy hh24:mi'),		
		substr(obter_exame_agenda(a.cd_procedimento, a.ie_origem_proced, a.nr_seq_proc_interno),1,240),
		a.nr_sequencia,
		a.cd_pessoa_fisica,
		b.cd_agenda,
		wheb_mensagem_pck.get_texto(793303),
		substr(obter_nome_medico(a.cd_medico,'N'),1,60),
		substr(obter_nome_medico(a.cd_medico,'NCD'),1,60),
		substr(obter_primeiro_nome(obter_nome_medico(a.cd_medico,'NCD')),1,60),
		substr(obter_desc_agenda(b.cd_agenda),1,255),
		obter_estagio_autor_agepac(nr_sequencia,'C'),
		substr(Obter_ds_turno(a.cd_turno),1,60),
		to_char(a.hr_inicio, 'dd/mm')
	from	agenda_paciente a,
		agenda b
	where	a.cd_agenda		= b.cd_agenda
	and	b.cd_tipo_agenda	= 1
	and	b.ie_situacao		= 'A'
	and	a.hr_inicio between trunc(dt_regra_w) and trunc(dt_regra_w) + 86399/86400
	and	(a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '')
	and	(((ie_status_agenda_w	= 'N') 		and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
	or	(ie_status_agenda_w	= 'T' AND a.dt_copia_trans IS NOT NULL AND a.dt_copia_trans::text <> '')
	or	((ie_status_agenda_w	= 'C') 		and a.ie_status_agenda	= 'C')
	or	((ie_status_agenda_w	= 'E') 		and a.ie_status_agenda	= 'E')
	or	((coalesce(ie_status_agenda_w::text, '') = '')	and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF')))
	and	((b.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = ''))	
	and		((not exists (	SELECT	1
							from	log_envio_sms x
							where	x.nr_seq_agenda		= a.nr_sequencia))
	or		((ie_status_agenda_w = 'C') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   x.dt_envio > a.dt_cancelamento)))
	or		((ie_status_agenda_w = 'E') and (not exists (	select	1
										from	log_envio_sms x
										where	x.nr_seq_agenda		= a.nr_sequencia
              									and   x.dt_envio > a.dt_executada))))
	and (not exists (	select	1
				from	regra_exclusao_agenda_sms x
				where	x.cd_agenda		= a.cd_agenda))
	and	((b.cd_setor_exclusivo = cd_setor_atendimento_w) or (cd_setor_atendimento_w = 0))
	and	((a.ie_tipo_atendimento	= ie_tipo_atendimento_w) or (ie_tipo_atendimento_w = 0))
	and	((ie_tipo_agendamento_w = 'CI') or (coalesce(ie_tipo_agendamento_w::text, '') = ''))
	and	((b.cd_agenda = cd_agenda_regra_w) or (coalesce(cd_agenda_regra_w::text, '') = ''))
   	and (obter_regra_sms_medico(nr_seq_regra_w,a.cd_medico) = 'N');
	
C09 CURSOR FOR
	SELECT	ie_classif_agenda
	from	envio_sms_classif_agenda
	where	coalesce(ie_situacao,'A') = 'A'
	order by 1;
	
	
procedure  obter_telefone is
;
BEGIN
		
	select	distinct
			max(nr_ddi_celular),
			max(nr_ddd_celular),
			max(nr_telefone_celular)
	into STRICT	nr_ddi_celular_w,
			nr_ddd_celular_w,
			nr_telefone_w
	from	pessoa_fisica 	
	where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
			
	if (ie_utiliza_dddSMS_w = 'S') then 		
		nr_telefone_w := nr_ddd_celular_w || nr_telefone_w;
	end if;
	
	if (ds_esconder_ddi_w <> 'S') then
		nr_telefone_w := nr_ddi_celular_w || nr_telefone_w;
	end if;
	
    end;

begin

if coalesce(philips_param_pck.get_nr_seq_idioma::text, '') = '' then
	CALL philips_param_pck.set_nr_seq_idioma(OBTER_NR_SEQ_IDIOMA('Tasy'));
end if;

ie_utiliza_dddSMS_w := OBTER_PARAM_USUARIO(821, 324, obter_perfil_ativo, obter_usuario_ativo, obter_estabelecimento_ativo, ie_utiliza_dddSMS_w);
ie_enviar_se_classif_regra_w := OBTER_PARAM_USUARIO(821, 442, obter_perfil_ativo, obter_usuario_ativo, obter_estabelecimento_ativo, ie_enviar_se_classif_regra_w);

open C01;
loop
fetch C01 into	
	nr_seq_regra_w,
	dt_envio_w,
	nr_dia_envio_w,
	ds_mensagem_regra_w,
	dt_inicial_w,
	dt_final_w,
	cd_estabelecimento_w,
	cd_estabelecimento_ww,
	ie_status_agenda_w,
	ie_tipo_agendamento_w,
	cd_setor_atendimento_w,
	nm_usuario_envio_w,
	ie_tipo_atendimento_w,
	cd_agenda_regra_w,
	ie_classif_agenda_cons_w;
EXIT WHEN NOT FOUND; /* apply on C01 */

	begin	

	CALL wheb_usuario_pck.set_cd_estabelecimento(cd_estabelecimento_w);

	ds_esconder_ddi_w := OBTER_VALOR_PARAM_USUARIO(0,214,0,coalesce(nm_usuario_envio_w, obter_usuario_ativo),obter_estabelecimento_ativo);
	
	if (dt_envio_w IS NOT NULL AND dt_envio_w::text <> '') then
		dt_envio_w := to_date(to_char(clock_timestamp(),'dd/mm/yyyy')||' '||to_char(dt_envio_w,'hh24:mi')||':00','dd/mm/yyyy hh24:mi:ss');
	end if;	
	dt_regra_w	:= trunc(clock_timestamp() + nr_dia_envio_w);	

	if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') and
		(((to_date(to_char(clock_timestamp(),'dd/mm/yyyy hh24:mi')||':00','dd/mm/yyyy hh24:mi:ss')	= dt_envio_w) or (coalesce(dt_envio_w::text, '') = '')) and
		((clock_timestamp() >= to_Date(to_char(clock_timestamp(),'dd/mm/yyyy ')||to_char(dt_inicial_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss')) or (coalesce(dt_inicial_w::text, '') = '')) and (clock_timestamp() <= to_Date(to_char(clock_timestamp(),'dd/mm/yyyy ')||to_char(dt_final_w,'hh24:mi:ss'),'dd/mm/yyyy hh24:mi:ss') or coalesce(dt_final_w::text, '') = '')) then						

		/*AGENDA DE CONSULTAS*/

		open C02;
		loop
		fetch C02 into	
			nm_paciente_w,
			dt_agenda_w,
			ds_item_agenda_w,
			nr_sequencia_w,
			cd_pessoa_fisica_w,
			cd_agenda_w,
			nr_seq_estagio_aut_w,
			nr_seq_agenda_int_w,
			ds_especialidade_w,
			nm_medico_req_w,
			nm_medico_agenda_w,
			nm_medico_req_crm_w,
			nm_medico_resumido_w,
			ds_agenda_w,
			ds_turno_w,
			ds_dia_mes_w,
			ie_classif_agenda_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin		

			ie_enviar_w	:= 'S';
			
			ds_mensagem_sms_w		:= ds_mensagem_regra_w;						
			nr_tamanho_mensagem_w	:= 0;
			/* 
			ds_erro_w = E(Erro)
			ds_erro_w = S(Sucesso)	
			*/
			ds_erro_w			:= 'S';
			ds_estagio_aut_w	:= '';
			if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then				
				obter_telefone;

				select	max(substr(coalesce(ds_remetente_sms, obter_nome_estabelecimento(cd_estabelecimento_ww)),1,255))
				into STRICT	ds_remetente_sms_w
				from	parametro_agenda	
				where	cd_estabelecimento	= cd_estabelecimento_ww;
				
				if (nr_telefone_w IS NOT NULL AND nr_telefone_w::text <> '') then
					begin					
					select	min(a.hr_inicio)
					into STRICT	dt_min_exame_w
					from	agenda_paciente a
					where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	trunc(a.hr_inicio)	= trunc(clock_timestamp() + nr_dia_envio_w)
					and	a.ie_status_agenda	not in ('C', 'B', 'L');
					
					select	min(a.dt_agenda)
					into STRICT	dt_min_consulta_w
					from	agenda_consulta a
					where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and	trunc(a.dt_agenda)	= trunc(clock_timestamp() + nr_dia_envio_w)
					and	a.ie_status_agenda	not in ('C', 'B', 'L');
					
					
					if (dt_min_exame_w IS NOT NULL AND dt_min_exame_w::text <> '') and (dt_min_consulta_w IS NOT NULL AND dt_min_consulta_w::text <> '') then
						if (dt_min_exame_w	< dt_min_consulta_w) then
							dt_primeiro_hor_w	:= to_char(dt_min_exame_w, 'dd/mm/yyyy hh24:mi');
						else
							dt_primeiro_hor_w	:= to_char(dt_min_consulta_w, 'dd/mm/yyyy hh24:mi');
						end if;
					elsif (coalesce(dt_min_exame_w::text, '') = '') then
							dt_primeiro_hor_w	:= to_char(dt_min_consulta_w, 'dd/mm/yyyy hh24:mi');
					elsif (coalesce(dt_min_consulta_w::text, '') = '') then
							dt_primeiro_hor_w	:= to_char(dt_min_exame_w, 'dd/mm/yyyy hh24:mi');
					end if;	
					
					select	max(nr_seq_agenda_int)							
					into STRICT	nr_seq_ageint_w							
					from	agenda_integrada_item
					where	nr_seq_agenda_cons = nr_sequencia_w;
					
					select	to_char(min(x.dt_agenda), 'hh24:mi')
					into STRICT 	dt_menor_hor_w
					from	agenda_consulta x
					where	x.cd_agenda = cd_agenda_w
					--and 	x.cd_pessoa_fisica = cd_pessoa_fisica_w					
					and 	x.dt_agenda between trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi')) and (trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi'))+86399/86400)
					and	coalesce(x.IE_ENCAIXE, 'N') = 'N'
					and	x.ie_status_agenda	not in ('C', 'B');
					
					nr_seq_ageint_ww	:= nr_seq_ageint_w;
					
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@paciente', nm_paciente_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@protocoloagenda', nr_seq_ageint_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@horario', dt_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@item', ds_item_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@primeiro_horario', dt_primeiro_hor_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@estab', ds_remetente_sms_w),1,2000);					
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@especialidade', ds_especialidade_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_req', nm_medico_req_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_req_crm', nm_medico_req_crm_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_agenda', nm_medico_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_exec', ''),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_exec_crm', ''),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@protocolo_consulta', nr_sequencia_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@primeiro_nome_medico', nm_medico_resumido_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@agenda', ds_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@turno', ds_turno_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@dt_dia_mes', ds_dia_mes_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@prim_hora_dia', dt_menor_hor_w),1,2000);
					
					if (ie_enviar_se_classif_regra_w = 'S')then
						ie_enviar_w	:= 'N';
			
						open C09;
						loop
						fetch C09 into	
							ie_classif_agenda_regra_w;
						EXIT WHEN NOT FOUND; /* apply on C09 */
							begin
							if (ie_classif_agenda_w = ie_classif_agenda_regra_w) and (ie_enviar_w = 'N') then
								ie_enviar_w	:= 'S';
							end if;
								
							end;
						end loop;
						close C09;
				
					end if;
					
					if (ie_enviar_w = 'S') then
						ie_enviar_w := coalesce(obter_se_classif_envia_sms(cd_estabelecimento_w, ie_classif_agenda_regra_w), 'S');
					end if;
					
					--Obter a qtd. total de caracteres a serem enviados na mensagem
					select	length(ds_mensagem_sms_w)
					into STRICT	nr_tamanho_mensagem_w
					;
					
					
					--NECESSARIO BUSCAR O ESTAGIO AUT. DO AGENDAMENTO, PARA UTILIZAR NA CONSISTENCIA DA MENSAGEM DE LOG DO SMS QUE SERA GRAVADA NA LOG_ENVIO_SMS
					select	coalesce(max(a.ie_interno), null),
							coalesce(max(a.ds_estagio), null)
					into STRICT	ie_interno_w,
							ds_estagio_aut_w
					from	estagio_autorizacao a
					where	a.nr_sequencia = nr_seq_estagio_aut_w
					and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = a.cd_empresa;

					if (nr_seq_estagio_aut_w IS NOT NULL AND nr_seq_estagio_aut_w::text <> '')then
						begin
					
						--ESTAGIO DE AUTORIZACAO QUE NAO DEVE GERAR ENVIO DE SMS(REGRA SHIFT + F11)
						open C06;
						loop
						fetch C06 into	
							ie_interno_regra_w;
						EXIT WHEN NOT FOUND; /* apply on C06 */
							begin
							
							if (ie_interno_w = ie_interno_regra_w) and (ds_erro_w = 'S')then
								ds_erro_w	:= 'E';							
							elsif (ie_interno_w <> ie_interno_regra_w) and (ds_erro_w = 'S') then
									ds_erro_w	:= 'S';
							end if;
							
							end;													
						end loop;
						close C06;
						
						--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS
						if (ds_erro_w = 'S') and (ie_enviar_w <> 'N') then 	
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w, 1, nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);						
						end if;						
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						end;
							
					else
						begin	
						--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS
						if (ds_erro_w = 'S') or (coalesce(nr_seq_estagio_aut_w::text, '') = '') and (ie_enviar_w <> 'N') then
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w, 1, nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);							
						end if;							
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						end;
					end if;							
					end;					
				else
					ds_erro_w	:= 'E';
				end if;
				
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;
					
					ds_log_sms_w		:= '';					
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(nr_telefone_w::text, '') = '') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					else
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;
					
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(), 
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						ds_log_sms_w,
						0,
						nr_seq_agenda_int_w);
				end if;						
			
			
			end if;				
			
			exception
			when others then
				begin
				
				ds_erro_w	:= 'E';
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;
					
					ds_log_sms_w		:= '';					
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(nr_telefone_w::text, '') = '') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					else
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;
					
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(), 
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						ds_log_sms_w,
						0,
						nr_seq_agenda_int_w);
				end if;					
				
				end;				
			
			end;
		end loop;
		close C02;	
		
		/*AGENDA DE SERVICOS*/

		open C03;
		loop
		fetch C03 into	
			nm_paciente_w,
			dt_agenda_w,				
			ds_item_agenda_w,
			nr_sequencia_w,
			cd_pessoa_fisica_w,
			cd_agenda_w,
			nr_seq_estagio_aut_w,
			ie_sms_Ageint_w,
			nr_seq_agenda_int_w,
			ds_especialidade_w,
			nm_medico_req_w,
			nm_medico_exec_w,
			nm_medico_req_crm_w,
			nm_medico_exec_crm_w,
			nm_medico_resumido_w,
			ds_agenda_w,
			ds_turno_w,
			ds_dia_mes_w,
			ds_classif_proc_w;
		EXIT WHEN NOT FOUND; /* apply on C03 */
			begin
			ds_mensagem_sms_w		:= ds_mensagem_regra_w;
			nr_tamanho_mensagem_w	:= 0;
			/* 			
			ds_erro_w = E(Erro)
			ds_erro_w = S(Sucesso)				
			*/
			ds_erro_w			:= 'S';
			ds_estagio_aut_w	:= '';
			if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '')then
				
				obter_telefone;
				
				select	max(substr(coalesce(ds_remetente_sms, obter_nome_estabelecimento(cd_estabelecimento_ww)),1,255))
				into STRICT	ds_remetente_sms_w
				from	parametro_agenda	
				where	cd_estabelecimento	= cd_estabelecimento_ww;
				
				if (nr_telefone_w IS NOT NULL AND nr_telefone_w::text <> '') and (ie_sms_Ageint_w	= 'N') then
					begin
					
					select	min(a.hr_inicio)
					into STRICT	dt_min_exame_w
					from	agenda_paciente a
					where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		trunc(a.hr_inicio)	= trunc(clock_timestamp() + nr_dia_envio_w)
					and		a.ie_status_agenda	not in ('C', 'B', 'L');
					
					select	min(a.dt_agenda)
					into STRICT	dt_min_consulta_w
					from	agenda_consulta a
					where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		trunc(a.dt_agenda)	= trunc(clock_timestamp() + nr_dia_envio_w)
					and		a.ie_status_agenda	not in ('C', 'B', 'L');
					
					
					if (dt_min_exame_w IS NOT NULL AND dt_min_exame_w::text <> '') and (dt_min_consulta_w IS NOT NULL AND dt_min_consulta_w::text <> '') then
						if (dt_min_exame_w	< dt_min_consulta_w) then
							dt_primeiro_hor_w	:= to_char(dt_min_exame_w, 'dd/mm/yyyy hh24:mi');
						else
							dt_primeiro_hor_w	:= to_char(dt_min_consulta_w, 'dd/mm/yyyy hh24:mi');
						end if;
					elsif (coalesce(dt_min_exame_w::text, '') = '') then
							dt_primeiro_hor_w	:= to_char(dt_min_consulta_w, 'dd/mm/yyyy hh24:mi');
					elsif (coalesce(dt_min_consulta_w::text, '') = '') then
							dt_primeiro_hor_w	:= to_char(dt_min_exame_w, 'dd/mm/yyyy hh24:mi');
					end if;				
					
					select	max(nr_seq_agenda_int)
					into STRICT	nr_seq_ageint_w
					from	agenda_integrada_item
					where	nr_seq_agenda_cons = nr_sequencia_w;
					
					select	to_char(min(x.dt_agenda), 'hh24:mi')
					into STRICT 	dt_menor_hor_w
					from	agenda_consulta x
					where	x.cd_agenda = cd_agenda_w
					--and 	x.cd_pessoa_fisica = cd_pessoa_fisica_w
					and 	x.dt_agenda between trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi')) and (trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi'))+86399/86400)
					and	coalesce(x.IE_ENCAIXE, 'N') = 'N'
					and	x.ie_status_agenda	not in ('C', 'B');
					
					nr_seq_ageint_ww	:= nr_seq_ageint_w;
					
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@paciente', nm_paciente_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@protocoloagenda', nr_seq_ageint_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@horario', dt_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@item', ds_item_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@primeiro_horario', dt_primeiro_hor_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@estab', ds_remetente_sms_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@especialidade', ds_especialidade_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_req', nm_medico_req_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_req_crm', nm_medico_req_crm_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_exec', nm_medico_exec_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_exec_crm', nm_medico_exec_crm_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@primeiro_nome_medico', nm_medico_resumido_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@agenda', ds_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@turno', ds_turno_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@dt_dia_mes', ds_dia_mes_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@prim_hora_dia', dt_menor_hor_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@CLASSIF_PROC', ds_classif_proc_w),1,2000);
					
					--Obter a qtd. total de caracteres a serem enviados na mensagem
					select	length(ds_mensagem_sms_w)
					into STRICT	nr_tamanho_mensagem_w
					;
					
					--NECESSARIO BUSCAR O ESTAGIO AUT. DO AGENDAMENTO, PARA UTILIZAR NA CONSISTENCIA DA MENSAGEM DE LOG DO SMS QUE SERA GRAVADA NA LOG_ENVIO_SMS
					select	coalesce(max(a.ie_interno), null),
							coalesce(max(a.ds_estagio), null)
					into STRICT	ie_interno_w,
							ds_estagio_aut_w
					from	estagio_autorizacao a
					where	a.nr_sequencia = nr_seq_estagio_aut_w
					and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = a.cd_empresa;
					
					if (nr_seq_estagio_aut_w IS NOT NULL AND nr_seq_estagio_aut_w::text <> '')then
						begin
						--ESTAGIO DE AUTORIZACAO QUE NAO DEVE GERAR ENVIO DE SMS(REGRA SHIFT + F11)
						open C06;
						loop
						fetch C06 into	
							ie_interno_regra_w;
						EXIT WHEN NOT FOUND; /* apply on C06 */
							begin
							
							if (ie_interno_w = ie_interno_regra_w) and (ds_erro_w = 'S')then
								ds_erro_w	:= 'E';								
							elsif (ie_interno_w <> ie_interno_regra_w) and (ds_erro_w = 'S') then
									ds_erro_w	:= 'S';
							end if;
								
							end;													
						end loop;
						close C06;
						
						--SO#2039324, Added to check if patient is opted out of SMS for Australia
						ie_receive_sms_w := verify_send_sms(nr_telefone_w, cd_pessoa_fisica_w, cd_agenda_w, nr_sequencia_w, ie_receive_sms_w);
						
						
						--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS
						if (ds_erro_w = 'S' and ie_receive_sms_w = 'S') then 	
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w, 1, nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);						
						end if;						
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						end;						
					else
						begin							
						--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS

						
						--SO#2039324, Added to check if patient is opted out of SMS for Australia
						ie_receive_sms_w := verify_send_sms(nr_telefone_w, cd_pessoa_fisica_w, cd_agenda_w, nr_sequencia_w, ie_receive_sms_w);
						
						if	(((ds_erro_w = 'S') or (coalesce(nr_seq_estagio_aut_w::text, '') = '')) and ie_receive_sms_w = 'S') then 	
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w, 1, nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);							
						end if;							
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						end;
					end if;						
					end;					
				else
					ds_erro_w	:= 'E';
				end if;
				
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;
					
					ds_log_sms_w			:= '';
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(nr_telefone_w::text, '') = '') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					else
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;
					
					if (ie_sms_Ageint_w	= 'S') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793308);
					end if;				
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(), 
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						ds_log_sms_w,
						0,
						nr_seq_agenda_int_w);
						
				end if;


			end if;				
			
			exception
			when others then
				begin
				ds_erro_w	:= 'E';
				
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;
					
					ds_log_sms_w			:= '';
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(nr_telefone_w::text, '') = '') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					else
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;
					
					if (ie_sms_Ageint_w	= 'S') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793308);
					end if;				
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(), 
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						ds_log_sms_w,
						0,
						nr_seq_agenda_int_w);
						
				end if;
				
				end;			
			end;
		end loop;
		close C03;		
		
		
		/*AGENDA DE EXAMES*/
	
		open C04;
		loop
		fetch C04 into
			nm_paciente_w,
			dt_agenda_w,				
			ds_item_agenda_w,
			nr_sequencia_w,
			cd_pessoa_fisica_w,
			cd_agenda_w,
			nr_seq_estagio_aut_w,
			ie_sms_Ageint_w,
			nr_seq_agenda_int_w,
			ds_especialidade_w,
			nm_medico_req_w,
			nm_medico_exec_w,
			nm_medico_req_crm_w,
			nm_medico_exec_crm_w,
			nm_medico_resumido_w,
			ds_setor_atendimento_w,
			ds_agenda_w,
			ds_turno_w,
			ds_dia_mes_w,
			ds_classif_proc_w;
		EXIT WHEN NOT FOUND; /* apply on C04 */
			begin
			
			ds_mensagem_sms_w		:= ds_mensagem_regra_w;
			nr_tamanho_mensagem_w	:= 0;
			/* 			
			ds_erro_w = E(Erro)
			ds_erro_w = S(Sucesso)				
			*/
			ds_erro_w					:= 'S';
			ds_estagio_aut_w			:= '';
			qt_exames_autorizados_w		:= 0;			
			
			if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then
				obter_telefone;
				
				select	max(substr(coalesce(ds_remetente_sms, obter_nome_estabelecimento(cd_estabelecimento_ww)),1,255))
				into STRICT	ds_remetente_sms_w
				from	parametro_agenda	
				where	cd_estabelecimento	= cd_estabelecimento_ww;
				
				if (nr_telefone_w IS NOT NULL AND nr_telefone_w::text <> '') and (ie_sms_Ageint_w	= 'N') then
					begin
					select	min(a.hr_inicio)
					into STRICT	dt_min_exame_w
					from	agenda_paciente a
					where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		trunc(a.hr_inicio)	= trunc(clock_timestamp() + nr_dia_envio_w)
					and		a.ie_status_agenda	not in ('C', 'B', 'L');
					
					select	min(a.dt_agenda)
					into STRICT	dt_min_consulta_w
					from	agenda_consulta a
					where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		trunc(a.dt_agenda)	= trunc(clock_timestamp() + nr_dia_envio_w)
					and		a.ie_status_agenda	not in ('C', 'B', 'L');

					if (dt_min_exame_w IS NOT NULL AND dt_min_exame_w::text <> '') and (dt_min_consulta_w IS NOT NULL AND dt_min_consulta_w::text <> '') then
						if (dt_min_exame_w	< dt_min_consulta_w) then
							dt_primeiro_hor_w	:= to_char(dt_min_exame_w, 'dd/mm/yyyy hh24:mi');
						else
							dt_primeiro_hor_w	:= to_char(dt_min_consulta_w, 'dd/mm/yyyy hh24:mi');
						end if;
					elsif (coalesce(dt_min_exame_w::text, '') = '') then
							dt_primeiro_hor_w	:= to_char(dt_min_consulta_w, 'dd/mm/yyyy hh24:mi');
					elsif (coalesce(dt_min_consulta_w::text, '') = '') then
							dt_primeiro_hor_w	:= to_char(dt_min_exame_w, 'dd/mm/yyyy hh24:mi');
					end if;				
					
					select	max(nr_seq_agenda_int)
					into STRICT	nr_seq_ageint_w
					from	agenda_integrada_item
					where	nr_seq_agenda_exame = nr_sequencia_w;
					
					select	to_char(min(x.hr_inicio), 'hh24:mi')
					into STRICT 	dt_menor_hor_w
					from	agenda_paciente x
					where	x.cd_agenda = cd_agenda_w
					--and 	x.cd_pessoa_fisica = cd_pessoa_fisica_w
					and 	x.hr_inicio between trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi')) and (trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi'))+86399/86400)
					and	coalesce(x.IE_ENCAIXE, 'N') = 'N'
					and	x.ie_status_agenda	not in ('C', 'B');
					
					nr_seq_ageint_ww	:= nr_seq_ageint_w;
					
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@paciente', nm_paciente_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@protocoloagenda', nr_seq_ageint_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@horario', dt_agenda_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@item', ds_item_agenda_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@primeiro_horario', dt_primeiro_hor_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@estab', ds_remetente_sms_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@especialidade', ds_especialidade_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@medico_req', nm_medico_req_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@medico_req_crm', nm_medico_req_crm_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@medico_exec', nm_medico_exec_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@medico_exec_crm', nm_medico_exec_crm_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@primeiro_nome_medico', nm_medico_resumido_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@setor', ds_setor_atendimento_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@agenda', ds_agenda_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@turno', ds_turno_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@dt_dia_mes', ds_dia_mes_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@prim_hora_dia', dt_menor_hor_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@CLASSIF_PROC', ds_classif_proc_w),1,2000);
					
					--Obter a qtd. total de caracteres a serem enviados na mensagem
					select	length(ds_mensagem_sms_w)
					into STRICT	nr_tamanho_mensagem_w
					;
					
					--NECESSARIO BUSCAR O ESTAGIO AUT. DO AGENDAMENTO, PARA UTILIZAR NA CONSISTENCIA DA MENSAGEM DE LOG DO SMS QUE SERA GRAVADA NA LOG_ENVIO_SMS
					select	coalesce(max(a.ie_interno), null),
							coalesce(max(a.ds_estagio), null)
					into STRICT	ie_interno_w,
							ds_estagio_aut_w
					from	estagio_autorizacao a
					where	a.nr_sequencia = nr_seq_estagio_aut_w
					and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = a.cd_empresa;
					
					/*VERIFICAR SE O PACIENTE POSSUI ALGUM EXAME COM STATUS DE AUTORIZACAO 'REPROVADO'
					SE POSSUIR E EXISTIR OUTRO EXAME AGENDANDO CUJA AUTORIZACAO ESTIVER LIBERADA, NAO IRA ENVIAR O SMS PARA NENHUM AGENDAMENTO DE EXAME*/
					select	max(c.nr_seq_estagio)
					into STRICT 	nr_seq_estag_w
					FROM estagio_autorizacao f, agenda b, agenda_paciente a
LEFT OUTER JOIN autorizacao_convenio c ON (a.nr_sequencia = c.nr_seq_agenda)
LEFT OUTER JOIN agenda_integrada_item d ON (a.nr_sequencia = d.nr_seq_agenda_exame)
LEFT OUTER JOIN proc_interno e ON (d.nr_seq_proc_interno = e.nr_sequencia)
WHERE a.cd_agenda				= b.cd_agenda    and b.cd_tipo_agenda		= 2 and b.ie_situacao			= 'A' and a.hr_inicio between trunc(dt_regra_w) and trunc(dt_regra_w) + 86399/86400 and (a.cd_pessoa_fisica IS NOT NULL AND a.cd_pessoa_fisica::text <> '') and a.cd_pessoa_fisica	= cd_pessoa_fisica_w and (((ie_status_agenda_w	= 'N') 		and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))
					or		((ie_status_agenda_w	= 'T') 		and coalesce(a.ie_transferido, 'N')	= 'S')
					or		((ie_status_agenda_w	= 'C') 		and a.ie_status_agenda	= 'C')
					or		((ie_status_agenda_w	= 'E') 		and a.ie_status_agenda	= 'E')
					or		((coalesce(ie_status_agenda_w::text, '') = '')	and a.ie_status_agenda 	not in ('C', 'L', 'B', 'II', 'F', 'I','E','A','O','LF'))) and ((b.cd_estabelecimento	= cd_estabelecimento_w) or (coalesce(cd_estabelecimento_w::text, '') = '')) and ((ie_tipo_agendamento_w = 'E') or (coalesce(ie_tipo_agendamento_w::text, '') = '')) and ((b.cd_setor_exclusivo = cd_setor_atendimento_w) or (cd_setor_atendimento_w = 0)) and coalesce(e.ie_sms_ageint, 'N')	= 'N' and f.nr_sequencia = c.nr_seq_estagio and f.ie_interno = '90';

					select 	coalesce(count(*), 0)
					into STRICT	qt_aut_repr_pac_w
					from 	estagio_autorizacao
					where 	nr_sequencia = nr_seq_estag_w
					and 	ie_interno = '90'
					and		OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
					
					select	count(*)
					into STRICT	qt_exames_agendados_w
					from	agenda_integrada_item
					where	nr_seq_agenda_int	= nr_seq_agenda_int_w
					and		ie_tipo_agendamento	= 'E';

					--Caso o agendamento nAo tenha sido feito pela Ag. Integrada, considerar o agendamento da agenda de exames de acordo com o nr_sequencia_w
					if (qt_exames_agendados_w = 0)then
						select	count(*)
						into STRICT	qt_exames_agendados_w
						from	agenda_paciente
						where	nr_sequencia = nr_sequencia_w;
					end if;
					
					if (qt_exames_agendados_w > 1) and (nr_seq_estagio_aut_w IS NOT NULL AND nr_seq_estagio_aut_w::text <> '')then
						begin
					
						open C07;
						loop
						fetch C07 into	
							nr_seq_estagio_aut_ww;
						EXIT WHEN NOT FOUND; /* apply on C07 */
							begin
							
							open C06;
							loop
							fetch C06 into	
								ie_interno_regra_w;
							EXIT WHEN NOT FOUND; /* apply on C06 */
								begin
								
								select	coalesce(max(a.ie_interno), null)
								into STRICT	ie_interno_w
								from	estagio_autorizacao a
								where	a.nr_sequencia = nr_seq_estagio_aut_ww
								and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = a.cd_empresa;
								
								if (ie_interno_w = ie_interno_regra_w) and (ds_erro_w = 'S')then
									ds_erro_w					:= 'E';																
									ds_local_erro_w					:= 'c07 c06 - ' || nr_seq_estagio_aut_ww || ' - ' || ie_interno_regra_w;
								elsif (ie_interno_w <> ie_interno_regra_w) and (ds_erro_w = 'S') then
										ds_erro_w					:= 'S';											
								end if;								
								
								end;
							end loop;
							close C06;
							
							end;
						end loop;
						close C07;
						
						if (ds_erro_w = 'S') and (qt_aut_repr_pac_w = 0) then
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w,1,nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);
						end if;
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_local_erro_w			:= wheb_mensagem_pck.get_texto(803394) || ' - ' || ds_remetente_sms_w || ' - ' || nr_telefone_w  || ' - ' || ds_mensagem_sms_w  || ' - ' || nr_tamanho_mensagem_w  || ' - ' || cd_agenda_w  || ' - ' || nr_sequencia_w
							|| ' - ' || nm_usuario_envio_w;
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);						
						end;
					
					end if;
					
					if (nr_seq_estagio_aut_w IS NOT NULL AND nr_seq_estagio_aut_w::text <> '') and (qt_exames_agendados_w = 1)then
						begin						
						--ESTAGIO DE AUTORIZACAO QUE NAO DEVE GERAR ENVIO DE SMS(REGRA SHIFT + F11)
						open C06;
						loop
						fetch C06 into	
							ie_interno_regra_w;
						EXIT WHEN NOT FOUND; /* apply on C06 */
							begin
							
							if (ie_interno_w = ie_interno_regra_w) and (ds_erro_w = 'S')then
								ds_erro_w					:= 'E';
								ds_local_erro_w					:= 'c06 - ' || ie_interno_w || ' - ' || ie_interno_regra_w;
							elsif (ie_interno_w <> ie_interno_regra_w) and (ds_erro_w = 'S') then
									ds_erro_w					:= 'S';									
							end if;
							
							end;							
						end loop;
						close C06;								
						
						--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS
						if (ds_erro_w = 'S') and (qt_aut_repr_pac_w = 0) then
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w,1,nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);						
						end if;
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_local_erro_w			:= wheb_mensagem_pck.get_texto(803393) || ' - '||ds_remetente_sms_w || ' - ' || nr_telefone_w  || ' - ' || ds_mensagem_sms_w  || ' - ' || nr_tamanho_mensagem_w  || ' - ' || cd_agenda_w  || ' - ' || nr_sequencia_w
							|| ' - ' || nm_usuario_envio_w;
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						end;
						
					elsif (coalesce(nr_seq_estagio_aut_w::text, '') = '') and (qt_exames_agendados_w >= 1) then						
							begin						
							--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS
							if	((ds_erro_w = 'S') or (coalesce(nr_seq_estagio_aut_w::text, '') = '')) and (qt_aut_repr_pac_w = 0) then
								CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w,1,nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);						
							end if;
							exception
							when others then
								ds_erro_w			:= 'E';
								ds_local_erro_w			:= wheb_mensagem_pck.get_texto(793318)||' '||wheb_mensagem_pck.get_texto(793415)||' - '||ds_remetente_sms_w || ' - ' || nr_telefone_w  || ' - ' || ds_mensagem_sms_w  || ' - ' || nr_tamanho_mensagem_w  || ' - ' || cd_agenda_w  || ' - ' || nr_sequencia_w
							|| ' - ' || nm_usuario_envio_w;
								ds_erro_outros_w	:= substr(sqlerrm, 1,255);
							end;
					end if;						
					end;				
				else
					ds_erro_w	:= 'E';
					ds_local_erro_w := 'localELSE';
				end if;
				
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;					
					
					ds_log_sms_w		:= '';
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(ds_estagio_aut_w::text, '') = '') and (coalesce(nr_telefone_w::text, '') = '') then
							ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
							ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					elsif (coalesce(ds_estagio_aut_w::text, '') = '') and (nr_telefone_w IS NOT NULL AND nr_telefone_w::text <> '') then
							ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304)||'. '||wheb_mensagem_pck.get_texto(793313);
					else
							ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;
					
					if (ie_sms_Ageint_w	= 'S') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793308);
					end if;
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(), 
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						substr(ds_log_sms_w||' - '||ds_item_agenda_w || ' - ' || ds_local_erro_w,1,2000),
						0,
						nr_seq_agenda_int_w);
				end if;

			end if;
			
			exception
			when others then
				begin
				ds_erro_w	:= 'E';
				ds_local_erro_w := substr('localExcepion '|| sqlerrm , 1,255);
				
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;					
					
					ds_log_sms_w		:= '';
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(ds_estagio_aut_w::text, '') = '') and (coalesce(nr_telefone_w::text, '') = '') then
							ds_log_sms_w	:=  wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
							ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					elsif (coalesce(ds_estagio_aut_w::text, '') = '') and (nr_telefone_w IS NOT NULL AND nr_telefone_w::text <> '') then
							ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304)||'. '||wheb_mensagem_pck.get_texto(793313);
					else
							ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;
					
					if (ie_sms_Ageint_w	= 'S') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793308);
					end if;
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(), 
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						substr(ds_log_sms_w||' - '||ds_item_agenda_w || ' - ' || ds_local_erro_w,1,2000),
						0,
						nr_seq_agenda_int_w);
				end if;
				
				end;
			end;
		end loop;
		close C04;
		
		/*AGENDA DE QUIMIOTERAPIA*/

		open C05;
		loop
		fetch C05 into	
			nm_paciente_w,
			dt_agenda_w,				
			ds_item_agenda_w,
			nr_sequencia_w,
			cd_pessoa_fisica_w,
			cd_agenda_w,
			nr_seq_estagio_aut_w,
			nr_seq_agenda_int_w,
			ds_especialidade_w,
			ds_agenda_w,
			ds_turno_w,
			ds_dia_mes_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin				
			ds_mensagem_sms_w		:= ds_mensagem_regra_w;
			nr_tamanho_mensagem_w	:= 0;
			/* 			
			ds_erro_w = E(Erro)
			ds_erro_w = S(Sucesso)				
			*/
			
			ds_erro_w			:= 'S';
			ds_estagio_aut_w	:= '';
			if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '')then
				
				obter_telefone;
				
				select	max(substr(coalesce(ds_remetente_sms, obter_nome_estabelecimento(cd_estabelecimento_ww)),1,255))
				into STRICT	ds_remetente_sms_w
				from	parametro_agenda	
				where	cd_estabelecimento	= cd_estabelecimento_ww;				
				
				if (nr_telefone_w IS NOT NULL AND nr_telefone_w::text <> '') then
					begin
					
					select	min(a.dt_agenda)
					into STRICT	dt_min_exame_w
					from	agenda_quimio a
					where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		trunc(a.dt_agenda)	= trunc(clock_timestamp() + nr_dia_envio_w)
					and		a.ie_status_agenda	not in ('C', 'B', 'L');
					
					select	min(a.dt_agenda)
					into STRICT	dt_min_consulta_w
					from	agenda_quimio a
					where	a.cd_pessoa_fisica	= cd_pessoa_fisica_w
					and		trunc(a.dt_agenda)	= trunc(clock_timestamp() + nr_dia_envio_w)
					and		a.ie_status_agenda	not in ('C', 'B', 'L');

					if (dt_min_exame_w IS NOT NULL AND dt_min_exame_w::text <> '') and (dt_min_consulta_w IS NOT NULL AND dt_min_consulta_w::text <> '') then
						if (dt_min_exame_w	< dt_min_consulta_w) then
							dt_primeiro_hor_w	:= to_char(dt_min_exame_w, 'dd/mm/yyyy hh24:mi');
						else
							dt_primeiro_hor_w	:= to_char(dt_min_consulta_w, 'dd/mm/yyyy hh24:mi');
						end if;
					elsif (coalesce(dt_min_exame_w::text, '') = '') then
							dt_primeiro_hor_w	:= to_char(dt_min_consulta_w, 'dd/mm/yyyy hh24:mi');
					elsif (coalesce(dt_min_consulta_w::text, '') = '') then
							dt_primeiro_hor_w	:= to_char(dt_min_exame_w, 'dd/mm/yyyy hh24:mi');
					end if;				
					
					select	max(nr_seq_agenda_int)
					into STRICT	nr_seq_ageint_w
					from	agenda_integrada_item										
					where	nr_seq_agequi = nr_sequencia_w;	

					select	to_char(min(x.dt_agenda), 'hh24:mi')
					into STRICT 	dt_menor_hor_w
					from	agenda_quimio x
					where	x.nr_seq_local = cd_agenda_w
					--and 	x.cd_pessoa_fisica = cd_pessoa_fisica_w
					and 	x.dt_agenda between trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi')) and (trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi'))+86399/86400)
					and	coalesce(x.IE_ENCAIXE, 'N') = 'N'
					and	x.ie_status_agenda	not in ('C', 'B');				
					
					nr_seq_ageint_ww	:= nr_seq_ageint_w;
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@paciente', nm_paciente_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@protocoloagenda', nr_seq_ageint_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@horario', dt_agenda_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@item', ds_item_agenda_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@primeiro_horario', dt_primeiro_hor_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@estab', ds_remetente_sms_w),1,2000);					
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@especialidade', ds_especialidade_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@turno', ds_turno_w),1,2000);
					ds_mensagem_sms_w	:= subStr(replace_macro(ds_mensagem_sms_w, '@dt_dia_mes', ds_dia_mes_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@prim_hora_dia', dt_menor_hor_w),1,2000);
					
					--Obter a qtd. total de caracteres a serem enviados na mensagem
					select	length(ds_mensagem_sms_w)
					into STRICT	nr_tamanho_mensagem_w
					;
					
					--NECESSARIO BUSCAR O ESTAGIO AUT. DO AGENDAMENTO, PARA UTILIZAR NA CONSISTENCIA DA MENSAGEM DE LOG DO SMS QUE SERA GRAVADA NA LOG_ENVIO_SMS
					select	coalesce(max(a.ie_interno), null),
							coalesce(max(a.ds_estagio), null)
					into STRICT	ie_interno_w,
							ds_estagio_aut_w
					from	estagio_autorizacao a
					where	a.nr_sequencia = nr_seq_estagio_aut_w
					and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = a.cd_empresa;

					if (nr_seq_estagio_aut_w IS NOT NULL AND nr_seq_estagio_aut_w::text <> '')then
						begin
						--ESTAGIO DE AUTORIZACAO QUE NAO DEVE GERAR ENVIO DE SMS(REGRA SHIFT + F11)
						open C06;
						loop
						fetch C06 into	
							ie_interno_regra_w;
						EXIT WHEN NOT FOUND; /* apply on C06 */
							begin
							
							if (ie_interno_w = ie_interno_regra_w) and (ds_erro_w = 'S')then
								ds_erro_w	:= 'E';								
							elsif (ie_interno_w <> ie_interno_regra_w) and (ds_erro_w = 'S') then
									ds_erro_w	:= 'S';
							end if;
								
							end;						
							
						end loop;
						close C06;
						
						--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS
						if (ds_erro_w = 'S') then
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w,1,nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);
						end if;
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						end;
						
					else
						begin							
						--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS
						if (ds_erro_w = 'S') or (coalesce(nr_seq_estagio_aut_w::text, '') = '')then 	
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w, 1, nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);
						end if;							
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						end;
					end if;						
					end;						
				else
					ds_erro_w	:= 'E';
				end if;
				
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;
					
					ds_log_sms_w		:= '';
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(nr_telefone_w::text, '') = '') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					else
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;					
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(), 	
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						ds_log_sms_w,
						0,
						nr_seq_agenda_int_w);					
				
				end if;

			end if;
			
			exception
			when others then
				begin
				ds_erro_w	:= 'E';
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;
					
					ds_log_sms_w		:= '';
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(nr_telefone_w::text, '') = '') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					else
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;					
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(), 	
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						ds_log_sms_w,
						0,
						nr_seq_agenda_int_w);					
				
					end if;
				
				end;			
			end;
		end loop;
		close C05;		
		
		-- AGENDA CIRURGICA
		open C08;
		loop
		fetch C08 into	
			nm_paciente_w,
			dt_agenda_w,
			ds_item_agenda_w,
			nr_sequencia_w,
			cd_pessoa_fisica_w,
			cd_agenda_w,
			ds_especialidade_w,
			nm_medico_w,
			nm_medico_crm_w,
			nm_medico_resumido_w,
			ds_agenda_w,
			nr_seq_estagio_aut_w,
			ds_turno_w,
			ds_dia_mes_w;
		EXIT WHEN NOT FOUND; /* apply on C08 */
			begin
			ds_mensagem_sms_w	:= ds_mensagem_regra_w;
			nr_tamanho_mensagem_w	:= 0;
			/* 			
			ds_erro_w = E(Erro)
			ds_erro_w = S(Sucesso)				
			*/
			ds_erro_w		:= 'S';
			if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then
				obter_telefone;
				
				select	max(substr(coalesce(ds_remetente_sms, obter_nome_estabelecimento(cd_estabelecimento_ww)),1,255))
				into STRICT	ds_remetente_sms_w
				from	parametro_agenda	
				where	cd_estabelecimento	= cd_estabelecimento_ww;
				
				if (nr_telefone_w IS NOT NULL AND nr_telefone_w::text <> '') then
					select	to_char(min(a.hr_inicio),'dd/mm/yyyy hh24:mi')
					into STRICT	dt_primeiro_hor_w
					from	agenda_paciente a
					where	a.cd_pessoa_fisica		= cd_pessoa_fisica_w
					and	trunc(a.hr_inicio)		= trunc(clock_timestamp() + nr_dia_envio_w)
					and	obter_tipo_agenda(a.cd_agenda) 	= 1	
					and	a.ie_status_agenda		not in ('C', 'B', 'L');
					
					select	to_char(min(x.hr_inicio), 'hh24:mi')
					into STRICT 	dt_menor_hor_w
					from	agenda_paciente x
					where	x.cd_agenda = cd_agenda_w
					--and 	x.cd_pessoa_fisica = cd_pessoa_fisica_w
					and 	x.hr_inicio between trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi')) and (trunc(to_date(dt_agenda_w, 'dd/mm/yyyy hh24:mi'))+86399/86400)
					and	coalesce(x.IE_ENCAIXE, 'N') = 'N'
					and	x.ie_status_agenda	not in ('C', 'B');
					
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@paciente', nm_paciente_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@horario', dt_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@item', ds_item_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@primeiro_horario', dt_primeiro_hor_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@estab', ds_remetente_sms_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@especialidade', ds_especialidade_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_req', nm_medico_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@medico_req_crm', nm_medico_crm_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@primeiro_nome_medico', nm_medico_resumido_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@agenda', ds_agenda_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@turno', ds_turno_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@dt_dia_mes', ds_dia_mes_w),1,2000);
					ds_mensagem_sms_w	:= substr(replace_macro(ds_mensagem_sms_w, '@prim_hora_dia', dt_menor_hor_w),1,2000);
					
					--Obter a qtd. total de caracteres a serem enviados na mensagem
					select	length(ds_mensagem_sms_w)
					into STRICT	nr_tamanho_mensagem_w
					;
					
					select	coalesce(max(a.ie_interno), null),
						coalesce(max(a.ds_estagio), null)
					into STRICT	ie_interno_w,
						ds_estagio_aut_w
					from	estagio_autorizacao a
					where	a.nr_sequencia = nr_seq_estagio_aut_w
					and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = a.cd_empresa;
					
					if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '')then
						begin
						--ESTAGIO DE AUTORIZACAO QUE NAO DEVE GERAR ENVIO DE SMS(REGRA SHIFT + F11)
						open C06;
						loop
						fetch C06 into	
							ie_interno_regra_w;
						EXIT WHEN NOT FOUND; /* apply on C06 */
							begin
							
							if (ie_interno_w = ie_interno_regra_w) and (ds_erro_w = 'S')then
								ds_erro_w	:= 'E';								
							elsif (ie_interno_w <> ie_interno_regra_w) and (ds_erro_w = 'S') then
								ds_erro_w	:= 'S';
							end if;
								
							end;													
						end loop;
						close C06;
						
						--SO#2039324, Added to check if patient is opted out of SMS for Australia
						ie_receive_sms_w := verify_send_sms(nr_telefone_w, cd_pessoa_fisica_w, cd_agenda_w, nr_sequencia_w, ie_receive_sms_w);
						
						--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS
						if (ds_erro_w = 'S' and ie_receive_sms_w = 'S') then 	
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w, 1, nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);						
						end if;						
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						end;						
					else
						begin	
							
						--SO#2039324, Added to check if patient is opted out of SMS for Australia
						ie_receive_sms_w := verify_send_sms(nr_telefone_w, cd_pessoa_fisica_w, cd_agenda_w, nr_sequencia_w, ie_receive_sms_w);
						
						--SE NAO FOR REPROVADA/NECESS. DE AUTORIZACAO OU NAO POSSUIR NECESSIDADE DE AUTORIZACAO, ENVIA A MENSAGEM SMS
						if	(((ds_erro_w = 'S') or (coalesce(nr_seq_estagio_aut_w::text, '') = '')) and ie_receive_sms_w = 'S') then 	
							CALL enviar_sms_ageint(ds_remetente_sms_w, nr_telefone_w, substr(ds_mensagem_sms_w, 1, nr_tamanho_mensagem_w), cd_agenda_w, nr_sequencia_w, nm_usuario_envio_w);							
						end if;							
						exception
						when others then
							ds_erro_w			:= 'E';
							ds_erro_outros_w	:= substr(sqlerrm, 1,255);
						end;
					end if;						
				else
					ds_erro_w	:= 'E';
				end if;
				
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;
					
					ds_log_sms_w			:= '';
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(nr_telefone_w::text, '') = '') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					else
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;
					
					if (ie_sms_Ageint_w	= 'S') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793308);
					end if;				
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(), 
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						ds_log_sms_w,
						0,
						null);
						
				end if;
			end if;				
			
			exception
			when others then
				begin
				ds_erro_w	:= 'E';
				
				if (ds_erro_w	= 'E')then
				
					/*gravar log na log_envio_sms caso o paciente nao possuir num de celular no cadastro completo de pessoas*/


					/* id_sms = 0 - Nao enviado*/

					select	nextval('log_envio_sms_seq')
					into STRICT	nr_seq_log_sms_w
					;
					
					ds_log_sms_w			:= '';
					if (ds_estagio_aut_w IS NOT NULL AND ds_estagio_aut_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_estagio_aut_w,1,2000);
					elsif (coalesce(nr_telefone_w::text, '') = '') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793305);
					elsif (ds_erro_outros_w IS NOT NULL AND ds_erro_outros_w::text <> '') then
						ds_log_sms_w	:= substr(wheb_mensagem_pck.get_texto(793304)||'. '||ds_erro_outros_w,1,2000);
					else
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793304);
					end if;
					
					if (ie_sms_Ageint_w	= 'S') then
						ds_log_sms_w	:= wheb_mensagem_pck.get_texto(793308);
					end if;				
					
					insert into log_envio_sms(
						nr_sequencia,
						dt_atualizacao_nrec,
						nm_usuario_nrec,	
						dt_atualizacao,
						nm_usuario,
						dt_envio,
						cd_agenda,
						nr_seq_agenda,
						nr_telefone,
						ds_mensagem,
						id_sms,
						nr_seq_ageint)
					values (
						nr_seq_log_sms_w,
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						'Tasy',
						clock_timestamp(),
						null,
						nr_sequencia_w,
						coalesce(nr_telefone_w, wheb_mensagem_pck.get_texto(793306)),
						ds_log_sms_w,
						0,
						null);
				end if;
				
				end;			
			end;
		end loop;
		close C08;
	end if;
	end;

end loop;
close C01;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enviar_sms_agenda_regra () FROM PUBLIC;

