-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_54_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) AS $body$
DECLARE


_ora2pg_r RECORD;
tb_seq_selecao_w		pls_util_cta_pck.t_number_table;
tb_valido_w			pls_util_cta_pck.t_varchar2_table_1;
tb_observacao_w			pls_util_cta_pck.t_varchar2_table_4000;

qt_carencia_util_w 		bigint;
qt_autorizada_w			pls_guia_plano_proc.qt_autorizada%type;
nr_seq_plano_w			bigint;
nr_seq_contrato_w		bigint;
dt_inclusao_operadora_w		timestamp;
dt_contratacao_w		timestamp;
nr_seq_segurado_ant_w		bigint;
cd_area_w			bigint;
cd_especialidade_w		bigint;
cd_grupo_w			bigint;
ie_origem_proced_w		bigint;
nr_seq_rede_w			pls_carencia.nr_seq_rede%type;
ie_liberado_w			varchar(10);
ie_lib_ant_w			varchar(10);
dt_inicio_vigencia_w		timestamp;
qt_dias_w			integer;
nr_seq_tipo_carencia_w		bigint;
ds_carencia_w			varchar(255);
nr_seq_carencia_proc_w		bigint;
dt_carencia_w			timestamp;
qt_regra_carencia_w		bigint;
nr_seq_regra_carencia_w		bigint;
ie_gerar_glosa_w		varchar(1);
ie_tipo_guia_solic_w		varchar(10);
nr_seq_tipo_acomod_w		bigint;
i				bigint;
ie_serv_lib_w			varchar(10);
ie_localizacao_w		varchar(255);
ie_consistir_caren_prod_ant_w	varchar(10);
ds_observacao_abrang_ant_w	varchar(255);
qt_dias_fora_abrang_ant_w	bigint;
qt_carencia_mat_w		integer;
ie_valido_w			varchar(1);
nr_seq_segurado_w		bigint;
nr_seq_plano_aux_w		bigint;	
nr_seq_carencia_mat_w		bigint;

-- Informacoes da validacao guia principal autorizacao
C01 CURSOR(	nr_seq_oc_cta_comb_pc	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	ie_valida_proc,
		ie_valida_mat
	from	pls_oc_cta_val_carencia a
	where	a.nr_seq_oc_cta_comb	= nr_seq_oc_cta_comb_pc;

c01_w		c01%rowtype;

C02 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	conta.nr_seq_prest_solic_conv,
		conta.cd_guia_ok_conv,
		conta.nr_seq_segurado_conv,
		conta.ie_carater_atendimento_conv,
		'C' ie_tipo_protocolo,
		proc.cd_procedimento_conv,
		sel.nr_seq_conta,
		proc.ie_origem_proced_conv,
		proc.nr_sequencia nr_seq_conta_proc,
		proc.qt_executado,
		conta.dt_solicitacao,
		conta.nr_seq_guia_conv,
		sel.nr_sequencia nr_seq_selecao
	from	pls_oc_cta_selecao_imp	sel,
		pls_conta_imp		conta,
		pls_protocolo_conta_imp	prot,
		pls_conta_proc_imp	proc
	where	sel.nr_id_transacao	= nr_id_transacao_pc
	and	sel.ie_valido		= 'S'
	and	conta.nr_sequencia	= sel.nr_seq_conta
	and 	prot.nr_sequencia	= conta.nr_seq_protocolo
	and 	conta.nr_sequencia	= proc.nr_seq_conta;
	
c02_w		c02%rowtype;
	
c03 CURSOR(	nr_seq_segurado_pc		pls_conta_imp.nr_seq_segurado_conv%type,
		nr_seq_contrato_pc		pls_carencia.nr_seq_contrato%type,
		nr_seq_plano_pc			pls_segurado.nr_seq_plano%type,
		dt_contratacao_pc		timestamp) FOR
	SELECT	x.nr_sequencia nr_seq_carencia,
		'N' ie_mes_posterior,
		wheb_mensagem_pck.get_texto(1108818) ie_localizacao,
		null nr_seq_plano_contrato,
		x.nr_seq_rede
	from	pls_carencia x
	where	x.nr_seq_segurado	= nr_seq_segurado_pc
	and	x.ie_cpt		= 'N'
	
union all

	SELECT	x.nr_sequencia nr_seq_carencia,
		coalesce(x.ie_mes_posterior, 'N') ie_mes_posterior,
		'Contrato' ie_localizacao,
		x.nr_seq_plano_contrato,
		x.nr_seq_rede
	from	pls_carencia x
	where	x.nr_seq_contrato	= nr_seq_contrato_pc
	and	x.ie_cpt		= 'N'
	
union all

	select	x.nr_sequencia nr_seq_carencia,
		'N' ie_mes_posterior,
		'Produto' ie_localizacao,
		null nr_seq_plano_contrato,
		x.nr_seq_rede
	from	pls_carencia x
	where	nr_seq_plano		= nr_seq_plano_pc
	and	x.ie_cpt		= 'N'
	and	((coalesce(x.dt_inicio_vig_plano::text, '') = '') or (dt_contratacao_pc >= x.dt_inicio_vig_plano))
	and	((coalesce(x.dt_fim_vig_plano::text, '') = '') or (dt_contratacao_pc <= x.dt_fim_vig_plano));

c03_w		c03%rowtype;

c04 CURSOR(	nr_seq_carencia_pc	pls_carencia.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		a.ie_liberado,
		c.qt_dias,
		c.dt_inicio_vigencia,
		nr_seq_segurado,
		c.nr_seq_contrato,
		c.nr_seq_plano,
		a.nr_seq_tipo_carencia,
		a.cd_procedimento cd_proc,
		a.cd_grupo_proc cd_grupo,
		a.cd_especialidade cd_espec,
		a.cd_area_procedimento cd_area,
		CASE WHEN a.ie_liberado='S' THEN  0  ELSE 1 END  ie_lib,
		b.ds_carencia,
		a.nr_seq_grupo_servico,
		c.qt_dias_fora_abrang_ant,
		a.ie_origem_proced
	from	pls_carencia 		c,
		pls_tipo_carencia	b,
		pls_carencia_proc 	a
	where	c.nr_sequencia = nr_seq_carencia_pc
	and	c.ie_cpt = 'N'
	and 	b.nr_sequencia = c.nr_seq_tipo_carencia
	and	a.nr_seq_tipo_carencia = b.nr_sequencia
	and  	coalesce(a.nr_seq_tipo_acomodacao, 1) = 1
	and  	coalesce(a.ie_tipo_guia, '-1') = '-1'
	
union all

	SELECT	a.nr_sequencia,
		a.ie_liberado,
		d.qt_dias,
		d.dt_inicio_vigencia,
		nr_seq_segurado,
		d.nr_seq_contrato,
		d.nr_seq_plano,
		a.nr_seq_tipo_carencia,
		a.cd_procedimento cd_proc,
		a.cd_grupo_proc cd_grupo,
		a.cd_especialidade cd_espec,
		a.cd_area_procedimento cd_area,
		CASE WHEN a.ie_liberado='S' THEN  0  ELSE 1 END  ie_lib,
		b.ds_carencia,
		a.nr_seq_grupo_servico,
		d.qt_dias_fora_abrang_ant,
		a.ie_origem_proced
	from	pls_carencia 		d,
		pls_grupo_carencia	c,
		pls_tipo_carencia	b,
		pls_carencia_proc	a
	where	d.nr_sequencia = nr_seq_carencia_pc
	and	d.ie_cpt = 'N'
	and	d.nr_seq_grupo_carencia > 0
	and	c.nr_sequencia = d.nr_seq_grupo_carencia
	and	b.nr_seq_grupo = c.nr_sequencia
	and	a.nr_seq_tipo_carencia = b.nr_sequencia
	and  	coalesce(a.nr_seq_tipo_acomodacao, 1) = 1
	and	coalesce(a.ie_tipo_guia, '-1') = '-1'
	order by nr_seq_grupo_servico,
		cd_area,
		cd_espec,
		cd_grupo,
		cd_proc,
		ie_lib;

c04_w		c04%rowtype;

c05 CURSOR(	nr_seq_carencia_pc	pls_carencia.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia,
		a.ie_tipo_guia,
		a.nr_seq_tipo_acomodacao,
		c.dt_inicio_vigencia,
		c.qt_dias,
		c.nr_seq_segurado,
		c.nr_seq_contrato,
		a.nr_seq_tipo_carencia,
		c.qt_dias_fora_abrang_ant
	from	pls_carencia_proc a,
		pls_carencia c
	where	c.nr_sequencia			= nr_seq_carencia_pc
	and	c.nr_seq_tipo_carencia		= a.nr_seq_tipo_carencia
	and	coalesce(a.cd_procedimento::text, '') = ''
	and	coalesce(a.cd_grupo_proc::text, '') = ''
	and	coalesce(a.cd_especialidade::text, '') = ''
	and	coalesce(a.cd_area_procedimento::text, '') = ''
	and	c.ie_cpt			= 'N'
	and	a.ie_liberado			= 'S';

c05_w		c05%rowtype;

c06 CURSOR(	nr_id_transacao_pc	pls_oc_cta_selecao_imp.nr_id_transacao%type) FOR
	SELECT	conta.nr_seq_prest_solic_conv,
		conta.cd_guia_ok_conv,
		conta.nr_seq_segurado_conv,
		conta.ie_carater_atendimento_conv,
		'C' ie_tipo_protocolo,
		sel.nr_seq_conta,
		conta.dt_solicitacao,
		conta.nr_seq_guia_conv,
		sel.nr_sequencia nr_seq_selecao,
		c_mat.ie_tipo_despesa_conv,
		c_mat.nr_seq_material_conv,
		mat.nr_seq_estrut_mat
	from	pls_oc_cta_selecao_imp	sel,
		pls_conta_imp		conta,
		pls_protocolo_conta_imp	prot,
		pls_conta_mat_imp	c_mat,
		pls_material		mat
	where	sel.nr_id_transacao	= nr_id_transacao_pc
	and	sel.ie_valido		= 'S'
	and	conta.nr_sequencia	= sel.nr_seq_conta
	and 	c_mat.nr_sequencia	= conta.nr_seq_protocolo
	and 	conta.nr_sequencia	= c_mat.nr_seq_conta
	and 	c_mat.nr_seq_material_conv	= mat.nr_sequencia;

c06_w		c06%rowtype;

c07 CURSOR(	nr_seq_segurado_pc		pls_conta_imp.nr_seq_segurado_conv%type,
		nr_seq_contrato_pc		pls_carencia.nr_seq_contrato%type,
		nr_seq_plano_pc			pls_segurado.nr_seq_plano%type,
		dt_contratacao_pc		timestamp) FOR
	SELECT	a.nr_sequencia nr_seq_carencia,
		coalesce(a.ie_mes_posterior,'N') ie_mes_posterior,
		a.nr_seq_tipo_carencia,
		a.nr_seq_rede
	from	pls_carencia a
	where	a.nr_seq_segurado = nr_seq_segurado_pc
	
union all

	SELECT	a.nr_sequencia nr_seq_carencia,
		coalesce(a.ie_mes_posterior,'N'),
		a.nr_seq_tipo_carencia,
		a.nr_seq_rede
	from	pls_carencia a
	where	a.nr_seq_contrato = nr_seq_contrato_pc
	and	((a.nr_seq_plano_contrato = nr_seq_plano_pc) or (coalesce(a.nr_seq_plano_contrato::text, '') = ''))
	and not exists (	select	1
			from	pls_carencia b
			where	b.nr_seq_segurado = nr_seq_segurado_pc
			and	b.ie_cpt = 'N')
	
union all

	select	a.nr_sequencia nr_seq_carencia,
		coalesce(a.ie_mes_posterior,'N'),
		a.nr_seq_tipo_carencia,
		a.nr_seq_rede
	from	pls_carencia a
	where	a.nr_seq_plano = nr_seq_plano_pc
	and not exists (	select	1
			from	pls_carencia b
			where	b.nr_seq_segurado = nr_seq_segurado_pc
			and	b.ie_cpt = 'N')
	and not exists (	select	1
			from	pls_carencia c
			where	c.nr_seq_contrato = nr_seq_contrato_pc
			and	c.ie_cpt = 'N')
	and	((coalesce(a.dt_inicio_vig_plano::text, '') = '') or (dt_contratacao_pc >= a.dt_inicio_vig_plano))
	and	((coalesce(a.dt_fim_vig_plano::text, '') = '') or (dt_contratacao_pc <= a.dt_fim_vig_plano));

c07_w		c07%rowtype;

c08 CURSOR(	nr_seq_carencia_pc	pls_carencia.nr_sequencia%type,
		nr_seq_material_pc	pls_conta_mat_imp.nr_seq_material_conv%type) FOR
	SELECT	a.nr_sequencia nr_seq_carencia,
		a.ie_liberado,
		c.qt_dias,
		c.dt_inicio_vigencia,
		c.nr_seq_segurado,
		c.nr_seq_contrato,
		c.nr_seq_plano,
		a.nr_seq_tipo_carencia,
		a.ie_tipo_despesa ie_despesa,
		a.nr_seq_estrut_mat nr_seq_estru,
		a.nr_seq_material nr_seq_mat,
		CASE WHEN a.ie_liberado='S' THEN  0  ELSE 1 END  ie_lib,
		c.qt_dias_fora_abrang_ant,
		a.nr_seq_grupo_material,
		pls_se_grupo_preco_material(a.nr_seq_grupo_material, nr_seq_material_pc) ie_grupo_preco_mat,
		pls_obter_se_mat_estrutura(nr_seq_material_pc, a.nr_seq_estrut_mat) ie_estru_mat
	from	pls_carencia_mat a,
		pls_carencia c
	where	c.nr_sequencia = nr_seq_carencia_pc
	and	a.nr_seq_tipo_carencia = c.nr_seq_tipo_carencia
	and (a.nr_seq_material = nr_seq_material_pc or coalesce(a.nr_seq_material::text, '') = '')
	and not exists (	SELECT	1
			from	pls_tipo_carencia b
			where 	b.nr_sequencia = a.nr_seq_tipo_carencia
			and	b.ie_cpt = 'S')
	
union all

	select	a.nr_sequencia,
		a.ie_liberado,
		d.qt_dias,
		d.dt_inicio_vigencia,
		d.nr_seq_segurado,
		d.nr_seq_contrato,
		d.nr_seq_plano,
		a.nr_seq_tipo_carencia,
		a.ie_tipo_despesa ie_despesa,
		a.nr_seq_estrut_mat nr_seq_estru,
		a.nr_seq_material nr_seq_mat,
		CASE WHEN a.ie_liberado='S' THEN  0  ELSE 1 END  ie_lib,
		d.qt_dias_fora_abrang_ant,
		a.nr_seq_grupo_material,
		pls_se_grupo_preco_material(a.nr_seq_grupo_material, nr_seq_material_pc) ie_grupo_preco_mat,
		pls_obter_se_mat_estrutura(nr_seq_material_pc, a.nr_seq_estrut_mat) ie_estru_mat
	from	pls_carencia d,
		pls_grupo_carencia c,
		pls_tipo_carencia b,
		pls_carencia_mat a
	where	b.nr_sequencia = a.nr_seq_tipo_carencia
	and	d.nr_seq_grupo_carencia = c.nr_sequencia
	and	c.nr_sequencia = b.nr_seq_grupo
	and	d.nr_sequencia = nr_seq_carencia_pc
	and	(d.nr_seq_grupo_carencia IS NOT NULL AND d.nr_seq_grupo_carencia::text <> '')
	and	a.nr_seq_material = nr_seq_material_pc
	and	b.ie_cpt = 'N'
	
union all

	select	a.nr_sequencia,
		a.ie_liberado,
		d.qt_dias,
		d.dt_inicio_vigencia,
		d.nr_seq_segurado,
		d.nr_seq_contrato,
		d.nr_seq_plano,
		a.nr_seq_tipo_carencia,
		a.ie_tipo_despesa ie_despesa,
		a.nr_seq_estrut_mat nr_seq_estru,
		a.nr_seq_material nr_seq_mat,
		CASE WHEN a.ie_liberado='S' THEN  0  ELSE 1 END  ie_lib,
		d.qt_dias_fora_abrang_ant,
		a.nr_seq_grupo_material,
		pls_se_grupo_preco_material(a.nr_seq_grupo_material, nr_seq_material_pc) ie_grupo_preco_mat,
		pls_obter_se_mat_estrutura(nr_seq_material_pc, a.nr_seq_estrut_mat) ie_estru_mat
	from	pls_carencia d,
		pls_grupo_carencia c,
		pls_tipo_carencia b,
		pls_carencia_mat a
	where	b.nr_sequencia = a.nr_seq_tipo_carencia
	and	d.nr_seq_grupo_carencia = c.nr_sequencia
	and	c.nr_sequencia = b.nr_seq_grupo
	and	d.nr_sequencia = nr_seq_carencia_pc
	and	(d.nr_seq_grupo_carencia IS NOT NULL AND d.nr_seq_grupo_carencia::text <> '')
	and	coalesce(a.nr_seq_material::text, '') = ''
	and	b.ie_cpt = 'N'
	order by ie_despesa,
		nr_seq_estru,
		nr_seq_mat,
		ie_lib;

c08_w		c08%rowtype;

BEGIN
-- Deve existir informacao da regra para aplicar a validacao
if (nr_seq_combinada_p IS NOT NULL AND nr_seq_combinada_p::text <> '') then
	-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
	CALL pls_ocor_imp_pck.atualiza_campo_auxiliar(	'V',
							'N', 
							nr_id_transacao_p, 
							null);
	
	for	r_C01_w in C01(nr_seq_combinada_p) loop
		--limpa as variaveis
		SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
		
		if (r_C01_w.ie_valida_proc = 'S') then
			begin
			open c02(nr_id_transacao_p);
			loop
			fetch c02 into	
				c02_w;
			EXIT WHEN NOT FOUND; /* apply on c02 */
				begin
				if (coalesce(c02_w.cd_guia_ok_conv, 'X') <> 'X') then
					begin
					select	coalesce(sum(qt_executado),0)
					into STRICT	qt_carencia_util_w
					from	pls_conta_proc_imp
					where	nr_seq_conta = c02_w.nr_seq_conta
					and	cd_procedimento_conv = c02_w.cd_procedimento_conv
					and	ie_origem_proced_conv = c02_w.ie_origem_proced_conv
					and	nr_sequencia <> c02_w.nr_seq_conta_proc;
					
					select	sum(a.qt_autorizada)
					into STRICT	qt_autorizada_w
					from	pls_guia_plano_proc a,
						pls_guia_plano b
					where	a.nr_seq_guia = b.nr_sequencia
					and (b.cd_guia = c02_w.cd_guia_ok_conv or b.cd_guia_principal = c02_w.cd_guia_ok_conv)
					and	b.ie_status = '1'
					and	b.nr_seq_segurado = c02_w.nr_seq_segurado_conv
					and	a.cd_procedimento = c02_w.cd_procedimento_conv
					and	a.ie_origem_proced = c02_w.ie_origem_proced_conv;
						
					if (coalesce(qt_autorizada_w,0) >= c02_w.qt_executado + coalesce(qt_carencia_util_w,0)) then
						goto final;
					end if;
					end;
				end if;
				
				select	max(pls_obter_produto_benef(nr_sequencia, C02_w.dt_solicitacao)),
					max(nr_seq_contrato),
					max(dt_inclusao_operadora),
					max(dt_contratacao),
					max(nr_seq_segurado_ant)
				into STRICT	nr_seq_plano_w,
					nr_seq_contrato_w,
					dt_inclusao_operadora_w,
					dt_contratacao_w,
					nr_seq_segurado_ant_w
				from	pls_segurado
				where	nr_sequencia	= c02_w.nr_seq_segurado_conv;
				
				SELECT * FROM pls_obter_estrut_proc(	c02_w.cd_procedimento_conv, c02_w.ie_origem_proced_conv, cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w) INTO STRICT cd_area_w, cd_especialidade_w, cd_grupo_w, ie_origem_proced_w;
							
				ie_consistir_caren_prod_ant_w	:= 'S';
					
				if (nr_seq_plano_w IS NOT NULL AND nr_seq_plano_w::text <> '') then
					ie_consistir_caren_prod_ant_w := pls_obter_se_caren_plano_ant(	c02_w.nr_seq_segurado_conv, nr_seq_plano_w, nr_seq_segurado_ant_w, c02_w.nr_seq_prest_solic_conv, null, ie_consistir_caren_prod_ant_w);
				end if;
				
				
				open c03(	c02_w.nr_seq_segurado_conv,
						nr_seq_contrato_w,
						nr_seq_plano_w,
						dt_contratacao_w);
				loop
				fetch c03 into	
					c03_w;
				EXIT WHEN NOT FOUND; /* apply on c03 */
					begin
					if (c03_w.nr_seq_rede IS NOT NULL AND c03_w.nr_seq_rede::text <> '') then
						if (pls_obter_se_prest_rede_atend(c02_w.nr_seq_prest_solic_conv,c03_w.nr_seq_rede) = 'N') then
							goto fim_cursor_C03;
						end if;
					end if;
					
					if (c03_w.ie_mes_posterior	= 'S') then
						dt_inclusao_operadora_w	:= add_months(trunc(dt_inclusao_operadora_w,'month'),1);
					end if;
				
					ie_liberado_w	:= 'N';
					ie_lib_ant_w	:= 'N';
								
					open c04(c03_w.nr_seq_carencia);
					loop
					fetch c04 into	
						c04_w;
					EXIT WHEN NOT FOUND; /* apply on c04 */
						begin
						dt_inicio_vigencia_w 	:= c04_w.dt_inicio_vigencia;
						qt_dias_w 		:= c04_w.qt_dias;
						nr_seq_tipo_carencia_w 	:= c04_w.nr_seq_tipo_carencia;
						ds_carencia_w 		:= c04_w.ds_carencia;
						nr_seq_carencia_proc_w 	:= c04_w.nr_sequencia;
						qt_dias_fora_abrang_ant_w := C04_w.qt_dias_fora_abrang_ant;
						
						if (c04_w.nr_seq_grupo_servico IS NOT NULL AND c04_w.nr_seq_grupo_servico::text <> '') then
							ie_serv_lib_w	:= pls_se_grupo_preco_servico_lib(c04_w.nr_seq_grupo_servico,c02_w.cd_procedimento_conv,c02_w.ie_origem_proced_conv);
							if (ie_serv_lib_w = 'S') then
								ie_liberado_w	:= ie_liberado_w;
							else
								ie_liberado_w	:= ie_lib_ant_w;
							end if;
						end if;
						ie_lib_ant_w	:= ie_liberado_w;
						
						end;
					end loop;
					close c04;
					
					if (ie_liberado_w	= 'S') then
						begin
						
						ds_observacao_abrang_ant_w	:= '';
						/*Caso a abrangencia anterior nao tinha abrangencia no prestador atual, entao o sistema consiste a data pela migracao do produto novo*/

						if (ie_consistir_caren_prod_ant_w = 'N') then
							ds_observacao_abrang_ant_w	:= ' ' || wheb_mensagem_pck.get_texto(1108841);
							
							if (nr_seq_segurado_ant_w IS NOT NULL AND nr_seq_segurado_ant_w::text <> '') then
								select (dt_contratacao_w + coalesce(qt_dias_fora_abrang_ant_w,qt_dias_w))
								into STRICT	dt_carencia_w
								;
							else
								select	max(dt_alteracao)
								into STRICT	dt_carencia_w
								from	pls_segurado_alt_plano a
								where	nr_seq_segurado	= c02_w.nr_seq_segurado_conv
								and	nr_seq_plano_atual	= nr_seq_plano_w
								and	a.ie_situacao = 'A';
								
								select (dt_carencia_w + coalesce(qt_dias_fora_abrang_ant_w,qt_dias_w))
								into STRICT	dt_carencia_w
								;
							end if;
						else
							select (coalesce(dt_inicio_vigencia_w,dt_inclusao_operadora_w) + qt_dias_w)
							into STRICT	dt_carencia_w
							;
						end if;
						
						dt_carencia_w := trunc(dt_carencia_w);
						
						if (coalesce(C02_w.dt_solicitacao,clock_timestamp()) < dt_carencia_w) then
							begin
							
							select	count(1)
							into STRICT	qt_regra_carencia_w
							from	pls_regra_lanc_carencia LIMIT 1;
														
							if (qt_regra_carencia_w > 0) then
								nr_seq_regra_carencia_w := pls_obter_regra_carencia(	C02_w.ie_carater_atendimento_conv, nr_seq_plano_w, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, nr_seq_regra_carencia_w);
								
								if (nr_seq_regra_carencia_w	> 0) then
									ie_gerar_glosa_w := 'N';
								else
									ie_gerar_glosa_w	:= 'S';
								end if;
							else
								ie_gerar_glosa_w	:= 'S';
							end if;
							
							-- Quando a quantidade de itens da lista tiver chegado ao maximo definido na pls_util_pck, entao os registros sao persistidos no banco
							if (ie_gerar_glosa_w = 'S') then
								begin
								tb_valido_w(i)		:= 'S';	
								tb_observacao_w(i)	:= wheb_mensagem_pck.get_texto(1108799, 'NR_SEQ_TIPO_CARENCIA='||nr_seq_tipo_carencia_w||';DS_CARENCIA='||ds_carencia_w||';NR_SEQ_CARENCIA_MAT='||nr_seq_carencia_proc_w||
																';IE_LOCALIZACAO='||ie_localizacao_w||';DT_CARENCIA='||to_char(dt_carencia_w,'dd/mm/yyyy')||';QT_DIAS='||qt_dias_w||';DS_OBSERVACAO_ABRANG_ANT='||ds_observacao_abrang_ant_w);

								tb_seq_selecao_w(i)	:= c02_w.nr_seq_selecao;
								
								if (i = pls_util_pck.qt_registro_transacao_w) then
									CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
															tb_valido_w, 
															tb_observacao_w, 
															nr_id_transacao_p, 
															'SEQ');
									i := 0;
									
									SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
								else
									i := i + 1;
								end if;
								end;
							end if;
							end;
						end if;
						end;
					end if;
					
					if (coalesce(c02_w.nr_seq_guia_conv, 0) > 0) then
						begin
						select	max(ie_tipo_guia),
							max(nr_seq_tipo_acomodacao)
						into STRICT	ie_tipo_guia_solic_w,
							nr_seq_tipo_acomod_w
						from	pls_guia_plano
						where	nr_sequencia = c02_w.nr_seq_guia_conv;
						
						open c05(c03_w.nr_seq_carencia);
						loop
						fetch c05 into	
							c05_w;
						EXIT WHEN NOT FOUND; /* apply on c05 */
							begin
							ie_gerar_glosa_w:= 'N';
							
							select (coalesce(c05_w.dt_inicio_vigencia, dt_inclusao_operadora_w) + c05_w.qt_dias)
							into STRICT	dt_carencia_w
							;
							
							if (coalesce(C02_w.dt_solicitacao,clock_timestamp()) < dt_carencia_w) then
								if (C05_w.ie_tipo_guia = ie_tipo_guia_solic_w) then
									begin
									ie_gerar_glosa_w:= 'S';
									tb_observacao_w(i)	:= wheb_mensagem_pck.get_texto(1108879, 'DS_OBSERVACAO_BRANG_ANT='||ds_observacao_abrang_ant_w);
									end;
								end if;
								
								if (C05_w.nr_seq_tipo_acomodacao = nr_seq_tipo_acomod_w) then
									begin
									ie_gerar_glosa_w:= 'S';
									tb_observacao_w(i)	:= wheb_mensagem_pck.get_texto(1108880, 'DT_CARENCIA='||to_char(dt_carencia_w,'dd/mm/yyyy')||';DS_OBSERVACAO_ABRANG_ANT='||ds_observacao_abrang_ant_w);
									end;
								end if;
							end if;
							
							-- Quando a quantidade de itens da lista tiver chegado ao maximo definido na pls_util_pck, entao os registros sao persistidos no banco
							if (ie_gerar_glosa_w = 'S') then
								begin
								tb_valido_w(i)		:= 'S';	
								tb_seq_selecao_w(i)	:= c02_w.nr_seq_selecao;
								
								if (i = pls_util_pck.qt_registro_transacao_w) then
									
									CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
															tb_valido_w, 
															tb_observacao_w, 
															nr_id_transacao_p, 
															'SEQ');
									i := 0;
									
									SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
								else
									i := i + 1;
								end if;
								end;
							end if;			
							end;
						end loop;
						close c05;
						end;
					end if;	
					
					<<fim_cursor_C03>>
					null;
					
					end;
				end loop;
				close c03;
				
				<<final>>
				null;
				
				end;
			end loop;
			close c02;
			end;		
		end if;
		
		if (C01_w.ie_valida_mat = 'S') then
			begin
			open c06(	nr_id_transacao_p);
			loop
			fetch c06 into	
				c06_w;
			EXIT WHEN NOT FOUND; /* apply on c06 */
				begin
				select	max(nr_seq_plano),
					max(nr_seq_contrato),
					max(dt_inclusao_operadora),
					max(nr_seq_segurado_ant),
					max(dt_contratacao)
				into STRICT	nr_seq_plano_w,
					nr_seq_contrato_w,
					dt_inclusao_operadora_w,
					nr_seq_segurado_ant_w,
					dt_contratacao_w
				from	pls_segurado
				where	nr_sequencia	= c06_w.nr_seq_segurado_conv;
				
				select	count(1)
				into STRICT	qt_carencia_mat_w
				from	pls_carencia_mat LIMIT 1;
				
				if (qt_carencia_mat_w > 0) then
					begin
					ie_consistir_caren_prod_ant_w	:= 'S';
					
					if (c06_w.nr_seq_segurado_conv IS NOT NULL AND c06_w.nr_seq_segurado_conv::text <> '')then
						ie_consistir_caren_prod_ant_w := pls_obter_se_caren_plano_ant(	c06_w.nr_seq_segurado_conv, nr_seq_plano_w, nr_seq_segurado_ant_w, c06_w.nr_seq_prest_solic_conv, null, ie_consistir_caren_prod_ant_w);
					end if;
					
					open c07(	c06_w.nr_seq_segurado_conv,
							nr_seq_contrato_w,
							nr_seq_plano_w,
							dt_contratacao_w);
					loop
					fetch c07 into	
						c07_w;
					EXIT WHEN NOT FOUND; /* apply on c07 */
						begin
						if (nr_seq_rede_w IS NOT NULL AND nr_seq_rede_w::text <> '') then
							if (pls_obter_se_prest_rede_atend(c06_w.nr_seq_prest_solic_conv, c07_w.nr_seq_rede) = 'N') then
								goto fim_cursor_C07;
							end if;
						end if;
						
						if (c07_w.ie_mes_posterior = 'S') then
							dt_inclusao_operadora_w	:= add_months(trunc(dt_inclusao_operadora_w,'month'),1);
							
						end if;
						
						ie_liberado_w	:= 'N';
						
						open c08(	c07_w.nr_seq_carencia,
								c06_w.nr_seq_material_conv);
						loop
						fetch c08 into	
							c08_w;
						EXIT WHEN NOT FOUND; /* apply on c08 */
							begin
							ie_valido_w := 'S';
						
							-- tipo de despesa
							if (c08_w.ie_despesa IS NOT NULL AND c08_w.ie_despesa::text <> '') and (c08_w.ie_despesa != c06_w.ie_tipo_despesa_conv) then
								ie_valido_w := 'N';
							end if;
						
							-- se foi passado a estrutura de material por parametro so pode considerar as regras que tenham a mesma estrutura
							if (c06_w.nr_seq_estrut_mat IS NOT NULL AND c06_w.nr_seq_estrut_mat::text <> '') and (c06_w.nr_seq_estrut_mat != c08_w.nr_seq_estru) then
								ie_valido_w := 'N';
							end if;

							-- se possui estrutura de material na regra entao verifica se o material pertence a estrutura
							if (c08_w.nr_seq_estru IS NOT NULL AND c08_w.nr_seq_estru::text <> '') and (c08_w.ie_estru_mat = 'N') then
								ie_valido_w := 'N';
							end if;
							
							-- se possui grupo de material informado entao verifica
							if (c08_w.nr_seq_grupo_material IS NOT NULL AND c08_w.nr_seq_grupo_material::text <> '') and (c08_w.ie_grupo_preco_mat = 'N') then
								ie_valido_w := 'N';
							end if;
							
							-- se for valido alimenta as variaveis, senao limpa elas a ultima ira definir se e ou nao valida
							if (ie_valido_w = 'S') then
								qt_dias_w := c08_w.qt_dias;
								ie_liberado_w := c08_w.ie_liberado;
								nr_seq_segurado_w := c08_w.nr_seq_segurado;
								nr_seq_contrato_w := c08_w.nr_seq_contrato;
								nr_seq_plano_aux_w := c08_w.nr_seq_plano;
								dt_inicio_vigencia_w := c08_w.dt_inicio_vigencia;
								nr_seq_carencia_mat_w := c08_w.nr_seq_carencia;
								nr_seq_tipo_carencia_w := c08_w.nr_seq_tipo_carencia;
								qt_dias_fora_abrang_ant_w := c08_w.qt_dias_fora_abrang_ant;
								exit;
							else
								qt_dias_w := null;
								ie_liberado_w := null;
								nr_seq_segurado_w := null;
								nr_seq_contrato_w := null;
								nr_seq_plano_aux_w := null;
								dt_inicio_vigencia_w := null;
								nr_seq_carencia_mat_w := null;
								nr_seq_tipo_carencia_w := null;
								qt_dias_fora_abrang_ant_w := null;
							end if;
							
							end;
						end loop;
						close c08;
						
						if (ie_liberado_w = 'S') then
							begin
							ds_observacao_abrang_ant_w	:= '';
							/* Caso a abrangencia anterior nao tinha abrangencia no prestador atual, entao o sistema consiste a data pela migracao do produto novo*/

							if (ie_consistir_caren_prod_ant_w = 'N') then
								ds_observacao_abrang_ant_w	:= ' ' || wheb_mensagem_pck.get_texto(1108841);
								
								if (nr_seq_segurado_ant_w IS NOT NULL AND nr_seq_segurado_ant_w::text <> '') then
									dt_carencia_w := dt_contratacao_w + coalesce(qt_dias_fora_abrang_ant_w,qt_dias_w);
								else
									select	max(dt_alteracao)
									into STRICT	dt_carencia_w
									from	pls_segurado_alt_plano a
									where	nr_seq_segurado		= nr_seq_segurado_w
									and	a.ie_situacao = 'A'
									and	nr_seq_plano_atual	= nr_seq_plano_w;
									
									dt_carencia_w := dt_carencia_w + coalesce(qt_dias_fora_abrang_ant_w,qt_dias_w);
								end if;
							else
								dt_carencia_w := coalesce(dt_inicio_vigencia_w,dt_inclusao_operadora_w) + qt_dias_w;
							end if;
							
							if (coalesce(c06_w.dt_solicitacao,clock_timestamp()) < dt_carencia_w) then
								if (nr_seq_tipo_carencia_w IS NOT NULL AND nr_seq_tipo_carencia_w::text <> '') then
									select	ds_carencia
									into STRICT	ds_carencia_w
									from	pls_tipo_carencia
									where	nr_sequencia = nr_seq_tipo_carencia_w;
								end if;
								
								if (c07_w.nr_seq_carencia IS NOT NULL AND c07_w.nr_seq_carencia::text <> '') then
									select	CASE WHEN coalesce(nr_seq_segurado::text, '') = '' THEN (CASE WHEN coalesce(nr_seq_contrato::text, '') = '' THEN 'Produto'  ELSE 'Contrato' END )  ELSE wheb_mensagem_pck.get_texto(1108818) END
									into STRICT	ie_localizacao_w
									from	pls_carencia
									where	nr_sequencia	= c07_w.nr_seq_carencia;
								end if;
								
								select	count(1)
								into STRICT	qt_regra_carencia_w
								from	pls_regra_lanc_carencia LIMIT 1;
								
								if (qt_regra_carencia_w > 0) then
									nr_seq_regra_carencia_w := pls_obter_regra_carencia(	C06_w.ie_carater_atendimento_conv, nr_seq_plano_aux_w, wheb_usuario_pck.get_nm_usuario, wheb_usuario_pck.get_cd_estabelecimento, nr_seq_regra_carencia_w);
									
									if (nr_seq_regra_carencia_w > 0) then
										ie_gerar_glosa_w := 'N';
									else
										ie_gerar_glosa_w := 'S';
									end if;
								else
									ie_gerar_glosa_w := 'S';
								end if;
								
								if (ie_gerar_glosa_w = 'S') then
									-- Quando a quantidade de itens da lista tiver chegado ao maximo definido na pls_util_pck, entao os registros sao persistidos no banco
									tb_valido_w(i)		:= 'S';	
									tb_seq_selecao_w(i)	:= c06_w.nr_seq_selecao;
									tb_observacao_w(i)	:= wheb_mensagem_pck.get_texto(1108799, 'NR_SEQ_TIPO_CARENCIA='||nr_seq_tipo_carencia_w||';DS_CARENCIA='||ds_carencia_w||';NR_SEQ_CARENCIA_MAT='||nr_seq_carencia_mat_w||
																	';IE_LOCALIZACAO='||ie_localizacao_w||';DT_CARENCIA='||to_char(dt_carencia_w,'dd/mm/yyyy')||';QT_DIAS='||qt_dias_w||';DS_OBSERVACAO_ABRANG_ANT='||ds_observacao_abrang_ant_w);

									if (i = pls_util_pck.qt_registro_transacao_w) then
										
										CALL pls_ocor_imp_pck.gerencia_selecao_validacao(	tb_seq_selecao_w,
																tb_valido_w, 
																tb_observacao_w, 
																nr_id_transacao_p, 
																'SEQ');
										i := 0;
										
										SELECT * FROM pls_ocor_imp_pck.limpar_nested_tables(	tb_seq_selecao_w, tb_valido_w, tb_observacao_w) INTO STRICT _ora2pg_r;
 	tb_seq_selecao_w := _ora2pg_r.tb_nr_seq_selecao_p; tb_valido_w := _ora2pg_r.tb_ie_valido_p; tb_observacao_w := _ora2pg_r.tb_ds_observacao_p;
									else
										i := i + 1;
									end if;
								end if;
							end if;
							end;
						end if;
						
						<<fim_cursor_C07>>
						null;
						
						end;
					end loop;
					close c07;
					end;
				end if;
				end;
			end loop;
			close c06;
			end;
		end if;
	end loop;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_54_imp ( nr_seq_combinada_p pls_oc_cta_combinada.nr_sequencia%type, ie_regra_excecao_p pls_oc_cta_combinada.ie_excecao%type, nr_id_transacao_p pls_oc_cta_selecao_imp.nr_id_transacao%type) FROM PUBLIC;

