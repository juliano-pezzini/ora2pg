-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_analise_pos ( nr_seq_analise_p bigint, nr_seq_grupo_atual_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_commit_p text, ie_processo_cta_p text, ie_gravar_log_p text default null) AS $body$
DECLARE



/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade: Reconsistir a analise de pos estabelecido
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionario [ X] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atencao:

IE_PROCESSO_CTA_P - Parametro utilizado para verificar se e chamada pela rotina PLS_CTA_PROCESSAR_LOTE

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ie_via_acesso_w			varchar(2);
ie_origem_conta_w		varchar(2);
ie_via_acesso_imp_w		varchar(2);
ie_via_acesso_regra_w		varchar(1)	:= 'N';
ie_via_acesso_inf_w		varchar(1)	:= 'S';
nr_seq_conta_w			bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_regra_via_acesso_w	bigint;
nr_seq_conta_honor_w		bigint;
nr_seq_conta_proc_honor_w	bigint;
qt_auditoria_w			bigint;
nr_seq_segurado_w		bigint;
nr_seq_discussao_w		bigint;
ie_opcao_w			varchar(1);
qt_registro_w			integer;
nr_seq_congenere_w		bigint;
ie_ajuste_fat_w			varchar(1) := 'N';
ie_novo_pos_w			pls_visible_false.ie_novo_pos_estab%type;
vl_material_w			pls_conta_pos_estabelecido.vl_materiais%type;
vl_lib_taxa_material_w		pls_conta_pos_estabelecido.vl_lib_taxa_material%type;
vl_beneficiario_w		pls_conta_pos_estabelecido.vl_beneficiario%type;
tx_administracao_w		pls_conta_pos_estabelecido.tx_administracao%type;
tx_comercializacao_w		pls_conta_pos_estabelecido.nr_seq_regra_tx_opme%type;
nr_seq_analise_conta_w		pls_analise_conta.nr_sequencia%type;
ie_aplica_tx_adm_w		pls_regra_tx_opme.ie_aplica_tx_adm%type;
vl_opme_pacote_w	pls_pacote_material.vl_negociado%type;
tx_adm_w			pls_conta_pos_estabelecido.vl_administracao%type;
vl_tx_opme_pacote_w	pls_pacote_material.vl_negociado%type;
ie_lanc_opm_pac_fechado_w	pls_parametro_faturamento.ie_lancar_tx_opm_pac_fechado%type;

C01 CURSOR FOR
	SELECT	c.nr_sequencia nr_seq_conta,
		c.nr_seq_segurado
	from	pls_analise_conta	pos,
		pls_analise_conta	pag,
		pls_conta		c
	where	pos.nr_sequencia 	= nr_seq_analise_p
	and	pos.nr_seq_analise_ref 	= pag.nr_sequencia
	and	pag.nr_sequencia	= c.nr_seq_analise
	and	ie_ajuste_fat_w		= 'N'
	and	coalesce(nr_seq_discussao_w::text, '') = ''
	
union all

	SELECT  c.nr_sequencia nr_seq_conta,
	        c.nr_seq_segurado
	from    pls_conta c
	where   nr_seq_conta_princ in (   select c.nr_sequencia
		    from   pls_analise_conta pos,
			   pls_analise_conta pag,
			   pls_conta   c
		    where  pos.nr_sequencia  = nr_seq_analise_p
		    and    pos.nr_seq_analise_ref  = pag.nr_sequencia
		    and    pag.nr_sequencia  = c.nr_seq_analise)
	and    	(nr_seq_ajuste_fat IS NOT NULL AND nr_seq_ajuste_fat::text <> '')
	and	coalesce(nr_seq_discussao_w::text, '') = ''
	and	ie_ajuste_fat_w = 'S'
	
union all

	-- no refaturamento nao existe analise de pagamento, entao foi adicionado este union, para
	-- buscar as analises de pos, com ajuste_fat e sem analise de pagamento
	select  a.nr_seq_conta,
	        b.nr_seq_segurado
	from    pls_conta_pos_estabelecido	a,
		pls_conta			b
	where   a.nr_seq_analise		= nr_seq_analise_p
	and	b.nr_sequencia			= a.nr_seq_conta
	and (	select	count(1)
			from	pls_analise_conta	pos,
				pls_analise_conta	pag,
				pls_conta		c
			where	pos.nr_sequencia	= nr_seq_analise_p
			and	pos.nr_seq_analise_ref	= pag.nr_sequencia
			and	pag.nr_sequencia	= c.nr_seq_analise) = 0
	and    	(nr_seq_ajuste_fat IS NOT NULL AND nr_seq_ajuste_fat::text <> '')
	and	coalesce(nr_seq_discussao_w::text, '') = ''
	and	ie_ajuste_fat_w = 'S'
	group by a.nr_seq_conta, b.nr_seq_segurado
	
union all

	select	c.nr_sequencia nr_seq_conta,
		c.nr_seq_segurado
	from	pls_conta_pos_estabelecido 	p,
		pls_conta			c
	where	p.nr_seq_analise	= nr_seq_analise_p
	and	c.nr_sequencia		= p.nr_seq_conta
	and	ie_ajuste_fat_w		= 'N'
	and ((nr_seq_disc_mat IS NOT NULL AND nr_seq_disc_mat::text <> '') or (nr_seq_disc_proc IS NOT NULL AND nr_seq_disc_proc::text <> ''))
	and	p.ie_status_faturamento	!= 'A'
	and	p.ie_cobrar_mensalidade	!= 'A'
	group by
		c.nr_sequencia,
		c.nr_seq_segurado
	order by
		1;

C02 CURSOR(nr_seq_analise_pc	pls_analise_conta.nr_sequencia%type) FOR
	SELECT	nr_sequencia,
		nr_seq_regra_tx_opme
	from	pls_conta_pos_estabelecido
	where	nr_seq_analise	= nr_seq_analise_pc
	and	(nr_seq_regra_tx_opme IS NOT NULL AND nr_seq_regra_tx_opme::text <> '')
	and	ie_status_faturamento	!= 'A'
	and	ie_cobrar_mensalidade	!= 'A';

C03 CURSOR(nr_seq_analise_pc	pls_analise_conta.nr_sequencia%type) FOR
	SELECT	nr_sequencia
	from	pls_conta_pos_estabelecido
	where	nr_seq_analise	= nr_seq_analise_pc
	and	ie_status_faturamento	!= 'A'
	and	ie_cobrar_mensalidade	!= 'A';
BEGIN
CALL pls_gerencia_inicio_tb_tm('N');

select 	coalesce(max(ie_lancar_tx_opm_pac_fechado), 'N')
into STRICT	ie_lanc_opm_pac_fechado_w
from 	pls_parametro_Faturamento
where 	cd_estabelecimento = cd_estabelecimento_p;

-- gerencia a atualizacao da tabela TM
CALL pls_gerencia_upd_obj_pck.atualizar_objetos(nm_usuario_p, 'PLS_CONSISTIR_ANALISE', 'PLS_ESTRUTURA_MATERIAL_TM');
CALL pls_gerencia_upd_obj_pck.atualizar_objetos(nm_usuario_p, 'PLS_CONSISTIR_ANALISE', 'PLS_GRUPO_MATERIAL_TM');

select 	coalesce(max(ie_novo_pos_estab),'N')
into STRICT	ie_novo_pos_w
from	pls_visible_false;

	--Se nao estiver configurado para utilizacao de novo pos, entao prossegue o fluxo aqui na rotina.
	if (ie_novo_pos_w = 'N') then
		select  CASE WHEN count(1)=0 THEN 'N'  ELSE 'S' END
		into STRICT	ie_ajuste_fat_w
		from	pls_conta_pos_estabelecido a,
			pls_conta b
		where	a.nr_seq_conta = b.nr_sequencia
		and	a.nr_seq_analise = nr_seq_analise_p
		and	a.ie_status_faturamento	!= 'A'
		and	a.ie_cobrar_mensalidade	!= 'A'
		and	(b.nr_seq_ajuste_fat IS NOT NULL AND b.nr_seq_ajuste_fat::text <> '');

		open C01;
		loop
		fetch C01 into
			nr_seq_conta_w,
			nr_seq_segurado_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			select	max(b.nr_sequencia)
			into STRICT	nr_seq_discussao_w
			from	pls_contestacao		a,
				pls_contestacao_discussao b
			where	b.nr_seq_contestacao	= a.nr_sequencia
			and	a.nr_seq_conta		= nr_seq_conta_w;

			if (nr_seq_discussao_w IS NOT NULL AND nr_seq_discussao_w::text <> '') then
				ie_opcao_w := 'F';
			else
				ie_opcao_w := 'R';
			end if;

			-- Se for processo de conta medica, verifica se a conta esta em discussao,
			-- caso esteja, mas nao foi gerado pos-estabelecido de discussao, processa o pos da conta medica
			if (coalesce(ie_processo_cta_p,'N') = 'S') and (nr_seq_discussao_w IS NOT NULL AND nr_seq_discussao_w::text <> '') then
				select	count(1)
				into STRICT	qt_registro_w
				from	pls_conta_pos_estabelecido
				where	nr_seq_conta		= nr_seq_conta_w
				and	nr_seq_analise		= nr_seq_analise_p
				and ((nr_seq_disc_mat IS NOT NULL AND nr_seq_disc_mat::text <> '') or (nr_seq_disc_proc IS NOT NULL AND nr_seq_disc_proc::text <> ''))
				and	ie_status_faturamento	!= 'A'
				and	ie_cobrar_mensalidade	!= 'A';

				if (qt_registro_w = 0) then
					ie_opcao_w := 'R';
				end if;
			end if;

			--Inativar as glosas e ocorrencias antes de consistir
			update	pls_ocorrencia_benef a
			set	ie_situacao		= 'I',
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				ie_forma_inativacao	= CASE WHEN ie_forma_inativacao='U' THEN 'US' WHEN ie_forma_inativacao='US' THEN 'US'  ELSE 'S' END
			where	nr_seq_conta_pos_estab 	in	(SELECT	pos.nr_sequencia
								 from	pls_conta_pos_estabelecido	pos
								 where	pos.nr_seq_conta	= nr_seq_conta_w
								 and	pos.nr_seq_analise	= nr_seq_analise_p
								 and	((pos.ie_situacao		= 'A') or (coalesce(pos.ie_situacao::text, '') = ''))
								 and	pos.ie_status_faturamento	!= 'A'
								 and	pos.ie_cobrar_mensalidade	!= 'A')
			and (ie_lib_manual	= 'N' or coalesce(ie_lib_manual::text, '') = '');

			--Recalcular novamente o pos estab
			if (coalesce(ie_commit_p,'S') = 'S') then
				CALL pls_gerar_valor_pos_estab(nr_seq_conta_w, nm_usuario_p,'A',null,null,ie_opcao_w);
			end if;

			--Gerar novamente as ocorrencia
			CALL pls_gerar_ocorrencia_pos_estab(nr_seq_analise_p, nr_seq_conta_w,null,cd_estabelecimento_p,nm_usuario_p);

			if	((coalesce(nr_seq_discussao_w::text, '') = '') or (coalesce(ie_processo_cta_p,'N') = 'S')) then



				CALL pls_gerar_ocor_conta_princ(nr_seq_conta_w,nr_seq_segurado_w,nr_seq_analise_p,cd_estabelecimento_p, nm_usuario_p,nr_seq_grupo_atual_p );
			end if;
			end;
		end loop;
		close C01;

		CALL pls_liberar_automatic_pos(nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p, null);

		select	max(nr_seq_analise_ref)
		into STRICT	nr_seq_analise_conta_w
		from	pls_analise_conta
		where	nr_sequencia = nr_seq_analise_p;

		if (coalesce(nr_seq_analise_conta_w::text, '') = '') then
			select	max(a.nr_seq_analise)
			into STRICT	nr_seq_analise_conta_w
			from	pls_conta a,
				pls_conta_pos_estabelecido b
			where	a.nr_sequencia = b.nr_seq_conta
			and	b.nr_seq_analise = nr_seq_analise_p
			and	b.ie_status_faturamento	!= 'A'
			and	b.ie_cobrar_mensalidade	!= 'A';
		end if;

		if (nr_seq_analise_conta_w IS NOT NULL AND nr_seq_analise_conta_w::text <> '') then
			select	sum(coalesce(b.vl_materiais,0)),
				sum(coalesce(b.vl_lib_taxa_material,0)),
				max(b.tx_administracao)
			into STRICT	vl_material_w,
				vl_lib_taxa_material_w,
				tx_administracao_w
			from	pls_conta_pos_estabelecido	b,
				pls_conta_mat_v			a
			where	a.nr_seq_analise		= nr_seq_analise_conta_w
			and	b.nr_seq_conta_mat		= a.nr_sequencia
			and	a.ie_tipo_despesa		= '7'
			and	b.ie_status_faturamento		in ('D','L','P','U','M')
			and	b.ie_status_faturamento		!= 'A'
			and	b.ie_cobrar_mensalidade		!= 'A';
			
			if ( ie_lanc_opm_pac_fechado_w= 'S') then
				select  sum(coalesce(d.vl_negociado,0)),
						max(b.tx_administracao)
				into STRICT  	vl_opme_pacote_w,
						tx_adm_w
				from  	pls_conta_pos_estabelecido  b,
						pls_conta_proc_v      	a,
						pls_pacote_tipo_acomodacao c,
						pls_pacote_material d
				where  	a.nr_seq_analise    = nr_seq_analise_conta_w
				and  	b.nr_seq_conta_proc  	= a.nr_sequencia
				and 	c.nr_sequencia = a.nr_seq_regra_pct_fat
				and 	d.nr_seq_composicao = c.nr_seq_composicao
				and  	a.ie_tipo_despesa    	= '4'
				and 	d.ie_tipo_despesa = '7'
				and  	ie_status_faturamento   in ('D','L','P','U')
				and     ((coalesce(d.nr_seq_prestador::text, '') = '') or (d.nr_seq_prestador = a.nr_seq_prestador_exec))
				and     ((coalesce(d.ie_tipo_guia::text, '') = '') or (d.ie_tipo_guia = a.ie_tipo_guia))
				and 	d.ie_situacao = 'A';
				
				tx_administracao_w := coalesce(coalesce(tx_administracao_w, tx_adm_w), 0);
				vl_material_w := coalesce(vl_material_w,0) + coalesce(vl_opme_pacote_w,0);
				
				vl_tx_opme_pacote_w := vl_opme_pacote_w * (tx_administracao_w / 100);
				vl_lib_taxa_material_w := coalesce(vl_lib_taxa_material_w,0) + coalesce(vl_tx_opme_pacote_w,0);
			end if;
			

			if (vl_material_w > 0) then

				for r_C02_w in C02(nr_seq_analise_p) loop

					select	max(tx_comercializacao),
						coalesce(max(ie_aplica_tx_adm),'S') ie_aplica_tx_adm
					into STRICT	tx_comercializacao_w,
						ie_aplica_tx_adm_w
					from	pls_regra_tx_opme
					where	nr_sequencia = r_C02_w.nr_seq_regra_tx_opme;

					vl_material_w		:= dividir((vl_material_w*tx_comercializacao_w),100);
					if (ie_aplica_tx_adm_w = 'S') then
						vl_lib_taxa_material_w	:= dividir((vl_lib_taxa_material_w*tx_comercializacao_w),100);
					else
						vl_lib_taxa_material_w := 0;
					end if;
					vl_beneficiario_w	:= coalesce(vl_material_w,0) + coalesce(vl_lib_taxa_material_w,0);

					update	pls_conta_pos_estabelecido
					set	vl_medico		= vl_material_w,
						vl_medico_calc		= vl_material_w,
						vl_liberado_hi_fat	= vl_material_w,
						vl_administracao	= vl_lib_taxa_material_w,
						vl_lib_taxa_servico	= vl_lib_taxa_material_w,
						vl_taxa_servico		= vl_lib_taxa_material_w,
						vl_beneficiario		= vl_beneficiario_w,
						vl_provisao		= vl_beneficiario_w,
						vl_calculado		= vl_beneficiario_w,
						tx_administracao	= tx_administracao_w
					where	nr_sequencia 		= r_C02_w.nr_sequencia;
				end loop;

			end if;
		end if;

		--ultimo ajuste de valores de participantes,  pois pode ocorrer problemas de ajuste em arredondamento de valor, ja que a geracao e anterior a liberar_automatic_pos.
		--Aqui os valores ja estarao ajustados nos procedimentos, entao falta tratar eventuais divergencias nos participantes.
		for r_c03_w in  C03(nr_seq_analise_p) loop
			CALL pls_gerar_conta_pos_estab_part( r_c03_w.nr_sequencia, 'N', nm_usuario_p, 'S');
		end loop;

		/* Atualizar os pareceres das ocorrencias que foram inativas automaticamente */

		update	pls_analise_glo_ocor_grupo a
		set	a.ie_status	= 'L',
			a.dt_analise	= clock_timestamp(),
			a.nm_usuario_analise = nm_usuario_p
		where	a.nr_seq_analise	= nr_seq_analise_p
		and	a.ie_status		= 'P'
		and	exists (SELECT	1
				from	pls_ocorrencia_benef x
				where	x.nr_sequencia	= a.nr_seq_ocor_benef
				and	x.ie_situacao	= 'I'
				and	x.ie_forma_inativacao in ('S','US'));

		CALL pls_gerar_fluxo_audit_item_pos(nr_seq_analise_p,
					null,
					nm_usuario_p);


		for r_c01_w in C01() loop
			begin
			CALL pls_atualizar_status_fat_pos(r_c01_w.nr_seq_conta, null, null, nr_seq_analise_p, cd_estabelecimento_p, nm_usuario_p);
			select	count(1)
			into STRICT	qt_auditoria_w
			from	pls_auditoria_conta_grupo
			where	nr_seq_analise	= nr_seq_analise_p
			and	(dt_liberacao IS NOT NULL AND dt_liberacao::text <> '');

			if (qt_auditoria_w = 0) then

					CALL pls_gerar_grupo_aud_pos(r_c01_w.nr_seq_conta, nr_seq_analise_p, nm_usuario_p, cd_estabelecimento_p);

			end if;
			if (coalesce(nr_seq_discussao_w::text, '') = '') then
				CALL pls_gerar_contab_val_adic(	r_c01_w.nr_seq_conta,	null, null,
								null, null,null,
								null, 'P','N',
								nm_usuario_p);
			end if;
			end;
		end loop;

		if (coalesce(ie_commit_p,'S') = 'S') then
			commit;
		end if;

	--Se estiver configurado para utilizacao do novo pos-estabelecido, entao passa o controle para respectiva rotina.
	else
		CALL pls_consistir_an_pos_estab(	nr_seq_analise_p, nr_seq_grupo_atual_p, cd_estabelecimento_p,
						nm_usuario_p, ie_commit_p, ie_processo_cta_p,
						ie_gravar_log_p	);
	end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_analise_pos ( nr_seq_analise_p bigint, nr_seq_grupo_atual_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, ie_commit_p text, ie_processo_cta_p text, ie_gravar_log_p text default null) FROM PUBLIC;

