-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_isentar_carencias_adapt ( nr_seq_segurado_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_tipo_contratacao_w		varchar(2);
nr_seq_contrato_w		bigint;
dt_contrato_w			timestamp;
dt_casamento_w			timestamp;
dt_nascimento_w			timestamp;
qt_vidas_contrato_w		bigint;
nr_seq_regra_isencao_w		bigint;
ie_tipo_data_w			varchar(2);
qt_dias_inicial_w		bigint;
qt_dias_final_w			bigint;
ie_aplicacao_carencia_w		varchar(2);
ie_isenta_carencia_w		varchar(1) := 'N';
ie_dependente_w			varchar(1);
nr_seq_regra_carencia_w		bigint;
nr_seq_tipo_carencia_w		bigint;
qt_dias_carencia_w		bigint;
qt_carencias_regras_benef_w	bigint;
dt_inicio_vigencia_w		timestamp;
dt_fim_vigencia_w		timestamp;
dt_contratacao_w		timestamp;
ds_observacao_w			varchar(255);
dt_inicio_vigencia_regra_w	timestamp;
dt_fim_vigencia_regra_w		timestamp;
qt_carencias_benef_w		bigint;
qt_carencias_contrato_w		bigint;
qt_carencias_produto_w		bigint;
nr_seq_plano_w			bigint;
nr_seq_titular_w		bigint;
nr_seq_carencia_titular_w	bigint;
dt_inclusao_tit_operadora_w	timestamp;
qt_dias_carencias_restantes_w	bigint;
qt_dias_carencias_tit_w		bigint;
nr_seq_tipo_carencia_tit_w	bigint;
dt_inicio_vigencia_caren_w	timestamp;
qt_dias_carencia_atual_w	bigint;
nr_seq_plano_tit_w		bigint;
nr_seq_contrato_tit_w		bigint;
ie_origem_carencia_tit_w	bigint;
ds_inf_carencia_w		varchar(255);
dt_admissao_w			timestamp;
dt_contratacao_tit_w		timestamp;
nr_seq_grupo_carencia_tit_w	bigint;
cd_pessoa_fisica_w		varchar(10);
nr_seq_carencia_w		bigint;
ie_nascido_plano_w		varchar(10);
ie_nascido_plano_benef_w	varchar(10);
ie_regulamentacao_w		varchar(10);
qt_vidas_grupo_relac_w		bigint;
qt_vidas_grupo_contr_w		bigint;
nr_seq_grupo_w			bigint;
dt_admissao_titular_w		timestamp;
dt_reajuste_grupo_relec_w	timestamp;
cd_pessoa_fisica_mae_w		varchar(10);
dt_adesao_mae_w			timestamp;
qt_registros_w			bigint;
ie_existe_mae_w			varchar(10);
cd_pessoa_fisica_pai_w		varchar(10);
ie_existe_pai_w			varchar(10);
dt_adesao_pai_w			timestamp;
qt_tempo_resp_plano_w		bigint;
ie_responsavel_plano_w		varchar(10);
ie_carencia_isentada_w		varchar(10);
dt_adocao_w			timestamp;
qt_idade_w			bigint;
dt_inclusao_operadora_w		pls_segurado.dt_inclusao_operadora%type;
dt_adesao_subestipulante_w 	pls_sub_estipulante.dt_adesao%type;

C01 CURSOR FOR
	/*Verificar as regras que nao possuem vinculo para o contrato do beneficiario*/

	SELECT	a.nr_sequencia,
		a.qt_tempo_resp_plano,
		a.ie_responsavel_plano
	from	pls_regra_carencia_isencao	a
	where	((a.ie_tipo_contratacao	= ie_tipo_contratacao_w) or (coalesce(ie_tipo_contratacao::text, '') = ''))
	and	((a.ie_regulamentacao	= ie_regulamentacao_w) or (coalesce(ie_regulamentacao::text, '') = ''))
	and	qt_idade_w between coalesce(a.qt_idade_minima,qt_idade_w) and coalesce(a.qt_idade_maxima,qt_idade_w)
	and	a.cd_estabelecimento	= cd_estabelecimento_p
	and (coalesce(ie_referencia_vidas,'C') = 'C' and qt_vidas_contrato_w between coalesce(qt_vidas_inicial,qt_vidas_contrato_w) and coalesce(a.qt_vidas_final,qt_vidas_contrato_w) or
		coalesce(ie_referencia_vidas,'C') = 'G' and qt_vidas_grupo_contr_w between coalesce(qt_vidas_inicial,qt_vidas_grupo_contr_w) and coalesce(a.qt_vidas_final,qt_vidas_grupo_contr_w) or
		coalesce(ie_referencia_vidas,'C') = 'R' and qt_vidas_grupo_relac_w between coalesce(qt_vidas_inicial,qt_vidas_grupo_relac_w) and coalesce(a.qt_vidas_final,qt_vidas_grupo_relac_w))
	and	coalesce(a.nr_seq_contrato::text, '') = ''
	and	coalesce(a.nr_seq_intercambio::text, '') = ''
	and	((coalesce(a.ie_mae_beneficiario,'N') = 'S' and ie_existe_mae_w = 'S')
		or (coalesce(a.ie_mae_beneficiario,'N') = 'N'))
	and	a.ie_situacao		= 'A'
	and	a.ie_acao_contrato	= 'D'
	and	not exists (	SELECT	1
				from	pls_regra_carencia_isencao	x
				where	x.nr_seq_contrato	= nr_seq_contrato_w
				and	x.cd_estabelecimento	= cd_estabelecimento_p)
	and	(((a.qt_tempo_resp_plano IS NOT NULL AND a.qt_tempo_resp_plano::text <> '') and ((ie_responsavel_plano = 'A' and ie_existe_pai_w = 'S' and ie_existe_mae_w = 'S') or (ie_responsavel_plano = 'M' and ie_existe_mae_w = 'S') or (ie_responsavel_plano = 'P' and ie_existe_pai_w = 'S') or (ie_responsavel_plano = 'D' and (ie_existe_mae_w = 'S'
											or ie_existe_pai_w = 'S'))))
		or (coalesce(a.qt_tempo_resp_plano::text, '') = ''))
	and	((coalesce(ie_nascido_plano,'N') = 'S' and ie_nascido_plano_benef_w = 'S') 
		or (coalesce(ie_nascido_plano,'N') = 'N'))
	and	(((nr_seq_grupo_produto IS NOT NULL AND nr_seq_grupo_produto::text <> '') and substr(pls_se_grupo_preco_produto(nr_seq_grupo_produto,nr_seq_plano_w),1,255) = 'S') or (coalesce(nr_seq_grupo_produto::text, '') = ''))
	and	dt_contratacao_w	between coalesce(dt_inicio_vigencia,dt_contratacao_w) and coalesce(dt_fim_vigencia,dt_contratacao_w)
	and	ie_tipo_contrato	in ('A','CP')
	
union

	/*Verificar as regras que possuem vinculo para o contrato do beneficiario*/

	select	a.nr_sequencia,
		a.qt_tempo_resp_plano,
		a.ie_responsavel_plano
	from	pls_regra_carencia_isencao	a
	where	((a.ie_tipo_contratacao	= ie_tipo_contratacao_w) or (coalesce(ie_tipo_contratacao::text, '') = ''))
	and	((a.ie_regulamentacao	= ie_regulamentacao_w) or (coalesce(ie_regulamentacao::text, '') = ''))
	and	qt_idade_w between coalesce(a.qt_idade_minima,qt_idade_w) and coalesce(a.qt_idade_maxima,qt_idade_w)
	and	a.cd_estabelecimento	= cd_estabelecimento_p
	and (coalesce(ie_referencia_vidas,'C') = 'C' and qt_vidas_contrato_w between coalesce(qt_vidas_inicial,qt_vidas_contrato_w) and coalesce(a.qt_vidas_final,qt_vidas_contrato_w) or
		coalesce(ie_referencia_vidas,'C') = 'G' and qt_vidas_grupo_contr_w between coalesce(qt_vidas_inicial,qt_vidas_grupo_contr_w) and coalesce(a.qt_vidas_final,qt_vidas_grupo_contr_w) or
		coalesce(ie_referencia_vidas,'C') = 'R' and qt_vidas_grupo_relac_w between coalesce(qt_vidas_inicial,qt_vidas_grupo_relac_w) and coalesce(a.qt_vidas_final,qt_vidas_grupo_relac_w))
	and	a.nr_seq_contrato = nr_seq_contrato_w
	and	clock_timestamp()	between coalesce(dt_inicio_vigencia,clock_timestamp()) and fim_dia(dt_fim_vigencia)
	and	dt_contratacao_w between coalesce(dt_inicio_contratacao,dt_contratacao_w) and fim_dia(coalesce(dt_fim_contratacao,dt_contratacao_w))
	and	((coalesce(a.ie_mae_beneficiario,'N') = 'S' and ie_existe_mae_w = 'S') 
		or (coalesce(a.ie_mae_beneficiario,'N') = 'N'))
	and	a.ie_acao_contrato	= 'D'
	and	a.ie_situacao		= 'A'
	and	(((a.qt_tempo_resp_plano IS NOT NULL AND a.qt_tempo_resp_plano::text <> '') and ((ie_responsavel_plano = 'A' and ie_existe_pai_w = 'S' and ie_existe_mae_w = 'S') or (ie_responsavel_plano = 'M' and ie_existe_mae_w = 'S') or (ie_responsavel_plano = 'P' and ie_existe_pai_w = 'S') or (ie_responsavel_plano = 'D' and (ie_existe_mae_w = 'S'
											or ie_existe_pai_w = 'S'))))
	and	((coalesce(ie_nascido_plano,'N') = 'S' and ie_nascido_plano_benef_w = 'S')
		or (coalesce(ie_nascido_plano,'N') = 'N'))
		or (coalesce(a.qt_tempo_resp_plano::text, '') = ''));

C02 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_regra_carencia_dias
	where	nr_seq_regra	= nr_seq_regra_isencao_w;

C03 CURSOR FOR
	--Verificar as carencias
	SELECT	a.nr_sequencia,
		1
	from	pls_carencia	a
	where	a.nr_seq_segurado	= nr_seq_titular_w
	and	ie_cpt		= 'N'
	and	exists (	SELECT	1
				from	pls_carencia	x
				where	x.nr_seq_segurado		= nr_seq_segurado_p
				and	x.nr_seq_tipo_carencia		= a.nr_seq_tipo_carencia)
	
union

	select	a.nr_sequencia,
		2
	from	pls_carencia	a
	where	a.nr_seq_contrato	= nr_seq_contrato_tit_w
	and	ie_cpt		= 'N'
	and	exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_segurado	= nr_seq_segurado_p
					and	x.nr_seq_tipo_carencia	= a.nr_seq_tipo_carencia)
	and	not exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_segurado	= nr_seq_titular_w)
	
union

	select	a.nr_sequencia,
		3
	from	pls_carencia	a
	where	a.nr_seq_plano	= nr_seq_plano_tit_w
	and	ie_cpt		= 'N'
	and	dt_inclusao_operadora_w between coalesce(a.dt_inicio_vig_plano,dt_inclusao_operadora_w) and coalesce(a.dt_fim_vig_plano,dt_inclusao_operadora_w)
	and	exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_segurado	= nr_seq_segurado_p
					and	x.nr_seq_tipo_carencia	= a.nr_seq_tipo_carencia)
	and	not exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_segurado	= nr_seq_titular_w)
	and	not exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_contrato	= nr_seq_contrato_tit_w)
	--Verificar o grupo de carencia
	
union all

	select	a.nr_sequencia,
		1
	from	pls_carencia	a
	where	a.nr_seq_segurado	= nr_seq_titular_w
	and	ie_cpt		= 'N'
	and	exists (	select	1
				from	pls_carencia	x
				where	x.nr_seq_segurado		= nr_seq_segurado_p
				and	x.nr_seq_grupo_carencia		= a.nr_seq_grupo_carencia)
	
union

	select	a.nr_sequencia,
		2
	from	pls_carencia	a
	where	a.nr_seq_contrato	= nr_seq_contrato_tit_w
	and	ie_cpt		= 'N'
	and	exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_segurado	= nr_seq_segurado_p
					and	x.nr_seq_grupo_carencia	= a.nr_seq_grupo_carencia)
	and	not exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_segurado	= nr_seq_titular_w)
	
union

	select	a.nr_sequencia,
		3
	from	pls_carencia	a
	where	a.nr_seq_plano	= nr_seq_plano_tit_w
	and	ie_cpt		= 'N'
	and	dt_inclusao_operadora_w between coalesce(a.dt_inicio_vig_plano,dt_inclusao_operadora_w) and coalesce(a.dt_fim_vig_plano,dt_inclusao_operadora_w)
	and	exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_segurado		= nr_seq_segurado_p
					and	x.nr_seq_grupo_carencia		= a.nr_seq_grupo_carencia)
	and	not exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_segurado		= nr_seq_titular_w)
	and	not exists (	select	1
					from	pls_carencia	x
					where	x.nr_seq_contrato	= nr_seq_contrato_tit_w);

C04 CURSOR FOR
	SELECT	nr_sequencia
	from	pls_carencia
	where	nr_seq_segurado	= nr_seq_segurado_p
	and	ie_cpt		= 'N';


BEGIN

/*Obter dados do segurado*/

select	b.ie_tipo_contratacao,
	c.nr_sequencia,
	c.dt_contrato,
	d.dt_emissao_cert_casamento,
	d.dt_nascimento,
	CASE WHEN a.nr_seq_titular='' THEN 'T'  ELSE 'D' END ,
	a.dt_contratacao,
	b.nr_sequencia,
	a.nr_seq_titular,
	a.cd_pessoa_fisica,
	b.ie_regulamentacao,
	coalesce(a.ie_nascido_plano,'N'),
	a.dt_inclusao_operadora,
	(select max(x.dt_adesao)
	from 	pls_sub_estipulante x 
	where 	x.nr_sequencia = a.nr_seq_subestipulante ),
	d.dt_adocao
into STRICT	ie_tipo_contratacao_w,
	nr_seq_contrato_w,
	dt_contrato_w,
	dt_casamento_w,
	dt_nascimento_w,
	ie_dependente_w,
	dt_contratacao_w,
	nr_seq_plano_w,
	nr_seq_titular_w,
	cd_pessoa_fisica_w,
	ie_regulamentacao_w,
	ie_nascido_plano_benef_w,
	dt_inclusao_operadora_w,
	dt_adesao_subestipulante_w,
	dt_adocao_w
from	pessoa_fisica	d,
	pls_contrato	c,
	pls_plano	b,
	pls_segurado	a
where	a.nr_seq_plano		= b.nr_sequencia
and	a.nr_seq_contrato	= c.nr_sequencia
and	a.cd_pessoa_fisica	= d.cd_pessoa_fisica
and	a.nr_sequencia		= nr_seq_segurado_p;

qt_idade_w	:= trunc(months_between(dt_contratacao_w, dt_nascimento_w) / 12);

select	max(dt_admissao)
into STRICT	dt_admissao_w
from	pls_segurado_compl
where	nr_seq_segurado		= nr_seq_segurado_p;

begin
select	max(cd_pessoa_fisica_ref)
into STRICT	cd_pessoa_fisica_mae_w
from	compl_pessoa_fisica
where	cd_pessoa_fisica	= cd_pessoa_fisica_w
and	ie_tipo_complemento	= 5;
exception
when others then
	cd_pessoa_fisica_mae_w	:= '';
end;
dt_adesao_mae_w	:= null;
/*Verifica se possui a mae no plano de saude*/

if (cd_pessoa_fisica_mae_w IS NOT NULL AND cd_pessoa_fisica_mae_w::text <> '') then
	select	count(1)
	into STRICT	qt_registros_w
	from	pls_segurado
	where	cd_pessoa_fisica	= cd_pessoa_fisica_mae_w
	and	cd_estabelecimento	= cd_estabelecimento_p;
	
	if (qt_registros_w	> 0) then
		select	max(dt_contratacao)
		into STRICT	dt_adesao_mae_w
		from	pls_segurado
		where	cd_pessoa_fisica	= cd_pessoa_fisica_mae_w
		and	cd_estabelecimento	= cd_estabelecimento_p;
		ie_existe_mae_w	:= 'S';
	else
		ie_existe_mae_w	:= 'N';
	end if;
else
	ie_existe_mae_w	:= 'N';
end if;

begin
select	max(cd_pessoa_fisica_ref)
into STRICT	cd_pessoa_fisica_pai_w
from	compl_pessoa_fisica
where	cd_pessoa_fisica	= cd_pessoa_fisica_w
and	ie_tipo_complemento	= 4;
exception
when others then
	cd_pessoa_fisica_pai_w	:= '';
end;

dt_adesao_pai_w	:= null;
/*Verifica se possui o pai no plano de saude*/

if (cd_pessoa_fisica_pai_w IS NOT NULL AND cd_pessoa_fisica_pai_w::text <> '') then
	select	count(1)
	into STRICT	qt_registros_w
	from	pls_segurado
	where	cd_pessoa_fisica	= cd_pessoa_fisica_pai_w
	and	cd_estabelecimento	= cd_estabelecimento_p;
	
	if (qt_registros_w	> 0) then
		select	max(dt_contratacao)
		into STRICT	dt_adesao_pai_w
		from	pls_segurado
		where	cd_pessoa_fisica	= cd_pessoa_fisica_pai_w
		and	cd_estabelecimento	= cd_estabelecimento_p;
		ie_existe_pai_w	:= 'S';
	else
		ie_existe_pai_w	:= 'N';
	end if;
else
	ie_existe_pai_w	:= 'N';
end if;

if (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then
	/*Obter dados do titulo*/

	select	dt_inclusao_operadora,
		nr_seq_plano,
		nr_seq_contrato,
		dt_contratacao
	into STRICT	dt_inclusao_tit_operadora_w,
		nr_seq_plano_tit_w,
		nr_seq_contrato_tit_w,
		dt_contratacao_tit_w
	from	pls_segurado
	where	nr_sequencia	= nr_seq_titular_w;
	
	select	max(dt_admissao)
	into STRICT	dt_admissao_titular_w
	from	pls_segurado_compl
	where	nr_seq_segurado		= nr_seq_titular_w;
end if;

select	count(1)
into STRICT	qt_vidas_contrato_w
from	pls_segurado
where	nr_seq_contrato	= nr_seq_contrato_w
and (coalesce(dt_rescisao::text, '') = '' or ((dt_rescisao IS NOT NULL AND dt_rescisao::text <> '') and coalesce(dt_reativacao,dt_rescisao) > dt_rescisao));

begin
select	max(nr_seq_grupo)
into STRICT	nr_seq_grupo_w
from	pls_contrato_grupo
where	nr_seq_contrato = nr_seq_contrato_w;
exception
when others then
	nr_seq_grupo_w	:= null;
end;

qt_vidas_grupo_contr_w	:= coalesce(pls_obter_quantidade_vidas(nr_seq_segurado_p,'T','C'),0);

if (nr_seq_grupo_w IS NOT NULL AND nr_seq_grupo_w::text <> '') then
	qt_vidas_grupo_relac_w	:= pls_qt_vidas_grupo_contrato(nr_seq_grupo_w,'QV',coalesce(dt_contratacao_w,clock_timestamp()));
	
	select	dt_reajuste
	into STRICT	dt_reajuste_grupo_relec_w
	from	pls_grupo_contrato
	where	nr_sequencia	= nr_seq_grupo_w;
else
	qt_vidas_grupo_relac_w	:= 0;
end if;

ie_carencia_isentada_w	:= 'N';	

open C01;
loop
fetch C01 into
	nr_seq_regra_isencao_w,
	qt_tempo_resp_plano_w,
	ie_responsavel_plano_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin
	ie_isenta_carencia_w		:= 'N';
	dt_inicio_vigencia_regra_w	:= null;
	dt_fim_vigencia_regra_w		:= null;
	
	if (ie_carencia_isentada_w = 'S') then
		exit;
	end if;
	
	select	ie_tipo_data,
		coalesce(qt_dias_inicial,0),
		coalesce(qt_dias_final,0),
		ie_exige_carencia
	into STRICT	ie_tipo_data_w,
		qt_dias_inicial_w,
		qt_dias_final_w,
		ie_aplicacao_carencia_w
	from	pls_regra_carencia_isencao
	where	nr_sequencia	= nr_seq_regra_isencao_w;
	
	/*Verificar a regra de carencia*/

	if (coalesce(ie_tipo_data_w,'H') = 'H') then
		ie_isenta_carencia_w	:= 'S';
	elsif (ie_tipo_data_w	= 'C') then
		dt_inicio_vigencia_regra_w	:= dt_contrato_w + qt_dias_inicial_w -1;
		dt_fim_vigencia_regra_w		:= dt_contrato_w + qt_dias_final_w;
		if	trunc(dt_contratacao_w,'dd') between trunc(dt_inicio_vigencia_regra_w,'dd') and fim_dia(dt_fim_vigencia_regra_w) then
			ie_isenta_carencia_w	:= 'S';
		end if;
	elsif (ie_tipo_data_w	= 'N') then
		dt_inicio_vigencia_regra_w	:= dt_nascimento_w + qt_dias_inicial_w -1;
		dt_fim_vigencia_regra_w		:= dt_nascimento_w + qt_dias_final_w;
		if	trunc(dt_contratacao_w,'dd') between trunc(dt_inicio_vigencia_regra_w,'dd') and fim_dia(dt_fim_vigencia_regra_w) then
			ie_isenta_carencia_w	:= 'S';
		end if;
	elsif (ie_tipo_data_w	= 'S') then
		dt_inicio_vigencia_regra_w	:= dt_casamento_w + qt_dias_inicial_w -1;
		dt_fim_vigencia_regra_w		:= dt_casamento_w + qt_dias_final_w;
		if	trunc(dt_contratacao_w,'dd') between trunc(dt_inicio_vigencia_regra_w,'dd') and fim_dia(dt_fim_vigencia_regra_w) then
			ie_isenta_carencia_w	:= 'S';
		end if;
	elsif (ie_tipo_data_w	= 'D') then
		dt_inicio_vigencia_regra_w	:= dt_admissao_w + qt_dias_inicial_w -1;
		dt_fim_vigencia_regra_w		:= dt_admissao_w + qt_dias_final_w;
		
		if	trunc(dt_contratacao_w,'dd') between trunc(dt_inicio_vigencia_regra_w,'dd') and fim_dia(dt_fim_vigencia_regra_w) then
			ie_isenta_carencia_w	:= 'S';
		end if;
	elsif (ie_tipo_data_w  = 'T') then
		if (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then
			dt_inicio_vigencia_regra_w	:= dt_contratacao_tit_w + qt_dias_inicial_w -1;
			dt_fim_vigencia_regra_w		:= dt_contratacao_tit_w + qt_dias_final_w;
			if	trunc(dt_contratacao_w,'dd') between trunc(dt_inicio_vigencia_regra_w,'dd') and fim_dia(dt_fim_vigencia_regra_w) then
				ie_isenta_carencia_w	:= 'S';
			end if;
		end if;
	elsif (ie_tipo_data_w	= 'A') then
		if (to_char(dt_contratacao_w,'MM')	= to_char(dt_contrato_w,'MM')) then
			ie_isenta_carencia_w	:= 'S';
		end if;
	elsif (ie_tipo_data_w	= 'F') then
		if (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then
			dt_inicio_vigencia_regra_w	:= dt_admissao_titular_w + qt_dias_inicial_w -1;
			dt_fim_vigencia_regra_w		:= dt_admissao_titular_w + qt_dias_final_w;
			if	trunc(dt_contratacao_w,'dd') between trunc(dt_inicio_vigencia_regra_w,'dd') and fim_dia(dt_fim_vigencia_regra_w) then
				ie_isenta_carencia_w	:= 'S';
			end if;
		end if;
	elsif (ie_tipo_data_w	= 'G') then
		if (to_char(dt_contratacao_w,'MM')	= to_char(dt_reajuste_grupo_relec_w,'MM')) then
			ie_isenta_carencia_w	:= 'S';
		end if;
	elsif (ie_tipo_data_w	= 'X') then
			dt_inicio_vigencia_regra_w	:= dt_adocao_w + qt_dias_inicial_w -1;
			dt_fim_vigencia_regra_w		:= dt_adocao_w + qt_dias_final_w;

			if	trunc(dt_contratacao_w,'dd') between trunc(dt_inicio_vigencia_regra_w,'dd') and fim_dia(dt_fim_vigencia_regra_w) then
				ie_isenta_carencia_w	:= 'S';
			end if;
	elsif (ie_tipo_data_w	= 'E') then
			dt_inicio_vigencia_regra_w	:= dt_adesao_subestipulante_w + qt_dias_inicial_w -1;
			dt_fim_vigencia_regra_w		:= dt_adesao_subestipulante_w + qt_dias_final_w;
			if	trunc(dt_contratacao_w,'dd') between trunc(dt_inicio_vigencia_regra_w,'dd') and fim_dia(dt_fim_vigencia_regra_w) then
				ie_isenta_carencia_w	:= 'S';
			end if;
	end if;
	
	/*Verifica se existe regra de isencao de carencia conforme as regras do responsavel*/

	if (ie_isenta_carencia_w = 'S') then
		if (qt_tempo_resp_plano_w IS NOT NULL AND qt_tempo_resp_plano_w::text <> '') then
			/*Verificar se ambos estao na data de adesao do beneficiario*/

			if (ie_responsavel_plano_w = 'A') then
				if (trunc(dt_adesao_mae_w+qt_tempo_resp_plano_w-1,'dd') <= clock_timestamp()) and (trunc(dt_adesao_pai_w+qt_tempo_resp_plano_w-1,'dd') <= clock_timestamp()) then
					ie_isenta_carencia_w := 'S';
				else
					ie_isenta_carencia_w := 'N';
				end if;
			/*Verificar se a mae estao na data de adesao do beneficiario*/

			elsif (ie_responsavel_plano_w = 'M') then
				if (trunc(dt_adesao_mae_w+qt_tempo_resp_plano_w-1,'dd') <= clock_timestamp()) then
					ie_isenta_carencia_w := 'S';
				else
					ie_isenta_carencia_w := 'N';
				end if;
			/*Verificar se o pai estao na data de adesao do beneficiario*/

			elsif (ie_responsavel_plano_w = 'P') then
				if (trunc(dt_adesao_pai_w+qt_tempo_resp_plano_w-1,'dd') <= clock_timestamp()) then
					ie_isenta_carencia_w := 'S';
				else
					ie_isenta_carencia_w := 'N';
				end if;
			/*Verificar se o pai ou a mae estao na data de adesao do beneficiario*/

			elsif (ie_responsavel_plano_w = 'D') then
				if (trunc(dt_adesao_mae_w+qt_tempo_resp_plano_w-1,'dd') <= clock_timestamp()) or (trunc(dt_adesao_pai_w+qt_tempo_resp_plano_w-1,'dd') <= clock_timestamp()) then
					ie_isenta_carencia_w := 'S';
				else
					ie_isenta_carencia_w := 'N';
				end if;
			end if;
		end if;
	end if;
	
	ds_observacao_w	:= '  - ' || wheb_mensagem_pck.get_texto(1211169, 'NR_SEQ_REGRA_ISENCAO='||nr_seq_regra_isencao_w);
	
	/*O beneficiario esta dentro da regra de carencia*/

	if (ie_isenta_carencia_w	= 'S') then
		/*Verificar se o beneficiario tem carencias*/

		select	count(1)
		into STRICT	qt_carencias_benef_w
		from	pls_carencia
		where	nr_seq_segurado	= nr_seq_segurado_p
		and	ie_cpt		= 'N';
		
		/*Caso nao possuir, verificar os do contrato*/

		if (qt_carencias_benef_w	= 0) then
			select	count(1)
			into STRICT	qt_carencias_contrato_w
			from	pls_carencia
			where	nr_seq_contrato	= nr_seq_contrato_w
			and (nr_seq_plano_contrato = nr_seq_plano_w or coalesce(nr_seq_plano_contrato::text, '') = '')
			and	ie_cpt = 'N';
			
			/*Copiar as carencias do contrato*/

			if (qt_carencias_contrato_w	> 0) then
				CALL pls_copiar_carencia(nr_seq_plano_w,nr_seq_contrato_w,nr_seq_segurado_p,'N',nm_usuario_p);
			/*Caso nao possuir, verificar os do plano*/

			else	
				select	count(1)
				into STRICT	qt_carencias_produto_w
				from	pls_carencia
				where	nr_seq_plano	= nr_seq_plano_w
				and	ie_cpt		= 'N'
				and	dt_inclusao_operadora_w between coalesce(dt_inicio_vig_plano,dt_inclusao_operadora_w) and coalesce(dt_fim_vig_plano,dt_inclusao_operadora_w);
				
				if (qt_carencias_produto_w	> 0) then
					/*Copiar as carencias do plano*/

					CALL pls_copiar_carencia(nr_seq_plano_w,0,nr_seq_segurado_p,'N',nm_usuario_p);
				end if;
			end if;
		end if;
		
		ie_carencia_isentada_w	:= 'S';
		/*Considerar regras dias reducao*/

		if (ie_aplicacao_carencia_w	= 'S') then
			open C02;
			loop
			fetch C02 into
				nr_seq_regra_carencia_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				select	nr_seq_tipo_carencia,
					qt_dias
				into STRICT	nr_seq_tipo_carencia_w,
					qt_dias_carencia_w
				from	pls_regra_carencia_dias
				where	nr_sequencia	= nr_seq_regra_carencia_w;
				
				select	count(1)
				into STRICT	qt_carencias_regras_benef_w
				from	pls_carencia
				where	nr_seq_segurado		= nr_seq_segurado_p
				and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_w;
				
				if (qt_carencias_regras_benef_w > 0) then
					select	max(dt_inicio_vigencia)
					into STRICT	dt_inicio_vigencia_w
					from	pls_carencia
					where	nr_seq_segurado		= nr_seq_segurado_p
					and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_w;
					
					if (coalesce(dt_inicio_vigencia_w::text, '') = '') then
						dt_inicio_vigencia_w	:= dt_contratacao_w;
					end if;
					
					update	pls_carencia
					set	qt_dias			= qt_dias_carencia_w,
						dt_inicio_vigencia	= dt_inicio_vigencia_w,
						dt_fim_vigencia		= dt_inicio_vigencia_w + qt_dias_carencia_w,
						ds_observacao		= substr(ds_observacao || ds_observacao_w,1,255),
						nm_usuario		= nm_usuario_p,
						dt_atualizacao		= clock_timestamp(),
						nr_seq_regra_isencao	= nr_seq_regra_isencao_w
					where	nr_seq_segurado		= nr_seq_segurado_p
					and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_w;
				end if;
				end;
			end loop;
			close C02;
		elsif	((ie_aplicacao_carencia_w	= 'N') or /* Zera todas carencias*/
			(ie_aplicacao_carencia_w	= 'T') and (ie_dependente_w	= 'T')) then /*Zera todas carencias apenas para o titular*/
			update	pls_carencia
			set	qt_dias			= 0,
				dt_fim_vigencia		= CASE WHEN dt_inicio_vigencia = NULL THEN null  ELSE dt_inicio_vigencia+0 END ,
				ds_observacao		= substr(ds_observacao || ds_observacao_w,1,255),
				nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				nr_seq_regra_isencao	= nr_seq_regra_isencao_w
			where	nr_seq_segurado		= nr_seq_segurado_p
			and	ie_cpt		= 'N';
		
		/* Assume dias de carencia do titular*/

		elsif (ie_aplicacao_carencia_w	= 'A') then
			open C03;
			loop
			fetch C03 into
				nr_seq_carencia_titular_w,
				ie_origem_carencia_tit_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				
				select	nr_seq_tipo_carencia,
					qt_dias,
					dt_inicio_vigencia,
					nr_seq_grupo_carencia
				into STRICT	nr_seq_tipo_carencia_tit_w,
					qt_dias_carencias_tit_w,
					dt_inicio_vigencia_caren_w,
					nr_seq_grupo_carencia_tit_w
				from	pls_carencia
				where	nr_sequencia	= nr_seq_carencia_titular_w;
				
				qt_dias_carencias_restantes_w	:= ((coalesce(dt_inicio_vigencia_caren_w,dt_inclusao_tit_operadora_w) + qt_dias_carencias_tit_w) - dt_contratacao_w);
				
				if (qt_dias_carencias_restantes_w	< 0) then
					qt_dias_carencias_restantes_w	:= 0;
				end if;
				
				/*Verificar o tipo de carencia do beneficiario*/

				if (nr_seq_tipo_carencia_tit_w IS NOT NULL AND nr_seq_tipo_carencia_tit_w::text <> '') then
					begin
					select	max(qt_dias)
					into STRICT	qt_dias_carencia_atual_w
					from	pls_carencia
					where	nr_seq_segurado		= nr_seq_segurado_p
					and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_tit_w;
					exception
					when others then
						qt_dias_carencia_atual_w	:= null;
					end;
				/*Verificar o grupo de carencia*/

				elsif (nr_seq_grupo_carencia_tit_w IS NOT NULL AND nr_seq_grupo_carencia_tit_w::text <> '') then
					begin
					select	max(qt_dias)
					into STRICT	qt_dias_carencia_atual_w
					from	pls_carencia
					where	nr_seq_segurado		= nr_seq_segurado_p
					and	nr_seq_grupo_carencia	= nr_seq_grupo_carencia_tit_w;
					exception
					when others then
						qt_dias_carencia_atual_w	:= null;
					end;
				end if;
				
				if (ie_origem_carencia_tit_w = 1) then
					ds_inf_carencia_w	:= '. ' || wheb_mensagem_pck.get_texto(1211168);
				elsif (ie_origem_carencia_tit_w = 2) then
					ds_inf_carencia_w	:= '. ' || wheb_mensagem_pck.get_texto(1211167);
				elsif (ie_origem_carencia_tit_w = 3) then
					ds_inf_carencia_w	:= '. ' || wheb_mensagem_pck.get_texto(1211166);
				end if;
				
				if (qt_dias_carencia_atual_w IS NOT NULL AND qt_dias_carencia_atual_w::text <> '') and (qt_dias_carencia_atual_w	> qt_dias_carencias_restantes_w) then
					/*Verificar o tipo de carencia do beneficiario*/

					if (nr_seq_tipo_carencia_tit_w IS NOT NULL AND nr_seq_tipo_carencia_tit_w::text <> '') then
						update	pls_carencia
						set	qt_dias			= qt_dias_carencias_restantes_w,
							dt_fim_vigencia		= CASE WHEN dt_inicio_vigencia = NULL THEN null  ELSE dt_inicio_vigencia + qt_dias_carencia_w END ,
							ds_observacao		= substr(ds_observacao_w || ds_inf_carencia_w,1,255),
							nm_usuario		= nm_usuario_p,
							dt_atualizacao		= clock_timestamp(),
							nr_seq_regra_isencao	= nr_seq_regra_isencao_w
						where	nr_seq_segurado		= nr_seq_segurado_p
						and	nr_seq_tipo_carencia	= nr_seq_tipo_carencia_tit_w;
					/*Verificar o grupo de carencia*/

					elsif (nr_seq_grupo_carencia_tit_w IS NOT NULL AND nr_seq_grupo_carencia_tit_w::text <> '') then
						update	pls_carencia
						set	qt_dias			= qt_dias_carencias_restantes_w,
							dt_fim_vigencia		= CASE WHEN dt_inicio_vigencia = NULL THEN null  ELSE dt_inicio_vigencia + qt_dias_carencia_w END ,
							ds_observacao		= substr(ds_observacao_w || ds_inf_carencia_w,1,255),
							nm_usuario		= nm_usuario_p,
							dt_atualizacao		= clock_timestamp(),
							nr_seq_regra_isencao	= nr_seq_regra_isencao_w
						where	nr_seq_segurado		= nr_seq_segurado_p
						and	nr_seq_grupo_carencia	= nr_seq_grupo_carencia_tit_w;
					end if;
				end if;
				end;
			end loop;
			close C03;
		end if;
	end if;
	end;
end loop;
close C01;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_isentar_carencias_adapt ( nr_seq_segurado_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

