-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_ordem_resposta_cotacao ( nr_cot_compra_p bigint, nm_usuario_p text) AS $body$
DECLARE

					
qt_existe_w				bigint;	
ds_erro_w				varchar(255);
ie_tipo_integracao_envio_w			varchar(1);
ie_gerar_oc_integracao_w			varchar(1);
cd_estabelecimento_w			integer;
ie_gera_nova_cotacao_w		varchar(1);
cd_perfil_ativo_w		bigint;
ie_resposta_int_compra_w	parametro_compras.ie_resposta_int_compra%type;
dt_aprov_oc_w			ordem_compra.dt_aprovacao%type;



BEGIN

cd_perfil_ativo_w	:= obter_perfil_ativo;

select	count(*)
into STRICT	qt_existe_w
from	cot_compra_forn
where	nr_cot_compra = nr_cot_compra_p;

if (qt_existe_w > 0) then

	select	coalesce(max(ie_tipo_integracao_envio),0),
			coalesce(max(cd_estabelecimento),0)
	into STRICT	ie_tipo_integracao_envio_w,
			cd_estabelecimento_w
	from	cot_compra
	where	nr_cot_compra = nr_cot_compra_p;
	
	select	coalesce(obter_valor_param_usuario(915, 46, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w),'N')
	into STRICT	ie_gera_nova_cotacao_w
	;	

	select	coalesce(max(ie_gerar_oc_integracao),'S'),
		coalesce(max(ie_resposta_int_compra),'N')		
	into STRICT	ie_gerar_oc_integracao_w,
		ie_resposta_int_compra_w
	from	parametro_compras
	where	cd_estabelecimento = cd_estabelecimento_w;

	if	(ie_tipo_integracao_envio_w = 2 AND ie_gerar_oc_integracao_w = 'S') or (ie_tipo_integracao_envio_w = 3) then
			
		begin
		CALL calcular_cot_compra_liquida(nr_cot_compra_p, nm_usuario_p);
		CALL gerar_cot_compra_resumo(nr_cot_compra_p, nm_usuario_p);
		CALL gerar_historico_cotacao(
					nr_cot_compra_p,
					Wheb_mensagem_pck.get_Texto(301961), /*'Cálculo da cotação efetuado com sucesso ao resgatar a resposta via WebService.',*/
					Wheb_mensagem_pck.get_Texto(301962), /*'O cálculo desta cotação foi efetuado com sucesso no momento de obter a resposta da plataforma via WebService.',*/
					'S',
					nm_usuario_p);
				
		exception when others then
		ds_erro_w := Wheb_mensagem_pck.get_Texto(301963); /*'Erro ao calcular a cotação.';*/
		CALL gerar_historico_cotacao(
				nr_cot_compra_p,
				Wheb_mensagem_pck.get_Texto(301964), /*Erro ao calcular a cotação ao resgatar a resposta via WebService.*/
				Wheb_mensagem_pck.get_Texto(301965), /*'Ocorreu um erro ao calcular a esta cotação no momento de obter a resposta da plataforma via WebService.',*/
				'S',
				nm_usuario_p);
		end;	
				
		if (coalesce(ds_erro_w::text, '') = '') then
					
			begin
			CALL gerar_OC_agend_integracao(nr_cot_compra_p, nm_usuario_p);
			CALL gerar_historico_cotacao(
				nr_cot_compra_p,
				Wheb_mensagem_pck.get_Texto(301966), /*'Geração da ordem efetuada com sucesso ao resgatar a resposta via WebService.',*/
				Wheb_mensagem_pck.get_Texto(301968), /*'A geração da ordem de compra desta cotação foi efetuada com sucesso no momento de obter a resposta da plataforma via WebService.',*/
				'S',
				nm_usuario_p);
			
			update	cot_compra
			set	dt_geracao_ordem_compra = clock_timestamp()
			where	nr_cot_compra = nr_cot_compra_p;

			if (ie_tipo_integracao_envio_w = 2) then
				begin
				/* Resposta integracao apos gerar ordem */

				if (ie_resposta_int_compra_w = 'S') then
					begin
					CALL gravar_agenda_integ_webservice(96,nr_cot_compra_p,'C');
					end;
				/* Resposta integracao apor aprovar ordem */

				elsif (ie_resposta_int_compra_w = 'P') then
					begin
					/* Se alguma OC gerada foi aprovada, faz envio para integracao*/

					select max(a.dt_aprovacao)
					into STRICT dt_aprov_oc_w
					from ordem_compra a,
						ordem_compra_item b 
					where a.nr_ordem_compra = b.nr_ordem_compra 
					and b.nr_cot_compra = nr_cot_compra_p;
					
					if (dt_aprov_oc_w IS NOT NULL AND dt_aprov_oc_w::text <> '') then
						begin
						CALL gravar_agenda_integ_webservice(96,nr_cot_compra_p,'C');
						end;
					end if;
					
					end;
				end if;
				end;
			end if;
			
			if (ie_gera_nova_cotacao_w <> 'N') then				
				CALL sup_exclui_item_nao_cotado(nr_cot_compra_p,'S',nm_usuario_p);
			end if;
			
			exception when others then
			CALL gerar_historico_cotacao(
				nr_cot_compra_p,
				Wheb_mensagem_pck.get_Texto(301969), /*'Erro ao calcular a cotação ao resgatar a resposta via WebService',*/
				Wheb_mensagem_pck.get_Texto(301970), /*'Ocorreu um erro ao gerar a ordem de compra desta cotação no momento de obter a resposta da plataforma via WebService',*/
				'S',
				nm_usuario_p);				
			end;
		end if;
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_ordem_resposta_cotacao ( nr_cot_compra_p bigint, nm_usuario_p text) FROM PUBLIC;

