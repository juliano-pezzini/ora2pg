-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_w_desempenho_cobranca ( nr_seq_grupo_cobr_p bigint, nr_seq_cobrador_p bigint, ie_tipo_data_p text, dt_inicial_p timestamp, dt_final_p timestamp, nr_seq_historico_p bigint, ie_situacao_contrato_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

	 
ds_historico_w			varchar(255);
nm_devedor_w			varchar(80);
nm_estipulante_w		varchar(80);
nm_pagador_w			varchar(80);
nm_cobrador_w			varchar(60);
ds_situacao_contrato_w		varchar(50);
ds_tipo_recebimento_w		varchar(40);
nm_usuario_oper_w		varchar(15);
cd_cgc_ant_w			varchar(14)	:= null;
cd_cgc_w			varchar(14);
cd_pessoa_fisica_ant_w		varchar(10)	:= null;
cd_pessoa_fisica_w		varchar(10);
cd_pf_cobrador_w		varchar(10);
ie_periodo_w			varchar(3);
vl_cobranca_w			double precision	:= 0;
vl_pago_w			double precision	:= 0;
vl_cobranca_total_w		double precision	:= 0;
vl_pago_total_w			double precision	:= 0;
vl_acobrar_w			double precision	:= 0;
vl_cobrar_resp_w		double precision	:= 0;
vl_total_w			double precision	:= 0;
vl_cobranca_equipe_w		double precision	:= 0;
nr_seq_grupo_w			bigint;
qt_tentativas_w			bigint	:= 0;
qt_registro_outro_w		bigint	:= 0;
qt_registro_sucesso_outro_w	bigint	:= 0;
nr_seq_historico_w		bigint	:= null;
nr_seq_desempenho_w		bigint;
nr_seq_contrato_w		bigint;
nr_contrato_w			bigint;
nr_seq_cobranca_w		bigint;	
nr_seq_cobrador_w		bigint;
nr_titulo_w			bigint;
nr_vidas_w			bigint;
qt_registro_w			bigint;
qt_registro_sucesso_w		bigint;
nr_seq_mensalidade_w		bigint;
qt_meta_regra_w			bigint;
qt_meta_definida_w		bigint;
nr_seq_pagador_w		bigint;
qt_registro_antend_w		bigint;
nr_seq_vinculo_w		bigint;
nr_seq_item_w			bigint;
nr_seq_cobranca_ww		bigint;
cd_tipo_recebimento_w		integer;
dt_emissao_w			timestamp;
dt_vencimento_w			timestamp;
dt_inclusao_w			timestamp;

/* Cobradores */
 
C01 CURSOR FOR 
    SELECT a.nr_sequencia 
    from  cobrador a 
    where (a.nr_sequencia 	= nr_seq_cobrador_p or coalesce(nr_seq_cobrador_p::text, '') = '') 
    and   a.ie_situacao      = 'A' 
    and   a.cd_estabelecimento  = cd_estabelecimento_p 
    and  (( exists (SELECT 1 
            from  grupo_cobranca_membro  c, 
                grupo_cobranca     x 
            where  c.nr_seq_grupo     = x.nr_sequencia 
            and   c.nr_seq_cobrador    = a.nr_sequencia 
            and   x.nr_sequencia 	= nr_seq_grupo_cobr_p)) or (coalesce(nr_seq_grupo_cobr_p::text, '') = ''));
	
/* Obter meta */
 
C02 CURSOR FOR 
	SELECT	a.qt_meta, 
		a.ie_periodo 
	from	regra_meta_cobranca a 
	where	coalesce(a.nr_seq_cobrador,nr_seq_cobrador_w)	= nr_seq_cobrador_w 
	and (exists (SELECT	1 
			from	grupo_cobranca_membro x 
			where	x.nr_seq_cobrador	= nr_seq_cobrador_w 
			and	x.nr_seq_grupo		= a.nr_seq_grupo_cobr) or coalesce(a.nr_seq_grupo_cobr::text, '') = '') 
	and	coalesce(a.dt_fim_vigencia,dt_inicial_p) >= dt_inicial_p 
	and	a.cd_estabelecimento = cd_estabelecimento_p 
	order by 
		coalesce(nr_seq_cobrador,0), 
		coalesce(nr_seq_grupo_cobr,0);
C03 CURSOR FOR
	/* Cobranças registradas */
 
	SELECT	f.cd_pessoa_fisica, 
		f.cd_cgc 
	from	titulo_receber		f, 
		cobranca		e, 
		registro_cobr_item 	d, 
		registro_cobranca	b 
	where	d.nr_seq_registro 	= b.nr_sequencia 
	and	d.nr_seq_cobranca	= e.nr_sequencia 
	and	e.nr_titulo		= f.nr_titulo 
	and (b.nr_seq_cobrador_reg	= nr_seq_cobrador_w) /*or (b.nr_seq_cobrador_reg is null))*/
 
	and (b.dt_registro between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) or ie_tipo_data_p <> 'R') 
	and (e.dt_inclusao between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) or ie_tipo_data_p <> 'I') 
	and (f.dt_pagamento_previsto between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) or ie_tipo_data_p <> 'V') 
	and	e.cd_estabelecimento	 = cd_estabelecimento_p 
	--group by f.cd_pessoa_fisica, 
	--	f.cd_cgc 
	
union
 
	-- Tentativas de cobrança 
	SELECT	a.cd_pessoa_fisica, 
		a.cd_cgc 
	from	pls_evento_ocorrencia d, 
		pls_atendimento_evento c, 
		pls_atendimento a 
	where	a.nr_sequencia		= c.nr_seq_atendimento 
	and	c.nr_seq_evento		= d.nr_sequencia 
	and	d.ie_acao_evento 	= 11 
	and	a.nm_usuario_nrec	= nm_usuario_oper_w 
	and (a.dt_inicio between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) or ie_tipo_data_p <> 'R') 
	and	d.cd_estabelecimento = cd_estabelecimento_p 
	-- Fazer ainda mais dois and exists para a inclusao e vencimento 
	group by 
		a.cd_pessoa_fisica, 
		a.cd_cgc;	-- Retirado para que não sejam apresentadas tentativas sem sucesso. - ebcabral - OS 475608 - 03/10/2012	-- RETIRADO O RETIRADO OS 563648 / 38038 
BEGIN 
 
delete from w_cobr_desemp_item_hist 
where	nm_usuario	= nm_usuario_p;
 
delete from w_cobr_desempenho_item 
where	nm_usuario	= nm_usuario_p;
 
delete from w_cobranca_desempenho 
where	nm_usuario	= nm_usuario_p;
 
open C01;
loop 
fetch C01 into	 
	nr_seq_cobrador_w;
EXIT WHEN NOT FOUND; /* apply on C01 */
	begin 
	select	max(c.nm_usuario), 
		max(c.cd_pessoa_fisica) 
	into STRICT	nm_usuario_oper_w, 
		cd_pf_cobrador_w 
	from	usuario		c, 
		pessoa_fisica	b, 
		cobrador	a 
	where	a.cd_pessoa_fisica	= b.cd_pessoa_fisica 
	and	c.cd_pessoa_fisica	= b.cd_pessoa_fisica 
	and	a.nr_sequencia		= nr_seq_cobrador_w;
	 
	open C02;
	loop 
	fetch C02 into	 
		qt_meta_regra_w, 
		ie_periodo_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin 
		if (ie_periodo_w = 'D') then 
			qt_meta_definida_w	:= qt_meta_regra_w * (fim_dia(dt_final_p) - trunc(dt_inicial_p,'dd'));
		elsif (ie_periodo_w = 'S') then 
			qt_meta_definida_w	:= qt_meta_regra_w * round((fim_dia(dt_final_p) - trunc(dt_inicial_p,'dd'))/7);
		elsif (ie_periodo_w = 'M') then 
			qt_meta_definida_w	:= qt_meta_regra_w * round((fim_dia(dt_final_p) - trunc(dt_inicial_p,'dd'))/30);
		end if;
		end;
	end loop;
	close C02;
	 
	select	nextval('w_cobranca_desempenho_seq') 
	into STRICT	nr_seq_desempenho_w 
	;
	 
	insert into w_cobranca_desempenho(nr_sequencia, 
		nm_usuario, 
		dt_atualizacao, 
		nm_usuario_nrec, 
		dt_atualizacao_nrec, 
		nr_seq_cobrador, 
		qt_meta_definida, 
		qt_registro_cobr, 
		qt_registro_sucesso, 
		vl_cobrado, 
		vl_pago, 
		cd_estabelecimento) 
	values (nr_seq_desempenho_w, 
		nm_usuario_p, 
		clock_timestamp(), 
		nm_usuario_p, 
		clock_timestamp(), 
		nr_seq_cobrador_w, 
		qt_meta_definida_w, 
		0, 
		0, 
		0, 
		0, 
		cd_estabelecimento_p);
	 
	open C03;
	loop 
	fetch C03 into	 
		cd_pessoa_fisica_w, 
		cd_cgc_w;
	EXIT WHEN NOT FOUND; /* apply on C03 */
		begin 
		 
		CALL gerar_w_desempenho_cobr_item(	nr_seq_cobranca_ww, 
						nr_seq_desempenho_w, 
						cd_pessoa_fisica_w, 
						cd_cgc_w, 
						ie_tipo_data_p, 
						dt_inicial_p, 
						dt_final_p, 
						nr_seq_historico_p, 
						nr_seq_grupo_cobr_p, 
						ie_situacao_contrato_p, 
						nm_usuario_oper_w, 
						cd_estabelecimento_p, 
						nm_usuario_p);								
		end;
	end loop;
	close C03;
	 
	/* Obter quantidade de registros de cobrança */
 
	qt_registro_w			:= 0;
	qt_registro_sucesso_w		:= 0;
	qt_registro_outro_w		:= 0;
	qt_registro_sucesso_outro_w	:= 0;
	qt_registro_antend_w	:= 0;
	 
	select	coalesce(sum(qt_registro),0), 
		coalesce(sum(qt_registro_sucesso),0), 
		coalesce(sum(vl_cobranca),0), 
		coalesce(sum(vl_pago),0) 
	into STRICT	qt_registro_w, 
		qt_registro_sucesso_w, 
		vl_cobranca_total_w, 
		vl_pago_total_w 
	from	w_cobr_desempenho_item 
	where	nr_seq_desempenho	= nr_seq_desempenho_w;	
	 
	/* Obter tentativas de contato */
 
	select	count(1) 
	into STRICT	qt_tentativas_w 
	from	pls_evento_ocorrencia d, 
		pls_atendimento_evento c, 
		pls_atendimento a 
	where	a.nr_sequencia		= c.nr_seq_atendimento 
	and	c.nr_seq_evento		= d.nr_sequencia 
	and	d.ie_acao_evento 	= 11 
	and	a.cd_pessoa_fisica	= cd_pf_cobrador_w 
	and	a.dt_inicio between trunc(dt_inicial_p,'dd') and fim_dia(dt_final_p) 
	and	d.cd_estabelecimento	= cd_estabelecimento_p;
	 
	qt_registro_w		:= qt_registro_w + qt_tentativas_w;
	qt_registro_sucesso_w	:= qt_registro_sucesso_w;
	 
	update	w_cobranca_desempenho 
	set	qt_registro_cobr	= qt_registro_cobr + qt_registro_w, 
		qt_registro_sucesso	= qt_registro_sucesso + qt_registro_sucesso_w, 
		vl_cobrado		= vl_cobrado + vl_cobranca_total_w, 
		vl_pago			= vl_pago + vl_pago_total_w 
	where	nr_sequencia		= nr_seq_desempenho_w;
	 
	update	w_cobranca_desempenho 
	set	pr_meta_atingido	= dividir_sem_round(qt_registro_cobr,qt_meta_definida) * 100 
	where	nr_sequencia		= nr_seq_desempenho_w;
	 
	end;
end loop;
close C01;
 
cd_pessoa_fisica_w	:= '';
 
select	Obter_Dados_Usuario_Opcao(nm_usuario_p, 'C') 
into STRICT	cd_pessoa_fisica_w
;
 
select	max(a.nr_sequencia) 
into STRICT	nr_seq_grupo_w 
from	grupo_cobranca_membro b, 
	grupo_cobranca a	 
where	b.nr_seq_grupo		= a.nr_sequencia 
and	b.nr_seq_cobrador	= nr_seq_cobrador_p;
	 
/* Obter o valor total a cobrar do usuário logado */
 
select	coalesce(sum(a.vl_acobrar),0) 
into STRICT	vl_cobrar_resp_w 
from	cobrador b, 
	cobranca a 
where	a.nr_seq_cobrador	= b.nr_sequencia 
and	b.cd_pessoa_fisica	= cd_pessoa_fisica_w 
and	a.cd_estabelecimento	= cd_estabelecimento_p;
 
/* Obter o valor total a cobrar */
 
select	coalesce(sum(a.vl_acobrar),0) 
into STRICT	vl_total_w 
from	cobranca a 
where	a.cd_estabelecimento	= cd_estabelecimento_p;
 
/* Obter valor total a cobrar da equipe */
 
select	coalesce(sum(c.vl_acobrar),0) 
into STRICT	vl_cobranca_equipe_w 
from	cobranca c, 
	cobrador b, 
	grupo_cobranca_membro a 
where	a.nr_seq_cobrador	= b.nr_sequencia 
and	c.nr_seq_cobrador	= b.nr_sequencia 
and	a.nr_seq_grupo		= nr_seq_grupo_w 
and	c.cd_estabelecimento	= cd_estabelecimento_p;
 
update	w_cobranca_desempenho 
set	vl_cobrar_resp		= vl_cobrar_resp_w, 
	vl_cobranca_total    = vl_total_w, 
	vl_cobranca_equipe	= vl_cobranca_equipe_w 
where	nr_sequencia		= nr_seq_desempenho_w;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_w_desempenho_cobranca ( nr_seq_grupo_cobr_p bigint, nr_seq_cobrador_p bigint, ie_tipo_data_p text, dt_inicial_p timestamp, dt_final_p timestamp, nr_seq_historico_p bigint, ie_situacao_contrato_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

