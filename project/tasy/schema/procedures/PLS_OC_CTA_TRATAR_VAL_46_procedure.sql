-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_oc_cta_tratar_val_46 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:	Aplicar a validação de quantidade de itens sobre os itens que estão na tabela de seleção.
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
------------------------------------------------------------------------------------------------------------------
Pontos de atenção:

Alterações:
------------------------------------------------------------------------------------------------------------------
jjung OS 643681 - Ciração da procedure.
------------------------------------------------------------------------------------------------------------------
dlehmkuhl OS 688483 - 14/04/2014 -

Alteração:	Modificada a forma de trabalho em relação a atualização dos campos de controle
	que basicamente decidem se a ocorrência será ou não gerada. Foi feita também a
	substituição da rotina obterX_seX_geraX.

Motivo:	Necessário realizar essas alterações para corrigir bugs principalmente no que se
	refere a questão de aplicação de filtros (passo anterior ao da validação). Também
	tivemos um foco especial em performance, visto que a mesma precisou ser melhorada
	para não inviabilizar a nova solicitação que diz que a exceção deve verificar todo
	o atendimento.
------------------------------------------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
dados_restricao_w	pls_tipos_ocor_pck.dados_restricao_select;
dados_validacao_w	pls_tipos_ocor_pck.dados_val_qt_item;
dados_tab_selecao_w	pls_tipos_ocor_pck.dados_tab_selecao;

var_cur_w		integer;
var_exec_w		integer;
var_retorno_w		integer;

ds_sql_w		varchar(4000);
tb_seq_selecao_w	dbms_sql.number_table;
tb_observacao_w		dbms_sql.varchar2_table;
tb_valido_w		dbms_sql.varchar2_table;
v_cur			pls_util_pck.t_cursor;
qt_cnt_w		integer;

-- Obter as regras da validação.
c_regras_val CURSOR(	nr_seq_oc_cta_combinada_p	pls_oc_cta_combinada.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_validacao,
		a.qt_minima,
		a.qt_maxima
	from	pls_oc_cta_val_v46 a
	where	a.nr_seq_oc_cta_comb = nr_seq_oc_cta_combinada_p;

BEGIN

-- Deve ter informação de uma regra válida para que seja aplicada a validação.
if (dados_regra_p.nr_sequencia IS NOT NULL AND dados_regra_p.nr_sequencia::text <> '') then

	--Quantidade de registros para a transação
	qt_cnt_w := pls_cta_consistir_pck.qt_registro_transacao_w;

	-- Aqui irá varrer as regras cadastradas para a validação, para esta validação por enquanto só é permitida uma regra, portanto será
	-- passado apenas uma vez.
	for	r_c_regras_val_w in c_regras_val(dados_regra_p.nr_sequencia) loop

		-- tratamento em campo auxiliar para identificar posteriormente os registros que foram alterados
		CALL pls_tipos_ocor_pck.atualiza_campo_auxiliar('V', nr_id_transacao_p, null, dados_regra_p);

		-- Atualizar os dados validação.
		dados_validacao_w.nr_sequencia		:= r_c_regras_val_w.nr_seq_validacao;
		dados_validacao_w.qt_minima		:= r_c_regras_val_w.qt_minima;
		dados_validacao_w.qt_maxima		:= r_c_regras_val_w.qt_maxima;

		-- Obter a restrição que será usada para buscar as contas e itens aos quais deve ser gerada a ocorrência.
		dados_restricao_w := pls_oc_cta_obter_restr_val_46(	'RESTRICAO', var_cur_w,
									dados_regra_p, nr_id_transacao_p,
									dados_validacao_w);

		-- Montar o select que será usado para buscar os itens aos quais deve ser gerada a ocorrência.
		ds_sql_w :=	'select	sel.nr_sequencia nr_seq_selecao, ' || pls_tipos_ocor_pck.enter_w ||
				' 	''S'' ie_registro_valido, ' ||pls_tipos_ocor_pck.enter_w||
				' 	null ds_obervacao ' ||pls_tipos_ocor_pck.enter_w||
				'from	pls_oc_cta_selecao_ocor_v	sel, ' || pls_tipos_ocor_pck.enter_w ||
				'	pls_conta_proc_ocor_v		proc ' || pls_tipos_ocor_pck.enter_w ||
				'where	sel.nr_id_transacao = :nr_id_transacao ' || pls_tipos_ocor_pck.enter_w ||
				'and	sel.ie_valido = ''S'' ' || pls_tipos_ocor_pck.enter_w ||
				'and	sel.ie_tipo_registro = ''P'' ' || pls_tipos_ocor_pck.enter_w ||
				'and	proc.nr_sequencia = sel.nr_seq_conta_proc ' ||
				dados_restricao_w.ds_restricao_proc || pls_tipos_ocor_pck.enter_w ||
				'union all' || pls_tipos_ocor_pck.enter_w ||
				'select	sel.nr_sequencia nr_seq_selecao, ' || pls_tipos_ocor_pck.enter_w ||
				'	 ''S'' ie_registro_valido, ' ||pls_tipos_ocor_pck.enter_w||
				'	 null ds_obervacao ' ||pls_tipos_ocor_pck.enter_w||
				'from	pls_oc_cta_selecao_ocor_v	sel, ' || pls_tipos_ocor_pck.enter_w ||
				'	pls_conta_mat_ocor_v		mat ' || pls_tipos_ocor_pck.enter_w ||
				'where	sel.nr_id_transacao = :nr_id_transacao ' || pls_tipos_ocor_pck.enter_w ||
				'and	sel.ie_valido = ''S'' ' || pls_tipos_ocor_pck.enter_w ||
				'and	sel.ie_tipo_registro = ''M'' ' || pls_tipos_ocor_pck.enter_w ||
				'and	mat.nr_sequencia = sel.nr_seq_conta_mat ' ||
				dados_restricao_w.ds_restricao_mat;

	 	-- Comço do tratamento de exceção do sql dinâmico.
		begin
			-- Abrir um novo cursor que irá varrer os registros aos quais deve ser gerada a ocorrência.
			var_cur_w := dbms_sql.open_cursor;
			dbms_sql.parse(var_cur_w,  ds_sql_w, dbms_sql.native);
			-- Atualizar o valor das binds para execução do select.
			dados_restricao_w := pls_oc_cta_obter_restr_val_46(	'BINDS', var_cur_w,
										dados_regra_p, nr_id_transacao_p,
										dados_validacao_w);

			--- Preparar o retorno do select para que seja possível para o Oracle executar o fetch nas variáveis.
			dbms_sql.define_array(var_cur_w, 1, tb_seq_selecao_w, qt_cnt_w, 1 );
			dbms_sql.define_array(var_cur_w, 2, tb_valido_w, qt_cnt_w, 1 );
			dbms_sql.define_array(var_cur_w, 3, tb_observacao_w, qt_cnt_w, 1 );

			-- Executar o select e varrer seu retorno.
			var_exec_w := dbms_sql.execute(var_cur_w);
			loop
			var_retorno_w := dbms_sql.fetch_rows(var_cur_w);

				tb_seq_selecao_w.delete;
				tb_observacao_w.delete;
				tb_valido_w.delete;

				 -- Obter os valores da linha atual do cursor.
				dbms_sql.column_value(var_cur_w, 1, tb_seq_selecao_w);
				dbms_sql.column_value(var_cur_w, 2, tb_valido_w);
				dbms_sql.column_value(var_cur_w, 3, tb_observacao_w);

				-- Marcar como válido o item para a regra de quantidade de itens.
				CALL pls_tipos_ocor_pck.gerencia_selecao_validacao( tb_seq_selecao_w, pls_util_cta_pck.clob_table_vazia_w, 'SEQ', tb_observacao_w,
										tb_valido_w, nm_usuario_p);

				exit when var_retorno_w <> qt_cnt_w;
			end loop;
			dbms_sql.close_cursor(var_cur_w); -- itens para gerar ocorrência.
		exception
		when others then
			-- Insere o log na tabela e aborta a operação
			dbms_sql.close_cursor(var_cur_w);
			CALL pls_tipos_ocor_pck.trata_erro_sql_dinamico(dados_regra_p, ds_sql_w, nr_id_transacao_p, nm_usuario_p);
		end;

	end loop; -- c_regras_val
	-- seta os registros que serão válidos ou inválidos após o processamento
	CALL pls_tipos_ocor_pck.atualiza_campo_valido('V', nr_id_transacao_p, null, dados_regra_p);
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_oc_cta_tratar_val_46 ( dados_regra_p pls_tipos_ocor_pck.dados_regra, nr_id_transacao_p pls_oc_cta_selecao_ocor_v.nr_id_transacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

