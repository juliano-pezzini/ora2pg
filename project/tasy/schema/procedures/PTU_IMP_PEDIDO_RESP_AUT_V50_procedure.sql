-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ptu_imp_pedido_resp_aut_v50 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Finalidade: Importar pedido de resposta de autorização. 
ROTINA UTILIZADA NAS TRANSAÇÕES PTU VIA SCS HOMOLOGADAS COM A UNIMED BRASIL. 
QUANDO FOR ALTERAR, FAVOR VERIFICAR COM O ANÁLISTA RESPONSÁVEL PARA A REALIZAÇÃO DE TESTES. 
------------------------------------------------------------------------------------------------------------------- 
Locais de chamada direta: 
[ X ] Objetos do dicionário [ ] Tasy (Delphi/Java) [ ] Portal [ ] Relatórios [ ] Outros: 
 ------------------------------------------------------------------------------------------------------------------ 
Pontos de atenção: 
Performance 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
 
 
ie_tipo_tabela_w		varchar(2);
cd_servico_w			integer;
ds_servico_w			varchar(80);
qt_autorizada_w			varchar(8);
ie_autorizado_w			smallint;
cd_mens_espec_1			smallint;
cd_mens_espec_2			smallint;
cd_mens_espec_3			smallint;
cd_mens_espec_4			smallint;
cd_mens_espec_5			smallint;
ie_status_w			varchar(2);
ie_status_ww			varchar(2);
nr_seq_execucao_w		bigint;
cd_usuario_plano_w		varchar(13);
ds_conteudo_w			varchar(4000);
qt_registros_ww			smallint;
qt_registros_w			smallint;
ds_observacao_w			varchar(999);
qt_reg_aprov_w			smallint;
qt_reg_aprov_ww			smallint;
qt_reg_neg_w			smallint;
qt_reg_neg_ww			smallint;
nr_seq_requisicao_w		bigint;
dt_atendimento_w		timestamp;
dt_validade_senha_w		timestamp;
dt_atendimento_ww		varchar(10);
cd_transacao_w			varchar(5);
ie_tipo_cliente_w		varchar(15);
cd_unimed_exec_w		smallint;
cd_unimed_benef_w		smallint;
nr_seq_origem_w			bigint;
cd_unimed_w			smallint;
nm_beneficiario_w		varchar(25);
ie_origem_proced_w		bigint;
nr_seq_resp_novo_w		bigint;
nr_seq_guia_w			bigint;
nr_seq_import_w			smallint;
nr_seq_transacao_w		bigint;
ie_tipo_transacao_w		varchar(3);
ie_tipo_resposta_w		varchar(2);
nr_seq_material_w		bigint;
nr_seq_procedimento_w		bigint;
nr_seq_pedido_compl_w		bigint;
nr_seq_pedido_aut_w		bigint;
nr_seq_ped_aut_compl_serv_w	bigint;
ie_tipo_autorizacao_w		varchar(2);
ie_tipo_acomodacao_w		varchar(2);
nr_seq_req_proc_w		bigint;
nr_seq_req_mat_w		bigint;
nr_seq_guia_mat_w		bigint;
nr_seq_guia_proc_w		bigint;
nr_seq_regra_senha_w		bigint;
cd_senha_w			varchar(20);
qt_reg_generico_w		bigint;
nr_versao_w			varchar(3);
ie_sexo_w			varchar(1);
dt_nascimento_w			timestamp;
dt_nascimento_ww		varchar(10);
ds_mensagem_espec_w		varchar(999);
qt_procedimento_ww		double precision;
qt_material_ww			double precision;
ie_gerar_senha_interna_w	varchar(1);
ie_controle_estab_w		varchar(2);

nr_seq_ordem_w			ptu_pedido_autorizacao.nr_seq_ordem%type;
nr_seq_ordem_ser_w		ptu_requisicao_ordem_serv.nr_sequencia%type;
cd_unimed_beneficiario_w	ptu_requisicao_ordem_serv.cd_unimed_beneficiario%type;
cd_unimed_solicitante_w		ptu_requisicao_ordem_serv.cd_unimed_solicitante%type;

ie_origem_solic_w		pls_requisicao.ie_origem_solic%type;
ie_estagio_w			pls_requisicao.ie_estagio%type;

c01 CURSOR FOR 
	SELECT	nr_seq_importacao, 
		ds_valores 
	from	w_scs_importacao 
	where	nm_usuario	= nm_usuario_p 
	order by nr_seq_importacao;


BEGIN 
-- Verificar o parâmetro na função OPS - Gestão de Operadoras / Parâmetros OPS / Intercâmbio / Intercâmbio SCS 
begin 
	select	ie_gerar_senha_interna 
	into STRICT	ie_gerar_senha_interna_w 
	from	pls_param_intercambio_scs;
exception 
when others then 
	ie_gerar_senha_interna_w	:= null;
end;
 
begin 
	select	pls_obter_se_controle_estab('RE') 
	into STRICT	ie_controle_estab_w 
	;
exception 
when others then 
	ie_controle_estab_w	:= 'N';
end;
 
open c01;
loop 
fetch c01 into 
	nr_seq_import_w, 
	ds_conteudo_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin 
	if (substr(ds_conteudo_w,1,4)	<> 'FIM$') then 
		if (nr_seq_import_w	= 1) then 
			cd_transacao_w		:= substr(ds_conteudo_w,1,5);
			ie_tipo_cliente_w	:= trim(both substr(ds_conteudo_w,6,15));
			cd_unimed_exec_w	:= (substr(ds_conteudo_w,21,4))::numeric;
			cd_unimed_benef_w	:= (substr(ds_conteudo_w,25,4))::numeric;
			nr_seq_execucao_w	:= (substr(ds_conteudo_w,29,10))::numeric;
			nr_seq_origem_w		:= (substr(ds_conteudo_w,39,10))::numeric;
			cd_unimed_w		:= (substr(ds_conteudo_w,49,4))::numeric;
			cd_usuario_plano_w	:= trim(both substr(ds_conteudo_w,53,13));
			nm_beneficiario_w	:= coalesce(trim(both substr(ds_conteudo_w,66,25)),'Beneficiario inexistente');
			dt_atendimento_ww	:= trim(both substr(ds_conteudo_w,97,2)||substr(ds_conteudo_w,95,2)||substr(ds_conteudo_w,91,4));
			ie_tipo_autorizacao_w	:= trim(both substr(ds_conteudo_w,99,1));
			ie_tipo_acomodacao_w	:= trim(both substr(ds_conteudo_w,100,2));
			nr_versao_w		:= trim(both substr(ds_conteudo_w,102,3));
			ie_sexo_w		:= trim(both substr(ds_conteudo_w,105,1));
			dt_nascimento_ww	:= trim(both substr(ds_conteudo_w,112,2)||substr(ds_conteudo_w,110,2)||substr(ds_conteudo_w,106,4));
 
			if (coalesce(dt_atendimento_ww,'X')	<> 'X') then 
				begin 
					dt_atendimento_w	:= to_date(dt_atendimento_ww, 'dd/mm/rrrr');
				exception 
				when others then 
					dt_atendimento_w	:= clock_timestamp();
				end;
			end if;
 
			if (coalesce(dt_nascimento_ww,'X')	<> 'X') then 
				begin 
					dt_nascimento_w	:= to_date(dt_atendimento_ww, 'dd/mm/rrrr');
				exception 
				when others then 
					dt_nascimento_w	:= null;
				end;
			end if;
 
			select	coalesce(nr_seq_pedido_compl,0), 
				coalesce(nr_seq_pedido_aut,0) 
			into STRICT	nr_seq_pedido_compl_w, 
				nr_seq_pedido_aut_w 
			from	ptu_controle_execucao 
			where	nr_sequencia	= nr_seq_execucao_w;
 
			if (nr_seq_pedido_compl_w	<> 0) then 
				select	nr_seq_guia, 
					nr_seq_requisicao 
				into STRICT	nr_seq_guia_w, 
					nr_seq_requisicao_w 
				from	ptu_pedido_compl_aut 
				where	nr_sequencia	= nr_seq_pedido_compl_w;
 
				ie_tipo_resposta_w	:= 'PC';
			elsif (nr_seq_pedido_aut_w	<> 0) then 
				select	nr_seq_guia, 
					nr_seq_requisicao 
				into STRICT	nr_seq_guia_w, 
					nr_seq_requisicao_w 
				from	ptu_pedido_autorizacao 
				where	nr_sequencia	= nr_seq_pedido_aut_w;
 
				ie_tipo_resposta_w	:= 'PA';
			end if;
 
			select	nextval('ptu_resposta_autorizacao_seq') 
			into STRICT	nr_seq_resp_novo_w 
			;
 
			if (ie_tipo_cliente_w	= 'UNIMED') then 
				ie_tipo_cliente_w	:= 'U';
			elsif (ie_tipo_cliente_w	= 'PORTAL') then 
				ie_tipo_cliente_w	:= 'P';
			elsif (ie_tipo_cliente_w	= 'PRESTADOR') then 
				ie_tipo_cliente_w	:= 'R';
			end if;
 
			insert	into ptu_resposta_autorizacao(nr_sequencia, cd_unimed_executora, cd_unimed_beneficiario, 
				 nr_seq_execucao, nr_seq_requisicao, cd_unimed, 
				 cd_usuario_plano, nm_beneficiario, dt_atualizacao, 
				 nm_usuario, dt_validade, ie_tipo_cliente, 
				 nr_seq_origem, nr_seq_guia, cd_transacao, 
				 ie_tipo_resposta, ds_arquivo_pedido, ie_tipo_autorizacao, 
				 ie_tipo_acomodacao, nm_usuario_nrec, dt_atualizacao_nrec, 
				 nr_versao, ie_sexo, dt_nasc_beneficiario) 
			values (nr_seq_resp_novo_w, cd_unimed_exec_w, cd_unimed_benef_w, 
				 nr_seq_execucao_w, nr_seq_requisicao_w, cd_unimed_w, 
				 cd_usuario_plano_w, nm_beneficiario_w, clock_timestamp(), 
				 nm_usuario_p, dt_atendimento_w, ie_tipo_cliente_w, 
				 coalesce(nr_seq_origem_w,0), nr_seq_guia_w, cd_transacao_w, 
				 ie_tipo_resposta_w, ds_arquivo_p, ie_tipo_autorizacao_w, 
				 ie_tipo_acomodacao_w, nm_usuario_p, clock_timestamp(), 
				 nr_versao_w, ie_sexo_w, dt_nascimento_w);
		elsif (nr_seq_import_w	= 2) then 
			ds_observacao_w	:= trim(both substr(ds_conteudo_w,1,999));
 
			if (ds_observacao_w IS NOT NULL AND ds_observacao_w::text <> '') then 
				update	ptu_resposta_autorizacao 
				set	ds_observacao	= ds_observacao_w 
				where	nr_sequencia	= nr_seq_resp_novo_w;
			end if;
		elsif (substr(ds_conteudo_w,1,1) in ('0','1','2','3', '4')) then 
			ie_tipo_tabela_w	:= substr(ds_conteudo_w,1,1);
			cd_servico_w		:= (substr(ds_conteudo_w,2,8))::numeric;
			ds_servico_w		:= trim(both substr(ds_conteudo_w,10,80));
			qt_autorizada_w		:= substr(ds_conteudo_w,90,8);
			ie_autorizado_w		:= (substr(ds_conteudo_w,98,1))::numeric;
			cd_mens_espec_1		:= (substr(ds_conteudo_w,99,4))::numeric;
			cd_mens_espec_2		:= (substr(ds_conteudo_w,103,4))::numeric;
			cd_mens_espec_3		:= (substr(ds_conteudo_w,107,4))::numeric;
			cd_mens_espec_4		:= (substr(ds_conteudo_w,111,4))::numeric;
			cd_mens_espec_5		:= (substr(ds_conteudo_w,115,4))::numeric;
			ds_mensagem_espec_w	:= trim(both substr(ds_conteudo_w,119,999));
 
			if (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '')then 
				nr_seq_transacao_w 	:= nr_seq_guia_w;
				ie_tipo_transacao_w	:= 'G';
			else 
				nr_seq_transacao_w	:= nr_seq_requisicao_w;
				ie_tipo_transacao_w	:= 'R';
			end if;
 
			if (ie_autorizado_w = 1) then 
				ie_status_w	:= 'N';
				ie_status_ww	:= 2;
			elsif (ie_autorizado_w = 2) then 
				ie_status_w	:= 'S';
				ie_status_ww	:= 1;
			elsif (ie_autorizado_w = 3) then 
				ie_status_w	:= 'A';
				ie_status_ww	:= 4;
			elsif (ie_autorizado_w = 4) then 
				ie_status_w	:= 'A';
				ie_status_ww	:= 4;
			end if;
 
			begin 
				qt_procedimento_ww	:= (ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w,'R'))::numeric;
			exception 
			when others then 
				qt_procedimento_ww 	:= (replace(ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w,'R'),',','.'))::numeric;
			end;
 
			select	count(1) 
			into STRICT	qt_reg_generico_w 
			from	pls_regra_generico_ptu 
			where	cd_proc_mat_generico	= cd_servico_w 
			and	ie_situacao		= 'A';
 
			if (ie_tipo_tabela_w	in ('0','1','4')) then 
				if (coalesce(nr_seq_pedido_aut_w,0)	<> 0) then 
					if (qt_reg_generico_w > 0) then 
						begin 
							select	nr_sequencia, 
								nr_seq_req_proc, 
								nr_seq_guia_proc 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_proc_w, 
								nr_seq_guia_proc_w 
							from	ptu_pedido_aut_servico 
							where	nr_seq_pedido					= nr_seq_pedido_aut_w 
							and	ie_tipo_tabela					= ie_tipo_tabela_w 
							and	coalesce(cd_servico_consersao,cd_servico)		= cd_servico_w 
							and	((ds_opme IS NOT NULL AND ds_opme::text <> '') and (trim(both upper(elimina_acentuacao(ds_opme)))	= trim(both upper(ds_servico_w))) 
							or (coalesce(ds_opme::text, '') = ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
						end;
					else 
						begin 
							select	nr_sequencia, 
								nr_seq_req_proc, 
								nr_seq_guia_proc 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_proc_w, 
								nr_seq_guia_proc_w 
							from	ptu_pedido_aut_servico 
							where	nr_seq_pedido			= nr_seq_pedido_aut_w 
							and	ie_tipo_tabela			= ie_tipo_tabela_w 
							and	coalesce(cd_servico_consersao,cd_servico)			= cd_servico_w;
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
						end;
					end if;
				elsif (coalesce(nr_seq_pedido_compl_w,0)	<> 0) then 
					if (qt_reg_generico_w > 0) then 
						begin 
							select	nr_sequencia, 
								nr_seq_req_proc, 
								nr_seq_guia_proc 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_proc_w, 
								nr_seq_guia_proc_w 
							from	ptu_pedido_compl_aut_serv 
							where	nr_seq_pedido					= nr_seq_pedido_compl_w 
							and	ie_tipo_tabela					= ie_tipo_tabela_w 
							and	coalesce(cd_servico_conversao,cd_servico)		= cd_servico_w 
							and	((ds_opme IS NOT NULL AND ds_opme::text <> '') and (trim(both upper(elimina_acentuacao(ds_opme)))	= trim(both upper(ds_servico_w))) 
							or (coalesce(ds_opme::text, '') = ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
						end;
					else 
						begin 
							select	nr_sequencia, 
								nr_seq_req_proc, 
								nr_seq_guia_proc 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_proc_w, 
								nr_seq_guia_proc_w 
							from	ptu_pedido_compl_aut_serv 
							where	nr_seq_pedido			= nr_seq_pedido_compl_w 
							and	ie_tipo_tabela			= ie_tipo_tabela_w 
							and	coalesce(cd_servico_conversao,cd_servico)			= cd_servico_w;
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
						end;
					end if;
				end if;
 
				--cd_servico_conversao_w	:= ptu_obter_servico_conversao(cd_servico_w, nr_seq_pedido_aut_w, nr_seq_ped_aut_compl_serv_w, 'RA'); 
				nr_seq_procedimento_w	:= coalesce(nr_seq_guia_proc_w,nr_seq_req_proc_w);
 
				if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then 
					if (ie_status_w	in ('A','N')) then 
						update	pls_requisicao_proc 
						set	ie_status		= ie_status_w, 
							qt_procedimento		= 0 
						where	nr_sequencia		= nr_seq_req_proc_w;
					else 
						update	pls_requisicao_proc 
						set	ie_status		= ie_status_w, 
							qt_procedimento		= (qt_procedimento_ww)::numeric  
						where	nr_sequencia		= nr_seq_req_proc_w;
					end if;
				elsif (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then 
					if (ie_status_w	in ('A','N')) then 
						update	pls_guia_plano_proc 
						set	ie_status		= ie_status_w, 
							qt_autorizada		= 0 
						where	nr_sequencia		= nr_seq_guia_proc_w;
					else 
						update	pls_guia_plano_proc 
						set	ie_status		= ie_status_w, 
							qt_autorizada		= (qt_procedimento_ww)::numeric  
						where	nr_sequencia		= nr_seq_guia_proc_w;
					end if;
				end if;
 
				if (cd_mens_espec_1	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_1,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_2	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_2,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_3	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_3,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_4	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_4,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_5	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_5,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, nr_seq_procedimento_w, null, null, nm_usuario_p);
				end if;
 
				select	max(ie_origem_proced) 
				into STRICT	ie_origem_proced_w 
				from  procedimento 
				where  cd_procedimento	= cd_servico_w 
				and	ie_situacao	= 'A';
 
				 
				insert	into ptu_resposta_aut_servico(nr_sequencia, nr_seq_pedido, ie_tipo_tabela, 
					 cd_servico, ds_servico, ie_autorizado, 
					 dt_atualizacao, nm_usuario, qt_autorizado, 
					 ie_origem_servico, nr_seq_guia_proc, nr_seq_req_proc, 
					 nm_usuario_nrec, dt_atualizacao_nrec) 
				values (nextval('ptu_resposta_aut_servico_seq'), nr_seq_resp_novo_w, ie_tipo_tabela_w, 
					 cd_servico_w, coalesce(ds_servico_w,'Não informado'), ie_autorizado_w, 
					 clock_timestamp(), nm_usuario_p, (qt_procedimento_ww)::numeric , 
					 ie_origem_proced_w, nr_seq_guia_proc_w, nr_seq_req_proc_w, 
					 nm_usuario_p, clock_timestamp());
 
			elsif (ie_tipo_tabela_w	in ('2','3')) then 
				if (coalesce(nr_seq_pedido_aut_w,0)	<> 0) then 
					if (qt_reg_generico_w > 0) then 
						begin 
							select	nr_sequencia, 
								nr_seq_req_mat, 
								nr_seq_guia_mat 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_mat_w, 
								nr_seq_guia_mat_w 
							from	ptu_pedido_aut_servico 
							where	nr_seq_pedido					= nr_seq_pedido_aut_w 
							and	ie_tipo_tabela					= ie_tipo_tabela_w 
							and	coalesce(cd_servico_consersao,cd_servico)		= cd_servico_w 
							and	((ds_opme IS NOT NULL AND ds_opme::text <> '') and (trim(both upper(ds_opme))	= trim(both upper(ds_servico_w))) 
							or (coalesce(ds_opme::text, '') = ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
						end;
					else 
						begin 
							select	nr_sequencia, 
								nr_seq_req_mat, 
								nr_seq_guia_mat 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_mat_w, 
								nr_seq_guia_mat_w 
							from	ptu_pedido_aut_servico 
							where	nr_seq_pedido			= nr_seq_pedido_aut_w 
							and	ie_tipo_tabela			= ie_tipo_tabela_w 
							and	coalesce(cd_servico_consersao,cd_servico)			= cd_servico_w;
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
						end;
					end if;
				elsif (coalesce(nr_seq_pedido_compl_w,0)	<> 0) then 
					if (qt_reg_generico_w > 0) then 
						begin 
							select	nr_sequencia, 
								nr_seq_req_mat, 
								nr_seq_guia_mat 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_mat_w, 
								nr_seq_guia_mat_w 
							from	ptu_pedido_compl_aut_serv 
							where	nr_seq_pedido					= nr_seq_pedido_compl_w 
							and	ie_tipo_tabela					= ie_tipo_tabela_w 
							and	coalesce(cd_servico_conversao,cd_servico)		= cd_servico_w 
							and	((ds_opme IS NOT NULL AND ds_opme::text <> '') and (trim(both upper(elimina_acentuacao(ds_opme)))	= trim(both upper(ds_servico_w))) 
							or (coalesce(ds_opme::text, '') = ''));
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
						end;
					else 
						begin 
							select	nr_sequencia, 
								nr_seq_req_mat, 
								nr_seq_guia_mat 
							into STRICT	nr_seq_ped_aut_compl_serv_w, 
								nr_seq_req_mat_w, 
								nr_seq_guia_mat_w 
							from	ptu_pedido_compl_aut_serv 
							where	nr_seq_pedido			= nr_seq_pedido_compl_w 
							and	ie_tipo_tabela			= ie_tipo_tabela_w 
							and	coalesce(cd_servico_conversao,cd_servico)			= cd_servico_w;
						exception 
						when others then 
							nr_seq_ped_aut_compl_serv_w	:= null;
							nr_seq_req_proc_w		:= null;
							nr_seq_guia_proc_w		:= null;
						end;
					end if;
				end if;
 
				--cd_servico_conversao_w	:= ptu_obter_servico_conversao(cd_servico_w, nr_seq_pedido_aut_w, nr_seq_ped_aut_compl_serv_w, 'RA'); 
				nr_seq_material_w	:= coalesce(nr_seq_guia_mat_w,nr_seq_req_mat_w);
 
				begin 
					qt_material_ww	:= (ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w,'R'))::numeric;
				exception 
				when others then 
					qt_material_ww := (replace(ptu_obter_qtd_env_itens_scs(null, qt_autorizada_w,'R'),',','.'))::numeric;
				end;
	 
				if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then 
					if (ie_status_w	in ('A','N')) then 
						update	pls_requisicao_mat 
						set	ie_status	= ie_status_w, 
							qt_material	= 0 
						where	nr_sequencia	= nr_seq_req_mat_w;
					else 
						update	pls_requisicao_mat 
						set	ie_status	= ie_status_w, 
							qt_material	= (qt_material_ww)::numeric  
						where	nr_sequencia	= nr_seq_req_mat_w;
					end if;
				elsif (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then 
					if (ie_status_w	in ('A','N')) then 
						update	pls_guia_plano_mat 
						set	ie_status	= ie_status_w, 
							qt_autorizada	= 0 
						where	nr_sequencia	= nr_seq_guia_mat_w;
					else 
						update	pls_guia_plano_mat 
						set	ie_status	= ie_status_w, 
							qt_autorizada	= (qt_material_ww)::numeric  
						where	nr_sequencia	= nr_seq_guia_mat_w;
					end if;
				end if;
 
				if (cd_mens_espec_1	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_1,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_2	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_2,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_3	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_3,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_4	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_4,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				if (cd_mens_espec_5	<> 0) then 
					CALL ptu_inserir_inconsistencia(	null, null, cd_mens_espec_5,ds_mensagem_espec_w,cd_estabelecimento_p, nr_seq_transacao_w, ie_tipo_transacao_w, 
									cd_transacao_w, null, nr_seq_material_w, null, nm_usuario_p);
				end if;
 
				insert	into ptu_resposta_aut_servico(nr_sequencia, nr_seq_pedido, ie_tipo_tabela, 
					 cd_servico, ds_servico, ie_autorizado, 
					 dt_atualizacao, nm_usuario, qt_autorizado, 
					 ie_origem_servico, nr_seq_guia_mat, nr_seq_guia_proc, 
					 nr_seq_req_mat, nr_seq_req_proc, nm_usuario_nrec, 
					 dt_atualizacao_nrec) 
				values (nextval('ptu_resposta_aut_servico_seq'), nr_seq_resp_novo_w, ie_tipo_tabela_w, 
					 cd_servico_w, coalesce(ds_servico_w,'Não informado'), ie_autorizado_w, 
					 clock_timestamp(), nm_usuario_p, (qt_material_ww)::numeric , 
					 ie_origem_proced_w, nr_seq_guia_mat_w, nr_seq_guia_proc_w, 
					 nr_seq_req_mat_w, nr_seq_req_proc_w, nm_usuario_p, 
					 clock_timestamp());
			end if;
		end if;
	end if;
	end;
end loop;
close c01;
 
if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then 
	select	count(1) 
	into STRICT	qt_registros_w 
	from	pls_requisicao_proc 
	where	ie_status	= 'A' 
	and	nr_seq_requisicao	= nr_seq_requisicao_w;
 
	select	count(1) 
	into STRICT	qt_registros_ww 
	from	pls_requisicao_mat 
	where	ie_status	= 'A' 
	and	nr_seq_requisicao	= nr_seq_requisicao_w;
 
	if	((qt_registros_w > 0) or (qt_registros_ww > 0)) then 
		update	pls_requisicao 
		set	ie_estagio	= 5, 
			dt_atualizacao	= clock_timestamp(), 
			nm_usuario	= nm_usuario_p 
		where	nr_sequencia	= nr_seq_requisicao_w;
		 
		CALL pls_gerar_auditoria_requisicao(nr_seq_requisicao_w, nm_usuario_p,'AE');
		CALL ptu_gerar_grupo_aud_padrao(null,nr_seq_requisicao_w,'GC',nm_usuario_p);
	elsif (qt_registros_w = 0) and (qt_registros_ww = 0) then 
		select	count(1) 
		into STRICT	qt_reg_neg_w 
		from	pls_requisicao_proc 
		where	ie_status		= 'N' 
		and	nr_seq_requisicao	= nr_seq_requisicao_w;
 
		select	count(1) 
		into STRICT	qt_reg_neg_ww 
		from	pls_requisicao_mat 
		where	ie_status		= 'N' 
		and	nr_seq_requisicao	= nr_seq_requisicao_w;
 
		qt_registros_w	:= qt_reg_neg_w + qt_reg_neg_ww;
 
		select	count(1) 
		into STRICT	qt_reg_aprov_w 
		from	pls_requisicao_proc 
		where	ie_status	= 'S' 
		and	nr_seq_requisicao	= nr_seq_requisicao_w;
 
		select	count(1) 
		into STRICT	qt_reg_aprov_ww 
		from	pls_requisicao_mat 
		where	ie_status	= 'S' 
		and	nr_seq_requisicao	= nr_seq_requisicao_w;
 
		qt_registros_ww	:= qt_reg_aprov_w + qt_reg_aprov_ww;
 
		if (qt_registros_w > 0) and (qt_registros_ww > 0) then 
			update	pls_requisicao 
			set	ie_estagio		= 6, 
				dt_valid_senha_ext	= dt_atendimento_w, 
				dt_validade_senha	= dt_atendimento_w, 
				cd_senha_externa	= nr_seq_origem_w, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_sequencia		= nr_seq_requisicao_w;
 
			CALL pls_gerar_solic_entreg_mat_med(nr_seq_requisicao_w, nm_usuario_p);
		elsif (qt_registros_w > 0) and (qt_registros_ww = 0) then 
			update	pls_requisicao 
			set	ie_estagio		= 7, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_sequencia		= nr_seq_requisicao_w;
		elsif (qt_registros_w = 0) and (qt_registros_ww > 0) then 
			update	pls_requisicao 
			set	ie_estagio		= 2, 
				dt_valid_senha_ext	= dt_atendimento_w, 
				dt_validade_senha	= dt_atendimento_w, 
				cd_senha_externa	= nr_seq_origem_w, 
				dt_atualizacao		= clock_timestamp(), 
				nm_usuario		= nm_usuario_p 
			where	nr_sequencia		= nr_seq_requisicao_w;
			 
			CALL pls_gerar_solic_entreg_mat_med(nr_seq_requisicao_w, nm_usuario_p);
		end if;
	end if;
 
	-- Se for uma requisição recebida por webService(TISS) então a guia gerada deve ser atualizada conforme a requisição 
	CALL ptu_atualizar_guia_proc_ws(nr_seq_requisicao_w, nm_usuario_p);
	CALL pls_requisicao_gravar_hist(nr_seq_requisicao_w,'L',substr('Recebida e processada a resposta de pedido de autorização da Unimed '||cd_unimed_benef_w||' com a mensagem: '||chr(10)||ds_observacao_w,1,4000),null,nm_usuario_p);
	 
elsif (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then 
	select	count(1) 
	into STRICT	qt_registros_w 
	from	pls_guia_plano_proc 
	where	ie_status	= 'A' 
	and	nr_seq_guia	= nr_seq_guia_w;
 
	select	count(1) 
	into STRICT	qt_registros_ww 
	from	pls_guia_plano_mat 
	where	ie_status	= 'A' 
	and	nr_seq_guia	= nr_seq_guia_w;
 
	if	((qt_registros_w > 0) or (qt_registros_ww > 0)) then 
		update	pls_guia_plano 
		set	ie_estagio	= 11, 
			dt_atualizacao	= clock_timestamp(), 
			nm_usuario	= nm_usuario_p 
		where	nr_sequencia	= nr_seq_guia_w;
 
		CALL pls_gerar_auditoria_guia(nr_seq_guia_w, nm_usuario_p);
		CALL ptu_gerar_grupo_aud_padrao(nr_seq_guia_w,null,'GC',nm_usuario_p);
	elsif (qt_registros_w = 0) and (qt_registros_ww = 0) and (ie_autorizado_w = 3) then 
		update	pls_guia_plano 
		set	ie_estagio	= 9, 
			dt_atualizacao	= clock_timestamp(), 
			nm_usuario	= nm_usuario_p 
		where	nr_sequencia	= nr_seq_guia_w;
	elsif (qt_registros_w = 0) and (qt_registros_ww = 0) and (ie_autorizado_w <> 3) then 
		select	count(1) 
		into STRICT	qt_reg_neg_w 
		from	pls_guia_plano_proc 
		where	ie_status	= 'N' 
		and	nr_seq_guia	= nr_seq_guia_w;
 
		select	count(1) 
		into STRICT	qt_reg_neg_ww 
		from	pls_guia_plano_mat 
		where	ie_status		= 'N' 
		and	nr_seq_guia	= nr_seq_guia_w;
 
		qt_registros_w	:= qt_reg_neg_w + qt_reg_neg_ww;
 
		select	count(1) 
		into STRICT	qt_reg_aprov_w 
		from	pls_guia_plano_proc 
		where	ie_status	= 'S' 
		and	nr_seq_guia	= nr_seq_guia_w;
 
		select	count(1) 
		into STRICT	qt_reg_aprov_ww 
		from	pls_guia_plano_mat 
		where	ie_status	= 'S' 
		and	nr_seq_guia	= nr_seq_guia_w;
 
		qt_registros_ww	:= qt_reg_aprov_w + qt_reg_aprov_ww;
 
		if (qt_registros_w > 0) and (qt_registros_ww > 0) then 
			if (coalesce(ie_gerar_senha_interna_w,'S')	= 'S') then 
				if (ie_controle_estab_w	= 'S') then 
					select 	max(nr_sequencia) 
					into STRICT	nr_seq_regra_senha_w 
					from	pls_aut_regra_gera_senha 
					where	dt_inicio_vigencia		<= clock_timestamp() 
					and	coalesce(dt_fim_vigencia,clock_timestamp())	>= clock_timestamp() 
					and (coalesce(cd_estabelecimento, wheb_usuario_pck.get_cd_estabelecimento) = wheb_usuario_pck.get_cd_estabelecimento);
				else 
					select 	max(nr_sequencia) 
					into STRICT	nr_seq_regra_senha_w 
					from	pls_aut_regra_gera_senha 
					where	dt_inicio_vigencia		<= clock_timestamp() 
					and	coalesce(dt_fim_vigencia,clock_timestamp())	>= clock_timestamp();
				end if;
 
				if (nr_seq_regra_senha_w IS NOT NULL AND nr_seq_regra_senha_w::text <> '') then 
					cd_senha_w := pls_gerar_senha_aut_regra(nr_seq_regra_senha_w, nr_seq_guia_w, null, nm_usuario_p, cd_senha_w);
				end if;
				 
				dt_validade_senha_w := dt_atendimento_w;
			else 
				cd_senha_w	:= null;
				dt_validade_senha_w := null;
				 
			end if;
 
			update	pls_guia_plano 
			set	ie_estagio		= 10, 
				ie_status		= 1, 
				dt_atualizacao		= clock_timestamp(), 
				cd_senha_externa	= nr_seq_origem_w, 
				dt_valid_senha_ext	= dt_atendimento_w, 
				dt_validade_senha	= dt_validade_senha_w, 
				cd_senha		= cd_senha_w, 
				nm_usuario		= nm_usuario_p, 
				dt_autorizacao		= clock_timestamp() 
			where	nr_sequencia		= nr_seq_guia_w;
		elsif (qt_registros_w > 0) and (qt_registros_ww = 0) then 
			update	pls_guia_plano 
			set	ie_estagio	= 4, 
				ie_status	= 3, 
				dt_atualizacao	= clock_timestamp(), 
				nm_usuario	= nm_usuario_p 
			where	nr_sequencia	= nr_seq_guia_w;
		elsif (qt_registros_w = 0) and (qt_registros_ww > 0) then 
 
			if (coalesce(ie_gerar_senha_interna_w,'S')	= 'S') then 
				select 	max(nr_sequencia) 
				into STRICT	nr_seq_regra_senha_w 
				from	pls_aut_regra_gera_senha 
				where	dt_inicio_vigencia		<= clock_timestamp() 
				and	coalesce(dt_fim_vigencia,clock_timestamp())	>= clock_timestamp();
 
				if (nr_seq_regra_senha_w IS NOT NULL AND nr_seq_regra_senha_w::text <> '') then 
					cd_senha_w := pls_gerar_senha_aut_regra(nr_seq_regra_senha_w, nr_seq_guia_w, null, nm_usuario_p, cd_senha_w);
				end if;
 
				dt_validade_senha_w := dt_atendimento_w;
			else 
				cd_senha_w	:= null;
				dt_validade_senha_w := null;
			end if;
 
			update	pls_guia_plano 
			set	ie_estagio		= 6, 
				ie_status		= 1, 
				dt_atualizacao		= clock_timestamp(), 
				cd_senha_externa	= to_char(nr_seq_origem_w), 
				dt_valid_senha_ext	= dt_atendimento_w, 
				dt_validade_senha	= dt_validade_senha_w, 
				cd_senha		= cd_senha_w, 
				nm_usuario		= nm_usuario_p, 
				dt_autorizacao		= clock_timestamp() 
			where	nr_sequencia		= nr_seq_guia_w;
		end if;
	end if;
	 
	CALL pls_guia_gravar_historico(nr_seq_guia_w,2,substr('Recebida e processada a resposta de pedido de autorização da Unimed '||cd_unimed_benef_w||' com a mensagem: '||chr(10)||ds_observacao_w,1,4000),'',nm_usuario_p);
end if;
 
/* 
Após receber a resposta de pedido de autorização, será verificado se o pedido foi originado de uma ordem de serviço e se é uma ordem de serviço de triangulação, 
caso sim deve ser atualizado o estágio da ordem de serviço para Pendente autorização ordem serviço (triangulação) 
*/
 
begin 
	select	nr_seq_ordem 
	into STRICT	nr_seq_ordem_w 
	from	ptu_pedido_autorizacao 
	where	nr_sequencia	= nr_seq_pedido_aut_w;
exception 
when others then 
	nr_seq_ordem_w	:= null;
end;
 
if (nr_seq_ordem_w IS NOT NULL AND nr_seq_ordem_w::text <> '') then 
	select	max(nr_sequencia) 
	into STRICT	nr_seq_ordem_ser_w 
	from	ptu_requisicao_ordem_serv 
	where	nr_transacao_solicitante	= nr_seq_ordem_w;
 
	if (nr_seq_ordem_ser_w IS NOT NULL AND nr_seq_ordem_ser_w::text <> '') then 
		select	cd_unimed_beneficiario, 
			cd_unimed_solicitante 
		into STRICT	cd_unimed_beneficiario_w, 
			cd_unimed_solicitante_w 
		from	ptu_requisicao_ordem_serv 
		where	nr_sequencia	= nr_seq_ordem_ser_w;
	end if;
 
	if (cd_unimed_beneficiario_w	<> cd_unimed_solicitante_w) then 
 
		-- Atualizar o estágio da ordem de serviço para Pendente autorização ordem serviço (triangulação) 
		update	ptu_requisicao_ordem_serv 
		set	ie_estagio			= 9 
		where	nr_transacao_solicitante	= nr_seq_ordem_w 
		and	cd_unimed_solicitante		= cd_unimed_solicitante_w;
	end if;
end if;
 
 
-- Inserir as glosas das inconsistências PTU, é necessário chamar esta rotina após atualizar o status da requisição e da guia 
if (nr_seq_requisicao_w IS NOT NULL AND nr_seq_requisicao_w::text <> '') then 
	CALL pls_obter_glosa_incons(nr_seq_requisicao_w, 'R', nm_usuario_p);
elsif (nr_seq_guia_w IS NOT NULL AND nr_seq_guia_w::text <> '') then 
	CALL pls_obter_glosa_incons(nr_seq_guia_w, 'G', nm_usuario_p);
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ptu_imp_pedido_resp_aut_v50 ( ds_arquivo_p text, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

