-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cancelar_agenda_gestao_vaga (nr_seq_gestao_p bigint, nr_seq_motivo_cancel_p bigint, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_seq_agenda_w			    gestao_vaga.nr_seq_agenda%type;
cd_motivo_cancelamento_w	varchar(15);
cd_pessoa_fisica_w		varchar(10);
nm_paciente_reserva_GV_w	varchar(255);
nr_atendimento_w		bigint;
qt_existe_leito_w		bigint;
cd_unidade_basica_w		varchar(10);
cd_unidade_compl_w		varchar(10);
cd_setor_desejado_w		integer;
varCancelarCirurgia_w		varchar(1);
cd_tipo_agenda_w     		bigint;
ie_status_w			varchar(5);
ie_existe_autor_w		varchar(15);
cd_tipo_agenda_gv_w     	bigint;
ds_texto_w			dic_expressao.ds_expressao_br%type;
nr_seq_motivo_w 		gestao_vaga_motivo_canc.nr_seq_motivo_historico%type;
ds_motivo_w 			gestao_vaga_motivo_canc.ds_motivo%type;
ds_historico_w			gestao_vaga_hist.ds_historico%type;
nr_seq_regulacao_atend_w  regulacao_atend.nr_sequencia%type;
cd_evolucao_w       evolucao_paciente.cd_evolucao%TYPE;
ie_gerar_clinical_notes_w varchar(1) := 'N';													


BEGIN
ie_gerar_clinical_notes_w := obter_param_usuario(281, 1598, Obter_perfil_ativo, obter_usuario_ativo, wheb_usuario_pck.get_cd_estabelecimento, ie_gerar_clinical_notes_w);																																			
if (nr_seq_gestao_p IS NOT NULL AND nr_seq_gestao_p::text <> '') then
	begin
	/* Obter os dados do pedido de vaga */

	select	cd_pessoa_fisica,
		coalesce(nr_atendimento,0),
		cd_unidade_basica,
		cd_unidade_compl,
		cd_setor_desejado,
		nm_paciente,
        cd_evolucao				   
	into STRICT	cd_pessoa_fisica_w,
		nr_atendimento_w,
		cd_unidade_basica_w,
		cd_unidade_compl_w,
		cd_setor_desejado_w,
		nm_paciente_reserva_GV_w,
        cd_evolucao_w					 
	from	gestao_vaga
	where	nr_sequencia = nr_seq_gestao_p;
	
	/* Verifica se possui reserva para a unidade do pedido de vaga */

	select	count(*)	
	into STRICT	qt_existe_leito_w
	from	unidade_atendimento
	where	ie_status_unidade	= 'R'
	and (cd_paciente_reserva	= cd_pessoa_fisica_w or nr_atendimento = nr_atendimento_w or nm_pac_reserva = nm_paciente_reserva_GV_w)
	and	cd_unidade_basica	= cd_unidade_basica_w
	and	cd_unidade_compl	= cd_unidade_compl_w
	and	cd_setor_atendimento	= cd_setor_desejado_w;

	/* Obter sequencia da regulacao do atendimento */

	select coalesce(max(nr_sequencia),0)
	into STRICT nr_seq_regulacao_atend_w
	from regulacao_atend
	where nr_seq_gestao_vaga = nr_seq_gestao_p;
	
	/* Se possui reserva, liberar o leito reservado */

	if (qt_existe_leito_w > 0) then
		update	unidade_atendimento
		set	ie_status_unidade	= 'L',
			nm_usuario		= nm_usuario_p,
			dt_atualizacao		= clock_timestamp(),
			cd_paciente_reserva	 = NULL,
			nm_usuario_reserva	 = NULL,
			nr_atendimento		 = NULL,
			nm_pac_reserva		 = NULL
		where	cd_unidade_basica	= cd_unidade_basica_w
		and	cd_unidade_compl	= cd_unidade_compl_w
		and	cd_setor_atendimento	= cd_setor_desejado_w;
	else
		select	count(*)		
		into STRICT	qt_existe_leito_w
		from	unidade_atendimento
		where (cd_paciente_reserva = cd_pessoa_fisica_w or nr_atendimento = nr_atendimento_w or nm_pac_reserva = nm_paciente_reserva_GV_w)
		and	cd_unidade_basica	= cd_unidade_basica_w
		and	cd_unidade_compl	= cd_unidade_compl_w
		and	cd_setor_atendimento	= cd_setor_desejado_w;
		
		if (qt_existe_leito_w > 0) then
			update	unidade_atendimento
			set	nm_usuario		= nm_usuario_p,
				dt_atualizacao		= clock_timestamp(),
				cd_paciente_reserva	 = NULL,
				nm_usuario_reserva	 = NULL,				
				nm_pac_reserva		 = NULL
			where	cd_unidade_basica	= cd_unidade_basica_w
			and	cd_unidade_compl	= cd_unidade_compl_w
			and	cd_setor_atendimento	= cd_setor_desejado_w;
		end if;
	end if;

	/* Cancelamento da gestao de vagas */

	update	gestao_vaga
	set	ie_status		= 'C',
		nr_seq_motivo_cancel	= nr_seq_motivo_cancel_p,
		ds_observacao		= substr(ds_observacao,1,4000-length(' - '||ds_observacao_p))||' - '||ds_observacao_p
	where	nr_sequencia		= nr_seq_gestao_p;
	
	begin
		select	nr_seq_motivo_historico,
				ds_motivo
		into STRICT	nr_seq_motivo_w,
				ds_motivo_w
		from	gestao_vaga_motivo_canc
		where	nr_sequencia = nr_seq_motivo_cancel_p;
	exception
	when others then
		null;
	end;

	if (nr_seq_motivo_w IS NOT NULL AND nr_seq_motivo_w::text <> '') then

		ds_historico_w := obter_texto_tasy(1039960, null) ||': '|| ds_motivo_w || chr(13) || chr(10) ||
			obter_texto_tasy(1026373, null)||': '|| ds_observacao_p;

		CALL gerar_hist_alteracao_status(nr_seq_gestao_p, nr_seq_motivo_w, 0, ds_historico_w, nm_usuario_p);
	end if;
	
	select	ie_status
	into STRICT	ie_status_w
	from 	gestao_vaga
	where	nr_sequencia = nr_seq_gestao_p;
	
	begin
	select	'S'
	into STRICT	ie_existe_autor_w
	from	autorizacao_convenio
	where	nr_seq_gestao = nr_seq_gestao_p  LIMIT 1;
	exception
	when others then
		ie_existe_autor_w := 'N';
	end;
	
	if (ie_status_w = 'C') and (ie_existe_autor_w = 'S') then
		update	autorizacao_convenio a
		set	a.nr_seq_estagio = (	SELECT max(x.nr_sequencia)
						from	estagio_autorizacao x
						where	x.ie_interno = '70'
						and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = x.cd_empresa),
			a.nm_usuario	 = nm_usuario_p,
			a.dt_atualizacao = clock_timestamp()
		where	a.nr_seq_gestao = nr_seq_gestao_p;
	end if;

	/* Obter se gestao de vagas possui agenda */

	select	/* +index(INDEX_ASC) */
		coalesce(max(nr_seq_agenda),0),
		coalesce(max(cd_tipo_agenda),0)
	into STRICT	nr_seq_agenda_w,
		cd_tipo_agenda_gv_w
	from	gestao_vaga
	where	nr_sequencia	= nr_seq_gestao_p  LIMIT 1;

	/* Se possuir agenda, ira cancelar a mesma */

	if (nr_seq_agenda_w > 0) and (cd_tipo_agenda_gv_w <> 5) and (cd_tipo_agenda_gv_w > 0) then
		begin	
		/* Gestao de vagas - Parametro [30] - Ao cancelar a reserva de vaga, cancelar a cirugia vinculada */

		varCancelarCirurgia_w := Obter_Param_Usuario(1002, 30, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, varCancelarCirurgia_w);
		
		select	coalesce(max(cd_tipo_agenda),0)
		into STRICT	cd_tipo_agenda_w
		from	agenda_paciente a,
			agenda b
		where	a.cd_agenda = b.cd_agenda   
		and	a.nr_sequencia = nr_seq_agenda_w;

		/* Motivo de cancelamento vinculado ao motivo de cancelamento na agenda cirurgica */

		if (varCancelarCirurgia_w = 'S') or (cd_tipo_agenda_w <> 1 AND cd_tipo_agenda_w > 0) then
			select	CASE WHEN coalesce(max(cd_motivo),0)=0 THEN null  ELSE coalesce(max(cd_motivo),0) END
			into STRICT	cd_motivo_cancelamento_w
			from	agenda_motivo_cancelamento
			where	ie_agenda in ('CI','T')
			and	cd_estabelecimento = cd_estabelecimento_p
			and	nr_seq_motivo_gv = nr_seq_motivo_cancel_p;

			ds_texto_w := substr(OBTER_DESC_EXPRESSAO(735360), 1, 4000);
			
			/* Cancelamento da agenda */

			update	agenda_paciente
			set	dt_atualizacao		= clock_timestamp(),
				nm_usuario		= nm_usuario_p,
				cd_motivo_cancelamento	= cd_motivo_cancelamento_w,
				ie_status_agenda	= 'C',
				dt_cancelamento		= clock_timestamp(),
				nm_usuario_cancel	= nm_usuario_p,
				ds_observacao		= substr(ds_observacao,1,4000-length(chr(10)||' '||ds_texto_w||' '))||chr(10)||' '||ds_texto_w||' '
			where	nr_sequencia		= nr_seq_agenda_w;
		end if;
		end;
	end if;

	if (nr_seq_regulacao_atend_w > 0) then
		begin
			CALL Alterar_status_regulacao(nr_seq_regulacao_atend_w, 'CA', ds_motivo_w, obter_nome_usuario(nm_usuario_p));
		end;
	end if;

	if (ie_gerar_clinical_notes_w = 'S' and coalesce(cd_evolucao_w,0)> 0) then

        CALL clinical_notes_pck.soap_data_after_delete(cd_evolucao_w);

    end if;

	end;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cancelar_agenda_gestao_vaga (nr_seq_gestao_p bigint, nr_seq_motivo_cancel_p bigint, ds_observacao_p text, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

