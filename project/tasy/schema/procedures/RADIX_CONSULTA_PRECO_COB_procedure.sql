-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE radix_consulta_preco_cob (nr_sequencia_p bigint) AS $body$
DECLARE


ds_log_w 			intpd_fila_transmissao.ds_message_response%type;
retorno_w 			philips_json;
qt_pontos_w			preco_amb.qt_pontuacao%type;
-- Valores recebidos pela integracao
id_origin_w			varchar(20);
cd_estabelecimento_w		atendimento_paciente.cd_estabelecimento%type;
ie_tipo_atendimento_w		atendimento_paciente.ie_tipo_atendimento%type;
cd_convenio_w			atend_categoria_convenio.cd_convenio%type;
cd_categoria_w			atend_categoria_convenio.cd_categoria%type;
cd_plano_convenio_w		atend_categoria_convenio.cd_plano_convenio%type;
nr_seq_cobertura_w		atend_categoria_convenio.nr_seq_cobertura%type;
cd_medico_executor_w		procedimento_paciente.cd_medico_executor%type;
nr_seq_proc_interno_w		procedimento_paciente.nr_seq_proc_interno%type;
dt_referencia_w			timestamp;

-- Valores que serao enviados para a integracao
ie_tipo_convenio_w		convenio.ie_tipo_convenio%type;
vl_procedimento_w		procedimento_paciente.vl_procedimento%type;
ie_proc_liberado_w		varchar(1)	:= 'N';
ie_cobertura_w			varchar(5)	:= 'false';

cd_procedimento_w		procedimento.cd_procedimento%type;
ie_origem_proced_w		procedimento.ie_origem_proced%type;
ie_classificacao_w		procedimento.ie_classificacao%type;
cd_grupo_proc_w			procedimento.cd_grupo_proc%type;
cd_area_procedimento_w	especialidade_proc.cd_area_procedimento%type;
cd_especialidade_w		grupo_proc.cd_especialidade%type;

-- Variaveis para retornos nao utilizados
vl_aux_w			double precision;
ds_aux_w			varchar(255);

-- Retorno da consiste plano / regra ajuste
ds_retorno_w			varchar(2000);
ie_bloqueia_agenda_w		varchar(10);
ie_regra_w			varchar(10);
nr_seq_regra_w			bigint;

ie_glosa_w			varchar(5);

qt_regra_medico_w		bigint;
ds_return_message_w		varchar(2000);

-- Mensagem que sera retornada a MOTION
ds_mensagem_retorno_w		varchar(2000);
cd_erro_w			varchar(100);
ds_erro_w			varchar(2000);

-- Retorno regra Liberacao de Atendimento
ie_bloqueia_atendimento_w varchar(10);

-- Retorno da regra conta terceiro
nr_sequencia_regra_w	regra_conta_terceiro.nr_sequencia%type := 0;
cd_estab_terceiro_w		regra_conta_terceiro.cd_estabelecimento_conta%type;

nr_seq_pacote_w			pacote.nr_seq_pacote%type;
ie_tipo_acomodacao_w	pacote_tipo_acomodacao.ie_tipo_acomod%type;
vl_pacote_w				pacote_tipo_acomodacao.vl_pacote%type;
vl_honorario_w			pacote_tipo_acomodacao.vl_honorario%type;
vl_anestesista_w		pacote_tipo_acomodacao.vl_anestesista%type;
vl_auxiliares_w			pacote_tipo_acomodacao.vl_auxiliares%type;
vl_materiais_w			pacote_tipo_acomodacao.vl_materiais%type;

c01 CURSOR FOR
	SELECT	(vl_dominio)::numeric
	from	valor_dominio_v
	where	cd_dominio	= 56
	order by (vl_dominio)::numeric  desc;


BEGIN

begin

	select	ds_message
	into STRICT	ds_log_w
	from	intpd_fila_transmissao
	where	nr_sequencia = nr_sequencia_p;

	retorno_w	:= philips_json(ds_log_w);

	id_origin_w		:= retorno_w.get['idOrigin'].get_string();
	cd_estabelecimento_w	:= retorno_w.get['cdEstabelecimento'].get_number();
	ie_tipo_atendimento_w	:= retorno_w.get['ieTipoAtendimento'].get_number();
	cd_convenio_w		:= retorno_w.get['cdConvenio'].get_number();
	cd_categoria_w		:= retorno_w.get['cdCategoria'].get_string();
	cd_plano_convenio_w	:= retorno_w.get['cdPlano'].get_string();
	nr_seq_cobertura_w	:= retorno_w.get['cdCobertura'].get_number();
	cd_medico_executor_w	:= retorno_w.get['cdMedicoExecutor'].get_string();
	nr_seq_proc_interno_w	:= retorno_w.get['nrProcInterno'].get_number();
	dt_referencia_w		:= clock_timestamp();

	/*id_origin_w		:= 'SP01';
	cd_estabelecimento_w	:= 1;
	ie_tipo_atendimento_w	:= 1;
	cd_convenio_w		:= 5019;
	cd_categoria_w		:= '1';
	cd_plano_convenio_w	:= 2;
	nr_seq_cobertura_w	:= null;
	cd_medico_executor_w	:= 2469182;
	nr_seq_proc_interno_w	:= 34700;
	dt_referencia_w		:= sysdate;*/


	-- Obter o tipo de convenio
	select	ie_tipo_convenio
	into STRICT	ie_tipo_convenio_w
	from	convenio
	where	cd_convenio = cd_convenio_w;

	if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
		SELECT * FROM Obter_Proc_Tab_Interno_Conv(nr_seq_proc_interno_w, cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, null, cd_procedimento_w, ie_origem_proced_w, null, dt_referencia_w, null, null, null, null, ie_tipo_atendimento_w, null, null, null) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
	end if;

	-- Obter o valor do procedimento
	if (cd_procedimento_w IS NOT NULL AND cd_procedimento_w::text <> '') and (ie_origem_proced_w IS NOT NULL AND ie_origem_proced_w::text <> '') then

		select	coalesce(ie_classificacao,'0')
		into STRICT	ie_classificacao_w
		from	procedimento
		where	cd_procedimento = cd_procedimento_w
		and	ie_origem_proced = ie_origem_proced_w;
		
		begin
		select cd_grupo_proc,
			 cd_area_procedimento,
			 cd_especialidade
		into STRICT	 cd_grupo_proc_w,
			 cd_area_procedimento_w,
			 cd_especialidade_w
		from	 estrutura_procedimento_v
		where	 cd_procedimento	= cd_procedimento_w
		and	 ie_origem_proced	= ie_origem_proced_w;
		exception
				 when others then
			 begin
			 cd_grupo_proc_w	:= 0;
			 cd_area_procedimento_w	:= 0;
			 cd_especialidade_w	:= 0;
			 end;
		end;

		SELECT * FROM obter_estab_regr_conta_terc(
			cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, 0, cd_area_procedimento_w, cd_especialidade_w, cd_grupo_proc_w, cd_procedimento_w, ie_origem_proced_w, 0, 0, 0, 0, cd_plano_convenio_w, 0, cd_medico_executor_w, clock_timestamp(), 0, nr_seq_proc_interno_w, cd_estab_terceiro_w, nr_sequencia_regra_w
		) INTO STRICT cd_estab_terceiro_w, nr_sequencia_regra_w
		;
		
		if (cd_estab_terceiro_w = 0 or coalesce(cd_estab_terceiro_w::text, '') = '') then
			cd_estab_terceiro_w	:= cd_estabelecimento_w;
		end if;
		
		select	max(nr_seq_pacote)
		into STRICT	nr_seq_pacote_w
		from 	pacote
		where 	cd_proced_pacote = cd_procedimento_w			
		and 	ie_origem_proced = ie_origem_proced_w
		and 	cd_convenio  	 = cd_convenio_w
		and		cd_estabelecimento = cd_estab_terceiro_w
		and		ie_situacao 	 = 'A';
		
		-- Verifica se o procedimento e gatilho de pacote
		if (nr_seq_pacote_w IS NOT NULL AND nr_seq_pacote_w::text <> '') then
			open c01;
			loop
			fetch c01 into
				ie_tipo_acomodacao_w;
			EXIT WHEN NOT FOUND; /* apply on vl_procedimento_w > 0 or c01 */
				SELECT * FROM consulta_valor_pacote(
					nr_seq_pacote_w, ie_tipo_acomodacao_w, wheb_usuario_pck.get_nm_usuario, clock_timestamp(), cd_categoria_w, cd_plano_convenio_w, null, null, null, 0, vl_pacote_w, vl_honorario_w, vl_anestesista_w, vl_auxiliares_w, vl_materiais_w, vl_aux_w
				) INTO STRICT vl_pacote_w, vl_honorario_w, vl_anestesista_w, vl_auxiliares_w, vl_materiais_w, vl_aux_w
				;
				
				vl_procedimento_w := coalesce(vl_pacote_w, 0) + coalesce(vl_honorario_w, 0) + coalesce(vl_anestesista_w, 0) + coalesce(vl_auxiliares_w, 0) + coalesce(vl_materiais_w, 0);
			end loop;
			close c01;
		else
			if (ie_classificacao_w in ('2','3')) then
				SELECT * FROM define_preco_servico(cd_estab_terceiro_w, cd_convenio_w, cd_categoria_w, dt_referencia_w, cd_procedimento_w, 0, ie_tipo_atendimento_w, 0, null, cd_plano_convenio_w, 0, 0, null, vl_procedimento_w, vl_aux_w, null, 0, 0, nr_seq_proc_interno_w, 0, null, null, nr_seq_cobertura_w, null, null, null, null, null, cd_medico_executor_w) INTO STRICT vl_procedimento_w, vl_aux_w;
			else
				SELECT * FROM define_preco_procedimento(cd_estab_terceiro_w, cd_convenio_w, cd_categoria_w, dt_referencia_w, cd_procedimento_w, 0, ie_tipo_atendimento_w, 0, cd_medico_executor_w, 0, 0, 0, nr_seq_proc_interno_w, null, cd_plano_convenio_w, 0, 0, null, vl_procedimento_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, qt_pontos_w, vl_aux_w, ds_aux_w, vl_aux_w, 0, null, 0, null, null, null, '0', null, null, null, null, nr_seq_cobertura_w, null, null, null, null, ie_origem_proced_w, null, null, null) INTO STRICT vl_procedimento_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, qt_pontos_w, vl_aux_w, ds_aux_w, vl_aux_w;
			end if;

			-- Verificar a regra de ajuste
			SELECT * FROM obter_regra_ajuste_proc(cd_estab_terceiro_w, cd_convenio_w, cd_categoria_w, cd_procedimento_w, ie_origem_proced_w, null, dt_referencia_w, 0, ie_tipo_atendimento_w, 0, cd_medico_executor_w, 0, 0, 0, nr_seq_proc_interno_w, null, cd_plano_convenio_w, 0, 0, null, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, ie_glosa_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, null, 0, ds_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, null, null, null, null, null, null, null, null, vl_aux_w, nr_seq_cobertura_w, null, null, null, null, null, null, null, null, null) INTO STRICT vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, ie_glosa_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, ds_aux_w, vl_aux_w, vl_aux_w, vl_aux_w, vl_aux_w;
		end if;

		if (ie_glosa_w = 'Z') then
			vl_procedimento_w	:= 0;
		end if;

		-- Verificar a regra de plano
		SELECT * FROM consiste_plano_mat_proc(cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, null, cd_procedimento_w, ie_origem_proced_w, null, ie_tipo_atendimento_w, 0, 0, null, nr_seq_proc_interno_w, ds_retorno_w, ie_bloqueia_agenda_w, ie_regra_w, nr_seq_regra_w) INTO STRICT ds_retorno_w, ie_bloqueia_agenda_w, ie_regra_w, nr_seq_regra_w;

		-- Verificar a regra de Liberacao Atendimento
		SELECT * FROM Obter_Se_Lib_Setor_Conv(cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, 0,  --cd_setor_atendimento_p
			cd_plano_convenio_w, 0,  --nr_seq_classificacao_p
			ds_aux_w, ie_bloqueia_atendimento_w, 0,  --ie_clinica_p,
			0,  --cd_empresa_p			number,
			0,  --cd_procedencia_p		number,
			nr_seq_cobertura_w, 0,  --nr_seq_tipo_acidente_p		number,
			0,  --cd_tipo_acomodacao_p		number,
			cd_medico_executor_w, 0,  --qt_idade_p			number,
			0,  --ie_tipo_convenio_ant_p	number,
			0,  --nr_seq_queixa_p			number,
			0,  --nr_seq_queixa_anterior_p	number,
			null,  --dt_vigencia_p			date,
			null) INTO STRICT 
			ds_aux_w, ie_bloqueia_atendimento_w; --cd_pessoa_fisica_p			
	end if;

	-- Verificar se o procedimento esta liberado
	ie_proc_liberado_w	:= 'N';
	ds_return_message_w	:= 'Procedimento nao coberto';

	if	((coalesce(ie_regra_w,'3') = '3') or (coalesce(ie_regra_w,'4') = '4') or (coalesce(ie_regra_w,'6') = '6') or (coalesce(ie_regra_w,'4') = '0'))
  		and ((coalesce(ie_glosa_w,'L') = 'L') OR (coalesce(ie_glosa_w,'H') = 'H'))
  		and (coalesce(obter_se_convenio_lib_func(cd_estabelecimento_w, cd_convenio_w, 869, null, null),'S') = 'S') 
  		and (coalesce(Obter_Plano_Lib_Categoria(cd_convenio_w, cd_categoria_w, cd_plano_convenio_w, cd_estabelecimento_w, clock_timestamp()),'S') = 'S') 
  		and (coalesce(obter_tipo_atend_lib_categoria(cd_convenio_w, cd_categoria_w, ie_tipo_atendimento_w, cd_estabelecimento_w, clock_timestamp()),'S') = 'S') 
  		and (coalesce(obter_se_categoria_lib_func(cd_estabelecimento_w, cd_convenio_w, cd_categoria_w, 869),'S') = 'S')
		and (ie_bloqueia_atendimento_w <> 'B' AND ie_bloqueia_atendimento_w <> 'E') then
      
		ie_proc_liberado_w	:= 'S';
		ds_return_message_w	:= 'Procedimento coberto';

	end if;

 	if	((ie_proc_liberado_w = 'N') or (ie_tipo_convenio_w <> 1)) then
		vl_procedimento_w	:= 0;
	end if;

	-- Verificar se o procedimento e coberto
	if (coalesce(cd_medico_executor_w::text, '') = '') then

		select	count(*)
		into STRICT	qt_regra_medico_w
		from	regra_ajuste_proc
		where	cd_convenio = cd_convenio_w
		and	(cd_medico IS NOT NULL AND cd_medico::text <> '');

		if (qt_regra_medico_w > 0) then
			ie_cobertura_w		:= 'true';
		end if;

	end if;

	begin
	select	1
	into STRICT	cd_erro_w
	from	convenio_plano
	where	cd_convenio = cd_convenio_w
	and	cd_plano = cd_plano_convenio_w
	and	ie_situacao = 'A';
	exception
		when others then
		ie_proc_liberado_w	:= 'N';
		ie_cobertura_w		:= 'false';
		ds_return_message_w	:= 'Plano inexistente / inativo';
	end;

	begin
	select	1
	into STRICT	cd_erro_w
	from	convenio co
       ,convenio_estabelecimento ce
	where	co.cd_convenio = ce.cd_convenio
   and  co.cd_convenio = cd_convenio_w
   and  ce.cd_estabelecimento = cd_estabelecimento_w
 	 and	co.ie_situacao = 'A';
	exception
		when others then
		ie_proc_liberado_w	:= 'N';
		ie_cobertura_w		:= 'false';
		ds_return_message_w	:= 'Convenio inexistente / inativo';
	end;



	ds_mensagem_retorno_w	:=	'{ ' ||
					'"idOrigin": "' || id_origin_w || '", ' ||
					'"cdEstabelecimento": "' || cd_estabelecimento_w || '", ' ||
					'"ieTipoConvenio": ' || ie_tipo_convenio_w || ', ' ||
					'"ieProcedimentoLiberado": "' || ie_proc_liberado_w || '", ' ||
					'"iePrecoPorMedico": "' || ie_cobertura_w || '", ' ||
					'"vlProcedimento": "' || trim(both to_char(vl_procedimento_w,'999999990.00')) || '", ' ||
					'"Sucess": ' || 'true' || ', ' ||
					'"ReturnMessage": "' || ds_return_message_w || '"' ||
					' }';

	update	intpd_fila_transmissao
	set	ie_status_http = 200,
		ie_status = 'S',
		ds_message_response = ds_mensagem_retorno_w
	where	nr_sequencia = nr_sequencia_p;

exception
	when others then

	cd_erro_w	:= coalesce(substr(SQLSTATE,1,100),'0');
	ds_erro_w	:= coalesce(substr(sqlerrm,1,2000),'0');

	ie_proc_liberado_w	:= 'E';

	ds_mensagem_retorno_w	:=	'{ ' ||
					'"idOrigin": "' || coalesce(id_origin_w,'0') || '", ' ||
					'"cdEstabelecimento": "' || coalesce(cd_estabelecimento_w,0) || '", ' ||
					'"ieTipoConvenio": ' || coalesce(ie_tipo_convenio_w,0) || ', ' ||
					'"ieProcedimentoLiberado": "' || ie_proc_liberado_w || '", ' ||
					'"iePrecoPorMedico": "' || ie_cobertura_w || '", ' ||
					'"vlProcedimento": 0, ' ||
					'"Sucess": ' || 'false' || ', ' ||
					'"ReturnMessage": ' || 'true' || ', ' ||
					'"ListErrorsMessages": [ { ' ||
						'"CodMsg": "' || cd_erro_w || '", ' ||
						'"MsgDescription": "' || ds_erro_w || '" } ] ' ||
					' }';

	update	intpd_fila_transmissao
	set	ie_status_http = 400,
		ie_status = 'E',
		ds_message_response = ds_mensagem_retorno_w
	where	nr_sequencia = nr_sequencia_p;

end;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE radix_consulta_preco_cob (nr_sequencia_p bigint) FROM PUBLIC;

