-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cancelar_agenda_paciente (nr_sequencia_p bigint, nr_cirurgia_p bigint, nm_usuario_p text, cd_motivo_p text, ds_observacao_p text, ie_cancela_agenda_consulta_p text default 'S') AS $body$
DECLARE


nr_cirurgia_w			bigint;
nr_seq_agenda_w			agenda_paciente.nr_sequencia%type;
nr_prescricao_w			bigint;
ie_status_cirurgia_w		varchar(03);
nr_atendimento_w		bigint;
dt_inicio_real_w		timestamp;
cd_agenda_w			bigint;
dt_agenda_w			timestamp;
hr_inicio_w			timestamp;
ie_cancela_agenda_w		varchar(01);
qt_agepaci_w			bigint;
nr_sequencia_autor_w		bigint;
nr_seq_estagio_w		bigint;
nr_seq_estagio_necessidade_w	bigint;
qt_autor_w			integer;
ie_exclui_item_prescr_w		varchar(02);
cd_motivo_exc_conta_w		bigint;
nr_interno_conta_w		bigint;
nr_sequencia_w			bigint;
ie_proc_mat_w			varchar(10);
ie_opme_integracao_w		varchar(1);
ie_desv_kits_w			varchar(1);
ie_consiste_material_w		varchar(15);
ie_possui_medicamentos_w	varchar(1);
ie_cancela_vaga_w		varchar(1);
nr_seq_autor_cir_w		bigint;
qt_autor_cir_w			integer;
ie_cancela_autor_agenda_w	varchar(2);
ie_permite_cir_inter_w		varchar(1);
ie_atualiz_autorizada_pend_w	varchar(1);
ie_interno_w			varchar(15);
nr_seq_est_autor_transf_w	bigint;
nr_seq_reserva_w		bigint;
nr_seq_conjunto_w		bigint;
nr_seq_pepo_w			bigint;	
ieSanCancelaReserva_w		varchar(1);	
ie_gera_historico_w		varchar(1);
ie_desvinc_cancelar_cir		varchar(1);
ie_permite_cancel_porte_w	varchar(1) := 'S';
ie_porte_w			varchar(1);
nm_usuario_acesso_w		varchar(15);
nm_usuario_w			varchar(15);
ie_status_agenda_w		varchar(3);
cd_pessoa_fisica_w		varchar(10);
ds_param_integ_hl7_w		varchar(4000);
cd_setor_atendimento_w		integer;
ds_sep_bv_w			varchar(100);
qt_agenda_espera_w		bigint;
qt_agenda_vaga_w		bigint;	
ie_cancelar_se_autorizada_w	varchar(1) := 'S';
ie_cancela_autor_w		varchar(1);
cd_funcao_ativa_w		integer := wheb_usuario_pck.get_cd_funcao;
cd_estabelecimento_w		agenda.cd_estabelecimento%type;	
envio_auto_int_opme_w		opme_envio_automatico.ie_evento%type;
qt_existe_regra_setor_w		bigint;
ie_pyxis_cirurgia_w		parametros_farmacia.ie_pyxis_cirurgia%type;

c01 CURSOR FOR
	SELECT	a.nr_sequencia,
			b.ie_interno
	from	estagio_autorizacao b,
			autorizacao_convenio a
	where	a.nr_seq_agenda		= nr_seq_agenda_w
	and	a	.nr_seq_estagio		= b.nr_sequencia;

c02 CURSOR FOR
	SELECT	'P',
			nr_sequencia,
			a.nr_interno_conta
	from	procedimento_paciente a,
			conta_paciente b
	where	a.nr_interno_conta	= b.nr_interno_conta
	and		b.ie_status_acerto	= 1
	and		nr_cirurgia		= nr_cirurgia_w
	
union all

	SELECT	'M',
			nr_sequencia,
			a.nr_interno_conta
	from	material_atend_paciente a,
			conta_paciente b
	where	a.nr_interno_conta	= b.nr_interno_conta
	and		b.ie_status_acerto	= 1
	and		nr_cirurgia		= nr_cirurgia_w;

c03 CURSOR FOR
	SELECT 	nr_sequencia
	from	autorizacao_cirurgia
	where	nr_seq_agenda	= nr_seq_agenda_w
	and		((ie_cancelar_se_autorizada_w = 'S') or (coalesce(ie_estagio_autor,'1') <> '3'));

c04 CURSOR FOR
	SELECT	nr_sequencia
	FROM	san_reserva
	WHERE	ie_status <> 'C'
	AND		nr_seq_agenda 	= nr_seq_agenda_w;

c05 CURSOR FOR
	SELECT 	nr_sequencia,
			nr_seq_pepo
	FROM 	cm_conjunto_cont
	WHERE nr_cirurgia = nr_cirurgia_w;
	

BEGIN

select	coalesce(max(obter_valor_param_usuario(901, 29, obter_perfil_ativo, nm_usuario_p, 0)), 'S')
into STRICT	ie_cancela_agenda_w
;

if (ie_cancela_agenda_w = 'S') then
	ie_cancela_agenda_w := obter_param_usuario(900, 553, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_cancela_agenda_w);
end if;

select	coalesce(max(obter_valor_param_usuario(900, 68, obter_perfil_ativo, nm_usuario_p, 0)), 'S')
into STRICT	ie_exclui_item_prescr_w
;


ie_gera_historico_w := obter_param_usuario(871, 714, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_gera_historico_w);
cd_motivo_exc_conta_w	:= obter_valor_param_usuario(901,147, obter_perfil_ativo, nm_usuario_p, 0);

ie_desv_kits_w := obter_param_usuario(900, 186, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_desv_kits_w);
ie_desvinc_cancelar_cir := obter_param_usuario(900, 486, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_desvinc_cancelar_cir);

ie_permite_cancel_porte_w := obter_param_usuario(900, 489, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_permite_cancel_porte_w);

ie_consiste_material_w := obter_param_usuario(871, 349, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_consiste_material_w);
ie_cancela_vaga_w := obter_param_usuario(871, 374, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_cancela_vaga_w);
ie_permite_cir_inter_w := obter_param_usuario(871, 447, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_permite_cir_inter_w);
ie_atualiz_autorizada_pend_w := obter_param_usuario(871, 495, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_atualiz_autorizada_pend_w);
nr_seq_est_autor_transf_w := obter_param_usuario(871, 550, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, nr_seq_est_autor_transf_w);
if (cd_funcao_ativa_w = 871) then  /* Se nao for GAC entao o parametro mantem o valor padrao, que e cancelar independente do estagio*/
	ie_cancelar_se_autorizada_w := Obter_Param_Usuario(cd_funcao_ativa_w, 616, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_cancelar_se_autorizada_w);
end if;
ieSanCancelaReserva_w := obter_param_usuario(871, 684, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ieSanCancelaReserva_w);

select 	coalesce(max(ie_canc_autor_agenda),'N')
into STRICT	ie_cancela_autor_agenda_w
from 	parametro_faturamento
where	cd_estabelecimento	= wheb_usuario_pck.get_cd_estabelecimento;

if (nr_sequencia_p IS NOT NULL AND nr_sequencia_p::text <> '') and (nr_sequencia_p > 0) then
	begin

	nr_seq_agenda_w	:= nr_sequencia_p;

	select		max(nr_cirurgia),
			max(cd_pessoa_fisica)
	into STRICT		nr_cirurgia_w,
			cd_pessoa_fisica_w
	from 		agenda_paciente
	where		nr_sequencia 	= nr_sequencia_p;

	select		coalesce(max(nr_prescricao),0)
	into STRICT		nr_prescricao_w
	from 		prescr_medica
	where		nr_seq_agenda	= nr_sequencia_p
	and		coalesce(ie_tipo_prescr_cirur::text, '') = '';

	end;
end if;

if (nr_cirurgia_p IS NOT NULL AND nr_cirurgia_p::text <> '') and (nr_cirurgia_p > 0) then
	begin

	nr_cirurgia_w	:= nr_cirurgia_p;

	select		coalesce(max(nr_sequencia),0)
	into STRICT		nr_seq_agenda_w
	from 		agenda_paciente
	where		nr_cirurgia 	= nr_cirurgia_p;

	select		coalesce(max(nr_prescricao),0)
	into STRICT		nr_prescricao_w
	from 		cirurgia
	where		nr_cirurgia	= nr_cirurgia_p;

	end;
end if;

if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') and (nr_seq_agenda_w > 0) then
	
	select	max(nm_usuario_acesso),
		max(nm_usuario),
		max(ie_status_agenda)
	into STRICT	nm_usuario_acesso_w,		
		nm_usuario_w,
		ie_status_agenda_w
	from	agenda_paciente
	where	nr_sequencia	= nr_seq_agenda_w
	and	coalesce(cd_pessoa_fisica::text, '') = ''
	and	((coalesce(nm_paciente::text, '') = '') or (substr(nm_paciente,1,255) = substr(obter_obs_turno(nr_seq_agenda_w),1,255)
	and	(obter_obs_turno(nr_seq_agenda_w) IS NOT NULL AND (obter_obs_turno(nr_seq_agenda_w))::text <> '')));

	if ((nm_usuario_acesso_w <> nm_usuario_p) and (nm_usuario_acesso_w IS NOT NULL AND nm_usuario_acesso_w::text <> '') and (nm_usuario_w 	 <>  nm_usuario_p) and (nm_usuario_w IS NOT NULL AND nm_usuario_w::text <> '') and (ie_status_agenda_w = 'N')) then
	     CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(272962, 'NM_USUARIO_ACESSO_W='||NM_USUARIO_ACESSO_W);
	end if;
end if;

if 	((ie_consiste_material_w = 'N') or (ie_consiste_material_w = 'C') or (ie_consiste_material_w = 'CZ')) and (nr_cirurgia_w > 0) then

	if (ie_consiste_material_w = 'CZ') then
		select	coalesce(max('S'),'N')
		into STRICT	ie_possui_medicamentos_w
		from 	prescr_material b,
			cirurgia a
		where 	a.nr_cirurgia	= nr_cirurgia_w
		and 	b.nr_prescricao	= a.nr_prescricao
		and	b.qt_material   > 0;
	else
		select	coalesce(max('S'),'N')
		into STRICT	ie_possui_medicamentos_w
		from 	prescr_material b,
			cirurgia a
		where 	a.nr_cirurgia	= nr_cirurgia_w
		and 	b.nr_prescricao	= a.nr_prescricao;
	end if;	

	if ie_possui_medicamentos_w = 'S' then
		CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(174165);
	end if;
end if;

select		max(ie_status_cirurgia),
		max(nr_atendimento),
		max(dt_inicio_real),
		max(IE_PORTE)
into STRICT		ie_status_cirurgia_w,
		nr_atendimento_w,
		dt_inicio_real_w,
		ie_porte_w
from		cirurgia
where		nr_cirurgia		= nr_cirurgia_w;


if (dt_inicio_real_w IS NOT NULL AND dt_inicio_real_w::text <> '') and
	(ie_permite_cir_inter_w = 'N' AND ie_status_cirurgia_w = 4) then
	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(174159);
end if;	

if	(dt_inicio_real_w IS NOT NULL AND dt_inicio_real_w::text <> '' AND ie_status_cirurgia_w <> 4) then	
	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(174160, 'NR_CIRURGIA_W='||nr_cirurgia_w);
end if;	


if (nr_cirurgia_w IS NOT NULL AND nr_cirurgia_w::text <> '') and (nr_cirurgia_w > 0) and (coalesce(ie_porte_w::text, '') = '') and (ie_permite_cancel_porte_w  = 'N') then
	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(220406);
end if;


if (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') and (nr_seq_agenda_w > 0) then
	begin

	select	cd_agenda,
		dt_agenda,
		hr_inicio
	into STRICT	cd_agenda_w,
		dt_agenda_w,
		hr_inicio_w
	from	agenda_paciente
	where	nr_sequencia	= nr_seq_agenda_w;

	update	agenda_paciente
	set	hr_inicio	 = hr_inicio + 1/86400
	where	cd_agenda	 = cd_agenda_w
	and	dt_agenda	 = dt_agenda_w
	and	to_char(hr_inicio,'hh24:mi') = to_char(hr_inicio_w,'hh24:mi')
	and	ie_status_agenda = 'C';

	commit;

	if (ie_cancela_agenda_w	= 'S') or (coalesce(nr_cirurgia_p,0) = 0) then
		update agenda_paciente
		set	dt_atualizacao		= clock_timestamp(),
			nm_usuario		= nm_usuario_p,
			cd_motivo_cancelamento	= cd_motivo_p,
			ie_status_agenda	= 'C',
			ds_observacao		= CASE WHEN ds_observacao = NULL THEN SUBSTR(ds_observacao_p,1,1500)  ELSE SUBSTR(SUBSTR(ds_observacao,1,1500)||CHR(13) || CHR(10)||SUBSTR(ds_observacao_p, 1, 1500),1,3000) END ,
			dt_cancelamento		= clock_timestamp(),
			nm_usuario_cancel	= nm_usuario_p
		where	nr_sequencia		= nr_seq_agenda_w;
	end if;

	if (coalesce(ie_cancela_agenda_consulta_p,'S') = 'S') then
		select	coalesce(count(*),0)
		into STRICT	qt_agepaci_w
		from	agenda_consulta a,
			agenda_paciente b
		where	a.nr_seq_agepaci = b.nr_sequencia
		and	b.nr_sequencia = nr_sequencia_p;

		if (qt_agepaci_w > 0) then
			update	agenda_consulta
			set	ie_status_agenda = 'C',
				nm_usuario = nm_usuario_p,
				dt_atualizacao = clock_timestamp()
			where	nr_seq_agepaci = nr_sequencia_p;
		end if;
	end if;

	update agenda_pac_equip
	set    dt_confirmacao  = NULL
	where  nr_seq_agenda  = nr_seq_agenda_w;
	
	SELECT COUNT(*)
	into STRICT   qt_agenda_espera_w	
	FROM   PACIENTE_ESPERA
	WHERE  nr_seq_agenda = nr_seq_agenda_w;
	
	if (coalesce(qt_agenda_espera_w,0) > 0) then
		UPDATE PACIENTE_ESPERA
		SET    nr_seq_agenda  = NULL
		WHERE  nr_seq_agenda = nr_seq_agenda_w;
		commit;
	end if;
	
	end;
end if;

if (nr_cirurgia_w IS NOT NULL AND nr_cirurgia_w::text <> '') then
	update cirurgia
	set	ie_status_cirurgia		= 3,
		dt_cancelamento			= clock_timestamp(),
		ie_motivo_cancelamento		= cd_motivo_p,
		ds_observacao			= CASE WHEN ds_observacao = NULL THEN SUBSTR(ds_observacao_p,1,1500)  ELSE SUBSTR(SUBSTR(ds_observacao,1,1500)||CHR(13) || CHR(10)||SUBSTR(ds_observacao_p, 1, 1500),1,3000) END
	where 	nr_cirurgia			= nr_cirurgia_w;
	commit;
end if;

if (nr_cirurgia_w IS NOT NULL AND nr_cirurgia_w::text <> '') and (cd_motivo_exc_conta_w IS NOT NULL AND cd_motivo_exc_conta_w::text <> '') then
	open c02;
	loop
	fetch c02 into
		ie_proc_mat_w,
		nr_sequencia_w,
		nr_interno_conta_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin
		CALL excluir_matproc_conta(nr_sequencia_w,nr_interno_conta_w,cd_motivo_exc_conta_w,null,ie_proc_mat_w,nm_usuario_p);
		end;
	end loop;
	close c02;
end if;

if (ie_exclui_item_prescr_w <> 'N') and (ie_desv_kits_w = 'S') then
	CALL desvincula_kit_estoque(nr_prescricao_w);
end if;

if (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') and (nr_prescricao_w > 0) and (ie_exclui_item_prescr_w <> 'N') then
	delete	from prescr_material
	where 	nr_prescricao	= nr_prescricao_w
	and	cd_motivo_baixa	= 0;
end if;

if (nr_prescricao_w IS NOT NULL AND nr_prescricao_w::text <> '') and (nr_prescricao_w > 0) and (ie_exclui_item_prescr_w <> 'N') then
	delete from prescr_procedimento
	where 	nr_prescricao	= nr_prescricao_w
	and	cd_motivo_baixa	= 0;
end if;

/* Francisco - 07/10/2008 - OS 111621 - Tratar cancelamento das autorizacoes convenio */

select	count(*)
into STRICT	qt_autor_w
from	estagio_autorizacao b,
	autorizacao_convenio a
where	a.nr_seq_agenda		= nr_seq_agenda_w
and	a.nr_seq_estagio	= b.nr_sequencia;

if (qt_autor_w > 0) then
	select	max(nr_sequencia)
	into STRICT	nr_seq_estagio_w
	from	estagio_autorizacao
	where	ie_interno	= '70'
	and 	coalesce(ie_situacao,'A') 	= 'A'
	and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
	
	if (coalesce(nr_seq_est_autor_transf_w,0) > 0) then
		nr_seq_estagio_necessidade_w := nr_seq_est_autor_transf_w;
	else
		begin
		select	max(nr_sequencia)
		into STRICT	nr_seq_estagio_necessidade_w
		from	estagio_autorizacao
		where	ie_interno	= '1'
		and	OBTER_EMPRESA_ESTAB(wheb_usuario_pck.get_cd_estabelecimento) = cd_empresa;
		end;
	end if;

	if (nr_seq_estagio_w IS NOT NULL AND nr_seq_estagio_w::text <> '') then

		open c01;
		loop
		fetch c01 into
			nr_sequencia_autor_w,
			ie_interno_w;
		EXIT WHEN NOT FOUND; /* apply on c01 */
			if	((ie_cancela_autor_agenda_w = 'S') and (ie_cancelar_se_autorizada_w not in ('E','D'))) then				
				
				
				/*
				Por padrao o valor do param 616 sera S. Caso esteja como 'E' nao deve atualizar estagio
				*/
				if	((ie_cancelar_se_autorizada_w <> 'N') or (ie_interno_w <> '10')) then
				
					if (ie_interno_w = '10') and	/*Anderson 14/03/2011 - Solicitacao OS296918 - Trocar de autorizado para pendente de aprovacao*/
						(coalesce(ie_atualiz_autorizada_pend_w,'N') = 'S') then
						CALL atualizar_autorizacao_convenio(nr_sequencia_autor_w,nm_usuario_p,nr_seq_estagio_necessidade_w,'N','N','S');
					else
						CALL atualizar_autorizacao_convenio(nr_sequencia_autor_w,nm_usuario_p,coalesce(nr_seq_est_autor_transf_w,nr_seq_estagio_w),'N','N','S');
					end if;
					
				
					
				end if;	
			
				
				
				
			elsif (ie_cancelar_se_autorizada_w = 'D') then
				update	autorizacao_convenio
				set	dt_agenda 	 = NULL,
					nr_seq_agenda 	 = NULL,
					nm_usuario 	= nm_usuario_p,
					dt_atualizacao	= clock_timestamp()
				where	nr_sequencia 	= nr_sequencia_autor_w;
			end if;
		end loop;
		close c01;
	end if;
end if;

if	((ie_cancela_autor_agenda_w = 'S') and (ie_cancelar_se_autorizada_w not in ('E','D'))) then
	select 	count(*)
	into STRICT	qt_autor_cir_w
	from 	autorizacao_cirurgia a
	where	a.nr_seq_agenda	= nr_seq_agenda_w;

	if (qt_autor_cir_w > 0) then
		open c03;
		loop
		fetch c03 into
			nr_seq_autor_cir_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			update 	autorizacao_cirurgia
			set 	ie_estagio_autor = '6'
			where	nr_sequencia	= nr_seq_autor_cir_w;
		end loop;
		close c03;
	end if;
end if;

if (ieSanCancelaReserva_w = 'S') and (nr_seq_agenda_w IS NOT NULL AND nr_seq_agenda_w::text <> '') then
	open c04;
	loop
	fetch c04 into
		nr_seq_reserva_w;
	EXIT WHEN NOT FOUND; /* apply on c04 */
		CALL San_Cancela_Reserva(nr_seq_reserva_w,nm_usuario_p);
	end loop;
	close c04;
end if;

if (ie_cancela_vaga_w = 'S') then
	CALL cancelar_gestao_vaga(nr_seq_agenda_w,null,nm_usuario_p,wheb_usuario_pck.get_cd_estabelecimento);
end if;

if (coalesce(nr_seq_agenda_w,0) > 0) then
	
	SELECT COUNT(*)
	into STRICT   qt_agenda_vaga_w	
	FROM   gestao_vaga
	WHERE  nr_seq_agenda = nr_seq_agenda_w;
	
	if (coalesce(qt_agenda_vaga_w,0) > 0) then
		UPDATE gestao_vaga
		SET    nr_seq_agenda  = NULL
		WHERE  nr_seq_agenda = nr_seq_agenda_w;
		commit;
	end if;
	
end if;

select	coalesce(max(a.ie_opme_integracao),'N'),
		coalesce(max(b.cd_estabelecimento), wheb_usuario_pck.get_cd_estabelecimento)
into STRICT	ie_opme_integracao_w,
		cd_estabelecimento_w
from	agenda_paciente a,
		agenda b
where 	a.cd_agenda	= b.cd_agenda
and 	a.nr_sequencia 	= nr_seq_agenda_w;

envio_auto_int_opme_w := obter_envio_auto_int_opme(cd_estabelecimento_w, nr_seq_agenda_w, 'AA');

if (ie_opme_integracao_w = 'S') and (envio_auto_int_opme_w = 'S' or envio_auto_int_opme_w = 'P') then
	CALL ajusta_status_agenda_int_opme(nr_sequencia_p, 99, null, nm_usuario_p);
end if;

if (ie_gera_historico_w = 'S') and (nr_seq_agenda_w > 0) then
	CALL gerar_agenda_cancel_historico(nr_seq_agenda_w,cd_motivo_p,nm_usuario_p,'C');
end if;

if (ie_desvinc_cancelar_cir = 'S') and (nr_cirurgia_p > 0) and (nr_cirurgia_p IS NOT NULL AND nr_cirurgia_p::text <> '') then
	CALL excluir_vinculo_cirur_agenda(nr_cirurgia_p);
end if;

commit;

if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') and (nr_cirurgia_w IS NOT NULL AND nr_cirurgia_w::text <> '') then
	ds_sep_bv_w := obter_separador_bv;
	
	select	max(cd_setor_atendimento)
	into STRICT	cd_setor_atendimento_w
	from	cirurgia
	where	nr_cirurgia = nr_cirurgia_w;

	ds_param_integ_hl7_w := 'cd_pessoa_fisica=' || cd_pessoa_fisica_w || ds_sep_bv_w ||
							'nr_sequencia=' || nr_sequencia_p || ds_sep_bv_w;
	CALL gravar_agend_integracao(463, ds_param_integ_hl7_w, cd_setor_atendimento_w);
end if;

open c05;
loop
fetch c05 into
	  nr_seq_conjunto_w,
	  nr_seq_pepo_w;
EXIT WHEN NOT FOUND; /* apply on c05 */
	begin
	CALL CME_Desvincular_Conj_Cirurgia(nr_seq_conjunto_w,nr_cirurgia_w,nm_usuario_p,nr_seq_pepo_w);
	exception
	when others then
	null;
	end;
end loop;
close c05;

select	coalesce(max(ie_pyxis_cirurgia), 'N')
into STRICT	ie_pyxis_cirurgia_w
from	parametros_farmacia
where	cd_estabelecimento = cd_estabelecimento_w;

if (ie_pyxis_cirurgia_w = 'S') then
	
	select	coalesce(max(cd_setor_internacao),0)
	into STRICT	cd_setor_atendimento_w
	from	int_disp_movt_pac
	where 	nr_cirurgia = nr_cirurgia_p
	and 	ie_tipo_movimentacao = 'EPA'
	and 	(dt_leitura IS NOT NULL AND dt_leitura::text <> '');

	if (cd_setor_atendimento_w > 0) then
		CALL intdisp_gerar_movimento(nr_atendimento_w, 'EPD', cd_setor_atendimento_w, nr_cirurgia_p);
	end if;	
end if;	
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cancelar_agenda_paciente (nr_sequencia_p bigint, nr_cirurgia_p bigint, nm_usuario_p text, cd_motivo_p text, ds_observacao_p text, ie_cancela_agenda_consulta_p text default 'S') FROM PUBLIC;

