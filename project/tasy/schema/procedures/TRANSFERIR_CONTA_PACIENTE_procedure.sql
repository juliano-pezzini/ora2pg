-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE campos_audit_ant AS (nr_sequencia		bigint,
		dt_liberacao		timestamp,
		qt_itens_audit		bigint,
		nr_interno_conta	bigint,
		dt_inicio_audit		timestamp,
		dt_final_audit		timestamp);


CREATE OR REPLACE PROCEDURE transferir_conta_paciente ( nr_interno_origem_p bigint, nr_interno_destino_p bigint, nm_usuario_p text) AS $body$
DECLARE


--------------------------------------------------------------------------------------------------------
		
type Vetor_Audit_Ant is
	table of campos_audit_ant index by integer;
	
i				integer := 1;
j				integer := 1;
Vetor_Audit_Ant_w		Vetor_Audit_Ant;


--------------------------------------------------------------------------------------------------------
				
dt_acerto_conta_w		timestamp;
cd_convenio_parametro_w		integer;
cd_categoria_parametro_w	varchar(100);
quebra_w			varchar(20) := chr(13)||chr(10);
ie_guia_transf_conta_w		varchar(10);
ie_guia_transf_conta_ww		varchar(1);
cd_estabelecimento_w		bigint;
cd_estabelecimento_origem_w		bigint;
ie_proc_mat_w			smallint;
nr_sequencia_w			bigint;
ie_autorizacao_w		varchar(1);
qt_cont_w			bigint;
nr_seq_protocolo_w		bigint;
ie_status_acerto_w		smallint;
nr_seq_pendencia_w		bigint;
ie_transfere_pend_conta_w	varchar(1):= 'N';
ie_transfere_audit_lib_conta_w	varchar(1):= 'N';
nr_seq_audit_nova_w		bigint;
dt_item_w			timestamp;
nr_seq_auditoria_w		bigint;
dt_liberacao_w			timestamp;
cd_responsavel_w		varchar(10);
ie_ajustar_periodo_conta_w	varchar(1);
dt_max_conta_w			timestamp;
dt_min_conta_w			timestamp;
qt_fora_periodo_w		bigint;
dt_periodo_inicial_w		timestamp;
dt_periodo_final_w		timestamp;
qt_itens_audit_w		bigint;
nr_interno_conta_w		bigint;
ie_ok_w				varchar(1);
ie_trocar_w			varchar(1);
ie_deletar_w			varchar(1);
dt_inicio_audit_w		timestamp;
dt_final_audit_w		timestamp;
qt_audit_periodo_w		bigint;
qt_desconto_w			bigint;
qt_audit_lib_w			bigint;
dt_audit_lib_w			timestamp;
ie_audit_lib_w			varchar(1);
ie_copiar_mover_etapa_w		varchar(15) := 'S';
qt_pendencia_w			bigint;
ie_Gerar_Pendencia_w		varchar(1);
nr_seq_nova_audit_w		bigint;
nr_atendimento_w		bigint;
nr_atend_origem_w		atendimento_paciente.nr_atendimento%type;
qt_alerta_conta_w		bigint	:= 0;
qt_repasse_terceiro_item_w bigint	:= 0;
ie_transf_conta_repasse_w parametro_faturamento.ie_transf_conta_repasse%type;



/*cursor c01 is
	select	ie_proc_mat,
		nr_sequencia
	from	conta_paciente_v
	where	nr_interno_conta	= nr_interno_destino_p
	and	nr_doc_convenio	is null;*/
	
c01 CURSOR FOR
	SELECT	1,
		nr_sequencia
	from	procedimento_paciente
	where	nr_interno_conta	= nr_interno_destino_p
	and	coalesce(nr_doc_convenio::text, '') = ''
	and 	coalesce(cd_motivo_exc_conta::text, '') = ''
	
union all

	SELECT	2,
		nr_sequencia
	from	material_atend_paciente
	where	nr_interno_conta	= nr_interno_destino_p
	and	coalesce(nr_doc_convenio::text, '') = ''
	and 	coalesce(cd_motivo_exc_conta::text, '') = '';
	
	
	
/*cursor c02 is
	select	a.ie_proc_mat,
		a.nr_sequencia,
		a.dt_item
	from	conta_paciente_v a,
		auditoria_propaci b
	where	a.nr_sequencia = b.nr_seq_propaci
	and	a.nr_interno_conta = nr_interno_origem_p
	and	a.ie_proc_mat = 1
	union all
	select	a.ie_proc_mat,
		a.nr_sequencia,
		a.dt_item
	from	conta_paciente_v a,
		auditoria_matpaci b
	where	a.nr_sequencia = b.nr_seq_matpaci
	and	a.nr_interno_conta = nr_interno_origem_p
	and	a.ie_proc_mat = 2;*/
	
c02 CURSOR FOR
	SELECT	1,
		a.nr_sequencia,
		a.dt_procedimento
	from	procedimento_paciente a,
		auditoria_propaci b
	where	a.nr_sequencia = b.nr_seq_propaci
	and	a.nr_interno_conta = nr_interno_origem_p
	and 	coalesce(a.cd_motivo_exc_conta::text, '') = ''
	
union all

	SELECT	2,
		a.nr_sequencia,
		a.dt_atendimento
	from	material_atend_paciente a,
		auditoria_matpaci b
	where	a.nr_sequencia = b.nr_seq_matpaci
	and	a.nr_interno_conta = nr_interno_origem_p
	and 	coalesce(a.cd_motivo_exc_conta::text, '') = '';
	
C03 CURSOR FOR
	SELECT	nr_sequencia
	from	cta_pendencia	 	
	where	nr_interno_conta = nr_interno_origem_p
	and 	ie_transfere_pend_conta_w = 'S'
	order by 1;
	
/*Cursor C04 is
	select 	nvl(nr_sequencia,0),
		dt_liberacao,
		nr_interno_conta,
		dt_periodo_inicial,
		dt_periodo_final
	from 	auditoria_conta_paciente
	where 	((nr_interno_conta = nr_interno_origem_p) or
		 (nr_interno_conta = nr_interno_destino_p))
	order by	1;*/
C04 CURSOR FOR	
	SELECT 	coalesce(nr_sequencia,0),
		dt_liberacao,
		nr_interno_conta,
		dt_periodo_inicial,
		dt_periodo_final
	from 	auditoria_conta_paciente
	where 	nr_interno_conta = nr_interno_origem_p
	
union all

	SELECT 	coalesce(nr_sequencia,0),
		dt_liberacao,
		nr_interno_conta,
		dt_periodo_inicial,
		dt_periodo_final
	from 	auditoria_conta_paciente
	where 	nr_interno_conta = nr_interno_destino_p
	order by 1;
	


BEGIN

select 	max(nr_seq_protocolo),
	max(ie_status_acerto),
	max(cd_responsavel),
	max(nr_atendimento)
into STRICT	nr_seq_protocolo_w,
	ie_status_acerto_w,
	cd_responsavel_w,
	nr_atend_origem_w
from 	conta_paciente
where 	nr_interno_conta = nr_interno_origem_p;

select	count(*)
into STRICT	qt_desconto_w
from	conta_paciente_desconto
where	nr_interno_conta = nr_interno_origem_p;



select	count(*)
into STRICT	qt_repasse_terceiro_item_w
from	repasse_terceiro_item
where	nr_interno_conta = nr_interno_origem_p;

select	cd_estabelecimento
into STRICT cd_estabelecimento_origem_w
from	conta_paciente
where	nr_interno_conta = nr_interno_origem_p;

select	coalesce(max(ie_transf_conta_repasse),'N')
into STRICT	ie_transf_conta_repasse_w
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_origem_w;


if (coalesce(nr_seq_protocolo_w,0) > 0) then
	-- Nao e possivel transferir itens de uma conta que esta em protocolo!
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(182624);
elsif (coalesce(ie_status_acerto_w,1) = 2) then
	-- Nao e possivel transferir itens de uma conta fechada!
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(182625);
elsif (coalesce(qt_desconto_w,0) > 0) then
	-- Nao e possivel transferir uma conta com desconto. Para realizar a transferencia, o desconto da conta deve ser desfeito.
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(194256);
elsif (coalesce(qt_repasse_terceiro_item_w,0) > 0 and coalesce(ie_transf_conta_repasse_w, 'N') = 'C') then
	-- Nao e possivel transferir uma conta que tenha item de repasse vinculado. A transferencia requer exclusao do item de repasse.
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(1116170);
elsif (coalesce(qt_repasse_terceiro_item_w,0) > 0 and coalesce(ie_transf_conta_repasse_w, 'N') = 'A') then
		update	repasse_terceiro_item
		set	nr_interno_conta	= nr_interno_destino_p
		where	nr_interno_conta = nr_interno_origem_p;
end if;

/* edgar 24/06/2004 - os 9068 , tirei a atualizacao de usuario e data*/

select	cd_convenio_parametro,
	cd_categoria_parametro,
	dt_acerto_conta,
	cd_estabelecimento,
	dt_periodo_inicial,
	dt_periodo_final,
	nr_atendimento
into STRICT	cd_convenio_parametro_w,
	cd_categoria_parametro_w,
	dt_acerto_conta_w,
	cd_estabelecimento_w,
	dt_periodo_inicial_w,
	dt_periodo_final_w,
	nr_atendimento_w
from	conta_paciente
where	nr_interno_conta = nr_interno_destino_p;

ie_autorizacao_w		:= coalesce(obter_valor_param_usuario(67, 415, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'S');
ie_transfere_pend_conta_w	:= coalesce(obter_valor_param_usuario(67, 427, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N');
ie_transfere_audit_lib_conta_w	:= coalesce(obter_valor_param_usuario(67, 433, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N');
ie_Gerar_Pendencia_w 		:= coalesce(obter_valor_param_usuario(1116, 136, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N');
ie_copiar_mover_etapa_w		:= coalesce(obter_valor_param_usuario(67, 698, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w),'N');

if (coalesce(ie_autorizacao_w,'S') = 'N') then
	select	count(*)
	into STRICT	qt_cont_w
	from	autorizacao_convenio a
	where	a.cd_convenio		= cd_convenio_parametro_w
	and	exists (SELECT	1
			from	procedimento_autorizado x,
				procedimento_paciente y
			where	y.nr_interno_conta		= nr_interno_origem_p
			and	x.nr_seq_autorizacao	= a.nr_sequencia
			and	x.cd_procedimento		= y.cd_procedimento
			and	x.ie_origem_proced		= y.ie_origem_proced
			
union

			SELECT	1
			from	material_autorizado x,
				material_atend_paciente y
			where	y.nr_interno_conta		= nr_interno_origem_p
			and	x.nr_seq_autorizacao	= a.nr_sequencia
			and	x.cd_material		= y.cd_material);
	if (qt_cont_w = 0) then
		-- A conta #@NR_INTERNO_CONTA#@ possui itens nao autorizados! Parametro [415]
		CALL Wheb_mensagem_pck.exibir_mensagem_abort(182627,'NR_INTERNO_CONTA='||nr_interno_origem_p);
	end if;

end if;

/*insert	into logxxxxx_tasy
	(dt_atualizacao,
	nm_usuario,
	cd_log,
	ds_log)
values	(sysdate,
	nm_usuario_p,
	7001,
	'Transf. Contas. Cta Origem: ' || nr_interno_origem_p || ' Cta Dest.: '  ||nr_interno_destino_p);*/
select	coalesce(max(ie_guia_transf_conta),'N'),
	coalesce(max(ie_ajustar_periodo_conta),'N')
into STRICT	ie_guia_transf_conta_w,
	ie_ajustar_periodo_conta_w
from	convenio_estabelecimento
where	cd_convenio		= cd_convenio_parametro_w
and	cd_estabelecimento	= cd_estabelecimento_w;

select	coalesce(max(ie_guia_transf_conta),'R')
into STRICT	ie_guia_transf_conta_ww
from	parametro_faturamento
where	cd_estabelecimento = cd_estabelecimento_w;

if (ie_guia_transf_conta_ww = 'R') then

	update	material_atend_paciente
	set	nr_doc_convenio	= CASE WHEN ie_guia_transf_conta_w='S' THEN null  ELSE nr_doc_convenio END
	where	nr_interno_conta = nr_interno_origem_p;
	
	update	procedimento_paciente
	set	nr_doc_convenio	= CASE WHEN ie_guia_transf_conta_w='S' THEN null  ELSE nr_doc_convenio END
	where	nr_interno_conta = nr_interno_origem_p;

elsif (ie_guia_transf_conta_ww = 'T') then

	update	material_atend_paciente
	set	nr_doc_convenio	 = NULL
	where	nr_interno_conta = nr_interno_origem_p;
	
	update	procedimento_paciente
	set	nr_doc_convenio	 = NULL
	where	nr_interno_conta = nr_interno_origem_p;
end if;

update	material_atend_paciente			-- Conta Origem: 
set	ds_observacao	= substr(ds_observacao ||wheb_mensagem_pck.get_texto(302536)|| nr_interno_origem_p,1,255)
where	nr_interno_conta = nr_interno_origem_p;


update	procedimento_paciente			-- Conta Origem: 
set	ds_observacao	= substr(ds_observacao ||wheb_mensagem_pck.get_texto(302536)|| nr_interno_origem_p,1,255)
where	nr_interno_conta = nr_interno_origem_p;

if (coalesce(ie_transfere_audit_lib_conta_w,'N') = 'S') then

	delete	from auditoria_conta_espelho
	where	nr_atendimento = nr_atendimento_w;
	open C04;
	loop
	fetch C04 into	
		nr_seq_auditoria_w,
		dt_liberacao_w,
		nr_interno_conta_w,
		dt_inicio_audit_w,
		dt_final_audit_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin		
		i	:= coalesce(Vetor_Audit_Ant_w.Count,0) + 1;
		
		select	sum(qt_itens_audit)
		into STRICT	qt_itens_audit_w
		from (
			SELECT	count(*) qt_itens_audit
			from	auditoria_propaci
			where	nr_seq_auditoria = nr_seq_auditoria_w
			
union all

			SELECT	count(*) qt_itens_audit
			from	auditoria_matpaci
			where	nr_seq_auditoria = nr_seq_auditoria_w
			
union all

			select	count(*) qt_itens_audit
			from	auditoria_externa
			where	nr_seq_auditoria = nr_seq_auditoria_w
			) alias4;
		
		Vetor_Audit_Ant_w[i].nr_sequencia  	:= nr_seq_auditoria_w;
		Vetor_Audit_Ant_w[i].dt_liberacao  	:= dt_liberacao_w;
		Vetor_Audit_Ant_w[i].qt_itens_audit	:= qt_itens_audit_w;
		Vetor_Audit_Ant_w[i].nr_interno_conta	:= nr_interno_conta_w;
		Vetor_Audit_Ant_w[i].dt_inicio_audit	:= dt_inicio_audit_w;
		Vetor_Audit_Ant_w[i].dt_final_audit	:= dt_final_audit_w;
		
		insert into auditoria_conta_espelho(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			nr_atendimento,
			nr_interno_conta,
			nr_seq_auditoria,
			dt_periodo_inicial,
			dt_periodo_final,
			dt_liberacao,
			nr_seq_audit_nova
		) values (
			nextval('auditoria_conta_espelho_seq'),
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			nr_atendimento_w,
			nr_interno_conta_w,
			nr_seq_auditoria_w,
			dt_inicio_audit_w,
			dt_final_audit_w,
			dt_liberacao_w,
			null
		);
		end;
	end loop;
	close C04;
	
end if;

open c02;
loop
fetch c02 into	
	ie_proc_mat_w,
	nr_sequencia_w,
	dt_item_w;
EXIT WHEN NOT FOUND; /* apply on c02 */
	begin	
	CALL trocar_conta_auditoria(nr_interno_destino_p, nr_sequencia_w, ie_proc_mat_w, nm_usuario_p, null, coalesce(ie_transfere_audit_lib_conta_w,'N'), 'N', 'S');
	end;
end loop;
close c02;

if (coalesce(ie_transfere_audit_lib_conta_w,'N') = 'S') then

	open C04;
	loop
	fetch C04 into	
		nr_seq_auditoria_w,
		dt_liberacao_w,
		nr_interno_conta_w,
		dt_inicio_audit_w,
		dt_final_audit_w;
	EXIT WHEN NOT FOUND; /* apply on C04 */
		begin
		ie_ok_w		:= 'S';
		ie_trocar_w	:= 'N';
		ie_deletar_w	:= 'N';
		dt_audit_lib_w	:= null;
		ie_audit_lib_w	:= 'N';
		nr_seq_nova_audit_w:= 0;
		
		if (Vetor_Audit_Ant_w.count > 0) then
			ie_ok_w		:= 'N';
			ie_trocar_w	:= 'N';
			ie_deletar_w	:= 'N';
			dt_audit_lib_w	:= null;
			ie_audit_lib_w	:= 'N';
			
			nr_seq_nova_audit_w:= 0;
		
			for	j in 1..Vetor_Audit_Ant_w.count loop
			
				if (nr_seq_auditoria_w = Vetor_Audit_Ant_w[j].nr_sequencia) then
					ie_ok_w		:= 'S';
					
					select	sum(qt_itens_audit)
					into STRICT	qt_itens_audit_w
					from (
						SELECT	count(*) qt_itens_audit
						from	auditoria_propaci
						where	nr_seq_auditoria = nr_seq_auditoria_w
						
union all

						SELECT	count(*) qt_itens_audit
						from	auditoria_matpaci
						where	nr_seq_auditoria = nr_seq_auditoria_w
						
union all

						select	count(*) qt_itens_audit
						from	auditoria_externa
						where	nr_seq_auditoria = nr_seq_auditoria_w
						) alias4;
						
					select	count(*)
					into STRICT	qt_audit_periodo_w
					from	auditoria_conta_paciente
					where	((nr_interno_conta = nr_interno_origem_p) or (nr_interno_conta = nr_interno_destino_p))
					and	dt_periodo_inicial = dt_inicio_audit_w
					and	dt_periodo_final = dt_final_audit_w;
					
					if (Vetor_Audit_Ant_w[j].nr_interno_conta = nr_interno_origem_p) and (qt_itens_audit_w = 0) then
						ie_trocar_w	:= 'S';
					end if;
					
					if (Vetor_Audit_Ant_w[j].qt_itens_audit <> qt_itens_audit_w) and (qt_itens_audit_w = 0) and (qt_audit_periodo_w > 1) then
						ie_deletar_w	:= 'S';
					end if;
				else
					dt_liberacao_w	:= Vetor_Audit_Ant_w[j].dt_liberacao;
					
					select	count(*)
					into STRICT	qt_audit_lib_w
					from	auditoria_conta_paciente
					where	nr_sequencia = nr_seq_auditoria_w
					and	dt_periodo_inicial = Vetor_Audit_Ant_w[j].dt_inicio_audit
					and	dt_periodo_final = Vetor_Audit_Ant_w[j].dt_final_audit;
					
					if (coalesce(qt_audit_lib_w,0) > 0) then
						ie_audit_lib_w	:= 'S';
						dt_audit_lib_w	:= dt_liberacao_w;
					end if;	
					
				end if;
			end loop;
		end if;
		
		if (ie_ok_w = 'N') then
			update	auditoria_conta_paciente
			set	dt_liberacao = CASE WHEN ie_audit_lib_w='S' THEN  dt_audit_lib_w  ELSE dt_liberacao_w END ,
				vl_auditoria_orig = CASE WHEN ie_Gerar_Pendencia_w='V' THEN  Obter_valor_Orig_Audit(nr_sequencia)  ELSE obter_valor_auditoria(nr_sequencia, nr_interno_conta) END
			where	nr_sequencia = nr_seq_auditoria_w;
		else
			if (ie_trocar_w = 'S') then
				update	auditoria_conta_paciente
				set	nr_interno_conta = nr_interno_destino_p
				where	nr_sequencia = nr_seq_auditoria_w;
			end if;
			
			if (ie_deletar_w = 'S') then
				if (ie_Gerar_Pendencia_w = 'V') then

					select 	count(*)
					into STRICT	qt_pendencia_w
					from  	cta_pendencia
					where 	nr_seq_auditoria = nr_seq_auditoria_w;
					
					select 	coalesce(max(nr_seq_audit_nova),0)
					into STRICT	nr_seq_nova_audit_w
					from 	auditoria_conta_espelho
					where 	nr_atendimento = nr_atendimento_w
					and 	nr_seq_auditoria = nr_seq_auditoria_w;
				
					if (qt_pendencia_w > 0) and (nr_seq_nova_audit_w > 0) then
					
						update	cta_pendencia
						set 	nr_seq_auditoria = nr_seq_nova_audit_w
						where 	nr_seq_auditoria = nr_seq_auditoria_w;
					
					end if;
				
				end if;
				delete	from auditoria_conta_paciente
				where	nr_sequencia = nr_seq_auditoria_w;
			end if;
		end if;
		
		end;
	end loop;
	close C04;

end if;

select	count(*)
into STRICT	qt_alerta_conta_w
from	alerta_auditoria_conpaci
where	nr_atendimento = nr_atend_origem_w
and	nr_interno_conta = nr_interno_origem_p;

if (qt_alerta_conta_w > 0) then

	update	alerta_auditoria_conpaci
	set	nr_interno_conta = nr_interno_destino_p
	where	nr_atendimento = nr_atend_origem_w
	and	nr_interno_conta = nr_interno_origem_p;

end if;
	
update	material_atend_paciente
set	nr_interno_conta = nr_interno_destino_p,
	cd_convenio = cd_convenio_parametro_w,
	cd_categoria = cd_categoria_parametro_w,
	dt_acerto_conta = dt_acerto_conta_w,
	cd_motivo_exc_conta  = NULL,
	ds_compl_motivo_excon  = NULL,
	nm_usuario = nm_usuario_p,
	dt_atualizacao = clock_timestamp()
where	nr_interno_conta = nr_interno_origem_p;


update	procedimento_paciente
set	nr_interno_conta = nr_interno_destino_p,
	cd_convenio = cd_convenio_parametro_w,
	cd_categoria = cd_categoria_parametro_w,
	dt_acerto_conta = dt_acerto_conta_w,
	cd_motivo_exc_conta  = NULL,
	ds_compl_motivo_excon  = NULL,
	nm_usuario = nm_usuario_p,
	dt_atualizacao = clock_timestamp()
where	nr_interno_conta = nr_interno_origem_p;

update	conta_pac_deducao_conv
set		nr_seq_conta_orig	= nr_interno_destino_p
where	nr_seq_conta_orig	= nr_interno_origem_p;

update	conta_pac_deducao_conv
set		nr_seq_conta_des	= nr_interno_destino_p
where	nr_seq_conta_des	= nr_interno_origem_p;


--Transferencia de contas das pendencias
open C03;
loop
fetch C03 into	
	nr_seq_pendencia_w;
EXIT WHEN NOT FOUND; /* apply on C03 */
	begin
	
	update	cta_pendencia
	set 	nr_interno_conta = nr_interno_destino_p,
		nr_seq_conta_orig = nr_interno_origem_p,	-- 302538 - Trans. contas (Conta Origem = 
		ds_complemento = CASE WHEN ds_complemento = NULL THEN  wheb_mensagem_pck.get_texto(302538) || nr_interno_origem_p || ')'  ELSE ds_complemento || ', '||wheb_mensagem_pck.get_texto(302538) || nr_interno_origem_p || ')' END
	where 	nr_sequencia = nr_seq_pendencia_w;
		
	/*insert into logxxxxx_tasy (cd_log, ds_log, nm_usuario, dt_atualizacao)
		values (70484, 'Conta Origem = '|| nr_interno_origem_p || ' Conta Destino = ' || nr_interno_destino_p, nm_usuario_p, sysdate);*/
	
	end;
end loop;
close C03;


update sus_aih
set	nr_interno_conta = nr_interno_destino_p,
	nm_usuario = nm_usuario_p,
	dt_atualizacao = clock_timestamp()
where	nr_interno_conta = nr_interno_origem_p;

update	conta_paciente
set	nm_usuario = nm_usuario_p,
	dt_atualizacao = clock_timestamp(),
	cd_responsavel = CASE WHEN cd_responsavel = NULL THEN  coalesce(cd_responsavel_w, cd_responsavel)  ELSE cd_responsavel END
where	nr_interno_conta = nr_interno_destino_p;

if (coalesce(ie_copiar_mover_etapa_w,'S') = 'S') then

	update	conta_paciente_etapa
	set	nr_interno_conta	= nr_interno_destino_p,
		nm_usuario		= nm_usuario_p,
		dt_atualizacao		= clock_timestamp(),
		nr_seq_conta_origem	= nr_interno_origem_p
	where	nr_interno_conta	= nr_interno_origem_p;

elsif (coalesce(ie_copiar_mover_etapa_w,'S') = 'N') then

	insert into conta_paciente_etapa(
		nr_sequencia,
		nr_interno_conta,
		dt_atualizacao,
		nm_usuario,
		dt_etapa,
		nr_seq_etapa,
		cd_setor_atendimento,
		cd_pessoa_fisica,
		nr_seq_motivo_dev,
		ds_observacao,
		nr_lote_barras,
		nr_seq_protocolo)
	SELECT	nextval('conta_paciente_etapa_seq'),
		nr_interno_destino_p,
		clock_timestamp(),
		nm_usuario_p,
		dt_etapa,
		nr_seq_etapa,
		cd_setor_atendimento,
		cd_pessoa_fisica,
		nr_seq_motivo_dev,
		ds_observacao,
		nr_lote_barras,
		nr_seq_protocolo
	from	conta_paciente_etapa
	where	nr_interno_conta = nr_interno_origem_p;

end if;

/* mbmuller - OS 837824 - removido select por razao de problemas na transferencia de observacoes de uma conta para outra */

insert	into conta_paciente_observacao(
	ds_observacao,
	dt_atualizacao,           
	dt_atualizacao_nrec,     
	dt_liberacao,             
	nm_usuario,               
	nm_usuario_nrec,          
	nr_atendimento,           
	nr_interno_conta,         
	nr_seq_tipo_obs,          
	nr_sequencia)
SELECT	substr(wheb_mensagem_pck.get_texto(302541,'NR_INTERNO_CONTA_W='||nr_interno_conta||';NR_INTERNO_DESTINO_W='||nr_interno_destino_p||';DS_OBSERVACAO_W='||substr(ds_observacao,1,3900)),1,4000),
	clock_timestamp(),           
	clock_timestamp(),     
	dt_liberacao,             
	nm_usuario_p,               
	nm_usuario_p,          
	nr_atendimento,           
	nr_interno_destino_p,         
	nr_seq_tipo_obs,          
	nextval('conta_paciente_observacao_seq')
from	conta_paciente_observacao	
where	nr_interno_conta = nr_interno_origem_p;

update	conta_paciente_anexo
set 	nr_interno_conta = nr_interno_destino_p,
	dt_atualizacao = clock_timestamp(),
	nm_usuario = nm_usuario_p
where 	nr_interno_conta = nr_interno_origem_p;


update	tiss_conta_proc
set	nr_interno_conta	= nr_interno_destino_p,
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp()
where	nr_interno_conta	= nr_interno_origem_p;


if (coalesce(ie_ajustar_periodo_conta_w,'N') = 'S') then	-- OS 243812
	select 	count(*)
	into STRICT	qt_fora_periodo_w
	from 	conta_paciente_v a
	where 	a.nr_interno_conta = nr_interno_destino_p
	and 	not(coalesce(a.dt_conta,a.dt_item) between dt_periodo_inicial_w and dt_periodo_final_w);

	if (qt_fora_periodo_w > 0) then
		select 	max(dt_conta),
			min(dt_conta)
		into STRICT	dt_max_conta_w,
			dt_min_conta_w
		from 	conta_paciente_v
		where 	nr_interno_conta = nr_interno_destino_p;
	
		update	conta_paciente
		set	dt_periodo_inicial = dt_min_conta_w,
			dt_periodo_final = dt_max_conta_w
		where 	nr_interno_conta = nr_interno_destino_p;
	end if;
	
end if;

if	((ie_guia_transf_conta_w	= 'S' AND ie_guia_transf_conta_ww = 'R') or (ie_guia_transf_conta_ww = 'T')) then
	open c01;
	loop
	fetch c01 into	
		ie_proc_mat_w,
		nr_sequencia_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		if (ie_proc_mat_w		= 1)  then
			CALL atualiza_preco_procedimento(nr_sequencia_w,cd_convenio_parametro_w,nm_usuario_p);
		else
			CALL atualiza_preco_material(nr_sequencia_w,nm_usuario_p);
		end if;
		end;
	end loop;
	close c01;
end if;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE transferir_conta_paciente ( nr_interno_origem_p bigint, nr_interno_destino_p bigint, nm_usuario_p text) FROM PUBLIC;

