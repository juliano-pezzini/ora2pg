-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_abrir_proc_pacote_cta ( nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p text, ie_acao_p text ) AS $body$
DECLARE

			
/*	ie_acao
	X	- Acao nao informada, e o comportamento padrao da rotina, antes da adicao deste parametro
	RC	-  Recurso de Glosa (conforme determinacao da pls_gerar_valor_pos_estab)
*/
nr_seq_pacote_w			pls_pacote_tipo_acomodacao.nr_seq_pacote%type;
nr_seq_composicao_w		pls_pacote_tipo_acomodacao.nr_seq_composicao%type;
ie_abrir_pacote_fat_w		pls_pacote_tipo_acomodacao.ie_abrir_pacote_fat%type;
nr_seq_prestador_exec_w		pls_conta.nr_seq_prestador_exec%type;
ie_tipo_guia_w			pls_conta.ie_tipo_guia%type;
qt_registro_w			integer;
qt_proc_lancados_w		integer;
ie_classificacao_w		procedimento.ie_classificacao%type;
nr_seq_conta_proc_w		pls_conta_proc.nr_sequencia%type;
nr_seq_conta_mat_w		pls_conta_mat.nr_sequencia%type;
qt_proc_lib_w			pls_conta_proc.qt_procedimento%type;
nr_seq_prestador_solic_w	pls_conta_v.nr_seq_prestador_solic%type;
nr_seq_prestador_prot_w		pls_conta_v.nr_seq_prestador_prot%type;
ie_medico_exec_coope_w		varchar(10);
ie_medico_solic_coope_w		varchar(10);
cd_medico_exec_w		pls_conta.cd_medico_executor%type;
cd_medico_solicitante_w		pls_conta.cd_medico_solicitante%type;
dt_atendimento_referencia_w	pls_conta.dt_atendimento_referencia%type;
ie_ato_cooperado_w		pls_conta_proc.ie_ato_cooperado%type;
ie_ato_cooperado_mat_w		pls_conta_mat.ie_ato_cooperado%type;
nr_seq_regra_cooperado_w	pls_conta_proc.nr_seq_regra_cooperado%type;
nr_seq_regra_cooperado_mat_w	pls_conta_mat.nr_seq_regra_cooperado%type;
ie_tipo_despesa_mat_w		pls_conta_mat.ie_tipo_despesa%type;
ie_acao_w			varchar(10) := coalesce(ie_acao_p, 'X');
ie_tipo_protocolo_w		pls_protocolo_conta.ie_tipo_protocolo%type;
vl_negociado_w			pls_pacote_procedimento.vl_negociado%type;
tx_item_w			pls_conta_proc.tx_item%type;
cd_procedimento_ant_w		pls_conta_proc.cd_procedimento%type;
tx_item_ant_w			pls_conta_proc.tx_item%type;
dt_procedimento_ant_w		pls_conta_proc.dt_procedimento%type;
nr_seq_guia_w				pls_conta.nr_seq_guia%type;
dt_autorizacao_w			pls_guia_plano.dt_autorizacao%type;
dt_referencia_utilizacao_w	pls_conta.dt_atendimento_referencia%type;
ie_tipo_data_w				pls_parametros.ie_forma_pacote_fat%type;
tb_nr_seq_conta_proc_w		dbms_sql.number_table;
tb_nr_seq_conta_mat_w		dbms_sql.number_table;
tb_nr_seq_conta_pos_w		dbms_sql.number_table;


C01 CURSOR(	nr_seq_composicao_pc	pls_pacote_composicao.nr_sequencia%type,
		dt_referencia_pc	timestamp,
		nr_seq_prestador_pc	pls_pacote_procedimento.nr_seq_prestador%type,
		ie_tipo_guia_pc		pls_pacote_procedimento.ie_tipo_guia%type) FOR
        SELECT  b.vl_negociado,
                b.cd_procedimento,
                b.ie_origem_proced,
                b.ie_situacao,
                coalesce(b.qt_procedimento,1) qt_procedimento,
                b.nr_sequencia,
		b.ie_via_acesso,
		b.cd_medico,
		b.nr_seq_cbo_saude,
		CASE WHEN b.ie_via_acesso='M' THEN  50 WHEN b.ie_via_acesso='D' THEN  70  ELSE 100 END  tx_item,
		nr_seq_grau_partic_ent
        from    pls_pacote_composicao	a,
		pls_pacote_procedimento	b
        where   a.nr_sequencia		= nr_seq_composicao_pc
	and	((coalesce(a.dt_inicio_vigencia::text, '') = '') or (trunc(a.dt_inicio_vigencia) <= dt_referencia_pc))
	and	((coalesce(a.dt_fim_vigencia::text, '') = '') or (fim_dia(a.dt_fim_vigencia) >= dt_referencia_pc))
	and	b.nr_seq_composicao	= a.nr_sequencia
        and     b.ie_situacao     	= 'A'
        and     b.ie_estrutura    	= 'S'
        and     ((coalesce(b.nr_seq_prestador::text, '') = '') or (b.nr_seq_prestador = nr_seq_prestador_pc))
        and     ((coalesce(b.ie_tipo_guia::text, '') = '') or (b.ie_tipo_guia = ie_tipo_guia_pc));

C02 CURSOR(	nr_seq_composicao_pc	pls_pacote_composicao.nr_sequencia%type,
		dt_referencia_pc	timestamp,
		nr_seq_prestador_pc	pls_pacote_procedimento.nr_seq_prestador%type,
		ie_tipo_guia_pc		pls_pacote_procedimento.ie_tipo_guia%type) FOR
        SELECT  b.vl_negociado,
                b.cd_material,
                b.ie_situacao,
                coalesce(b.qt_material,1) qt_material,
                b.nr_sequencia,
                b.nr_seq_material
        from    pls_pacote_composicao	a,
		pls_pacote_material	b
        where   a.nr_sequencia		= nr_seq_composicao_pc
	and	((coalesce(a.dt_inicio_vigencia::text, '') = '') or (trunc(a.dt_inicio_vigencia) <= dt_referencia_pc))
	and	((coalesce(a.dt_fim_vigencia::text, '') = '') or (fim_dia(a.dt_fim_vigencia) >= dt_referencia_pc))
	and	b.nr_seq_composicao	= a.nr_sequencia
        and     b.ie_situacao     	= 'A'
        and     ((coalesce(b.nr_seq_prestador::text, '') = '') or (b.nr_seq_prestador = nr_seq_prestador_pc))
        and     ((coalesce(b.ie_tipo_guia::text, '') = '') or (b.ie_tipo_guia = ie_tipo_guia_pc));
	
C03 CURSOR(nr_seq_conta_pc		pls_conta.nr_sequencia%type)FOR
	SELECT	a.nr_sequencia nr_seq_conta_proc,
		a.nr_seq_regra_pct_fat,
		a.dt_procedimento_referencia,
		a.dt_inicio_proc,
		a.dt_fim_proc,
		coalesce(a.qt_procedimento_imp,0) qt_procedimento,
		coalesce(a.tx_item,100) tx_item,
		a.ie_via_acesso,
		a.nr_seq_proc_ref,
		(SELECT max(nr_seq_conta_proc) from pls_proc_participante x where a.nr_seq_participante_hi = x.nr_sequencia) nr_seq_proc_ref_2,
		(select max(x.nr_sequencia) from pls_conta_proc_regra x where x.nr_sequencia = a.nr_sequencia) nr_seq_conta_proc_regra,
		(select max(x.nr_seq_item_tiss) from pls_conta_proc_regra x where x.nr_sequencia = a.nr_sequencia) nr_seq_item_tiss,
		(select max(x.nr_seq_item_tiss_vinculo) from pls_conta_proc_regra x where x.nr_sequencia = a.nr_sequencia) nr_seq_item_tiss_vinculo
	from	pls_conta_proc	a
	where	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
	and	a.nr_seq_conta		= nr_seq_conta_pc
	and	a.ie_status		!= 'M'
	order 	by a.cd_procedimento,
		   a.dt_procedimento_referencia,
		   a.nr_seq_proc_ref;

	
-- carrega o pos e os seus proc para apagar
c04 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type)FOR
	SELECT	b.nr_sequencia nr_seq_conta_pos,
		a.nr_sequencia nr_seq_conta_proc
	from	pls_conta_proc			a,
		pls_conta_pos_estabelecido	b
	where	b.nr_seq_conta_proc	= a.nr_sequencia
	and	a.ie_status		= 'M'
	and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
	and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
	and	b.ie_status_faturamento	!= 'A'
	and	b.ie_cobrar_mensalidade	!= 'A'
	and	a.nr_seq_conta		= nr_seq_conta_pc;


-- carrega o pos e os seus mat para apagar
c05 CURSOR(	nr_seq_conta_pc		pls_conta.nr_sequencia%type)FOR
	SELECT	b.nr_sequencia nr_seq_conta_pos,
		a.nr_sequencia nr_seq_conta_mat
	from	pls_conta_mat			a,
		pls_conta_pos_estabelecido	b
	where	b.nr_seq_conta_mat	= a.nr_sequencia
	and	a.ie_status		= 'M'
	and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
	and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
	and	b.ie_status_faturamento	!= 'A'
	and	b.ie_cobrar_mensalidade	!= 'A'
	and	a.nr_seq_conta		= nr_seq_conta_pc;
	
C06 CURSOR FOR
	SELECT  nr_sequencia nr_seq_ocor
	from	pls_ocorrencia_benef
	where   nr_seq_ocor_pag in (	SELECT 	o.nr_sequencia
					from	pls_ocorrencia_benef o,
						pls_conta_proc p
					where	o.nr_seq_conta_proc	= p.nr_sequencia
					and	ie_status		= 'M'
					and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
					and	p.nr_seq_conta		= nr_seq_conta_p);
										
C07 CURSOR FOR
	SELECT  nr_sequencia nr_seq_ocor
	from	pls_ocorrencia_benef
	where   nr_seq_ocor_pag in (	SELECT 	o.nr_sequencia
					from	pls_ocorrencia_benef o,
						pls_conta_mat p
					where	o.nr_seq_conta_mat	= p.nr_sequencia
					and	ie_status		= 'M'
					and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
					and	p.nr_seq_conta		= nr_seq_conta_p);

BEGIN

select	max(ie_tipo_guia),
	max(nr_seq_prestador_exec),
	max(nr_seq_prestador_solic),
	max(nr_seq_prestador_prot),
	max(cd_medico_executor),
	max(cd_medico_solicitante),
	max(dt_atendimento),
	max(Ie_tipo_protocolo),
	max(nr_seq_guia)
into STRICT	ie_tipo_guia_w,
	nr_seq_prestador_exec_w,
	nr_seq_prestador_solic_w,
	nr_seq_prestador_prot_w,
	cd_medico_exec_w,
	cd_medico_solicitante_w,
	dt_atendimento_referencia_w,
	ie_tipo_protocolo_w,
	nr_seq_guia_w
from	pls_conta_v
where	nr_sequencia	= nr_seq_conta_p;

begin

	select	coalesce(max(dt_autorizacao),clock_timestamp())
	into STRICT	dt_autorizacao_w
	from	pls_guia_plano
	where	nr_sequencia = nr_seq_guia_w;
	exception
	when others then
	dt_autorizacao_w := clock_timestamp();
	
end;


ie_medico_exec_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_exec_w,dt_atendimento_referencia_w,null);

if (ie_medico_exec_coope_w = 'S') then
	ie_medico_exec_coope_w	:= 'C';
end if;

ie_medico_solic_coope_w	:= pls_obter_se_cooperado_ativo(cd_medico_solicitante_w,dt_atendimento_referencia_w,null);

if (ie_medico_solic_coope_w = 'S') then
	ie_medico_solic_coope_w	:= 'C';
end if;
						
-- Quando a chamada desta rotina for oriunda do Recurso de Glosa, e necessario

-- desconsiderar os itens originais da conta que estao sendo recursada,
if (ie_acao_w	= 'RC') then
		
	delete 	FROM pls_analise_fluxo_ocor
	where 	nr_seq_fluxo_item     in (	SELECT 	a.nr_sequencia
						from	pls_analise_fluxo_item a,
							pls_analise_conta b
						where	a.nr_seq_analise = b.nr_sequencia
						and	b.ie_origem_analise = 8
						and	a.nr_seq_conta_proc	in (    SELECT 	nr_sequencia
											from	pls_conta_proc
											where	ie_status	= 'M'
											and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
											and	nr_seq_conta	= nr_seq_conta_p));
	delete from pls_analise_fluxo_item
	where	nr_sequencia in (
		SELECT	a.nr_sequencia
		from	pls_analise_fluxo_item a,
			pls_analise_conta b
		where	a.nr_seq_analise = b.nr_sequencia
		and	b.ie_origem_analise = 8
		and	a.nr_seq_conta_proc	in (    SELECT 	nr_sequencia
							from	pls_conta_proc
							where	ie_status	= 'M'
							and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
							and	nr_seq_conta	= nr_seq_conta_p));
				
	delete	FROM pls_ocorrencia_benef
	where	nr_seq_conta_pos_estab	in (    SELECT 	b.nr_sequencia
						from	pls_conta_proc a,
							pls_conta_pos_estabelecido b
						where	a.nr_sequencia = b.nr_seq_conta_proc
						and	a.ie_status	= 'M'
						and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
						and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
						and	a.nr_seq_conta	= nr_seq_conta_p
						
union all

						SELECT 	b.nr_sequencia
						from	pls_conta_mat a,
							pls_conta_pos_estabelecido b
						where	a.nr_sequencia = b.nr_seq_conta_proc
						and	a.ie_status	= 'M'
						and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
						and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
						and	a.nr_seq_conta	= nr_seq_conta_p
						);

	delete	FROM pls_fatura_proc
	where	nr_seq_conta_pos_estab	in (    SELECT	b.nr_sequencia
						from	pls_conta_proc			a,
							pls_conta_pos_estabelecido	b
						where	b.nr_seq_conta_proc	= a.nr_sequencia
						and	a.ie_status		= 'M'
						and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
						and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
						and	a.nr_seq_conta		= nr_seq_conta_p);

	delete 	FROM pls_fatura_mat		
	where	nr_seq_conta_pos_estab	in (    SELECT	b.nr_sequencia
						from	pls_conta_mat			a,
							pls_conta_pos_estabelecido	b
						where	b.nr_seq_conta_mat	= a.nr_sequencia
						and	a.ie_status		= 'M'
						and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
						and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
						and	a.nr_seq_conta		= nr_seq_conta_p);
						
	delete	FROM pls_hist_analise_conta
	where 	nr_sequencia in ( 
		SELECT	a.nr_sequencia
		from	pls_hist_analise_conta a,
			pls_analise_conta b
		where	a.nr_seq_analise = b.nr_sequencia
		and	b.ie_origem_analise = 8
		and	a.nr_seq_conta_proc	in (    SELECT 	nr_sequencia
							from	pls_conta_proc
							where	ie_status	= 'M'
							and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
							and	nr_seq_conta	= nr_seq_conta_p));
						
	delete	FROM pls_hist_analise_conta a
	where	nr_sequencia in (
		SELECT	a.nr_sequencia
		from	pls_hist_analise_conta a,
			pls_analise_conta b
		where	a.nr_seq_analise = b.nr_sequencia
		and	b.ie_origem_analise = 8
		and	a.nr_seq_conta_mat	in (    SELECT 	nr_sequencia
						from	pls_conta_mat
						where	ie_status	= 'M'
						and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
						and	nr_seq_conta	= nr_seq_conta_p));
						
	delete 	FROM pls_analise_fluxo_ocor
	where 	nr_seq_fluxo_item     in (	SELECT 	a.nr_sequencia
						from	pls_analise_fluxo_item a,
							pls_analise_conta b
						where	a.nr_seq_analise = b.nr_sequencia
						and	b.ie_origem_analise = 8
						and	nr_seq_conta_mat	in (    SELECT 	nr_sequencia
											from	pls_conta_mat
											where	ie_status	= 'M'
											and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
											and	nr_seq_conta	= nr_seq_conta_p));
			
	delete  FROM pls_analise_fluxo_item
	where	nr_sequencia in (
		SELECT	a.nr_sequencia
		from	pls_analise_fluxo_item a,
			pls_analise_conta b
		where	a.nr_seq_analise = b.nr_sequencia
		and	b.ie_origem_analise = 8
		and	a.nr_seq_conta_mat	in (    SELECT 	nr_sequencia
							from	pls_conta_mat
							where	ie_status	= 'M'
							and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
							and	nr_seq_conta	= nr_seq_conta_p));
				
	delete	FROM pls_conta_pos_estab_contab
	where	nr_seq_conta_pos	 in (	SELECT	b.nr_sequencia
						from	pls_conta_proc			a,
							pls_conta_pos_estabelecido	b
						where	b.nr_seq_conta_proc	= a.nr_sequencia
						and	a.ie_status		= 'M'
						and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
						and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
						and	b.ie_status_faturamento	!= 'A'
						and	b.ie_cobrar_mensalidade	!= 'A'
						and	a.nr_seq_conta		= nr_seq_conta_p
						
union all

						SELECT	b.nr_sequencia
						from	pls_conta_mat			a,
							pls_conta_pos_estabelecido	b
						where	b.nr_seq_conta_mat	= a.nr_sequencia
						and	a.ie_status		= 'M'
						and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
						and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
						and	b.ie_status_faturamento	!= 'A'
						and	b.ie_cobrar_mensalidade	!= 'A'
						and	a.nr_seq_conta		= nr_seq_conta_p);

else
	
		
	delete 	FROM pls_analise_fluxo_ocor
	where 	NR_SEQ_FLUXO_ITEM     in (	SELECT 	nr_sequencia
						from	pls_analise_fluxo_item
						where	nr_seq_conta_proc	in (    SELECT 	nr_sequencia
											from	pls_conta_proc
											where	ie_status	= 'M'
											and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
											and	nr_seq_conta	= nr_seq_conta_p));
				
	delete	FROM pls_analise_fluxo_item
	where	nr_seq_conta_proc	in (    SELECT 	nr_sequencia
						from	pls_conta_proc
						where	ie_status	= 'M'
						and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
						and	nr_seq_conta	= nr_seq_conta_p);
	
	delete	FROM PLS_ANALISE_GLO_OCOR_GRUPO
	where nr_seq_ocor_benef in (	SELECT 	o.nr_sequencia
					from	pls_ocorrencia_benef o
					where	o.nr_seq_conta_proc	in (    SELECT 	p.nr_sequencia
										from	pls_conta_proc p
										where	ie_status	= 'M'
										and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
										and	p.nr_seq_conta	= nr_seq_conta_p));
										
	for r_c06_w in C06() loop
		begin
		delete	FROM PLS_ANALISE_GLO_OCOR_GRUPO
		where 	nr_seq_ocor_benef = r_c06_w.nr_seq_ocor;
		end;
	end loop;

										
	delete	FROM pls_ocorrencia_benef
	where	nr_seq_conta_proc	in (    SELECT 	nr_sequencia
						from	pls_conta_proc
						where	ie_status	= 'M'
						and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
						and	nr_seq_conta	= nr_seq_conta_p);

	delete	FROM pls_fatura_proc
	where	nr_seq_conta_proc	in (    SELECT 	nr_sequencia
						from	pls_conta_proc
						where	ie_status	= 'M'
						and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
						and	nr_seq_conta	= nr_seq_conta_p);

	delete 	FROM pls_fatura_mat		
	where	nr_seq_conta_mat	in (    SELECT 	nr_sequencia
						from	pls_conta_mat
						where	ie_status	= 'M'
						and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
						and	nr_seq_conta	= nr_seq_conta_p);
						
	delete	FROM pls_hist_analise_conta
	where	nr_seq_conta_proc	in (    SELECT 	nr_sequencia
						from	pls_conta_proc
						where	ie_status	= 'M'
						and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
						and	nr_seq_conta	= nr_seq_conta_p);
						
	delete	FROM pls_hist_analise_conta
	where	nr_seq_conta_mat	in (    SELECT 	nr_sequencia
						from	pls_conta_mat
						where	ie_status	= 'M'
						and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
						and	nr_seq_conta	= nr_seq_conta_p);
						
	delete 	FROM pls_analise_fluxo_ocor
	where 	NR_SEQ_FLUXO_ITEM     in (	SELECT 	nr_sequencia
						from	pls_analise_fluxo_item
						where	nr_seq_conta_mat	in (    SELECT 	nr_sequencia
											from	pls_conta_mat
											where	ie_status	= 'M'
											and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
											and	nr_seq_conta	= nr_seq_conta_p));
				
	delete	FROM pls_analise_fluxo_item
	where	nr_seq_conta_mat	in (    SELECT 	nr_sequencia
						from	pls_conta_mat
						where	ie_status	= 'M'
						and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
						and	nr_seq_conta	= nr_seq_conta_p);
				
	delete	FROM PLS_ANALISE_GLO_OCOR_GRUPO
	where nr_seq_ocor_benef in (	SELECT 	o.nr_sequencia
					from	pls_ocorrencia_benef o
					where	o.nr_seq_conta_mat	in (    SELECT 	p.nr_sequencia
										from	pls_conta_mat p
										where	ie_status	= 'M'
										and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
										and	p.nr_seq_conta	= nr_seq_conta_p));
	
	for r_c07_w in C07() loop
		begin
		delete	FROM PLS_ANALISE_GLO_OCOR_GRUPO
		where 	nr_seq_ocor_benef = r_c07_w.nr_seq_ocor;
		end;
	end loop;
	
	delete	FROM pls_ocorrencia_benef
	where	nr_seq_conta_mat	in (    SELECT 	nr_sequencia
						from	pls_conta_mat
						where	ie_status	= 'M'
						and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
						and	nr_seq_conta	= nr_seq_conta_p);


	delete	FROM pls_conta_pos_estab_contab
	where	nr_seq_conta_proc in (  SELECT 	nr_sequencia
					from	pls_conta_proc
					where	ie_status	= 'M'
					and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
					and	nr_seq_conta	= nr_seq_conta_p)
	and	not exists (	SELECT	1
				from	pls_conta_pos_estabelecido	x
				where	x.nr_sequencia			= nr_seq_conta_pos
				and	x.ie_status_faturamento		= 'A'
				and	x.ie_cobrar_mensalidade		= 'A')
	and	nr_seq_conta	= nr_seq_conta_p;	
				
	delete	FROM pls_conta_pos_estab_contab
	where	nr_seq_conta_mat in (  SELECT 	nr_sequencia
					from	pls_conta_mat
					where	ie_status	= 'M'
					and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
					and	nr_seq_conta	= nr_seq_conta_p)
	and	not exists (	SELECT	1
				from	pls_conta_pos_estabelecido	x
				where	x.nr_sequencia			= nr_seq_conta_pos
				and	x.ie_status_faturamento		= 'A'
				and	x.ie_cobrar_mensalidade		= 'A')
	and	nr_seq_conta	= nr_seq_conta_p;

	delete	FROM pls_conta_pos_taxa_contab
	where	nr_seq_pos_estab_taxa in (	SELECT	nr_Sequencia
						from	pls_conta_pos_estab_taxa
						where	nr_seq_conta_pos_estab in (	select	nr_sequencia
											from	pls_conta_pos_estabelecido
											where	nr_seq_conta_proc 	in (	select 	nr_sequencia
																from	pls_conta_proc
																where	ie_status	= 'M'
																and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
																and	nr_seq_conta	= nr_seq_conta_p)
											and	ie_status_faturamento	!= 'A'
											and	ie_cobrar_mensalidade	!= 'A'));
															
	delete	FROM pls_conta_pos_taxa_contab
	where	nr_seq_pos_estab_taxa in (	SELECT	nr_Sequencia
						from	pls_conta_pos_estab_taxa
						where	nr_seq_conta_pos_estab in (	select	nr_sequencia
											from	pls_conta_pos_estabelecido
											where	nr_seq_conta_mat 	in (	select 	nr_sequencia
																from	pls_conta_mat
																where	ie_status	= 'M'
																and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
																and	nr_seq_conta	= nr_seq_conta_p)
											and	ie_status_faturamento	!= 'A'
											and	ie_cobrar_mensalidade	!= 'A'));
	
	delete	FROM pls_conta_pos_estab_taxa
	where	nr_seq_conta_pos_estab in (	SELECT	nr_sequencia
						from	pls_conta_pos_estabelecido
						where	nr_seq_conta_proc	in (	select 	nr_sequencia
											from	pls_conta_proc
											where	ie_status	= 'M'
											and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
											and	nr_seq_conta	= nr_seq_conta_p)
						and	ie_status_faturamento	!= 'A'
						and	ie_cobrar_mensalidade	!= 'A');
	
	delete	FROM pls_conta_pos_estab_taxa
	where	nr_seq_conta_pos_estab in (	SELECT	nr_sequencia
						from	pls_conta_pos_estabelecido
						where	nr_seq_conta_mat 	in (	select 	nr_sequencia
											from	pls_conta_mat
											where	ie_status	= 'M'
											and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
											and	nr_seq_conta	= nr_seq_conta_p)
						and	ie_status_faturamento	!= 'A'
						and	ie_cobrar_mensalidade	!= 'A');

	if (ie_acao_w <> 'CA') then
		
		delete 	FROM pls_conta_pos_estabelecido
		where	nr_seq_conta_proc 	in (	SELECT 	p.nr_sequencia
							from	pls_conta_proc p
							where	p.ie_status	= 'M'
							and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
							and	p.nr_seq_conta	= nr_seq_conta_p)
		and	ie_status_faturamento	!= 'A'
		and	ie_cobrar_mensalidade	!= 'A';
						
		delete 	FROM pls_conta_pos_estabelecido
		where	nr_seq_conta_mat 	in (	SELECT 	m.nr_sequencia
							from	pls_conta_mat m
							where	m.ie_status	= 'M'
							and	(m.nr_seq_regra_pct_fat IS NOT NULL AND m.nr_seq_regra_pct_fat::text <> '')
							and	m.nr_seq_conta	= nr_seq_conta_p)
		and	ie_status_faturamento	!= 'A'
		and	ie_cobrar_mensalidade	!= 'A';
	
	end if;
						
end if;

--Como esses registros serao apagados logo mais, entao e preciso limpar as referencias de agrupamento de an?lise que apontem para esses registros	
update	pls_conta_proc
set	nr_seq_agrup_analise  = NULL
where	nr_seq_agrup_analise in (SELECT	nr_sequencia
				from	pls_conta_proc p
				where	p.nr_seq_proc_princ	in (	select	nr_sequencia
									from	pls_conta_proc
									where	ie_status	= 'M'
									and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
									and	nr_seq_conta	= nr_seq_conta_p));

--Como esses registros serao apagados logo mais, entao e preciso limpar as referencias de agrupamento de analise que apontem para esses registros			
update	pls_conta_proc
set	nr_seq_agrup_analise  = NULL
where	nr_seq_agrup_analise in (	SELECT 	nr_sequencia
					from	pls_conta_proc
					where	ie_status	= 'M'
					and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
					and	nr_seq_conta	= nr_seq_conta_p);
		
		
-- Quando a chamada desta rotina for oriunda do Recurso de Glosa, e necessario

-- desconsiderar os itens originais da conta que esta sendo recursada,
if (ie_acao_w	= 'RC') then

	-- sempre que for apagar o procedimento, precisa apagar o pos antes, no entanto como depende do pos para saber

	-- quais registros originais e quais devem ser apagados, e guardado a chave do pos e do proc em vetores para apagar de forma condizente
	open c04(nr_seq_conta_p);
	loop
		fetch c04 bulk collect into tb_nr_seq_conta_pos_w, tb_nr_seq_conta_proc_w limit pls_util_pck.qt_registro_transacao_w;
		exit when tb_nr_seq_conta_pos_w.count = 0;
		
		-- primeiro o pos
		forall i in tb_nr_seq_conta_pos_w.first..tb_nr_seq_conta_pos_w.last
			delete	from pls_conta_pos_estabelecido
			where	nr_sequencia	= tb_nr_seq_conta_pos_w(i);
		
		-- agora o item (via conta princ)
		forall i in tb_nr_seq_conta_proc_w.first..tb_nr_seq_conta_proc_w.last
			delete	from pls_conta_proc
			where	nr_seq_proc_princ	= tb_nr_seq_conta_proc_w(i);
			
		-- agora o item (via pk)	
		forall i in tb_nr_seq_conta_proc_w.first..tb_nr_seq_conta_proc_w.last
			delete	from pls_conta_proc
			where	ie_status	= 'M'
			and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
			and	nr_sequencia	= tb_nr_seq_conta_proc_w(i);
			
			
		tb_nr_seq_conta_proc_w.delete;
		tb_nr_seq_conta_pos_w.delete;
	end loop;
	
	if (c04%isopen) then
	
		close c04;
	end if;

else
	
	
	if (ie_acao_w <> 'CA') then
		
		-- delete padrao da rotina
		delete	FROM pls_conta_glosa	x
		where	x.nr_seq_conta_proc 	in (	SELECT	p.nr_sequencia
							from	pls_conta_proc	p
							where	p.nr_seq_proc_princ	in (	select	pp.nr_sequencia
												from	pls_conta_proc pp
												where	pp.ie_status	= 'M'
												and	(pp.nr_seq_regra_pct_fat IS NOT NULL AND pp.nr_seq_regra_pct_fat::text <> '')
												and	pp.nr_seq_conta	= nr_seq_conta_p)
							and	not exists (	select	1
										from	pls_conta_pos_estabelecido	a
										where	a.nr_seq_conta_proc		= p.nr_sequencia
										and	a.ie_status_faturamento		= 'A'
										and	a.ie_cobrar_mensalidade		= 'A'));
		
		delete	FROM pls_ocorrencia_benef	x
		where	x.nr_seq_conta_proc 	in (	SELECT	p.nr_sequencia
							from	pls_conta_proc	p
							where	p.nr_seq_proc_princ	in (	select	pp.nr_sequencia
												from	pls_conta_proc pp
												where	pp.ie_status	= 'M'
												and	(pp.nr_seq_regra_pct_fat IS NOT NULL AND pp.nr_seq_regra_pct_fat::text <> '')
												and	pp.nr_seq_conta	= nr_seq_conta_p)
							and	not exists (	select	1
										from	pls_conta_pos_estabelecido	a
										where	a.nr_seq_conta_proc		= p.nr_sequencia
										and	a.ie_status_faturamento		= 'A'
										and	a.ie_cobrar_mensalidade		= 'A'));
		
		delete 	FROM pls_conta_proc	p
		where	p.nr_seq_proc_princ	in (	SELECT	pp.nr_sequencia
							from	pls_conta_proc pp
							where	pp.ie_status	= 'M'
							and	(pp.nr_seq_regra_pct_fat IS NOT NULL AND pp.nr_seq_regra_pct_fat::text <> '')
							and	pp.nr_seq_conta	= nr_seq_conta_p)
		and	not exists (	select	1
					from	pls_conta_pos_estabelecido	a
					where	a.nr_seq_conta_proc		= p.nr_sequencia
					and	a.ie_status_faturamento		= 'A'
					and	a.ie_cobrar_mensalidade		= 'A')
		and 	not exists (select 1 from pls_conta_pos_estab_prev a where p.nr_sequencia = a.nr_seq_conta_proc);
					
		
		delete	FROM pls_conta_glosa	x
		where	x.nr_seq_conta_proc	in (	SELECT	p.nr_sequencia
							from	pls_conta_proc	p
							where	p.ie_status	= 'M'
							and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
							and	p.nr_seq_conta	= nr_seq_conta_p
							and	not exists (	select	1
										from	pls_conta_pos_estabelecido	a
										where	a.nr_seq_conta_proc		= p.nr_sequencia
										and	a.ie_status_faturamento		= 'A'
										and	a.ie_cobrar_mensalidade		= 'A'));
										
		delete	FROM pls_ocorrencia_benef	x
		where	x.nr_seq_conta_proc	in (	SELECT	p.nr_sequencia
							from	pls_conta_proc	p
							where	p.ie_status	= 'M'
							and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
							and	p.nr_seq_conta	= nr_seq_conta_p
							and	not exists (	select	1
										from	pls_conta_pos_estabelecido	a
										where	a.nr_seq_conta_proc		= p.nr_sequencia
										and	a.ie_status_faturamento		= 'A'
										and	a.ie_cobrar_mensalidade		= 'A'));
					
		delete 	FROM pls_conta_proc	p
		where	p.ie_status	= 'M'
		and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
		and	p.nr_seq_conta	= nr_seq_conta_p
		and	not exists (	SELECT	1
					from	pls_conta_pos_estabelecido	a
					where	a.nr_seq_conta_proc		= p.nr_sequencia
					and	a.ie_status_faturamento		= 'A'
					and	a.ie_cobrar_mensalidade		= 'A')
		and 	not exists (select 1 from pls_conta_pos_estab_prev a where p.nr_sequencia = a.nr_seq_conta_proc);
	end if;
	
end if;
					

-- Quando a chamada desta rotina for oriunda do Recurso de Glosa, e necessario

-- desconsiderar os itens originais da conta que esta sendo recursada,
if (ie_acao_w	= 'RC') then

	open c05(nr_seq_conta_p);
	loop
		fetch c05 bulk collect into tb_nr_seq_conta_pos_w, tb_nr_seq_conta_mat_w limit pls_util_pck.qt_registro_transacao_w;
		exit when tb_nr_seq_conta_pos_w.count = 0;
		
		-- primeiro o pos
		forall i in tb_nr_seq_conta_pos_w.first..tb_nr_seq_conta_pos_w.last
			delete 	FROM pls_conta_pos_estabelecido
			where	nr_sequencia	= tb_nr_seq_conta_pos_w(i);
		
		-- depois o material
		forall i in tb_nr_seq_conta_mat_w.first..tb_nr_seq_conta_mat_w.last
			delete 	FROM pls_conta_mat
			where	ie_status	= 'M'
			and	(nr_seq_regra_pct_fat IS NOT NULL AND nr_seq_regra_pct_fat::text <> '')
			and	nr_sequencia	= tb_nr_seq_conta_mat_w(i);
	
	end loop;
	
	if (c05%isopen) then
	
		close c05;
	end if;

else

	if (ie_acao_w <> 'CA') then
	

		delete	FROM pls_conta_glosa	x
		where	x.nr_seq_conta_mat	in (	SELECT	p.nr_sequencia
							from	pls_conta_mat	p
							where	p.ie_status	= 'M'
							and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
							and	p.nr_seq_conta	= nr_seq_conta_p
							and	not exists (	select	1
										from	pls_conta_pos_estabelecido	a
										where	a.nr_seq_conta_mat		= p.nr_sequencia
										and	a.ie_status_faturamento		= 'A'
										and	a.ie_cobrar_mensalidade		= 'A'));
		
		delete	FROM pls_ocorrencia_benef	x
		where	x.nr_seq_conta_mat	in (	SELECT	p.nr_sequencia
							from	pls_conta_mat	p
							where	p.ie_status	= 'M'
							and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
							and	p.nr_seq_conta	= nr_seq_conta_p
							and	not exists (	select	1
										from	pls_conta_pos_estabelecido	a
										where	a.nr_seq_conta_mat		= p.nr_sequencia
										and	a.ie_status_faturamento		= 'A'
										and	a.ie_cobrar_mensalidade		= 'A'));

		delete 	FROM pls_conta_mat	p
		where	p.ie_status	= 'M'
		and	(p.nr_seq_regra_pct_fat IS NOT NULL AND p.nr_seq_regra_pct_fat::text <> '')
		and	p.nr_seq_conta	= nr_seq_conta_p
		and	not exists (	SELECT	1
					from	pls_conta_pos_estabelecido	a
					where	a.nr_seq_conta_mat		= p.nr_sequencia
					and	a.ie_status_faturamento		= 'A'
					and	a.ie_cobrar_mensalidade		= 'A')
		and 	not exists (select 1 from pls_conta_pos_estab_prev a where p.nr_sequencia = a.nr_seq_conta_mat);
	end if;
end if;

for r_c03_w in C03(nr_seq_conta_p) loop
	begin
	

	qt_proc_lib_w := r_c03_w.qt_procedimento;
	select  max(nr_seq_pacote),
		max(nr_seq_composicao),
		max(ie_abrir_pacote_fat)
	into STRICT    nr_seq_pacote_w,
		nr_seq_composicao_w,
		ie_abrir_pacote_fat_w
	from    pls_pacote_tipo_acomodacao
	where   nr_sequencia    = r_c03_w.nr_seq_regra_pct_fat;
	
	--Parametro criado com o intuito de definir a forma de data a ser considerada na verificacao de composicao do pacote, seguindo a regra do PTU 11.3
	select	max(coalesce(ie_forma_pacote_fat,'N'))
	into STRICT	ie_tipo_data_w
	from	pls_parametros
	where	cd_estabelecimento	=	coalesce(wheb_usuario_pck.get_cd_estabelecimento, (SELECT max(e.cd_estabelecimento)
													from pls_outorgante po,
													estabelecimento e
													where	po.cd_cgc_outorgante = e.cd_cgc));
	
	--Baseando-se no parametro, verifica-se a data de autorizacao e anterior ao dia 01/12/2020, visto que as regras operacionais de corte sao previstas para essa data	
	if (ie_tipo_data_w = 'N') then
		dt_referencia_utilizacao_w := r_c03_w.dt_procedimento_referencia;
	elsif (ie_tipo_data_w = 'S' and dt_autorizacao_w < '01/12/2020') then
		dt_referencia_utilizacao_w := dt_autorizacao_w;
	else	
		dt_referencia_utilizacao_w := r_c03_w.dt_procedimento_referencia;	
	end if;
		
	if (ie_abrir_pacote_fat_w	= 'S') and (nr_seq_composicao_w IS NOT NULL AND nr_seq_composicao_w::text <> '') then		
		for	r_C01_w in C01(nr_seq_composicao_w, dt_referencia_utilizacao_w, nr_seq_prestador_exec_w, ie_tipo_guia_w) loop
		
			select  max(ie_classificacao)
			into STRICT    ie_classificacao_w
			from    procedimento
			where   cd_procedimento = r_C01_w.cd_procedimento
			and     ie_origem_proced = r_C01_w.ie_origem_proced;


			if ( ie_acao_w = 'P') then
				select  count(1)
				into STRICT    qt_registro_w
				from	(SELECT	nr_sequencia
					from	pls_conta_proc p
					where   cd_procedimento         = r_C01_w.cd_procedimento
					and     ie_origem_proced        = r_C01_w.ie_origem_proced
					and     nr_seq_conta 		= nr_seq_conta_p
					and     nr_seq_regra_pct_fat    = r_c03_w.nr_seq_regra_pct_fat
					and	((nr_seq_proc_pct	= r_c03_w.nr_seq_conta_proc) or (nr_seq_proc_pct    in (select  x.nr_sequencia
												from 	pls_conta_proc x
												where 	x.ie_status not in ('M','D')
												and   	x.nr_seq_proc_ref = coalesce(r_c03_w.nr_seq_proc_ref,r_c03_w.nr_seq_proc_ref_2))))
					and 	not exists (select 1 from pls_conta_pos_estabelecido where nr_seq_conta_proc = p.nr_sequencia and ie_status_faturamento = 'A')
					and	((coalesce(r_c01_w.cd_medico::text, '') = '') or
														exists (select	1
																from 	pls_proc_participante	pa
																where	pa.nr_seq_conta_proc	= p.nr_sequencia
																and	pa.cd_medico		= r_c01_w.cd_medico))
					
union all

					SELECT	nr_sequencia
					from	pls_conta_proc p
					where   cd_procedimento         = r_C01_w.cd_procedimento
					and     ie_origem_proced        = r_C01_w.ie_origem_proced
					and     p.nr_seq_conta in (	select    x.nr_seq_conta
												from 	  pls_conta_proc x
												where 	  x.ie_status not in ('M','D')
												and   	  x.nr_seq_proc_ref = coalesce(r_c03_w.nr_seq_proc_ref,r_c03_w.nr_seq_proc_ref_2)
												
union all

												select 	a.nr_sequencia
												from	pls_conta a,
														pls_conta_proc b,
														pls_conta c
												where 	a.nr_sequencia = b.nr_seq_conta
												and 	p.nr_seq_proc_pct = b.nr_sequencia
												and 	a.nr_sequencia <> nr_seq_conta_p
												and     a.nr_seq_analise = c.nr_seq_analise
												and 	c.nr_sequencia = nr_seq_conta_p
												)
					and     nr_seq_regra_pct_fat    = r_c03_w.nr_seq_regra_pct_fat
					and	((nr_seq_proc_pct	= r_c03_w.nr_seq_conta_proc) or (nr_seq_proc_pct    in (select  x.nr_sequencia
											from 	pls_conta_proc x
											where 	x.ie_status not in ('M','D')
											and   	x.nr_seq_proc_ref = coalesce(r_c03_w.nr_seq_proc_ref,r_c03_w.nr_seq_proc_ref_2)
											
union all

											select 	b.nr_sequencia
											from	pls_conta a,
													pls_conta_proc b,
													pls_conta c
													where 	a.nr_sequencia = b.nr_seq_conta
													and 	p.nr_seq_proc_pct = b.nr_sequencia
													and 	a.nr_sequencia <> nr_seq_conta_p
													and     a.nr_seq_analise = c.nr_seq_analise
													and 	c.nr_sequencia = nr_seq_conta_p)))
					and 	not exists (select 1 from pls_conta_pos_estabelecido where nr_seq_conta_proc = p.nr_sequencia and ie_status_faturamento = 'A')
					and	((coalesce(r_c01_w.cd_medico::text, '') = '') or
						exists (select	1
							from 	pls_proc_participante	pa
							where	pa.nr_seq_conta_proc	= p.nr_sequencia
							and	pa.cd_medico		= r_c01_w.cd_medico))) alias27;
			else
				select  count(1)
				into STRICT    qt_registro_w
				from	(SELECT	nr_sequencia
					from	pls_conta_proc p
					where   cd_procedimento         = r_C01_w.cd_procedimento
					and     ie_origem_proced        = r_C01_w.ie_origem_proced
					and     nr_seq_conta 		= nr_seq_conta_p
					and     nr_seq_regra_pct_fat    = r_c03_w.nr_seq_regra_pct_fat
					and	((nr_seq_proc_pct	= r_c03_w.nr_seq_conta_proc) or (nr_seq_proc_pct    in (select  x.nr_sequencia
												from 	pls_conta_proc x
												where 	x.ie_status not in ('M','D')
												and   	x.nr_seq_proc_ref = coalesce(r_c03_w.nr_seq_proc_ref,r_c03_w.nr_seq_proc_ref_2))))
					and 	not exists (select 1 from pls_conta_pos_estabelecido where nr_seq_conta_proc = p.nr_sequencia and ie_status_faturamento = 'A')
					and 	 not exists (select 1 from pls_conta_pos_estab_prev where nr_seq_conta_proc = p.nr_sequencia )
					and	((coalesce(r_c01_w.cd_medico::text, '') = '') or
														exists (select	1
																from 	pls_proc_participante	pa
																where	pa.nr_seq_conta_proc	= p.nr_sequencia
																and	pa.cd_medico		= r_c01_w.cd_medico))
					
union all

					SELECT	nr_sequencia
					from	pls_conta_proc p
					where   cd_procedimento         = r_C01_w.cd_procedimento
					and     ie_origem_proced        = r_C01_w.ie_origem_proced
					and     p.nr_seq_conta in (	select    x.nr_seq_conta
												from 	  pls_conta_proc x
												where 	  x.ie_status not in ('M','D')
												and   	  x.nr_seq_proc_ref = coalesce(r_c03_w.nr_seq_proc_ref,r_c03_w.nr_seq_proc_ref_2)
												
union all

												select 	a.nr_sequencia
												from	pls_conta a,
														pls_conta_proc b,
														pls_conta c
												where 	a.nr_sequencia = b.nr_seq_conta
												and 	p.nr_seq_proc_pct = b.nr_sequencia
												and 	a.nr_sequencia <> nr_seq_conta_p
												and     a.nr_seq_analise = c.nr_seq_analise
												and 	c.nr_sequencia = nr_seq_conta_p
												)
					and     nr_seq_regra_pct_fat    = r_c03_w.nr_seq_regra_pct_fat
					and	((nr_seq_proc_pct	= r_c03_w.nr_seq_conta_proc) or (nr_seq_proc_pct    in (select  x.nr_sequencia
											from 	pls_conta_proc x
											where 	x.ie_status not in ('M','D')
											and   	x.nr_seq_proc_ref = coalesce(r_c03_w.nr_seq_proc_ref,r_c03_w.nr_seq_proc_ref_2)
											
union all

											select 	b.nr_sequencia
											from	pls_conta a,
													pls_conta_proc b,
													pls_conta c
													where 	a.nr_sequencia = b.nr_seq_conta
													and 	p.nr_seq_proc_pct = b.nr_sequencia
													and 	a.nr_sequencia <> nr_seq_conta_p
													and     a.nr_seq_analise = c.nr_seq_analise
													and 	c.nr_sequencia = nr_seq_conta_p)))
					and 	not exists (select 1 from pls_conta_pos_estabelecido where nr_seq_conta_proc = p.nr_sequencia and ie_status_faturamento = 'A')
					and 	 not exists (select 1 from pls_conta_pos_estab_prev where nr_seq_conta_proc = p.nr_sequencia )
					and	((coalesce(r_c01_w.cd_medico::text, '') = '') or
						exists (select	1
							from 	pls_proc_participante	pa
							where	pa.nr_seq_conta_proc	= p.nr_sequencia
							and	pa.cd_medico		= r_c01_w.cd_medico))) alias28;
			end if;	
						

			if (qt_registro_w = 0)     then
				select	nextval('pls_conta_proc_seq')
				into STRICT	nr_seq_conta_proc_w
				;

				vl_negociado_w := r_C01_w.vl_negociado;	
				

				insert  into pls_conta_proc(nr_sequencia, ie_via_acesso, ie_tecnica_utilizada,
					dt_procedimento, dt_inicio_proc, dt_fim_proc,
					tx_item, nr_seq_setor_atend, qt_procedimento_imp,
					vl_unitario_imp, vl_procedimento_imp, ie_status,
					nr_seq_proc_princ, nr_seq_pacote, cd_procedimento,
					nm_usuario, dt_atualizacao, nm_usuario_nrec,
					dt_atualizacao_nrec, ie_situacao, nr_seq_conta,
					ie_origem_proced,vl_liberado,vl_procedimento,
					qt_procedimento,vl_unitario,ie_tipo_despesa,
					nr_seq_regra_pct_fat, ie_lanc_manual_pos, nr_seq_proc_pct)
				(SELECT nr_seq_conta_proc_w, coalesce(r_C01_w.ie_via_acesso, r_c03_w.ie_via_acesso), null,
					r_c03_w.dt_procedimento_referencia, r_c03_w.dt_inicio_proc, r_c03_w.dt_fim_proc,
					r_c01_w.tx_item, null, (r_C01_w.qt_procedimento * qt_proc_lib_w) ,
					dividir_Sem_round(vl_negociado_w, (r_C01_w.qt_procedimento)), (vl_negociado_w * qt_proc_lib_w) , 'M',
					null, nr_seq_pacote_w, r_C01_w.cd_procedimento,
					nm_usuario_p, clock_timestamp(), nm_usuario_p,
					clock_timestamp(), 'I', nr_seq_conta_p,
					r_C01_w.ie_origem_proced,(vl_negociado_w * qt_proc_lib_w), (vl_negociado_w * qt_proc_lib_w),
					(r_C01_w.qt_procedimento * qt_proc_lib_w),dividir_sem_round(vl_negociado_w, (r_C01_w.qt_procedimento)),ie_classificacao_w,
					r_c03_w.nr_seq_regra_pct_fat, 'S', r_c03_w.nr_seq_conta_proc
				from    pls_pacote_procedimento
				where   nr_sequencia    = r_C01_w.nr_sequencia);
				
				-- se existir o proc regra com o sequencial tiss, replica e atualiza
				if (r_c03_w.nr_seq_conta_proc_regra IS NOT NULL AND r_c03_w.nr_seq_conta_proc_regra::text <> '') and (r_c03_w.nr_seq_item_tiss IS NOT NULL AND r_c03_w.nr_seq_item_tiss::text <> '') then
				
					CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_proc(nr_seq_conta_proc_w, nm_usuario_p);
					CALL pls_cta_proc_mat_regra_pck.atualiza_seq_tiss_proc(nr_seq_conta_proc_w, r_c03_w.nr_seq_item_tiss, r_c03_w.nr_seq_item_tiss_vinculo, nm_usuario_p);
					
				end if;
				
				CALL pls_gravar_log_conta(	nr_seq_conta_p, nr_seq_conta_proc_w, null,
							'Procedimento '||nr_seq_conta_proc_w||' gerado a partir da abertura de pacote! ', nm_usuario_p);
							
				if (ie_classificacao_w = '1') then
					tx_item_w := r_c03_w.tx_item;
				else
					tx_item_w := 100;
				end if;
				
				update	pls_conta_proc
				set	tx_item 		= tx_item_w,
					vl_liberado 		= dividir(vl_liberado * tx_item_w,100),
					vl_unitario_imp 	= dividir(vl_unitario_imp * tx_item_w,100),
					vl_procedimento_imp	= dividir(vl_procedimento_imp * tx_item_w,100),
					vl_procedimento 	= dividir(vl_procedimento * tx_item_w,100),
					vl_unitario	 	= dividir(vl_unitario * tx_item_w,100)
				where	nr_sequencia = nr_seq_conta_proc_w;			
				
					--Define o ato cooperado
				SELECT * FROM pls_obter_tipo_ato_cooperado(	r_C01_w.cd_procedimento, r_C01_w.ie_origem_proced, nr_seq_conta_proc_w, 'P', nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prestador_prot_w, null, ie_medico_solic_coope_w, ie_medico_exec_coope_w, null, ie_tipo_protocolo_w, ie_tipo_guia_w, ie_classificacao_w, null, nr_seq_regra_cooperado_w, ie_ato_cooperado_w) INTO STRICT nr_seq_regra_cooperado_w, ie_ato_cooperado_w;
								
				if (r_c01_w.cd_medico IS NOT NULL AND r_c01_w.cd_medico::text <> '') then
				
					insert into pls_proc_participante(	nr_sequencia,dt_atualizacao, nm_usuario,
							dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta_proc,
							nr_seq_grau_partic, qt_liberada, vl_calculado,
							vl_calculado_ant, vl_glosa, vl_honorario_medico,
							vl_participante, ie_insercao_manual, ie_status,
							ie_status_pagamento, cd_medico, nr_seq_cbo_saude)
					values (	nextval('pls_proc_participante_seq'), clock_timestamp(), nm_usuario_p,
							clock_timestamp(), nm_usuario_p, nr_seq_conta_proc_w,
							r_c01_w.nr_seq_grau_partic_ent, qt_proc_lib_w, 0,
							0, 0, 0,
							0, 'N', 'L',
							'N', r_c01_w.cd_medico, r_c01_w.nr_seq_cbo_saude);	
					
				end if;
								

				update 	pls_conta_proc
				set	nr_seq_regra_cooperado	= nr_seq_regra_cooperado_w,
					ie_ato_cooperado	= ie_ato_cooperado_w
				where	nr_sequencia 		= nr_seq_conta_proc_w;

			else
				update	pls_conta_proc
				set	qt_procedimento_imp 	= (r_C01_w.qt_procedimento * qt_proc_lib_w),
					vl_unitario_imp		= dividir_Sem_round(r_C01_w.vl_negociado, r_C01_w.qt_procedimento),
					vl_procedimento_imp	= (r_C01_w.vl_negociado * qt_proc_lib_w),
					vl_procedimento		= (coalesce(r_C01_w.vl_negociado,0) * coalesce(qt_proc_lib_w,0))
				where   nr_seq_conta            = nr_seq_conta_p
				and     cd_procedimento         = r_C01_w.cd_procedimento
				and     ie_origem_proced        = r_C01_w.ie_origem_proced
				and     nr_seq_regra_pct_fat    = r_c03_w.nr_seq_regra_pct_fat
				and	nr_seq_proc_pct		= r_c03_w.nr_seq_conta_proc;			
			
			end if;
				
		/* As altera??es abaixo s?o para tratar a situa??o de quando o pacote seria aberto, por?m, n?o ocorreu a aberto devido j? existe esse mesmo pacote aberto na mesma an?lise.
		O mesmo acaba ficando fechado e lan?ado	no p?s. Essa verifica??o se deve a regra de abertura de contas (OPS - Cadastro de Regras > 	OPS - Contas M?dicas > 
		Abertura autom?tica de contas) e isso evita a multiplicidade de itens lan?ados nas contas abertas. Essa duplicidade ? causada na consist?ncia da an?lise, 
		que seta o atributo	nr_seq_proc_ref como nulo e depois na rotina pls_regra_via_acesso_pck busca e insere essa refer?ncia novamente, por?m, 	somente para um dos 
		itens foi apontada a refer?ncia (OS 1962007). ? feito um update no atributo pls_conta.ie_apenas_pagamento para que n?o seja gerado no p?s (C01 da pls_gerar_valor_pos_estab)*/
		
			if (qt_registro_w > 0) then				
				
			select count(1)
			into STRICT qt_proc_lancados_w
			from	pls_conta_proc
			where   nr_sequencia = r_c03_w.nr_seq_conta_proc			
			and 	nr_seq_conta = nr_seq_conta_p;	
			
				if (qt_proc_lancados_w > 0) then			
			
					update pls_conta_proc
					set ie_apenas_pagamento = 'S'
					where nr_Sequencia = r_c03_w.nr_seq_conta_proc;
					
				end if;	
				
			end if;
				
		end loop;			
		
		for	r_C02_w in C02(nr_seq_composicao_w, dt_referencia_utilizacao_w, nr_seq_prestador_exec_w, ie_tipo_guia_w) loop

			select  count(1)
			into STRICT    qt_registro_w
			from    pls_conta_mat	a
			where   a.nr_seq_conta            = nr_seq_conta_p
			and     a.nr_seq_material         = r_C02_w.nr_seq_material
			and     a.nr_seq_regra_pct_fat    = r_c03_w.nr_seq_regra_pct_fat
			and not exists (SELECT 1 from pls_conta_pos_estabelecido where nr_seq_conta_mat  = a.nr_sequencia and ie_status_faturamento = 'A')
			and not exists (select 1 from pls_conta_pos_estab_prev where nr_seq_conta_mat  = a.nr_sequencia)
			and	a.nr_seq_proc_pct		= r_c03_w.nr_seq_conta_proc;

			if (qt_registro_w = 0)     then
			
				select	nextval('pls_conta_mat_seq')
				into STRICT	nr_seq_conta_mat_w
				;
				
				insert  into pls_conta_mat(nr_sequencia, qt_material_imp, vl_unitario_imp,
					vl_material_imp, ie_status,nr_seq_pacote,
					cd_material,nm_usuario,dt_atualizacao,
					nm_usuario_nrec,dt_atualizacao_nrec,ie_situacao,
					nr_seq_conta,vl_liberado,vl_material,
					qt_material,vl_unitario,ie_tipo_despesa,
					nr_seq_regra_pct_fat,nr_Seq_material, dt_atendimento,
					ie_lanc_manual_pos, nr_seq_proc_pct, dt_inicio_atend,
					dt_fim_atend)
				(SELECT nr_seq_conta_mat_w, (r_C02_w.qt_material * qt_proc_lib_w), dividir_Sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material),
					(r_C02_w.vl_negociado * qt_proc_lib_w),'M',nr_seq_pacote_w,
					r_C02_w.cd_material,nm_usuario_p, clock_timestamp(),
					nm_usuario_p,clock_timestamp(), 'I',
					nr_seq_conta_p, (r_C02_w.vl_negociado * qt_proc_lib_w), (r_C02_w.vl_negociado * qt_proc_lib_w),
					(r_C02_w.qt_material * qt_proc_lib_w),dividir_sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material),ie_classificacao_w,
					r_c03_w.nr_seq_regra_pct_fat,r_C02_w.nr_seq_material, r_c03_w.dt_procedimento_referencia,
					'S', r_c03_w.nr_seq_conta_proc, r_c03_w.dt_inicio_proc,
					r_c03_w.dt_fim_proc
				from    pls_pacote_material
				where   nr_sequencia    = r_C02_w.nr_sequencia);
				
				-- se existir o proc regra com o sequencial tiss, mesmo neste ponto sendo lancado um material, replica e atualiza
				if (r_c03_w.nr_seq_conta_proc_regra IS NOT NULL AND r_c03_w.nr_seq_conta_proc_regra::text <> '') and (r_c03_w.nr_seq_item_tiss IS NOT NULL AND r_c03_w.nr_seq_item_tiss::text <> '') then
				
					CALL pls_cta_proc_mat_regra_pck.cria_registro_regra_mat(nr_seq_conta_mat_w, nm_usuario_p);
					CALL pls_cta_proc_mat_regra_pck.atualiza_seq_tiss_mat(nr_seq_conta_mat_w, r_c03_w.nr_seq_item_tiss, r_c03_w.nr_seq_item_tiss_vinculo, nm_usuario_p);
					
				end if;
				
				CALL pls_gravar_log_conta(	nr_seq_conta_p, null, nr_seq_conta_mat_w,
							'Material '||nr_seq_conta_mat_w||' gerado a partir da abertura de pacote! ', nm_usuario_p);
							
				-- Busca o tipo de despesa do material, j? recalculado pela trigger
				select	ie_tipo_despesa
				into STRICT	ie_tipo_despesa_mat_w
				from	pls_conta_mat
				where	nr_sequencia	= nr_seq_conta_mat_w;
							
				--gera o ato cooperado no novo material			
				SELECT * FROM pls_obter_tipo_ato_cooperado(	null, null, nr_seq_conta_mat_w, 'M', nr_seq_prestador_exec_w, nr_seq_prestador_solic_w, nr_seq_prestador_prot_w, null, ie_medico_solic_coope_w, ie_medico_exec_coope_w, r_C02_w.nr_seq_material, ie_tipo_protocolo_w, ie_tipo_guia_w, null, ie_tipo_despesa_mat_w, nr_seq_regra_cooperado_mat_w, ie_ato_cooperado_mat_w) INTO STRICT nr_seq_regra_cooperado_mat_w, ie_ato_cooperado_mat_w;
								
				update 	pls_conta_mat
				set	nr_seq_regra_cooperado	= nr_seq_regra_cooperado_mat_w,
					ie_ato_cooperado	= ie_ato_cooperado_mat_w
				where	nr_sequencia 		= nr_seq_conta_mat_w;

			else
				update	pls_conta_mat
				set	qt_material_imp 	= (r_C02_w.qt_material * qt_proc_lib_w),
					vl_unitario_imp		= dividir_Sem_round(r_C02_w.vl_negociado, r_C02_w.qt_material),
					vl_material_imp		= (r_C02_w.vl_negociado * qt_proc_lib_w),
					vl_material		= (r_C02_w.vl_negociado * qt_proc_lib_w)
				where   nr_seq_conta            = nr_seq_conta_p
				and     nr_seq_material         = r_C02_w.nr_seq_material
				and     nr_seq_regra_pct_fat    = r_c03_w.nr_seq_regra_pct_fat
				and	nr_seq_proc_pct		= r_c03_w.nr_seq_conta_proc;
			end if;
			
		end loop; -- C02
	end if;				

	-- Quando a chamada desta rotina for oriunda do Recurso de Glosa, e necessario

	-- desconsiderar os itens originais da conta que esta sendo recursada,
	if (ie_acao_w = 'RC') then
	
		delete	FROM pls_conta_pos_estab_contab
		where	nr_sequencia	in (	SELECT	b.nr_sequencia
						from	pls_conta_proc			a,
							pls_conta_pos_estabelecido	b
						where	b.nr_seq_conta_proc	= a.nr_sequencia
						and	a.ie_status		= 'M'
						and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
						and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
						and	b.ie_status_faturamento	!= 'A'
						and	b.ie_cobrar_mensalidade	!= 'A'
						and	a.nr_sequencia		= r_c03_w.nr_seq_conta_proc);
							
		delete	FROM pls_conta_pos_estabelecido
		where	nr_sequencia	in (	SELECT	b.nr_sequencia
						from	pls_conta_proc			a,
							pls_conta_pos_estabelecido	b
						where	b.nr_seq_conta_proc	= a.nr_sequencia
						and	a.ie_status		= 'M'
						and	(a.nr_seq_regra_pct_fat IS NOT NULL AND a.nr_seq_regra_pct_fat::text <> '')
						and	(b.nr_seq_conta_rec IS NOT NULL AND b.nr_seq_conta_rec::text <> '')
						and	b.ie_status_faturamento	!= 'A'
						and	b.ie_cobrar_mensalidade	!= 'A'
						and	a.nr_sequencia		= r_c03_w.nr_seq_conta_proc);
		
	else
	
                if (ie_acao_w <> 'CA') then
                        -- Comportamento padrao	
                        delete	FROM pls_conta_pos_estab_contab	a
                        where	a.nr_seq_conta_proc = r_c03_w.nr_seq_conta_proc
                        and	a.nr_seq_conta	= nr_seq_conta_p
                        and	not exists (	SELECT	1
                                                from	pls_conta_pos_estabelecido	x
                                                where	x.nr_sequencia			= a.nr_seq_conta_pos
                                                and	x.ie_status_faturamento		= 'A'
                                                and	x.ie_cobrar_mensalidade		= 'A');

                        delete from pls_conta_pos_estab_taxa a
                        where a.nr_seq_conta_pos_estab in (
                                        SELECT 	x.nr_sequencia 
                                        from 	pls_conta_pos_estabelecido x
                                        where 	x.nr_seq_conta_proc = r_c03_w.nr_seq_conta_proc
                                        and	x.ie_status_faturamento		!= 'A'
                                        and	x.ie_cobrar_mensalidade		!= 'A');

                        delete	FROM pls_conta_pos_estabelecido
                        where	nr_seq_conta_proc = r_c03_w.nr_seq_conta_proc
                        and	ie_status_faturamento	!= 'A'
                        and	ie_cobrar_mensalidade	!= 'A';
                end if;
	end if;
	
	end;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_abrir_proc_pacote_cta ( nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p text, ie_acao_p text ) FROM PUBLIC;

