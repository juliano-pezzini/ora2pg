-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_ajustar_vl_fat_ndc_contest ( nr_seq_ptu_fatura_p bigint, nr_seq_lote_contest_p bigint, ie_commit_p text) AS $body$
DECLARE


/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------
Locais de chamada direta:
[  ]  Objetos do dicionário [  ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------
Pontos de atenção:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/nr_titulo_w			bigint;
nr_titulo_ndc_w			bigint;
nr_seq_conta_proc_w		bigint;
nr_seq_conta_mat_w		bigint;
vl_glosa_fatura_w		double precision := 0;
vl_glosa_ndc_w			double precision := 0;
vl_glosa_fat_proc_w		double precision := 0;
vl_glosa_fat_mat_w		double precision := 0;
vl_glosa_proc_hi_w		double precision := 0;
vl_glosa_proc_co_w		double precision := 0;
vl_glosa_proc_mat_w		double precision := 0;
vl_glosa_tx_proc_hi_w		double precision := 0;
vl_glosa_tx_proc_co_w		double precision := 0;
vl_glosa_tx_proc_mat_w		double precision := 0;
vl_glosa_material_hi_w		double precision := 0;
vl_glosa_material_co_w		double precision := 0;
vl_glosa_material_mat_w		double precision := 0;
vl_glosa_tx_material_hi_w	double precision := 0;
vl_glosa_tx_material_co_w	double precision := 0;
vl_glosa_tx_material_mat_w	double precision := 0;
vl_pago_tit_w			double precision := 0;
vl_pago_ndc_w			double precision := 0;
vl_titulo_w			double precision := 0;
vl_titulo_ndc_w			double precision := 0;
vl_total_pago_w			double precision := 0;
vl_total_pago_ndc_w		double precision := 0;
ie_tit_fat_ndc_w		varchar(1) := 'N';
ie_classif_cobranca_w		varchar(1);
vl_total_fatura_w		double precision := 0;
vl_total_ndc_w			double precision := 0;
vl_liberado_fat_w		double precision := 0;
vl_liberado_ndc_w		double precision := 0;
qt_baixa_fat_w			bigint := 0;
qt_baixa_ndc_w			bigint := 0;
vl_glosa_tit_w			double precision := 0;
vl_glosa_tit_ndc_w		double precision := 0;

cd_unimed_origem_w		varchar(4);
cd_cooperativa_w		varchar(4);
nr_seq_congenere_w		bigint;
qt_camara_w			bigint := 0;
ie_processo_pgto_w		varchar(5);

C01 CURSOR FOR
	SELECT	b.nr_seq_conta_proc,
		null
	from	pls_contestacao_proc 	b,
		pls_contestacao 	a
	where	a.nr_sequencia	= b.nr_seq_contestacao
	and	a.nr_seq_lote	= nr_seq_lote_contest_p
	
union all

	SELECT	null,
		b.nr_seq_conta_mat
	from	pls_contestacao_mat 	b,
		pls_contestacao 	a
	where	a.nr_sequencia	= b.nr_seq_contestacao
	and	a.nr_seq_lote	= nr_seq_lote_contest_p;


BEGIN
if (nr_seq_ptu_fatura_p IS NOT NULL AND nr_seq_ptu_fatura_p::text <> '') then
	select	max(nr_titulo),
		max(nr_titulo_ndc),
		coalesce(max(ie_classif_cobranca),'2'),
		max(ie_tit_fat_ndc),
		max(vl_total_fatura),
		max(vl_total_ndc),
		max(vl_total),
		max(vl_liberado_ndc),
		max(cd_unimed_origem)
	into STRICT	nr_titulo_w,
		nr_titulo_ndc_w,
		ie_classif_cobranca_w,
		ie_tit_fat_ndc_w,
		vl_total_fatura_w,
		vl_total_ndc_w,
		vl_liberado_fat_w,
		vl_liberado_ndc_w,
		cd_unimed_origem_w
	from	ptu_fatura
	where	nr_sequencia = nr_seq_ptu_fatura_p;

	if (cd_unimed_origem_w IS NOT NULL AND cd_unimed_origem_w::text <> '') then
		cd_cooperativa_w	:= lpad(cd_unimed_origem_w, 4, '0');

		select	max(nr_sequencia)
		into STRICT	nr_seq_congenere_w
		from	pls_congenere
		where	cd_cooperativa	= cd_cooperativa_w;

		select	count(1)
		into STRICT	qt_camara_w
		from	pls_camara_compensacao	x,
			pls_congenere_camara	w
		where	x.nr_sequencia		= w.nr_seq_camara
		and	w.nr_seq_congenere	= nr_seq_congenere_w
		and	clock_timestamp() between w.dt_inicio_vigencia_ref and w.dt_fim_vigencia_ref  LIMIT 1;
	end if;

	ie_tit_fat_ndc_w := coalesce(ie_tit_fat_ndc_w,'N');

	if (ie_classif_cobranca_w <> '3') then
		select	coalesce(sum(b.vl_contestado),0)
		into STRICT	vl_glosa_fat_proc_w
		from	pls_contestacao_proc b,
			pls_contestacao a
		where	a.nr_sequencia	= b.nr_seq_contestacao
		and	a.nr_seq_lote	= nr_seq_lote_contest_p;

		select	coalesce(sum(b.vl_contestado),0)
		into STRICT	vl_glosa_fat_mat_w
		from	pls_contestacao_mat b,
			pls_contestacao a
		where	a.nr_sequencia	= b.nr_seq_contestacao
		and	a.nr_seq_lote	= nr_seq_lote_contest_p;

		if (ie_tit_fat_ndc_w = 'S') then
			if (ie_classif_cobranca_w = '2') then
				vl_glosa_fatura_w := coalesce(vl_glosa_fat_proc_w,0) + coalesce(vl_glosa_fat_mat_w,0);
			end if;

			if (ie_classif_cobranca_w = '1') then
				vl_glosa_ndc_w := coalesce(vl_glosa_fat_proc_w,0) + coalesce(vl_glosa_fat_mat_w,0);
			end if;
		else
			vl_glosa_fatura_w := coalesce(vl_glosa_fat_proc_w,0) + coalesce(vl_glosa_fat_mat_w,0);
		end if;

		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
			select	sum(coalesce(w.vl_glosa,0))
			into STRICT	vl_pago_tit_w
			from	titulo_pagar		x,
				titulo_pagar_baixa	w
			where	w.nr_titulo	= x.nr_titulo
			and	x.nr_titulo	= nr_titulo_w;

			select	coalesce(max(vl_titulo),0)
			into STRICT	vl_titulo_w
			from	titulo_pagar x
			where	x.nr_titulo	= nr_titulo_w;

			-- FATURA
			if (vl_pago_tit_w < vl_titulo_w) then
				vl_total_pago_w	:= coalesce(vl_titulo_w,0) - coalesce(vl_pago_tit_w,0);
			end if;
		end if;

		if (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
			select	sum(coalesce(w.vl_glosa, 0))
			into STRICT	vl_pago_ndc_w
			from	titulo_pagar		x,
				titulo_pagar_baixa	w
			where	w.nr_titulo	= x.nr_titulo
			and	x.nr_titulo	= nr_titulo_ndc_w;

			select	coalesce(max(vl_titulo), 0)
			into STRICT	vl_titulo_ndc_w
			from	titulo_pagar x
			where	x.nr_titulo	= nr_titulo_ndc_w;

			-- NDC
			if (vl_pago_ndc_w < vl_titulo_ndc_w) then
				vl_total_pago_ndc_w := coalesce(vl_titulo_ndc_w,0) - coalesce(vl_pago_ndc_w,0);
			end if;
		end if;

	elsif (ie_classif_cobranca_w = '3') then
		open C01;
		loop
		fetch C01 into
			nr_seq_conta_proc_w,
			nr_seq_conta_mat_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin
			if (nr_seq_conta_proc_w IS NOT NULL AND nr_seq_conta_proc_w::text <> '') then
				select	coalesce(vl_glosa_hi,0),
					coalesce(vl_glosa_co,0),
					coalesce(vl_glosa_material,0),
					coalesce(vl_glosa_taxa_servico,0),
					coalesce(vl_glosa_taxa_co,0),
					coalesce(vl_glosa_taxa_material,0)
				into STRICT	vl_glosa_proc_hi_w,
					vl_glosa_proc_co_w,
					vl_glosa_proc_mat_w,
					vl_glosa_tx_proc_hi_w,
					vl_glosa_tx_proc_co_w,
					vl_glosa_tx_proc_mat_w
				from	pls_conta_proc
				where	nr_sequencia = nr_seq_conta_proc_w;

				vl_glosa_fatura_w := vl_glosa_fatura_w + coalesce(vl_glosa_tx_proc_hi_w,0) + coalesce(vl_glosa_tx_proc_co_w,0) + coalesce(vl_glosa_tx_proc_mat_w,0);
				vl_glosa_ndc_w := vl_glosa_ndc_w + coalesce(vl_glosa_proc_hi_w,0) + coalesce(vl_glosa_proc_co_w,0) + coalesce(vl_glosa_proc_mat_w,0);

			elsif (nr_seq_conta_mat_w IS NOT NULL AND nr_seq_conta_mat_w::text <> '') then
				select	coalesce(vl_glosa,0) - coalesce(vl_glosa_taxa_material,0),
					0,
					0,
					coalesce(vl_glosa_taxa_material,0),
					0,
					0
				into STRICT	vl_glosa_material_hi_w,
					vl_glosa_material_co_w,
					vl_glosa_material_mat_w,
					vl_glosa_tx_material_hi_w,
					vl_glosa_tx_material_co_w,
					vl_glosa_tx_material_mat_w
				from	pls_conta_mat
				where	nr_sequencia = nr_seq_conta_mat_w;

				vl_glosa_fatura_w := vl_glosa_fatura_w + coalesce(vl_glosa_tx_material_hi_w,0) + coalesce(vl_glosa_tx_material_co_w,0) + coalesce(vl_glosa_tx_material_mat_w,0);
				vl_glosa_ndc_w := vl_glosa_ndc_w + coalesce(vl_glosa_material_hi_w,0) + coalesce(vl_glosa_material_co_w,0) + coalesce(vl_glosa_material_mat_w,0);
			end if;
			end;
		end loop;
		close C01;

		if (vl_total_fatura_w > 0) then
			vl_total_pago_w	:= vl_total_fatura_w - coalesce(vl_glosa_fatura_w,0);
		end if;

		if (vl_total_ndc_w > 0) then
			vl_total_pago_ndc_w	:= vl_total_ndc_w - coalesce(vl_glosa_ndc_w,0);
		end if;
	end if;

	if (coalesce(nr_titulo_w::text, '') = '') and (coalesce(nr_titulo_ndc_w::text, '') = '') then
		vl_total_pago_w := vl_liberado_fat_w;
		vl_total_pago_ndc_w := vl_liberado_ndc_w;
	end if;

	if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
		select	count(1)
		into STRICT	qt_baixa_fat_w
		from	titulo_pagar_baixa
		where	nr_titulo	= nr_titulo_w;

		if (qt_baixa_fat_w = 0) then
			vl_total_pago_w := vl_liberado_fat_w;
		end if;
	end if;

	if (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
		select	count(1)
		into STRICT	qt_baixa_ndc_w
		from	titulo_pagar_baixa
		where	nr_titulo	= nr_titulo_ndc_w;

		if (qt_baixa_ndc_w = 0) then
			vl_total_pago_ndc_w := vl_liberado_ndc_w;
		end if;
	end if;

	if (qt_camara_w = 0) then
		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then -- FATURA
			select	coalesce(sum(coalesce(w.vl_glosa,0)),0)
			into STRICT	vl_glosa_tit_w
			from	titulo_pagar		x,
				titulo_pagar_baixa	w
			where	w.nr_titulo	= x.nr_titulo
			and	x.nr_titulo	= nr_titulo_w;

			if (vl_glosa_tit_w <= 0) and (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
				vl_total_pago_w := vl_total_fatura_w;
			end if;
		end if;

		if (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then -- NDR
			select	coalesce(sum(coalesce(w.vl_glosa,0)),0)
			into STRICT	vl_glosa_tit_ndc_w
			from	titulo_pagar		x,
				titulo_pagar_baixa	w
			where	w.nr_titulo	= x.nr_titulo
			and	x.nr_titulo	= nr_titulo_ndc_w;

			if (vl_glosa_tit_ndc_w <= 0) and (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
				vl_total_pago_ndc_w := vl_total_ndc_w;
			end if;
		end if;
	end if;

	-- SEMPRE QUE A UNIMED FOR DE CÂMARA O PAGAMENTO É O VALOR DA FATURA - OS 617263
	if (qt_camara_w > 0) then
		if (nr_titulo_w IS NOT NULL AND nr_titulo_w::text <> '') then
			select	count(1)
			into STRICT	qt_baixa_fat_w
			from	titulo_pagar_baixa x
			where	x.nr_titulo	= nr_titulo_w;

			if (qt_baixa_fat_w = 0) then
				vl_total_pago_w := vl_total_fatura_w;
			end if;
		end if;

		if (nr_titulo_ndc_w IS NOT NULL AND nr_titulo_ndc_w::text <> '') then
			select	count(1)
			into STRICT	vl_glosa_tit_ndc_w
			from	titulo_pagar_baixa x
			where	x.nr_titulo	= nr_titulo_ndc_w;

			if (vl_glosa_tit_ndc_w = 0) then
				vl_total_pago_ndc_w := vl_total_ndc_w;
			end if;
		end if;
	end if;

	update	pls_lote_contestacao
	set	vl_contestado_fatura	= coalesce(vl_glosa_fatura_w,0),
		vl_contestado_ndc	= coalesce(vl_glosa_ndc_w,0),
		vl_pago_fatura		= coalesce(vl_total_pago_w,0),
		vl_pago_ndc		= coalesce(vl_total_pago_ndc_w,0)
	where	nr_sequencia		= nr_seq_lote_contest_p;
end if;

-- Esta function e o update sempre tem que ficar por último e isolado, os dados acima são utilizados dentro da function, e não pode ser direto no update pra não estourar erro de mutante
ie_processo_pgto_w := substr(pls_obter_dados_lote_contest(nr_seq_lote_contest_p,'PC'),1,1);

update	pls_lote_contestacao
set	ie_processo_pgto	= ie_processo_pgto_w
where	nr_sequencia		= nr_seq_lote_contest_p;

if (coalesce(ie_commit_p,'N') = 'S') then
	commit;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_ajustar_vl_fat_ndc_contest ( nr_seq_ptu_fatura_p bigint, nr_seq_lote_contest_p bigint, ie_commit_p text) FROM PUBLIC;

