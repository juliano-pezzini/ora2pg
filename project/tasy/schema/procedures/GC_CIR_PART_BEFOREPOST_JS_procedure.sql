-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gc_cir_part_beforepost_js ( nr_cirurgia_p bigint, cd_pessoa_fisica_p text, nr_seq_procedimento_p bigint, nr_seq_procpaci_p bigint, ie_funcao_p text, nr_evento_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_edicao_amb_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_conta_p timestamp, nr_seq_proced_pac_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text) AS $body$
DECLARE

 
consiste_lista_conv_med_w	varchar(255);
ie_contido_char			varchar(5);
ie_medico_cred_cirurgia_w	varchar(5);
ie_status_acerto_w		smallint := 0;
consiste_qtd_participantes_w	varchar(1);
ie_regra_funcao_partic_cir_w	varchar(1);
ie_cod_espec_anestesista_w	varchar(255);
ie_anestesista_w		varchar(1);
ie_especialidade_w		varchar(1);
ie_consiste_parti_w		varchar(1);
ie_visua_partic_por_proced_w	varchar(1);
qt_de_anest_w			bigint;
qt_de_aux_w			bigint;
ie_auxiliar_w			varchar(1);
ie_aux_anest_w			varchar(3);
qt_de_permitida_w		bigint;
ie_Lib_Funcao_Espec_Medico	varchar(1);


BEGIN		 
 
ds_erro_p := '';
 
ie_cod_espec_anestesista_w := obter_param_usuario(900, 255, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_cod_espec_anestesista_w);	
consiste_lista_conv_med_w := obter_param_usuario(900, 259, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, consiste_lista_conv_med_w);
consiste_qtd_participantes_w := obter_param_usuario(900, 187, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, consiste_qtd_participantes_w);
ie_consiste_parti_w := obter_param_usuario(900, 332, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_consiste_parti_w);
ie_visua_partic_por_proced_w := obter_param_usuario(900, 137, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_visua_partic_por_proced_w);
ie_Lib_Funcao_Espec_Medico := obter_param_usuario(900, 401, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_Lib_Funcao_Espec_Medico);
 
 
select	obter_se_contido_char(cd_convenio,consiste_lista_conv_med_w) 
into STRICT	ie_contido_char 
from  cirurgia 
where  nr_cirurgia = nr_cirurgia_p;
 
if (nr_seq_procedimento_p IS NOT NULL AND nr_seq_procedimento_p::text <> '') then 
	begin 
	select	coalesce(max(ie_status_acerto),1) 
	into STRICT	ie_status_acerto_w 
	from	conta_paciente a,procedimento_paciente b 
	where	b.nr_sequencia = nr_seq_procedimento_p 
	and	b.nr_interno_conta = a.nr_interno_conta;
	 
	select max(obter_regra_funcao_partic_cir(cd_estabelecimento_p,cd_convenio,cd_categoria,cd_procedimento,ie_origem_proced,dt_conta,nr_sequencia,ie_funcao_p)) 
	into STRICT 	ie_regra_funcao_partic_cir_w 
	from  procedimento_paciente 
	where  nr_sequencia = nr_seq_procedimento_p;
	end;
end if;
 
if (consiste_lista_conv_med_w IS NOT NULL AND consiste_lista_conv_med_w::text <> '') and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (ie_contido_char = 'S') and (consiste_medico_cred_cirurgia(nr_cirurgia_p,cd_pessoa_fisica_p) = 'N') then 
	 
	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(47956);	
	 
end if;
 
if (ie_Lib_Funcao_Espec_Medico = 'S') and (ie_funcao_p IS NOT NULL AND ie_funcao_p::text <> '') and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') and (obter_lib_funcao_medic_espec(ie_funcao_p,cd_pessoa_fisica_p) = 'N')then 
	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(117853);
end if;
		 
if (nr_seq_procedimento_p IS NOT NULL AND nr_seq_procedimento_p::text <> '') and (ie_status_acerto_w <> '1') then 
	begin 
	CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(47957);
	end;
end if;
 
if (consiste_qtd_participantes_w = 'S') and (ie_regra_funcao_partic_cir_w = 'N') then 
	begin 
	ds_erro_p := 'DS_ERRO_P';
	--WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(47958); 
	end;
end if;
 
				 
if (ie_cod_espec_anestesista_w IS NOT NULL AND ie_cod_espec_anestesista_w::text <> '') and (ie_funcao_p IS NOT NULL AND ie_funcao_p::text <> '') and (cd_pessoa_fisica_p IS NOT NULL AND cd_pessoa_fisica_p::text <> '') then 
	begin 
	 
	select	coalesce(ie_anestesista,'N') 
	into STRICT	ie_anestesista_w 
	from  funcao_medico 
	where	cd_funcao = ie_funcao_p;
	 
		                         
	if (ie_anestesista_w = 'S') then 
		begin 
		ie_especialidade_w := obter_se_especialidade_medico(cd_pessoa_fisica_p,ie_cod_espec_anestesista_w);
		 
		if (ie_especialidade_w = 'N') then 
			begin 
			CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(47959);			
			end;
		end if;
		end;
	end if;
	end;
end if;
 
if (ie_consiste_parti_w = 'S') and (ie_visua_partic_por_proced_w = 'S') and (nr_evento_p = 1) then 
	begin 
	 
	select	count(*) 
	into STRICT	qt_de_anest_w 
	from 	funcao_medico b, 
		cirurgia_participante a 
	where	a.ie_funcao = b.cd_funcao 
	and   	a.nr_seq_procedimento = nr_seq_proced_pac_p 
	and 	a.nr_cirurgia = nr_cirurgia_p 
	and  	ie_anestesista = 'S';
	 
	select 	count(*) 
	into STRICT	qt_de_aux_w 
	from	funcao_medico b, 
		cirurgia_participante a 
	where	a.nr_cirurgia = nr_cirurgia_p 
	and   	a.nr_seq_procedimento = nr_seq_proced_pac_p 
	and  	a.ie_funcao = b.cd_funcao 	 
	and  	ie_auxiliar  = 'S';
	 
	select	coalesce(ie_anestesista,'N'), 
		coalesce(ie_auxiliar,'N') 
	into STRICT	ie_anestesista_w, 
		ie_auxiliar_w 
	from	funcao_medico 
	where 	cd_funcao = ie_funcao_p;
	 
	if (ie_anestesista_w = 'S') then 
		begin 
		ie_aux_anest_w := 'P';
		end;
	elsif (ie_auxiliar_w = 'S') then 
		begin 
		ie_aux_anest_w := 'X';
		end;
	end if;
	 
	if ((ie_anestesista_w <> 'N') or (ie_auxiliar_w <> 'N')) then 
		qt_de_permitida_w := Obter_Dados_Preco_Proc(cd_estabelecimento_p,cd_convenio_p,cd_categoria_p,cd_edicao_amb_p,cd_procedimento_p,ie_origem_proced_p,dt_conta_p,ie_aux_anest_w);
	end if;
	 
	if (ie_aux_anest_w = 'P') and (qt_de_anest_w >= qt_de_permitida_w) then 
		begin 
		CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(66300);		
		end;
	elsif (ie_aux_anest_w = 'X') and (qt_de_aux_w >= qt_de_permitida_w) then 
		begin		 
		CALL WHEB_MENSAGEM_PCK.Exibir_Mensagem_Abort(66300);
		end;
	end if;
	end;
end if;
		 
		 
commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gc_cir_part_beforepost_js ( nr_cirurgia_p bigint, cd_pessoa_fisica_p text, nr_seq_procedimento_p bigint, nr_seq_procpaci_p bigint, ie_funcao_p text, nr_evento_p bigint, cd_convenio_p bigint, cd_categoria_p text, cd_edicao_amb_p bigint, cd_procedimento_p bigint, ie_origem_proced_p bigint, dt_conta_p timestamp, nr_seq_proced_pac_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint, ds_erro_p INOUT text) FROM PUBLIC;

