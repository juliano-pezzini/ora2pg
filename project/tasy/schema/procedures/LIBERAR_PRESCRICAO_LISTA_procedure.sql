-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE liberar_prescricao_lista ( ds_lista_prescricao_p text, ie_tipo_pessoa_p text, cd_perfil_p bigint, nm_usuario_p text, ie_prescricao_p text, cd_tipo_agenda_p bigint, nr_seq_agenda_p bigint, ds_erro_p INOUT text ) AS $body$
DECLARE


							   
								   
lista_informacao_w		varchar(800);
tam_lista_w				bigint;
ie_pos_virgula_w		smallint;
ds_erro_w				varchar(800);
		
nr_prescricao_w			bigint;
nr_atendimento_w		bigint;
		
ds_tipo_agenda_w		varchar(5);
cd_estabelecimento_w	smallint;

dt_prescricao_w			timestamp;

nr_seq_agenda_w			agenda_paciente.nr_sequencia%type;
cd_tipo_agenda_w		bigint;
cd_pessoa_fisica_w		varchar(10);
		
			
c01 CURSOR FOR
	SELECT nr_sequencia,obter_tipo_agenda(cd_agenda)
	from	agenda_paciente
	where	cd_pessoa_fisica = cd_pessoa_fisica_w
	and		trunc(dt_agenda) = trunc(dt_prescricao_w)
	and 	nr_atendimento = nr_atendimento_w
	and 	nr_sequencia <> nr_seq_agenda_p
	
union

	SELECT nr_seq_agenda_p, cd_tipo_agenda_p 
	order 	by	1;
	
		

BEGIN

ds_erro_p := '';
lista_informacao_w	:= ds_lista_prescricao_p;

while(lista_informacao_w IS NOT NULL AND lista_informacao_w::text <> '')  loop
	begin
	tam_lista_w		:= length(lista_informacao_w);
	ie_pos_virgula_w	:= position(',' in lista_informacao_w);

	if (ie_pos_virgula_w <> 0) then
		nr_prescricao_w	:= (substr(lista_informacao_w,1,(ie_pos_virgula_w - 1)))::numeric;
		lista_informacao_w	:= substr(lista_informacao_w,(ie_pos_virgula_w + 1),tam_lista_w);
	end if;
	
	select 	nr_atendimento,
			dt_prescricao,
			cd_pessoa_fisica
	into STRICT	nr_atendimento_w,
			dt_prescricao_w,
			cd_pessoa_fisica_w
	from 	prescr_medica
	where 	nr_prescricao = nr_prescricao_w;
		
	ds_erro_w := Liberar_Prescricao(	nr_prescricao_w, nr_atendimento_w, ie_tipo_pessoa_p, cd_perfil_p, nm_usuario_p, ie_prescricao_p, ds_erro_w);
						
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		ds_erro_p	:= ds_erro_p ||obter_desc_expressao(671332)/*'     prescr: '*/
||nr_prescricao_w||' = '||ds_erro_w;						
	end if;	
	
	
	select 	coalesce(max(cd_estabelecimento),0) 	
	into STRICT	cd_estabelecimento_w
	from   	prescr_medica
	where  	nr_prescricao = nr_prescricao_w;
	
	
	open c01;
	loop
	fetch c01 into	
		nr_seq_agenda_w,
		cd_tipo_agenda_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin
		
		if (cd_tipo_agenda_w = 1)  then
			ds_tipo_agenda_w := 'CI';
		elsif (cd_tipo_agenda_w = 2)  then
			ds_tipo_agenda_w := 'E';
		elsif (cd_tipo_agenda_w = 3)  then
			ds_tipo_agenda_w := 'C';
		elsif (cd_tipo_agenda_w = 5)  then
			ds_tipo_agenda_w := 'S';		
		end if;		
		
			
		if (obter_se_existe_evento_agenda(cd_estabelecimento_w, 'LP' ,  ds_tipo_agenda_w) = 'S') then
					
			CALL executar_evento_agenda('LP', ds_tipo_agenda_w, nr_seq_agenda_w, cd_estabelecimento_w, nm_usuario_p);
		end if;	
		
		end;
	end loop;
	close c01;
	
	
	end;
end loop;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE liberar_prescricao_lista ( ds_lista_prescricao_p text, ie_tipo_pessoa_p text, cd_perfil_p bigint, nm_usuario_p text, ie_prescricao_p text, cd_tipo_agenda_p bigint, nr_seq_agenda_p bigint, ds_erro_p INOUT text ) FROM PUBLIC;

