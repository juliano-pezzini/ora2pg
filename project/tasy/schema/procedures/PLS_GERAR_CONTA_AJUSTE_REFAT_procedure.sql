-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_conta_ajuste_refat ( nr_seq_ajuste_conta_p pls_ajuste_fatura_conta.nr_sequencia%type, ds_observacao_p pls_protocolo_conta.ds_observacao%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

						
nr_seq_item_w				pls_conta_proc.nr_sequencia%type;
nr_seq_conta_w				pls_conta.nr_sequencia%type;
ie_tipo_item_w				varchar(1);
nr_seq_conta_partic_w			pls_proc_participante.nr_sequencia%type;
nr_seq_conta_ww				pls_conta.nr_sequencia%type;
nr_seq_conta_proc_ww			pls_conta_proc.nr_sequencia%type;
nr_seq_protocolo_orig_w			pls_protocolo_conta.nr_sequencia%type;
nr_seq_conta_mat_ww			pls_conta_mat.nr_sequencia%type;
nr_seq_conta_partic_ww			pls_proc_participante.nr_sequencia%type;
nr_seq_protocolo_w			pls_protocolo_conta.nr_sequencia%type := null;
cd_excecao_w				pls_conta.cd_excecao%type := null;
qt_registro_w				integer;
nr_seq_ajuste_fatura_w			pls_ajuste_fatura_conta.nr_seq_ajuste_fatura%type;
nr_seq_fatura_ori_w			pls_ajuste_fatura.nr_seq_fatura%type;
nr_seq_prestador_w			pls_prestador.nr_sequencia%type;
ie_tipo_guia_w				pls_protocolo_conta.ie_tipo_guia%type;
cd_estabelecimento_w			pls_protocolo_conta.cd_estabelecimento%type;
nr_seq_outorgante_w			pls_protocolo_conta.nr_seq_outorgante%type;
nr_seq_congenere_w			pls_congenere.nr_sequencia%type;
nr_seq_lote_disc_w			pls_lote_discussao.nr_sequencia%type;
ie_contestacao_refat_w			pls_parametro_faturamento.ie_contestacao_refat%type;
ie_process_refat_w			pls_parametro_faturamento.ie_process_refat%type;
nr_identificador_w			bigint := 0;
nr_seq_analise_pos_w			pls_analise_conta.nr_sequencia%type;
ds_mensagem_retorno_w			varchar(4000);
dt_atendimento_referencia_w		pls_conta.dt_atendimento_referencia%type;
dt_limit_prot_w				pls_protocolo_conta.dt_protocolo%type;
nr_seq_pls_fatura_w			pls_lote_contestacao.nr_seq_pls_fatura%type := null;
qt_procedimento_w			pls_conta_proc.qt_procedimento%type := null;
qt_material_w				pls_conta_mat.qt_material%type := null;
ie_utilizar_qt_disc_w			varchar(1) := 'N';
nr_seq_segurado_w			pls_conta.nr_seq_segurado%type;
nr_seq_lote_prot_conta_w		pls_lote_protocolo_conta.nr_sequencia%type;
nr_ndr_glosada_w			pls_conta_inf_ptu.nr_ndr_glosada%type;
nr_lote_glosado_w			pls_conta_inf_ptu.nr_lote_glosado%type;
nr_nota_glosada_w			pls_conta_inf_ptu.nr_nota_glosada%type;
nr_fatura_glosada_w			pls_conta_inf_ptu.nr_fatura_glosada%type;
nr_guia_glosada_w			pls_conta_inf_ptu.nr_guia_glosada%type;
nr_guia_oper_glosada_w			pls_conta_inf_ptu.nr_guia_oper_glosada%type;

C01 CURSOR FOR
	SELECT	i.nr_sequencia,
		'P'
	from	pls_conta_proc	i
	where	i.nr_seq_conta 		= nr_seq_conta_w
	and (ie_contestacao_refat_w	= 'CI'
	or	exists (SELECT	1
			from	pls_discussao_proc		l,
				pls_contestacao_discussao	d
			where	d.nr_sequencia		= l.nr_seq_discussao
			and	l.nr_seq_conta_proc	= i.nr_sequencia
			and	d.nr_seq_lote		= nr_seq_lote_disc_w))
	
union all

	select	i.nr_sequencia,
		'M'
	from	pls_conta_mat	i
	where	i.nr_seq_conta 		= nr_seq_conta_w
	and (ie_contestacao_refat_w	= 'CI'
	or	exists (select	1
			from	pls_discussao_mat		l,
				pls_contestacao_discussao	d
			where	d.nr_sequencia		= l.nr_seq_discussao
			and	l.nr_seq_conta_mat	= i.nr_sequencia
			and	d.nr_seq_lote		= nr_seq_lote_disc_w))
	order by 1;
	
C03 CURSOR FOR
	SELECT	p.nr_sequencia
	from	pls_proc_participante	p
	where	p.nr_seq_conta_proc 	= nr_seq_item_w
	and (coalesce(p.ie_status::text, '') = '' or p.ie_status <> 'C')
	order by 1;


BEGIN
select	max(a.nr_seq_conta),
	max(b.nr_seq_protocolo),
	max(a.nr_seq_ajuste_fatura)
into STRICT	nr_seq_conta_w,
	nr_seq_protocolo_orig_w,
	nr_seq_ajuste_fatura_w
from	pls_conta b,
	pls_ajuste_fatura_conta a
where	a.nr_sequencia		= nr_seq_ajuste_conta_p
and	a.nr_seq_conta		= b.nr_sequencia;

if (nr_seq_ajuste_fatura_w IS NOT NULL AND nr_seq_ajuste_fatura_w::text <> '') then
	select	max(nr_seq_fatura),
		max(nr_seq_lote_disc)
	into STRICT	nr_seq_fatura_ori_w,
		nr_seq_lote_disc_w
	from	pls_ajuste_fatura
	where	nr_sequencia	= nr_seq_ajuste_fatura_w;
end if;

if (nr_seq_conta_w IS NOT NULL AND nr_seq_conta_w::text <> '') then

	-- Busca o nr_seq_pls_fatura do lote de contestacao, do respectivo lote de discussao, se existir
	if (nr_seq_lote_disc_w IS NOT NULL AND nr_seq_lote_disc_w::text <> '') then
	
		select	max(b.nr_seq_pls_fatura)
		into STRICT	nr_seq_pls_fatura_w
		from	pls_lote_discussao	a,
			pls_lote_contestacao	b
		where	b.nr_sequencia	= a.nr_seq_lote_contest
		and	a.nr_sequencia	= nr_seq_lote_disc_w;
	end if;

	select	nr_seq_prestador,
		ie_tipo_guia,
		cd_estabelecimento,
		nr_seq_outorgante,
		nr_seq_congenere
	into STRICT	nr_seq_prestador_w,	
		ie_tipo_guia_w,
		cd_estabelecimento_w,
		nr_seq_outorgante_w,
		nr_seq_congenere_w
	from	pls_protocolo_conta
	where	nr_sequencia 	= nr_seq_protocolo_orig_w;
	
	select	coalesce(max(ie_contestacao_refat),'CI'),
		coalesce(max(ie_process_refat),'GC')
	into STRICT	ie_contestacao_refat_w,
		ie_process_refat_w
	from	pls_parametro_faturamento
	where	cd_estabelecimento	= cd_estabelecimento_w;
	
	if (coalesce(nr_seq_lote_disc_w::text, '') = '') then
		ie_contestacao_refat_w 	:= 'CI';
	end if;
	
	dt_limit_prot_w := add_months(clock_timestamp(), -4);
	
	select 	max(nr_sequencia),
		max(nr_seq_lote_conta)
	into STRICT	nr_seq_protocolo_w,
		nr_seq_lote_prot_conta_w
	from 	pls_protocolo_conta	x
	where (x.nr_seq_prestador	= nr_seq_prestador_w or coalesce(coalesce(x.nr_seq_prestador,nr_seq_prestador_w)::text, '') = '')
	and (x.nr_seq_congenere	= nr_seq_congenere_w or coalesce(coalesce(x.nr_seq_congenere,nr_seq_congenere_w)::text, '') = '')
	and	x.ie_tipo_guia		= ie_tipo_guia_w
	and	x.ie_status		= '1'
	and	x.ie_guia_fisica 	= 'S'
	and	x.cd_estabelecimento 	= cd_estabelecimento_w
	and 	x.ie_apresentacao 	= 'R'
	and	x.ie_situacao		= 'D'
	and 	x.ie_tipo_protocolo 	= 'C'
	and	x.nr_seq_outorgante 	= nr_seq_outorgante_w
	and	x.ie_tipo_resp_credito 	= 'B'
	and	x.ie_protocolo_compl	= 'N'
	and	x.ie_origem_protocolo	= 'D'
	and	x.dt_protocolo		>= dt_limit_prot_w
	and	x.ie_refaturamento	= 'S';
	
	
	if (coalesce(nr_seq_protocolo_w::text, '') = '') then
	
		-- quando nao localizar um protocolo viavel, sera criado um protocolo novo.		
		select	nextval('pls_protocolo_conta_seq')
		into STRICT	nr_seq_protocolo_w
		;
		
		insert	into pls_protocolo_conta(nr_sequencia,
			dt_recebimento,
			dt_protocolo,
			dt_mes_competencia,
			nr_protocolo_prestador,
			nr_seq_prestador,
			ie_tipo_guia,
			nr_seq_congenere,
			ie_apresentacao,
			qt_contas_informadas,
			vl_cobrado_manual,
			nr_seq_lote_conta,
			ie_guia_fisica,
			ds_observacao,
			ie_status,
			dt_integracao,
			nr_seq_motivo_cancel,
			vl_cobrado,
			vl_total,
			vl_glosa,
			vl_coparticipacao,
			vl_pendente,
			vl_total_beneficiario,
			nm_usuario_integracao,
			ds_hash,
			nm_usuario_nrec,
			nr_lote_contabil,
			nr_seq_lote,
			dt_lib_pagamento,
			dt_fechamento_contas,
			nr_seq_prot_referencia,
			nr_lote_contabil_prov,
			nr_lote_prov_copartic,
			cd_estabelecimento,
			ie_situacao,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			ie_tipo_protocolo,
			cd_profissional_executor,
			nr_seq_prestador_imp,
			nr_seq_grau_partic,
			dt_protocolo_imp,
			nm_prestador_imp,
			cd_cgc_prestador_imp,
			nr_cpf_prestador_imp,
			dt_base_venc,
			cd_condicao_pagamento,
			ie_forma_imp,
			nr_seq_transacao,
			nr_seq_outorgante,
			nr_seq_resumo_lote,
			nr_seq_segurado,
			ie_tipo_resp_credito,
			ie_forma_pagamento,
			cd_banco,
			nr_seq_conta_banco,
			cd_agencia_bancaria,
			ie_digito_agencia,
			cd_conta,
			ie_digito_conta,
			cd_versao,
			ds_aplicativo,
			ds_fabricante,
			ie_protocolo_compl,
			vl_total_imp,
			vl_contabil,
			vl_lib_sistema,
			vl_lib_usuario,
			qt_ocorrencias,
			cd_prestador_imp,
			cd_prestador,
			cd_pessoa_fisica,
			nr_seq_periodo_pgto,
			nr_seq_mot_reembolso,
			cd_versao_tiss,
			ie_origem_protocolo,
			nr_seq_usu_prestador,
			nr_lote_contab_pag,
			nr_seq_lote_apres_autom,
			dt_fim_analise,
			nr_seq_xml_arquivo,
			ie_tipo_importacao,
			dt_cancelamento,
			nr_seq_serv_pre_pagto,
			ie_refaturamento)
		SELECT	nr_seq_protocolo_w,
			clock_timestamp(),
			clock_timestamp(),
			clock_timestamp(),
			'',
			nr_seq_prestador,
			ie_tipo_guia,
			nr_seq_congenere,
			'R',
			null,
			null,
			null,
			'S',
			ds_observacao_p,
			'1',
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			'',
			'',
			nm_usuario_p,
			0,
			null,
			null,
			null,
			null,
			null,
			null,
			cd_estabelecimento,
			'D',
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			'C',
			'',
			'',
			null,
			null,
			'',
			'',
			'',
			clock_timestamp(),
			cd_condicao_pagamento,
			'',
			null,
			nr_seq_outorgante,
			null,
			null,
			'B',
			'',
			null,
			null,
			'',
			'',
			'',
			'',
			'',
			'',
			'',
			'N',
			null,
			null,
			null,
			null,
			null,
			'',
			'',
			'',
			null,
			null,
			'',
			'D',
			null,
			null,
			null,
			null,
			null,
			'',
			null,
			null,
			'S'
		from	pls_protocolo_conta
		where	nr_sequencia	= nr_seq_protocolo_orig_w;
	end if;
	
	-- Se nao localizou um lote no protocolo atual, gera um novo e vincula
	if	((coalesce(nr_seq_lote_prot_conta_w::text, '') = '') and (nr_seq_protocolo_w IS NOT NULL AND nr_seq_protocolo_w::text <> '')) then
		
		-- Ja gera com o status 'A'
		insert into pls_lote_protocolo_conta(	nr_sequencia,
							dt_atualizacao,
							dt_atualizacao_nrec,
							nm_usuario,
							nm_usuario_nrec,
							dt_lote,
							cd_estabelecimento,
							ie_status)
		values (nextval('pls_lote_protocolo_conta_seq'),
			clock_timestamp(),
			clock_timestamp(),
			nm_usuario_p,
			nm_usuario_p,
			clock_timestamp(),
			cd_estabelecimento_w,
			'A') returning nr_sequencia into nr_seq_lote_prot_conta_w;
			
	
		-- atualiza o protocolo novo
		update	pls_protocolo_conta
		set	nr_seq_lote_conta	= nr_seq_lote_prot_conta_w
		where	nr_sequencia		= nr_seq_protocolo_w;
						
	end if;

	select	count(1)
	into STRICT	qt_registro_w
	from	pls_fatura_conta c,
		pls_fatura_evento b,
		pls_fatura a,
		pls_lote_faturamento x
	where	x.nr_sequencia	= a.nr_seq_lote
	and	a.nr_sequencia	= b.nr_seq_fatura
	and	b.nr_sequencia	= c.nr_seq_fatura_evento
	and	a.nr_sequencia	= nr_seq_fatura_ori_w
	and	c.nr_seq_conta	= nr_seq_conta_w
	and	(x.nr_seq_lote_disc IS NOT NULL AND x.nr_seq_lote_disc::text <> '')
	and	exists (SELECT	1
			from	pls_lote_discussao	d,
				pls_lote_contestacao	f,
				pls_contestacao		w
			where	f.nr_sequencia	= d.nr_seq_lote_contest
			and	f.nr_sequencia	= w.nr_seq_lote
			and	w.nr_seq_conta	= c.nr_seq_conta
			and	d.nr_sequencia	= x.nr_seq_lote_disc);
			
	if (qt_registro_w = 0) then
		select	count(1)
		into STRICT	qt_registro_w
		from	pls_conta b,
			pls_ajuste_fatura_conta a,
			pls_ajuste_fatura c
		where	a.nr_sequencia		= nr_seq_ajuste_conta_p
		and	a.nr_seq_conta		= b.nr_sequencia
		and	c.nr_sequencia		= a.nr_seq_ajuste_fatura
		and	(c.nr_seq_lote_disc IS NOT NULL AND c.nr_seq_lote_disc::text <> '');
	end if;
	
	if (qt_registro_w > 0) then
		cd_excecao_w := 'J';
	end if;

	select	nextval('pls_conta_seq')
	into STRICT	nr_seq_conta_ww
	;
	
	select	max(nr_seq_segurado)
	into STRICT	nr_seq_segurado_w
	from	pls_conta_pos_cabecalho
	where	nr_seq_conta = nr_seq_conta_w
	and	coalesce(nr_seq_conta_rec::text, '') = '';
	
	-- Cria nova conta medica
	insert into pls_conta(cd_ans, cd_cnes, cd_conta_cred,
			cd_conta_deb, cd_conta_glosa_cred, cd_conta_glosa_deb,  
			cd_estabelecimento, cd_guia, cd_guia_prestador, 
			cd_guia_referencia, cd_historico, cd_medico_executor,
			cd_medico_solicitante, cd_senha, ds_observacao, 
			dt_alta, dt_atualizacao, dt_atualizacao_nrec, 
			dt_autorizacao, dt_atendimento_referencia,dt_emissao, dt_entrada,
			dt_validade_senha, ie_atend_rn_sala_parto, ie_baixo_peso,
			ie_carater_internacao, ie_complicacao_neonatal, ie_complicacao_puerperio,
			ie_gestacao, ie_indicacao_acidente, ie_obito, 
			ie_obito_mulher, ie_parto_cesaria, ie_parto_normal,
			ie_regime_internacao, ie_status, ie_tipo_beneficiario,
			ie_tipo_doenca, ie_tipo_faturamento, ie_tipo_guia, ie_tipo_plano,
			ie_tipo_segurado, ie_transtorno, nm_usuario, 
			nm_usuario_nrec, nr_crm_exec, nr_seq_cbo_saude, 
			nr_seq_clinica, nr_seq_conta_referencia, nr_seq_grau_partic, 
			nr_seq_guia, nr_seq_plano, nr_seq_prestador, 
			nr_seq_prestador_exec, nr_seq_prot_conta, nr_seq_protocolo, 
			nr_seq_regra_ctb_cred, nr_seq_regra_ctb_deb, nr_seq_saida_consulta, 
			nr_seq_saida_int, nr_seq_saida_spsadt, nr_seq_segurado, 
			nr_seq_tipo_acomodacao, nr_seq_tipo_atendimento, nr_sequencia, 
			qt_diarias_sip, qt_nasc_mortos, qt_nasc_vivos, 
			qt_nasc_vivos_prematuros, qt_nasc_vivos_termo, qt_obito_precoce, 
			qt_obito_tardio, sg_conselho_exec, sg_conselho_solic, 
			uf_crm_exec, vl_cobrado, vl_coparticipacao, 
			vl_diarias, vl_gases, vl_glosa, 
			vl_materiais, vl_medicamentos, vl_opm, 
			vl_pacotes, vl_procedimentos, vl_saldo, 
			vl_taxas, vl_total, vl_total_beneficiario,
			cd_cooperativa, nr_seq_conselho_exec,ie_tipo_consulta,
			ie_origem_conta, nr_seq_ajuste_fat, cd_excecao,
			cd_usuario_plano_imp, nr_seq_conta_princ, cd_guia_imp,
			cd_guia_prestador_imp, dt_autorizacao_imp, cd_senha_imp,
			dt_validade_senha_imp, nm_segurado_imp, ie_carater_internacao_imp,
			ie_indicacao_acidente_imp, ie_tipo_atendimento_imp, cd_ans_imp,
			cd_guia_solic_imp, nr_seq_prestador_imp, nm_prestador_imp,
			cd_cnes_imp, vl_procedimentos_imp, vl_diarias_imp,
			vl_taxas_imp, vl_materiais_imp, vl_medicamentos_imp,
			vl_gases_imp, vl_opm_imp, vl_total_imp,
			nm_medico_solic_imp, cd_cbo_saude_solic_imp, sg_conselho_solic_imp,
			cd_cnes_executor_imp, uf_crm_solic_imp, nr_crm_solic_imp,
			ie_aborto, nr_seq_prestador_exec_imp, nm_prestador_exec_imp,
			ds_indicacao_clinica, nr_seq_conselho_solic, cd_prestador_exec_imp,
			cd_prestador_solic_imp, dt_atendimento_imp, ie_recem_nascido,
			nr_seq_cbo_saude_solic, ie_recem_nascido_imp, ds_indicacao_clinica_imp,
			ie_tipo_consulta_imp, dt_atendimento_imp_referencia, nr_seq_prestador_exec_imp_ref,
			nr_seq_prestador_imp_ref, ie_tipo_internado,cd_senha_externa,
			ie_cobertura_especial, ie_regime_atendimento, ie_saude_ocupacional)
		(SELECT	cd_ans, cd_cnes, cd_conta_cred, 
			cd_conta_deb, cd_conta_glosa_cred, cd_conta_glosa_deb,  
			cd_estabelecimento, cd_guia, cd_guia_prestador, 
			cd_guia_referencia, cd_historico, cd_medico_executor,
			cd_medico_solicitante, cd_senha, ds_observacao_p, 
			dt_alta, clock_timestamp(), clock_timestamp(), 
			dt_autorizacao, dt_atendimento_referencia,dt_emissao, dt_entrada,
			dt_validade_senha, ie_atend_rn_sala_parto, ie_baixo_peso,
			ie_carater_internacao, ie_complicacao_neonatal, ie_complicacao_puerperio,
			ie_gestacao, ie_indicacao_acidente, ie_obito, 
			ie_obito_mulher, ie_parto_cesaria, ie_parto_normal,
			ie_regime_internacao, 'U', ie_tipo_beneficiario,
			ie_tipo_doenca, ie_tipo_faturamento, ie_tipo_guia, ie_tipo_plano,
			ie_tipo_segurado, ie_transtorno, nm_usuario_p, 
			nm_usuario_p, nr_crm_exec, nr_seq_cbo_saude, 
			nr_seq_clinica, nr_seq_conta_w, nr_seq_grau_partic, 
			nr_seq_guia, nr_seq_plano, nr_seq_prestador, 
			nr_seq_prestador_exec, nr_seq_prot_conta, nr_seq_protocolo_w, 
			nr_seq_regra_ctb_cred, nr_seq_regra_ctb_deb, nr_seq_saida_consulta, 
			nr_seq_saida_int, nr_seq_saida_spsadt, coalesce(nr_seq_segurado_w,nr_seq_segurado), 
			nr_seq_tipo_acomodacao, nr_seq_tipo_atendimento, nr_seq_conta_ww, 
			qt_diarias_sip, qt_nasc_mortos, qt_nasc_vivos, 
			qt_nasc_vivos_prematuros, qt_nasc_vivos_termo, qt_obito_precoce, 
			qt_obito_tardio, sg_conselho_exec, sg_conselho_solic, 
			uf_crm_exec, vl_cobrado, vl_coparticipacao, 
			vl_diarias, vl_gases, vl_glosa, 
			vl_materiais, vl_medicamentos, vl_opm, 
			vl_pacotes, vl_procedimentos, vl_saldo, 
			vl_taxas, vl_total, vl_total_beneficiario,
			cd_cooperativa, nr_seq_conselho_exec,ie_tipo_consulta,
			ie_origem_conta, nr_seq_ajuste_conta_p, cd_excecao_w,
			cd_usuario_plano_imp, nr_seq_conta_w, cd_guia_imp,
			cd_guia_prestador_imp, dt_autorizacao_imp, cd_senha_imp,
			dt_validade_senha_imp, nm_segurado_imp, ie_carater_internacao_imp,
			ie_indicacao_acidente_imp, ie_tipo_atendimento_imp, cd_ans_imp,
			cd_guia_solic_imp, nr_seq_prestador_imp, nm_prestador_imp,
			cd_cnes_imp, vl_procedimentos_imp, vl_diarias_imp,
			vl_taxas_imp, vl_materiais_imp, vl_medicamentos_imp,
			vl_gases_imp, vl_opm_imp, vl_total_imp,
			nm_medico_solic_imp, cd_cbo_saude_solic_imp, sg_conselho_solic_imp,
			cd_cnes_executor_imp, uf_crm_solic_imp, nr_crm_solic_imp,
			ie_aborto, nr_seq_prestador_exec_imp, nm_prestador_exec_imp,
			ds_indicacao_clinica, nr_seq_conselho_solic, cd_prestador_exec_imp,
			cd_prestador_solic_imp, dt_atendimento_imp, ie_recem_nascido,
			nr_seq_cbo_saude_solic, ie_recem_nascido_imp, ds_indicacao_clinica_imp,
			ie_tipo_consulta_imp, dt_atendimento_imp_referencia, nr_seq_prestador_exec_imp_ref,
			nr_seq_prestador_imp_ref, ie_tipo_internado, cd_senha_externa,
			ie_cobertura_especial, ie_regime_atendimento, ie_saude_ocupacional
		from	pls_conta
		where	nr_sequencia = nr_seq_conta_w);
		
	CALL pls_conta_tiss_pck.cria_copia_registro(nr_seq_conta_w, nr_seq_conta_ww, nm_usuario_p);
	
	-- Copiar a glosa da conta medica
	insert into pls_conta_glosa(nr_sequencia, dt_atualizacao, nm_usuario,
		dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta,
		nr_seq_conta_proc, nr_seq_conta_mat, nr_seq_motivo_glosa,
		ds_observacao, ie_lib_manual, ie_situacao,
		ie_fechar_conta, nr_seq_ocorrencia, nr_seq_ocorrencia_benef,
		dt_liberacao, nm_usuario_lib, nr_seq_mot_liberacao,
		qt_glosa, vl_glosa, nr_seq_proc_partic,
		ds_documentacao, nr_seq_glosa_conta, cd_sistema_ant,
		ie_forma_inativacao, ie_fluxo_adic, qt_glosa_fat)
	(SELECT	nextval('pls_conta_glosa_seq'), clock_timestamp(), nm_usuario_p,
		clock_timestamp(), nm_usuario_p, nr_seq_conta_ww,
		null, null, nr_seq_motivo_glosa,
		ds_observacao, ie_lib_manual, ie_situacao,
		ie_fechar_conta, nr_seq_ocorrencia, nr_seq_ocorrencia_benef,
		dt_liberacao, nm_usuario_lib, nr_seq_mot_liberacao,
		qt_glosa, vl_glosa, nr_seq_proc_partic,
		ds_documentacao, nr_seq_glosa_conta, cd_sistema_ant,
		ie_forma_inativacao, ie_fluxo_adic, qt_glosa_fat
	from	pls_conta_glosa
	where	nr_seq_conta	= nr_seq_conta_w
	and	coalesce(nr_seq_conta_proc::text, '') = ''
	and	coalesce(nr_seq_conta_mat::text, '') = ''
	and	coalesce(nr_seq_conta_pos_estab::text, '') = '');
		
	open C01;
	loop
	fetch C01 into	
		nr_seq_item_w,
		ie_tipo_item_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		if (ie_tipo_item_w = 'P') then
			nr_identificador_w := nr_identificador_w + 1;
			
			-- Caso a duplicacao seja feita com origem em uma discussao / contestacao, deve-se verificar a 

			-- quantidade contestada da discussao, se existir entao se utiliza ela.

			
			-- Isso foi feito por conta do AJIUS, que impoem o agrupamento de itens no arquivo, ou seja

			-- O tasy aceita a entrega de 2 procedimentos em registros distintos, mas com quantidade 1,

			-- mas o AJIUS nao, para ele tem que ser 1 procedimento com quantidade 2.

			
			-- Quando isto acontece, a copia da nova conta e feita com base na conta original, e a quantidade

			-- pode ficar diferente do contestado, e o usuario pode nao incluir o outro procedimento manualmente

			
			-- se a discussao da conta de origem veio de uma fatura, e utiliza o parametro para contestar apenas os itens contestados.
			if (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') and (nr_seq_lote_disc_w IS NOT NULL AND nr_seq_lote_disc_w::text <> '') and (ie_contestacao_refat_w = 'IC') then
			
				-- tenta buscar a quantidade da discussao
				select	max(a.qt_contestada)
				into STRICT	qt_procedimento_w
				from	pls_discussao_proc		a,
					pls_contestacao_discussao	b
				where	b.nr_sequencia		= a.nr_seq_discussao
				and	a.nr_seq_conta_proc	= nr_seq_item_w
				and	b.nr_seq_lote		= nr_seq_lote_disc_w;
				
				-- se encontrou uma quantidade informada na discussao, marca a flag para usar ela
				if (coalesce(qt_procedimento_w,0) > 0)	then
				
					ie_utilizar_qt_disc_w := 'S';
				else
				
					ie_utilizar_qt_disc_w := 'N';
				end if;
			else
				-- se nao tem origem de uma fatura, ou nao fatura somente os itens contestados, utiliza a quantidade do procedimento original
				ie_utilizar_qt_disc_w := 'N';				
			end if;
		
			select	nextval('pls_conta_proc_seq')
			into STRICT	nr_seq_conta_proc_ww
			;

			-- Copiar os procedimentos da conta medica
			insert into pls_conta_proc(cd_conta_cred, cd_conta_deb, cd_conta_glosa_cred,
				cd_conta_glosa_deb, cd_historico, cd_historico_glosa,
				cd_procedimento, ds_justificativa, ds_log,
				dt_atualizacao, dt_atualizacao_nrec, dt_fim_proc,
				dt_inicio_proc, dt_liberacao, dt_procedimento,
				ie_cobranca_prevista, ie_origem_proced, ie_situacao,
				ie_status, ie_tecnica_utilizada, ie_tipo_despesa,
				ie_via_acesso, nm_usuario, nm_usuario_liberacao,
				nm_usuario_nrec, nr_seq_conta, nr_seq_dados_proc, 
				nr_seq_grupo_ans, nr_seq_honorario_crit, nr_seq_pacote,
				nr_seq_regra, nr_seq_regra_ctb_cred, nr_seq_regra_ctb_deb,
				nr_seq_regra_horario, nr_seq_regra_liberacao, nr_seq_regra_pos_estab, 
				nr_seq_tiss_tabela, nr_sequencia, qt_procedimento,
				tx_item, tx_participacao, vl_anestesista, 
				vl_auxiliares, vl_beneficiario, vl_custo_operacional, 
				vl_glosa, vl_liberado, vl_materiais, 
				vl_medico, vl_participacao, vl_procedimento,
				vl_saldo, vl_unitario, qt_procedimento_imp,
				vl_procedimento_imp, vl_unitario_imp, nr_id_analise,
				ie_ato_cooperado, nr_seq_proc_princ, nr_seq_guia,
				nr_seq_guia_proc)
			(SELECT	cd_conta_cred, cd_conta_deb, cd_conta_glosa_cred,
				cd_conta_glosa_deb, cd_historico, cd_historico_glosa,
				cd_procedimento, ds_justificativa, ds_log,
				clock_timestamp(), clock_timestamp(), dt_fim_proc,
				dt_inicio_proc, dt_liberacao, dt_procedimento,
				ie_cobranca_prevista, ie_origem_proced, ie_situacao,
				'M', ie_tecnica_utilizada, ie_tipo_despesa,
				ie_via_acesso, nm_usuario_p, nm_usuario_liberacao, 
				nm_usuario_p, nr_seq_conta_ww, nr_seq_dados_proc, 
				nr_seq_grupo_ans, nr_seq_honorario_crit, nr_seq_pacote,
				nr_seq_regra, nr_seq_regra_ctb_cred, nr_seq_regra_ctb_deb,
				nr_seq_regra_horario, nr_seq_regra_liberacao, nr_seq_regra_pos_estab, 
				nr_seq_tiss_tabela, nr_seq_conta_proc_ww,  CASE WHEN coalesce(ie_utilizar_qt_disc_w,'N')='N' THEN  qt_procedimento  ELSE coalesce(qt_procedimento_w, qt_procedimento) END ,
				tx_item, tx_participacao, vl_anestesista, 
				vl_auxiliares, vl_beneficiario, vl_custo_operacional, 
				vl_glosa, vl_liberado, vl_materiais, 
				vl_medico, vl_participacao, vl_procedimento,
				vl_saldo, vl_unitario, CASE WHEN coalesce(ie_utilizar_qt_disc_w,'N')='N' THEN  qt_procedimento_imp  ELSE coalesce(qt_procedimento_w, qt_procedimento) END ,
				vl_procedimento_imp, vl_unitario_imp, nr_identificador_w,
				ie_ato_cooperado, nr_seq_item_w, nr_seq_guia,
				nr_seq_guia_proc
			from	pls_conta_proc
			where	nr_sequencia	= nr_seq_item_w);
			
			CALL pls_cta_proc_mat_regra_pck.cria_copia_regra_proc_tiss(nr_seq_item_w, nr_seq_conta_proc_ww, 'S', nm_usuario_p);
			
			-- Copiar as glosas dos procedimentos da conta medica
			insert into pls_conta_glosa(nr_sequencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta,
				nr_seq_conta_proc, nr_seq_conta_mat, nr_seq_motivo_glosa,
				ds_observacao, ie_lib_manual, ie_situacao,
				ie_fechar_conta, nr_seq_ocorrencia, nr_seq_ocorrencia_benef,
				dt_liberacao, nm_usuario_lib, nr_seq_mot_liberacao,
				qt_glosa, vl_glosa, nr_seq_proc_partic,
				ds_documentacao, nr_seq_glosa_conta, cd_sistema_ant,
				ie_forma_inativacao, ie_fluxo_adic, qt_glosa_fat)
			(SELECT	nextval('pls_conta_glosa_seq'), clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, CASE WHEN coalesce(nr_seq_conta::text, '') = '' THEN null  ELSE nr_seq_conta_ww END ,
				nr_seq_conta_proc_ww, null, nr_seq_motivo_glosa,
				ds_observacao, ie_lib_manual, ie_situacao,
				ie_fechar_conta, nr_seq_ocorrencia, nr_seq_ocorrencia_benef,
				dt_liberacao, nm_usuario_lib, nr_seq_mot_liberacao,
				qt_glosa, vl_glosa, nr_seq_proc_partic,
				ds_documentacao, nr_seq_glosa_conta, cd_sistema_ant,
				ie_forma_inativacao, ie_fluxo_adic, qt_glosa_fat
			from	pls_conta_glosa
			where	nr_seq_conta_proc	= nr_seq_item_w
			and	coalesce(nr_seq_conta_pos_estab::text, '') = '');
					
			open C03;
			loop
			fetch C03 into	
				nr_seq_conta_partic_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin
				nr_identificador_w := nr_identificador_w + 1;
				
						
				select	nextval('pls_proc_participante_seq')
				into STRICT	nr_seq_conta_partic_ww
				;
					
				-- Copiar os participantes da conta medica
				insert 	into	pls_proc_participante(	cd_cbo_saude_imp, cd_cgc_imp, cd_guia,
						cd_medico, cd_medico_imp, cd_prestador_imp,                
						cd_sistema_ant, dt_atualizacao, dt_atualizacao_nrec,             
						ie_atualizado, ie_conselho_profissional, ie_funcao_medico_imp,            
						ie_gerada_cta_honorario, ie_glosa, ie_insercao_manual,
						ie_status, ie_status_pagamento, nm_medico_executor_imp,
						nm_usuario, nm_usuario_nrec, nr_cpf_imp,                      
						nr_crm_imp, nr_seq_cbo_saude, nr_seq_conselho,                 
						nr_seq_conta_proc, nr_seq_grau_partic, nr_seq_honorario_crit,
						nr_seq_prestador, nr_seq_prestador_pgto, nr_seq_regra,                    
						nr_sequencia, qt_liberada, sg_conselho_imp,                 
						uf_conselho, uf_crm_imp, vl_apresentado,
						vl_calculado, vl_calculado_ant, vl_digitado_complemento,
						vl_glosa, vl_honorario_medico, vl_participante,
						nr_id_analise)
				( SELECT	cd_cbo_saude_imp, cd_cgc_imp, cd_guia,                         
						cd_medico, cd_medico_imp, cd_prestador_imp,                
						cd_sistema_ant, clock_timestamp(), clock_timestamp(),             
						ie_atualizado, ie_conselho_profissional, ie_funcao_medico_imp,            
						ie_gerada_cta_honorario, ie_glosa, ie_insercao_manual,
						'U', ie_status_pagamento, nm_medico_executor_imp,
						nm_usuario_p, nm_usuario_p, nr_cpf_imp,                      
						nr_crm_imp, nr_seq_cbo_saude, nr_seq_conselho,                 
						nr_seq_conta_proc_ww, nr_seq_grau_partic, nr_seq_honorario_crit,
						nr_seq_prestador, nr_seq_prestador_pgto, nr_seq_regra,                    
						nr_seq_conta_partic_ww, qt_liberada, sg_conselho_imp,                 
						uf_conselho, uf_crm_imp, vl_apresentado,
						vl_calculado, vl_calculado_ant, vl_digitado_complemento,
						vl_glosa, vl_honorario_medico, vl_participante, 
						nr_identificador_w
				from	pls_proc_participante
				where	nr_sequencia = nr_seq_conta_partic_w);		
										
				end;
			end loop;
			close C03;
		else
			nr_identificador_w := nr_identificador_w + 1;
			
			-- Caso a duplicacao seja feita com origem em uma discussao / contestacao, deve-se verificar a 

			-- quantidade contestada da discussao, se existir entao se utiliza ela.

			
			-- Isso foi feito por conta do AJIUS, que impoem o agrupamento de itens no arquivo, ou seja

			-- O tasy aceita a entrega de 2 materiais em registros distintos, mas com quantidade 1,

			-- mas o AJIUS nao, para ele tem que ser 1 material com quantidade 2.

			
			-- Quando isto acontece, a copia da nova conta e feita com base na conta original, e a quantidade

			-- pode ficar diferente do contestado, e o usuario pode nao incluir o outro material manualmente

			
			-- se a discussao da conta de origem veio de uma fatura, e utiliza o parametro para contestar apenas os itens contestados.
			if (nr_seq_pls_fatura_w IS NOT NULL AND nr_seq_pls_fatura_w::text <> '') and (nr_seq_lote_disc_w IS NOT NULL AND nr_seq_lote_disc_w::text <> '') and (ie_contestacao_refat_w = 'IC') then
			
				-- tenta buscar a quantidade da discussao
				select	max(a.qt_contestada)
				into STRICT	qt_material_w
				from	pls_discussao_mat		a,
					pls_contestacao_discussao	b
				where	b.nr_sequencia		= a.nr_seq_discussao
				and	a.nr_seq_conta_mat	= nr_seq_item_w
				and	b.nr_seq_lote		= nr_seq_lote_disc_w;
				
				-- se encontrou uma quantidade informada na discussao, marca a flag para usar ela
				if (coalesce(qt_material_w,0) > 0)	then
				
					ie_utilizar_qt_disc_w := 'S';
				else
				
					ie_utilizar_qt_disc_w := 'N';
				end if;
			else
				-- se nao tem origem de uma fatura, ou nao fatura somente os itens contestados, utiliza a quantidade do procedimento original
				ie_utilizar_qt_disc_w := 'N';				
			end if;
			
			
			select	nextval('pls_conta_mat_seq')
			into STRICT	nr_seq_conta_mat_ww
			;

			-- Copiar os materiais da conta medica
			insert into pls_conta_mat(cd_conta_cred, cd_conta_deb, cd_conta_glosa_cred,
				cd_conta_glosa_deb, cd_historico, cd_historico_glosa,
				dt_atendimento, dt_atualizacao, dt_atualizacao_nrec, 
				dt_fim_atend, dt_inicio_atend, dt_liberacao, 
				ie_origem_preco, ie_situacao, ie_status, 
				ie_tipo_despesa, nm_usuario, nm_usuario_liberacao,
				nm_usuario_nrec, nr_seq_conta, nr_seq_grupo_ans,
				nr_seq_material, nr_seq_regra, nr_seq_regra_ctb_cred,
				nr_seq_regra_ctb_deb, nr_seq_regra_pos_estab, nr_seq_tiss_tabela,
				nr_sequencia, qt_material, tx_participacao, 
				tx_reducao_acrescimo, vl_beneficiario, vl_gerado,
				vl_glosa, vl_liberado, vl_material,
				vl_participacao, vl_saldo, vl_unitario,
				qt_material_imp, vl_material_imp, vl_unitario_imp,
				nr_id_analise,ie_ato_cooperado, nr_seq_mat_princ,
				nr_seq_guia, nr_seq_guia_mat)
			(SELECT	cd_conta_cred, cd_conta_deb, cd_conta_glosa_cred, 
				cd_conta_glosa_deb, cd_historico, cd_historico_glosa,
				dt_atendimento, clock_timestamp(), clock_timestamp(), 
				dt_fim_atend, dt_inicio_atend, dt_liberacao, 
				ie_origem_preco, ie_situacao, 'M', 
				ie_tipo_despesa, nm_usuario_p, nm_usuario_liberacao,
				nm_usuario_p, nr_seq_conta_ww, nr_seq_grupo_ans,
				nr_seq_material, nr_seq_regra, nr_seq_regra_ctb_cred,
				nr_seq_regra_ctb_deb, nr_seq_regra_pos_estab, nr_seq_tiss_tabela,
				nr_seq_conta_mat_ww, CASE WHEN coalesce(ie_utilizar_qt_disc_w, 'N')='N' THEN  qt_material  ELSE coalesce(qt_material_w, qt_material) END , tx_participacao, 
				tx_reducao_acrescimo, vl_beneficiario, vl_gerado,
				vl_glosa, vl_liberado, vl_material,
				vl_participacao, vl_saldo, vl_unitario,
				CASE WHEN coalesce(ie_utilizar_qt_disc_w, 'N')='N' THEN  qt_material_imp  ELSE coalesce(qt_material_w,qt_material_imp) END , vl_material_imp, vl_unitario_imp,
				nr_identificador_w,ie_ato_cooperado, nr_seq_item_w,
				nr_seq_guia, nr_seq_guia_mat
			from	pls_conta_mat
			where	nr_Sequencia	= nr_seq_item_w);
			
			CALL pls_cta_proc_mat_regra_pck.cria_copia_regra_mat_tiss(nr_seq_item_w, nr_seq_conta_mat_ww, 'S', nm_usuario_p);
			
			-- Copiar as glosas dos materiais da conta medica
			insert into pls_conta_glosa(nr_sequencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta,
				nr_seq_conta_proc, nr_seq_conta_mat, nr_seq_motivo_glosa,
				ds_observacao, ie_lib_manual, ie_situacao,
				ie_fechar_conta, nr_seq_ocorrencia, nr_seq_ocorrencia_benef,
				dt_liberacao, nm_usuario_lib, nr_seq_mot_liberacao,
				qt_glosa, vl_glosa, nr_seq_proc_partic,
				ds_documentacao, nr_seq_glosa_conta, cd_sistema_ant,
				ie_forma_inativacao, ie_fluxo_adic, qt_glosa_fat)
			(SELECT	nextval('pls_conta_glosa_seq'), clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, CASE WHEN coalesce(nr_seq_conta::text, '') = '' THEN null  ELSE nr_seq_conta_ww END ,
				null, nr_seq_conta_mat_ww, nr_seq_motivo_glosa,
				ds_observacao, ie_lib_manual, ie_situacao,
				ie_fechar_conta, nr_seq_ocorrencia, nr_seq_ocorrencia_benef,
				dt_liberacao, nm_usuario_lib, nr_seq_mot_liberacao,
				qt_glosa, vl_glosa, nr_seq_proc_partic,
				ds_documentacao, nr_seq_glosa_conta, cd_sistema_ant,
				ie_forma_inativacao, ie_fluxo_adic, qt_glosa_fat
			from	pls_conta_glosa
			where	nr_seq_conta_mat	= nr_seq_item_w
			and	coalesce(nr_seq_conta_pos_estab::text, '') = '');
		end if;
		end;
	end loop;
	close C01;
	
	select	max(dt_atendimento_referencia)
	into STRICT	dt_atendimento_referencia_w
	from	pls_conta
	where	nr_sequencia	= nr_seq_conta_w;
	
	--Atualiza a data do atendimento referencia conforme a original, a function "pls_obter_dt_atendimento" que esta nas triggers nao considera faturamento manual
	update	pls_conta
	set	dt_atendimento_referencia	= coalesce(dt_atendimento_referencia_w,dt_atendimento_referencia)
	where	nr_sequencia			= nr_seq_conta_ww;
	
	if (cd_excecao_w = 'J') and (nr_seq_fatura_ori_w IS NOT NULL AND nr_seq_fatura_ori_w::text <> '') then
		select	max(pf.nr_fatura),
			max(pf.nr_nota_credito_debito),
			max(pc.nr_nota),
			max(pc.nr_lote),
			max(pc.nr_guia_tiss_prestador),
			max(pc.nr_guia_oper_glosada)
		into STRICT	nr_fatura_glosada_w,
			nr_ndr_glosada_w,
			nr_nota_glosada_w,
			nr_lote_glosado_w,
			nr_guia_glosada_w,
			nr_guia_oper_glosada_w
		from	pls_fatura 		f,
			ptu_fatura		pf,
			ptu_nota_cobranca 	pc,
			ptu_nota_cobranca_item_v i
		where	f.nr_sequencia	= pf.nr_seq_pls_fatura
		and	pf.nr_sequencia	= pc.nr_seq_fatura
		and	pc.nr_sequencia	= i.nr_seq_nota_cobr
		and	f.nr_sequencia	= nr_seq_fatura_ori_w
		and	i.nr_seq_conta	= nr_seq_conta_w;
	
		insert into pls_conta_inf_ptu(nr_sequencia,			dt_atualizacao,			nm_usuario,
			dt_atualizacao_nrec,		nm_usuario_nrec,		nr_ndr_glosada,
			nr_lote_glosado,		nr_nota_glosada,		nr_seq_conta,
			nr_fatura_glosada,		nr_guia_glosada,		nr_guia_oper_glosada)
		values (nextval('pls_conta_inf_ptu_seq'),	clock_timestamp(),			nm_usuario_p,
			clock_timestamp(),			nm_usuario_p,			nr_ndr_glosada_w,
			nr_lote_glosado_w,		nr_nota_glosada_w,		nr_seq_conta_ww,
			nr_fatura_glosada_w,		nr_guia_glosada_w,		nr_guia_oper_glosada_w);
	end if;
	
	-- Atualizar o valor da conta medica nova
	CALL pls_atualiza_valor_conta(nr_seq_conta_ww, nm_usuario_p);
	
	-- Processo atraves da funcao OPS - Analise de Custo Pos-estabelecido
	if (coalesce(ie_process_refat_w,'GC') = 'AP') then
		--  Fechar conta medica
		CALL pls_fechar_conta( nr_seq_conta_ww, 'S', null, 'N', cd_estabelecimento_w, nm_usuario_p, null, null);
		
		-- Gerar analise de pos
		CALL pls_gerar_analise_pos_estab( nr_seq_conta_ww, nm_usuario_p, cd_estabelecimento_w, 'R');
		
		-- Busca a analise POS criada
		begin
		select	max(a.nr_seq_analise)
		into STRICT	nr_seq_analise_pos_w
		from	pls_conta_pos_estabelecido	a
		where	a.nr_seq_conta	= nr_seq_conta_ww;
		exception
		when others then
			nr_seq_analise_pos_w := null;
		end;
		
		-- Se encontrou, finaliza a analise
		if (nr_seq_analise_pos_w IS NOT NULL AND nr_seq_analise_pos_w::text <> '') then
			-- Finaliza a analise de POS
			ds_mensagem_retorno_w := pls_finaliza_analise_grupo_pos(nr_seq_analise_pos_w, nm_usuario_p, null, 'N', 'N', cd_estabelecimento_w, ds_mensagem_retorno_w);
			
			-- Encerra a analise se a mesma estiver liquidada
			update	pls_analise_conta
			set	ie_status	= 'T'
			where	nr_sequencia	= nr_seq_analise_pos_w
			and	ie_status	= 'L';
		end if;
	end if;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_conta_ajuste_refat ( nr_seq_ajuste_conta_p pls_ajuste_fatura_conta.nr_sequencia%type, ds_observacao_p pls_protocolo_conta.ds_observacao%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

