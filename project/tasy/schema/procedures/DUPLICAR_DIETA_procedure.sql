-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE duplicar_dieta ( nr_sequencia_p bigint, ie_destino_dieta_p text, nm_usuario_p text, cd_dieta_acomp_p bigint ) AS $body$
DECLARE


ie_parametro_w		varchar(1);
nr_atendimento_w	bigint;
ie_lib_dieta_w		varchar(15);
qt_dieta_acomp_w	smallint := 0;
qt_dieta_w		smallint := 0;
cd_refei_pac_w		varchar(3);
dt_dieta_w		timestamp;
ie_copia_obs_w		varchar(1);
ie_apresenta_mensagem_w	varchar(1);
ie_regra_ref_lib_w	varchar(1);


BEGIN

ie_parametro_w := obter_param_usuario(1000, 4, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_parametro_w);
ie_copia_obs_w := obter_param_usuario(1000, 32, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_copia_obs_w);
ie_apresenta_mensagem_w := obter_param_usuario(1000, 113, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_apresenta_mensagem_w);

select	max(nr_atendimento)
into STRICT	nr_atendimento_w
from	mapa_dieta
where	nr_sequencia 	= nr_sequencia_p;

ie_regra_ref_lib_w := Obter_se_refeicao_lib_acomp(nr_atendimento_w);

if (ie_parametro_w = 'S') and (ie_destino_dieta_p = 'A') then
	begin

	select	coalesce(max(dt_dieta),clock_timestamp())
	into STRICT	dt_dieta_w
	from	mapa_dieta
	where	nr_sequencia	= nr_sequencia_p;

	begin
	select	max(ie_lib_dieta),
		max(qt_dieta_acomp)
	into STRICT	ie_lib_dieta_w,
		qt_dieta_acomp_w
	from	atend_categoria_convenio
	where	nr_atendimento	= nr_atendimento_w
	and	dt_inicio_vigencia = (	SELECT	max(dt_inicio_vigencia)
					from	atend_categoria_convenio
					where	nr_atendimento = nr_atendimento_w);
	exception
		when others then
			if (ie_apresenta_mensagem_w = 'S') then
				--Paciente não possui acompanhantes para dieta informados na entrada única !
				CALL Wheb_mensagem_pck.exibir_mensagem_abort(206700);
			else
				CALL gravar_log_tasy(3241, wheb_mensagem_pck.get_texto(801954) || ' ' || wheb_mensagem_pck.get_texto(308034) || ': ' || nr_atendimento_w, nm_usuario_p);
			end if;
	end;

	select	max(cd_refeicao)
	into STRICT	cd_refei_pac_w
	from	mapa_dieta
	where	nr_sequencia		= nr_sequencia_p
	and	ie_destino_dieta	= 'P';

	begin
	select	count(*)
	into STRICT	qt_dieta_w
	from	mapa_dieta
	where	nr_atendimento		= nr_atendimento_w
	and	ie_destino_dieta	= 'A'
	and	((cd_refeicao		= cd_refei_pac_w) or (ie_lib_dieta_w = 'S'))
	and	trunc(dt_dieta,'dd') 	= trunc(dt_dieta_w,'dd');
	exception
		when no_data_found then
			qt_dieta_w 	:= 0;
	end;

	end;
end if;

if	(((ie_lib_dieta_w = 'T' AND qt_dieta_w < qt_dieta_acomp_w) or
	  ((ie_lib_dieta_w = 'C') and (cd_refei_pac_w = 'D') and (qt_dieta_w < qt_dieta_acomp_w)) or
	  (ie_lib_dieta_w = 'B' AND cd_refei_pac_w = 'A') or
	  (ie_lib_dieta_w = 'E' AND cd_refei_pac_w = 'J') or
	  ((ie_lib_dieta_w = 'G') and (cd_refei_pac_w = 'D') and (cd_refei_pac_w = 'J')) or
	  ((ie_lib_dieta_w = 'L') and ((cd_refei_pac_w = 'D') or (cd_refei_pac_w = 'A') or (cd_refei_pac_w = 'J')) and (qt_dieta_w < qt_dieta_acomp_w)) or
	  ((ie_lib_dieta_w = 'A') and ((cd_refei_pac_w = 'A') or (cd_refei_pac_w = 'J')) and (qt_dieta_w < qt_dieta_acomp_w)) or
	  ((ie_lib_dieta_w = 'D') and ((cd_refei_pac_w = 'D') or (cd_refei_pac_w = 'L') or (cd_refei_pac_w = 'C')) and (qt_dieta_w < qt_dieta_acomp_w)) or
	  (ie_lib_dieta_w = 'S' AND qt_dieta_w < qt_dieta_acomp_w) or (ie_parametro_w = 'N') or
	  (ie_parametro_w = 'S' AND ie_destino_dieta_p = 'P')) and
	((ie_regra_ref_lib_w = 'S') or (ie_destino_dieta_p = 'P'))) then
	begin
	insert into mapa_dieta(
		nr_sequencia,
		cd_pessoa_fisica,
		dt_dieta,
		cd_refeicao,
		ie_destino_dieta,
		ie_status,
		dt_atualizacao,
		nm_usuario,
		cd_setor_atendimento,
		cd_unidade_basica,
		cd_unidade_compl,
		cd_dieta,
		ds_observacao,
		nr_atendimento,
		qt_parametro,
		ds_observacao_tec,
		nm_usuario_nrec,
		dt_atualizacao_nrec)
	SELECT	nextval('mapa_dieta_seq'),
		cd_pessoa_fisica,
		dt_dieta,
		cd_refeicao,
		ie_destino_dieta_p,
		ie_status,
		clock_timestamp(),
		nm_usuario_p,
		cd_setor_atendimento,
		cd_unidade_basica,
		cd_unidade_compl,
		CASE WHEN ie_destino_dieta_p='A' THEN CASE WHEN cd_dieta_acomp_p=0 THEN cd_dieta  ELSE cd_dieta_acomp_p END   ELSE cd_dieta END ,
		CASE WHEN ie_destino_dieta_p='A' THEN CASE WHEN ie_copia_obs_w='S' THEN ds_observacao  ELSE '' END   ELSE ds_observacao END ,
		nr_atendimento,
		qt_parametro,
		CASE WHEN ie_destino_dieta_p='A' THEN ''  ELSE ds_observacao_tec END ,
		nm_usuario_p,
		clock_timestamp()
	from	mapa_dieta
	where	nr_sequencia = nr_sequencia_p;
	end;
else
	if (ie_apresenta_mensagem_w = 'S') then
		--Dieta não duplicada! Verificar as dietas liberadas para os acompanhantes na entrada única. Atendimento: #@NR_ATENDIMENTO#@
		CALL wheb_mensagem_pck.exibir_mensagem_abort(206697,'NR_ATENDIMENTO=' || nr_atendimento_w);
	else
		CALL gravar_log_tasy(3241, wheb_mensagem_pck.get_texto(801959, 'NR_ATENDIMENTO='||nr_atendimento_w), nm_usuario_p);
		
		
	end if;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE duplicar_dieta ( nr_sequencia_p bigint, ie_destino_dieta_p text, nm_usuario_p text, cd_dieta_acomp_p bigint ) FROM PUBLIC;

