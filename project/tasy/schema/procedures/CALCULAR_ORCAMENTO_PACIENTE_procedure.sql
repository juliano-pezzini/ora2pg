-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE calcular_orcamento_paciente ( nr_seq_orcamento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


cd_convenio_w			integer;
qt_pontos_w			preco_amb.qt_pontuacao%type;
cd_categoria_w			varchar(10);
cd_medico_w			varchar(10);
IE_GLOSA_w			varchar(1);
cd_estabelecimento_w		smallint;
dt_orcamento_w			timestamp;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
ie_classificacao_w		varchar(01);
cd_material_w			integer;
vl_procedimento_w		double precision := 0;
vl_custo_operacional_w		double precision := 0;
vl_anestesista_w		double precision := 0;
vl_medico_w			double precision := 0;
vl_auxiliares_w			double precision := 0;
vl_materiais_w			double precision := 0;
vl_pto_procedimento_w		double precision := 0;
vl_pto_custo_operac_w		double precision := 0;
vl_pto_anestesista_w		double precision := 0;
vl_pto_medico_w			double precision := 0;
vl_pto_auxiliares_w		double precision := 0;
vl_pto_materiais_w		double precision := 0;
qt_porte_anestesico_w		double precision := 0;
cd_edicao_amb_w			bigint := 0;
vl_material_w			double precision := 0;
dt_ult_vigencia_w		timestamp;
cd_tab_preco_mat_w		bigint;
ie_origem_preco_w		bigint;
qt_procedimento_w		double precision;
qt_material_w			double precision;
PR_GLOSA_w			double precision;
vl_proced_glosa_w		orcamento_paciente_proc.vl_proced_glosa%type;
vl_mat_glosa_w			orcamento_paciente_mat.vl_mat_glosa%type;
vl_glosa_w			double precision;
pr_calculo_w			double precision;
IE_CALCULO_VALOR_W		varchar(10);
TX_AJUSTE_w			double precision;
TX_AJUSTE_CUSTO_OPER_w		double precision;
TX_AJUSTE_MEDICO_w		double precision;
TX_AJUSTE_partic_w		double precision;
TX_AJUSTE_FILME_w		double precision;
VL_NEGOCIADO_w			double precision;
IE_PRECO_INFORMADO_w		varchar(10);
CD_PROCEDIMENTO_ESP_w		bigint;
NR_SEQ_REGRA_PRECO_w		bigint;
CD_EDICAO_AJUSTE_w		bigint;
VL_MEDICO_AJUSTE_W		double precision;
VL_CUSTO_OPERACIONAL_AJUSTE_W	double precision := 0;
QT_FILME_w			double precision;
NR_AUXILIARES_w			bigint;
QT_PORTE_ANESTESICO_AJUSTE_W	double precision := 0;
vl_filme_w			double precision;
cd_tipo_acomodacao_w		bigint;
vl_neutro_w			varchar(100);
cd_tabela_preco_w		bigint;
nr_seq_item_w			bigint;
nr_seq_proc_interno_w		bigint;
cd_usuario_convenio_w		varchar(40);
cd_plano_w			varchar(20);
ie_clinica_w			integer;
cd_empresa_ref_w		bigint;
cd_motivo_exc_conta_w		bigint;
ie_via_acesso_w			varchar(1);
ie_calcula_tx_via_acesso_w	varchar(01) := 'N';
ie_sexo_w			varchar(01);
ie_valor_informado_w		varchar(01);
ie_valor_inf_preco_w		varchar(01);
ie_autor_particular_w		varchar(1);
cd_convenio_glosa_w		integer;
cd_categoria_glosa_w		varchar(10);
nr_seq_ajuste_proc_w		bigint;
cd_tabela_custo_w		integer;
ie_apuracao_custo_w		varchar(10);
vl_custo_w			double precision;
vl_custo_unitario_w		double precision;
vl_custo_variavel_w		double precision;
vl_custo_dir_apoio_w		double precision;
vl_custo_mao_obra_w		double precision;
vl_custo_direto_w		double precision;
vl_custo_indireto_w		double precision;
vl_despesa_w			double precision;
vl_custo_hm_w			double precision;
vl_custo_sadt_w			double precision;
pr_imposto_w			double precision	:= 0;
qt_resumo_w			double precision;
qt_dia_w			integer;
dt_ref_custo_w			timestamp;

tx_proc_resultante_w		double precision	:= 0;
ie_criterio_taxa_w		smallint	:= 0;
ie_regra_filme_w		varchar(01)	:= 'P';
nr_seq_proc_princ_w		bigint;

cd_setor_custo_opme_w		bigint;
cd_grupo_opme_param_w		bigint;
cd_grupo_opme_item_w		bigint;
cd_setor_w			bigint;
nr_seq_exame_w			bigint;
tx_procedimento_w		double precision;
ie_pacote_original_w		varchar(1);
pr_orc_pacote_w			double precision;
nr_seq_regra_lanc_w		bigint;
ie_tipo_atendimento_w		smallint;
nr_atendimento_w		bigint;
nr_seq_bras_preco_w		bigint;
nr_seq_mat_bras_w		bigint;
nr_seq_conv_bras_w		bigint;
nr_seq_conv_simpro_w		bigint;
nr_seq_mat_simpro_w		bigint;
nr_seq_simpro_preco_w		bigint;
vl_preco_calculado_w		double precision;
nr_seq_ajuste_proc_def_w	bigint;
nr_seq_ajuste_mat_w		bigint;
qt_idade_w			bigint;
ie_orcamento_simplificado_w	varchar(1) := 'N';
ie_visualiza_participantes_w	varchar(1) := 'N';
qt_regra_orc_w			bigint;
cd_procedimento_tuss_w		bigint;
ie_regra_arred_IPE_w		varchar(1) := 'N';

pr_calculo_mat_w		orcamento_paciente.pr_calculo_mat%type;
pr_calculo_proc_w		orcamento_paciente.pr_calculo_proc%type;

nr_seq_marca_w			orcamento_paciente_mat.nr_seq_marca%type;
ie_regra_arredondamento_tx_w	parametro_faturamento.ie_regra_arredondamento_tx%type;
ie_ordem_arred_serv_w		parametro_faturamento.ie_ordem_arred_serv%type;
ie_generate_quotation_tx_w     	parametro_faturamento.ie_generate_taxes%type;
ie_tipo_rounded_w		convenio_estabelecimento.ie_arredondamento%type;
nr_seq_classif_atend_w		atendimento_paciente.nr_seq_classificacao%type;
ie_desconto_pacote_w		varchar(1);
cd_setor_atendimento_w		orcamento_paciente_proc.cd_setor_atendimento%type;

cd_proc_referencia_w 		regra_ajuste_proc.cd_proc_referencia%type;
ie_origem_proc_refer_w		regra_ajuste_proc.ie_origem_proc_refer%type;
qt_reg_ajuste_item_ref_w 	bigint;
qt_proc_ref_w			bigint;
qt_procedimento_ww		orcamento_paciente_proc.qt_procedimento%type := null;
nr_seq_regra_ajuste_mat_w	regra_ajuste_material.nr_sequencia%type;
ds_observacao_w			varchar(4000);
vl_servico_w			orcamento_paciente_proc.vl_procedimento%type;

ie_regra_plano_w		orcamento_paciente_proc.ie_regra_plano%type;
cd_convenio_particular_w	parametro_faturamento.cd_convenio_partic%type;
cd_categoria_particular_w	parametro_faturamento.cd_categoria_partic%type;
ie_regra_w			orcamento_paciente_proc.ie_regra_plano%type;
nr_seq_regra_retorno_w		regra_Convenio_Plano.nr_sequencia%type;
cd_pessoa_fisica_w		orcamento_paciente.cd_pessoa_fisica%type;
cd_proced_convertido_w		proc_interno_conv.cd_procedimento%type;
ie_origem_proced_convert_w	proc_interno_conv.ie_origem_proced%type;
cd_exame_w			exame_laboratorio.cd_exame%type;
ds_erro_w			varchar(2000)	:= null;
ie_bloqueia_agenda_w		varchar(2000)	:= null;
ie_autorizacao_w		orcamento_paciente_proc.ie_autorizacao%type;
pr_desconto_w       		orcamento_paciente_proc.pr_desconto%type;
vl_desconto_w       		orcamento_paciente_proc.vl_desconto%type;
ie_resp_autor_w			regra_convenio_plano.ie_resp_autor%type;

c10 CURSOR FOR
SELECT	a.cd_procedimento,
	a.ie_origem_proced,
	b.ie_classificacao,
	a.qt_procedimento,
	a.cd_medico,
	a.nr_sequencia,
	a.nr_seq_proc_interno,
	a.ie_via_acesso,
	a.nr_seq_proc_princ,
	a.nr_seq_exame,
	a.tx_procedimento,
	a.ie_valor_informado,
	a.cd_setor_atendimento,
	a.ie_regra_plano,
	a.pr_desconto,
	a.vl_desconto
from	procedimento b,
	orcamento_paciente_proc a
where	a.cd_procedimento		= b.cd_procedimento
and	a.ie_origem_proced		= b.ie_origem_proced
and 	a.nr_sequencia_orcamento	= nr_seq_orcamento_p
and 	coalesce(a.qt_procedimento,0) <> 0
and	coalesce(ie_valor_informado,'N')	= 'N';

c20 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.cd_material,
		a.qt_material,
		a.pr_orc_pacote,
		a.nr_seq_regra_lanc,
		a.nr_seq_marca,
		a.cd_setor_atendimento,
		a.ie_regra_plano
	from	orcamento_paciente_mat a
	where	a.nr_sequencia_orcamento	= nr_seq_orcamento_p
	and	coalesce(a.qt_material,0) <> 0
	and	coalesce(ie_valor_informado,'N')	= 'N';

c30 CURSOR FOR
	SELECT	a.nr_sequencia,
		a.tx_procedimento
	from	procedimento b,
		orcamento_paciente_proc a
	where	a.cd_procedimento		= b.cd_procedimento
	and	a.ie_origem_proced		= b.ie_origem_proced
	and 	a.nr_sequencia_orcamento	= nr_seq_orcamento_p
	and	coalesce(ie_valor_informado,'N')	= 'S'
	and 	coalesce(ie_pacote,'N')		= 'S'
	and 	coalesce(a.tx_procedimento,100)	<> 100;

-- Cursor para recalcular o IVA dos pacotes que tiverem desconto gerado
C40 CURSOR FOR
	SELECT	a.nr_sequencia
	from	procedimento b,
		orcamento_paciente_proc a
	where	a.cd_procedimento		= b.cd_procedimento
	and	a.ie_origem_proced		= b.ie_origem_proced
	and 	a.nr_sequencia_orcamento	= nr_seq_orcamento_p
	and	coalesce(ie_valor_informado,'N')	= 'S'
	and 	coalesce(ie_pacote,'N')		= 'S'
	and	coalesce(a.vl_desconto,0)		<> 0;

-- Cursor para recalcular o IVA dos itens com valor informado (menos desconto)
C50 CURSOR FOR
	SELECT	a.nr_sequencia
	from	procedimento b,
		orcamento_paciente_proc a
	where	a.cd_procedimento		= b.cd_procedimento
	and	a.ie_origem_proced		= b.ie_origem_proced
	and 	a.nr_sequencia_orcamento	= nr_seq_orcamento_p
	and	coalesce(ie_valor_informado,'N')	= 'S'
	and	coalesce(a.vl_desconto,0)		= 0;

C60 CURSOR FOR
	SELECT	a.nr_sequencia
	from	procedimento b,
		orcamento_paciente_proc a
	where	a.cd_procedimento		= b.cd_procedimento
	and	a.ie_origem_proced		= b.ie_origem_proced
	and 	a.nr_sequencia_orcamento	= nr_seq_orcamento_p
	and	coalesce(ie_valor_informado,'N')	= 'S'
	and	coalesce(a.vl_desconto,0)		> 0;

REGRAS_ITEM_REF_PROC CURSOR FOR
	SELECT  cd_material,
		cd_procedimento,
		ie_origem_proced
	from	regra_ajuste_item_ref
	where   nr_seq_regra_ajuste_proc = nr_seq_ajuste_proc_w
	and	ie_situacao = 'A';

REGRAS_ITEM_REF_MAT CURSOR FOR
	SELECT  cd_material,
		cd_procedimento,
		ie_origem_proced
	from	regra_ajuste_item_ref
	where   nr_seq_regra_ajuste_mat = nr_seq_regra_ajuste_mat_w
	and	ie_situacao = 'A';

BEGIN

select	coalesce(max(obter_valor_param_usuario(106, 6, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p)),'N')
into STRICT	ie_calcula_tx_via_acesso_w
;

select	somente_numero(coalesce(max(obter_valor_param_usuario(106, 23, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p)),'0'))
into STRICT	cd_grupo_opme_param_w
;

select	coalesce(max(obter_valor_param_usuario(106, 140, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p)),'N')
into STRICT	ie_orcamento_simplificado_w
;

select	coalesce(max(obter_valor_param_usuario(106, 144, Obter_Perfil_Ativo, nm_usuario_p, cd_estabelecimento_p)),'N')
into STRICT	ie_visualiza_participantes_w
;

select	coalesce(max(coalesce(vl_parametro, vl_parametro_padrao)),'N')
into STRICT 	ie_desconto_pacote_w
from 	funcao_parametro
where 	cd_funcao = 106
and 	nr_sequencia = 115;

select	cd_convenio,
	cd_categoria,
	cd_estabelecimento,
	dt_orcamento,
	IE_CALCULO_VALOR,
	PR_CALCULO,
	cd_tipo_acomodacao,
	cd_plano,
	cd_setor_atendimento,
	ie_tipo_atendimento,
	nr_atendimento,
	pr_calculo_mat,
	pr_calculo_proc,
	CASE WHEN ie_orcamento_simplificado_w='N' THEN  null  ELSE ie_sexo END ,
	CASE WHEN ie_orcamento_simplificado_w='N' THEN  null  ELSE PERFORM obter_idade(coalesce(dt_nascimento,clock_timestamp()), clock_timestamp(), 'A') END ,
	ie_clinica,
	nr_seq_classificacao,
	cd_pessoa_fisica
into STRICT	cd_convenio_w,
	cd_categoria_w,
	cd_estabelecimento_w,
	dt_orcamento_w,
	IE_CALCULO_VALOR_W,
	PR_CALCULO_W,
	cd_tipo_acomodacao_w,
	cd_plano_w,
	cd_setor_custo_opme_w,
	ie_tipo_atendimento_w,
	nr_atendimento_w,
	pr_calculo_mat_w,
	pr_calculo_proc_w,
	ie_sexo_w,
	qt_idade_w,
	ie_clinica_w,
	nr_seq_classif_atend_w,
	cd_pessoa_fisica_w
from	orcamento_paciente
where	nr_sequencia_orcamento = nr_seq_orcamento_p;

select 	coalesce(max(ie_generate_taxes),'N')
into STRICT	ie_generate_quotation_tx_w
from 	parametro_faturamento
where 	cd_estabelecimento = cd_estabelecimento_w;

if (coalesce(ie_tipo_atendimento_w,0) = 0) and (coalesce(nr_atendimento_w,0) > 0) then
	select 	max(ie_tipo_atendimento)
	into STRICT	ie_tipo_atendimento_w
	from 	atendimento_paciente
	where 	nr_atendimento = nr_atendimento_w;
end if;

if (coalesce(ie_clinica_w,0) = 0) and (coalesce(nr_atendimento_w,0) > 0) then
	select 	max(ie_clinica)
	into STRICT	ie_clinica_w
	from 	atendimento_paciente
	where 	nr_atendimento = nr_atendimento_w;
end if;

if (coalesce(nr_seq_classif_atend_w,0) = 0) and (coalesce(nr_atendimento_w,0) > 0) then
	select	max(nr_seq_classificacao)
	into STRICT	nr_seq_classif_atend_w
	from	atendimento_paciente
	where	nr_atendimento = nr_atendimento_w;
end if;

/*if	(IE_CALCULO_VALOR_w = 'P') and (PR_CALCULO_w < 0 and PR_CALCULO_w > 0) then
	--O percentual de c?ulo deve estar entre 0 e 100!

	Wheb_mensagem_pck.exibir_mensagem_abort(186254);
end if;*/
select	max(cd_tabela_venda),
	coalesce(max(qt_dia_custo_compra), 90),
	max(dt_referencia)
into STRICT	cd_tabela_custo_w,
	qt_dia_w,
	dt_ref_custo_w
from	parametro_custo
where	cd_estabelecimento	= cd_estabelecimento_w;

open	c10;
	loop
	fetch	c10 into
		cd_procedimento_w,
		ie_origem_proced_w,
		ie_classificacao_w,
		qt_procedimento_w,
		cd_medico_w,
		nr_seq_item_w,
		nr_seq_proc_interno_w,
		ie_via_acesso_w,
		nr_seq_proc_princ_w,
		nr_seq_exame_w,
		tx_procedimento_w,
		ie_valor_informado_w,
		cd_setor_atendimento_w,
		ie_regra_plano_w,
		pr_desconto_w,
		vl_desconto_w;
	EXIT WHEN NOT FOUND; /* apply on c10 */
		begin
		vl_procedimento_w	:= 0;
		vl_custo_operacional_w	:= 0;
		vl_anestesista_w	:= 0;
		vl_medico_w		:= 0;
		vl_auxiliares_w		:= 0;
		vl_materiais_w		:= 0;
		vl_pto_procedimento_w	:= 0;
		vl_pto_custo_operac_w	:= 0;
		vl_pto_anestesista_w	:= 0;
		vl_pto_medico_w		:= 0;
		vl_pto_auxiliares_w	:= 0;
		vl_pto_materiais_w	:= 0;
		qt_porte_anestesico_w	:= 0;
		ie_glosa_w		:= 'X';
		qt_procedimento_ww	:= null;
		qt_proc_ref_w 		:= 0;
		nr_seq_ajuste_proc_w	:= null;
		cd_proc_referencia_w	:= null;
		ie_origem_proc_refer_w	:= null;
		qt_reg_ajuste_item_ref_w := 0;
		ds_observacao_w		 := null;
		cd_convenio_particular_w	:= null;
		cd_categoria_particular_w	:= null;
		ie_autorizacao_w	:= null;

		if (ie_calculo_valor_w = 'B') then
			if (coalesce(ie_regra_plano_w, 0) = 0) then
				SELECT * FROM consiste_plano_convenio(nr_atendimento_w, cd_convenio_w, cd_procedimento_w, ie_origem_proced_w, dt_orcamento_w, qt_procedimento_w, ie_tipo_atendimento_w, cd_plano_w, null, ds_erro_w, cd_setor_atendimento_w, coalesce(nr_seq_exame_w,0), ie_regra_w, null, nr_seq_regra_retorno_w, nr_seq_proc_interno_w, cd_categoria_w, cd_estabelecimento_w, null, cd_medico_w, cd_pessoa_fisica_w, ie_glosa_w, nr_seq_regra_preco_w) INTO STRICT ds_erro_w, ie_regra_w, nr_seq_regra_retorno_w, ie_glosa_w, nr_seq_regra_preco_w;

				if (cd_plano_w IS NOT NULL AND cd_plano_w::text <> '') then
					ie_autorizacao_w	:= 'L';

					if (ie_regra_w in (1,2,5,8))then
						ie_autorizacao_w	:= 'B';
					end if;

					if (ie_regra_w in (3,6,7))then
						select 	coalesce(max(ie_resp_autor),'H')
						into STRICT	ie_resp_autor_w
						from 	regra_convenio_plano
						where 	nr_sequencia = nr_seq_regra_retorno_w;
						if (ie_resp_autor_w = 'H') then
							ie_autorizacao_w 	:= 'PAH'; --Pendente de autoriza? (Guia Hospital)
						end if;
						if (ie_resp_autor_w = 'P') then
							ie_autorizacao_w 	:= 'PAP'; --Pendente de autoriza? (Guia Paciente)
						end if;
					end if;
				end if;
			else
				ie_regra_w := ie_regra_plano_w;
			end if;

			if	((ie_regra_w in (1,2,5,8)) or (coalesce(ie_regra_w::text, '') = '')) then

				SELECT * FROM obter_convenio_particular(cd_estabelecimento_p, cd_convenio_particular_w, cd_categoria_particular_w) INTO STRICT cd_convenio_particular_w, cd_categoria_particular_w;

				if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then
					SELECT * FROM obter_proc_tab_interno_conv(nr_seq_proc_interno_w, cd_estabelecimento_w, coalesce(cd_convenio_particular_w, cd_convenio_w), coalesce(cd_categoria_particular_w, cd_categoria_w), cd_plano_w, cd_setor_atendimento_w, cd_proced_convertido_w, ie_origem_proced_convert_w, cd_setor_atendimento_w, dt_orcamento_w, cd_tipo_acomodacao_w, null, null, null, null, null, null, null) INTO STRICT cd_proced_convertido_w, ie_origem_proced_convert_w;

					cd_procedimento_w	:= cd_proced_convertido_w;
					ie_origem_proced_w	:= ie_origem_proced_convert_w;

				elsif (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') then
					select	max(cd_exame)
					into STRICT	cd_exame_w
					from 	exame_laboratorio
					where 	nr_seq_exame = nr_seq_exame_w;

					SELECT * FROM Obter_Proc_Exame_Laborat(cd_exame_w, coalesce(cd_convenio_particular_w, cd_convenio_w), cd_estabelecimento_p, coalesce(cd_categoria_particular_w, cd_categoria_w), cd_procedimento_w, ie_origem_proced_w, nr_seq_exame_w, 0) INTO STRICT cd_procedimento_w, ie_origem_proced_w, nr_seq_exame_w;

				end if;

			end if;

		end if;

		/* define regras para preco do procedimento */

		SELECT * FROM obter_regra_taxa_exame_orc(
			cd_estabelecimento_w, coalesce(cd_convenio_particular_w, cd_convenio_w), coalesce(cd_categoria_particular_w, cd_categoria_w), cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_princ_w, nr_seq_proc_interno_w, ie_criterio_taxa_w, tx_proc_resultante_w, ie_regra_filme_w) INTO STRICT ie_criterio_taxa_w, tx_proc_resultante_w, ie_regra_filme_w;
			/*
			ie_criterio_taxa_w pode ser
				0 - nao utiliza indice
				1 - valor do exame = valor do proprio procedimento * indice
				2 - valor do exame = valor do procedimento principal * indice
				3 - valor do exame = valor do medico * indice
				4 - valor do exame = (valor exame + filme) * ?ice
			*/
		if (ie_classificacao_w = '1') then
			begin

			SELECT * FROM define_preco_procedimento(						
						cd_estabelecimento_w, 				-- cd_estabelecimento_p			number,
						coalesce(cd_convenio_particular_w, cd_convenio_w),    -- cd_convenio_p			number,
						coalesce(cd_categoria_particular_w, cd_categoria_w), 	-- cd_categoria_p			varchar2,
						dt_orcamento_w,                                  -- dt_conta_p				date,
						cd_procedimento_w,                               -- cd_procedimento_p			number,
						coalesce(cd_tipo_acomodacao_w,0),                     -- cd_tipo_acomodacao_p			number,
						coalesce(ie_tipo_atendimento_w,0),                    -- ie_tipo_atendimento_p		number,
						cd_setor_atendimento_w,                          -- cd_setor_atendimento_p		number,
						cd_medico_w,                                     -- cd_medico_p				varchar2,
						null,                                            -- cd_funcao_medico_p			number,
						qt_idade_w,                                      -- qt_idade_p				number,
						nr_seq_exame_w,                                  -- nr_seq_exame_lab_p			number,
						nr_seq_proc_interno_w,                           -- nr_seq_proc_interno_p		number,
						cd_usuario_convenio_w,                           -- cd_usuario_convenio_p		varchar2,
						cd_plano_w,                                      -- cd_plano_p				varchar2,
						ie_clinica_w,                                    -- ie_clinica_p				number,
						cd_empresa_ref_w,                                -- cd_empresa_ref_p			number,
						ie_sexo_w,                                       -- ie_sexo_p				varchar2,
						vl_procedimento_w,                               -- vl_procedimento_p		out	number,
						vl_custo_operacional_w,                          -- vl_custo_operacional_p	out 	number,
						vl_anestesista_w,                                -- vl_anestesista_p		out 	number,
						vl_medico_w,                                     -- vl_medico_p			out	number,
						vl_auxiliares_w,                                 -- vl_auxiliares_p		out	number,
						vl_materiais_w,                                  -- vl_materiais_p		out	number,
						vl_pto_procedimento_w,                           -- vl_pto_procedimento_p	out 	number,
						vl_pto_custo_operac_w,                           -- vl_pto_custo_operac_p	out 	number,
						vl_pto_anestesista_w,                            -- vl_pto_anestesista_p		out 	number,
						vl_pto_medico_w,                                 -- vl_pto_medico_p		out 	number,
						vl_pto_auxiliares_w,                             -- vl_pto_auxiliares_p		out 	number,
						vl_pto_materiais_w,                              -- vl_pto_materiais_p		out 	number,
						qt_porte_anestesico_w,                           -- qt_porte_anestesico_p	out 	number,
						qt_pontos_w,                                     -- qt_pontos_p			out	number,
						cd_edicao_amb_w,                                 -- cd_edicao_amb_p		out 	number,
						ie_valor_inf_preco_w,                            -- ie_valor_informado_p		out	varchar2,
						nr_seq_ajuste_proc_def_w,                        -- nr_seq_ajuste_proc_p		out	number,
						0,                                               -- nr_sequencia_p			number,
						null,                                            -- ie_atend_retorno_p			varchar2,
						0,                                               -- qt_dias_internacao_p			number,
						null,                                            -- ie_video_p				varchar2,
						null,                                            -- ie_beira_leito_p			varchar2,
						NULL,                                            -- ie_spect_p				varchar2,
						NULL,                                            -- cd_cgc_prestador_p			varchar2,
						null,                                            -- cd_equipamento_p			number,
						null,                                            -- nr_seq_tipo_acidente_p  		number,
						null,                                            -- cd_especialidade_medica_p		number,
						null,                                            -- cd_procedencia_p			varchar2,
						null,                                            -- nr_seq_cobertura_p			number,
						null,                                            -- nr_seq_classif_atend_p		number,
						null,                                            -- ie_carater_inter_sus_p		varchar2,
						null,                                            -- cd_dependente_p			number,
						null,                                            -- nr_seq_grupo_rec_p			number,
						ie_origem_proced_w,                              -- ie_origem_proced_p			number	 default null
						null,                                            -- nr_seq_origem_p			number,
						null,                                            -- nr_seq_classif_medico_p		number,
						ie_visualiza_participantes_w) INTO STRICT 
						vl_procedimento_w, 
						vl_custo_operacional_w, 
						vl_anestesista_w, 
						vl_medico_w, 
						vl_auxiliares_w, 
						vl_materiais_w, 
						vl_pto_procedimento_w, 
						vl_pto_custo_operac_w, 
						vl_pto_anestesista_w, 
						vl_pto_medico_w, 
						vl_pto_auxiliares_w, 
						vl_pto_materiais_w, 
						qt_porte_anestesico_w, 
						qt_pontos_w, 
						cd_edicao_amb_w, 
						ie_valor_inf_preco_w, 
						nr_seq_ajuste_proc_def_w;                  -- ie_calcular_anest_p			varchar2 default null
			if (ie_criterio_taxa_w = 1) then
				vl_procedimento_w	:= (vl_procedimento_w 		* tx_proc_resultante_w);
				vl_medico_w		:= (vl_medico_w			* tx_proc_resultante_w);
				vl_anestesista_w	:= (vl_anestesista_w		* tx_proc_resultante_w);
				select CASE WHEN ie_regra_filme_w='P' THEN  vl_materiais_w * tx_proc_resultante_w WHEN ie_regra_filme_w='T' THEN  vl_materiais_w WHEN ie_regra_filme_w='Z' THEN  0 END
				into STRICT	vl_materiais_w
				;
				vl_auxiliares_w		:= (vl_auxiliares_w		* tx_proc_resultante_w);
				vl_custo_operacional_w	:= (vl_custo_operacional_w	* tx_proc_resultante_w);
			end if;

			if (ie_criterio_taxa_w = 2) then
				select (vl_medico 	* tx_proc_resultante_w / qt_procedimento),
					(vl_anestesista * tx_proc_resultante_w / qt_procedimento),
					(CASE WHEN ie_regra_filme_w='Z' THEN  0 WHEN ie_regra_filme_w='T' THEN  vl_filme  ELSE vl_filme * tx_proc_resultante_w END  / qt_procedimento),
					(vl_auxiliares 	* tx_proc_resultante_w / qt_procedimento),
					(vl_custo_operacional * tx_proc_resultante_w / qt_procedimento)
				into STRICT	vl_medico_w,
					vl_anestesista_w,
					vl_materiais_w,
					vl_auxiliares_w,
					vl_custo_operacional_w
				from	orcamento_paciente_proc
				where	nr_sequencia = nr_seq_proc_princ_w;

				vl_procedimento_w:= (vl_medico_w + vl_anestesista_w + vl_materiais_w + vl_auxiliares_w + vl_custo_operacional_w);
			end if;

			if (ie_criterio_taxa_w = 3) then

				select (vl_medico * tx_proc_resultante_w / qt_procedimento),
					(vl_medico * tx_proc_resultante_w / qt_procedimento),
					0,
					0
				into STRICT	vl_procedimento_w,
					vl_medico_w,
					vl_anestesista_w,
					vl_auxiliares_w
				from	orcamento_paciente_proc
				where	nr_sequencia	= nr_seq_proc_princ_w;

			end if;

			if (ie_criterio_taxa_w = 4) then
				select (vl_medico + vl_filme) * tx_proc_resultante_w
				into STRICT	vl_medico_w
				from	orcamento_paciente_proc
				where	nr_sequencia	= nr_seq_proc_princ_w;

				vl_procedimento_w:= vl_medico_w;

			end if;

			end;

		else
			begin
			SELECT * FROM define_preco_servico(
				cd_estabelecimento_w, coalesce(cd_convenio_particular_w, cd_convenio_w), coalesce(cd_categoria_particular_w, cd_categoria_w), dt_orcamento_w, cd_procedimento_w, cd_setor_atendimento_w, coalesce(ie_tipo_atendimento_w,0), coalesce(cd_tipo_acomodacao_w,0), cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, ie_sexo_w, vl_procedimento_w, nr_seq_ajuste_proc_def_w, null, 0, qt_idade_w, nr_seq_proc_interno_w, null, null, null, null, null, null, null, null, null, cd_medico_w) INTO STRICT vl_procedimento_w, nr_seq_ajuste_proc_def_w;
			end;
		end if;

		if (ie_regra_w in (3,4,6,7)) then
			vl_procedimento_w	:= 0;
			vl_custo_operacional_w	:= 0;
			vl_anestesista_w	:= 0;
			vl_medico_w	:= 0;
			vl_auxiliares_w := 0;
			vl_materiais_w	:= 0;
			vl_custo_w	:= 0;
		end if;

		-- In?o da rotina de arredondamento
		begin
		select 	coalesce(max(ie_regra_arredondamento_tx),'N'),
			coalesce(max(ie_ordem_arred_serv),'MA')
		into STRICT	ie_regra_arredondamento_tx_w,
			ie_ordem_arred_serv_w
		from 	parametro_faturamento
		where 	cd_estabelecimento = cd_estabelecimento_W;
		exception
			when others then
				ie_regra_arredondamento_tx_w:= 'N';
		end;

		if (ie_regra_arredondamento_tx_w = 'S') then

			select	max(ie_arredondamento)
			into STRICT	ie_tipo_rounded_w
			from	convenio_estabelecimento
			where	cd_convenio	  	= coalesce(cd_convenio_particular_w, cd_convenio_w)
			and	cd_estabelecimento	= cd_estabelecimento_w;

			if (ie_tipo_rounded_w = 'R') then

				select 	obter_regra_arredondamento(coalesce(cd_convenio_particular_w, cd_convenio_w), coalesce(cd_categoria_particular_w, cd_categoria_w), cd_procedimento_w, ie_origem_proced_w, cd_estabelecimento_w,
						dt_orcamento_w, 'P', 1)
				into STRICT	ie_tipo_rounded_w
				;

				ie_regra_arred_IPE_w:= 'S';

			end if;

			if (ie_tipo_rounded_w IS NOT NULL AND ie_tipo_rounded_w::text <> '') and (ie_regra_arred_IPE_w = 'S') and (ie_valor_informado_w = 'N') then

				if (coalesce(ie_ordem_arred_serv_w,'MA') = 'MA') then /* Multiplicar pela qtde e depois aplicar o arredondamento */
					vl_custo_operacional_w		:= (vl_custo_operacional_w * qt_procedimento_w);
					vl_anestesista_w		:= (vl_anestesista_w * qt_procedimento_w);
					vl_medico_w			:= (vl_medico_w * qt_procedimento_w);
					vl_materiais_w			:= (vl_materiais_w * qt_procedimento_w);
					vl_auxiliares_w			:= (vl_auxiliares_w * qt_procedimento_w);
					vl_procedimento_w		:= (vl_procedimento_w * qt_procedimento_w);

					vl_procedimento_w := arredondamento(vl_procedimento_w, 2, ie_tipo_rounded_w);
					vl_custo_operacional_w := arredondamento(vl_custo_operacional_w, 2, ie_tipo_rounded_w);
					vl_anestesista_w := arredondamento(vl_anestesista_w, 2, ie_tipo_rounded_w);
					vl_medico_w := arredondamento(vl_medico_w, 2, ie_tipo_rounded_w);
					vl_auxiliares_w := arredondamento(vl_auxiliares_w, 2, ie_tipo_rounded_w);
					vl_materiais_w := arredondamento(vl_materiais_w, 2, ie_tipo_rounded_w);

				elsif (coalesce(ie_ordem_arred_serv_w,'MA') = 'AM') then /* Aplicar o arredondamento  e depois multiplicar pela quantidade */
					vl_procedimento_w := arredondamento(vl_procedimento_w, 2, ie_tipo_rounded_w);
					vl_custo_operacional_w := arredondamento(vl_custo_operacional_w, 2, ie_tipo_rounded_w);
					vl_anestesista_w := arredondamento(vl_anestesista_w, 2, ie_tipo_rounded_w);
					vl_medico_w := arredondamento(vl_medico_w, 2, ie_tipo_rounded_w);
					vl_auxiliares_w := arredondamento(vl_auxiliares_w, 2, ie_tipo_rounded_w);
					vl_materiais_w := arredondamento(vl_materiais_w, 2, ie_tipo_rounded_w);

					vl_custo_operacional_w		:= (vl_custo_operacional_w * qt_procedimento_w);
					vl_anestesista_w		:= (vl_anestesista_w * qt_procedimento_w);
					vl_medico_w			:= (vl_medico_w * qt_procedimento_w);
					vl_materiais_w			:= (vl_materiais_w * qt_procedimento_w);
					vl_auxiliares_w			:= (vl_auxiliares_w * qt_procedimento_w);
					vl_procedimento_w		:= (vl_procedimento_w * qt_procedimento_w);

				end if;
			else
				ie_regra_arred_IPE_w:= 'N';
			end if;

		end if;
		-- Fim da rotina de arredondamento.
		if (coalesce(ie_regra_arred_IPE_w,'N') = 'N') then
			begin
			vl_custo_operacional_w		:= (vl_custo_operacional_w * qt_procedimento_w);
			vl_anestesista_w		:= (vl_anestesista_w * qt_procedimento_w);
			vl_medico_w			:= (vl_medico_w * qt_procedimento_w);
			vl_materiais_w			:= (vl_materiais_w * qt_procedimento_w);
			vl_auxiliares_w			:= (vl_auxiliares_w * qt_procedimento_w);
			vl_procedimento_w		:= (vl_procedimento_w * qt_procedimento_w);
			end;
		end if;

		if (IE_CALCULO_VALOR_w = 'P') then
			vl_procedimento_w	:= (PR_CALCULO_w / 100) * coalesce(vl_procedimento_w,0);
		elsif (IE_CALCULO_VALOR_w = 'T') then
			vl_procedimento_w	:= (pr_calculo_proc_w / 100) * coalesce(vl_procedimento_w,0);
		else
			vl_procedimento_w	:= coalesce(vl_procedimento_w,0);
		end if;


		SELECT * FROM OBTER_REGRA_AJUSTE_PROC(cd_estabelecimento_w, coalesce(cd_convenio_particular_w, cd_convenio_w), coalesce(cd_categoria_particular_w, cd_categoria_w), CD_PROCEDIMENTO_w, IE_ORIGEM_PROCED_w, null, dt_orcamento_w, coalesce(cd_tipo_acomodacao_w,0), coalesce(ie_tipo_atendimento_w,0), cd_setor_atendimento_w, null, 0, coalesce(qt_idade_w,0), nr_seq_exame_w, nr_seq_proc_interno_w, cd_usuario_convenio_w, cd_plano_w, ie_clinica_w, cd_empresa_ref_w, ie_sexo_w, TX_AJUSTE_w, TX_AJUSTE_CUSTO_OPER_w, TX_AJUSTE_MEDICO_w, TX_AJUSTE_partic_w, TX_AJUSTE_FILME_w, VL_NEGOCIADO_w, IE_PRECO_INFORMADO_w, ie_glosa_w, CD_PROCEDIMENTO_ESP_w, nr_seq_regra_preco_w, CD_EDICAO_AJUSTE_w, VL_MEDICO_AJUSTE_W, VL_CUSTO_OPERACIONAL_AJUSTE_W, QT_FILME_W, NR_AUXILIARES_w, QT_PORTE_ANESTESICO_AJUSTE_W, PR_GLOSA_w, vl_glosa_w, cd_motivo_exc_conta_w, null, 0, ie_autor_particular_w, cd_convenio_glosa_w, cd_categoria_glosa_w, nr_seq_ajuste_proc_w, null, null, null, null, null, null, null, null, vl_filme_w, null, null, null, null, null, null, null, null, null, null) INTO STRICT TX_AJUSTE_w, TX_AJUSTE_CUSTO_OPER_w, TX_AJUSTE_MEDICO_w, TX_AJUSTE_partic_w, TX_AJUSTE_FILME_w, VL_NEGOCIADO_w, IE_PRECO_INFORMADO_w, ie_glosa_w, CD_PROCEDIMENTO_ESP_w, nr_seq_regra_preco_w, CD_EDICAO_AJUSTE_w, VL_MEDICO_AJUSTE_W, VL_CUSTO_OPERACIONAL_AJUSTE_W, QT_FILME_W, NR_AUXILIARES_w, QT_PORTE_ANESTESICO_AJUSTE_W, PR_GLOSA_w, vl_glosa_w, cd_motivo_exc_conta_w, ie_autor_particular_w, cd_convenio_glosa_w, cd_categoria_glosa_w, nr_seq_ajuste_proc_w, vl_filme_w;

		/*----------------TRATAR AS REGRAS DE AJUSTE POR ITEM REFERENCIA------------*/

		if (coalesce(nr_seq_ajuste_proc_w,0) > 0) then

			select 	coalesce(max(cd_proc_referencia),0),
				coalesce(max(ie_origem_proc_refer),1)
			into STRICT	cd_proc_referencia_w,
				ie_origem_proc_refer_w
			from 	regra_ajuste_proc
			where 	nr_sequencia = nr_seq_ajuste_proc_w;


			select	count(1)
			into STRICT	qt_reg_ajuste_item_ref_w
			from	regra_ajuste_item_ref
			where	nr_seq_regra_ajuste_proc = nr_seq_ajuste_proc_w;

			if (cd_proc_referencia_w > 0) or (qt_reg_ajuste_item_ref_w > 0) then

				if (cd_proc_referencia_w > 0) then

					select 	count(1)
					into STRICT	qt_proc_ref_w
					from 	orcamento_paciente_proc
					where 	cd_procedimento  	= cd_proc_referencia_w
					and 	ie_origem_proced 	= ie_origem_proc_refer_w
					and 	nr_sequencia_orcamento 	= nr_seq_orcamento_p
					and	nr_sequencia <> nr_seq_item_w
					and	qt_procedimento <> 0;

				else

					for regra_item in REGRAS_ITEM_REF_PROC loop
						if (coalesce(regra_item.cd_material,0) > 0) then
							select 	count(1)
							into STRICT	qt_proc_ref_w
							from 	orcamento_paciente_mat
							where 	cd_material 		= regra_item.cd_material
							and 	nr_sequencia_orcamento 	= nr_seq_orcamento_p
							and 	qt_material <> 0;

						elsif (coalesce(regra_item.cd_procedimento,0) > 0) then
							select 	count(1)
							into STRICT	qt_proc_ref_w
							from 	orcamento_paciente_proc
							where 	cd_procedimento  	= regra_item.cd_procedimento
							and 	ie_origem_proced 	= regra_item.ie_origem_proced
							and 	nr_sequencia_orcamento 	= nr_seq_orcamento_p
							and	nr_sequencia <> nr_seq_item_w
							and 	qt_procedimento <> 0;
						end if;

						if (qt_proc_ref_w > 0) then
							exit;
						end if;
					end loop;
				end if;

			end if;

			/*	O - Zerar somente se item refer?ia em conta
				N - Excluir somente se item refer?ia em conta
				J - Libera somente se item refer?ia em conta (Mover para aba itens exclu?s)*/
			if (ie_glosa_w in ('O','N','J')) then
				if (qt_proc_ref_w > 0) then
					vl_procedimento_w		:= 0;
					vl_custo_operacional_w		:= 0;
					vl_anestesista_w		:= 0;
					vl_medico_w			:= 0;
					vl_auxiliares_w			:= 0;
					vl_materiais_w			:= 0;

					if (ie_glosa_w in ('N','J')) then
						qt_procedimento_ww	:= 0; -- quando item eh "excluido"
						ds_observacao_w := '-'||obter_desc_expressao(933227)||'('||nr_seq_ajuste_proc_w||'). ';   --Quantidade zerada pela regra de ajuste
					end if;
				end if;
			end if;
		end if;
		/*----------------FIM VALIDACOES ITEM REFERENCIA-------------------- */

		if (ie_calculo_valor_w = 'G') and (ie_glosa_w = 'P') then /*glosa percentual*/
			VL_PROCED_GLOSA_w	:= ((PR_GLOSA_w) / 100) * coalesce(vl_procedimento_w,0);
			vl_procedimento_w	:= ((100 - PR_GLOSA_w) / 100) * coalesce(vl_procedimento_w,0);
		else
			vl_procedimento_w	:= coalesce(vl_procedimento_w,0);
			VL_PROCED_GLOSA_w	:= 0;
		end if;


		if (ie_calcula_tx_via_acesso_w = 'S') and (coalesce(tx_procedimento_w::text, '') = '') then
			select	obter_tx_proc_via_acesso(ie_via_acesso_w)
			into STRICT	tx_procedimento_w
			;
		end if;

		if (coalesce(tx_procedimento_w::text, '') = '') then
			tx_procedimento_w:= 100;
		end if;

		ie_apuracao_custo_w	:= null;
		if (cd_procedimento_w > 0) then
			select 	coalesce(max(ie_apuracao_custo),'Q')
			into STRICT	ie_apuracao_custo_w
			from	procedimento
			where	cd_procedimento		= cd_procedimento_w
			and	ie_origem_proced	= ie_origem_proced_w;
		end if;

		/*Rotina Inclu? dia 15/03/2008 para calcular o custo do Procedimento - Fabr?o OS85527 */

		SELECT * FROM Obter_Custo_Procedimento(cd_estabelecimento_w, cd_procedimento_w, ie_origem_proced_w, nr_seq_proc_interno_w, null, cd_tabela_custo_w, coalesce(cd_convenio_particular_w, cd_convenio_w), cd_setor_atendimento_w, vl_procedimento_w, VL_CUSTO_OPERACIONAL_W, vl_Medico_w, VL_materiais_W, ie_apuracao_custo_w, vl_custo_unitario_w, vl_custo_variavel_w, vl_custo_sadt_w, vl_custo_dir_apoio_w, vl_custo_mao_obra_w, vl_custo_direto_w, vl_custo_indireto_w, vl_despesa_w, vl_custo_hm_w, pr_imposto_w, dt_ref_custo_w, null, null, null, null, vl_preco_calculado_w, null, 'N', null, null, null) INTO STRICT ie_apuracao_custo_w, vl_custo_unitario_w, vl_custo_variavel_w, vl_custo_sadt_w, vl_custo_dir_apoio_w, vl_custo_mao_obra_w, vl_custo_direto_w, vl_custo_indireto_w, vl_despesa_w, vl_custo_hm_w, pr_imposto_w, vl_preco_calculado_w;

		qt_resumo_w:= qt_procedimento_w;

		if (cd_procedimento_w = 99080012)  and (qt_resumo_w = 0) and (vl_custo_direto_w > 0) then
			vl_custo_w		:= vl_custo_unitario_w;
			vl_custo_direto_w		:= vl_custo_direto_w;
		elsif (ie_apuracao_custo_w = 'P') then
			vl_custo_w		:= vl_custo_unitario_w;
			vl_custo_variavel_w	:= vl_custo_variavel_w;
			vl_custo_sadt_w		:= vl_custo_sadt_w;
			vl_custo_dir_apoio_w	:= vl_custo_dir_apoio_w;
			vl_custo_mao_obra_w	:= vl_custo_mao_obra_w;
			vl_custo_direto_w	:= vl_custo_direto_w;
			vl_custo_indireto_w	:= vl_custo_Indireto_w;
			vl_despesa_w		:= vl_Despesa_w;
			vl_custo_hm_w		:= vl_custo_hm_w;
		elsif (ie_apuracao_custo_w = 'Q') then
			vl_custo_w		:= round((qt_resumo_w * vl_custo_unitario_w)::numeric, 2);
			vl_custo_sadt_w		:= qt_resumo_w * vl_custo_sadt_w;
			vl_custo_variavel_w	:= round((qt_resumo_w * vl_custo_variavel_w)::numeric, 2);
			vl_custo_dir_apoio_w	:= qt_resumo_w * vl_custo_dir_apoio_w;
			vl_custo_mao_obra_w	:= qt_resumo_w * vl_custo_mao_obra_w;
			vl_custo_direto_w	:= qt_resumo_w * vl_custo_direto_w;
			vl_custo_indireto_w	:= qt_resumo_w * vl_custo_Indireto_w;
			vl_despesa_w		:= qt_resumo_w * vl_Despesa_w;
			vl_custo_hm_w		:= qt_resumo_w * vl_custo_hm_w;
		end if;

		vl_custo_w:=	vl_custo_variavel_w + vl_custo_sadt_w + vl_custo_dir_apoio_w +
				vl_custo_mao_obra_w + vl_custo_direto_w +
				vl_custo_indireto_w + vl_despesa_w + vl_custo_hm_w;

		if (coalesce(pr_imposto_w, 0) > 0) then
			vl_custo_w	:= vl_custo_w  + (vl_custo_w * pr_imposto_w);
		end if;
		/* fim da rotina */

		if (coalesce(nr_seq_proc_interno_w,0) > 0) then
			cd_procedimento_tuss_w := Define_procedimento_TUSS(cd_estabelecimento_w,  nr_seq_proc_interno_w, cd_convenio_w, cd_categoria_w,
	  						coalesce(ie_tipo_atendimento_w,0), dt_orcamento_w, cd_procedimento_w, ie_origem_proced_w, somente_numero(cd_edicao_amb_w),cd_setor_atendimento_w, null);
		elsif (coalesce(nr_seq_exame_w,0) > 0) then
			cd_procedimento_tuss_w := define_proc_tuss_exame(nr_seq_exame_w, cd_convenio_w, cd_categoria_w, 0, cd_edicao_amb_w);
		end if;

		if (ie_visualiza_participantes_w = 'S') then

			if (vl_anestesista_w > 0) then
				vl_procedimento_w := (vl_procedimento_w - vl_anestesista_w);
			end if;

			if (vl_auxiliares_w > 0) then
				vl_procedimento_w := (vl_procedimento_w - vl_auxiliares_w);
			end if;

			atualizar_orc_valor_partic(nr_seq_item_w,
										(vl_procedimento_w * tx_procedimento_w)/100,
										(vl_medico_w * tx_procedimento_w)/100,
										(vl_auxiliares_w * tx_procedimento_w)/100,
										(vl_anestesista_w * tx_procedimento_w)/100,
										(vl_custo_operacional_w * tx_procedimento_w)/100,
										nm_usuario_p,
										vl_auxiliares_w);
			vl_procedimento_w := vl_procedimento_w + coalesce(vl_auxiliares_w, 0);
		end if;

		vl_procedimento_w	:= (vl_procedimento_w 	   * tx_procedimento_w)/100;
		vl_medico_w		:= (vl_medico_w 	   * tx_procedimento_w)/100;
		vl_anestesista_w	:= (vl_anestesista_w  	   * tx_procedimento_w)/100;
		vl_auxiliares_w		:= (vl_auxiliares_w 	   * tx_procedimento_w)/100;
		vl_custo_operacional_w 	:= (vl_custo_operacional_w * tx_procedimento_w)/100;
		vl_materiais_w		:= (vl_materiais_w 	   * tx_procedimento_w)/100;

		if (coalesce(nr_seq_regra_preco_w,0) > 0) and (ie_classificacao_w <> 1) then
			/*quando tem regra de preco para taxas e diarias valores sao zerados*/

			vl_procedimento_w	:= 0;
			vl_medico_w		:= 0;
			vl_anestesista_w	:= 0;
			vl_auxiliares_w		:= 0;
			vl_custo_operacional_w 	:= 0;
			vl_materiais_w		:= 0;
			vl_custo_w		:= 0;

			vl_servico_w := calcular_valor_proc_regra_orc(nr_seq_regra_preco_w, nr_seq_orcamento_p, nm_usuario_p, cd_setor_atendimento_w, vl_servico_w);

			if (vl_servico_w > 0) then
				vl_procedimento_w 	:= vl_servico_w;
			end if;
		end if;

		update	orcamento_paciente_proc
		set	vl_procedimento		= vl_procedimento_w - coalesce(vl_coparticipacao, 0),
			vl_medico		= vl_medico_w,
			vl_anestesista		= vl_anestesista_w,
			vl_auxiliares		= vl_auxiliares_w,
			vl_custo_operacional 	= vl_custo_operacional_w,
			vl_filme		= vl_materiais_w,
			vl_custo		= vl_custo_w,
			nr_seq_ajuste_proc	= nr_seq_ajuste_proc_def_w,
			cd_edicao_amb		= cd_edicao_amb_w,
			cd_proced_tuss		= cd_procedimento_tuss_w,
			VL_PROCED_GLOSA		= VL_PROCED_GLOSA_w,
			qt_procedimento		= coalesce(qt_procedimento_ww,qt_procedimento),
			ds_observacao 		= substr(ds_observacao||ds_observacao_w,1,255),
			nr_seq_regra_preco 	= CASE WHEN nr_seq_regra_preco_w=0 THEN null  ELSE nr_seq_regra_preco_w END ,
			ie_autorizacao		= coalesce(ie_autorizacao_w, ie_autorizacao),
			qt_porte_anestesico	= qt_porte_anestesico_w,
			vl_desconto = vl_desconto_w
		where 	nr_sequencia_orcamento	= nr_seq_orcamento_p
		and	nr_sequencia		= nr_seq_item_w;

		if (pr_desconto_w >0 ) then
			update	orcamento_paciente_proc
			set vl_desconto         	= vl_procedimento_w *(pr_desconto_w/100)
			where 	nr_sequencia_orcamento	= nr_seq_orcamento_p
			and	nr_sequencia		= nr_seq_item_w;
		end if;

		end;

		if (2 = philips_param_pck.get_cd_pais or ie_generate_quotation_tx_w = 'S') then
			CALL gerar_tributo_orc_pac(nr_seq_orcamento_p, nr_seq_item_w, 'P', nm_usuario_p);
		end if;
end loop;
close c10;

open	c20;
	loop
	fetch	c20 into
		nr_seq_item_w,
		cd_material_w,
		qt_material_w,
		pr_orc_pacote_w,
		nr_seq_regra_lanc_w,
		nr_seq_marca_w,
		cd_setor_atendimento_w,
		ie_regra_plano_w;
	EXIT WHEN NOT FOUND; /* apply on c20 */
		begin
		vl_custo_unitario_w 		:= 0;
		ie_glosa_w			:= 'X';
		nr_seq_regra_ajuste_mat_w	:= null;
		qt_proc_ref_w 			:= 0;
		qt_reg_ajuste_item_ref_w	:= 0;
		cd_proc_referencia_w		:= null;
		ie_origem_proc_refer_w		:= null;
		ds_observacao_w			:= '';
		ie_regra_w			:= null;
		cd_convenio_particular_w	:= null;
		cd_categoria_particular_w	:= null;
		ie_autorizacao_w		:= null;

		if (ie_calculo_valor_w = 'B') then
			if (coalesce(ie_regra_plano_w, 0) = 0) then
				SELECT * FROM consiste_mat_plano_convenio(coalesce(cd_convenio_w,0), coalesce(cd_plano_w,'0'), cd_material_w, nr_atendimento_w, cd_setor_atendimento_w, ds_erro_w, ie_bloqueia_agenda_w, ie_regra_w, nr_seq_regra_retorno_w, qt_material_w, clock_timestamp(), null, cd_estabelecimento_p, null, null) INTO STRICT ds_erro_w, ie_bloqueia_agenda_w, ie_regra_w, nr_seq_regra_retorno_w;

				if (cd_plano_w IS NOT NULL AND cd_plano_w::text <> '') then
					ie_autorizacao_w	:= 'L';

					if (ie_regra_w in (1,2))then
						ie_autorizacao_w	:= 'B';
					end if;

					if (ie_regra_w in (3))then
						ie_autorizacao_w	:= 'P';
					end if;
				end if;
			else
				ie_regra_w := ie_regra_plano_w;
			end if;

			if (ie_regra_w not in (3,4) or coalesce(ie_regra_w::text, '') = '') then
				SELECT * FROM obter_convenio_particular(cd_estabelecimento_p, cd_convenio_particular_w, cd_categoria_particular_w) INTO STRICT cd_convenio_particular_w, cd_categoria_particular_w;

			end if;

		end if;

		SELECT * FROM define_preco_material(	cd_estabelecimento_w, 				-- cd_estabelecimento_p		number,
					coalesce(cd_convenio_particular_w,cd_convenio_w),     -- cd_convenio_p          	number,
					coalesce(cd_categoria_particular_w,cd_categoria_w),   -- cd_categoria_p         	varchar2,
					dt_orcamento_w,                                  -- dt_vigencia_p          	date,
					cd_material_w,                                   -- cd_material_p          	number,
					coalesce(cd_tipo_acomodacao_w,0),                     -- cd_tipo_acomodacao_p   	number,
					coalesce(ie_tipo_atendimento_w,0),                    -- ie_tipo_atendimento_p  	number,
					cd_setor_atendimento_w,                          -- cd_setor_atendimento_p 	number,
					'',                                              -- cd_cgc_fornecedor_p		varchar2,
					coalesce(qt_idade_w,0),                               -- qt_idade_p			number,
					0,                                               -- nr_sequencia_p		number,
					cd_plano_w,                                      -- cd_plano_p			varchar2,
					null,                                            -- cd_proc_referencia_p		number,
					null,                                            -- ie_origem_proc_p		number,
					nr_seq_marca_w,                                  -- nr_seq_marca_p		number,
					null,                                            -- ie_clinica_p			number,
					nr_seq_classif_atend_w,                          -- nr_seq_classif_atend_p	number,
					nr_atendimento_w, 				-- nr_atendimento_p		number,
					null,                                            -- ie_vago_4_p			varchar2,
					vl_material_w,                                   -- vl_material_p      	 out 	number,
					dt_ult_vigencia_w,                               -- dt_ult_vigencia_p  	 out 	date,
					cd_tab_preco_mat_w,                              -- cd_tab_preco_mat_p 	 out 	number,
					ie_origem_preco_w,                               -- ie_origem_preco_p  	 out 	number,
					nr_seq_bras_preco_w,                             -- nr_seq_bras_preco_p	 out	number,
					nr_seq_mat_bras_w,                               -- nr_seq_mat_bras_p	 out	number,
					nr_seq_conv_bras_w,                              -- nr_seq_conv_bras_p	 out	number,
					nr_seq_conv_simpro_w,                            -- nr_seq_conv_simpro_p	 out	number,
					nr_seq_mat_simpro_w,                             -- nr_seq_mat_simpro_p	 out	number,
					nr_seq_simpro_preco_w,                           -- nr_seq_simpro_preco_p out	number,
					nr_seq_ajuste_mat_w) INTO STRICT 
					vl_material_w, 
					dt_ult_vigencia_w, 
					cd_tab_preco_mat_w, 
					ie_origem_preco_w, 
					nr_seq_bras_preco_w, 
					nr_seq_mat_bras_w, 
					nr_seq_conv_bras_w, 
					nr_seq_conv_simpro_w, 
					nr_seq_mat_simpro_w, 
					nr_seq_simpro_preco_w, 
					nr_seq_ajuste_mat_w;				-- nr_seq_ajuste_mat_p	 out	number
		if (ie_regra_w  in (3,4)) then
			vl_material_w := 0;
		end if;

		SELECT * FROM obter_regra_ajuste_mat(	CD_ESTABELECIMENTO_w, 				--cd_estabelecimento_p
					coalesce(cd_convenio_particular_w, cd_convenio_w),    --cd_convenio_p
					coalesce(cd_categoria_particular_w, cd_categoria_w),  --cd_categoria_p
					CD_MATERIAL_w,                                   --cd_material_p
					dt_orcamento_w,                                  --dt_vigencia_p
					coalesce(cd_tipo_acomodacao_w,0),                     --cd_tipo_acomodacao_p
					coalesce(ie_tipo_atendimento_w,0),                    --ie_tipo_atendimento_p
					cd_setor_atendimento_w,                          --cd_setor_atendimento_p
					coalesce(qt_idade_w,0),                               --qt_idade_p
					0,                                               --nr_sequencia_p
					cd_plano_w,                                      --cd_plano_p
					null,                                            --cd_proc_referencia_p
					null,                                            --ie_origem_proced_p
					null,                                            --nr_seq_proc_interno_p
					null,                                            --dt_entrada_p
					vl_neutro_w,                                     --OUT tx_ajuste_p
					vl_neutro_w,                                     --OUT vl_negociado_p
					vl_neutro_w,                                     --OUT ie_preco_informado_p
					ie_glosa_w,                                      --OUT ie_glosa_p
					vl_neutro_w,                                     --OUT tx_brasindice_pfb_p
					vl_neutro_w,                                     --OUT tx_brasindice_pmc_p
					vl_neutro_w,                                     --OUT tx_pmc_neg_p
					vl_neutro_w,                                     --OUT tx_pmc_pos_p
					vl_neutro_w,                                     --OUT tx_afaturar_p
					vl_neutro_w,                                     --OUT tx_simpro_pfb_p
					vl_neutro_w,                                     --OUT tx_simpro_pmc_p
					vl_neutro_w,                                     --OUT ie_origem_preco_p
					vl_neutro_w,                                     --OUT ie_precedencia_p
					PR_GLOSA_w, 					--OUT pr_glosa_p
					vl_glosa_w, 					--OUT vl_glosa_p
					cd_tabela_preco_w,                               --OUT cd_tabela_preco_p
					cd_motivo_exc_conta_w,                           --OUT cd_motivo_exc_conta_p
					nr_seq_regra_ajuste_mat_w,                       --OUT nr_seq_regra_p
					ie_autor_particular_w,                           --OUT ie_autor_particular_p
					cd_convenio_glosa_w,                             --OUT cd_convenio_glosa_p
					cd_categoria_glosa_w,                            --OUT cd_categoria_glosa_p
					null,                                            --ie_atend_retorno_p
					vl_neutro_w,                                     --OUT tx_pfb_neg_p
					vl_neutro_w,                                     --OUT tx_pfb_pos_p
					vl_neutro_w,                                     --OUT ie_ignora_preco_venda_p
					vl_neutro_w,                                     --OUT tx_simpro_pos_pfb_p
					vl_neutro_w,                                     --OUT tx_simpro_neg_pfb_p
					vl_neutro_w,                                     --OUT tx_simpro_pos_pmc_p
					vl_neutro_w,                                     --OUT tx_simpro_neg_pmc_p
					null,                                            --nr_seq_origem_p
					null,                                            --nr_seq_cobertura_p
					0,                                               --qt_dias_internacao_p
					nr_seq_regra_lanc_w,                             --nr_seq_regra_lanc_p
					null,                                            --nr_seq_lib_dieta_conv_p
					ie_clinica_w,                                    --ie_clinica_p
					cd_usuario_convenio_w,                           --cd_usuario_convenio_p
					nr_seq_classif_atend_w) INTO STRICT 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					ie_glosa_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					PR_GLOSA_w, 
					vl_glosa_w, 
					cd_tabela_preco_w, 
					cd_motivo_exc_conta_w, 
					nr_seq_regra_ajuste_mat_w, 
					ie_autor_particular_w, 
					cd_convenio_glosa_w, 
					cd_categoria_glosa_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w, 
					vl_neutro_w;                        --nr_seq_classif_atend_p



		/*----------------TRATAR AS REGRAS DE AJUSTE POR ITEM REFERENCIA------------*/

		if (coalesce( nr_seq_regra_ajuste_mat_w ,0) > 0) then

			select	count(1)
			into STRICT	qt_reg_ajuste_item_ref_w
			from	regra_ajuste_item_ref
			where	nr_seq_regra_ajuste_mat = nr_seq_regra_ajuste_mat_w;

			if (qt_reg_ajuste_item_ref_w > 0) then
				for regra_item in REGRAS_ITEM_REF_MAT loop
					if (coalesce(regra_item.cd_material,0) > 0) then
						select 	count(1)
						into STRICT	qt_proc_ref_w
						from 	orcamento_paciente_mat
						where 	cd_material 		= regra_item.cd_material
						and 	nr_sequencia_orcamento 	= nr_seq_orcamento_p
						and	nr_sequencia <> nr_seq_item_w
						and 	qt_material <> 0;

					elsif (coalesce(regra_item.cd_procedimento,0) > 0) then
						select 	count(1)
						into STRICT	qt_proc_ref_w
						from 	orcamento_paciente_proc
						where 	cd_procedimento  	= regra_item.cd_procedimento
						and 	ie_origem_proced 	= regra_item.ie_origem_proced
						and 	nr_sequencia_orcamento 	= nr_seq_orcamento_p
						and 	qt_procedimento <> 0;
					end if;

					if (qt_proc_ref_w > 0) then
						exit;
					end if;

				end loop;
			end if;

			/*	O - Zerar somente se item refer?ia em conta
				N - Excluir somente se item refer?ia em conta
				J - Libera somente se item refer?ia em conta (Mover para aba itens exclu?s)*/
			if (ie_glosa_w in ('O','N','J')) then
				if (qt_proc_ref_w > 0) then
					vl_material_w	:= 0;

					if (ie_glosa_w in ('N','J')) then
						qt_material_w	:= 0; -- quando item eh "excluido"
						ds_observacao_w := '-'||obter_desc_expressao(933227)||'('||nr_seq_regra_ajuste_mat_w||'). ';   --Quantidade zerada pela regra de ajuste
					end if;
				end if;
			end if;

		end if;
		/*----------------FIM VALIDACOES ITEM REFERENCIA-------------------- */



		/*-------------FORMA DE CALCULO DE VALOR-------------*/

		if (IE_CALCULO_VALOR_w = 'P') then
			vl_material_w		:= (PR_CALCULO_w / 100) * (coalesce(vl_material_w,0) * coalesce(qt_material_w,0));
		elsif (IE_CALCULO_VALOR_w = 'T') then
			vl_material_w		:= (pr_calculo_mat_w / 100) * (coalesce(vl_material_w,0) * coalesce(qt_material_w,0));
		else
			vl_material_w		:= vl_material_w * qt_material_w;
		end if;

		if (ie_calculo_valor_w = 'G') and (ie_glosa_w = 'P') then
			VL_MAT_GLOSA_w	:= ((PR_GLOSA_w) / 100) * (coalesce(vl_material_w,0));
			vl_material_w	:= ((100 - PR_GLOSA_w) / 100) * (coalesce(vl_material_w,0));
		else
			vl_material_w	:= coalesce(vl_material_w,0);
			VL_MAT_GLOSA_w	:= 0;
		end if;

		if (coalesce(pr_orc_pacote_w,0) > 0) then

			vl_material_w:= vl_material_w + (vl_material_w * pr_orc_pacote_w / 100);

			update	orcamento_paciente_mat
			set	ie_valor_informado	= 'S',
				vl_material		= vl_material_w,
				VL_MAT_GLOSA		= VL_MAT_GLOSA_w,
				ds_observacao		= ds_observacao || ' ' || wheb_mensagem_pck.get_texto(799744,'PR_ORCAMENTO=' || pr_orc_pacote_w)
			where 	nr_sequencia_orcamento	= nr_seq_orcamento_p
			and	nr_sequencia		= nr_seq_item_w;
			--and	cd_material		= cd_material_w;
		end if;


		/*Rotina Inclu? dia 15/03/2008 para calcular o custo do Material - Fabr?o OS85527 */

		select 	coalesce(max(cd_grupo_material),0)
		into STRICT	cd_grupo_opme_item_w
		from 	estrutura_material_v
		where 	cd_material = CD_MATERIAL_w;

		cd_setor_w:= null;

		select 	CASE WHEN cd_grupo_opme_item_w=cd_grupo_opme_param_w THEN  cd_setor_custo_opme_w  ELSE null END
		into STRICT	cd_setor_w
		;

		SELECT * FROM Obter_Custo_material(cd_estabelecimento_w, cd_material_w, cd_estabelecimento_w, cd_tabela_custo_w, coalesce(cd_setor_atendimento_w,cd_setor_w), coalesce(cd_convenio_particular_w, cd_convenio_w), vl_material_w, 'TER', null, dt_ref_custo_w, ie_apuracao_custo_w, vl_custo_unitario_w, pr_imposto_w, null, null, null, 'N', null, 0, 0, null) INTO STRICT ie_apuracao_custo_w, vl_custo_unitario_w, pr_imposto_w;


		vl_custo_w		:= vl_custo_unitario_w;
		qt_resumo_w		:= qt_material_w;

		if (coalesce(pr_imposto_w, 0) > 0) then
			vl_custo_w	:= vl_custo_w  + (vl_custo_w * pr_imposto_w);
		end if;
		/* fim da rotina */

		update	orcamento_paciente_mat
		set	vl_material		= round((vl_material_w)::numeric,2),
			vl_custo		= vl_custo_w * qt_material_w,
			ie_origem_preco		= ie_origem_preco_w,
			cd_tab_preco_material	= cd_tab_preco_mat_w,
			nr_seq_regra_ajuste_mat	= nr_seq_ajuste_mat_w,
			nr_seq_bras_preco	= nr_seq_bras_preco_w,
			nr_seq_simp_preco	= nr_seq_simpro_preco_w,
			VL_MAT_GLOSA		= VL_MAT_GLOSA_w,
			qt_material 		= qt_material_w,
			ds_observacao 		= substr(ds_observacao||ds_observacao_w,1,255),
			ie_autorizacao		= coalesce(ie_autorizacao_w, ie_autorizacao)
		where 	nr_sequencia_orcamento	= nr_seq_orcamento_p
		and	nr_sequencia		= nr_seq_item_w;
		--and	cd_material		= cd_material_w;
		end;

		if (2 = philips_param_pck.get_cd_pais or ie_generate_quotation_tx_w = 'S') then
			CALL gerar_tributo_orc_pac(nr_seq_orcamento_p, nr_seq_item_w, 'M', nm_usuario_p);
		end if;

end loop;
close c20;

open C30;
loop
fetch C30 into
	nr_seq_item_w,
	tx_procedimento_w;
EXIT WHEN NOT FOUND; /* apply on C30 */
	begin

	ie_pacote_original_w:= 'S';

	--Buscando os valores originais do pacote gerado
	begin
	select 	qt_procedimento,
		vl_procedimento,
		vl_medico,
		vl_anestesista,
		vl_auxiliares,
		vl_custo_operacional,
		vl_filme
	into STRICT	qt_procedimento_w,
		vl_procedimento_w,
		vl_medico_w,
		vl_anestesista_w,
		vl_auxiliares_w,
		vl_custo_operacional_w,
		vl_materiais_w
	from 	orcamento_pac_proc_valor
	where 	nr_seq_orc_proced = nr_seq_item_w
	and 	ie_tipo_valor = 1;
	exception
		when others then
			ie_pacote_original_w:= 'N';
	end;

	if (ie_pacote_original_w = 'S') then

		update	orcamento_paciente_proc
		set	vl_procedimento		= (vl_procedimento_w * tx_procedimento_w)/100,
			vl_medico		= (vl_medico_w  * qt_procedimento_w * tx_procedimento_w)/100,
			vl_anestesista		= (vl_anestesista_w  * qt_procedimento_w * tx_procedimento_w)/100,
			vl_auxiliares		= (vl_auxiliares_w  * qt_procedimento_w * tx_procedimento_w)/100,
			vl_custo_operacional 	= (vl_custo_operacional_w  * qt_procedimento_w * tx_procedimento_w)/100,
			vl_filme		= (vl_materiais_w * qt_procedimento_w * tx_procedimento_w)/100
		where 	nr_sequencia_orcamento	= nr_seq_orcamento_p
		and	nr_sequencia		= nr_seq_item_w;

	end if;

	end;
end loop;
close C30;

if (ie_desconto_pacote_w = 'S') and (philips_param_pck.get_cd_pais	= 2 or ie_generate_quotation_tx_w = 'S') then
	open C40;
	loop
	fetch C40 into
		nr_seq_item_w;
	EXIT WHEN NOT FOUND; /* apply on C40 */
		begin
		CALL gerar_tributo_orc_pac(nr_seq_orcamento_p, nr_seq_item_w, 'P', nm_usuario_p);
		end;
	end loop;
	close C40;
end if;

if (philips_param_pck.get_cd_pais	= 2 or ie_generate_quotation_tx_w = 'S') then
	open C50;
	loop
	fetch C50 into
		nr_seq_item_w;
	EXIT WHEN NOT FOUND; /* apply on C50 */
		begin
		CALL gerar_tributo_orc_pac(nr_seq_orcamento_p, nr_seq_item_w, 'P', nm_usuario_p);
		end;
	end loop;
	close C50;
end if;

if (ie_generate_quotation_tx_w = 'S') then
open C60;
	loop
	fetch C60 into
		nr_seq_item_w;
	EXIT WHEN NOT FOUND; /* apply on C60 */
		begin
		CALL gerar_tributo_orc_pac(nr_seq_orcamento_p, nr_seq_item_w, 'P', nm_usuario_p);
		end;
	end loop;
	close C60;
end if;
select	count(*)
into STRICT	qt_regra_orc_w
from	convenio_regra_qtde
where	cd_estabelecimento = cd_estabelecimento_w
and	cd_convenio = coalesce(cd_convenio_particular_w, cd_convenio_w)
and	ie_regra_execucao = 'O';

if (coalesce(qt_regra_orc_w,0) > 0) then
	CALL gerar_taxa_qtde_exec_valor_orc(nr_seq_orcamento_p);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE calcular_orcamento_paciente ( nr_seq_orcamento_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

