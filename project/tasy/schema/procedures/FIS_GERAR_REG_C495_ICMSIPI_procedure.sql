-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE fis_gerar_reg_c495_icmsipi (nr_seq_controle_p bigint, nr_seq_nota_p bigint) AS $body$
DECLARE


  /*REGISTRO C495: RESUMO MENSAL DE ITENS DO ECF POR ESTABELECIMENTO (CÓDIGO 02 e 2D).*/

  -- VARIABLES
  ie_gerou_dados_bloco_w varchar(1) := 'N';

  nr_seq_icmsipi_C495_w fis_efd_icmsipi_C495.nr_sequencia%type;

  vl_icms_w nota_fiscal_item_trib.vl_tributo%type;

  qt_cursor_w bigint := 0;
  nr_vetor_w  bigint := 0;

  -- USUARIO
  nm_usuario_w usuario.nm_usuario%type;

  /*Cursor que retorna as informações para o registro c495 restringindo pela sequencia da nota fiscal*/

  c_reg_c495 CURSOR FOR
    SELECT null tx_aliq_icms,
           b.cd_material cd_item,
           b.qt_item_nf qt_item,
           null qtd_canc,
           substr(b.cd_unidade_medida_compra, 1, 6) cd_unid,
           b.vl_total_item_nf vl_item,
           null vl_desc,
           null vl_canc,
           null vl_acmo,
           null vl_bc_icms,
           null vl_icms,
           null vl_isen,
           null vl_nt,
           null vl_icms_st
      FROM nota_fiscal a, nota_fiscal_item b
LEFT OUTER JOIN material_fiscal c ON (b.cd_material = c.cd_material)
WHERE a.nr_sequencia = nr_seq_nota_p;

  /*Criação do array com o tipo sendo do cursor eespecificado - c_itens_cupom_fiscal*/

  type reg_c_reg_C495 is table of c_reg_C495%RowType;
  vetRegC495 reg_c_reg_C495;

  /*Criação do array com o tipo sendo da tabela eespecificada - FIS_EFD_ICMSIPI_C495 */

  type registro is table of fis_efd_icmsipi_C495%rowtype index by integer;
  fis_registros_w registro;

BEGIN

  nm_usuario_w := Obter_Usuario_Ativo;

  open c_reg_c495;
  loop
    fetch c_reg_c495 bulk collect
      into vetRegC495 limit 1000;
    for i in 1 .. vetRegC495.Count loop

      begin

	/*Incrementa a variavel para o array*/

	qt_cursor_w:=	qt_cursor_w + 1;

        if (ie_gerou_dados_bloco_w = 'N') then
          ie_gerou_dados_bloco_w := 'S';
        end if;

        /*Limpeza de variaveis*/

        vl_icms_w := 0;

        /*Busca da sequencia da tabela especificada - fis_efd_icmsipi_C170 */

        select nextval('fis_efd_icmsipi_c495_seq')
          into STRICT nr_seq_icmsipi_C495_w
;

        /*Inserindo valores no array para realização do forall posteriormente*/

        fis_registros_w[qt_cursor_w].nr_sequencia 		:= nr_seq_icmsipi_C495_w;
        fis_registros_w[qt_cursor_w].dt_atualizacao 		:= clock_timestamp();
        fis_registros_w[qt_cursor_w].nm_usuario 		:= nm_usuario_w;
        fis_registros_w[qt_cursor_w].dt_atualizacao_nrec 	:= clock_timestamp();
        fis_registros_w[qt_cursor_w].nm_usuario_nrec 		:= nm_usuario_w;
        fis_registros_w[qt_cursor_w].cd_reg 			:= 'C495';
        fis_registros_w[qt_cursor_w].tx_aliq_icms 		:= vetRegC495[i].tx_aliq_icms;
        fis_registros_w[qt_cursor_w].cd_item 			:= vetRegC495[i].cd_item;
        fis_registros_w[qt_cursor_w].qt_item 			:= vetRegC495[i].qt_item;
        fis_registros_w[qt_cursor_w].qtd_canc 			:= vetRegC495[i].qtd_canc;
        fis_registros_w[qt_cursor_w].cd_unid 			:= vetRegC495[i].cd_unid;
        fis_registros_w[qt_cursor_w].vl_item 			:= vetRegC495[i].vl_item;
        fis_registros_w[qt_cursor_w].vl_desc 			:= vetRegC495[i].vl_desc;
        fis_registros_w[qt_cursor_w].vl_canc 			:= vetRegC495[i].vl_canc;
        fis_registros_w[qt_cursor_w].vl_acmo 			:= vetRegC495[i].vl_acmo;
        fis_registros_w[qt_cursor_w].vl_bc_icms 		:= vetRegC495[i].vl_bc_icms;
        fis_registros_w[qt_cursor_w].vl_icms 			:= vetRegC495[i].vl_icms;
        fis_registros_w[qt_cursor_w].vl_isen 			:= vetRegC495[i].vl_isen;
        fis_registros_w[qt_cursor_w].vl_nt 			:= vetRegC495[i].vl_nt;
        fis_registros_w[qt_cursor_w].vl_icms_st 		:= vetRegC495[i].vl_icms_st;
        fis_registros_w[qt_cursor_w].nr_seq_controle 		:= nr_seq_controle_p;

        if (nr_vetor_w >= 1000) then
          begin
            /*Inserindo registros definitivamente na tabela especifica - FIS_EFD_ICMSIPI_C495 */

            forall i in fis_registros_w.first .. fis_registros_w.last
              insert into fis_efd_icmsipi_C495 values fis_registros_w(i);

            nr_vetor_w := 0;
            fis_registros_w.delete;

            commit;

          end;
        end if;

        /*incrementa variavel para realizar o forall quando chegar no valor limite*/

        nr_vetor_w := nr_vetor_w + 1;

      end;
    end loop;
    EXIT WHEN NOT FOUND; /* apply on c_reg_c495 */
  end loop;
  close c_reg_c495;

  if (fis_registros_w.count > 0) then
    begin
      /*Inserindo registro que não entraram outro for all devido a quantidade de registros no vetor*/

      forall i in fis_registros_w.first .. fis_registros_w.last
        insert into fis_efd_icmsipi_C495 values fis_registros_w(i);

      fis_registros_w.delete;

      commit;

    end;
  end if;

  /*Libera memoria*/

  dbms_session.free_unused_user_memory;

  /*Atualização informação no controle de geração de registro para SIM*/

  if (ie_gerou_dados_bloco_w = 'S') then
    update fis_efd_icmsipi_controle
       set ie_mov_C = 'S'
     where nr_sequencia = nr_seq_controle_p;
  end if;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE fis_gerar_reg_c495_icmsipi (nr_seq_controle_p bigint, nr_seq_nota_p bigint) FROM PUBLIC;

