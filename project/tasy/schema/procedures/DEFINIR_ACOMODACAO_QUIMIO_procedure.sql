-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE definir_acomodacao_quimio ( nr_seq_paciente_p bigint, nr_seq_atendimento_p bigint, cd_acomodacao_p bigint, dt_prevista_p timestamp, dt_real_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_msg_p INOUT text, ds_erro_p INOUT text) AS $body$
DECLARE


ie_registra_chegada_w	varchar(1);
ie_acomod_todos_pac_w	varchar(1);
ie_acomodacao_w		varchar(1);
ie_param_60_w		varchar(1);
ds_texto_w		varchar(255);
ie_transf_paci_acomod_w	varchar(1);
nr_seq_unidade_w    	bigint;
cd_setor_atendimento_w  integer;
cd_unidade_basica_w 	varchar(10);
cd_unidade_compl_w 	varchar(10);
cd_tipo_acomodacao_w 	smallint;
nr_atendimento_w    	bigint;
ds_local_w              varchar(255);
dt_chegada_w            timestamp;


BEGIN

    select dt_chegada
    into STRICT dt_chegada_w
    from paciente_atendimento
    where nr_seq_atendimento = nr_seq_atendimento_p;

    SELECT 	max(nr_atendimento)
    INTO STRICT 	nr_atendimento_w
    FROM 	paciente_atendimento
    where 	nr_seq_atendimento = nr_seq_atendimento_p;

/* Quimioterapia - Parametro [60] - Ao definir acomodac?o consistir se o local ja esta alocado para outro paciente */

ie_param_60_w := obter_param_usuario(3130, 60, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_param_60_w);

if (ie_param_60_w <> 'N') then
	begin
	select	CASE WHEN count(*)=0 THEN  'N'  ELSE 'S' END
	into STRICT	ie_acomodacao_w
	from	paciente_atendimento
	where	coalesce(dt_fim_adm::text, '') = ''
	and	coalesce(dt_real, dt_prevista) between trunc(clock_timestamp()) and fim_dia(clock_timestamp())
	and	nr_seq_local	= cd_acomodacao_p
	and	nr_seq_atendimento	<> nr_seq_paciente_p;

	if (ie_acomodacao_w = 'S') then
		begin

        select max(ds_local)
        into STRICT   ds_local_w
        from   qt_local
        where  nr_sequencia = cd_acomodacao_p;

        if (ds_local_w IS NOT NULL AND ds_local_w::text <> '') then
		    ds_texto_w	:= substr(obter_texto_dic_objeto(1085579, wheb_usuario_pck.get_nr_seq_idioma, 'ds_local='||ds_local_w),1,255);
        end if;

		if (ie_param_60_w = 'A') then
			ds_msg_p	:= ds_texto_w;
		elsif (ie_param_60_w = 'S') then
			begin
			  ds_erro_p	:= ds_texto_w;
			end;
		end if;
		end;

	end if;
	end;
end if;

/* Quimioterapia - Parametro [83] - Ao definir acomodac?o registrar chegada do paciente */

ie_registra_chegada_w := obter_param_usuario(3130, 83, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_registra_chegada_w);

if (coalesce(ds_erro_p::text, '') = '') then
/* Quimioterapia - Parametro [73] - Vincula os agendamentos diarios do paciente ao acomodar o paciente. */

	ie_acomod_todos_pac_w := obter_param_usuario(3130, 73, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_acomod_todos_pac_w);

	if (ie_acomod_todos_pac_w = 'S') then -- N
		begin
		if (ie_registra_chegada_w = 'S') then
			begin
				update	
					paciente_atendimento
				set	
					nr_seq_local			= cd_acomodacao_p,
					dt_acomodacao_paciente	= clock_timestamp(),
					nm_usuario				= nm_usuario_p,
					dt_atualizacao          = clock_timestamp(),
					ie_alocado              = 'S',
					dt_real                 = coalesce(dt_real_p, clock_timestamp()),
					dt_chegada				= coalesce(dt_chegada, clock_timestamp())
				where	
					obter_dados_paciente_setor(nr_seq_paciente, 'C') = obter_dados_paciente_setor(nr_seq_paciente_p, 'C')
					and	trunc(dt_prevista) = trunc(dt_prevista_p);
			end;
		else
			begin
				update	
					paciente_atendimento
				set	
					nr_seq_local			= cd_acomodacao_p,
					dt_acomodacao_paciente	= clock_timestamp(),
					dt_atualizacao          = clock_timestamp(),
					ie_alocado              = 'S',
					dt_real                 = coalesce(dt_real_p, clock_timestamp()),
					nm_usuario				= nm_usuario_p
				where	
					obter_dados_paciente_setor(nr_seq_paciente, 'C')	= obter_dados_paciente_setor(nr_seq_paciente_p, 'C')
					and	dt_prevista		= dt_prevista_p
					and	(dt_chegada IS NOT NULL AND dt_chegada::text <> '');
			end;
		end if;
		end;
	elsif (ie_acomod_todos_pac_w = 'R') then
		begin
			update	
				paciente_atendimento
			set	
				nr_seq_local			= cd_acomodacao_p,
				dt_acomodacao_paciente	= clock_timestamp(),
				dt_atualizacao          = clock_timestamp(),
				ie_alocado              = 'S',
				dt_real                 = coalesce(dt_real_p, clock_timestamp()),
				nm_usuario				= nm_usuario_p,
				dt_chegada				= coalesce(dt_chegada, clock_timestamp())
			where	
				obter_dados_paciente_setor(nr_seq_paciente, 'C') = obter_dados_paciente_setor(nr_seq_paciente_p, 'C')
				and	trunc(dt_real) = trunc(dt_real_p);
		end;
	else
		begin
		if (ie_registra_chegada_w = 'S') then
			begin
				update	
					paciente_atendimento
				set	
					nr_seq_local			= cd_acomodacao_p,
					dt_acomodacao_paciente	= clock_timestamp(),
					dt_atualizacao          = clock_timestamp(),
					ie_alocado              = 'S',
					dt_real                 = coalesce(dt_real_p, clock_timestamp()),
					dt_chegada				= coalesce(dt_chegada, clock_timestamp()),
					nm_usuario				= nm_usuario_p
				where	
					nr_seq_atendimento = nr_seq_atendimento_p;
			end;
		else
			begin
				update	
					paciente_atendimento
				set	
					nr_seq_local			= cd_acomodacao_p,
					dt_acomodacao_paciente	= clock_timestamp(),
					dt_atualizacao          = clock_timestamp(),
					ie_alocado              = 'S',
					dt_real                 = coalesce(dt_real_p, clock_timestamp()),
					nm_usuario				= nm_usuario_p
				where	
					nr_seq_atendimento		= nr_seq_atendimento_p;
			end;
		end if;
		end;
	end if;

	/* Quimioterapia - Parametro [492] - Ao definir acomodac?o do paciente, controlar ocupac?o das unidades de setor. */

	ie_transf_paci_acomod_w := obter_param_usuario(3130, 492, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_transf_paci_acomod_w);

	select 	max(nr_seq_unidade),
		max(cd_setor_atendimento)
	into STRICT 	nr_seq_unidade_w, 
		cd_setor_atendimento_w
	from 	qt_local
	where 	nr_sequencia = cd_acomodacao_p;

	if (ie_transf_paci_acomod_w = 'S') then
		SELECT 	max(cd_unidade_basica),
			max(cd_unidade_compl), 
			max(cd_tipo_acomodacao) 
		INTO STRICT 	cd_unidade_basica_w, 
			cd_unidade_compl_w, 
			cd_tipo_acomodacao_w	
		FROM 	unidade_atendimento
		where 	nr_seq_interno = nr_seq_unidade_w;

		if (nr_atendimento_w IS NOT NULL AND nr_atendimento_w::text <> '') then
			CALL Gerar_Transferencia_Paciente(nr_atendimento_w, cd_setor_atendimento_w, cd_unidade_basica_w, cd_unidade_compl_w, cd_tipo_acomodacao_w, null, null, null, obter_usuario_ativo(), clock_timestamp());
		end if;
	end if;

    if (coalesce(dt_chegada_w::text, '') = '') then

        select dt_chegada
        into STRICT dt_chegada_w
        from paciente_atendimento
        where nr_seq_atendimento = nr_seq_atendimento_p;

        if (dt_chegada_w IS NOT NULL AND dt_chegada_w::text <> '') then

            CALL gerar_lancamento_automatico(nr_atendimento_w, null, 192, nm_usuario_p, null, null, null, null, null, null);
        end if;
    end if;

end if;
commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE definir_acomodacao_quimio ( nr_seq_paciente_p bigint, nr_seq_atendimento_p bigint, cd_acomodacao_p bigint, dt_prevista_p timestamp, dt_real_p timestamp, nm_usuario_p text, cd_estabelecimento_p bigint, ds_msg_p INOUT text, ds_erro_p INOUT text) FROM PUBLIC;

