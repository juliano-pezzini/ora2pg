-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_repasse_terceiro_tributo (nr_repasse_terceiro_p bigint, nm_usuario_p text) AS $body$
DECLARE


 /*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:   Gerar a simulação do repasse. Rotina baseada na rotina que gera os tributos.
----------------------------------------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[X]  Objetos do dicionário [X] Tasy (Delphi/Java) [  ] Portal [  ] Relatórios [ ] Outros:
 ----------------------------------------------------------------------------------------------------------------------------------------------------

Pontos de atenção:
 - Rotina excutada no (Delphi/Java/HTML5)  dentro do FatAct_FF
-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*/

--Variáveis obtidas do Repasse e do vencimento do repasse
vl_vencimento_w			repasse_terceiro_venc.vl_vencimento%type;
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
dt_venc_titulo_w		timestamp;
dt_emissao_w			timestamp;
cd_cgc_repasse_w		pessoa_juridica.cd_cgc%type;
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
nm_usuario_w			repasse_terceiro_venc.nm_usuario%type;
nr_seq_terceiro_w		terceiro.nr_sequencia%type;
dt_tributo_w			timestamp;
cd_cnpj_raiz_w			varchar(50);
nr_seq_tipo_repasse_w		repasse_terceiro.nr_seq_tipo%type;
vl_vencimento_mat_w		repasse_terceiro_venc.vl_repasse_mat%type;
vl_adiantamento_w		repasse_terceiro_venc.vl_adiantamento%type;
dt_base_trib_w			timestamp;
cd_empresa_w			empresa.cd_empresa%type;
vl_desp_cartao_w		repasse_terceiro_venc.vl_desp_cartao%type;
vl_total_vencimentos_w		repasse_terceiro_venc.vl_vencimento%type;
nr_seq_vencimento_w		repasse_terceiro_venc.nr_sequencia%type;

--Variáveis obtidas da Parâmetros Faturamento
ie_tributo_pessoa_w		parametro_faturamento.ie_tributo_pessoa%type;

--Variáveis obtidas da Pessoa Jurídica
ie_tipo_tributacao_w		pessoa_juridica.ie_tipo_tributacao%type;

--Variáveis obtidas da Pessoa Física
nr_ccm_w			pessoa_fisica.nr_ccm%type := null;

--Variáveis obtidas da Repasse terceiro Item (pasta Itens de repasse)
vl_item_sem_trib_w		repasse_terceiro_item.vl_repasse%type;

--Variável para controle de quantidade de tributos já gerados
qt_registro_w			integer;

--Variável de controle para os tributos que acumulam
vl_trib_acum_w			double precision;

--Variável para controle se já gerou para PF
ie_gerou_trib_pf_w		varchar(1)	:= 'N';

--Variáveis para controle dos valores do tributo
vl_base_calculo_w		double precision;
pr_aliquota_w			double precision;
qt_pago_outros_w		bigint;
dt_venc_tributo_w		timestamp;
vl_tributo_w			double precision;
dt_dados_trib_w			timestamp;
dt_vencimento_w			timestamp;
qt_venc_w			integer;
ds_venc_w			varchar(2000);
ds_venc_ww			varchar(2000);
vl_soma_trib_nao_retido_w	double precision;
vl_soma_base_nao_retido_w	double precision;
vl_soma_trib_adic_w		double precision;
vl_soma_base_adic_w		double precision;
vl_trib_anterior_w		double precision;
vl_total_base_w			double precision;
vl_reducao_w			double precision;
vl_pago_w			double precision;
vl_base_calculo_paga_w		double precision;
vl_base_retido_outro_w		double precision;
vl_base_pago_adic_base_w	double precision;
vl_trib_cad_pf_w		pessoa_fisica_trib.vl_tributo%type;
vl_teto_base_calc_w		double precision;

--Variáveis de retorno da OBTER_DADOS_TRIB_TIT_PAGAR
cd_beneficiario_w		varchar(14);
cd_cond_pagto_w			bigint;
cd_conta_financ_w		bigint;
nr_seq_trans_reg_w		bigint;
nr_seq_trans_baixa_w		bigint;
vl_minimo_base_w		double precision;
vl_minimo_tributo_w		double precision;
ie_acumulativo_w		varchar(1);
vl_teto_base_w			double precision;
vl_desc_dependente_w		double precision;
cd_darf_w			varchar(20);
cd_variacao_w			varchar(50);
ie_periodicidade_w		varchar(50);
nr_seq_regra_w			bigint;
nr_seq_classe_w			bigint;
cd_tipo_baixa_neg_w		integer;

--Variáveis obtidas da Regra Tributo Contas a Pagar
ie_mat_repasse_w		tributo_conta_pagar.ie_mat_repasse%type;
pr_base_calculo_w		tributo_conta_pagar.pr_base_calculo%type;
cd_estab_regra_w		tributo_conta_pagar.cd_estabelecimento%type;
cd_empresa_regra_w		tributo_conta_pagar.cd_empresa%type;

--
ie_irpf_w			varchar(3);

--Variável para controle da quantidade de dependentes
qt_dependente_w			pessoa_fisica.qt_dependente%type;

--Variável para controle do valor de INSS já gerado
vl_inss_w			repasse_terceiro_tributo.vl_imposto%type := 0;

--Variáveis de retorno da rotina OBTER_VALORES_TRIBUTO
vl_trib_nao_retido_w		double precision;
vl_trib_adic_w			double precision;
vl_base_nao_retido_w		double precision;
vl_base_adic_w			double precision;
nr_seq_regra_irpf_w		regra_calculo_irpf.nr_sequencia%type;

qt_repasse_venc_w		bigint := 0;

--Obtém os dados do tributo e suas parametrizações
c_dados_tributo CURSOR(cd_pessoa_fisica_pc	pessoa_fisica.cd_pessoa_fisica%type,
			cd_cgc_repasse_pc	pessoa_juridica.cd_cgc%type,
			nr_ccm_pc		pessoa_fisica.nr_ccm%type,
			ie_tipo_tributacao_pc	pessoa_juridica.ie_tipo_tributacao%type,
			cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type) FOR
	SELECT	cd_tributo,
		ie_vencimento,
		ie_tipo_tributo,
		ie_apuracao_piso,
		ie_cnpj,
		ie_restringe_estab,
		coalesce(ie_venc_repasse, 'N') ie_venc_repasse,
		coalesce(ie_considera_valor_pf,'N') ie_considera_valor_pf,
		coalesce(ie_desc_desp_cartao, 'S') ie_desc_desp_cartao
	from	Tributo
	where	ie_conta_pagar	= 'S'
	and	ie_situacao		= 'A'
	and (ie_pf_pj = 'A' or (ie_pf_pj = 'PF' and (cd_pessoa_fisica_pc IS NOT NULL AND cd_pessoa_fisica_pc::text <> '')) or (ie_pf_pj = 'PJ' and (cd_cgc_repasse_pc IS NOT NULL AND cd_cgc_repasse_pc::text <> '')))
	and (coalesce(nr_ccm_pc::text, '') = '' or coalesce(ie_ccm,'S') = 'S')
	and (coalesce(ie_tipo_tributacao_pc, 'X') <> '0' or coalesce(ie_super_simples, 'S') = 'S')
	and	coalesce(cd_estabelecimento, cd_estabelecimento_pc) = cd_estabelecimento_pc
	order	by CASE WHEN ie_tipo_tributo='INSS' THEN 1  ELSE 2 END;

--Obtém os dados do tributo e suas parametrizações levando em conta as informações cadastradas na pasta Tributo do Cadastro de Pessoa Física
c_dados_trib_pf CURSOR(cd_pessoa_fisica_pc	pessoa_fisica.cd_pessoa_fisica%type,
			cd_estabelecimento_pc	estabelecimento.cd_estabelecimento%type,
			dt_emissao_pc		timestamp,
			dt_venc_titulo_pc	timestamp,
			nr_ccm_pc		pessoa_fisica.nr_ccm%type) FOR
	SELECT 	b.cd_tributo,
		b.vl_base_calculo,
		b.vl_tributo,
		b.dt_inicio_vigencia,
		b.dt_fim_vigencia,
		b.cd_pessoa_fisica,
		a.ie_vencimento,
		b.ds_emp_retencao,
		b.ie_tipo_data,
		coalesce(b.ie_pago_prev_rep, 'P') ie_pago_prev_rep
	from	pessoa_fisica_trib b,
		tributo a
	where	b.cd_tributo 		= a.cd_tributo
	and	b.cd_pessoa_fisica 	= cd_pessoa_fisica_pc
	and (b.cd_estabelecimento = cd_estabelecimento_pc or coalesce(b.cd_estabelecimento::text, '') = '')
	and	CASE WHEN b.ie_tipo_data='E' THEN dt_emissao_pc WHEN b.ie_tipo_data='V' THEN dt_venc_titulo_pc END  between b.dt_inicio_vigencia and dt_fim_vigencia
	and (coalesce(nr_ccm_pc::text, '') = '' or coalesce(a.ie_ccm,'S') = 'S');

BEGIN
--Deletar os registros já existentes na tabela de simulação para o repasse que está sendo gerado.
delete	from repasse_terceiro_tributo
where	coalesce(nr_repasse_terceiro,nr_repasse_terceiro_p)	= nr_repasse_terceiro_p;

--Obter os dados para cálculo dos tributos do Repasse e do vencimento do repasse.
begin

select	a.vl_vencimento,
	b.cd_estabelecimento,
	a.dt_vencimento,
	b.dt_mesano_referencia,
	c.cd_cgc,
	c.cd_pessoa_fisica,
	a.nm_usuario,
	b.nr_seq_terceiro,
	a.dt_vencimento,
	obter_cnpj_raiz(c.cd_cgc),
	b.nr_seq_tipo,
	coalesce(a.vl_repasse_mat,0),
	coalesce(a.vl_adiantamento,0),
	coalesce(b.dt_base_trib, clock_timestamp()),
	d.cd_empresa,
	coalesce(a.vl_desp_cartao,0),
	a.nr_sequencia
into STRICT	vl_vencimento_w,
	cd_estabelecimento_w,
	dt_venc_titulo_w,
	dt_emissao_w,
	cd_cgc_repasse_w,
	cd_pessoa_fisica_w,
	nm_usuario_w,
	nr_seq_terceiro_w,
	dt_tributo_w,
	cd_cnpj_raiz_w,
	nr_seq_tipo_repasse_w,
	vl_vencimento_mat_w,
	vl_adiantamento_w,
	dt_base_trib_w,
	cd_empresa_w,
	vl_desp_cartao_w,
	nr_seq_vencimento_w
from	estabelecimento d,
	terceiro c,
	Repasse_terceiro b,
	repasse_terceiro_venc a
where	b.cd_estabelecimento	= d.cd_estabelecimento
and	b.nr_seq_terceiro	= c.nr_sequencia
and	b.nr_repasse_terceiro	= a.nr_repasse_terceiro
and	b.nr_repasse_terceiro	= nr_repasse_terceiro_p;

exception
	when others then

	select	count(1)
	into STRICT		qt_repasse_venc_w
	from	repasse_terceiro_venc
	where	nr_repasse_terceiro = nr_repasse_terceiro_p  LIMIT 1;

	if (qt_repasse_venc_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort( wheb_mensagem_pck.get_texto(1040445) );
	end if;

end;

--Verifica se deve consultar as regras gerais de tributos do contas a pagar
begin
select	coalesce(a.ie_tributo_pessoa,'S')
into STRICT	ie_tributo_pessoa_w
from	parametro_faturamento a
where	a.cd_estabelecimento	= cd_estabelecimento_w;
exception
when others then
	ie_tributo_pessoa_w := 'S';
end;

-- Desconta do valor de base de cálculo os valores de adiantamentos
vl_vencimento_w	:= coalesce(vl_vencimento_w,0) + vl_adiantamento_w;

--Obtém o tipo de tributação no qual a pessoa jurídica está enquadrada.
begin
select	ie_tipo_tributacao
into STRICT	ie_tipo_tributacao_w
from	pessoa_juridica
where	cd_cgc	= cd_cgc_repasse_w;
exception
when others then
	ie_tipo_tributacao_w	:= null;
end;

--obtém o código do CCM da pessoa física (Cadastro de Contribuintes Mobiliários), onde são registrados os dados cadastrais de todos os contribuintes de tributos mobiliários do Município
if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
	begin
	select	nr_ccm
	into STRICT	nr_ccm_w
	from	pessoa_fisica
	where	cd_pessoa_fisica	= cd_pessoa_fisica_w;
	exception
	when others then
		nr_ccm_w	:= null;
	end;
end if;

--Obtém valor total dos vencimentos para cálculo dos itens que não entram na base de cálculo
select	sum(a.vl_vencimento)
into STRICT	vl_total_vencimentos_w
from	repasse_terceiro_venc a
where	a.nr_repasse_terceiro	= nr_repasse_terceiro_p;

--Obtém dos itens de repasse, o valor correspondente aos itens que não entram na base de cálculo do Tributo
select	coalesce(sum(a.vl_repasse),0)
into STRICT	vl_item_sem_trib_w
from	repasse_terceiro_item a
where	a.nr_repasse_terceiro	= nr_repasse_terceiro_p
and	coalesce(a.ie_partic_tributo,'S')	= 'N';

--Cálculo para a nova base de cálculo se houver itens que não entram na base de cálculo.
if (vl_item_sem_trib_w <> 0) and (vl_total_vencimentos_w <> 0) then
	vl_item_sem_trib_w	:= vl_vencimento_w * (vl_item_sem_trib_w/vl_total_vencimentos_w);
	vl_vencimento_w		:= vl_vencimento_w - vl_item_sem_trib_w;
end if;

--Abertura do cursor que retorna as informações pertinentes a pasta tributo do cadastro completo de pessoas
for r_c_dados_trib_pf in c_dados_trib_pf(cd_pessoa_fisica_w, cd_estabelecimento_w, dt_emissao_w, dt_venc_titulo_w, nr_ccm_w) loop
	begin
	
	--Verifica se já existe o repasse da pasta Tributo do cadastro de pessoa física gerado para o repasse.
	select	count(1)
	into STRICT	qt_registro_w
	from	repasse_terceiro_tributo c,
		repasse_terceiro b,
		terceiro a
	where	b.nr_repasse_terceiro			= c.nr_repasse_terceiro
	and	a.nr_sequencia				= b.nr_seq_terceiro
	and	((c.cd_estabelecimento = cd_estabelecimento_w) or (coalesce(c.cd_estabelecimento::text, '') = ''))
	and	c.cd_tributo			 	= r_c_dados_trib_pf.cd_tributo
	and	a.cd_pessoa_fisica			= r_c_dados_trib_pf.cd_pessoa_fisica
	and	trunc(b.dt_mesano_referencia,'month')	= trunc(CASE WHEN r_c_dados_trib_pf.ie_tipo_data='E' THEN dt_emissao_w WHEN r_c_dados_trib_pf.ie_tipo_data='V' THEN dt_venc_titulo_w END ,'month');
	
	--Se não existir, deve gerar o registro na simulação
	if (qt_registro_w = 0) then
		
		ie_gerou_trib_pf_w	:= 'S';
		
		insert	into repasse_terceiro_tributo(cd_estabelecimento,
			cd_tributo,
			dt_atualizacao,
			dt_atualizacao_nrec,
			dt_imposto,
			nm_usuario,
			nm_usuario_nrec,
			nr_repasse_terceiro,
			nr_sequencia,
			pr_tributo,
			vl_base_calculo,
			vl_imposto,
			ie_pago_prev)
		values (cd_estabelecimento_w,
			r_c_dados_trib_pf.cd_tributo,
			clock_timestamp(),
			clock_timestamp(),
			trunc(CASE WHEN r_c_dados_trib_pf.ie_tipo_data='E' THEN dt_emissao_w WHEN r_c_dados_trib_pf.ie_tipo_data='V' THEN dt_venc_titulo_w END ,'dd'),
			nm_usuario_p,
			nm_usuario_p,
			nr_repasse_terceiro_p,
			nextval('repasse_terceiro_tributo_seq'),
			0,
			r_c_dados_trib_pf.vl_base_calculo,
			r_c_dados_trib_pf.vl_tributo,
			r_c_dados_trib_pf.ie_pago_prev_rep);
		
	end if;
	end;
	
--Fim do Cursor dos tributos lançados no cadastro de pessoa física
end loop;

vl_trib_acum_w	:= 0;

if (coalesce(ie_gerou_trib_pf_w,'N') = 'N') or (coalesce(ie_tributo_pessoa_w,'S') = 'S') then
	
	--Abertura do cursor que retorna os dados do cadastro dos tributos.
	for r_c_dados_tributo in c_dados_tributo(cd_pessoa_fisica_w, cd_cgc_repasse_w, nr_ccm_w, ie_tipo_tributacao_w, cd_estabelecimento_w) loop
	
		vl_base_calculo_w		:= vl_vencimento_w;
		
		--Calcular o tributo do repasse com a despesa de cartão imbutida 
		if (r_c_dados_tributo.ie_desc_desp_cartao = 'N') then
			vl_base_calculo_w	:= vl_vencimento_w + vl_desp_cartao_w;
		end if;
		
		pr_aliquota_w			:= 0;
		
		-- Verifica se já foi gerado algum outro tributo que esteja pago.
		select	count(1)
		into STRICT	qt_pago_outros_w
		from	repasse_terceiro_tributo
		where	nr_repasse_terceiro	= nr_repasse_terceiro_p
		and	cd_tributo	= r_c_dados_tributo.cd_tributo
		and	ie_pago_prev	= 'P';
		
		--[INICIO]>>>>>>>>>> DATA PARA GERAÇÃO DE TRIBUTO <<<<<<<<<<--

		/* 
		Opções: 
			V = Vencimento título
			R = Registro compromisso
			C = Data contábil ou Reg. compromisso
			B = Data da baixa (quando o tributo for gerado pela baixa)
			S = Data da baixa (quando trib gerado na baixa) ou Vencimento título
		Local no sistema = Shift+f11 > Aplicação principal > Cadastro Gerais > Tributos
		Tabela = TRIBUTO
		Atributo = IE_VENCIMENTO
		*/
		if (r_c_dados_tributo.ie_vencimento	= 'V') then
			dt_venc_tributo_w	:= dt_tributo_w;
		elsif (r_c_dados_tributo.ie_vencimento	= 'C') then
			dt_venc_tributo_w	:= coalesce(dt_tributo_w,dt_emissao_w);
		else
			dt_venc_tributo_w	:= dt_emissao_w;
		end if;
		--[FIM]>>>>>>>>>> DATA PARA GERAÇÃO DE TRIBUTO <<<<<<<<<<--

		
		--Obtém os dados da pasta Regra tributo contas a pagar
		SELECT * FROM OBTER_DADOS_TRIB_TIT_PAGAR(
				r_c_dados_tributo.cd_tributo, cd_estabelecimento_w, cd_cgc_repasse_w, cd_pessoa_fisica_w, cd_beneficiario_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, dt_venc_tributo_w, cd_variacao_w, ie_periodicidade_w, 'R', null, null, null, null, nr_seq_tipo_repasse_w, nr_seq_regra_w, null, qt_pago_outros_w, nr_seq_classe_w, cd_tipo_baixa_neg_w, vl_base_calculo_w, 'N', null, null, null, null) INTO STRICT cd_beneficiario_w, pr_aliquota_w, cd_cond_pagto_w, cd_conta_financ_w, nr_seq_trans_reg_w, nr_seq_trans_baixa_w, vl_minimo_base_w, vl_minimo_tributo_w, ie_acumulativo_w, vl_teto_base_w, vl_desc_dependente_w, cd_darf_w, cd_variacao_w, ie_periodicidade_w, nr_seq_regra_w, nr_seq_classe_w, cd_tipo_baixa_neg_w;

		--Conforme a regra encontrada, obtém mais algumas informações.		
		if (nr_seq_regra_w IS NOT NULL AND nr_seq_regra_w::text <> '') then

			select	coalesce(max(ie_mat_repasse),'S'),
				coalesce(max(PR_BASE_CALCULO),0),
				max(cd_estabelecimento),
				max(cd_empresa)
			into STRICT	ie_mat_repasse_w,
				pr_base_calculo_w,
				cd_estab_regra_w,
				cd_empresa_regra_w
			from 	tributo_conta_pagar
			where	nr_sequencia	= nr_seq_regra_w;
			
			--Define se o Tasy deverá considerar os materiais do repasse para terceiros para calcular este tributo. ATENÇÃO: A PHILIPS NÃO RECOMENDA DESMARCAR ESTE CAMPO.
			if (coalesce(ie_mat_repasse_w,'S') = 'N') then
				vl_base_calculo_w	:= vl_base_calculo_w - vl_vencimento_mat_w;
			end if;
			
			/*ATENÇÃO! Este campo só poderá ser utilizado somente quando o fornecedor se encaixar na normativa abaixo:
			INSTRUÇÃO NORMATIVA MPS/SRP Nº 3, DE 14 DE JULHO DE 2005 - DOU DE 15/07/2005
			Seção V 
			Apuração da Base de Cálculo da Retenção
			...
			Art. 150. Os valores de materiais ou de equipamentos, próprios ou de terceiros, exceto os equipamentos manuais, cujo fornecimento esteja previsto em contrato, sem a respectiva discriminação de valores, 
			desde que discriminados na nota fiscal, na fatura ou no recibo de prestação de serviços, não integram a base de cálculo da retenção, devendo o valor desta corresponder no mínimo a: (Nova redação dada pela IN MPS SRP nº 20, de 11/01/2007)
			I - cinqüenta por cento do valor bruto da nota fiscal, da fatura ou do recibo de prestação de serviços;*/
			if (coalesce(pr_base_calculo_w,0) <> 0) then
				vl_base_calculo_w	:= vl_base_calculo_w * (PR_BASE_CALCULO_w / 100);
			end if;
		end if;
		
		--Se encontrou alíquota para gera ro tributo, prossegue.
		if (pr_aliquota_w > 0) then
		
			ie_irpf_w		:= 'N';
			
			-- Calcular Redução base IRPF e saldo menos INSS 
			if (r_c_dados_tributo.ie_tipo_tributo = 'IR') then

				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then

					ie_irpf_w	:= 'S';

					select	coalesce(qt_dependente,0)
					into STRICT	qt_dependente_w
					from	pessoa_fisica
					where	cd_pessoa_fisica	= cd_pessoa_fisica_w;

					select	coalesce(sum(a.VL_IMPOSTO),0)
					into STRICT	vl_inss_w
					from	tributo b,
						repasse_terceiro_tributo a
					where	a.cd_tributo		= b.cd_tributo
					and	b.ie_tipo_tributo	= 'INSS'
					and	a.nr_repasse_terceiro	= nr_repasse_terceiro_p
					and	a.ie_pago_prev	= 'V';

				end if;
				
				vl_base_calculo_w		:= vl_base_calculo_w - vl_inss_w;

			elsif (r_c_dados_tributo.ie_tipo_tributo = 'ISRDOM') then

				if (cd_pessoa_fisica_w IS NOT NULL AND cd_pessoa_fisica_w::text <> '') then
					select	coalesce(qt_dependente,0)
					into STRICT	qt_dependente_w
					from	pessoa_fisica
					where	cd_pessoa_fisica	= cd_pessoa_fisica_w;

					ie_irpf_w	:= 'S';
				end if;

			end if;
			
			vl_tributo_w			:= vl_base_calculo_w * pr_aliquota_w / 100;
			
			--Está data é utilizada para retornar os dados da obter_valores_tributo

			--Não podemos utilizar o dt_vencimento_w, pois antes de chamar a obter_valores_tributo ele passa pela calcular_vencimento
			dt_dados_trib_w	:= null;
			
			--Determina qual será a data para base de cálculo dos tributos
			if (r_c_dados_tributo.ie_venc_repasse = 'S') then
				dt_vencimento_w		:= dt_base_trib_w;
			else
				if (r_c_dados_tributo.ie_vencimento = 'V') then
					dt_vencimento_w	:= coalesce(dt_venc_titulo_w,clock_timestamp());
				elsif (r_c_dados_tributo.ie_vencimento = 'C') then
					dt_vencimento_w		:= coalesce(dt_emissao_w,clock_timestamp());
				else
					dt_vencimento_w	:= coalesce(dt_emissao_w,clock_timestamp());
				end if;
			end if;
			
			dt_dados_trib_w	:= dt_vencimento_w;
			
			--Conforme a condição de pagamento, é calculado o novo vencimento e definida uma nova data de vencimento para o tributo.
			if (cd_cond_pagto_w IS NOT NULL AND cd_cond_pagto_w::text <> '') then
				SELECT * FROM calcular_vencimento(cd_estabelecimento_w, cd_cond_pagto_w, dt_vencimento_w, qt_venc_w, ds_venc_w) INTO STRICT qt_venc_w, ds_venc_w;	
				
				if (qt_venc_w = 1) then
					ds_venc_ww := ds_venc_w;
					if (substr(ds_venc_w,4,2) = '02') and (substr(ds_venc_w,1,2) > '28')then
						ds_venc_ww	:= '28/' || substr(ds_venc_w,4,7);
					end if;
					dt_vencimento_w	:= to_date(substr(ds_venc_ww,1,10),'dd/mm/yyyy');
				end if;

			end if;
			
			--Obter os valores de retenção do tributo de outras datas que tenham sido executados dentro do mesmo mês
			select	/*+ USE_CONCAT */				coalesce(sum(VL_SOMA_TRIB_NAO_RETIDO),0),
				coalesce(sum(VL_SOMA_BASE_NAO_RETIDO),0),
				coalesce(sum(VL_SOMA_TRIB_ADIC),0),
				coalesce(sum(VL_SOMA_BASE_ADIC),0),
				coalesce(sum(vl_tributo),0),
				coalesce(sum(vl_total_base),0),
				coalesce(sum(vl_reducao),0)
			into STRICT	vl_soma_trib_nao_retido_w,
				vl_soma_base_nao_retido_w,
				vl_soma_trib_adic_w,
				vl_soma_base_adic_w,
				vl_trib_anterior_w,
				vl_total_base_w,
				vl_reducao_w
			from	VALORES_TRIBUTO_V
			where	coalesce(cd_empresa,coalesce(cd_empresa_w,0)) = coalesce(cd_empresa_w,0)
			and	cd_tributo			= r_c_dados_tributo.cd_tributo
			and (ie_origem_valores		= 'RT'  or r_c_dados_tributo.ie_apuracao_piso = 'S')
			and	coalesce(cd_pessoa_fisica, CASE WHEN r_c_dados_tributo.ie_cnpj=Wheb_mensagem_pck.get_texto(800047) THEN  cd_cgc  ELSE cd_cnpj_raiz END )	= coalesce(cd_pessoa_fisica_w, CASE WHEN r_c_dados_tributo.ie_cnpj=Wheb_mensagem_pck.get_texto(800047) THEN  cd_cgc_repasse_w  ELSE cd_cnpj_raiz_w END )
			and	pkg_date_utils.start_of(dt_tributo, 'MONTH', 0)	= pkg_date_utils.start_of(dt_venc_tributo_w, 'MONTH', 0)
			and	((r_c_dados_tributo.ie_restringe_estab		= 'N') or (cd_estabelecimento		= cd_estabelecimento_w) or (cd_estab_financeiro		= cd_estabelecimento_w) or (coalesce(cd_estab_regra_w::text, '') = '' and cd_empresa = cd_empresa_regra_w))
			and (r_c_dados_tributo.ie_apuracao_piso		= 'N' or
				r_c_dados_tributo.ie_apuracao_piso		= ie_base_calculo)
			and	nr_repasse_terceiro <> nr_repasse_terceiro_p;

			/*select	nvl(sum(a.vl_base_calculo),0),
				nvl(sum(a.vl_imposto),0)
			into	vl_base_calculo_sim_w,
				vl_imposto_sim_w
			from	terceiro c,
				repasse_terceiro b,
				repasse_terceiro_tributo a
			where	nvl(c.cd_pessoa_fisica, decode(ie_cnpj_w, 'Estab', c.cd_cgc, obter_cnpj_raiz(c.cd_cgc)))	= nvl(cd_pessoa_fisica_w, decode(ie_cnpj_w, 'Estab', cd_cgc_repasse_w, cd_cnpj_raiz_w))
			and	b.nr_seq_terceiro	= c.nr_sequencia
			and	b.dt_mesano_referencia	< dt_mesano_referencia_w
			and	trunc(b.dt_mesano_referencia,'month')	= trunc(dt_mesano_referencia_w,'month')
			and	a.nr_repasse_terceiro	= b.nr_repasse_terceiro
			and	a.nr_repasse_terceiro	<> nr_repasse_terceiro_p
			and	a.cd_tributo		= cd_tributo_w;*/
			
			select	coalesce(sum(vl_imposto),0),
				coalesce(sum(vl_base_calculo),0)
			into STRICT	vl_pago_w,
				vl_base_calculo_paga_w
			from	repasse_terceiro_tributo
			where	nr_repasse_terceiro	= nr_repasse_terceiro_p
			and	cd_tributo	= r_c_dados_tributo.cd_tributo
			and	ie_pago_prev	= 'P';

			select	coalesce(sum(vl_base_calculo),0)
			into STRICT	vl_base_retido_outro_w
			from	repasse_terceiro_tributo
			where	nr_repasse_terceiro	= nr_repasse_terceiro_p
			and	cd_tributo	= r_c_dados_tributo.cd_tributo
			and	ie_pago_prev	= 'R';

			select	coalesce(sum(vl_base_calculo),0)
			into STRICT	vl_base_pago_adic_base_w
			from	repasse_terceiro_tributo
			where	nr_repasse_terceiro	= nr_repasse_terceiro_p
			and	cd_tributo	= r_c_dados_tributo.cd_tributo
			and	ie_pago_prev	= 'S';

			/*vl_trib_anterior_w	:= nvl(vl_trib_anterior_w,0) + nvl(vl_imposto_sim_w,0);
			vl_total_base_w		:= nvl(vl_total_base_w,0) + nvl(vl_base_calculo_sim_w,0);*/

			
			--Obtém os valores do tributo para inserção
			SELECT * FROM obter_valores_tributo(	ie_acumulativo_w, pr_aliquota_w, vl_minimo_base_w, vl_minimo_tributo_w, vl_soma_trib_nao_retido_w, vl_soma_trib_adic_w, vl_soma_base_nao_retido_w, vl_soma_base_adic_w, vl_base_calculo_w, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_teto_base_w, vl_trib_anterior_w, ie_irpf_w, vl_total_base_w, vl_reducao_w, vl_desc_dependente_w, qt_dependente_w, vl_base_calculo_paga_w, vl_base_pago_adic_base_w, vl_base_retido_outro_w, obter_outras_reducoes_irpf(cd_pessoa_fisica_w, cd_estabelecimento_w, dt_vencimento_w), dt_dados_trib_w, nr_seq_regra_irpf_w) INTO STRICT pr_aliquota_w, vl_base_calculo_w, vl_tributo_w, vl_trib_nao_retido_w, vl_trib_adic_w, vl_base_nao_retido_w, vl_base_adic_w, vl_reducao_w, vl_desc_dependente_w, nr_seq_regra_irpf_w;
			
			--Se considera pessoa física, busca os valores já gerados na pasta Tributo do Cadastro completo de pessoa física.
			if (r_c_dados_tributo.ie_considera_valor_pf = 'S') then
				
				select	obter_valor_pf_trib(r_c_dados_tributo.cd_tributo,cd_pessoa_fisica_w,dt_tributo_w,cd_estabelecimento_w,nr_seq_vencimento_w)
				into STRICT	vl_trib_cad_pf_w
				;
				
				if (vl_trib_cad_pf_w	<> 0) then
					vl_teto_base_calc_w	:=	(vl_teto_base_w * dividir_sem_round((pr_aliquota_w)::numeric,100));
					if (vl_trib_cad_pf_w	>= vl_teto_base_calc_w) then
						vl_tributo_w	:= 0;
					elsif	((vl_trib_cad_pf_w + vl_tributo_w) > vl_teto_base_calc_w) then
						vl_tributo_w	:= vl_tributo_w	- ((vl_trib_cad_pf_w + vl_tributo_w) - vl_teto_base_calc_w);
					end if;
					
				end if;
			end if;
			
			--Se possui tributo que não esteja negativo, gera a simulação.
			if (vl_tributo_w >= 0) then

				insert	into repasse_terceiro_tributo(cd_beneficiario,
					cd_estabelecimento,
					cd_tributo,
					dt_atualizacao,
					dt_atualizacao_nrec,
					dt_imposto,
					nm_usuario,
					nm_usuario_nrec,
					nr_repasse_terceiro,
					nr_sequencia,
					pr_tributo,
					vl_base_calculo,
					vl_imposto,
					ie_pago_prev)
				values (cd_beneficiario_w,
					cd_estabelecimento_w,
					r_c_dados_tributo.cd_tributo,
					clock_timestamp(),
					clock_timestamp(),
					dt_vencimento_w,
					nm_usuario_p,
					nm_usuario_p,
					nr_repasse_terceiro_p,
					nextval('repasse_terceiro_tributo_seq'),
					pr_aliquota_w,
					vl_base_calculo_w,
					vl_tributo_w,
					'V');
				
				select	coalesce(sum(CASE WHEN a.ie_soma_diminui='S' THEN (coalesce(vl_tributo_w,0) * - 1) WHEN a.ie_soma_diminui='D' THEN  coalesce(vl_tributo_w,0)  ELSE 0 END ),0)
				into STRICT	vl_tributo_w
				from	tributo a
				where	a.cd_tributo		= r_c_dados_tributo.cd_tributo;
				
				vl_trib_acum_w	:= vl_trib_acum_w + vl_tributo_w;
				
			end if;
		end if;
		
	--Fim do Cursor que retorno os dados dos cadastros dos tributos
	end loop;
end if;	

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_repasse_terceiro_tributo (nr_repasse_terceiro_p bigint, nm_usuario_p text) FROM PUBLIC;

