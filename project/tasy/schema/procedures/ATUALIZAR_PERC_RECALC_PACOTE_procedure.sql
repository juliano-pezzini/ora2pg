-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE atualizar_perc_recalc_pacote ( nr_atendimento_p bigint, nr_interno_conta_p bigint, cd_convenio_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE

					
qt_regra_tx_cirurgia_w		bigint;
nr_cirurgia_ant_w		bigint;
qt_regra_tx_w			bigint;
qt_proc_regra_w			bigint;
qt_regra_ww			bigint;
	
vl_pacote_maior_valor_w		double precision;
nr_pacote_maior_valor_w		bigint;
vl_pacote_seg_maior_valor_w	double precision;
nr_pacote_seg_maior_valor_w	bigint;
nr_cirurgia_pacote_ant_w 	bigint	:= 0;
nr_seq_regra_tx_pacote_ant_w	bigint	:= 0;
	
ie_achou_w			varchar(1)	:= 'N';
ie_regra_perc_cirurgia_w	varchar(1)	:= 'N';
ie_diferente_w			varchar(1)	:= 'N';
ie_permite_varias_regras_w	varchar(1);
	
tx_pacote_maior_w		regra_tx_pacote_cirurgia.tx_pacote_maior%type;
tx_pacote_w			regra_tx_pacote_cirurgia.tx_pacote%type;
	
nr_sequencia_w			atendimento_pacote.nr_sequencia%type;
nr_seq_proc_pacote_w		atendimento_pacote.nr_seq_procedimento%type;
nr_seq_proc_origem_w		atendimento_pacote.nr_seq_proc_origem%type;
nr_seq_regra_tx_pacote_w	atendimento_pacote.nr_seq_regra_tx%type;
	
nr_cirurgia_w			procedimento_paciente.nr_cirurgia%type;
vl_pacote_w			procedimento_paciente.vl_procedimento%type;
cd_procedimento_w		procedimento_paciente.cd_procedimento%type;
ie_origem_proced_w		procedimento_paciente.ie_origem_proced%type;
nr_seq_proc_interno_w		procedimento_paciente.nr_seq_proc_interno%type;
ie_via_acesso_w			procedimento_paciente.ie_via_acesso%type;

tx_pacote_demais_w		regra_tx_pacote.tx_pacote_demais%type;
ie_regra_geral_w		regra_tx_pacote.ie_regra_geral%type;
nr_seq_regra_tx_w		regra_tx_pacote.nr_sequencia%type;
tx_pacote_seg_maior_w		regra_tx_pacote.tx_pacote_seg_maior%type;

cd_area_procedimento_w		estrutura_procedimento_v.cd_area_procedimento%type;
cd_especialidade_proc_w		estrutura_procedimento_v.cd_especialidade%type;
cd_grupo_proc_w			estrutura_procedimento_v.cd_grupo_proc%type;

c01 CURSOR FOR
	SELECT 	a.nr_sequencia,
		somente_numero(obter_dados_propaci('NC',nr_seq_proc_origem)),
		obter_valor_pacote(nr_seq_procedimento),
		nr_seq_procedimento
	from 	atendimento_pacote a
	where 	a.nr_seq_proc_origem in (SELECT nr_sequencia
					from 	procedimento_paciente b
                                        where 	b.nr_interno_conta =  nr_interno_conta_p)
	and 	somente_numero(obter_dados_propaci('NC',nr_seq_proc_origem)) is not null
	and 	somente_numero(obter_dados_propaci('NC',nr_seq_proc_origem)) > 0
	order by 2,3 desc; --cuidado ao alterar o order by desse cursor
c02 CURSOR FOR
	SELECT  coalesce(tx_pacote_maior,100),
		coalesce(tx_pacote_demais,100),
		coalesce(ie_regra_geral,'N'),
		coalesce(nr_sequencia,0),
		tx_pacote_seg_maior
	from 	regra_tx_pacote
	where	cd_convenio = cd_convenio_p
	and 	ie_achou_w = 'N'
	and 	coalesce(ie_regra_via_acesso,'N') = 'N'
	and	coalesce(cd_estabelecimento, cd_estabelecimento_p) = coalesce(cd_estabelecimento_p,0)
	order by coalesce(ie_regra_geral,'N');

c03 CURSOR FOR
	SELECT 	a.nr_sequencia,
		obter_valor_pacote(a.nr_seq_procedimento),
		a.nr_seq_procedimento,
		a.nr_seq_proc_origem,
		b.nr_cirurgia
	from 	atendimento_pacote a,
		procedimento_paciente b
	where 	a.nr_seq_proc_origem = b.nr_sequencia
	and	a.nr_seq_proc_origem in (SELECT nr_sequencia
					from 	procedimento_paciente b
                                        where 	b.nr_interno_conta =  nr_interno_conta_p)
	order by 2 desc; --cuidado ao alterar o order by desse cursor
	
c04 CURSOR FOR
	SELECT 	a.nr_sequencia,
		obter_valor_pacote(a.nr_seq_procedimento),
		a.nr_seq_procedimento,
		a.nr_seq_proc_origem,
		coalesce(b.nr_cirurgia,0),
		a.nr_seq_regra_tx
	from 	atendimento_pacote a,
		procedimento_paciente b
	where 	a.nr_seq_proc_origem = b.nr_sequencia
	and	a.nr_seq_proc_origem in (SELECT nr_sequencia
					from 	procedimento_paciente b
                                        where 	b.nr_interno_conta =  nr_interno_conta_p)
	order by 6,5,2 desc; --cuidado ao alterar o order by desse cursor
	
c05 CURSOR FOR
	SELECT  coalesce(tx_pacote_maior,100),
		coalesce(tx_pacote_demais,100),
		coalesce(ie_regra_geral,'N'),
		coalesce(nr_sequencia,0),
		tx_pacote_seg_maior
	from 	regra_tx_pacote
	where	cd_convenio = cd_convenio_p
	and 	coalesce(IE_REGRA_VIA_ACESSO,'N') = ie_diferente_w
	and	coalesce(cd_estabelecimento,  wheb_usuario_pck.get_cd_estabelecimento) =  wheb_usuario_pck.get_cd_estabelecimento
	order by coalesce(ie_regra_geral,'N');


BEGIN

ie_regra_perc_cirurgia_w	:= coalesce(obter_valor_param_usuario(67,532,obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p),'N');
ie_permite_varias_regras_w	:= coalesce(obter_valor_param_usuario(67,565,obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p),'N');

select 	count(*)
into STRICT	qt_regra_tx_cirurgia_w
from 	regra_tx_pacote_cirurgia
where 	cd_convenio = cd_convenio_p
and	coalesce(cd_estabelecimento, coalesce(cd_estabelecimento_p,0)) = coalesce(cd_estabelecimento_p,0);

if (qt_regra_tx_cirurgia_w > 0) then

	-- os 131665
	-- pacote de maior valor 100%
	-- restante 50%
	-- essas regras valem somente para pacotes cirurgicos feitos na mesma cirurgia.
	nr_cirurgia_ant_w	:= 0;
	vl_pacote_maior_valor_w	:= 0;
	nr_pacote_maior_valor_w	:= 0;

	select  coalesce(max(tx_pacote_maior),100),
		coalesce(max(tx_pacote),100)
	into STRICT	tx_pacote_maior_w,
		tx_pacote_w
	from 	regra_tx_pacote_cirurgia
	where	cd_convenio = cd_convenio_p
	and	coalesce(cd_estabelecimento, coalesce(cd_estabelecimento_p,0)) = coalesce(cd_estabelecimento_p,0);

	open c01;
	loop
	fetch c01 into
		nr_sequencia_w,
		nr_cirurgia_w,
		vl_pacote_w,
		nr_seq_proc_pacote_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		if (nr_cirurgia_w <> nr_cirurgia_ant_w) then

			nr_cirurgia_ant_w	:= nr_cirurgia_w;
			nr_pacote_maior_valor_w	:= nr_sequencia_w;
			vl_pacote_maior_valor_w	:= vl_pacote_w;

			update	atendimento_pacote
			set 	pr_afaturar    = coalesce(tx_pacote_maior_w,pr_afaturar)
			where 	nr_atendimento 	= nr_atendimento_p
			and 	nr_sequencia 	= nr_sequencia_w;

		else
			update	atendimento_pacote
			set 	pr_afaturar    = coalesce(tx_pacote_w,pr_afaturar)
			where 	nr_atendimento 	= nr_atendimento_p
			and 	nr_sequencia 	= nr_sequencia_w;
		end if;

		end;
	end loop;
	close c01;

end if;

-- Regra % Pacote Cirurgia independente de Cirurgia (Vale para todos os pacote)  // Verifica a Estrutura
select 	count(*)
into STRICT	qt_regra_tx_w
from 	regra_tx_pacote
where 	cd_convenio = cd_convenio_p
and	coalesce(cd_estabelecimento,coalesce(cd_estabelecimento_p,1)) = coalesce(cd_estabelecimento_p,1)
and 	coalesce(ie_regra_via_acesso,'N') = 'N';

if (qt_regra_tx_w > 0) then

	-- os 233888
	ie_achou_w:= 'N';
	vl_pacote_maior_valor_w	:= 0;
	nr_pacote_maior_valor_w	:= 0;
	nr_pacote_seg_maior_valor_w:= 0;
	vl_pacote_seg_maior_valor_w:= 0;

	open c02;
	loop
	fetch c02 into
		tx_pacote_maior_w,
		tx_pacote_w,
		ie_regra_geral_w,
		nr_seq_regra_tx_w,
		tx_pacote_seg_maior_w;
	EXIT WHEN NOT FOUND; /* apply on c02 */
		begin

		open c03;
		loop
		fetch c03 into
			nr_sequencia_w,
			vl_pacote_w,
			nr_seq_proc_pacote_w,
			nr_seq_proc_origem_w,
			nr_cirurgia_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin

			select 	max(cd_procedimento),
				max(ie_origem_proced),
				max(nr_seq_proc_interno)
			into STRICT	cd_procedimento_w,
				ie_origem_proced_w,
				nr_seq_proc_interno_w
			from 	procedimento_paciente
			where 	nr_sequencia = nr_seq_proc_origem_w;

			select 	max(cd_area_procedimento),
				max(cd_especialidade),
				max(cd_grupo_proc)
			into STRICT	cd_area_procedimento_w,
				cd_especialidade_proc_w,
				cd_grupo_proc_w
			from 	estrutura_procedimento_v
			where	cd_procedimento = cd_procedimento_w
			and 	ie_origem_proced = ie_origem_proced_w;

			select 	count(*)
			into STRICT	qt_proc_regra_w
			from 	regra_tx_pacote_item
			where 	nr_seq_regra_tx = nr_seq_regra_tx_w
			and 	coalesce(cd_area_procedimento, coalesce(cd_area_procedimento_w,0)) = coalesce(cd_area_procedimento_w,0)
			and 	coalesce(cd_especialidade, coalesce(cd_especialidade_proc_w,0)) = coalesce(cd_especialidade_proc_w,0)
			and 	coalesce(cd_grupo_proc, coalesce(cd_grupo_proc_w,0)) = coalesce(cd_grupo_proc_w,0)
			and	coalesce(cd_procedimento, coalesce(cd_procedimento_w,0)) = coalesce(cd_procedimento_w,0)
			and 	((coalesce(cd_procedimento,0) = 0) or (coalesce(ie_origem_proced, coalesce(ie_origem_proced_w,0)) = coalesce(ie_origem_proced_w,0)))
			and 	coalesce(nr_seq_proc_interno, coalesce(nr_seq_proc_interno_w, 0)) = coalesce(nr_seq_proc_interno_w, 0);

			if (qt_proc_regra_w > 0) and (ie_permite_varias_regras_w = 'N') then
				ie_achou_w:= 'S';
				exit;
			end if;
			-- OS 359619 Ou faz da forma acima, quando encontrar para, ou le todas.
			if (qt_proc_regra_w > 0) and (ie_permite_varias_regras_w = 'S') then

				update	atendimento_pacote a
				set 	a.nr_seq_regra_tx	= nr_seq_regra_tx_w
				where 	a.nr_atendimento 	= nr_atendimento_p
				and 	a.nr_sequencia 		= nr_sequencia_w				
				and 	not exists (SELECT  nr_seq_regra_tx
						    from    regra_tx_pacote
						    where   nr_sequencia = a.nr_seq_regra_tx);

				if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
			end if;

			end;
		end loop;
		close c03;

		if (ie_achou_w = 'S') and (ie_permite_varias_regras_w = 'N') then
			exit;
		end if;
		--OS 359619
		end;
	end loop;
	close c02;

	if (ie_permite_varias_regras_w = 'S') and (coalesce(nr_seq_regra_tx_w,0) > 0) then

		update	atendimento_pacote a
		set 	a.nr_seq_regra_tx = nr_seq_regra_tx_w
		where 	a.nr_atendimento 	= nr_atendimento_p
		and 	not exists (SELECT  nr_seq_regra_tx
				    from    regra_tx_pacote
				    where   nr_sequencia = a.nr_seq_regra_tx);

		if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;
	end if;

	-- Quando chegar aqui o sistema ja encontrou a regra
	if (ie_permite_varias_regras_w = 'N') then

		open c03;
		loop
		fetch c03 into
			nr_sequencia_w,
			vl_pacote_w,
			nr_seq_proc_pacote_w,
			nr_seq_proc_origem_w,
			nr_cirurgia_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin

			if (nr_pacote_maior_valor_w = 0) or
				(nr_cirurgia_w <> nr_cirurgia_pacote_ant_w AND ie_regra_perc_cirurgia_w = 'S')then
				nr_pacote_maior_valor_w	:= nr_sequencia_w;
				vl_pacote_maior_valor_w	:= vl_pacote_w;

				update	atendimento_pacote
				set 	pr_afaturar    = coalesce(tx_pacote_maior_w,pr_afaturar)
				where 	nr_atendimento 	= nr_atendimento_p
				and 	nr_sequencia 	= nr_sequencia_w;
			else
				if (tx_pacote_seg_maior_w IS NOT NULL AND tx_pacote_seg_maior_w::text <> '') and (nr_pacote_seg_maior_valor_w = 0) then
					nr_pacote_seg_maior_valor_w	:= nr_sequencia_w;
					vl_pacote_seg_maior_valor_w	:= vl_pacote_w;

					update	atendimento_pacote
					set 	pr_afaturar	= coalesce(tx_pacote_seg_maior_w,pr_afaturar)
					where 	nr_atendimento	= nr_atendimento_p
					and 	nr_sequencia	= nr_sequencia_w;
				else
					update	atendimento_pacote
					set 	pr_afaturar    = coalesce(tx_pacote_w,pr_afaturar)
					where 	nr_atendimento 	= nr_atendimento_p
					and 	nr_sequencia 	= nr_sequencia_w;
				end if;
			end if;
			nr_cirurgia_pacote_ant_w	:= nr_cirurgia_w;
			end;
		end loop;
		close c03;
	else
		open c04;
		loop
		fetch c04 into
			nr_sequencia_w,
			vl_pacote_w,
			nr_seq_proc_pacote_w,
			nr_seq_proc_origem_w,
			nr_cirurgia_w,
			nr_seq_regra_tx_pacote_w;
		EXIT WHEN NOT FOUND; /* apply on c04 */
			begin

			begin
			select  coalesce(tx_pacote_maior,100),
				coalesce(tx_pacote_demais,100),
				tx_pacote_seg_maior
			into STRICT	tx_pacote_maior_w,
				tx_pacote_w,
				tx_pacote_seg_maior_w
			from 	regra_tx_pacote a
			where	nr_sequencia = nr_seq_regra_tx_pacote_w;
			exception
				when others then
				tx_pacote_maior_w	:= 100;
				tx_pacote_w	 	:= 100;
				tx_pacote_seg_maior_w	:= null;
			end;

			if (nr_pacote_maior_valor_w = 0) or
				(nr_cirurgia_w <> nr_cirurgia_pacote_ant_w AND ie_regra_perc_cirurgia_w = 'S') or (nr_seq_regra_tx_pacote_ant_w <> nr_seq_regra_tx_pacote_w) then
				nr_pacote_maior_valor_w	:= nr_sequencia_w;
				vl_pacote_maior_valor_w	:= vl_pacote_w;

				update	atendimento_pacote
				set 	pr_afaturar    = coalesce(tx_pacote_maior_w,pr_afaturar)
				where 	nr_atendimento 	= nr_atendimento_p
				and 	nr_sequencia 	= nr_sequencia_w;
			else
				if (tx_pacote_seg_maior_w IS NOT NULL AND tx_pacote_seg_maior_w::text <> '') and (nr_pacote_seg_maior_valor_w = 0) then
					nr_pacote_seg_maior_valor_w	:= nr_sequencia_w;
					vl_pacote_seg_maior_valor_w	:= vl_pacote_w;

					update	atendimento_pacote
					set 	pr_afaturar    = coalesce(tx_pacote_seg_maior_w,pr_afaturar)
					where 	nr_atendimento 	= nr_atendimento_p
					and 	nr_sequencia 	= nr_sequencia_w;
				else
					update	atendimento_pacote
					set 	pr_afaturar    = coalesce(tx_pacote_w,pr_afaturar)
					where 	nr_atendimento 	= nr_atendimento_p
					and 	nr_sequencia 	= nr_sequencia_w;
				end if;

			end if;
			
			if (nr_seq_regra_tx_pacote_ant_w <> nr_seq_regra_tx_pacote_w) then
				nr_pacote_seg_maior_valor_w	:= 0;
				vl_pacote_seg_maior_valor_w	:= 0;
			end if;
			
			nr_cirurgia_pacote_ant_w	:= nr_cirurgia_w;
			nr_seq_regra_tx_pacote_ant_w	:= nr_seq_regra_tx_pacote_w;
			end;
		end loop;
		close c04;
	end if;
end if;

-- Regra % Pacote Cirurgia independente de Cirurgia (Vale para todos os pacote)  // Via de acesso
select 	count(*)
into STRICT	qt_regra_tx_w
from 	regra_tx_pacote
where 	cd_convenio = cd_convenio_p
and 	coalesce(ie_regra_via_acesso,'N') <> 'N';

if (qt_regra_tx_w > 0) then

	-- os 259856
	vl_pacote_maior_valor_w	:= 0;
	nr_pacote_maior_valor_w	:= 0;
	nr_pacote_seg_maior_valor_w:= 0;
	vl_pacote_seg_maior_valor_w:= 0;

	--Aplicar o %
	open c03;
	loop
	fetch c03 into
		nr_sequencia_w,
		vl_pacote_w,
		nr_seq_proc_pacote_w,
		nr_seq_proc_origem_w,
		nr_cirurgia_w;
	EXIT WHEN NOT FOUND; /* apply on c03 */
		begin

		select	coalesce(max(ie_via_acesso),'U')
		into STRICT	ie_via_acesso_w
		from 	procedimento_paciente
		where 	nr_sequencia = nr_seq_proc_origem_w;

		if	((ie_via_acesso_w = 'M') or (ie_via_acesso_w = 'U')) then -- Mesma via ou Unica ou principal
			ie_diferente_w		:= 'M'; -- 'M' Mesma Via	-- 'D' Vias diferentes
		elsif	((ie_via_acesso_w = 'B') or (ie_via_acesso_w = 'D')) then -- Bilateral ou via diferente
			ie_diferente_w		:= 'D'; -- 'M' Mesma Via	-- 'D' Vias diferentes
		end if;

		-- Buscar a regra correspondente
		open c05;
		loop
		fetch c05 into
			tx_pacote_maior_w,
			tx_pacote_w,
			ie_regra_geral_w,
			nr_seq_regra_tx_w,
			tx_pacote_seg_maior_w;
		EXIT WHEN NOT FOUND; /* apply on c05 */
			begin
			tx_pacote_maior_w:= tx_pacote_maior_w;
			tx_pacote_w	 := tx_pacote_w;
			ie_regra_geral_w := ie_regra_geral_w;
			nr_seq_regra_tx_w:= nr_seq_regra_tx_w;
			tx_pacote_seg_maior_w:= tx_pacote_seg_maior_w;
			end;
		end loop;
		close c05;


		/* Consistir estrutura OS 293503  INICIO*/

		select 	max(cd_procedimento),
			max(ie_origem_proced),
			max(nr_seq_proc_interno)
		into STRICT	cd_procedimento_w,
			ie_origem_proced_w,
			nr_seq_proc_interno_w
		from 	procedimento_paciente
		where 	nr_sequencia = nr_seq_proc_origem_w;

		select 	max(cd_area_procedimento),
			max(cd_especialidade),
			max(cd_grupo_proc)
		into STRICT	cd_area_procedimento_w,
			cd_especialidade_proc_w,
			cd_grupo_proc_w
		from 	estrutura_procedimento_v
		where	cd_procedimento = cd_procedimento_w
		and 	ie_origem_proced = ie_origem_proced_w;

		select 	count(*)
		into STRICT	qt_regra_ww
		from 	regra_tx_pacote_item;

		if (qt_regra_ww > 0) then

			select 	count(*)
			into STRICT	qt_proc_regra_w
			from 	regra_tx_pacote_item
			where 	nr_seq_regra_tx = nr_seq_regra_tx_w
			and 	coalesce(cd_area_procedimento, coalesce(cd_area_procedimento_w,0)) = coalesce(cd_area_procedimento_w,0)
			and 	coalesce(cd_especialidade, coalesce(cd_especialidade_proc_w,0)) = coalesce(cd_especialidade_proc_w,0)
			and 	coalesce(cd_grupo_proc, coalesce(cd_grupo_proc_w,0)) = coalesce(cd_grupo_proc_w,0)
			and	coalesce(cd_procedimento, coalesce(cd_procedimento_w,0)) = coalesce(cd_procedimento_w,0)
			and 	((coalesce(cd_procedimento,0) = 0) or (coalesce(ie_origem_proced, coalesce(ie_origem_proced_w,0)) = coalesce(ie_origem_proced_w,0)))
			and 	coalesce(nr_seq_proc_interno, coalesce(nr_seq_proc_interno_w, 0)) = coalesce(nr_seq_proc_interno_w, 0);

		end if;
		/* Consistir estrutura OS 293503  FINAL*/

		if	((qt_regra_ww = 0) or (qt_proc_regra_w > 0)) then

			if (nr_pacote_maior_valor_w = 0) then

				nr_pacote_maior_valor_w	:= nr_sequencia_w;
				vl_pacote_maior_valor_w	:= vl_pacote_w;

				update	atendimento_pacote
				set 	pr_afaturar    = coalesce(tx_pacote_maior_w,pr_afaturar)
				where 	nr_atendimento 	= nr_atendimento_p
				and 	nr_sequencia 	= nr_sequencia_w;
			else
				if (tx_pacote_seg_maior_w IS NOT NULL AND tx_pacote_seg_maior_w::text <> '') and (nr_pacote_seg_maior_valor_w = 0) then
					nr_pacote_seg_maior_valor_w	:= nr_sequencia_w;
					vl_pacote_seg_maior_valor_w	:= vl_pacote_w;

					update	atendimento_pacote
					set 	pr_afaturar    = coalesce(tx_pacote_seg_maior_w,pr_afaturar)
					where 	nr_atendimento 	= nr_atendimento_p
					and 	nr_sequencia 	= nr_sequencia_w;
				else
					update	atendimento_pacote
					set 	pr_afaturar    = coalesce(tx_pacote_w,pr_afaturar)
					where 	nr_atendimento 	= nr_atendimento_p
					and 	nr_sequencia 	= nr_sequencia_w;
				end if;
			end if;
		end if;
		end;
	end loop;
	close c03;
end if;

if (coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S') then commit; end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE atualizar_perc_recalc_pacote ( nr_atendimento_p bigint, nr_interno_conta_p bigint, cd_convenio_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

