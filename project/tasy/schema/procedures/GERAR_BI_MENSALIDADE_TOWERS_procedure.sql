-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_bi_mensalidade_towers ( nr_seq_arq_informacao_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


ds_sql_w			varchar(4000);
ds_filtros_w			varchar(4000);
arquivos_bi_filtros_w		pls_arquivos_bi_filtros%rowtype;
arquivos_bi_inf_w		pls_arquivos_bi_inf%rowtype;
nr_seq_segurado_w		bigint;
nm_id_sid_w			pls_arquivos_bi_inf.nm_id_sid%type;
nm_id_serial_w			pls_arquivos_bi_inf.nm_id_serial%type;
arq_texto_w			utl_file.file_type;
ds_local_w			varchar(255) := null;
ds_erro_w			varchar(255);
ds_log_w    			varchar(4000);
ds_linha_w			varchar(10000);
------------------------------------------------------------------------------------------------------------------------------
cd_usuario_plano_w		pls_segurado_carteira.cd_usuario_plano%type;
cd_usuario_plano_ww		pls_segurado_carteira.cd_usuario_plano%type;
ds_tipo_contratacao_w		varchar(60);
ds_plano_w			varchar(255);
cd_pessoa_fisica_w		pessoa_fisica.cd_pessoa_fisica%type;
ds_segmentacao_w		valor_dominio.ds_valor_dominio%type;
cd_cgc_estipulante_w		pls_contrato.cd_cgc_estipulante%type;
ie_preco_w			varchar(60);
nr_seq_titular_w		pls_segurado.nr_seq_titular%type;
ie_situacao_trabalhista_w	varchar(60);
nr_cpf_w			pessoa_fisica.nr_cpf%type;
ds_titular_w			varchar(60);
ds_parentesco_w			grau_parentesco.ds_parentesco%type;
nr_seq_plano_w			pls_plano.nr_sequencia%type;
nr_seq_preco_produto_w		pls_preco_produto.nr_sequencia%type;
cd_subgrupo_produto_w		pls_preco_produto.cd_subgrupo_produto%type;
bind_w				sql_pck.t_dado_bind;
cursor_w			sql_pck.t_cursor;
dt_mes_referencia_w		pls_mensalidade_segurado.dt_mesano_referencia%type;
vl_mensalidade_w		pls_mensalidade_segurado.vl_mensalidade%type;
nr_titulo_w			titulo_receber.nr_titulo%type;
dt_emissao_w			titulo_receber.dt_emissao%type;
nm_fantasia_w			pls_plano.nm_fantasia%type;
nr_seq_contrato_w		pls_contrato.nr_sequencia%type;
nr_seq_mens_segurado_w		pls_mensalidade_segurado.nr_sequencia%type;
nr_seq_mensalidade_w		pls_mensalidade.nr_sequencia%type;

procedure grava_log_erro(	ds_erro_p	text,
				ds_stack_p    	text) is

;
BEGIN

-- Obter o log a ser gravado
ds_log_w  := substr('Erro: ' || ds_erro_p || pls_util_pck.enter_w ||
		    'Stack: ' || ds_stack_p, 1, 4000);

-- coloca com status de processado com erros.
update	pls_arquivos_bi_inf
set	ie_status		= 'E',
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp(),
	DT_FIM_GERACAO		= clock_timestamp(),
	ds_erro			= ds_log_w
where	nr_sequencia 		= nr_seq_arq_informacao_p;

commit;

CALL wheb_mensagem_pck.exibir_mensagem_abort(306247);

end;

begin

select	sid,
	serial#
into STRICT	nm_id_sid_w,
	nm_id_serial_w
from	v$session
where 	audsid = userenv('SESSIONID');

-- coloca com status em processamento.
update	pls_arquivos_bi_inf
set	ie_status		= 'P',
	nm_id_sid		= nm_id_sid_w,
	nm_id_serial		= nm_id_serial_w,
	nm_usuario		= nm_usuario_p,
	dt_atualizacao		= clock_timestamp(),
	DT_INICIO_GERACAO	= clock_timestamp()
where	nr_sequencia 		= nr_seq_arq_informacao_p;
commit;

select	*
into STRICT	arquivos_bi_inf_w
from	pls_arquivos_bi_inf
where	nr_sequencia	= nr_seq_arq_informacao_p;

select	*
into STRICT	arquivos_bi_filtros_w
from	pls_arquivos_bi_filtros
where	nr_sequencia	= arquivos_bi_inf_w.nr_seq_arq_filtros;

begin
SELECT * FROM obter_evento_utl_file(8, null, ds_local_w, ds_erro_w) INTO STRICT ds_local_w, ds_erro_w;
exception
when others then
	ds_local_w := null;
end;

if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
	CALL grava_log_erro(ds_erro_w,dbms_utility.format_error_backtrace);
end if;

begin
arq_texto_w := utl_file.fopen(ds_local_w,arquivos_bi_inf_w.nm_arquivo,'w');
exception
when others then
	ds_erro_w := obter_erro_utl_open(SQLSTATE);

	CALL grava_log_erro(ds_erro_w,dbms_utility.format_error_backtrace);
end;

if (arquivos_bi_filtros_w.nr_seq_segurado IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_segurado::text <> '') then
	ds_filtros_w := ds_filtros_w || 'and c.nr_sequencia = :nr_seq_segurado ';
end if;

if (arquivos_bi_filtros_w.nr_seq_plano IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_plano::text <> '') then
	ds_filtros_w	:= ds_filtros_w||' and b.nr_sequencia = :nr_seq_plano ';
end if;

if (arquivos_bi_filtros_w.nr_seq_grupo_produto IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_grupo_produto::text <> '') then
	ds_filtros_w	:= ds_filtros_w||'  and substr(pls_se_grupo_preco_produto(:nr_seq_grupo_produto,b.nr_sequencia),1,255) = ''S''';
end if;

if (arquivos_bi_filtros_w.nr_seq_contrato IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_contrato::text <> '') then
	ds_filtros_w	:= ds_filtros_w||' and c.nr_seq_contrato = :nr_seq_contrato ';
end if;

if (arquivos_bi_filtros_w.nr_seq_grupo_contrato IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_grupo_contrato::text <> '') then
	ds_filtros_w	:= ds_filtros_w||' and exists (	select 1
						from	PLS_CONTRATO_GRUPO x
						where	x.nr_seq_contrato 	= c.nr_sequencia
						and	x.nr_seq_grupo		= :nr_seq_grupo)';
end if;

ds_sql_w	:= 	'	select	obter_valor_dominio(1666,b.ie_tipo_contratacao), '||
			'		b.nm_fantasia,		'||
			'		obter_valor_dominio(1665,b.ie_segmentacao), 	'||
			'		obter_valor_dominio(1669,b.ie_preco),		'||
			'		c.nr_sequencia,		'||
			'		a.dt_mesano_referencia,	'||
			'		a.vl_mensalidade,	'||
			'		b.nr_sequencia,		'||
			'		a.nr_sequencia,		'||
			'		d.nr_sequencia		'||
			'	from	pls_mensalidade_segurado a, '||
			'		pls_plano b,		'||
			'		pls_segurado c,		'||
			'		pls_mensalidade d	'||
			'	where	a.nr_seq_mensalidade = d.nr_sequencia 	'||
			'	and	a.nr_seq_plano = b.nr_sequencia 	'||
			'	and	a.nr_seq_segurado = c.nr_sequencia 	'||
			'	and	a.dt_mesano_referencia = :dt_mesano_referencia '||ds_filtros_w;

begin

	utl_file.put_line(arq_texto_w, 'SEGMENTO;TIPO DE PLANO;CODIGO DO PLANO;NUMERO DA FATURA;CNPJ DA EMPRESA;TIPO DE CONTRATO;'||
					'NUMERO IDENTIFICACAO TITULAR;NUMERO IDENTIFICACAO USUARIO;CPF DO USUARIO;TITULARIDADE;TIPO DE BENEFICIARIO;TIPO DE USUARIO;'||
					'DATA INICIO VIGENCIA MENSALIDADE;DATA FIM VIGENCIA MENSALIDADE;DATA EMISSAO MENSALIDADE;VALOR DA MENSALIDADE;' || chr(13));
	utl_file.fflush(arq_texto_w);
	bind_w.delete;
	bind_w := sql_pck.bind_variable(':dt_mesano_referencia', arquivos_bi_filtros_w.dt_mes_referencia, bind_w);

	if (arquivos_bi_filtros_w.nr_seq_segurado IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_segurado::text <> '') then
		bind_w := sql_pck.bind_variable(':nr_seq_segurado', arquivos_bi_filtros_w.nr_seq_segurado, bind_w);
	end if;

	if (arquivos_bi_filtros_w.nr_seq_plano IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_plano::text <> '') then
		bind_w := sql_pck.bind_variable(':nr_seq_plano', arquivos_bi_filtros_w.nr_seq_plano, bind_w);
	end if;

	if (arquivos_bi_filtros_w.nr_seq_grupo_produto IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_grupo_produto::text <> '') then
		bind_w := sql_pck.bind_variable(':nr_seq_grupo_produto', arquivos_bi_filtros_w.nr_seq_grupo_produto, bind_w);
	end if;

	if (arquivos_bi_filtros_w.nr_seq_contrato IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_contrato::text <> '') then
		bind_w := sql_pck.bind_variable(':nr_seq_contrato', arquivos_bi_filtros_w.nr_seq_contrato, bind_w);
	end if;

	if (arquivos_bi_filtros_w.nr_seq_grupo_contrato IS NOT NULL AND arquivos_bi_filtros_w.nr_seq_grupo_contrato::text <> '') then
		bind_w := sql_pck.bind_variable(':nr_seq_grupo', arquivos_bi_filtros_w.nr_seq_grupo_contrato, bind_w);
	end if;

	bind_w := sql_pck.executa_sql_cursor(ds_sql_w, bind_w);

	loop
		fetch cursor_w into ds_tipo_contratacao_w, nm_fantasia_w, ds_segmentacao_w, ie_preco_w, nr_seq_segurado_w, dt_mes_referencia_w,
					vl_mensalidade_w, nr_seq_plano_w,nr_seq_mens_segurado_w,nr_seq_mensalidade_w;
		EXIT WHEN NOT FOUND; /* apply on cursor_w */

		select	a.nr_seq_contrato,
			b.cd_usuario_plano,
			a.cd_pessoa_fisica,
			a.nr_seq_titular,
			CASE WHEN coalesce(a.nr_seq_titular::text, '') = '' THEN 'Titular'  ELSE 'Dependente' END ,
			CASE WHEN coalesce(a.nr_seq_titular::text, '') = '' THEN 'Titular'  ELSE c.ds_parentesco END ,
			coalesce(obter_valor_dominio(3840,a.ie_situacao_atend),'Ativo')
		into STRICT	nr_seq_contrato_w,
			cd_usuario_plano_w,
			cd_pessoa_fisica_w,
			nr_seq_titular_w,
			ds_titular_w,
			ds_parentesco_w,
			ie_situacao_trabalhista_w
		FROM pls_segurado a
LEFT OUTER JOIN pls_segurado_carteira b ON (a.nr_sequencia = b.nr_seq_segurado)
LEFT OUTER JOIN grau_parentesco c ON (a.nr_seq_parentesco = c.nr_sequencia)
WHERE a.nr_sequencia 		= nr_seq_segurado_w;

		select 	nr_sequencia||'-'||coalesce(nm_fantasia,ds_plano)
		into STRICT	ds_plano_w
		from 	pls_plano
		where	nr_sequencia = nr_seq_plano_w;

		if (nr_seq_titular_w IS NOT NULL AND nr_seq_titular_w::text <> '') then
			select	max(cd_usuario_plano)
			into STRICT	cd_usuario_plano_ww
			from 	pls_segurado_carteira
			where	nr_seq_segurado = nr_seq_titular_w;
		else
			cd_usuario_plano_ww := cd_usuario_plano_w;
		end if;


		select	max(nr_titulo),
			max(dt_emissao)
		into STRICT	nr_titulo_w,
			dt_emissao_w
		from 	titulo_receber
		where	nr_seq_mensalidade = nr_seq_mensalidade_w;

		select	max(cd_cgc_estipulante)
		into STRICT	cd_cgc_estipulante_w
		from	pls_contrato
		where	nr_sequencia = nr_seq_contrato_w;

		select	max(nr_cpf)
		into STRICT	nr_cpf_w
		from	pessoa_fisica
		where	cd_pessoa_fisica = cd_pessoa_fisica_w;

		ds_linha_w	:= ds_tipo_contratacao_w||';'||ds_segmentacao_w||';'||ds_plano_w||';'||nr_titulo_w||';'||cd_cgc_estipulante_w||';'||ie_preco_w||';'||
				cd_usuario_plano_ww||';'||cd_usuario_plano_w||';'||nr_cpf_w||';'||ds_titular_w||';'||ds_parentesco_w||';'||ie_situacao_trabalhista_w||';'||
				to_char(dt_mes_referencia_w,'dd/mm/yyyy')||';'||to_char(fim_mes(dt_mes_referencia_w),'dd/mm/yyyy')||';'||to_char(dt_emissao_w,'dd/mm/yyyy')||';'||vl_mensalidade_w||';';

		utl_file.put_line(arq_texto_w, ds_linha_w || chr(13));
		utl_file.fflush(arq_texto_w);
	end loop;
	close cursor_w;

	update	pls_arquivos_bi_inf
	set	ie_status		= 'C',
		DT_FIM_GERACAO		= clock_timestamp()
	where	nr_sequencia 		= nr_seq_arq_informacao_p;

exception
when others then
	CALL grava_log_erro(sqlerrm,dbms_utility.format_error_backtrace);
end;
if (cursor_w%isopen) then
	close cursor_w;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_bi_mensalidade_towers ( nr_seq_arq_informacao_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

