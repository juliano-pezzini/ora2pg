-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE generate_batch_per_order_unit ( nr_prescricao_p bigint, nr_order_unit_seq_p bigint, nr_sequencia_p bigint, nr_seq_horario_p bigint, ie_so_aprazado_p text, nm_usuario_p text, ie_origem_lote_p text) AS $body$
DECLARE

  nr_sequencia_w                 bigint;
  cd_material_w                  bigint;
  cd_material_ww                 bigint;
  nr_seq_mat_hor_w               bigint;
  nr_seq_mat_hor_ww              bigint;
  cd_unidade_medida_w            varchar(30);
  qt_dispensar_w                 double precision;
  qt_dispensar_hor_w             double precision;
  nr_seq_turno_w                 bigint;
  nr_seq_turno_ant_w             bigint := 0;
  cd_setor_atendimento_w         integer;
  dt_horario_w                   timestamp;
  dt_horario_ant_w               timestamp;
  hr_inicio_turno_w              varchar(5);
  hr_hora_w                      varchar(5);
  dt_atend_lote_w                timestamp;
  dt_inicio_turno_w              timestamp;
  cd_estabelecimento_w           smallint;
  ie_urgente_w                   varchar(1);
  ds_maq_user_w                  varchar(80);
  cd_perfil_ativo_w              integer;
  nr_seq_classif_w               bigint;
  nr_seq_classif_ant_w           bigint := 0;
  ds_erro_w                      varchar(2000);
  qt_min_antes_atend_w           bigint;
  qt_min_receb_setor_w           bigint;
  qt_min_entr_setor_w            bigint;
  qt_min_disp_farm_w             bigint;
  qt_min_atend_farm_w            bigint;
  qt_min_inicio_atend_w          bigint;
  cd_tipo_baixa_w                smallint;
  ie_conta_paciente_w            varchar(1);
  ie_atualiza_estoque_w          varchar(1);
  cd_local_estoque_w             smallint;
  cd_local_estoque_ant_w         smallint := 0;
  ie_hora_antes_w                varchar(1);
  ie_classif_nao_padrao_w        varchar(15);
  qt_prioridade_w                smallint;
  ie_lote_acm_sn_w               varchar(1);
  ie_gerar_acm_w                 varchar(1);
  ie_gerar_sn_w                  varchar(1);
  ie_acm_w                       varchar(1);
  ie_se_necessario_w             varchar(1);
  ie_gera_lote_orig_w            varchar(1);
  ie_gera_lote_medic_pac_w       varchar(1);
  ie_gerar_novo_lote_turno_dia_w varchar(15);
  ie_gerar_lote_area_w           varchar(1);
  ie_gerar_solucao_separado_w    varchar(1);
  ie_alto_risco_w                varchar(1);
  ie_novo_lote_dia_w             varchar(1);
  ie_setor_atual_w               varchar(1);
  nr_atendimento_w               bigint;
  ie_gera_lote_separado_w        varchar(1);
  ie_gera_lote_desdobrado_w      varchar(1);
  ie_arq_pyxis_w                 varchar(1);
  qt_existe_regra_w              bigint;
  ie_gerar_lote_apos_horario_w   varchar(1);
  nr_seq_regra_termo_w           bigint;
  nr_seq_regra_ccih_w            bigint;
  nr_seq_regra_alto_risco_w      bigint;
  ie_itens_associados_termo_w    varchar(1);
  ie_itens_associados_w          varchar(1);
  ie_itens_associados_ccih_w     varchar(1);
  ie_gerar_lote_unico_w          bigint := 0;
  nr_seq_superior_w              bigint;
  nr_seq_prescr_mat_w            bigint;
  ie_motivo_prescricao_w         varchar(5);
  ie_quimio_w                    varchar(1);
  ie_gera_integracao_w           parametros_farmacia.ie_gera_integracao%TYPE;
  ie_define_disp_prescr_w        varchar(1);
  ie_atualiza_regra_local_kit_w  varchar(1);
  nr_regra_local_disp_w          bigint;
  nr_item_prescr_w               bigint;
  ie_gerar_ap_lote_w             varchar(1) := 'S';
  nr_seq_ap_lote_review_w        ap_lote_review.nr_sequencia%TYPE;
  qt_exist_order_unit_batch_w    bigint;
  c001 CURSOR FOR
    SELECT
    b.cd_material,
           b.nr_sequencia,
           b.nr_seq_material,
           b.cd_unidade_medida,
           b.qt_dispensar,
           b.qt_dispensar_hor,
           coalesce(b.nr_seq_turno, -1),
           b.dt_horario,
           To_char(b.dt_horario, 'hh24:mi'),
           coalesce(a.cd_estabelecimento, 1),
           b.ie_urgente,
           b.nr_seq_classif,
           coalesce(b.cd_local_estoque, coalesce(c.cd_local_estoque, a.cd_local_estoque))
    cd_local
                                            ,
           c.nr_sequencia
    FROM   material x,
           prescr_mat_hor b,
           prescr_material c,
           prescr_medica a,
           cpoe_order_unit cou,
           cpoe_material cmat
    WHERE  cou.nr_sequencia = cmat.nr_seq_cpoe_order_unit
           AND cmat.nr_sequencia = c.nr_seq_mat_cpoe
           AND a.nr_prescricao = b.nr_prescricao
           AND a.nr_prescricao = nr_prescricao_p
           AND cou.nr_sequencia = nr_order_unit_seq_p
           AND x.cd_material = c.cd_material
           AND a.nr_prescricao = c.nr_prescricao
           AND c.nr_sequencia = b.nr_seq_material
           AND coalesce(x.ie_gerar_lote, 'S') = 'S'
           AND coalesce(b.ie_situacao, 'A') <> 'I'
           AND coalesce(c.ie_suspenso, 'N') <> 'S'
           AND coalesce(b.ie_gerar_lote, 'S') = 'S'
           AND coalesce(c.ie_gerar_lote, 'S') = 'S'
           AND coalesce(a.dt_suspensao::text, '') = ''
           AND c.cd_motivo_baixa = 0
           AND coalesce(c.dt_baixa::text, '') = ''
           AND (b.nr_seq_turno IS NOT NULL AND b.nr_seq_turno::text <> '')
           AND coalesce(b.qt_dispensar_hor, 0) > 0
           AND coalesce(b.nr_seq_lote::text, '') = ''
           AND coalesce(cou.nr_seq_lote::text, '') = ''
           AND coalesce(b.nr_seq_superior::text, '') = ''
           AND Obter_se_setor_lote(a.cd_setor_atendimento) = 'S'
           AND Obter_se_horario_liberado(b.dt_lib_horario, b.dt_horario) = 'S'
           AND ( ( ie_gerar_acm_w = 'S' )
                  OR (ie_gerar_acm_w = 'N'
                        AND coalesce(c.ie_acm, 'N') = 'N') )
           AND ( ( ie_gerar_sn_w = 'S' )
                  OR (ie_gerar_sn_w = 'N'
                        AND coalesce(c.ie_se_necessario, 'N') = 'N') )
           AND ( ( ie_gera_lote_orig_w = 'N' )
                  OR ( ( ie_origem_lote_p <> 'AIP' )
                        OR ( coalesce(b.ie_aprazado, 'N') = 'S' ) ) )
           AND ( ( ie_gera_lote_medic_pac_w = 'S' )
                  OR ( ( ie_gera_lote_medic_pac_w = 'N' )
                       AND ( coalesce(c.ie_medicacao_paciente, 'N') = 'N' ) ) )
           AND ( ( ie_gerar_lote_area_w = 'S' )
                  OR ( coalesce(b.nr_seq_area_prep::text, '') = '' ) )
           AND ( ( coalesce(ie_gera_lote_separado_w, 'N') = 'N' )
                  OR ( ( coalesce(ie_gera_lote_separado_w, 'N') = 'S' )
                       AND ( coalesce(x.ie_gera_lote_separado, 'N') = 'N' ) ) )
           AND ( ( coalesce(ie_alto_risco_w, 'N') = 'N' )
                  OR ( ( coalesce(ie_alto_risco_w, 'N') = 'S' )
                       AND (
                 Obter_se_material_risco(a.cd_setor_atendimento, b.cd_material)
                 =
                 'N'
                           ) ) )
           AND ( ( coalesce(ie_classif_nao_padrao_w::text, '') = '' )
                  OR ( ( coalesce(b.ie_padronizado, 'S') = 'S' )
                       AND ( coalesce(b.nr_seq_superior::text, '') = '' ) )
                  OR ( ( coalesce(b.ie_padronizado, 'S') = 'N' )
                       AND (b.nr_seq_superior IS NOT NULL AND b.nr_seq_superior::text <> '')
                       AND EXISTS (SELECT 1
                                  FROM   prescr_material p,
                                         material_estab o
                                  WHERE  p.nr_prescricao = b.nr_prescricao
                                         AND p.nr_sequencia = b.nr_seq_superior
                                         AND p.cd_material = o.cd_material
                                         AND coalesce(o.ie_padronizado, 'S') = 'S'
                                         AND o.cd_estabelecimento =
                                             a.cd_estabelecimento) )
                  OR ( ( coalesce(b.ie_padronizado, 'S') = 'S' )
                       AND (b.nr_seq_superior IS NOT NULL AND b.nr_seq_superior::text <> '')
                       AND EXISTS (SELECT 1
                                  FROM   prescr_material d,
                                         material_estab t
                                  WHERE  d.nr_prescricao = b.nr_prescricao
                                         AND d.nr_sequencia = b.nr_seq_superior
                                         AND d.cd_material = t.cd_material
                                         AND coalesce(t.ie_padronizado, 'S') = 'S'
                                         AND t.cd_estabelecimento =
               a.cd_estabelecimento) ) )
    ORDER  BY cd_local,
              dt_horario,
              nr_seq_classif;
  c10 CURSOR FOR
    SELECT b.cd_material,
           b.nr_sequencia,
           b.cd_unidade_medida,
           b.qt_dispensar,
           b.qt_dispensar_hor,
           coalesce(b.nr_seq_turno, -1),
           a.cd_setor_atendimento,
           b.dt_horario,
           To_char(b.dt_horario, 'hh24:mi'),
           coalesce(a.cd_estabelecimento, 1),
           b.ie_urgente,
           b.nr_seq_classif,
           coalesce(b.cd_local_estoque, coalesce(c.cd_local_estoque, a.cd_local_estoque))
                                                     cd_local
    FROM   material x,
           prescr_mat_hor b,
           prescr_material c,
           prescr_medica a,
           cpoe_order_unit cou,
           cpoe_material cmat
    WHERE  cou.nr_sequencia = cmat.nr_seq_cpoe_order_unit
           AND cmat.nr_sequencia = c.nr_seq_mat_cpoe
           AND a.nr_prescricao = b.nr_prescricao
           AND a.nr_prescricao = c.nr_prescricao
           AND c.nr_sequencia = b.nr_seq_material
           AND a.nr_prescricao = nr_prescricao_p
           AND cou.nr_sequencia = nr_order_unit_seq_p
           AND x.cd_material = c.cd_material
           AND coalesce(x.ie_gerar_lote, 'S') = 'S'
           AND coalesce(nr_seq_prescr_mat_w, 0) > 0
           AND coalesce(b.nr_seq_lote::text, '') = ''
           AND coalesce(cou.nr_seq_lote::text, '') = ''
           AND Obter_se_setor_lote(a.cd_setor_atendimento) = 'S'
           AND b.nr_seq_superior = nr_seq_prescr_mat_w
           AND c.cd_motivo_baixa = 0
           AND coalesce(b.ie_gerar_lote, 'S') = 'S'
           AND coalesce(c.ie_gerar_lote, 'S') = 'S'
           AND coalesce(b.qt_dispensar_hor, 0) > 0
           AND coalesce(c.dt_baixa::text, '') = ''
           AND (b.nr_seq_turno IS NOT NULL AND b.nr_seq_turno::text <> '')
           AND b.nr_seq_turno = nr_seq_turno_w
           AND Obter_se_horario_liberado(b.dt_lib_horario, b.dt_horario) = 'S'
           AND ( ( ie_gerar_acm_w = 'S' )
                  OR (ie_gerar_acm_w = 'N'
                        AND coalesce(c.ie_acm, 'N') = 'N') )
           AND ( ( ie_gerar_sn_w = 'S' )
                  OR (ie_gerar_sn_w = 'N'
                        AND coalesce(c.ie_se_necessario, 'N') = 'N') )
           AND ( ( ie_origem_lote_p <> 'AIS' )
                  OR ( ie_origem_lote_p = 'AIS'  AND  b.ie_aprazado = 'S' ) )
           AND ( ( ie_gera_lote_orig_w = 'N' )
                  OR ( ( ie_origem_lote_p <> 'AIP' )
                        OR ( coalesce(b.ie_aprazado, 'N') = 'S' ) ) )
           AND ( ( ie_gera_lote_medic_pac_w = 'S' )
                  OR ( ( ie_gera_lote_medic_pac_w = 'N' )
                       AND ( coalesce(c.ie_medicacao_paciente, 'N') = 'N' ) ) )
           AND ( ( ie_gerar_lote_area_w = 'S' )
                  OR ( coalesce(b.nr_seq_area_prep::text, '') = '' ) )
           AND ( ( coalesce(ie_alto_risco_w, 'N') = 'N' )
                  OR ( ( coalesce(ie_alto_risco_w, 'N') = 'S' )
                       AND (
                 Obter_se_material_risco(a.cd_setor_atendimento, b.cd_material)
                 =
                 'N'
                           ) ) )
    ORDER  BY cd_local,
              nr_seq_classif,
              dt_horario;
  c02 CURSOR FOR
    SELECT To_char(b.hr_inicial, 'hh24:mi')
    FROM   regra_turno_disp_param b,
           regra_turno_disp a
    WHERE  a.nr_sequencia = b.nr_seq_turno
           AND a.cd_estabelecimento = cd_estabelecimento_w
           AND a.nr_sequencia = nr_seq_turno_w
           AND ( coalesce(b.cd_setor_atendimento, cd_setor_atendimento_w) =
                 cd_setor_atendimento_w )
    ORDER  BY coalesce(b.cd_setor_atendimento, 0),
              To_char(b.hr_inicial, 'hh24:mi');
  c03 CURSOR FOR
    SELECT cd_setor_atendimento,
           nr_seq_turno,
           nr_seq_classif,
           qt_min_antes_atend,
           qt_min_receb_setor,
           qt_min_entr_setor,
           qt_min_disp_farm,
           qt_min_atend_farm,
           qt_min_inicio_atend,
           coalesce(ie_hora_antes, 'H')
    FROM   regra_tempo_disp
    WHERE  cd_estabelecimento = cd_estabelecimento_w
           AND coalesce(ie_situacao, 'A') = 'A'
    ORDER  BY coalesce(nr_seq_classif, 0),
              coalesce(nr_seq_turno, 0),
              coalesce(cd_setor_atendimento, 0);
  c20 CURSOR FOR
    SELECT cd_tipo_baixa
    FROM   regra_disp_lote_farm
    WHERE  ( ( ie_motivo_prescricao = ie_motivo_prescricao_w )
              OR ( coalesce(ie_motivo_prescricao::text, '') = '' ) )
           AND clock_timestamp() BETWEEN To_date(To_char(clock_timestamp(), 'dd/mm/yyyy')
                                       ||' '
                                       ||To_char(coalesce(dt_hora_inicio, clock_timestamp()),
                                         'hh24:mi:ss'
                                         ),
                                                   'dd/mm/yyyy hh24:mi:ss') AND
                                                   To_date(
                               To_char(clock_timestamp(), 'dd/mm/yyyy')
                                       ||' '
                                       ||To_char(coalesce(dt_hora_fim, clock_timestamp()),
                                         'hh24:mi:ss'),
                                                   'dd/mm/yyyy hh24:mi:ss'
                               )
           AND pkg_date_utils.Start_of(clock_timestamp(), 'dd', 0) BETWEEN
               pkg_date_utils.Start_of(dt_inicio_vigencia, 'dd', 0) AND
               pkg_date_utils.Start_of(coalesce(dt_fim_vigencia, clock_timestamp()), 'dd', 0)
           AND coalesce(cd_setor_atendimento, cd_setor_atendimento_w) =
               cd_setor_atendimento_w
           AND coalesce(cd_estabelecimento, cd_estabelecimento_w) =
               cd_estabelecimento_w
           AND coalesce(ie_situacao, 'A') = 'A'
           AND ( ( ie_quimio_w <> 'S'
                   AND coalesce(ie_quimioterapicas, 'N') <> 'S' )
                  OR ( ie_quimio_w = 'S' ) )
    ORDER  BY CASE WHEN ie_quimioterapicas='S' THEN  'Z'  ELSE CASE WHEN ie_quimioterapicas='N' THEN  'C'  ELSE 'B' END  END ,
              coalesce(cd_setor_atendimento, 0),
              coalesce(ie_motivo_prescricao, 0);

BEGIN
    SELECT coalesce(Max('S'), 'N')
    INTO STRICT   ie_quimio_w
    FROM   paciente_atendimento
    WHERE  nr_prescricao = nr_prescricao_p;

    BEGIN
        SELECT Substr(Obter_inf_sessao(0)
                      ||' - '
                      || Obter_inf_sessao(1), 1, 80)
        INTO STRICT   ds_maq_user_w
;

        cd_perfil_ativo_w := obter_perfil_ativo;

        SELECT Max(cd_setor_atendimento),
               Max(cd_estabelecimento),
               Max(nr_atendimento),
               Max(ie_motivo_prescricao)
        INTO STRICT   cd_setor_atendimento_w, cd_estabelecimento_w, nr_atendimento_w,
               ie_motivo_prescricao_w
        FROM   prescr_medica
        WHERE  nr_prescricao = nr_prescricao_p;

        ie_setor_atual_w := Obter_param_usuario(1113, 378, cd_perfil_ativo_w, nm_usuario_p, cd_estabelecimento_w, ie_setor_atual_w);

        ie_define_disp_prescr_w := coalesce(Obter_valor_param_usuario(924, 851,
                                       obter_perfil_ativo, nm_usuario_p,
                                       cd_estabelecimento_w), 'N');

        IF ( ie_setor_atual_w = 'S' )
           AND ( ie_origem_lote_p = 'AIP' ) THEN
          cd_setor_atendimento_w := coalesce(Obter_setor_atendimento(nr_atendimento_w
                                        ),
                                    cd_setor_atendimento_w);
        END IF;

        SELECT Max(ie_classif_urgencia),
               coalesce(Max(ie_gerar_acm_lote), 'S'),
               coalesce(Max(ie_gerar_sn_lote), 'S'),
               coalesce(Max(ie_gerar_novo_lote_turno_dia), 'S'),
               coalesce(Max(ie_gerar_lote_area), 'S'),
               coalesce(Max(ie_gerar_solucao_separado), 'S'),
               coalesce(Max(ie_gerar_alto_risco_sep), 'S'),
               coalesce(Max(ie_novo_lote_dia), 'N'),
               coalesce(Max(ie_gerar_mat_separado), 'N'),
               coalesce(Max(ie_lote_desdobrado), 'N'),
               coalesce(Max(ie_gerar_lote_apos_horario), 'S'),
               Max(nr_seq_regra_alto_risco),
               Max(nr_seq_regra_termo),
               Max(nr_seq_regra_ccih),
               coalesce(Max(ie_atualiza_regra_local_kit), 'N')
        INTO STRICT   ie_classif_nao_padrao_w, ie_gerar_acm_w, ie_gerar_sn_w,
               ie_gerar_novo_lote_turno_dia_w,
        ie_gerar_lote_area_w, ie_gerar_solucao_separado_w, ie_alto_risco_w,
               ie_novo_lote_dia_w,
        ie_gera_lote_separado_w, ie_gera_lote_desdobrado_w,
               ie_gerar_lote_apos_horario_w
        , nr_seq_regra_alto_risco_w,
        nr_seq_regra_termo_w, nr_seq_regra_ccih_w, ie_atualiza_regra_local_kit_w
        FROM   parametros_farmacia
        WHERE  cd_estabelecimento = cd_estabelecimento_w;

        IF ( coalesce(nr_seq_regra_termo_w, 0) > 0 ) THEN
          SELECT ie_itens_associados
          INTO STRICT   ie_itens_associados_termo_w
          FROM   regra_geracao_lote_sep
          WHERE  cd_estabelecimento = cd_estabelecimento_w
                 AND nr_sequencia = nr_seq_regra_termo_w;
        END IF;

        IF ( coalesce(nr_seq_regra_alto_risco_w, 0) > 0 ) THEN
          SELECT ie_itens_associados
          INTO STRICT   ie_itens_associados_w
          FROM   regra_geracao_lote_sep
          WHERE  cd_estabelecimento = cd_estabelecimento_w
                 AND nr_sequencia = nr_seq_regra_alto_risco_w;
        END IF;

        IF ( coalesce(nr_seq_regra_ccih_w, 0) > 0 ) THEN
          SELECT ie_itens_associados
          INTO STRICT   ie_itens_associados_ccih_w
          FROM   regra_geracao_lote_sep
          WHERE  cd_estabelecimento = cd_estabelecimento_w
                 AND nr_sequencia = nr_seq_regra_ccih_w;
        END IF;

        ie_gera_lote_orig_w := coalesce(Obter_valor_param_usuario(1113, 138,
                                   obter_perfil_ativo, nm_usuario_p,
                                   cd_estabelecimento_w),
                               'N'
                               ); /* virgilio 26/05/2009*/
        ie_gera_lote_medic_pac_w := coalesce(Obter_valor_param_usuario(924, 389,
                                        obter_perfil_ativo, nm_usuario_p,
                                        cd_estabelecimento_w), 'N');
        /* virgilio 06/08/2009*/

        /*fabio e jonas - para que busque a parametrizacao do adep e caso for d(depende da regra) ai entao e verificado nos parametros da farmacia*/

        IF ( ie_origem_lote_p IN ( 'AIP', 'GAI', 'AIS' ) ) THEN
          BEGIN
              ie_lote_acm_sn_w := coalesce(Obter_valor_param_usuario(1113, 107,
                                      obter_perfil_ativo,
                                      nm_usuario_p,
                                      cd_estabelecimento_w
                                      ),
                                  'S'
                                        );

              IF ( ie_lote_acm_sn_w = 'S' )
                  OR ( ie_lote_acm_sn_w = 'N' ) THEN
                ie_gerar_acm_w := ie_lote_acm_sn_w;

                ie_gerar_sn_w := ie_lote_acm_sn_w;
              END IF;
          END;
        END IF;

        OPEN c20;

        LOOP
            FETCH c20 INTO cd_tipo_baixa_w;

            EXIT WHEN NOT FOUND; /* apply on c20 */

            BEGIN
                cd_tipo_baixa_w := cd_tipo_baixa_w;
            END;
        END LOOP;

        CLOSE c20;

        IF (cd_tipo_baixa_w IS NOT NULL AND cd_tipo_baixa_w::text <> '') THEN
          SELECT Max(ie_conta_paciente),
                 Max(ie_atualiza_estoque)
          INTO STRICT   ie_conta_paciente_w, ie_atualiza_estoque_w
          FROM   tipo_baixa_prescricao
          WHERE  cd_tipo_baixa = cd_tipo_baixa_w
                 AND ie_prescricao_devolucao = 'P';
        END IF;

        INSERT INTO ap_lote_log(nr_sequencia,
                     dt_atualizacao,
                     nm_usuario,
                     dt_atualizacao_nrec,
                     nm_usuario_nrec,
                     nr_prescricao,
                     nr_seq_mat_hor,
                     nr_seq_lote,
                     ds_tipo_item,
                     ds_conteudo,
                     ds_stack)
        VALUES ( nextval('ap_lote_log_seq'),
                    clock_timestamp(),
                    nm_usuario_p,
                    clock_timestamp(),
                    nm_usuario_p,
                    nr_prescricao_p,
                    nr_seq_horario_p,
                    NULL,
                    'generate_batch_per_order_unit',
                    ' nr_sequencia_p='
                    || nr_sequencia_p
                    || ' nr_seq_horario_p='
                    || nr_seq_horario_p
                    || ' ie_so_aprazado_p='
                    || ie_so_aprazado_p
                    || ' nm_usuario_p='
                    || nm_usuario_p
                    || ' ie_origem_lote_p='
                    || ie_origem_lote_p
                    || ' cd_setor_atendimento_w='
                    || cd_setor_atendimento_w
                    || ' cd_estabelecimento_w='
                    || cd_estabelecimento_w
                    || ' nr_atendimento_w='
                    || nr_atendimento_w
                    || ' ie_setor_atual_w='
                    || ie_setor_atual_w
                    || ' ie_classif_nao_padrao_w='
                    || ie_classif_nao_padrao_w
                    || ' ie_gerar_acm_w='
                    || ie_gerar_acm_w
                    || ' ie_gerar_sn_w='
                    || ie_gerar_sn_w
                    || ' ie_gerar_novo_lote_turno_dia_w='
                    || ie_gerar_novo_lote_turno_dia_w
                    || ' ie_gerar_lote_area_w='
                    || ie_gerar_lote_area_w
                    || ' ie_gerar_solucao_separado_w='
                    || ie_gerar_solucao_separado_w
                    || ' ie_alto_risco_w='
                    || ie_alto_risco_w
                    || ' ie_novo_lote_dia_w='
                    || ie_novo_lote_dia_w
                    || ' ie_gera_lote_separado_w='
                    || ie_gera_lote_separado_w
                    || ' ie_gera_lote_desdobrado_w='
                    || ie_gera_lote_desdobrado_w
                    || ' ie_gerar_lote_apos_horario_w='
                    || ie_gerar_lote_apos_horario_w
                    || ' nr_seq_regra_alto_risco_w='
                    || nr_seq_regra_alto_risco_w
                    || ' nr_seq_regra_termo_w='
                    || nr_seq_regra_termo_w
                    || ' nr_seq_regra_ccih_w='
                    || nr_seq_regra_ccih_w
                    || ' ie_arq_pyxis_w='
                    || ie_arq_pyxis_w
                    || ' ie_gera_lote_orig_w='
                    || ie_gera_lote_orig_w
                    || ' ie_lote_acm_sn_w='
                    || ie_lote_acm_sn_w
                    || ' ie_gera_lote_medic_pac_w='
                    || ie_gera_lote_medic_pac_w
                    || ' ie_gerar_lote_unico_w='
                    || ie_gerar_lote_unico_w,
                    Substr(dbms_utility.format_call_stack, 1, 2000));

        IF ( coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S' ) THEN
          COMMIT;
        END IF;

        OPEN c001;

        LOOP
            FETCH c001 INTO cd_material_w, nr_seq_mat_hor_w, nr_seq_prescr_mat_w
            ,
            cd_unidade_medida_w, qt_dispensar_w, qt_dispensar_hor_w,
            nr_seq_turno_w,
            dt_horario_w, hr_hora_w, cd_estabelecimento_w, ie_urgente_w,
            nr_seq_classif_w,
            cd_local_estoque_w, nr_item_prescr_w;

            EXIT WHEN NOT FOUND; /* apply on c001 */

            BEGIN
                IF ( ie_define_disp_prescr_w = 'S' ) THEN
                  nr_seq_mat_hor_ww := nr_seq_mat_hor_w;

                  IF ( coalesce(ie_atualiza_regra_local_kit_w, 'N') = 'N' ) THEN
                    SELECT coalesce(Max(nr_seq_superior), 0)
                    INTO STRICT   nr_seq_superior_w
                    FROM   prescr_mat_hor
                    WHERE  (nr_seq_superior IS NOT NULL AND nr_seq_superior::text <> '')
                           AND nr_sequencia = nr_seq_mat_hor_ww
                           AND nr_seq_turno = nr_seq_turno_w;

                    IF ( nr_seq_superior_w > 0 ) THEN
                      SELECT coalesce(Max(nr_sequencia), 0)
                      INTO STRICT   nr_seq_mat_hor_ww
                      FROM   prescr_mat_hor
                      WHERE  nr_seq_material = nr_seq_superior_w
                             AND nr_prescricao = nr_prescricao_p
                             AND nr_seq_turno = nr_seq_turno_w;
                    END IF;
                  END IF;

                  SELECT coalesce(Max(nr_regra_local_disp), 0)
                  INTO STRICT   nr_regra_local_disp_w
                  FROM   prescr_mat_hor
                  WHERE  nr_sequencia = nr_seq_mat_hor_ww;

                  SELECT coalesce(Max(ie_gerar_ap_lote), 'S')
                  INTO STRICT   ie_gerar_ap_lote_w
                  FROM   regra_local_dispensacao
                  WHERE  nr_sequencia = nr_regra_local_disp_w;
                ELSE
                  SELECT coalesce(Max(nr_seq_superior), 0)
                  INTO STRICT   nr_seq_superior_w
                  FROM   prescr_mat_hor
                  WHERE  (nr_seq_superior IS NOT NULL AND nr_seq_superior::text <> '')
                         AND nr_sequencia = nr_seq_mat_hor_w;

                  IF ( nr_seq_superior_w > 0 ) THEN
                    nr_item_prescr_w := nr_seq_superior_w;
                  END IF;

                  SELECT Max(nr_seq_regra_local)
                  INTO STRICT   nr_regra_local_disp_w
                  FROM   prescr_material
                  WHERE  nr_prescricao = nr_prescricao_p
                         AND coalesce(nr_seq_recomendacao, 0) <>
                             coalesce(nr_item_prescr_w, 0)
                         AND nr_sequencia = nr_item_prescr_w;

                  SELECT coalesce(Max(ie_gerar_ap_lote), 'S')
                  INTO STRICT   ie_gerar_ap_lote_w
                  FROM   regra_local_dispensacao
                  WHERE  nr_sequencia = nr_regra_local_disp_w;
                END IF;

                SELECT Count(*)
                INTO STRICT   qt_existe_regra_w
                FROM   ap_lote
                WHERE  nr_prescricao = nr_prescricao_p
                       AND cd_local_estoque = cd_local_estoque_w;

                SELECT Count(*)
                INTO STRICT   qt_exist_order_unit_batch_w
                FROM   ap_lote_review
                WHERE  nr_prescricao = nr_prescricao_p
                       AND nr_seq_cpoe_order_unit = nr_order_unit_seq_p;

                IF ( qt_existe_regra_w > 0 ) THEN
                  SELECT Max(nr_sequencia)
                  INTO STRICT   nr_sequencia_w
                  FROM   ap_lote
                  WHERE  nr_prescricao = nr_prescricao_p
                         AND cd_local_estoque = cd_local_estoque_w;
                END IF;

                IF ( ( ie_gerar_ap_lote_w = 'S' )
                      OR ( ( ie_origem_lote_p = 'AIP' )
                            OR ( ie_origem_lote_p = 'AIS' ) ) )
                   AND ( ie_gerar_lote_unico_w = 0  AND  qt_existe_regra_w = 0 )
                    OR ( cd_local_estoque_w <> cd_local_estoque_ant_w  AND  cd_local_estoque_ant_w <> 0 ) THEN
                  OPEN c02;

                  LOOP
                      FETCH c02 INTO hr_inicio_turno_w;

                      EXIT WHEN NOT FOUND; /* apply on c02 */

                      BEGIN
                          hr_inicio_turno_w := hr_inicio_turno_w;
                      END;
                  END LOOP;

                  CLOSE c02;

                  SELECT coalesce(Max(qt_prioridade), 999)
                  INTO STRICT   qt_prioridade_w
                  FROM   classif_lote_disp_far
                  WHERE  nr_sequencia = nr_seq_classif_w;

                  IF ( hr_hora_w < hr_inicio_turno_w ) THEN
                    dt_inicio_turno_w :=
                                                              Trunc(
                    establishment_timezone_utils.Dateattime(dt_horario_w - 1,
                    coalesce(Replace(hr_inicio_turno_w
                        , '24:', '00:'), '00:00')), 'mi'
                    );
                  ELSE
                    dt_inicio_turno_w := Trunc(
                    establishment_timezone_utils.Dateattime(dt_horario_w,
                         coalesce(Replace(hr_inicio_turno_w, '24:',
                             '00:'),
                         '00:00')), 'mi');
                  END IF;

                  SELECT nextval('ap_lote_seq')
                  INTO STRICT   nr_sequencia_w
;

                  SELECT nextval('ap_lote_review_seq')
                  INTO STRICT   nr_seq_ap_lote_review_w
;

                  INSERT INTO ap_lote(nr_sequencia,
                               dt_inicio_turno,
                               dt_prim_horario,
                               dt_atualizacao,
                               nm_usuario,
                               dt_atualizacao_nrec,
                               nm_usuario_nrec,
                               dt_geracao_lote,
                               nr_prescricao,
                               nr_seq_turno,
                               ie_status_lote,
                               cd_setor_atendimento,
                               nr_seq_classif,
                               nm_usuario_geracao,
                               ds_maquina_geracao,
                               cd_perfil_geracao,
                               qt_min_atraso_inicio_atend,
                               qt_min_atraso_atend,
                               qt_min_atraso_disp,
                               qt_min_atraso_entrega,
                               qt_min_atraso_receb,
                               cd_tipo_baixa,
                               ie_conta_paciente,
                               ie_atualiza_estoque,
                               cd_local_estoque,
                               qt_prioridade,
                               ie_origem_lote,
                               nr_seq_local_geracao,
                               nr_atendimento)
                  VALUES (nr_sequencia_w,
                               dt_inicio_turno_w,
                               dt_horario_w,
                               clock_timestamp(),
                               nm_usuario_p,
                               clock_timestamp(),
                               nm_usuario_p,
                               clock_timestamp(),
                               nr_prescricao_p,
                               nr_seq_turno_w,
                               'G',
                               cd_setor_atendimento_w,
                               nr_seq_classif_w,
                               nm_usuario_p,
                               ds_maq_user_w,
                               cd_perfil_ativo_w,
                               0,
                               0,
                               0,
                               0,
                               0,
                               cd_tipo_baixa_w,
                               ie_conta_paciente_w,
                               ie_atualiza_estoque_w,
                               cd_local_estoque_w,
                               qt_prioridade_w,
                               ie_origem_lote_p,
                               'NO',
                               nr_atendimento_w);

                  INSERT INTO ap_lote_review(nr_sequencia,
                               nr_seq_lote,
                               dt_atualizacao,
                               nm_usuario,
                               dt_atualizacao_nrec,
                               nm_usuario_nrec,
                               nr_prescricao,
                               ie_status_review,
                               dt_review_accepted,
                               dt_review_cancelled,
                               nr_seq_cpoe_order_unit)
                  VALUES ( nr_seq_ap_lote_review_w,
                               nr_sequencia_w,
                               clock_timestamp(),
                               nm_usuario_p,
                               clock_timestamp(),
                               nm_usuario_p,
                               nr_prescricao_p,
                               'R',
                               NULL,
                               NULL,
                               nr_order_unit_seq_p);
                END IF;

                /* create new batch for order unit */

                IF ( qt_existe_regra_w > 0 ) THEN
                  IF ( qt_exist_order_unit_batch_w = 0 ) THEN
                    /* create new batch for the order unit */

                    IF ( ie_gerar_ap_lote_w = 'S' )
                       AND ( ie_gerar_lote_unico_w = 0  AND  qt_exist_order_unit_batch_w = 0 )
                        OR ( cd_local_estoque_w <> cd_local_estoque_ant_w  AND  cd_local_estoque_ant_w <> 0 ) THEN
                      OPEN c02;

                      LOOP
                          FETCH c02 INTO hr_inicio_turno_w;

                          EXIT WHEN NOT FOUND; /* apply on c02 */

                          BEGIN
                              hr_inicio_turno_w := hr_inicio_turno_w;
                          END;
                      END LOOP;

                      CLOSE c02;

                      SELECT coalesce(Max(qt_prioridade), 999)
                      INTO STRICT   qt_prioridade_w
                      FROM   classif_lote_disp_far
                      WHERE  nr_sequencia = nr_seq_classif_w;

                      IF ( hr_hora_w < hr_inicio_turno_w ) THEN
                        dt_inicio_turno_w :=
                                                                  Trunc(
                        establishment_timezone_utils.Dateattime(dt_horario_w - 1
                        ,
                        coalesce(Replace(hr_inicio_turno_w
                            , '24:', '00:'), '00:00')), 'mi'
                        );
                      ELSE
                        dt_inicio_turno_w := Trunc(
                        establishment_timezone_utils.Dateattime(dt_horario_w,
                             coalesce(Replace(hr_inicio_turno_w, '24:',
                                 '00:'),
                             '00:00')), 'mi');
                      END IF;

                      SELECT nextval('ap_lote_seq')
                      INTO STRICT   nr_sequencia_w
;

                      SELECT nextval('ap_lote_review_seq')
                      INTO STRICT   nr_seq_ap_lote_review_w
;

                      -- insert into ap_lote
                      INSERT INTO ap_lote(nr_sequencia,
                                   dt_inicio_turno,
                                   dt_prim_horario,
                                   dt_atualizacao,
                                   nm_usuario,
                                   dt_atualizacao_nrec,
                                   nm_usuario_nrec,
                                   dt_geracao_lote,
                                   nr_prescricao,
                                   nr_seq_turno,
                                   ie_status_lote,
                                   cd_setor_atendimento,
                                   nr_seq_classif,
                                   nm_usuario_geracao,
                                   ds_maquina_geracao,
                                   cd_perfil_geracao,
                                   qt_min_atraso_inicio_atend,
                                   qt_min_atraso_atend,
                                   qt_min_atraso_disp,
                                   qt_min_atraso_entrega,
                                   qt_min_atraso_receb,
                                   cd_tipo_baixa,
                                   ie_conta_paciente,
                                   ie_atualiza_estoque,
                                   cd_local_estoque,
                                   qt_prioridade,
                                   ie_origem_lote,
                                   nr_seq_local_geracao,
                                   nr_atendimento)
                      VALUES (nr_sequencia_w,
                                   dt_inicio_turno_w,
                                   dt_horario_w,
                                   clock_timestamp(),
                                   nm_usuario_p,
                                   clock_timestamp(),
                                   nm_usuario_p,
                                   clock_timestamp(),
                                   nr_prescricao_p,
                                   nr_seq_turno_w,
                                   'G',
                                   cd_setor_atendimento_w,
                                   nr_seq_classif_w,
                                   nm_usuario_p,
                                   ds_maq_user_w,
                                   cd_perfil_ativo_w,
                                   0,
                                   0,
                                   0,
                                   0,
                                   0,
                                   cd_tipo_baixa_w,
                                   ie_conta_paciente_w,
                                   ie_atualiza_estoque_w,
                                   cd_local_estoque_w,
                                   qt_prioridade_w,
                                   ie_origem_lote_p,
                                   'NO',
                                   nr_atendimento_w);

                      -- insert into ap_lote_review
                      INSERT INTO ap_lote_review(nr_sequencia,
                                   nr_seq_lote,
                                   dt_atualizacao,
                                   nm_usuario,
                                   dt_atualizacao_nrec,
                                   nm_usuario_nrec,
                                   nr_prescricao,
                                   ie_status_review,
                                   dt_review_accepted,
                                   dt_review_cancelled,
                                   nr_seq_cpoe_order_unit)
                      VALUES ( nr_seq_ap_lote_review_w,
                                   nr_sequencia_w,
                                   clock_timestamp(),
                                   nm_usuario_p,
                                   clock_timestamp(),
                                   nm_usuario_p,
                                   nr_prescricao_p,
                                   'R',
                                   NULL,
                                   NULL,
                                   nr_order_unit_seq_p);
                    END IF;
                  END IF;
                END IF;

                IF ( ( ie_gerar_ap_lote_w = 'S' )
                      OR ( ( ie_origem_lote_p = 'AIP' )
                            OR ( ie_origem_lote_p = 'AIS' ) ) ) THEN
                  ie_gerar_lote_unico_w := nr_sequencia_w;

                  cd_local_estoque_ant_w := cd_local_estoque_w;

                  dt_horario_ant_w := dt_horario_w;

                  INSERT INTO ap_lote_item(nr_sequencia,
                               dt_atualizacao,
                               nm_usuario,
                               dt_atualizacao_nrec,
                               nm_usuario_nrec,
                               nr_seq_lote,
                               nr_seq_mat_hor,
                               ie_prescrito,
                               qt_dispensar,
                               qt_total_dispensar,
                               cd_material,
                               cd_unidade_medida,
                               ie_urgente)
                  VALUES (nextval('ap_lote_item_seq'),
                               clock_timestamp(),
                               nm_usuario_p,
                               clock_timestamp(),
                               nm_usuario_p,
                               nr_sequencia_w,
                               nr_seq_mat_hor_w,
                               'S',
                               coalesce(qt_dispensar_hor_w, 0),
                               qt_dispensar_w,
                               cd_material_w,
                               cd_unidade_medida_w,
                               ie_urgente_w);

                  UPDATE prescr_mat_hor
                  SET    nr_seq_lote = nr_sequencia_w
                  WHERE  nr_sequencia = nr_seq_mat_hor_w;

                  UPDATE cpoe_order_unit
                  SET    nr_seq_lote = nr_sequencia_w
                  WHERE  nr_sequencia = nr_order_unit_seq_p;

                  OPEN c10;

                  LOOP
                      FETCH c10 INTO cd_material_ww, nr_seq_mat_hor_ww,
                      cd_unidade_medida_w,
                      qt_dispensar_w, qt_dispensar_hor_w, nr_seq_turno_w,
                      cd_setor_atendimento_w
                      ,
                      dt_horario_w, hr_hora_w, cd_estabelecimento_w,
                      ie_urgente_w,
                      nr_seq_classif_w,
                      cd_local_estoque_w;

                      EXIT WHEN NOT FOUND; /* apply on c10 */

                      BEGIN
                          IF ( pkg_date_utils.Start_of(dt_horario_w, 'hh', 0) =
                                  pkg_date_utils.Start_of(dt_horario_ant_w, 'hh'
                                  , 0)
                             )
                          THEN
                            INSERT INTO ap_lote_item(nr_sequencia,
                                         dt_atualizacao,
                                         nm_usuario,
                                         dt_atualizacao_nrec,
                                         nm_usuario_nrec,
                                         nr_seq_lote,
                                         nr_seq_mat_hor,
                                         ie_prescrito,
                                         qt_dispensar,
                                         qt_total_dispensar,
                                         cd_material,
                                         cd_unidade_medida,
                                         ie_urgente)
                            VALUES (nextval('ap_lote_item_seq'),
                                         clock_timestamp(),
                                         nm_usuario_p,
                                         clock_timestamp(),
                                         nm_usuario_p,
                                         nr_sequencia_w,
                                         nr_seq_mat_hor_ww,
                                         'S',
                                         coalesce(qt_dispensar_hor_w, 0),
                                         qt_dispensar_w,
                                         cd_material_ww,
                                         cd_unidade_medida_w,
                                         ie_urgente_w);

                            UPDATE prescr_mat_hor
                            SET    nr_seq_lote = nr_sequencia_w
                            WHERE  nr_sequencia = nr_seq_mat_hor_ww;

                            UPDATE cpoe_order_unit
                            SET    nr_seq_lote = nr_sequencia_w
                            WHERE  nr_sequencia = nr_order_unit_seq_p;
                          END IF;
                      END;
                  END LOOP;

                  CLOSE c10;
                END IF;
            END;
        END LOOP;

        CLOSE c001;

        OPEN c03;

        LOOP
            FETCH c03 INTO cd_setor_atendimento_w, nr_seq_turno_w,
            nr_seq_classif_w,
            qt_min_antes_atend_w, qt_min_receb_setor_w, qt_min_entr_setor_w,
            qt_min_disp_farm_w, qt_min_atend_farm_w, qt_min_inicio_atend_w,
            ie_hora_antes_w;

            EXIT WHEN NOT FOUND; /* apply on c03 */

            BEGIN
                IF ( ie_hora_antes_w = 'H' ) THEN
                  BEGIN
                      UPDATE ap_lote
                      SET    dt_atend_lote = Round(dt_prim_horario - Dividir(
                                                   qt_min_antes_atend_w,
                                                                     1440),
                                                    'mi'),
                             dt_limite_inicio_atend = Round(
                             dt_prim_horario - Dividir(qt_min_inicio_atend_w,
                                               1440), 'mi'),
                             dt_limite_atend = Round(dt_prim_horario - Dividir(
                                                     qt_min_atend_farm_w
                                                                       ,
                                                                       1440),
                                               'mi'),
                             dt_limite_disp_farm = Round(
                             dt_prim_horario - Dividir(qt_min_disp_farm_w,
                                               1440),
                                                   'mi'),
                             dt_limite_entrega_setor = Round(
                             dt_prim_horario - Dividir(qt_min_entr_setor_w,
                                               1440), 'mi'),
                             dt_limite_receb_setor = Round(
                             dt_prim_horario - Dividir(qt_min_receb_setor_w,
                                               1440), 'mi')
                      WHERE  nr_prescricao = nr_prescricao_p
                             AND ( ( coalesce(cd_setor_atendimento_w::text, '') = '' )
                                    OR ( cd_setor_atendimento_w =
                                         cd_setor_atendimento )
                                 )
                             AND ( ( coalesce(nr_seq_turno_w::text, '') = '' )
                                    OR ( nr_seq_turno_w = nr_seq_turno ) )
                             AND ( ( coalesce(nr_seq_classif_w::text, '') = '' )
                                    OR ( nr_seq_classif_w = nr_seq_classif ) );
                  END;
                ELSIF ( ie_hora_antes_w = 'I' ) THEN
                  BEGIN
                      UPDATE ap_lote
                      SET    dt_atend_lote = Round(dt_inicio_turno - Dividir(
                                                   qt_min_antes_atend_w,
                                                                     1440),
                                                    'mi'),
                             dt_limite_inicio_atend = Round(
                             dt_prim_horario - Dividir(qt_min_inicio_atend_w,
                                               1440), 'mi'),
                             dt_limite_atend = Round(dt_prim_horario - Dividir(
                                                     qt_min_atend_farm_w
                                                                       ,
                                                                       1440),
                                               'mi'),
                             dt_limite_disp_farm = Round(
                             dt_prim_horario - Dividir(qt_min_disp_farm_w,
                                               1440),
                                                   'mi'),
                             dt_limite_entrega_setor = Round(
                             dt_prim_horario - Dividir(qt_min_entr_setor_w,
                                               1440), 'mi'),
                             dt_limite_receb_setor = Round(
                             dt_prim_horario - Dividir(qt_min_receb_setor_w,
                                               1440), 'mi')
                      WHERE  nr_prescricao = nr_prescricao_p
                             AND ( ( coalesce(cd_setor_atendimento_w::text, '') = '' )
                                    OR ( cd_setor_atendimento_w =
                                         cd_setor_atendimento )
                                 )
                             AND ( ( coalesce(nr_seq_turno_w::text, '') = '' )
                                    OR ( nr_seq_turno_w = nr_seq_turno ) )
                             AND ( ( coalesce(nr_seq_classif_w::text, '') = '' )
                                    OR ( nr_seq_classif_w = nr_seq_classif ) );
                  END;
                ELSIF ( ie_hora_antes_w = 'T' ) THEN
                  BEGIN
                      UPDATE ap_lote
                      SET    dt_atend_lote = CASE WHEN To_char(                                             Round(dt_inicio_turno -                                                   Dividir(                                                          qt_min_antes_atend_w,                                                   1440                                                   ),                                             'mi'                                                                    ),                                                                   'hh24:mi:ss')                                             ='00:00:00' THEN                                              --os186690
                                             Round(dt_inicio_turno - Dividir(                                                   qt_min_antes_atend_w,                                                                     1440),                                             'mi') + 1 / 86400  ELSE Round(                                             dt_inicio_turno - Dividir(                                             qt_min_antes_atend_w, 1440),                                             'mi'                                             ) END ,
                             dt_limite_inicio_atend = CASE WHEN                              To_char(Round(dt_inicio_turno                                           - Dividir(                                           qt_min_inicio_atend_w                                             ,                                             1440                                           ),                                     'mi'                                     ),                             'hh24:mi:ss')='00:00:00' THEN                                                       Round(                             dt_inicio_turno - Dividir(                             qt_min_inicio_atend_w, 1440),                             'mi'                             ) + 1 / 86400  ELSE Round(                             dt_inicio_turno - Dividir(                             qt_min_inicio_atend_w, 1440),                             'mi'                             ) END ,
                             dt_limite_atend = Round(dt_inicio_turno - Dividir(
                                                     qt_min_atend_farm_w
                                                                       ,
                                                                       1440),
                                               'mi'),
                             dt_limite_disp_farm = Round(
                             dt_inicio_turno - Dividir(qt_min_disp_farm_w,
                                               1440),
                                                   'mi'),
                             dt_limite_entrega_setor = Round(
                             dt_inicio_turno - Dividir(qt_min_entr_setor_w,
                                               1440), 'mi'),
                             dt_limite_receb_setor = Round(
                             dt_inicio_turno - Dividir(qt_min_receb_setor_w,
                                               1440), 'mi')
                      WHERE  nr_prescricao = nr_prescricao_p
                             AND ( ( coalesce(cd_setor_atendimento_w::text, '') = '' )
                                    OR ( cd_setor_atendimento_w =
                                         cd_setor_atendimento )
                                 )
                             AND ( ( coalesce(nr_seq_turno_w::text, '') = '' )
                                    OR ( nr_seq_turno_w = nr_seq_turno ) )
                             AND ( ( coalesce(nr_seq_classif_w::text, '') = '' )
                                    OR ( nr_seq_classif_w = nr_seq_classif ) );
                  END;
                END IF;
            END;
        END LOOP;

        CLOSE c03;

        SELECT coalesce(Max(ie_gera_integracao), 'N')
        INTO STRICT   ie_gera_integracao_w
        FROM   parametros_farmacia
        WHERE  cd_estabelecimento = cd_estabelecimento_w;

        IF ( ie_gera_integracao_w = 'S' ) THEN
          CALL Disp_prescr_mat_hor(nr_prescricao_p, 0, nm_usuario_p);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
          ds_erro_w := Substr(nr_prescricao_p
                              || SQLERRM(SQLSTATE)
                              || dbms_utility.format_error_backtrace, 1, 2000);

          INSERT INTO log_tasy(dt_atualizacao,
                       nm_usuario,
                       cd_log,
                       ds_log)
          VALUES ( clock_timestamp(),
                      nm_usuario_p,
                      4141,
                      ds_erro_w);

          IF ( coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S' ) THEN
            COMMIT;
          END IF;
    END;

    IF ( coalesce(wheb_usuario_pck.get_ie_commit, 'S') = 'S' ) THEN
      COMMIT;
    END IF;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE generate_batch_per_order_unit ( nr_prescricao_p bigint, nr_order_unit_seq_p bigint, nr_sequencia_p bigint, nr_seq_horario_p bigint, ie_so_aprazado_p text, nm_usuario_p text, ie_origem_lote_p text) FROM PUBLIC;

