-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE rc_demais_cred_deb_pagamento AS (ie_indicacao_pagam_w	varchar(1), 
						 cd_deb_cred_pagam_w	varchar(2), 
						 ds_deb_cred_pagam_w	varchar(255), 
						 vl_deb_cred_pagam_w	double precision);
CREATE TYPE rc_demais_cred_deb_demonst AS (ie_indicacao_demonst_w	varchar(1), 
						 cd_deb_cred_demonst_w	varchar(2), 
						 ds_deb_cred_demonst_w	varchar(255), 
						 vl_deb_cred_demonst_w	double precision);


CREATE OR REPLACE PROCEDURE pls_gerar_w_tiss30_dem_pag ( nr_seq_prestador_p bigint, nr_seq_protocolo_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, ie_opcao_data_p bigint, nm_usuario_p text, nr_seq_lote_pag_p bigint, nr_seq_pres_pag_p bigint) AS $body$
DECLARE

						
				 
type 	tb_demais_cred_deb_pagamento is table of rc_demais_cred_deb_pagamento index by integer;
type 	tb_demais_cred_deb_demonst is table of rc_demais_cred_deb_demonst index by integer;
				
 
tb_demais_cred_deb_pagamento_w	tb_demais_cred_deb_pagamento;
tb_demais_cred_deb_demonst_w	tb_demais_cred_deb_demonst;

 
nr_seq_protocolo_w		bigint;
cd_ans_w			varchar(20);
ds_operadora_w			varchar(255);
cd_cgc_operadora_w		varchar(14);
cd_cgc_prestador_w		varchar(14);
nr_cpf_prestador_w		w_pls_protocolo.nr_cpf_prestador%type;
ds_prestador_w			varchar(255);
cd_cnes_prestador_w		varchar(50);
nr_seq_protocolo_conta_w	bigint;
dt_protocolo_w			timestamp;
nr_seq_outorgante_w		bigint;
nr_seq_prestador_w		bigint;
vl_cobrado_w			double precision;
vl_fatura_w			double precision;
vl_lib_fatura_w			double precision;
vl_glosa_fatura_w		double precision;
dt_pagamento_w			timestamp;
dt_pagamento_ww			timestamp		:= clock_timestamp();
ie_forma_pagto_w		varchar(5);
cd_banco_w			varchar(20);
cd_agencia_w			varchar(20);
nr_conta_w			varchar(50);
nr_seq_protocolo_ww		bigint;
qt_protocolo_w			integer	:= 0;
nr_seq_conta_w			bigint;
vl_liberado_w			double precision;
nr_seq_evento_w			bigint;
ds_evento_w			varchar(255);
ie_natureza_w			varchar(1);
qt_deb_cred_demonst_w		integer	:= 0;
qt_deb_cred_pagam_w		integer	:= 0;
qt_dem_cred_deb_pagam_w		integer	:= 0;
qt_dem_cred_deb_demonst_w	integer	:= 0;
qt_evento_w			integer	:= 0;
nr_protocolo_prestador_w	bigint;	
ie_mudou_data_w			varchar(1);
nr_seq_prestador_ww		bigint;
nr_seq_lote_pgto_w		pls_lote_pagamento.nr_sequencia%type;

C00 CURSOR FOR 
	SELECT	nr_seq_prestador 
	from	pls_pagamento_prestador 
	where	nr_seq_lote 		= coalesce(nr_seq_lote_pag_p, 	nr_seq_lote) 
	and	nr_sequencia		= coalesce(nr_seq_pres_pag_p, 	nr_sequencia) 
	and	nr_seq_prestador	= coalesce(nr_seq_prestador_p, 	nr_seq_prestador) 
	order by 1;

C01 CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	pls_protocolo_conta a 
	where	a.dt_protocolo	between dt_inicio_p 	and dt_fim_p 
	and	exists (SELECT	1 
			from	pls_conta b 
			where	b.nr_seq_protocolo	= a.nr_sequencia 
			and	ie_status		<> 'U' 
			and	exists (select	1 
					from	pls_conta_medica_resumo c 
					where	c.nr_seq_conta		= b.nr_sequencia 
					and	c.nr_seq_prestador_pgto	= nr_seq_prestador_ww 
					and	(c.nr_seq_lote_pgto IS NOT NULL AND c.nr_seq_lote_pgto::text <> ''))) 
	order by a.dt_protocolo, a.nr_protocolo_prestador, a.nr_sequencia;

C02 CURSOR FOR 
	SELECT	b.nr_sequencia 
	from	pls_conta b 
	where	b.nr_seq_protocolo	= nr_seq_protocolo_w 
	and	b.ie_status		<> 'U' 
	and	exists (SELECT	1 
			from	pls_conta_medica_resumo c 
			where	c.nr_seq_conta		= b.nr_sequencia 
			and	c.nr_seq_prestador_pgto	= nr_seq_prestador_ww);
	
C03 CURSOR FOR 
	SELECT	nr_seq_prestador_pgto, 
		nr_seq_lote_pgto, 
		nr_seq_evento, 
		vl_liberado 
	from	pls_conta_medica_resumo 
	where	nr_seq_prestador_pgto	= nr_seq_prestador_ww 
	and	nr_seq_conta		= nr_seq_conta_w 
	and	ie_tipo_item 		<> 'I' 
	and	((ie_situacao = 'A') or (coalesce(ie_situacao::text, '') = ''));
	
C04 CURSOR FOR	 
	SELECT	nr_seq_prestador_pgto, 
		nr_seq_lote_pgto, 
		nr_seq_evento, 
		vl_liberado 
	from	pls_conta_medica_resumo 
	where	nr_seq_prestador_pgto	= nr_seq_prestador_ww 
	and	nr_seq_conta		= nr_seq_conta_w 
	and	ie_tipo_item 		<> 'I' 
	and	((ie_situacao = 'A') or (coalesce(ie_situacao::text, '') = '')) 
	and	(nr_seq_lote_pgto IS NOT NULL AND nr_seq_lote_pgto::text <> '');	
	 
	 
C05 CURSOR FOR 
	SELECT	a.nr_sequencia, 
		c.dt_pagamento 
	from	pls_protocolo_conta a, 
		pls_prot_conta_titulo c 
	where	exists (SELECT	1 
			from	pls_conta b 
			where	b.nr_seq_protocolo	= a.nr_sequencia 
			and	ie_status		<> 'U' 
			and	exists (select	1 
					from	pls_conta_medica_resumo c 
					where	c.nr_seq_conta		= b.nr_sequencia 
					and	c.nr_seq_prestador_pgto	= nr_seq_prestador_ww 
					and	(c.nr_seq_lote_pgto IS NOT NULL AND c.nr_seq_lote_pgto::text <> ''))) 
	and	c.nr_seq_protocolo	= a.nr_sequencia 
	and	c.dt_pagamento	between dt_inicio_p and dt_fim_p 
	order by c.dt_pagamento, a.dt_protocolo, a.nr_protocolo_prestador, a.nr_sequencia;

BEGIN 
 
-- Deletar os registros das tabelas utilizadas 
delete 	from	w_pls_mov_pagamento 
where	nm_usuario	= nm_usuario_p;
 
delete	from	w_pls_mov_demonst 
where	nm_usuario	= nm_usuario_p;
 
delete 	from	w_pls_resumo_protocolo 
where	nm_usuario	= nm_usuario_p;
 
delete	from 	w_pls_protocolo 
where	nm_usuario	= nm_usuario_p;
 
qt_deb_cred_pagam_w 	:= 0;
qt_deb_cred_demonst_w	:= 0;
 
-- Deve possuir o prestador informado! 
open C00;
loop 
fetch C00 into 
	nr_seq_prestador_ww;
EXIT WHEN NOT FOUND; /* apply on C00 */
	begin 
	if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then 
	 
		nr_seq_protocolo_w	:= nr_seq_protocolo_p;
 
		begin 
			select	dt_protocolo, 
				nr_seq_outorgante, 
				nr_protocolo_prestador 
			into STRICT	dt_protocolo_w, 
				nr_seq_outorgante_w, 
				nr_protocolo_prestador_w 
			from	pls_protocolo_conta 
			where	nr_sequencia	= nr_seq_protocolo_w;
		exception 
		when others then 
			dt_protocolo_w			:= null;
			nr_seq_outorgante_w		:= null;
		end;	
		 
		nr_seq_conta_w		:= null;
		 
		open C02;
		loop 
		fetch C02 into	 
			nr_seq_conta_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */			
			begin		 
			nr_seq_prestador_w	:= null;
			nr_seq_lote_pgto_w	:= null;
			nr_seq_evento_w		:= null;
			vl_liberado_w		:= null;			
			open C03;
			loop 
			fetch C03 into	 
				nr_seq_prestador_w, 
				nr_seq_lote_pgto_w, 
				nr_seq_evento_w, 
				vl_liberado_w;
			EXIT WHEN NOT FOUND; /* apply on C03 */
				begin 
				select 	count(1) 
				into STRICT	qt_evento_w 
				from	pls_evento 
				where	nr_sequencia	= nr_seq_evento_w 
				and	ie_tipo_evento 	= 'F';
				 
				if (qt_evento_w > 0) then 
					begin 
						select 	ds_evento, 
							ie_natureza 
						into STRICT	ds_evento_w, 
							ie_natureza_w 
						from	pls_evento 
						where	nr_sequencia	= nr_seq_evento_w 
						and	ie_tipo_evento 	= 'F';
					exception 
					when others then 
						ds_evento_w	:= null;
						ie_natureza_w	:= null;
					end;				
					 
					tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].ie_indicacao_pagam_w	:= ie_natureza_w;
					tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].cd_deb_cred_pagam_w		:= nr_seq_evento_w;
					tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].ds_deb_cred_pagam_w		:= ds_evento_w;
					tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].vl_deb_cred_pagam_w		:= vl_liberado_w;
					 
					qt_deb_cred_pagam_w	:= qt_deb_cred_pagam_w + 1;
				end if;
				end;
			end loop;
			close C03;
			 
			open C04;
			loop 
			fetch C04 into	 
				nr_seq_prestador_w, 
				nr_seq_lote_pgto_w, 
				nr_seq_evento_w, 
				vl_liberado_w;
			EXIT WHEN NOT FOUND; /* apply on C04 */
				begin 
				select	count(1) 
				into STRICT	qt_evento_w 
				from	pls_evento 
				where	nr_sequencia	= nr_seq_evento_w 
				and	ie_tipo_evento 	= 'F';
 
				if (qt_evento_w > 0) then 
					begin 
						select 	ds_evento, 
							ie_natureza 
						into STRICT	ds_evento_w, 
							ie_natureza_w 
						from	pls_evento 
						where	nr_sequencia	= nr_seq_evento_w 
						and	ie_tipo_evento 	= 'F';
					exception 
					when others then 
						ds_evento_w	:= null;
						ie_natureza_w	:= null;
					end;				
					 
					tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].ie_indicacao_demonst_w	:= ie_natureza_w;
					tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].cd_deb_cred_demonst_w	:= nr_seq_evento_w;
					tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].ds_deb_cred_demonst_w	:= ds_evento_w;
					tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].vl_deb_cred_demonst_w	:= vl_liberado_w;
					 
					qt_deb_cred_demonst_w	:= qt_deb_cred_demonst_w + 1;
				end if;
				end;
			end loop;
			close C04;
			end;
		end loop;
		close C02;		
 
		begin 
			select	cd_ans, 
				nm_fantasia, 
				cd_cgc_outorgante 
			into STRICT	cd_ans_w, 
				ds_operadora_w, 
				cd_cgc_operadora_w 
			from	pls_outorgante 
			where	nr_sequencia	= nr_seq_outorgante_w;
		exception 
		when others then 
			cd_ans_w		:= null;
			ds_operadora_w		:= null;
			cd_cgc_operadora_w	:= null;
		end;
 
		begin 
		select	cd_cgc, 
			obter_cpf_pessoa_fisica(cd_pessoa_fisica), 
			substr(obter_nome_pf_pj(cd_pessoa_fisica, cd_cgc),1,254), 
			CASE WHEN coalesce(cd_pessoa_fisica::text, '') = '' THEN  substr(obter_dados_pf_pj(null,cd_cgc, 'CNES'),1,20)  ELSE substr(obter_dados_pf(cd_pessoa_fisica,'CNES'),1,20) END  
		into STRICT	cd_cgc_prestador_w, 
			nr_cpf_prestador_w, 
			ds_prestador_w, 
			cd_cnes_prestador_w 
		from	pls_prestador 
		where	nr_sequencia	= nr_seq_prestador_w;
		exception 
		when others then 
			cd_cgc_prestador_w	:= null;
			nr_cpf_prestador_w	:= null;
			ds_prestador_w		:= null;
			cd_cnes_prestador_w	:= null;
		end;
 
		begin 
		select	dt_pagamento 
		into STRICT	dt_pagamento_w 
		from	pls_prot_conta_titulo 
		where	nr_seq_protocolo 	= nr_seq_protocolo_p;
		exception 
		when others then 
			dt_pagamento_w		:= null;
		end;
		 
		select	coalesce(sum(coalesce(vl_liberado,0)),0), 
			coalesce(sum(coalesce(vl_liberado,0)),0), 
			coalesce(sum(coalesce(vl_glosa,0)),0) 
		into STRICT	vl_fatura_w, 
			vl_lib_fatura_w, 
			vl_glosa_fatura_w 
		from 	pls_conta_medica_resumo 
		where 	nr_seq_prestador_pgto 		= nr_seq_prestador_w 
		and 	nr_seq_protocolo		= nr_seq_protocolo_p 
		and 	nr_seq_lote_pgto 		= nr_seq_lote_pgto_w;
		 
		-- FORMA PAGAMENTO 
		ie_forma_pagto_w	:= pls_obter_dados_prestador(nr_seq_prestador_ww,'FP');
		cd_banco_w		:= pls_obter_dados_prestador(nr_seq_prestador_ww,'B');
		cd_agencia_w		:= pls_obter_dados_prestador(nr_seq_prestador_ww,'ACD');
		nr_conta_w		:= pls_obter_dados_prestador(nr_seq_prestador_ww,'CCD');
 
		select	nextval('w_pls_protocolo_seq') 
		into STRICT	nr_seq_protocolo_ww 
		;
	 
		insert 	into w_pls_protocolo( 
			nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			cd_ans, 
			ds_operadora, 
			cd_cgc_operadora, 
			dt_pagamento, 
			ie_forma_pagto, 
			cd_banco, 
			cd_agencia, 
			nr_conta, 
			nr_seq_protocolo, 
			cd_prestador,		 
			ds_prestador, 
			cd_cnes_prestador,					 
			nr_demonstrativo,    
			dt_emissao,	 
			cd_cgc_prestador, 
			nr_cpf_prestador, 
			nr_fatura, 
			nr_lote, 
			dt_envio_lote, 
			nr_protocolo, 
			vl_fatura, 
			vl_lib_fatura, 
			vl_glosa_fatura, 
			nr_seq_lote_pgto)		 
		values (nr_seq_protocolo_ww, 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			cd_ans_w, 
			ds_operadora_w, 
			cd_cgc_operadora_w, 
			dt_pagamento_w, 
			ie_forma_pagto_w, 
			cd_banco_w, 
			cd_agencia_w, 
			nr_conta_w, 
			nr_seq_protocolo_p, 
			nr_seq_prestador_w, 
			ds_prestador_w, 
			cd_cnes_prestador_w,				 
			null,    
			null, 
			cd_cgc_prestador_w, 
			nr_cpf_prestador_w, 
			null, 
			null, 
			null, 
			null, 
			null, 
			null, 
			null, 
			nr_seq_lote_pgto_w);
 
		insert	into w_pls_resumo_protocolo( 
			nr_sequencia, 
			dt_atualizacao, 
			nm_usuario, 
			dt_atualizacao_nrec, 
			nm_usuario_nrec, 
			dt_protocolo, 
			nr_seq_protocolo, 
			nr_seq_protocolo_w, 
			nr_seq_lote_protocolo, 
			vl_informado, 
			vl_processado, 
			vl_liberado, 
			vl_glosa) 
		values (nextval('w_pls_resumo_protocolo_seq'), 
			clock_timestamp(), 
			nm_usuario_p, 
			clock_timestamp(), 
			nm_usuario_p, 
			dt_protocolo_w, 
			nr_seq_protocolo_p, 
			nr_seq_protocolo_ww, 
			nr_protocolo_prestador_w, 
			vl_fatura_w, 
			vl_fatura_w, 
			vl_lib_fatura_w, 
			vl_glosa_fatura_w);
 
		for i in 0..3 loop 
			begin 
			insert	into w_pls_resumo_protocolo( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				dt_protocolo, 
				nr_seq_protocolo, 
				nr_seq_protocolo_w, 
				nr_seq_lote_protocolo, 
				vl_informado, 
				vl_processado, 
				vl_liberado, 
				vl_glosa) 
			values (nextval('w_pls_resumo_protocolo_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				'', 
				'', 
				nr_seq_protocolo_ww, 
				'', 
				'', 
				'', 
				'', 
				'');		
			end;
		end loop;
		 
		qt_dem_cred_deb_pagam_w	:= 0;
		 
		for j in 0..(qt_deb_cred_pagam_w - 1) loop 
			if	qt_dem_cred_deb_pagam_w = 3 then 
				select	nextval('w_pls_protocolo_seq') 
				into STRICT	nr_seq_protocolo_ww 
				;
 
				insert 	into w_pls_protocolo( 
					nr_sequencia, 
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					cd_ans, 
					ds_operadora, 
					cd_cgc_operadora, 
					dt_pagamento, 
					ie_forma_pagto, 
					cd_banco, 
					cd_agencia, 
					nr_conta, 
					nr_seq_protocolo, 
					cd_prestador,		 
					ds_prestador, 
					cd_cnes_prestador,					 
					nr_demonstrativo,    
					dt_emissao,	 
					cd_cgc_prestador, 
					nr_cpf_prestador, 
					nr_fatura, 
					nr_lote, 
					dt_envio_lote, 
					nr_protocolo, 
					vl_fatura, 
					vl_lib_fatura, 
					vl_glosa_fatura, 
					nr_seq_lote_pgto)		 
				values (nr_seq_protocolo_ww, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					cd_ans_w, 
					ds_operadora_w, 
					cd_cgc_operadora_w, 
					dt_pagamento_w, 
					ie_forma_pagto_w, 
					cd_banco_w, 
					cd_agencia_w, 
					nr_conta_w, 
					nr_seq_protocolo_p, 
					nr_seq_prestador_w, 
					ds_prestador_w, 
					cd_cnes_prestador_w,				 
					null,    
					null, 
					cd_cgc_prestador_w, 
					nr_cpf_prestador_w, 
					null, 
					null, 
					null, 
					null, 
					null, 
					null, 
					null, 
					nr_seq_lote_pgto_w);
					 
				qt_dem_cred_deb_pagam_w 	:= 0;	
			end if;
 
			insert	into w_pls_mov_pagamento( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo_w, 
				ie_indicacao, 
				cd_debito_cred, 
				ds_debito_cred, 
				vl_debito_cred) 
			values (nextval('w_pls_mov_pagamento_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_ww, 
				tb_demais_cred_deb_pagamento_w[j].ie_indicacao_pagam_w, 
				tb_demais_cred_deb_pagamento_w[j].cd_deb_cred_pagam_w, 
				tb_demais_cred_deb_pagamento_w[j].ds_deb_cred_pagam_w, 
				tb_demais_cred_deb_pagamento_w[j].vl_deb_cred_pagam_w);
				 
			qt_dem_cred_deb_pagam_w	:= qt_dem_cred_deb_pagam_w + 1;		
		end loop;
 
		if (qt_dem_cred_deb_pagam_w < 3) then 
			qt_dem_cred_deb_pagam_w	:= 3 - qt_dem_cred_deb_pagam_w;
			 
			for	i in 1.. qt_dem_cred_deb_pagam_w loop 
				insert	into w_pls_mov_pagamento( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo_w, 
				ie_indicacao, 
				cd_debito_cred, 
				ds_debito_cred, 
				vl_debito_cred 
				) 
			values (nextval('w_pls_mov_pagamento_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_ww, 
				'', 
				'', 
				'', 
				'');
			end loop;
		end if;
		 
		qt_dem_cred_deb_demonst_w 	:= 0;
		 
		for k in 0..(qt_dem_cred_deb_demonst_w - 1) loop 
			if	qt_dem_cred_deb_demonst_w = 3 then 
				select	nextval('w_pls_protocolo_seq') 
				into STRICT	nr_seq_protocolo_ww 
				;
 
				insert 	into w_pls_protocolo( 
					nr_sequencia, 
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					cd_ans, 
					ds_operadora, 
					cd_cgc_operadora, 
					dt_pagamento, 
					ie_forma_pagto, 
					cd_banco, 
					cd_agencia, 
					nr_conta, 
					nr_seq_protocolo, 
					cd_prestador,		 
					ds_prestador, 
					cd_cnes_prestador,					 
					nr_demonstrativo,    
					dt_emissao,	 
					cd_cgc_prestador, 
					nr_cpf_prestador, 
					nr_fatura, 
					nr_lote, 
					dt_envio_lote, 
					nr_protocolo, 
					vl_fatura, 
					vl_lib_fatura, 
					vl_glosa_fatura, 
					nr_seq_lote_pgto)		 
				values (nr_seq_protocolo_ww, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					cd_ans_w, 
					ds_operadora_w, 
					cd_cgc_operadora_w, 
					dt_pagamento_w, 
					ie_forma_pagto_w, 
					cd_banco_w, 
					cd_agencia_w, 
					nr_conta_w, 
					nr_seq_protocolo_p, 
					nr_seq_prestador_w, 
					ds_prestador_w, 
					cd_cnes_prestador_w,				 
					null,    
					null, 
					cd_cgc_prestador_w, 
					nr_cpf_prestador_w, 
					null, 
					null, 
					null, 
					null, 
					null, 
					null, 
					null, 
					nr_seq_lote_pgto_w);
					 
				qt_dem_cred_deb_demonst_w 	:= 0;	
			end if;
 
			insert	into w_pls_mov_demonst( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo_w, 
				ie_indicacao_demonst, 
				cd_debito_cred_demonst, 
				ds_debito_cred_demonst, 
				vl_debito_cred_demonst) 
			values (nextval('w_pls_mov_demonst_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_ww, 
				tb_demais_cred_deb_pagamento_w[k].ie_indicacao_pagam_w, 
				tb_demais_cred_deb_pagamento_w[k].cd_deb_cred_pagam_w, 
				tb_demais_cred_deb_pagamento_w[k].ds_deb_cred_pagam_w, 
				tb_demais_cred_deb_pagamento_w[k].vl_deb_cred_pagam_w);
				 
			qt_dem_cred_deb_demonst_w	:= qt_dem_cred_deb_demonst_w + 1;		
		end loop;
 
		if (qt_dem_cred_deb_demonst_w < 3) then 
			qt_dem_cred_deb_demonst_w	:= 3 - qt_dem_cred_deb_demonst_w;
			 
			for	i in 1.. qt_dem_cred_deb_demonst_w loop 
				insert	into w_pls_mov_demonst( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo_w, 
				ie_indicacao_demonst, 
				cd_debito_cred_demonst, 
				ds_debito_cred_demonst, 
				vl_debito_cred_demonst 
				) 
			values (nextval('w_pls_mov_demonst_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_ww, 
				'', 
				'', 
				'', 
				'');
			end loop;
		end if;
 
	elsif (ie_opcao_data_p	= 1) then 
		open C01;
		loop 
		fetch C01 into 
			nr_seq_protocolo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			begin 
			select	dt_protocolo, 
				nr_seq_outorgante, 
				nr_protocolo_prestador 
			into STRICT	dt_protocolo_w, 
				nr_seq_outorgante_w, 
				nr_protocolo_prestador_w 
			from	pls_protocolo_conta 
			where	nr_sequencia	= nr_seq_protocolo_w;
			exception 
			when others then 
				dt_protocolo_w			:= null;
				nr_seq_outorgante_w		:= null;
			end;
		 
			nr_seq_conta_w		:= null;
			nr_seq_prestador_w	:= null;
			nr_seq_lote_pgto_w	:= null;
			nr_seq_evento_w		:= null;
			vl_liberado_w		:= null;			
		 
			open C02;
			loop 
			fetch C02 into	 
				nr_seq_conta_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */				
				begin					 
				open C03;
				loop 
				fetch C03 into	 
					nr_seq_prestador_w, 
					nr_seq_lote_pgto_w, 
					nr_seq_evento_w, 
					vl_liberado_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin 
					select 	count(1) 
					into STRICT	qt_evento_w 
					from	pls_evento 
					where	nr_sequencia	= nr_seq_evento_w 
					and	ie_tipo_evento 	= 'F';
					 
					if (qt_evento_w > 0) then 
						begin 
							select 	ds_evento, 
								ie_natureza 
							into STRICT	ds_evento_w, 
								ie_natureza_w 
							from	pls_evento 
							where	nr_sequencia	= nr_seq_evento_w 
							and	ie_tipo_evento 	= 'F';
						exception 
						when others then 
							ds_evento_w	:= null;
							ie_natureza_w	:= null;
						end;				
						 
						tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].ie_indicacao_pagam_w	:= ie_natureza_w;
						tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].cd_deb_cred_pagam_w		:= nr_seq_evento_w;
						tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].ds_deb_cred_pagam_w		:= ds_evento_w;
						tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].vl_deb_cred_pagam_w		:= vl_liberado_w;
						 
						qt_deb_cred_pagam_w	:= qt_deb_cred_pagam_w + 1;
					end if;
					end;
				end loop;
				close C03;
				 
				open C04;
				loop 
				fetch C04 into	 
					nr_seq_prestador_w, 
					nr_seq_lote_pgto_w, 
					nr_seq_evento_w, 
					vl_liberado_w;
				EXIT WHEN NOT FOUND; /* apply on C04 */
					begin 
					select	count(1) 
					into STRICT	qt_evento_w 
					from	pls_evento 
					where	nr_sequencia	= nr_seq_evento_w 
					and	ie_tipo_evento 	= 'F';
 
					if (qt_evento_w > 0) then 
						begin 
							select 	ds_evento, 
								ie_natureza 
							into STRICT	ds_evento_w, 
								ie_natureza_w 
							from	pls_evento 
							where	nr_sequencia	= nr_seq_evento_w 
							and	ie_tipo_evento 	= 'F';
						exception 
						when others then 
							ds_evento_w	:= null;
							ie_natureza_w	:= null;
						end;				
						 
						tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].ie_indicacao_demonst_w	:= ie_natureza_w;
						tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].cd_deb_cred_demonst_w	:= nr_seq_evento_w;
						tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].ds_deb_cred_demonst_w	:= ds_evento_w;
						tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].vl_deb_cred_demonst_w	:= vl_liberado_w;
						 
						qt_deb_cred_demonst_w	:= qt_deb_cred_demonst_w + 1;
					end if;
					end;
				end loop;
				close C04;
				end;
			end loop;
			close C02;		
 
			begin 
				select	cd_ans, 
					nm_fantasia, 
					cd_cgc_outorgante 
				into STRICT	cd_ans_w, 
					ds_operadora_w, 
					cd_cgc_operadora_w 
				from	pls_outorgante 
				where	nr_sequencia	= nr_seq_outorgante_w;
			exception 
			when others then 
				cd_ans_w		:= null;
				ds_operadora_w		:= null;
				cd_cgc_operadora_w	:= null;
			end;
 
			begin 
			select	cd_cgc, 
				obter_cpf_pessoa_fisica(cd_pessoa_fisica), 
				substr(obter_nome_pf_pj(cd_pessoa_fisica, cd_cgc),1,254), 
				CASE WHEN coalesce(cd_pessoa_fisica::text, '') = '' THEN  substr(obter_dados_pf_pj(null,cd_cgc, 'CNES'),1,20)  ELSE substr(obter_dados_pf(cd_pessoa_fisica,'CNES'),1,20) END  
			into STRICT	cd_cgc_prestador_w, 
				nr_cpf_prestador_w, 
				ds_prestador_w, 
				cd_cnes_prestador_w 
			from	pls_prestador 
			where	nr_sequencia	= nr_seq_prestador_ww;
			exception 
			when others then 
				cd_cgc_prestador_w	:= null;
				nr_cpf_prestador_w	:= null;
				ds_prestador_w		:= null;
				cd_cnes_prestador_w	:= null;
			end;
			 
			begin 
			select	dt_pagamento 
			into STRICT	dt_pagamento_w 
			from	pls_prot_conta_titulo 
			where	nr_seq_protocolo 	= nr_seq_protocolo_w;
			exception 
			when others then 
				dt_pagamento_w		:= null;
			end;
			 
			select	coalesce(sum(coalesce(vl_liberado,0)),0), 
				coalesce(sum(coalesce(vl_liberado,0)),0), 
				coalesce(sum(coalesce(vl_glosa,0)),0) 
			into STRICT	vl_fatura_w, 
				vl_lib_fatura_w, 
				vl_glosa_fatura_w 
			from 	pls_conta_medica_resumo 
			where 	nr_seq_prestador_pgto 		= nr_seq_prestador_ww 
			and 	nr_seq_protocolo		= nr_seq_protocolo_p 
			and 	nr_seq_lote_pgto 		= nr_seq_lote_pgto_w;
			 
			-- FORMA PAGAMENTO 
			ie_forma_pagto_w	:= pls_obter_dados_prestador(nr_seq_prestador_ww,'FP');
			cd_banco_w		:= pls_obter_dados_prestador(nr_seq_prestador_ww,'B');
			cd_agencia_w		:= pls_obter_dados_prestador(nr_seq_prestador_ww,'ACD');
			nr_conta_w		:= pls_obter_dados_prestador(nr_seq_prestador_ww,'CCD');
 
			if (qt_protocolo_w	= 0) then			 
				select	nextval('w_pls_protocolo_seq') 
				into STRICT	nr_seq_protocolo_ww 
				;
		 
				insert 	into w_pls_protocolo( 
					nr_sequencia, 
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					cd_ans, 
					ds_operadora, 
					cd_cgc_operadora, 
					dt_pagamento, 
					ie_forma_pagto, 
					cd_banco, 
					cd_agencia, 
					nr_conta, 
					nr_seq_protocolo, 
					cd_prestador,		 
					ds_prestador, 
					cd_cnes_prestador,					 
					nr_demonstrativo,    
					dt_emissao,	 
					cd_cgc_prestador, 
					nr_cpf_prestador, 
					nr_fatura, 
					nr_lote, 
					dt_envio_lote, 
					nr_protocolo, 
					vl_fatura, 
					vl_lib_fatura, 
					vl_glosa_fatura, 
					nr_seq_lote_pgto)		 
				values (nr_seq_protocolo_ww, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					cd_ans_w, 
					ds_operadora_w, 
					cd_cgc_operadora_w, 
					dt_pagamento_w, 
					ie_forma_pagto_w, 
					cd_banco_w, 
					cd_agencia_w, 
					nr_conta_w, 
					nr_seq_protocolo_p, 
					nr_seq_prestador_w, 
					ds_prestador_w, 
					cd_cnes_prestador_w,				 
					null,    
					null, 
					cd_cgc_prestador_w, 
					nr_cpf_prestador_w, 
					null, 
					null, 
					null, 
					null, 
					null, 
					null, 
					null, 
					nr_seq_lote_pgto_w);
			end if;
 
			insert	into w_pls_resumo_protocolo( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				dt_protocolo, 
				nr_seq_protocolo, 
				nr_seq_protocolo_w, 
				nr_seq_lote_protocolo, 
				vl_informado, 
				vl_processado, 
				vl_liberado, 
				vl_glosa) 
			values (nextval('w_pls_resumo_protocolo_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				dt_protocolo_w, 
				nr_seq_protocolo_w, 
				nr_seq_protocolo_ww, 
				nr_protocolo_prestador_w, 
				vl_fatura_w, 
				vl_fatura_w, 
				vl_lib_fatura_w, 
				vl_glosa_fatura_w);
			 
			if (tb_demais_cred_deb_pagamento_w.count > 0) then 
				for j in (tb_demais_cred_deb_pagamento_w.first).. (tb_demais_cred_deb_pagamento_w.last) loop 
					if	qt_dem_cred_deb_pagam_w = 3 then 
						qt_dem_cred_deb_pagam_w 	:= 0;	
						exit;
					end if;
 
					insert	into w_pls_mov_pagamento( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo_w, 
						ie_indicacao, 
						cd_debito_cred, 
						ds_debito_cred, 
						vl_debito_cred) 
					values (nextval('w_pls_mov_pagamento_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_ww, 
						tb_demais_cred_deb_pagamento_w[j].ie_indicacao_pagam_w, 
						tb_demais_cred_deb_pagamento_w[j].cd_deb_cred_pagam_w, 
						tb_demais_cred_deb_pagamento_w[j].ds_deb_cred_pagam_w, 
						tb_demais_cred_deb_pagamento_w[j].vl_deb_cred_pagam_w);
						 
					tb_demais_cred_deb_pagamento_w.delete(j);
						 
					qt_dem_cred_deb_pagam_w	:= qt_dem_cred_deb_pagam_w + 1;		
				end loop;
			end if;
			 
			if (tb_demais_cred_deb_pagamento_w.count > 0) then 
				for k in ( tb_demais_cred_deb_pagamento_w.first).. ( tb_demais_cred_deb_pagamento_w.last) loop 
					if	qt_dem_cred_deb_demonst_w = 3 then						 
						qt_dem_cred_deb_demonst_w 	:= 0;
						exit;
					end if;
 
					insert	into w_pls_mov_demonst( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo_w, 
						ie_indicacao_demonst, 
						cd_debito_cred_demonst, 
						ds_debito_cred_demonst, 
						vl_debito_cred_demonst) 
					values (nextval('w_pls_mov_demonst_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_ww, 
						tb_demais_cred_deb_pagamento_w[k].ie_indicacao_pagam_w, 
						tb_demais_cred_deb_pagamento_w[k].cd_deb_cred_pagam_w, 
						tb_demais_cred_deb_pagamento_w[k].ds_deb_cred_pagam_w, 
						tb_demais_cred_deb_pagamento_w[k].vl_deb_cred_pagam_w);
						 
					tb_demais_cred_deb_pagamento_w.delete(k);
						 
					qt_dem_cred_deb_demonst_w	:= qt_dem_cred_deb_demonst_w + 1;		
				end loop;
			end if;
 
			qt_protocolo_w	:= qt_protocolo_w + 1;
			if (qt_protocolo_w = 4) then 
				qt_protocolo_w	:= 0;
				 
				if ( qt_dem_cred_deb_pagam_w < 3) then 
					qt_dem_cred_deb_pagam_w	:= 3 - qt_dem_cred_deb_pagam_w;
 
					for	i in 1.. qt_dem_cred_deb_pagam_w loop 
					insert	into w_pls_mov_pagamento( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo_w, 
						ie_indicacao, 
						cd_debito_cred, 
						ds_debito_cred, 
						vl_debito_cred 
						) 
					values (nextval('w_pls_mov_pagamento_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_ww, 
						'', 
						'', 
						'', 
						'');
					end loop;
					qt_dem_cred_deb_pagam_w	:= 0;
				end if;
				 
				if ( qt_dem_cred_deb_demonst_w < 3) then 
					qt_dem_cred_deb_demonst_w	:= 3 - qt_dem_cred_deb_demonst_w;
					 
					for	i in 1.. qt_dem_cred_deb_demonst_w loop 
						insert	into w_pls_mov_demonst( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo_w, 
						ie_indicacao_demonst, 
						cd_debito_cred_demonst, 
						ds_debito_cred_demonst, 
						vl_debito_cred_demonst 
						) 
					values (nextval('w_pls_mov_demonst_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_ww, 
						'', 
						'', 
						'', 
						'');
					end loop;
					 
					qt_dem_cred_deb_demonst_w := 0;
				end if;				
			end if;			
			end;
		end loop;
		close C01;
		 
		if (qt_protocolo_w	<> 0) then 
			qt_protocolo_w	:= 4 - qt_protocolo_w;
			 
			for	i in 1.. qt_protocolo_w loop 
				insert	into w_pls_resumo_protocolo( 
					nr_sequencia, 
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					dt_protocolo, 
					nr_seq_protocolo, 
					nr_seq_protocolo_w, 
					nr_seq_lote_protocolo, 
					vl_informado, 
					vl_processado, 
					vl_liberado, 
					vl_glosa) 
				values (nextval('w_pls_resumo_protocolo_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					'', 
					'', 
					nr_seq_protocolo_ww, 
					'', 
					'', 
					'', 
					'', 
					'');
			end loop;
		end if;
		 
		if ( qt_dem_cred_deb_pagam_w < 3) then 
			qt_dem_cred_deb_pagam_w	:= 3 - qt_dem_cred_deb_pagam_w;
			 
			for	i in 1.. qt_dem_cred_deb_pagam_w loop 
				insert	into w_pls_mov_pagamento( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo_w, 
				ie_indicacao, 
				cd_debito_cred, 
				ds_debito_cred, 
				vl_debito_cred 
				) 
			values (nextval('w_pls_mov_pagamento_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_ww, 
				'', 
				'', 
				'', 
				'');
			end loop;
		end if;
		 
		if ( qt_dem_cred_deb_demonst_w <> 3) then 
			qt_dem_cred_deb_demonst_w	:= 3 - qt_dem_cred_deb_demonst_w;
			 
			for	i in 1.. qt_dem_cred_deb_demonst_w loop 
				insert	into w_pls_mov_demonst( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo_w, 
				ie_indicacao_demonst, 
				cd_debito_cred_demonst, 
				ds_debito_cred_demonst, 
				vl_debito_cred_demonst 
				) 
			values (nextval('w_pls_mov_demonst_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_ww, 
				'', 
				'', 
				'', 
				'');
			end loop;
		end if;
	elsif (ie_opcao_data_p	= 2) then 
		open C05;
		loop 
		fetch C05 into 
			nr_seq_protocolo_w, 
			dt_pagamento_w;
		EXIT WHEN NOT FOUND; /* apply on C05 */
			begin 
			ie_mudou_data_w := 'N';
			if (dt_pagamento_w <> dt_pagamento_ww) then		 
				dt_pagamento_ww := dt_pagamento_w;
				ie_mudou_data_w := 'S';
			end if;
			 
			begin 
			select	dt_protocolo, 
				nr_seq_outorgante, 
				nr_protocolo_prestador, 
				vl_cobrado, 
				vl_glosa 
			into STRICT	dt_protocolo_w, 
				nr_seq_outorgante_w, 
				nr_protocolo_prestador_w, 
				vl_cobrado_w, 
				vl_glosa_fatura_w 
			from	pls_protocolo_conta 
			where	nr_sequencia	= nr_seq_protocolo_w;
			exception 
			when others then 
				dt_protocolo_w			:= null;
				nr_seq_outorgante_w		:= null;
			end;
		 
			nr_seq_conta_w		:= null;
			nr_seq_prestador_w	:= null;
			nr_seq_lote_pgto_w	:= null;
			nr_seq_evento_w		:= null;
			vl_liberado_w		:= null;			
		 
			open C02;
			loop 
			fetch C02 into	 
				nr_seq_conta_w;
			EXIT WHEN NOT FOUND; /* apply on C02 */				
				begin					 
				open C03;
				loop 
				fetch C03 into	 
					nr_seq_prestador_w, 
					nr_seq_lote_pgto_w, 
					nr_seq_evento_w, 
					vl_liberado_w;
				EXIT WHEN NOT FOUND; /* apply on C03 */
					begin 
					select 	count(1) 
					into STRICT	qt_evento_w 
					from	pls_evento 
					where	nr_sequencia	= nr_seq_evento_w 
					and	ie_tipo_evento 	= 'F';
					 
					if (qt_evento_w > 0) then 
						begin 
							select 	ds_evento, 
								ie_natureza 
							into STRICT	ds_evento_w, 
								ie_natureza_w 
							from	pls_evento 
							where	nr_sequencia	= nr_seq_evento_w 
							and	ie_tipo_evento 	= 'F';
						exception 
						when others then 
							ds_evento_w	:= null;
							ie_natureza_w	:= null;
						end;				
						 
						tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].ie_indicacao_pagam_w	:= ie_natureza_w;
						tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].cd_deb_cred_pagam_w		:= nr_seq_evento_w;
						tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].ds_deb_cred_pagam_w		:= ds_evento_w;
						tb_demais_cred_deb_pagamento_w[qt_deb_cred_pagam_w].vl_deb_cred_pagam_w		:= vl_liberado_w;
						 
						qt_deb_cred_pagam_w	:= qt_deb_cred_pagam_w + 1;
					end if;
					end;
				end loop;
				close C03;
				 
				open C04;
				loop 
				fetch C04 into	 
					nr_seq_prestador_w, 
					nr_seq_lote_pgto_w, 
					nr_seq_evento_w, 
					vl_liberado_w;
				EXIT WHEN NOT FOUND; /* apply on C04 */
					begin 
					select	count(1) 
					into STRICT	qt_evento_w 
					from	pls_evento 
					where	nr_sequencia	= nr_seq_evento_w 
					and	ie_tipo_evento 	= 'F';
 
					if (qt_evento_w > 0) then 
						begin 
							select 	ds_evento, 
								ie_natureza 
							into STRICT	ds_evento_w, 
								ie_natureza_w 
							from	pls_evento 
							where	nr_sequencia	= nr_seq_evento_w 
							and	ie_tipo_evento 	= 'F';
						exception 
						when others then 
							ds_evento_w	:= null;
							ie_natureza_w	:= null;
						end;				
						 
						tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].ie_indicacao_demonst_w	:= ie_natureza_w;
						tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].cd_deb_cred_demonst_w	:= nr_seq_evento_w;
						tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].ds_deb_cred_demonst_w	:= ds_evento_w;
						tb_demais_cred_deb_demonst_w[qt_deb_cred_demonst_w].vl_deb_cred_demonst_w	:= vl_liberado_w;
						 
						qt_deb_cred_demonst_w	:= qt_deb_cred_demonst_w + 1;
					end if;
					end;
				end loop;
				close C04;
				end;
			end loop;
			close C02;		
 
			begin 
				select	cd_ans, 
					nm_fantasia, 
					cd_cgc_outorgante 
				into STRICT	cd_ans_w, 
					ds_operadora_w, 
					cd_cgc_operadora_w 
				from	pls_outorgante 
				where	nr_sequencia	= nr_seq_outorgante_w;
			exception 
			when others then 
				cd_ans_w		:= null;
				ds_operadora_w		:= null;
				cd_cgc_operadora_w	:= null;
			end;
 
			begin 
			select	cd_cgc, 
				obter_cpf_pessoa_fisica(cd_pessoa_fisica), 
				substr(obter_nome_pf_pj(cd_pessoa_fisica, cd_cgc),1,254), 
				CASE WHEN coalesce(cd_pessoa_fisica::text, '') = '' THEN  substr(obter_dados_pf_pj(null,cd_cgc, 'CNES'),1,20)  ELSE substr(obter_dados_pf(cd_pessoa_fisica,'CNES'),1,20) END  
			into STRICT	cd_cgc_prestador_w, 
				nr_cpf_prestador_w, 
				ds_prestador_w, 
				cd_cnes_prestador_w 
			from	pls_prestador 
			where	nr_sequencia	= nr_seq_prestador_ww;
			exception 
			when others then 
				cd_cgc_prestador_w	:= null;
				nr_cpf_prestador_w	:= null;
				ds_prestador_w		:= null;
				cd_cnes_prestador_w	:= null;
			end;
			 
			begin 
			select	dt_pagamento 
			into STRICT	dt_pagamento_w 
			from	pls_prot_conta_titulo 
			where	nr_seq_protocolo 	= nr_seq_protocolo_w;
			exception 
			when others then 
				dt_pagamento_w		:= null;
			end;
			 
			select	coalesce(sum(coalesce(vl_liberado,0)),0), 
				coalesce(sum(coalesce(vl_liberado,0)),0), 
				coalesce(sum(coalesce(vl_glosa,0)),0) 
			into STRICT	vl_fatura_w, 
				vl_lib_fatura_w, 
				vl_glosa_fatura_w 
			from 	pls_conta_medica_resumo 
			where 	nr_seq_prestador_pgto 		= nr_seq_prestador_ww 
			and 	nr_seq_protocolo		= nr_seq_protocolo_p 
			and 	nr_seq_lote_pgto 		= nr_seq_lote_pgto_w;
			 
			-- FORMA PAGAMENTO 
			ie_forma_pagto_w	:= pls_obter_dados_prestador(nr_seq_prestador_ww,'FP');
			cd_banco_w		:= pls_obter_dados_prestador(nr_seq_prestador_ww,'B');
			cd_agencia_w		:= pls_obter_dados_prestador(nr_seq_prestador_ww,'ACD');
			nr_conta_w		:= pls_obter_dados_prestador(nr_seq_prestador_ww,'CCD');
			 
			if (qt_protocolo_w	= 0) or (ie_mudou_data_w = 'S') then			 
				select	nextval('w_pls_protocolo_seq') 
				into STRICT	nr_seq_protocolo_ww 
				;
		 
				insert 	into w_pls_protocolo( 
					nr_sequencia, 
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					cd_ans, 
					ds_operadora, 
					cd_cgc_operadora, 
					dt_pagamento, 
					ie_forma_pagto, 
					cd_banco, 
					cd_agencia, 
					nr_conta, 
					nr_seq_protocolo, 
					cd_prestador,		 
					ds_prestador, 
					cd_cnes_prestador,					 
					nr_demonstrativo,    
					dt_emissao,	 
					cd_cgc_prestador, 
					nr_cpf_prestador, 
					nr_fatura, 
					nr_lote, 
					dt_envio_lote, 
					nr_protocolo, 
					vl_fatura, 
					vl_lib_fatura, 
					vl_glosa_fatura, 
					nr_seq_lote_pgto)		 
				values (nr_seq_protocolo_ww, 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					cd_ans_w, 
					ds_operadora_w, 
					cd_cgc_operadora_w, 
					dt_pagamento_w, 
					ie_forma_pagto_w, 
					cd_banco_w, 
					cd_agencia_w, 
					nr_conta_w, 
					nr_seq_protocolo_p, 
					nr_seq_prestador_w, 
					ds_prestador_w, 
					cd_cnes_prestador_w,				 
					null,    
					null, 
					cd_cgc_prestador_w, 
					nr_cpf_prestador_w, 
					null, 
					null, 
					null, 
					null, 
					null, 
					null, 
					null, 
					nr_seq_lote_pgto_w);
			end if;
 
			insert	into w_pls_resumo_protocolo( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				dt_protocolo, 
				nr_seq_protocolo, 
				nr_seq_protocolo_w, 
				nr_seq_lote_protocolo, 
				vl_informado, 
				vl_processado, 
				vl_liberado, 
				vl_glosa) 
			values (nextval('w_pls_resumo_protocolo_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				dt_protocolo_w, 
				nr_seq_protocolo_w, 
				nr_seq_protocolo_ww, 
				nr_protocolo_prestador_w, 
				vl_fatura_w, 
				vl_fatura_w, 
				vl_lib_fatura_w, 
				vl_glosa_fatura_w);
			 
			if (tb_demais_cred_deb_pagamento_w.count > 0) then 
				for j in (tb_demais_cred_deb_pagamento_w.first).. (tb_demais_cred_deb_pagamento_w.last) loop 
					if	qt_dem_cred_deb_pagam_w = 3 then 
						qt_dem_cred_deb_pagam_w 	:= 0;	
						exit;
					end if;
 
					insert	into w_pls_mov_pagamento( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo_w, 
						ie_indicacao, 
						cd_debito_cred, 
						ds_debito_cred, 
						vl_debito_cred) 
					values (nextval('w_pls_mov_pagamento_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_ww, 
						tb_demais_cred_deb_pagamento_w[j].ie_indicacao_pagam_w, 
						tb_demais_cred_deb_pagamento_w[j].cd_deb_cred_pagam_w, 
						tb_demais_cred_deb_pagamento_w[j].ds_deb_cred_pagam_w, 
						tb_demais_cred_deb_pagamento_w[j].vl_deb_cred_pagam_w);
						 
					tb_demais_cred_deb_pagamento_w.delete(j);
						 
					qt_dem_cred_deb_pagam_w	:= qt_dem_cred_deb_pagam_w + 1;		
				end loop;
			end if;
			 
			if (tb_demais_cred_deb_pagamento_w.count > 0) then 
				for k in ( tb_demais_cred_deb_pagamento_w.first).. ( tb_demais_cred_deb_pagamento_w.last) loop 
					if	qt_dem_cred_deb_demonst_w = 3 then						 
						qt_dem_cred_deb_demonst_w 	:= 0;
						exit;
					end if;
 
					insert	into w_pls_mov_demonst( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo_w, 
						ie_indicacao_demonst, 
						cd_debito_cred_demonst, 
						ds_debito_cred_demonst, 
						vl_debito_cred_demonst) 
					values (nextval('w_pls_mov_demonst_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_ww, 
						tb_demais_cred_deb_pagamento_w[k].ie_indicacao_pagam_w, 
						tb_demais_cred_deb_pagamento_w[k].cd_deb_cred_pagam_w, 
						tb_demais_cred_deb_pagamento_w[k].ds_deb_cred_pagam_w, 
						tb_demais_cred_deb_pagamento_w[k].vl_deb_cred_pagam_w);
						 
					tb_demais_cred_deb_pagamento_w.delete(k);
						 
					qt_dem_cred_deb_demonst_w	:= qt_dem_cred_deb_demonst_w + 1;		
				end loop;
			end if;
 
			qt_protocolo_w	:= qt_protocolo_w + 1;
			if (qt_protocolo_w = 4) or (ie_mudou_data_w = 'S') then				 
				qt_protocolo_w	:= 4 - qt_protocolo_w;
			 
				for	i in 1.. qt_protocolo_w loop 
					insert	into w_pls_resumo_protocolo( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						dt_protocolo, 
						nr_seq_protocolo, 
						nr_seq_protocolo_w, 
						nr_seq_lote_protocolo, 
						vl_informado, 
						vl_processado, 
						vl_liberado, 
						vl_glosa) 
					values (nextval('w_pls_resumo_protocolo_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						'', 
						'', 
						nr_seq_protocolo_ww, 
						'', 
						'', 
						'', 
						'', 
						'');
				end loop;
				 
				qt_protocolo_w	:= 0;
				 
				if ( qt_dem_cred_deb_pagam_w < 3) then 
					qt_dem_cred_deb_pagam_w	:= 3 - qt_dem_cred_deb_pagam_w;
 
					for	i in 1.. qt_dem_cred_deb_pagam_w loop 
					insert	into w_pls_mov_pagamento( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo_w, 
						ie_indicacao, 
						cd_debito_cred, 
						ds_debito_cred, 
						vl_debito_cred 
						) 
					values (nextval('w_pls_mov_pagamento_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_ww, 
						'', 
						'', 
						'', 
						'');
					end loop;
					qt_dem_cred_deb_pagam_w	:= 0;
				end if;
				 
				if ( qt_dem_cred_deb_demonst_w < 3) then 
					qt_dem_cred_deb_demonst_w	:= 3 - qt_dem_cred_deb_demonst_w;
					 
					for	i in 1.. qt_dem_cred_deb_demonst_w loop 
						insert	into w_pls_mov_demonst( 
						nr_sequencia, 
						dt_atualizacao, 
						nm_usuario, 
						dt_atualizacao_nrec, 
						nm_usuario_nrec, 
						nr_seq_protocolo_w, 
						ie_indicacao_demonst, 
						cd_debito_cred_demonst, 
						ds_debito_cred_demonst, 
						vl_debito_cred_demonst 
						) 
					values (nextval('w_pls_mov_demonst_seq'), 
						clock_timestamp(), 
						nm_usuario_p, 
						clock_timestamp(), 
						nm_usuario_p, 
						nr_seq_protocolo_ww, 
						'', 
						'', 
						'', 
						'');
					end loop;
					 
					qt_dem_cred_deb_demonst_w := 0;
				end if;				
			end if;			
			end;
		end loop;
		close C05;
		 
		if ( qt_protocolo_w	<> 0) or (ie_mudou_data_w = 'S') then 
			qt_protocolo_w	:= 4 - qt_protocolo_w;
			 
			for	i in 1.. qt_protocolo_w loop 
				insert	into w_pls_resumo_protocolo( 
					nr_sequencia, 
					dt_atualizacao, 
					nm_usuario, 
					dt_atualizacao_nrec, 
					nm_usuario_nrec, 
					dt_protocolo, 
					nr_seq_protocolo, 
					nr_seq_protocolo_w, 
					nr_seq_lote_protocolo, 
					vl_informado, 
					vl_processado, 
					vl_liberado, 
					vl_glosa) 
				values (nextval('w_pls_resumo_protocolo_seq'), 
					clock_timestamp(), 
					nm_usuario_p, 
					clock_timestamp(), 
					nm_usuario_p, 
					'', 
					'', 
					nr_seq_protocolo_ww, 
					'', 
					'', 
					'', 
					'', 
					'');
			end loop;
		end if;
		 
		if ( qt_dem_cred_deb_pagam_w < 3) then 
			qt_dem_cred_deb_pagam_w	:= 3 - qt_dem_cred_deb_pagam_w;
			 
			for	i in 1.. qt_dem_cred_deb_pagam_w loop 
				insert	into w_pls_mov_pagamento( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo_w, 
				ie_indicacao, 
				cd_debito_cred, 
				ds_debito_cred, 
				vl_debito_cred 
				) 
			values (nextval('w_pls_mov_pagamento_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_ww, 
				'', 
				'', 
				'', 
				'');
			end loop;
		end if;
		 
		if ( qt_dem_cred_deb_demonst_w <> 3) then 
			qt_dem_cred_deb_demonst_w	:= 3 - qt_dem_cred_deb_demonst_w;
			 
			for	i in 1.. qt_dem_cred_deb_demonst_w loop 
				insert	into w_pls_mov_demonst( 
				nr_sequencia, 
				dt_atualizacao, 
				nm_usuario, 
				dt_atualizacao_nrec, 
				nm_usuario_nrec, 
				nr_seq_protocolo_w, 
				ie_indicacao_demonst, 
				cd_debito_cred_demonst, 
				ds_debito_cred_demonst, 
				vl_debito_cred_demonst 
				) 
			values (nextval('w_pls_mov_demonst_seq'), 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				nr_seq_protocolo_ww, 
				'', 
				'', 
				'', 
				'');
			end loop;
		end if;
	end if;
	end;
end loop;
close C00;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_w_tiss30_dem_pag ( nr_seq_prestador_p bigint, nr_seq_protocolo_p bigint, dt_inicio_p timestamp, dt_fim_p timestamp, ie_opcao_data_p bigint, nm_usuario_p text, nr_seq_lote_pag_p bigint, nr_seq_pres_pag_p bigint) FROM PUBLIC;

