-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_mens_co ( nr_seq_mensalidade_seg_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


nr_seq_protocolo_w		pls_protocolo_conta.nr_sequencia%type;
ie_gerou_apropriacao_item_w	boolean;
ie_status_liberado_w		varchar(1);
nr_seq_pagador_w		pls_segurado_pagador.nr_seq_pagador%type;
nr_seq_item_mensalidade_w	pls_mensalidade_seg_item.nr_sequencia%type;

--Buscar todas as contas em que existe cobrança pendente do beneficiário. OBS: Será gerado um item de mensalidade para cada conta médica
C01 CURSOR FOR
	SELECT	nr_seq_conta,
		nr_seq_protocolo,
		dt_competencia_mens,
		sum(vl_beneficiario) vl_beneficiario
	from	pls_conta_co
	where	nr_seq_segurado	= pls_store_data_mens_pck.get_nr_seq_segurado
	and	ie_cobrar_mensalidade	= 'S'
	and	coalesce(nr_seq_mensalidade_seg::text, '') = ''
	and (nr_seq_pagador = nr_seq_pagador_w or coalesce(nr_seq_pagador::text, '') = '')
	and	coalesce(pls_store_data_mens_pck.get_nr_seq_regra_grupo_lote::text, '') = ''
	group by nr_seq_conta,
		nr_seq_protocolo,
		dt_competencia_mens
	
union all

	SELECT	nr_seq_conta,
		nr_seq_protocolo,
		dt_competencia_mens,
		sum(vl_beneficiario) vl_beneficiario
	from	pls_conta_co
	where	nr_seq_segurado	= pls_store_data_mens_pck.get_nr_seq_segurado
	and	ie_cobrar_mensalidade	= 'S'
	and	coalesce(nr_seq_mensalidade_seg::text, '') = ''
	and (nr_seq_pagador = nr_seq_pagador_w or coalesce(nr_seq_pagador::text, '') = '')
	and	(pls_store_data_mens_pck.get_nr_seq_regra_grupo_lote IS NOT NULL AND pls_store_data_mens_pck.get_nr_seq_regra_grupo_lote::text <> '')
	and	((nr_seq_prestador_exec = pls_store_data_mens_pck.get_seq_prestador_regra_exec) or (coalesce(pls_store_data_mens_pck.get_seq_prestador_regra_exec::text, '') = ''))
	and	((nr_seq_prestador_atend = pls_store_data_mens_pck.get_seq_prestador_regra_atend) or (coalesce(pls_store_data_mens_pck.get_seq_prestador_regra_atend::text, '') = ''))
	and	((ie_tipo_prestador_exec = pls_store_data_mens_pck.get_tipo_prestador_exec_regra) or (coalesce(pls_store_data_mens_pck.get_tipo_prestador_exec_regra::text, '') = ''))
	and	((ie_tipo_prestador_atend = pls_store_data_mens_pck.get_tipo_prestador_atend_regra) or (coalesce(pls_store_data_mens_pck.get_tipo_prestador_atend_regra::text, '') = ''))
	and	((ie_tipo_guia = pls_store_data_mens_pck.get_ie_tipo_guia_regra) or (coalesce(pls_store_data_mens_pck.get_ie_tipo_guia_regra::text, '') = ''))
	and	((ie_tipo_segurado = pls_store_data_mens_pck.get_ie_tipo_segurado_regra) or (coalesce(pls_store_data_mens_pck.get_ie_tipo_segurado_regra::text, '') = ''))
	and	((ie_preco = pls_store_data_mens_pck.get_ie_preco_regra) or (coalesce(pls_store_data_mens_pck.get_ie_preco_regra::text, '') = ''))
	group by nr_seq_conta,
		nr_seq_protocolo,
		dt_competencia_mens;

C02 CURSOR(	nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	nr_seq_centro_apropriacao	nr_seq_centro_apropriacao,
		sum(vl_apropriacao)		vl_apropriacao
	from	pls_conta_co_aprop
	where	nr_seq_conta	= nr_seq_conta_pc
	group by nr_seq_centro_apropriacao;
BEGIN
nr_seq_pagador_w 	:= coalesce(pls_store_data_mens_pck.get_seq_pagador_vl_n_coberto,pls_store_data_mens_pck.get_nr_seq_pagador_benef);

for r_c01_w in C01 loop
	if (pls_store_data_mens_pck.get_ie_forma_pagamento = 'P') then
		begin
		select	'S'
		into STRICT	ie_status_liberado_w
		from	pls_protocolo_conta
		where	nr_sequencia	= r_c01_w.nr_seq_protocolo
		and	ie_status in ('3','6');
		exception
		when others then
			ie_status_liberado_w	:= 'N';
		end;
	else
		begin
		select	'S'
		into STRICT	ie_status_liberado_w
		from	pls_conta
		where	nr_sequencia	= r_c01_w.nr_seq_conta
		and	ie_status	= 'F';
		exception
		when others then
			ie_status_liberado_w	:= 'N';
		end;
	end if;

	if (r_c01_w.vl_beneficiario <> 0) and (ie_status_liberado_w = 'S') and
		((coalesce(r_c01_w.dt_competencia_mens::text, '') = '') or (r_c01_w.dt_competencia_mens = pls_store_data_mens_pck.get_dt_mesano_referencia)) then

		nr_seq_item_mensalidade_w := null;

		nr_seq_item_mensalidade_w := pls_insert_mens_seg_item('13', nm_usuario_p, null, null, null, null, null, null, null, 'N', null, null, null, null, r_c01_w.nr_seq_conta, null, null, nr_seq_mensalidade_seg_p, null, null, null, nr_seq_protocolo_w, null, null, null, null, null, null, null, null, null, r_c01_w.vl_beneficiario, nr_seq_item_mensalidade_w);

		if (nr_seq_item_mensalidade_w IS NOT NULL AND nr_seq_item_mensalidade_w::text <> '') then
			update	pls_conta_co
			set	nr_seq_mensalidade_seg	= nr_seq_mensalidade_seg_p
			where	nr_seq_conta		= r_c01_w.nr_seq_conta
			and	ie_cobrar_mensalidade	= 'S'
			and	coalesce(nr_seq_mensalidade_seg::text, '') = '';

			ie_gerou_apropriacao_item_w	:= false;

			for r_c02_w in C02(r_c01_w.nr_seq_conta) loop
				insert into pls_mens_seg_item_aprop(nr_sequencia, dt_atualizacao, dt_atualizacao_nrec, nm_usuario, nm_usuario_nrec,
					nr_seq_item, nr_seq_centro_apropriacao, vl_apropriacao)
				values (nextval('pls_mens_seg_item_aprop_seq'), clock_timestamp(), clock_timestamp(), nm_usuario_p, nm_usuario_p,
					nr_seq_item_mensalidade_w, r_c02_w.nr_seq_centro_apropriacao, r_c02_w.vl_apropriacao);

				ie_gerou_apropriacao_item_w	:= true;
			end loop;

			if (ie_gerou_apropriacao_item_w) then
				update	pls_mensalidade_seg_item
				set	ie_valor_apropriado	= 'S'
				where	nr_sequencia = nr_seq_item_mensalidade_w;
			end if;
		end if;
	end if;
end loop;

--commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_mens_co ( nr_seq_mensalidade_seg_p bigint, nm_usuario_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

