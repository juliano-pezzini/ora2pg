-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_cobranca_titulo ( nr_seq_cobranca_p bigint, cd_estabelecimento_p bigint, nr_titulo_p bigint, vl_original_p bigint, vl_acobrar_p bigint, dt_inclusao_p timestamp, cd_tipo_portador_p bigint, nr_seq_cobrador_p bigint, cd_portador_p bigint, nm_usuario_p text) AS $body$
DECLARE


ie_status_w		cobranca.ie_status%type;
nr_seq_cobranca_w	cobranca.nr_sequencia%type;
nr_seq_regra_w 		cobranca_regra.nr_sequencia%type;
nr_seq_cobrador_w 	cobranca_regra.nr_seq_cobrador%type;
nr_seq_orgao_w		cobranca_regra.nr_seq_orgao%type;
nr_seq_historico_w	cobranca_regra.nr_seq_historico%type;
ds_historico_w		cobranca_regra.ds_historico%type;
ie_param_113_w		varchar(10);


BEGIN
ie_status_w		:= 'P';
nr_seq_cobranca_w	:= nr_seq_cobranca_p;

if (coalesce(vl_acobrar_p,0) = 0) then
	ie_status_w	:= 'E';
end if;

if (coalesce(nr_seq_cobranca_w,0) = 0) then
	select	nextval('cobranca_seq')
	into STRICT	nr_seq_cobranca_w
	;
end if;


ie_param_113_w := obter_param_usuario(-80, 113, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_param_113_w);
if (coalesce(ie_param_113_w,'N') = 'S')then
	nr_seq_regra_w 	:= obter_regra_cobranca_fin(nr_titulo_p);

	select  max(nr_seq_cobrador),
		max(nr_seq_orgao),
		max(nr_seq_historico),
		max(ds_historico)
	into STRICT 	nr_seq_cobrador_w,
		nr_seq_orgao_w,
		nr_seq_historico_w,
		ds_historico_w
	from cobranca_regra
	where nr_sequencia = nr_seq_regra_w;
end if;

insert   into cobranca(
		nr_sequencia,
		cd_estabelecimento,
		dt_atualizacao,
		nm_usuario,
		nr_titulo,
		nr_seq_cheque,
		ie_status,
		vl_original,
		vl_acobrar,
		dt_previsao_cobranca,
		dt_inclusao,
		cd_tipo_portador,
		nr_seq_cobrador,
		cd_portador,
		dt_atualizacao_nrec,
		nm_usuario_nrec)
	values (	nr_seq_cobranca_w,
		cd_estabelecimento_p,
		clock_timestamp(),
		nm_usuario_p,
		nr_titulo_p,
		null,
		ie_status_w,
		vl_original_p,
		vl_acobrar_p,
		trunc(dt_inclusao_p,'dd'),
		trunc(clock_timestamp(),'dd'),
		cd_tipo_portador_p,
		coalesce(nr_seq_cobrador_w, nr_seq_cobrador_p),
		cd_portador_p,
		clock_timestamp(),
		nm_usuario_p);

if (nr_seq_historico_w IS NOT NULL AND nr_seq_historico_w::text <> '') then
	insert 	into cobranca_historico(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_cobranca,
			dt_historico,
			nr_seq_historico,
			ds_historico)
		values (	nextval('cobranca_historico_seq'),
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_cobranca_w,
			clock_timestamp(),
			nr_seq_historico_w,
			ds_historico_w);
end if;

if (nr_seq_orgao_w IS NOT NULL AND nr_seq_orgao_w::text <> '') then
	insert 	into cobranca_orgao(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_cobranca,
			dt_inclusao,
			dt_solicitacao_envio,
			nr_seq_orgao)
		values ( nextval('cobranca_orgao_seq'),
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_cobranca_w,
			clock_timestamp(),
			clock_timestamp(),
			nr_seq_orgao_w);
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_cobranca_titulo ( nr_seq_cobranca_p bigint, cd_estabelecimento_p bigint, nr_titulo_p bigint, vl_original_p bigint, vl_acobrar_p bigint, dt_inclusao_p timestamp, cd_tipo_portador_p bigint, nr_seq_cobrador_p bigint, cd_portador_p bigint, nm_usuario_p text) FROM PUBLIC;

