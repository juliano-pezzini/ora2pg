-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_integrar_lote ( nr_lote_contabil_p bigint, nr_seq_mes_ref_p bigint, nm_usuario_p text) AS $body$
DECLARE


/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta:
[  ]  Objetos do dicionario [ X ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatorios [ ] Outros:
 ------------------------------------------------------------------------------------------------------------------

Pontos de atencao:
	IE_CENTRO_CUSTO_CONTA_W
		Parametro 923 - [56] - Integrar lote - Gerar movimento com o centro de custo da conta contabil
-------------------------------------------------------------------------------------------------------------------

Referencias:
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
ds_erro_w					varchar(1000);
cd_conta_contabil_w			varchar(40);
cd_conta_debito_w			varchar(40);
cd_conta_credito_w			varchar(40);
ie_debito_credito_w			varchar(01);
cd_historico_w				bigint;
nr_sequencia_w				bigint;
nr_sequencia_cc_w			bigint;
dt_movimento_w				timestamp;
vl_movimento_w				double precision;
cd_centro_custo_w			integer;
ds_compl_historico_w		varchar(255);
qt_movimento_w				bigint;
nr_seq_agrupamento_ww		bigint	:= 0;
nr_seq_agrupamento_w		bigint;
dt_atualizacao_w			timestamp;
ds_ordem_w					varchar(255);
cd_conta_contabil_ww		varchar(40)	:= '';
ie_debito_credito_ww		varchar(01)	:= '';
dt_movimento_ww				timestamp			:= clock_timestamp();
cd_historico_ww				bigint	:= 0;
ds_compl_historico_ww		varchar(255)	:= '';
cd_tipo_lote_contabil_w		bigint;
ie_ordena_regra_agrup_w		varchar(01)	:= 'N';
ie_agrupa_w					varchar(01);
qt_regra_agrup_w			integer;
cd_estabelecimento_w		smallint;
cd_estab_movto_w			bigint;
cd_estab_movto_ant_w		bigint;
ie_centro_custo_conta_w		varchar(1);
cd_classificacao_w			varchar(40);
cd_classif_debito_w			varchar(40);
cd_classif_credito_w		varchar(40);

qt_registro_w				bigint		:= 0;
qt_concil_w					bigint;
nr_documento_w				movimento_contabil.nr_documento%type;

nr_seq_trans_fin_w			movimento_contabil.nr_seq_trans_fin%type;
nr_vetor_c_w				bigint		:= 0;
nr_vetor_d_w				bigint		:= 0;
w							bigint		:= 0;
ie_origem_documento_w		ctb_movimento.ie_origem_documento%type;
nr_seq_movto_ger_w			movimento_contabil.nr_sequencia%type;
nr_agrup_seq_w				bigint;
ie_forma_agrup_w			empresa.ie_forma_agrup_sequencial%type;
cd_empresa_w				empresa.cd_empresa%type;
dt_referencia_w				timestamp;
cd_empresa_lote_w			empresa.cd_empresa%type;
cd_empresa_mes_ref_w		empresa.cd_empresa%type;
nr_seq_classif_movto_w		ctb_movimento.nr_seq_classif_movto%type;
ie_intercompany_w			ctb_movimento.ie_intercompany%type;
cd_estab_intercompany_w		ctb_movimento.cd_estab_intercompany%type;
nr_seq_proj_rec_w           ctb_movimento.nr_seq_proj_rec%type;
nr_codigo_controle_w        ctb_movimento.nr_codigo_controle%type;

c_movimentacao CURSOR FOR
	SELECT	ds_ordem,
		cd_conta_contabil,
		ie_debito_credito,
		cd_historico,
		dt_movimento,
		vl_movimento,
		cd_centro_custo,
		ds_compl_historico,
		nr_seq_agrupamento,
		cd_estabelecimento,
		cd_classificacao,
		nr_documento,
		nr_seq_trans_fin,
		ie_origem_documento,
		nr_sequencia,
		nr_seq_classif_movto,
		ie_intercompany,
		cd_estab_intercompany,
		nr_seq_proj_rec,
		nr_codigo_controle
	from (SELECT	coalesce(m.ds_ordem, ctb_define_ordenacao(	l.cd_estabelecimento,
								l.cd_tipo_lote_contabil,
								m.cd_conta_contabil,
								m.dt_movimento,
								m.cd_cgc,
								null,
								m.nr_documento,
								m.ie_debito_credito,
								m.ds_compl_historico,
								m.vl_movimento,
								m.nr_seq_agrupamento)) ds_ordem,
			m.cd_conta_contabil,
			m.ie_debito_credito,
			m.cd_historico,
			m.dt_movimento,
			m.vl_movimento,
			m.cd_centro_custo,
			m.ds_compl_historico,
			m.nr_seq_agrupamento,
			m.cd_estabelecimento,
			m.cd_classificacao,
			m.nr_documento,
			m.nr_seq_trans_fin,
			m.ie_origem_documento,
			m.nr_sequencia,
			m.nr_seq_classif_movto,
			m.ie_intercompany,
			m.cd_estab_intercompany,
			m.nr_seq_proj_rec,
			m.nr_codigo_controle
		from	movimento_contabil	m,
			lote_contabil		l
		where	m.nr_lote_contabil	= nr_lote_contabil_p
		and	m.nr_lote_contabil	= l.nr_lote_contabil) alias2
	order by
		cd_estabelecimento,
		CASE WHEN 	ie_ordena_regra_agrup_w='S' THEN			ds_ordem  ELSE ie_debito_credito END ,
		ie_debito_credito,
		cd_conta_contabil,
		dt_movimento,
		cd_historico,
		ds_compl_historico,
		ie_origem_documento;

c01 CURSOR FOR
	SELECT	nr_seq_agrupamento,
		dt_movto,
		nr_seq_partida,
		(nr_agrup_seq_w + rownum) nr_agrup_sequencial
	from (
		SELECT	nr_seq_agrupamento,
			dt_movto,
			min(nr_seq_partida) keep(dense_rank first order by qt_conta,nr_seq_partida) nr_seq_partida
		from (
			select	count(cd_conta_debito) qt_conta, -- DEBITO
				nr_seq_agrupamento,
				trunc(dt_movimento,'dd') dt_movto,
				min(nr_sequencia) nr_seq_partida
			from	ctb_movimento
			where	nr_lote_contabil = nr_lote_contabil_p
			and	(cd_conta_debito IS NOT NULL AND cd_conta_debito::text <> '')
			group by
				nr_seq_agrupamento,
				trunc(dt_movimento,'dd')
			
union all

			select	count(cd_conta_credito) qt_conta, -- CREDITO
				nr_seq_agrupamento,
				trunc(dt_movimento,'dd') dt_movto,
				min(nr_sequencia) nr_seq_partida
			from	ctb_movimento
			where	nr_lote_contabil = nr_lote_contabil_p
			and	(cd_conta_credito IS NOT NULL AND cd_conta_credito::text <> '')
			group by
				nr_seq_agrupamento,
				trunc(dt_movimento,'dd')
			) alias13
		group by
			nr_seq_agrupamento,
			dt_movto
		) alias14;

type C01_type is table of C01%rowtype;
C01_regs_w C01_type;


type 		fetch_array is table of c_movimentacao%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_movimentacao_w	vetor;

BEGIN
CALL philips_contabil_pck.set_ie_integrando_lote('S');
begin

	begin
	select	1
	into STRICT	qt_movimento_w
	from	ctb_movimento
	where	nr_lote_contabil	= nr_lote_contabil_p  LIMIT 1;
	exception
	when no_data_found then
		qt_movimento_w	:= 0;
	end;

	if (qt_movimento_w > 0)  then
		-- O Lote ja tem movimento digitado ou integrado
		CALL wheb_mensagem_pck.exibir_mensagem_abort(237237);
	end if;

	select	dt_atualizacao_saldo,
		cd_tipo_lote_contabil,
		cd_estabelecimento,
		obter_empresa_estab(cd_estabelecimento)
	into STRICT	dt_atualizacao_w,
		cd_tipo_lote_contabil_w,
		cd_estabelecimento_w,
		cd_empresa_lote_w
	from	lote_contabil
	where	nr_lote_contabil	= nr_lote_contabil_p;

	select	cd_empresa
	into STRICT	cd_empresa_mes_ref_w
	from	ctb_mes_ref
	where	nr_sequencia = nr_seq_mes_ref_p;
	
	if (cd_empresa_lote_w <> cd_empresa_mes_ref_w) then
		begin
		-- O lote contabil e de uma empresa diferente do mes de referencia
		CALL wheb_mensagem_pck.exibir_mensagem_abort(448766);
		end;
	end if;
	
	if (dt_atualizacao_w IS NOT NULL AND dt_atualizacao_w::text <> '') then
		--O Lote ja foi atualizado
		CALL wheb_mensagem_pck.exibir_mensagem_abort(237238);
	end if;

	begin
	select	1
	into STRICT	qt_movimento_w
	from	movimento_contabil
	where	nr_lote_contabil	= nr_lote_contabil_p  LIMIT 1;
	exception
	when no_data_found then
		qt_movimento_w	:= 0;
	end;

	if (qt_movimento_w = 0) then
		-- Este lote nao possui dados para integracao
		CALL wheb_mensagem_pck.exibir_mensagem_abort(237240);
	end if;

	ie_centro_custo_conta_w	:= coalesce(obter_valor_param_usuario(923, 56, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w), 'N');

	select	count(1),
		max(ie_agrupa)
	into STRICT	qt_regra_agrup_w,
		ie_agrupa_w
	from	ctb_regra_agrup
	where	cd_tipo_lote_contabil = cd_tipo_lote_contabil_w
	and	cd_estabelecimento    = cd_estabelecimento_w
	and	(ie_regra_ordem_01 IS NOT NULL AND ie_regra_ordem_01::text <> '')
	and	(ie_regra_ordem_02 IS NOT NULL AND ie_regra_ordem_02::text <> '')
	and	(ie_regra_ordem_03 IS NOT NULL AND ie_regra_ordem_03::text <> '')
	and	(ie_regra_ordem_04 IS NOT NULL AND ie_regra_ordem_04::text <> '')
	and	(ie_regra_ordem_05 IS NOT NULL AND ie_regra_ordem_05::text <> '');

	ie_agrupa_w	:= coalesce(ie_agrupa_w, 'S');

	if (qt_regra_agrup_w > 0) then
		ie_ordena_regra_agrup_w	:= 'S';
	end if;

	update	lote_contabil
	set	nr_seq_mes_ref		= nr_seq_mes_ref_p,
		dt_integracao		= clock_timestamp(),
		dt_atualizacao		= clock_timestamp(),
		nm_usuario		= nm_usuario_p
	where	nr_lote_contabil	= nr_lote_contabil_p;
	commit;

	CALL ctb_gravar_log_lote(nr_lote_contabil_p, 3, '', nm_usuario_p);

	open c_movimentacao;
	loop
	fetch c_movimentacao bulk collect into s_array limit 1000;
		vetor_movimentacao_w(i)	:= s_array;
		i			:= i + 1;
	EXIT WHEN NOT FOUND; /* apply on c_movimentacao */
	end loop;
	close c_movimentacao;

	qt_registro_w	:= 0;

	for i in 1..vetor_movimentacao_w.count loop
		begin
		s_array := vetor_movimentacao_w(i);
		for z in 1..s_array.count loop
			--ds_ordem_w		:= s_array(z).ds_ordem;
			cd_conta_contabil_w		:= s_array[z].cd_conta_contabil;
			ie_debito_credito_w		:= s_array[z].ie_debito_credito;
			cd_historico_w			:= s_array[z].cd_historico;
			dt_movimento_w			:= s_array[z].dt_movimento;
			vl_movimento_w			:= s_array[z].vl_movimento;
			cd_centro_custo_w		:= s_array[z].cd_centro_custo;
			ds_compl_historico_w	:= s_array[z].ds_compl_historico;
			nr_seq_agrupamento_w	:= s_array[z].nr_seq_agrupamento;
			cd_estab_movto_w		:= s_array[z].cd_estabelecimento;
			cd_classificacao_w		:= s_array[z].cd_classificacao;
			nr_documento_w			:= s_array[z].nr_documento;
			nr_seq_trans_fin_w		:= s_array[z].nr_seq_trans_fin;
			ie_origem_documento_w	:= s_array[z].ie_origem_documento;
			nr_seq_movto_ger_w		:= s_array[z].nr_sequencia;
			nr_seq_classif_movto_w  := s_array[z].nr_seq_classif_movto;
			ie_intercompany_w		:= s_array[z].ie_intercompany;
			cd_estab_intercompany_w	:= s_array[z].cd_estab_intercompany;
			nr_seq_proj_rec_w       := s_array[z].nr_seq_proj_rec;
			nr_codigo_controle_w    := s_array[z].nr_codigo_controle;
			
			begin
			dt_movimento_w		:= trunc(dt_movimento_w, 'dd');
			cd_conta_debito_w	:= null;
			cd_conta_credito_w	:= null;
			cd_classif_debito_w	:= '';
			cd_classif_credito_w	:= '';

			if (cd_tipo_lote_contabil_w = 18) then
				ie_agrupa_w	:= obter_se_trans_agrup(nr_seq_trans_fin_w);
			end if;

			if (ie_debito_credito_w = 'D') then
				cd_conta_debito_w	:= cd_conta_contabil_w;
				cd_classif_debito_w	:= cd_classificacao_w;
			else
				cd_conta_credito_w	:= cd_conta_contabil_w;
				cd_classif_credito_w	:= cd_classificacao_w;
			end if;

			/* Se deve agrupar e o registro for igual ao registro anterior */

			if (ie_agrupa_w = 'S') and (ie_debito_credito_w = ie_debito_credito_ww) and (cd_conta_contabil_w = cd_conta_contabil_ww) and (dt_movimento_w	= dt_movimento_ww) and (cd_historico_w	= cd_historico_ww) and (coalesce(nr_seq_agrupamento_w,0)	= coalesce(nr_seq_agrupamento_ww,0)) and (coalesce(cd_estab_movto_w,0) = coalesce(cd_estab_movto_ant_w,0)) and (coalesce(ds_compl_historico_w,'0') = coalesce(ds_compl_historico_ww,'0')) then
				begin
				
				update	ctb_movimento
				set	vl_movimento	= vl_movimento + vl_movimento_w
				where	nr_sequencia	= nr_sequencia_w;

				/* Atualiza movimento de origem */

				update	movimento_contabil
				set	nr_seq_ctb_movto	= nr_sequencia_w
				where	nr_lote_contabil	= nr_lote_contabil_p
				and	nr_sequencia		= nr_seq_movto_ger_w;
				/* Fim atualizacao movimento de origem */


				
				/* Atualiza movimento_contabil_doc - OS 1934502 */

				update	movimento_contabil_doc
				set	nr_seq_ctb_movto	= nr_sequencia_w
				where	nr_lote_contabil	= nr_lote_contabil_p
				and	nr_seq_movimento		= nr_seq_movto_ger_w;
				/* Atualiza movimento_contabil_doc - OS 1934502*/

				end;
			else
				begin

				select	nextval('ctb_movimento_seq')
				into STRICT	nr_sequencia_w
				;

				insert into ctb_movimento(nr_sequencia,
					nr_lote_contabil,
					nr_seq_mes_ref,
					dt_movimento,
					vl_movimento,
					dt_atualizacao,
					nm_usuario,
					cd_historico,
					cd_conta_debito,
					cd_conta_credito,
					ds_compl_historico,
					nr_seq_agrupamento,
					ie_revisado,
					cd_estabelecimento,
					cd_classif_debito,
					cd_classif_credito,
					nr_agrup_sequencial,
					nr_documento,
					ie_origem_documento,
					ie_status_origem,
					nr_seq_classif_movto,
					ie_intercompany,
					cd_estab_intercompany,
					nr_seq_proj_rec,
					nr_codigo_controle)
				values (nr_sequencia_w,
					nr_lote_contabil_p,
					nr_seq_mes_ref_p,
					dt_movimento_w,
					vl_movimento_w,
					clock_timestamp(),
					nm_usuario_p,
					cd_historico_w,
					cd_conta_debito_w,
					cd_conta_credito_w,
					ds_compl_historico_w,
					nr_seq_agrupamento_w,
					'N',
					cd_estab_movto_w,
					cd_classif_debito_w,
					cd_classif_credito_w,
					null,
					nr_documento_w,
					ie_origem_documento_w,
					'S',
					nr_seq_classif_movto_w,
					ie_intercompany_w,
					cd_estab_intercompany_w,
					nr_seq_proj_rec_w,
					nr_codigo_controle_w);

				/* Atualiza movimento de origem */

				update	movimento_contabil
				set	nr_seq_ctb_movto	= nr_sequencia_w
				where	nr_lote_contabil	= nr_lote_contabil_p
				and	nr_sequencia		= nr_seq_movto_ger_w;
				/* Fim atualizacao movimento de origem */



				/* Atualiza movimento_contabil_doc - OS 1934502 */

				update	movimento_contabil_doc
				set		nr_seq_ctb_movto	= nr_sequencia_w
				where	nr_lote_contabil	= nr_lote_contabil_p
				and		nr_seq_movimento		= nr_seq_movto_ger_w;
				/* Atualiza movimento_contabil_doc - OS 1934502*/

				
				qt_registro_w	:= qt_registro_w + 1;

				if (qt_registro_w = 1000) then
					commit;
					qt_registro_w	:= 0;
				end if;

				ie_debito_credito_ww	:= ie_debito_credito_w;
				cd_conta_contabil_ww	:= cd_conta_contabil_w;
				dt_movimento_ww		:= dt_movimento_w;
				cd_historico_ww		:= cd_historico_w;
				ds_compl_historico_ww	:= ds_compl_historico_w;
				cd_estab_movto_ant_w	:= cd_estab_movto_w;
				nr_seq_agrupamento_ww	:= nr_seq_agrupamento_w;
				
				end;
			end if;

			if (coalesce(cd_centro_custo_w, 0) > 0) then
				begin
				select	coalesce(max(nr_sequencia),0)
				into STRICT	nr_sequencia_cc_w
				from	ctb_movto_centro_custo
				where	nr_seq_movimento	= nr_sequencia_w
				and	cd_centro_custo		= cd_centro_custo_w;

				if (nr_sequencia_cc_w > 0) then
					update	ctb_movto_centro_custo
					set	vl_movimento	= vl_movimento + vl_movimento_w
					where	nr_sequencia	= nr_sequencia_cc_w;
				else
					select	nextval('ctb_movto_centro_custo_seq')
					into STRICT	nr_sequencia_cc_w
					;

					insert into ctb_movto_centro_custo(nr_sequencia,
						nr_seq_movimento,
						cd_centro_custo,
						dt_atualizacao,
						nm_usuario,
						vl_movimento,
						pr_rateio)
					values (nr_sequencia_cc_w,
						nr_sequencia_w,
						cd_centro_custo_w,
						clock_timestamp(),
						nm_usuario_p,
						vl_movimento_w,
						0);
				end if;

				if (ie_centro_custo_conta_w = 'S') then
					CALL ctb_atualiza_ccusto_movto(	nr_sequencia_w,
									cd_estabelecimento_w,
									nm_usuario_p);
				end if;
				end;
			end if;

			CALL ctb_atualizar_rateio_movto(	nr_sequencia_w,
							nm_usuario_p);

			end;
		end loop;
		end;
	end loop;

	begin
	select	1
	into STRICT	qt_movimento_w
	from	ctb_movimento
	where	nr_lote_contabil	= nr_lote_contabil_p
	and	cd_estabelecimento	<> cd_estabelecimento_w  LIMIT 1;
	exception
	when no_data_found then
		qt_movimento_w	:= 0;
	end;

	if (qt_movimento_w > 0) then
		CALL ctb_desmembrar_lote_estab(	cd_estabelecimento_w,
						nr_lote_contabil_p,
						nm_usuario_p);
	end if;

	commit;

	/*
	Pegar informacoes do lote contabil e data do lote
	*/
	begin
		select	trunc(c.dt_referencia,'yyyy'),
			b.cd_estabelecimento,
			obter_empresa_estab(b.cd_estabelecimento) cd_empresa
		into STRICT	dt_referencia_w,
			cd_estabelecimento_w,
			cd_empresa_w
		from	lote_contabil b,
			ctb_mes_ref c
		where	b.nr_seq_mes_ref = c.nr_sequencia
		and	b.nr_lote_contabil = nr_lote_contabil_p;
	exception
	when others then
		dt_referencia_w		:= null;
		cd_estabelecimento_w	:= cd_estabelecimento_w;
		cd_empresa_w		:= 0;
	end;

	if (cd_empresa_w > 0) then
		begin
		/*
		Pegar forma de agrupador sequencial para a empresa
		*/
		select	coalesce(max(a.ie_forma_agrup_sequencial),'ANO')
		into STRICT	ie_forma_agrup_w
		from	empresa a
		where	a.cd_empresa = cd_empresa_w;

		/*
		Pegar ultimo codigo de agrupador sequencial conforme regra cadastrada na empresa
		*/
		if (ie_forma_agrup_w = 'ANO') then
			begin

			select	coalesce(max(nr_agrup_sequencial),0)
			into STRICT	nr_agrup_seq_w
			from	ctb_movimento a,
				lote_contabil b,
				ctb_mes_ref c
			where	a.nr_lote_contabil = b.nr_lote_contabil
			and	b.nr_seq_mes_ref = c.nr_sequencia
			and	trunc(c.dt_referencia,'yyyy') = dt_referencia_w;

			end;
		elsif (ie_forma_agrup_w = 'AEM') then
			begin

			select	coalesce(max(nr_agrup_sequencial),0)
			into STRICT	nr_agrup_seq_w
			from	ctb_movimento a,
				lote_contabil b,
				ctb_mes_ref c
			where	a.nr_lote_contabil = b.nr_lote_contabil
			and	b.nr_seq_mes_ref = c.nr_sequencia
			and	trunc(c.dt_referencia,'yyyy') = dt_referencia_w
			and	c.cd_empresa = cd_empresa_w;

			end;
		elsif (ie_forma_agrup_w = 'AES') then
			begin

			select	coalesce(max(nr_agrup_sequencial),0)
			into STRICT	nr_agrup_seq_w
			from	ctb_movimento a,
				lote_contabil b,
				ctb_mes_ref c
			where	a.nr_lote_contabil = b.nr_lote_contabil
			and	b.nr_seq_mes_ref = c.nr_sequencia
			and	trunc(c.dt_referencia,'yyyy') = dt_referencia_w
			and	c.cd_empresa = cd_empresa_w
			and	b.cd_estabelecimento = cd_estabelecimento_w;

			end;
		elsif (ie_forma_agrup_w = 'EMP') then
			begin

			select	coalesce(max(nr_agrup_sequencial),0)
			into STRICT	nr_agrup_seq_w
			from	ctb_movimento a,
				lote_contabil b,
				ctb_mes_ref c
			where	a.nr_lote_contabil = b.nr_lote_contabil
			and	b.nr_seq_mes_ref = c.nr_sequencia
			and	c.cd_empresa = cd_empresa_w;

			end;
		elsif (ie_forma_agrup_w = 'EST') then
			begin

			select	coalesce(max(nr_agrup_sequencial),0)
			into STRICT	nr_agrup_seq_w
			from	ctb_movimento a,
				lote_contabil b,
				ctb_mes_ref c
			where	a.nr_lote_contabil = b.nr_lote_contabil
			and	b.nr_seq_mes_ref = c.nr_sequencia
			and	c.cd_empresa = cd_empresa_w
			and	b.cd_estabelecimento = cd_estabelecimento_w;

			end;
		end if;

		update 	ctb_movimento
		set	nr_agrup_sequencial 	= 0
		where	nr_lote_contabil	= nr_lote_contabil_p;
		commit;

		open C01;
		loop
		fetch C01 bulk collect into C01_regs_w limit 1000;
			begin
			for i in 1..C01_regs_w.count loop
				begin
				update	ctb_movimento a
				set	a.nr_seq_movto_partida = CASE WHEN C01_regs_w[i].nr_seq_partida=a.nr_sequencia THEN null  ELSE C01_regs_w[i].nr_seq_partida END ,
					nr_agrup_sequencial = 0 + C01_regs_w[i].nr_agrup_sequencial
				where	trunc(a.dt_movimento,'dd') = C01_regs_w[i].dt_movto
				and	a.nr_lote_contabil = nr_lote_contabil_p
				and	a.nr_seq_agrupamento = C01_regs_w[i].nr_seq_agrupamento;
				end;
			end loop;
			commit;
			end;
		EXIT WHEN NOT FOUND; /* apply on C01 */
		end loop;
		close c01;
		end;
	end if;

	commit;
CALL philips_contabil_pck.set_ie_integrando_lote('N');
exception
when others then
	CALL philips_contabil_pck.set_ie_integrando_lote('N');
	ds_erro_w := substr(sqlerrm,1,1000);
	CALL wheb_mensagem_pck.exibir_mensagem_abort(448772,'DS_ERRO='|| replace(ds_erro_w,'#@',''));
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_integrar_lote ( nr_lote_contabil_p bigint, nr_seq_mes_ref_p bigint, nm_usuario_p text) FROM PUBLIC;

