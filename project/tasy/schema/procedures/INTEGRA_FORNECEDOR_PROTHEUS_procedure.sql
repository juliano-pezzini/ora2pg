-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE integra_fornecedor_protheus ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) AS $body$
DECLARE


nm_razao_social_w       varchar(255);
nm_fantasia_w       varchar(255);
ds_segmento_w       varchar(255);
cd_cnpj_cpf_w       varchar(14);
nr_inscricao_estadual_w     varchar(20);
nr_inscricao_municipal_w      varchar(20);
ds_endereco_w       varchar(40);
nr_endereco_w       varchar(10);
ds_complemento_w      varchar(255);
ds_bairro_w       varchar(40);
ds_cidade_w       varchar(40);
sg_estado_w       pessoa_juridica.sg_estado%type;
cd_cep_w        varchar(15);
ds_email_w        varchar(255);
ds_contato_w        varchar(255);
nr_ddd_telefone_w       varchar(3);
nr_telefone_w       varchar(15);
nr_ramal_w        integer;
nr_telefone_2_w       varchar(15);
nr_ramal_2_w        varchar(5);
nr_banco_w        varchar(3);
nr_agencia_w        varchar(5);
nr_conta_w        varchar(10);
nr_digito_w       varchar(1);
nr_cond_pagto_w       varchar(3);
nr_natureza_financeira_w      varchar(10);
ie_tipo_fornecedor_w      varchar(1);
nr_rg_w         varchar(15);
qt_registros_w        bigint;
cd_condicao_pagto_w     bigint;
cd_banco_w        banco.cd_banco%type;
cd_tipo_pessoa_w        smallint;
nr_seq_pj_estab_w     bigint;
nr_seq_conta_w        bigint;
ie_erro_w       varchar(1) := 'N';
qt_existe_w       bigint;
ie_operacao_w       varchar(15);
nr_sequencia_w        bigint;
nr_seq_classif_w      bigint;
cd_pessoa_fisica_w      varchar(10);
cd_sistema_ant_w      varchar(20);
cd_estab_protheus_w     varchar(10);
cd_estab_int_w        varchar(10);
tag_pais_w        varchar(15);
cd_regra_w        smallint;


BEGIN

select  substr(nm_razao_social,1,255),
  substr(nm_fantasia,1,255),
  substr(ds_segmento_atividade,1,255),
  cd_cgc,
  substr(nr_inscricao_estadual,1,40),
  substr(nr_inscricao_municipal,1,40),
  substr(ds_endereco,1,40),
  somente_numero(nr_endereco),
  substr(ds_complemento,1,255),
  substr(ds_bairro,1,40),
  substr(ds_cidade,1,40),
  substr(sg_estado,1,2),
  cd_cep,
  substr(ds_email,1,255),
  substr(ds_contato,1,255),
  substr(nr_ddd_telefone,1,3),
  substr(nr_telefone,1,15),
  somente_numero(nr_ramal_telefone),
  substr(nr_telefone_2,1,15),
  substr(nr_ramal_telefone_2,1,5),
  substr(nr_banco,1,3),
  substr(nr_agencia,1,5),
  somente_numero(substr(nr_conta,1,position('-' in nr_conta))) nr_conta,
  somente_numero(substr(nr_conta,position('-' in nr_conta),10)) nr_digito,
  nr_cond_pagto,
  nr_natureza_financeira,
  ie_operacao,
  ie_tipo_fornecedor,
  nr_rg,
  cd_sistema_ant,
  cd_estabelecimento
into STRICT  nm_razao_social_w,
  nm_fantasia_w,
  ds_segmento_w,
  cd_cnpj_cpf_w,
  nr_inscricao_estadual_w,
  nr_inscricao_municipal_w,
  ds_endereco_w,
  nr_endereco_w,
  ds_complemento_w,
  ds_bairro_w,
  ds_cidade_w,
  sg_estado_w,
  cd_cep_w,
  ds_email_w,
  ds_contato_w,
  nr_ddd_telefone_w,
  nr_telefone_w,
  nr_ramal_w,
  nr_telefone_2_w,
  nr_ramal_2_w,
  nr_banco_w,
  nr_agencia_w,
  nr_conta_w,
  nr_digito_w,
  nr_cond_pagto_w,
  nr_natureza_financeira_w,
  ie_operacao_w,
  ie_tipo_fornecedor_w,
  nr_rg_w,
  cd_sistema_ant_w,
  cd_estab_protheus_w
from  w_protheus_fornecedor
where nr_sequencia = nr_sequencia_p;

if (coalesce(nm_razao_social_w::text, '') = '') then
  CALL gravar_log_protheus('ERRO', 'FO', WHEB_MENSAGEM_PCK.get_texto(309907) , nm_usuario_p); --A Nome/Razao social recebida do Protheus esta vazia.
  ie_erro_w := 'S';
end if;

if (ie_tipo_fornecedor_w = 'J') and (coalesce(nm_fantasia_w::text, '') = '') then
  CALL gravar_log_protheus('ERRO', 'FO', WHEB_MENSAGEM_PCK.get_texto(309908) , nm_usuario_p); --O nome fantasia recebido do Protheus esta vazio.
  ie_erro_w := 'S';
end if;

if (coalesce(cd_cnpj_cpf_w::text, '') = '') then
  CALL gravar_log_protheus('ERRO', 'FO', WHEB_MENSAGEM_PCK.get_texto(309909) , nm_usuario_p); --O CNPJ/CPF recebido do Protheus esta vazio.
  ie_erro_w := 'S';
end if;

if (coalesce(ds_endereco_w::text, '') = '') then
  CALL gravar_log_protheus('ERRO', 'FO', WHEB_MENSAGEM_PCK.get_texto(309911) , nm_usuario_p); --O endereco recebido do Protheus esta vazio.
  ie_erro_w := 'S';
end if;

if (coalesce(ds_cidade_w::text, '') = '') then
  CALL gravar_log_protheus('ERRO', 'FO',WHEB_MENSAGEM_PCK.get_texto(309912) , nm_usuario_p); --O municipio recebido do Protheus esta vazio.
  ie_erro_w := 'S';
end if;

if (coalesce(sg_estado_w::text, '') = '') then
  CALL gravar_log_protheus('ERRO', 'FO', WHEB_MENSAGEM_PCK.get_texto(309913) , nm_usuario_p); --A sigla do estado recebida do Protheus esta vazia.'
  ie_erro_w := 'S';
end if;

if (coalesce(cd_cep_w::text, '') = '') then
  CALL gravar_log_protheus('ERRO', 'FO', WHEB_MENSAGEM_PCK.get_texto(309915) , nm_usuario_p); --O CEP recebido do Protheus esta vazio.
  ie_erro_w := 'S';
end if;

select  obter_conversao_interna_int(null,'ESTABELECIMENTO','CD_ESTABELECIMENTO',cd_estab_protheus_w,'PTH')
into STRICT  cd_estab_int_w
;

select  count(*)
into STRICT  qt_registros_w
from  estabelecimento
where cd_estabelecimento = cd_estab_int_w;

if (qt_registros_w = 0) then
  CALL gravar_log_protheus('ERRO', 'FO', WHEB_MENSAGEM_PCK.get_texto(309636, 'CD_ESTAB_PROTHEUS_W=' || cd_estab_protheus_w), nm_usuario_p); --'A conversao para o estabelecimento ' || cd_estab_protheus_w || ' enviado pelo Protheus esta incorreta ou nao existe.'
  ie_erro_w := 'S';
end if;

/* Converter condicao de pagamento para cod. do Tasy */

if (ie_tipo_fornecedor_w = 'J') then

  select  coalesce(max(cd_condicao_pagamento),0)
  into STRICT  cd_condicao_pagto_w
  from  condicao_pagamento
  where upper(cd_sistema_ant) = upper(nr_cond_pagto_w);

  if (cd_condicao_pagto_w = 0) then
    begin

    select  (coalesce(max(cd_interno),'0'))::numeric
    into STRICT  cd_condicao_pagto_w
    from  conversao_meio_externo
    where upper(nm_tabela) = 'CONDICAO_PAGAMENTO'
    and upper(nm_atributo) = 'CD_CONDICAO_PAGAMENTO'
    and ie_sistema_externo = 'PTH'
    and upper(cd_externo) = upper(nr_cond_pagto_w);

    if (cd_condicao_pagto_w = 0) then
      cd_condicao_pagto_w := null;
    end if;

    end;
  end if;
end if;
/* Fim da conversao - Condicao Pagamento */



/* Verificar/Converter codigo do banco para o cod. do Tasy */

select  count(*)
into STRICT  qt_existe_w
from  banco
where cd_banco = (nr_banco_w)::numeric;

if (qt_existe_w = 0) then
  begin

  select  (coalesce(max(cd_interno),'0'))::numeric
  into STRICT  cd_banco_w
  from  conversao_meio_externo
  where upper(nm_tabela) = 'BANCO'
  and upper(nm_atributo) = 'CD_BANCO'
  and ie_sistema_externo = 'PTH'
  and upper(cd_externo) = upper(nr_banco_w);

  end;
else
  cd_banco_w  := (nr_banco_w)::numeric;
end if;
/* Fim da conversao - Banco */

if (ie_tipo_fornecedor_w = 'J') then
  select  count(*)
  into STRICT  qt_existe_w
  from  pessoa_juridica
  where cd_cgc = cd_cnpj_cpf_w;

  if (ie_erro_w = 'N') and (qt_existe_w > 0) and (cd_cnpj_cpf_w IS NOT NULL AND cd_cnpj_cpf_w::text <> '') and (ie_operacao_w = 'E') then
    begin

    update  pessoa_juridica
    set ie_situacao = 'I',
      dt_atualizacao = clock_timestamp(),
      nm_usuario = nm_usuario_p
    where cd_cgc = cd_cnpj_cpf_w;
    end;
  end if;
end if;

if (ie_tipo_fornecedor_w = 'J') and (ie_erro_w = 'N') and (cd_cnpj_cpf_w IS NOT NULL AND cd_cnpj_cpf_w::text <> '') and (ie_operacao_w = 'I') then
  begin

  if (qt_existe_w = 0) then

    select  min(cd_tipo_pessoa)
    into STRICT  cd_tipo_pessoa_w
    from  tipo_pessoa_juridica
    where ie_situacao = 'A';

    -- Verifica se ha regra de pre cadastro para o tipo de pessoa juridica
    select coalesce(max(cd_tipo_pessoa),0)
      into STRICT cd_regra_w
      from ( SELECT cd_tipo_pessoa
               from regra_pre_cad_pj
              where cd_tipo_pessoa = cd_tipo_pessoa_w
                and ie_exige_aprov_cadastro = 'S'

union

             SELECT cd_tipo_pessoa
               from regra_pre_cad_pj
              where coalesce(cd_tipo_pessoa::text, '') = ''
                and ie_exige_aprov_cadastro = 'S' ) alias3;

    -- Se houver, insere na tabela PRE_PESSOA_JURIDICA
    if cd_regra_w <> 0 then
      insert into pre_pessoa_juridica(
        cd_tipo_pessoa,
        cd_cgc,
        ds_razao_social,
        nm_fantasia,
        cd_cep,
        ds_endereco,
        nr_endereco,
        ds_complemento,
        ds_bairro,
        ds_municipio,
        sg_estado,
        nr_ddd_telefone,
        nr_telefone,
        nr_inscricao_estadual,
        nr_inscricao_municipal,
        ie_situacao,
        ie_prod_fabric,
        dt_atualizacao,
        nm_usuario,
        dt_atualizacao_nrec,
        nm_usuario_nrec,
        cd_sistema_ant,
        nm_usuario_lib,
        dt_liberacao,
        nr_sequencia)
      values (
        cd_tipo_pessoa_w,
        cd_cnpj_cpf_w,
        substr(nm_razao_social_w,1,80),
        substr(nm_fantasia_w,1,80),
        cd_cep_w,
        substr(ds_endereco_w,1,40),
        nr_endereco_w,
        ds_complemento_w,
        substr(ds_bairro_w,1,40),
        substr(ds_cidade_w,1,40),
        sg_estado_w,
        nr_ddd_telefone_w,
        nr_telefone_w,
        nr_inscricao_estadual_w,
        nr_inscricao_municipal_w,
        'A',
        'N',
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        cd_sistema_ant_w,
        nm_usuario_p,
        clock_timestamp(),
        nextval('pre_pessoa_juridica_seq'));
    else
      insert into pessoa_juridica(
        cd_tipo_pessoa,
        cd_cgc,
        ds_razao_social,
        nm_fantasia,
        cd_cep,
        ds_endereco,
        nr_endereco,
        ds_complemento,
        ds_bairro,
        ds_municipio,
        sg_estado,
        nr_ddd_telefone,
        nr_telefone,
        nr_inscricao_estadual,
        nr_inscricao_municipal,
        ie_situacao,
        ie_prod_fabric,
        dt_atualizacao,
        nm_usuario,
        dt_atualizacao_nrec,
        nm_usuario_nrec,
        cd_sistema_ant)
      values (
        cd_tipo_pessoa_w,
        cd_cnpj_cpf_w,
        substr(nm_razao_social_w,1,80),
        substr(nm_fantasia_w,1,80),
        cd_cep_w,
        substr(ds_endereco_w,1,40),
        nr_endereco_w,
        ds_complemento_w,
        substr(ds_bairro_w,1,40),
        substr(ds_cidade_w,1,40),
        sg_estado_w,
        nr_ddd_telefone_w,
        nr_telefone_w,
        nr_inscricao_estadual_w,
        nr_inscricao_municipal_w,
        'A',
        'N',
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        cd_sistema_ant_w);
    end if;
  end if;



  select  count(*)
  into STRICT  qt_existe_w
  from  pessoa_juridica_estab
  where cd_cgc = cd_cnpj_cpf_w
  and cd_estabelecimento = cd_estab_int_w;

  if (qt_existe_w = 0) then

    if cd_regra_w <> 0 then
      insert into pre_pessoa_juridica_estab(
        nr_sequencia,
        cd_cgc,
        cd_estabelecimento,
        dt_atualizacao,
        nm_usuario,
        dt_atualizacao_nrec,
        nm_usuario_nrec,
        nm_pessoa_contato,
        ds_email,
        nr_ramal_contato,
        cd_cond_pagto,
        ie_conta_dif_nf,
        ie_retem_iss,
        ie_exige_anexo_nf,
        ie_baixa_abat,
        ie_exige_ordem_compra,
        ie_rateio_adiant,
        nr_seq_pre_pj)
      values (
        nextval('pre_pessoa_juridica_estab_seq'),
        cd_cnpj_cpf_w,
        cd_estab_int_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        ds_contato_w,
        ds_email_w,
        nr_ramal_w,
        cd_condicao_pagto_w,
        'N',
        'N',
        'N',
        'N',
        'N',
        'P',
        currval('pre_pessoa_juridica_seq'));
    else
      select  nextval('pessoa_juridica_estab_seq')
      into STRICT  nr_seq_pj_estab_w
;

      insert into pessoa_juridica_estab(
        nr_sequencia,
        cd_cgc,
        cd_estabelecimento,
        dt_atualizacao,
        nm_usuario,
        dt_atualizacao_nrec,
        nm_usuario_nrec,
        nm_pessoa_contato,
        ds_email,
        nr_ramal_contato,
        cd_cond_pagto,
        ie_conta_dif_nf,
        ie_retem_iss,
        ie_exige_anexo_nf,
        ie_baixa_abat,
        ie_exige_ordem_compra,
        ie_rateio_adiant)
      values (
        nr_seq_pj_estab_w,
        cd_cnpj_cpf_w,
        cd_estab_int_w,
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        ds_contato_w,
        ds_email_w,
        nr_ramal_w,
        cd_condicao_pagto_w,
        'N',
        'N',
        'N',
        'N',
        'N',
        'P');
    end if;
  else
    update  pessoa_juridica_estab
    set dt_atualizacao    = clock_timestamp(),
      nm_usuario    = nm_usuario_p,
      nm_pessoa_contato = ds_contato_w,
      ds_email    = ds_email_w,
      nr_ramal_contato  = nr_ramal_w,
      cd_cond_pagto   = cd_condicao_pagto_w
    where cd_cgc = cd_cnpj_cpf_w
    and cd_estabelecimento = cd_estab_int_w;

  end if;




  if (cd_banco_w > 0) and (nr_agencia_w IS NOT NULL AND nr_agencia_w::text <> '') and (nr_conta_w IS NOT NULL AND nr_conta_w::text <> '') then
    begin

    select  count(*)
    into STRICT  qt_existe_w
    from  pessoa_juridica_conta
    where cd_cgc = cd_cnpj_cpf_w
    and cd_banco = cd_banco_w
    and cd_agencia_bancaria = nr_agencia_w
    and nr_conta = nr_conta_w;

    if (qt_existe_w = 0) then

      if cd_regra_w <> 0 then
        insert into pre_pessoa_juridica_conta(
          nr_sequencia,
          cd_cgc,
          cd_banco,
          cd_agencia_bancaria,
          nr_conta,
          nr_digito_conta,
          dt_atualizacao,
          nm_usuario,
          ie_situacao,
          ie_tipo_conta,
          ie_conta_pagamento,
          ie_prestador_pls,
          nr_seq_pre_pj)
        values (
          nextval('pre_pessoa_juridica_conta_seq'),
          cd_cnpj_cpf_w,
          cd_banco_w,
          nr_agencia_w,
          nr_conta_w,
          nr_digito_w,
          clock_timestamp(),
          nm_usuario_p,
          'A',
          'CC',
          'N',
          'N',
          currval('pre_pessoa_juridica_seq'));
      else
        select  nextval('pessoa_juridica_conta_seq')
        into STRICT  nr_seq_conta_w
;

        insert into pessoa_juridica_conta(
          nr_sequencia,
          cd_cgc,
          cd_banco,
          cd_agencia_bancaria,
          nr_conta,
          nr_digito_conta,
          dt_atualizacao,
          nm_usuario,
          ie_situacao,
          ie_tipo_conta,
          ie_conta_pagamento,
          ie_prestador_pls)
        values (
          nr_seq_conta_w,
          cd_cnpj_cpf_w,
          cd_banco_w,
          nr_agencia_w,
          nr_conta_w,
          nr_digito_w,
          clock_timestamp(),
          nm_usuario_p,
          'A',
          'CC',
          'N',
          'N');
      end if;
    end if;
    end;
  end if;
  end;
end if;

if (ie_tipo_fornecedor_w = 'J') and (ie_erro_w = 'N') and (cd_cnpj_cpf_w IS NOT NULL AND cd_cnpj_cpf_w::text <> '') and (ie_operacao_w = 'A') then
  begin

  select  count(*)
  into STRICT  qt_existe_w
  from  pessoa_juridica
  where cd_cgc = cd_cnpj_cpf_w;

  if (qt_existe_w > 0) then

    update  pessoa_juridica
    set ds_razao_social = substr(nm_razao_social_w,1,80),
      nm_fantasia = substr(nm_fantasia_w,1,80),
      cd_cep = cd_cep_w,
      ds_endereco = substr(ds_endereco_w,1,40),
      nr_endereco = nr_endereco_w,
      ds_complemento = ds_complemento_w,
      ds_bairro = substr(ds_bairro_w,1,40),
      ds_municipio = substr(ds_cidade_w,1,40),
      sg_estado = sg_estado_w,
      nr_ddd_telefone = nr_ddd_telefone_w,
      nr_telefone = nr_telefone_w,
      nr_inscricao_estadual = nr_inscricao_estadual_w,
      nr_inscricao_municipal = nr_inscricao_municipal_w,
      ie_situacao = 'A',
      cd_sistema_ant = cd_sistema_ant_w,
      dt_atualizacao = clock_timestamp(),
      nm_usuario = nm_usuario_p
    where cd_cgc = cd_cnpj_cpf_w;

    update  pessoa_juridica_estab
    set nm_pessoa_contato = ds_contato_w,
      ds_email    = ds_email_w,
      nr_ramal_contato  = nr_ramal_w,
      cd_cond_pagto   = cd_condicao_pagto_w,
      dt_atualizacao    = clock_timestamp(),
      nm_usuario    = nm_usuario_p
    where cd_cgc      = cd_cnpj_cpf_w;

    if (cd_banco_w > 0) and (nr_agencia_w IS NOT NULL AND nr_agencia_w::text <> '') and (nr_conta_w IS NOT NULL AND nr_conta_w::text <> '') then

      update  pessoa_juridica_conta
      set cd_banco    = cd_banco_w,
        cd_agencia_bancaria = nr_agencia_w,
        nr_conta    = nr_conta_w,
        nr_digito_conta   = nr_digito_w,
        dt_atualizacao    = clock_timestamp(),
        nm_usuario    = nm_usuario_p
      where cd_cgc      = cd_cnpj_cpf_w;
    end if;
  end if;
  end;
end if;

if (ie_tipo_fornecedor_w = 'F') then

  select  max(cd_pessoa_fisica)
  into STRICT  cd_pessoa_fisica_w
  from  pessoa_fisica
  where replace(nr_cpf,' ','') = replace(cd_cnpj_cpf_w,' ','')
  and replace(elimina_acentuacao(upper(nm_pessoa_fisica)),' ','') = replace(elimina_acentuacao(upper(nm_razao_social_w)),' ','');

  if (ie_erro_w = 'N') and (ie_operacao_w = 'E') then
    begin

    update  pessoa_classif
    set dt_final_vigencia = clock_timestamp()
    where cd_pessoa_fisica in (SELECT cd_pessoa_fisica from pessoa_fisica where cd_sistema_ant = cd_sistema_ant_w)
    and nr_seq_classif in (select nr_sequencia from classif_pessoa where ie_compras = 'S');

    end;
  end if;
end if;

if (ie_tipo_fornecedor_w = 'F') and (ie_erro_w = 'N') and (cd_cnpj_cpf_w IS NOT NULL AND cd_cnpj_cpf_w::text <> '') and (ie_operacao_w = 'I') then
  begin

  /*Nao existe ainda pessoa cadastrada, entao cadastra*/

  if (coalesce(cd_pessoa_fisica_w,'X') = 'X') then

    select  nextval('pessoa_fisica_seq')
    into STRICT  cd_pessoa_fisica_w
;

    insert into pessoa_fisica(
      cd_pessoa_fisica,
      ie_tipo_pessoa,
      nm_pessoa_fisica,
      dt_atualizacao,
      nm_usuario,
      nr_cpf,
      nr_identidade,
      ie_funcionario,
      dt_atualizacao_nrec,
      nm_usuario_nrec,
      cd_sistema_ant)
    values ( cd_pessoa_fisica_w,
      1,
      nm_razao_social_w,
      clock_timestamp(),
      nm_usuario_p,
      cd_cnpj_cpf_w,
      nr_rg_w,
      'N',
      clock_timestamp(),
      nm_usuario_p,
      cd_sistema_ant_w);
  end if;

  select  count(*)
  into STRICT  qt_existe_w
  from  compl_pessoa_fisica
  where cd_pessoa_fisica = cd_pessoa_fisica_w
  and ie_tipo_complemento = 1;

  select  max(ds_locale)
  into STRICT  tag_pais_w
  from  user_locale
  where nm_user = nm_usuario_p;

  if (qt_existe_w = 0) then

    select  coalesce(max(nr_sequencia),0) + 1
    into STRICT  nr_sequencia_w
    from  compl_pessoa_fisica
    where cd_pessoa_fisica = cd_pessoa_fisica_w;

    if (tag_pais_w = 'de_DE')then
      insert into compl_pessoa_fisica(
        cd_pessoa_fisica,
        nr_sequencia,
        ie_tipo_complemento,
        dt_atualizacao,
        nm_usuario,
        nm_contato,
        ds_endereco,
        cd_cep,
        ds_compl_end,
        ds_complemento,
        ds_bairro,
        ds_municipio,
        sg_estado,
        nr_telefone,
        nr_ddd_telefone,
        nr_ramal,
        ds_email,
        nr_identidade,
        nr_cpf,
        dt_atualizacao_nrec,
        nm_usuario_nrec)
      values ( cd_pessoa_fisica_w,
        nr_sequencia_w,
        1,
        clock_timestamp(),
        nm_usuario_p,
        substr(ds_contato_w,1,60),
        substr(ds_endereco_w,1,100),
        cd_cep_w,
        nr_endereco_w,
        substr(ds_complemento_w,1,40),
        substr(ds_bairro_w,1,40),
        substr(ds_cidade_w,1,40),
        sg_estado_w,
        substr(nr_telefone_w,1,15),
        nr_ddd_telefone_w,
        nr_ramal_w,
        ds_email_w,
        nr_rg_w,
        cd_cnpj_cpf_w,
        clock_timestamp(),
        nm_usuario_p);
    else
      insert into compl_pessoa_fisica(
        cd_pessoa_fisica,
        nr_sequencia,
        ie_tipo_complemento,
        dt_atualizacao,
        nm_usuario,
        nm_contato,
        ds_endereco,
        cd_cep,
        nr_endereco,
        ds_complemento,
        ds_bairro,
        ds_municipio,
        sg_estado,
        nr_telefone,
        nr_ddd_telefone,
        nr_ramal,
        ds_email,
        nr_identidade,
        nr_cpf,
        dt_atualizacao_nrec,
        nm_usuario_nrec)
      values ( cd_pessoa_fisica_w,
        nr_sequencia_w,
        1,
        clock_timestamp(),
        nm_usuario_p,
        substr(ds_contato_w,1,60),
        substr(ds_endereco_w,1,100),
        cd_cep_w,
        nr_endereco_w,
        substr(ds_complemento_w,1,40),
        substr(ds_bairro_w,1,40),
        substr(ds_cidade_w,1,40),
        sg_estado_w,
        substr(nr_telefone_w,1,15),
        nr_ddd_telefone_w,
        nr_ramal_w,
        ds_email_w,
        nr_rg_w,
        cd_cnpj_cpf_w,
        clock_timestamp(),
        nm_usuario_p);
    end if;
  else
    if (tag_pais_w = 'de_DE')then
      update  compl_pessoa_fisica
      set dt_atualizacao    = clock_timestamp(),
        nm_usuario    = nm_usuario_p,
        nm_contato    = substr(ds_contato_w,1,60),
        ds_endereco   = substr(ds_endereco_w,1,100),
        cd_cep      = cd_cep_w,
        ds_compl_end    = nr_endereco_w,
        ds_complemento    = substr(ds_complemento_w,1,40),
        ds_bairro   = substr(ds_bairro_w,1,40),
        ds_municipio    = substr(ds_cidade_w,1,40),
        sg_estado   = sg_estado_w,
        nr_telefone   = substr(nr_telefone_w,1,15),
        nr_ddd_telefone   = nr_ddd_telefone_w,
        nr_ramal    = nr_ramal_w,
        ds_email    = ds_email_w,
        nr_identidade   = nr_rg_w,
        nr_cpf      = cd_cnpj_cpf_w
      where cd_pessoa_fisica = cd_pessoa_fisica_w
        and ie_tipo_complemento = 1;
    else
      update  compl_pessoa_fisica
      set dt_atualizacao    = clock_timestamp(),
        nm_usuario    = nm_usuario_p,
        nm_contato    = substr(ds_contato_w,1,60),
        ds_endereco   = substr(ds_endereco_w,1,100),
        cd_cep      = cd_cep_w,
        nr_endereco   = nr_endereco_w,
        ds_complemento    = substr(ds_complemento_w,1,40),
        ds_bairro   = substr(ds_bairro_w,1,40),
        ds_municipio    = substr(ds_cidade_w,1,40),
        sg_estado   = sg_estado_w,
        nr_telefone   = substr(nr_telefone_w,1,15),
        nr_ddd_telefone   = nr_ddd_telefone_w,
        nr_ramal    = nr_ramal_w,
        ds_email    = ds_email_w,
        nr_identidade   = nr_rg_w,
        nr_cpf      = cd_cnpj_cpf_w
      where cd_pessoa_fisica = cd_pessoa_fisica_w
        and ie_tipo_complemento = 1;
    end if;
  end if;

  select  coalesce(max(nr_sequencia),0)
  into STRICT  nr_seq_classif_w
  from  classif_pessoa
  where ie_situacao = 'A'
  and ie_compras = 'S';

  if (nr_seq_classif_w > 0) then

    select  count(*)
    into STRICT  qt_existe_w
    from  pessoa_classif
    where cd_pessoa_fisica = cd_pessoa_fisica_w
    and nr_seq_classif = nr_seq_classif_w;

    if (qt_existe_w = 0) then

      insert into pessoa_classif(
        nr_sequencia,
        dt_atualizacao,
        nm_usuario,
        dt_atualizacao_nrec,
        nm_usuario_nrec,
        nr_seq_classif,
        cd_pessoa_fisica,
        dt_inicio_vigencia)
      values ( nextval('pessoa_classif_seq'),
        clock_timestamp(),
        nm_usuario_p,
        clock_timestamp(),
        nm_usuario_p,
        nr_seq_classif_w,
        cd_pessoa_fisica_w,
        clock_timestamp());
    end if;
  end if;

  if (cd_banco_w <> 0) and (nr_agencia_w IS NOT NULL AND nr_agencia_w::text <> '')  and (nr_conta_w IS NOT NULL AND nr_conta_w::text <> '') then

    select  count(*)
    into STRICT  qt_existe_w
    from  pessoa_fisica_conta
    where cd_pessoa_fisica = cd_pessoa_fisica_w
    and cd_banco = cd_banco_w
    and cd_agencia_bancaria = nr_agencia_w
    and nr_conta = nr_conta_w;

    if (qt_existe_w = 0) then

      select  nextval('pessoa_fisica_conta_seq')
      into STRICT  nr_seq_conta_w
;

      insert into pessoa_fisica_conta(
        nr_sequencia,
        cd_pessoa_fisica,
        cd_banco,
        cd_agencia_bancaria,
        nr_conta,
        nr_digito_conta,
        dt_atualizacao,
        nm_usuario,
        ie_situacao,
        ie_tipo_conta,
        ie_conta_pagamento)
      values ( nextval('pessoa_fisica_conta_seq'),
        cd_pessoa_fisica_w,
        cd_banco_w,
        nr_agencia_w,
        nr_conta_w,
        nr_digito_w,
        clock_timestamp(),
        nm_usuario_p,
        'A',
        'CC',
        'N');
    end if;
  end if;
  end;
end if;

if (ie_tipo_fornecedor_w = 'F') and (ie_erro_w = 'N') and (cd_cnpj_cpf_w IS NOT NULL AND cd_cnpj_cpf_w::text <> '') and (ie_operacao_w = 'A') then
  begin

  update  pessoa_fisica
  set cd_sistema_ant    = cd_sistema_ant_w
  where nr_cpf      = cd_cnpj_cpf_w;

  update  pessoa_fisica_conta
  set cd_banco    = cd_banco_w,
    cd_agencia_bancaria = nr_agencia_w,
    nr_conta    = nr_conta_w,
    nr_digito_conta   = nr_digito_w,
    dt_atualizacao    = clock_timestamp(),
    nm_usuario    = nm_usuario_p
  where cd_pessoa_fisica  in (SELECT cd_pessoa_fisica from pessoa_fisica where cd_sistema_ant = cd_sistema_ant_w);

  end;
end if;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE integra_fornecedor_protheus ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text) FROM PUBLIC;

