-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE same_receber_pront ( ds_prontuario_p text, nr_seq_recebimento_p bigint, ds_consistencia_p INOUT text, ds_mensagem_p INOUT text, ds_pront_falta_p INOUT text, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, CD_PESSOA_RECEB_p text) AS $body$
DECLARE

 
ds_prontuario_w			varchar(32000);
ie_contador_w			bigint	:= 0;
tam_lista_w			bigint;
ie_pos_virgula_w		smallint;
nr_seq_pront_w			bigint;
nr_seq_recebimento_w		bigint;	
nr_seq_receb_w			bigint;	
ds_prontuario_receb_w		varchar(32000);
ds_pront_receb_dif_w		varchar(32000);
tam_lista_solic_w		bigint;
ie_pos_virgula_solic_w		smallint;
ie_contador_transf_w		smallint := 0;
qt_pront_transf_w		bigint;

nr_seq_prontuario_w		bigint;
CD_PESSOA_DESTINO_W		varchar(10);
CD_SETOR_DESTINO_W		bigint;
dt_recebimento_w		timestamp;
var_sertor_dest_transf_w	varchar(1);
ds_pront_nao_receb_w		varchar(32000);
cd_setor_usuario_w		bigint;
ie_usuario_dest_w		varchar(1);
cd_pf_destino_w			varchar(10);
ie_permite_receb_w		varchar(1);
nr_seq_lote_transf_w		bigint;
nr_prontuario_w			bigint;
ie_digitalizado_w		transf_prontuario.ie_digitalizado%type;

c01 CURSOR FOR 
	SELECT	nr_sequencia, 
		CD_PESSOA_DESTINO, 
		CD_SETOR_DESTINO, 
		ie_digitalizado 
	from	transf_prontuario 
	where	nr_sequencia		= coalesce(nr_seq_recebimento_p, nr_sequencia);
	
c02 CURSOR FOR 
	SELECT	a.nr_sequencia 
	from	TRANSF_PRONTUARIO_ENVELOPE b, 
		same_prontuario a 
	where	b.nr_seq_transf		= nr_seq_recebimento_w 
	and	a.nr_sequencia		= b.nr_seq_prontuario;


BEGIN 
 
select	max(obter_setor_usuario(nm_usuario_p)) 
into STRICT	cd_setor_usuario_w
;
 
ds_prontuario_w			:= ds_prontuario_p;
 
var_sertor_dest_transf_w	:= Obter_Valor_Param_Usuario(941, 142, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento);
ie_usuario_dest_w := obter_param_usuario(941, 219, obter_perfil_ativo, nm_usuario_p, wheb_usuario_pck.get_cd_estabelecimento, ie_usuario_dest_w);
 
Select 	max(dt_recebimento) 
into STRICT	dt_recebimento_w 
from	transf_prontuario 
where	nr_sequencia		= nr_seq_recebimento_p;
 
 
 
if (coalesce(dt_recebimento_w::text, '') = '') and (ie_opcao_p = 'P') then 
	begin 
	 
	while	(ds_prontuario_w IS NOT NULL AND ds_prontuario_w::text <> '') or ie_contador_w > 200 loop 
		begin 
		tam_lista_w		:= length(ds_prontuario_w);
		ie_pos_virgula_w	:= position(',' in ds_prontuario_w);
 
		if (ie_pos_virgula_w <> 0) then 
			nr_seq_pront_w	:= substr(ds_prontuario_w,1,(ie_pos_virgula_w - 1));
			ds_prontuario_w	:= substr(ds_prontuario_w,(ie_pos_virgula_w + 1),tam_lista_w);
		end if;
 
		begin 
		select 	max(obter_prontuario_pf(wheb_usuario_pck.get_cd_estabelecimento,CD_PESSOA_FISICA)) 
		into STRICT	nr_prontuario_w 
		from	same_prontuario 
		where	nr_sequencia 	= nr_seq_pront_w;
		exception 
			when others then 
			nr_prontuario_w	:= null;
		end;
		 
		if (var_sertor_dest_transf_w	= 'N') then 
 
			select 	max(a.nr_sequencia) 
			into STRICT	nr_seq_receb_w 
			from	same_prontuario b, 
				transf_prontuario a 
			where	b.nr_sequencia = nr_seq_pront_w 
			and	(a.DT_envio IS NOT NULL AND a.DT_envio::text <> '') 
			and	coalesce(a.DT_RECEBIMENTO::text, '') = '' 
			and	a.nr_atendimento = b.nr_atendimento;
			 
			if (coalesce(nr_seq_receb_w::text, '') = '') then 
			 
				select 	max(a.nr_sequencia) 
				into STRICT	nr_seq_receb_w 
				from	transf_prontuario a 
				where	a.nr_prontuario = nr_prontuario_w 
				and	(a.DT_envio IS NOT NULL AND a.DT_envio::text <> '') 
				and	coalesce(a.DT_RECEBIMENTO::text, '') = '';	
	 
			end if;	
		else 
			select 	max(a.nr_sequencia) 
			into STRICT	nr_seq_receb_w 
			from	same_prontuario b, 
				transf_prontuario a 
			where	b.nr_sequencia = nr_seq_pront_w 
			and	(a.DT_envio IS NOT NULL AND a.DT_envio::text <> '') 
			and	coalesce(a.DT_RECEBIMENTO::text, '') = '' 
			and	a.nr_atendimento = b.nr_atendimento 
			and a.cd_setor_destino = cd_setor_usuario_w;
			 
			if (coalesce(nr_seq_receb_w::text, '') = '') then 
			 
				select 	max(a.nr_sequencia) 
				into STRICT	nr_seq_receb_w 
				from	transf_prontuario a 
				where	a.nr_prontuario = nr_prontuario_w 
				and	(a.DT_envio IS NOT NULL AND a.DT_envio::text <> '') 
				and	coalesce(a.DT_RECEBIMENTO::text, '') = '' 
				and	a.cd_setor_destino = cd_setor_usuario_w;		
			end if;	
		end if;
		--Rase_application_error(-20011,nr_seq_receb_w);		 
		if (nr_seq_receb_w IS NOT NULL AND nr_seq_receb_w::text <> '') then 
			if (ie_usuario_dest_w = 'S') then 
				select	max(cd_pessoa_destino), 
					max(NR_SEQ_LOTE_TRANSF) 
				into STRICT	cd_pf_destino_w, 
					nr_seq_lote_transf_w 
				from	transf_prontuario 
				where	nr_sequencia = nr_seq_receb_w;
				 
				select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END  
				into STRICT	ie_permite_receb_w 
				from	usuario 
				where	cd_pessoa_fisica = cd_pf_destino_w 
				and	nm_usuario = nm_usuario_p;
			 
				if (ie_permite_receb_w = 'N') and (coalesce(nr_seq_lote_transf_w::text, '') = '') then 
					CALL Wheb_mensagem_pck.exibir_mensagem_abort(242284);				
				end if;
			end if;
		 
			CALL transferir_prontuario_setores(nr_seq_receb_w,nm_usuario_p,'2', cd_estabelecimento_p);			
		end if;		
		 
		if (coalesce(nr_seq_receb_w::text, '') = '') and (var_sertor_dest_transf_w = 'S') then 
			ds_pront_nao_receb_w := ds_pront_nao_receb_w || nr_seq_pront_w||',';
		end if;
		 
		end;
	end loop;
	if (ds_pront_nao_receb_w IS NOT NULL AND ds_pront_nao_receb_w::text <> '') then 
		ds_consistencia_p := substr(wheb_mensagem_pck.get_texto(309892, 'DS_PRONTUARIO=' || ds_pront_nao_receb_w),1,255);
		-- Os prontuários: #@DS_PRONTUARIO#@ não possuem o setor destino do usuário.(Parâmetro [142]). 
	end if;	
	end;	
end if;
 
if (coalesce(dt_recebimento_w::text, '') = '') and (coalesce(nr_seq_recebimento_p,0) > 0) and (ie_opcao_p = 'S') then 
 
	while	(ds_prontuario_w IS NOT NULL AND ds_prontuario_w::text <> '') or ie_contador_w > 200 loop 
		begin 
		tam_lista_w		:= length(ds_prontuario_w);
		ie_pos_virgula_w	:= position(',' in ds_prontuario_w);
 
		if (ie_pos_virgula_w <> 0) then 
			nr_seq_pront_w	:= substr(ds_prontuario_w,1,(ie_pos_virgula_w - 1));
			ds_prontuario_w	:= substr(ds_prontuario_w,(ie_pos_virgula_w + 1),tam_lista_w);
		end if;
 
		select	max(a.nr_sequencia) 
		into STRICT	nr_seq_receb_w 
		from	TRANSF_PRONTUARIO_ENVELOPE b, 
			transf_prontuario a 
		where	a.nr_sequencia = b.nr_seq_transf 
		and	coalesce(a.DT_RECEBIMENTO::text, '') = '' 
		and	a.nr_sequencia   = nr_seq_recebimento_p 
		and	b.nr_seq_prontuario = nr_seq_pront_w;
 
		if (coalesce(nr_seq_receb_w::text, '') = '') then 
		 
			select	coalesce(max(a.nr_sequencia),0) 
			into STRICT	nr_seq_receb_w 
			from	TRANSF_PRONTUARIO_ENVELOPE b, 
				transf_prontuario a 
			where	a.nr_sequencia = b.nr_seq_transf 
			and	coalesce(a.DT_RECEBIMENTO::text, '') = '' 
			and	b.nr_seq_prontuario = nr_seq_pront_w;
		 
		end if;
 
		if (nr_seq_receb_w = nr_seq_recebimento_p) then 
			ds_prontuario_receb_w	:= ds_prontuario_receb_w || nr_seq_pront_w || ',';
		elsif (nr_seq_receb_w <> nr_seq_recebimento_p) then 
			ds_pront_receb_dif_w	:= ds_pront_receb_dif_w || nr_seq_pront_w || ',';
		end if;
 
		ie_contador_w	:= ie_contador_w + 1;
		end;
	end loop;
 
	select	obter_select_concatenado_bv(' 
			select nr_seq_prontuario from TRANSF_PRONTUARIO_ENVELOPE 
			where nr_seq_transf = :nr_seq_transf 
			and substr(obter_se_contido(nr_seq_prontuario,:ds_prontuario),1,1) = ' || chr(39) || 'N' || chr(39), 
			'nr_seq_transf=' || nr_seq_recebimento_p || '#@#@' || 'ds_prontuario=' || ds_prontuario_receb_w, ',') || ',' 
	into STRICT	ds_pront_falta_p 
	;
 
	while	(ds_prontuario_receb_w IS NOT NULL AND ds_prontuario_receb_w::text <> '') loop 
		begin 
		tam_lista_solic_w	:= length(ds_prontuario_receb_w);
		ie_pos_virgula_solic_w	:= position(',' in ds_prontuario_receb_w);
 
		if (ie_pos_virgula_solic_w <> 0) then 
			nr_seq_pront_w		:= substr(ds_prontuario_receb_w,1,(ie_pos_virgula_solic_w - 1));
			ds_prontuario_receb_w	:= substr(ds_prontuario_receb_w,(ie_pos_virgula_solic_w + 1),tam_lista_solic_w);
		end if;	
		ie_contador_transf_w	:= ie_contador_transf_w + 1;	
		end;
	end loop;
 
	if (nr_seq_recebimento_p IS NOT NULL AND nr_seq_recebimento_p::text <> '') then 
		begin	 
		/* Obter quantidade de prontuários*/
 
		select	count(*) 
		into STRICT	qt_pront_transf_w 
		from	TRANSF_PRONTUARIO_ENVELOPE 
		where	nr_seq_transf = nr_seq_recebimento_p;
		 
		--Rase_application_error(-20011,ds_prontuario_receb_w || '-' || ie_contador_transf_w || '-' || qt_pront_transf_w || '#@#@'); 
		 
		 
		 
		/* Verificar se a quantidade de prontuários lançados é igual a quantidade de prontuários da solicitação a ser atendida */
 
		if (ie_contador_transf_w = qt_pront_transf_w) then 
			begin		 
			open c01;
			loop 
			fetch c01 into	 
				nr_seq_recebimento_w, 
				CD_PESSOA_DESTINO_W, 
				CD_SETOR_DESTINO_W, 
				ie_digitalizado_w;
			EXIT WHEN NOT FOUND; /* apply on c01 */
				begin 
		 
				if (ie_usuario_dest_w = 'S') then 
					select	max(cd_pessoa_destino), 
						max(NR_SEQ_LOTE_TRANSF) 
					into STRICT	cd_pf_destino_w, 
						nr_seq_lote_transf_w 
					from	transf_prontuario 
					where	nr_sequencia = nr_seq_recebimento_w;
					 
					select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END  
					into STRICT	ie_permite_receb_w 
					from	usuario 
					where	cd_pessoa_fisica = cd_pf_destino_w 
					and	nm_usuario = nm_usuario_p;
				 
					if (ie_permite_receb_w = 'N') and (coalesce(nr_seq_lote_transf_w::text, '') = '') then 
						CALL Wheb_mensagem_pck.exibir_mensagem_abort(242284);				
					end if;
				end if;
		 
				/* Atende a solicitação */
 
				update	TRANSF_PRONTUARIO 
				set	DT_RECEBIMENTO	= clock_timestamp(), 
					dt_atualizacao	= clock_timestamp(), 
					nm_usuario	= nm_usuario_p, 
					CD_PESSOA_RECEB = CD_PESSOA_RECEB_p 
				where	nr_sequencia	= nr_seq_recebimento_w;
						 
				--Rase_application_error(-20011,'Teste: c02');		 
						 
				open c02;
				loop 
				fetch c02 into	 
					nr_seq_prontuario_w;
				EXIT WHEN NOT FOUND; /* apply on c02 */
					begin 
					 
					UPDATE	SAME_PRONTUARIO A 
					SET	A.CD_SETOR_ATENDIMENTO	= CD_SETOR_DESTINO_W 
					where	nr_sequencia = nr_seq_prontuario_w;
					 
					if (ie_digitalizado_w = 'S') then 
						update	same_prontuario 
						set	ie_digitalizado	= 'S' 
						where	nr_sequencia	= nr_seq_prontuario_w 
						and	ie_digitalizado	= 'N';
					end if;
					 
					INSERT	INTO	SAME_PRONTUARIO_HIST( 
							NR_SEQUENCIA    , 
							NR_SEQ_SAME     , 
							DT_ATUALIZACAO   , 
							NM_USUARIO     , 
							NR_SEQ_OPERACAO   , 
							DT_HISTORICO    , 
							NR_SEQ_CAIXA    , 
							NR_SEQ_LOCAL    , 
							CD_PESSOA_FISICA  , 
							DT_ATUALIZACAO_NREC , 
							NM_USUARIO_NREC   , 
							CD_SETOR_SOLICITANTE) 
					VALUES (nextval('same_prontuario_hist_seq'), 
							nr_seq_prontuario_w, 
							clock_timestamp(), 
							NM_USUARIO_P, 
							17, 
							clock_timestamp(), 
							NULL, 
							NULL, 
							CD_PESSOA_DESTINO_W, 
							clock_timestamp(), 
							NM_USUARIO_P, 
							CD_SETOR_DESTINO_W);
					 
					 
					end;
				end loop;
				close c02;
				end;
			end loop;
			close c01;
			commit;
			end;
		else 
			ds_mensagem_p	:= substr(wheb_mensagem_pck.get_texto(309893),1,255); -- Existem prontuários faltantes para este recebimento, deseja atender assim mesmo ? 
		end if;
		end;
	end if;
 
	if (ds_pront_receb_dif_w IS NOT NULL AND ds_pront_receb_dif_w::text <> '') then 
		/* Avisa o usuário que alguns prontuários lançados não fazem parte da solicitação que está sendo atendida */
 
		ds_consistencia_p	:= wheb_mensagem_pck.get_texto(309894, 'DS_PRONT_RECEB_DIF_W='||ds_pront_receb_dif_w); -- Os prontuários: #@DS_PRONT_RECEB_DIF_W#@ não fazem parte deste recebimento que será atendida ! 
	end if;
elsif (dt_recebimento_w IS NOT NULL AND dt_recebimento_w::text <> '') then 
	CALL Wheb_mensagem_pck.exibir_mensagem_abort(226936);
	--Rase_application_error(-20011,'Este recebimento já esta baixado #@#@'); 
 
end if;
 
commit;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE same_receber_pront ( ds_prontuario_p text, nr_seq_recebimento_p bigint, ds_consistencia_p INOUT text, ds_mensagem_p INOUT text, ds_pront_falta_p INOUT text, ie_opcao_p text, nm_usuario_p text, cd_estabelecimento_p bigint, CD_PESSOA_RECEB_p text) FROM PUBLIC;

