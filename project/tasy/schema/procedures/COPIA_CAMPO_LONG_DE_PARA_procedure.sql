-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE lista AS (
	nm varchar(50),
	vl text );


CREATE OR REPLACE PROCEDURE copia_campo_long_de_para ( nm_tabela_p text, nm_coluna_p text, ds_restricao_where_p text, ds_param_select_p text, nm_tabela_update_p text, nm_coluna_update_p text, ds_restricao_where_update_p text, ds_param_update_p text) AS $body$
DECLARE

/*
 Esta procedure realiza a copia de um campo long, porém será copiado no máximo 65528 caracteres.
 Não irá apresentar erro caso o conteúdo a ser copiado seja superior ao tamanho máximo

*/
ds_param_w		varchar(2000);
ds_campo_clob_w		text;
ds_sql_w		varchar(2000);
ds_parametro_w		varchar(255);
nr_sequencia_w		bigint;
qt_registro_w		bigint;
c001			integer;
retorno_w		integer;
dt_aux_w	timestamp;


ds_conteudo_1_w		varchar(32764);
ds_conteudo_2_w		varchar(32764);
TYPE myArray IS TABLE OF lista INDEX BY integer;

/*Contem os parametros do SQL*/

ar_parametros_w myArray;

ds_param_atual_w 	varchar(512);
ds_parametros_w 	varchar(2000);
nr_pos_separador_w	bigint;
qt_parametros_w		bigint;
qt_contador_w		bigint;

ds_sep_bv_w		varchar(10);
qt_tam_seq_w		smallint;

BEGIN

/*INICIO - TRATAMENTO PARAMETROS BIND VARIABLE*/

ds_sep_bv_w := obter_separador_bv;
IF (position(ds_sep_bv_w in ds_param_update_p) = 0 ) THEN
	ds_sep_bv_w := ';';
END IF;
qt_tam_seq_w := LENGTH(ds_sep_bv_w);
ds_parametros_w    := ds_param_update_p;
nr_pos_separador_w := position(ds_sep_bv_w in ds_parametros_w);
qt_parametros_w	   := 0;
WHILE(nr_pos_separador_w > 0 ) LOOP
	BEGIN
	qt_parametros_w := qt_parametros_w + 1;
	ds_param_atual_w  := SUBSTR(ds_parametros_w,1,nr_pos_separador_w-1);
	ds_parametros_w   := SUBSTR(ds_parametros_w,nr_pos_separador_w+qt_tam_seq_w,LENGTH(ds_parametros_w));
	nr_pos_separador_w := position('=' in ds_param_atual_w);
	ar_parametros_w[qt_parametros_w].nm := UPPER(SUBSTR(ds_param_atual_w,1,nr_pos_separador_w-1));
	ar_parametros_w[qt_parametros_w].vl := SUBSTR(ds_param_atual_w,nr_pos_separador_w+1,LENGTH(ds_param_atual_w));
	nr_pos_separador_w := position(ds_sep_bv_w in ds_parametros_w);
	IF (qt_parametros_w > 1000) THEN
		nr_pos_separador_w := 0;
	END IF;
	END;
END LOOP;
	nr_pos_separador_w := position('=' in ds_parametros_w);
IF ( nr_pos_separador_w > 0 ) THEN
	qt_parametros_w := qt_parametros_w +1;
	ds_param_atual_w := ds_parametros_w;
	ar_parametros_w[qt_parametros_w].nm := UPPER(SUBSTR(ds_param_atual_w,1,nr_pos_separador_w-1));
	ar_parametros_w[qt_parametros_w].vl := SUBSTR(ds_param_atual_w,nr_pos_separador_w+1,LENGTH(ds_param_atual_w));
END IF;
/*FIM - TRATAMENTO PARAMETRO BIND VARIABLE*/

/*INICIO - VERIFICAR SE TABELA TEMPORÁRIO EXISTE SE NÃO EXISTIR CRIA*/

SELECT 	COUNT(*)
INTO STRICT	qt_registro_w
FROM	user_tables
WHERE	table_name = 'W_COPIA_CAMPO_LONG';

IF ( qt_registro_w = 0 ) THEN
	CALL exec_sql_dinamico('','create table w_copia_campo_long (nr_sequencia number(10), ds_texto clob)');
END IF;
/*FIM - VERIFICAR SE TABELA TEMPORÁRIO EXISTE SE NÃO EXISTIR CRIA*/

/*INICIO - TRANSFERE CONTEUDO DO CAMPO LONG DA TABELA DE ORIGEM PARA O CAMPO CLOB DA TABELA TEMPORARIO*/

nr_sequencia_w := obter_valor_dinamico('select	(nvl(max(nr_sequencia),0) + 1) from w_copia_campo_long', nr_sequencia_w);
ds_sql_w   := 'insert into w_copia_campo_long select :SEQUENCE, to_lob('|| nm_coluna_p || ') from ' || nm_tabela_p || ' ' || ds_restricao_where_p;
ds_param_w := 'SEQUENCE='|| TO_CHAR(NR_SEQUENCIA_W)||';' || ds_param_select_p;
CALL exec_sql_dinamico_bv('',ds_sql_w,ds_param_w);

/*FIM - TRANSFERE CONTEUDO DO CAMPO LONG DA TABELA DE ORIGEM PARA O CAMPO CLOB DA TABELA TEMPORARIO*/

/*INICIO - RECUPERA O VALOR DO CAMPO CLOB PARA A VARIAVEL DA PROCEDURE*/

ds_sql_w	:= ' select ds_texto from w_copia_campo_long where nr_sequencia = :sequence ';

C001 := DBMS_SQL.OPEN_CURSOR;
DBMS_SQL.PARSE(C001, ds_sql_w, dbms_sql.Native);
DBMS_SQL.DEFINE_COLUMN(C001, 1, ds_campo_clob_w);
DBMS_SQL.BIND_VARIABLE(C001, 'SEQUENCE', nr_sequencia_w);
retorno_w := DBMS_SQL.EXECUTE(c001);
retorno_w := DBMS_SQL.fetch_rows(c001);
DBMS_SQL.COLUMN_VALUE(C001, 1, ds_campo_clob_w );
DBMS_SQL.CLOSE_CURSOR(C001);

/*FIM - RECUPERA O VALOR DO CAMPO CLOB PARA A VARIAVEL DA PROCEDURE*/

/*INICIO - QUEBRA O VALOR DO CONTEUDO CLOB EM VARIOS VARCHAR PARA PODER INSERIR NA TABELA DE ORIGEM*/

ds_conteudo_1_w := substr(ds_campo_clob_w,32764,1);
ds_conteudo_2_w := substr(ds_campo_clob_w,32764,32765);
/*FIM QUEBRA O VALOR DO CONTEUDO CLOB EM VARIOS VARCHAR PARA PODER INSERIR NA TABELA DE ORIGEM*/

/*INICIO - TRANSFERE CONTEUDO DAS VARIAVIES VARCHAR PARA O  CAMPO LONG DA TABELA DE ORIGEM*/

ds_sql_w	:= ' update ' || nm_tabela_update_p || ' set ' || nm_coluna_update_p || '= :ds_texto ' || ds_restricao_where_update_p;
C001 := DBMS_SQL.OPEN_CURSOR;
DBMS_SQL.PARSE(C001, ds_sql_w, dbms_sql.Native);
DBMS_SQL.BIND_VARIABLE(C001, 'DS_TEXTO', ds_conteudo_1_w || ds_conteudo_2_w);

FOR contador_w IN 1..ar_parametros_w.COUNT LOOP
	IF (ar_parametros_w[contador_w].nm LIKE 'DT_%') THEN
		dt_aux_w := TO_DATE(ar_parametros_w[contador_w].vl,'dd/mm/yyyy hh24:mi:ss');
		DBMS_SQL.BIND_VARIABLE(C001, ar_parametros_w[contador_w].nm, dt_aux_w);
	ELSE
		DBMS_SQL.BIND_VARIABLE(C001, ar_parametros_w[contador_w].nm, ar_parametros_w[contador_w].vl,32764);
	END IF;
END LOOP;

retorno_w := DBMS_SQL.EXECUTE(c001);
DBMS_SQL.CLOSE_CURSOR(C001);

/*FIM TRANSFERE CONTEUDO DAS VARIAVIES VARCHAR PARA O  CAMPO LONG DA TABELA DE ORIGEM*/

/*INICIO - DELETA O REGISTRO DA TABELA TEMPORÁRIA*/

ds_sql_w := 'delete from w_copia_campo_long where nr_sequencia = :nr_sequencia';
ds_param_w := 'NR_SEQUENCIA='|| TO_CHAR(nr_sequencia_w);
CALL exec_sql_dinamico_bv('',ds_sql_w,ds_param_w);

/*FIM - DELETA O REGISTRO DA TABELA TEMPORÁRIA*/

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE copia_campo_long_de_para ( nm_tabela_p text, nm_coluna_p text, ds_restricao_where_p text, ds_param_select_p text, nm_tabela_update_p text, nm_coluna_update_p text, ds_restricao_where_update_p text, ds_param_update_p text) FROM PUBLIC;

