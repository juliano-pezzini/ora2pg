-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE oft_insere_biometria ( nr_seq_consulta_p bigint, nr_seq_consulta_form_p bigint, nr_seq_consulta_form_ant_p bigint, vListaBiometria strRecTypeFormOft) AS $body$
DECLARE


nr_sequencia_w					oft_biometria.nr_sequencia%type;
dt_exame_w						oft_biometria.dt_registro%type;
ds_observacao_w				oft_biometria.ds_observacao%type;
cd_lente_alternativa_od_w	oft_biometria.cd_lente_alternativa_od%type;
cd_lente_alternativa_oe_w	oft_biometria.cd_lente_alternativa_oe%type;
cd_lente_planejada_od_w		oft_biometria.cd_lente_planejada_od%type;
cd_lente_planejada_oe_w		oft_biometria.cd_lente_planejada_oe%type;
ie_od_formula_w				oft_biometria.ie_od_formula%type;
ie_oe_formula_w				oft_biometria.ie_oe_formula%type;
ie_tipo_biometria_w			oft_biometria.ie_tipo_biometria%type;
qt_od_acd_w						oft_biometria.qt_od_acd%type;
qt_od_eixo_w					oft_biometria.qt_od_eixo%type;
qt_od_emt_w						oft_biometria.qt_od_emt%type;
qt_oe_acd_w						oft_biometria.qt_oe_acd%type;
qt_oe_eixo_w					oft_biometria.qt_oe_eixo%type;
qt_oe_emt_w						oft_biometria.qt_oe_emt%type;
cd_profissional_w				oft_biometria.cd_profissional%type;
nr_comprimento_axial_od_w	oft_biometria.nr_comprimento_axial_od%type;
nr_comprimento_axial_oe_w	oft_biometria.nr_comprimento_axial_oe%type;
nm_usuario_w					usuario.nm_usuario%type := wheb_usuario_pck.get_nm_usuario;
ie_registrado_w				varchar(1) := 'N';
ds_erro_w						varchar(4000);

BEGIN
begin

if (coalesce(nr_seq_consulta_p,0) > 0) and (vListaBiometria.count > 0) then
	for i in 1..vListaBiometria.count loop
		begin
		if (vListaBiometria[i](.ds_valor IS NOT NULL AND .ds_valor::text <> '')) or (vListaBiometria[i](.nr_valor IS NOT NULL AND .nr_valor::text <> '')) then
			case upper(vListaBiometria[i].nm_campo)
				when 'CD_PROFISSIONAL' then
					cd_profissional_w							:= vListaBiometria[i].ds_valor;
				when 'DT_REGISTRO' then
					dt_exame_w 									:= pkg_date_utils.get_DateTime(vListaBiometria[i].ds_valor);
				when 'DS_OBSERVACAO' then
					ds_observacao_w							:= vListaBiometria[i].ds_valor;
					ie_registrado_w							:= 'S';
				when 'CD_LENTE_ALTERNATIVA_OD' then
					cd_lente_alternativa_od_w				:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'CD_LENTE_ALTERNATIVA_OE' then
					cd_lente_alternativa_oe_w				:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'CD_LENTE_PLANEJADA_OD' then
					cd_lente_planejada_od_w					:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'CD_LENTE_PLANEJADA_OE' then
					cd_lente_planejada_oe_w					:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'IE_OD_FORMULA' then
					ie_od_formula_w							:= vListaBiometria[i].ds_valor;
				when 'IE_OE_FORMULA' then
					ie_oe_formula_w							:= vListaBiometria[i].ds_valor;
				when 'IE_TIPO_BIOMETRIA' then
					ie_tipo_biometria_w						:= vListaBiometria[i].ds_valor;
				when 'QT_OD_ACD' then
					qt_od_acd_w									:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'QT_OD_EIXO' then
					qt_od_eixo_w								:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'QT_OD_EMT' then
					qt_od_emt_w									:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'QT_OE_ACD' then
					qt_oe_acd_w									:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'QT_OE_EIXO' then
					qt_oe_eixo_w								:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'QT_OE_EMT' then
					qt_oe_emt_w									:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'NR_COMPRIMENTO_AXIAL_OD' then
					nr_comprimento_axial_od_w				:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				when 'NR_COMPRIMENTO_AXIAL_OE' then
					nr_comprimento_axial_oe_w				:= vListaBiometria[i].nr_valor;
					ie_registrado_w							:= 'S';
				else
					null;
			end case;
		end if;
	end;
	end loop;

	select	max(nr_sequencia)
	into STRICT		nr_sequencia_w
	from		oft_biometria
	where		nr_seq_consulta_form = nr_seq_consulta_form_p
	and		nr_seq_consulta		= nr_seq_consulta_p
	and		coalesce(dt_liberacao::text, '') = ''
	and		nm_usuario				= nm_usuario_w;

	if (nr_sequencia_w IS NOT NULL AND nr_sequencia_w::text <> '') then
		update	oft_biometria
		set		dt_atualizacao				=	clock_timestamp(),
					nm_usuario					=	nm_usuario_w,
					cd_profissional			= coalesce(cd_profissional_w,cd_profissional),
					dt_registro					=	coalesce(dt_exame_w,dt_registro),
					cd_lente_alternativa_od	=	cd_lente_alternativa_od_w,
					cd_lente_alternativa_oe	=	cd_lente_alternativa_oe_w,
					cd_lente_planejada_od	=	cd_lente_planejada_od_w,
					cd_lente_planejada_oe	=	cd_lente_planejada_oe_w,
					ds_observacao				=	ds_observacao_w,
					ie_od_formula				=	ie_od_formula_w,
					ie_oe_formula				=	ie_oe_formula_w,
					ie_tipo_biometria			=	coalesce(ie_tipo_biometria_w,ie_tipo_biometria),
					qt_od_acd					=	qt_od_acd_w,
					qt_od_eixo					=	qt_od_eixo_w,
					qt_od_emt					=	qt_od_emt_w,
					qt_oe_acd					=	qt_oe_acd_w,
					qt_oe_eixo					=	qt_oe_eixo_w,
					qt_oe_emt					=	qt_oe_emt_w,
					nr_comprimento_axial_od	=	nr_comprimento_axial_od_w,
					nr_comprimento_axial_oe = 	nr_comprimento_axial_oe_w
		where		nr_sequencia				= 	nr_sequencia_w;
		CALL wheb_usuario_pck.set_ie_commit('S');
	else
		if (ie_registrado_w = 'S') then
			CALL wheb_usuario_pck.set_ie_commit('S');
			select	nextval('oft_biometria_seq')
			into STRICT		nr_sequencia_w
			;

			insert	into oft_biometria(	nr_sequencia,
														dt_atualizacao,
														nm_usuario,
														dt_atualizacao_nrec,
														nm_usuario_nrec,
														cd_profissional,
														dt_registro,
														nr_seq_consulta,
														ie_situacao,
														cd_lente_alternativa_od,
														cd_lente_alternativa_oe,
														cd_lente_planejada_od,
														cd_lente_planejada_oe,
														ds_observacao,
														ie_od_formula,
														ie_oe_formula,
														ie_tipo_biometria,
														qt_od_acd,
														qt_od_eixo,
														qt_od_emt,
														qt_oe_acd,
														qt_oe_eixo,
														qt_oe_emt,
														nr_comprimento_axial_od,
														nr_comprimento_axial_oe,
														nr_seq_consulta_form)
			values (	nr_sequencia_w,
														clock_timestamp(),
														nm_usuario_w,
														clock_timestamp(),
														nm_usuario_w,
														coalesce(cd_profissional_w,obter_pf_usuario(nm_usuario_w,'C')),
														coalesce(dt_exame_w,clock_timestamp()),
														nr_seq_consulta_p,
														'A',
														cd_lente_alternativa_od_w,
														cd_lente_alternativa_oe_w,
														cd_lente_planejada_od_w,
														cd_lente_planejada_oe_w,
														ds_observacao_w,
														ie_od_formula_w,
														ie_oe_formula_w,
														coalesce(ie_tipo_biometria_w,'I'),
														qt_od_acd_w,
														qt_od_eixo_w,
														qt_od_emt_w,
														qt_oe_acd_w,
														qt_oe_eixo_w,
														qt_oe_emt_w,
														nr_comprimento_axial_od_w,
														nr_comprimento_axial_oe_w,
														nr_seq_consulta_form_p);

			if (coalesce(nr_seq_consulta_form_ant_p,0) > 0) then
				insert	into oft_imagem_exame(	nr_sequencia,
																dt_atualizacao,
																nm_usuario,
																dt_atualizacao_nrec,
																nm_usuario_nrec,
																ds_titulo,
																ds_arquivo,
																nr_seq_consulta,
																ie_lado,
																nr_seq_biometria,
																ie_situacao,
																cd_profissional)
													SELECT	nextval('oft_imagem_exame_seq'),
																clock_timestamp(),
																nm_usuario_w,
																clock_timestamp(),
																nm_usuario_w,
																ds_titulo,
																ds_arquivo,
																nr_seq_consulta_p,
																ie_lado,
																nr_sequencia_w,
																'A',
																coalesce(cd_profissional_w,obter_pf_usuario(nm_usuario_w,'C'))
													from		oft_imagem_exame a,
																oft_biometria b
													where		a.nr_seq_biometria		= 	b.nr_sequencia
													and		b.nr_seq_consulta_form	= 	nr_seq_consulta_form_ant_p
													and		b.nr_seq_consulta			=	nr_seq_consulta_p;
			end if;
		end if;
	end if;
end if;

exception
when others then
	ds_erro_w	:= substr(sqlerrm,1,4000);
	update	OFT_CONSULTA_FORMULARIO
	set		ds_stack			=	substr(dbms_utility.format_call_stack||ds_erro_w,1,4000)
	where		nr_sequencia	= 	nr_seq_consulta_form_p;
end;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE oft_insere_biometria ( nr_seq_consulta_p bigint, nr_seq_consulta_form_p bigint, nr_seq_consulta_form_ant_p bigint, vListaBiometria strRecTypeFormOft) FROM PUBLIC;

