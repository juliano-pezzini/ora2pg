-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE generate_consis_transf_cir ( nr_seq_origem_p bigint, nr_seq_destino_p bigint) AS $body$
DECLARE



cd_estabelecimento_w				integer;
cd_perfil_w							integer;
nm_usuario_w						varchar(15);
ie_forma_cadastrar_equip_w		varchar(15);
ie_consiste_equipamento_w		varchar(15);
ie_verifica_vigencia_w			varchar(15);
ie_consiste_tempo_w				varchar(15);
ie_consiste_sobr_horario_w		varchar(15);
ie_consiste_cme_w					varchar(15);
hr_inicio_origem_w				timestamp;
nr_minuto_duracao_origem_w		bigint;
ie_reserva_leito_w				varchar(15);
qt_diaria_prev_w					smallint;
cd_agenda_destino_w				bigint;
dt_agenda_destino_w				timestamp;
hr_inicio_destino_w				timestamp;
qt_aut_conv_w						bigint;
ds_abort_w							varchar(2000);
ds_erro_w							varchar(2000);
ds_aviso_regra_qtd_w				varchar(2000);
ie_tipo_erro_w						varchar(15);
ie_procedure_antes_transf_w   varchar(200);
plsql_block 						varchar(500);
cd_procedimento_w 				bigint;
cd_usuario_convenio_w 			varchar(30);
cd_convenio_w  					integer;
ds_senha_w                		varchar(20);
ie_carater_cirurgia_w   		varchar(1);
nm_atributo_w           		varchar(30);
ie_contem_param_out_w   		boolean := false;
ie_existe_agenda_dest_w			varchar(1);
ie_existe_agenda_orig_w			varchar(1);
cd_medico_w     agenda_paciente.cd_medico%type;

C01 CURSOR FOR
   SELECT argument_name
   from  user_arguments
   where object_name = trim(both Upper(ie_procedure_antes_transf_w))
   order by position;

procedure inserir_inconsistencia(nm_usuario_p        text,
											nr_seq_agenda_p     bigint,
											ds_inconsistencia_p text,
											ie_tipo_p			  text)is

;
BEGIN
	insert into w_agenda_cirurgica_consist( nm_usuario,
					 nr_sequencia,
					 nr_seq_agenda,
					 dt_atualizacao,
					 dt_atualizacao_nrec,
					 nm_usuario_nrec,
					 ds_inconsistencia,
					 ie_tipo)
				values (nm_usuario_p,
					nextval('w_agenda_cirurgica_consist_seq'),
					nr_seq_agenda_p,
					clock_timestamp(),
					clock_timestamp(),
					nm_usuario_p,
					ds_inconsistencia_p,
					ie_tipo_p);
	commit;

end;

begin

delete
from  w_agenda_cirurgica_consist
where nr_seq_agenda = nr_seq_origem_p;

cd_estabelecimento_w	:= wheb_usuario_pck.get_cd_estabelecimento;
cd_perfil_w		:= wheb_usuario_pck.get_cd_perfil;
nm_usuario_w		:= wheb_usuario_pck.get_nm_usuario;

ie_forma_cadastrar_equip_w := Obter_Param_Usuario(871, 100, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_forma_cadastrar_equip_w);
ie_consiste_equipamento_w := Obter_Param_Usuario(871, 138, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_consiste_equipamento_w);
ie_verifica_vigencia_w := Obter_Param_Usuario(871, 305, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_verifica_vigencia_w);
ie_consiste_tempo_w := Obter_Param_Usuario(871, 318, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_consiste_tempo_w);
ie_consiste_sobr_horario_w := Obter_Param_Usuario(871, 381, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_consiste_sobr_horario_w);
ie_procedure_antes_transf_w := Obter_Param_Usuario(871, 471, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_procedure_antes_transf_w);
ie_consiste_cme_w := Obter_Param_Usuario(871, 575, cd_perfil_w, nm_usuario_w, cd_estabelecimento_w, ie_consiste_cme_w);





select	max(hr_inicio),
			coalesce(max(nr_minuto_duracao),0),
			max(ie_reserva_leito),
			coalesce(max(qt_diaria_prev), 0),
     		max(coalesce(cd_procedimento,0)),
			max(coalesce(cd_usuario_convenio, 'null')),
      	max(coalesce(cd_convenio,0)),
			max(coalesce(ds_senha, 'null')),
			coalesce(max('S'),'N'),
            max(cd_medico)
into STRICT		hr_inicio_origem_w,
			nr_minuto_duracao_origem_w,
			ie_reserva_leito_w,
			qt_diaria_prev_w,
			cd_procedimento_w,
			cd_usuario_convenio_w,
			cd_convenio_w,
			ds_senha_w,
			ie_existe_agenda_orig_w,
            cd_medico_w
from		agenda_paciente
where		nr_sequencia = nr_seq_origem_p;

select	max(cd_agenda),
         ESTABLISHMENT_TIMEZONE_UTILS.startOfDay(max(dt_agenda)),
	      max(hr_inicio),
         max(ie_carater_cirurgia),
			coalesce(max('S'),'N')
into STRICT		cd_agenda_destino_w,
	      dt_agenda_destino_w,
	      hr_inicio_destino_w,
	      ie_carater_cirurgia_w,
			ie_existe_agenda_dest_w
from		agenda_paciente
where		nr_sequencia = nr_seq_destino_p;

if (coalesce(ie_existe_agenda_dest_w,'N') = 'N') or (coalesce(ie_existe_agenda_orig_w,'N') = 'N') then
	return;
end if;

if (ie_procedure_antes_transf_w IS NOT NULL AND ie_procedure_antes_transf_w::text <> '') then
	plsql_block := 'BEGIN ' || trim(both ie_procedure_antes_transf_w)  || '(';
	open C01;
	loop
	fetch C01 into
	 nm_atributo_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		if (nm_atributo_w	= 'CD_PROCEDIMENTO_P') then
		  plsql_block:= plsql_block || cd_procedimento_w || ',';
	       elsif (nm_atributo_w	= 'NR_SEQUENCIA_P') then
		  plsql_block:= plsql_block || nr_seq_origem_p || ',';
	       elsif (nm_atributo_w	= 'CD_CARTEIRA_P') then
		  plsql_block:= plsql_block || cd_usuario_convenio_w || ',';
	       elsif (nm_atributo_w	= 'CD_CONVENIO_P') then
		  plsql_block:= plsql_block || cd_convenio_w || ',';
	       elsif (nm_atributo_w	= 'DS_SENHA_P') then
		  plsql_block:= plsql_block || ds_senha_w || ',';
	       elsif (nm_atributo_w	= 'IE_CARATER_CIRURGIA_P')  then
		  plsql_block:= plsql_block || coalesce(ie_carater_cirurgia_w, 'null') || ',';
	       elsif (nm_atributo_w	= 'NR_SEQUENCIA_DEST_P') then
		  plsql_block:= plsql_block || nr_seq_destino_p || ',';
	       elsif (nm_atributo_w	= 'DS_ERRO_P') then
		  plsql_block:= plsql_block || ':ds_erro_p' || ',';
		  ie_contem_param_out_w:= true;
	       end if;
	end loop;
	close C01;

	if (substr(plsql_block, length(plsql_block), 1) = ',') then
		plsql_block :=  substr(plsql_block, 1, length(plsql_block) -1)  || ' ); END;';
	else
		plsql_block :=  substr(plsql_block, 1, length(plsql_block) -1)  || ' ; END;';
	end if;

		if (ie_contem_param_out_w) then
			EXECUTE	plsql_block USING OUT ds_abort_w;
		else
			EXECUTE	plsql_block;
		end if;

end if;

if (ds_abort_w is not  null) then
	CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, ds_abort_w, 'A');
end if;


if (ie_verifica_vigencia_w = 'S') then
	select	coalesce(max(obter_qt_aut_vigencia(nr_seq_origem_p,nr_seq_destino_p)),0)
	into STRICT	qt_aut_conv_w
	;

	if (qt_aut_conv_w > 0) then
		 --'A data de vigencia da autorizacao do convenio nao e valida para esta data'
		CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, substr(obter_texto_tasy(80029, wheb_usuario_pck.get_nr_seq_idioma),1,255), 'A');
	end if;
end if;


SELECT * FROM consiste_transf_agenda_pac(nr_seq_origem_p, nr_seq_destino_p, ds_aviso_regra_qtd_w, ds_erro_w) INTO STRICT ds_aviso_regra_qtd_w, ds_erro_w;
if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
	CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, ds_erro_w, 'A');
elsif (ds_aviso_regra_qtd_w IS NOT NULL AND ds_aviso_regra_qtd_w::text <> '') then
	CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, ds_aviso_regra_qtd_w, 'I');
end if;


CALL obter_restri_transf_agenda_de(hr_inicio_origem_w,nr_seq_origem_p,nr_seq_destino_p,cd_estabelecimento_w,nm_usuario_w);


if (ie_consiste_sobr_horario_w = 'S') or (ie_consiste_sobr_horario_w = 'Q') then
	ds_erro_w := consistir_duracao_agenda_pac(cd_agenda_destino_w, dt_agenda_destino_w, hr_inicio_destino_w, nr_minuto_duracao_origem_w, nr_seq_destino_p, nr_seq_origem_p, ds_erro_w);
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		if (ie_consiste_sobr_horario_w = 'S') then
			CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, ds_erro_w, 'A');
		elsif (ie_consiste_sobr_horario_w = 'Q') then
			--Ocorreu sobreposicao de horario na agenda! Deseja continuar?
			CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, substr(obter_texto_tasy(80887, wheb_usuario_pck.get_nr_seq_idioma),1,255), 'I');
		end if;
	end if;
end if;


if (ie_consiste_equipamento_w = 'A') or (ie_consiste_equipamento_w = 'S') then
	ds_erro_w := obter_se_equip_disp_transf(nr_seq_destino_p, nr_seq_origem_p, ds_erro_w, nm_usuario_w, cd_estabelecimento_w, ie_forma_cadastrar_equip_w, 'S');
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		if (ie_consiste_equipamento_w = 'S') then
			CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, ds_erro_w, 'A');
		elsif (ie_consiste_equipamento_w = 'A') then
			CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, ds_erro_w, 'I');
		end if;
	end if;
end if;


ds_erro_w := consistir_reserva_leito(cd_agenda_destino_w, dt_agenda_destino_w, ie_reserva_leito_w, qt_diaria_prev_w, nr_seq_destino_p, cd_medico_w, ds_erro_w);
if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
	CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, ds_erro_w, 'A');
end if;


if (ie_consiste_cme_w = 'A') or (ie_consiste_cme_w = 'S') then
	ds_erro_w := consiste_cme_transf_agenda(nr_seq_origem_p, nr_seq_destino_p, nm_usuario_w, ds_erro_w);
	if (ds_erro_w IS NOT NULL AND ds_erro_w::text <> '') then
		if (ie_consiste_cme_w = 'S') then
			CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, ds_erro_w, 'A');
		elsif (ie_consiste_cme_w = 'A') then
			CALL CALL inserir_inconsistencia(nm_usuario_w, nr_seq_origem_p, ds_erro_w, 'I');
		end if;
	end if;
end if;


end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE generate_consis_transf_cir ( nr_seq_origem_p bigint, nr_seq_destino_p bigint) FROM PUBLIC;

