-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_prescr_checkup ( nr_seq_checkup_p bigint, nr_atendimento_p bigint, nm_usuario_p text, nr_prescricao_p INOUT bigint ) AS $body$
DECLARE

 
nr_sequencia_w		 	bigint;
ie_origem_inf_w			varchar(10);
cd_pessoa_fisica_w		varchar(10);
ie_medico_w			varchar(5);
qt_proced_w			bigint;
nr_seq_proc_interno_w 		bigint;
nr_seq_exame_w 			bigint;
ie_liberar_w			varchar(10)	:= 'N';
cd_estabelecimento_w		smallint;
cd_setor_atendimento_w		integer;
cd_procedimento_w		bigint;
ie_origem_proced_w		bigint;
cd_material_exame_w		varchar(20);
qt_setor_w			bigint := 0;
nr_seq_interno_w		bigint;
qt_idade_paciente_w		bigint;
ie_sexo_paciente_w		varchar(1);

dt_checkup_w			timestamp;
dt_entrada_w			timestamp;
dt_prim_horario_w		timestamp;
cd_paciente_w			varchar(10);
nr_atendimento_w		bigint;
cd_prescritor_w			varchar(10);
cd_medico_resp_atend_w		varchar(10);
nr_prescricao_w			bigint;
ie_funcao_prescritor_w		varchar(3);
ds_erro_w			varchar(4000);
NR_SEQ_CHECKUP_ETAPA_w		bigint;
ie_solicitacao_w		varchar(1);
ie_situacao_lab_w		varchar(1);
cd_setor_atendimento_ww		bigint;
ie_transf_w			varchar(1);
dt_resultado_w			timestamp;
ie_setor_coleta_w		varchar(1)	:= 'N';
ie_setor_entrega_w		varchar(1)	:= 'N';

/*cursos C01 procedimentos e exames*/
 
C01 CURSOR FOR 
SELECT 	nr_seq_proc_interno, 
	nr_seq_exame, 
	c.nr_sequencia 
from 	etapa_checkup_item a, 
	etapa_checkup b, 
	checkup_etapa c, 
	checkup d 
where 	a.nr_seq_etapa = b.nr_sequencia 
and	b.nr_sequencia = c.nr_seq_etapa 
and	c.nr_seq_checkup = d.nr_sequencia 
and	d.nr_sequencia = nr_seq_checkup_p 
and	Obter_se_item_checkup_lib(a.nr_sequencia,d.cd_empresa_ref,d.nr_seq_tipo_checkup)	= 'S' 
and	coalesce(a.ie_sexo, ie_sexo_paciente_w) = ie_sexo_paciente_w 
and 	qt_idade_paciente_w between coalesce(a.qt_idade_min,qt_idade_paciente_w) and coalesce(a.qt_idade_max,qt_idade_paciente_w);


BEGIN 
 
if (nr_atendimento_p IS NOT NULL AND nr_atendimento_p::text <> '') then 
	select 	b.ie_sexo, 
		Obter_Idade_PF(b.cd_pessoa_fisica,clock_timestamp(), 'A') 
	into STRICT	ie_sexo_paciente_w, 
		qt_idade_paciente_w 
	from 	atendimento_paciente a, 
		pessoa_fisica b 
	where 	a.nr_atendimento 	= nr_atendimento_p 
	and  	a.cd_pessoa_fisica 	= b.cd_pessoa_fisica;
end if;
 
if (nr_seq_checkup_p IS NOT NULL AND nr_seq_checkup_p::text <> '') then 
	begin 
	nr_atendimento_w	:= nr_atendimento_p;
/*verifica a existência de registro de checkup*/
 
	select nr_sequencia, 
		dt_atualizacao, 
		cd_pessoa_fisica, 
		cd_setor_atendimento 
	into STRICT	nr_sequencia_w, 
		dt_checkup_w, 
		cd_paciente_w, 
		cd_setor_atendimento_w 
	from 	checkup 
	where 	nr_sequencia = nr_seq_checkup_p;
	 
	/* Obter ie_origem_inf se é médico ou não */
 
	select	coalesce(max('1'),'3'), 
		max(a.cd_pessoa_Fisica) 
	into STRICT	ie_origem_inf_w, 
		cd_pessoa_fisica_w 
	from	Medico b, 
		Usuario a 
	where 	a.nm_usuario	= nm_usuario_p 
	and	a.cd_pessoa_fisica	= b.cd_pessoa_fisica;
 
	/*obter se é médico*/
 
	select	CASE WHEN count(*)=0 THEN 'N'  ELSE 'S' END  
	into STRICT	ie_medico_w 
	from	medico 
	where	cd_pessoa_fisica = cd_pessoa_fisica_w 
	and	ie_situacao	= 'A';
 
	/*verifica se existe procedimentos e/ou exames*/
 
	select 	coalesce(count(*),0) 
	into STRICT	qt_proced_w 
	from 	etapa_checkup_item a, 
		etapa_checkup b, 
		checkup_etapa c, 
		checkup d 
	where 	a.nr_seq_etapa 	 = b.nr_sequencia 
	and	b.nr_sequencia 	 = c.nr_seq_etapa 
	and	c.nr_seq_checkup = d.nr_sequencia 
	and	d.nr_sequencia 	 = nr_seq_checkup_p 
	and	coalesce(a.ie_sexo,ie_sexo_paciente_w) = ie_sexo_paciente_w 
	and 	qt_idade_paciente_w between coalesce(a.qt_idade_min,qt_idade_paciente_w) and coalesce(a.qt_idade_max,qt_idade_paciente_w);
	 
	if (qt_proced_w > 0) then 
		begin 
 
		/* obter dados do usuário*/
 
		select	max(a.cd_pessoa_fisica), 
			max(a.ie_tipo_evolucao) 
		into STRICT	cd_prescritor_w, 
			ie_funcao_prescritor_w 
		from	usuario a 
		where	a.nm_usuario = nm_usuario_p;
 
		/* obter dados do atendimento */
 
		select	max(a.cd_estabelecimento), 
			max(a.dt_entrada), 
			max(cd_medico_resp) 
		into STRICT	cd_estabelecimento_w, 
			dt_entrada_w, 
			cd_medico_resp_atend_w 
		from	atendimento_paciente a 
		where	a.nr_atendimento = nr_atendimento_p;
		 
		ie_liberar_w  := Obter_param_usuario(916, 519, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_liberar_w );
		ie_setor_coleta_w  := Obter_param_usuario(916, 281, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_setor_coleta_w );		
		ie_setor_entrega_w  := Obter_param_usuario(916, 282, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_w, ie_setor_entrega_w );				
		 
		/* obter dados da prescrição */
 
		select	coalesce(obter_prim_horario_setor(cd_Setor_atendimento_w), to_date((to_char(clock_timestamp(),'dd/mm/yyyy hh24')||':00:00'),'dd/mm/yyyy hh24:mi:ss') +1/24) 
		into STRICT	dt_prim_horario_w 
		;	
 
		/* gerar seqüência */
 
		select	nextval('prescr_medica_seq') 
		into STRICT	nr_prescricao_w 
		;
 
		/* validar data da prescrição (primeira prescrição) */
 
		if (dt_checkup_w < dt_entrada_w) then 
			dt_checkup_w := dt_entrada_w + 1/1440;
		end if;
 
		/* inserir registro na tabela prescr_medica */
 
		insert into prescr_medica( 
						nr_prescricao, 
						cd_pessoa_fisica, 
						nr_atendimento, 
						cd_medico, 
						dt_prescricao, 
						dt_atualizacao, 
						nm_usuario, 
						nr_horas_validade, 
						dt_primeiro_horario, 
						cd_setor_atendimento, 
						ie_recem_nato, 
						ie_origem_inf, 
						cd_setor_entrega, 
						nm_usuario_original, 
						cd_estabelecimento, 
						cd_prescritor, 
						ie_emergencia, 
						ie_funcao_prescritor 
						) 
					values ( 
						nr_prescricao_w, 
						cd_paciente_w, 
						nr_atendimento_p, 
						cd_medico_resp_atend_w, 
						dt_checkup_w, 
						clock_timestamp(), 
						nm_usuario_p, 
						24, 
						dt_prim_horario_w, 
						cd_setor_atendimento_w, 
						'N', 
						'1', 
						cd_setor_atendimento_w, 
						nm_usuario_p, 
						cd_estabelecimento_w, 
						cd_prescritor_w, 
						'N', 
						ie_funcao_prescritor_w 
						);
		commit;		
		 
		/* gerar procedimentos */
 
		open C01;
		loop 
		fetch C01 into	nr_seq_proc_interno_w, 
				nr_seq_exame_w, 
				NR_SEQ_CHECKUP_ETAPA_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin 
			/* obter dados do procedimento (se necessário) */
 
			cd_setor_atendimento_ww	:= cd_setor_atendimento_w;
			if (nr_seq_proc_interno_w IS NOT NULL AND nr_seq_proc_interno_w::text <> '') then 
				begin 
				SELECT * FROM obter_proc_tab_interno( nr_seq_proc_interno_w, nr_prescricao_w, nr_atendimento_p, 0, cd_procedimento_w, ie_origem_proced_w) INTO STRICT cd_procedimento_w, ie_origem_proced_w;
 
				/* gerar sequência */
 
				select	coalesce(max(a.nr_sequencia),0) + 1 
				into STRICT	nr_sequencia_w 
				from	prescr_procedimento a 
				where	a.nr_prescricao = nr_prescricao_w;
 
				/* gerar sequencia */
 
				select	nextval('prescr_procedimento_seq') 
				into STRICT	nr_seq_interno_w 
				;
				cd_material_exame_w	:= null;
				if (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') then 
					select coalesce(max(cd_material_exame),'') 
					into STRICT	cd_material_exame_w 
					from (	SELECT b.cd_material_exame 
							from	material_exame_lab b, 
									exame_lab_material a 
							where a.nr_seq_material	= b.nr_sequencia 
							and a.nr_seq_exame		= nr_seq_exame_w 
							and a.ie_situacao		= 'A' 
							order by a.ie_prioridade) alias3 LIMIT 1;
				end if;
 
 
				cd_setor_atendimento_ww	:= coalesce(obter_setor_atend_proc(	cd_estabelecimento_w, 
											cd_procedimento_w, 
											ie_origem_proced_w, 
											cd_setor_atendimento_w, 
											cd_setor_atendimento_w, 
											nm_usuario_p, 
											nr_seq_proc_interno_w, 
											nr_atendimento_w),cd_setor_atendimento_ww);
				 
 
 
				dt_resultado_w := obter_entrega_laudo(nr_prescricao_w, clock_timestamp(), nr_seq_proc_interno_w, cd_procedimento_w, ie_origem_proced_w, cd_setor_atendimento_ww, nm_usuario_p, dt_resultado_w);
 
 
					 
				 
				if (obter_permite_proc_convenio(cd_procedimento_w,nr_seq_proc_interno_w,nr_atendimento_p) = 'S') then 
 
				/* inserir registro na tabela */
 
				insert into prescr_procedimento( 
									nr_prescricao, 
									nr_sequencia, 
									nr_seq_interno, 
									cd_procedimento, 
									ie_origem_proced, 
									nr_seq_proc_interno, 
									qt_procedimento, 
									dt_prev_execucao, 
									ie_status_execucao, 
									ie_origem_inf, 
									dt_atualizacao, 
									nm_usuario, 
									cd_motivo_baixa, 
									cd_setor_atendimento, 
									nr_ocorrencia, 
									nr_agrupamento, 
									ie_urgencia, 
									ie_suspenso, 
									ie_amostra,								 
									ie_executar_leito, 
									ie_se_necessario, 
									ie_acm, 
									ie_avisar_result, 
									ds_observacao, 
									cd_medico_exec, 
									nr_seq_exame, 
									cd_material_exame, 
									CD_PROFISSIONAL, 
									NR_SEQ_CHECKUP_ETAPA, 
									dt_resultado) 
								values ( 
									nr_prescricao_w, 
									nr_sequencia_w, 
									nr_seq_interno_w, 
									cd_procedimento_w, 
									ie_origem_proced_w, 
									nr_seq_proc_interno_w, 
									1, 
									dt_checkup_w, 
									'10', 
									'1', 
									clock_timestamp(), 
									nm_usuario_p, 
									0, 
									cd_setor_atendimento_ww, 
									1, 
									1, 
									'N', 
									'N', 
									'N', 
									'N', 
									'N', 
									'N', 
									'N', 
									'', 
									cd_medico_resp_atend_w, 
									nr_seq_exame_w, 
									cd_material_exame_w, 
									cd_medico_resp_atend_w, 
									NR_SEQ_CHECKUP_ETAPA_w, 
									dt_resultado_w);
					commit;
					 
					end if;
					 
					end;
			elsif (nr_seq_exame_w IS NOT NULL AND nr_seq_exame_w::text <> '') then 
				begin 
/*				Obter_Proc_Exame_Lab ( nr_seq_exame_w, nr_atendimento_p, cd_procedimento_w, ie_origem_proced_w, nr_exame_w);*/
 
 
				select	max(cd_procedimento), 
					max(ie_origem_proced), 
					coalesce(max(ie_solicitacao),'N'), 
					coalesce(max(ie_situacao),'A') 
				into STRICT 	cd_procedimento_w, 
					ie_origem_proced_w, 
					ie_solicitacao_w, 
					ie_situacao_lab_w 
				from	exame_laboratorio 
				where	nr_seq_exame	= nr_seq_exame_w;
				 
								 
 
				/* gerar sequência */
 
				select	coalesce(max(a.nr_sequencia),0) + 1 
				into STRICT	nr_sequencia_w 
				from	prescr_procedimento a 
				where	a.nr_prescricao = nr_prescricao_w;
 
				/* gerar sequencia */
 
				select	nextval('prescr_procedimento_seq') 
				into STRICT	nr_seq_interno_w 
				;
				 
				select coalesce(max(cd_material_exame),'') 
				into STRICT	cd_material_exame_w 
				from (	SELECT b.cd_material_exame 
						from	material_exame_lab b, 
								exame_lab_material a 
						where a.nr_seq_material	= b.nr_sequencia 
						and a.nr_seq_exame		= nr_seq_exame_w 
						and a.ie_situacao		= 'A' 
						order by a.ie_prioridade) alias2 LIMIT 1;
				 
				if (ie_situacao_lab_w	= 'A') and (ie_solicitacao_w	= 'S') and (cd_material_exame_w IS NOT NULL AND cd_material_exame_w::text <> '') then 
 
					cd_setor_atendimento_ww	:= coalesce(obter_setor_atend_proc(	cd_estabelecimento_w, 
											cd_procedimento_w, 
											ie_origem_proced_w, 
											cd_setor_atendimento_w, 
											cd_setor_atendimento_w, 
											nm_usuario_p, 
											nr_seq_proc_interno_w, 
											nr_atendimento_w),cd_setor_atendimento_ww);
				 
 
 
 
					dt_resultado_w := Atualiza_dt_realizacao_exame(nr_seq_exame_w, nr_prescricao_w, clock_timestamp(), dt_resultado_w);
 
 
					if (obter_permite_proc_convenio(cd_procedimento_w,nr_seq_proc_interno_w,nr_atendimento_p) = 'S') then 
				 
					/* inserir registro de exames na tabela */
 
					insert into prescr_procedimento( 
									nr_prescricao, 
									nr_sequencia, 
									nr_seq_interno, 
									cd_procedimento, 
									ie_origem_proced, 
									nr_seq_proc_interno, 
									qt_procedimento, 
									dt_prev_execucao, 
									ie_status_execucao, 
									ie_origem_inf, 
									dt_atualizacao, 
									nm_usuario, 
									cd_motivo_baixa, 
									cd_setor_atendimento, 
									nr_ocorrencia, 
									nr_agrupamento, 
									ie_urgencia, 
									ie_suspenso, 
									ie_amostra,								 
									ie_executar_leito, 
									ie_se_necessario, 
									ie_acm, 
									ie_avisar_result, 
									ds_observacao, 
									cd_medico_exec, 
									nr_seq_exame, 
									cd_material_exame, 
									CD_PROFISSIONAL, 
									NR_SEQ_CHECKUP_ETAPA, 
									dt_resultado, 
									cd_setor_coleta, 
									cd_setor_entrega) 
								values ( 
									nr_prescricao_w, 
									nr_sequencia_w, 
									nr_seq_interno_w, 
									cd_procedimento_w, 
									ie_origem_proced_w, 
									nr_seq_proc_interno_w, 
									1, 
									dt_checkup_w, 
									'10', 
									'1', 
									clock_timestamp(), 
									nm_usuario_p, 
									0, 
									cd_setor_atendimento_ww, 
									1, 
									1, 
									'N', 
									'N', 
									'N', 
									'N', 
									'N', 
									'N', 
									'N', 
									'', 
									cd_medico_resp_atend_w, 
									nr_seq_exame_w, 
									cd_material_exame_w, 
									cd_medico_resp_atend_w, 
									NR_SEQ_CHECKUP_ETAPA_w, 
									dt_resultado_w, 
									CASE WHEN ie_setor_coleta_w='S' THEN cd_setor_atendimento_w  ELSE null END , 
									CASE WHEN ie_setor_entrega_w='S' THEN cd_setor_atendimento_w  ELSE null END );
									 
					end if;
									 
					end if;
				commit;				
				end;
			end if;
			end;
		end loop;
		close c01;
 
		/* gerar passagem setor */
 
		select	coalesce(count(*),0) 
		into STRICT	qt_setor_w 
		from	atend_paciente_unidade 
		where	nr_atendimento = nr_atendimento_p;
 
		ie_transf_w	:= obter_tipo_passagem_regra(cd_setor_atendimento_w);
		 
		if (ie_transf_w	= 'T') and (qt_setor_w	= 0) then 
			CALL gerar_entrada_setor_prescr(nr_atendimento_p, cd_setor_atendimento_w, clock_timestamp(), nm_usuario_p);
		elsif (coalesce(qt_setor_w,0) = 0) and (coalesce(cd_setor_atendimento_w,0) > 0) then 
			CALL gerar_passagem_setor_atend(nr_atendimento_p, cd_setor_atendimento_w, clock_timestamp(), 'S', nm_usuario_p);
		end if;
 
		if (ie_liberar_w	= 'S') then 
			ds_erro_w := liberar_prescricao(nr_prescricao_w, nr_atendimento_p, ie_medico_w, Obter_Perfil_Ativo, nm_usuario_p, 'N', ds_erro_w);
		end if;		
		end;
	end if;	
	end;
end if;
 
commit;
nr_prescricao_p := nr_prescricao_w;
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_prescr_checkup ( nr_seq_checkup_p bigint, nr_atendimento_p bigint, nm_usuario_p text, nr_prescricao_p INOUT bigint ) FROM PUBLIC;

