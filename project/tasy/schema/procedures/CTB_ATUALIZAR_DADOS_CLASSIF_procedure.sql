-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';



CREATE TYPE mes AS (			nr_seq_mes_ref		bigint,
                       			dt_referencia		timestamp);
CREATE TYPE lote AS (		nr_lote_contabil	bigint);


CREATE OR REPLACE PROCEDURE ctb_atualizar_dados_classif ( cd_empresa_p bigint, cd_estab_p bigint, dt_mes_inicial_p timestamp, dt_mes_final_p timestamp, ie_atual_movto_geracao_p text, ie_atual_movto_contabil_p text, ie_atual_ctb_saldo_p text, nr_lote_contabil_p bigint, nm_usuario_p text) AS $body$
DECLARE

type reg_mes is table of mes index by integer;
type reg_lote is table of lote index by integer;

meses_w						reg_mes;
lotes_w						reg_lote;
dt_inicial_w					timestamp;
dt_final_w					timestamp;
dt_mes_inicial_w					timestamp;
dt_mes_final_w					timestamp;
i						integer;
j						integer;
nr_seq_mes_ref_w					bigint;
qt_registro_w					bigint;
ds_mensagem_w					varchar(255);
nr_seq_mes_log_w					ctb_mes_log.nr_sequencia%type;

c01 CURSOR FOR
SELECT	a.nr_sequencia,
	a.dt_referencia
from	ctb_mes_ref a
where	a.cd_empresa	= cd_empresa_p
and	a.dt_referencia between dt_mes_inicial_w and dt_mes_final_w;

vet01	C01%RowType;

c02 CURSOR FOR
SELECT	a.nr_lote_contabil	/*Lotes integrados ou Digitaçao*/
from	estabelecimento b,
	lote_contabil a
where	a.cd_estabelecimento	= b.cd_estabelecimento
and	b.cd_empresa		= cd_empresa_p
and	b.cd_estabelecimento	= coalesce(cd_estab_p, b.cd_estabelecimento)
and	a.nr_seq_mes_ref		= nr_seq_mes_ref_w

union
				/* Lotes gerados pendentes p integracao */
select	a.nr_lote_contabil
from	estabelecimento b,
	lote_contabil a
where	a.cd_estabelecimento	= b.cd_estabelecimento
and	b.cd_empresa		= cd_empresa_p
and	b.cd_estabelecimento	= coalesce(cd_estab_p, b.cd_estabelecimento)
and	coalesce(a.nr_seq_mes_ref::text, '') = ''
and	a.dt_referencia	between dt_inicial_w	and dt_final_w;

vet02	C02%RowType;


BEGIN
ds_mensagem_w:= wheb_mensagem_pck.get_texto(305161);
CALL gravar_processo_longo(ds_mensagem_w,'CTB_ATUALIZAR_DADOS_CLASSIF',0);
dt_mes_inicial_w	:= dt_mes_inicial_p;
dt_mes_final_w	:= fim_mes(coalesce(dt_mes_final_p, dt_mes_inicial_p));
qt_registro_w	:= trunc(months_between(dt_mes_final_w, dt_mes_inicial_w));

if (qt_registro_w > 12) then
	/*'Período muito amplo para atualização!#@#@');*/

	CALL wheb_mensagem_pck.exibir_mensagem_abort(266404);
end if;

if (coalesce(nr_lote_contabil_p,0) <> 0) then
	begin
	if (ie_atual_movto_geracao_p = 'S') then
		ds_mensagem_w:= substr(wheb_mensagem_pck.get_texto(305135, 'nr_lote_contabil_p=' || nr_lote_contabil_p),1,255);
		CALL gravar_processo_longo(ds_mensagem_w,'CTB_ATUALIZAR_DADOS_CLASSIF',-1);
		CALL CTB_ATUAL_CLASSIF_MOVTO_CONTAB(nr_lote_contabil_p, nm_usuario_p);
	end if;

	if (ie_atual_movto_contabil_p = 'S') then
		ds_mensagem_w:= substr(wheb_mensagem_pck.get_texto(305137,'nr_lote_contabil_p=' || nr_lote_contabil_p),1,255);
		CALL gravar_processo_longo(ds_mensagem_w,'CTB_ATUALIZAR_DADOS_CLASSIF',-1);
		CALL CTB_ATUAL_CLASSIF_CTBMOVIMENTO(nr_lote_contabil_p, nm_usuario_p);
	end if;

	end;
end if;

if (coalesce(nr_lote_contabil_p,0) = 0) then
	begin
	i	:= 0;
	j	:= 0;
	open C01;
	loop
	fetch C01 into
		vet01;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		i	:= i + 1;
		meses_w[i].nr_seq_mes_ref	:= vet01.nr_sequencia;
		meses_w[i].dt_referencia	:= vet01.dt_referencia;
		ds_mensagem_w := substr(wheb_mensagem_pck.get_texto(305141, 'dt_referencia=' || to_char(vet01.dt_referencia,'dd/mm/yyyy')),1,255);
		CALL gravar_processo_longo(ds_mensagem_w,'CTB_ATUALIZAR_DADOS_CLASSIF',-1);
		end;
	end loop;
	close C01;

	for i in 1..meses_w.Count loop
		begin
		nr_seq_mes_ref_w		:= meses_w[i].nr_seq_mes_ref;
		dt_inicial_w			:= trunc(meses_w[i].dt_referencia,'MONTH');
		dt_final_w			:= fim_mes(dt_inicial_w);

		if (ie_atual_movto_geracao_p = 'S') or (ie_atual_movto_contabil_p = 'S') then
			begin
			ds_mensagem_w := substr(wheb_mensagem_pck.get_texto(305146, 'dt_referencia=' || to_char(meses_w[i].dt_referencia,'dd/mm/yyyy')),1,255);
			CALL gravar_processo_longo(ds_mensagem_w,'CTB_ATUALIZAR_DADOS_CLASSIF',-1);
			j	:= 0;
			lotes_w.Delete;
			/* Armazenado em vetor primeiro para evitar Cursor aberto-Performance */

			open C02;
			loop
			fetch C02 into
				vet02;
			EXIT WHEN NOT FOUND; /* apply on C02 */
				begin
				j	:= j + 1;
				lotes_w[j].nr_lote_contabil	:= vet02.nr_lote_contabil;
				end;
			end loop;
			close C02;

			/*Atualizar Classificações dos Movimentos contábeis dos lotes do mês*/

			for j in 1..lotes_w.Count loop
				begin
				if (ie_atual_movto_geracao_p = 'S') then
					ds_mensagem_w := substr(wheb_mensagem_pck.get_texto(305151, 'nr_lote_contabil=' || lotes_w[j].nr_lote_contabil),1,255);
					CALL gravar_processo_longo(ds_mensagem_w,'CTB_ATUALIZAR_DADOS_CLASSIF',-1);
					CALL CTB_ATUAL_CLASSIF_MOVTO_CONTAB(lotes_w[j].nr_lote_contabil, nm_usuario_p);
				end if;

				if (ie_atual_movto_contabil_p = 'S') then
					ds_mensagem_w := substr(wheb_mensagem_pck.get_texto(305154, 'nr_lote_contabil=' || lotes_w[j].nr_lote_contabil),1,255);
					CALL gravar_processo_longo(ds_mensagem_w,'CTB_ATUALIZAR_DADOS_CLASSIF',-1);
					CALL CTB_ATUAL_CLASSIF_CTBMOVIMENTO(lotes_w[j].nr_lote_contabil, nm_usuario_p);
				end if;
				end;
			end loop;
			end;
		end if;

		/*Atualiza o saldo do mês*/

		if (ie_atual_ctb_saldo_p = 'S') then
			ds_mensagem_w := substr(wheb_mensagem_pck.get_texto(305157,'dt_referencia=' || to_char(meses_w[i].dt_referencia,'dd/mm/yyyy')),1,255);
			CALL gravar_processo_longo(ds_mensagem_w,'CTB_ATUALIZAR_DADOS_CLASSIF',-1);
			CALL ctb_atualizar_classif_saldo(cd_empresa_p, cd_estab_p, meses_w[i].nr_seq_mes_ref, nm_usuario_p);
		end if;

		nr_seq_mes_log_w := ctb_grava_log_mes(nr_seq_mes_log_w, nm_usuario_p, meses_w[i].nr_seq_mes_ref, '12', wheb_mensagem_pck.get_texto(332339) || ie_atual_movto_geracao_p || ie_atual_movto_contabil_p || ie_atual_ctb_saldo_p);

		end;
	end loop;

	end;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_atualizar_dados_classif ( cd_empresa_p bigint, cd_estab_p bigint, dt_mes_inicial_p timestamp, dt_mes_final_p timestamp, ie_atual_movto_geracao_p text, ie_atual_movto_contabil_p text, ie_atual_ctb_saldo_p text, nr_lote_contabil_p bigint, nm_usuario_p text) FROM PUBLIC;

