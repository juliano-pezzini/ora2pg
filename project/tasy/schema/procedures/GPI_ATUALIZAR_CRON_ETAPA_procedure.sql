-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gpi_atualizar_cron_etapa ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE


nr_sequencia_w		bigint;
nr_predecessora_w		bigint;
dt_inicio_prev_w		timestamp;
dt_fim_prev_w		timestamp;
dt_fim_prev_ww		timestamp;
nr_sequencia_sup_w	bigint; --  sequência da atividade posterior
nr_seq_cronograma_w	bigint;
qt_hora_prev_w		double precision;
qt_hora_prev_etapa_w	double precision;
nr_seq_sup_fase_w		bigint;
qt_calendario_w		bigint;
ie_regra_ini_fim_w		varchar(1);


dt_inicio_ativ_w	timestamp;
dt_fim_ativ_w		timestamp;

c01 CURSOR FOR
SELECT	nr_sequencia
from	gpi_cron_etapa
where	nr_predecessora = nr_sequencia_w
and	nr_seq_cronograma = nr_seq_cronograma_w
order by 1;

type 		fetch_array is table of c01%rowtype;
s_array 	fetch_array;
i		integer := 1;
type vetor is table of fetch_array index by integer;
vetor_c01_w	vetor;

BEGIN

-- buscar os dados da atividade atualizada
select	nr_sequencia,
	dt_inicio_prev,
	dt_fim_prev,
	nr_seq_cronograma,
	nr_seq_superior,
	qt_hora_prev,
	nr_predecessora
	--ie_regra_ini_fim
into STRICT	nr_sequencia_w,
	dt_inicio_prev_w,
	dt_fim_prev_w,
	nr_seq_cronograma_w,
	nr_seq_sup_fase_w,
	qt_hora_prev_etapa_w,
	nr_predecessora_w
	--ie_regra_ini_fim_w
from	gpi_cron_etapa
where	nr_sequencia = nr_sequencia_p;

select	count(*)
into STRICT	qt_calendario_w
from	gpi_cron_calendario
where	nr_seq_cronograma = nr_seq_cronograma_w;

if (qt_calendario_w > 0) then
	begin
	if ((nr_predecessora_w IS NOT NULL AND nr_predecessora_w::text <> '') or (dt_inicio_prev_w IS NOT NULL AND dt_inicio_prev_w::text <> '')) then
		begin
		if (nr_predecessora_w IS NOT NULL AND nr_predecessora_w::text <> '') then
			select	max(a.dt_fim_prev)
			into STRICT	dt_inicio_prev_w
			from	gpi_cron_etapa a
			where	nr_sequencia = nr_predecessora_w
			and	nr_seq_cronograma = nr_seq_cronograma_w;
		end if;

		if (dt_inicio_prev_w IS NOT NULL AND dt_inicio_prev_w::text <> '') then
			begin
			--no gpi não possui esta regra, faz o cálculo para a data mais breve possível.
			ie_regra_ini_fim_w := 'B';

			if (ie_regra_ini_fim_w = 'B') then
				begin
				SELECT * FROM gpi_verifica_calendario_cron(dt_inicio_prev_w, qt_hora_prev_etapa_w, dt_inicio_ativ_w, dt_fim_ativ_w, nr_seq_cronograma_w, nm_usuario_p) INTO STRICT dt_inicio_ativ_w, dt_fim_ativ_w;

				update	gpi_cron_etapa
				set	dt_fim_prev = dt_fim_ativ_w,
					dt_inicio_prev = dt_inicio_ativ_w
				where	nr_sequencia = nr_sequencia_p;
				end;
			else
				begin
				select	dt_inicio_prev
				into STRICT	dt_inicio_prev_w
				from	gpi_cron_etapa
				where	nr_sequencia = nr_sequencia_p;

				SELECT * FROM gpi_verifica_calendario_cron(dt_inicio_prev_w, qt_hora_prev_etapa_w, dt_inicio_ativ_w, dt_fim_ativ_w, nr_seq_cronograma_w, nm_usuario_p) INTO STRICT dt_inicio_ativ_w, dt_fim_ativ_w;

				update	gpi_cron_etapa
				set	dt_fim_prev = dt_fim_ativ_w
				where	nr_sequencia = nr_sequencia_p;
				end;
			end if;

			commit;
			end;
		end if;

		CALL gpi_atualizar_tempo_fase(nr_sequencia_p, nm_usuario_p);

		--  abre cursor que irá varrer as atividades posteriores (com o nr_sequencia da atividade informado na nr_predecessora)
		open c01;
		loop
		fetch c01 bulk collect into s_array limit 1000;
			vetor_c01_w(i) := s_array;
			i := i + 1;
		EXIT WHEN NOT FOUND; /* apply on c01 */
		end loop;
		close c01;

		for i in 1..vetor_c01_w.count loop
			begin
			s_array := vetor_c01_w(i);
			for z in 1..s_array.count loop
				nr_sequencia_sup_w := s_array[z].nr_sequencia;
				begin
				CALL gpi_atualizar_tempo_fase(nr_sequencia_p, nm_usuario_p);
				CALL gpi_atualizar_cron_etapa(nr_sequencia_sup_w ,nm_usuario_p);
				commit;
				end;
			end loop;
			end;
		end loop;
		commit;
		end;
	end if;
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gpi_atualizar_cron_etapa ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

