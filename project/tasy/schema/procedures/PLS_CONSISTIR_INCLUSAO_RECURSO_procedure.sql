-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_consistir_inclusao_recurso ( nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_protocolo_p bigint default null, nr_seq_lote_p pls_rec_glosa_lote.nr_sequencia%type default null, ds_msg_abort_p INOUT text DEFAULT NULL) AS $body$
DECLARE

/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Finalidade:  Consistir quando parametro ativo se a conta já foi recursado ao maximo de vezes permitida ou se 
a conta esta com status de liberado para pagamento para que possa ser recursada novamente
-------------------------------------------------------------------------------------------------------------------

Locais de chamada direta: 
[ X]  Objetos do dicionário [ ] Tasy (Delphi/Java) [  ] Portal [  ]  Relatórios [ ] Outros:
-------------------------------------------------------------------------------------------------------------------

Pontos de atenção:

Alterações:
-------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
qt_rec_glosa_w			smallint;
qt_protocolo_w			smallint;
qtde_contas_protocolo_w 	integer;
qt_protocolos_w			integer;
ie_origem_solic_w		pls_rec_glosa_protocolo.ie_origem_solic%type := '';
nr_seq_prestador_w		pls_rec_glosa_protocolo.nr_seq_prestador%type;
dt_apresentacao_lote_w		pls_rec_glosa_protocolo.dt_apresentacao_lote%type;
ds_retorno_w			varchar(255) := '';
cd_estabelecimento_w		estabelecimento.cd_estabelecimento%type;
ie_gera_rec_w			varchar(1) := 'S';
ds_protocolos_w			varchar(255);
ie_acao_w			varchar(1) := 'P';
nr_seq_cta_tst_w		numeric(20);
nr_seq_prot_tst_w		numeric(20);
qt_recurso_prot_w		integer;
ie_qt_max_conta_w		pls_parametros_rec_glosa.ie_qt_max_conta%type;
ie_permite_w			varchar(1) := 'S';
ie_permite_qtd_w		varchar(1) := 'S';
nr_seq_usuario_web_w		pls_usuario_web.nr_sequencia%type;
nr_seq_perfil_web_w		pls_perfil_web.nr_sequencia%type;
vl_parametros_w			varchar(255);
ie_param_9_w			varchar(5) := 'PG';

C01 CURSOR(nr_seq_conta_pc	pls_conta.nr_sequencia%type) FOR
	SELECT	a.nr_sequencia nr_seq_protocolo
	from	pls_rec_glosa_conta b,
		pls_rec_glosa_protocolo a
	where	a.nr_sequencia	= b.nr_seq_protocolo
	and	b.nr_seq_conta	= nr_seq_conta_pc
	and	b.ie_status	!= '3'
	and	a.ie_status not in ('3','4','6','10');

BEGIN


if (nr_seq_protocolo_p IS NOT NULL AND nr_seq_protocolo_p::text <> '') then
	cd_estabelecimento_w := pls_obter_cd_estab_ops;
	
	select	max(nr_sequencia),
		max(nr_seq_perfil_web)
	into STRICT	nr_seq_usuario_web_w,
		nr_seq_perfil_web_w
	from	pls_usuario_web
	where	UPPER(nm_usuario_web) = UPPER(nm_usuario_p);
	
	if (nr_seq_usuario_web_w IS NOT NULL AND nr_seq_usuario_web_w::text <> '') then
	
		vl_parametros_w := pls_obter_parametros_funcao(null, null, nr_seq_usuario_web_w, cd_estabelecimento_w, 1394, null, 'P', null, nr_seq_perfil_web_w, null, vl_parametros_w);

		ie_param_9_w := substr(pls_obter_valor_parametro(9, vl_parametros_w),1,2);
	end if;
	
	select	sum(qt_rec)
	into STRICT	qt_protocolo_w
	from (
		SELECT	count(1) qt_rec
		from	pls_rec_glosa_conta b
		where	b.nr_seq_conta = nr_seq_conta_p
		and	b.ie_status <> '3'
		
union all

		SELECT	count(1) qt_rec
		from	pls_rec_glosa_conta_imp b
		where	b.nr_seq_conta = nr_seq_conta_p
		and 	b.ie_status != 'CG' --para não considerar outras importações não aceitas ou que não poderão ser aceitas por estarem com glosa
		and	not exists (	select	1
					from	pls_rec_glosa_conta x
					where	x.nr_seq_conta_imp = b.nr_sequencia)) alias4;

	--buscar a quantidade de vezes que a conta pode ser recursada
	select	coalesce(max(qt_recurso_conta),0),
		coalesce(max(ie_qt_max_conta),0)
	into STRICT	qt_rec_glosa_w,
		ie_qt_max_conta_w
	from	pls_parametros_rec_glosa
	where	cd_estabelecimento = cd_estabelecimento_w;

	--verificar como o protocolo foi criado
	select	max(ie_origem_solic)
	into STRICT	ie_origem_solic_w
	from	pls_rec_glosa_protocolo
	where	nr_sequencia = nr_seq_protocolo_p;

	select	a.nr_seq_prestador,
		a.dt_apresentacao_lote
	into STRICT	nr_seq_prestador_w,
		dt_apresentacao_lote_w
	from	pls_rec_glosa_protocolo a
	where	a.nr_sequencia = nr_seq_protocolo_p;
	
	select	count(1)
	into STRICT	qt_recurso_prot_w
	from	pls_rec_glosa_conta
	where	nr_seq_protocolo = nr_seq_protocolo_p;
	
	-- Só deve verificar o parâmetro aqui se for digitação no portal.

	-- Para importação é verificado em outro momento.
	if (ie_qt_max_conta_w > 0) and (qt_recurso_prot_w >= ie_qt_max_conta_w) and (ie_origem_solic_w = 'P') then
		ie_permite_w := 'N';
	end if;
	
	-- Para digitação do portal, a verificação é feita antes de inserir na pls_conta_rec_glosa,

	-- por isso precisa ser analisado com igual, pois caso for maior, significa que já ultrapassou a quantidade
	if (qt_rec_glosa_w > 0) and
		((qt_protocolo_w = qt_rec_glosa_w AND ie_origem_solic_w = 'P') or (qt_protocolo_w > qt_rec_glosa_w)) then
		ie_permite_qtd_w := 'N';
	end if;
	
	if (ie_origem_solic_w <> 'E') then
		ds_retorno_w := pls_obter_se_recursa_conta_pag(nr_seq_prestador_w, nr_seq_conta_p, dt_apresentacao_lote_w, null, ie_param_9_w);
	end if;
	
	if (ie_origem_solic_w in ('M','P')) then
		ie_acao_w := 'T';
	end if;
	
	--verifico se a quantidade de recursos onde a conta esta cadastrada é maior que a quantidade permitida no parametro
	if (ie_permite_qtd_w = 'N') or (ie_permite_w = 'N') or (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') then
		
		if (ie_origem_solic_w <> 'E') then
			--limpo a tabela pois no portal pode ter mais de um prestador e vai gerar erro........
			
			delete	from w_pls_recurso_glosa
			where	nr_seq_conta = nr_seq_conta_p;	

			select 	count(1)
			into STRICT	qtde_contas_protocolo_w
			from	pls_rec_glosa_conta a
			where	a.nr_seq_protocolo = nr_seq_protocolo_p;
			
			delete from pls_rec_glosa_glosas_imp
			where	nr_seq_conta_imp  in (	SELECT nr_sequencia
							from 	pls_rec_glosa_conta_imp
							where	nr_seq_protocolo_cta in (	select nr_sequencia
												from pls_rec_glosa_prot_cta_imp
												where 	nr_seq_protocolo = nr_seq_protocolo_p));
			
			if (qtde_contas_protocolo_w = 0 ) then
				
				
					delete from pls_rec_glosa_glosas_imp
					where	nr_seq_conta_imp  in (	SELECT nr_sequencia
								from 	pls_rec_glosa_conta_imp
								where	nr_seq_protocolo_cta in (	select nr_sequencia
													from pls_rec_glosa_prot_cta_imp
													where 	nr_seq_protocolo = nr_seq_protocolo_p));

				
				
					delete from pls_rec_glosa_glosas_imp
					where	nr_seq_proc_imp  in (SELECT nr_sequencia from pls_rec_glosa_proc_imp
								     where 	nr_seq_conta_imp in (Select nr_sequencia
													from 	pls_rec_glosa_conta_imp
													where	nr_seq_protocolo_cta in (	select nr_sequencia
																		from pls_rec_glosa_prot_cta_imp
																		where 	nr_seq_protocolo = nr_seq_protocolo_p)));

				
				
					delete from pls_rec_glosa_glosas_imp
					where	nr_seq_mat_imp  in (SELECT nr_sequencia from pls_rec_glosa_proc_imp
								     where 	nr_seq_conta_imp in (Select nr_sequencia
													from 	pls_rec_glosa_conta_imp
													where	nr_seq_protocolo_cta in (	select nr_sequencia
																		from pls_rec_glosa_prot_cta_imp
																		where 	nr_seq_protocolo = nr_seq_protocolo_p)));

				
				
					delete from pls_rec_glosa_mat_imp
					where 	nr_seq_conta_imp in (SELECT nr_sequencia
									from 	pls_rec_glosa_conta_imp
									where	nr_seq_protocolo_cta in (	select nr_sequencia
														from pls_rec_glosa_prot_cta_imp
														where 	nr_seq_protocolo = nr_seq_protocolo_p));

				
				
					delete from pls_rec_glosa_proc_imp
					where 	nr_seq_conta_imp in (SELECT nr_sequencia
									from 	pls_rec_glosa_conta_imp
									where	nr_seq_protocolo_cta in (	select nr_sequencia
														from pls_rec_glosa_prot_cta_imp
														where 	nr_seq_protocolo = nr_seq_protocolo_p));

				
				
					delete 	from	pls_rec_glosa_conta_imp
					where	nr_seq_protocolo_cta in (	SELECT nr_sequencia
										from pls_rec_glosa_prot_cta_imp
										where 	nr_seq_protocolo = nr_seq_protocolo_p);

					
				delete 	from pls_rec_glosa_prot_cta_imp
				where 	nr_seq_protocolo = nr_seq_protocolo_p;
				
			end if;
			
			commit;
		end if;
		if (ie_permite_w = 'N') and (ie_origem_solic_w = 'P') then
			ds_msg_abort_p := 'Limite máximo de recursos por protocolo alcançado. Quantidade de recursos: ' || qt_recurso_prot_w || '. Quantidade permitida: ' || ie_qt_max_conta_w || '.';
			
		elsif (ie_permite_qtd_w = 'N') then
			if (ie_origem_solic_w = 'P') then
				ds_msg_abort_p := 'A conta ' || nr_seq_conta_p || ' já está em ' || qt_protocolo_w || ' recurso(s). Não é possível recursá-la novamente.';
			else
				CALL wheb_mensagem_pck.exibir_mensagem_abort(319962,'NR_SEQ_CONTA=' || nr_seq_conta_p || ';' ||'QT_PROTOCOLO=' || qt_protocolo_w);
			end if;
		elsif (ds_retorno_w IS NOT NULL AND ds_retorno_w::text <> '') then
			if (ie_origem_solic_w = 'P') then
				ds_msg_abort_p := 'Cobrança fora do prazo de validade. Conta: ' || nr_seq_conta_p || pls_util_pck.enter_w || ds_retorno_w;
			else
				CALL wheb_mensagem_pck.exibir_mensagem_abort(447143,'NR_SEQ_CONTA=' || nr_seq_conta_p || ';' ||'NR_SEQ_PRESTADOR=' || nr_seq_prestador_w);
			end if;
		end if;
	end if;
	
	if (ie_origem_solic_w <> 'E') and (coalesce(ds_msg_abort_p::text, '') = '') then
	
		ie_gera_rec_w := pls_obter_se_existe_item_rec(nr_seq_conta_p, nr_seq_prestador_w, ie_acao_w);
		
		--se a conta estiver em outro protocolo aborta 
		if (ie_gera_rec_w = 'N') then
			--limpo a tabela pois no portal pode ter mais de um prestador e vai gerar erro........
			
			delete	from w_pls_recurso_glosa
			where	nr_seq_conta = nr_seq_conta_p;
			
			select 	count(1)
			into STRICT	qtde_contas_protocolo_w
			from	pls_rec_glosa_conta a
			where	a.nr_seq_protocolo = nr_seq_protocolo_p;
			
			if (qtde_contas_protocolo_w = 0) then
			
				delete from pls_rec_glosa_glosas_imp
				where	nr_seq_conta_imp  in (	SELECT nr_sequencia
							from 	pls_rec_glosa_conta_imp
							where	nr_seq_protocolo_cta in (	select nr_sequencia
												from pls_rec_glosa_prot_cta_imp
												where 	nr_seq_protocolo = nr_seq_protocolo_p));
			
				delete from pls_rec_glosa_glosas_imp
				where	nr_seq_proc_imp  in (SELECT nr_sequencia from pls_rec_glosa_proc_imp
							     where 	nr_seq_conta_imp in (Select nr_sequencia
												from 	pls_rec_glosa_conta_imp
												where	nr_seq_protocolo_cta in (	select nr_sequencia
																	from pls_rec_glosa_prot_cta_imp
																	where 	nr_seq_protocolo = nr_seq_protocolo_p)));
				
				delete from pls_rec_glosa_glosas_imp
				where	nr_seq_mat_imp  in (SELECT nr_sequencia from pls_rec_glosa_proc_imp
							     where 	nr_seq_conta_imp in (Select nr_sequencia
												from 	pls_rec_glosa_conta_imp
												where	nr_seq_protocolo_cta in (	select nr_sequencia
																	from pls_rec_glosa_prot_cta_imp
																	where 	nr_seq_protocolo = nr_seq_protocolo_p)));
				
			
				delete from pls_rec_glosa_mat_imp
				where 	nr_seq_conta_imp in (SELECT nr_sequencia
								from 	pls_rec_glosa_conta_imp
								where	nr_seq_protocolo_cta in (	select nr_sequencia
													from pls_rec_glosa_prot_cta_imp
													where 	nr_seq_protocolo = nr_seq_protocolo_p));
			
				delete from pls_rec_glosa_proc_imp
				where 	nr_seq_conta_imp in (SELECT nr_sequencia
								from 	pls_rec_glosa_conta_imp
								where	nr_seq_protocolo_cta in (	select nr_sequencia
													from pls_rec_glosa_prot_cta_imp
													where 	nr_seq_protocolo = nr_seq_protocolo_p));
			
				delete 	from	pls_rec_glosa_conta_imp
				where	nr_seq_protocolo_cta in (	SELECT nr_sequencia
									from pls_rec_glosa_prot_cta_imp
									where 	nr_seq_protocolo = nr_seq_protocolo_p);
			
				delete 	from pls_rec_glosa_prot_cta_imp
				where 	nr_seq_protocolo = nr_seq_protocolo_p;
			end if;
			
			commit;
			
			for r_C01_w in C01(nr_seq_conta_p) loop
				if (coalesce(ds_protocolos_w::text, '') = '') then
					ds_protocolos_w := r_C01_w.nr_seq_protocolo;
				else
					ds_protocolos_w := ', ' || r_C01_w.nr_seq_protocolo;
				end if;
			end loop;
			
			--wheb_mensagem_pck.exibir_mensagem_abort(319598,'NR_SEQ_CONTA=' || nr_seq_conta_p || ';' || 'NR_SEQ_PROTOCOLO=' || nr_seq_protocolo_w);
			ds_msg_abort_p := 'A conta ' || nr_seq_conta_p || ' já está em análise no protocolo ' || ds_protocolos_w ||'.';
		end if;
	end if;	
else
	ds_msg_abort_p := 'O protocolo não está mais disponível. Favor gerar um novo protocolo.';
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_consistir_inclusao_recurso ( nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type, nr_seq_protocolo_p bigint default null, nr_seq_lote_p pls_rec_glosa_lote.nr_sequencia%type default null, ds_msg_abort_p INOUT text DEFAULT NULL) FROM PUBLIC;

