-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_venc_lote_protocolo (nr_seq_lote_p bigint, nm_usuario_p text) AS $body$
DECLARE

					 
cd_estabelecimento_w		smallint;
vl_lote_w			double precision;
cd_condicao_pagamento_w		bigint;
qt_dia_vencimento_w		bigint;
nm_prestador_w			varchar(255);
ie_forma_pagamento_w		integer;
ie_acao_venc_nao_util_w		varchar(1) := 'M';
dt_vencimento_w			timestamp;
vl_vencimento_w			double precision;
tx_acrescimo_w			double precision;
tx_fracao_parcela_w		double precision;
nr_seq_lote_venc_w		bigint;
qt_regras_prestador_w		integer;
dt_base_venc_w			timestamp;
nr_seq_prestador_w		bigint;
ds_vencimentos_w		varchar(2000);
qt_vencimentos_w		bigint;
dt_venc_fixo_w			timestamp;
ie_base_venc_lote_pag_w		varchar(1);
qt_parcela_w			pls_lote_protocolo.qt_parcela%type;
vl_total_parcela_w		double precision;
vl_parcela_w			double precision;

C01 CURSOR FOR 
	SELECT	tx_fracao_parcela, /* A Prazo  */
 
       	coalesce(tx_acrescimo,0), 
		obter_data_vencimento(dt_base_venc_w, qt_dias_parcela, cd_estabelecimento_w, 
				ie_corrido_util, ie_acao_venc_nao_util_w) 
	from 	parcela 
	where 	cd_condicao_pagamento 	= cd_condicao_pagamento_w 
	and 	ie_forma_pagamento_w	not in (1,10) 
	
union
 
	SELECT 	100, /* A Vista  */
 
		0, 
		dt_base_venc_w 
	 
	where 	ie_forma_pagamento_w = 1 
	
union
 
	select	100, /* Conforme Vencimentos */
 
		0, 
		to_date((to_char(qt_dia_vencimento_w) || '/' || to_char(add_months(dt_base_venc_w,1),'mm/yyyy')),'dd/mm/yyyy') 
	 
	where	ie_forma_pagamento_w = 10;

BEGIN 
 
if (nr_seq_lote_p IS NOT NULL AND nr_seq_lote_p::text <> '') then 
	 
	begin 
		select	a.cd_estabelecimento, 
			pls_obter_valor_lote_resumo(nr_sequencia), 
			nr_seq_prestador, 
			dt_mes_competencia, 
			qt_parcela 
		into STRICT	cd_estabelecimento_w, 
			vl_lote_w, 
			nr_seq_prestador_w, 
			dt_base_venc_w, 
			qt_parcela_w 
		from	pls_lote_protocolo a 
		where	a.nr_sequencia	= nr_seq_lote_p;
	exception 
	when others then 
		qt_parcela_w := null;
	end;
	 
	-- Se não informou quantidade de parcela na regra ou informou zero parcelas o sistema considera como 1 parcela e gera os dados da forma antiga 
	if (coalesce(qt_parcela_w,0) = 0) then 
		qt_parcela_w := 1;
	end if;
	 
	select	coalesce(ie_base_venc_lote_pag,'E') 
	into STRICT	ie_base_venc_lote_pag_w 
	from	pls_parametros 
	where	cd_estabelecimento = cd_estabelecimento_w;
	 
	if (ie_base_venc_lote_pag_w = 'A') then 
		dt_base_venc_w := clock_timestamp();
	end if;
	 
	select	count(*) 
	into STRICT	qt_regras_prestador_w 
	from	pls_prestador_pagto a, 
		pls_prestador b 
	where	b.nr_sequencia = a.nr_seq_prestador 
	and	a.nr_seq_prestador = nr_seq_prestador_w;
	 
	if (qt_regras_prestador_w = 0) then 
		-- Não foram cadastradas regras para a geração do título para o prestador selecionado. Verifique na função OPS - Prestadores. 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(266858);
	end if;
	 
	select	max(a.cd_condicao_pagamento), 
		max(a.qt_dia_vencimento), 
		substr(obter_nome_pf_pj(max(b.cd_pessoa_fisica), max(b.cd_cgc)),1,255) 
	into STRICT	cd_condicao_pagamento_w, 
		qt_dia_vencimento_w, 
		nm_prestador_w 
	from	pls_prestador_pagto a, 
		pls_prestador b 
	where	b.nr_sequencia = a.nr_seq_prestador 
	and	a.nr_seq_prestador = nr_seq_prestador_w;
	 
	select 	coalesce(max(ie_forma_pagamento),3), 
		coalesce(max(ie_acao_nao_util),'M') 
	into STRICT 	ie_forma_pagamento_w, 
		ie_acao_venc_nao_util_w 
	from 	condicao_pagamento 
	where 	cd_condicao_pagamento = cd_condicao_pagamento_w 
	and 	ie_situacao = 'A';
	 
	if (ie_forma_pagamento_w = 10) and (coalesce(qt_dia_vencimento_w,0) = 0) then 
		-- Não foi cadastrado o dia do vencimento para o prestador #@NM_PRESTADOR#@. Verifique! 
		CALL wheb_mensagem_pck.exibir_mensagem_abort(266859, 'NM_PRESTADOR=' || nm_prestador_w);
	end if;
	 
	delete	from	pls_lote_protocolo_venc 
	where	nr_seq_lote	= nr_seq_lote_p;
	 
	/* Francisco - 14/02/2010 - Troquei no cursor pela calcular_vencimento porque algumas condições não funcionam */
 
	if (cd_condicao_pagamento_w IS NOT NULL AND cd_condicao_pagamento_w::text <> '') then 
		SELECT * FROM calcular_vencimento(	cd_estabelecimento_w, cd_condicao_pagamento_w, dt_base_venc_w, qt_vencimentos_w, ds_vencimentos_w) INTO STRICT qt_vencimentos_w, ds_vencimentos_w;
	end if;
	 
	if (qt_parcela_w = 1) then 
		open C01;
		loop 
		fetch C01 into	 
			tx_fracao_parcela_w, 
			tx_acrescimo_w, 
			dt_venc_fixo_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			dt_vencimento_w		:= to_date(substr(ds_vencimentos_w,1,10),'dd/mm/yyyy');
			 
			if (coalesce(dt_vencimento_w::text, '') = '') then 
				dt_vencimento_w	:= dt_venc_fixo_w;
			end if;
			 
			if (coalesce(tx_fracao_parcela_w,0) > 0) then 
				vl_vencimento_w	:= ((vl_lote_w * tx_fracao_parcela_w) / 100);
			end if;
			 
			if (tx_acrescimo_w <> 0) then 
				vl_vencimento_w := vl_vencimento_w + ((vl_vencimento_w * tx_acrescimo_w) / 100);
			end if;
			 
			insert	into	pls_lote_protocolo_venc(nr_sequencia, 
				nm_usuario, 
				dt_atualizacao, 
				nm_usuario_nrec, 
				dt_atualizacao_nrec, 
				nr_seq_lote, 
				dt_vencimento, 
				vl_vencimento, 
				pr_ir, 
				vl_ir, 
				pr_imposto_munic, 
				vl_imposto_munic, 
				vl_liquido) 
			values (nextval('pls_lote_protocolo_venc_seq'), 
				nm_usuario_p, 
				clock_timestamp(), 
				nm_usuario_p, 
				clock_timestamp(), 
				nr_seq_lote_p, 
				dt_vencimento_w, 
				vl_vencimento_w, 
				0, 
				0, 
				0, 
				0, 
				vl_vencimento_w) returning nr_sequencia into nr_seq_lote_venc_w;
		end loop;
		close C01;
	else 
		nr_seq_lote_venc_w := null;
		vl_total_parcela_w := 0;
		vl_parcela_w := 0;
		vl_vencimento_w := vl_lote_w;
		 
		-- Formata a tada para inserção 
		dt_vencimento_w := to_date(dt_base_venc_w,'dd/mm/yyyy');
		 
		-- Realiza Loop conforme a quantidade de parcelas 
		for i in 1 .. qt_parcela_w loop 
		 
			-- A cada data inserida a rotina já incrementa um mês à data para a próxima inserção 
			dt_vencimento_w := add_months(dt_vencimento_w, 1);
			 
			-- Divide o valor conforme a quantidade de parcelas 
			vl_parcela_w := vl_vencimento_w / qt_parcela_w;
			 
			-- Gera lote de protocolo 
			insert into pls_lote_protocolo_venc( 
				nr_sequencia,				nm_usuario,		dt_atualizacao, 
				nm_usuario_nrec,			dt_atualizacao_nrec,	nr_seq_lote, 
				dt_vencimento,				vl_vencimento,		pr_ir, 
				vl_ir,					pr_imposto_munic,	vl_imposto_munic, 
				vl_liquido) 
			values (nextval('pls_lote_protocolo_venc_seq'),	nm_usuario_p,		clock_timestamp(), 
				nm_usuario_p,				clock_timestamp(),		nr_seq_lote_p, 
				dt_vencimento_w,			vl_parcela_w,		0, 
				0,					0,			0, 
				vl_parcela_w) returning nr_sequencia into nr_seq_lote_venc_w;
				 
			-- Vai armazenando a soma do valor das parcelas 
			vl_total_parcela_w := vl_total_parcela_w + vl_parcela_w;
		end loop;
		 
		-- Atualiza a última parcela gerada com a diferença de valor, exemplo, R$ 100,00 em 3 parcelas, em uma divisão comum geraria 3 parcelas de R$ 33,33, porém, deve gerar 2 parcelas de R$ 33,33 e uma parcela de R$ 33,34 
		if (vl_vencimento_w > vl_total_parcela_w) then 
			update	pls_lote_protocolo_venc 
			set	vl_vencimento	= (vl_vencimento_w - vl_total_parcela_w), 
				vl_liquido	= (vl_vencimento_w - vl_total_parcela_w) 
			where	nr_sequencia	= nr_seq_lote_venc_w;
		end if;
	end if;
	 
	CALL pls_gerar_tributos_lote_prot(nr_seq_lote_p,nm_usuario_p);
end if;
 
/* Não pode dar commit */
 
 
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_venc_lote_protocolo (nr_seq_lote_p bigint, nm_usuario_p text) FROM PUBLIC;

