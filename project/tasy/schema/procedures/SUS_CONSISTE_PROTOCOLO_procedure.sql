-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sus_consiste_protocolo ( nr_seq_protocolo_p bigint, ie_funcao_p text, nm_usuario_p text) AS $body$
DECLARE


/*
IE_FUNCAO_P

AIH
BPA
APAC
*/
ds_detalhe_w		varchar(255)	:= '';
cd_estabelecimento_w	smallint;
nr_seq_apac_w		bigint;
nr_apac_w		bigint;
cd_procedimento_apac_w	bigint;
ie_origem_proc_apac_w	bigint;
cd_cid_principal_w	varchar(4);
cd_cid_secundario_w	varchar(4);
cd_cid_causa_assoc_w	varchar(4);
ie_apac_w		varchar(1)	:= 'S';
nr_apac_digito13_w	smallint;
ds_erro_w		varchar(255);
nr_seq_protocolo_w	bigint;
dt_competencia_apac_w	timestamp;
dt_competencia_prot_w	timestamp;
nr_interno_conta_w	bigint;
nr_atendimento_w	bigint;

pr_cesariana_permitida_w	double precision	:= 0;
qt_cesariana_w			bigint	:= 0;
qt_total_parto_w		bigint	:= 0;
pr_cesariana_w			double precision	:= 0;
qt_parto_normal_w		double precision	:= 0;
pr_sobra_w			double precision	:= 0;

C01 CURSOR FOR
	SELECT	nr_interno_conta,
		nr_atendimento,
		coalesce(cd_estabelecimento,1)
	from	conta_paciente
	where	nr_seq_protocolo	= nr_seq_protocolo_p;


BEGIN
OPEN C01;
	LOOP
	FETCH C01 into
		nr_interno_conta_w,
		nr_atendimento_w,
		cd_estabelecimento_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		CALL sus_consiste_conta(nr_interno_conta_w, nr_atendimento_w, nm_usuario_p);
		
		ds_detalhe_w	:= wheb_mensagem_pck.get_texto(299742, 'NR_SEQ_PROTOCOLO= ' || nr_seq_protocolo_p ||
								';NR_ATENDIMENTO=' || nr_atendimento_w ||
								';NR_INTERNO_CONTA=' || nr_interno_conta_w);
		
		if (ie_funcao_p	= 'APAC') then
			/* Obter dados da APAC */

			begin
			select	nr_sequencia,
				nr_apac,
				cd_procedimento,
				ie_origem_proced,
				cd_cid_principal,
				cd_cid_secundario,
				cd_cid_causa_assoc,
				dt_competencia
			into STRICT	nr_seq_apac_w,
				nr_apac_w,
				cd_procedimento_apac_w,
				ie_origem_proc_apac_w,
				cd_cid_principal_w,
				cd_cid_secundario_w,
				cd_cid_causa_assoc_w,
				dt_competencia_apac_w
			from	sus_apac_unif
			where	nr_interno_conta	= nr_interno_conta_w
			and	nr_atendimento		= nr_atendimento_w;
			exception
				when others then
			/* 19 - Falta APAC para a conta, ou existe mais de uma APAC */

			if (Sus_Obter_Inco_Ativa(19)) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_w, 19, '', cd_estabelecimento_w, nm_usuario_p);
			end if;
			end;	
					
			/*  Obter dados do protocolo */
			select max(coalesce(b.dt_mesano_referencia,dt_competencia_apac_w))
			into STRICT	 dt_competencia_prot_w
			from	 protocolo_convenio b,
				 conta_paciente a
			where	 a.nr_seq_protocolo = b.nr_seq_protocolo
			and	 a.nr_interno_conta = nr_interno_conta_w;		
	
			/* 41 - Data de competencia da apac difere do protocolo */

			if (Sus_Obter_Inco_Ativa(41)) and (dt_competencia_prot_w IS NOT NULL AND dt_competencia_prot_w::text <> '') and (dt_competencia_apac_w IS NOT NULL AND dt_competencia_apac_w::text <> '') and (trunc(dt_competencia_apac_w,'month') <> trunc(dt_competencia_prot_w,'month')) then
				CALL sus_gravar_inconsistencia(nr_interno_conta_w, 41, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
			end if;
		else if (ie_funcao_p	= 'AIH') then
			begin
			Select	pr_cesariana_permitida
			into STRICT	pr_cesariana_permitida_w
			from	sus_parametros_aih
			where	cd_estabelecimento = cd_estabelecimento_w;
			exception
				when others then
					pr_cesariana_permitida_w := 100;
			end;

			begin
			Select 	sum(a.qt_procedimento)
			into STRICT 	qt_parto_normal_w
			from 	procedimento_paciente a,
				conta_paciente b
			where  	a.nr_interno_conta  	= b.nr_interno_conta
			and	b.nr_seq_protocolo	= nr_seq_protocolo_p
			and	a.cd_procedimento in (310010039, 310010047)
			and	coalesce(a.cd_motivo_exc_conta::text, '') = '';
			exception
				when others then
					qt_parto_normal_w := 0;
			end;			

			if (pr_cesariana_permitida_w <> 100) and (pr_cesariana_permitida_w > 0) 	then
				begin
				Select	sum(a.qt_procedimento)
				into STRICT 	qt_cesariana_w
				from 	procedimento_paciente a,
					conta_paciente b
				where  	a.nr_interno_conta  	= b.nr_interno_conta
				and	b.nr_seq_protocolo	= nr_seq_protocolo_p
				and (sus_validar_regra(33, a.cd_procedimento, a.ie_origem_proced,a.dt_procedimento) > 0)
				and	coalesce(a.cd_motivo_exc_conta::text, '') = '';
				exception
					when others then
						qt_cesariana_w := 0;
				end;
		
				qt_total_parto_w	:= (qt_cesariana_w + qt_parto_normal_w);
				if (qt_total_parto_w = 0) then
					qt_total_parto_w := 1;
				end if;	
				pr_cesariana_w	:= ((qt_cesariana_w * 100) /	qt_total_parto_w);
				
				if (Sus_Obter_Inco_Ativa(49)) and (pr_cesariana_w > pr_cesariana_permitida_w) then
					begin
					pr_sobra_w 	:= pr_cesariana_w - pr_cesariana_permitida_w;
					ds_detalhe_w 	:= ceil((qt_total_parto_w * pr_sobra_w)/100);
					CALL sus_gravar_inconsistencia(nr_interno_conta_w, 49, ds_detalhe_w, cd_estabelecimento_w, nm_usuario_p);
					end;
				end if;
			end if;
		end if;
		end if;
		end;
	END LOOP;
CLOSE C01;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sus_consiste_protocolo ( nr_seq_protocolo_p bigint, ie_funcao_p text, nm_usuario_p text) FROM PUBLIC;

