-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_gerar_contab_taxa_val_adic ( nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) AS $body$
DECLARE

				
	
pr_pagamento_liberado_w		double precision;
vl_contab_taxa_w			double precision;
vl_diferenca_w				double precision;
nr_seq_contab_w				pls_conta_copartic_contab.nr_sequencia%type;
vl_validacao_w				double precision;
nr_seq_conta_contab_taxa_w	pls_conta_pos_taxa_contab.nr_sequencia%type;
vl_taxa_manutencao_w		pls_conta_pos_estab_taxa.vl_taxa_manutencao%type;

C01 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type) FOR
	SELECT	max(a.nr_sequencia) nr_seq_conta_resumo,
		a.nr_seq_conta,
		sum(a.vl_lib_original) vl_lib_pagamento,
		a.nr_seq_conta_mat,
		a.nr_seq_conta_proc,
		a.nr_seq_prestador_pgto,
		max(a.nr_seq_participante) nr_seq_participante,
		sum(vl_hm) vl_hm,
		sum(vl_materiais_pag) vl_materiais_pag,
		sum(vl_co_pag) vl_co_pag,
		max(ie_tipo_item) ie_tipo_item
	from	pls_conta_medica_resumo a
	where	a.nr_seq_conta	= nr_seq_conta_pc 
	and	a.ie_tipo_item 	!= 'I'
	and	a.ie_situacao 	= 'A'
	--and	a.nr_seq_exame_coleta is null
	group by a.nr_seq_conta,
		 a.nr_seq_conta_mat,
		 a.nr_seq_conta_proc,
		 a.nr_seq_prestador_pgto;

C02 CURSOR(	nr_seq_conta_proc_pc	pls_conta_medica_resumo.nr_seq_conta_proc%type,
		nr_seq_conta_mat_pc	pls_conta_medica_resumo.nr_seq_conta_mat%type) FOR
	SELECT	a.nr_sequencia nr_seq_conta_estab_taxa,
		a.vl_taxa_manutencao,
		c.vl_liberado
	from	pls_conta_pos_estab_taxa	a,
		pls_conta_pos_estabelecido	b,
		pls_conta_proc			c
	where	a.nr_seq_conta_pos_estab	= b.nr_sequencia
	and	b.nr_seq_conta_proc		= c.nr_sequencia
	and	c.nr_sequencia			= nr_seq_conta_proc_pc
	and	b.ie_status_faturamento		!= 'A'
	
UNION ALL

	SELECT	a.nr_sequencia nr_seq_conta_estab_taxa,
		a.vl_taxa_manutencao,
		c.vl_liberado
	from	pls_conta_pos_estab_taxa	a,
		pls_conta_pos_estabelecido	b,
		pls_conta_mat			c
	where	a.nr_seq_conta_pos_estab	= b.nr_sequencia
	and	b.nr_seq_conta_mat		= c.nr_sequencia
	and	c.nr_sequencia			= nr_seq_conta_mat_pc
	and	b.ie_status_faturamento		!= 'A';

C03 CURSOR(nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type) FOR
	SELECT	nr_seq_pos_estab_taxa,
		sum(vl_taxa) vl_contab
	from	pls_conta_pos_taxa_contab
	where	nr_seq_conta	= nr_seq_conta_pc
	group by nr_seq_pos_estab_taxa;

C04 CURSOR(	nr_seq_conta_pc		pls_conta_medica_resumo.nr_seq_conta%type) FOR
	SELECT	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		null nr_seq_conta_mat,
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_proc_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_tipo_conta	= 'I'
	and	a.ie_status	!= 'M'
	
union all

	SELECT	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_mat_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_tipo_conta	= 'I'
	and	a.ie_status	!= 'M'
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_mat_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_status	= 'M'
	and	not exists (select	1
			    from	pls_conta_medica_resumo r
			    where	r.nr_seq_conta 		= a.nr_seq_conta
			    and		r.nr_seq_conta_mat 	= a.nr_sequencia)
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		null nr_seq_conta_mat,        
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_proc_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_status	= 'M'
	and	not exists (select	1
			    from	pls_conta_medica_resumo r
			    where	r.nr_seq_conta 		= a.nr_seq_conta
			    and		r.nr_seq_conta_proc 	= a.nr_sequencia)
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_mat_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_tipo_protocolo	= 'R'
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		null nr_seq_conta_mat,        
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_proc_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	a.ie_tipo_protocolo	= 'R'
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		null nr_seq_conta_mat,        
		a.nr_sequencia nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_proc_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	 exists (select	1
			    from	pls_conta_rec_resumo_item r,
						pls_rec_glosa_proc x
			    where	a.nr_sequencia		= x.nr_seq_conta_proc
			    and		x.nr_sequencia 	= r.nr_seq_proc_rec)
	
union all

	select	null nr_seq_conta_resumo,
		a.nr_seq_conta,
		a.vl_liberado vl_lib_pagamento,
		a.nr_sequencia nr_seq_conta_mat,        
		null nr_seq_conta_proc,
		null nr_seq_prestador_pgto
	from	pls_conta_mat_v a
	where	a.nr_seq_conta	= nr_seq_conta_pc
	and	 exists (select	1
			    from	pls_conta_rec_resumo_item r,
						pls_rec_glosa_mat x
			    where	a.nr_sequencia		= x.nr_seq_conta_mat
			    and		x.nr_sequencia 	= r.nr_seq_mat_rec);
				
BEGIN
for r_c01_w in C01(nr_seq_conta_p) loop
	begin
	
	for r_c02_w in C02(r_c01_w.nr_seq_conta_proc,r_c01_w.nr_seq_conta_mat) loop
		begin
		
		--Existem casos que não tem valor liberado, porém tem coparticipação, então o percentual de pagamento é 1
		if (r_c01_w.vl_lib_pagamento <> 0) then
			/* Obter o percentual do valor pago em relação ao liberado do item da conta médica */

			pr_pagamento_liberado_w	:= round((dividir_sem_round( r_c01_w.vl_lib_pagamento, r_c02_w.vl_liberado ))::numeric,10);
		else
			pr_pagamento_liberado_w	:= 1;
		end if;
		
		/* Aplicar o percentual obtido sobre o valor de coparticipação */

		vl_contab_taxa_w	:= round((r_c02_w.vl_taxa_manutencao * pr_pagamento_liberado_w)::numeric,2);
		
		nr_seq_conta_contab_taxa_w	:= null;
		
		select	max(nr_sequencia)
		into STRICT	nr_seq_conta_contab_taxa_w
		from	pls_conta_pos_taxa_contab
		where	nr_seq_conta		= nr_seq_conta_p
		and	nr_seq_conta_resumo 	= r_c01_w.nr_seq_conta_resumo;
			
		if (coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') and (coalesce(r_c01_w.nr_seq_conta_resumo::text, '') = '') then -- Não vai ter conta médica resumo apenas se a conta for de origem intercâmbio
			select	max(nr_sequencia)
			into STRICT	nr_seq_conta_contab_taxa_w
			from	pls_conta_pos_taxa_contab
			where	nr_seq_pos_estab_taxa	= r_c02_w.nr_seq_conta_estab_taxa;
		end if;
		
		if (coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
			insert into pls_conta_pos_taxa_contab(	nr_sequencia, dt_atualizacao, nm_usuario,
					dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_conta_resumo, 
					nr_seq_pos_estab_taxa,nr_seq_prestador_pgto,vl_taxa,nr_seq_conta,
					dt_competencia, vl_provisao)
			values (	nextval('pls_conta_pos_taxa_contab_seq'), clock_timestamp(), nm_usuario_p,
						clock_timestamp(), nm_usuario_p, r_c01_w.nr_seq_conta_resumo, 
						r_c02_w.nr_seq_conta_estab_taxa, r_c01_w.nr_seq_prestador_pgto, vl_contab_taxa_w,nr_seq_conta_p,
						trunc(clock_timestamp(),'MM'), vl_contab_taxa_w);
					
		else
			update	pls_conta_pos_taxa_contab
			set	nr_seq_conta_resumo	= r_c01_w.nr_seq_conta_resumo,
				vl_taxa		= vl_contab_taxa_w,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp(),
				dt_competencia = trunc(clock_timestamp(),'MM')
			where	nr_sequencia		= nr_seq_conta_contab_taxa_w;
			
		end if;
				
		end;
	end loop;
		
	end;
end loop;

for r_c04_w in C04(nr_seq_conta_p) loop
	begin

	for r_c02_w in C02(r_c04_w.nr_seq_conta_proc,r_c04_w.nr_seq_conta_mat) loop
		begin
		
		--Existem casos que não tem valor liberado, porém tem coparticipação, então o percentual de pagamento é 1
		if (r_c04_w.vl_lib_pagamento <> 0) then
			/* Obter o percentual do valor pago em relação ao liberado do item da conta médica */

			pr_pagamento_liberado_w	:= round((dividir_sem_round(r_c04_w.vl_lib_pagamento,r_c02_w.vl_liberado))::numeric,10);
		else
			pr_pagamento_liberado_w	:= 1;
		end if;
		
		/* Aplicar o percentual obtido sobre o valor de coparticipação */

		vl_contab_taxa_w	:= round((r_c02_w.vl_taxa_manutencao * pr_pagamento_liberado_w)::numeric,2);
		
		select	max(nr_sequencia)
		into STRICT	nr_seq_conta_contab_taxa_w
		from	pls_conta_pos_taxa_contab
		where	nr_seq_conta		= nr_seq_conta_p
		and	nr_seq_pos_estab_taxa	= r_c02_w.nr_seq_conta_estab_taxa;
		
		if (coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
			insert into pls_conta_pos_taxa_contab(	nr_sequencia, dt_atualizacao, nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
					nr_seq_pos_estab_taxa,vl_taxa,nr_seq_conta, 
					dt_competencia, vl_provisao)
			values (	nextval('pls_conta_pos_taxa_contab_seq'), clock_timestamp(), nm_usuario_p, clock_timestamp(), nm_usuario_p, 
					r_c02_w.nr_seq_conta_estab_taxa, vl_contab_taxa_w,nr_seq_conta_p,
					trunc(clock_timestamp(), 'MM'), vl_contab_taxa_w);
					
		else
			update	pls_conta_pos_taxa_contab
			set	vl_taxa		= vl_contab_taxa_w,
				nm_usuario	= nm_usuario_p,
				dt_atualizacao	= clock_timestamp(),
				dt_competencia = trunc(clock_timestamp(), 'MM')
			where	nr_sequencia	= nr_seq_conta_contab_taxa_w;
		
		end if;
				
		end;
	end loop;
		
	end;
end loop;

for r_c03_w in C03(nr_seq_conta_p) loop
	begin
	select	sum(vl_taxa_manutencao)
	into STRICT	vl_taxa_manutencao_w
	from	pls_conta_pos_estab_taxa
	where	nr_sequencia	= r_c03_w.nr_seq_pos_estab_taxa;
	
	if (coalesce(vl_taxa_manutencao_w,0)	!= coalesce(r_c03_w.vl_contab,0)) then
		vl_diferenca_w	:= coalesce(vl_taxa_manutencao_w,0) - coalesce(r_c03_w.vl_contab,0);
		
		if (vl_diferenca_w	> 0) then
			select	max(nr_sequencia)
			into STRICT	nr_seq_conta_contab_taxa_w
			from	pls_conta_pos_taxa_contab
			where	nr_seq_pos_estab_taxa	= r_c03_w.nr_seq_pos_estab_taxa
			and	vl_taxa			> vl_diferenca_w;
			
			if (coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_taxa_w
				from	pls_conta_pos_taxa_contab
				where	nr_seq_pos_estab_taxa	= r_c03_w.nr_seq_pos_estab_taxa;
			end if;
			
			update	pls_conta_pos_taxa_contab
			set 	vl_taxa		= coalesce(vl_taxa,0) + vl_diferenca_w,
					dt_competencia = trunc(clock_timestamp(), 'MM')
			where	nr_sequencia 	= nr_seq_conta_contab_taxa_w;
			
			select	sum(vl_taxa)
			into STRICT	vl_validacao_w
			from	pls_conta_pos_taxa_contab
			where	nr_seq_pos_estab_taxa	= r_c03_w.nr_seq_pos_estab_taxa;
			
			if (coalesce(vl_taxa_manutencao_w,0)	!= coalesce(vl_validacao_w,0)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(378414,	';VL_ADIC=' || vl_taxa_manutencao_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
										';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_POS_ESTAB_TAXA='||r_c03_w.nr_seq_pos_estab_taxa);

			end if;
		else
			
			select	max(nr_sequencia)
			into STRICT	nr_seq_conta_contab_taxa_w
			from	pls_conta_pos_taxa_contab
			where	nr_seq_pos_estab_taxa	= r_c03_w.nr_seq_pos_estab_taxa
			and	vl_taxa	> 0;
			
			if (coalesce(nr_seq_conta_contab_taxa_w::text, '') = '') then
				select	max(nr_sequencia)
				into STRICT	nr_seq_conta_contab_taxa_w
				from	pls_conta_pos_taxa_contab
				where	nr_seq_pos_estab_taxa	= r_c03_w.nr_seq_pos_estab_taxa;
			end if;
			
			if (vl_diferenca_w	> 0) THEN
				update	pls_conta_pos_taxa_contab
				set 	vl_taxa		= coalesce(vl_taxa,0) - vl_diferenca_w,
						dt_competencia = trunc(clock_timestamp(), 'MM')
				where	nr_sequencia 	= nr_seq_conta_contab_taxa_w;
								
			else
				update	pls_conta_pos_taxa_contab
				set 	vl_taxa		= coalesce(vl_taxa,0) + vl_diferenca_w,
						dt_competencia = trunc(clock_timestamp(), 'MM')
				where	nr_sequencia 	= nr_seq_conta_contab_taxa_w;
								
			end if;
				
			select	sum(vl_taxa)
			into STRICT	vl_validacao_w
			from	pls_conta_pos_taxa_contab
			where	nr_seq_pos_estab_taxa	= r_c03_w.nr_seq_pos_estab_taxa;
			
			if (coalesce(vl_taxa_manutencao_w,0)	!= coalesce(vl_validacao_w,0)) then
				CALL wheb_mensagem_pck.exibir_mensagem_abort(378414,	';VL_ADIC=' || vl_taxa_manutencao_w ||';' || 'VL_CONTABIL=' ||vl_validacao_w||
									';NR_SEQ_CONTA='||nr_seq_conta_p||';NR_SEQ_POS_ESTAB_TAXA='||r_c03_w.nr_seq_pos_estab_taxa);

			end if;
		end if;
	end if;
	
	end;
end loop;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_gerar_contab_taxa_val_adic ( nr_seq_conta_p pls_conta.nr_sequencia%type, nm_usuario_p usuario.nm_usuario%type) FROM PUBLIC;

