-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_oc_mat_autor_conv ( nr_sequencia_p bigint, nm_usuario_p text) AS $body$
DECLARE



/*Variaveis do mateiral/autorizacao */

nr_sequencia_autor_w		bigint;
cd_material_w			integer;
nr_sequencia_w			bigint;
qt_autorizada_w			double precision;
vl_unitario_w			double precision;
cd_cnpj_w			varchar(14);
cd_unidade_medida_w		varchar(30);

/*Variaveis do parametro de compras*/

cd_comprador_padrao_w		varchar(10);
cd_cond_pagto_padrao_w		bigint;
cd_moeda_padrao_w		bigint;
cd_local_fatur_direto_w		smallint;
cd_local_estoque_padrao_w	bigint;

/*Variaveis da ordem de compras*/

nr_ordem_compra_w		bigint;
cd_condicao_pagamento_w		bigint;
cd_pessoa_solicitante_w		varchar(10);
cd_comprador_w			varchar(10);
nr_item_w			integer;

/*Variaveis gerais/auxiliares*/

qt_existe_w			bigint;
cd_estabelecimento_w		smallint := wheb_usuario_pck.get_cd_estabelecimento;
nr_atendimento_w		bigint;


cd_conta_contabil_w		varchar(20);		
cd_centro_custo_w		integer;

/*Busca todos os itens que possuem valor e quantidade autorizada da autorizacao do fornecedor selecionado*/

c01 CURSOR FOR
SELECT	nr_sequencia,
	cd_material,
	qt_autorizada,
	vl_unitario
from	material_autorizado
where	nr_sequencia_autor 	= nr_sequencia_p
--and	cd_cgc_fabricante		= cd_cnpj_w

--and	qt_autorizada		> 0

--and	vl_unitario		> 0
and	ie_faturamento_direto = 'S'
and	coalesce(nr_ordem_compra::text, '') = '';


BEGIN
if (nr_sequencia_p > 0) then
	begin
	select	c.cd_cgc,
		b.nr_atendimento
	into STRICT	cd_cnpj_w,
		nr_atendimento_w
	from	autorizacao_convenio b,
		convenio c
	where	c.cd_convenio 	= b.cd_convenio
	and	b.nr_sequencia = nr_sequencia_p;

	/*Verifica se tem algum item, se tiver, gera a OC*/

	select	count(*)
	into STRICT	qt_existe_w
	from	material_autorizado
	where	nr_sequencia_autor 	= nr_sequencia_p
	--and	cd_cgc_fabricante		= cd_cnpj_w

	/*and	qt_autorizada		> 0
	and	vl_unitario		> 0*/
	and	coalesce(nr_ordem_compra::text, '') = '';
	
	if (qt_existe_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173299);
	end if;

	/*Busca valores padrao para os campos obrigatorios no parametro compras*/

	select	coalesce(max(cd_condicao_pagamento_padrao),0),
		coalesce(max(cd_moeda_padrao),0),
		coalesce(max(cd_comprador_padrao),0),
		coalesce(max(cd_local_fatur_direto),0),
		coalesce(max(cd_local_estoque_padrao),0)
	into STRICT	cd_cond_pagto_padrao_w,
		cd_moeda_padrao_w,
		cd_comprador_padrao_w,
		cd_local_fatur_direto_w,
		cd_local_estoque_padrao_w
	from	parametro_compras
	where	cd_estabelecimento = cd_estabelecimento_w;

	/*Busca condicao de pagamento padrao do fornecedor para o estabelecimento logado*/

	select	coalesce(max(cd_cond_pagto),cd_cond_pagto_padrao_w)
	into STRICT	cd_condicao_pagamento_w
	from	pessoa_juridica_estab
	where	cd_cgc = cd_cnpj_w
	and	cd_estabelecimento = cd_estabelecimento_w;
	
	if (cd_condicao_pagamento_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173300);
	end if;
	
	if (cd_moeda_padrao_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173301);
	end if;
	
	if (cd_local_fatur_direto_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(198440);
	end if;
	
	cd_pessoa_solicitante_w := substr(obter_pessoa_fisica_usuario(nm_usuario_p, 'C'),1,10);
	
	begin
	select	cd_pessoa_fisica
	into STRICT	cd_comprador_w
	from	comprador
	where	ie_situacao 		= 'A'
	and	cd_pessoa_fisica		= cd_pessoa_solicitante_w
	and	cd_estabelecimento 	= cd_estabelecimento_w  LIMIT 1;
	exception
	when others then
		cd_comprador_w := cd_comprador_padrao_w;
	end;
	
	if (coalesce(cd_comprador_w,'X') = 'X') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(173302);
	end if;

	select	nextval('ordem_compra_seq')
	into STRICT	nr_ordem_compra_w
	;
	
	update	autorizacao_convenio
	set	nr_ordem_compra   = nr_ordem_compra_w,
		dt_atualizacao 	= clock_timestamp(),
		nm_usuario	= nm_usuario_p
	where	nr_sequencia = nr_sequencia_p;
	
	insert into ordem_compra(nr_ordem_compra,
				cd_estabelecimento,
				cd_cgc_fornecedor,
				cd_condicao_pagamento,
				cd_comprador,
				dt_ordem_compra,
				dt_atualizacao,
				nm_usuario,
				cd_moeda,
				ie_situacao,
				dt_inclusao,
				cd_pessoa_solicitante,
				ie_frete,
				dt_entrega,
				ie_aviso_chegada,
				ie_emite_obs,
				ie_urgente,
				ie_tipo_ordem,
				vl_frete,
				pr_juros_negociado,
				vl_desconto,
				pr_desc_pgto_antec,
				cd_local_entrega,
				nr_atendimento)
			values (	nr_ordem_compra_w,
				cd_estabelecimento_w,
				cd_cnpj_w,
				cd_condicao_pagamento_w,
				cd_comprador_w,
				clock_timestamp(),
				clock_timestamp(),
				nm_usuario_p,
				cd_moeda_padrao_w,
				'A',
				clock_timestamp(),
				cd_pessoa_solicitante_w,
				'C',
				clock_timestamp(),
				'N',
				'S',
				'N',
				'V',
				0,
				0,
				0,
				0,
				cd_local_estoque_padrao_w,
				nr_atendimento_w);
	open C01;
	loop
	fetch C01 into	
		nr_sequencia_w,
		cd_material_w,
		qt_autorizada_w,
		vl_unitario_w;
	EXIT WHEN NOT FOUND; /* apply on C01 */
		begin
		select	cd_unidade_medida_compra
		into STRICT	cd_unidade_medida_w
		from	material
		where	cd_material = cd_material_w;
		
		SELECT * FROM define_conta_material(
				cd_estabelecimento_w, cd_material_w, 2, 0, 0, 0, 0, 0, 0, 0, cd_local_fatur_direto_w, 0, trunc(clock_timestamp()), cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;
		
		select	coalesce(max(nr_item_oci),0) + 1
		into STRICT	nr_item_w
		from	ordem_compra_item
		where	nr_ordem_compra = nr_ordem_compra_w;
	
		insert into ordem_compra_item(	nr_ordem_compra,
						nr_item_oci,
						cd_material,
						cd_unidade_medida_compra,
						vl_unitario_material,
						qt_material,
						qt_original,
						dt_atualizacao,
						nm_usuario,
						ie_situacao,
						cd_pessoa_solicitante,
						pr_descontos,
						pr_desc_financ,
						vl_desconto,
						cd_centro_custo,
						cd_conta_contabil,
						cd_local_estoque,
						vl_total_item,
						cd_sequencia_parametro)
					values ( nr_ordem_compra_w,
						nr_item_w,
						cd_material_w,
						cd_unidade_medida_w,
						vl_unitario_w,
						qt_autorizada_w,
						qt_autorizada_w,
						clock_timestamp(),
						nm_usuario_p,
						'A',
						cd_pessoa_solicitante_w,
						0,
						0,
						0,
						cd_centro_custo_w,
						cd_conta_contabil_w,
						cd_local_fatur_direto_w,
						round((qt_autorizada_w * vl_unitario_w)::numeric,4),
						philips_contabil_pck.get_parametro_conta_contabil);
						
		update	material_autorizado
		set	nr_ordem_compra 	= nr_ordem_compra_w,
			nr_item_oci	= nr_item_w,
			dt_atualizacao 	= clock_timestamp(),
			nm_usuario	= nm_usuario_p
		where	nr_sequencia	= nr_sequencia_w;
		end;
	end loop;
	close C01;
	
	commit;
	end;
end if;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_oc_mat_autor_conv ( nr_sequencia_p bigint, nm_usuario_p text) FROM PUBLIC;

