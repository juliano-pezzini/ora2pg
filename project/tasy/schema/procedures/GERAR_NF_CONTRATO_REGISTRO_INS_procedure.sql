-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_nf_contrato_registro_ins ( nr_seq_registro_p bigint, nr_nota_fiscal_p nota_fiscal.nr_nota_fiscal%type, cd_serie_nf_P text, cd_operacao_nota_p bigint, cd_natureza_operacao_p bigint, cd_condicao_pagto_p bigint, dt_emissao_p timestamp, cd_setor_digitacao_p bigint, cd_local_estoque_p bigint, nr_sequencia_p INOUT bigint, nm_usuario_p text, nr_danfe_p text, cd_estabelecimento_p bigint) AS $body$
DECLARE


-- Estabelecimento
cd_cgc_estabelecimento_w			varchar(14);
cd_estabelecimento_w			smallint;
qt_registros_w				bigint;
-- UF do estado
sg_estado_fornec_w			pessoa_juridica.sg_estado%type;
sg_estado_estab_w				pessoa_juridica.sg_estado%type;

-- Cursor C02 Itens da inspecao
cd_cgc_emitente_w			varchar(14);
cd_pessoa_fisica_w			varchar(10);
cd_condicao_pagamento_w			bigint;
cd_material_w				integer;
cd_unidade_medida_compra_w		varchar(30);
cd_unidade_medida_estoque_w		varchar(30);
vl_unitario_item_nf_w			double precision := 0;
qt_prevista_entrega_w			double precision;
cd_local_estoque_w			integer;
nr_seq_contrato_w				bigint;

-- Inspecao Recebimento
nr_seq_inspecao_w				bigint;
qt_item_estoque_w				double precision := 0;
qt_conv_compra_estoque_w			material.qt_conv_compra_estoque%type;
cd_material_estoque_w				material.cd_material_estoque%type;

-- Parametro de Compras;
cd_natureza_operacao_w			smallint;
cd_natureza_operacao_ne_w			smallint;
cd_natureza_operacao_fe_w			smallint;
cd_condicao_pagamento_padrao_w		bigint;

-- Contrato
ds_objeto_contrato_w			contrato.ds_objeto_contrato%type;

-- Itens da NOTA
nr_item_nf_w				integer;
nr_sequencia_nf_w            			bigint;

-- Conta Financeira do material
nr_seq_conta_financeira_w			bigint	:= null;
cd_centro_custo_w				integer;
ie_tipo_conta_w				integer 	:= 2;
cd_conta_contabil_w			varchar(20)	:= null;
cd_conta_contabil_ww			varchar(20)	:= null;
cd_conta_ordem_w				varchar(20)	:= null;
cd_centro_conta_w				integer;

-- Item Lote
qt_registro_lote_w				integer;

-- Cursor C03 Itens Lote
dt_validade_lote_w				timestamp;
dt_fabricacao_w				timestamp;
ds_lote_fornecedor_w			varchar(20);
qt_material_lote_w				double precision;
nr_seq_marca_w				bigint;
ie_indeterminada_w				varchar(1);
cd_barra_material_w			inspecao_recebimento_lote.cd_barra_material%type;
ds_barras_w				varchar(4000);
qt_existe_w				bigint;
nr_seq_regra_contrato_w			inspecao_recebimento.nr_seq_regra_contrato%type;
nr_seq_proj_rec_w			projeto_recurso.nr_sequencia%type;

cd_sequencia_parametro_w nota_fiscal_item.cd_sequencia_parametro%type;


c01 CURSOR FOR
	SELECT	nr_sequencia
	from	inspecao_recebimento
	where	nr_seq_registro = nr_seq_registro_p;

c02 CURSOR FOR
	SELECT	a.cd_cgc,
		a.cd_pessoa_fisica,
		(obter_dados_pf_pj_estab(cd_estabelecimento_w ,null,a.cd_cgc,'ECP'))::numeric  cd_condicao_pagamento,
		a.cd_material,
		substr(obter_dados_material_estab(a.cd_material,cd_estabelecimento_w,'UMC'),1,30) cd_unidade_medida_compra,
		substr(obter_dados_material_estab(a.cd_material,cd_estabelecimento_w,'UME'),1,30) cd_unidade_medida_estoque,
		coalesce(a.vl_unitario_material,0),
		coalesce(a.qt_inspecao,0),
		(CASE WHEN cd_local_estoque_p=0 THEN null  ELSE cd_local_estoque_p END )::numeric ,
		a.nr_seq_contrato,
		a.nr_seq_regra_contrato
	from	inspecao_recebimento a
	where	nr_sequencia = nr_seq_inspecao_w
	and	(a.nr_seq_contrato IS NOT NULL AND a.nr_seq_contrato::text <> '');

c03 CURSOR FOR
	SELECT	b.dt_validade,
		b.dt_fabricacao,
		b.cd_lote_fabricacao,
		b.qt_material,
		b.nr_seq_marca,
		ie_indeterminada,
		b.cd_barra_material,
		b.ds_barras
	from	inspecao_recebimento_lote b,
		inspecao_recebimento a
	where	a.nr_sequencia = b.nr_seq_inspecao
	and	nr_seq_inspecao = nr_seq_inspecao_w;


BEGIN

select	cd_estabelecimento
into STRICT	cd_estabelecimento_w
from	inspecao_registro
where	nr_sequencia = nr_seq_registro_p;

select	coalesce(max(cd_nat_oper_compra_ne),1102),
	coalesce(max(cd_nat_oper_compra_fe),2102),
	max(cd_condicao_pagamento_padrao)
into STRICT	cd_natureza_operacao_ne_w,
	cd_natureza_operacao_fe_w,
	cd_condicao_pagamento_padrao_w
from	parametro_compras
where	cd_estabelecimento	= cd_estabelecimento_w;

select	a.cd_cgc,
	b.sg_estado
into STRICT	cd_cgc_estabelecimento_w,
	sg_estado_estab_w
from	estabelecimento a,
	pessoa_juridica b
where	a.cd_estabelecimento 	= cd_estabelecimento_w
and	a.cd_cgc			= b.cd_cgc;

select	count(*)
into STRICT	qt_registros_w
from	inspecao_recebimento
where	nr_seq_registro = nr_seq_registro_p
and	(nr_seq_contrato IS NOT NULL AND nr_seq_contrato::text <> '');

if (qt_registros_w = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(821671);
end if;

select	nextval('nota_fiscal_seq')
into STRICT	nr_sequencia_p
;

open c01;
loop
fetch c01 into	
	nr_seq_inspecao_w;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin

	open C02;
	loop
	fetch C02 into	
		cd_cgc_emitente_w,
		cd_pessoa_fisica_w,
		cd_condicao_pagamento_w,
		cd_material_w,
		cd_unidade_medida_compra_w,
		cd_unidade_medida_estoque_w,
		vl_unitario_item_nf_w,
		qt_prevista_entrega_w,
		cd_local_estoque_w,
		nr_seq_contrato_w,
		nr_seq_regra_contrato_w;
	EXIT WHEN NOT FOUND; /* apply on C02 */
		begin
		cd_sequencia_parametro_w := null;
		if (coalesce(nr_seq_contrato_w,0) <> 0) then
			select	a.ds_objeto_contrato
			into STRICT	ds_objeto_contrato_w
			from	contrato a
			where	a.nr_sequencia = nr_seq_contrato_w;
		end if;

		cd_natureza_operacao_w := cd_natureza_operacao_ne_w;
		
		if (coalesce(cd_condicao_pagto_p,0) <> 0) then
			cd_condicao_pagamento_w := cd_condicao_pagto_p;
		end if;

		if (coalesce(cd_condicao_pagamento_w::text, '') = '') then
			cd_condicao_pagamento_w := cd_condicao_pagamento_padrao_w;
		end if;

		if (coalesce(cd_condicao_pagamento_w::text, '') = '') then
			/*(-20011,	'Nao encontrada nenhuma condicao de pagamento para geracao da Nota Fiscal.' || chr(13) || chr(10) ||
							'Informe no cadastro de Pessoa Juridica ou nos Parametros de Compras.');*/
							
			CALL wheb_mensagem_pck.exibir_mensagem_abort(180484);
		end if;

		if (cd_cgc_emitente_w IS NOT NULL AND cd_cgc_emitente_w::text <> '') then
			select	sg_estado
			into STRICT	sg_estado_fornec_w
			from	pessoa_juridica
			where	cd_cgc = cd_cgc_emitente_w;
			if (sg_estado_fornec_w <> sg_estado_estab_w) then
				cd_natureza_operacao_w := cd_natureza_operacao_fe_w;
			end if;
		end if;

		select (coalesce(max(nr_sequencia_nf),0)+1)
		into STRICT nr_sequencia_nf_w
		from nota_fiscal
		where cd_estabelecimento = cd_estabelecimento_w
		and nr_nota_fiscal = nr_nota_fiscal_p
		and cd_serie_nf = cd_serie_nf_p
		and (cd_cgc_emitente = coalesce(cd_cgc_emitente_w,cd_cgc_estabelecimento_w)
		or cd_pessoa_fisica = cd_pessoa_fisica_w);

		select	count(*)
		into STRICT	qt_existe_w
		from	nota_fiscal
		where	nr_sequencia = nr_sequencia_p;

		if (qt_existe_w = 0) then
		
			CALL consiste_nota_mesmo_numero(cd_estabelecimento_w, cd_cgc_emitente_w,cd_pessoa_fisica_w,cd_serie_nf_p,nr_nota_fiscal_p,nm_usuario_p);
		
			insert into nota_fiscal(
				cd_estabelecimento,			cd_cgc_emitente,
				cd_serie_nf,				nr_nota_fiscal,
				nr_sequencia_nf,				cd_operacao_nf,
				dt_emissao,				dt_entrada_saida,
				ie_acao_nf,				ie_emissao_nf,
				ie_tipo_frete,				vl_mercadoria,
				vl_total_nota,				qt_peso_bruto,
				qt_peso_liquido,				dt_atualizacao,
				nm_usuario,				cd_condicao_pagamento,
				cd_cgc,
				cd_natureza_operacao,
				ie_situacao,				nr_sequencia,
				cd_pessoa_fisica,				ie_tipo_nota,
				cd_setor_digitacao,				nm_usuario_nrec,
				dt_atualizacao_nrec,			nr_contrato,
				ds_observacao,					nr_danfe)
			values (	cd_estabelecimento_w,			cd_cgc_emitente_w,
				cd_serie_nf_p,				nr_nota_fiscal_p,
				nr_sequencia_nf_w,			cd_operacao_nota_p,
				coalesce(dt_emissao_p, trunc(clock_timestamp())),		clock_timestamp(),
				'1',					'0',
				'F',					0,
				0,					0,
				0,					clock_timestamp(),
				nm_usuario_p,				cd_condicao_pagamento_w,
				cd_cgc_emitente_w,
				CASE WHEN cd_natureza_operacao_p=0 THEN  cd_natureza_operacao_w  ELSE cd_natureza_operacao_p END ,
				'1',					nr_sequencia_p,
				cd_pessoa_fisica_w,			CASE WHEN coalesce(cd_pessoa_fisica_w::text, '') = '' THEN  'EN'  ELSE 'EF' END ,
				cd_setor_digitacao_p,			nm_usuario_p,
				clock_timestamp(),					nr_seq_contrato_w,
				wheb_mensagem_pck.get_Texto(310510, 'NR_SEQ_REGISTRO_P='|| NR_SEQ_REGISTRO_P),	nr_danfe_p);
				/*Nota gerada pelo registro da inspecao: #@NR_SEQ_REGISTRO_P#@*/

				
		end if;

		select (coalesce(max(nr_item_nf),0)+1)
		into STRICT	nr_item_nf_w
		from	nota_fiscal_item
		where 	nr_sequencia = nr_sequencia_p;

		nr_seq_conta_financeira_w := obter_conta_financeira(	'S', cd_estabelecimento_w, cd_material_w, null, null, null, null, cd_cgc_emitente_w, cd_centro_custo_w, nr_seq_conta_financeira_w, null, cd_operacao_nota_p, null, null, null, null, null, null, null, null, null, null, cd_local_estoque_w, null, null, null, null, null, null);

		if (nr_seq_conta_financeira_w = 0) then
			nr_seq_conta_financeira_w := null;
		end if;

		ie_tipo_conta_w	:= 3;
		if (coalesce(cd_centro_custo_w::text, '') = '') then
			ie_tipo_conta_w	:= 2;
		end if;

		SELECT * FROM define_conta_material(
				cd_estabelecimento_w, cd_material_w, ie_tipo_conta_w, 0, 0, 0, 0, 0, 0, 0, cd_local_estoque_w, cd_operacao_nota_p, trunc(clock_timestamp()), cd_conta_contabil_ww, cd_centro_conta_w, null) INTO STRICT cd_conta_contabil_ww, cd_centro_conta_w;
				
		cd_sequencia_parametro_w := philips_contabil_pck.get_parametro_conta_contabil();

		cd_conta_contabil_w := cd_conta_contabil_ww;
		if (coalesce(cd_conta_contabil_ww, 'X') = 'X') then
			cd_conta_contabil_w := cd_conta_ordem_w;
			cd_sequencia_parametro_w:= null;
		end if;
		
		if (nr_seq_regra_contrato_w > 0) then
			select	nr_seq_proj_rec
			into STRICT	nr_seq_proj_rec_w
			from	contrato_regra_nf
			where	nr_sequencia = nr_seq_regra_contrato_w;		
		end if;
		
		begin
        
		select qt_conv_compra_estoque,
			cd_material_estoque
		into STRICT qt_conv_compra_estoque_w,
			cd_material_estoque_w
		from	material
		where	cd_material = cd_material_w;
		exception
			when no_data_found or too_many_rows then
				qt_conv_compra_estoque_w := 1;
				cd_material_estoque_w := null;
		end;
		
		if (cd_unidade_medida_compra_w = coalesce(cd_unidade_medida_estoque_w, cd_unidade_medida_compra_w))then
			qt_item_estoque_w	:= qt_prevista_entrega_w;
		else
			qt_item_estoque_w	:= qt_prevista_entrega_w * qt_conv_compra_estoque_w;
		end if;

		insert into nota_fiscal_item(
			cd_estabelecimento,			cd_cgc_emitente,
			cd_serie_nf,				nr_nota_fiscal,
			nr_sequencia_nf,				nr_item_nf,
			cd_natureza_operacao,			qt_item_nf,
			vl_unitario_item_nf,				vl_total_item_nf,
			dt_atualizacao,				nm_usuario,
			vl_frete,					vl_desconto,
			vl_despesa_acessoria,			cd_material,
			cd_local_estoque,				ds_observacao,
			cd_unidade_medida_compra,			cd_unidade_medida_estoque,
			cd_conta_contabil,				vl_desconto_rateio,
			vl_seguro,				nr_sequencia,
			vl_liquido,					nr_seq_conta_financ,
			nr_contrato,				nr_seq_inspecao,
			nr_seq_regra_contrato,			nr_seq_proj_rec,
			cd_sequencia_parametro,			qt_item_estoque,
			cd_material_estoque)
		values (	cd_estabelecimento_w,			coalesce(cd_cgc_emitente_w,cd_cgc_estabelecimento_w),
			cd_serie_nf_p,				nr_nota_fiscal_p,
			nr_sequencia_nf_w,			nr_item_nf_w,
			CASE WHEN cd_natureza_operacao_p=0 THEN  cd_natureza_operacao_w  ELSE cd_natureza_operacao_p END ,			qt_prevista_entrega_w,
			vl_unitario_item_nf_w,			(qt_prevista_entrega_w * vl_unitario_item_nf_w),
			clock_timestamp(),					nm_usuario_p,
			0,					0,
			0,					cd_material_w,
			cd_local_estoque_w,			wheb_mensagem_pck.get_Texto(310522, 'NR_SEQ_REGISTRO_P='|| NR_SEQ_REGISTRO_P), /*'Item gerado pelo registro da inspecao: ' || to_char(nr_seq_registro_p),*/
			cd_unidade_medida_compra_w,		cd_unidade_medida_estoque_w,
			cd_conta_contabil_w,			0,
			0,					nr_sequencia_p,
			(qt_prevista_entrega_w * vl_unitario_item_nf_w),	nr_seq_conta_financeira_w,
			nr_seq_contrato_w,				nr_seq_inspecao_w,
			nr_seq_regra_contrato_w,		nr_seq_proj_rec_w,
			cd_sequencia_parametro_w,		coalesce(qt_item_estoque_w,0),
			cd_material_estoque_w);
		commit;
		
		update	inspecao_recebimento
		set	nr_nota_fiscal 	   = nr_nota_fiscal_p,
			nr_seq_nota_fiscal = nr_sequencia_p,
			nr_seq_item_nf	   = nr_item_nf_w
		where	nr_sequencia 	   = nr_seq_inspecao_w;
		
		select	count(*)
		into STRICT	qt_registro_lote_w
		from	inspecao_recebimento_lote
		where	nr_seq_inspecao = nr_seq_inspecao_w;

		open c03;
		loop
		fetch c03 into
			dt_validade_lote_w,
			dt_fabricacao_w,
			ds_lote_fornecedor_w,
			qt_material_lote_w,
			nr_seq_marca_w,
			ie_indeterminada_w,
			cd_barra_material_w,
			ds_barras_w;
		EXIT WHEN NOT FOUND; /* apply on c03 */
			begin
			if (qt_registro_lote_w > 1) or (nr_seq_marca_w IS NOT NULL AND nr_seq_marca_w::text <> '') then
				insert into nota_fiscal_item_lote(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					nr_seq_nota,
					nr_item_nf,
					dt_validade,
					qt_material,
					cd_lote_fabricacao,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_marca,
					nr_seq_lote_fornec,
					ie_indeterminado,
					cd_barra_material,
					ds_barras,
					dt_fabricacao)
				values (	nextval('nota_fiscal_item_lote_seq'),
					clock_timestamp(),
					nm_usuario_p,
					nr_sequencia_p,
					nr_item_nf_w,
					dt_validade_lote_w,
					qt_material_lote_w,
					ds_lote_fornecedor_w,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_marca_w,
					null,
					ie_indeterminada_w,
					cd_barra_material_w,
					ds_barras_w,
					dt_fabricacao_w);
			else
				update	nota_fiscal_item
				set	dt_validade		= dt_validade_lote_w,
					cd_lote_fabricacao		= ds_lote_fornecedor_w,
					ie_indeterminado		= ie_indeterminada_w,
					cd_barra_material		= cd_barra_material_w,
					ds_barras			= ds_barras_w,
					dt_fabricacao		= dt_fabricacao_w
				where	nr_sequencia 		= nr_sequencia_p
				and	nr_item_nf 		= nr_item_nf_w;
			end if;
			end;
		end loop;
		close c03;

		end;
	end loop;
	close C02;
	end;
end loop;
close c01;

select	count(*)
into STRICT	qt_registros_w
from	nota_fiscal
where	nr_sequencia = nr_sequencia_p;

if (qt_registros_w > 0) then
	update	inspecao_registro
	set	nr_seq_nf 	= nr_sequencia_p
	where	nr_sequencia	= nr_seq_registro_p;
		
	CALL gerar_historico_nota_fiscal(nr_sequencia_p, nm_usuario_p, '19', wheb_mensagem_pck.get_Texto(310510, 'NR_SEQ_REGISTRO_P='|| NR_SEQ_REGISTRO_P));
								/*'Nota gerada pelo registro da inspecao: ' || nr_seq_registro_p*/

end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_nf_contrato_registro_ins ( nr_seq_registro_p bigint, nr_nota_fiscal_p nota_fiscal.nr_nota_fiscal%type, cd_serie_nf_P text, cd_operacao_nota_p bigint, cd_natureza_operacao_p bigint, cd_condicao_pagto_p bigint, dt_emissao_p timestamp, cd_setor_digitacao_p bigint, cd_local_estoque_p bigint, nr_sequencia_p INOUT bigint, nm_usuario_p text, nr_danfe_p text, cd_estabelecimento_p bigint) FROM PUBLIC;

