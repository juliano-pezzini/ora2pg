-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE sup_gerar_movto_unitarizacao ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, nm_computador_p text default '') AS $body$
DECLARE

			
			
nr_seq_lote_origem_w		bigint;
dt_validade_origem_w		timestamp;
cd_material_w			integer;
dt_validade_unit_w		timestamp;
nr_seq_marca_w			bigint;
nr_sequencia_nf_w		bigint;
nr_nota_fiscal_w		varchar(255);
nr_item_nf_w			integer;
ds_observacao_w			varchar(255);
ds_observacao_unit_w		varchar(255);

cd_oper_entr_unitarizacao_w		parametro_estoque.cd_oper_entr_unitarizacao%type;
cd_oper_saida_unitarizacao_w	parametro_estoque.cd_oper_saida_unitarizacao%type;
cd_operacao_perda_w		smallint;
			
ie_tipo_processo_w			varchar(15);
qt_material_w			double precision;
qt_material_ww			double precision;

ie_calculo_validade_w		varchar(1);
dt_validade_w			timestamp;

cd_cgc_fornec_w			varchar(14);
ds_lote_fornec_w			varchar(20);
ds_lote_fornec_unit_w			varchar(20);
ie_validade_indeterminada_w		varchar(1);
nr_digito_verif_w			smallint;

nr_sequencia_w			bigint;
nr_sequencia_ww			bigint;
cd_unidade_medida_w		varchar(30);
cd_unidade_medida_estoque_w	varchar(30);

cd_conta_contabil_w		varchar(20);
cd_centro_custo_w			integer;
cd_setor_atendimento_w		integer;
cd_local_estoque_w		smallint;
nm_computador_w			varchar(80);
nr_seq_computador_w		bigint;
nr_solic_unitarizacao_w		bigint;
ie_bloqueia_lote_w			varchar(1);
ds_titulo_historico_lote_w  material_lote_fornec_hist.ds_titulo%type;
ds_historico_lote_w  material_lote_fornec_hist.ds_historico%type;
			
c01 CURSOR FOR
SELECT	nr_sequencia,
	ie_tipo_processo,
	qt_material
from	item_unitarizacao
where	nr_seq_unitarizacao = nr_sequencia_p
and	coalesce(nr_seq_motivo_perda::text, '') = '';

c02 CURSOR FOR
SELECT	qt_material
from	item_unitarizacao
where	nr_seq_unitarizacao = nr_sequencia_p
and	(nr_seq_motivo_perda IS NOT NULL AND nr_seq_motivo_perda::text <> '');


BEGIN

ie_bloqueia_lote_w := obter_valor_param_usuario(143, 392, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p);

if (coalesce(nr_sequencia_p,0) = 0) then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(184570);
end if;

if (coalesce(nm_computador_p,'NULL') = 'NULL') then
	begin
	nm_computador_w	:= upper(substr(wheb_usuario_pck.get_nm_estacao,1,80));
	
	if (nm_computador_w = 'CONSOLE') then
		nm_computador_w := upper(substr(wheb_usuario_pck.get_nm_maquina,1,80));
	end if;

	if (coalesce(nm_computador_w::text, '') = '') then
		nm_computador_w := upper(substr(wheb_usuario_pck.get_machine,1,80));
	end if;
	end;
else
	nm_computador_w	:= nm_computador_p;
end if;
	
begin
select	nr_sequencia,
	cd_setor_atendimento
into STRICT	nr_seq_computador_w,
	cd_setor_atendimento_w
from	COMPUTADOR
where	nm_computador_pesquisa  = padronizar_nome(upper(nm_computador_w))
and	cd_estabelecimento = cd_estabelecimento_p;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(184568,'NM_COMPUTADOR='||nm_computador_w);
end;	

select	max(b.nr_sequencia),
	max(b.cd_local_estoque_destino),
	max(a.dt_validade_lote),
	max(a.ds_observacao)
into STRICT	nr_solic_unitarizacao_w,
	cd_local_estoque_w,
	dt_validade_unit_w,
	ds_observacao_unit_w
from	unitarizacao a,
	solic_unitarizacao b
where	b.nr_sequencia = a.nr_solic_unitarizacao
and	a.nr_sequencia = nr_sequencia_p;

if (coalesce(cd_local_estoque_w::text, '') = '') then
	begin
	select	coalesce(max(cd_local_estoque),0)
	into STRICT	cd_local_estoque_w
	from   	local_estoque_computador
	where  	nr_seq_computador = nr_seq_computador_w;

	if (cd_local_estoque_w = 0) then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(184569,'NM_COMPUTADOR='||nm_computador_w);
	end if;
	end;
end if;

ie_calculo_validade_w	:= 'S';

select	b.nr_seq_lote_fornec,
	b.cd_unidade_medida,
	a.ds_lote_fornec
into STRICT	nr_seq_lote_origem_w,
	cd_unidade_medida_w,
	ds_lote_fornec_unit_w
from	unitarizacao a,
	solic_unitarizacao b
where	a.nr_solic_unitarizacao = b.nr_sequencia
and	a.nr_sequencia = nr_sequencia_p;

select	cd_material,
	dt_validade,
	ie_validade_indeterminada,
	cd_cgc_fornec,
	ds_lote_fornec,
	nr_seq_marca,
	nr_sequencia_nf,
	nr_item_nf,
	nr_nota_fiscal,
	ds_observacao
into STRICT	cd_material_w,
	dt_validade_origem_w,
	ie_validade_indeterminada_w,
	cd_cgc_fornec_w,
	ds_lote_fornec_w,
	nr_seq_marca_w,
	nr_sequencia_nf_w,
	nr_item_nf_w,
	nr_nota_fiscal_w,
	ds_observacao_w
from	material_lote_fornec
where	nr_sequencia = nr_seq_lote_origem_w;

if (ds_lote_fornec_unit_w IS NOT NULL AND ds_lote_fornec_unit_w::text <> '') then
	ds_lote_fornec_w := ds_lote_fornec_unit_w;
end if;

if (ds_observacao_unit_w IS NOT NULL AND ds_observacao_unit_w::text <> '') then
	ds_observacao_w := ds_observacao_unit_w;
end if;

select	cd_unidade_medida_estoque
into STRICT	cd_unidade_medida_estoque_w
from	material
where	cd_material = cd_material_w;

begin
select	coalesce(cd_oper_entr_unitarizacao,cd_oper_producao),
	coalesce(cd_oper_saida_unitarizacao,cd_oper_baixa_producao),
	cd_oper_perda_cons
into STRICT	cd_oper_entr_unitarizacao_w,
	cd_oper_saida_unitarizacao_w,
	cd_operacao_perda_w
from	parametro_estoque
where	cd_estabelecimento = cd_estabelecimento_p;
exception
when others then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(184571);
end;

select	max(cd_centro_custo)
into STRICT	cd_centro_custo_w
from	setor_atendimento
where	cd_setor_atendimento = cd_setor_atendimento_w;

SELECT * FROM define_conta_material(	
	cd_estabelecimento_p, cd_material_w, '2', null, cd_setor_atendimento_w, null, null, null, null, null, cd_local_estoque_w, null, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, null) INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

open c01;
loop
fetch c01 into	
	nr_sequencia_ww,
	ie_tipo_processo_w,
	qt_material_ww;
EXIT WHEN NOT FOUND; /* apply on c01 */
	begin
	qt_material_w := obter_quantidade_convertida(cd_material_w, qt_material_ww, cd_unidade_medida_w, 'UME');
	
	if (coalesce(dt_validade_unit_w::text, '') = '') then
		if (ie_calculo_validade_w = 'S') and (ie_tipo_processo_w = 'A') and (dt_validade_origem_w IS NOT NULL AND dt_validade_origem_w::text <> '') then
			dt_validade_w := obter_val_lote_prod(cd_estabelecimento_p, cd_material_w, dt_validade_origem_w);
		else
			dt_validade_w := dt_validade_origem_w;
		end if;
	else	
		dt_validade_w := dt_validade_unit_w;
	end if;
	
	select	nextval('material_lote_fornec_seq')
	into STRICT	nr_sequencia_w
	;
	nr_digito_verif_w	:= calcula_digito('MODULO11',nr_sequencia_w);
	
	insert into material_lote_fornec(
		nr_sequencia,
		nr_digito_verif,
		ds_lote_fornec,
		dt_validade,
		dt_validade_original,
		ie_validade_indeterminada,
		cd_cgc_fornec,
		cd_material,
		qt_material,
		ie_situacao,
		cd_estabelecimento,
		dt_atualizacao,
		dt_atualizacao_nrec,
		nm_usuario,
		nm_usuario_nrec,
		nr_seq_item_unitarizacao,
		IE_ORIGEM_LOTE,
		nr_seq_marca,
		nr_sequencia_nf,
		nr_item_nf,
		nr_nota_fiscal,
		ds_observacao)
	values (nr_sequencia_w,
		nr_digito_verif_w,
		ds_lote_fornec_w,
		dt_validade_w,
		dt_validade_w,
		ie_validade_indeterminada_w,
		cd_cgc_fornec_w,
		cd_material_w,
		qt_material_w,
		'A',
		cd_estabelecimento_p,
		clock_timestamp(),
		clock_timestamp(),
		nm_usuario_p,
		nm_usuario_p,
		nr_sequencia_ww,
		'U',
		nr_seq_marca_w,
		nr_sequencia_nf_w,
		nr_item_nf_w,
		nr_nota_fiscal_w,
		ds_observacao_w);
	
	insert into material_lote_fornec_nf(nr_sequencia, dt_atualizacao, nm_usuario,
		dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_lote_fornec,
		nr_sequencia_nf, nr_item_nf)
	SELECT	nextval('material_lote_fornec_nf_seq'),clock_timestamp(),nm_usuario_p,
		clock_timestamp(),nm_usuario_p,nr_sequencia_w,
		nr_sequencia_nf,nr_item_nf
	from	material_lote_fornec_nf
	where	nr_sequencia = nr_seq_lote_origem_w;
		
	if (ie_bloqueia_lote_w = 'S') then

		ds_titulo_historico_lote_w := wheb_mensagem_pck.get_Texto(1154669);
		ds_historico_lote_w := wheb_mensagem_pck.get_Texto(1154668);

		CALL sup_alterar_bloqueio_lote(nr_sequencia_w,nm_usuario_p);

		CALL gerar_historico_lote_fornec(nm_usuario_p,nr_sequencia_w,ds_titulo_historico_lote_w,ds_historico_lote_w);

		CALL gerar_comunic_bloq_lote_fornec(nm_usuario_p,cd_estabelecimento_p,nr_sequencia_w);

	end if;
		
	insert into movimento_estoque(
		nr_movimento_estoque,
		cd_estabelecimento,
		cd_local_estoque,
		dt_movimento_estoque,
		cd_operacao_estoque,
		cd_acao,
		cd_material,
		dt_mesano_referencia,
		qt_movimento,
		dt_atualizacao,
		nm_usuario,
		ie_origem_documento,
		nr_documento,
		nr_sequencia_item_docto,
		cd_unidade_medida_estoque,
		cd_setor_atendimento,
		qt_estoque,
		cd_centro_custo,
		cd_unidade_med_mov,
		cd_fornecedor,
		nr_seq_tab_orig,
		nr_seq_lote_fornec,
		cd_lote_fabricacao,
		dt_validade,		
		cd_conta_contabil)
	values (	nextval('movimento_estoque_seq'),
		cd_estabelecimento_p,
		cd_local_estoque_w,
		clock_timestamp(),
		cd_oper_entr_unitarizacao_w,
		'1',
		cd_material_w,
		clock_timestamp(),
		qt_material_ww,
		clock_timestamp(),
		nm_usuario_p,
		'18',
		nr_solic_unitarizacao_w,
		null,
		cd_unidade_medida_estoque_w,
		cd_setor_atendimento_w,
		qt_material_w,
		cd_centro_custo_w,
		cd_unidade_medida_w,
		null,
		nr_sequencia_p,
		nr_sequencia_w,
		ds_lote_fornec_w,
		dt_validade_w,
		cd_conta_contabil_w);
		
	insert into movimento_estoque(
		nr_movimento_estoque,
		cd_estabelecimento,
		cd_local_estoque,
		dt_movimento_estoque,
		cd_operacao_estoque,
		cd_acao,
		cd_material,
		dt_mesano_referencia,
		qt_movimento,
		dt_atualizacao,
		nm_usuario,
		ie_origem_documento,
		nr_documento,
		nr_sequencia_item_docto,
		cd_unidade_medida_estoque,
		cd_setor_atendimento,
		qt_estoque,
		cd_centro_custo,
		cd_unidade_med_mov,
		cd_fornecedor,
		nr_seq_tab_orig,
		nr_seq_lote_fornec,
		cd_lote_fabricacao,
		dt_validade,		
		cd_conta_contabil)
	values (	nextval('movimento_estoque_seq'),
		cd_estabelecimento_p,
		cd_local_estoque_w,
		clock_timestamp(),
		cd_oper_saida_unitarizacao_w,
		'1',
		cd_material_w,
		clock_timestamp(),
		qt_material_ww,
		clock_timestamp(),
		nm_usuario_p,
		'18',
		nr_solic_unitarizacao_w,
		null,
		cd_unidade_medida_estoque_w,
		cd_setor_atendimento_w,
		qt_material_w,
		cd_centro_custo_w,
		cd_unidade_medida_w,
		null,
		nr_sequencia_p,
		nr_seq_lote_origem_w,
		ds_lote_fornec_w,
		dt_validade_w,
		cd_conta_contabil_w);
	end;
end loop;
close c01;

open c02;
loop
fetch c02 into	
	qt_material_ww;
EXIT WHEN NOT FOUND; /* apply on c02 */
	begin
	qt_material_w := obter_quantidade_convertida(cd_material_w, qt_material_ww, cd_unidade_medida_w, 'UME');
		
	insert into movimento_estoque(
		nr_movimento_estoque,
		cd_estabelecimento,
		cd_local_estoque,
		dt_movimento_estoque,
		cd_operacao_estoque,
		cd_acao,
		cd_material,
		dt_mesano_referencia,
		qt_movimento,
		dt_atualizacao,
		nm_usuario,
		ie_origem_documento,
		nr_documento,
		nr_sequencia_item_docto,
		cd_unidade_medida_estoque,
		cd_setor_atendimento,
		qt_estoque,
		cd_centro_custo,
		cd_unidade_med_mov,
		cd_fornecedor,
		nr_seq_tab_orig,
		nr_seq_lote_fornec,
		cd_lote_fabricacao,
		dt_validade,		
		cd_conta_contabil)
	values (	nextval('movimento_estoque_seq'),
		cd_estabelecimento_p,
		cd_local_estoque_w,
		clock_timestamp(),
		cd_operacao_perda_w,
		'1',
		cd_material_w,
		clock_timestamp(),
		qt_material_ww,
		clock_timestamp(),
		nm_usuario_p,
		'18',
		nr_solic_unitarizacao_w,
		null,
		cd_unidade_medida_estoque_w,
		cd_setor_atendimento_w,
		qt_material_w,
		cd_centro_custo_w,
		cd_unidade_medida_w,
		null,
		nr_sequencia_p,
		nr_seq_lote_origem_w,
		ds_lote_fornec_w,
		dt_validade_origem_w,
		cd_conta_contabil_w);
	end;
end loop;
close c02;

update	unitarizacao
set	dt_geracao_lote = clock_timestamp()
where	nr_sequencia = nr_sequencia_p;

commit;
end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE sup_gerar_movto_unitarizacao ( nr_sequencia_p bigint, cd_estabelecimento_p bigint, nm_usuario_p text, nm_computador_p text default '') FROM PUBLIC;

