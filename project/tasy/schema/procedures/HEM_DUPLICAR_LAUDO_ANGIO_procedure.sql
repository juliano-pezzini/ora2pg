-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE hem_duplicar_laudo_angio (nr_seq_laudo_p bigint, nr_seq_proc_p bigint, nm_usuario_p text) AS $body$
DECLARE


ds_observacao_coro_w		varchar(2000);
nr_seq_coro_w			bigint;
nr_seq_prox_coro_w		bigint;
nr_seq_vaso_w			bigint;
nr_seq_segmento_w		bigint;
nr_seq_lesao_w			hem_lesao.nr_sequencia%type;
ds_lesao_w			hem_lesao.ds_lesao%type;
ie_lesao_culpada_w		hem_lesao.ie_lesao_culpada%type;
ds_observacao_w			hem_lesao.ds_observacao%type;
nr_seq_lesao_origem_w		hem_lesao.nr_sequencia%type;


C01 CURSOR FOR
	SELECT	nr_sequencia,
		ds_lesao,
		ie_lesao_culpada,
		ds_observacao
	from	hem_lesao
	where	nr_seq_proc = nr_seq_laudo_p
	order by ds_lesao;

C02 CURSOR FOR
	SELECT	nr_sequencia,
		nr_seq_vaso,
		nr_seq_segmento
	from 	hem_coronariografia
	where 	nr_seq_lesao = nr_seq_lesao_origem_w;


BEGIN

	if (coalesce(nr_seq_laudo_p,0) > 0) then

		insert into hem_proc_medic(
			nr_sequencia,
			dt_atualizacao,
			nm_usuario,
			nr_seq_medic,
			ie_uso_medic,
			nr_seq_proc,
                        qt_dose,
                        cd_unidade_medida,
                        ie_via_aplicacao
		)(
		SELECT	nextval('hem_proc_medic_seq'),
			clock_timestamp(),
			nm_usuario_p,
			nr_seq_medic,
			ie_uso_medic,
			nr_seq_proc_p,
                        qt_dose,
                        cd_unidade_medida,
                        ie_via_aplicacao
		from	hem_proc_medic
		where	nr_seq_proc = nr_seq_laudo_p
		);

		insert into hem_observacao_laudo(
				nr_sequencia,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				ds_observacao_laudo,
				nr_seq_proc
		)(
		SELECT	nextval('hem_observacao_laudo_seq'),
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				ds_observacao_laudo,
				nr_seq_proc_p
		from	hem_observacao_laudo
		where	nr_seq_proc = nr_seq_laudo_p
		);

		open C01;
		loop
		fetch C01 into
			nr_seq_lesao_origem_w,
			ds_lesao_w,
			ie_lesao_culpada_w,
			ds_observacao_w;
		EXIT WHEN NOT FOUND; /* apply on C01 */
			begin

				select 	nextval('hem_lesao_seq')
				into STRICT	nr_seq_lesao_w
				;

				insert into hem_lesao(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					ds_lesao,
					nr_seq_proc,
					ie_lesao_culpada,
					ds_observacao
				) values (
					nr_seq_lesao_w,
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					ds_lesao_w,
					nr_seq_proc_p,
					ie_lesao_culpada_w,
					ds_observacao_w);

				open C02;
				loop
				fetch C02 into
					nr_seq_coro_w,
					nr_seq_vaso_w,
					nr_seq_segmento_w;
				EXIT WHEN NOT FOUND; /* apply on C02 */
					begin

					select 	nextval('hem_coronariografia_seq')
					into STRICT	nr_seq_prox_coro_w
					;

					insert into hem_coronariografia(
						nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_proc,
						nr_seq_vaso,
						nr_seq_segmento,
						nr_seq_lesao
					) values (
						nr_seq_prox_coro_w,
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_proc_p,
						nr_seq_vaso_w,
						nr_seq_segmento_w,
						nr_seq_lesao_w
					);

					insert into hem_coron_localizacao(
						nr_sequencia,
						dt_atualizacao,
						nm_usuario,
						dt_atualizacao_nrec,
						nm_usuario_nrec,
						nr_seq_coron,
						nr_seq_segmento
					)(
					SELECT 	nextval('hem_coron_localizacao_seq'),
						clock_timestamp(),
						nm_usuario_p,
						clock_timestamp(),
						nm_usuario_p,
						nr_seq_prox_coro_w,
						nr_seq_segmento
					from	hem_coron_localizacao
					where	nr_seq_coron = nr_seq_coro_w
					);

					end;
				end loop;
				close C02;

				insert into hem_cat_lesao(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					qt_timi_inic,
					ie_calcificacao,
					ie_extensao,
					nr_seq_diam_trepano,
					ie_oclusao_cronica,
					ie_bifurcacao,
					ie_placa_ulcerada,
					cd_medina,
					ie_trombo,
					nr_seq_tecnica,
					ie_tortuosidade,
					ie_kissing,
					nr_seq_reestenose,
					ie_tipo,
					ie_disseccao,
					ie_stent,
					ie_lesao_atc,
					nr_seq_lesao
				)(
				SELECT 	nextval('hem_cat_lesao_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					qt_timi_inic,
					ie_calcificacao,
					ie_extensao,
					nr_seq_diam_trepano,
					ie_oclusao_cronica,
					ie_bifurcacao,
					ie_placa_ulcerada,
					cd_medina,
					ie_trombo,
					nr_seq_tecnica,
					ie_tortuosidade,
					ie_kissing,
					nr_seq_reestenose,
					ie_tipo,
					ie_disseccao,
					ie_stent,
					ie_lesao_atc,
					nr_seq_lesao_w
				from	hem_cat_lesao
				where	nr_seq_lesao = nr_seq_lesao_origem_w
				);

				insert into hem_atc_balao(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_balao,
					qt_diam_pre_dilat,
					qt_comp_pre_dilat,
					qt_diametro,
					qt_comprimento,
					qt_diam_pos_dilat,
					qt_comp_pos_dilat,
					ie_utilizacao,
					ie_kissing_balloon,
					nr_seq_lesao
				)(
				SELECT	nextval('hem_atc_balao_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_balao,
					qt_diam_pre_dilat,
					qt_comp_pre_dilat,
					qt_diametro,
					qt_comprimento,
					qt_diam_pos_dilat,
					qt_comp_pos_dilat,
					ie_utilizacao,
					ie_kissing_balloon,
					nr_seq_lesao_w
				from	hem_atc_balao
				where	nr_seq_lesao = nr_seq_lesao_origem_w
				);

				insert into hem_coro_disp_adjunto(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					nr_seq_disp_adjunto,
					nr_seq_lesao
				)(
				SELECT 	nextval('hem_coro_disp_adjunto_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					nr_seq_disp_adjunto,
					nr_seq_lesao_w
				from	hem_coro_disp_adjunto
				where	nr_seq_lesao = nr_seq_lesao_origem_w
				);

				insert 	into	hem_atc(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					dt_atualizacao_nrec,
					nm_usuario_nrec,
					qt_fluxo_timi,
					ie_sucesso,
					nr_seq_sucesso,
					ie_dilatacao,
					nr_seq_lesao,
                                        qt_timi_inicial,
                                        nr_seq_complicacao
				)(
				SELECT	nextval('hem_atc_seq'),
					clock_timestamp(),
					nm_usuario_p,
					clock_timestamp(),
					nm_usuario_p,
					qt_fluxo_timi,
					ie_sucesso,
					nr_seq_sucesso,
					ie_dilatacao,
					nr_seq_lesao_w,
                                        qt_timi_inicial,
                                        nr_seq_complicacao
				from	hem_atc
				where	nr_seq_lesao = nr_seq_lesao_origem_w
				);

				insert into hem_atc_quant(
					nr_sequencia,
					dt_atualizacao,
					nm_usuario,
					ie_qca,
					qt_diametro_lum_pre,
					qt_diametro_lum_pos,
					qt_diametro_ref_prox_pre,
					qt_diametro_ref_prox_pos,
					pr_estenose_pre,
					pr_estenose_pos,
					nr_seq_lesao
				)(
				SELECT	nextval('hem_atc_quant_seq'),
					clock_timestamp(),
					nm_usuario_p,
					ie_qca,
					qt_diametro_lum_pre,
					qt_diametro_lum_pos,
					qt_diametro_ref_prox_pre,
					qt_diametro_ref_prox_pos,
					pr_estenose_pre,
					pr_estenose_pos,
					nr_seq_lesao_w
				from	hem_atc_quant
				where	nr_seq_lesao = nr_seq_lesao_origem_w
				);

			end;
		end loop;
		close C01;

	end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE hem_duplicar_laudo_angio (nr_seq_laudo_p bigint, nr_seq_proc_p bigint, nm_usuario_p text) FROM PUBLIC;

