-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE ctb_reatualizar_saldo ( nr_seq_mes_p ctb_mes_ref.nr_sequencia%type, cd_estabelecimento_p lote_contabil.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ds_erro_p INOUT text) AS $body$
DECLARE

/*
===============================================================================
Purpose: Indentacao

Remarks: n/a

Who         When            What
----------  -----------     --------------------------------------------------

dmsluniere  18/mar/2022     OS 2871719 - Indentacao

===============================================================================
*/
nr_seq_mes_ant_w                   ctb_mes_ref.nr_sequencia%type;
cd_empresa_w                       ctb_mes_ref.cd_empresa%type;
dt_referencia_w                    ctb_mes_ref.dt_referencia%type;
dt_abertura_w                      ctb_mes_ref.dt_abertura%type;
dt_fechamento_w                    ctb_mes_ref.dt_fechamento%type;
ds_log_estab_w                     varchar(255);
ds_erro_w                          varchar(4000);
qt_contador_w                      bigint := 0;
ds_exception_w                     varchar(4000);
ie_contab_contas_w                 varchar(1);
dt_ref_fim_w                       timestamp;
cd_estab_ativo_w                   ctb_saldo.cd_estabelecimento%type;
ie_not_const                       constant      varchar(01) := 'N';
ie_yes_const                       constant      varchar(01) := 'S';
ie_x_const                         constant      varchar(01) := 'X';
ie_e_const                         constant      varchar(01) := 'E';
ie_month_const                     constant      varchar(05) := 'month';
ie_mask_const                      constant      varchar(07) := 'mm/yyyy';
nm_reatualizar_saldo_const         constant      varchar(30) := 'CTB_REATUALIZAR_SALDO';
nm_virada_saldo_const              constant      varchar(30) := 'CTB_VIRADA_SALDO';
nm_consistir_lote_const            constant      varchar(30) := 'CTB_CONSISTIR_LOTE';
nm_atualizar_saldo_const           constant      varchar(30) := 'CTB_ATUALIZAR_SALDO';
ie_ds_erro_const                   constant      varchar(08) := 'DS_ERRO=';
ie_limit_loop_const                constant      integer(04)  := 1000;
cd_log_const                       constant      integer(04)  := 1001;
tam_subst_const                    constant      integer(04)  := 2000;
msg_448772                         constant      integer(06)  := 448772;
msg_281478                         constant      integer(06)  := 281478;
msg_281477                         constant      integer(06)  := 281477;
msg_281476                         constant      integer(06)  := 281476;
msg_281475                         constant      integer(06)  := 281475;
msg_281473                         constant      integer(06)  := 281473;
msg_281470                         constant      integer(06)  := 281470;
msg_281467                         constant      integer(06)  := 281467;
msg_228229                         constant      integer(06)  := 228229;
msg_207399                         constant      integer(06)  := 207399;
msg_207401                         constant      integer(06)  := 207401;
msg_281466                         constant      integer(06)  := 281466;
msg_281468                         constant      integer(06)  := 281468;



c01 CURSOR FOR
  SELECT  nr_lote_contabil
  from    lote_contabil
  where   nr_seq_mes_ref     = nr_seq_mes_p
  and     cd_estabelecimento = coalesce(cd_estabelecimento_p, cd_estabelecimento);

type c01_type is table of c01%rowtype;
c01_regs_w    c01_type;

BEGIN
CALL gravar_processo_longo(               ds_operacao_p        => wheb_mensagem_pck.get_texto(msg_281466),
                                     nm_procedure_p       => nm_reatualizar_saldo_const,
                                     qt_processada_p      => qt_contador_w
                                     );
begin
    select  cd_empresa,
            dt_referencia,
            dt_abertura,
            dt_fechamento
    into STRICT    cd_empresa_w,
            dt_referencia_w,
            dt_abertura_w,
            dt_fechamento_w
    from    ctb_mes_ref a
    where   nr_sequencia  = nr_seq_mes_p;
exception
when no_data_found then
     ds_exception_w   := SUBSTR(sqlerrm, 1, tam_subst_const);
     CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_mensagem_erro_p => ds_exception_w);
when too_many_rows then
     ds_exception_w   := SUBSTR(sqlerrm, 1, tam_subst_const);
     CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_mensagem_erro_p => ds_exception_w);
end;

if (coalesce(dt_abertura_w::text, '') = '')  then

    CALL wheb_mensagem_pck.exibir_mensagem_abort(msg_207401);

end if;

if (dt_fechamento_w IS NOT NULL AND dt_fechamento_w::text <> '') then

    CALL wheb_mensagem_pck.exibir_mensagem_abort(msg_207399);

end if;

begin
    select  coalesce(max(nr_sequencia),0)
    into STRICT    nr_seq_mes_ant_w
    from    ctb_mes_ref
    where   cd_empresa  = cd_empresa_w
    and     pkg_date_utils.start_of(dt_referencia,ie_month_const,0) = pkg_date_utils.start_of(pkg_date_utils.add_month(dt_referencia_w, -1,0), ie_month_const,0);
exception
when no_data_found then
     ds_exception_w   := SUBSTR(sqlerrm, 1, tam_subst_const);
     CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_mensagem_erro_p => ds_exception_w);
when too_many_rows then
     ds_exception_w   := SUBSTR(sqlerrm, 1, tam_subst_const);
     CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_mensagem_erro_p => ds_exception_w);
end;

if (nr_seq_mes_ant_w = 0) then

    CALL wheb_mensagem_pck.exibir_mensagem_abort(msg_228229);

end if;

ds_log_estab_w := null;

if (coalesce(cd_estabelecimento_p, 0) > 0) then

    ds_log_estab_w  := wheb_mensagem_pck.get_texto(msg_281467) || cd_estabelecimento_p;

end if;

begin
    insert into ctb_log(
                cd_log,
                ds_log,
                nm_usuario,
                dt_atualizacao)
    values (     cd_log_const,
                wheb_mensagem_pck.get_texto(msg_281468) || to_char(dt_referencia_w,ie_mask_const) || ds_log_estab_w,
                nm_usuario_p,
                clock_timestamp());
exception
when access_into_null then
     ds_exception_w   := SUBSTR(sqlerrm, 1, tam_subst_const);
     CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_mensagem_erro_p => ds_exception_w);
when unique_violation then
     ds_exception_w   := SUBSTR(sqlerrm, 1, tam_subst_const);
     CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_mensagem_erro_p => ds_exception_w);
when others then
     ds_exception_w   := SUBSTR(sqlerrm, 1, tam_subst_const);
     CALL wheb_mensagem_pck.exibir_mensagem_abort(ds_mensagem_erro_p => ds_exception_w);
end;

if (nr_seq_mes_ant_w > 0) then
    begin

    qt_contador_w := qt_contador_w + 1;

    CALL gravar_processo_longo(           ds_operacao_p        => wheb_mensagem_pck.get_texto(msg_281470),
                                     nm_procedure_p       => nm_reatualizar_saldo_const,
                                     qt_processada_p      => qt_contador_w
                                     );

    delete 
    from    ctb_saldo
    where   nr_seq_mes_ref      = nr_seq_mes_p
    and     cd_estabelecimento  = coalesce(cd_estabelecimento_p, cd_estabelecimento);
    commit;

    qt_contador_w := qt_contador_w + 1;

    CALL gravar_processo_longo(           ds_operacao_p        => wheb_mensagem_pck.get_texto(msg_281473),
                                     nm_procedure_p       => nm_reatualizar_saldo_const,
                                     qt_processada_p      => qt_contador_w
                                     );

    update  lote_contabil
    set     dt_atualizacao_saldo  = NULL,
            dt_consistencia       = NULL,
            dt_processo           = NULL,
            nm_usuario           = nm_usuario_p,
            dt_atualizacao       = clock_timestamp()
    where   nr_seq_mes_ref       = nr_seq_mes_p
    and     cd_estabelecimento   = coalesce(cd_estabelecimento_p, cd_estabelecimento);
    commit;

    qt_contador_w := qt_contador_w + 1;

    CALL gravar_processo_longo(           ds_operacao_p        => wheb_mensagem_pck.get_texto(msg_281475),
                                     nm_procedure_p       => nm_virada_saldo_const,
                                     qt_processada_p      => qt_contador_w
                                     );
   
    CALL ctb_virada_saldo(                nr_seq_mes_ref_p     => nr_seq_mes_ant_w, 
                                     cd_estabelecimento_p => cd_estabelecimento_p, 
                                     nm_usuario_p         => nm_usuario_p
                                     );

    CALL philips_contabil_pck.set_ie_consistindo_lote(ie_yes_const);

    if (coalesce(cd_estabelecimento_p,0) = 0) then
        
        CALL philips_contabil_pck.set_ie_reat_saldo(ie_e_const);

        update  ctb_movimento
        set     ds_consistencia      = NULL
        where   nr_seq_mes_ref      = nr_seq_mes_p
        and     (ds_consistencia IS NOT NULL AND ds_consistencia::text <> '');
        commit;
        
        update  ctb_movimento
        set     nr_agrup_sequencial = 0
        where   nr_seq_mes_ref      = nr_seq_mes_p
        and     coalesce(nr_seq_agrupamento::text, '') = '';
        commit;

    end if;


    open c01;
    loop
    fetch c01 bulk collect into c01_regs_w limit ie_limit_loop_const;

        $if dbms_db_version.version = 10 $then
            for  i in c01_regs_w.first .. c01_regs_w.last loop
                update ctb_movimento
                set    dt_atualizacao_saldo  = NULL
                where  nr_lote_contabil     = c01_regs_w[i].nr_lote_contabil
                and    (dt_atualizacao_saldo IS NOT NULL AND dt_atualizacao_saldo::text <> '');
            end loop;
        $else
            forall i in c01_regs_w.first .. c01_regs_w.last
                update ctb_movimento
                set    dt_atualizacao_saldo  = NULL
                where  nr_lote_contabil     = c01_regs_w[i].nr_lote_contabil
                and    (dt_atualizacao_saldo IS NOT NULL AND dt_atualizacao_saldo::text <> '');
        $end

        for m in 1..c01_regs_w.count loop
          
            ds_erro_w                := null;
            qt_contador_w            := qt_contador_w + 1;

            CALL gravar_processo_longo(   ds_operacao_p        => wheb_mensagem_pck.get_texto(msg_281476)  || c01_regs_w[m].nr_lote_contabil,
                                     nm_procedure_p       => nm_consistir_lote_const,
                                     qt_processada_p      => qt_contador_w
                                     );
                        
            ds_erro_p            => ds_erro_w := ds_erro_p            => ds_erro_w := ctb_consistir_lote(      nr_lote_contabil_p   => c01_regs_w[m].nr_lote_contabil, ds_erro_p            => ds_erro_w, nm_usuario_p         => nm_usuario_p
                                     );
            commit;

			CALL philips_contabil_pck.set_ie_consistindo_lote(ie_yes_const);

            if (coalesce(ds_erro_w, ie_x_const) = ie_x_const) then

                CALL gravar_processo_longo(       
                                     ds_operacao_p        => wheb_mensagem_pck.get_texto(msg_281477)  || c01_regs_w[m].nr_lote_contabil, 
                                     nm_procedure_p       => nm_atualizar_saldo_const,
                                     qt_processada_p      => qt_contador_w
                                     );
                
                ds_erro_p            => ds_erro_w := ds_erro_p            => ds_erro_w := ctb_atualizar_saldo(
                                     nr_lote_contabil_p   => c01_regs_w[m].nr_lote_contabil, ie_acumular_p        => ie_not_const, nm_usuario_p         => nm_usuario_p, ie_virada_p          => ie_not_const, ds_erro_p            => ds_erro_w, ie_consistir_p       => ie_not_const
                                     );

                commit;

            end if;

        end loop;
        commit;

    EXIT WHEN NOT FOUND; /* apply on c01 */
    end loop;
    close c01;

    --"Contabilizar contas contabeis sem movimentacao no mes selecionado"
    ie_contab_contas_w := obter_param_usuario(923, 126, obter_perfil_ativo, nm_usuario_p, cd_estabelecimento_p, ie_contab_contas_w);
    cd_estab_ativo_w := obter_estabelecimento_ativo;

    if (ie_contab_contas_w = 'S') then

        dt_ref_fim_w := fim_mes(dt_referencia_w);

        begin
        insert into ctb_saldo(
            nr_sequencia,
            nr_seq_mes_ref,
            dt_atualizacao,
            nm_usuario,
            cd_estabelecimento,
            cd_conta_contabil,
            cd_centro_custo,
            vl_debito,
            vl_encerramento,
            vl_credito,
            vl_movimento,
            vl_saldo,
            vl_enc_debito,
            vl_enc_credito,
            vl_eliminacao,
            cd_classificacao,
            cd_classif_sup,
            nr_nivel_conta,
            vl_ordem,
            vl_ord_debito,
            vl_ord_credito)
        SELECT
            nextval('ctb_saldo_seq'),
            nr_seq_mes_p,
            clock_timestamp(),
            nm_usuario_p,
            coalesce(cd_estabelecimento_p,cd_estab_ativo_w),
            a.cd_conta_contabil,
            null,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            substr(ctb_obter_classif_conta(a.cd_conta_contabil, a.cd_classificacao, dt_ref_fim_w),1,40),
            substr(ctb_obter_classif_conta_sup(substr(ctb_obter_classif_conta(a.cd_conta_contabil, a.cd_classificacao,dt_ref_fim_w),1,40), dt_ref_fim_w, cd_empresa_w),1,40),
            ctb_obter_nivel_classif_conta(substr(ctb_obter_classif_conta(a.cd_conta_contabil, a.cd_classificacao, dt_ref_fim_w),1,40)),
            0,
            0,
            0
        from    conta_contabil a
        where   1 = 1
        and     substr(obter_se_conta_vigente2(a.cd_conta_contabil, a.dt_inicio_vigencia, a.dt_fim_vigencia, dt_ref_fim_w),1, 1) = 'S'
        and     a.cd_empresa = cd_empresa_w
        and     a.ie_situacao = 'A'
        and     a.ie_tipo = 'A'
        and not exists (
                SELECT  1
                from    ctb_saldo c
                where   c.cd_conta_contabil     = a.cd_conta_contabil
                and     c.cd_estabelecimento    = coalesce(cd_estabelecimento_p,cd_estab_ativo_w)
                and     c.nr_seq_mes_ref        = nr_seq_mes_p)
;
        exception
            when no_data_found then
                ds_erro_w   := sqlerrm(SQLSTATE);
                CALL wheb_mensagem_pck.exibir_mensagem_abort(269638,'DS_ERRO='||ds_erro_w);
            when others then
                ds_erro_w   := sqlerrm(SQLSTATE);
                CALL wheb_mensagem_pck.exibir_mensagem_abort(269638,'DS_ERRO='||ds_erro_w);
        end;
    end if;

        CALL philips_contabil_pck.set_ie_consistindo_lote(ie_not_const);

        qt_contador_w := qt_contador_w + 1;
        CALL gravar_processo_longo(       ds_operacao_p        => wheb_mensagem_pck.get_texto(msg_281478),
                                     nm_procedure_p       => nm_reatualizar_saldo_const,
                                     qt_processada_p      => qt_contador_w
                                     );

        ds_erro_p            => ds_erro_w
                                      := ctb_acumular_saldo(          nr_seq_mes_ref_p     => nr_seq_mes_p, cd_estabelecimento_p => cd_estabelecimento_p, nm_usuario_p         => nm_usuario_p, ds_erro_p            => ds_erro_w
                                     );

        CALL philips_contabil_pck.set_ie_reat_saldo(ie_not_const);
    exception
    when access_into_null then
        CALL philips_contabil_pck.set_ie_reat_saldo(ie_not_const);
        CALL philips_contabil_pck.set_ie_consistindo_lote(ie_not_const);
        ds_exception_w := substr(sqlerrm,1,tam_subst_const);
        CALL wheb_mensagem_pck.exibir_mensagem_abort(
                                    nr_seq_mensagem_p     => msg_448772,
                                    vl_macros_p           => ie_ds_erro_const||ds_exception_w 
                                    );
    when unique_violation then
        CALL philips_contabil_pck.set_ie_reat_saldo(ie_not_const);
        CALL philips_contabil_pck.set_ie_consistindo_lote(ie_not_const);
        ds_exception_w := substr(sqlerrm,1,tam_subst_const);
        CALL wheb_mensagem_pck.exibir_mensagem_abort(
                                    nr_seq_mensagem_p     => msg_448772,
                                    vl_macros_p           => ie_ds_erro_const||ds_exception_w 
                                    );
    when others then
        CALL philips_contabil_pck.set_ie_reat_saldo(ie_not_const);
        CALL philips_contabil_pck.set_ie_consistindo_lote(ie_not_const);
        ds_exception_w := substr(sqlerrm,1,tam_subst_const);
        CALL wheb_mensagem_pck.exibir_mensagem_abort(
                                    nr_seq_mensagem_p     => msg_448772,
                                    vl_macros_p           => ie_ds_erro_const||ds_exception_w
                                    );
    end;

end if;

CALL philips_contabil_pck.set_ie_reat_saldo(ie_not_const);
commit;

ds_erro_p := ds_erro_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE ctb_reatualizar_saldo ( nr_seq_mes_p ctb_mes_ref.nr_sequencia%type, cd_estabelecimento_p lote_contabil.cd_estabelecimento%type, nm_usuario_p usuario.nm_usuario%type, ds_erro_p INOUT text) FROM PUBLIC;

