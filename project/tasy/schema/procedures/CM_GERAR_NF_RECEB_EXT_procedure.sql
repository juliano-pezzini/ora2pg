-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE cm_gerar_nf_receb_ext ( cd_cgc_cliente_p text, cd_pf_cliente_p text, nr_nota_fiscal_p text, cd_serie_nf_p text, cd_operacao_nf_p bigint, cd_natureza_nf_p bigint, cd_cond_pagto_p bigint, cd_local_estoque_p bigint, nr_receb_externo_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_nota_gerada_p INOUT bigint) AS $body$
DECLARE


nr_sequencia_w			bigint;
cd_cgc_w			varchar(14);

cd_operacao_estoque_w		integer;
ie_tipo_local_w			varchar(5);
ie_tipo_conta_w			smallint;

nr_seq_item_envio_w		bigint;
nr_seq_item_w			bigint;
ds_lote_w			varchar(30);
dt_validade_w			timestamp;

nr_item_w			bigint;
cd_unidade_estoque_w		varchar(30);
cd_material_estoque_w		integer;
cd_conta_contabil_w		varchar(20);
cd_centro_custo_w		bigint;
ie_indeterminado_w		varchar(1);
nr_seq_conjunto_w		bigint;
cd_material_w			integer;
qt_existe_w			integer;
qt_conj_receb_w			integer;
nr_receb_externo_w		bigint;

c01 CURSOR FOR
	SELECT	nr_seq_conjunto,
		qt_conj_receb
	from	cm_receb_externo_conj
	where	nr_seq_receb_externo = nr_receb_externo_p
	group by nr_seq_conjunto,
		qt_conj_receb;

c02 CURSOR FOR
	SELECT	nr_sequencia
	from	cm_receb_externo
	where	dt_documento between inicio_dia(dt_inicial_p) and fim_dia(dt_final_p)
	and	(dt_lib_entrega IS NOT NULL AND dt_lib_entrega::text <> '')
	and	coalesce(nr_seq_nota::text, '') = ''
	and	(((coalesce(cd_cgc_cliente_p,0) <> 0) and (cd_cnpj = cd_cgc_cliente_p)) or
		((coalesce(cd_pf_cliente_p,0) <> 0) and (cd_pessoa_nota = cd_pf_cliente_p)));

c03 CURSOR FOR
	SELECT	nr_seq_conjunto,
		qt_conj_receb
	from	cm_receb_externo_conj
	where	nr_seq_receb_externo = nr_receb_externo_w
	group by nr_seq_conjunto,
		qt_conj_receb;


BEGIN

if (coalesce(dt_inicial_p::text, '') = '') then

	select	cd_cgc
	into STRICT	cd_cgc_w
	from	estabelecimento_v
	where	cd_estabelecimento = cd_estabelecimento_p;

	select	nextval('nota_fiscal_seq')
	into STRICT	nr_sequencia_w
	;
	
	begin

		insert into nota_fiscal(
			nr_sequencia,
			cd_estabelecimento,
			cd_cgc_emitente,
			cd_cgc,
			cd_serie_nf,
			nr_sequencia_nf,
			cd_operacao_nf,
			dt_emissao,
			dt_entrada_saida,
			ie_acao_nf,
			ie_emissao_nf,
			ie_tipo_frete,
			vl_mercadoria,
			vl_total_nota,
			qt_peso_bruto,
			qt_peso_liquido,
			dt_atualizacao,
			nm_usuario,
			dt_atualizacao_nrec,
			nm_usuario_nrec,
			cd_condicao_pagamento,
			cd_pessoa_fisica,
			vl_ipi,
			vl_descontos,
			vl_frete,
			vl_seguro,
			vl_despesa_acessoria,
			cd_natureza_operacao,
			vl_desconto_rateio,
			ie_situacao,
			nr_lote_contabil,
			ie_entregue_bloqueto,
			ie_tipo_nota, -- SD  Saida Digitacao -- SF  Saida Pessoa
			nr_nota_fiscal)
		values (nr_sequencia_w,
			cd_estabelecimento_p,
			cd_cgc_w,
			CASE WHEN coalesce(cd_cgc_cliente_p,0)=0 THEN null  ELSE cd_cgc_cliente_p END ,
			cd_serie_nf_p,
			1,
			cd_operacao_nf_p,
			trunc(clock_timestamp()),
			clock_timestamp(),
			'1', '0', '0', 0, 0, 0, 0,
			clock_timestamp(),
			nm_usuario_p,
			clock_timestamp(),
			nm_usuario_p,
			cd_cond_pagto_p,
			CASE WHEN coalesce(cd_pf_cliente_p,0)=0 THEN null  ELSE cd_pf_cliente_p END ,
			0, 0, 0, 0, 0,
			cd_natureza_nf_p,
			0, '1', 0, 'N',
			CASE WHEN coalesce(cd_cgc_cliente_p,0)=0 THEN 'SF'  ELSE 'SD' END ,
			nr_nota_fiscal_p);
			
	exception	
    when unique_violation then
        CALL wheb_mensagem_pck.exibir_mensagem_abort(202906);
    end;	

	select 	cd_operacao_estoque
	into STRICT	cd_operacao_estoque_w
	from 	operacao_nota
	where 	cd_operacao_nf = cd_operacao_nf_p;

	select	ie_tipo_local
	into STRICT	ie_tipo_local_w
	from	local_estoque
	where	cd_local_estoque = cd_local_estoque_p;

	ie_tipo_conta_w	:= 2;
	if (ie_tipo_local_w = '8') then
		ie_tipo_conta_w	:= 3;
	end if;

	open c01;
	loop
	fetch c01 into
		nr_seq_conjunto_w,
		qt_conj_receb_w;
	EXIT WHEN NOT FOUND; /* apply on c01 */
		begin

		select	coalesce(max(cd_material),0)
		into STRICT	cd_material_w
		from	cm_conjunto
		where	nr_sequencia = nr_seq_conjunto_w;

		if (cd_material_w <> 0) then
			begin

			select	max(coalesce(nr_item_nf,0))+ 1
			into STRICT	nr_item_w
			from	nota_fiscal_item
			where	nr_sequencia = nr_sequencia_w;

			if (coalesce(nr_item_w::text, '') = '') then
				nr_item_w	:= 1;
			end if;

			select	coalesce(b.cd_unidade_medida_estoque,a.cd_unidade_medida_estoque),
				a.cd_material_estoque
			into STRICT	cd_unidade_estoque_w,
				cd_material_estoque_w
			from   	material a,
				material_estab b
			where  	a.cd_material = cd_material_w
			and    	b.cd_material = a.cd_material
			and    	b.cd_estabelecimento = cd_estabelecimento_p;

			SELECT * FROM define_conta_material(cd_estabelecimento_p, cd_material_w, ie_tipo_conta_w, null, 0, null, 0, 0, 0, '', cd_local_estoque_p, cd_operacao_estoque_w, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, '') INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

			insert into nota_fiscal_item(
				nr_sequencia,
				cd_estabelecimento,
				cd_cgc_emitente,
				cd_serie_nf,
				nr_sequencia_nf,
				nr_item_nf,
				cd_natureza_operacao,
				qt_item_nf,
				vl_unitario_item_nf,
				vl_total_item_nf,
				dt_atualizacao,
				nm_usuario,
				vl_frete,
				vl_desconto,
				vl_despesa_acessoria,
				cd_material,
				cd_local_estoque,
				cd_unidade_medida_compra,
				qt_item_estoque,
				cd_unidade_medida_estoque,
				cd_conta_contabil,
				cd_centro_custo,
				vl_desconto_rateio,
				vl_seguro,
				cd_material_estoque,
				vl_liquido,
				pr_desconto,
				pr_desc_financ,
				vl_desc_financ,
				nr_nota_fiscal,
				cd_lote_fabricacao,
				dt_validade,
				cd_sequencia_parametro)
			values (nr_sequencia_w,
				cd_estabelecimento_p,
				cd_cgc_cliente_p,
				cd_serie_nf_p,
				1,
				nr_item_w,
				cd_natureza_nf_p,
				qt_conj_receb_w,
				0,
				0,
				clock_timestamp(),
				nm_usuario_p,
				0,
				0,
				0,
				cd_material_w,
				cd_local_estoque_p,
				cd_unidade_estoque_w,
				1,
				cd_unidade_estoque_w,
				cd_conta_contabil_w,
				cd_centro_custo_w,
				0,
				0,
				cd_material_estoque_w,
				0,
				0,
				0,
				0,
				nr_nota_fiscal_p,
				ds_lote_w,
				dt_validade_w,
				philips_contabil_pck.get_parametro_conta_contabil);

			update	cm_receb_externo
			set	nr_seq_nota = nr_sequencia_w
			where	nr_sequencia = nr_receb_externo_p;

			end;
		end if;

		end;
	end loop;
	close c01;

else

	select	count(*)
	into STRICT	qt_existe_w
	from	cm_receb_externo
	where	dt_documento between inicio_dia(dt_inicial_p) and fim_dia(dt_final_p)
	and	(dt_lib_entrega IS NOT NULL AND dt_lib_entrega::text <> '')
	and	coalesce(nr_seq_nota::text, '') = ''
	and	(((coalesce(cd_cgc_cliente_p,0) <> 0) and (cd_cnpj = cd_cgc_cliente_p)) or
		((coalesce(cd_pf_cliente_p,0) <> 0) and (cd_pessoa_nota = cd_pf_cliente_p)));

	if (coalesce(qt_existe_w,0) > 0) then
	
		select	cd_cgc
		into STRICT	cd_cgc_w
		from	estabelecimento_v
		where	cd_estabelecimento = cd_estabelecimento_p;

		select	nextval('nota_fiscal_seq')
		into STRICT	nr_sequencia_w
		;

		begin

			insert into nota_fiscal(
				nr_sequencia,
				cd_estabelecimento,
				cd_cgc_emitente,
				cd_cgc,
				cd_serie_nf,
				nr_sequencia_nf,
				cd_operacao_nf,
				dt_emissao,
				dt_entrada_saida,
				ie_acao_nf,
				ie_emissao_nf,
				ie_tipo_frete,
				vl_mercadoria,
				vl_total_nota,
				qt_peso_bruto,
				qt_peso_liquido,
				dt_atualizacao,
				nm_usuario,
				dt_atualizacao_nrec,
				nm_usuario_nrec,
				cd_condicao_pagamento,
				cd_pessoa_fisica,
				vl_ipi,
				vl_descontos,
				vl_frete,
				vl_seguro,
				vl_despesa_acessoria,
				cd_natureza_operacao,
				vl_desconto_rateio,
				ie_situacao,
				nr_lote_contabil,
				ie_entregue_bloqueto,
				ie_tipo_nota, -- SD  Saida Digitacao -- SF  Saida Pessoa
				nr_nota_fiscal)
			values (nr_sequencia_w,
				cd_estabelecimento_p,
				cd_cgc_w,
				CASE WHEN coalesce(cd_cgc_cliente_p,0)=0 THEN null  ELSE cd_cgc_cliente_p END ,
				cd_serie_nf_p,
				1,
				cd_operacao_nf_p,
				trunc(clock_timestamp()),
				clock_timestamp(),
				'1', '0', '0', 0, 0, 0, 0,
				clock_timestamp(),
				nm_usuario_p,
				clock_timestamp(),
				nm_usuario_p,
				cd_cond_pagto_p,
				CASE WHEN coalesce(cd_pf_cliente_p,0)=0 THEN null  ELSE cd_pf_cliente_p END ,
				0, 0, 0, 0, 0,
				cd_natureza_nf_p,
				0, '1', 0, 'N',
				CASE WHEN coalesce(cd_cgc_cliente_p,0)=0 THEN 'SF'  ELSE 'SD' END ,
				nr_nota_fiscal_p);

		exception	   
		when unique_violation then
			CALL wheb_mensagem_pck.exibir_mensagem_abort(202906);
		end;
			
		select 	cd_operacao_estoque
		into STRICT	cd_operacao_estoque_w
		from 	operacao_nota
		where 	cd_operacao_nf = cd_operacao_nf_p;

		select	ie_tipo_local
		into STRICT	ie_tipo_local_w
		from	local_estoque
		where	cd_local_estoque = cd_local_estoque_p;

		ie_tipo_conta_w	:= 2;
		if (ie_tipo_local_w = '8') then
			ie_tipo_conta_w	:= 3;
		end if;
	
		open C02;
		loop
		fetch C02 into	
			nr_receb_externo_w;
		EXIT WHEN NOT FOUND; /* apply on C02 */
			begin
			
			open c03;
			loop
			fetch c03 into
				nr_seq_conjunto_w,
				qt_conj_receb_w;
			EXIT WHEN NOT FOUND; /* apply on c03 */
				begin

				select	coalesce(max(cd_material),0)
				into STRICT	cd_material_w
				from	cm_conjunto
				where	nr_sequencia = nr_seq_conjunto_w;

				if (cd_material_w <> 0) then
					begin

					select	max(coalesce(nr_item_nf,0))+ 1
					into STRICT	nr_item_w
					from	nota_fiscal_item
					where	nr_sequencia = nr_sequencia_w;

					if (coalesce(nr_item_w::text, '') = '') then
						nr_item_w	:= 1;
					end if;

					select	coalesce(b.cd_unidade_medida_estoque,a.cd_unidade_medida_estoque),
						a.cd_material_estoque
					into STRICT	cd_unidade_estoque_w,
						cd_material_estoque_w
					from   	material a,
						material_estab b
					where  	a.cd_material = cd_material_w
					and    	b.cd_material = a.cd_material
					and    	b.cd_estabelecimento = cd_estabelecimento_p;

					SELECT * FROM define_conta_material(cd_estabelecimento_p, cd_material_w, ie_tipo_conta_w, null, 0, null, 0, 0, 0, '', cd_local_estoque_p, cd_operacao_estoque_w, clock_timestamp(), cd_conta_contabil_w, cd_centro_custo_w, '') INTO STRICT cd_conta_contabil_w, cd_centro_custo_w;

					insert into nota_fiscal_item(
						nr_sequencia,
						cd_estabelecimento,
						cd_cgc_emitente,
						cd_serie_nf,
						nr_sequencia_nf,
						nr_item_nf,
						cd_natureza_operacao,
						qt_item_nf,
						vl_unitario_item_nf,
						vl_total_item_nf,
						dt_atualizacao,
						nm_usuario,
						vl_frete,
						vl_desconto,
						vl_despesa_acessoria,
						cd_material,
						cd_local_estoque,
						cd_unidade_medida_compra,
						qt_item_estoque,
						cd_unidade_medida_estoque,
						cd_conta_contabil,
						cd_centro_custo,
						vl_desconto_rateio,
						vl_seguro,
						cd_material_estoque,
						vl_liquido,
						pr_desconto,
						pr_desc_financ,
						vl_desc_financ,
						nr_nota_fiscal,
						cd_lote_fabricacao,
						dt_validade,
						cd_sequencia_parametro)
					values (nr_sequencia_w,
						cd_estabelecimento_p,
						cd_cgc_cliente_p,
						cd_serie_nf_p,
						1,
						nr_item_w,
						cd_natureza_nf_p,
						qt_conj_receb_w,
						0,
						0,
						clock_timestamp(),
						nm_usuario_p,
						0,
						0,
						0,
						cd_material_w,
						cd_local_estoque_p,
						cd_unidade_estoque_w,
						1,
						cd_unidade_estoque_w,
						cd_conta_contabil_w,
						cd_centro_custo_w,
						0,
						0,
						cd_material_estoque_w,
						0,
						0,
						0,
						0,
						nr_nota_fiscal_p,
						ds_lote_w,
						dt_validade_w,
						philips_contabil_pck.get_parametro_conta_contabil);

					update	cm_receb_externo
					set	nr_seq_nota = nr_sequencia_w
					where	nr_sequencia = nr_receb_externo_w;

					end;
				end if;

				end;
			end loop;
			close c03;
			
			end;
		end loop;
		close C02;
		
	end if;
end if;

commit;

nr_seq_nota_gerada_p	:= nr_sequencia_w;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE cm_gerar_nf_receb_ext ( cd_cgc_cliente_p text, cd_pf_cliente_p text, nr_nota_fiscal_p text, cd_serie_nf_p text, cd_operacao_nf_p bigint, cd_natureza_nf_p bigint, cd_cond_pagto_p bigint, cd_local_estoque_p bigint, nr_receb_externo_p bigint, dt_inicial_p timestamp, dt_final_p timestamp, cd_estabelecimento_p bigint, nm_usuario_p text, nr_seq_nota_gerada_p INOUT bigint) FROM PUBLIC;

