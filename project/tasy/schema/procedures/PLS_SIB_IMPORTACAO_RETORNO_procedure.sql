-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE pls_sib_importacao_retorno ( nr_seq_lote_sib_p pls_sib_lote.nr_sequencia%type, nm_usuario_p text) AS $body$
DECLARE


ds_conteudo_w	w_pls_retorno_sib.ds_conteudo%type;

nr_seq_devolucao_w	pls_sib_devolucao.nr_sequencia%type;
nr_protocolo_w		pls_sib_devolucao.nr_protocolo%type;
nm_arquivo_w		pls_sib_devolucao.nm_arquivo%type;
nr_seq_lote_sib_w	pls_sib_lote.nr_sequencia%type;

--CCO
cd_beneficiario_w	pls_sib_devolucao_cco.cd_beneficiario%type;
nm_beneficiario_w	pls_sib_devolucao_cco.nm_beneficiario%type;
cd_cco_w		pls_sib_devolucao_cco.cd_cco%type;

--Resumo de mensagens de erro
cd_erro_msg_w		pls_sib_devolucao_msg.cd_erro%type;
ds_erro_msg_w		pls_sib_devolucao_msg.ds_mensagem%type;
qt_erro_msg_w		pls_sib_devolucao_msg.qt_ocorrencia%type;

--Erros
ie_tipo_movimento_w	pls_sib_devolucao_erro.ie_tipo_movimento%type;
nr_seq_dev_erro_w	pls_sib_devolucao_erro.nr_sequencia%type;
cd_campo_w		pls_sib_dev_erro_campo.cd_campo%type;
ds_campo_w		pls_sib_dev_erro_campo.ds_campo%type;
vl_campo_w		pls_sib_dev_erro_campo.vl_campo%type;
nr_seq_dev_erro_campo_w	pls_sib_dev_erro_campo.nr_sequencia%type;
cd_erro_w		pls_sib_dev_erro_conteudo.cd_erro%type;
ds_erro_w		pls_sib_dev_erro_conteudo.ds_erro%type;

ds_conteudo_campo_w	varchar(4000);
ds_conteudo_campo_erro_w varchar(4000);
ds_conteudo_erro_w	varchar(4000);


nr_seq_segurado_w	pls_segurado.nr_sequencia%type;
qt_inicial_w		integer;
qt_final_w		integer;

C01 CURSOR FOR
	SELECT	ds_conteudo
	from	w_pls_retorno_sib
	where	ie_tipo_registro = '2';

C02 CURSOR FOR
	SELECT	ds_conteudo
	from	w_pls_retorno_sib
	where	ie_tipo_registro = '5';

C03 CURSOR FOR
	SELECT	ds_conteudo
	from	w_pls_retorno_sib
	where	ie_tipo_registro = '3';

procedure inserir_resumo(nr_seq_devolucao_p	bigint,
			ie_tipo_movimento_p	text,
			ds_conteudo_p		text,
			nm_usuario_p		text) is
qt_registro_w	pls_sib_devolucao_resumo.qt_registro%type;
qt_processado_w	pls_sib_devolucao_resumo.qt_processado%type;
qt_rejeitado_w	pls_sib_devolucao_resumo.qt_rejeitado%type;
pr_acerto_w	pls_sib_devolucao_resumo.pr_acerto%type;
BEGIN

qt_registro_w	:= pls_extrair_dado_tag_xml(ds_conteudo_p,'<quantidadeRegistros>');
qt_processado_w	:= pls_extrair_dado_tag_xml(ds_conteudo_p,'<quantidadeProcessados>');
qt_rejeitado_w	:= pls_extrair_dado_tag_xml(ds_conteudo_p,'<quantidadeRejeitados>');
pr_acerto_w	:= replace(pls_extrair_dado_tag_xml(ds_conteudo_p,'<percentualAcerto>'),'.',',');

insert	into	pls_sib_devolucao_resumo(	nr_sequencia, nr_seq_devolucao, dt_atualizacao,
		nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
		ie_tipo_movimento, qt_registro, qt_processado,
		qt_rejeitado, pr_acerto)
	values (	nextval('pls_sib_devolucao_resumo_seq'), nr_seq_devolucao_p, clock_timestamp(),
		nm_usuario_p, clock_timestamp(), nm_usuario_p,
		ie_tipo_movimento_p, qt_registro_w, qt_processado_w,
		qt_rejeitado_w, pr_acerto_w);

end;

procedure atualizar_segurado_sib(nr_seq_segurado_p	pls_sib_devolucao_erro.nr_seq_segurado%type,
				ie_tipo_movimento_p	pls_sib_devolucao_erro.ie_tipo_movimento%type) is
nr_seq_sib_movimento_w	pls_sib_movimento.nr_sequencia%type;
nr_seq_sib_segurado_w	pls_segurado_sib.nr_sequencia%type;

C01 CURSOR(nr_seq_movimento_pc	pls_sib_movimento.nr_sequencia%type) FOR
	SELECT	cd_campo,
		ds_valor_anterior
	from	table(pls_sib_mov_alteracao_pck.obter_alteracoes(nr_seq_movimento_pc));

begin
select	max(a.nr_sequencia),
	max((	select	max(x.nr_sequencia)
		from	pls_sib_segurado x
		where	x.nr_seq_segurado = a.nr_seq_segurado)) nr_seq_segurado_sib
into STRICT	nr_seq_sib_movimento_w,
	nr_seq_sib_segurado_w
from	pls_sib_movimento a
where	a.nr_seq_segurado	= nr_seq_segurado_p
and	a.ie_tipo_movimento	= ie_tipo_movimento_p;

if (nr_seq_sib_movimento_w IS NOT NULL AND nr_seq_sib_movimento_w::text <> '') and (nr_seq_sib_segurado_w IS NOT NULL AND nr_seq_sib_segurado_w::text <> '') then
	for r_c01_w in C01(nr_seq_sib_movimento_w) loop
		begin
		if (r_c01_w.cd_campo = '1') then
			update	pls_sib_segurado
			set	nm_beneficiario = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '2') then
			update	pls_sib_segurado
			set	dt_nascimento = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '3') then
			update	pls_sib_segurado
			set	cd_sexo = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '4') then
			update	pls_sib_segurado
			set	nr_cpf = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '5') then
			update	pls_sib_segurado
			set	nr_pis_pasep = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '6') then
			update	pls_sib_segurado
			set	nm_mae = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '7') then
			update	pls_sib_segurado
			set	nr_cns = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '8') then
			update	pls_sib_segurado
			set	cd_beneficiario = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '9') then
			update	pls_sib_segurado
			set	nr_plano_ans = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '10') then
			update	pls_sib_segurado
			set	nr_plano_operadora = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '11') then
			update	pls_sib_segurado
			set	nr_plano_portabilidade = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '12') then
			update	pls_sib_segurado
			set	dt_contratacao = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '13') then
			update	pls_sib_segurado
			set	cd_relacao_dependencia = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '14') then
			update	pls_sib_segurado
			set	ie_cpt = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '15') then
			update	pls_sib_segurado
			set	ie_itens_excluidos_cobertura = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '16') then
			update	pls_sib_segurado
			set	nr_cnpj = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '17') then
			update	pls_sib_segurado
			set	nr_cei = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '18') then
			update	pls_sib_segurado
			set	cd_beneficiario_titular = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '20') then
			update	pls_sib_segurado
			set	dt_reativacao = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '21') then	
			update	pls_sib_segurado
			set	ie_tipo_endereco = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '22') then
			update	pls_sib_segurado
			set	ds_logradouro = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '26') then
			update	pls_sib_segurado
			set	cd_municipio_ibge = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '27') then
			update	pls_sib_segurado
			set	cd_cep = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '28') then
			update	pls_sib_segurado
			set	ie_reside_exterior = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '29') then
			update	pls_sib_segurado
			set	cd_municipio_ibge_resid = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '31') then
			update	pls_sib_segurado
			set	dt_cancelamento = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '32') then
			update	pls_sib_segurado
			set	cd_motivo_cancelamento = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '33') then
			update	pls_sib_segurado
			set	nr_logradouro = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '34') then
			update	pls_sib_segurado
			set	ds_complemento = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '35') then
			update	pls_sib_segurado
			set	ds_bairro = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		elsif (r_c01_w.cd_campo = '36') then
			update	pls_sib_segurado
			set	nr_dn = r_c01_w.ds_valor_anterior
			where	nr_sequencia	= nr_seq_sib_segurado_w;
		end if;
		end;
	end loop;
end if;

end;

begin

select	max(ds_conteudo)
into STRICT	ds_conteudo_w
from	w_pls_retorno_sib
where	ie_tipo_registro = '1';

if (coalesce(nr_seq_lote_sib_p::text, '') = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(799945);
elsif (coalesce(ds_conteudo_w::text, '') = '') then
	CALL wheb_mensagem_pck.exibir_mensagem_abort(799947);
else
	nr_protocolo_w		:= pls_extrair_dado_tag_xml(ds_conteudo_w,'<numeroProtocolo>');
	nm_arquivo_w		:= pls_extrair_dado_tag_xml(ds_conteudo_w,'<nomeArquivo>');
	
	select	max(nr_seq_lote_sib)
	into STRICT	nr_seq_lote_sib_w
	from	pls_sib_devolucao
	where	nm_arquivo	= nm_arquivo_w;
	
	if (nr_seq_lote_sib_w IS NOT NULL AND nr_seq_lote_sib_w::text <> '') then
		CALL wheb_mensagem_pck.exibir_mensagem_abort(800112,'nr_seq_lote_sib='||nr_seq_lote_sib_w); --Esse arquivo ja foi importado para o lote SIB. Nao e possivel importar o mesmo arquivo novamente.
	end if;
	
	insert	into	pls_sib_devolucao(	nr_sequencia, nr_seq_lote_sib, dt_importacao,
			nm_arquivo, dt_atualizacao, nm_usuario,
			dt_atualizacao_nrec, nm_usuario_nrec, nr_protocolo)
		values (	nextval('pls_sib_devolucao_seq'), nr_seq_lote_sib_p, clock_timestamp(),
			nm_arquivo_w, clock_timestamp(), nm_usuario_p,
			clock_timestamp(), nm_usuario_p, nr_protocolo_w)
		RETURNING nr_sequencia into nr_seq_devolucao_w;
	
	select	max(ds_conteudo)
	into STRICT	ds_conteudo_w
	from	w_pls_retorno_sib
	where	ie_tipo_registro = '4';
	
	inserir_resumo(nr_seq_devolucao_w,'1',pls_extrair_dado_tag_xml(ds_conteudo_w,'<consolidadoInclusao>'),nm_usuario_p);
	inserir_resumo(nr_seq_devolucao_w,'2',pls_extrair_dado_tag_xml(ds_conteudo_w,'<consolidadoRetificacao>'),nm_usuario_p);
	inserir_resumo(nr_seq_devolucao_w,'3',pls_extrair_dado_tag_xml(ds_conteudo_w,'<consolidadoMudancaContratual>'),nm_usuario_p);
	inserir_resumo(nr_seq_devolucao_w,'4',pls_extrair_dado_tag_xml(ds_conteudo_w,'<consolidadoCancelamento>'),nm_usuario_p);
	inserir_resumo(nr_seq_devolucao_w,'5',pls_extrair_dado_tag_xml(ds_conteudo_w,'<consolidadoReativacao>'),nm_usuario_p);
	inserir_resumo(nr_seq_devolucao_w,'6',pls_extrair_dado_tag_xml(ds_conteudo_w,'<consolidadoSemMovimentacao>'),nm_usuario_p);
	inserir_resumo(nr_seq_devolucao_w,'7',pls_extrair_dado_tag_xml(ds_conteudo_w,'<consolidadoTotal>'),nm_usuario_p);
	
	--Atualizacao de CCO
	for r_c01_w in C01 loop
		begin
		cd_beneficiario_w	:= null;
		nr_seq_segurado_w	:= null;
		cd_cco_w		:= pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<cco>');
		nm_beneficiario_w	:= pls_extrair_dado_tag_xml(r_c01_w.ds_conteudo,'<nomeBeneficiario>');
		
		if (position('codigoBeneficiario="' in r_c01_w.ds_conteudo) > 0) and (position('">' in r_c01_w.ds_conteudo) > 0) then
			qt_inicial_w	:= position('codigoBeneficiario="' in r_c01_w.ds_conteudo)+20;
			qt_final_w	:= position('">' in r_c01_w.ds_conteudo)-qt_inicial_w;
			cd_beneficiario_w := substr(r_c01_w.ds_conteudo,qt_inicial_w,qt_final_w);
			
			select	max(nr_seq_segurado)
			into STRICT	nr_seq_segurado_w
			from	pls_segurado_carteira
			where	cd_usuario_plano = cd_beneficiario_w;
			
			if (coalesce(nr_seq_segurado_w::text, '') = '') then
				select	max(nr_seq_segurado)
				into STRICT	nr_seq_segurado_w
				from	pls_segurado_cart_ant
				where	cd_usuario_ant = cd_beneficiario_w;
			end if;
		end if;
		
		insert	into	pls_sib_devolucao_cco(	nr_sequencia, nr_seq_devolucao, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				nr_seq_segurado, cd_beneficiario, cd_cco,
				nm_beneficiario)
			values (	nextval('pls_sib_devolucao_cco_seq'), nr_seq_devolucao_w, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				nr_seq_segurado_w, cd_beneficiario_w, cd_cco_w,
				nm_beneficiario_w);
		end;
	end loop;
	
	for r_c02_w in c02 loop
		begin
		cd_erro_msg_w	:= pls_extrair_dado_tag_xml(r_c02_w.ds_conteudo,'<codigoErro>');
		ds_erro_msg_w	:= pls_extrair_dado_tag_xml(r_c02_w.ds_conteudo,'<mensagemErro>');
		qt_erro_msg_w	:= pls_extrair_dado_tag_xml(r_c02_w.ds_conteudo,'<quantidadeOcorrenciaErro>');
		
		insert	into	pls_sib_devolucao_msg(	nr_sequencia, nr_seq_devolucao, dt_atualizacao,
				nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
				cd_erro, ds_mensagem, qt_ocorrencia)
			values (	nextval('pls_sib_devolucao_msg_seq'), nr_seq_devolucao_w, clock_timestamp(),
				nm_usuario_p, clock_timestamp(), nm_usuario_p,
				cd_erro_msg_w, ds_erro_msg_w, qt_erro_msg_w);
		end;
	end loop;
	
	for r_c03_w in C03 loop
		begin
		ie_tipo_movimento_w	:= pls_extrair_dado_tag_xml(r_c03_w.ds_conteudo,'codigoTipoMovimento',2);
		cd_cco_w		:= pls_extrair_dado_tag_xml(r_c03_w.ds_conteudo,'cco',2);
		cd_beneficiario_w	:= pls_extrair_dado_tag_xml(r_c03_w.ds_conteudo,'codigoBeneficiario',2);
		
		if (cd_cco_w IS NOT NULL AND cd_cco_w::text <> '') then
			select	max(nr_seq_segurado)
			into STRICT	nr_seq_segurado_w
			from	pls_sib_movimento
			where	nr_seq_lote		= nr_seq_lote_sib_p
			and	cd_cco			= cd_cco_w
			and	ie_tipo_movimento	= ie_tipo_movimento_w;
		elsif (cd_beneficiario_w IS NOT NULL AND cd_beneficiario_w::text <> '') then
			select	max(nr_seq_segurado)
			into STRICT	nr_seq_segurado_w
			from	pls_segurado_carteira
			where	cd_usuario_plano = cd_beneficiario_w;
			
			if (coalesce(nr_seq_segurado_w::text, '') = '') then
				select	max(nr_seq_segurado)
				into STRICT	nr_seq_segurado_w
				from	pls_segurado_cart_ant
				where	cd_usuario_ant = cd_beneficiario_w;
			end if;
		else
			nr_seq_segurado_w	:= null;
		end if;
		
		insert	into	pls_sib_devolucao_erro(	nr_sequencia, dt_atualizacao, nm_usuario,
				dt_atualizacao_nrec, nm_usuario_nrec, nr_seq_devolucao,
				cd_beneficiario, nr_seq_segurado, cd_cco,
				ie_tipo_movimento)
			values (	nextval('pls_sib_devolucao_erro_seq'), clock_timestamp(), nm_usuario_p,
				clock_timestamp(), nm_usuario_p, nr_seq_devolucao_w,
				cd_beneficiario_w, nr_seq_segurado_w, cd_cco_w,
				ie_tipo_movimento_w)
			RETURNING nr_sequencia into nr_seq_dev_erro_w;
		
		if (ie_tipo_movimento_w = 2) then --Se a retificacao foi rejeitada, precisa voltar os valores anteriores da tabela pls_sib_segurado, para poder gerar a retificacao novamente
			atualizar_segurado_sib(nr_seq_segurado_w, ie_tipo_movimento_w);
		end if;
		
		ds_conteudo_w		:= r_c03_w.ds_conteudo;
		while(ds_conteudo_w IS NOT NULL AND ds_conteudo_w::text <> '') loop
			begin
			ds_conteudo_campo_w	:= pls_extrair_dado_tag_xml(ds_conteudo_w,'<campoErro>');
			if (ds_conteudo_campo_w IS NOT NULL AND ds_conteudo_campo_w::text <> '') then
				ds_conteudo_w	:= replace(ds_conteudo_w,'<campoErro>'||ds_conteudo_campo_w||'</campoErro>',''); --Limpar a tag do campo ja processado
				cd_campo_w	:= pls_extrair_dado_tag_xml(ds_conteudo_campo_w,'<codigoCampo>');
				ds_campo_w	:= pls_extrair_dado_tag_xml(ds_conteudo_campo_w,'<descricaoCampo>');
				vl_campo_w	:= pls_extrair_dado_tag_xml(ds_conteudo_campo_w,'<valorCampo>');
				
				insert	into	pls_sib_dev_erro_campo(	nr_sequencia, nr_seq_dev_erro, dt_atualizacao,
						nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
						cd_campo, ds_campo, vl_campo)
					values (	nextval('pls_sib_dev_erro_campo_seq'), nr_seq_dev_erro_w, clock_timestamp(),
						nm_usuario_p, clock_timestamp(), nm_usuario_p,
						cd_campo_w, ds_campo_w, vl_campo_w)
					RETURNING nr_sequencia into nr_seq_dev_erro_campo_w;
				
				ds_conteudo_campo_erro_w	:= ds_conteudo_campo_w;
				while(ds_conteudo_campo_erro_w IS NOT NULL AND ds_conteudo_campo_erro_w::text <> '') loop
					begin
					ds_conteudo_erro_w	:= pls_extrair_dado_tag_xml(ds_conteudo_campo_erro_w,'<erro>');
					if (ds_conteudo_erro_w IS NOT NULL AND ds_conteudo_erro_w::text <> '') then
						ds_conteudo_campo_erro_w	:= replace(ds_conteudo_campo_erro_w,'<erro>'||ds_conteudo_erro_w||'</erro>',''); --Limpar a tag do campo ja processado
						cd_erro_w	:= pls_extrair_dado_tag_xml(ds_conteudo_erro_w,'<codigoErro>');
						ds_erro_w	:= pls_extrair_dado_tag_xml(ds_conteudo_erro_w,'<mensagemErro>');
						
						insert	into	pls_sib_dev_erro_conteudo(	nr_sequencia, nr_seq_dev_erro_campo, dt_atualizacao,
								nm_usuario, dt_atualizacao_nrec, nm_usuario_nrec,
								cd_erro, ds_erro)
							values (	nextval('pls_sib_dev_erro_conteudo_seq'), nr_seq_dev_erro_campo_w, clock_timestamp(),
								nm_usuario_p, clock_timestamp(), nm_usuario_p,
								cd_erro_w, ds_erro_w);
					else
						ds_conteudo_campo_erro_w	:= null;
					end if;
					end;
				end loop;
			else
				ds_conteudo_w	:= null;
			end if;
			end;
		end loop;
		
		end;
	end loop;
end if;

commit;

end;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE pls_sib_importacao_retorno ( nr_seq_lote_sib_p pls_sib_lote.nr_sequencia%type, nm_usuario_p text) FROM PUBLIC;

