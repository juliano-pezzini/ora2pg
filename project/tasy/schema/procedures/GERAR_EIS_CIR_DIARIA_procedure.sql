-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=srv-dbora-03.whebdc.com.br;service_name=DEV_1815;port=1521

SET client_encoding TO 'UTF8';





CREATE OR REPLACE PROCEDURE gerar_eis_cir_diaria ( dt_parametro_P timestamp, NM_USUARIO_P text, ds_mensagem_erro_p INOUT text) AS $body$
DECLARE

 
dt_atualizacao_w			timestamp     := clock_timestamp();
dt_parametro_fim_w			timestamp;
dt_parametro_inicio_w		timestamp;
dt_parametro_w			timestamp;
dt_entrada_unidade_w			timestamp;
dt_nascimento_w			timestamp;
dt_inicio_prevista_w			timestamp;
dt_chegada_anestesista_w		timestamp;
dt_chegada_cirurgiao_w		timestamp;
dt_fim_cirurgia_w			timestamp;
dt_fim_extubacao_w			timestamp;
dt_ano_w				timestamp;
dt_chamada_w				timestamp;
dt_chegada_sala_w			timestamp;
dt_entrada_recup_w			timestamp;
dt_liberacao_sala_w			timestamp;
qt_hora_Menor_w			bigint;
qt_hora_Seguinte_w			bigint;
nr_atendimento_w			bigint;
CD_ESTABELECIMENTO_W			smallint;
CD_CONVENIO_W				integer;
CD_MEDICO_CIRURGIAO_W		varchar(10);
CD_MEDICO_ANESTESISTA_W		varchar(10);
CD_TIPO_ANESTESIA_W			varchar(10);
CD_PROCEDIMENTO_w			bigint;
IE_ORIGEM_PROCED_W			bigint;
CD_ESPECIALIDADE_W			bigint;
CD_SETOR_ATENDIMENTO_W		integer;
CD_UNIDADE_W				varchar(20);
IE_SEXO_PACIENTE_W			varchar(1);
IE_FAIXA_ETARIA_W			varchar(10);
QT_HORA_DURACAO_W			varchar(12);
QT_OCORRENCIA_W			integer;
QT_MIN_DURACAO_W			double precision;
QT_MIN_ANESTESISTA_W			double precision;
QT_MIN_MEDICO_W			double precision;
QT_MIN_ENFERMAGEM_W			double precision;
QT_MIN_EXTURBACAO_W			double precision;
QT_MIN_HIGIENIZACAO_W		double precision;
VL_FATURADO_MAT_W			double precision;
VL_FATURADO_PROC_W			double precision;
VL_CUSTO_W				double precision;
vl_resultado_w			double precision;

ie_status_cirurgia_w			varchar(03);
ie_carater_cirurgia_w		varchar(03);
nr_cirurgia_w				bigint;
hr_cirurgia_w				varchar(20);
ie_tipo_atendimento_w		smallint;
cd_tipo_cirurgia_w			bigint;
CD_MUNICIPIO_CONVENIO_w		integer;
ie_video_w				varchar(01);
ie_porte_w			varchar(1);
dt_inicio_real_w		timestamp;
qt_min_duracao_prev_w		bigint;
nr_seq_motivo_atraso_w		bigint;
nr_seq_proced_niss_w		bigint;
ie_asa_estado_paciente_w	varchar(03);
nr_seq_proc_interno_w		bigint;

ie_motivo_cancelamento_w	varchar(15);
nr_seq_via_w			bigint;
ie_clinica_w			integer;
ie_porte_preco_w		varchar(15);
ie_sangue_w			varchar(1);
cd_procedencia_w		integer;
cd_convenio_glosa_w		integer;
cd_municipio_ibge_w		varchar(6);
cd_tipo_acomodacao_w		smallint;
nr_seq_interrupcao_w		bigint;
cd_convenio_atend_w		bigint;
ds_sala_setor_w			varchar(120);
ie_status_agenda_w		varchar(03);
ds_erro_w				varchar(255);
cd_categoria_w			varchar(10);
ie_reoperacao_w			varchar(01);
ie_prescricao_w			varchar(01);
ie_agente_w			varchar(01);
ie_porte_anest_w		varchar(15);
ds_mensagem_erro_w		varchar(2000) := null;
cd_estabelecimento_ww	estabelecimento.cd_estabelecimento%type;

C00 CURSOR FOR 
    SELECT 	a.cd_estabelecimento 
		FROM	estabelecimento a;

C01 CURSOR FOR 
    SELECT 	a.nr_atendimento, 
			coalesce(a.cd_medico_cirurgiao,'0'), 
			coalesce(a.cd_medico_anestesista,'0'), 
			a.cd_procedimento_princ, 
			a.ie_origem_proced, 
			a.nr_seq_proc_interno, 
			coalesce(a.cd_tipo_anestesia,'NI'), 
			coalesce(a.nr_min_duracao_real,0), 
			coalesce(a.cd_convenio,0), 
			coalesce(a.cd_setor_atendimento,0), 
			substr((b.cd_unidade_basica || CASE WHEN coalesce(b.cd_unidade_compl::text, '') = '' THEN NULL  ELSE ' ' END  || b.cd_unidade_compl),1,20) cd_unidade, 
			coalesce(a.cd_estabelecimento,c.cd_estabelecimento), 
			p.ie_sexo, 
			coalesce(p.dt_nascimento, clock_timestamp()), 
			a.dt_entrada_unidade, 
			a.ie_status_cirurgia, 
			a.dt_inicio_prevista, 
			a.dt_chegada_anestesista, 
			a.dt_chegada_cirurgiao, 
			a.dt_fim_cirurgia, 
			a.dt_fim_extubacao, 
			a.dt_chamada, 
			a.dt_chegada_sala, 
			a.dt_entrada_recup, 
			a.dt_liberacao_sala, 
			a.ie_carater_cirurgia, 
			a.nr_cirurgia, 
			LPAD(TO_CHAR(coalesce(a.dt_inicio_real, a.dt_inicio_prevista),'hh24'),2,0) || ':00', 
			c.ie_tipo_atendimento, 
			a.cd_tipo_cirurgia, 
			a.ie_porte, 
			dt_inicio_real, 
			nr_min_duracao_prev, 
			obter_motivo_atraso_cir(a.nr_cirurgia,'C'), 
			nr_seq_proced_niss, 
			a.ie_asa_estado_paciente, 
			a.ie_motivo_cancelamento, 
			a.nr_seq_via, 
			c.ie_clinica, 
			SUBSTR(Obter_Porte_Proc_Cirurgia(a.nr_cirurgia, NULL),1,15), 
			a.ie_sangue, 
			Obter_Convenio_Glosa_Atend(c.nr_atendimento), 
			a.nr_seq_interrupcao, 
			SUBSTR(obter_unid_setor_cirurgia(a.nr_cirurgia,'S'),1,120), 
			a.cd_categoria, 
			coalesce(a.ie_reoperacao,'N'), 
			coalesce(a.ie_video,'N'), 
			SUBSTR(obter_porte_anestesico_cir(a.nr_cirurgia),1,10) 
    FROM pessoa_fisica p, cirurgia a
LEFT OUTER JOIN atendimento_paciente c ON (a.nr_atendimento = c.nr_atendimento)
LEFT OUTER JOIN atend_paciente_unidade b ON (a.nr_atendimento = b.nr_atendimento AND a.dt_entrada_unidade = b.dt_entrada_unidade)
WHERE coalesce(a.dt_inicio_real,dt_inicio_prevista) BETWEEN dt_parametro_inicio_w AND dt_parametro_fim_w /*and		a.dt_termino is not null - Dalcastagne em 19/06/2007 OS 60258 */
  AND (a.cd_procedimento_princ IS NOT NULL AND a.cd_procedimento_princ::text <> '')    AND a.cd_estabelecimento	= cd_estabelecimento_ww AND a.cd_pessoa_fisica		= p.cd_pessoa_fisica;
/*	union all 
    select 	0, 
			nvl(a.cd_medico_cirurgiao,'0'), 
			nvl(a.cd_medico_anestesista,'0'), 
			a.cd_procedimento_princ, 
			a.ie_origem_proced, 
			nvl(a.cd_tipo_anestesia,'NI'), 
			nvl(a.nr_min_duracao_real,0), 
			nvl(a.cd_convenio,0), 
			0, 
			'' cd_unidade, 
			0, 
			p.ie_sexo, 
			nvl(p.dt_nascimento, sysdate), 
			a.dt_entrada_unidade, 
			a.ie_status_cirurgia, 
			a.dt_inicio_prevista, 
			a.dt_chegada_anestesista, 
			a.dt_chegada_cirurgiao, 
			a.dt_fim_cirurgia, 
			a.dt_fim_extubacao, 
			a.dt_chamada, 
			a.dt_chegada_sala, 
			a.dt_entrada_recup, 
			a.dt_liberacao_sala, 
			a.ie_carater_cirurgia, 
			a.nr_cirurgia, 
			Obter_Periodo_Horario(nvl(a.dt_inicio_real, a.dt_inicio_prevista)), 
			0, 
			a.cd_tipo_cirurgia 
		from 	Pessoa_fisica p, 
			cirurgia a 
		where 	a.dt_inicio_prevista between dt_parametro_inicio_w and dt_parametro_fim_w 
		and	a.dt_termino is null 
		and	a.dt_inicio_real is not null 
		and	a.nr_atendimento is not null 
		and	a.cd_procedimento_princ is not null 
		and	a.cd_pessoa_fisica		= p.cd_pessoa_fisica; */
 
 

BEGIN 
dt_parametro_fim_w		:= (TRUNC(dt_parametro_p, 'dd') + 1) - (1/86400);
/*dt_parametro_inicio_w	:= (trunc(dt_parametro_p, 'dd') + (1/86400)); */
 
dt_parametro_inicio_w	:= TRUNC(dt_parametro_p, 'dd');
 
dt_parametro_w		:= TRUNC(dt_parametro_p, 'month');
dt_ano_w			:= TRUNC(dt_parametro_p, 'year');
 
 
DELETE FROM eis_cirurgia 
WHERE 	TRUNC(dt_referencia,'dd') 	= TRUNC(dt_parametro_p, 'dd') 
AND	ie_periodo	= 'D';
 
OPEN C00;
LOOP 
	FETCH C00 INTO cd_estabelecimento_ww;
	EXIT WHEN NOT FOUND; /* apply on C00 */
	BEGIN 
 
	OPEN C01;
	LOOP 
		FETCH C01 INTO 	nr_atendimento_w, 
					cd_medico_cirurgiao_w, 
					cd_medico_anestesista_w, 
					cd_procedimento_w, 
					ie_origem_proced_w, 
					nr_seq_proc_interno_w, 
					cd_tipo_anestesia_w, 
					qt_min_duracao_w, 
					cd_convenio_w, 
					cd_setor_atendimento_w, 
					cd_unidade_w, 
					cd_estabelecimento_w, 
					ie_sexo_paciente_w, 
					dt_nascimento_w, 
					dt_entrada_unidade_w, 
					ie_status_cirurgia_w, 
					dt_inicio_prevista_w, 
					dt_chegada_anestesista_w, 
					dt_chegada_cirurgiao_w, 
					dt_fim_cirurgia_w, 
					dt_fim_extubacao_w, 
					dt_chamada_w, 
					dt_chegada_sala_w, 
					dt_entrada_recup_w, 
					dt_liberacao_sala_w, 
					ie_carater_cirurgia_w, 
					nr_cirurgia_w, 
					hr_cirurgia_w, 
					ie_tipo_atendimento_w, 
					cd_tipo_cirurgia_w, 
					ie_porte_w, 
					dt_inicio_real_w, 
					qt_min_duracao_prev_w, 
					nr_seq_motivo_atraso_w, 
					nr_seq_proced_niss_w, 
					ie_asa_estado_paciente_w, 
					ie_motivo_cancelamento_w, 
					nr_seq_via_w, 
					ie_clinica_w, 
					ie_porte_preco_w, 
					ie_sangue_w, 
					cd_convenio_glosa_w, 
					nr_seq_interrupcao_w, 
					ds_sala_setor_w, 
					cd_categoria_w, 
					ie_reoperacao_w, 
					ie_video_w, 
					ie_porte_anest_w;
		 EXIT WHEN NOT FOUND; /* apply on C01 */
		BEGIN 
 
		SELECT	coalesce(MAX(CD_MUNICIPIO_CONVENIO),0), 
			coalesce(max(obter_convenio_atendimento(nr_atendimento)),0) 
		INTO STRICT	CD_MUNICIPIO_CONVENIO_w, 
			cd_convenio_atend_w 
		FROM	atend_categoria_convenio 
		WHERE	nr_atendimento	= nr_atendimento_w;
		 
		SELECT	max(SUBSTR(obter_cod_mun_ibge_atend_ind(nr_atendimento_w),1,6)) 
		INTO STRICT	cd_municipio_ibge_w 
		;
 
		if (ie_video_w = 'N') then 
			SELECT	coalesce(MAX('S'),'N') 
			INTO STRICT	ie_video_w 
			FROM	procedimento_paciente 
			WHERE	nr_cirurgia	= nr_cirurgia_w 
			AND	ie_video	= 'S';
		end if;	
		 
		SELECT	max(cd_procedencia), 
			max(ie_status_agenda) 
		INTO STRICT	cd_procedencia_w, 
			ie_status_agenda_w 
		FROM	agenda_paciente 
		WHERE	nr_cirurgia	= nr_cirurgia_w;
		 
		 
		select	max(a.CD_TIPO_ACOMODACAO) 
		into STRICT	cd_tipo_acomodacao_w 
		from	atend_categoria_convenio a 
		where	a.nr_atendimento	= nr_atendimento_w 
		and	a.CD_CONVENIO 		= cd_convenio_w 
		and 	a.dt_inicio_vigencia  = (SELECT max(dt_inicio_vigencia) 
						  from Atend_categoria_convenio b 
						  where nr_atendimento = nr_atendimento_w);
						  
		select	coalesce(max('S'),'N') 
		into STRICT	ie_prescricao_w 
		from 	prescr_medica 
		where 	nr_cirurgia 		= nr_cirurgia_w 
		and	ie_tipo_prescr_cirur	= 2;
		 
		select	coalesce(max('S'),'N') 
		into STRICT	ie_agente_w 
		from	cirurgia_agente_anestesico 
		where	nr_cirurgia = nr_cirurgia_w;
		 
 
 
	-- Obter dados Adicionais ----------------------------------------------- 
 
		SELECT	somente_numero(obter_especialidade_medico(cd_medico_cirurgiao_w, 'C')) 
		INTO STRICT	cd_especialidade_w 
		;
		IF (coalesce(cd_especialidade_w,0) = 0) THEN 
			BEGIN 
			SELECT	cd_especialidade 
			INTO STRICT	cd_especialidade_w 
			FROM	estrutura_procedimento_v 
			WHERE	cd_procedimento	= cd_procedimento_w 
			 AND	ie_origem_proced	= ie_origem_proced_w;
			EXCEPTION 
				WHEN no_data_found THEN 
				cd_especialidade_w	:= 0;
			END;
		END IF;
		ie_faixa_etaria_w		:= TO_CHAR(TRUNC(TRUNC((clock_timestamp() - dt_nascimento_w) / 365)/5) * 5,'000') || 
						  TO_CHAR((TRUNC(TRUNC((clock_timestamp() - dt_nascimento_w) / 365)/5) * 5)+5,'000');
		ie_faixa_etaria_w		:= SUBSTR(ie_faixa_etaria_w,2,8);
 
		BEGIN 
		qt_hora_Menor_w		:= TRUNC(qt_min_duracao_w /60);
		qt_hora_Seguinte_w		:= qt_hora_menor_w + 1;
		qt_hora_duracao_w		:= qt_hora_menor_w || ':00' || ' ' || qt_hora_seguinte_w || ':00';
		qt_ocorrencia_w		:= 1;
		qt_min_anestesista_w		:= (dt_chegada_anestesista_w - dt_inicio_prevista_w) * 1440;
		qt_min_medico_w		:= (dt_chegada_cirurgiao_w - dt_inicio_prevista_w) * 1440;
		qt_min_enfermagem_w		:= (dt_chegada_sala_w - dt_chamada_w) * 1440;
		qt_min_exturbacao_w		:= (dt_fim_extubacao_w - dt_fim_cirurgia_w) * 1440;
		qt_min_higienizacao_w	:= (dt_entrada_recup_w - dt_liberacao_sala_w) * 1440;
		 
		EXCEPTION 
		WHEN OTHERS THEN 
		if (coalesce(ds_mensagem_erro_w,'XPTO') <> 'XPTO') then 
			ds_mensagem_erro_w := substr(ds_mensagem_erro_w || '; ',1,2000);
		end if;
 
		ds_mensagem_erro_w := substr(ds_mensagem_erro_w || wheb_mensagem_pck.get_texto(990500, 'NM_ESTABELECIMENTO='||obter_nome_estabelecimento(cd_estabelecimento_ww) || ';DS_ERRO=' || (wheb_mensagem_pck.get_texto(195126, 'NR_CIRURGIA_P='|| nr_cirurgia_w || ';QT_MIN_DURACAO_P=' || qt_min_duracao_w))) ,1,2000);
 
		END;
 
		/* Matheus OS 43197 em 12/01/2007 inclui vl_custo e vl_resultado*/
 
		SELECT	SUM(coalesce(vl_material,0)), 
			SUM(coalesce(vl_procedimento,0)), 
			SUM(coalesce(vl_custo,0)), 
			SUM((coalesce(vl_material,0) + coalesce(vl_procedimento,0)) - coalesce(vl_custo,0)) vl_resultado /* Oraci em 03/12/2007 OS74874 Inclui a soma dos materiais 
 
	*/
 
		INTO STRICT	vl_faturado_mat_w, 
			vl_faturado_proc_w, 
			vl_custo_w, 
			vl_resultado_w 
		FROM	conta_paciente_resumo 
		WHERE	nr_cirugia 		= nr_cirurgia_w;
 
	-- Atualizar a tabela ----------------------------------------------- 
 
		BEGIN 
	/*	update	EIS_Cirurgia 
			set qt_ocorrencia	= qt_ocorrencia + 1, 
				qt_min_duracao = qt_min_duracao + qt_min_duracao_w, 
				vl_faturado	= vl_faturado + vl_faturado_mat_w + vl_faturado_proc_w, 
				vl_Custo		= vl_Custo + vl_Custo_w 
 
		where	dt_referencia		= trunc(dt_parametro_p, 'dd') 
		 and	cd_estabelecimento 	= cd_estabelecimento_w 
		 and 	cd_convenio		= cd_convenio_w 
		 and 	cd_medico_cirurgiao	= cd_medico_cirurgiao_w 
		 and 	cd_medico_anestesista	= cd_medico_anestesista_w 
		 and 	cd_tipo_anestesia	= cd_tipo_anestesia_w 
		 and 	cd_procedimento	= cd_procedimento_w 
		 and 	ie_origem_proced	= ie_origem_proced_w 
		 and 	cd_especialidade	= cd_especialidade_w 
		 and 	cd_setor_atendimento	= cd_setor_atendimento_w 
		 and 	cd_Unidade		= cd_unidade_w 
		 and 	ie_sexo_paciente	= ie_sexo_paciente_w 
		 and 	ie_faixa_etaria	= ie_faixa_etaria_w 
		 and 	qt_hora_duracao	= qt_hora_duracao_w 
		 and ie_carater_cirurgia	= ie_carater_cirurgia_w; 
		if sql%notfound then 
			begin */
 
			INSERT	INTO EIS_Cirurgia( 
						dt_referencia, 
						cd_estabelecimento, 
				cd_convenio, 
				cd_medico_cirurgiao, 
				cd_medico_anestesista, 
				cd_tipo_anestesia, 
				cd_procedimento, 
					ie_origem_proced, 
				cd_especialidade, 
				cd_setor_atendimento, 
				cd_Unidade, 
				ie_sexo_paciente, 
				ie_faixa_etaria, 
				qt_hora_duracao, 
				qt_ocorrencia, 
					qt_min_duracao, 
					vl_faturado, 
					vl_Custo, 
				vl_resultado, 
				ie_status_cirurgia, 
				qt_min_anestesista, 
				qt_min_medico, 
				qt_min_enfermagem, 
				qt_min_exturbacao, 
				qt_min_higienizacao, 
				ie_carater_cirurgia, 
				ie_periodo, 
				hr_cirurgia, 
				ie_tipo_atendimento, 
				cd_tipo_cirurgia, 
				CD_MUNICIPIO_CONVENIO, 
				ie_video, 
				ie_porte, 
				dt_inicio_real, 
				qt_min_duracao_prev, 
				dt_inicio_prevista, 
				nr_seq_motivo_atraso, 
				nr_seq_proced_niss, 
				ie_asa_estado_paciente, 
				nr_seq_proc_interno, 
				cd_motivo_cancelamento, 
				nr_seq_via, 
				ie_clinica, 
				ie_porte_preco, 
				ie_sangue, 
				cd_procedencia, 
				cd_convenio_glosa, 
				cd_municipio_ibge, 
				cd_tipo_acomodacao, 
				nr_seq_interrupcao, 
				cd_convenio_atendimento, 
				ds_sala_setor, 
				ie_status_agenda, 
				nr_atendimento, 
				cd_categoria, 
				ie_reoperacao, 
				ie_prescr_pepo, 
				ie_agente_pepo, 
				IE_PORTE_ANESTESICO) 
			VALUES ( 
						TRUNC(dt_parametro_inicio_w, 'dd'), 
						cd_estabelecimento_w, 
				cd_convenio_w, 
				cd_medico_cirurgiao_w, 
				cd_medico_anestesista_w, 
				cd_tipo_anestesia_w, 
				cd_procedimento_w, 
					ie_origem_proced_w, 
				cd_especialidade_w, 
				cd_setor_atendimento_w, 
				cd_Unidade_w, 
				ie_sexo_paciente_w, 
				ie_faixa_etaria_w, 
				qt_hora_duracao_w, 
				qt_ocorrencia_w, 
					qt_min_duracao_w, 
					(vl_faturado_mat_w + vl_faturado_proc_w), 
					vl_Custo_w, 
				vl_resultado_w, 
				ie_status_cirurgia_w, 
				qt_min_anestesista_w, 
				qt_min_medico_w, 
				qt_min_enfermagem_w, 
				qt_min_exturbacao_w, 
				qt_min_higienizacao_w, 
				ie_carater_cirurgia_w, 
				'D', hr_cirurgia_w, CASE WHEN ie_tipo_atendimento_w=0 THEN  NULL  ELSE ie_tipo_atendimento_w END , cd_tipo_cirurgia_w, 
				CASE WHEN CD_MUNICIPIO_CONVENIO_w=0 THEN  NULL  ELSE CD_MUNICIPIO_CONVENIO_w END , ie_video_w, 
				ie_porte_w, 
				dt_inicio_real_w, 
				qt_min_duracao_prev_w, 
				dt_inicio_prevista_w, 
				nr_seq_motivo_atraso_w, 
				nr_seq_proced_niss_w, 
				ie_asa_estado_paciente_w, 
				nr_seq_proc_interno_w, 
				ie_motivo_cancelamento_w, 
				nr_seq_via_w, 
				ie_clinica_w, 
				ie_porte_preco_w, 
				ie_sangue_w, 
				cd_procedencia_w, 
				cd_convenio_glosa_w, 
				cd_municipio_ibge_w, 
				cd_tipo_acomodacao_w, 
				nr_seq_interrupcao_w, 
				cd_convenio_atend_w, 
				ds_sala_setor_w, 
				ie_status_agenda_w, 
				nr_atendimento_w, 
				cd_categoria_w, 
				ie_reoperacao_w, 
				ie_prescricao_w, 
				ie_agente_w, 
				ie_porte_anest_w);
			EXCEPTION 
				WHEN OTHERS THEN 
					BEGIN 
					ds_erro_w := SQLERRM(SQLSTATE);
					if (coalesce(ds_mensagem_erro_w,'XPTO') <> 'XPTO') then 
						ds_mensagem_erro_w := substr(ds_mensagem_erro_w || '; ',1,2000);
					end if;
					 
					ds_mensagem_erro_w := substr(ds_mensagem_erro_w || wheb_mensagem_pck.get_texto(990500, 'NM_ESTABELECIMENTO='||obter_nome_estabelecimento(cd_estabelecimento_ww) || ';DS_ERRO=' || (wheb_mensagem_pck.get_texto(195128, 'NR_ATENDIMENTO_P=' || nr_atendimento_w || ';DS_ERRO_P=' || SUBSTR(ds_erro_w,1,255)))) ,1,2000);
					 
					END;
				END;
	/*		end if; 
			end;*/
 
		END;
	  END LOOP;
	  CLOSE C01;
	END;
END LOOP;
CLOSE C00;
  
CALL gerar_eis_centro_cirurgico(dt_parametro_w,nm_usuario_p);
 
ds_mensagem_erro_p := ds_mensagem_erro_w;
 
 
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE gerar_eis_cir_diaria ( dt_parametro_P timestamp, NM_USUARIO_P text, ds_mensagem_erro_p INOUT text) FROM PUBLIC;

